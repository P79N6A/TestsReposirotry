@Test public void testBlockRefCountAfterSplits() throws IOException, InterruptedException {
  Table table=null;
  try {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    table=TEST_UTIL.createTable(tableName,FAMILIES_1,1,1024);
    RegionLocator locator=TEST_UTIL.getConnection().getRegionLocator(tableName);
    String regionName=locator.getAllRegionLocations().get(0).getRegionInfo().getEncodedName();
    HRegion region=TEST_UTIL.getRSForFirstRegionInTable(tableName).getRegion(regionName);
    HStore store=region.getStores().iterator().next();
    CacheConfig cacheConf=store.getCacheConfig();
    cacheConf.setEvictOnClose(true);
    BlockCache cache=cacheConf.getBlockCache();
    Put put=new Put(ROW);
    put.addColumn(FAMILY,QUALIFIER,data);
    table.put(put);
    region.flush(true);
    put=new Put(ROW1);
    put.addColumn(FAMILY,QUALIFIER,data);
    table.put(put);
    region.flush(true);
    byte[] QUALIFIER2=Bytes.add(QUALIFIER,QUALIFIER);
    put=new Put(ROW2);
    put.addColumn(FAMILY,QUALIFIER2,data2);
    table.put(put);
    put=new Put(ROW3);
    put.addColumn(FAMILY,QUALIFIER2,data2);
    table.put(put);
    region.flush(true);
    LOG.info("About to SPLIT on " + Bytes.toString(ROW1));
    TEST_UTIL.getAdmin().split(tableName,ROW1);
    Collection<ServerName> regionServers=TEST_UTIL.getAdmin().getRegionServers();
    Iterator<ServerName> serverItr=regionServers.iterator();
    serverItr.hasNext();
    ServerName rs=serverItr.next();
    List<RegionInfo> onlineRegions=TEST_UTIL.getAdmin().getRegions(rs);
    while (onlineRegions.size() != 2) {
      onlineRegions=TEST_UTIL.getAdmin().getRegions(rs);
      Thread.sleep(100);
      LOG.info("Waiting on SPLIT to complete...");
    }
    region.compact(true);
    Iterator<CachedBlock> iterator=cache.iterator();
    iterateBlockCache(cache,iterator);
  }
  finally {
    if (table != null) {
      table.close();
    }
  }
}
