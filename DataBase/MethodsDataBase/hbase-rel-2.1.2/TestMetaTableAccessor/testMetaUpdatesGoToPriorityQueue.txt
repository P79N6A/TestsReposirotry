@Test public void testMetaUpdatesGoToPriorityQueue() throws Exception {
  Configuration c=UTIL.getConfiguration();
  c.set(RSRpcServices.REGION_SERVER_RPC_SCHEDULER_FACTORY_CLASS,SpyingRpcSchedulerFactory.class.getName());
  afterClass();
  beforeClass();
  final TableName tableName=TableName.valueOf(name.getMethodName());
  try (Admin admin=connection.getAdmin();RegionLocator rl=connection.getRegionLocator(tableName)){
    UTIL.createTable(tableName,"cf1");
    HRegionLocation loc=rl.getAllRegionLocations().get(0);
    RegionInfo parent=loc.getRegionInfo();
    long rid=1000;
    byte[] splitKey=Bytes.toBytes("a");
    RegionInfo splitA=RegionInfoBuilder.newBuilder(parent.getTable()).setStartKey(parent.getStartKey()).setEndKey(splitKey).setSplit(false).setRegionId(rid).build();
    RegionInfo splitB=RegionInfoBuilder.newBuilder(parent.getTable()).setStartKey(splitKey).setEndKey(parent.getEndKey()).setSplit(false).setRegionId(rid).build();
    MiniHBaseCluster cluster=UTIL.getMiniHBaseCluster();
    int rsIndex=cluster.getServerWithMeta();
    HRegionServer rs;
    if (rsIndex >= 0) {
      rs=cluster.getRegionServer(rsIndex);
    }
 else {
      rs=cluster.getMaster();
    }
    SpyingRpcScheduler scheduler=(SpyingRpcScheduler)rs.getRpcServer().getScheduler();
    long prevCalls=scheduler.numPriorityCalls;
    MetaTableAccessor.splitRegion(connection,parent,-1L,splitA,splitB,loc.getServerName(),1);
    assertTrue(prevCalls < scheduler.numPriorityCalls);
  }
 }
