@Test public void testTraceCreateTable() throws Exception {
  Table table;
  Span createTableSpan;
  try (TraceScope scope=TraceUtil.createTrace("creating table")){
    createTableSpan=scope.getSpan();
    table=TEST_UTIL.createTable(TableName.valueOf(name.getMethodName()),FAMILY_BYTES);
  }
   TEST_UTIL.waitFor(10000,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return (rcvr == null) ? true : rcvr.getSpans().size() >= 5;
    }
  }
);
  Collection<Span> spans=Sets.newHashSet(rcvr.getSpans());
  List<Span> roots=new LinkedList<>();
  TraceTree traceTree=new TraceTree(spans);
  roots.addAll(traceTree.getSpansByParent().find(createTableSpan.getSpanId()));
  assertEquals(1,roots.size());
  assertEquals("creating table",createTableSpan.getDescription());
  if (spans != null) {
    assertTrue(spans.size() > 5);
  }
  Put put=new Put("row".getBytes());
  put.addColumn(FAMILY_BYTES,"col".getBytes(),"value".getBytes());
  Span putSpan;
  try (TraceScope scope=TraceUtil.createTrace("doing put")){
    putSpan=scope.getSpan();
    table.put(put);
  }
   spans=rcvr.getSpans();
  traceTree=new TraceTree(spans);
  roots.clear();
  roots.addAll(traceTree.getSpansByParent().find(putSpan.getSpanId()));
  assertEquals(1,roots.size());
}
