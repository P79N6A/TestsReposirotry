/** 
 * Tests the replication scenario 0 -> 0. By default {@link BaseReplicationEndpoint#canReplicateToSameCluster()} returns false, so theReplicationSource should terminate, and no further logs should get enqueued
 */
@Test public void testLoopedReplication() throws Exception {
  LOG.info("testLoopedReplication");
  startMiniClusters(1);
  createTableOnClusters(table);
  addPeer("1",0,0);
  Thread.sleep(SLEEP_TIME);
  final ServerName rsName=utilities[0].getHBaseCluster().getRegionServer(0).getServerName();
  Waiter.waitFor(baseConfiguration,10000,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      ClusterMetrics clusterStatus=utilities[0].getAdmin().getClusterMetrics(EnumSet.of(ClusterMetrics.Option.LIVE_SERVERS));
      ServerMetrics serverLoad=clusterStatus.getLiveServerMetrics().get(rsName);
      List<ReplicationLoadSource> replicationLoadSourceList=serverLoad.getReplicationLoadSourceList();
      return replicationLoadSourceList.isEmpty();
    }
  }
);
  Table[] htables=getHTablesOnClusters(tableName);
  putAndWait(row,famName,htables[0],htables[0]);
  rollWALAndWait(utilities[0],table.getTableName(),row);
  ZKWatcher zkw=utilities[0].getZooKeeperWatcher();
  String queuesZnode=ZNodePaths.joinZNode(zkw.getZNodePaths().baseZNode,ZNodePaths.joinZNode("replication","rs"));
  List<String> listChildrenNoWatch=ZKUtil.listChildrenNoWatch(zkw,ZNodePaths.joinZNode(queuesZnode,rsName.toString()));
  assertEquals(0,listChildrenNoWatch.size());
}
