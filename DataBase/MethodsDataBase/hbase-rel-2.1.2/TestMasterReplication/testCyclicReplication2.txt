/** 
 * Tests the cyclic replication scenario of 0 -> 1 -> 2 -> 0 by adding and deleting rows to a table in each clusters and ensuring that the each of these clusters get the appropriate mutations. It also tests the grouping scenario where a cluster needs to replicate the edits originating from itself and also the edits that it received using replication from a different cluster. The scenario is explained in HBASE-9158
 */
@Test public void testCyclicReplication2() throws Exception {
  LOG.info("testCyclicReplication2");
  int numClusters=3;
  Table[] htables=null;
  try {
    startMiniClusters(numClusters);
    createTableOnClusters(table);
    addPeer("1",0,1);
    addPeer("1",1,2);
    addPeer("1",2,0);
    htables=getHTablesOnClusters(tableName);
    putAndWait(row,famName,htables[0],htables[2]);
    putAndWait(row1,famName,htables[1],htables[0]);
    putAndWait(row2,famName,htables[2],htables[1]);
    deleteAndWait(row,htables[0],htables[2]);
    deleteAndWait(row1,htables[1],htables[0]);
    deleteAndWait(row2,htables[2],htables[1]);
    int[] expectedCounts=new int[]{3,3,3};
    validateCounts(htables,put,expectedCounts);
    validateCounts(htables,delete,expectedCounts);
    disablePeer("1",2);
    putAndWait(row3,famName,htables[0],htables[1]);
    htables[1].put(new Put(row4).addColumn(famName,row4,row4));
    enablePeer("1",2);
    wait(row4,htables[0],false);
  }
  finally {
    close(htables);
    shutDownMiniClusters();
  }
}
