@Test public void testGetTasksWithFilter() throws Exception {
  TaskMonitor tm=new TaskMonitor(new Configuration());
  assertTrue("Task monitor should start empty",tm.getTasks().isEmpty());
  tm.createStatus("General task1");
  tm.createStatus("General task2");
  tm.createStatus("General task3");
  tm.createStatus("General task4");
  tm.createStatus("General task5");
  int length=5;
  ArrayList<MonitoredRPCHandler> rpcHandlers=new ArrayList<>(length);
  for (int i=0; i < length; i++) {
    MonitoredRPCHandler rpcHandler=tm.createRPCStatus("Rpc task" + i);
    rpcHandlers.add(rpcHandler);
  }
  byte[] row=new byte[]{0x01};
  Mutation m=new Put(row);
  Query q=new Scan();
  String notOperation="for test";
  rpcHandlers.get(0).setRPC("operations",new Object[]{m,q},3000);
  rpcHandlers.get(1).setRPC("operations",new Object[]{m,q},3000);
  rpcHandlers.get(2).setRPC("operations",new Object[]{m,q},3000);
  rpcHandlers.get(3).setRPC("operations",new Object[]{notOperation},3000);
  rpcHandlers.get(4).setRPC("operations",new Object[]{m,q},3000);
  MonitoredRPCHandler completed=rpcHandlers.get(4);
  completed.markComplete("Completed!");
  List<MonitoredTask> generalTasks=tm.getTasks("general");
  assertEquals(5,generalTasks.size());
  List<MonitoredTask> handlerTasks=tm.getTasks("handler");
  assertEquals(5,handlerTasks.size());
  List<MonitoredTask> rpcTasks=tm.getTasks("rpc");
  assertEquals(4,rpcTasks.size());
  List<MonitoredTask> operationTasks=tm.getTasks("operation");
  assertEquals(3,operationTasks.size());
  tm.shutdown();
}
