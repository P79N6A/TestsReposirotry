@Test public void testConversion(){
  TableName tn=TableName.valueOf("table1");
  RegionInfo hri1=RegionInfoBuilder.newBuilder(tn).setStartKey(Bytes.toBytes("a")).setEndKey(Bytes.toBytes("b")).build();
  RegionInfo hri2=RegionInfoBuilder.newBuilder(tn).setStartKey(Bytes.toBytes("b")).setEndKey(Bytes.toBytes("c")).build();
  RegionInfo hri3=RegionInfoBuilder.newBuilder(tn).setStartKey(Bytes.toBytes("c")).setEndKey(Bytes.toBytes("d")).build();
  Map<RegionInfo,Long> sizes=new HashMap<>();
  sizes.put(hri1,1024L * 1024L);
  sizes.put(hri2,1024L * 1024L * 8L);
  sizes.put(hri3,1024L * 1024L * 32L);
  HRegionServer rs=mock(HRegionServer.class);
  doCallRealMethod().when(rs).buildRegionSpaceUseReportRequest(any());
  doCallRealMethod().when(rs).convertRegionSize(any(),anyLong());
  RegionSpaceUseReportRequest requests=rs.buildRegionSpaceUseReportRequest(sizes);
  assertEquals(sizes.size(),requests.getSpaceUseCount());
  for (  RegionSpaceUse spaceUse : requests.getSpaceUseList()) {
    RegionInfo hri=ProtobufUtil.toRegionInfo(spaceUse.getRegionInfo());
    Long expectedSize=sizes.remove(hri);
    assertNotNull("Could not find size for HRI: " + hri,expectedSize);
    assertEquals(expectedSize.longValue(),spaceUse.getRegionSize());
  }
  assertTrue("Should not have any space use entries left: " + sizes,sizes.isEmpty());
}
