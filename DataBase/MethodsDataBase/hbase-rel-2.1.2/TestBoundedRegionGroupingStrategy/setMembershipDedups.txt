/** 
 * Ensure that we can use Set.add to deduplicate WALs
 */
@Test public void setMembershipDedups() throws IOException {
  final int temp=CONF.getInt(NUM_REGION_GROUPS,DEFAULT_NUM_REGION_GROUPS);
  WALFactory wals=null;
  try {
    CONF.setInt(NUM_REGION_GROUPS,temp * 4);
    FSUtils.setRootDir(CONF,TEST_UTIL.getDataTestDirOnTestFS());
    wals=new WALFactory(CONF,"setMembershipDedups");
    Set<WAL> seen=new HashSet<>(temp * 4);
    int count=0;
    for (int i=0; i < temp * 8; i++) {
      WAL maybeNewWAL=wals.getWAL(RegionInfoBuilder.newBuilder(TableName.valueOf("Table-" + ThreadLocalRandom.current().nextInt())).build());
      LOG.info("Iteration " + i + ", checking wal "+ maybeNewWAL);
      if (seen.add(maybeNewWAL)) {
        count++;
      }
    }
    assertEquals("received back a different number of WALs that are not equal() to each other " + "than the bound we placed.",temp * 4,count);
  }
  finally {
    if (wals != null) {
      wals.close();
    }
    CONF.setInt(NUM_REGION_GROUPS,temp);
  }
}
