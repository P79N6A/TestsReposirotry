@Test public void testNamespaceViolatesQuota() throws Exception {
  final String namespace=testName.getMethodName();
  final Admin admin=TEST_UTIL.getAdmin();
  try {
    admin.getNamespaceDescriptor(namespace);
  }
 catch (  NamespaceNotFoundException e) {
    NamespaceDescriptor desc=NamespaceDescriptor.create(namespace).build();
    admin.createNamespace(desc);
  }
  TableName tn1=helper.createTableWithRegions(namespace,5);
  TableName tn2=helper.createTableWithRegions(namespace,5);
  TableName tn3=helper.createTableWithRegions(namespace,5);
  final long sizeLimit=5L * SpaceQuotaHelperForTests.ONE_MEGABYTE;
  final SpaceViolationPolicy violationPolicy=SpaceViolationPolicy.DISABLE;
  QuotaSettings settings=QuotaSettingsFactory.limitNamespaceSpace(namespace,sizeLimit,violationPolicy);
  admin.setQuota(settings);
  helper.writeData(tn1,2L * SpaceQuotaHelperForTests.ONE_MEGABYTE);
  admin.flush(tn1);
  Map<TableName,SpaceQuotaSnapshot> snapshots=snapshotNotifier.copySnapshots();
  for (int i=0; i < 5; i++) {
    assertEquals("Should not see any quota violations after writing 2MB of data",0,numSnapshotsInViolation(snapshots));
    try {
      Thread.sleep(DEFAULT_WAIT_MILLIS);
    }
 catch (    InterruptedException e) {
      LOG.debug("Interrupted while sleeping.",e);
    }
    snapshots=snapshotNotifier.copySnapshots();
  }
  helper.writeData(tn2,2L * SpaceQuotaHelperForTests.ONE_MEGABYTE);
  admin.flush(tn2);
  snapshots=snapshotNotifier.copySnapshots();
  for (int i=0; i < 5; i++) {
    assertEquals("Should not see any quota violations after writing 4MB of data",0,numSnapshotsInViolation(snapshots));
    try {
      Thread.sleep(DEFAULT_WAIT_MILLIS);
    }
 catch (    InterruptedException e) {
      LOG.debug("Interrupted while sleeping.",e);
    }
    snapshots=snapshotNotifier.copySnapshots();
  }
  helper.writeData(tn3,2L * SpaceQuotaHelperForTests.ONE_MEGABYTE);
  admin.flush(tn3);
  snapshots=snapshotNotifier.copySnapshots();
  while (numSnapshotsInViolation(snapshots) < 3) {
    LOG.debug("Saw fewer violations than desired (expected 3): " + snapshots + ". Current reports: "+ master.getMasterQuotaManager().snapshotRegionSizes());
    try {
      Thread.sleep(DEFAULT_WAIT_MILLIS);
    }
 catch (    InterruptedException e) {
      LOG.debug("Interrupted while sleeping.",e);
      Thread.currentThread().interrupt();
    }
    snapshots=snapshotNotifier.copySnapshots();
  }
  SpaceQuotaSnapshot snapshot1=snapshots.remove(tn1);
  assertNotNull("tn1 should be in violation",snapshot1);
  assertEquals(violationPolicy,snapshot1.getQuotaStatus().getPolicy());
  SpaceQuotaSnapshot snapshot2=snapshots.remove(tn2);
  assertNotNull("tn2 should be in violation",snapshot2);
  assertEquals(violationPolicy,snapshot2.getQuotaStatus().getPolicy());
  SpaceQuotaSnapshot snapshot3=snapshots.remove(tn3);
  assertNotNull("tn3 should be in violation",snapshot3);
  assertEquals(violationPolicy,snapshot3.getQuotaStatus().getPolicy());
  assertTrue("Unexpected additional quota violations: " + snapshots,snapshots.isEmpty());
}
