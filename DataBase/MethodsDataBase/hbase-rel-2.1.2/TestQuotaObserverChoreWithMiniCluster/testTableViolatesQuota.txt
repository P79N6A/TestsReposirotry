@Test public void testTableViolatesQuota() throws Exception {
  TableName tn=helper.createTableWithRegions(10);
  final long sizeLimit=2L * SpaceQuotaHelperForTests.ONE_MEGABYTE;
  final SpaceViolationPolicy violationPolicy=SpaceViolationPolicy.NO_INSERTS;
  QuotaSettings settings=QuotaSettingsFactory.limitTableSpace(tn,sizeLimit,violationPolicy);
  TEST_UTIL.getAdmin().setQuota(settings);
  helper.writeData(tn,3L * SpaceQuotaHelperForTests.ONE_MEGABYTE);
  Map<TableName,SpaceQuotaSnapshot> quotaSnapshots=snapshotNotifier.copySnapshots();
  boolean foundSnapshot=false;
  while (!foundSnapshot) {
    if (quotaSnapshots.isEmpty()) {
      LOG.info("Found no violated quotas, sleeping and retrying. Current reports: " + master.getMasterQuotaManager().snapshotRegionSizes());
      sleepWithInterrupt(DEFAULT_WAIT_MILLIS);
      quotaSnapshots=snapshotNotifier.copySnapshots();
    }
 else {
      Entry<TableName,SpaceQuotaSnapshot> entry=Iterables.getOnlyElement(quotaSnapshots.entrySet());
      assertEquals(tn,entry.getKey());
      final SpaceQuotaSnapshot snapshot=entry.getValue();
      if (!snapshot.getQuotaStatus().isInViolation()) {
        LOG.info("Found a snapshot, but it was not yet in violation. " + snapshot);
        sleepWithInterrupt(DEFAULT_WAIT_MILLIS);
        quotaSnapshots=snapshotNotifier.copySnapshots();
      }
 else {
        foundSnapshot=true;
      }
    }
  }
  Entry<TableName,SpaceQuotaSnapshot> entry=Iterables.getOnlyElement(quotaSnapshots.entrySet());
  assertEquals(tn,entry.getKey());
  final SpaceQuotaSnapshot snapshot=entry.getValue();
  assertEquals("Snapshot was " + snapshot,violationPolicy,snapshot.getQuotaStatus().getPolicy());
  assertEquals(sizeLimit,snapshot.getLimit());
  assertTrue("The usage should be greater than the limit, but were " + snapshot.getUsage() + " and "+ snapshot.getLimit()+ ", respectively",snapshot.getUsage() > snapshot.getLimit());
}
