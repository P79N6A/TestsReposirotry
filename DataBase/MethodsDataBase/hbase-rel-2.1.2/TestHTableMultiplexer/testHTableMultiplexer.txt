@Test public void testHTableMultiplexer() throws Exception {
  final TableName tableName1=TableName.valueOf(name.getMethodName() + "_1");
  final TableName tableName2=TableName.valueOf(name.getMethodName() + "_2");
  final int NUM_REGIONS=10;
  final int VERSION=3;
  List<Put> failedPuts;
  boolean success;
  HTableMultiplexer multiplexer=new HTableMultiplexer(TEST_UTIL.getConfiguration(),PER_REGIONSERVER_QUEUE_SIZE);
  Table htable1=TEST_UTIL.createTable(tableName1,new byte[][]{FAMILY},VERSION,Bytes.toBytes("aaaaa"),Bytes.toBytes("zzzzz"),NUM_REGIONS);
  Table htable2=TEST_UTIL.createTable(tableName2,new byte[][]{FAMILY},VERSION,Bytes.toBytes("aaaaa"),Bytes.toBytes("zzzzz"),NUM_REGIONS);
  TEST_UTIL.waitUntilAllRegionsAssigned(tableName1);
  TEST_UTIL.waitUntilAllRegionsAssigned(tableName2);
  try (RegionLocator rl=TEST_UTIL.getConnection().getRegionLocator(tableName1)){
    byte[][] startRows=rl.getStartKeys();
    byte[][] endRows=rl.getEndKeys();
    for (int i=0; i < NUM_REGIONS; i++) {
      byte[] row=startRows[i];
      if (row == null || row.length <= 0)       continue;
      Put put=new Put(row).addColumn(FAMILY,QUALIFIER,VALUE1);
      success=multiplexer.put(tableName1,put);
      assertTrue("multiplexer.put returns",success);
      put=new Put(row).addColumn(FAMILY,QUALIFIER,VALUE1);
      success=multiplexer.put(tableName2,put);
      assertTrue("multiplexer.put failed",success);
      LOG.info("Put for " + Bytes.toStringBinary(startRows[i]) + " @ iteration "+ (i + 1));
      checkExistence(htable1,startRows[i],FAMILY,QUALIFIER);
      checkExistence(htable2,startRows[i],FAMILY,QUALIFIER);
    }
    List<Put> multiput=new ArrayList<>();
    for (int i=0; i < NUM_REGIONS; i++) {
      byte[] row=endRows[i];
      if (row == null || row.length <= 0)       continue;
      Put put=new Put(row);
      put.addColumn(FAMILY,QUALIFIER,VALUE2);
      multiput.add(put);
    }
    failedPuts=multiplexer.put(tableName1,multiput);
    assertTrue(failedPuts == null);
    for (int i=0; i < NUM_REGIONS; i++) {
      byte[] row=endRows[i];
      if (row == null || row.length <= 0)       continue;
      Get get=new Get(row);
      get.addColumn(FAMILY,QUALIFIER);
      Result r;
      int nbTry=0;
      do {
        assertTrue(nbTry++ < 50);
        Thread.sleep(100);
        r=htable1.get(get);
      }
 while (r == null || r.getValue(FAMILY,QUALIFIER) == null || Bytes.compareTo(VALUE2,r.getValue(FAMILY,QUALIFIER)) != 0);
    }
  }
 }
