/** 
 * Unit test for HBASE-21504
 */
@Test public void testFIFOCompactionPolicyExpiredEmptyHFiles() throws Exception {
  TableName tableName=TableName.valueOf("testFIFOCompactionPolicyExpiredEmptyHFiles");
  TableDescriptor desc=TableDescriptorBuilder.newBuilder(tableName).setValue(DefaultStoreEngine.DEFAULT_COMPACTION_POLICY_CLASS_KEY,FIFOCompactionPolicy.class.getName()).setValue(HConstants.HBASE_REGION_SPLIT_POLICY_KEY,DisabledRegionSplitPolicy.class.getName()).setColumnFamily(ColumnFamilyDescriptorBuilder.newBuilder(family).setTimeToLive(1).build()).build();
  Table table=TEST_UTIL.createTable(desc,null);
  long ts=System.currentTimeMillis() - 10 * 1000;
  Put put=new Put(Bytes.toBytes("row1")).addColumn(family,qualifier,ts,Bytes.toBytes("value0"));
  table.put(put);
  TEST_UTIL.getAdmin().flush(tableName);
  put=new Put(Bytes.toBytes("row2")).addColumn(family,qualifier,ts,Bytes.toBytes("value1"));
  table.put(put);
  TEST_UTIL.getAdmin().flush(tableName);
  HStore store=getStoreWithName(tableName);
  Assert.assertNotNull(store);
  Assert.assertEquals(2,store.getStorefilesCount());
  TEST_UTIL.getAdmin().majorCompact(tableName);
  for (int i=0; i < 100; i++) {
    if (store.getStorefilesCount() > 1) {
      Thread.sleep(100);
    }
 else {
      break;
    }
  }
  Assert.assertEquals(1,store.getStorefilesCount());
  HStoreFile sf=store.getStorefiles().iterator().next();
  Assert.assertNotNull(sf);
  Assert.assertEquals(0,sf.getReader().getEntries());
  put=new Put(Bytes.toBytes("row3")).addColumn(family,qualifier,ts,Bytes.toBytes("value1"));
  table.put(put);
  TEST_UTIL.getAdmin().flush(tableName);
  Assert.assertEquals(2,store.getStorefilesCount());
  TEST_UTIL.getAdmin().majorCompact(tableName);
  for (int i=0; i < 100; i++) {
    if (store.getStorefilesCount() > 1) {
      Thread.sleep(100);
    }
 else {
      break;
    }
  }
  Assert.assertEquals(1,store.getStorefilesCount());
  sf=store.getStorefiles().iterator().next();
  Assert.assertNotNull(sf);
  Assert.assertEquals(0,sf.getReader().getEntries());
}
