@Test public void testPickers() throws Exception {
  TableName tableName=TableName.valueOf(name.getMethodName());
  ColumnFamilyDescriptor columnFamilyDescriptor=ColumnFamilyDescriptorBuilder.newBuilder(HConstants.CATALOG_FAMILY).build();
  TableDescriptor desc=TableDescriptorBuilder.newBuilder(tableName).setColumnFamily(columnFamilyDescriptor).build();
  admin.createTable(desc,Bytes.toBytes("aaa"),Bytes.toBytes("zzz"),REGIONS);
  TEST_UTIL.waitUntilAllRegionsAssigned(tableName);
  TEST_UTIL.loadTable(admin.getConnection().getTable(tableName),HConstants.CATALOG_FAMILY);
  admin.flush(tableName);
  HMaster master=cluster.getMaster();
  FavoredNodesManager fnm=master.getFavoredNodesManager();
  ServerName masterServerName=master.getServerName();
  List<ServerName> excludedServers=Lists.newArrayList(masterServerName);
  final ServerName mostLoadedServer=getRSWithMaxRegions(tableName,excludedServers);
  assertNotNull(mostLoadedServer);
  int numRegions=getTableRegionsFromServer(tableName,mostLoadedServer).size();
  excludedServers.add(mostLoadedServer);
  ServerName source=getRSWithMaxRegions(tableName,excludedServers);
  assertNotNull(source);
  int regionsToMove=getTableRegionsFromServer(tableName,source).size() / 2;
  List<RegionInfo> hris=getRegionsThatCanBeMoved(tableName,mostLoadedServer);
  RegionStates rst=master.getAssignmentManager().getRegionStates();
  for (int i=0; i < regionsToMove; i++) {
    final RegionInfo regionInfo=hris.get(i);
    admin.move(regionInfo.getEncodedNameAsBytes(),Bytes.toBytes(mostLoadedServer.getServerName()));
    LOG.info("Moving region: " + hris.get(i).getRegionNameAsString() + " to "+ mostLoadedServer);
    TEST_UTIL.waitFor(60000,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return ServerName.isSameAddress(rst.getRegionServerOfRegion(regionInfo),mostLoadedServer);
      }
    }
);
  }
  final int finalRegions=numRegions + regionsToMove;
  TEST_UTIL.waitUntilNoRegionsInTransition(60000);
  TEST_UTIL.waitFor(60000,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      int numRegions=getTableRegionsFromServer(tableName,mostLoadedServer).size();
      return (numRegions == finalRegions);
    }
  }
);
  TEST_UTIL.getHBaseCluster().startRegionServerAndWait(60000);
  Map<ServerName,List<RegionInfo>> serverAssignments=Maps.newHashMap();
  ClusterMetrics status=admin.getClusterMetrics(EnumSet.of(Option.LIVE_SERVERS));
  for (  ServerName sn : status.getLiveServerMetrics().keySet()) {
    if (!ServerName.isSameAddress(sn,masterServerName)) {
      serverAssignments.put(sn,getTableRegionsFromServer(tableName,sn));
    }
  }
  RegionLocationFinder regionFinder=new RegionLocationFinder();
  regionFinder.setClusterMetrics(admin.getClusterMetrics(EnumSet.of(Option.LIVE_SERVERS)));
  regionFinder.setConf(conf);
  regionFinder.setServices(TEST_UTIL.getMiniHBaseCluster().getMaster());
  Cluster cluster=new Cluster(serverAssignments,null,regionFinder,new RackManager(conf));
  LoadOnlyFavoredStochasticBalancer balancer=(LoadOnlyFavoredStochasticBalancer)TEST_UTIL.getMiniHBaseCluster().getMaster().getLoadBalancer();
  cluster.sortServersByRegionCount();
  Integer[] servers=cluster.serverIndicesSortedByRegionCount;
  LOG.info("Servers sorted by region count:" + Arrays.toString(servers));
  LOG.info("Cluster dump: " + cluster);
  if (!mostLoadedServer.equals(cluster.servers[servers[servers.length - 1]])) {
    LOG.error("Most loaded server: " + mostLoadedServer + " does not match: "+ cluster.servers[servers[servers.length - 1]]);
  }
  assertEquals(mostLoadedServer,cluster.servers[servers[servers.length - 1]]);
  FavoredStochasticBalancer.FavoredNodeLoadPicker loadPicker=balancer.new FavoredNodeLoadPicker();
  boolean userRegionPicked=false;
  for (int i=0; i < 100; i++) {
    if (userRegionPicked) {
      break;
    }
 else {
      Cluster.Action action=loadPicker.generate(cluster);
      if (action.type == Cluster.Action.Type.MOVE_REGION) {
        Cluster.MoveRegionAction moveRegionAction=(Cluster.MoveRegionAction)action;
        RegionInfo region=cluster.regions[moveRegionAction.region];
        assertNotEquals(-1,moveRegionAction.toServer);
        ServerName destinationServer=cluster.servers[moveRegionAction.toServer];
        assertEquals(cluster.servers[moveRegionAction.fromServer],mostLoadedServer);
        if (!region.getTable().isSystemTable()) {
          List<ServerName> favNodes=fnm.getFavoredNodes(region);
          assertTrue(favNodes.contains(ServerName.valueOf(destinationServer.getHostAndPort(),-1)));
          userRegionPicked=true;
        }
      }
    }
  }
  assertTrue("load picker did not pick expected regions in 100 iterations.",userRegionPicked);
}
