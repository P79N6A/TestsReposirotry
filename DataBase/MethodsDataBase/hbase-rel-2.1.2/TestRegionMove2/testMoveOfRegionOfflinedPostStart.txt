/** 
 * Test that we make it through to the end if parent Region is offlined between start of this Move and when we go to run the move UnassignProcedure.
 */
@Test public void testMoveOfRegionOfflinedPostStart() throws Exception {
  TableName tableName=TableName.valueOf(this.name.getMethodName());
  byte[] cf=Bytes.toBytes("cf");
  Table t=TEST_UTIL.createMultiRegionTable(tableName,cf,10);
  TEST_UTIL.waitUntilAllRegionsAssigned(tableName);
  HRegionServer rs1=null;
  HRegionServer rs2=null;
  List<RegionInfo> regionsOnRS1ForTable=null;
  try (Admin admin=TEST_UTIL.getAdmin()){
    for (    RegionInfo regionInfo : admin.getRegions(tableName)) {
      byte[] startKey=regionInfo.getStartKey();
      byte[] rowKey=org.apache.hbase.thirdparty.com.google.common.primitives.Bytes.concat(startKey,Bytes.toBytes("1"));
      Put p=new Put(rowKey);
      p.addColumn(cf,Bytes.toBytes("q1"),Bytes.toBytes("value"));
      t.put(p);
    }
    rs1=TEST_UTIL.getRSForFirstRegionInTable(tableName);
    rs2=TEST_UTIL.getOtherRegionServer(rs1);
    regionsOnRS1ForTable=admin.getRegions(rs1.getServerName()).stream().filter((regionInfo) -> regionInfo.getTable().equals(tableName)).collect(Collectors.toList());
  }
   assertTrue("Expected to find at least one region for " + tableName + " on "+ rs1.getServerName()+ ", but found none",!regionsOnRS1ForTable.isEmpty());
  final RegionInfo regionToMove=regionsOnRS1ForTable.get(0);
  HMaster master=TEST_UTIL.getHBaseCluster().getMaster();
  RegionPlan rp=new RegionPlan(regionToMove,rs1.getServerName(),rs2.getServerName());
  MasterProcedureEnv env=master.getMasterProcedureExecutor().getEnvironment();
  HackedMoveRegionProcedure p=new HackedMoveRegionProcedure(env,rp);
  master.getMasterProcedureExecutor().submitProcedure(p);
  ProcedureTestingUtility.waitProcedure(master.getMasterProcedureExecutor(),p);
  assertTrue(p.split.get());
  assertTrue(rs1.getOnlineRegion(regionToMove.getRegionName()) != null);
}
