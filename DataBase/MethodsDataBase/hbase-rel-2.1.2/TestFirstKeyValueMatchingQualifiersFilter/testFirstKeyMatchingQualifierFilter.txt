/** 
 * Test the functionality of {@link FirstKeyValueMatchingQualifiersFilter#filterCell(org.apache.hadoop.hbase.Cell)}
 * @throws Exception
 */
public void testFirstKeyMatchingQualifierFilter() throws Exception {
  Set<byte[]> quals=new TreeSet<>(Bytes.BYTES_COMPARATOR);
  quals.add(COLUMN_QUALIFIER_1);
  quals.add(COLUMN_QUALIFIER_2);
  Filter filter=new FirstKeyValueMatchingQualifiersFilter(quals);
  KeyValue cell;
  cell=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_1,VAL_1);
  assertTrue("includeAndSetFlag",filter.filterCell(cell) == Filter.ReturnCode.INCLUDE);
  cell=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1);
  assertTrue("flagIsSetSkipToNextRow",filter.filterCell(cell) == Filter.ReturnCode.NEXT_ROW);
  filter.reset();
  cell=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_3,VAL_1);
  System.out.println(filter.filterCell(cell));
  assertTrue("includeFlagIsUnset",filter.filterCell(cell) == Filter.ReturnCode.INCLUDE);
  cell=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1);
  assertTrue("includeAndSetFlag",filter.filterCell(cell) == Filter.ReturnCode.INCLUDE);
  cell=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_1,VAL_1);
  assertTrue("flagIsSetSkipToNextRow",filter.filterCell(cell) == Filter.ReturnCode.NEXT_ROW);
}
