@Test public void testRecoveryAndDoubleExecution() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
  RegionInfo[] regions=MasterProcedureTestingUtility.createTable(procExec,tableName,null,ColumnFamilyName1,ColumnFamilyName2);
  insertData(tableName);
  int splitRowNum=startRowNum + rowCount / 2;
  byte[] splitKey=Bytes.toBytes("" + splitRowNum);
  assertTrue("not able to find a splittable region",regions != null);
  assertTrue("not able to find a splittable region",regions.length == 1);
  ProcedureTestingUtility.waitNoProcedureRunning(procExec);
  ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec,true);
  collectAssignmentManagerMetrics();
  long procId=procExec.submitProcedure(new SplitTableRegionProcedure(procExec.getEnvironment(),regions[0],splitKey));
  MasterProcedureTestingUtility.testRecoveryAndDoubleExecution(procExec,procId);
  ProcedureTestingUtility.assertProcNotFailed(procExec,procId);
  verify(tableName,splitRowNum);
  assertEquals(splitSubmittedCount + 1,splitProcMetrics.getSubmittedCounter().getCount());
  assertEquals(splitFailedCount,splitProcMetrics.getFailedCounter().getCount());
}
