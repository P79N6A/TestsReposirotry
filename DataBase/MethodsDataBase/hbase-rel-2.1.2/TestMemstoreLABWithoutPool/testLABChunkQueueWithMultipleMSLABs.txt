/** 
 * Test frequent chunk retirement with chunk pool triggered by lots of threads, making sure there's no memory leak (HBASE-16195)
 * @throws Exception if any error occurred
 */
@Test public void testLABChunkQueueWithMultipleMSLABs() throws Exception {
  Configuration conf=HBaseConfiguration.create();
  MemStoreLABImpl[] mslab=new MemStoreLABImpl[10];
  for (int i=0; i < 10; i++) {
    mslab[i]=new MemStoreLABImpl(conf);
  }
  List<Thread> threads=new ArrayList<>();
  final KeyValue kv=new KeyValue(Bytes.toBytes("r"),Bytes.toBytes("f"),Bytes.toBytes("q"),new byte[0]);
  for (int i=0; i < 10; i++) {
    for (int j=0; j < 10; j++) {
      threads.add(getChunkQueueTestThread(mslab[i],"testLABChunkQueue-" + j,kv));
    }
  }
  for (  Thread thread : threads) {
    thread.start();
  }
  Thread.sleep(3000);
  for (  Thread thread : threads) {
    thread.interrupt();
  }
  boolean threadsRunning=true;
  boolean alive=false;
  while (threadsRunning) {
    alive=false;
    for (    Thread thread : threads) {
      if (thread.isAlive()) {
        alive=true;
        break;
      }
    }
    if (!alive) {
      threadsRunning=false;
    }
  }
  for (int i=0; i < 10; i++) {
    mslab[i].close();
  }
  assertTrue("All the chunks must have been cleared",ChunkCreator.instance.numberOfMappedChunks() == 0);
}
