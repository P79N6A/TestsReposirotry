@Test public void testSelectiveFlushWhenEnabled() throws IOException {
  Configuration conf=new HBaseTestingUtility().getConfiguration();
  conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,200 * 1024);
  conf.set(FlushPolicyFactory.HBASE_FLUSH_POLICY_KEY,FlushAllLargeStoresPolicy.class.getName());
  conf.setLong(FlushLargeStoresPolicy.HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN,40 * 1024);
  HRegion region=initHRegion("testSelectiveFlushWithDataCompaction",conf);
  for (int i=1; i <= 1200; i++) {
    region.put(createPut(1,i));
    if (i <= 100) {
      region.put(createPut(2,i));
      if (i <= 50) {
        region.put(createPut(3,i));
      }
    }
  }
  long totalMemstoreSize=region.getMemStoreDataSize();
  long smallestSeqCF1=region.getOldestSeqIdOfStore(FAMILY1);
  long smallestSeqCF2=region.getOldestSeqIdOfStore(FAMILY2);
  long smallestSeqCF3=region.getOldestSeqIdOfStore(FAMILY3);
  MemStoreSize cf1MemstoreSize=region.getStore(FAMILY1).getMemStoreSize();
  MemStoreSize cf2MemstoreSize=region.getStore(FAMILY2).getMemStoreSize();
  MemStoreSize cf3MemstoreSize=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstore=getWAL(region).getEarliestMemStoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  assertEquals(smallestSeqCF1,smallestSeqInRegionCurrentMemstore);
  assertTrue(smallestSeqCF1 < smallestSeqCF2);
  assertTrue(smallestSeqCF2 < smallestSeqCF3);
  assertTrue(cf1MemstoreSize.getDataSize() > 0);
  assertTrue(cf2MemstoreSize.getDataSize() > 0);
  assertTrue(cf3MemstoreSize.getDataSize() > 0);
  assertEquals(totalMemstoreSize,cf1MemstoreSize.getDataSize() + cf2MemstoreSize.getDataSize() + cf3MemstoreSize.getDataSize());
  region.flush(false);
  MemStoreSize oldCF2MemstoreSize=cf2MemstoreSize;
  MemStoreSize oldCF3MemstoreSize=cf3MemstoreSize;
  cf1MemstoreSize=region.getStore(FAMILY1).getMemStoreSize();
  cf2MemstoreSize=region.getStore(FAMILY2).getMemStoreSize();
  cf3MemstoreSize=region.getStore(FAMILY3).getMemStoreSize();
  totalMemstoreSize=region.getMemStoreDataSize();
  smallestSeqInRegionCurrentMemstore=getWAL(region).getEarliestMemStoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  assertEquals(0,cf1MemstoreSize.getDataSize());
  assertEquals(MutableSegment.DEEP_OVERHEAD,cf1MemstoreSize.getHeapSize());
  assertEquals(cf2MemstoreSize,oldCF2MemstoreSize);
  assertEquals(cf3MemstoreSize,oldCF3MemstoreSize);
  assertEquals(smallestSeqInRegionCurrentMemstore,smallestSeqCF2);
  assertEquals(totalMemstoreSize,cf2MemstoreSize.getDataSize() + cf3MemstoreSize.getDataSize());
  for (int i=1200; i < 2400; i++) {
    region.put(createPut(2,i));
    if (i - 1200 < 100) {
      region.put(createPut(3,i));
    }
  }
  oldCF3MemstoreSize=region.getStore(FAMILY3).getMemStoreSize();
  region.flush(false);
  cf1MemstoreSize=region.getStore(FAMILY1).getMemStoreSize();
  cf2MemstoreSize=region.getStore(FAMILY2).getMemStoreSize();
  cf3MemstoreSize=region.getStore(FAMILY3).getMemStoreSize();
  totalMemstoreSize=region.getMemStoreDataSize();
  smallestSeqInRegionCurrentMemstore=getWAL(region).getEarliestMemStoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  assertEquals(0,cf1MemstoreSize.getDataSize());
  assertEquals(MutableSegment.DEEP_OVERHEAD,cf1MemstoreSize.getHeapSize());
  assertEquals(0,cf2MemstoreSize.getDataSize());
  assertEquals(MutableSegment.DEEP_OVERHEAD,cf2MemstoreSize.getHeapSize());
  assertEquals(cf3MemstoreSize,oldCF3MemstoreSize);
  assertEquals(totalMemstoreSize,cf3MemstoreSize.getDataSize());
  region.flush(true);
  for (int i=1; i <= 300; i++) {
    region.put(createPut(1,i));
    region.put(createPut(2,i));
    region.put(createPut(3,i));
    region.put(createPut(4,i));
    region.put(createPut(5,i));
  }
  region.flush(false);
  assertEquals(0,region.getMemStoreDataSize());
  HBaseTestingUtility.closeRegionAndWAL(region);
}
