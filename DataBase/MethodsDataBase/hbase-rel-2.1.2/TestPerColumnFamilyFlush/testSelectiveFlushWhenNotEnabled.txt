@Test public void testSelectiveFlushWhenNotEnabled() throws IOException {
  Configuration conf=new HBaseTestingUtility().getConfiguration();
  conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,200 * 1024);
  conf.set(FlushPolicyFactory.HBASE_FLUSH_POLICY_KEY,FlushAllStoresPolicy.class.getName());
  HRegion region=initHRegion("testSelectiveFlushWhenNotEnabled",conf);
  for (int i=1; i <= 1200; i++) {
    region.put(createPut(1,i));
    if (i <= 100) {
      region.put(createPut(2,i));
      if (i <= 50) {
        region.put(createPut(3,i));
      }
    }
  }
  long totalMemstoreSize=region.getMemStoreDataSize();
  MemStoreSize cf1MemstoreSize=region.getStore(FAMILY1).getMemStoreSize();
  MemStoreSize cf2MemstoreSize=region.getStore(FAMILY2).getMemStoreSize();
  MemStoreSize cf3MemstoreSize=region.getStore(FAMILY3).getMemStoreSize();
  assertTrue(cf1MemstoreSize.getDataSize() > 0);
  assertTrue(cf2MemstoreSize.getDataSize() > 0);
  assertTrue(cf3MemstoreSize.getDataSize() > 0);
  assertEquals(totalMemstoreSize,cf1MemstoreSize.getDataSize() + cf2MemstoreSize.getDataSize() + cf3MemstoreSize.getDataSize());
  region.flush(false);
  cf1MemstoreSize=region.getStore(FAMILY1).getMemStoreSize();
  cf2MemstoreSize=region.getStore(FAMILY2).getMemStoreSize();
  cf3MemstoreSize=region.getStore(FAMILY3).getMemStoreSize();
  totalMemstoreSize=region.getMemStoreDataSize();
  long smallestSeqInRegionCurrentMemstore=region.getWAL().getEarliestMemStoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  assertEquals(0,cf1MemstoreSize.getDataSize());
  assertEquals(MutableSegment.DEEP_OVERHEAD,cf1MemstoreSize.getHeapSize());
  assertEquals(0,cf2MemstoreSize.getDataSize());
  assertEquals(MutableSegment.DEEP_OVERHEAD,cf2MemstoreSize.getHeapSize());
  assertEquals(0,cf3MemstoreSize.getDataSize());
  assertEquals(MutableSegment.DEEP_OVERHEAD,cf3MemstoreSize.getHeapSize());
  assertEquals(0,totalMemstoreSize);
  assertEquals(HConstants.NO_SEQNUM,smallestSeqInRegionCurrentMemstore);
  HBaseTestingUtility.closeRegionAndWAL(region);
}
