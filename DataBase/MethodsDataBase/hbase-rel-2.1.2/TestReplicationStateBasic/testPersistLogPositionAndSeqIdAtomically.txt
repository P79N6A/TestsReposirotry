@Test public void testPersistLogPositionAndSeqIdAtomically() throws Exception {
  ServerName serverName1=ServerName.valueOf("127.0.0.1",8000,10000);
  assertTrue(rqs.getAllQueues(serverName1).isEmpty());
  String queue1="1";
  String region0="6b2c8f8555335cc9af74455b94516cbe", region1="6ecd2e9e010499f8ddef97ee8f70834f";
  for (int i=0; i < 10; i++) {
    rqs.addWAL(serverName1,queue1,getFileName("file1",i));
  }
  List<String> queueIds=rqs.getAllQueues(serverName1);
  assertEquals(1,queueIds.size());
  assertThat(queueIds,hasItems("1"));
  List<String> wals1=rqs.getWALsInQueue(serverName1,queue1);
  assertEquals(10,wals1.size());
  for (int i=0; i < 10; i++) {
    assertThat(wals1,hasItems(getFileName("file1",i)));
  }
  for (int i=0; i < 10; i++) {
    assertEquals(0,rqs.getWALPosition(serverName1,queue1,getFileName("file1",i)));
  }
  assertEquals(HConstants.NO_SEQNUM,rqs.getLastSequenceId(region0,queue1));
  assertEquals(HConstants.NO_SEQNUM,rqs.getLastSequenceId(region1,queue1));
  for (int i=0; i < 10; i++) {
    rqs.setWALPosition(serverName1,queue1,getFileName("file1",i),(i + 1) * 100,ImmutableMap.of(region0,i * 100L,region1,(i + 1) * 100L));
  }
  for (int i=0; i < 10; i++) {
    assertEquals((i + 1) * 100,rqs.getWALPosition(serverName1,queue1,getFileName("file1",i)));
  }
  assertEquals(900L,rqs.getLastSequenceId(region0,queue1));
  assertEquals(1000L,rqs.getLastSequenceId(region1,queue1));
  rqs.setWALPosition(serverName1,queue1,getFileName("file1",0),11 * 100,ImmutableMap.of(region0,899L,region1,1001L));
  assertEquals(900L,rqs.getLastSequenceId(region0,queue1));
  assertEquals(1001L,rqs.getLastSequenceId(region1,queue1));
}
