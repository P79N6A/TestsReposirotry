@Test public void testHfileRefsReplicationQueues() throws ReplicationException, KeeperException {
  rp.init();
  List<Pair<Path,Path>> files1=new ArrayList<>(3);
  files1.add(new Pair<>(null,new Path("file_1")));
  files1.add(new Pair<>(null,new Path("file_2")));
  files1.add(new Pair<>(null,new Path("file_3")));
  assertTrue(rqs.getReplicableHFiles(ID_ONE).isEmpty());
  assertEquals(0,rqs.getAllPeersFromHFileRefsQueue().size());
  rp.getPeerStorage().addPeer(ID_ONE,ReplicationPeerConfig.newBuilder().setClusterKey(KEY_ONE).build(),true);
  rqs.addPeerToHFileRefs(ID_ONE);
  rqs.addHFileRefs(ID_ONE,files1);
  assertEquals(1,rqs.getAllPeersFromHFileRefsQueue().size());
  assertEquals(3,rqs.getReplicableHFiles(ID_ONE).size());
  List<String> hfiles2=new ArrayList<>(files1.size());
  for (  Pair<Path,Path> p : files1) {
    hfiles2.add(p.getSecond().getName());
  }
  String removedString=hfiles2.remove(0);
  rqs.removeHFileRefs(ID_ONE,hfiles2);
  assertEquals(1,rqs.getReplicableHFiles(ID_ONE).size());
  hfiles2=new ArrayList<>(1);
  hfiles2.add(removedString);
  rqs.removeHFileRefs(ID_ONE,hfiles2);
  assertEquals(0,rqs.getReplicableHFiles(ID_ONE).size());
  rp.getPeerStorage().removePeer(ID_ONE);
}
