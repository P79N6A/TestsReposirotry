@Test public void testReplicationPeers() throws Exception {
  rp.init();
  try {
    rp.getPeerStorage().setPeerState("bogus",true);
    fail("Should have thrown an IllegalArgumentException when passed a bogus peerId");
  }
 catch (  ReplicationException e) {
  }
  try {
    rp.getPeerStorage().setPeerState("bogus",false);
    fail("Should have thrown an IllegalArgumentException when passed a bogus peerId");
  }
 catch (  ReplicationException e) {
  }
  try {
    assertFalse(rp.addPeer("bogus"));
    fail("Should have thrown an ReplicationException when passed a bogus peerId");
  }
 catch (  ReplicationException e) {
  }
  assertNumberOfPeers(0);
  rp.getPeerStorage().addPeer(ID_ONE,new ReplicationPeerConfig().setClusterKey(KEY_ONE),true);
  assertNumberOfPeers(1);
  rp.getPeerStorage().addPeer(ID_TWO,new ReplicationPeerConfig().setClusterKey(KEY_TWO),true);
  assertNumberOfPeers(2);
  assertEquals(KEY_ONE,ZKConfig.getZooKeeperClusterKey(ReplicationUtils.getPeerClusterConfiguration(rp.getPeerStorage().getPeerConfig(ID_ONE),rp.getConf())));
  rp.getPeerStorage().removePeer(ID_ONE);
  rp.removePeer(ID_ONE);
  assertNumberOfPeers(1);
  rp.getPeerStorage().addPeer(ID_ONE,new ReplicationPeerConfig().setClusterKey(KEY_ONE),true);
  rp.addPeer(ID_ONE);
  assertNumberOfPeers(2);
  assertTrue(rp.getPeer(ID_ONE).isPeerEnabled());
  rp.getPeerStorage().setPeerState(ID_ONE,false);
  ReplicationPeerImpl peer=rp.getPeer(ID_ONE);
  rp.refreshPeerState(peer.getId());
  assertEquals(PeerState.DISABLED,peer.getPeerState());
  assertConnectedPeerStatus(false,ID_ONE);
  rp.getPeerStorage().setPeerState(ID_ONE,true);
  rp.refreshPeerState(peer.getId());
  assertEquals(PeerState.ENABLED,peer.getPeerState());
  assertConnectedPeerStatus(true,ID_ONE);
  rp.removePeer(ID_ONE);
  assertNumberOfPeers(2);
}
