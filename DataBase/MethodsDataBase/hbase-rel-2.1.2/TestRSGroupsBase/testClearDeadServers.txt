@Test public void testClearDeadServers() throws Exception {
  LOG.info("testClearDeadServers");
  final RSGroupInfo newGroup=addGroup(getGroupName(name.getMethodName()),3);
  NUM_DEAD_SERVERS=cluster.getClusterMetrics().getDeadServerNames().size();
  ServerName targetServer=ServerName.parseServerName(newGroup.getServers().iterator().next().toString());
  AdminProtos.AdminService.BlockingInterface targetRS=((ClusterConnection)admin.getConnection()).getAdmin(targetServer);
  try {
    targetServer=ProtobufUtil.toServerName(targetRS.getServerInfo(null,GetServerInfoRequest.newBuilder().build()).getServerInfo().getServerName());
    targetRS.stopServer(null,AdminProtos.StopServerRequest.newBuilder().setReason("Die").build());
    NUM_DEAD_SERVERS++;
  }
 catch (  Exception e) {
  }
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return !master.getServerManager().areDeadServersInProgress() && cluster.getClusterMetrics().getDeadServerNames().size() == NUM_DEAD_SERVERS;
    }
  }
);
  assertFalse(cluster.getClusterMetrics().getLiveServerMetrics().containsKey(targetServer));
  assertTrue(cluster.getClusterMetrics().getDeadServerNames().contains(targetServer));
  assertTrue(newGroup.getServers().contains(targetServer.getAddress()));
  List<ServerName> notClearedServers=admin.clearDeadServers(Lists.newArrayList(targetServer));
  assertEquals(0,notClearedServers.size());
  Set<Address> newGroupServers=rsGroupAdmin.getRSGroupInfo(newGroup.getName()).getServers();
  assertFalse(newGroupServers.contains(targetServer.getAddress()));
  assertEquals(2,newGroupServers.size());
}
