@Test public void testCreateWhenRsgroupNoOnlineServers() throws Exception {
  LOG.info("testCreateWhenRsgroupNoOnlineServers");
  final RSGroupInfo appInfo=addGroup("appInfo",1);
  Iterator<Address> iterator=appInfo.getServers().iterator();
  List<ServerName> serversToDecommission=new ArrayList<>();
  ServerName targetServer=ServerName.parseServerName(iterator.next().toString());
  AdminProtos.AdminService.BlockingInterface targetRS=((ClusterConnection)admin.getConnection()).getAdmin(targetServer);
  targetServer=ProtobufUtil.toServerName(targetRS.getServerInfo(null,GetServerInfoRequest.newBuilder().build()).getServerInfo().getServerName());
  assertTrue(master.getServerManager().getOnlineServers().containsKey(targetServer));
  serversToDecommission.add(targetServer);
  admin.decommissionRegionServers(serversToDecommission,true);
  assertEquals(1,admin.listDecommissionedRegionServers().size());
  final TableName tableName=TableName.valueOf(tablePrefix + "_ns",name.getMethodName());
  admin.createNamespace(NamespaceDescriptor.create(tableName.getNamespaceAsString()).addConfiguration(RSGroupInfo.NAMESPACE_DESC_PROP_GROUP,appInfo.getName()).build());
  final HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.addFamily(new HColumnDescriptor("f"));
  try {
    admin.createTable(desc);
    fail("Shouldn't create table successfully!");
  }
 catch (  Exception e) {
    LOG.debug("create table error",e);
  }
  admin.recommissionRegionServer(targetServer,null);
  assertEquals(0,admin.listDecommissionedRegionServers().size());
  admin.createTable(desc);
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return getTableRegionMap().get(desc.getTableName()) != null;
    }
  }
);
}
