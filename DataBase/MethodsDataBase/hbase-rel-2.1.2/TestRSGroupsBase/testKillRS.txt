@Test public void testKillRS() throws Exception {
  RSGroupInfo appInfo=addGroup("appInfo",1);
  final TableName tableName=TableName.valueOf(tablePrefix + "_ns",name.getMethodName());
  admin.createNamespace(NamespaceDescriptor.create(tableName.getNamespaceAsString()).addConfiguration(RSGroupInfo.NAMESPACE_DESC_PROP_GROUP,appInfo.getName()).build());
  final HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.addFamily(new HColumnDescriptor("f"));
  admin.createTable(desc);
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return getTableRegionMap().get(desc.getTableName()) != null;
    }
  }
);
  ServerName targetServer=ServerName.parseServerName(appInfo.getServers().iterator().next().toString());
  AdminProtos.AdminService.BlockingInterface targetRS=((ClusterConnection)admin.getConnection()).getAdmin(targetServer);
  RegionInfo targetRegion=ProtobufUtil.getOnlineRegions(targetRS).get(0);
  Assert.assertEquals(1,ProtobufUtil.getOnlineRegions(targetRS).size());
  try {
    targetRS.stopServer(null,AdminProtos.StopServerRequest.newBuilder().setReason("Die").build());
  }
 catch (  Exception e) {
  }
  assertFalse(cluster.getClusterMetrics().getLiveServerMetrics().containsKey(targetServer));
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return cluster.getClusterMetrics().getRegionStatesInTransition().isEmpty();
    }
  }
);
  Set<Address> newServers=Sets.newHashSet();
  newServers.add(rsGroupAdmin.getRSGroupInfo(RSGroupInfo.DEFAULT_GROUP).getServers().iterator().next());
  rsGroupAdmin.moveServers(newServers,appInfo.getName());
  admin.disableTable(tableName);
  admin.enableTable(tableName);
  TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return cluster.getClusterMetrics().getRegionStatesInTransition().isEmpty();
    }
  }
);
  targetServer=ServerName.parseServerName(newServers.iterator().next().toString());
  targetRS=((ClusterConnection)admin.getConnection()).getAdmin(targetServer);
  Assert.assertEquals(1,ProtobufUtil.getOnlineRegions(targetRS).size());
  Assert.assertEquals(tableName,ProtobufUtil.getOnlineRegions(targetRS).get(0).getTable());
}
