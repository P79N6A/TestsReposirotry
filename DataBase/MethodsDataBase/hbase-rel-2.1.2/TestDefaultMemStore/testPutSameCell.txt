@Test public void testPutSameCell(){
  byte[] bytes=Bytes.toBytes(getName());
  KeyValue kv=new KeyValue(bytes,bytes,bytes,bytes);
  MemStoreSizing sizeChangeForFirstCell=new NonThreadSafeMemStoreSizing();
  this.memstore.add(kv,sizeChangeForFirstCell);
  MemStoreSizing sizeChangeForSecondCell=new NonThreadSafeMemStoreSizing();
  this.memstore.add(kv,sizeChangeForSecondCell);
  assertEquals(Segment.getCellLength(kv),sizeChangeForFirstCell.getMemStoreSize().getDataSize());
  Segment segment=this.memstore.getActive();
  MemStoreLAB msLab=segment.getMemStoreLAB();
  if (msLab != null) {
    if (msLab.isOnHeap()) {
      assertTrue("HeapSize should always bigger or equal than data size",sizeChangeForFirstCell.getHeapSize() >= sizeChangeForFirstCell.getDataSize());
      assertTrue("HeapSize should always bigger or equal than data size",sizeChangeForSecondCell.getHeapSize() >= sizeChangeForSecondCell.getDataSize());
    }
 else {
      assertTrue("OffHeapSize should always bigger or equal than data size",sizeChangeForFirstCell.getOffHeapSize() >= sizeChangeForFirstCell.getDataSize());
      assertTrue("OffHeapSize should always bigger or equal than data size",sizeChangeForSecondCell.getOffHeapSize() >= sizeChangeForSecondCell.getDataSize());
    }
    assertEquals(Segment.getCellLength(kv),sizeChangeForSecondCell.getMemStoreSize().getDataSize());
    if (msLab instanceof MemStoreLABImpl) {
      assertEquals(2 * Segment.getCellLength(kv) + Bytes.SIZEOF_INT,((MemStoreLABImpl)msLab).getCurrentChunk().getNextFreeOffset());
    }
  }
 else {
    assertEquals(0,sizeChangeForSecondCell.getMemStoreSize().getDataSize());
    assertEquals(0,sizeChangeForSecondCell.getMemStoreSize().getHeapSize());
  }
}
