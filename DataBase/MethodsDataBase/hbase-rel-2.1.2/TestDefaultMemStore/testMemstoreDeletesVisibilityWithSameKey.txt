/** 
 * When we insert a higher-memstoreTS deletion of a cell but with the same timestamp, we still need to provide consistent reads for the same scanner.
 */
@Test public void testMemstoreDeletesVisibilityWithSameKey() throws IOException {
  final byte[] row=Bytes.toBytes(1);
  final byte[] f=Bytes.toBytes("family");
  final byte[] q1=Bytes.toBytes("q1");
  final byte[] q2=Bytes.toBytes("q2");
  final byte[] v1=Bytes.toBytes("value1");
  MultiVersionConcurrencyControl.WriteEntry w=mvcc.begin();
  KeyValue kv11=new KeyValue(row,f,q1,v1);
  kv11.setSequenceId(w.getWriteNumber());
  memstore.add(kv11,null);
  KeyValue kv12=new KeyValue(row,f,q2,v1);
  kv12.setSequenceId(w.getWriteNumber());
  memstore.add(kv12,null);
  mvcc.completeAndWait(w);
  KeyValueScanner s=this.memstore.getScanners(mvcc.getReadPoint()).get(0);
  assertScannerResults(s,new KeyValue[]{kv11,kv12});
  w=mvcc.begin();
  KeyValue kvDel=new KeyValue(row,f,q2,kv11.getTimestamp(),KeyValue.Type.DeleteColumn);
  kvDel.setSequenceId(w.getWriteNumber());
  memstore.add(kvDel,null);
  s=this.memstore.getScanners(mvcc.getReadPoint()).get(0);
  assertScannerResults(s,new KeyValue[]{kv11,kv12});
  mvcc.completeAndWait(w);
  s=this.memstore.getScanners(mvcc.getReadPoint()).get(0);
  assertScannerResults(s,new KeyValue[]{kv11,kvDel,kv12});
}
