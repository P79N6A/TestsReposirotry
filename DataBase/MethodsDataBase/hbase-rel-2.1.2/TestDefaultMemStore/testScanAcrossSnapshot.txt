/** 
 * Test memstore snapshot happening while scanning.
 * @throws IOException
 */
@Test public void testScanAcrossSnapshot() throws IOException {
  int rowCount=addRows(this.memstore);
  List<KeyValueScanner> memstorescanners=this.memstore.getScanners(0);
  Scan scan=new Scan();
  List<Cell> result=new ArrayList<>();
  Configuration conf=HBaseConfiguration.create();
  ScanInfo scanInfo=new ScanInfo(conf,null,0,1,HConstants.LATEST_TIMESTAMP,KeepDeletedCells.FALSE,HConstants.DEFAULT_BLOCKSIZE,0,this.memstore.getComparator(),false);
  int count=0;
  try (StoreScanner s=new StoreScanner(scan,scanInfo,null,memstorescanners)){
    while (s.next(result)) {
      LOG.info(Objects.toString(result));
      count++;
      assertEquals(rowCount,result.size());
      result.clear();
    }
  }
   assertEquals(rowCount,count);
  for (  KeyValueScanner scanner : memstorescanners) {
    scanner.close();
  }
  memstorescanners=this.memstore.getScanners(mvcc.getReadPoint());
  count=0;
  try (StoreScanner s=new StoreScanner(scan,scanInfo,null,memstorescanners)){
    while (s.next(result)) {
      LOG.info(Objects.toString(result));
      assertTrue(CellUtil.matchingRows(result.get(0),Bytes.toBytes(count)));
      count++;
      assertEquals(rowCount,result.size());
      if (count == 2) {
        this.memstore.snapshot();
        LOG.info("Snapshotted");
      }
      result.clear();
    }
  }
   assertEquals(rowCount,count);
  for (  KeyValueScanner scanner : memstorescanners) {
    scanner.close();
  }
  memstorescanners=this.memstore.getScanners(mvcc.getReadPoint());
  long ts=System.currentTimeMillis();
  count=0;
  int snapshotIndex=5;
  try (StoreScanner s=new StoreScanner(scan,scanInfo,null,memstorescanners)){
    while (s.next(result)) {
      LOG.info(Objects.toString(result));
      assertTrue(CellUtil.matchingRows(result.get(0),Bytes.toBytes(count)));
      assertEquals("count=" + count + ", result="+ result,rowCount,result.size());
      count++;
      if (count == snapshotIndex) {
        MemStoreSnapshot snapshot=this.memstore.snapshot();
        this.memstore.clearSnapshot(snapshot.getId());
        addRows(this.memstore,ts);
        LOG.info("Snapshotted, cleared it and then added values (which wont be seen)");
      }
      result.clear();
    }
  }
   assertEquals(rowCount,count);
}
