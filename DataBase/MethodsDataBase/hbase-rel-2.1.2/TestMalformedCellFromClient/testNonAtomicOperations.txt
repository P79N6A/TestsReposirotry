/** 
 * This test depends on how regionserver process the batch ops. 1) group the put/delete until meeting the increment 2) process the batch of put/delete 3) process the increment see RSRpcServices#doNonAtomicRegionMutation
 */
@Test public void testNonAtomicOperations() throws InterruptedException, IOException {
  Increment inc=new Increment(Bytes.toBytes("good")).addColumn(FAMILY,null,100);
  List<Row> batches=new ArrayList<>();
  batches.add(new Put(Bytes.toBytes("fail")).addColumn(FAMILY,null,new byte[CELL_SIZE]));
  batches.add(new Put(Bytes.toBytes("fail")).addColumn(FAMILY,null,new byte[CELL_SIZE]));
  batches.add(inc);
  batches.add(new Put(Bytes.toBytes("good")).addColumn(FAMILY,null,new byte[1]));
  Object[] objs=new Object[batches.size()];
  try (Table table=TEST_UTIL.getConnection().getTable(TABLE_NAME)){
    table.batch(batches,objs);
    fail("Where is the exception? We put the malformed cells!!!");
  }
 catch (  RetriesExhaustedWithDetailsException e) {
    assertEquals(2,e.getNumExceptions());
    for (int i=0; i != e.getNumExceptions(); ++i) {
      assertNotNull(e.getCause(i));
      assertEquals(DoNotRetryIOException.class,e.getCause(i).getClass());
      assertEquals("fail",Bytes.toString(e.getRow(i).getRow()));
    }
  }
 finally {
    assertObjects(objs,batches.size());
    assertTrue(objs[0] instanceof IOException);
    assertTrue(objs[1] instanceof IOException);
    assertEquals(Result.class,objs[2].getClass());
    assertEquals(Result.class,objs[3].getClass());
  }
}
