@Test public void testMergeTable() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  TEST_UTIL.createTable(tableName,Bytes.toBytes("f"),splitKeys);
  TEST_UTIL.waitUntilAllRegionsAssigned(tableName);
  checkIfFavoredNodeInformationIsCorrect(tableName);
  RegionLocator locator=TEST_UTIL.getConnection().getRegionLocator(tableName);
  HRegionInfo regionA=locator.getRegionLocation(HConstants.EMPTY_START_ROW).getRegionInfo();
  HRegionInfo regionB=locator.getRegionLocation(splitKeys[0]).getRegionInfo();
  List<ServerName> regionAFN=fnm.getFavoredNodes(regionA);
  LOG.info("regionA: " + regionA.getEncodedName() + " with FN: "+ fnm.getFavoredNodes(regionA));
  LOG.info("regionB: " + regionA.getEncodedName() + " with FN: "+ fnm.getFavoredNodes(regionB));
  int countOfRegions=MetaTableAccessor.getRegionCount(TEST_UTIL.getConfiguration(),tableName);
  admin.mergeRegionsAsync(regionA.getEncodedNameAsBytes(),regionB.getEncodedNameAsBytes(),false).get(60,TimeUnit.SECONDS);
  TEST_UTIL.waitUntilNoRegionsInTransition(WAIT_TIMEOUT);
  waitUntilTableRegionCountReached(tableName,countOfRegions - 1);
  checkIfFavoredNodeInformationIsCorrect(tableName);
  HRegionInfo mergedRegion=locator.getRegionLocation(HConstants.EMPTY_START_ROW).getRegionInfo();
  List<ServerName> mergedFN=fnm.getFavoredNodes(mergedRegion);
  assertArrayEquals("Merged region doesn't match regionA's FN",regionAFN.toArray(),mergedFN.toArray());
  TEST_UTIL.getMiniHBaseCluster().compact(tableName,true);
  assertEquals("Merge parents should have been cleaned",1,admin.runCatalogScan());
  ProcedureTestingUtility.waitAllProcedures(TEST_UTIL.getMiniHBaseCluster().getMaster().getMasterProcedureExecutor());
  assertNull("Parent FN should be null",fnm.getFavoredNodes(regionA));
  assertNull("Parent FN should be null",fnm.getFavoredNodes(regionB));
  List<HRegionInfo> regions=admin.getTableRegions(tableName);
  TEST_UTIL.deleteTable(tableName);
  checkNoFNForDeletedTable(regions);
}
