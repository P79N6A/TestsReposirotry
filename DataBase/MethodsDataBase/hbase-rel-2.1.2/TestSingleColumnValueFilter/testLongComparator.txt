@Test public void testLongComparator() throws IOException {
  Filter filter=new SingleColumnValueFilter(COLUMN_FAMILY,COLUMN_QUALIFIER,CompareOperator.GREATER,new LongComparator(100L));
  KeyValue cell=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER,Bytes.toBytes(1L));
  assertTrue("less than",filter.filterCell(cell) == Filter.ReturnCode.NEXT_ROW);
  filter.reset();
  byte[] buffer=cell.getBuffer();
  Cell c=new ByteBufferKeyValue(ByteBuffer.wrap(buffer),0,buffer.length);
  assertTrue("less than",filter.filterCell(c) == Filter.ReturnCode.NEXT_ROW);
  filter.reset();
  cell=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER,Bytes.toBytes(100L));
  assertTrue("Equals 100",filter.filterCell(cell) == Filter.ReturnCode.NEXT_ROW);
  filter.reset();
  buffer=cell.getBuffer();
  c=new ByteBufferKeyValue(ByteBuffer.wrap(buffer),0,buffer.length);
  assertTrue("Equals 100",filter.filterCell(c) == Filter.ReturnCode.NEXT_ROW);
  filter.reset();
  cell=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER,Bytes.toBytes(120L));
  assertTrue("include 120",filter.filterCell(cell) == Filter.ReturnCode.INCLUDE);
  filter.reset();
  buffer=cell.getBuffer();
  c=new ByteBufferKeyValue(ByteBuffer.wrap(buffer),0,buffer.length);
  assertTrue("include 120",filter.filterCell(c) == Filter.ReturnCode.INCLUDE);
}
