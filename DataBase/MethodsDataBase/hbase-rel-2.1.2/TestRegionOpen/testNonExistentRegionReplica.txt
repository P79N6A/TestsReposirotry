@Test public void testNonExistentRegionReplica() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  final byte[] FAMILYNAME=Bytes.toBytes("fam");
  FileSystem fs=HTU.getTestFileSystem();
  Admin admin=HTU.getAdmin();
  Configuration conf=HTU.getConfiguration();
  Path rootDir=HTU.getDataTestDirOnTestFS();
  HTableDescriptor htd=new HTableDescriptor(tableName);
  htd.addFamily(new HColumnDescriptor(FAMILYNAME));
  admin.createTable(htd);
  HTU.waitUntilNoRegionsInTransition(60000);
  HRegionInfo hri=new HRegionInfo(htd.getTableName(),Bytes.toBytes("A"),Bytes.toBytes("B"),false,System.currentTimeMillis(),2);
  HRegionFileSystem regionFs=HRegionFileSystem.createRegionOnFileSystem(conf,fs,FSUtils.getTableDir(rootDir,hri.getTable()),hri);
  Path regionDir=regionFs.getRegionDir();
  try {
    HRegionFileSystem.loadRegionInfoFileContent(fs,regionDir);
  }
 catch (  IOException e) {
    LOG.info("Caught expected IOE due missing .regioninfo file, due: " + e.getMessage() + " skipping region open.");
    List<HRegionInfo> regions=admin.getTableRegions(tableName);
    LOG.info("Regions: " + regions);
    if (regions.size() != 1) {
      fail("Table " + tableName + " should have only one region, but got more: "+ regions);
    }
    return;
  }
  fail("Should have thrown IOE when attempting to open a non-existing region.");
}
