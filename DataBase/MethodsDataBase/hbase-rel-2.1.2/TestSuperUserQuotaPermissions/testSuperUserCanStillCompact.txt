@Test public void testSuperUserCanStillCompact() throws Exception {
  final TableName tn=doAsSuperUser(new Callable<TableName>(){
    @Override public TableName call() throws Exception {
      try (Connection conn=getConnection()){
        Admin admin=conn.getAdmin();
        final TableName tn=helper.createTableWithRegions(admin,5);
        final long sizeLimit=2L * SpaceQuotaHelperForTests.ONE_MEGABYTE;
        QuotaSettings settings=QuotaSettingsFactory.limitTableSpace(tn,sizeLimit,SpaceViolationPolicy.NO_WRITES_COMPACTIONS);
        admin.setQuota(settings);
        try {
          AccessControlClient.grant(conn,tn,REGULARUSER_NAME,null,null,Action.READ,Action.WRITE);
        }
 catch (        Throwable t) {
          if (t instanceof Exception) {
            throw (Exception)t;
          }
          throw new Exception(t);
        }
        return tn;
      }
     }
  }
);
  doAsRegularUser(new Callable<Void>(){
    @Override public Void call() throws Exception {
      try (Connection conn=getConnection()){
        helper.writeData(tn,3L * SpaceQuotaHelperForTests.ONE_MEGABYTE);
        return null;
      }
     }
  }
);
  waitForTableToEnterQuotaViolation(tn);
  try {
    doAsRegularUser(new Callable<Void>(){
      @Override public Void call() throws Exception {
        try (Connection conn=getConnection()){
          conn.getAdmin().majorCompact(tn);
          return null;
        }
       }
    }
);
    fail("Expected an exception trying to compact a table with a quota violation");
  }
 catch (  DoNotRetryIOException e) {
  }
  doAsSuperUser(new Callable<Void>(){
    @Override public Void call() throws Exception {
      try (Connection conn=getConnection()){
        conn.getAdmin().majorCompact(tn);
        return null;
      }
     }
  }
);
}
