/** 
 * Test that shows that exception thrown from the RS side will result in an exception on the LIHFile client.
 */
@Test(expected=IOException.class) public void testBulkLoadPhaseFailure() throws Exception {
  final TableName table=TableName.valueOf(name.getMethodName());
  final AtomicInteger attmptedCalls=new AtomicInteger();
  final AtomicInteger failedCalls=new AtomicInteger();
  util.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,2);
  try (Connection connection=ConnectionFactory.createConnection(util.getConfiguration())){
    setupTable(connection,table,10);
    LoadIncrementalHFiles lih=new LoadIncrementalHFiles(util.getConfiguration()){
      @Override protected List<LoadQueueItem> tryAtomicRegionLoad(      ClientServiceCallable<byte[]> serviceCallable,      TableName tableName,      final byte[] first,      Collection<LoadQueueItem> lqis) throws IOException {
        int i=attmptedCalls.incrementAndGet();
        if (i == 1) {
          Connection errConn;
          try {
            errConn=getMockedConnection(util.getConfiguration());
            serviceCallable=this.buildClientServiceCallable(errConn,table,first,lqis,true);
          }
 catch (          Exception e) {
            LOG.error(HBaseMarkers.FATAL,"mocking cruft, should never happen",e);
            throw new RuntimeException("mocking cruft, should never happen");
          }
          failedCalls.incrementAndGet();
          return super.tryAtomicRegionLoad(serviceCallable,tableName,first,lqis);
        }
        return super.tryAtomicRegionLoad(serviceCallable,tableName,first,lqis);
      }
    }
;
    try {
      Path dir=buildBulkFiles(table,1);
      try (Table t=connection.getTable(table);RegionLocator locator=connection.getRegionLocator(table);Admin admin=connection.getAdmin()){
        lih.doBulkLoad(dir,admin,t,locator);
      }
     }
  finally {
      util.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,HConstants.DEFAULT_HBASE_CLIENT_RETRIES_NUMBER);
    }
    fail("doBulkLoad should have thrown an exception");
  }
 }
