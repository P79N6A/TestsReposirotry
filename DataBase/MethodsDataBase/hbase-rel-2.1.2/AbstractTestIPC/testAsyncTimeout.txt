@Test public void testAsyncTimeout() throws IOException {
  RpcServer rpcServer=createRpcServer(null,"testRpcServer",Lists.newArrayList(new RpcServer.BlockingServiceAndInterface(SERVICE,null)),new InetSocketAddress("localhost",0),CONF,new FifoRpcScheduler(CONF,1));
  try (AbstractRpcClient<?> client=createRpcClient(CONF)){
    rpcServer.start();
    Interface stub=newStub(client,rpcServer.getListenerAddress());
    List<HBaseRpcController> pcrcList=new ArrayList<>();
    List<BlockingRpcCallback<EmptyResponseProto>> callbackList=new ArrayList<>();
    int ms=1000;
    int timeout=100;
    long startTime=System.nanoTime();
    for (int i=0; i < 10; i++) {
      HBaseRpcController pcrc=new HBaseRpcControllerImpl();
      pcrc.setCallTimeout(timeout);
      BlockingRpcCallback<EmptyResponseProto> callback=new BlockingRpcCallback<>();
      stub.pause(pcrc,PauseRequestProto.newBuilder().setMs(ms).build(),callback);
      pcrcList.add(pcrc);
      callbackList.add(callback);
    }
    for (    BlockingRpcCallback<?> callback : callbackList) {
      assertNull(callback.get());
    }
    long waitTime=(System.nanoTime() - startTime) / 1000000;
    for (    HBaseRpcController pcrc : pcrcList) {
      assertTrue(pcrc.failed());
      LOG.info("Caught expected exception: " + pcrc.getFailed());
      IOException ioe=ProtobufUtil.handleRemoteException(pcrc.getFailed());
      assertTrue(ioe.getCause() instanceof CallTimeoutException);
    }
    assertTrue(waitTime < ms);
  }
  finally {
    rpcServer.stop();
  }
}
