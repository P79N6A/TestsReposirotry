@Test public void testGetSpaceQuota() throws Exception {
  TableQuotaSnapshotStore mockStore=mock(TableQuotaSnapshotStore.class);
  when(mockStore.getSpaceQuota(any())).thenCallRealMethod();
  Quotas quotaWithSpace=Quotas.newBuilder().setSpace(SpaceQuota.newBuilder().setSoftLimit(1024L).setViolationPolicy(QuotaProtos.SpaceViolationPolicy.DISABLE).build()).build();
  Quotas quotaWithoutSpace=Quotas.newBuilder().build();
  AtomicReference<Quotas> quotaRef=new AtomicReference<>();
  when(mockStore.getQuotaForTable(any())).then(new Answer<Quotas>(){
    @Override public Quotas answer(    InvocationOnMock invocation) throws Throwable {
      return quotaRef.get();
    }
  }
);
  quotaRef.set(quotaWithSpace);
  assertEquals(quotaWithSpace.getSpace(),mockStore.getSpaceQuota(TableName.valueOf("foo")));
  quotaRef.set(quotaWithoutSpace);
  assertNull(mockStore.getSpaceQuota(TableName.valueOf("foo")));
}
