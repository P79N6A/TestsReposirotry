@Test public void testTargetViolationState() throws IOException {
  mockNoSnapshotSizes();
  TableName tn1=TableName.valueOf("violation1");
  TableName tn2=TableName.valueOf("observance1");
  TableName tn3=TableName.valueOf("observance2");
  SpaceQuota quota=SpaceQuota.newBuilder().setSoftLimit(1024L * 1024L).setViolationPolicy(ProtobufUtil.toProtoViolationPolicy(SpaceViolationPolicy.DISABLE)).build();
  for (int i=0; i < 3; i++) {
    regionReports.put(RegionInfoBuilder.newBuilder(tn2).setStartKey(Bytes.toBytes(i)).setEndKey(Bytes.toBytes(i + 1)).build(),5L * ONE_MEGABYTE);
    regionReports.put(RegionInfoBuilder.newBuilder(tn3).setStartKey(Bytes.toBytes(i)).setEndKey(Bytes.toBytes(i + 1)).build(),5L * ONE_MEGABYTE);
  }
  regionReports.put(RegionInfoBuilder.newBuilder(tn1).setStartKey(Bytes.toBytes(0)).setEndKey(Bytes.toBytes(1)).build(),1024L * 512L);
  regionReports.put(RegionInfoBuilder.newBuilder(tn1).setStartKey(Bytes.toBytes(1)).setEndKey(Bytes.toBytes(2)).build(),1024L * 256L);
  SpaceQuotaSnapshot tn1Snapshot=new SpaceQuotaSnapshot(SpaceQuotaStatus.notInViolation(),1024L * 768L,1024L * 1024L);
  assertEquals(tn1Snapshot,store.getTargetState(tn1,quota));
  regionReports.put(RegionInfoBuilder.newBuilder(tn1).setStartKey(Bytes.toBytes(2)).setEndKey(Bytes.toBytes(3)).build(),1024L * 256L);
  tn1Snapshot=new SpaceQuotaSnapshot(SpaceQuotaStatus.notInViolation(),1024L * 1024L,1024L * 1024L);
  assertEquals(tn1Snapshot,store.getTargetState(tn1,quota));
  regionReports.put(RegionInfoBuilder.newBuilder(tn1).setStartKey(Bytes.toBytes(3)).setEndKey(Bytes.toBytes(4)).build(),1024L);
  tn1Snapshot=new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.DISABLE),1024L * 1024L + 1024L,1024L * 1024L);
  assertEquals(tn1Snapshot,store.getTargetState(tn1,quota));
}
