@Test public void testReload() throws Exception {
  ServerName serverName=getRSCarryingMeta().get();
  assertEquals(serverName,LOCATOR.getRegionLocation(false).get().getServerName());
  ServerName newServerName=TEST_UTIL.getHBaseCluster().getRegionServerThreads().stream().map(t -> t.getRegionServer().getServerName()).filter(sn -> !sn.equals(serverName)).findAny().get();
  TEST_UTIL.getAdmin().move(HRegionInfo.FIRST_META_REGIONINFO.getEncodedNameAsBytes(),Bytes.toBytes(newServerName.getServerName()));
  TEST_UTIL.waitFor(30000,new ExplainingPredicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      Optional<ServerName> newServerName=getRSCarryingMeta();
      return newServerName.isPresent() && !newServerName.get().equals(serverName);
    }
    @Override public String explainFailure() throws Exception {
      return HRegionInfo.FIRST_META_REGIONINFO.getRegionNameAsString() + " is still on " + serverName;
    }
  }
);
  assertEquals(serverName,LOCATOR.getRegionLocation(false).get().getServerName());
  assertEquals(newServerName,LOCATOR.getRegionLocation(true).get().getServerName());
  assertEquals(newServerName,LOCATOR.getRegionLocation(false).get().getServerName());
}
