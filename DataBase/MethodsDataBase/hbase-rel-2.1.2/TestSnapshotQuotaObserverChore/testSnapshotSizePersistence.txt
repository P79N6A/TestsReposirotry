@Test public void testSnapshotSizePersistence() throws IOException {
  final Admin admin=TEST_UTIL.getAdmin();
  final TableName tn=TableName.valueOf("quota_snapshotSizePersistence");
  if (admin.tableExists(tn)) {
    admin.disableTable(tn);
    admin.deleteTable(tn);
  }
  HTableDescriptor desc=new HTableDescriptor(tn);
  desc.addFamily(new HColumnDescriptor(QuotaTableUtil.QUOTA_FAMILY_USAGE));
  admin.createTable(desc);
  Multimap<TableName,SnapshotWithSize> snapshotsWithSizes=HashMultimap.create();
  try (Table table=conn.getTable(tn)){
    verify(table,() -> {
      testChore.persistSnapshotSizes(table,snapshotsWithSizes);
      assertEquals(0,count(table));
    }
);
    verify(table,() -> {
      TableName originatingTable=TableName.valueOf("t1");
      snapshotsWithSizes.put(originatingTable,new SnapshotWithSize("ss1",1024L));
      snapshotsWithSizes.put(originatingTable,new SnapshotWithSize("ss2",4096L));
      testChore.persistSnapshotSizes(table,snapshotsWithSizes);
      assertEquals(2,count(table));
      assertEquals(1024L,extractSnapshotSize(table,originatingTable,"ss1"));
      assertEquals(4096L,extractSnapshotSize(table,originatingTable,"ss2"));
    }
);
    snapshotsWithSizes.clear();
    verify(table,() -> {
      snapshotsWithSizes.put(TableName.valueOf("t1"),new SnapshotWithSize("ss1",1024L));
      snapshotsWithSizes.put(TableName.valueOf("t2"),new SnapshotWithSize("ss2",4096L));
      snapshotsWithSizes.put(TableName.valueOf("t3"),new SnapshotWithSize("ss3",8192L));
      testChore.persistSnapshotSizes(table,snapshotsWithSizes);
      assertEquals(3,count(table));
      assertEquals(1024L,extractSnapshotSize(table,TableName.valueOf("t1"),"ss1"));
      assertEquals(4096L,extractSnapshotSize(table,TableName.valueOf("t2"),"ss2"));
      assertEquals(8192L,extractSnapshotSize(table,TableName.valueOf("t3"),"ss3"));
    }
);
  }
 }
