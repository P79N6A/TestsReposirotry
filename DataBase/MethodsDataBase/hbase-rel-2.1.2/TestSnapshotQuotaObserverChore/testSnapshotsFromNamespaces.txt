@Test public void testSnapshotsFromNamespaces() throws Exception {
  NamespaceDescriptor ns=NamespaceDescriptor.create("snapshots_from_namespaces").build();
  admin.createNamespace(ns);
  TableName tn1=helper.createTableWithRegions(ns.getName(),1);
  TableName tn2=helper.createTableWithRegions(ns.getName(),1);
  TableName tn3=helper.createTableWithRegions(1);
  admin.setQuota(QuotaSettingsFactory.limitNamespaceSpace(ns.getName(),SpaceQuotaHelperForTests.ONE_GIGABYTE,SpaceViolationPolicy.NO_INSERTS));
  admin.snapshot(new SnapshotDescription(tn1.getQualifierAsString() + "snapshot",tn1,SnapshotType.SKIPFLUSH));
  admin.snapshot(new SnapshotDescription(tn2.getQualifierAsString() + "snapshot",tn2,SnapshotType.SKIPFLUSH));
  admin.snapshot(new SnapshotDescription(tn3.getQualifierAsString() + "snapshot",tn3,SnapshotType.SKIPFLUSH));
  Multimap<TableName,String> mapping=testChore.getSnapshotsToComputeSize();
  assertEquals(2,mapping.size());
  assertEquals(1,mapping.get(tn1).size());
  assertEquals(tn1.getQualifierAsString() + "snapshot",mapping.get(tn1).iterator().next());
  assertEquals(1,mapping.get(tn2).size());
  assertEquals(tn2.getQualifierAsString() + "snapshot",mapping.get(tn2).iterator().next());
  admin.snapshot(new SnapshotDescription(tn2.getQualifierAsString() + "snapshot1",tn2,SnapshotType.SKIPFLUSH));
  admin.snapshot(new SnapshotDescription(tn3.getQualifierAsString() + "snapshot2",tn3,SnapshotType.SKIPFLUSH));
  mapping=testChore.getSnapshotsToComputeSize();
  assertEquals(3,mapping.size());
  assertEquals(1,mapping.get(tn1).size());
  assertEquals(tn1.getQualifierAsString() + "snapshot",mapping.get(tn1).iterator().next());
  assertEquals(2,mapping.get(tn2).size());
  assertEquals(new HashSet<String>(Arrays.asList(tn2.getQualifierAsString() + "snapshot",tn2.getQualifierAsString() + "snapshot1")),mapping.get(tn2));
}
