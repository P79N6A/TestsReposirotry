@Test public void testScanWithBatchSizeReturnIncompleteCells() throws IOException {
  TableName tableName=TableName.valueOf(name.getMethodName());
  TableDescriptor hd=TableDescriptorBuilder.newBuilder(tableName).setColumnFamily(ColumnFamilyDescriptorBuilder.newBuilder(FAMILY).setMaxVersions(3).build()).build();
  Table table=TEST_UTIL.createTable(hd,null);
  Put put=new Put(ROW);
  put.addColumn(FAMILY,Bytes.toBytes(0),generateHugeValue(3 * 1024 * 1024));
  table.put(put);
  put=new Put(ROW);
  put.addColumn(FAMILY,Bytes.toBytes(1),generateHugeValue(4 * 1024 * 1024));
  table.put(put);
  for (int i=2; i < 5; i++) {
    for (int version=0; version < 2; version++) {
      put=new Put(ROW);
      put.addColumn(FAMILY,Bytes.toBytes(i),generateHugeValue(1024));
      table.put(put);
    }
  }
  Scan scan=new Scan();
  scan.withStartRow(ROW).withStopRow(ROW,true).addFamily(FAMILY).setBatch(3).setMaxResultSize(4 * 1024 * 1024);
  Result result;
  try (ResultScanner scanner=table.getScanner(scan)){
    List<Result> list=new ArrayList<>();
    while ((result=scanner.next()) != null) {
      list.add(result);
    }
    Assert.assertEquals(5,list.stream().mapToInt(Result::size).sum());
    Assert.assertEquals(2,list.size());
    Assert.assertEquals(3,list.get(0).size());
    Assert.assertEquals(2,list.get(1).size());
  }
   scan=new Scan();
  scan.withStartRow(ROW).withStopRow(ROW,true).addFamily(FAMILY).setBatch(2).setMaxResultSize(4 * 1024 * 1024);
  try (ResultScanner scanner=table.getScanner(scan)){
    List<Result> list=new ArrayList<>();
    while ((result=scanner.next()) != null) {
      list.add(result);
    }
    Assert.assertEquals(5,list.stream().mapToInt(Result::size).sum());
    Assert.assertEquals(3,list.size());
    Assert.assertEquals(2,list.get(0).size());
    Assert.assertEquals(2,list.get(1).size());
    Assert.assertEquals(1,list.get(2).size());
  }
 }
