@Test public void testPutThenGetWithMultipleThreads() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  final int THREAD_NUM=20;
  final int ROUND_NUM=10;
  for (int round=0; round < ROUND_NUM; round++) {
    ArrayList<Thread> threads=new ArrayList<>(THREAD_NUM);
    final AtomicInteger successCnt=new AtomicInteger(0);
    Table ht=TEST_UTIL.createTable(tableName,FAMILY);
    for (int i=0; i < THREAD_NUM; i++) {
      final int index=i;
      Thread t=new Thread(new Runnable(){
        @Override public void run(){
          final byte[] row=Bytes.toBytes("row-" + index);
          final byte[] value=Bytes.toBytes("v" + index);
          try {
            Put put=new Put(row);
            put.addColumn(FAMILY,QUALIFIER,value);
            ht.put(put);
            Get get=new Get(row);
            Result result=ht.get(get);
            byte[] returnedValue=result.getValue(FAMILY,QUALIFIER);
            if (Bytes.equals(value,returnedValue)) {
              successCnt.getAndIncrement();
            }
 else {
              LOG.error("Should be equal but not, original value: " + Bytes.toString(value) + ", returned value: "+ (returnedValue == null ? "null" : Bytes.toString(returnedValue)));
            }
          }
 catch (          Throwable e) {
          }
        }
      }
);
      threads.add(t);
    }
    for (    Thread t : threads) {
      t.start();
    }
    for (    Thread t : threads) {
      t.join();
    }
    assertEquals("Not equal in round " + round,THREAD_NUM,successCnt.get());
    ht.close();
    TEST_UTIL.deleteTable(tableName);
  }
}
