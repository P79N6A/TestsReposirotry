@Test public void testReclaimChunkWhenScaning() throws IOException {
  init("testReclaimChunkWhenScaning");
  long ts=EnvironmentEdgeManager.currentTime();
  long seqId=100;
  byte[] value=Bytes.toBytes("value");
  store.add(createCell(qf1,ts,seqId,value),null);
  store.add(createCell(qf2,ts,seqId,value),null);
  store.add(createCell(qf3,ts,seqId,value),null);
  TreeSet<byte[]> quals=new TreeSet<>(Bytes.BYTES_COMPARATOR);
  quals.add(qf1);
  quals.add(qf2);
  quals.add(qf3);
  try (InternalScanner scanner=(InternalScanner)store.getScanner(new Scan(new Get(row)),quals,seqId)){
    List<Cell> results=new MyList<>(size -> {
switch (size) {
case 1:
        try {
          flushStore(store,id++);
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
      break;
case 2:
    try {
      byte[] newValue=Bytes.toBytes("newValue");
      store.add(createCell(qf1,ts + 1,seqId + 1,newValue),null);
      store.add(createCell(qf2,ts + 1,seqId + 1,newValue),null);
      store.add(createCell(qf3,ts + 1,seqId + 1,newValue),null);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  break;
default :
break;
}
}
);
scanner.next(results);
assertEquals(3,results.size());
for (Cell c : results) {
byte[] actualValue=CellUtil.cloneValue(c);
assertTrue("expected:" + Bytes.toStringBinary(value) + ", actual:"+ Bytes.toStringBinary(actualValue),Bytes.equals(actualValue,value));
}
}
 }
