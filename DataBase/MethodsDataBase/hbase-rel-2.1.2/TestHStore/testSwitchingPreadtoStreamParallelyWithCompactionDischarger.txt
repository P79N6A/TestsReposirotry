@Test public void testSwitchingPreadtoStreamParallelyWithCompactionDischarger() throws Exception {
  Configuration conf=HBaseConfiguration.create();
  conf.set("hbase.hstore.engine.class",DummyStoreEngine.class.getName());
  conf.setLong(StoreScanner.STORESCANNER_PREAD_MAX_BYTES,0);
  MyStore store=initMyStore(name.getMethodName(),conf,new MyStoreHook(){
  }
);
  MemStoreSizing memStoreSizing=new NonThreadSafeMemStoreSizing();
  long ts=System.currentTimeMillis();
  long seqID=1L;
  for (int i=1; i < 10; i++) {
    store.add(createCell(Bytes.toBytes("row" + i),qf1,ts,seqID++,Bytes.toBytes("")),memStoreSizing);
  }
  flushStore(store,seqID);
  for (int i=11; i < 20; i++) {
    store.add(createCell(Bytes.toBytes("row" + i),qf1,ts,seqID++,Bytes.toBytes("")),memStoreSizing);
  }
  flushStore(store,seqID);
  for (int i=21; i < 30; i++) {
    store.add(createCell(Bytes.toBytes("row" + i),qf1,ts,seqID++,Bytes.toBytes("")),memStoreSizing);
  }
  flushStore(store,seqID);
  assertEquals(3,store.getStorefilesCount());
  Scan scan=new Scan();
  scan.addFamily(family);
  Collection<HStoreFile> storefiles2=store.getStorefiles();
  ArrayList<HStoreFile> actualStorefiles=Lists.newArrayList(storefiles2);
  StoreScanner storeScanner=(StoreScanner)store.getScanner(scan,scan.getFamilyMap().get(family),Long.MAX_VALUE);
  KeyValueHeap heap=storeScanner.heap;
  for (int i=31; i < 40; i++) {
    store.add(createCell(Bytes.toBytes("row" + i),qf1,ts,seqID++,Bytes.toBytes("")),memStoreSizing);
  }
  flushStore(store,seqID);
  for (int i=41; i < 50; i++) {
    store.add(createCell(Bytes.toBytes("row" + i),qf1,ts,seqID++,Bytes.toBytes("")),memStoreSizing);
  }
  flushStore(store,seqID);
  storefiles2=store.getStorefiles();
  ArrayList<HStoreFile> actualStorefiles1=Lists.newArrayList(storefiles2);
  actualStorefiles1.removeAll(actualStorefiles);
  MyThread thread=new MyThread(storeScanner);
  thread.start();
  store.replaceStoreFiles(actualStorefiles,actualStorefiles1);
  thread.join();
  KeyValueHeap heap2=thread.getHeap();
  assertFalse(heap.equals(heap2));
}
