@Test public void testFlushBeforeCompletingScanWithFilterHint() throws IOException, InterruptedException {
  final AtomicBoolean timeToGetHint=new AtomicBoolean(false);
  final int expectedSize=2;
  testFlushBeforeCompletingScan(new MyListHook(){
    @Override public void hook(    int currentSize){
      if (currentSize == expectedSize - 1) {
        try {
          flushStore(store,id++);
          timeToGetHint.set(true);
        }
 catch (        IOException e) {
          throw new RuntimeException(e);
        }
      }
    }
  }
,new FilterBase(){
    @Override public Filter.ReturnCode filterCell(    final Cell c) throws IOException {
      if (timeToGetHint.get()) {
        timeToGetHint.set(false);
        return Filter.ReturnCode.SEEK_NEXT_USING_HINT;
      }
 else {
        return Filter.ReturnCode.INCLUDE;
      }
    }
    @Override public Cell getNextCellHint(    Cell currentCell) throws IOException {
      return currentCell;
    }
  }
,expectedSize);
}
