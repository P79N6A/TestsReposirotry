@Test public void testIOExceptionThrownOnClose() throws Exception {
  byte[] filler=new byte[128000];
  TableName tableName=TableName.valueOf("testIOExceptionThrownOnClose");
  String familyName="f";
  byte[] familyNameBytes=Bytes.toBytes(familyName);
  util.createTable(tableName,familyName);
  Table table=util.getConnection().getTable(tableName);
  HRegionServer rs=util.getRSForFirstRegionInTable(tableName);
  Region region=rs.getRegions(tableName).get(0);
  int refSFCount=4;
  for (int i=0; i < refSFCount; i++) {
    for (int j=0; j < refSFCount; j++) {
      Put put=new Put(Bytes.toBytes(j));
      put.addColumn(familyNameBytes,Bytes.toBytes(i),filler);
      table.put(put);
    }
    util.flush(tableName);
  }
  assertEquals(refSFCount,region.getStoreFileList(new byte[][]{familyNameBytes}).size());
  HStore store=((HRegion)region).getStore(familyNameBytes);
  HStoreFile hsf=((Collection<HStoreFile>)region.getStore(familyNameBytes).getStorefiles()).iterator().next();
  long readPt=((HRegion)region).getReadPoint(IsolationLevel.READ_COMMITTED);
  StoreFileScanner preadScanner=hsf.getPreadScanner(false,readPt,0,false);
  StoreFileScanner streamScanner=hsf.getStreamScanner(false,false,false,readPt,0,false);
  preadScanner.seek(KeyValue.LOWESTKEY);
  streamScanner.seek(KeyValue.LOWESTKEY);
  util.compact(tableName,true);
  assertNotNull(preadScanner.next());
  assertNotNull(streamScanner.next());
  store.closeAndArchiveCompactedFiles(true);
  try {
    assertNotNull(preadScanner.next());
    fail("Expected IOException");
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
  try {
    assertNotNull(streamScanner.next());
    fail("Expected IOException");
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}
