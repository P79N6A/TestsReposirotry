@Test public void testReplicatorWithErrors() throws Exception {
  truncateTable(utility1,tableName);
  truncateTable(utility2,tableName);
  admin.addPeer("testReplicatorWithErrors",new ReplicationPeerConfig().setClusterKey(utility2.getClusterKey()).setReplicationEndpointImpl(FailureInjectingReplicationEndpointForTest.class.getName()),null);
  FailureInjectingReplicationEndpointForTest.setBatchCount(0);
  FailureInjectingReplicationEndpointForTest.setEntriesCount(0);
  try {
    FailureInjectingReplicationEndpointForTest.pause();
    try {
      final byte[] valueBytes=new byte[8 * 1024];
      for (int i=0; i < NUM_ROWS; i++) {
        htable1.put(new Put(Bytes.toBytes("row" + Integer.toString(i))).addColumn(famName,null,valueBytes));
      }
    }
  finally {
      FailureInjectingReplicationEndpointForTest.resume();
    }
    Waiter.waitFor(conf1,60000,new Waiter.ExplainingPredicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return FailureInjectingReplicationEndpointForTest.getEntriesCount() >= NUM_ROWS;
      }
      @Override public String explainFailure() throws Exception {
        return "We waited too long for expected replication of " + NUM_ROWS + " entries";
      }
    }
);
    assertEquals("We did not replicate enough rows",NUM_ROWS,utility2.countRows(htable2));
  }
  finally {
    admin.removePeer("testReplicatorWithErrors");
  }
}
