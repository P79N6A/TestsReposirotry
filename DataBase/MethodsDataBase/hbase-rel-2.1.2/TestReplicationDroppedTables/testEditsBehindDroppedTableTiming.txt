@Test public void testEditsBehindDroppedTableTiming() throws Exception {
  conf1.setBoolean(HConstants.REPLICATION_DROP_ON_DELETED_TABLE_KEY,true);
  conf1.setInt(HConstants.REPLICATION_SOURCE_MAXTHREADS_KEY,1);
  utility1.shutdownMiniHBaseCluster();
  utility1.startMiniHBaseCluster(1,1);
  TableName tablename=TableName.valueOf("testdroppedtimed");
  byte[] familyName=Bytes.toBytes("fam");
  byte[] row=Bytes.toBytes("row");
  TableDescriptor table=TableDescriptorBuilder.newBuilder(tablename).setColumnFamily(ColumnFamilyDescriptorBuilder.newBuilder(familyName).setScope(HConstants.REPLICATION_SCOPE_GLOBAL).build()).build();
  Connection connection1=ConnectionFactory.createConnection(conf1);
  Connection connection2=ConnectionFactory.createConnection(conf2);
  try (Admin admin1=connection1.getAdmin()){
    admin1.createTable(table);
  }
   try (Admin admin2=connection2.getAdmin()){
    admin2.createTable(table);
  }
   utility1.waitUntilAllRegionsAssigned(tablename);
  utility2.waitUntilAllRegionsAssigned(tablename);
  try (Admin admin1=connection1.getAdmin()){
    admin1.disableReplicationPeer(PEER_ID2);
  }
   try (Table droppedTable=connection1.getTable(tablename)){
    byte[] rowKey=Bytes.toBytes(0 + " put on table to be dropped");
    Put put=new Put(rowKey);
    put.addColumn(familyName,row,row);
    droppedTable.put(put);
  }
   try (Table table1=connection1.getTable(tableName)){
    for (int i=0; i < ROWS_COUNT; i++) {
      Put put=new Put(generateRowKey(i)).addColumn(famName,row,row);
      table1.put(put);
    }
  }
   try (Admin admin2=connection2.getAdmin()){
    admin2.disableTable(tablename);
    admin2.deleteTable(tablename);
  }
   try (Admin admin1=connection1.getAdmin()){
    admin1.enableReplicationPeer(PEER_ID2);
    verifyReplicationStuck();
    admin1.disableTable(tablename);
    verifyReplicationStuck();
    admin1.deleteTable(tablename);
    verifyReplicationProceeded();
  }
   conf1.setBoolean(HConstants.REPLICATION_DROP_ON_DELETED_TABLE_KEY,false);
}
