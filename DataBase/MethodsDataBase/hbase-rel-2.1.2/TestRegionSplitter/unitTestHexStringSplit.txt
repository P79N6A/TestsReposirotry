/** 
 * Unit tests for the HexStringSplit algorithm. Makes sure it divides up the space of keys in the way that we expect.
 */
@Test public void unitTestHexStringSplit(){
  HexStringSplit splitter=new HexStringSplit();
  byte[][] twoRegionsSplits=splitter.split(2);
  assertEquals(1,twoRegionsSplits.length);
  assertArrayEquals("80000000".getBytes(),twoRegionsSplits[0]);
  byte[][] threeRegionsSplits=splitter.split(3);
  assertEquals(2,threeRegionsSplits.length);
  byte[] expectedSplit0="55555555".getBytes();
  assertArrayEquals(expectedSplit0,threeRegionsSplits[0]);
  byte[] expectedSplit1="aaaaaaaa".getBytes();
  assertArrayEquals(expectedSplit1,threeRegionsSplits[1]);
  byte[] splitPoint=splitter.split("10000000".getBytes(),"30000000".getBytes());
  assertArrayEquals("20000000".getBytes(),splitPoint);
  byte[] lastRow="ffffffff".getBytes();
  assertArrayEquals(lastRow,splitter.lastRow());
  byte[] firstRow="00000000".getBytes();
  assertArrayEquals(firstRow,splitter.firstRow());
  splitPoint=splitter.split(firstRow,"20000000".getBytes());
  assertArrayEquals("10000000".getBytes(),splitPoint);
  splitPoint=splitter.split("dfffffff".getBytes(),lastRow);
  assertArrayEquals("efffffff".getBytes(),splitPoint);
  byte[][] splits=splitter.split("00000000".getBytes(),"30000000".getBytes(),3,false);
  assertEquals(2,splits.length);
  assertArrayEquals("10000000".getBytes(),splits[0]);
  assertArrayEquals("20000000".getBytes(),splits[1]);
  splits=splitter.split("00000000".getBytes(),"20000000".getBytes(),2,true);
  assertEquals(3,splits.length);
  assertArrayEquals("10000000".getBytes(),splits[1]);
}
