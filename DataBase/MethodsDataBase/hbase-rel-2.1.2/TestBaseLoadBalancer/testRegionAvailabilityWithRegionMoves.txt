@Test public void testRegionAvailabilityWithRegionMoves() throws Exception {
  List<RegionInfo> list0=new ArrayList<>();
  List<RegionInfo> list1=new ArrayList<>();
  List<RegionInfo> list2=new ArrayList<>();
  RegionInfo hri1=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey("key1".getBytes()).setEndKey("key2".getBytes()).setSplit(false).setRegionId(100).build();
  RegionInfo hri2=RegionReplicaUtil.getRegionInfoForReplica(hri1,1);
  RegionInfo hri3=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey("key2".getBytes()).setEndKey("key3".getBytes()).setSplit(false).setRegionId(101).build();
  list0.add(hri1);
  list1.add(hri2);
  list2.add(hri3);
  Map<ServerName,List<RegionInfo>> clusterState=new LinkedHashMap<>();
  clusterState.put(servers[0],list0);
  clusterState.put(servers[1],list1);
  clusterState.put(servers[2],list2);
  Cluster cluster=new Cluster(clusterState,null,null,rackManager);
  assertTrue(!cluster.wouldLowerAvailability(hri1,servers[2]));
  cluster.doAction(new MoveRegionAction(0,0,2));
  assertEquals(2,cluster.numMaxRegionsPerTable[0]);
  assertTrue(cluster.wouldLowerAvailability(hri1,servers[2]));
  clusterState.clear();
  List<RegionInfo> list3=new ArrayList<>();
  RegionInfo hri4=RegionReplicaUtil.getRegionInfoForReplica(hri3,1);
  list3.add(hri4);
  clusterState.put(servers[0],list0);
  clusterState.put(servers[5],list1);
  clusterState.put(servers[6],list2);
  clusterState.put(servers[12],list3);
  cluster=new Cluster(clusterState,null,null,rackManager);
  assertTrue(!cluster.wouldLowerAvailability(hri4,servers[0]));
  cluster.doAction(new MoveRegionAction(2,2,0));
  assertTrue(cluster.wouldLowerAvailability(hri3,servers[0]));
}
