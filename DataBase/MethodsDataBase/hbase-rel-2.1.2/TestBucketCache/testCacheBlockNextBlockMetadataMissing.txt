@Test public void testCacheBlockNextBlockMetadataMissing() throws Exception {
  int size=100;
  int length=HConstants.HFILEBLOCK_HEADER_SIZE + size;
  byte[] byteArr=new byte[length];
  ByteBuffer buf=ByteBuffer.wrap(byteArr,0,size);
  HFileContext meta=new HFileContextBuilder().build();
  HFileBlock blockWithNextBlockMetadata=new HFileBlock(BlockType.DATA,size,size,-1,buf,HFileBlock.FILL_HEADER,-1,52,-1,meta);
  HFileBlock blockWithoutNextBlockMetadata=new HFileBlock(BlockType.DATA,size,size,-1,buf,HFileBlock.FILL_HEADER,-1,-1,-1,meta);
  BlockCacheKey key=new BlockCacheKey("key1",0);
  ByteBuffer actualBuffer=ByteBuffer.allocate(length);
  ByteBuffer block1Buffer=ByteBuffer.allocate(length);
  ByteBuffer block2Buffer=ByteBuffer.allocate(length);
  blockWithNextBlockMetadata.serialize(block1Buffer,true);
  blockWithoutNextBlockMetadata.serialize(block2Buffer,true);
  CacheTestUtils.getBlockAndAssertEquals(cache,key,blockWithNextBlockMetadata,actualBuffer,block1Buffer);
  waitUntilFlushedToBucket(cache,key);
  CacheTestUtils.getBlockAndAssertEquals(cache,key,blockWithoutNextBlockMetadata,actualBuffer,block1Buffer);
  cache.evictBlock(key);
  assertNull(cache.getBlock(key,false,false,false));
  CacheTestUtils.getBlockAndAssertEquals(cache,key,blockWithoutNextBlockMetadata,actualBuffer,block2Buffer);
  waitUntilFlushedToBucket(cache,key);
  CacheTestUtils.getBlockAndAssertEquals(cache,key,blockWithNextBlockMetadata,actualBuffer,block1Buffer);
}
