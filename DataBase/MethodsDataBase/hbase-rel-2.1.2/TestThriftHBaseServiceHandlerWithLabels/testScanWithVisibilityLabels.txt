@Test public void testScanWithVisibilityLabels() throws Exception {
  ThriftHBaseServiceHandler handler=createHandler();
  ByteBuffer table=wrap(tableAname);
  TColumnValue columnValue=new TColumnValue(wrap(familyAname),wrap(qualifierAname),wrap(valueAname));
  List<TColumnValue> columnValues=new ArrayList<>(1);
  columnValues.add(columnValue);
  for (int i=0; i < 10; i++) {
    TPut put=new TPut(wrap(Bytes.toBytes("testScan" + i)),columnValues);
    if (i == 5) {
      put.setCellVisibility(new TCellVisibility().setExpression(PUBLIC));
    }
 else {
      put.setCellVisibility(new TCellVisibility().setExpression("(" + SECRET + "|"+ CONFIDENTIAL+ ")"+ "&"+ "!"+ TOPSECRET));
    }
    handler.put(table,put);
  }
  TScan scan=new TScan();
  List<TColumn> columns=new ArrayList<>(1);
  TColumn column=new TColumn();
  column.setFamily(familyAname);
  column.setQualifier(qualifierAname);
  columns.add(column);
  scan.setColumns(columns);
  scan.setStartRow(Bytes.toBytes("testScan"));
  scan.setStopRow(Bytes.toBytes("testScan\uffff"));
  TAuthorization tauth=new TAuthorization();
  List<String> labels=new ArrayList<>(2);
  labels.add(SECRET);
  labels.add(PRIVATE);
  tauth.setLabels(labels);
  scan.setAuthorizations(tauth);
  int scanId=handler.openScanner(table,scan);
  List<TResult> results=handler.getScannerRows(scanId,10);
  assertEquals(9,results.size());
  Assert.assertFalse(Bytes.equals(results.get(5).getRow(),Bytes.toBytes("testScan" + 5)));
  for (int i=0; i < 9; i++) {
    if (i < 5) {
      assertArrayEquals(Bytes.toBytes("testScan" + i),results.get(i).getRow());
    }
 else     if (i == 5) {
      continue;
    }
 else {
      assertArrayEquals(Bytes.toBytes("testScan" + (i + 1)),results.get(i).getRow());
    }
  }
  results=handler.getScannerRows(scanId,9);
  assertEquals(0,results.size());
  handler.closeScanner(scanId);
  try {
    handler.getScannerRows(scanId,9);
    fail("Scanner id should be invalid");
  }
 catch (  TIllegalArgument e) {
  }
}
