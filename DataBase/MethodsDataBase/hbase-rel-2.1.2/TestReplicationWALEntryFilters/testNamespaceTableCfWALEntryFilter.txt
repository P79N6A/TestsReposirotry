@Test public void testNamespaceTableCfWALEntryFilter(){
  ReplicationPeer peer=mock(ReplicationPeer.class);
  ReplicationPeerConfig peerConfig=mock(ReplicationPeerConfig.class);
  when(peerConfig.replicateAllUserTables()).thenReturn(false);
  when(peerConfig.getNamespaces()).thenReturn(null);
  when(peerConfig.getTableCFsMap()).thenReturn(null);
  when(peer.getPeerConfig()).thenReturn(peerConfig);
  Entry userEntry=createEntry(null,a,b,c);
  ChainWALEntryFilter filter=new ChainWALEntryFilter(new NamespaceTableCfWALEntryFilter(peer));
  assertEquals(null,filter.filter(userEntry));
  userEntry=createEntry(null,a,b,c);
  Map<TableName,List<String>> tableCfs=new HashMap<>();
  when(peerConfig.replicateAllUserTables()).thenReturn(false);
  when(peerConfig.getTableCFsMap()).thenReturn(tableCfs);
  when(peer.getPeerConfig()).thenReturn(peerConfig);
  filter=new ChainWALEntryFilter(new NamespaceTableCfWALEntryFilter(peer));
  assertEquals(null,filter.filter(userEntry));
  userEntry=createEntry(null,a,b,c);
  tableCfs=new HashMap<>();
  tableCfs.put(TableName.valueOf("bar"),null);
  when(peerConfig.replicateAllUserTables()).thenReturn(false);
  when(peerConfig.getTableCFsMap()).thenReturn(tableCfs);
  when(peer.getPeerConfig()).thenReturn(peerConfig);
  filter=new ChainWALEntryFilter(new NamespaceTableCfWALEntryFilter(peer));
  assertEquals(null,filter.filter(userEntry));
  userEntry=createEntry(null,a,b,c);
  tableCfs=new HashMap<>();
  tableCfs.put(TableName.valueOf("foo"),Lists.newArrayList("a"));
  when(peerConfig.replicateAllUserTables()).thenReturn(false);
  when(peerConfig.getTableCFsMap()).thenReturn(tableCfs);
  when(peer.getPeerConfig()).thenReturn(peerConfig);
  filter=new ChainWALEntryFilter(new NamespaceTableCfWALEntryFilter(peer));
  assertEquals(createEntry(null,a),filter.filter(userEntry));
  userEntry=createEntry(null,a,b,c,d);
  tableCfs=new HashMap<>();
  tableCfs.put(TableName.valueOf("foo"),Lists.newArrayList("a","c"));
  when(peerConfig.replicateAllUserTables()).thenReturn(false);
  when(peerConfig.getTableCFsMap()).thenReturn(tableCfs);
  when(peer.getPeerConfig()).thenReturn(peerConfig);
  filter=new ChainWALEntryFilter(new NamespaceTableCfWALEntryFilter(peer));
  assertEquals(createEntry(null,a,c),filter.filter(userEntry));
  when(peer.getTableCFs()).thenReturn(null);
  Set<String> namespaces=new HashSet<>();
  when(peerConfig.replicateAllUserTables()).thenReturn(false);
  when(peerConfig.getNamespaces()).thenReturn(namespaces);
  when(peerConfig.getTableCFsMap()).thenReturn(null);
  when(peer.getPeerConfig()).thenReturn(peerConfig);
  userEntry=createEntry(null,a,b,c);
  filter=new ChainWALEntryFilter(new NamespaceTableCfWALEntryFilter(peer));
  assertEquals(null,filter.filter(userEntry));
  namespaces.add("default");
  when(peerConfig.replicateAllUserTables()).thenReturn(false);
  when(peerConfig.getNamespaces()).thenReturn(namespaces);
  when(peer.getPeerConfig()).thenReturn(peerConfig);
  userEntry=createEntry(null,a,b,c);
  filter=new ChainWALEntryFilter(new NamespaceTableCfWALEntryFilter(peer));
  assertEquals(createEntry(null,a,b,c),filter.filter(userEntry));
  namespaces=new HashSet<>();
  namespaces.add("ns1");
  when(peerConfig.replicateAllUserTables()).thenReturn(false);
  when(peerConfig.getNamespaces()).thenReturn(namespaces);
  when(peer.getPeerConfig()).thenReturn(peerConfig);
  userEntry=createEntry(null,a,b,c);
  filter=new ChainWALEntryFilter(new NamespaceTableCfWALEntryFilter(peer));
  assertEquals(null,filter.filter(userEntry));
  namespaces=new HashSet<>();
  tableCfs=new HashMap<>();
  namespaces.add("ns1");
  tableCfs.put(TableName.valueOf("foo"),Lists.newArrayList("a","c"));
  when(peerConfig.replicateAllUserTables()).thenReturn(false);
  when(peerConfig.getNamespaces()).thenReturn(namespaces);
  when(peerConfig.getTableCFsMap()).thenReturn(tableCfs);
  when(peer.getPeerConfig()).thenReturn(peerConfig);
  userEntry=createEntry(null,a,b,c);
  filter=new ChainWALEntryFilter(new NamespaceTableCfWALEntryFilter(peer));
  assertEquals(createEntry(null,a,c),filter.filter(userEntry));
  namespaces=new HashSet<>();
  tableCfs=new HashMap<>();
  namespaces.add("default");
  tableCfs.put(TableName.valueOf("ns1:foo"),Lists.newArrayList("a","c"));
  when(peerConfig.replicateAllUserTables()).thenReturn(false);
  when(peerConfig.getNamespaces()).thenReturn(namespaces);
  when(peerConfig.getTableCFsMap()).thenReturn(tableCfs);
  when(peer.getPeerConfig()).thenReturn(peerConfig);
  userEntry=createEntry(null,a,b,c);
  filter=new ChainWALEntryFilter(new NamespaceTableCfWALEntryFilter(peer));
  assertEquals(createEntry(null,a,b,c),filter.filter(userEntry));
  namespaces=new HashSet<>();
  tableCfs=new HashMap<>();
  namespaces.add("ns1");
  tableCfs.put(TableName.valueOf("bar"),null);
  when(peerConfig.replicateAllUserTables()).thenReturn(false);
  when(peerConfig.getNamespaces()).thenReturn(namespaces);
  when(peerConfig.getTableCFsMap()).thenReturn(tableCfs);
  when(peer.getPeerConfig()).thenReturn(peerConfig);
  userEntry=createEntry(null,a,b,c);
  filter=new ChainWALEntryFilter(new NamespaceTableCfWALEntryFilter(peer));
  assertEquals(null,filter.filter(userEntry));
}
