@Ignore @Test public void testMergeSwitch() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  Table t=TEST_UTIL.createTable(tableName,FAMILY);
  TEST_UTIL.loadTable(t,FAMILY,false);
  Admin admin=TEST_UTIL.getAdmin();
  int originalCount=admin.getTableRegions(tableName).size();
  initSwitchStatus(admin);
  admin.split(t.getName());
  int postSplitCount=-1;
  while ((postSplitCount=admin.getTableRegions(tableName).size()) == originalCount) {
    Threads.sleep(1);
    ;
  }
  assertTrue("originalCount=" + originalCount + ", newCount="+ postSplitCount,originalCount != postSplitCount);
  boolean[] results=admin.setSplitOrMergeEnabled(false,false,MasterSwitchType.MERGE);
  assertEquals(1,results.length);
  assertTrue(results[0]);
  List<HRegionInfo> regions=admin.getTableRegions(t.getName());
  assertTrue(regions.size() > 1);
  Future<?> f=admin.mergeRegionsAsync(regions.get(0).getEncodedNameAsBytes(),regions.get(1).getEncodedNameAsBytes(),true);
  try {
    f.get(10,TimeUnit.SECONDS);
    fail("Should not get here.");
  }
 catch (  ExecutionException ee) {
  }
  int count=admin.getTableRegions(tableName).size();
  assertTrue("newCount=" + postSplitCount + ", count="+ count,postSplitCount == count);
  results=admin.setSplitOrMergeEnabled(true,false,MasterSwitchType.MERGE);
  regions=admin.getTableRegions(t.getName());
  assertEquals(1,results.length);
  assertFalse(results[0]);
  f=admin.mergeRegionsAsync(regions.get(0).getEncodedNameAsBytes(),regions.get(1).getEncodedNameAsBytes(),true);
  f.get(10,TimeUnit.SECONDS);
  count=admin.getTableRegions(tableName).size();
  assertTrue((postSplitCount / 2) == count);
  admin.close();
}
