/** 
 * Test and make sure we could use a special pause setting when retry with CallQueueTooBigException, see HBASE-17114
 * @throws Exception if unexpected error happened during test
 */
@Test public void testRetryPauseWithCallQueueTooBigException() throws Exception {
  Configuration myConf=new Configuration(CONF);
  final long specialPause=500L;
  final int retries=1;
  myConf.setLong(HConstants.HBASE_CLIENT_PAUSE_FOR_CQTBE,specialPause);
  myConf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,retries);
  ClusterConnection conn=new MyConnectionImpl(myConf);
  AsyncProcessWithFailure ap=new AsyncProcessWithFailure(conn,myConf,new CallQueueTooBigException());
  BufferedMutatorParams bufferParam=createBufferedMutatorParams(ap,DUMMY_TABLE);
  BufferedMutatorImpl mutator=new BufferedMutatorImpl(conn,bufferParam,ap);
  Assert.assertNotNull(mutator.getAsyncProcess().createServerErrorTracker());
  Put p=createPut(1,true);
  mutator.mutate(p);
  long startTime=System.currentTimeMillis();
  try {
    mutator.flush();
    Assert.fail();
  }
 catch (  RetriesExhaustedWithDetailsException expected) {
    assertEquals(1,expected.getNumExceptions());
    assertTrue(expected.getRow(0) == p);
  }
  long actualSleep=System.currentTimeMillis() - startTime;
  long expectedSleep=0L;
  for (int i=0; i < retries; i++) {
    expectedSleep+=ConnectionUtils.getPauseTime(specialPause,i);
    actualSleep+=(long)(specialPause * 0.01f);
  }
  LOG.debug("Expected to sleep " + expectedSleep + "ms, actually slept "+ actualSleep+ "ms");
  Assert.assertTrue("Expected to sleep " + expectedSleep + " but actually "+ actualSleep+ "ms",actualSleep >= expectedSleep);
  final long normalPause=myConf.getLong(HConstants.HBASE_CLIENT_PAUSE,HConstants.DEFAULT_HBASE_CLIENT_PAUSE);
  ap=new AsyncProcessWithFailure(conn,myConf,new IOException());
  bufferParam=createBufferedMutatorParams(ap,DUMMY_TABLE);
  mutator=new BufferedMutatorImpl(conn,bufferParam,ap);
  Assert.assertNotNull(mutator.getAsyncProcess().createServerErrorTracker());
  mutator.mutate(p);
  startTime=System.currentTimeMillis();
  try {
    mutator.flush();
    Assert.fail();
  }
 catch (  RetriesExhaustedWithDetailsException expected) {
    assertEquals(1,expected.getNumExceptions());
    assertTrue(expected.getRow(0) == p);
  }
  actualSleep=System.currentTimeMillis() - startTime;
  expectedSleep=0L;
  for (int i=0; i < retries; i++) {
    expectedSleep+=ConnectionUtils.getPauseTime(normalPause,i);
  }
  expectedSleep+=normalPause;
  LOG.debug("Expected to sleep " + expectedSleep + "ms, actually slept "+ actualSleep+ "ms");
  Assert.assertTrue("Slept for too long: " + actualSleep + "ms",actualSleep <= expectedSleep);
}
