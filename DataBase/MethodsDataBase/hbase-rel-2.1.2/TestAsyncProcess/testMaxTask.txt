@Test public void testMaxTask() throws Exception {
  ClusterConnection conn=createHConnection();
  final String defaultClazz=conn.getConfiguration().get(RequestControllerFactory.REQUEST_CONTROLLER_IMPL_CONF_KEY);
  conn.getConfiguration().set(RequestControllerFactory.REQUEST_CONTROLLER_IMPL_CONF_KEY,SimpleRequestController.class.getName());
  final MyAsyncProcess ap=new MyAsyncProcess(conn,CONF);
  SimpleRequestController controller=(SimpleRequestController)ap.requestController;
  for (int i=0; i < 1000; i++) {
    ap.incTaskCounters(Collections.singleton(Bytes.toBytes("dummy")),sn);
  }
  final Thread myThread=Thread.currentThread();
  Thread t=new Thread(){
    @Override public void run(){
      Threads.sleep(2000);
      myThread.interrupt();
    }
  }
;
  List<Put> puts=new ArrayList<>(1);
  puts.add(createPut(1,true));
  t.start();
  try {
    ap.submit(null,DUMMY_TABLE,puts,false,null,false);
    Assert.fail("We should have been interrupted.");
  }
 catch (  InterruptedIOException expected) {
  }
  final long sleepTime=2000;
  Thread t2=new Thread(){
    @Override public void run(){
      Threads.sleep(sleepTime);
      while (controller.tasksInProgress.get() > 0) {
        ap.decTaskCounters(Collections.singleton(Bytes.toBytes("dummy")),sn);
      }
    }
  }
;
  t2.start();
  long start=System.currentTimeMillis();
  ap.submit(null,DUMMY_TABLE,new ArrayList<>(),false,null,false);
  long end=System.currentTimeMillis();
  Assert.assertTrue(start + 100L + sleepTime > end);
  if (defaultClazz != null) {
    conn.getConfiguration().set(RequestControllerFactory.REQUEST_CONTROLLER_IMPL_CONF_KEY,defaultClazz);
  }
}
