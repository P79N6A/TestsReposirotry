@Test public void testSubmitTrue() throws IOException {
  ClusterConnection conn=createHConnection();
  final MyAsyncProcess ap=new MyAsyncProcess(conn,CONF);
  final String defaultClazz=conn.getConfiguration().get(RequestControllerFactory.REQUEST_CONTROLLER_IMPL_CONF_KEY);
  conn.getConfiguration().set(RequestControllerFactory.REQUEST_CONTROLLER_IMPL_CONF_KEY,SimpleRequestController.class.getName());
  SimpleRequestController controller=(SimpleRequestController)ap.requestController;
  controller.tasksInProgress.incrementAndGet();
  final AtomicInteger ai=new AtomicInteger(controller.maxConcurrentTasksPerRegion);
  controller.taskCounterPerRegion.put(hri1.getRegionName(),ai);
  final AtomicBoolean checkPoint=new AtomicBoolean(false);
  final AtomicBoolean checkPoint2=new AtomicBoolean(false);
  Thread t=new Thread(){
    @Override public void run(){
      Threads.sleep(1000);
      Assert.assertFalse(checkPoint.get());
      ai.decrementAndGet();
      controller.tasksInProgress.decrementAndGet();
      checkPoint2.set(true);
    }
  }
;
  List<Put> puts=new ArrayList<>(1);
  Put p=createPut(1,true);
  puts.add(p);
  ap.submit(null,DUMMY_TABLE,puts,false,null,false);
  Assert.assertFalse(puts.isEmpty());
  t.start();
  ap.submit(null,DUMMY_TABLE,puts,true,null,false);
  Assert.assertTrue(puts.isEmpty());
  checkPoint.set(true);
  while (!checkPoint2.get()) {
    Threads.sleep(1);
  }
  if (defaultClazz != null) {
    conn.getConfiguration().set(RequestControllerFactory.REQUEST_CONTROLLER_IMPL_CONF_KEY,defaultClazz);
  }
}
