@Test @SuppressWarnings("unchecked") public void testCacheLimit() throws IOException {
  KeyValue kv1=new KeyValue(Bytes.toBytes("row1"),Bytes.toBytes("cf"),Bytes.toBytes("cq"),1,Type.Maximum);
  KeyValue kv2=new KeyValue(Bytes.toBytes("row2"),Bytes.toBytes("cf"),Bytes.toBytes("cq"),1,Type.Maximum);
  KeyValue kv3=new KeyValue(Bytes.toBytes("row3"),Bytes.toBytes("cf"),Bytes.toBytes("cq"),1,Type.Maximum);
  final Result[] results=new Result[]{Result.create(new Cell[]{kv1}),Result.create(new Cell[]{kv2}),Result.create(new Cell[]{kv3})};
  RpcRetryingCaller<Result[]> caller=Mockito.mock(RpcRetryingCaller.class);
  Mockito.when(rpcFactory.<Result[]>newCaller()).thenReturn(caller);
  Mockito.when(caller.callWithoutRetries(Mockito.any(),Mockito.anyInt())).thenAnswer(new Answer<Result[]>(){
    private int count=0;
    @Override public Result[] answer(    InvocationOnMock invocation) throws Throwable {
      ScannerCallableWithReplicas callable=invocation.getArgument(0);
switch (count) {
case 0:
        count++;
      callable.currentScannerCallable.setMoreResultsInRegion(MoreResults.YES);
    return results;
case 1:
  count++;
return null;
default :
throw new RuntimeException("Expected only 2 invocations");
}
}
}
);
Mockito.when(rpcFactory.<Result[]>newCaller()).thenReturn(caller);
scan.setCaching(1);
scan.setMaxResultSize(1000 * 1000);
try (MockClientScanner scanner=new MockClientScanner(conf,scan,TableName.valueOf(name.getMethodName()),clusterConn,rpcFactory,controllerFactory,pool,Integer.MAX_VALUE)){
InOrder inOrder=Mockito.inOrder(caller);
scanner.loadCache();
inOrder.verify(caller,Mockito.times(1)).callWithoutRetries(Mockito.any(),Mockito.anyInt());
assertEquals(3,scanner.cache.size());
Result r=scanner.cache.poll();
assertNotNull(r);
CellScanner cs=r.cellScanner();
assertTrue(cs.advance());
assertEquals(kv1,cs.current());
assertFalse(cs.advance());
r=scanner.cache.poll();
assertNotNull(r);
cs=r.cellScanner();
assertTrue(cs.advance());
assertEquals(kv2,cs.current());
assertFalse(cs.advance());
r=scanner.cache.poll();
assertNotNull(r);
cs=r.cellScanner();
assertTrue(cs.advance());
assertEquals(kv3,cs.current());
assertFalse(cs.advance());
}
 }
