@Test public void testSelectiveFlushWithBasicAndMerge() throws IOException {
  conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,300 * 1024);
  conf.setLong(FlushLargeStoresPolicy.HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN,75 * 1024);
  conf.setDouble(CompactingMemStore.IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY,0.8);
  conf.set(CompactingMemStore.COMPACTING_MEMSTORE_TYPE_KEY,String.valueOf(MemoryCompactionPolicy.BASIC));
  conf.setInt(MemStoreCompactionStrategy.COMPACTING_MEMSTORE_THRESHOLD_KEY,1);
  HRegion region=initHRegion("testSelectiveFlushWithBasicAndMerge",conf);
  verifyInMemoryFlushSize(region);
  for (int i=1; i <= 1200; i++) {
    region.put(createPut(1,i));
    if (i <= 100) {
      region.put(createPut(2,i));
      if (i <= 50) {
        region.put(createPut(3,i));
      }
    }
  }
  for (int i=100; i < 2000; i++) {
    region.put(createPut(2,i));
  }
  long totalMemstoreSize=region.getMemStoreDataSize();
  ((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).setIndexType(CompactingMemStore.IndexType.ARRAY_MAP);
  ((CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore).setIndexType(CompactingMemStore.IndexType.ARRAY_MAP);
  MemStoreSize cf1MemstoreSizePhaseI=region.getStore(FAMILY1).getMemStoreSize();
  MemStoreSize cf2MemstoreSizePhaseI=region.getStore(FAMILY2).getMemStoreSize();
  MemStoreSize cf3MemstoreSizePhaseI=region.getStore(FAMILY3).getMemStoreSize();
  assertTrue(cf1MemstoreSizePhaseI.getDataSize() > 0);
  assertTrue(cf2MemstoreSizePhaseI.getDataSize() > 0);
  assertTrue(cf3MemstoreSizePhaseI.getDataSize() > 0);
  assertEquals(totalMemstoreSize,cf1MemstoreSizePhaseI.getDataSize() + cf2MemstoreSizePhaseI.getDataSize() + cf3MemstoreSizePhaseI.getDataSize());
  ((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).flushInMemory();
  ((CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore).flushInMemory();
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  region.flush(false);
  MemStoreSize cf1MemstoreSizePhaseII=region.getStore(FAMILY1).getMemStoreSize();
  MemStoreSize cf2MemstoreSizePhaseII=region.getStore(FAMILY2).getMemStoreSize();
  MemStoreSize cf3MemstoreSizePhaseII=region.getStore(FAMILY3).getMemStoreSize();
  assertTrue(cf1MemstoreSizePhaseI.getHeapSize() > cf1MemstoreSizePhaseII.getHeapSize());
  assertEquals(cf1MemstoreSizePhaseI.getDataSize(),cf1MemstoreSizePhaseII.getDataSize());
  assertEquals(0,cf2MemstoreSizePhaseII.getDataSize());
  for (int i=1; i <= 1200; i++) {
    region.put(createPut(1,i));
    if (i <= 100) {
      region.put(createPut(2,i));
      if (i <= 50) {
        region.put(createPut(3,i));
      }
    }
  }
  for (int i=100; i < 2000; i++) {
    region.put(createPut(2,i));
  }
  MemStoreSize cf1MemstoreSizePhaseIII=region.getStore(FAMILY1).getMemStoreSize();
  ((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).flushInMemory();
  ((CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore).flushInMemory();
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  region.flush(false);
  MemStoreSize cf1MemstoreSizePhaseIV=region.getStore(FAMILY1).getMemStoreSize();
  MemStoreSize cf2MemstoreSizePhaseIV=region.getStore(FAMILY2).getMemStoreSize();
  assertEquals(2 * cf1MemstoreSizePhaseI.getDataSize(),cf1MemstoreSizePhaseIV.getDataSize());
  assertEquals(cf1MemstoreSizePhaseI.getHeapSize() - cf1MemstoreSizePhaseII.getHeapSize(),cf1MemstoreSizePhaseIII.getHeapSize() - cf1MemstoreSizePhaseIV.getHeapSize() - CellArrayImmutableSegment.DEEP_OVERHEAD_CAM);
  assertEquals(3,((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).getSegments().size());
  assertEquals("\n<<< DEBUG: The data--heap sizes of stores before/after first flushes," + " CF1: " + cf1MemstoreSizePhaseI.getDataSize() + "/"+ cf1MemstoreSizePhaseII.getDataSize()+ "--"+ cf1MemstoreSizePhaseI.getHeapSize()+ "/"+ cf1MemstoreSizePhaseII.getHeapSize()+ ", CF2: "+ cf2MemstoreSizePhaseI.getDataSize()+ "/"+ cf2MemstoreSizePhaseII.getDataSize()+ "--"+ cf2MemstoreSizePhaseI.getHeapSize()+ "/"+ cf2MemstoreSizePhaseII.getHeapSize()+ ", CF3: "+ cf3MemstoreSizePhaseI.getDataSize()+ "/"+ cf3MemstoreSizePhaseII.getDataSize()+ "--"+ cf3MemstoreSizePhaseI.getHeapSize()+ "/"+ cf3MemstoreSizePhaseII.getHeapSize()+ "\n<<< AND before/after second flushes "+ " CF1: "+ cf1MemstoreSizePhaseIII.getDataSize()+ "/"+ cf1MemstoreSizePhaseIV.getDataSize()+ "--"+ cf1MemstoreSizePhaseIII.getHeapSize()+ "/"+ cf1MemstoreSizePhaseIV.getHeapSize()+ "\n",0,cf2MemstoreSizePhaseIV.getDataSize());
  HBaseTestingUtility.closeRegionAndWAL(region);
}
