@Test public void testSelectiveFlushWithIndexCompaction() throws IOException {
  conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,300 * 1024);
  conf.setLong(FlushLargeStoresPolicy.HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN,75 * 1024);
  conf.setDouble(CompactingMemStore.IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY,0.5);
  conf.set(CompactingMemStore.COMPACTING_MEMSTORE_TYPE_KEY,String.valueOf(MemoryCompactionPolicy.BASIC));
  HRegion region=initHRegion("testSelectiveFlushWithIndexCompaction",conf);
  verifyInMemoryFlushSize(region);
  for (int i=1; i <= 1200; i++) {
    region.put(createPut(1,i));
    if (i <= 100) {
      region.put(createPut(2,i));
      if (i <= 50) {
        region.put(createDoublePut(3,i));
      }
    }
  }
  for (int i=100; i < 2000; i++) {
    region.put(createPut(2,i));
  }
  long totalMemstoreSizePhaseI=region.getMemStoreDataSize();
  long smallestSeqCF1PhaseI=region.getOldestSeqIdOfStore(FAMILY1);
  long smallestSeqCF2PhaseI=region.getOldestSeqIdOfStore(FAMILY2);
  long smallestSeqCF3PhaseI=region.getOldestSeqIdOfStore(FAMILY3);
  MemStoreSize cf1MemstoreSizePhaseI=region.getStore(FAMILY1).getMemStoreSize();
  MemStoreSize cf2MemstoreSizePhaseI=region.getStore(FAMILY2).getMemStoreSize();
  MemStoreSize cf3MemstoreSizePhaseI=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstorePhaseI=getWAL(region).getEarliestMemStoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  assertEquals(smallestSeqCF1PhaseI,smallestSeqInRegionCurrentMemstorePhaseI);
  assertTrue(smallestSeqCF1PhaseI < smallestSeqCF2PhaseI);
  assertTrue(smallestSeqCF2PhaseI < smallestSeqCF3PhaseI);
  assertTrue(cf1MemstoreSizePhaseI.getDataSize() > 0);
  assertTrue(cf2MemstoreSizePhaseI.getDataSize() > 0);
  assertTrue(cf3MemstoreSizePhaseI.getDataSize() > 0);
  assertEquals(totalMemstoreSizePhaseI,cf1MemstoreSizePhaseI.getDataSize() + cf2MemstoreSizePhaseI.getDataSize() + cf3MemstoreSizePhaseI.getDataSize());
  region.flush(false);
  CompactingMemStore cms1=(CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore;
  CompactingMemStore cms3=(CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore;
  cms1.flushInMemory();
  cms3.flushInMemory();
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  MemStoreSize cf1MemstoreSizePhaseII=region.getStore(FAMILY1).getMemStoreSize();
  MemStoreSize cf2MemstoreSizePhaseII=region.getStore(FAMILY2).getMemStoreSize();
  MemStoreSize cf3MemstoreSizePhaseII=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstorePhaseII=getWAL(region).getEarliestMemStoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  long smallestSeqCF3PhaseII=region.getOldestSeqIdOfStore(FAMILY3);
  long totalMemstoreSizePhaseII=region.getMemStoreDataSize();
  assertEquals(cf1MemstoreSizePhaseII.getDataSize(),cf1MemstoreSizePhaseI.getDataSize());
  assertTrue(cf1MemstoreSizePhaseII.getHeapSize() < cf1MemstoreSizePhaseI.getHeapSize());
  assertEquals(0,cf2MemstoreSizePhaseII.getDataSize());
  assertEquals(MutableSegment.DEEP_OVERHEAD,cf2MemstoreSizePhaseII.getHeapSize());
  assertEquals(cf3MemstoreSizePhaseII.getDataSize(),cf3MemstoreSizePhaseI.getDataSize());
  assertTrue(cf3MemstoreSizePhaseI.getHeapSize() / 2 < cf3MemstoreSizePhaseII.getHeapSize());
  assertEquals(smallestSeqInRegionCurrentMemstorePhaseII,smallestSeqCF1PhaseI);
  assertEquals(totalMemstoreSizePhaseII,cf1MemstoreSizePhaseII.getDataSize() + cf2MemstoreSizePhaseII.getDataSize() + cf3MemstoreSizePhaseII.getDataSize());
  for (int i=1200; i < 8000; i++) {
    region.put(createPut(1,i));
  }
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  MemStoreSize cf1MemstoreSizePhaseIII=region.getStore(FAMILY1).getMemStoreSize();
  long totalMemstoreSizePhaseIII=region.getMemStoreDataSize();
  assertEquals(totalMemstoreSizePhaseIII,cf1MemstoreSizePhaseIII.getDataSize() + cf2MemstoreSizePhaseII.getDataSize() + cf3MemstoreSizePhaseII.getDataSize());
  region.flush(false);
  MemStoreSize cf1MemstoreSizePhaseIV=region.getStore(FAMILY1).getMemStoreSize();
  MemStoreSize cf2MemstoreSizePhaseIV=region.getStore(FAMILY2).getMemStoreSize();
  MemStoreSize cf3MemstoreSizePhaseIV=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstorePhaseIV=getWAL(region).getEarliestMemStoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  long smallestSeqCF3PhaseIV=region.getOldestSeqIdOfStore(FAMILY3);
  assertTrue(cf1MemstoreSizePhaseIII.getDataSize() > cf1MemstoreSizePhaseIV.getDataSize());
  assertEquals(0,cf2MemstoreSizePhaseIV.getDataSize());
  assertEquals(MutableSegment.DEEP_OVERHEAD,cf2MemstoreSizePhaseIV.getHeapSize());
  assertEquals(cf3MemstoreSizePhaseIV,cf3MemstoreSizePhaseII);
  assertEquals(smallestSeqCF3PhaseII,smallestSeqCF3PhaseIV);
  assertEquals(smallestSeqInRegionCurrentMemstorePhaseIV,smallestSeqCF3PhaseIV);
  region.flush(true);
  MemStoreSize cf1MemstoreSizePhaseV=region.getStore(FAMILY1).getMemStoreSize();
  MemStoreSize cf2MemstoreSizePhaseV=region.getStore(FAMILY2).getMemStoreSize();
  MemStoreSize cf3MemstoreSizePhaseV=region.getStore(FAMILY3).getMemStoreSize();
  long smallestSeqInRegionCurrentMemstorePhaseV=getWAL(region).getEarliestMemStoreSeqNum(region.getRegionInfo().getEncodedNameAsBytes());
  long totalMemstoreSizePhaseV=region.getMemStoreDataSize();
  assertEquals(0,cf1MemstoreSizePhaseV.getDataSize());
  assertEquals(MutableSegment.DEEP_OVERHEAD,cf1MemstoreSizePhaseV.getHeapSize());
  assertEquals(0,cf2MemstoreSizePhaseV.getDataSize());
  assertEquals(MutableSegment.DEEP_OVERHEAD,cf2MemstoreSizePhaseV.getHeapSize());
  assertEquals(0,cf3MemstoreSizePhaseV.getDataSize());
  assertEquals(MutableSegment.DEEP_OVERHEAD,cf3MemstoreSizePhaseV.getHeapSize());
  assertEquals(0,totalMemstoreSizePhaseV);
  assertEquals(HConstants.NO_SEQNUM,smallestSeqInRegionCurrentMemstorePhaseV);
  for (int i=1; i <= 300; i++) {
    region.put(createPut(1,i));
    region.put(createPut(2,i));
    region.put(createPut(3,i));
    region.put(createPut(4,i));
    region.put(createPut(5,i));
  }
  MemStoreSize cf1ActiveSizePhaseVI=region.getStore(FAMILY1).getMemStoreSize();
  MemStoreSize cf3ActiveSizePhaseVI=region.getStore(FAMILY3).getMemStoreSize();
  MemStoreSize cf5ActiveSizePhaseVI=region.getStore(FAMILIES[4]).getMemStoreSize();
  region.flush(false);
  MemStoreSize cf1ActiveSizePhaseVII=region.getStore(FAMILY1).getMemStoreSize();
  MemStoreSize cf3ActiveSizePhaseVII=region.getStore(FAMILY3).getMemStoreSize();
  MemStoreSize cf5ActiveSizePhaseVII=region.getStore(FAMILIES[4]).getMemStoreSize();
  assertTrue(cf1ActiveSizePhaseVII.getDataSize() < cf1ActiveSizePhaseVI.getDataSize());
  assertTrue(cf3ActiveSizePhaseVII.getDataSize() < cf3ActiveSizePhaseVI.getDataSize());
  assertTrue(cf5ActiveSizePhaseVII.getDataSize() < cf5ActiveSizePhaseVI.getDataSize());
  HBaseTestingUtility.closeRegionAndWAL(region);
}
