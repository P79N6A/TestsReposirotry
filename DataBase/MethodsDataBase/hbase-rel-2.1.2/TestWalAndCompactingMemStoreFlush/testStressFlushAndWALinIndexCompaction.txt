@Test public void testStressFlushAndWALinIndexCompaction() throws IOException {
  conf.setLong(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,600 * 1024);
  conf.setLong(FlushLargeStoresPolicy.HREGION_COLUMNFAMILY_FLUSH_SIZE_LOWER_BOUND_MIN,200 * 1024);
  conf.set(CompactingMemStore.COMPACTING_MEMSTORE_TYPE_KEY,String.valueOf(MemoryCompactionPolicy.BASIC));
  HRegion region=initHRegion("testSelectiveFlushAndWALinDataCompaction",conf);
  verifyInMemoryFlushSize(region);
  Thread[] threads=new Thread[25];
  for (int i=0; i < threads.length; i++) {
    int id=i * 10000;
    ConcurrentPutRunnable runnable=new ConcurrentPutRunnable(region,id);
    threads[i]=new Thread(runnable);
    threads[i].start();
  }
  Threads.sleep(10000);
  region.flush(true);
  Threads.sleep(10000);
  region.flush(true);
  ((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).flushInMemory();
  ((CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore).flushInMemory();
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY1)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  while (((CompactingMemStore)((HStore)region.getStore(FAMILY3)).memstore).isMemStoreFlushingInMemory()) {
    Threads.sleep(10);
  }
  for (int i=0; i < threads.length; i++) {
    try {
      threads[i].join();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}
