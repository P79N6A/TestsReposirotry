@Test public void testBatchingResultWhenRegionMove() throws IOException {
  Table table=createTestTable(TableName.valueOf(name.getMethodName()),ROWS,FAMILIES,QUALIFIERS,VALUE);
  Put put=new Put(ROWS[1]);
  put.addColumn(FAMILIES[0],QUALIFIERS[1],new byte[VALUE_SIZE * 10]);
  table.put(put);
  Delete delete=new Delete(ROWS[1]);
  delete.addColumn(FAMILIES[NUM_FAMILIES - 1],QUALIFIERS[NUM_QUALIFIERS - 1]);
  table.delete(delete);
  moveRegion(table,1);
  Scan scan=new Scan();
  scan.setCaching(1);
  scan.setBatch(5);
  scan.setMaxResultSize(VALUE_SIZE * 6);
  ResultScanner scanner=table.getScanner(scan);
  for (int i=0; i < NUM_FAMILIES * NUM_QUALIFIERS / 5 - 1; i++) {
    assertTrue(scanner.next().mayHaveMoreCellsInRow());
  }
  Result result1=scanner.next();
  assertEquals(5,result1.rawCells().length);
  assertCell(result1.rawCells()[0],ROWS[0],FAMILIES[NUM_FAMILIES - 1],QUALIFIERS[NUM_QUALIFIERS - 5]);
  assertCell(result1.rawCells()[4],ROWS[0],FAMILIES[NUM_FAMILIES - 1],QUALIFIERS[NUM_QUALIFIERS - 1]);
  assertFalse(result1.mayHaveMoreCellsInRow());
  moveRegion(table,2);
  Result result2=scanner.next();
  assertEquals(5,result2.rawCells().length);
  assertCell(result2.rawCells()[0],ROWS[1],FAMILIES[0],QUALIFIERS[0]);
  assertCell(result2.rawCells()[4],ROWS[1],FAMILIES[0],QUALIFIERS[4]);
  assertTrue(result2.mayHaveMoreCellsInRow());
  moveRegion(table,3);
  Result result3=scanner.next();
  assertEquals(5,result3.rawCells().length);
  assertCell(result3.rawCells()[0],ROWS[1],FAMILIES[0],QUALIFIERS[5]);
  assertCell(result3.rawCells()[4],ROWS[1],FAMILIES[0],QUALIFIERS[9]);
  assertTrue(result3.mayHaveMoreCellsInRow());
  for (int i=0; i < NUM_FAMILIES * NUM_QUALIFIERS / 5 - 3; i++) {
    Result result=scanner.next();
    assertEquals(5,result.rawCells().length);
    assertTrue(result.mayHaveMoreCellsInRow());
  }
  Result result=scanner.next();
  assertEquals(4,result.rawCells().length);
  assertFalse(result.mayHaveMoreCellsInRow());
  for (int i=2; i < NUM_ROWS; i++) {
    for (int j=0; j < NUM_FAMILIES; j++) {
      for (int k=0; k < NUM_QUALIFIERS; k+=5) {
        result=scanner.next();
        assertCell(result.rawCells()[0],ROWS[i],FAMILIES[j],QUALIFIERS[k]);
        assertEquals(5,result.rawCells().length);
        if (j == NUM_FAMILIES - 1 && k == NUM_QUALIFIERS - 5) {
          assertFalse(result.mayHaveMoreCellsInRow());
        }
 else {
          assertTrue(result.mayHaveMoreCellsInRow());
        }
      }
    }
  }
  assertNull(scanner.next());
}
