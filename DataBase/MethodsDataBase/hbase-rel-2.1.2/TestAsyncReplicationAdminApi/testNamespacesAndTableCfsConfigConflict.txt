@Test public void testNamespacesAndTableCfsConfigConflict() throws Exception {
  String ns1="ns1";
  String ns2="ns2";
  final TableName tableName1=TableName.valueOf(ns1 + ":" + tableName.getNameAsString()+ "1");
  final TableName tableName2=TableName.valueOf(ns2 + ":" + tableName.getNameAsString()+ "2");
  ReplicationPeerConfig rpc=new ReplicationPeerConfig();
  rpc.setClusterKey(KEY_ONE);
  admin.addReplicationPeer(ID_ONE,rpc).join();
  rpc.setReplicateAllUserTables(false);
  admin.updateReplicationPeerConfig(ID_ONE,rpc).join();
  rpc=admin.getReplicationPeerConfig(ID_ONE).get();
  Set<String> namespaces=new HashSet<String>();
  namespaces.add(ns1);
  rpc.setNamespaces(namespaces);
  admin.updateReplicationPeerConfig(ID_ONE,rpc).get();
  rpc=admin.getReplicationPeerConfig(ID_ONE).get();
  Map<TableName,List<String>> tableCfs=new HashMap<>();
  tableCfs.put(tableName1,new ArrayList<>());
  rpc.setTableCFsMap(tableCfs);
  try {
    admin.updateReplicationPeerConfig(ID_ONE,rpc).join();
    fail("Test case should fail, because table " + tableName1 + " conflict with namespace "+ ns1);
  }
 catch (  CompletionException e) {
  }
  rpc=admin.getReplicationPeerConfig(ID_ONE).get();
  tableCfs.clear();
  tableCfs.put(tableName2,new ArrayList<>());
  rpc.setTableCFsMap(tableCfs);
  admin.updateReplicationPeerConfig(ID_ONE,rpc).get();
  rpc=admin.getReplicationPeerConfig(ID_ONE).get();
  namespaces.clear();
  namespaces.add(ns2);
  rpc.setNamespaces(namespaces);
  try {
    admin.updateReplicationPeerConfig(ID_ONE,rpc).join();
    fail("Test case should fail, because namespace " + ns2 + " conflict with table "+ tableName2);
  }
 catch (  CompletionException e) {
  }
  admin.removeReplicationPeer(ID_ONE).join();
}
