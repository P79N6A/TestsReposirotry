@Test public void testRemovePeerTableCFs() throws Exception {
  ReplicationPeerConfig rpc1=new ReplicationPeerConfig();
  rpc1.setClusterKey(KEY_ONE);
  final TableName tableName1=TableName.valueOf(tableName.getNameAsString() + "t1");
  final TableName tableName2=TableName.valueOf(tableName.getNameAsString() + "t2");
  final TableName tableName3=TableName.valueOf(tableName.getNameAsString() + "t3");
  final TableName tableName4=TableName.valueOf(tableName.getNameAsString() + "t4");
  admin.addReplicationPeer(ID_ONE,rpc1).join();
  rpc1.setReplicateAllUserTables(false);
  admin.updateReplicationPeerConfig(ID_ONE,rpc1).join();
  Map<TableName,List<String>> tableCFs=new HashMap<>();
  try {
    tableCFs.put(tableName3,null);
    admin.removeReplicationPeerTableCFs(ID_ONE,tableCFs).join();
    fail("Test case should fail as removing table-cfs from a peer whose table-cfs is null");
  }
 catch (  CompletionException e) {
    assertTrue(e.getCause() instanceof ReplicationException);
  }
  assertNull(admin.getReplicationPeerConfig(ID_ONE).get().getTableCFsMap());
  tableCFs.clear();
  tableCFs.put(tableName1,null);
  tableCFs.put(tableName2,new ArrayList<>());
  tableCFs.get(tableName2).add("cf1");
  admin.appendReplicationPeerTableCFs(ID_ONE,tableCFs).join();
  try {
    tableCFs.clear();
    tableCFs.put(tableName3,null);
    admin.removeReplicationPeerTableCFs(ID_ONE,tableCFs).join();
    fail("Test case should fail as removing table-cfs from a peer whose table-cfs didn't contain t3");
  }
 catch (  CompletionException e) {
    assertTrue(e.getCause() instanceof ReplicationException);
  }
  Map<TableName,List<String>> result=admin.getReplicationPeerConfig(ID_ONE).get().getTableCFsMap();
  assertEquals(2,result.size());
  assertTrue("Should contain t1",result.containsKey(tableName1));
  assertTrue("Should contain t2",result.containsKey(tableName2));
  assertNull(result.get(tableName1));
  assertEquals(1,result.get(tableName2).size());
  assertEquals("cf1",result.get(tableName2).get(0));
  try {
    tableCFs.clear();
    tableCFs.put(tableName1,new ArrayList<>());
    tableCFs.get(tableName1).add("cf1");
    admin.removeReplicationPeerTableCFs(ID_ONE,tableCFs).join();
    fail("Test case should fail, because table t1 didn't specify cfs in peer config");
  }
 catch (  CompletionException e) {
    assertTrue(e.getCause() instanceof ReplicationException);
  }
  tableCFs.clear();
  tableCFs.put(tableName1,null);
  admin.removeReplicationPeerTableCFs(ID_ONE,tableCFs).join();
  result=admin.getReplicationPeerConfig(ID_ONE).get().getTableCFsMap();
  assertEquals(1,result.size());
  assertEquals(1,result.get(tableName2).size());
  assertEquals("cf1",result.get(tableName2).get(0));
  try {
    tableCFs.clear();
    tableCFs.put(tableName2,null);
    admin.removeReplicationPeerTableCFs(ID_ONE,tableCFs).join();
    fail("Test case should fail, because table t2 hase specified cfs in peer config");
  }
 catch (  CompletionException e) {
    assertTrue(e.getCause() instanceof ReplicationException);
  }
  tableCFs.clear();
  tableCFs.put(tableName2,new ArrayList<>());
  tableCFs.get(tableName2).add("cf1");
  admin.removeReplicationPeerTableCFs(ID_ONE,tableCFs).join();
  assertNull(admin.getReplicationPeerConfig(ID_ONE).get().getTableCFsMap());
  tableCFs.clear();
  tableCFs.put(tableName4,new ArrayList<>());
  admin.appendReplicationPeerTableCFs(ID_ONE,tableCFs).join();
  admin.removeReplicationPeerTableCFs(ID_ONE,tableCFs).join();
  assertNull(admin.getReplicationPeerConfig(ID_ONE).get().getTableCFsMap());
  admin.removeReplicationPeer(ID_ONE);
}
