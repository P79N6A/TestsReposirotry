@Test @SuppressWarnings("deprecation") public void testMasterOpsWhileSplitting() throws Exception {
  MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
  HMaster m=cluster.getMaster();
  try (Table ht=TEST_UTIL.createTable(TABLENAME,FAMILYNAME)){
    assertTrue(m.getTableStateManager().isTableState(TABLENAME,TableState.State.ENABLED));
    TEST_UTIL.loadTable(ht,FAMILYNAME,false);
  }
   List<Pair<RegionInfo,ServerName>> tableRegions=MetaTableAccessor.getTableRegionsAndLocations(m.getConnection(),TABLENAME);
  LOG.info("Regions after load: " + Joiner.on(',').join(tableRegions));
  assertEquals(1,tableRegions.size());
  assertArrayEquals(HConstants.EMPTY_START_ROW,tableRegions.get(0).getFirst().getStartKey());
  assertArrayEquals(HConstants.EMPTY_END_ROW,tableRegions.get(0).getFirst().getEndKey());
  LOG.info("Splitting table");
  TEST_UTIL.getAdmin().split(TABLENAME);
  LOG.info("Making sure we can call getTableRegions while opening");
  while (tableRegions.size() < 3) {
    tableRegions=MetaTableAccessor.getTableRegionsAndLocations(m.getConnection(),TABLENAME,false);
    Thread.sleep(100);
  }
  LOG.info("Regions: " + Joiner.on(',').join(tableRegions));
  assertEquals(3,tableRegions.size());
  LOG.info("Making sure we can call getTableRegionClosest while opening");
  Pair<RegionInfo,ServerName> pair=getTableRegionForRow(m,TABLENAME,Bytes.toBytes("cde"));
  LOG.info("Result is: " + pair);
  Pair<RegionInfo,ServerName> tableRegionFromName=MetaTableAccessor.getRegion(m.getConnection(),pair.getFirst().getRegionName());
  assertTrue(RegionInfo.COMPARATOR.compare(tableRegionFromName.getFirst(),pair.getFirst()) == 0);
}
