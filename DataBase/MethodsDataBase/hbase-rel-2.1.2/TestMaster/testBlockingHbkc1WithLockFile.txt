@Test public void testBlockingHbkc1WithLockFile() throws IOException {
  Path hbckLockPath=new Path(HBaseFsck.getTmpDir(TEST_UTIL.getConfiguration()),HBaseFsck.HBCK_LOCK_FILE);
  FileSystem fs=TEST_UTIL.getTestFileSystem();
  assertTrue(fs.exists(hbckLockPath));
  TEST_UTIL.getMiniHBaseCluster().killMaster(TEST_UTIL.getMiniHBaseCluster().getMaster().getServerName());
  assertTrue(fs.exists(hbckLockPath));
  TEST_UTIL.getMiniHBaseCluster().startMaster();
  TEST_UTIL.waitFor(30000,() -> TEST_UTIL.getMiniHBaseCluster().getMaster() != null && TEST_UTIL.getMiniHBaseCluster().getMaster().isInitialized());
  assertTrue(fs.exists(hbckLockPath));
  TEST_UTIL.getMiniHBaseCluster().startMaster();
  assertTrue(fs.exists(hbckLockPath));
  fs.delete(hbckLockPath,true);
  assertFalse(fs.exists(hbckLockPath));
  TEST_UTIL.getMiniHBaseCluster().getLiveMasterThreads().stream().map(sn -> sn.getMaster().getServerName()).forEach(sn -> {
    try {
      TEST_UTIL.getMiniHBaseCluster().killMaster(sn);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
);
  TEST_UTIL.getMiniHBaseCluster().startMaster();
  TEST_UTIL.waitFor(30000,() -> TEST_UTIL.getMiniHBaseCluster().getMaster() != null && TEST_UTIL.getMiniHBaseCluster().getMaster().isInitialized());
  assertTrue(fs.exists(hbckLockPath));
}
