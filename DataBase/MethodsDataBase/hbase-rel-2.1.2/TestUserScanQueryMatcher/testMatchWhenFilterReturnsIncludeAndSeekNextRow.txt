@Test public void testMatchWhenFilterReturnsIncludeAndSeekNextRow() throws IOException {
  List<MatchCode> expected=new ArrayList<>();
  expected.add(ScanQueryMatcher.MatchCode.INCLUDE_AND_SEEK_NEXT_ROW);
  expected.add(ScanQueryMatcher.MatchCode.DONE);
  Scan scanWithFilter=new Scan(scan).setFilter(new AlwaysIncludeAndSeekNextRowFilter());
  long now=EnvironmentEdgeManager.currentTime();
  UserScanQueryMatcher qm=UserScanQueryMatcher.create(scanWithFilter,new ScanInfo(this.conf,fam2,0,1,ttl,KeepDeletedCells.FALSE,HConstants.DEFAULT_BLOCKSIZE,0,rowComparator,false),get.getFamilyMap().get(fam2),now - ttl,now,null);
  List<KeyValue> memstore=new ArrayList<>();
  memstore.add(new KeyValue(row1,fam2,col2,1,data));
  memstore.add(new KeyValue(row2,fam1,col1,data));
  List<ScanQueryMatcher.MatchCode> actual=new ArrayList<>(memstore.size());
  KeyValue k=memstore.get(0);
  qm.setToNewRow(k);
  for (  KeyValue kv : memstore) {
    actual.add(qm.match(kv));
  }
  assertEquals(expected.size(),actual.size());
  for (int i=0; i < expected.size(); i++) {
    LOG.debug("expected " + expected.get(i) + ", actual "+ actual.get(i));
    assertEquals(expected.get(i),actual.get(i));
  }
}
