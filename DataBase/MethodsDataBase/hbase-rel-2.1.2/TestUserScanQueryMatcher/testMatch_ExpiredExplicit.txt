/** 
 * Verify that  {@link ScanQueryMatcher} only skips expired KeyValue instances and does not exitearly from the row (skipping later non-expired KeyValues). This version mimics a Get with explicitly specified column qualifiers.
 * @throws IOException
 */
@Test public void testMatch_ExpiredExplicit() throws IOException {
  long testTTL=1000;
  MatchCode[] expected=new MatchCode[]{ScanQueryMatcher.MatchCode.SEEK_NEXT_COL,ScanQueryMatcher.MatchCode.INCLUDE_AND_SEEK_NEXT_COL,ScanQueryMatcher.MatchCode.SEEK_NEXT_COL,ScanQueryMatcher.MatchCode.INCLUDE_AND_SEEK_NEXT_COL,ScanQueryMatcher.MatchCode.SEEK_NEXT_ROW,ScanQueryMatcher.MatchCode.DONE};
  long now=EnvironmentEdgeManager.currentTime();
  UserScanQueryMatcher qm=UserScanQueryMatcher.create(scan,new ScanInfo(this.conf,fam2,0,1,testTTL,KeepDeletedCells.FALSE,HConstants.DEFAULT_BLOCKSIZE,0,rowComparator,false),get.getFamilyMap().get(fam2),now - testTTL,now,null);
  KeyValue[] kvs=new KeyValue[]{new KeyValue(row1,fam2,col1,now - 100,data),new KeyValue(row1,fam2,col2,now - 50,data),new KeyValue(row1,fam2,col3,now - 5000,data),new KeyValue(row1,fam2,col4,now - 500,data),new KeyValue(row1,fam2,col5,now - 10000,data),new KeyValue(row2,fam1,col1,now - 10,data)};
  KeyValue k=kvs[0];
  qm.setToNewRow(k);
  List<MatchCode> actual=new ArrayList<>(kvs.length);
  for (  KeyValue kv : kvs) {
    actual.add(qm.match(kv));
  }
  assertEquals(expected.length,actual.size());
  for (int i=0; i < expected.length; i++) {
    LOG.debug("expected " + expected[i] + ", actual "+ actual.get(i));
    assertEquals(expected[i],actual.get(i));
  }
}
