@Test public void testRace() throws Exception {
  ProcedureExecutor<MasterProcedureEnv> executor=UTIL.getMiniHBaseCluster().getMaster().getMasterProcedureExecutor();
  DummyProcedure p=new DummyProcedure();
  long procId=executor.submitProcedure(p);
  p.failureSet.await();
  assertEquals(GetProcedureResultResponse.State.RUNNING,getState(procId));
  p.canRollback.countDown();
  UTIL.waitFor(30000,new Waiter.ExplainingPredicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return getState(procId) == GetProcedureResultResponse.State.FINISHED;
    }
    @Override public String explainFailure() throws Exception {
      return "Procedure pid=" + procId + " is still in "+ getState(procId)+ " state, expected "+ GetProcedureResultResponse.State.FINISHED;
    }
  }
);
}
