@Test public void testBlockStoragePolicy() throws Exception {
  util=new HBaseTestingUtility();
  Configuration conf=util.getConfiguration();
  conf.set(HFileOutputFormat2.STORAGE_POLICY_PROPERTY,"ALL_SSD");
  conf.set(HFileOutputFormat2.STORAGE_POLICY_PROPERTY_CF_PREFIX + Bytes.toString(HFileOutputFormat2.combineTableNameSuffix(TABLE_NAMES[0].getName(),FAMILIES[0])),"ONE_SSD");
  Path cf1Dir=new Path(util.getDataTestDir(),Bytes.toString(FAMILIES[0]));
  Path cf2Dir=new Path(util.getDataTestDir(),Bytes.toString(FAMILIES[1]));
  util.startMiniDFSCluster(3);
  FileSystem fs=util.getDFSCluster().getFileSystem();
  try {
    fs.mkdirs(cf1Dir);
    fs.mkdirs(cf2Dir);
    String spA=getStoragePolicyName(fs,cf1Dir);
    String spB=getStoragePolicyName(fs,cf2Dir);
    LOG.debug("Storage policy of cf 0: [" + spA + "].");
    LOG.debug("Storage policy of cf 1: [" + spB + "].");
    assertEquals("HOT",spA);
    assertEquals("HOT",spB);
    HFileOutputFormat2.configureStoragePolicy(conf,fs,HFileOutputFormat2.combineTableNameSuffix(TABLE_NAMES[0].getName(),FAMILIES[0]),cf1Dir);
    HFileOutputFormat2.configureStoragePolicy(conf,fs,HFileOutputFormat2.combineTableNameSuffix(TABLE_NAMES[0].getName(),FAMILIES[1]),cf2Dir);
    spA=getStoragePolicyName(fs,cf1Dir);
    spB=getStoragePolicyName(fs,cf2Dir);
    LOG.debug("Storage policy of cf 0: [" + spA + "].");
    LOG.debug("Storage policy of cf 1: [" + spB + "].");
    assertNotNull(spA);
    assertEquals("ONE_SSD",spA);
    assertNotNull(spB);
    assertEquals("ALL_SSD",spB);
  }
  finally {
    fs.delete(cf1Dir,true);
    fs.delete(cf2Dir,true);
    util.shutdownMiniDFSCluster();
  }
}
