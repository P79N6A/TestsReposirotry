@Test public void testTaskCheckerHost() throws IOException {
  final int maxTotalConcurrentTasks=100;
  final int maxConcurrentTasksPerServer=2;
  final int maxConcurrentTasksPerRegion=1;
  final AtomicLong tasksInProgress=new AtomicLong(0);
  final Map<ServerName,AtomicInteger> taskCounterPerServer=new HashMap<>();
  final Map<byte[],AtomicInteger> taskCounterPerRegion=new HashMap<>();
  SimpleRequestController.TaskCountChecker countChecker=new SimpleRequestController.TaskCountChecker(maxTotalConcurrentTasks,maxConcurrentTasksPerServer,maxConcurrentTasksPerRegion,tasksInProgress,taskCounterPerServer,taskCounterPerRegion);
  final long maxHeapSizePerRequest=2 * 1024 * 1024;
  SimpleRequestController.RequestHeapSizeChecker sizeChecker=new SimpleRequestController.RequestHeapSizeChecker(maxHeapSizePerRequest);
  RequestController.Checker checker=SimpleRequestController.newChecker(Arrays.asList(countChecker,sizeChecker));
  ReturnCode loc1Code=checker.canTakeRow(LOC1,createPut(maxHeapSizePerRequest));
  assertEquals(ReturnCode.INCLUDE,loc1Code);
  ReturnCode loc1Code_2=checker.canTakeRow(LOC1,createPut(maxHeapSizePerRequest));
  assertNotEquals(ReturnCode.INCLUDE,loc1Code_2);
  ReturnCode loc2Code=checker.canTakeRow(LOC2,createPut(maxHeapSizePerRequest));
  assertNotEquals(ReturnCode.INCLUDE,loc2Code);
  taskCounterPerRegion.put(LOC3.getRegionInfo().getRegionName(),new AtomicInteger(100));
  taskCounterPerServer.put(LOC3.getServerName(),new AtomicInteger(100));
  ReturnCode loc3Code=checker.canTakeRow(LOC3,createPut(1L));
  assertNotEquals(ReturnCode.INCLUDE,loc3Code);
  taskCounterPerRegion.put(LOC3.getRegionInfo().getRegionName(),new AtomicInteger(0));
  taskCounterPerServer.put(LOC3.getServerName(),new AtomicInteger(0));
  ReturnCode loc3Code_2=checker.canTakeRow(LOC3,createPut(1L));
  assertEquals(ReturnCode.INCLUDE,loc3Code_2);
}
