@Test public void testRequestRowsChecker() throws IOException {
  final long maxRowCount=100;
  SimpleRequestController.RequestRowsChecker checker=new SimpleRequestController.RequestRowsChecker(maxRowCount);
  final long heapSizeOfRow=100;
  for (int i=0; i != 10; ++i) {
    ReturnCode code=checker.canTakeOperation(LOC1,heapSizeOfRow);
    assertEquals(ReturnCode.INCLUDE,code);
    code=checker.canTakeOperation(LOC2,heapSizeOfRow);
    assertEquals(ReturnCode.INCLUDE,code);
  }
  for (int i=0; i != maxRowCount; ++i) {
    ReturnCode acceptCode=checker.canTakeOperation(LOC1,heapSizeOfRow);
    assertEquals(ReturnCode.INCLUDE,acceptCode);
    checker.notifyFinal(acceptCode,LOC1,heapSizeOfRow);
  }
  for (int i=0; i != 10; ++i) {
    ReturnCode code=checker.canTakeOperation(LOC1,heapSizeOfRow);
    assertNotEquals(ReturnCode.INCLUDE,code);
    code=checker.canTakeOperation(LOC2,heapSizeOfRow);
    assertNotEquals(ReturnCode.INCLUDE,code);
  }
  for (int i=0; i != 10; ++i) {
    ReturnCode code=checker.canTakeOperation(LOC3,heapSizeOfRow);
    assertEquals(ReturnCode.INCLUDE,code);
  }
  checker.reset();
  for (int i=0; i != 10; ++i) {
    ReturnCode code=checker.canTakeOperation(LOC1,heapSizeOfRow);
    assertEquals(ReturnCode.INCLUDE,code);
    code=checker.canTakeOperation(LOC2,heapSizeOfRow);
    assertEquals(ReturnCode.INCLUDE,code);
  }
}
