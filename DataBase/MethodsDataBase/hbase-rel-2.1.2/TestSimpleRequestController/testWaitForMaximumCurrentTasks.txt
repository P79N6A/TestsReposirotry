@Test public void testWaitForMaximumCurrentTasks() throws Exception {
  final AtomicInteger max=new AtomicInteger(0);
  final CyclicBarrier barrier=new CyclicBarrier(2);
  SimpleRequestController controller=new SimpleRequestController(HBaseConfiguration.create());
  final AtomicLong tasks=controller.tasksInProgress;
  Runnable runnable=() -> {
    try {
      barrier.await();
      controller.waitForMaximumCurrentTasks(max.get(),123,1,null);
    }
 catch (    InterruptedIOException e) {
      Assert.fail(e.getMessage());
    }
catch (    InterruptedException|BrokenBarrierException e) {
      e.printStackTrace();
    }
  }
;
  Thread t=new Thread(runnable);
  t.start();
  barrier.await();
  t.join();
  barrier.reset();
  tasks.set(1000000);
  t=new Thread(runnable);
  t.start();
  barrier.await();
  while (tasks.get() > 0) {
    assertTrue(t.isAlive());
    tasks.set(tasks.get() - 1);
  }
  t.join();
}
