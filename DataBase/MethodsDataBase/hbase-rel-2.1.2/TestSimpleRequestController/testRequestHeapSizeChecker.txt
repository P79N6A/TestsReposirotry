@Test public void testRequestHeapSizeChecker() throws IOException {
  final long maxHeapSizePerRequest=2 * 1024 * 1024;
  SimpleRequestController.RequestHeapSizeChecker checker=new SimpleRequestController.RequestHeapSizeChecker(maxHeapSizePerRequest);
  for (int i=0; i != 10; ++i) {
    ReturnCode code=checker.canTakeOperation(LOC1,maxHeapSizePerRequest);
    assertEquals(ReturnCode.INCLUDE,code);
    code=checker.canTakeOperation(LOC2,maxHeapSizePerRequest);
    assertEquals(ReturnCode.INCLUDE,code);
  }
  ReturnCode acceptCode=checker.canTakeOperation(LOC1,maxHeapSizePerRequest);
  assertEquals(ReturnCode.INCLUDE,acceptCode);
  checker.notifyFinal(acceptCode,LOC1,maxHeapSizePerRequest);
  for (int i=0; i != 10; ++i) {
    ReturnCode code=checker.canTakeOperation(LOC1,maxHeapSizePerRequest);
    assertNotEquals(ReturnCode.INCLUDE,code);
    code=checker.canTakeOperation(LOC2,maxHeapSizePerRequest);
    assertNotEquals(ReturnCode.INCLUDE,code);
  }
  for (int i=0; i != 10; ++i) {
    ReturnCode code=checker.canTakeOperation(LOC3,maxHeapSizePerRequest);
    assertEquals(ReturnCode.INCLUDE,code);
  }
  checker.reset();
  for (int i=0; i != 10; ++i) {
    ReturnCode code=checker.canTakeOperation(LOC1,maxHeapSizePerRequest);
    assertEquals(ReturnCode.INCLUDE,code);
    code=checker.canTakeOperation(LOC2,maxHeapSizePerRequest);
    assertEquals(ReturnCode.INCLUDE,code);
  }
}
