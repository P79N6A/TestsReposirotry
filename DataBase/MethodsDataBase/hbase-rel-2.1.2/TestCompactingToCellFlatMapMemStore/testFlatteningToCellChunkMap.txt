@Test public void testFlatteningToCellChunkMap() throws IOException {
  if (!toCellChunkMap) {
    return;
  }
  MemoryCompactionPolicy compactionType=MemoryCompactionPolicy.BASIC;
  memstore.getConfiguration().set(CompactingMemStore.COMPACTING_MEMSTORE_TYPE_KEY,String.valueOf(compactionType));
  ((MyCompactingMemStore)memstore).initiateType(compactionType,memstore.getConfiguration());
  ((CompactingMemStore)memstore).setIndexType(CompactingMemStore.IndexType.CHUNK_MAP);
  int numOfCells=8;
  String[] keys1={"A","A","B","C","D","D","E","F"};
  byte[] row=Bytes.toBytes(keys1[0]);
  byte[] val=Bytes.toBytes(keys1[0] + 0);
  KeyValue kv=new KeyValue(row,Bytes.toBytes("testfamily"),Bytes.toBytes("testqualifier"),System.currentTimeMillis(),val);
  int totalCellsLen=addRowsByKeys(memstore,keys1);
  long oneCellOnCSLMHeapSize=ClassSize.align(ClassSize.CONCURRENT_SKIPLISTMAP_ENTRY + KeyValue.FIXED_OVERHEAD + KeyValueUtil.length(kv));
  long totalHeapSize=numOfCells * oneCellOnCSLMHeapSize + MutableSegment.DEEP_OVERHEAD;
  assertEquals(totalCellsLen,regionServicesForStores.getMemStoreSize());
  assertEquals(totalHeapSize,((CompactingMemStore)memstore).heapSize());
  ((CompactingMemStore)memstore).flushInMemory();
  assertEquals(0,memstore.getSnapshot().getCellsCount());
  long oneCellOnCCMHeapSize=ClassSize.CELL_CHUNK_MAP_ENTRY + ClassSize.align(KeyValueUtil.length(kv));
  totalHeapSize=MutableSegment.DEEP_OVERHEAD + CellChunkImmutableSegment.DEEP_OVERHEAD_CCM + numOfCells * oneCellOnCCMHeapSize;
  assertEquals(totalCellsLen,regionServicesForStores.getMemStoreSize());
  assertEquals(totalHeapSize,((CompactingMemStore)memstore).heapSize());
  MemStoreSize mss=memstore.getFlushableSize();
  MemStoreSnapshot snapshot=memstore.snapshot();
  region.decrMemStoreSize(mss);
  ImmutableSegment s=memstore.getSnapshot();
  assertEquals(numOfCells,s.getCellsCount());
  assertEquals(0,regionServicesForStores.getMemStoreSize());
  memstore.clearSnapshot(snapshot.getId());
}
