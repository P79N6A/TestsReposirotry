/** 
 * Verifies that the .regioninfo file is written on region creation and that is recreated if missing during region opening.
 */
@Test public void testRegionInfoFileCreation() throws IOException {
  Path rootDir=new Path(dir + "testRegionInfoFileCreation");
  HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
  htd.addFamily(new HColumnDescriptor("cf"));
  HRegionInfo hri=new HRegionInfo(htd.getTableName());
  HRegion region=HBaseTestingUtility.createRegionAndWAL(hri,rootDir,CONF,htd,false);
  Path regionDir=region.getRegionFileSystem().getRegionDir();
  FileSystem fs=region.getRegionFileSystem().getFileSystem();
  HBaseTestingUtility.closeRegionAndWAL(region);
  Path regionInfoFile=new Path(regionDir,HRegionFileSystem.REGION_INFO_FILE);
  assertTrue(HRegionFileSystem.REGION_INFO_FILE + " should be present in the region dir",fs.exists(regionInfoFile));
  region=HRegion.openHRegion(rootDir,hri,htd,null,CONF);
  assertEquals(regionDir,region.getRegionFileSystem().getRegionDir());
  HBaseTestingUtility.closeRegionAndWAL(region);
  assertTrue(HRegionFileSystem.REGION_INFO_FILE + " should be present in the region dir",fs.exists(regionInfoFile));
  fs.delete(regionInfoFile,true);
  assertFalse(HRegionFileSystem.REGION_INFO_FILE + " should be removed from the region dir",fs.exists(regionInfoFile));
  region=HRegion.openHRegion(rootDir,hri,htd,null,CONF);
  assertEquals(regionDir,region.getRegionFileSystem().getRegionDir());
  HBaseTestingUtility.closeRegionAndWAL(region);
  assertTrue(HRegionFileSystem.REGION_INFO_FILE + " should be present in the region dir",fs.exists(new Path(regionDir,HRegionFileSystem.REGION_INFO_FILE)));
}
