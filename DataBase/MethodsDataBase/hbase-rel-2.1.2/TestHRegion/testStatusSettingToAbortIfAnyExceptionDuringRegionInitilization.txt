/** 
 * Testcase to check state of region initialization task set to ABORTED or not if any exceptions during initialization
 * @throws Exception
 */
@Test public void testStatusSettingToAbortIfAnyExceptionDuringRegionInitilization() throws Exception {
  HRegionInfo info;
  try {
    FileSystem fs=Mockito.mock(FileSystem.class);
    Mockito.when(fs.exists((Path)Mockito.anyObject())).thenThrow(new IOException());
    HTableDescriptor htd=new HTableDescriptor(tableName);
    htd.addFamily(new HColumnDescriptor("cf"));
    info=new HRegionInfo(htd.getTableName(),HConstants.EMPTY_BYTE_ARRAY,HConstants.EMPTY_BYTE_ARRAY,false);
    Path path=new Path(dir + "testStatusSettingToAbortIfAnyExceptionDuringRegionInitilization");
    region=HRegion.newHRegion(path,null,fs,CONF,info,htd,null);
    region.initialize();
    fail("Region initialization should fail due to IOException");
  }
 catch (  IOException io) {
    List<MonitoredTask> tasks=TaskMonitor.get().getTasks();
    for (    MonitoredTask monitoredTask : tasks) {
      if (!(monitoredTask instanceof MonitoredRPCHandler) && monitoredTask.getDescription().contains(region.toString())) {
        assertTrue("Region state should be ABORTED.",monitoredTask.getState().equals(MonitoredTask.State.ABORTED));
        break;
      }
    }
  }
 finally {
    HBaseTestingUtility.closeRegionAndWAL(region);
  }
}
