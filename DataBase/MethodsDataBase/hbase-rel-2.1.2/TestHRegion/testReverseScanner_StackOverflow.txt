/** 
 * Test for HBASE-14497: Reverse Scan threw StackOverflow caused by readPt checking
 */
@Test public void testReverseScanner_StackOverflow() throws IOException {
  byte[] cf1=Bytes.toBytes("CF1");
  byte[][] families={cf1};
  byte[] col=Bytes.toBytes("C");
  HBaseConfiguration conf=new HBaseConfiguration();
  this.region=initHRegion(tableName,method,conf,families);
  try {
    Put put=new Put(Bytes.toBytes("19998"));
    put.addColumn(cf1,col,Bytes.toBytes("val"));
    region.put(put);
    region.flushcache(true,true,FlushLifeCycleTracker.DUMMY);
    Put put2=new Put(Bytes.toBytes("19997"));
    put2.addColumn(cf1,col,Bytes.toBytes("val"));
    region.put(put2);
    Scan scan=new Scan(Bytes.toBytes("19998"));
    scan.setReversed(true);
    InternalScanner scanner=region.getScanner(scan);
    for (int i=10000; i < 20000; i++) {
      Put p=new Put(Bytes.toBytes("" + i));
      p.addColumn(cf1,col,Bytes.toBytes("" + i));
      region.put(p);
    }
    region.flushcache(true,true,FlushLifeCycleTracker.DUMMY);
    for (int i=10000; i < 20000; i++) {
      Put p=new Put(Bytes.toBytes("" + i));
      p.addColumn(cf1,col,Bytes.toBytes("" + i));
      region.put(p);
    }
    List<Cell> currRow=new ArrayList<>();
    boolean hasNext;
    do {
      hasNext=scanner.next(currRow);
    }
 while (hasNext);
    assertEquals(2,currRow.size());
    assertEquals("19998",Bytes.toString(currRow.get(0).getRowArray(),currRow.get(0).getRowOffset(),currRow.get(0).getRowLength()));
    assertEquals("19997",Bytes.toString(currRow.get(1).getRowArray(),currRow.get(1).getRowOffset(),currRow.get(1).getRowLength()));
  }
  finally {
    HBaseTestingUtility.closeRegionAndWAL(this.region);
    this.region=null;
  }
}
