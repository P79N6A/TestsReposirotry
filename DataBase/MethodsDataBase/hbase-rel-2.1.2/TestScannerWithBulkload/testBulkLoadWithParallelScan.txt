@Test public void testBulkLoadWithParallelScan() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  final long l=System.currentTimeMillis();
  final Admin admin=TEST_UTIL.getAdmin();
  createTable(admin,tableName);
  Scan scan=createScan();
  scan.setCaching(1);
  final Table table=init(admin,l,scan,tableName);
  final Path hfilePath=writeToHFile(l,"/temp/testBulkLoadWithParallelScan/","/temp/testBulkLoadWithParallelScan/col/file",false);
  Configuration conf=TEST_UTIL.getConfiguration();
  conf.setBoolean("hbase.mapreduce.bulkload.assign.sequenceNumbers",true);
  final LoadIncrementalHFiles bulkload=new LoadIncrementalHFiles(conf);
  ResultScanner scanner=table.getScanner(scan);
  Result result=scanner.next();
  final CountDownLatch latch=new CountDownLatch(1);
  new Thread(){
    @Override public void run(){
      try {
        Put put1=new Put(Bytes.toBytes("row5"));
        put1.add(new KeyValue(Bytes.toBytes("row5"),Bytes.toBytes("col"),Bytes.toBytes("q"),l,Bytes.toBytes("version0")));
        table.put(put1);
        try (RegionLocator locator=TEST_UTIL.getConnection().getRegionLocator(tableName)){
          bulkload.doBulkLoad(hfilePath,admin,table,locator);
        }
         latch.countDown();
      }
 catch (      TableNotFoundException e) {
      }
catch (      IOException e) {
      }
    }
  }
.start();
  latch.await();
  scanAfterBulkLoad(scanner,result,"version1");
  scanner.close();
  table.close();
}
