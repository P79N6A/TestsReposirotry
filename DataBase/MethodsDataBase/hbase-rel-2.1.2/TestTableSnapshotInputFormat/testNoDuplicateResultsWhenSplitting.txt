@Test public void testNoDuplicateResultsWhenSplitting() throws Exception {
  setupCluster();
  TableName tableName=TableName.valueOf("testNoDuplicateResultsWhenSplitting");
  String snapshotName="testSnapshotBug";
  try {
    if (UTIL.getAdmin().tableExists(tableName)) {
      UTIL.deleteTable(tableName);
    }
    UTIL.createTable(tableName,FAMILIES);
    Admin admin=UTIL.getAdmin();
    Table table=UTIL.getConnection().getTable(tableName);
    UTIL.loadTable(table,FAMILIES);
    admin.split(tableName,Bytes.toBytes("eee"));
    TestTableSnapshotScanner.blockUntilSplitFinished(UTIL,tableName,2);
    Path rootDir=FSUtils.getRootDir(UTIL.getConfiguration());
    FileSystem fs=rootDir.getFileSystem(UTIL.getConfiguration());
    SnapshotTestingUtils.createSnapshotAndValidate(admin,tableName,Arrays.asList(FAMILIES),null,snapshotName,rootDir,fs,true);
    byte[] value=Bytes.toBytes("after_snapshot_value");
    UTIL.loadTable(table,FAMILIES,value);
    admin.flush(tableName);
    table.close();
    Job job=new Job(UTIL.getConfiguration());
    Path tmpTableDir=UTIL.getDataTestDirOnTestFS(snapshotName);
    Scan scan=new Scan().withStartRow(getStartRow()).withStopRow(getEndRow());
    TableMapReduceUtil.initTableSnapshotMapperJob(snapshotName,scan,TestTableSnapshotMapper.class,ImmutableBytesWritable.class,NullWritable.class,job,false,tmpTableDir);
    verifyWithMockedMapReduce(job,2,2,getStartRow(),getEndRow());
  }
  finally {
    UTIL.getAdmin().deleteSnapshot(snapshotName);
    UTIL.deleteTable(tableName);
    tearDownCluster();
  }
}
