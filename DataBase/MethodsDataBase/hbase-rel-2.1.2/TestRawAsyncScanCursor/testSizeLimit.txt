@Test public void testSizeLimit() throws InterruptedException, ExecutionException {
  CompletableFuture<Void> future=new CompletableFuture<>();
  AsyncTable<AdvancedScanResultConsumer> table=CONN.getTable(TABLE_NAME);
  table.scan(createScanWithSizeLimit(),new AdvancedScanResultConsumer(){
    private int count;
    @Override public void onHeartbeat(    ScanController controller){
      try {
        assertArrayEquals(ROWS[count / NUM_FAMILIES / NUM_QUALIFIERS],controller.cursor().get().getRow());
        count++;
      }
 catch (      Throwable e) {
        future.completeExceptionally(e);
        throw e;
      }
    }
    @Override public void onNext(    Result[] results,    ScanController controller){
      try {
        assertFalse(controller.cursor().isPresent());
        assertEquals(1,results.length);
        assertArrayEquals(ROWS[count / NUM_FAMILIES / NUM_QUALIFIERS],results[0].getRow());
        count++;
      }
 catch (      Throwable e) {
        future.completeExceptionally(e);
        throw e;
      }
    }
    @Override public void onError(    Throwable error){
      future.completeExceptionally(error);
    }
    @Override public void onComplete(){
      future.complete(null);
    }
  }
);
  future.get();
}
