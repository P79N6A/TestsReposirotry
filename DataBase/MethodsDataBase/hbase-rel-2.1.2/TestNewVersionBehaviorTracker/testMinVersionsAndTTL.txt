@Test public void testMinVersionsAndTTL() throws IOException {
  NewVersionBehaviorTracker tracker=new NewVersionBehaviorTracker(null,comparator,1,3,3,30000);
  KeyValue keyValue=new KeyValue(row,family,col1,20000,KeyValue.Type.Put,value);
  keyValue.setTimestamp(20000);
  keyValue.setSequenceId(1000);
  assertEquals(DeleteResult.NOT_DELETED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.INCLUDE_AND_SEEK_NEXT_COL,tracker.checkVersions(keyValue,keyValue.getTimestamp(),keyValue.getTypeByte(),false));
  keyValue.setTimestamp(19999);
  keyValue.setSequenceId(999);
  assertEquals(DeleteResult.NOT_DELETED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.SEEK_NEXT_COL,tracker.checkVersions(keyValue,keyValue.getTimestamp(),keyValue.getTypeByte(),false));
  keyValue.setTimestamp(19999);
  keyValue.setSequenceId(998);
  assertEquals(DeleteResult.VERSION_MASKED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.SEEK_NEXT_COL,tracker.checkVersions(keyValue,keyValue.getTimestamp(),keyValue.getTypeByte(),false));
  keyValue.setTimestamp(19998);
  keyValue.setSequenceId(997);
  assertEquals(DeleteResult.NOT_DELETED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.SEEK_NEXT_COL,tracker.checkVersions(keyValue,keyValue.getTimestamp(),keyValue.getTypeByte(),false));
  keyValue.setTimestamp(19997);
  keyValue.setSequenceId(996);
  assertEquals(DeleteResult.VERSION_MASKED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.SEEK_NEXT_COL,tracker.checkVersions(keyValue,keyValue.getTimestamp(),keyValue.getTypeByte(),false));
  keyValue=new KeyValue(row,family,col2,20000,KeyValue.Type.Put,value);
  keyValue.setTimestamp(20000);
  keyValue.setSequenceId(1000);
  assertEquals(DeleteResult.NOT_DELETED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.INCLUDE_AND_SEEK_NEXT_COL,tracker.checkVersions(keyValue,keyValue.getTimestamp(),keyValue.getTypeByte(),false));
  keyValue.setTimestamp(19999);
  keyValue.setSequenceId(1002);
  assertEquals(DeleteResult.NOT_DELETED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.SEEK_NEXT_COL,tracker.checkVersions(keyValue,keyValue.getTimestamp(),keyValue.getTypeByte(),false));
  keyValue.setTimestamp(19999);
  keyValue.setSequenceId(1001);
  assertEquals(DeleteResult.VERSION_MASKED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.SEEK_NEXT_COL,tracker.checkVersions(keyValue,keyValue.getTimestamp(),keyValue.getTypeByte(),false));
  keyValue.setTimestamp(19998);
  keyValue.setSequenceId(1003);
  assertEquals(DeleteResult.NOT_DELETED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.SEEK_NEXT_COL,tracker.checkVersions(keyValue,keyValue.getTimestamp(),keyValue.getTypeByte(),false));
  keyValue.setTimestamp(19997);
  keyValue.setSequenceId(1004);
  assertEquals(DeleteResult.VERSION_MASKED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.SEEK_NEXT_COL,tracker.checkVersions(keyValue,keyValue.getTimestamp(),keyValue.getTypeByte(),false));
}
