@Test public void testColumns() throws IOException {
  TreeSet<byte[]> trackedColumns=new TreeSet<byte[]>(Bytes.BYTES_COMPARATOR);
  trackedColumns.add(col1);
  trackedColumns.add(col3);
  NewVersionBehaviorTracker tracker=new NewVersionBehaviorTracker(trackedColumns,comparator,1,3,3,10000);
  KeyValue keyValue=new KeyValue(row,family,col0,20000,KeyValue.Type.Put,value);
  assertEquals(DeleteResult.NOT_DELETED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.SEEK_NEXT_COL,tracker.checkColumn(keyValue,keyValue.getTypeByte()));
  keyValue=new KeyValue(row,family,col1,20000,KeyValue.Type.Put,value);
  assertEquals(DeleteResult.NOT_DELETED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.INCLUDE,tracker.checkColumn(keyValue,keyValue.getTypeByte()));
  keyValue=new KeyValue(row,family,col2,20000,KeyValue.Type.Put,value);
  assertEquals(DeleteResult.NOT_DELETED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.SEEK_NEXT_COL,tracker.checkColumn(keyValue,keyValue.getTypeByte()));
  keyValue=new KeyValue(row,family,col3,20000,KeyValue.Type.Put,value);
  assertEquals(DeleteResult.NOT_DELETED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.INCLUDE,tracker.checkColumn(keyValue,keyValue.getTypeByte()));
  keyValue=new KeyValue(row,family,col4,20000,KeyValue.Type.Put,value);
  assertEquals(DeleteResult.NOT_DELETED,tracker.isDeleted(keyValue));
  assertEquals(MatchCode.SEEK_NEXT_ROW,tracker.checkColumn(keyValue,keyValue.getTypeByte()));
}
