/** 
 * Tests that recovered queues are preserved on a regionserver shutdown. See HBASE-18192
 */
@Test public void testServerShutdownRecoveredQueue() throws Exception {
  try {
    conf.set("hbase.wal.provider","defaultProvider");
    conf.setInt("replication.sleep.before.failover",2000);
    conf.set(HConstants.REGION_SERVER_IMPL,ShutdownDelayRegionServer.class.getName());
    MiniHBaseCluster cluster=TEST_UTIL.startMiniCluster(2);
    TEST_UTIL_PEER.startMiniCluster(1);
    HRegionServer serverA=cluster.getRegionServer(0);
    final ReplicationSourceManager managerA=((Replication)serverA.getReplicationSourceService()).getReplicationManager();
    HRegionServer serverB=cluster.getRegionServer(1);
    final ReplicationSourceManager managerB=((Replication)serverB.getReplicationSourceService()).getReplicationManager();
    final Admin admin=TEST_UTIL.getAdmin();
    final String peerId="TestPeer";
    admin.addReplicationPeer(peerId,ReplicationPeerConfig.newBuilder().setClusterKey(TEST_UTIL_PEER.getClusterKey()).build());
    Waiter.waitFor(conf,20000,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return !(managerA.getSources().isEmpty() || managerB.getSources().isEmpty());
      }
    }
);
    admin.disableReplicationPeer(peerId);
    cluster.stopRegionServer(serverA.getServerName());
    Waiter.waitFor(conf,20000,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return managerB.getOldSources().size() == 1;
      }
    }
);
    final HRegionServer serverC=cluster.startRegionServer().getRegionServer();
    serverC.waitForServerOnline();
    Waiter.waitFor(conf,20000,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return serverC.getReplicationSourceService() != null;
      }
    }
);
    final ReplicationSourceManager managerC=((Replication)serverC.getReplicationSourceService()).getReplicationManager();
    assertEquals(0,managerC.getOldSources().size());
    cluster.stopRegionServer(serverB.getServerName());
    Waiter.waitFor(conf,20000,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return managerC.getOldSources().size() == 2;
      }
    }
);
    admin.enableReplicationPeer(peerId);
    Waiter.waitFor(conf,20000,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return managerC.getOldSources().size() == 0;
      }
    }
);
  }
  finally {
    conf.set(HConstants.REGION_SERVER_IMPL,HRegionServer.class.getName());
  }
}
