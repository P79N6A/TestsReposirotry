/** 
 * Tests that  {@link ReplicationSource#terminate(String)} will timeout properly
 */
@Test public void testTerminateTimeout() throws Exception {
  ReplicationSource source=new ReplicationSource();
  ReplicationEndpoint replicationEndpoint=new HBaseInterClusterReplicationEndpoint(){
    @Override protected void doStart(){
      notifyStarted();
    }
    @Override protected void doStop(){
    }
  }
;
  replicationEndpoint.start();
  ReplicationPeer mockPeer=Mockito.mock(ReplicationPeer.class);
  Mockito.when(mockPeer.getPeerBandwidth()).thenReturn(0L);
  Configuration testConf=HBaseConfiguration.create();
  testConf.setInt("replication.source.maxretriesmultiplier",1);
  ReplicationSourceManager manager=Mockito.mock(ReplicationSourceManager.class);
  Mockito.when(manager.getTotalBufferUsed()).thenReturn(new AtomicLong());
  source.init(testConf,null,manager,null,mockPeer,null,"testPeer",null,p -> OptionalLong.empty(),null);
  ExecutorService executor=Executors.newSingleThreadExecutor();
  Future<?> future=executor.submit(new Runnable(){
    @Override public void run(){
      source.terminate("testing source termination");
    }
  }
);
  long sleepForRetries=testConf.getLong("replication.source.sleepforretries",1000);
  Waiter.waitFor(testConf,sleepForRetries * 2,new Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return future.isDone();
    }
  }
);
}
