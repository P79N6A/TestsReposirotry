@Test public void testSplitShouldNotThrowNPEEvenARegionHasEmptySplitFiles() throws Exception {
  TableName userTableName=TableName.valueOf(name.getMethodName());
  HTableDescriptor htd=new HTableDescriptor(userTableName);
  HColumnDescriptor hcd=new HColumnDescriptor("col");
  htd.addFamily(hcd);
  admin.createTable(htd);
  Table table=TESTING_UTIL.getConnection().getTable(userTableName);
  try {
    for (int i=0; i <= 5; i++) {
      String row="row" + i;
      Put p=new Put(row.getBytes());
      String val="Val" + i;
      p.addColumn("col".getBytes(),"ql".getBytes(),val.getBytes());
      table.put(p);
      admin.flush(userTableName);
      Delete d=new Delete(row.getBytes());
      table.delete(d);
      admin.flush(userTableName);
    }
    admin.majorCompact(userTableName);
    List<RegionInfo> regionsOfTable=cluster.getMaster().getAssignmentManager().getRegionStates().getRegionsOfTable(userTableName);
    assertEquals(1,regionsOfTable.size());
    RegionInfo hRegionInfo=regionsOfTable.get(0);
    Put p=new Put("row6".getBytes());
    p.addColumn("col".getBytes(),"ql".getBytes(),"val".getBytes());
    table.put(p);
    p=new Put("row7".getBytes());
    p.addColumn("col".getBytes(),"ql".getBytes(),"val".getBytes());
    table.put(p);
    p=new Put("row8".getBytes());
    p.addColumn("col".getBytes(),"ql".getBytes(),"val".getBytes());
    table.put(p);
    admin.flush(userTableName);
    admin.splitRegion(hRegionInfo.getRegionName(),"row7".getBytes());
    regionsOfTable=cluster.getMaster().getAssignmentManager().getRegionStates().getRegionsOfTable(userTableName);
    while (regionsOfTable.size() != 2) {
      Thread.sleep(1000);
      regionsOfTable=cluster.getMaster().getAssignmentManager().getRegionStates().getRegionsOfTable(userTableName);
      LOG.debug("waiting 2 regions to be available, got " + regionsOfTable.size() + ": "+ regionsOfTable);
    }
    Assert.assertEquals(2,regionsOfTable.size());
    Scan s=new Scan();
    ResultScanner scanner=table.getScanner(s);
    int mainTableCount=0;
    for (Result rr=scanner.next(); rr != null; rr=scanner.next()) {
      mainTableCount++;
    }
    Assert.assertEquals(3,mainTableCount);
  }
  finally {
    table.close();
  }
}
