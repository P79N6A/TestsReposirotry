@Test public void testAllQuotasAddedToList(){
  final SpaceQuota spaceQuota=SpaceQuota.newBuilder().setSoftLimit(1024L * 1024L * 1024L* 50L).setViolationPolicy(QuotaProtos.SpaceViolationPolicy.DISABLE).build();
  final long readLimit=1000;
  final long writeLimit=500;
  final Throttle throttle=Throttle.newBuilder().setReadNum(TimedQuota.newBuilder().setSoftLimit(readLimit).setTimeUnit(HBaseProtos.TimeUnit.MINUTES).build()).setWriteNum(TimedQuota.newBuilder().setSoftLimit(writeLimit).setTimeUnit(HBaseProtos.TimeUnit.MINUTES).build()).build();
  final Quotas quotas=Quotas.newBuilder().setSpace(spaceQuota).setThrottle(throttle).build();
  final TableName tn=TableName.valueOf("my_table");
  List<QuotaSettings> settings=QuotaSettingsFactory.fromTableQuotas(tn,quotas);
  assertEquals(3,settings.size());
  boolean seenRead=false;
  boolean seenWrite=false;
  boolean seenSpace=false;
  for (  QuotaSettings setting : settings) {
    if (setting instanceof ThrottleSettings) {
      ThrottleSettings throttleSettings=(ThrottleSettings)setting;
switch (throttleSettings.getThrottleType()) {
case READ_NUMBER:
        assertFalse("Should not have multiple read quotas",seenRead);
      assertEquals(readLimit,throttleSettings.getSoftLimit());
    assertEquals(TimeUnit.MINUTES,throttleSettings.getTimeUnit());
  assertEquals(tn,throttleSettings.getTableName());
assertNull("Username should be null",throttleSettings.getUserName());
assertNull("Namespace should be null",throttleSettings.getNamespace());
seenRead=true;
break;
case WRITE_NUMBER:
assertFalse("Should not have multiple write quotas",seenWrite);
assertEquals(writeLimit,throttleSettings.getSoftLimit());
assertEquals(TimeUnit.MINUTES,throttleSettings.getTimeUnit());
assertEquals(tn,throttleSettings.getTableName());
assertNull("Username should be null",throttleSettings.getUserName());
assertNull("Namespace should be null",throttleSettings.getNamespace());
seenWrite=true;
break;
default :
fail("Unexpected throttle type: " + throttleSettings.getThrottleType());
}
}
 else if (setting instanceof SpaceLimitSettings) {
assertFalse("Should not have multiple space quotas",seenSpace);
SpaceLimitSettings spaceLimit=(SpaceLimitSettings)setting;
assertEquals(tn,spaceLimit.getTableName());
assertNull("Username should be null",spaceLimit.getUserName());
assertNull("Namespace should be null",spaceLimit.getNamespace());
assertTrue("SpaceLimitSettings should have a SpaceQuota",spaceLimit.getProto().hasQuota());
assertEquals(spaceQuota,spaceLimit.getProto().getQuota());
seenSpace=true;
}
 else {
fail("Unexpected QuotaSettings implementation: " + setting.getClass());
}
}
assertTrue("Should have seen a read quota",seenRead);
assertTrue("Should have seen a write quota",seenWrite);
assertTrue("Should have seen a space quota",seenSpace);
}
