@Test public void testJoinedScanners() throws Exception {
  byte[][] families={cf_essential,cf_joined};
  final TableName tableName=TableName.valueOf(name.getMethodName());
  HTableDescriptor desc=new HTableDescriptor(tableName);
  for (  byte[] family : families) {
    HColumnDescriptor hcd=new HColumnDescriptor(family);
    hcd.setDataBlockEncoding(blockEncoding);
    desc.addFamily(hcd);
  }
  TEST_UTIL.getAdmin().createTable(desc);
  Table ht=TEST_UTIL.getConnection().getTable(tableName);
  long rows_to_insert=1000;
  int insert_batch=20;
  long time=System.nanoTime();
  Random rand=new Random(time);
  LOG.info("Make " + Long.toString(rows_to_insert) + " rows, total size = "+ Float.toString(rows_to_insert * valueWidth / 1024 / 1024)+ " MB");
  byte[] val_large=new byte[valueWidth];
  List<Put> puts=new ArrayList<>();
  for (long i=0; i < rows_to_insert; i++) {
    Put put=new Put(Bytes.toBytes(Long.toString(i)));
    if (rand.nextInt(100) <= selectionRatio) {
      put.addColumn(cf_essential,col_name,flag_yes);
    }
 else {
      put.addColumn(cf_essential,col_name,flag_no);
    }
    put.addColumn(cf_joined,col_name,val_large);
    puts.add(put);
    if (puts.size() >= insert_batch) {
      ht.put(puts);
      puts.clear();
    }
  }
  if (!puts.isEmpty()) {
    ht.put(puts);
    puts.clear();
  }
  LOG.info("Data generated in " + Double.toString((System.nanoTime() - time) / 1000000000.0) + " seconds");
  boolean slow=true;
  for (int i=0; i < 10; ++i) {
    runScanner(ht,slow);
    slow=!slow;
  }
  ht.close();
}
