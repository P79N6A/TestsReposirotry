@Test public void testHFileReplication() throws Exception {
  final TableName tableName=TableName.valueOf(this.name.getMethodName());
  String fn1="rep1";
  HColumnDescriptor hcd1=new HColumnDescriptor(fn1);
  hcd1.setDFSReplication((short)1);
  String fn="defaultRep";
  HColumnDescriptor hcd=new HColumnDescriptor(fn);
  HTableDescriptor htd=new HTableDescriptor(tableName);
  htd.addFamily(hcd);
  htd.addFamily(hcd1);
  Table table=TEST_UTIL.createTable(htd,null);
  TEST_UTIL.waitTableAvailable(tableName);
  Put p=new Put(Bytes.toBytes("defaultRep_rk"));
  byte[] q1=Bytes.toBytes("q1");
  byte[] v1=Bytes.toBytes("v1");
  p.addColumn(Bytes.toBytes(fn),q1,v1);
  List<Put> puts=new ArrayList<>(2);
  puts.add(p);
  p=new Put(Bytes.toBytes("rep1_rk"));
  p.addColumn(Bytes.toBytes(fn1),q1,v1);
  puts.add(p);
  try {
    table.put(puts);
    admin.flush(tableName);
    List<HRegion> regions=TEST_UTIL.getMiniHBaseCluster().getRegions(tableName);
    for (    HRegion r : regions) {
      HStore store=r.getStore(Bytes.toBytes(fn));
      for (      HStoreFile sf : store.getStorefiles()) {
        assertTrue(sf.toString().contains(fn));
        assertTrue("Column family " + fn + " should have 3 copies",FSUtils.getDefaultReplication(TEST_UTIL.getTestFileSystem(),sf.getPath()) == (sf.getFileInfo().getFileStatus().getReplication()));
      }
      store=r.getStore(Bytes.toBytes(fn1));
      for (      HStoreFile sf : store.getStorefiles()) {
        assertTrue(sf.toString().contains(fn1));
        assertTrue("Column family " + fn1 + " should have only 1 copy",1 == sf.getFileInfo().getFileStatus().getReplication());
      }
    }
  }
  finally {
    if (admin.isTableEnabled(tableName)) {
      this.admin.disableTable(tableName);
      this.admin.deleteTable(tableName);
    }
  }
}
