@Test public void testSharedData() throws IOException {
  TableName tableName=TableName.valueOf(name.getMethodName());
  byte[][] families={fam1,fam2,fam3};
  Configuration hc=initConfig();
  HRegion region=initHRegion(tableName,name.getMethodName(),hc,new Class<?>[]{},families);
  for (int i=0; i < 3; i++) {
    HBaseTestCase.addContent(region,fam3);
    region.flush(true);
  }
  region.compact(false);
  region=reopenRegion(region,CoprocessorImpl.class,CoprocessorII.class);
  Coprocessor c=region.getCoprocessorHost().findCoprocessor(CoprocessorImpl.class);
  Coprocessor c2=region.getCoprocessorHost().findCoprocessor(CoprocessorII.class);
  Object o=((CoprocessorImpl)c).getSharedData().get("test1");
  Object o2=((CoprocessorII)c2).getSharedData().get("test2");
  assertNotNull(o);
  assertNotNull(o2);
  assertFalse(((CoprocessorImpl)c).getSharedData() == ((CoprocessorII)c2).getSharedData());
  c=region.getCoprocessorHost().findCoprocessor(CoprocessorImpl.class);
  c2=region.getCoprocessorHost().findCoprocessor(CoprocessorII.class);
  assertTrue(((CoprocessorImpl)c).getSharedData().get("test1") == o);
  assertTrue(((CoprocessorII)c2).getSharedData().get("test2") == o2);
  try {
    byte[] r=region.getRegionInfo().getStartKey();
    if (r == null || r.length <= 0) {
      r=new byte[]{0};
    }
    Get g=new Get(r);
    region.get(g);
    fail();
  }
 catch (  org.apache.hadoop.hbase.DoNotRetryIOException xc) {
  }
  assertNull(region.getCoprocessorHost().findCoprocessor(CoprocessorII.class));
  c=region.getCoprocessorHost().findCoprocessor(CoprocessorImpl.class);
  assertTrue(((CoprocessorImpl)c).getSharedData().get("test1") == o);
  c=c2=null;
  System.gc();
  region=reopenRegion(region,CoprocessorImpl.class,CoprocessorII.class);
  c=region.getCoprocessorHost().findCoprocessor(CoprocessorImpl.class);
  assertTrue(((CoprocessorImpl)c).getSharedData().get("test1") == o);
  c2=region.getCoprocessorHost().findCoprocessor(CoprocessorII.class);
  Object o3=((CoprocessorII)c2).getSharedData().get("test2");
  assertFalse(o3 == o2);
  HBaseTestingUtility.closeRegionAndWAL(region);
}
