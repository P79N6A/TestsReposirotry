@Test public void testColumnValueFilter() throws Exception {
  for (int i=0; i < 2; i++) {
    for (int j=0; j < ROWS_ONE.length; j++) {
      Put p1=new Put(ROWS_ONE[j]).setDurability(Durability.SKIP_WAL);
      Put p2=new Put(ROWS_TWO[j]).setDurability(Durability.SKIP_WAL);
      for (      byte[] q5 : QUALIFIERS_FIVE) {
        p1.addColumn(FAMILIES[0],q5,VALUES[0 + i]).addColumn(FAMILIES[1],q5,VALUES[0 + i]);
        p2.addColumn(FAMILIES[0],q5,VALUES[1 - i]).addColumn(FAMILIES[1],q5,VALUES[1 - i]);
      }
      this.region.put(p1);
      this.region.put(p2);
    }
    this.region.flush(true);
  }
  Scan scan=new Scan().setFilter(new ColumnValueFilter(FAMILIES[0],QUALIFIERS_FIVE[0],CompareOperator.EQUAL,VALUES[1]));
  KeyValue[] expectedEquals={new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[1],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_TWO[1],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1])};
  verifyScanFull(scan,expectedEquals);
  scan.setFilter(new ColumnValueFilter(FAMILIES[0],QUALIFIERS_FIVE[0],CompareOperator.GREATER,VALUES[0]));
  KeyValue[] expectedGreater={new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[1],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_TWO[1],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1])};
  verifyScanFull(scan,expectedGreater);
  scan.readAllVersions().setFilter(new ColumnValueFilter(FAMILIES[0],QUALIFIERS_FIVE[0],CompareOperator.GREATER_OR_EQUAL,VALUES[0]));
  KeyValue[] expectedGreaterOrEqual={new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_ONE[1],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[1],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_TWO[1],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_TWO[1],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1])};
  verifyScanFull(scan,expectedGreaterOrEqual);
  scan.readVersions(1).setFilter(new ColumnValueFilter(FAMILIES[1],QUALIFIERS_FIVE[1],CompareOperator.LESS,VALUES[1]));
  KeyValue[] expectedLess={new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[1],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0])};
  verifyScanFull(scan,expectedLess);
  scan.setFilter(new ColumnValueFilter(FAMILIES[1],QUALIFIERS_FIVE[1],CompareOperator.LESS_OR_EQUAL,VALUES[1]));
  KeyValue[] expectedLessOrEqual={new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[1]),new KeyValue(ROWS_ONE[1],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[1]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[1]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[1],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0])};
  verifyScanFull(scan,expectedLessOrEqual);
  scan.setFilter(new ColumnValueFilter(FAMILIES[1],QUALIFIERS_FIVE[1],CompareOperator.NOT_EQUAL,VALUES[1]));
  KeyValue[] expectedNotEqual={new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[1],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0])};
  verifyScanFull(scan,expectedNotEqual);
  List<Filter> orFilters=new ArrayList<>(2);
  orFilters.add(new ColumnValueFilter(FAMILIES[1],QUALIFIERS_FIVE[1],CompareOperator.NOT_EQUAL,VALUES[1]));
  orFilters.add(new QualifierFilter(CompareOperator.EQUAL,new BinaryComparator(QUALIFIERS_FIVE[0])));
  scan.setFilter(new FilterList(Operator.MUST_PASS_ONE,orFilters));
  KeyValue[] expectedMustPassOne={new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[1],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[1],FAMILIES[1],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_FIVE[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[1],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_TWO[1],FAMILIES[1],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_TWO[1],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_FIVE[0],VALUES[0]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0])};
  verifyScanFull(scan,expectedMustPassOne);
  List<Filter> andFilters=new ArrayList<>(2);
  andFilters.add(new ColumnValueFilter(FAMILIES[1],QUALIFIERS_FIVE[1],CompareOperator.NOT_EQUAL,VALUES[1]));
  andFilters.add(new RowFilter(CompareOperator.EQUAL,new BinaryPrefixComparator(Bytes.toBytes("testRow"))));
  scan.setFilter(new FilterList(Operator.MUST_PASS_ALL,andFilters));
  KeyValue[] expectedMustPassAll={new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[1],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0])};
  verifyScanFull(scan,expectedMustPassAll);
  Scan anotherScan=new Scan().addColumn(FAMILIES[1],QUALIFIERS_FIVE[1]).setFilter(new FilterList(Operator.MUST_PASS_ONE,orFilters));
  KeyValue[] expectedValues={new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[1],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_FIVE[1],VALUES[0])};
  verifyScanFull(anotherScan,expectedValues);
}
