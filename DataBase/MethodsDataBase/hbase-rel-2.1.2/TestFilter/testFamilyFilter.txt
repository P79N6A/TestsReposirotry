@Test public void testFamilyFilter() throws IOException {
  long expectedRows=this.numRows;
  long expectedKeys=this.colsPerRow / 2;
  Filter f=new FamilyFilter(CompareOperator.EQUAL,new BinaryComparator(Bytes.toBytes("testFamilyOne")));
  Scan s=new Scan();
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  expectedRows=0;
  expectedKeys=0;
  f=new FamilyFilter(CompareOperator.LESS,new BinaryComparator(Bytes.toBytes("testFamily")));
  s=new Scan();
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  expectedRows=this.numRows;
  expectedKeys=this.colsPerRow / 2;
  f=new FamilyFilter(CompareOperator.LESS_OR_EQUAL,new BinaryComparator(Bytes.toBytes("testFamilyOne")));
  s=new Scan();
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  expectedRows=this.numRows / 2;
  expectedKeys=this.colsPerRow / 2;
  f=new FamilyFilter(CompareOperator.NOT_EQUAL,new BinaryComparator(Bytes.toBytes("testFamilyOne")));
  s=new Scan(HConstants.EMPTY_START_ROW,Bytes.toBytes("testRowTwo"));
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  expectedRows=this.numRows / 2;
  expectedKeys=this.colsPerRow;
  f=new FamilyFilter(CompareOperator.GREATER_OR_EQUAL,new BinaryComparator(Bytes.toBytes("testFamilyOne")));
  s=new Scan(HConstants.EMPTY_START_ROW,Bytes.toBytes("testRowTwo"));
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  expectedRows=this.numRows / 2;
  expectedKeys=this.colsPerRow / 2;
  f=new FamilyFilter(CompareOperator.GREATER,new BinaryComparator(Bytes.toBytes("testFamilyOne")));
  s=new Scan(HConstants.EMPTY_START_ROW,Bytes.toBytes("testRowTwo"));
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  f=new FamilyFilter(CompareOperator.NOT_EQUAL,new BinaryComparator(FAMILIES[1]));
  s=new Scan();
  s.setFilter(f);
  KeyValue[] kvs={new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1])};
  verifyScanFull(s,kvs);
  f=new FamilyFilter(CompareOperator.NOT_EQUAL,new RegexStringComparator("test.*One"));
  s=new Scan();
  s.setFilter(f);
  kvs=new KeyValue[]{new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1])};
  verifyScanFull(s,kvs);
}
