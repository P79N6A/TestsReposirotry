@Test public void testCreateComparator() throws IOException {
  FixedFileTrailer t=new FixedFileTrailer(version,HFileReaderImpl.PBUF_TRAILER_MINOR_VERSION);
  try {
    assertEquals(CellComparatorImpl.class,t.createComparator(KeyValue.COMPARATOR.getLegacyKeyComparatorName()).getClass());
    assertEquals(CellComparatorImpl.class,t.createComparator(KeyValue.COMPARATOR.getClass().getName()).getClass());
    assertEquals(CellComparatorImpl.class,t.createComparator(CellComparator.class.getName()).getClass());
    assertEquals(CellComparatorImpl.MetaCellComparator.class,t.createComparator(KeyValue.META_COMPARATOR.getLegacyKeyComparatorName()).getClass());
    assertEquals(CellComparatorImpl.MetaCellComparator.class,t.createComparator(KeyValue.META_COMPARATOR.getClass().getName()).getClass());
    assertEquals(CellComparatorImpl.MetaCellComparator.class,t.createComparator(CellComparatorImpl.MetaCellComparator.META_COMPARATOR.getClass().getName()).getClass());
    assertNull(t.createComparator(Bytes.BYTES_RAWCOMPARATOR.getClass().getName()));
    assertNull(t.createComparator("org.apache.hadoop.hbase.KeyValue$RawBytesComparator"));
  }
 catch (  IOException e) {
    fail("Unexpected exception while testing FixedFileTrailer#createComparator()");
  }
  expectedEx.expect(IOException.class);
  t.createComparator("");
}
