@Test public void testCopyFromSrcToDestWithThreads() throws InterruptedException {
  List<byte[]> words=Arrays.asList(Bytes.toBytes("with"),Bytes.toBytes("great"),Bytes.toBytes("power"),Bytes.toBytes("comes"),Bytes.toBytes("great"),Bytes.toBytes("responsibility"));
  List<Integer> lengthes=words.stream().map(v -> v.length).collect(Collectors.toList());
  List<Integer> offsets=new ArrayList<>(words.size());
  for (int i=0; i != words.size(); ++i) {
    offsets.add(words.subList(0,i).stream().mapToInt(v -> v.length).sum());
  }
  int totalSize=words.stream().mapToInt(v -> v.length).sum();
  byte[] fullContent=new byte[totalSize];
  int offset=0;
  for (  byte[] w : words) {
    offset=Bytes.putBytes(fullContent,offset,w,0,w.length);
  }
  for (  ByteBuffer input : Arrays.asList(ByteBuffer.allocateDirect(totalSize),ByteBuffer.allocate(totalSize))) {
    words.forEach(input::put);
    byte[] output=new byte[totalSize];
    testCopyFromSrcToDestWithThreads(input,output,lengthes,offsets);
  }
  for (  ByteBuffer output : Arrays.asList(ByteBuffer.allocateDirect(totalSize),ByteBuffer.allocate(totalSize))) {
    byte[] input=fullContent;
    testCopyFromSrcToDestWithThreads(input,output,lengthes,offsets);
  }
  for (  ByteBuffer input : Arrays.asList(ByteBuffer.allocateDirect(totalSize),ByteBuffer.allocate(totalSize))) {
    words.forEach(input::put);
    for (    ByteBuffer output : Arrays.asList(ByteBuffer.allocateDirect(totalSize),ByteBuffer.allocate(totalSize))) {
      testCopyFromSrcToDestWithThreads(input,output,lengthes,offsets);
    }
  }
}
