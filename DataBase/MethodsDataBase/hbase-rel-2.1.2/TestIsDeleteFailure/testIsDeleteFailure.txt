@Test public void testIsDeleteFailure() throws Exception {
  final HTableDescriptor table=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
  final byte[] family=Bytes.toBytes("0");
  final byte[] c1=Bytes.toBytes("C01");
  final byte[] c2=Bytes.toBytes("C02");
  final byte[] c3=Bytes.toBytes("C03");
  final byte[] c4=Bytes.toBytes("C04");
  final byte[] c5=Bytes.toBytes("C05");
  final byte[] c6=Bytes.toBytes("C07");
  final byte[] c7=Bytes.toBytes("C07");
  final byte[] c8=Bytes.toBytes("C08");
  final byte[] c9=Bytes.toBytes("C09");
  final byte[] c10=Bytes.toBytes("C10");
  final byte[] c11=Bytes.toBytes("C11");
  final byte[] c12=Bytes.toBytes("C12");
  final byte[] c13=Bytes.toBytes("C13");
  final byte[] c14=Bytes.toBytes("C14");
  final byte[] c15=Bytes.toBytes("C15");
  final byte[] val=Bytes.toBytes("foo");
  List<byte[]> fams=new ArrayList<>(1);
  fams.add(family);
  Table ht=TEST_UTIL.createTable(table,fams.toArray(new byte[0][]),null,BloomType.ROWCOL,10000,new Configuration(TEST_UTIL.getConfiguration()));
  List<Mutation> pending=new ArrayList<Mutation>();
  for (int i=0; i < 1000; i++) {
    byte[] row=Bytes.toBytes("key" + Integer.toString(i));
    Put put=new Put(row);
    put.addColumn(family,c3,val);
    put.addColumn(family,c4,val);
    put.addColumn(family,c5,val);
    put.addColumn(family,c6,val);
    put.addColumn(family,c7,val);
    put.addColumn(family,c8,val);
    put.addColumn(family,c12,val);
    put.addColumn(family,c13,val);
    put.addColumn(family,c15,val);
    pending.add(put);
    Delete del=new Delete(row);
    del.addColumns(family,c2);
    del.addColumns(family,c9);
    del.addColumns(family,c10);
    del.addColumns(family,c14);
    pending.add(del);
  }
  ht.batch(pending,new Object[pending.size()]);
  TEST_UTIL.flush();
  TEST_UTIL.compact(true);
  for (int i=20; i < 300; i++) {
    byte[] row=Bytes.toBytes("key" + Integer.toString(i));
    Put put=new Put(row);
    put.addColumn(family,c3,val);
    put.addColumn(family,c4,val);
    put.addColumn(family,c5,val);
    put.addColumn(family,c6,val);
    put.addColumn(family,c7,val);
    put.addColumn(family,c8,val);
    put.addColumn(family,c12,val);
    put.addColumn(family,c13,val);
    put.addColumn(family,c15,val);
    pending.add(put);
    Delete del=new Delete(row);
    del.addColumns(family,c2);
    del.addColumns(family,c9);
    del.addColumns(family,c10);
    del.addColumns(family,c14);
    pending.add(del);
  }
  ht.batch(pending,new Object[pending.size()]);
  TEST_UTIL.flush();
  Scan scan=new Scan();
  scan.addColumn(family,c9);
  scan.addColumn(family,c15);
  SingleColumnValueFilter filter=new SingleColumnValueFilter(family,c15,CompareFilter.CompareOp.EQUAL,new BinaryComparator(c15));
  scan.setFilter(filter);
  for (  Result result : ht.getScanner(scan)) {
    result.advance();
  }
  ht.close();
}
