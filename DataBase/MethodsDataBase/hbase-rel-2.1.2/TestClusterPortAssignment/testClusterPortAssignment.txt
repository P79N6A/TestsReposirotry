/** 
 * Check that we can start an HBase cluster specifying a custom set of RPC and infoserver ports.
 */
@Test public void testClusterPortAssignment() throws Exception {
  boolean retry=false;
  do {
    int masterPort=HBaseTestingUtility.randomFreePort();
    int masterInfoPort=HBaseTestingUtility.randomFreePort();
    int rsPort=HBaseTestingUtility.randomFreePort();
    int rsInfoPort=HBaseTestingUtility.randomFreePort();
    TEST_UTIL.getConfiguration().setBoolean(LocalHBaseCluster.ASSIGN_RANDOM_PORTS,false);
    TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_PORT,masterPort);
    TEST_UTIL.getConfiguration().setInt(HConstants.MASTER_INFO_PORT,masterInfoPort);
    TEST_UTIL.getConfiguration().setInt(HConstants.REGIONSERVER_PORT,rsPort);
    TEST_UTIL.getConfiguration().setInt(HConstants.REGIONSERVER_INFO_PORT,rsInfoPort);
    try {
      MiniHBaseCluster cluster=TEST_UTIL.startMiniCluster();
      assertTrue("Cluster failed to come up",cluster.waitForActiveAndReadyMaster(30000));
      retry=false;
      assertEquals("Master RPC port is incorrect",masterPort,cluster.getMaster().getRpcServer().getListenerAddress().getPort());
      assertEquals("Master info port is incorrect",masterInfoPort,cluster.getMaster().getInfoServer().getPort());
      assertEquals("RS RPC port is incorrect",rsPort,cluster.getRegionServer(0).getRpcServer().getListenerAddress().getPort());
      assertEquals("RS info port is incorrect",rsInfoPort,cluster.getRegionServer(0).getInfoServer().getPort());
    }
 catch (    BindException e) {
      LOG.info("Failed to bind, need to retry",e);
      retry=true;
    }
 finally {
      TEST_UTIL.shutdownMiniCluster();
    }
  }
 while (retry);
}
