@Test public void testWhenClusterIsWriteHeavyWithOffheapMemstore() throws Exception {
  BlockCacheStub blockCache=new BlockCacheStub((long)(maxHeapSize * 0.4));
  Configuration conf=HBaseConfiguration.create();
  conf.setFloat(HeapMemoryManager.MEMSTORE_SIZE_MAX_RANGE_KEY,0.75f);
  conf.setFloat(HeapMemoryManager.MEMSTORE_SIZE_MIN_RANGE_KEY,0.10f);
  conf.setFloat(HeapMemoryManager.BLOCK_CACHE_SIZE_MAX_RANGE_KEY,0.7f);
  conf.setFloat(HeapMemoryManager.BLOCK_CACHE_SIZE_MIN_RANGE_KEY,0.05f);
  conf.setLong(HeapMemoryManager.HBASE_RS_HEAP_MEMORY_TUNER_PERIOD,1000);
  conf.setInt(DefaultHeapMemoryTuner.NUM_PERIODS_TO_IGNORE,0);
  RegionServerAccountingStub regionServerAccounting=new RegionServerAccountingStub(conf);
  MemstoreFlusherStub memStoreFlusher=new MemstoreFlusherStub((long)(maxHeapSize * 0.4));
  blockCache.setTestBlockSize(0);
  regionServerAccounting.setTestMemstoreSize((long)(maxHeapSize * 0.4 * 0.8));
  HeapMemoryManager heapMemoryManager=new HeapMemoryManager(blockCache,memStoreFlusher,new RegionServerStub(conf),regionServerAccounting);
  long oldMemstoreHeapSize=memStoreFlusher.memstoreSize;
  long oldBlockCacheSize=blockCache.maxSize;
  final ChoreService choreService=new ChoreService("TEST_SERVER_NAME");
  heapMemoryManager.start(choreService);
  memStoreFlusher.flushType=FlushType.ABOVE_OFFHEAP_HIGHER_MARK;
  memStoreFlusher.requestFlush(null,false,FlushLifeCycleTracker.DUMMY);
  memStoreFlusher.requestFlush(null,false,FlushLifeCycleTracker.DUMMY);
  memStoreFlusher.requestFlush(null,false,FlushLifeCycleTracker.DUMMY);
  memStoreFlusher.requestFlush(null,false,FlushLifeCycleTracker.DUMMY);
  Thread.sleep(1500);
  assertEquals(oldMemstoreHeapSize,memStoreFlusher.memstoreSize);
  assertEquals(oldBlockCacheSize,blockCache.maxSize);
}
