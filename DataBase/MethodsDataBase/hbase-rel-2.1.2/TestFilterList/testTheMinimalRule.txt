@Test public void testTheMinimalRule() throws IOException {
  KeyValue kv1=new KeyValue(Bytes.toBytes("row"),Bytes.toBytes("fam"),Bytes.toBytes("a"),1,Bytes.toBytes("value"));
  MockFilter filter1=new MockFilter(ReturnCode.INCLUDE);
  MockFilter filter2=new MockFilter(ReturnCode.INCLUDE_AND_NEXT_COL);
  MockFilter filter3=new MockFilter(ReturnCode.INCLUDE_AND_SEEK_NEXT_ROW);
  MockFilter filter4=new MockFilter(ReturnCode.NEXT_COL);
  MockFilter filter5=new MockFilter(ReturnCode.SKIP);
  MockFilter filter6=new MockFilter(ReturnCode.SEEK_NEXT_USING_HINT);
  FilterList filterList=new FilterList(Operator.MUST_PASS_ONE,filter1,filter2);
  assertEquals(ReturnCode.INCLUDE,filterList.filterCell(kv1));
  filterList=new FilterList(Operator.MUST_PASS_ONE,filter2,filter3);
  assertEquals(ReturnCode.INCLUDE_AND_NEXT_COL,filterList.filterCell(kv1));
  filterList=new FilterList(Operator.MUST_PASS_ONE,filter4,filter5,filter6);
  assertEquals(ReturnCode.SKIP,filterList.filterCell(kv1));
  filterList=new FilterList(Operator.MUST_PASS_ONE,filter4,filter6);
  assertEquals(ReturnCode.SKIP,filterList.filterCell(kv1));
  filterList=new FilterList(Operator.MUST_PASS_ONE,filter3,filter1);
  assertEquals(ReturnCode.INCLUDE,filterList.filterCell(kv1));
  filterList=new FilterList(Operator.MUST_PASS_ONE,filter3,filter2,filter1,filter5);
  assertEquals(ReturnCode.INCLUDE,filterList.filterCell(kv1));
  filterList=new FilterList(Operator.MUST_PASS_ONE,filter2,new FilterList(Operator.MUST_PASS_ONE,filter3,filter4));
  assertEquals(ReturnCode.INCLUDE_AND_NEXT_COL,filterList.filterCell(kv1));
  filterList=new FilterList(Operator.MUST_PASS_ONE,filter2,new FilterList(Operator.MUST_PASS_ONE,filter3,filter4));
  assertEquals(ReturnCode.INCLUDE_AND_NEXT_COL,filterList.filterCell(kv1));
  filterList=new FilterList(Operator.MUST_PASS_ONE,filter6,filter6);
  assertEquals(ReturnCode.SEEK_NEXT_USING_HINT,filterList.filterCell(kv1));
}
