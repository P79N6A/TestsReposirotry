/** 
 * When we do a "MUST_PASS_ONE" (a logical 'OR') of the above two filters we expect to get the same result as the 'prefix' only result.
 * @throws Exception
 */
@Test public void testFilterListTwoFiltersMustPassOne() throws Exception {
  byte[] r1=Bytes.toBytes("Row1");
  byte[] r11=Bytes.toBytes("Row11");
  byte[] r2=Bytes.toBytes("Row2");
  FilterList flist=new FilterList(FilterList.Operator.MUST_PASS_ONE);
  flist.addFilter(new PrefixFilter(r1));
  flist.filterRowKey(KeyValueUtil.createFirstOnRow(r1));
  assertEquals(ReturnCode.INCLUDE,flist.filterCell(new KeyValue(r1,r1,r1)));
  assertEquals(ReturnCode.INCLUDE,flist.filterCell(new KeyValue(r11,r11,r11)));
  flist.reset();
  flist.filterRowKey(KeyValueUtil.createFirstOnRow(r2));
  assertEquals(ReturnCode.SKIP,flist.filterCell(new KeyValue(r2,r2,r2)));
  flist=new FilterList(FilterList.Operator.MUST_PASS_ONE);
  flist.addFilter(new AlwaysNextColFilter());
  flist.addFilter(new PrefixFilter(r1));
  flist.filterRowKey(KeyValueUtil.createFirstOnRow(r1));
  assertEquals(ReturnCode.INCLUDE,flist.filterCell(new KeyValue(r1,r1,r1)));
  assertEquals(ReturnCode.INCLUDE,flist.filterCell(new KeyValue(r11,r11,r11)));
  flist.reset();
  flist.filterRowKey(KeyValueUtil.createFirstOnRow(r2));
  assertEquals(ReturnCode.NEXT_COL,flist.filterCell(new KeyValue(r2,r2,r2)));
}
