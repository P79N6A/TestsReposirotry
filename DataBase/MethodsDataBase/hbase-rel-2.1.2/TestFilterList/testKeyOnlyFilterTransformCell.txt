@Test public void testKeyOnlyFilterTransformCell() throws IOException {
  Cell c;
  KeyValue kv1=new KeyValue(Bytes.toBytes("row"),Bytes.toBytes("cf"),Bytes.toBytes("column1"),1,Bytes.toBytes("value1"));
  KeyValue kv2=new KeyValue(Bytes.toBytes("row"),Bytes.toBytes("cf"),Bytes.toBytes("column1"),2,Bytes.toBytes("value2"));
  Filter filter1=new SingleColumnValueFilter(Bytes.toBytes("cf"),Bytes.toBytes("column1"),CompareOperator.EQUAL,Bytes.toBytes("value1"));
  Filter filter2=new SingleColumnValueFilter(Bytes.toBytes("cf"),Bytes.toBytes("column1"),CompareOperator.EQUAL,Bytes.toBytes("value2"));
  FilterList internalFilterList=new FilterList(Operator.MUST_PASS_ONE,filter1,filter2);
  FilterList keyOnlyFilterFirst=new FilterList(Operator.MUST_PASS_ALL,new KeyOnlyFilter(),internalFilterList);
  assertEquals(ReturnCode.INCLUDE,keyOnlyFilterFirst.filterCell(kv1));
  c=keyOnlyFilterFirst.transformCell(kv1);
  assertEquals(0,c.getValueLength());
  assertEquals(ReturnCode.INCLUDE,keyOnlyFilterFirst.filterCell(kv2));
  c=keyOnlyFilterFirst.transformCell(kv2);
  assertEquals(0,c.getValueLength());
  internalFilterList.reset();
  FilterList keyOnlyFilterLast=new FilterList(Operator.MUST_PASS_ALL,new KeyOnlyFilter(),internalFilterList);
  assertEquals(ReturnCode.INCLUDE,keyOnlyFilterLast.filterCell(kv1));
  c=keyOnlyFilterLast.transformCell(kv1);
  assertEquals(0,c.getValueLength());
  assertEquals(ReturnCode.INCLUDE,keyOnlyFilterLast.filterCell(kv2));
  c=keyOnlyFilterLast.transformCell(kv2);
  assertEquals(0,c.getValueLength());
}
