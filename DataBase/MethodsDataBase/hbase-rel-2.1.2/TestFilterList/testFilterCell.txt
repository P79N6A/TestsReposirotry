/** 
 * Test filterCell logic.
 * @throws Exception
 */
@Test public void testFilterCell() throws Exception {
  Filter includeFilter=new FilterBase(){
    @Override public Filter.ReturnCode filterCell(    final Cell v){
      return Filter.ReturnCode.INCLUDE;
    }
  }
;
  Filter alternateFilter=new FilterBase(){
    boolean returnInclude=true;
    @Override public Filter.ReturnCode filterCell(    final Cell v){
      Filter.ReturnCode returnCode=returnInclude ? Filter.ReturnCode.INCLUDE : Filter.ReturnCode.SKIP;
      returnInclude=!returnInclude;
      return returnCode;
    }
  }
;
  Filter alternateIncludeFilter=new FilterBase(){
    boolean returnIncludeOnly=false;
    @Override public Filter.ReturnCode filterCell(    final Cell v){
      Filter.ReturnCode returnCode=returnIncludeOnly ? Filter.ReturnCode.INCLUDE : Filter.ReturnCode.INCLUDE_AND_NEXT_COL;
      returnIncludeOnly=!returnIncludeOnly;
      return returnCode;
    }
  }
;
  FilterList mpOnefilterList=new FilterList(Operator.MUST_PASS_ONE,Arrays.asList(new Filter[]{includeFilter,alternateIncludeFilter,alternateFilter}));
  assertEquals(ReturnCode.INCLUDE,mpOnefilterList.filterCell(null));
  assertEquals(Filter.ReturnCode.INCLUDE,mpOnefilterList.filterCell(null));
  FilterList mpAllfilterList=new FilterList(Operator.MUST_PASS_ALL,Arrays.asList(new Filter[]{includeFilter,alternateIncludeFilter,alternateFilter}));
  assertEquals(Filter.ReturnCode.INCLUDE_AND_NEXT_COL,mpAllfilterList.filterCell(null));
  assertEquals(Filter.ReturnCode.SKIP,mpAllfilterList.filterCell(null));
}
