@Test public void testRace() throws Exception {
  UTIL.waitFor(30000,new ExplainingPredicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      for (      RegionServerThread t : UTIL.getMiniHBaseCluster().getRegionServerThreads()) {
        ReplicationSource source=(ReplicationSource)((Replication)t.getRegionServer().getReplicationSourceService()).getReplicationManager().getSource(PEER_ID);
        if (source == null || source.getReplicationEndpoint() == null) {
          return false;
        }
      }
      return true;
    }
    @Override public String explainFailure() throws Exception {
      return "Replication source has not been initialized yet";
    }
  }
);
  UTIL.getAdmin().createTable(TableDescriptorBuilder.newBuilder(TABLE_NAME).setColumnFamily(ColumnFamilyDescriptorBuilder.newBuilder(CF).setScope(HConstants.REPLICATION_SCOPE_GLOBAL).build()).build());
  UTIL.waitTableAvailable(TABLE_NAME);
  try (Table table=UTIL.getConnection().getTable(TABLE_NAME)){
    table.put(new Put(Bytes.toBytes(1)).addColumn(CF,CQ,Bytes.toBytes(1)));
  }
   NULL_UUID=false;
  UTIL.waitFor(30000,new ExplainingPredicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      try (WAL.Reader reader=WALFactory.createReader(FS,LOG_PATH,UTIL.getConfiguration())){
        return reader.next() != null;
      }
 catch (      IOException e) {
        return false;
      }
    }
    @Override public String explainFailure() throws Exception {
      return "Replication has not catched up";
    }
  }
);
  try (WAL.Reader reader=WALFactory.createReader(FS,LOG_PATH,UTIL.getConfiguration())){
    Cell cell=reader.next().getEdit().getCells().get(0);
    assertEquals(1,Bytes.toInt(cell.getRowArray(),cell.getRowOffset(),cell.getRowLength()));
    assertArrayEquals(CF,CellUtil.cloneFamily(cell));
    assertArrayEquals(CQ,CellUtil.cloneQualifier(cell));
    assertEquals(1,Bytes.toInt(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength()));
  }
 }
