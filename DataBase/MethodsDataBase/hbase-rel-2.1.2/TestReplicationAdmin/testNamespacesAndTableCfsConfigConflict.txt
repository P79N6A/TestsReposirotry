@Test public void testNamespacesAndTableCfsConfigConflict() throws Exception {
  String ns1="ns1";
  String ns2="ns2";
  final TableName tableName1=TableName.valueOf(ns1 + ":" + name.getMethodName());
  final TableName tableName2=TableName.valueOf(ns2 + ":" + name.getMethodName()+ "2");
  ReplicationPeerConfig rpc=new ReplicationPeerConfig();
  rpc.setClusterKey(KEY_ONE);
  rpc.setReplicateAllUserTables(false);
  hbaseAdmin.addReplicationPeer(ID_ONE,rpc);
  rpc=hbaseAdmin.getReplicationPeerConfig(ID_ONE);
  Set<String> namespaces=new HashSet<String>();
  namespaces.add(ns1);
  rpc.setNamespaces(namespaces);
  hbaseAdmin.updateReplicationPeerConfig(ID_ONE,rpc);
  rpc=hbaseAdmin.getReplicationPeerConfig(ID_ONE);
  try {
    Map<TableName,List<String>> tableCfs=new HashMap<>();
    tableCfs.put(tableName1,new ArrayList<>());
    rpc.setTableCFsMap(tableCfs);
    hbaseAdmin.updateReplicationPeerConfig(ID_ONE,rpc);
    fail("Should throw ReplicationException" + " Because table " + tableName1 + " conflict with namespace "+ ns1);
  }
 catch (  Exception e) {
  }
  rpc=hbaseAdmin.getReplicationPeerConfig(ID_ONE);
  Map<TableName,List<String>> tableCfs=new HashMap<>();
  tableCfs.put(tableName2,new ArrayList<>());
  rpc.setTableCFsMap(tableCfs);
  hbaseAdmin.updateReplicationPeerConfig(ID_ONE,rpc);
  rpc=hbaseAdmin.getReplicationPeerConfig(ID_ONE);
  try {
    namespaces.clear();
    namespaces.add(ns2);
    rpc.setNamespaces(namespaces);
    hbaseAdmin.updateReplicationPeerConfig(ID_ONE,rpc);
    fail("Should throw ReplicationException" + " Because namespace " + ns2 + " conflict with table "+ tableName2);
  }
 catch (  Exception e) {
  }
  ReplicationPeerConfig rpc2=new ReplicationPeerConfig();
  rpc2.setClusterKey(KEY_SECOND);
  hbaseAdmin.addReplicationPeer(ID_SECOND,rpc2);
  rpc2=hbaseAdmin.getReplicationPeerConfig(ID_SECOND);
  Set<String> excludeNamespaces=new HashSet<String>();
  excludeNamespaces.add(ns1);
  rpc2.setExcludeNamespaces(excludeNamespaces);
  hbaseAdmin.updateReplicationPeerConfig(ID_SECOND,rpc2);
  rpc2=hbaseAdmin.getReplicationPeerConfig(ID_SECOND);
  try {
    Map<TableName,List<String>> excludeTableCfs=new HashMap<>();
    excludeTableCfs.put(tableName1,new ArrayList<>());
    rpc2.setExcludeTableCFsMap(excludeTableCfs);
    hbaseAdmin.updateReplicationPeerConfig(ID_SECOND,rpc2);
    fail("Should throw ReplicationException" + " Because exclude table " + tableName1 + " conflict with exclude namespace "+ ns1);
  }
 catch (  Exception e) {
  }
  rpc2=hbaseAdmin.getReplicationPeerConfig(ID_SECOND);
  Map<TableName,List<String>> excludeTableCfs=new HashMap<>();
  excludeTableCfs.put(tableName2,new ArrayList<>());
  rpc2.setExcludeTableCFsMap(excludeTableCfs);
  hbaseAdmin.updateReplicationPeerConfig(ID_SECOND,rpc2);
  rpc2=hbaseAdmin.getReplicationPeerConfig(ID_SECOND);
  try {
    namespaces.clear();
    namespaces.add(ns2);
    rpc2.setNamespaces(namespaces);
    hbaseAdmin.updateReplicationPeerConfig(ID_SECOND,rpc2);
    fail("Should throw ReplicationException" + " Because exclude namespace " + ns2 + " conflict with exclude table "+ tableName2);
  }
 catch (  Exception e) {
  }
  hbaseAdmin.removeReplicationPeer(ID_ONE);
  hbaseAdmin.removeReplicationPeer(ID_SECOND);
}
