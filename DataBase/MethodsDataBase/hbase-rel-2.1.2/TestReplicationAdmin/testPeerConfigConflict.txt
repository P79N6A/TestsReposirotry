@Test public void testPeerConfigConflict() throws Exception {
  ReplicationPeerConfig rpc=new ReplicationPeerConfig();
  rpc.setClusterKey(KEY_ONE);
  String ns1="ns1";
  Set<String> namespaces=new HashSet<String>();
  namespaces.add(ns1);
  TableName tab1=TableName.valueOf("ns2:tabl");
  Map<TableName,List<String>> tableCfs=new HashMap<TableName,List<String>>();
  tableCfs.put(tab1,new ArrayList<String>());
  try {
    rpc.setNamespaces(namespaces);
    hbaseAdmin.addReplicationPeer(ID_ONE,rpc);
    fail("Should throw Exception." + " When replicate all flag is true, no need to config namespaces");
  }
 catch (  IOException e) {
    rpc.setNamespaces(null);
  }
  try {
    rpc.setTableCFsMap(tableCfs);
    hbaseAdmin.addReplicationPeer(ID_ONE,rpc);
    fail("Should throw Exception." + " When replicate all flag is true, no need to config table-cfs");
  }
 catch (  IOException e) {
    rpc.setTableCFsMap(null);
  }
  rpc.setReplicateAllUserTables(false);
  try {
    rpc.setExcludeNamespaces(namespaces);
    hbaseAdmin.addReplicationPeer(ID_ONE,rpc);
    fail("Should throw Exception." + " When replicate all flag is false, no need to config exclude namespaces");
  }
 catch (  IOException e) {
    rpc.setExcludeNamespaces(null);
  }
  try {
    rpc.setExcludeTableCFsMap(tableCfs);
    hbaseAdmin.addReplicationPeer(ID_ONE,rpc);
    fail("Should throw Exception." + " When replicate all flag is false, no need to config exclude table-cfs");
  }
 catch (  IOException e) {
    rpc.setExcludeTableCFsMap(null);
  }
  rpc.setNamespaces(namespaces);
  rpc.setTableCFsMap(tableCfs);
  hbaseAdmin.addReplicationPeer(ID_ONE,rpc);
  ReplicationPeerConfig rpc2=new ReplicationPeerConfig();
  rpc2.setClusterKey(KEY_SECOND);
  rpc2.setExcludeNamespaces(namespaces);
  rpc2.setExcludeTableCFsMap(tableCfs);
  hbaseAdmin.addReplicationPeer(ID_SECOND,rpc2);
  hbaseAdmin.removeReplicationPeer(ID_ONE);
  hbaseAdmin.removeReplicationPeer(ID_SECOND);
}
