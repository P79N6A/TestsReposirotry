@Test public void testAppendPeerTableCFs() throws Exception {
  ReplicationPeerConfig rpc=new ReplicationPeerConfig();
  rpc.setClusterKey(KEY_ONE);
  final TableName tableName1=TableName.valueOf(name.getMethodName() + "t1");
  final TableName tableName2=TableName.valueOf(name.getMethodName() + "t2");
  final TableName tableName3=TableName.valueOf(name.getMethodName() + "t3");
  final TableName tableName4=TableName.valueOf(name.getMethodName() + "t4");
  final TableName tableName5=TableName.valueOf(name.getMethodName() + "t5");
  final TableName tableName6=TableName.valueOf(name.getMethodName() + "t6");
  hbaseAdmin.addReplicationPeer(ID_ONE,rpc);
  rpc=hbaseAdmin.getReplicationPeerConfig(ID_ONE);
  rpc.setReplicateAllUserTables(false);
  hbaseAdmin.updateReplicationPeerConfig(ID_ONE,rpc);
  Map<TableName,List<String>> tableCFs=new HashMap<>();
  tableCFs.put(tableName1,null);
  admin.appendPeerTableCFs(ID_ONE,tableCFs);
  Map<TableName,List<String>> result=ReplicationPeerConfigUtil.parseTableCFsFromConfig(admin.getPeerTableCFs(ID_ONE));
  assertEquals(1,result.size());
  assertEquals(true,result.containsKey(tableName1));
  assertNull(result.get(tableName1));
  tableCFs.clear();
  tableCFs.put(tableName2,null);
  admin.appendPeerTableCFs(ID_ONE,tableCFs);
  result=ReplicationPeerConfigUtil.parseTableCFsFromConfig(admin.getPeerTableCFs(ID_ONE));
  assertEquals(2,result.size());
  assertTrue("Should contain t1",result.containsKey(tableName1));
  assertTrue("Should contain t2",result.containsKey(tableName2));
  assertNull(result.get(tableName1));
  assertNull(result.get(tableName2));
  tableCFs.clear();
  tableCFs.put(tableName3,new ArrayList<>());
  tableCFs.get(tableName3).add("f1");
  admin.appendPeerTableCFs(ID_ONE,tableCFs);
  result=ReplicationPeerConfigUtil.parseTableCFsFromConfig(admin.getPeerTableCFs(ID_ONE));
  assertEquals(3,result.size());
  assertTrue("Should contain t1",result.containsKey(tableName1));
  assertTrue("Should contain t2",result.containsKey(tableName2));
  assertTrue("Should contain t3",result.containsKey(tableName3));
  assertNull(result.get(tableName1));
  assertNull(result.get(tableName2));
  assertEquals(1,result.get(tableName3).size());
  assertEquals("f1",result.get(tableName3).get(0));
  tableCFs.clear();
  tableCFs.put(tableName4,new ArrayList<>());
  tableCFs.get(tableName4).add("f1");
  tableCFs.get(tableName4).add("f2");
  admin.appendPeerTableCFs(ID_ONE,tableCFs);
  result=ReplicationPeerConfigUtil.parseTableCFsFromConfig(admin.getPeerTableCFs(ID_ONE));
  assertEquals(4,result.size());
  assertTrue("Should contain t1",result.containsKey(tableName1));
  assertTrue("Should contain t2",result.containsKey(tableName2));
  assertTrue("Should contain t3",result.containsKey(tableName3));
  assertTrue("Should contain t4",result.containsKey(tableName4));
  assertNull(result.get(tableName1));
  assertNull(result.get(tableName2));
  assertEquals(1,result.get(tableName3).size());
  assertEquals("f1",result.get(tableName3).get(0));
  assertEquals(2,result.get(tableName4).size());
  assertEquals("f1",result.get(tableName4).get(0));
  assertEquals("f2",result.get(tableName4).get(1));
  tableCFs.clear();
  tableCFs.put(tableName5,new ArrayList<>());
  admin.appendPeerTableCFs(ID_ONE,tableCFs);
  tableCFs.clear();
  tableCFs.put(tableName5,new ArrayList<>());
  tableCFs.get(tableName5).add("f1");
  admin.appendPeerTableCFs(ID_ONE,tableCFs);
  result=ReplicationPeerConfigUtil.parseTableCFsFromConfig(admin.getPeerTableCFs(ID_ONE));
  assertEquals(5,result.size());
  assertTrue("Should contain t5",result.containsKey(tableName5));
  assertNull(result.get(tableName5));
  tableCFs.clear();
  tableCFs.put(tableName6,new ArrayList<>());
  tableCFs.get(tableName6).add("f1");
  admin.appendPeerTableCFs(ID_ONE,tableCFs);
  tableCFs.clear();
  tableCFs.put(tableName6,new ArrayList<>());
  admin.appendPeerTableCFs(ID_ONE,tableCFs);
  result=ReplicationPeerConfigUtil.parseTableCFsFromConfig(admin.getPeerTableCFs(ID_ONE));
  assertEquals(6,result.size());
  assertTrue("Should contain t6",result.containsKey(tableName6));
  assertNull(result.get(tableName6));
  admin.removePeer(ID_ONE);
}
