@Test public void testRemovePeerTableCFs() throws Exception {
  ReplicationPeerConfig rpc=new ReplicationPeerConfig();
  rpc.setClusterKey(KEY_ONE);
  final TableName tableName1=TableName.valueOf(name.getMethodName() + "t1");
  final TableName tableName2=TableName.valueOf(name.getMethodName() + "t2");
  final TableName tableName3=TableName.valueOf(name.getMethodName() + "t3");
  final TableName tableName4=TableName.valueOf(name.getMethodName() + "t4");
  hbaseAdmin.addReplicationPeer(ID_ONE,rpc);
  rpc=hbaseAdmin.getReplicationPeerConfig(ID_ONE);
  rpc.setReplicateAllUserTables(false);
  hbaseAdmin.updateReplicationPeerConfig(ID_ONE,rpc);
  Map<TableName,List<String>> tableCFs=new HashMap<>();
  try {
    tableCFs.put(tableName3,null);
    admin.removePeerTableCFs(ID_ONE,tableCFs);
    assertTrue(false);
  }
 catch (  ReplicationException e) {
  }
  assertNull(admin.getPeerTableCFs(ID_ONE));
  tableCFs.clear();
  tableCFs.put(tableName1,null);
  tableCFs.put(tableName2,new ArrayList<>());
  tableCFs.get(tableName2).add("cf1");
  admin.setPeerTableCFs(ID_ONE,tableCFs);
  try {
    tableCFs.clear();
    tableCFs.put(tableName3,null);
    admin.removePeerTableCFs(ID_ONE,tableCFs);
    assertTrue(false);
  }
 catch (  ReplicationException e) {
  }
  Map<TableName,List<String>> result=ReplicationPeerConfigUtil.parseTableCFsFromConfig(admin.getPeerTableCFs(ID_ONE));
  assertEquals(2,result.size());
  assertTrue("Should contain t1",result.containsKey(tableName1));
  assertTrue("Should contain t2",result.containsKey(tableName2));
  assertNull(result.get(tableName1));
  assertEquals(1,result.get(tableName2).size());
  assertEquals("cf1",result.get(tableName2).get(0));
  try {
    tableCFs.clear();
    tableCFs.put(tableName1,new ArrayList<>());
    tableCFs.get(tableName1).add("f1");
    admin.removePeerTableCFs(ID_ONE,tableCFs);
    assertTrue(false);
  }
 catch (  ReplicationException e) {
  }
  tableCFs.clear();
  tableCFs.put(tableName1,null);
  admin.removePeerTableCFs(ID_ONE,tableCFs);
  result=ReplicationPeerConfigUtil.parseTableCFsFromConfig(admin.getPeerTableCFs(ID_ONE));
  assertEquals(1,result.size());
  assertEquals(1,result.get(tableName2).size());
  assertEquals("cf1",result.get(tableName2).get(0));
  try {
    tableCFs.clear();
    tableCFs.put(tableName2,null);
    admin.removePeerTableCFs(ID_ONE,tableCFs);
    fail();
  }
 catch (  ReplicationException e) {
  }
  tableCFs.clear();
  tableCFs.put(tableName2,new ArrayList<>());
  tableCFs.get(tableName2).add("cf1");
  admin.removePeerTableCFs(ID_ONE,tableCFs);
  assertNull(admin.getPeerTableCFs(ID_ONE));
  tableCFs.clear();
  tableCFs.put(tableName4,new ArrayList<>());
  admin.setPeerTableCFs(ID_ONE,tableCFs);
  admin.removePeerTableCFs(ID_ONE,tableCFs);
  assertNull(admin.getPeerTableCFs(ID_ONE));
  admin.removePeer(ID_ONE);
}
