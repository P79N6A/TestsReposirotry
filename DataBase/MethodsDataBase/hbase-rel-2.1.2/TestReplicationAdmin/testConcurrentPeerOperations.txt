@Test public void testConcurrentPeerOperations() throws Exception {
  int threadNum=5;
  AtomicLong successCount=new AtomicLong(0);
  Thread[] addPeers=new Thread[threadNum];
  for (int i=0; i < threadNum; i++) {
    addPeers[i]=new Thread(() -> {
      try {
        hbaseAdmin.addReplicationPeer(ID_ONE,ReplicationPeerConfig.newBuilder().setClusterKey(KEY_ONE).build());
        successCount.incrementAndGet();
      }
 catch (      Exception e) {
        LOG.debug("Got exception when add replication peer",e);
      }
    }
);
    addPeers[i].start();
  }
  for (  Thread addPeer : addPeers) {
    addPeer.join();
  }
  assertEquals(1,successCount.get());
  successCount.set(0);
  Thread[] removePeers=new Thread[threadNum];
  for (int i=0; i < threadNum; i++) {
    removePeers[i]=new Thread(() -> {
      try {
        hbaseAdmin.removeReplicationPeer(ID_ONE);
        successCount.incrementAndGet();
      }
 catch (      Exception e) {
        LOG.debug("Got exception when remove replication peer",e);
      }
    }
);
    removePeers[i].start();
  }
  for (  Thread removePeer : removePeers) {
    removePeer.join();
  }
  assertEquals(1,successCount.get());
  successCount.set(0);
  addPeers=new Thread[threadNum];
  for (int i=0; i < threadNum; i++) {
    addPeers[i]=new Thread(() -> {
      try {
        hbaseAdmin.addReplicationPeer(ID_ONE,ReplicationPeerConfig.newBuilder().setClusterKey(KEY_ONE).build());
        successCount.incrementAndGet();
      }
 catch (      Exception e) {
        LOG.debug("Got exception when add replication peer",e);
      }
    }
);
    addPeers[i].start();
  }
  for (  Thread addPeer : addPeers) {
    addPeer.join();
  }
  assertEquals(1,successCount.get());
}
