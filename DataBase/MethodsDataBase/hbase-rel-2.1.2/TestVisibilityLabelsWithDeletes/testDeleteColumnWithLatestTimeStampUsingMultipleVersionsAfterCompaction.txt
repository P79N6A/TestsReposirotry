@Test public void testDeleteColumnWithLatestTimeStampUsingMultipleVersionsAfterCompaction() throws Exception {
  setAuths();
  final TableName tableName=TableName.valueOf(testName.getMethodName());
  try (Table table=doPuts(tableName)){
    TEST_UTIL.getAdmin().flush(tableName);
    PrivilegedExceptionAction<Void> actiona=new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try (Connection connection=ConnectionFactory.createConnection(conf);Table table=connection.getTable(tableName)){
          Delete d=new Delete(row1);
          d.setCellVisibility(new CellVisibility(SECRET + "&" + TOPSECRET));
          d.addColumn(fam,qual);
          table.delete(d);
        }
 catch (        Throwable t) {
          throw new IOException(t);
        }
        return null;
      }
    }
;
    SUPERUSER.runAs(actiona);
    TEST_UTIL.getAdmin().flush(tableName);
    Put put=new Put(Bytes.toBytes("row3"));
    put.addColumn(fam,qual,127L,value);
    put.setCellVisibility(new CellVisibility(CONFIDENTIAL + "&" + PRIVATE));
    table.put(put);
    TEST_UTIL.getAdmin().flush(tableName);
    TEST_UTIL.getAdmin().majorCompact(tableName);
    Thread.sleep(5000);
    Scan s=new Scan();
    s.readVersions(5);
    s.setAuthorizations(new Authorizations(SECRET,PRIVATE,CONFIDENTIAL,TOPSECRET));
    ResultScanner scanner=table.getScanner(s);
    Result[] next=scanner.next(3);
    assertTrue(next.length == 3);
    CellScanner cellScanner=next[0].cellScanner();
    cellScanner.advance();
    Cell current=cellScanner.current();
    assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),row1,0,row1.length));
    assertEquals(127L,current.getTimestamp());
    cellScanner.advance();
    current=cellScanner.current();
    assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),row1,0,row1.length));
    assertEquals(126L,current.getTimestamp());
    cellScanner.advance();
    current=cellScanner.current();
    assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),row1,0,row1.length));
    assertEquals(124L,current.getTimestamp());
    cellScanner.advance();
    current=cellScanner.current();
    assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),row1,0,row1.length));
    assertEquals(123L,current.getTimestamp());
    cellScanner=next[1].cellScanner();
    cellScanner.advance();
    current=cellScanner.current();
    assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),row2,0,row2.length));
  }
 }
