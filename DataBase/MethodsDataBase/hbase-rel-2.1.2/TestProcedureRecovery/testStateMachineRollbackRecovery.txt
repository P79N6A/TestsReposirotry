@Test public void testStateMachineRollbackRecovery() throws Exception {
  ProcedureTestingUtility.setToggleKillBeforeStoreUpdate(procExecutor,true);
  ProcedureTestingUtility.setKillBeforeStoreUpdate(procExecutor,true);
  Procedure proc=new TestStateMachineProcedure();
  long procId=ProcedureTestingUtility.submitAndWait(procExecutor,proc);
  ProcedureTestingUtility.assertProcNotYetCompleted(procExecutor,procId);
  assertFalse(procExecutor.isRunning());
  restart();
  waitProcedure(procId);
  ProcedureTestingUtility.assertProcNotYetCompleted(procExecutor,procId);
  assertFalse(procExecutor.isRunning());
  restart();
  waitProcedure(procId);
  ProcedureTestingUtility.assertProcNotYetCompleted(procExecutor,procId);
  assertFalse(procExecutor.isRunning());
  procSleepInterval=2500;
  restart();
  assertTrue(procExecutor.abort(procId));
  waitProcedure(procId);
  ProcedureTestingUtility.assertProcNotYetCompleted(procExecutor,procId);
  assertFalse(procExecutor.isRunning());
  restart();
  waitProcedure(procId);
  assertFalse(procExecutor.isRunning());
  ProcedureTestingUtility.assertProcNotYetCompleted(procExecutor,procId);
  restart();
  waitProcedure(procId);
  assertFalse(procExecutor.isRunning());
  ProcedureTestingUtility.assertProcNotYetCompleted(procExecutor,procId);
  restart();
  waitProcedure(procId);
  assertTrue(procExecutor.isRunning());
  Procedure<?> result=procExecutor.getResult(procId);
  ProcedureTestingUtility.assertIsAbortException(result);
}
