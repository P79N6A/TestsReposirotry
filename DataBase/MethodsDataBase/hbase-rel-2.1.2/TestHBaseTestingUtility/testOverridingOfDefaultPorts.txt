@Test public void testOverridingOfDefaultPorts() throws Exception {
  Configuration defaultConfig=HBaseConfiguration.create();
  defaultConfig.setInt(HConstants.MASTER_INFO_PORT,HConstants.DEFAULT_MASTER_INFOPORT);
  defaultConfig.setInt(HConstants.REGIONSERVER_INFO_PORT,HConstants.DEFAULT_REGIONSERVER_INFOPORT);
  HBaseTestingUtility htu=new HBaseTestingUtility(defaultConfig);
  try {
    MiniHBaseCluster defaultCluster=htu.startMiniCluster();
    assertNotEquals(HConstants.DEFAULT_MASTER_INFOPORT,defaultCluster.getConfiguration().getInt(HConstants.MASTER_INFO_PORT,0));
    assertNotEquals(HConstants.DEFAULT_REGIONSERVER_INFOPORT,defaultCluster.getConfiguration().getInt(HConstants.REGIONSERVER_INFO_PORT,0));
  }
  finally {
    htu.shutdownMiniCluster();
  }
  Configuration altConfig=HBaseConfiguration.create();
  final int nonDefaultMasterInfoPort=3333;
  final int nonDefaultRegionServerPort=4444;
  altConfig.setInt(HConstants.MASTER_INFO_PORT,nonDefaultMasterInfoPort);
  altConfig.setInt(HConstants.REGIONSERVER_INFO_PORT,nonDefaultRegionServerPort);
  htu=new HBaseTestingUtility(altConfig);
  try {
    MiniHBaseCluster customCluster=htu.startMiniCluster();
    assertEquals(nonDefaultMasterInfoPort,customCluster.getConfiguration().getInt(HConstants.MASTER_INFO_PORT,0));
    assertEquals(nonDefaultRegionServerPort,customCluster.getConfiguration().getInt(HConstants.REGIONSERVER_INFO_PORT,0));
  }
  finally {
    htu.shutdownMiniCluster();
  }
}
