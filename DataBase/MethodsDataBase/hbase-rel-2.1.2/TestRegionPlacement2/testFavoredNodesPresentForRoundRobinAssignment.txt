@Test public void testFavoredNodesPresentForRoundRobinAssignment() throws HBaseIOException {
  LoadBalancer balancer=LoadBalancerFactory.getLoadBalancer(TEST_UTIL.getConfiguration());
  balancer.setMasterServices(TEST_UTIL.getMiniHBaseCluster().getMaster());
  balancer.initialize();
  List<ServerName> servers=new ArrayList<>();
  for (int i=0; i < SLAVES; i++) {
    ServerName server=TEST_UTIL.getMiniHBaseCluster().getRegionServer(i).getServerName();
    servers.add(server);
  }
  List<RegionInfo> regions=new ArrayList<>(1);
  RegionInfo region=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).build();
  regions.add(region);
  Map<ServerName,List<RegionInfo>> assignmentMap=balancer.roundRobinAssignment(regions,servers);
  Set<ServerName> serverBefore=assignmentMap.keySet();
  List<ServerName> favoredNodesBefore=((FavoredNodeLoadBalancer)balancer).getFavoredNodes(region);
  assertTrue(favoredNodesBefore.size() == FavoredNodeAssignmentHelper.FAVORED_NODES_NUM);
  assertTrue(ServerName.isSameAddress(serverBefore.iterator().next(),favoredNodesBefore.get(PRIMARY)));
  List<ServerName> removedServers=removeMatchingServers(serverBefore,servers);
  assignmentMap=balancer.roundRobinAssignment(regions,servers);
  List<ServerName> favoredNodesAfter=((FavoredNodeLoadBalancer)balancer).getFavoredNodes(region);
  assertTrue(favoredNodesAfter.size() == FavoredNodeAssignmentHelper.FAVORED_NODES_NUM);
  assertTrue(favoredNodesAfter.containsAll(favoredNodesBefore));
  Set<ServerName> serverAfter=assignmentMap.keySet();
  assertTrue(ServerName.isSameAddress(serverAfter.iterator().next(),favoredNodesBefore.get(SECONDARY)) || ServerName.isSameAddress(serverAfter.iterator().next(),favoredNodesBefore.get(TERTIARY)));
  servers.addAll(removedServers);
  assignmentMap=balancer.roundRobinAssignment(regions,servers);
  Set<ServerName> serverWithPrimary=assignmentMap.keySet();
  assertTrue(serverBefore.containsAll(serverWithPrimary));
  removeMatchingServers(favoredNodesAfter,servers);
  assignmentMap=balancer.roundRobinAssignment(regions,servers);
  List<ServerName> favoredNodesNow=((FavoredNodeLoadBalancer)balancer).getFavoredNodes(region);
  assertTrue(favoredNodesNow.size() == FavoredNodeAssignmentHelper.FAVORED_NODES_NUM);
  assertTrue(!favoredNodesNow.contains(favoredNodesAfter.get(PRIMARY)) && !favoredNodesNow.contains(favoredNodesAfter.get(SECONDARY)) && !favoredNodesNow.contains(favoredNodesAfter.get(TERTIARY)));
}
