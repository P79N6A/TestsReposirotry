@Test public void testFavoredNodesPresentForRandomAssignment() throws HBaseIOException {
  LoadBalancer balancer=LoadBalancerFactory.getLoadBalancer(TEST_UTIL.getConfiguration());
  balancer.setMasterServices(TEST_UTIL.getMiniHBaseCluster().getMaster());
  balancer.initialize();
  List<ServerName> servers=new ArrayList<>();
  for (int i=0; i < SLAVES; i++) {
    ServerName server=TEST_UTIL.getMiniHBaseCluster().getRegionServer(i).getServerName();
    servers.add(server);
  }
  List<RegionInfo> regions=new ArrayList<>(1);
  RegionInfo region=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).build();
  regions.add(region);
  ServerName serverBefore=balancer.randomAssignment(region,servers);
  List<ServerName> favoredNodesBefore=((FavoredNodeLoadBalancer)balancer).getFavoredNodes(region);
  assertTrue(favoredNodesBefore.size() == FavoredNodeAssignmentHelper.FAVORED_NODES_NUM);
  assertTrue(ServerName.isSameAddress(serverBefore,favoredNodesBefore.get(PRIMARY)));
  removeMatchingServers(serverBefore,servers);
  ServerName serverAfter=balancer.randomAssignment(region,servers);
  List<ServerName> favoredNodesAfter=((FavoredNodeLoadBalancer)balancer).getFavoredNodes(region);
  assertTrue(favoredNodesAfter.size() == FavoredNodeAssignmentHelper.FAVORED_NODES_NUM);
  assertTrue(favoredNodesAfter.containsAll(favoredNodesBefore));
  assertTrue(ServerName.isSameAddress(serverAfter,favoredNodesBefore.get(SECONDARY)) || ServerName.isSameAddress(serverAfter,favoredNodesBefore.get(TERTIARY)));
  removeMatchingServers(favoredNodesAfter,servers);
  balancer.randomAssignment(region,servers);
  List<ServerName> favoredNodesNow=((FavoredNodeLoadBalancer)balancer).getFavoredNodes(region);
  assertTrue(favoredNodesNow.size() == FavoredNodeAssignmentHelper.FAVORED_NODES_NUM);
  assertTrue(!favoredNodesNow.contains(favoredNodesAfter.get(PRIMARY)) && !favoredNodesNow.contains(favoredNodesAfter.get(SECONDARY)) && !favoredNodesNow.contains(favoredNodesAfter.get(TERTIARY)));
}
