@Test public void test() throws InterruptedException, ExecutionException, IOException, TimeoutException {
  AsyncTable<?> table=tableGetter.apply(TABLE_NAME);
  table.putAll(IntStream.range(0,COUNT).mapToObj(i -> new Put(getRow(i)).addColumn(FAMILY,CQ,Bytes.toBytes(i))).collect(Collectors.toList())).get();
  List<Result> results=table.getAll(IntStream.range(0,COUNT).mapToObj(i -> Arrays.asList(new Get(getRow(i)),new Get(Arrays.copyOf(getRow(i),4)))).flatMap(l -> l.stream()).collect(Collectors.toList())).get();
  assertEquals(2 * COUNT,results.size());
  for (int i=0; i < COUNT; i++) {
    assertEquals(i,Bytes.toInt(results.get(2 * i).getValue(FAMILY,CQ)));
    assertTrue(results.get(2 * i + 1).isEmpty());
  }
  Admin admin=TEST_UTIL.getAdmin();
  admin.flush(TABLE_NAME);
  List<Future<?>> splitFutures=TEST_UTIL.getHBaseCluster().getRegions(TABLE_NAME).stream().map(r -> {
    byte[] startKey=r.getRegionInfo().getStartKey();
    int number=startKey.length == 0 ? 55 : Integer.parseInt(Bytes.toString(startKey));
    byte[] splitPoint=Bytes.toBytes(String.format("%03d",number + 55));
    try {
      return admin.splitRegionAsync(r.getRegionInfo().getRegionName(),splitPoint);
    }
 catch (    IOException e) {
      throw new UncheckedIOException(e);
    }
  }
).collect(Collectors.toList());
  for (  Future<?> future : splitFutures) {
    future.get(30,TimeUnit.SECONDS);
  }
  table.deleteAll(IntStream.range(0,COUNT).mapToObj(i -> new Delete(getRow(i))).collect(Collectors.toList())).get();
  results=table.getAll(IntStream.range(0,COUNT).mapToObj(i -> new Get(getRow(i))).collect(Collectors.toList())).get();
  assertEquals(COUNT,results.size());
  results.forEach(r -> assertTrue(r.isEmpty()));
}
