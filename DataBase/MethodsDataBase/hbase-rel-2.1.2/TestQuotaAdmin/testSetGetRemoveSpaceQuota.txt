@Test public void testSetGetRemoveSpaceQuota() throws Exception {
  Admin admin=TEST_UTIL.getAdmin();
  final TableName tn=TableName.valueOf("sq_table1");
  final long sizeLimit=1024L * 1024L * 1024L* 1024L* 5L;
  final SpaceViolationPolicy violationPolicy=SpaceViolationPolicy.NO_WRITES;
  QuotaSettings settings=QuotaSettingsFactory.limitTableSpace(tn,sizeLimit,violationPolicy);
  admin.setQuota(settings);
  try (Table quotaTable=TEST_UTIL.getConnection().getTable(QuotaTableUtil.QUOTA_TABLE_NAME)){
    ResultScanner scanner=quotaTable.getScanner(new Scan());
    try {
      Result r=Iterables.getOnlyElement(scanner);
      CellScanner cells=r.cellScanner();
      assertTrue("Expected to find a cell",cells.advance());
      assertSpaceQuota(sizeLimit,violationPolicy,cells.current());
    }
  finally {
      scanner.close();
    }
  }
   QuotaRetriever scanner=QuotaRetriever.open(admin.getConfiguration());
  try {
    assertSpaceQuota(sizeLimit,violationPolicy,Iterables.getOnlyElement(scanner));
  }
  finally {
    scanner.close();
  }
  QuotaSettings removeQuota=QuotaSettingsFactory.removeTableSpaceLimit(tn);
  admin.setQuota(removeQuota);
  try (Table quotaTable=TEST_UTIL.getConnection().getTable(QuotaTableUtil.QUOTA_TABLE_NAME)){
    ResultScanner rs=quotaTable.getScanner(new Scan());
    try {
      assertNull("Did not expect to find a quota entry",rs.next());
    }
  finally {
      rs.close();
    }
  }
   scanner=QuotaRetriever.open(admin.getConfiguration());
  try {
    assertNull("Did not expect to find a quota entry",scanner.next());
  }
  finally {
    scanner.close();
  }
}
