@Test public void test() throws IOException, InterruptedException {
  int rpcHeaderLen=HConstants.RPC_HEADER.length;
  byte[] preamble=new byte[rpcHeaderLen + 2];
  System.arraycopy(HConstants.RPC_HEADER,0,preamble,0,rpcHeaderLen);
  preamble[rpcHeaderLen]=HConstants.RPC_CURRENT_VERSION;
  preamble[rpcHeaderLen + 1]=AuthMethod.SIMPLE.code;
  socket.getOutputStream().write(preamble,0,rpcHeaderLen + 1);
  socket.getOutputStream().flush();
  Thread.sleep(5000);
  socket.getOutputStream().write(preamble,rpcHeaderLen + 1,1);
  socket.getOutputStream().flush();
  ConnectionHeader header=ConnectionHeader.newBuilder().setServiceName(TestRpcServiceProtos.TestProtobufRpcProto.getDescriptor().getFullName()).setVersionInfo(ProtobufUtil.getVersionInfo()).build();
  DataOutputStream dos=new DataOutputStream(socket.getOutputStream());
  dos.writeInt(header.getSerializedSize());
  header.writeTo(dos);
  dos.flush();
  int callId=10;
  Call call=new Call(callId,TestProtobufRpcProto.getDescriptor().findMethodByName("ping"),EmptyRequestProto.getDefaultInstance(),null,EmptyResponseProto.getDefaultInstance(),1000,HConstants.NORMAL_QOS,null,MetricsConnection.newCallStats());
  RequestHeader requestHeader=IPCUtil.buildRequestHeader(call,null);
  dos.writeInt(IPCUtil.getTotalSizeWhenWrittenDelimited(requestHeader,call.param));
  requestHeader.writeDelimitedTo(dos);
  call.param.writeDelimitedTo(dos);
  dos.flush();
  DataInputStream dis=new DataInputStream(new BufferedInputStream(socket.getInputStream()));
  int size=dis.readInt();
  ResponseHeader responseHeader=ResponseHeader.parseDelimitedFrom(dis);
  assertEquals(callId,responseHeader.getCallId());
  EmptyResponseProto.Builder builder=EmptyResponseProto.newBuilder();
  builder.mergeDelimitedFrom(dis);
  assertEquals(size,IPCUtil.getTotalSizeWhenWrittenDelimited(responseHeader,builder.build()));
}
