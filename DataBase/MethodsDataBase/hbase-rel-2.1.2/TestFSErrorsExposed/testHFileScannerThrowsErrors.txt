/** 
 * Injects errors into the pread calls of an on-disk file, and makes sure those bubble up to the HFile scanner
 */
@Test public void testHFileScannerThrowsErrors() throws IOException {
  Path hfilePath=new Path(new Path(util.getDataTestDir("internalScannerExposesErrors"),"regionname"),"familyname");
  HFileSystem hfs=(HFileSystem)util.getTestFileSystem();
  FaultyFileSystem faultyfs=new FaultyFileSystem(hfs.getBackingFs());
  FileSystem fs=new HFileSystem(faultyfs);
  CacheConfig cacheConf=new CacheConfig(util.getConfiguration());
  HFileContext meta=new HFileContextBuilder().withBlockSize(2 * 1024).build();
  StoreFileWriter writer=new StoreFileWriter.Builder(util.getConfiguration(),cacheConf,hfs).withOutputDir(hfilePath).withFileContext(meta).build();
  TestHStoreFile.writeStoreFile(writer,Bytes.toBytes("cf"),Bytes.toBytes("qual"));
  HStoreFile sf=new HStoreFile(fs,writer.getPath(),util.getConfiguration(),cacheConf,BloomType.NONE,true);
  sf.initReader();
  StoreFileReader reader=sf.getReader();
  HFileScanner scanner=reader.getScanner(false,true);
  FaultyInputStream inStream=faultyfs.inStreams.get(0).get();
  assertNotNull(inStream);
  scanner.seekTo();
  assertTrue(scanner.next());
  faultyfs.startFaults();
  try {
    int scanned=0;
    while (scanner.next()) {
      scanned++;
    }
    fail("Scanner didn't throw after faults injected");
  }
 catch (  IOException ioe) {
    LOG.info("Got expected exception",ioe);
    assertTrue(ioe.getMessage().contains("Fault"));
  }
  reader.close(true);
}
