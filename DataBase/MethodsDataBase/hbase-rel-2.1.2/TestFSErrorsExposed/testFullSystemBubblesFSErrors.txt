/** 
 * Cluster test which starts a region server with a region, then removes the data from HDFS underneath it, and ensures that errors are bubbled to the client.
 */
@Test public void testFullSystemBubblesFSErrors() throws Exception {
  Assume.assumeTrue(!util.isReadShortCircuitOn());
  try {
    util.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,1);
    util.getConfiguration().setInt(HConstants.HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD,90000);
    util.getConfiguration().setInt("hbase.lease.recovery.timeout",10000);
    util.getConfiguration().setInt("hbase.lease.recovery.dfs.timeout",1000);
    util.startMiniCluster(1);
    final TableName tableName=TableName.valueOf(name.getMethodName());
    byte[] fam=Bytes.toBytes("fam");
    Admin admin=util.getAdmin();
    HTableDescriptor desc=new HTableDescriptor(tableName);
    desc.addFamily(new HColumnDescriptor(fam).setMaxVersions(1).setBlockCacheEnabled(false));
    admin.createTable(desc);
    try (Table table=util.getConnection().getTable(tableName)){
      util.loadTable(table,fam,false);
      util.flush();
      util.countRows(table);
      util.getDFSCluster().shutdownDataNodes();
      try {
        util.countRows(table);
        fail("Did not fail to count after removing data");
      }
 catch (      Exception e) {
        LOG.info("Got expected error",e);
        assertTrue(e.getMessage().contains("Could not seek"));
      }
    }
     util.getDFSCluster().restartDataNodes();
  }
  finally {
    MiniHBaseCluster cluster=util.getMiniHBaseCluster();
    if (cluster != null)     cluster.killAll();
    util.shutdownMiniCluster();
  }
}
