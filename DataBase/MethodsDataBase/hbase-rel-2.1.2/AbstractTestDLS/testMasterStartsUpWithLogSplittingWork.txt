@Test public void testMasterStartsUpWithLogSplittingWork() throws Exception {
  conf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART,NUM_RS - 1);
  startCluster(NUM_RS);
  int numRegionsToCreate=40;
  int numLogLines=1000;
  master.balanceSwitch(false);
  try (ZKWatcher zkw=new ZKWatcher(conf,"table-creation",null);Table ht=installTable(zkw,numRegionsToCreate)){
    HRegionServer hrs=findRSToKill(false);
    List<RegionInfo> regions=ProtobufUtil.getOnlineRegions(hrs.getRSRpcServices());
    makeWAL(hrs,regions,numLogLines,100);
    abortMaster(cluster);
    LOG.info("Aborting region server: " + hrs.getServerName());
    hrs.abort("testing");
    TEST_UTIL.waitFor(120000,200,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return cluster.getLiveRegionServerThreads().size() <= NUM_RS - 1;
      }
    }
);
    Thread.sleep(2000);
    LOG.info("Current Open Regions:" + HBaseTestingUtility.getAllOnlineRegions(cluster).size());
    TEST_UTIL.waitFor(120000,200,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return (HBaseTestingUtility.getAllOnlineRegions(cluster).size() >= (numRegionsToCreate + 1));
      }
    }
);
    LOG.info("Current Open Regions After Master Node Starts Up:" + HBaseTestingUtility.getAllOnlineRegions(cluster).size());
    assertEquals(numLogLines,TEST_UTIL.countRows(ht));
  }
 }
