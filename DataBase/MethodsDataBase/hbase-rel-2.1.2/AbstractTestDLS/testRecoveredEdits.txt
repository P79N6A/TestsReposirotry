@Test public void testRecoveredEdits() throws Exception {
  conf.setLong("hbase.regionserver.hlog.blocksize",30 * 1024);
  startCluster(NUM_RS);
  int numLogLines=10000;
  SplitLogManager slm=master.getMasterWalManager().getSplitLogManager();
  master.balanceSwitch(false);
  FileSystem fs=master.getMasterFileSystem().getFileSystem();
  List<RegionServerThread> rsts=cluster.getLiveRegionServerThreads();
  Path rootdir=FSUtils.getRootDir(conf);
  int numRegions=50;
  try (ZKWatcher zkw=new ZKWatcher(conf,"table-creation",null);Table t=installTable(zkw,numRegions)){
    TableName table=t.getName();
    List<RegionInfo> regions=null;
    HRegionServer hrs=null;
    for (int i=0; i < NUM_RS; i++) {
      hrs=rsts.get(i).getRegionServer();
      regions=ProtobufUtil.getOnlineRegions(hrs.getRSRpcServices());
      if (regions.size() >= numRegions / NUM_RS) {
        break;
      }
    }
    Path logDir=new Path(rootdir,AbstractFSWALProvider.getWALDirectoryName(hrs.getServerName().toString()));
    LOG.info("#regions = " + regions.size());
    Iterator<RegionInfo> it=regions.iterator();
    while (it.hasNext()) {
      RegionInfo region=it.next();
      if (region.getTable().getNamespaceAsString().equals(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR)) {
        it.remove();
      }
    }
    makeWAL(hrs,regions,numLogLines,100);
    slm.splitLogDistributed(logDir);
    int count=0;
    for (    RegionInfo hri : regions) {
      Path tdir=FSUtils.getWALTableDir(conf,table);
      @SuppressWarnings("deprecation") Path editsdir=WALSplitter.getRegionDirRecoveredEditsDir(FSUtils.getWALRegionDir(conf,tableName,hri.getEncodedName()));
      LOG.debug("checking edits dir " + editsdir);
      FileStatus[] files=fs.listStatus(editsdir,new PathFilter(){
        @Override public boolean accept(        Path p){
          if (WALSplitter.isSequenceIdFile(p)) {
            return false;
          }
          return true;
        }
      }
);
      assertTrue("edits dir should have more than a single file in it. instead has " + files.length,files.length > 1);
      for (int i=0; i < files.length; i++) {
        int c=countWAL(files[i].getPath(),fs,conf);
        count+=c;
      }
      LOG.info(count + " edits in " + files.length+ " recovered edits files.");
    }
    assertFalse(fs.exists(logDir));
    assertEquals(numLogLines,count);
  }
 }
