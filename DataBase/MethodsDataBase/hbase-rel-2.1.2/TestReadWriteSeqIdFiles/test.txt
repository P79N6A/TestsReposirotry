@Test public void test() throws IOException {
  WALSplitter.writeRegionSequenceIdFile(walFS,REGION_DIR,1000L);
  assertEquals(1000L,WALSplitter.getMaxRegionSequenceId(walFS,REGION_DIR));
  WALSplitter.writeRegionSequenceIdFile(walFS,REGION_DIR,2000L);
  assertEquals(2000L,WALSplitter.getMaxRegionSequenceId(walFS,REGION_DIR));
  try {
    WALSplitter.writeRegionSequenceIdFile(walFS,REGION_DIR,1500L);
  }
 catch (  IOException e) {
    LOG.info("Expected error",e);
  }
  Path editsdir=WALSplitter.getRegionDirRecoveredEditsDir(REGION_DIR);
  FileStatus[] files=FSUtils.listStatus(walFS,editsdir,new PathFilter(){
    @Override public boolean accept(    Path p){
      return WALSplitter.isSequenceIdFile(p);
    }
  }
);
  assertEquals(1,files.length);
  NavigableSet<Path> recoveredEdits=WALSplitter.getSplitEditFilesSorted(walFS,REGION_DIR);
  assertEquals(0,recoveredEdits.size());
}
