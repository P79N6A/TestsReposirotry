@Test public void testFsckWithEncryption() throws Exception {
  Table table=TEST_UTIL.getConnection().getTable(htd.getTableName());
  try {
    byte[] values={'A','B','C','D'};
    for (int i=0; i < values.length; i++) {
      for (int j=0; j < values.length; j++) {
        Put put=new Put(new byte[]{values[i],values[j]});
        put.addColumn(Bytes.toBytes("cf"),new byte[]{},new byte[]{values[i],values[j]});
        table.put(put);
      }
    }
  }
  finally {
    table.close();
  }
  TEST_UTIL.getAdmin().flush(htd.getTableName());
  final List<Path> paths=findStorefilePaths(htd.getTableName());
  assertTrue(paths.size() > 0);
  for (  Path path : paths) {
    assertTrue("Store file " + path + " has incorrect key",Bytes.equals(cfKey.getEncoded(),extractHFileKey(path)));
  }
  HBaseFsck res=HbckTestingUtil.doHFileQuarantine(conf,htd.getTableName());
  assertEquals(0,res.getRetCode());
  HFileCorruptionChecker hfcc=res.getHFilecorruptionChecker();
  assertEquals(0,hfcc.getCorrupted().size());
  assertEquals(0,hfcc.getFailures().size());
  assertEquals(0,hfcc.getQuarantined().size());
  assertEquals(0,hfcc.getMissing().size());
}
