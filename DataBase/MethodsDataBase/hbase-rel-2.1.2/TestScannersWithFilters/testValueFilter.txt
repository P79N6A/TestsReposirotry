@Test public void testValueFilter() throws Exception {
  long expectedRows=numRows / 2;
  long expectedKeys=colsPerRow;
  Filter f=new ValueFilter(CompareOperator.EQUAL,new BinaryComparator(Bytes.toBytes("testValueOne")));
  Scan s=new Scan();
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  expectedRows=numRows / 2;
  expectedKeys=colsPerRow;
  f=new ValueFilter(CompareOperator.EQUAL,new BinaryComparator(Bytes.toBytes("testValueTwo")));
  s=new Scan();
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  expectedRows=numRows;
  expectedKeys=colsPerRow;
  f=new ValueFilter(CompareOperator.EQUAL,new RegexStringComparator("testValue((One)|(Two))"));
  s=new Scan();
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  expectedRows=numRows / 2;
  expectedKeys=colsPerRow;
  f=new ValueFilter(CompareOperator.LESS,new BinaryComparator(Bytes.toBytes("testValueTwo")));
  s=new Scan();
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  expectedRows=numRows;
  expectedKeys=colsPerRow;
  f=new ValueFilter(CompareOperator.LESS_OR_EQUAL,new BinaryComparator(Bytes.toBytes("testValueTwo")));
  s=new Scan();
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  expectedRows=numRows / 2;
  expectedKeys=colsPerRow;
  f=new ValueFilter(CompareOperator.LESS_OR_EQUAL,new BinaryComparator(Bytes.toBytes("testValueOne")));
  s=new Scan();
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  expectedRows=numRows / 2;
  expectedKeys=colsPerRow;
  f=new ValueFilter(CompareOperator.NOT_EQUAL,new BinaryComparator(Bytes.toBytes("testValueOne")));
  s=new Scan();
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  expectedRows=numRows;
  expectedKeys=colsPerRow;
  f=new ValueFilter(CompareOperator.GREATER_OR_EQUAL,new BinaryComparator(Bytes.toBytes("testValueOne")));
  s=new Scan();
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  expectedRows=numRows / 2;
  expectedKeys=colsPerRow;
  f=new ValueFilter(CompareOperator.GREATER,new BinaryComparator(Bytes.toBytes("testValueOne")));
  s=new Scan();
  s.setFilter(f);
  verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
  f=new ValueFilter(CompareOperator.NOT_EQUAL,new BinaryComparator(Bytes.toBytes("testValueOne")));
  s=new Scan();
  s.setFilter(f);
  KeyValue[] kvs={new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1])};
  verifyScanFull(s,kvs);
}
