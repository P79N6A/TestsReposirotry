/** 
 * This test tests 1, merging region not online; 2, merging same two regions; 3, merging unknown regions. They are in one test case so that we don't have to create many tables, and these tests are simple.
 */
@Test public void testMerge() throws Exception {
  LOG.info("Starting " + name.getMethodName());
  final TableName tableName=TableName.valueOf(name.getMethodName());
  final Admin admin=TEST_UTIL.getAdmin();
  final int syncWaitTimeout=10 * 60000;
  try {
    Table table=createTableAndLoadData(MASTER,tableName);
    AssignmentManager am=MASTER.getAssignmentManager();
    List<RegionInfo> regions=am.getRegionStates().getRegionsOfTable(tableName);
    RegionInfo a=regions.get(0);
    RegionInfo b=regions.get(1);
    am.unassign(b);
    am.offlineRegion(b);
    try {
      admin.mergeRegionsAsync(a.getEncodedNameAsBytes(),b.getEncodedNameAsBytes(),false).get(syncWaitTimeout,TimeUnit.MILLISECONDS);
      fail("Offline regions should not be able to merge");
    }
 catch (    DoNotRetryRegionException ie) {
      System.out.println(ie);
      assertTrue(ie instanceof MergeRegionException);
    }
    try {
      admin.mergeRegionsAsync(b.getEncodedNameAsBytes(),b.getEncodedNameAsBytes(),true);
      fail("A region should not be able to merge with itself, even forcifully");
    }
 catch (    IOException ie) {
      assertTrue("Exception should mention regions not online",StringUtils.stringifyException(ie).contains("region to itself") && ie instanceof MergeRegionException);
    }
    try {
      admin.mergeRegionsAsync(Bytes.toBytes("-f1"),Bytes.toBytes("-f2"),true);
      fail("Unknown region could not be merged");
    }
 catch (    IOException ie) {
      assertTrue("UnknownRegionException should be thrown",ie instanceof UnknownRegionException);
    }
    table.close();
  }
  finally {
    TEST_UTIL.deleteTable(tableName);
  }
}
