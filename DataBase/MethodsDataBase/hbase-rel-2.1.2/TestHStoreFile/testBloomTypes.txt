@Test public void testBloomTypes() throws Exception {
  float err=(float)0.01;
  FileSystem fs=FileSystem.getLocal(conf);
  conf.setFloat(BloomFilterFactory.IO_STOREFILE_BLOOM_ERROR_RATE,err);
  conf.setBoolean(BloomFilterFactory.IO_STOREFILE_BLOOM_ENABLED,true);
  int rowCount=50;
  int colCount=10;
  int versions=2;
  BloomType[] bt={BloomType.ROWCOL,BloomType.ROW};
  int[] expKeys={rowCount * colCount,rowCount};
  float[] expErr={2 * rowCount * colCount* err,2 * rowCount * 2* colCount* err};
  for (  int x : new int[]{0,1}) {
    Path f=new Path(ROOT_DIR,getName() + x);
    HFileContext meta=new HFileContextBuilder().withBlockSize(BLOCKSIZE_SMALL).withChecksumType(CKTYPE).withBytesPerCheckSum(CKBYTES).build();
    StoreFileWriter writer=new StoreFileWriter.Builder(conf,cacheConf,this.fs).withFilePath(f).withBloomType(bt[x]).withMaxKeyCount(expKeys[x]).withFileContext(meta).build();
    long now=System.currentTimeMillis();
    for (int i=0; i < rowCount * 2; i+=2) {
      for (int j=0; j < colCount * 2; j+=2) {
        String row=String.format(localFormatter,i);
        String col=String.format(localFormatter,j);
        for (int k=0; k < versions; ++k) {
          KeyValue kv=new KeyValue(Bytes.toBytes(row),Bytes.toBytes("family"),Bytes.toBytes("col" + col),now - k,Bytes.toBytes(-1L));
          writer.append(kv);
        }
      }
    }
    writer.close();
    StoreFileReader reader=new StoreFileReader(fs,f,cacheConf,true,new AtomicInteger(0),true,conf);
    reader.loadFileInfo();
    reader.loadBloomfilter();
    StoreFileScanner scanner=getStoreFileScanner(reader,false,false);
    assertEquals(expKeys[x],reader.generalBloomFilter.getKeyCount());
    HStore store=mock(HStore.class);
    when(store.getColumnFamilyDescriptor()).thenReturn(ColumnFamilyDescriptorBuilder.of("family"));
    int falsePos=0;
    int falseNeg=0;
    for (int i=0; i < rowCount * 2; ++i) {
      for (int j=0; j < colCount * 2; ++j) {
        String row=String.format(localFormatter,i);
        String col=String.format(localFormatter,j);
        TreeSet<byte[]> columns=new TreeSet<>(Bytes.BYTES_COMPARATOR);
        columns.add(Bytes.toBytes("col" + col));
        Scan scan=new Scan(Bytes.toBytes(row),Bytes.toBytes(row));
        scan.addColumn(Bytes.toBytes("family"),Bytes.toBytes(("col" + col)));
        boolean exists=scanner.shouldUseScanner(scan,store,Long.MIN_VALUE);
        boolean shouldRowExist=i % 2 == 0;
        boolean shouldColExist=j % 2 == 0;
        shouldColExist=shouldColExist || bt[x] == BloomType.ROW;
        if (shouldRowExist && shouldColExist) {
          if (!exists)           falseNeg++;
        }
 else {
          if (exists)           falsePos++;
        }
      }
    }
    reader.close(true);
    fs.delete(f,true);
    System.out.println(bt[x].toString());
    System.out.println("  False negatives: " + falseNeg);
    System.out.println("  False positives: " + falsePos);
    assertEquals(0,falseNeg);
    assertTrue(falsePos < 2 * expErr[x]);
  }
}
