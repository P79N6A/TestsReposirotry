@Test public void testReportExpiration() throws Exception {
  Configuration conf=TEST_UTIL.getConfiguration();
  conf.setInt(FileSystemUtilizationChore.FS_UTILIZATION_CHORE_PERIOD_KEY,25000);
  conf.setInt(QuotaObserverChore.REGION_REPORT_RETENTION_DURATION_KEY,5000);
  TEST_UTIL.startMiniCluster(1);
  final String FAM1="f1";
  final HMaster master=TEST_UTIL.getMiniHBaseCluster().getMaster();
  while (master.getMasterQuotaManager() == null) {
    LOG.debug("MasterQuotaManager is null, waiting...");
    Thread.sleep(500);
  }
  final MasterQuotaManager quotaManager=master.getMasterQuotaManager();
  final TableName tn=TableName.valueOf("reportExpiration");
  HTableDescriptor tableDesc=new HTableDescriptor(tn);
  tableDesc.addFamily(new HColumnDescriptor(FAM1));
  TEST_UTIL.getAdmin().createTable(tableDesc);
  assertEquals(0,getRegionReportsForTable(quotaManager.snapshotRegionSizes(),tn));
  final long sizeLimit=100L * SpaceQuotaHelperForTests.ONE_MEGABYTE;
  final SpaceViolationPolicy violationPolicy=SpaceViolationPolicy.NO_INSERTS;
  QuotaSettings settings=QuotaSettingsFactory.limitTableSpace(tn,sizeLimit,violationPolicy);
  TEST_UTIL.getAdmin().setQuota(settings);
  Waiter.waitFor(TEST_UTIL.getConfiguration(),45000,1000,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      int numReports=getRegionReportsForTable(quotaManager.snapshotRegionSizes(),tn);
      LOG.debug("Saw " + numReports + " reports for "+ tn+ " while waiting for 1");
      return numReports == 1;
    }
  }
);
  Waiter.waitFor(TEST_UTIL.getConfiguration(),15000,1000,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      int numReports=getRegionReportsForTable(quotaManager.snapshotRegionSizes(),tn);
      LOG.debug("Saw " + numReports + " reports for "+ tn+ " while waiting for none");
      return numReports == 0;
    }
  }
);
}
