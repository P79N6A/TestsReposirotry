@Test public void testKeepRegionLoad() throws Exception {
  ServerName sn=ServerName.valueOf("test:8080",100);
  int numClusterStatusToAdd=20000;
  for (int i=0; i < numClusterStatusToAdd; i++) {
    ServerMetrics sl=mock(ServerMetrics.class);
    RegionMetrics rl=mock(RegionMetrics.class);
    when(rl.getReadRequestCount()).thenReturn(0L);
    when(rl.getWriteRequestCount()).thenReturn(0L);
    when(rl.getMemStoreSize()).thenReturn(Size.ZERO);
    when(rl.getStoreFileSize()).thenReturn(new Size(i,Size.Unit.MEGABYTE));
    Map<byte[],RegionMetrics> regionLoadMap=new TreeMap<>(Bytes.BYTES_COMPARATOR);
    regionLoadMap.put(Bytes.toBytes(REGION_KEY),rl);
    when(sl.getRegionMetrics()).thenReturn(regionLoadMap);
    ClusterMetrics clusterStatus=mock(ClusterMetrics.class);
    Map<ServerName,ServerMetrics> serverMetricsMap=new TreeMap<>();
    serverMetricsMap.put(sn,sl);
    when(clusterStatus.getLiveServerMetrics()).thenReturn(serverMetricsMap);
    loadBalancer.setClusterMetrics(clusterStatus);
  }
  String regionNameAsString=RegionInfo.getRegionNameAsString(Bytes.toBytes(REGION_KEY));
  assertTrue(loadBalancer.loads.get(regionNameAsString) != null);
  assertTrue(loadBalancer.loads.get(regionNameAsString).size() == 15);
  Queue<BalancerRegionLoad> loads=loadBalancer.loads.get(regionNameAsString);
  int i=0;
  while (loads.size() > 0) {
    BalancerRegionLoad rl=loads.remove();
    assertEquals(i + (numClusterStatusToAdd - 15),rl.getStorefileSizeMB());
    i++;
  }
}
