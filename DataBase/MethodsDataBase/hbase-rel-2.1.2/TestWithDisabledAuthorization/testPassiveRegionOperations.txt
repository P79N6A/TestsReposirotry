/** 
 * Test region observer 
 */
@Test public void testPassiveRegionOperations() throws Exception {
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preOpen(ObserverContextImpl.createAndPrepare(RCP_ENV));
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preFlush(ObserverContextImpl.createAndPrepare(RCP_ENV),FlushLifeCycleTracker.DUMMY);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      List<Cell> cells=Lists.newArrayList();
      ACCESS_CONTROLLER.preGetOp(ObserverContextImpl.createAndPrepare(RCP_ENV),new Get(TEST_ROW),cells);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preExists(ObserverContextImpl.createAndPrepare(RCP_ENV),new Get(TEST_ROW),true);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.prePut(ObserverContextImpl.createAndPrepare(RCP_ENV),new Put(TEST_ROW),new WALEdit(),Durability.USE_DEFAULT);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preDelete(ObserverContextImpl.createAndPrepare(RCP_ENV),new Delete(TEST_ROW),new WALEdit(),Durability.USE_DEFAULT);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preBatchMutate(ObserverContextImpl.createAndPrepare(RCP_ENV),new MiniBatchOperationInProgress<>(null,null,null,0,0,0));
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preCheckAndPut(ObserverContextImpl.createAndPrepare(RCP_ENV),TEST_ROW,TEST_FAMILY,TEST_Q1,CompareOperator.EQUAL,new BinaryComparator("foo".getBytes()),new Put(TEST_ROW),true);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preCheckAndDelete(ObserverContextImpl.createAndPrepare(RCP_ENV),TEST_ROW,TEST_FAMILY,TEST_Q1,CompareOperator.EQUAL,new BinaryComparator("foo".getBytes()),new Delete(TEST_ROW),true);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preAppend(ObserverContextImpl.createAndPrepare(RCP_ENV),new Append(TEST_ROW));
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preIncrement(ObserverContextImpl.createAndPrepare(RCP_ENV),new Increment(TEST_ROW));
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      ACCESS_CONTROLLER.preScannerOpen(ObserverContextImpl.createAndPrepare(RCP_ENV),new Scan());
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
  verifyAllowed(new AccessTestAction(){
    @Override public Object run() throws Exception {
      List<Pair<byte[],String>> paths=Lists.newArrayList();
      ACCESS_CONTROLLER.preBulkLoadHFile(ObserverContextImpl.createAndPrepare(RCP_ENV),paths);
      return null;
    }
  }
,SUPERUSER,USER_ADMIN,USER_RW,USER_RO,USER_OWNER,USER_CREATE,USER_QUAL,USER_NONE);
}
