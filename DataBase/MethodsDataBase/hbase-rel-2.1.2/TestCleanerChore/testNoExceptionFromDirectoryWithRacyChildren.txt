/** 
 * The cleaner runs in a loop, where it first checks to see all the files under a directory can be deleted. If they all can, then we try to delete the directory. However, a file may be added that directory to after the original check. This ensures that we don't accidentally delete that directory on and don't get spurious IOExceptions. <p> This was from HBASE-7465.
 * @throws Exception on failure
 */
@Test public void testNoExceptionFromDirectoryWithRacyChildren() throws Exception {
  UTIL.cleanupTestDir();
  Stoppable stop=new StoppableImplementation();
  HBaseTestingUtility localUtil=new HBaseTestingUtility();
  Configuration conf=localUtil.getConfiguration();
  final Path testDir=UTIL.getDataTestDir();
  final FileSystem fs=UTIL.getTestFileSystem();
  LOG.debug("Writing test data to: " + testDir);
  String confKey="hbase.test.cleaner.delegates";
  conf.set(confKey,AlwaysDelete.class.getName());
  AllValidPaths chore=new AllValidPaths("test-file-cleaner",stop,conf,fs,testDir,confKey);
  AlwaysDelete delegate=(AlwaysDelete)chore.cleanersChain.get(0);
  AlwaysDelete spy=Mockito.spy(delegate);
  chore.cleanersChain.set(0,spy);
  final Path parent=new Path(testDir,"parent");
  Path file=new Path(parent,"someFile");
  fs.mkdirs(parent);
  fs.create(file).close();
  assertTrue("Test file didn't get created.",fs.exists(file));
  final Path racyFile=new Path(parent,"addedFile");
  Mockito.doAnswer(new Answer<Boolean>(){
    @Override public Boolean answer(    InvocationOnMock invocation) throws Throwable {
      fs.create(racyFile).close();
      FSUtils.logFileSystemState(fs,testDir,LOG);
      return (Boolean)invocation.callRealMethod();
    }
  }
).when(spy).isFileDeletable(Mockito.any());
  chore.chore();
  assertTrue("Added file unexpectedly deleted",fs.exists(racyFile));
  assertTrue("Parent directory deleted unexpectedly",fs.exists(parent));
  assertFalse("Original file unexpectedly retained",fs.exists(file));
  Mockito.verify(spy,Mockito.times(1)).isFileDeletable(Mockito.any());
}
