@Test public void retriesIOExceptionInStatus() throws Exception {
  Stoppable stop=new StoppableImplementation();
  Configuration conf=UTIL.getConfiguration();
  Path testDir=UTIL.getDataTestDir();
  FileSystem fs=UTIL.getTestFileSystem();
  String confKey="hbase.test.cleaner.delegates";
  Path child=new Path(testDir,"child");
  Path file=new Path(child,"file");
  fs.mkdirs(child);
  fs.create(file).close();
  assertTrue("test file didn't get created.",fs.exists(file));
  final AtomicBoolean fails=new AtomicBoolean(true);
  FilterFileSystem filtered=new FilterFileSystem(fs){
    public FileStatus[] listStatus(    Path f) throws IOException {
      if (fails.get()) {
        throw new IOException("whomp whomp.");
      }
      return fs.listStatus(f);
    }
  }
;
  AllValidPaths chore=new AllValidPaths("test-retry-ioe",stop,conf,filtered,testDir,confKey);
  Boolean result=chore.runCleaner();
  assertTrue("test rig failed to inject failure.",fs.exists(file));
  assertTrue("test rig failed to inject failure.",fs.exists(child));
  assertFalse("chore should report that it failed.",result);
  fails.set(false);
  result=chore.runCleaner();
  assertFalse("file should have been destroyed.",fs.exists(file));
  assertFalse("directory should have been destroyed.",fs.exists(child));
  assertTrue("chore should claim it succeeded.",result);
}
