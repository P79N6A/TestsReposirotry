/** 
 * Handle failures if a member's commit phase fails. NOTE: This is the core difference that makes this different from traditional 2PC.  In true 2PC the transaction is committed just before the coordinator sends commit messages to the member.  Members are then responsible for reading its TX log.  This implementation actually rolls back, and thus breaks the normal TX guarantees.
 */
@Test public void testMemberCommitException() throws Exception {
  buildCohortMemberPair();
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      throw new IOException("Forced IOException in memeber prepare");
    }
  }
).when(spySub).insideBarrier();
  Subprocedure subproc=member.createSubprocedure(op,data);
  member.submitSubprocedure(subproc);
  member.closeAndWait(TIMEOUT);
  InOrder order=inOrder(mockMemberComms,spySub);
  order.verify(spySub).acquireBarrier();
  order.verify(mockMemberComms).sendMemberAcquired(eq(spySub));
  order.verify(spySub).insideBarrier();
  order.verify(mockMemberComms,never()).sendMemberCompleted(eq(spySub),eq(data));
  order.verify(spySub).cancel(anyString(),any());
  order.verify(spySub).cleanup(any());
}
