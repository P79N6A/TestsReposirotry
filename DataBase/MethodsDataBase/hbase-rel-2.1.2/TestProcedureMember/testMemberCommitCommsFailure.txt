/** 
 * Handle Failures if a member's commit phase succeeds but notification to coordinator fails NOTE: This is the core difference that makes this different from traditional 2PC.  In true 2PC the transaction is committed just before the coordinator sends commit messages to the member.  Members are then responsible for reading its TX log.  This implementation actually rolls back, and thus breaks the normal TX guarantees.
 */
@Test public void testMemberCommitCommsFailure() throws Exception {
  buildCohortMemberPair();
  final TimeoutException oate=new TimeoutException("bogus timeout",1,2,0);
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      spySub.cancel("commit comms fail",oate);
      Thread.sleep(WAKE_FREQUENCY);
      return null;
    }
  }
).when(mockMemberComms).sendMemberCompleted(any(),eq(data));
  Subprocedure subproc=member.createSubprocedure(op,data);
  member.submitSubprocedure(subproc);
  member.closeAndWait(TIMEOUT);
  InOrder order=inOrder(mockMemberComms,spySub);
  order.verify(spySub).acquireBarrier();
  order.verify(mockMemberComms).sendMemberAcquired(eq(spySub));
  order.verify(spySub).insideBarrier();
  order.verify(mockMemberComms).sendMemberCompleted(eq(spySub),eq(data));
  order.verify(spySub).cancel(anyString(),any());
  order.verify(spySub).cleanup(any());
}
