@Test public void testRegionLoad() throws Exception {
  for (  ServerName serverName : admin.getClusterMetrics(EnumSet.of(Option.LIVE_SERVERS)).getLiveServerMetrics().keySet()) {
    List<HRegionInfo> regions=admin.getOnlineRegions(serverName);
    LOG.info("serverName=" + serverName + ", regions="+ regions.stream().map(r -> r.getRegionNameAsString()).collect(Collectors.toList()));
    Collection<RegionLoad> regionLoads=admin.getRegionMetrics(serverName).stream().map(r -> new RegionLoad(r)).collect(Collectors.toList());
    LOG.info("serverName=" + serverName + ", regionLoads="+ regionLoads.stream().map(r -> Bytes.toString(r.getRegionName())).collect(Collectors.toList()));
    checkRegionsAndRegionLoads(regions,regionLoads);
  }
  for (  TableName table : new TableName[]{TABLE_1,TABLE_2,TABLE_3}) {
    List<HRegionInfo> tableRegions=admin.getTableRegions(table);
    List<RegionLoad> regionLoads=Lists.newArrayList();
    for (    ServerName serverName : admin.getClusterMetrics(EnumSet.of(Option.LIVE_SERVERS)).getLiveServerMetrics().keySet()) {
      regionLoads.addAll(admin.getRegionMetrics(serverName,table).stream().map(r -> new RegionLoad(r)).collect(Collectors.toList()));
    }
    checkRegionsAndRegionLoads(tableRegions,regionLoads);
  }
  TimeUnit.MILLISECONDS.sleep(3 * MSG_INTERVAL);
  ClusterStatus clusterStatus=new ClusterStatus(admin.getClusterMetrics(EnumSet.of(Option.LIVE_SERVERS)));
  for (  ServerName serverName : clusterStatus.getServers()) {
    ServerLoad serverLoad=clusterStatus.getLoad(serverName);
    Map<byte[],RegionLoad> regionLoads=admin.getRegionMetrics(serverName).stream().collect(Collectors.toMap(e -> e.getRegionName(),e -> new RegionLoad(e),(v1,v2) -> {
      throw new RuntimeException("impossible!!");
    }
,() -> new TreeMap<>(Bytes.BYTES_COMPARATOR)));
    LOG.debug("serverName=" + serverName + ", getRegionLoads="+ serverLoad.getRegionsLoad().keySet().stream().map(r -> Bytes.toString(r)).collect(Collectors.toList()));
    LOG.debug("serverName=" + serverName + ", regionLoads="+ regionLoads.keySet().stream().map(r -> Bytes.toString(r)).collect(Collectors.toList()));
    compareRegionLoads(serverLoad.getRegionsLoad(),regionLoads);
  }
}
