@Test public void testSimpleMultiple() throws Exception {
  AsyncTable<?> table=getTable.get();
  int count=100;
  CountDownLatch putLatch=new CountDownLatch(count);
  IntStream.range(0,count).forEach(i -> table.put(new Put(concat(row,i)).addColumn(FAMILY,QUALIFIER,concat(VALUE,i))).thenAccept(x -> putLatch.countDown()));
  putLatch.await();
  BlockingQueue<Boolean> existsResp=new ArrayBlockingQueue<>(count);
  IntStream.range(0,count).forEach(i -> table.exists(new Get(concat(row,i)).addColumn(FAMILY,QUALIFIER)).thenAccept(x -> existsResp.add(x)));
  for (int i=0; i < count; i++) {
    assertTrue(existsResp.take());
  }
  BlockingQueue<Pair<Integer,Result>> getResp=new ArrayBlockingQueue<>(count);
  IntStream.range(0,count).forEach(i -> table.get(new Get(concat(row,i)).addColumn(FAMILY,QUALIFIER)).thenAccept(x -> getResp.add(Pair.newPair(i,x))));
  for (int i=0; i < count; i++) {
    Pair<Integer,Result> pair=getResp.take();
    assertArrayEquals(concat(VALUE,pair.getFirst()),pair.getSecond().getValue(FAMILY,QUALIFIER));
  }
  CountDownLatch deleteLatch=new CountDownLatch(count);
  IntStream.range(0,count).forEach(i -> table.delete(new Delete(concat(row,i))).thenAccept(x -> deleteLatch.countDown()));
  deleteLatch.await();
  IntStream.range(0,count).forEach(i -> table.exists(new Get(concat(row,i)).addColumn(FAMILY,QUALIFIER)).thenAccept(x -> existsResp.add(x)));
  for (int i=0; i < count; i++) {
    assertFalse(existsResp.take());
  }
  IntStream.range(0,count).forEach(i -> table.get(new Get(concat(row,i)).addColumn(FAMILY,QUALIFIER)).thenAccept(x -> getResp.add(Pair.newPair(i,x))));
  for (int i=0; i < count; i++) {
    Pair<Integer,Result> pair=getResp.take();
    assertTrue(pair.getSecond().isEmpty());
  }
}
