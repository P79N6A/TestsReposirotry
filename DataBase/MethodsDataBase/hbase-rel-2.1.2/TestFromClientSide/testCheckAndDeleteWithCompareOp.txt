@Test public void testCheckAndDeleteWithCompareOp() throws IOException {
  final byte[] value1=Bytes.toBytes("aaaa");
  final byte[] value2=Bytes.toBytes("bbbb");
  final byte[] value3=Bytes.toBytes("cccc");
  final byte[] value4=Bytes.toBytes("dddd");
  Table table=TEST_UTIL.createTable(TableName.valueOf(name.getMethodName()),FAMILY);
  Put put2=new Put(ROW);
  put2.addColumn(FAMILY,QUALIFIER,value2);
  table.put(put2);
  Put put3=new Put(ROW);
  put3.addColumn(FAMILY,QUALIFIER,value3);
  Delete delete=new Delete(ROW);
  delete.addColumns(FAMILY,QUALIFIER);
  boolean ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.GREATER,value1).thenDelete(delete);
  assertFalse(ok);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.EQUAL,value1).thenDelete(delete);
  assertFalse(ok);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.GREATER_OR_EQUAL,value1).thenDelete(delete);
  assertFalse(ok);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.LESS,value1).thenDelete(delete);
  assertTrue(ok);
  table.put(put2);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.LESS_OR_EQUAL,value1).thenDelete(delete);
  assertTrue(ok);
  table.put(put2);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.NOT_EQUAL,value1).thenDelete(delete);
  assertTrue(ok);
  table.put(put3);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.LESS,value4).thenDelete(delete);
  assertFalse(ok);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.LESS_OR_EQUAL,value4).thenDelete(delete);
  assertFalse(ok);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.EQUAL,value4).thenDelete(delete);
  assertFalse(ok);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.GREATER,value4).thenDelete(delete);
  assertTrue(ok);
  table.put(put3);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.GREATER_OR_EQUAL,value4).thenDelete(delete);
  assertTrue(ok);
  table.put(put3);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.NOT_EQUAL,value4).thenDelete(delete);
  assertTrue(ok);
  table.put(put2);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.GREATER,value2).thenDelete(delete);
  assertFalse(ok);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.NOT_EQUAL,value2).thenDelete(delete);
  assertFalse(ok);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.LESS,value2).thenDelete(delete);
  assertFalse(ok);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.GREATER_OR_EQUAL,value2).thenDelete(delete);
  assertTrue(ok);
  table.put(put2);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.LESS_OR_EQUAL,value2).thenDelete(delete);
  assertTrue(ok);
  table.put(put2);
  ok=table.checkAndMutate(ROW,FAMILY).qualifier(QUALIFIER).ifMatches(CompareOperator.EQUAL,value2).thenDelete(delete);
  assertTrue(ok);
}
