/** 
 * Test batch operations with combination of valid and invalid args
 */
@Test public void testBatchOperationsWithErrors() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  Table foo=TEST_UTIL.createTable(tableName,new byte[][]{FAMILY},10);
  int NUM_OPS=100;
  int FAILED_OPS=50;
  RetriesExhaustedWithDetailsException expectedException=null;
  IllegalArgumentException iae=null;
  List<Put> puts=new ArrayList<Put>(NUM_OPS);
  for (int i=0; i != NUM_OPS; i++) {
    Put put=new Put(Bytes.toBytes(i));
    puts.add(put);
  }
  try {
    foo.put(puts);
  }
 catch (  IllegalArgumentException e) {
    iae=e;
  }
  assertNotNull(iae);
  assertEquals(NUM_OPS,puts.size());
  iae=null;
  puts.clear();
  for (int i=0; i != NUM_OPS; i++) {
    Put put=new Put(Bytes.toBytes(i));
    put.addColumn((i % 2) == 0 ? FAMILY : INVALID_FAMILY,FAMILY,Bytes.toBytes(i));
    puts.add(put);
  }
  try {
    foo.put(puts);
  }
 catch (  RetriesExhaustedWithDetailsException e) {
    expectedException=e;
  }
  assertNotNull(expectedException);
  assertEquals(FAILED_OPS,expectedException.exceptions.size());
  assertTrue(expectedException.actions.contains(puts.get(1)));
  List<Get> gets=new ArrayList<>(NUM_OPS);
  for (int i=0; i < NUM_OPS; i++) {
    Get get=new Get(Bytes.toBytes(i));
    gets.add(get);
  }
  Result[] getsResult=foo.get(gets);
  assertNotNull(getsResult);
  assertEquals(NUM_OPS,getsResult.length);
  assertNull(getsResult[1].getRow());
  gets.clear();
  getsResult=null;
  expectedException=null;
  for (int i=0; i < NUM_OPS; i++) {
    Get get=new Get(Bytes.toBytes(i));
    get.addColumn((i % 2) == 0 ? FAMILY : INVALID_FAMILY,FAMILY);
    gets.add(get);
  }
  try {
    getsResult=foo.get(gets);
  }
 catch (  RetriesExhaustedWithDetailsException e) {
    expectedException=e;
  }
  assertNull(getsResult);
  assertNotNull(expectedException);
  assertEquals(FAILED_OPS,expectedException.exceptions.size());
  assertTrue(expectedException.actions.contains(gets.get(1)));
  expectedException=null;
  List<Delete> deletes=new ArrayList<>(NUM_OPS);
  for (int i=0; i < NUM_OPS; i++) {
    Delete delete=new Delete(Bytes.toBytes(i));
    delete.addColumn((i % 2) == 0 ? FAMILY : INVALID_FAMILY,FAMILY);
    deletes.add(delete);
  }
  try {
    foo.delete(deletes);
  }
 catch (  RetriesExhaustedWithDetailsException e) {
    expectedException=e;
  }
  assertEquals((NUM_OPS - FAILED_OPS),deletes.size());
  assertNotNull(expectedException);
  assertEquals(FAILED_OPS,expectedException.exceptions.size());
  assertTrue(expectedException.actions.contains(deletes.get(1)));
  deletes.clear();
  for (int i=0; i < NUM_OPS; i++) {
    Delete delete=new Delete(Bytes.toBytes(i));
    deletes.add(delete);
  }
  foo.delete(deletes);
  assertTrue(deletes.isEmpty());
}
