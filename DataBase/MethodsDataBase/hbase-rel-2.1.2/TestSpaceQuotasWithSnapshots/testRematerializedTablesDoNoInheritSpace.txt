@Test public void testRematerializedTablesDoNoInheritSpace() throws Exception {
  TableName tn=helper.createTableWithRegions(1);
  TableName tn2=helper.getNextTableName();
  LOG.info("Writing data");
  QuotaSettings settings=QuotaSettingsFactory.limitTableSpace(tn,SpaceQuotaHelperForTests.ONE_GIGABYTE,SpaceViolationPolicy.NO_INSERTS);
  admin.setQuota(settings);
  QuotaSettings settings2=QuotaSettingsFactory.limitTableSpace(tn2,SpaceQuotaHelperForTests.ONE_GIGABYTE,SpaceViolationPolicy.NO_INSERTS);
  admin.setQuota(settings2);
  final long initialSize=2L * SpaceQuotaHelperForTests.ONE_MEGABYTE;
  helper.writeData(tn,initialSize);
  LOG.info("Waiting until table size reflects written data");
  TEST_UTIL.waitFor(30 * 1000,500,new SpaceQuotaSnapshotPredicate(conn,tn){
    @Override boolean evaluate(    SpaceQuotaSnapshot snapshot) throws Exception {
      return snapshot.getUsage() >= initialSize;
    }
  }
);
  waitForStableQuotaSize(conn,tn,null);
  final long actualInitialSize=QuotaTableUtil.getCurrentSnapshot(conn,tn).getUsage();
  LOG.info("Initial table size was " + actualInitialSize);
  LOG.info("Snapshot the table");
  final String snapshot1=tn.toString() + "_snapshot1";
  admin.snapshot(snapshot1,tn);
  admin.cloneSnapshot(snapshot1,tn2);
  helper.writeData(tn,initialSize,"q2");
  admin.flush(tn);
  TEST_UTIL.waitFor(30_000,1_000,new SpaceQuotaSnapshotPredicate(conn,tn){
    @Override boolean evaluate(    SpaceQuotaSnapshot snapshot) throws Exception {
      return snapshot.getUsage() >= actualInitialSize * 2;
    }
  }
);
  SpaceQuotaSnapshot snapshot=QuotaTableUtil.getCurrentSnapshot(conn,tn2);
  assertNotNull(snapshot);
  assertEquals(0,snapshot.getUsage());
  TEST_UTIL.compact(tn2,true);
  TEST_UTIL.waitFor(30_000,1_000,new SpaceQuotaSnapshotPredicate(conn,tn2){
    @Override boolean evaluate(    SpaceQuotaSnapshot snapshot) throws Exception {
      return snapshot.getUsage() == actualInitialSize;
    }
  }
);
}
