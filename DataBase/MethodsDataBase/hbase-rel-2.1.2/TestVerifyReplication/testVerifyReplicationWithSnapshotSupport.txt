@Test public void testVerifyReplicationWithSnapshotSupport() throws Exception {
  runSmallBatchTest();
  Path rootDir=FSUtils.getRootDir(conf1);
  FileSystem fs=rootDir.getFileSystem(conf1);
  String sourceSnapshotName="sourceSnapshot-" + System.currentTimeMillis();
  SnapshotTestingUtils.createSnapshotAndValidate(utility1.getAdmin(),tableName,new String(famName),sourceSnapshotName,rootDir,fs,true);
  Path peerRootDir=FSUtils.getRootDir(conf2);
  FileSystem peerFs=peerRootDir.getFileSystem(conf2);
  String peerSnapshotName="peerSnapshot-" + System.currentTimeMillis();
  SnapshotTestingUtils.createSnapshotAndValidate(utility2.getAdmin(),tableName,new String(famName),peerSnapshotName,peerRootDir,peerFs,true);
  String peerFSAddress=peerFs.getUri().toString();
  String temPath1=utility1.getRandomDir().toString();
  String temPath2="/tmp2";
  String[] args=new String[]{"--sourceSnapshotName=" + sourceSnapshotName,"--sourceSnapshotTmpDir=" + temPath1,"--peerSnapshotName=" + peerSnapshotName,"--peerSnapshotTmpDir=" + temPath2,"--peerFSAddress=" + peerFSAddress,"--peerHBaseRootAddress=" + FSUtils.getRootDir(conf2),"2",tableName.getNameAsString()};
  Job job=new VerifyReplication().createSubmittableJob(conf1,args);
  if (job == null) {
    fail("Job wasn't created, see the log");
  }
  if (!job.waitForCompletion(true)) {
    fail("Job failed, see the log");
  }
  assertEquals(NB_ROWS_IN_BATCH,job.getCounters().findCounter(VerifyReplication.Verifier.Counters.GOODROWS).getValue());
  assertEquals(0,job.getCounters().findCounter(VerifyReplication.Verifier.Counters.BADROWS).getValue());
  checkRestoreTmpDir(conf1,temPath1,1);
  checkRestoreTmpDir(conf2,temPath2,1);
  Scan scan=new Scan();
  ResultScanner rs=htable2.getScanner(scan);
  Put put=null;
  for (  Result result : rs) {
    put=new Put(result.getRow());
    Cell firstVal=result.rawCells()[0];
    put.addColumn(CellUtil.cloneFamily(firstVal),CellUtil.cloneQualifier(firstVal),Bytes.toBytes("diff data"));
    htable2.put(put);
  }
  Delete delete=new Delete(put.getRow());
  htable2.delete(delete);
  sourceSnapshotName="sourceSnapshot-" + System.currentTimeMillis();
  SnapshotTestingUtils.createSnapshotAndValidate(utility1.getAdmin(),tableName,new String(famName),sourceSnapshotName,rootDir,fs,true);
  peerSnapshotName="peerSnapshot-" + System.currentTimeMillis();
  SnapshotTestingUtils.createSnapshotAndValidate(utility2.getAdmin(),tableName,new String(famName),peerSnapshotName,peerRootDir,peerFs,true);
  args=new String[]{"--sourceSnapshotName=" + sourceSnapshotName,"--sourceSnapshotTmpDir=" + temPath1,"--peerSnapshotName=" + peerSnapshotName,"--peerSnapshotTmpDir=" + temPath2,"--peerFSAddress=" + peerFSAddress,"--peerHBaseRootAddress=" + FSUtils.getRootDir(conf2),"2",tableName.getNameAsString()};
  job=new VerifyReplication().createSubmittableJob(conf1,args);
  if (job == null) {
    fail("Job wasn't created, see the log");
  }
  if (!job.waitForCompletion(true)) {
    fail("Job failed, see the log");
  }
  assertEquals(0,job.getCounters().findCounter(VerifyReplication.Verifier.Counters.GOODROWS).getValue());
  assertEquals(NB_ROWS_IN_BATCH,job.getCounters().findCounter(VerifyReplication.Verifier.Counters.BADROWS).getValue());
  checkRestoreTmpDir(conf1,temPath1,2);
  checkRestoreTmpDir(conf2,temPath2,2);
}
