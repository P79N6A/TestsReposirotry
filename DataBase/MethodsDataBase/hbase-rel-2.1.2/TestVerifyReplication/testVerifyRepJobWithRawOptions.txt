/** 
 * Load a row into a table, make sure the data is really the same, delete the row, make sure the delete marker is replicated, run verify replication with and without raw to check the results.
 */
@Test public void testVerifyRepJobWithRawOptions() throws Exception {
  LOG.info(name.getMethodName());
  final TableName tableName=TableName.valueOf(name.getMethodName());
  byte[] familyname=Bytes.toBytes("fam_raw");
  byte[] row=Bytes.toBytes("row_raw");
  Table lHtable1=null;
  Table lHtable2=null;
  try {
    ColumnFamilyDescriptor fam=ColumnFamilyDescriptorBuilder.newBuilder(familyname).setMaxVersions(100).setScope(HConstants.REPLICATION_SCOPE_GLOBAL).build();
    TableDescriptor table=TableDescriptorBuilder.newBuilder(tableName).setColumnFamily(fam).build();
    scopes=new TreeMap<>(Bytes.BYTES_COMPARATOR);
    for (    ColumnFamilyDescriptor f : table.getColumnFamilies()) {
      scopes.put(f.getName(),f.getScope());
    }
    Connection connection1=ConnectionFactory.createConnection(conf1);
    Connection connection2=ConnectionFactory.createConnection(conf2);
    try (Admin admin1=connection1.getAdmin()){
      admin1.createTable(table,HBaseTestingUtility.KEYS_FOR_HBA_CREATE_TABLE);
    }
     try (Admin admin2=connection2.getAdmin()){
      admin2.createTable(table,HBaseTestingUtility.KEYS_FOR_HBA_CREATE_TABLE);
    }
     utility1.waitUntilAllRegionsAssigned(tableName);
    utility2.waitUntilAllRegionsAssigned(tableName);
    lHtable1=utility1.getConnection().getTable(tableName);
    lHtable2=utility2.getConnection().getTable(tableName);
    Put put=new Put(row);
    put.addColumn(familyname,row,row);
    lHtable1.put(put);
    Get get=new Get(row);
    for (int i=0; i < NB_RETRIES; i++) {
      if (i == NB_RETRIES - 1) {
        fail("Waited too much time for put replication");
      }
      Result res=lHtable2.get(get);
      if (res.isEmpty()) {
        LOG.info("Row not available");
        Thread.sleep(SLEEP_TIME);
      }
 else {
        assertArrayEquals(res.value(),row);
        break;
      }
    }
    Delete del=new Delete(row);
    lHtable1.delete(del);
    get=new Get(row);
    for (int i=0; i < NB_RETRIES; i++) {
      if (i == NB_RETRIES - 1) {
        fail("Waited too much time for del replication");
      }
      Result res=lHtable2.get(get);
      if (res.size() >= 1) {
        LOG.info("Row not deleted");
        Thread.sleep(SLEEP_TIME);
      }
 else {
        break;
      }
    }
    String[] argsWithoutRaw=new String[]{PEER_ID,tableName.getNameAsString()};
    runVerifyReplication(argsWithoutRaw,0,0);
    String[] argsWithRawAsTrue=new String[]{"--raw",PEER_ID,tableName.getNameAsString()};
    runVerifyReplication(argsWithRawAsTrue,1,0);
  }
  finally {
    if (lHtable1 != null) {
      lHtable1.close();
    }
    if (lHtable2 != null) {
      lHtable2.close();
    }
  }
}
