/** 
 * After a secure bulkload finished , there is a clean-up for FileSystems used in the bulkload. Sometimes, FileSystems used in the finished bulkload might also be used in other bulkload calls, or there are other FileSystems created by the same user, they could be closed by a FileSystem.closeAllForUGI call. So during the clean-up, those FileSystems need to be used later can not get closed ,or else a race condition occurs. testForRaceCondition tests the case that two secure bulkload calls from the same UGI go into two different regions and one bulkload finishes earlier when the other bulkload still needs its FileSystems, checks that both bulkloads succeed.
 */
@Test public void testForRaceCondition() throws Exception {
  Consumer<HRegion> fsCreatedListener=new Consumer<HRegion>(){
    @Override public void accept(    HRegion hRegion){
      if (hRegion.getRegionInfo().containsRow(key3)) {
        Threads.shutdown(ealierBulkload);
      }
    }
  }
;
  testUtil.getMiniHBaseCluster().getRegionServerThreads().get(0).getRegionServer().secureBulkLoadManager.setFsCreatedListener(fsCreatedListener);
  testUtil.createTable(TABLE,FAMILY,Bytes.toByteArrays(SPLIT_ROWKEY));
  Path rootdir=testUtil.getMiniHBaseCluster().getRegionServerThreads().get(0).getRegionServer().getRootDir();
  Path dir1=new Path(rootdir,"dir1");
  prepareHFile(dir1,key1,value1);
  Path dir2=new Path(rootdir,"dir2");
  prepareHFile(dir2,key3,value3);
  final AtomicReference<Throwable> t1Exception=new AtomicReference<>();
  final AtomicReference<Throwable> t2Exception=new AtomicReference<>();
  ealierBulkload=new Thread(new Runnable(){
    @Override public void run(){
      try {
        doBulkloadWithoutRetry(dir1);
      }
 catch (      Exception e) {
        LOG.error("bulk load failed .",e);
        t1Exception.set(e);
      }
    }
  }
);
  laterBulkload=new Thread(new Runnable(){
    @Override public void run(){
      try {
        doBulkloadWithoutRetry(dir2);
      }
 catch (      Exception e) {
        LOG.error("bulk load failed .",e);
        t2Exception.set(e);
      }
    }
  }
);
  ealierBulkload.start();
  laterBulkload.start();
  Threads.shutdown(ealierBulkload);
  Threads.shutdown(laterBulkload);
  Assert.assertNull(t1Exception.get());
  Assert.assertNull(t2Exception.get());
  Get get1=new Get(key1);
  Get get3=new Get(key3);
  Table t=testUtil.getConnection().getTable(TABLE);
  Result r=t.get(get1);
  Assert.assertArrayEquals(r.getValue(FAMILY,COLUMN),value1);
  r=t.get(get3);
  Assert.assertArrayEquals(r.getValue(FAMILY,COLUMN),value3);
}
