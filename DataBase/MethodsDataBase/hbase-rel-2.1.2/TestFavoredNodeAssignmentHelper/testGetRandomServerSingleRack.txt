@Test public void testGetRandomServerSingleRack() throws IOException {
  Map<String,Integer> rackToServerCount=new HashMap<>();
  final String rack="rack1";
  rackToServerCount.put(rack,4);
  List<ServerName> servers=getServersFromRack(rackToServerCount);
  FavoredNodeAssignmentHelper helper=new FavoredNodeAssignmentHelper(servers,rackManager);
  helper.initialize();
  assertTrue(helper.canPlaceFavoredNodes());
  for (int attempts=0; attempts < MAX_ATTEMPTS; attempts++) {
    ServerName sn=helper.getOneRandomServer(rack,Sets.newHashSet());
    assertTrue("Server:" + sn + " does not belong to list: "+ servers,servers.contains(sn));
  }
  Set<ServerName> skipServers=Sets.newHashSet(ServerName.valueOf("invalidnode:1234",ServerName.NON_STARTCODE));
  for (int attempts=0; attempts < MAX_ATTEMPTS; attempts++) {
    ServerName sn=helper.getOneRandomServer(rack,skipServers);
    assertTrue("Server:" + sn + " does not belong to list: "+ servers,servers.contains(sn));
  }
  ServerName skipSN=ServerName.valueOf("foo1:1234",ServerName.NON_STARTCODE);
  skipServers=Sets.newHashSet(skipSN);
  for (int attempts=0; attempts < MAX_ATTEMPTS; attempts++) {
    ServerName sn=helper.getOneRandomServer(rack,skipServers);
    assertNotEquals("Skip server should not be selected ",skipSN.getHostAndPort(),sn.getHostAndPort());
    assertTrue("Server:" + sn + " does not belong to list: "+ servers,servers.contains(sn));
  }
}
