@Test public void testGetOneRandomRack() throws IOException {
  Map<String,Integer> rackToServerCount=new HashMap<>();
  Set<String> rackList=Sets.newHashSet("rack1","rack2","rack3");
  for (  String rack : rackList) {
    rackToServerCount.put(rack,2);
  }
  List<ServerName> servers=getServersFromRack(rackToServerCount);
  FavoredNodeAssignmentHelper helper=new FavoredNodeAssignmentHelper(servers,rackManager);
  helper.initialize();
  assertTrue(helper.canPlaceFavoredNodes());
  for (int attempts=0; attempts < MAX_ATTEMPTS; attempts++) {
    assertTrue(rackList.contains(helper.getOneRandomRack(Sets.newHashSet())));
  }
  Set<String> skipRacks=Sets.newHashSet("rack");
  for (int attempts=0; attempts < MAX_ATTEMPTS; attempts++) {
    assertTrue(rackList.contains(helper.getOneRandomRack(skipRacks)));
  }
  skipRacks=Sets.newHashSet("rack1");
  Set<String> validRacks=Sets.newHashSet("rack2","rack3");
  for (int attempts=0; attempts < MAX_ATTEMPTS; attempts++) {
    assertTrue(validRacks.contains(helper.getOneRandomRack(skipRacks)));
  }
}
