@Test public void testGetRandomServerMultiRack() throws IOException {
  Map<String,Integer> rackToServerCount=new HashMap<>();
  Set<String> rackList=Sets.newHashSet("rack1","rack2","rack3");
  for (  String rack : rackList) {
    rackToServerCount.put(rack,4);
  }
  List<ServerName> servers=getServersFromRack(rackToServerCount);
  FavoredNodeAssignmentHelper helper=new FavoredNodeAssignmentHelper(servers,rackManager);
  helper.initialize();
  assertTrue(helper.canPlaceFavoredNodes());
  for (int attempts=0; attempts < MAX_ATTEMPTS; attempts++) {
    for (    String rack : rackList) {
      ServerName sn=helper.getOneRandomServer(rack,Sets.newHashSet());
      assertTrue("Server:" + sn + " does not belong to rack servers: "+ rackToServers.get(rack),rackToServers.get(rack).contains(sn));
    }
  }
  Set<ServerName> skipServers=Sets.newHashSet(ServerName.valueOf("invalidnode:1234",ServerName.NON_STARTCODE));
  for (int attempts=0; attempts < MAX_ATTEMPTS; attempts++) {
    for (    String rack : rackList) {
      ServerName sn=helper.getOneRandomServer(rack,skipServers);
      assertTrue("Server:" + sn + " does not belong to rack servers: "+ rackToServers.get(rack),rackToServers.get(rack).contains(sn));
    }
  }
  ServerName skipSN1=ServerName.valueOf("foo1:1234",ServerName.NON_STARTCODE);
  ServerName skipSN2=ServerName.valueOf("foo10:1234",ServerName.NON_STARTCODE);
  ServerName skipSN3=ServerName.valueOf("foo20:1234",ServerName.NON_STARTCODE);
  skipServers=Sets.newHashSet(skipSN1,skipSN2,skipSN3);
  for (int attempts=0; attempts < MAX_ATTEMPTS; attempts++) {
    for (    String rack : rackList) {
      ServerName sn=helper.getOneRandomServer(rack,skipServers);
      assertFalse("Skip server should not be selected ",skipServers.contains(sn));
      assertTrue("Server:" + sn + " does not belong to rack servers: "+ rackToServers.get(rack),rackToServers.get(rack).contains(sn));
    }
  }
}
