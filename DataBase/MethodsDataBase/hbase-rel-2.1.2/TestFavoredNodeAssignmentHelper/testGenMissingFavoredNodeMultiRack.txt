@Test public void testGenMissingFavoredNodeMultiRack() throws IOException {
  ServerName snRack1SN1=ServerName.valueOf("foo1:1234",ServerName.NON_STARTCODE);
  ServerName snRack1SN2=ServerName.valueOf("foo2:1234",ServerName.NON_STARTCODE);
  ServerName snRack2SN1=ServerName.valueOf("foo10:1234",ServerName.NON_STARTCODE);
  ServerName snRack2SN2=ServerName.valueOf("foo11:1234",ServerName.NON_STARTCODE);
  Map<String,Integer> rackToServerCount=new HashMap<>();
  Set<String> rackList=Sets.newHashSet("rack1","rack2");
  for (  String rack : rackList) {
    rackToServerCount.put(rack,4);
  }
  List<ServerName> servers=getServersFromRack(rackToServerCount);
  FavoredNodeAssignmentHelper helper=new FavoredNodeAssignmentHelper(servers,rackManager);
  helper.initialize();
  assertTrue(helper.canPlaceFavoredNodes());
  List<ServerName> fn=Lists.newArrayList(snRack1SN1,snRack1SN2);
  for (int attempts=0; attempts < MAX_ATTEMPTS; attempts++) {
    ServerName genSN=helper.generateMissingFavoredNode(fn);
    checkDuplicateFN(fn,genSN);
    checkFNRacks(fn,genSN);
  }
  fn=Lists.newArrayList(snRack1SN1,snRack2SN1);
  for (int attempts=0; attempts < MAX_ATTEMPTS; attempts++) {
    ServerName genSN=helper.generateMissingFavoredNode(fn);
    checkDuplicateFN(fn,genSN);
    checkFNRacks(fn,genSN);
  }
  fn=Lists.newArrayList(snRack1SN1,snRack2SN1);
  List<ServerName> skipServers=Lists.newArrayList(snRack2SN2);
  for (int attempts=0; attempts < MAX_ATTEMPTS; attempts++) {
    ServerName genSN=helper.generateMissingFavoredNode(fn,skipServers);
    checkDuplicateFN(fn,genSN);
    checkFNRacks(fn,genSN);
    assertNotEquals("Generated FN should not match excluded one",snRack2SN2,genSN);
  }
}
