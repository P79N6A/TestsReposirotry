@Test public void testSecondaryAndTertiaryPlacementWithMoreThanOneServerInPrimaryRack(){
  Map<String,Integer> rackToServerCount=new HashMap<>();
  rackToServerCount.put("rack1",2);
  rackToServerCount.put("rack2",1);
  Triple<Map<RegionInfo,ServerName>,FavoredNodeAssignmentHelper,List<RegionInfo>> primaryRSMapAndHelper=secondaryAndTertiaryRSPlacementHelper(6,rackToServerCount);
  FavoredNodeAssignmentHelper helper=primaryRSMapAndHelper.getSecond();
  Map<RegionInfo,ServerName> primaryRSMap=primaryRSMapAndHelper.getFirst();
  List<RegionInfo> regions=primaryRSMapAndHelper.getThird();
  assertTrue(primaryRSMap.size() == 6);
  Map<RegionInfo,ServerName[]> secondaryAndTertiaryMap=helper.placeSecondaryAndTertiaryRS(primaryRSMap);
  assertTrue(secondaryAndTertiaryMap.size() == regions.size());
  for (  RegionInfo region : regions) {
    ServerName s=primaryRSMap.get(region);
    ServerName secondaryRS=secondaryAndTertiaryMap.get(region)[0];
    ServerName tertiaryRS=secondaryAndTertiaryMap.get(region)[1];
    Set<String> racks=Sets.newHashSet(rackManager.getRack(s));
    racks.add(rackManager.getRack(secondaryRS));
    racks.add(rackManager.getRack(tertiaryRS));
    assertTrue(racks.size() >= 2);
  }
}
