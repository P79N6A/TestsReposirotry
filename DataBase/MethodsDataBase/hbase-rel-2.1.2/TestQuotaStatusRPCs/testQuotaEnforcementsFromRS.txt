@Test public void testQuotaEnforcementsFromRS() throws Exception {
  final long sizeLimit=1024L * 8L;
  final long tableSize=1024L * 10L;
  final int numRegions=10;
  final TableName tn=helper.createTableWithRegions(numRegions);
  QuotaSettings settings=QuotaSettingsFactory.limitTableSpace(tn,sizeLimit,SpaceViolationPolicy.NO_INSERTS);
  TEST_UTIL.getAdmin().setQuota(settings);
  try {
    helper.writeData(tn,tableSize);
  }
 catch (  RetriesExhaustedWithDetailsException|SpaceLimitingException e) {
  }
  final HRegionServer rs=TEST_UTIL.getMiniHBaseCluster().getRegionServer(0);
  final RegionServerSpaceQuotaManager manager=rs.getRegionServerSpaceQuotaManager();
  Waiter.waitFor(TEST_UTIL.getConfiguration(),30 * 1000,new Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      ActivePolicyEnforcement enforcements=manager.getActiveEnforcements();
      SpaceViolationPolicyEnforcement enforcement=enforcements.getPolicyEnforcement(tn);
      if (enforcement instanceof MissingSnapshotViolationPolicyEnforcement) {
        return false;
      }
      return enforcement.getQuotaSnapshot().getQuotaStatus().isInViolation();
    }
  }
);
  Map<TableName,SpaceQuotaSnapshot> snapshots=QuotaTableUtil.getRegionServerQuotaSnapshots(TEST_UTIL.getConnection(),rs.getServerName());
  SpaceQuotaSnapshot snapshot=snapshots.get(tn);
  assertNotNull("Did not find snapshot for " + tn,snapshot);
  assertTrue(snapshot.getQuotaStatus().isInViolation());
  assertEquals(SpaceViolationPolicy.NO_INSERTS,snapshot.getQuotaStatus().getPolicy());
}
