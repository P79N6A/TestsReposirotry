@Test public void testQuotaSnapshotsFromRS() throws Exception {
  final long sizeLimit=1024L * 1024L;
  final long tableSize=1024L * 10L;
  final int numRegions=10;
  final TableName tn=helper.createTableWithRegions(numRegions);
  QuotaSettings settings=QuotaSettingsFactory.limitTableSpace(tn,sizeLimit,SpaceViolationPolicy.NO_INSERTS);
  TEST_UTIL.getAdmin().setQuota(settings);
  helper.writeData(tn,tableSize);
  final HRegionServer rs=TEST_UTIL.getMiniHBaseCluster().getRegionServer(0);
  final RegionServerSpaceQuotaManager manager=rs.getRegionServerSpaceQuotaManager();
  Waiter.waitFor(TEST_UTIL.getConfiguration(),30 * 1000,new Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      SpaceQuotaSnapshot snapshot=manager.copyQuotaSnapshots().get(tn);
      if (snapshot == null) {
        return false;
      }
      return snapshot.getUsage() >= tableSize;
    }
  }
);
  Map<TableName,SpaceQuotaSnapshot> snapshots=QuotaTableUtil.getRegionServerQuotaSnapshots(TEST_UTIL.getConnection(),rs.getServerName());
  SpaceQuotaSnapshot snapshot=snapshots.get(tn);
  assertNotNull("Did not find snapshot for " + tn,snapshot);
  assertTrue("Observed table usage was " + snapshot.getUsage(),snapshot.getUsage() >= tableSize);
  assertEquals(sizeLimit,snapshot.getLimit());
  SpaceQuotaStatus pbStatus=snapshot.getQuotaStatus();
  assertFalse(pbStatus.isInViolation());
}
