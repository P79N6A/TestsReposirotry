@Test public void testNamespaceOperations() throws Exception {
  admin.createNamespace(NamespaceDescriptor.create(prefix + "ns1").build()).join();
  admin.createNamespace(NamespaceDescriptor.create(prefix + "ns2").build()).join();
  runWithExpectedException(new Callable<Void>(){
    @Override public Void call() throws Exception {
      admin.createNamespace(NamespaceDescriptor.create(prefix + "ns1").build()).join();
      return null;
    }
  }
,NamespaceExistException.class);
  runWithExpectedException(new Callable<Void>(){
    @Override public Void call() throws Exception {
      HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("non_existing_namespace","table1"));
      htd.addFamily(new HColumnDescriptor("family1"));
      admin.createTable(htd).join();
      return null;
    }
  }
,NamespaceNotFoundException.class);
  NamespaceDescriptor ns1=admin.getNamespaceDescriptor(prefix + "ns1").get();
  assertEquals(prefix + "ns1",ns1.getName());
  runWithExpectedException(new Callable<NamespaceDescriptor>(){
    @Override public NamespaceDescriptor call() throws Exception {
      return admin.getNamespaceDescriptor("non_existing_namespace").get();
    }
  }
,NamespaceNotFoundException.class);
  admin.deleteNamespace(prefix + "ns2").join();
  runWithExpectedException(new Callable<Void>(){
    @Override public Void call() throws Exception {
      admin.deleteNamespace("non_existing_namespace").join();
      return null;
    }
  }
,NamespaceNotFoundException.class);
  ns1=admin.getNamespaceDescriptor(prefix + "ns1").get();
  ns1.setConfiguration("foo","bar");
  admin.modifyNamespace(ns1).join();
  ns1=admin.getNamespaceDescriptor(prefix + "ns1").get();
  assertEquals("bar",ns1.getConfigurationValue("foo"));
  runWithExpectedException(new Callable<Void>(){
    @Override public Void call() throws Exception {
      admin.modifyNamespace(NamespaceDescriptor.create("non_existing_namespace").build()).join();
      return null;
    }
  }
,NamespaceNotFoundException.class);
  admin.deleteNamespace(prefix + "ns1").join();
}
