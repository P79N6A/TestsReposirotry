@Test public void testAppend() throws IOException {
  int colCount=10;
  TableDescriptor htd=TableDescriptorBuilder.newBuilder(TableName.valueOf(currentTest.getMethodName())).setColumnFamily(ColumnFamilyDescriptorBuilder.of("column")).build();
  NavigableMap<byte[],Integer> scopes=new TreeMap<byte[],Integer>(Bytes.BYTES_COMPARATOR);
  for (  byte[] fam : htd.getColumnFamilyNames()) {
    scopes.put(fam,0);
  }
  byte[] row=Bytes.toBytes("row");
  WAL.Reader reader=null;
  final MultiVersionConcurrencyControl mvcc=new MultiVersionConcurrencyControl(1);
  try {
    long timestamp=System.currentTimeMillis();
    WALEdit cols=new WALEdit();
    for (int i=0; i < colCount; i++) {
      cols.add(new KeyValue(row,Bytes.toBytes("column"),Bytes.toBytes(Integer.toString(i)),timestamp,new byte[]{(byte)(i + '0')}));
    }
    RegionInfo hri=RegionInfoBuilder.newBuilder(htd.getTableName()).build();
    final WAL log=wals.getWAL(hri);
    final long txid=log.append(hri,new WALKeyImpl(hri.getEncodedNameAsBytes(),htd.getTableName(),System.currentTimeMillis(),mvcc,scopes),cols,true);
    log.sync(txid);
    log.startCacheFlush(hri.getEncodedNameAsBytes(),htd.getColumnFamilyNames());
    log.completeCacheFlush(hri.getEncodedNameAsBytes());
    log.shutdown();
    Path filename=AbstractFSWALProvider.getCurrentFileName(log);
    reader=wals.createReader(fs,filename);
    WAL.Entry entry=reader.next();
    assertEquals(colCount,entry.getEdit().size());
    int idx=0;
    for (    Cell val : entry.getEdit().getCells()) {
      assertTrue(Bytes.equals(hri.getEncodedNameAsBytes(),entry.getKey().getEncodedRegionName()));
      assertTrue(htd.getTableName().equals(entry.getKey().getTableName()));
      assertTrue(Bytes.equals(row,0,row.length,val.getRowArray(),val.getRowOffset(),val.getRowLength()));
      assertEquals((byte)(idx + '0'),CellUtil.cloneValue(val)[0]);
      System.out.println(entry.getKey() + " " + val);
      idx++;
    }
  }
  finally {
    if (reader != null) {
      reader.close();
    }
  }
}
