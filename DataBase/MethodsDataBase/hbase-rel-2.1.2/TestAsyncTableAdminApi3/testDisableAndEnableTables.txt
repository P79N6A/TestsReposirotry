@Test public void testDisableAndEnableTables() throws Exception {
  final TableName tableName1=TableName.valueOf(tableName.getNameAsString() + "1");
  final TableName tableName2=TableName.valueOf(tableName.getNameAsString() + "2");
  createTableWithDefaultConf(tableName1);
  createTableWithDefaultConf(tableName2);
  AsyncTable<?> table1=ASYNC_CONN.getTable(tableName1);
  AsyncTable<?> table2=ASYNC_CONN.getTable(tableName1);
  final byte[] row=Bytes.toBytes("row");
  final byte[] qualifier=Bytes.toBytes("qualifier");
  final byte[] value=Bytes.toBytes("value");
  Put put=new Put(row);
  put.addColumn(FAMILY,qualifier,value);
  table1.put(put).join();
  table2.put(put).join();
  Get get=new Get(row);
  get.addColumn(FAMILY,qualifier);
  table1.get(get).get();
  table2.get(get).get();
  admin.listTableNames(Pattern.compile(tableName.getNameAsString() + ".*"),false).get().forEach(t -> admin.disableTable(t).join());
  get=new Get(row);
  get.addColumn(FAMILY,qualifier);
  boolean ok=false;
  try {
    table1.get(get).get();
  }
 catch (  ExecutionException e) {
    ok=true;
  }
  assertTrue(ok);
  ok=false;
  try {
    table2.get(get).get();
  }
 catch (  ExecutionException e) {
    ok=true;
  }
  assertTrue(ok);
  assertEquals(TableState.State.DISABLED,TestAsyncTableAdminApi.getStateFromMeta(tableName1));
  assertEquals(TableState.State.DISABLED,TestAsyncTableAdminApi.getStateFromMeta(tableName2));
  admin.listTableNames(Pattern.compile(tableName.getNameAsString() + ".*"),false).get().forEach(t -> admin.enableTable(t).join());
  try {
    table1.get(get).get();
  }
 catch (  Exception e) {
    ok=false;
  }
  try {
    table2.get(get).get();
  }
 catch (  Exception e) {
    ok=false;
  }
  assertTrue(ok);
  assertEquals(TableState.State.ENABLED,TestAsyncTableAdminApi.getStateFromMeta(tableName1));
  assertEquals(TableState.State.ENABLED,TestAsyncTableAdminApi.getStateFromMeta(tableName2));
}
