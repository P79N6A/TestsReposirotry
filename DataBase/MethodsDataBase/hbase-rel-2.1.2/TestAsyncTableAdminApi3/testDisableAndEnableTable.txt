@Test public void testDisableAndEnableTable() throws Exception {
  createTableWithDefaultConf(tableName);
  AsyncTable<?> table=ASYNC_CONN.getTable(tableName);
  final byte[] row=Bytes.toBytes("row");
  final byte[] qualifier=Bytes.toBytes("qualifier");
  final byte[] value=Bytes.toBytes("value");
  Put put=new Put(row);
  put.addColumn(FAMILY,qualifier,value);
  table.put(put).join();
  Get get=new Get(row);
  get.addColumn(FAMILY,qualifier);
  table.get(get).get();
  this.admin.disableTable(tableName).join();
  assertTrue("Table must be disabled.",TEST_UTIL.getHBaseCluster().getMaster().getTableStateManager().isTableState(tableName,TableState.State.DISABLED));
  assertEquals(TableState.State.DISABLED,TestAsyncTableAdminApi.getStateFromMeta(tableName));
  get=new Get(row);
  get.addColumn(FAMILY,qualifier);
  boolean ok=false;
  try {
    table.get(get).get();
  }
 catch (  ExecutionException e) {
    ok=true;
  }
  ok=false;
  try {
    table.scanAll(new Scan()).get();
  }
 catch (  ExecutionException e) {
    ok=true;
  }
  assertTrue(ok);
  this.admin.enableTable(tableName).join();
  assertTrue("Table must be enabled.",TEST_UTIL.getHBaseCluster().getMaster().getTableStateManager().isTableState(tableName,TableState.State.ENABLED));
  assertEquals(TableState.State.ENABLED,TestAsyncTableAdminApi.getStateFromMeta(tableName));
  try {
    table.get(get).get();
  }
 catch (  Exception e) {
    ok=false;
  }
  assertTrue(ok);
}
