@Test public void testReplicationSourceWALReaderWrongPosition() throws Exception {
  appendEntriesToLogAndSync(1);
  Path walPath=walQueue.peek();
  log.rollWriter();
  appendEntriesToLogAndSync(20);
  TEST_UTIL.waitFor(5000,new ExplainingPredicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return fs.getFileStatus(walPath).getLen() > 0;
    }
    @Override public String explainFailure() throws Exception {
      return walPath + " has not been closed yet";
    }
  }
);
  long walLength=fs.getFileStatus(walPath).getLen();
  ReplicationSourceWALReader reader=createReader(false,CONF);
  WALEntryBatch entryBatch=reader.take();
  assertEquals(walPath,entryBatch.getLastWalPath());
  assertTrue("Position " + entryBatch.getLastWalPosition() + " is out of range, file length is "+ walLength,entryBatch.getLastWalPosition() <= walLength);
  assertEquals(1,entryBatch.getNbEntries());
  assertTrue(entryBatch.isEndOfFile());
  Path walPath2=walQueue.peek();
  entryBatch=reader.take();
  assertEquals(walPath2,entryBatch.getLastWalPath());
  assertEquals(20,entryBatch.getNbEntries());
  assertFalse(entryBatch.isEndOfFile());
  log.rollWriter();
  appendEntriesToLogAndSync(10);
  entryBatch=reader.take();
  assertEquals(walPath2,entryBatch.getLastWalPath());
  assertEquals(0,entryBatch.getNbEntries());
  assertTrue(entryBatch.isEndOfFile());
  Path walPath3=walQueue.peek();
  entryBatch=reader.take();
  assertEquals(walPath3,entryBatch.getLastWalPath());
  assertEquals(10,entryBatch.getNbEntries());
  assertFalse(entryBatch.isEndOfFile());
}
