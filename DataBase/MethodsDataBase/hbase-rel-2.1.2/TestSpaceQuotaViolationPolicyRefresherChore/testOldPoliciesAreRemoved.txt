@Test public void testOldPoliciesAreRemoved() throws IOException {
  final Map<TableName,SpaceQuotaSnapshot> previousPolicies=new HashMap<>();
  previousPolicies.put(TableName.valueOf("table3"),new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.NO_WRITES),4096L,512L));
  previousPolicies.put(TableName.valueOf("table4"),new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.NO_WRITES),8192L,512L));
  final Map<TableName,SpaceQuotaSnapshot> policiesToEnforce=new HashMap<>();
  policiesToEnforce.put(TableName.valueOf("table1"),new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.DISABLE),1024L,512L));
  policiesToEnforce.put(TableName.valueOf("table2"),new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.NO_INSERTS),2048L,512L));
  policiesToEnforce.put(TableName.valueOf("table3"),new SpaceQuotaSnapshot(SpaceQuotaStatus.notInViolation(),256L,512L));
  policiesToEnforce.put(TableName.valueOf("table4"),new SpaceQuotaSnapshot(SpaceQuotaStatus.notInViolation(),128L,512L));
  when(manager.copyQuotaSnapshots()).thenReturn(previousPolicies);
  when(chore.fetchSnapshotsFromQuotaTable()).thenReturn(policiesToEnforce);
  chore.chore();
  verify(manager).enforceViolationPolicy(TableName.valueOf("table1"),policiesToEnforce.get(TableName.valueOf("table1")));
  verify(manager).enforceViolationPolicy(TableName.valueOf("table2"),policiesToEnforce.get(TableName.valueOf("table2")));
  verify(manager).disableViolationPolicyEnforcement(TableName.valueOf("table3"));
  verify(manager).disableViolationPolicyEnforcement(TableName.valueOf("table4"));
}
