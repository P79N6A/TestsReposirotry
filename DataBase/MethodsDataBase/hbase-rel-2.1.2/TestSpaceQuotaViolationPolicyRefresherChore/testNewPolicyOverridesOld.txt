@Test public void testNewPolicyOverridesOld() throws IOException {
  final Map<TableName,SpaceQuotaSnapshot> policiesToEnforce=new HashMap<>();
  policiesToEnforce.put(TableName.valueOf("table1"),new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.DISABLE),1024L,512L));
  policiesToEnforce.put(TableName.valueOf("table2"),new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.NO_WRITES),2048L,512L));
  policiesToEnforce.put(TableName.valueOf("table3"),new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.NO_INSERTS),4096L,512L));
  final Map<TableName,SpaceQuotaSnapshot> previousPolicies=new HashMap<>();
  previousPolicies.put(TableName.valueOf("table1"),new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.NO_WRITES),8192L,512L));
  when(manager.getActivePoliciesAsMap()).thenReturn(previousPolicies);
  when(chore.fetchSnapshotsFromQuotaTable()).thenReturn(policiesToEnforce);
  chore.chore();
  for (  Entry<TableName,SpaceQuotaSnapshot> entry : policiesToEnforce.entrySet()) {
    verify(manager).enforceViolationPolicy(entry.getKey(),entry.getValue());
  }
  verify(manager,never()).disableViolationPolicyEnforcement(TableName.valueOf("table1"));
}
