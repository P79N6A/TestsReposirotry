@Test() public void testSecureWALReaderOnWAL() throws Exception {
  Configuration conf=TEST_UTIL.getConfiguration();
  conf.setClass("hbase.regionserver.hlog.reader.impl",SecureProtobufLogReader.class,WAL.Reader.class);
  conf.setClass("hbase.regionserver.hlog.writer.impl",ProtobufLogWriter.class,WALProvider.Writer.class);
  conf.setBoolean(WAL_ENCRYPTION,false);
  FileSystem fs=TEST_UTIL.getTestFileSystem();
  final WALFactory wals=new WALFactory(conf,ServerName.valueOf(currentTest.getMethodName(),16010,System.currentTimeMillis()).toString());
  Path walPath=writeWAL(wals,currentTest.getMethodName(),false);
  long length=fs.getFileStatus(walPath).getLen();
  FSDataInputStream in=fs.open(walPath);
  byte[] fileData=new byte[(int)length];
  IOUtils.readFully(in,fileData);
  in.close();
  assertTrue("Cells should be plaintext",Bytes.contains(fileData,value));
  try {
    WAL.Reader reader=wals.createReader(TEST_UTIL.getTestFileSystem(),walPath);
    reader.close();
  }
 catch (  IOException ioe) {
    assertFalse(true);
  }
  FileStatus[] listStatus=fs.listStatus(walPath.getParent());
  Path rootdir=FSUtils.getRootDir(conf);
  try {
    WALSplitter s=new WALSplitter(wals,conf,rootdir,fs,null,null);
    s.splitLogFile(listStatus[0],null);
    Path file=new Path(ZKSplitLog.getSplitLogDir(rootdir,listStatus[0].getPath().getName()),"corrupt");
    assertTrue(!fs.exists(file));
  }
 catch (  IOException ioe) {
    assertTrue("WAL should have been processed",false);
  }
  wals.close();
}
