@Test public void testCreateTableNumberOfRegions() throws Exception {
  AsyncTable<AdvancedScanResultConsumer> metaTable=ASYNC_CONN.getTable(META_TABLE_NAME);
  createTableWithDefaultConf(tableName);
  List<HRegionLocation> regionLocations=AsyncMetaTableAccessor.getTableHRegionLocations(metaTable,Optional.of(tableName)).get();
  assertEquals("Table should have only 1 region",1,regionLocations.size());
  final TableName tableName2=TableName.valueOf(tableName.getNameAsString() + "_2");
  createTableWithDefaultConf(tableName2,new byte[][]{new byte[]{42}});
  regionLocations=AsyncMetaTableAccessor.getTableHRegionLocations(metaTable,Optional.of(tableName2)).get();
  assertEquals("Table should have only 2 region",2,regionLocations.size());
  final TableName tableName3=TableName.valueOf(tableName.getNameAsString() + "_3");
  TableDescriptorBuilder builder=TableDescriptorBuilder.newBuilder(tableName3);
  builder.setColumnFamily(ColumnFamilyDescriptorBuilder.of(FAMILY));
  admin.createTable(builder.build(),"a".getBytes(),"z".getBytes(),3).join();
  regionLocations=AsyncMetaTableAccessor.getTableHRegionLocations(metaTable,Optional.of(tableName3)).get();
  assertEquals("Table should have only 3 region",3,regionLocations.size());
  final TableName tableName4=TableName.valueOf(tableName.getNameAsString() + "_4");
  builder=TableDescriptorBuilder.newBuilder(tableName4);
  builder.setColumnFamily(ColumnFamilyDescriptorBuilder.of(FAMILY));
  try {
    admin.createTable(builder.build(),"a".getBytes(),"z".getBytes(),2).join();
    fail("Should not be able to create a table with only 2 regions using this API.");
  }
 catch (  CompletionException e) {
    assertTrue(e.getCause() instanceof IllegalArgumentException);
  }
  final TableName tableName5=TableName.valueOf(tableName.getNameAsString() + "_5");
  builder=TableDescriptorBuilder.newBuilder(tableName5);
  builder.setColumnFamily(ColumnFamilyDescriptorBuilder.of(FAMILY));
  admin.createTable(builder.build(),new byte[]{1},new byte[]{127},16).join();
  regionLocations=AsyncMetaTableAccessor.getTableHRegionLocations(metaTable,Optional.of(tableName5)).get();
  assertEquals("Table should have 16 region",16,regionLocations.size());
}
