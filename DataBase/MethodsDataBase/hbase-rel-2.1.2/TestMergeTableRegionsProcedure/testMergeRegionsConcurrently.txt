/** 
 * This tests two concurrent region merges
 */
@Test public void testMergeRegionsConcurrently() throws Exception {
  final TableName tableName=TableName.valueOf("testMergeRegionsConcurrently");
  final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
  List<RegionInfo> tableRegions=createTable(tableName);
  RegionInfo[] regionsToMerge1=new RegionInfo[2];
  RegionInfo[] regionsToMerge2=new RegionInfo[2];
  regionsToMerge1[0]=tableRegions.get(0);
  regionsToMerge1[1]=tableRegions.get(1);
  regionsToMerge2[0]=tableRegions.get(2);
  regionsToMerge2[1]=tableRegions.get(3);
  collectAssignmentManagerMetrics();
  long procId1=procExec.submitProcedure(new MergeTableRegionsProcedure(procExec.getEnvironment(),regionsToMerge1,true));
  long procId2=procExec.submitProcedure(new MergeTableRegionsProcedure(procExec.getEnvironment(),regionsToMerge2,true));
  ProcedureTestingUtility.waitProcedure(procExec,procId1);
  ProcedureTestingUtility.waitProcedure(procExec,procId2);
  ProcedureTestingUtility.assertProcNotFailed(procExec,procId1);
  ProcedureTestingUtility.assertProcNotFailed(procExec,procId2);
  assertRegionCount(tableName,initialRegionCount - 2);
  assertEquals(mergeSubmittedCount + 2,mergeProcMetrics.getSubmittedCounter().getCount());
  assertEquals(mergeFailedCount,mergeProcMetrics.getFailedCounter().getCount());
  assertEquals(assignSubmittedCount + 2,assignProcMetrics.getSubmittedCounter().getCount());
  assertEquals(assignFailedCount,assignProcMetrics.getFailedCounter().getCount());
  assertEquals(unassignSubmittedCount + 4,unassignProcMetrics.getSubmittedCounter().getCount());
  assertEquals(unassignFailedCount,unassignProcMetrics.getFailedCounter().getCount());
}
