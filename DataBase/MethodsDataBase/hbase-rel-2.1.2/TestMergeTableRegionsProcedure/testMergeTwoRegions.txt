/** 
 * This tests two region merges
 */
@Test public void testMergeTwoRegions() throws Exception {
  final TableName tableName=TableName.valueOf(this.name.getMethodName());
  final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
  List<RegionInfo> tableRegions=createTable(tableName);
  RegionInfo[] regionsToMerge=new RegionInfo[2];
  regionsToMerge[0]=tableRegions.get(0);
  regionsToMerge[1]=tableRegions.get(1);
  collectAssignmentManagerMetrics();
  MergeTableRegionsProcedure proc=new MergeTableRegionsProcedure(procExec.getEnvironment(),regionsToMerge,true);
  long procId=procExec.submitProcedure(proc);
  ProcedureTestingUtility.waitProcedure(procExec,procId);
  ProcedureTestingUtility.assertProcNotFailed(procExec,procId);
  assertRegionCount(tableName,initialRegionCount - 1);
  assertEquals(mergeSubmittedCount + 1,mergeProcMetrics.getSubmittedCounter().getCount());
  assertEquals(mergeFailedCount,mergeProcMetrics.getFailedCounter().getCount());
  assertEquals(assignSubmittedCount + 1,assignProcMetrics.getSubmittedCounter().getCount());
  assertEquals(assignFailedCount,assignProcMetrics.getFailedCounter().getCount());
  assertEquals(unassignSubmittedCount + 2,unassignProcMetrics.getSubmittedCounter().getCount());
  assertEquals(unassignFailedCount,unassignProcMetrics.getFailedCounter().getCount());
  Pair<RegionInfo,RegionInfo> pair=MetaTableAccessor.getRegionsFromMergeQualifier(UTIL.getConnection(),proc.getMergedRegion().getRegionName());
  assertTrue(pair.getFirst() != null && pair.getSecond() != null);
  UTIL.getHBaseCluster().getMaster().setCatalogJanitorEnabled(true);
  UTIL.getHBaseCluster().getMaster().getCatalogJanitor().triggerNow();
  while (pair != null && pair.getFirst() != null && pair.getSecond() != null) {
    pair=MetaTableAccessor.getRegionsFromMergeQualifier(UTIL.getConnection(),proc.getMergedRegion().getRegionName());
  }
}
