@Test public void testCleanReplicationBarrierWithExistTable() throws Exception {
  TableName tableName=TableName.valueOf(TABLE_NAME);
  String cf=COLUMN_FAMILY;
  TableDescriptor tableDescriptor=TableDescriptorBuilder.newBuilder(tableName).setColumnFamily(ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes(cf)).build()).setReplicationScope(HConstants.REPLICATION_SCOPE_LOCAL).build();
  UTIL.createTable(tableDescriptor,Bytes.split(Bytes.toBytes(1),Bytes.toBytes(256),123));
  assertTrue(UTIL.getAdmin().getRegions(tableName).size() > 0);
  for (  RegionInfo region : UTIL.getAdmin().getRegions(tableName)) {
    addStateAndBarrier(region,RegionState.State.OFFLINE,10,100);
    updatePushedSeqId(region,10);
    assertEquals("check if there is lastPushedId",10,QUEUE_STORAGE.getLastSequenceId(region.getEncodedName(),PEER_1));
    assertEquals("check if there is lastPushedId",10,QUEUE_STORAGE.getLastSequenceId(region.getEncodedName(),PEER_2));
  }
  boolean cleaned=HbckTestingUtil.cleanReplicationBarrier(UTIL.getConfiguration(),tableName);
  assertTrue(cleaned);
  for (  RegionInfo region : UTIL.getAdmin().getRegions(tableName)) {
    assertEquals("check if there is lastPushedId",-1,QUEUE_STORAGE.getLastSequenceId(region.getEncodedName(),PEER_1));
    assertEquals("check if there is lastPushedId",-1,QUEUE_STORAGE.getLastSequenceId(region.getEncodedName(),PEER_2));
  }
  cleaned=HbckTestingUtil.cleanReplicationBarrier(UTIL.getConfiguration(),tableName);
  assertFalse(cleaned);
  for (  RegionInfo region : UTIL.getAdmin().getRegions(tableName)) {
    assertEquals(0,MetaTableAccessor.getReplicationBarrier(UTIL.getConnection(),region.getRegionName()).length);
  }
}
