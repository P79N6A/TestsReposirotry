@Test public void testCleanReplicationBarrierWithDeletedTable() throws Exception {
  TableName tableName=TableName.valueOf(TABLE_NAME + "_deleted");
  List<RegionInfo> regionInfos=new ArrayList<>();
  for (int i=0; i < 110; i++) {
    RegionInfo regionInfo=RegionInfoBuilder.newBuilder(tableName).setStartKey(Bytes.toBytes(i)).setEndKey(Bytes.toBytes(i + 1)).build();
    regionInfos.add(regionInfo);
    addStateAndBarrier(regionInfo,RegionState.State.OPEN,10,100);
    updatePushedSeqId(regionInfo,10);
    assertEquals("check if there is lastPushedId",10,QUEUE_STORAGE.getLastSequenceId(regionInfo.getEncodedName(),PEER_1));
    assertEquals("check if there is lastPushedId",10,QUEUE_STORAGE.getLastSequenceId(regionInfo.getEncodedName(),PEER_2));
  }
  Scan barrierScan=new Scan();
  barrierScan.setCaching(100);
  barrierScan.addFamily(HConstants.REPLICATION_BARRIER_FAMILY);
  barrierScan.withStartRow(MetaTableAccessor.getTableStartRowForMeta(tableName,MetaTableAccessor.QueryType.REGION)).withStopRow(MetaTableAccessor.getTableStopRowForMeta(tableName,MetaTableAccessor.QueryType.REGION));
  Result result;
  try (ResultScanner scanner=MetaTableAccessor.getMetaHTable(UTIL.getConnection()).getScanner(barrierScan)){
    while ((result=scanner.next()) != null) {
      assertTrue(MetaTableAccessor.getReplicationBarriers(result).length > 0);
    }
  }
   boolean cleaned=HbckTestingUtil.cleanReplicationBarrier(UTIL.getConfiguration(),tableName);
  assertTrue(cleaned);
  for (  RegionInfo regionInfo : regionInfos) {
    assertEquals("check if there is lastPushedId",-1,QUEUE_STORAGE.getLastSequenceId(regionInfo.getEncodedName(),PEER_1));
    assertEquals("check if there is lastPushedId",-1,QUEUE_STORAGE.getLastSequenceId(regionInfo.getEncodedName(),PEER_2));
  }
  cleaned=HbckTestingUtil.cleanReplicationBarrier(UTIL.getConfiguration(),tableName);
  assertFalse(cleaned);
  for (  RegionInfo region : regionInfos) {
    assertEquals(0,MetaTableAccessor.getReplicationBarrier(UTIL.getConnection(),region.getRegionName()).length);
  }
}
