/** 
 * Test the overridden functionality of filterCell(Cell)
 * @throws Exception
 */
@Test public void testFilterCell() throws Exception {
  Filter filter=new SingleColumnValueExcludeFilter(COLUMN_FAMILY,COLUMN_QUALIFIER,CompareOperator.EQUAL,VAL_1);
  List<Cell> kvs=new ArrayList<>();
  KeyValue c=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1);
  kvs.add(new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1));
  kvs.add(new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER,VAL_1));
  kvs.add(new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1));
  filter.filterRowCells(kvs);
  assertEquals("resultSize",2,kvs.size());
  assertTrue("leftKV1",CellComparatorImpl.COMPARATOR.compare(kvs.get(0),c) == 0);
  assertTrue("leftKV2",CellComparatorImpl.COMPARATOR.compare(kvs.get(1),c) == 0);
  assertFalse("allRemainingWhenMatch",filter.filterAllRemaining());
  filter.reset();
  c=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1);
  assertTrue("otherColumn",filter.filterCell(c) == Filter.ReturnCode.INCLUDE);
  c=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER,VAL_2);
  assertTrue("testedMismatch",filter.filterCell(c) == Filter.ReturnCode.NEXT_ROW);
  c=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1);
  assertTrue("otherColumn",filter.filterCell(c) == Filter.ReturnCode.NEXT_ROW);
}
