@Test public void testCloseScannerWhileSuspending() throws Exception {
  try (ResultScanner scanner=TABLE.getScanner(new Scan().setMaxResultSize(1))){
    TEST_UTIL.waitFor(10000,100,new ExplainingPredicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return ((AsyncTableResultScanner)scanner).isSuspended();
      }
      @Override public String explainFailure() throws Exception {
        return "The given scanner has been suspended in time";
      }
    }
);
    assertEquals(1,getScannersCount());
  }
   TEST_UTIL.waitFor(10000,100,new ExplainingPredicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return getScannersCount() == 0;
    }
    @Override public String explainFailure() throws Exception {
      return "Still have " + getScannersCount() + " scanners opened";
    }
  }
);
}
