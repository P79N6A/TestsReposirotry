@Ignore @Test public void testNotPullingDeadRegionServerFromZK() throws IOException, KeeperException, InterruptedException {
  final Configuration conf=TESTUTIL.getConfiguration();
  final ServerName newServer=ServerName.valueOf("test.sample",1,101);
  final ServerName deadServer=ServerName.valueOf("test.sample",1,100);
  final MockRegionServer rs0=new MockRegionServer(conf,newServer);
  HMaster master=new HMaster(conf){
    @Override protected MasterMetaBootstrap createMetaBootstrap(){
      return new MasterMetaBootstrap(this){
        @Override protected void assignMetaReplicas() throws IOException, InterruptedException, KeeperException {
        }
      }
;
    }
    @Override protected void initClusterSchemaService() throws IOException, InterruptedException {
    }
    @Override protected void initializeZKBasedSystemTrackers() throws IOException, InterruptedException, KeeperException, ReplicationException {
      super.initializeZKBasedSystemTrackers();
      getServerManager().recordNewServerWithLock(newServer,new ServerLoad(ServerMetricsBuilder.of(newServer)));
    }
    @Override public ClusterConnection getConnection(){
      try {
        return HConnectionTestingUtility.getMockedConnectionAndDecorate(TESTUTIL.getConfiguration(),rs0,rs0,rs0.getServerName(),HRegionInfo.FIRST_META_REGIONINFO);
      }
 catch (      IOException e) {
        return null;
      }
    }
  }
;
  master.start();
  try {
    while (!master.isInitialized())     Threads.sleep(10);
    LOG.info("Master is initialized");
    assertFalse("The dead server should not be pulled in",master.getServerManager().isServerOnline(deadServer));
  }
  finally {
    master.stopMaster();
    master.join();
  }
}
