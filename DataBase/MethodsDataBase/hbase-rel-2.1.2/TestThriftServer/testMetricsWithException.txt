@Test public void testMetricsWithException() throws Exception {
  String rowkey="row1";
  String family="f";
  String col="c";
  final TableName tableName=TableName.valueOf(name.getMethodName());
  HTableDescriptor tableDesc=new HTableDescriptor(tableName);
  tableDesc.addCoprocessor(ErrorThrowingGetObserver.class.getName());
  tableDesc.addFamily(new HColumnDescriptor(family));
  Table table=UTIL.createTable(tableDesc,null);
  long now=System.currentTimeMillis();
  table.put(new Put(Bytes.toBytes(rowkey)).addColumn(Bytes.toBytes(family),Bytes.toBytes(col),now,Bytes.toBytes("val1")));
  Configuration conf=UTIL.getConfiguration();
  ThriftMetrics metrics=getMetrics(conf);
  ThriftServerRunner.HBaseHandler hbaseHandler=new ThriftServerRunner.HBaseHandler(UTIL.getConfiguration(),UserProvider.instantiate(UTIL.getConfiguration()));
  Hbase.Iface handler=HbaseHandlerMetricsProxy.newInstance(hbaseHandler,metrics,conf);
  ByteBuffer tTableName=asByteBuffer(tableName.getNameAsString());
  long preGetCounter=metricsHelper.checkCounterExists("getRow_num_ops",metrics.getSource()) ? metricsHelper.getCounter("getRow_num_ops",metrics.getSource()) : 0;
  List<TRowResult> tRowResult=handler.getRow(tTableName,asByteBuffer(rowkey),null);
  assertEquals(1,tRowResult.size());
  TRowResult tResult=tRowResult.get(0);
  TCell expectedColumnValue=new TCell(asByteBuffer("val1"),now);
  assertArrayEquals(Bytes.toBytes(rowkey),tResult.getRow());
  Collection<TCell> returnedColumnValues=tResult.getColumns().values();
  assertEquals(1,returnedColumnValues.size());
  assertEquals(expectedColumnValue,returnedColumnValues.iterator().next());
  metricsHelper.assertCounter("getRow_num_ops",preGetCounter + 1,metrics.getSource());
  for (  ErrorThrowingGetObserver.ErrorType type : ErrorThrowingGetObserver.ErrorType.values()) {
    testExceptionType(handler,metrics,tTableName,rowkey,type);
  }
}
