@Test public void testParseTableCFsFromConfig(){
  Map<TableName,List<String>> tabCFsMap=null;
  tabCFsMap=ReplicationPeerConfigUtil.parseTableCFsFromConfig(null);
  assertEquals(null,tabCFsMap);
  tabCFsMap=ReplicationPeerConfigUtil.parseTableCFsFromConfig("");
  assertEquals(null,tabCFsMap);
  tabCFsMap=ReplicationPeerConfigUtil.parseTableCFsFromConfig("   ");
  assertEquals(null,tabCFsMap);
  final TableName tableName1=TableName.valueOf(name.getMethodName() + "1");
  final TableName tableName2=TableName.valueOf(name.getMethodName() + "2");
  final TableName tableName3=TableName.valueOf(name.getMethodName() + "3");
  tabCFsMap=ReplicationPeerConfigUtil.parseTableCFsFromConfig(tableName1.getNameAsString());
  assertEquals(1,tabCFsMap.size());
  assertTrue(tabCFsMap.containsKey(tableName1));
  assertFalse(tabCFsMap.containsKey(tableName2));
  assertEquals(null,tabCFsMap.get(tableName1));
  tabCFsMap=ReplicationPeerConfigUtil.parseTableCFsFromConfig(tableName2 + ":cf1");
  assertEquals(1,tabCFsMap.size());
  assertTrue(tabCFsMap.containsKey(tableName2));
  assertFalse(tabCFsMap.containsKey(tableName1));
  assertEquals(1,tabCFsMap.get(tableName2).size());
  assertEquals("cf1",tabCFsMap.get(tableName2).get(0));
  tabCFsMap=ReplicationPeerConfigUtil.parseTableCFsFromConfig(tableName3 + " : cf1 , cf3");
  assertEquals(1,tabCFsMap.size());
  assertTrue(tabCFsMap.containsKey(tableName3));
  assertFalse(tabCFsMap.containsKey(tableName1));
  assertEquals(2,tabCFsMap.get(tableName3).size());
  assertTrue(tabCFsMap.get(tableName3).contains("cf1"));
  assertTrue(tabCFsMap.get(tableName3).contains("cf3"));
  tabCFsMap=ReplicationPeerConfigUtil.parseTableCFsFromConfig(tableName1 + " ; " + tableName2+ ":cf1 ; "+ tableName3+ ":cf1,cf3");
  assertEquals(3,tabCFsMap.size());
  assertTrue(tabCFsMap.containsKey(tableName1));
  assertTrue(tabCFsMap.containsKey(tableName2));
  assertTrue(tabCFsMap.containsKey(tableName3));
  assertEquals(null,tabCFsMap.get(tableName1));
  assertEquals(1,tabCFsMap.get(tableName2).size());
  assertEquals("cf1",tabCFsMap.get(tableName2).get(0));
  assertEquals(2,tabCFsMap.get(tableName3).size());
  assertTrue(tabCFsMap.get(tableName3).contains("cf1"));
  assertTrue(tabCFsMap.get(tableName3).contains("cf3"));
  tabCFsMap=ReplicationPeerConfigUtil.parseTableCFsFromConfig(tableName1 + " ; ; " + tableName2+ ":cf1 ; "+ tableName3+ ":cf1,,cf3 ;");
  assertEquals(3,tabCFsMap.size());
  assertTrue(tabCFsMap.containsKey(tableName1));
  assertTrue(tabCFsMap.containsKey(tableName2));
  assertTrue(tabCFsMap.containsKey(tableName3));
  assertEquals(null,tabCFsMap.get(tableName1));
  assertEquals(1,tabCFsMap.get(tableName2).size());
  assertEquals("cf1",tabCFsMap.get(tableName2).get(0));
  assertEquals(2,tabCFsMap.get(tableName3).size());
  assertTrue(tabCFsMap.get(tableName3).contains("cf1"));
  assertTrue(tabCFsMap.get(tableName3).contains("cf3"));
  tabCFsMap=ReplicationPeerConfigUtil.parseTableCFsFromConfig(tableName1 + ":tt:cf1 ; " + tableName2+ "::cf1 ; "+ tableName3+ ":cf1,cf3");
  assertEquals(1,tabCFsMap.size());
  assertFalse(tabCFsMap.containsKey(tableName1));
  assertFalse(tabCFsMap.containsKey(tableName2));
  assertTrue(tabCFsMap.containsKey(tableName3));
  assertEquals(2,tabCFsMap.get(tableName3).size());
  assertTrue(tabCFsMap.get(tableName3).contains("cf1"));
  assertTrue(tabCFsMap.get(tableName3).contains("cf3"));
}
