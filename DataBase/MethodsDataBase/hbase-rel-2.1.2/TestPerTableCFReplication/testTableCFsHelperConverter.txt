@Test public void testTableCFsHelperConverter(){
  ReplicationProtos.TableCF[] tableCFs=null;
  Map<TableName,List<String>> tabCFsMap=null;
  assertNull(ReplicationPeerConfigUtil.convert(tabCFsMap));
  tabCFsMap=new HashMap<>();
  tableCFs=ReplicationPeerConfigUtil.convert(tabCFsMap);
  assertEquals(0,tableCFs.length);
  final TableName tableName1=TableName.valueOf(name.getMethodName() + "1");
  final TableName tableName2=TableName.valueOf(name.getMethodName() + "2");
  final TableName tableName3=TableName.valueOf(name.getMethodName() + "3");
  tabCFsMap.clear();
  tabCFsMap.put(tableName1,null);
  tableCFs=ReplicationPeerConfigUtil.convert(tabCFsMap);
  assertEquals(1,tableCFs.length);
  assertEquals(tableName1.toString(),tableCFs[0].getTableName().getQualifier().toStringUtf8());
  assertEquals(0,tableCFs[0].getFamiliesCount());
  tabCFsMap.clear();
  tabCFsMap.put(tableName2,new ArrayList<>());
  tabCFsMap.get(tableName2).add("cf1");
  tableCFs=ReplicationPeerConfigUtil.convert(tabCFsMap);
  assertEquals(1,tableCFs.length);
  assertEquals(tableName2.toString(),tableCFs[0].getTableName().getQualifier().toStringUtf8());
  assertEquals(1,tableCFs[0].getFamiliesCount());
  assertEquals("cf1",tableCFs[0].getFamilies(0).toStringUtf8());
  tabCFsMap.clear();
  tabCFsMap.put(tableName3,new ArrayList<>());
  tabCFsMap.get(tableName3).add("cf1");
  tabCFsMap.get(tableName3).add("cf3");
  tableCFs=ReplicationPeerConfigUtil.convert(tabCFsMap);
  assertEquals(1,tableCFs.length);
  assertEquals(tableName3.toString(),tableCFs[0].getTableName().getQualifier().toStringUtf8());
  assertEquals(2,tableCFs[0].getFamiliesCount());
  assertEquals("cf1",tableCFs[0].getFamilies(0).toStringUtf8());
  assertEquals("cf3",tableCFs[0].getFamilies(1).toStringUtf8());
  tabCFsMap.clear();
  tabCFsMap.put(tableName1,null);
  tabCFsMap.put(tableName2,new ArrayList<>());
  tabCFsMap.get(tableName2).add("cf1");
  tabCFsMap.put(tableName3,new ArrayList<>());
  tabCFsMap.get(tableName3).add("cf1");
  tabCFsMap.get(tableName3).add("cf3");
  tableCFs=ReplicationPeerConfigUtil.convert(tabCFsMap);
  assertEquals(3,tableCFs.length);
  assertNotNull(ReplicationPeerConfigUtil.getTableCF(tableCFs,tableName1.toString()));
  assertNotNull(ReplicationPeerConfigUtil.getTableCF(tableCFs,tableName2.toString()));
  assertNotNull(ReplicationPeerConfigUtil.getTableCF(tableCFs,tableName3.toString()));
  assertEquals(0,ReplicationPeerConfigUtil.getTableCF(tableCFs,tableName1.toString()).getFamiliesCount());
  assertEquals(1,ReplicationPeerConfigUtil.getTableCF(tableCFs,tableName2.toString()).getFamiliesCount());
  assertEquals("cf1",ReplicationPeerConfigUtil.getTableCF(tableCFs,tableName2.toString()).getFamilies(0).toStringUtf8());
  assertEquals(2,ReplicationPeerConfigUtil.getTableCF(tableCFs,tableName3.toString()).getFamiliesCount());
  assertEquals("cf1",ReplicationPeerConfigUtil.getTableCF(tableCFs,tableName3.toString()).getFamilies(0).toStringUtf8());
  assertEquals("cf3",ReplicationPeerConfigUtil.getTableCF(tableCFs,tableName3.toString()).getFamilies(1).toStringUtf8());
  tabCFsMap=ReplicationPeerConfigUtil.convert2Map(tableCFs);
  assertEquals(3,tabCFsMap.size());
  assertTrue(tabCFsMap.containsKey(tableName1));
  assertTrue(tabCFsMap.containsKey(tableName2));
  assertTrue(tabCFsMap.containsKey(tableName3));
  assertEquals(null,tabCFsMap.get(tableName1));
  assertEquals(1,tabCFsMap.get(tableName2).size());
  assertEquals("cf1",tabCFsMap.get(tableName2).get(0));
  assertEquals(2,tabCFsMap.get(tableName3).size());
  assertTrue(tabCFsMap.get(tableName3).contains("cf1"));
  assertTrue(tabCFsMap.get(tableName3).contains("cf3"));
}
