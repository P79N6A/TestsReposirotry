@Test public void testMultiRegionTable() throws IOException, InterruptedException {
  createMultiRegionTable();
  byte[][] startKeys=getStartKeys();
  ServerName[] serverNames=getLocations(startKeys);
  IntStream.range(0,2).forEach(n -> IntStream.range(0,startKeys.length).forEach(i -> {
    try {
      assertLocEquals(startKeys[i],i == startKeys.length - 1 ? EMPTY_END_ROW : startKeys[i + 1],serverNames[i],LOCATOR.getRegionLocation(TABLE_NAME,startKeys[i],RegionLocateType.CURRENT,false).get());
    }
 catch (    InterruptedException|ExecutionException e) {
      throw new RuntimeException(e);
    }
  }
));
  LOCATOR.clearCache(TABLE_NAME);
  IntStream.range(0,2).forEach(n -> IntStream.range(0,startKeys.length).forEach(i -> {
    try {
      assertLocEquals(startKeys[i],i == startKeys.length - 1 ? EMPTY_END_ROW : startKeys[i + 1],serverNames[i],LOCATOR.getRegionLocation(TABLE_NAME,startKeys[i],RegionLocateType.AFTER,false).get());
    }
 catch (    InterruptedException|ExecutionException e) {
      throw new RuntimeException(e);
    }
  }
));
  LOCATOR.clearCache(TABLE_NAME);
  byte[][] endKeys=getEndKeys();
  IntStream.range(0,2).forEach(n -> IntStream.range(0,endKeys.length).map(i -> endKeys.length - 1 - i).forEach(i -> {
    try {
      assertLocEquals(i == 0 ? EMPTY_START_ROW : endKeys[i - 1],endKeys[i],serverNames[i],LOCATOR.getRegionLocation(TABLE_NAME,endKeys[i],RegionLocateType.BEFORE,false).get());
    }
 catch (    InterruptedException|ExecutionException e) {
      throw new RuntimeException(e);
    }
  }
));
}
