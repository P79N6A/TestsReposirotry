@Test public void testReload() throws Exception {
  createSingleRegionTable();
  ServerName serverName=TEST_UTIL.getRSForFirstRegionInTable(TABLE_NAME).getServerName();
  for (  RegionLocateType locateType : RegionLocateType.values()) {
    assertLocEquals(EMPTY_START_ROW,EMPTY_END_ROW,serverName,LOCATOR.getRegionLocation(TABLE_NAME,EMPTY_START_ROW,locateType,false).get());
  }
  ServerName newServerName=TEST_UTIL.getHBaseCluster().getRegionServerThreads().stream().map(t -> t.getRegionServer().getServerName()).filter(sn -> !sn.equals(serverName)).findAny().get();
  Admin admin=TEST_UTIL.getAdmin();
  RegionInfo region=admin.getRegions(TABLE_NAME).stream().findAny().get();
  admin.move(region.getEncodedNameAsBytes(),Bytes.toBytes(newServerName.getServerName()));
  TEST_UTIL.waitFor(30000,new ExplainingPredicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      ServerName newServerName=TEST_UTIL.getRSForFirstRegionInTable(TABLE_NAME).getServerName();
      return newServerName != null && !newServerName.equals(serverName);
    }
    @Override public String explainFailure() throws Exception {
      return region.getRegionNameAsString() + " is still on " + serverName;
    }
  }
);
  for (  RegionLocateType locateType : RegionLocateType.values()) {
    assertLocEquals(EMPTY_START_ROW,EMPTY_END_ROW,serverName,LOCATOR.getRegionLocation(TABLE_NAME,EMPTY_START_ROW,locateType,false).get());
  }
  assertLocEquals(EMPTY_START_ROW,EMPTY_END_ROW,newServerName,LOCATOR.getRegionLocation(TABLE_NAME,EMPTY_START_ROW,RegionLocateType.CURRENT,true).get());
  for (  RegionLocateType locateType : RegionLocateType.values()) {
    assertLocEquals(EMPTY_START_ROW,EMPTY_END_ROW,newServerName,LOCATOR.getRegionLocation(TABLE_NAME,EMPTY_START_ROW,locateType,false).get());
  }
}
