@Test public void testDecommissionRegionServers() throws Exception {
  List<ServerName> decommissionedRegionServers=admin.listDecommissionedRegionServers();
  assertTrue(decommissionedRegionServers.isEmpty());
  final TableName tableName=TableName.valueOf(name.getMethodName());
  TEST_UTIL.createMultiRegionTable(tableName,Bytes.toBytes("f"),6);
  ArrayList<ServerName> clusterRegionServers=new ArrayList<>(admin.getClusterMetrics(EnumSet.of(Option.LIVE_SERVERS)).getLiveServerMetrics().keySet());
  assertEquals(3,clusterRegionServers.size());
  HashMap<ServerName,List<RegionInfo>> serversToDecommssion=new HashMap<>();
  int i;
  for (i=0; i < clusterRegionServers.size(); i++) {
    List<RegionInfo> regionsOnServer=admin.getRegions(clusterRegionServers.get(i));
    if (regionsOnServer.size() > 0) {
      serversToDecommssion.put(clusterRegionServers.get(i),regionsOnServer);
      break;
    }
  }
  clusterRegionServers.remove(i);
  serversToDecommssion.put(clusterRegionServers.get(0),admin.getRegions(clusterRegionServers.get(0)));
  ServerName remainingServer=clusterRegionServers.get(1);
  admin.decommissionRegionServers(new ArrayList<ServerName>(serversToDecommssion.keySet()),true);
  assertEquals(2,admin.listDecommissionedRegionServers().size());
  for (  ServerName server : serversToDecommssion.keySet()) {
    for (    RegionInfo region : serversToDecommssion.get(server)) {
      TEST_UTIL.assertRegionOnServer(region,remainingServer,10000);
    }
  }
  for (  ServerName server : serversToDecommssion.keySet()) {
    List<byte[]> encodedRegionNames=serversToDecommssion.get(server).stream().map(region -> region.getEncodedNameAsBytes()).collect(Collectors.toList());
    admin.recommissionRegionServer(server,encodedRegionNames);
  }
  assertTrue(admin.listDecommissionedRegionServers().isEmpty());
  for (  ServerName server : serversToDecommssion.keySet()) {
    for (    RegionInfo region : serversToDecommssion.get(server)) {
      TEST_UTIL.assertRegionOnServer(region,server,10000);
    }
  }
}
