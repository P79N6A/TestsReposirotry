@Test public void testEnableReplicationForExplicitSetTableCfs() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  String peerId="2";
  if (admin2.isTableAvailable(TestReplicationBase.tableName)) {
    admin2.disableTable(TestReplicationBase.tableName);
    admin2.deleteTable(TestReplicationBase.tableName);
  }
  assertFalse("Table should not exists in the peer cluster",admin2.isTableAvailable(TestReplicationBase.tableName));
  ReplicationPeerConfig rpc=admin1.getReplicationPeerConfig(peerId);
  rpc.setReplicateAllUserTables(false);
  admin1.updateReplicationPeerConfig(peerId,rpc);
  Map<TableName,? extends Collection<String>> tableCfs=new HashMap<>();
  tableCfs.put(tableName,null);
  try {
    adminExt.setPeerTableCFs(peerId,tableCfs);
    admin1.enableTableReplication(TestReplicationBase.tableName);
    assertFalse("Table should not be created if user has set table cfs explicitly for the " + "peer and this is not part of that collection",admin2.isTableAvailable(TestReplicationBase.tableName));
    tableCfs.put(TestReplicationBase.tableName,null);
    adminExt.setPeerTableCFs(peerId,tableCfs);
    admin1.enableTableReplication(TestReplicationBase.tableName);
    assertTrue("Table should be created if user has explicitly added table into table cfs collection",admin2.isTableAvailable(TestReplicationBase.tableName));
  }
  finally {
    adminExt.removePeerTableCFs(peerId,adminExt.getPeerTableCFs(peerId));
    admin1.disableTableReplication(TestReplicationBase.tableName);
    rpc=admin1.getReplicationPeerConfig(peerId);
    rpc.setReplicateAllUserTables(true);
    admin1.updateReplicationPeerConfig(peerId,rpc);
  }
}
