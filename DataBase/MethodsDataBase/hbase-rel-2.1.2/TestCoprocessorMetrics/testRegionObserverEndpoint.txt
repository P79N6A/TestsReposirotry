@Test public void testRegionObserverEndpoint() throws IOException, ServiceException {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  try (Connection connection=ConnectionFactory.createConnection(UTIL.getConfiguration());Admin admin=connection.getAdmin()){
    admin.createTable(new HTableDescriptor(tableName).addFamily(new HColumnDescriptor(foo)).addCoprocessor(CustomRegionEndpoint.class.getName()));
    try (Table table=connection.getTable(tableName)){
      List<Mutation> mutations=Lists.newArrayList(new Put(foo),new Put(bar));
      MutateRowsRequest.Builder mrmBuilder=MutateRowsRequest.newBuilder();
      for (      Mutation mutation : mutations) {
        mrmBuilder.addMutationRequest(ProtobufUtil.toMutation(ClientProtos.MutationProto.MutationType.PUT,mutation));
      }
      CoprocessorRpcChannel channel=table.coprocessorService(bar);
      MultiRowMutationService.BlockingInterface service=MultiRowMutationService.newBlockingStub(channel);
      MutateRowsRequest mrm=mrmBuilder.build();
      service.mutateRows(null,mrm);
    }
   }
   MetricRegistryInfo info=MetricsCoprocessor.createRegistryInfoForRegionCoprocessor(CustomRegionEndpoint.class.getName());
  Optional<MetricRegistry> registry=MetricRegistries.global().get(info);
  assertTrue(registry.isPresent());
  Optional<Metric> metric=registry.get().get("EndpointExecution");
  assertTrue(metric.isPresent());
  Timer endpointExecutions=(Timer)metric.get();
  assertEquals(1,endpointExecutions.getHistogram().getCount());
}
