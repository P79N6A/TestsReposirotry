@Test public void testRegionObserverAfterRegionClosed() throws IOException {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  try (Connection connection=ConnectionFactory.createConnection(UTIL.getConfiguration());Admin admin=connection.getAdmin()){
    admin.createTable(new HTableDescriptor(tableName).addFamily(new HColumnDescriptor(foo)).addCoprocessor(CustomRegionObserver.class.getName()),new byte[][]{foo});
    try (Table table=connection.getTable(tableName)){
      table.get(new Get(foo));
      table.get(new Get(foo));
    }
     assertPreGetRequestsCounter(CustomRegionObserver.class);
    try (RegionLocator locator=connection.getRegionLocator(tableName)){
      HRegionLocation loc=locator.getRegionLocation(foo);
      admin.unassign(loc.getRegionInfo().getEncodedNameAsBytes(),true);
      HRegionServer server=UTIL.getMiniHBaseCluster().getRegionServer(loc.getServerName());
      UTIL.waitFor(30000,() -> server.getOnlineRegion(loc.getRegionInfo().getRegionName()) == null);
      assertNull(server.getOnlineRegion(loc.getRegionInfo().getRegionName()));
    }
     assertPreGetRequestsCounter(CustomRegionObserver.class);
    admin.disableTable(tableName);
    MetricRegistryInfo info=MetricsCoprocessor.createRegistryInfoForRegionCoprocessor(CustomRegionObserver.class.getName());
    Optional<MetricRegistry> registry=MetricRegistries.global().get(info);
    assertFalse(registry.isPresent());
  }
 }
