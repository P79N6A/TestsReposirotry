@Test public void testScanWithBatchSize() throws Exception {
  ThriftHBaseServiceHandler handler=createHandler();
  ByteBuffer table=wrap(tableAname);
  List<TColumnValue> columnValues=new ArrayList<>(100);
  for (int i=0; i < 100; i++) {
    String colNum=pad(i,(byte)3);
    TColumnValue columnValue=new TColumnValue(wrap(familyAname),wrap(Bytes.toBytes("col" + colNum)),wrap(Bytes.toBytes("val" + colNum)));
    columnValues.add(columnValue);
  }
  TPut put=new TPut(wrap(Bytes.toBytes("testScanWithBatchSize")),columnValues);
  handler.put(table,put);
  TScan scan=new TScan();
  List<TColumn> columns=new ArrayList<>(1);
  TColumn column=new TColumn();
  column.setFamily(familyAname);
  columns.add(column);
  scan.setColumns(columns);
  scan.setStartRow(Bytes.toBytes("testScanWithBatchSize"));
  scan.setStopRow(Bytes.toBytes("testScanWithBatchSize\uffff"));
  scan.setBatchSize(10);
  int scanId=handler.openScanner(table,scan);
  List<TResult> results=null;
  for (int i=0; i < 10; i++) {
    results=handler.getScannerRows(scanId,1);
    assertEquals(1,results.size());
    List<TColumnValue> cols=results.get(0).getColumnValues();
    assertEquals(10,cols.size());
    for (int y=0; y < 10; y++) {
      int colNum=y + (10 * i);
      String colNumPad=pad(colNum,(byte)3);
      assertArrayEquals(Bytes.toBytes("col" + colNumPad),cols.get(y).getQualifier());
    }
  }
  results=handler.getScannerRows(scanId,1);
  assertEquals(0,results.size());
  handler.closeScanner(scanId);
  try {
    handler.getScannerRows(scanId,1);
    fail("Scanner id should be invalid");
  }
 catch (  TIllegalArgument e) {
  }
}
