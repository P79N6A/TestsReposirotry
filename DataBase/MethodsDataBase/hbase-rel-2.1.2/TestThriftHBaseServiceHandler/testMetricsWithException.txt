@Test public void testMetricsWithException() throws Exception {
  byte[] rowkey=Bytes.toBytes("row1");
  byte[] family=Bytes.toBytes("f");
  byte[] col=Bytes.toBytes("c");
  TableName tableName=TableName.valueOf(name.getMethodName());
  HTableDescriptor tableDesc=new HTableDescriptor(tableName);
  tableDesc.addCoprocessor(ErrorThrowingGetObserver.class.getName());
  tableDesc.addFamily(new HColumnDescriptor(family));
  Table table=UTIL.createTable(tableDesc,null);
  table.put(new Put(rowkey).addColumn(family,col,Bytes.toBytes("val1")));
  ThriftHBaseServiceHandler hbaseHandler=createHandler();
  ThriftMetrics metrics=getMetrics(UTIL.getConfiguration());
  THBaseService.Iface handler=ThriftHBaseServiceHandler.newInstance(hbaseHandler,metrics);
  ByteBuffer tTableName=wrap(tableName.getName());
  long preGetCounter=metricsHelper.checkCounterExists("get_num_ops",metrics.getSource()) ? metricsHelper.getCounter("get_num_ops",metrics.getSource()) : 0;
  TGet tGet=new TGet(wrap(rowkey));
  TResult tResult=handler.get(tTableName,tGet);
  List<TColumnValue> expectedColumnValues=Lists.newArrayList(new TColumnValue(wrap(family),wrap(col),wrap(Bytes.toBytes("val1"))));
  assertArrayEquals(rowkey,tResult.getRow());
  List<TColumnValue> returnedColumnValues=tResult.getColumnValues();
  assertTColumnValuesEqual(expectedColumnValues,returnedColumnValues);
  metricsHelper.assertCounter("get_num_ops",preGetCounter + 1,metrics.getSource());
  for (  ErrorThrowingGetObserver.ErrorType type : ErrorThrowingGetObserver.ErrorType.values()) {
    testExceptionType(handler,metrics,tTableName,rowkey,type);
  }
}
