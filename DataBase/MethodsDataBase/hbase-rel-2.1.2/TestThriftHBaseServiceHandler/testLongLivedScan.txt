/** 
 * Tests keeping a HBase scanner alive for long periods of time. Each call to getScannerRow() should reset the ConnectionCache timeout for the scanner's connection
 */
@Test public void testLongLivedScan() throws Exception {
  int numTrials=6;
  int trialPause=1000;
  int cleanUpInterval=100;
  Configuration conf=new Configuration(UTIL.getConfiguration());
  conf.setInt(ThriftHBaseServiceHandler.MAX_IDLETIME,(numTrials / 2) * trialPause);
  conf.setInt(ThriftHBaseServiceHandler.CLEANUP_INTERVAL,cleanUpInterval);
  ThriftHBaseServiceHandler handler=new ThriftHBaseServiceHandler(conf,UserProvider.instantiate(conf));
  ByteBuffer table=wrap(tableAname);
  TColumnValue columnValue=new TColumnValue(wrap(familyAname),wrap(qualifierAname),wrap(valueAname));
  List<TColumnValue> columnValues=new ArrayList<>(1);
  columnValues.add(columnValue);
  for (int i=0; i < numTrials; i++) {
    TPut put=new TPut(wrap(Bytes.toBytes("testScan" + i)),columnValues);
    handler.put(table,put);
  }
  TScan scan=new TScan();
  List<TColumn> columns=new ArrayList<>(1);
  TColumn column=new TColumn();
  column.setFamily(familyAname);
  column.setQualifier(qualifierAname);
  columns.add(column);
  scan.setColumns(columns);
  scan.setStartRow(Bytes.toBytes("testScan"));
  scan.setStopRow(Bytes.toBytes("testScan\uffff"));
  scan.setCaching(1);
  int scanId=handler.openScanner(table,scan);
  for (int i=0; i < numTrials; i++) {
    List<TResult> results=handler.getScannerRows(scanId,1);
    assertArrayEquals(Bytes.toBytes("testScan" + i),results.get(0).getRow());
    Thread.sleep(trialPause);
  }
}
