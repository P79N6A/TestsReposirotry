@Test public void testScanWithColumnFamilyTimeRange() throws Exception {
  ThriftHBaseServiceHandler handler=createHandler();
  ByteBuffer table=wrap(tableAname);
  TColumnValue familyAColumnValue=new TColumnValue(wrap(familyAname),wrap(qualifierAname),wrap(valueAname));
  TColumnValue familyBColumnValue=new TColumnValue(wrap(familyBname),wrap(qualifierBname),wrap(valueBname));
  long minTimestamp=System.currentTimeMillis();
  for (int i=0; i < 10; i++) {
    familyAColumnValue.setTimestamp(minTimestamp + i);
    familyBColumnValue.setTimestamp(minTimestamp + i);
    List<TColumnValue> columnValues=new ArrayList<>(2);
    columnValues.add(familyAColumnValue);
    columnValues.add(familyBColumnValue);
    TPut put=new TPut(wrap(Bytes.toBytes("testScanWithColumnFamilyTimeRange" + i)),columnValues);
    handler.put(table,put);
  }
  TScan scan=new TScan();
  Map<ByteBuffer,TTimeRange> colFamTimeRangeMap=new HashMap<>(2);
  colFamTimeRangeMap.put(wrap(familyAname),new TTimeRange(minTimestamp + 3,minTimestamp + 5));
  colFamTimeRangeMap.put(wrap(familyBname),new TTimeRange(minTimestamp + 6,minTimestamp + 9));
  scan.setColFamTimeRangeMap(colFamTimeRangeMap);
  int scanId=handler.openScanner(table,scan);
  List<TResult> results=handler.getScannerRows(scanId,5);
  assertEquals(5,results.size());
  int familyACount=0;
  int familyBCount=0;
  for (  TResult result : results) {
    List<TColumnValue> columnValues=result.getColumnValues();
    if (CollectionUtils.isNotEmpty(columnValues)) {
      if (Bytes.equals(familyAname,columnValues.get(0).getFamily())) {
        familyACount++;
      }
 else       if (Bytes.equals(familyBname,columnValues.get(0).getFamily())) {
        familyBCount++;
      }
    }
  }
  assertEquals(2,familyACount);
  assertEquals(3,familyBCount);
  results=handler.getScannerRows(scanId,1);
  assertEquals(0,results.size());
  handler.closeScanner(scanId);
  try {
    handler.getScannerRows(scanId,1);
    fail("Scanner id should be invalid");
  }
 catch (  TIllegalArgument e) {
  }
}
