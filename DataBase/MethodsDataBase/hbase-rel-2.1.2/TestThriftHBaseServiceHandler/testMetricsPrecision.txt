/** 
 * See HBASE-17611 Latency metrics were capped at ~ 2 seconds due to the use of an int variable to capture the duration.
 */
@Test public void testMetricsPrecision() throws Exception {
  byte[] rowkey=Bytes.toBytes("row1");
  byte[] family=Bytes.toBytes("f");
  byte[] col=Bytes.toBytes("c");
  TableName tableName=TableName.valueOf("testMetricsPrecision");
  HTableDescriptor tableDesc=new HTableDescriptor(tableName);
  tableDesc.addCoprocessor(DelayingRegionObserver.class.getName());
  tableDesc.addFamily(new HColumnDescriptor(family));
  Table table=null;
  try {
    table=UTIL.createTable(tableDesc,null);
    table.put(new Put(rowkey).addColumn(family,col,Bytes.toBytes("val1")));
    ThriftHBaseServiceHandler hbaseHandler=createHandler();
    ThriftMetrics metrics=getMetrics(UTIL.getConfiguration());
    THBaseService.Iface handler=ThriftHBaseServiceHandler.newInstance(hbaseHandler,metrics);
    ByteBuffer tTableName=wrap(tableName.getName());
    TGet tGet=new TGet(wrap(rowkey));
    TResult tResult=handler.get(tTableName,tGet);
    List<TColumnValue> expectedColumnValues=Lists.newArrayList(new TColumnValue(wrap(family),wrap(col),wrap(Bytes.toBytes("val1"))));
    assertArrayEquals(rowkey,tResult.getRow());
    List<TColumnValue> returnedColumnValues=tResult.getColumnValues();
    assertTColumnValuesEqual(expectedColumnValues,returnedColumnValues);
    metricsHelper.assertGaugeGt("get_max",3000L,metrics.getSource());
  }
  finally {
    if (table != null) {
      try {
        table.close();
      }
 catch (      IOException ignored) {
      }
      UTIL.deleteTable(tableName);
    }
  }
}
