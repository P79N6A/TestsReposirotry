@Test public void test() throws Exception {
  RegionServerThread rsWithMetaThread=UTIL.getMiniHBaseCluster().getRegionServerThreads().stream().filter(t -> !t.getRegionServer().getRegions(TableName.META_TABLE_NAME).isEmpty()).findAny().get();
  HRegionServer rsNoMeta=UTIL.getOtherRegionServer(rsWithMetaThread.getRegionServer());
  UTIL.waitTableAvailable(TableName.NAMESPACE_TABLE_NAME);
  FAIL=true;
  UTIL.getMiniHBaseCluster().killRegionServer(rsNoMeta.getServerName());
  ProcedureExecutor<?> executor=UTIL.getMiniHBaseCluster().getMaster().getMasterProcedureExecutor();
  UTIL.waitFor(60000,new ExplainingPredicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return executor.getWorkerThreadCount() > CORE_POOL_SIZE;
    }
    @Override public String explainFailure() throws Exception {
      return "Stuck checker does not add new worker thread";
    }
  }
);
  UTIL.getMiniHBaseCluster().killRegionServer(rsWithMetaThread.getRegionServer().getServerName());
  rsWithMetaThread.join();
  FAIL=false;
  UTIL.waitUntilNoRegionsInTransition(480000);
  for (int i=0; i < TABLE_COUNT; i++) {
    try (Table table=UTIL.getConnection().getTable(TableName.valueOf(TABLE_NAME_PREFIX + i))){
      table.put(new Put(Bytes.toBytes(i)).addColumn(CF,CQ,Bytes.toBytes(i)));
    }
   }
  UTIL.waitFor(60000,new ExplainingPredicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return executor.getWorkerThreadCount() == CORE_POOL_SIZE;
    }
    @Override public String explainFailure() throws Exception {
      return "The new workers do not timeout";
    }
  }
);
}
