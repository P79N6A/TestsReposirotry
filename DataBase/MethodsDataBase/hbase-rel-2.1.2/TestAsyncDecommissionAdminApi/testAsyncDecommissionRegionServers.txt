@Test public void testAsyncDecommissionRegionServers() throws Exception {
  List<ServerName> decommissionedRegionServers=admin.listDecommissionedRegionServers().get();
  assertTrue(decommissionedRegionServers.isEmpty());
  TEST_UTIL.createMultiRegionTable(tableName,FAMILY,4);
  ArrayList<ServerName> clusterRegionServers=new ArrayList<>(admin.getClusterMetrics(EnumSet.of(Option.LIVE_SERVERS)).get().getLiveServerMetrics().keySet());
  assertEquals(2,clusterRegionServers.size());
  HashMap<ServerName,List<RegionInfo>> serversToDecommssion=new HashMap<>();
  int i;
  for (i=0; i < clusterRegionServers.size(); i++) {
    List<RegionInfo> regionsOnServer=admin.getRegions(clusterRegionServers.get(i)).get();
    if (regionsOnServer.size() > 0) {
      serversToDecommssion.put(clusterRegionServers.get(i),regionsOnServer);
      break;
    }
  }
  clusterRegionServers.remove(i);
  ServerName remainingServer=clusterRegionServers.get(0);
  admin.decommissionRegionServers(new ArrayList<ServerName>(serversToDecommssion.keySet()),true).get();
  assertEquals(1,admin.listDecommissionedRegionServers().get().size());
  for (  ServerName server : serversToDecommssion.keySet()) {
    for (    RegionInfo region : serversToDecommssion.get(server)) {
      TEST_UTIL.assertRegionOnServer(region,remainingServer,10000);
    }
  }
  for (  ServerName server : serversToDecommssion.keySet()) {
    List<byte[]> encodedRegionNames=serversToDecommssion.get(server).stream().map(region -> region.getEncodedNameAsBytes()).collect(Collectors.toList());
    admin.recommissionRegionServer(server,encodedRegionNames).get();
  }
  assertTrue(admin.listDecommissionedRegionServers().get().isEmpty());
  for (  ServerName server : serversToDecommssion.keySet()) {
    for (    RegionInfo region : serversToDecommssion.get(server)) {
      TEST_UTIL.assertRegionOnServer(region,server,10000);
    }
  }
}
