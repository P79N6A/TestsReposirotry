@Test public void testVerifyRegionLocks() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  final RegionInfo regionA=RegionInfoBuilder.newBuilder(tableName).setStartKey(Bytes.toBytes("a")).setEndKey(Bytes.toBytes("b")).build();
  final RegionInfo regionB=RegionInfoBuilder.newBuilder(tableName).setStartKey(Bytes.toBytes("b")).setEndKey(Bytes.toBytes("c")).build();
  final RegionInfo regionC=RegionInfoBuilder.newBuilder(tableName).setStartKey(Bytes.toBytes("c")).setEndKey(Bytes.toBytes("d")).build();
  queue.addBack(new TestTableProcedure(1,tableName,TableProcedureInterface.TableOperationType.EDIT));
  queue.addBack(new TestRegionProcedure(2,tableName,TableProcedureInterface.TableOperationType.REGION_MERGE,regionA,regionB));
  queue.addBack(new TestRegionProcedure(3,tableName,TableProcedureInterface.TableOperationType.REGION_SPLIT,regionA));
  queue.addBack(new TestRegionProcedure(4,tableName,TableProcedureInterface.TableOperationType.REGION_SPLIT,regionB));
  queue.addBack(new TestRegionProcedure(5,tableName,TableProcedureInterface.TableOperationType.REGION_UNASSIGN,regionC));
  Procedure<?> proc=queue.poll();
  assertEquals(1,proc.getProcId());
  assertEquals(false,queue.waitTableExclusiveLock(proc,tableName));
  assertEquals(null,queue.poll(0));
  queue.wakeTableExclusiveLock(proc,tableName);
  Procedure<?> mergeProc=queue.poll();
  assertEquals(2,mergeProc.getProcId());
  assertEquals(false,queue.waitRegions(mergeProc,tableName,regionA,regionB));
  Procedure<?> procA=queue.poll();
  assertEquals(3,procA.getProcId());
  assertEquals(true,queue.waitRegions(procA,tableName,regionA));
  Procedure<?> procB=queue.poll();
  assertEquals(4,procB.getProcId());
  assertEquals(true,queue.waitRegions(procB,tableName,regionB));
  Procedure<?> procC=queue.poll();
  assertEquals(5,procC.getProcId());
  assertEquals(false,queue.waitRegions(procC,tableName,regionC));
  assertEquals(null,queue.poll(0));
  queue.wakeRegions(mergeProc,tableName,regionA,regionB);
  procA=queue.poll();
  assertEquals(3,procA.getProcId());
  assertEquals(false,queue.waitRegions(procA,tableName,regionA));
  procB=queue.poll();
  assertEquals(4,procB.getProcId());
  assertEquals(false,queue.waitRegions(procB,tableName,regionB));
  queue.wakeRegions(procA,tableName,regionA);
  queue.wakeRegions(procB,tableName,regionB);
  queue.wakeRegions(procC,tableName,regionC);
}
