@Test public void testYieldWithSharedLockHeld() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  queue.addBack(new TestTableProcedure(1,tableName,TableProcedureInterface.TableOperationType.READ));
  queue.addBack(new TestTableProcedure(2,tableName,TableProcedureInterface.TableOperationType.READ));
  queue.addBack(new TestTableProcedure(3,tableName,TableProcedureInterface.TableOperationType.EDIT));
  Procedure<?> proc1=queue.poll();
  assertEquals(1,proc1.getProcId());
  assertEquals(false,queue.waitTableSharedLock(proc1,tableName));
  Procedure<?> proc2=queue.poll();
  assertEquals(2,proc2.getProcId());
  assertEquals(false,queue.waitTableSharedLock(proc2,tableName));
  assertEquals(null,queue.poll(0));
  queue.yield(proc1);
  queue.yield(proc2);
  proc1=queue.poll();
  assertEquals(1,proc1.getProcId());
  proc2=queue.poll();
  assertEquals(2,proc2.getProcId());
  queue.wakeTableSharedLock(proc1,tableName);
  queue.wakeTableSharedLock(proc2,tableName);
  Procedure<?> proc3=queue.poll();
  assertEquals(3,proc3.getProcId());
}
