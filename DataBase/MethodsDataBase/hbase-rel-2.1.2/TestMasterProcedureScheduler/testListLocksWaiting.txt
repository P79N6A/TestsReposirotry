@Test public void testListLocksWaiting() throws Exception {
  LockProcedure procedure1=createExclusiveLockProcedure(1);
  queue.waitTableExclusiveLock(procedure1,TableName.valueOf("ns4","table4"));
  LockProcedure procedure2=createSharedLockProcedure(2);
  queue.waitTableSharedLock(procedure2,TableName.valueOf("ns4","table4"));
  LockProcedure procedure3=createExclusiveLockProcedure(3);
  queue.waitTableExclusiveLock(procedure3,TableName.valueOf("ns4","table4"));
  List<LockedResource> resources=queue.getLocks();
  assertEquals(2,resources.size());
  LockedResource namespaceResource=resources.get(0);
  assertLockResource(namespaceResource,LockedResourceType.NAMESPACE,"ns4");
  assertSharedLock(namespaceResource,1);
  assertTrue(namespaceResource.getWaitingProcedures().isEmpty());
  LockedResource tableLock=resources.get(1);
  assertLockResource(tableLock,LockedResourceType.TABLE,"ns4:table4");
  assertExclusiveLock(tableLock,procedure1);
  List<Procedure<?>> waitingProcedures=tableLock.getWaitingProcedures();
  assertEquals(2,waitingProcedures.size());
  LockProcedure waitingProcedure2=(LockProcedure)waitingProcedures.get(0);
  assertEquals(LockType.SHARED,waitingProcedure2.getType());
  assertEquals(procedure2,waitingProcedure2);
  LockProcedure waitingProcedure3=(LockProcedure)waitingProcedures.get(1);
  assertEquals(LockType.EXCLUSIVE,waitingProcedure3.getType());
  assertEquals(procedure3,waitingProcedure3);
}
