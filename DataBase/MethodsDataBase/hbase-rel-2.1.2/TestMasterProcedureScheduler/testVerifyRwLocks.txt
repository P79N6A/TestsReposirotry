/** 
 * Verify the correct logic of RWLocks on the queue
 */
@Test public void testVerifyRwLocks() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  queue.addBack(new TestTableProcedure(1,tableName,TableProcedureInterface.TableOperationType.EDIT));
  queue.addBack(new TestTableProcedure(2,tableName,TableProcedureInterface.TableOperationType.READ));
  queue.addBack(new TestTableProcedure(3,tableName,TableProcedureInterface.TableOperationType.EDIT));
  Procedure<?> proc=queue.poll();
  assertEquals(1,proc.getProcId());
  assertEquals(false,queue.waitTableExclusiveLock(proc,tableName));
  assertEquals(null,queue.poll(0));
  queue.wakeTableExclusiveLock(proc,tableName);
  Procedure<?> rdProc=queue.poll();
  assertEquals(2,rdProc.getProcId());
  assertEquals(false,queue.waitTableSharedLock(rdProc,tableName));
  assertEquals(null,queue.poll(0));
  queue.wakeTableSharedLock(rdProc,tableName);
  queue.addBack(new TestTableProcedure(4,tableName,TableProcedureInterface.TableOperationType.READ));
  queue.addBack(new TestTableProcedure(5,tableName,TableProcedureInterface.TableOperationType.READ));
  Procedure<?> wrProc=queue.poll();
  assertEquals(false,queue.waitTableExclusiveLock(wrProc,tableName));
  assertEquals(null,queue.poll(0));
  queue.wakeTableExclusiveLock(wrProc,tableName);
  rdProc=queue.poll();
  assertEquals(4,rdProc.getProcId());
  assertEquals(false,queue.waitTableSharedLock(rdProc,tableName));
  Procedure<?> rdProc2=queue.poll();
  assertEquals(5,rdProc2.getProcId());
  assertEquals(false,queue.waitTableSharedLock(rdProc2,tableName));
  queue.wakeTableSharedLock(rdProc,tableName);
  queue.wakeTableSharedLock(rdProc2,tableName);
  assertEquals(0,queue.size());
  assertTrue("queue should be deleted",queue.markTableAsDeleted(tableName,wrProc));
}
