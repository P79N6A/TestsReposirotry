/** 
 * Test getNextRow from memstore
 * @throws InterruptedException
 */
@Override @Test public void testGetNextRow() throws Exception {
  addRows(this.memstore);
  Thread.sleep(1);
  addRows(this.memstore);
  Cell closestToEmpty=((CompactingMemStore)this.memstore).getNextRow(KeyValue.LOWESTKEY);
  assertTrue(CellComparator.getInstance().compareRows(closestToEmpty,new KeyValue(Bytes.toBytes(0),System.currentTimeMillis())) == 0);
  for (int i=0; i < ROW_COUNT; i++) {
    Cell nr=((CompactingMemStore)this.memstore).getNextRow(new KeyValue(Bytes.toBytes(i),System.currentTimeMillis()));
    if (i + 1 == ROW_COUNT) {
      assertNull(nr);
    }
 else {
      assertTrue(CellComparator.getInstance().compareRows(nr,new KeyValue(Bytes.toBytes(i + 1),System.currentTimeMillis())) == 0);
    }
  }
  Configuration conf=HBaseConfiguration.create();
  for (int startRowId=0; startRowId < ROW_COUNT; startRowId++) {
    ScanInfo scanInfo=new ScanInfo(conf,FAMILY,0,1,Integer.MAX_VALUE,KeepDeletedCells.FALSE,HConstants.DEFAULT_BLOCKSIZE,0,this.memstore.getComparator(),false);
    try (InternalScanner scanner=new StoreScanner(new Scan().withStartRow(Bytes.toBytes(startRowId)),scanInfo,null,memstore.getScanners(0))){
      List<Cell> results=new ArrayList<>();
      for (int i=0; scanner.next(results); i++) {
        int rowId=startRowId + i;
        Cell left=results.get(0);
        byte[] row1=Bytes.toBytes(rowId);
        assertTrue("Row name",CellComparator.getInstance().compareRows(left,row1,0,row1.length) == 0);
        assertEquals("Count of columns",QUALIFIER_COUNT,results.size());
        List<Cell> row=new ArrayList<>();
        for (        Cell kv : results) {
          row.add(kv);
        }
        isExpectedRowWithoutTimestamps(rowId,row);
        results.clear();
      }
    }
   }
}
