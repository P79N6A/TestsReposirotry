@Test public void testCompaction3Buckets() throws IOException {
  MemoryCompactionPolicy compactionType=MemoryCompactionPolicy.EAGER;
  memstore.getConfiguration().set(CompactingMemStore.COMPACTING_MEMSTORE_TYPE_KEY,String.valueOf(compactionType));
  ((MyCompactingMemStore)memstore).initiateType(compactionType,memstore.getConfiguration());
  String[] keys1={"A","A","B","C"};
  String[] keys2={"A","B","D"};
  String[] keys3={"D","B","B"};
  int totalCellsLen1=addRowsByKeys(memstore,keys1);
  int oneCellOnCSLMHeapSize=120;
  int oneCellOnCAHeapSize=88;
  assertEquals(totalCellsLen1,region.getMemStoreDataSize());
  long totalHeapSize=MutableSegment.DEEP_OVERHEAD + 4 * oneCellOnCSLMHeapSize;
  assertEquals(totalHeapSize,((CompactingMemStore)memstore).heapSize());
  ((CompactingMemStore)memstore).flushInMemory();
  assertEquals(0,memstore.getSnapshot().getCellsCount());
  totalCellsLen1=(totalCellsLen1 * 3) / 4;
  assertEquals(totalCellsLen1,regionServicesForStores.getMemStoreSize());
  totalHeapSize=MutableSegment.DEEP_OVERHEAD + CellArrayImmutableSegment.DEEP_OVERHEAD_CAM + 3 * oneCellOnCAHeapSize;
  assertEquals(totalHeapSize,((CompactingMemStore)memstore).heapSize());
  int totalCellsLen2=addRowsByKeys(memstore,keys2);
  long totalHeapSize2=totalHeapSize + 3 * oneCellOnCSLMHeapSize;
  assertEquals(totalCellsLen1 + totalCellsLen2,regionServicesForStores.getMemStoreSize());
  assertEquals(totalHeapSize2,((CompactingMemStore)memstore).heapSize());
  ((MyCompactingMemStore)memstore).disableCompaction();
  MemStoreSize mss=memstore.getFlushableSize();
  ((CompactingMemStore)memstore).flushInMemory();
  assertEquals(0,memstore.getSnapshot().getCellsCount());
  assertEquals(totalCellsLen1 + totalCellsLen2,regionServicesForStores.getMemStoreSize());
  assertEquals(totalHeapSize2 + CellArrayImmutableSegment.DEEP_OVERHEAD_CAM,((CompactingMemStore)memstore).heapSize());
  int totalCellsLen3=addRowsByKeys(memstore,keys3);
  assertEquals(totalCellsLen1 + totalCellsLen2 + totalCellsLen3,regionServicesForStores.getMemStoreSize());
  long totalHeapSize3=totalHeapSize2 + CellArrayImmutableSegment.DEEP_OVERHEAD_CAM + 3 * oneCellOnCSLMHeapSize;
  assertEquals(totalHeapSize3,((CompactingMemStore)memstore).heapSize());
  ((MyCompactingMemStore)memstore).enableCompaction();
  mss=memstore.getFlushableSize();
  ((CompactingMemStore)memstore).flushInMemory();
  assertEquals(0,memstore.getSnapshot().getCellsCount());
  totalCellsLen2=totalCellsLen2 / 3;
  totalCellsLen3=0;
  assertEquals(totalCellsLen1 + totalCellsLen2 + totalCellsLen3,regionServicesForStores.getMemStoreSize());
  assertEquals(4 * oneCellOnCAHeapSize + MutableSegment.DEEP_OVERHEAD + CellArrayImmutableSegment.DEEP_OVERHEAD_CAM,((CompactingMemStore)memstore).heapSize());
  mss=memstore.getFlushableSize();
  MemStoreSnapshot snapshot=memstore.snapshot();
  region.decrMemStoreSize(mss.getDataSize(),mss.getHeapSize(),mss.getOffHeapSize());
  ImmutableSegment s=memstore.getSnapshot();
  assertEquals(4,s.getCellsCount());
  assertEquals(0,regionServicesForStores.getMemStoreSize());
  memstore.clearSnapshot(snapshot.getId());
}
