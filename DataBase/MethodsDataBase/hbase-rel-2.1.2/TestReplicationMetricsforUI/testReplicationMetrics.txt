@Test public void testReplicationMetrics() throws Exception {
  try (Admin hbaseAdmin=utility1.getConnection().getAdmin()){
    Put p=new Put(Bytes.toBytes("starter"));
    p.addColumn(famName,qualName,Bytes.toBytes("value help to test replication delay"));
    htable1.put(p);
    while (htable2.get(new Get(Bytes.toBytes("starter"))).size() == 0) {
      Thread.sleep(500);
    }
    Thread.sleep(5000);
    HRegionServer rs=utility1.getRSForFirstRegionInTable(tableName);
    Map<String,ReplicationStatus> metrics=rs.getWalGroupsReplicationStatus();
    Assert.assertEquals("metric size ",1,metrics.size());
    long lastPosition=0;
    for (    Map.Entry<String,ReplicationStatus> metric : metrics.entrySet()) {
      Assert.assertEquals("peerId",PEER_ID2,metric.getValue().getPeerId());
      Assert.assertEquals("queue length",1,metric.getValue().getQueueSize());
      Assert.assertEquals("replication delay",0,metric.getValue().getReplicationDelay());
      Assert.assertTrue("current position >= 0",metric.getValue().getCurrentPosition() >= 0);
      lastPosition=metric.getValue().getCurrentPosition();
    }
    for (int i=0; i < NB_ROWS_IN_BATCH; i++) {
      p=new Put(Bytes.toBytes("" + Integer.toString(i)));
      p.addColumn(famName,qualName,Bytes.toBytes("value help to test replication delay " + i));
      htable1.put(p);
    }
    while (htable2.get(new Get(Bytes.toBytes("" + Integer.toString(NB_ROWS_IN_BATCH - 1)))).size() == 0) {
      Thread.sleep(500);
    }
    rs=utility1.getRSForFirstRegionInTable(tableName);
    metrics=rs.getWalGroupsReplicationStatus();
    Path lastPath=null;
    for (    Map.Entry<String,ReplicationStatus> metric : metrics.entrySet()) {
      lastPath=metric.getValue().getCurrentPath();
      Assert.assertEquals("peerId",PEER_ID2,metric.getValue().getPeerId());
      Assert.assertTrue("age of Last Shipped Op should be > 0 ",metric.getValue().getAgeOfLastShippedOp() > 0);
      Assert.assertTrue("current position should > last position",metric.getValue().getCurrentPosition() - lastPosition > 0);
      lastPosition=metric.getValue().getCurrentPosition();
    }
    hbaseAdmin.rollWALWriter(rs.getServerName());
    p=new Put(Bytes.toBytes("trigger"));
    p.addColumn(famName,qualName,Bytes.toBytes("value help to test replication delay"));
    htable1.put(p);
    while (htable2.get(new Get(Bytes.toBytes("trigger"))).size() == 0) {
      Thread.sleep(500);
    }
    Thread.sleep(5000);
    metrics=rs.getWalGroupsReplicationStatus();
    for (    Map.Entry<String,ReplicationStatus> metric : metrics.entrySet()) {
      Assert.assertEquals("replication delay",0,metric.getValue().getReplicationDelay());
      Assert.assertTrue("current position should < last position",metric.getValue().getCurrentPosition() < lastPosition);
      Assert.assertNotEquals("current path",lastPath,metric.getValue().getCurrentPath());
    }
  }
 }
