@Test public void testModifyTable() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
  MasterProcedureTestingUtility.createTable(procExec,tableName,null,"cf");
  UTIL.getAdmin().disableTable(tableName);
  HTableDescriptor htd=new HTableDescriptor(UTIL.getAdmin().getTableDescriptor(tableName));
  long newMaxFileSize=htd.getMaxFileSize() * 2;
  htd.setMaxFileSize(newMaxFileSize);
  htd.setRegionReplication(3);
  long procId1=ProcedureTestingUtility.submitAndWait(procExec,new ModifyTableProcedure(procExec.getEnvironment(),htd));
  ProcedureTestingUtility.assertProcNotFailed(procExec.getResult(procId1));
  HTableDescriptor currentHtd=UTIL.getAdmin().getTableDescriptor(tableName);
  assertEquals(newMaxFileSize,currentHtd.getMaxFileSize());
  boolean newReadOnlyOption=htd.isReadOnly() ? false : true;
  long newMemStoreFlushSize=htd.getMemStoreFlushSize() * 2;
  htd.setReadOnly(newReadOnlyOption);
  htd.setMemStoreFlushSize(newMemStoreFlushSize);
  long procId2=ProcedureTestingUtility.submitAndWait(procExec,new ModifyTableProcedure(procExec.getEnvironment(),htd));
  ProcedureTestingUtility.assertProcNotFailed(procExec.getResult(procId2));
  currentHtd=UTIL.getAdmin().getTableDescriptor(tableName);
  assertEquals(newReadOnlyOption,currentHtd.isReadOnly());
  assertEquals(newMemStoreFlushSize,currentHtd.getMemStoreFlushSize());
}
