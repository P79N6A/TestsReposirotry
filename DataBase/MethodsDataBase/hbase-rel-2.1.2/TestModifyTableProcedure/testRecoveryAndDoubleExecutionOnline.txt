@Test public void testRecoveryAndDoubleExecutionOnline() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  final String cf2="cf2";
  final String cf3="cf3";
  final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
  RegionInfo[] regions=MasterProcedureTestingUtility.createTable(procExec,tableName,null,"cf1",cf3);
  ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec,true);
  HTableDescriptor htd=new HTableDescriptor(UTIL.getAdmin().getTableDescriptor(tableName));
  boolean newCompactionEnableOption=htd.isCompactionEnabled() ? false : true;
  htd.setCompactionEnabled(newCompactionEnableOption);
  htd.addFamily(new HColumnDescriptor(cf2));
  htd.removeFamily(Bytes.toBytes(cf3));
  long procId=procExec.submitProcedure(new ModifyTableProcedure(procExec.getEnvironment(),htd));
  MasterProcedureTestingUtility.testRecoveryAndDoubleExecution(procExec,procId);
  HTableDescriptor currentHtd=UTIL.getAdmin().getTableDescriptor(tableName);
  assertEquals(newCompactionEnableOption,currentHtd.isCompactionEnabled());
  assertEquals(2,currentHtd.getFamiliesKeys().size());
  assertTrue(currentHtd.hasFamily(Bytes.toBytes(cf2)));
  assertFalse(currentHtd.hasFamily(Bytes.toBytes(cf3)));
  MasterProcedureTestingUtility.validateTableCreation(UTIL.getHBaseCluster().getMaster(),tableName,regions,"cf1",cf2);
}
