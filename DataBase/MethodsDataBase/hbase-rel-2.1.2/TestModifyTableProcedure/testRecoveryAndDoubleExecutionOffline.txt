@Test public void testRecoveryAndDoubleExecutionOffline() throws Exception {
  final TableName tableName=TableName.valueOf(name.getMethodName());
  final String cf2="cf2";
  final String cf3="cf3";
  final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
  RegionInfo[] regions=MasterProcedureTestingUtility.createTable(procExec,tableName,null,"cf1",cf3);
  UTIL.getAdmin().disableTable(tableName);
  ProcedureTestingUtility.waitNoProcedureRunning(procExec);
  ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec,true);
  TableDescriptor oldDescriptor=UTIL.getAdmin().getDescriptor(tableName);
  TableDescriptor newDescriptor=TableDescriptorBuilder.newBuilder(oldDescriptor).setCompactionEnabled(!oldDescriptor.isCompactionEnabled()).setColumnFamily(ColumnFamilyDescriptorBuilder.of(cf2)).removeColumnFamily(Bytes.toBytes(cf3)).setRegionReplication(3).build();
  long procId=procExec.submitProcedure(new ModifyTableProcedure(procExec.getEnvironment(),newDescriptor));
  MasterProcedureTestingUtility.testRecoveryAndDoubleExecution(procExec,procId);
  TableDescriptor currentDescriptor=UTIL.getAdmin().getDescriptor(tableName);
  assertEquals(newDescriptor.isCompactionEnabled(),currentDescriptor.isCompactionEnabled());
  assertEquals(2,newDescriptor.getColumnFamilyNames().size());
  MasterProcedureTestingUtility.validateTableCreation(UTIL.getHBaseCluster().getMaster(),tableName,regions,false,"cf1",cf2);
}
