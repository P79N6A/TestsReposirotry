@Test public void testWALDurability() throws IOException {
class CustomFSLog extends FSHLog {
    private Boolean syncFlag;
    public CustomFSLog(    FileSystem fs,    Path root,    String logDir,    Configuration conf) throws IOException {
      super(fs,root,logDir,conf);
    }
    @Override public void sync(    boolean forceSync) throws IOException {
      syncFlag=forceSync;
      super.sync(forceSync);
    }
    @Override public void sync(    long txid,    boolean forceSync) throws IOException {
      syncFlag=forceSync;
      super.sync(txid,forceSync);
    }
    private void resetSyncFlag(){
      this.syncFlag=null;
    }
  }
  conf.set(HRegion.WAL_HSYNC_CONF_KEY,"false");
  FileSystem fs=FileSystem.get(conf);
  Path rootDir=new Path(dir + getName());
  CustomFSLog customFSLog=new CustomFSLog(fs,rootDir,getName(),conf);
  HRegion region=initHRegion(tableName,null,null,customFSLog);
  byte[] bytes=Bytes.toBytes(getName());
  Put put=new Put(bytes);
  put.addColumn(COLUMN_FAMILY_BYTES,Bytes.toBytes("1"),bytes);
  customFSLog.resetSyncFlag();
  assertNull(customFSLog.syncFlag);
  region.put(put);
  assertEquals(customFSLog.syncFlag,false);
  conf.set(HRegion.WAL_HSYNC_CONF_KEY,"true");
  fs=FileSystem.get(conf);
  customFSLog=new CustomFSLog(fs,rootDir,getName(),conf);
  region=initHRegion(tableName,null,null,customFSLog);
  customFSLog.resetSyncFlag();
  assertNull(customFSLog.syncFlag);
  region.put(put);
  assertEquals(customFSLog.syncFlag,true);
  put.setDurability(Durability.FSYNC_WAL);
  customFSLog.resetSyncFlag();
  assertNull(customFSLog.syncFlag);
  region.put(put);
  assertEquals(customFSLog.syncFlag,true);
  put=new Put(bytes);
  put.addColumn(COLUMN_FAMILY_BYTES,Bytes.toBytes("1"),bytes);
  put.setDurability(Durability.SYNC_WAL);
  customFSLog.resetSyncFlag();
  assertNull(customFSLog.syncFlag);
  region.put(put);
  assertEquals(customFSLog.syncFlag,false);
  HBaseTestingUtility.closeRegionAndWAL(region);
}
