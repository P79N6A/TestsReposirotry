@Test public void testSplitAfterRefresh() throws Exception {
  Admin admin=util.getAdmin();
  table=util.createTable(TEST_TABLE,TEST_FAMILY);
  try {
    Put puta=new Put(ROW_A);
    puta.addColumn(TEST_FAMILY,qualifierCol1,bytes1);
    table.put(puta);
    admin.flush(TEST_TABLE);
    Put putb=new Put(ROW_B);
    putb.addColumn(TEST_FAMILY,qualifierCol1,bytes2);
    table.put(putb);
    admin.flush(TEST_TABLE);
    Put putc=new Put(ROW_C);
    putc.addColumn(TEST_FAMILY,qualifierCol1,bytes3);
    table.put(putc);
    admin.flush(TEST_TABLE);
    admin.compact(TEST_TABLE);
    while (admin.getCompactionState(TEST_TABLE) != CompactionState.NONE) {
      Thread.sleep(1000);
    }
    table.put(putb);
    HRegion hr1=(HRegion)util.getRSForFirstRegionInTable(TEST_TABLE).getRegionByEncodedName(admin.getTableRegions(TEST_TABLE).get(0).getEncodedName());
    hr1.refreshStoreFiles(true);
    int numRegionsBeforeSplit=admin.getTableRegions(TEST_TABLE).size();
    admin.splitRegion(admin.getTableRegions(TEST_TABLE).get(0).getEncodedNameAsBytes(),ROW_C);
    util.waitFor(20000,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        int numRegionsAfterSplit=0;
        List<RegionServerThread> rst=util.getMiniHBaseCluster().getLiveRegionServerThreads();
        for (        RegionServerThread t : rst) {
          numRegionsAfterSplit+=t.getRegionServer().getRegions(TEST_TABLE).size();
        }
        return (numRegionsAfterSplit == numRegionsBeforeSplit + 1 && admin.isTableAvailable(TEST_TABLE));
      }
    }
);
    assertEquals(3,util.getMiniHBaseCluster().getLiveRegionServerThreads().size());
  }
  finally {
    if (admin != null) {
      admin.close();
    }
  }
}
