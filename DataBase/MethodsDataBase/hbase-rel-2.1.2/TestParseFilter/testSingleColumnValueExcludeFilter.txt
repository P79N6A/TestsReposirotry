@Test public void testSingleColumnValueExcludeFilter() throws IOException {
  String filterString="SingleColumnValueExcludeFilter ('family', 'qualifier', <, 'binaryprefix:a')";
  SingleColumnValueExcludeFilter singleColumnValueExcludeFilter=doTestFilter(filterString,SingleColumnValueExcludeFilter.class);
  assertEquals(CompareOperator.LESS,singleColumnValueExcludeFilter.getCompareOperator());
  assertEquals("family",new String(singleColumnValueExcludeFilter.getFamily(),StandardCharsets.UTF_8));
  assertEquals("qualifier",new String(singleColumnValueExcludeFilter.getQualifier(),StandardCharsets.UTF_8));
  assertEquals("a",new String(singleColumnValueExcludeFilter.getComparator().getValue(),StandardCharsets.UTF_8));
  assertFalse(singleColumnValueExcludeFilter.getFilterIfMissing());
  assertTrue(singleColumnValueExcludeFilter.getLatestVersionOnly());
  filterString="SingleColumnValueExcludeFilter " + "('family', 'qualifier', <=, 'binaryprefix:a', true, false)";
  singleColumnValueExcludeFilter=doTestFilter(filterString,SingleColumnValueExcludeFilter.class);
  assertEquals("family",new String(singleColumnValueExcludeFilter.getFamily(),StandardCharsets.UTF_8));
  assertEquals("qualifier",new String(singleColumnValueExcludeFilter.getQualifier(),StandardCharsets.UTF_8));
  assertEquals(CompareOperator.LESS_OR_EQUAL,singleColumnValueExcludeFilter.getCompareOperator());
  assertTrue(singleColumnValueExcludeFilter.getComparator() instanceof BinaryPrefixComparator);
  BinaryPrefixComparator binaryPrefixComparator=(BinaryPrefixComparator)singleColumnValueExcludeFilter.getComparator();
  assertEquals("a",new String(binaryPrefixComparator.getValue(),StandardCharsets.UTF_8));
  assertTrue(singleColumnValueExcludeFilter.getFilterIfMissing());
  assertFalse(singleColumnValueExcludeFilter.getLatestVersionOnly());
}
