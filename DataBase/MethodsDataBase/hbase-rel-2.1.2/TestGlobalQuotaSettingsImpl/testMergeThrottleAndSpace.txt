@Test public void testMergeThrottleAndSpace() throws IOException {
  final String ns="org1";
  QuotaProtos.Quotas quota=QuotaProtos.Quotas.newBuilder().setThrottle(THROTTLE).setSpace(SPACE_QUOTA).build();
  GlobalQuotaSettingsImpl settings=new GlobalQuotaSettingsImpl(null,null,ns,quota);
  QuotaProtos.TimedQuota writeQuota=REQUEST_THROTTLE.toBuilder().setSoftLimit(500).build();
  QuotaProtos.ThrottleRequest writeThrottle=QuotaProtos.ThrottleRequest.newBuilder().setTimedQuota(writeQuota).setType(QuotaProtos.ThrottleType.WRITE_NUMBER).build();
  GlobalQuotaSettingsImpl merged=settings.merge(new ThrottleSettings(null,null,ns,writeThrottle));
  GlobalQuotaSettingsImpl finalQuota=merged.merge(new SpaceLimitSettings(ns,SPACE_QUOTA.getSoftLimit(),SpaceViolationPolicy.NO_WRITES_COMPACTIONS));
  QuotaProtos.Throttle throttle=finalQuota.getThrottleProto();
  assertTrue(throttle.hasReqNum());
  QuotaProtos.TimedQuota reqNumQuota=throttle.getReqNum();
  assertEquals(REQUEST_THROTTLE.getSoftLimit(),reqNumQuota.getSoftLimit());
  assertTrue(throttle.hasWriteNum());
  QuotaProtos.TimedQuota writeNumQuota=throttle.getWriteNum();
  assertEquals(writeQuota.getSoftLimit(),writeNumQuota.getSoftLimit());
  QuotaProtos.SpaceQuota finalSpaceQuota=finalQuota.getSpaceProto();
  assertEquals(SPACE_QUOTA.getSoftLimit(),finalSpaceQuota.getSoftLimit());
  assertEquals(QuotaProtos.SpaceViolationPolicy.NO_WRITES_COMPACTIONS,finalSpaceQuota.getViolationPolicy());
}
