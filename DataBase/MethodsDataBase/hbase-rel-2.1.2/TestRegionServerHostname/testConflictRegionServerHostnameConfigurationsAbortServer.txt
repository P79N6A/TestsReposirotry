@Test public void testConflictRegionServerHostnameConfigurationsAbortServer() throws Exception {
  Enumeration<NetworkInterface> netInterfaceList=NetworkInterface.getNetworkInterfaces();
  while (netInterfaceList.hasMoreElements()) {
    NetworkInterface ni=netInterfaceList.nextElement();
    Enumeration<InetAddress> addrList=ni.getInetAddresses();
    while (addrList.hasMoreElements()) {
      InetAddress addr=addrList.nextElement();
      if (addr.isLoopbackAddress() || addr.isLinkLocalAddress() || addr.isMulticastAddress()) {
        continue;
      }
      String hostName=addr.getHostName();
      LOG.info("Found " + hostName + " on "+ ni);
      TEST_UTIL.getConfiguration().set(HRegionServer.MASTER_HOSTNAME_KEY,hostName);
      TEST_UTIL.getConfiguration().set(HRegionServer.RS_HOSTNAME_KEY,hostName);
      TEST_UTIL.getConfiguration().setBoolean(HRegionServer.RS_HOSTNAME_DISABLE_MASTER_REVERSEDNS_KEY,true);
      try {
        TEST_UTIL.startMiniCluster(NUM_MASTERS,NUM_RS);
      }
 catch (      Exception e) {
        Throwable t1=e.getCause();
        Throwable t2=t1.getCause();
        assertTrue(t1.getMessage() + " - " + t2.getMessage(),t2.getMessage().contains(HRegionServer.RS_HOSTNAME_DISABLE_MASTER_REVERSEDNS_KEY + " and " + HRegionServer.RS_HOSTNAME_KEY+ " are mutually exclusive"));
        return;
      }
 finally {
        TEST_UTIL.shutdownMiniCluster();
      }
      assertTrue("Failed to validate against conflict hostname configurations",false);
    }
  }
}
