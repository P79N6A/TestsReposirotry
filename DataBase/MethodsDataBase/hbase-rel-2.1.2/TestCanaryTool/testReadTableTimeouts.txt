@Test @Ignore("Intermittent argument matching failures, see HBASE-18813") public void testReadTableTimeouts() throws Exception {
  final TableName[] tableNames=new TableName[2];
  tableNames[0]=TableName.valueOf(name.getMethodName() + "1");
  tableNames[1]=TableName.valueOf(name.getMethodName() + "2");
  for (int j=0; j < 2; j++) {
    Table table=testingUtility.createTable(tableNames[j],new byte[][]{FAMILY});
    for (int i=0; i < 1000; i++) {
      byte[] iBytes=Bytes.toBytes(i + j);
      Put p=new Put(iBytes);
      p.addColumn(FAMILY,COLUMN,iBytes);
      table.put(p);
    }
  }
  ExecutorService executor=new ScheduledThreadPoolExecutor(1);
  Canary.RegionStdOutSink sink=spy(new Canary.RegionStdOutSink());
  Canary canary=new Canary(executor,sink);
  String configuredTimeoutStr=tableNames[0].getNameAsString() + "=" + Long.MAX_VALUE+ ","+ tableNames[1].getNameAsString()+ "=0";
  String[] args={"-readTableTimeouts",configuredTimeoutStr,name.getMethodName() + "1",name.getMethodName() + "2"};
  assertEquals(0,ToolRunner.run(testingUtility.getConfiguration(),canary,args));
  verify(sink,times(tableNames.length)).initializeAndGetReadLatencyForTable(isA(String.class));
  for (int i=0; i < 2; i++) {
    assertNotEquals("verify non-null read latency",null,sink.getReadLatencyMap().get(tableNames[i].getNameAsString()));
    assertNotEquals("verify non-zero read latency",0L,sink.getReadLatencyMap().get(tableNames[i].getNameAsString()));
  }
  verify(mockAppender,times(1)).doAppend(argThat(new ArgumentMatcher<LoggingEvent>(){
    @Override public boolean matches(    LoggingEvent argument){
      return ((LoggingEvent)argument).getRenderedMessage().contains("exceeded the configured read timeout.");
    }
  }
));
  verify(mockAppender,times(2)).doAppend(argThat(new ArgumentMatcher<LoggingEvent>(){
    @Override public boolean matches(    LoggingEvent argument){
      return argument.getRenderedMessage().contains("The configured read timeout was");
    }
  }
));
}
