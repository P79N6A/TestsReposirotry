@Ignore @Test public void testAllFavoredNodesDeadMasterRestarted() throws Exception {
  TableName tableName=TableName.valueOf("testAllFavoredNodesDeadMasterRestarted");
  HTableDescriptor desc=new HTableDescriptor(tableName);
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  admin.createTable(desc,Bytes.toBytes("aaa"),Bytes.toBytes("zzz"),REGION_NUM);
  TEST_UTIL.waitTableAvailable(tableName);
  final RegionInfo region=admin.getTableRegions(tableName).get(0);
  LOG.info("Region that's supposed to be in transition: " + region);
  FavoredNodesManager fnm=master.getFavoredNodesManager();
  List<ServerName> currentFN=fnm.getFavoredNodes(region);
  assertNotNull(currentFN);
  stopServersAndWaitUntilProcessed(currentFN);
  final RegionStates regionStatesBeforeMaster=master.getAssignmentManager().getRegionStates();
  TEST_UTIL.waitFor(10000,new Waiter.Predicate<Exception>(){
    @Override public boolean evaluate() throws Exception {
      return regionStatesBeforeMaster.getRegionState(region).isFailedOpen();
    }
  }
);
  assertTrue("Region: " + region + " should be RIT",regionStatesBeforeMaster.getRegionState(region).isFailedOpen());
  List<RegionInfo> rit=Lists.newArrayList();
  for (  RegionStateNode regionState : regionStatesBeforeMaster.getRegionsInTransition()) {
    RegionInfo regionInfo=regionState.getRegionInfo();
    LOG.debug("Region in transition after stopping FN's: " + regionInfo);
    rit.add(regionInfo);
    assertTrue("Region: " + regionInfo + " should be RIT",regionStatesBeforeMaster.getRegionState(regionInfo).isFailedOpen());
    assertEquals("Region: " + regionInfo + " does not belong to table: "+ tableName,tableName,regionInfo.getTable());
  }
  Configuration conf=cluster.getConf();
  conf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART,SLAVES - FavoredNodeAssignmentHelper.FAVORED_NODES_NUM);
  cluster.stopMaster(master.getServerName());
  cluster.waitForMasterToStop(master.getServerName(),60000);
  cluster.startMaster();
  cluster.waitForActiveAndReadyMaster();
  master=cluster.getMaster();
  fnm=master.getFavoredNodesManager();
  RegionStates regionStates=master.getAssignmentManager().getRegionStates();
  assertTrue("Region: " + region + " should be RIT",regionStates.getRegionState(region).isFailedOpen());
  for (  RegionInfo regionInfo : rit) {
    assertTrue("Region: " + regionInfo + " should be RIT",regionStates.getRegionState(regionInfo).isFailedOpen());
  }
  List<ServerName> serversForNewFN=Lists.newArrayList();
  for (  ServerName sn : admin.getClusterMetrics(EnumSet.of(Option.LIVE_SERVERS)).getLiveServerMetrics().keySet()) {
    serversForNewFN.add(ServerName.valueOf(sn.getHostname(),sn.getPort(),NON_STARTCODE));
  }
  FavoredNodeAssignmentHelper helper=new FavoredNodeAssignmentHelper(serversForNewFN,conf);
  helper.initialize();
  for (  RegionInfo regionInfo : rit) {
    List<ServerName> newFavoredNodes=helper.generateFavoredNodes(regionInfo);
    assertNotNull(newFavoredNodes);
    assertEquals(FavoredNodeAssignmentHelper.FAVORED_NODES_NUM,newFavoredNodes.size());
    LOG.info("Region: " + regionInfo.getEncodedName() + " FN: "+ newFavoredNodes);
    Map<RegionInfo,List<ServerName>> regionFNMap=Maps.newHashMap();
    regionFNMap.put(regionInfo,newFavoredNodes);
    fnm.updateFavoredNodes(regionFNMap);
    LOG.info("Assigning region: " + regionInfo.getEncodedName());
    admin.assign(regionInfo.getEncodedNameAsBytes());
  }
  TEST_UTIL.waitUntilNoRegionsInTransition(60000);
  assertEquals("Not all regions are online",REGION_NUM,admin.getTableRegions(tableName).size());
  admin.setBalancerRunning(true,true);
  assertTrue("Balancer did not run",admin.balancer());
  TEST_UTIL.waitUntilNoRegionsInTransition(60000);
  checkFavoredNodeAssignments(tableName,fnm,regionStates);
}
