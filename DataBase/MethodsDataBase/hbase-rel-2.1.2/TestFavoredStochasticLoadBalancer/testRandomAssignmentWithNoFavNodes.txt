@Test public void testRandomAssignmentWithNoFavNodes() throws Exception {
  final String tableName="testRandomAssignmentWithNoFavNodes";
  HTableDescriptor desc=new HTableDescriptor(TableName.valueOf(tableName));
  desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
  admin.createTable(desc);
  TEST_UTIL.waitTableAvailable(desc.getTableName());
  RegionInfo hri=admin.getTableRegions(TableName.valueOf(tableName)).get(0);
  FavoredNodesManager fnm=master.getFavoredNodesManager();
  fnm.deleteFavoredNodesForRegions(Lists.newArrayList(hri));
  assertNull("Favored nodes not found null after delete",fnm.getFavoredNodes(hri));
  LoadBalancer balancer=master.getLoadBalancer();
  ServerName destination=balancer.randomAssignment(hri,Lists.newArrayList(admin.getClusterMetrics(EnumSet.of(Option.LIVE_SERVERS)).getLiveServerMetrics().keySet().stream().collect(Collectors.toList())));
  assertNotNull(destination);
  List<ServerName> favoredNodes=fnm.getFavoredNodes(hri);
  assertNotNull(favoredNodes);
  boolean containsFN=false;
  for (  ServerName sn : favoredNodes) {
    if (ServerName.isSameAddress(destination,sn)) {
      containsFN=true;
    }
  }
  assertTrue("Destination server does not belong to favored nodes.",containsFN);
}
