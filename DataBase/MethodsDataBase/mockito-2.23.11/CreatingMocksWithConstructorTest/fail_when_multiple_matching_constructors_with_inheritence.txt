@Test public void fail_when_multiple_matching_constructors_with_inheritence(){
  try {
    mock(UsesTwoBases.class,withSettings().useConstructor(new ExtendsBase(),new ExtendsBase()));
    fail();
  }
 catch (  MockitoException e) {
    assertThat(e).hasMessage("Unable to create mock instance of type 'UsesTwoBases'");
    assertThat(e.getCause()).hasMessageContaining("Multiple constructors could be matched to arguments of types " + "[org.mockitousage.constructor.CreatingMocksWithConstructorTest$ExtendsBase, " + "org.mockitousage.constructor.CreatingMocksWithConstructorTest$ExtendsBase]").hasMessageContaining("If you believe that Mockito could do a better job deciding on which constructor to use, please let us know.\n" + "Ticket 685 contains the discussion and a workaround for ambiguous constructors using inner class.\n" + "See https://github.com/mockito/mockito/issues/685");
  }
}
