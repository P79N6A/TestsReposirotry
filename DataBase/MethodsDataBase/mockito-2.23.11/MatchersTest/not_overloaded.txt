@Test public void not_overloaded(){
  when(mock.oneArg(not(eq(false)))).thenReturn("0");
  when(mock.oneArg(not(eq((byte)1)))).thenReturn("1");
  when(mock.oneArg(not(eq('a')))).thenReturn("2");
  when(mock.oneArg(not(eq(1D)))).thenReturn("3");
  when(mock.oneArg(not(eq(1F)))).thenReturn("4");
  when(mock.oneArg(not(eq(1)))).thenReturn("5");
  when(mock.oneArg(not(eq(1L)))).thenReturn("6");
  when(mock.oneArg(not(eq((short)1)))).thenReturn("7");
  when(mock.oneArg(not(contains("a")))).thenReturn("8");
  when(mock.oneArg(not(isA(Class.class)))).thenReturn("9");
  assertEquals("0",mock.oneArg(true));
  assertEquals(null,mock.oneArg(false));
  assertEquals("1",mock.oneArg((byte)2));
  assertEquals("2",mock.oneArg('b'));
  assertEquals("3",mock.oneArg(2D));
  assertEquals("4",mock.oneArg(2F));
  assertEquals("5",mock.oneArg(2));
  assertEquals("6",mock.oneArg(2L));
  assertEquals("7",mock.oneArg((short)2));
  assertEquals("8",mock.oneArg("bcde"));
  assertEquals("9",mock.oneArg(new Object()));
  assertEquals(null,mock.oneArg(Class.class));
}
