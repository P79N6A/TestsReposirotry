@Test public void and_overloaded(){
  when(mock.oneArg(and(eq(false),eq(false)))).thenReturn("0");
  when(mock.oneArg(and(eq((byte)1),eq((byte)1)))).thenReturn("1");
  when(mock.oneArg(and(eq('a'),eq('a')))).thenReturn("2");
  when(mock.oneArg(and(eq(1D),eq(1D)))).thenReturn("3");
  when(mock.oneArg(and(eq(1F),eq(1F)))).thenReturn("4");
  when(mock.oneArg(and(eq(1),eq(1)))).thenReturn("5");
  when(mock.oneArg(and(eq(1L),eq(1L)))).thenReturn("6");
  when(mock.oneArg(and(eq((short)1),eq((short)1)))).thenReturn("7");
  when(mock.oneArg(and(contains("a"),contains("d")))).thenReturn("8");
  when(mock.oneArg(and(isA(Class.class),eq(Object.class)))).thenReturn("9");
  assertEquals("0",mock.oneArg(false));
  assertEquals(null,mock.oneArg(true));
  assertEquals("1",mock.oneArg((byte)1));
  assertEquals("2",mock.oneArg('a'));
  assertEquals("3",mock.oneArg(1D));
  assertEquals("4",mock.oneArg(1F));
  assertEquals("5",mock.oneArg(1));
  assertEquals("6",mock.oneArg(1L));
  assertEquals("7",mock.oneArg((short)1));
  assertEquals("8",mock.oneArg("abcde"));
  assertEquals(null,mock.oneArg("aaaaa"));
  assertEquals("9",mock.oneArg(Object.class));
}
