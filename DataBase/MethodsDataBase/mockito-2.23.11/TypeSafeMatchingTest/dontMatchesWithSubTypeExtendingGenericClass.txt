@Test public void dontMatchesWithSubTypeExtendingGenericClass(){
  final AtomicBoolean wasCalled=new AtomicBoolean();
abstract class GenericMatcher<T> implements ArgumentMatcher<T> {
  }
class TestMatcher extends GenericMatcher<Integer> {
    @Override public boolean matches(    Integer argument){
      wasCalled.set(true);
      return true;
    }
  }
  wasCalled.set(false);
  matchesTypeSafe().apply(new TestMatcher(),123);
  assertThat(wasCalled.get()).isTrue();
  wasCalled.set(false);
  matchesTypeSafe().apply(new TestMatcher(),"");
  assertThat(wasCalled.get()).isFalse();
}
