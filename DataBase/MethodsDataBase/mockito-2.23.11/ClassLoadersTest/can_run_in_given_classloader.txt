@Test public void can_run_in_given_classloader() throws Exception {
  final ClassLoader cl=isolatedClassLoader().withCurrentCodeSourceUrls().withCodeSourceUrlOf(Assertions.class).withPrivateCopyOf("org.assertj.core").withPrivateCopyOf(ClassLoadersTest.class.getPackage().getName()).without(AClass.class.getName()).build();
  final AtomicBoolean executed=new AtomicBoolean(false);
  ClassLoaders.using(cl).execute(new Runnable(){
    @Override public void run(){
      assertThat(this.getClass().getClassLoader()).describedAs("runnable is reloaded in given classloader").isEqualTo(cl);
      assertThat(Thread.currentThread().getContextClassLoader()).describedAs("Thread context classloader is using given classloader").isEqualTo(cl);
      try {
        assertThat(Thread.currentThread().getContextClassLoader().loadClass("java.lang.String")).describedAs("can load JDK type").isNotNull();
        assertThat(Thread.currentThread().getContextClassLoader().loadClass("org.mockitoutil.ClassLoadersTest$ClassUsingInterface1")).describedAs("can load classloader types").isNotNull();
      }
 catch (      ClassNotFoundException cnfe) {
        Assertions.fail("should not have raised a CNFE",cnfe);
      }
      executed.set(true);
    }
  }
);
  assertThat(executed.get()).isEqualTo(true);
}
