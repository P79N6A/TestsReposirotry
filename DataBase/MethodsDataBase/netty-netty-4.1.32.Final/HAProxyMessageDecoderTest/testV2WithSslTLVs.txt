@Test public void testV2WithSslTLVs() throws Exception {
  ch=new EmbeddedChannel(new HAProxyMessageDecoder());
  final byte[] bytes={13,10,13,10,0,13,10,81,85,73,84,10,33,17,0,35,127,0,0,1,127,0,0,1,-55,-90,7,89,32,0,20,5,0,0,0,0,33,0,5,84,76,83,118,49,34,0,4,76,69,65,70};
  int startChannels=ch.pipeline().names().size();
  assertTrue(ch.writeInbound(copiedBuffer(bytes)));
  Object msgObj=ch.readInbound();
  assertEquals(startChannels - 1,ch.pipeline().names().size());
  HAProxyMessage msg=(HAProxyMessage)msgObj;
  assertEquals(HAProxyProtocolVersion.V2,msg.protocolVersion());
  assertEquals(HAProxyCommand.PROXY,msg.command());
  assertEquals(HAProxyProxiedProtocol.TCP4,msg.proxiedProtocol());
  assertEquals("127.0.0.1",msg.sourceAddress());
  assertEquals("127.0.0.1",msg.destinationAddress());
  assertEquals(51622,msg.sourcePort());
  assertEquals(1881,msg.destinationPort());
  final List<HAProxyTLV> tlvs=msg.tlvs();
  assertEquals(3,tlvs.size());
  final HAProxyTLV firstTlv=tlvs.get(0);
  assertEquals(HAProxyTLV.Type.PP2_TYPE_SSL,firstTlv.type());
  final HAProxySSLTLV sslTlv=(HAProxySSLTLV)firstTlv;
  assertEquals(0,sslTlv.verify());
  assertTrue(sslTlv.isPP2ClientSSL());
  assertTrue(sslTlv.isPP2ClientCertSess());
  assertFalse(sslTlv.isPP2ClientCertConn());
  final HAProxyTLV secondTlv=tlvs.get(1);
  assertEquals(HAProxyTLV.Type.PP2_TYPE_SSL_VERSION,secondTlv.type());
  ByteBuf secondContentBuf=secondTlv.content();
  byte[] secondContent=new byte[secondContentBuf.readableBytes()];
  secondContentBuf.readBytes(secondContent);
  assertArrayEquals("TLSv1".getBytes(CharsetUtil.US_ASCII),secondContent);
  final HAProxyTLV thirdTLV=tlvs.get(2);
  assertEquals(HAProxyTLV.Type.PP2_TYPE_SSL_CN,thirdTLV.type());
  ByteBuf thirdContentBuf=thirdTLV.content();
  byte[] thirdContent=new byte[thirdContentBuf.readableBytes()];
  thirdContentBuf.readBytes(thirdContent);
  assertArrayEquals("LEAF".getBytes(CharsetUtil.US_ASCII),thirdContent);
  assertTrue(sslTlv.encapsulatedTLVs().contains(secondTlv));
  assertTrue(sslTlv.encapsulatedTLVs().contains(thirdTLV));
  assertTrue(0 < firstTlv.refCnt());
  assertTrue(0 < secondTlv.refCnt());
  assertTrue(0 < thirdTLV.refCnt());
  assertFalse(thirdTLV.release());
  assertFalse(secondTlv.release());
  assertTrue(firstTlv.release());
  assertEquals(0,firstTlv.refCnt());
  assertEquals(0,secondTlv.refCnt());
  assertEquals(0,thirdTLV.refCnt());
  assertNull(ch.readInbound());
  assertFalse(ch.finish());
}
