@Test(timeout=10000) public void testMultipleBindSocketChannel() throws Exception {
  Assume.assumeTrue(versionEqOrGt(3,9,0));
  ServerBootstrap bootstrap=createServerBootstrap();
  bootstrap.option(EpollChannelOption.SO_REUSEPORT,true);
  final AtomicBoolean accepted1=new AtomicBoolean();
  bootstrap.childHandler(new ServerSocketTestHandler(accepted1));
  ChannelFuture future=bootstrap.bind().syncUninterruptibly();
  InetSocketAddress address1=(InetSocketAddress)future.channel().localAddress();
  final AtomicBoolean accepted2=new AtomicBoolean();
  bootstrap.childHandler(new ServerSocketTestHandler(accepted2));
  ChannelFuture future2=bootstrap.bind(address1).syncUninterruptibly();
  InetSocketAddress address2=(InetSocketAddress)future2.channel().localAddress();
  Assert.assertEquals(address1,address2);
  while (!accepted1.get() || !accepted2.get()) {
    Socket socket=new Socket(address1.getAddress(),address1.getPort());
    socket.setReuseAddress(true);
    socket.close();
  }
  future.channel().close().syncUninterruptibly();
  future2.channel().close().syncUninterruptibly();
}
