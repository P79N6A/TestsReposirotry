@Test public void testResolveAllHostsFile(){
  final DnsNameResolver resolver=new DnsNameResolverBuilder(group.next()).channelType(NioDatagramChannel.class).hostsFileEntriesResolver(new HostsFileEntriesResolver(){
    @Override public InetAddress address(    String inetHost,    ResolvedAddressTypes resolvedAddressTypes){
      if ("foo.com.".equals(inetHost)) {
        try {
          return InetAddress.getByAddress("foo.com",new byte[]{1,2,3,4});
        }
 catch (        UnknownHostException e) {
          throw new Error(e);
        }
      }
      return null;
    }
  }
).build();
  final List<DnsRecord> records=resolver.resolveAll(new DefaultDnsQuestion("foo.com.",A)).syncUninterruptibly().getNow();
  assertThat(records,Matchers.<DnsRecord>hasSize(1));
  assertThat(records.get(0),Matchers.<DnsRecord>instanceOf(DnsRawRecord.class));
  final DnsRawRecord record=(DnsRawRecord)records.get(0);
  final ByteBuf content=record.content();
  assertThat(record.name(),is("foo.com."));
  assertThat(record.dnsClass(),is(DnsRecord.CLASS_IN));
  assertThat(record.type(),is(A));
  assertThat(content.readableBytes(),is(4));
  assertThat(content.readInt(),is(0x01020304));
  record.release();
}
