@Test public void testResolveAllMx(){
  final DnsNameResolver resolver=newResolver().build();
  try {
    assertThat(resolver.isRecursionDesired(),is(true));
    final Map<String,Future<List<DnsRecord>>> futures=new LinkedHashMap<String,Future<List<DnsRecord>>>();
    for (    String name : DOMAINS) {
      if (EXCLUSIONS_QUERY_MX.contains(name)) {
        continue;
      }
      futures.put(name,resolver.resolveAll(new DefaultDnsQuestion(name,DnsRecordType.MX)));
    }
    for (    Entry<String,Future<List<DnsRecord>>> e : futures.entrySet()) {
      String hostname=e.getKey();
      Future<List<DnsRecord>> f=e.getValue().awaitUninterruptibly();
      final List<DnsRecord> mxList=f.getNow();
      assertThat(mxList.size(),is(greaterThan(0)));
      StringBuilder buf=new StringBuilder();
      for (      DnsRecord r : mxList) {
        ByteBuf recordContent=((ByteBufHolder)r).content();
        buf.append(StringUtil.NEWLINE);
        buf.append('\t');
        buf.append(r.name());
        buf.append(' ');
        buf.append(r.type().name());
        buf.append(' ');
        buf.append(recordContent.readUnsignedShort());
        buf.append(' ');
        buf.append(DnsResolveContext.decodeDomainName(recordContent));
        ReferenceCountUtil.release(r);
      }
      logger.info("{} has the following MX records:{}",hostname,buf);
    }
  }
  finally {
    resolver.close();
  }
}
