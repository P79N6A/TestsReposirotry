@Test public void testQueryMx(){
  DnsNameResolver resolver=newResolver().build();
  try {
    assertThat(resolver.isRecursionDesired(),is(true));
    Map<String,Future<AddressedEnvelope<DnsResponse,InetSocketAddress>>> futures=new LinkedHashMap<String,Future<AddressedEnvelope<DnsResponse,InetSocketAddress>>>();
    for (    String name : DOMAINS) {
      if (EXCLUSIONS_QUERY_MX.contains(name)) {
        continue;
      }
      queryMx(resolver,futures,name);
    }
    for (    Entry<String,Future<AddressedEnvelope<DnsResponse,InetSocketAddress>>> e : futures.entrySet()) {
      String hostname=e.getKey();
      Future<AddressedEnvelope<DnsResponse,InetSocketAddress>> f=e.getValue().awaitUninterruptibly();
      DnsResponse response=f.getNow().content();
      assertThat(response.code(),is(DnsResponseCode.NOERROR));
      final int answerCount=response.count(DnsSection.ANSWER);
      final List<DnsRecord> mxList=new ArrayList<DnsRecord>(answerCount);
      for (int i=0; i < answerCount; i++) {
        final DnsRecord r=response.recordAt(DnsSection.ANSWER,i);
        if (r.type() == DnsRecordType.MX) {
          mxList.add(r);
        }
      }
      assertThat(mxList.size(),is(greaterThan(0)));
      StringBuilder buf=new StringBuilder();
      for (      DnsRecord r : mxList) {
        ByteBuf recordContent=((ByteBufHolder)r).content();
        buf.append(StringUtil.NEWLINE);
        buf.append('\t');
        buf.append(r.name());
        buf.append(' ');
        buf.append(r.type().name());
        buf.append(' ');
        buf.append(recordContent.readUnsignedShort());
        buf.append(' ');
        buf.append(DnsResolveContext.decodeDomainName(recordContent));
      }
      logger.info("{} has the following MX records:{}",hostname,buf);
      response.release();
      assertNoQueriesMade(resolver);
    }
  }
  finally {
    resolver.close();
  }
}
