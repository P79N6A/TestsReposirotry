@Test(timeout=DEFAULT_TEST_TIMEOUT_MS) public void aAndAAAAQueryShouldTryFirstDnsServerBeforeSecond() throws IOException {
  final String knownHostName="netty.io";
  final TestDnsServer dnsServer1=new TestDnsServer(Collections.singleton("notnetty.com"));
  final TestDnsServer dnsServer2=new TestDnsServer(Collections.singleton(knownHostName));
  DnsNameResolver resolver=null;
  try {
    dnsServer1.start();
    dnsServer2.start();
    TestRecursiveCacheDnsQueryLifecycleObserverFactory lifecycleObserverFactory=new TestRecursiveCacheDnsQueryLifecycleObserverFactory();
    DnsNameResolverBuilder builder=new DnsNameResolverBuilder(group.next()).resolvedAddressTypes(ResolvedAddressTypes.IPV6_PREFERRED).dnsQueryLifecycleObserverFactory(lifecycleObserverFactory).channelType(NioDatagramChannel.class).optResourceEnabled(false).ndots(1);
    builder.nameServerProvider(new SequentialDnsServerAddressStreamProvider(dnsServer1.localAddress(),dnsServer2.localAddress()));
    resolver=builder.build();
    assertNotNull(resolver.resolve(knownHostName).syncUninterruptibly().getNow());
    TestDnsQueryLifecycleObserver observer=lifecycleObserverFactory.observers.poll();
    assertNotNull(observer);
    assertEquals(2,lifecycleObserverFactory.observers.size());
    assertEquals(2,observer.events.size());
    QueryWrittenEvent writtenEvent=(QueryWrittenEvent)observer.events.poll();
    assertEquals(dnsServer1.localAddress(),writtenEvent.dnsServerAddress);
    QueryFailedEvent failedEvent=(QueryFailedEvent)observer.events.poll();
    observer=lifecycleObserverFactory.observers.poll();
    assertEquals(2,observer.events.size());
    writtenEvent=(QueryWrittenEvent)observer.events.poll();
    assertEquals(dnsServer1.localAddress(),writtenEvent.dnsServerAddress);
    failedEvent=(QueryFailedEvent)observer.events.poll();
    observer=lifecycleObserverFactory.observers.poll();
    assertEquals(2,observer.events.size());
    writtenEvent=(QueryWrittenEvent)observer.events.poll();
    assertEquals(dnsServer2.localAddress(),writtenEvent.dnsServerAddress);
    QuerySucceededEvent succeededEvent=(QuerySucceededEvent)observer.events.poll();
  }
  finally {
    if (resolver != null) {
      resolver.close();
    }
    dnsServer1.stop();
    dnsServer2.stop();
  }
}
