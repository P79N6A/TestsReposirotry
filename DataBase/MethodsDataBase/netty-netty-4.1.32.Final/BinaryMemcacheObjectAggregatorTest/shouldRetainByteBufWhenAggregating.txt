@Test public void shouldRetainByteBufWhenAggregating(){
  channel=new EmbeddedChannel(new BinaryMemcacheRequestEncoder(),new BinaryMemcacheRequestDecoder(),new BinaryMemcacheObjectAggregator(MAX_CONTENT_SIZE));
  ByteBuf key=Unpooled.copiedBuffer("Netty",CharsetUtil.UTF_8);
  ByteBuf extras=Unpooled.copiedBuffer("extras",CharsetUtil.UTF_8);
  BinaryMemcacheRequest request=new DefaultBinaryMemcacheRequest(key,extras);
  DefaultMemcacheContent content1=new DefaultMemcacheContent(Unpooled.copiedBuffer("Netty",CharsetUtil.UTF_8));
  DefaultLastMemcacheContent content2=new DefaultLastMemcacheContent(Unpooled.copiedBuffer(" Rocks!",CharsetUtil.UTF_8));
  int totalBodyLength=key.readableBytes() + extras.readableBytes() + content1.content().readableBytes()+ content2.content().readableBytes();
  request.setTotalBodyLength(totalBodyLength);
  assertTrue(channel.writeOutbound(request,content1,content2));
  assertThat(channel.outboundMessages().size(),is(3));
  assertTrue(channel.writeInbound(channel.readOutbound(),channel.readOutbound(),channel.readOutbound()));
  FullBinaryMemcacheRequest read=channel.readInbound();
  assertThat(read,notNullValue());
  assertThat(read.key().toString(CharsetUtil.UTF_8),is("Netty"));
  assertThat(read.extras().toString(CharsetUtil.UTF_8),is("extras"));
  assertThat(read.content().toString(CharsetUtil.UTF_8),is("Netty Rocks!"));
  read.release();
  assertFalse(channel.finish());
}
