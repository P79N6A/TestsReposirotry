@Test public void serverResponseHeaderInformational() throws Exception {
  boostrapEnv(1,2,1,2,1);
  final FullHttpMessage request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.PUT,"/info/test",true);
  HttpHeaders httpHeaders=request.headers();
  httpHeaders.setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),3);
  httpHeaders.set(HttpHeaderNames.EXPECT,HttpHeaderValues.CONTINUE);
  httpHeaders.setInt(HttpHeaderNames.CONTENT_LENGTH,0);
  httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(),(short)16);
  final Http2Headers http2Headers=new DefaultHttp2Headers().method(new AsciiString("PUT")).path(new AsciiString("/info/test")).set(new AsciiString(HttpHeaderNames.EXPECT.toString()),new AsciiString(HttpHeaderValues.CONTINUE.toString()));
  final FullHttpMessage response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.CONTINUE);
  final String text="a big payload";
  final ByteBuf payload=Unpooled.copiedBuffer(text.getBytes());
  final FullHttpMessage request2=request.replace(payload);
  final FullHttpMessage response2=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK);
  try {
    runInChannel(clientChannel,new Http2Runnable(){
      @Override public void run() throws Http2Exception {
        clientHandler.encoder().writeHeaders(ctxClient(),3,http2Headers,0,false,newPromiseClient());
        clientChannel.flush();
      }
    }
);
    awaitRequests();
    httpHeaders=response.headers();
    httpHeaders.setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),3);
    httpHeaders.setInt(HttpHeaderNames.CONTENT_LENGTH,0);
    final Http2Headers http2HeadersResponse=new DefaultHttp2Headers().status(new AsciiString("100"));
    runInChannel(serverConnectedChannel,new Http2Runnable(){
      @Override public void run() throws Http2Exception {
        serverHandler.encoder().writeHeaders(ctxServer(),3,http2HeadersResponse,0,false,newPromiseServer());
        serverConnectedChannel.flush();
      }
    }
);
    awaitResponses();
    httpHeaders=request2.headers();
    httpHeaders.setInt(HttpHeaderNames.CONTENT_LENGTH,text.length());
    httpHeaders.remove(HttpHeaderNames.EXPECT);
    runInChannel(clientChannel,new Http2Runnable(){
      @Override public void run(){
        clientHandler.encoder().writeData(ctxClient(),3,payload.retainedDuplicate(),0,true,newPromiseClient());
        clientChannel.flush();
      }
    }
);
    awaitRequests2();
    httpHeaders=response2.headers();
    httpHeaders.setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),3);
    httpHeaders.setInt(HttpHeaderNames.CONTENT_LENGTH,0);
    httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(),(short)16);
    final Http2Headers http2HeadersResponse2=new DefaultHttp2Headers().status(new AsciiString("200"));
    runInChannel(serverConnectedChannel,new Http2Runnable(){
      @Override public void run() throws Http2Exception {
        serverHandler.encoder().writeHeaders(ctxServer(),3,http2HeadersResponse2,0,true,newPromiseServer());
        serverConnectedChannel.flush();
      }
    }
);
    awaitResponses2();
    ArgumentCaptor<FullHttpMessage> requestCaptor=ArgumentCaptor.forClass(FullHttpMessage.class);
    verify(serverListener,times(2)).messageReceived(requestCaptor.capture());
    capturedRequests=requestCaptor.getAllValues();
    assertEquals(2,capturedRequests.size());
    assertNotNull(request.headers().remove("x-http2-stream-weight"));
    assertEquals(request,capturedRequests.get(0));
    assertEquals(request2,capturedRequests.get(1));
    ArgumentCaptor<FullHttpMessage> responseCaptor=ArgumentCaptor.forClass(FullHttpMessage.class);
    verify(clientListener,times(2)).messageReceived(responseCaptor.capture());
    capturedResponses=responseCaptor.getAllValues();
    assertEquals(2,capturedResponses.size());
    assertEquals(response,capturedResponses.get(0));
    assertEquals(response2,capturedResponses.get(1));
  }
  finally {
    request.release();
    request2.release();
    response.release();
    response2.release();
  }
}
