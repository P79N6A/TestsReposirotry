@Test public void clientRequestMultipleEmptyDataFrames() throws Exception {
  boostrapEnv(1,1,1);
  final String text="";
  final ByteBuf content=Unpooled.copiedBuffer(text.getBytes());
  final FullHttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,"/some/path/resource2",content,true);
  try {
    HttpHeaders httpHeaders=request.headers();
    httpHeaders.setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),3);
    httpHeaders.setInt(HttpHeaderNames.CONTENT_LENGTH,text.length());
    httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(),(short)16);
    final Http2Headers http2Headers=new DefaultHttp2Headers().method(new AsciiString("GET")).path(new AsciiString("/some/path/resource2"));
    runInChannel(clientChannel,new Http2Runnable(){
      @Override public void run() throws Http2Exception {
        clientHandler.encoder().writeHeaders(ctxClient(),3,http2Headers,0,false,newPromiseClient());
        clientHandler.encoder().writeData(ctxClient(),3,content.retain(),0,false,newPromiseClient());
        clientHandler.encoder().writeData(ctxClient(),3,content.retain(),0,false,newPromiseClient());
        clientHandler.encoder().writeData(ctxClient(),3,content.retain(),0,true,newPromiseClient());
        clientChannel.flush();
      }
    }
);
    awaitRequests();
    ArgumentCaptor<FullHttpMessage> requestCaptor=ArgumentCaptor.forClass(FullHttpMessage.class);
    verify(serverListener).messageReceived(requestCaptor.capture());
    capturedRequests=requestCaptor.getAllValues();
    assertEquals(request,capturedRequests.get(0));
  }
  finally {
    request.release();
  }
}
