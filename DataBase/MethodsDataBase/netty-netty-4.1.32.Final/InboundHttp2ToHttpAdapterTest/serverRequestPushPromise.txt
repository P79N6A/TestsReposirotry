@Test public void serverRequestPushPromise() throws Exception {
  boostrapEnv(1,1,1);
  final String text="hello world big time data!";
  final ByteBuf content=Unpooled.copiedBuffer(text.getBytes());
  final String text2="hello world smaller data?";
  final ByteBuf content2=Unpooled.copiedBuffer(text2.getBytes());
  final FullHttpMessage response=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK,content,true);
  final FullHttpMessage response2=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.CREATED,content2,true);
  final FullHttpMessage request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,"/push/test",true);
  try {
    HttpHeaders httpHeaders=response.headers();
    httpHeaders.setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),3);
    httpHeaders.setInt(HttpHeaderNames.CONTENT_LENGTH,text.length());
    httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(),(short)16);
    HttpHeaders httpHeaders2=response2.headers();
    httpHeaders2.set(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text(),"https");
    httpHeaders2.set(HttpHeaderNames.HOST,"example.org");
    httpHeaders2.setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),5);
    httpHeaders2.setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_PROMISE_ID.text(),3);
    httpHeaders2.setInt(HttpHeaderNames.CONTENT_LENGTH,text2.length());
    httpHeaders=request.headers();
    httpHeaders.setInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text(),3);
    httpHeaders.setInt(HttpHeaderNames.CONTENT_LENGTH,0);
    httpHeaders.setShort(HttpConversionUtil.ExtensionHeaderNames.STREAM_WEIGHT.text(),(short)16);
    final Http2Headers http2Headers3=new DefaultHttp2Headers().method(new AsciiString("GET")).path(new AsciiString("/push/test"));
    runInChannel(clientChannel,new Http2Runnable(){
      @Override public void run() throws Http2Exception {
        clientHandler.encoder().writeHeaders(ctxClient(),3,http2Headers3,0,true,newPromiseClient());
        clientChannel.flush();
      }
    }
);
    awaitRequests();
    ArgumentCaptor<FullHttpMessage> requestCaptor=ArgumentCaptor.forClass(FullHttpMessage.class);
    verify(serverListener).messageReceived(requestCaptor.capture());
    capturedRequests=requestCaptor.getAllValues();
    assertEquals(request,capturedRequests.get(0));
    final Http2Headers http2Headers=new DefaultHttp2Headers().status(new AsciiString("200"));
    final Http2Headers http2Headers2=new DefaultHttp2Headers().scheme(new AsciiString("https")).authority(new AsciiString("example.org"));
    runInChannel(serverConnectedChannel,new Http2Runnable(){
      @Override public void run() throws Http2Exception {
        serverHandler.encoder().writeHeaders(ctxServer(),3,http2Headers,0,false,newPromiseServer());
        serverHandler.encoder().writePushPromise(ctxServer(),3,2,http2Headers2,0,newPromiseServer());
        serverHandler.encoder().writeData(ctxServer(),3,content.retainedDuplicate(),0,true,newPromiseServer());
        serverHandler.encoder().writeData(ctxServer(),5,content2.retainedDuplicate(),0,true,newPromiseServer());
        serverConnectedChannel.flush();
      }
    }
);
    awaitResponses();
    ArgumentCaptor<FullHttpMessage> responseCaptor=ArgumentCaptor.forClass(FullHttpMessage.class);
    verify(clientListener).messageReceived(responseCaptor.capture());
    capturedResponses=responseCaptor.getAllValues();
    assertEquals(response,capturedResponses.get(0));
  }
  finally {
    request.release();
    response.release();
    response2.release();
  }
}
