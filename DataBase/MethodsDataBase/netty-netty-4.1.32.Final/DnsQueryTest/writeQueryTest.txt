@Test public void writeQueryTest() throws Exception {
  InetSocketAddress addr=SocketUtils.socketAddress("8.8.8.8",53);
  EmbeddedChannel embedder=new EmbeddedChannel(new DatagramDnsQueryEncoder());
  List<DnsQuery> queries=new ArrayList<DnsQuery>(5);
  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion("1.0.0.127.in-addr.arpa",DnsRecordType.PTR)));
  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion("www.example.com",DnsRecordType.A)));
  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion("example.com",DnsRecordType.AAAA)));
  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion("example.com",DnsRecordType.MX)));
  queries.add(new DatagramDnsQuery(null,addr,1).setRecord(DnsSection.QUESTION,new DefaultDnsQuestion("example.com",DnsRecordType.CNAME)));
  for (  DnsQuery query : queries) {
    assertThat(query.count(DnsSection.QUESTION),is(1));
    assertThat(query.count(DnsSection.ANSWER),is(0));
    assertThat(query.count(DnsSection.AUTHORITY),is(0));
    assertThat(query.count(DnsSection.ADDITIONAL),is(0));
    embedder.writeOutbound(query);
    DatagramPacket packet=embedder.readOutbound();
    Assert.assertTrue(packet.content().isReadable());
    packet.release();
    Assert.assertNull(embedder.readOutbound());
  }
}
