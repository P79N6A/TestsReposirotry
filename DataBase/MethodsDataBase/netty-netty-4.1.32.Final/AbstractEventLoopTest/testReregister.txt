/** 
 * Test for https://github.com/netty/netty/issues/803
 */
@Test public void testReregister(){
  EventLoopGroup group=newEventLoopGroup();
  EventLoopGroup group2=newEventLoopGroup();
  final EventExecutorGroup eventExecutorGroup=new DefaultEventExecutorGroup(2);
  ServerBootstrap bootstrap=new ServerBootstrap();
  ChannelFuture future=bootstrap.channel(newChannel()).group(group).childHandler(new ChannelInitializer<SocketChannel>(){
    @Override public void initChannel(    SocketChannel ch) throws Exception {
    }
  }
).handler(new ChannelInitializer<ServerSocketChannel>(){
    @Override public void initChannel(    ServerSocketChannel ch) throws Exception {
      ch.pipeline().addLast(new TestChannelHandler());
      ch.pipeline().addLast(eventExecutorGroup,new TestChannelHandler2());
    }
  }
).bind(0).awaitUninterruptibly();
  EventExecutor executor=future.channel().pipeline().context(TestChannelHandler2.class).executor();
  EventExecutor executor1=future.channel().pipeline().context(TestChannelHandler.class).executor();
  future.channel().deregister().awaitUninterruptibly();
  Channel channel=group2.register(future.channel()).awaitUninterruptibly().channel();
  EventExecutor executorNew=channel.pipeline().context(TestChannelHandler.class).executor();
  assertNotSame(executor1,executorNew);
  assertSame(executor,future.channel().pipeline().context(TestChannelHandler2.class).executor());
}
