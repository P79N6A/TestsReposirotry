@Test public void upgradeWithoutFlowControlling() throws Exception {
  channel.pipeline().addAfter(http2HandlerCtx.name(),null,new ChannelInboundHandlerAdapter(){
    @Override public void channelRead(    final ChannelHandlerContext ctx,    Object msg) throws Exception {
      if (msg instanceof Http2DataFrame) {
        Http2DataFrame data=(Http2DataFrame)msg;
        ctx.writeAndFlush(new DefaultHttp2WindowUpdateFrame(data.initialFlowControlledBytes()).stream(data.stream())).addListener(new ChannelFutureListener(){
          @Override public void operationComplete(          ChannelFuture future) throws Exception {
            Throwable cause=future.cause();
            if (cause != null) {
              ctx.fireExceptionCaught(cause);
            }
          }
        }
);
      }
      ReferenceCountUtil.release(msg);
    }
  }
);
  frameListener.onHeadersRead(http2HandlerCtx,Http2CodecUtil.HTTP_UPGRADE_STREAM_ID,request,31,false);
  Constructor<UpgradeEvent> constructor=UpgradeEvent.class.getDeclaredConstructor(CharSequence.class,FullHttpRequest.class);
  Assume.assumeTrue(ReflectionUtil.trySetAccessible(constructor,true) == null);
  String longString=new String(new char[70000]).replace("\0","*");
  DefaultFullHttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,"/",bb(longString));
  HttpServerUpgradeHandler.UpgradeEvent upgradeEvent=constructor.newInstance("HTTP/2",request);
  channel.pipeline().fireUserEventTriggered(upgradeEvent);
}
