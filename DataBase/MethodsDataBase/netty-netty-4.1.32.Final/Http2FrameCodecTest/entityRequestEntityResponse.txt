@Test public void entityRequestEntityResponse() throws Exception {
  frameListener.onHeadersRead(http2HandlerCtx,1,request,0,false);
  Http2Stream stream=frameCodec.connection().stream(1);
  assertNotNull(stream);
  assertEquals(State.OPEN,stream.state());
  Http2HeadersFrame inboundHeaders=inboundHandler.readInbound();
  Http2FrameStream stream2=inboundHeaders.stream();
  assertNotNull(stream2);
  assertEquals(1,stream2.id());
  assertEquals(new DefaultHttp2HeadersFrame(request,false).stream(stream2),inboundHeaders);
  assertNull(inboundHandler.readInbound());
  ByteBuf hello=bb("hello");
  frameListener.onDataRead(http2HandlerCtx,1,hello,31,true);
  hello.release();
  Http2DataFrame inboundData=inboundHandler.readInbound();
  Http2DataFrame expected=new DefaultHttp2DataFrame(bb("hello"),true,31).stream(stream2);
  assertEquals(expected,inboundData);
  assertEquals(1,inboundData.refCnt());
  expected.release();
  inboundData.release();
  assertNull(inboundHandler.readInbound());
  inboundHandler.writeOutbound(new DefaultHttp2HeadersFrame(response,false).stream(stream2));
  verify(frameWriter).writeHeaders(eq(http2HandlerCtx),eq(1),eq(response),anyInt(),anyShort(),anyBoolean(),eq(0),eq(false),anyChannelPromise());
  inboundHandler.writeOutbound(new DefaultHttp2DataFrame(bb("world"),true,27).stream(stream2));
  ArgumentCaptor<ByteBuf> outboundData=ArgumentCaptor.forClass(ByteBuf.class);
  verify(frameWriter).writeData(eq(http2HandlerCtx),eq(1),outboundData.capture(),eq(27),eq(true),anyChannelPromise());
  ByteBuf bb=bb("world");
  assertEquals(bb,outboundData.getValue());
  assertEquals(1,outboundData.getValue().refCnt());
  bb.release();
  verify(frameWriter,never()).writeRstStream(any(ChannelHandlerContext.class),anyInt(),anyLong(),anyChannelPromise());
  assertTrue(channel.isActive());
}
