@Test public void iterateActiveStreams() throws Exception {
  setUp(Http2FrameCodecBuilder.forServer().encoderEnforceMaxConcurrentStreams(true),new Http2Settings().maxConcurrentStreams(1));
  frameListener.onHeadersRead(http2HandlerCtx,3,request,0,false);
  Http2HeadersFrame headersFrame=inboundHandler.readInbound();
  assertNotNull(headersFrame);
  Http2FrameStream activeInbond=headersFrame.stream();
  Http2FrameStream activeOutbound=frameCodec.newStream();
  channel.writeAndFlush(new DefaultHttp2HeadersFrame(new DefaultHttp2Headers()).stream(activeOutbound));
  Http2FrameStream bufferedOutbound=frameCodec.newStream();
  channel.writeAndFlush(new DefaultHttp2HeadersFrame(new DefaultHttp2Headers()).stream(bufferedOutbound));
  @SuppressWarnings("unused") Http2FrameStream idleStream=frameCodec.newStream();
  final Set<Http2FrameStream> activeStreams=new HashSet<Http2FrameStream>();
  frameCodec.forEachActiveStream(new Http2FrameStreamVisitor(){
    @Override public boolean visit(    Http2FrameStream stream){
      activeStreams.add(stream);
      return true;
    }
  }
);
  assertEquals(2,activeStreams.size());
  Set<Http2FrameStream> expectedStreams=new HashSet<Http2FrameStream>();
  expectedStreams.add(activeInbond);
  expectedStreams.add(activeOutbound);
  assertEquals(expectedStreams,activeStreams);
}
