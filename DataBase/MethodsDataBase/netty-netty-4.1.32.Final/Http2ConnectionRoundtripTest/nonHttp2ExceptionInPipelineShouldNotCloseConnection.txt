@Test public void nonHttp2ExceptionInPipelineShouldNotCloseConnection() throws Exception {
  bootstrapEnv(1,1,2,1);
  final CountDownLatch closeLatch=new CountDownLatch(1);
  clientChannel.closeFuture().addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      closeLatch.countDown();
    }
  }
);
  final Http2Headers headers=dummyHeaders();
  runInChannel(clientChannel,new Http2Runnable(){
    @Override public void run() throws Http2Exception {
      http2Client.encoder().writeHeaders(ctx(),3,headers,0,(short)16,false,0,false,newPromise());
      http2Client.flush(ctx());
    }
  }
);
  assertTrue(serverSettingsAckLatch.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
  assertTrue(requestLatch.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
  clientChannel.pipeline().addFirst(new ChannelHandlerAdapter(){
    @Override public void handlerAdded(    ChannelHandlerContext ctx) throws Exception {
      throw new RuntimeException("Fake Exception");
    }
  }
);
  assertFalse(closeLatch.await(2,SECONDS));
  assertTrue(clientChannel.isOpen());
  setClientGracefulShutdownTime(0);
}
