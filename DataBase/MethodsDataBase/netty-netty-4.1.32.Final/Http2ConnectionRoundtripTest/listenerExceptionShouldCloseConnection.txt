@Test public void listenerExceptionShouldCloseConnection() throws Exception {
  final Http2Headers headers=dummyHeaders();
  doThrow(new RuntimeException("Fake Exception")).when(serverListener).onHeadersRead(any(ChannelHandlerContext.class),eq(3),eq(headers),eq(0),eq((short)16),eq(false),eq(0),eq(false));
  bootstrapEnv(1,0,1,1);
  final CountDownLatch closeLatch=new CountDownLatch(1);
  clientChannel.closeFuture().addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      closeLatch.countDown();
    }
  }
);
  runInChannel(clientChannel,new Http2Runnable(){
    @Override public void run() throws Http2Exception {
      http2Client.encoder().writeHeaders(ctx(),3,headers,0,(short)16,false,0,false,newPromise());
      http2Client.flush(ctx());
    }
  }
);
  assertTrue(serverSettingsAckLatch.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
  assertTrue(requestLatch.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
  assertTrue(closeLatch.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
  assertFalse(clientChannel.isOpen());
}
