@Test public void stressTest() throws Exception {
  final Http2Headers headers=dummyHeaders();
  int length=10;
  final ByteBuf data=randomBytes(length);
  final String dataAsHex=ByteBufUtil.hexDump(data);
  final long pingData=8;
  final int numStreams=2000;
  final long[] receivedPings=new long[numStreams];
  doAnswer(new Answer<Void>(){
    int nextIndex;
    @Override public Void answer(    InvocationOnMock in) throws Throwable {
      receivedPings[nextIndex++]=(Long)in.getArguments()[1];
      return null;
    }
  }
).when(serverListener).onPingRead(any(ChannelHandlerContext.class),any(Long.class));
  final StringBuilder[] receivedData=new StringBuilder[numStreams];
  doAnswer(new Answer<Integer>(){
    @Override public Integer answer(    InvocationOnMock in) throws Throwable {
      int streamId=(Integer)in.getArguments()[1];
      ByteBuf buf=(ByteBuf)in.getArguments()[2];
      int padding=(Integer)in.getArguments()[3];
      int processedBytes=buf.readableBytes() + padding;
      int streamIndex=(streamId - 3) / 2;
      StringBuilder builder=receivedData[streamIndex];
      if (builder == null) {
        builder=new StringBuilder(dataAsHex.length());
        receivedData[streamIndex]=builder;
      }
      builder.append(ByteBufUtil.hexDump(buf));
      return processedBytes;
    }
  }
).when(serverListener).onDataRead(any(ChannelHandlerContext.class),anyInt(),any(ByteBuf.class),anyInt(),anyBoolean());
  try {
    bootstrapEnv(numStreams * length,1,numStreams * 4,numStreams);
    runInChannel(clientChannel,new Http2Runnable(){
      @Override public void run() throws Http2Exception {
        int upperLimit=3 + 2 * numStreams;
        for (int streamId=3; streamId < upperLimit; streamId+=2) {
          http2Client.encoder().writeHeaders(ctx(),streamId,headers,0,(short)16,false,0,false,newPromise());
          http2Client.encoder().writePing(ctx(),false,pingData,newPromise());
          http2Client.encoder().writeData(ctx(),streamId,data.retainedSlice(),0,false,newPromise());
          http2Client.encoder().writeHeaders(ctx(),streamId,headers,0,(short)16,false,0,true,newPromise());
          http2Client.flush(ctx());
        }
      }
    }
);
    assertTrue(serverSettingsAckLatch.await(60,SECONDS));
    assertTrue(trailersLatch.await(60,SECONDS));
    verify(serverListener,times(numStreams)).onHeadersRead(any(ChannelHandlerContext.class),anyInt(),eq(headers),eq(0),eq((short)16),eq(false),eq(0),eq(false));
    verify(serverListener,times(numStreams)).onHeadersRead(any(ChannelHandlerContext.class),anyInt(),eq(headers),eq(0),eq((short)16),eq(false),eq(0),eq(true));
    verify(serverListener,times(numStreams)).onPingRead(any(ChannelHandlerContext.class),any(long.class));
    verify(serverListener,never()).onDataRead(any(ChannelHandlerContext.class),anyInt(),any(ByteBuf.class),eq(0),eq(true));
    for (    StringBuilder builder : receivedData) {
      assertEquals(dataAsHex,builder.toString());
    }
    for (    long receivedPing : receivedPings) {
      assertEquals(pingData,receivedPing);
    }
  }
  finally {
    setClientGracefulShutdownTime(0);
    data.release();
  }
}
