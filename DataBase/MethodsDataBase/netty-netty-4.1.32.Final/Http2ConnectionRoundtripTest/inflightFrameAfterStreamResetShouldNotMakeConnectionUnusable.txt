@Test public void inflightFrameAfterStreamResetShouldNotMakeConnectionUnusable() throws Exception {
  bootstrapEnv(1,1,2,1);
  final CountDownLatch latch=new CountDownLatch(1);
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocationOnMock) throws Throwable {
      ChannelHandlerContext ctx=invocationOnMock.getArgument(0);
      http2Server.encoder().writeHeaders(ctx,(Integer)invocationOnMock.getArgument(1),(Http2Headers)invocationOnMock.getArgument(2),0,false,ctx.newPromise());
      http2Server.flush(ctx);
      return null;
    }
  }
).when(serverListener).onHeadersRead(any(ChannelHandlerContext.class),anyInt(),any(Http2Headers.class),anyInt(),anyShort(),anyBoolean(),anyInt(),anyBoolean());
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocationOnMock) throws Throwable {
      latch.countDown();
      return null;
    }
  }
).when(clientListener).onHeadersRead(any(ChannelHandlerContext.class),eq(5),any(Http2Headers.class),anyInt(),anyShort(),anyBoolean(),anyInt(),anyBoolean());
  final short weight=16;
  final Http2Headers headers=dummyHeaders();
  runInChannel(clientChannel,new Http2Runnable(){
    @Override public void run() throws Http2Exception {
      http2Client.encoder().writeHeaders(ctx(),3,headers,0,weight,false,0,false,newPromise());
      http2Client.flush(ctx());
      http2Client.encoder().writeRstStream(ctx(),3,Http2Error.INTERNAL_ERROR.code(),newPromise());
      http2Client.flush(ctx());
    }
  }
);
  runInChannel(clientChannel,new Http2Runnable(){
    @Override public void run() throws Http2Exception {
      http2Client.encoder().writeHeaders(ctx(),5,headers,0,weight,false,0,false,newPromise());
      http2Client.flush(ctx());
    }
  }
);
  assertTrue(latch.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
}
