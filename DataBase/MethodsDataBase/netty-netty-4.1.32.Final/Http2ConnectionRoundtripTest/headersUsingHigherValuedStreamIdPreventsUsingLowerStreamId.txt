@Test public void headersUsingHigherValuedStreamIdPreventsUsingLowerStreamId() throws Exception {
  bootstrapEnv(1,1,1,0);
  final Http2Headers headers=dummyHeaders();
  runInChannel(clientChannel,new Http2Runnable(){
    @Override public void run() throws Http2Exception {
      http2Client.encoder().writeHeaders(ctx(),5,headers,0,(short)16,false,0,false,newPromise());
      http2Client.encoder().frameWriter().writeHeaders(ctx(),3,headers,0,(short)16,false,0,false,newPromise());
      http2Client.flush(ctx());
    }
  }
);
  assertTrue(serverSettingsAckLatch.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
  assertTrue(requestLatch.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
  verify(serverListener).onHeadersRead(any(ChannelHandlerContext.class),eq(5),eq(headers),eq(0),eq((short)16),eq(false),eq(0),eq(false));
  verify(serverListener,never()).onHeadersRead(any(ChannelHandlerContext.class),eq(3),any(Http2Headers.class),anyInt(),anyShort(),anyBoolean(),anyInt(),anyBoolean());
  verify(serverListener,never()).onGoAwayRead(any(ChannelHandlerContext.class),anyInt(),anyLong(),any(ByteBuf.class));
  verify(serverListener,never()).onRstStreamRead(any(ChannelHandlerContext.class),anyInt(),anyLong());
  verify(clientListener,never()).onGoAwayRead(any(ChannelHandlerContext.class),anyInt(),anyLong(),any(ByteBuf.class));
  verify(clientListener,never()).onRstStreamRead(any(ChannelHandlerContext.class),anyInt(),anyLong());
}
