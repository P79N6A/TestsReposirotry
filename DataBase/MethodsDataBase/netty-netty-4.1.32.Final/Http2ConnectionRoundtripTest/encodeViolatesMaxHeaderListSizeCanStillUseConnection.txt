@Test public void encodeViolatesMaxHeaderListSizeCanStillUseConnection() throws Exception {
  bootstrapEnv(1,2,1,0,0);
  final CountDownLatch serverSettingsAckLatch1=new CountDownLatch(2);
  final CountDownLatch serverSettingsAckLatch2=new CountDownLatch(3);
  final CountDownLatch clientSettingsLatch1=new CountDownLatch(3);
  final CountDownLatch serverRevHeadersLatch=new CountDownLatch(1);
  final CountDownLatch clientHeadersLatch=new CountDownLatch(1);
  final CountDownLatch clientDataWrite=new CountDownLatch(1);
  final AtomicReference<Throwable> clientHeadersWriteException=new AtomicReference<Throwable>();
  final AtomicReference<Throwable> clientHeadersWriteException2=new AtomicReference<Throwable>();
  final AtomicReference<Throwable> clientDataWriteException=new AtomicReference<Throwable>();
  final Http2Headers headers=dummyHeaders();
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocationOnMock) throws Throwable {
      serverSettingsAckLatch1.countDown();
      serverSettingsAckLatch2.countDown();
      return null;
    }
  }
).when(serverListener).onSettingsAckRead(any(ChannelHandlerContext.class));
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocationOnMock) throws Throwable {
      clientSettingsLatch1.countDown();
      return null;
    }
  }
).when(clientListener).onSettingsRead(any(ChannelHandlerContext.class),any(Http2Settings.class));
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocationOnMock) throws Throwable {
      serverRevHeadersLatch.countDown();
      return null;
    }
  }
).when(serverListener).onHeadersRead(any(ChannelHandlerContext.class),eq(5),eq(headers),anyInt(),anyShort(),anyBoolean(),eq(0),eq(true));
  runInChannel(serverConnectedChannel,new Http2Runnable(){
    @Override public void run() throws Http2Exception {
      http2Server.encoder().writeSettings(serverCtx(),new Http2Settings().copyFrom(http2Server.decoder().localSettings()).maxHeaderListSize(100),serverNewPromise());
      http2Server.flush(serverCtx());
    }
  }
);
  assertTrue(serverSettingsAckLatch1.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
  runInChannel(clientChannel,new Http2Runnable(){
    @Override public void run() throws Http2Exception {
      http2Client.encoder().writeHeaders(ctx(),3,headers,0,false,newPromise()).addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          clientHeadersWriteException.set(future.cause());
        }
      }
);
      http2Client.encoder().writeData(ctx(),3,Unpooled.buffer(),0,true,newPromise()).addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          clientDataWriteException.set(future.cause());
          clientDataWrite.countDown();
        }
      }
);
      http2Client.flush(ctx());
    }
  }
);
  assertTrue(clientDataWrite.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
  assertNotNull("Header encode should have exceeded maxHeaderListSize!",clientHeadersWriteException.get());
  assertNotNull("Data on closed stream should fail!",clientDataWriteException.get());
  runInChannel(serverConnectedChannel,new Http2Runnable(){
    @Override public void run() throws Http2Exception {
      http2Server.encoder().writeSettings(serverCtx(),new Http2Settings().copyFrom(http2Server.decoder().localSettings()).maxHeaderListSize(Http2CodecUtil.MAX_HEADER_LIST_SIZE),serverNewPromise());
      http2Server.flush(serverCtx());
    }
  }
);
  assertTrue(clientSettingsLatch1.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
  assertTrue(serverSettingsAckLatch2.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
  runInChannel(clientChannel,new Http2Runnable(){
    @Override public void run() throws Http2Exception {
      http2Client.encoder().writeHeaders(ctx(),5,headers,0,true,newPromise()).addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          clientHeadersWriteException2.set(future.cause());
          clientHeadersLatch.countDown();
        }
      }
);
      http2Client.flush(ctx());
    }
  }
);
  assertTrue(clientHeadersLatch.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
  assertNull("Client write of headers should succeed with increased header list size!",clientHeadersWriteException2.get());
  assertTrue(serverRevHeadersLatch.await(DEFAULT_AWAIT_TIMEOUT_SECONDS,SECONDS));
  verify(serverListener,never()).onDataRead(any(ChannelHandlerContext.class),anyInt(),any(ByteBuf.class),anyInt(),anyBoolean());
  verify(serverListener,never()).onGoAwayRead(any(ChannelHandlerContext.class),anyInt(),anyLong(),any(ByteBuf.class));
  verify(serverListener,never()).onRstStreamRead(any(ChannelHandlerContext.class),anyInt(),anyLong());
  verify(clientListener,never()).onGoAwayRead(any(ChannelHandlerContext.class),anyInt(),anyLong(),any(ByteBuf.class));
  verify(clientListener,never()).onRstStreamRead(any(ChannelHandlerContext.class),anyInt(),anyLong());
}
