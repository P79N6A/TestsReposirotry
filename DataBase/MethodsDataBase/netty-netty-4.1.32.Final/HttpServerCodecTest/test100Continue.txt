@Test public void test100Continue() throws Exception {
  EmbeddedChannel ch=new EmbeddedChannel(new HttpServerCodec(),new HttpObjectAggregator(1024));
  ch.writeInbound(Unpooled.copiedBuffer("PUT /upload-large HTTP/1.1\r\n" + "Expect: 100-continue\r\n" + "Content-Length: 1\r\n\r\n",CharsetUtil.UTF_8));
  assertThat(ch.readInbound(),is(nullValue()));
  ByteBuf continueResponse=ch.readOutbound();
  assertThat(continueResponse.toString(CharsetUtil.UTF_8),is("HTTP/1.1 100 Continue\r\n\r\n"));
  continueResponse.release();
  assertThat(ch.readOutbound(),is(nullValue()));
  ch.writeInbound(Unpooled.wrappedBuffer(new byte[]{42}));
  FullHttpRequest req=ch.readInbound();
  assertThat(req.headers().get(HttpHeaderNames.CONTENT_LENGTH),is("1"));
  assertThat(req.content().readableBytes(),is(1));
  assertThat(req.content().readByte(),is((byte)42));
  req.release();
  assertThat(ch.readInbound(),is(nullValue()));
  FullHttpResponse res=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.CREATED);
  res.content().writeBytes("OK".getBytes(CharsetUtil.UTF_8));
  res.headers().setInt(HttpHeaderNames.CONTENT_LENGTH,2);
  ch.writeOutbound(res);
  ByteBuf encodedRes=ch.readOutbound();
  assertThat(encodedRes.toString(CharsetUtil.UTF_8),is("HTTP/1.1 201 Created\r\n" + HttpHeaderNames.CONTENT_LENGTH + ": 2\r\n\r\nOK"));
  encodedRes.release();
  ch.finish();
}
