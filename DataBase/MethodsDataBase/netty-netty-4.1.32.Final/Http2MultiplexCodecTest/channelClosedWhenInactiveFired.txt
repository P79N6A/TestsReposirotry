@Test public void channelClosedWhenInactiveFired(){
  LastInboundHandler inboundHandler=streamActiveAndWriteHeaders(inboundStream);
  Http2StreamChannel childChannel=(Http2StreamChannel)inboundHandler.channel();
  final AtomicBoolean channelOpen=new AtomicBoolean(false);
  final AtomicBoolean channelActive=new AtomicBoolean(false);
  assertTrue(childChannel.isOpen());
  assertTrue(childChannel.isActive());
  childChannel.pipeline().addLast(new ChannelInboundHandlerAdapter(){
    @Override public void channelInactive(    ChannelHandlerContext ctx) throws Exception {
      channelOpen.set(ctx.channel().isOpen());
      channelActive.set(ctx.channel().isActive());
      super.channelInactive(ctx);
    }
  }
);
  childChannel.close().syncUninterruptibly();
  assertFalse(channelOpen.get());
  assertFalse(channelActive.get());
}
