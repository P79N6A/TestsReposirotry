@Test(expected=ClosedChannelException.class) public void streamClosedErrorTranslatedToClosedChannelExceptionOnWrites() throws Exception {
  writer=new Writer(){
    @Override void write(    Object msg,    ChannelPromise promise){
      promise.tryFailure(new StreamException(inboundStream.id(),Http2Error.STREAM_CLOSED,"Stream Closed"));
    }
  }
;
  LastInboundHandler inboundHandler=new LastInboundHandler();
  childChannelInitializer.handler=inboundHandler;
  Channel childChannel=newOutboundStream();
  assertTrue(childChannel.isActive());
  ChannelFuture future=childChannel.writeAndFlush(new DefaultHttp2HeadersFrame(new DefaultHttp2Headers()));
  parentChannel.flush();
  assertFalse(childChannel.isActive());
  assertFalse(childChannel.isOpen());
  inboundHandler.checkException();
  future.syncUninterruptibly();
}
