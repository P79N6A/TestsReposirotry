@Test public void outboundStreamShouldNotWriteResetFrameOnClose_IfStreamDidntExist(){
  writer=new Writer(){
    private boolean headersWritten;
    @Override void write(    Object msg,    ChannelPromise promise){
      if (!headersWritten && msg instanceof Http2HeadersFrame) {
        headersWritten=true;
        Http2HeadersFrame headersFrame=(Http2HeadersFrame)msg;
        final TestableHttp2MultiplexCodec.Stream stream=(TestableHttp2MultiplexCodec.Stream)headersFrame.stream();
        stream.id=1;
        promise.setFailure(new Exception("boom"));
      }
 else {
        super.write(msg,promise);
      }
    }
  }
;
  childChannelInitializer.handler=new ChannelInboundHandlerAdapter(){
    @Override public void channelActive(    ChannelHandlerContext ctx) throws Exception {
      ctx.writeAndFlush(new DefaultHttp2HeadersFrame(new DefaultHttp2Headers()));
      ctx.fireChannelActive();
    }
  }
;
  Channel childChannel=newOutboundStream();
  assertFalse(childChannel.isActive());
  childChannel.close();
  parentChannel.runPendingTasks();
  assertTrue(parentChannel.outboundMessages().isEmpty());
}
