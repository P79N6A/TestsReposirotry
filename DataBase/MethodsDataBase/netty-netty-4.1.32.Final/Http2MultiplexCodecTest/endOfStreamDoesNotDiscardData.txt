@Test public void endOfStreamDoesNotDiscardData(){
  AtomicInteger numReads=new AtomicInteger(1);
  final AtomicBoolean shouldDisableAutoRead=new AtomicBoolean();
  Consumer<ChannelHandlerContext> ctxConsumer=new Consumer<ChannelHandlerContext>(){
    @Override public void accept(    ChannelHandlerContext obj){
      if (shouldDisableAutoRead.get()) {
        obj.channel().config().setAutoRead(false);
      }
    }
  }
;
  LastInboundHandler inboundHandler=streamActiveAndWriteHeaders(inboundStream,numReads,ctxConsumer);
  Http2StreamChannel childChannel=(Http2StreamChannel)inboundHandler.channel();
  childChannel.config().setAutoRead(false);
  Http2DataFrame dataFrame1=new DefaultHttp2DataFrame(bb("1")).stream(inboundStream);
  Http2DataFrame dataFrame2=new DefaultHttp2DataFrame(bb("2")).stream(inboundStream);
  Http2DataFrame dataFrame3=new DefaultHttp2DataFrame(bb("3")).stream(inboundStream);
  Http2DataFrame dataFrame4=new DefaultHttp2DataFrame(bb("4")).stream(inboundStream);
  assertEquals(new DefaultHttp2HeadersFrame(request).stream(inboundStream),inboundHandler.readInbound());
  parentChannel.writeOneInbound(new Object());
  codec.onHttp2Frame(dataFrame1);
  assertEquals(dataFrame1,inboundHandler.readInbound());
  codec.onHttp2Frame(dataFrame2);
  codec.onHttp2Frame(dataFrame3);
  codec.onHttp2Frame(dataFrame4);
  shouldDisableAutoRead.set(true);
  childChannel.config().setAutoRead(true);
  numReads.set(1);
  inboundStream.state=Http2Stream.State.CLOSED;
  codec.onHttp2StreamStateChanged(inboundStream);
  assertEquals(dataFrame2,inboundHandler.readInbound());
  assertEquals(dataFrame3,inboundHandler.readInbound());
  assertEquals(dataFrame4,inboundHandler.readInbound());
  assertNull(inboundHandler.readInbound());
  parentChannel.flushInbound();
  childChannel.closeFuture().syncUninterruptibly();
  dataFrame1.release();
  dataFrame2.release();
  dataFrame3.release();
  dataFrame4.release();
}
