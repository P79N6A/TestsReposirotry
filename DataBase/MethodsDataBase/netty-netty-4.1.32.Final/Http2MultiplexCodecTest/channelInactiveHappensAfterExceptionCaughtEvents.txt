@Test public void channelInactiveHappensAfterExceptionCaughtEvents() throws Exception {
  final AtomicInteger count=new AtomicInteger(0);
  final AtomicInteger exceptionCaught=new AtomicInteger(-1);
  final AtomicInteger channelInactive=new AtomicInteger(-1);
  final AtomicInteger channelUnregistered=new AtomicInteger(-1);
  Http2StreamChannel childChannel=newOutboundStream();
  childChannel.pipeline().addLast(new ChannelInboundHandlerAdapter(){
    @Override public void userEventTriggered(    ChannelHandlerContext ctx,    Object evt) throws Exception {
      ctx.close();
      throw new Exception("exception");
    }
  }
);
  childChannel.pipeline().addLast(new ChannelInboundHandlerAdapter(){
    @Override public void channelInactive(    ChannelHandlerContext ctx) throws Exception {
      channelInactive.set(count.getAndIncrement());
      super.channelInactive(ctx);
    }
    @Override public void exceptionCaught(    ChannelHandlerContext ctx,    Throwable cause) throws Exception {
      exceptionCaught.set(count.getAndIncrement());
      super.exceptionCaught(ctx,cause);
    }
    @Override public void channelUnregistered(    ChannelHandlerContext ctx) throws Exception {
      channelUnregistered.set(count.getAndIncrement());
      super.channelUnregistered(ctx);
    }
  }
);
  childChannel.pipeline().fireUserEventTriggered(new Object());
  parentChannel.runPendingTasks();
  assertEquals(0,exceptionCaught.get());
  assertEquals(1,channelInactive.get());
  assertEquals(2,channelUnregistered.get());
}
