/** 
 * Tests that if channel was unhealthy it is not offered back to the pool.
 * @throws Exception
 */
@Test public void testUnhealthyChannelIsNotOffered() throws Exception {
  EventLoopGroup group=new LocalEventLoopGroup();
  LocalAddress addr=new LocalAddress(LOCAL_ADDR_ID);
  Bootstrap cb=new Bootstrap();
  cb.remoteAddress(addr);
  cb.group(group).channel(LocalChannel.class);
  ServerBootstrap sb=new ServerBootstrap();
  sb.group(group).channel(LocalServerChannel.class).childHandler(new ChannelInitializer<LocalChannel>(){
    @Override public void initChannel(    LocalChannel ch) throws Exception {
      ch.pipeline().addLast(new ChannelInboundHandlerAdapter());
    }
  }
);
  Channel sc=sb.bind(addr).syncUninterruptibly().channel();
  ChannelPoolHandler handler=new CountingChannelPoolHandler();
  ChannelPool pool=new SimpleChannelPool(cb,handler);
  Channel channel1=pool.acquire().syncUninterruptibly().getNow();
  pool.release(channel1).syncUninterruptibly();
  Channel channel2=pool.acquire().syncUninterruptibly().getNow();
  assertSame(channel1,channel2);
  channel1.close().syncUninterruptibly();
  pool.release(channel1).syncUninterruptibly();
  Channel channel3=pool.acquire().syncUninterruptibly().getNow();
  assertNotSame(channel1,channel3);
  sc.close().syncUninterruptibly();
  channel3.close().syncUninterruptibly();
  group.shutdownGracefully();
}
