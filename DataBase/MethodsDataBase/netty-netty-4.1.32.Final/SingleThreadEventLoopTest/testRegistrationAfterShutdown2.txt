@Test(timeout=10000) @SuppressWarnings("deprecation") public void testRegistrationAfterShutdown2() throws Exception {
  loopA.shutdown();
  final CountDownLatch latch=new CountDownLatch(1);
  Channel ch=new LocalChannel();
  ChannelPromise promise=ch.newPromise();
  promise.addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      latch.countDown();
    }
  }
);
  Logger root=(Logger)LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);
  List<Appender<ILoggingEvent>> appenders=new ArrayList<Appender<ILoggingEvent>>();
  for (Iterator<Appender<ILoggingEvent>> i=root.iteratorForAppenders(); i.hasNext(); ) {
    Appender<ILoggingEvent> a=i.next();
    appenders.add(a);
    root.detachAppender(a);
  }
  try {
    ChannelFuture f=loopA.register(promise);
    f.awaitUninterruptibly();
    assertFalse(f.isSuccess());
    assertThat(f.cause(),is(instanceOf(RejectedExecutionException.class)));
    assertFalse(latch.await(1,TimeUnit.SECONDS));
    assertFalse(ch.isOpen());
  }
  finally {
    for (    Appender<ILoggingEvent> a : appenders) {
      root.addAppender(a);
    }
  }
}
