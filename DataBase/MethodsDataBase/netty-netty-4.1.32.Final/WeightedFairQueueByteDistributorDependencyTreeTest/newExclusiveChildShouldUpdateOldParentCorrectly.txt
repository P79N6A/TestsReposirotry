@Test public void newExclusiveChildShouldUpdateOldParentCorrectly() throws Http2Exception {
  Http2Stream streamA=connection.local().createStream(1,false);
  Http2Stream streamB=connection.local().createStream(3,false);
  Http2Stream streamC=connection.local().createStream(5,false);
  Http2Stream streamD=connection.local().createStream(7,false);
  Http2Stream streamE=connection.local().createStream(9,false);
  Http2Stream streamF=connection.local().createStream(11,false);
  setPriority(streamB.id(),streamA.id(),DEFAULT_PRIORITY_WEIGHT,false);
  setPriority(streamC.id(),streamA.id(),DEFAULT_PRIORITY_WEIGHT,false);
  setPriority(streamD.id(),streamC.id(),DEFAULT_PRIORITY_WEIGHT,false);
  setPriority(streamF.id(),streamE.id(),DEFAULT_PRIORITY_WEIGHT,false);
  setPriority(streamF.id(),streamA.id(),DEFAULT_PRIORITY_WEIGHT,true);
  assertEquals(6,connection.numActiveStreams());
  assertEquals(2,distributor.numChildren(connection.connectionStream().id()));
  assertTrue(distributor.isChild(streamE.id(),connection.connectionStream().id(),DEFAULT_PRIORITY_WEIGHT));
  assertEquals(0,distributor.numChildren(streamE.id()));
  assertTrue(distributor.isChild(streamA.id(),connection.connectionStream().id(),DEFAULT_PRIORITY_WEIGHT));
  assertEquals(1,distributor.numChildren(streamA.id()));
  assertTrue(distributor.isChild(streamF.id(),streamA.id(),DEFAULT_PRIORITY_WEIGHT));
  assertEquals(2,distributor.numChildren(streamF.id()));
  assertTrue(distributor.isChild(streamB.id(),streamF.id(),DEFAULT_PRIORITY_WEIGHT));
  assertEquals(0,distributor.numChildren(streamB.id()));
  assertTrue(distributor.isChild(streamC.id(),streamF.id(),DEFAULT_PRIORITY_WEIGHT));
  assertEquals(1,distributor.numChildren(streamC.id()));
  assertTrue(distributor.isChild(streamD.id(),streamC.id(),DEFAULT_PRIORITY_WEIGHT));
  assertEquals(0,distributor.numChildren(streamD.id()));
}
