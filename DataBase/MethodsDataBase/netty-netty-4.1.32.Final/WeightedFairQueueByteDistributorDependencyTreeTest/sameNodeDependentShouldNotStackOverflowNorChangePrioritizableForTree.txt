@Test public void sameNodeDependentShouldNotStackOverflowNorChangePrioritizableForTree() throws Http2Exception {
  Http2Stream streamA=connection.local().createStream(1,false);
  Http2Stream streamB=connection.local().createStream(3,false);
  Http2Stream streamC=connection.local().createStream(5,false);
  Http2Stream streamD=connection.local().createStream(7,false);
  setPriority(streamB.id(),streamA.id(),DEFAULT_PRIORITY_WEIGHT,false);
  setPriority(streamC.id(),streamA.id(),DEFAULT_PRIORITY_WEIGHT,false);
  setPriority(streamD.id(),streamA.id(),DEFAULT_PRIORITY_WEIGHT,true);
  boolean[] exclusives={true,false};
  short[] weights={DEFAULT_PRIORITY_WEIGHT,100,200,DEFAULT_PRIORITY_WEIGHT};
  assertEquals(4,connection.numActiveStreams());
  for (  short weight : weights) {
    for (    boolean exclusive : exclusives) {
      setPriority(streamD.id(),streamA.id(),weight,exclusive);
      assertEquals(0,distributor.numChildren(streamB.id()));
      assertEquals(0,distributor.numChildren(streamC.id()));
      assertEquals(1,distributor.numChildren(streamA.id()));
      assertEquals(2,distributor.numChildren(streamD.id()));
      assertFalse(distributor.isChild(streamB.id(),streamA.id(),DEFAULT_PRIORITY_WEIGHT));
      assertFalse(distributor.isChild(streamC.id(),streamA.id(),DEFAULT_PRIORITY_WEIGHT));
      assertTrue(distributor.isChild(streamB.id(),streamD.id(),DEFAULT_PRIORITY_WEIGHT));
      assertTrue(distributor.isChild(streamC.id(),streamD.id(),DEFAULT_PRIORITY_WEIGHT));
      assertTrue(distributor.isChild(streamD.id(),streamA.id(),weight));
    }
  }
}
