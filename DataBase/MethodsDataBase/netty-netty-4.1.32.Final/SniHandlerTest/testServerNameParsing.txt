@Test public void testServerNameParsing() throws Exception {
  SslContext nettyContext=makeSslContext(provider,false);
  SslContext leanContext=makeSslContext(provider,false);
  SslContext leanContext2=makeSslContext(provider,false);
  try {
    DomainNameMapping<SslContext> mapping=new DomainNameMappingBuilder<SslContext>(nettyContext).add("*.netty.io",nettyContext).add("*.LEANCLOUD.CN",leanContext).add("chat4.leancloud.cn",leanContext2).build();
    final AtomicReference<SniCompletionEvent> evtRef=new AtomicReference<SniCompletionEvent>();
    SniHandler handler=new SniHandler(mapping);
    EmbeddedChannel ch=new EmbeddedChannel(handler,new ChannelInboundHandlerAdapter(){
      @Override public void userEventTriggered(      ChannelHandlerContext ctx,      Object evt) throws Exception {
        if (evt instanceof SniCompletionEvent) {
          assertTrue(evtRef.compareAndSet(null,(SniCompletionEvent)evt));
        }
 else {
          ctx.fireUserEventTriggered(evt);
        }
      }
    }
);
    try {
      String tlsHandshakeMessageHex1="16030100";
      String tlsHandshakeMessageHex="c6010000c20303bb0855d66532c05a0ef784f7c384feeafa68b3" + "b655ac7288650d5eed4aa3fb52000038c02cc030009fcca9cca8ccaac02b" + "c02f009ec024c028006bc023c0270067c00ac0140039c009c0130033009d"+ "009c003d003c0035002f00ff010000610000001700150000124348415434"+ "2e4c45414e434c4f55442e434e000b000403000102000a000a0008001d00"+ "170019001800230000000d0020001e060106020603050105020503040104"+ "0204030301030203030201020202030016000000170000";
      ch.writeInbound(Unpooled.wrappedBuffer(StringUtil.decodeHexDump(tlsHandshakeMessageHex1)));
      ch.writeInbound(Unpooled.wrappedBuffer(StringUtil.decodeHexDump(tlsHandshakeMessageHex)));
      assertTrue(ch.finish());
      assertThat(handler.hostname(),is("chat4.leancloud.cn"));
      assertThat(handler.sslContext(),is(leanContext));
      SniCompletionEvent evt=evtRef.get();
      assertNotNull(evt);
      assertEquals("chat4.leancloud.cn",evt.hostname());
      assertTrue(evt.isSuccess());
      assertNull(evt.cause());
    }
  finally {
      ch.finishAndReleaseAll();
    }
  }
  finally {
    releaseAll(leanContext,leanContext2,nettyContext);
  }
}
