@Test public void testSignalRace(){
  final long wait=TimeUnit.NANOSECONDS.convert(10,TimeUnit.SECONDS);
  EventExecutor executor=null;
  try {
    executor=new TestEventExecutor();
    final int numberOfAttempts=4096;
    final Map<Thread,DefaultPromise<Void>> promises=new HashMap<Thread,DefaultPromise<Void>>();
    for (int i=0; i < numberOfAttempts; i++) {
      final DefaultPromise<Void> promise=new DefaultPromise<Void>(executor);
      final Thread thread=new Thread(new Runnable(){
        @Override public void run(){
          promise.setSuccess(null);
        }
      }
);
      promises.put(thread,promise);
    }
    for (    final Map.Entry<Thread,DefaultPromise<Void>> promise : promises.entrySet()) {
      promise.getKey().start();
      final long start=System.nanoTime();
      promise.getValue().awaitUninterruptibly(wait,TimeUnit.NANOSECONDS);
      assertThat(System.nanoTime() - start,lessThan(wait));
    }
  }
  finally {
    if (executor != null) {
      executor.shutdownGracefully();
    }
  }
}
