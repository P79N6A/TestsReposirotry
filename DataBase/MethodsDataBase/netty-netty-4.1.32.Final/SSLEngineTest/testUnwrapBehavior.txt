@Test public void testUnwrapBehavior() throws Exception {
  SelfSignedCertificate cert=new SelfSignedCertificate();
  clientSslCtx=SslContextBuilder.forClient().trustManager(cert.cert()).sslProvider(sslClientProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine client=wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
  serverSslCtx=SslContextBuilder.forServer(cert.certificate(),cert.privateKey()).sslProvider(sslServerProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine server=wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
  byte[] bytes="Hello World".getBytes(CharsetUtil.US_ASCII);
  try {
    ByteBuffer plainClientOut=allocateBuffer(client.getSession().getApplicationBufferSize());
    ByteBuffer encryptedClientToServer=allocateBuffer(server.getSession().getPacketBufferSize() * 2);
    ByteBuffer plainServerIn=allocateBuffer(server.getSession().getApplicationBufferSize());
    handshake(client,server);
    plainClientOut.put(bytes,0,5);
    plainClientOut.flip();
    SSLEngineResult result=client.wrap(plainClientOut,encryptedClientToServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(5,result.bytesConsumed());
    assertTrue(result.bytesProduced() > 0);
    assertFalse(plainClientOut.hasRemaining());
    plainClientOut.clear();
    plainClientOut.put(bytes,5,6);
    plainClientOut.flip();
    result=client.wrap(plainClientOut,encryptedClientToServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(6,result.bytesConsumed());
    assertTrue(result.bytesProduced() > 0);
    encryptedClientToServer.flip();
    int remaining=encryptedClientToServer.remaining();
    ByteBuffer small=allocateBuffer(3);
    result=server.unwrap(encryptedClientToServer,small);
    assertEquals(SSLEngineResult.Status.BUFFER_OVERFLOW,result.getStatus());
    assertEquals(remaining,encryptedClientToServer.remaining());
    result=server.unwrap(encryptedClientToServer,plainServerIn);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(5,result.bytesProduced());
    assertTrue(encryptedClientToServer.hasRemaining());
    result=server.unwrap(encryptedClientToServer,plainServerIn);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(6,result.bytesProduced());
    assertFalse(encryptedClientToServer.hasRemaining());
    plainServerIn.flip();
    assertEquals(ByteBuffer.wrap(bytes),plainServerIn);
  }
  finally {
    cleanupClientSslEngine(client);
    cleanupServerSslEngine(server);
    cert.delete();
  }
}
