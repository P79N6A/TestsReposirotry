@Test public void testMultipleRecordsInOneBufferBiggerThenPacketBufferSize() throws Exception {
  SelfSignedCertificate cert=new SelfSignedCertificate();
  clientSslCtx=SslContextBuilder.forClient().trustManager(cert.cert()).sslProvider(sslClientProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine client=wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
  serverSslCtx=SslContextBuilder.forServer(cert.certificate(),cert.privateKey()).sslProvider(sslServerProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine server=wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
  try {
    ByteBuffer plainClientOut=allocateBuffer(4096);
    ByteBuffer plainServerOut=allocateBuffer(server.getSession().getApplicationBufferSize());
    ByteBuffer encClientToServer=allocateBuffer(server.getSession().getPacketBufferSize() * 2);
    handshake(client,server);
    int srcLen=plainClientOut.remaining();
    SSLEngineResult result;
    int count=0;
    do {
      int plainClientOutPosition=plainClientOut.position();
      int encClientToServerPosition=encClientToServer.position();
      result=client.wrap(plainClientOut,encClientToServer);
      if (result.getStatus() == Status.BUFFER_OVERFLOW) {
        assertEquals(plainClientOutPosition,plainClientOut.position());
        assertEquals(encClientToServerPosition,encClientToServer.position());
        break;
      }
      assertEquals(SSLEngineResult.Status.OK,result.getStatus());
      assertEquals(srcLen,result.bytesConsumed());
      assertTrue(result.bytesProduced() > 0);
      plainClientOut.clear();
      ++count;
    }
 while (encClientToServer.position() < server.getSession().getPacketBufferSize());
    assertTrue(count >= 2);
    encClientToServer.flip();
    result=server.unwrap(encClientToServer,plainServerOut);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertTrue(result.bytesConsumed() > 0);
    assertTrue(result.bytesProduced() > 0);
    assertTrue(encClientToServer.hasRemaining());
  }
  finally {
    cert.delete();
    cleanupClientSslEngine(client);
    cleanupServerSslEngine(server);
  }
}
