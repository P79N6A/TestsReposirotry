@Test public void testCloseNotifySequence() throws Exception {
  SelfSignedCertificate cert=new SelfSignedCertificate();
  clientSslCtx=SslContextBuilder.forClient().trustManager(cert.cert()).sslProvider(sslClientProvider()).protocols(PROTOCOL_TLS_V1_2).build();
  SSLEngine client=wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
  serverSslCtx=SslContextBuilder.forServer(cert.certificate(),cert.privateKey()).sslProvider(sslServerProvider()).protocols(PROTOCOL_TLS_V1_2).build();
  SSLEngine server=wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
  try {
    ByteBuffer plainClientOut=allocateBuffer(client.getSession().getApplicationBufferSize());
    ByteBuffer plainServerOut=allocateBuffer(server.getSession().getApplicationBufferSize());
    ByteBuffer encryptedClientToServer=allocateBuffer(client.getSession().getPacketBufferSize());
    ByteBuffer encryptedServerToClient=allocateBuffer(server.getSession().getPacketBufferSize());
    ByteBuffer empty=allocateBuffer(0);
    handshake(client,server);
    client.closeOutbound();
    assertFalse(client.isOutboundDone());
    assertFalse(client.isInboundDone());
    SSLEngineResult result=client.wrap(empty,encryptedClientToServer);
    encryptedClientToServer.flip();
    assertEquals(SSLEngineResult.Status.CLOSED,result.getStatus());
    assertEquals(SSLEngineResult.HandshakeStatus.NEED_UNWRAP,result.getHandshakeStatus());
    int produced=result.bytesProduced();
    int consumed=result.bytesConsumed();
    int closeNotifyLen=produced;
    assertTrue(produced > 0);
    assertEquals(0,consumed);
    assertEquals(produced,encryptedClientToServer.remaining());
    assertTrue(client.isOutboundDone());
    assertFalse(client.isInboundDone());
    assertFalse(server.isOutboundDone());
    assertFalse(server.isInboundDone());
    result=server.unwrap(encryptedClientToServer,plainServerOut);
    plainServerOut.flip();
    assertEquals(SSLEngineResult.Status.CLOSED,result.getStatus());
    assertEquals(SSLEngineResult.HandshakeStatus.NEED_WRAP,result.getHandshakeStatus());
    produced=result.bytesProduced();
    consumed=result.bytesConsumed();
    assertEquals(closeNotifyLen,consumed);
    assertEquals(0,produced);
    assertEquals(0,encryptedClientToServer.remaining());
    assertEquals(0,plainServerOut.remaining());
    assertFalse(server.isOutboundDone());
    assertTrue(server.isInboundDone());
    result=server.wrap(empty,encryptedServerToClient);
    encryptedServerToClient.flip();
    assertEquals(SSLEngineResult.Status.CLOSED,result.getStatus());
    assertEquals(SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,result.getHandshakeStatus());
    produced=result.bytesProduced();
    consumed=result.bytesConsumed();
    assertEquals(closeNotifyLen,produced);
    assertEquals(0,consumed);
    assertEquals(produced,encryptedServerToClient.remaining());
    assertTrue(server.isOutboundDone());
    assertTrue(server.isInboundDone());
    result=client.unwrap(encryptedServerToClient,plainClientOut);
    plainClientOut.flip();
    assertEquals(SSLEngineResult.Status.CLOSED,result.getStatus());
    assertEquals(SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,result.getHandshakeStatus());
    produced=result.bytesProduced();
    consumed=result.bytesConsumed();
    assertEquals(closeNotifyLen,consumed);
    assertEquals(0,produced);
    assertEquals(0,encryptedServerToClient.remaining());
    assertTrue(client.isOutboundDone());
    assertTrue(client.isInboundDone());
    encryptedServerToClient.clear();
    plainServerOut.clear();
    result=server.wrap(plainServerOut,encryptedServerToClient);
    assertEngineRemainsClosed(result);
    encryptedClientToServer.clear();
    plainServerOut.clear();
    result=server.unwrap(encryptedClientToServer,plainServerOut);
    assertEngineRemainsClosed(result);
    encryptedClientToServer.clear();
    plainClientOut.clear();
    result=client.wrap(plainClientOut,encryptedClientToServer);
    assertEngineRemainsClosed(result);
    encryptedServerToClient.clear();
    plainClientOut.clear();
    result=client.unwrap(encryptedServerToClient,plainClientOut);
    assertEngineRemainsClosed(result);
  }
  finally {
    cert.delete();
    cleanupClientSslEngine(client);
    cleanupServerSslEngine(server);
  }
}
