@Test public void testSSLSessionId() throws Exception {
  clientSslCtx=SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).sslProvider(sslClientProvider()).protocols(PROTOCOL_TLS_V1_2).sslContextProvider(clientSslContextProvider()).build();
  SelfSignedCertificate ssc=new SelfSignedCertificate();
  serverSslCtx=SslContextBuilder.forServer(ssc.certificate(),ssc.privateKey()).sslProvider(sslServerProvider()).protocols(PROTOCOL_TLS_V1_2).sslContextProvider(serverSslContextProvider()).build();
  SSLEngine clientEngine=null;
  SSLEngine serverEngine=null;
  try {
    clientEngine=wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
    serverEngine=wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
    assertEquals(0,clientEngine.getSession().getId().length);
    assertEquals(0,serverEngine.getSession().getId().length);
    handshake(clientEngine,serverEngine);
    assertNotEquals(0,clientEngine.getSession().getId().length);
    assertNotEquals(0,serverEngine.getSession().getId().length);
    assertArrayEquals(clientEngine.getSession().getId(),serverEngine.getSession().getId());
  }
  finally {
    cleanupClientSslEngine(clientEngine);
    cleanupServerSslEngine(serverEngine);
    ssc.delete();
  }
}
