@Test public void testBufferUnderFlow() throws Exception {
  SelfSignedCertificate cert=new SelfSignedCertificate();
  clientSslCtx=SslContextBuilder.forClient().trustManager(cert.cert()).sslProvider(sslClientProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine client=wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
  serverSslCtx=SslContextBuilder.forServer(cert.certificate(),cert.privateKey()).sslProvider(sslServerProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine server=wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
  try {
    ByteBuffer plainClient=allocateBuffer(1024);
    plainClient.limit(plainClient.capacity());
    ByteBuffer encClientToServer=allocateBuffer(client.getSession().getPacketBufferSize());
    ByteBuffer plainServer=allocateBuffer(server.getSession().getApplicationBufferSize());
    handshake(client,server);
    SSLEngineResult result=client.wrap(plainClient,encClientToServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(result.bytesConsumed(),plainClient.capacity());
    encClientToServer.flip();
    int remaining=encClientToServer.remaining();
    encClientToServer.limit(SSL_RECORD_HEADER_LENGTH - 1);
    result=server.unwrap(encClientToServer,plainServer);
    assertResultIsBufferUnderflow(result);
    encClientToServer.limit(SSL_RECORD_HEADER_LENGTH);
    result=server.unwrap(encClientToServer,plainServer);
    assertResultIsBufferUnderflow(result);
    encClientToServer.limit(SSL_RECORD_HEADER_LENGTH + remaining - 1 - SSL_RECORD_HEADER_LENGTH);
    result=server.unwrap(encClientToServer,plainServer);
    assertResultIsBufferUnderflow(result);
    encClientToServer.limit(remaining);
    result=server.unwrap(encClientToServer,plainServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(result.bytesConsumed(),remaining);
    assertTrue(result.bytesProduced() > 0);
  }
  finally {
    cert.delete();
    cleanupClientSslEngine(client);
    cleanupServerSslEngine(server);
  }
}
