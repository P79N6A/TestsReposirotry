@Test public void testMultipleRecordsInOneBufferWithNonZeroPosition() throws Exception {
  SelfSignedCertificate cert=new SelfSignedCertificate();
  clientSslCtx=SslContextBuilder.forClient().trustManager(cert.cert()).sslProvider(sslClientProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine client=wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
  serverSslCtx=SslContextBuilder.forServer(cert.certificate(),cert.privateKey()).sslProvider(sslServerProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine server=wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
  try {
    ByteBuffer plainClientOut=allocateBuffer(1024);
    ByteBuffer plainServerOut=allocateBuffer(server.getSession().getApplicationBufferSize());
    ByteBuffer encClientToServer=allocateBuffer(client.getSession().getPacketBufferSize());
    int positionOffset=1;
    ByteBuffer combinedEncClientToServer=allocateBuffer(encClientToServer.capacity() * 2 + positionOffset);
    combinedEncClientToServer.position(positionOffset);
    handshake(client,server);
    plainClientOut.limit(plainClientOut.capacity());
    SSLEngineResult result=client.wrap(plainClientOut,encClientToServer);
    assertEquals(plainClientOut.capacity(),result.bytesConsumed());
    assertTrue(result.bytesProduced() > 0);
    encClientToServer.flip();
    combinedEncClientToServer.put(encClientToServer);
    plainClientOut.clear();
    encClientToServer.clear();
    result=client.wrap(plainClientOut,encClientToServer);
    assertEquals(plainClientOut.capacity(),result.bytesConsumed());
    assertTrue(result.bytesProduced() > 0);
    encClientToServer.flip();
    int encClientToServerLen=encClientToServer.remaining();
    combinedEncClientToServer.put(encClientToServer);
    encClientToServer.clear();
    combinedEncClientToServer.flip();
    combinedEncClientToServer.position(positionOffset);
    combinedEncClientToServer.limit(combinedEncClientToServer.limit() - (encClientToServerLen - positionOffset));
    result=server.unwrap(combinedEncClientToServer,plainServerOut);
    assertEquals(encClientToServerLen,result.bytesConsumed());
    assertTrue(result.bytesProduced() > 0);
  }
  finally {
    cert.delete();
    cleanupClientSslEngine(client);
    cleanupServerSslEngine(server);
  }
}
