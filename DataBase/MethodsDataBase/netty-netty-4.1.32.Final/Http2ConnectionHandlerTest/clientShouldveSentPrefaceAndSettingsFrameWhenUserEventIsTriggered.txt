@Test public void clientShouldveSentPrefaceAndSettingsFrameWhenUserEventIsTriggered() throws Exception {
  when(connection.isServer()).thenReturn(false);
  when(channel.isActive()).thenReturn(false);
  handler=newHandler();
  when(channel.isActive()).thenReturn(true);
  final Http2ConnectionPrefaceAndSettingsFrameWrittenEvent evt=Http2ConnectionPrefaceAndSettingsFrameWrittenEvent.INSTANCE;
  final AtomicBoolean verified=new AtomicBoolean(false);
  final Answer verifier=new Answer(){
    @Override public Object answer(    final InvocationOnMock in) throws Throwable {
      assertTrue(in.getArgument(0).equals(evt));
      verify(ctx).write(eq(connectionPrefaceBuf()));
      verify(encoder).writeSettings(eq(ctx),any(Http2Settings.class),any(ChannelPromise.class));
      verified.set(true);
      return null;
    }
  }
;
  doAnswer(verifier).when(ctx).fireUserEventTriggered(evt);
  handler.channelActive(ctx);
  assertTrue(verified.get());
}
