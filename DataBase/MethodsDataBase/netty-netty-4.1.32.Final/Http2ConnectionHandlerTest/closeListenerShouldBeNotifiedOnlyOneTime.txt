@SuppressWarnings("unchecked") @Test public void closeListenerShouldBeNotifiedOnlyOneTime() throws Exception {
  handler=newHandler();
  when(future.isDone()).thenReturn(true);
  when(future.isSuccess()).thenReturn(true);
  doAnswer(new Answer<ChannelFuture>(){
    @Override public ChannelFuture answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      GenericFutureListener<ChannelFuture> listener=(GenericFutureListener<ChannelFuture>)args[0];
      doAnswer(new Answer<Http2Stream>(){
        @Override public Http2Stream answer(        InvocationOnMock in) throws Throwable {
          return null;
        }
      }
).when(connection).forEachActiveStream(any(Http2StreamVisitor.class));
      when(connection.numActiveStreams()).thenReturn(0);
      listener.operationComplete(future);
      return future;
    }
  }
).when(future).addListener(any(GenericFutureListener.class));
  handler.close(ctx,promise);
  if (future.isDone()) {
    when(connection.numActiveStreams()).thenReturn(0);
  }
  handler.closeStream(stream,future);
  handler.closeStream(stream,future);
  verify(ctx,times(1)).close(any(ChannelPromise.class));
}
