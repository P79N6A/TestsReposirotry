@Test public void ensureSubsequentRegistrationDoesNotFireActive() throws Throwable {
  final EventLoop eventLoop=mock(EventLoop.class);
  when(eventLoop.inEventLoop()).thenReturn(true);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      ((Runnable)invocationOnMock.getArgument(0)).run();
      return null;
    }
  }
).when(eventLoop).execute(any(Runnable.class));
  final TestChannel channel=new TestChannel();
  ChannelInboundHandler handler=mock(ChannelInboundHandler.class);
  channel.pipeline().addLast(handler);
  registerChannel(eventLoop,channel);
  channel.unsafe().deregister(new DefaultChannelPromise(channel));
  registerChannel(eventLoop,channel);
  verify(handler).handlerAdded(any(ChannelHandlerContext.class));
  verify(handler,times(2)).channelRegistered(any(ChannelHandlerContext.class));
  verify(handler).channelActive(any(ChannelHandlerContext.class));
  verify(handler).channelUnregistered(any(ChannelHandlerContext.class));
}
