@Test public void testFramementedFrame(){
  EmbeddedChannel encoderChannel=new EmbeddedChannel(ZlibCodecFactory.newZlibEncoder(ZlibWrapper.NONE,9,15,8));
  EmbeddedChannel decoderChannel=new EmbeddedChannel(new PerMessageDeflateDecoder(false));
  byte[] payload=new byte[300];
  random.nextBytes(payload);
  encoderChannel.writeOutbound(Unpooled.wrappedBuffer(payload));
  ByteBuf compressedPayload=encoderChannel.readOutbound();
  compressedPayload=compressedPayload.slice(0,compressedPayload.readableBytes() - 4);
  int oneThird=compressedPayload.readableBytes() / 3;
  BinaryWebSocketFrame compressedFrame1=new BinaryWebSocketFrame(false,WebSocketExtension.RSV1 | WebSocketExtension.RSV3,compressedPayload.slice(0,oneThird));
  ContinuationWebSocketFrame compressedFrame2=new ContinuationWebSocketFrame(false,WebSocketExtension.RSV3,compressedPayload.slice(oneThird,oneThird));
  ContinuationWebSocketFrame compressedFrame3=new ContinuationWebSocketFrame(true,WebSocketExtension.RSV3,compressedPayload.slice(oneThird * 2,compressedPayload.readableBytes() - oneThird * 2));
  decoderChannel.writeInbound(compressedFrame1.retain());
  decoderChannel.writeInbound(compressedFrame2.retain());
  decoderChannel.writeInbound(compressedFrame3);
  BinaryWebSocketFrame uncompressedFrame1=decoderChannel.readInbound();
  ContinuationWebSocketFrame uncompressedFrame2=decoderChannel.readInbound();
  ContinuationWebSocketFrame uncompressedFrame3=decoderChannel.readInbound();
  assertNotNull(uncompressedFrame1);
  assertNotNull(uncompressedFrame2);
  assertNotNull(uncompressedFrame3);
  assertEquals(WebSocketExtension.RSV3,uncompressedFrame1.rsv());
  assertEquals(WebSocketExtension.RSV3,uncompressedFrame2.rsv());
  assertEquals(WebSocketExtension.RSV3,uncompressedFrame3.rsv());
  ByteBuf finalPayloadWrapped=Unpooled.wrappedBuffer(uncompressedFrame1.content(),uncompressedFrame2.content(),uncompressedFrame3.content());
  assertEquals(300,finalPayloadWrapped.readableBytes());
  byte[] finalPayload=new byte[300];
  finalPayloadWrapped.readBytes(finalPayload);
  assertTrue(Arrays.equals(finalPayload,payload));
  finalPayloadWrapped.release();
}
