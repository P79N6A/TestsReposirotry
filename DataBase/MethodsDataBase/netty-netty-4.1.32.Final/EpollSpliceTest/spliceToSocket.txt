@Test public void spliceToSocket() throws Throwable {
  final EchoHandler sh=new EchoHandler();
  final EchoHandler ch=new EchoHandler();
  EventLoopGroup group=new EpollEventLoopGroup(1);
  ServerBootstrap bs=new ServerBootstrap();
  bs.channel(EpollServerSocketChannel.class);
  bs.group(group).childHandler(sh);
  final Channel sc=bs.bind(NetUtil.LOCALHOST,0).syncUninterruptibly().channel();
  ServerBootstrap bs2=new ServerBootstrap();
  bs2.channel(EpollServerSocketChannel.class);
  bs2.childOption(EpollChannelOption.EPOLL_MODE,EpollMode.LEVEL_TRIGGERED);
  bs2.group(group).childHandler(new ChannelInboundHandlerAdapter(){
    @Override public void channelActive(    final ChannelHandlerContext ctx) throws Exception {
      ctx.channel().config().setAutoRead(false);
      Bootstrap bs=new Bootstrap();
      bs.option(EpollChannelOption.EPOLL_MODE,EpollMode.LEVEL_TRIGGERED);
      bs.channel(EpollSocketChannel.class);
      bs.group(ctx.channel().eventLoop()).handler(new ChannelInboundHandlerAdapter(){
        @Override public void channelActive(        ChannelHandlerContext context) throws Exception {
          final EpollSocketChannel ch=(EpollSocketChannel)ctx.channel();
          final EpollSocketChannel ch2=(EpollSocketChannel)context.channel();
          ch.spliceTo(ch2,Integer.MAX_VALUE).addListener(new ChannelFutureListener(){
            @Override public void operationComplete(            ChannelFuture future) throws Exception {
              if (!future.isSuccess()) {
                future.channel().close();
              }
            }
          }
);
          ch2.spliceTo(ch,SPLICE_LEN).addListener(new ChannelFutureListener(){
            @Override public void operationComplete(            ChannelFuture future) throws Exception {
              if (!future.isSuccess()) {
                future.channel().close();
              }
 else {
                ch2.spliceTo(ch,SPLICE_LEN).addListener(this);
              }
            }
          }
);
          ctx.channel().config().setAutoRead(true);
        }
        @Override public void channelInactive(        ChannelHandlerContext context) throws Exception {
          context.close();
        }
      }
);
      bs.connect(sc.localAddress()).addListener(new ChannelFutureListener(){
        @Override public void operationComplete(        ChannelFuture future) throws Exception {
          if (!future.isSuccess()) {
            ctx.close();
          }
 else {
            future.channel().closeFuture().addListener(new ChannelFutureListener(){
              @Override public void operationComplete(              ChannelFuture future) throws Exception {
                ctx.close();
              }
            }
);
          }
        }
      }
);
    }
  }
);
  Channel pc=bs2.bind(NetUtil.LOCALHOST,0).syncUninterruptibly().channel();
  Bootstrap cb=new Bootstrap();
  cb.group(group);
  cb.channel(EpollSocketChannel.class);
  cb.handler(ch);
  Channel cc=cb.connect(pc.localAddress()).syncUninterruptibly().channel();
  for (int i=0; i < data.length; ) {
    int length=Math.min(random.nextInt(1024 * 64),data.length - i);
    ByteBuf buf=Unpooled.wrappedBuffer(data,i,length);
    cc.writeAndFlush(buf);
    i+=length;
  }
  while (ch.counter < data.length) {
    if (sh.exception.get() != null) {
      break;
    }
    if (ch.exception.get() != null) {
      break;
    }
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException e) {
    }
  }
  while (sh.counter < data.length) {
    if (sh.exception.get() != null) {
      break;
    }
    if (ch.exception.get() != null) {
      break;
    }
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException e) {
    }
  }
  sh.channel.close().sync();
  ch.channel.close().sync();
  sc.close().sync();
  pc.close().sync();
  group.shutdownGracefully();
  if (sh.exception.get() != null && !(sh.exception.get() instanceof IOException)) {
    throw sh.exception.get();
  }
  if (ch.exception.get() != null && !(ch.exception.get() instanceof IOException)) {
    throw ch.exception.get();
  }
  if (sh.exception.get() != null) {
    throw sh.exception.get();
  }
  if (ch.exception.get() != null) {
    throw ch.exception.get();
  }
}
