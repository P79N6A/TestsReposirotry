@Test public void testPriorityChange(){
  PriorityQueue<TestElement> queue=new DefaultPriorityQueue<TestElement>(TestElementComparator.INSTANCE,0);
  assertEmptyQueue(queue);
  TestElement a=new TestElement(10);
  TestElement b=new TestElement(20);
  TestElement c=new TestElement(30);
  TestElement d=new TestElement(25);
  TestElement e=new TestElement(23);
  TestElement f=new TestElement(15);
  queue.add(a);
  queue.add(b);
  queue.add(c);
  queue.add(d);
  queue.add(e);
  queue.add(f);
  e.value=35;
  queue.priorityChanged(e);
  a.value=40;
  queue.priorityChanged(a);
  a.value=31;
  queue.priorityChanged(a);
  d.value=10;
  queue.priorityChanged(d);
  f.value=5;
  queue.priorityChanged(f);
  List<TestElement> expectedOrderList=new ArrayList<TestElement>(queue.size());
  expectedOrderList.addAll(Arrays.asList(a,b,c,d,e,f));
  Collections.sort(expectedOrderList,TestElementComparator.INSTANCE);
  assertEquals(expectedOrderList.size(),queue.size());
  assertEquals(expectedOrderList.isEmpty(),queue.isEmpty());
  Iterator<TestElement> itr=expectedOrderList.iterator();
  while (itr.hasNext()) {
    TestElement next=itr.next();
    TestElement poll=queue.poll();
    assertEquals(next,poll);
    itr.remove();
    assertEquals(expectedOrderList.size(),queue.size());
    assertEquals(expectedOrderList.isEmpty(),queue.isEmpty());
  }
}
