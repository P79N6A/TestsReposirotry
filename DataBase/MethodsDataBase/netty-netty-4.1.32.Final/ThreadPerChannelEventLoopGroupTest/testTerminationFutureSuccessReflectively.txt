@Test public void testTerminationFutureSuccessReflectively() throws Exception {
  Field terminationFutureField=ThreadPerChannelEventLoopGroup.class.getDeclaredField("terminationFuture");
  terminationFutureField.setAccessible(true);
  final Exception[] exceptionHolder=new Exception[1];
  for (int i=0; i < 2; i++) {
    ThreadPerChannelEventLoopGroup loopGroup=new ThreadPerChannelEventLoopGroup(64);
    Promise<?> promise=new DefaultPromise<Void>(GlobalEventExecutor.INSTANCE){
      @Override public Promise<Void> setSuccess(      Void result){
        try {
          return super.setSuccess(result);
        }
 catch (        IllegalStateException e) {
          exceptionHolder[0]=e;
          throw e;
        }
      }
    }
;
    terminationFutureField.set(loopGroup,promise);
    runTest(loopGroup);
  }
  GlobalEventExecutor.INSTANCE.awaitTermination(100,TimeUnit.MILLISECONDS);
  assertNull(exceptionHolder[0]);
}
