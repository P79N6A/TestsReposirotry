@Test public void testMultipartCodecWithCRasEndOfAttribute() throws Exception {
  final String boundary="dLV9Wyq26L_-JQxk6ferf-RT153LhOO";
  final DefaultHttpDataFactory inMemoryFactory=new DefaultHttpDataFactory(false);
  String extradata="aaaa";
  String[] datas=new String[5];
  for (int i=0; i < 4; i++) {
    datas[i]=extradata;
    for (int j=0; j < i; j++) {
      datas[i]+='\r';
    }
  }
  for (int i=0; i < 4; i++) {
    final DefaultFullHttpRequest req=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.POST,"http://localhost");
    req.setDecoderResult(DecoderResult.SUCCESS);
    req.headers().add(HttpHeaderNames.CONTENT_TYPE,"multipart/form-data; boundary=" + boundary);
    req.headers().add(HttpHeaderNames.TRANSFER_ENCODING,HttpHeaderValues.CHUNKED);
    final String body="--" + boundary + "\r\n"+ "Content-Disposition: form-data; name=\"file"+ i+ "\"\r\n"+ "Content-Type: image/gif\r\n"+ "\r\n"+ datas[i]+ "\r\n"+ "--"+ boundary+ "--\r\n";
    req.content().writeBytes(body.getBytes(CharsetUtil.UTF_8));
    final HttpPostRequestDecoder decoder=new HttpPostRequestDecoder(inMemoryFactory,req);
    assertFalse(decoder.getBodyHttpDatas().isEmpty());
    InterfaceHttpData httpdata=decoder.getBodyHttpData("file" + i);
    assertNotNull(httpdata);
    Attribute attribute=(Attribute)httpdata;
    byte[] datar=attribute.get();
    assertNotNull(datar);
    assertEquals(datas[i].getBytes(CharsetUtil.UTF_8).length,datar.length);
    decoder.destroy();
  }
}
