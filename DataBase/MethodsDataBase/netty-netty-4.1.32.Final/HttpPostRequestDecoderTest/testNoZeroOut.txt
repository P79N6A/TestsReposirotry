@Test public void testNoZeroOut() throws Exception {
  final String boundary="E832jQp_Rq2ErFmAduHSR8YlMSm0FCY";
  final DefaultHttpDataFactory aMemFactory=new DefaultHttpDataFactory(false);
  DefaultHttpRequest aRequest=new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.POST,"http://localhost");
  aRequest.headers().set(HttpHeaderNames.CONTENT_TYPE,"multipart/form-data; boundary=" + boundary);
  aRequest.headers().set(HttpHeaderNames.TRANSFER_ENCODING,HttpHeaderValues.CHUNKED);
  HttpPostRequestDecoder aDecoder=new HttpPostRequestDecoder(aMemFactory,aRequest);
  final String aData="some data would be here. the data should be long enough that it " + "will be longer than the original buffer length of 256 bytes in " + "the HttpPostRequestDecoder in order to trigger the issue. Some more "+ "data just to be on the safe side.";
  final String body="--" + boundary + "\r\n"+ "Content-Disposition: form-data; name=\"root\"\r\n"+ "Content-Type: text/plain\r\n"+ "\r\n"+ aData+ "\r\n"+ "--"+ boundary+ "--\r\n";
  byte[] aBytes=body.getBytes();
  int split=125;
  ByteBufAllocator aAlloc=new UnpooledByteBufAllocator(true);
  ByteBuf aSmallBuf=aAlloc.heapBuffer(split,split);
  ByteBuf aLargeBuf=aAlloc.heapBuffer(aBytes.length - split,aBytes.length - split);
  aSmallBuf.writeBytes(aBytes,0,split);
  aLargeBuf.writeBytes(aBytes,split,aBytes.length - split);
  aDecoder.offer(new DefaultHttpContent(aSmallBuf));
  aDecoder.offer(new DefaultHttpContent(aLargeBuf));
  aDecoder.offer(LastHttpContent.EMPTY_LAST_CONTENT);
  assertTrue("Should have a piece of data",aDecoder.hasNext());
  InterfaceHttpData aDecodedData=aDecoder.next();
  assertEquals(InterfaceHttpData.HttpDataType.Attribute,aDecodedData.getHttpDataType());
  Attribute aAttr=(Attribute)aDecodedData;
  assertEquals(aData,aAttr.getValue());
  aDecodedData.release();
  aDecoder.destroy();
}
