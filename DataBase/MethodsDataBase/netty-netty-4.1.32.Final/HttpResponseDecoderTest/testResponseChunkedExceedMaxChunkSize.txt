@Test public void testResponseChunkedExceedMaxChunkSize(){
  EmbeddedChannel ch=new EmbeddedChannel(new HttpResponseDecoder(4096,8192,32));
  ch.writeInbound(Unpooled.copiedBuffer("HTTP/1.1 200 OK\r\nTransfer-Encoding: chunked\r\n\r\n",CharsetUtil.US_ASCII));
  HttpResponse res=ch.readInbound();
  assertThat(res.protocolVersion(),sameInstance(HttpVersion.HTTP_1_1));
  assertThat(res.status(),is(HttpResponseStatus.OK));
  byte[] data=new byte[64];
  for (int i=0; i < data.length; i++) {
    data[i]=(byte)i;
  }
  for (int i=0; i < 10; i++) {
    assertFalse(ch.writeInbound(Unpooled.copiedBuffer(Integer.toHexString(data.length) + "\r\n",CharsetUtil.US_ASCII)));
    assertTrue(ch.writeInbound(Unpooled.wrappedBuffer(data)));
    byte[] decodedData=new byte[data.length];
    HttpContent content=ch.readInbound();
    assertEquals(32,content.content().readableBytes());
    content.content().readBytes(decodedData,0,32);
    content.release();
    content=ch.readInbound();
    assertEquals(32,content.content().readableBytes());
    content.content().readBytes(decodedData,32,32);
    assertArrayEquals(data,decodedData);
    content.release();
    assertFalse(ch.writeInbound(Unpooled.copiedBuffer("\r\n",CharsetUtil.US_ASCII)));
  }
  ch.writeInbound(Unpooled.copiedBuffer("0\r\n\r\n",CharsetUtil.US_ASCII));
  LastHttpContent content=ch.readInbound();
  assertFalse(content.content().isReadable());
  content.release();
  ch.finish();
  assertNull(ch.readInbound());
}
