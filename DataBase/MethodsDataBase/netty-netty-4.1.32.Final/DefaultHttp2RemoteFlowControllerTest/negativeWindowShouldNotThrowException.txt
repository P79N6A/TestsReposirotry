@Test public void negativeWindowShouldNotThrowException() throws Http2Exception {
  final int initWindow=20;
  final int secondWindowSize=10;
  controller.initialWindowSize(initWindow);
  assertWritabilityChanged(0,true);
  reset(listener);
  FakeFlowControlled data1=new FakeFlowControlled(initWindow);
  FakeFlowControlled data2=new FakeFlowControlled(5);
  sendData(STREAM_A,data1);
  controller.writePendingBytes();
  data1.assertFullyWritten();
  assertTrue(window(CONNECTION_STREAM_ID) > 0);
  verify(listener,times(1)).writabilityChanged(stream(STREAM_A));
  verify(listener,never()).writabilityChanged(stream(STREAM_B));
  verify(listener,never()).writabilityChanged(stream(STREAM_C));
  verify(listener,never()).writabilityChanged(stream(STREAM_D));
  assertFalse(controller.isWritable(stream(STREAM_A)));
  assertTrue(controller.isWritable(stream(STREAM_B)));
  assertTrue(controller.isWritable(stream(STREAM_C)));
  assertTrue(controller.isWritable(stream(STREAM_D)));
  reset(listener);
  controller.initialWindowSize(initWindow - secondWindowSize);
  assertEquals(-secondWindowSize,window(STREAM_A));
  verify(listener,never()).writabilityChanged(stream(STREAM_A));
  verify(listener,never()).writabilityChanged(stream(STREAM_B));
  verify(listener,never()).writabilityChanged(stream(STREAM_C));
  verify(listener,never()).writabilityChanged(stream(STREAM_D));
  assertFalse(controller.isWritable(stream(STREAM_A)));
  assertTrue(controller.isWritable(stream(STREAM_B)));
  assertTrue(controller.isWritable(stream(STREAM_C)));
  assertTrue(controller.isWritable(stream(STREAM_D)));
  reset(listener);
  sendData(STREAM_A,data2);
  controller.writePendingBytes();
  data2.assertNotWritten();
  verify(listener,never()).writabilityChanged(stream(STREAM_A));
  verify(listener,never()).writabilityChanged(stream(STREAM_B));
  verify(listener,never()).writabilityChanged(stream(STREAM_C));
  verify(listener,never()).writabilityChanged(stream(STREAM_D));
  assertFalse(controller.isWritable(stream(STREAM_A)));
  assertTrue(controller.isWritable(stream(STREAM_B)));
  assertTrue(controller.isWritable(stream(STREAM_C)));
  assertTrue(controller.isWritable(stream(STREAM_D)));
  reset(listener);
  incrementWindowSize(STREAM_A,5);
  controller.writePendingBytes();
  assertEquals(-5,window(STREAM_A));
  data2.assertNotWritten();
  verify(listener,never()).writabilityChanged(stream(STREAM_A));
  verify(listener,never()).writabilityChanged(stream(STREAM_B));
  verify(listener,never()).writabilityChanged(stream(STREAM_C));
  verify(listener,never()).writabilityChanged(stream(STREAM_D));
  assertFalse(controller.isWritable(stream(STREAM_A)));
  assertTrue(controller.isWritable(stream(STREAM_B)));
  assertTrue(controller.isWritable(stream(STREAM_C)));
  assertTrue(controller.isWritable(stream(STREAM_D)));
  reset(listener);
  incrementWindowSize(STREAM_A,5);
  controller.writePendingBytes();
  assertEquals(0,window(STREAM_A));
  data2.assertNotWritten();
  verify(listener,never()).writabilityChanged(stream(STREAM_A));
  verify(listener,never()).writabilityChanged(stream(STREAM_B));
  verify(listener,never()).writabilityChanged(stream(STREAM_C));
  verify(listener,never()).writabilityChanged(stream(STREAM_D));
  assertFalse(controller.isWritable(stream(STREAM_A)));
  assertTrue(controller.isWritable(stream(STREAM_B)));
  assertTrue(controller.isWritable(stream(STREAM_C)));
  assertTrue(controller.isWritable(stream(STREAM_D)));
  reset(listener);
  incrementWindowSize(STREAM_A,5);
  controller.writePendingBytes();
  data2.assertFullyWritten();
  verify(listener,never()).writabilityChanged(stream(STREAM_A));
  verify(listener,never()).writabilityChanged(stream(STREAM_B));
  verify(listener,never()).writabilityChanged(stream(STREAM_C));
  verify(listener,never()).writabilityChanged(stream(STREAM_D));
  assertFalse(controller.isWritable(stream(STREAM_A)));
  assertTrue(controller.isWritable(stream(STREAM_B)));
  assertTrue(controller.isWritable(stream(STREAM_C)));
  assertTrue(controller.isWritable(stream(STREAM_D)));
}
