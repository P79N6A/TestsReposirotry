@Test public void closeStreamInFlowControlledError() throws Exception {
  final Http2RemoteFlowController.FlowControlled flowControlled=mock(Http2RemoteFlowController.FlowControlled.class);
  final Http2Stream stream=stream(STREAM_A);
  when(flowControlled.size()).thenReturn(100);
  doThrow(new RuntimeException("write failed")).when(flowControlled).write(any(ChannelHandlerContext.class),anyInt());
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocationOnMock){
      stream.close();
      return null;
    }
  }
).when(flowControlled).error(any(ChannelHandlerContext.class),any(Throwable.class));
  controller.addFlowControlled(stream,flowControlled);
  controller.writePendingBytes();
  verify(flowControlled).write(any(ChannelHandlerContext.class),anyInt());
  verify(flowControlled).error(any(ChannelHandlerContext.class),any(Throwable.class));
  verify(flowControlled,never()).writeComplete();
  verify(listener,times(1)).writabilityChanged(stream);
  verify(listener,never()).writabilityChanged(stream(STREAM_B));
  verify(listener,never()).writabilityChanged(stream(STREAM_C));
  verify(listener,never()).writabilityChanged(stream(STREAM_D));
  assertFalse(controller.isWritable(stream));
  assertTrue(controller.isWritable(stream(STREAM_B)));
  assertTrue(controller.isWritable(stream(STREAM_C)));
  assertTrue(controller.isWritable(stream(STREAM_D)));
}
