@Test public void flowControlledWriteAndErrorThrowAnException() throws Exception {
  final Http2RemoteFlowController.FlowControlled flowControlled=mockedFlowControlledThatThrowsOnWrite();
  final Http2Stream stream=stream(STREAM_A);
  final RuntimeException fakeException=new RuntimeException("error failed");
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocationOnMock){
      throw fakeException;
    }
  }
).when(flowControlled).error(any(ChannelHandlerContext.class),any(Throwable.class));
  int windowBefore=window(STREAM_A);
  try {
    controller.addFlowControlled(stream,flowControlled);
    controller.writePendingBytes();
    fail();
  }
 catch (  Http2Exception e) {
    assertSame(fakeException,e.getCause());
  }
catch (  Throwable t) {
    fail();
  }
  verify(flowControlled,atLeastOnce()).write(any(ChannelHandlerContext.class),anyInt());
  verify(flowControlled).error(any(ChannelHandlerContext.class),any(Throwable.class));
  verify(flowControlled,never()).writeComplete();
  assertEquals(90,windowBefore - window(STREAM_A));
  verifyZeroInteractions(listener);
}
