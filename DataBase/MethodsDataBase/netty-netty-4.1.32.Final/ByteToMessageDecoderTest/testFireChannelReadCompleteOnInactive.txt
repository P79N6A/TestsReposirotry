@Test public void testFireChannelReadCompleteOnInactive() throws InterruptedException {
  final BlockingQueue<Integer> queue=new LinkedBlockingDeque<Integer>();
  final ByteBuf buf=Unpooled.buffer().writeBytes(new byte[]{'a','b'});
  EmbeddedChannel channel=new EmbeddedChannel(new ByteToMessageDecoder(){
    @Override protected void decode(    ChannelHandlerContext ctx,    ByteBuf in,    List<Object> out) throws Exception {
      int readable=in.readableBytes();
      assertTrue(readable > 0);
      in.skipBytes(readable);
    }
    @Override protected void decodeLast(    ChannelHandlerContext ctx,    ByteBuf in,    List<Object> out) throws Exception {
      assertFalse(in.isReadable());
      out.add("data");
    }
  }
,new ChannelInboundHandlerAdapter(){
    @Override public void channelInactive(    ChannelHandlerContext ctx) throws Exception {
      queue.add(3);
    }
    @Override public void channelRead(    ChannelHandlerContext ctx,    Object msg) throws Exception {
      queue.add(1);
    }
    @Override public void channelReadComplete(    ChannelHandlerContext ctx) throws Exception {
      if (!ctx.channel().isActive()) {
        queue.add(2);
      }
    }
  }
);
  assertFalse(channel.writeInbound(buf));
  channel.finish();
  assertEquals(1,(int)queue.take());
  assertEquals(2,(int)queue.take());
  assertEquals(3,(int)queue.take());
  assertTrue(queue.isEmpty());
}
