@Test public void testFallbackSuccess(){
  when(mainHandshakerMock.newRequestData()).thenReturn(new WebSocketExtensionData("main",Collections.<String,String>emptyMap()));
  when(mainHandshakerMock.handshakeExtension(any(WebSocketExtensionData.class))).thenReturn(null);
  when(fallbackHandshakerMock.newRequestData()).thenReturn(new WebSocketExtensionData("fallback",Collections.<String,String>emptyMap()));
  when(fallbackHandshakerMock.handshakeExtension(any(WebSocketExtensionData.class))).thenReturn(fallbackExtensionMock);
  when(fallbackExtensionMock.rsv()).thenReturn(WebSocketExtension.RSV1);
  when(fallbackExtensionMock.newExtensionEncoder()).thenReturn(new DummyEncoder());
  when(fallbackExtensionMock.newExtensionDecoder()).thenReturn(new DummyDecoder());
  EmbeddedChannel ch=new EmbeddedChannel(new WebSocketClientExtensionHandler(mainHandshakerMock,fallbackHandshakerMock));
  HttpRequest req=newUpgradeRequest(null);
  ch.writeOutbound(req);
  HttpRequest req2=ch.readOutbound();
  List<WebSocketExtensionData> reqExts=WebSocketExtensionUtil.extractExtensions(req2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
  HttpResponse res=newUpgradeResponse("fallback");
  ch.writeInbound(res);
  HttpResponse res2=ch.readInbound();
  List<WebSocketExtensionData> resExts=WebSocketExtensionUtil.extractExtensions(res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
  assertEquals(2,reqExts.size());
  assertEquals("main",reqExts.get(0).name());
  assertEquals("fallback",reqExts.get(1).name());
  assertEquals(1,resExts.size());
  assertEquals("fallback",resExts.get(0).name());
  assertTrue(resExts.get(0).parameters().isEmpty());
  assertNotNull(ch.pipeline().get(DummyDecoder.class));
  assertNotNull(ch.pipeline().get(DummyEncoder.class));
  verify(mainHandshakerMock).newRequestData();
  verify(mainHandshakerMock).handshakeExtension(any(WebSocketExtensionData.class));
  verify(fallbackHandshakerMock).newRequestData();
  verify(fallbackHandshakerMock).handshakeExtension(any(WebSocketExtensionData.class));
  verify(fallbackExtensionMock,atLeastOnce()).rsv();
  verify(fallbackExtensionMock).newExtensionEncoder();
  verify(fallbackExtensionMock).newExtensionDecoder();
}
