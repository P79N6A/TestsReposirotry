@Test public void testRacingGetAndSet() throws InterruptedException {
  final NettyRuntime.AvailableProcessorsHolder holder=new NettyRuntime.AvailableProcessorsHolder();
  final CyclicBarrier barrier=new CyclicBarrier(3);
  final Thread get=new Thread(new Runnable(){
    @Override public void run(){
      await(barrier);
      holder.availableProcessors();
      await(barrier);
    }
  }
);
  get.start();
  final AtomicReference<IllegalStateException> setException=new AtomicReference<IllegalStateException>();
  final Thread set=new Thread(new Runnable(){
    @Override public void run(){
      await(barrier);
      try {
        holder.setAvailableProcessors(2048);
      }
 catch (      final IllegalStateException e) {
        setException.set(e);
      }
      await(barrier);
    }
  }
);
  set.start();
  await(barrier);
  await(barrier);
  get.join();
  set.join();
  if (setException.get() == null) {
    assertThat(holder.availableProcessors(),equalTo(2048));
  }
 else {
    assertNotNull(setException.get());
  }
}
