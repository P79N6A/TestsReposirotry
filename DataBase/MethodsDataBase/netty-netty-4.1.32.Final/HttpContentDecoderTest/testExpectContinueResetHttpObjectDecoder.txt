@Test public void testExpectContinueResetHttpObjectDecoder(){
  HttpRequestDecoder decoder=new HttpRequestDecoder();
  final int maxBytes=10;
  HttpObjectAggregator aggregator=new HttpObjectAggregator(maxBytes);
  final AtomicReference<FullHttpRequest> secondRequestRef=new AtomicReference<FullHttpRequest>();
  EmbeddedChannel channel=new EmbeddedChannel(decoder,aggregator,new ChannelInboundHandlerAdapter(){
    @Override public void channelRead(    ChannelHandlerContext ctx,    Object msg) throws Exception {
      if (msg instanceof FullHttpRequest) {
        if (!secondRequestRef.compareAndSet(null,(FullHttpRequest)msg)) {
          ((FullHttpRequest)msg).release();
        }
      }
 else {
        ReferenceCountUtil.release(msg);
      }
    }
  }
);
  String req1="POST /1 HTTP/1.1\r\n" + "Content-Length: " + (maxBytes + 1) + "\r\n"+ "Expect: 100-continue\r\n"+ "\r\n";
  assertFalse(channel.writeInbound(Unpooled.wrappedBuffer(req1.getBytes(CharsetUtil.US_ASCII))));
  FullHttpResponse resp=channel.readOutbound();
  assertEquals(HttpStatusClass.CLIENT_ERROR,resp.status().codeClass());
  resp.release();
  String req2="POST /2 HTTP/1.1\r\n" + "Content-Length: " + maxBytes + "\r\n"+ "Expect: 100-continue\r\n"+ "\r\n";
  assertFalse(channel.writeInbound(Unpooled.wrappedBuffer(req2.getBytes(CharsetUtil.US_ASCII))));
  resp=channel.readOutbound();
  assertEquals(100,resp.status().code());
  resp.release();
  byte[] content=new byte[maxBytes];
  assertFalse(channel.writeInbound(Unpooled.wrappedBuffer(content)));
  FullHttpRequest req=secondRequestRef.get();
  assertNotNull(req);
  assertEquals("/2",req.uri());
  assertEquals(10,req.content().readableBytes());
  req.release();
  assertHasInboundMessages(channel,false);
  assertHasOutboundMessages(channel,false);
  assertFalse(channel.finish());
}
