@Test public void testInputTooBigAndFillsUpBuffersJDKCompatabilityModeOff() throws Exception {
  SelfSignedCertificate cert=new SelfSignedCertificate();
  clientSslCtx=SslContextBuilder.forClient().trustManager(cert.cert()).sslProvider(sslClientProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine client=wrapEngine(clientSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());
  serverSslCtx=SslContextBuilder.forServer(cert.certificate(),cert.privateKey()).sslProvider(sslServerProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine server=wrapEngine(serverSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());
  try {
    ByteBuffer plainClient=allocateBuffer(MAX_PLAINTEXT_LENGTH + 100);
    ByteBuffer plainClient2=allocateBuffer(512);
    ByteBuffer plainClientTotal=allocateBuffer(plainClient.capacity() + plainClient2.capacity());
    plainClientTotal.put(plainClient);
    plainClientTotal.put(plainClient2);
    plainClient.clear();
    plainClient2.clear();
    plainClientTotal.flip();
    ByteBuffer encClientToServerTooSmall=allocateBuffer(MAX_PLAINTEXT_LENGTH + 28);
    ByteBuffer encClientToServer=allocateBuffer(client.getSession().getApplicationBufferSize());
    ByteBuffer encClientToServerTotal=allocateBuffer(client.getSession().getApplicationBufferSize() << 1);
    ByteBuffer plainServer=allocateBuffer(server.getSession().getApplicationBufferSize() << 1);
    handshake(client,server);
    int plainClientRemaining=plainClient.remaining();
    int encClientToServerTooSmallRemaining=encClientToServerTooSmall.remaining();
    SSLEngineResult result=client.wrap(plainClient,encClientToServerTooSmall);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(plainClientRemaining - plainClient.remaining(),result.bytesConsumed());
    assertEquals(encClientToServerTooSmallRemaining - encClientToServerTooSmall.remaining(),result.bytesProduced());
    result=client.wrap(plainClient,encClientToServerTooSmall);
    assertEquals(SSLEngineResult.Status.BUFFER_OVERFLOW,result.getStatus());
    assertEquals(0,result.bytesConsumed());
    assertEquals(0,result.bytesProduced());
    plainClientRemaining=plainClient.remaining();
    int encClientToServerRemaining=encClientToServer.remaining();
    result=client.wrap(plainClient,encClientToServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(plainClientRemaining,result.bytesConsumed());
    assertEquals(encClientToServerRemaining - encClientToServer.remaining(),result.bytesProduced());
    assertEquals(0,plainClient.remaining());
    final int plainClient2Remaining=plainClient2.remaining();
    encClientToServerRemaining=encClientToServer.remaining();
    result=client.wrap(plainClient2,encClientToServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(plainClient2Remaining,result.bytesConsumed());
    assertEquals(encClientToServerRemaining - encClientToServer.remaining(),result.bytesProduced());
    encClientToServerTooSmall.flip();
    encClientToServer.flip();
    encClientToServerTotal.put(encClientToServerTooSmall);
    encClientToServerTotal.put(encClientToServer);
    encClientToServerTotal.flip();
    final int encClientToServerTotalRemaining=encClientToServerTotal.remaining();
    result=server.unwrap(encClientToServerTotal,plainServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(encClientToServerTotalRemaining,result.bytesConsumed());
    plainServer.flip();
    assertEquals(plainClientTotal,plainServer);
  }
  finally {
    cert.delete();
    cleanupClientSslEngine(client);
    cleanupServerSslEngine(server);
  }
}
