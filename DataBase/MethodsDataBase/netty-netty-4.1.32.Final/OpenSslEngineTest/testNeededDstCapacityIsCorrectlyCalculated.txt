@Test public void testNeededDstCapacityIsCorrectlyCalculated() throws Exception {
  clientSslCtx=SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).sslProvider(sslClientProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SelfSignedCertificate ssc=new SelfSignedCertificate();
  serverSslCtx=SslContextBuilder.forServer(ssc.certificate(),ssc.privateKey()).sslProvider(sslServerProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine clientEngine=null;
  SSLEngine serverEngine=null;
  try {
    clientEngine=wrapEngine(clientSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
    serverEngine=wrapEngine(serverSslCtx.newEngine(UnpooledByteBufAllocator.DEFAULT));
    handshake(clientEngine,serverEngine);
    ByteBuffer src=allocateBuffer(1024);
    ByteBuffer src2=src.duplicate();
    ByteBuffer dst=allocateBuffer(src.capacity() + unwrapEngine(clientEngine).maxWrapOverhead());
    SSLEngineResult result=clientEngine.wrap(new ByteBuffer[]{src,src2},dst);
    assertEquals(SSLEngineResult.Status.BUFFER_OVERFLOW,result.getStatus());
    assertEquals(0,src.position());
    assertEquals(0,src2.position());
    assertEquals(0,dst.position());
    assertEquals(0,result.bytesConsumed());
    assertEquals(0,result.bytesProduced());
  }
  finally {
    cleanupClientSslEngine(clientEngine);
    cleanupServerSslEngine(serverEngine);
  }
}
