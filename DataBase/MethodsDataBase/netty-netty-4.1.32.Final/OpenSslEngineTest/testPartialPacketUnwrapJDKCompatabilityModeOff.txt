@Test public void testPartialPacketUnwrapJDKCompatabilityModeOff() throws Exception {
  SelfSignedCertificate cert=new SelfSignedCertificate();
  clientSslCtx=SslContextBuilder.forClient().trustManager(cert.cert()).sslProvider(sslClientProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine client=wrapEngine(clientSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());
  serverSslCtx=SslContextBuilder.forServer(cert.certificate(),cert.privateKey()).sslProvider(sslServerProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine server=wrapEngine(serverSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());
  try {
    ByteBuffer plainClient=allocateBuffer(1024);
    ByteBuffer plainClient2=allocateBuffer(512);
    ByteBuffer plainClientTotal=allocateBuffer(plainClient.capacity() + plainClient2.capacity());
    plainClientTotal.put(plainClient);
    plainClientTotal.put(plainClient2);
    plainClient.clear();
    plainClient2.clear();
    plainClientTotal.flip();
    ByteBuffer encClientToServer=allocateBuffer(client.getSession().getPacketBufferSize());
    ByteBuffer plainServer=allocateBuffer(server.getSession().getApplicationBufferSize());
    handshake(client,server);
    SSLEngineResult result=client.wrap(plainClient,encClientToServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(result.bytesConsumed(),plainClient.capacity());
    final int encClientLen=result.bytesProduced();
    result=client.wrap(plainClient2,encClientToServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(result.bytesConsumed(),plainClient2.capacity());
    final int encClientLen2=result.bytesProduced();
    encClientToServer.flip();
    ByteBuffer encClientFirstHalf=encClientToServer.duplicate();
    encClientFirstHalf.limit(encClientLen / 2);
    result=server.unwrap(encClientFirstHalf,plainServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(result.bytesConsumed(),encClientLen / 2);
    encClientToServer.position(result.bytesConsumed());
    ByteBuffer encClientAllButLastByte=encClientToServer.duplicate();
    final int encClientAllButLastByteLen=encClientAllButLastByte.remaining() - 1;
    encClientAllButLastByte.limit(encClientAllButLastByte.limit() - 1);
    result=server.unwrap(encClientAllButLastByte,plainServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(result.bytesConsumed(),encClientAllButLastByteLen);
    encClientToServer.position(encClientToServer.position() + result.bytesConsumed());
    result=server.unwrap(encClientToServer,plainServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(result.bytesConsumed(),1);
    plainServer.flip();
    assertEquals(plainClientTotal,plainServer);
  }
  finally {
    cert.delete();
    cleanupClientSslEngine(client);
    cleanupServerSslEngine(server);
  }
}
