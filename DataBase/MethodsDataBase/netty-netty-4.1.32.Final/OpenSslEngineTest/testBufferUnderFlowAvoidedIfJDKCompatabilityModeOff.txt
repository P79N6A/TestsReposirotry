@Test public void testBufferUnderFlowAvoidedIfJDKCompatabilityModeOff() throws Exception {
  SelfSignedCertificate cert=new SelfSignedCertificate();
  clientSslCtx=SslContextBuilder.forClient().trustManager(cert.cert()).sslProvider(sslClientProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine client=wrapEngine(clientSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());
  serverSslCtx=SslContextBuilder.forServer(cert.certificate(),cert.privateKey()).sslProvider(sslServerProvider()).protocols(protocols()).ciphers(ciphers()).build();
  SSLEngine server=wrapEngine(serverSslCtx.newHandler(UnpooledByteBufAllocator.DEFAULT).engine());
  try {
    ByteBuffer plainClient=allocateBuffer(1024);
    plainClient.limit(plainClient.capacity());
    ByteBuffer encClientToServer=allocateBuffer(client.getSession().getPacketBufferSize());
    ByteBuffer plainServer=allocateBuffer(server.getSession().getApplicationBufferSize());
    handshake(client,server);
    SSLEngineResult result=client.wrap(plainClient,encClientToServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(result.bytesConsumed(),plainClient.capacity());
    encClientToServer.flip();
    int remaining=encClientToServer.remaining();
    encClientToServer.limit(SslUtils.SSL_RECORD_HEADER_LENGTH - 1);
    result=server.unwrap(encClientToServer,plainServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(SslUtils.SSL_RECORD_HEADER_LENGTH - 1,result.bytesConsumed());
    assertEquals(0,result.bytesProduced());
    remaining-=result.bytesConsumed();
    encClientToServer.limit(SslUtils.SSL_RECORD_HEADER_LENGTH);
    result=server.unwrap(encClientToServer,plainServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(1,result.bytesConsumed());
    assertEquals(0,result.bytesProduced());
    remaining-=result.bytesConsumed();
    encClientToServer.limit(SslUtils.SSL_RECORD_HEADER_LENGTH + remaining - 1 - SslUtils.SSL_RECORD_HEADER_LENGTH);
    result=server.unwrap(encClientToServer,plainServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(encClientToServer.limit() - SslUtils.SSL_RECORD_HEADER_LENGTH,result.bytesConsumed());
    assertEquals(0,result.bytesProduced());
    remaining-=result.bytesConsumed();
    encClientToServer.limit(remaining);
    assertEquals(0,encClientToServer.remaining());
    result=server.unwrap(encClientToServer,plainServer);
    assertEquals(SSLEngineResult.Status.BUFFER_UNDERFLOW,result.getStatus());
    assertEquals(0,result.bytesConsumed());
    assertEquals(0,result.bytesProduced());
    encClientToServer.position(0);
    result=server.unwrap(encClientToServer,plainServer);
    assertEquals(SSLEngineResult.Status.OK,result.getStatus());
    assertEquals(remaining,result.bytesConsumed());
    assertEquals(0,result.bytesProduced());
  }
  finally {
    cert.delete();
    cleanupClientSslEngine(client);
    cleanupServerSslEngine(server);
  }
}
