@Test public void testWrapWithDifferentSizesTLSv1_1() throws Exception {
  clientSslCtx=SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).sslProvider(sslClientProvider()).build();
  SelfSignedCertificate ssc=new SelfSignedCertificate();
  serverSslCtx=SslContextBuilder.forServer(ssc.certificate(),ssc.privateKey()).sslProvider(sslServerProvider()).build();
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"ECDHE-RSA-AES256-SHA");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"AES256-SHA");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"CAMELLIA256-SHA");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"ECDHE-RSA-AES256-SHA");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"SEED-SHA");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"CAMELLIA128-SHA");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"IDEA-CBC-SHA");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"AECDH-RC4-SHA");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"ADH-RC4-MD5");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"RC4-SHA");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"ECDHE-RSA-DES-CBC3-SHA");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"EDH-RSA-DES-CBC3-SHA");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"AECDH-DES-CBC3-SHA");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"ADH-DES-CBC3-SHA");
  testWrapWithDifferentSizes(PROTOCOL_TLS_V1_1,"DES-CBC3-SHA");
}
