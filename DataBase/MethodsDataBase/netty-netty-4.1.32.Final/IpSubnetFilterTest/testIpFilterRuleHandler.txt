@Test public void testIpFilterRuleHandler() throws Exception {
  IpFilterRule filter0=new IpFilterRule(){
    @Override public boolean matches(    InetSocketAddress remoteAddress){
      return "192.168.57.1".equals(remoteAddress.getHostName());
    }
    @Override public IpFilterRuleType ruleType(){
      return IpFilterRuleType.REJECT;
    }
  }
;
  RuleBasedIpFilter denyHandler=new RuleBasedIpFilter(filter0){
    private final byte[] message={1,2,3,4,5,6,7};
    @Override protected ChannelFuture channelRejected(    ChannelHandlerContext ctx,    InetSocketAddress remoteAddress){
      Assert.assertTrue(ctx.channel().isActive());
      Assert.assertTrue(ctx.channel().isWritable());
      Assert.assertEquals("192.168.57.1",remoteAddress.getHostName());
      return ctx.writeAndFlush(Unpooled.wrappedBuffer(message));
    }
  }
;
  EmbeddedChannel chDeny=newEmbeddedInetChannel("192.168.57.1",denyHandler);
  ByteBuf out=chDeny.readOutbound();
  Assert.assertEquals(7,out.readableBytes());
  for (byte i=1; i <= 7; i++) {
    Assert.assertEquals(i,out.readByte());
  }
  Assert.assertFalse(chDeny.isActive());
  Assert.assertFalse(chDeny.isOpen());
  RuleBasedIpFilter allowHandler=new RuleBasedIpFilter(filter0){
    @Override protected ChannelFuture channelRejected(    ChannelHandlerContext ctx,    InetSocketAddress remoteAddress){
      Assert.fail();
      return null;
    }
  }
;
  EmbeddedChannel chAllow=newEmbeddedInetChannel("192.168.57.2",allowHandler);
  Assert.assertTrue(chAllow.isActive());
  Assert.assertTrue(chAllow.isOpen());
}
