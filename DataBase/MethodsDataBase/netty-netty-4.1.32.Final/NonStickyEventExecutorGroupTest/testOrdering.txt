@Test(timeout=10000) public void testOrdering() throws Throwable {
  final int threads=NettyRuntime.availableProcessors() * 2;
  final EventExecutorGroup group=new UnorderedThreadPoolEventExecutor(threads);
  final NonStickyEventExecutorGroup nonStickyGroup=new NonStickyEventExecutorGroup(group,maxTaskExecutePerRun);
  try {
    final CountDownLatch startLatch=new CountDownLatch(1);
    final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
    List<Thread> threadList=new ArrayList<Thread>(threads);
    for (int i=0; i < threads; i++) {
      Thread thread=new Thread(new Runnable(){
        @Override public void run(){
          try {
            execute(nonStickyGroup,startLatch);
          }
 catch (          Throwable cause) {
            error.compareAndSet(null,cause);
          }
        }
      }
);
      threadList.add(thread);
      thread.start();
    }
    startLatch.countDown();
    for (    Thread t : threadList) {
      t.join();
    }
    Throwable cause=error.get();
    if (cause != null) {
      throw cause;
    }
  }
  finally {
    nonStickyGroup.shutdownGracefully();
  }
}
