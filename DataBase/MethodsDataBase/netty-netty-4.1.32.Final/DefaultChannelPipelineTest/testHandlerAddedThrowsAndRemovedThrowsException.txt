@Test(timeout=3000) public void testHandlerAddedThrowsAndRemovedThrowsException() throws InterruptedException {
  final EventExecutorGroup group1=new DefaultEventExecutorGroup(1);
  try {
    final CountDownLatch latch=new CountDownLatch(1);
    final Promise<Void> promise=group1.next().newPromise();
    final Exception exceptionAdded=new RuntimeException();
    final Exception exceptionRemoved=new RuntimeException();
    String handlerName="foo";
    ChannelPipeline pipeline=new LocalChannel().pipeline();
    pipeline.addLast(group1,new CheckExceptionHandler(exceptionAdded,promise));
    pipeline.addFirst(handlerName,new ChannelHandlerAdapter(){
      @Override public void handlerAdded(      ChannelHandlerContext ctx) throws Exception {
        throw exceptionAdded;
      }
      @Override public void handlerRemoved(      ChannelHandlerContext ctx) throws Exception {
        ctx.executor().execute(new Runnable(){
          @Override public void run(){
            latch.countDown();
          }
        }
);
        throw exceptionRemoved;
      }
    }
);
    group.register(pipeline.channel()).syncUninterruptibly();
    latch.await();
    assertNull(pipeline.context(handlerName));
    promise.syncUninterruptibly();
  }
  finally {
    group1.shutdownGracefully();
  }
}
