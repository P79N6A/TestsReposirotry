@Test(timeout=3000) public void testHandlerRemovedExceptionFromChildHandlerIsPropagated(){
  final EventExecutorGroup group1=new DefaultEventExecutorGroup(1);
  try {
    final Promise<Void> promise=group1.next().newPromise();
    String handlerName="foo";
    final Exception exception=new RuntimeException();
    ChannelPipeline pipeline=new LocalChannel().pipeline();
    pipeline.addLast(handlerName,new ChannelHandlerAdapter(){
      @Override public void handlerRemoved(      ChannelHandlerContext ctx) throws Exception {
        throw exception;
      }
    }
);
    pipeline.addLast(group1,new CheckExceptionHandler(exception,promise));
    group.register(pipeline.channel()).syncUninterruptibly();
    pipeline.remove(handlerName);
    promise.syncUninterruptibly();
  }
  finally {
    group1.shutdownGracefully();
  }
}
