@Test(timeout=10000) public void testLifeCycleAwareness() throws Exception {
  setUp();
  ChannelPipeline p=self.pipeline();
  final List<LifeCycleAwareTestHandler> handlers=new ArrayList<LifeCycleAwareTestHandler>();
  final int COUNT=20;
  final CountDownLatch addLatch=new CountDownLatch(COUNT);
  for (int i=0; i < COUNT; i++) {
    final LifeCycleAwareTestHandler handler=new LifeCycleAwareTestHandler("handler-" + i);
    p.addFirst(handler.name,handler);
    self.eventLoop().execute(new Runnable(){
      @Override public void run(){
        handler.validate(true,false);
        handlers.add(handler);
        addLatch.countDown();
      }
    }
);
  }
  addLatch.await();
  Collections.shuffle(handlers);
  final CountDownLatch removeLatch=new CountDownLatch(COUNT);
  for (  final LifeCycleAwareTestHandler handler : handlers) {
    assertSame(handler,p.remove(handler.name));
    self.eventLoop().execute(new Runnable(){
      @Override public void run(){
        handler.validate(true,true);
        removeLatch.countDown();
      }
    }
);
  }
  removeLatch.await();
}
