@Test(timeout=3000) public void testHandlerAddedAndRemovedCalledInCorrectOrder() throws Throwable {
  final EventExecutorGroup group1=new DefaultEventExecutorGroup(1);
  final EventExecutorGroup group2=new DefaultEventExecutorGroup(1);
  try {
    BlockingQueue<CheckOrderHandler> addedQueue=new LinkedBlockingQueue<CheckOrderHandler>();
    BlockingQueue<CheckOrderHandler> removedQueue=new LinkedBlockingQueue<CheckOrderHandler>();
    CheckOrderHandler handler1=new CheckOrderHandler(addedQueue,removedQueue);
    CheckOrderHandler handler2=new CheckOrderHandler(addedQueue,removedQueue);
    CheckOrderHandler handler3=new CheckOrderHandler(addedQueue,removedQueue);
    CheckOrderHandler handler4=new CheckOrderHandler(addedQueue,removedQueue);
    ChannelPipeline pipeline=new LocalChannel().pipeline();
    pipeline.addLast(handler1);
    group.register(pipeline.channel()).syncUninterruptibly();
    pipeline.addLast(group1,handler2);
    pipeline.addLast(group2,handler3);
    pipeline.addLast(handler4);
    assertTrue(removedQueue.isEmpty());
    pipeline.channel().close().syncUninterruptibly();
    assertHandler(addedQueue.take(),handler1);
    assertHandler(addedQueue.take(),handler2,handler3,handler4);
    assertHandler(addedQueue.take(),handler2,handler3,handler4);
    assertHandler(addedQueue.take(),handler2,handler3,handler4);
    assertTrue(addedQueue.isEmpty());
    assertHandler(removedQueue.take(),handler4);
    assertHandler(removedQueue.take(),handler3);
    assertHandler(removedQueue.take(),handler2);
    assertHandler(removedQueue.take(),handler1);
    assertTrue(removedQueue.isEmpty());
  }
  finally {
    group1.shutdownGracefully();
    group2.shutdownGracefully();
  }
}
