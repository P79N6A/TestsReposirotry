@Test public void deflateEncodingWriteLargeMessage() throws Exception {
  final int BUFFER_SIZE=1 << 12;
  final byte[] bytes=new byte[BUFFER_SIZE];
  new Random().nextBytes(bytes);
  bootstrapEnv(BUFFER_SIZE);
  final ByteBuf data=Unpooled.wrappedBuffer(bytes);
  try {
    final Http2Headers headers=new DefaultHttp2Headers().method(POST).path(PATH).set(HttpHeaderNames.CONTENT_ENCODING,HttpHeaderValues.DEFLATE);
    runInChannel(clientChannel,new Http2Runnable(){
      @Override public void run() throws Http2Exception {
        clientEncoder.writeHeaders(ctxClient(),3,headers,0,false,newPromiseClient());
        clientEncoder.writeData(ctxClient(),3,data.retain(),0,true,newPromiseClient());
        clientHandler.flush(ctxClient());
      }
    }
);
    awaitServer();
    assertEquals(data.resetReaderIndex().toString(CharsetUtil.UTF_8),serverOut.toString(CharsetUtil.UTF_8.name()));
  }
  finally {
    data.release();
  }
}
