@Test public void testTlsExtensionNoCompatibleProtocolsClientHandshakeFailure() throws Exception {
  try {
    providerType.activate(this);
    if (providerType == ProviderType.NPN_JETTY) {
      ApplicationProtocolConfig clientApn=failingNegotiator(providerType.protocol(),PREFERRED_APPLICATION_LEVEL_PROTOCOL);
      ApplicationProtocolConfig serverApn=acceptingNegotiator(providerType.protocol(),APPLICATION_LEVEL_PROTOCOL_NOT_COMPATIBLE);
      setupHandlers(serverApn,clientApn);
      assertTrue(clientLatch.await(2,TimeUnit.SECONDS));
      assertTrue(clientException instanceof SSLHandshakeException);
    }
 else {
      SelfSignedCertificate ssc=new SelfSignedCertificate();
      JdkApplicationProtocolNegotiator clientApn=new JdkAlpnApplicationProtocolNegotiator(true,true,PREFERRED_APPLICATION_LEVEL_PROTOCOL);
      JdkApplicationProtocolNegotiator serverApn=new JdkAlpnApplicationProtocolNegotiator(new ProtocolSelectorFactory(){
        @Override public ProtocolSelector newSelector(        SSLEngine engine,        Set<String> supportedProtocols){
          return new ProtocolSelector(){
            @Override public void unsupported(){
            }
            @Override public String select(            List<String> protocols){
              return APPLICATION_LEVEL_PROTOCOL_NOT_COMPATIBLE;
            }
          }
;
        }
      }
,JdkBaseApplicationProtocolNegotiator.FAIL_SELECTION_LISTENER_FACTORY,APPLICATION_LEVEL_PROTOCOL_NOT_COMPATIBLE);
      SslContext serverSslCtx=new JdkSslServerContext(providerType.provider(),ssc.certificate(),ssc.privateKey(),null,null,IdentityCipherSuiteFilter.INSTANCE,serverApn,0,0);
      SslContext clientSslCtx=new JdkSslClientContext(providerType.provider(),null,InsecureTrustManagerFactory.INSTANCE,null,IdentityCipherSuiteFilter.INSTANCE,clientApn,0,0);
      setupHandlers(new TestDelegatingSslContext(serverSslCtx),new TestDelegatingSslContext(clientSslCtx));
      assertTrue(clientLatch.await(2,TimeUnit.SECONDS));
      assertTrue(clientException instanceof SSLHandshakeException || clientException == null);
    }
  }
 catch (  SkipTestException e) {
    assumeNoException(e);
  }
}
