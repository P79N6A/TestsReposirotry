@Test public void shouldDecodeSeparatedValues(){
  String msgBody="Not found";
  channel=new EmbeddedChannel(new BinaryMemcacheResponseDecoder());
  channel.writeInbound(Unpooled.buffer().writeBytes(GET_RESPONSE_CHUNK_1));
  channel.writeInbound(Unpooled.buffer().writeBytes(GET_RESPONSE_CHUNK_2));
  BinaryMemcacheResponse response=channel.readInbound();
  assertThat(response.status(),is(BinaryMemcacheResponseStatus.KEY_ENOENT));
  assertThat(response.totalBodyLength(),is(msgBody.length()));
  response.release();
  MemcacheContent content=channel.readInbound();
  assertThat(content,instanceOf(LastMemcacheContent.class));
  assertThat(content.content().toString(CharsetUtil.UTF_8),is(msgBody));
  content.release();
  response=channel.readInbound();
  assertThat(response.status(),is(BinaryMemcacheResponseStatus.KEY_ENOENT));
  assertThat(response.totalBodyLength(),is(msgBody.length()));
  response.release();
  content=channel.readInbound();
  assertThat(content,instanceOf(MemcacheContent.class));
  assertThat(content.content().toString(CharsetUtil.UTF_8),is(msgBody.substring(0,7)));
  content.release();
  content=channel.readInbound();
  assertThat(content,instanceOf(LastMemcacheContent.class));
  assertThat(content.content().toString(CharsetUtil.UTF_8),is(msgBody.substring(7,9)));
  content.release();
  response=channel.readInbound();
  assertThat(response.status(),is(BinaryMemcacheResponseStatus.KEY_ENOENT));
  assertThat(response.totalBodyLength(),is(msgBody.length()));
  response.release();
  content=channel.readInbound();
  assertThat(content,instanceOf(LastMemcacheContent.class));
  assertThat(content.content().toString(CharsetUtil.UTF_8),is(msgBody));
  content.release();
}
