/** 
 * In this test, we add a node to the priority tree and verify <pre> 0 / \ A   B / \ C   D </pre> After the tree shift: <pre> 0 / \ A   B | E / \ C   D </pre>
 */
@Test public void bytesDistributedWithAdditionShouldBeCorrect() throws Http2Exception {
  Http2Stream streamE=connection.local().createStream(STREAM_E,false);
  setPriority(streamE.id(),STREAM_A,DEFAULT_PRIORITY_WEIGHT,true);
  initState(STREAM_A,400,true);
  initState(STREAM_B,500,true);
  initState(STREAM_C,600,true);
  initState(STREAM_D,700,true);
  initState(STREAM_E,900,true);
  assertTrue(write(900));
  assertEquals(400,captureWrites(STREAM_A));
  assertEquals(500,captureWrites(STREAM_B));
  verifyNeverWrite(STREAM_C);
  verifyNeverWrite(STREAM_D);
  verifyWrite(atMost(1),STREAM_E,0);
  assertTrue(write(900));
  assertEquals(400,captureWrites(STREAM_A));
  assertEquals(500,captureWrites(STREAM_B));
  verifyWrite(atMost(1),STREAM_C,0);
  verifyWrite(atMost(1),STREAM_D,0);
  assertEquals(900,captureWrites(STREAM_E));
  assertFalse(write(1301));
  assertEquals(400,captureWrites(STREAM_A));
  assertEquals(500,captureWrites(STREAM_B));
  assertEquals(600,captureWrites(STREAM_C));
  assertEquals(700,captureWrites(STREAM_D));
  assertEquals(900,captureWrites(STREAM_E));
}
