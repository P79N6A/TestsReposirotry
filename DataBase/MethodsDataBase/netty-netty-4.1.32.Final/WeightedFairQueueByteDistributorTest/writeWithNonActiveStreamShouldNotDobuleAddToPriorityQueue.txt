/** 
 * In this test, we block B such that it has no frames. We distribute enough bytes for all streams and stream B should be preserved in the priority queue structure until it has no "active" children, but it should not be doubly added to stream 0. <pre> 0 | A | [B] | C | D </pre> After the write: <pre> 0 </pre>
 */
@Test public void writeWithNonActiveStreamShouldNotDobuleAddToPriorityQueue() throws Http2Exception {
  initState(STREAM_A,400,true);
  initState(STREAM_B,500,true);
  initState(STREAM_C,600,true);
  initState(STREAM_D,700,true);
  setPriority(STREAM_B,STREAM_A,DEFAULT_PRIORITY_WEIGHT,true);
  setPriority(STREAM_D,STREAM_C,DEFAULT_PRIORITY_WEIGHT,true);
  initState(STREAM_B,0,false);
  Http2Stream streamA=stream(STREAM_A);
  Http2Stream streamB=stream(STREAM_B);
  Http2Stream streamC=stream(STREAM_C);
  Http2Stream streamD=stream(STREAM_D);
  reset(writer);
  doAnswer(writeAnswer(true)).when(writer).write(any(Http2Stream.class),anyInt());
  assertFalse(write(400 + 600 + 700));
  assertEquals(400,captureWrites(streamA));
  verifyNeverWrite(streamB);
  assertEquals(600,captureWrites(streamC));
  assertEquals(700,captureWrites(streamD));
}
