@Test(expected=IllegalArgumentException.class) public void testReleaseDifferentPool() throws Exception {
  LocalAddress addr=new LocalAddress(LOCAL_ADDR_ID);
  Bootstrap cb=new Bootstrap();
  cb.remoteAddress(addr);
  cb.group(group).channel(LocalChannel.class);
  ServerBootstrap sb=new ServerBootstrap();
  sb.group(group).channel(LocalServerChannel.class).childHandler(new ChannelInitializer<LocalChannel>(){
    @Override public void initChannel(    LocalChannel ch) throws Exception {
      ch.pipeline().addLast(new ChannelInboundHandlerAdapter());
    }
  }
);
  Channel sc=sb.bind(addr).syncUninterruptibly().channel();
  ChannelPoolHandler handler=new TestChannelPoolHandler();
  ChannelPool pool=new FixedChannelPool(cb,handler,1,1);
  ChannelPool pool2=new FixedChannelPool(cb,handler,1,1);
  Channel channel=pool.acquire().syncUninterruptibly().getNow();
  try {
    pool2.release(channel).syncUninterruptibly();
  }
  finally {
    sc.close().syncUninterruptibly();
    channel.close().syncUninterruptibly();
  }
}
