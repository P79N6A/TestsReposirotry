@Test public void testFormatMessage(){
  ArgumentCaptor<String> captor=ArgumentCaptor.forClass(String.class);
  LocationAwareLogger logger=mock(LocationAwareLogger.class);
  when(logger.isDebugEnabled()).thenReturn(true);
  when(logger.isErrorEnabled()).thenReturn(true);
  when(logger.isInfoEnabled()).thenReturn(true);
  when(logger.isTraceEnabled()).thenReturn(true);
  when(logger.isWarnEnabled()).thenReturn(true);
  when(logger.getName()).thenReturn("testlogger");
  InternalLogger internalLogger=Slf4JLoggerFactory.wrapLogger(logger);
  internalLogger.debug("{}","debug");
  internalLogger.debug("{} {}","debug1","debug2");
  internalLogger.error("{}","error");
  internalLogger.error("{} {}","error1","error2");
  internalLogger.info("{}","info");
  internalLogger.info("{} {}","info1","info2");
  internalLogger.trace("{}","trace");
  internalLogger.trace("{} {}","trace1","trace2");
  internalLogger.warn("{}","warn");
  internalLogger.warn("{} {}","warn1","warn2");
  verify(logger,times(2)).log(ArgumentMatchers.<Marker>isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.DEBUG_INT),captor.capture(),any(Object[].class),ArgumentMatchers.<Throwable>isNull());
  verify(logger,times(2)).log(ArgumentMatchers.<Marker>isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.ERROR_INT),captor.capture(),any(Object[].class),ArgumentMatchers.<Throwable>isNull());
  verify(logger,times(2)).log(ArgumentMatchers.<Marker>isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.INFO_INT),captor.capture(),any(Object[].class),ArgumentMatchers.<Throwable>isNull());
  verify(logger,times(2)).log(ArgumentMatchers.<Marker>isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.TRACE_INT),captor.capture(),any(Object[].class),ArgumentMatchers.<Throwable>isNull());
  verify(logger,times(2)).log(ArgumentMatchers.<Marker>isNull(),eq(LocationAwareSlf4JLogger.FQCN),eq(LocationAwareLogger.WARN_INT),captor.capture(),any(Object[].class),ArgumentMatchers.<Throwable>isNull());
  Iterator<String> logMessages=captor.getAllValues().iterator();
  assertEquals("debug",logMessages.next());
  assertEquals("debug1 debug2",logMessages.next());
  assertEquals("error",logMessages.next());
  assertEquals("error1 error2",logMessages.next());
  assertEquals("info",logMessages.next());
  assertEquals("info1 info2",logMessages.next());
  assertEquals("trace",logMessages.next());
  assertEquals("trace1 trace2",logMessages.next());
  assertEquals("warn",logMessages.next());
  assertEquals("warn1 warn2",logMessages.next());
  assertFalse(logMessages.hasNext());
}
