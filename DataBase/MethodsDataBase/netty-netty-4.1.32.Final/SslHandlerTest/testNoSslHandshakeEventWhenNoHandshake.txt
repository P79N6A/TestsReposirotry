@Test public void testNoSslHandshakeEventWhenNoHandshake() throws Exception {
  final AtomicBoolean inActive=new AtomicBoolean(false);
  SSLEngine engine=SSLContext.getDefault().createSSLEngine();
  EmbeddedChannel ch=new EmbeddedChannel(DefaultChannelId.newInstance(),false,false,new ChannelInboundHandlerAdapter(){
    @Override public void channelActive(    ChannelHandlerContext ctx) throws Exception {
      ctx.close();
    }
  }
,new SslHandler(engine){
    @Override public void handlerAdded(    ChannelHandlerContext ctx) throws Exception {
      inActive.set(true);
      super.handlerAdded(ctx);
      inActive.set(false);
    }
  }
,new ChannelInboundHandlerAdapter(){
    @Override public void userEventTriggered(    ChannelHandlerContext ctx,    Object evt) throws Exception {
      if (evt instanceof SslHandshakeCompletionEvent) {
        throw (Exception)((SslHandshakeCompletionEvent)evt).cause();
      }
    }
  }
){
    @Override public boolean isActive(){
      return !inActive.get() && super.isActive();
    }
  }
;
  ch.register();
  assertFalse(ch.finishAndReleaseAll());
}
