@Test public void testRequestAfterOversized100ContinueAndDecoder(){
  EmbeddedChannel embedder=new EmbeddedChannel(new HttpRequestDecoder(),new HttpObjectAggregator(15));
  HttpRequest message=new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.PUT,"http://localhost");
  HttpUtil.set100ContinueExpected(message,true);
  HttpUtil.setContentLength(message,16);
  HttpContent chunk1=new DefaultHttpContent(Unpooled.copiedBuffer("some",CharsetUtil.US_ASCII));
  HttpContent chunk2=new DefaultHttpContent(Unpooled.copiedBuffer("test",CharsetUtil.US_ASCII));
  HttpContent chunk3=LastHttpContent.EMPTY_LAST_CONTENT;
  assertFalse(embedder.writeInbound(message));
  FullHttpResponse response=embedder.readOutbound();
  assertEquals(HttpResponseStatus.REQUEST_ENTITY_TOO_LARGE,response.status());
  assertEquals("0",response.headers().get(HttpHeaderNames.CONTENT_LENGTH));
  assertFalse(embedder.writeInbound(chunk1));
  assertTrue(embedder.isOpen());
  HttpRequest message2=new DefaultHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.PUT,"http://localhost");
  assertFalse(embedder.writeInbound(message2));
  assertFalse(embedder.writeInbound(chunk2));
  assertTrue(embedder.writeInbound(chunk3));
  FullHttpRequest fullMsg=embedder.readInbound();
  assertNotNull(fullMsg);
  assertEquals(chunk2.content().readableBytes() + chunk3.content().readableBytes(),HttpUtil.getContentLength(fullMsg));
  assertEquals(HttpUtil.getContentLength(fullMsg),fullMsg.content().readableBytes());
  fullMsg.release();
  assertFalse(embedder.finish());
}
