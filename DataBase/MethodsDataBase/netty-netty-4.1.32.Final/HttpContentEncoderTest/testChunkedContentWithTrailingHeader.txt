@Test public void testChunkedContentWithTrailingHeader() throws Exception {
  EmbeddedChannel ch=new EmbeddedChannel(new TestEncoder());
  ch.writeInbound(new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,"/"));
  HttpResponse res=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK);
  res.headers().set(HttpHeaderNames.TRANSFER_ENCODING,HttpHeaderValues.CHUNKED);
  ch.writeOutbound(res);
  assertEncodedResponse(ch);
  ch.writeOutbound(new DefaultHttpContent(Unpooled.wrappedBuffer(new byte[3])));
  ch.writeOutbound(new DefaultHttpContent(Unpooled.wrappedBuffer(new byte[2])));
  LastHttpContent content=new DefaultLastHttpContent(Unpooled.wrappedBuffer(new byte[1]));
  content.trailingHeaders().set(of("X-Test"),of("Netty"));
  ch.writeOutbound(content);
  HttpContent chunk;
  chunk=ch.readOutbound();
  assertThat(chunk.content().toString(CharsetUtil.US_ASCII),is("3"));
  chunk.release();
  chunk=ch.readOutbound();
  assertThat(chunk.content().toString(CharsetUtil.US_ASCII),is("2"));
  chunk.release();
  chunk=ch.readOutbound();
  assertThat(chunk.content().toString(CharsetUtil.US_ASCII),is("1"));
  assertThat(chunk,is(instanceOf(HttpContent.class)));
  chunk.release();
  chunk=ch.readOutbound();
  assertThat(chunk.content().isReadable(),is(false));
  assertThat(chunk,is(instanceOf(LastHttpContent.class)));
  assertEquals("Netty",((LastHttpContent)chunk).trailingHeaders().get(of("X-Test")));
  chunk.release();
  assertThat(ch.readOutbound(),is(nullValue()));
}
