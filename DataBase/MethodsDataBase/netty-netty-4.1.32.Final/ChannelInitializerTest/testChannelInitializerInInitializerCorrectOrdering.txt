@Test public void testChannelInitializerInInitializerCorrectOrdering(){
  final ChannelInboundHandlerAdapter handler1=new ChannelInboundHandlerAdapter();
  final ChannelInboundHandlerAdapter handler2=new ChannelInboundHandlerAdapter();
  final ChannelInboundHandlerAdapter handler3=new ChannelInboundHandlerAdapter();
  final ChannelInboundHandlerAdapter handler4=new ChannelInboundHandlerAdapter();
  client.handler(new ChannelInitializer<Channel>(){
    @Override protected void initChannel(    Channel ch) throws Exception {
      ch.pipeline().addLast(handler1);
      ch.pipeline().addLast(new ChannelInitializer<Channel>(){
        @Override protected void initChannel(        Channel ch) throws Exception {
          ch.pipeline().addLast(handler2);
          ch.pipeline().addLast(handler3);
        }
      }
);
      ch.pipeline().addLast(handler4);
    }
  }
).localAddress(LocalAddress.ANY);
  Channel channel=client.bind().syncUninterruptibly().channel();
  try {
    channel.eventLoop().submit(new Runnable(){
      @Override public void run(){
      }
    }
).syncUninterruptibly();
    Iterator<Map.Entry<String,ChannelHandler>> handlers=channel.pipeline().iterator();
    assertSame(handler1,handlers.next().getValue());
    assertSame(handler2,handlers.next().getValue());
    assertSame(handler3,handlers.next().getValue());
    assertSame(handler4,handlers.next().getValue());
    assertFalse(handlers.hasNext());
  }
  finally {
    channel.close().syncUninterruptibly();
  }
}
