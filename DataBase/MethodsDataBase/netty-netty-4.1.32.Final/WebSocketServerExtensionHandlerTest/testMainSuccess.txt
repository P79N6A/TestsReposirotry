@Test public void testMainSuccess(){
  when(mainHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("main"))).thenReturn(mainExtensionMock);
  when(mainHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("fallback"))).thenReturn(null);
  when(fallbackHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("fallback"))).thenReturn(fallbackExtensionMock);
  when(fallbackHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("main"))).thenReturn(null);
  when(mainExtensionMock.rsv()).thenReturn(WebSocketExtension.RSV1);
  when(mainExtensionMock.newReponseData()).thenReturn(new WebSocketExtensionData("main",Collections.<String,String>emptyMap()));
  when(mainExtensionMock.newExtensionEncoder()).thenReturn(new DummyEncoder());
  when(mainExtensionMock.newExtensionDecoder()).thenReturn(new DummyDecoder());
  when(fallbackExtensionMock.rsv()).thenReturn(WebSocketExtension.RSV1);
  EmbeddedChannel ch=new EmbeddedChannel(new WebSocketServerExtensionHandler(mainHandshakerMock,fallbackHandshakerMock));
  HttpRequest req=newUpgradeRequest("main, fallback");
  ch.writeInbound(req);
  HttpResponse res=newUpgradeResponse(null);
  ch.writeOutbound(res);
  HttpResponse res2=ch.readOutbound();
  List<WebSocketExtensionData> resExts=WebSocketExtensionUtil.extractExtensions(res2.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
  assertEquals(1,resExts.size());
  assertEquals("main",resExts.get(0).name());
  assertTrue(resExts.get(0).parameters().isEmpty());
  assertNotNull(ch.pipeline().get(DummyDecoder.class));
  assertNotNull(ch.pipeline().get(DummyEncoder.class));
  verify(mainHandshakerMock,atLeastOnce()).handshakeExtension(webSocketExtensionDataMatcher("main"));
  verify(mainHandshakerMock,atLeastOnce()).handshakeExtension(webSocketExtensionDataMatcher("fallback"));
  verify(fallbackHandshakerMock,atLeastOnce()).handshakeExtension(webSocketExtensionDataMatcher("fallback"));
  verify(mainExtensionMock,atLeastOnce()).rsv();
  verify(mainExtensionMock).newReponseData();
  verify(mainExtensionMock).newExtensionEncoder();
  verify(mainExtensionMock).newExtensionDecoder();
  verify(fallbackExtensionMock,atLeastOnce()).rsv();
}
