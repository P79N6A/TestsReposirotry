@Test(timeout=3000) public void testStopTimer() throws InterruptedException {
  final CountDownLatch latch=new CountDownLatch(3);
  final Timer timerProcessed=new HashedWheelTimer();
  for (int i=0; i < 3; i++) {
    timerProcessed.newTimeout(new TimerTask(){
      @Override public void run(      final Timeout timeout) throws Exception {
        latch.countDown();
      }
    }
,1,TimeUnit.MILLISECONDS);
  }
  latch.await();
  assertEquals("Number of unprocessed timeouts should be 0",0,timerProcessed.stop().size());
  final Timer timerUnprocessed=new HashedWheelTimer();
  for (int i=0; i < 5; i++) {
    timerUnprocessed.newTimeout(new TimerTask(){
      @Override public void run(      Timeout timeout) throws Exception {
      }
    }
,5,TimeUnit.SECONDS);
  }
  Thread.sleep(1000L);
  assertFalse("Number of unprocessed timeouts should be greater than 0",timerUnprocessed.stop().isEmpty());
}
