@Test public void testExecutionOnTime() throws InterruptedException {
  int tickDuration=200;
  int timeout=125;
  int maxTimeout=2 * (tickDuration + timeout);
  final HashedWheelTimer timer=new HashedWheelTimer(tickDuration,TimeUnit.MILLISECONDS);
  final BlockingQueue<Long> queue=new LinkedBlockingQueue<Long>();
  int scheduledTasks=100000;
  for (int i=0; i < scheduledTasks; i++) {
    final long start=System.nanoTime();
    timer.newTimeout(new TimerTask(){
      @Override public void run(      final Timeout timeout) throws Exception {
        queue.add(TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start));
      }
    }
,timeout,TimeUnit.MILLISECONDS);
  }
  for (int i=0; i < scheduledTasks; i++) {
    long delay=queue.take();
    assertTrue("Timeout + " + scheduledTasks + " delay "+ delay+ " must be "+ timeout+ " < "+ maxTimeout,delay >= timeout && delay < maxTimeout);
  }
  timer.stop();
}
