@Test public void test_PipelineKeepAlive(){
  FullHttpRequest firstRequest=new DefaultFullHttpRequest(httpVersion,HttpMethod.GET,"/v1/foo/bar");
  setKeepAlive(firstRequest,true);
  FullHttpRequest secondRequest=new DefaultFullHttpRequest(httpVersion,HttpMethod.GET,"/v1/foo/bar");
  setKeepAlive(secondRequest,REQUEST_KEEP_ALIVE.equals(sendKeepAlive));
  FullHttpRequest finalRequest=new DefaultFullHttpRequest(httpVersion,HttpMethod.GET,"/v1/foo/bar");
  setKeepAlive(finalRequest,false);
  FullHttpResponse response=new DefaultFullHttpResponse(httpVersion,responseStatus);
  FullHttpResponse informationalResp=new DefaultFullHttpResponse(httpVersion,HttpResponseStatus.PROCESSING);
  setKeepAlive(response,true);
  setContentLength(response,0);
  setKeepAlive(informationalResp,true);
  assertTrue(channel.writeInbound(firstRequest,secondRequest,finalRequest));
  Object requestForwarded=channel.readInbound();
  assertEquals(firstRequest,requestForwarded);
  ReferenceCountUtil.release(requestForwarded);
  channel.writeAndFlush(response.retainedDuplicate());
  HttpResponse firstResponse=channel.readOutbound();
  assertTrue("channel.isOpen",channel.isOpen());
  assertTrue("response keep-alive",isKeepAlive(firstResponse));
  ReferenceCountUtil.release(firstResponse);
  requestForwarded=channel.readInbound();
  assertEquals(secondRequest,requestForwarded);
  ReferenceCountUtil.release(requestForwarded);
  channel.writeAndFlush(informationalResp);
  HttpResponse writtenInfoResp=channel.readOutbound();
  assertTrue("channel.isOpen",channel.isOpen());
  assertTrue("response keep-alive",isKeepAlive(writtenInfoResp));
  ReferenceCountUtil.release(writtenInfoResp);
  if (!StringUtil.isNullOrEmpty(setResponseConnection)) {
    response.headers().set(HttpHeaderNames.CONNECTION,setResponseConnection);
  }
 else {
    response.headers().remove(HttpHeaderNames.CONNECTION);
  }
  setupMessageLength(response);
  channel.writeAndFlush(response.retainedDuplicate());
  HttpResponse secondResponse=channel.readOutbound();
  assertEquals("channel.isOpen",isKeepAliveResponseExpected,channel.isOpen());
  assertEquals("response keep-alive",isKeepAliveResponseExpected,isKeepAlive(secondResponse));
  ReferenceCountUtil.release(secondResponse);
  requestForwarded=channel.readInbound();
  assertEquals(finalRequest,requestForwarded);
  ReferenceCountUtil.release(requestForwarded);
  if (isKeepAliveResponseExpected) {
    channel.writeAndFlush(response);
    HttpResponse finalResponse=channel.readOutbound();
    assertFalse("channel.isOpen",channel.isOpen());
    assertFalse("response keep-alive",isKeepAlive(finalResponse));
  }
  ReferenceCountUtil.release(response);
  assertFalse(channel.finishAndReleaseAll());
}
