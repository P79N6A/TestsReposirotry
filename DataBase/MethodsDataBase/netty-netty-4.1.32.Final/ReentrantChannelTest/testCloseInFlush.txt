@Test public void testCloseInFlush() throws Exception {
  LocalAddress addr=new LocalAddress("testCloseInFlush");
  ServerBootstrap sb=getLocalServerBootstrap();
  sb.bind(addr).sync().channel();
  Bootstrap cb=getLocalClientBootstrap();
  setInterest(Event.WRITE,Event.FLUSH,Event.CLOSE,Event.EXCEPTION);
  Channel clientChannel=cb.connect(addr).sync().channel();
  clientChannel.pipeline().addLast(new ChannelOutboundHandlerAdapter(){
    @Override public void write(    final ChannelHandlerContext ctx,    Object msg,    ChannelPromise promise) throws Exception {
      promise.addListener(new GenericFutureListener<Future<? super Void>>(){
        @Override public void operationComplete(        Future<? super Void> future) throws Exception {
          ctx.channel().close();
        }
      }
);
      super.write(ctx,msg,promise);
      ctx.channel().flush();
    }
  }
);
  clientChannel.write(createTestBuf(2000)).sync();
  clientChannel.closeFuture().sync();
  assertLog("WRITE\nFLUSH\nCLOSE\n");
}
