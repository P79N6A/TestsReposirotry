/** 
 * Similar to  {@link #testWritabilityChanged()} with slight variation.
 */
@Test public void testFlushInWritabilityChanged() throws Exception {
  LocalAddress addr=new LocalAddress("testFlushInWritabilityChanged");
  ServerBootstrap sb=getLocalServerBootstrap();
  sb.bind(addr).sync().channel();
  Bootstrap cb=getLocalClientBootstrap();
  setInterest(Event.WRITE,Event.FLUSH,Event.WRITABILITY);
  Channel clientChannel=cb.connect(addr).sync().channel();
  clientChannel.config().setWriteBufferLowWaterMark(512);
  clientChannel.config().setWriteBufferHighWaterMark(1024);
  clientChannel.pipeline().addLast(new ChannelInboundHandlerAdapter(){
    @Override public void channelWritabilityChanged(    ChannelHandlerContext ctx) throws Exception {
      if (!ctx.channel().isWritable()) {
        ctx.channel().flush();
      }
      ctx.fireChannelWritabilityChanged();
    }
  }
);
  assertTrue(clientChannel.isWritable());
  clientChannel.write(createTestBuf(2000)).sync();
  clientChannel.close().sync();
  assertLog("WRITABILITY: writable=false\n" + "FLUSH\n" + "WRITE\n"+ "WRITABILITY: writable=false\n"+ "WRITABILITY: writable=false\n"+ "FLUSH\n"+ "WRITABILITY: writable=true\n","WRITABILITY: writable=false\n" + "FLUSH\n" + "WRITE\n"+ "WRITABILITY: writable=false\n"+ "FLUSH\n"+ "WRITABILITY: writable=true\n"+ "WRITABILITY: writable=true\n");
}
