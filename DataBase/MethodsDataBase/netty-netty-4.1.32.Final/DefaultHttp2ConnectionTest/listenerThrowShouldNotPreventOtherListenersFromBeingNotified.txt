/** 
 * We force  {@link #clientListener} methods to all throw a {@link RuntimeException} and verify the following:<ol> <li>all listener methods are called for both  {@link #clientListener} and {@link #clientListener2}</li> <li> {@link #clientListener2} is notified after {@link #clientListener}</li> <li> {@link #clientListener2} methods are all still called despite {@link #clientListener}'s method throwing a  {@link RuntimeException}</li> </ol>
 */
@Test public void listenerThrowShouldNotPreventOtherListenersFromBeingNotified() throws Http2Exception {
  final boolean[] calledArray=new boolean[128];
  int methodIndex=0;
  doAnswer(new ListenerExceptionThrower(calledArray,methodIndex)).when(clientListener).onStreamAdded(any(Http2Stream.class));
  doAnswer(new ListenerVerifyCallAnswer(calledArray,methodIndex++)).when(clientListener2).onStreamAdded(any(Http2Stream.class));
  doAnswer(new ListenerExceptionThrower(calledArray,methodIndex)).when(clientListener).onStreamActive(any(Http2Stream.class));
  doAnswer(new ListenerVerifyCallAnswer(calledArray,methodIndex++)).when(clientListener2).onStreamActive(any(Http2Stream.class));
  doAnswer(new ListenerExceptionThrower(calledArray,methodIndex)).when(clientListener).onStreamHalfClosed(any(Http2Stream.class));
  doAnswer(new ListenerVerifyCallAnswer(calledArray,methodIndex++)).when(clientListener2).onStreamHalfClosed(any(Http2Stream.class));
  doAnswer(new ListenerExceptionThrower(calledArray,methodIndex)).when(clientListener).onStreamClosed(any(Http2Stream.class));
  doAnswer(new ListenerVerifyCallAnswer(calledArray,methodIndex++)).when(clientListener2).onStreamClosed(any(Http2Stream.class));
  doAnswer(new ListenerExceptionThrower(calledArray,methodIndex)).when(clientListener).onStreamRemoved(any(Http2Stream.class));
  doAnswer(new ListenerVerifyCallAnswer(calledArray,methodIndex++)).when(clientListener2).onStreamRemoved(any(Http2Stream.class));
  doAnswer(new ListenerExceptionThrower(calledArray,methodIndex)).when(clientListener).onGoAwaySent(anyInt(),anyLong(),any(ByteBuf.class));
  doAnswer(new ListenerVerifyCallAnswer(calledArray,methodIndex++)).when(clientListener2).onGoAwaySent(anyInt(),anyLong(),any(ByteBuf.class));
  doAnswer(new ListenerExceptionThrower(calledArray,methodIndex)).when(clientListener).onGoAwayReceived(anyInt(),anyLong(),any(ByteBuf.class));
  doAnswer(new ListenerVerifyCallAnswer(calledArray,methodIndex++)).when(clientListener2).onGoAwayReceived(anyInt(),anyLong(),any(ByteBuf.class));
  doAnswer(new ListenerExceptionThrower(calledArray,methodIndex)).when(clientListener).onStreamAdded(any(Http2Stream.class));
  doAnswer(new ListenerVerifyCallAnswer(calledArray,methodIndex++)).when(clientListener2).onStreamAdded(any(Http2Stream.class));
  try {
    client.addListener(clientListener2);
    Http2Stream stream=client.local().createStream(3,false);
    verify(clientListener).onStreamAdded(any(Http2Stream.class));
    verify(clientListener2).onStreamAdded(any(Http2Stream.class));
    verify(clientListener).onStreamActive(any(Http2Stream.class));
    verify(clientListener2).onStreamActive(any(Http2Stream.class));
    Http2Stream reservedStream=client.remote().reservePushStream(2,stream);
    verify(clientListener,never()).onStreamActive(streamEq(reservedStream));
    verify(clientListener2,never()).onStreamActive(streamEq(reservedStream));
    reservedStream.open(false);
    verify(clientListener).onStreamActive(streamEq(reservedStream));
    verify(clientListener2).onStreamActive(streamEq(reservedStream));
    stream.closeLocalSide();
    verify(clientListener).onStreamHalfClosed(any(Http2Stream.class));
    verify(clientListener2).onStreamHalfClosed(any(Http2Stream.class));
    stream.close();
    verify(clientListener).onStreamClosed(any(Http2Stream.class));
    verify(clientListener2).onStreamClosed(any(Http2Stream.class));
    verify(clientListener).onStreamRemoved(any(Http2Stream.class));
    verify(clientListener2).onStreamRemoved(any(Http2Stream.class));
    client.goAwaySent(client.connectionStream().id(),Http2Error.INTERNAL_ERROR.code(),Unpooled.EMPTY_BUFFER);
    verify(clientListener).onGoAwaySent(anyInt(),anyLong(),any(ByteBuf.class));
    verify(clientListener2).onGoAwaySent(anyInt(),anyLong(),any(ByteBuf.class));
    client.goAwayReceived(client.connectionStream().id(),Http2Error.INTERNAL_ERROR.code(),Unpooled.EMPTY_BUFFER);
    verify(clientListener).onGoAwayReceived(anyInt(),anyLong(),any(ByteBuf.class));
    verify(clientListener2).onGoAwayReceived(anyInt(),anyLong(),any(ByteBuf.class));
  }
  finally {
    client.removeListener(clientListener2);
  }
}
