@Test public void removeAllStreamsWhileIteratingActiveStreams() throws InterruptedException, Http2Exception {
  final Endpoint<Http2RemoteFlowController> remote=client.remote();
  final Endpoint<Http2LocalFlowController> local=client.local();
  for (int c=3, s=2; c < 5000; c+=2, s+=2) {
    local.createStream(c,false);
    remote.createStream(s,false);
  }
  final Promise<Void> promise=group.next().newPromise();
  final CountDownLatch latch=new CountDownLatch(client.numActiveStreams());
  client.forEachActiveStream(new Http2StreamVisitor(){
    @Override public boolean visit(    Http2Stream stream){
      client.close(promise).addListener(new FutureListener<Void>(){
        @Override public void operationComplete(        Future<Void> future) throws Exception {
          assertTrue(promise.isDone());
          latch.countDown();
        }
      }
);
      return true;
    }
  }
);
  assertTrue(latch.await(5,TimeUnit.SECONDS));
}
