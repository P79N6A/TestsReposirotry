@Test public void testEncodeHttpsSchemeWhenSslHandlerExists() throws Exception {
  final Queue<Http2StreamFrame> frames=new ConcurrentLinkedQueue<Http2StreamFrame>();
  final SslContext ctx=SslContextBuilder.forClient().sslProvider(SslProvider.JDK).build();
  EmbeddedChannel ch=new EmbeddedChannel(ctx.newHandler(ByteBufAllocator.DEFAULT),new ChannelOutboundHandlerAdapter(){
    @Override public void write(    ChannelHandlerContext ctx,    Object msg,    ChannelPromise promise) throws Exception {
      if (msg instanceof Http2StreamFrame) {
        frames.add((Http2StreamFrame)msg);
        ctx.write(Unpooled.EMPTY_BUFFER,promise);
      }
 else {
        ctx.write(msg,promise);
      }
    }
  }
,new Http2StreamFrameToHttpObjectCodec(false));
  try {
    FullHttpRequest req=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,"/hello/world");
    assertTrue(ch.writeOutbound(req));
    ch.finishAndReleaseAll();
    Http2HeadersFrame headersFrame=(Http2HeadersFrame)frames.poll();
    Http2Headers headers=headersFrame.headers();
    assertThat(headers.scheme().toString(),is("https"));
    assertThat(headers.method().toString(),is("GET"));
    assertThat(headers.path().toString(),is("/hello/world"));
    assertTrue(headersFrame.isEndStream());
    assertNull(frames.poll());
  }
  finally {
    ch.finishAndReleaseAll();
  }
}
