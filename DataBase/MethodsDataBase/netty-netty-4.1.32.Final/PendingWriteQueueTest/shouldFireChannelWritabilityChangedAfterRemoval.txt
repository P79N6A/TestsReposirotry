@Test public void shouldFireChannelWritabilityChangedAfterRemoval(){
  final AtomicReference<ChannelHandlerContext> ctxRef=new AtomicReference<ChannelHandlerContext>();
  final AtomicReference<PendingWriteQueue> queueRef=new AtomicReference<PendingWriteQueue>();
  final ByteBuf msg=Unpooled.copiedBuffer("test",CharsetUtil.US_ASCII);
  final EmbeddedChannel channel=new EmbeddedChannel(new ChannelInboundHandlerAdapter(){
    @Override public void handlerAdded(    ChannelHandlerContext ctx) throws Exception {
      ctxRef.set(ctx);
      queueRef.set(new PendingWriteQueue(ctx));
    }
    @Override public void channelWritabilityChanged(    ChannelHandlerContext ctx) throws Exception {
      final PendingWriteQueue queue=queueRef.get();
      final ByteBuf msg=(ByteBuf)queue.current();
      if (msg == null) {
        return;
      }
      assertThat(msg.refCnt(),is(1));
      queue.remove();
      assertThat(msg.refCnt(),is(0));
    }
  }
);
  channel.config().setWriteBufferLowWaterMark(1);
  channel.config().setWriteBufferHighWaterMark(3);
  final PendingWriteQueue queue=queueRef.get();
  queue.add(msg,channel.newPromise());
  channel.finish();
  assertThat(msg.refCnt(),is(0));
}
