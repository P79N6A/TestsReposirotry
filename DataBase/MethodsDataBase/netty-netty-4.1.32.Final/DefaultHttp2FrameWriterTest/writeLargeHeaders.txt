/** 
 * Test large headers that exceed  {@link DefaultHttp2FrameWriter#maxFrameSize}the remaining headers will be sent in a CONTINUATION frame
 */
@Test public void writeLargeHeaders() throws Exception {
  int streamId=1;
  Http2Headers headers=new DefaultHttp2Headers().method("GET").path("/").authority("foo.com").scheme("https");
  headers=dummyHeaders(headers,20);
  http2HeadersEncoder.configuration().maxHeaderListSize(Integer.MAX_VALUE);
  frameWriter.headersConfiguration().maxHeaderListSize(Integer.MAX_VALUE);
  frameWriter.maxFrameSize(Http2CodecUtil.MAX_FRAME_SIZE_LOWER_BOUND);
  frameWriter.writeHeaders(ctx,streamId,headers,0,true,promise);
  byte[] expectedPayload=headerPayload(streamId,headers);
  assertEquals(Http2CodecUtil.MAX_FRAME_SIZE_LOWER_BOUND,outbound.readUnsignedMedium());
  assertEquals(0x01,outbound.readByte());
  assertEquals(0x01,outbound.readByte());
  assertEquals(streamId,outbound.readInt());
  byte[] firstPayload=new byte[Http2CodecUtil.MAX_FRAME_SIZE_LOWER_BOUND];
  outbound.readBytes(firstPayload);
  int remainPayloadLength=expectedPayload.length - Http2CodecUtil.MAX_FRAME_SIZE_LOWER_BOUND;
  assertEquals(remainPayloadLength,outbound.readUnsignedMedium());
  assertEquals(0x09,outbound.readByte());
  assertEquals(0x04,outbound.readByte());
  assertEquals(streamId,outbound.readInt());
  byte[] secondPayload=new byte[remainPayloadLength];
  outbound.readBytes(secondPayload);
  assertArrayEquals(Arrays.copyOfRange(expectedPayload,0,firstPayload.length),firstPayload);
  assertArrayEquals(Arrays.copyOfRange(expectedPayload,firstPayload.length,expectedPayload.length),secondPayload);
}
