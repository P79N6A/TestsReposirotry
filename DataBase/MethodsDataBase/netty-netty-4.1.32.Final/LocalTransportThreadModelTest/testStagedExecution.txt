@Test(timeout=5000) public void testStagedExecution() throws Throwable {
  EventLoopGroup l=new DefaultEventLoopGroup(4,new DefaultThreadFactory("l"));
  EventExecutorGroup e1=new DefaultEventExecutorGroup(4,new DefaultThreadFactory("e1"));
  EventExecutorGroup e2=new DefaultEventExecutorGroup(4,new DefaultThreadFactory("e2"));
  ThreadNameAuditor h1=new ThreadNameAuditor();
  ThreadNameAuditor h2=new ThreadNameAuditor();
  ThreadNameAuditor h3=new ThreadNameAuditor(true);
  Channel ch=new LocalChannel();
  ch.pipeline().addLast(h1);
  ch.pipeline().addLast(e1,h2);
  ch.pipeline().addLast(e2,h3);
  l.register(ch).sync().channel().connect(localAddr).sync();
  ch.pipeline().fireChannelRead("1");
  ch.pipeline().context(h1).fireChannelRead("2");
  ch.pipeline().context(h2).fireChannelRead("3");
  ch.pipeline().context(h3).fireChannelRead("4");
  ch.pipeline().write("5");
  ch.pipeline().context(h3).write("6");
  ch.pipeline().context(h2).write("7");
  ch.pipeline().context(h1).writeAndFlush("8").sync();
  ch.close().sync();
  while (h1.outboundThreadNames.size() < 3 || h3.inboundThreadNames.size() < 3 || h1.removalThreadNames.size() < 1) {
    if (h1.exception.get() != null) {
      throw h1.exception.get();
    }
    if (h2.exception.get() != null) {
      throw h2.exception.get();
    }
    if (h3.exception.get() != null) {
      throw h3.exception.get();
    }
    Thread.sleep(10);
  }
  String currentName=Thread.currentThread().getName();
  try {
    Assert.assertFalse(h1.inboundThreadNames.contains(currentName));
    Assert.assertFalse(h2.inboundThreadNames.contains(currentName));
    Assert.assertFalse(h3.inboundThreadNames.contains(currentName));
    Assert.assertFalse(h1.outboundThreadNames.contains(currentName));
    Assert.assertFalse(h2.outboundThreadNames.contains(currentName));
    Assert.assertFalse(h3.outboundThreadNames.contains(currentName));
    Assert.assertFalse(h1.removalThreadNames.contains(currentName));
    Assert.assertFalse(h2.removalThreadNames.contains(currentName));
    Assert.assertFalse(h3.removalThreadNames.contains(currentName));
    for (    String name : h1.inboundThreadNames) {
      Assert.assertTrue(name.startsWith("l-"));
    }
    for (    String name : h2.inboundThreadNames) {
      Assert.assertTrue(name.startsWith("e1-"));
    }
    for (    String name : h3.inboundThreadNames) {
      Assert.assertTrue(name.startsWith("e2-"));
    }
    for (    String name : h1.outboundThreadNames) {
      Assert.assertTrue(name.startsWith("l-"));
    }
    for (    String name : h2.outboundThreadNames) {
      Assert.assertTrue(name.startsWith("e1-"));
    }
    for (    String name : h3.outboundThreadNames) {
      Assert.assertTrue(name.startsWith("e2-"));
    }
    for (    String name : h1.removalThreadNames) {
      Assert.assertTrue(name.startsWith("l-"));
    }
    for (    String name : h2.removalThreadNames) {
      Assert.assertTrue(name.startsWith("e1-"));
    }
    for (    String name : h3.removalThreadNames) {
      Assert.assertTrue(name.startsWith("e2-"));
    }
    Set<String> names=new HashSet<String>();
    names.addAll(h1.inboundThreadNames);
    names.addAll(h1.outboundThreadNames);
    names.addAll(h1.removalThreadNames);
    Assert.assertEquals(1,names.size());
    names.clear();
    names.addAll(h2.inboundThreadNames);
    names.addAll(h2.outboundThreadNames);
    names.addAll(h2.removalThreadNames);
    Assert.assertEquals(1,names.size());
    names.clear();
    names.addAll(h3.inboundThreadNames);
    names.addAll(h3.outboundThreadNames);
    names.addAll(h3.removalThreadNames);
    Assert.assertEquals(1,names.size());
    Assert.assertEquals(1,h1.inboundThreadNames.size());
    Assert.assertEquals(2,h2.inboundThreadNames.size());
    Assert.assertEquals(3,h3.inboundThreadNames.size());
    Assert.assertEquals(3,h1.outboundThreadNames.size());
    Assert.assertEquals(2,h2.outboundThreadNames.size());
    Assert.assertEquals(1,h3.outboundThreadNames.size());
    Assert.assertEquals(1,h1.removalThreadNames.size());
    Assert.assertEquals(1,h2.removalThreadNames.size());
    Assert.assertEquals(1,h3.removalThreadNames.size());
  }
 catch (  AssertionError e) {
    System.out.println("H1I: " + h1.inboundThreadNames);
    System.out.println("H2I: " + h2.inboundThreadNames);
    System.out.println("H3I: " + h3.inboundThreadNames);
    System.out.println("H1O: " + h1.outboundThreadNames);
    System.out.println("H2O: " + h2.outboundThreadNames);
    System.out.println("H3O: " + h3.outboundThreadNames);
    System.out.println("H1R: " + h1.removalThreadNames);
    System.out.println("H2R: " + h2.removalThreadNames);
    System.out.println("H3R: " + h3.removalThreadNames);
    throw e;
  }
 finally {
    l.shutdownGracefully();
    e1.shutdownGracefully();
    e2.shutdownGracefully();
    l.terminationFuture().sync();
    e1.terminationFuture().sync();
    e2.terminationFuture().sync();
  }
}
