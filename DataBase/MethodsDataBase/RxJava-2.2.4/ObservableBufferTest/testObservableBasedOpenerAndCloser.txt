@Test public void testObservableBasedOpenerAndCloser(){
  Observable<String> source=Observable.unsafeCreate(new ObservableSource<String>(){
    @Override public void subscribe(    Observer<? super String> observer){
      observer.onSubscribe(Disposables.empty());
      push(observer,"one",10);
      push(observer,"two",60);
      push(observer,"three",110);
      push(observer,"four",160);
      push(observer,"five",210);
      complete(observer,500);
    }
  }
);
  Observable<Object> openings=Observable.unsafeCreate(new ObservableSource<Object>(){
    @Override public void subscribe(    Observer<Object> observer){
      observer.onSubscribe(Disposables.empty());
      push(observer,new Object(),50);
      push(observer,new Object(),200);
      complete(observer,250);
    }
  }
);
  Function<Object,Observable<Object>> closer=new Function<Object,Observable<Object>>(){
    @Override public Observable<Object> apply(    Object opening){
      return Observable.unsafeCreate(new ObservableSource<Object>(){
        @Override public void subscribe(        Observer<? super Object> observer){
          observer.onSubscribe(Disposables.empty());
          push(observer,new Object(),100);
          complete(observer,101);
        }
      }
);
    }
  }
;
  Observable<List<String>> buffered=source.buffer(openings,closer);
  buffered.subscribe(observer);
  InOrder inOrder=Mockito.inOrder(observer);
  scheduler.advanceTimeTo(500,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,Mockito.times(1)).onNext(list("two","three"));
  inOrder.verify(observer,Mockito.times(1)).onNext(list("five"));
  inOrder.verify(observer,Mockito.never()).onNext(Mockito.<String>anyList());
  inOrder.verify(observer,Mockito.never()).onError(Mockito.any(Throwable.class));
  inOrder.verify(observer,Mockito.times(1)).onComplete();
}
