@Test public void doubleOnSubscribe(){
  TestHelper.checkDoubleOnSubscribeFlowable(new Function<Flowable<Integer>,Flowable<ArrayList<Integer>>>(){
    @Override public Flowable<ArrayList<Integer>> apply(    Flowable<Integer> f) throws Exception {
      return f.collect(Functions.justCallable(new ArrayList<Integer>()),new BiConsumer<ArrayList<Integer>,Integer>(){
        @Override public void accept(        ArrayList<Integer> a,        Integer b) throws Exception {
          a.add(b);
        }
      }
).toFlowable();
    }
  }
);
  TestHelper.checkDoubleOnSubscribeFlowableToSingle(new Function<Flowable<Integer>,Single<ArrayList<Integer>>>(){
    @Override public Single<ArrayList<Integer>> apply(    Flowable<Integer> f) throws Exception {
      return f.collect(Functions.justCallable(new ArrayList<Integer>()),new BiConsumer<ArrayList<Integer>,Integer>(){
        @Override public void accept(        ArrayList<Integer> a,        Integer b) throws Exception {
          a.add(b);
        }
      }
);
    }
  }
);
}
