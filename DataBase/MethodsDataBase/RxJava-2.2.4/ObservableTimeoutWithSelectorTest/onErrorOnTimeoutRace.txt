@Test public void onErrorOnTimeoutRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final PublishSubject<Integer> ps=PublishSubject.create();
      final Observer<?>[] sub={null,null};
      final Observable<Integer> pp2=new Observable<Integer>(){
        int count;
        @Override protected void subscribeActual(        Observer<? super Integer> observer){
          assertFalse(((Disposable)observer).isDisposed());
          observer.onSubscribe(Disposables.empty());
          sub[count++]=observer;
        }
      }
;
      TestObserver<Integer> to=ps.timeout(Functions.justFunction(pp2)).test();
      ps.onNext(0);
      final Throwable ex=new TestException();
      Runnable r1=new Runnable(){
        @Override public void run(){
          ps.onError(ex);
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          sub[0].onComplete();
        }
      }
;
      TestHelper.race(r1,r2);
      to.assertValueAt(0,0);
      if (!errors.isEmpty()) {
        TestHelper.assertUndeliverable(errors,0,TestException.class);
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
