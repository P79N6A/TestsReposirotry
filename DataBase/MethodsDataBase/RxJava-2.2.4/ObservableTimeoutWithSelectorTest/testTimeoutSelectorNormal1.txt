@Test(timeout=2000) public void testTimeoutSelectorNormal1(){
  PublishSubject<Integer> source=PublishSubject.create();
  final PublishSubject<Integer> timeout=PublishSubject.create();
  Function<Integer,Observable<Integer>> timeoutFunc=new Function<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Integer t1){
      return timeout;
    }
  }
;
  Observable<Integer> other=Observable.fromIterable(Arrays.asList(100));
  Observer<Object> o=TestHelper.mockObserver();
  InOrder inOrder=inOrder(o);
  source.timeout(timeout,timeoutFunc,other).subscribe(o);
  source.onNext(1);
  source.onNext(2);
  source.onNext(3);
  timeout.onNext(1);
  inOrder.verify(o).onNext(1);
  inOrder.verify(o).onNext(2);
  inOrder.verify(o).onNext(3);
  inOrder.verify(o).onNext(100);
  inOrder.verify(o).onComplete();
  verify(o,never()).onError(any(Throwable.class));
}
