@Test public void disposedUpfrontFallback(){
  PublishSubject<Object> ps=PublishSubject.create();
  final AtomicInteger counter=new AtomicInteger();
  Observable<Object> timeoutAndFallback=Observable.never().doOnSubscribe(new Consumer<Disposable>(){
    @Override public void accept(    Disposable d) throws Exception {
      counter.incrementAndGet();
    }
  }
);
  ps.timeout(timeoutAndFallback,Functions.justFunction(timeoutAndFallback),timeoutAndFallback).test(true).assertEmpty();
  assertEquals(0,counter.get());
}
