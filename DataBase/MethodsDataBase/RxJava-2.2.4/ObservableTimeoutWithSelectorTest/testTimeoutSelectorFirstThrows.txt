@Test public void testTimeoutSelectorFirstThrows(){
  Observable<Integer> source=Observable.<Integer>never();
  final PublishSubject<Integer> timeout=PublishSubject.create();
  Function<Integer,Observable<Integer>> timeoutFunc=new Function<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Integer t1){
      return timeout;
    }
  }
;
  Callable<Observable<Integer>> firstTimeoutFunc=new Callable<Observable<Integer>>(){
    @Override public Observable<Integer> call(){
      throw new TestException();
    }
  }
;
  Observable<Integer> other=Observable.fromIterable(Arrays.asList(100));
  Observer<Object> o=TestHelper.mockObserver();
  source.timeout(Observable.defer(firstTimeoutFunc),timeoutFunc,other).subscribe(o);
  verify(o).onError(any(TestException.class));
  verify(o,never()).onNext(any());
  verify(o,never()).onComplete();
}
