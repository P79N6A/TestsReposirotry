@Test public void testMaxConcurrent(){
  for (int times=0; times < 100; times++) {
    int observableCount=100;
    int maxConcurrent=2 + (times % 10);
    AtomicInteger subscriptionCount=new AtomicInteger(0);
    List<Observable<String>> os=new ArrayList<Observable<String>>();
    List<SubscriptionCheckObservable> scos=new ArrayList<SubscriptionCheckObservable>();
    for (int i=0; i < observableCount; i++) {
      SubscriptionCheckObservable sco=new SubscriptionCheckObservable(subscriptionCount,maxConcurrent);
      scos.add(sco);
      os.add(Observable.unsafeCreate(sco));
    }
    Iterator<String> iter=Observable.merge(os,maxConcurrent).blockingIterable().iterator();
    List<String> actual=new ArrayList<String>();
    while (iter.hasNext()) {
      actual.add(iter.next());
    }
    assertEquals(5 * observableCount,actual.size());
    for (    SubscriptionCheckObservable sco : scos) {
      assertFalse(sco.failed);
    }
  }
}
