@Test public void testResumeNextWithRuntimeException(){
  TestObservable f=new TestObservable("one","RUNTIMEEXCEPTION","two","three");
  Observable<String> w=Observable.unsafeCreate(f);
  Observable<String> resume=Observable.just("twoResume","threeResume");
  Observable<String> observable=w.onExceptionResumeNext(resume);
  Observer<String> observer=TestHelper.mockObserver();
  observable.subscribe(observer);
  try {
    f.t.join();
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
  verify(observer).onSubscribe((Disposable)any());
  verify(observer,times(1)).onNext("one");
  verify(observer,Mockito.never()).onNext("two");
  verify(observer,Mockito.never()).onNext("three");
  verify(observer,times(1)).onNext("twoResume");
  verify(observer,times(1)).onNext("threeResume");
  verify(observer,Mockito.never()).onError(any(Throwable.class));
  verify(observer,times(1)).onComplete();
  verifyNoMoreInteractions(observer);
}
