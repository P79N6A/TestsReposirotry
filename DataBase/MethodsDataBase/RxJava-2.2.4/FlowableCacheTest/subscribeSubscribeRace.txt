@Test public void subscribeSubscribeRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final Flowable<Integer> cache=Flowable.range(1,500).cache();
    final TestSubscriber<Integer> ts1=new TestSubscriber<Integer>();
    final TestSubscriber<Integer> ts2=new TestSubscriber<Integer>();
    Runnable r1=new Runnable(){
      @Override public void run(){
        cache.subscribe(ts1);
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        cache.subscribe(ts2);
      }
    }
;
    TestHelper.race(r1,r2);
    ts1.awaitDone(5,TimeUnit.SECONDS).assertSubscribed().assertValueCount(500).assertComplete().assertNoErrors();
    ts2.awaitDone(5,TimeUnit.SECONDS).assertSubscribed().assertValueCount(500).assertComplete().assertNoErrors();
  }
}
