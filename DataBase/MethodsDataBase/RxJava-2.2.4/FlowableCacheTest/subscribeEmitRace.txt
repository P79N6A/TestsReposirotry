@Test public void subscribeEmitRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final PublishProcessor<Integer> pp=PublishProcessor.<Integer>create();
    final Flowable<Integer> cache=pp.cache();
    cache.test();
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    Runnable r1=new Runnable(){
      @Override public void run(){
        cache.subscribe(ts);
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        for (int j=0; j < 500; j++) {
          pp.onNext(j);
        }
        pp.onComplete();
      }
    }
;
    TestHelper.race(r1,r2);
    ts.awaitDone(5,TimeUnit.SECONDS).assertSubscribed().assertValueCount(500).assertComplete().assertNoErrors();
  }
}
