@Test public void testToMapWithErrorThrowingFactoryObservable(){
  Observable<String> source=Observable.just("a","bb","ccc","dddd");
  Callable<Map<Integer,String>> mapFactory=new Callable<Map<Integer,String>>(){
    @Override public Map<Integer,String> call(){
      throw new RuntimeException("Forced failure");
    }
  }
;
  Function<String,Integer> lengthFunc=new Function<String,Integer>(){
    @Override public Integer apply(    String t1){
      return t1.length();
    }
  }
;
  Observable<Map<Integer,String>> mapped=source.toMap(lengthFunc,new Function<String,String>(){
    @Override public String apply(    String v){
      return v;
    }
  }
,mapFactory).toObservable();
  Map<Integer,String> expected=new LinkedHashMap<Integer,String>();
  expected.put(2,"bb");
  expected.put(3,"ccc");
  expected.put(4,"dddd");
  mapped.subscribe(objectObserver);
  verify(objectObserver,never()).onNext(expected);
  verify(objectObserver,never()).onComplete();
  verify(objectObserver,times(1)).onError(any(Throwable.class));
}
