@Test public void testToMapWithErrorInValueSelector(){
  Observable<String> source=Observable.just("a","bb","ccc","dddd");
  Function<String,String> duplicateErr=new Function<String,String>(){
    @Override public String apply(    String t1){
      if ("bb".equals(t1)) {
        throw new RuntimeException("Forced failure");
      }
      return t1 + t1;
    }
  }
;
  Single<Map<Integer,String>> mapped=source.toMap(lengthFunc,duplicateErr);
  Map<Integer,String> expected=new HashMap<Integer,String>();
  expected.put(1,"aa");
  expected.put(2,"bbbb");
  expected.put(3,"cccccc");
  expected.put(4,"dddddddd");
  mapped.subscribe(singleObserver);
  verify(singleObserver,never()).onSuccess(expected);
  verify(singleObserver,times(1)).onError(any(Throwable.class));
}
