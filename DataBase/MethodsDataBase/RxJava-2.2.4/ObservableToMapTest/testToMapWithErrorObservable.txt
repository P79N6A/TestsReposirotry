@Test public void testToMapWithErrorObservable(){
  Observable<String> source=Observable.just("a","bb","ccc","dddd");
  Function<String,Integer> lengthFuncErr=new Function<String,Integer>(){
    @Override public Integer apply(    String t1){
      if ("bb".equals(t1)) {
        throw new RuntimeException("Forced Failure");
      }
      return t1.length();
    }
  }
;
  Observable<Map<Integer,String>> mapped=source.toMap(lengthFuncErr).toObservable();
  Map<Integer,String> expected=new HashMap<Integer,String>();
  expected.put(1,"a");
  expected.put(2,"bb");
  expected.put(3,"ccc");
  expected.put(4,"dddd");
  mapped.subscribe(objectObserver);
  verify(objectObserver,never()).onNext(expected);
  verify(objectObserver,never()).onComplete();
  verify(objectObserver,times(1)).onError(any(Throwable.class));
}
