@Test public void shouldUnsubscribeFromUnderlyingSubscriptionOnTimeout() throws InterruptedException {
  final Subscription s=mock(Subscription.class);
  Flowable<String> never=Flowable.unsafeCreate(new Publisher<String>(){
    @Override public void subscribe(    Subscriber<? super String> subscriber){
      subscriber.onSubscribe(s);
    }
  }
);
  TestScheduler testScheduler=new TestScheduler();
  Flowable<String> observableWithTimeout=never.timeout(1000,TimeUnit.MILLISECONDS,testScheduler);
  TestSubscriber<String> subscriber=new TestSubscriber<String>();
  observableWithTimeout.subscribe(subscriber);
  testScheduler.advanceTimeBy(2000,TimeUnit.MILLISECONDS);
  subscriber.assertFailureAndMessage(TimeoutException.class,timeoutMessage(1000,TimeUnit.MILLISECONDS));
  verify(s,times(1)).cancel();
}
