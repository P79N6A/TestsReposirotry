@Test @Ignore("s should be considered cancelled upon executing onComplete and not expect downstream to call cancel") public void shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyComplete(){
  final Subscription s=mock(Subscription.class);
  Flowable<String> immediatelyComplete=Flowable.unsafeCreate(new Publisher<String>(){
    @Override public void subscribe(    Subscriber<? super String> subscriber){
      subscriber.onSubscribe(s);
      subscriber.onComplete();
    }
  }
);
  TestScheduler testScheduler=new TestScheduler();
  Flowable<String> observableWithTimeout=immediatelyComplete.timeout(1000,TimeUnit.MILLISECONDS,testScheduler);
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  TestSubscriber<String> ts=new TestSubscriber<String>(subscriber);
  observableWithTimeout.subscribe(ts);
  testScheduler.advanceTimeBy(2000,TimeUnit.MILLISECONDS);
  InOrder inOrder=inOrder(subscriber);
  inOrder.verify(subscriber).onComplete();
  inOrder.verifyNoMoreInteractions();
  verify(s,times(1)).cancel();
}
