@Test public void doOnNextFailWithRetryLimitedConditional(){
  Flowable.range(0,2).parallel(1).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer v) throws Exception {
      if (1 / v < 0) {
        System.out.println("Should not happen!");
      }
    }
  }
,new BiFunction<Long,Throwable,ParallelFailureHandling>(){
    @Override public ParallelFailureHandling apply(    Long n,    Throwable e) throws Exception {
      return n < 5 ? ParallelFailureHandling.RETRY : ParallelFailureHandling.SKIP;
    }
  }
).filter(Functions.alwaysTrue()).sequential().test().assertResult(1);
}
