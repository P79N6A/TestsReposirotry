@Test public void testUnsubscribeRecursiveScheduleFromOutside() throws InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  final CountDownLatch unsubscribeLatch=new CountDownLatch(1);
  final AtomicInteger counter=new AtomicInteger();
  final Worker inner=getScheduler().createWorker();
  try {
    inner.schedule(new Runnable(){
      @Override public void run(){
        inner.schedule(new Runnable(){
          int i;
          @Override public void run(){
            System.out.println("Run: " + i++);
            if (i == 10) {
              latch.countDown();
              try {
                unsubscribeLatch.await();
              }
 catch (              InterruptedException e) {
              }
            }
            counter.incrementAndGet();
            inner.schedule(this);
          }
        }
);
      }
    }
);
    latch.await();
    inner.dispose();
    unsubscribeLatch.countDown();
    Thread.sleep(200);
    assertEquals(10,counter.get());
  }
  finally {
    inner.dispose();
  }
}
