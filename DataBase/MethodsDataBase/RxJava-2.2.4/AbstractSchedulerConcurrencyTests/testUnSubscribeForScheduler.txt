/** 
 * Make sure canceling through  {@code subscribeOn} works.Bug report: https://github.com/ReactiveX/RxJava/issues/431
 * @throws InterruptedException if the test is interrupted
 */
@Test public final void testUnSubscribeForScheduler() throws InterruptedException {
  final AtomicInteger countReceived=new AtomicInteger();
  final AtomicInteger countGenerated=new AtomicInteger();
  final CountDownLatch latch=new CountDownLatch(1);
  Flowable.interval(50,TimeUnit.MILLISECONDS).map(new Function<Long,Long>(){
    @Override public Long apply(    Long aLong){
      countGenerated.incrementAndGet();
      return aLong;
    }
  }
).subscribeOn(getScheduler()).observeOn(getScheduler()).subscribe(new DefaultSubscriber<Long>(){
    @Override public void onComplete(){
      System.out.println("--- completed");
    }
    @Override public void onError(    Throwable e){
      System.out.println("--- onError");
    }
    @Override public void onNext(    Long args){
      if (countReceived.incrementAndGet() == 2) {
        cancel();
        latch.countDown();
      }
      System.out.println("==> Received " + args);
    }
  }
);
  latch.await(1000,TimeUnit.MILLISECONDS);
  System.out.println("----------- it thinks it is finished ------------------ ");
  int timeout=10;
  while (timeout-- > 0 && countGenerated.get() != 2) {
    Thread.sleep(100);
  }
  assertEquals(2,countGenerated.get());
}
