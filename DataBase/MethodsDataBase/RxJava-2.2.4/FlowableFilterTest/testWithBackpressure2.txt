/** 
 * Make sure we are adjusting subscriber.request() for filtered items.
 * @throws InterruptedException if the test is interrupted
 */
@Test(timeout=500000) public void testWithBackpressure2() throws InterruptedException {
  Flowable<Integer> w=Flowable.range(1,Flowable.bufferSize() * 2);
  Flowable<Integer> f=w.filter(new Predicate<Integer>(){
    @Override public boolean test(    Integer t1){
      return t1 > 100;
    }
  }
);
  final CountDownLatch latch=new CountDownLatch(1);
  final TestSubscriber<Integer> ts=new TestSubscriber<Integer>(){
    @Override public void onComplete(){
      System.out.println("onComplete");
      latch.countDown();
    }
    @Override public void onError(    Throwable e){
      e.printStackTrace();
      latch.countDown();
    }
    @Override public void onNext(    Integer t){
      System.out.println("Received: " + t);
      request(1);
    }
  }
;
  ts.request(1);
  f.subscribe(ts);
  latch.await();
}
