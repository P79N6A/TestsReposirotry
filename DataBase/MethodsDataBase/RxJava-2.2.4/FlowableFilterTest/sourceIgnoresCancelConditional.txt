@Test public void sourceIgnoresCancelConditional(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    Flowable.fromPublisher(new Publisher<Integer>(){
      @Override public void subscribe(      Subscriber<? super Integer> s){
        ConditionalSubscriber<? super Integer> cs=(ConditionalSubscriber<? super Integer>)s;
        cs.onSubscribe(new BooleanSubscription());
        cs.tryOnNext(1);
        cs.tryOnNext(2);
        cs.onError(new IOException());
        cs.onComplete();
      }
    }
).filter(new Predicate<Integer>(){
      @Override public boolean test(      Integer v) throws Exception {
        return true;
      }
    }
).filter(new Predicate<Integer>(){
      @Override public boolean test(      Integer v) throws Exception {
        throw new TestException();
      }
    }
).test().assertFailure(TestException.class);
    TestHelper.assertUndeliverable(errors,0,IOException.class);
  }
  finally {
    RxJavaPlugins.reset();
  }
}
