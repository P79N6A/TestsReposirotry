/** 
 * Make sure we are adjusting subscriber.request() for filtered items.
 * @throws InterruptedException if the test is interrupted
 * @throws InterruptedException if the test is interrupted
 */
@Test(timeout=500) public void testWithBackpressure() throws InterruptedException {
  Flowable<String> w=Flowable.just("one","two","three");
  Flowable<String> f=w.filter(new Predicate<String>(){
    @Override public boolean test(    String t1){
      return t1.equals("three");
    }
  }
);
  final CountDownLatch latch=new CountDownLatch(1);
  TestSubscriber<String> ts=new TestSubscriber<String>(){
    @Override public void onComplete(){
      System.out.println("onComplete");
      latch.countDown();
    }
    @Override public void onError(    Throwable e){
      e.printStackTrace();
      latch.countDown();
    }
    @Override public void onNext(    String t){
      System.out.println("Received: " + t);
      request(1);
    }
  }
;
  ts.request(2);
  f.subscribe(ts);
  latch.await();
}
