@Test public void mapCrashesBeforeFilter(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    Flowable.fromPublisher(new Publisher<Integer>(){
      @Override public void subscribe(      Subscriber<? super Integer> s){
        s.onSubscribe(new BooleanSubscription());
        s.onNext(1);
        s.onNext(2);
        s.onError(new IOException());
        s.onComplete();
      }
    }
).map(new Function<Integer,Integer>(){
      @Override public Integer apply(      Integer v) throws Exception {
        throw new TestException();
      }
    }
).filter(new Predicate<Integer>(){
      @Override public boolean test(      Integer v) throws Exception {
        return true;
      }
    }
).test().assertFailure(TestException.class);
    TestHelper.assertUndeliverable(errors,0,IOException.class);
  }
  finally {
    RxJavaPlugins.reset();
  }
}
