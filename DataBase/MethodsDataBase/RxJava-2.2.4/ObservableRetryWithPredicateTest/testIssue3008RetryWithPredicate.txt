@Test public void testIssue3008RetryWithPredicate(){
  final List<Long> list=new CopyOnWriteArrayList<Long>();
  final AtomicBoolean isFirst=new AtomicBoolean(true);
  Observable.<Long>just(1L,2L,3L).map(new Function<Long,Long>(){
    @Override public Long apply(    Long x){
      System.out.println("map " + x);
      if (x == 2 && isFirst.getAndSet(false)) {
        throw new RuntimeException("retryable error");
      }
      return x;
    }
  }
).retry(new BiPredicate<Integer,Throwable>(){
    @Override public boolean test(    Integer t1,    Throwable t2){
      return true;
    }
  }
).forEach(new Consumer<Long>(){
    @Override public void accept(    Long t){
      System.out.println(t);
      list.add(t);
    }
  }
);
  assertEquals(Arrays.asList(1L,1L,2L,3L),list);
}
