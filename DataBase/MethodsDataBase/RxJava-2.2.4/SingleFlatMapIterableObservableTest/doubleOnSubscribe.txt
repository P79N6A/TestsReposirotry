@Test public void doubleOnSubscribe(){
  TestHelper.checkDoubleOnSubscribeSingleToObservable(new Function<Single<Object>,ObservableSource<Integer>>(){
    @Override public ObservableSource<Integer> apply(    Single<Object> o) throws Exception {
      return o.flattenAsObservable(new Function<Object,Iterable<Integer>>(){
        @Override public Iterable<Integer> apply(        Object v) throws Exception {
          return Collections.singleton(1);
        }
      }
);
    }
  }
);
}
