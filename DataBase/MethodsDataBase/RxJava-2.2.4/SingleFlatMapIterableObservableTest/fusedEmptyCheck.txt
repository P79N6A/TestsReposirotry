@Test public void fusedEmptyCheck(){
  Single.just(1).flattenAsObservable(new Function<Object,Iterable<Integer>>(){
    @Override public Iterable<Integer> apply(    Object v) throws Exception {
      return Arrays.asList(1,2,3);
    }
  }
).subscribe(new Observer<Integer>(){
    QueueDisposable<Integer> qd;
    @SuppressWarnings("unchecked") @Override public void onSubscribe(    Disposable d){
      qd=(QueueDisposable<Integer>)d;
      assertEquals(QueueFuseable.ASYNC,qd.requestFusion(QueueFuseable.ANY));
    }
    @Override public void onNext(    Integer value){
      assertFalse(qd.isEmpty());
      qd.clear();
      assertTrue(qd.isEmpty());
      qd.dispose();
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}
