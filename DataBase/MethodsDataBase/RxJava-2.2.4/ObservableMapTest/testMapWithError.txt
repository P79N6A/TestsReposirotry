@Test public void testMapWithError(){
  Observable<String> w=Observable.just("one","fail","two","three","fail");
  Observable<String> m=w.map(new Function<String,String>(){
    @Override public String apply(    String s){
      if ("fail".equals(s)) {
        throw new RuntimeException("Forced Failure");
      }
      return s;
    }
  }
).doOnError(new Consumer<Throwable>(){
    @Override public void accept(    Throwable t1){
      t1.printStackTrace();
    }
  }
);
  m.subscribe(stringObserver);
  verify(stringObserver,times(1)).onNext("one");
  verify(stringObserver,never()).onNext("two");
  verify(stringObserver,never()).onNext("three");
  verify(stringObserver,never()).onComplete();
  verify(stringObserver,times(1)).onError(any(Throwable.class));
}
