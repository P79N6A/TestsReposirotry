@Test public void testPeriodicObserverThrows(){
  Observable<Long> source=Observable.interval(100,100,TimeUnit.MILLISECONDS,scheduler);
  InOrder inOrder=inOrder(observer);
  source.safeSubscribe(new DefaultObserver<Long>(){
    @Override public void onNext(    Long t){
      if (t > 0) {
        throw new TestException();
      }
      observer.onNext(t);
    }
    @Override public void onError(    Throwable e){
      observer.onError(e);
    }
    @Override public void onComplete(){
      observer.onComplete();
    }
  }
);
  scheduler.advanceTimeBy(1,TimeUnit.SECONDS);
  inOrder.verify(observer).onNext(0L);
  inOrder.verify(observer).onError(any(TestException.class));
  inOrder.verifyNoMoreInteractions();
  verify(observer,never()).onComplete();
}
