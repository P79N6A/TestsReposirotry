@Test public void doubleOnSubscribe(){
  final int[] calls={0,0};
  TestHelper.checkDoubleOnSubscribeFlowable(new Function<Flowable<Object>,Publisher<Object>>(){
    @Override public Publisher<Object> apply(    Flowable<Object> f) throws Exception {
      return f.doOnLifecycle(new Consumer<Subscription>(){
        @Override public void accept(        Subscription s) throws Exception {
          calls[0]++;
        }
      }
,Functions.EMPTY_LONG_CONSUMER,new Action(){
        @Override public void run() throws Exception {
          calls[1]++;
        }
      }
);
    }
  }
);
  assertEquals(2,calls[0]);
  assertEquals(0,calls[1]);
}
