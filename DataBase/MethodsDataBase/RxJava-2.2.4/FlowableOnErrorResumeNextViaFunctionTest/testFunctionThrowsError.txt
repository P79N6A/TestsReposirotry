/** 
 * Test that when a function throws an exception this is propagated through onError.
 */
@Test public void testFunctionThrowsError(){
  Subscription s=mock(Subscription.class);
  TestFlowable w=new TestFlowable(s,"one");
  Function<Throwable,Flowable<String>> resume=new Function<Throwable,Flowable<String>>(){
    @Override public Flowable<String> apply(    Throwable t1){
      throw new RuntimeException("exception from function");
    }
  }
;
  Flowable<String> flowable=Flowable.unsafeCreate(w).onErrorResumeNext(resume);
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  flowable.subscribe(subscriber);
  try {
    w.t.join();
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
  verify(subscriber,times(1)).onNext("one");
  verify(subscriber,times(1)).onError(any(Throwable.class));
  verify(subscriber,times(0)).onComplete();
}
