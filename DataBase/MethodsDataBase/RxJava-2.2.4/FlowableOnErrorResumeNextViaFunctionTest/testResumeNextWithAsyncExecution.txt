@Test public void testResumeNextWithAsyncExecution(){
  final AtomicReference<Throwable> receivedException=new AtomicReference<Throwable>();
  Subscription s=mock(Subscription.class);
  TestFlowable w=new TestFlowable(s,"one");
  Function<Throwable,Flowable<String>> resume=new Function<Throwable,Flowable<String>>(){
    @Override public Flowable<String> apply(    Throwable t1){
      receivedException.set(t1);
      return Flowable.just("twoResume","threeResume");
    }
  }
;
  Flowable<String> flowable=Flowable.unsafeCreate(w).onErrorResumeNext(resume);
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  flowable.subscribe(subscriber);
  try {
    w.t.join();
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
  verify(subscriber,Mockito.never()).onError(any(Throwable.class));
  verify(subscriber,times(1)).onComplete();
  verify(subscriber,times(1)).onNext("one");
  verify(subscriber,Mockito.never()).onNext("two");
  verify(subscriber,Mockito.never()).onNext("three");
  verify(subscriber,times(1)).onNext("twoResume");
  verify(subscriber,times(1)).onNext("threeResume");
  assertNotNull(receivedException.get());
}
