@Test public void testResumeNextWithSynchronousExecution(){
  final AtomicReference<Throwable> receivedException=new AtomicReference<Throwable>();
  Flowable<String> w=Flowable.unsafeCreate(new Publisher<String>(){
    @Override public void subscribe(    Subscriber<? super String> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      subscriber.onNext("one");
      subscriber.onError(new Throwable("injected failure"));
      subscriber.onNext("two");
      subscriber.onNext("three");
    }
  }
);
  Function<Throwable,Flowable<String>> resume=new Function<Throwable,Flowable<String>>(){
    @Override public Flowable<String> apply(    Throwable t1){
      receivedException.set(t1);
      return Flowable.just("twoResume","threeResume");
    }
  }
;
  Flowable<String> flowable=w.onErrorResumeNext(resume);
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  flowable.subscribe(subscriber);
  verify(subscriber,Mockito.never()).onError(any(Throwable.class));
  verify(subscriber,times(1)).onComplete();
  verify(subscriber,times(1)).onNext("one");
  verify(subscriber,Mockito.never()).onNext("two");
  verify(subscriber,Mockito.never()).onNext("three");
  verify(subscriber,times(1)).onNext("twoResume");
  verify(subscriber,times(1)).onNext("threeResume");
  assertNotNull(receivedException.get());
}
