@Test public void error(){
  SingleSubject<Integer> ss=SingleSubject.create();
  assertFalse(ss.hasValue());
  assertNull(ss.getValue());
  assertFalse(ss.hasThrowable());
  assertNull(ss.getThrowable());
  assertFalse(ss.hasObservers());
  assertEquals(0,ss.observerCount());
  TestObserver<Integer> to=ss.test();
  to.assertEmpty();
  assertTrue(ss.hasObservers());
  assertEquals(1,ss.observerCount());
  ss.onError(new IOException());
  assertFalse(ss.hasValue());
  assertNull(ss.getValue());
  assertTrue(ss.hasThrowable());
  assertTrue(ss.getThrowable().toString(),ss.getThrowable() instanceof IOException);
  assertFalse(ss.hasObservers());
  assertEquals(0,ss.observerCount());
  to.assertFailure(IOException.class);
  ss.test().assertFailure(IOException.class);
  assertFalse(ss.hasValue());
  assertNull(ss.getValue());
  assertTrue(ss.hasThrowable());
  assertTrue(ss.getThrowable().toString(),ss.getThrowable() instanceof IOException);
  assertFalse(ss.hasObservers());
  assertEquals(0,ss.observerCount());
}
