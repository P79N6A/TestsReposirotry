@Test public void doubleOnSubscribe(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    Single.using(Functions.justCallable(1),new Function<Integer,SingleSource<Integer>>(){
      @Override public SingleSource<Integer> apply(      Integer v) throws Exception {
        return new Single<Integer>(){
          @Override protected void subscribeActual(          SingleObserver<? super Integer> observer){
            observer.onSubscribe(Disposables.empty());
            assertFalse(((Disposable)observer).isDisposed());
            Disposable d=Disposables.empty();
            observer.onSubscribe(d);
            assertTrue(d.isDisposed());
            assertFalse(((Disposable)observer).isDisposed());
            observer.onSuccess(1);
            assertTrue(((Disposable)observer).isDisposed());
          }
        }
;
      }
    }
,Functions.emptyConsumer()).test().assertResult(1);
    TestHelper.assertError(errors,0,IllegalStateException.class,"Disposable already set!");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
