@Test public void successDisposeRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final PublishProcessor<Integer> pp=PublishProcessor.create();
    Disposable d=Disposables.empty();
    final TestObserver<Integer> to=Single.using(Functions.justCallable(d),new Function<Disposable,SingleSource<Integer>>(){
      @Override public SingleSource<Integer> apply(      Disposable v) throws Exception {
        return pp.single(-99);
      }
    }
,disposer).test();
    pp.onNext(1);
    Runnable r1=new Runnable(){
      @Override public void run(){
        pp.onComplete();
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        to.cancel();
      }
    }
;
    TestHelper.race(r1,r2);
    assertTrue(d.isDisposed());
  }
}
