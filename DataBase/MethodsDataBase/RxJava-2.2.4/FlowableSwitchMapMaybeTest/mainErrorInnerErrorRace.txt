@Test public void mainErrorInnerErrorRace(){
  final TestException ex=new TestException();
  final TestException ex2=new TestException();
  for (int i=0; i < TestHelper.RACE_LONG_LOOPS; i++) {
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final PublishProcessor<Integer> pp=PublishProcessor.create();
      final MaybeSubject<Integer> ms=MaybeSubject.create();
      final TestSubscriber<Integer> ts=pp.switchMapMaybeDelayError(new Function<Integer,MaybeSource<Integer>>(){
        @Override public MaybeSource<Integer> apply(        Integer v) throws Exception {
          if (v == 1) {
            return ms;
          }
          return Maybe.never();
        }
      }
).test();
      pp.onNext(1);
      Runnable r1=new Runnable(){
        @Override public void run(){
          pp.onError(ex);
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          ms.onError(ex2);
        }
      }
;
      TestHelper.race(r1,r2);
      ts.assertError(new Predicate<Throwable>(){
        @Override public boolean test(        Throwable e) throws Exception {
          return e instanceof TestException || e instanceof CompositeException;
        }
      }
);
      if (!errors.isEmpty()) {
        TestHelper.assertUndeliverable(errors,0,TestException.class);
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
