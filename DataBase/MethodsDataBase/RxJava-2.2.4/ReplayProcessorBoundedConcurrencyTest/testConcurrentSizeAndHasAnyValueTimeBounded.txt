@Test(timeout=10000) public void testConcurrentSizeAndHasAnyValueTimeBounded() throws InterruptedException {
  final ReplayProcessor<Object> rs=ReplayProcessor.createWithTime(1,TimeUnit.MILLISECONDS,Schedulers.computation());
  final CyclicBarrier cb=new CyclicBarrier(2);
  Thread t=new Thread(new Runnable(){
    @Override public void run(){
      try {
        cb.await();
      }
 catch (      InterruptedException e) {
        return;
      }
catch (      BrokenBarrierException e) {
        return;
      }
      for (int i=0; i < 1000000; i++) {
        rs.onNext(i);
        if (i % 10000 == 0) {
          try {
            Thread.sleep(1);
          }
 catch (          InterruptedException e) {
            return;
          }
        }
      }
      rs.onComplete();
      System.out.println("Replay fill Thread finished!");
    }
  }
);
  t.start();
  try {
    cb.await();
  }
 catch (  InterruptedException e) {
    return;
  }
catch (  BrokenBarrierException e) {
    return;
  }
  for (; !rs.hasThrowable() && !rs.hasComplete(); ) {
    rs.size();
    rs.hasValue();
    Object[] values=rs.getValues();
    for (int i=0; i < values.length - 1; i++) {
      Integer v1=(Integer)values[i];
      Integer v2=(Integer)values[i + 1];
      assertEquals(1,v2 - v1);
    }
  }
  t.join();
}
