@Test public void testConcatConcurrentWithInfinity(){
  final TestObservable<String> w1=new TestObservable<String>("one","two","three");
  final TestObservable<String> w2=new TestObservable<String>("hello",Integer.MAX_VALUE);
  Observer<String> observer=TestHelper.mockObserver();
  @SuppressWarnings("unchecked") TestObservable<Observable<String>> observableOfObservables=new TestObservable<Observable<String>>(Observable.unsafeCreate(w1),Observable.unsafeCreate(w2));
  Observable<String> concatF=Observable.concat(Observable.unsafeCreate(observableOfObservables));
  concatF.take(50).subscribe(observer);
  try {
    w1.waitForThreadDone();
    w2.waitForThreadDone();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  InOrder inOrder=inOrder(observer);
  inOrder.verify(observer,times(1)).onNext("one");
  inOrder.verify(observer,times(1)).onNext("two");
  inOrder.verify(observer,times(1)).onNext("three");
  inOrder.verify(observer,times(47)).onNext("hello");
  verify(observer,times(1)).onComplete();
  verify(observer,never()).onError(any(Throwable.class));
}
