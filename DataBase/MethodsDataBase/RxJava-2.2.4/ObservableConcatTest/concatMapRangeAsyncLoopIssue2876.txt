@Test public void concatMapRangeAsyncLoopIssue2876(){
  final long durationSeconds=2;
  final long startTime=System.currentTimeMillis();
  for (int i=0; ; i++) {
    if (System.currentTimeMillis() - startTime > TimeUnit.SECONDS.toMillis(durationSeconds)) {
      return;
    }
    if (i % 1000 == 0) {
      System.out.println("concatMapRangeAsyncLoop > " + i);
    }
    TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.range(0,1000).concatMap(new Function<Integer,Observable<Integer>>(){
      @Override public Observable<Integer> apply(      Integer t){
        return Observable.fromIterable(Arrays.asList(t));
      }
    }
).observeOn(Schedulers.computation()).subscribe(to);
    to.awaitTerminalEvent(2500,TimeUnit.MILLISECONDS);
    to.assertTerminated();
    to.assertNoErrors();
    assertEquals(1000,to.valueCount());
    assertEquals((Integer)999,to.values().get(999));
  }
}
