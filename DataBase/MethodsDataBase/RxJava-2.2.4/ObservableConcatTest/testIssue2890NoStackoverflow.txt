@Test(timeout=30000) public void testIssue2890NoStackoverflow() throws InterruptedException {
  final ExecutorService executor=Executors.newFixedThreadPool(2);
  final Scheduler sch=Schedulers.from(executor);
  Function<Integer,Observable<Integer>> func=new Function<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Integer t){
      Observable<Integer> o=Observable.just(t).subscribeOn(sch);
      Subject<Integer> subject=UnicastSubject.create();
      o.subscribe(subject);
      return subject;
    }
  }
;
  int n=5000;
  final AtomicInteger counter=new AtomicInteger();
  Observable.range(1,n).concatMap(func).subscribe(new DefaultObserver<Integer>(){
    @Override public void onNext(    Integer t){
      try {
        Thread.sleep(1);
      }
 catch (      InterruptedException e) {
      }
      if (counter.getAndIncrement() % 100 == 0) {
        System.out.println("testIssue2890NoStackoverflow -> " + counter.get());
      }
      ;
    }
    @Override public void onComplete(){
      executor.shutdown();
    }
    @Override public void onError(    Throwable e){
      executor.shutdown();
    }
  }
);
  executor.awaitTermination(20000,TimeUnit.MILLISECONDS);
  assertEquals(n,counter.get());
}
