@Test public void testConcatNonBlockingObservables(){
  final CountDownLatch okToContinueW1=new CountDownLatch(1);
  final CountDownLatch okToContinueW2=new CountDownLatch(1);
  final TestObservable<String> w1=new TestObservable<String>(null,okToContinueW1,"one","two","three");
  final TestObservable<String> w2=new TestObservable<String>(null,okToContinueW2,"four","five","six");
  Observer<String> observer=TestHelper.mockObserver();
  Observable<Observable<String>> observableOfObservables=Observable.unsafeCreate(new ObservableSource<Observable<String>>(){
    @Override public void subscribe(    Observer<? super Observable<String>> observer){
      observer.onSubscribe(Disposables.empty());
      observer.onNext(Observable.unsafeCreate(w1));
      observer.onNext(Observable.unsafeCreate(w2));
      observer.onComplete();
    }
  }
);
  Observable<String> concat=Observable.concat(observableOfObservables);
  concat.subscribe(observer);
  verify(observer,times(0)).onComplete();
  try {
    okToContinueW1.countDown();
    okToContinueW2.countDown();
    w1.t.join();
    w2.t.join();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  InOrder inOrder=inOrder(observer);
  inOrder.verify(observer,times(1)).onNext("one");
  inOrder.verify(observer,times(1)).onNext("two");
  inOrder.verify(observer,times(1)).onNext("three");
  inOrder.verify(observer,times(1)).onNext("four");
  inOrder.verify(observer,times(1)).onNext("five");
  inOrder.verify(observer,times(1)).onNext("six");
  verify(observer,times(1)).onComplete();
}
