@Test public void errorTimeoutRace(){
  final TestException ex=new TestException();
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
      final SingleSubject<Integer> subj=SingleSubject.create();
      SingleSubject<Integer> fallback=SingleSubject.create();
      final TestScheduler sch=new TestScheduler();
      TestObserver<Integer> to=subj.timeout(1,TimeUnit.MILLISECONDS,sch,fallback).test();
      Runnable r1=new Runnable(){
        @Override public void run(){
          subj.onError(ex);
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          sch.advanceTimeBy(1,TimeUnit.MILLISECONDS);
        }
      }
;
      TestHelper.race(r1,r2);
      if (!fallback.hasObservers()) {
        to.assertFailure(TestException.class);
      }
 else {
        to.assertEmpty();
      }
      if (!errors.isEmpty()) {
        TestHelper.assertUndeliverable(errors,0,TestException.class);
      }
    }
  }
  finally {
    RxJavaPlugins.reset();
  }
}
