@Test public void observeOnDispose() throws Exception {
  final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  final CountDownLatch cdl=new CountDownLatch(1);
  Maybe.just(1).observeOn(Schedulers.single()).doOnSuccess(new Consumer<Integer>(){
    @Override public void accept(    Integer v) throws Exception {
      if (!cdl.await(5,TimeUnit.SECONDS)) {
        throw new TimeoutException();
      }
    }
  }
).toFlowable().subscribe(ts);
  Thread.sleep(250);
  ts.cancel();
  ts.awaitDone(5,TimeUnit.SECONDS).assertFailure(InterruptedException.class);
}
