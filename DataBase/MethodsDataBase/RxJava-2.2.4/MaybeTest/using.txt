@Test public void using(){
  final AtomicInteger disposeCount=new AtomicInteger();
  Maybe.using(Functions.justCallable(1),new Function<Integer,MaybeSource<Integer>>(){
    @Override public MaybeSource<Integer> apply(    Integer v) throws Exception {
      return Maybe.just(v);
    }
  }
,new Consumer<Integer>(){
    @Override public void accept(    Integer d) throws Exception {
      disposeCount.set(d);
    }
  }
).map(new Function<Integer,Object>(){
    @Override public String apply(    Integer v) throws Exception {
      return "" + disposeCount.get() + v * 10;
    }
  }
).test().assertResult("110");
}
