@Test public void onTerminateDetach() throws Exception {
  System.gc();
  Thread.sleep(150);
  long before=usedMemoryNow();
  Maybe<Object> source=Flowable.just((Object)new Object[10000000]).singleElement();
  long middle=usedMemoryNow();
  MaybeObserver<Object> observer=new MaybeObserver<Object>(){
    @SuppressWarnings("unused") Disposable u;
    @Override public void onSubscribe(    Disposable d){
      this.u=d;
    }
    @Override public void onSuccess(    Object value){
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
;
  source.onTerminateDetach().subscribe(observer);
  source=null;
  System.gc();
  Thread.sleep(250);
  long after=usedMemoryNow();
  String log=String.format("%.2f MB -> %.2f MB -> %.2f MB%n",before / 1024.0 / 1024.0,middle / 1024.0 / 1024.0,after / 1024.0 / 1024.0);
  System.out.printf(log);
  if (before * 1.3 < after) {
    fail("There seems to be a memory leak: " + log);
  }
  assertNotNull(observer);
}
