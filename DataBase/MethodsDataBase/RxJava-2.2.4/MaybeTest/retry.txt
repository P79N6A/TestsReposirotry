@Test public void retry(){
  Maybe.just(1).retry().test().assertResult(1);
  Maybe.just(1).retry(5).test().assertResult(1);
  Maybe.just(1).retry(Functions.alwaysTrue()).test().assertResult(1);
  Maybe.just(1).retry(5,Functions.alwaysTrue()).test().assertResult(1);
  Maybe.just(1).retry(new BiPredicate<Integer,Throwable>(){
    @Override public boolean test(    Integer a,    Throwable e) throws Exception {
      return true;
    }
  }
).test().assertResult(1);
  Maybe.just(1).retryUntil(new BooleanSupplier(){
    @Override public boolean getAsBoolean() throws Exception {
      return false;
    }
  }
).test().assertResult(1);
  Maybe.just(1).retryWhen(new Function<Flowable<? extends Throwable>,Publisher<Object>>(){
    @SuppressWarnings({"rawtypes","unchecked"}) @Override public Publisher<Object> apply(    Flowable<? extends Throwable> v) throws Exception {
      return (Publisher)v;
    }
  }
).test().assertResult(1);
}
