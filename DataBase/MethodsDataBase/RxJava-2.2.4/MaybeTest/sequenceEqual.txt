@Test public void sequenceEqual(){
  Maybe.sequenceEqual(Maybe.just(1),Maybe.just(new Integer(1))).test().assertResult(true);
  Maybe.sequenceEqual(Maybe.just(1),Maybe.just(2)).test().assertResult(false);
  Maybe.sequenceEqual(Maybe.just(1),Maybe.empty()).test().assertResult(false);
  Maybe.sequenceEqual(Maybe.empty(),Maybe.just(2)).test().assertResult(false);
  Maybe.sequenceEqual(Maybe.empty(),Maybe.empty()).test().assertResult(true);
  Maybe.sequenceEqual(Maybe.just(1),Maybe.error(new TestException())).test().assertFailure(TestException.class);
  Maybe.sequenceEqual(Maybe.error(new TestException()),Maybe.just(1)).test().assertFailure(TestException.class);
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    Maybe.sequenceEqual(Maybe.error(new TestException("One")),Maybe.error(new TestException("Two"))).test().assertFailureAndMessage(TestException.class,"One");
    TestHelper.assertUndeliverable(errors,0,TestException.class,"Two");
  }
  finally {
    RxJavaPlugins.reset();
  }
  Maybe.sequenceEqual(Maybe.just(1),Maybe.error(new TestException()),new BiPredicate<Object,Object>(){
    @Override public boolean test(    Object t1,    Object t2) throws Exception {
      throw new TestException();
    }
  }
).test().assertFailure(TestException.class);
}
