@Test public void flatMapContinuation(){
  Maybe.just(1).flatMapCompletable(new Function<Integer,Completable>(){
    @Override public Completable apply(    Integer v) throws Exception {
      return Completable.complete();
    }
  }
).test().assertResult();
  Maybe.just(1).flatMapCompletable(new Function<Integer,Completable>(){
    @Override public Completable apply(    Integer v) throws Exception {
      return Completable.error(new TestException());
    }
  }
).test().assertFailure(TestException.class);
  Maybe.just(1).flatMapPublisher(new Function<Integer,Publisher<Integer>>(){
    @Override public Publisher<Integer> apply(    Integer v) throws Exception {
      return Flowable.range(1,5);
    }
  }
).test().assertResult(1,2,3,4,5);
  Maybe.just(1).flatMapPublisher(new Function<Integer,Publisher<Integer>>(){
    @Override public Publisher<Integer> apply(    Integer v) throws Exception {
      return Flowable.error(new TestException());
    }
  }
).test().assertFailure(TestException.class);
  Maybe.just(1).flatMapObservable(new Function<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Integer v) throws Exception {
      return Observable.range(1,5);
    }
  }
).test().assertResult(1,2,3,4,5);
  Maybe.just(1).flatMapObservable(new Function<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Integer v) throws Exception {
      return Observable.error(new TestException());
    }
  }
).test().assertFailure(TestException.class);
}
