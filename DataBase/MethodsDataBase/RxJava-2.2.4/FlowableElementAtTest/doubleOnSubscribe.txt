@Test public void doubleOnSubscribe(){
  TestHelper.checkDoubleOnSubscribeFlowable(new Function<Flowable<Object>,Publisher<Object>>(){
    @Override public Publisher<Object> apply(    Flowable<Object> f) throws Exception {
      return f.elementAt(0).toFlowable();
    }
  }
);
  TestHelper.checkDoubleOnSubscribeFlowableToMaybe(new Function<Flowable<Object>,Maybe<Object>>(){
    @Override public Maybe<Object> apply(    Flowable<Object> f) throws Exception {
      return f.elementAt(0);
    }
  }
);
  TestHelper.checkDoubleOnSubscribeFlowableToSingle(new Function<Flowable<Object>,Single<Object>>(){
    @Override public Single<Object> apply(    Flowable<Object> f) throws Exception {
      return f.elementAt(0,1);
    }
  }
);
}
