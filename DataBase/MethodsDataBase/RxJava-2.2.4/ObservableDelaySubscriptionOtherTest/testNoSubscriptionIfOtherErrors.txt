@Test public void testNoSubscriptionIfOtherErrors(){
  PublishSubject<Object> other=PublishSubject.create();
  TestObserver<Integer> to=new TestObserver<Integer>();
  final AtomicInteger subscribed=new AtomicInteger();
  Observable.<Integer>error(new TestException()).doOnSubscribe(new Consumer<Disposable>(){
    @Override public void accept(    Disposable d){
      subscribed.getAndIncrement();
    }
  }
).delaySubscription(other).subscribe(to);
  to.assertNotComplete();
  to.assertNoErrors();
  to.assertNoValues();
  Assert.assertEquals("Premature subscription",0,subscribed.get());
  other.onError(new TestException());
  Assert.assertEquals("Premature subscription",0,subscribed.get());
  to.assertNoValues();
  to.assertNotComplete();
  to.assertError(TestException.class);
}
