@Test public void selectorSubscriberSwap(){
  final AtomicReference<Flowable<Integer>> ref=new AtomicReference<Flowable<Integer>>();
  Flowable.range(1,5).publish(new Function<Flowable<Integer>,Publisher<Integer>>(){
    @Override public Publisher<Integer> apply(    Flowable<Integer> f) throws Exception {
      ref.set(f);
      return Flowable.never();
    }
  }
).test();
  ref.get().take(2).test().assertResult(1,2);
  ref.get().test(0).assertEmpty().requestMore(2).assertValuesOnly(3,4).requestMore(1).assertResult(3,4,5);
}
