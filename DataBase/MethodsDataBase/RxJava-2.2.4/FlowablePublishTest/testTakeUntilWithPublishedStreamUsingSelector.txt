@Test public void testTakeUntilWithPublishedStreamUsingSelector(){
  final AtomicInteger emitted=new AtomicInteger();
  Flowable<Integer> xs=Flowable.range(0,Flowable.bufferSize() * 2).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer t1){
      emitted.incrementAndGet();
    }
  }
);
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  xs.publish(new Function<Flowable<Integer>,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Flowable<Integer> xs){
      return xs.takeUntil(xs.skipWhile(new Predicate<Integer>(){
        @Override public boolean test(        Integer i){
          return i <= 3;
        }
      }
));
    }
  }
).subscribe(ts);
  ts.awaitTerminalEvent();
  ts.assertNoErrors();
  ts.assertValues(0,1,2,3);
  assertEquals(5,emitted.get());
  System.out.println(ts.values());
}
