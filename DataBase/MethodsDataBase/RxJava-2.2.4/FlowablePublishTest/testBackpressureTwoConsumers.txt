@Test(timeout=10000) public void testBackpressureTwoConsumers(){
  final AtomicInteger sourceEmission=new AtomicInteger();
  final AtomicBoolean sourceUnsubscribed=new AtomicBoolean();
  final Flowable<Integer> source=Flowable.range(1,100).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer t1){
      sourceEmission.incrementAndGet();
    }
  }
).doOnCancel(new Action(){
    @Override public void run(){
      sourceUnsubscribed.set(true);
    }
  }
).share();
  ;
  final AtomicBoolean child1Unsubscribed=new AtomicBoolean();
  final AtomicBoolean child2Unsubscribed=new AtomicBoolean();
  final TestSubscriber<Integer> ts2=new TestSubscriber<Integer>();
  final TestSubscriber<Integer> ts1=new TestSubscriber<Integer>(){
    @Override public void onNext(    Integer t){
      if (valueCount() == 2) {
        source.doOnCancel(new Action(){
          @Override public void run(){
            child2Unsubscribed.set(true);
          }
        }
).take(5).subscribe(ts2);
      }
      super.onNext(t);
    }
  }
;
  source.doOnCancel(new Action(){
    @Override public void run(){
      child1Unsubscribed.set(true);
    }
  }
).take(5).subscribe(ts1);
  ts1.awaitTerminalEvent();
  ts2.awaitTerminalEvent();
  ts1.assertNoErrors();
  ts2.assertNoErrors();
  assertTrue(sourceUnsubscribed.get());
  assertTrue(child1Unsubscribed.get());
  assertTrue(child2Unsubscribed.get());
  ts1.assertValues(1,2,3,4,5);
  ts2.assertValues(4,5,6,7,8);
  assertEquals(8,sourceEmission.get());
}
