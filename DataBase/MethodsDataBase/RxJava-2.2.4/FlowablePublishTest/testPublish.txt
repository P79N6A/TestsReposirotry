@Test public void testPublish() throws InterruptedException {
  final AtomicInteger counter=new AtomicInteger();
  ConnectableFlowable<String> f=Flowable.unsafeCreate(new Publisher<String>(){
    @Override public void subscribe(    final Subscriber<? super String> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      new Thread(new Runnable(){
        @Override public void run(){
          counter.incrementAndGet();
          subscriber.onNext("one");
          subscriber.onComplete();
        }
      }
).start();
    }
  }
).publish();
  final CountDownLatch latch=new CountDownLatch(2);
  f.subscribe(new Consumer<String>(){
    @Override public void accept(    String v){
      assertEquals("one",v);
      latch.countDown();
    }
  }
);
  f.subscribe(new Consumer<String>(){
    @Override public void accept(    String v){
      assertEquals("one",v);
      latch.countDown();
    }
  }
);
  Disposable connection=f.connect();
  try {
    if (!latch.await(1000,TimeUnit.MILLISECONDS)) {
      fail("subscriptions did not receive values");
    }
    assertEquals(1,counter.get());
  }
  finally {
    connection.dispose();
  }
}
