@Test public void publishCancelOneAsync2(){
  final PublishProcessor<Integer> pp=PublishProcessor.create();
  ConnectableFlowable<Integer> cf=pp.publish();
  final TestSubscriber<Integer> ts1=new TestSubscriber<Integer>();
  final AtomicReference<InnerSubscriber<Integer>> ref=new AtomicReference<InnerSubscriber<Integer>>();
  cf.subscribe(new FlowableSubscriber<Integer>(){
    @SuppressWarnings("unchecked") @Override public void onSubscribe(    Subscription s){
      ts1.onSubscribe(new BooleanSubscription());
      ref.set((InnerSubscriber<Integer>)s);
    }
    @Override public void onNext(    Integer t){
      ts1.onNext(t);
    }
    @Override public void onError(    Throwable t){
      ts1.onError(t);
    }
    @Override public void onComplete(){
      ts1.onComplete();
    }
  }
);
  TestSubscriber<Integer> ts2=cf.test();
  cf.connect();
  ref.get().set(Long.MIN_VALUE);
  pp.onNext(1);
  ts1.assertEmpty();
  ts2.assertValuesOnly(1);
}
