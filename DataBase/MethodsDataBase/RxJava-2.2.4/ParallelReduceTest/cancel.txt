@Test public void cancel(){
  PublishProcessor<Integer> pp=PublishProcessor.create();
  TestSubscriber<List<Integer>> ts=pp.parallel().reduce(new Callable<List<Integer>>(){
    @Override public List<Integer> call() throws Exception {
      return new ArrayList<Integer>();
    }
  }
,new BiFunction<List<Integer>,Integer,List<Integer>>(){
    @Override public List<Integer> apply(    List<Integer> a,    Integer b) throws Exception {
      a.add(b);
      return a;
    }
  }
).sequential().test();
  assertTrue(pp.hasSubscribers());
  ts.cancel();
  assertFalse(pp.hasSubscribers());
}
