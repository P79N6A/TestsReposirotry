@Test public void deadOnArrival(){
  Iterable<Integer> it=new Iterable<Integer>(){
    @Override public Iterator<Integer> iterator(){
      return new Iterator<Integer>(){
        @Override public boolean hasNext(){
          return true;
        }
        @Override public Integer next(){
          throw new NoSuchElementException();
        }
        @Override public void remove(){
        }
      }
;
    }
  }
;
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>(5);
  ts.cancel();
  Flowable.fromIterable(it).subscribe(ts);
  ts.assertNoValues();
  ts.assertNoErrors();
  ts.assertNotComplete();
}
