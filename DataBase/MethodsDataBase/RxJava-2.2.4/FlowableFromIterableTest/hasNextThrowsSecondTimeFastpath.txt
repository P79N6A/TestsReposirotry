@Test public void hasNextThrowsSecondTimeFastpath(){
  Iterable<Integer> it=new Iterable<Integer>(){
    @Override public Iterator<Integer> iterator(){
      return new Iterator<Integer>(){
        int count;
        @Override public boolean hasNext(){
          if (++count >= 2) {
            throw new TestException("Forced failure");
          }
          return true;
        }
        @Override public Integer next(){
          return 1;
        }
        @Override public void remove(){
        }
      }
;
    }
  }
;
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  Flowable.fromIterable(it).subscribe(ts);
  ts.assertValues(1);
  ts.assertError(TestException.class);
  ts.assertNotComplete();
}
