@Test public final void testMergeWithExecutorScheduler(){
  final String currentThreadName=Thread.currentThread().getName();
  Flowable<Integer> f1=Flowable.<Integer>just(1,2,3,4,5);
  Flowable<Integer> f2=Flowable.<Integer>just(6,7,8,9,10);
  Flowable<String> f=Flowable.<Integer>merge(f1,f2).subscribeOn(Schedulers.computation()).map(new Function<Integer,String>(){
    @Override public String apply(    Integer t){
      assertFalse(Thread.currentThread().getName().equals(currentThreadName));
      assertTrue(Thread.currentThread().getName().startsWith("RxComputationThreadPool"));
      return "Value_" + t + "_Thread_"+ Thread.currentThread().getName();
    }
  }
);
  f.blockingForEach(new Consumer<String>(){
    @Override public void accept(    String t){
      System.out.println("t: " + t);
    }
  }
);
}
