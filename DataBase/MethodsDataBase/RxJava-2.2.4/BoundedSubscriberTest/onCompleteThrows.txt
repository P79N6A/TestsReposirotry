@Test public void onCompleteThrows(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    final List<Object> received=new ArrayList<Object>();
    BoundedSubscriber<Object> subscriber=new BoundedSubscriber<Object>(new Consumer<Object>(){
      @Override public void accept(      Object o) throws Exception {
        received.add(o);
      }
    }
,new Consumer<Throwable>(){
      @Override public void accept(      Throwable throwable) throws Exception {
        received.add(throwable);
      }
    }
,new Action(){
      @Override public void run() throws Exception {
        throw new TestException();
      }
    }
,new Consumer<Subscription>(){
      @Override public void accept(      Subscription subscription) throws Exception {
        subscription.request(128);
      }
    }
,128);
    assertFalse(subscriber.isDisposed());
    Flowable.<Integer>empty().subscribe(subscriber);
    assertTrue(received.toString(),received.isEmpty());
    assertTrue(subscriber.isDisposed());
    TestHelper.assertUndeliverable(errors,0,TestException.class);
  }
  finally {
    RxJavaPlugins.reset();
  }
}
