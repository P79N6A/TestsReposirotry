@Test public void onErrorThrows(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    final List<Object> received=new ArrayList<Object>();
    BoundedSubscriber<Object> subscriber=new BoundedSubscriber<Object>(new Consumer<Object>(){
      @Override public void accept(      Object o) throws Exception {
        received.add(o);
      }
    }
,new Consumer<Throwable>(){
      @Override public void accept(      Throwable throwable) throws Exception {
        throw new TestException("Inner");
      }
    }
,new Action(){
      @Override public void run() throws Exception {
        received.add(1);
      }
    }
,new Consumer<Subscription>(){
      @Override public void accept(      Subscription subscription) throws Exception {
        subscription.request(128);
      }
    }
,128);
    assertFalse(subscriber.isDisposed());
    Flowable.<Integer>error(new TestException("Outer")).subscribe(subscriber);
    assertTrue(received.toString(),received.isEmpty());
    assertTrue(subscriber.isDisposed());
    TestHelper.assertError(errors,0,CompositeException.class);
    List<Throwable> ce=TestHelper.compositeList(errors.get(0));
    TestHelper.assertError(ce,0,TestException.class,"Outer");
    TestHelper.assertError(ce,1,TestException.class,"Inner");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
