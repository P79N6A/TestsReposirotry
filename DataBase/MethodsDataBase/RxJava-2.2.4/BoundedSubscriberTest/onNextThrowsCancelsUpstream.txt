@Test public void onNextThrowsCancelsUpstream(){
  PublishProcessor<Integer> pp=PublishProcessor.create();
  final List<Throwable> errors=new ArrayList<Throwable>();
  BoundedSubscriber<Integer> s=new BoundedSubscriber<Integer>(new Consumer<Integer>(){
    @Override public void accept(    Integer v) throws Exception {
      throw new TestException();
    }
  }
,new Consumer<Throwable>(){
    @Override public void accept(    Throwable e) throws Exception {
      errors.add(e);
    }
  }
,new Action(){
    @Override public void run() throws Exception {
    }
  }
,new Consumer<Subscription>(){
    @Override public void accept(    Subscription subscription) throws Exception {
      subscription.request(128);
    }
  }
,128);
  pp.subscribe(s);
  assertTrue("No observers?!",pp.hasSubscribers());
  assertTrue("Has errors already?!",errors.isEmpty());
  pp.onNext(1);
  assertFalse("Has observers?!",pp.hasSubscribers());
  assertFalse("No errors?!",errors.isEmpty());
  assertTrue(errors.toString(),errors.get(0) instanceof TestException);
}
