@Test public void disposeSetFutureRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final AbstractDirectTask task=new AbstractDirectTask(Functions.EMPTY_RUNNABLE){
      private static final long serialVersionUID=208585707945686116L;
    }
;
    final Boolean[] interrupted={null};
    final FutureTask<Void> ft=new FutureTask<Void>(Functions.EMPTY_RUNNABLE,null){
      @Override public boolean cancel(      boolean mayInterruptIfRunning){
        interrupted[0]=mayInterruptIfRunning;
        return super.cancel(mayInterruptIfRunning);
      }
    }
;
    Runnable r1=new Runnable(){
      @Override public void run(){
        task.dispose();
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        task.setFuture(ft);
      }
    }
;
    TestHelper.race(r1,r2);
  }
}
