@Test public void cancelSetFutureCurrentThread(){
  AbstractDirectTask task=new AbstractDirectTask(Functions.EMPTY_RUNNABLE){
    private static final long serialVersionUID=208585707945686116L;
  }
;
  final Boolean[] interrupted={null};
  assertFalse(task.isDisposed());
  task.runner=Thread.currentThread();
  task.dispose();
  assertTrue(task.isDisposed());
  task.dispose();
  assertTrue(task.isDisposed());
  FutureTask<Void> ft=new FutureTask<Void>(Functions.EMPTY_RUNNABLE,null){
    @Override public boolean cancel(    boolean mayInterruptIfRunning){
      interrupted[0]=mayInterruptIfRunning;
      return super.cancel(mayInterruptIfRunning);
    }
  }
;
  task.setFuture(ft);
  assertFalse(interrupted[0]);
  assertTrue(task.isDisposed());
}
