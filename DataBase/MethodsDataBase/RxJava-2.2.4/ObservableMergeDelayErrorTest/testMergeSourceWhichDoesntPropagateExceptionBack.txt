@Test @Ignore("Subscribers should not throw") public void testMergeSourceWhichDoesntPropagateExceptionBack(){
  Observable<Integer> source=Observable.unsafeCreate(new ObservableSource<Integer>(){
    @Override public void subscribe(    Observer<? super Integer> t1){
      t1.onSubscribe(Disposables.empty());
      try {
        t1.onNext(0);
      }
 catch (      Throwable swallow) {
      }
      t1.onNext(1);
      t1.onComplete();
    }
  }
);
  Observable<Integer> result=Observable.mergeDelayError(source,Observable.just(2));
  final Observer<Integer> o=TestHelper.mockObserver();
  InOrder inOrder=inOrder(o);
  result.subscribe(new DefaultObserver<Integer>(){
    int calls;
    @Override public void onNext(    Integer t){
      if (calls++ == 0) {
        throw new TestException();
      }
      o.onNext(t);
    }
    @Override public void onError(    Throwable e){
      o.onError(e);
    }
    @Override public void onComplete(){
      o.onComplete();
    }
  }
);
  inOrder.verify(o).onNext(2);
  inOrder.verify(o,never()).onNext(0);
  inOrder.verify(o,never()).onNext(1);
  inOrder.verify(o,never()).onNext(anyInt());
  inOrder.verify(o).onError(any(TestException.class));
  verify(o,never()).onComplete();
}
