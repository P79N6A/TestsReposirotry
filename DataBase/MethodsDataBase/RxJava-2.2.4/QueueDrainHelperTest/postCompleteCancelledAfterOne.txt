@Test public void postCompleteCancelledAfterOne(){
  final TestSubscriber<Integer> ts=new TestSubscriber<Integer>(){
    @Override public void onNext(    Integer t){
      super.onNext(t);
      cancel();
    }
  }
;
  ArrayDeque<Integer> queue=new ArrayDeque<Integer>();
  AtomicLong state=new AtomicLong();
  BooleanSupplier isCancelled=new BooleanSupplier(){
    @Override public boolean getAsBoolean() throws Exception {
      return ts.isCancelled();
    }
  }
;
  ts.onSubscribe(new BooleanSubscription());
  queue.offer(1);
  state.getAndIncrement();
  QueueDrainHelper.postComplete(ts,queue,state,isCancelled);
  ts.assertValue(1).assertNoErrors().assertNotComplete();
}
