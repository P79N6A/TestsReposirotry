@Test public void completeRequestRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    final ArrayDeque<Integer> queue=new ArrayDeque<Integer>();
    final AtomicLong state=new AtomicLong();
    final BooleanSupplier isCancelled=new BooleanSupplier(){
      @Override public boolean getAsBoolean() throws Exception {
        return false;
      }
    }
;
    ts.onSubscribe(new BooleanSubscription());
    queue.offer(1);
    Runnable r1=new Runnable(){
      @Override public void run(){
        QueueDrainHelper.postCompleteRequest(1,ts,queue,state,isCancelled);
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        QueueDrainHelper.postComplete(ts,queue,state,isCancelled);
      }
    }
;
    TestHelper.race(r1,r2);
    ts.assertResult(1);
  }
}
