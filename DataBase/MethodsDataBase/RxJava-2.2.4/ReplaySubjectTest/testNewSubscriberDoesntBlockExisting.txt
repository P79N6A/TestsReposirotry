@Test(timeout=2000) public void testNewSubscriberDoesntBlockExisting() throws InterruptedException {
  final AtomicReference<String> lastValueForSubscriber1=new AtomicReference<String>();
  Observer<String> observer1=new DefaultObserver<String>(){
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onNext(    String v){
      System.out.println("observer1: " + v);
      lastValueForSubscriber1.set(v);
    }
  }
;
  final AtomicReference<String> lastValueForSubscriber2=new AtomicReference<String>();
  final CountDownLatch oneReceived=new CountDownLatch(1);
  final CountDownLatch makeSlow=new CountDownLatch(1);
  final CountDownLatch completed=new CountDownLatch(1);
  Observer<String> observer2=new DefaultObserver<String>(){
    @Override public void onComplete(){
      completed.countDown();
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onNext(    String v){
      System.out.println("observer2: " + v);
      if (v.equals("one")) {
        oneReceived.countDown();
      }
 else {
        try {
          makeSlow.await();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        lastValueForSubscriber2.set(v);
      }
    }
  }
;
  ReplaySubject<String> subject=ReplaySubject.create();
  subject.subscribe(observer1);
  subject.onNext("one");
  assertEquals("one",lastValueForSubscriber1.get());
  subject.onNext("two");
  assertEquals("two",lastValueForSubscriber1.get());
  subject.subscribeOn(Schedulers.newThread()).subscribe(observer2);
  System.out.println("before waiting for one");
  oneReceived.await();
  System.out.println("after waiting for one");
  subject.onNext("three");
  System.out.println("sent three");
  assertEquals("three",lastValueForSubscriber1.get());
  System.out.println("about to send onComplete");
  subject.onComplete();
  System.out.println("completed subject");
  makeSlow.countDown();
  System.out.println("makeSlow released");
  completed.await();
  assertEquals("three",lastValueForSubscriber2.get());
}
