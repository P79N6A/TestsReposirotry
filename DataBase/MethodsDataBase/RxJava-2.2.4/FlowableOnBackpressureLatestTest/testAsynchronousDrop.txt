@Test public void testAsynchronousDrop() throws InterruptedException {
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>(1L){
    final Random rnd=new Random();
    @Override public void onNext(    Integer t){
      super.onNext(t);
      if (rnd.nextDouble() < 0.001) {
        try {
          Thread.sleep(1);
        }
 catch (        InterruptedException ex) {
          ex.printStackTrace();
        }
      }
      request(1);
    }
  }
;
  int m=100000;
  Flowable.range(1,m).subscribeOn(Schedulers.computation()).onBackpressureLatest().observeOn(Schedulers.io()).subscribe(ts);
  ts.awaitTerminalEvent(2,TimeUnit.SECONDS);
  ts.assertTerminated();
  int n=ts.values().size();
  System.out.println("testAsynchronousDrop -> " + n);
  Assert.assertTrue("All events received?",n < m);
}
