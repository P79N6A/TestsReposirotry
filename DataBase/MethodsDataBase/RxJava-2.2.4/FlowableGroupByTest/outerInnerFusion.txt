@Test public void outerInnerFusion(){
  final TestSubscriber<Integer> ts1=SubscriberFusion.newTest(QueueFuseable.ANY);
  final TestSubscriber<GroupedFlowable<Integer,Integer>> ts2=SubscriberFusion.newTest(QueueFuseable.ANY);
  Flowable.range(1,10).groupBy(new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer v){
      return 1;
    }
  }
,new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer v){
      return v + 1;
    }
  }
).doOnNext(new Consumer<GroupedFlowable<Integer,Integer>>(){
    @Override public void accept(    GroupedFlowable<Integer,Integer> g){
      g.subscribe(ts1);
    }
  }
).subscribe(ts2);
  ts1.assertOf(SubscriberFusion.<Integer>assertFusionMode(QueueFuseable.ASYNC)).assertValues(2,3,4,5,6,7,8,9,10,11).assertNoErrors().assertComplete();
  ts2.assertOf(SubscriberFusion.<GroupedFlowable<Integer,Integer>>assertFusionMode(QueueFuseable.ASYNC)).assertValueCount(1).assertNoErrors().assertComplete();
}
