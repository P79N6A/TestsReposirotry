@Test public void mapFactoryExpiryCompletesGroupedFlowable(){
  final List<Integer> completed=new CopyOnWriteArrayList<Integer>();
  Function<Consumer<Object>,Map<Integer,Object>> evictingMapFactory=createEvictingMapFactorySynchronousOnly(1);
  PublishSubject<Integer> subject=PublishSubject.create();
  TestSubscriber<Integer> ts=subject.toFlowable(BackpressureStrategy.BUFFER).groupBy(Functions.<Integer>identity(),Functions.<Integer>identity(),true,16,evictingMapFactory).flatMap(addCompletedKey(completed)).test();
  subject.onNext(1);
  subject.onNext(2);
  subject.onNext(3);
  ts.assertValues(1,2,3).assertNotTerminated();
  assertEquals(Arrays.asList(1,2),completed);
  subject.onComplete();
  ts.assertComplete();
  ts.assertValueCount(3);
}
