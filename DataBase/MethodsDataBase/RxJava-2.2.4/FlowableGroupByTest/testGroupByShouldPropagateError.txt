@Test public void testGroupByShouldPropagateError(){
  final Throwable e=new RuntimeException("Oops");
  final TestSubscriber<Integer> inner1=new TestSubscriber<Integer>();
  final TestSubscriber<Integer> inner2=new TestSubscriber<Integer>();
  final TestSubscriber<GroupedFlowable<Integer,Integer>> outer=new TestSubscriber<GroupedFlowable<Integer,Integer>>(new DefaultSubscriber<GroupedFlowable<Integer,Integer>>(){
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onNext(    GroupedFlowable<Integer,Integer> f){
      if (f.getKey() == 0) {
        f.subscribe(inner1);
      }
 else {
        f.subscribe(inner2);
      }
    }
  }
);
  Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      subscriber.onNext(0);
      subscriber.onNext(1);
      subscriber.onError(e);
    }
  }
).groupBy(new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer i){
      return i % 2;
    }
  }
).subscribe(outer);
  assertEquals(Arrays.asList(e),outer.errors());
  assertEquals(Arrays.asList(e),inner1.errors());
  assertEquals(Arrays.asList(e),inner2.errors());
}
