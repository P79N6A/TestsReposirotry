@Test public void testgroupByBackpressure() throws InterruptedException {
  TestSubscriber<String> ts=new TestSubscriber<String>();
  Flowable.range(1,4000).groupBy(IS_EVEN2).flatMap(new Function<GroupedFlowable<Boolean,Integer>,Flowable<String>>(){
    @Override public Flowable<String> apply(    final GroupedFlowable<Boolean,Integer> g){
      return g.doOnComplete(new Action(){
        @Override public void run(){
          System.out.println("//////////////////// COMPLETED-A");
        }
      }
).observeOn(Schedulers.computation()).map(new Function<Integer,String>(){
        int c;
        @Override public String apply(        Integer l){
          if (g.getKey()) {
            if (c++ < 400) {
              try {
                Thread.sleep(1);
              }
 catch (              InterruptedException e) {
              }
            }
            return l + " is even.";
          }
 else {
            return l + " is odd.";
          }
        }
      }
).doOnComplete(new Action(){
        @Override public void run(){
          System.out.println("//////////////////// COMPLETED-B");
        }
      }
);
    }
  }
).doOnEach(new Consumer<Notification<String>>(){
    @Override public void accept(    Notification<String> t1){
      System.out.println("NEXT: " + t1);
    }
  }
).subscribe(ts);
  ts.awaitTerminalEvent();
  ts.assertNoErrors();
}
