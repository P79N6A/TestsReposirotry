@Test(timeout=1000) public void testCompletionIfInnerNotSubscribed() throws InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicInteger eventCounter=new AtomicInteger();
  Flowable.range(0,100).groupBy(new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer i){
      return i % 2;
    }
  }
).subscribe(new DefaultSubscriber<GroupedFlowable<Integer,Integer>>(){
    @Override public void onComplete(){
      latch.countDown();
    }
    @Override public void onError(    Throwable e){
      e.printStackTrace();
      latch.countDown();
    }
    @Override public void onNext(    GroupedFlowable<Integer,Integer> s){
      eventCounter.incrementAndGet();
      System.out.println("=> " + s);
    }
  }
);
  if (!latch.await(500,TimeUnit.MILLISECONDS)) {
    fail("timed out - never got completion");
  }
  assertEquals(2,eventCounter.get());
}
