@Test public void testRequestOverflow(){
  final AtomicBoolean completed=new AtomicBoolean(false);
  Flowable.just(1,2,3).groupBy(new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer t){
      return 1;
    }
  }
).concatMap(new Function<GroupedFlowable<Integer,Integer>,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    GroupedFlowable<Integer,Integer> g){
      return g;
    }
  }
).subscribe(new DefaultSubscriber<Integer>(){
    @Override public void onStart(){
      request(2);
    }
    @Override public void onComplete(){
      completed.set(true);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onNext(    Integer t){
      System.out.println(t);
      request(Long.MAX_VALUE - 1);
    }
  }
);
  assertTrue(completed.get());
}
