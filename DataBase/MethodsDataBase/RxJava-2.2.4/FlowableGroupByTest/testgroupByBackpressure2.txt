@Test public void testgroupByBackpressure2() throws InterruptedException {
  TestSubscriber<String> ts=new TestSubscriber<String>();
  Flowable.range(1,4000).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer v){
      System.out.println("testgroupByBackpressure2 >> " + v);
    }
  }
).groupBy(IS_EVEN2).flatMap(new Function<GroupedFlowable<Boolean,Integer>,Flowable<String>>(){
    @Override public Flowable<String> apply(    final GroupedFlowable<Boolean,Integer> g){
      return g.take(2).observeOn(Schedulers.computation()).map(new Function<Integer,String>(){
        @Override public String apply(        Integer l){
          if (g.getKey()) {
            try {
              Thread.sleep(1);
            }
 catch (            InterruptedException e) {
            }
            return l + " is even.";
          }
 else {
            return l + " is odd.";
          }
        }
      }
);
    }
  }
).subscribe(ts);
  ts.awaitTerminalEvent();
  ts.assertNoErrors();
}
