@Test public void testGroupsWithNestedSubscribeOn() throws InterruptedException {
  final ArrayList<String> results=new ArrayList<String>();
  Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> sub){
      sub.onSubscribe(new BooleanSubscription());
      sub.onNext(1);
      sub.onNext(2);
      sub.onNext(1);
      sub.onNext(2);
      sub.onComplete();
    }
  }
).groupBy(new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer t){
      return t;
    }
  }
).flatMap(new Function<GroupedFlowable<Integer,Integer>,Flowable<String>>(){
    @Override public Flowable<String> apply(    final GroupedFlowable<Integer,Integer> group){
      return group.subscribeOn(Schedulers.newThread()).map(new Function<Integer,String>(){
        @Override public String apply(        Integer t1){
          System.out.println("Received: " + t1 + " on group : "+ group.getKey());
          return "first groups: " + t1;
        }
      }
);
    }
  }
).doOnEach(new Consumer<Notification<String>>(){
    @Override public void accept(    Notification<String> t1){
      System.out.println("notification => " + t1);
    }
  }
).blockingForEach(new Consumer<String>(){
    @Override public void accept(    String s){
      results.add(s);
    }
  }
);
  System.out.println("Results: " + results);
  assertEquals(4,results.size());
}
