@Test public void testCancellationOfUpstreamWhenGroupedFlowableCompletes(){
  final AtomicBoolean cancelled=new AtomicBoolean();
  Flowable.just(1).repeat().doOnCancel(new Action(){
    @Override public void run() throws Exception {
      cancelled.set(true);
    }
  }
).groupBy(Functions.<Integer>identity(),Functions.<Integer>identity()).flatMap(new Function<GroupedFlowable<Integer,Integer>,Publisher<? extends Object>>(){
    @Override public Publisher<? extends Object> apply(    GroupedFlowable<Integer,Integer> g) throws Exception {
      return g.first(0).toFlowable();
    }
  }
).take(4).test().assertComplete();
  assertTrue(cancelled.get());
}
