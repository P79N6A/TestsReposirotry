/** 
 * Assert we get an IllegalStateException if trying to subscribe to an inner GroupedFlowable more than once.
 */
@Test public void testExceptionIfSubscribeToChildMoreThanOnce(){
  Flowable<Integer> source=Flowable.just(0);
  final AtomicReference<GroupedFlowable<Integer,Integer>> inner=new AtomicReference<GroupedFlowable<Integer,Integer>>();
  Flowable<GroupedFlowable<Integer,Integer>> m=source.groupBy(identity,dbl);
  m.subscribe(new Consumer<GroupedFlowable<Integer,Integer>>(){
    @Override public void accept(    GroupedFlowable<Integer,Integer> t1){
      inner.set(t1);
    }
  }
);
  inner.get().subscribe();
  Subscriber<Integer> subscriber2=TestHelper.mockSubscriber();
  inner.get().subscribe(subscriber2);
  verify(subscriber2,never()).onComplete();
  verify(subscriber2,never()).onNext(anyInt());
  verify(subscriber2).onError(any(IllegalStateException.class));
}
