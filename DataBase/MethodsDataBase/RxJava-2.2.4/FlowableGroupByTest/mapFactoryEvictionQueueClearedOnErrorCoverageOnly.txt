@Test public void mapFactoryEvictionQueueClearedOnErrorCoverageOnly(){
  Function<Consumer<Object>,Map<Integer,Object>> evictingMapFactory=createEvictingMapFactorySynchronousOnly(1);
  PublishSubject<Integer> subject=PublishSubject.create();
  TestSubscriber<Integer> ts=subject.toFlowable(BackpressureStrategy.BUFFER).groupBy(Functions.<Integer>identity(),Functions.<Integer>identity(),true,16,evictingMapFactory).flatMap(new Function<GroupedFlowable<Integer,Integer>,Publisher<Integer>>(){
    @Override public Publisher<Integer> apply(    GroupedFlowable<Integer,Integer> g) throws Exception {
      return g;
    }
  }
).test();
  RuntimeException ex=new RuntimeException();
  subject.onError(ex);
  ts.assertNoValues().assertError(ex);
}
