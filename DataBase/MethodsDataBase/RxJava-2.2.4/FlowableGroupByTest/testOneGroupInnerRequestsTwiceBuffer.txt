@Test public void testOneGroupInnerRequestsTwiceBuffer(){
  TestSubscriber<Object> ts1=new TestSubscriber<Object>(0L);
  final TestSubscriber<Object> ts2=new TestSubscriber<Object>(0L);
  Flowable.range(1,Flowable.bufferSize() * 2).groupBy(new Function<Integer,Object>(){
    @Override public Object apply(    Integer v){
      return 1;
    }
  }
).doOnNext(new Consumer<GroupedFlowable<Object,Integer>>(){
    @Override public void accept(    GroupedFlowable<Object,Integer> g){
      g.subscribe(ts2);
    }
  }
).subscribe(ts1);
  ts1.assertNoValues();
  ts1.assertNoErrors();
  ts1.assertNotComplete();
  ts2.assertNoValues();
  ts2.assertNoErrors();
  ts2.assertNotComplete();
  ts1.request(1);
  ts1.assertValueCount(1);
  ts1.assertNoErrors();
  ts1.assertNotComplete();
  ts2.assertNoValues();
  ts2.assertNoErrors();
  ts2.assertNotComplete();
  ts2.request(Flowable.bufferSize() * 2);
  ts2.assertValueCount(Flowable.bufferSize() * 2);
  ts2.assertNoErrors();
  ts2.assertComplete();
}
