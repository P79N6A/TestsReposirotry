@Test public void testGroupByCompose(){
  Observable<Movie> movies=Observable.just(new HorrorMovie(),new ActionMovie(),new Movie());
  TestObserver<String> to=new TestObserver<String>();
  movies.groupBy(new Function<Movie,Object>(){
    @Override public Object apply(    Movie v){
      return v.getClass();
    }
  }
).doOnNext(new Consumer<GroupedObservable<Object,Movie>>(){
    @Override public void accept(    GroupedObservable<Object,Movie> g){
      System.out.println(g.getKey());
    }
  }
).flatMap(new Function<GroupedObservable<Object,Movie>,Observable<String>>(){
    @Override public Observable<String> apply(    GroupedObservable<Object,Movie> g){
      return g.doOnNext(new Consumer<Movie>(){
        @Override public void accept(        Movie pv){
          System.out.println(pv);
        }
      }
).compose(new ObservableTransformer<Movie,Movie>(){
        @Override public Observable<Movie> apply(        Observable<Movie> m){
          return m.concatWith(Observable.just(new ActionMovie()));
        }
      }
).map(new Function<Movie,String>(){
        @Override public String apply(        Movie v){
          return v.toString();
        }
      }
);
    }
  }
).subscribe(to);
  to.assertTerminated();
  to.assertNoErrors();
  assertEquals(6,to.valueCount());
}
