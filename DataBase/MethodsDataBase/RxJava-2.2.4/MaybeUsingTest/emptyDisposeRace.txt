@Test public void emptyDisposeRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final PublishSubject<Integer> ps=PublishSubject.create();
    final TestObserver<Integer> to=Maybe.using(new Callable<Object>(){
      @Override public Object call() throws Exception {
        return 1;
      }
    }
,new Function<Object,MaybeSource<Integer>>(){
      @Override public MaybeSource<Integer> apply(      Object v) throws Exception {
        return ps.firstElement();
      }
    }
,new Consumer<Object>(){
      @Override public void accept(      Object d) throws Exception {
      }
    }
,true).test();
    Runnable r1=new Runnable(){
      @Override public void run(){
        to.cancel();
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        ps.onComplete();
      }
    }
;
    TestHelper.race(r1,r2);
  }
}
