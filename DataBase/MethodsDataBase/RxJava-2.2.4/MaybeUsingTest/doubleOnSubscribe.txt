@Test public void doubleOnSubscribe(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    Maybe.using(new Callable<Object>(){
      @Override public Object call() throws Exception {
        return 1;
      }
    }
,new Function<Object,MaybeSource<Integer>>(){
      @Override public MaybeSource<Integer> apply(      Object v) throws Exception {
        return Maybe.wrap(new MaybeSource<Integer>(){
          @Override public void subscribe(          MaybeObserver<? super Integer> observer){
            Disposable d1=Disposables.empty();
            observer.onSubscribe(d1);
            Disposable d2=Disposables.empty();
            observer.onSubscribe(d2);
            assertFalse(d1.isDisposed());
            assertTrue(d2.isDisposed());
          }
        }
);
      }
    }
,new Consumer<Object>(){
      @Override public void accept(      Object d) throws Exception {
      }
    }
,false).test();
    TestHelper.assertError(errors,0,IllegalStateException.class,"Disposable already set!");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
