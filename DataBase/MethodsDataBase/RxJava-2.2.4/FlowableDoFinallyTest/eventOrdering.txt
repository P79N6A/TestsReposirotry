@Test public void eventOrdering(){
  final List<String> list=new ArrayList<String>();
  Flowable.error(new TestException()).doOnCancel(new Action(){
    @Override public void run() throws Exception {
      list.add("cancel");
    }
  }
).doFinally(new Action(){
    @Override public void run() throws Exception {
      list.add("finally");
    }
  }
).subscribe(new Consumer<Object>(){
    @Override public void accept(    Object v) throws Exception {
      list.add("onNext");
    }
  }
,new Consumer<Throwable>(){
    @Override public void accept(    Throwable e) throws Exception {
      list.add("onError");
    }
  }
,new Action(){
    @Override public void run() throws Exception {
      list.add("onComplete");
    }
  }
);
  assertEquals(Arrays.asList("onError","finally"),list);
}
