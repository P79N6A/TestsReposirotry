@Test public void clearIsEmptyConditional(){
  Flowable.range(1,5).doFinally(this).filter(Functions.alwaysTrue()).subscribe(new FlowableSubscriber<Integer>(){
    @Override public void onSubscribe(    Subscription s){
      @SuppressWarnings("unchecked") QueueSubscription<Integer> qs=(QueueSubscription<Integer>)s;
      qs.requestFusion(QueueFuseable.ANY);
      assertFalse(qs.isEmpty());
      try {
        assertEquals(1,qs.poll().intValue());
      }
 catch (      Throwable ex) {
        throw new RuntimeException(ex);
      }
      assertFalse(qs.isEmpty());
      qs.clear();
      assertTrue(qs.isEmpty());
      qs.cancel();
    }
    @Override public void onNext(    Integer t){
    }
    @Override public void onError(    Throwable t){
    }
    @Override public void onComplete(){
    }
  }
);
  assertEquals(1,calls);
}
