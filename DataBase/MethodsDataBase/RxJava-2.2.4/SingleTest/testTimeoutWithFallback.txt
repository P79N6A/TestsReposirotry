@Test public void testTimeoutWithFallback(){
  TestSubscriber<String> ts=new TestSubscriber<String>();
  Single<String> s1=Single.<String>unsafeCreate(new SingleSource<String>(){
    @Override public void subscribe(    SingleObserver<? super String> observer){
      observer.onSubscribe(Disposables.empty());
      try {
        Thread.sleep(5000);
      }
 catch (      InterruptedException e) {
      }
      observer.onSuccess("success");
    }
  }
).subscribeOn(Schedulers.io());
  s1.timeout(100,TimeUnit.MILLISECONDS,Single.just("hello")).toFlowable().subscribe(ts);
  ts.awaitTerminalEvent();
  ts.assertNoErrors();
  ts.assertValue("hello");
}
