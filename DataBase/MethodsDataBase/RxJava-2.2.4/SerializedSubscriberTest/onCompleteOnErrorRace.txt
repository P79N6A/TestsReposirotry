@Test public void onCompleteOnErrorRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
      final SerializedSubscriber<Integer> so=new SerializedSubscriber<Integer>(ts);
      BooleanSubscription bs=new BooleanSubscription();
      so.onSubscribe(bs);
      final Throwable ex=new TestException();
      Runnable r1=new Runnable(){
        @Override public void run(){
          so.onError(ex);
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          so.onComplete();
        }
      }
;
      TestHelper.race(r1,r2);
      ts.awaitDone(5,TimeUnit.SECONDS);
      if (ts.completions() != 0) {
        ts.assertResult();
        TestHelper.assertUndeliverable(errors,0,TestException.class);
      }
 else {
        ts.assertFailure(TestException.class).assertError(ex);
        assertTrue("" + errors,errors.isEmpty());
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
