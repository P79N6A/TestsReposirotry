@Test public void supplierMainAndBoundaryBothError(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    final AtomicReference<Observer<? super Object>> ref=new AtomicReference<Observer<? super Object>>();
    TestObserver<Observable<Object>> to=Observable.error(new TestException("main")).window(Functions.justCallable(new Observable<Object>(){
      @Override protected void subscribeActual(      Observer<? super Object> observer){
        observer.onSubscribe(Disposables.empty());
        ref.set(observer);
      }
    }
)).test();
    to.assertValueCount(1).assertError(TestException.class).assertErrorMessage("main").assertNotComplete();
    ref.get().onError(new TestException("inner"));
    TestHelper.assertUndeliverable(errors,0,TestException.class,"inner");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
