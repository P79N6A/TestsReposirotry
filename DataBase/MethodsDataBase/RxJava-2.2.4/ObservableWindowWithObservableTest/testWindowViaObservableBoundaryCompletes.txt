@Test public void testWindowViaObservableBoundaryCompletes(){
  PublishSubject<Integer> source=PublishSubject.create();
  PublishSubject<Integer> boundary=PublishSubject.create();
  final Observer<Object> o=TestHelper.mockObserver();
  final List<Observer<Object>> values=new ArrayList<Observer<Object>>();
  Observer<Observable<Integer>> wo=new DefaultObserver<Observable<Integer>>(){
    @Override public void onNext(    Observable<Integer> args){
      final Observer<Object> mo=TestHelper.mockObserver();
      values.add(mo);
      args.subscribe(mo);
    }
    @Override public void onError(    Throwable e){
      o.onError(e);
    }
    @Override public void onComplete(){
      o.onComplete();
    }
  }
;
  source.window(boundary).subscribe(wo);
  int n=30;
  for (int i=0; i < n; i++) {
    source.onNext(i);
    if (i % 3 == 2 && i < n - 1) {
      boundary.onNext(i / 3);
    }
  }
  boundary.onComplete();
  assertEquals(n / 3,values.size());
  int j=0;
  for (  Observer<Object> mo : values) {
    for (int i=0; i < 3; i++) {
      verify(mo).onNext(j + i);
    }
    verify(mo).onComplete();
    verify(mo,never()).onError(any(Throwable.class));
    j+=3;
  }
  verify(o).onComplete();
  verify(o,never()).onError(any(Throwable.class));
}
