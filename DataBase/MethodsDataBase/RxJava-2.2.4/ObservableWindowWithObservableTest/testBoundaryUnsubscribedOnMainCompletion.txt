@Test public void testBoundaryUnsubscribedOnMainCompletion(){
  PublishSubject<Integer> source=PublishSubject.create();
  final PublishSubject<Integer> boundary=PublishSubject.create();
  Callable<Observable<Integer>> boundaryFunc=new Callable<Observable<Integer>>(){
    @Override public Observable<Integer> call(){
      return boundary;
    }
  }
;
  TestObserver<Observable<Integer>> to=new TestObserver<Observable<Integer>>();
  source.window(boundaryFunc).subscribe(to);
  assertTrue(source.hasObservers());
  assertTrue(boundary.hasObservers());
  source.onComplete();
  assertFalse(source.hasObservers());
  assertFalse(boundary.hasObservers());
  to.assertComplete();
  to.assertNoErrors();
  to.assertValueCount(1);
}
