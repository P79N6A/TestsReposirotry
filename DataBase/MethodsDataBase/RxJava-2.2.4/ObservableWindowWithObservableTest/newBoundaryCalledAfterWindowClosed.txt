@Test public void newBoundaryCalledAfterWindowClosed(){
  final AtomicInteger calls=new AtomicInteger();
  PublishSubject<Integer> source=PublishSubject.create();
  final PublishSubject<Integer> boundary=PublishSubject.create();
  Callable<Observable<Integer>> boundaryFunc=new Callable<Observable<Integer>>(){
    @Override public Observable<Integer> call(){
      calls.getAndIncrement();
      return boundary;
    }
  }
;
  TestObserver<Observable<Integer>> to=new TestObserver<Observable<Integer>>();
  source.window(boundaryFunc).subscribe(to);
  source.onNext(1);
  boundary.onNext(1);
  assertTrue(boundary.hasObservers());
  source.onNext(2);
  boundary.onNext(2);
  assertTrue(boundary.hasObservers());
  source.onNext(3);
  boundary.onNext(3);
  assertTrue(boundary.hasObservers());
  source.onNext(4);
  source.onComplete();
  to.assertNoErrors();
  to.assertValueCount(4);
  to.assertComplete();
  assertFalse(source.hasObservers());
  assertFalse(boundary.hasObservers());
}
