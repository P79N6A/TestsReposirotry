@Test public void testWindowViaObservableSourceThrows(){
  PublishSubject<Integer> source=PublishSubject.create();
  PublishSubject<Integer> boundary=PublishSubject.create();
  final Observer<Object> o=TestHelper.mockObserver();
  final List<Observer<Object>> values=new ArrayList<Observer<Object>>();
  Observer<Observable<Integer>> wo=new DefaultObserver<Observable<Integer>>(){
    @Override public void onNext(    Observable<Integer> args){
      final Observer<Object> mo=TestHelper.mockObserver();
      values.add(mo);
      args.subscribe(mo);
    }
    @Override public void onError(    Throwable e){
      o.onError(e);
    }
    @Override public void onComplete(){
      o.onComplete();
    }
  }
;
  source.window(boundary).subscribe(wo);
  source.onNext(0);
  source.onNext(1);
  source.onNext(2);
  source.onError(new TestException());
  assertEquals(1,values.size());
  Observer<Object> mo=values.get(0);
  verify(mo).onNext(0);
  verify(mo).onNext(1);
  verify(mo).onNext(2);
  verify(mo).onError(any(TestException.class));
  verify(o,never()).onComplete();
  verify(o).onError(any(TestException.class));
}
