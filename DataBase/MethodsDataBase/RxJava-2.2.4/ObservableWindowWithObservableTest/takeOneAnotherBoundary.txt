@Test public void takeOneAnotherBoundary(){
  final AtomicReference<Observer<? super Object>> refMain=new AtomicReference<Observer<? super Object>>();
  final AtomicReference<Observer<? super Object>> ref=new AtomicReference<Observer<? super Object>>();
  TestObserver<Observable<Object>> to=new Observable<Object>(){
    @Override protected void subscribeActual(    Observer<? super Object> observer){
      observer.onSubscribe(Disposables.empty());
      refMain.set(observer);
    }
  }
.window(new Observable<Object>(){
    @Override protected void subscribeActual(    Observer<? super Object> observer){
      observer.onSubscribe(Disposables.empty());
      ref.set(observer);
    }
  }
).test();
  to.assertValueCount(1).assertNotTerminated().cancel();
  ref.get().onNext(1);
  to.assertValueCount(1).assertNotTerminated();
}
