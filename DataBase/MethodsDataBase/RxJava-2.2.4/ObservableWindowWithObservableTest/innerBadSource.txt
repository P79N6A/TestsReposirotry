@Test public void innerBadSource(){
  TestHelper.checkBadSourceObservable(new Function<Observable<Integer>,Object>(){
    @Override public Object apply(    Observable<Integer> o) throws Exception {
      return Observable.just(1).window(o).flatMap(new Function<Observable<Integer>,ObservableSource<Integer>>(){
        @Override public ObservableSource<Integer> apply(        Observable<Integer> v) throws Exception {
          return v;
        }
      }
);
    }
  }
,false,1,1,(Object[])null);
  TestHelper.checkBadSourceObservable(new Function<Observable<Integer>,Object>(){
    @Override public Object apply(    Observable<Integer> o) throws Exception {
      return Observable.just(1).window(Functions.justCallable(o)).flatMap(new Function<Observable<Integer>,ObservableSource<Integer>>(){
        @Override public ObservableSource<Integer> apply(        Observable<Integer> v) throws Exception {
          return v;
        }
      }
);
    }
  }
,false,1,1,(Object[])null);
}
