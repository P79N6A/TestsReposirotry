@Test public void mainNextBoundaryNextRace(){
  for (int i=0; i < TestHelper.RACE_LONG_LOOPS; i++) {
    final AtomicReference<Observer<? super Object>> refMain=new AtomicReference<Observer<? super Object>>();
    final AtomicReference<Observer<? super Object>> ref=new AtomicReference<Observer<? super Object>>();
    TestObserver<Observable<Object>> to=new Observable<Object>(){
      @Override protected void subscribeActual(      Observer<? super Object> observer){
        observer.onSubscribe(Disposables.empty());
        refMain.set(observer);
      }
    }
.window(new Observable<Object>(){
      @Override protected void subscribeActual(      Observer<? super Object> observer){
        observer.onSubscribe(Disposables.empty());
        ref.set(observer);
      }
    }
).test();
    Runnable r1=new Runnable(){
      @Override public void run(){
        refMain.get().onNext(1);
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        ref.get().onNext(1);
      }
    }
;
    TestHelper.race(r1,r2);
    to.assertValueCount(2).assertNotComplete().assertNoErrors();
  }
}
