@SuppressWarnings("unchecked") @Test public void zipNull() throws Exception {
  @SuppressWarnings("rawtypes") Class<Single> clazz=Single.class;
  for (int argCount=3; argCount < 10; argCount++) {
    for (int argNull=1; argNull <= argCount; argNull++) {
      Class<?>[] params=new Class[argCount + 1];
      Arrays.fill(params,SingleSource.class);
      Class<?> fniClass=Class.forName("io.reactivex.functions.Function" + argCount);
      params[argCount]=fniClass;
      Object[] values=new Object[argCount + 1];
      Arrays.fill(values,just1);
      values[argNull - 1]=null;
      values[argCount]=Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{fniClass},new InvocationHandler(){
        @Override public Object invoke(        Object o,        Method m,        Object[] a) throws Throwable {
          return 1;
        }
      }
);
      Method m=clazz.getMethod("zip",params);
      try {
        m.invoke(null,values);
        Assert.fail("No exception for argCount " + argCount + " / argNull "+ argNull);
      }
 catch (      InvocationTargetException ex) {
        if (!(ex.getCause() instanceof NullPointerException)) {
          Assert.fail("Unexpected exception for argCount " + argCount + " / argNull "+ argNull+ ": "+ ex);
        }
      }
      values[argCount]=Proxy.newProxyInstance(getClass().getClassLoader(),new Class[]{fniClass},new InvocationHandler(){
        @Override public Object invoke(        Object o,        Method m1,        Object[] a) throws Throwable {
          return null;
        }
      }
);
      try {
        ((Single<Object>)m.invoke(null,values)).blockingGet();
        Assert.fail("No exception for argCount " + argCount + " / argNull "+ argNull);
      }
 catch (      InvocationTargetException ex) {
        if (!(ex.getCause() instanceof NullPointerException)) {
          Assert.fail("Unexpected exception for argCount " + argCount + " / argNull "+ argNull+ ": "+ ex);
        }
      }
    }
    Class<?>[] params=new Class[argCount + 1];
    Arrays.fill(params,SingleSource.class);
    Class<?> fniClass=Class.forName("io.reactivex.functions.Function" + argCount);
    params[argCount]=fniClass;
    Object[] values=new Object[argCount + 1];
    Arrays.fill(values,just1);
    values[argCount]=null;
    Method m=clazz.getMethod("zip",params);
    try {
      m.invoke(null,values);
      Assert.fail("No exception for argCount " + argCount + " / zipper function ");
    }
 catch (    InvocationTargetException ex) {
      if (!(ex.getCause() instanceof NullPointerException)) {
        Assert.fail("Unexpected exception for argCount " + argCount + " / zipper function: "+ ex);
      }
    }
  }
}
