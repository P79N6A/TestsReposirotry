@Test public void unsafeChildThrows(){
  final AtomicInteger count=new AtomicInteger();
  Flowable<Integer> source=Flowable.range(1,100).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer t){
      count.getAndIncrement();
    }
  }
).replay().autoConnect();
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>(){
    @Override public void onNext(    Integer t){
      throw new TestException();
    }
  }
;
  source.subscribe(ts);
  Assert.assertEquals(100,count.get());
  ts.assertNoValues();
  ts.assertNotComplete();
  ts.assertError(TestException.class);
}
