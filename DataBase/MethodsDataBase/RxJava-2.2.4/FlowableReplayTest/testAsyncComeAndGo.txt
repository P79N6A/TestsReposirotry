@Test public void testAsyncComeAndGo(){
  Flowable<Long> source=Flowable.interval(1,1,TimeUnit.MILLISECONDS).take(1000).subscribeOn(Schedulers.io());
  Flowable<Long> cached=source.replay().autoConnect();
  Flowable<Long> output=cached.observeOn(Schedulers.computation(),false,1024);
  List<TestSubscriber<Long>> list=new ArrayList<TestSubscriber<Long>>(100);
  for (int i=0; i < 100; i++) {
    TestSubscriber<Long> ts=new TestSubscriber<Long>();
    list.add(ts);
    output.skip(i * 10).take(10).subscribe(ts);
  }
  List<Long> expected=new ArrayList<Long>();
  for (int i=0; i < 10; i++) {
    expected.add((long)(i - 10));
  }
  int j=0;
  for (  TestSubscriber<Long> ts : list) {
    ts.awaitTerminalEvent(3,TimeUnit.SECONDS);
    ts.assertNoErrors();
    ts.assertTerminated();
    for (int i=j * 10; i < j * 10 + 10; i++) {
      expected.set(i - j * 10,(long)i);
    }
    ts.assertValueSequence(expected);
    j++;
  }
}
