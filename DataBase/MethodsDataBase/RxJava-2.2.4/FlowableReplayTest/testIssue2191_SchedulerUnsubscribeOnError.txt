/** 
 * Specifically test interaction with a Scheduler with subscribeOn.
 * @throws Exception functional interfaces declare throws Exception
 */
@SuppressWarnings("unchecked") @Test public void testIssue2191_SchedulerUnsubscribeOnError() throws Exception {
  Consumer<Integer> sourceNext=mock(Consumer.class);
  Action sourceCompleted=mock(Action.class);
  Consumer<Throwable> sourceError=mock(Consumer.class);
  Action sourceUnsubscribed=mock(Action.class);
  final Scheduler mockScheduler=mock(Scheduler.class);
  final Disposable mockSubscription=mock(Disposable.class);
  Worker spiedWorker=workerSpy(mockSubscription);
  Subscriber<Integer> mockObserverBeforeConnect=TestHelper.mockSubscriber();
  Subscriber<Integer> mockObserverAfterConnect=TestHelper.mockSubscriber();
  when(mockScheduler.createWorker()).thenReturn(spiedWorker);
  Function<Integer,Integer> mockFunc=mock(Function.class);
  IllegalArgumentException illegalArgumentException=new IllegalArgumentException();
  when(mockFunc.apply(1)).thenReturn(1);
  when(mockFunc.apply(2)).thenThrow(illegalArgumentException);
  ConnectableFlowable<Integer> replay=Flowable.just(1,2,3).map(mockFunc).doOnNext(sourceNext).doOnCancel(sourceUnsubscribed).doOnComplete(sourceCompleted).doOnError(sourceError).subscribeOn(mockScheduler).replay();
  replay.subscribe(mockObserverBeforeConnect);
  replay.subscribe(mockObserverBeforeConnect);
  replay.connect();
  replay.subscribe(mockObserverAfterConnect);
  replay.subscribe(mockObserverAfterConnect);
  verify(mockObserverBeforeConnect,times(2)).onSubscribe((Subscription)any());
  verify(mockObserverAfterConnect,times(2)).onSubscribe((Subscription)any());
  verify(mockScheduler,times(1)).createWorker();
  verify(spiedWorker,times(1)).schedule((Runnable)notNull());
  verify(sourceNext,times(1)).accept(1);
  verify(sourceError,times(1)).accept(illegalArgumentException);
  verifyObserver(mockObserverBeforeConnect,2,2,illegalArgumentException);
  verifyObserver(mockObserverAfterConnect,2,2,illegalArgumentException);
  verify(spiedWorker,times(1)).dispose();
  verify(sourceUnsubscribed,never()).run();
  verifyNoMoreInteractions(sourceNext);
  verifyNoMoreInteractions(sourceCompleted);
  verifyNoMoreInteractions(sourceError);
  verifyNoMoreInteractions(sourceUnsubscribed);
  verifyNoMoreInteractions(spiedWorker);
  verifyNoMoreInteractions(mockSubscription);
  verifyNoMoreInteractions(mockScheduler);
  verifyNoMoreInteractions(mockObserverBeforeConnect);
  verifyNoMoreInteractions(mockObserverAfterConnect);
}
