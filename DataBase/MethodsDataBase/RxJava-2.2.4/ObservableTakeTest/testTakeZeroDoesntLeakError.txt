@Test @Ignore("take(0) is now empty() and doesn't even subscribe to the original source") public void testTakeZeroDoesntLeakError(){
  final AtomicBoolean subscribed=new AtomicBoolean(false);
  final Disposable bs=Disposables.empty();
  Observable<String> source=Observable.unsafeCreate(new ObservableSource<String>(){
    @Override public void subscribe(    Observer<? super String> observer){
      subscribed.set(true);
      observer.onSubscribe(bs);
      observer.onError(new Throwable("test failed"));
    }
  }
);
  Observer<String> observer=TestHelper.mockObserver();
  source.take(0).subscribe(observer);
  assertTrue("source subscribed",subscribed.get());
  assertTrue("source unsubscribed",bs.isDisposed());
  verify(observer,never()).onNext(anyString());
  verify(observer,never()).onError(any(Throwable.class));
  verify(observer,times(1)).onComplete();
  verifyNoMoreInteractions(observer);
}
