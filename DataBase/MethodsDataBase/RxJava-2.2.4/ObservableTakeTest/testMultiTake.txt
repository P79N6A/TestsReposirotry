@Test(timeout=2000) public void testMultiTake(){
  final AtomicInteger count=new AtomicInteger();
  Observable.unsafeCreate(new ObservableSource<Integer>(){
    @Override public void subscribe(    Observer<? super Integer> observer){
      Disposable bs=Disposables.empty();
      observer.onSubscribe(bs);
      for (int i=0; !bs.isDisposed(); i++) {
        System.out.println("Emit: " + i);
        count.incrementAndGet();
        observer.onNext(i);
      }
    }
  }
).take(100).take(1).blockingForEach(new Consumer<Integer>(){
    @Override public void accept(    Integer t1){
      System.out.println("Receive: " + t1);
    }
  }
);
  assertEquals(1,count.get());
}
