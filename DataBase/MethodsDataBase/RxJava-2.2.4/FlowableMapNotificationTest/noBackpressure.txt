@Test public void noBackpressure(){
  TestSubscriber<Object> ts=TestSubscriber.create(0L);
  PublishProcessor<Integer> pp=PublishProcessor.create();
  new FlowableMapNotification<Integer,Integer>(pp,new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer item){
      return item + 1;
    }
  }
,new Function<Throwable,Integer>(){
    @Override public Integer apply(    Throwable e){
      return 0;
    }
  }
,new Callable<Integer>(){
    @Override public Integer call(){
      return 5;
    }
  }
).subscribe(ts);
  ts.assertNoValues();
  ts.assertNoErrors();
  ts.assertNotComplete();
  pp.onNext(1);
  pp.onNext(2);
  pp.onNext(3);
  pp.onComplete();
  ts.assertNoValues();
  ts.assertNoErrors();
  ts.assertNotComplete();
  ts.request(1);
  ts.assertValue(0);
  ts.assertNoErrors();
  ts.assertComplete();
}
