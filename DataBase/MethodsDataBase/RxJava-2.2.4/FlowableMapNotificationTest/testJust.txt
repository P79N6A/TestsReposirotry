@Test public void testJust(){
  TestSubscriber<Object> ts=new TestSubscriber<Object>();
  Flowable.just(1).flatMap(new Function<Integer,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Integer item){
      return Flowable.just((Object)(item + 1));
    }
  }
,new Function<Throwable,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Throwable e){
      return Flowable.error(e);
    }
  }
,new Callable<Flowable<Object>>(){
    @Override public Flowable<Object> call(){
      return Flowable.never();
    }
  }
).subscribe(ts);
  ts.assertNoErrors();
  ts.assertNotComplete();
  ts.assertValue(2);
}
