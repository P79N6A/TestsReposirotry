@Test public void backpressure(){
  TestSubscriber<Object> ts=TestSubscriber.create(0L);
  new FlowableMapNotification<Integer,Integer>(Flowable.range(1,3),new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer item){
      return item + 1;
    }
  }
,new Function<Throwable,Integer>(){
    @Override public Integer apply(    Throwable e){
      return 0;
    }
  }
,new Callable<Integer>(){
    @Override public Integer call(){
      return 5;
    }
  }
).subscribe(ts);
  ts.assertNoValues();
  ts.assertNoErrors();
  ts.assertNotComplete();
  ts.request(3);
  ts.assertValues(2,3,4);
  ts.assertNoErrors();
  ts.assertNotComplete();
  ts.request(1);
  ts.assertValues(2,3,4,5);
  ts.assertNoErrors();
  ts.assertComplete();
}
