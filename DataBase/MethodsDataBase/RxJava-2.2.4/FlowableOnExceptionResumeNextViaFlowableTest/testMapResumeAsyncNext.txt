@Test public void testMapResumeAsyncNext(){
  Flowable<String> w=Flowable.just("one","fail","two","three","fail");
  TestObservable f=new TestObservable("twoResume","threeResume");
  Flowable<String> resume=Flowable.unsafeCreate(f);
  w=w.map(new Function<String,String>(){
    @Override public String apply(    String s){
      if ("fail".equals(s)) {
        throw new RuntimeException("Forced Failure");
      }
      System.out.println("BadMapper:" + s);
      return s;
    }
  }
);
  Flowable<String> flowable=w.onExceptionResumeNext(resume);
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  flowable.subscribe(subscriber);
  try {
    if (f.t != null) {
      f.t.join();
    }
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
  verify(subscriber,times(1)).onNext("one");
  verify(subscriber,never()).onNext("two");
  verify(subscriber,never()).onNext("three");
  verify(subscriber,times(1)).onNext("twoResume");
  verify(subscriber,times(1)).onNext("threeResume");
  verify(subscriber,Mockito.never()).onError(any(Throwable.class));
  verify(subscriber,times(1)).onComplete();
}
