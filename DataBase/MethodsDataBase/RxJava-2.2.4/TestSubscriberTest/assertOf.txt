@Test public void assertOf(){
  TestSubscriber<Integer> ts=TestSubscriber.create();
  ts.assertOf(new Consumer<TestSubscriber<Integer>>(){
    @Override public void accept(    TestSubscriber<Integer> f) throws Exception {
      f.assertNotSubscribed();
    }
  }
);
  try {
    ts.assertOf(new Consumer<TestSubscriber<Integer>>(){
      @Override public void accept(      TestSubscriber<Integer> f) throws Exception {
        f.assertSubscribed();
      }
    }
);
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError ex) {
  }
  try {
    ts.assertOf(new Consumer<TestSubscriber<Integer>>(){
      @Override public void accept(      TestSubscriber<Integer> f) throws Exception {
        throw new IllegalArgumentException();
      }
    }
);
    throw new RuntimeException("Should have thrown");
  }
 catch (  IllegalArgumentException ex) {
  }
}
