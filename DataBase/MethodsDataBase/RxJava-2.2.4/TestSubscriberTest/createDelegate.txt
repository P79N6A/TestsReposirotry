@Test public void createDelegate(){
  TestSubscriber<Integer> ts1=TestSubscriber.create();
  TestSubscriber<Integer> ts=TestSubscriber.create(ts1);
  ts.assertNotSubscribed();
  assertFalse(ts.hasSubscription());
  ts.onSubscribe(new BooleanSubscription());
  try {
    ts.assertNotSubscribed();
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError ex) {
  }
  assertTrue(ts.hasSubscription());
  assertFalse(ts.isDisposed());
  ts.onNext(1);
  ts.onError(new TestException());
  ts.onComplete();
  ts1.assertValue(1).assertError(TestException.class).assertComplete();
  ts.dispose();
  assertTrue(ts.isDisposed());
  assertTrue(ts.isTerminated());
  assertSame(Thread.currentThread(),ts.lastThread());
  try {
    ts.assertNoValues();
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    ts.assertValueCount(0);
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  ts.assertValueSequence(Collections.singletonList(1));
  try {
    ts.assertValueSequence(Collections.singletonList(2));
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  ts.assertValueSet(Collections.singleton(1));
  try {
    ts.assertValueSet(Collections.singleton(2));
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
}
