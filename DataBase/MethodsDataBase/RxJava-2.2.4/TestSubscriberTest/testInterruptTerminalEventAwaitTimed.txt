@Test public void testInterruptTerminalEventAwaitTimed(){
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  final Thread t0=Thread.currentThread();
  Worker w=Schedulers.computation().createWorker();
  try {
    w.schedule(new Runnable(){
      @Override public void run(){
        t0.interrupt();
      }
    }
,200,TimeUnit.MILLISECONDS);
    try {
      if (ts.awaitTerminalEvent(5,TimeUnit.SECONDS)) {
        fail("Did not interrupt wait!");
      }
    }
 catch (    RuntimeException ex) {
      if (!(ex.getCause() instanceof InterruptedException)) {
        fail("The cause is not InterruptedException! " + ex.getCause());
      }
    }
  }
  finally {
    Thread.interrupted();
    w.dispose();
  }
}
