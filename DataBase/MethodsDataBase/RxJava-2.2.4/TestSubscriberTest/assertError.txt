@Test public void assertError(){
  TestSubscriber<Integer> ts=TestSubscriber.create();
  try {
    ts.assertError(TestException.class);
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError ex) {
  }
  try {
    ts.assertError(new TestException());
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError ex) {
  }
  try {
    ts.assertErrorMessage("");
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    ts.assertError(Functions.<Throwable>alwaysTrue());
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError ex) {
  }
  try {
    ts.assertSubscribed();
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    ts.assertTerminated();
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  ts.onSubscribe(new BooleanSubscription());
  ts.assertSubscribed();
  ts.assertNoErrors();
  TestException ex=new TestException("Forced failure");
  ts.onError(ex);
  ts.assertError(ex);
  ts.assertError(TestException.class);
  ts.assertErrorMessage("Forced failure");
  ts.assertError(Functions.<Throwable>alwaysTrue());
  ts.assertError(new Predicate<Throwable>(){
    @Override public boolean test(    Throwable t){
      return t.getMessage() != null && t.getMessage().contains("Forced");
    }
  }
);
  try {
    ts.assertErrorMessage("");
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    ts.assertError(new RuntimeException());
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    ts.assertError(IOException.class);
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    ts.assertNoErrors();
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    ts.assertError(Functions.<Throwable>alwaysFalse());
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  ts.assertTerminated();
  ts.assertValueCount(0);
  ts.assertNoValues();
}
