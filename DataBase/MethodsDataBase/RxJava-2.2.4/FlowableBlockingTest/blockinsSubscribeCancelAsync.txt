@Test public void blockinsSubscribeCancelAsync(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    final PublishProcessor<Integer> pp=PublishProcessor.create();
    final Runnable r1=new Runnable(){
      @Override public void run(){
        ts.cancel();
      }
    }
;
    final Runnable r2=new Runnable(){
      @Override public void run(){
        pp.onNext(1);
      }
    }
;
    final AtomicInteger c=new AtomicInteger(2);
    Schedulers.computation().scheduleDirect(new Runnable(){
      @Override public void run(){
        c.decrementAndGet();
        while (c.get() != 0 && !pp.hasSubscribers()) {
        }
        TestHelper.race(r1,r2);
      }
    }
);
    c.decrementAndGet();
    while (c.get() != 0) {
    }
    pp.blockingSubscribe(ts);
  }
}
