@Test public void boundedBlockingSubscribeConsumerConsumerActionBufferExceed(){
  final List<Object> list=new ArrayList<Object>();
  Consumer<Object> cons=new Consumer<Object>(){
    @Override public void accept(    Object v) throws Exception {
      list.add(v);
    }
  }
;
  Action action=new Action(){
    @Override public void run() throws Exception {
      list.add(100);
    }
  }
;
  Flowable.range(1,5).subscribeOn(Schedulers.computation()).blockingSubscribe(cons,cons,action,3);
  assertEquals(Arrays.asList(1,2,3,4,5,100),list);
}
