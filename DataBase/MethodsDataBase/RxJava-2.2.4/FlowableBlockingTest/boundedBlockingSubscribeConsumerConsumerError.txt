@Test public void boundedBlockingSubscribeConsumerConsumerError(){
  final List<Object> list=new ArrayList<Object>();
  TestException ex=new TestException();
  Consumer<Object> cons=new Consumer<Object>(){
    @Override public void accept(    Object v) throws Exception {
      list.add(v);
    }
  }
;
  Flowable.range(1,5).concatWith(Flowable.<Integer>error(ex)).subscribeOn(Schedulers.computation()).blockingSubscribe(cons,cons,128);
  assertEquals(Arrays.asList(1,2,3,4,5,ex),list);
}
