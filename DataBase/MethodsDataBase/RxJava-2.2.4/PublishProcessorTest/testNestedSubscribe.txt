@Test public void testNestedSubscribe(){
  final PublishProcessor<Integer> s=PublishProcessor.create();
  final AtomicInteger countParent=new AtomicInteger();
  final AtomicInteger countChildren=new AtomicInteger();
  final AtomicInteger countTotal=new AtomicInteger();
  final ArrayList<String> list=new ArrayList<String>();
  s.flatMap(new Function<Integer,Flowable<String>>(){
    @Override public Flowable<String> apply(    final Integer v){
      countParent.incrementAndGet();
      return s.map(new Function<Integer,String>(){
        @Override public String apply(        Integer v2){
          countChildren.incrementAndGet();
          return "Parent: " + v + " Child: "+ v2;
        }
      }
);
    }
  }
).subscribe(new Consumer<String>(){
    @Override public void accept(    String v){
      countTotal.incrementAndGet();
      list.add(v);
    }
  }
);
  for (int i=0; i < 10; i++) {
    s.onNext(i);
  }
  s.onComplete();
  assertEquals(45,list.size());
}
