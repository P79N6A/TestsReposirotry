@Test public void testStartInfiniteAndFinite() throws InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  final CountDownLatch infiniteObservable=new CountDownLatch(1);
  Observable<String> os=OBSERVABLE_OF_5_INTEGERS.zipWith(ASYNC_OBSERVABLE_OF_INFINITE_INTEGERS(infiniteObservable),new BiFunction<Integer,Integer,String>(){
    @Override public String apply(    Integer a,    Integer b){
      return a + "-" + b;
    }
  }
);
  final ArrayList<String> list=new ArrayList<String>();
  os.subscribe(new DefaultObserver<String>(){
    @Override public void onComplete(){
      latch.countDown();
    }
    @Override public void onError(    Throwable e){
      e.printStackTrace();
      latch.countDown();
    }
    @Override public void onNext(    String s){
      System.out.println(s);
      list.add(s);
    }
  }
);
  latch.await(1000,TimeUnit.MILLISECONDS);
  if (!infiniteObservable.await(2000,TimeUnit.MILLISECONDS)) {
    throw new RuntimeException("didn't unsubscribe");
  }
  assertEquals(5,list.size());
  assertEquals("1-1",list.get(0));
  assertEquals("2-2",list.get(1));
  assertEquals("5-5",list.get(4));
}
