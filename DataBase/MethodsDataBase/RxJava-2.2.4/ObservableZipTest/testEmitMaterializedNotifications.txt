@Test public void testEmitMaterializedNotifications(){
  Observable<Notification<Integer>> oi=Observable.just(1,2,3).materialize();
  Observable<Notification<String>> os=Observable.just("a","b","c").materialize();
  Observable<String> o=Observable.zip(oi,os,new BiFunction<Notification<Integer>,Notification<String>,String>(){
    @Override public String apply(    Notification<Integer> t1,    Notification<String> t2){
      return kind(t1) + "_" + value(t1)+ "-"+ kind(t2)+ "_"+ value(t2);
    }
  }
);
  final ArrayList<String> list=new ArrayList<String>();
  o.subscribe(new Consumer<String>(){
    @Override public void accept(    String s){
      System.out.println(s);
      list.add(s);
    }
  }
);
  assertEquals(4,list.size());
  assertEquals("OnNext_1-OnNext_a",list.get(0));
  assertEquals("OnNext_2-OnNext_b",list.get(1));
  assertEquals("OnNext_3-OnNext_c",list.get(2));
  assertEquals("OnComplete_null-OnComplete_null",list.get(3));
}
