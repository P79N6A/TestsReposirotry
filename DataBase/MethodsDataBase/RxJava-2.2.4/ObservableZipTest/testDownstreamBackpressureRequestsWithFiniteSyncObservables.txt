@Test public void testDownstreamBackpressureRequestsWithFiniteSyncObservables(){
  AtomicInteger generatedA=new AtomicInteger();
  AtomicInteger generatedB=new AtomicInteger();
  Observable<Integer> o1=createInfiniteObservable(generatedA).take(Observable.bufferSize() * 2);
  Observable<Integer> o2=createInfiniteObservable(generatedB).take(Observable.bufferSize() * 2);
  TestObserver<String> to=new TestObserver<String>();
  Observable.zip(o1,o2,new BiFunction<Integer,Integer,String>(){
    @Override public String apply(    Integer t1,    Integer t2){
      return t1 + "-" + t2;
    }
  }
).observeOn(Schedulers.computation()).take(Observable.bufferSize() * 2).subscribe(to);
  to.awaitTerminalEvent();
  to.assertNoErrors();
  assertEquals(Observable.bufferSize() * 2,to.valueCount());
  System.out.println("Generated => A: " + generatedA.get() + " B: "+ generatedB.get());
  assertTrue(generatedA.get() < (Observable.bufferSize() * 3));
  assertTrue(generatedB.get() < (Observable.bufferSize() * 3));
}
