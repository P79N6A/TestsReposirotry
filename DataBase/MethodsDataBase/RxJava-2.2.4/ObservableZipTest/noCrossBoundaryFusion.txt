@Test public void noCrossBoundaryFusion(){
  for (int i=0; i < 500; i++) {
    TestObserver<List<Object>> to=Observable.zip(Observable.just(1).observeOn(Schedulers.single()).map(new Function<Integer,Object>(){
      @Override public Object apply(      Integer v) throws Exception {
        return Thread.currentThread().getName().substring(0,4);
      }
    }
),Observable.just(1).observeOn(Schedulers.computation()).map(new Function<Integer,Object>(){
      @Override public Object apply(      Integer v) throws Exception {
        return Thread.currentThread().getName().substring(0,4);
      }
    }
),new BiFunction<Object,Object,List<Object>>(){
      @Override public List<Object> apply(      Object t1,      Object t2) throws Exception {
        return Arrays.asList(t1,t2);
      }
    }
).test().awaitDone(5,TimeUnit.SECONDS).assertValueCount(1);
    List<Object> list=to.values().get(0);
    assertTrue(list.toString(),list.contains("RxSi"));
    assertTrue(list.toString(),list.contains("RxCo"));
  }
}
