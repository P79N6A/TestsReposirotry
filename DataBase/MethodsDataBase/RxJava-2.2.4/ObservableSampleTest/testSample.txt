@Test public void testSample(){
  Observable<Long> source=Observable.unsafeCreate(new ObservableSource<Long>(){
    @Override public void subscribe(    final Observer<? super Long> observer1){
      observer1.onSubscribe(Disposables.empty());
      innerScheduler.schedule(new Runnable(){
        @Override public void run(){
          observer1.onNext(1L);
        }
      }
,1,TimeUnit.SECONDS);
      innerScheduler.schedule(new Runnable(){
        @Override public void run(){
          observer1.onNext(2L);
        }
      }
,2,TimeUnit.SECONDS);
      innerScheduler.schedule(new Runnable(){
        @Override public void run(){
          observer1.onComplete();
        }
      }
,3,TimeUnit.SECONDS);
    }
  }
);
  Observable<Long> sampled=source.sample(400L,TimeUnit.MILLISECONDS,scheduler);
  sampled.subscribe(observer);
  InOrder inOrder=inOrder(observer);
  scheduler.advanceTimeTo(800L,TimeUnit.MILLISECONDS);
  verify(observer,never()).onNext(any(Long.class));
  verify(observer,never()).onComplete();
  verify(observer,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(1200L,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,times(1)).onNext(1L);
  verify(observer,never()).onNext(2L);
  verify(observer,never()).onComplete();
  verify(observer,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(1600L,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,never()).onNext(1L);
  verify(observer,never()).onNext(2L);
  verify(observer,never()).onComplete();
  verify(observer,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(2000L,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,never()).onNext(1L);
  inOrder.verify(observer,times(1)).onNext(2L);
  verify(observer,never()).onComplete();
  verify(observer,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(3000L,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,never()).onNext(1L);
  inOrder.verify(observer,never()).onNext(2L);
  verify(observer,times(1)).onComplete();
  verify(observer,never()).onError(any(Throwable.class));
}
