@Test public void testDefer() throws Throwable {
  Callable<Flowable<String>> factory=mock(Callable.class);
  Flowable<String> firstObservable=Flowable.just("one","two");
  Flowable<String> secondObservable=Flowable.just("three","four");
  when(factory.call()).thenReturn(firstObservable,secondObservable);
  Flowable<String> deferred=Flowable.defer(factory);
  verifyZeroInteractions(factory);
  Subscriber<String> firstSubscriber=TestHelper.mockSubscriber();
  deferred.subscribe(firstSubscriber);
  verify(factory,times(1)).call();
  verify(firstSubscriber,times(1)).onNext("one");
  verify(firstSubscriber,times(1)).onNext("two");
  verify(firstSubscriber,times(0)).onNext("three");
  verify(firstSubscriber,times(0)).onNext("four");
  verify(firstSubscriber,times(1)).onComplete();
  Subscriber<String> secondSubscriber=TestHelper.mockSubscriber();
  deferred.subscribe(secondSubscriber);
  verify(factory,times(2)).call();
  verify(secondSubscriber,times(0)).onNext("one");
  verify(secondSubscriber,times(0)).onNext("two");
  verify(secondSubscriber,times(1)).onNext("three");
  verify(secondSubscriber,times(1)).onNext("four");
  verify(secondSubscriber,times(1)).onComplete();
}
