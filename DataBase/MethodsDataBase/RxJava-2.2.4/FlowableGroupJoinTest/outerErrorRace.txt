@Test public void outerErrorRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final PublishProcessor<Object> pp1=PublishProcessor.create();
    final PublishProcessor<Object> pp2=PublishProcessor.create();
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      TestSubscriber<Object> ts=pp1.groupJoin(pp2,new Function<Object,Flowable<Object>>(){
        @Override public Flowable<Object> apply(        Object left) throws Exception {
          return Flowable.never();
        }
      }
,new Function<Object,Flowable<Object>>(){
        @Override public Flowable<Object> apply(        Object right) throws Exception {
          return Flowable.never();
        }
      }
,new BiFunction<Object,Flowable<Object>,Flowable<Object>>(){
        @Override public Flowable<Object> apply(        Object r,        Flowable<Object> l) throws Exception {
          return l;
        }
      }
).flatMap(Functions.<Flowable<Object>>identity()).test();
      final TestException ex1=new TestException();
      final TestException ex2=new TestException();
      Runnable r1=new Runnable(){
        @Override public void run(){
          pp1.onError(ex1);
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          pp2.onError(ex2);
        }
      }
;
      TestHelper.race(r1,r2);
      ts.assertError(Throwable.class).assertSubscribed().assertNotComplete().assertNoValues();
      Throwable exc=ts.errors().get(0);
      if (exc instanceof CompositeException) {
        List<Throwable> es=TestHelper.compositeList(exc);
        TestHelper.assertError(es,0,TestException.class);
        TestHelper.assertError(es,1,TestException.class);
      }
 else {
        ts.assertError(TestException.class);
      }
      if (!errors.isEmpty()) {
        TestHelper.assertUndeliverable(errors,0,TestException.class);
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
