@Test public void innerErrorRight(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    Flowable.just(1).groupJoin(Flowable.just(2),new Function<Integer,Flowable<Object>>(){
      @Override public Flowable<Object> apply(      Integer left) throws Exception {
        return Flowable.never();
      }
    }
,new Function<Integer,Flowable<Object>>(){
      @Override public Flowable<Object> apply(      Integer right) throws Exception {
        return Flowable.error(new TestException());
      }
    }
,new BiFunction<Integer,Flowable<Integer>,Flowable<Integer>>(){
      @Override public Flowable<Integer> apply(      Integer r,      Flowable<Integer> l) throws Exception {
        return l;
      }
    }
).flatMap(Functions.<Flowable<Integer>>identity()).test().assertFailure(TestException.class);
    TestHelper.assertUndeliverable(errors,0,TestException.class);
  }
  finally {
    RxJavaPlugins.reset();
  }
}
