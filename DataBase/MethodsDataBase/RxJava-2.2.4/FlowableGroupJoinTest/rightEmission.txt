@Test public void rightEmission(){
  final PublishProcessor<Object> pp1=PublishProcessor.create();
  final PublishProcessor<Object> pp2=PublishProcessor.create();
  TestSubscriber<Object> ts=pp1.groupJoin(pp2,new Function<Object,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Object left) throws Exception {
      return Flowable.never();
    }
  }
,new Function<Object,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Object right) throws Exception {
      return Flowable.never();
    }
  }
,new BiFunction<Object,Flowable<Object>,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Object r,    Flowable<Object> l) throws Exception {
      return l;
    }
  }
).flatMap(Functions.<Flowable<Object>>identity()).test();
  pp2.onNext(2);
  pp1.onNext(1);
  pp1.onComplete();
  pp2.onComplete();
  ts.assertResult(2);
}
