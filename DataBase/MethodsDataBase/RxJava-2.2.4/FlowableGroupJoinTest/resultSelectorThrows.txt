@Test public void resultSelectorThrows(){
  PublishProcessor<Integer> source1=PublishProcessor.create();
  PublishProcessor<Integer> source2=PublishProcessor.create();
  BiFunction<Integer,Flowable<Integer>,Integer> fail=new BiFunction<Integer,Flowable<Integer>,Integer>(){
    @Override public Integer apply(    Integer t1,    Flowable<Integer> t2){
      throw new RuntimeException("Forced failure");
    }
  }
;
  Flowable<Integer> m=source1.groupJoin(source2,just(Flowable.never()),just(Flowable.never()),fail);
  m.subscribe(subscriber);
  source1.onNext(1);
  source2.onNext(2);
  verify(subscriber,times(1)).onError(any(Throwable.class));
  verify(subscriber,never()).onComplete();
  verify(subscriber,never()).onNext(any());
}
