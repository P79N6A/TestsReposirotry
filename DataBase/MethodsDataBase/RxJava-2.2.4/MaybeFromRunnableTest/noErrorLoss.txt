@Test public void noErrorLoss() throws Exception {
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    final CountDownLatch cdl1=new CountDownLatch(1);
    final CountDownLatch cdl2=new CountDownLatch(1);
    TestObserver<Object> to=Maybe.fromRunnable(new Runnable(){
      @Override public void run(){
        cdl1.countDown();
        try {
          cdl2.await(5,TimeUnit.SECONDS);
        }
 catch (        InterruptedException ex) {
          throw new RuntimeException(ex);
        }
      }
    }
).subscribeOn(Schedulers.single()).test();
    assertTrue(cdl1.await(5,TimeUnit.SECONDS));
    to.cancel();
    int timeout=10;
    while (timeout-- > 0 && errors.isEmpty()) {
      Thread.sleep(100);
    }
    TestHelper.assertUndeliverable(errors,0,RuntimeException.class);
    assertTrue(errors.get(0).toString(),errors.get(0).getCause().getCause() instanceof InterruptedException);
  }
  finally {
    RxJavaPlugins.reset();
  }
}
