@Test public void testUnsubscribeAfterTake(){
  Disposable upstream=mock(Disposable.class);
  TestObservable w=new TestObservable(upstream,"one","two","three");
  Observer<String> observer=TestHelper.mockObserver();
  Observable<String> take=Observable.unsafeCreate(w).takeWhile(new Predicate<String>(){
    int index;
    @Override public boolean test(    String s){
      return index++ < 1;
    }
  }
);
  take.subscribe(observer);
  try {
    w.t.join();
  }
 catch (  Throwable e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  System.out.println("TestObservable thread finished");
  verify(observer,times(1)).onNext("one");
  verify(observer,never()).onNext("two");
  verify(observer,never()).onNext("three");
  verify(upstream,times(1)).dispose();
}
