@SuppressWarnings({"unchecked","rawtypes"}) @Test public void zipNArguments() throws Exception {
  Flowable source=Flowable.just(1);
  for (int i=2; i < 10; i++) {
    Class<?>[] types=new Class[i + 1];
    Arrays.fill(types,Publisher.class);
    types[i]=i == 2 ? BiFunction.class : Class.forName("io.reactivex.functions.Function" + i);
    Method m=Flowable.class.getMethod("zip",types);
    Object[] params=new Object[i + 1];
    Arrays.fill(params,source);
    params[i]=ArgsToString.INSTANCE;
    StringBuilder b=new StringBuilder();
    for (int j=0; j < i; j++) {
      b.append('1');
    }
    ((Flowable)m.invoke(null,params)).test().assertResult(b.toString());
    for (int j=0; j < params.length; j++) {
      Object[] params0=params.clone();
      params0[j]=null;
      try {
        m.invoke(null,params0);
        fail("Should have thrown @ " + m);
      }
 catch (      InvocationTargetException ex) {
        assertTrue(ex.toString(),ex.getCause() instanceof NullPointerException);
        if (j < i) {
          assertEquals("source" + (j + 1) + " is null",ex.getCause().getMessage());
        }
 else {
          assertEquals("f is null",ex.getCause().getMessage());
        }
      }
    }
  }
}
