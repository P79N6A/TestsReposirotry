@Test public void multiError(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    PublishProcessor<Object> pp=PublishProcessor.create();
    @SuppressWarnings("rawtypes") final Subscriber[] sub={null};
    TestSubscriber<Object> ts=Flowable.zip(pp,new Flowable<Object>(){
      @Override protected void subscribeActual(      Subscriber<? super Object> s){
        sub[0]=s;
      }
    }
,new BiFunction<Object,Object,Object>(){
      @Override public Object apply(      Object a,      Object b) throws Exception {
        return a;
      }
    }
).test();
    pp.onError(new TestException("First"));
    ts.assertFailureAndMessage(TestException.class,"First");
    sub[0].onError(new TestException("Second"));
    TestHelper.assertUndeliverable(errors,0,TestException.class,"Second");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
