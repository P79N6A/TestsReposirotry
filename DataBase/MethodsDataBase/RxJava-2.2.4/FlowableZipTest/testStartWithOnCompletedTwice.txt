@Test public void testStartWithOnCompletedTwice(){
  final Subscriber<Integer> subscriber=TestHelper.mockSubscriber();
  Flowable.zip(Flowable.just(1),Flowable.just(1),new BiFunction<Integer,Integer,Integer>(){
    @Override public Integer apply(    Integer a,    Integer b){
      return a + b;
    }
  }
).subscribe(new DefaultSubscriber<Integer>(){
    @Override public void onComplete(){
      subscriber.onComplete();
    }
    @Override public void onError(    Throwable e){
      subscriber.onError(e);
    }
    @Override public void onNext(    Integer args){
      subscriber.onNext(args);
    }
  }
);
  InOrder inOrder=inOrder(subscriber);
  inOrder.verify(subscriber,times(1)).onNext(2);
  inOrder.verify(subscriber,times(1)).onComplete();
  inOrder.verifyNoMoreInteractions();
}
