@Test public void testBackpressureAsync(){
  AtomicInteger generatedA=new AtomicInteger();
  AtomicInteger generatedB=new AtomicInteger();
  Flowable<Integer> f1=createInfiniteFlowable(generatedA).subscribeOn(Schedulers.computation());
  Flowable<Integer> f2=createInfiniteFlowable(generatedB).subscribeOn(Schedulers.computation());
  TestSubscriber<String> ts=new TestSubscriber<String>();
  Flowable.zip(f1,f2,new BiFunction<Integer,Integer,String>(){
    @Override public String apply(    Integer t1,    Integer t2){
      return t1 + "-" + t2;
    }
  }
).take(Flowable.bufferSize() * 2).subscribe(ts);
  ts.awaitTerminalEvent();
  ts.assertNoErrors();
  assertEquals(Flowable.bufferSize() * 2,ts.valueCount());
  assertTrue(generatedA.get() < (Flowable.bufferSize() * 3));
  assertTrue(generatedB.get() < (Flowable.bufferSize() * 3));
}
