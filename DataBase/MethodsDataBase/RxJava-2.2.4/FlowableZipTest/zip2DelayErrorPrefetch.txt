@Test public void zip2DelayErrorPrefetch(){
  Flowable<Integer> error1=Flowable.error(new TestException("One"));
  Flowable<Integer> source1=Flowable.range(1,3).concatWith(error1);
  Flowable<Integer> error2=Flowable.error(new TestException("Two"));
  Flowable<Integer> source2=Flowable.range(1,2).concatWith(error2);
  TestSubscriber<Object> ts=Flowable.zip(source1,source2,new BiFunction<Integer,Integer,Object>(){
    @Override public Object apply(    Integer a,    Integer b) throws Exception {
      return "" + a + b;
    }
  }
,true,1).test().assertFailure(CompositeException.class,"11","22");
  List<Throwable> errors=TestHelper.compositeList(ts.errors().get(0));
  TestHelper.assertError(errors,0,TestException.class,"One");
  TestHelper.assertError(errors,1,TestException.class,"Two");
  assertEquals(2,errors.size());
}
