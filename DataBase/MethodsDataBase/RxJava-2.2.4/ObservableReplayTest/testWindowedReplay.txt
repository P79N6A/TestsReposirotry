@Test public void testWindowedReplay(){
  TestScheduler scheduler=new TestScheduler();
  PublishSubject<Integer> source=PublishSubject.create();
  ConnectableObservable<Integer> co=source.replay(100,TimeUnit.MILLISECONDS,scheduler);
  co.connect();
{
    Observer<Object> observer1=TestHelper.mockObserver();
    InOrder inOrder=inOrder(observer1);
    co.subscribe(observer1);
    source.onNext(1);
    scheduler.advanceTimeBy(60,TimeUnit.MILLISECONDS);
    source.onNext(2);
    scheduler.advanceTimeBy(60,TimeUnit.MILLISECONDS);
    source.onNext(3);
    scheduler.advanceTimeBy(60,TimeUnit.MILLISECONDS);
    source.onComplete();
    scheduler.advanceTimeBy(60,TimeUnit.MILLISECONDS);
    inOrder.verify(observer1,times(1)).onNext(1);
    inOrder.verify(observer1,times(1)).onNext(2);
    inOrder.verify(observer1,times(1)).onNext(3);
    inOrder.verify(observer1,times(1)).onComplete();
    inOrder.verifyNoMoreInteractions();
    verify(observer1,never()).onError(any(Throwable.class));
  }
{
    Observer<Object> observer1=TestHelper.mockObserver();
    InOrder inOrder=inOrder(observer1);
    co.subscribe(observer1);
    inOrder.verify(observer1,never()).onNext(3);
    inOrder.verify(observer1,times(1)).onComplete();
    inOrder.verifyNoMoreInteractions();
    verify(observer1,never()).onError(any(Throwable.class));
  }
}
