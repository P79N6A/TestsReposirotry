/** 
 * Specifically test interaction with a Scheduler with subscribeOn.
 * @throws Exception functional interfaces are declared with throws Exception
 */
@SuppressWarnings("unchecked") @Test public void testIssue2191_SchedulerUnsubscribe() throws Exception {
  Consumer<Integer> sourceNext=mock(Consumer.class);
  Action sourceCompleted=mock(Action.class);
  Action sourceUnsubscribed=mock(Action.class);
  final TestScheduler mockScheduler=new TestScheduler();
  Observer<Integer> mockObserverBeforeConnect=TestHelper.mockObserver();
  Observer<Integer> mockObserverAfterConnect=TestHelper.mockObserver();
  ConnectableObservable<Integer> replay=Observable.just(1,2,3).doOnNext(sourceNext).doOnDispose(sourceUnsubscribed).doOnComplete(sourceCompleted).subscribeOn(mockScheduler).replay();
  replay.subscribe(mockObserverBeforeConnect);
  replay.connect();
  replay.subscribe(mockObserverAfterConnect);
  verify(mockObserverBeforeConnect).onSubscribe((Disposable)any());
  verify(mockObserverAfterConnect).onSubscribe((Disposable)any());
  mockScheduler.advanceTimeBy(1,TimeUnit.SECONDS);
  verify(sourceNext,times(1)).accept(1);
  verify(sourceNext,times(1)).accept(2);
  verify(sourceNext,times(1)).accept(3);
  verify(sourceCompleted,times(1)).run();
  verifyObserverMock(mockObserverBeforeConnect,1,3);
  verifyObserverMock(mockObserverAfterConnect,1,3);
  verifyNoMoreInteractions(sourceNext);
  verifyNoMoreInteractions(sourceCompleted);
  verifyNoMoreInteractions(sourceUnsubscribed);
  verifyNoMoreInteractions(mockObserverBeforeConnect);
  verifyNoMoreInteractions(mockObserverAfterConnect);
}
