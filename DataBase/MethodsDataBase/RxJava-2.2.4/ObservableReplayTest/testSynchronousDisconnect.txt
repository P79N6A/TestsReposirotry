@Test public void testSynchronousDisconnect(){
  final AtomicInteger effectCounter=new AtomicInteger();
  Observable<Integer> source=Observable.just(1,2,3,4).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer v){
      effectCounter.incrementAndGet();
      System.out.println("Sideeffect #" + v);
    }
  }
);
  Observable<Integer> result=source.replay(new Function<Observable<Integer>,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Observable<Integer> o){
      return o.take(2);
    }
  }
);
  for (int i=1; i < 3; i++) {
    effectCounter.set(0);
    System.out.printf("- %d -%n",i);
    result.subscribe(new Consumer<Integer>(){
      @Override public void accept(      Integer t1){
        System.out.println(t1);
      }
    }
,new Consumer<Throwable>(){
      @Override public void accept(      Throwable t1){
        t1.printStackTrace();
      }
    }
,new Action(){
      @Override public void run(){
        System.out.println("Done");
      }
    }
);
    assertEquals(2,effectCounter.get());
  }
}
