@Test public void testBufferedReplaySelector(){
  final Function<Integer,Integer> dbl=new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer t1){
      return t1 * 2;
    }
  }
;
  Function<Observable<Integer>,Observable<Integer>> selector=new Function<Observable<Integer>,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Observable<Integer> t1){
      return t1.map(dbl);
    }
  }
;
  PublishSubject<Integer> source=PublishSubject.create();
  Observable<Integer> co=source.replay(selector,3);
{
    Observer<Object> observer1=TestHelper.mockObserver();
    InOrder inOrder=inOrder(observer1);
    co.subscribe(observer1);
    source.onNext(1);
    source.onNext(2);
    source.onNext(3);
    inOrder.verify(observer1,times(1)).onNext(2);
    inOrder.verify(observer1,times(1)).onNext(4);
    inOrder.verify(observer1,times(1)).onNext(6);
    source.onNext(4);
    source.onComplete();
    inOrder.verify(observer1,times(1)).onNext(8);
    inOrder.verify(observer1,times(1)).onComplete();
    inOrder.verifyNoMoreInteractions();
    verify(observer1,never()).onError(any(Throwable.class));
  }
{
    Observer<Object> observer1=TestHelper.mockObserver();
    InOrder inOrder=inOrder(observer1);
    co.subscribe(observer1);
    inOrder.verify(observer1,times(1)).onComplete();
    inOrder.verifyNoMoreInteractions();
    verify(observer1,never()).onError(any(Throwable.class));
  }
}
