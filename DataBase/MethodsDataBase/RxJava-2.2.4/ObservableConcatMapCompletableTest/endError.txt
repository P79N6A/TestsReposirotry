@Test public void endError(){
  PublishSubject<Integer> ps=PublishSubject.create();
  final CompletableSubject cs=CompletableSubject.create();
  final CompletableSubject cs2=CompletableSubject.create();
  TestObserver<Void> to=ps.concatMapCompletableDelayError(new Function<Integer,CompletableSource>(){
    @Override public CompletableSource apply(    Integer v) throws Exception {
      if (v == 1) {
        return cs;
      }
      return cs2;
    }
  }
,true,32).test();
  to.assertEmpty();
  assertTrue(ps.hasObservers());
  assertFalse(cs.hasObservers());
  ps.onNext(1);
  assertTrue(cs.hasObservers());
  cs.onError(new TestException());
  assertTrue(ps.hasObservers());
  ps.onNext(2);
  to.assertEmpty();
  cs2.onComplete();
  assertTrue(ps.hasObservers());
  to.assertEmpty();
  ps.onComplete();
  to.assertFailure(TestException.class);
}
