@Test public void basicWithError(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    final Disposable d=Disposables.empty();
    Flowable.<Integer>create(new FlowableOnSubscribe<Integer>(){
      @Override public void subscribe(      FlowableEmitter<Integer> e) throws Exception {
        e.setDisposable(d);
        e.onNext(1);
        e.onNext(2);
        e.onNext(3);
        e.onError(new TestException());
        e.onComplete();
        e.onNext(4);
        e.onError(new TestException("second"));
      }
    }
,BackpressureStrategy.BUFFER).test().assertFailure(TestException.class,1,2,3);
    assertTrue(d.isDisposed());
    TestHelper.assertUndeliverable(errors,0,TestException.class,"second");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
