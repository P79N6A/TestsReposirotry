@Test public void serializedConcurrentOnNextOnError(){
  for (  BackpressureStrategy m : BackpressureStrategy.values()) {
    Flowable.create(new FlowableOnSubscribe<Object>(){
      @Override public void subscribe(      FlowableEmitter<Object> e) throws Exception {
        final FlowableEmitter<Object> f=e.serialize();
        Runnable r1=new Runnable(){
          @Override public void run(){
            for (int i=0; i < 1000; i++) {
              f.onNext(1);
            }
          }
        }
;
        Runnable r2=new Runnable(){
          @Override public void run(){
            for (int i=0; i < 100; i++) {
              f.onNext(1);
            }
            f.onError(new TestException());
          }
        }
;
        TestHelper.race(r1,r2);
      }
    }
,m).test().assertSubscribed().assertNotComplete().assertError(TestException.class);
  }
}
