@Test public void onErrorRace(){
  for (  BackpressureStrategy m : BackpressureStrategy.values()) {
    Flowable<Object> source=Flowable.create(new FlowableOnSubscribe<Object>(){
      @Override public void subscribe(      FlowableEmitter<Object> e) throws Exception {
        final FlowableEmitter<Object> f=e.serialize();
        final TestException ex=new TestException();
        Runnable r1=new Runnable(){
          @Override public void run(){
            f.onError(null);
          }
        }
;
        Runnable r2=new Runnable(){
          @Override public void run(){
            f.onError(ex);
          }
        }
;
        TestHelper.race(r1,r2);
      }
    }
,m);
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
        source.test().assertFailure(Throwable.class);
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
    assertFalse(errors.isEmpty());
  }
}
