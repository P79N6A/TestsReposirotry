@Test public void onCompleteCrash(){
  for (  BackpressureStrategy m : BackpressureStrategy.values()) {
    Flowable.create(new FlowableOnSubscribe<Object>(){
      @Override public void subscribe(      FlowableEmitter<Object> e) throws Exception {
        Disposable d=Disposables.empty();
        e.setDisposable(d);
        try {
          e.onComplete();
          fail("Should have thrown");
        }
 catch (        TestException ex) {
        }
        assertTrue(d.isDisposed());
      }
    }
,m).subscribe(new FlowableSubscriber<Object>(){
      @Override public void onSubscribe(      Subscription s){
      }
      @Override public void onNext(      Object value){
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onComplete(){
        throw new TestException();
      }
    }
);
  }
}
