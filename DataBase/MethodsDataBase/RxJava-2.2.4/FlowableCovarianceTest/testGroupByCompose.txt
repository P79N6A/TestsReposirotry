@Test public void testGroupByCompose(){
  Flowable<Movie> movies=Flowable.just(new HorrorMovie(),new ActionMovie(),new Movie());
  TestSubscriber<String> ts=new TestSubscriber<String>();
  movies.groupBy(new Function<Movie,Object>(){
    @Override public Object apply(    Movie v){
      return v.getClass();
    }
  }
).doOnNext(new Consumer<GroupedFlowable<Object,Movie>>(){
    @Override public void accept(    GroupedFlowable<Object,Movie> g){
      System.out.println(g.getKey());
    }
  }
).flatMap(new Function<GroupedFlowable<Object,Movie>,Publisher<String>>(){
    @Override public Publisher<String> apply(    GroupedFlowable<Object,Movie> g){
      return g.doOnNext(new Consumer<Movie>(){
        @Override public void accept(        Movie v){
          System.out.println(v);
        }
      }
).compose(new FlowableTransformer<Movie,Movie>(){
        @Override public Publisher<Movie> apply(        Flowable<Movie> m){
          return m.concatWith(Flowable.just(new ActionMovie()));
        }
      }
).map(new Function<Object,String>(){
        @Override public String apply(        Object v){
          return v.toString();
        }
      }
);
    }
  }
).subscribe(ts);
  ts.assertTerminated();
  ts.assertNoErrors();
  assertEquals(6,ts.valueCount());
}
