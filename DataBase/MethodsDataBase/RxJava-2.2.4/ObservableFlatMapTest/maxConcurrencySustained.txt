@Test public void maxConcurrencySustained(){
  final PublishSubject<Integer> ps1=PublishSubject.create();
  final PublishSubject<Integer> ps2=PublishSubject.create();
  PublishSubject<Integer> ps3=PublishSubject.create();
  PublishSubject<Integer> ps4=PublishSubject.create();
  TestObserver<Integer> to=Observable.just(ps1,ps2,ps3,ps4).flatMap(new Function<PublishSubject<Integer>,ObservableSource<Integer>>(){
    @Override public ObservableSource<Integer> apply(    PublishSubject<Integer> v) throws Exception {
      return v;
    }
  }
,2).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer v) throws Exception {
      if (v == 1) {
        ps1.onComplete();
        ps2.onComplete();
      }
    }
  }
).test();
  ps1.onNext(1);
  assertFalse(ps1.hasObservers());
  assertFalse(ps2.hasObservers());
  assertTrue(ps3.hasObservers());
  assertTrue(ps4.hasObservers());
  to.dispose();
  assertFalse(ps3.hasObservers());
  assertFalse(ps4.hasObservers());
}
