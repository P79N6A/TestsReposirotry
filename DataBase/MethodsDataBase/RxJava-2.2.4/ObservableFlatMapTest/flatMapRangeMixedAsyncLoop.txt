@Test(timeout=30000) public void flatMapRangeMixedAsyncLoop(){
  for (int i=0; i < 2000; i++) {
    if (i % 10 == 0) {
      System.out.println("flatMapRangeAsyncLoop > " + i);
    }
    TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.range(0,1000).flatMap(new Function<Integer,Observable<Integer>>(){
      final Random rnd=new Random();
      @Override public Observable<Integer> apply(      Integer t){
        Observable<Integer> r=Observable.just(t);
        if (rnd.nextBoolean()) {
          r=r.hide();
        }
        return r;
      }
    }
).observeOn(Schedulers.computation()).subscribe(to);
    to.awaitTerminalEvent(2500,TimeUnit.MILLISECONDS);
    if (to.completions() == 0) {
      System.out.println(to.valueCount());
    }
    to.assertTerminated();
    to.assertNoErrors();
    List<Integer> list=to.values();
    if (list.size() < 1000) {
      Set<Integer> set=new HashSet<Integer>(list);
      for (int j=0; j < 1000; j++) {
        if (!set.contains(j)) {
          System.out.println(j + " missing");
        }
      }
    }
    assertEquals(1000,list.size());
  }
}
