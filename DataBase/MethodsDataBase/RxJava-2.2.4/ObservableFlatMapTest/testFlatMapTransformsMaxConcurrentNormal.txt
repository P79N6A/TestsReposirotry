@Test public void testFlatMapTransformsMaxConcurrentNormal(){
  final int m=2;
  final AtomicInteger subscriptionCount=new AtomicInteger();
  Observable<Integer> onNext=composer(Observable.fromIterable(Arrays.asList(1,2,3)).observeOn(Schedulers.computation()),subscriptionCount,m).subscribeOn(Schedulers.computation());
  Observable<Integer> onComplete=composer(Observable.fromIterable(Arrays.asList(4)),subscriptionCount,m).subscribeOn(Schedulers.computation());
  Observable<Integer> onError=Observable.fromIterable(Arrays.asList(5));
  Observable<Integer> source=Observable.fromIterable(Arrays.asList(10,20,30));
  Observer<Object> o=TestHelper.mockObserver();
  TestObserver<Object> to=new TestObserver<Object>(o);
  Function<Throwable,Observable<Integer>> just=just(onError);
  source.flatMap(just(onNext),just,just0(onComplete),m).subscribe(to);
  to.awaitTerminalEvent(1,TimeUnit.SECONDS);
  to.assertNoErrors();
  to.assertTerminated();
  verify(o,times(3)).onNext(1);
  verify(o,times(3)).onNext(2);
  verify(o,times(3)).onNext(3);
  verify(o).onNext(4);
  verify(o).onComplete();
  verify(o,never()).onNext(5);
  verify(o,never()).onError(any(Throwable.class));
}
