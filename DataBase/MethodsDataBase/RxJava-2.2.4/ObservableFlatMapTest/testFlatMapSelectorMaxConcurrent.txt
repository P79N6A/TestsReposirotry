@Test public void testFlatMapSelectorMaxConcurrent(){
  final int m=4;
  final AtomicInteger subscriptionCount=new AtomicInteger();
  Observable<Integer> source=Observable.range(1,10).flatMap(new Function<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Integer t1){
      return composer(Observable.range(t1 * 10,2),subscriptionCount,m).subscribeOn(Schedulers.computation());
    }
  }
,new BiFunction<Integer,Integer,Integer>(){
    @Override public Integer apply(    Integer t1,    Integer t2){
      return t1 * 1000 + t2;
    }
  }
,m);
  TestObserver<Integer> to=new TestObserver<Integer>();
  source.subscribe(to);
  to.awaitTerminalEvent();
  to.assertNoErrors();
  Set<Integer> expected=new HashSet<Integer>(Arrays.asList(1010,1011,2020,2021,3030,3031,4040,4041,5050,5051,6060,6061,7070,7071,8080,8081,9090,9091,10100,10101));
  Assert.assertEquals(expected.size(),to.valueCount());
  System.out.println("--> testFlatMapSelectorMaxConcurrent: " + to.values());
  Assert.assertTrue(expected.containsAll(to.values()));
}
