@Test public void fusedInnerThrows2(){
  TestObserver<Integer> to=Observable.range(1,2).hide().flatMap(new Function<Integer,ObservableSource<Integer>>(){
    @Override public ObservableSource<Integer> apply(    Integer v) throws Exception {
      return Observable.range(1,2).map(new Function<Integer,Integer>(){
        @Override public Integer apply(        Integer w) throws Exception {
          throw new TestException();
        }
      }
);
    }
  }
,true).test().assertFailure(CompositeException.class);
  List<Throwable> errors=TestHelper.errorList(to);
  TestHelper.assertError(errors,0,TestException.class);
  TestHelper.assertError(errors,1,TestException.class);
}
