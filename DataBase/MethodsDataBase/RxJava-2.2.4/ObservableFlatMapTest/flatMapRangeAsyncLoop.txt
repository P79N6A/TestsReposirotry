@Ignore("Don't care for any reordering") @Test(timeout=10000) public void flatMapRangeAsyncLoop(){
  for (int i=0; i < 2000; i++) {
    if (i % 10 == 0) {
      System.out.println("flatMapRangeAsyncLoop > " + i);
    }
    TestObserver<Integer> to=new TestObserver<Integer>();
    Observable.range(0,1000).flatMap(new Function<Integer,Observable<Integer>>(){
      @Override public Observable<Integer> apply(      Integer t){
        return Observable.just(t);
      }
    }
).observeOn(Schedulers.computation()).subscribe(to);
    to.awaitTerminalEvent(2500,TimeUnit.MILLISECONDS);
    if (to.completions() == 0) {
      System.out.println(to.valueCount());
    }
    to.assertTerminated();
    to.assertNoErrors();
    List<Integer> list=to.values();
    assertEquals(1000,list.size());
    boolean f=false;
    for (int j=0; j < list.size(); j++) {
      if (list.get(j) != j) {
        System.out.println(j + " " + list.get(j));
        f=true;
      }
    }
    if (f) {
      Assert.fail("Results are out of order!");
    }
  }
}
