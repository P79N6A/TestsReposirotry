@Test public void cancelDrainRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    for (int j=1; j < 50; j+=5) {
      List<Throwable> errors=TestHelper.trackPluginErrors();
      try {
        final PublishSubject<Observable<Integer>> ps=PublishSubject.create();
        final TestObserver<Integer> to=ps.flatMap(Functions.<Observable<Integer>>identity()).test();
        final PublishSubject<Integer> just=PublishSubject.create();
        final PublishSubject<Integer> just2=PublishSubject.create();
        ps.onNext(just);
        ps.onNext(just2);
        Runnable r1=new Runnable(){
          @Override public void run(){
            just2.onNext(1);
            to.cancel();
          }
        }
;
        Runnable r2=new Runnable(){
          @Override public void run(){
            just.onNext(1);
          }
        }
;
        TestHelper.race(r1,r2);
        assertTrue(errors.toString(),errors.isEmpty());
      }
  finally {
        RxJavaPlugins.reset();
      }
    }
  }
}
