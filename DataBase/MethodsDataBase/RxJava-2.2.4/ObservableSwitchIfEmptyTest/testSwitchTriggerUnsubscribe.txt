@Test public void testSwitchTriggerUnsubscribe() throws Exception {
  final Disposable d=Disposables.empty();
  Observable<Long> withProducer=Observable.unsafeCreate(new ObservableSource<Long>(){
    @Override public void subscribe(    final Observer<? super Long> observer){
      observer.onSubscribe(d);
      observer.onNext(42L);
    }
  }
);
  Observable.<Long>empty().switchIfEmpty(withProducer).lift(new ObservableOperator<Long,Long>(){
    @Override public Observer<? super Long> apply(    final Observer<? super Long> child){
      return new DefaultObserver<Long>(){
        @Override public void onComplete(){
        }
        @Override public void onError(        Throwable e){
        }
        @Override public void onNext(        Long aLong){
          cancel();
        }
      }
;
    }
  }
).subscribe();
  assertTrue(d.isDisposed());
}
