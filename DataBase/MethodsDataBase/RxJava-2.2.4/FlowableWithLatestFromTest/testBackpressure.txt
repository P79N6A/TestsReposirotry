@Test public void testBackpressure(){
  PublishProcessor<Integer> source=PublishProcessor.create();
  PublishProcessor<Integer> other=PublishProcessor.create();
  Flowable<Integer> result=source.withLatestFrom(other,COMBINER);
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>(0L);
  result.subscribe(ts);
  assertTrue("Other has no observers!",other.hasSubscribers());
  ts.request(1);
  source.onNext(1);
  assertTrue("Other has no observers!",other.hasSubscribers());
  ts.assertNoValues();
  other.onNext(1);
  source.onNext(2);
  ts.assertValue((2 << 8) + 1);
  ts.request(5);
  source.onNext(3);
  source.onNext(4);
  source.onNext(5);
  source.onNext(6);
  source.onNext(7);
  ts.assertValues((2 << 8) + 1,(3 << 8) + 1,(4 << 8) + 1,(5 << 8) + 1,(6 << 8) + 1,(7 << 8) + 1);
  ts.dispose();
  assertFalse("Other has observers!",other.hasSubscribers());
  ts.assertNoErrors();
}
