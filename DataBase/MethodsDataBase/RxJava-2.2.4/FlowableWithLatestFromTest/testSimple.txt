@Test public void testSimple(){
  PublishProcessor<Integer> source=PublishProcessor.create();
  PublishProcessor<Integer> other=PublishProcessor.create();
  Subscriber<Integer> subscriber=TestHelper.mockSubscriber();
  InOrder inOrder=inOrder(subscriber);
  Flowable<Integer> result=source.withLatestFrom(other,COMBINER);
  result.subscribe(subscriber);
  source.onNext(1);
  inOrder.verify(subscriber,never()).onNext(anyInt());
  other.onNext(1);
  inOrder.verify(subscriber,never()).onNext(anyInt());
  source.onNext(2);
  inOrder.verify(subscriber).onNext((2 << 8) + 1);
  other.onNext(2);
  inOrder.verify(subscriber,never()).onNext(anyInt());
  other.onComplete();
  inOrder.verify(subscriber,never()).onComplete();
  source.onNext(3);
  inOrder.verify(subscriber).onNext((3 << 8) + 2);
  source.onComplete();
  inOrder.verify(subscriber).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
}
