@Test public void testResumeNextWithAsyncExecution(){
  final AtomicReference<Throwable> receivedException=new AtomicReference<Throwable>();
  Subscription s=mock(Subscription.class);
  TestObservable w=new TestObservable(s,"one");
  Function<Throwable,Observable<String>> resume=new Function<Throwable,Observable<String>>(){
    @Override public Observable<String> apply(    Throwable t1){
      receivedException.set(t1);
      return Observable.just("twoResume","threeResume");
    }
  }
;
  Observable<String> o=Observable.unsafeCreate(w).onErrorResumeNext(resume);
  Observer<String> observer=TestHelper.mockObserver();
  o.subscribe(observer);
  try {
    w.t.join();
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
  verify(observer,Mockito.never()).onError(any(Throwable.class));
  verify(observer,times(1)).onComplete();
  verify(observer,times(1)).onNext("one");
  verify(observer,Mockito.never()).onNext("two");
  verify(observer,Mockito.never()).onNext("three");
  verify(observer,times(1)).onNext("twoResume");
  verify(observer,times(1)).onNext("threeResume");
  assertNotNull(receivedException.get());
}
