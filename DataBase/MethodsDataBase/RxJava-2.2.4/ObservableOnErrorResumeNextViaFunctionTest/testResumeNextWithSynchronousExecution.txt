@Test public void testResumeNextWithSynchronousExecution(){
  final AtomicReference<Throwable> receivedException=new AtomicReference<Throwable>();
  Observable<String> w=Observable.unsafeCreate(new ObservableSource<String>(){
    @Override public void subscribe(    Observer<? super String> observer){
      observer.onSubscribe(Disposables.empty());
      observer.onNext("one");
      observer.onError(new Throwable("injected failure"));
      observer.onNext("two");
      observer.onNext("three");
    }
  }
);
  Function<Throwable,Observable<String>> resume=new Function<Throwable,Observable<String>>(){
    @Override public Observable<String> apply(    Throwable t1){
      receivedException.set(t1);
      return Observable.just("twoResume","threeResume");
    }
  }
;
  Observable<String> observable=w.onErrorResumeNext(resume);
  Observer<String> observer=TestHelper.mockObserver();
  observable.subscribe(observer);
  verify(observer,Mockito.never()).onError(any(Throwable.class));
  verify(observer,times(1)).onComplete();
  verify(observer,times(1)).onNext("one");
  verify(observer,Mockito.never()).onNext("two");
  verify(observer,Mockito.never()).onNext("three");
  verify(observer,times(1)).onNext("twoResume");
  verify(observer,times(1)).onNext("threeResume");
  assertNotNull(receivedException.get());
}
