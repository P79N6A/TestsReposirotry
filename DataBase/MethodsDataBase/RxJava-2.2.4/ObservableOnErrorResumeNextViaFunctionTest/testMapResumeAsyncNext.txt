@Test public void testMapResumeAsyncNext(){
  Observable<String> w=Observable.just("one","fail","two","three","fail");
  w=w.map(new Function<String,String>(){
    @Override public String apply(    String s){
      if ("fail".equals(s)) {
        throw new RuntimeException("Forced Failure");
      }
      System.out.println("BadMapper:" + s);
      return s;
    }
  }
);
  Observable<String> o=w.onErrorResumeNext(new Function<Throwable,Observable<String>>(){
    @Override public Observable<String> apply(    Throwable t1){
      return Observable.just("twoResume","threeResume").subscribeOn(Schedulers.computation());
    }
  }
);
  Observer<String> observer=TestHelper.mockObserver();
  TestObserver<String> to=new TestObserver<String>(observer);
  o.subscribe(to);
  to.awaitTerminalEvent();
  verify(observer,Mockito.never()).onError(any(Throwable.class));
  verify(observer,times(1)).onComplete();
  verify(observer,times(1)).onNext("one");
  verify(observer,Mockito.never()).onNext("two");
  verify(observer,Mockito.never()).onNext("three");
  verify(observer,times(1)).onNext("twoResume");
  verify(observer,times(1)).onNext("threeResume");
}
