@Test public void doOnNextDoOnErrorFused2(){
  ConnectableFlowable<Integer> cf=Flowable.just(1).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer v) throws Exception {
      throw new TestException("First");
    }
  }
).doOnError(new Consumer<Throwable>(){
    @Override public void accept(    Throwable e) throws Exception {
      throw new TestException("Second");
    }
  }
).doOnError(new Consumer<Throwable>(){
    @Override public void accept(    Throwable e) throws Exception {
      throw new TestException("Third");
    }
  }
).publish();
  TestSubscriber<Integer> ts=cf.test();
  cf.connect();
  ts.assertFailure(CompositeException.class);
  TestHelper.assertError(ts,0,TestException.class,"First");
  TestHelper.assertError(ts,1,TestException.class,"Second");
  TestHelper.assertError(ts,2,TestException.class,"Third");
}
