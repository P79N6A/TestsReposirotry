@Test public void testIssue1451Case1(){
  final int expectedCount=3;
  final AtomicInteger count=new AtomicInteger();
  for (int i=0; i < expectedCount; i++) {
    Flowable.just(Boolean.TRUE,Boolean.FALSE).takeWhile(new Predicate<Boolean>(){
      @Override public boolean test(      Boolean value){
        return value;
      }
    }
).toList().doOnSuccess(new Consumer<List<Boolean>>(){
      @Override public void accept(      List<Boolean> booleans){
        count.incrementAndGet();
      }
    }
).subscribe();
  }
  assertEquals(expectedCount,count.get());
}
