@Test public void doOnNextDoOnErrorCombinedFused(){
  ConnectableFlowable<Integer> cf=Flowable.just(1).compose(new FlowableTransformer<Integer,Integer>(){
    @Override public Publisher<Integer> apply(    Flowable<Integer> v){
      return new FlowableDoOnEach<Integer>(v,new Consumer<Integer>(){
        @Override public void accept(        Integer v) throws Exception {
          throw new TestException("First");
        }
      }
,new Consumer<Throwable>(){
        @Override public void accept(        Throwable e) throws Exception {
          throw new TestException("Second");
        }
      }
,Functions.EMPTY_ACTION,Functions.EMPTY_ACTION);
    }
  }
).publish();
  TestSubscriber<Integer> ts=cf.test();
  cf.connect();
  ts.assertFailure(CompositeException.class);
  TestHelper.assertError(ts,0,TestException.class,"First");
  TestHelper.assertError(ts,1,TestException.class,"Second");
}
