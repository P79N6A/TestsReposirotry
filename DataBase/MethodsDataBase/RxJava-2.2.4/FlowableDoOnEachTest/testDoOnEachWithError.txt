@Test public void testDoOnEachWithError(){
  Flowable<String> base=Flowable.just("one","fail","two","three","fail");
  Flowable<String> errs=base.map(new Function<String,String>(){
    @Override public String apply(    String s){
      if ("fail".equals(s)) {
        throw new RuntimeException("Forced Failure");
      }
      return s;
    }
  }
);
  Flowable<String> doOnEach=errs.doOnEach(sideEffectSubscriber);
  doOnEach.subscribe(subscribedSubscriber);
  verify(subscribedSubscriber,times(1)).onNext("one");
  verify(subscribedSubscriber,never()).onNext("two");
  verify(subscribedSubscriber,never()).onNext("three");
  verify(subscribedSubscriber,never()).onComplete();
  verify(subscribedSubscriber,times(1)).onError(any(Throwable.class));
  verify(sideEffectSubscriber,times(1)).onNext("one");
  verify(sideEffectSubscriber,never()).onNext("two");
  verify(sideEffectSubscriber,never()).onNext("three");
  verify(sideEffectSubscriber,never()).onComplete();
  verify(sideEffectSubscriber,times(1)).onError(any(Throwable.class));
}
