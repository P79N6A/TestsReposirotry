@Test public void startError(){
  PublishSubject<Integer> source=PublishSubject.create();
  PublishSubject<Integer> start=PublishSubject.create();
  final PublishSubject<Integer> end=PublishSubject.create();
  TestObserver<Integer> to=source.window(start,new Function<Integer,ObservableSource<Integer>>(){
    @Override public ObservableSource<Integer> apply(    Integer v) throws Exception {
      return end;
    }
  }
).flatMap(Functions.<Observable<Integer>>identity()).test();
  start.onError(new TestException());
  to.assertFailure(TestException.class);
  assertFalse("Source has observers!",source.hasObservers());
  assertFalse("Start has observers!",start.hasObservers());
  assertFalse("End has observers!",end.hasObservers());
}
