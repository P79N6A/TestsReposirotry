@Test public void testObservableBasedOpenerAndCloser(){
  final List<String> list=new ArrayList<String>();
  final List<List<String>> lists=new ArrayList<List<String>>();
  Observable<String> source=Observable.unsafeCreate(new ObservableSource<String>(){
    @Override public void subscribe(    Observer<? super String> innerObserver){
      innerObserver.onSubscribe(Disposables.empty());
      push(innerObserver,"one",10);
      push(innerObserver,"two",60);
      push(innerObserver,"three",110);
      push(innerObserver,"four",160);
      push(innerObserver,"five",210);
      complete(innerObserver,500);
    }
  }
);
  Observable<Object> openings=Observable.unsafeCreate(new ObservableSource<Object>(){
    @Override public void subscribe(    Observer<? super Object> innerObserver){
      innerObserver.onSubscribe(Disposables.empty());
      push(innerObserver,new Object(),50);
      push(innerObserver,new Object(),200);
      complete(innerObserver,250);
    }
  }
);
  Function<Object,Observable<Object>> closer=new Function<Object,Observable<Object>>(){
    @Override public Observable<Object> apply(    Object opening){
      return Observable.unsafeCreate(new ObservableSource<Object>(){
        @Override public void subscribe(        Observer<? super Object> innerObserver){
          innerObserver.onSubscribe(Disposables.empty());
          push(innerObserver,new Object(),100);
          complete(innerObserver,101);
        }
      }
);
    }
  }
;
  Observable<Observable<String>> windowed=source.window(openings,closer);
  windowed.subscribe(observeWindow(list,lists));
  scheduler.advanceTimeTo(500,TimeUnit.MILLISECONDS);
  assertEquals(2,lists.size());
  assertEquals(lists.get(0),list("two","three"));
  assertEquals(lists.get(1),list("five"));
}
