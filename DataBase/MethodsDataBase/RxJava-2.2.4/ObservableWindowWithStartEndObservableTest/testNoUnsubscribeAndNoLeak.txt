@Test public void testNoUnsubscribeAndNoLeak(){
  PublishSubject<Integer> source=PublishSubject.create();
  PublishSubject<Integer> open=PublishSubject.create();
  final PublishSubject<Integer> close=PublishSubject.create();
  TestObserver<Observable<Integer>> to=new TestObserver<Observable<Integer>>();
  source.window(open,new Function<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Integer t){
      return close;
    }
  }
).subscribe(to);
  open.onNext(1);
  source.onNext(1);
  assertTrue(open.hasObservers());
  assertTrue(close.hasObservers());
  close.onNext(1);
  assertFalse(close.hasObservers());
  source.onComplete();
  to.assertComplete();
  to.assertNoErrors();
  to.assertValueCount(1);
  assertFalse(open.hasObservers());
  assertFalse(close.hasObservers());
}
