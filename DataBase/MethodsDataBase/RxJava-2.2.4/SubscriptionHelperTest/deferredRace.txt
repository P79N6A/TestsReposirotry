@Test public void deferredRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final AtomicReference<Subscription> atomicSubscription=new AtomicReference<Subscription>();
    final AtomicLong r=new AtomicLong();
    final AtomicLong q=new AtomicLong();
    final Subscription a=new Subscription(){
      @Override public void request(      long n){
        q.addAndGet(n);
      }
      @Override public void cancel(){
      }
    }
;
    Runnable r1=new Runnable(){
      @Override public void run(){
        SubscriptionHelper.deferredSetOnce(atomicSubscription,r,a);
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        SubscriptionHelper.deferredRequest(atomicSubscription,r,1);
      }
    }
;
    TestHelper.race(r1,r2);
    assertSame(a,atomicSubscription.get());
    assertEquals(1,q.get());
    assertEquals(0,r.get());
  }
}
