@Test public void fusedInternalsFlowable(){
  Flowable.range(1,10).flatMapCompletable(new Function<Integer,CompletableSource>(){
    @Override public CompletableSource apply(    Integer v) throws Exception {
      return Completable.complete();
    }
  }
).toFlowable().subscribe(new FlowableSubscriber<Object>(){
    @Override public void onSubscribe(    Subscription s){
      QueueSubscription<?> qs=(QueueSubscription<?>)s;
      try {
        assertNull(qs.poll());
      }
 catch (      Throwable ex) {
        throw new RuntimeException(ex);
      }
      assertTrue(qs.isEmpty());
      qs.clear();
    }
    @Override public void onNext(    Object t){
    }
    @Override public void onError(    Throwable t){
    }
    @Override public void onComplete(){
    }
  }
);
}
