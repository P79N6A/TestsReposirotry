@Test public void onErrorRace(){
  Observable<Object> source=Observable.create(new ObservableOnSubscribe<Object>(){
    @Override public void subscribe(    ObservableEmitter<Object> e) throws Exception {
      final ObservableEmitter<Object> f=e.serialize();
      final TestException ex=new TestException();
      Runnable r1=new Runnable(){
        @Override public void run(){
          f.onError(null);
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          f.onError(ex);
        }
      }
;
      TestHelper.race(r1,r2);
    }
  }
);
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
      source.test().assertFailure(Throwable.class);
    }
  }
  finally {
    RxJavaPlugins.reset();
  }
  assertFalse(errors.isEmpty());
}
