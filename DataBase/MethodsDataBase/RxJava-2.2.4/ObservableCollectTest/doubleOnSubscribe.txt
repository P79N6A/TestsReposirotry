@Test public void doubleOnSubscribe(){
  TestHelper.checkDoubleOnSubscribeObservableToSingle(new Function<Observable<Integer>,SingleSource<List<Integer>>>(){
    @Override public SingleSource<List<Integer>> apply(    Observable<Integer> o) throws Exception {
      return o.collect(new Callable<List<Integer>>(){
        @Override public List<Integer> call() throws Exception {
          return new ArrayList<Integer>();
        }
      }
,new BiConsumer<List<Integer>,Integer>(){
        @Override public void accept(        List<Integer> a,        Integer b) throws Exception {
          a.add(b);
        }
      }
);
    }
  }
);
  TestHelper.checkDoubleOnSubscribeObservable(new Function<Observable<Integer>,ObservableSource<List<Integer>>>(){
    @Override public ObservableSource<List<Integer>> apply(    Observable<Integer> o) throws Exception {
      return o.collect(new Callable<List<Integer>>(){
        @Override public List<Integer> call() throws Exception {
          return new ArrayList<Integer>();
        }
      }
,new BiConsumer<List<Integer>,Integer>(){
        @Override public void accept(        List<Integer> a,        Integer b) throws Exception {
          a.add(b);
        }
      }
).toObservable();
    }
  }
);
}
