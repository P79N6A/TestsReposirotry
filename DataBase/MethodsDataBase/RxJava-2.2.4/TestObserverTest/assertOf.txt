@Test public void assertOf(){
  TestObserver<Integer> to=TestObserver.create();
  to.assertOf(new Consumer<TestObserver<Integer>>(){
    @Override public void accept(    TestObserver<Integer> f) throws Exception {
      f.assertNotSubscribed();
    }
  }
);
  try {
    to.assertOf(new Consumer<TestObserver<Integer>>(){
      @Override public void accept(      TestObserver<Integer> f) throws Exception {
        f.assertSubscribed();
      }
    }
);
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError ex) {
  }
  try {
    to.assertOf(new Consumer<TestObserver<Integer>>(){
      @Override public void accept(      TestObserver<Integer> f) throws Exception {
        throw new IllegalArgumentException();
      }
    }
);
    throw new RuntimeException("Should have thrown");
  }
 catch (  IllegalArgumentException ex) {
  }
}
