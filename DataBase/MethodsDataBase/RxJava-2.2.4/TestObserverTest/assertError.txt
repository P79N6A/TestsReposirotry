@Test public void assertError(){
  TestObserver<Integer> to=TestObserver.create();
  try {
    to.assertError(TestException.class);
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError ex) {
  }
  try {
    to.assertError(new TestException());
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError ex) {
  }
  try {
    to.assertError(Functions.<Throwable>alwaysTrue());
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError ex) {
  }
  try {
    to.assertErrorMessage("");
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    to.assertSubscribed();
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    to.assertTerminated();
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  to.onSubscribe(Disposables.empty());
  to.assertSubscribed();
  to.assertNoErrors();
  TestException ex=new TestException("Forced failure");
  to.onError(ex);
  to.assertError(ex);
  to.assertError(TestException.class);
  to.assertError(Functions.<Throwable>alwaysTrue());
  to.assertError(new Predicate<Throwable>(){
    @Override public boolean test(    Throwable t) throws Exception {
      return t.getMessage() != null && t.getMessage().contains("Forced");
    }
  }
);
  to.assertErrorMessage("Forced failure");
  try {
    to.assertErrorMessage("");
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    to.assertError(new RuntimeException());
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    to.assertError(IOException.class);
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    to.assertError(Functions.<Throwable>alwaysFalse());
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    to.assertNoErrors();
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  to.assertTerminated();
  to.assertValueCount(0);
  to.assertNoValues();
}
