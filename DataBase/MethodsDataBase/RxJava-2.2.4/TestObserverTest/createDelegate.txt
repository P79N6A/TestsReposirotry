@Test public void createDelegate(){
  TestObserver<Integer> to1=TestObserver.create();
  TestObserver<Integer> to=TestObserver.create(to1);
  to.assertNotSubscribed();
  assertFalse(to.hasSubscription());
  to.onSubscribe(Disposables.empty());
  try {
    to.assertNotSubscribed();
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError ex) {
  }
  assertTrue(to.hasSubscription());
  assertFalse(to.isDisposed());
  to.onNext(1);
  to.onError(new TestException());
  to.onComplete();
  to1.assertValue(1).assertError(TestException.class).assertComplete();
  to.dispose();
  assertTrue(to.isDisposed());
  assertTrue(to.isTerminated());
  assertSame(Thread.currentThread(),to.lastThread());
  try {
    to.assertNoValues();
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  try {
    to.assertValueCount(0);
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  to.assertValueSequence(Collections.singletonList(1));
  try {
    to.assertValueSequence(Collections.singletonList(2));
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
  to.assertValueSet(Collections.singleton(1));
  try {
    to.assertValueSet(Collections.singleton(2));
    throw new RuntimeException("Should have thrown");
  }
 catch (  AssertionError exc) {
  }
}
