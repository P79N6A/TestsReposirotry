@Test public void blockingCancelUpfront(){
  BlockingFirstObserver<Integer> o=new BlockingFirstObserver<Integer>();
  assertFalse(o.isDisposed());
  o.dispose();
  assertTrue(o.isDisposed());
  Disposable d=Disposables.empty();
  o.onSubscribe(d);
  assertTrue(d.isDisposed());
  Thread.currentThread().interrupt();
  try {
    o.blockingGet();
    fail("Should have thrown");
  }
 catch (  RuntimeException ex) {
    assertTrue(ex.toString(),ex.getCause() instanceof InterruptedException);
  }
  Thread.interrupted();
  o.onError(new TestException());
  try {
    o.blockingGet();
    fail("Should have thrown");
  }
 catch (  TestException ex) {
  }
}
