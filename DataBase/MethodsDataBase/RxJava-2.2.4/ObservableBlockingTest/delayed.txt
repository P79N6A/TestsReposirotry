@SuppressWarnings("rawtypes") @Test public void delayed() throws Exception {
  final TestObserver<Object> to=new TestObserver<Object>();
  final Observer[] s={null};
  Schedulers.single().scheduleDirect(new Runnable(){
    @SuppressWarnings("unchecked") @Override public void run(){
      to.dispose();
      s[0].onNext(1);
    }
  }
,200,TimeUnit.MILLISECONDS);
  new Observable<Integer>(){
    @Override protected void subscribeActual(    Observer<? super Integer> observer){
      observer.onSubscribe(Disposables.empty());
      s[0]=observer;
    }
  }
.blockingSubscribe(to);
  while (!to.isDisposed()) {
    Thread.sleep(100);
  }
  to.assertEmpty();
}
