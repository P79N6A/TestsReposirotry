@Test public void testToMultimapWithThrowingCollectionFactoryObservable(){
  Observable<String> source=Observable.just("cc","cc","eee","eee");
  Function<Integer,Collection<String>> collectionFactory=new Function<Integer,Collection<String>>(){
    @Override public Collection<String> apply(    Integer t1){
      if (t1 == 2) {
        throw new RuntimeException("Forced failure");
      }
 else {
        return new HashSet<String>();
      }
    }
  }
;
  Function<String,String> identity=new Function<String,String>(){
    @Override public String apply(    String v){
      return v;
    }
  }
;
  Callable<Map<Integer,Collection<String>>> mapSupplier=new Callable<Map<Integer,Collection<String>>>(){
    @Override public Map<Integer,Collection<String>> call(){
      return new HashMap<Integer,Collection<String>>();
    }
  }
;
  Observable<Map<Integer,Collection<String>>> mapped=source.toMultimap(lengthFunc,identity,mapSupplier,collectionFactory).toObservable();
  Map<Integer,Collection<String>> expected=new HashMap<Integer,Collection<String>>();
  expected.put(2,Arrays.asList("cc","dd"));
  expected.put(3,Collections.singleton("eee"));
  mapped.subscribe(objectObserver);
  verify(objectObserver,times(1)).onError(any(Throwable.class));
  verify(objectObserver,never()).onNext(expected);
  verify(objectObserver,never()).onComplete();
}
