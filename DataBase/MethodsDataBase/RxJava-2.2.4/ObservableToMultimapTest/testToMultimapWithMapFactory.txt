@Test public void testToMultimapWithMapFactory(){
  Observable<String> source=Observable.just("a","b","cc","dd","eee","fff");
  Callable<Map<Integer,Collection<String>>> mapFactory=new Callable<Map<Integer,Collection<String>>>(){
    @Override public Map<Integer,Collection<String>> call(){
      return new LinkedHashMap<Integer,Collection<String>>(){
        private static final long serialVersionUID=-2084477070717362859L;
        @Override protected boolean removeEldestEntry(        Map.Entry<Integer,Collection<String>> eldest){
          return size() > 2;
        }
      }
;
    }
  }
;
  Function<String,String> identity=new Function<String,String>(){
    @Override public String apply(    String v){
      return v;
    }
  }
;
  Single<Map<Integer,Collection<String>>> mapped=source.toMultimap(lengthFunc,identity,mapFactory,new Function<Integer,Collection<String>>(){
    @Override public Collection<String> apply(    Integer v){
      return new ArrayList<String>();
    }
  }
);
  Map<Integer,Collection<String>> expected=new HashMap<Integer,Collection<String>>();
  expected.put(2,Arrays.asList("cc","dd"));
  expected.put(3,Arrays.asList("eee","fff"));
  mapped.subscribe(singleObserver);
  verify(singleObserver,never()).onError(any(Throwable.class));
  verify(singleObserver,times(1)).onSuccess(expected);
}
