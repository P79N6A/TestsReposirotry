@Test public void doubleOnSubscribe(){
  TestHelper.checkDoubleOnSubscribeFlowableToSingle(new Function<Flowable<Object>,SingleSource<Object>>(){
    @Override public SingleSource<Object> apply(    Flowable<Object> f) throws Exception {
      return f.singleOrError();
    }
  }
);
  TestHelper.checkDoubleOnSubscribeFlowable(new Function<Flowable<Object>,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Flowable<Object> f) throws Exception {
      return f.singleOrError().toFlowable();
    }
  }
);
  TestHelper.checkDoubleOnSubscribeFlowableToMaybe(new Function<Flowable<Object>,MaybeSource<Object>>(){
    @Override public MaybeSource<Object> apply(    Flowable<Object> f) throws Exception {
      return f.singleElement();
    }
  }
);
  TestHelper.checkDoubleOnSubscribeFlowable(new Function<Flowable<Object>,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Flowable<Object> f) throws Exception {
      return f.singleElement().toFlowable();
    }
  }
);
}
