/** 
 * Assert we get an IllegalStateException if trying to subscribe to an inner GroupedObservable more than once.
 */
@Test public void testExceptionIfSubscribeToChildMoreThanOnce(){
  Observable<Integer> source=Observable.just(0);
  final AtomicReference<GroupedObservable<Integer,Integer>> inner=new AtomicReference<GroupedObservable<Integer,Integer>>();
  Observable<GroupedObservable<Integer,Integer>> m=source.groupBy(identity,dbl);
  m.subscribe(new Consumer<GroupedObservable<Integer,Integer>>(){
    @Override public void accept(    GroupedObservable<Integer,Integer> t1){
      inner.set(t1);
    }
  }
);
  inner.get().subscribe();
  Observer<Integer> o2=TestHelper.mockObserver();
  inner.get().subscribe(o2);
  verify(o2,never()).onComplete();
  verify(o2,never()).onNext(anyInt());
  verify(o2).onError(any(IllegalStateException.class));
}
