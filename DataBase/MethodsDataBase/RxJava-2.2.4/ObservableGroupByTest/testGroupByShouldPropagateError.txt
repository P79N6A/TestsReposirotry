@Test public void testGroupByShouldPropagateError(){
  final Throwable e=new RuntimeException("Oops");
  final TestObserver<Integer> inner1=new TestObserver<Integer>();
  final TestObserver<Integer> inner2=new TestObserver<Integer>();
  final TestObserver<GroupedObservable<Integer,Integer>> outer=new TestObserver<GroupedObservable<Integer,Integer>>(new DefaultObserver<GroupedObservable<Integer,Integer>>(){
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onNext(    GroupedObservable<Integer,Integer> o){
      if (o.getKey() == 0) {
        o.subscribe(inner1);
      }
 else {
        o.subscribe(inner2);
      }
    }
  }
);
  Observable.unsafeCreate(new ObservableSource<Integer>(){
    @Override public void subscribe(    Observer<? super Integer> observer){
      observer.onSubscribe(Disposables.empty());
      observer.onNext(0);
      observer.onNext(1);
      observer.onError(e);
    }
  }
).groupBy(new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer i){
      return i % 2;
    }
  }
).subscribe(outer);
  assertEquals(Arrays.asList(e),outer.errors());
  assertEquals(Arrays.asList(e),inner1.errors());
  assertEquals(Arrays.asList(e),inner2.errors());
}
