@Test public void testError(){
  Observable<String> sourceStrings=Observable.just("one","two","three","four","five","six");
  Observable<String> errorSource=Observable.error(new RuntimeException("forced failure"));
  Observable<String> source=Observable.concat(sourceStrings,errorSource);
  Observable<GroupedObservable<Integer,String>> grouped=source.groupBy(length);
  final AtomicInteger groupCounter=new AtomicInteger();
  final AtomicInteger eventCounter=new AtomicInteger();
  final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
  grouped.flatMap(new Function<GroupedObservable<Integer,String>,Observable<String>>(){
    @Override public Observable<String> apply(    final GroupedObservable<Integer,String> o){
      groupCounter.incrementAndGet();
      return o.map(new Function<String,String>(){
        @Override public String apply(        String v){
          return "Event => key: " + o.getKey() + " value: "+ v;
        }
      }
);
    }
  }
).subscribe(new DefaultObserver<String>(){
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
      e.printStackTrace();
      error.set(e);
    }
    @Override public void onNext(    String v){
      eventCounter.incrementAndGet();
      System.out.println(v);
    }
  }
);
  assertEquals(3,groupCounter.get());
  assertEquals(6,eventCounter.get());
  assertNotNull(error.get());
}
