@Test public void testgroupByBackpressure2() throws InterruptedException {
  TestObserver<String> to=new TestObserver<String>();
  Observable.range(1,4000).groupBy(IS_EVEN2).flatMap(new Function<GroupedObservable<Boolean,Integer>,Observable<String>>(){
    @Override public Observable<String> apply(    final GroupedObservable<Boolean,Integer> g){
      return g.take(2).observeOn(Schedulers.computation()).map(new Function<Integer,String>(){
        @Override public String apply(        Integer l){
          if (g.getKey()) {
            try {
              Thread.sleep(1);
            }
 catch (            InterruptedException e) {
            }
            return l + " is even.";
          }
 else {
            return l + " is odd.";
          }
        }
      }
);
    }
  }
).subscribe(to);
  to.awaitTerminalEvent();
  to.assertNoErrors();
}
