@Test public void testStackOverflowWouldOccur(){
  final PublishSubject<Integer> a=PublishSubject.create();
  final PublishSubject<Integer> b=PublishSubject.create();
  final int MAX_STACK_DEPTH=800;
  final AtomicInteger depth=new AtomicInteger();
  a.subscribe(new Observer<Integer>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
      e.printStackTrace();
    }
    @Override public void onNext(    Integer n){
      b.onNext(n + 1);
    }
  }
);
  b.subscribe(new Observer<Integer>(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
      e.printStackTrace();
    }
    @Override public void onNext(    Integer n){
      if (depth.get() < MAX_STACK_DEPTH) {
        depth.set(Thread.currentThread().getStackTrace().length);
        a.onNext(n + 1);
      }
    }
  }
);
  a.onNext(1);
  assertTrue(depth.get() >= MAX_STACK_DEPTH);
}
