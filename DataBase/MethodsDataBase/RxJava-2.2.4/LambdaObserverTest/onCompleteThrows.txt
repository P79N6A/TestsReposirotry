@Test public void onCompleteThrows(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    final List<Object> received=new ArrayList<Object>();
    LambdaObserver<Object> o=new LambdaObserver<Object>(new Consumer<Object>(){
      @Override public void accept(      Object v) throws Exception {
        received.add(v);
      }
    }
,new Consumer<Throwable>(){
      @Override public void accept(      Throwable e) throws Exception {
        received.add(e);
      }
    }
,new Action(){
      @Override public void run() throws Exception {
        throw new TestException();
      }
    }
,new Consumer<Disposable>(){
      @Override public void accept(      Disposable d) throws Exception {
      }
    }
);
    assertFalse(o.isDisposed());
    Observable.<Integer>empty().subscribe(o);
    assertTrue(received.toString(),received.isEmpty());
    assertTrue(o.isDisposed());
    TestHelper.assertUndeliverable(errors,0,TestException.class);
  }
  finally {
    RxJavaPlugins.reset();
  }
}
