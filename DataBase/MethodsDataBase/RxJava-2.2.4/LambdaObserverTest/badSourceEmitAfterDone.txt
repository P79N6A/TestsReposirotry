@Test public void badSourceEmitAfterDone(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    Observable<Integer> source=new Observable<Integer>(){
      @Override public void subscribeActual(      Observer<? super Integer> observer){
        observer.onSubscribe(Disposables.empty());
        observer.onNext(1);
        observer.onComplete();
        observer.onNext(2);
        observer.onError(new TestException());
        observer.onComplete();
      }
    }
;
    final List<Object> received=new ArrayList<Object>();
    LambdaObserver<Object> o=new LambdaObserver<Object>(new Consumer<Object>(){
      @Override public void accept(      Object v) throws Exception {
        received.add(v);
      }
    }
,new Consumer<Throwable>(){
      @Override public void accept(      Throwable e) throws Exception {
        received.add(e);
      }
    }
,new Action(){
      @Override public void run() throws Exception {
        received.add(100);
      }
    }
,new Consumer<Disposable>(){
      @Override public void accept(      Disposable d) throws Exception {
      }
    }
);
    source.subscribe(o);
    assertEquals(Arrays.asList(1,100),received);
    TestHelper.assertUndeliverable(errors,0,TestException.class);
  }
  finally {
    RxJavaPlugins.reset();
  }
}
