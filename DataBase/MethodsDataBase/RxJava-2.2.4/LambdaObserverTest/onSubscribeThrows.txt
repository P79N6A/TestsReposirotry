@Test public void onSubscribeThrows(){
  final List<Object> received=new ArrayList<Object>();
  LambdaObserver<Object> o=new LambdaObserver<Object>(new Consumer<Object>(){
    @Override public void accept(    Object v) throws Exception {
      received.add(v);
    }
  }
,new Consumer<Throwable>(){
    @Override public void accept(    Throwable e) throws Exception {
      received.add(e);
    }
  }
,new Action(){
    @Override public void run() throws Exception {
      received.add(100);
    }
  }
,new Consumer<Disposable>(){
    @Override public void accept(    Disposable d) throws Exception {
      throw new TestException();
    }
  }
);
  assertFalse(o.isDisposed());
  Observable.just(1).subscribe(o);
  assertTrue(received.toString(),received.get(0) instanceof TestException);
  assertEquals(received.toString(),1,received.size());
  assertTrue(o.isDisposed());
}
