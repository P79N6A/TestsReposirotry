@Test public void fusedEmptyCheck(){
  Single.just(1).flattenAsFlowable(new Function<Object,Iterable<Integer>>(){
    @Override public Iterable<Integer> apply(    Object v) throws Exception {
      return Arrays.asList(1,2,3);
    }
  }
).subscribe(new FlowableSubscriber<Integer>(){
    QueueSubscription<Integer> qs;
    @SuppressWarnings("unchecked") @Override public void onSubscribe(    Subscription s){
      qs=(QueueSubscription<Integer>)s;
      assertEquals(QueueFuseable.ASYNC,qs.requestFusion(QueueFuseable.ANY));
    }
    @Override public void onNext(    Integer value){
      assertFalse(qs.isEmpty());
      qs.clear();
      assertTrue(qs.isEmpty());
      qs.cancel();
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
}
