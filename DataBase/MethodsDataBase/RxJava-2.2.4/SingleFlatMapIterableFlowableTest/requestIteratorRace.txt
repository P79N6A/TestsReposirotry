@Test public void requestIteratorRace(){
  final Integer[] a=new Integer[1000];
  Arrays.fill(a,1);
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final PublishSubject<Integer> ps=PublishSubject.create();
    final TestSubscriber<Integer> ts=ps.singleOrError().flattenAsFlowable(new Function<Integer,Iterable<Integer>>(){
      @Override public Iterable<Integer> apply(      Integer v) throws Exception {
        return Arrays.asList(a);
      }
    }
).test();
    Runnable r1=new Runnable(){
      @Override public void run(){
        for (int i=0; i < 1000; i++) {
          ts.request(1);
        }
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        ps.onNext(1);
        ps.onComplete();
      }
    }
;
    TestHelper.race(r1,r2);
  }
}
