@Test public void onErrorRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final PublishSubject<Integer> ps1=PublishSubject.create();
    final PublishSubject<Integer> ps2=PublishSubject.create();
    @SuppressWarnings("unchecked") TestObserver<Integer> to=Observable.ambArray(ps1,ps2).test();
    final Throwable ex=new TestException();
    Runnable r1=new Runnable(){
      @Override public void run(){
        ps1.onError(ex);
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        ps2.onError(ex);
      }
    }
;
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      TestHelper.race(r1,r2);
    }
  finally {
      RxJavaPlugins.reset();
    }
    to.assertFailure(TestException.class);
    if (!errors.isEmpty()) {
      TestHelper.assertUndeliverable(errors,0,TestException.class);
    }
  }
}
