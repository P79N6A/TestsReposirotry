@Test public void testConversionBetweenObservableClasses(){
  final TestObserver<String> to=new TestObserver<String>(new DefaultObserver<String>(){
    @Override public void onComplete(){
      System.out.println("Complete");
    }
    @Override public void onError(    Throwable e){
      System.out.println("error: " + e.getMessage());
      e.printStackTrace();
    }
    @Override public void onNext(    String t){
      System.out.println(t);
    }
  }
);
  List<Object> crewOfBattlestarGalactica=Arrays.asList(new Object[]{"William Adama","Laura Roslin","Lee Adama",new Cylon()});
  Flowable.fromIterable(crewOfBattlestarGalactica).doOnNext(new Consumer<Object>(){
    @Override public void accept(    Object pv){
      System.out.println(pv);
    }
  }
).to(new ConvertToCylonDetector<Object>()).beep(new Predicate<Object>(){
    @Override public boolean test(    Object t){
      return t instanceof Cylon;
    }
  }
).boop(new Function<Object,Object>(){
    @Override public Object apply(    Object cylon){
      return new Jail(cylon);
    }
  }
).DESTROY().x(new ConvertToObservable<String>()).reduce("Cylon Detector finished. Report:\n",new BiFunction<String,String,String>(){
    @Override public String apply(    String a,    String n){
      return a + n + "\n";
    }
  }
).subscribe(to);
  to.assertNoErrors();
  to.assertComplete();
}
