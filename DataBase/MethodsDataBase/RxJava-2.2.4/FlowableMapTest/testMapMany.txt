@Test public void testMapMany(){
  Flowable<Integer> ids=Flowable.just(1,2);
  Flowable<String> m=ids.flatMap(new Function<Integer,Flowable<String>>(){
    @Override public Flowable<String> apply(    Integer id){
      Flowable<Map<String,String>> subFlowable=null;
      if (id == 1) {
        Map<String,String> m1=getMap("One");
        Map<String,String> m2=getMap("Two");
        subFlowable=Flowable.just(m1,m2);
      }
 else {
        Map<String,String> m3=getMap("Three");
        Map<String,String> m4=getMap("Four");
        subFlowable=Flowable.just(m3,m4);
      }
      return subFlowable.map(new Function<Map<String,String>,String>(){
        @Override public String apply(        Map<String,String> map){
          return map.get("firstName");
        }
      }
);
    }
  }
);
  m.subscribe(stringSubscriber);
  verify(stringSubscriber,never()).onError(any(Throwable.class));
  verify(stringSubscriber,times(1)).onNext("OneFirst");
  verify(stringSubscriber,times(1)).onNext("TwoFirst");
  verify(stringSubscriber,times(1)).onNext("ThreeFirst");
  verify(stringSubscriber,times(1)).onNext("FourFirst");
  verify(stringSubscriber,times(1)).onComplete();
}
