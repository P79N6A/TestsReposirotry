@Test public void testMapWithError(){
  final List<Throwable> errors=new ArrayList<Throwable>();
  Flowable<String> w=Flowable.just("one","fail","two","three","fail");
  Flowable<String> m=w.map(new Function<String,String>(){
    @Override public String apply(    String s){
      if ("fail".equals(s)) {
        throw new TestException("Forced Failure");
      }
      return s;
    }
  }
).doOnError(new Consumer<Throwable>(){
    @Override public void accept(    Throwable t1){
      errors.add(t1);
    }
  }
);
  m.subscribe(stringSubscriber);
  verify(stringSubscriber,times(1)).onNext("one");
  verify(stringSubscriber,never()).onNext("two");
  verify(stringSubscriber,never()).onNext("three");
  verify(stringSubscriber,never()).onComplete();
  verify(stringSubscriber,times(1)).onError(any(TestException.class));
  TestHelper.assertError(errors,0,TestException.class,"Forced Failure");
}
