@Test public void mainErrorInnerErrorRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final PublishProcessor<Integer> pp1=PublishProcessor.create();
      final PublishProcessor<Integer> pp2=PublishProcessor.create();
      TestObserver<Void> to=Completable.merge(pp1.map(new Function<Integer,Completable>(){
        @Override public Completable apply(        Integer v) throws Exception {
          return pp2.ignoreElements();
        }
      }
)).test();
      pp1.onNext(1);
      final Throwable ex1=new TestException();
      final Throwable ex2=new TestException();
      Runnable r1=new Runnable(){
        @Override public void run(){
          pp1.onError(ex1);
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          pp2.onError(ex2);
        }
      }
;
      TestHelper.race(r1,r2);
      Throwable ex=to.errors().get(0);
      if (ex instanceof CompositeException) {
        to.assertSubscribed().assertNoValues().assertNotComplete();
        errors=TestHelper.compositeList(ex);
        TestHelper.assertError(errors,0,TestException.class);
        TestHelper.assertError(errors,1,TestException.class);
      }
 else {
        to.assertFailure(TestException.class);
        if (!errors.isEmpty()) {
          TestHelper.assertUndeliverable(errors,0,TestException.class);
        }
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
