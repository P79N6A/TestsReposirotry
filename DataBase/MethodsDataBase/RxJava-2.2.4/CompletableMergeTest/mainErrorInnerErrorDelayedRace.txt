@Test public void mainErrorInnerErrorDelayedRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final PublishProcessor<Integer> pp1=PublishProcessor.create();
    final PublishProcessor<Integer> pp2=PublishProcessor.create();
    TestObserver<Void> to=Completable.mergeDelayError(pp1.map(new Function<Integer,Completable>(){
      @Override public Completable apply(      Integer v) throws Exception {
        return pp2.ignoreElements();
      }
    }
)).test();
    pp1.onNext(1);
    final Throwable ex1=new TestException();
    Runnable r1=new Runnable(){
      @Override public void run(){
        pp1.onError(ex1);
      }
    }
;
    final Throwable ex2=new TestException();
    Runnable r2=new Runnable(){
      @Override public void run(){
        pp2.onError(ex2);
      }
    }
;
    TestHelper.race(r1,r2);
    to.assertFailure(CompositeException.class);
    List<Throwable> errors=TestHelper.compositeList(to.errors().get(0));
    TestHelper.assertError(errors,0,TestException.class);
    TestHelper.assertError(errors,1,TestException.class);
  }
}
