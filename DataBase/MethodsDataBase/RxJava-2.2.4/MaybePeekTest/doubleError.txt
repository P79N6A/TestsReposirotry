@Test public void doubleError(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  final Throwable[] err={null};
  try {
    TestObserver<Integer> to=new Maybe<Integer>(){
      @Override protected void subscribeActual(      MaybeObserver<? super Integer> observer){
        observer.onSubscribe(Disposables.empty());
        observer.onError(new TestException("First"));
        observer.onError(new TestException("Second"));
      }
    }
.doOnError(new Consumer<Throwable>(){
      @Override public void accept(      Throwable e) throws Exception {
        err[0]=e;
      }
    }
).test();
    TestHelper.assertUndeliverable(errors,0,TestException.class,"Second");
    assertTrue("" + err,err[0] instanceof TestException);
    assertEquals("First",err[0].getMessage());
    to.assertFailureAndMessage(TestException.class,"First");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
