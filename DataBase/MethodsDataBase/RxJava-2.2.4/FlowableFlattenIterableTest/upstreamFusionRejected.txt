@Test public void upstreamFusionRejected(){
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  FlattenIterableSubscriber<Integer,Integer> f=new FlattenIterableSubscriber<Integer,Integer>(ts,Functions.justFunction(Collections.<Integer>emptyList()),128);
  final AtomicLong requested=new AtomicLong();
  f.onSubscribe(new QueueSubscription<Integer>(){
    @Override public int requestFusion(    int mode){
      return 0;
    }
    @Override public boolean offer(    Integer value){
      return false;
    }
    @Override public boolean offer(    Integer v1,    Integer v2){
      return false;
    }
    @Override public Integer poll() throws Exception {
      return null;
    }
    @Override public boolean isEmpty(){
      return false;
    }
    @Override public void clear(){
    }
    @Override public void request(    long n){
      requested.set(n);
    }
    @Override public void cancel(){
    }
  }
);
  assertEquals(128,requested.get());
  assertNotNull(f.queue);
  ts.assertEmpty();
}
