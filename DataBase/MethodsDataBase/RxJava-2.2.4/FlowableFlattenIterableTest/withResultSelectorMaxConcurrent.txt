@Test public void withResultSelectorMaxConcurrent(){
  TestSubscriber<Integer> ts=TestSubscriber.create();
  Flowable.range(1,5).flatMapIterable(new Function<Integer,Iterable<Integer>>(){
    @Override public Iterable<Integer> apply(    Integer v){
      return Collections.singletonList(1);
    }
  }
,new BiFunction<Integer,Integer,Integer>(){
    @Override public Integer apply(    Integer a,    Integer b){
      return a * 10 + b;
    }
  }
,2).subscribe(ts);
  ts.assertValues(11,21,31,41,51);
  ts.assertNoErrors();
  ts.assertComplete();
}
