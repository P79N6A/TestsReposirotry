@Test public void iteratorNextThrows(){
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  final Iterable<Integer> it=new Iterable<Integer>(){
    @Override public Iterator<Integer> iterator(){
      return new Iterator<Integer>(){
        @Override public boolean hasNext(){
          return true;
        }
        @Override public Integer next(){
          throw new TestException();
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
  Flowable.range(1,2).concatMapIterable(new Function<Integer,Iterable<Integer>>(){
    @Override public Iterable<Integer> apply(    Integer v){
      return it;
    }
  }
).subscribe(ts);
  ts.assertNoValues();
  ts.assertError(TestException.class);
  ts.assertNotComplete();
}
