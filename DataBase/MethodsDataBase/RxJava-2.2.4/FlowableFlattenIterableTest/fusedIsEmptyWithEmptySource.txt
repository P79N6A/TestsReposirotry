@Test public void fusedIsEmptyWithEmptySource(){
  Flowable.just(1,2,3).flatMapIterable(new Function<Integer,Iterable<Integer>>(){
    @Override public Iterable<Integer> apply(    Integer v) throws Exception {
      if ((v & 1) == 0) {
        return Collections.emptyList();
      }
      return Arrays.asList(v);
    }
  }
).subscribe(new FlowableSubscriber<Integer>(){
    @Override public void onSubscribe(    Subscription s){
      @SuppressWarnings("unchecked") QueueSubscription<Integer> qs=(QueueSubscription<Integer>)s;
      assertEquals(QueueFuseable.SYNC,qs.requestFusion(QueueFuseable.ANY));
      try {
        assertFalse("Source reports being empty!",qs.isEmpty());
        assertEquals(1,qs.poll().intValue());
        assertFalse("Source reports being empty!",qs.isEmpty());
        assertEquals(3,qs.poll().intValue());
        assertTrue("Source reports being non-empty!",qs.isEmpty());
      }
 catch (      Throwable ex) {
        throw ExceptionHelper.wrapOrThrow(ex);
      }
    }
    @Override public void onNext(    Integer t){
    }
    @Override public void onError(    Throwable t){
    }
    @Override public void onComplete(){
    }
  }
);
}
