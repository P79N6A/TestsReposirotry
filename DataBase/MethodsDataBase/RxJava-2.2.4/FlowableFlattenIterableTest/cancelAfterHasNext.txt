@Test public void cancelAfterHasNext(){
  final TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  Flowable.range(1,3).hide().flatMapIterable(new Function<Integer,Iterable<Integer>>(){
    @Override public Iterable<Integer> apply(    Integer v) throws Exception {
      return new Iterable<Integer>(){
        int count;
        @Override public Iterator<Integer> iterator(){
          return new Iterator<Integer>(){
            @Override public boolean hasNext(){
              if (++count == 2) {
                ts.cancel();
                ts.onComplete();
              }
              return true;
            }
            @Override public Integer next(){
              return 1;
            }
            @Override public void remove(){
              throw new UnsupportedOperationException();
            }
          }
;
        }
      }
;
    }
  }
).subscribe(ts);
  ts.assertResult(1);
}
