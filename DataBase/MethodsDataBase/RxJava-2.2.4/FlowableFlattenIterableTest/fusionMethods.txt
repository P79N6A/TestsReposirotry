@Test public void fusionMethods(){
  Flowable.just(1,2).flatMapIterable(Functions.justFunction(Arrays.asList(1,2,3))).subscribe(new FlowableSubscriber<Integer>(){
    @Override public void onSubscribe(    Subscription s){
      @SuppressWarnings("unchecked") QueueSubscription<Integer> qs=(QueueSubscription<Integer>)s;
      assertEquals(QueueFuseable.SYNC,qs.requestFusion(QueueFuseable.ANY));
      try {
        assertFalse("Source reports being empty!",qs.isEmpty());
        assertEquals(1,qs.poll().intValue());
        assertFalse("Source reports being empty!",qs.isEmpty());
        assertEquals(2,qs.poll().intValue());
        assertFalse("Source reports being empty!",qs.isEmpty());
        qs.clear();
        assertTrue("Source reports not empty!",qs.isEmpty());
        assertNull(qs.poll());
      }
 catch (      Throwable ex) {
        throw ExceptionHelper.wrapOrThrow(ex);
      }
    }
    @Override public void onNext(    Integer t){
    }
    @Override public void onError(    Throwable t){
    }
    @Override public void onComplete(){
    }
  }
);
}
