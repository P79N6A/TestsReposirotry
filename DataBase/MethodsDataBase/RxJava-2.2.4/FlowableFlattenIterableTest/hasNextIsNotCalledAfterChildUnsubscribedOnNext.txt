@Test public void hasNextIsNotCalledAfterChildUnsubscribedOnNext(){
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  final AtomicInteger counter=new AtomicInteger();
  final Iterable<Integer> it=new Iterable<Integer>(){
    @Override public Iterator<Integer> iterator(){
      return new Iterator<Integer>(){
        @Override public boolean hasNext(){
          counter.getAndIncrement();
          return true;
        }
        @Override public Integer next(){
          return 1;
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
  PublishProcessor<Integer> pp=PublishProcessor.create();
  pp.concatMapIterable(new Function<Integer,Iterable<Integer>>(){
    @Override public Iterable<Integer> apply(    Integer v){
      return it;
    }
  }
).take(1).subscribe(ts);
  pp.onNext(1);
  ts.assertValue(1);
  ts.assertNoErrors();
  ts.assertComplete();
  Assert.assertFalse("PublishProcessor has Subscribers?!",pp.hasSubscribers());
  Assert.assertEquals(1,counter.get());
}
