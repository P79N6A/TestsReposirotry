@Test public void normal0(){
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  Flowable.range(1,2).reduce(new BiFunction<Integer,Integer,Integer>(){
    @Override public Integer apply(    Integer a,    Integer b){
      return Math.max(a,b);
    }
  }
).toFlowable().flatMapIterable(new Function<Integer,Iterable<Integer>>(){
    @Override public Iterable<Integer> apply(    Integer v){
      return Arrays.asList(v,v + 1);
    }
  }
).subscribe(ts);
  ts.assertValues(2,3).assertNoErrors().assertComplete();
}
