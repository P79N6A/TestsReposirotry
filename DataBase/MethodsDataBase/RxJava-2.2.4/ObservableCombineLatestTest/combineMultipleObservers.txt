@Test public void combineMultipleObservers(){
  PublishSubject<Integer> a=PublishSubject.create();
  PublishSubject<Integer> b=PublishSubject.create();
  Observable<Integer> source=Observable.combineLatest(a,b,or);
  Observer<Object> observer1=TestHelper.mockObserver();
  Observer<Object> observer2=TestHelper.mockObserver();
  InOrder inOrder1=inOrder(observer1);
  InOrder inOrder2=inOrder(observer2);
  source.subscribe(observer1);
  source.subscribe(observer2);
  a.onNext(1);
  inOrder1.verify(observer1,never()).onNext(any());
  inOrder2.verify(observer2,never()).onNext(any());
  a.onNext(2);
  inOrder1.verify(observer1,never()).onNext(any());
  inOrder2.verify(observer2,never()).onNext(any());
  b.onNext(0x10);
  inOrder1.verify(observer1,times(1)).onNext(0x12);
  inOrder2.verify(observer2,times(1)).onNext(0x12);
  b.onNext(0x20);
  inOrder1.verify(observer1,times(1)).onNext(0x22);
  inOrder2.verify(observer2,times(1)).onNext(0x22);
  b.onComplete();
  inOrder1.verify(observer1,never()).onComplete();
  inOrder2.verify(observer2,never()).onComplete();
  a.onComplete();
  inOrder1.verify(observer1,times(1)).onComplete();
  inOrder2.verify(observer2,times(1)).onComplete();
  a.onNext(3);
  b.onNext(0x30);
  a.onComplete();
  b.onComplete();
  inOrder1.verifyNoMoreInteractions();
  inOrder2.verifyNoMoreInteractions();
  verify(observer1,never()).onError(any(Throwable.class));
  verify(observer2,never()).onError(any(Throwable.class));
}
