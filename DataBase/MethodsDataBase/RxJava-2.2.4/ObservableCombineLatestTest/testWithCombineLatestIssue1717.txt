@Test public void testWithCombineLatestIssue1717() throws InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicInteger count=new AtomicInteger();
  final int SIZE=2000;
  Observable<Long> timer=Observable.interval(0,1,TimeUnit.MILLISECONDS).observeOn(Schedulers.newThread()).doOnEach(new Consumer<Notification<Long>>(){
    @Override public void accept(    Notification<Long> n){
      if (count.incrementAndGet() >= SIZE) {
        latch.countDown();
      }
    }
  }
).take(SIZE);
  TestObserver<Long> to=new TestObserver<Long>();
  Observable.combineLatest(timer,Observable.<Integer>never(),new BiFunction<Long,Integer,Long>(){
    @Override public Long apply(    Long t1,    Integer t2){
      return t1;
    }
  }
).subscribe(to);
  if (!latch.await(SIZE + 1000,TimeUnit.MILLISECONDS)) {
    fail("timed out");
  }
  assertEquals(SIZE,count.get());
}
