@Test public void test9SourcesOverload(){
  Observable<Integer> s1=Observable.just(1);
  Observable<Integer> s2=Observable.just(2);
  Observable<Integer> s3=Observable.just(3);
  Observable<Integer> s4=Observable.just(4);
  Observable<Integer> s5=Observable.just(5);
  Observable<Integer> s6=Observable.just(6);
  Observable<Integer> s7=Observable.just(7);
  Observable<Integer> s8=Observable.just(8);
  Observable<Integer> s9=Observable.just(9);
  Observable<List<Integer>> result=Observable.combineLatest(s1,s2,s3,s4,s5,s6,s7,s8,s9,new Function9<Integer,Integer,Integer,Integer,Integer,Integer,Integer,Integer,Integer,List<Integer>>(){
    @Override public List<Integer> apply(    Integer t1,    Integer t2,    Integer t3,    Integer t4,    Integer t5,    Integer t6,    Integer t7,    Integer t8,    Integer t9){
      return Arrays.asList(t1,t2,t3,t4,t5,t6,t7,t8,t9);
    }
  }
);
  Observer<Object> o=TestHelper.mockObserver();
  result.subscribe(o);
  verify(o).onNext(Arrays.asList(1,2,3,4,5,6,7,8,9));
  verify(o).onComplete();
  verify(o,never()).onError(any(Throwable.class));
}
