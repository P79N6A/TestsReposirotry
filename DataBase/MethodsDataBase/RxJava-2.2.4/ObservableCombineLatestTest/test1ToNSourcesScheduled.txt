@Test(timeout=5000) public void test1ToNSourcesScheduled() throws InterruptedException {
  int n=10;
  Function<Object[],List<Object>> func=new Function<Object[],List<Object>>(){
    @Override public List<Object> apply(    Object[] args){
      return Arrays.asList(args);
    }
  }
;
  for (int i=1; i <= n; i++) {
    System.out.println("test1ToNSourcesScheduled: " + i + " sources");
    List<Observable<Integer>> sources=new ArrayList<Observable<Integer>>();
    List<Object> values=new ArrayList<Object>();
    for (int j=0; j < i; j++) {
      sources.add(Observable.just(j).subscribeOn(Schedulers.io()));
      values.add(j);
    }
    Observable<List<Object>> result=Observable.combineLatest(sources,func);
    final Observer<List<Object>> o=TestHelper.mockObserver();
    final CountDownLatch cdl=new CountDownLatch(1);
    Observer<List<Object>> observer=new DefaultObserver<List<Object>>(){
      @Override public void onNext(      List<Object> t){
        o.onNext(t);
      }
      @Override public void onError(      Throwable e){
        o.onError(e);
        cdl.countDown();
      }
      @Override public void onComplete(){
        o.onComplete();
        cdl.countDown();
      }
    }
;
    result.subscribe(observer);
    cdl.await();
    verify(o).onNext(values);
    verify(o).onComplete();
    verify(o,never()).onError(any(Throwable.class));
  }
}
