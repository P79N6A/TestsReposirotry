@Test public void testDelayWithFlowableSingleSend1(){
  PublishProcessor<Integer> source=PublishProcessor.create();
  final PublishProcessor<Integer> delay=PublishProcessor.create();
  Function<Integer,Flowable<Integer>> delayFunc=new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer t1){
      return delay;
    }
  }
;
  Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  InOrder inOrder=inOrder(subscriber);
  source.delay(delayFunc).subscribe(subscriber);
  source.onNext(1);
  delay.onNext(1);
  delay.onNext(2);
  inOrder.verify(subscriber).onNext(1);
  inOrder.verifyNoMoreInteractions();
  verify(subscriber,never()).onError(any(Throwable.class));
}
