@Test public void testDelayWithFlowableAsTimed(){
  Flowable<Long> source=Flowable.interval(1L,TimeUnit.SECONDS,scheduler).take(3);
  final Flowable<Long> delayer=Flowable.timer(500L,TimeUnit.MILLISECONDS,scheduler);
  Function<Long,Flowable<Long>> delayFunc=new Function<Long,Flowable<Long>>(){
    @Override public Flowable<Long> apply(    Long t1){
      return delayer;
    }
  }
;
  Flowable<Long> delayed=source.delay(delayFunc);
  delayed.subscribe(subscriber);
  InOrder inOrder=inOrder(subscriber);
  scheduler.advanceTimeTo(1499L,TimeUnit.MILLISECONDS);
  verify(subscriber,never()).onNext(anyLong());
  verify(subscriber,never()).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(1500L,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,times(1)).onNext(0L);
  inOrder.verify(subscriber,never()).onNext(anyLong());
  verify(subscriber,never()).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(2400L,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,never()).onNext(anyLong());
  verify(subscriber,never()).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(2500L,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,times(1)).onNext(1L);
  inOrder.verify(subscriber,never()).onNext(anyLong());
  verify(subscriber,never()).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(3400L,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,never()).onNext(anyLong());
  verify(subscriber,never()).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(3500L,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,times(1)).onNext(2L);
  verify(subscriber,times(1)).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
}
