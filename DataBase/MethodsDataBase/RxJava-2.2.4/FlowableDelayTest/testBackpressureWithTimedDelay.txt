@Test public void testBackpressureWithTimedDelay(){
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  Flowable.range(1,Flowable.bufferSize() * 2).delay(100,TimeUnit.MILLISECONDS).observeOn(Schedulers.computation()).map(new Function<Integer,Integer>(){
    int c;
    @Override public Integer apply(    Integer t){
      if (c++ <= 0) {
        try {
          Thread.sleep(500);
        }
 catch (        InterruptedException e) {
        }
      }
      return t;
    }
  }
).subscribe(ts);
  ts.awaitTerminalEvent();
  ts.assertNoErrors();
  assertEquals(Flowable.bufferSize() * 2,ts.valueCount());
}
