@Test public void testDelayWithFlowableReorder(){
  int n=3;
  PublishProcessor<Integer> source=PublishProcessor.create();
  final List<PublishProcessor<Integer>> subjects=new ArrayList<PublishProcessor<Integer>>();
  for (int i=0; i < n; i++) {
    subjects.add(PublishProcessor.<Integer>create());
  }
  Flowable<Integer> result=source.delay(new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer t1){
      return subjects.get(t1);
    }
  }
);
  Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  InOrder inOrder=inOrder(subscriber);
  result.subscribe(subscriber);
  for (int i=0; i < n; i++) {
    source.onNext(i);
  }
  source.onComplete();
  inOrder.verify(subscriber,never()).onNext(anyInt());
  inOrder.verify(subscriber,never()).onComplete();
  for (int i=n - 1; i >= 0; i--) {
    subjects.get(i).onComplete();
    inOrder.verify(subscriber).onNext(i);
  }
  inOrder.verify(subscriber).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
}
