@Test public void testDelayWithFlowableNormal1(){
  PublishProcessor<Integer> source=PublishProcessor.create();
  final List<PublishProcessor<Integer>> delays=new ArrayList<PublishProcessor<Integer>>();
  final int n=10;
  for (int i=0; i < n; i++) {
    PublishProcessor<Integer> delay=PublishProcessor.create();
    delays.add(delay);
  }
  Function<Integer,Flowable<Integer>> delayFunc=new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer t1){
      return delays.get(t1);
    }
  }
;
  Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  InOrder inOrder=inOrder(subscriber);
  source.delay(delayFunc).subscribe(subscriber);
  for (int i=0; i < n; i++) {
    source.onNext(i);
    delays.get(i).onNext(i);
    inOrder.verify(subscriber).onNext(i);
  }
  source.onComplete();
  inOrder.verify(subscriber).onComplete();
  inOrder.verifyNoMoreInteractions();
  verify(subscriber,never()).onError(any(Throwable.class));
}
