@Test public void testResumeNext(){
  TestObservable f=new TestObservable("one");
  Observable<String> w=Observable.unsafeCreate(f);
  final AtomicReference<Throwable> capturedException=new AtomicReference<Throwable>();
  Observable<String> observable=w.onErrorReturn(new Function<Throwable,String>(){
    @Override public String apply(    Throwable e){
      capturedException.set(e);
      return "failure";
    }
  }
);
  Observer<String> observer=TestHelper.mockObserver();
  observable.subscribe(observer);
  try {
    f.t.join();
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
  verify(observer,Mockito.never()).onError(any(Throwable.class));
  verify(observer,times(1)).onComplete();
  verify(observer,times(1)).onNext("one");
  verify(observer,times(1)).onNext("failure");
  assertNotNull(capturedException.get());
}
