@Test public void badInnerDelayError(){
  @SuppressWarnings("rawtypes") final Observer[] o={null};
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    Observable.just(1).hide().concatMapDelayError(new Function<Integer,ObservableSource<Integer>>(){
      @Override public ObservableSource<Integer> apply(      Integer v) throws Exception {
        return new Observable<Integer>(){
          @Override protected void subscribeActual(          Observer<? super Integer> observer){
            o[0]=observer;
            observer.onSubscribe(Disposables.empty());
            observer.onComplete();
          }
        }
;
      }
    }
).test().assertResult();
    o[0].onError(new TestException());
    TestHelper.assertUndeliverable(errors,0,TestException.class);
  }
  finally {
    RxJavaPlugins.reset();
  }
}
