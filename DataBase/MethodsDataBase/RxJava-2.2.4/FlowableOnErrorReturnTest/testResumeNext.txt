@Test public void testResumeNext(){
  TestFlowable f=new TestFlowable("one");
  Flowable<String> w=Flowable.unsafeCreate(f);
  final AtomicReference<Throwable> capturedException=new AtomicReference<Throwable>();
  Flowable<String> flowable=w.onErrorReturn(new Function<Throwable,String>(){
    @Override public String apply(    Throwable e){
      capturedException.set(e);
      return "failure";
    }
  }
);
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  flowable.subscribe(subscriber);
  try {
    f.t.join();
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
  verify(subscriber,Mockito.never()).onError(any(Throwable.class));
  verify(subscriber,times(1)).onNext("one");
  verify(subscriber,times(1)).onNext("failure");
  verify(subscriber,times(1)).onComplete();
  assertNotNull(capturedException.get());
}
