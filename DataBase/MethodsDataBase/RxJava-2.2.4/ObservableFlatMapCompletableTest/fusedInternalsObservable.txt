@Test public void fusedInternalsObservable(){
  Observable.range(1,10).flatMapCompletable(new Function<Integer,CompletableSource>(){
    @Override public CompletableSource apply(    Integer v) throws Exception {
      return Completable.complete();
    }
  }
).toObservable().subscribe(new Observer<Object>(){
    @Override public void onSubscribe(    Disposable d){
      QueueDisposable<?> qd=(QueueDisposable<?>)d;
      try {
        assertNull(qd.poll());
      }
 catch (      Throwable ex) {
        throw new RuntimeException(ex);
      }
      assertTrue(qd.isEmpty());
      qd.clear();
    }
    @Override public void onNext(    Object t){
    }
    @Override public void onError(    Throwable t){
    }
    @Override public void onComplete(){
    }
  }
);
}
