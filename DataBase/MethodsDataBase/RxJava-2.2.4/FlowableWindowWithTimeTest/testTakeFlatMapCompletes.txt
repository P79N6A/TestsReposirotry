@Test public void testTakeFlatMapCompletes(){
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  final AtomicInteger wip=new AtomicInteger();
  final int indicator=999999999;
  FlowableWindowWithSizeTest.hotStream().window(300,TimeUnit.MILLISECONDS).take(10).doOnComplete(new Action(){
    @Override public void run(){
      System.out.println("Main done!");
    }
  }
).flatMap(new Function<Flowable<Integer>,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Flowable<Integer> w){
      return w.startWith(indicator).doOnComplete(new Action(){
        @Override public void run(){
          System.out.println("inner done: " + wip.incrementAndGet());
        }
      }
);
    }
  }
).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer pv){
      System.out.println(pv);
    }
  }
).subscribe(ts);
  ts.awaitTerminalEvent(5,TimeUnit.SECONDS);
  ts.assertComplete();
  Assert.assertTrue(ts.valueCount() != 0);
}
