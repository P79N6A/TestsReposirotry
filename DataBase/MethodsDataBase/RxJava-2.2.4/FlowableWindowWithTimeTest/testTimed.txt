@Test public void testTimed(){
  final List<String> list=new ArrayList<String>();
  final List<List<String>> lists=new ArrayList<List<String>>();
  Flowable<String> source=Flowable.unsafeCreate(new Publisher<String>(){
    @Override public void subscribe(    Subscriber<? super String> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      push(subscriber,"one",98);
      push(subscriber,"two",99);
      push(subscriber,"three",99);
      push(subscriber,"four",101);
      push(subscriber,"five",102);
      complete(subscriber,150);
    }
  }
);
  Flowable<Flowable<String>> windowed=source.window(100,TimeUnit.MILLISECONDS,scheduler);
  windowed.subscribe(observeWindow(list,lists));
  scheduler.advanceTimeTo(101,TimeUnit.MILLISECONDS);
  assertEquals(1,lists.size());
  assertEquals(lists.get(0),list("one","two","three"));
  scheduler.advanceTimeTo(201,TimeUnit.MILLISECONDS);
  assertEquals(2,lists.size());
  assertEquals(lists.get(1),list("four","five"));
}
