@SuppressWarnings("rawtypes") @Test public void flowableStart(){
  try {
    RxJavaPlugins.setOnFlowableSubscribe(new BiFunction<Flowable,Subscriber,Subscriber>(){
      @Override public Subscriber apply(      Flowable f,      final Subscriber t){
        return new Subscriber(){
          @Override public void onSubscribe(          Subscription s){
            t.onSubscribe(s);
          }
          @SuppressWarnings("unchecked") @Override public void onNext(          Object value){
            t.onNext((Integer)value - 9);
          }
          @Override public void onError(          Throwable e){
            t.onError(e);
          }
          @Override public void onComplete(){
            t.onComplete();
          }
        }
;
      }
    }
);
    Flowable.range(10,3).test().assertValues(1,2,3).assertNoErrors().assertComplete();
  }
  finally {
    RxJavaPlugins.reset();
  }
  Flowable.range(10,3).test().assertValues(10,11,12).assertNoErrors().assertComplete();
}
