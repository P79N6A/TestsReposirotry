@SuppressWarnings({"rawtypes","unchecked"}) @Test public void clearIsPassthrough(){
  try {
    RxJavaPlugins.reset();
    assertNull(RxJavaPlugins.onAssembly((Observable)null));
    assertNull(RxJavaPlugins.onAssembly((ConnectableObservable)null));
    assertNull(RxJavaPlugins.onAssembly((Flowable)null));
    assertNull(RxJavaPlugins.onAssembly((ConnectableFlowable)null));
    Observable oos=new Observable(){
      @Override public void subscribeActual(      Observer t){
      }
    }
;
    Flowable fos=new Flowable(){
      @Override public void subscribeActual(      Subscriber t){
      }
    }
;
    assertSame(oos,RxJavaPlugins.onAssembly(oos));
    assertSame(fos,RxJavaPlugins.onAssembly(fos));
    assertNull(RxJavaPlugins.onAssembly((Single)null));
    Single sos=new Single(){
      @Override public void subscribeActual(      SingleObserver t){
      }
    }
;
    assertSame(sos,RxJavaPlugins.onAssembly(sos));
    assertNull(RxJavaPlugins.onAssembly((Completable)null));
    Completable cos=new Completable(){
      @Override public void subscribeActual(      CompletableObserver t){
      }
    }
;
    assertSame(cos,RxJavaPlugins.onAssembly(cos));
    assertNull(RxJavaPlugins.onAssembly((Maybe)null));
    Maybe myb=new Maybe(){
      @Override public void subscribeActual(      MaybeObserver t){
      }
    }
;
    assertSame(myb,RxJavaPlugins.onAssembly(myb));
    Runnable action=Functions.EMPTY_RUNNABLE;
    assertSame(action,RxJavaPlugins.onSchedule(action));
class AllSubscriber implements Subscriber, Observer, SingleObserver, CompletableObserver, MaybeObserver {
      @Override public void onSuccess(      Object value){
      }
      @Override public void onSubscribe(      Disposable d){
      }
      @Override public void onSubscribe(      Subscription s){
      }
      @Override public void onNext(      Object t){
      }
      @Override public void onError(      Throwable t){
      }
      @Override public void onComplete(){
      }
    }
    AllSubscriber all=new AllSubscriber();
    assertNull(RxJavaPlugins.onSubscribe(Observable.never(),null));
    assertSame(all,RxJavaPlugins.onSubscribe(Observable.never(),all));
    assertNull(RxJavaPlugins.onSubscribe(Flowable.never(),null));
    assertSame(all,RxJavaPlugins.onSubscribe(Flowable.never(),all));
    assertNull(RxJavaPlugins.onSubscribe(Single.just(1),null));
    assertSame(all,RxJavaPlugins.onSubscribe(Single.just(1),all));
    assertNull(RxJavaPlugins.onSubscribe(Completable.never(),null));
    assertSame(all,RxJavaPlugins.onSubscribe(Completable.never(),all));
    assertNull(RxJavaPlugins.onSubscribe(Maybe.never(),null));
    assertSame(all,RxJavaPlugins.onSubscribe(Maybe.never(),all));
    final Scheduler s=ImmediateThinScheduler.INSTANCE;
    Callable<Scheduler> c=new Callable<Scheduler>(){
      @Override public Scheduler call() throws Exception {
        return s;
      }
    }
;
    assertSame(s,RxJavaPlugins.onComputationScheduler(s));
    assertSame(s,RxJavaPlugins.onIoScheduler(s));
    assertSame(s,RxJavaPlugins.onNewThreadScheduler(s));
    assertSame(s,RxJavaPlugins.onSingleScheduler(s));
    assertSame(s,RxJavaPlugins.initComputationScheduler(c));
    assertSame(s,RxJavaPlugins.initIoScheduler(c));
    assertSame(s,RxJavaPlugins.initNewThreadScheduler(c));
    assertSame(s,RxJavaPlugins.initSingleScheduler(c));
  }
  finally {
    RxJavaPlugins.reset();
  }
}
