@Test public void delayAllErrors(){
  Flowable.range(1,5).concatMapMaybeDelayError(new Function<Integer,MaybeSource<? extends Object>>(){
    @Override public MaybeSource<? extends Object> apply(    Integer v) throws Exception {
      return Maybe.error(new TestException());
    }
  }
).test().assertFailure(CompositeException.class).assertOf(new Consumer<TestSubscriber<Object>>(){
    @Override public void accept(    TestSubscriber<Object> ts) throws Exception {
      CompositeException ce=(CompositeException)ts.errors().get(0);
      assertEquals(5,ce.getExceptions().size());
    }
  }
);
}
