@Test(timeout=2000) public void testTimeoutSelectorNormal1(){
  PublishProcessor<Integer> source=PublishProcessor.create();
  final PublishProcessor<Integer> timeout=PublishProcessor.create();
  Function<Integer,Flowable<Integer>> timeoutFunc=new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer t1){
      return timeout;
    }
  }
;
  Flowable<Integer> other=Flowable.fromIterable(Arrays.asList(100));
  Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  InOrder inOrder=inOrder(subscriber);
  source.timeout(timeout,timeoutFunc,other).subscribe(subscriber);
  source.onNext(1);
  source.onNext(2);
  source.onNext(3);
  timeout.onNext(1);
  inOrder.verify(subscriber).onNext(1);
  inOrder.verify(subscriber).onNext(2);
  inOrder.verify(subscriber).onNext(3);
  inOrder.verify(subscriber).onNext(100);
  inOrder.verify(subscriber).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
}
