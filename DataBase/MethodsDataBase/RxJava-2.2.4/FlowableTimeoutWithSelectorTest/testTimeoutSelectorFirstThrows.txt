@Test public void testTimeoutSelectorFirstThrows(){
  Flowable<Integer> source=Flowable.<Integer>never();
  final PublishProcessor<Integer> timeout=PublishProcessor.create();
  Function<Integer,Flowable<Integer>> timeoutFunc=new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer t1){
      return timeout;
    }
  }
;
  Callable<Flowable<Integer>> firstTimeoutFunc=new Callable<Flowable<Integer>>(){
    @Override public Flowable<Integer> call(){
      throw new TestException();
    }
  }
;
  Flowable<Integer> other=Flowable.fromIterable(Arrays.asList(100));
  Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  source.timeout(Flowable.defer(firstTimeoutFunc),timeoutFunc,other).subscribe(subscriber);
  verify(subscriber).onError(any(TestException.class));
  verify(subscriber,never()).onNext(any());
  verify(subscriber,never()).onComplete();
}
