@Test public void badInnerSourceOther(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    PublishProcessor<Integer> pp=PublishProcessor.create();
    TestSubscriber<Integer> ts=pp.timeout(Functions.justFunction(new Flowable<Integer>(){
      @Override protected void subscribeActual(      Subscriber<? super Integer> subscriber){
        subscriber.onSubscribe(new BooleanSubscription());
        subscriber.onError(new TestException("First"));
        subscriber.onNext(2);
        subscriber.onError(new TestException("Second"));
        subscriber.onComplete();
      }
    }
),Flowable.just(2)).test();
    pp.onNext(1);
    ts.assertFailureAndMessage(TestException.class,"First",1);
    TestHelper.assertUndeliverable(errors,0,TestException.class,"Second");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
