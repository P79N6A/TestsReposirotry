@Test public void disposedUpfrontFallback(){
  PublishProcessor<Object> pp=PublishProcessor.create();
  final AtomicInteger counter=new AtomicInteger();
  Flowable<Object> timeoutAndFallback=Flowable.never().doOnSubscribe(new Consumer<Subscription>(){
    @Override public void accept(    Subscription s) throws Exception {
      counter.incrementAndGet();
    }
  }
);
  pp.timeout(timeoutAndFallback,Functions.justFunction(timeoutAndFallback),timeoutAndFallback).test(1,true).assertEmpty();
  assertEquals(0,counter.get());
}
