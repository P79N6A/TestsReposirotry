@Test public void badSourceTimeout(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    new Flowable<Integer>(){
      @Override protected void subscribeActual(      Subscriber<? super Integer> subscriber){
        subscriber.onSubscribe(new BooleanSubscription());
        subscriber.onNext(1);
        subscriber.onNext(2);
        subscriber.onError(new TestException("First"));
        subscriber.onNext(3);
        subscriber.onComplete();
        subscriber.onError(new TestException("Second"));
      }
    }
.timeout(Functions.justFunction(Flowable.never()),Flowable.<Integer>never()).take(1).test().assertResult(1);
    TestHelper.assertUndeliverable(errors,0,TestException.class,"First");
    TestHelper.assertUndeliverable(errors,1,TestException.class,"Second");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
