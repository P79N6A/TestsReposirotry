@Test public void testTimeoutSelectorWithFirstTimeoutFirstAndNoOtherFlowable(){
  PublishProcessor<Integer> source=PublishProcessor.create();
  final PublishProcessor<Integer> timeout=PublishProcessor.create();
  Function<Integer,Flowable<Integer>> timeoutFunc=new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer t1){
      return PublishProcessor.create();
    }
  }
;
  Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  source.timeout(timeout,timeoutFunc).subscribe(subscriber);
  timeout.onNext(1);
  InOrder inOrder=inOrder(subscriber);
  inOrder.verify(subscriber).onError(isA(TimeoutException.class));
  inOrder.verifyNoMoreInteractions();
}
