@Test public void testOnErrorFromNotificationHandler(){
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  Flowable<String> origin=Flowable.unsafeCreate(new FuncWithErrors(2));
  origin.retryWhen(new Function<Flowable<? extends Throwable>,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Flowable<? extends Throwable> t1){
      return Flowable.error(new RuntimeException());
    }
  }
).subscribe(subscriber);
  InOrder inOrder=inOrder(subscriber);
  inOrder.verify(subscriber).onSubscribe((Subscription)notNull());
  inOrder.verify(subscriber,never()).onNext("beginningEveryTime");
  inOrder.verify(subscriber,never()).onNext("onSuccessOnly");
  inOrder.verify(subscriber,never()).onComplete();
  inOrder.verify(subscriber,times(1)).onError(any(RuntimeException.class));
  inOrder.verifyNoMoreInteractions();
}
