@Test public void testSingleSubscriptionOnFirst() throws Exception {
  final AtomicInteger inc=new AtomicInteger(0);
  Publisher<Integer> onSubscribe=new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      final int emit=inc.incrementAndGet();
      subscriber.onNext(emit);
      subscriber.onComplete();
    }
  }
;
  int first=Flowable.unsafeCreate(onSubscribe).retryWhen(new Function<Flowable<? extends Throwable>,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Flowable<? extends Throwable> attempt){
      return attempt.zipWith(Flowable.just(1),new BiFunction<Throwable,Integer,Object>(){
        @Override public Object apply(        Throwable o,        Integer integer){
          return 0;
        }
      }
);
    }
  }
).blockingFirst();
  assertEquals("Observer did not receive the expected output",1,first);
  assertEquals("Subscribe was not called once",1,inc.get());
}
