@Test public void testOnCompletedFromNotificationHandler(){
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  Flowable<String> origin=Flowable.unsafeCreate(new FuncWithErrors(1));
  TestSubscriber<String> ts=new TestSubscriber<String>(subscriber);
  origin.retryWhen(new Function<Flowable<? extends Throwable>,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Flowable<? extends Throwable> t1){
      return Flowable.empty();
    }
  }
).subscribe(ts);
  InOrder inOrder=inOrder(subscriber);
  inOrder.verify(subscriber).onSubscribe((Subscription)notNull());
  inOrder.verify(subscriber,never()).onNext("beginningEveryTime");
  inOrder.verify(subscriber,never()).onNext("onSuccessOnly");
  inOrder.verify(subscriber,times(1)).onComplete();
  inOrder.verify(subscriber,never()).onError(any(Exception.class));
  inOrder.verifyNoMoreInteractions();
}
