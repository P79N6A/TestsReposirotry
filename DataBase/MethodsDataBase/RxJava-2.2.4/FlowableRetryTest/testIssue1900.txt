@Test public void testIssue1900() throws InterruptedException {
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  final int NUM_MSG=1034;
  final AtomicInteger count=new AtomicInteger();
  Flowable<String> origin=Flowable.range(0,NUM_MSG).map(new Function<Integer,String>(){
    @Override public String apply(    Integer t1){
      return "msg: " + count.incrementAndGet();
    }
  }
);
  origin.retry().groupBy(new Function<String,String>(){
    @Override public String apply(    String t1){
      return t1;
    }
  }
).flatMap(new Function<GroupedFlowable<String,String>,Flowable<String>>(){
    @Override public Flowable<String> apply(    GroupedFlowable<String,String> t1){
      return t1.take(1);
    }
  }
).subscribe(new TestSubscriber<String>(subscriber));
  InOrder inOrder=inOrder(subscriber);
  inOrder.verify(subscriber,times(NUM_MSG)).onNext(any(java.lang.String.class));
  inOrder.verify(subscriber,never()).onError(any(Throwable.class));
  inOrder.verify(subscriber,times(1)).onComplete();
  inOrder.verifyNoMoreInteractions();
}
