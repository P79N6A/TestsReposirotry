@Test public void testRetryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed() throws InterruptedException {
  final AtomicInteger subsCount=new AtomicInteger(0);
  Publisher<String> onSubscribe=new Publisher<String>(){
    @Override public void subscribe(    Subscriber<? super String> s){
      subsCount.incrementAndGet();
      s.onSubscribe(new Subscription(){
        @Override public void request(        long n){
        }
        @Override public void cancel(){
          subsCount.decrementAndGet();
        }
      }
);
    }
  }
;
  Flowable<String> stream=Flowable.unsafeCreate(onSubscribe);
  Flowable<String> streamWithRetry=stream.retry();
  Disposable sub=streamWithRetry.subscribe();
  assertEquals(1,subsCount.get());
  sub.dispose();
  assertEquals(0,subsCount.get());
  streamWithRetry.subscribe();
  assertEquals(1,subsCount.get());
}
