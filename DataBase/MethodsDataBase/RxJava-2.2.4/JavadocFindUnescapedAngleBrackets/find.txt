@Test public void find() throws Exception {
  File base=MaybeNo2Dot0Since.findSource("Flowable");
  if (base == null) {
    return;
  }
  base=base.getParentFile();
  Queue<File[]> files=new ArrayDeque<File[]>();
  files.offer(base.listFiles());
  StringBuilder b=new StringBuilder();
  int count=0;
  while (!files.isEmpty()) {
    for (    File file : files.poll()) {
      if (file.getName().endsWith(".java")) {
        String s=readFile(file);
        String fn=file.toString().substring(base.toString().length());
        fn=fn.replace("\\",".");
        fn=fn.replace("//",".");
        fn=fn.replace(".java","");
        fn="io.reactivex" + fn;
        int j=0;
        for (; ; ) {
          int idx=s.indexOf("<code>",j);
          if (idx < 0) {
            break;
          }
          int jdx=s.indexOf("</code>",idx + 6);
          int k=idx + 6;
          for (; ; ) {
            int kdx=s.indexOf('>',k);
            if (kdx < 0) {
              break;
            }
            if (kdx < jdx) {
              b.append("at ").append(fn).append(".gt(").append(file.getName()).append(":").append(countLine(s,kdx)).append(")\r\n");
              count++;
            }
 else {
              break;
            }
            k=kdx + 1;
          }
          k=idx + 6;
          for (; ; ) {
            int kdx=s.indexOf('<',k);
            if (kdx < 0) {
              break;
            }
            if (kdx < jdx) {
              b.append("at ").append(fn).append(".lt(").append(file.getName()).append(":").append(countLine(s,kdx)).append(")\r\n");
              count++;
            }
 else {
              break;
            }
            k=kdx + 1;
          }
          j=jdx + 7;
        }
      }
    }
  }
  if (b.length() > 0) {
    System.err.println("Should escape < and > in <code> blocks! " + count);
    System.err.println(b);
    throw new Exception("Should escape < and > in <code> blocks! " + count + "\r\n"+ b);
  }
}
