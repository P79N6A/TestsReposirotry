@Test public void onErrorThrows(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    final List<Object> received=new ArrayList<Object>();
    LambdaSubscriber<Object> subscriber=new LambdaSubscriber<Object>(new Consumer<Object>(){
      @Override public void accept(      Object v) throws Exception {
        received.add(v);
      }
    }
,new Consumer<Throwable>(){
      @Override public void accept(      Throwable e) throws Exception {
        throw new TestException("Inner");
      }
    }
,new Action(){
      @Override public void run() throws Exception {
        received.add(100);
      }
    }
,new Consumer<Subscription>(){
      @Override public void accept(      Subscription s) throws Exception {
        s.request(Long.MAX_VALUE);
      }
    }
);
    assertFalse(subscriber.isDisposed());
    Flowable.<Integer>error(new TestException("Outer")).subscribe(subscriber);
    assertTrue(received.toString(),received.isEmpty());
    assertTrue(subscriber.isDisposed());
    TestHelper.assertError(errors,0,CompositeException.class);
    List<Throwable> ce=TestHelper.compositeList(errors.get(0));
    TestHelper.assertError(ce,0,TestException.class,"Outer");
    TestHelper.assertError(ce,1,TestException.class,"Inner");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
