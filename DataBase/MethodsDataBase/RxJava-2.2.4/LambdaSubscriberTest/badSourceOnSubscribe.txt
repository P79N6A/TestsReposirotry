@Test public void badSourceOnSubscribe(){
  Flowable<Integer> source=Flowable.fromPublisher(new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> s){
      BooleanSubscription s1=new BooleanSubscription();
      s.onSubscribe(s1);
      BooleanSubscription s2=new BooleanSubscription();
      s.onSubscribe(s2);
      assertFalse(s1.isCancelled());
      assertTrue(s2.isCancelled());
      s.onNext(1);
      s.onComplete();
    }
  }
);
  final List<Object> received=new ArrayList<Object>();
  LambdaSubscriber<Object> subscriber=new LambdaSubscriber<Object>(new Consumer<Object>(){
    @Override public void accept(    Object v) throws Exception {
      received.add(v);
    }
  }
,new Consumer<Throwable>(){
    @Override public void accept(    Throwable e) throws Exception {
      received.add(e);
    }
  }
,new Action(){
    @Override public void run() throws Exception {
      received.add(100);
    }
  }
,new Consumer<Subscription>(){
    @Override public void accept(    Subscription s) throws Exception {
      s.request(Long.MAX_VALUE);
    }
  }
);
  source.subscribe(subscriber);
  assertEquals(Arrays.asList(1,100),received);
}
