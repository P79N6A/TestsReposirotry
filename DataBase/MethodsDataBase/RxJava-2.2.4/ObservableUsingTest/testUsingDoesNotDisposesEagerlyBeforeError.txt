@Test public void testUsingDoesNotDisposesEagerlyBeforeError(){
  final List<String> events=new ArrayList<String>();
  final Callable<Resource> resourceFactory=createResourceFactory(events);
  final Consumer<Throwable> onError=createOnErrorAction(events);
  final Action unsub=createUnsubAction(events);
  Function<Resource,Observable<String>> observableFactory=new Function<Resource,Observable<String>>(){
    @Override public Observable<String> apply(    Resource resource){
      return Observable.fromArray(resource.getTextFromWeb().split(" ")).concatWith(Observable.<String>error(new RuntimeException()));
    }
  }
;
  Observer<String> observer=TestHelper.mockObserver();
  Observable<String> o=Observable.using(resourceFactory,observableFactory,new DisposeAction(),false).doOnDispose(unsub).doOnError(onError);
  o.safeSubscribe(observer);
  assertEquals(Arrays.asList("error","disposed"),events);
}
