@Test public void supplierDisposerCrash(){
  TestSubscriber<Object> ts=Flowable.using(new Callable<Object>(){
    @Override public Object call() throws Exception {
      return 1;
    }
  }
,new Function<Object,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Object v) throws Exception {
      throw new TestException("First");
    }
  }
,new Consumer<Object>(){
    @Override public void accept(    Object e) throws Exception {
      throw new TestException("Second");
    }
  }
).test().assertFailure(CompositeException.class);
  List<Throwable> errors=TestHelper.compositeList(ts.errors().get(0));
  TestHelper.assertError(errors,0,TestException.class,"First");
  TestHelper.assertError(errors,1,TestException.class,"Second");
}
