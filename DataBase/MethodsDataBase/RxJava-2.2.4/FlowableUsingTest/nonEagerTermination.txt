@Test public void nonEagerTermination(){
  TestSubscriber<Integer> ts=TestSubscriber.create();
  final AtomicInteger count=new AtomicInteger();
  Flowable.<Integer,Integer>using(new Callable<Integer>(){
    @Override public Integer call(){
      return 1;
    }
  }
,new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer v){
      return Flowable.just(v);
    }
  }
,new Consumer<Integer>(){
    @Override public void accept(    Integer c){
      count.incrementAndGet();
    }
  }
,false).subscribe(ts);
  ts.assertValue(1);
  ts.assertNoErrors();
  ts.assertComplete();
  Assert.assertEquals(1,count.get());
}
