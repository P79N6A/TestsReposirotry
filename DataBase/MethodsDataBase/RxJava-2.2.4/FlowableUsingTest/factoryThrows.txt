@Test public void factoryThrows(){
  TestSubscriber<Integer> ts=TestSubscriber.create();
  final AtomicInteger count=new AtomicInteger();
  Flowable.<Integer,Integer>using(new Callable<Integer>(){
    @Override public Integer call(){
      return 1;
    }
  }
,new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer v){
      throw new TestException("forced failure");
    }
  }
,new Consumer<Integer>(){
    @Override public void accept(    Integer c){
      count.incrementAndGet();
    }
  }
).subscribe(ts);
  ts.assertError(TestException.class);
  Assert.assertEquals(1,count.get());
}
