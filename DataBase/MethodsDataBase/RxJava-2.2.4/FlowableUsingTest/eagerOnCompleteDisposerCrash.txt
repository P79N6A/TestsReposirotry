@Test public void eagerOnCompleteDisposerCrash(){
  Flowable.using(new Callable<Object>(){
    @Override public Object call() throws Exception {
      return 1;
    }
  }
,new Function<Object,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Object v) throws Exception {
      return Flowable.empty();
    }
  }
,new Consumer<Object>(){
    @Override public void accept(    Object e) throws Exception {
      throw new TestException("Second");
    }
  }
).test().assertFailureAndMessage(TestException.class,"Second");
}
