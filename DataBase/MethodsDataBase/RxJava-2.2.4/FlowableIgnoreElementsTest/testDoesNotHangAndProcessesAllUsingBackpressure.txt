@Test(timeout=10000) public void testDoesNotHangAndProcessesAllUsingBackpressure(){
  final AtomicInteger upstreamCount=new AtomicInteger();
  final AtomicInteger count=new AtomicInteger(0);
  int num=10;
  Flowable.range(1,num).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer t){
      upstreamCount.incrementAndGet();
    }
  }
).ignoreElements().subscribe(new DisposableCompletableObserver(){
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
    }
  }
);
  assertEquals(num,upstreamCount.get());
  assertEquals(0,count.get());
}
