@Test public void fusedAPICalls(){
  Flowable.just(1).hide().ignoreElements().<Integer>toFlowable().subscribe(new FlowableSubscriber<Integer>(){
    @Override public void onSubscribe(    Subscription s){
      @SuppressWarnings("unchecked") QueueSubscription<Integer> qs=(QueueSubscription<Integer>)s;
      try {
        assertNull(qs.poll());
      }
 catch (      Exception ex) {
        throw new AssertionError(ex);
      }
      assertTrue(qs.isEmpty());
      qs.clear();
      assertTrue(qs.isEmpty());
      try {
        assertNull(qs.poll());
      }
 catch (      Exception ex) {
        throw new AssertionError(ex);
      }
      try {
        qs.offer(1);
        fail("Should have thrown!");
      }
 catch (      UnsupportedOperationException ex) {
      }
      try {
        qs.offer(1,2);
        fail("Should have thrown!");
      }
 catch (      UnsupportedOperationException ex) {
      }
    }
    @Override public void onNext(    Integer t){
    }
    @Override public void onError(    Throwable t){
    }
    @Override public void onComplete(){
    }
  }
);
}
