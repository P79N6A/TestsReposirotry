/** 
 * https://github.com/ReactiveX/RxJava/issues/198 Rx Design Guidelines 5.2 "when calling the Subscribe method that only has an onNext argument, the OnError behavior will be to rethrow the exception on the thread that the message comes out from the Observable. The OnCompleted behavior in this case is to do nothing."
 * @throws InterruptedException if the await is interrupted
 */
@Test @Ignore("Subscribers can't throw") public void testErrorThrownWithoutErrorHandlerAsynchronous() throws InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicReference<Throwable> exception=new AtomicReference<Throwable>();
  Observable.unsafeCreate(new ObservableSource<Object>(){
    @Override public void subscribe(    final Observer<? super Object> observer){
      new Thread(new Runnable(){
        @Override public void run(){
          try {
            observer.onError(new Error("failure"));
          }
 catch (          Throwable e) {
            exception.set(e);
          }
          latch.countDown();
        }
      }
).start();
    }
  }
).subscribe();
  latch.await(3000,TimeUnit.MILLISECONDS);
  assertNotNull(exception.get());
  assertEquals("failure",exception.get().getMessage());
}
