@Test public void testPublishLast() throws InterruptedException {
  final AtomicInteger count=new AtomicInteger();
  ConnectableObservable<String> connectable=Observable.<String>unsafeCreate(new ObservableSource<String>(){
    @Override public void subscribe(    final Observer<? super String> observer){
      observer.onSubscribe(Disposables.empty());
      count.incrementAndGet();
      new Thread(new Runnable(){
        @Override public void run(){
          observer.onNext("first");
          observer.onNext("last");
          observer.onComplete();
        }
      }
).start();
    }
  }
).takeLast(1).publish();
  final CountDownLatch latch=new CountDownLatch(1);
  connectable.subscribe(new Consumer<String>(){
    @Override public void accept(    String value){
      assertEquals("last",value);
      latch.countDown();
    }
  }
);
  connectable.subscribe();
  Disposable subscription=connectable.connect();
  assertTrue(latch.await(1000,TimeUnit.MILLISECONDS));
  assertEquals(1,count.get());
  subscription.dispose();
}
