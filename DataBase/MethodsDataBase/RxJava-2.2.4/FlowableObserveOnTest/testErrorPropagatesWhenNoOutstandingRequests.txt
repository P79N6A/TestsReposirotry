@Test public void testErrorPropagatesWhenNoOutstandingRequests(){
  Flowable<Long> timer=Flowable.interval(0,1,TimeUnit.MICROSECONDS).doOnEach(new Consumer<Notification<Long>>(){
    @Override public void accept(    Notification<Long> n){
    }
  }
).observeOn(Schedulers.newThread()).doOnEach(new Consumer<Notification<Long>>(){
    @Override public void accept(    Notification<Long> n){
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
      }
    }
  }
);
  TestSubscriber<Long> ts=new TestSubscriber<Long>();
  Flowable.combineLatest(timer,Flowable.<Integer>never(),new BiFunction<Long,Integer,Long>(){
    @Override public Long apply(    Long t1,    Integer t2){
      return t1;
    }
  }
).take(Flowable.bufferSize() * 2).subscribe(ts);
  ts.awaitTerminalEvent();
  assertEquals(1,ts.errors().size());
  assertEquals(MissingBackpressureException.class,ts.errors().get(0).getClass());
}
