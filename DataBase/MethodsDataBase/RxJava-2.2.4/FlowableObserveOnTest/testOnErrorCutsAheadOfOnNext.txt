@Test public void testOnErrorCutsAheadOfOnNext(){
  for (int i=0; i < 50; i++) {
    final PublishProcessor<Long> processor=PublishProcessor.create();
    final AtomicLong counter=new AtomicLong();
    TestSubscriber<Long> ts=new TestSubscriber<Long>(new DefaultSubscriber<Long>(){
      @Override public void onComplete(){
      }
      @Override public void onError(      Throwable e){
      }
      @Override public void onNext(      Long t){
        try {
          Thread.sleep(1);
        }
 catch (        InterruptedException e) {
        }
      }
    }
);
    processor.observeOn(Schedulers.computation()).subscribe(ts);
    while (counter.get() < 102400) {
      processor.onNext(counter.get());
      counter.incrementAndGet();
    }
    ts.awaitTerminalEvent();
    assertEquals(1,ts.errors().size());
    ts.assertError(MissingBackpressureException.class);
    List<Long> onNextEvents=ts.values();
    assertTrue(onNextEvents.isEmpty() || onNextEvents.size() == onNextEvents.get(onNextEvents.size() - 1) + 1);
    assertTrue(onNextEvents.size() < Flowable.bufferSize());
  }
}
