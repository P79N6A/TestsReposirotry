@Test public void testBackpressureWithTakeBefore(){
  final AtomicInteger generated=new AtomicInteger();
  Flowable<Integer> flowable=Flowable.fromIterable(new Iterable<Integer>(){
    @Override public Iterator<Integer> iterator(){
      return new Iterator<Integer>(){
        @Override public void remove(){
        }
        @Override public Integer next(){
          return generated.getAndIncrement();
        }
        @Override public boolean hasNext(){
          return true;
        }
      }
;
    }
  }
);
  TestSubscriber<Integer> testSubscriber=new TestSubscriber<Integer>();
  flowable.take(7).observeOn(Schedulers.newThread()).subscribe(testSubscriber);
  testSubscriber.awaitTerminalEvent();
  testSubscriber.assertValues(0,1,2,3,4,5,6);
  assertEquals(7,generated.get());
}
