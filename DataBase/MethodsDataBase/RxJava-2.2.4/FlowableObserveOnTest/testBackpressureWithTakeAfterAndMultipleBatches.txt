@Test public void testBackpressureWithTakeAfterAndMultipleBatches(){
  int numForBatches=Flowable.bufferSize() * 3 + 1;
  final AtomicInteger generated=new AtomicInteger();
  Flowable<Integer> flowable=Flowable.fromIterable(new Iterable<Integer>(){
    @Override public Iterator<Integer> iterator(){
      return new Iterator<Integer>(){
        @Override public void remove(){
        }
        @Override public Integer next(){
          return generated.getAndIncrement();
        }
        @Override public boolean hasNext(){
          return true;
        }
      }
;
    }
  }
);
  TestSubscriber<Integer> testSubscriber=new TestSubscriber<Integer>(){
    @Override public void onNext(    Integer t){
      super.onNext(t);
    }
  }
;
  flowable.observeOn(Schedulers.newThread()).take(numForBatches).subscribe(testSubscriber);
  testSubscriber.awaitTerminalEvent();
  System.err.println(testSubscriber.values());
  System.out.println("Generated: " + generated.get());
  assertTrue(generated.get() >= numForBatches && generated.get() <= numForBatches + Flowable.bufferSize());
}
