@Test public void testQueueFullEmitsError(){
  final CountDownLatch latch=new CountDownLatch(1);
  Flowable<Integer> flowable=Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      for (int i=0; i < Flowable.bufferSize() + 10; i++) {
        subscriber.onNext(i);
      }
      latch.countDown();
      subscriber.onComplete();
    }
  }
);
  TestSubscriber<Integer> testSubscriber=new TestSubscriber<Integer>(new DefaultSubscriber<Integer>(){
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onNext(    Integer t){
      try {
        latch.await(500,TimeUnit.MILLISECONDS);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
);
  flowable.observeOn(Schedulers.newThread()).subscribe(testSubscriber);
  testSubscriber.awaitTerminalEvent();
  List<Throwable> errors=testSubscriber.errors();
  assertEquals(1,errors.size());
  System.out.println("Errors: " + errors);
  Throwable t=errors.get(0);
  if (t instanceof MissingBackpressureException) {
  }
 else {
    if (t.getCause() instanceof MissingBackpressureException) {
    }
 else {
      fail("Expecting MissingBackpressureException");
    }
  }
}
