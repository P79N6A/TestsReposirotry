@Test public void outputFusedCancelReentrant() throws Exception {
  final UnicastProcessor<Integer> us=UnicastProcessor.create();
  final CountDownLatch cdl=new CountDownLatch(1);
  us.observeOn(Schedulers.single()).subscribe(new FlowableSubscriber<Integer>(){
    Subscription upstream;
    int count;
    @Override public void onSubscribe(    Subscription s){
      this.upstream=s;
      ((QueueSubscription<?>)s).requestFusion(QueueFuseable.ANY);
    }
    @Override public void onNext(    Integer value){
      if (++count == 1) {
        us.onNext(2);
        upstream.cancel();
        cdl.countDown();
      }
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
  us.onNext(1);
  cdl.await();
}
