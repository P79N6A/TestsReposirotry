@Test public void fixedReplenishPattern(){
  TestSubscriber<Integer> ts=TestSubscriber.create(0);
  TestScheduler test=new TestScheduler();
  final List<Long> requests=new ArrayList<Long>();
  Flowable.range(1,100).doOnRequest(new LongConsumer(){
    @Override public void accept(    long v){
      requests.add(v);
    }
  }
).observeOn(test,false,16).subscribe(ts);
  test.advanceTimeBy(1,TimeUnit.SECONDS);
  ts.request(20);
  test.advanceTimeBy(1,TimeUnit.SECONDS);
  ts.request(10);
  test.advanceTimeBy(1,TimeUnit.SECONDS);
  ts.request(50);
  test.advanceTimeBy(1,TimeUnit.SECONDS);
  ts.request(35);
  test.advanceTimeBy(1,TimeUnit.SECONDS);
  ts.assertValueCount(100);
  ts.assertComplete();
  ts.assertNoErrors();
  assertEquals(Arrays.asList(16L,12L,12L,12L,12L,12L,12L,12L,12L),requests);
}
