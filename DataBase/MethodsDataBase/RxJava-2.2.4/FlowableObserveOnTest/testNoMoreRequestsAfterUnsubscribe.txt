@Test public void testNoMoreRequestsAfterUnsubscribe() throws InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  final List<Long> requests=Collections.synchronizedList(new ArrayList<Long>());
  Flowable.range(1,1000000).doOnRequest(new LongConsumer(){
    @Override public void accept(    long n){
      requests.add(n);
    }
  }
).observeOn(Schedulers.io()).subscribe(new DefaultSubscriber<Integer>(){
    @Override public void onStart(){
      request(1);
    }
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onNext(    Integer t){
      cancel();
      latch.countDown();
    }
  }
);
  assertTrue(latch.await(10,TimeUnit.SECONDS));
  assertEquals(Arrays.asList(128L),requests);
}
