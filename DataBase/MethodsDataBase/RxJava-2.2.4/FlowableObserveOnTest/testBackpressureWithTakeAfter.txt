@Test public void testBackpressureWithTakeAfter(){
  final AtomicInteger generated=new AtomicInteger();
  Flowable<Integer> flowable=Flowable.fromIterable(new Iterable<Integer>(){
    @Override public Iterator<Integer> iterator(){
      return new Iterator<Integer>(){
        @Override public void remove(){
        }
        @Override public Integer next(){
          return generated.getAndIncrement();
        }
        @Override public boolean hasNext(){
          return true;
        }
      }
;
    }
  }
);
  TestSubscriber<Integer> testSubscriber=new TestSubscriber<Integer>(){
    @Override public void onNext(    Integer t){
      System.err.println("c t = " + t + " thread "+ Thread.currentThread());
      super.onNext(t);
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException e) {
      }
    }
  }
;
  flowable.observeOn(Schedulers.newThread()).take(3).subscribe(testSubscriber);
  testSubscriber.awaitTerminalEvent();
  System.err.println(testSubscriber.values());
  testSubscriber.assertValues(0,1,2);
  System.out.println("Generated: " + generated.get());
  assertTrue(generated.get() >= 3 && generated.get() <= Flowable.bufferSize());
}
