@Test public void conditionalConsumerBarrier(){
  TestSubscriber<Integer> ts=SubscriberFusion.newTest(QueueFuseable.ANY);
  Flowable.range(1,5).map(Functions.<Integer>identity()).observeOn(Schedulers.single()).filter(new Predicate<Integer>(){
    @Override public boolean test(    Integer v) throws Exception {
      return v % 2 == 0;
    }
  }
).subscribe(ts);
  ts.assertOf(SubscriberFusion.<Integer>assertFuseable()).assertOf(SubscriberFusion.<Integer>assertFusionMode(QueueFuseable.ASYNC)).awaitDone(5,TimeUnit.SECONDS).assertResult(2,4);
}
