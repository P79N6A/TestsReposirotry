@Test public void nonFusedPollThrows(){
  new Flowable<Integer>(){
    @Override protected void subscribeActual(    Subscriber<? super Integer> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      @SuppressWarnings("unchecked") BaseObserveOnSubscriber<Integer> oo=(BaseObserveOnSubscriber<Integer>)subscriber;
      oo.sourceMode=QueueFuseable.SYNC;
      oo.requested.lazySet(1);
      oo.queue=new SimpleQueue<Integer>(){
        @Override public boolean offer(        Integer value){
          return false;
        }
        @Override public boolean offer(        Integer v1,        Integer v2){
          return false;
        }
        @Nullable @Override public Integer poll() throws Exception {
          throw new TestException();
        }
        @Override public boolean isEmpty(){
          return false;
        }
        @Override public void clear(){
        }
      }
;
      oo.clear();
      oo.trySchedule();
    }
  }
.observeOn(Schedulers.single()).test(0L).awaitDone(5,TimeUnit.SECONDS).assertFailure(TestException.class);
}
