@Test public void testAggregateAsIntSumAccumulatorThrows(){
  BiFunction<Integer,Integer,Integer> sumErr=new BiFunction<Integer,Integer,Integer>(){
    @Override public Integer apply(    Integer t1,    Integer t2){
      throw new TestException();
    }
  }
;
  Single<Integer> result=Observable.just(1,2,3,4,5).reduce(0,sumErr).map(new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer v){
      return v;
    }
  }
);
  result.subscribe(singleObserver);
  verify(singleObserver,never()).onSuccess(any());
  verify(singleObserver,times(1)).onError(any(TestException.class));
}
