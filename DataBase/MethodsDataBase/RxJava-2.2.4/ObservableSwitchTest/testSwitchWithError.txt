@Test public void testSwitchWithError(){
  Observable<Observable<String>> source=Observable.unsafeCreate(new ObservableSource<Observable<String>>(){
    @Override public void subscribe(    Observer<? super Observable<String>> outerObserver){
      outerObserver.onSubscribe(Disposables.empty());
      publishNext(outerObserver,50,Observable.unsafeCreate(new ObservableSource<String>(){
        @Override public void subscribe(        final Observer<? super String> innerObserver){
          innerObserver.onSubscribe(Disposables.empty());
          publishNext(innerObserver,50,"one");
          publishNext(innerObserver,100,"two");
        }
      }
));
      publishNext(outerObserver,200,Observable.unsafeCreate(new ObservableSource<String>(){
        @Override public void subscribe(        Observer<? super String> innerObserver){
          innerObserver.onSubscribe(Disposables.empty());
          publishNext(innerObserver,0,"three");
          publishNext(innerObserver,100,"four");
        }
      }
));
      publishError(outerObserver,250,new TestException());
    }
  }
);
  Observable<String> sampled=Observable.switchOnNext(source);
  sampled.subscribe(observer);
  InOrder inOrder=inOrder(observer);
  scheduler.advanceTimeTo(90,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,never()).onNext(anyString());
  verify(observer,never()).onComplete();
  verify(observer,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(125,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,times(1)).onNext("one");
  verify(observer,never()).onComplete();
  verify(observer,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(175,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,times(1)).onNext("two");
  verify(observer,never()).onComplete();
  verify(observer,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(225,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,times(1)).onNext("three");
  verify(observer,never()).onComplete();
  verify(observer,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(350,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,never()).onNext(anyString());
  verify(observer,never()).onComplete();
  verify(observer,times(1)).onError(any(TestException.class));
}
