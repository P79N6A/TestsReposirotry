@Test public void testSwitchIssue737(){
  Observable<Observable<String>> source=Observable.unsafeCreate(new ObservableSource<Observable<String>>(){
    @Override public void subscribe(    Observer<? super Observable<String>> outerObserver){
      outerObserver.onSubscribe(Disposables.empty());
      publishNext(outerObserver,0,Observable.unsafeCreate(new ObservableSource<String>(){
        @Override public void subscribe(        Observer<? super String> innerObserver){
          innerObserver.onSubscribe(Disposables.empty());
          publishNext(innerObserver,10,"1-one");
          publishNext(innerObserver,20,"1-two");
          publishNext(innerObserver,30,"1-three");
          publishCompleted(innerObserver,40);
        }
      }
));
      publishNext(outerObserver,25,Observable.unsafeCreate(new ObservableSource<String>(){
        @Override public void subscribe(        Observer<? super String> innerObserver){
          innerObserver.onSubscribe(Disposables.empty());
          publishNext(innerObserver,10,"2-one");
          publishNext(innerObserver,20,"2-two");
          publishNext(innerObserver,30,"2-three");
          publishCompleted(innerObserver,40);
        }
      }
));
      publishCompleted(outerObserver,30);
    }
  }
);
  Observable<String> sampled=Observable.switchOnNext(source);
  sampled.subscribe(observer);
  scheduler.advanceTimeTo(1000,TimeUnit.MILLISECONDS);
  InOrder inOrder=inOrder(observer);
  inOrder.verify(observer,times(1)).onNext("1-one");
  inOrder.verify(observer,times(1)).onNext("1-two");
  inOrder.verify(observer,times(1)).onNext("2-one");
  inOrder.verify(observer,times(1)).onNext("2-two");
  inOrder.verify(observer,times(1)).onNext("2-three");
  inOrder.verify(observer,times(1)).onComplete();
  inOrder.verifyNoMoreInteractions();
}
