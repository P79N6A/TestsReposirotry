@Test public void testSwitchWhenInnerCompleteBeforeOuter(){
  Observable<Observable<String>> source=Observable.unsafeCreate(new ObservableSource<Observable<String>>(){
    @Override public void subscribe(    Observer<? super Observable<String>> outerObserver){
      outerObserver.onSubscribe(Disposables.empty());
      publishNext(outerObserver,10,Observable.unsafeCreate(new ObservableSource<String>(){
        @Override public void subscribe(        Observer<? super String> innerObserver){
          innerObserver.onSubscribe(Disposables.empty());
          publishNext(innerObserver,0,"one");
          publishNext(innerObserver,10,"two");
          publishCompleted(innerObserver,20);
        }
      }
));
      publishNext(outerObserver,100,Observable.unsafeCreate(new ObservableSource<String>(){
        @Override public void subscribe(        Observer<? super String> innerObserver){
          innerObserver.onSubscribe(Disposables.empty());
          publishNext(innerObserver,0,"three");
          publishNext(innerObserver,10,"four");
          publishCompleted(innerObserver,20);
        }
      }
));
      publishCompleted(outerObserver,200);
    }
  }
);
  Observable<String> sampled=Observable.switchOnNext(source);
  sampled.subscribe(observer);
  InOrder inOrder=inOrder(observer);
  scheduler.advanceTimeTo(150,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,never()).onComplete();
  inOrder.verify(observer,times(1)).onNext("one");
  inOrder.verify(observer,times(1)).onNext("two");
  inOrder.verify(observer,times(1)).onNext("three");
  inOrder.verify(observer,times(1)).onNext("four");
  scheduler.advanceTimeTo(250,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,never()).onNext(anyString());
  inOrder.verify(observer,times(1)).onComplete();
}
