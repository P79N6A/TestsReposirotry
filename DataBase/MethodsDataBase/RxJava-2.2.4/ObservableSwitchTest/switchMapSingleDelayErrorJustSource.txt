@Test public void switchMapSingleDelayErrorJustSource(){
  final AtomicBoolean completed=new AtomicBoolean();
  Observable.just(0,1).switchMapSingleDelayError(new Function<Integer,SingleSource<Integer>>(){
    @Override public SingleSource<Integer> apply(    Integer v) throws Exception {
      if (v == 0) {
        return Single.error(new RuntimeException());
      }
 else {
        return Single.just(1).doOnSuccess(new Consumer<Integer>(){
          @Override public void accept(          Integer n) throws Exception {
            completed.set(true);
          }
        }
);
      }
    }
  }
).test().assertValue(1).assertError(RuntimeException.class);
  assertTrue(completed.get());
}
