/** 
 * The upstream producer hijacked the switch producer stopping the requests aimed at the inner observables. 
 */
@Test public void testIssue2654(){
  Observable<String> oneItem=Observable.just("Hello").mergeWith(Observable.<String>never());
  Observable<String> src=oneItem.switchMap(new Function<String,Observable<String>>(){
    @Override public Observable<String> apply(    final String s){
      return Observable.just(s).mergeWith(Observable.interval(10,TimeUnit.MILLISECONDS).map(new Function<Long,String>(){
        @Override public String apply(        Long i){
          return s + " " + i;
        }
      }
)).take(250);
    }
  }
).share();
  TestObserver<String> to=new TestObserver<String>(){
    @Override public void onNext(    String t){
      super.onNext(t);
      if (valueCount() == 250) {
        onComplete();
        dispose();
      }
    }
  }
;
  src.subscribe(to);
  to.awaitTerminalEvent(10,TimeUnit.SECONDS);
  System.out.println("> testIssue2654: " + to.valueCount());
  to.assertTerminated();
  to.assertNoErrors();
  Assert.assertEquals(250,to.valueCount());
}
