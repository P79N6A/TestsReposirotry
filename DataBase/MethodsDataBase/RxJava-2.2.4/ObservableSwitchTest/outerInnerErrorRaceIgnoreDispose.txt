@Test public void outerInnerErrorRaceIgnoreDispose(){
  for (int i=0; i < TestHelper.RACE_LONG_LOOPS; i++) {
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final AtomicReference<Observer<? super Integer>> obs1=new AtomicReference<Observer<? super Integer>>();
      final Observable<Integer> ps1=new Observable<Integer>(){
        @Override protected void subscribeActual(        Observer<? super Integer> observer){
          obs1.set(observer);
        }
      }
;
      final AtomicReference<Observer<? super Integer>> obs2=new AtomicReference<Observer<? super Integer>>();
      final Observable<Integer> ps2=new Observable<Integer>(){
        @Override protected void subscribeActual(        Observer<? super Integer> observer){
          obs2.set(observer);
        }
      }
;
      ps1.switchMap(new Function<Integer,ObservableSource<Integer>>(){
        @Override public ObservableSource<Integer> apply(        Integer v) throws Exception {
          if (v == 1) {
            return ps2;
          }
          return Observable.never();
        }
      }
).test();
      obs1.get().onSubscribe(Disposables.empty());
      obs1.get().onNext(1);
      obs2.get().onSubscribe(Disposables.empty());
      final TestException ex1=new TestException();
      Runnable r1=new Runnable(){
        @Override public void run(){
          obs1.get().onError(ex1);
        }
      }
;
      final TestException ex2=new TestException();
      Runnable r2=new Runnable(){
        @Override public void run(){
          obs2.get().onError(ex2);
        }
      }
;
      TestHelper.race(r1,r2);
      for (      Throwable e : errors) {
        assertTrue(e.toString(),e.getCause() instanceof TestException);
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
