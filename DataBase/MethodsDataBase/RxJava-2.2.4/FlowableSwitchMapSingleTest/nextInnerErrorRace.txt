@Test public void nextInnerErrorRace(){
  final TestException ex=new TestException();
  for (int i=0; i < TestHelper.RACE_LONG_LOOPS; i++) {
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final PublishProcessor<Integer> pp=PublishProcessor.create();
      final SingleSubject<Integer> ms=SingleSubject.create();
      final TestSubscriber<Integer> ts=pp.switchMapSingleDelayError(new Function<Integer,SingleSource<Integer>>(){
        @Override public SingleSource<Integer> apply(        Integer v) throws Exception {
          if (v == 1) {
            return ms;
          }
          return Single.never();
        }
      }
).test();
      pp.onNext(1);
      Runnable r1=new Runnable(){
        @Override public void run(){
          pp.onNext(2);
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          ms.onError(ex);
        }
      }
;
      TestHelper.race(r1,r2);
      if (ts.errorCount() != 0) {
        assertTrue(errors.isEmpty());
        ts.assertFailure(TestException.class);
      }
 else       if (!errors.isEmpty()) {
        TestHelper.assertUndeliverable(errors,0,TestException.class);
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
