@Test public void innerErrorAfterTermination(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    final AtomicReference<SingleObserver<? super Integer>> moRef=new AtomicReference<SingleObserver<? super Integer>>();
    TestSubscriber<Integer> ts=new Flowable<Integer>(){
      @Override protected void subscribeActual(      Subscriber<? super Integer> s){
        s.onSubscribe(new BooleanSubscription());
        s.onNext(1);
        s.onError(new TestException("outer"));
      }
    }
.switchMapSingle(new Function<Integer,SingleSource<Integer>>(){
      @Override public SingleSource<Integer> apply(      Integer v) throws Exception {
        return new Single<Integer>(){
          @Override protected void subscribeActual(          SingleObserver<? super Integer> observer){
            observer.onSubscribe(Disposables.empty());
            moRef.set(observer);
          }
        }
;
      }
    }
).test();
    ts.assertFailureAndMessage(TestException.class,"outer");
    moRef.get().onError(new TestException("inner"));
    TestHelper.assertUndeliverable(errors,0,TestException.class,"inner");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
