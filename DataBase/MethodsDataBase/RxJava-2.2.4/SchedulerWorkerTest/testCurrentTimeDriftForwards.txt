@Test public void testCurrentTimeDriftForwards() throws Exception {
  CustomDriftScheduler s=new CustomDriftScheduler();
  Scheduler.Worker w=s.createWorker();
  try {
    final List<Long> times=new ArrayList<Long>();
    Disposable d=w.schedulePeriodically(new Runnable(){
      @Override public void run(){
        times.add(System.currentTimeMillis());
      }
    }
,100,100,TimeUnit.MILLISECONDS);
    Thread.sleep(150);
    s.drift=TimeUnit.SECONDS.toNanos(1) + Scheduler.clockDriftTolerance();
    Thread.sleep(400);
    d.dispose();
    Thread.sleep(150);
    System.out.println("Runs: " + times.size());
    assertTrue(times.size() > 2);
    for (int i=0; i < times.size() - 1; i++) {
      long diff=times.get(i + 1) - times.get(i);
      System.out.println("Diff #" + i + ": "+ diff);
      assertTrue("Diff out of range: " + diff,diff < 250 && diff > 50);
    }
  }
  finally {
    w.dispose();
  }
}
