@Test public void testZipIterableNextThrows(){
  PublishProcessor<String> r1=PublishProcessor.create();
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  InOrder io=inOrder(subscriber);
  Iterable<String> r2=new Iterable<String>(){
    @Override public Iterator<String> iterator(){
      return new Iterator<String>(){
        @Override public boolean hasNext(){
          return true;
        }
        @Override public String next(){
          throw new TestException();
        }
        @Override public void remove(){
          throw new UnsupportedOperationException("Not supported yet.");
        }
      }
;
    }
  }
;
  r1.zipWith(r2,zipr2).subscribe(subscriber);
  r1.onError(new TestException());
  io.verify(subscriber).onError(any(TestException.class));
  verify(subscriber,never()).onNext(any(String.class));
  verify(subscriber,never()).onComplete();
}
