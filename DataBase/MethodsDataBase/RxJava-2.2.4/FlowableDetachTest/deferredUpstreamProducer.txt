@Test public void deferredUpstreamProducer(){
  final AtomicReference<Subscriber<? super Object>> subscriber=new AtomicReference<Subscriber<? super Object>>();
  TestSubscriber<Object> ts=new TestSubscriber<Object>(0);
  Flowable.unsafeCreate(new Publisher<Object>(){
    @Override public void subscribe(    Subscriber<? super Object> t){
      subscriber.set(t);
    }
  }
).onTerminateDetach().subscribe(ts);
  ts.request(2);
  new FlowableRange(1,3).subscribe(subscriber.get());
  ts.assertValues(1,2);
  ts.request(1);
  ts.assertValues(1,2,3);
  ts.assertComplete();
  ts.assertNoErrors();
}
