@Test public void cancelAfterOnError(){
  final List<Object> list=new ArrayList<Object>();
  Subscriber<Object> sub=new Subscriber<Object>(){
    Subscription upstream;
    @Override public void onSubscribe(    Subscription s){
      this.upstream=s;
    }
    @Override public void onNext(    Object t){
      list.add(t);
    }
    @Override public void onError(    Throwable t){
      upstream.cancel();
      list.add(t.getMessage());
    }
    @Override public void onComplete(){
      upstream.cancel();
      list.add("Done");
    }
  }
;
  new Flowable<Object>(){
    @Override protected void subscribeActual(    Subscriber<? super Object> s){
      BooleanSubscription b=new BooleanSubscription();
      s.onSubscribe(b);
      s.onError(new TestException("Forced failure"));
      list.add(b.isCancelled());
    }
  }
.subscribe(sub);
  assertEquals(Arrays.<Object>asList("Forced failure",false),list);
}
