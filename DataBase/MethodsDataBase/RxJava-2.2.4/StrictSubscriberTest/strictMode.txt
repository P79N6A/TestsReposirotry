@Test public void strictMode(){
  final List<Object> list=new ArrayList<Object>();
  Subscriber<Object> sub=new Subscriber<Object>(){
    @Override public void onSubscribe(    Subscription s){
      s.request(10);
    }
    @Override public void onNext(    Object t){
      list.add(t);
    }
    @Override public void onError(    Throwable t){
      list.add(t);
    }
    @Override public void onComplete(){
      list.add("Done");
    }
  }
;
  new Flowable<Object>(){
    @Override protected void subscribeActual(    Subscriber<? super Object> s){
      s.onSubscribe(new BooleanSubscription());
      s.onNext(s);
    }
  }
.subscribe(sub);
  assertTrue(list.toString(),list.get(0) instanceof StrictSubscriber);
}
