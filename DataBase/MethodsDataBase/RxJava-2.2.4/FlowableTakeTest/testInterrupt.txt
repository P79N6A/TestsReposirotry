@Test public void testInterrupt() throws InterruptedException {
  final AtomicReference<Object> exception=new AtomicReference<Object>();
  final CountDownLatch latch=new CountDownLatch(1);
  Flowable.just(1).subscribeOn(Schedulers.computation()).take(1).subscribe(new Consumer<Integer>(){
    @Override public void accept(    Integer t1){
      try {
        Thread.sleep(100);
      }
 catch (      Exception e) {
        exception.set(e);
        e.printStackTrace();
      }
 finally {
        latch.countDown();
      }
    }
  }
);
  latch.await();
  assertNull(exception.get());
}
