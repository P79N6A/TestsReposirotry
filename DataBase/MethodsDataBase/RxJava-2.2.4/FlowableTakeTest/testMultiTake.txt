@Test(timeout=2000) public void testMultiTake(){
  final AtomicInteger count=new AtomicInteger();
  Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> s){
      BooleanSubscription bs=new BooleanSubscription();
      s.onSubscribe(bs);
      for (int i=0; !bs.isCancelled(); i++) {
        System.out.println("Emit: " + i);
        count.incrementAndGet();
        s.onNext(i);
      }
    }
  }
).take(100).take(1).blockingForEach(new Consumer<Integer>(){
    @Override public void accept(    Integer t1){
      System.out.println("Receive: " + t1);
    }
  }
);
  assertEquals(1,count.get());
}
