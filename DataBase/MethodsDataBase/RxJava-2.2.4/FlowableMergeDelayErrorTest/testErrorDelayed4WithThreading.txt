@Test public void testErrorDelayed4WithThreading(){
  final TestAsyncErrorFlowable f1=new TestAsyncErrorFlowable("one","two","three");
  final TestAsyncErrorFlowable f2=new TestAsyncErrorFlowable("four","five","six");
  final TestAsyncErrorFlowable f3=new TestAsyncErrorFlowable("seven","eight");
  final TestAsyncErrorFlowable f4=new TestAsyncErrorFlowable("nine",null);
  Flowable<String> m=Flowable.mergeDelayError(Flowable.unsafeCreate(f1),Flowable.unsafeCreate(f2),Flowable.unsafeCreate(f3),Flowable.unsafeCreate(f4));
  m.subscribe(stringSubscriber);
  try {
    f1.t.join();
    f2.t.join();
    f3.t.join();
    f4.t.join();
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  verify(stringSubscriber,times(1)).onNext("one");
  verify(stringSubscriber,times(1)).onNext("two");
  verify(stringSubscriber,times(1)).onNext("three");
  verify(stringSubscriber,times(1)).onNext("four");
  verify(stringSubscriber,times(1)).onNext("five");
  verify(stringSubscriber,times(1)).onNext("six");
  verify(stringSubscriber,times(1)).onNext("seven");
  verify(stringSubscriber,times(1)).onNext("eight");
  verify(stringSubscriber,times(1)).onNext("nine");
  verify(stringSubscriber,times(1)).onError(any(NullPointerException.class));
  verify(stringSubscriber,never()).onComplete();
}
