@Test @Ignore("Subscribers should not throw") public void testMergeSourceWhichDoesntPropagateExceptionBack(){
  Flowable<Integer> source=Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> t1){
      t1.onSubscribe(new BooleanSubscription());
      try {
        t1.onNext(0);
      }
 catch (      Throwable swallow) {
      }
      t1.onNext(1);
      t1.onComplete();
    }
  }
);
  Flowable<Integer> result=Flowable.mergeDelayError(source,Flowable.just(2));
  final Subscriber<Integer> subscriber=TestHelper.mockSubscriber();
  InOrder inOrder=inOrder(subscriber);
  result.subscribe(new DefaultSubscriber<Integer>(){
    int calls;
    @Override public void onNext(    Integer t){
      if (calls++ == 0) {
        throw new TestException();
      }
      subscriber.onNext(t);
    }
    @Override public void onError(    Throwable e){
      subscriber.onError(e);
    }
    @Override public void onComplete(){
      subscriber.onComplete();
    }
  }
);
  inOrder.verify(subscriber).onNext(2);
  inOrder.verify(subscriber,never()).onNext(0);
  inOrder.verify(subscriber,never()).onNext(1);
  inOrder.verify(subscriber,never()).onNext(anyInt());
  inOrder.verify(subscriber).onError(any(TestException.class));
  verify(subscriber,never()).onComplete();
}
