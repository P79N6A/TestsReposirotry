@Test public void unwrapWorkerPeriodicTask(){
  final Runnable runnable=new Runnable(){
    @Override public void run(){
    }
  }
;
  Scheduler scheduler=new Scheduler(){
    @Override public Worker createWorker(){
      return new Worker(){
        @Override public Disposable schedule(        Runnable run,        long delay,        TimeUnit unit){
          SchedulerRunnableIntrospection outerWrapper=(SchedulerRunnableIntrospection)run;
          SchedulerRunnableIntrospection innerWrapper=(SchedulerRunnableIntrospection)outerWrapper.getWrappedRunnable();
          assertSame(runnable,innerWrapper.getWrappedRunnable());
          return (Disposable)innerWrapper;
        }
        @Override public void dispose(){
        }
        @Override public boolean isDisposed(){
          return false;
        }
      }
;
    }
  }
;
  scheduler.schedulePeriodicallyDirect(runnable,100,100,TimeUnit.MILLISECONDS);
}
