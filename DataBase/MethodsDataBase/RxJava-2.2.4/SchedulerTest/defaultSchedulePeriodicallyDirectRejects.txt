@Test public void defaultSchedulePeriodicallyDirectRejects(){
  Scheduler s=new Scheduler(){
    @NonNull @Override public Worker createWorker(){
      return new Worker(){
        @NonNull @Override public Disposable schedule(        @NonNull Runnable run,        long delay,        @NonNull TimeUnit unit){
          return EmptyDisposable.INSTANCE;
        }
        @Override public void dispose(){
        }
        @Override public boolean isDisposed(){
          return false;
        }
      }
;
    }
  }
;
  assertSame(EmptyDisposable.INSTANCE,s.schedulePeriodicallyDirect(Functions.EMPTY_RUNNABLE,1,1,TimeUnit.MILLISECONDS));
}
