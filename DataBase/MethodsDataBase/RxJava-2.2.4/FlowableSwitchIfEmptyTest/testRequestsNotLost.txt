@Test(timeout=10000) public void testRequestsNotLost() throws InterruptedException {
  final TestSubscriber<Long> ts=new TestSubscriber<Long>(0L);
  Flowable.unsafeCreate(new Publisher<Long>(){
    @Override public void subscribe(    final Subscriber<? super Long> subscriber){
      subscriber.onSubscribe(new Subscription(){
        final AtomicBoolean completed=new AtomicBoolean(false);
        @Override public void request(        long n){
          if (n > 0 && completed.compareAndSet(false,true)) {
            Schedulers.io().createWorker().schedule(new Runnable(){
              @Override public void run(){
                subscriber.onComplete();
              }
            }
,100,TimeUnit.MILLISECONDS);
          }
        }
        @Override public void cancel(){
        }
      }
);
    }
  }
).switchIfEmpty(Flowable.fromIterable(Arrays.asList(1L,2L,3L))).subscribeOn(Schedulers.computation()).subscribe(ts);
  Thread.sleep(50);
  ts.request(1);
  ts.request(1);
  Thread.sleep(500);
  ts.assertNotComplete();
  ts.assertNoErrors();
  ts.assertValueCount(2);
  ts.dispose();
}
