@Test public void testSwitchWithProducer() throws Exception {
  final AtomicBoolean emitted=new AtomicBoolean(false);
  Flowable<Long> withProducer=Flowable.unsafeCreate(new Publisher<Long>(){
    @Override public void subscribe(    final Subscriber<? super Long> subscriber){
      subscriber.onSubscribe(new Subscription(){
        @Override public void request(        long n){
          if (n > 0 && emitted.compareAndSet(false,true)) {
            emitted.set(true);
            subscriber.onNext(42L);
            subscriber.onComplete();
          }
        }
        @Override public void cancel(){
        }
      }
);
    }
  }
);
  final Flowable<Long> flowable=Flowable.<Long>empty().switchIfEmpty(withProducer);
  assertEquals(42,flowable.blockingSingle().intValue());
}
