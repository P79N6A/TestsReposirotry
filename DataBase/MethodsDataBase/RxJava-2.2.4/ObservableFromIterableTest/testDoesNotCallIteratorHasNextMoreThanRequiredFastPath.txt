@Test public void testDoesNotCallIteratorHasNextMoreThanRequiredFastPath(){
  final AtomicBoolean called=new AtomicBoolean(false);
  Iterable<Integer> iterable=new Iterable<Integer>(){
    @Override public Iterator<Integer> iterator(){
      return new Iterator<Integer>(){
        @Override public void remove(){
        }
        int count=1;
        @Override public boolean hasNext(){
          if (count > 1) {
            called.set(true);
            return false;
          }
          return true;
        }
        @Override public Integer next(){
          return count++;
        }
      }
;
    }
  }
;
  Observable.fromIterable(iterable).subscribe(new DefaultObserver<Integer>(){
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onNext(    Integer t){
      cancel();
    }
  }
);
  assertFalse(called.get());
}
