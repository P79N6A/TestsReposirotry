@Test(timeout=5000) public void testUnsubscribeInfiniteStream() throws InterruptedException {
  TestObserver<Integer> to=new TestObserver<Integer>();
  final AtomicInteger count=new AtomicInteger();
  Observable.unsafeCreate(new ObservableSource<Integer>(){
    @Override public void subscribe(    Observer<? super Integer> sub){
      Disposable d=Disposables.empty();
      sub.onSubscribe(d);
      for (int i=1; !d.isDisposed(); i++) {
        count.incrementAndGet();
        sub.onNext(i);
      }
    }
  }
).subscribeOn(Schedulers.newThread()).take(10).subscribe(to);
  to.awaitTerminalEvent(1000,TimeUnit.MILLISECONDS);
  to.dispose();
  Thread.sleep(200);
  to.assertValues(1,2,3,4,5,6,7,8,9,10);
  assertEquals(10,count.get());
}
