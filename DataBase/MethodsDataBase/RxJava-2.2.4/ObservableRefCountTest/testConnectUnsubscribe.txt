@Test public void testConnectUnsubscribe() throws InterruptedException {
  final CountDownLatch unsubscribeLatch=new CountDownLatch(1);
  final CountDownLatch subscribeLatch=new CountDownLatch(1);
  Observable<Long> o=synchronousInterval().doOnSubscribe(new Consumer<Disposable>(){
    @Override public void accept(    Disposable d){
      System.out.println("******************************* Subscribe received");
      subscribeLatch.countDown();
    }
  }
).doOnDispose(new Action(){
    @Override public void run(){
      System.out.println("******************************* Unsubscribe received");
      unsubscribeLatch.countDown();
    }
  }
);
  TestObserver<Long> observer=new TestObserver<Long>();
  o.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(observer);
  System.out.println("send unsubscribe");
  subscribeLatch.await();
  observer.dispose();
  System.out.println("DONE sending unsubscribe ... now waiting");
  if (!unsubscribeLatch.await(3000,TimeUnit.MILLISECONDS)) {
    System.out.println("Errors: " + observer.errors());
    if (observer.errors().size() > 0) {
      observer.errors().get(0).printStackTrace();
    }
    fail("timed out waiting for unsubscribe");
  }
  observer.assertNoErrors();
}
