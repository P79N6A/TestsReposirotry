@Test public void testRepeat(){
  final AtomicInteger subscribeCount=new AtomicInteger();
  final AtomicInteger unsubscribeCount=new AtomicInteger();
  Observable<Long> r=Observable.interval(0,1,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Disposable>(){
    @Override public void accept(    Disposable d){
      System.out.println("******************************* Subscribe received");
      subscribeCount.incrementAndGet();
    }
  }
).doOnDispose(new Action(){
    @Override public void run(){
      System.out.println("******************************* Unsubscribe received");
      unsubscribeCount.incrementAndGet();
    }
  }
).publish().refCount();
  for (int i=0; i < 10; i++) {
    TestObserver<Long> to1=new TestObserver<Long>();
    TestObserver<Long> to2=new TestObserver<Long>();
    r.subscribe(to1);
    r.subscribe(to2);
    try {
      Thread.sleep(50);
    }
 catch (    InterruptedException e) {
    }
    to1.dispose();
    to2.dispose();
    to1.assertNoErrors();
    to2.assertNoErrors();
    assertTrue(to1.valueCount() > 0);
    assertTrue(to2.valueCount() > 0);
  }
  assertEquals(10,subscribeCount.get());
  assertEquals(10,unsubscribeCount.get());
}
