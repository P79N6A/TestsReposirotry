@Test public void testRefCountAsync(){
  final AtomicInteger subscribeCount=new AtomicInteger();
  final AtomicInteger nextCount=new AtomicInteger();
  Observable<Long> r=Observable.interval(0,25,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Disposable>(){
    @Override public void accept(    Disposable d){
      subscribeCount.incrementAndGet();
    }
  }
).doOnNext(new Consumer<Long>(){
    @Override public void accept(    Long l){
      nextCount.incrementAndGet();
    }
  }
).publish().refCount();
  final AtomicInteger receivedCount=new AtomicInteger();
  Disposable d1=r.subscribe(new Consumer<Long>(){
    @Override public void accept(    Long l){
      receivedCount.incrementAndGet();
    }
  }
);
  Disposable d2=r.subscribe();
  try {
    Thread.sleep(260);
  }
 catch (  InterruptedException e) {
  }
  d2.dispose();
  d1.dispose();
  System.out.println("onNext: " + nextCount.get());
  assertEquals(nextCount.get(),receivedCount.get());
  assertEquals(1,subscribeCount.get());
}
