@Test public void onlyFirstShouldSubscribeAndLastUnsubscribe(){
  final AtomicInteger subscriptionCount=new AtomicInteger();
  final AtomicInteger unsubscriptionCount=new AtomicInteger();
  Observable<Integer> o=Observable.unsafeCreate(new ObservableSource<Integer>(){
    @Override public void subscribe(    Observer<? super Integer> observer){
      subscriptionCount.incrementAndGet();
      observer.onSubscribe(Disposables.fromRunnable(new Runnable(){
        @Override public void run(){
          unsubscriptionCount.incrementAndGet();
        }
      }
));
    }
  }
);
  Observable<Integer> refCounted=o.publish().refCount();
  Disposable first=refCounted.subscribe();
  assertEquals(1,subscriptionCount.get());
  Disposable second=refCounted.subscribe();
  assertEquals(1,subscriptionCount.get());
  first.dispose();
  assertEquals(0,unsubscriptionCount.get());
  second.dispose();
  assertEquals(1,unsubscriptionCount.get());
}
