@Test(timeout=10000) public void testUpstreamErrorAllowsRetry() throws InterruptedException {
  final AtomicInteger intervalSubscribed=new AtomicInteger();
  Observable<String> interval=Observable.interval(200,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Disposable>(){
    @Override public void accept(    Disposable d){
      System.out.println("Subscribing to interval " + intervalSubscribed.incrementAndGet());
    }
  }
).flatMap(new Function<Long,Observable<String>>(){
    @Override public Observable<String> apply(    Long t1){
      return Observable.defer(new Callable<Observable<String>>(){
        @Override public Observable<String> call(){
          return Observable.<String>error(new Exception("Some exception"));
        }
      }
);
    }
  }
).onErrorResumeNext(new Function<Throwable,Observable<String>>(){
    @Override public Observable<String> apply(    Throwable t1){
      return Observable.<String>error(t1);
    }
  }
).publish().refCount();
  interval.doOnError(new Consumer<Throwable>(){
    @Override public void accept(    Throwable t1){
      System.out.println("Observer 1 onError: " + t1);
    }
  }
).retry(5).subscribe(new Consumer<String>(){
    @Override public void accept(    String t1){
      System.out.println("Observer 1: " + t1);
    }
  }
);
  Thread.sleep(100);
  interval.doOnError(new Consumer<Throwable>(){
    @Override public void accept(    Throwable t1){
      System.out.println("Observer 2 onError: " + t1);
    }
  }
).retry(5).subscribe(new Consumer<String>(){
    @Override public void accept(    String t1){
      System.out.println("Observer 2: " + t1);
    }
  }
);
  Thread.sleep(1300);
  System.out.println(intervalSubscribed.get());
  assertEquals(6,intervalSubscribed.get());
}
