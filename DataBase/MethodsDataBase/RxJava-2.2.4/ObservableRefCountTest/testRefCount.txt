@Test public void testRefCount(){
  TestScheduler s=new TestScheduler();
  Observable<Long> interval=Observable.interval(100,TimeUnit.MILLISECONDS,s).publish().refCount();
  final List<Long> list1=new ArrayList<Long>();
  Disposable d1=interval.subscribe(new Consumer<Long>(){
    @Override public void accept(    Long t1){
      list1.add(t1);
    }
  }
);
  s.advanceTimeBy(200,TimeUnit.MILLISECONDS);
  assertEquals(2,list1.size());
  assertEquals(0L,list1.get(0).longValue());
  assertEquals(1L,list1.get(1).longValue());
  final List<Long> list2=new ArrayList<Long>();
  Disposable d2=interval.subscribe(new Consumer<Long>(){
    @Override public void accept(    Long t1){
      list2.add(t1);
    }
  }
);
  s.advanceTimeBy(300,TimeUnit.MILLISECONDS);
  assertEquals(5,list1.size());
  assertEquals(2L,list1.get(2).longValue());
  assertEquals(3L,list1.get(3).longValue());
  assertEquals(4L,list1.get(4).longValue());
  assertEquals(3,list2.size());
  assertEquals(2L,list2.get(0).longValue());
  assertEquals(3L,list2.get(1).longValue());
  assertEquals(4L,list2.get(2).longValue());
  d1.dispose();
  s.advanceTimeBy(300,TimeUnit.MILLISECONDS);
  assertEquals(5,list1.size());
  assertEquals(6,list2.size());
  assertEquals(5L,list2.get(3).longValue());
  assertEquals(6L,list2.get(4).longValue());
  assertEquals(7L,list2.get(5).longValue());
  d2.dispose();
  s.advanceTimeBy(1000,TimeUnit.MILLISECONDS);
  final List<Long> list3=new ArrayList<Long>();
  interval.subscribe(new Consumer<Long>(){
    @Override public void accept(    Long t1){
      list3.add(t1);
    }
  }
);
  s.advanceTimeBy(200,TimeUnit.MILLISECONDS);
  assertEquals(2,list3.size());
  assertEquals(0L,list3.get(0).longValue());
  assertEquals(1L,list3.get(1).longValue());
}
