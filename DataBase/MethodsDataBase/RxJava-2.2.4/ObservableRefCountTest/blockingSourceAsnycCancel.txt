@Test(timeout=7500) public void blockingSourceAsnycCancel() throws Exception {
  BehaviorSubject<Integer> bs=BehaviorSubject.createDefault(1);
  Observable<Integer> o=bs.replay(1).refCount();
  o.subscribe();
  final AtomicBoolean interrupted=new AtomicBoolean();
  o.switchMap(new Function<Integer,ObservableSource<? extends Object>>(){
    @Override public ObservableSource<? extends Object> apply(    Integer v) throws Exception {
      return Observable.create(new ObservableOnSubscribe<Object>(){
        @Override public void subscribe(        ObservableEmitter<Object> emitter) throws Exception {
          while (!emitter.isDisposed()) {
            Thread.sleep(100);
          }
          interrupted.set(true);
        }
      }
);
    }
  }
).take(500,TimeUnit.MILLISECONDS).test().awaitDone(5,TimeUnit.SECONDS).assertResult();
  assertTrue(interrupted.get());
}
