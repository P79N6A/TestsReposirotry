@Test public void testRepeatTakeWithSubscribeOn() throws InterruptedException {
  final AtomicInteger counter=new AtomicInteger();
  Flowable<Integer> oi=Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> sub){
      sub.onSubscribe(new BooleanSubscription());
      counter.incrementAndGet();
      sub.onNext(1);
      sub.onNext(2);
      sub.onComplete();
    }
  }
).subscribeOn(Schedulers.newThread());
  Object[] ys=oi.repeat().subscribeOn(Schedulers.newThread()).map(new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer t1){
      try {
        Thread.sleep(50);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      return t1;
    }
  }
).take(4).toList().blockingGet().toArray();
  assertEquals(2,counter.get());
  assertArrayEquals(new Object[]{1,2,1,2},ys);
}
