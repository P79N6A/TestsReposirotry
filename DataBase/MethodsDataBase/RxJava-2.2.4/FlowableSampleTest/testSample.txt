@Test public void testSample(){
  Flowable<Long> source=Flowable.unsafeCreate(new Publisher<Long>(){
    @Override public void subscribe(    final Subscriber<? super Long> subscriber1){
      subscriber1.onSubscribe(new BooleanSubscription());
      innerScheduler.schedule(new Runnable(){
        @Override public void run(){
          subscriber1.onNext(1L);
        }
      }
,1,TimeUnit.SECONDS);
      innerScheduler.schedule(new Runnable(){
        @Override public void run(){
          subscriber1.onNext(2L);
        }
      }
,2,TimeUnit.SECONDS);
      innerScheduler.schedule(new Runnable(){
        @Override public void run(){
          subscriber1.onComplete();
        }
      }
,3,TimeUnit.SECONDS);
    }
  }
);
  Flowable<Long> sampled=source.sample(400L,TimeUnit.MILLISECONDS,scheduler);
  sampled.subscribe(subscriber);
  InOrder inOrder=inOrder(subscriber);
  scheduler.advanceTimeTo(800L,TimeUnit.MILLISECONDS);
  verify(subscriber,never()).onNext(any(Long.class));
  verify(subscriber,never()).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(1200L,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,times(1)).onNext(1L);
  verify(subscriber,never()).onNext(2L);
  verify(subscriber,never()).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(1600L,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,never()).onNext(1L);
  verify(subscriber,never()).onNext(2L);
  verify(subscriber,never()).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(2000L,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,never()).onNext(1L);
  inOrder.verify(subscriber,times(1)).onNext(2L);
  verify(subscriber,never()).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(3000L,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,never()).onNext(1L);
  inOrder.verify(subscriber,never()).onNext(2L);
  verify(subscriber,times(1)).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
}
