@Test public void testBackpressureWithTakeBefore(){
  final AtomicInteger generated=new AtomicInteger();
  Observable<Integer> o=Observable.fromIterable(new Iterable<Integer>(){
    @Override public Iterator<Integer> iterator(){
      return new Iterator<Integer>(){
        @Override public void remove(){
        }
        @Override public Integer next(){
          return generated.getAndIncrement();
        }
        @Override public boolean hasNext(){
          return true;
        }
      }
;
    }
  }
);
  TestObserver<Integer> to=new TestObserver<Integer>();
  o.take(7).observeOn(Schedulers.newThread()).subscribe(to);
  to.awaitTerminalEvent();
  to.assertValues(0,1,2,3,4,5,6);
  assertEquals(7,generated.get());
}
