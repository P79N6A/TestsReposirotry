@Test public void testZipObservableOfObservables(){
  FlowableEventStream.getEventStream("HTTP-ClusterB",20).groupBy(new Function<Event,String>(){
    @Override public String apply(    Event e){
      return e.instanceId;
    }
  }
).flatMap(new Function<GroupedFlowable<String,Event>,Publisher<HashMap<String,String>>>(){
    @Override public Publisher<HashMap<String,String>> apply(    final GroupedFlowable<String,Event> ge){
      return ge.scan(new HashMap<String,String>(),new BiFunction<HashMap<String,String>,Event,HashMap<String,String>>(){
        @Override public HashMap<String,String> apply(        HashMap<String,String> accum,        Event perInstanceEvent){
synchronized (accum) {
            accum.put("instance",ge.getKey());
          }
          return accum;
        }
      }
);
    }
  }
).take(10).blockingForEach(new Consumer<HashMap<String,String>>(){
    @Override public void accept(    HashMap<String,String> v){
synchronized (v) {
        System.out.println(v);
      }
    }
  }
);
  System.out.println("**** finished");
}
