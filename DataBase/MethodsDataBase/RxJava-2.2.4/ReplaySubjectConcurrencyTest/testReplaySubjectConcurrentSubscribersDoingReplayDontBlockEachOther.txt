@Test(timeout=4000) public void testReplaySubjectConcurrentSubscribersDoingReplayDontBlockEachOther() throws InterruptedException {
  final ReplaySubject<Long> replay=ReplaySubject.create();
  Thread source=new Thread(new Runnable(){
    @Override public void run(){
      Observable.unsafeCreate(new ObservableSource<Long>(){
        @Override public void subscribe(        Observer<? super Long> o){
          o.onSubscribe(Disposables.empty());
          System.out.println("********* Start Source Data ***********");
          for (long l=1; l <= 10000; l++) {
            o.onNext(l);
          }
          System.out.println("********* Finished Source Data ***********");
          o.onComplete();
        }
      }
).subscribe(replay);
    }
  }
);
  source.start();
  long v=replay.blockingLast();
  assertEquals(10000,v);
  final CountDownLatch slowLatch=new CountDownLatch(1);
  Thread slowThread=new Thread(new Runnable(){
    @Override public void run(){
      Observer<Long> slow=new DefaultObserver<Long>(){
        @Override public void onComplete(){
          System.out.println("*** Slow Observer completed");
          slowLatch.countDown();
        }
        @Override public void onError(        Throwable e){
        }
        @Override public void onNext(        Long args){
          if (args == 1) {
            System.out.println("*** Slow Observer STARTED");
          }
          try {
            if (args % 10 == 0) {
              Thread.sleep(1);
            }
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
;
      replay.subscribe(slow);
      try {
        slowLatch.await();
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  slowThread.start();
  Thread fastThread=new Thread(new Runnable(){
    @Override public void run(){
      final CountDownLatch fastLatch=new CountDownLatch(1);
      Observer<Long> fast=new DefaultObserver<Long>(){
        @Override public void onComplete(){
          System.out.println("*** Fast Observer completed");
          fastLatch.countDown();
        }
        @Override public void onError(        Throwable e){
        }
        @Override public void onNext(        Long args){
          if (args == 1) {
            System.out.println("*** Fast Observer STARTED");
          }
        }
      }
;
      replay.subscribe(fast);
      try {
        fastLatch.await();
      }
 catch (      InterruptedException e1) {
        e1.printStackTrace();
      }
    }
  }
);
  fastThread.start();
  fastThread.join();
  assertEquals(1,slowLatch.getCount());
  slowThread.join();
}
