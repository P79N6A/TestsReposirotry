@Test public void testTakeUnsubscribesOnFlatMapOfGroupBy(){
  Flowable.merge(FlowableEventStream.getEventStream("HTTP-ClusterA",50),FlowableEventStream.getEventStream("HTTP-ClusterB",20)).groupBy(new Function<Event,Object>(){
    @Override public Object apply(    Event event){
      return event.type;
    }
  }
).flatMap(new Function<GroupedFlowable<Object,Event>,Publisher<Object>>(){
    @Override public Publisher<Object> apply(    GroupedFlowable<Object,Event> g){
      return g.map(new Function<Event,Object>(){
        @Override public Object apply(        Event event){
          return event.instanceId + " - " + event.values.get("count200");
        }
      }
);
    }
  }
).take(20).blockingForEach(new Consumer<Object>(){
    @Override public void accept(    Object v){
      System.out.println(v);
    }
  }
);
  System.out.println("**** finished");
}
