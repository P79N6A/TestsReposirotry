@Test public void groupsCompleteAsSoonAsMainCompletes(){
  TestSubscriber<Integer> ts=TestSubscriber.create();
  Flowable.range(0,20).groupBy(new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer i){
      return i % 5;
    }
  }
).concatMap(new Function<GroupedFlowable<Integer,Integer>,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    GroupedFlowable<Integer,Integer> v){
      return v;
    }
  }
).subscribe(ts);
  ts.assertValues(0,5,10,15,1,6,11,16,2,7,12,17,3,8,13,18,4,9,14,19);
  ts.assertComplete();
  ts.assertNoErrors();
}
