@Test public void testWindowViaFlowableBoundaryCompletes(){
  PublishProcessor<Integer> source=PublishProcessor.create();
  PublishProcessor<Integer> boundary=PublishProcessor.create();
  final Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  final List<Subscriber<Object>> values=new ArrayList<Subscriber<Object>>();
  Subscriber<Flowable<Integer>> wo=new DefaultSubscriber<Flowable<Integer>>(){
    @Override public void onNext(    Flowable<Integer> args){
      final Subscriber<Object> mo=TestHelper.mockSubscriber();
      values.add(mo);
      args.subscribe(mo);
    }
    @Override public void onError(    Throwable e){
      subscriber.onError(e);
    }
    @Override public void onComplete(){
      subscriber.onComplete();
    }
  }
;
  source.window(boundary).subscribe(wo);
  int n=30;
  for (int i=0; i < n; i++) {
    source.onNext(i);
    if (i % 3 == 2 && i < n - 1) {
      boundary.onNext(i / 3);
    }
  }
  boundary.onComplete();
  assertEquals(n / 3,values.size());
  int j=0;
  for (  Subscriber<Object> mo : values) {
    for (int i=0; i < 3; i++) {
      verify(mo).onNext(j + i);
    }
    verify(mo).onComplete();
    verify(mo,never()).onError(any(Throwable.class));
    j+=3;
  }
  verify(subscriber).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
}
