@Test public void testBoundaryUnsubscribedOnMainCompletion(){
  PublishProcessor<Integer> source=PublishProcessor.create();
  final PublishProcessor<Integer> boundary=PublishProcessor.create();
  Callable<Flowable<Integer>> boundaryFunc=new Callable<Flowable<Integer>>(){
    @Override public Flowable<Integer> call(){
      return boundary;
    }
  }
;
  TestSubscriber<Flowable<Integer>> ts=new TestSubscriber<Flowable<Integer>>();
  source.window(boundaryFunc).subscribe(ts);
  assertTrue(source.hasSubscribers());
  assertTrue(boundary.hasSubscribers());
  source.onComplete();
  assertFalse(source.hasSubscribers());
  assertFalse(boundary.hasSubscribers());
  ts.assertComplete();
  ts.assertNoErrors();
  ts.assertValueCount(1);
}
