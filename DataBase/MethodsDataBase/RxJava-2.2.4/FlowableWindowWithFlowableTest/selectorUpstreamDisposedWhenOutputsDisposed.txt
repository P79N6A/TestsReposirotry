@Test public void selectorUpstreamDisposedWhenOutputsDisposed(){
  PublishProcessor<Integer> source=PublishProcessor.create();
  PublishProcessor<Integer> boundary=PublishProcessor.create();
  TestSubscriber<Integer> ts=source.window(Functions.justCallable(boundary)).take(1).flatMap(new Function<Flowable<Integer>,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Flowable<Integer> w) throws Exception {
      return w.take(1);
    }
  }
).test();
  source.onNext(1);
  assertFalse("source not disposed",source.hasSubscribers());
  assertFalse("boundary not disposed",boundary.hasSubscribers());
  ts.assertResult(1);
}
