@Test public void testWindowViaFlowableThrows(){
  PublishProcessor<Integer> source=PublishProcessor.create();
  PublishProcessor<Integer> boundary=PublishProcessor.create();
  final Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  final List<Subscriber<Object>> values=new ArrayList<Subscriber<Object>>();
  Subscriber<Flowable<Integer>> wo=new DefaultSubscriber<Flowable<Integer>>(){
    @Override public void onNext(    Flowable<Integer> args){
      final Subscriber<Object> mo=TestHelper.mockSubscriber();
      values.add(mo);
      args.subscribe(mo);
    }
    @Override public void onError(    Throwable e){
      subscriber.onError(e);
    }
    @Override public void onComplete(){
      subscriber.onComplete();
    }
  }
;
  source.window(boundary).subscribe(wo);
  source.onNext(0);
  source.onNext(1);
  source.onNext(2);
  source.onError(new TestException());
  assertEquals(1,values.size());
  Subscriber<Object> mo=values.get(0);
  verify(mo).onNext(0);
  verify(mo).onNext(1);
  verify(mo).onNext(2);
  verify(mo).onError(any(TestException.class));
  verify(subscriber,never()).onComplete();
  verify(subscriber).onError(any(TestException.class));
}
