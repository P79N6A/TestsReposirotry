@Test public void testInnerBackpressure(){
  Flowable<Integer> source=Flowable.range(1,10);
  final PublishProcessor<Integer> boundary=PublishProcessor.create();
  Callable<Flowable<Integer>> boundaryFunc=new Callable<Flowable<Integer>>(){
    @Override public Flowable<Integer> call(){
      return boundary;
    }
  }
;
  final TestSubscriber<Integer> ts=new TestSubscriber<Integer>(1L);
  final TestSubscriber<Flowable<Integer>> ts1=new TestSubscriber<Flowable<Integer>>(1L){
    @Override public void onNext(    Flowable<Integer> t){
      super.onNext(t);
      t.subscribe(ts);
    }
  }
;
  source.window(boundaryFunc).subscribe(ts1);
  ts1.assertNoErrors();
  ts1.assertComplete();
  ts1.assertValueCount(1);
  ts.assertNoErrors();
  ts.assertNotComplete();
  ts.assertValues(1);
  ts.request(11);
  ts.assertValues(1,2,3,4,5,6,7,8,9,10);
  ts.assertNoErrors();
  ts.assertComplete();
}
