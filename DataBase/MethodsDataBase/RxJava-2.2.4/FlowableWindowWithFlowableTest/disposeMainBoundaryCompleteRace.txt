@Test public void disposeMainBoundaryCompleteRace(){
  for (int i=0; i < TestHelper.RACE_LONG_LOOPS; i++) {
    final AtomicReference<Subscriber<? super Object>> refMain=new AtomicReference<Subscriber<? super Object>>();
    final AtomicReference<Subscriber<? super Object>> ref=new AtomicReference<Subscriber<? super Object>>();
    final TestSubscriber<Flowable<Object>> ts=new Flowable<Object>(){
      @Override protected void subscribeActual(      Subscriber<? super Object> subscriber){
        subscriber.onSubscribe(new BooleanSubscription());
        refMain.set(subscriber);
      }
    }
.window(new Flowable<Object>(){
      @Override protected void subscribeActual(      Subscriber<? super Object> subscriber){
        final AtomicInteger counter=new AtomicInteger();
        subscriber.onSubscribe(new Subscription(){
          @Override public void cancel(){
            for (int i=0; i < 100; i++) {
              counter.incrementAndGet();
            }
          }
          @Override public void request(          long n){
          }
        }
);
        ref.set(subscriber);
      }
    }
).test();
    Runnable r1=new Runnable(){
      @Override public void run(){
        ts.cancel();
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        Subscriber<Object> subscriber=ref.get();
        subscriber.onNext(1);
        subscriber.onComplete();
      }
    }
;
    TestHelper.race(r1,r2);
  }
}
