@Test public void newBoundaryCalledAfterWindowClosed(){
  final AtomicInteger calls=new AtomicInteger();
  PublishProcessor<Integer> source=PublishProcessor.create();
  final PublishProcessor<Integer> boundary=PublishProcessor.create();
  Callable<Flowable<Integer>> boundaryFunc=new Callable<Flowable<Integer>>(){
    @Override public Flowable<Integer> call(){
      calls.getAndIncrement();
      return boundary;
    }
  }
;
  TestSubscriber<Flowable<Integer>> ts=new TestSubscriber<Flowable<Integer>>();
  source.window(boundaryFunc).subscribe(ts);
  source.onNext(1);
  boundary.onNext(1);
  assertTrue(boundary.hasSubscribers());
  source.onNext(2);
  boundary.onNext(2);
  assertTrue(boundary.hasSubscribers());
  source.onNext(3);
  boundary.onNext(3);
  assertTrue(boundary.hasSubscribers());
  source.onNext(4);
  source.onComplete();
  ts.assertNoErrors();
  ts.assertValueCount(4);
  ts.assertComplete();
  assertFalse(source.hasSubscribers());
  assertFalse(boundary.hasSubscribers());
}
