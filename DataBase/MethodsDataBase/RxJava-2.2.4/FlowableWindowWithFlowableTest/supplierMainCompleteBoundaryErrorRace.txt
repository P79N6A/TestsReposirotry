@Test public void supplierMainCompleteBoundaryErrorRace(){
  final TestException ex=new TestException();
  for (int i=0; i < TestHelper.RACE_LONG_LOOPS; i++) {
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final AtomicReference<Subscriber<? super Object>> refMain=new AtomicReference<Subscriber<? super Object>>();
      final AtomicReference<Subscriber<? super Object>> ref=new AtomicReference<Subscriber<? super Object>>();
      TestSubscriber<Flowable<Object>> ts=new Flowable<Object>(){
        @Override protected void subscribeActual(        Subscriber<? super Object> subscriber){
          subscriber.onSubscribe(new BooleanSubscription());
          refMain.set(subscriber);
        }
      }
.window(Functions.justCallable(new Flowable<Object>(){
        @Override protected void subscribeActual(        Subscriber<? super Object> subscriber){
          subscriber.onSubscribe(new BooleanSubscription());
          ref.set(subscriber);
        }
      }
)).test();
      Runnable r1=new Runnable(){
        @Override public void run(){
          refMain.get().onComplete();
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          ref.get().onError(ex);
        }
      }
;
      TestHelper.race(r1,r2);
      ts.assertValueCount(1).assertTerminated();
      if (!errors.isEmpty()) {
        TestHelper.assertUndeliverable(errors,0,TestException.class);
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
