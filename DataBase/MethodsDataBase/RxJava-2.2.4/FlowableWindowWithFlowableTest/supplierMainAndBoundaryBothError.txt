@Test public void supplierMainAndBoundaryBothError(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    final AtomicReference<Subscriber<? super Object>> ref=new AtomicReference<Subscriber<? super Object>>();
    TestSubscriber<Flowable<Object>> ts=Flowable.error(new TestException("main")).window(Functions.justCallable(new Flowable<Object>(){
      @Override protected void subscribeActual(      Subscriber<? super Object> subscriber){
        subscriber.onSubscribe(new BooleanSubscription());
        ref.set(subscriber);
      }
    }
)).test();
    ts.assertValueCount(1).assertError(TestException.class).assertErrorMessage("main").assertNotComplete();
    ref.get().onError(new TestException("inner"));
    TestHelper.assertUndeliverable(errors,0,TestException.class,"inner");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
