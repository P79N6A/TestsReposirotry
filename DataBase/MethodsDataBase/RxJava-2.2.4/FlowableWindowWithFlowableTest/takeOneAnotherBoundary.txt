@Test public void takeOneAnotherBoundary(){
  final AtomicReference<Subscriber<? super Object>> refMain=new AtomicReference<Subscriber<? super Object>>();
  final AtomicReference<Subscriber<? super Object>> ref=new AtomicReference<Subscriber<? super Object>>();
  TestSubscriber<Flowable<Object>> ts=new Flowable<Object>(){
    @Override protected void subscribeActual(    Subscriber<? super Object> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      refMain.set(subscriber);
    }
  }
.window(new Flowable<Object>(){
    @Override protected void subscribeActual(    Subscriber<? super Object> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      ref.set(subscriber);
    }
  }
).test();
  ts.assertValueCount(1).assertNotTerminated().cancel();
  ref.get().onNext(1);
  ts.assertValueCount(1).assertNotTerminated();
}
