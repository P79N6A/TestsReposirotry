@Test public void supplierMainNextBoundaryNextRace(){
  for (int i=0; i < TestHelper.RACE_LONG_LOOPS; i++) {
    final AtomicReference<Subscriber<? super Object>> refMain=new AtomicReference<Subscriber<? super Object>>();
    final AtomicReference<Subscriber<? super Object>> ref=new AtomicReference<Subscriber<? super Object>>();
    TestSubscriber<Flowable<Object>> ts=new Flowable<Object>(){
      @Override protected void subscribeActual(      Subscriber<? super Object> subscriber){
        subscriber.onSubscribe(new BooleanSubscription());
        refMain.set(subscriber);
      }
    }
.window(Functions.justCallable(new Flowable<Object>(){
      @Override protected void subscribeActual(      Subscriber<? super Object> subscriber){
        subscriber.onSubscribe(new BooleanSubscription());
        ref.set(subscriber);
      }
    }
)).test();
    Runnable r1=new Runnable(){
      @Override public void run(){
        refMain.get().onNext(1);
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        ref.get().onNext(1);
      }
    }
;
    TestHelper.race(r1,r2);
    ts.assertValueCount(2).assertNotComplete().assertNoErrors();
  }
}
