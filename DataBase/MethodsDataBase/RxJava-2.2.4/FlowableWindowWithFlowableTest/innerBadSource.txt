@Test public void innerBadSource(){
  TestHelper.checkBadSourceFlowable(new Function<Flowable<Integer>,Object>(){
    @Override public Object apply(    Flowable<Integer> f) throws Exception {
      return Flowable.just(1).window(f).flatMap(new Function<Flowable<Integer>,Flowable<Integer>>(){
        @Override public Flowable<Integer> apply(        Flowable<Integer> v) throws Exception {
          return v;
        }
      }
);
    }
  }
,false,1,1,(Object[])null);
  TestHelper.checkBadSourceFlowable(new Function<Flowable<Integer>,Object>(){
    @Override public Object apply(    final Flowable<Integer> f) throws Exception {
      return Flowable.just(1).window(new Callable<Publisher<Integer>>(){
        int count;
        @Override public Publisher<Integer> call() throws Exception {
          if (++count > 1) {
            return Flowable.never();
          }
          return f;
        }
      }
).flatMap(new Function<Flowable<Integer>,Flowable<Integer>>(){
        @Override public Flowable<Integer> apply(        Flowable<Integer> v) throws Exception {
          return v;
        }
      }
);
    }
  }
,false,1,1,(Object[])null);
}
