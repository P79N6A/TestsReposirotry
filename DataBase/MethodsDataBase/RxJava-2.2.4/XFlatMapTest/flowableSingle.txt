@Test public void flowableSingle() throws Exception {
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    TestSubscriber<Integer> ts=Flowable.just(1).subscribeOn(Schedulers.io()).flatMapSingle(new Function<Integer,Single<Integer>>(){
      @Override public Single<Integer> apply(      Integer v) throws Exception {
        sleep();
        return Single.<Integer>error(new TestException());
      }
    }
).test();
    cb.await();
    beforeCancelSleep(ts);
    ts.cancel();
    Thread.sleep(SLEEP_AFTER_CANCEL);
    ts.assertEmpty();
    assertTrue(errors.toString(),errors.isEmpty());
  }
  finally {
    RxJavaPlugins.reset();
  }
}
