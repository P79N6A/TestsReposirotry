@Test public void testAggregateAsIntSumAccumulatorThrowsFlowable(){
  BiFunction<Integer,Integer,Integer> sumErr=new BiFunction<Integer,Integer,Integer>(){
    @Override public Integer apply(    Integer t1,    Integer t2){
      throw new TestException();
    }
  }
;
  Flowable<Integer> result=Flowable.just(1,2,3,4,5).reduce(0,sumErr).toFlowable().map(new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer v){
      return v;
    }
  }
);
  result.subscribe(subscriber);
  verify(subscriber,never()).onNext(any());
  verify(subscriber,never()).onComplete();
  verify(subscriber,times(1)).onError(any(TestException.class));
}
