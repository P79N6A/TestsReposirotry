@Test @Ignore("Observable doesn't do backpressure so it can't bound its input count") public void testPrefetchIsBounded(){
  final AtomicInteger count=new AtomicInteger();
  TestObserver<Object> to=TestObserver.create();
  Observable.just(1).concatMapEager(new Function<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Integer t){
      return Observable.range(1,Observable.bufferSize() * 2).doOnNext(new Consumer<Integer>(){
        @Override public void accept(        Integer t){
          count.getAndIncrement();
        }
      }
).hide();
    }
  }
).subscribe(to);
  to.assertNoErrors();
  to.assertNoValues();
  to.assertNotComplete();
  Assert.assertEquals(Observable.bufferSize(),count.get());
}
