@Test public void testReentrantWork(){
  final PublishSubject<Integer> subject=PublishSubject.create();
  final AtomicBoolean once=new AtomicBoolean();
  subject.concatMapEager(new Function<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Integer t){
      return Observable.just(t);
    }
  }
).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer t){
      if (once.compareAndSet(false,true)) {
        subject.onNext(2);
      }
    }
  }
).subscribe(to);
  subject.onNext(1);
  to.assertNoErrors();
  to.assertNotComplete();
  to.assertValues(1,2);
}
