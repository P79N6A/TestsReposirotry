@Test public void emissionRequestRace(){
  Worker w=Schedulers.computation().createWorker();
  try {
    for (int i=0; i < 10000; i++) {
      final TestSubscriber<Integer> ts=TestSubscriber.create(0L);
      TestingDeferredScalarSubscriber ds=new TestingDeferredScalarSubscriber(ts);
      ds.setupDownstream();
      ds.onNext(1);
      final AtomicInteger ready=new AtomicInteger(2);
      w.schedule(new Runnable(){
        @Override public void run(){
          ready.decrementAndGet();
          while (ready.get() != 0) {
          }
          ts.request(1);
        }
      }
);
      ready.decrementAndGet();
      while (ready.get() != 0) {
      }
      ds.onComplete();
      ts.awaitTerminalEvent(5,TimeUnit.SECONDS);
      ts.assertValues(1);
      ts.assertNoErrors();
      ts.assertComplete();
    }
  }
  finally {
    w.dispose();
  }
}
