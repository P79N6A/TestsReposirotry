@Test public void testConnectUnsubscribeRaceCondition() throws InterruptedException {
  final AtomicInteger subUnsubCount=new AtomicInteger();
  Flowable<Long> f=synchronousInterval().doOnCancel(new Action(){
    @Override public void run(){
      System.out.println("******************************* Unsubscribe received");
      subUnsubCount.decrementAndGet();
    }
  }
).doOnSubscribe(new Consumer<Subscription>(){
    @Override public void accept(    Subscription s){
      System.out.println("******************************* SUBSCRIBE received");
      subUnsubCount.incrementAndGet();
    }
  }
);
  TestSubscriber<Long> s=new TestSubscriber<Long>();
  f.publish().refCount().subscribeOn(Schedulers.computation()).subscribe(s);
  System.out.println("send unsubscribe");
  s.dispose();
  Thread.sleep(10);
  assertEquals(0,subUnsubCount.get());
  System.out.println("DONE sending unsubscribe ... now waiting");
  System.out.println("Errors: " + s.errors());
  if (s.errors().size() > 0) {
    s.errors().get(0).printStackTrace();
  }
  s.assertNoErrors();
}
