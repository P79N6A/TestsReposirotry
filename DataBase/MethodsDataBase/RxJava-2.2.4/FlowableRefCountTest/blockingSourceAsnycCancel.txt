@Test(timeout=7500) public void blockingSourceAsnycCancel() throws Exception {
  BehaviorProcessor<Integer> bp=BehaviorProcessor.createDefault(1);
  Flowable<Integer> f=bp.replay(1).refCount();
  f.subscribe();
  final AtomicBoolean interrupted=new AtomicBoolean();
  f.switchMap(new Function<Integer,Publisher<? extends Object>>(){
    @Override public Publisher<? extends Object> apply(    Integer v) throws Exception {
      return Flowable.create(new FlowableOnSubscribe<Object>(){
        @Override public void subscribe(        FlowableEmitter<Object> emitter) throws Exception {
          while (!emitter.isCancelled()) {
            Thread.sleep(100);
          }
          interrupted.set(true);
        }
      }
,BackpressureStrategy.MISSING);
    }
  }
).takeUntil(Flowable.timer(500,TimeUnit.MILLISECONDS)).test().awaitDone(5,TimeUnit.SECONDS).assertResult();
  assertTrue(interrupted.get());
}
