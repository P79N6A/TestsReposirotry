@Test public void testRefCountSynchronousTake(){
  final AtomicInteger nextCount=new AtomicInteger();
  Flowable<Integer> r=Flowable.just(1,2,3,4,5,6,7,8,9).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer l){
      System.out.println("onNext --------> " + l);
      nextCount.incrementAndGet();
    }
  }
).take(4).publish().refCount();
  final AtomicInteger receivedCount=new AtomicInteger();
  r.subscribe(new Consumer<Integer>(){
    @Override public void accept(    Integer l){
      receivedCount.incrementAndGet();
    }
  }
);
  System.out.println("onNext: " + nextCount.get());
  assertEquals(4,receivedCount.get());
  assertEquals(4,receivedCount.get());
}
