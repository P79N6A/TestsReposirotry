@Test public void testRefCountSynchronous(){
  final AtomicInteger subscribeCount=new AtomicInteger();
  final AtomicInteger nextCount=new AtomicInteger();
  Flowable<Integer> r=Flowable.just(1,2,3,4,5,6,7,8,9).doOnSubscribe(new Consumer<Subscription>(){
    @Override public void accept(    Subscription s){
      subscribeCount.incrementAndGet();
    }
  }
).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer l){
      nextCount.incrementAndGet();
    }
  }
).publish().refCount();
  final AtomicInteger receivedCount=new AtomicInteger();
  Disposable d1=r.subscribe(new Consumer<Integer>(){
    @Override public void accept(    Integer l){
      receivedCount.incrementAndGet();
    }
  }
);
  Disposable d2=r.subscribe();
  try {
    Thread.sleep(50);
  }
 catch (  InterruptedException e) {
  }
  d2.dispose();
  d1.dispose();
  System.out.println("onNext Count: " + nextCount.get());
  assertEquals(nextCount.get(),receivedCount.get() * 2);
  assertEquals(2,subscribeCount.get());
}
