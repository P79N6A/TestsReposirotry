@Test public void testRefCountAsync(){
  final AtomicInteger subscribeCount=new AtomicInteger();
  final AtomicInteger nextCount=new AtomicInteger();
  Flowable<Long> r=Flowable.interval(0,20,TimeUnit.MILLISECONDS).doOnSubscribe(new Consumer<Subscription>(){
    @Override public void accept(    Subscription s){
      subscribeCount.incrementAndGet();
    }
  }
).doOnNext(new Consumer<Long>(){
    @Override public void accept(    Long l){
      nextCount.incrementAndGet();
    }
  }
).publish().refCount();
  final AtomicInteger receivedCount=new AtomicInteger();
  Disposable d1=r.subscribe(new Consumer<Long>(){
    @Override public void accept(    Long l){
      receivedCount.incrementAndGet();
    }
  }
);
  Disposable d2=r.subscribe();
  try {
    Thread.sleep(10);
  }
 catch (  InterruptedException e) {
  }
  for (; ; ) {
    int a=nextCount.get();
    int b=receivedCount.get();
    if (a > 10 && a < 20 && a == b) {
      break;
    }
    if (a >= 20) {
      break;
    }
    try {
      Thread.sleep(20);
    }
 catch (    InterruptedException e) {
    }
  }
  d2.dispose();
  d1.dispose();
  System.out.println("onNext: " + nextCount.get());
  assertEquals(nextCount.get(),receivedCount.get());
  assertEquals(1,subscribeCount.get());
}
