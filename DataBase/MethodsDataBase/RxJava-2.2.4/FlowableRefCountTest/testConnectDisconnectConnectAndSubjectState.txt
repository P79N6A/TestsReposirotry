@Test public void testConnectDisconnectConnectAndSubjectState(){
  Flowable<Integer> f1=Flowable.just(10);
  Flowable<Integer> f2=Flowable.just(20);
  Flowable<Integer> combined=Flowable.combineLatest(f1,f2,new BiFunction<Integer,Integer,Integer>(){
    @Override public Integer apply(    Integer t1,    Integer t2){
      return t1 + t2;
    }
  }
).publish().refCount();
  TestSubscriber<Integer> ts1=new TestSubscriber<Integer>();
  TestSubscriber<Integer> ts2=new TestSubscriber<Integer>();
  combined.subscribe(ts1);
  combined.subscribe(ts2);
  ts1.assertTerminated();
  ts1.assertNoErrors();
  ts1.assertValue(30);
  ts2.assertTerminated();
  ts2.assertNoErrors();
  ts2.assertValue(30);
}
