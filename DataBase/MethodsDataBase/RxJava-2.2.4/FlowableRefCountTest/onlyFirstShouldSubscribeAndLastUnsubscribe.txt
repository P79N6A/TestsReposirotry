@Test public void onlyFirstShouldSubscribeAndLastUnsubscribe(){
  final AtomicInteger subscriptionCount=new AtomicInteger();
  final AtomicInteger unsubscriptionCount=new AtomicInteger();
  Flowable<Integer> flowable=Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> subscriber){
      subscriptionCount.incrementAndGet();
      subscriber.onSubscribe(new Subscription(){
        @Override public void request(        long n){
        }
        @Override public void cancel(){
          unsubscriptionCount.incrementAndGet();
        }
      }
);
    }
  }
);
  Flowable<Integer> refCounted=flowable.publish().refCount();
  Disposable first=refCounted.subscribe();
  assertEquals(1,subscriptionCount.get());
  Disposable second=refCounted.subscribe();
  assertEquals(1,subscriptionCount.get());
  first.dispose();
  assertEquals(0,unsubscriptionCount.get());
  second.dispose();
  assertEquals(1,unsubscriptionCount.get());
}
