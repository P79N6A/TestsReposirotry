@Test public void testConnectUnsubscribe() throws InterruptedException {
  final CountDownLatch unsubscribeLatch=new CountDownLatch(1);
  final CountDownLatch subscribeLatch=new CountDownLatch(1);
  Flowable<Long> f=synchronousInterval().doOnSubscribe(new Consumer<Subscription>(){
    @Override public void accept(    Subscription s){
      System.out.println("******************************* Subscribe received");
      subscribeLatch.countDown();
    }
  }
).doOnCancel(new Action(){
    @Override public void run(){
      System.out.println("******************************* Unsubscribe received");
      unsubscribeLatch.countDown();
    }
  }
);
  TestSubscriber<Long> s=new TestSubscriber<Long>();
  f.publish().refCount().subscribeOn(Schedulers.newThread()).subscribe(s);
  System.out.println("send unsubscribe");
  subscribeLatch.await();
  s.dispose();
  System.out.println("DONE sending unsubscribe ... now waiting");
  if (!unsubscribeLatch.await(3000,TimeUnit.MILLISECONDS)) {
    System.out.println("Errors: " + s.errors());
    if (s.errors().size() > 0) {
      s.errors().get(0).printStackTrace();
    }
    fail("timed out waiting for unsubscribe");
  }
  s.assertNoErrors();
}
