@Test public void emissionQueueTrigger(){
  final PublishProcessor<Integer> pp1=PublishProcessor.create();
  final PublishProcessor<Integer> pp2=PublishProcessor.create();
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>(){
    @Override public void onNext(    Integer t){
      super.onNext(t);
      if (t == 1) {
        pp2.onNext(2);
        pp2.onComplete();
      }
    }
  }
;
  Flowable.just(pp1,pp2).flatMapMaybe(new Function<PublishProcessor<Integer>,MaybeSource<Integer>>(){
    @Override public MaybeSource<Integer> apply(    PublishProcessor<Integer> v) throws Exception {
      return v.singleElement();
    }
  }
).subscribe(ts);
  pp1.onNext(1);
  pp1.onComplete();
  ts.assertResult(1,2);
}
