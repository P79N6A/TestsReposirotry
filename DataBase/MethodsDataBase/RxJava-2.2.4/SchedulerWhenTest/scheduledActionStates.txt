@Test public void scheduledActionStates(){
  final AtomicInteger count=new AtomicInteger();
  ScheduledAction sa=new ScheduledAction(){
    private static final long serialVersionUID=-672980251643733156L;
    @Override protected Disposable callActual(    Worker actualWorker,    CompletableObserver actionCompletable){
      count.incrementAndGet();
      return Disposables.empty();
    }
  }
;
  assertFalse(sa.isDisposed());
  sa.dispose();
  assertTrue(sa.isDisposed());
  sa.dispose();
  assertTrue(sa.isDisposed());
  sa.call(Schedulers.single().createWorker(),null);
  assertEquals(0,count.get());
  sa.set(Disposables.empty());
  sa.call(Schedulers.single().createWorker(),null);
  assertEquals(0,count.get());
  sa=new ScheduledAction(){
    private static final long serialVersionUID=-672980251643733156L;
    @Override protected Disposable callActual(    Worker actualWorker,    CompletableObserver actionCompletable){
      count.incrementAndGet();
      dispose();
      return Disposables.empty();
    }
  }
;
  sa.call(Schedulers.single().createWorker(),null);
  assertEquals(1,count.get());
}
