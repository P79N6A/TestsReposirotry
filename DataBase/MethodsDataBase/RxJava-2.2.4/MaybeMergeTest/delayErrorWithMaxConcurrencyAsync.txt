@Test public void delayErrorWithMaxConcurrencyAsync(){
  final AtomicInteger count=new AtomicInteger();
  @SuppressWarnings("unchecked") Maybe<Integer>[] sources=new Maybe[3];
  for (int i=0; i < 3; i++) {
    final int j=i + 1;
    sources[i]=Maybe.fromCallable(new Callable<Integer>(){
      @Override public Integer call() throws Exception {
        return count.incrementAndGet() - j;
      }
    }
).subscribeOn(Schedulers.io());
  }
  for (int i=0; i < 1000; i++) {
    count.set(0);
    Maybe.mergeDelayError(Flowable.fromArray(sources),1).test().awaitDone(5,TimeUnit.SECONDS).assertResult(0,0,0);
  }
}
