@Test public void testSwitchIssue737(){
  Flowable<Flowable<String>> source=Flowable.unsafeCreate(new Publisher<Flowable<String>>(){
    @Override public void subscribe(    Subscriber<? super Flowable<String>> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      publishNext(subscriber,0,Flowable.unsafeCreate(new Publisher<String>(){
        @Override public void subscribe(        Subscriber<? super String> subscriber){
          subscriber.onSubscribe(new BooleanSubscription());
          publishNext(subscriber,10,"1-one");
          publishNext(subscriber,20,"1-two");
          publishNext(subscriber,30,"1-three");
          publishCompleted(subscriber,40);
        }
      }
));
      publishNext(subscriber,25,Flowable.unsafeCreate(new Publisher<String>(){
        @Override public void subscribe(        Subscriber<? super String> subscriber){
          subscriber.onSubscribe(new BooleanSubscription());
          publishNext(subscriber,10,"2-one");
          publishNext(subscriber,20,"2-two");
          publishNext(subscriber,30,"2-three");
          publishCompleted(subscriber,40);
        }
      }
));
      publishCompleted(subscriber,30);
    }
  }
);
  Flowable<String> sampled=Flowable.switchOnNext(source);
  sampled.subscribe(subscriber);
  scheduler.advanceTimeTo(1000,TimeUnit.MILLISECONDS);
  InOrder inOrder=inOrder(subscriber);
  inOrder.verify(subscriber,times(1)).onNext("1-one");
  inOrder.verify(subscriber,times(1)).onNext("1-two");
  inOrder.verify(subscriber,times(1)).onNext("2-one");
  inOrder.verify(subscriber,times(1)).onNext("2-two");
  inOrder.verify(subscriber,times(1)).onNext("2-three");
  inOrder.verify(subscriber,times(1)).onComplete();
  inOrder.verifyNoMoreInteractions();
}
