@Test public void testSwitchWithSubsequenceError(){
  Flowable<Flowable<String>> source=Flowable.unsafeCreate(new Publisher<Flowable<String>>(){
    @Override public void subscribe(    Subscriber<? super Flowable<String>> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      publishNext(subscriber,50,Flowable.unsafeCreate(new Publisher<String>(){
        @Override public void subscribe(        Subscriber<? super String> subscriber){
          subscriber.onSubscribe(new BooleanSubscription());
          publishNext(subscriber,50,"one");
          publishNext(subscriber,100,"two");
        }
      }
));
      publishNext(subscriber,130,Flowable.unsafeCreate(new Publisher<String>(){
        @Override public void subscribe(        Subscriber<? super String> subscriber){
          subscriber.onSubscribe(new BooleanSubscription());
          publishError(subscriber,0,new TestException());
        }
      }
));
      publishNext(subscriber,150,Flowable.unsafeCreate(new Publisher<String>(){
        @Override public void subscribe(        Subscriber<? super String> subscriber){
          subscriber.onSubscribe(new BooleanSubscription());
          publishNext(subscriber,50,"three");
        }
      }
));
    }
  }
);
  Flowable<String> sampled=Flowable.switchOnNext(source);
  sampled.subscribe(subscriber);
  InOrder inOrder=inOrder(subscriber);
  scheduler.advanceTimeTo(90,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,never()).onNext(anyString());
  verify(subscriber,never()).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(125,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,times(1)).onNext("one");
  verify(subscriber,never()).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
  scheduler.advanceTimeTo(250,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,never()).onNext("three");
  verify(subscriber,never()).onComplete();
  verify(subscriber,times(1)).onError(any(TestException.class));
}
