/** 
 * The upstream producer hijacked the switch producer stopping the requests aimed at the inner observables. 
 */
@Test public void testIssue2654(){
  Flowable<String> oneItem=Flowable.just("Hello").mergeWith(Flowable.<String>never());
  Flowable<String> src=oneItem.switchMap(new Function<String,Flowable<String>>(){
    @Override public Flowable<String> apply(    final String s){
      return Flowable.just(s).mergeWith(Flowable.interval(10,TimeUnit.MILLISECONDS).map(new Function<Long,String>(){
        @Override public String apply(        Long i){
          return s + " " + i;
        }
      }
)).take(250);
    }
  }
).share();
  TestSubscriber<String> ts=new TestSubscriber<String>(){
    @Override public void onNext(    String t){
      super.onNext(t);
      if (valueCount() == 250) {
        onComplete();
        dispose();
      }
    }
  }
;
  src.subscribe(ts);
  ts.awaitTerminalEvent(10,TimeUnit.SECONDS);
  System.out.println("> testIssue2654: " + ts.valueCount());
  ts.assertTerminated();
  ts.assertNoErrors();
  Assert.assertEquals(250,ts.valueCount());
}
