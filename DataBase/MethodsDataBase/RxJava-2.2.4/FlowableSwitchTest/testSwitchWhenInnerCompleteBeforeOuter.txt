@Test public void testSwitchWhenInnerCompleteBeforeOuter(){
  Flowable<Flowable<String>> source=Flowable.unsafeCreate(new Publisher<Flowable<String>>(){
    @Override public void subscribe(    Subscriber<? super Flowable<String>> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      publishNext(subscriber,10,Flowable.unsafeCreate(new Publisher<String>(){
        @Override public void subscribe(        Subscriber<? super String> subscriber){
          subscriber.onSubscribe(new BooleanSubscription());
          publishNext(subscriber,0,"one");
          publishNext(subscriber,10,"two");
          publishCompleted(subscriber,20);
        }
      }
));
      publishNext(subscriber,100,Flowable.unsafeCreate(new Publisher<String>(){
        @Override public void subscribe(        Subscriber<? super String> subscriber){
          subscriber.onSubscribe(new BooleanSubscription());
          publishNext(subscriber,0,"three");
          publishNext(subscriber,10,"four");
          publishCompleted(subscriber,20);
        }
      }
));
      publishCompleted(subscriber,200);
    }
  }
);
  Flowable<String> sampled=Flowable.switchOnNext(source);
  sampled.subscribe(subscriber);
  InOrder inOrder=inOrder(subscriber);
  scheduler.advanceTimeTo(150,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,never()).onComplete();
  inOrder.verify(subscriber,times(1)).onNext("one");
  inOrder.verify(subscriber,times(1)).onNext("two");
  inOrder.verify(subscriber,times(1)).onNext("three");
  inOrder.verify(subscriber,times(1)).onNext("four");
  scheduler.advanceTimeTo(250,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,never()).onNext(anyString());
  inOrder.verify(subscriber,times(1)).onComplete();
}
