@Test public void outerInnerErrorRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final PublishProcessor<Integer> pp1=PublishProcessor.create();
      final PublishProcessor<Integer> pp2=PublishProcessor.create();
      pp1.switchMap(new Function<Integer,Flowable<Integer>>(){
        @Override public Flowable<Integer> apply(        Integer v) throws Exception {
          if (v == 1) {
            return pp2;
          }
          return Flowable.never();
        }
      }
).test();
      final TestException ex1=new TestException();
      Runnable r1=new Runnable(){
        @Override public void run(){
          pp1.onError(ex1);
        }
      }
;
      final TestException ex2=new TestException();
      Runnable r2=new Runnable(){
        @Override public void run(){
          pp2.onError(ex2);
        }
      }
;
      TestHelper.race(r1,r2);
      for (      Throwable e : errors) {
        assertTrue(e.toString(),e instanceof TestException);
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
