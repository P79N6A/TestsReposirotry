@Test public void testBackpressure(){
  PublishProcessor<String> o1=PublishProcessor.create();
  PublishProcessor<String> o2=PublishProcessor.create();
  PublishProcessor<String> o3=PublishProcessor.create();
  PublishProcessor<PublishProcessor<String>> o=PublishProcessor.create();
  publishNext(o,0,o1);
  publishNext(o,5,o2);
  publishNext(o,10,o3);
  publishCompleted(o,15);
  for (int i=0; i < 10; i++) {
    publishNext(o1,i * 5,"a" + (i + 1));
    publishNext(o2,5 + i * 5,"b" + (i + 1));
    publishNext(o3,10 + i * 5,"c" + (i + 1));
  }
  publishCompleted(o1,45);
  publishCompleted(o2,50);
  publishCompleted(o3,55);
  final TestSubscriber<String> testSubscriber=new TestSubscriber<String>();
  Flowable.switchOnNext(o).subscribe(new DefaultSubscriber<String>(){
    private int requested;
    @Override public void onStart(){
      requested=3;
      request(3);
      testSubscriber.onSubscribe(new BooleanSubscription());
    }
    @Override public void onComplete(){
      testSubscriber.onComplete();
    }
    @Override public void onError(    Throwable e){
      testSubscriber.onError(e);
    }
    @Override public void onNext(    String s){
      testSubscriber.onNext(s);
      requested--;
      if (requested == 0) {
        requested=3;
        request(3);
      }
    }
  }
);
  scheduler.advanceTimeBy(1,TimeUnit.SECONDS);
  testSubscriber.assertValues("a1","b1","c1","c2","c3","c4","c5","c6","c7","c8","c9","c10");
  testSubscriber.assertNoErrors();
  testSubscriber.assertTerminated();
}
