@Test public void testBackpressureOuter(){
  Flowable<Flowable<Integer>> source=Flowable.range(1,10).window(3);
  final List<Integer> list=new ArrayList<Integer>();
  final Subscriber<Integer> subscriber=TestHelper.mockSubscriber();
  source.subscribe(new DefaultSubscriber<Flowable<Integer>>(){
    @Override public void onStart(){
      request(1);
    }
    @Override public void onNext(    Flowable<Integer> t){
      t.subscribe(new DefaultSubscriber<Integer>(){
        @Override public void onNext(        Integer t){
          list.add(t);
        }
        @Override public void onError(        Throwable e){
          subscriber.onError(e);
        }
        @Override public void onComplete(){
          subscriber.onComplete();
        }
      }
);
    }
    @Override public void onError(    Throwable e){
      subscriber.onError(e);
    }
    @Override public void onComplete(){
      subscriber.onComplete();
    }
  }
);
  assertEquals(Arrays.asList(1,2,3),list);
  verify(subscriber,never()).onError(any(Throwable.class));
  verify(subscriber,times(1)).onComplete();
}
