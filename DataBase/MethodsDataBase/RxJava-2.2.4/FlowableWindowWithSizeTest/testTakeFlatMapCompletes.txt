@Test public void testTakeFlatMapCompletes(){
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  final int indicator=999999999;
  hotStream().window(10).take(2).flatMap(new Function<Flowable<Integer>,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Flowable<Integer> w){
      return w.startWith(indicator);
    }
  }
).subscribe(ts);
  ts.awaitTerminalEvent(2,TimeUnit.SECONDS);
  ts.assertComplete();
  ts.assertValueCount(22);
}
