@Test public void disposeInOnNext(){
  final TestObserver<Integer> to=new TestObserver<Integer>();
  BehaviorSubject.createDefault(1).debounce(new Function<Integer,ObservableSource<Object>>(){
    @Override public ObservableSource<Object> apply(    Integer o) throws Exception {
      to.cancel();
      return Observable.never();
    }
  }
).subscribeWith(to).assertEmpty();
  assertTrue(to.isDisposed());
}
