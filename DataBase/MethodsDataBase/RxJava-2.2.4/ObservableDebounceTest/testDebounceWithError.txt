@Test public void testDebounceWithError(){
  Observable<String> source=Observable.unsafeCreate(new ObservableSource<String>(){
    @Override public void subscribe(    Observer<? super String> observer){
      observer.onSubscribe(Disposables.empty());
      Exception error=new TestException();
      publishNext(observer,100,"one");
      publishNext(observer,600,"two");
      publishError(observer,700,error);
    }
  }
);
  Observable<String> sampled=source.debounce(400,TimeUnit.MILLISECONDS,scheduler);
  sampled.subscribe(observer);
  scheduler.advanceTimeTo(0,TimeUnit.MILLISECONDS);
  InOrder inOrder=inOrder(observer);
  scheduler.advanceTimeTo(500,TimeUnit.MILLISECONDS);
  inOrder.verify(observer).onNext("one");
  scheduler.advanceTimeTo(701,TimeUnit.MILLISECONDS);
  inOrder.verify(observer).onError(any(TestException.class));
  inOrder.verifyNoMoreInteractions();
}
