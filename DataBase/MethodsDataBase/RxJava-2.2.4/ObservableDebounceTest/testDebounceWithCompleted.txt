@Test public void testDebounceWithCompleted(){
  Observable<String> source=Observable.unsafeCreate(new ObservableSource<String>(){
    @Override public void subscribe(    Observer<? super String> observer){
      observer.onSubscribe(Disposables.empty());
      publishNext(observer,100,"one");
      publishNext(observer,400,"two");
      publishNext(observer,900,"three");
      publishCompleted(observer,1000);
    }
  }
);
  Observable<String> sampled=source.debounce(400,TimeUnit.MILLISECONDS,scheduler);
  sampled.subscribe(observer);
  scheduler.advanceTimeTo(0,TimeUnit.MILLISECONDS);
  InOrder inOrder=inOrder(observer);
  scheduler.advanceTimeTo(800,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,times(1)).onNext("two");
  scheduler.advanceTimeTo(1000,TimeUnit.MILLISECONDS);
  inOrder.verify(observer,times(1)).onComplete();
  inOrder.verifyNoMoreInteractions();
}
