@Test public void emitLate(){
  final AtomicReference<Observer<? super Integer>> ref=new AtomicReference<Observer<? super Integer>>();
  TestObserver<Integer> to=Observable.range(1,2).debounce(new Function<Integer,ObservableSource<Integer>>(){
    @Override public ObservableSource<Integer> apply(    Integer o) throws Exception {
      if (o != 1) {
        return Observable.never();
      }
      return new Observable<Integer>(){
        @Override protected void subscribeActual(        Observer<? super Integer> observer){
          observer.onSubscribe(Disposables.empty());
          ref.set(observer);
        }
      }
;
    }
  }
).test();
  ref.get().onNext(1);
  to.assertResult(2);
}
