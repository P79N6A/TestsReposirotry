@Test public void testResumeNext(){
  Subscription s=mock(Subscription.class);
  TestObservable f=new TestObservable(s,"one","fail","two","three");
  Flowable<String> w=Flowable.unsafeCreate(f);
  Flowable<String> resume=Flowable.just("twoResume","threeResume");
  Flowable<String> flowable=w.onErrorResumeNext(resume);
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  flowable.subscribe(subscriber);
  try {
    f.t.join();
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
  verify(subscriber,Mockito.never()).onError(any(Throwable.class));
  verify(subscriber,times(1)).onComplete();
  verify(subscriber,times(1)).onNext("one");
  verify(subscriber,Mockito.never()).onNext("two");
  verify(subscriber,Mockito.never()).onNext("three");
  verify(subscriber,times(1)).onNext("twoResume");
  verify(subscriber,times(1)).onNext("threeResume");
}
