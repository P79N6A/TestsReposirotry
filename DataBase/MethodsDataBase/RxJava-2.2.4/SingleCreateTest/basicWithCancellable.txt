@Test public void basicWithCancellable(){
  final Disposable d1=Disposables.empty();
  final Disposable d2=Disposables.empty();
  Single.<Integer>create(new SingleOnSubscribe<Integer>(){
    @Override public void subscribe(    SingleEmitter<Integer> e) throws Exception {
      e.setDisposable(d1);
      e.setCancellable(new Cancellable(){
        @Override public void cancel() throws Exception {
          d2.dispose();
        }
      }
);
      e.onSuccess(1);
      e.onError(new TestException());
      e.onSuccess(2);
      e.onError(new TestException());
    }
  }
).test().assertResult(1);
  assertTrue(d1.isDisposed());
  assertTrue(d2.isDisposed());
}
