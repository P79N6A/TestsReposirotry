@Test public void disposeInner(){
  final TestObserver<Object> to=new TestObserver<Object>();
  Observable.just(1).flatMapSingle(new Function<Integer,SingleSource<Object>>(){
    @Override public SingleSource<Object> apply(    Integer v) throws Exception {
      return new Single<Object>(){
        @Override protected void subscribeActual(        SingleObserver<? super Object> observer){
          observer.onSubscribe(Disposables.empty());
          assertFalse(((Disposable)observer).isDisposed());
          to.dispose();
          assertTrue(((Disposable)observer).isDisposed());
        }
      }
;
    }
  }
).subscribe(to);
  to.assertEmpty();
}
