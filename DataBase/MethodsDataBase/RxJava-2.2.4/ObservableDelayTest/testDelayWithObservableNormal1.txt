@Test public void testDelayWithObservableNormal1(){
  PublishSubject<Integer> source=PublishSubject.create();
  final List<PublishSubject<Integer>> delays=new ArrayList<PublishSubject<Integer>>();
  final int n=10;
  for (int i=0; i < n; i++) {
    PublishSubject<Integer> delay=PublishSubject.create();
    delays.add(delay);
  }
  Function<Integer,Observable<Integer>> delayFunc=new Function<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Integer t1){
      return delays.get(t1);
    }
  }
;
  Observer<Object> o=TestHelper.mockObserver();
  InOrder inOrder=inOrder(o);
  source.delay(delayFunc).subscribe(o);
  for (int i=0; i < n; i++) {
    source.onNext(i);
    delays.get(i).onNext(i);
    inOrder.verify(o).onNext(i);
  }
  source.onComplete();
  inOrder.verify(o).onComplete();
  inOrder.verifyNoMoreInteractions();
  verify(o,never()).onError(any(Throwable.class));
}
