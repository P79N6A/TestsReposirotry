@Test public void testDelayWithObservableSingleSend1(){
  PublishSubject<Integer> source=PublishSubject.create();
  final PublishSubject<Integer> delay=PublishSubject.create();
  Function<Integer,Observable<Integer>> delayFunc=new Function<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Integer t1){
      return delay;
    }
  }
;
  Observer<Object> o=TestHelper.mockObserver();
  InOrder inOrder=inOrder(o);
  source.delay(delayFunc).subscribe(o);
  source.onNext(1);
  delay.onNext(1);
  delay.onNext(2);
  inOrder.verify(o).onNext(1);
  inOrder.verifyNoMoreInteractions();
  verify(o,never()).onError(any(Throwable.class));
}
