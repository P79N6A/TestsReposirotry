@Test public void testBackpressureWithSelectorDelay(){
  TestObserver<Integer> to=new TestObserver<Integer>();
  Observable.range(1,Flowable.bufferSize() * 2).delay(new Function<Integer,Observable<Long>>(){
    @Override public Observable<Long> apply(    Integer i){
      return Observable.timer(100,TimeUnit.MILLISECONDS);
    }
  }
).observeOn(Schedulers.computation()).map(new Function<Integer,Integer>(){
    int c;
    @Override public Integer apply(    Integer t){
      if (c++ <= 0) {
        try {
          Thread.sleep(500);
        }
 catch (        InterruptedException e) {
        }
      }
      return t;
    }
  }
).subscribe(to);
  to.awaitTerminalEvent();
  to.assertNoErrors();
  assertEquals(Flowable.bufferSize() * 2,to.valueCount());
}
