@Test public void manyErrors(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    new Observable<Integer>(){
      @Override protected void subscribeActual(      Observer<? super Integer> observer){
        observer.onSubscribe(Disposables.empty());
        observer.onError(new TestException("First"));
        observer.onNext(1);
        observer.onError(new TestException("Second"));
        observer.onComplete();
      }
    }
.withLatestFrom(Observable.just(2),Observable.just(3),new Function3<Integer,Integer,Integer,Object>(){
      @Override public Object apply(      Integer a,      Integer b,      Integer c) throws Exception {
        return a;
      }
    }
).test().assertFailureAndMessage(TestException.class,"First");
    TestHelper.assertUndeliverable(errors,0,TestException.class,"Second");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
