@Test public void testTakeFilterSkipChainAsync(){
  int num=(int)(Flowable.bufferSize() * 2.1);
  AtomicInteger c=new AtomicInteger();
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  incrementingIntegers(c).observeOn(Schedulers.computation()).skip(10000).filter(new Predicate<Integer>(){
    @Override public boolean test(    Integer i){
      return i > 11000;
    }
  }
).take(num).subscribe(ts);
  ts.awaitTerminalEvent();
  ts.assertNoErrors();
  int expected=10000 + 1000 + Flowable.bufferSize() * 3 + Flowable.bufferSize() / 2;
  System.out.println("testTakeFilterSkipChain => Received: " + ts.valueCount() + "  Emitted: "+ c.get()+ " Expected: "+ expected);
  assertEquals(num,ts.valueCount());
  assertTrue(c.get() < expected);
}
