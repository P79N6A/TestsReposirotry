@Test(timeout=2000) public void testFirehoseFailsAsExpected(){
  AtomicInteger c=new AtomicInteger();
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  firehose(c).observeOn(Schedulers.computation()).map(new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer v){
      try {
        Thread.sleep(10);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      return v;
    }
  }
).subscribe(ts);
  ts.awaitTerminalEvent();
  System.out.println("testFirehoseFailsAsExpected => Received: " + ts.valueCount() + "  Emitted: "+ c.get());
  int vc=ts.valueCount();
  assertTrue("10 < " + vc,vc <= 10);
  ts.assertError(MissingBackpressureException.class);
}
