@Test(timeout=10000) public void testOnBackpressureDrop(){
  long t=System.currentTimeMillis();
  for (int i=0; i < 100; i++) {
    if (System.currentTimeMillis() - t > TimeUnit.SECONDS.toMillis(9)) {
      break;
    }
    int num=(int)(Flowable.bufferSize() * 1.1);
    AtomicInteger c=new AtomicInteger();
    TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    firehose(c).onBackpressureDrop().observeOn(Schedulers.computation()).map(SLOW_PASS_THRU).take(num).subscribe(ts);
    ts.awaitTerminalEvent();
    ts.assertNoErrors();
    List<Integer> onNextEvents=ts.values();
    assertEquals(num,onNextEvents.size());
    Integer lastEvent=onNextEvents.get(num - 1);
    System.out.println("testOnBackpressureDrop => Received: " + onNextEvents.size() + "  Emitted: "+ c.get()+ " Last value: "+ lastEvent);
    assertTrue(num - 1 <= lastEvent.intValue());
  }
}
