@Test public void testObserveOnWithSlowConsumer(){
  int num=(int)(Flowable.bufferSize() * 0.2);
  AtomicInteger c=new AtomicInteger();
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  incrementingIntegers(c).observeOn(Schedulers.computation()).map(new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer i){
      try {
        Thread.sleep(1);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      return i;
    }
  }
).take(num).subscribe(ts);
  ts.awaitTerminalEvent();
  ts.assertNoErrors();
  System.out.println("testObserveOnWithSlowConsumer => Received: " + ts.valueCount() + "  Emitted: "+ c.get());
  assertEquals(num,ts.valueCount());
  assertTrue(c.get() < Flowable.bufferSize() * 2);
}
