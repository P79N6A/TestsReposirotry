@Test(timeout=2000) public void testOnBackpressureBuffer(){
  int num=(int)(Flowable.bufferSize() * 1.1);
  AtomicInteger c=new AtomicInteger();
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  firehose(c).takeWhile(new Predicate<Integer>(){
    @Override public boolean test(    Integer t1){
      return t1 < 100000;
    }
  }
).onBackpressureBuffer().observeOn(Schedulers.computation()).map(SLOW_PASS_THRU).take(num).subscribe(ts);
  ts.awaitTerminalEvent();
  ts.assertNoErrors();
  System.out.println("testOnBackpressureBuffer => Received: " + ts.valueCount() + "  Emitted: "+ c.get());
  assertEquals(num,ts.valueCount());
  assertEquals(num - 1,ts.values().get(num - 1).intValue());
}
