@Test public void testMergeAsyncThenObserveOnLoop(){
  for (int i=0; i < 500; i++) {
    if (i % 10 == 0) {
      System.out.println("testMergeAsyncThenObserveOnLoop >> " + i);
    }
    int num=(int)(Flowable.bufferSize() * 4.1);
    AtomicInteger c1=new AtomicInteger();
    AtomicInteger c2=new AtomicInteger();
    TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    Flowable<Integer> merged=Flowable.merge(incrementingIntegers(c1).subscribeOn(Schedulers.computation()),incrementingIntegers(c2).subscribeOn(Schedulers.computation()));
    merged.observeOn(Schedulers.io()).take(num).subscribe(ts);
    ts.awaitTerminalEvent(5,TimeUnit.SECONDS);
    ts.assertComplete();
    ts.assertNoErrors();
    System.out.println("testMergeAsyncThenObserveOn => Received: " + ts.valueCount() + "  Emitted: "+ c1.get()+ " / "+ c2.get());
    assertEquals(num,ts.valueCount());
  }
}
