@Test public void testZipAsync(){
  int num=(int)(Flowable.bufferSize() * 2.1);
  AtomicInteger c1=new AtomicInteger();
  AtomicInteger c2=new AtomicInteger();
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  Flowable<Integer> zipped=Flowable.zip(incrementingIntegers(c1).subscribeOn(Schedulers.computation()),incrementingIntegers(c2).subscribeOn(Schedulers.computation()),new BiFunction<Integer,Integer,Integer>(){
    @Override public Integer apply(    Integer t1,    Integer t2){
      return t1 + t2;
    }
  }
);
  zipped.take(num).subscribe(ts);
  ts.awaitTerminalEvent();
  ts.assertNoErrors();
  System.out.println("testZipAsync => Received: " + ts.valueCount() + "  Emitted: "+ c1.get()+ " / "+ c2.get());
  assertEquals(num,ts.valueCount());
  int max=Flowable.bufferSize() * 5;
  assertTrue("" + c1.get() + " >= "+ max,c1.get() < max);
  assertTrue("" + c2.get() + " >= "+ max,c2.get() < max);
}
