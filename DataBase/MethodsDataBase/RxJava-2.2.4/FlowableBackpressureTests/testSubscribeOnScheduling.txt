@Test public void testSubscribeOnScheduling(){
  for (int i=0; i < 100; i++) {
    int num=(int)(Flowable.bufferSize() * 2.1);
    AtomicInteger c=new AtomicInteger();
    ConcurrentLinkedQueue<Thread> threads=new ConcurrentLinkedQueue<Thread>();
    TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    incrementingIntegers(c,threads).subscribeOn(Schedulers.computation()).observeOn(Schedulers.computation()).take(num).subscribe(ts);
    ts.awaitTerminalEvent();
    ts.assertNoErrors();
    System.out.println("testSubscribeOnScheduling => Received: " + ts.valueCount() + "  Emitted: "+ c.get());
    assertEquals(num,ts.valueCount());
    assertTrue(c.get() < Flowable.bufferSize() * 4);
    Thread first=null;
    for (    Thread t : threads) {
      System.out.println("testSubscribeOnScheduling => thread: " + t);
      if (first == null) {
        first=t;
      }
 else {
        if (!first.equals(t)) {
          fail("Expected to see the same thread");
        }
      }
    }
    System.out.println("testSubscribeOnScheduling => Number of batch requests seen: " + threads.size());
    assertTrue(threads.size() > 1);
    System.out.println("-------------------------------------------------------------------------------------------");
  }
}
