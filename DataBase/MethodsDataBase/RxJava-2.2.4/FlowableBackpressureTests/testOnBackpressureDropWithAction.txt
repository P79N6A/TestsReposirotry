@Test(timeout=20000) public void testOnBackpressureDropWithAction(){
  for (int i=0; i < 100; i++) {
    final AtomicInteger emitCount=new AtomicInteger();
    final AtomicInteger dropCount=new AtomicInteger();
    final AtomicInteger passCount=new AtomicInteger();
    final int num=Flowable.bufferSize() * 3;
    TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    firehose(emitCount).onBackpressureDrop(new Consumer<Integer>(){
      @Override public void accept(      Integer v){
        dropCount.incrementAndGet();
      }
    }
).doOnNext(new Consumer<Integer>(){
      @Override public void accept(      Integer v){
        passCount.incrementAndGet();
      }
    }
).observeOn(Schedulers.computation()).map(SLOW_PASS_THRU).take(num).subscribe(ts);
    ts.awaitTerminalEvent();
    ts.assertNoErrors();
    List<Integer> onNextEvents=ts.values();
    Integer lastEvent=onNextEvents.get(num - 1);
    System.out.println(testName.getMethodName() + " => Received: " + onNextEvents.size()+ " Passed: "+ passCount.get()+ " Dropped: "+ dropCount.get()+ "  Emitted: "+ emitCount.get()+ " Last value: "+ lastEvent);
    assertEquals(num,onNextEvents.size());
    assertTrue(num <= passCount.get());
    assertTrue(num - 1 <= lastEvent.intValue());
    assertTrue(0 < dropCount.get());
    assertEquals(emitCount.get(),passCount.get() + dropCount.get());
  }
}
