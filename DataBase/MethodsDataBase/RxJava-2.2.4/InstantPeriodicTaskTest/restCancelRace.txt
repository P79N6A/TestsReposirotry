@Test public void restCancelRace() throws Exception {
  ExecutorService exec=Executors.newSingleThreadExecutor();
  try {
    for (int i=0; i < TestHelper.RACE_LONG_LOOPS; i++) {
      final InstantPeriodicTask task=new InstantPeriodicTask(new Runnable(){
        @Override public void run(){
          throw new TestException();
        }
      }
,exec);
      final FutureTask<Void> f1=new FutureTask<Void>(Functions.EMPTY_RUNNABLE,null);
      Runnable r1=new Runnable(){
        @Override public void run(){
          task.setRest(f1);
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          task.dispose();
        }
      }
;
      TestHelper.race(r1,r2);
      assertTrue(f1.isCancelled());
      assertTrue(task.isDisposed());
    }
  }
  finally {
    exec.shutdownNow();
    RxJavaPlugins.reset();
  }
}
