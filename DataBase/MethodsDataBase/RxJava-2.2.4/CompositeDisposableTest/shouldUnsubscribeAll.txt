@Test(timeout=1000) public void shouldUnsubscribeAll() throws InterruptedException {
  final AtomicInteger counter=new AtomicInteger();
  final CompositeDisposable cd=new CompositeDisposable();
  final int count=10;
  final CountDownLatch start=new CountDownLatch(1);
  for (int i=0; i < count; i++) {
    cd.add(Disposables.fromRunnable(new Runnable(){
      @Override public void run(){
        counter.incrementAndGet();
      }
    }
));
  }
  final List<Thread> threads=new ArrayList<Thread>();
  for (int i=0; i < count; i++) {
    final Thread t=new Thread(){
      @Override public void run(){
        try {
          start.await();
          cd.dispose();
        }
 catch (        final InterruptedException e) {
          fail(e.getMessage());
        }
      }
    }
;
    t.start();
    threads.add(t);
  }
  start.countDown();
  for (  final Thread t : threads) {
    t.join();
  }
  assertEquals(count,counter.get());
}
