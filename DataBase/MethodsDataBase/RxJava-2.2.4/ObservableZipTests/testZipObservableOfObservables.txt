@Test public void testZipObservableOfObservables() throws Exception {
  ObservableEventStream.getEventStream("HTTP-ClusterB",20).groupBy(new Function<Event,String>(){
    @Override public String apply(    Event e){
      return e.instanceId;
    }
  }
).flatMap(new Function<GroupedObservable<String,Event>,Observable<HashMap<String,String>>>(){
    @Override public Observable<HashMap<String,String>> apply(    final GroupedObservable<String,Event> ge){
      return ge.scan(new HashMap<String,String>(),new BiFunction<HashMap<String,String>,Event,HashMap<String,String>>(){
        @Override public HashMap<String,String> apply(        HashMap<String,String> accum,        Event perInstanceEvent){
synchronized (accum) {
            accum.put("instance",ge.getKey());
          }
          return accum;
        }
      }
);
    }
  }
).take(10).blockingForEach(new Consumer<Object>(){
    @Override public void accept(    Object pv){
synchronized (pv) {
        System.out.println(pv);
      }
    }
  }
);
  System.out.println("**** finished");
  Thread.sleep(200);
}
