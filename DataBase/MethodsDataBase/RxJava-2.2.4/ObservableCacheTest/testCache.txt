@Test public void testCache() throws InterruptedException {
  final AtomicInteger counter=new AtomicInteger();
  Observable<String> o=Observable.unsafeCreate(new ObservableSource<String>(){
    @Override public void subscribe(    final Observer<? super String> observer){
      observer.onSubscribe(Disposables.empty());
      new Thread(new Runnable(){
        @Override public void run(){
          counter.incrementAndGet();
          System.out.println("published Observable being executed");
          observer.onNext("one");
          observer.onComplete();
        }
      }
).start();
    }
  }
).cache();
  final CountDownLatch latch=new CountDownLatch(2);
  o.subscribe(new Consumer<String>(){
    @Override public void accept(    String v){
      assertEquals("one",v);
      System.out.println("v: " + v);
      latch.countDown();
    }
  }
);
  o.subscribe(new Consumer<String>(){
    @Override public void accept(    String v){
      assertEquals("one",v);
      System.out.println("v: " + v);
      latch.countDown();
    }
  }
);
  if (!latch.await(1000,TimeUnit.MILLISECONDS)) {
    fail("subscriptions did not receive values");
  }
  assertEquals(1,counter.get());
}
