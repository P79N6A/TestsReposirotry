@Test public void concatMapRangeAsyncLoopIssue2876(){
  final long durationSeconds=2;
  final long startTime=System.currentTimeMillis();
  for (int i=0; ; i++) {
    if (System.currentTimeMillis() - startTime > TimeUnit.SECONDS.toMillis(durationSeconds)) {
      return;
    }
    if (i % 1000 == 0) {
      System.out.println("concatMapRangeAsyncLoop > " + i);
    }
    TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    Flowable.range(0,1000).concatMap(new Function<Integer,Flowable<Integer>>(){
      @Override public Flowable<Integer> apply(      Integer t){
        return Flowable.fromIterable(Arrays.asList(t));
      }
    }
).observeOn(Schedulers.computation()).subscribe(ts);
    ts.awaitTerminalEvent(2500,TimeUnit.MILLISECONDS);
    ts.assertTerminated();
    ts.assertNoErrors();
    assertEquals(1000,ts.valueCount());
    assertEquals((Integer)999,ts.values().get(999));
  }
}
