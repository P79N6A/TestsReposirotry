/** 
 * All observables will be running in different threads so subscribe() is unblocked. CountDownLatch is only used in order to call unsubscribe() in a predictable manner.
 */
@Test public void testConcatUnsubscribeConcurrent(){
  final CountDownLatch callOnce=new CountDownLatch(1);
  final CountDownLatch okToContinue=new CountDownLatch(1);
  final TestObservable<String> w1=new TestObservable<String>("one","two","three");
  final TestObservable<String> w2=new TestObservable<String>(callOnce,okToContinue,"four","five","six");
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  TestSubscriber<String> ts=new TestSubscriber<String>(subscriber,0L);
  @SuppressWarnings("unchecked") TestObservable<Flowable<String>> observableOfObservables=new TestObservable<Flowable<String>>(Flowable.unsafeCreate(w1),Flowable.unsafeCreate(w2));
  Flowable<String> concatF=Flowable.concat(Flowable.unsafeCreate(observableOfObservables));
  concatF.subscribe(ts);
  try {
    callOnce.await();
    ts.dispose();
    okToContinue.countDown();
    w1.t.join();
    w2.t.join();
  }
 catch (  Throwable e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  InOrder inOrder=inOrder(subscriber);
  inOrder.verify(subscriber,times(1)).onNext("one");
  inOrder.verify(subscriber,times(1)).onNext("two");
  inOrder.verify(subscriber,times(1)).onNext("three");
  inOrder.verify(subscriber,times(1)).onNext("four");
  inOrder.verify(subscriber,never()).onNext("five");
  inOrder.verify(subscriber,never()).onNext("six");
  verify(subscriber,never()).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
}
