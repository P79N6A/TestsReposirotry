@Test public void badInnerSource(){
  @SuppressWarnings("rawtypes") final Subscriber[] ts0={null};
  TestSubscriber<Integer> ts=Flowable.just(1).hide().concatMap(Functions.justFunction(new Flowable<Integer>(){
    @Override protected void subscribeActual(    Subscriber<? super Integer> s){
      ts0[0]=s;
      s.onSubscribe(new BooleanSubscription());
      s.onError(new TestException("First"));
    }
  }
)).test();
  ts.assertFailureAndMessage(TestException.class,"First");
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    ts0[0].onError(new TestException("Second"));
    TestHelper.assertUndeliverable(errors,0,TestException.class);
  }
  finally {
    RxJavaPlugins.reset();
  }
}
