@Test public void testConcatNonBlockingObservables(){
  final CountDownLatch okToContinueW1=new CountDownLatch(1);
  final CountDownLatch okToContinueW2=new CountDownLatch(1);
  final TestObservable<String> w1=new TestObservable<String>(null,okToContinueW1,"one","two","three");
  final TestObservable<String> w2=new TestObservable<String>(null,okToContinueW2,"four","five","six");
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  Flowable<Flowable<String>> observableOfObservables=Flowable.unsafeCreate(new Publisher<Flowable<String>>(){
    @Override public void subscribe(    Subscriber<? super Flowable<String>> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      subscriber.onNext(Flowable.unsafeCreate(w1));
      subscriber.onNext(Flowable.unsafeCreate(w2));
      subscriber.onComplete();
    }
  }
);
  Flowable<String> concat=Flowable.concat(observableOfObservables);
  concat.subscribe(subscriber);
  verify(subscriber,times(0)).onComplete();
  try {
    okToContinueW1.countDown();
    okToContinueW2.countDown();
    w1.t.join();
    w2.t.join();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  InOrder inOrder=inOrder(subscriber);
  inOrder.verify(subscriber,times(1)).onNext("one");
  inOrder.verify(subscriber,times(1)).onNext("two");
  inOrder.verify(subscriber,times(1)).onNext("three");
  inOrder.verify(subscriber,times(1)).onNext("four");
  inOrder.verify(subscriber,times(1)).onNext("five");
  inOrder.verify(subscriber,times(1)).onNext("six");
  verify(subscriber,times(1)).onComplete();
}
