@Test public void testConcatConcurrentWithInfinity(){
  final TestObservable<String> w1=new TestObservable<String>("one","two","three");
  final TestObservable<String> w2=new TestObservable<String>("hello",Integer.MAX_VALUE);
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  @SuppressWarnings("unchecked") TestObservable<Flowable<String>> observableOfObservables=new TestObservable<Flowable<String>>(Flowable.unsafeCreate(w1),Flowable.unsafeCreate(w2));
  Flowable<String> concatF=Flowable.concat(Flowable.unsafeCreate(observableOfObservables));
  concatF.take(50).subscribe(subscriber);
  try {
    w1.waitForThreadDone();
    w2.waitForThreadDone();
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  InOrder inOrder=inOrder(subscriber);
  inOrder.verify(subscriber,times(1)).onNext("one");
  inOrder.verify(subscriber,times(1)).onNext("two");
  inOrder.verify(subscriber,times(1)).onNext("three");
  inOrder.verify(subscriber,times(47)).onNext("hello");
  verify(subscriber,times(1)).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
}
