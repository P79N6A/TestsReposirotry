@Test public void testMultipleObservers(){
  Subscriber<Object> subscriber1=TestHelper.mockSubscriber();
  Subscriber<Object> subscriber2=TestHelper.mockSubscriber();
  TestScheduler s=new TestScheduler();
  Flowable<Long> timer=Flowable.interval(500,TimeUnit.MILLISECONDS,s).take(2);
  Flowable<Long> f=Flowable.concat(timer,timer);
  f.subscribe(subscriber1);
  f.subscribe(subscriber2);
  InOrder inOrder1=inOrder(subscriber1);
  InOrder inOrder2=inOrder(subscriber2);
  s.advanceTimeBy(500,TimeUnit.MILLISECONDS);
  inOrder1.verify(subscriber1,times(1)).onNext(0L);
  inOrder2.verify(subscriber2,times(1)).onNext(0L);
  s.advanceTimeBy(500,TimeUnit.MILLISECONDS);
  inOrder1.verify(subscriber1,times(1)).onNext(1L);
  inOrder2.verify(subscriber2,times(1)).onNext(1L);
  s.advanceTimeBy(500,TimeUnit.MILLISECONDS);
  inOrder1.verify(subscriber1,times(1)).onNext(0L);
  inOrder2.verify(subscriber2,times(1)).onNext(0L);
  s.advanceTimeBy(500,TimeUnit.MILLISECONDS);
  inOrder1.verify(subscriber1,times(1)).onNext(1L);
  inOrder2.verify(subscriber2,times(1)).onNext(1L);
  inOrder1.verify(subscriber1,times(1)).onComplete();
  inOrder2.verify(subscriber2,times(1)).onComplete();
  verify(subscriber1,never()).onError(any(Throwable.class));
  verify(subscriber2,never()).onError(any(Throwable.class));
}
