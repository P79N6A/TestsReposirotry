@Test public void testRequestFromDecoupledOperator() throws Exception {
  TestSubscriber<String> s=new TestSubscriber<String>(0L);
  FlowableOperator<String,String> o=new FlowableOperator<String,String>(){
    @Override public Subscriber<? super String> apply(    final Subscriber<? super String> s1){
      return new FlowableSubscriber<String>(){
        @Override public void onSubscribe(        Subscription a){
          s1.onSubscribe(a);
        }
        @Override public void onComplete(){
        }
        @Override public void onError(        Throwable e){
        }
        @Override public void onNext(        String t){
        }
      }
;
    }
  }
;
  s.request(10);
  Subscriber<? super String> ns=o.apply(s);
  final AtomicLong r=new AtomicLong();
  ns.onSubscribe(new Subscription(){
    @Override public void request(    long n){
      r.set(n);
    }
    @Override public void cancel(){
    }
  }
);
  assertEquals(10,r.get());
}
