@Test public void testRequestThroughTakeWhereRequestIsSmallerThanTake(){
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>(0L);
  ts.request(3);
  final AtomicLong requested=new AtomicLong();
  Flowable.<Integer>unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> s){
      s.onSubscribe(new Subscription(){
        @Override public void request(        long n){
          requested.set(n);
        }
        @Override public void cancel(){
        }
      }
);
    }
  }
).take(10).subscribe(ts);
  assertEquals(3,requested.get());
}
