@Test public void testRequestFromDecoupledOperatorThatRequestsN() throws Exception {
  TestSubscriber<String> s=new TestSubscriber<String>(10L);
  final AtomicLong innerR=new AtomicLong();
  FlowableOperator<String,String> o=new FlowableOperator<String,String>(){
    @Override public Subscriber<? super String> apply(    Subscriber<? super String> child){
      child.onSubscribe(new Subscription(){
        @Override public void request(        long n){
          innerR.set(n);
        }
        @Override public void cancel(){
        }
      }
);
      ResourceSubscriber<String> as=new ResourceSubscriber<String>(){
        @Override protected void onStart(){
          request(99);
        }
        @Override public void onComplete(){
        }
        @Override public void onError(        Throwable e){
        }
        @Override public void onNext(        String t){
        }
      }
;
      return as;
    }
  }
;
  Subscriber<? super String> ns=o.apply(s);
  final AtomicLong r=new AtomicLong();
  ns.onSubscribe(new Subscription(){
    @Override public void request(    long n){
      r.set(n);
    }
    @Override public void cancel(){
    }
  }
);
  assertEquals(99,r.get());
  assertEquals(10,innerR.get());
}
