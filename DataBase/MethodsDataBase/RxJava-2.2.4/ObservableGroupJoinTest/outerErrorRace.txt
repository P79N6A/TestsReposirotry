@Test public void outerErrorRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final PublishSubject<Object> ps1=PublishSubject.create();
    final PublishSubject<Object> ps2=PublishSubject.create();
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      TestObserver<Object> to=ps1.groupJoin(ps2,new Function<Object,ObservableSource<Object>>(){
        @Override public ObservableSource<Object> apply(        Object left) throws Exception {
          return Observable.never();
        }
      }
,new Function<Object,ObservableSource<Object>>(){
        @Override public ObservableSource<Object> apply(        Object right) throws Exception {
          return Observable.never();
        }
      }
,new BiFunction<Object,Observable<Object>,Observable<Object>>(){
        @Override public Observable<Object> apply(        Object r,        Observable<Object> l) throws Exception {
          return l;
        }
      }
).flatMap(Functions.<Observable<Object>>identity()).test();
      final TestException ex1=new TestException();
      final TestException ex2=new TestException();
      Runnable r1=new Runnable(){
        @Override public void run(){
          ps1.onError(ex1);
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          ps2.onError(ex2);
        }
      }
;
      TestHelper.race(r1,r2);
      to.assertError(Throwable.class).assertSubscribed().assertNotComplete().assertNoValues();
      Throwable exc=to.errors().get(0);
      if (exc instanceof CompositeException) {
        List<Throwable> es=TestHelper.compositeList(exc);
        TestHelper.assertError(es,0,TestException.class);
        TestHelper.assertError(es,1,TestException.class);
      }
 else {
        to.assertError(TestException.class);
      }
      if (!errors.isEmpty()) {
        TestHelper.assertUndeliverable(errors,0,TestException.class);
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
