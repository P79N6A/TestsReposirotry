@Test public void rightEmission(){
  final PublishSubject<Object> ps1=PublishSubject.create();
  final PublishSubject<Object> ps2=PublishSubject.create();
  TestObserver<Object> to=ps1.groupJoin(ps2,new Function<Object,ObservableSource<Object>>(){
    @Override public ObservableSource<Object> apply(    Object left) throws Exception {
      return Observable.never();
    }
  }
,new Function<Object,ObservableSource<Object>>(){
    @Override public ObservableSource<Object> apply(    Object right) throws Exception {
      return Observable.never();
    }
  }
,new BiFunction<Object,Observable<Object>,Observable<Object>>(){
    @Override public Observable<Object> apply(    Object r,    Observable<Object> l) throws Exception {
      return l;
    }
  }
).flatMap(Functions.<Observable<Object>>identity()).test();
  ps2.onNext(2);
  ps1.onNext(1);
  ps1.onComplete();
  ps2.onComplete();
  to.assertResult(2);
}
