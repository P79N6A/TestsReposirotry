@Test public void normal1(){
  Observable<Person> source1=Observable.fromIterable(Arrays.asList(new Person(1,"Joe"),new Person(2,"Mike"),new Person(3,"Charlie")));
  Observable<PersonFruit> source2=Observable.fromIterable(Arrays.asList(new PersonFruit(1,"Strawberry"),new PersonFruit(1,"Apple"),new PersonFruit(3,"Peach")));
  Observable<PPF> q=source1.groupJoin(source2,just2(Observable.<Object>never()),just2(Observable.<Object>never()),new BiFunction<Person,Observable<PersonFruit>,PPF>(){
    @Override public PPF apply(    Person t1,    Observable<PersonFruit> t2){
      return new PPF(t1,t2);
    }
  }
);
  q.subscribe(new Observer<PPF>(){
    @Override public void onNext(    final PPF ppf){
      ppf.fruits.filter(new Predicate<PersonFruit>(){
        @Override public boolean test(        PersonFruit t1){
          return ppf.person.id == t1.personId;
        }
      }
).subscribe(new Consumer<PersonFruit>(){
        @Override public void accept(        PersonFruit t1){
          observer.onNext(Arrays.asList(ppf.person.name,t1.fruit));
        }
      }
);
    }
    @Override public void onError(    Throwable e){
      observer.onError(e);
    }
    @Override public void onComplete(){
      observer.onComplete();
    }
    @Override public void onSubscribe(    Disposable d){
    }
  }
);
  verify(observer,times(1)).onNext(Arrays.asList("Joe","Strawberry"));
  verify(observer,times(1)).onNext(Arrays.asList("Joe","Apple"));
  verify(observer,times(1)).onNext(Arrays.asList("Charlie","Peach"));
  verify(observer,times(1)).onComplete();
  verify(observer,never()).onError(any(Throwable.class));
}
