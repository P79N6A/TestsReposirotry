@Test public void cancelAndDrainRace(){
  Flowable<Object> neverNever=new Flowable<Object>(){
    @Override protected void subscribeActual(    Subscriber<? super Object> s){
    }
  }
;
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final TestObserver<Boolean> to=new TestObserver<Boolean>();
    final PublishProcessor<Integer> pp=PublishProcessor.create();
    boolean swap=(i & 1) == 0;
    Flowable.sequenceEqual(swap ? pp : neverNever,swap ? neverNever : pp).subscribe(to);
    Runnable r1=new Runnable(){
      @Override public void run(){
        pp.onNext(1);
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        to.cancel();
      }
    }
;
    TestHelper.race(r1,r2);
    to.assertEmpty();
  }
}
