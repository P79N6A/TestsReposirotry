@Test public void supplierAndDisposerCrashEager(){
  TestObserver<Void> to=Completable.using(new Callable<Object>(){
    @Override public Object call() throws Exception {
      return 1;
    }
  }
,new Function<Object,CompletableSource>(){
    @Override public CompletableSource apply(    Object v) throws Exception {
      throw new TestException("Main");
    }
  }
,new Consumer<Object>(){
    @Override public void accept(    Object d) throws Exception {
      throw new TestException("Disposer");
    }
  }
,true).test().assertFailure(CompositeException.class);
  List<Throwable> list=TestHelper.compositeList(to.errors().get(0));
  TestHelper.assertError(list,0,TestException.class,"Main");
  TestHelper.assertError(list,1,TestException.class,"Disposer");
}
