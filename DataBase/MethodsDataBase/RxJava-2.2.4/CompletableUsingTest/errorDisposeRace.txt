@Test public void errorDisposeRace(){
  RxJavaPlugins.setErrorHandler(Functions.emptyConsumer());
  try {
    for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
      final PublishSubject<Integer> ps=PublishSubject.create();
      final TestObserver<Void> to=Completable.using(new Callable<Object>(){
        @Override public Object call() throws Exception {
          return 1;
        }
      }
,new Function<Object,CompletableSource>(){
        @Override public CompletableSource apply(        Object v) throws Exception {
          return ps.ignoreElements();
        }
      }
,new Consumer<Object>(){
        @Override public void accept(        Object d) throws Exception {
        }
      }
,true).test();
      final TestException ex=new TestException();
      Runnable r1=new Runnable(){
        @Override public void run(){
          to.cancel();
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          ps.onError(ex);
        }
      }
;
      TestHelper.race(r1,r2);
    }
  }
  finally {
    RxJavaPlugins.reset();
  }
}
