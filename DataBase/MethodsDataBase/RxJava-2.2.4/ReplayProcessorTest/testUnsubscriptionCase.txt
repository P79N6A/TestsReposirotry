@Test(timeout=1000) public void testUnsubscriptionCase(){
  ReplayProcessor<String> src=ReplayProcessor.create();
  for (int i=0; i < 10; i++) {
    final Subscriber<Object> subscriber=TestHelper.mockSubscriber();
    InOrder inOrder=inOrder(subscriber);
    String v="" + i;
    src.onNext(v);
    System.out.printf("Turn: %d%n",i);
    src.firstElement().toFlowable().flatMap(new Function<String,Flowable<String>>(){
      @Override public Flowable<String> apply(      String t1){
        return Flowable.just(t1 + ", " + t1);
      }
    }
).subscribe(new DefaultSubscriber<String>(){
      @Override public void onNext(      String t){
        System.out.println(t);
        subscriber.onNext(t);
      }
      @Override public void onError(      Throwable e){
        subscriber.onError(e);
      }
      @Override public void onComplete(){
        subscriber.onComplete();
      }
    }
);
    inOrder.verify(subscriber).onNext("0, 0");
    inOrder.verify(subscriber).onComplete();
    verify(subscriber,never()).onError(any(Throwable.class));
  }
}
