@Test public void testCompletedStopsEmittingData(){
  ReplayProcessor<Integer> channel=ReplayProcessor.create();
  Subscriber<Object> observerA=TestHelper.mockSubscriber();
  Subscriber<Object> observerB=TestHelper.mockSubscriber();
  Subscriber<Object> observerC=TestHelper.mockSubscriber();
  Subscriber<Object> observerD=TestHelper.mockSubscriber();
  TestSubscriber<Object> ts=new TestSubscriber<Object>(observerA);
  channel.subscribe(ts);
  channel.subscribe(observerB);
  InOrder inOrderA=inOrder(observerA);
  InOrder inOrderB=inOrder(observerB);
  InOrder inOrderC=inOrder(observerC);
  InOrder inOrderD=inOrder(observerD);
  channel.onNext(42);
  inOrderA.verify(observerA).onNext(42);
  inOrderB.verify(observerB).onNext(42);
  ts.dispose();
  inOrderA.verifyNoMoreInteractions();
  channel.onNext(4711);
  inOrderB.verify(observerB).onNext(4711);
  channel.onComplete();
  inOrderB.verify(observerB).onComplete();
  channel.subscribe(observerC);
  inOrderC.verify(observerC).onNext(42);
  inOrderC.verify(observerC).onNext(4711);
  inOrderC.verify(observerC).onComplete();
  channel.onNext(13);
  channel.onNext(14);
  channel.onNext(15);
  channel.onError(new RuntimeException());
  channel.subscribe(observerD);
  inOrderD.verify(observerD).onNext(42);
  inOrderD.verify(observerD).onNext(4711);
  inOrderD.verify(observerD).onComplete();
  verify(observerA).onSubscribe((Subscription)notNull());
  verify(observerB).onSubscribe((Subscription)notNull());
  verify(observerC).onSubscribe((Subscription)notNull());
  verify(observerD).onSubscribe((Subscription)notNull());
  Mockito.verifyNoMoreInteractions(observerA);
  Mockito.verifyNoMoreInteractions(observerB);
  Mockito.verifyNoMoreInteractions(observerC);
  Mockito.verifyNoMoreInteractions(observerD);
}
