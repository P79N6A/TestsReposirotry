@Test public void noErrorLoss() throws Exception {
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    final CountDownLatch cdl1=new CountDownLatch(1);
    final CountDownLatch cdl2=new CountDownLatch(1);
    TestObserver<Integer> to=Single.fromCallable(new Callable<Integer>(){
      @Override public Integer call() throws Exception {
        cdl1.countDown();
        cdl2.await(5,TimeUnit.SECONDS);
        return 1;
      }
    }
).subscribeOn(Schedulers.single()).test();
    assertTrue(cdl1.await(5,TimeUnit.SECONDS));
    to.cancel();
    int timeout=10;
    while (timeout-- > 0 && errors.isEmpty()) {
      Thread.sleep(100);
    }
    TestHelper.assertUndeliverable(errors,0,InterruptedException.class);
  }
  finally {
    RxJavaPlugins.reset();
  }
}
