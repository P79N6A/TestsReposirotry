@Test public void badEndSource(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    @SuppressWarnings("rawtypes") final Subscriber[] o={null};
    TestSubscriber<Integer> ts=Flowable.just(1).join(Flowable.just(2),Functions.justFunction(Flowable.never()),Functions.justFunction(new Flowable<Integer>(){
      @Override protected void subscribeActual(      Subscriber<? super Integer> subscriber){
        o[0]=subscriber;
        subscriber.onSubscribe(new BooleanSubscription());
        subscriber.onError(new TestException("First"));
      }
    }
),new BiFunction<Integer,Integer,Integer>(){
      @Override public Integer apply(      Integer a,      Integer b) throws Exception {
        return a + b;
      }
    }
).test();
    o[0].onError(new TestException("Second"));
    ts.assertFailureAndMessage(TestException.class,"First");
    TestHelper.assertUndeliverable(errors,0,TestException.class,"Second");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
