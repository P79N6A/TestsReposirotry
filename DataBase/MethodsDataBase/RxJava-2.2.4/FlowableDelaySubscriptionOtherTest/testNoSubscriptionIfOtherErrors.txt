@Test public void testNoSubscriptionIfOtherErrors(){
  PublishProcessor<Object> other=PublishProcessor.create();
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  final AtomicInteger subscribed=new AtomicInteger();
  Flowable.<Integer>error(new TestException()).doOnSubscribe(new Consumer<Subscription>(){
    @Override public void accept(    Subscription s){
      subscribed.getAndIncrement();
    }
  }
).delaySubscription(other).subscribe(ts);
  ts.assertNotComplete();
  ts.assertNoErrors();
  ts.assertNoValues();
  Assert.assertEquals("Premature subscription",0,subscribed.get());
  other.onError(new TestException());
  Assert.assertEquals("Premature subscription",0,subscribed.get());
  ts.assertNoValues();
  ts.assertNotComplete();
  ts.assertError(TestException.class);
}
