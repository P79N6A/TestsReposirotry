@Test public void mergeManyAsyncSingle(){
  TestObserver<Integer> to=new TestObserver<Integer>();
  Observable<Observable<Integer>> os=Observable.range(1,10000).map(new Function<Integer,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    final Integer i){
      return Observable.unsafeCreate(new ObservableSource<Integer>(){
        @Override public void subscribe(        Observer<? super Integer> observer){
          observer.onSubscribe(Disposables.empty());
          if (i < 500) {
            try {
              Thread.sleep(1);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
          }
          observer.onNext(i);
          observer.onComplete();
        }
      }
).subscribeOn(Schedulers.computation()).cache();
    }
  }
);
  Observable.merge(os).subscribe(to);
  to.awaitTerminalEvent();
  to.assertNoErrors();
  assertEquals(10000,to.values().size());
}
