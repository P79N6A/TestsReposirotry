@Test public void testBackpressureUpstream2() throws InterruptedException {
  final AtomicInteger generated1=new AtomicInteger();
  Observable<Integer> o1=createInfiniteObservable(generated1).subscribeOn(Schedulers.computation());
  TestObserver<Integer> testObserver=new TestObserver<Integer>(){
    @Override public void onNext(    Integer t){
      super.onNext(t);
    }
  }
;
  Observable.merge(o1.take(Flowable.bufferSize() * 2),Observable.just(-99)).subscribe(testObserver);
  testObserver.awaitTerminalEvent();
  List<Integer> onNextEvents=testObserver.values();
  System.out.println("Generated 1: " + generated1.get() + " / received: "+ onNextEvents.size());
  System.out.println(onNextEvents);
  if (testObserver.errors().size() > 0) {
    testObserver.errors().get(0).printStackTrace();
  }
  testObserver.assertNoErrors();
  assertEquals(Flowable.bufferSize() * 2 + 1,onNextEvents.size());
  assertTrue(generated1.get() >= Flowable.bufferSize() * 2 && generated1.get() <= Flowable.bufferSize() * 3);
}
