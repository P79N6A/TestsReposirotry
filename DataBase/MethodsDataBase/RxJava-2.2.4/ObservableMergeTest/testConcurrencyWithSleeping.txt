@Test public void testConcurrencyWithSleeping(){
  Observable<Integer> o=Observable.unsafeCreate(new ObservableSource<Integer>(){
    @Override public void subscribe(    final Observer<? super Integer> observer){
      Worker inner=Schedulers.newThread().createWorker();
      final CompositeDisposable as=new CompositeDisposable();
      as.add(Disposables.empty());
      as.add(inner);
      observer.onSubscribe(as);
      inner.schedule(new Runnable(){
        @Override public void run(){
          try {
            for (int i=0; i < 100; i++) {
              observer.onNext(1);
              try {
                Thread.sleep(1);
              }
 catch (              InterruptedException e) {
                e.printStackTrace();
              }
            }
          }
 catch (          Exception e) {
            observer.onError(e);
          }
          as.dispose();
          observer.onComplete();
        }
      }
);
    }
  }
);
  for (int i=0; i < 10; i++) {
    Observable<Integer> merge=Observable.merge(o,o,o);
    TestObserver<Integer> to=new TestObserver<Integer>();
    merge.subscribe(to);
    to.awaitTerminalEvent();
    to.assertComplete();
    List<Integer> onNextEvents=to.values();
    assertEquals(300,onNextEvents.size());
  }
}
