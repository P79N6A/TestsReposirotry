@Test public void testBackpressureUpstream() throws InterruptedException {
  final AtomicInteger generated1=new AtomicInteger();
  Observable<Integer> o1=createInfiniteObservable(generated1).subscribeOn(Schedulers.computation());
  final AtomicInteger generated2=new AtomicInteger();
  Observable<Integer> o2=createInfiniteObservable(generated2).subscribeOn(Schedulers.computation());
  TestObserver<Integer> testObserver=new TestObserver<Integer>(){
    @Override public void onNext(    Integer t){
      System.err.println("TestObserver received => " + t + "  on thread "+ Thread.currentThread());
      super.onNext(t);
    }
  }
;
  Observable.merge(o1.take(Flowable.bufferSize() * 2),o2.take(Flowable.bufferSize() * 2)).subscribe(testObserver);
  testObserver.awaitTerminalEvent();
  if (testObserver.errors().size() > 0) {
    testObserver.errors().get(0).printStackTrace();
  }
  testObserver.assertNoErrors();
  System.err.println(testObserver.values());
  assertEquals(Flowable.bufferSize() * 4,testObserver.values().size());
  System.out.println("Generated 1: " + generated1.get());
  System.out.println("Generated 2: " + generated2.get());
  assertTrue(generated1.get() >= Flowable.bufferSize() * 2 && generated1.get() <= Flowable.bufferSize() * 4);
}
