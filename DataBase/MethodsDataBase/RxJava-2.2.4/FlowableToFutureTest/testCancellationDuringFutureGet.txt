@Test public void testCancellationDuringFutureGet() throws Exception {
  Future<Object> future=new Future<Object>(){
    private AtomicBoolean isCancelled=new AtomicBoolean(false);
    private AtomicBoolean isDone=new AtomicBoolean(false);
    @Override public boolean cancel(    boolean mayInterruptIfRunning){
      isCancelled.compareAndSet(false,true);
      return true;
    }
    @Override public boolean isCancelled(){
      return isCancelled.get();
    }
    @Override public boolean isDone(){
      return isCancelled() || isDone.get();
    }
    @Override public Object get() throws InterruptedException, ExecutionException {
      Thread.sleep(500);
      isDone.compareAndSet(false,true);
      return "foo";
    }
    @Override public Object get(    long timeout,    TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
      return get();
    }
  }
;
  Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  TestSubscriber<Object> ts=new TestSubscriber<Object>(subscriber);
  Flowable<Object> futureObservable=Flowable.fromFuture(future);
  futureObservable.subscribeOn(Schedulers.computation()).subscribe(ts);
  Thread.sleep(100);
  ts.dispose();
  ts.assertNoErrors();
  ts.assertNoValues();
  ts.assertNotComplete();
}
