@Test public void debounceSelectorNormal1(){
  PublishProcessor<Integer> source=PublishProcessor.create();
  final PublishProcessor<Integer> debouncer=PublishProcessor.create();
  Function<Integer,Flowable<Integer>> debounceSel=new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer t1){
      return debouncer;
    }
  }
;
  Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  InOrder inOrder=inOrder(subscriber);
  source.debounce(debounceSel).subscribe(subscriber);
  source.onNext(1);
  debouncer.onNext(1);
  source.onNext(2);
  source.onNext(3);
  source.onNext(4);
  debouncer.onNext(2);
  source.onNext(5);
  source.onComplete();
  inOrder.verify(subscriber).onNext(1);
  inOrder.verify(subscriber).onNext(4);
  inOrder.verify(subscriber).onNext(5);
  inOrder.verify(subscriber).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
}
