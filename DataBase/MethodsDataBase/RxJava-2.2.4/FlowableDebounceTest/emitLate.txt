@Test public void emitLate(){
  final AtomicReference<Subscriber<? super Integer>> ref=new AtomicReference<Subscriber<? super Integer>>();
  TestSubscriber<Integer> ts=Flowable.range(1,2).debounce(new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer o) throws Exception {
      if (o != 1) {
        return Flowable.never();
      }
      return new Flowable<Integer>(){
        @Override protected void subscribeActual(        Subscriber<? super Integer> subscriber){
          subscriber.onSubscribe(new BooleanSubscription());
          ref.set(subscriber);
        }
      }
;
    }
  }
).test();
  ref.get().onNext(1);
  ts.assertResult(2);
}
