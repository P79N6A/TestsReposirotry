@Test public void badSourceSelector(){
  TestHelper.checkBadSourceFlowable(new Function<Flowable<Integer>,Object>(){
    @Override public Object apply(    Flowable<Integer> f) throws Exception {
      return f.debounce(new Function<Integer,Flowable<Long>>(){
        @Override public Flowable<Long> apply(        Integer v) throws Exception {
          return Flowable.timer(1,TimeUnit.SECONDS);
        }
      }
);
    }
  }
,false,1,1,1);
  TestHelper.checkBadSourceFlowable(new Function<Flowable<Integer>,Object>(){
    @Override public Object apply(    final Flowable<Integer> f) throws Exception {
      return Flowable.just(1).debounce(new Function<Integer,Flowable<Integer>>(){
        @Override public Flowable<Integer> apply(        Integer v) throws Exception {
          return f;
        }
      }
);
    }
  }
,false,1,1,1);
}
