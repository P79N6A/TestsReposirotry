@Test public void testMergeRequestOverflow() throws InterruptedException {
  Flowable<Integer> f=Flowable.fromIterable(Arrays.asList(1,2)).mergeWith(Flowable.fromIterable(Arrays.asList(3,4)));
  final int expectedCount=4;
  final CountDownLatch latch=new CountDownLatch(expectedCount);
  f.subscribeOn(Schedulers.computation()).subscribe(new DefaultSubscriber<Integer>(){
    @Override public void onStart(){
      request(1);
    }
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
      throw new RuntimeException(e);
    }
    @Override public void onNext(    Integer t){
      latch.countDown();
      request(2);
      request(Long.MAX_VALUE - 1);
    }
  }
);
  assertTrue(latch.await(10,TimeUnit.SECONDS));
}
