@Test public void mergeManyAsyncSingle(){
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  Flowable<Flowable<Integer>> os=Flowable.range(1,10000).map(new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    final Integer i){
      return Flowable.unsafeCreate(new Publisher<Integer>(){
        @Override public void subscribe(        Subscriber<? super Integer> s){
          s.onSubscribe(new BooleanSubscription());
          if (i < 500) {
            try {
              Thread.sleep(1);
            }
 catch (            InterruptedException e) {
              e.printStackTrace();
            }
          }
          s.onNext(i);
          s.onComplete();
        }
      }
).subscribeOn(Schedulers.computation()).cache();
    }
  }
);
  Flowable.merge(os).subscribe(ts);
  ts.awaitTerminalEvent();
  ts.assertNoErrors();
  assertEquals(10000,ts.values().size());
}
