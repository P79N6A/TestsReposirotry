@Test public void testConcurrencyWithSleeping(){
  Flowable<Integer> f=Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    final Subscriber<? super Integer> s){
      Worker inner=Schedulers.newThread().createWorker();
      final AsyncSubscription as=new AsyncSubscription();
      as.setSubscription(new BooleanSubscription());
      as.setResource(inner);
      s.onSubscribe(as);
      inner.schedule(new Runnable(){
        @Override public void run(){
          try {
            for (int i=0; i < 100; i++) {
              s.onNext(1);
              try {
                Thread.sleep(1);
              }
 catch (              InterruptedException e) {
                e.printStackTrace();
              }
            }
          }
 catch (          Exception e) {
            s.onError(e);
          }
          as.dispose();
          s.onComplete();
        }
      }
);
    }
  }
);
  for (int i=0; i < 10; i++) {
    Flowable<Integer> merge=Flowable.merge(f,f,f);
    TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    merge.subscribe(ts);
    ts.awaitTerminalEvent();
    ts.assertComplete();
    List<Integer> onNextEvents=ts.values();
    assertEquals(300,onNextEvents.size());
  }
}
