@Test public void testMergeKeepsRequesting() throws InterruptedException {
  final CountDownLatch latch=new CountDownLatch(1);
  final ConcurrentLinkedQueue<String> messages=new ConcurrentLinkedQueue<String>();
  Flowable.range(1,2).flatMap(new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    final Integer number){
      return Flowable.range(1,Integer.MAX_VALUE).doOnRequest(new LongConsumer(){
        @Override public void accept(        long n){
          messages.add(">>>>>>>> A requested[" + number + "]: "+ n);
        }
      }
).doOnNext(pauseForMs(3)).onBackpressureBuffer().subscribeOn(Schedulers.computation()).doOnRequest(new LongConsumer(){
        @Override public void accept(        long n){
          messages.add(">>>>>>>> B requested[" + number + "]: "+ n);
        }
      }
);
    }
  }
).take(Flowable.bufferSize() * 2 + 1).doOnNext(printCount()).doOnComplete(new Action(){
    @Override public void run(){
      latch.countDown();
    }
  }
).subscribe();
  boolean a=latch.await(2,TimeUnit.SECONDS);
  if (!a) {
    for (    String s : messages) {
      System.out.println("DEBUG => " + s);
    }
  }
  assertTrue(a);
}
