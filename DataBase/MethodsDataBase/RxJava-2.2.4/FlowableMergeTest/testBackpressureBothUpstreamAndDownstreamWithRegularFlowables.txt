/** 
 * Currently there is no solution to this ... we can't exert backpressure on the outer Flowable if we can't know if the ones we've received so far are going to emit or not, otherwise we could starve the system. For example, 10,000 Flowables are being merged (bad use case to begin with, but ...) and it's only one of them that will ever emit. If backpressure only allowed the first 1,000 to be sent, we would hang and never receive an event. Thus, we must allow all Flowables to be sent. The ScalarSynchronousFlowable use case is an exception to this since we can grab the value synchronously.
 * @throws InterruptedException if the await is interrupted
 */
@Test(timeout=5000) public void testBackpressureBothUpstreamAndDownstreamWithRegularFlowables() throws InterruptedException {
  final AtomicInteger generated1=new AtomicInteger();
  Flowable<Flowable<Integer>> f1=createInfiniteFlowable(generated1).map(new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer t1){
      return Flowable.just(1,2,3);
    }
  }
);
  TestSubscriber<Integer> testSubscriber=new TestSubscriber<Integer>(){
    int i;
    @Override public void onNext(    Integer t){
      if (i++ < 400) {
        try {
          Thread.sleep(1);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
      super.onNext(t);
    }
  }
;
  Flowable.merge(f1).observeOn(Schedulers.computation()).take(Flowable.bufferSize() * 2).subscribe(testSubscriber);
  testSubscriber.awaitTerminalEvent();
  if (testSubscriber.errors().size() > 0) {
    testSubscriber.errors().get(0).printStackTrace();
  }
  testSubscriber.assertNoErrors();
  System.out.println("Generated 1: " + generated1.get());
  System.err.println(testSubscriber.values());
  System.out.println("done1 testBackpressureBothUpstreamAndDownstreamWithRegularFlowables ");
  assertEquals(Flowable.bufferSize() * 2,testSubscriber.values().size());
  System.out.println("done2 testBackpressureBothUpstreamAndDownstreamWithRegularFlowables ");
}
