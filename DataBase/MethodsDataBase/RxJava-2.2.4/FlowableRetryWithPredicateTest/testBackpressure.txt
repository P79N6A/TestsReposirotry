@Test public void testBackpressure(){
  final List<Long> requests=new ArrayList<Long>();
  Flowable<Integer> source=Flowable.just(1).concatWith(Flowable.<Integer>error(new TestException())).doOnRequest(new LongConsumer(){
    @Override public void accept(    long t){
      requests.add(t);
    }
  }
);
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>(3L);
  source.retry(new BiPredicate<Integer,Throwable>(){
    @Override public boolean test(    Integer t1,    Throwable t2){
      return t1 < 4;
    }
  }
).subscribe(ts);
  assertEquals(Arrays.asList(3L,2L,1L),requests);
  ts.assertValues(1,1,1);
  ts.assertNotComplete();
  ts.assertNoErrors();
}
