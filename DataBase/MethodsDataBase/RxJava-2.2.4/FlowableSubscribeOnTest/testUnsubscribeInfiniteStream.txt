@Test(timeout=5000) public void testUnsubscribeInfiniteStream() throws InterruptedException {
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  final AtomicInteger count=new AtomicInteger();
  Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> sub){
      BooleanSubscription bs=new BooleanSubscription();
      sub.onSubscribe(bs);
      for (int i=1; !bs.isCancelled(); i++) {
        count.incrementAndGet();
        sub.onNext(i);
      }
    }
  }
).subscribeOn(Schedulers.newThread()).take(10).subscribe(ts);
  ts.awaitTerminalEvent(1000,TimeUnit.MILLISECONDS);
  ts.dispose();
  Thread.sleep(200);
  ts.assertValues(1,2,3,4,5,6,7,8,9,10);
  assertEquals(10,count.get());
}
