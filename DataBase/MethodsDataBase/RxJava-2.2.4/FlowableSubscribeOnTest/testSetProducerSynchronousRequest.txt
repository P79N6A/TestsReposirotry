@Test public void testSetProducerSynchronousRequest(){
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  Flowable.just(1,2,3).lift(new FlowableOperator<Integer,Integer>(){
    @Override public Subscriber<? super Integer> apply(    final Subscriber<? super Integer> child){
      final AtomicLong requested=new AtomicLong();
      child.onSubscribe(new Subscription(){
        @Override public void request(        long n){
          if (!requested.compareAndSet(0,n)) {
            child.onError(new RuntimeException("Expected to receive request before onNext but didn't"));
          }
        }
        @Override public void cancel(){
        }
      }
);
      Subscriber<Integer> parent=new DefaultSubscriber<Integer>(){
        @Override public void onComplete(){
          child.onComplete();
        }
        @Override public void onError(        Throwable e){
          child.onError(e);
        }
        @Override public void onNext(        Integer t){
          if (requested.compareAndSet(0,-99)) {
            child.onError(new RuntimeException("Got values before requested"));
          }
        }
      }
;
      return parent;
    }
  }
).subscribeOn(Schedulers.newThread()).subscribe(ts);
  ts.awaitTerminalEvent();
  ts.assertNoErrors();
}
