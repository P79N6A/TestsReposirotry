@Test(timeout=2000) public void testIssue813() throws InterruptedException {
  final CountDownLatch scheduled=new CountDownLatch(1);
  final CountDownLatch latch=new CountDownLatch(1);
  final CountDownLatch doneLatch=new CountDownLatch(1);
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    final Subscriber<? super Integer> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      scheduled.countDown();
      try {
        try {
          latch.await();
        }
 catch (        InterruptedException e) {
        }
        subscriber.onComplete();
      }
 catch (      Throwable e) {
        subscriber.onError(e);
      }
 finally {
        doneLatch.countDown();
      }
    }
  }
).subscribeOn(Schedulers.computation()).subscribe(ts);
  scheduled.await();
  ts.dispose();
  latch.countDown();
  doneLatch.await();
  ts.assertNoErrors();
  ts.assertComplete();
}
