@Test public void testBackpressureReschedulesCorrectly() throws InterruptedException {
  final CountDownLatch latch=new CountDownLatch(10);
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>(new DefaultSubscriber<Integer>(){
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onNext(    Integer t){
      latch.countDown();
    }
  }
);
  ts.request(10);
  Flowable.range(1,10000000).subscribeOn(Schedulers.newThread()).take(20).subscribe(ts);
  latch.await();
  Thread t=ts.lastThread();
  System.out.println("First schedule: " + t);
  assertTrue(t.getName().startsWith("Rx"));
  ts.request(10);
  ts.awaitTerminalEvent();
  System.out.println("After reschedule: " + ts.lastThread());
  assertEquals(t,ts.lastThread());
}
