@Test public void mixedLong(){
  Observable.range(1,1024).concatMapMaybe(new Function<Integer,MaybeSource<Integer>>(){
    @Override public MaybeSource<Integer> apply(    Integer v) throws Exception {
      if (v % 2 == 0) {
        return Maybe.just(v).subscribeOn(Schedulers.computation());
      }
      return Maybe.<Integer>empty().subscribeOn(Schedulers.computation());
    }
  }
).test().awaitDone(5,TimeUnit.SECONDS).assertValueCount(512).assertNoErrors().assertComplete().assertOf(new Consumer<TestObserver<Integer>>(){
    @Override public void accept(    TestObserver<Integer> to) throws Exception {
      for (int i=0; i < 512; i++) {
        to.assertValueAt(i,(i + 1) * 2);
      }
    }
  }
);
}
