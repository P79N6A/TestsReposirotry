@Test public void collectAsync3Fused(){
  ExecutorService exec=Executors.newFixedThreadPool(3);
  Scheduler s=Schedulers.from(exec);
  try {
    Callable<List<Integer>> as=new Callable<List<Integer>>(){
      @Override public List<Integer> call() throws Exception {
        return new ArrayList<Integer>();
      }
    }
;
    TestSubscriber<List<Integer>> ts=new TestSubscriber<List<Integer>>();
    Flowable.range(1,100000).observeOn(s).parallel(3).runOn(s).collect(as,new BiConsumer<List<Integer>,Integer>(){
      @Override public void accept(      List<Integer> a,      Integer b) throws Exception {
        a.add(b);
      }
    }
).doOnNext(new Consumer<List<Integer>>(){
      @Override public void accept(      List<Integer> v) throws Exception {
        System.out.println(v.size());
      }
    }
).sequential().subscribe(ts);
    ts.awaitDone(5,TimeUnit.SECONDS);
    ts.assertValueCount(3).assertNoErrors().assertComplete();
    List<List<Integer>> list=ts.values();
    Assert.assertEquals(100000,list.get(0).size() + list.get(1).size() + list.get(2).size());
  }
  finally {
    exec.shutdown();
  }
}
