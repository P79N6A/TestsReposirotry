@Test public void doOnErrorThrows(){
  TestSubscriber<Integer> ts=Flowable.range(1,5).parallel(2).map(new Function<Integer,Integer>(){
    @Override public Integer apply(    Integer v) throws Exception {
      if (v == 3) {
        throw new TestException();
      }
      return v;
    }
  }
).doOnError(new Consumer<Throwable>(){
    @Override public void accept(    Throwable e) throws Exception {
      if (e instanceof TestException) {
        throw new IOException();
      }
    }
  }
).sequential().test().assertError(CompositeException.class).assertNotComplete();
  List<Throwable> errors=TestHelper.errorList(ts);
  TestHelper.assertError(errors,0,TestException.class);
  TestHelper.assertError(errors,1,IOException.class);
}
