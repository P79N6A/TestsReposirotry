@Test public void filterThrows() throws Exception {
  final boolean[] cancelled={false};
  Flowable.range(1,20).concatWith(Flowable.<Integer>never()).doOnCancel(new Action(){
    @Override public void run() throws Exception {
      cancelled[0]=true;
    }
  }
).parallel().runOn(Schedulers.computation()).filter(new Predicate<Integer>(){
    @Override public boolean test(    Integer v) throws Exception {
      if (v == 10) {
        throw new TestException();
      }
      return v % 2 == 0;
    }
  }
).sequential().test().awaitDone(5,TimeUnit.SECONDS).assertError(TestException.class).assertNotComplete();
  Thread.sleep(100);
  assertTrue(cancelled[0]);
}
