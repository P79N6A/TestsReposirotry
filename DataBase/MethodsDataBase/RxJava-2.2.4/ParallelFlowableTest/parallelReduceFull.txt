@Test public void parallelReduceFull(){
  int m=100000;
  for (int n=1; n <= m; n*=10) {
    for (int i=1; i <= Runtime.getRuntime().availableProcessors(); i++) {
      ExecutorService exec=Executors.newFixedThreadPool(i);
      Scheduler scheduler=Schedulers.from(exec);
      try {
        TestSubscriber<Long> ts=new TestSubscriber<Long>();
        Flowable.range(1,n).map(new Function<Integer,Long>(){
          @Override public Long apply(          Integer v) throws Exception {
            return (long)v;
          }
        }
).parallel(i).runOn(scheduler).reduce(new BiFunction<Long,Long,Long>(){
          @Override public Long apply(          Long a,          Long b) throws Exception {
            return a + b;
          }
        }
).subscribe(ts);
        ts.awaitDone(500,TimeUnit.SECONDS);
        long e=((long)n) * (1 + n) / 2;
        ts.assertResult(e);
      }
  finally {
        exec.shutdown();
      }
    }
  }
}
