@Test public void testFlatMapTransformsMaxConcurrentNormal(){
  final int m=2;
  final AtomicInteger subscriptionCount=new AtomicInteger();
  Flowable<Integer> onNext=composer(Flowable.fromIterable(Arrays.asList(1,2,3)).observeOn(Schedulers.computation()),subscriptionCount,m).subscribeOn(Schedulers.computation());
  Flowable<Integer> onComplete=composer(Flowable.fromIterable(Arrays.asList(4)),subscriptionCount,m).subscribeOn(Schedulers.computation());
  Flowable<Integer> onError=Flowable.fromIterable(Arrays.asList(5));
  Flowable<Integer> source=Flowable.fromIterable(Arrays.asList(10,20,30));
  Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  TestSubscriber<Object> ts=new TestSubscriber<Object>(subscriber);
  Function<Integer,Flowable<Integer>> just=just(onNext);
  Function<Throwable,Flowable<Integer>> just2=just(onError);
  Callable<Flowable<Integer>> just0=just0(onComplete);
  source.flatMap(just,just2,just0,m).subscribe(ts);
  ts.awaitTerminalEvent(1,TimeUnit.SECONDS);
  ts.assertNoErrors();
  ts.assertTerminated();
  verify(subscriber,times(3)).onNext(1);
  verify(subscriber,times(3)).onNext(2);
  verify(subscriber,times(3)).onNext(3);
  verify(subscriber).onNext(4);
  verify(subscriber).onComplete();
  verify(subscriber,never()).onNext(5);
  verify(subscriber,never()).onError(any(Throwable.class));
}
