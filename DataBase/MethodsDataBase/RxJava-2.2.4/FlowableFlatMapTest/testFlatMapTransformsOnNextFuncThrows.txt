@Test public void testFlatMapTransformsOnNextFuncThrows(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    Flowable<Integer> onComplete=Flowable.fromIterable(Arrays.asList(4));
    Flowable<Integer> onError=Flowable.fromIterable(Arrays.asList(5));
    Flowable<Integer> source=Flowable.fromIterable(Arrays.asList(10,20,30));
    Subscriber<Object> subscriber=TestHelper.mockSubscriber();
    source.flatMap(funcThrow(1,onError),just(onError),just0(onComplete)).subscribe(subscriber);
    verify(subscriber).onError(any(TestException.class));
    verify(subscriber,never()).onNext(any());
    verify(subscriber,never()).onComplete();
    TestHelper.assertUndeliverable(errors,0,TestException.class);
  }
  finally {
    RxJavaPlugins.reset();
  }
}
