@Test public void cancelDrainRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    for (int j=1; j < 50; j+=5) {
      List<Throwable> errors=TestHelper.trackPluginErrors();
      try {
        final PublishProcessor<Flowable<Integer>> pp=PublishProcessor.create();
        final TestSubscriber<Integer> ts=pp.flatMap(Functions.<Flowable<Integer>>identity()).test(0);
        final PublishProcessor<Integer> just=PublishProcessor.create();
        pp.onNext(just);
        Runnable r1=new Runnable(){
          @Override public void run(){
            ts.request(1);
            ts.cancel();
          }
        }
;
        Runnable r2=new Runnable(){
          @Override public void run(){
            just.onNext(1);
          }
        }
;
        TestHelper.race(r1,r2);
        assertTrue(errors.toString(),errors.isEmpty());
      }
  finally {
        RxJavaPlugins.reset();
      }
    }
  }
}
