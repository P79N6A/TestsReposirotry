@Test public void maybeDocRefersToMaybeTypes() throws Exception {
  List<RxMethod> list=BaseTypeParser.parse(MaybeNo2Dot0Since.findSource("Maybe"),"Maybe");
  assertFalse(list.isEmpty());
  StringBuilder e=new StringBuilder();
  for (  RxMethod m : list) {
    int jdx;
    if (m.javadoc != null) {
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("onNext",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Publisher") && !m.signature.contains("Flowable") && !m.signature.contains("Observable")&& !m.signature.contains("ObservableSource")) {
            e.append("java.lang.RuntimeException: Maybe doc mentions onNext but no Flowable/Observable in signature\r\n at io.reactivex.").append("Maybe (Maybe.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("Subscriber",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Publisher") && !m.signature.contains("Flowable") && !m.signature.contains("TestSubscriber")) {
            e.append("java.lang.RuntimeException: Maybe doc mentions Subscriber but not using Flowable\r\n at io.reactivex.").append("Maybe (Maybe.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf(" Subscription",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Publisher") && !m.signature.contains("Flowable")) {
            e.append("java.lang.RuntimeException: Maybe doc mentions Subscription but not using Flowable\r\n at io.reactivex.").append("Maybe (Maybe.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("Observer",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("ObservableSource") && !m.signature.contains("Observable") && !m.signature.contains("TestObserver")) {
            if (idx < 5 || !m.javadoc.substring(idx - 5,idx + 8).equals("MaybeObserver")) {
              e.append("java.lang.RuntimeException: Maybe doc mentions Observer but not using Observable\r\n at io.reactivex.").append("Maybe (Maybe.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
            }
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("Publisher",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Publisher")) {
            if (idx == 0 || !m.javadoc.substring(idx - 1,idx + 9).equals("(Publisher")) {
              e.append("java.lang.RuntimeException: Maybe doc mentions Publisher but not in the signature\r\n at io.reactivex.").append("Maybe (Maybe.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
            }
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("Flowable",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Flowable")) {
            e.append("java.lang.RuntimeException: Maybe doc mentions Flowable but not in the signature\r\n at io.reactivex.").append("Maybe (Maybe.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("Single",jdx);
        if (idx >= 0) {
          int j=m.javadoc.indexOf("#toSingle",jdx);
          int k=m.javadoc.indexOf("{@code Single",jdx);
          if (!m.signature.contains("Single") && (j + 3 != idx && k + 7 != idx)) {
            e.append("java.lang.RuntimeException: Maybe doc mentions Single but not in the signature\r\n at io.reactivex.").append("Maybe(Maybe.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("SingleSource",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("SingleSource")) {
            e.append("java.lang.RuntimeException: Maybe doc mentions SingleSource but not in the signature\r\n at io.reactivex.").append("Maybe (Maybe.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("Observable",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Observable")) {
            e.append("java.lang.RuntimeException: Maybe doc mentions Observable but not in the signature\r\n at io.reactivex.").append("Maybe (Maybe.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("ObservableSource",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("ObservableSource")) {
            e.append("java.lang.RuntimeException: Maybe doc mentions ObservableSource but not in the signature\r\n at io.reactivex.").append("Maybe (Maybe.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      aOrAn(e,m,"Maybe");
      missingClosingDD(e,m,"Maybe");
      backpressureMentionedWithoutAnnotation(e,m,"Maybe");
    }
  }
  if (e.length() != 0) {
    System.out.println(e);
    fail(e.toString());
  }
}
