@Test public void observableDocRefersToObservableTypes() throws Exception {
  List<RxMethod> list=BaseTypeParser.parse(MaybeNo2Dot0Since.findSource("Observable"),"Observable");
  assertFalse(list.isEmpty());
  StringBuilder e=new StringBuilder();
  for (  RxMethod m : list) {
    int jdx;
    if (m.javadoc != null) {
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("onSuccess",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Maybe") && !m.signature.contains("MaybeSource") && !m.signature.contains("Single")&& !m.signature.contains("SingleSource")) {
            e.append("java.lang.RuntimeException: Observable doc mentions onSuccess\r\n at io.reactivex.").append("Observable (Observable.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf(" Subscription",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Flowable") && !m.signature.contains("Publisher")) {
            e.append("java.lang.RuntimeException: Observable doc mentions Subscription but not using Flowable\r\n at io.reactivex.").append("Observable (Observable.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("Flowable",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Flowable")) {
            if (idx < 6 || !m.javadoc.substring(idx - 6,idx + 8).equals("@link Flowable")) {
              e.append("java.lang.RuntimeException: Observable doc mentions Flowable but not in the signature\r\n at io.reactivex.").append("Observable (Observable.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
            }
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("Publisher",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Publisher")) {
            e.append("java.lang.RuntimeException: Observable doc mentions Publisher but not in the signature\r\n at io.reactivex.").append("Observable (Observable.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("Subscriber",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Publisher") && !m.signature.contains("Flowable")) {
            e.append("java.lang.RuntimeException: Observable doc mentions Subscriber but not using Flowable\r\n at io.reactivex.").append("Observable (Observable.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      aOrAn(e,m,"Observable");
      missingClosingDD(e,m,"Observable");
      backpressureMentionedWithoutAnnotation(e,m,"Observable");
    }
  }
  if (e.length() != 0) {
    System.out.println(e);
    fail(e.toString());
  }
}
