@Test public void singleDocRefersToSingleTypes() throws Exception {
  List<RxMethod> list=BaseTypeParser.parse(MaybeNo2Dot0Since.findSource("Single"),"Single");
  assertFalse(list.isEmpty());
  StringBuilder e=new StringBuilder();
  for (  RxMethod m : list) {
    int jdx;
    if (m.javadoc != null) {
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("onNext",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Publisher") && !m.signature.contains("Flowable") && !m.signature.contains("Observable")&& !m.signature.contains("ObservableSource")) {
            e.append("java.lang.RuntimeException: Single doc mentions onNext but no Flowable/Observable in signature\r\n at io.reactivex.").append("Single (Single.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("Subscriber",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Publisher") && !m.signature.contains("Flowable") && !m.signature.contains("TestSubscriber")) {
            e.append("java.lang.RuntimeException: Single doc mentions Subscriber but not using Flowable\r\n at io.reactivex.").append("Single (Single.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf(" Subscription",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Flowable") && !m.signature.contains("Publisher")) {
            e.append("java.lang.RuntimeException: Single doc mentions Subscription but not using Flowable\r\n at io.reactivex.").append("Single (Single.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("Observer",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("ObservableSource") && !m.signature.contains("Observable") && !m.signature.contains("TestObserver")) {
            if (idx < 6 || !m.javadoc.substring(idx - 6,idx + 8).equals("SingleObserver")) {
              e.append("java.lang.RuntimeException: Single doc mentions Observer but not using Observable\r\n at io.reactivex.").append("Single (Single.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
            }
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf("Publisher",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Publisher")) {
            if (idx == 0 || !m.javadoc.substring(idx - 1,idx + 9).equals("(Publisher")) {
              e.append("java.lang.RuntimeException: Single doc mentions Publisher but not in the signature\r\n at io.reactivex.").append("Single (Single.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
            }
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf(" Flowable",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Flowable")) {
            e.append("java.lang.RuntimeException: Single doc mentions Flowable but not in the signature\r\n at io.reactivex.").append("Single (Single.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf(" Maybe",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Maybe")) {
            e.append("java.lang.RuntimeException: Single doc mentions Maybe but not in the signature\r\n at io.reactivex.").append("Single (Single.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf(" MaybeSource",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("MaybeSource")) {
            e.append("java.lang.RuntimeException: Single doc mentions SingleSource but not in the signature\r\n at io.reactivex.").append("Maybe (Maybe.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf(" Observable",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("Observable")) {
            e.append("java.lang.RuntimeException: Single doc mentions Observable but not in the signature\r\n at io.reactivex.").append("Single (Single.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      jdx=0;
      for (; ; ) {
        int idx=m.javadoc.indexOf(" ObservableSource",jdx);
        if (idx >= 0) {
          if (!m.signature.contains("ObservableSource")) {
            e.append("java.lang.RuntimeException: Single doc mentions ObservableSource but not in the signature\r\n at io.reactivex.").append("Single (Single.java:").append(m.javadocLine + lineNumber(m.javadoc,idx) - 1).append(")\r\n\r\n");
          }
          jdx=idx + 6;
        }
 else {
          break;
        }
      }
      aOrAn(e,m,"Single");
      missingClosingDD(e,m,"Single");
      backpressureMentionedWithoutAnnotation(e,m,"Single");
    }
  }
  if (e.length() != 0) {
    System.out.println(e);
    fail(e.toString());
  }
}
