@Test public void testResumeNext(){
  Disposable upstream=mock(Disposable.class);
  TestObservable f=new TestObservable(upstream,"one","fail","two","three");
  Observable<String> w=Observable.unsafeCreate(f);
  Observable<String> resume=Observable.just("twoResume","threeResume");
  Observable<String> observable=w.onErrorResumeNext(resume);
  Observer<String> observer=TestHelper.mockObserver();
  observable.subscribe(observer);
  try {
    f.t.join();
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
  verify(observer,Mockito.never()).onError(any(Throwable.class));
  verify(observer,times(1)).onComplete();
  verify(observer,times(1)).onNext("one");
  verify(observer,Mockito.never()).onNext("two");
  verify(observer,Mockito.never()).onNext("three");
  verify(observer,times(1)).onNext("twoResume");
  verify(observer,times(1)).onNext("threeResume");
}
