@Test public void testMapResumeAsyncNext(){
  Disposable sr=mock(Disposable.class);
  Observable<String> w=Observable.just("one","fail","two","three","fail");
  TestObservable f=new TestObservable(sr,"twoResume","threeResume");
  Observable<String> resume=Observable.unsafeCreate(f);
  w=w.map(new Function<String,String>(){
    @Override public String apply(    String s){
      if ("fail".equals(s)) {
        throw new RuntimeException("Forced Failure");
      }
      System.out.println("BadMapper:" + s);
      return s;
    }
  }
);
  Observable<String> observable=w.onErrorResumeNext(resume);
  Observer<String> observer=TestHelper.mockObserver();
  observable.subscribe(observer);
  try {
    f.t.join();
  }
 catch (  InterruptedException e) {
    fail(e.getMessage());
  }
  verify(observer,Mockito.never()).onError(any(Throwable.class));
  verify(observer,times(1)).onComplete();
  verify(observer,times(1)).onNext("one");
  verify(observer,Mockito.never()).onNext("two");
  verify(observer,Mockito.never()).onNext("three");
  verify(observer,times(1)).onNext("twoResume");
  verify(observer,times(1)).onNext("threeResume");
}
