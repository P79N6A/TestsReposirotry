@Test public void testPrefetchIsBounded(){
  final AtomicInteger count=new AtomicInteger();
  TestSubscriber<Object> ts=TestSubscriber.create(0);
  Flowable.just(1).concatMapEager(new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer t){
      return Flowable.range(1,Flowable.bufferSize() * 2).doOnNext(new Consumer<Integer>(){
        @Override public void accept(        Integer t){
          count.getAndIncrement();
        }
      }
).hide();
    }
  }
).subscribe(ts);
  ts.assertNoErrors();
  ts.assertNoValues();
  ts.assertNotComplete();
  Assert.assertEquals(Flowable.bufferSize(),count.get());
}
