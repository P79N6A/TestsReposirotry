@Test public void innerOuterRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final PublishProcessor<Integer> pp1=PublishProcessor.create();
      final PublishProcessor<Integer> pp2=PublishProcessor.create();
      TestSubscriber<Integer> ts=pp1.concatMapEager(new Function<Integer,Flowable<Integer>>(){
        @Override public Flowable<Integer> apply(        Integer v) throws Exception {
          return pp2;
        }
      }
).test();
      final TestException ex1=new TestException();
      final TestException ex2=new TestException();
      pp1.onNext(1);
      Runnable r1=new Runnable(){
        @Override public void run(){
          pp1.onError(ex1);
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          pp2.onError(ex2);
        }
      }
;
      TestHelper.race(r1,r2);
      ts.assertSubscribed().assertNoValues().assertNotComplete();
      Throwable ex=ts.errors().get(0);
      if (ex instanceof CompositeException) {
        List<Throwable> es=TestHelper.errorList(ts);
        TestHelper.assertError(es,0,TestException.class);
        TestHelper.assertError(es,1,TestException.class);
      }
 else {
        ts.assertError(TestException.class);
        if (!errors.isEmpty()) {
          TestHelper.assertUndeliverable(errors,0,TestException.class);
        }
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
