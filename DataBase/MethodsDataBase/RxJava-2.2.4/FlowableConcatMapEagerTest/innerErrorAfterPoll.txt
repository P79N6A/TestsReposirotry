@Test public void innerErrorAfterPoll(){
  final UnicastProcessor<Integer> us=UnicastProcessor.create();
  us.onNext(1);
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>(){
    @Override public void onNext(    Integer t){
      super.onNext(t);
      us.onError(new TestException());
    }
  }
;
  Flowable.<Integer>just(1).hide().concatMapEager(new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer v) throws Exception {
      return us;
    }
  }
,1,128).subscribe(ts);
  ts.assertFailure(TestException.class,1);
}
