@Test public void testReentrantWork(){
  final PublishProcessor<Integer> processor=PublishProcessor.create();
  final AtomicBoolean once=new AtomicBoolean();
  processor.concatMapEager(new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer t){
      return Flowable.just(t);
    }
  }
).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer t){
      if (once.compareAndSet(false,true)) {
        processor.onNext(2);
      }
    }
  }
).subscribe(ts);
  processor.onNext(1);
  ts.assertNoErrors();
  ts.assertNotComplete();
  ts.assertValues(1,2);
}
