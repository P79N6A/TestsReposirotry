@Test public void bufferWithStartEndEndThrows(){
  PublishProcessor<Integer> start=PublishProcessor.create();
  Function<Integer,Flowable<Integer>> end=new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer t1){
      return Flowable.error(new TestException());
    }
  }
;
  PublishProcessor<Integer> source=PublishProcessor.create();
  Flowable<List<Integer>> result=source.buffer(start,end);
  Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  result.subscribe(subscriber);
  start.onNext(1);
  source.onNext(1);
  source.onNext(2);
  verify(subscriber,never()).onNext(any());
  verify(subscriber,never()).onComplete();
  verify(subscriber).onError(any(TestException.class));
}
