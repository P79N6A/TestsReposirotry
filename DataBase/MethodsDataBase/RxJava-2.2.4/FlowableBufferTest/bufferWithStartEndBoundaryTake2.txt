@Test(timeout=2000) public void bufferWithStartEndBoundaryTake2(){
  Flowable<Long> start=Flowable.interval(61,61,TimeUnit.MILLISECONDS,scheduler);
  Function<Long,Flowable<Long>> end=new Function<Long,Flowable<Long>>(){
    @Override public Flowable<Long> apply(    Long t1){
      return Flowable.interval(100,100,TimeUnit.MILLISECONDS,scheduler);
    }
  }
;
  Flowable<Long> source=Flowable.interval(40,40,TimeUnit.MILLISECONDS,scheduler);
  Flowable<List<Long>> result=source.buffer(start,end).take(2);
  Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  InOrder inOrder=inOrder(subscriber);
  result.doOnNext(new Consumer<List<Long>>(){
    @Override public void accept(    List<Long> pv){
      System.out.println(pv);
    }
  }
).subscribe(subscriber);
  scheduler.advanceTimeBy(5,TimeUnit.SECONDS);
  inOrder.verify(subscriber).onNext(Arrays.asList(1L,2L,3L));
  inOrder.verify(subscriber).onNext(Arrays.asList(3L,4L));
  inOrder.verify(subscriber).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
}
