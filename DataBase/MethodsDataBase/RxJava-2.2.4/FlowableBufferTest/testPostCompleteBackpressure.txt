@SuppressWarnings("unchecked") @Test public void testPostCompleteBackpressure(){
  Flowable<List<Integer>> source=Flowable.range(1,10).buffer(3,1);
  TestSubscriber<List<Integer>> ts=TestSubscriber.create(0L);
  source.subscribe(ts);
  ts.assertNoValues();
  ts.assertNotComplete();
  ts.assertNoErrors();
  ts.request(7);
  ts.assertValues(Arrays.asList(1,2,3),Arrays.asList(2,3,4),Arrays.asList(3,4,5),Arrays.asList(4,5,6),Arrays.asList(5,6,7),Arrays.asList(6,7,8),Arrays.asList(7,8,9));
  ts.assertNotComplete();
  ts.assertNoErrors();
  ts.request(1);
  ts.assertValues(Arrays.asList(1,2,3),Arrays.asList(2,3,4),Arrays.asList(3,4,5),Arrays.asList(4,5,6),Arrays.asList(5,6,7),Arrays.asList(6,7,8),Arrays.asList(7,8,9),Arrays.asList(8,9,10));
  ts.assertNotComplete();
  ts.assertNoErrors();
  ts.request(1);
  ts.assertValues(Arrays.asList(1,2,3),Arrays.asList(2,3,4),Arrays.asList(3,4,5),Arrays.asList(4,5,6),Arrays.asList(5,6,7),Arrays.asList(6,7,8),Arrays.asList(7,8,9),Arrays.asList(8,9,10),Arrays.asList(9,10));
  ts.assertNotComplete();
  ts.assertNoErrors();
  ts.request(1);
  ts.assertValues(Arrays.asList(1,2,3),Arrays.asList(2,3,4),Arrays.asList(3,4,5),Arrays.asList(4,5,6),Arrays.asList(5,6,7),Arrays.asList(6,7,8),Arrays.asList(7,8,9),Arrays.asList(8,9,10),Arrays.asList(9,10),Arrays.asList(10));
  ts.assertComplete();
  ts.assertNoErrors();
}
