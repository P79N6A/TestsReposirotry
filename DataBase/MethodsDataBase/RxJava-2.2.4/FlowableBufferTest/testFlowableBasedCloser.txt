@Test public void testFlowableBasedCloser(){
  Flowable<String> source=Flowable.unsafeCreate(new Publisher<String>(){
    @Override public void subscribe(    Subscriber<? super String> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      push(subscriber,"one",10);
      push(subscriber,"two",60);
      push(subscriber,"three",110);
      push(subscriber,"four",160);
      push(subscriber,"five",210);
      complete(subscriber,250);
    }
  }
);
  Callable<Flowable<Object>> closer=new Callable<Flowable<Object>>(){
    @Override public Flowable<Object> call(){
      return Flowable.unsafeCreate(new Publisher<Object>(){
        @Override public void subscribe(        Subscriber<? super Object> subscriber){
          subscriber.onSubscribe(new BooleanSubscription());
          push(subscriber,new Object(),100);
          push(subscriber,new Object(),200);
          push(subscriber,new Object(),300);
          complete(subscriber,301);
        }
      }
);
    }
  }
;
  Flowable<List<String>> buffered=source.buffer(closer);
  buffered.subscribe(subscriber);
  InOrder inOrder=Mockito.inOrder(subscriber);
  scheduler.advanceTimeTo(500,TimeUnit.MILLISECONDS);
  inOrder.verify(subscriber,Mockito.times(1)).onNext(list("one","two"));
  inOrder.verify(subscriber,Mockito.times(1)).onNext(list("three","four"));
  inOrder.verify(subscriber,Mockito.times(1)).onNext(list("five"));
  inOrder.verify(subscriber,Mockito.never()).onNext(Mockito.<String>anyList());
  inOrder.verify(subscriber,Mockito.never()).onError(Mockito.any(Throwable.class));
  inOrder.verify(subscriber,Mockito.times(1)).onComplete();
}
