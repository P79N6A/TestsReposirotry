@Test public void testProducerRequestOverflowThroughBufferWithSize1(){
  TestSubscriber<List<Integer>> ts=new TestSubscriber<List<Integer>>(Long.MAX_VALUE >> 1);
  final AtomicLong requested=new AtomicLong();
  Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> s){
      s.onSubscribe(new Subscription(){
        @Override public void request(        long n){
          requested.set(n);
        }
        @Override public void cancel(){
        }
      }
);
    }
  }
).buffer(3,3).subscribe(ts);
  assertEquals(Long.MAX_VALUE,requested.get());
}
