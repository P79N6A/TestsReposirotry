@Test public void testProducerRequestOverflowThroughBufferWithSize3(){
  final AtomicLong requested=new AtomicLong();
  Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    final Subscriber<? super Integer> s){
      s.onSubscribe(new Subscription(){
        AtomicBoolean once=new AtomicBoolean();
        @Override public void request(        long n){
          requested.set(n);
          if (once.compareAndSet(false,true)) {
            s.onNext(1);
            s.onNext(2);
            s.onNext(3);
          }
        }
        @Override public void cancel(){
        }
      }
);
    }
  }
).buffer(3,2).subscribe(new DefaultSubscriber<List<Integer>>(){
    @Override public void onStart(){
      request(Long.MAX_VALUE / 2 - 4);
    }
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onNext(    List<Integer> t){
      request(Long.MAX_VALUE / 2);
    }
  }
);
  assertEquals(Long.MAX_VALUE - 1,requested.get());
}
