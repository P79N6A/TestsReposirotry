@Test public void test1ToNSources(){
  int n=30;
  Function<Object[],List<Object>> func=new Function<Object[],List<Object>>(){
    @Override public List<Object> apply(    Object[] args){
      return Arrays.asList(args);
    }
  }
;
  for (int i=1; i <= n; i++) {
    System.out.println("test1ToNSources: " + i + " sources");
    List<Flowable<Integer>> sources=new ArrayList<Flowable<Integer>>();
    List<Object> values=new ArrayList<Object>();
    for (int j=0; j < i; j++) {
      sources.add(Flowable.just(j));
      values.add(j);
    }
    Flowable<List<Object>> result=Flowable.combineLatest(sources,func);
    Subscriber<List<Object>> subscriber=TestHelper.mockSubscriber();
    result.subscribe(subscriber);
    verify(subscriber).onNext(values);
    verify(subscriber).onComplete();
    verify(subscriber,never()).onError(any(Throwable.class));
  }
}
