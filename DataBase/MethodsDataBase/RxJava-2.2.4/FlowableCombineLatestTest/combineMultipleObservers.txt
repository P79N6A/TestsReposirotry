@Test public void combineMultipleObservers(){
  PublishProcessor<Integer> a=PublishProcessor.create();
  PublishProcessor<Integer> b=PublishProcessor.create();
  Flowable<Integer> source=Flowable.combineLatest(a,b,or);
  Subscriber<Object> subscriber1=TestHelper.mockSubscriber();
  Subscriber<Object> subscriber2=TestHelper.mockSubscriber();
  InOrder inOrder1=inOrder(subscriber1);
  InOrder inOrder2=inOrder(subscriber2);
  source.subscribe(subscriber1);
  source.subscribe(subscriber2);
  a.onNext(1);
  inOrder1.verify(subscriber1,never()).onNext(any());
  inOrder2.verify(subscriber2,never()).onNext(any());
  a.onNext(2);
  inOrder1.verify(subscriber1,never()).onNext(any());
  inOrder2.verify(subscriber2,never()).onNext(any());
  b.onNext(0x10);
  inOrder1.verify(subscriber1,times(1)).onNext(0x12);
  inOrder2.verify(subscriber2,times(1)).onNext(0x12);
  b.onNext(0x20);
  inOrder1.verify(subscriber1,times(1)).onNext(0x22);
  inOrder2.verify(subscriber2,times(1)).onNext(0x22);
  b.onComplete();
  inOrder1.verify(subscriber1,never()).onComplete();
  inOrder2.verify(subscriber2,never()).onComplete();
  a.onComplete();
  inOrder1.verify(subscriber1,times(1)).onComplete();
  inOrder2.verify(subscriber2,times(1)).onComplete();
  a.onNext(3);
  b.onNext(0x30);
  a.onComplete();
  b.onComplete();
  inOrder1.verifyNoMoreInteractions();
  inOrder2.verifyNoMoreInteractions();
  verify(subscriber1,never()).onError(any(Throwable.class));
  verify(subscriber2,never()).onError(any(Throwable.class));
}
