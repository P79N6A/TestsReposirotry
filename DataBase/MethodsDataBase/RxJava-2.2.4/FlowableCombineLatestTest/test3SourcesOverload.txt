@Test public void test3SourcesOverload(){
  Flowable<Integer> s1=Flowable.just(1);
  Flowable<Integer> s2=Flowable.just(2);
  Flowable<Integer> s3=Flowable.just(3);
  Flowable<List<Integer>> result=Flowable.combineLatest(s1,s2,s3,new Function3<Integer,Integer,Integer,List<Integer>>(){
    @Override public List<Integer> apply(    Integer t1,    Integer t2,    Integer t3){
      return Arrays.asList(t1,t2,t3);
    }
  }
);
  Subscriber<Object> subscriber=TestHelper.mockSubscriber();
  result.subscribe(subscriber);
  verify(subscriber).onNext(Arrays.asList(1,2,3));
  verify(subscriber).onComplete();
  verify(subscriber,never()).onError(any(Throwable.class));
}
