@Test public void testCombineMany(){
  int n=Flowable.bufferSize() * 3;
  List<Flowable<Integer>> sources=new ArrayList<Flowable<Integer>>();
  StringBuilder expected=new StringBuilder(n * 2);
  for (int i=0; i < n; i++) {
    sources.add(Flowable.just(i));
    expected.append(i);
  }
  TestSubscriber<String> ts=TestSubscriber.create();
  Flowable.combineLatest(sources,new Function<Object[],String>(){
    @Override public String apply(    Object[] args){
      StringBuilder b=new StringBuilder();
      for (      Object o : args) {
        b.append(o);
      }
      return b.toString();
    }
  }
).subscribe(ts);
  ts.assertNoErrors();
  ts.assertValue(expected.toString());
  ts.assertComplete();
}
