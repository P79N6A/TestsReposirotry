@Test public void cancelWhileSubscribing(){
  final TestSubscriber<Object> ts=new TestSubscriber<Object>();
  Flowable.combineLatest(Flowable.just(1).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer v) throws Exception {
      ts.cancel();
    }
  }
),Flowable.never(),new BiFunction<Object,Object,Object>(){
    @Override public Object apply(    Object a,    Object b) throws Exception {
      return a;
    }
  }
).subscribe(ts);
}
