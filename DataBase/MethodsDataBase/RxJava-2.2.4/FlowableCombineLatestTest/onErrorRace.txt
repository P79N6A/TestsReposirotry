@Test public void onErrorRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      final PublishProcessor<Integer> pp1=PublishProcessor.create();
      final PublishProcessor<Integer> pp2=PublishProcessor.create();
      TestSubscriber<Integer> ts=Flowable.combineLatest(pp1,pp2,new BiFunction<Integer,Integer,Integer>(){
        @Override public Integer apply(        Integer a,        Integer b) throws Exception {
          return a;
        }
      }
).test();
      final TestException ex1=new TestException();
      final TestException ex2=new TestException();
      Runnable r1=new Runnable(){
        @Override public void run(){
          pp1.onError(ex1);
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          pp2.onError(ex2);
        }
      }
;
      TestHelper.race(r1,r2);
      if (ts.errorCount() != 0) {
        if (ts.errors().get(0) instanceof CompositeException) {
          ts.assertSubscribed().assertNotComplete().assertNoValues();
          for (          Throwable e : TestHelper.errorList(ts)) {
            assertTrue(e.toString(),e instanceof TestException);
          }
        }
 else {
          ts.assertFailure(TestException.class);
        }
      }
      for (      Throwable e : errors) {
        assertTrue(e.toString(),e.getCause() instanceof TestException);
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
