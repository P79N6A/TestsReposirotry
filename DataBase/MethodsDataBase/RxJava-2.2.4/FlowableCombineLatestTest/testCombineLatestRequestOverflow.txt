@Test(timeout=10000) public void testCombineLatestRequestOverflow() throws InterruptedException {
  @SuppressWarnings("unchecked") List<Flowable<Integer>> sources=Arrays.asList(Flowable.fromArray(1,2,3,4),Flowable.fromArray(5,6,7,8));
  Flowable<Integer> f=Flowable.combineLatest(sources,new Function<Object[],Integer>(){
    @Override public Integer apply(    Object[] args){
      return (Integer)args[0];
    }
  }
);
  final CountDownLatch latch=new CountDownLatch(4);
  f.subscribeOn(Schedulers.computation()).subscribe(new DefaultSubscriber<Integer>(){
    @Override public void onStart(){
      request(2);
    }
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
      throw new RuntimeException(e);
    }
    @Override public void onNext(    Integer t){
      latch.countDown();
      request(Long.MAX_VALUE - 1);
    }
  }
);
  assertTrue(latch.await(10,TimeUnit.SECONDS));
}
