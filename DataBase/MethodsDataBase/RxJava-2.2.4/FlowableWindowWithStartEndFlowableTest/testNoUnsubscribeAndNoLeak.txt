@Test public void testNoUnsubscribeAndNoLeak(){
  PublishProcessor<Integer> source=PublishProcessor.create();
  PublishProcessor<Integer> open=PublishProcessor.create();
  final PublishProcessor<Integer> close=PublishProcessor.create();
  TestSubscriber<Flowable<Integer>> ts=new TestSubscriber<Flowable<Integer>>();
  source.window(open,new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer t){
      return close;
    }
  }
).subscribe(ts);
  open.onNext(1);
  source.onNext(1);
  assertTrue(open.hasSubscribers());
  assertTrue(close.hasSubscribers());
  close.onNext(1);
  assertFalse(close.hasSubscribers());
  source.onComplete();
  ts.assertComplete();
  ts.assertNoErrors();
  ts.assertValueCount(1);
  assertFalse(ts.isCancelled());
  assertFalse(open.hasSubscribers());
  assertFalse(close.hasSubscribers());
}
