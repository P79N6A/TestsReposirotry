@Test public void endError(){
  PublishProcessor<Integer> source=PublishProcessor.create();
  PublishProcessor<Integer> start=PublishProcessor.create();
  final PublishProcessor<Integer> end=PublishProcessor.create();
  TestSubscriber<Integer> ts=source.window(start,new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer v) throws Exception {
      return end;
    }
  }
).flatMap(Functions.<Flowable<Integer>>identity()).test();
  start.onNext(1);
  end.onError(new TestException());
  ts.assertFailure(TestException.class);
  assertFalse("Source has observers!",source.hasSubscribers());
  assertFalse("Start has observers!",start.hasSubscribers());
  assertFalse("End has observers!",end.hasSubscribers());
}
