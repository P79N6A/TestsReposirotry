@Test public void testFlowableBasedOpenerAndCloser(){
  final List<String> list=new ArrayList<String>();
  final List<List<String>> lists=new ArrayList<List<String>>();
  Flowable<String> source=Flowable.unsafeCreate(new Publisher<String>(){
    @Override public void subscribe(    Subscriber<? super String> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      push(subscriber,"one",10);
      push(subscriber,"two",60);
      push(subscriber,"three",110);
      push(subscriber,"four",160);
      push(subscriber,"five",210);
      complete(subscriber,500);
    }
  }
);
  Flowable<Object> openings=Flowable.unsafeCreate(new Publisher<Object>(){
    @Override public void subscribe(    Subscriber<? super Object> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      push(subscriber,new Object(),50);
      push(subscriber,new Object(),200);
      complete(subscriber,250);
    }
  }
);
  Function<Object,Flowable<Object>> closer=new Function<Object,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Object opening){
      return Flowable.unsafeCreate(new Publisher<Object>(){
        @Override public void subscribe(        Subscriber<? super Object> subscriber){
          subscriber.onSubscribe(new BooleanSubscription());
          push(subscriber,new Object(),100);
          complete(subscriber,101);
        }
      }
);
    }
  }
;
  Flowable<Flowable<String>> windowed=source.window(openings,closer);
  windowed.subscribe(observeWindow(list,lists));
  scheduler.advanceTimeTo(500,TimeUnit.MILLISECONDS);
  assertEquals(2,lists.size());
  assertEquals(lists.get(0),list("two","three"));
  assertEquals(lists.get(1),list("five"));
}
