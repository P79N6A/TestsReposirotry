@Test public void testZipIterableHasNextThrows(){
  PublishSubject<String> r1=PublishSubject.create();
  Observer<String> o=TestHelper.mockObserver();
  InOrder io=inOrder(o);
  Iterable<String> r2=new Iterable<String>(){
    @Override public Iterator<String> iterator(){
      return new Iterator<String>(){
        int count;
        @Override public boolean hasNext(){
          if (count == 0) {
            return true;
          }
          throw new TestException();
        }
        @Override public String next(){
          count++;
          return "1";
        }
        @Override public void remove(){
          throw new UnsupportedOperationException("Not supported yet.");
        }
      }
;
    }
  }
;
  r1.zipWith(r2,zipr2).subscribe(o);
  r1.onNext("one-");
  r1.onError(new TestException());
  io.verify(o).onNext("one-1");
  io.verify(o).onError(any(TestException.class));
  verify(o,never()).onComplete();
}
