@Test public void testTakeUntilWithPublishedStreamUsingSelector(){
  final AtomicInteger emitted=new AtomicInteger();
  Observable<Integer> xs=Observable.range(0,Flowable.bufferSize() * 2).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer t1){
      emitted.incrementAndGet();
    }
  }
);
  TestObserver<Integer> to=new TestObserver<Integer>();
  xs.publish(new Function<Observable<Integer>,Observable<Integer>>(){
    @Override public Observable<Integer> apply(    Observable<Integer> xs){
      return xs.takeUntil(xs.skipWhile(new Predicate<Integer>(){
        @Override public boolean test(        Integer i){
          return i <= 3;
        }
      }
));
    }
  }
).subscribe(to);
  to.awaitTerminalEvent();
  to.assertNoErrors();
  to.assertValues(0,1,2,3);
  assertEquals(5,emitted.get());
  System.out.println(to.values());
}
