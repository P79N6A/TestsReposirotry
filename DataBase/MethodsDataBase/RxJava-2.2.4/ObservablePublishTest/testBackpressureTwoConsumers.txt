@Test(timeout=10000) public void testBackpressureTwoConsumers(){
  final AtomicInteger sourceEmission=new AtomicInteger();
  final AtomicBoolean sourceUnsubscribed=new AtomicBoolean();
  final Observable<Integer> source=Observable.range(1,100).doOnNext(new Consumer<Integer>(){
    @Override public void accept(    Integer t1){
      sourceEmission.incrementAndGet();
    }
  }
).doOnDispose(new Action(){
    @Override public void run(){
      sourceUnsubscribed.set(true);
    }
  }
).share();
  ;
  final AtomicBoolean child1Unsubscribed=new AtomicBoolean();
  final AtomicBoolean child2Unsubscribed=new AtomicBoolean();
  final TestObserver<Integer> to2=new TestObserver<Integer>();
  final TestObserver<Integer> to1=new TestObserver<Integer>(){
    @Override public void onNext(    Integer t){
      if (valueCount() == 2) {
        source.doOnDispose(new Action(){
          @Override public void run(){
            child2Unsubscribed.set(true);
          }
        }
).take(5).subscribe(to2);
      }
      super.onNext(t);
    }
  }
;
  source.doOnDispose(new Action(){
    @Override public void run(){
      child1Unsubscribed.set(true);
    }
  }
).take(5).subscribe(to1);
  to1.awaitTerminalEvent();
  to2.awaitTerminalEvent();
  to1.assertNoErrors();
  to2.assertNoErrors();
  assertTrue(sourceUnsubscribed.get());
  assertTrue(child1Unsubscribed.get());
  assertTrue(child2Unsubscribed.get());
  to1.assertValues(1,2,3,4,5);
  to2.assertValues(4,5,6,7,8);
  assertEquals(8,sourceEmission.get());
}
