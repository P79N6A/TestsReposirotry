@Test public final void testRecursiveSchedulerInObservable(){
  Flowable<Integer> obs=Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    final Subscriber<? super Integer> subscriber){
      final Scheduler.Worker inner=getScheduler().createWorker();
      AsyncSubscription as=new AsyncSubscription();
      subscriber.onSubscribe(as);
      as.setResource(inner);
      inner.schedule(new Runnable(){
        int i;
        @Override public void run(){
          if (i > 42) {
            try {
              subscriber.onComplete();
            }
  finally {
              inner.dispose();
            }
            return;
          }
          subscriber.onNext(i++);
          inner.schedule(this);
        }
      }
);
    }
  }
);
  final AtomicInteger lastValue=new AtomicInteger();
  obs.blockingForEach(new Consumer<Integer>(){
    @Override public void accept(    Integer v){
      System.out.println("Value: " + v);
      lastValue.set(v);
    }
  }
);
  assertEquals(42,lastValue.get());
}
