@Test public final void testConcurrentOnNextFailsValidation() throws InterruptedException {
  final int count=10;
  final CountDownLatch latch=new CountDownLatch(count);
  Flowable<String> f=Flowable.unsafeCreate(new Publisher<String>(){
    @Override public void subscribe(    final Subscriber<? super String> subscriber){
      subscriber.onSubscribe(new BooleanSubscription());
      for (int i=0; i < count; i++) {
        final int v=i;
        new Thread(new Runnable(){
          @Override public void run(){
            subscriber.onNext("v: " + v);
            latch.countDown();
          }
        }
).start();
      }
    }
  }
);
  ConcurrentObserverValidator<String> observer=new ConcurrentObserverValidator<String>();
  f.subscribe(observer);
  if (!observer.completed.await(3000,TimeUnit.MILLISECONDS)) {
    fail("timed out");
  }
  if (observer.error.get() == null) {
    fail("We expected error messages due to concurrency");
  }
}
