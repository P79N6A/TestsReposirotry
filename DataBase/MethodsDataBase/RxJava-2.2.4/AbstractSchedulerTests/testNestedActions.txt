@Test public void testNestedActions() throws InterruptedException {
  Scheduler scheduler=getScheduler();
  final Scheduler.Worker inner=scheduler.createWorker();
  try {
    final CountDownLatch latch=new CountDownLatch(1);
    final Runnable firstStepStart=mock(Runnable.class);
    final Runnable firstStepEnd=mock(Runnable.class);
    final Runnable secondStepStart=mock(Runnable.class);
    final Runnable secondStepEnd=mock(Runnable.class);
    final Runnable thirdStepStart=mock(Runnable.class);
    final Runnable thirdStepEnd=mock(Runnable.class);
    final Runnable firstAction=new Runnable(){
      @Override public void run(){
        firstStepStart.run();
        firstStepEnd.run();
        latch.countDown();
      }
    }
;
    final Runnable secondAction=new Runnable(){
      @Override public void run(){
        secondStepStart.run();
        inner.schedule(firstAction);
        secondStepEnd.run();
      }
    }
;
    final Runnable thirdAction=new Runnable(){
      @Override public void run(){
        thirdStepStart.run();
        inner.schedule(secondAction);
        thirdStepEnd.run();
      }
    }
;
    InOrder inOrder=inOrder(firstStepStart,firstStepEnd,secondStepStart,secondStepEnd,thirdStepStart,thirdStepEnd);
    inner.schedule(thirdAction);
    latch.await();
    inOrder.verify(thirdStepStart,times(1)).run();
    inOrder.verify(thirdStepEnd,times(1)).run();
    inOrder.verify(secondStepStart,times(1)).run();
    inOrder.verify(secondStepEnd,times(1)).run();
    inOrder.verify(firstStepStart,times(1)).run();
    inOrder.verify(firstStepEnd,times(1)).run();
  }
  finally {
    inner.dispose();
  }
}
