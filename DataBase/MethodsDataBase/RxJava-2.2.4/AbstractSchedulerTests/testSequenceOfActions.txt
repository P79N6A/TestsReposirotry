/** 
 * The order of execution is nondeterministic.
 * @throws InterruptedException if the await is interrupted
 */
@SuppressWarnings("rawtypes") @Test public final void testSequenceOfActions() throws InterruptedException {
  final Scheduler scheduler=getScheduler();
  final Scheduler.Worker inner=scheduler.createWorker();
  try {
    final CountDownLatch latch=new CountDownLatch(2);
    final Runnable first=mock(Runnable.class);
    final Runnable second=mock(Runnable.class);
    doAnswer(new Answer(){
      @Override public Object answer(      InvocationOnMock invocation) throws Throwable {
        try {
          return invocation.getMock();
        }
  finally {
          latch.countDown();
        }
      }
    }
).when(first).run();
    doAnswer(new Answer(){
      @Override public Object answer(      InvocationOnMock invocation) throws Throwable {
        try {
          return invocation.getMock();
        }
  finally {
          latch.countDown();
        }
      }
    }
).when(second).run();
    inner.schedule(first);
    inner.schedule(second);
    latch.await();
    verify(first,times(1)).run();
    verify(second,times(1)).run();
  }
  finally {
    inner.dispose();
  }
}
