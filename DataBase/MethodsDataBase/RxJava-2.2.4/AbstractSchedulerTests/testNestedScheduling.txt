@Test public final void testNestedScheduling(){
  Flowable<Integer> ids=Flowable.fromIterable(Arrays.asList(1,2)).subscribeOn(getScheduler());
  Flowable<String> m=ids.flatMap(new Function<Integer,Flowable<String>>(){
    @Override public Flowable<String> apply(    Integer id){
      return Flowable.fromIterable(Arrays.asList("a-" + id,"b-" + id)).subscribeOn(getScheduler()).map(new Function<String,String>(){
        @Override public String apply(        String s){
          return "names=>" + s;
        }
      }
);
    }
  }
);
  List<String> strings=m.toList().blockingGet();
  assertEquals(4,strings.size());
  assertTrue(strings.contains("names=>a-1"));
  assertTrue(strings.contains("names=>a-2"));
  assertTrue(strings.contains("names=>b-1"));
  assertTrue(strings.contains("names=>b-2"));
}
