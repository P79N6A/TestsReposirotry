@Test public void testNestedTrampolineWithUnsubscribe(){
  final ArrayList<String> workDone=new ArrayList<String>();
  final CompositeDisposable workers=new CompositeDisposable();
  Worker worker=Schedulers.trampoline().createWorker();
  try {
    workers.add(worker);
    worker.schedule(new Runnable(){
      @Override public void run(){
        workers.add(doWorkOnNewTrampoline("A",workDone));
      }
    }
);
    final Worker worker2=Schedulers.trampoline().createWorker();
    workers.add(worker2);
    worker2.schedule(new Runnable(){
      @Override public void run(){
        workers.add(doWorkOnNewTrampoline("B",workDone));
        worker2.dispose();
      }
    }
);
    assertEquals(6,workDone.size());
    assertEquals(Arrays.asList("A.1","A.B.1","A.B.2","B.1","B.B.1","B.B.2"),workDone);
  }
  finally {
    workers.dispose();
  }
}
