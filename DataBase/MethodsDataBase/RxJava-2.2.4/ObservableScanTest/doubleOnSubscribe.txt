@Test public void doubleOnSubscribe(){
  TestHelper.checkDoubleOnSubscribeObservable(new Function<Observable<Object>,ObservableSource<Object>>(){
    @Override public ObservableSource<Object> apply(    Observable<Object> o) throws Exception {
      return o.scan(new BiFunction<Object,Object,Object>(){
        @Override public Object apply(        Object a,        Object b) throws Exception {
          return a;
        }
      }
);
    }
  }
);
  TestHelper.checkDoubleOnSubscribeObservable(new Function<Observable<Object>,ObservableSource<Object>>(){
    @Override public ObservableSource<Object> apply(    Observable<Object> o) throws Exception {
      return o.scan(0,new BiFunction<Object,Object,Object>(){
        @Override public Object apply(        Object a,        Object b) throws Exception {
          return a;
        }
      }
);
    }
  }
);
}
