@Test public void testScanFunctionThrowsAndUpstreamEmitsOnNextResultsInScanFunctionBeingCalledOnlyOnce(){
  final RuntimeException err=new RuntimeException();
  final AtomicInteger count=new AtomicInteger();
  Observable.unsafeCreate(new ObservableSource<Integer>(){
    @Override public void subscribe(    Observer<? super Integer> o){
      Disposable d=Disposables.empty();
      o.onSubscribe(d);
      o.onNext(1);
      o.onNext(2);
      o.onNext(3);
    }
  }
).scan(new BiFunction<Integer,Integer,Integer>(){
    @Override public Integer apply(    Integer t1,    Integer t2) throws Exception {
      count.incrementAndGet();
      throw err;
    }
  }
).test().assertError(err).assertValue(1);
  assertEquals(1,count.get());
}
