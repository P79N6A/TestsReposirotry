@Test public void onCompleteOnErrorRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      TestObserver<Integer> to=new TestObserver<Integer>();
      final SerializedObserver<Integer> so=new SerializedObserver<Integer>(to);
      Disposable d=Disposables.empty();
      so.onSubscribe(d);
      final Throwable ex=new TestException();
      Runnable r1=new Runnable(){
        @Override public void run(){
          so.onError(ex);
        }
      }
;
      Runnable r2=new Runnable(){
        @Override public void run(){
          so.onComplete();
        }
      }
;
      TestHelper.race(r1,r2);
      to.awaitDone(5,TimeUnit.SECONDS);
      if (to.completions() != 0) {
        to.assertResult();
      }
 else {
        to.assertFailure(TestException.class).assertError(ex);
      }
      for (      Throwable e : errors) {
        assertTrue(e.toString(),e.getCause() instanceof TestException);
      }
    }
  finally {
      RxJavaPlugins.reset();
    }
  }
}
