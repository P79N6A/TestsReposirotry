@Test public void flatMapPublisherCancelDuringSingle(){
  final AtomicBoolean disposed=new AtomicBoolean();
  TestSubscriber<Integer> ts=Single.<Integer>never().doOnDispose(new Action(){
    @Override public void run() throws Exception {
      disposed.set(true);
    }
  }
).flatMapPublisher(new Function<Integer,Publisher<Integer>>(){
    @Override public Publisher<Integer> apply(    Integer v) throws Exception {
      return Flowable.range(v,5);
    }
  }
).test().assertNoValues().assertNotTerminated();
  assertFalse(disposed.get());
  ts.cancel();
  assertTrue(disposed.get());
  ts.assertNotTerminated();
}
