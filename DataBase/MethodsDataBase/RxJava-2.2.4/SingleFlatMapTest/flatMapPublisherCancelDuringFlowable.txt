@Test public void flatMapPublisherCancelDuringFlowable(){
  final AtomicBoolean disposed=new AtomicBoolean();
  TestSubscriber<Integer> ts=Single.just(1).flatMapPublisher(new Function<Integer,Publisher<Integer>>(){
    @Override public Publisher<Integer> apply(    Integer v) throws Exception {
      return Flowable.<Integer>never().doOnCancel(new Action(){
        @Override public void run() throws Exception {
          disposed.set(true);
        }
      }
);
    }
  }
).test().assertNoValues().assertNotTerminated();
  assertFalse(disposed.get());
  ts.cancel();
  assertTrue(disposed.get());
  ts.assertNotTerminated();
}
