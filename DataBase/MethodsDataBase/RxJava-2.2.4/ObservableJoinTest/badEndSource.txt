@Test public void badEndSource(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    @SuppressWarnings("rawtypes") final Observer[] o={null};
    TestObserver<Integer> to=Observable.just(1).join(Observable.just(2),Functions.justFunction(Observable.never()),Functions.justFunction(new Observable<Integer>(){
      @Override protected void subscribeActual(      Observer<? super Integer> observer){
        o[0]=observer;
        observer.onSubscribe(Disposables.empty());
        observer.onError(new TestException("First"));
      }
    }
),new BiFunction<Integer,Integer,Integer>(){
      @Override public Integer apply(      Integer a,      Integer b) throws Exception {
        return a + b;
      }
    }
).test();
    o[0].onError(new TestException("Second"));
    to.assertFailureAndMessage(TestException.class,"First");
    TestHelper.assertUndeliverable(errors,0,TestException.class,"Second");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
