@Test public void badOuterSource(){
  List<Throwable> errors=TestHelper.trackPluginErrors();
  try {
    new Observable<Integer>(){
      @Override protected void subscribeActual(      Observer<? super Integer> observer){
        observer.onSubscribe(Disposables.empty());
        observer.onError(new TestException("First"));
        observer.onError(new TestException("Second"));
      }
    }
.join(Observable.just(2),Functions.justFunction(Observable.never()),Functions.justFunction(Observable.never()),new BiFunction<Integer,Integer,Integer>(){
      @Override public Integer apply(      Integer a,      Integer b) throws Exception {
        return a + b;
      }
    }
).test().assertFailureAndMessage(TestException.class,"First");
    TestHelper.assertUndeliverable(errors,0,TestException.class,"Second");
  }
  finally {
    RxJavaPlugins.reset();
  }
}
