@Test public void customFusion(){
  final TestObserver<Integer> to=new TestObserver<Integer>();
  TakeLast source=new TakeLast(new Observer<Integer>(){
    QueueDisposable<Integer> d;
    @SuppressWarnings("unchecked") @Override public void onSubscribe(    Disposable d){
      this.d=(QueueDisposable<Integer>)d;
      to.onSubscribe(d);
      this.d.requestFusion(QueueFuseable.ANY);
    }
    @Override public void onNext(    Integer value){
      if (!d.isEmpty()) {
        Integer v=null;
        try {
          to.onNext(d.poll());
          v=d.poll();
        }
 catch (        Throwable ex) {
          to.onError(ex);
        }
        assertNull(v);
        assertTrue(d.isEmpty());
      }
    }
    @Override public void onError(    Throwable e){
      to.onError(e);
    }
    @Override public void onComplete(){
      to.onComplete();
    }
  }
);
  source.onSubscribe(Disposables.empty());
  source.onNext(1);
  source.onComplete();
  to.assertResult(1);
}
