@Test public void syncWorkerCancelRace(){
  for (int i=0; i < TestHelper.RACE_LONG_LOOPS; i++) {
    final CompositeDisposable set=new CompositeDisposable();
    final AtomicBoolean interrupted=new AtomicBoolean();
    final AtomicInteger sync=new AtomicInteger(2);
    final AtomicInteger syncb=new AtomicInteger(2);
    Runnable r0=new Runnable(){
      @Override public void run(){
        set.dispose();
        if (sync.decrementAndGet() != 0) {
          while (sync.get() != 0) {
          }
        }
        if (syncb.decrementAndGet() != 0) {
          while (syncb.get() != 0) {
          }
        }
        for (int j=0; j < 1000; j++) {
          if (Thread.currentThread().isInterrupted()) {
            interrupted.set(true);
            break;
          }
        }
      }
    }
;
    final ScheduledRunnable run=new ScheduledRunnable(r0,set);
    set.add(run);
    final FutureTask<Void> ft=new FutureTask<Void>(run,null);
    Runnable r2=new Runnable(){
      @Override public void run(){
        if (sync.decrementAndGet() != 0) {
          while (sync.get() != 0) {
          }
        }
        run.setFuture(ft);
        if (syncb.decrementAndGet() != 0) {
          while (syncb.get() != 0) {
          }
        }
      }
    }
;
    TestHelper.race(ft,r2);
    assertFalse("The task was interrupted",interrupted.get());
  }
}
