@Test public void concatTakeFirstLastBackpressureCompletes(){
  TestSubscriber<Integer> ts=TestSubscriber.create(0L);
  Flowable.range(1,6).publish(new Function<Flowable<Integer>,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Flowable<Integer> f){
      return Flowable.concat(f.take(5),f.takeLast(5));
    }
  }
).subscribe(ts);
  ts.assertNoValues();
  ts.assertNoErrors();
  ts.assertNotComplete();
  ts.request(1);
  ts.request(4);
  ts.assertValues(1,2,3,4,5);
  ts.assertNoErrors();
  ts.assertNotComplete();
  ts.request(5);
  ts.assertValues(1,2,3,4,5,6);
  ts.assertNoErrors();
  ts.assertComplete();
}
