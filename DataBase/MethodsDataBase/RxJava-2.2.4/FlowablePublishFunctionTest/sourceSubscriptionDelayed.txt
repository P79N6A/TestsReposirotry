@Test public void sourceSubscriptionDelayed(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final TestSubscriber<Integer> ts1=new TestSubscriber<Integer>(0L);
    Flowable.just(1).publish(new Function<Flowable<Integer>,Publisher<Integer>>(){
      @Override public Publisher<Integer> apply(      final Flowable<Integer> f) throws Exception {
        Runnable r1=new Runnable(){
          @Override public void run(){
            f.subscribe(ts1);
          }
        }
;
        Runnable r2=new Runnable(){
          @Override public void run(){
            for (int j=0; j < 100; j++) {
              ts1.request(1);
            }
          }
        }
;
        TestHelper.race(r1,r2);
        return f;
      }
    }
).test().assertResult(1);
    ts1.assertResult(1);
  }
}
