@Test public void oneStartOnly(){
  final AtomicInteger startCount=new AtomicInteger();
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>(){
    @Override public void onStart(){
      startCount.incrementAndGet();
    }
  }
;
  PublishProcessor<Integer> pp=PublishProcessor.create();
  pp.publish(new Function<Flowable<Integer>,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Flowable<Integer> f){
      return f.take(1);
    }
  }
).subscribe(ts);
  Assert.assertEquals(1,startCount.get());
}
