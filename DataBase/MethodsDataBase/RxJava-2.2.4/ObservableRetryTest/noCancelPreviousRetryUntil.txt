@Test public void noCancelPreviousRetryUntil(){
  final AtomicInteger counter=new AtomicInteger();
  final AtomicInteger times=new AtomicInteger();
  Observable<Integer> source=Observable.defer(new Callable<ObservableSource<Integer>>(){
    @Override public ObservableSource<Integer> call() throws Exception {
      if (times.getAndIncrement() < 4) {
        return Observable.error(new TestException());
      }
      return Observable.just(1);
    }
  }
).doOnDispose(new Action(){
    @Override public void run() throws Exception {
      counter.getAndIncrement();
    }
  }
);
  source.retryUntil(new BooleanSupplier(){
    @Override public boolean getAsBoolean() throws Exception {
      return false;
    }
  }
).test().assertResult(1);
  assertEquals(0,counter.get());
}
