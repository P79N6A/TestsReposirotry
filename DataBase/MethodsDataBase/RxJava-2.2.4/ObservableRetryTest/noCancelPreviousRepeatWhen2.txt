@Test public void noCancelPreviousRepeatWhen2(){
  final AtomicInteger counter=new AtomicInteger();
  final AtomicInteger times=new AtomicInteger();
  Observable<Integer> source=Observable.<Integer>error(new TestException()).doOnDispose(new Action(){
    @Override public void run() throws Exception {
      counter.getAndIncrement();
    }
  }
);
  source.retryWhen(new Function<Observable<Throwable>,ObservableSource<?>>(){
    @Override public ObservableSource<?> apply(    Observable<Throwable> e) throws Exception {
      return e.takeWhile(new Predicate<Object>(){
        @Override public boolean test(        Object v) throws Exception {
          return times.getAndIncrement() < 4;
        }
      }
);
    }
  }
).test().assertResult();
  assertEquals(0,counter.get());
}
