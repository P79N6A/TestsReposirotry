@Test public void testOnNextFromNotificationHandler(){
  Observer<String> observer=TestHelper.mockObserver();
  int numRetries=2;
  Observable<String> origin=Observable.unsafeCreate(new FuncWithErrors(numRetries));
  origin.retryWhen(new Function<Observable<? extends Throwable>,Observable<Object>>(){
    @Override public Observable<Object> apply(    Observable<? extends Throwable> t1){
      return t1.map(new Function<Throwable,Integer>(){
        @Override public Integer apply(        Throwable t1){
          return 0;
        }
      }
).startWith(0).cast(Object.class);
    }
  }
).subscribe(observer);
  InOrder inOrder=inOrder(observer);
  inOrder.verify(observer,times(numRetries + 1)).onNext("beginningEveryTime");
  inOrder.verify(observer,never()).onError(any(Throwable.class));
  inOrder.verify(observer,times(1)).onNext("onSuccessOnly");
  inOrder.verify(observer,times(1)).onComplete();
  inOrder.verifyNoMoreInteractions();
}
