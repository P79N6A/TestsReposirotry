@Test public void testSchedulingNotificationHandler(){
  Observer<String> observer=TestHelper.mockObserver();
  int numRetries=2;
  Observable<String> origin=Observable.unsafeCreate(new FuncWithErrors(numRetries));
  TestObserver<String> to=new TestObserver<String>(observer);
  origin.retryWhen(new Function<Observable<? extends Throwable>,Observable<Object>>(){
    @Override public Observable<Object> apply(    Observable<? extends Throwable> t1){
      return t1.observeOn(Schedulers.computation()).map(new Function<Throwable,Object>(){
        @Override public Object apply(        Throwable t1){
          return 1;
        }
      }
).startWith(1);
    }
  }
).doOnError(new Consumer<Throwable>(){
    @Override public void accept(    Throwable e){
      e.printStackTrace();
    }
  }
).subscribe(to);
  to.awaitTerminalEvent();
  InOrder inOrder=inOrder(observer);
  inOrder.verify(observer,times(1 + numRetries)).onNext("beginningEveryTime");
  inOrder.verify(observer,never()).onError(any(Throwable.class));
  inOrder.verify(observer,times(1)).onNext("onSuccessOnly");
  inOrder.verify(observer,times(1)).onComplete();
  inOrder.verifyNoMoreInteractions();
}
