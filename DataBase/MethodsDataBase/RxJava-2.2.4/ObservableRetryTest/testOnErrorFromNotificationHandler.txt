@Test public void testOnErrorFromNotificationHandler(){
  Observer<String> observer=TestHelper.mockObserver();
  Observable<String> origin=Observable.unsafeCreate(new FuncWithErrors(2));
  origin.retryWhen(new Function<Observable<? extends Throwable>,Observable<?>>(){
    @Override public Observable<?> apply(    Observable<? extends Throwable> t1){
      return Observable.error(new RuntimeException());
    }
  }
).subscribe(observer);
  InOrder inOrder=inOrder(observer);
  inOrder.verify(observer).onSubscribe((Disposable)notNull());
  inOrder.verify(observer,never()).onNext("beginningEveryTime");
  inOrder.verify(observer,never()).onNext("onSuccessOnly");
  inOrder.verify(observer,never()).onComplete();
  inOrder.verify(observer,times(1)).onError(any(RuntimeException.class));
  inOrder.verifyNoMoreInteractions();
}
