@Test public void testIssue1900SourceNotSupportingBackpressure(){
  Observer<String> observer=TestHelper.mockObserver();
  final int NUM_MSG=1034;
  final AtomicInteger count=new AtomicInteger();
  Observable<String> origin=Observable.unsafeCreate(new ObservableSource<String>(){
    @Override public void subscribe(    Observer<? super String> o){
      o.onSubscribe(Disposables.empty());
      for (int i=0; i < NUM_MSG; i++) {
        o.onNext("msg:" + count.incrementAndGet());
      }
      o.onComplete();
    }
  }
);
  origin.retry().groupBy(new Function<String,String>(){
    @Override public String apply(    String t1){
      return t1;
    }
  }
).flatMap(new Function<GroupedObservable<String,String>,Observable<String>>(){
    @Override public Observable<String> apply(    GroupedObservable<String,String> t1){
      return t1.take(1);
    }
  }
).subscribe(new TestObserver<String>(observer));
  InOrder inOrder=inOrder(observer);
  inOrder.verify(observer,times(NUM_MSG)).onNext(any(java.lang.String.class));
  inOrder.verify(observer,never()).onError(any(Throwable.class));
  inOrder.verify(observer,times(1)).onComplete();
  inOrder.verifyNoMoreInteractions();
}
