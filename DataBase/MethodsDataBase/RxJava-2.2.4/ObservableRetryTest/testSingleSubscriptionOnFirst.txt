@Test public void testSingleSubscriptionOnFirst() throws Exception {
  final AtomicInteger inc=new AtomicInteger(0);
  ObservableSource<Integer> onSubscribe=new ObservableSource<Integer>(){
    @Override public void subscribe(    Observer<? super Integer> observer){
      observer.onSubscribe(Disposables.empty());
      final int emit=inc.incrementAndGet();
      observer.onNext(emit);
      observer.onComplete();
    }
  }
;
  int first=Observable.unsafeCreate(onSubscribe).retryWhen(new Function<Observable<? extends Throwable>,Observable<?>>(){
    @Override public Observable<?> apply(    Observable<? extends Throwable> attempt){
      return attempt.zipWith(Observable.just(1),new BiFunction<Throwable,Integer,Void>(){
        @Override public Void apply(        Throwable o,        Integer integer){
          return null;
        }
      }
);
    }
  }
).blockingFirst();
  assertEquals("Observer did not receive the expected output",1,first);
  assertEquals("Subscribe was not called once",1,inc.get());
}
