@Test public final void testNestedSchedule(){
  final TestScheduler scheduler=new TestScheduler();
  final Scheduler.Worker inner=scheduler.createWorker();
  try {
    final Runnable calledOp=mock(Runnable.class);
    Flowable<Object> poller;
    poller=Flowable.unsafeCreate(new Publisher<Object>(){
      @Override public void subscribe(      final Subscriber<? super Object> aSubscriber){
        final BooleanSubscription bs=new BooleanSubscription();
        aSubscriber.onSubscribe(bs);
        inner.schedule(new Runnable(){
          @Override public void run(){
            if (!bs.isCancelled()) {
              calledOp.run();
              inner.schedule(this,5,TimeUnit.SECONDS);
            }
          }
        }
);
      }
    }
);
    InOrder inOrder=Mockito.inOrder(calledOp);
    Disposable sub;
    sub=poller.subscribe();
    scheduler.advanceTimeTo(6,TimeUnit.SECONDS);
    inOrder.verify(calledOp,times(2)).run();
    sub.dispose();
    scheduler.advanceTimeTo(11,TimeUnit.SECONDS);
    inOrder.verify(calledOp,never()).run();
    sub=poller.subscribe();
    scheduler.advanceTimeTo(12,TimeUnit.SECONDS);
    inOrder.verify(calledOp,times(1)).run();
  }
  finally {
    inner.dispose();
  }
}
