@SuppressWarnings("unchecked") @Test public final void testPeriodicScheduling() throws Exception {
  final Function<Long,Void> calledOp=mock(Function.class);
  final TestScheduler scheduler=new TestScheduler();
  final Scheduler.Worker inner=scheduler.createWorker();
  try {
    inner.schedulePeriodically(new Runnable(){
      @Override public void run(){
        System.out.println(scheduler.now(TimeUnit.MILLISECONDS));
        try {
          calledOp.apply(scheduler.now(TimeUnit.MILLISECONDS));
        }
 catch (        Throwable ex) {
          ExceptionHelper.wrapOrThrow(ex);
        }
      }
    }
,1,2,TimeUnit.SECONDS);
    verify(calledOp,never()).apply(anyLong());
    InOrder inOrder=Mockito.inOrder(calledOp);
    scheduler.advanceTimeBy(999L,TimeUnit.MILLISECONDS);
    inOrder.verify(calledOp,never()).apply(anyLong());
    scheduler.advanceTimeBy(1L,TimeUnit.MILLISECONDS);
    inOrder.verify(calledOp,times(1)).apply(1000L);
    scheduler.advanceTimeBy(1999L,TimeUnit.MILLISECONDS);
    inOrder.verify(calledOp,never()).apply(3000L);
    scheduler.advanceTimeBy(1L,TimeUnit.MILLISECONDS);
    inOrder.verify(calledOp,times(1)).apply(3000L);
    scheduler.advanceTimeBy(5L,TimeUnit.SECONDS);
    inOrder.verify(calledOp,times(1)).apply(5000L);
    inOrder.verify(calledOp,times(1)).apply(7000L);
    inner.dispose();
    scheduler.advanceTimeBy(11L,TimeUnit.SECONDS);
    inOrder.verify(calledOp,never()).apply(anyLong());
  }
  finally {
    inner.dispose();
  }
}
