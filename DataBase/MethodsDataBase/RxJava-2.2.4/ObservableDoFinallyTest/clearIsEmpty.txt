@Test public void clearIsEmpty(){
  Observable.range(1,5).doFinally(this).subscribe(new Observer<Integer>(){
    @Override public void onSubscribe(    Disposable d){
      @SuppressWarnings("unchecked") QueueDisposable<Integer> qd=(QueueDisposable<Integer>)d;
      qd.requestFusion(QueueFuseable.ANY);
      assertFalse(qd.isEmpty());
      try {
        assertEquals(1,qd.poll().intValue());
      }
 catch (      Throwable ex) {
        throw new RuntimeException(ex);
      }
      assertFalse(qd.isEmpty());
      qd.clear();
      assertTrue(qd.isEmpty());
      qd.dispose();
    }
    @Override public void onNext(    Integer t){
    }
    @Override public void onError(    Throwable t){
    }
    @Override public void onComplete(){
    }
  }
);
  assertEquals(1,calls);
}
