@Test(timeout=5000) public void unsubscribeOnNormal() throws InterruptedException {
  final AtomicReference<String> name=new AtomicReference<String>();
  final CountDownLatch cdl=new CountDownLatch(1);
  normal.completable.delay(1,TimeUnit.SECONDS).doOnDispose(new Action(){
    @Override public void run(){
      name.set(Thread.currentThread().getName());
      cdl.countDown();
    }
  }
).unsubscribeOn(Schedulers.computation()).subscribe(new CompletableObserver(){
    @Override public void onSubscribe(    final Disposable d){
      Schedulers.single().scheduleDirect(new Runnable(){
        @Override public void run(){
          d.dispose();
        }
      }
,100,TimeUnit.MILLISECONDS);
    }
    @Override public void onError(    Throwable e){
    }
    @Override public void onComplete(){
    }
  }
);
  cdl.await();
  Assert.assertTrue(name.get().startsWith("RxComputation"));
}
