@Test(timeout=5000) public void timerTestScheduler(){
  TestScheduler scheduler=new TestScheduler();
  Completable c=Completable.timer(250,TimeUnit.MILLISECONDS,scheduler);
  final AtomicInteger calls=new AtomicInteger();
  c.subscribe(new CompletableObserver(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onComplete(){
      calls.getAndIncrement();
    }
    @Override public void onError(    Throwable e){
      RxJavaPlugins.onError(e);
    }
  }
);
  scheduler.advanceTimeBy(100,TimeUnit.MILLISECONDS);
  Assert.assertEquals(0,calls.get());
  scheduler.advanceTimeBy(200,TimeUnit.MILLISECONDS);
  Assert.assertEquals(1,calls.get());
}
