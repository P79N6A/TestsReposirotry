@Test public void subscribeAction2ReportsUnsubscribedOnErrorAfter(){
  PublishSubject<String> stringSubject=PublishSubject.create();
  Completable completable=stringSubject.ignoreElements();
  final AtomicReference<Disposable> disposableRef=new AtomicReference<Disposable>();
  Disposable completableSubscription=completable.subscribe(Functions.EMPTY_ACTION,new Consumer<Throwable>(){
    @Override public void accept(    Throwable e){
      if (disposableRef.get().isDisposed()) {
        disposableRef.set(null);
      }
    }
  }
);
  disposableRef.set(completableSubscription);
  stringSubject.onError(new TestException());
  assertTrue("Not unsubscribed?",completableSubscription.isDisposed());
  assertNotNull("Unsubscribed before the call to onError",disposableRef.get());
}
