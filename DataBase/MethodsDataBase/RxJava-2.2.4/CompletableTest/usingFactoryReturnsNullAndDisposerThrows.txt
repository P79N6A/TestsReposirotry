@Test public void usingFactoryReturnsNullAndDisposerThrows(){
  Consumer<Integer> onDispose=new Consumer<Integer>(){
    @Override public void accept(    Integer t){
      throw new TestException();
    }
  }
;
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  Completable.using(new Callable<Integer>(){
    @Override public Integer call(){
      return 1;
    }
  }
,new Function<Integer,Completable>(){
    @Override public Completable apply(    Integer t){
      return null;
    }
  }
,onDispose).<Integer>toFlowable().subscribe(ts);
  ts.assertNoValues();
  ts.assertNotComplete();
  ts.assertError(CompositeException.class);
  CompositeException ex=(CompositeException)ts.errors().get(0);
  List<Throwable> listEx=ex.getExceptions();
  assertEquals(2,listEx.size());
  assertTrue(listEx.get(0).toString(),listEx.get(0) instanceof NullPointerException);
  assertTrue(listEx.get(1).toString(),listEx.get(1) instanceof TestException);
}
