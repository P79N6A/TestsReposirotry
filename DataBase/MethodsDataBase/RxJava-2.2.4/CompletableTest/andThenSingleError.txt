@Test public void andThenSingleError(){
  TestSubscriber<String> ts=new TestSubscriber<String>(0);
  final AtomicBoolean hasRun=new AtomicBoolean(false);
  final Exception e=new Exception();
  Completable.error(e).andThen(new Single<String>(){
    @Override public void subscribeActual(    SingleObserver<? super String> observer){
      hasRun.set(true);
      observer.onSuccess("foo");
    }
  }
).toFlowable().subscribe(ts);
  ts.assertNoValues();
  ts.assertError(e);
  Assert.assertFalse("Should not have subscribed to single when completable errors",hasRun.get());
}
