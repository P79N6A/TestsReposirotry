@Test(timeout=5000) public void usingNormalLazy(){
  final AtomicInteger dispose=new AtomicInteger();
  Completable c=Completable.using(new Callable<Integer>(){
    @Override public Integer call(){
      return 1;
    }
  }
,new Function<Integer,Completable>(){
    @Override public Completable apply(    Integer v){
      return normal.completable;
    }
  }
,new Consumer<Integer>(){
    @Override public void accept(    Integer d){
      dispose.set(d);
    }
  }
,false);
  final AtomicBoolean disposedFirst=new AtomicBoolean();
  final AtomicReference<Throwable> error=new AtomicReference<Throwable>();
  c.subscribe(new CompletableObserver(){
    @Override public void onSubscribe(    Disposable d){
    }
    @Override public void onError(    Throwable e){
      error.lazySet(e);
    }
    @Override public void onComplete(){
      disposedFirst.set(dispose.get() != 0);
    }
  }
);
  Assert.assertEquals(1,dispose.get());
  Assert.assertFalse("Disposed first",disposedFirst.get());
  Assert.assertNull(error.get());
}
