@Test(timeout=5000) public void ambWithArraySecondFiresError(){
  PublishProcessor<Object> pp1=PublishProcessor.create();
  PublishProcessor<Object> pp2=PublishProcessor.create();
  Completable c1=Completable.fromPublisher(pp1);
  Completable c2=Completable.fromPublisher(pp2);
  Completable c=c1.ambWith(c2);
  final AtomicReference<Throwable> complete=new AtomicReference<Throwable>();
  c.subscribe(Functions.EMPTY_ACTION,new Consumer<Throwable>(){
    @Override public void accept(    Throwable v){
      complete.set(v);
    }
  }
);
  Assert.assertTrue("First subject no subscribers",pp1.hasSubscribers());
  Assert.assertTrue("Second subject no subscribers",pp2.hasSubscribers());
  pp2.onError(new TestException());
  Assert.assertFalse("First subject has subscribers",pp1.hasSubscribers());
  Assert.assertFalse("Second subject has subscribers",pp2.hasSubscribers());
  Assert.assertTrue("Not completed",complete.get() instanceof TestException);
}
