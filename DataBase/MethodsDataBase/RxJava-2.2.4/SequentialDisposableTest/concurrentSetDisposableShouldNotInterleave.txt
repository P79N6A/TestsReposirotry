@Test public void concurrentSetDisposableShouldNotInterleave() throws InterruptedException {
  final int count=10;
  final List<Disposable> subscriptions=new ArrayList<Disposable>();
  final CountDownLatch start=new CountDownLatch(1);
  final CountDownLatch end=new CountDownLatch(count);
  final List<Thread> threads=new ArrayList<Thread>();
  for (int i=0; i < count; i++) {
    final Disposable subscription=mock(Disposable.class);
    subscriptions.add(subscription);
    final Thread t=new Thread(){
      @Override public void run(){
        try {
          start.await();
          serialDisposable.update(subscription);
        }
 catch (        InterruptedException e) {
          fail(e.getMessage());
        }
 finally {
          end.countDown();
        }
      }
    }
;
    t.start();
    threads.add(t);
  }
  start.countDown();
  end.await();
  serialDisposable.dispose();
  for (  final Disposable subscription : subscriptions) {
    verify(subscription).dispose();
  }
  for (  final Thread t : threads) {
    t.join();
  }
}
