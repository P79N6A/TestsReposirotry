@Test public void testTakeWhileProtectsPredicateCall(){
  TestFlowable source=new TestFlowable(mock(Subscription.class),"one");
  final RuntimeException testException=new RuntimeException("test exception");
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  Flowable<String> take=Flowable.unsafeCreate(source).takeWhile(new Predicate<String>(){
    @Override public boolean test(    String s){
      throw testException;
    }
  }
);
  take.subscribe(subscriber);
  try {
    source.t.join();
  }
 catch (  Throwable e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  verify(subscriber,never()).onNext(any(String.class));
  verify(subscriber,times(1)).onError(testException);
}
