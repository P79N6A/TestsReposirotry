@Test public void testUnsubscribeAfterTake(){
  Subscription s=mock(Subscription.class);
  TestFlowable w=new TestFlowable(s,"one","two","three");
  Subscriber<String> subscriber=TestHelper.mockSubscriber();
  Flowable<String> take=Flowable.unsafeCreate(w).takeWhile(new Predicate<String>(){
    int index;
    @Override public boolean test(    String s){
      return index++ < 1;
    }
  }
);
  take.subscribe(subscriber);
  try {
    w.t.join();
  }
 catch (  Throwable e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
  System.out.println("TestFlowable thread finished");
  verify(subscriber,times(1)).onNext("one");
  verify(subscriber,never()).onNext("two");
  verify(subscriber,never()).onNext("three");
  verify(s,times(1)).cancel();
}
