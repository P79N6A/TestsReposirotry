@Test public void shouldTimeoutIfSynchronizedObservableEmitFirstOnNextNotWithinTimeout() throws InterruptedException {
  final CountDownLatch exit=new CountDownLatch(1);
  final CountDownLatch timeoutSetuped=new CountDownLatch(1);
  final TestObserver<String> observer=new TestObserver<String>();
  new Thread(new Runnable(){
    @Override public void run(){
      Observable.unsafeCreate(new ObservableSource<String>(){
        @Override public void subscribe(        Observer<? super String> observer){
          observer.onSubscribe(Disposables.empty());
          try {
            timeoutSetuped.countDown();
            exit.await();
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
          observer.onNext("a");
          observer.onComplete();
        }
      }
).timeout(1,TimeUnit.SECONDS,testScheduler).subscribe(observer);
    }
  }
).start();
  timeoutSetuped.await();
  testScheduler.advanceTimeBy(2,TimeUnit.SECONDS);
  observer.assertFailureAndMessage(TimeoutException.class,timeoutMessage(1,TimeUnit.SECONDS));
  exit.countDown();
}
