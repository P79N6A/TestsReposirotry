@Test public void shouldUnsubscribeFromUnderlyingSubscriptionOnTimeout() throws InterruptedException {
  final Disposable upstream=mock(Disposable.class);
  Observable<String> never=Observable.unsafeCreate(new ObservableSource<String>(){
    @Override public void subscribe(    Observer<? super String> observer){
      observer.onSubscribe(upstream);
    }
  }
);
  TestScheduler testScheduler=new TestScheduler();
  Observable<String> observableWithTimeout=never.timeout(1000,TimeUnit.MILLISECONDS,testScheduler);
  TestObserver<String> observer=new TestObserver<String>();
  observableWithTimeout.subscribe(observer);
  testScheduler.advanceTimeBy(2000,TimeUnit.MILLISECONDS);
  observer.assertFailureAndMessage(TimeoutException.class,timeoutMessage(1000,TimeUnit.MILLISECONDS));
  verify(upstream,times(1)).dispose();
}
