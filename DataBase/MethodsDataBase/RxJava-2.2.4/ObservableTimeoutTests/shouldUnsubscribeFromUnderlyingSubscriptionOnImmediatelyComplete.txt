@Test @Ignore("s should be considered cancelled upon executing onComplete and not expect downstream to call cancel") public void shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyComplete(){
  final Disposable upstream=mock(Disposable.class);
  Observable<String> immediatelyComplete=Observable.unsafeCreate(new ObservableSource<String>(){
    @Override public void subscribe(    Observer<? super String> observer){
      observer.onSubscribe(upstream);
      observer.onComplete();
    }
  }
);
  TestScheduler testScheduler=new TestScheduler();
  Observable<String> observableWithTimeout=immediatelyComplete.timeout(1000,TimeUnit.MILLISECONDS,testScheduler);
  Observer<String> observer=TestHelper.mockObserver();
  TestObserver<String> to=new TestObserver<String>(observer);
  observableWithTimeout.subscribe(to);
  testScheduler.advanceTimeBy(2000,TimeUnit.MILLISECONDS);
  InOrder inOrder=inOrder(observer);
  inOrder.verify(observer).onComplete();
  inOrder.verifyNoMoreInteractions();
  verify(upstream,times(1)).dispose();
}
