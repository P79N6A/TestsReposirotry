@Test @Ignore("s should be considered cancelled upon executing onError and not expect downstream to call cancel") public void shouldUnsubscribeFromUnderlyingSubscriptionOnImmediatelyErrored() throws InterruptedException {
  final Disposable upstream=mock(Disposable.class);
  Observable<String> immediatelyError=Observable.unsafeCreate(new ObservableSource<String>(){
    @Override public void subscribe(    Observer<? super String> observer){
      observer.onSubscribe(upstream);
      observer.onError(new IOException("Error"));
    }
  }
);
  TestScheduler testScheduler=new TestScheduler();
  Observable<String> observableWithTimeout=immediatelyError.timeout(1000,TimeUnit.MILLISECONDS,testScheduler);
  Observer<String> observer=TestHelper.mockObserver();
  TestObserver<String> to=new TestObserver<String>(observer);
  observableWithTimeout.subscribe(to);
  testScheduler.advanceTimeBy(2000,TimeUnit.MILLISECONDS);
  InOrder inOrder=inOrder(observer);
  inOrder.verify(observer).onError(isA(IOException.class));
  inOrder.verifyNoMoreInteractions();
  verify(upstream,times(1)).dispose();
}
