@Test public void testScanShouldNotRequestZero(){
  final AtomicReference<Subscription> producer=new AtomicReference<Subscription>();
  Flowable<Integer> f=Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    final Subscriber<? super Integer> subscriber){
      Subscription p=spy(new Subscription(){
        private AtomicBoolean requested=new AtomicBoolean(false);
        @Override public void request(        long n){
          if (requested.compareAndSet(false,true)) {
            subscriber.onNext(1);
            subscriber.onComplete();
          }
        }
        @Override public void cancel(){
        }
      }
);
      producer.set(p);
      subscriber.onSubscribe(p);
    }
  }
).scan(100,new BiFunction<Integer,Integer,Integer>(){
    @Override public Integer apply(    Integer t1,    Integer t2){
      return t1 + t2;
    }
  }
);
  f.subscribe(new TestSubscriber<Integer>(1L){
    @Override public void onNext(    Integer integer){
      request(1);
    }
  }
);
  verify(producer.get(),never()).request(0);
  verify(producer.get(),times(1)).request(Flowable.bufferSize() - 1);
}
