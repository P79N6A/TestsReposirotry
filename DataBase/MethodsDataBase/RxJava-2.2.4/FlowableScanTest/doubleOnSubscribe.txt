@Test public void doubleOnSubscribe(){
  TestHelper.checkDoubleOnSubscribeFlowable(new Function<Flowable<Object>,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Flowable<Object> f) throws Exception {
      return f.scan(new BiFunction<Object,Object,Object>(){
        @Override public Object apply(        Object a,        Object b) throws Exception {
          return a;
        }
      }
);
    }
  }
);
  TestHelper.checkDoubleOnSubscribeFlowable(new Function<Flowable<Object>,Flowable<Object>>(){
    @Override public Flowable<Object> apply(    Flowable<Object> f) throws Exception {
      return f.scan(0,new BiFunction<Object,Object,Object>(){
        @Override public Object apply(        Object a,        Object b) throws Exception {
          return a;
        }
      }
);
    }
  }
);
}
