@Test public void shouldNotEmitUntilAfterSubscription(){
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
  Flowable.range(1,100).scan(0,new BiFunction<Integer,Integer,Integer>(){
    @Override public Integer apply(    Integer t1,    Integer t2){
      return t1 + t2;
    }
  }
).filter(new Predicate<Integer>(){
    @Override public boolean test(    Integer t1){
      return t1 > 0;
    }
  }
).subscribe(ts);
  assertEquals(100,ts.values().size());
}
