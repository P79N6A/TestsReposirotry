@Test public void testBackpressureWithoutInitialValue(){
  final AtomicInteger count=new AtomicInteger();
  Flowable.range(1,100).scan(new BiFunction<Integer,Integer,Integer>(){
    @Override public Integer apply(    Integer t1,    Integer t2){
      return t1 + t2;
    }
  }
).subscribe(new DefaultSubscriber<Integer>(){
    @Override public void onStart(){
      request(10);
    }
    @Override public void onComplete(){
    }
    @Override public void onError(    Throwable e){
      Assert.fail(e.getMessage());
      e.printStackTrace();
    }
    @Override public void onNext(    Integer t){
      count.incrementAndGet();
    }
  }
);
  assertEquals(10,count.get());
}
