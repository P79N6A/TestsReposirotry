@Test public void onErrorRace(){
  for (int i=0; i < TestHelper.RACE_DEFAULT_LOOPS; i++) {
    final PublishProcessor<Integer> pp1=PublishProcessor.create();
    final PublishProcessor<Integer> pp2=PublishProcessor.create();
    @SuppressWarnings("unchecked") TestSubscriber<Integer> ts=Flowable.ambArray(pp1,pp2).test();
    final Throwable ex=new TestException();
    Runnable r1=new Runnable(){
      @Override public void run(){
        pp1.onError(ex);
      }
    }
;
    Runnable r2=new Runnable(){
      @Override public void run(){
        pp2.onError(ex);
      }
    }
;
    List<Throwable> errors=TestHelper.trackPluginErrors();
    try {
      TestHelper.race(r1,r2);
    }
  finally {
      RxJavaPlugins.reset();
    }
    ts.assertFailure(TestException.class);
    if (!errors.isEmpty()) {
      TestHelper.assertUndeliverable(errors,0,TestException.class);
    }
  }
}
