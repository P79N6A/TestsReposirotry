@Test public void iteratorThrows(){
  Flowable.amb(new CrashingMappedIterable<Flowable<Integer>>(1,100,100,new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer v) throws Exception {
      return Flowable.never();
    }
  }
)).test().assertFailureAndMessage(TestException.class,"iterator()");
  Flowable.amb(new CrashingMappedIterable<Flowable<Integer>>(100,1,100,new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer v) throws Exception {
      return Flowable.never();
    }
  }
)).test().assertFailureAndMessage(TestException.class,"hasNext()");
  Flowable.amb(new CrashingMappedIterable<Flowable<Integer>>(100,100,1,new Function<Integer,Flowable<Integer>>(){
    @Override public Flowable<Integer> apply(    Integer v) throws Exception {
      return Flowable.never();
    }
  }
)).test().assertFailureAndMessage(TestException.class,"next()");
}
