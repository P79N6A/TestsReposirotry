@SuppressWarnings("unchecked") @Test public void testProducerRequestThroughAmb(){
  TestSubscriber<Integer> ts=new TestSubscriber<Integer>(0L);
  ts.request(3);
  final AtomicLong requested1=new AtomicLong();
  final AtomicLong requested2=new AtomicLong();
  Flowable<Integer> f1=Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> s){
      s.onSubscribe(new Subscription(){
        @Override public void request(        long n){
          System.out.println("1-requested: " + n);
          requested1.set(n);
        }
        @Override public void cancel(){
        }
      }
);
    }
  }
);
  Flowable<Integer> f2=Flowable.unsafeCreate(new Publisher<Integer>(){
    @Override public void subscribe(    Subscriber<? super Integer> s){
      s.onSubscribe(new Subscription(){
        @Override public void request(        long n){
          System.out.println("2-requested: " + n);
          requested2.set(n);
        }
        @Override public void cancel(){
        }
      }
);
    }
  }
);
  Flowable.ambArray(f1,f2).subscribe(ts);
  assertEquals(3,requested1.get());
  assertEquals(3,requested2.get());
}
