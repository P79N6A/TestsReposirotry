@Test public void slowPathCancelAfterHasNext(){
  final Integer[] a=new Integer[1000];
  Arrays.fill(a,1);
  final TestSubscriber<Integer> ts=new TestSubscriber<Integer>(0L);
  Maybe.just(1).flattenAsFlowable(new Function<Integer,Iterable<Integer>>(){
    @Override public Iterable<Integer> apply(    Integer v) throws Exception {
      return new Iterable<Integer>(){
        @Override public Iterator<Integer> iterator(){
          return new Iterator<Integer>(){
            int count;
            @Override public boolean hasNext(){
              if (count++ == 2) {
                ts.cancel();
              }
              return true;
            }
            @Override public Integer next(){
              return 1;
            }
            @Override public void remove(){
              throw new UnsupportedOperationException();
            }
          }
;
        }
      }
;
    }
  }
).subscribe(ts);
  ts.request(3);
  ts.assertValues(1,1).assertNoErrors().assertNotComplete();
}
