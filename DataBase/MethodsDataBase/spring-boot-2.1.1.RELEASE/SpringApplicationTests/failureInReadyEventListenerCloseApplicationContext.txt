@Test public void failureInReadyEventListenerCloseApplicationContext(){
  SpringApplication application=new SpringApplication(ExampleConfig.class);
  application.setWebApplicationType(WebApplicationType.NONE);
  ExitCodeListener exitCodeListener=new ExitCodeListener();
  application.addListeners(exitCodeListener);
  @SuppressWarnings("unchecked") ApplicationListener<SpringApplicationEvent> listener=mock(ApplicationListener.class);
  application.addListeners(listener);
  ExitStatusException failure=new ExitStatusException();
  willThrow(failure).given(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));
  try {
    application.run();
    fail("Run should have failed with a RuntimeException");
  }
 catch (  RuntimeException ex) {
    verify(listener).onApplicationEvent(isA(ApplicationReadyEvent.class));
    verify(listener,never()).onApplicationEvent(isA(ApplicationFailedEvent.class));
    assertThat(exitCodeListener.getExitCode()).isEqualTo(11);
    assertThat(this.output.toString()).contains("Application run failed");
  }
}
