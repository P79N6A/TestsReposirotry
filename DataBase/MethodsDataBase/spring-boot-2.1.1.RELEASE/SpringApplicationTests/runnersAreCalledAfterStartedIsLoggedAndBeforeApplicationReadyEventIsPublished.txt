@Test @SuppressWarnings("unchecked") public void runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished() throws Exception {
  SpringApplication application=new SpringApplication(ExampleConfig.class);
  ApplicationRunner applicationRunner=mock(ApplicationRunner.class);
  CommandLineRunner commandLineRunner=mock(CommandLineRunner.class);
  application.addInitializers((context) -> {
    ConfigurableListableBeanFactory beanFactory=context.getBeanFactory();
    beanFactory.registerSingleton("commandLineRunner",new CommandLineRunner(){
      @Override public void run(      String... args) throws Exception {
        assertThat(SpringApplicationTests.this.output.toString()).contains("Started");
        commandLineRunner.run(args);
      }
    }
);
    beanFactory.registerSingleton("applicationRunner",new ApplicationRunner(){
      @Override public void run(      ApplicationArguments args) throws Exception {
        assertThat(SpringApplicationTests.this.output.toString()).contains("Started");
        applicationRunner.run(args);
      }
    }
);
  }
);
  application.setWebApplicationType(WebApplicationType.NONE);
  ApplicationListener<ApplicationReadyEvent> eventListener=mock(ApplicationListener.class);
  application.addListeners(eventListener);
  this.context=application.run();
  InOrder applicationRunnerOrder=Mockito.inOrder(eventListener,applicationRunner);
  applicationRunnerOrder.verify(applicationRunner).run(ArgumentMatchers.any(ApplicationArguments.class));
  applicationRunnerOrder.verify(eventListener).onApplicationEvent(ArgumentMatchers.any(ApplicationReadyEvent.class));
  InOrder commandLineRunnerOrder=Mockito.inOrder(eventListener,commandLineRunner);
  commandLineRunnerOrder.verify(commandLineRunner).run();
  commandLineRunnerOrder.verify(eventListener).onApplicationEvent(ArgumentMatchers.any(ApplicationReadyEvent.class));
}
