@Test public void getFieldValues() throws Exception {
  TestProcessor processor=new TestProcessor();
  TestCompiler compiler=new TestCompiler(this.temporaryFolder);
  compiler.getTask(FieldValues.class).call(processor);
  Map<String,Object> values=processor.getValues();
  assertThat(values.get("string")).isEqualTo("1");
  assertThat(values.get("stringNone")).isNull();
  assertThat(values.get("stringConst")).isEqualTo("c");
  assertThat(values.get("bool")).isEqualTo(true);
  assertThat(values.get("boolNone")).isEqualTo(false);
  assertThat(values.get("boolConst")).isEqualTo(true);
  assertThat(values.get("boolObject")).isEqualTo(true);
  assertThat(values.get("boolObjectNone")).isNull();
  assertThat(values.get("boolObjectConst")).isEqualTo(true);
  assertThat(values.get("integer")).isEqualTo(1);
  assertThat(values.get("integerNone")).isEqualTo(0);
  assertThat(values.get("integerConst")).isEqualTo(2);
  assertThat(values.get("integerObject")).isEqualTo(3);
  assertThat(values.get("integerObjectNone")).isNull();
  assertThat(values.get("integerObjectConst")).isEqualTo(4);
  assertThat(values.get("charset")).isEqualTo("US-ASCII");
  assertThat(values.get("charsetConst")).isEqualTo("UTF-8");
  assertThat(values.get("mimeType")).isEqualTo("text/html");
  assertThat(values.get("mimeTypeConst")).isEqualTo("text/plain");
  assertThat(values.get("object")).isEqualTo(123);
  assertThat(values.get("objectNone")).isNull();
  assertThat(values.get("objectConst")).isEqualTo("c");
  assertThat(values.get("objectInstance")).isNull();
  assertThat(values.get("stringArray")).isEqualTo(new Object[]{"FOO","BAR"});
  assertThat(values.get("stringArrayNone")).isNull();
  assertThat(values.get("stringEmptyArray")).isEqualTo(new Object[0]);
  assertThat(values.get("stringArrayConst")).isEqualTo(new Object[]{"OK","KO"});
  assertThat(values.get("stringArrayConstElements")).isEqualTo(new Object[]{"c"});
  assertThat(values.get("integerArray")).isEqualTo(new Object[]{42,24});
  assertThat(values.get("unknownArray")).isNull();
  assertThat(values.get("durationNone")).isNull();
  assertThat(values.get("durationNanos")).isEqualTo("5ns");
  assertThat(values.get("durationMillis")).isEqualTo("10ms");
  assertThat(values.get("durationSeconds")).isEqualTo("20s");
  assertThat(values.get("durationMinutes")).isEqualTo("30m");
  assertThat(values.get("durationHours")).isEqualTo("40h");
  assertThat(values.get("durationDays")).isEqualTo("50d");
  assertThat(values.get("dataSizeNone")).isNull();
  assertThat(values.get("dataSizeBytes")).isEqualTo("5B");
  assertThat(values.get("dataSizeKilobytes")).isEqualTo("10KB");
  assertThat(values.get("dataSizeMegabytes")).isEqualTo("20MB");
  assertThat(values.get("dataSizeGigabytes")).isEqualTo("30GB");
  assertThat(values.get("dataSizeTerabytes")).isEqualTo("40TB");
}
