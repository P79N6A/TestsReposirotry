@Test public void jdkJarFile() throws Exception {
  java.util.jar.JarFile jarFile=new java.util.jar.JarFile(this.rootJarFile);
  Enumeration<java.util.jar.JarEntry> entries=jarFile.entries();
  assertThat(entries.nextElement().getName()).isEqualTo("META-INF/");
  assertThat(entries.nextElement().getName()).isEqualTo("META-INF/MANIFEST.MF");
  assertThat(entries.nextElement().getName()).isEqualTo("1.dat");
  assertThat(entries.nextElement().getName()).isEqualTo("2.dat");
  assertThat(entries.nextElement().getName()).isEqualTo("d/");
  assertThat(entries.nextElement().getName()).isEqualTo("d/9.dat");
  assertThat(entries.nextElement().getName()).isEqualTo("special/");
  assertThat(entries.nextElement().getName()).isEqualTo("special/\u00EB.dat");
  assertThat(entries.nextElement().getName()).isEqualTo("nested.jar");
  assertThat(entries.nextElement().getName()).isEqualTo("another-nested.jar");
  assertThat(entries.nextElement().getName()).isEqualTo("space nested.jar");
  assertThat(entries.nextElement().getName()).isEqualTo("multi-release.jar");
  assertThat(entries.hasMoreElements()).isFalse();
  URL jarUrl=new URL("jar:" + this.rootJarFile.toURI() + "!/");
  URLClassLoader urlClassLoader=new URLClassLoader(new URL[]{jarUrl});
  assertThat(urlClassLoader.getResource("special/\u00EB.dat")).isNotNull();
  assertThat(urlClassLoader.getResource("d/9.dat")).isNotNull();
  jarFile.close();
  urlClassLoader.close();
}
