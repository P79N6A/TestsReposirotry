@Test public void shouldGetPrototypeScopedBean(){
  this.contextRunner.withUserConfiguration(WebClientCustomizerConfig.class).run((context) -> {
    ClientHttpResponse response=mock(ClientHttpResponse.class);
    ClientHttpConnector firstConnector=mock(ClientHttpConnector.class);
    given(firstConnector.connect(any(),any(),any())).willReturn(Mono.just(response));
    WebClient.Builder firstBuilder=context.getBean(WebClient.Builder.class);
    firstBuilder.clientConnector(firstConnector).baseUrl("http://first.example.org");
    ClientHttpConnector secondConnector=mock(ClientHttpConnector.class);
    given(secondConnector.connect(any(),any(),any())).willReturn(Mono.just(response));
    WebClient.Builder secondBuilder=context.getBean(WebClient.Builder.class);
    secondBuilder.clientConnector(secondConnector).baseUrl("http://second.example.org");
    assertThat(firstBuilder).isNotEqualTo(secondBuilder);
    firstBuilder.build().get().uri("/foo").exchange().block();
    secondBuilder.build().get().uri("/foo").exchange().block();
    verify(firstConnector).connect(eq(HttpMethod.GET),eq(URI.create("http://first.example.org/foo")),any());
    verify(secondConnector).connect(eq(HttpMethod.GET),eq(URI.create("http://second.example.org/foo")),any());
    WebClientCustomizer customizer=context.getBean("webClientCustomizer",WebClientCustomizer.class);
    verify(customizer,times(1)).customize(any(WebClient.Builder.class));
  }
);
}
