@Test public void simpleMetadata() throws IOException {
  RawConfigurationMetadata rawMetadata=readFor("foo");
  List<ConfigurationMetadataSource> sources=rawMetadata.getSources();
  assertThat(sources).hasSize(2);
  List<ConfigurationMetadataItem> items=rawMetadata.getItems();
  assertThat(items).hasSize(4);
  List<ConfigurationMetadataHint> hints=rawMetadata.getHints();
  assertThat(hints).hasSize(1);
  ConfigurationMetadataSource source=sources.get(0);
  assertSource(source,"spring.foo","org.acme.Foo","org.acme.config.FooApp");
  assertThat(source.getSourceMethod()).isEqualTo("foo()");
  assertThat(source.getDescription()).isEqualTo("This is Foo.");
  assertThat(source.getShortDescription()).isEqualTo("This is Foo.");
  ConfigurationMetadataItem item=items.get(0);
  assertProperty(item,"spring.foo.name","name",String.class,null);
  assertItem(item,"org.acme.Foo");
  ConfigurationMetadataItem item2=items.get(1);
  assertProperty(item2,"spring.foo.description","description",String.class,"FooBar");
  assertThat(item2.getDescription()).isEqualTo("Foo description.");
  assertThat(item2.getShortDescription()).isEqualTo("Foo description.");
  assertThat(item2.getSourceMethod()).isNull();
  assertItem(item2,"org.acme.Foo");
  ConfigurationMetadataHint hint=hints.get(0);
  assertThat(hint.getId()).isEqualTo("spring.foo.counter");
  assertThat(hint.getValueHints()).hasSize(1);
  ValueHint valueHint=hint.getValueHints().get(0);
  assertThat(valueHint.getValue()).isEqualTo(42);
  assertThat(valueHint.getDescription()).isEqualTo("Because that's the answer to any question, choose it. \nReally.");
  assertThat(valueHint.getShortDescription()).isEqualTo("Because that's the answer to any question, choose it.");
  assertThat(hint.getValueProviders()).hasSize(1);
  ValueProvider valueProvider=hint.getValueProviders().get(0);
  assertThat(valueProvider.getName()).isEqualTo("handle-as");
  assertThat(valueProvider.getParameters()).hasSize(1);
  assertThat(valueProvider.getParameters().get("target")).isEqualTo(Integer.class.getName());
}
