@Test(timeout=60000) public void testContainerReleasedByNode() throws Exception {
  System.out.println("Starting testContainerReleasedByNode");
  YarnConfiguration conf=getConf();
  MockRM rm1=new MockRM(conf);
  try {
    rm1.start();
    RMApp app1=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",-1,null,"Test",false,true);
    MockNM nm1=new MockNM("127.0.0.1:1234",10240,rm1.getResourceTrackerService());
    nm1.registerNode();
    MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
    am1.allocate("127.0.0.1",8192,1,new ArrayList<ContainerId>());
    nm1.nodeHeartbeat(true);
    List<Container> containers=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
    while (containers.isEmpty()) {
      Thread.sleep(10);
      nm1.nodeHeartbeat(true);
      containers=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
    }
    ContainerId cid=containers.get(0).getId();
    List<ContainerId> releasedContainers=new ArrayList<>(1);
    releasedContainers.add(cid);
    List<ContainerStatus> completedContainers=am1.allocate(new ArrayList<ResourceRequest>(),releasedContainers).getCompletedContainersStatuses();
    while (completedContainers.isEmpty()) {
      Thread.sleep(10);
      completedContainers=am1.allocate(new ArrayList<ResourceRequest>(),releasedContainers).getCompletedContainersStatuses();
    }
    containers=am1.allocate("127.0.0.1",8192,1,new ArrayList<ContainerId>()).getAllocatedContainers();
    nm1.nodeHeartbeat(true);
    while (containers.isEmpty()) {
      Thread.sleep(10);
      nm1.nodeHeartbeat(true);
      containers=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
    }
    cid=containers.get(0).getId();
    nm1.nodeHeartbeat(cid.getApplicationAttemptId(),cid.getContainerId(),ContainerState.RUNNING);
    rm1.waitForState(nm1,cid,RMContainerState.RUNNING);
    releasedContainers.clear();
    releasedContainers.add(cid);
    completedContainers=am1.allocate(new ArrayList<ResourceRequest>(),releasedContainers).getCompletedContainersStatuses();
    while (completedContainers.isEmpty()) {
      Thread.sleep(10);
      completedContainers=am1.allocate(new ArrayList<ResourceRequest>(),releasedContainers).getCompletedContainersStatuses();
    }
    containers=am1.allocate("127.0.0.1",8192,1,new ArrayList<ContainerId>()).getAllocatedContainers();
    nm1.nodeHeartbeat(true);
    Assert.assertTrue("new container allocated before node freed old",containers.isEmpty());
    for (int i=0; i < 10; ++i) {
      Thread.sleep(10);
      containers=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
      nm1.nodeHeartbeat(true);
      Assert.assertTrue("new container allocated before node freed old",containers.isEmpty());
    }
    nm1.nodeHeartbeat(cid.getApplicationAttemptId(),cid.getContainerId(),ContainerState.COMPLETE);
    containers=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
    while (containers.isEmpty()) {
      Thread.sleep(10);
      nm1.nodeHeartbeat(true);
      containers=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
    }
  }
  finally {
    rm1.stop();
    System.out.println("Stopping testContainerReleasedByNode");
  }
}
