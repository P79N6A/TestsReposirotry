/** 
 * Test when number of live nodes are less than the "dfs.client.block.write.replace-datanode-on-failure.min.replication".
 */
@Test public void testLessNumberOfLiveDatanodesThanWriteReplaceDatanodeOnFailureRF() throws Exception {
  final MiniDFSCluster cluster=setupCluster(2);
  try {
    final DistributedFileSystem fs=cluster.getFileSystem();
    final Path dir=new Path(DIR);
    final SlowWriter[] slowwriters=new SlowWriter[1];
    for (int i=1; i <= slowwriters.length; i++) {
      slowwriters[i - 1]=new SlowWriter(fs,new Path(dir,"file" + i),i * 200L);
    }
    for (    SlowWriter s : slowwriters) {
      s.start();
    }
    sleepSeconds(1);
    cluster.stopDataNode(0);
    cluster.stopDataNode(0);
    sleepSeconds(20);
    for (    SlowWriter s : slowwriters) {
      try {
        s.out.getCurrentBlockReplication();
        Assert.fail("Must throw exception as failed to add a new datanode for write " + "pipeline, minimum failure replication");
      }
 catch (      IOException e) {
      }
      s.interruptRunning();
    }
    for (    SlowWriter s : slowwriters) {
      s.joinAndClose();
    }
    verifyFileContent(fs,slowwriters);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
