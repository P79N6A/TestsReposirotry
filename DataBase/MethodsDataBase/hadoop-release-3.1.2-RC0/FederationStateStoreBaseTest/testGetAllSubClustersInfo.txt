@Test public void testGetAllSubClustersInfo() throws Exception {
  SubClusterId subClusterId1=SubClusterId.newInstance("SC1");
  SubClusterInfo subClusterInfo1=createSubClusterInfo(subClusterId1);
  SubClusterId subClusterId2=SubClusterId.newInstance("SC2");
  SubClusterInfo subClusterInfo2=createSubClusterInfo(subClusterId2);
  stateStore.registerSubCluster(SubClusterRegisterRequest.newInstance(subClusterInfo1));
  stateStore.registerSubCluster(SubClusterRegisterRequest.newInstance(subClusterInfo2));
  stateStore.subClusterHeartbeat(SubClusterHeartbeatRequest.newInstance(subClusterId1,SubClusterState.SC_RUNNING,"capability"));
  stateStore.subClusterHeartbeat(SubClusterHeartbeatRequest.newInstance(subClusterId2,SubClusterState.SC_UNHEALTHY,"capability"));
  List<SubClusterInfo> subClustersActive=stateStore.getSubClusters(GetSubClustersInfoRequest.newInstance(true)).getSubClusters();
  List<SubClusterInfo> subClustersAll=stateStore.getSubClusters(GetSubClustersInfoRequest.newInstance(false)).getSubClusters();
  Assert.assertEquals(1,subClustersActive.size());
  SubClusterInfo sc1=subClustersActive.get(0);
  Assert.assertEquals(subClusterId1,sc1.getSubClusterId());
  Assert.assertEquals(2,subClustersAll.size());
  Assert.assertTrue(subClustersAll.contains(sc1));
  subClustersAll.remove(sc1);
  SubClusterInfo sc2=subClustersAll.get(0);
  Assert.assertEquals(subClusterId2,sc2.getSubClusterId());
}
