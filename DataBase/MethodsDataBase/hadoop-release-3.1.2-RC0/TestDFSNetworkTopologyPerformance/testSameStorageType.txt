/** 
 * There is only one storage type (DISK) in the cluster. And tries to select a DISK devices every time also. One approach will always succeed in one call. This test shows how bad the new approach is compared to the optimal situation.
 * @throws Exception
 */
@Test public void testSameStorageType() throws Exception {
  for (int i=0; i < NODE_NUM; i++) {
    types[i]=StorageType.DISK;
  }
  addNodeByTypes(types);
  Thread.sleep(1000);
  printMemUsage("before test1");
  totalStart=System.nanoTime();
  totalTrials=0;
  for (int i=0; i < OP_NUM; i++) {
    do {
      totalTrials+=1;
      node=cluster.chooseRandom("",excluded);
      assertNotNull(node);
      if (isType(node,StorageType.DISK)) {
        break;
      }
      excluded.add(node);
    }
 while (true);
    excluded.clear();
  }
  totalEnd=System.nanoTime();
  totalMs=(totalEnd - totalStart) / NS_TO_MS;
  LOG.info("total time: {} avg time: {} avg trials: {}",totalMs,totalMs / OP_NUM,(float)totalTrials / OP_NUM);
  Thread.sleep(1000);
  printMemUsage("after test1 before test2");
  totalStart=System.nanoTime();
  for (int i=0; i < OP_NUM; i++) {
    node=dfscluster.chooseRandomWithStorageType("",excluded,StorageType.DISK);
    assertNotNull(node);
    assertTrue(isType(node,StorageType.DISK));
  }
  totalEnd=System.nanoTime();
  totalMs=(totalEnd - totalStart) / NS_TO_MS;
  LOG.info("total time: {} avg time: {}",totalMs,totalMs / OP_NUM);
  printMemUsage("after test2");
}
