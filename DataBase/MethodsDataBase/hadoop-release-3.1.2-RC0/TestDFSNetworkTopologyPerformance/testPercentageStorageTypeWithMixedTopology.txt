/** 
 * Similar to the previous test, change the percentage value to understand the performance of the mixed approach. More specifically, this test takes the approach that, it uses old approach for the first try, only if the old approach failed in the first try, it makes another call with the new approach. There is no comparison within this test.
 * @throws Exception
 */
@Test public void testPercentageStorageTypeWithMixedTopology() throws Exception {
  double percentage=0.9;
  for (int i=0; i < NODE_NUM; i++) {
    if (coinFlip(percentage)) {
      types[i]=StorageType.ARCHIVE;
    }
 else {
      types[i]=StorageType.DISK;
    }
  }
  addNodeByTypes(types);
  Thread.sleep(1000);
  printMemUsage("before test1");
  totalStart=System.nanoTime();
  totalTrials=0;
  for (int i=0; i < OP_NUM; i++) {
    localStart=System.nanoTime();
    totalTrials+=1;
    node=cluster.chooseRandom("",excluded);
    assertNotNull(node);
    if (!isType(node,StorageType.ARCHIVE)) {
      totalTrials+=1;
      excluded.add(node);
      node=dfscluster.chooseRandomWithStorageType("",excluded,StorageType.ARCHIVE);
    }
    assertTrue(isType(node,StorageType.ARCHIVE));
    excluded.clear();
    localEnd=System.nanoTime();
    records[i]=localEnd - localStart;
  }
  totalEnd=System.nanoTime();
  totalMs=(totalEnd - totalStart) / NS_TO_MS;
  LOG.info("total time: {} avg time: {} avg trials: {}",totalMs,totalMs / OP_NUM,(float)totalTrials / OP_NUM);
  Thread.sleep(1000);
  printMemUsage("test StorageType with mixed topology.");
}
