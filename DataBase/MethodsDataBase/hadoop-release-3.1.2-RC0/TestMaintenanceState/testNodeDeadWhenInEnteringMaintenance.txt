/** 
 * When a node is put to maintenance, it first transitions to AdminStates.ENTERING_MAINTENANCE. It makes sure all blocks have minimal replication before it can be transitioned to AdminStates.IN_MAINTENANCE. If node becomes dead when it is in AdminStates.ENTERING_MAINTENANCE, it should stay in AdminStates.ENTERING_MAINTENANCE state.
 */
@Test(timeout=360000) public void testNodeDeadWhenInEnteringMaintenance() throws Exception {
  LOG.info("Starting testNodeDeadWhenInEnteringMaintenance");
  final int numNamenodes=1;
  final int numDatanodes=1;
  final int replicas=1;
  final Path file=new Path("/testNodeDeadWhenInEnteringMaintenance.dat");
  startCluster(numNamenodes,numDatanodes);
  final FileSystem fileSys=getCluster().getFileSystem(0);
  final FSNamesystem ns=getCluster().getNamesystem(0);
  writeFile(fileSys,file,replicas,1);
  DatanodeInfo nodeOutofService=takeNodeOutofService(0,getFirstBlockFirstReplicaUuid(fileSys,file),Long.MAX_VALUE,null,AdminStates.ENTERING_MAINTENANCE);
  assertEquals(1,ns.getNumEnteringMaintenanceDataNodes());
  MiniDFSCluster.DataNodeProperties dnProp=getCluster().stopDataNode(nodeOutofService.getXferAddr());
  DFSTestUtil.waitForDatanodeState(getCluster(),nodeOutofService.getDatanodeUuid(),false,20000);
  DFSClient client=getDfsClient(0);
  assertEquals("maintenance node shouldn't be live",numDatanodes - 1,client.datanodeReport(DatanodeReportType.LIVE).length);
  assertEquals(1,ns.getNumEnteringMaintenanceDataNodes());
  getCluster().restartDataNode(dnProp,true);
  getCluster().waitActive();
  waitNodeState(nodeOutofService,AdminStates.ENTERING_MAINTENANCE);
  assertEquals(1,ns.getNumEnteringMaintenanceDataNodes());
  assertEquals("maintenance node should be live",numDatanodes,client.datanodeReport(DatanodeReportType.LIVE).length);
  cleanupFile(fileSys,file);
}
