/** 
 * Verify the following scenario. a. Put a live node to maintenance => 1 maintenance, 2 live. b. The maintenance node becomes dead => block map still has 1 maintenance, 2 live. c. Take the node out of maintenance => NN should schedule the replication and end up with 3 live.
 */
@Test(timeout=360000) public void testTakeDeadNodeOutOfMaintenance() throws Exception {
  LOG.info("Starting testTakeDeadNodeOutOfMaintenance");
  final int numNamenodes=1;
  final int numDatanodes=4;
  startCluster(numNamenodes,numDatanodes);
  final Path file=new Path("/testTakeDeadNodeOutOfMaintenance.dat");
  final int replicas=3;
  final FileSystem fileSys=getCluster().getFileSystem(0);
  final FSNamesystem ns=getCluster().getNamesystem(0);
  writeFile(fileSys,file,replicas,1);
  final DatanodeInfo nodeOutofService=takeNodeOutofService(0,getFirstBlockFirstReplicaUuid(fileSys,file),Long.MAX_VALUE,null,AdminStates.IN_MAINTENANCE);
  checkWithRetry(ns,fileSys,file,replicas - 1,nodeOutofService);
  final DFSClient client=getDfsClient(0);
  assertEquals("All datanodes must be alive",numDatanodes,client.datanodeReport(DatanodeReportType.LIVE).length);
  getCluster().stopDataNode(nodeOutofService.getXferAddr());
  DFSTestUtil.waitForDatanodeState(getCluster(),nodeOutofService.getDatanodeUuid(),false,20000);
  assertEquals("maintenance node shouldn't be alive",numDatanodes - 1,client.datanodeReport(DatanodeReportType.LIVE).length);
  checkWithRetry(ns,fileSys,file,replicas - 1,nodeOutofService);
  putNodeInService(0,nodeOutofService.getDatanodeUuid());
  checkWithRetry(ns,fileSys,file,replicas,nodeOutofService,null);
  cleanupFile(fileSys,file);
}
