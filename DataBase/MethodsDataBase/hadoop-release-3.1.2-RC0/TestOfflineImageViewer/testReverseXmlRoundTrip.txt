/** 
 * Tests the ReverseXML processor. 1. Translate fsimage -> reverseImage.xml 2. Translate reverseImage.xml -> reverseImage 3. Translate reverseImage -> reverse2Image.xml 4. Verify that reverseImage.xml and reverse2Image.xml match
 * @throws Throwable
 */
@Test public void testReverseXmlRoundTrip() throws Throwable {
  GenericTestUtils.setLogLevel(OfflineImageReconstructor.LOG,Level.TRACE);
  File reverseImageXml=new File(tempDir,"reverseImage.xml");
  File reverseImage=new File(tempDir,"reverseImage");
  File reverseImage2Xml=new File(tempDir,"reverseImage2.xml");
  LOG.info("Creating reverseImage.xml=" + reverseImageXml.getAbsolutePath() + ", reverseImage="+ reverseImage.getAbsolutePath()+ ", reverseImage2Xml="+ reverseImage2Xml.getAbsolutePath());
  if (OfflineImageViewerPB.run(new String[]{"-p","XML","-i",originalFsimage.getAbsolutePath(),"-o",reverseImageXml.getAbsolutePath()}) != 0) {
    throw new IOException("oiv returned failure creating first XML file.");
  }
  if (OfflineImageViewerPB.run(new String[]{"-p","ReverseXML","-i",reverseImageXml.getAbsolutePath(),"-o",reverseImage.getAbsolutePath()}) != 0) {
    throw new IOException("oiv returned failure recreating fsimage file.");
  }
  if (OfflineImageViewerPB.run(new String[]{"-p","XML","-i",reverseImage.getAbsolutePath(),"-o",reverseImage2Xml.getAbsolutePath()}) != 0) {
    throw new IOException("oiv returned failure creating second " + "XML file.");
  }
  Assert.assertEquals("",GenericTestUtils.getFilesDiff(reverseImageXml,reverseImage2Xml));
}
