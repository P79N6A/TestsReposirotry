/** 
 * Test  {@link DatasetVolumeChecker#checkVolume} propagates thecheck to the delegate checker.
 * @throws Exception
 */
@Test(timeout=10000) public void testCheckOneVolume() throws Exception {
  LOG.info("Executing {}",testName.getMethodName());
  final FsVolumeSpi volume=makeVolumes(1,expectedVolumeHealth).get(0);
  final DatasetVolumeChecker checker=new DatasetVolumeChecker(new HdfsConfiguration(),new FakeTimer());
  checker.setDelegateChecker(new DummyChecker());
  final AtomicLong numCallbackInvocations=new AtomicLong(0);
  boolean result=checker.checkVolume(volume,new DatasetVolumeChecker.Callback(){
    @Override public void call(    Set<FsVolumeSpi> healthyVolumes,    Set<FsVolumeSpi> failedVolumes){
      numCallbackInvocations.incrementAndGet();
      if (expectedVolumeHealth != null && expectedVolumeHealth != FAILED) {
        assertThat(healthyVolumes.size(),is(1));
        assertThat(failedVolumes.size(),is(0));
      }
 else {
        assertThat(healthyVolumes.size(),is(0));
        assertThat(failedVolumes.size(),is(1));
      }
    }
  }
);
  GenericTestUtils.waitFor(() -> numCallbackInvocations.get() > 0,5,10000);
  verify(volume,times(1)).check(anyObject());
  if (result) {
    assertThat(numCallbackInvocations.get(),is(1L));
  }
}
