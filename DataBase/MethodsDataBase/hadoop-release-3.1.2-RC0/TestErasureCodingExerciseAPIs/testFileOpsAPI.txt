/** 
 * FileSystem.[create, open, append, concat, getFileChecksum, rename, delete] API call should succeed without failure.
 * @throws IOException if any IO operation failed.
 */
@Test public void testFileOpsAPI() throws IOException {
  Path p=new Path("/fileTest");
  fs.mkdirs(p);
  Path f1=new Path(p,"file1");
  Path fa=new Path(p,"filea");
  try (DataOutputStream dos=fs.create(f1)){
    dos.writeBytes("create with some content");
  }
   try (DataOutputStream dos=fs.create(fa)){
    dos.writeBytes("create with some content");
  }
   short replication=fs.getDefaultReplication();
  fs.setReplication(f1,(short)5);
  assertEquals(replication,fs.getDefaultReplication(f1));
  BlockLocation[] locations=fs.getFileBlockLocations(f1,0,1);
  assertEquals(1,locations.length);
  FileStatus status1=fs.getFileStatus(f1);
  assertFalse(status1.isDirectory());
  assertTrue(status1.getPath().toString().contains(p.toString()));
  FileStatus statusa=fs.getFileStatus(fa);
  assertFalse(statusa.isDirectory());
  assertTrue(statusa.getPath().toString().contains(fa.toString()));
  FileStatus[] statuses=fs.listStatus(p);
  assertEquals(2,statuses.length);
  assertEquals(status1,statuses[0]);
  assertEquals(statusa,statuses[1]);
  RemoteIterator<FileStatus> iter=fs.listStatusIterator(p);
  assertEquals(status1,iter.next());
  assertEquals(statusa,iter.next());
  assertFalse(iter.hasNext());
  Path[] concatPs=new Path[]{new Path(p,"c1"),new Path(p,"c2"),new Path(p,"c3")};
  for (  Path cp : concatPs) {
    try (DataOutputStream dos=fs.create(cp)){
      dos.writeBytes("concat some content");
    }
   }
  fs.concat(f1,concatPs);
  FileChecksum checksum1=fs.getFileChecksum(f1);
  Path f2=new Path("/fileTest/file2");
  fs.rename(f1,f2);
  FileStatus fileStatus=fs.getFileStatus(f2);
  assertTrue(fileStatus.getPath().toString().contains("/fileTest/file2"));
  FileChecksum checksum2=fs.getFileChecksum(f2);
  assertEquals(checksum1,checksum2);
  fs.delete(f2,true);
  RemoteIterator<Path> corruptFileBlocks=fs.listCorruptFileBlocks(f2);
  assertFalse(corruptFileBlocks.hasNext());
}
