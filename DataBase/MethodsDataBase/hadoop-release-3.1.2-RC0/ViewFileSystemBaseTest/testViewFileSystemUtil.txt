@Test(expected=NotInMountpointException.class) public void testViewFileSystemUtil() throws Exception {
  Configuration newConf=new Configuration(conf);
  FileSystem fileSystem=FileSystem.get(FsConstants.LOCAL_FS_URI,newConf);
  Assert.assertFalse("Unexpected FileSystem: " + fileSystem,ViewFileSystemUtil.isViewFileSystem(fileSystem));
  fileSystem=FileSystem.get(FsConstants.VIEWFS_URI,newConf);
  Assert.assertTrue("Unexpected FileSystem: " + fileSystem,ViewFileSystemUtil.isViewFileSystem(fileSystem));
  Map<MountPoint,FsStatus> mountPointFsStatusMap=ViewFileSystemUtil.getStatus(fileSystem,InodeTree.SlashPath);
  Assert.assertEquals(getExpectedMountPoints(),mountPointFsStatusMap.size());
  mountPointFsStatusMap=ViewFileSystemUtil.getStatus(fileSystem,new Path("/internalDir"));
  Assert.assertEquals(getExpectedMountPoints(),mountPointFsStatusMap.size());
  mountPointFsStatusMap=ViewFileSystemUtil.getStatus(fileSystem,new Path("/user"));
  Assert.assertEquals(1,mountPointFsStatusMap.size());
  for (  Entry<MountPoint,FsStatus> entry : mountPointFsStatusMap.entrySet()) {
    Assert.assertEquals(entry.getKey().getMountedOnPath().toString(),"/user");
  }
  mountPointFsStatusMap=ViewFileSystemUtil.getStatus(fileSystem,new Path("/user/cloud"));
  Assert.assertEquals(1,mountPointFsStatusMap.size());
  for (  Entry<MountPoint,FsStatus> entry : mountPointFsStatusMap.entrySet()) {
    Assert.assertEquals(entry.getKey().getMountedOnPath().toString(),"/user");
  }
  mountPointFsStatusMap=ViewFileSystemUtil.getStatus(fileSystem,new Path("/internalDir/internalDir2"));
  Assert.assertEquals(getExpectedMountPoints(),mountPointFsStatusMap.size());
  mountPointFsStatusMap=ViewFileSystemUtil.getStatus(fileSystem,new Path("viewfs:/user/"));
  Assert.assertEquals(1,mountPointFsStatusMap.size());
  for (  Entry<MountPoint,FsStatus> entry : mountPointFsStatusMap.entrySet()) {
    Assert.assertEquals(entry.getKey().getMountedOnPath().toString(),"/user");
  }
  ViewFileSystemUtil.getStatus(fileSystem,new Path("/non-existing"));
}
