/** 
 * Test concurrent append and scan.
 * @throws Exception
 */
@Test(timeout=120000) public void testAppendWhileScanning() throws Exception {
  GenericTestUtils.setLogLevel(DataNode.LOG,Level.ALL);
  Configuration conf=new Configuration();
  conf.setLong(DFS_BLOCK_SCANNER_VOLUME_BYTES_PER_SECOND,1048576);
  conf.setLong(DFS_DATANODE_SCAN_PERIOD_HOURS_KEY,100L);
  conf.set(INTERNAL_VOLUME_SCANNER_SCAN_RESULT_HANDLER,TestScanResultHandler.class.getName());
  conf.setLong(INTERNAL_DFS_BLOCK_SCANNER_CURSOR_SAVE_INTERVAL_MS,0L);
  final int numExpectedFiles=1;
  final int numExpectedBlocks=1;
  final int numNameServices=1;
  final int initialFileLength=2 * 1024 * 1024 + 100;
  final TestContext ctx=new TestContext(conf,numNameServices);
  ctx.createFiles(0,numExpectedFiles,initialFileLength);
  final TestScanResultHandler.Info info=TestScanResultHandler.getInfo(ctx.volumes.get(0));
  String storageID=ctx.volumes.get(0).getStorageID();
synchronized (info) {
    info.sem=new Semaphore(numExpectedBlocks * 2);
    info.shouldRun=true;
    info.notify();
  }
  waitForRescan(info,numExpectedBlocks);
  conf.setLong(DFS_BLOCK_SCANNER_VOLUME_BYTES_PER_SECOND,initialFileLength + 32 * 1024);
  BlockScanner.Conf newConf=new BlockScanner.Conf(conf);
  ctx.datanode.getBlockScanner().setConf(newConf);
  ExtendedBlock first=ctx.getFileBlock(0,0);
  ctx.datanode.getBlockScanner().markSuspectBlock(storageID,first);
  FileSystem fs=ctx.cluster.getFileSystem();
  FSDataOutputStream os=fs.append(ctx.getPath(0));
  long seed=-1;
  int size=200;
  final byte[] bytes=AppendTestUtil.randomBytes(seed,size);
  os.write(bytes);
  os.hflush();
  os.close();
  waitForRescan(info,numExpectedBlocks);
  GenericTestUtils.setLogLevel(DataNode.LOG,Level.INFO);
  ctx.close();
}
