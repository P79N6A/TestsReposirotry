/** 
 * Verify local node selection with using DFSNetworkTopology.
 */
@Test public void testPlacementWithDFSNetworkTopology() throws Exception {
  Configuration conf=new HdfsConfiguration();
  final String[] racks={"/RACK0","/RACK0","/RACK2","/RACK3","/RACK2"};
  final String[] hosts={"/host0","/host1","/host2","/host3","/host4"};
  conf.setBoolean(DFSConfigKeys.DFS_USE_DFS_NETWORK_TOPOLOGY_KEY,true);
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,DEFAULT_BLOCK_SIZE);
  conf.setInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,DEFAULT_BLOCK_SIZE / 2);
  if (cluster != null) {
    cluster.shutdown();
  }
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(5).racks(racks).hosts(hosts).build();
  cluster.waitActive();
  nameNodeRpc=cluster.getNameNodeRpc();
  namesystem=cluster.getNamesystem();
  DatanodeManager dm=namesystem.getBlockManager().getDatanodeManager();
  assertTrue(dm.getNetworkTopology() instanceof DFSNetworkTopology);
  String clientMachine="/host3";
  String clientRack="/RACK3";
  String src="/test";
  HdfsFileStatus fileStatus=namesystem.startFile(src,perm,clientMachine,clientMachine,EnumSet.of(CreateFlag.CREATE),true,REPLICATION_FACTOR,DEFAULT_BLOCK_SIZE,null,null,false);
  LocatedBlock locatedBlock=nameNodeRpc.addBlock(src,clientMachine,null,null,fileStatus.getFileId(),null,null);
  assertEquals("Block should be allocated sufficient locations",REPLICATION_FACTOR,locatedBlock.getLocations().length);
  assertEquals("First datanode should be rack local",clientRack,locatedBlock.getLocations()[0].getNetworkLocation());
  nameNodeRpc.abandonBlock(locatedBlock.getBlock(),fileStatus.getFileId(),src,clientMachine);
}
