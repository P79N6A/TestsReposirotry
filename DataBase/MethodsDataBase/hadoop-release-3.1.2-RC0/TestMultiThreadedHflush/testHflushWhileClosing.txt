/** 
 * Test case where a bunch of threads are continuously calling hflush() while another thread appends some data and then closes the file. The hflushing threads should eventually catch an IOException stating that the stream was closed -- and not an NPE or anything like that.
 */
@Test public void testHflushWhileClosing() throws Throwable {
  Configuration conf=new Configuration();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
  FileSystem fs=cluster.getFileSystem();
  Path p=new Path("/hflush-and-close.dat");
  final FSDataOutputStream stm=createFile(fs,p,1);
  ArrayList<Thread> flushers=new ArrayList<Thread>();
  final AtomicReference<Throwable> thrown=new AtomicReference<Throwable>();
  try {
    for (int i=0; i < 10; i++) {
      Thread flusher=new Thread(){
        @Override public void run(){
          try {
            while (true) {
              try {
                stm.hflush();
              }
 catch (              ClosedChannelException ioe) {
                return;
              }
            }
          }
 catch (          Throwable t) {
            thrown.set(t);
          }
        }
      }
;
      flusher.start();
      flushers.add(flusher);
    }
    for (int i=0; i < 10000; i++) {
      stm.write(1);
    }
    stm.close();
    for (    Thread t : flushers) {
      t.join();
    }
    if (thrown.get() != null) {
      throw thrown.get();
    }
  }
  finally {
    fs.close();
    cluster.shutdown();
  }
}
