@Test public void testTrackDeepDirectoryStructureToRemote() throws Exception {
  describe("copy a deep directory structure from local to remote");
  Path destDir=distCpDeepDirectoryStructure(localFS,localDir,remoteFS,remoteDir);
  ContractTestUtils.assertIsDirectory(remoteFS,destDir);
  describe("Now do an incremental update and save of missing files");
  Path srcDir=inputDir;
  Path trackDir=new Path(localDir,"trackDir");
  describe("\nDirectories\n");
  lsR("Local to update",localFS,srcDir);
  lsR("Remote before update",remoteFS,destDir);
  ContractTestUtils.assertPathsExist(localFS,"Paths for test are wrong",inputFile2,inputFile3,inputFile4,inputFile5);
  Path inputFileNew1=modifySourceDirectories();
  runDistCp(buildWithStandardOptions(new DistCpOptions.Builder(Collections.singletonList(srcDir),inputDirUnderOutputDir).withTrackMissing(trackDir).withSyncFolder(true).withOverwrite(false)));
  lsR("tracked udpate",remoteFS,destDir);
  Path outputFileNew1=new Path(outputSubDir2,"newfile1");
  ContractTestUtils.assertIsFile(remoteFS,outputFileNew1);
  ContractTestUtils.assertPathExists(localFS,"tracking directory",trackDir);
  Path sortedSourceListing=new Path(trackDir,DistCpConstants.SOURCE_SORTED_FILE);
  ContractTestUtils.assertIsFile(localFS,sortedSourceListing);
  Path sortedTargetListing=new Path(trackDir,DistCpConstants.TARGET_SORTED_FILE);
  ContractTestUtils.assertIsFile(localFS,sortedTargetListing);
  ContractTestUtils.assertPathsExist(remoteFS,"DistCP should have retained",outputFile2,outputFile3,outputFile4,outputSubDir4);
  Map<String,Path> sourceFiles=new HashMap<>(10);
  Map<String,Path> targetFiles=new HashMap<>(10);
  try (SequenceFile.Reader sourceReader=new SequenceFile.Reader(conf,SequenceFile.Reader.file(sortedSourceListing));SequenceFile.Reader targetReader=new SequenceFile.Reader(conf,SequenceFile.Reader.file(sortedTargetListing))){
    CopyListingFileStatus copyStatus=new CopyListingFileStatus();
    Text name=new Text();
    while (sourceReader.next(name,copyStatus)) {
      String key=name.toString();
      Path path=copyStatus.getPath();
      LOG.info("{}: {}",key,path);
      sourceFiles.put(key,path);
    }
    while (targetReader.next(name,copyStatus)) {
      String key=name.toString();
      Path path=copyStatus.getPath();
      LOG.info("{}: {}",key,path);
      targetFiles.put(name.toString(),copyStatus.getPath());
    }
  }
   assertTrue("No " + outputFileNew1 + " in source listing",sourceFiles.containsValue(inputFileNew1));
  assertTrue("No " + outputFileNew1 + " in target listing",targetFiles.containsValue(outputFileNew1));
  assertTrue("No " + outputSubDir4 + " in target listing",targetFiles.containsValue(outputSubDir4));
  assertFalse("Found " + inputSubDir4 + " in source listing",sourceFiles.containsValue(inputSubDir4));
}
