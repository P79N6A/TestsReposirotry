@Test public void test_010_CreateHugeFile() throws IOException {
  long filesize=getTestPropertyBytes(getConfiguration(),KEY_HUGE_FILESIZE,DEFAULT_HUGE_FILESIZE);
  long filesizeMB=filesize / S_1M;
  deleteHugeFile();
  describe("Creating file %s of size %d MB",hugefile,filesizeMB);
  assertEquals("File size set in " + KEY_HUGE_FILESIZE + " = "+ filesize+ " is not a multiple of "+ UPLOAD_BLOCKSIZE,0,filesize % UPLOAD_BLOCKSIZE);
  byte[] data=SOURCE_DATA;
  long blocks=filesize / UPLOAD_BLOCKSIZE;
  long blocksPerMB=S_1M / UPLOAD_BLOCKSIZE;
  NativeAzureFileSystem fs=getFileSystem();
  ContractTestUtils.NanoTimer timer=new ContractTestUtils.NanoTimer();
  long blocksPer10MB=blocksPerMB * 10;
  fs.mkdirs(hugefile.getParent());
  try (FSDataOutputStream out=fs.create(hugefile,true,UPLOAD_BLOCKSIZE,null)){
    for (long block=1; block <= blocks; block++) {
      out.write(data);
      long written=block * UPLOAD_BLOCKSIZE;
      if (block % blocksPer10MB == 0 || written == filesize) {
        long percentage=written * 100 / filesize;
        double elapsedTime=timer.elapsedTime() / NANOSEC;
        double writtenMB=1.0 * written / S_1M;
        LOG.info(String.format("[%02d%%] Buffered %.2f MB out of %d MB;" + " elapsedTime=%.2fs; write to buffer bandwidth=%.2f MB/s",percentage,writtenMB,filesizeMB,elapsedTime,writtenMB / elapsedTime));
      }
    }
    LOG.info("Closing stream {}",out);
    ContractTestUtils.NanoTimer closeTimer=new ContractTestUtils.NanoTimer();
    out.close();
    closeTimer.end("time to close() output stream");
  }
   timer.end("time to write %d MB in blocks of %d",filesizeMB,UPLOAD_BLOCKSIZE);
  logFSState();
  bandwidth(timer,filesize);
  ContractTestUtils.assertPathExists(fs,"Huge file",hugefile);
  FileStatus status=fs.getFileStatus(hugefile);
  ContractTestUtils.assertIsFile(hugefile,status);
  assertEquals("File size in " + status,filesize,status.getLen());
}
