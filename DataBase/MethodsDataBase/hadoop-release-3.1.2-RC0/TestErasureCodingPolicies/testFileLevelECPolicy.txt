/** 
 * Test apply specific erasure coding policy on single file. Usually file's policy is inherited from its parent.
 */
@Test public void testFileLevelECPolicy() throws Exception {
  final Path dirPath=new Path("/striped");
  final Path filePath0=new Path(dirPath,"file0");
  final Path filePath1=new Path(dirPath,"file1");
  fs.mkdirs(dirPath);
  fs.setErasureCodingPolicy(dirPath,ecPolicy.getName());
  fs.createFile(filePath0).build().close();
  ErasureCodingPolicy ecPolicyOnFile=fs.getErasureCodingPolicy(filePath0);
  assertEquals(ecPolicy,ecPolicyOnFile);
  final String illegalPolicyName="RS-DEFAULT-1-2-64k";
  try {
    fs.createFile(filePath1).ecPolicyName(illegalPolicyName).build().close();
    Assert.fail("illegal erasure coding policy should not be found");
  }
 catch (  Exception e) {
    GenericTestUtils.assertExceptionContains("Policy '" + illegalPolicyName + "' does not match any enabled erasure coding policies",e);
  }
  fs.delete(dirPath,true);
  fs.mkdirs(dirPath);
  final ErasureCodingPolicy ecPolicyOnDir=SystemErasureCodingPolicies.getByID(SystemErasureCodingPolicies.RS_3_2_POLICY_ID);
  ecPolicyOnFile=SystemErasureCodingPolicies.getByID(SystemErasureCodingPolicies.RS_6_3_POLICY_ID);
  fs.setErasureCodingPolicy(dirPath,ecPolicyOnDir.getName());
  fs.createFile(filePath0).ecPolicyName(ecPolicyOnFile.getName()).build().close();
  assertEquals(ecPolicyOnFile,fs.getErasureCodingPolicy(filePath0));
  assertEquals(ecPolicyOnDir,fs.getErasureCodingPolicy(dirPath));
  fs.delete(dirPath,true);
}
