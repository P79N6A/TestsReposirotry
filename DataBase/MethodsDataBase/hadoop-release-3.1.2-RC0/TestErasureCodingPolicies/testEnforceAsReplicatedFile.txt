/** 
 * Enforce file as replicated file without regarding its parent's EC policy.
 */
@Test public void testEnforceAsReplicatedFile() throws Exception {
  final Path dirPath=new Path("/striped");
  final Path filePath=new Path(dirPath,"file");
  fs.mkdirs(dirPath);
  fs.setErasureCodingPolicy(dirPath,ecPolicy.getName());
  String ecPolicyName=null;
  final Collection<ErasureCodingPolicyInfo> allPoliciesInfo=fs.getAllErasureCodingPolicies();
  for (  ErasureCodingPolicyInfo info : allPoliciesInfo) {
    if (!ecPolicy.equals(info.getPolicy())) {
      ecPolicyName=info.getPolicy().getName();
      break;
    }
  }
  assertNotNull(ecPolicyName);
  fs.createFile(filePath).build().close();
  assertEquals(ecPolicy,fs.getErasureCodingPolicy(filePath));
  fs.delete(filePath,true);
  fs.createFile(filePath).ecPolicyName(ecPolicyName).build().close();
  assertEquals(ecPolicyName,fs.getErasureCodingPolicy(filePath).getName());
  fs.delete(filePath,true);
  try {
    fs.createFile(filePath).ecPolicyName(ecPolicyName).replicate().build().close();
    Assert.fail("shouldReplicate and ecPolicyName are exclusive " + "parameters. Set both is not allowed.");
  }
 catch (  Exception e) {
    GenericTestUtils.assertExceptionContains("SHOULD_REPLICATE flag and " + "ecPolicyName are exclusive parameters.",e);
  }
  try {
    final DFSClient dfsClient=fs.getClient();
    dfsClient.create(filePath.toString(),null,EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE,CreateFlag.SHOULD_REPLICATE),false,(short)1,1024,null,1024,null,null,ecPolicyName);
    Assert.fail("SHOULD_REPLICATE flag and ecPolicyName are exclusive " + "parameters. Set both is not allowed.");
  }
 catch (  Exception e) {
    GenericTestUtils.assertExceptionContains("SHOULD_REPLICATE flag and " + "ecPolicyName are exclusive parameters. Set both is not allowed!",e);
  }
  fs.createFile(filePath).replicate().build().close();
  assertNull(fs.getErasureCodingPolicy(filePath));
  fs.delete(dirPath,true);
}
