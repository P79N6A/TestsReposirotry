@Test public void testDifferentErasureCodingPolicyCellSize() throws Exception {
  ErasureCodingPolicy newPolicy1=new ErasureCodingPolicy(ErasureCodeConstants.RS_3_2_SCHEMA,8 * 1024);
  ErasureCodingPolicy[] policyArray=new ErasureCodingPolicy[]{newPolicy1};
  AddErasureCodingPolicyResponse[] responses=fs.addErasureCodingPolicies(policyArray);
  assertEquals(1,responses.length);
  assertTrue(responses[0].isSucceed());
  newPolicy1=responses[0].getPolicy();
  ErasureCodingPolicy newPolicy2=new ErasureCodingPolicy(ErasureCodeConstants.RS_3_2_SCHEMA,4 * 1024);
  policyArray=new ErasureCodingPolicy[]{newPolicy2};
  responses=fs.addErasureCodingPolicies(policyArray);
  assertEquals(1,responses.length);
  assertTrue(responses[0].isSucceed());
  newPolicy2=responses[0].getPolicy();
  fs.enableErasureCodingPolicy(newPolicy1.getName());
  fs.enableErasureCodingPolicy(newPolicy2.getName());
  final Path stripedDir1=new Path("/striped1");
  final Path stripedDir2=new Path("/striped2");
  final Path file1=new Path(stripedDir1,"file");
  final Path file2=new Path(stripedDir2,"file");
  fs.mkdirs(stripedDir1);
  fs.setErasureCodingPolicy(stripedDir1,newPolicy1.getName());
  fs.mkdirs(stripedDir2);
  fs.setErasureCodingPolicy(stripedDir2,newPolicy2.getName());
  final int fileLength=BLOCK_SIZE * newPolicy1.getNumDataUnits();
  final byte[] bytes=StripedFileTestUtil.generateBytes(fileLength);
  DFSTestUtil.writeFile(fs,file1,bytes);
  DFSTestUtil.writeFile(fs,file2,bytes);
  fs.delete(stripedDir1,true);
  fs.delete(stripedDir2,true);
}
