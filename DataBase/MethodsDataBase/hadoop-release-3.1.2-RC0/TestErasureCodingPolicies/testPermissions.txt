@Test public void testPermissions() throws Exception {
  UserGroupInformation user=UserGroupInformation.createUserForTesting("ecuser",new String[]{"ecgroup"});
  FileSystem userfs=user.doAs(new PrivilegedExceptionAction<FileSystem>(){
    @Override public FileSystem run() throws Exception {
      return FileSystem.get(conf);
    }
  }
);
  HdfsAdmin useradmin=user.doAs(new PrivilegedExceptionAction<HdfsAdmin>(){
    @Override public HdfsAdmin run() throws Exception {
      return new HdfsAdmin(userfs.getUri(),conf);
    }
  }
);
  Path ecdir=new Path("/ecdir");
  Path ecfile=new Path(ecdir,"ecfile");
  fs.setPermission(new Path("/"),new FsPermission((short)0777));
  userfs.mkdirs(ecdir);
  final String ecPolicyName=ecPolicy.getName();
  useradmin.setErasureCodingPolicy(ecdir,ecPolicyName);
  assertEquals("Policy not present on dir",ecPolicyName,useradmin.getErasureCodingPolicy(ecdir).getName());
  userfs.create(ecfile).close();
  assertEquals("Policy not present on file",ecPolicyName,useradmin.getErasureCodingPolicy(ecfile).getName());
  useradmin.unsetErasureCodingPolicy(ecdir);
  useradmin.setErasureCodingPolicy(ecdir,ecPolicyName);
  userfs.setPermission(ecdir,new FsPermission((short)0555));
  try {
    useradmin.setErasureCodingPolicy(ecdir,ecPolicyName);
    fail("Should not be able to setECPolicy without write permissions");
  }
 catch (  AccessControlException e) {
  }
  try {
    useradmin.unsetErasureCodingPolicy(ecdir);
    fail("Should not be able to unsetECPolicy without write permissions");
  }
 catch (  AccessControlException e) {
  }
  userfs.setPermission(ecdir,new FsPermission((short)0640));
  useradmin.unsetErasureCodingPolicy(ecdir);
  useradmin.setErasureCodingPolicy(ecdir,ecPolicyName);
  UserGroupInformation nobody=UserGroupInformation.createUserForTesting("nobody",new String[]{"nogroup"});
  HdfsAdmin noadmin=nobody.doAs(new PrivilegedExceptionAction<HdfsAdmin>(){
    @Override public HdfsAdmin run() throws Exception {
      return new HdfsAdmin(userfs.getUri(),conf);
    }
  }
);
  try {
    noadmin.setErasureCodingPolicy(ecdir,ecPolicyName);
    fail("Should not be able to setECPolicy without write permissions");
  }
 catch (  AccessControlException e) {
  }
  try {
    noadmin.unsetErasureCodingPolicy(ecdir);
    fail("Should not be able to unsetECPolicy without write permissions");
  }
 catch (  AccessControlException e) {
  }
  try {
    noadmin.getErasureCodingPolicy(ecdir);
    fail("Should not be able to getECPolicy without write permissions");
  }
 catch (  AccessControlException e) {
  }
  userfs.setPermission(ecdir,new FsPermission((short)0000));
  HdfsAdmin superadmin=new HdfsAdmin(fs.getUri(),conf);
  superadmin.unsetErasureCodingPolicy(ecdir);
  superadmin.setErasureCodingPolicy(ecdir,ecPolicyName);
  superadmin.getErasureCodingPolicy(ecdir);
  try {
    useradmin.getErasureCodingPolicy(ecdir);
    fail("Normal user should not have access");
  }
 catch (  AccessControlException e) {
  }
  try {
    useradmin.setErasureCodingPolicy(ecfile,ecPolicyName);
    fail("Normal user should not have access");
  }
 catch (  AccessControlException e) {
  }
  try {
    useradmin.unsetErasureCodingPolicy(ecfile);
    fail("Normal user should not have access");
  }
 catch (  AccessControlException e) {
  }
  useradmin.getErasureCodingPolicies();
  noadmin.getErasureCodingPolicies();
  superadmin.getErasureCodingPolicies();
}
