@Test public void testAddErasureCodingPolicies() throws Exception {
  ECSchema toAddSchema=new ECSchema("testcodec",3,2);
  ErasureCodingPolicy newPolicy=new ErasureCodingPolicy(toAddSchema,128 * 1024);
  ErasureCodingPolicy[] policyArray=new ErasureCodingPolicy[]{newPolicy};
  AddErasureCodingPolicyResponse[] responses=fs.addErasureCodingPolicies(policyArray);
  assertEquals(1,responses.length);
  assertFalse(responses[0].isSucceed());
  toAddSchema=new ECSchema("rs",3,2);
  newPolicy=new ErasureCodingPolicy(toAddSchema,128 * 1024 * 1024);
  policyArray=new ErasureCodingPolicy[]{newPolicy};
  responses=fs.addErasureCodingPolicies(policyArray);
  assertEquals(1,responses.length);
  assertFalse(responses[0].isSucceed());
  toAddSchema=new ECSchema("rs",3,2);
  int[] cellSizes={0,-1,1023};
  for (  int cellSize : cellSizes) {
    try {
      new ErasureCodingPolicy(toAddSchema,cellSize);
      Assert.fail("Invalid cell size should be detected.");
    }
 catch (    Exception e) {
      GenericTestUtils.assertExceptionContains("cellSize must be",e);
    }
  }
  ErasureCodingPolicy policy0=SystemErasureCodingPolicies.getPolicies().get(0);
  policyArray=new ErasureCodingPolicy[]{policy0};
  responses=fs.addErasureCodingPolicies(policyArray);
  assertEquals(1,responses.length);
  assertTrue(responses[0].isSucceed());
  newPolicy=new ErasureCodingPolicy(toAddSchema,4 * 1024 * 1024);
  policyArray=new ErasureCodingPolicy[]{newPolicy};
  responses=fs.addErasureCodingPolicies(policyArray);
  assertEquals(1,responses.length);
  assertTrue(responses[0].isSucceed());
  assertEquals(SystemErasureCodingPolicies.getPolicies().size() + 1,ErasureCodingPolicyManager.getInstance().getPolicies().length);
  UserGroupInformation fakeUGI=UserGroupInformation.createUserForTesting("ProbablyNotARealUserName",new String[]{"ShangriLa"});
  final ErasureCodingPolicy ecPolicy=newPolicy;
  fakeUGI.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      DistributedFileSystem fs=cluster.getFileSystem();
      try {
        fs.addErasureCodingPolicies(new ErasureCodingPolicy[]{ecPolicy});
        fail();
      }
 catch (      AccessControlException ace) {
        GenericTestUtils.assertExceptionContains("Access denied for user " + "ProbablyNotARealUserName. Superuser privilege is required",ace);
      }
      return null;
    }
  }
);
}
