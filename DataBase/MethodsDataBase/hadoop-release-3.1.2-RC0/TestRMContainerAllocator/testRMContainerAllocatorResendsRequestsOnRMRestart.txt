@Test public void testRMContainerAllocatorResendsRequestsOnRMRestart() throws Exception {
  Configuration conf=new Configuration();
  conf.set(YarnConfiguration.RECOVERY_ENABLED,"true");
  conf.set(YarnConfiguration.RM_STORE,MemoryRMStateStore.class.getName());
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
  conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,true);
  conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,0);
  conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE,true);
  conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER,1);
  conf.setInt(MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT,-1);
  MyResourceManager rm1=new MyResourceManager(conf);
  rm1.start();
  RMApp app=rm1.submitApp(1024);
  rm1.drainEvents();
  MockNM nm1=new MockNM("h1:1234",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  nm1.nodeHeartbeat(true);
  rm1.drainEvents();
  ApplicationAttemptId appAttemptId=app.getCurrentAppAttempt().getAppAttemptId();
  rm1.sendAMLaunched(appAttemptId);
  rm1.drainEvents();
  JobId jobId=MRBuilderUtils.newJobId(appAttemptId.getApplicationId(),0);
  Job mockJob=mock(Job.class);
  when(mockJob.getReport()).thenReturn(MRBuilderUtils.newJobReport(jobId,"job","user",JobState.RUNNING,0,0,0,0,0,0,0,"jobfile",null,false,""));
  MyContainerAllocator allocator=new MyContainerAllocator(rm1,conf,appAttemptId,mockJob);
  ContainerRequestEvent event1=ContainerRequestCreator.createRequest(jobId,1,Resource.newInstance(1024,1),new String[]{"h1"});
  allocator.sendRequest(event1);
  ContainerRequestEvent event2=ContainerRequestCreator.createRequest(jobId,2,Resource.newInstance(2048,1),new String[]{"h1","h2"});
  allocator.sendRequest(event2);
  ContainerFailedEvent f1=createFailEvent(jobId,1,"h2",false);
  allocator.sendFailure(f1);
  List<TaskAttemptContainerAssignedEvent> assignedContainers=allocator.schedule();
  rm1.drainEvents();
  Assert.assertEquals("No of assignments must be 0",0,assignedContainers.size());
  assertAsksAndReleases(3,0,rm1);
  assertBlacklistAdditionsAndRemovals(1,0,rm1);
  nm1.nodeHeartbeat(true);
  rm1.drainEvents();
  assignedContainers=allocator.schedule();
  rm1.drainEvents();
  Assert.assertEquals("No of assignments must be 2",2,assignedContainers.size());
  assertAsksAndReleases(0,0,rm1);
  assertBlacklistAdditionsAndRemovals(0,0,rm1);
  assignedContainers=allocator.schedule();
  Assert.assertEquals("No of assignments must be 0",0,assignedContainers.size());
  assertAsksAndReleases(3,0,rm1);
  assertBlacklistAdditionsAndRemovals(0,0,rm1);
  ContainerRequestEvent event3=ContainerRequestCreator.createRequest(jobId,3,Resource.newInstance(1000,1),new String[]{"h1"});
  allocator.sendRequest(event3);
  ContainerAllocatorEvent deallocate1=createDeallocateEvent(jobId,1,false);
  allocator.sendDeallocate(deallocate1);
  assignedContainers=allocator.schedule();
  Assert.assertEquals("No of assignments must be 0",0,assignedContainers.size());
  assertAsksAndReleases(3,1,rm1);
  assertBlacklistAdditionsAndRemovals(0,0,rm1);
  MyResourceManager rm2=new MyResourceManager(conf,rm1.getRMStateStore());
  rm2.start();
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  allocator.updateSchedulerProxy(rm2);
  NodeHeartbeatResponse hbResponse=nm1.nodeHeartbeat(true);
  Assert.assertEquals(NodeAction.RESYNC,hbResponse.getNodeAction());
  nm1=new MockNM("h1:1234",10240,rm2.getResourceTrackerService());
  nm1.registerNode();
  nm1.nodeHeartbeat(true);
  rm2.drainEvents();
  ContainerAllocatorEvent deallocate2=createDeallocateEvent(jobId,2,false);
  allocator.sendDeallocate(deallocate2);
  ContainerFailedEvent f2=createFailEvent(jobId,1,"h3",false);
  allocator.sendFailure(f2);
  ContainerRequestEvent event4=ContainerRequestCreator.createRequest(jobId,4,Resource.newInstance(2000,1),new String[]{"h1","h2"});
  allocator.sendRequest(event4);
  allocator.schedule();
  rm2.drainEvents();
  ContainerRequestEvent event5=ContainerRequestCreator.createRequest(jobId,5,Resource.newInstance(3000,1),new String[]{"h1","h2","h3"});
  allocator.sendRequest(event5);
  assignedContainers=allocator.schedule();
  rm2.drainEvents();
  assertAsksAndReleases(3,2,rm2);
  assertBlacklistAdditionsAndRemovals(2,0,rm2);
  nm1.nodeHeartbeat(true);
  rm2.drainEvents();
  assignedContainers=allocator.schedule();
  rm2.drainEvents();
  Assert.assertEquals("Number of container should be 3",3,assignedContainers.size());
  for (  TaskAttemptContainerAssignedEvent assig : assignedContainers) {
    Assert.assertTrue("Assigned count not correct","h1".equals(assig.getContainer().getNodeId().getHost()));
  }
  rm1.stop();
  rm2.stop();
}
