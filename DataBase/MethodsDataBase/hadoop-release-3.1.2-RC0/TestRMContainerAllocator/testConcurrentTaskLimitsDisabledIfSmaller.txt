@Test public void testConcurrentTaskLimitsDisabledIfSmaller() throws Exception {
  final int MAP_COUNT=1;
  final int REDUCE_COUNT=1;
  final int MAP_LIMIT=1;
  final int REDUCE_LIMIT=1;
  Configuration conf=new Configuration();
  conf.setInt(MRJobConfig.JOB_RUNNING_MAP_LIMIT,MAP_LIMIT);
  conf.setInt(MRJobConfig.JOB_RUNNING_REDUCE_LIMIT,REDUCE_LIMIT);
  conf.setFloat(MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART,0.0f);
  ApplicationId appId=ApplicationId.newInstance(1,1);
  ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,1);
  JobId jobId=MRBuilderUtils.newJobId(appAttemptId.getApplicationId(),0);
  Job mockJob=mock(Job.class);
  when(mockJob.getReport()).thenReturn(MRBuilderUtils.newJobReport(jobId,"job","user",JobState.RUNNING,0,0,0,0,0,0,0,"jobfile",null,false,""));
  when(mockJob.getTotalMaps()).thenReturn(MAP_COUNT);
  when(mockJob.getTotalReduces()).thenReturn(REDUCE_COUNT);
  final MockScheduler mockScheduler=new MockScheduler(appAttemptId);
  MyContainerAllocator allocator=new MyContainerAllocator(null,conf,appAttemptId,mockJob,SystemClock.getInstance()){
    @Override protected void register(){
    }
    @Override protected ApplicationMasterProtocol createSchedulerProxy(){
      return mockScheduler;
    }
    @Override protected void setRequestLimit(    Priority priority,    Resource capability,    int limit){
      Assert.fail("setRequestLimit() should not be invoked");
    }
  }
;
  ContainerRequestEvent[] reqMapEvents=new ContainerRequestEvent[MAP_COUNT];
  for (int i=0; i < reqMapEvents.length; ++i) {
    reqMapEvents[i]=ContainerRequestCreator.createRequest(jobId,i,Resource.newInstance(1024,1),new String[]{"h" + i});
  }
  allocator.sendRequests(Arrays.asList(reqMapEvents));
  ContainerRequestEvent[] reqReduceEvents=new ContainerRequestEvent[REDUCE_COUNT];
  for (int i=0; i < reqReduceEvents.length; ++i) {
    reqReduceEvents[i]=createRequest(jobId,i,Resource.newInstance(1024,1),new String[]{},false,true);
  }
  allocator.sendRequests(Arrays.asList(reqReduceEvents));
  allocator.schedule();
  allocator.schedule();
  allocator.schedule();
  allocator.close();
}
