/** 
 * Tests whether scheduled reducers are excluded from headroom while calculating headroom.
 */
@Test public void testExcludeSchedReducesFromHeadroom() throws Exception {
  LOG.info("Running testExcludeSchedReducesFromHeadroom");
  Configuration conf=new Configuration();
  conf.setInt(MRJobConfig.MR_JOB_REDUCER_UNCONDITIONAL_PREEMPT_DELAY_SEC,-1);
  MyResourceManager rm=new MyResourceManager(conf);
  rm.start();
  RMApp app=rm.submitApp(1024);
  rm.drainEvents();
  MockNM amNodeManager=rm.registerNode("amNM:1234",1260);
  amNodeManager.nodeHeartbeat(true);
  rm.drainEvents();
  ApplicationAttemptId appAttemptId=app.getCurrentAppAttempt().getAppAttemptId();
  rm.sendAMLaunched(appAttemptId);
  rm.drainEvents();
  JobId jobId=MRBuilderUtils.newJobId(appAttemptId.getApplicationId(),0);
  Job mockJob=mock(Job.class);
  when(mockJob.getReport()).thenReturn(MRBuilderUtils.newJobReport(jobId,"job","user",JobState.RUNNING,0,0,0,0,0,0,0,"jobfile",null,false,""));
  Task mockTask=mock(Task.class);
  TaskAttempt mockTaskAttempt=mock(TaskAttempt.class);
  when(mockJob.getTask((TaskId)any())).thenReturn(mockTask);
  when(mockTask.getAttempt((TaskAttemptId)any())).thenReturn(mockTaskAttempt);
  when(mockTaskAttempt.getProgress()).thenReturn(0.01f);
  MyContainerAllocator allocator=new MyContainerAllocator(rm,conf,appAttemptId,mockJob);
  MockNM nodeManager=rm.registerNode("h1:1234",4096);
  rm.drainEvents();
  MockNM nodeManager2=rm.registerNode("h2:1234",1024);
  rm.drainEvents();
  ContainerRequestEvent event1=ContainerRequestCreator.createRequest(jobId,1,Resource.newInstance(1024,1),new String[]{"h1"});
  allocator.sendRequest(event1);
  ContainerRequestEvent event2=ContainerRequestCreator.createRequest(jobId,2,Resource.newInstance(1024,1),new String[]{"h2"});
  allocator.sendRequest(event2);
  ContainerRequestEvent event3=createRequest(jobId,3,Resource.newInstance(1024,1),new String[]{"h1"},false,true);
  allocator.sendRequest(event3);
  allocator.schedule();
  rm.drainEvents();
  ContainerRequestEvent event4=createRequest(jobId,4,Resource.newInstance(1024,1),new String[]{"h3"},false,true);
  allocator.sendRequest(event4);
  allocator.schedule();
  rm.drainEvents();
  nodeManager.nodeHeartbeat(true);
  rm.drainEvents();
  rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(3072,3));
  allocator.schedule();
  rm.drainEvents();
  Assert.assertEquals(2,allocator.getAssignedRequests().maps.size());
  ContainerAllocatorEvent deallocate1=createDeallocateEvent(jobId,1,false);
  allocator.sendDeallocate(deallocate1);
  ContainerAllocatorEvent deallocate2=createDeallocateEvent(jobId,2,false);
  allocator.sendDeallocate(deallocate2);
  Assert.assertEquals(0,allocator.getAssignedRequests().maps.size());
  nodeManager.nodeHeartbeat(true);
  rm.drainEvents();
  rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024,1));
  allocator.schedule();
  rm.drainEvents();
  nodeManager2.nodeHeartbeat(true);
  rm.drainEvents();
  ContainerRequestEvent event5=ContainerRequestCreator.createRequest(jobId,5,Resource.newInstance(1024,1),new String[]{"h1"});
  allocator.sendRequest(event5);
  rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(2048,2));
  allocator.schedule();
  rm.drainEvents();
  Assert.assertEquals(1,allocator.getScheduledRequests().maps.size());
  Assert.assertEquals(1,allocator.getAssignedRequests().reduces.size());
  rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1260,2));
  allocator.schedule();
  rm.drainEvents();
  Assert.assertEquals(1,MyContainerAllocator.getTaskAttemptKillEvents().size());
  Assert.assertEquals(RMContainerAllocator.RAMPDOWN_DIAGNOSTIC,MyContainerAllocator.getTaskAttemptKillEvents().get(0).getMessage());
  Assert.assertEquals(1,allocator.getNumOfPendingReduces());
}
