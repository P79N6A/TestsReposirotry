@Test public void testIgnoreBlacklisting() throws Exception {
  LOG.info("Running testIgnoreBlacklisting");
  Configuration conf=new Configuration();
  conf.setBoolean(MRJobConfig.MR_AM_JOB_NODE_BLACKLISTING_ENABLE,true);
  conf.setInt(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER,1);
  conf.setInt(MRJobConfig.MR_AM_IGNORE_BLACKLISTING_BLACKLISTED_NODE_PERECENT,33);
  MyResourceManager rm=new MyResourceManager(conf);
  rm.start();
  RMApp app=rm.submitApp(1024);
  rm.drainEvents();
  MockNM[] nodeManagers=new MockNM[10];
  int nmNum=0;
  List<TaskAttemptContainerAssignedEvent> assigned=null;
  nodeManagers[nmNum]=registerNodeManager(nmNum++,rm);
  nodeManagers[0].nodeHeartbeat(true);
  rm.drainEvents();
  ApplicationAttemptId appAttemptId=app.getCurrentAppAttempt().getAppAttemptId();
  rm.sendAMLaunched(appAttemptId);
  rm.drainEvents();
  JobId jobId=MRBuilderUtils.newJobId(appAttemptId.getApplicationId(),0);
  Job mockJob=mock(Job.class);
  when(mockJob.getReport()).thenReturn(MRBuilderUtils.newJobReport(jobId,"job","user",JobState.RUNNING,0,0,0,0,0,0,0,"jobfile",null,false,""));
  MyContainerAllocator allocator=new MyContainerAllocator(rm,conf,appAttemptId,mockJob);
  assigned=getContainerOnHost(jobId,1,1024,new String[]{"h1"},nodeManagers[0],allocator,0,0,0,0,rm);
  Assert.assertEquals("No of assignments must be 1",1,assigned.size());
  LOG.info("Failing container _1 on H1 (Node should be blacklisted and" + " ignore blacklisting enabled");
  ContainerFailedEvent f1=createFailEvent(jobId,1,"h1",false);
  allocator.sendFailure(f1);
  assigned=getContainerOnHost(jobId,2,1024,new String[]{"h1"},nodeManagers[0],allocator,1,0,0,1,rm);
  Assert.assertEquals("No of assignments must be 0",0,assigned.size());
  assigned=getContainerOnHost(jobId,2,1024,new String[]{"h1"},nodeManagers[0],allocator,0,0,0,0,rm);
  Assert.assertEquals("No of assignments must be 1",1,assigned.size());
  nodeManagers[nmNum]=registerNodeManager(nmNum++,rm);
  assigned=getContainerOnHost(jobId,3,1024,new String[]{"h2"},nodeManagers[1],allocator,0,0,0,0,rm);
  Assert.assertEquals("No of assignments must be 1",1,assigned.size());
  nodeManagers[nmNum]=registerNodeManager(nmNum++,rm);
  assigned=getContainerOnHost(jobId,4,1024,new String[]{"h3"},nodeManagers[2],allocator,0,0,0,0,rm);
  Assert.assertEquals("No of assignments must be 1",1,assigned.size());
  assigned=getContainerOnHost(jobId,5,1024,new String[]{"h1"},nodeManagers[0],allocator,0,0,0,0,rm);
  Assert.assertEquals("No of assignments must be 1",1,assigned.size());
  nodeManagers[nmNum]=registerNodeManager(nmNum++,rm);
  assigned=getContainerOnHost(jobId,6,1024,new String[]{"h4"},nodeManagers[3],allocator,0,0,1,0,rm);
  Assert.assertEquals("No of assignments must be 1",1,assigned.size());
  assigned=getContainerOnHost(jobId,7,1024,new String[]{"h1"},nodeManagers[0],allocator,0,0,0,0,rm);
  Assert.assertEquals("No of assignments must be 0",0,assigned.size());
  ContainerFailedEvent f2=createFailEvent(jobId,3,"h2",false);
  allocator.sendFailure(f2);
  assigned=getContainerOnHost(jobId,8,1024,new String[]{"h1"},nodeManagers[0],allocator,1,0,0,2,rm);
  Assert.assertEquals("No of assignments must be 0",0,assigned.size());
  assigned=getContainerOnHost(jobId,8,1024,new String[]{"h1"},nodeManagers[0],allocator,0,0,0,0,rm);
  Assert.assertEquals("No of assignments must be 2",2,assigned.size());
  assigned=getContainerOnHost(jobId,9,1024,new String[]{"h2"},nodeManagers[1],allocator,0,0,0,0,rm);
  Assert.assertEquals("No of assignments must be 1",1,assigned.size());
  ContainerFailedEvent f3=createFailEvent(jobId,4,"h3",false);
  allocator.sendFailure(f3);
  nodeManagers[nmNum]=registerNodeManager(nmNum++,rm);
  assigned=getContainerOnHost(jobId,10,1024,new String[]{"h3"},nodeManagers[2],allocator,0,0,0,0,rm);
  Assert.assertEquals("No of assignments must be 1",1,assigned.size());
  for (int i=0; i < 5; i++) {
    nodeManagers[nmNum]=registerNodeManager(nmNum++,rm);
    assigned=getContainerOnHost(jobId,11 + i,1024,new String[]{String.valueOf(5 + i)},nodeManagers[4 + i],allocator,0,0,(i == 4 ? 3 : 0),0,rm);
    Assert.assertEquals("No of assignments must be 1",1,assigned.size());
  }
  assigned=getContainerOnHost(jobId,20,1024,new String[]{"h3"},nodeManagers[2],allocator,0,0,0,0,rm);
  Assert.assertEquals("No of assignments must be 0",0,assigned.size());
}
