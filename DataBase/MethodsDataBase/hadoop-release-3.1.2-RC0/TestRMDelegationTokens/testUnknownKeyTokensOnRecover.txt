@Test(timeout=15000) public void testUnknownKeyTokensOnRecover() throws Exception {
  final int masterID=1234;
  final int sequenceNumber=1000;
  MemoryRMStateStore memStore=new MockMemoryRMStateStore();
  memStore.init(testConf);
  MockRM rm1=new MyMockRM(testConf,memStore);
  rm1.start();
  RMDelegationTokenSecretManager dtSecretManager=rm1.getRMContext().getRMDelegationTokenSecretManager();
  RMState rmState=memStore.getState();
  RMDelegationTokenIdentifier rmDT=new RMDelegationTokenIdentifier(new Text("owner"),new Text("renewer"),new Text("realuser"));
  rmDT.setMasterKeyId(masterID);
  rmDT.setSequenceNumber(sequenceNumber);
  final long tokenTime=Time.now() + 60000;
  rmDT.setMaxDate(tokenTime);
  dtSecretManager.storeNewToken(rmDT,tokenTime);
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    public Boolean get(){
      return rmState.getRMDTSecretManagerState().getTokenState().containsKey(rmDT);
    }
  }
,10,2000);
  dtSecretManager.stopThreads();
  dtSecretManager.reset();
  Assert.assertEquals("Secret manager should have no tokens",dtSecretManager.getAllTokens().size(),0);
  Assert.assertEquals("Secret manager should have no keys",dtSecretManager.getAllMasterKeys().size(),0);
  dtSecretManager.recover(rmState);
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    public Boolean get(){
      return rmState.getRMDTSecretManagerState().getTokenState().containsKey(rmDT);
    }
  }
,10,2000);
  Assert.assertEquals("Token should have been expired but is not",0L,dtSecretManager.getRenewDate(rmDT));
  dtSecretManager.startThreads();
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    public Boolean get(){
      return !rmState.getRMDTSecretManagerState().getTokenState().containsKey(rmDT);
    }
  }
,10,2000);
  rm1.stop();
}
