/** 
 * Similar to BlockReport_03() but works with two DNs Test writes a file and closes it. The second datanode is started in the cluster. As soon as the replication process is completed test finds a block from the second DN and sets its GS to be < of original one. this is the markBlockAsCorrupt case 3 so we expect one pending deletion Block report is forced and the check for # of currupted blocks is performed. Another block is chosen and its length is set to a lesser than original. A check for another corrupted block is performed after yet another BlockReport
 * @throws IOException in case of an error
 */
@Test(timeout=300000) public void blockReport_07() throws Exception {
  final String METHOD_NAME=GenericTestUtils.getMethodName();
  Path filePath=new Path("/" + METHOD_NAME + ".dat");
  final int DN_N1=DN_N0 + 1;
  writeFile(METHOD_NAME,FILE_SIZE,filePath);
  startDNandWait(filePath,true);
  DataNode dn=cluster.getDataNodes().get(DN_N1);
  String poolId=cluster.getNamesystem().getBlockPoolId();
  DatanodeRegistration dnR=dn.getDNRegistrationForBP(poolId);
  StorageBlockReport[] reports=getBlockReports(dn,poolId,true,false);
  sendBlockReports(dnR,poolId,reports);
  printStats();
  assertThat("Wrong number of corrupt blocks",cluster.getNamesystem().getCorruptReplicaBlocks(),is(0L));
  assertThat("Wrong number of PendingDeletion blocks",cluster.getNamesystem().getPendingDeletionBlocks(),is(1L));
  assertThat("Wrong number of PendingReplication blocks",cluster.getNamesystem().getPendingReplicationBlocks(),is(0L));
  reports=getBlockReports(dn,poolId,false,true);
  sendBlockReports(dnR,poolId,reports);
  printStats();
  assertThat("Wrong number of corrupt blocks",cluster.getNamesystem().getCorruptReplicaBlocks(),is(1L));
  assertThat("Wrong number of PendingDeletion blocks",cluster.getNamesystem().getPendingDeletionBlocks(),is(1L));
  assertThat("Wrong number of PendingReplication blocks",cluster.getNamesystem().getPendingReplicationBlocks(),is(0L));
  printStats();
}
