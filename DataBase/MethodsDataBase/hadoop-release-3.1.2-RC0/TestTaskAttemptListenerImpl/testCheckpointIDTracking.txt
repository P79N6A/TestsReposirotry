@Test public void testCheckpointIDTracking() throws IOException, InterruptedException {
  SystemClock clock=SystemClock.getInstance();
  configureMocks();
  org.apache.hadoop.mapreduce.v2.app.job.Task mockTask=mock(org.apache.hadoop.mapreduce.v2.app.job.Task.class);
  when(mockTask.canCommit(any(TaskAttemptId.class))).thenReturn(true);
  Job mockJob=mock(Job.class);
  when(mockJob.getTask(any(TaskId.class))).thenReturn(mockTask);
  when(appCtx.getJob(any(JobId.class))).thenReturn(mockJob);
  when(appCtx.getClock()).thenReturn(clock);
  listener=new MockTaskAttemptListenerImpl(appCtx,secret,rmHeartbeatHandler,policy){
    @Override protected void registerHeartbeatHandler(    Configuration conf){
      taskHeartbeatHandler=hbHandler;
    }
  }
;
  Configuration conf=new Configuration();
  conf.setBoolean(MRJobConfig.TASK_PREEMPTION,true);
  listener.init(conf);
  listener.start();
  TaskAttemptID tid=new TaskAttemptID("12345",1,TaskType.REDUCE,1,0);
  List<Path> partialOut=new ArrayList<Path>();
  partialOut.add(new Path("/prev1"));
  partialOut.add(new Path("/prev2"));
  Counters counters=mock(Counters.class);
  final long CBYTES=64L * 1024 * 1024;
  final long CTIME=4344L;
  final Path CLOC=new Path("/test/1");
  Counter cbytes=mock(Counter.class);
  when(cbytes.getValue()).thenReturn(CBYTES);
  Counter ctime=mock(Counter.class);
  when(ctime.getValue()).thenReturn(CTIME);
  when(counters.findCounter(eq(EnumCounter.CHECKPOINT_BYTES))).thenReturn(cbytes);
  when(counters.findCounter(eq(EnumCounter.CHECKPOINT_MS))).thenReturn(ctime);
  TaskCheckpointID incid=new TaskCheckpointID(new FSCheckpointID(CLOC),partialOut,counters);
  listener.setCheckpointID(org.apache.hadoop.mapred.TaskID.downgrade(tid.getTaskID()),incid);
  CheckpointID outcid=listener.getCheckpointID(tid.getTaskID());
  TaskCheckpointID tcid=(TaskCheckpointID)outcid;
  assertEquals(CBYTES,tcid.getCheckpointBytes());
  assertEquals(CTIME,tcid.getCheckpointTime());
  assertTrue(partialOut.containsAll(tcid.getPartialCommittedOutput()));
  assertTrue(tcid.getPartialCommittedOutput().containsAll(partialOut));
  assert outcid == incid;
}
