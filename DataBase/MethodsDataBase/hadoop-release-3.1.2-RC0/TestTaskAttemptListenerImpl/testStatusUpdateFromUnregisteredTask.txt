@Test public void testStatusUpdateFromUnregisteredTask() throws Exception {
  configureMocks();
  ControlledClock clock=new ControlledClock();
  clock.setTime(0);
  doReturn(clock).when(appCtx).getClock();
  final TaskAttemptListenerImpl tal=new TaskAttemptListenerImpl(appCtx,secret,rmHeartbeatHandler,policy){
    @Override protected void startRpcServer(){
    }
    @Override protected void stopRpcServer(){
    }
  }
;
  Configuration conf=new Configuration();
  conf.setLong(MRJobConfig.TASK_TIMEOUT_CHECK_INTERVAL_MS,1);
  tal.init(conf);
  tal.start();
  AMFeedback feedback=tal.statusUpdate(attemptID,firstReduceStatus);
  assertFalse(feedback.getTaskFound());
  tal.registerPendingTask(task,wid);
  tal.registerLaunchedTask(attemptId,wid);
  feedback=tal.statusUpdate(attemptID,firstReduceStatus);
  assertTrue(feedback.getTaskFound());
  tal.unregister(attemptId,wid);
  feedback=tal.statusUpdate(attemptID,firstReduceStatus);
  assertTrue(feedback.getTaskFound());
  long unregisterTimeout=conf.getLong(MRJobConfig.TASK_EXIT_TIMEOUT,MRJobConfig.TASK_EXIT_TIMEOUT_DEFAULT);
  clock.setTime(unregisterTimeout + 1);
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      try {
        AMFeedback response=tal.statusUpdate(attemptID,firstReduceStatus);
        return !response.getTaskFound();
      }
 catch (      Exception e) {
        throw new RuntimeException("status update failed",e);
      }
    }
  }
,10,10000);
}
