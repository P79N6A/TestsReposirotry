/** 
 * Read in the file using Positioned read(offset) calls.
 * @throws Throwable failure
 */
@Test public void test_040_PositionedReadHugeFile() throws Throwable {
  assumeHugeFileExists();
  final String encryption=getConf().getTrimmed(SERVER_SIDE_ENCRYPTION_ALGORITHM);
  boolean encrypted=encryption != null;
  if (encrypted) {
    LOG.info("File is encrypted with algorithm {}",encryption);
  }
  String filetype=encrypted ? "encrypted file" : "file";
  describe("Positioned reads of %s %s",filetype,hugefile);
  S3AFileSystem fs=getFileSystem();
  FileStatus status=fs.getFileStatus(hugefile);
  long size=status.getLen();
  int ops=0;
  final int bufferSize=8192;
  byte[] buffer=new byte[bufferSize];
  long eof=size - 1;
  ContractTestUtils.NanoTimer timer=new ContractTestUtils.NanoTimer();
  ContractTestUtils.NanoTimer readAtByte0, readAtByte0Again, readAtEOF;
  try (FSDataInputStream in=fs.open(hugefile,uploadBlockSize)){
    readAtByte0=new ContractTestUtils.NanoTimer();
    in.readFully(0,buffer);
    readAtByte0.end("time to read data at start of file");
    ops++;
    readAtEOF=new ContractTestUtils.NanoTimer();
    in.readFully(eof - bufferSize,buffer);
    readAtEOF.end("time to read data at end of file");
    ops++;
    readAtByte0Again=new ContractTestUtils.NanoTimer();
    in.readFully(0,buffer);
    readAtByte0Again.end("time to read data at start of file again");
    ops++;
    LOG.info("Final stream state: {}",in);
  }
   long mb=Math.max(size / _1MB,1);
  logFSState();
  timer.end("time to perform positioned reads of %s of %d MB ",filetype,mb);
  LOG.info("Time per positioned read = {} nS",toHuman(timer.nanosPerOperation(ops)));
}
