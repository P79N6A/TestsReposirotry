@Test public void testGetEntitiesMetricsTimeRange() throws Exception {
  Client client=createClient();
  try {
    URI uri=URI.create("http://localhost:" + getServerPort() + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?fields=ALL&metricslimit=100&metricstimestart="+ (ts - 90000)+ "&metricstimeend="+ (ts - 80000));
    ClientResponse resp=getResponse(client,uri);
    Set<TimelineEntity> entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    verifyMetricsCount(entities,4,4);
    uri=URI.create("http://localhost:" + getServerPort() + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?fields=ALL&metricslimit=100&metricstimestart="+ (ts - 100000)+ "&metricstimeend="+ (ts - 80000));
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    verifyMetricsCount(entities,5,9);
    uri=URI.create("http://localhost:" + getServerPort() + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?fields=ALL&metricslimit=100&metricstimestart="+ (ts - 100000));
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    verifyMetricsCount(entities,5,9);
    uri=URI.create("http://localhost:" + getServerPort() + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?fields=ALL&metricslimit=100&metricstimeend="+ (ts - 90000));
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    verifyMetricsCount(entities,5,5);
    uri=URI.create("http://localhost:" + getServerPort() + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?fields=ALL&metricstimestart="+ (ts - 100000));
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    verifyMetricsCount(entities,5,5);
    uri=URI.create("http://localhost:" + getServerPort() + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1/entity2?fields=ALL&metricstimestart="+ (ts - 100000)+ "&metricstimeend="+ (ts - 80000));
    resp=getResponse(client,uri);
    TimelineEntity entity=resp.getEntity(TimelineEntity.class);
    assertNotNull(entity);
    verifyMetricCount(entity,3,3);
    uri=URI.create("http://localhost:" + getServerPort() + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1/entity2?fields=ALL&metricslimit=5&metricstimestart="+ (ts - 100000)+ "&metricstimeend="+ (ts - 80000));
    resp=getResponse(client,uri);
    entity=resp.getEntity(TimelineEntity.class);
    assertNotNull(entity);
    verifyMetricCount(entity,3,5);
    uri=URI.create("http://localhost:" + getServerPort() + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?fields=ALL&metricslimit=100&metricstimestart="+ (ts - 80000)+ "&metricstimeend="+ (ts - 90000));
    verifyHttpResponse(client,uri,Status.BAD_REQUEST);
  }
  finally {
    client.destroy();
  }
}
