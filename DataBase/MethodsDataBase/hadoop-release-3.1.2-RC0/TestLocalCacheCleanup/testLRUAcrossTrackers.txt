@Test public void testLRUAcrossTrackers(){
  ConcurrentMap<LocalResourceRequest,LocalizedResource> publicRsrc=new ConcurrentHashMap<LocalResourceRequest,LocalizedResource>();
  LocalResourceRequest pubSurviver1=addResource(publicRsrc,"/pub-resource1.txt",8,20,0);
  LocalResourceRequest pubSurviver2=addResource(publicRsrc,"/pub-resource2.txt",7,20,0);
  addResource(publicRsrc,"/pub-resource3.txt",1,20,0);
  ConcurrentMap<String,LocalResourcesTracker> privateRsrc=new ConcurrentHashMap<String,LocalResourcesTracker>();
  ConcurrentMap<LocalResourceRequest,LocalizedResource> user1rsrcs=new ConcurrentHashMap<LocalResourceRequest,LocalizedResource>();
  LocalResourceRequest usr1Surviver1=addResource(user1rsrcs,"/private-u1-resource1.txt",6,20,0);
  addResource(user1rsrcs,"/private-u1-resource2.txt",2,20,0);
  LocalResourcesTracker user1Tracker=new StubbedLocalResourcesTrackerImpl("user1",user1rsrcs);
  privateRsrc.put("user1",user1Tracker);
  ConcurrentMap<LocalResourceRequest,LocalizedResource> user2rsrcs=new ConcurrentHashMap<LocalResourceRequest,LocalizedResource>();
  LocalResourceRequest usr2Surviver1=addResource(user2rsrcs,"/private-u2-resource1.txt",5,20,0);
  addResource(user2rsrcs,"/private-u2-resource2.txt",3,20,0);
  addResource(user2rsrcs,"/private-u2-resource3.txt",4,20,0);
  LocalResourcesTracker user2Tracker=new StubbedLocalResourcesTrackerImpl("user2",user2rsrcs);
  privateRsrc.put("user2",user2Tracker);
  ResourceLocalizationService rls=createLocService(publicRsrc,privateRsrc,80);
  LocalCacheCleanerStats stats=rls.handleCacheCleanup();
  Map<LocalResourceRequest,LocalizedResource> pubLocalRsrc=((StubbedLocalResourcesTrackerImpl)rls.publicRsrc).getLocalRsrc();
  assertEquals(2,pubLocalRsrc.size());
  assertTrue(pubLocalRsrc.containsKey(pubSurviver1));
  assertTrue(pubLocalRsrc.containsKey(pubSurviver2));
  Map<LocalResourceRequest,LocalizedResource> usr1LocalRsrc=((StubbedLocalResourcesTrackerImpl)privateRsrc.get("user1")).getLocalRsrc();
  assertEquals(1,usr1LocalRsrc.size());
  assertTrue(usr1LocalRsrc.containsKey(usr1Surviver1));
  Map<LocalResourceRequest,LocalizedResource> usr2LocalRsrc=((StubbedLocalResourcesTrackerImpl)privateRsrc.get("user2")).getLocalRsrc();
  assertEquals(1,usr2LocalRsrc.size());
  assertTrue(usr2LocalRsrc.containsKey(usr2Surviver1));
  assertEquals(80,stats.getTotalDelSize());
  assertEquals(80,rls.metrics.getTotalBytesDeleted());
  assertEquals(20,stats.getPublicDelSize());
  assertEquals(20,rls.metrics.getPublicBytesDeleted());
  assertEquals(60,stats.getPrivateDelSize());
  assertEquals(60,rls.metrics.getPrivateBytesDeleted());
  assertEquals(160,rls.metrics.getCacheSizeBeforeClean());
}
