@Test public void testBasicCleanup(){
  ConcurrentMap<LocalResourceRequest,LocalizedResource> publicRsrc=new ConcurrentHashMap<LocalResourceRequest,LocalizedResource>();
  addResource(publicRsrc,"/pub-resource1.txt",5,20,0);
  addResource(publicRsrc,"/pub-resource2.txt",3,20,0);
  addResource(publicRsrc,"/pub-resource3.txt",15,20,0);
  ConcurrentMap<String,LocalResourcesTracker> privateRsrc=new ConcurrentHashMap<String,LocalResourcesTracker>();
  ConcurrentMap<LocalResourceRequest,LocalizedResource> user1rsrcs=new ConcurrentHashMap<LocalResourceRequest,LocalizedResource>();
  addResource(user1rsrcs,"/private-u1-resource4.txt",1,20,0);
  LocalResourcesTracker user1Tracker=new StubbedLocalResourcesTrackerImpl("user1",user1rsrcs);
  privateRsrc.put("user1",user1Tracker);
  ConcurrentMap<LocalResourceRequest,LocalizedResource> user2rsrcs=new ConcurrentHashMap<LocalResourceRequest,LocalizedResource>();
  addResource(user2rsrcs,"/private-u2-resource5.txt",2,20,0);
  LocalResourcesTracker user2Tracker=new StubbedLocalResourcesTrackerImpl("user2",user2rsrcs);
  privateRsrc.put("user2",user2Tracker);
  ResourceLocalizationService rls=createLocService(publicRsrc,privateRsrc,0);
  LocalCacheCleanerStats stats=rls.handleCacheCleanup();
  assertEquals(0,((StubbedLocalResourcesTrackerImpl)rls.publicRsrc).getLocalRsrc().size());
  assertEquals(0,((StubbedLocalResourcesTrackerImpl)privateRsrc.get("user1")).getLocalRsrc().size());
  assertEquals(0,((StubbedLocalResourcesTrackerImpl)privateRsrc.get("user2")).getLocalRsrc().size());
  assertEquals(100,stats.getTotalDelSize());
  assertEquals(100,rls.metrics.getTotalBytesDeleted());
  assertEquals(60,stats.getPublicDelSize());
  assertEquals(60,rls.metrics.getPublicBytesDeleted());
  assertEquals(40,stats.getPrivateDelSize());
  assertEquals(40,rls.metrics.getPrivateBytesDeleted());
  assertEquals(100,rls.metrics.getCacheSizeBeforeClean());
}
