@Test public void testPlacementPolicy() throws IOException {
  SliderFileSystem sfs=ServiceTestUtils.initMockFs();
  Service app=createValidApplication("comp-a");
  Component comp=app.getComponents().get(0);
  PlacementPolicy pp=new PlacementPolicy();
  PlacementConstraint pc=new PlacementConstraint();
  pc.setName("CA1");
  pp.setConstraints(Collections.singletonList(pc));
  comp.setPlacementPolicy(pp);
  try {
    ServiceApiUtil.validateAndResolveService(app,sfs,CONF_DNS_ENABLED);
    Assert.fail(EXCEPTION_PREFIX + "constraint with no type");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(String.format(RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_TYPE_NULL,"CA1 ","comp-a"),e.getMessage());
  }
  pc.setType(PlacementType.ANTI_AFFINITY);
  try {
    ServiceApiUtil.validateAndResolveService(app,sfs,CONF_DNS_ENABLED);
    Assert.fail(EXCEPTION_PREFIX + "constraint with no scope");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(String.format(RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_SCOPE_NULL,"CA1 ","comp-a"),e.getMessage());
  }
  pc.setScope(PlacementScope.NODE);
  try {
    ServiceApiUtil.validateAndResolveService(app,sfs,CONF_DNS_ENABLED);
    Assert.fail(EXCEPTION_PREFIX + "constraint with no tag(s)");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(String.format(RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_TAGS_NULL,"CA1 ","comp-a"),e.getMessage());
  }
  pc.setTargetTags(Collections.singletonList("comp-invalid"));
  try {
    ServiceApiUtil.validateAndResolveService(app,sfs,CONF_DNS_ENABLED);
    Assert.fail(EXCEPTION_PREFIX + "constraint with invalid tag name");
  }
 catch (  IllegalArgumentException e) {
    assertEquals(String.format(RestApiErrorMessages.ERROR_PLACEMENT_POLICY_TAG_NAME_NOT_SAME,"comp-invalid","comp-a","comp-a","comp-a"),e.getMessage());
  }
  pc.setTargetTags(Collections.singletonList("comp-a"));
  try {
    ServiceApiUtil.validateAndResolveService(app,sfs,CONF_DNS_ENABLED);
  }
 catch (  IllegalArgumentException e) {
    Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());
  }
}
