@Test public void testGlobalAppConstraints() throws InvalidAllocationTagsQueryException {
  AllocationTagsManager tm=new AllocationTagsManager(rmContext);
  PlacementConstraintManagerService pcm=new MemoryPlacementConstraintManager();
  rmContext.setAllocationTagsManager(tm);
  rmContext.setPlacementConstraintManager(pcm);
  long ts=System.currentTimeMillis();
  ApplicationId application1=BuilderUtils.newApplicationId(ts,100);
  ApplicationId application2=BuilderUtils.newApplicationId(ts,101);
  ApplicationId application3=BuilderUtils.newApplicationId(ts,102);
  RMNode n0r1=rmNodes.get(0);
  RMNode n1r1=rmNodes.get(1);
  RMNode n2r2=rmNodes.get(2);
  RMNode n3r2=rmNodes.get(3);
  tm.addContainer(n0r1.getNodeID(),newContainerId(application1,0),ImmutableSet.of("A"));
  tm.addContainer(n0r1.getNodeID(),newContainerId(application2,1),ImmutableSet.of("A"));
  tm.addContainer(n1r1.getNodeID(),newContainerId(application3,2),ImmutableSet.of("A"));
  tm.addContainer(n1r1.getNodeID(),newContainerId(application3,3),ImmutableSet.of("A"));
  tm.addContainer(n1r1.getNodeID(),newContainerId(application3,4),ImmutableSet.of("A"));
  tm.addContainer(n2r2.getNodeID(),newContainerId(application1,5),ImmutableSet.of("A"));
  tm.addContainer(n2r2.getNodeID(),newContainerId(application1,6),ImmutableSet.of("A"));
  SchedulerNode schedulerNode0=newSchedulerNode(n0r1.getHostName(),n0r1.getRackName(),n0r1.getNodeID());
  SchedulerNode schedulerNode1=newSchedulerNode(n1r1.getHostName(),n1r1.getRackName(),n1r1.getNodeID());
  SchedulerNode schedulerNode2=newSchedulerNode(n2r2.getHostName(),n2r2.getRackName(),n2r2.getNodeID());
  SchedulerNode schedulerNode3=newSchedulerNode(n3r2.getHostName(),n3r2.getRackName(),n3r2.getNodeID());
  TargetApplicationsNamespace namespaceAll=new TargetApplicationsNamespace.All();
  PlacementConstraint constraint1=PlacementConstraints.targetNotIn(NODE,allocationTagWithNamespace(namespaceAll.toString(),"A")).build();
  Map<Set<String>,PlacementConstraint> constraintMap=new HashMap<>();
  Set<String> srcTags1=ImmutableSet.of("A");
  constraintMap.put(srcTags1,constraint1);
  pcm.registerApplication(application1,constraintMap);
  Assert.assertFalse(PlacementConstraintsUtil.canSatisfyConstraints(application1,createSchedulingRequest(srcTags1),schedulerNode0,pcm,tm));
  Assert.assertFalse(PlacementConstraintsUtil.canSatisfyConstraints(application1,createSchedulingRequest(srcTags1),schedulerNode1,pcm,tm));
  Assert.assertFalse(PlacementConstraintsUtil.canSatisfyConstraints(application1,createSchedulingRequest(srcTags1),schedulerNode2,pcm,tm));
  Assert.assertTrue(PlacementConstraintsUtil.canSatisfyConstraints(application1,createSchedulingRequest(srcTags1),schedulerNode3,pcm,tm));
  pcm.unregisterApplication(application1);
  PlacementConstraint constraint2=PlacementConstraints.maxCardinality(NODE,namespaceAll.toString(),2,"A").build();
  constraintMap.clear();
  Set<String> srcTags2=ImmutableSet.of("foo");
  constraintMap.put(srcTags2,constraint2);
  pcm.registerApplication(application2,constraintMap);
  Assert.assertTrue(PlacementConstraintsUtil.canSatisfyConstraints(application2,createSchedulingRequest(srcTags2),schedulerNode0,pcm,tm));
  Assert.assertFalse(PlacementConstraintsUtil.canSatisfyConstraints(application2,createSchedulingRequest(srcTags2),schedulerNode1,pcm,tm));
  Assert.assertTrue(PlacementConstraintsUtil.canSatisfyConstraints(application2,createSchedulingRequest(srcTags2),schedulerNode2,pcm,tm));
  Assert.assertTrue(PlacementConstraintsUtil.canSatisfyConstraints(application2,createSchedulingRequest(srcTags2),schedulerNode3,pcm,tm));
  pcm.unregisterApplication(application2);
  PlacementConstraint constraint3=PlacementConstraints.minCardinality(NODE,namespaceAll.toString(),3,"A").build();
  constraintMap.clear();
  Set<String> srcTags3=ImmutableSet.of("foo");
  constraintMap.put(srcTags3,constraint3);
  pcm.registerApplication(application3,constraintMap);
  Assert.assertFalse(PlacementConstraintsUtil.canSatisfyConstraints(application3,createSchedulingRequest(srcTags3),schedulerNode0,pcm,tm));
  Assert.assertTrue(PlacementConstraintsUtil.canSatisfyConstraints(application3,createSchedulingRequest(srcTags3),schedulerNode1,pcm,tm));
  Assert.assertFalse(PlacementConstraintsUtil.canSatisfyConstraints(application3,createSchedulingRequest(srcTags3),schedulerNode2,pcm,tm));
  Assert.assertFalse(PlacementConstraintsUtil.canSatisfyConstraints(application3,createSchedulingRequest(srcTags3),schedulerNode3,pcm,tm));
  pcm.unregisterApplication(application3);
}
