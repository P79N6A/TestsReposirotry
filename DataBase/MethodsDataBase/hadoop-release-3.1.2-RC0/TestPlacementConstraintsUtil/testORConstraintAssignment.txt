@Test public void testORConstraintAssignment() throws InvalidAllocationTagsQueryException {
  AllocationTagsManager tm=new AllocationTagsManager(rmContext);
  PlacementConstraintManagerService pcm=new MemoryPlacementConstraintManager();
  pcm.registerApplication(appId1,constraintMap4);
  RMNode n0r1=rmNodes.get(0);
  RMNode n1r1=rmNodes.get(1);
  RMNode n2r2=rmNodes.get(2);
  RMNode n3r2=rmNodes.get(3);
  tm.addContainer(n0r1.getNodeID(),newContainerId(appId1,1),ImmutableSet.of("hbase-m"));
  tm.addContainer(n2r2.getNodeID(),newContainerId(appId1,2),ImmutableSet.of("hbase-rs"));
  Assert.assertEquals(1L,tm.getAllocationTagsWithCount(n0r1.getNodeID()).get("hbase-m").longValue());
  Assert.assertEquals(1L,tm.getAllocationTagsWithCount(n2r2.getNodeID()).get("hbase-rs").longValue());
  SchedulerNode schedulerNode0=newSchedulerNode(n0r1.getHostName(),n0r1.getRackName(),n0r1.getNodeID());
  SchedulerNode schedulerNode1=newSchedulerNode(n1r1.getHostName(),n1r1.getRackName(),n1r1.getNodeID());
  SchedulerNode schedulerNode2=newSchedulerNode(n2r2.getHostName(),n2r2.getRackName(),n2r2.getNodeID());
  SchedulerNode schedulerNode3=newSchedulerNode(n3r2.getHostName(),n3r2.getRackName(),n3r2.getNodeID());
  Assert.assertTrue(PlacementConstraintsUtil.canSatisfyConstraints(appId1,createSchedulingRequest(sourceTag1),schedulerNode0,pcm,tm));
  Assert.assertFalse(PlacementConstraintsUtil.canSatisfyConstraints(appId1,createSchedulingRequest(sourceTag1),schedulerNode1,pcm,tm));
  Assert.assertTrue(PlacementConstraintsUtil.canSatisfyConstraints(appId1,createSchedulingRequest(sourceTag1),schedulerNode2,pcm,tm));
  Assert.assertFalse(PlacementConstraintsUtil.canSatisfyConstraints(appId1,createSchedulingRequest(sourceTag1),schedulerNode3,pcm,tm));
  tm.addContainer(n3r2.getNodeID(),newContainerId(appId1,2),ImmutableSet.of("hbase-rs"));
  Assert.assertTrue(PlacementConstraintsUtil.canSatisfyConstraints(appId1,createSchedulingRequest(sourceTag1),schedulerNode3,pcm,tm));
  tm.addContainer(n2r2.getNodeID(),newContainerId(appId1,3),ImmutableSet.of("spark"));
  Assert.assertTrue(PlacementConstraintsUtil.canSatisfyConstraints(appId1,createSchedulingRequest(sourceTag2),schedulerNode0,pcm,tm));
  Assert.assertFalse(PlacementConstraintsUtil.canSatisfyConstraints(appId1,createSchedulingRequest(sourceTag2),schedulerNode1,pcm,tm));
  Assert.assertTrue(PlacementConstraintsUtil.canSatisfyConstraints(appId1,createSchedulingRequest(sourceTag2),schedulerNode2,pcm,tm));
  Assert.assertFalse(PlacementConstraintsUtil.canSatisfyConstraints(appId1,createSchedulingRequest(sourceTag2),schedulerNode3,pcm,tm));
}
