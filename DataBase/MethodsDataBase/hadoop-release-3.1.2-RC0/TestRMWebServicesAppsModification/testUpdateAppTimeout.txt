@Test(timeout=90000) public void testUpdateAppTimeout() throws Exception {
  client().addFilter(new LoggingFilter(System.out));
  rm.start();
  rm.registerNode("127.0.0.1:1234",2048);
  String[] mediaTypes={MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML};
  MediaType[] contentTypes={MediaType.APPLICATION_JSON_TYPE,MediaType.APPLICATION_XML_TYPE};
  for (  String mediaType : mediaTypes) {
    for (    MediaType contentType : contentTypes) {
      RMApp app=rm.submitApp(CONTAINER_MB,"",webserviceUserName);
      ClientResponse response=this.constructWebResource("apps",app.getApplicationId().toString(),"timeouts").accept(mediaType).get(ClientResponse.class);
      if (mediaType.contains(MediaType.APPLICATION_JSON)) {
        assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
        JSONObject js=response.getEntity(JSONObject.class).getJSONObject("timeouts");
        JSONArray entity=js.getJSONArray("timeout");
        verifyAppTimeoutJson(entity.getJSONObject(0),ApplicationTimeoutType.LIFETIME,"UNLIMITED",-1);
      }
      long timeOutFromNow=60;
      String expireTime=Times.formatISO8601(System.currentTimeMillis() + timeOutFromNow * 1000);
      Object entity=getAppTimeoutInfoEntity(ApplicationTimeoutType.LIFETIME,contentType,expireTime);
      response=this.constructWebResource("apps",app.getApplicationId().toString(),"timeout").entity(entity,contentType).accept(mediaType).put(ClientResponse.class);
      if (!isAuthenticationEnabled()) {
        assertResponseStatusCode(Status.UNAUTHORIZED,response.getStatusInfo());
        continue;
      }
      assertResponseStatusCode(Status.OK,response.getStatusInfo());
      if (mediaType.contains(MediaType.APPLICATION_JSON)) {
        verifyAppTimeoutJson(response,ApplicationTimeoutType.LIFETIME,expireTime,timeOutFromNow);
      }
 else {
        verifyAppTimeoutXML(response,ApplicationTimeoutType.LIFETIME,expireTime,timeOutFromNow);
      }
      entity=getAppTimeoutInfoEntity(null,contentType,null);
      response=this.constructWebResource("apps",app.getApplicationId().toString(),"timeout").entity(entity,contentType).accept(mediaType).put(ClientResponse.class);
      assertResponseStatusCode(Status.BAD_REQUEST,response.getStatusInfo());
      response=this.constructWebResource("apps",app.getApplicationId().toString(),"timeouts",ApplicationTimeoutType.LIFETIME.toString()).accept(mediaType).get(ClientResponse.class);
      assertResponseStatusCode(Status.OK,response.getStatusInfo());
      if (mediaType.contains(MediaType.APPLICATION_JSON)) {
        verifyAppTimeoutJson(response,ApplicationTimeoutType.LIFETIME,expireTime,timeOutFromNow);
      }
    }
  }
  rm.stop();
}
