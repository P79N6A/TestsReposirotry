@Test public void testNamespaceQuotaExceed() throws Exception {
  long nsQuota=3;
  final FileSystem nnFs1=nnContext1.getFileSystem();
  final FileSystem nnFs2=nnContext2.getFileSystem();
  nnFs1.mkdirs(new Path("/testdir1"));
  nnFs2.mkdirs(new Path("/testdir2"));
  MountTable mountTable1=MountTable.newInstance("/nsquota",Collections.singletonMap("ns0","/testdir1"));
  mountTable1.setQuota(new RouterQuotaUsage.Builder().quota(nsQuota).build());
  addMountTable(mountTable1);
  MountTable mountTable2=MountTable.newInstance("/nsquota/subdir",Collections.singletonMap("ns1","/testdir2"));
  mountTable2.setQuota(new RouterQuotaUsage.Builder().quota(nsQuota).build());
  addMountTable(mountTable2);
  final FileSystem routerFs=routerContext.getFileSystem();
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      boolean isNsQuotaViolated=false;
      try {
        routerFs.mkdirs(new Path("/nsquota/" + UUID.randomUUID()));
        routerFs.mkdirs(new Path("/nsquota/subdir/" + UUID.randomUUID()));
      }
 catch (      NSQuotaExceededException e) {
        isNsQuotaViolated=true;
      }
catch (      IOException ignored) {
      }
      return isNsQuotaViolated;
    }
  }
,5000,60000);
  nnFs1.mkdirs(new Path("/testdir1/" + UUID.randomUUID()));
  nnFs2.mkdirs(new Path("/testdir2/" + UUID.randomUUID()));
  routerFs.delete(new Path("/nsquota"),true);
  routerFs.rename(new Path("/nsquota/subdir"),new Path("/nsquota/subdir"));
}
