@Test public void testQuotaRefreshAfterQuotaExceed() throws Exception {
  long nsQuota=3;
  long ssQuota=100;
  final FileSystem nnFs1=nnContext1.getFileSystem();
  final FileSystem nnFs2=nnContext2.getFileSystem();
  nnFs1.mkdirs(new Path("/testdir11"));
  nnFs2.mkdirs(new Path("/testdir12"));
  MountTable mountTable1=MountTable.newInstance("/setquota1",Collections.singletonMap("ns0","/testdir11"));
  mountTable1.setQuota(new RouterQuotaUsage.Builder().quota(nsQuota).spaceQuota(ssQuota).build());
  addMountTable(mountTable1);
  MountTable mountTable2=MountTable.newInstance("/setquota2",Collections.singletonMap("ns1","/testdir12"));
  mountTable2.setQuota(new RouterQuotaUsage.Builder().quota(nsQuota).spaceQuota(ssQuota).build());
  addMountTable(mountTable2);
  final FileSystem routerFs=routerContext.getFileSystem();
  routerFs.mkdirs(new Path("/setquota1/" + UUID.randomUUID()));
  routerFs.mkdirs(new Path("/setquota1/" + UUID.randomUUID()));
  routerFs.mkdirs(new Path("/setquota1/" + UUID.randomUUID()));
  RouterQuotaUpdateService updateService=routerContext.getRouter().getQuotaCacheUpdateService();
  updateService.periodicInvoke();
  resolver.loadCache(true);
  RouterQuotaManager quotaManager=routerContext.getRouter().getQuotaManager();
  ClientProtocol client1=nnContext1.getClient().getNamenode();
  ClientProtocol client2=nnContext2.getClient().getNamenode();
  QuotaUsage quota1=client1.getQuotaUsage("/testdir11");
  QuotaUsage quota2=client2.getQuotaUsage("/testdir12");
  QuotaUsage cacheQuota1=quotaManager.getQuotaUsage("/setquota1");
  QuotaUsage cacheQuota2=quotaManager.getQuotaUsage("/setquota2");
  assertEquals(4,quota1.getFileAndDirectoryCount());
  assertEquals(4,cacheQuota1.getFileAndDirectoryCount());
  assertEquals(1,quota2.getFileAndDirectoryCount());
  assertEquals(1,cacheQuota2.getFileAndDirectoryCount());
  try {
    routerFs.mkdirs(new Path("/testdir11/" + UUID.randomUUID()));
    fail("Mkdir should be failed under dir /testdir11.");
  }
 catch (  NSQuotaExceededException ignored) {
  }
  routerFs.mkdirs(new Path("/setquota2/" + UUID.randomUUID()));
  routerFs.mkdirs(new Path("/setquota2/" + UUID.randomUUID()));
  updateService.periodicInvoke();
  quota1=client1.getQuotaUsage("/testdir11");
  cacheQuota1=quotaManager.getQuotaUsage("/setquota1");
  quota2=client2.getQuotaUsage("/testdir12");
  cacheQuota2=quotaManager.getQuotaUsage("/setquota2");
  assertEquals(4,quota1.getFileAndDirectoryCount());
  assertEquals(4,cacheQuota1.getFileAndDirectoryCount());
  assertEquals(3,quota2.getFileAndDirectoryCount());
  assertEquals(3,cacheQuota2.getFileAndDirectoryCount());
}
