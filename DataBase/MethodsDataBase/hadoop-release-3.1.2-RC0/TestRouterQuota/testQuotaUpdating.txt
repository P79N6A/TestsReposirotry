@Test public void testQuotaUpdating() throws Exception {
  long nsQuota=30;
  long ssQuota=1024;
  String path="/updatequota";
  final FileSystem nnFs1=nnContext1.getFileSystem();
  nnFs1.mkdirs(new Path("/testdir10"));
  MountTable mountTable=MountTable.newInstance(path,Collections.singletonMap("ns0","/testdir10"));
  mountTable.setQuota(new RouterQuotaUsage.Builder().quota(nsQuota).spaceQuota(ssQuota).build());
  addMountTable(mountTable);
  RouterQuotaUpdateService updateService=routerContext.getRouter().getQuotaCacheUpdateService();
  updateService.periodicInvoke();
  MountTable updatedMountTable=getMountTable(path);
  RouterQuotaUsage quota=updatedMountTable.getQuota();
  assertEquals(nsQuota,quota.getQuota());
  assertEquals(ssQuota,quota.getSpaceQuota());
  assertEquals(1,quota.getFileAndDirectoryCount());
  assertEquals(0,quota.getSpaceConsumed());
  final FileSystem routerFs=routerContext.getFileSystem();
  routerFs.mkdirs(new Path(path + "/" + UUID.randomUUID()));
  DFSClient routerClient=routerContext.getClient();
  routerClient.create(path + "/file",true).close();
  appendData(path + "/file",routerClient,BLOCK_SIZE);
  updateService.periodicInvoke();
  updatedMountTable=getMountTable(path);
  quota=updatedMountTable.getQuota();
  assertEquals(nsQuota,quota.getQuota());
  assertEquals(ssQuota,quota.getSpaceQuota());
  assertEquals(3,quota.getFileAndDirectoryCount());
  assertEquals(BLOCK_SIZE,quota.getSpaceConsumed());
}
