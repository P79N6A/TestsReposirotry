@Test public void testGetQuota() throws Exception {
  long nsQuota=10;
  long ssQuota=100;
  final FileSystem nnFs1=nnContext1.getFileSystem();
  final FileSystem nnFs2=nnContext2.getFileSystem();
  nnFs1.mkdirs(new Path("/testdir7"));
  nnFs1.mkdirs(new Path("/testdir7/subdir"));
  nnFs2.mkdirs(new Path("/testdir8"));
  MountTable mountTable1=MountTable.newInstance("/getquota",Collections.singletonMap("ns0","/testdir7"));
  mountTable1.setQuota(new RouterQuotaUsage.Builder().quota(nsQuota).spaceQuota(ssQuota).build());
  addMountTable(mountTable1);
  MountTable mountTable2=MountTable.newInstance("/getquota/subdir1",Collections.singletonMap("ns0","/testdir7/subdir"));
  addMountTable(mountTable2);
  MountTable mountTable3=MountTable.newInstance("/getquota/subdir2",Collections.singletonMap("ns1","/testdir8"));
  addMountTable(mountTable3);
  DFSClient routerClient=routerContext.getClient();
  routerClient.create("/getquota/file",true).close();
  routerClient.create("/getquota/subdir1/file",true).close();
  routerClient.create("/getquota/subdir2/file",true).close();
  ClientProtocol clientProtocol=routerContext.getClient().getNamenode();
  RouterQuotaUpdateService updateService=routerContext.getRouter().getQuotaCacheUpdateService();
  updateService.periodicInvoke();
  final QuotaUsage quota=clientProtocol.getQuotaUsage("/getquota");
  assertEquals(6,quota.getFileAndDirectoryCount());
}
