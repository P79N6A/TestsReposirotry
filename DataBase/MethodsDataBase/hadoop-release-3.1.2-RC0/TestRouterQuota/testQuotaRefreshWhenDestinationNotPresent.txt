/** 
 * Verify whether mount table and quota usage cache is updated properly. {@link RouterQuotaUpdateService#periodicInvoke()} should be able to updatethe cache and the mount table even if the destination directory for some mount entry is not present in the filesystem.
 */
@Test public void testQuotaRefreshWhenDestinationNotPresent() throws Exception {
  long nsQuota=5;
  long ssQuota=3 * BLOCK_SIZE;
  final FileSystem nnFs=nnContext1.getFileSystem();
  nnFs.mkdirs(new Path("/testdir13"));
  nnFs.mkdirs(new Path("/testdir14"));
  MountTable mountTable=MountTable.newInstance("/setdir1",Collections.singletonMap("ns0","/testdir13"));
  mountTable.setQuota(new RouterQuotaUsage.Builder().quota(nsQuota).spaceQuota(ssQuota).build());
  addMountTable(mountTable);
  mountTable=MountTable.newInstance("/setdir2",Collections.singletonMap("ns0","/testdir14"));
  mountTable.setQuota(new RouterQuotaUsage.Builder().quota(nsQuota).spaceQuota(ssQuota).build());
  addMountTable(mountTable);
  final DFSClient routerClient=routerContext.getClient();
  routerClient.create("/setdir1/file1",true).close();
  routerClient.create("/setdir2/file2",true).close();
  appendData("/setdir1/file1",routerClient,BLOCK_SIZE);
  appendData("/setdir2/file2",routerClient,BLOCK_SIZE);
  RouterQuotaUpdateService updateService=routerContext.getRouter().getQuotaCacheUpdateService();
  updateService.periodicInvoke();
  resolver.loadCache(true);
  ClientProtocol client1=nnContext1.getClient().getNamenode();
  RouterQuotaManager quotaManager=routerContext.getRouter().getQuotaManager();
  QuotaUsage quota1=client1.getQuotaUsage("/testdir13");
  QuotaUsage quota2=client1.getQuotaUsage("/testdir14");
  QuotaUsage cacheQuota1=quotaManager.getQuotaUsage("/setdir1");
  QuotaUsage cacheQuota2=quotaManager.getQuotaUsage("/setdir2");
  MountTable updatedMountTable=getMountTable("/setdir1");
  RouterQuotaUsage mountQuota1=updatedMountTable.getQuota();
  updatedMountTable=getMountTable("/setdir2");
  RouterQuotaUsage mountQuota2=updatedMountTable.getQuota();
  assertEquals(2,quota1.getFileAndDirectoryCount());
  assertEquals(2,cacheQuota1.getFileAndDirectoryCount());
  assertEquals(2,mountQuota1.getFileAndDirectoryCount());
  assertEquals(2,quota2.getFileAndDirectoryCount());
  assertEquals(2,cacheQuota2.getFileAndDirectoryCount());
  assertEquals(2,mountQuota2.getFileAndDirectoryCount());
  assertEquals(BLOCK_SIZE,quota1.getSpaceConsumed());
  assertEquals(BLOCK_SIZE,cacheQuota1.getSpaceConsumed());
  assertEquals(BLOCK_SIZE,mountQuota1.getSpaceConsumed());
  assertEquals(BLOCK_SIZE,quota2.getSpaceConsumed());
  assertEquals(BLOCK_SIZE,cacheQuota2.getSpaceConsumed());
  assertEquals(BLOCK_SIZE,mountQuota2.getSpaceConsumed());
  FileSystem routerFs=routerContext.getFileSystem();
  routerFs.delete(new Path("/setdir1"),true);
  routerClient.create("/setdir2/file3",true).close();
  appendData("/setdir2/file3",routerClient,BLOCK_SIZE);
  int updatedSpace=BLOCK_SIZE + BLOCK_SIZE;
  updateService.periodicInvoke();
  quota2=client1.getQuotaUsage("/testdir14");
  cacheQuota1=quotaManager.getQuotaUsage("/setdir1");
  cacheQuota2=quotaManager.getQuotaUsage("/setdir2");
  updatedMountTable=getMountTable("/setdir1");
  mountQuota1=updatedMountTable.getQuota();
  updatedMountTable=getMountTable("/setdir2");
  mountQuota2=updatedMountTable.getQuota();
  assertEquals(0,cacheQuota1.getFileAndDirectoryCount());
  assertEquals(0,mountQuota1.getFileAndDirectoryCount());
  assertEquals(0,cacheQuota1.getSpaceConsumed());
  assertEquals(0,mountQuota1.getSpaceConsumed());
  assertEquals(3,quota2.getFileAndDirectoryCount());
  assertEquals(3,cacheQuota2.getFileAndDirectoryCount());
  assertEquals(3,mountQuota2.getFileAndDirectoryCount());
  assertEquals(updatedSpace,quota2.getSpaceConsumed());
  assertEquals(updatedSpace,cacheQuota2.getSpaceConsumed());
  assertEquals(updatedSpace,mountQuota2.getSpaceConsumed());
}
