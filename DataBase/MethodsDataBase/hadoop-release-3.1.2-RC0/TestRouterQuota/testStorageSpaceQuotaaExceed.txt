@Test public void testStorageSpaceQuotaaExceed() throws Exception {
  long ssQuota=3071;
  final FileSystem nnFs1=nnContext1.getFileSystem();
  final FileSystem nnFs2=nnContext2.getFileSystem();
  nnFs1.mkdirs(new Path("/testdir3"));
  nnFs2.mkdirs(new Path("/testdir4"));
  MountTable mountTable1=MountTable.newInstance("/ssquota",Collections.singletonMap("ns0","/testdir3"));
  mountTable1.setQuota(new RouterQuotaUsage.Builder().spaceQuota(ssQuota).build());
  addMountTable(mountTable1);
  MountTable mountTable2=MountTable.newInstance("/ssquota/subdir",Collections.singletonMap("ns1","/testdir4"));
  mountTable2.setQuota(new RouterQuotaUsage.Builder().spaceQuota(ssQuota).build());
  addMountTable(mountTable2);
  DFSClient routerClient=routerContext.getClient();
  routerClient.create("/ssquota/file",true).close();
  routerClient.create("/ssquota/subdir/file",true).close();
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      boolean isDsQuotaViolated=false;
      try {
        appendData("/ssquota/file",routerClient,BLOCK_SIZE);
        appendData("/ssquota/subdir/file",routerClient,BLOCK_SIZE);
      }
 catch (      DSQuotaExceededException e) {
        isDsQuotaViolated=true;
      }
catch (      IOException ignored) {
      }
      return isDsQuotaViolated;
    }
  }
,5000,60000);
  appendData("/testdir3/file",nnContext1.getClient(),BLOCK_SIZE);
  appendData("/testdir4/file",nnContext2.getClient(),BLOCK_SIZE);
}
