@Test public void testSplitAllocateRequest() throws Exception {
  initializePolicy();
  SubClusterInfo sci=mock(SubClusterInfo.class);
  when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);
  when(sci.getSubClusterId()).thenReturn(getHomeSubCluster());
  getActiveSubclusters().put(getHomeSubCluster(),sci);
  SubClusterIdInfo sc=new SubClusterIdInfo(getHomeSubCluster().getId());
  getPolicyInfo().getRouterPolicyWeights().put(sc,0.1f);
  getPolicyInfo().getAMRMPolicyWeights().put(sc,0.1f);
  FederationPoliciesTestUtil.initializePolicyContext(getFederationPolicyContext(),getPolicy(),getPolicyInfo(),getActiveSubclusters());
  List<ResourceRequest> resourceRequests=createComplexRequest();
  Map<SubClusterId,List<ResourceRequest>> response=((FederationAMRMProxyPolicy)getPolicy()).splitResourceRequests(resourceRequests);
  validateSplit(response,resourceRequests);
  prettyPrintRequests(response);
  checkExpectedAllocation(response,getHomeSubCluster().getId(),7,29);
  checkExpectedAllocation(response,"subcluster0",10,32);
  checkExpectedAllocation(response,"subcluster1",5,26);
  checkExpectedAllocation(response,"subcluster2",4,23);
  checkExpectedAllocation(response,"subcluster3",-1,-1);
  checkExpectedAllocation(response,"subcluster4",-1,-1);
  checkExpectedAllocation(response,"subcluster5",1,20);
  checkTotalContainerAllocation(response,130);
  for (  ResourceRequest rr : response.get(getHomeSubCluster())) {
    Assert.assertTrue(rr.getAllocationRequestId() == 2L || rr.getAllocationRequestId() == 4L || rr.getAllocationRequestId() == 5L);
  }
  List<ResourceRequest> rrs=response.get(SubClusterId.newInstance("subcluster0"));
  for (  ResourceRequest rr : rrs) {
    Assert.assertTrue(rr.getAllocationRequestId() != 1L);
    Assert.assertTrue(rr.getAllocationRequestId() != 4L);
  }
  for (  ResourceRequest rr : response.get(SubClusterId.newInstance("subcluster1"))) {
    Assert.assertTrue(rr.getAllocationRequestId() == 1L || rr.getAllocationRequestId() == 2L);
  }
  for (  ResourceRequest rr : response.get(SubClusterId.newInstance("subcluster2"))) {
    Assert.assertTrue(rr.getAllocationRequestId() == 1L || rr.getAllocationRequestId() == 2L);
  }
  for (  ResourceRequest rr : response.get(SubClusterId.newInstance("subcluster5"))) {
    Assert.assertTrue(rr.getAllocationRequestId() == 2);
    Assert.assertTrue(rr.getRelaxLocality());
  }
}
