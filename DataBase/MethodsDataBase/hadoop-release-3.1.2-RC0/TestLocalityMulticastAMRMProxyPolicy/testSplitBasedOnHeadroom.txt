@Test public void testSplitBasedOnHeadroom() throws Exception {
  getPolicyInfo().setHeadroomAlpha(1.0f);
  initializePolicy();
  List<ResourceRequest> resourceRequests=createSimpleRequest();
  prepPolicyWithHeadroom();
  Map<SubClusterId,List<ResourceRequest>> response=((FederationAMRMProxyPolicy)getPolicy()).splitResourceRequests(resourceRequests);
  LOG.info("Initial headroom");
  prettyPrintRequests(response);
  validateSplit(response,resourceRequests);
  checkExpectedAllocation(response,"subcluster0",1,60);
  checkExpectedAllocation(response,"subcluster1",1,-1);
  checkExpectedAllocation(response,"subcluster2",1,15);
  checkExpectedAllocation(response,"subcluster5",1,25);
  checkTotalContainerAllocation(response,100);
  AllocateResponse ar=getAllocateResponseWithTargetHeadroom(40);
  ((FederationAMRMProxyPolicy)getPolicy()).notifyOfResponse(SubClusterId.newInstance("subcluster2"),ar);
  response=((FederationAMRMProxyPolicy)getPolicy()).splitResourceRequests(resourceRequests);
  LOG.info("After headroom update");
  prettyPrintRequests(response);
  validateSplit(response,resourceRequests);
  checkExpectedAllocation(response,"subcluster0",1,37);
  checkExpectedAllocation(response,"subcluster1",1,-1);
  checkExpectedAllocation(response,"subcluster2",1,37);
  checkExpectedAllocation(response,"subcluster5",1,25);
  checkTotalContainerAllocation(response,100);
}
