@Test public void testQueueOrderingPolicyUpdatedAfterReinitialize() throws IOException {
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  setupQueueConfigurationWithoutLabels(csConf);
  YarnConfiguration conf=new YarnConfiguration(csConf);
  CapacityScheduler capacityScheduler=new CapacityScheduler();
  RMContextImpl rmContext=new RMContextImpl(null,null,null,null,null,null,new RMContainerTokenSecretManager(conf),new NMTokenSecretManagerInRM(conf),new ClientToAMTokenSecretManagerInRM(),null);
  rmContext.setNodeLabelManager(nodeLabelManager);
  capacityScheduler.setConf(conf);
  capacityScheduler.setRMContext(rmContext);
  capacityScheduler.init(conf);
  capacityScheduler.start();
  csConf.setQueues(CapacitySchedulerConfiguration.ROOT + ".b",new String[]{"b1","b2","b3","b4"});
  csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + ".b.b4",0f);
  ParentQueue bQ=(ParentQueue)capacityScheduler.getQueue("b");
  checkEqualsToQueueSet(bQ.getChildQueues(),new String[]{"b1","b2","b3"});
  capacityScheduler.reinitialize(new YarnConfiguration(csConf),rmContext);
  checkEqualsToQueueSet(bQ.getChildQueues(),new String[]{"b1","b2","b3","b4"});
  PriorityUtilizationQueueOrderingPolicy queueOrderingPolicy=(PriorityUtilizationQueueOrderingPolicy)bQ.getQueueOrderingPolicy();
  checkEqualsToQueueSet(queueOrderingPolicy.getQueues(),new String[]{"b1","b2","b3","b4"});
  ServiceOperations.stopQuietly(capacityScheduler);
}
