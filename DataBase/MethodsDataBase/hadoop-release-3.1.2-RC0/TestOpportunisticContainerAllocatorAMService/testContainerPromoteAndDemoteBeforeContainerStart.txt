@Test(timeout=600000) public void testContainerPromoteAndDemoteBeforeContainerStart() throws Exception {
  HashMap<NodeId,MockNM> nodes=new HashMap<>();
  MockNM nm1=new MockNM("h1:1234",4096,rm.getResourceTrackerService());
  nodes.put(nm1.getNodeId(),nm1);
  MockNM nm2=new MockNM("h1:4321",4096,rm.getResourceTrackerService());
  nodes.put(nm2.getNodeId(),nm2);
  MockNM nm3=new MockNM("h2:1234",4096,rm.getResourceTrackerService());
  nodes.put(nm3.getNodeId(),nm3);
  MockNM nm4=new MockNM("h2:4321",4096,rm.getResourceTrackerService());
  nodes.put(nm4.getNodeId(),nm4);
  nm1.registerNode();
  nm2.registerNode();
  nm3.registerNode();
  nm4.registerNode();
  OpportunisticContainerAllocatorAMService amservice=(OpportunisticContainerAllocatorAMService)rm.getApplicationMasterService();
  RMApp app1=rm.submitApp(1 * GB,"app","user",null,"default");
  ApplicationAttemptId attemptId=app1.getCurrentAppAttempt().getAppAttemptId();
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm2);
  ResourceScheduler scheduler=rm.getResourceScheduler();
  RMNode rmNode1=rm.getRMContext().getRMNodes().get(nm1.getNodeId());
  RMNode rmNode2=rm.getRMContext().getRMNodes().get(nm2.getNodeId());
  RMNode rmNode3=rm.getRMContext().getRMNodes().get(nm3.getNodeId());
  RMNode rmNode4=rm.getRMContext().getRMNodes().get(nm4.getNodeId());
  nm1.nodeHeartbeat(true);
  nm2.nodeHeartbeat(true);
  nm3.nodeHeartbeat(true);
  nm4.nodeHeartbeat(true);
  amservice.handle(new NodeAddedSchedulerEvent(rmNode1));
  amservice.handle(new NodeAddedSchedulerEvent(rmNode2));
  amservice.handle(new NodeAddedSchedulerEvent(rmNode3));
  amservice.handle(new NodeAddedSchedulerEvent(rmNode4));
  amservice.handle(new NodeUpdateSchedulerEvent(rmNode1));
  amservice.handle(new NodeUpdateSchedulerEvent(rmNode2));
  amservice.handle(new NodeUpdateSchedulerEvent(rmNode3));
  amservice.handle(new NodeUpdateSchedulerEvent(rmNode4));
  nm1.nodeHeartbeat(true);
  nm2.nodeHeartbeat(true);
  nm3.nodeHeartbeat(true);
  nm4.nodeHeartbeat(true);
  Thread.sleep(1000);
  QueueMetrics metrics=((CapacityScheduler)scheduler).getRootQueue().getMetrics();
  verifyMetrics(metrics,15360,15,1024,1,1);
  AllocateResponse allocateResponse=am1.allocate(Arrays.asList(ResourceRequest.newInstance(Priority.newInstance(1),"*",Resources.createResource(1 * GB),2,true,null,ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC,true))),null);
  List<Container> allocatedContainers=allocateResponse.getAllocatedContainers();
  Assert.assertEquals(2,allocatedContainers.size());
  Container container=allocatedContainers.get(0);
  MockNM allocNode=nodes.get(container.getNodeId());
  MockNM sameHostDiffNode=null;
  for (  NodeId n : nodes.keySet()) {
    if (n.getHost().equals(allocNode.getNodeId().getHost()) && n.getPort() != allocNode.getNodeId().getPort()) {
      sameHostDiffNode=nodes.get(n);
    }
  }
  verifyMetrics(metrics,15360,15,1024,1,1);
  am1.sendContainerUpdateRequest(Arrays.asList(UpdateContainerRequest.newInstance(0,container.getId(),ContainerUpdateType.PROMOTE_EXECUTION_TYPE,null,ExecutionType.GUARANTEED)));
  sameHostDiffNode.nodeHeartbeat(true);
  rm.drainEvents();
  allocateResponse=am1.allocate(new ArrayList<>(),new ArrayList<>());
  Assert.assertEquals(0,allocateResponse.getUpdatedContainers().size());
  dispatcher.waitForEventThreadToWait();
  rm.drainEvents();
  verifyMetrics(metrics,15360,15,1024,1,1);
  allocateResponse=am1.sendContainerUpdateRequest(Arrays.asList(UpdateContainerRequest.newInstance(0,container.getId(),ContainerUpdateType.PROMOTE_EXECUTION_TYPE,null,ExecutionType.GUARANTEED)));
  Assert.assertEquals(0,allocateResponse.getUpdatedContainers().size());
  Assert.assertEquals(1,allocateResponse.getUpdateErrors().size());
  Assert.assertEquals("UPDATE_OUTSTANDING_ERROR",allocateResponse.getUpdateErrors().get(0).getReason());
  Assert.assertEquals(container.getId(),allocateResponse.getUpdateErrors().get(0).getUpdateContainerRequest().getContainerId());
  allocateResponse=am1.sendContainerUpdateRequest(Arrays.asList(UpdateContainerRequest.newInstance(1,container.getId(),ContainerUpdateType.PROMOTE_EXECUTION_TYPE,null,ExecutionType.GUARANTEED)));
  Assert.assertEquals(0,allocateResponse.getUpdatedContainers().size());
  Assert.assertEquals(1,allocateResponse.getUpdateErrors().size());
  Assert.assertEquals("INCORRECT_CONTAINER_VERSION_ERROR",allocateResponse.getUpdateErrors().get(0).getReason());
  Assert.assertEquals(0,allocateResponse.getUpdateErrors().get(0).getCurrentContainerVersion());
  Assert.assertEquals(container.getId(),allocateResponse.getUpdateErrors().get(0).getUpdateContainerRequest().getContainerId());
  allocNode.nodeHeartbeat(true);
  rm.drainEvents();
  allocateResponse=am1.allocate(new ArrayList<>(),new ArrayList<>());
  Assert.assertEquals(1,allocateResponse.getUpdatedContainers().size());
  Container uc=allocateResponse.getUpdatedContainers().get(0).getContainer();
  Assert.assertEquals(ExecutionType.GUARANTEED,uc.getExecutionType());
  Assert.assertEquals(uc.getId(),container.getId());
  Assert.assertEquals(uc.getVersion(),container.getVersion() + 1);
  verifyMetrics(metrics,14336,14,2048,2,2);
  nm1.nodeHeartbeat(true);
  nm2.nodeHeartbeat(true);
  nm3.nodeHeartbeat(true);
  nm4.nodeHeartbeat(true);
  rm.drainEvents();
  RMContainer rmContainer=((CapacityScheduler)scheduler).getApplicationAttempt(uc.getId().getApplicationAttemptId()).getRMContainer(uc.getId());
  Assert.assertEquals(RMContainerState.ACQUIRED,rmContainer.getState());
  allocateResponse=am1.sendContainerUpdateRequest(Arrays.asList(UpdateContainerRequest.newInstance(uc.getVersion(),uc.getId(),ContainerUpdateType.DEMOTE_EXECUTION_TYPE,null,ExecutionType.OPPORTUNISTIC)));
  Assert.assertEquals(1,allocateResponse.getUpdatedContainers().size());
  uc=allocateResponse.getUpdatedContainers().get(0).getContainer();
  Assert.assertEquals(ExecutionType.OPPORTUNISTIC,uc.getExecutionType());
  Assert.assertEquals(uc.getId(),container.getId());
  Assert.assertEquals(uc.getVersion(),container.getVersion() + 2);
  dispatcher.waitForEventThreadToWait();
  rm.drainEvents();
  verifyMetrics(metrics,15360,15,1024,1,1);
}
