@Test(timeout=360000) public void testDecommissionWithOpenFileAndBlockRecovery() throws IOException, InterruptedException {
  startCluster(1,6);
  getCluster().waitActive();
  Path file=new Path("/testRecoveryDecommission");
  DistributedFileSystem dfs=getCluster().getFileSystem();
  FSDataOutputStream out=dfs.create(file,true,getConf().getInt(CommonConfigurationKeys.IO_FILE_BUFFER_SIZE_KEY,4096),(short)3,blockSize);
  long writtenBytes=0;
  while (writtenBytes < fileSize) {
    out.writeLong(writtenBytes);
    writtenBytes+=8;
  }
  out.hsync();
  DatanodeInfo[] lastBlockLocations=NameNodeAdapter.getBlockLocations(getCluster().getNameNode(),"/testRecoveryDecommission",0,fileSize).getLastLocatedBlock().getLocations();
  ArrayList<String> toDecom=new ArrayList<>();
  for (  DatanodeInfo dnDecom : lastBlockLocations) {
    toDecom.add(dnDecom.getXferAddr());
  }
  initExcludeHosts(toDecom);
  refreshNodes(0);
  getCluster().setLeasePeriod(300L,300L);
  Thread.sleep(2 * BLOCKREPORT_INTERVAL_MSEC);
  for (  DatanodeInfo dnDecom : lastBlockLocations) {
    DatanodeInfo datanode=NameNodeAdapter.getDatanode(getCluster().getNamesystem(),dnDecom);
    waitNodeState(datanode,AdminStates.DECOMMISSIONED);
  }
  assertEquals(dfs.getFileStatus(file).getLen(),writtenBytes);
}
