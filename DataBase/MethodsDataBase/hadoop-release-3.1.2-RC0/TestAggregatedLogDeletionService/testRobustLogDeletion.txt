@Test public void testRobustLogDeletion() throws Exception {
  final long RETENTION_SECS=10 * 24 * 3600;
  String root="mockfs://foo/";
  String remoteRootLogDir=root + "tmp/logs";
  String suffix="logs";
  Configuration conf=new Configuration();
  conf.setClass("fs.mockfs.impl",MockFileSystem.class,FileSystem.class);
  conf.set(YarnConfiguration.LOG_AGGREGATION_ENABLED,"true");
  conf.set(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,"864000");
  conf.set(YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS,"1");
  conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,remoteRootLogDir);
  conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,suffix);
  FileSystem.closeAll();
  Path rootPath=new Path(root);
  FileSystem rootFs=rootPath.getFileSystem(conf);
  FileSystem mockFs=((FilterFileSystem)rootFs).getRawFileSystem();
  Path remoteRootLogPath=new Path(remoteRootLogDir);
  Path userDir=new Path(remoteRootLogPath,"me");
  FileStatus userDirStatus=new FileStatus(0,true,0,0,0,userDir);
  when(mockFs.listStatus(remoteRootLogPath)).thenReturn(new FileStatus[]{userDirStatus});
  Path userLogDir=new Path(userDir,suffix);
  ApplicationId appId1=ApplicationId.newInstance(System.currentTimeMillis(),1);
  Path app1Dir=new Path(userLogDir,appId1.toString());
  FileStatus app1DirStatus=new FileStatus(0,true,0,0,0,app1Dir);
  ApplicationId appId2=ApplicationId.newInstance(System.currentTimeMillis(),2);
  Path app2Dir=new Path(userLogDir,"application_a");
  FileStatus app2DirStatus=new FileStatus(0,true,0,0,0,app2Dir);
  ApplicationId appId3=ApplicationId.newInstance(System.currentTimeMillis(),3);
  Path app3Dir=new Path(userLogDir,appId3.toString());
  FileStatus app3DirStatus=new FileStatus(0,true,0,0,0,app3Dir);
  when(mockFs.listStatus(userLogDir)).thenReturn(new FileStatus[]{app1DirStatus,app2DirStatus,app3DirStatus});
  when(mockFs.listStatus(app1Dir)).thenThrow(new RuntimeException("Should Be Caught and Logged"));
  Path app3Log3=new Path(app3Dir,"host1");
  FileStatus app3Log3Status=new FileStatus(10,false,1,1,0,app3Log3);
  when(mockFs.listStatus(app3Dir)).thenReturn(new FileStatus[]{app3Log3Status});
  final List<ApplicationId> finishedApplications=Collections.unmodifiableList(Arrays.asList(appId1,appId3));
  ApplicationClientProtocol rmClient=createMockRMClient(finishedApplications,null);
  AggregatedLogDeletionService.LogDeletionTask deletionTask=new AggregatedLogDeletionService.LogDeletionTask(conf,RETENTION_SECS,rmClient);
  deletionTask.run();
  verify(mockFs).delete(app3Dir,true);
}
