@Test(timeout=60000) public void testQueuePriorityOrdering() throws Exception {
  CapacitySchedulerConfiguration newConf=(CapacitySchedulerConfiguration)TestUtils.getConfigurationWithMultipleQueues(conf);
  newConf.setQueueOrderingPolicy(CapacitySchedulerConfiguration.ROOT,CapacitySchedulerConfiguration.QUEUE_PRIORITY_UTILIZATION_ORDERING_POLICY);
  newConf.setMaximumCapacity(CapacitySchedulerConfiguration.ROOT + ".a",20);
  newConf.setQueuePriority(CapacitySchedulerConfiguration.ROOT + ".c",1);
  newConf.setQueuePriority(CapacitySchedulerConfiguration.ROOT + ".b",2);
  newConf.setQueuePriority(CapacitySchedulerConfiguration.ROOT + ".a",3);
  MockRM rm1=new MockRM(newConf);
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",100 * GB);
  RMApp app1=rm1.submitApp(2 * GB,"app","user",null,"a");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  RMApp app2=rm1.submitApp(2 * GB,"app","user",null,"b");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm1,nm1);
  RMApp app3=rm1.submitApp(2 * GB,"app","user",null,"c");
  MockAM am3=MockRM.launchAndRegisterAM(app3,rm1,nm1);
  am1.allocate("*",5 * GB,10,null);
  am2.allocate("*",5 * GB,10,null);
  am3.allocate("*",5 * GB,10,null);
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  FiCaSchedulerApp schedulerApp1=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  FiCaSchedulerApp schedulerApp2=cs.getApplicationAttempt(am2.getApplicationAttemptId());
  FiCaSchedulerApp schedulerApp3=cs.getApplicationAttempt(am3.getApplicationAttemptId());
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  Assert.assertEquals(2,schedulerApp1.getLiveContainers().size());
  Assert.assertEquals(1,schedulerApp2.getLiveContainers().size());
  Assert.assertEquals(1,schedulerApp3.getLiveContainers().size());
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  Assert.assertEquals(3,schedulerApp1.getLiveContainers().size());
  Assert.assertEquals(1,schedulerApp2.getLiveContainers().size());
  Assert.assertEquals(1,schedulerApp3.getLiveContainers().size());
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  Assert.assertEquals(3,schedulerApp1.getLiveContainers().size());
  Assert.assertEquals(2,schedulerApp2.getLiveContainers().size());
  Assert.assertEquals(1,schedulerApp3.getLiveContainers().size());
  for (int i=0; i < 3; i++) {
    cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  }
  Assert.assertEquals(3,schedulerApp1.getLiveContainers().size());
  Assert.assertEquals(5,schedulerApp2.getLiveContainers().size());
  Assert.assertEquals(1,schedulerApp3.getLiveContainers().size());
  for (int i=0; i < 10; i++) {
    cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  }
  Assert.assertEquals(3,schedulerApp1.getLiveContainers().size());
  Assert.assertEquals(5,schedulerApp2.getLiveContainers().size());
  Assert.assertEquals(11,schedulerApp3.getLiveContainers().size());
  for (int i=0; i < 20; i++) {
    cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  }
  Assert.assertEquals(4,schedulerApp1.getLiveContainers().size());
  Assert.assertEquals(6,schedulerApp2.getLiveContainers().size());
  Assert.assertEquals(11,schedulerApp3.getLiveContainers().size());
  rm1.close();
}
