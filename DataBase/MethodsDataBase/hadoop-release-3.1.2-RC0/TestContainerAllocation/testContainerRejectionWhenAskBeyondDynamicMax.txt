@Test(timeout=60000) public void testContainerRejectionWhenAskBeyondDynamicMax() throws Exception {
  CapacitySchedulerConfiguration newConf=(CapacitySchedulerConfiguration)TestUtils.getConfigurationWithMultipleQueues(conf);
  newConf.setClass(CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,DominantResourceCalculator.class,ResourceCalculator.class);
  newConf.set(CapacitySchedulerConfiguration.getQueuePrefix("root.a") + MAXIMUM_ALLOCATION_MB,"4096");
  MockRM rm1=new MockRM(newConf);
  rm1.start();
  boolean submitFailed=false;
  MockNM nm1=rm1.registerNode("h1:1234",2 * GB,1);
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"a");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  try {
    am1.allocate("*",5 * GB,1,null);
  }
 catch (  InvalidResourceRequestException e) {
    submitFailed=true;
  }
  Assert.assertTrue(submitFailed);
  am1.allocate("*",4 * GB,1,null);
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  cs.getNodeTracker().setForceConfiguredMaxAllocation(false);
  rm1.registerNode("h2:1234",3 * GB,1);
  submitFailed=false;
  try {
    am1.allocate("*",4 * GB,1,null);
  }
 catch (  InvalidResourceRequestException e) {
    submitFailed=true;
  }
  Assert.assertTrue(submitFailed);
  am1.allocate("*",3 * GB,1,null);
  rm1.close();
}
