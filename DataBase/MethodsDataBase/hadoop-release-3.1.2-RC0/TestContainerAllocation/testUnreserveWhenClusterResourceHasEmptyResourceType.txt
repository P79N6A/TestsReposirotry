@Test(timeout=60000) public void testUnreserveWhenClusterResourceHasEmptyResourceType() throws Exception {
  TestResourceUtils.addNewTypesToResources("resource1");
  CapacitySchedulerConfiguration newConf=(CapacitySchedulerConfiguration)TestUtils.getConfigurationWithMultipleQueues(conf);
  newConf.setClass(CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,DominantResourceCalculator.class,ResourceCalculator.class);
  newConf.setBoolean(TestResourceProfiles.TEST_CONF_RESET_RESOURCE_TYPES,false);
  newConf.setMaximumCapacity(CapacitySchedulerConfiguration.ROOT + ".a",50);
  MockRM rm1=new MockRM(newConf);
  RMNodeLabelsManager nodeLabelsManager=new NullRMNodeLabelsManager();
  nodeLabelsManager.init(newConf);
  rm1.getRMContext().setNodeLabelManager(nodeLabelsManager);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",8 * GB);
  MockNM nm2=rm1.registerNode("h2:1234",8 * GB);
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"a");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  RMApp app2=rm1.submitApp(1 * GB,"app","user",null,"b");
  MockRM.launchAndRegisterAM(app2,rm1,nm1);
  am1.allocate("*",7 * GB,2,new ArrayList<ContainerId>());
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  RMNode rmNode2=rm1.getRMContext().getRMNodes().get(nm2.getNodeId());
  FiCaSchedulerApp schedulerApp1=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  Assert.assertEquals(1,schedulerApp1.getLiveContainers().size());
  Assert.assertEquals(1,schedulerApp1.getReservedContainers().size());
  cs.handle(new NodeUpdateSchedulerEvent(rmNode2));
  Assert.assertEquals(2,schedulerApp1.getLiveContainers().size());
  Assert.assertEquals(0,schedulerApp1.getReservedContainers().size());
  rm1.close();
}
