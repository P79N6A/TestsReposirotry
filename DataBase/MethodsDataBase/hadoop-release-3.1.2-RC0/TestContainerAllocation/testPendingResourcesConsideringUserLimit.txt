@Test public void testPendingResourcesConsideringUserLimit() throws Exception {
  CapacitySchedulerConfiguration newConf=new CapacitySchedulerConfiguration(conf);
  newConf.setUserLimitFactor(CapacitySchedulerConfiguration.ROOT + ".default",0.5f);
  newConf.setMaximumAMResourcePercentPerPartition(CapacitySchedulerConfiguration.ROOT + ".default","",1.0f);
  MockRM rm1=new MockRM(newConf);
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",8 * GB);
  MockNM nm2=rm1.registerNode("h2:1234",8 * GB);
  RMApp app1=rm1.submitApp(2 * GB,"app","u1",null,"default");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  RMApp app2=rm1.submitApp(4 * GB,"app","u2",null,"default");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm1,nm1);
  am1.allocate("*",3 * GB,1,null);
  am2.allocate("*",5 * GB,4,null);
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  RMNode rmNode2=rm1.getRMContext().getRMNodes().get(nm2.getNodeId());
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  FiCaSchedulerApp schedulerApp1=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  Assert.assertEquals(1,schedulerApp1.getReservedContainers().size());
  Assert.assertEquals(2 * GB,schedulerApp1.getAppAttemptResourceUsage().getUsed().getMemorySize());
  Assert.assertEquals(3 * GB,schedulerApp1.getAppAttemptResourceUsage().getReserved().getMemorySize());
  Assert.assertEquals(3 * GB,schedulerApp1.getAppAttemptResourceUsage().getPending().getMemorySize());
  FiCaSchedulerApp schedulerApp2=cs.getApplicationAttempt(am2.getApplicationAttemptId());
  Assert.assertEquals(4 * GB,schedulerApp2.getAppAttemptResourceUsage().getUsed().getMemorySize());
  Assert.assertEquals(0 * GB,schedulerApp2.getAppAttemptResourceUsage().getReserved().getMemorySize());
  Assert.assertEquals(5 * 4 * GB,schedulerApp2.getAppAttemptResourceUsage().getPending().getMemorySize());
  LeafQueue lq=(LeafQueue)cs.getQueue("default");
  Assert.assertEquals(7 * GB,lq.getTotalPendingResourcesConsideringUserLimit(Resources.createResource(20 * GB),"",false).getMemorySize());
  Assert.assertEquals(4 * GB,lq.getTotalPendingResourcesConsideringUserLimit(Resources.createResource(20 * GB),"",true).getMemorySize());
  rm1.close();
}
