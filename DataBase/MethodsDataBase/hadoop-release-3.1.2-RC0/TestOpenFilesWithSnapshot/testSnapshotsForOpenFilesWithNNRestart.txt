/** 
 * Test snapshot capturing open files and verify the same across NameNode restarts.
 */
@Test(timeout=120000) public void testSnapshotsForOpenFilesWithNNRestart() throws Exception {
  final Path level0A=new Path("/level_0_A");
  final Path flumeSnapRootDir=level0A;
  final String flumeFileName="flume.log";
  final String flumeSnap1Name="flume_snap_1";
  final String flumeSnap2Name="flume_snap_2";
  final Path flumeFile=new Path(level0A,flumeFileName);
  createFile(flumeFile);
  FSDataOutputStream flumeOutputStream=fs.append(flumeFile);
  final Path flumeS1Dir=SnapshotTestHelper.createSnapshot(fs,flumeSnapRootDir,flumeSnap1Name);
  final Path flumeS1Path=new Path(flumeS1Dir,flumeFileName);
  final long flumeFileLengthAfterS1=fs.getFileStatus(flumeFile).getLen();
  Assert.assertEquals(flumeFileLengthAfterS1,fs.getFileStatus(flumeS1Path).getLen());
  long flumeFileWrittenDataLength=flumeFileLengthAfterS1;
  int newWriteLength=(int)(BLOCKSIZE * 1.5);
  byte[] buf=new byte[newWriteLength];
  Random random=new Random();
  random.nextBytes(buf);
  flumeFileWrittenDataLength+=writeToStream(flumeOutputStream,buf);
  final Path flumeS2Dir=SnapshotTestHelper.createSnapshot(fs,flumeSnapRootDir,flumeSnap2Name);
  final Path flumeS2Path=new Path(flumeS2Dir,flumeFileName);
  final long flumeFileLengthAfterS2=fs.getFileStatus(flumeFile).getLen();
  Assert.assertEquals(flumeFileWrittenDataLength,flumeFileLengthAfterS2);
  Assert.assertEquals(flumeFileLengthAfterS2,fs.getFileStatus(flumeS2Path).getLen());
  flumeFileWrittenDataLength+=writeToStream(flumeOutputStream,buf);
  Assert.assertEquals(flumeFileLengthAfterS1,fs.getFileStatus(flumeS1Path).getLen());
  Assert.assertEquals(flumeFileLengthAfterS2,fs.getFileStatus(flumeS2Path).getLen());
  restartNameNode();
  cluster.waitActive();
  Assert.assertEquals(flumeFileWrittenDataLength,fs.getFileStatus(flumeFile).getLen());
  Assert.assertEquals(flumeFileLengthAfterS1,fs.getFileStatus(flumeS1Path).getLen());
  Assert.assertEquals(flumeFileLengthAfterS2,fs.getFileStatus(flumeS2Path).getLen());
  flumeOutputStream.close();
}
