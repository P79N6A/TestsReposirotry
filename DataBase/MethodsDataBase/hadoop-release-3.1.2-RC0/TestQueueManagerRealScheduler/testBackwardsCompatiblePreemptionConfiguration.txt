@Test public void testBackwardsCompatiblePreemptionConfiguration() throws IOException {
  QueueManager queueMgr=scheduler.getQueueManager();
  assertEquals(30000,queueMgr.getQueue("root").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("default").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("queueA").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("queueB").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("queueB.queueB1").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("queueB.queueB2").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("queueC").getFairSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("root").getMinSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("default").getMinSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("queueA").getMinSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("queueB").getMinSharePreemptionTimeout());
  assertEquals(5000,queueMgr.getQueue("queueB.queueB1").getMinSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("queueB.queueB2").getMinSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("queueC").getMinSharePreemptionTimeout());
  writeAllocFile(25,30);
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  assertEquals(25000,queueMgr.getQueue("root").getFairSharePreemptionTimeout());
}
