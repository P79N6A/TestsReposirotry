@Test public void testStripedLayoutRedundancy(){
  INodeFile inodeFile;
  try {
    new INodeFile(HdfsConstants.GRANDFATHER_INODE_ID,null,perm,0L,0L,null,new Short((short)3),StripedFileTestUtil.getDefaultECPolicy().getId(),1024L,HdfsConstants.WARM_STORAGE_POLICY_ID,STRIPED);
    fail("INodeFile construction should fail when both replication and " + "ECPolicy requested!");
  }
 catch (  IllegalArgumentException iae) {
    LOG.info("Expected exception: ",iae);
  }
  try {
    new INodeFile(HdfsConstants.GRANDFATHER_INODE_ID,null,perm,0L,0L,null,null,null,1024L,HdfsConstants.WARM_STORAGE_POLICY_ID,STRIPED);
    fail("INodeFile construction should fail when EC Policy param not " + "provided for striped layout!");
  }
 catch (  IllegalArgumentException iae) {
    LOG.info("Expected exception: ",iae);
  }
  try {
    new INodeFile(HdfsConstants.GRANDFATHER_INODE_ID,null,perm,0L,0L,null,null,Byte.MAX_VALUE,1024L,HdfsConstants.WARM_STORAGE_POLICY_ID,STRIPED);
    fail("INodeFile construction should fail when EC Policy is " + "not in the supported list!");
  }
 catch (  IllegalArgumentException iae) {
    LOG.info("Expected exception: ",iae);
  }
  final Byte ecPolicyID=StripedFileTestUtil.getDefaultECPolicy().getId();
  try {
    new INodeFile(HdfsConstants.GRANDFATHER_INODE_ID,null,perm,0L,0L,null,null,ecPolicyID,1024L,HdfsConstants.WARM_STORAGE_POLICY_ID,CONTIGUOUS);
    fail("INodeFile construction should fail when replication param is " + "provided for striped layout!");
  }
 catch (  IllegalArgumentException iae) {
    LOG.info("Expected exception: ",iae);
  }
  inodeFile=new INodeFile(HdfsConstants.GRANDFATHER_INODE_ID,null,perm,0L,0L,null,null,ecPolicyID,1024L,HdfsConstants.WARM_STORAGE_POLICY_ID,STRIPED);
  Assert.assertTrue(inodeFile.isStriped());
  Assert.assertEquals(ecPolicyID.byteValue(),inodeFile.getErasureCodingPolicyID());
}
