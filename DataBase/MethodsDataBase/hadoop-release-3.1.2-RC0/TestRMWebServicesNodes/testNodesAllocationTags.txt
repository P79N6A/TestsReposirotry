@Test public void testNodesAllocationTags() throws Exception {
  NodeId nm1=NodeId.newInstance("host1",1234);
  NodeId nm2=NodeId.newInstance("host2",2345);
  AllocationTagsManager atm=mock(AllocationTagsManager.class);
  Map<String,Map<String,Long>> expectedAllocationTags=new TreeMap<>();
  Map<String,Long> nm1Tags=new TreeMap<>();
  nm1Tags.put("A",1L);
  nm1Tags.put("B",2L);
  Map<String,Long> nm2Tags=new TreeMap<>();
  nm2Tags.put("C",1L);
  nm2Tags.put("D",2L);
  expectedAllocationTags.put(nm1.toString(),nm1Tags);
  expectedAllocationTags.put(nm2.toString(),nm2Tags);
  when(atm.getAllocationTagsWithCount(nm1)).thenReturn(nm1Tags);
  when(atm.getAllocationTagsWithCount(nm2)).thenReturn(nm2Tags);
  rm.getRMContext().setAllocationTagsManager(atm);
  rm.start();
  rm.registerNode(nm1.toString(),1024);
  rm.registerNode(nm2.toString(),1024);
  WebResource r=resource();
  ClientResponse response=r.path("ws").path("v1").path("cluster").path("nodes").accept("application/json").get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON + "; " + JettyUtils.UTF_8,response.getType().toString());
  JSONObject nodesInfoJson=response.getEntity(JSONObject.class);
  verifyNodeAllocationTag(nodesInfoJson,expectedAllocationTags);
  rm.stop();
}
