/** 
 * Test metrics associated with liveness and decommission status of DataNodes.
 */
@Test public void testDataNodeLivenessAndDecom() throws Exception {
  List<DataNode> dataNodes=cluster.getDataNodes();
  DatanodeDescriptor[] dnDescriptors=new DatanodeDescriptor[DATANODE_COUNT];
  String[] dnAddresses=new String[DATANODE_COUNT];
  for (int i=0; i < DATANODE_COUNT; i++) {
    dnDescriptors[i]=bm.getDatanodeManager().getDatanode(dataNodes.get(i).getDatanodeId());
    dnAddresses[i]=dnDescriptors[i].getXferAddr();
  }
  hostsFileWriter.initIncludeHosts(dnAddresses);
  bm.getDatanodeManager().refreshNodes(CONF);
  assertGauge("NumDecomLiveDataNodes",0,getMetrics(NS_METRICS));
  assertGauge("NumLiveDataNodes",DATANODE_COUNT,getMetrics(NS_METRICS));
  hostsFileWriter.initExcludeHost(dnAddresses[0]);
  bm.getDatanodeManager().refreshNodes(CONF);
  assertGauge("NumDecommissioningDataNodes",1,getMetrics(NS_METRICS));
  BlockManagerTestUtil.recheckDecommissionState(bm.getDatanodeManager());
  assertGauge("NumDecommissioningDataNodes",0,getMetrics(NS_METRICS));
  assertGauge("NumDecomLiveDataNodes",1,getMetrics(NS_METRICS));
  assertGauge("NumLiveDataNodes",DATANODE_COUNT,getMetrics(NS_METRICS));
  for (int i=0; i < DATANODE_COUNT; i++) {
    DataNodeTestUtils.setHeartbeatsDisabledForTests(dataNodes.get(i),true);
    long expireInterval=CONF.getLong(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_DEFAULT) * 2L + CONF.getLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_DEFAULT) * 10 * 1000L;
    DFSTestUtil.resetLastUpdatesWithOffset(dnDescriptors[i],-(expireInterval + 1));
  }
  BlockManagerTestUtil.checkHeartbeat(bm);
  assertGauge("NumDecomLiveDataNodes",0,getMetrics(NS_METRICS));
  assertGauge("NumDecomDeadDataNodes",1,getMetrics(NS_METRICS));
  assertGauge("NumLiveDataNodes",0,getMetrics(NS_METRICS));
  assertGauge("NumDeadDataNodes",DATANODE_COUNT,getMetrics(NS_METRICS));
  String[] includeHosts=new String[dnAddresses.length - 1];
  for (int i=0; i < includeHosts.length; i++) {
    includeHosts[i]=dnAddresses[i + 1];
  }
  hostsFileWriter.initIncludeHosts(includeHosts);
  hostsFileWriter.initExcludeHosts(new ArrayList<>());
  bm.getDatanodeManager().refreshNodes(CONF);
  assertGauge("NumDecomLiveDataNodes",0,getMetrics(NS_METRICS));
  assertGauge("NumDecomDeadDataNodes",0,getMetrics(NS_METRICS));
  assertGauge("NumLiveDataNodes",0,getMetrics(NS_METRICS));
  assertGauge("NumDeadDataNodes",DATANODE_COUNT - 1,getMetrics(NS_METRICS));
  for (int i=1; i < dataNodes.size(); i++) {
    DataNodeTestUtils.setHeartbeatsDisabledForTests(dataNodes.get(i),false);
    DFSTestUtil.resetLastUpdatesWithOffset(dnDescriptors[i],0);
  }
  BlockManagerTestUtil.checkHeartbeat(bm);
  assertGauge("NumLiveDataNodes",DATANODE_COUNT - 1,getMetrics(NS_METRICS));
  assertGauge("NumDeadDataNodes",0,getMetrics(NS_METRICS));
}
