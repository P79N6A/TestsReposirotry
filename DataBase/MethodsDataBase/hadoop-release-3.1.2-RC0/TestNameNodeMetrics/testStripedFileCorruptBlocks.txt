@Test(timeout=90000L) public void testStripedFileCorruptBlocks() throws Exception {
  final long fileLen=BLOCK_SIZE * 4;
  final Path ecFile=new Path(ecDir,"ecFile.log");
  DFSTestUtil.createFile(fs,ecFile,fileLen,(short)1,0L);
  StripedFileTestUtil.waitBlockGroupsReported(fs,ecFile.toString());
  for (  DataNode dn : cluster.getDataNodes()) {
    DataNodeTestUtils.setHeartbeatsDisabledForTests(dn,true);
  }
  verifyZeroMetrics();
  verifyAggregatedMetricsTally();
  LocatedBlocks lbs=fs.getClient().getNamenode().getBlockLocations(ecFile.toString(),0,fileLen);
  assert lbs.get(0) instanceof LocatedStripedBlock;
  LocatedStripedBlock bg=(LocatedStripedBlock)(lbs.get(0));
  cluster.getNamesystem().writeLock();
  try {
    bm.findAndMarkBlockAsCorrupt(bg.getBlock(),bg.getLocations()[0],"STORAGE_ID","TEST");
  }
  finally {
    cluster.getNamesystem().writeUnlock();
  }
  BlockManagerTestUtil.updateState(bm);
  MetricsRecordBuilder rb=waitForDnMetricValue(NS_METRICS,"CorruptBlocks",1L,500);
  assertGauge("LowRedundancyBlocks",1L,rb);
  assertGauge("PendingReplicationBlocks",0L,rb);
  assertGauge("PendingReconstructionBlocks",0L,rb);
  assertGauge("LowRedundancyReplicatedBlocks",0L,rb);
  assertGauge("CorruptReplicatedBlocks",0L,rb);
  assertGauge("HighestPriorityLowRedundancyReplicatedBlocks",0L,rb);
  assertGauge("LowRedundancyECBlockGroups",1L,rb);
  assertGauge("CorruptECBlockGroups",1L,rb);
  assertGauge("HighestPriorityLowRedundancyECBlocks",1L,rb);
  verifyAggregatedMetricsTally();
  for (  DataNode dn : cluster.getDataNodes()) {
    DataNodeTestUtils.setHeartbeatsDisabledForTests(dn,false);
  }
  BlockManagerTestUtil.getComputedDatanodeWork(bm);
  BlockManagerTestUtil.updateState(bm);
  StripedFileTestUtil.waitForReconstructionFinished(ecFile,fs,3);
  rb=waitForDnMetricValue(NS_METRICS,"CorruptBlocks",0L,500);
  assertGauge("CorruptBlocks",0L,rb);
  assertGauge("PendingReplicationBlocks",0L,rb);
  assertGauge("PendingReconstructionBlocks",0L,rb);
  assertGauge("LowRedundancyReplicatedBlocks",0L,rb);
  assertGauge("CorruptReplicatedBlocks",0L,rb);
  assertGauge("HighestPriorityLowRedundancyReplicatedBlocks",0L,rb);
  assertGauge("LowRedundancyECBlockGroups",0L,rb);
  assertGauge("CorruptECBlockGroups",0L,rb);
  assertGauge("HighestPriorityLowRedundancyECBlocks",0L,rb);
  verifyAggregatedMetricsTally();
  fs.delete(ecFile,true);
  BlockManagerTestUtil.getComputedDatanodeWork(bm);
  BlockManagerTestUtil.updateState(bm);
  waitForDnMetricValue(NS_METRICS,"CorruptBlocks",0L,500);
  verifyZeroMetrics();
  verifyAggregatedMetricsTally();
}
