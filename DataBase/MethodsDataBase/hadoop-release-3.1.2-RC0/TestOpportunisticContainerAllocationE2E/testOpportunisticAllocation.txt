/** 
 * Tests allocation with requests comprising only opportunistic containers.
 */
@Test(timeout=60000) public void testOpportunisticAllocation() throws YarnException, IOException {
  assertEquals(0,amClient.ask.size());
  assertEquals(0,amClient.release.size());
  amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability,null,null,priority3,0,true,null,ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC,true)));
  amClient.addContainerRequest(new AMRMClient.ContainerRequest(capability,null,null,priority3,0,true,null,ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC,true)));
  int oppContainersRequestedAny=amClient.getTable(0).get(priority3,ResourceRequest.ANY,ExecutionType.OPPORTUNISTIC,capability).remoteRequest.getNumContainers();
  assertEquals(2,oppContainersRequestedAny);
  assertEquals(1,amClient.ask.size());
  assertEquals(0,amClient.release.size());
  int allocatedContainerCount=0;
  int iterationsLeft=10;
  Set<ContainerId> releases=new TreeSet<>();
  amClient.getNMTokenCache().clearCache();
  Assert.assertEquals(0,amClient.getNMTokenCache().numberOfTokensInCache());
  HashMap<String,Token> receivedNMTokens=new HashMap<>();
  while (allocatedContainerCount < oppContainersRequestedAny && iterationsLeft-- > 0) {
    AllocateResponse allocResponse=amClient.allocate(0.1f);
    assertEquals(0,amClient.ask.size());
    assertEquals(0,amClient.release.size());
    for (    Container container : allocResponse.getAllocatedContainers()) {
      allocatedContainerCount++;
      ContainerId rejectContainerId=container.getId();
      releases.add(rejectContainerId);
    }
    for (    NMToken token : allocResponse.getNMTokens()) {
      String nodeID=token.getNodeId().toString();
      receivedNMTokens.put(nodeID,token.getToken());
    }
    if (allocatedContainerCount < oppContainersRequestedAny) {
      sleep(100);
    }
  }
  assertEquals(oppContainersRequestedAny,allocatedContainerCount);
  assertEquals(1,receivedNMTokens.values().size());
}
