@Test(timeout=120000) public void testAMRMProxyTokenRenewal() throws Exception {
  ApplicationMasterProtocol client;
  try (MiniYARNCluster cluster=new MiniYARNCluster("testE2ETokenRenewal",1,1,1);YarnClient rmClient=YarnClient.createYarnClient()){
    Configuration conf=new YarnConfiguration();
    conf.setBoolean(YarnConfiguration.AMRM_PROXY_ENABLED,true);
    conf.setInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,4500);
    conf.setInt(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,4500);
    conf.setInt(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS,4500);
    conf.setInt(YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS,20);
    cluster.init(conf);
    cluster.start();
    final Configuration yarnConf=cluster.getConfig();
    yarnConf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS,YarnConfiguration.DEFAULT_AMRM_PROXY_ADDRESS);
    rmClient.init(yarnConf);
    rmClient.start();
    ApplicationAttemptId appAttmptId=createApp(rmClient,cluster,conf);
    ApplicationId appId=appAttmptId.getApplicationId();
    client=createAMRMProtocol(rmClient,appId,cluster,yarnConf);
    client.registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(NetUtils.getHostname(),1024,""));
    LOG.info("testAMRMProxyTokenRenewal - Allocate Resources Application Master");
    AllocateRequest request=createAllocateRequest(rmClient.getNodeReports(NodeState.RUNNING));
    Token lastToken=null;
    AllocateResponse response=null;
    for (int i=0; i < 5; i++) {
      response=client.allocate(request);
      request.setResponseId(request.getResponseId() + 1);
      if (response.getAMRMToken() != null && !response.getAMRMToken().equals(lastToken)) {
        break;
      }
      lastToken=response.getAMRMToken();
      Thread.sleep(4500);
    }
    Assert.assertFalse(response.getAMRMToken().equals(lastToken));
    LOG.info("testAMRMPRoxy - Finish Application Master");
    client.finishApplicationMaster(FinishApplicationMasterRequest.newInstance(FinalApplicationStatus.SUCCEEDED,"success",null));
  }
 }
