@Test public void testACLConfigurationForInvalidCases() throws Exception {
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  csConf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{QUEUEA,QUEUEB,QUEUEC});
  csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + "." + QUEUEA,50f);
  csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + "." + QUEUEB,25f);
  csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + "." + QUEUEC,25f);
  String[] aclsForA=new String[2];
  aclsForA[0]=QUEUE_A_USER;
  aclsForA[1]=QUEUE_A_GROUP;
  csConf.setPriorityAcls(CapacitySchedulerConfiguration.ROOT + "." + QUEUEA,Priority.newInstance(maxPriorityQueueA),Priority.newInstance(defaultPriorityQueueA),aclsForA);
  String[] aclsForB=new String[1];
  aclsForB[0]=QUEUE_B_USER;
  csConf.setPriorityAcls(CapacitySchedulerConfiguration.ROOT + "." + QUEUEB,Priority.newInstance(maxPriorityQueueB),Priority.newInstance(defaultPriorityQueueB),aclsForB);
  List<AppPriorityACLGroup> pGroupA=csConf.getPriorityAcls(CapacitySchedulerConfiguration.ROOT + "." + QUEUEA,Priority.newInstance(clusterMaxPriority));
  List<AppPriorityACLGroup> pGroupB=csConf.getPriorityAcls(CapacitySchedulerConfiguration.ROOT + "." + QUEUEB,Priority.newInstance(clusterMaxPriority));
  verifyACLs(pGroupA,QUEUE_A_USER,QUEUE_A_GROUP,maxPriorityQueueA,defaultPriorityQueueA);
  verifyACLs(pGroupB,QUEUE_B_USER,"",maxPriorityQueueB,0);
}
