@Test public void testParsePlacementSpec() throws PlacementConstraintParseException {
  Map<SourceTags,PlacementConstraint> result;
  PlacementConstraint expectedPc1, expectedPc2;
  PlacementConstraint actualPc1, actualPc2;
  SourceTags tag1, tag2;
  result=PlacementConstraintParser.parsePlacementSpec("foo=3,notin,node,foo");
  Assert.assertEquals(1,result.size());
  tag1=result.keySet().iterator().next();
  Assert.assertEquals("foo",tag1.getTag());
  Assert.assertEquals(3,tag1.getNumOfAllocations());
  expectedPc1=targetNotIn("node",allocationTag("foo")).build();
  actualPc1=result.values().iterator().next();
  Assert.assertEquals(expectedPc1,actualPc1);
  result=PlacementConstraintParser.parsePlacementSpec("foo=3,NOTIN,NODE,foo");
  Assert.assertEquals(1,result.size());
  tag1=result.keySet().iterator().next();
  Assert.assertEquals("foo",tag1.getTag());
  Assert.assertEquals(3,tag1.getNumOfAllocations());
  expectedPc1=targetNotIn("node",allocationTag("foo")).build();
  actualPc1=result.values().iterator().next();
  Assert.assertEquals(expectedPc1,actualPc1);
  result=PlacementConstraintParser.parsePlacementSpec("foo=10,cardinality,node,foo,bar,0,100");
  Assert.assertEquals(1,result.size());
  tag1=result.keySet().iterator().next();
  Assert.assertEquals("foo",tag1.getTag());
  Assert.assertEquals(10,tag1.getNumOfAllocations());
  expectedPc1=cardinality("node",0,100,"foo","bar").build();
  Assert.assertEquals(expectedPc1,result.values().iterator().next());
  result=PlacementConstraintParser.parsePlacementSpec("foo=3,notin,node,foo:bar=2,in,node,foo");
  Assert.assertEquals(2,result.size());
  Iterator<SourceTags> keyIt=result.keySet().iterator();
  tag1=keyIt.next();
  Assert.assertEquals("foo",tag1.getTag());
  Assert.assertEquals(3,tag1.getNumOfAllocations());
  tag2=keyIt.next();
  Assert.assertEquals("bar",tag2.getTag());
  Assert.assertEquals(2,tag2.getNumOfAllocations());
  Iterator<PlacementConstraint> valueIt=result.values().iterator();
  expectedPc1=targetNotIn("node",allocationTag("foo")).build();
  expectedPc2=targetIn("node",allocationTag("foo")).build();
  Assert.assertEquals(expectedPc1,valueIt.next());
  Assert.assertEquals(expectedPc2,valueIt.next());
  result=PlacementConstraintParser.parsePlacementSpec("foo=1000,and(notin,node,bar:in,node,foo)");
  Assert.assertEquals(1,result.size());
  keyIt=result.keySet().iterator();
  tag1=keyIt.next();
  Assert.assertEquals("foo",tag1.getTag());
  Assert.assertEquals(1000,tag1.getNumOfAllocations());
  actualPc1=result.values().iterator().next();
  expectedPc1=and(targetNotIn("node",allocationTag("bar")),targetIn("node",allocationTag("foo"))).build();
  Assert.assertEquals(expectedPc1,actualPc1);
  result=PlacementConstraintParser.parsePlacementSpec("foo=1000,and(notin,node,bar:or(in,node,foo:in,node,moo))" + ":bar=200,notin,node,foo");
  Assert.assertEquals(2,result.size());
  keyIt=result.keySet().iterator();
  tag1=keyIt.next();
  tag2=keyIt.next();
  Assert.assertEquals("foo",tag1.getTag());
  Assert.assertEquals(1000,tag1.getNumOfAllocations());
  Assert.assertEquals("bar",tag2.getTag());
  Assert.assertEquals(200,tag2.getNumOfAllocations());
  valueIt=result.values().iterator();
  actualPc1=valueIt.next();
  actualPc2=valueIt.next();
  expectedPc1=and(targetNotIn("node",allocationTag("bar")),or(targetIn("node",allocationTag("foo")),targetIn("node",allocationTag("moo")))).build();
  Assert.assertEquals(actualPc1,expectedPc1);
  expectedPc2=targetNotIn("node",allocationTag("foo")).build();
  Assert.assertEquals(expectedPc2,actualPc2);
}
