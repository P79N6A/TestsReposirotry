@Test public void testCardinalityConstraintParser() throws PlacementConstraintParseException {
  String expressionExpr;
  ConstraintParser parser;
  AbstractConstraint constraint;
  SingleConstraint single;
  expressionExpr="cardinality, NODE, foo, 0, 1";
  parser=new CardinalityConstraintParser(expressionExpr);
  constraint=parser.parse();
  Assert.assertTrue(constraint instanceof SingleConstraint);
  single=(SingleConstraint)constraint;
  Assert.assertEquals("node",single.getScope());
  Assert.assertEquals(0,single.getMinCardinality());
  Assert.assertEquals(1,single.getMaxCardinality());
  Assert.assertEquals(1,single.getTargetExpressions().size());
  TargetExpression exp=single.getTargetExpressions().iterator().next();
  Assert.assertEquals("ALLOCATION_TAG",exp.getTargetType().toString());
  Assert.assertEquals(1,exp.getTargetValues().size());
  Assert.assertEquals("foo",exp.getTargetValues().iterator().next());
  verifyConstraintToString(expressionExpr,constraint);
  expressionExpr="cardinality,RACK,foo,bar,moo,0,1";
  parser=new CardinalityConstraintParser(expressionExpr);
  constraint=parser.parse();
  Assert.assertTrue(constraint instanceof SingleConstraint);
  single=(SingleConstraint)constraint;
  Assert.assertEquals("rack",single.getScope());
  Assert.assertEquals(0,single.getMinCardinality());
  Assert.assertEquals(1,single.getMaxCardinality());
  Assert.assertEquals(1,single.getTargetExpressions().size());
  exp=single.getTargetExpressions().iterator().next();
  Assert.assertEquals("ALLOCATION_TAG",exp.getTargetType().toString());
  Assert.assertEquals(3,exp.getTargetValues().size());
  Set<String> expectedTags=Sets.newHashSet("foo","bar","moo");
  Assert.assertTrue(Sets.difference(expectedTags,exp.getTargetValues()).isEmpty());
  verifyConstraintToString(expressionExpr,constraint);
  try {
    parser=new CardinalityConstraintParser("cardinality,NOWHERE,foo,bar,moo,0,1");
    parser.parse();
    Assert.fail("Expecting a parsing failure!");
  }
 catch (  PlacementConstraintParseException e) {
    Assert.assertTrue(e.getMessage().contains("expecting scope to node or rack, but met NOWHERE"));
  }
  try {
    parser=new CardinalityConstraintParser("cardinality,NODE,0,1");
    parser.parse();
    Assert.fail("Expecting a parsing failure!");
  }
 catch (  PlacementConstraintParseException e) {
    Assert.assertTrue(e.getMessage().contains("at least 5 elements, but only 4 is given"));
  }
}
