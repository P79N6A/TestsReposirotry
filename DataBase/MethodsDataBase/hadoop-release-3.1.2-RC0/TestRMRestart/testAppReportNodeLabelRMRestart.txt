@Test(timeout=60000) public void testAppReportNodeLabelRMRestart() throws Exception {
  if (getSchedulerType() != SchedulerType.CAPACITY) {
    return;
  }
  YarnConfiguration newConf=new YarnConfiguration(conf);
  newConf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
  MockRM rm1=createMockRM(newConf);
  NodeLabel amLabel=NodeLabel.newInstance("AMLABEL");
  NodeLabel appLabel=NodeLabel.newInstance("APPLABEL");
  List<NodeLabel> labels=new ArrayList<>();
  labels.add(amLabel);
  labels.add(appLabel);
  MemoryRMStateStore memStore=(MemoryRMStateStore)rm1.getRMStateStore();
  rm1.start();
  rm1.getAdminService().addToClusterNodeLabels(AddToClusterNodeLabelsRequest.newInstance(labels));
  ResourceRequest amResourceRequest=ResourceRequest.newInstance(Priority.newInstance(0),ResourceRequest.ANY,Resource.newInstance(200,1),1,true,amLabel.getName());
  ArrayList resReqs=new ArrayList<>();
  resReqs.add(amResourceRequest);
  RMApp app0=rm1.submitApp(resReqs,appLabel.getName());
  rm1.killApp(app0.getApplicationId());
  rm1.waitForState(app0.getApplicationId(),RMAppState.KILLED);
  MockRM rm2=createMockRM(conf,memStore);
  rm2.start();
  Assert.assertEquals(1,rm2.getRMContext().getRMApps().size());
  ApplicationReport appReport=rm2.getClientRMService().getApplicationReport(GetApplicationReportRequest.newInstance(app0.getApplicationId())).getApplicationReport();
  Assert.assertEquals(amLabel.getName(),appReport.getAmNodeLabelExpression());
  Assert.assertEquals(appLabel.getName(),appReport.getAppNodeLabelExpression());
  rm1.stop();
  rm2.stop();
}
