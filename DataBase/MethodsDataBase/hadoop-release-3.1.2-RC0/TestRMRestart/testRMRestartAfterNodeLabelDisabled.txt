@Test(timeout=60000) public void testRMRestartAfterNodeLabelDisabled() throws Exception {
  if (getSchedulerType() != SchedulerType.CAPACITY) {
    return;
  }
  File nodeLabelFsStoreDir=new File("target",this.getClass().getSimpleName() + "-testRMRestartAfterNodeLabelDisabled");
  if (nodeLabelFsStoreDir.exists()) {
    FileUtils.deleteDirectory(nodeLabelFsStoreDir);
  }
  nodeLabelFsStoreDir.deleteOnExit();
  String nodeLabelFsStoreDirURI=nodeLabelFsStoreDir.toURI().toString();
  conf.set(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR,nodeLabelFsStoreDirURI);
  conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
  MockRM rm1=new MockRM(TestUtils.getConfigurationWithDefaultQueueLabels(conf)){
    @Override protected RMNodeLabelsManager createNodeLabelManager(){
      RMNodeLabelsManager mgr=new RMNodeLabelsManager();
      mgr.init(getConfig());
      return mgr;
    }
  }
;
  rm1.start();
  MockMemoryRMStateStore memStore=(MockMemoryRMStateStore)rm1.getRMStateStore();
  Set<String> clusterNodeLabels=new HashSet<String>();
  clusterNodeLabels.add("x");
  RMNodeLabelsManager nodeLabelManager=rm1.getRMContext().getNodeLabelManager();
  nodeLabelManager.addToCluserNodeLabelsWithDefaultExclusivity(clusterNodeLabels);
  nodeLabelManager.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
  MockNM nm1=rm1.registerNode("h1:1234",8000);
  RMApp app1=rm1.submitApp(200,"someApp","someUser",null,"a1","x");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  ContainerId amContainerId1=ContainerId.newContainerId(am1.getApplicationAttemptId(),1);
  Assert.assertEquals("x",rm1.getRMContext().getScheduler().getRMContainer(amContainerId1).getNodeLabelExpression());
  finishApplicationMaster(app1,rm1,nm1,am1);
  conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,false);
  MockRM rm2=new MockRM(TestUtils.getConfigurationWithDefaultQueueLabels(conf),memStore){
    @Override protected RMNodeLabelsManager createNodeLabelManager(){
      RMNodeLabelsManager mgr=new RMNodeLabelsManager();
      mgr.init(getConfig());
      return mgr;
    }
  }
;
  try {
    rm2.start();
    Assert.assertTrue("RM start successfully",true);
    Assert.assertEquals(1,rm2.getRMContext().getRMApps().size());
  }
 catch (  Exception e) {
    LOG.debug("Exception on start",e);
    Assert.fail("RM should start without any issue");
  }
 finally {
    rm1.stop();
    rm2.stop();
  }
}
