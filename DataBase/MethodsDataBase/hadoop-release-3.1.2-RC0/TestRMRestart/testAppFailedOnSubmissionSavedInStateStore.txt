@Test(timeout=20000) public void testAppFailedOnSubmissionSavedInStateStore() throws Exception {
  conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  UserGroupInformation.setConfiguration(conf);
  MockRM rm1=new TestSecurityMockRM(conf){
class TestDelegationTokenRenewer extends DelegationTokenRenewer {
      public void addApplicationAsync(      ApplicationId applicationId,      Credentials ts,      boolean shouldCancelAtEnd,      String user,      Configuration appConf){
        throw new RuntimeException("failed to submit app");
      }
    }
    @Override protected DelegationTokenRenewer createDelegationTokenRenewer(){
      return new TestDelegationTokenRenewer();
    }
  }
;
  rm1.start();
  MockMemoryRMStateStore memStore=(MockMemoryRMStateStore)rm1.getRMStateStore();
  RMApp app1=null;
  try {
    app1=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",-1,null,"MAPREDUCE",false);
    Assert.fail();
  }
 catch (  Exception e) {
  }
  app1=rm1.getRMContext().getRMApps().values().iterator().next();
  rm1.waitForState(app1.getApplicationId(),RMAppState.FAILED);
  Assert.assertEquals(RMAppState.FAILED,memStore.getState().getApplicationState().get(app1.getApplicationId()).getState());
  MockRM rm2=new TestSecurityMockRM(conf,memStore);
  rm2.start();
  rm2.waitForState(app1.getApplicationId(),RMAppState.FAILED);
}
