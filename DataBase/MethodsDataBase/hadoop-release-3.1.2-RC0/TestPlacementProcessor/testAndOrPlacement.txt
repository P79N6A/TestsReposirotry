@Test(timeout=300000) public void testAndOrPlacement() throws Exception {
  HashMap<NodeId,MockNM> nodes=new HashMap<>();
  MockNM nm1=new MockNM("h1:1234",40960,100,rm.getResourceTrackerService());
  nodes.put(nm1.getNodeId(),nm1);
  MockNM nm2=new MockNM("h2:1234",40960,100,rm.getResourceTrackerService());
  nodes.put(nm2.getNodeId(),nm2);
  MockNM nm3=new MockNM("h3:1234",40960,100,rm.getResourceTrackerService());
  nodes.put(nm3.getNodeId(),nm3);
  MockNM nm4=new MockNM("h4:1234",40960,100,rm.getResourceTrackerService());
  nodes.put(nm4.getNodeId(),nm4);
  nm1.registerNode();
  nm2.registerNode();
  nm3.registerNode();
  nm4.registerNode();
  RMApp app1=rm.submitApp(1 * GB,"app","user",null,"default");
  Map<Set<String>,PlacementConstraint> app1Constraints=new HashMap<>();
  app1Constraints.put(Collections.singleton("foo"),PlacementConstraints.build(PlacementConstraints.targetNotIn(NODE,allocationTag("foo"))));
  app1Constraints.put(Collections.singleton("bar"),PlacementConstraints.build(PlacementConstraints.and(PlacementConstraints.targetNotIn(NODE,allocationTag("foo")),PlacementConstraints.maxCardinality(NODE,2,"bar"))));
  app1Constraints.put(Collections.singleton("moo"),PlacementConstraints.build(PlacementConstraints.or(PlacementConstraints.targetIn(NODE,allocationTag("foo")),PlacementConstraints.targetIn(NODE,allocationTag("bar")))));
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm2,app1Constraints);
  am1.addSchedulingRequest(Arrays.asList(schedulingRequest(1,1,1,512,"foo"),schedulingRequest(1,2,1,512,"foo"),schedulingRequest(1,3,1,512,"foo")));
  List<Container> allocatedContainers=new ArrayList<>();
  waitForContainerAllocation(nodes.values(),am1,allocatedContainers,new ArrayList<>(),3);
  printTags(nodes.values(),rm.getRMContext().getAllocationTagsManager());
  Assert.assertEquals(3,allocatedContainers.size());
  am1.addSchedulingRequest(Arrays.asList(schedulingRequest(1,1,1,512,"bar")));
  allocatedContainers.clear();
  waitForContainerAllocation(nodes.values(),am1,allocatedContainers,new ArrayList<>(),1);
  printTags(nodes.values(),rm.getRMContext().getAllocationTagsManager());
  Assert.assertEquals(1,allocatedContainers.size());
  NodeId barNode=allocatedContainers.get(0).getNodeId();
  allocatedContainers.clear();
  List<RejectedSchedulingRequest> rejectedContainers=new ArrayList<>();
  am1.addSchedulingRequest(Arrays.asList(schedulingRequest(1,2,1,512,"bar"),schedulingRequest(1,3,1,512,"bar"),schedulingRequest(1,4,1,512,"bar")));
  waitForContainerAllocation(nodes.values(),am1,allocatedContainers,rejectedContainers,2);
  printTags(nodes.values(),rm.getRMContext().getAllocationTagsManager());
  Assert.assertEquals(2,allocatedContainers.size());
  Assert.assertTrue(allocatedContainers.stream().allMatch(container -> container.getNodeId().equals(barNode)));
  Assert.assertEquals(1,rejectedContainers.size());
  Assert.assertEquals(COULD_NOT_PLACE_ON_NODE,rejectedContainers.get(0).getReason());
  MockNM nm5=new MockNM("h5:1234",4096,100,rm.getResourceTrackerService());
  nodes.put(nm5.getNodeId(),nm5);
  nm5.registerNode();
  nm5.nodeHeartbeat(true);
  List<SchedulingRequest> mooRequests=new ArrayList<>();
  for (int i=5; i < 25; i++) {
    mooRequests.add(schedulingRequest(1,i,1,100,"moo"));
  }
  am1.addSchedulingRequest(mooRequests);
  allocatedContainers.clear();
  waitForContainerAllocation(nodes.values(),am1,allocatedContainers,new ArrayList<>(),20);
  Assert.assertEquals(20,allocatedContainers.size());
  for (  Container mooContainer : allocatedContainers) {
    Assert.assertFalse(mooContainer.getNodeId().equals(nm5.getNodeId()));
  }
}
