/** 
 * Verify dfsadmin -listOpenFiles command in HA mode.
 */
@Test(timeout=120000) public void testListOpenFilesInHA() throws Exception {
  fs.close();
  cluster.shutdown();
  HdfsConfiguration haConf=new HdfsConfiguration();
  haConf.setLong(DFSConfigKeys.DFS_NAMENODE_LIST_OPENFILES_NUM_RESPONSES,BATCH_SIZE);
  MiniDFSCluster haCluster=new MiniDFSCluster.Builder(haConf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(0).build();
  try {
    HATestUtil.setFailoverConfigurations(haCluster,haConf);
    FileSystem fileSystem=HATestUtil.configureFailoverFs(haCluster,haConf);
    List<ClientProtocol> namenodes=HAUtil.getProxiesForAllNameNodesInNameservice(haConf,HATestUtil.getLogicalHostname(haCluster));
    haCluster.transitionToActive(0);
    assertTrue(HAUtil.isAtLeastOneActive(namenodes));
    final byte[] data=new byte[1024];
    ThreadLocalRandom.current().nextBytes(data);
    DFSTestUtil.createOpenFiles(fileSystem,"ha-open-file",((BATCH_SIZE * 4) + (BATCH_SIZE / 2)));
    final DFSAdmin dfsAdmin=new DFSAdmin(haConf);
    final AtomicBoolean failoverCompleted=new AtomicBoolean(false);
    final AtomicBoolean listOpenFilesError=new AtomicBoolean(false);
    final int listingIntervalMsec=250;
    Thread clientThread=new Thread(new Runnable(){
      @Override public void run(){
        while (!failoverCompleted.get()) {
          try {
            assertEquals(0,ToolRunner.run(dfsAdmin,new String[]{"-listOpenFiles"}));
            assertEquals(0,ToolRunner.run(dfsAdmin,new String[]{"-listOpenFiles","-blockingDecommission"}));
            Thread.sleep(listingIntervalMsec);
          }
 catch (          Exception e) {
            listOpenFilesError.set(true);
            LOG.info("Error listing open files: ",e);
            break;
          }
        }
      }
    }
);
    clientThread.start();
    Thread.sleep(listingIntervalMsec * 2);
    LOG.info("Shutting down Active NN0!");
    haCluster.shutdownNameNode(0);
    LOG.info("Transitioning NN1 to Active!");
    haCluster.transitionToActive(1);
    failoverCompleted.set(true);
    assertEquals(0,ToolRunner.run(dfsAdmin,new String[]{"-listOpenFiles"}));
    assertEquals(0,ToolRunner.run(dfsAdmin,new String[]{"-listOpenFiles","-blockingDecommission"}));
    assertFalse("Client Error!",listOpenFilesError.get());
    clientThread.join();
  }
  finally {
    if (haCluster != null) {
      haCluster.shutdown();
    }
  }
}
