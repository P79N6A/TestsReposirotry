@SuppressWarnings("deprecation") @Test public void testInterruptedException() throws Exception {
  scheduler=new FairScheduler();
  conf=super.createConfiguration();
  resourceManager=new MockRM(conf);
  ((AsyncDispatcher)resourceManager.getRMContext().getDispatcher()).start();
  resourceManager.getRMContext().getStateStore().start();
  resourceManager.getRMContext().getContainerTokenSecretManager().rollMasterKey();
  scheduler.setRMContext(resourceManager.getRMContext());
  scheduler.init(conf);
  scheduler.start();
  FairScheduler spyScheduler=spy(scheduler);
  Assert.assertTrue("Continuous scheduling should be disabled.",!spyScheduler.isContinuousSchedulingEnabled());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  spyScheduler.handle(nodeEvent1);
  Assert.assertEquals("We should have one alive node.",1,spyScheduler.getNumClusterNodes());
  InterruptedException ie=new InterruptedException();
  doThrow(new YarnRuntimeException(ie)).when(spyScheduler).attemptScheduling(isA(FSSchedulerNode.class));
  try {
    spyScheduler.continuousSchedulingAttempt();
    fail("Expected InterruptedException to stop schedulingThread");
  }
 catch (  InterruptedException e) {
    Assert.assertEquals(ie,e);
  }
}
