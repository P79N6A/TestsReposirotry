@SuppressWarnings("deprecation") @Test public void TestNodeAvailableResourceComparatorTransitivity(){
  ClusterNodeTracker<FSSchedulerNode> clusterNodeTracker=scheduler.getNodeTracker();
  List<RMNode> rmNodes=MockNodes.newNodes(2,4000,Resource.newInstance(4096,4));
  for (  RMNode rmNode : rmNodes) {
    clusterNodeTracker.addNode(new FSSchedulerNode(rmNode,false));
  }
  new Thread(){
    @Override public void run(){
      for (int j=0; j < 100; j++) {
        for (        FSSchedulerNode node : clusterNodeTracker.getAllNodes()) {
          int i=ThreadLocalRandom.current().nextInt(-30,30);
synchronized (scheduler) {
            node.deductUnallocatedResource(Resource.newInstance(i * 1024,i));
          }
        }
      }
    }
  }
.start();
  try {
    scheduler.continuousSchedulingAttempt();
  }
 catch (  Exception e) {
    fail(e.getMessage());
  }
}
