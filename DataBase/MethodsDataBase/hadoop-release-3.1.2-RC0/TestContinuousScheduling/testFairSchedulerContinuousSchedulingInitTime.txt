@Test public void testFairSchedulerContinuousSchedulingInitTime() throws Exception {
  scheduler.start();
  int priorityValue;
  Priority priority;
  FSAppAttempt fsAppAttempt;
  ResourceRequest request1;
  ResourceRequest request2;
  ApplicationAttemptId id11;
  priorityValue=1;
  id11=createAppAttemptId(1,1);
  createMockRMApp(id11);
  priority=Priority.newInstance(priorityValue);
  scheduler.addApplication(id11.getApplicationId(),"root.queue1","user1",false);
  scheduler.addApplicationAttempt(id11,false,false);
  fsAppAttempt=scheduler.getApplicationAttempt(id11);
  String hostName="127.0.0.1";
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(16 * 1024,16),1,hostName);
  List<ResourceRequest> ask1=new ArrayList<>();
  request1=createResourceRequest(1024,8,node1.getRackName(),priorityValue,1,true);
  request2=createResourceRequest(1024,8,ResourceRequest.ANY,priorityValue,1,true);
  ask1.add(request1);
  ask1.add(request2);
  scheduler.allocate(id11,ask1,null,new ArrayList<ContainerId>(),null,null,NULL_UPDATE_REQUESTS);
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  FSSchedulerNode node=scheduler.getSchedulerNode(node1.getNodeID());
  mockClock.tickSec(delayThresholdTimeMs / 1000);
  scheduler.attemptScheduling(node);
  Map<SchedulerRequestKey,Long> lastScheduledContainer=fsAppAttempt.getLastScheduledContainer();
  long initSchedulerTime=lastScheduledContainer.get(TestUtils.toSchedulerKey(priority));
  assertEquals(delayThresholdTimeMs,initSchedulerTime);
}
