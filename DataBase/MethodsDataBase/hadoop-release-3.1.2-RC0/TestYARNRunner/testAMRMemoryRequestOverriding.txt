@Test public void testAMRMemoryRequestOverriding() throws Exception {
  for (  String memoryName : ImmutableList.of(MRJobConfig.RESOURCE_TYPE_NAME_MEMORY,MRJobConfig.RESOURCE_TYPE_ALTERNATIVE_NAME_MEMORY)) {
    TestAppender testAppender=new TestAppender();
    org.apache.log4j.Logger logger=org.apache.log4j.Logger.getLogger(YARNRunner.class);
    logger.addAppender(testAppender);
    try {
      JobConf jobConf=new JobConf();
      jobConf.set(MRJobConfig.MR_AM_RESOURCE_PREFIX + memoryName,"3 Gi");
      jobConf.setInt(MRJobConfig.MR_AM_VMEM_MB,2048);
      yarnRunner=new YARNRunner(jobConf);
      submissionContext=buildSubmitContext(yarnRunner,jobConf);
      List<ResourceRequest> resourceRequests=submissionContext.getAMContainerResourceRequests();
      Assert.assertEquals(1,resourceRequests.size());
      ResourceRequest resourceRequest=resourceRequests.get(0);
      long memorySize=resourceRequest.getCapability().getMemorySize();
      Assert.assertEquals(3072,memorySize);
      assertTrue(testAppender.getLogEvents().stream().anyMatch(e -> e.getLevel() == Level.WARN && ("Configuration " + "yarn.app.mapreduce.am.resource." + memoryName + "=3Gi is "+ "overriding the yarn.app.mapreduce.am.resource.mb=2048 "+ "configuration").equals(e.getMessage())));
    }
  finally {
      logger.removeAppender(testAppender);
    }
  }
}
