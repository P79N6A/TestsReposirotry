@Test(timeout=5000) public void testRedirection() throws Exception {
  ApplicationId appId=ApplicationId.newInstance(System.currentTimeMillis(),1);
  ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId,1);
  ContainerId containerId=ContainerId.newContainerId(attemptId,1);
  NMContext mockNMContext=mock(NMContext.class);
  ConcurrentMap<ApplicationId,Application> applications=new ConcurrentHashMap<>();
  when(mockNMContext.getApplications()).thenReturn(applications);
  LocalDirsHandlerService mockLocalDirsHandlerService=mock(LocalDirsHandlerService.class);
  Configuration conf=new Configuration();
  conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,true);
  conf.set(YarnConfiguration.YARN_LOG_SERVER_URL,"http://" + LOG_SERVER_URI);
  when(mockLocalDirsHandlerService.getConfig()).thenReturn(conf);
  when(mockNMContext.getLocalDirsHandler()).thenReturn(mockLocalDirsHandlerService);
  NodeId nodeId=NodeId.newInstance("testNM",9999);
  when(mockNMContext.getNodeId()).thenReturn(nodeId);
  Injector mockInjector=mock(Injector.class);
  NMWebAppFilter testFilter=new NMWebAppFilter(mockInjector,mockNMContext);
  HttpServletResponseForTest response=new HttpServletResponseForTest();
  FilterChain chain=new FilterChain(){
    @Override public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse) throws IOException, ServletException {
    }
  }
;
  String uri="testNM:8042/node/containerlogs/" + containerId.toString() + "/"+ USER;
  HttpServletRequest request=mock(HttpServletRequest.class);
  when(request.getRequestURI()).thenReturn(uri);
  testFilter.doFilter(request,response,chain);
  assertEquals(HttpServletResponse.SC_TEMPORARY_REDIRECT,response.status);
  String redirect=response.getHeader("Location");
  assertTrue(redirect.contains(LOG_SERVER_URI));
  assertTrue(redirect.contains(nodeId.toString()));
  assertTrue(redirect.contains(containerId.toString()));
  assertTrue(redirect.contains(USER));
  String logType="syslog";
  uri="testNM:8042/node/containerlogs/" + containerId.toString() + "/"+ USER+ "/"+ logType+ "/?start=10";
  HttpServletRequest request2=mock(HttpServletRequest.class);
  when(request2.getRequestURI()).thenReturn(uri);
  when(request2.getQueryString()).thenReturn("start=10");
  testFilter.doFilter(request2,response,chain);
  assertEquals(HttpServletResponse.SC_TEMPORARY_REDIRECT,response.status);
  redirect=response.getHeader("Location");
  assertTrue(redirect.contains(LOG_SERVER_URI));
  assertTrue(redirect.contains(nodeId.toString()));
  assertTrue(redirect.contains(containerId.toString()));
  assertTrue(redirect.contains(USER));
  assertTrue(redirect.contains(logType));
  assertTrue(redirect.contains("start=10"));
}
