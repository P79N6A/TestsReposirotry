@Test public void testGetQuotaUsage(){
  RouterQuotaUsage quotaGet;
  quotaGet=manager.getQuotaUsage("/non-exist-path");
  assertNull(quotaGet);
  RouterQuotaUsage.Builder quota=new RouterQuotaUsage.Builder().quota(HdfsConstants.QUOTA_RESET).spaceQuota(HdfsConstants.QUOTA_RESET);
  manager.put("/noQuotaSet",quota.build());
  quotaGet=manager.getQuotaUsage("/noQuotaSet");
  assertNull(quotaGet);
  quota.quota(1);
  quota.spaceQuota(HdfsConstants.QUOTA_RESET);
  manager.put("/hasQuotaSet",quota.build());
  quotaGet=manager.getQuotaUsage("/hasQuotaSet");
  assertEquals(1,quotaGet.getQuota());
  assertEquals(HdfsConstants.QUOTA_RESET,quotaGet.getSpaceQuota());
  quotaGet=manager.getQuotaUsage("/hasQuotaSet/file");
  assertEquals(1,quotaGet.getQuota());
  assertEquals(HdfsConstants.QUOTA_RESET,quotaGet.getSpaceQuota());
  quota.quota(HdfsConstants.QUOTA_RESET);
  quota.spaceQuota(HdfsConstants.QUOTA_RESET);
  manager.put("/hasQuotaSet/noQuotaSet",quota.build());
  quotaGet=manager.getQuotaUsage("/hasQuotaSet/noQuotaSet/file");
  assertEquals(1,quotaGet.getQuota());
  assertEquals(HdfsConstants.QUOTA_RESET,quotaGet.getSpaceQuota());
  quota.quota(2);
  quota.spaceQuota(HdfsConstants.QUOTA_RESET);
  manager.put("/hasQuotaSet/hasQuotaSet",quota.build());
  quotaGet=manager.getQuotaUsage("/hasQuotaSet/hasQuotaSet/file");
  assertEquals(2,quotaGet.getQuota());
  assertEquals(HdfsConstants.QUOTA_RESET,quotaGet.getSpaceQuota());
}
