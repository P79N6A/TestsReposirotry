@Test(timeout=200000) public void testUpgrade() throws Exception {
  setupInternal(NUM_NMS);
  getConf().setBoolean(YARN_SERVICE_UPGRADE_ENABLED,true);
  ServiceClient client=createClient(getConf());
  Service service=createExampleApplication();
  client.actionCreate(service);
  waitForServiceToBeStable(client,service);
  Component component=service.getComponents().iterator().next();
  service.setState(ServiceState.UPGRADING);
  service.setVersion("v2");
  component.getConfiguration().getEnv().put("key1","val1");
  client.initiateUpgrade(service);
  waitForServiceToBeInState(client,service,ServiceState.UPGRADING);
  SliderFileSystem fs=new SliderFileSystem(getConf());
  Service fromFs=ServiceApiUtil.loadServiceUpgrade(fs,service.getName(),service.getVersion());
  Assert.assertEquals(service.getName(),fromFs.getName());
  Assert.assertEquals(service.getVersion(),fromFs.getVersion());
  Service liveService=client.getStatus(service.getName());
  client.actionUpgrade(service,liveService.getComponent(component.getName()).getContainers());
  waitForAllCompToBeReady(client,service);
  client.actionStart(service.getName());
  waitForServiceToBeStable(client,service);
  Service active=client.getStatus(service.getName());
  Assert.assertEquals("component not stable",ComponentState.STABLE,active.getComponent(component.getName()).getState());
  Assert.assertEquals("comp does not have new env","val1",active.getComponent(component.getName()).getConfiguration().getEnv("key1"));
  LOG.info("Stop/destroy service {}",service);
  client.actionStop(service.getName(),true);
  client.actionDestroy(service.getName());
}
