/** 
 * Test to verify that the copying of pinned block to a different destination datanode will throw IOException with error code Status.ERROR_BLOCK_PINNED.
 */
@Test(timeout=90000) public void testBlockReplacementWithPinnedBlocks() throws Exception {
  final Configuration conf=new HdfsConfiguration();
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).storageTypes(new StorageType[]{StorageType.DISK,StorageType.ARCHIVE}).build();
  try {
    cluster.waitActive();
    final DistributedFileSystem dfs=cluster.getFileSystem();
    String fileName="/testBlockReplacementWithPinnedBlocks/file";
    final Path file=new Path(fileName);
    DFSTestUtil.createFile(dfs,file,1024,(short)1,1024);
    LocatedBlock lb=dfs.getClient().getLocatedBlocks(fileName,0).get(0);
    DatanodeInfo[] oldNodes=lb.getLocations();
    assertEquals("Wrong block locations",oldNodes.length,1);
    DatanodeInfo source=oldNodes[0];
    ExtendedBlock b=lb.getBlock();
    DatanodeInfo[] datanodes=dfs.getDataNodeStats();
    DatanodeInfo destin=null;
    for (    DatanodeInfo datanodeInfo : datanodes) {
      if (!oldNodes[0].equals(datanodeInfo)) {
        destin=datanodeInfo;
        break;
      }
    }
    assertNotNull("Failed to choose destination datanode!",destin);
    assertFalse("Source and destin datanode should be different",source.equals(destin));
    for (int i=0; i < cluster.getDataNodes().size(); i++) {
      DataNode dn=cluster.getDataNodes().get(i);
      LOG.info("Simulate block pinning in datanode " + dn);
      InternalDataNodeTestUtils.mockDatanodeBlkPinning(dn,true);
    }
    assertTrue("Status code mismatches!",replaceBlock(b,source,source,destin,StorageType.ARCHIVE,Status.ERROR_BLOCK_PINNED));
  }
  finally {
    cluster.shutdown();
  }
}
