@Test public void checkFilterReadAuthDisabledButAclSettingsPopulated() throws ServletException, IOException, InterruptedException {
  Map<String,String> map=new HashMap<String,String>();
  map.put(YarnConfiguration.YARN_ADMIN_ACL,"user1,user2 group9,group21");
  map.put(YarnConfiguration.TIMELINE_SERVICE_READ_ALLOWED_USERS,"user27,user36 group5,group6");
  TimelineReaderWhitelistAuthorizationFilter f=new TimelineReaderWhitelistAuthorizationFilter();
  FilterConfig fc=new DummyFilterConfig(map);
  f.init(fc);
  HttpServletRequest mockHsr=mock(HttpServletRequest.class);
  when(mockHsr.getUserPrincipal()).thenReturn(new Principal(){
    @Override public String getName(){
      return "user37";
    }
  }
);
  HttpServletResponse r=Mockito.mock(HttpServletResponse.class);
  UserGroupInformation user1=UserGroupInformation.createUserForTesting("user37",GROUP_NAMES);
  user1.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      f.doFilter(mockHsr,r,null);
      return null;
    }
  }
);
  Mockito.when(mockHsr.getUserPrincipal()).thenReturn(new Principal(){
    @Override public String getName(){
      return "user27";
    }
  }
);
  HttpServletResponse r2=Mockito.mock(HttpServletResponse.class);
  UserGroupInformation user2=UserGroupInformation.createUserForTesting("user27",GROUP_NAMES);
  user2.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      f.doFilter(mockHsr,r2,null);
      return null;
    }
  }
);
  Mockito.when(mockHsr.getUserPrincipal()).thenReturn(new Principal(){
    @Override public String getName(){
      return "user2";
    }
  }
);
  HttpServletResponse r3=Mockito.mock(HttpServletResponse.class);
  UserGroupInformation user3=UserGroupInformation.createUserForTesting("user2",GROUP_NAMES);
  user3.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      f.doFilter(mockHsr,r3,null);
      return null;
    }
  }
);
}
