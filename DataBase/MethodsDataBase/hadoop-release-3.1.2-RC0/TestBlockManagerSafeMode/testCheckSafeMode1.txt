/** 
 * Test the state machine transition. We use separate test methods instead of a single one because the mocked {@link #fsn} is accessed concurrently by the current thread and the<code>smmthread</code> thread in the  {@link BlockManagerSafeMode}. Stubbing or verification of a shared mock from different threads is NOT the proper way of testing, which leads to intermittent behavior. Meanwhile, previous state transition may have side effects that should be reset before next test case. For example, in  {@link BlockManagerSafeMode}, there is a safe mode monitor thread, which is created when BlockManagerSafeMode is constructed. It will start the first time the safe mode enters extension stage and will stop if the safe mode leaves to OFF state. Across different test cases, this thread should be reset.
 */
@Test(timeout=10000) public void testCheckSafeMode1(){
  bmSafeMode.activate(BLOCK_TOTAL);
  setSafeModeStatus(BMSafeModeStatus.PENDING_THRESHOLD);
  for (long i=0; i < BLOCK_THRESHOLD; i++) {
    setBlockSafe(i);
    bmSafeMode.checkSafeMode();
    assertEquals(BMSafeModeStatus.PENDING_THRESHOLD,getSafeModeStatus());
  }
}
