@Test public void testFSOutputStreamBuilder() throws Exception {
  Path path=new Path(TEST_ROOT_DIR,"testBuilder");
  try {
    FSDataOutputStreamBuilder builder=fileSys.createFile(path).recursive();
    FSDataOutputStream out=builder.build();
    String content="Create with a generic type of createFile!";
    byte[] contentOrigin=content.getBytes("UTF8");
    out.write(contentOrigin);
    out.close();
    FSDataInputStream input=fileSys.open(path);
    byte[] buffer=new byte[(int)(fileSys.getFileStatus(path).getLen())];
    input.readFully(0,buffer);
    input.close();
    Assert.assertArrayEquals("The data be read should equals with the " + "data written.",contentOrigin,buffer);
  }
 catch (  IOException e) {
    throw e;
  }
  FSDataOutputStreamBuilder builder=fileSys.createFile(path);
  try (FSDataOutputStream stream=builder.build()){
    Assert.assertEquals("Should be default block size",builder.getBlockSize(),fileSys.getDefaultBlockSize());
    Assert.assertEquals("Should be default replication factor",builder.getReplication(),fileSys.getDefaultReplication());
    Assert.assertEquals("Should be default buffer size",builder.getBufferSize(),fileSys.getConf().getInt(IO_FILE_BUFFER_SIZE_KEY,IO_FILE_BUFFER_SIZE_DEFAULT));
    Assert.assertEquals("Should be default permission",builder.getPermission(),FsPermission.getFileDefault());
  }
   builder=fileSys.createFile(path);
  builder.bufferSize(0).blockSize(0).replication((short)0);
  Assert.assertEquals("Block size should be 0",builder.getBlockSize(),0);
  Assert.assertEquals("Replication factor should be 0",builder.getReplication(),0);
  Assert.assertEquals("Buffer size should be 0",builder.getBufferSize(),0);
}
