@Test public void testSingleQueueWithOneUser() throws Exception {
  LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
  a.setMaxCapacity(1.0f);
  final String user_0="user_0";
  AbstractUsersManager activeUserManager=a.getAbstractUsersManager();
  final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,activeUserManager,spyRMContext);
  a.submitApplicationAttempt(app_0,user_0);
  final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
  FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,a,activeUserManager,spyRMContext);
  a.submitApplicationAttempt(app_1,user_0);
  String host_0="127.0.0.1";
  FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,8 * GB);
  Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
  Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0);
  final int numNodes=1;
  Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
  Priority priority=TestUtils.createMockPriority(1);
  app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,3,true,priority,recordFactory)));
  app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
  applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
  assertEquals(1 * GB,a.getUsedResources().getMemorySize());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,a.getMetrics().getReservedMB());
  assertEquals(1 * GB,a.getMetrics().getAllocatedMB());
  assertEquals(0 * GB,a.getMetrics().getAvailableMB());
  applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
  assertEquals(2 * GB,a.getUsedResources().getMemorySize());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,a.getMetrics().getReservedMB());
  assertEquals(2 * GB,a.getMetrics().getAllocatedMB());
  applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
  assertEquals(2 * GB,a.getUsedResources().getMemorySize());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,a.getMetrics().getReservedMB());
  assertEquals(2 * GB,a.getMetrics().getAllocatedMB());
  a.setUserLimitFactor(10);
  applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
  assertEquals(3 * GB,a.getUsedResources().getMemorySize());
  assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,a.getMetrics().getReservedMB());
  assertEquals(3 * GB,a.getMetrics().getAllocatedMB());
  applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
  assertEquals(4 * GB,a.getUsedResources().getMemorySize());
  assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,a.getMetrics().getReservedMB());
  assertEquals(4 * GB,a.getMetrics().getAllocatedMB());
  a.setMaxCapacity(0.5f);
  root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
  applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
  assertEquals(4 * GB,a.getUsedResources().getMemorySize());
  assertEquals(3 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,a.getMetrics().getReservedMB());
  assertEquals(4 * GB,a.getMetrics().getAllocatedMB());
  for (  RMContainer rmContainer : app_0.getLiveContainers()) {
    a.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
  }
  assertEquals(1 * GB,a.getUsedResources().getMemorySize());
  assertEquals(0 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,a.getMetrics().getReservedMB());
  assertEquals(1 * GB,a.getMetrics().getAllocatedMB());
  for (  RMContainer rmContainer : app_1.getLiveContainers()) {
    a.completedContainer(clusterResource,app_1,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
  }
  assertEquals(0 * GB,a.getUsedResources().getMemorySize());
  assertEquals(0 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,a.getMetrics().getReservedMB());
  assertEquals(0 * GB,a.getMetrics().getAllocatedMB());
  assertEquals((int)(a.getCapacity() * node_0.getTotalResource().getMemorySize()),a.getMetrics().getAvailableMB());
}
