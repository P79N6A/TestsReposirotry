/** 
 * Validates the implementation of InputStream.mark and reset for version 1 of the block blob input stream.
 * @throws Exception
 */
@Test public void test_0303_MarkAndResetV1() throws Exception {
  assumeHugeFileExists();
  try (FSDataInputStream inputStream=fs.open(TEST_FILE_PATH)){
    inputStream.mark(KILOBYTE - 1);
    byte[] buffer=new byte[KILOBYTE];
    int bytesRead=inputStream.read(buffer);
    assertEquals(buffer.length,bytesRead);
    inputStream.reset();
    assertEquals("rest -> pos 0",0,inputStream.getPos());
    inputStream.mark(8 * KILOBYTE - 1);
    buffer=new byte[8 * KILOBYTE];
    bytesRead=inputStream.read(buffer);
    assertEquals(buffer.length,bytesRead);
    intercept(IOException.class,"Resetting to invalid mark",new Callable<FSDataInputStream>(){
      @Override public FSDataInputStream call() throws Exception {
        inputStream.reset();
        return inputStream;
      }
    }
);
  }
 }
