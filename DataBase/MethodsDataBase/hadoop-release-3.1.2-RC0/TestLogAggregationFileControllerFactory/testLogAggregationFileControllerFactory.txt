@Test(timeout=10000) public void testLogAggregationFileControllerFactory() throws Exception {
  ApplicationId appId=ApplicationId.newInstance(System.currentTimeMillis(),1);
  String appOwner="test";
  String remoteLogRootDir="target/app-logs/";
  Configuration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,true);
  conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,remoteLogRootDir);
  conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,"log");
  FileSystem fs=FileSystem.get(conf);
  LogAggregationFileControllerFactory factory=new LogAggregationFileControllerFactory(conf);
  LinkedList<LogAggregationFileController> list=factory.getConfiguredLogAggregationFileControllerList();
  assertTrue(list.size() == 1);
  assertTrue(list.getFirst() instanceof LogAggregationTFileController);
  assertTrue(factory.getFileControllerForWrite() instanceof LogAggregationTFileController);
  Path logPath=list.getFirst().getRemoteAppLogDir(appId,appOwner);
  try {
    if (fs.exists(logPath)) {
      fs.delete(logPath,true);
    }
    assertTrue(fs.mkdirs(logPath));
    Writer writer=new FileWriter(new File(logPath.toString(),"testLog"));
    writer.write("test");
    writer.close();
    assertTrue(factory.getFileControllerForRead(appId,appOwner) instanceof LogAggregationTFileController);
  }
  finally {
    fs.delete(logPath,true);
  }
  conf.set(YarnConfiguration.LOG_AGGREGATION_FILE_FORMATS,"TestLogAggregationFileController");
  try {
    factory=new LogAggregationFileControllerFactory(conf);
    fail();
  }
 catch (  Exception ex) {
  }
  conf.set(YarnConfiguration.LOG_AGGREGATION_FILE_FORMATS,"TestLogAggregationFileController,TFile");
  conf.setClass("yarn.log-aggregation.file-controller.TestLogAggregationFileController" + ".class",TestLogAggregationFileController.class,LogAggregationFileController.class);
  conf.set("yarn.log-aggregation.TestLogAggregationFileController" + ".remote-app-log-dir",remoteLogRootDir);
  conf.set("yarn.log-aggregation.TestLogAggregationFileController" + ".remote-app-log-dir-suffix","testLog");
  factory=new LogAggregationFileControllerFactory(conf);
  list=factory.getConfiguredLogAggregationFileControllerList();
  assertTrue(list.size() == 2);
  assertTrue(list.getFirst() instanceof TestLogAggregationFileController);
  assertTrue(list.getLast() instanceof LogAggregationTFileController);
  assertTrue(factory.getFileControllerForWrite() instanceof TestLogAggregationFileController);
  logPath=list.getFirst().getRemoteAppLogDir(appId,appOwner);
  try {
    if (fs.exists(logPath)) {
      fs.delete(logPath,true);
    }
    assertTrue(fs.mkdirs(logPath));
    Writer writer=new FileWriter(new File(logPath.toString(),"testLog"));
    writer.write("test");
    writer.close();
    assertTrue(factory.getFileControllerForRead(appId,appOwner) instanceof TestLogAggregationFileController);
  }
  finally {
    fs.delete(logPath,true);
  }
}
