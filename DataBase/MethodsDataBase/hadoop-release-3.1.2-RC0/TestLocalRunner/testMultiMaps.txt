/** 
 * Run a test with several mappers in parallel, operating at different speeds. Verify that the correct amount of output is created.
 */
@Test(timeout=120 * 1000) public void testMultiMaps() throws Exception {
  Job job=Job.getInstance();
  Path inputPath=createMultiMapsInput();
  Path outputPath=getOutputPath();
  Configuration conf=new Configuration();
  FileSystem fs=FileSystem.getLocal(conf);
  if (fs.exists(outputPath)) {
    fs.delete(outputPath,true);
  }
  job.setMapperClass(StressMapper.class);
  job.setReducerClass(CountingReducer.class);
  job.setNumReduceTasks(1);
  LocalJobRunner.setLocalMaxRunningMaps(job,6);
  job.getConfiguration().set(MRJobConfig.IO_SORT_MB,"25");
  FileInputFormat.addInputPath(job,inputPath);
  FileOutputFormat.setOutputPath(job,outputPath);
  final Thread toInterrupt=Thread.currentThread();
  Thread interrupter=new Thread(){
    public void run(){
      try {
        Thread.sleep(120 * 1000);
        toInterrupt.interrupt();
      }
 catch (      InterruptedException ie) {
      }
    }
  }
;
  LOG.info("Submitting job...");
  job.submit();
  LOG.info("Starting thread to interrupt main thread in 2 minutes");
  interrupter.start();
  LOG.info("Waiting for job to complete...");
  try {
    job.waitForCompletion(true);
  }
 catch (  InterruptedException ie) {
    LOG.error("Interrupted while waiting for job completion",ie);
    for (int i=0; i < 10; i++) {
      LOG.error("Dumping stacks");
      ReflectionUtils.logThreadInfo(LOG,"multimap threads",0);
      Thread.sleep(1000);
    }
    throw ie;
  }
  LOG.info("Job completed, stopping interrupter");
  interrupter.interrupt();
  try {
    interrupter.join();
  }
 catch (  InterruptedException ie) {
  }
  LOG.info("Verifying output");
  verifyOutput(outputPath);
}
