/** 
 * Test -stat [format] <path>... prints statistics about the file/directory at <path> in the specified format.
 */
@Test(timeout=30000) public void testStat() throws Exception {
  final SimpleDateFormat fmt=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
  fmt.setTimeZone(TimeZone.getTimeZone("UTC"));
  final Path testDir1=new Path("testStat","dir1");
  dfs.mkdirs(testDir1);
  final Path testFile2=new Path(testDir1,"file2");
  DFSTestUtil.createFile(dfs,testFile2,2 * BLOCK_SIZE,(short)3,0);
  final FileStatus status1=dfs.getFileStatus(testDir1);
  final String mtime1=fmt.format(new Date(status1.getModificationTime()));
  final String atime1=fmt.format(new Date(status1.getAccessTime()));
  long now=Time.now();
  dfs.setTimes(testFile2,now + 3000,now + 6000);
  final FileStatus status2=dfs.getFileStatus(testFile2);
  final String mtime2=fmt.format(new Date(status2.getModificationTime()));
  final String atime2=fmt.format(new Date(status2.getAccessTime()));
  final ByteArrayOutputStream out=new ByteArrayOutputStream();
  System.setOut(new PrintStream(out));
  doFsStat(dfs.getConf(),null);
  out.reset();
  doFsStat(dfs.getConf(),null,testDir1);
  assertEquals("Unexpected -stat output: " + out,out.toString(),String.format("%s%n",mtime1));
  out.reset();
  doFsStat(dfs.getConf(),null,testDir1,testFile2);
  assertEquals("Unexpected -stat output: " + out,out.toString(),String.format("%s%n%s%n",mtime1,mtime2));
  doFsStat(dfs.getConf(),"%F %u:%g %b %y %n");
  out.reset();
  doFsStat(dfs.getConf(),"%F %a %A %u:%g %b %y %n",testDir1);
  assertTrue(out.toString(),out.toString().contains(mtime1));
  assertTrue(out.toString(),out.toString().contains("directory"));
  assertTrue(out.toString(),out.toString().contains(status1.getGroup()));
  assertTrue(out.toString(),out.toString().contains(status1.getPermission().toString()));
  int n=status1.getPermission().toShort();
  int octal=(n >>> 9 & 1) * 1000 + (n >>> 6 & 7) * 100 + (n >>> 3 & 7) * 10 + (n & 7);
  assertTrue(out.toString(),out.toString().contains(String.valueOf(octal)));
  out.reset();
  doFsStat(dfs.getConf(),"%F %a %A %u:%g %b %x %y %n",testDir1,testFile2);
  n=status2.getPermission().toShort();
  octal=(n >>> 9 & 1) * 1000 + (n >>> 6 & 7) * 100 + (n >>> 3 & 7) * 10 + (n & 7);
  assertTrue(out.toString(),out.toString().contains(mtime1));
  assertTrue(out.toString(),out.toString().contains(atime1));
  assertTrue(out.toString(),out.toString().contains("regular file"));
  assertTrue(out.toString(),out.toString().contains(status2.getPermission().toString()));
  assertTrue(out.toString(),out.toString().contains(String.valueOf(octal)));
  assertTrue(out.toString(),out.toString().contains(mtime2));
  assertTrue(out.toString(),out.toString().contains(atime2));
}
