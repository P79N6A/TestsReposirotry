/** 
 * Test to make sure that user namespace xattrs can be set only if path has access and for sticky directorries, only owner/privileged user can write. Trusted namespace xattrs can be set only with privileged users. As user1: Create a directory (/foo) as user1, chown it to user1 (and user1's group), grant rwx to "other". As user2: Set an xattr (should pass with path access). As user1: Set an xattr (should pass). As user2: Read the xattr (should pass). Remove the xattr (should pass with path access). As user1: Read the xattr (should pass). Remove the xattr (should pass). As user1: Change permissions only to owner As User2: Set an Xattr (Should fail set with no path access) Remove an Xattr (Should fail with no path access) As SuperUser: Set an Xattr with Trusted (Should pass)
 */
@Test(timeout=30000) public void testSetXAttrPermissionAsDifferentOwner() throws Exception {
  final String root="/testSetXAttrPermissionAsDifferentOwner";
  final String USER1="user1";
  final String GROUP1="supergroup";
  final UserGroupInformation user1=UserGroupInformation.createUserForTesting(USER1,new String[]{GROUP1});
  final UserGroupInformation user2=UserGroupInformation.createUserForTesting("user2",new String[]{"mygroup2"});
  final UserGroupInformation SUPERUSER=UserGroupInformation.getCurrentUser();
  PrintStream bak=null;
  try {
    dfs.mkdirs(new Path(root));
    dfs.setOwner(new Path(root),USER1,GROUP1);
    bak=System.err;
    final FsShell fshell=new FsShell(dfs.getConf());
    final ByteArrayOutputStream out=new ByteArrayOutputStream();
    System.setErr(new PrintStream(out));
    user1.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final int ret=ToolRunner.run(fshell,new String[]{"-mkdir",root + "/foo"});
        assertEquals("Return should be 0",0,ret);
        out.reset();
        return null;
      }
    }
);
    user1.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final int ret=ToolRunner.run(fshell,new String[]{"-chmod","707",root + "/foo"});
        assertEquals("Return should be 0",0,ret);
        out.reset();
        return null;
      }
    }
);
    user2.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final int ret=ToolRunner.run(fshell,new String[]{"-setfattr","-n","user.a1","-v","1234",root + "/foo"});
        assertEquals("Returned should be 0",0,ret);
        out.reset();
        return null;
      }
    }
);
    user1.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final int ret=ToolRunner.run(fshell,new String[]{"-setfattr","-n","user.a1","-v","1234",root + "/foo"});
        assertEquals("Returned should be 0",0,ret);
        out.reset();
        return null;
      }
    }
);
    user2.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        int ret=ToolRunner.run(fshell,new String[]{"-getfattr","-n","user.a1",root + "/foo"});
        assertEquals("Returned should be 0",0,ret);
        out.reset();
        ret=ToolRunner.run(fshell,new String[]{"-setfattr","-x","user.a1",root + "/foo"});
        assertEquals("Returned should be 0",0,ret);
        out.reset();
        return null;
      }
    }
);
    user1.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        return null;
      }
    }
);
    user1.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final int ret=ToolRunner.run(fshell,new String[]{"-chmod","700",root + "/foo"});
        assertEquals("Return should be 0",0,ret);
        out.reset();
        return null;
      }
    }
);
    user2.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        int ret=ToolRunner.run(fshell,new String[]{"-setfattr","-n","user.a2",root + "/foo"});
        assertEquals("Returned should be 1",1,ret);
        final String str=out.toString();
        assertTrue("Permission denied printed",str.indexOf("Permission denied") != -1);
        out.reset();
        return null;
      }
    }
);
    user2.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        int ret=ToolRunner.run(fshell,new String[]{"-setfattr","-x","user.a2",root + "/foo"});
        assertEquals("Returned should be 1",1,ret);
        final String str=out.toString();
        assertTrue("Permission denied printed",str.indexOf("Permission denied") != -1);
        out.reset();
        return null;
      }
    }
);
    SUPERUSER.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        int ret=ToolRunner.run(fshell,new String[]{"-setfattr","-n","trusted.a3",root + "/foo"});
        assertEquals("Returned should be 0",0,ret);
        out.reset();
        return null;
      }
    }
);
  }
  finally {
    if (bak != null) {
      System.setErr(bak);
    }
  }
}
