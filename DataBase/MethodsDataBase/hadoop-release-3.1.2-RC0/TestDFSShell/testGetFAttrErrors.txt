@Test(timeout=120000) public void testGetFAttrErrors() throws Exception {
  final UserGroupInformation user=UserGroupInformation.createUserForTesting("user",new String[]{"mygroup"});
  PrintStream bakErr=null;
  try {
    final Path p=new Path("/testGetFAttrErrors");
    dfs.mkdirs(p);
    bakErr=System.err;
    final FsShell fshell=new FsShell(dfs.getConf());
    final ByteArrayOutputStream out=new ByteArrayOutputStream();
    System.setErr(new PrintStream(out));
    dfs.setPermission(p,new FsPermission((short)0700));
{
      final int ret=ToolRunner.run(fshell,new String[]{"-setfattr","-n","user.a1","-v","1234",p.toString()});
      assertEquals("Returned should be 0",0,ret);
      out.reset();
    }
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        int ret=ToolRunner.run(fshell,new String[]{"-getfattr","-n","user.a1",p.toString()});
        String str=out.toString();
        assertTrue("xattr value was incorrectly returned",str.indexOf("1234") == -1);
        out.reset();
        return null;
      }
    }
);
{
      final int ret=ToolRunner.run(fshell,new String[]{"-getfattr","-n","user.nonexistent",p.toString()});
      String str=out.toString();
      assertTrue("xattr value was incorrectly returned",str.indexOf("getfattr: At least one of the attributes provided was not found") >= 0);
      out.reset();
    }
  }
  finally {
    if (bakErr != null) {
      System.setErr(bakErr);
    }
  }
}
