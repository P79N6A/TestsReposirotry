@Test public void testBootstrap() throws ResourceHandlerException {
  String allowed="auto";
  configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES,allowed);
  fpgaResourceHandler.bootstrap(configuration);
  verify(mockVendorPlugin,times(1)).initPlugin(configuration);
  verify(mockCGroupsHandler,times(1)).initializeCGroupController(CGroupsHandler.CGroupController.DEVICES);
  Assert.assertEquals(5,fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());
  Assert.assertEquals(5,fpgaResourceHandler.getFpgaAllocator().getAllowedFpga().size());
  fpgaResourceHandler=new FpgaResourceHandlerImpl(mockContext,mockCGroupsHandler,mockPrivilegedExecutor,mockVendorPlugin);
  allowed="0,1,2";
  configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES,allowed);
  fpgaResourceHandler.bootstrap(configuration);
  Assert.assertEquals(3,fpgaResourceHandler.getFpgaAllocator().getAllowedFpga().size());
  List<FpgaResourceAllocator.FpgaDevice> allowedDevices=fpgaResourceHandler.getFpgaAllocator().getAllowedFpga();
  for (  String s : allowed.split(",")) {
    boolean check=false;
    for (    FpgaResourceAllocator.FpgaDevice device : allowedDevices) {
      if (device.getMinor().toString().equals(s)) {
        check=true;
      }
    }
    Assert.assertTrue("Minor:" + s + "found",check);
  }
  Assert.assertEquals(3,fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());
  fpgaResourceHandler=new FpgaResourceHandlerImpl(mockContext,mockCGroupsHandler,mockPrivilegedExecutor,mockVendorPlugin);
  allowed="0,1,7";
  configuration.set(YarnConfiguration.NM_FPGA_ALLOWED_DEVICES,allowed);
  fpgaResourceHandler.bootstrap(configuration);
  Assert.assertEquals(2,fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount());
  Assert.assertEquals(2,fpgaResourceHandler.getFpgaAllocator().getAllowedFpga().size());
}
