@Test public void testReadOnly() throws Exception {
  MountTable readOnlyEntry=MountTable.newInstance("/readonly",Collections.singletonMap("ns0","/testdir"));
  readOnlyEntry.setReadOnly(true);
  assertTrue(addMountTable(readOnlyEntry));
  MountTable regularEntry=MountTable.newInstance("/regular",Collections.singletonMap("ns0","/testdir"));
  assertTrue(addMountTable(regularEntry));
  final FileSystem nnFs=nnContext.getFileSystem();
  final FileSystem routerFs=routerContext.getFileSystem();
  assertTrue(routerFs.mkdirs(new Path("/regular/newdir")));
  FileStatus dirStatusNn=nnFs.getFileStatus(new Path("/testdir/newdir"));
  assertTrue(dirStatusNn.isDirectory());
  FileStatus dirStatusRegular=routerFs.getFileStatus(new Path("/regular/newdir"));
  assertTrue(dirStatusRegular.isDirectory());
  FileStatus dirStatusReadOnly=routerFs.getFileStatus(new Path("/readonly/newdir"));
  assertTrue(dirStatusReadOnly.isDirectory());
  try {
    routerFs.mkdirs(new Path("/readonly/newdirfail"));
    fail("We should not be able to write into a read only mount point");
  }
 catch (  IOException ioe) {
    String msg=ioe.getMessage();
    assertTrue(msg.startsWith("/readonly/newdirfail is in a read only mount point"));
  }
}
