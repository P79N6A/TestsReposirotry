/** 
 * Test all user comparators. Super-test of all tests here.  We generate composite keys that contain a random number, which acts as a timestamp associated with the record. In our Reduce function,  values for a key should be sorted by the 'timestamp'. We also provide our own comparators that reverse the default sorting  order. This lets us make sure that the right comparators are used. 
 * @throws Exception
 */
@Test public void testAllUserComparators() throws Exception {
  conf.setMapperClass(RandomGenMapper.class);
  conf.setOutputKeyComparatorClass(DecreasingIntComparator.class);
  conf.setReducerClass(DescendingGroupReducer.class);
  conf.setOutputValueGroupingComparator(CompositeIntReverseGroupFn.class);
  RunningJob r_job=jc.submitJob(conf);
  while (!r_job.isComplete()) {
    Thread.sleep(1000);
  }
  if (!r_job.isSuccessful()) {
    fail("Oops! The job broke due to an unexpected error");
  }
}
