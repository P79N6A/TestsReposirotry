@Test(timeout=30000) public void testLinuxContainerExecutorWithResourcePluginsEnabled() throws Exception {
  final ResourcePluginManager rpm=stubResourcePluginmanager();
  final LinuxContainerExecutor lce=new MyLCE();
  nm=new NodeManager(){
    @Override protected NodeStatusUpdater createNodeStatusUpdater(    Context context,    Dispatcher dispatcher,    NodeHealthCheckerService healthChecker){
      ((NMContext)context).setResourcePluginManager(rpm);
      return new BaseNodeStatusUpdaterForTest(context,dispatcher,healthChecker,metrics,new BaseResourceTrackerForTest());
    }
    @Override protected ContainerManagerImpl createContainerManager(    Context context,    ContainerExecutor exec,    DeletionService del,    NodeStatusUpdater nodeStatusUpdater,    ApplicationACLsManager aclsManager,    LocalDirsHandlerService diskhandler){
      return new MyContainerManager(context,exec,del,nodeStatusUpdater,metrics,diskhandler);
    }
    @Override protected ContainerExecutor createContainerExecutor(    Configuration conf){
      ((NMContext)this.getNMContext()).setResourcePluginManager(rpm);
      lce.setConf(conf);
      return lce;
    }
  }
;
  YarnConfiguration conf=createNMConfig();
  nm.init(conf);
  nm.start();
  ResourceHandler handler=lce.getResourceHandler();
  Assert.assertNotNull(handler);
  Assert.assertTrue(handler instanceof ResourceHandlerChain);
  boolean newHandlerAdded=false;
  for (  ResourceHandler h : ((ResourceHandlerChain)handler).getResourceHandlerList()) {
    if (h instanceof CustomizedResourceHandler) {
      newHandlerAdded=true;
      break;
    }
  }
  Assert.assertTrue("New ResourceHandler should be added",newHandlerAdded);
}
