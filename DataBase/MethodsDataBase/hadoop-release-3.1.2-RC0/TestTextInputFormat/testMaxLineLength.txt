/** 
 * Test readLine for correct interpretation of maxLineLength (returned string should be clipped at maxLineLength, and the remaining bytes on the same line should be thrown out). Also check that returned value matches the string length. Varies buffer size to stress test.
 * @throws Exception
 */
@Test(timeout=5000) public void testMaxLineLength() throws Exception {
  final String STR="a\nbb\n\nccc\rdddd\r\neeeee";
  final int STRLENBYTES=STR.getBytes().length;
  Text out=new Text();
  for (int bufsz=1; bufsz < STRLENBYTES + 1; ++bufsz) {
    LineReader in=makeStream(STR,bufsz);
    int c=0;
    c+=in.readLine(out,1);
    assertEquals("line1 length, bufsz: " + bufsz,1,out.getLength());
    c+=in.readLine(out,1);
    assertEquals("line2 length, bufsz: " + bufsz,1,out.getLength());
    c+=in.readLine(out,1);
    assertEquals("line3 length, bufsz: " + bufsz,0,out.getLength());
    c+=in.readLine(out,3);
    assertEquals("line4 length, bufsz: " + bufsz,3,out.getLength());
    c+=in.readLine(out,10);
    assertEquals("line5 length, bufsz: " + bufsz,4,out.getLength());
    c+=in.readLine(out,8);
    assertEquals("line5 length, bufsz: " + bufsz,5,out.getLength());
    assertEquals("end of file, bufsz: " + bufsz,0,in.readLine(out));
    assertEquals("total bytes, bufsz: " + bufsz,c,STRLENBYTES);
  }
}
