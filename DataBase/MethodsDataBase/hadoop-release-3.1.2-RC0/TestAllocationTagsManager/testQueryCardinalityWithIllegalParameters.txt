@Test public void testQueryCardinalityWithIllegalParameters(){
  AllocationTagsManager atm=new AllocationTagsManager(rmContext);
  atm.addContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(1,1),ImmutableSet.of("mapper","reducer"));
  atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(1,2),ImmutableSet.of("mapper","reducer"));
  atm.addContainer(NodeId.fromString("host1:123"),TestUtils.getMockContainerId(1,3),ImmutableSet.of("service"));
  atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(1,4),ImmutableSet.of("reducer"));
  atm.addContainer(NodeId.fromString("host2:123"),TestUtils.getMockContainerId(2,3),ImmutableSet.of("service"));
  boolean caughtException=false;
  try {
    atm.getNodeCardinalityByOp(null,AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(2),ImmutableSet.of("mapper")),Long::min);
  }
 catch (  InvalidAllocationTagsQueryException e1) {
    caughtException=true;
  }
  Assert.assertTrue("should fail because of nodeId specified",caughtException);
  caughtException=false;
  try {
    atm.getNodeCardinalityByOp(NodeId.fromString("host2:123"),AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(2),ImmutableSet.of("mapper")),null);
  }
 catch (  InvalidAllocationTagsQueryException e1) {
    caughtException=true;
  }
  Assert.assertTrue("should fail because of nodeId specified",caughtException);
}
