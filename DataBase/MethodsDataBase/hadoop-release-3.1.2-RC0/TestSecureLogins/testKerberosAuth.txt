@Test public void testKerberosAuth() throws Throwable {
  File krb5conf=getKdc().getKrb5conf();
  String krbConfig=FileUtils.readFileToString(krb5conf);
  LOG.info("krb5.conf at {}:\n{}",krb5conf,krbConfig);
  Subject subject=new Subject();
  Class<?> kerb5LoginClass=Class.forName(KerberosUtil.getKrb5LoginModuleName());
  Constructor<?> kerb5LoginConstr=kerb5LoginClass.getConstructor();
  Object kerb5LoginObject=kerb5LoginConstr.newInstance();
  final Map<String,String> options=new HashMap<String,String>();
  options.put("debug","true");
  if (IBM_JAVA) {
    options.put("useKeytab",keytab_alice.getAbsolutePath().startsWith("file://") ? keytab_alice.getAbsolutePath() : "file://" + keytab_alice.getAbsolutePath());
    options.put("principal",ALICE_LOCALHOST);
    options.put("refreshKrb5Config","true");
    options.put("credsType","both");
    String ticketCache=System.getenv("KRB5CCNAME");
    if (ticketCache != null) {
      System.setProperty("KRB5CCNAME",ticketCache);
      options.put("useDefaultCcache","true");
      options.put("renewTGT","true");
    }
  }
 else {
    options.put("keyTab",keytab_alice.getAbsolutePath());
    options.put("principal",ALICE_LOCALHOST);
    options.put("doNotPrompt","true");
    options.put("isInitiator","true");
    options.put("refreshKrb5Config","true");
    options.put("renewTGT","true");
    options.put("storeKey","true");
    options.put("useKeyTab","true");
    options.put("useTicketCache","true");
  }
  Method methodInitialize=kerb5LoginObject.getClass().getMethod("initialize",Subject.class,CallbackHandler.class,Map.class,Map.class);
  methodInitialize.invoke(kerb5LoginObject,subject,null,new HashMap<String,String>(),options);
  Method methodLogin=kerb5LoginObject.getClass().getMethod("login");
  boolean loginOk=(Boolean)methodLogin.invoke(kerb5LoginObject);
  assertTrue("Failed to login",loginOk);
  Method methodCommit=kerb5LoginObject.getClass().getMethod("commit");
  boolean commitOk=(Boolean)methodCommit.invoke(kerb5LoginObject);
  assertTrue("Failed to Commit",commitOk);
}
