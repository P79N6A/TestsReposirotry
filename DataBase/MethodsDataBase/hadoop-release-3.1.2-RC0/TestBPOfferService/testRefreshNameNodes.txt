@Test public void testRefreshNameNodes() throws Exception {
  BPOfferService bpos=setupBPOSForNNs(mockDn,mockNN1,mockNN2);
  bpos.start();
  try {
    waitForBothActors(bpos);
    Mockito.verify(mockNN1).registerDatanode(Mockito.any(DatanodeRegistration.class));
    Mockito.verify(mockNN2).registerDatanode(Mockito.any(DatanodeRegistration.class));
    waitForBlockReport(mockNN1);
    waitForBlockReport(mockNN2);
    bpos.notifyNamenodeReceivedBlock(FAKE_BLOCK,null,"",false);
    ReceivedDeletedBlockInfo[] ret=waitForBlockReceived(FAKE_BLOCK,mockNN1);
    assertEquals(1,ret.length);
    assertEquals(FAKE_BLOCK.getLocalBlock(),ret[0].getBlock());
    ret=waitForBlockReceived(FAKE_BLOCK,mockNN2);
    assertEquals(1,ret.length);
    assertEquals(FAKE_BLOCK.getLocalBlock(),ret[0].getBlock());
    DatanodeProtocolClientSideTranslatorPB mockNN3=setupNNMock(2);
    Mockito.doReturn(mockNN3).when(mockDn).connectToNN(Mockito.eq(new InetSocketAddress(2)));
    ArrayList<InetSocketAddress> addrs=new ArrayList<>();
    ArrayList<InetSocketAddress> lifelineAddrs=new ArrayList<>(addrs.size());
    addrs.add(new InetSocketAddress(0));
    lifelineAddrs.add(null);
    addrs.add(new InetSocketAddress(2));
    lifelineAddrs.add(null);
    bpos.refreshNNList(addrs,lifelineAddrs);
    assertEquals(2,bpos.getBPServiceActors().size());
    Thread.sleep(1000);
    Mockito.verify(mockNN3).registerDatanode(Mockito.any(DatanodeRegistration.class));
    bpos.notifyNamenodeReceivedBlock(FAKE_BLOCK,null,"",false);
    ret=waitForBlockReceived(FAKE_BLOCK,mockNN3);
    assertEquals(1,ret.length);
    assertEquals(FAKE_BLOCK.getLocalBlock(),ret[0].getBlock());
  }
  finally {
    bpos.stop();
    bpos.join();
  }
}
