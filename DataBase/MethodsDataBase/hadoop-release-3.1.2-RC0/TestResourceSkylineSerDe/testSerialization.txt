@Test public final void testSerialization(){
  ReservationInterval riAdd=new ReservationInterval(0,10);
  skylineList.addInterval(riAdd,resource);
  riAdd=new ReservationInterval(10,20);
  skylineList.addInterval(riAdd,resource2);
  resourceSkyline=new ResourceSkyline("1",1024.5,0,20,resource,skylineList);
  final String json=gson.toJson(resourceSkyline,new TypeToken<ResourceSkyline>(){
  }
.getType());
  final ResourceSkyline resourceSkylineDe=gson.fromJson(json,new TypeToken<ResourceSkyline>(){
  }
.getType());
  Assert.assertEquals(resourceSkylineDe.getJobId(),resourceSkyline.getJobId());
  Assert.assertEquals(resourceSkylineDe.getJobInputDataSize(),resourceSkyline.getJobInputDataSize(),0);
  Assert.assertEquals(resourceSkylineDe.getJobSubmissionTime(),resourceSkyline.getJobSubmissionTime());
  Assert.assertEquals(resourceSkylineDe.getJobFinishTime(),resourceSkyline.getJobFinishTime());
  Assert.assertEquals(resourceSkylineDe.getContainerSpec().getMemorySize(),resourceSkyline.getContainerSpec().getMemorySize());
  Assert.assertEquals(resourceSkylineDe.getContainerSpec().getVirtualCores(),resourceSkyline.getContainerSpec().getVirtualCores());
  final RLESparseResourceAllocation skylineList2=resourceSkyline.getSkylineList();
  final RLESparseResourceAllocation skylineListDe=resourceSkylineDe.getSkylineList();
  for (int i=0; i < 20; i++) {
    Assert.assertEquals(skylineList2.getCapacityAtTime(i).getMemorySize(),skylineListDe.getCapacityAtTime(i).getMemorySize());
    Assert.assertEquals(skylineList2.getCapacityAtTime(i).getVirtualCores(),skylineListDe.getCapacityAtTime(i).getVirtualCores());
  }
}
