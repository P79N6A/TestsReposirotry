/** 
 * Make sure scheduler skips NMs which haven't heartbeat for a while.
 * @throws Exception
 */
@Test public void testAsyncSchedulerSkipNoHeartbeatNMs() throws Exception {
  int heartbeatInterval=100;
  conf.setInt(CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_MAXIMUM_THREAD,1);
  conf.setInt(CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_PREFIX + ".scheduling-interval-ms",100);
  conf.setInt(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,heartbeatInterval);
  final RMNodeLabelsManager mgr=new NullRMNodeLabelsManager();
  mgr.init(conf);
  MockRM rm=new MockRM(TestUtils.getConfigurationWithMultipleQueues(conf)){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  rm.getRMContext().setNodeLabelManager(mgr);
  rm.start();
  List<MockNM> nms=new ArrayList<>();
  for (int i=0; i < 10; i++) {
    nms.add(rm.registerNode("127.0.0." + i + ":1234",20 * GB));
  }
  List<MockAM> ams=new ArrayList<>();
  keepNMHeartbeat(nms,heartbeatInterval);
  for (int i=0; i < 3; i++) {
    RMApp rmApp=rm.submitApp(1024,"app","user",null,false,Character.toString((char)(i % 34 + 97)),1,null,null,false);
    MockAM am=MockRM.launchAMWhenAsyncSchedulingEnabled(rmApp,rm);
    am.registerAppAttempt();
    ams.add(am);
  }
  pauseNMHeartbeat();
  Thread.sleep(heartbeatInterval * 3);
  for (int i=0; i < 3; i++) {
    ams.get(i).allocate("*",1024,20 * (i + 1),new ArrayList<>());
  }
  for (int i=0; i < 5; i++) {
    nms.get(i).nodeHeartbeat(true);
  }
  Thread.sleep(2000);
  for (int i=0; i < 9; i++) {
    if (i < 5) {
      Assert.assertTrue(checkNumNonAMContainersOnNode(cs,nms.get(i)) > 0);
    }
 else {
      Assert.assertTrue(checkNumNonAMContainersOnNode(cs,nms.get(i)) == 0);
    }
  }
  rm.close();
}
