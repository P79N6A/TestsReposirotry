@Test(timeout=30000) public void testCommitProposalForFailedAppAttempt() throws Exception {
  Configuration disableAsyncConf=new Configuration(conf);
  disableAsyncConf.setBoolean(CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_ENABLE,false);
  final MockRM rm=new MockRM(disableAsyncConf);
  rm.start();
  final MockNM nm1=rm.registerNode("192.168.0.1:1234",9 * GB);
  final MockNM nm2=rm.registerNode("192.168.0.2:2234",9 * GB);
  List<MockNM> nmLst=new ArrayList<>();
  nmLst.add(nm1);
  nmLst.add(nm2);
  while (((CapacityScheduler)rm.getRMContext().getScheduler()).getNodeTracker().nodeCount() < 2) {
    Thread.sleep(10);
  }
  Assert.assertEquals(2,((AbstractYarnScheduler)rm.getRMContext().getScheduler()).getNodeTracker().nodeCount());
  CapacityScheduler scheduler=(CapacityScheduler)rm.getRMContext().getScheduler();
  SchedulerNode sn1=scheduler.getSchedulerNode(nm1.getNodeId());
  SchedulerNode sn2=scheduler.getSchedulerNode(nm2.getNodeId());
  RMApp app=rm.submitApp(200,"app","user",null,false,"default",YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS,null,null,true,true);
  MockAM am=MockRM.launchAndRegisterAM(app,rm,nm1);
  FiCaSchedulerApp schedulerApp=scheduler.getApplicationAttempt(am.getApplicationAttemptId());
  allocateAndLaunchContainers(am,nm2,rm,1,Resources.createResource(5 * GB),0,2);
  Assert.assertEquals(1,sn1.getNumContainers());
  Assert.assertEquals(1,sn2.getNumContainers());
  scheduler.handle(new AppAttemptRemovedSchedulerEvent(am.getApplicationAttemptId(),RMAppAttemptState.KILLED,true));
  while (sn1.getCopiedListOfRunningContainers().size() == 1) {
    Thread.sleep(100);
  }
  while (sn1.getCopiedListOfRunningContainers().size() == 0) {
    nm1.nodeHeartbeat(true);
    Thread.sleep(100);
  }
  Resource reservedResource=Resources.createResource(5 * GB);
  Container container=Container.newInstance(ContainerId.newContainerId(am.getApplicationAttemptId(),3),sn2.getNodeID(),sn2.getHttpAddress(),reservedResource,Priority.newInstance(0),null);
  RMContainer rmContainer=new RMContainerImpl(container,SchedulerRequestKey.create(ResourceRequest.newInstance(Priority.newInstance(0),"*",reservedResource,1)),am.getApplicationAttemptId(),sn2.getNodeID(),"user",rm.getRMContext());
  SchedulerContainer reservedContainer=new SchedulerContainer(schedulerApp,scheduler.getNode(sn2.getNodeID()),rmContainer,"",false);
  ContainerAllocationProposal reservedForAttempt1Proposal=new ContainerAllocationProposal(reservedContainer,null,reservedContainer,NodeType.OFF_SWITCH,NodeType.OFF_SWITCH,SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,reservedResource);
  List<ContainerAllocationProposal> reservedProposals=new ArrayList<>();
  reservedProposals.add(reservedForAttempt1Proposal);
  ResourceCommitRequest request=new ResourceCommitRequest(null,reservedProposals,null);
  scheduler.tryCommit(scheduler.getClusterResource(),request,true);
  Assert.assertNull("Outdated proposal should not be accepted!",sn2.getReservedContainer());
  rm.stop();
}
