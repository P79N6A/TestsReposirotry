@Test(timeout=30000) public void testReturnNullWhenGetSchedulerContainer() throws Exception {
  Configuration disableAsyncConf=new Configuration(conf);
  disableAsyncConf.setBoolean(CapacitySchedulerConfiguration.SCHEDULE_ASYNCHRONOUSLY_ENABLE,false);
  final MockRM rm=new MockRM(disableAsyncConf);
  rm.start();
  final MockNM nm1=rm.registerNode("192.168.0.1:1234",8 * GB);
  final MockNM nm2=rm.registerNode("192.168.0.2:2234",8 * GB);
  rm.drainEvents();
  CapacityScheduler cs=(CapacityScheduler)rm.getRMContext().getScheduler();
  SchedulerNode sn1=cs.getSchedulerNode(nm1.getNodeId());
  RMNode rmNode1=cs.getNode(nm1.getNodeId()).getRMNode();
  SchedulerNode sn2=cs.getSchedulerNode(nm2.getNodeId());
  RMApp app1=rm.submitApp(1 * GB,"app1","user",null,false,"default",YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS,null,null,true,true);
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm1);
  am1.allocate(ImmutableList.of(ResourceRequest.newInstance(Priority.newInstance(0),"*",Resources.createResource(1 * GB),1)),null);
  RMContainer amContainer=cs.getRMContainer(ContainerId.newContainerId(am1.getApplicationAttemptId(),1));
  final CapacityScheduler spyCs=Mockito.spy(cs);
  List<CSAssignment> assignmentSnapshots=new ArrayList<>();
  Mockito.doAnswer(new Answer<Object>(){
    public Boolean answer(    InvocationOnMock invocation) throws Exception {
      CSAssignment assignment=(CSAssignment)invocation.getArguments()[1];
      if (cs.getNode(nm1.getNodeId()) != null) {
        cs.getRMContext().getDispatcher().getEventHandler().handle(new RMNodeEvent(nm1.getNodeId(),RMNodeEventType.DECOMMISSION));
        rm.drainEvents();
        Assert.assertEquals(NodeState.DECOMMISSIONED,rmNode1.getState());
        Assert.assertNull(cs.getNode(nm1.getNodeId()));
        assignmentSnapshots.add(assignment);
      }
 else {
        assignment.setContainersToKill(ImmutableList.of(amContainer));
      }
      cs.submitResourceCommitRequest((Resource)invocation.getArguments()[0],assignment);
      return false;
    }
  }
).when(spyCs).submitResourceCommitRequest(Mockito.any(Resource.class),Mockito.any(CSAssignment.class));
  CandidateNodeSet<FiCaSchedulerNode> candidateNodeSet=new SimpleCandidateNodeSet(sn1);
  spyCs.allocateContainersToNode(candidateNodeSet,false);
  Assert.assertTrue(spyCs.getApplicationAttempt(am1.getApplicationAttemptId()).hasPendingResourceRequest(rm.getResourceScheduler().getResourceCalculator(),RMNodeLabelsManager.NO_LABEL,rm.getResourceScheduler().getClusterResource(),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));
  candidateNodeSet=new SimpleCandidateNodeSet(sn2);
  spyCs.allocateContainersToNode(candidateNodeSet,false);
  Assert.assertTrue(spyCs.getApplicationAttempt(am1.getApplicationAttemptId()).hasPendingResourceRequest(rm.getResourceScheduler().getResourceCalculator(),RMNodeLabelsManager.NO_LABEL,rm.getResourceScheduler().getClusterResource(),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));
  rm.stop();
}
