@Test public void testKMSProviderCaching() throws Exception {
  Configuration conf=new Configuration();
  File confDir=getTestDir();
  conf=createBaseKMSConf(confDir,conf);
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + "k1.ALL","*");
  writeConf(confDir,conf);
  runServer(null,null,confDir,new KMSCallable<Void>(){
    @Override public Void call() throws Exception {
      final String keyName="k1";
      final String mockVersionName="mock";
      final Configuration conf=new Configuration();
      final URI uri=createKMSUri(getKMSUrl());
      KMSClientProvider kmscp=createKMSClientProvider(uri,conf);
      ValueQueue vq=(ValueQueue)Whitebox.getInternalState(kmscp,"encKeyVersionQueue");
      LoadingCache<String,LinkedBlockingQueue<EncryptedKeyVersion>> kq=((LoadingCache<String,LinkedBlockingQueue<EncryptedKeyVersion>>)Whitebox.getInternalState(vq,"keyQueues"));
      EncryptedKeyVersion mockEKV=Mockito.mock(EncryptedKeyVersion.class);
      when(mockEKV.getEncryptionKeyName()).thenReturn(keyName);
      when(mockEKV.getEncryptionKeyVersionName()).thenReturn(mockVersionName);
      KeyProvider.Options options=new KeyProvider.Options(conf);
      options.setCipher("AES/CTR/NoPadding");
      options.setBitLength(128);
      options.setDescription("l1");
      KeyProvider.KeyVersion kv0=kmscp.createKey(keyName,options);
      assertNotNull(kv0.getVersionName());
      assertEquals("Default key version name is incorrect.","k1@0",kmscp.generateEncryptedKey(keyName).getEncryptionKeyVersionName());
      kmscp.invalidateCache(keyName);
      kq.get(keyName).put(mockEKV);
      assertEquals("Key version incorrect after invalidating cache + putting" + " mock key.",mockVersionName,kmscp.generateEncryptedKey(keyName).getEncryptionKeyVersionName());
      for (int i=0; i < 100; ++i) {
        kq.get(keyName).put(mockEKV);
        kmscp.invalidateCache(keyName);
        assertEquals("Cache invalidation guarantee failed.","k1@0",kmscp.generateEncryptedKey(keyName).getEncryptionKeyVersionName());
      }
      return null;
    }
  }
);
}
