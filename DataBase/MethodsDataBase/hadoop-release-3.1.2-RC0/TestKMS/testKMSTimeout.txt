/** 
 * Test the configurable timeout in the KMSClientProvider.  Open up a socket, but don't accept connections for it.  This leads to a timeout when the KMS client attempts to connect.
 * @throws Exception
 */
@Test public void testKMSTimeout() throws Exception {
  File confDir=getTestDir();
  Configuration conf=createBaseKMSConf(confDir);
  conf.setInt(CommonConfigurationKeysPublic.KMS_CLIENT_TIMEOUT_SECONDS,1);
  writeConf(confDir,conf);
  ServerSocket sock;
  int port;
  try {
    sock=new ServerSocket(0,50,InetAddress.getByName("localhost"));
    port=sock.getLocalPort();
  }
 catch (  Exception e) {
    return;
  }
  URL url=new URL("http://localhost:" + port + "/kms");
  URI uri=createKMSUri(url);
  boolean caughtTimeout=false;
  try {
    KeyProvider kp=createProvider(uri,conf);
    kp.getKeys();
  }
 catch (  SocketTimeoutException e) {
    caughtTimeout=true;
  }
catch (  IOException e) {
    Assert.assertTrue("Caught unexpected exception" + e.toString(),false);
  }
  caughtTimeout=false;
  try {
    KeyProvider kp=createProvider(uri,conf);
    KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp).generateEncryptedKey("a");
  }
 catch (  SocketTimeoutException e) {
    caughtTimeout=true;
  }
catch (  IOException e) {
    Assert.assertTrue("Caught unexpected exception" + e.toString(),false);
  }
  caughtTimeout=false;
  try {
    KeyProvider kp=createProvider(uri,conf);
    KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp).decryptEncryptedKey(new KMSClientProvider.KMSEncryptedKeyVersion("a","a",new byte[]{1,2},"EEK",new byte[]{1,2}));
  }
 catch (  SocketTimeoutException e) {
    caughtTimeout=true;
  }
catch (  IOException e) {
    Assert.assertTrue("Caught unexpected exception" + e.toString(),false);
  }
  Assert.assertTrue(caughtTimeout);
  sock.close();
}
