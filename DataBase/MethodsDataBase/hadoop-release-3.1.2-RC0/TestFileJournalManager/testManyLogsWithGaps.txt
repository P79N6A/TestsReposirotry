/** 
 * Test that we receive the correct number of transactions when we count the number of transactions around gaps. Set up a single edits directory, with no failures. Delete the 4th logfile. Test that getNumberOfTransactions returns the correct number of  transactions before this gap and after this gap. Also verify that if you try to count on the gap that an exception is thrown.
 */
@Test public void testManyLogsWithGaps() throws IOException {
  File f=new File(TestEditLog.TEST_DIR + "/manylogswithgaps");
  NNStorage storage=setupEdits(Collections.<URI>singletonList(f.toURI()),10);
  StorageDirectory sd=storage.dirIterator(NameNodeDirType.EDITS).next();
  final long startGapTxId=3 * TXNS_PER_ROLL + 1;
  final long endGapTxId=4 * TXNS_PER_ROLL;
  File[] files=new File(f,"current").listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      if (name.startsWith(NNStorage.getFinalizedEditsFileName(startGapTxId,endGapTxId))) {
        return true;
      }
      return false;
    }
  }
);
  assertEquals(1,files.length);
  assertTrue(files[0].delete());
  FileJournalManager jm=new FileJournalManager(conf,sd,storage);
  assertEquals(startGapTxId - 1,getNumberOfTransactions(jm,1,true,true));
  assertEquals(0,getNumberOfTransactions(jm,startGapTxId,true,true));
  assertEquals(11 * TXNS_PER_ROLL - endGapTxId,getNumberOfTransactions(jm,endGapTxId + 1,true,true));
}
