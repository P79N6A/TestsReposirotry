@Test(timeout=30000) public void testNNFailToStartOnReadOnlyNNDir() throws Exception {
  final String nnDirStr=Paths.get(hdfsDir.toString(),GenericTestUtils.getMethodName(),"name").toString();
  config.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nnDirStr);
  try (MiniDFSCluster cluster=new MiniDFSCluster.Builder(config).numDataNodes(1).manageNameDfsDirs(false).build()){
    cluster.waitActive();
    final Collection<URI> nnDirs=FSNamesystem.getNamespaceDirs(config);
    assertNotNull(nnDirs);
    assertTrue(nnDirs.iterator().hasNext());
    assertEquals("NN dir should be created after NN startup.",new File(nnDirStr),new File(nnDirs.iterator().next().getPath()));
    final File nnDir=new File(nnDirStr);
    assertTrue(nnDir.exists());
    assertTrue(nnDir.isDirectory());
    try {
      assertTrue("Setting NN dir read only should succeed.",FileUtil.setWritable(nnDir,false));
      cluster.restartNameNodes();
      fail("Restarting NN should fail on read only NN dir.");
    }
 catch (    InconsistentFSStateException e) {
      assertThat(e.toString(),is(allOf(containsString("InconsistentFSStateException"),containsString(nnDirStr),containsString("in an inconsistent state"),containsString("storage directory does not exist or is not accessible."))));
    }
 finally {
      assertTrue("Setting NN dir should succeed.",FileUtil.setWritable(nnDir,true));
    }
  }
 }
