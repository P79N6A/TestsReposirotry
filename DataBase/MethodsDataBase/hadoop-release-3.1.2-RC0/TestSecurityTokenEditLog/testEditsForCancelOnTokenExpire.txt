@Test(timeout=10000) public void testEditsForCancelOnTokenExpire() throws IOException, InterruptedException {
  long renewInterval=2000;
  Configuration conf=new Configuration();
  conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY,true);
  conf.setLong(DFS_NAMENODE_DELEGATION_TOKEN_RENEW_INTERVAL_KEY,renewInterval);
  conf.setLong(DFS_NAMENODE_DELEGATION_TOKEN_MAX_LIFETIME_KEY,renewInterval * 2);
  Text renewer=new Text(UserGroupInformation.getCurrentUser().getUserName());
  FSImage fsImage=mock(FSImage.class);
  FSEditLog log=mock(FSEditLog.class);
  doReturn(log).when(fsImage).getEditLog();
  final AtomicReference<FSNamesystem> fsnRef=new AtomicReference<>();
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      Assert.assertTrue(fsnRef.get().hasReadLock());
      Assert.assertFalse(fsnRef.get().hasWriteLock());
      return null;
    }
  }
).when(log).logCancelDelegationToken(any(DelegationTokenIdentifier.class));
  FSNamesystem fsn=new FSNamesystem(conf,fsImage);
  fsnRef.set(fsn);
  DelegationTokenSecretManager dtsm=fsn.getDelegationTokenSecretManager();
  try {
    dtsm.startThreads();
    Token<DelegationTokenIdentifier> token1=fsn.getDelegationToken(renewer);
    Token<DelegationTokenIdentifier> token2=fsn.getDelegationToken(renewer);
    DelegationTokenIdentifier ident1=token1.decodeIdentifier();
    DelegationTokenIdentifier ident2=token2.decodeIdentifier();
    verify(log,times(1)).logGetDelegationToken(eq(ident1),anyLong());
    verify(log,times(1)).logGetDelegationToken(eq(ident2),anyLong());
    Thread.sleep(renewInterval / 2);
    fsn.renewDelegationToken(token2);
    verify(log,times(1)).logRenewDelegationToken(eq(ident2),anyLong());
    dtsm.stopThreads();
    dtsm.startThreads();
    Thread.sleep(250);
    verify(log,times(0)).logCancelDelegationToken(eq(ident1));
    verify(log,times(0)).logCancelDelegationToken(eq(ident2));
    Thread.sleep(renewInterval / 2);
    dtsm.stopThreads();
    dtsm.startThreads();
    Thread.sleep(250);
    verify(log,times(1)).logCancelDelegationToken(eq(ident1));
    verify(log,times(0)).logCancelDelegationToken(eq(ident2));
    Thread.sleep(renewInterval / 2);
    dtsm.stopThreads();
    dtsm.startThreads();
    Thread.sleep(250);
    verify(log,times(1)).logCancelDelegationToken(eq(ident1));
    verify(log,times(1)).logCancelDelegationToken(eq(ident2));
  }
  finally {
    dtsm.stopThreads();
  }
}
