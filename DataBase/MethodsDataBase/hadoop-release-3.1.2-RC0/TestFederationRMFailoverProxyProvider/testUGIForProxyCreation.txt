@SuppressWarnings({"rawtypes","unchecked"}) @Test public void testUGIForProxyCreation() throws IOException, InterruptedException {
  conf.set(YarnConfiguration.RM_CLUSTER_ID,"cluster1");
  UserGroupInformation currentUser=UserGroupInformation.getCurrentUser();
  UserGroupInformation user1=UserGroupInformation.createProxyUser("user1",currentUser);
  UserGroupInformation user2=UserGroupInformation.createProxyUser("user2",currentUser);
  final TestableFederationRMFailoverProxyProvider provider=new TestableFederationRMFailoverProxyProvider();
  InetSocketAddress addr=conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);
  final ClientRMProxy rmProxy=mock(ClientRMProxy.class);
  when(rmProxy.getRMAddress(any(YarnConfiguration.class),any(Class.class))).thenReturn(addr);
  user1.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run(){
      provider.init(conf,rmProxy,ApplicationMasterProtocol.class);
      return null;
    }
  }
);
  final ProxyInfo currentProxy=provider.getProxy();
  Assert.assertEquals("user1",provider.getLastProxyUGI().getUserName());
  user2.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run(){
      provider.performFailover(currentProxy.proxy);
      return null;
    }
  }
);
  Assert.assertEquals("user1",provider.getLastProxyUGI().getUserName());
  provider.close();
}
