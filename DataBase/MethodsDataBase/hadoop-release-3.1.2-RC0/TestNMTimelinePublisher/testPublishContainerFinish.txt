@Test public void testPublishContainerFinish() throws Exception {
  ApplicationId appId=ApplicationId.newInstance(0,2);
  ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,1);
  ContainerId cId=ContainerId.newContainerId(appAttemptId,1);
  String diag="test-diagnostics";
  int exitStatus=0;
  ContainerStatus cStatus=mock(ContainerStatus.class);
  when(cStatus.getContainerId()).thenReturn(cId);
  when(cStatus.getDiagnostics()).thenReturn(diag);
  when(cStatus.getExitStatus()).thenReturn(exitStatus);
  long timeStamp=System.currentTimeMillis();
  ApplicationContainerFinishedEvent finishedEvent=new ApplicationContainerFinishedEvent(cStatus,timeStamp);
  publisher.createTimelineClient(appId);
  publisher.publishApplicationEvent(finishedEvent);
  publisher.stopTimelineClient(appId);
  dispatcher.await();
  ContainerEntity cEntity=new ContainerEntity();
  cEntity.setId(cId.toString());
  TimelineEntity[] lastPublishedEntities=timelineClient.getLastPublishedEntities();
  Assert.assertNotNull(lastPublishedEntities);
  Assert.assertEquals(1,lastPublishedEntities.length);
  TimelineEntity entity=lastPublishedEntities[0];
  Assert.assertTrue(cEntity.equals(entity));
  Assert.assertEquals(diag,entity.getInfo().get(ContainerMetricsConstants.DIAGNOSTICS_INFO));
  Assert.assertEquals(exitStatus,entity.getInfo().get(ContainerMetricsConstants.EXIT_STATUS_INFO));
}
