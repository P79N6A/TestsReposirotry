@Test public void testOverride() throws Throwable {
  Service orig=ExampleAppJson.loadResource(OVERRIDE_JSON);
  Configuration global=orig.getConfiguration();
  assertEquals("a",global.getProperty("g1"));
  assertEquals("b",global.getProperty("g2"));
  assertEquals(2,global.getFiles().size());
  Configuration simple=orig.getComponent("simple").getConfiguration();
  assertEquals(0,simple.getProperties().size());
  assertEquals(1,simple.getFiles().size());
  Configuration master=orig.getComponent("master").getConfiguration();
  assertEquals("m",master.getProperty("name"));
  assertEquals("overridden",master.getProperty("g1"));
  assertEquals(0,master.getFiles().size());
  Configuration worker=orig.getComponent("worker").getConfiguration();
  LOG.info("worker = {}",worker);
  assertEquals(3,worker.getProperties().size());
  assertEquals(0,worker.getFiles().size());
  assertEquals("worker",worker.getProperty("name"));
  assertEquals("overridden-by-worker",worker.getProperty("g1"));
  assertNull(worker.getProperty("g2"));
  assertEquals("1000",worker.getProperty("timeout"));
  SliderFileSystem sfs=ServiceTestUtils.initMockFs();
  ServiceApiUtil.validateAndResolveService(orig,sfs,new YarnConfiguration());
  global=orig.getConfiguration();
  LOG.info("global = {}",global);
  assertEquals("a",global.getProperty("g1"));
  assertEquals("b",global.getProperty("g2"));
  assertEquals(2,global.getFiles().size());
  simple=orig.getComponent("simple").getConfiguration();
  assertEquals(2,simple.getProperties().size());
  assertEquals("a",simple.getProperty("g1"));
  assertEquals("b",simple.getProperty("g2"));
  assertEquals(2,simple.getFiles().size());
  Set<ConfigFile> files=new HashSet<>();
  Map<String,String> props=new HashMap<>();
  props.put("k1","overridden");
  props.put("k2","v2");
  files.add(new ConfigFile().destFile("file1").type(ConfigFile.TypeEnum.PROPERTIES).properties(props));
  files.add(new ConfigFile().destFile("file2").type(ConfigFile.TypeEnum.XML).properties(Collections.singletonMap("k3","v3")));
  assertTrue(files.contains(simple.getFiles().get(0)));
  assertTrue(files.contains(simple.getFiles().get(1)));
  master=orig.getComponent("master").getConfiguration();
  LOG.info("master = {}",master);
  assertEquals(3,master.getProperties().size());
  assertEquals("m",master.getProperty("name"));
  assertEquals("overridden",master.getProperty("g1"));
  assertEquals("b",master.getProperty("g2"));
  assertEquals(2,master.getFiles().size());
  props.put("k1","v1");
  files.clear();
  files.add(new ConfigFile().destFile("file1").type(ConfigFile.TypeEnum.PROPERTIES).properties(props));
  files.add(new ConfigFile().destFile("file2").type(ConfigFile.TypeEnum.XML).properties(Collections.singletonMap("k3","v3")));
  assertTrue(files.contains(master.getFiles().get(0)));
  assertTrue(files.contains(master.getFiles().get(1)));
  worker=orig.getComponent("worker").getConfiguration();
  LOG.info("worker = {}",worker);
  assertEquals(4,worker.getProperties().size());
  assertEquals("worker",worker.getProperty("name"));
  assertEquals("overridden-by-worker",worker.getProperty("g1"));
  assertEquals("b",worker.getProperty("g2"));
  assertEquals("1000",worker.getProperty("timeout"));
  assertEquals(2,worker.getFiles().size());
  assertTrue(files.contains(worker.getFiles().get(0)));
  assertTrue(files.contains(worker.getFiles().get(1)));
}
