@Test public void validateConfigurationKeys(){
  assertEquals("fs.adl.oauth2.refresh.url",AZURE_AD_REFRESH_URL_KEY);
  assertEquals("fs.adl.oauth2.access.token.provider",AZURE_AD_TOKEN_PROVIDER_CLASS_KEY);
  assertEquals("fs.adl.oauth2.client.id",AZURE_AD_CLIENT_ID_KEY);
  assertEquals("fs.adl.oauth2.refresh.token",AZURE_AD_REFRESH_TOKEN_KEY);
  assertEquals("fs.adl.oauth2.credential",AZURE_AD_CLIENT_SECRET_KEY);
  assertEquals("adl.debug.override.localuserasfileowner",ADL_DEBUG_OVERRIDE_LOCAL_USER_AS_OWNER);
  assertEquals("fs.adl.oauth2.access.token.provider.type",AZURE_AD_TOKEN_PROVIDER_TYPE_KEY);
  assertEquals("adl.feature.client.cache.readahead",READ_AHEAD_BUFFER_SIZE_KEY);
  assertEquals("adl.feature.client.cache.drop.behind.writes",WRITE_BUFFER_SIZE_KEY);
  assertEquals("RefreshToken",TOKEN_PROVIDER_TYPE_REFRESH_TOKEN);
  assertEquals("ClientCredential",TOKEN_PROVIDER_TYPE_CLIENT_CRED);
  assertEquals("adl.enable.client.latency.tracker",LATENCY_TRACKER_KEY);
  assertEquals(true,LATENCY_TRACKER_DEFAULT);
  assertEquals(true,ADL_EXPERIMENT_POSITIONAL_READ_DEFAULT);
  assertEquals("adl.feature.experiment.positional.read.enable",ADL_EXPERIMENT_POSITIONAL_READ_KEY);
  assertEquals(1,ADL_REPLICATION_FACTOR);
  assertEquals(256 * 1024 * 1024,ADL_BLOCK_SIZE);
  assertEquals(false,ADL_DEBUG_SET_LOCAL_USER_AS_OWNER_DEFAULT);
  assertEquals(4 * 1024 * 1024,DEFAULT_READ_AHEAD_BUFFER_SIZE);
  assertEquals(4 * 1024 * 1024,DEFAULT_WRITE_AHEAD_BUFFER_SIZE);
  assertEquals("adl.feature.ownerandgroup.enableupn",ADL_ENABLEUPN_FOR_OWNERGROUP_KEY);
  assertEquals(false,ADL_ENABLEUPN_FOR_OWNERGROUP_DEFAULT);
}
