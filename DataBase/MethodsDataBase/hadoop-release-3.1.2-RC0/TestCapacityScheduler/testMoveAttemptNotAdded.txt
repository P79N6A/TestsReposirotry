@Test(timeout=60000) public void testMoveAttemptNotAdded() throws Exception {
  Configuration conf=new Configuration();
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  MockRM rm=new MockRM(getCapacityConfiguration(conf));
  rm.start();
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  ApplicationId appId=BuilderUtils.newApplicationId(100,1);
  ApplicationAttemptId appAttemptId=BuilderUtils.newApplicationAttemptId(appId,1);
  RMAppAttemptMetrics attemptMetric=new RMAppAttemptMetrics(appAttemptId,rm.getRMContext());
  RMAppImpl app=mock(RMAppImpl.class);
  when(app.getApplicationId()).thenReturn(appId);
  RMAppAttemptImpl attempt=mock(RMAppAttemptImpl.class);
  Container container=mock(Container.class);
  when(attempt.getMasterContainer()).thenReturn(container);
  ApplicationSubmissionContext submissionContext=mock(ApplicationSubmissionContext.class);
  when(attempt.getSubmissionContext()).thenReturn(submissionContext);
  when(attempt.getAppAttemptId()).thenReturn(appAttemptId);
  when(attempt.getRMAppAttemptMetrics()).thenReturn(attemptMetric);
  when(app.getCurrentAppAttempt()).thenReturn(attempt);
  rm.getRMContext().getRMApps().put(appId,app);
  SchedulerEvent addAppEvent=new AppAddedSchedulerEvent(appId,"a1","user");
  try {
    cs.moveApplication(appId,"b1");
    fail("Move should throw exception app not available");
  }
 catch (  YarnException e) {
    assertEquals("App to be moved application_100_0001 not found.",e.getMessage());
  }
  cs.handle(addAppEvent);
  cs.moveApplication(appId,"b1");
  SchedulerEvent addAttemptEvent=new AppAttemptAddedSchedulerEvent(appAttemptId,false);
  cs.handle(addAttemptEvent);
  CSQueue rootQ=cs.getRootQueue();
  CSQueue queueB=cs.getQueue("b");
  CSQueue queueA=cs.getQueue("a");
  CSQueue queueA1=cs.getQueue("a1");
  CSQueue queueB1=cs.getQueue("b1");
  Assert.assertEquals(1,rootQ.getNumApplications());
  Assert.assertEquals(0,queueA.getNumApplications());
  Assert.assertEquals(1,queueB.getNumApplications());
  Assert.assertEquals(0,queueA1.getNumApplications());
  Assert.assertEquals(1,queueB1.getNumApplications());
  rm.close();
}
