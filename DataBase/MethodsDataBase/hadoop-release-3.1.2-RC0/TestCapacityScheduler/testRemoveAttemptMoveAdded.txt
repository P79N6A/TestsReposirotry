@Test public void testRemoveAttemptMoveAdded() throws Exception {
  YarnConfiguration conf=new YarnConfiguration();
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,CapacityScheduler.class);
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
  MockRM rm=new MockRM(getCapacityConfiguration(conf));
  CapacityScheduler sch=(CapacityScheduler)rm.getResourceScheduler();
  Resource newResource=Resource.newInstance(4 * GB,1);
  RMNode node=MockNodes.newNodeInfo(0,newResource,1,"127.0.0.1");
  SchedulerEvent addNode=new NodeAddedSchedulerEvent(node);
  sch.handle(addNode);
  ApplicationId appId=BuilderUtils.newApplicationId(100,1);
  ApplicationAttemptId appAttemptId=BuilderUtils.newApplicationAttemptId(appId,1);
  RMAppAttemptMetrics attemptMetric=new RMAppAttemptMetrics(appAttemptId,rm.getRMContext());
  RMAppImpl app=mock(RMAppImpl.class);
  when(app.getApplicationId()).thenReturn(appId);
  RMAppAttemptImpl attempt=mock(RMAppAttemptImpl.class);
  Container container=mock(Container.class);
  when(attempt.getMasterContainer()).thenReturn(container);
  ApplicationSubmissionContext submissionContext=mock(ApplicationSubmissionContext.class);
  when(attempt.getSubmissionContext()).thenReturn(submissionContext);
  when(attempt.getAppAttemptId()).thenReturn(appAttemptId);
  when(attempt.getRMAppAttemptMetrics()).thenReturn(attemptMetric);
  when(app.getCurrentAppAttempt()).thenReturn(attempt);
  rm.getRMContext().getRMApps().put(appId,app);
  SchedulerEvent addAppEvent=new AppAddedSchedulerEvent(appId,"a1","user");
  sch.handle(addAppEvent);
  SchedulerEvent addAttemptEvent=new AppAttemptAddedSchedulerEvent(appAttemptId,false);
  sch.handle(addAttemptEvent);
  CSQueue queueA1=sch.getQueue("a1");
  CSQueue queueB=sch.getQueue("b");
  CSQueue queueB1=sch.getQueue("b1");
  ContainerId newContainerId=ContainerId.newContainerId(appAttemptId,2);
  RMContainerImpl rmContainer=mock(RMContainerImpl.class);
  when(rmContainer.getState()).thenReturn(RMContainerState.RUNNING);
  Container container2=mock(Container.class);
  when(rmContainer.getContainer()).thenReturn(container2);
  Resource resource=Resource.newInstance(1024,1);
  when(container2.getResource()).thenReturn(resource);
  when(rmContainer.getExecutionType()).thenReturn(ExecutionType.GUARANTEED);
  when(container2.getNodeId()).thenReturn(node.getNodeID());
  when(container2.getId()).thenReturn(newContainerId);
  when(rmContainer.getNodeLabelExpression()).thenReturn(RMNodeLabelsManager.NO_LABEL);
  when(rmContainer.getContainerId()).thenReturn(newContainerId);
  sch.getApplicationAttempt(appAttemptId).getLiveContainersMap().put(newContainerId,rmContainer);
  QueueMetrics queueA1M=queueA1.getMetrics();
  queueA1M.incrPendingResources(rmContainer.getNodeLabelExpression(),"user1",1,resource);
  queueA1M.allocateResources(rmContainer.getNodeLabelExpression(),"user1",resource);
  sch.handle(new AppAttemptRemovedSchedulerEvent(appAttemptId,RMAppAttemptState.KILLED,true));
  sch.moveApplication(appId,"b1");
  Assert.assertEquals(0,queueA1.getNumApplications());
  Assert.assertEquals(1,queueB.getNumApplications());
  Assert.assertEquals(0,queueB1.getNumApplications());
  ApplicationAttemptId appAttemptId2=BuilderUtils.newApplicationAttemptId(appId,2);
  SchedulerEvent addAttemptEvent2=new AppAttemptAddedSchedulerEvent(appAttemptId2,true);
  sch.handle(addAttemptEvent2);
  Assert.assertEquals(0,queueA1.getNumApplications());
  Assert.assertEquals(1,queueB.getNumApplications());
  Assert.assertEquals(1,queueB1.getNumApplications());
  QueueMetrics queueB1M=queueB1.getMetrics();
  QueueMetrics queueBM=queueB.getMetrics();
  Assert.assertEquals(0,queueA1M.getAllocatedMB());
  Assert.assertEquals(0,queueA1M.getAllocatedVirtualCores());
  Assert.assertEquals(1024,queueB1M.getAllocatedMB());
  Assert.assertEquals(1,queueB1M.getAllocatedVirtualCores());
  sch.handle(new AppAttemptRemovedSchedulerEvent(appAttemptId2,RMAppAttemptState.FINISHED,false));
  Assert.assertEquals(0,queueA1M.getAllocatedMB());
  Assert.assertEquals(0,queueA1M.getAllocatedVirtualCores());
  Assert.assertEquals(0,queueB1M.getAllocatedMB());
  Assert.assertEquals(0,queueB1M.getAllocatedVirtualCores());
  verifyQueueMetrics(queueB1M);
  verifyQueueMetrics(queueBM);
  verifyQueueMetrics(queueA1M);
  rm.close();
}
