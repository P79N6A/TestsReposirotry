/** 
 * Test for all child queue deletion and thus making parent queue a child.
 * @throws Exception
 */
@Test public void testRefreshQueuesWithAllChildQueuesDeleted() throws Exception {
  CapacityScheduler cs=new CapacityScheduler();
  CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
  RMContextImpl rmContext=new RMContextImpl(null,null,null,null,null,null,new RMContainerTokenSecretManager(conf),new NMTokenSecretManagerInRM(conf),new ClientToAMTokenSecretManagerInRM(),null);
  setupQueueConfiguration(conf);
  cs.setConf(new YarnConfiguration());
  cs.setRMContext(resourceManager.getRMContext());
  cs.init(conf);
  cs.start();
  cs.reinitialize(conf,rmContext);
  checkQueueCapacities(cs,A_CAPACITY,B_CAPACITY);
  Map<String,CSQueue> queues=cs.getCapacitySchedulerQueueManager().getQueues();
  CSQueue bQueue=Mockito.spy((LeafQueue)queues.get("b1"));
  when(bQueue.getState()).thenReturn(QueueState.RUNNING).thenReturn(QueueState.STOPPED);
  queues.put("b1",bQueue);
  bQueue=Mockito.spy((LeafQueue)queues.get("b2"));
  when(bQueue.getState()).thenReturn(QueueState.STOPPED);
  queues.put("b2",bQueue);
  bQueue=Mockito.spy((LeafQueue)queues.get("b3"));
  when(bQueue.getState()).thenReturn(QueueState.STOPPED);
  queues.put("b3",bQueue);
  conf=new CapacitySchedulerConfiguration();
  setupQueueConfWithOutChildrenOfB(conf);
  try {
    cs.reinitialize(conf,mockContext);
    fail("Expected to throw exception when refresh queue tries to make parent" + " queue a child queue when one of its children is still running.");
  }
 catch (  IOException e) {
  }
  try {
    cs.reinitialize(conf,mockContext);
  }
 catch (  IOException e) {
    e.printStackTrace();
    fail("Expected to NOT throw exception when refresh queue tries to delete" + " all children of a parent queue(without running apps).");
  }
  CSQueue rootQueue=cs.getRootQueue();
  CSQueue queueB=findQueue(rootQueue,B);
  assertNotNull("Parent Queue B should not be deleted",queueB);
  Assert.assertTrue("As Queue'B children are not deleted",queueB instanceof LeafQueue);
  String message="Refresh needs to support delete of all children of Parent queue.";
  assertNull(message,cs.getCapacitySchedulerQueueManager().getQueues().get("b3"));
  assertNull(message,cs.getCapacitySchedulerQueueManager().getQueues().get("b1"));
  assertNull(message,cs.getCapacitySchedulerQueueManager().getQueues().get("b2"));
  cs.stop();
}
