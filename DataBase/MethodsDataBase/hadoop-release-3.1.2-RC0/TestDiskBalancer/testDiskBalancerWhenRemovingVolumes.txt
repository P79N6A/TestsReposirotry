/** 
 * Test disk balancer behavior when one of the disks involved in balancing operation is removed after submitting the plan.
 * @throws Exception
 */
@Test public void testDiskBalancerWhenRemovingVolumes() throws Exception {
  Configuration conf=new HdfsConfiguration();
  conf.setBoolean(DFSConfigKeys.DFS_DISK_BALANCER_ENABLED,true);
  final int blockCount=100;
  final int blockSize=1024;
  final int diskCount=2;
  final int dataNodeCount=1;
  final int dataNodeIndex=0;
  final int sourceDiskIndex=0;
  final long cap=blockSize * 2L * blockCount;
  MiniDFSCluster cluster=new ClusterBuilder().setBlockCount(blockCount).setBlockSize(blockSize).setDiskCount(diskCount).setNumDatanodes(dataNodeCount).setConf(conf).setCapacities(new long[]{cap,cap}).build();
  try {
    DataMover dataMover=new DataMover(cluster,dataNodeIndex,sourceDiskIndex,conf,blockSize,blockCount);
    dataMover.moveDataToSourceDisk();
    NodePlan plan=dataMover.generatePlan();
    dataMover.executePlanDuringDiskRemove(plan);
    dataMover.verifyAllVolumesHaveData(true);
    dataMover.verifyTolerance(plan,0,sourceDiskIndex,10);
  }
 catch (  Exception e) {
    Assert.fail("Unexpected exception: " + e);
  }
 finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
