@Test public void testOutputFormatIntegration() throws Throwable {
  Configuration conf=getConfiguration();
  Job job=newJob();
  job.setOutputFormatClass(LoggingTextOutputFormat.class);
  conf=job.getConfiguration();
  conf.set(MRJobConfig.TASK_ATTEMPT_ID,attempt0);
  conf.setInt(MRJobConfig.APPLICATION_ATTEMPT_ID,1);
  JobContext jContext=new JobContextImpl(conf,taskAttempt0.getJobID());
  TaskAttemptContext tContext=new TaskAttemptContextImpl(conf,taskAttempt0);
  LoggingTextOutputFormat outputFormat=(LoggingTextOutputFormat)ReflectionUtils.newInstance(tContext.getOutputFormatClass(),conf);
  AbstractS3ACommitter committer=(AbstractS3ACommitter)outputFormat.getOutputCommitter(tContext);
  JobData jobData=new JobData(job,jContext,tContext,committer);
  setup(jobData);
  abortInTeardown(jobData);
  LoggingTextOutputFormat.LoggingLineRecordWriter recordWriter=outputFormat.getRecordWriter(tContext);
  IntWritable iw=new IntWritable(1);
  recordWriter.write(iw,iw);
  Path dest=recordWriter.getDest();
  validateTaskAttemptPathDuringWrite(dest);
  recordWriter.close(tContext);
  validateTaskAttemptPathAfterWrite(dest);
  assertTrue("Committer does not have data to commit " + committer,committer.needsTaskCommit(tContext));
  committer.commitTask(tContext);
  committer.commitJob(jContext);
  verifySuccessMarker(outDir);
}
