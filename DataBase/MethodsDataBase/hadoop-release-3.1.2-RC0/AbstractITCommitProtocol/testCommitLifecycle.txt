/** 
 * Full test of the expected lifecycle: start job, task, write, commit task, commit job.
 * @throws Exception on a failure
 */
@Test public void testCommitLifecycle() throws Exception {
  describe("Full test of the expected lifecycle:\n" + " start job, task, write, commit task, commit job.\n" + "Verify:\n"+ "* no files are visible after task commit\n"+ "* the expected file is visible after job commit\n"+ "* no outstanding MPUs after job commit");
  JobData jobData=startJob(false);
  JobContext jContext=jobData.jContext;
  TaskAttemptContext tContext=jobData.tContext;
  AbstractS3ACommitter committer=jobData.committer;
  validateTaskAttemptWorkingDirectory(committer,tContext);
  describe("1. Writing output");
  writeTextOutput(tContext);
  dumpMultipartUploads();
  describe("2. Committing task");
  assertTrue("No files to commit were found by " + committer,committer.needsTaskCommit(tContext));
  committer.commitTask(tContext);
  waitForConsistency();
  try {
    applyLocatedFiles(getFileSystem().listFiles(outDir,false),(status) -> assertFalse("task committed file to dest :" + status,status.getPath().toString().contains("part")));
  }
 catch (  FileNotFoundException ignored) {
    log().info("Outdir {} is not created by task commit phase ",outDir);
  }
  describe("3. Committing job");
  assertMultipartUploadsPending(outDir);
  committer.commitJob(jContext);
  describe("4. Validating content");
  validateContent(outDir,shouldExpectSuccessMarker());
  assertNoMultipartUploadsPending(outDir);
}
