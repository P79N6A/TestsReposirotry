/** 
 * Strict locality requests shouldn't reserve resources on another node.
 */
@Test public void testReservationsStrictLocality() throws IOException {
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024,1));
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(1024,1));
  NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
  scheduler.handle(nodeEvent2);
  ApplicationAttemptId attId=createSchedulingRequest(1024,"queue1","user1",0);
  FSAppAttempt app=scheduler.getSchedulerApp(attId);
  ResourceRequest nodeRequest=createResourceRequest(1024,node2.getHostName(),1,1,true);
  ResourceRequest rackRequest=createResourceRequest(1024,"rack1",1,1,false);
  ResourceRequest anyRequest=createResourceRequest(1024,ResourceRequest.ANY,1,1,false);
  createSchedulingRequestExistingApplication(nodeRequest,attId);
  createSchedulingRequestExistingApplication(rackRequest,attId);
  createSchedulingRequestExistingApplication(anyRequest,attId);
  scheduler.update();
  NodeUpdateSchedulerEvent nodeUpdateEvent=new NodeUpdateSchedulerEvent(node1);
  scheduler.handle(nodeUpdateEvent);
  assertEquals("App assigned a container on the wrong node",0,app.getLiveContainers().size());
  scheduler.handle(nodeUpdateEvent);
  assertEquals("App reserved a container on the wrong node",0,app.getReservedContainers().size());
}
