@Test public void testCompletedContainerOnRemovedNode() throws IOException {
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(2048),2,"127.0.0.2");
  scheduler.handle(new NodeAddedSchedulerEvent(node));
  ApplicationAttemptId appAttemptId=createAppAttemptId(1,1);
  createMockRMApp(appAttemptId);
  scheduler.addApplication(appAttemptId.getApplicationId(),"root.queue1","user1",false);
  scheduler.addApplicationAttempt(appAttemptId,false,false);
  List<ResourceRequest> ask1=new ArrayList<>();
  ResourceRequest request1=createResourceRequest(1024,node.getHostName(),1,1,true);
  ask1.add(request1);
  ResourceRequest request2=createResourceRequest(1024,node.getRackName(),1,1,false);
  ask1.add(request2);
  ResourceRequest request3=createResourceRequest(1024,ResourceRequest.ANY,1,1,false);
  ask1.add(request3);
  scheduler.allocate(appAttemptId,ask1,null,new ArrayList<ContainerId>(),null,null,NULL_UPDATE_REQUESTS);
  scheduler.update();
  scheduler.handle(new NodeUpdateSchedulerEvent(node));
  Collection<RMContainer> clist=scheduler.getSchedulerApp(appAttemptId).getLiveContainers();
  Assert.assertEquals(1,clist.size());
  RMContainer rmc=clist.iterator().next();
  NodeId containerNodeID=rmc.getAllocatedNode();
  assertEquals(node.getNodeID(),containerNodeID);
  scheduler.handle(new NodeRemovedSchedulerEvent(node));
  scheduler.completedContainer(rmc,SchedulerUtils.createAbnormalContainerStatus(rmc.getContainerId(),SchedulerUtils.COMPLETED_APPLICATION),RMContainerEventType.EXPIRE);
}
