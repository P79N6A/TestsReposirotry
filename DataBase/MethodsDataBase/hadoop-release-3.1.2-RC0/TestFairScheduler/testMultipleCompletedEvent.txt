@Test public void testMultipleCompletedEvent() throws Exception {
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"queue1\">");
  out.println("<maxAMShare>0.2</maxAMShare>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(20480,20),0,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
  NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
  scheduler.handle(nodeEvent);
  scheduler.update();
  ApplicationAttemptId attId1=createAppAttemptId(1,1);
  createApplicationWithAMResource(attId1,"queue1","user1",Resource.newInstance(1024,1));
  createSchedulingRequestExistingApplication(1024,1,RMAppAttemptImpl.AM_CONTAINER_PRIORITY.getPriority(),attId1);
  FSAppAttempt app1=scheduler.getSchedulerApp(attId1);
  scheduler.update();
  scheduler.handle(updateEvent);
  RMContainer container=app1.getLiveContainersMap().values().iterator().next();
  scheduler.completedContainer(container,SchedulerUtils.createAbnormalContainerStatus(container.getContainerId(),SchedulerUtils.LOST_CONTAINER),RMContainerEventType.KILL);
  scheduler.completedContainer(container,SchedulerUtils.createAbnormalContainerStatus(container.getContainerId(),SchedulerUtils.COMPLETED_APPLICATION),RMContainerEventType.FINISHED);
  assertEquals(Resources.none(),app1.getResourceUsage());
}
