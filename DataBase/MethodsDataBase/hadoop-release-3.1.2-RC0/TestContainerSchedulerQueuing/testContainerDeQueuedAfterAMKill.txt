/** 
 * 1. Submit a long running GUARANTEED container to hog all NM resources. 2. Submit 2 OPPORTUNISTIC containers, both of which will be queued. 3. Send Stop Container to one of the queued containers. 4. Ensure container is removed from the queue.
 * @throws Exception
 */
@Test public void testContainerDeQueuedAfterAMKill() throws Exception {
  containerManager.start();
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  containerLaunchContext.setCommands(Arrays.asList("sleep 100"));
  List<StartContainerRequest> list=new ArrayList<>();
  list.add(StartContainerRequest.newInstance(containerLaunchContext,createContainerToken(createContainerId(0),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(2048,1),context.getContainerTokenSecretManager(),null,ExecutionType.GUARANTEED)));
  StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  list=new ArrayList<>();
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(1),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(2),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  ContainerScheduler containerScheduler=containerManager.getContainerScheduler();
  int numTries=30;
  while ((containerScheduler.getNumQueuedContainers() < 2) && (numTries-- > 0)) {
    Thread.sleep(100);
  }
  Assert.assertEquals(2,containerScheduler.getNumQueuedContainers());
  containerManager.stopContainers(StopContainersRequest.newInstance(Arrays.asList(createContainerId(2))));
  numTries=30;
  while ((containerScheduler.getNumQueuedContainers() > 1) && (numTries-- > 0)) {
    Thread.sleep(100);
  }
  Assert.assertEquals(1,containerScheduler.getNumQueuedContainers());
}
