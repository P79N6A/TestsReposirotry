/** 
 * Submit four OPPORTUNISTIC containers that can run concurrently, and then two GUARANTEED that needs to kill Exactly two of the OPPORTUNISTIC for it to run. Make sure only 2 are killed.
 * @throws Exception
 */
@Test public void testKillOnlyRequiredOpportunisticContainers() throws Exception {
  containerManager.start();
  List<StartContainerRequest> list=new ArrayList<>();
  for (int i=0; i < 4; i++) {
    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(i),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  }
  StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  list=new ArrayList<>();
  for (int i=4; i < 6; i++) {
    list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(i),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null,ExecutionType.GUARANTEED)));
  }
  allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  BaseContainerManagerTest.waitForNMContainerState(containerManager,createContainerId(0),ContainerState.DONE,40);
  Thread.sleep(5000);
  int killedContainers=0;
  List<ContainerId> statList=new ArrayList<ContainerId>();
  for (int i=0; i < 6; i++) {
    statList.add(createContainerId(i));
  }
  GetContainerStatusesRequest statRequest=GetContainerStatusesRequest.newInstance(statList);
  List<ContainerStatus> containerStatuses=containerManager.getContainerStatuses(statRequest).getContainerStatuses();
  for (  ContainerStatus status : containerStatuses) {
    if (status.getDiagnostics().contains("Container Killed to make room for Guaranteed Container")) {
      killedContainers++;
    }
    System.out.println("\nStatus : [" + status + "]\n");
  }
  Assert.assertEquals(2,killedContainers);
}
