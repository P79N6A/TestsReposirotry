@Test public void testContainerUpdateExecTypeGuaranteedToOpportunistic() throws Exception {
  delayContainers=true;
  containerManager.start();
  ContainerId cId=createContainerId(0);
  StartContainerRequest scRequest=StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(cId,DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null));
  List<StartContainerRequest> list=new ArrayList<>();
  list.add(scRequest);
  StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  BaseContainerManagerTest.waitForNMContainerState(containerManager,cId,org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING);
  List<Token> updateTokens=new ArrayList<>();
  Token containerToken=createContainerToken(cId,1,DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC);
  updateTokens.add(containerToken);
  ContainerUpdateRequest updateRequest=ContainerUpdateRequest.newInstance(updateTokens);
  ContainerUpdateResponse updateResponse=containerManager.updateContainer(updateRequest);
  Assert.assertEquals(1,updateResponse.getSuccessfullyUpdatedContainers().size());
  Assert.assertTrue(updateResponse.getFailedRequests().isEmpty());
  GetContainerStatusesRequest statRequest=GetContainerStatusesRequest.newInstance(Collections.singletonList(cId));
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      try {
        List<ContainerStatus> containerStatuses=containerManager.getContainerStatuses(statRequest).getContainerStatuses();
        Assert.assertEquals(1,containerStatuses.size());
        ContainerStatus status=containerStatuses.get(0);
        Assert.assertEquals(org.apache.hadoop.yarn.api.records.ContainerState.RUNNING,status.getState());
        return status.getExecutionType() == ExecutionType.OPPORTUNISTIC;
      }
 catch (      Exception ex) {
        throw new RuntimeException(ex);
      }
    }
  }
,100,10000);
  List<ContainerStatus> containerStatuses=containerManager.getContainerStatuses(statRequest).getContainerStatuses();
  Assert.assertEquals(1,containerStatuses.size());
  for (  ContainerStatus status : containerStatuses) {
    Assert.assertEquals(org.apache.hadoop.yarn.api.records.ContainerState.RUNNING,status.getState());
    Assert.assertEquals(ExecutionType.OPPORTUNISTIC,status.getExecutionType());
  }
}
