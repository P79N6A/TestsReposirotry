/** 
 * Submit both a GUARANTEED and an OPPORTUNISTIC container, each of which requires more resources than available at the node, and make sure they are both queued.
 * @throws Exception
 */
@Test public void testQueueMultipleContainers() throws Exception {
  containerManager.start();
  List<StartContainerRequest> list=new ArrayList<>();
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(0),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(3072,1),context.getContainerTokenSecretManager(),null,ExecutionType.GUARANTEED)));
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(1),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(3072,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  Thread.sleep(5000);
  List<ContainerId> statList=new ArrayList<ContainerId>();
  for (int i=0; i < 2; i++) {
    statList.add(createContainerId(i));
  }
  GetContainerStatusesRequest statRequest=GetContainerStatusesRequest.newInstance(statList);
  List<ContainerStatus> containerStatuses=containerManager.getContainerStatuses(statRequest).getContainerStatuses();
  for (  ContainerStatus status : containerStatuses) {
    Assert.assertEquals(ContainerSubState.SCHEDULED,status.getContainerSubState());
  }
  ContainerScheduler containerScheduler=containerManager.getContainerScheduler();
  Assert.assertEquals(2,containerScheduler.getNumQueuedContainers());
  Assert.assertEquals(1,containerScheduler.getNumQueuedGuaranteedContainers());
  Assert.assertEquals(1,containerScheduler.getNumQueuedOpportunisticContainers());
}
