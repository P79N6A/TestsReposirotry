/** 
 * The corrupt block has to be removed when the number of valid replicas matches replication factor for the file. The above condition should hold true as long as there is one good replica. This test verifies that. The test strategy :  Bring up Cluster with 2 DataNodes Create a file of replication factor 2  Corrupt one replica of a block of the file  Verify that there is  one good replicas and 1 corrupt replica  (corrupt replica should not be removed since number of good  replicas (1) is less than replication factor (2)). Set the replication factor to 1  Verify that the corrupt replica is removed.  (corrupt replica should  be removed since number of good replicas (1) is equal to replication factor (1))
 */
@Test(timeout=20000) public void testWithReplicationFactorAsOne() throws Exception {
  Configuration conf=new HdfsConfiguration();
  conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,1000L);
  conf.set(DFSConfigKeys.DFS_NAMENODE_RECONSTRUCTION_PENDING_TIMEOUT_SEC_KEY,Integer.toString(2));
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
  FileSystem fs=cluster.getFileSystem();
  final FSNamesystem namesystem=cluster.getNamesystem();
  try {
    final Path fileName=new Path("/foo1");
    DFSTestUtil.createFile(fs,fileName,2,(short)2,0L);
    DFSTestUtil.waitReplication(fs,fileName,(short)2);
    ExtendedBlock block=DFSTestUtil.getFirstBlock(fs,fileName);
    corruptBlock(cluster,fs,fileName,0,block);
    DFSTestUtil.waitReplication(fs,fileName,(short)1);
    assertEquals(1,countReplicas(namesystem,block).liveReplicas());
    assertEquals(1,countReplicas(namesystem,block).corruptReplicas());
    namesystem.setReplication(fileName.toString(),(short)1);
    for (int i=0; i < 10; i++) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ignored) {
      }
      if (countReplicas(namesystem,block).corruptReplicas() == 0) {
        break;
      }
    }
    assertEquals(1,countReplicas(namesystem,block).liveReplicas());
    assertEquals(0,countReplicas(namesystem,block).corruptReplicas());
  }
  finally {
    cluster.shutdown();
  }
}
