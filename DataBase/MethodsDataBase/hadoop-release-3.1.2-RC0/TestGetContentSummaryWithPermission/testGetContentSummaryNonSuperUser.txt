/** 
 * Test getContentSummary for non-super, non-owner. Such users are restricted by permission of subdirectories. Namely if there is any subdirectory that does not have READ_EXECUTE access, AccessControlException will be thrown.
 * @throws Exception
 */
@Test public void testGetContentSummaryNonSuperUser() throws Exception {
  final Path foo=new Path("/fooNoneSuper");
  final Path bar=new Path(foo,"barNoneSuper");
  final Path baz=new Path(bar,"bazNoneSuper");
  final UserGroupInformation userUgi=UserGroupInformation.createUserForTesting("randomUser",new String[]{"randomGroup"});
  dfs.mkdirs(bar);
  DFSTestUtil.createFile(dfs,baz,10,REPLICATION,0L);
  FileStatus fileStatus;
  fileStatus=dfs.getFileStatus(foo);
  assertEquals((short)755,fileStatus.getPermission().toOctal());
  fileStatus=dfs.getFileStatus(bar);
  assertEquals((short)755,fileStatus.getPermission().toOctal());
  fileStatus=dfs.getFileStatus(baz);
  assertEquals((short)644,fileStatus.getPermission().toOctal());
  ContentSummary summary=userUgi.doAs((PrivilegedExceptionAction<ContentSummary>)() -> cluster.getNameNodeRpc().getContentSummary(foo.toString()));
  verifySummary(summary,2,1,10);
  dfs.setPermission(foo,new FsPermission((short)0));
  try {
    userUgi.doAs((PrivilegedExceptionAction<ContentSummary>)() -> cluster.getNameNodeRpc().getContentSummary(foo.toString()));
    fail("Should've fail due to access control exception.");
  }
 catch (  AccessControlException e) {
    assertTrue(e.getMessage().contains("Permission denied"));
  }
  dfs.setPermission(foo,new FsPermission(READ_EXECUTE,READ_EXECUTE,READ_EXECUTE));
  dfs.setPermission(bar,new FsPermission((short)0));
  try {
    userUgi.doAs((PrivilegedExceptionAction<ContentSummary>)() -> cluster.getNameNodeRpc().getContentSummary(foo.toString()));
    fail("Should've fail due to access control exception.");
  }
 catch (  AccessControlException e) {
    assertTrue(e.getMessage().contains("Permission denied"));
  }
  dfs.setPermission(bar,new FsPermission(READ_EXECUTE,READ_EXECUTE,READ_EXECUTE));
  summary=userUgi.doAs((PrivilegedExceptionAction<ContentSummary>)() -> cluster.getNameNodeRpc().getContentSummary(foo.toString()));
  verifySummary(summary,2,1,10);
  dfs.setPermission(baz,new FsPermission((short)0));
  summary=userUgi.doAs((PrivilegedExceptionAction<ContentSummary>)() -> cluster.getNameNodeRpc().getContentSummary(foo.toString()));
  verifySummary(summary,2,1,10);
}
