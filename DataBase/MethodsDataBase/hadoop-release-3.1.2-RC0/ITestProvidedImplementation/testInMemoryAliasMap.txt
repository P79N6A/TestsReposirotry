@Test public void testInMemoryAliasMap() throws Exception {
  conf.setClass(ImageWriter.Options.UGI_CLASS,FsUGIResolver.class,UGIResolver.class);
  conf.setClass(DFSConfigKeys.DFS_PROVIDED_ALIASMAP_CLASS,InMemoryLevelDBAliasMapClient.class,BlockAliasMap.class);
  conf.set(DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS,"localhost:32445");
  File tempDirectory=Files.createTempDirectory("in-memory-alias-map").toFile();
  File leveDBPath=new File(tempDirectory,bpid);
  leveDBPath.mkdirs();
  conf.set(DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_LEVELDB_DIR,tempDirectory.getAbsolutePath());
  conf.setBoolean(DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_ENABLED,true);
  conf.setInt(DFSConfigKeys.DFS_PROVIDED_ALIASMAP_LOAD_RETRIES,10);
  InMemoryLevelDBAliasMapServer levelDBAliasMapServer=new InMemoryLevelDBAliasMapServer(InMemoryAliasMap::init,bpid);
  levelDBAliasMapServer.setConf(conf);
  levelDBAliasMapServer.start();
  createImage(new FSTreeWalk(providedPath,conf),nnDirPath,FixedBlockResolver.class,"",InMemoryLevelDBAliasMapClient.class);
  levelDBAliasMapServer.close();
  startCluster(nnDirPath,2,new StorageType[]{StorageType.PROVIDED,StorageType.DISK},null,false);
  verifyFileSystemContents();
  FileUtils.deleteDirectory(tempDirectory);
}
