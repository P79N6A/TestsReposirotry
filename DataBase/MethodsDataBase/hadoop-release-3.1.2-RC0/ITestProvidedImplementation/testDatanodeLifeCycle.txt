@Test public void testDatanodeLifeCycle() throws Exception {
  createImage(new FSTreeWalk(providedPath,conf),nnDirPath,FixedBlockResolver.class);
  startCluster(nnDirPath,3,new StorageType[]{StorageType.PROVIDED,StorageType.DISK},null,false);
  int fileIndex=numFiles - 1;
  final BlockManager blockManager=cluster.getNamesystem().getBlockManager();
  final DatanodeManager dnm=blockManager.getDatanodeManager();
  verifyFileLocation(fileIndex,3);
  startDecommission(cluster.getNamesystem(),dnm,0);
  verifyFileLocation(fileIndex,3);
  cluster.triggerHeartbeats();
  verifyFileLocation(fileIndex,3);
  startMaintenance(cluster.getNamesystem(),dnm,1);
  verifyFileLocation(fileIndex,3);
  DataNode dn1=cluster.getDataNodes().get(0);
  DataNode dn2=cluster.getDataNodes().get(1);
  MiniDFSCluster.DataNodeProperties dn1Properties=cluster.stopDataNode(0);
  BlockManagerTestUtil.noticeDeadDatanode(cluster.getNameNode(),dn1.getDatanodeId().getXferAddr());
  verifyFileLocation(fileIndex,2);
  MiniDFSCluster.DataNodeProperties dn2Properties=cluster.stopDataNode(1);
  BlockManagerTestUtil.noticeDeadDatanode(cluster.getNameNode(),dn2.getDatanodeId().getXferAddr());
  verifyFileLocation(fileIndex,2);
  stopMaintenance(cluster.getNamesystem(),dnm,0);
  verifyFileLocation(fileIndex,1);
  cluster.restartDataNode(dn1Properties,true);
  cluster.waitActive();
  verifyFileLocation(fileIndex,2);
  cluster.restartDataNode(dn2Properties,true);
  cluster.waitActive();
  verifyFileLocation(fileIndex,3);
}
