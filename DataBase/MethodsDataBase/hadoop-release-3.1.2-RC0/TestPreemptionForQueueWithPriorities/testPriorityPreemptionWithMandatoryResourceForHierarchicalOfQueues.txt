@Test public void testPriorityPreemptionWithMandatoryResourceForHierarchicalOfQueues() throws Exception {
  String labelsConfig="=100:200,true";
  String nodesConfig="n1=";
  String queuesConfig="root(=[100:200 100:200 100:200 100:200]);" + "-a(=[50:100 100:200 20:40 60:100]){priority=1};" + "--a1(=[10:20 100:200 10:30 30:20]){priority=1};"+ "--a2(=[40:80 100:200 10:10 30:80]){priority=1};"+ "-b(=[50:100 100:200 80:160 40:100]){priority=1};"+ "--b1(=[20:40 100:200 20:40 20:70]){priority=2};"+ "--b2(=[30:60 100:200 60:120 20:30]){priority=1}";
  String appsConfig="a1\t(1,1:4,n1,,10,false);" + "a2\t(1,1:1,n1,,10,false);" + "b1\t(1,3:4,n1,,10,false);"+ "b2\t(1,20:40,n1,,3,false)";
  buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig,true);
  policy.editSchedule();
  verify(mDisp,times(3)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(1))));
  verify(mDisp,never()).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(2))));
  verify(mDisp,never()).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(3))));
  verify(mDisp,times(2)).handle(argThat(new TestProportionalCapacityPreemptionPolicy.IsPreemptionRequestFor(getAppAttemptId(4))));
}
