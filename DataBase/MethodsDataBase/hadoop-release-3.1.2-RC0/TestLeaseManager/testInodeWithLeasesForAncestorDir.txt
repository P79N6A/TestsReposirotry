/** 
 * Verify leased INode details across lease get and release from {@link LeaseManager#getINodeIdWithLeases()} and{@link LeaseManager#getINodeWithLeases(INodeDirectory)}.
 */
@Test(timeout=60000) public void testInodeWithLeasesForAncestorDir() throws Exception {
  FSNamesystem fsNamesystem=makeMockFsNameSystem();
  FSDirectory fsDirectory=fsNamesystem.getFSDirectory();
  LeaseManager lm=new LeaseManager(fsNamesystem);
  final PermissionStatus perm=PermissionStatus.createImmutable("user","group",FsPermission.createImmutable((short)0755));
  INodeDirectory rootInodeDirectory=new INodeDirectory(HdfsConstants.GRANDFATHER_INODE_ID,DFSUtil.string2Bytes(""),perm,0L);
  when(fsDirectory.getRoot()).thenReturn(rootInodeDirectory);
  AtomicInteger inodeIds=new AtomicInteger((int)(HdfsConstants.GRANDFATHER_INODE_ID + 1234));
  String[] pathTree=new String[]{"/root.log","/ENG/a/a1.log","/ENG/a/b/b1.log","/ENG/a/b/c/c1.log","/ENG/a/b/c/c2.log","/OPS/m/m1.log","/OPS/m/n/n1.log","/OPS/m/n/n2.log"};
  Map<String,INode> pathINodeMap=createINodeTree(rootInodeDirectory,pathTree,inodeIds);
  assertEquals(0,lm.getINodeIdWithLeases().size());
  for (  Entry<String,INode> entry : pathINodeMap.entrySet()) {
    long iNodeId=entry.getValue().getId();
    when(fsDirectory.getInode(iNodeId)).thenReturn(entry.getValue());
    if (entry.getKey().contains("log")) {
      lm.addLease("holder_" + iNodeId,iNodeId);
    }
  }
  assertEquals(pathTree.length,lm.getINodeIdWithLeases().size());
  assertEquals(pathTree.length,lm.getINodeWithLeases().size());
  assertEquals(pathTree.length,lm.getINodeWithLeases(rootInodeDirectory).size());
  lm.removeAllLeases();
  Set<String> filesLeased=new HashSet<>(Arrays.asList("root.log","a1.log","c1.log","n2.log"));
  for (  String fileName : filesLeased) {
    lm.addLease("holder",pathINodeMap.get(fileName).getId());
  }
  assertEquals(filesLeased.size(),lm.getINodeIdWithLeases().size());
  assertEquals(filesLeased.size(),lm.getINodeWithLeases().size());
  Set<INodesInPath> iNodeWithLeases=lm.getINodeWithLeases();
  for (  INodesInPath iNodesInPath : iNodeWithLeases) {
    String leasedFileName=DFSUtil.bytes2String(iNodesInPath.getLastLocalName());
    assertTrue(filesLeased.contains(leasedFileName));
  }
  assertEquals(filesLeased.size(),lm.getINodeWithLeases(rootInodeDirectory).size());
  assertEquals(filesLeased.size() - 2,lm.getINodeWithLeases(pathINodeMap.get("ENG").asDirectory()).size());
  assertEquals(filesLeased.size() - 2,lm.getINodeWithLeases(pathINodeMap.get("a").asDirectory()).size());
  assertEquals(filesLeased.size() - 3,lm.getINodeWithLeases(pathINodeMap.get("c").asDirectory()).size());
  assertEquals(filesLeased.size() - 3,lm.getINodeWithLeases(pathINodeMap.get("OPS").asDirectory()).size());
  assertEquals(filesLeased.size() - 3,lm.getINodeWithLeases(pathINodeMap.get("n").asDirectory()).size());
  lm.removeLease(pathINodeMap.get("n2.log").getId());
  assertEquals(filesLeased.size() - 1,lm.getINodeWithLeases(rootInodeDirectory).size());
  assertEquals(filesLeased.size() - 4,lm.getINodeWithLeases(pathINodeMap.get("n").asDirectory()).size());
  lm.removeAllLeases();
  filesLeased.clear();
  assertEquals(filesLeased.size(),lm.getINodeWithLeases(rootInodeDirectory).size());
}
