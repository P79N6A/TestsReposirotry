/** 
 * Test delete scenario where sticky bit is set and the owner of parent directory can delete child files/folders which he does not own. This is according to the sticky bit behaviour specified in hdfs permission guide which is as follows - The sticky bit can be set on directories, preventing anyone except the superuser, directory owner or file owner from deleting or moving the files within the directory
 * @throws Throwable
 */
@Test public void testDeleteSucceedsForParentDirectoryOwnerUserWithStickybit() throws Throwable {
  Path parentDir=new Path("/testDeleteSucceedsForParentDirectoryOwnerUserWithStickybit");
  Path testFilePath=new Path(parentDir,"test.dat");
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner("/testDeleteSucceedsForParentDirectoryOwnerUserWithStickybit*",WRITE,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    fs.mkdirs(parentDir);
    ContractTestUtils.assertPathExists(fs,"folder was not created",parentDir);
    UserGroupInformation dummyUser=UserGroupInformation.createUserForTesting("user1",new String[]{"dummygroup"});
    dummyUser.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        authorizer.addAuthRule(parentDir.toString(),WRITE,getCurrentUserShortName(),true);
        fs.create(testFilePath);
        ContractTestUtils.assertPathExists(fs,"file was not created",testFilePath);
        fs.setPermission(parentDir,new FsPermission(STICKYBIT_PERMISSION_CONSTANT));
        return null;
      }
    }
);
    assertTrue(fs.delete(parentDir,true));
    ContractTestUtils.assertPathDoesNotExist(fs,"parentDir is not deleted!",parentDir);
    ContractTestUtils.assertPathDoesNotExist(fs,"file is not deleted!",testFilePath);
  }
  finally {
    allowRecursiveDelete(fs,parentDir.toString());
    fs.delete(parentDir,true);
  }
}
