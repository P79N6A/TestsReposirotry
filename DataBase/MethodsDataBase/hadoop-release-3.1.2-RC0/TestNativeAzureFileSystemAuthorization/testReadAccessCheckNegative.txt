/** 
 * Negative test to verify read access check.
 * @throws Throwable
 */
@Test public void testReadAccessCheckNegative() throws Throwable {
  Path parentDir=new Path("/testReadAccessCheckNegative");
  Path testPath=new Path(parentDir,"test.dat");
  setExpectedFailureMessage("read",testPath);
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner(testPath.toString(),READ,false);
  fs.updateWasbAuthorizer(authorizer);
  FSDataInputStream inputStream=null;
  FSDataOutputStream fso=null;
  try {
    fso=fs.create(testPath);
    String data="Hello World";
    fso.writeBytes(data);
    fso.close();
    inputStream=fs.open(testPath);
    ContractTestUtils.verifyRead(inputStream,data.getBytes(),0,data.length());
  }
  finally {
    if (fso != null) {
      fso.close();
    }
    if (inputStream != null) {
      inputStream.close();
    }
    allowRecursiveDelete(fs,parentDir.toString());
    fs.delete(parentDir,true);
  }
}
