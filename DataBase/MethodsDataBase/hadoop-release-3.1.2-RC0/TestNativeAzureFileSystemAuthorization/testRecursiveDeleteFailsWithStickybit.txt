/** 
 * Test to verify delete fails for child files and folders when non-owner user performs delete and stickybit is set on parent
 * @throws Throwable
 */
@Test public void testRecursiveDeleteFailsWithStickybit() throws Throwable {
  Path parentDir=new Path("/testRecursiveDeleteFailsWithStickybit");
  Path childDir=new Path(parentDir,"child");
  Path testFilePath=new Path(childDir,"test.dat");
  Path testFolderPath=new Path(childDir,"testDirectory");
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner("/testRecursiveDeleteFailsWithStickybit*",WRITE,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    fs.create(testFilePath);
    ContractTestUtils.assertPathExists(fs,"file was not created",testFilePath);
    fs.mkdirs(testFolderPath);
    ContractTestUtils.assertPathExists(fs,"folder was not created",testFolderPath);
    fs.setPermission(new Path(parentDir,"child"),new FsPermission(STICKYBIT_PERMISSION_CONSTANT));
    UserGroupInformation dummyUser=UserGroupInformation.createUserForTesting("dummyUser",new String[]{"dummygroup"});
    dummyUser.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        authorizer.addAuthRule("/",WRITE,getCurrentUserShortName(),true);
        authorizer.addAuthRule("/testRecursiveDeleteFailsWithStickybit*",WRITE,getCurrentUserShortName(),true);
        assertFalse(fs.delete(parentDir,true));
        return null;
      }
    }
);
    ContractTestUtils.assertPathExists(fs,"parentDir is deleted!",parentDir);
    ContractTestUtils.assertPathExists(fs,"file is deleted!",testFilePath);
    ContractTestUtils.assertPathExists(fs,"folder is deleted!",testFolderPath);
  }
  finally {
    allowRecursiveDelete(fs,parentDir.toString());
    fs.delete(parentDir,true);
  }
}
