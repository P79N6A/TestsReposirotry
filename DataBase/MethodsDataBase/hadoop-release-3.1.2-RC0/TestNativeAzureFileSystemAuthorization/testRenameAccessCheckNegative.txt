/** 
 * Negative test to verify rename access check.
 * @throws Throwable
 */
@Test public void testRenameAccessCheckNegative() throws Throwable {
  Path parentDir=new Path("/testRenameAccessCheckNegative");
  Path srcPath=new Path(parentDir,"test1.dat");
  Path dstPath=new Path(parentDir,"test2.dat");
  setExpectedFailureMessage("rename",srcPath);
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner(parentDir.toString(),WRITE,false);
  fs.updateWasbAuthorizer(authorizer);
  try {
    fs.create(srcPath);
    ContractTestUtils.assertPathExists(fs,"sourcePath does not exist",srcPath);
    fs.rename(srcPath,dstPath);
    ContractTestUtils.assertPathExists(fs,"destPath does not exist",dstPath);
  }
  finally {
    ContractTestUtils.assertPathExists(fs,"sourcePath does not exist after rename failure!",srcPath);
    allowRecursiveDelete(fs,parentDir.toString());
    fs.delete(parentDir,true);
  }
}
