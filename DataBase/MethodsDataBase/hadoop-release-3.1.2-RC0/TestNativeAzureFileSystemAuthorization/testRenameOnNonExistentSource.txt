/** 
 * Test to verify rename fails and returns false when the source to be renamed does not exist.
 */
@Test public void testRenameOnNonExistentSource() throws Throwable {
  Path parentSrcDir=new Path("/testRenameOnNonExistentSourceFolderSrc");
  Path srcPath=new Path(parentSrcDir,"test1.dat");
  Path parentDstDir=new Path("/testRenameOnNonExistentSourceFolderDst");
  Path dstPath=new Path(parentDstDir,"test2.dat");
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner(parentSrcDir.toString(),WRITE,true);
  authorizer.addAuthRuleForOwner(parentDstDir.toString(),WRITE,true);
  authorizer.addAuthRuleForOwner("/",READ,true);
  authorizer.addAuthRuleForOwner(parentDstDir.toString(),READ,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    fs.mkdirs(parentSrcDir);
    assertIsDirectory(fs,parentSrcDir);
    fs.mkdirs(parentDstDir);
    assertRenameOutcome(fs,srcPath,dstPath,false);
    assertPathDoesNotExist(fs,"destPath exists!",dstPath);
  }
  finally {
    recursiveDelete(parentSrcDir);
    recursiveDelete(parentDstDir);
  }
}
