/** 
 * Negative test case for owner does not match current user
 */
@Test public void testOwnerPermissionNegative() throws Throwable {
  Path parentDir=new Path("/testOwnerPermissionNegative");
  Path childDir=new Path(parentDir,"childDir");
  setExpectedFailureMessage("mkdirs",childDir);
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner(parentDir.toString(),WRITE,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    fs.mkdirs(parentDir);
    UserGroupInformation ugiSuperUser=UserGroupInformation.createUserForTesting("testuser",new String[]{});
    ugiSuperUser.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        fs.mkdirs(childDir);
        return null;
      }
    }
);
  }
  finally {
    allowRecursiveDelete(fs,parentDir.toString());
    fs.delete(parentDir,true);
  }
}
