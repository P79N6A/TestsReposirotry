/** 
 * Test to check rename fails when sticky bit is set on parent of source directory and the user is not owner of parent or the source directory.
 */
@Test public void testRenameWithStickyBitNegative() throws Throwable {
  final Path parentSrcDir=new Path("/testRenameWithStickyBitNegativeSrc");
  final Path srcPath=new Path(parentSrcDir,"test1.dat");
  final Path parentDstDir=new Path("/testRenameWithStickyBitNegativeDst");
  final Path dstPath=new Path(parentDstDir,"test2.dat");
  expectedEx.expect(WasbAuthorizationException.class);
  expectedEx.expectMessage(String.format("Rename operation for %s is not permitted." + " Details : Stickybit check failed.",srcPath.toString()));
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner(parentSrcDir.toString(),WRITE,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    touch(fs,srcPath);
    assertPathExists(fs,"sourcePath does not exist",srcPath);
    fs.mkdirs(parentDstDir);
    assertIsDirectory(fs,parentDstDir);
    fs.setPermission(parentSrcDir,new FsPermission(STICKYBIT_PERMISSION_CONSTANT));
    UserGroupInformation dummyUser=UserGroupInformation.createUserForTesting("dummyUser",new String[]{"dummygroup"});
    dummyUser.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        authorizer.addAuthRule(parentSrcDir.toString(),WRITE,getCurrentUserShortName(),true);
        authorizer.addAuthRule(parentDstDir.toString(),WRITE,getCurrentUserShortName(),true);
        try {
          fs.rename(srcPath,dstPath);
        }
 catch (        WasbAuthorizationException wae) {
          assertPathExists(fs,"sourcePath does not exist",srcPath);
          assertPathDoesNotExist(fs,"destPath exists",dstPath);
          throw wae;
        }
        return null;
      }
    }
);
  }
  finally {
    recursiveDelete(parentSrcDir);
    recursiveDelete(parentDstDir);
  }
}
