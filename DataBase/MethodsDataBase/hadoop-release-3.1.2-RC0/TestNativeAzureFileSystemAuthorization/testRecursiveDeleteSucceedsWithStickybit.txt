/** 
 * Positive test to verify file and folder delete succeeds with stickybit when the owner of the files deletes the file.
 * @throws Throwable
 */
@Test public void testRecursiveDeleteSucceedsWithStickybit() throws Throwable {
  Path parentDir=new Path("/testRecursiveDeleteSucceedsWithStickybit");
  Path childDir=new Path(parentDir,"child");
  Path testFilePath=new Path(childDir,"test.dat");
  Path testFolderPath=new Path(childDir,"testDirectory");
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner("/testRecursiveDeleteSucceedsWithStickybit*",WRITE,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    fs.create(testFilePath);
    ContractTestUtils.assertPathExists(fs,"file was not created",testFilePath);
    fs.mkdirs(testFolderPath);
    ContractTestUtils.assertPathExists(fs,"folder was not created",testFolderPath);
    fs.setPermission(new Path(parentDir,"child"),new FsPermission(STICKYBIT_PERMISSION_CONSTANT));
    assertTrue(fs.delete(parentDir,true));
    ContractTestUtils.assertPathDoesNotExist(fs,"parentDir exists after deletion!",parentDir);
  }
  finally {
    allowRecursiveDelete(fs,parentDir.toString());
    fs.delete(parentDir,true);
  }
}
