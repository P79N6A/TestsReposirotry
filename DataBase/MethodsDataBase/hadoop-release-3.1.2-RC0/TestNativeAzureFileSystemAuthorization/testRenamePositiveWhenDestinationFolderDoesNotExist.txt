/** 
 * Positive test to check rename succeeds for hierarchy of files and folders under a src directory and when the destination folder does not exist.
 */
@Test public void testRenamePositiveWhenDestinationFolderDoesNotExist() throws Throwable {
  Path srcParentDir=new Path("/testRenamePositiveWhenDestinationFolderDoesNotExist");
  Path srcDir=new Path(srcParentDir,"srcDir");
  Path srcFilePath=new Path(srcDir,"test1.dat");
  Path srcSubDirPath=new Path(srcDir,"testFolder");
  Path srcSubDirFilePath=new Path(srcSubDirPath,"test2.dat");
  Path dstDir=new Path(srcParentDir,"dstDir");
  Path dstFilePath=new Path(dstDir,"test1.dat");
  Path dstSubDirPath=new Path(dstDir,"testFolder");
  Path dstSubDirFilePath=new Path(dstSubDirPath,"test2.dat");
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner(srcParentDir.toString(),WRITE,true);
  authorizer.addAuthRuleForOwner(srcDir.toString(),WRITE,true);
  authorizer.addAuthRuleForOwner(srcSubDirPath.toString(),WRITE,true);
  authorizer.addAuthRuleForOwner("/",READ,true);
  authorizer.addAuthRuleForOwner(srcParentDir.toString(),READ,true);
  authorizer.addAuthRuleForOwner(srcDir.toString(),READ,true);
  authorizer.addAuthRuleForOwner(srcSubDirPath.toString(),READ,true);
  authorizer.addAuthRuleForOwner(dstDir.toString(),READ,true);
  authorizer.addAuthRuleForOwner(dstSubDirPath.toString(),READ,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    touch(fs,srcFilePath);
    assertPathExists(fs,"srcFilePath does not exist",srcFilePath);
    fs.mkdirs(srcSubDirPath);
    assertIsDirectory(fs,srcSubDirPath);
    touch(fs,srcSubDirFilePath);
    assertPathExists(fs,"srcSubDirFilePath does not exist",srcSubDirFilePath);
    assertRenameOutcome(fs,srcDir,dstDir,true);
    assertPathDoesNotExist(fs,"srcDir exists",srcDir);
    assertPathDoesNotExist(fs,"srcFilePath exists",srcFilePath);
    assertPathDoesNotExist(fs,"srcSubDirPath exists",srcSubDirPath);
    assertPathDoesNotExist(fs,"srcSubDirFilePath exists",srcSubDirFilePath);
    assertPathExists(fs,"destPath does not exist",dstDir);
    assertPathExists(fs,"dstFilePath does not exist",dstFilePath);
    assertPathExists(fs,"dstSubDirPath does not exist",dstSubDirPath);
    assertPathExists(fs,"dstSubDirFilePath does not exist",dstSubDirFilePath);
  }
  finally {
    recursiveDelete(srcParentDir);
  }
}
