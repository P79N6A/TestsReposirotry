@Test(timeout=20000) public void testAutoCreateLeafQueueCreation() throws Exception {
  try {
    submitApp(mockRM,cs.getQueue(PARENT_QUEUE),USER0,USER0,1,1);
    List<ApplicationAttemptId> appsInC=cs.getAppsInQueue(PARENT_QUEUE);
    assertEquals(1,appsInC.size());
    assertNotNull(cs.getQueue(USER0));
    AutoCreatedLeafQueue autoCreatedLeafQueue=(AutoCreatedLeafQueue)cs.getQueue(USER0);
    ManagedParentQueue parentQueue=(ManagedParentQueue)cs.getQueue(PARENT_QUEUE);
    assertEquals(parentQueue,autoCreatedLeafQueue.getParent());
    Map<String,Float> expectedChildQueueAbsCapacity=populateExpectedAbsCapacityByLabelForParentQueue(1);
    validateInitialQueueEntitlement(parentQueue,USER0,expectedChildQueueAbsCapacity,accessibleNodeLabelsOnC);
    validateUserAndAppLimits(autoCreatedLeafQueue,1000,1000);
    assertTrue(autoCreatedLeafQueue.getOrderingPolicy() instanceof FairOrderingPolicy);
    setupGroupQueueMappings("d",cs.getConfiguration(),"%user");
    cs.reinitialize(cs.getConfiguration(),mockRM.getRMContext());
    submitApp(mockRM,cs.getQueue("d"),TEST_GROUPUSER,TEST_GROUPUSER,1,1);
    autoCreatedLeafQueue=(AutoCreatedLeafQueue)cs.getQueue(TEST_GROUPUSER);
    parentQueue=(ManagedParentQueue)cs.getQueue("d");
    assertEquals(parentQueue,autoCreatedLeafQueue.getParent());
    expectedChildQueueAbsCapacity=new HashMap<String,Float>(){
{
        put(NO_LABEL,0.02f);
      }
    }
;
    validateInitialQueueEntitlement(parentQueue,TEST_GROUPUSER,expectedChildQueueAbsCapacity,new HashSet<String>(){
{
        add(NO_LABEL);
      }
    }
);
  }
  finally {
    cleanupQueue(USER0);
    cleanupQueue(TEST_GROUPUSER);
  }
}
