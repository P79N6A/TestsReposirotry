@Test public void testAutoCreatedQueueActivationDeactivation() throws Exception {
  try {
    CSQueue parentQueue=cs.getQueue(PARENT_QUEUE);
    ApplicationId user1AppId=submitApp(mockRM,parentQueue,USER1,USER1,1,1);
    Map<String,Float> expectedAbsChildQueueCapacity=populateExpectedAbsCapacityByLabelForParentQueue(1);
    validateInitialQueueEntitlement(parentQueue,USER1,expectedAbsChildQueueCapacity,accessibleNodeLabelsOnC);
    ApplicationId user2AppId=submitApp(mockRM,parentQueue,USER2,USER2,2,1);
    expectedAbsChildQueueCapacity=populateExpectedAbsCapacityByLabelForParentQueue(2);
    validateInitialQueueEntitlement(parentQueue,USER2,expectedAbsChildQueueCapacity,accessibleNodeLabelsOnC);
    submitApp(mockRM,parentQueue,USER1,USER1,3,2);
    GuaranteedOrZeroCapacityOverTimePolicy autoCreatedQueueManagementPolicy=(GuaranteedOrZeroCapacityOverTimePolicy)((ManagedParentQueue)parentQueue).getAutoCreatedQueueManagementPolicy();
    for (    String nodeLabel : accessibleNodeLabelsOnC) {
      assertEquals(expectedAbsChildQueueCapacity.get(nodeLabel),autoCreatedQueueManagementPolicy.getAbsoluteActivatedChildQueueCapacity(nodeLabel),EPSILON);
    }
    submitApp(mockRM,parentQueue,USER3,USER3,4,1);
    final CSQueue user3LeafQueue=cs.getQueue(USER3);
    validateCapacities((AutoCreatedLeafQueue)user3LeafQueue,0.0f,0.0f,1.0f,1.0f);
    validateCapacitiesByLabel((ManagedParentQueue)parentQueue,(AutoCreatedLeafQueue)user3LeafQueue,NODEL_LABEL_GPU);
    assertEquals(0.2f,autoCreatedQueueManagementPolicy.getAbsoluteActivatedChildQueueCapacity(NO_LABEL),EPSILON);
    assertEquals(0.9f,autoCreatedQueueManagementPolicy.getAbsoluteActivatedChildQueueCapacity(NODEL_LABEL_GPU),EPSILON);
    mockRM.launchAM(mockRM.getRMContext().getRMApps().get(user1AppId),mockRM,nm1);
    cs.killAllAppsInQueue(USER2);
    mockRM.waitForState(user2AppId,RMAppState.KILLED);
    List<QueueManagementChange> queueManagementChanges=autoCreatedQueueManagementPolicy.computeQueueManagementChanges();
    ManagedParentQueue managedParentQueue=(ManagedParentQueue)parentQueue;
    managedParentQueue.validateAndApplyQueueManagementChanges(queueManagementChanges);
    validateDeactivatedQueueEntitlement(parentQueue,USER2,expectedAbsChildQueueCapacity,queueManagementChanges);
    Set<String> expectedNodeLabelsUpdated=new HashSet<>();
    expectedNodeLabelsUpdated.add(NO_LABEL);
    expectedNodeLabelsUpdated.add(NODEL_LABEL_SSD);
    validateActivatedQueueEntitlement(parentQueue,USER3,expectedAbsChildQueueCapacity,queueManagementChanges,expectedNodeLabelsUpdated);
  }
  finally {
    cleanupQueue(USER1);
    cleanupQueue(USER2);
    cleanupQueue(USER3);
  }
}
