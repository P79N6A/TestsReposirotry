@Test public void testClusterResourceUpdationOnAutoCreatedLeafQueues() throws Exception {
  MockRM newMockRM=setupSchedulerInstance();
  try {
    CapacityScheduler newCS=(CapacityScheduler)newMockRM.getResourceScheduler();
    CSQueue parentQueue=newCS.getQueue(PARENT_QUEUE);
    submitApp(newMockRM,parentQueue,USER1,USER1,1,1);
    Map<String,Float> expectedAbsChildQueueCapacity=populateExpectedAbsCapacityByLabelForParentQueue(1);
    validateInitialQueueEntitlement(newCS,parentQueue,USER1,expectedAbsChildQueueCapacity,accessibleNodeLabelsOnC);
    ApplicationId user2AppId=submitApp(newMockRM,parentQueue,USER2,USER2,2,1);
    expectedAbsChildQueueCapacity=populateExpectedAbsCapacityByLabelForParentQueue(2);
    validateInitialQueueEntitlement(newCS,parentQueue,USER2,expectedAbsChildQueueCapacity,accessibleNodeLabelsOnC);
    GuaranteedOrZeroCapacityOverTimePolicy autoCreatedQueueManagementPolicy=(GuaranteedOrZeroCapacityOverTimePolicy)((ManagedParentQueue)parentQueue).getAutoCreatedQueueManagementPolicy();
    assertEquals(autoCreatedQueueManagementPolicy.getAbsoluteActivatedChildQueueCapacity(NO_LABEL),0.2f,EPSILON);
    submitApp(newMockRM,parentQueue,USER3,USER3,3,1);
    final CSQueue user3LeafQueue=newCS.getQueue(USER3);
    validateCapacities((AutoCreatedLeafQueue)user3LeafQueue,0.0f,0.0f,1.0f,1.0f);
    assertEquals(autoCreatedQueueManagementPolicy.getAbsoluteActivatedChildQueueCapacity(NO_LABEL),0.2f,EPSILON);
    newMockRM.registerNode("127.0.0.3:1234",125 * GB,20);
    Resource MAX_RES=Resources.addTo(TEMPLATE_MAX_RES,Resources.createResource(125 * GB,20));
    Resource MIN_RES=Resources.createResource(14438,6);
    Assert.assertEquals("Effective Min resource for USER3 is not correct",Resources.none(),user3LeafQueue.getQueueResourceQuotas().getEffectiveMinResource());
    Assert.assertEquals("Effective Max resource for USER3 is not correct",MAX_RES,user3LeafQueue.getQueueResourceQuotas().getEffectiveMaxResource());
    CSQueue user1LeafQueue=newCS.getQueue(USER1);
    CSQueue user2LeafQueue=newCS.getQueue(USER2);
    Assert.assertEquals("Effective Min resource for USER2 is not correct",MIN_RES,user1LeafQueue.getQueueResourceQuotas().getEffectiveMinResource());
    Assert.assertEquals("Effective Max resource for USER2 is not correct",MAX_RES,user1LeafQueue.getQueueResourceQuotas().getEffectiveMaxResource());
    Assert.assertEquals("Effective Min resource for USER1 is not correct",MIN_RES,user2LeafQueue.getQueueResourceQuotas().getEffectiveMinResource());
    Assert.assertEquals("Effective Max resource for USER1 is not correct",MAX_RES,user2LeafQueue.getQueueResourceQuotas().getEffectiveMaxResource());
    newMockRM.unRegisterNode(nm3);
    Resource MIN_RES_UPDATED=Resources.createResource(12800,2);
    Resource MAX_RES_UPDATED=Resources.createResource(128000,20);
    Assert.assertEquals("Effective Min resource for USER2 is not correct",MIN_RES_UPDATED,user1LeafQueue.getQueueResourceQuotas().getEffectiveMinResource());
    Assert.assertEquals("Effective Max resource for USER2 is not correct",MAX_RES_UPDATED,user2LeafQueue.getQueueResourceQuotas().getEffectiveMaxResource());
  }
  finally {
    cleanupQueue(USER1);
    cleanupQueue(USER2);
    cleanupQueue(USER3);
    if (newMockRM != null) {
      ((CapacityScheduler)newMockRM.getResourceScheduler()).stop();
      newMockRM.stop();
    }
  }
}
