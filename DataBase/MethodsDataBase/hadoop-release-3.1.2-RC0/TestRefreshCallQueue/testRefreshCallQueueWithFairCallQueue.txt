@Test public void testRefreshCallQueueWithFairCallQueue() throws Exception {
  setUp(FairCallQueue.class);
  boolean oldValue=DefaultMetricsSystem.inMiniClusterMode();
  DefaultMetricsSystem.setMiniClusterMode(false);
  int serviceHandlerCount=config.getInt(DFSConfigKeys.DFS_NAMENODE_SERVICE_HANDLER_COUNT_KEY,DFSConfigKeys.DFS_NAMENODE_SERVICE_HANDLER_COUNT_DEFAULT);
  NameNodeRpcServer rpcServer=(NameNodeRpcServer)cluster.getNameNodeRpc();
  assertEquals(CommonConfigurationKeys.IPC_SERVER_HANDLER_QUEUE_SIZE_DEFAULT * serviceHandlerCount,rpcServer.getClientRpcServer().getMaxQueueSize());
  config.setInt(CommonConfigurationKeys.IPC_SERVER_HANDLER_QUEUE_SIZE_KEY,150);
  try {
    rpcServer.getClientRpcServer().refreshCallQueue(config);
  }
 catch (  Exception e) {
    Throwable cause=e.getCause();
    if ((cause instanceof MetricsException) && cause.getMessage().contains("Metrics source DecayRpcSchedulerMetrics2.ipc." + nnPort + " already exists!")) {
      fail("DecayRpcScheduler metrics should be unregistered before" + " reregister");
    }
    throw e;
  }
 finally {
    DefaultMetricsSystem.setMiniClusterMode(oldValue);
  }
  assertEquals(150 * serviceHandlerCount,rpcServer.getClientRpcServer().getMaxQueueSize());
}
