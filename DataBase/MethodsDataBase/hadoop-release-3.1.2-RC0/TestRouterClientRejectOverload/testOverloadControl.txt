@Test public void testOverloadControl() throws Exception {
  setupCluster(true);
  List<RouterContext> routers=cluster.getRouters();
  FederationRPCMetrics rpcMetrics0=routers.get(0).getRouter().getRpcServer().getRPCMetrics();
  FederationRPCMetrics rpcMetrics1=routers.get(1).getRouter().getRpcServer().getRPCMetrics();
  testOverloaded(0);
  assertEquals(0,rpcMetrics0.getProxyOpFailureClientOverloaded());
  assertEquals(0,rpcMetrics1.getProxyOpFailureClientOverloaded());
  MiniDFSCluster dfsCluster=cluster.getCluster();
  NameNode nn0=dfsCluster.getNameNode(0);
  simulateSlowNamenode(nn0,1);
  testOverloaded(4,6);
  assertTrue(rpcMetrics0.getProxyOpFailureClientOverloaded() + rpcMetrics1.getProxyOpFailureClientOverloaded() >= 4);
  Configuration clientConf=cluster.getRouterClientConf();
  long iniProxyOps0=rpcMetrics0.getProxyOps();
  long iniProxyOps1=rpcMetrics1.getProxyOps();
  testOverloaded(0,0,new URI("hdfs://fed/"),clientConf,10);
  long proxyOps0=rpcMetrics0.getProxyOps() - iniProxyOps0;
  long proxyOps1=rpcMetrics1.getProxyOps() - iniProxyOps1;
  assertEquals(2 * 10,proxyOps0 + proxyOps1);
  assertTrue(proxyOps0 + " operations: not distributed",proxyOps0 >= 8);
  assertTrue(proxyOps1 + " operations: not distributed",proxyOps1 >= 8);
}
