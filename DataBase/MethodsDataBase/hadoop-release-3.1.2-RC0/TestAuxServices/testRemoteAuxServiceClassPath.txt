@SuppressWarnings("resource") @Test public void testRemoteAuxServiceClassPath() throws Exception {
  Configuration conf=new YarnConfiguration();
  FileSystem fs=FileSystem.get(conf);
  conf.setStrings(YarnConfiguration.NM_AUX_SERVICES,new String[]{"ServiceC"});
  conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT,"ServiceC"),ServiceC.class,Service.class);
  Context mockContext2=mock(Context.class);
  LocalDirsHandlerService mockDirsHandler=mock(LocalDirsHandlerService.class);
  String root="target/LocalDir";
  Path rootAuxServiceDirPath=new Path(root,"nmAuxService");
  when(mockDirsHandler.getLocalPathForWrite(anyString())).thenReturn(rootAuxServiceDirPath);
  when(mockContext2.getLocalDirsHandler()).thenReturn(mockDirsHandler);
  File rootDir=GenericTestUtils.getTestDir(getClass().getSimpleName());
  if (!rootDir.exists()) {
    rootDir.mkdirs();
  }
  AuxServices aux=null;
  File testJar=null;
  try {
    try {
      testJar=JarFinder.makeClassLoaderTestJar(this.getClass(),rootDir,"test-runjar.jar",2048,ServiceC.class.getName());
      Set<PosixFilePermission> perms=new HashSet<PosixFilePermission>();
      perms.add(PosixFilePermission.OWNER_READ);
      perms.add(PosixFilePermission.OWNER_WRITE);
      perms.add(PosixFilePermission.GROUP_WRITE);
      Files.setPosixFilePermissions(Paths.get(testJar.getAbsolutePath()),perms);
      conf.set(String.format(YarnConfiguration.NM_AUX_SERVICE_REMOTE_CLASSPATH,"ServiceC"),testJar.getAbsolutePath());
      aux=new AuxServices(MOCK_AUX_PATH_HANDLER,mockContext2,MOCK_DEL_SERVICE);
      aux.init(conf);
      Assert.fail("The permission of the jar is wrong." + "Should throw out exception.");
    }
 catch (    YarnRuntimeException ex) {
      Assert.assertTrue(ex.getMessage(),ex.getMessage().contains("The remote jarfile should not be writable by group or others"));
    }
    Files.delete(Paths.get(testJar.getAbsolutePath()));
    testJar=JarFinder.makeClassLoaderTestJar(this.getClass(),rootDir,"test-runjar.jar",2048,ServiceC.class.getName());
    conf.set(String.format(YarnConfiguration.NM_AUX_SERVICE_REMOTE_CLASSPATH,"ServiceC"),testJar.getAbsolutePath());
    aux=new AuxServices(MOCK_AUX_PATH_HANDLER,mockContext2,MOCK_DEL_SERVICE);
    aux.init(conf);
    aux.start();
    Map<String,ByteBuffer> meta=aux.getMetaData();
    String auxName="";
    Assert.assertTrue(meta.size() == 1);
    for (    Entry<String,ByteBuffer> i : meta.entrySet()) {
      auxName=i.getKey();
    }
    Assert.assertEquals("ServiceC",auxName);
    aux.serviceStop();
    FileStatus[] status=fs.listStatus(rootAuxServiceDirPath);
    Assert.assertTrue(status.length == 1);
    aux=new AuxServices(MOCK_AUX_PATH_HANDLER,mockContext2,MOCK_DEL_SERVICE);
    aux.init(conf);
    aux.start();
    meta=aux.getMetaData();
    Assert.assertTrue(meta.size() == 1);
    for (    Entry<String,ByteBuffer> i : meta.entrySet()) {
      auxName=i.getKey();
    }
    Assert.assertEquals("ServiceC",auxName);
    verify(MOCK_DEL_SERVICE,times(0)).delete(any(FileDeletionTask.class));
    status=fs.listStatus(rootAuxServiceDirPath);
    Assert.assertTrue(status.length == 1);
    aux.serviceStop();
    long time=System.currentTimeMillis() + 3600 * 1000;
    FileTime fileTime=FileTime.fromMillis(time);
    Files.setLastModifiedTime(Paths.get(testJar.getAbsolutePath()),fileTime);
    conf.set(String.format(YarnConfiguration.NM_AUX_SERVICE_REMOTE_CLASSPATH,"ServiceC"),testJar.getAbsolutePath());
    aux=new AuxServices(MOCK_AUX_PATH_HANDLER,mockContext2,MOCK_DEL_SERVICE);
    aux.init(conf);
    aux.start();
    verify(MOCK_DEL_SERVICE,times(1)).delete(any(FileDeletionTask.class));
    status=fs.listStatus(rootAuxServiceDirPath);
    Assert.assertTrue(status.length == 2);
    aux.serviceStop();
  }
  finally {
    if (testJar != null) {
      testJar.delete();
      rootDir.delete();
    }
    if (fs.exists(new Path(root))) {
      fs.delete(new Path(root),true);
    }
  }
}
