@Test public void testSharedCache() throws Exception {
  Path localJobJarPath=makeJobJarWithLib(TEST_ROOT_DIR.toUri().toString());
  if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) {
    LOG.info("MRAppJar " + MiniMRYarnCluster.APPJAR + " not found. Not running test.");
    return;
  }
  Job job=Job.getInstance(mrCluster.getConfig());
  Configuration jobConf=job.getConfiguration();
  jobConf.set(MRJobConfig.SHARED_CACHE_MODE,"enabled");
  Path inputFile=createTempFile("input-file","x");
  Path second=makeJar(new Path(TEST_ROOT_DIR,"distributed.second.jar"),2);
  Path third=makeJar(new Path(TEST_ROOT_DIR,"distributed.third.jar"),3);
  Path fourth=makeJar(new Path(TEST_ROOT_DIR,"distributed.fourth.jar"),4);
  jobConf.set("tmpjars",second.toString() + "," + third.toString()+ ","+ fourth.toString());
  Path distributedCacheCheckerJar=new Path(JarFinder.getJar(SharedCacheChecker.class));
  job.addFileToClassPath(distributedCacheCheckerJar.makeQualified(localFs.getUri(),distributedCacheCheckerJar.getParent()));
  job.setMapperClass(SharedCacheChecker.class);
  job.setOutputFormatClass(NullOutputFormat.class);
  FileInputFormat.setInputPaths(job,inputFile);
  job.setMaxMapAttempts(1);
  job.submit();
  String trackingUrl=job.getTrackingURL();
  String jobId=job.getJobID().toString();
  Assert.assertTrue(job.waitForCompletion(true));
  Assert.assertTrue("Tracking URL was " + trackingUrl + " but didn't Match Job ID "+ jobId,trackingUrl.endsWith(jobId.substring(jobId.lastIndexOf("_")) + "/"));
}
