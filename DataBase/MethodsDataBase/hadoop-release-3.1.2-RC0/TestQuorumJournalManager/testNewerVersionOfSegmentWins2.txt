/** 
 * Test another edge case discovered by randomized testing. Starts with the edge case state set up by {@link #setupEdgeCaseOneJnHasSegmentWithAcceptedRecovery()}Recovery 2: - New NN starts recovery and only talks to JN1 and JN2. JN0 has crashed. Since they have no logs open, they say they don't need recovery. - Before writing any transactions, JN0 comes back to life and JN1 crashes. - Starts writing segment 101, and writes 50 transactions before crashing. Recovery 3: - JN1 has come back to life. JN2 crashes. - New NN starts recovery and talks to all three. All three have segments open from txid 101, so it calls prepareRecovery(101) - JN0 has an already-accepted value for segment 101, so it replies "you should recover 101-101" - Former incorrect behavior: NN truncates logs to txid 101 even though it should have recovered through 150. In this case, even though there is an accepted recovery decision, the newer log segments should take precedence, since they were written in a newer epoch than the recorded decision.
 */
@Test public void testNewerVersionOfSegmentWins2() throws Exception {
  setupEdgeCaseOneJnHasSegmentWithAcceptedRecovery();
  cluster.getJournalNode(0).stopAndJoin(0);
  qjm=createSpyingQJM();
  try {
    assertEquals(100,QJMTestUtil.recoverAndReturnLastTxn(qjm));
    cluster.restartJournalNode(0);
    cluster.getJournalNode(1).stopAndJoin(0);
    writeSegment(cluster,qjm,101,50,false);
  }
  finally {
    qjm.close();
  }
  cluster.restartJournalNode(1);
  cluster.getJournalNode(2).stopAndJoin(0);
  qjm=createSpyingQJM();
  try {
    assertEquals(150,QJMTestUtil.recoverAndReturnLastTxn(qjm));
  }
  finally {
    qjm.close();
  }
}
