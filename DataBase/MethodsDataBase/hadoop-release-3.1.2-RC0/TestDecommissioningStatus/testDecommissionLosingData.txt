@Test(timeout=120000) public void testDecommissionLosingData() throws Exception {
  ArrayList<String> nodes=new ArrayList<String>(2);
  FSNamesystem fsn=cluster.getNamesystem();
  BlockManager bm=fsn.getBlockManager();
  DatanodeManager dm=bm.getDatanodeManager();
  Path file1=new Path("decommissionLosingData.dat");
  DFSTestUtil.createFile(fileSys,file1,fileSize,fileSize,blockSize,(short)2,seed);
  Thread.sleep(1000);
  LOG.info("Shutdown dn1");
  DatanodeID dnID=cluster.getDataNodes().get(1).getDatanodeId();
  String dnName=dnID.getXferAddr();
  DatanodeDescriptor dnDescriptor1=dm.getDatanode(dnID);
  nodes.add(dnName);
  DataNodeProperties stoppedDN1=cluster.stopDataNode(1);
  DFSTestUtil.waitForDatanodeState(cluster,dnID.getDatanodeUuid(),false,30000);
  LOG.info("Shutdown dn0");
  dnID=cluster.getDataNodes().get(0).getDatanodeId();
  dnName=dnID.getXferAddr();
  DatanodeDescriptor dnDescriptor0=dm.getDatanode(dnID);
  nodes.add(dnName);
  DataNodeProperties stoppedDN0=cluster.stopDataNode(0);
  DFSTestUtil.waitForDatanodeState(cluster,dnID.getDatanodeUuid(),false,30000);
  LOG.info("Decommissioning nodes");
  hostsFileWriter.initExcludeHosts(nodes);
  dm.refreshNodes(conf);
  BlockManagerTestUtil.recheckDecommissionState(dm);
  assertTrue(dnDescriptor0.isDecommissioned());
  assertTrue(dnDescriptor1.isDecommissioned());
  long missingBlocks=bm.getMissingBlocksCount();
  long underreplicated=bm.getLowRedundancyBlocksCount();
  assertTrue(missingBlocks > 0);
  assertTrue(underreplicated > 0);
  LOG.info("Bring back dn0");
  cluster.restartDataNode(stoppedDN0,true);
  do {
    dnID=cluster.getDataNodes().get(0).getDatanodeId();
  }
 while (dnID == null);
  dnDescriptor0=dm.getDatanode(dnID);
  while (dnDescriptor0.numBlocks() == 0) {
    Thread.sleep(100);
  }
  LOG.info("Bring back dn1");
  cluster.restartDataNode(stoppedDN1,true);
  do {
    dnID=cluster.getDataNodes().get(1).getDatanodeId();
  }
 while (dnID == null);
  dnDescriptor1=dm.getDatanode(dnID);
  while (dnDescriptor1.numBlocks() == 0) {
    Thread.sleep(100);
  }
  Thread.sleep(2000);
  assertEquals(underreplicated,bm.getLowRedundancyBlocksCount());
  LOG.info("Starting two more nodes");
  cluster.startDataNodes(conf,2,true,null,null);
  cluster.waitActive();
  int count=0;
  while ((bm.getLowRedundancyBlocksCount() > 0 || bm.getPendingReconstructionBlocksCount() > 0) && count++ < 10) {
    Thread.sleep(1000);
  }
  assertEquals(0,bm.getLowRedundancyBlocksCount());
  assertEquals(0,bm.getPendingReconstructionBlocksCount());
  assertEquals(0,bm.getMissingBlocksCount());
  dnID=cluster.getDataNodes().get(3).getDatanodeId();
  cluster.stopDataNode(3);
  DFSTestUtil.waitForDatanodeState(cluster,dnID.getDatanodeUuid(),false,30000);
  dnID=cluster.getDataNodes().get(2).getDatanodeId();
  cluster.stopDataNode(2);
  DFSTestUtil.waitForDatanodeState(cluster,dnID.getDatanodeUuid(),false,30000);
  hostsFileWriter.initExcludeHost("");
  dm.refreshNodes(conf);
  fileSys.delete(file1,false);
}
