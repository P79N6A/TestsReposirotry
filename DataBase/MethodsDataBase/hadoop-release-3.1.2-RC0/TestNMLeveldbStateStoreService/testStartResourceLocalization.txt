@Test public void testStartResourceLocalization() throws IOException {
  String user="somebody";
  ApplicationId appId=ApplicationId.newInstance(1,1);
  Path appRsrcPath=new Path("hdfs://some/app/resource");
  LocalResourcePBImpl rsrcPb=(LocalResourcePBImpl)LocalResource.newInstance(URL.fromPath(appRsrcPath),LocalResourceType.ARCHIVE,LocalResourceVisibility.APPLICATION,123L,456L);
  LocalResourceProto appRsrcProto=rsrcPb.getProto();
  Path appRsrcLocalPath=new Path("/some/local/dir/for/apprsrc");
  stateStore.startResourceLocalization(user,appId,appRsrcProto,appRsrcLocalPath);
  List<LocalizedResourceProto> completedResources=new ArrayList<LocalizedResourceProto>();
  Map<LocalResourceProto,Path> startedResources=new HashMap<LocalResourceProto,Path>();
  restartStateStore();
  RecoveredLocalizationState state=stateStore.loadLocalizationState();
  LocalResourceTrackerState pubts=state.getPublicTrackerState();
  completedResources=loadCompletedResources(pubts.getCompletedResourcesIterator());
  startedResources=loadStartedResources(pubts.getStartedResourcesIterator());
  assertTrue(completedResources.isEmpty());
  assertTrue(startedResources.isEmpty());
  Map<String,RecoveredUserResources> userResources=loadUserResources(state.getIterator());
  assertEquals(1,userResources.size());
  RecoveredUserResources rur=userResources.get(user);
  LocalResourceTrackerState privts=rur.getPrivateTrackerState();
  assertNotNull(privts);
  completedResources=loadCompletedResources(privts.getCompletedResourcesIterator());
  startedResources=loadStartedResources(privts.getStartedResourcesIterator());
  assertTrue(completedResources.isEmpty());
  assertTrue(startedResources.isEmpty());
  assertEquals(1,rur.getAppTrackerStates().size());
  LocalResourceTrackerState appts=rur.getAppTrackerStates().get(appId);
  assertNotNull(appts);
  completedResources=loadCompletedResources(appts.getCompletedResourcesIterator());
  startedResources=loadStartedResources(appts.getStartedResourcesIterator());
  assertTrue(completedResources.isEmpty());
  assertEquals(1,startedResources.size());
  assertEquals(appRsrcLocalPath,startedResources.get(appRsrcProto));
  Path pubRsrcPath1=new Path("hdfs://some/public/resource1");
  rsrcPb=(LocalResourcePBImpl)LocalResource.newInstance(URL.fromPath(pubRsrcPath1),LocalResourceType.FILE,LocalResourceVisibility.PUBLIC,789L,135L);
  LocalResourceProto pubRsrcProto1=rsrcPb.getProto();
  Path pubRsrcLocalPath1=new Path("/some/local/dir/for/pubrsrc1");
  stateStore.startResourceLocalization(null,null,pubRsrcProto1,pubRsrcLocalPath1);
  Path pubRsrcPath2=new Path("hdfs://some/public/resource2");
  rsrcPb=(LocalResourcePBImpl)LocalResource.newInstance(URL.fromPath(pubRsrcPath2),LocalResourceType.FILE,LocalResourceVisibility.PUBLIC,789L,135L);
  LocalResourceProto pubRsrcProto2=rsrcPb.getProto();
  Path pubRsrcLocalPath2=new Path("/some/local/dir/for/pubrsrc2");
  stateStore.startResourceLocalization(null,null,pubRsrcProto2,pubRsrcLocalPath2);
  Path privRsrcPath=new Path("hdfs://some/private/resource");
  rsrcPb=(LocalResourcePBImpl)LocalResource.newInstance(URL.fromPath(privRsrcPath),LocalResourceType.PATTERN,LocalResourceVisibility.PRIVATE,789L,680L,"*pattern*");
  LocalResourceProto privRsrcProto=rsrcPb.getProto();
  Path privRsrcLocalPath=new Path("/some/local/dir/for/privrsrc");
  stateStore.startResourceLocalization(user,null,privRsrcProto,privRsrcLocalPath);
  restartStateStore();
  state=stateStore.loadLocalizationState();
  pubts=state.getPublicTrackerState();
  completedResources=loadCompletedResources(pubts.getCompletedResourcesIterator());
  startedResources=loadStartedResources(pubts.getStartedResourcesIterator());
  assertTrue(completedResources.isEmpty());
  assertEquals(2,startedResources.size());
  assertEquals(pubRsrcLocalPath1,startedResources.get(pubRsrcProto1));
  assertEquals(pubRsrcLocalPath2,startedResources.get(pubRsrcProto2));
  userResources=loadUserResources(state.getIterator());
  assertEquals(1,userResources.size());
  rur=userResources.get(user);
  privts=rur.getPrivateTrackerState();
  assertNotNull(privts);
  completedResources=loadCompletedResources(privts.getCompletedResourcesIterator());
  startedResources=loadStartedResources(privts.getStartedResourcesIterator());
  assertTrue(completedResources.isEmpty());
  assertEquals(1,startedResources.size());
  assertEquals(privRsrcLocalPath,startedResources.get(privRsrcProto));
  assertEquals(1,rur.getAppTrackerStates().size());
  appts=rur.getAppTrackerStates().get(appId);
  assertNotNull(appts);
  completedResources=loadCompletedResources(appts.getCompletedResourcesIterator());
  startedResources=loadStartedResources(appts.getStartedResourcesIterator());
  assertTrue(completedResources.isEmpty());
  assertEquals(1,startedResources.size());
  assertEquals(appRsrcLocalPath,startedResources.get(appRsrcProto));
}
