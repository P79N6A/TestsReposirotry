@Test public void testContainerStorage() throws IOException {
  List<RecoveredContainerState> recoveredContainers=loadContainersState(stateStore.getContainerStateIterator());
  assertTrue(recoveredContainers.isEmpty());
  ApplicationId appId=ApplicationId.newInstance(1234,3);
  ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,4);
  ContainerId containerId=ContainerId.newContainerId(appAttemptId,5);
  Resource containerResource=Resource.newInstance(1024,2);
  StartContainerRequest containerReq=createContainerRequest(containerId,containerResource);
  long containerStartTime=System.currentTimeMillis();
  stateStore.storeContainer(containerId,0,containerStartTime,containerReq);
  DB db=stateStore.getDB();
  assertNull("version key present for new container",db.get(bytes(stateStore.getContainerVersionKey(containerId.toString()))));
  restartStateStore();
  recoveredContainers=loadContainersState(stateStore.getContainerStateIterator());
  assertEquals(1,recoveredContainers.size());
  RecoveredContainerState rcs=recoveredContainers.get(0);
  assertEquals(0,rcs.getVersion());
  assertEquals(containerStartTime,rcs.getStartTime());
  assertEquals(RecoveredContainerStatus.REQUESTED,rcs.getStatus());
  assertEquals(ContainerExitStatus.INVALID,rcs.getExitCode());
  assertEquals(false,rcs.getKilled());
  assertEquals(containerReq,rcs.getStartRequest());
  assertTrue(rcs.getDiagnostics().isEmpty());
  assertEquals(containerResource,rcs.getCapability());
  ContainerId containerId1=ContainerId.newContainerId(appAttemptId,6);
  stateStore.storeContainerLaunched(containerId1);
  recoveredContainers=loadContainersState(stateStore.getContainerStateIterator());
  assertEquals(1,recoveredContainers.size());
  stateStore.storeContainerQueued(containerId);
  restartStateStore();
  recoveredContainers=loadContainersState(stateStore.getContainerStateIterator());
  assertEquals(1,recoveredContainers.size());
  rcs=recoveredContainers.get(0);
  assertEquals(RecoveredContainerStatus.QUEUED,rcs.getStatus());
  assertEquals(ContainerExitStatus.INVALID,rcs.getExitCode());
  assertEquals(false,rcs.getKilled());
  assertEquals(containerReq,rcs.getStartRequest());
  assertTrue(rcs.getDiagnostics().isEmpty());
  assertEquals(containerResource,rcs.getCapability());
  StringBuilder diags=new StringBuilder();
  stateStore.storeContainerLaunched(containerId);
  diags.append("some diags for container");
  stateStore.storeContainerDiagnostics(containerId,diags);
  restartStateStore();
  recoveredContainers=loadContainersState(stateStore.getContainerStateIterator());
  assertEquals(1,recoveredContainers.size());
  rcs=recoveredContainers.get(0);
  assertEquals(RecoveredContainerStatus.LAUNCHED,rcs.getStatus());
  assertEquals(ContainerExitStatus.INVALID,rcs.getExitCode());
  assertEquals(false,rcs.getKilled());
  assertEquals(containerReq,rcs.getStartRequest());
  assertEquals(diags.toString(),rcs.getDiagnostics());
  assertEquals(containerResource,rcs.getCapability());
  stateStore.storeContainerPaused(containerId);
  restartStateStore();
  recoveredContainers=loadContainersState(stateStore.getContainerStateIterator());
  assertEquals(1,recoveredContainers.size());
  rcs=recoveredContainers.get(0);
  assertEquals(RecoveredContainerStatus.PAUSED,rcs.getStatus());
  assertEquals(ContainerExitStatus.INVALID,rcs.getExitCode());
  assertEquals(false,rcs.getKilled());
  assertEquals(containerReq,rcs.getStartRequest());
  stateStore.removeContainerPaused(containerId);
  restartStateStore();
  recoveredContainers=loadContainersState(stateStore.getContainerStateIterator());
  assertEquals(1,recoveredContainers.size());
  ContainerTokenIdentifier updateTokenIdentifier=new ContainerTokenIdentifier(containerId,"host","user",Resource.newInstance(2468,4),9876543210L,42,2468,Priority.newInstance(7),13579);
  stateStore.storeContainerUpdateToken(containerId,updateTokenIdentifier);
  restartStateStore();
  recoveredContainers=loadContainersState(stateStore.getContainerStateIterator());
  assertEquals(1,recoveredContainers.size());
  rcs=recoveredContainers.get(0);
  assertEquals(0,rcs.getVersion());
  assertEquals(RecoveredContainerStatus.LAUNCHED,rcs.getStatus());
  assertEquals(ContainerExitStatus.INVALID,rcs.getExitCode());
  assertEquals(false,rcs.getKilled());
  assertEquals(Resource.newInstance(2468,4),rcs.getCapability());
  diags.append("some more diags for container");
  stateStore.storeContainerDiagnostics(containerId,diags);
  stateStore.storeContainerKilled(containerId);
  restartStateStore();
  recoveredContainers=loadContainersState(stateStore.getContainerStateIterator());
  assertEquals(1,recoveredContainers.size());
  rcs=recoveredContainers.get(0);
  assertEquals(RecoveredContainerStatus.LAUNCHED,rcs.getStatus());
  assertEquals(ContainerExitStatus.INVALID,rcs.getExitCode());
  assertTrue(rcs.getKilled());
  ContainerTokenIdentifier tokenReadFromRequest=BuilderUtils.newContainerTokenIdentifier(rcs.getStartRequest().getContainerToken());
  assertEquals(updateTokenIdentifier,tokenReadFromRequest);
  assertEquals(diags.toString(),rcs.getDiagnostics());
  diags.append("some final diags");
  stateStore.storeContainerDiagnostics(containerId,diags);
  stateStore.storeContainerCompleted(containerId,21);
  restartStateStore();
  recoveredContainers=loadContainersState(stateStore.getContainerStateIterator());
  assertEquals(1,recoveredContainers.size());
  rcs=recoveredContainers.get(0);
  assertEquals(RecoveredContainerStatus.COMPLETED,rcs.getStatus());
  assertEquals(21,rcs.getExitCode());
  assertTrue(rcs.getKilled());
  assertEquals(diags.toString(),rcs.getDiagnostics());
  stateStore.storeContainerRemainingRetryAttempts(containerId,6);
  stateStore.storeContainerWorkDir(containerId,"/test/workdir");
  stateStore.storeContainerLogDir(containerId,"/test/logdir");
  restartStateStore();
  recoveredContainers=loadContainersState(stateStore.getContainerStateIterator());
  assertEquals(1,recoveredContainers.size());
  rcs=recoveredContainers.get(0);
  assertEquals(6,rcs.getRemainingRetryAttempts());
  assertEquals("/test/workdir",rcs.getWorkDir());
  assertEquals("/test/logdir",rcs.getLogDir());
  validateRetryAttempts(containerId);
  stateStore.removeContainer(containerId);
  restartStateStore();
  recoveredContainers=loadContainersState(stateStore.getContainerStateIterator());
  assertTrue(recoveredContainers.isEmpty());
  restartStateStore();
  NMStateStoreService nmStoreSpy=spy(stateStore);
  loadContainersState(nmStoreSpy.getContainerStateIterator());
  verify(nmStoreSpy,times(0)).removeContainer(any(ContainerId.class));
}
