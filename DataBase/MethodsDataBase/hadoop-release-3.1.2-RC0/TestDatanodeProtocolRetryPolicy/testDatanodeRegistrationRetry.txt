/** 
 * Verify the following scenario. 1. The initial DatanodeProtocol.registerDatanode succeeds. 2. DN starts heartbeat process. 3. In the first heartbeat, NN asks DN to reregister. 4. DN calls DatanodeProtocol.registerDatanode. 5. DatanodeProtocol.registerDatanode throws EOFException. 6. DN retries. 7. DatanodeProtocol.registerDatanode succeeds.
 */
@Test(timeout=60000) public void testDatanodeRegistrationRetry() throws Exception {
  final DatanodeProtocolClientSideTranslatorPB namenode=mock(DatanodeProtocolClientSideTranslatorPB.class);
  Mockito.doAnswer(new Answer<DatanodeRegistration>(){
    int i=0;
    @Override public DatanodeRegistration answer(    InvocationOnMock invocation) throws Throwable {
      i++;
      if (i > 1 && i < 5) {
        LOG.info("mockito exception " + i);
        throw new EOFException("TestDatanodeProtocolRetryPolicy");
      }
 else {
        DatanodeRegistration dr=(DatanodeRegistration)invocation.getArguments()[0];
        datanodeRegistration=new DatanodeRegistration(dr.getDatanodeUuid(),dr);
        LOG.info("mockito succeeded " + datanodeRegistration);
        return datanodeRegistration;
      }
    }
  }
).when(namenode).registerDatanode(Mockito.any(DatanodeRegistration.class));
  when(namenode.versionRequest()).thenReturn(new NamespaceInfo(1,CLUSTER_ID,POOL_ID,1L));
  Mockito.doAnswer(new Answer<HeartbeatResponse>(){
    int i=0;
    @Override public HeartbeatResponse answer(    InvocationOnMock invocation) throws Throwable {
      i++;
      HeartbeatResponse heartbeatResponse;
      if (i == 1) {
        LOG.info("mockito heartbeatResponse registration " + i);
        heartbeatResponse=new HeartbeatResponse(new DatanodeCommand[]{RegisterCommand.REGISTER},new NNHAStatusHeartbeat(HAServiceState.ACTIVE,1),null,ThreadLocalRandom.current().nextLong() | 1L);
      }
 else {
        LOG.info("mockito heartbeatResponse " + i);
        heartbeatResponse=new HeartbeatResponse(new DatanodeCommand[0],new NNHAStatusHeartbeat(HAServiceState.ACTIVE,1),null,ThreadLocalRandom.current().nextLong() | 1L);
      }
      return heartbeatResponse;
    }
  }
).when(namenode).sendHeartbeat(Mockito.any(DatanodeRegistration.class),Mockito.any(StorageReport[].class),Mockito.anyLong(),Mockito.anyLong(),Mockito.anyInt(),Mockito.anyInt(),Mockito.anyInt(),Mockito.any(VolumeFailureSummary.class),Mockito.anyBoolean(),Mockito.any(SlowPeerReports.class),Mockito.any(SlowDiskReports.class));
  dn=new DataNode(conf,locations,null,null){
    @Override DatanodeProtocolClientSideTranslatorPB connectToNN(    InetSocketAddress nnAddr) throws IOException {
      Assert.assertEquals(NN_ADDR,nnAddr);
      return namenode;
    }
  }
;
  dn.getAllBpOs().get(0).triggerHeartbeatForTests();
  waitForBlockReport(namenode);
}
