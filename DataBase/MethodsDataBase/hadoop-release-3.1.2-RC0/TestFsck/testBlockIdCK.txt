/** 
 * Test for blockIdCK.
 */
@Test public void testBlockIdCK() throws Exception {
  final short replFactor=2;
  short numDn=2;
  final long blockSize=512;
  String[] racks={"/rack1","/rack2"};
  String[] hosts={"host1","host2"};
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,blockSize);
  conf.setInt(DFSConfigKeys.DFS_REPLICATION_KEY,2);
  DistributedFileSystem dfs=null;
  File builderBaseDir=new File(GenericTestUtils.getRandomizedTempPath());
  cluster=new MiniDFSCluster.Builder(conf,builderBaseDir).numDataNodes(numDn).hosts(hosts).racks(racks).build();
  assertNotNull("Failed Cluster Creation",cluster);
  cluster.waitClusterUp();
  dfs=cluster.getFileSystem();
  assertNotNull("Failed to get FileSystem",dfs);
  DFSTestUtil util=new DFSTestUtil.Builder().setName(getClass().getSimpleName()).setNumFiles(1).build();
  final String pathString=new String("/testfile");
  final Path path=new Path(pathString);
  util.createFile(dfs,path,1024,replFactor,1000L);
  util.waitReplication(dfs,path,replFactor);
  StringBuilder sb=new StringBuilder();
  for (  LocatedBlock lb : util.getAllBlocks(dfs,path)) {
    sb.append(lb.getBlock().getLocalBlock().getBlockName() + " ");
  }
  String[] bIds=sb.toString().split(" ");
  String runFsckResult=runFsck(conf,0,true,"/","-blockId","not_a_block_id");
  assertTrue(runFsckResult.contains("Incorrect blockId format:"));
  runFsckResult=runFsck(conf,0,true,"/","-blockId",sb.toString());
  assertTrue(runFsckResult.contains(bIds[0]));
  assertTrue(runFsckResult.contains(bIds[1]));
  assertTrue(runFsckResult.contains("Block replica on datanode/rack: host1/rack1 is HEALTHY"));
  assertTrue(runFsckResult.contains("Block replica on datanode/rack: host2/rack2 is HEALTHY"));
}
