/** 
 * Test fsck with FileNotFound. 
 */
@Test public void testFsckFileNotFound() throws Exception {
  final short numReplicas=1;
  NameNode namenode=mock(NameNode.class);
  NetworkTopology nettop=mock(NetworkTopology.class);
  Map<String,String[]> pmap=new HashMap<>();
  Writer result=new StringWriter();
  PrintWriter out=new PrintWriter(result,true);
  InetAddress remoteAddress=InetAddress.getLocalHost();
  FSNamesystem fsName=mock(FSNamesystem.class);
  FSDirectory fsd=mock(FSDirectory.class);
  BlockManager blockManager=mock(BlockManager.class);
  DatanodeManager dnManager=mock(DatanodeManager.class);
  INodesInPath iip=mock(INodesInPath.class);
  when(namenode.getNamesystem()).thenReturn(fsName);
  when(fsName.getBlockManager()).thenReturn(blockManager);
  when(fsName.getFSDirectory()).thenReturn(fsd);
  when(fsd.getFSNamesystem()).thenReturn(fsName);
  when(fsd.resolvePath(anyObject(),anyString(),any(DirOp.class))).thenReturn(iip);
  when(blockManager.getDatanodeManager()).thenReturn(dnManager);
  NamenodeFsck fsck=new NamenodeFsck(conf,namenode,nettop,pmap,out,numReplicas,remoteAddress);
  String pathString="/tmp/testFile";
  HdfsFileStatus file=new HdfsFileStatus.Builder().length(123L).replication(1).blocksize(128 * 1024L).mtime(123123123L).atime(123123120L).perm(FsPermission.getDefault()).owner("foo").group("bar").path(DFSUtil.string2Bytes(pathString)).fileId(312321L).children(1).storagePolicy(HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED).build();
  Result replRes=new ReplicationResult(conf);
  Result ecRes=new ErasureCodingResult(conf);
  try {
    fsck.check(pathString,file,replRes,ecRes);
  }
 catch (  Exception e) {
    fail("Unexpected exception " + e.getMessage());
  }
  assertTrue(replRes.isHealthy());
}
