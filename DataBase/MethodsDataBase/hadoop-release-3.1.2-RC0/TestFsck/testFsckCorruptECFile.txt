@Test(timeout=300000) public void testFsckCorruptECFile() throws Exception {
  DistributedFileSystem fs=null;
  int dataBlocks=StripedFileTestUtil.getDefaultECPolicy().getNumDataUnits();
  int parityBlocks=StripedFileTestUtil.getDefaultECPolicy().getNumParityUnits();
  int cellSize=StripedFileTestUtil.getDefaultECPolicy().getCellSize();
  int totalSize=dataBlocks + parityBlocks;
  File builderBaseDir=new File(GenericTestUtils.getRandomizedTempPath());
  cluster=new MiniDFSCluster.Builder(conf,builderBaseDir).numDataNodes(totalSize).build();
  fs=cluster.getFileSystem();
  fs.enableErasureCodingPolicy(StripedFileTestUtil.getDefaultECPolicy().getName());
  Map<Integer,Integer> dnIndices=new HashMap<>();
  ArrayList<DataNode> dnList=cluster.getDataNodes();
  for (int i=0; i < totalSize; i++) {
    dnIndices.put(dnList.get(i).getIpcPort(),i);
  }
  Path ecDirPath=new Path("/striped");
  fs.mkdir(ecDirPath,FsPermission.getDirDefault());
  fs.getClient().setErasureCodingPolicy(ecDirPath.toString(),StripedFileTestUtil.getDefaultECPolicy().getName());
  Path file=new Path(ecDirPath,"corrupted");
  final int length=cellSize * dataBlocks;
  final byte[] bytes=StripedFileTestUtil.generateBytes(length);
  DFSTestUtil.writeFile(fs,file,bytes);
  LocatedStripedBlock lsb=(LocatedStripedBlock)fs.getClient().getLocatedBlocks(file.toString(),0,cellSize * dataBlocks).get(0);
  final LocatedBlock[] blks=StripedBlockUtil.parseStripedBlockGroup(lsb,cellSize,dataBlocks,parityBlocks);
  for (int i=0; i < parityBlocks + 1; i++) {
    int ipcPort=blks[i].getLocations()[0].getIpcPort();
    int dnIndex=dnIndices.get(ipcPort);
    File storageDir=cluster.getInstanceStorageDir(dnIndex,0);
    File blkFile=MiniDFSCluster.getBlockFile(storageDir,blks[i].getBlock());
    Assert.assertTrue("Block file does not exist",blkFile.exists());
    FileOutputStream out=new FileOutputStream(blkFile);
    out.write("corruption".getBytes());
  }
  for (  DataNode dn : cluster.getDataNodes()) {
    DataNodeTestUtils.setHeartbeatsDisabledForTests(dn,true);
  }
  try {
    IOUtils.copyBytes(fs.open(file),new IOUtils.NullOutputStream(),conf,true);
  }
 catch (  IOException ie) {
    assertTrue(ie.getMessage().contains("missingChunksNum=" + (parityBlocks + 1)));
  }
  waitForUnrecoverableBlockGroup(conf);
  String outStr=runFsck(conf,1,true,"/");
  assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS));
  assertTrue(outStr.contains("Under-erasure-coded block groups:\t0"));
  outStr=runFsck(conf,-1,true,"/","-list-corruptfileblocks");
  assertTrue(outStr.contains("has 1 CORRUPT files"));
}
