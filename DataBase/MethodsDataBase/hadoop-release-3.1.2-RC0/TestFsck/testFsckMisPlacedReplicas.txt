/** 
 * Tests that the # of misreplaced replicas is correct.
 * @throws IOException
 */
@Test public void testFsckMisPlacedReplicas() throws IOException {
  final short replFactor=2;
  short numDn=2;
  final short numBlocks=3;
  final long blockSize=512;
  String[] racks={"/rack1","/rack1"};
  String[] hosts={"host1","host2"};
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,blockSize);
  DistributedFileSystem dfs=null;
  File builderBaseDir=new File(GenericTestUtils.getRandomizedTempPath());
  cluster=new MiniDFSCluster.Builder(conf,builderBaseDir).numDataNodes(numDn).hosts(hosts).racks(racks).build();
  assertNotNull("Failed Cluster Creation",cluster);
  cluster.waitClusterUp();
  dfs=cluster.getFileSystem();
  assertNotNull("Failed to get FileSystem",dfs);
  final String pathString=new String("/testfile");
  final Path path=new Path(pathString);
  long fileLen=blockSize * numBlocks;
  DFSTestUtil.createFile(dfs,path,fileLen,replFactor,1);
  NameNode namenode=cluster.getNameNode();
  NetworkTopology nettop=cluster.getNamesystem().getBlockManager().getDatanodeManager().getNetworkTopology();
  nettop.add(DFSTestUtil.getDatanodeDescriptor("/rack2","/host3"));
  numDn++;
  Map<String,String[]> pmap=new HashMap<String,String[]>();
  Writer result=new StringWriter();
  PrintWriter out=new PrintWriter(result,true);
  InetAddress remoteAddress=InetAddress.getLocalHost();
  NamenodeFsck fsck=new NamenodeFsck(conf,namenode,nettop,pmap,out,numDn,remoteAddress);
  final HdfsFileStatus file=namenode.getRpcServer().getFileInfo(pathString);
  assertNotNull(file);
  Result replRes=new ReplicationResult(conf);
  Result ecRes=new ErasureCodingResult(conf);
  fsck.check(pathString,file,replRes,ecRes);
  assertEquals(replRes.numMisReplicatedBlocks,numBlocks);
}
