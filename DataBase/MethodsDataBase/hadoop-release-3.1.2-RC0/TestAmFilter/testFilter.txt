/** 
 * Test AmIpFilter
 */
@Test(timeout=10000) @SuppressWarnings("deprecation") public void testFilter() throws Exception {
  Map<String,String> params=new HashMap<String,String>();
  params.put(AmIpFilter.PROXY_HOST,proxyHost);
  params.put(AmIpFilter.PROXY_URI_BASE,proxyUri);
  FilterConfig config=new DummyFilterConfig(params);
  FilterChain chain=new FilterChain(){
    @Override public void doFilter(    ServletRequest servletRequest,    ServletResponse servletResponse) throws IOException, ServletException {
      doFilterRequest=servletRequest.getClass().getName();
      if (servletRequest instanceof AmIpServletRequestWrapper) {
        servletWrapper=(AmIpServletRequestWrapper)servletRequest;
      }
    }
  }
;
  AmIpFilter testFilter=new AmIpFilter();
  testFilter.init(config);
  HttpServletResponseForTest response=new HttpServletResponseForTest();
  ServletRequest failRequest=Mockito.mock(ServletRequest.class);
  try {
    testFilter.doFilter(failRequest,response,chain);
    fail();
  }
 catch (  ServletException e) {
    assertEquals(ProxyUtils.E_HTTP_HTTPS_ONLY,e.getMessage());
  }
  HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
  Mockito.when(request.getRemoteAddr()).thenReturn("nowhere");
  Mockito.when(request.getRequestURI()).thenReturn("/app/application_00_0");
  testFilter.doFilter(request,response,chain);
  assertEquals(HttpURLConnection.HTTP_MOVED_TEMP,response.status);
  String redirect=response.getHeader(ProxyUtils.LOCATION);
  assertEquals("http://bogus/app/application_00_0",redirect);
  Mockito.when(request.getRequestURI()).thenReturn("/proxy/application_00_0");
  testFilter.doFilter(request,response,chain);
  assertEquals(HttpURLConnection.HTTP_MOVED_TEMP,response.status);
  redirect=response.getHeader(ProxyUtils.LOCATION);
  assertEquals("http://bogus/proxy/redirect/application_00_0",redirect);
  Mockito.when(request.getRequestURI()).thenReturn("/proxy/application_00_0");
  Mockito.when(request.getQueryString()).thenReturn("id=0");
  testFilter.doFilter(request,response,chain);
  assertEquals(HttpURLConnection.HTTP_MOVED_TEMP,response.status);
  redirect=response.getHeader(ProxyUtils.LOCATION);
  assertEquals("http://bogus/proxy/redirect/application_00_0?id=0",redirect);
  Mockito.when(request.getRemoteAddr()).thenReturn("127.0.0.1");
  testFilter.doFilter(request,response,chain);
  assertTrue(doFilterRequest.contains("javax.servlet.http.HttpServletRequest"));
  Cookie[] cookies=new Cookie[]{new Cookie(WebAppProxyServlet.PROXY_USER_COOKIE_NAME,"user")};
  Mockito.when(request.getCookies()).thenReturn(cookies);
  testFilter.doFilter(request,response,chain);
  assertEquals("org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpServletRequestWrapper",doFilterRequest);
  assertEquals("user",servletWrapper.getUserPrincipal().getName());
  assertEquals("user",servletWrapper.getRemoteUser());
  assertFalse(servletWrapper.isUserInRole(""));
}
