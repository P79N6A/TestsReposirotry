@Test public void testSimpleRackLocalAllocation() throws Exception {
  ResourceBlacklistRequest blacklistRequest=ResourceBlacklistRequest.newInstance(new ArrayList<>(),new ArrayList<>());
  List<ResourceRequest> reqs=Arrays.asList(ResourceRequest.newInstance(Priority.newInstance(1),"*",Resources.createResource(1 * GB),1,true,null,ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC,true)),ResourceRequest.newInstance(Priority.newInstance(1),"h1",Resources.createResource(1 * GB),1,true,null,ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC,true)),ResourceRequest.newInstance(Priority.newInstance(1),"/r1",Resources.createResource(1 * GB),1,true,null,ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC,true)));
  ApplicationAttemptId appAttId=ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L,1),1);
  oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance("h3",1234),"h3:1234","/r2"),RemoteNode.newInstance(NodeId.newInstance("h2",1234),"h2:1234","/r1"),RemoteNode.newInstance(NodeId.newInstance("h4",1234),"h4:1234","/r2")));
  List<Container> containers=allocator.allocateContainers(blacklistRequest,reqs,appAttId,oppCntxt,1L,"luser");
  Set<String> allocatedHosts=new HashSet<>();
  for (  Container c : containers) {
    allocatedHosts.add(c.getNodeHttpAddress());
  }
  Assert.assertTrue(allocatedHosts.contains("h2:1234"));
  Assert.assertFalse(allocatedHosts.contains("h3:1234"));
  Assert.assertFalse(allocatedHosts.contains("h4:1234"));
  Assert.assertEquals(1,containers.size());
}
