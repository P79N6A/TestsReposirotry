@Test(timeout=120000) public void testRMContainerLeakInLeafQueue() throws Exception {
  mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x"));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x"),NodeId.newInstance("h2",0),toSet("x")));
  MockRM rm1=new MockRM(TestUtils.getConfigurationWithDefaultQueueLabels(conf)){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",8 * GB);
  rm1.registerNode("h2:1234",8 * GB);
  RMApp app1=rm1.submitApp(1 * GB,"app1","user",null,"a1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  RMApp app2=rm1.submitApp(1 * GB,"app2","user",null,"a1");
  MockRM.launchAndRegisterAM(app2,rm1,nm1);
  am1.allocate("*",7 * GB,2,new ArrayList<ContainerId>());
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  LeafQueue leafQueue=(LeafQueue)cs.getQueue("a1");
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  FiCaSchedulerApp schedulerApp1=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  Assert.assertEquals(1,schedulerApp1.getLiveContainers().size());
  Assert.assertEquals(1,schedulerApp1.getReservedContainers().size());
  rm1.killApp(app2.getApplicationId());
  rm1.waitForState(app2.getApplicationId(),RMAppState.KILLED);
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  Assert.assertEquals(2,schedulerApp1.getLiveContainers().size());
  Assert.assertEquals(0,schedulerApp1.getReservedContainers().size());
  rm1.killApp(app1.getApplicationId());
  rm1.waitForState(app1.getApplicationId(),RMAppState.KILLED);
  Assert.assertEquals(0,leafQueue.getIgnoreExclusivityRMContainers().size());
  rm1.close();
}
