@Test(timeout=60000) public void testReservedSpaceForLeaseRecovery() throws Exception {
  final short replication=3;
  conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,2);
  conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_RETRY_INTERVAL_KEY,1000);
  startCluster(BLOCK_SIZE,replication,-1);
  final String methodName=GenericTestUtils.getMethodName();
  final Path file=new Path("/" + methodName + ".01.dat");
  FSDataOutputStream os=fs.create(file,replication);
  os.write(new byte[8192]);
  os.hflush();
  os.close();
  HdfsBlockLocation blockLocation=(HdfsBlockLocation)fs.getClient().getBlockLocations(file.toString(),0,BLOCK_SIZE)[0];
  LocatedBlock lastBlock=blockLocation.getLocatedBlock();
  cluster.stopDataNode(lastBlock.getLocations()[2].getName());
  try {
    os=fs.append(file);
    DFSTestUtil.setPipeline((DFSOutputStream)os.getWrappedStream(),lastBlock);
    os.writeBytes("hi");
    os.hsync();
  }
 catch (  IOException e) {
    LOG.info("",e);
  }
  DFSTestUtil.abortStream((DFSOutputStream)os.getWrappedStream());
  cluster.setDataNodeDead(lastBlock.getLocations()[2]);
  fs.recoverLease(file);
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      try {
        return fs.isFileClosed(file);
      }
 catch (      IOException e) {
        return false;
      }
    }
  }
,500,30000);
  checkReservedSpace(0);
}
