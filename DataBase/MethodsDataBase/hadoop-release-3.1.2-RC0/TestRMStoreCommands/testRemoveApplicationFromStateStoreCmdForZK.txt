@Test public void testRemoveApplicationFromStateStoreCmdForZK() throws Exception {
  StateChangeRequestInfo req=new StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
  try (TestingServer curatorTestingServer=TestZKRMStateStore.setupCuratorServer();CuratorFramework curatorFramework=TestZKRMStateStore.setupCuratorFramework(curatorTestingServer)){
    Configuration conf=TestZKRMStateStore.createHARMConf("rm1,rm2","rm1",1234,false,curatorTestingServer);
    ResourceManager rm=new MockRM(conf);
    rm.start();
    rm.getRMContext().getRMAdminService().transitionToActive(req);
    rm.close();
    String appId=ApplicationId.newInstance(System.currentTimeMillis(),1).toString();
    String appRootPath=YarnConfiguration.DEFAULT_ZK_RM_STATE_STORE_PARENT_PATH + "/" + ZKRMStateStore.ROOT_ZNODE_NAME+ "/"+ RMStateStore.RM_APP_ROOT;
    String appIdPath=appRootPath + "/" + appId;
    curatorFramework.create().forPath(appIdPath);
    for (    String path : curatorFramework.getChildren().forPath(appRootPath)) {
      if (path.equals(ZKRMStateStore.RM_APP_ROOT_HIERARCHIES)) {
        continue;
      }
      assertEquals("Application node for " + appId + " should exist",appId,path);
    }
    try {
      ResourceManager.removeApplication(conf,appId);
    }
 catch (    Exception e) {
      fail("Exception should not be thrown while removing app from " + "rm state store.");
    }
    assertTrue("After remove app from store there should be no child nodes" + " for application in app root path",curatorFramework.getChildren().forPath(appRootPath).size() == 1 && curatorFramework.getChildren().forPath(appRootPath).get(0).equals(ZKRMStateStore.RM_APP_ROOT_HIERARCHIES));
  }
 }
