@Test public void testCompositeConstraintProtoConverter(){
  AbstractConstraint constraintExpr=or(targetIn(RACK,allocationTag("spark")),maxCardinality(NODE,3),targetCardinality(RACK,2,10,allocationTag("zk")));
  Assert.assertTrue(constraintExpr instanceof Or);
  PlacementConstraint constraint=PlacementConstraints.build(constraintExpr);
  Or orExpr=(Or)constraintExpr;
  PlacementConstraintToProtoConverter toProtoConverter=new PlacementConstraintToProtoConverter(constraint);
  PlacementConstraintProto protoConstraint=toProtoConverter.convert();
  Assert.assertFalse(protoConstraint.hasSimpleConstraint());
  Assert.assertTrue(protoConstraint.hasCompositeConstraint());
  CompositePlacementConstraintProto cProto=protoConstraint.getCompositeConstraint();
  Assert.assertEquals(CompositeType.OR,cProto.getCompositeType());
  Assert.assertEquals(3,cProto.getChildConstraintsCount());
  Assert.assertEquals(0,cProto.getTimedChildConstraintsCount());
  Iterator<AbstractConstraint> orChildren=orExpr.getChildren().iterator();
  Iterator<PlacementConstraintProto> orProtoChildren=cProto.getChildConstraintsList().iterator();
  while (orChildren.hasNext() && orProtoChildren.hasNext()) {
    AbstractConstraint orChild=orChildren.next();
    PlacementConstraintProto orProtoChild=orProtoChildren.next();
    compareSimpleConstraintToProto((SingleConstraint)orChild,orProtoChild);
  }
  PlacementConstraintFromProtoConverter fromProtoConverter=new PlacementConstraintFromProtoConverter(protoConstraint);
  PlacementConstraint newConstraint=fromProtoConverter.convert();
  AbstractConstraint newConstraintExpr=newConstraint.getConstraintExpr();
  Assert.assertTrue(newConstraintExpr instanceof Or);
  Or newOrExpr=(Or)newConstraintExpr;
  Assert.assertEquals(3,newOrExpr.getChildren().size());
  orChildren=orExpr.getChildren().iterator();
  Iterator<AbstractConstraint> newOrChildren=newOrExpr.getChildren().iterator();
  while (orChildren.hasNext() && newOrChildren.hasNext()) {
    AbstractConstraint orChild=orChildren.next();
    AbstractConstraint newOrChild=newOrChildren.next();
    compareSimpleConstraints((SingleConstraint)orChild,(SingleConstraint)newOrChild);
  }
}
