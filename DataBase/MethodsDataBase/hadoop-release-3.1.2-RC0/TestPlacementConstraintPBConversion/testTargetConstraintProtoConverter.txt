@Test public void testTargetConstraintProtoConverter(){
  AbstractConstraint sConstraintExpr=targetIn(NODE,allocationTag("hbase-m"));
  Assert.assertTrue(sConstraintExpr instanceof SingleConstraint);
  SingleConstraint single=(SingleConstraint)sConstraintExpr;
  PlacementConstraint sConstraint=PlacementConstraints.build(sConstraintExpr);
  PlacementConstraintToProtoConverter toProtoConverter=new PlacementConstraintToProtoConverter(sConstraint);
  PlacementConstraintProto protoConstraint=toProtoConverter.convert();
  Assert.assertTrue(protoConstraint.hasSimpleConstraint());
  Assert.assertFalse(protoConstraint.hasCompositeConstraint());
  SimplePlacementConstraintProto sProto=protoConstraint.getSimpleConstraint();
  Assert.assertEquals(single.getScope(),sProto.getScope());
  Assert.assertEquals(single.getMinCardinality(),sProto.getMinCardinality());
  Assert.assertEquals(single.getMaxCardinality(),sProto.getMaxCardinality());
  Assert.assertEquals(single.getTargetExpressions().size(),sProto.getTargetExpressionsList().size());
  PlacementConstraintFromProtoConverter fromProtoConverter=new PlacementConstraintFromProtoConverter(protoConstraint);
  PlacementConstraint newConstraint=fromProtoConverter.convert();
  AbstractConstraint newConstraintExpr=newConstraint.getConstraintExpr();
  Assert.assertTrue(newConstraintExpr instanceof SingleConstraint);
  SingleConstraint newSingle=(SingleConstraint)newConstraintExpr;
  Assert.assertEquals(single.getScope(),newSingle.getScope());
  Assert.assertEquals(single.getMinCardinality(),newSingle.getMinCardinality());
  Assert.assertEquals(single.getMaxCardinality(),newSingle.getMaxCardinality());
  Assert.assertEquals(single.getTargetExpressions(),newSingle.getTargetExpressions());
}
