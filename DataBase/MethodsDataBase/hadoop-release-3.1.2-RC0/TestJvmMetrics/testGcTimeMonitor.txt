@Test public void testGcTimeMonitor(){
class Alerter implements GcTimeMonitor.GcTimeAlertHandler {
    private volatile int numAlerts;
    private volatile int maxGcTimePercentage;
    @Override public void alert(    GcTimeMonitor.GcData gcData){
      numAlerts++;
      if (gcData.getGcTimePercentage() > maxGcTimePercentage) {
        maxGcTimePercentage=gcData.getGcTimePercentage();
      }
    }
  }
  Alerter alerter=new Alerter();
  int alertGcPerc=10;
  gcTimeMonitor=new GcTimeMonitor(60 * 1000,100,alertGcPerc,alerter);
  gcTimeMonitor.start();
  int maxGcTimePercentage=0;
  long gcCount=0;
  List<String> garbageStrings=new ArrayList<>();
  long startTime=System.currentTimeMillis();
  while (System.currentTimeMillis() - startTime < 1000) {
    for (int j=0; j < 100000; j++) {
      garbageStrings.add("Long string prefix just to fill memory with garbage " + j);
    }
    garbageStrings.clear();
    System.gc();
    GcTimeMonitor.GcData gcData=gcTimeMonitor.getLatestGcData();
    int gcTimePercentage=gcData.getGcTimePercentage();
    if (gcTimePercentage > maxGcTimePercentage) {
      maxGcTimePercentage=gcTimePercentage;
    }
    gcCount=gcData.getAccumulatedGcCount();
  }
  Assert.assertTrue(maxGcTimePercentage > 0);
  Assert.assertTrue(gcCount > 0);
  Assert.assertTrue(alerter.numAlerts > 0);
  Assert.assertTrue(alerter.maxGcTimePercentage >= alertGcPerc);
}
