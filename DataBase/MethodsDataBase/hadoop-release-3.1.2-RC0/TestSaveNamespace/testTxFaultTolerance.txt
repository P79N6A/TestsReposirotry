@Test(timeout=30000) public void testTxFaultTolerance() throws Exception {
  String baseDir=MiniDFSCluster.getBaseDirectory();
  List<String> nameDirs=new ArrayList<>();
  nameDirs.add(fileAsURI(new File(baseDir,"name1")).toString());
  nameDirs.add(fileAsURI(new File(baseDir,"name2")).toString());
  Configuration conf=new HdfsConfiguration();
  String nameDirsStr=StringUtils.join(",",nameDirs);
  conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nameDirsStr);
  conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,nameDirsStr);
  NameNode.initMetrics(conf,NamenodeRole.NAMENODE);
  DFSTestUtil.formatNameNode(conf);
  FSNamesystem fsn=FSNamesystem.loadFromDisk(conf);
  try {
    assertEquals(1,fsn.getEditLog().getLastWrittenTxId());
    doAnEdit(fsn,1);
    assertEquals(2,fsn.getEditLog().getLastWrittenTxId());
    fsn.close();
    File txidFile0=new File(new URI(nameDirs.get(0) + "/current/seen_txid"));
    FileWriter fw=new FileWriter(txidFile0,false);
    try (PrintWriter pw=new PrintWriter(fw)){
      pw.print("corrupt____!");
    }
     fsn=FSNamesystem.loadFromDisk(conf);
    assertEquals(4,fsn.getEditLog().getLastWrittenTxId());
    File txidFile1=new File(new URI(nameDirs.get(1) + "/current/seen_txid"));
    assertTrue(FileUtils.contentEquals(txidFile0,txidFile1));
  }
  finally {
    if (fsn != null) {
      fsn.close();
    }
  }
}
