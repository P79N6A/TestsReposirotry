@Test public void testDelegationTokenNodeWithSplitChangeAcrossRestarts() throws Exception {
  TestZKRMStateStoreTester zkTester=new TestZKRMStateStoreTester();
  Map<RMDelegationTokenIdentifier,Long> tokensWithRenewal=new HashMap<>();
  Map<RMDelegationTokenIdentifier,Integer> tokensWithIndex=new HashMap<>();
  int sequenceNumber=0;
  Configuration conf=createConfForDelegationTokenNodeSplit(1);
  RMStateStore store=zkTester.getRMStateStore(conf);
  RMDelegationTokenIdentifier token1=storeUpdateAndVerifyDelegationToken(zkTester,tokensWithRenewal,tokensWithIndex,sequenceNumber,1);
  store.close();
  conf=createConfForDelegationTokenNodeSplit(2);
  store=zkTester.getRMStateStore(conf);
  verifyDelegationTokenInStateStore(zkTester,token1,tokensWithRenewal.get(token1),1);
  sequenceNumber++;
  RMDelegationTokenIdentifier token2=storeUpdateAndVerifyDelegationToken(zkTester,tokensWithRenewal,tokensWithIndex,sequenceNumber,2);
  long renewDate1=System.currentTimeMillis();
  zkTester.store.updateRMDelegationToken(token1,renewDate1);
  tokensWithRenewal.put(token1,renewDate1);
  verifyDelegationTokenInStateStore(zkTester,token1,tokensWithRenewal.get(token1),1);
  store.close();
  conf=createConfForDelegationTokenNodeSplit(0);
  store=zkTester.getRMStateStore(conf);
  verifyDelegationTokenInStateStore(zkTester,token1,tokensWithRenewal.get(token1),1);
  verifyDelegationTokenInStateStore(zkTester,token2,tokensWithRenewal.get(token2),2);
  sequenceNumber++;
  RMDelegationTokenIdentifier token0=storeUpdateAndVerifyDelegationToken(zkTester,tokensWithRenewal,tokensWithIndex,sequenceNumber,0);
  store.close();
  conf=createConfForDelegationTokenNodeSplit(3);
  store=zkTester.getRMStateStore(conf);
  verifyDelegationTokenInStateStore(zkTester,token1,tokensWithRenewal.get(token1),1);
  verifyDelegationTokenInStateStore(zkTester,token2,tokensWithRenewal.get(token2),2);
  verifyDelegationTokenInStateStore(zkTester,token0,tokensWithRenewal.get(token0),0);
  for (  RMDelegationTokenIdentifier token : tokensWithRenewal.keySet()) {
    store.removeRMDelegationToken(token);
  }
  tokensWithRenewal.clear();
  tokensWithIndex.clear();
  verifyDelegationTokensStateStore(zkTester,tokensWithRenewal,tokensWithIndex,sequenceNumber);
  assertFalse("Token " + token1 + " should not exist but was found in ZooKeeper",zkTester.delegationTokenExists(token1,1));
  assertFalse("Token " + token1 + " should not exist but was found in ZooKeeper",zkTester.delegationTokenExists(token2,2));
  assertFalse("Token " + token1 + " should not exist but was found in ZooKeeper",zkTester.delegationTokenExists(token0,0));
  sequenceNumber++;
  storeUpdateAndVerifyDelegationToken(zkTester,tokensWithRenewal,tokensWithIndex,sequenceNumber,3);
  store.close();
}
