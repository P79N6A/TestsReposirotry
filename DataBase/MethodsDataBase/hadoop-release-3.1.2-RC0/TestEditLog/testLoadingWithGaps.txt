/** 
 * Test loading an editlog with gaps. A single editlog directory is set up. On of the edit log files is deleted. This should fail when selecting the input streams as it will not be able  to select enough streams to load up to 4*TXNS_PER_ROLL. There should be 4*TXNS_PER_ROLL transactions as we rolled 3 times. 
 */
@Test public void testLoadingWithGaps() throws IOException {
  File f1=new File(TEST_DIR + "/gaptest0");
  List<URI> editUris=ImmutableList.of(f1.toURI());
  NNStorage storage=setupEdits(editUris,3);
  final long startGapTxId=1 * TXNS_PER_ROLL + 1;
  final long endGapTxId=2 * TXNS_PER_ROLL;
  File[] files=new File(f1,"current").listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      if (name.startsWith(NNStorage.getFinalizedEditsFileName(startGapTxId,endGapTxId))) {
        return true;
      }
      return false;
    }
  }
);
  assertEquals(1,files.length);
  assertTrue(files[0].delete());
  FSEditLog editlog=getFSEditLog(storage);
  editlog.initJournalsForWrite();
  long startTxId=1;
  try {
    editlog.selectInputStreams(startTxId,4 * TXNS_PER_ROLL);
    fail("Should have thrown exception");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Gap in transactions. Expected to be able to read up until " + "at least txid 40 but unable to find any edit logs containing " + "txid 11",ioe);
  }
}
