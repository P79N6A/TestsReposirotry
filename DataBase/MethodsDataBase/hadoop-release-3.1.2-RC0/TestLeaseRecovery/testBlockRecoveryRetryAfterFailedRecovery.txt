/** 
 * Block/lease recovery should be retried with failed nodes from the second stage removed to avoid perpetual recovery failures.
 */
@Test public void testBlockRecoveryRetryAfterFailedRecovery() throws Exception {
  Configuration conf=new Configuration();
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
  Path file=new Path("/testBlockRecoveryRetryAfterFailedRecovery");
  DistributedFileSystem dfs=cluster.getFileSystem();
  FSDataOutputStream out=dfs.create(file);
  final int FILE_SIZE=128 * 1024;
  int count=0;
  while (count < FILE_SIZE) {
    out.writeBytes("DE K9SUL");
    count+=8;
  }
  out.hsync();
  ((DFSOutputStream)out.getWrappedStream()).abort();
  LocatedBlocks locations=cluster.getNameNodeRpc().getBlockLocations(file.toString(),0,count);
  ExtendedBlock block=locations.get(0).getBlock();
  cluster.getDataNodes().get(0).getFSDataset().finalizeBlock(block,false);
  cluster.deleteMeta(0,block);
  DistributedFileSystem newDfs=(DistributedFileSystem)FileSystem.newInstance(cluster.getConfiguration(0));
  count=0;
  while (count++ < 15 && !newDfs.recoverLease(file)) {
    Thread.sleep(1000);
  }
  assertTrue("File should be closed",newDfs.recoverLease(file));
}
