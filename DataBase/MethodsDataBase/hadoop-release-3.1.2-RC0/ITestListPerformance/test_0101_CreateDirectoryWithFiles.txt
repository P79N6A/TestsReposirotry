@Test public void test_0101_CreateDirectoryWithFiles() throws Exception {
  Assume.assumeFalse("Test path exists; skipping",fs.exists(TEST_DIR_PATH));
  ExecutorService executorService=Executors.newFixedThreadPool(threads);
  CloudBlobContainer container=testAccount.getRealContainer();
  final String basePath=(fs.getWorkingDirectory().toUri().getPath() + "/" + TEST_DIR_PATH+ "/").substring(1);
  ArrayList<Callable<Integer>> tasks=new ArrayList<>(threads);
  fs.mkdirs(TEST_DIR_PATH);
  ContractTestUtils.NanoTimer timer=new ContractTestUtils.NanoTimer();
  for (int i=0; i < threads; i++) {
    tasks.add(new Callable<Integer>(){
      public Integer call(){
        int written=0;
        for (int j=0; j < filesPerThread; j++) {
          String blobName=basePath + UUID.randomUUID().toString();
          try {
            CloudBlockBlob blob=container.getBlockBlobReference(blobName);
            blob.uploadText("");
            written++;
          }
 catch (          Exception e) {
            LOG.error("Filed to write {}",blobName,e);
            break;
          }
        }
        LOG.info("Thread completed with {} files written",written);
        return written;
      }
    }
);
  }
  List<Future<Integer>> futures=executorService.invokeAll(tasks,getTestTimeoutMillis(),TimeUnit.MILLISECONDS);
  long elapsedMs=timer.elapsedTimeMs();
  LOG.info("time to create files: {} millis",elapsedMs);
  for (  Future<Integer> future : futures) {
    assertTrue("Future timed out",future.isDone());
    assertEquals("Future did not write all files timed out",filesPerThread,future.get().intValue());
  }
}
