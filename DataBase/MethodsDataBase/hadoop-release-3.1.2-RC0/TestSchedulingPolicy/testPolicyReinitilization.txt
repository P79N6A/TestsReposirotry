@Test public void testPolicyReinitilization() throws IOException {
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"root\">");
  out.println("<schedulingPolicy>fair</schedulingPolicy>");
  out.println("    <queue name=\"child1\">");
  out.println("    <schedulingPolicy>fair</schedulingPolicy>");
  out.println("    </queue>");
  out.println("    <queue name=\"child2\">");
  out.println("    <schedulingPolicy>fair</schedulingPolicy>");
  out.println("    </queue>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  scheduler.init(conf);
  out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"root\">");
  out.println("<schedulingPolicy>fair</schedulingPolicy>");
  out.println("    <queue name=\"child1\">");
  out.println("    <schedulingPolicy>drf</schedulingPolicy>");
  out.println("    </queue>");
  out.println("    <queue name=\"child2\">");
  out.println("    <schedulingPolicy>fifo</schedulingPolicy>");
  out.println("    </queue>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  scheduler.reinitialize(conf,null);
  FSQueue child1=scheduler.getQueueManager().getQueue("child1");
  assertTrue("Queue 'child1' should still be 'fair' since 'drf' isn't allowed" + " if its parent policy is 'fair'.",child1.getPolicy() instanceof FairSharePolicy);
  FSQueue child2=scheduler.getQueueManager().getQueue("child2");
  assertTrue("Queue 'child2' should still be 'fair' there is a policy" + " violation while reinitialization.",child2.getPolicy() instanceof FairSharePolicy);
  out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"root\">");
  out.println("<schedulingPolicy>drf</schedulingPolicy>");
  out.println("    <queue name=\"child1\">");
  out.println("    <schedulingPolicy>drf</schedulingPolicy>");
  out.println("    </queue>");
  out.println("    <queue name=\"child2\">");
  out.println("    <schedulingPolicy>fifo</schedulingPolicy>");
  out.println("    </queue>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  scheduler.reinitialize(conf,null);
  child1=scheduler.getQueueManager().getQueue("child1");
  assertTrue("Queue 'child1' should be 'drf' since both 'root' and 'child1'" + " are 'drf'.",child1.getPolicy() instanceof DominantResourceFairnessPolicy);
  child2=scheduler.getQueueManager().getQueue("child2");
  assertTrue("Queue 'child2' should still be 'fifo' there is no policy" + " violation while reinitialization.",child2.getPolicy() instanceof FifoPolicy);
}
