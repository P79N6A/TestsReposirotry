/** 
 * Creates a file with stable  {@link DistributedFileSystem}. Tests the following 2 scenarios. 1. The decrypted data using  {@link WebHdfsFileSystem} should be same asinput data. 2. Gets the underlying raw encrypted stream and verifies that the encrypted data is different than input data.
 * @throws Exception
 */
@Test public void testWebhdfsRead() throws Exception {
  Path zonePath=new Path("/TestEncryptionZone");
  fsWrapper.mkdir(zonePath,FsPermission.getDirDefault(),false);
  dfsAdmin.createEncryptionZone(zonePath,TEST_KEY,NO_TRASH);
  final Path encryptedFilePath=new Path("/TestEncryptionZone/encryptedFile.txt");
  final Path rawPath=new Path("/.reserved/raw/TestEncryptionZone/encryptedFile.txt");
  final String content="hello world";
  DFSTestUtil.writeFile(fs,encryptedFilePath,content);
  final FileSystem webhdfs=WebHdfsTestUtil.getWebHdfsFileSystem(conf,WebHdfsConstants.WEBHDFS_SCHEME);
  InputStream decryptedIputStream=webhdfs.open(encryptedFilePath);
  verifyStreamsSame(content,decryptedIputStream);
  InputStream cryptoStream=webhdfs.open(encryptedFilePath).getWrappedStream();
  Assert.assertTrue("cryptoStream should be an instance of " + "CryptoInputStream",(cryptoStream instanceof CryptoInputStream));
  InputStream encryptedStream=((CryptoInputStream)cryptoStream).getWrappedStream();
  verifyRaw(content,encryptedStream,fs.open(rawPath));
}
