/** 
 * When restarting, RM should read from current state of store, including any updates from the previous RM instance.
 * @throws Exception
 */
@Test public void testRestartReadsFromUpdatedStore() throws Exception {
  ResourceManager rm1=new MockRM(conf);
  rm1.start();
  assertNull(((MutableConfScheduler)rm1.getResourceScheduler()).getConfiguration().get("key"));
  SchedConfUpdateInfo schedConfUpdateInfo=new SchedConfUpdateInfo();
  schedConfUpdateInfo.getGlobalParams().put("key","val");
  MutableConfigurationProvider confProvider=((MutableConfScheduler)rm1.getResourceScheduler()).getMutableConfProvider();
  UserGroupInformation user=UserGroupInformation.createUserForTesting(TEST_USER,new String[0]);
  confProvider.logAndApplyMutation(user,schedConfUpdateInfo);
  rm1.getResourceScheduler().reinitialize(conf,rm1.getRMContext());
  assertEquals("val",((MutableConfScheduler)rm1.getResourceScheduler()).getConfiguration().get("key"));
  confProvider.confirmPendingMutation(true);
  assertEquals("val",((MutableCSConfigurationProvider)confProvider).getConfStore().retrieve().get("key"));
  schedConfUpdateInfo.getGlobalParams().put("key","badVal");
  confProvider.logAndApplyMutation(user,schedConfUpdateInfo);
  rm1.close();
  ResourceManager rm2=new MockRM(conf);
  rm2.start();
  assertEquals("val",((MutableCSConfigurationProvider)((CapacityScheduler)rm2.getResourceScheduler()).getMutableConfProvider()).getConfStore().retrieve().get("key"));
  assertEquals("val",((MutableConfScheduler)rm2.getResourceScheduler()).getConfiguration().get("key"));
  rm2.close();
}
