@Test public void testReloginForLoginFromSubject() throws Exception {
  KerberosPrincipal principal1=new KerberosPrincipal("user1");
  File keytab1=new File(workDir,"user1.keytab");
  kdc.createPrincipal(keytab1,principal1.getName());
  KerberosPrincipal principal2=new KerberosPrincipal("user2");
  File keytab2=new File(workDir,"user2.keytab");
  kdc.createPrincipal(keytab2,principal2.getName());
  UserGroupInformation.loginUserFromKeytab(principal1.getName(),keytab1.getPath());
  final UserGroupInformation originalLoginUser=UserGroupInformation.getLoginUser();
  Assert.assertNotNull(getUser(originalLoginUser.getSubject()).getLogin());
  originalLoginUser.doAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws IOException {
      KerberosTicket originalLoginUserTicket=checkTicketAndKeytab(originalLoginUser,principal1,true);
      final Subject subject=UserGroupInformation.loginUserFromKeytabAndReturnUGI(principal2.getName(),keytab2.getPath()).getSubject();
      removeUser(subject);
      UserGroupInformation.loginUserFromSubject(subject);
      Assert.assertNull(getUser(subject).getLogin());
      UserGroupInformation extLoginUser=UserGroupInformation.getLoginUser();
      KerberosTicket extLoginUserTicket=checkTicketAndKeytab(extLoginUser,principal2,false);
      extLoginUser.reloginFromKeytab();
      Assert.assertSame(extLoginUserTicket,checkTicketAndKeytab(extLoginUser,principal2,false));
      Assert.assertSame(originalLoginUserTicket,checkTicketAndKeytab(originalLoginUser,principal1,true));
      originalLoginUser.reloginFromKeytab();
      Assert.assertNotSame(originalLoginUserTicket,checkTicketAndKeytab(originalLoginUser,principal1,true));
      Assert.assertSame(extLoginUserTicket,checkTicketAndKeytab(extLoginUser,principal2,false));
      return null;
    }
  }
);
}
