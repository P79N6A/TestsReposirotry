/** 
 * Testing a special case with snapshots. When the following steps happen: <pre> 1. Take snapshot s1 on dir. 2. Create new dir and files under subsubDir, which is descendant of dir. 3. Take snapshot s2 on dir. 4. Delete subsubDir. 5. Delete snapshot s2. </pre> When we merge the diff from s2 to s1 (since we deleted s2), we need to make sure all the files/dirs created after s1 should be destroyed. Otherwise we may save these files/dirs to the fsimage, and cause FileNotFound  Exception while loading fsimage.  
 */
@Test(timeout=300000) public void testSaveLoadImageAfterSnapshotDeletion() throws Exception {
  Path dir=new Path("/dir");
  Path subDir=new Path(dir,"subdir");
  Path subsubDir=new Path(subDir,"subsubdir");
  hdfs.mkdirs(subsubDir);
  SnapshotTestHelper.createSnapshot(hdfs,dir,"s1");
  Path newDir=new Path(subsubDir,"newdir");
  Path newFile=new Path(newDir,"newfile");
  hdfs.mkdirs(newDir);
  DFSTestUtil.createFile(hdfs,newFile,BLOCKSIZE,(short)1,seed);
  SnapshotTestHelper.createSnapshot(hdfs,dir,"s2");
  hdfs.delete(subsubDir,true);
  hdfs.deleteSnapshot(dir,"s2");
  cluster.shutdown();
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).format(false).build();
  cluster.waitActive();
  fsn=cluster.getNamesystem();
  hdfs=cluster.getFileSystem();
  hdfs.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
  hdfs.saveNamespace();
  hdfs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE);
  cluster.shutdown();
  cluster=new MiniDFSCluster.Builder(conf).format(false).numDataNodes(NUM_DATANODES).build();
  cluster.waitActive();
  fsn=cluster.getNamesystem();
  hdfs=cluster.getFileSystem();
}
