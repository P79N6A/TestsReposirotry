@Test(timeout=60000) public void testWebHdfsErasureCodingFiles() throws Exception {
  MiniDFSCluster cluster=null;
  final Configuration conf=WebHdfsTestUtil.createConf();
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
    cluster.waitActive();
    final DistributedFileSystem dfs=cluster.getFileSystem();
    dfs.enableErasureCodingPolicy(SystemErasureCodingPolicies.getByID(SystemErasureCodingPolicies.XOR_2_1_POLICY_ID).getName());
    final WebHdfsFileSystem webHdfs=WebHdfsTestUtil.getWebHdfsFileSystem(conf,WebHdfsConstants.WEBHDFS_SCHEME);
    final Path ecDir=new Path("/ec");
    dfs.mkdirs(ecDir);
    dfs.setErasureCodingPolicy(ecDir,SystemErasureCodingPolicies.getByID(SystemErasureCodingPolicies.XOR_2_1_POLICY_ID).getName());
    final Path ecFile=new Path(ecDir,"ec-file.log");
    DFSTestUtil.createFile(dfs,ecFile,1024 * 10,(short)1,0xFEED);
    final Path normalDir=new Path("/dir");
    dfs.mkdirs(normalDir);
    final Path normalFile=new Path(normalDir,"file.log");
    DFSTestUtil.createFile(dfs,normalFile,1024 * 10,(short)1,0xFEED);
    FileStatus expectedECDirStatus=dfs.getFileStatus(ecDir);
    FileStatus actualECDirStatus=webHdfs.getFileStatus(ecDir);
    Assert.assertEquals(expectedECDirStatus.isErasureCoded(),actualECDirStatus.isErasureCoded());
    ContractTestUtils.assertErasureCoded(dfs,ecDir);
    assertTrue(ecDir + " should have erasure coding set in " + "FileStatus#toString(): "+ actualECDirStatus,actualECDirStatus.toString().contains("isErasureCoded=true"));
    FileStatus expectedECFileStatus=dfs.getFileStatus(ecFile);
    FileStatus actualECFileStatus=webHdfs.getFileStatus(ecFile);
    Assert.assertEquals(expectedECFileStatus.isErasureCoded(),actualECFileStatus.isErasureCoded());
    ContractTestUtils.assertErasureCoded(dfs,ecFile);
    assertTrue(ecFile + " should have erasure coding set in " + "FileStatus#toString(): "+ actualECFileStatus,actualECFileStatus.toString().contains("isErasureCoded=true"));
    FileStatus expectedNormalDirStatus=dfs.getFileStatus(normalDir);
    FileStatus actualNormalDirStatus=webHdfs.getFileStatus(normalDir);
    Assert.assertEquals(expectedNormalDirStatus.isErasureCoded(),actualNormalDirStatus.isErasureCoded());
    ContractTestUtils.assertNotErasureCoded(dfs,normalDir);
    assertTrue(normalDir + " should have erasure coding unset in " + "FileStatus#toString(): "+ actualNormalDirStatus,actualNormalDirStatus.toString().contains("isErasureCoded=false"));
    FileStatus expectedNormalFileStatus=dfs.getFileStatus(normalFile);
    FileStatus actualNormalFileStatus=webHdfs.getFileStatus(normalDir);
    Assert.assertEquals(expectedNormalFileStatus.isErasureCoded(),actualNormalFileStatus.isErasureCoded());
    ContractTestUtils.assertNotErasureCoded(dfs,normalFile);
    assertTrue(normalFile + " should have erasure coding unset in " + "FileStatus#toString(): "+ actualNormalFileStatus,actualNormalFileStatus.toString().contains("isErasureCoded=false"));
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
