/** 
 * Test fsserver defaults response from  {@link DistributedFileSystem} and{@link WebHdfsFileSystem} are the same.
 * @throws Exception
 */
@Test public void testFsserverDefaults() throws Exception {
  MiniDFSCluster cluster=null;
  final Configuration conf=WebHdfsTestUtil.createConf();
  long blockSize=256 * 1024 * 1024;
  int bytesPerChecksum=256;
  int writePacketSize=128 * 1024;
  int replicationFactor=0;
  int bufferSize=1024;
  boolean encryptDataTransfer=true;
  long trashInterval=1;
  String checksumType="CRC32";
  byte policyId=(byte)7;
  conf.setLong(DFS_BLOCK_SIZE_KEY,blockSize);
  conf.setInt(DFS_BYTES_PER_CHECKSUM_KEY,bytesPerChecksum);
  conf.setInt(DFS_CLIENT_WRITE_PACKET_SIZE_KEY,writePacketSize);
  conf.setInt(DFS_REPLICATION_KEY,replicationFactor);
  conf.setInt(IO_FILE_BUFFER_SIZE_KEY,bufferSize);
  conf.setBoolean(DFS_ENCRYPT_DATA_TRANSFER_KEY,encryptDataTransfer);
  conf.setLong(FS_TRASH_INTERVAL_KEY,trashInterval);
  conf.set(DFS_CHECKSUM_TYPE_KEY,checksumType);
  FsServerDefaults originalServerDefaults=new FsServerDefaults(blockSize,bytesPerChecksum,writePacketSize,(short)replicationFactor,bufferSize,encryptDataTransfer,trashInterval,DataChecksum.Type.valueOf(checksumType),"",policyId);
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
    final DistributedFileSystem dfs=cluster.getFileSystem();
    final WebHdfsFileSystem webfs=WebHdfsTestUtil.getWebHdfsFileSystem(conf,WebHdfsConstants.WEBHDFS_SCHEME);
    FsServerDefaults dfsServerDefaults=dfs.getServerDefaults();
    FsServerDefaults webfsServerDefaults=webfs.getServerDefaults();
    compareFsServerDefaults(originalServerDefaults,dfsServerDefaults);
    compareFsServerDefaults(dfsServerDefaults,webfsServerDefaults);
    webfs.getServerDefaults();
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
