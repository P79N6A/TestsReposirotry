@Test(timeout=300000) public void testHAUtilClonesDelegationTokens() throws Exception {
  final Token<DelegationTokenIdentifier> token=getDelegationToken(fs,"JobTracker");
  UserGroupInformation ugi=UserGroupInformation.createRemoteUser("test");
  URI haUri=new URI("hdfs://my-ha-uri/");
  token.setService(HAUtilClient.buildTokenServiceForLogicalUri(haUri,HdfsConstants.HDFS_URI_SCHEME));
  ugi.addToken(token);
  Collection<InetSocketAddress> nnAddrs=new HashSet<InetSocketAddress>();
  nnAddrs.add(new InetSocketAddress("localhost",nn0.getNameNodeAddress().getPort()));
  nnAddrs.add(new InetSocketAddress("localhost",nn1.getNameNodeAddress().getPort()));
  HAUtilClient.cloneDelegationTokenForLogicalUri(ugi,haUri,nnAddrs);
  Collection<Token<? extends TokenIdentifier>> tokens=ugi.getTokens();
  assertEquals(3,tokens.size());
  LOG.info("Tokens:\n" + Joiner.on("\n").join(tokens));
  DelegationTokenSelector dts=new DelegationTokenSelector();
  for (  InetSocketAddress addr : nnAddrs) {
    Text ipcDtService=SecurityUtil.buildTokenService(addr);
    Token<DelegationTokenIdentifier> token2=dts.selectToken(ipcDtService,ugi.getTokens());
    assertNotNull(token2);
    assertArrayEquals(token.getIdentifier(),token2.getIdentifier());
    assertArrayEquals(token.getPassword(),token2.getPassword());
  }
  SecurityUtilTestHelper.setTokenServiceUseIp(false);
  for (  InetSocketAddress addr : nnAddrs) {
    Text ipcDtService=SecurityUtil.buildTokenService(addr);
    Token<DelegationTokenIdentifier> token2=dts.selectToken(ipcDtService,ugi.getTokens());
    assertNull(token2);
  }
  HAUtilClient.cloneDelegationTokenForLogicalUri(ugi,haUri,nnAddrs);
  for (  InetSocketAddress addr : nnAddrs) {
    Text ipcDtService=SecurityUtil.buildTokenService(addr);
    Token<DelegationTokenIdentifier> token2=dts.selectToken(ipcDtService,ugi.getTokens());
    assertNotNull(token2);
    assertArrayEquals(token.getIdentifier(),token2.getIdentifier());
    assertArrayEquals(token.getPassword(),token2.getPassword());
  }
}
