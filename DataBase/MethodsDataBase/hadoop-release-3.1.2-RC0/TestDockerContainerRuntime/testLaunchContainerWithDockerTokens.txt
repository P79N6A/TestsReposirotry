@Test public void testLaunchContainerWithDockerTokens() throws ContainerExecutionException, PrivilegedOperationException, IOException {
  File file=File.createTempFile("docker-client-config","runtime-test");
  file.deleteOnExit();
  BufferedWriter bw=new BufferedWriter(new FileWriter(file));
  bw.write(TestDockerClientConfigHandler.JSON);
  bw.close();
  Credentials credentials=DockerClientConfigHandler.readCredentialsFromConfigFile(new Path(file.toURI()),conf,appId);
  DataOutputBuffer dob=new DataOutputBuffer();
  credentials.writeTokenStorageToStream(dob);
  ByteBuffer tokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
  when(context.getTokens()).thenReturn(tokens);
  DockerLinuxContainerRuntime runtime=new DockerLinuxContainerRuntime(mockExecutor,mockCGroupsHandler);
  runtime.initialize(conf,nmContext);
  Set<PosixFilePermission> perms=PosixFilePermissions.fromString("rwxr-xr--");
  FileAttribute<Set<PosixFilePermission>> attr=PosixFilePermissions.asFileAttribute(perms);
  Path outDir=new Path(Files.createTempDirectory("docker-client-config-out",attr).toUri().getPath() + "/launch_container.sh");
  builder.setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,outDir);
  runtime.launchContainer(builder.build());
  PrivilegedOperation op=capturePrivilegedOperation();
  Assert.assertEquals(PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER,op.getOperationType());
  List<String> args=op.getArguments();
  int expectedArgs=12;
  int argsCounter=0;
  Assert.assertEquals(expectedArgs,args.size());
  Assert.assertEquals(runAsUser,args.get(argsCounter++));
  Assert.assertEquals(user,args.get(argsCounter++));
  Assert.assertEquals(Integer.toString(PrivilegedOperation.RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),args.get(argsCounter++));
  Assert.assertEquals(appId,args.get(argsCounter++));
  Assert.assertEquals(containerId,args.get(argsCounter++));
  Assert.assertEquals(containerWorkDir.toString(),args.get(argsCounter++));
  Assert.assertEquals(outDir.toUri().getPath(),args.get(argsCounter++));
  Assert.assertEquals(nmPrivateTokensPath.toUri().getPath(),args.get(argsCounter++));
  Assert.assertEquals(pidFilePath.toString(),args.get(argsCounter++));
  Assert.assertEquals(localDirs.get(0),args.get(argsCounter++));
  Assert.assertEquals(logDirs.get(0),args.get(argsCounter++));
  String dockerCommandFile=args.get(argsCounter++);
  List<String> dockerCommands=Files.readAllLines(Paths.get(dockerCommandFile),Charset.forName("UTF-8"));
  int expected=14;
  int counter=0;
  Assert.assertEquals(expected,dockerCommands.size());
  Assert.assertEquals("[docker-command-execution]",dockerCommands.get(counter++));
  Assert.assertEquals("  cap-add=SYS_CHROOT,NET_BIND_SERVICE",dockerCommands.get(counter++));
  Assert.assertEquals("  cap-drop=ALL",dockerCommands.get(counter++));
  Assert.assertEquals("  detach=true",dockerCommands.get(counter++));
  Assert.assertEquals("  docker-command=run",dockerCommands.get(counter++));
  Assert.assertEquals("  docker-config=" + outDir.getParent(),dockerCommands.get(counter++));
  Assert.assertEquals("  group-add=" + String.join(",",groups),dockerCommands.get(counter++));
  Assert.assertEquals("  image=busybox:latest",dockerCommands.get(counter++));
  Assert.assertEquals("  launch-command=bash,/test_container_work_dir/launch_container.sh",dockerCommands.get(counter++));
  Assert.assertEquals("  mounts=" + "/test_container_log_dir:/test_container_log_dir:rw," + "/test_application_local_dir:/test_application_local_dir:rw,"+ "/test_filecache_dir:/test_filecache_dir:ro,"+ "/test_user_filecache_dir:/test_user_filecache_dir:ro",dockerCommands.get(counter++));
  Assert.assertEquals("  name=container_e11_1518975676334_14532816_01_000001",dockerCommands.get(counter++));
  Assert.assertEquals("  net=host",dockerCommands.get(counter++));
  Assert.assertEquals("  user=" + uidGidPair,dockerCommands.get(counter++));
  Assert.assertEquals("  workdir=/test_container_work_dir",dockerCommands.get(counter++));
}
