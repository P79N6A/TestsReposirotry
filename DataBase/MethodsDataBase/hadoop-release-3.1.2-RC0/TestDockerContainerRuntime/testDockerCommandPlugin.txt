@Test public void testDockerCommandPlugin() throws Exception {
  DockerLinuxContainerRuntime runtime=new DockerLinuxContainerRuntime(mockExecutor,mockCGroupsHandler);
  when(mockExecutor.executePrivilegedOperation(anyList(),any(PrivilegedOperation.class),any(File.class),anyMap(),anyBoolean(),anyBoolean())).thenReturn(null);
  when(mockExecutor.executePrivilegedOperation(anyList(),any(PrivilegedOperation.class),any(File.class),anyMap(),anyBoolean(),anyBoolean())).thenReturn("volume1,local");
  Context mockNMContext=createMockNMContext();
  ResourcePluginManager rpm=mock(ResourcePluginManager.class);
  Map<String,ResourcePlugin> pluginsMap=new HashMap<>();
  ResourcePlugin plugin1=mock(ResourcePlugin.class);
  DockerCommandPlugin dockerCommandPlugin=new MockDockerCommandPlugin("volume1","local");
  when(plugin1.getDockerCommandPluginInstance()).thenReturn(dockerCommandPlugin);
  ResourcePlugin plugin2=mock(ResourcePlugin.class);
  pluginsMap.put("plugin1",plugin1);
  pluginsMap.put("plugin2",plugin2);
  when(rpm.getNameToPlugins()).thenReturn(pluginsMap);
  when(mockNMContext.getResourcePluginManager()).thenReturn(rpm);
  runtime.initialize(conf,mockNMContext);
  ContainerRuntimeContext containerRuntimeContext=builder.build();
  runtime.prepareContainer(containerRuntimeContext);
  checkVolumeCreateCommand();
  runtime.launchContainer(containerRuntimeContext);
  PrivilegedOperation op=capturePrivilegedOperationAndVerifyArgs();
  List<String> args=op.getArguments();
  String dockerCommandFile=args.get(11);
  List<String> dockerCommands=Files.readAllLines(Paths.get(dockerCommandFile),Charset.forName("UTF-8"));
  int expected=14;
  int counter=0;
  Assert.assertEquals(expected,dockerCommands.size());
  Assert.assertEquals("[docker-command-execution]",dockerCommands.get(counter++));
  Assert.assertEquals("  cap-add=SYS_CHROOT,NET_BIND_SERVICE",dockerCommands.get(counter++));
  Assert.assertEquals("  cap-drop=ALL",dockerCommands.get(counter++));
  Assert.assertEquals("  detach=true",dockerCommands.get(counter++));
  Assert.assertEquals("  docker-command=run",dockerCommands.get(counter++));
  Assert.assertEquals("  group-add=" + String.join(",",groups),dockerCommands.get(counter++));
  Assert.assertEquals("  image=busybox:latest",dockerCommands.get(counter++));
  Assert.assertEquals("  launch-command=bash,/test_container_work_dir/launch_container.sh",dockerCommands.get(counter++));
  Assert.assertEquals("  mounts=" + "/test_container_log_dir:/test_container_log_dir:rw," + "/test_application_local_dir:/test_application_local_dir:rw,"+ "/test_filecache_dir:/test_filecache_dir:ro,"+ "/test_user_filecache_dir:/test_user_filecache_dir:ro,"+ "/source/path:/destination/path:ro",dockerCommands.get(counter++));
  Assert.assertEquals("  name=container_e11_1518975676334_14532816_01_000001",dockerCommands.get(counter++));
  Assert.assertEquals("  net=host",dockerCommands.get(counter++));
  Assert.assertEquals("  user=" + uidGidPair,dockerCommands.get(counter++));
  Assert.assertEquals("  volume-driver=driver-1",dockerCommands.get(counter++));
  Assert.assertEquals("  workdir=/test_container_work_dir",dockerCommands.get(counter));
}
