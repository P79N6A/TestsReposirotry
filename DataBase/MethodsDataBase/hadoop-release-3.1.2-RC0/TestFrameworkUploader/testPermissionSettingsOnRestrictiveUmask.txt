@Test public void testPermissionSettingsOnRestrictiveUmask() throws Exception {
  File parent=new File(testDir);
  parent.deleteOnExit();
  MiniDFSCluster cluster=null;
  try {
    Assert.assertTrue("Directory creation failed",parent.mkdirs());
    Configuration hdfsConf=new HdfsConfiguration();
    String namenodeDir=new File(MiniDFSCluster.getBaseDirectory(),"name").getAbsolutePath();
    hdfsConf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,namenodeDir);
    hdfsConf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,namenodeDir);
    hdfsConf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,"027");
    cluster=new MiniDFSCluster.Builder(hdfsConf).numDataNodes(1).build();
    DistributedFileSystem dfs=cluster.getFileSystem();
    cluster.waitActive();
    File file1=new File(parent,"a.jar");
    file1.createNewFile();
    File file2=new File(parent,"b.jar");
    file2.createNewFile();
    File file3=new File(parent,"c.jar");
    file3.createNewFile();
    FrameworkUploader uploader=new FrameworkUploader();
    uploader.whitelist="";
    uploader.blacklist="";
    uploader.input=parent.getAbsolutePath() + File.separatorChar + "*";
    String hdfsUri=hdfsConf.get(FS_DEFAULT_NAME_KEY);
    String targetPath="/test.tar.gz";
    uploader.target=hdfsUri + targetPath;
    uploader.acceptableReplication=1;
    uploader.setConf(hdfsConf);
    uploader.collectPackages();
    uploader.buildPackage();
    FileStatus fileStatus=dfs.getFileStatus(new Path(targetPath));
    FsPermission perm=fileStatus.getPermission();
    Assert.assertEquals("Permissions",new FsPermission(0644),perm);
  }
  finally {
    if (cluster != null) {
      cluster.close();
    }
    FileUtils.deleteDirectory(parent);
  }
}
