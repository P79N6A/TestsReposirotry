@Test(timeout=1000) public void testGetEnvDependencies(){
  final Set<String> expected=new HashSet<>();
  final ContainerLaunch.ShellScriptBuilder bash=ContainerLaunch.ShellScriptBuilder.create(Shell.OSType.OS_TYPE_LINUX);
  String s;
  s=null;
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="A";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="\\$A";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="$$";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="$1";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="handle \"'$A'\" simple quotes";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="$ crash test for StringArrayOutOfBoundException";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="${ crash test for StringArrayOutOfBoundException";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="${# crash test for StringArrayOutOfBoundException";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="crash test for StringArrayOutOfBoundException $";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="crash test for StringArrayOutOfBoundException ${";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="crash test for StringArrayOutOfBoundException ${#";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  expected.add("A");
  s="$A";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="${A}";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="${#A[*]}";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="in the $A midlle";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  expected.add("B");
  s="${A:-$B} var in var";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="${A}$B var outside var";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  expected.add("C");
  s="$A:$B:$C:pathlist var";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  s="${A}/foo/bar:$B:${C}:pathlist var";
  Assert.assertEquals("failed to parse " + s,expected,bash.getEnvDependencies(s));
  ContainerLaunch.ShellScriptBuilder win=ContainerLaunch.ShellScriptBuilder.create(Shell.OSType.OS_TYPE_WIN);
  expected.clear();
  s=null;
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  s="";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  s="A";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  s="%%%%%%";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  s="%%A%";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  s="%A";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  s="%A:";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  expected.add("A");
  s="%A%";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  s="%%%A%";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  s="%%C%A%";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  s="%A:~-1%";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  s="%A%B%";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  s="%A%%%%%B%";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  expected.add("B");
  s="%A%%B%";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  s="%A%%%%B%";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  expected.add("C");
  s="%A%:%B%:%C%:pathlist var";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
  s="%A%\\foo\\bar:%B%:%C%:pathlist var";
  Assert.assertEquals("failed to parse " + s,expected,win.getEnvDependencies(s));
}
