@Test public void testValidEnvVariableSubstitution() throws IOException {
  File shellFile=null;
  try {
    shellFile=Shell.appendScriptExtension(tmpDir,"hello");
    Map<Path,List<String>> resources=new HashMap<Path,List<String>>();
    FileOutputStream fos=new FileOutputStream(shellFile);
    FileUtil.setExecutable(shellFile,true);
    Map<String,String> env=new LinkedHashMap<String,String>();
    env.put("foo","2.4.6");
    env.put("testVar","version${foo}");
    List<String> commands=new ArrayList<String>();
    DefaultContainerExecutor executor=new DefaultContainerExecutor();
    Configuration execConf=new Configuration();
    execConf.setBoolean(YarnConfiguration.NM_LOG_CONTAINER_DEBUG_INFO,false);
    executor.setConf(execConf);
    LinkedHashSet<String> nmVars=new LinkedHashSet<>();
    executor.writeLaunchEnv(fos,env,resources,commands,new Path(localLogDir.getAbsolutePath()),user,nmVars);
    fos.flush();
    fos.close();
    Map<String,String> cmdEnv=new HashMap<String,String>();
    cmdEnv.put("LANG","C");
    Shell.ShellCommandExecutor shexc=new Shell.ShellCommandExecutor(new String[]{shellFile.getAbsolutePath()},tmpDir,cmdEnv);
    try {
      shexc.execute();
    }
 catch (    ExitCodeException e) {
      Assert.fail("Should not catch exception");
    }
    Assert.assertTrue(shexc.getExitCode() == 0);
  }
  finally {
    if (shellFile != null && shellFile.exists()) {
      shellFile.delete();
    }
  }
}
