@Test(timeout=5000) public void testOrderEnvByDependencies(){
  final Map<String,Set<String>> fakeDeps=new HashMap<>();
  fakeDeps.put("Aval",Collections.emptySet());
  fakeDeps.put("Bval",asSet("A"));
  fakeDeps.put("Cval",asSet("B"));
  fakeDeps.put("Dval",asSet("A","B"));
  fakeDeps.put("cyclic_Aval",asSet("cyclic_B"));
  fakeDeps.put("cyclic_Bval",asSet("cyclic_C"));
  fakeDeps.put("cyclic_Cval",asSet("cyclic_A","C"));
  final ContainerLaunch.ShellScriptBuilder sb=new ContainerLaunch.ShellScriptBuilder(){
    @Override public Set<String> getEnvDependencies(    final String envVal){
      return fakeDeps.get(envVal);
    }
    @Override protected void mkdir(    Path path) throws IOException {
    }
    @Override public void listDebugInformation(    Path output) throws IOException {
    }
    @Override protected void link(    Path src,    Path dst) throws IOException {
    }
    @Override public void env(    String key,    String value) throws IOException {
    }
    @Override public void whitelistedEnv(    String key,    String value) throws IOException {
    }
    @Override public void copyDebugInformation(    Path src,    Path dst) throws IOException {
    }
    @Override public void command(    List<String> command) throws IOException {
    }
    @Override public void setStdOut(    Path stdout) throws IOException {
    }
    @Override public void setStdErr(    Path stdout) throws IOException {
    }
    @Override public void echo(    String echoStr) throws IOException {
    }
  }
;
  try {
    Assert.assertNull("Ordering a null env map must return a null value.",sb.orderEnvByDependencies(null));
  }
 catch (  Exception e) {
    Assert.fail("null value is to be supported");
  }
  try {
    Assert.assertEquals("Ordering an empty env map must return an empty map.",0,sb.orderEnvByDependencies(Collections.emptyMap()).size());
  }
 catch (  Exception e) {
    Assert.fail("Empty map is to be supported");
  }
  final Map<String,String> combination=new LinkedHashMap<>();
class TestEnv {
    private final String key;
    private final String value;
    private boolean used=false;
    TestEnv(    String key,    String value){
      this.key=key;
      this.value=value;
    }
    void generateCombinationAndTest(    int nbItems,    final ArrayList<TestEnv> keylist){
      used=true;
      combination.put(key,value);
      try {
        if (nbItems == 0) {
          assertOrderEnvByDependencies(combination,sb);
          return;
        }
        for (        TestEnv localEnv : keylist) {
          if (!localEnv.used) {
            localEnv.generateCombinationAndTest(nbItems - 1,keylist);
          }
        }
      }
  finally {
        combination.remove(key);
        used=false;
      }
    }
  }
  final ArrayList<TestEnv> keys=new ArrayList<>();
  for (  String key : new String[]{"A","B","C","D","cyclic_A","cyclic_B","cyclic_C"}) {
    keys.add(new TestEnv(key,key + "val"));
  }
  for (int count=keys.size(); count > 0; count--) {
    for (    TestEnv env : keys) {
      env.generateCombinationAndTest(count,keys);
    }
  }
}
