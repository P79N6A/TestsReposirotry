/** 
 * Test container launch fault.
 * @throws Exception
 */
@Test public void testContainerLaunchOnConfigurationError() throws Exception {
  Dispatcher dispatcher=mock(Dispatcher.class);
  EventHandler handler=mock(EventHandler.class);
  when(dispatcher.getEventHandler()).thenReturn(handler);
  Application app=mock(Application.class);
  ApplicationId appId=mock(ApplicationId.class);
  when(appId.toString()).thenReturn("1");
  when(app.getAppId()).thenReturn(appId);
  Container container=mock(Container.class);
  ContainerId id=mock(ContainerId.class);
  when(id.toString()).thenReturn("1");
  when(container.getContainerId()).thenReturn(id);
  when(container.getUser()).thenReturn("user");
  ContainerLaunchContext clc=mock(ContainerLaunchContext.class);
  when(clc.getCommands()).thenReturn(Lists.newArrayList());
  when(container.getLaunchContext()).thenReturn(clc);
  Credentials credentials=mock(Credentials.class);
  when(container.getCredentials()).thenReturn(credentials);
  ContainerExecutor returnConfigError=mock(ContainerExecutor.class);
  when(returnConfigError.launchContainer(any())).thenThrow(new ConfigurationException("Mock configuration error"));
  ContainerLaunch launchConfigError=new ContainerLaunch(distContext,conf,dispatcher,returnConfigError,app,container,dirsHandler,containerManager);
  NodeStatusUpdater updater=mock(NodeStatusUpdater.class);
  distContext.setNodeStatusUpdater(updater);
  launchConfigError.call();
  verify(updater,atLeastOnce()).reportException(any());
  ContainerExecutor returnOtherError=mock(ContainerExecutor.class);
  when(returnOtherError.launchContainer(any())).thenThrow(new IOException("Mock configuration error"));
  ContainerLaunch launchOtherError=new ContainerLaunch(distContext,conf,dispatcher,returnOtherError,app,container,dirsHandler,containerManager);
  NodeStatusUpdater updaterNoCall=mock(NodeStatusUpdater.class);
  distContext.setNodeStatusUpdater(updaterNoCall);
  launchOtherError.call();
  verify(updaterNoCall,never()).reportException(any());
}
