@Test public void testInitializeResourcesMap() throws Exception {
  String[] empty={"",""};
  String[] res1={"resource1","m"};
  String[] res2={"resource2","G"};
  String[][] test1={empty};
  String[][] test2={res1};
  String[][] test3={res2};
  String[][] test4={res1,res2};
  String[][][] allTests={test1,test2,test3,test4};
  for (  String[][] test : allTests) {
    Configuration conf=new YarnConfiguration();
    String resSt="";
    for (    String[] resources : test) {
      resSt+=(resources[0] + ",");
    }
    resSt=resSt.substring(0,resSt.length() - 1);
    conf.set(YarnConfiguration.RESOURCE_TYPES,resSt);
    for (    String[] resources : test) {
      String name=YarnConfiguration.RESOURCE_TYPES + "." + resources[0]+ ".units";
      conf.set(name,resources[1]);
    }
    Map<String,ResourceInformation> ret=ResourceUtils.resetResourceTypes(conf);
    int len=3;
    if (test == test1) {
      len=2;
    }
 else     if (test == test4) {
      len=4;
    }
    Assert.assertEquals(len,ret.size());
    for (    String[] resources : test) {
      if (resources[0].length() == 0) {
        continue;
      }
      Assert.assertTrue(ret.containsKey(resources[0]));
      ResourceInformation resInfo=ret.get(resources[0]);
      Assert.assertEquals(resources[1],resInfo.getUnits());
      Assert.assertEquals(ResourceTypes.COUNTABLE,resInfo.getResourceType());
    }
    Assert.assertTrue(ret.containsKey("memory-mb"));
    ResourceInformation memInfo=ret.get("memory-mb");
    Assert.assertEquals("Mi",memInfo.getUnits());
    Assert.assertEquals(ResourceTypes.COUNTABLE,memInfo.getResourceType());
    Assert.assertTrue(ret.containsKey("vcores"));
    ResourceInformation vcoresInfo=ret.get("vcores");
    Assert.assertEquals("",vcoresInfo.getUnits());
    Assert.assertEquals(ResourceTypes.COUNTABLE,vcoresInfo.getResourceType());
  }
}
