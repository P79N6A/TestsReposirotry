@Test public void testContainerSchedulerRecovery() throws Exception {
  conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED,true);
  conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED,true);
  NMStateStoreService stateStore=new NMMemoryStateStoreService();
  stateStore.init(conf);
  stateStore.start();
  context=createContext(conf,stateStore);
  ContainerManagerImpl cm=createContainerManager(context,delSrvc);
  ((NMContext)context).setContainerManager(cm);
  cm.init(conf);
  cm.start();
  ApplicationId appId=ApplicationId.newInstance(0,1);
  ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId,1);
  ContainerId cid=ContainerId.newContainerId(attemptId,1);
  commonLaunchContainer(appId,cid,cm);
  Application app=context.getApplications().get(appId);
  assertNotNull(app);
  ResourceUtilization utilization=ResourceUtilization.newInstance(1024,2048,0.25F);
  assertEquals(cm.getContainerScheduler().getNumRunningContainers(),1);
  assertEquals(utilization,cm.getContainerScheduler().getCurrentUtilization());
  cm.stop();
  context=createContext(conf,stateStore);
  cm=createContainerManager(context,delSrvc);
  ((NMContext)context).setContainerManager(cm);
  cm.init(conf);
  cm.start();
  assertEquals(1,context.getApplications().size());
  app=context.getApplications().get(appId);
  assertNotNull(app);
  waitForNMContainerState(cm,cid,ContainerState.RUNNING);
  assertEquals(cm.getContainerScheduler().getNumRunningContainers(),1);
  assertEquals(utilization,cm.getContainerScheduler().getCurrentUtilization());
  cm.stop();
}
