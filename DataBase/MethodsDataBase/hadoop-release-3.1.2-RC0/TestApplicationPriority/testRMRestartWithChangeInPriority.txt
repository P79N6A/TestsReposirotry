@Test(timeout=180000) public void testRMRestartWithChangeInPriority() throws Exception {
  conf.setBoolean(YarnConfiguration.RECOVERY_ENABLED,true);
  conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,false);
  conf.set(YarnConfiguration.RM_STORE,MemoryRMStateStore.class.getName());
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
  conf.setInt(YarnConfiguration.MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY,10);
  MockRM rm1=new MockRM(conf);
  MemoryRMStateStore memStore=(MemoryRMStateStore)rm1.getRMStateStore();
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  Priority appPriority1=Priority.newInstance(5);
  RMApp app1=rm1.submitApp(1 * GB,appPriority1);
  MockAM am1=MockRM.launchAM(app1,rm1,nm1);
  am1.registerAppAttempt();
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  Priority appPriority2=Priority.newInstance(8);
  UserGroupInformation ugi=UserGroupInformation.createRemoteUser(app1.getUser());
  cs.updateApplicationPriority(appPriority2,app1.getApplicationId(),null,ugi);
  Thread.sleep(1000);
  MockRM rm2=new MockRM(conf,memStore);
  rm2.start();
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  Assert.assertEquals(1,rm2.getRMContext().getRMApps().size());
  RMApp loadedApp=rm2.getRMContext().getRMApps().get(app1.getApplicationId());
  Assert.assertEquals(appPriority2,loadedApp.getApplicationPriority());
  rm2.stop();
  rm1.stop();
}
