/** 
 * In this testcase, client is dataNodes[0], but dataNodes[0] is not qualified to be chosen. So the 1st replica should be placed on dataNodes[1],  the 2nd replica should be placed on a different rack, the 3rd replica should be placed on the same rack as the 2nd replica but in different nodegroup, and the rest should be placed on the third rack.
 * @throws Exception
 */
@Test public void testChooseTarget3() throws Exception {
  updateHeartbeatWithUsage(dataNodes[0],2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,(HdfsServerConstants.MIN_BLOCKS_FOR_WRITE - 1) * BLOCK_SIZE,0L,0L,0L,0,0);
  DatanodeStorageInfo[] targets;
  targets=chooseTarget(0);
  assertEquals(targets.length,0);
  targets=chooseTarget(1);
  assertEquals(targets.length,1);
  assertEquals(storages[1],targets[0]);
  targets=chooseTarget(2);
  assertEquals(targets.length,2);
  assertEquals(storages[1],targets[0]);
  assertFalse(isOnSameRack(targets[0],targets[1]));
  targets=chooseTarget(3);
  assertEquals(targets.length,3);
  assertEquals(storages[1],targets[0]);
  assertTrue(isOnSameRack(targets[1],targets[2]));
  assertFalse(isOnSameRack(targets[0],targets[1]));
  targets=chooseTarget(4);
  assertEquals(targets.length,4);
  assertEquals(storages[1],targets[0]);
  assertTrue(cluster.isNodeGroupAware());
  verifyNoTwoTargetsOnSameNodeGroup(targets);
  assertTrue(isOnSameRack(targets[1],targets[2]) || isOnSameRack(targets[2],targets[3]));
  updateHeartbeatWithUsage(dataNodes[0],2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,0L,0L,0,0);
}
