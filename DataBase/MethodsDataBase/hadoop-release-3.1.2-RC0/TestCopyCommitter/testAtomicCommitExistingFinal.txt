@Test public void testAtomicCommitExistingFinal() throws IOException {
  TaskAttemptContext taskAttemptContext=getTaskAttemptContext(config);
  JobContext jobContext=new JobContextImpl(taskAttemptContext.getConfiguration(),taskAttemptContext.getTaskAttemptID().getJobID());
  Configuration conf=jobContext.getConfiguration();
  String workPath="/tmp1/" + String.valueOf(rand.nextLong());
  String finalPath="/tmp1/" + String.valueOf(rand.nextLong());
  FileSystem fs=null;
  try {
    OutputCommitter committer=new CopyCommitter(null,taskAttemptContext);
    fs=FileSystem.get(conf);
    fs.mkdirs(new Path(workPath));
    fs.mkdirs(new Path(finalPath));
    conf.set(DistCpConstants.CONF_LABEL_TARGET_WORK_PATH,workPath);
    conf.set(DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH,finalPath);
    conf.setBoolean(DistCpConstants.CONF_LABEL_ATOMIC_COPY,true);
    assertPathExists(fs,"Work path",new Path(workPath));
    assertPathExists(fs,"Final path",new Path(finalPath));
    try {
      committer.commitJob(jobContext);
      Assert.fail("Should not be able to atomic-commit to pre-existing path.");
    }
 catch (    Exception exception) {
      assertPathExists(fs,"Work path",new Path(workPath));
      assertPathExists(fs,"Final path",new Path(finalPath));
      LOG.info("Atomic-commit Test pass.");
    }
  }
  finally {
    TestDistCpUtils.delete(fs,workPath);
    TestDistCpUtils.delete(fs,finalPath);
    conf.setBoolean(DistCpConstants.CONF_LABEL_ATOMIC_COPY,false);
  }
}
