@Test public void testLegacyBlockTokenBytesIsLegacy() throws IOException {
  final boolean useProto=false;
  BlockTokenSecretManager sm=new BlockTokenSecretManager(blockKeyUpdateInterval,blockTokenLifetime,0,1,"fake-pool",null,useProto);
  Token<BlockTokenIdentifier> token=sm.generateToken(block1,EnumSet.noneOf(BlockTokenIdentifier.AccessMode.class),new StorageType[]{StorageType.DEFAULT},new String[0]);
  final byte[] tokenBytes=token.getIdentifier();
  BlockTokenIdentifier legacyToken=new BlockTokenIdentifier();
  BlockTokenIdentifier protobufToken=new BlockTokenIdentifier();
  BlockTokenIdentifier readToken=new BlockTokenIdentifier();
  DataInputBuffer dib=new DataInputBuffer();
  dib.reset(tokenBytes,tokenBytes.length);
  legacyToken.readFieldsLegacy(dib);
  boolean invalidProtobufMessage=false;
  try {
    dib.reset(tokenBytes,tokenBytes.length);
    protobufToken.readFieldsProtobuf(dib);
  }
 catch (  IOException e) {
    invalidProtobufMessage=true;
  }
  assertTrue(invalidProtobufMessage);
  dib.reset(tokenBytes,tokenBytes.length);
  readToken.readFields(dib);
  assertEquals(legacyToken,readToken);
  assertNotEquals(protobufToken,readToken);
}
