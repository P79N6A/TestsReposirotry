@Test public void testSortShares(){
  float[][] ratios1={{0.3f,2.0f},{0.2f,1.0f},{0.4f,0.1f}};
  float[][] ratios2={{0.2f,9.0f},{0.3f,2.0f},{0.25f,0.1f}};
  float[][] expected1={{0.4f,0.1f},{0.3f,2.0f},{0.2f,1.0f}};
  float[][] expected2={{0.3f,2.0f},{0.25f,0.1f},{0.2f,9.0f}};
  DominantResourceFairnessComparatorN comparator=new DominantResourceFairnessComparatorN();
  comparator.sortRatios(ratios1,ratios2);
  for (int i=0; i < ratios1.length; i++) {
    Assert.assertArrayEquals("The shares array was not sorted into the " + "expected order: incorrect inner array encountered",expected1[i],ratios1[i],0.00001f);
    Assert.assertArrayEquals("The shares array was not sorted into the " + "expected order: incorrect inner array encountered",expected2[i],ratios2[i],0.00001f);
  }
}
