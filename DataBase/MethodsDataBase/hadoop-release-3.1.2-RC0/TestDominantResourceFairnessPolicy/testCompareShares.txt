@Test public void testCompareShares(){
  float[][] ratios1={{0.4f,0.1f,2.0f},{0.3f,2.0f,0.1f},{0.2f,1.0f,9.0f}};
  float[][] ratios2={{0.3f,2.0f,1.0f},{0.2f,0.1f,0.5f},{0.2f,1.0f,2.0f}};
  float[][] ratios3={{0.3f,2.0f,1.0f},{0.2f,0.1f,2.0f},{0.1f,2.0f,1.0f}};
  DominantResourceFairnessComparatorN comparator=new DominantResourceFairnessComparatorN();
  int ret=comparator.compareRatios(ratios1,ratios2,0);
  assertEquals("Expected the first array to be larger because the first " + "usage ratio element is larger",1,ret);
  ret=comparator.compareRatios(ratios2,ratios1,0);
  assertEquals("Expected the first array to be smaller because the first " + "usage ratio element is smaller",-1,ret);
  ret=comparator.compareRatios(ratios1,ratios1,0);
  assertEquals("Expected the arrays to be equal, since they're the same " + "array",0,ret);
  ret=comparator.compareRatios(ratios2,ratios2,0);
  assertEquals("Expected the arrays to be equal, since they're the same " + "array",0,ret);
  ret=comparator.compareRatios(ratios3,ratios3,0);
  assertEquals("Expected the arrays to be equal, since they're the same " + "array",0,ret);
  ret=comparator.compareRatios(ratios2,ratios3,0);
  assertEquals("Expected the first array to be larger because the last " + "usage ratio element is larger, and all other elements are equal",1,ret);
  ret=comparator.compareRatios(ratios1,ratios2,1);
  assertEquals("Expected the first array to be smaller because the first " + "fair share ratio element is smaller",-1,ret);
  ret=comparator.compareRatios(ratios2,ratios1,1);
  assertEquals("Expected the first array to be larger because the first " + "fair share ratio element is larger",1,ret);
  ret=comparator.compareRatios(ratios1,ratios1,1);
  assertEquals("Expected the arrays to be equal, since they're the same " + "array",0,ret);
  ret=comparator.compareRatios(ratios2,ratios2,1);
  assertEquals("Expected the arrays to be equal, since they're the same " + "array",0,ret);
  ret=comparator.compareRatios(ratios3,ratios3,1);
  assertEquals("Expected the arrays to be equal, since they're the same " + "array",0,ret);
  ret=comparator.compareRatios(ratios2,ratios3,1);
  assertEquals("Expected the first array to be smaller because the last " + "usage ratio element is smaller, and all other elements are equal",-1,ret);
  ret=comparator.compareRatios(ratios1,ratios2,2);
  assertEquals("Expected the first array to be larger because the first " + "min share ratio element is larger",1,ret);
  ret=comparator.compareRatios(ratios2,ratios1,2);
  assertEquals("Expected the first array to be smaller because the first " + "min share ratio element is smaller",-1,ret);
  ret=comparator.compareRatios(ratios1,ratios1,2);
  assertEquals("Expected the arrays to be equal, since they're the same " + "array",0,ret);
  ret=comparator.compareRatios(ratios2,ratios2,2);
  assertEquals("Expected the arrays to be equal, since they're the same " + "array",0,ret);
  ret=comparator.compareRatios(ratios3,ratios3,2);
  assertEquals("Expected the arrays to be equal, since they're the same " + "array",0,ret);
  ret=comparator.compareRatios(ratios2,ratios3,2);
  assertEquals("Expected the first array to be smaller because the second " + "min share ratio element is smaller, and all the first elements are " + "equal",-1,ret);
}
