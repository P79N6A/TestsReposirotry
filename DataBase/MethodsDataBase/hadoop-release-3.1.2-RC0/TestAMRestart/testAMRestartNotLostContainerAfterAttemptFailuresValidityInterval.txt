@Test(timeout=20000) public void testAMRestartNotLostContainerAfterAttemptFailuresValidityInterval() throws Exception {
  getConf().setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
  MockRM rm1=new MockRM(getConf());
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",8000,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMAppImpl app1=(RMAppImpl)rm1.submitApp(200,10000,true);
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  int NUM_CONTAINERS=2;
  allocateContainers(nm1,am1,NUM_CONTAINERS);
  nm1.nodeHeartbeat(am1.getApplicationAttemptId(),2,ContainerState.RUNNING);
  ContainerId containerId2=ContainerId.newContainerId(am1.getApplicationAttemptId(),2);
  rm1.waitForState(nm1,containerId2,RMContainerState.RUNNING);
  nm1.nodeHeartbeat(am1.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  rm1.waitForState(am1.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  rm1.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  Assert.assertEquals(2,app1.getAppAttempts().size());
  RMAppAttempt attempt2=app1.getCurrentAppAttempt();
  MockAM am2=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  rm1.waitForState(am2.getApplicationAttemptId(),RMAppAttemptState.RUNNING);
  Thread.sleep(10 * 1000);
  nm1.nodeHeartbeat(am2.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  rm1.waitForState(am2.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  rm1.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  Assert.assertEquals(3,app1.getAppAttempts().size());
  MockAM am3=rm1.launchAM(app1,rm1,nm1);
  RegisterApplicationMasterResponse registerResponse=am3.registerAppAttempt();
  Assert.assertEquals(1,registerResponse.getContainersFromPreviousAttempts().size());
  boolean containerId2Exists=false;
  Container container=registerResponse.getContainersFromPreviousAttempts().get(0);
  if (container.getId().equals(containerId2)) {
    containerId2Exists=true;
  }
  Assert.assertTrue(containerId2Exists);
  rm1.waitForState(app1.getApplicationId(),RMAppState.RUNNING);
  rm1.stop();
}
