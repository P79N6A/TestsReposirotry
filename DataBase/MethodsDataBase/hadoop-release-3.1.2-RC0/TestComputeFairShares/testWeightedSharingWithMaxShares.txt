/** 
 * Weighted sharing test where pools 1 and 2 are now given lower demands than above. Pool 1 stops at 10 slots, leaving 35. If the remaining pools split this into a 1:1:0.5 ratio, they would get 14:14:7 slots respectively, but pool 2's demand is only 11, so it only gets 11. The remaining 2 pools split the 24 slots left into a 1:0.5 ratio, getting 16 and 8 slots respectively.
 */
@Test public void testWeightedSharingWithMaxShares(){
  scheds.add(new FakeSchedulable(0,10,2.0f));
  scheds.add(new FakeSchedulable(0,11,1.0f));
  scheds.add(new FakeSchedulable(0,30,1.0f));
  scheds.add(new FakeSchedulable(0,20,0.5f));
  ComputeFairShares.computeShares(scheds,Resources.createResource(45),ResourceInformation.MEMORY_MB.getName());
  verifyMemoryShares(10,11,16,8);
}
