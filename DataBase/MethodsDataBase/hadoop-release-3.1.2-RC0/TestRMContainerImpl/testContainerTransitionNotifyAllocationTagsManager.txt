@Test public void testContainerTransitionNotifyAllocationTagsManager() throws Exception {
  DrainDispatcher drainDispatcher=new DrainDispatcher();
  EventHandler<RMAppAttemptEvent> appAttemptEventHandler=mock(EventHandler.class);
  EventHandler generic=mock(EventHandler.class);
  drainDispatcher.register(RMAppAttemptEventType.class,appAttemptEventHandler);
  drainDispatcher.register(RMNodeEventType.class,generic);
  drainDispatcher.init(new YarnConfiguration());
  drainDispatcher.start();
  NodeId nodeId=BuilderUtils.newNodeId("host",3425);
  ApplicationId appId=BuilderUtils.newApplicationId(1,1);
  ApplicationAttemptId appAttemptId=BuilderUtils.newApplicationAttemptId(appId,1);
  ContainerId containerId=BuilderUtils.newContainerId(appAttemptId,1);
  ContainerAllocationExpirer expirer=mock(ContainerAllocationExpirer.class);
  Resource resource=BuilderUtils.newResource(512,1);
  Priority priority=BuilderUtils.newPriority(5);
  Container container=BuilderUtils.newContainer(containerId,nodeId,"host:3465",resource,priority,null);
  container.setAllocationTags(ImmutableSet.of("mapper"));
  ConcurrentMap<ApplicationId,RMApp> rmApps=spy(new ConcurrentHashMap<ApplicationId,RMApp>());
  RMApp rmApp=mock(RMApp.class);
  when(rmApp.getRMAppAttempt(Matchers.any())).thenReturn(null);
  Mockito.doReturn(rmApp).when(rmApps).get(Matchers.any());
  RMApplicationHistoryWriter writer=mock(RMApplicationHistoryWriter.class);
  SystemMetricsPublisher publisher=mock(SystemMetricsPublisher.class);
  RMContext rmContext=mock(RMContext.class);
  AllocationTagsManager tagsManager=new AllocationTagsManager(rmContext);
  when(rmContext.getDispatcher()).thenReturn(drainDispatcher);
  when(rmContext.getContainerAllocationExpirer()).thenReturn(expirer);
  when(rmContext.getRMApplicationHistoryWriter()).thenReturn(writer);
  when(rmContext.getRMApps()).thenReturn(rmApps);
  when(rmContext.getSystemMetricsPublisher()).thenReturn(publisher);
  when(rmContext.getAllocationTagsManager()).thenReturn(tagsManager);
  YarnConfiguration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.APPLICATION_HISTORY_SAVE_NON_AM_CONTAINER_META_INFO,true);
  when(rmContext.getYarnConfiguration()).thenReturn(conf);
  RMNode rmNode=new RMNodeImpl(nodeId,rmContext,"localhost",0,0,null,Resource.newInstance(10240,10),null);
  SchedulerNode schedulerNode=new FiCaSchedulerNode(rmNode,false);
  RMContainerImpl rmContainer=new RMContainerImpl(container,SchedulerRequestKey.extractFrom(container),appAttemptId,nodeId,"user",rmContext);
  Assert.assertEquals(0,tagsManager.getNodeCardinalityByOp(nodeId,AllocationTags.createSingleAppAllocationTags(TestUtils.getMockApplicationId(1),null),Long::max));
  rmContainer.handle(new RMContainerEvent(containerId,RMContainerEventType.START));
  schedulerNode.allocateContainer(rmContainer);
  Assert.assertEquals(1,tagsManager.getNodeCardinalityByOp(nodeId,AllocationTags.createSingleAppAllocationTags(appId,null),Long::max));
  rmContainer.handle(new RMContainerFinishedEvent(containerId,ContainerStatus.newInstance(containerId,ContainerState.COMPLETE,"",0),RMContainerEventType.KILL));
  schedulerNode.releaseContainer(container.getId(),true);
  Assert.assertEquals(0,tagsManager.getNodeCardinalityByOp(nodeId,AllocationTags.createSingleAppAllocationTags(appId,null),Long::max));
  rmContainer=new RMContainerImpl(container,SchedulerRequestKey.extractFrom(container),appAttemptId,nodeId,"user",rmContext);
  Assert.assertEquals(0,tagsManager.getNodeCardinalityByOp(nodeId,AllocationTags.createSingleAppAllocationTags(appId,null),Long::max));
  rmContainer.setAllocationTags(ImmutableSet.of("mapper"));
  rmContainer.handle(new RMContainerEvent(containerId,RMContainerEventType.START));
  schedulerNode.allocateContainer(rmContainer);
  Assert.assertEquals(1,tagsManager.getNodeCardinalityByOp(nodeId,AllocationTags.createSingleAppAllocationTags(appId,null),Long::max));
  rmContainer.handle(new RMContainerEvent(containerId,RMContainerEventType.ACQUIRED));
  rmContainer.handle(new RMContainerFinishedEvent(containerId,ContainerStatus.newInstance(containerId,ContainerState.COMPLETE,"",0),RMContainerEventType.FINISHED));
  schedulerNode.releaseContainer(container.getId(),true);
  Assert.assertEquals(0,tagsManager.getNodeCardinalityByOp(nodeId,AllocationTags.createSingleAppAllocationTags(appId,null),Long::max));
  rmContainer=new RMContainerImpl(container,SchedulerRequestKey.extractFrom(container),appAttemptId,nodeId,"user",rmContext);
  rmContainer.setAllocationTags(ImmutableSet.of("mapper"));
  Assert.assertEquals(0,tagsManager.getNodeCardinalityByOp(nodeId,AllocationTags.createSingleAppAllocationTags(appId,null),Long::max));
  rmContainer.handle(new RMContainerEvent(containerId,RMContainerEventType.START));
  schedulerNode.allocateContainer(rmContainer);
  Assert.assertEquals(1,tagsManager.getNodeCardinalityByOp(nodeId,AllocationTags.createSingleAppAllocationTags(appId,null),Long::max));
  rmContainer.handle(new RMContainerEvent(containerId,RMContainerEventType.ACQUIRED));
  rmContainer.handle(new RMContainerEvent(containerId,RMContainerEventType.LAUNCHED));
  rmContainer.handle(new RMContainerFinishedEvent(containerId,ContainerStatus.newInstance(containerId,ContainerState.COMPLETE,"",0),RMContainerEventType.FINISHED));
  schedulerNode.releaseContainer(container.getId(),true);
  Assert.assertEquals(0,tagsManager.getNodeCardinalityByOp(nodeId,AllocationTags.createSingleAppAllocationTags(appId,null),Long::max));
  rmContainer=new RMContainerImpl(container,SchedulerRequestKey.extractFrom(container),appAttemptId,nodeId,"user",rmContext);
  rmContainer.setAllocationTags(ImmutableSet.of("mapper"));
  Assert.assertEquals(0,tagsManager.getNodeCardinalityByOp(nodeId,AllocationTags.createSingleAppAllocationTags(appId,null),Long::max));
  NMContainerStatus containerStatus=NMContainerStatus.newInstance(containerId,0,ContainerState.NEW,Resource.newInstance(1024,1),"recover container",0,Priority.newInstance(0),0);
  containerStatus.setAllocationTags(ImmutableSet.of("mapper"));
  rmContainer.handle(new RMContainerRecoverEvent(containerId,containerStatus));
  Assert.assertEquals(1,tagsManager.getNodeCardinalityByOp(nodeId,AllocationTags.createSingleAppAllocationTags(appId,null),Long::max));
}
