@Test(timeout=10000) public void testNetworkMappingJsonManager() throws Exception {
  Path jsonFilePath=new Path(jsonDirDirPath,"test.json");
  File jsonFile=new File(jsonFilePath.toString());
  NetworkTagMappingJsonManager manager=new NetworkTagMappingJsonManager();
  JSONObject json=new JSONObject();
  JSONArray userArray=new JSONArray();
  Map<String,String> createdUsers=createUserNetworkTagIDMapping();
  for (  Entry<String,String> user : createdUsers.entrySet()) {
    JSONObject userJson=new JSONObject();
    userJson.put("name",user.getKey());
    userJson.put("network-tag-id",user.getValue());
    userArray.put(userJson);
  }
  JSONObject duplicateUser1=new JSONObject();
  duplicateUser1.put("name","user1");
  duplicateUser1.put("network-tag-id","0x88888888");
  userArray.put(duplicateUser1);
  json.put("users",userArray);
  JSONArray groupArray=new JSONArray();
  Map<String,String> createdGroups=createGroupNetworkTagIDMapping();
  for (  Entry<String,String> group : createdGroups.entrySet()) {
    JSONObject groupJson=new JSONObject();
    groupJson.put("name",group.getKey());
    groupJson.put("network-tag-id",group.getValue());
    groupArray.put(groupJson);
  }
  JSONObject duplicateGroup1=new JSONObject();
  duplicateGroup1.put("name","team1");
  duplicateGroup1.put("network-tag-id","0x20002003");
  groupArray.put(duplicateGroup1);
  json.put("groups",groupArray);
  writeJson(jsonFile,json.toString());
  conf.set(YarnConfiguration.NM_NETWORK_TAG_MAPPING_FILE_PATH,jsonFile.getAbsolutePath());
  try {
    manager.initialize(conf);
    fail("Should get an exception. Becase we did not " + "set default-network-tag-id");
  }
 catch (  Exception ex) {
  }
  json.put("default-network-tag-id","0x99999999");
  if (fs.exists(jsonFilePath)) {
    fs.delete(jsonFilePath,false);
  }
  assertFalse(fs.exists(jsonFilePath));
  writeJson(jsonFile,json.toString());
  manager.initialize(conf);
  NetworkTagMapping networkTagMapping=manager.getNetworkTagMapping();
  assertTrue(networkTagMapping != null);
  assertTrue("0x99999999".equals(networkTagMapping.getDefaultNetworkTagID()));
  List<User> users=networkTagMapping.getUsers();
  assertTrue(users.size() == 4);
  for (int index=0; index < users.size(); index++) {
    String userName=users.get(index).getUserName();
    String classId=users.get(index).getNetworkTagID();
    assertTrue(createdUsers.containsValue(classId));
    String createdUserName=getUserName(createdUsers,classId);
    assertTrue(createdUserName.contains(userName));
  }
  List<Group> groups=networkTagMapping.getGroups();
  assertTrue(groups.size() == 2);
  for (int index=0; index < groups.size(); index++) {
    String groupName=groups.get(index).getGroupName();
    String classId=groups.get(index).getNetworkTagID();
    assertTrue(createdGroups.containsKey(groupName));
    assertTrue(classId.equals(createdGroups.get(groupName)));
  }
}
