@Test(timeout=120000) public void testRawXAttrs() throws Exception {
  final UserGroupInformation user=UserGroupInformation.createUserForTesting("user",new String[]{"mygroup"});
  FileSystem.mkdirs(fs,path,FsPermission.createImmutable((short)0750));
  fs.setXAttr(rawPath,raw1,value1,EnumSet.of(XAttrSetFlag.CREATE,XAttrSetFlag.REPLACE));
{
    final byte[] value=fs.getXAttr(rawPath,raw1);
    Assert.assertArrayEquals(value,value1);
  }
{
    final Map<String,byte[]> xattrs=fs.getXAttrs(rawPath);
    Assert.assertEquals(xattrs.size(),1);
    Assert.assertArrayEquals(value1,xattrs.get(raw1));
    fs.removeXAttr(rawPath,raw1);
  }
{
    fs.setXAttr(rawPath,raw1,value1,EnumSet.of(XAttrSetFlag.CREATE));
    fs.setXAttr(rawPath,raw1,newValue1,EnumSet.of(XAttrSetFlag.CREATE,XAttrSetFlag.REPLACE));
    final Map<String,byte[]> xattrs=fs.getXAttrs(rawPath);
    Assert.assertEquals(xattrs.size(),1);
    Assert.assertArrayEquals(newValue1,xattrs.get(raw1));
    fs.removeXAttr(rawPath,raw1);
  }
{
    fs.setXAttr(rawPath,raw1,value1,EnumSet.of(XAttrSetFlag.CREATE));
    fs.setXAttr(rawPath,raw2,value2,EnumSet.of(XAttrSetFlag.CREATE));
    final List<String> xattrNames=fs.listXAttrs(rawPath);
    assertTrue(xattrNames.contains(raw1));
    assertTrue(xattrNames.contains(raw2));
    assertTrue(xattrNames.size() == 2);
    fs.removeXAttr(rawPath,raw1);
    fs.removeXAttr(rawPath,raw2);
  }
{
    fs.setXAttr(rawPath,raw1,value1,EnumSet.of(XAttrSetFlag.CREATE));
    fs.setXAttr(rawPath,raw2,value2,EnumSet.of(XAttrSetFlag.CREATE));
    final List<String> xattrNames=fs.listXAttrs(path);
    assertTrue(xattrNames.size() == 0);
    fs.removeXAttr(rawPath,raw1);
    fs.removeXAttr(rawPath,raw2);
  }
{
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final FileSystem userFs=dfsCluster.getFileSystem();
        try {
          userFs.setXAttr(path,raw1,value1);
          fail("setXAttr should have thrown");
        }
 catch (        AccessControlException e) {
        }
        try {
          userFs.setXAttr(rawPath,raw1,value1);
          fail("setXAttr should have thrown");
        }
 catch (        AccessControlException e) {
        }
        try {
          userFs.getXAttrs(rawPath);
          fail("getXAttrs should have thrown");
        }
 catch (        AccessControlException e) {
        }
        try {
          userFs.getXAttrs(path);
          fail("getXAttrs should have thrown");
        }
 catch (        AccessControlException e) {
        }
        try {
          userFs.getXAttr(rawPath,raw1);
          fail("getXAttr should have thrown");
        }
 catch (        AccessControlException e) {
        }
        try {
          userFs.getXAttr(path,raw1);
          fail("getXAttr should have thrown");
        }
 catch (        AccessControlException e) {
        }
        return null;
      }
    }
);
  }
{
    fs.setXAttr(rawPath,raw1,value1);
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final FileSystem userFs=dfsCluster.getFileSystem();
        try {
          userFs.getXAttr(rawPath,raw1);
          fail("getXAttr should have thrown");
        }
 catch (        AccessControlException e) {
        }
        try {
          userFs.getXAttr(path,raw1);
          fail("getXAttr should have thrown");
        }
 catch (        AccessControlException e) {
        }
        try {
          userFs.listXAttrs(path);
          fail("listXAttr should have thrown AccessControlException");
        }
 catch (        AccessControlException ace) {
        }
        try {
          userFs.listXAttrs(rawPath);
          fail("listXAttr should have thrown AccessControlException");
        }
 catch (        AccessControlException ace) {
        }
        return null;
      }
    }
);
    fs.setPermission(path,new FsPermission((short)0751));
    final Path childDir=new Path(path,"child" + pathCount);
    FileSystem.mkdirs(fs,childDir,FsPermission.createImmutable((short)0704));
    final Path rawChildDir=new Path("/.reserved/raw" + childDir.toString());
    fs.setXAttr(rawChildDir,raw1,value1);
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final FileSystem userFs=dfsCluster.getFileSystem();
        List<String> xattrs=userFs.listXAttrs(rawChildDir);
        assertEquals(1,xattrs.size());
        assertEquals(raw1,xattrs.get(0));
        return null;
      }
    }
);
    fs.removeXAttr(rawPath,raw1);
  }
{
    Path parentPath=new Path("/foo");
    fs.mkdirs(parentPath);
    fs.setOwner(parentPath,"user","mygroup");
    fs.setPermission(parentPath,new FsPermission("701"));
    Path childPath=new Path("/foo/bar");
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final DistributedFileSystem dfs=dfsCluster.getFileSystem();
        DFSTestUtil.createFile(dfs,childPath,1024,(short)1,0xFEED);
        dfs.setPermission(childPath,new FsPermission("740"));
        return null;
      }
    }
);
    Path rawChildPath=new Path("/.reserved/raw" + childPath.toString());
    fs.setXAttr(new Path("/.reserved/raw/foo/bar"),raw1,value1);
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final DistributedFileSystem dfs=dfsCluster.getFileSystem();
        byte[] xattr=dfs.getXAttr(rawChildPath,raw1);
        assertEquals(Arrays.toString(value1),Arrays.toString(xattr));
        return null;
      }
    }
);
    final UserGroupInformation fakeUser=UserGroupInformation.createUserForTesting("fakeUser",new String[]{"fakeGroup"});
    fakeUser.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final DistributedFileSystem dfs=dfsCluster.getFileSystem();
        try {
          dfs.getXAttr(path,raw1);
          fail("should have thrown AccessControlException");
        }
 catch (        AccessControlException ace) {
        }
        return null;
      }
    }
);
  }
}
