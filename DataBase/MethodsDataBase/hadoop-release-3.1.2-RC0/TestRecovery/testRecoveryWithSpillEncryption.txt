@Test public void testRecoveryWithSpillEncryption() throws Exception {
  int runCount=0;
  MRApp app=new MRAppWithHistory(1,1,false,this.getClass().getName(),true,++runCount){
  }
;
  Configuration conf=new Configuration();
  conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE,true);
  conf.setBoolean("mapred.mapper.new-api",true);
  conf.setBoolean("mapred.reducer.new-api",true);
  conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE,false);
  conf.set(FileOutputFormat.OUTDIR,outputDir.toString());
  conf.setBoolean(MRJobConfig.MR_ENCRYPTED_INTERMEDIATE_DATA,true);
  Job jobAttempt1=app.submit(conf);
  app.waitForState(jobAttempt1,JobState.RUNNING);
  Iterator<Task> tasks=jobAttempt1.getTasks().values().iterator();
  Task mapper=tasks.next();
  app.waitForState(mapper,TaskState.RUNNING);
  TaskAttempt mapAttempt=mapper.getAttempts().values().iterator().next();
  app.waitForState(mapAttempt,TaskAttemptState.RUNNING);
  app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt.getID(),TaskAttemptEventType.TA_DONE));
  app.waitForState(mapper,TaskState.SUCCEEDED);
  app.stop();
  app=new MRAppWithHistory(1,1,false,this.getClass().getName(),false,++runCount);
  Job jobAttempt2=app.submit(conf);
  Assert.assertTrue("Recovery from previous job attempt is processed even " + "though intermediate data encryption is enabled.",!app.recovered());
  app.waitForState(jobAttempt2,JobState.RUNNING);
  tasks=jobAttempt2.getTasks().values().iterator();
  mapper=tasks.next();
  Task reducer=tasks.next();
  app.waitForState(mapper,TaskState.RUNNING);
  mapAttempt=mapper.getAttempts().values().iterator().next();
  app.waitForState(mapAttempt,TaskAttemptState.RUNNING);
  app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt.getID(),TaskAttemptEventType.TA_DONE));
  app.waitForState(mapper,TaskState.SUCCEEDED);
  TaskAttempt redAttempt=reducer.getAttempts().values().iterator().next();
  app.waitForState(redAttempt,TaskAttemptState.RUNNING);
  app.getContext().getEventHandler().handle(new TaskAttemptEvent(redAttempt.getID(),TaskAttemptEventType.TA_DONE));
  app.waitForState(reducer,TaskState.SUCCEEDED);
  app.waitForState(jobAttempt2,JobState.SUCCEEDED);
}
