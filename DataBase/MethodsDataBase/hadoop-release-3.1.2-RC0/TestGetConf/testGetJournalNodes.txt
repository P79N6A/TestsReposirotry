/** 
 * Tests for journal node addresses.
 * @throws Exception
 */
@Test(timeout=10000) public void testGetJournalNodes() throws Exception {
  final int nsCount=3;
  final String journalsBaseUri="qjournal://jn0:8020;jn1:8020;jn2:8020";
  setupStaticHostResolution(nsCount,"jn");
  HdfsConfiguration conf=new HdfsConfiguration(false);
  conf.set(DFS_NAMENODE_SHARED_EDITS_DIR_KEY,journalsBaseUri + "/");
  Set<String> expected=new HashSet<>();
  expected.add("jn0");
  expected.add("jn1");
  expected.add("jn2");
  String expected1="";
  StringBuilder buffer=new StringBuilder();
  for (  String val : expected) {
    if (buffer.length() > 0) {
      buffer.append(" ");
    }
    buffer.append(val);
  }
  buffer.append(System.lineSeparator());
  expected1=buffer.toString();
  Set<String> actual=DFSUtil.getJournalNodeAddresses(conf);
  assertEquals(expected.toString(),actual.toString());
  String actual1=getAddressListFromTool(TestType.JOURNALNODE,conf,true);
  assertEquals(expected1,actual1);
  conf.clear();
  conf.set(DFS_NAMENODE_SHARED_EDITS_DIR_KEY,journalsBaseUri + "/");
  actual=DFSUtil.getJournalNodeAddresses(conf);
  assertEquals(expected.toString(),actual.toString());
  actual1=getAddressListFromTool(TestType.JOURNALNODE,conf,true);
  assertEquals(expected1,actual1);
  conf.clear();
  setupNameServices(conf,nsCount);
  conf.set(DFS_HA_NAMENODES_KEY_PREFIX + ".ns0","nn0,nn1");
  conf.set(DFS_HA_NAMENODES_KEY_PREFIX + ".ns1","nn0, nn1");
  conf.set(DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns0",journalsBaseUri + "/ns0");
  conf.set(DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns1",journalsBaseUri + "/ns1");
  actual=DFSUtil.getJournalNodeAddresses(conf);
  assertEquals(expected.toString(),actual.toString());
  expected1=getAddressListFromTool(TestType.JOURNALNODE,conf,true);
  assertEquals(expected1,actual1);
  conf.clear();
  setupNameServices(conf,nsCount);
  conf.set(DFS_HA_NAMENODES_KEY_PREFIX + ".ns0","nn0,nn1");
  conf.set(DFS_HA_NAMENODES_KEY_PREFIX + ".ns1","nn0, nn1");
  conf.set(DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns0.nn0",journalsBaseUri + "/ns0");
  conf.set(DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns0.nn1",journalsBaseUri + "/ns0");
  conf.set(DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns1.nn2",journalsBaseUri + "/ns1");
  conf.set(DFS_NAMENODE_SHARED_EDITS_DIR_KEY + ".ns1.nn3",journalsBaseUri + "/ns1");
  actual=DFSUtil.getJournalNodeAddresses(conf);
  assertEquals(expected.toString(),actual.toString());
  actual1=getAddressListFromTool(TestType.JOURNALNODE,conf,true);
  assertEquals(expected1,actual1);
  conf.clear();
  setupNameServices(conf,nsCount);
  expected=new HashSet<>();
  actual=DFSUtil.getJournalNodeAddresses(conf);
  assertEquals(expected.toString(),actual.toString());
  actual1=System.lineSeparator();
  expected1=getAddressListFromTool(TestType.JOURNALNODE,conf,true);
  assertEquals(expected1,actual1);
  conf.clear();
  conf.set(DFS_NAMENODE_SHARED_EDITS_DIR_KEY,"file:///mnt/filer1/dfs/ha-name-dir-shared");
  expected=new HashSet<>();
  actual=DFSUtil.getJournalNodeAddresses(conf);
  assertEquals(expected.toString(),actual.toString());
  expected1=getAddressListFromTool(TestType.JOURNALNODE,conf,true);
  actual1=System.lineSeparator();
  assertEquals(expected1,actual1);
  conf.clear();
}
