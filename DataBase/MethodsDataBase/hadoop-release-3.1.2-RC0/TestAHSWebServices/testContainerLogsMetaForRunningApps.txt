@Test(timeout=10000) public void testContainerLogsMetaForRunningApps() throws Exception {
  String user="user1";
  ApplicationId appId=ApplicationId.newInstance(1234,1);
  ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,1);
  ContainerId containerId1=ContainerId.newContainerId(appAttemptId,1);
  WebResource r=resource();
  URI requestURI=r.path("ws").path("v1").path("applicationhistory").path("containers").path(containerId1.toString()).path("logs").queryParam("user.name",user).queryParam(YarnWebServiceParams.NM_ID,NM_ID).getURI();
  String redirectURL=getRedirectURL(requestURI.toString());
  assertTrue(redirectURL != null);
  assertTrue(redirectURL.contains(NM_WEBADDRESS));
  assertTrue(redirectURL.contains("ws/v1/node/containers"));
  assertTrue(redirectURL.contains(containerId1.toString()));
  assertTrue(redirectURL.contains("/logs"));
  requestURI=r.path("ws").path("v1").path("applicationhistory").path("containers").path(containerId1.toString()).path("logs").queryParam("user.name",user).getURI();
  redirectURL=getRedirectURL(requestURI.toString());
  assertTrue(redirectURL != null);
  assertTrue(redirectURL.contains("test:1234"));
  assertTrue(redirectURL.contains("ws/v1/node/containers"));
  assertTrue(redirectURL.contains(containerId1.toString()));
  assertTrue(redirectURL.contains("/logs"));
  ContainerId containerId1000=ContainerId.newContainerId(appAttemptId,1000);
  String fileName="syslog";
  String content="Hello." + containerId1000;
  NodeId nodeId=NodeId.newInstance("test host",100);
  TestContainerLogsUtils.createContainerLogFileInRemoteFS(conf,fs,rootLogDir,containerId1000,nodeId,fileName,user,content,true);
  ClientResponse response=r.path("ws").path("v1").path("applicationhistory").path("containers").path(containerId1000.toString()).path("logs").queryParam("user.name",user).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  List<ContainerLogsInfo> responseText=response.getEntity(new GenericType<List<ContainerLogsInfo>>(){
  }
);
  assertTrue(responseText.size() == 2);
  for (  ContainerLogsInfo logInfo : responseText) {
    if (logInfo.getLogType().equals(ContainerLogAggregationType.AGGREGATED.toString())) {
      List<ContainerLogFileInfo> logMeta=logInfo.getContainerLogsInfo();
      assertTrue(logMeta.size() == 1);
      assertEquals(logMeta.get(0).getFileName(),fileName);
      assertEquals(logMeta.get(0).getFileSize(),String.valueOf(content.length()));
    }
 else {
      assertEquals(logInfo.getLogType(),ContainerLogAggregationType.LOCAL.toString());
    }
  }
  response=r.path("ws").path("v1").path("applicationhistory").path("containers").path(containerId1000.toString()).path("logs").queryParam(YarnWebServiceParams.NM_ID,"invalid-nm:1234").queryParam("user.name",user).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  responseText=response.getEntity(new GenericType<List<ContainerLogsInfo>>(){
  }
);
  assertTrue(responseText.size() == 2);
  for (  ContainerLogsInfo logInfo : responseText) {
    if (logInfo.getLogType().equals(ContainerLogAggregationType.AGGREGATED.toString())) {
      List<ContainerLogFileInfo> logMeta=logInfo.getContainerLogsInfo();
      assertTrue(logMeta.size() == 1);
      assertEquals(logMeta.get(0).getFileName(),fileName);
      assertEquals(logMeta.get(0).getFileSize(),String.valueOf(content.length()));
    }
 else {
      assertEquals(logInfo.getLogType(),ContainerLogAggregationType.LOCAL.toString());
    }
  }
}
