/** 
 * Confirm that the equals method can distinguish all the required fields.
 */
@Test public void testEquals(){
  CategoryPointerAnnotation a1=new CategoryPointerAnnotation("Label","Key 1",20.0,Math.PI);
  CategoryPointerAnnotation a2=new CategoryPointerAnnotation("Label","Key 1",20.0,Math.PI);
  assertTrue(a1.equals(a2));
  a1=new CategoryPointerAnnotation("Label2","Key 1",20.0,Math.PI);
  assertFalse(a1.equals(a2));
  a2=new CategoryPointerAnnotation("Label2","Key 1",20.0,Math.PI);
  assertTrue(a1.equals(a2));
  a1.setCategory("Key 2");
  assertFalse(a1.equals(a2));
  a2.setCategory("Key 2");
  assertTrue(a1.equals(a2));
  a1.setValue(22.0);
  assertFalse(a1.equals(a2));
  a2.setValue(22.0);
  assertTrue(a1.equals(a2));
  a1.setAngle(Math.PI / 4.0);
  assertFalse(a1.equals(a2));
  a2.setAngle(Math.PI / 4.0);
  assertTrue(a1.equals(a2));
  a1.setTipRadius(20.0);
  assertFalse(a1.equals(a2));
  a2.setTipRadius(20.0);
  assertTrue(a1.equals(a2));
  a1.setBaseRadius(5.0);
  assertFalse(a1.equals(a2));
  a2.setBaseRadius(5.0);
  assertTrue(a1.equals(a2));
  a1.setArrowLength(33.0);
  assertFalse(a1.equals(a2));
  a2.setArrowLength(33.0);
  assertTrue(a1.equals(a2));
  a1.setArrowWidth(9.0);
  assertFalse(a1.equals(a2));
  a2.setArrowWidth(9.0);
  assertTrue(a1.equals(a2));
  Stroke stroke=new BasicStroke(1.5f);
  a1.setArrowStroke(stroke);
  assertFalse(a1.equals(a2));
  a2.setArrowStroke(stroke);
  assertTrue(a1.equals(a2));
  a1.setArrowPaint(Color.BLUE);
  assertFalse(a1.equals(a2));
  a2.setArrowPaint(Color.BLUE);
  assertTrue(a1.equals(a2));
  a1.setLabelOffset(10.0);
  assertFalse(a1.equals(a2));
  a2.setLabelOffset(10.0);
  assertTrue(a1.equals(a2));
}
