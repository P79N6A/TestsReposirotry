/** 
 * Some checks for the findLiveItemsUpperBound() method when the dataset is ASCENDING.
 */
@Test public void testFindLiveItemsUpperBound_Ascending(){
  DefaultXYDataset d=new DefaultXYDataset(){
    @Override public DomainOrder getDomainOrder(){
      return DomainOrder.ASCENDING;
    }
  }
;
  d.addSeries("S1",new double[][]{{},{}});
  assertEquals(0,RendererUtils.findLiveItemsUpperBound(d,0,10.0,11.1));
  d.addSeries("S2",new double[][]{{1.0},{9.9}});
  assertEquals(0,RendererUtils.findLiveItemsUpperBound(d,1,0.0,1.1));
  assertEquals(0,RendererUtils.findLiveItemsUpperBound(d,1,2.0,2.2));
  d.addSeries("S3",new double[][]{{1.0,2.0},{9.9,9.9}});
  assertEquals(0,RendererUtils.findLiveItemsUpperBound(d,2,0.0,1.0));
  assertEquals(1,RendererUtils.findLiveItemsUpperBound(d,2,1.0,2.2));
  assertEquals(1,RendererUtils.findLiveItemsUpperBound(d,2,2.0,3.3));
  assertEquals(1,RendererUtils.findLiveItemsUpperBound(d,2,3.0,4.4));
  d.addSeries("S4",new double[][]{{1.0,2.0,3.0},{9.9,9.9,9.9}});
  assertEquals(0,RendererUtils.findLiveItemsUpperBound(d,3,0.0,1.1));
  assertEquals(1,RendererUtils.findLiveItemsUpperBound(d,3,1.0,2.2));
  assertEquals(2,RendererUtils.findLiveItemsUpperBound(d,3,2.0,3.3));
  assertEquals(2,RendererUtils.findLiveItemsUpperBound(d,3,3.0,4.4));
  d.addSeries("S5",new double[][]{{1.0,2.0,3.0,4.0},{9.9,9.9,9.9,9.9}});
  assertEquals(0,RendererUtils.findLiveItemsUpperBound(d,4,0.0,1.1));
  assertEquals(1,RendererUtils.findLiveItemsUpperBound(d,4,1.0,2.2));
  assertEquals(2,RendererUtils.findLiveItemsUpperBound(d,4,2.0,3.3));
  assertEquals(3,RendererUtils.findLiveItemsUpperBound(d,4,3.0,4.4));
  assertEquals(3,RendererUtils.findLiveItemsUpperBound(d,4,4.0,5.5));
  d.addSeries("S5",new double[][]{{1.0,2.0,2.0,2.0,3.0},{9.9,9.9,9.9,9.9,9.9}});
  assertEquals(0,RendererUtils.findLiveItemsUpperBound(d,4,0.0,1.0));
  assertEquals(3,RendererUtils.findLiveItemsUpperBound(d,4,0.0,2.0));
  assertEquals(4,RendererUtils.findLiveItemsUpperBound(d,4,0.0,3.0));
  assertEquals(4,RendererUtils.findLiveItemsUpperBound(d,4,0.0,4.0));
}
