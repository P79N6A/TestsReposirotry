/** 
 * The first week in 2005 should span the range: TimeZone         | Start Millis  | End Millis    | Start Date  | End Date -----------------+---------------+---------------+-------------+------------ Europe/London    | 1104710400000 | 1105315199999 |  3-Jan-2005 | 9-Jan-2005 Europe/Paris     | 1104706800000 | 1105311599999 |  3-Jan-2005 | 2-Jan-2005 America/New_York | 1104037200000 | 1104641999999 | 26-Dec-2004 | 1-Jan-2005 In London and Paris, Monday is the first day of the week, while in the US it is Sunday. Previously, we were using these values, but see Java Bug ID 4960215: TimeZone         | Start Millis  | End Millis    | Start Date  | End Date -----------------+---------------+---------------+-------------+------------ Europe/London    | 1104105600000 | 1104710399999 | 27-Dec-2004 | 2-Jan-2005 Europe/Paris     | 1104102000000 | 1104706799999 | 27-Dec-2004 | 2-Jan-2005 America/New_York | 1104037200000 | 1104641999999 | 26-Dec-2004 | 1-Jan-2005
 */
@Test public void testWeek12005(){
  Week w1=new Week(1,2005);
  Calendar c1=Calendar.getInstance(TimeZone.getTimeZone("Europe/London"),Locale.UK);
  c1.setMinimalDaysInFirstWeek(4);
  assertEquals(1104710400000L,w1.getFirstMillisecond(c1));
  assertEquals(1105315199999L,w1.getLastMillisecond(c1));
  Calendar c2=Calendar.getInstance(TimeZone.getTimeZone("Europe/Paris"),Locale.FRANCE);
  c2.setMinimalDaysInFirstWeek(4);
  assertEquals(1104706800000L,w1.getFirstMillisecond(c2));
  assertEquals(1105311599999L,w1.getLastMillisecond(c2));
  Calendar c3=Calendar.getInstance(TimeZone.getTimeZone("America/New_York"),Locale.US);
  assertEquals(1104037200000L,w1.getFirstMillisecond(c3));
  assertEquals(1104641999999L,w1.getLastMillisecond(c3));
}
