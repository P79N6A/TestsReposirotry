/** 
 * Confirm that the equals method can distinguish all the required fields.
 */
@Test public void testEquals(){
  double[] starts_S1A=new double[]{0.1,0.2,0.3};
  double[] starts_S2A=new double[]{0.3,0.4,0.5};
  double[] ends_S1A=new double[]{0.5,0.6,0.7};
  double[] ends_S2A=new double[]{0.7,0.8,0.9};
  double[][] startsA=new double[][]{starts_S1A,starts_S2A};
  double[][] endsA=new double[][]{ends_S1A,ends_S2A};
  DefaultIntervalCategoryDataset dA=new DefaultIntervalCategoryDataset(startsA,endsA);
  double[] starts_S1B=new double[]{0.1,0.2,0.3};
  double[] starts_S2B=new double[]{0.3,0.4,0.5};
  double[] ends_S1B=new double[]{0.5,0.6,0.7};
  double[] ends_S2B=new double[]{0.7,0.8,0.9};
  double[][] startsB=new double[][]{starts_S1B,starts_S2B};
  double[][] endsB=new double[][]{ends_S1B,ends_S2B};
  DefaultIntervalCategoryDataset dB=new DefaultIntervalCategoryDataset(startsB,endsB);
  assertTrue(dA.equals(dB));
  assertTrue(dB.equals(dA));
  DefaultIntervalCategoryDataset empty1=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);
  DefaultIntervalCategoryDataset empty2=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);
  assertTrue(empty1.equals(empty2));
}
