/** 
 * Some checks for the calculateMean(Collection) and calculateMean(Collection, boolean) methods.
 */
@Test public void testCalculateMean_Collection(){
  boolean pass=false;
  try {
    Statistics.calculateMean((Collection)null);
  }
 catch (  IllegalArgumentException e) {
    pass=true;
  }
  assertTrue(pass);
  pass=false;
  try {
    Statistics.calculateMean((Collection)null,false);
  }
 catch (  IllegalArgumentException e) {
    pass=true;
  }
  assertTrue(pass);
  List values=new ArrayList();
  assertTrue(Double.isNaN(Statistics.calculateMean(values)));
  assertTrue(Double.isNaN(Statistics.calculateMean(values,true)));
  assertTrue(Double.isNaN(Statistics.calculateMean(values,false)));
  values.add(new Double(9.0));
  assertEquals(9.0,Statistics.calculateMean(values),EPSILON);
  assertEquals(9.0,Statistics.calculateMean(values,true),EPSILON);
  assertEquals(9.0,Statistics.calculateMean(values,false),EPSILON);
  values.add(null);
  assertTrue(Double.isNaN(Statistics.calculateMean(values)));
  assertTrue(Double.isNaN(Statistics.calculateMean(values,true)));
  assertEquals(9.0,Statistics.calculateMean(values,false),EPSILON);
  values.clear();
  values.add(new Double(9.0));
  values.add(new Double(Double.NaN));
  assertTrue(Double.isNaN(Statistics.calculateMean(values)));
  assertTrue(Double.isNaN(Statistics.calculateMean(values,true)));
  assertEquals(9.0,Statistics.calculateMean(values,false),EPSILON);
  values=new ArrayList();
  values.add(new Double(9.0));
  values.add(new Double(3.0));
  values.add(new Double(2.0));
  values.add(new Double(2.0));
  double mean=Statistics.calculateMean(values);
  assertEquals(4.0,mean,EPSILON);
  values.add(new Double(Double.NaN));
  assertTrue(Double.isNaN(Statistics.calculateMean(values)));
}
