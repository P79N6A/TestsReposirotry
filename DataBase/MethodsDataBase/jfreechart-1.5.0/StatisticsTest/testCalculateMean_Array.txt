/** 
 * Some checks for the calculateMean(Number[]) and calculateMean(Number[], boolean) methods.
 */
@Test public void testCalculateMean_Array(){
  boolean pass=false;
  try {
    Statistics.calculateMean((Number[])null);
  }
 catch (  IllegalArgumentException e) {
    pass=true;
  }
  assertTrue(pass);
  pass=false;
  try {
    Statistics.calculateMean((Number[])null,false);
  }
 catch (  IllegalArgumentException e) {
    pass=true;
  }
  assertTrue(pass);
  assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0])));
  assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0],false)));
  Number[] values=new Number[]{new Double(1.0)};
  assertEquals(1.0,Statistics.calculateMean(values),EPSILON);
  assertEquals(1.0,Statistics.calculateMean(values,true),EPSILON);
  assertEquals(1.0,Statistics.calculateMean(values,false),EPSILON);
  values=new Number[]{new Double(1.0),null};
  assertTrue(Double.isNaN(Statistics.calculateMean(values)));
  assertTrue(Double.isNaN(Statistics.calculateMean(values,true)));
  assertEquals(1.0,Statistics.calculateMean(values,false),EPSILON);
  values=new Number[]{new Double(1.0),new Double(Double.NaN)};
  assertTrue(Double.isNaN(Statistics.calculateMean(values)));
  assertTrue(Double.isNaN(Statistics.calculateMean(values,true)));
  assertEquals(1.0,Statistics.calculateMean(values,false),EPSILON);
}
