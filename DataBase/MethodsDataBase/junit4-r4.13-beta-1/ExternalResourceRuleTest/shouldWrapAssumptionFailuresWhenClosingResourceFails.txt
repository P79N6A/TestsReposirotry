@Test public void shouldWrapAssumptionFailuresWhenClosingResourceFails() throws Throwable {
  final AtomicReference<Throwable> externalResourceException=new AtomicReference<Throwable>();
  ExternalResource resourceRule=new ExternalResource(){
    @Override protected void after(){
      RuntimeException runtimeException=new RuntimeException("simulating resource tear down failure");
      externalResourceException.set(runtimeException);
      throw runtimeException;
    }
  }
;
  final AtomicReference<Throwable> assumptionViolatedException=new AtomicReference<Throwable>();
  Statement skippedTest=new Statement(){
    @Override public void evaluate() throws Throwable {
      AssumptionViolatedException assumptionFailure=new AssumptionViolatedException("skip it");
      assumptionViolatedException.set(assumptionFailure);
      throw assumptionFailure;
    }
  }
;
  Description dummyDescription=Description.createTestDescription("dummy test class name","dummy test name");
  try {
    resourceRule.apply(skippedTest,dummyDescription).evaluate();
    fail("ExternalResource should throw");
  }
 catch (  MultipleFailureException e) {
    assertThat(e.getFailures(),hasItems(instanceOf(TestCouldNotBeSkippedException.class),sameInstance(externalResourceException.get())));
    assertThat(e.getFailures(),hasItems(hasCause(sameInstance(assumptionViolatedException.get())),sameInstance(externalResourceException.get())));
  }
}
