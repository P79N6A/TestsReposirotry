@SuppressWarnings("unchecked") @Test public void shouldUseStartTimeAndTxIdFromWhenStartingTxAsHeader() throws Exception {
  long startingTime=clock.millis();
  ExplicitIndexTransactionState explicitIndexState=mock(ExplicitIndexTransactionState.class);
  auxTxStateManager.registerProvider(new ExplicitIndexTransactionStateProvider(null,null){
    @Override public AuxiliaryTransactionState createNewAuxiliaryTransactionState(){
      return explicitIndexState;
    }
  }
);
  when(explicitIndexState.hasChanges()).thenReturn(true);
  doAnswer(invocation -> {
    @SuppressWarnings("unchecked") Collection<StorageCommand> commands=invocation.getArgument(0);
    commands.add(mock(Command.class));
    return null;
  }
).when(storageEngine).createCommands(any(Collection.class),any(TransactionState.class),any(StorageReader.class),any(ResourceLocker.class),anyLong(),any(TxStateVisitor.Decorator.class));
  try (KernelTransactionImplementation transaction=newTransaction(loginContext())){
    SimpleStatementLocks statementLocks=new SimpleStatementLocks(mock(Locks.Client.class));
    transaction.initialize(5L,BASE_TX_COMMIT_TIMESTAMP,statementLocks,KernelTransaction.Type.implicit,SecurityContext.AUTH_DISABLED,0L,1L);
    transaction.txState();
    try (KernelStatement statement=transaction.acquireStatement()){
      statement.explicitIndexTxState();
    }
     clock.forward(5,MILLISECONDS);
    when(metaDataStore.getLastCommittedTransactionId()).thenReturn(7L);
    transaction.success();
  }
   assertEquals(5L,commitProcess.transaction.getLatestCommittedTxWhenStarted());
  assertEquals(startingTime,commitProcess.transaction.getTimeStarted());
  assertEquals(startingTime + 5,commitProcess.transaction.getTimeCommitted());
}
