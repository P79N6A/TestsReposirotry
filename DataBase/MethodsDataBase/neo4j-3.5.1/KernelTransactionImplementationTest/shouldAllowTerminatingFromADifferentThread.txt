@Test public void shouldAllowTerminatingFromADifferentThread() throws Exception {
  final DoubleLatch latch=new DoubleLatch(1);
  final KernelTransaction transaction=newTransaction(loginContext());
  transactionInitializer.accept(transaction);
  Future<?> terminationFuture=Executors.newSingleThreadExecutor().submit(() -> {
    latch.waitForAllToStart();
    transaction.markForTermination(Status.General.UnknownError);
    latch.finish();
  }
);
  transaction.success();
  latch.startAndWaitForAllToStartAndFinish();
  assertNull(terminationFuture.get(1,TimeUnit.MINUTES));
  try {
    transaction.close();
    fail("Exception expected");
  }
 catch (  Exception e) {
    assertThat(e,instanceOf(TransactionTerminatedException.class));
  }
  verify(transactionMonitor,times(1)).transactionFinished(false,isWriteTx);
  verify(transactionMonitor,times(1)).transactionTerminated(isWriteTx);
  verifyExtraInteractionWithTheMonitor(transactionMonitor,isWriteTx);
}
