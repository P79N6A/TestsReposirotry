@Test(timeout=TEST_TIMEOUT_MILLIS) public void testThreadRemovedFromWaitingListOnDeadlock() throws InterruptedException {
  RagManager ragManager=Mockito.mock(RagManager.class);
  LockResource resource=new LockResource(ResourceTypes.NODE,1L);
  final RWLock lock=createRWLock(ragManager,resource);
  final LockTransaction lockTransaction=new LockTransaction();
  final LockTransaction anotherTransaction=new LockTransaction();
  final CountDownLatch exceptionLatch=new CountDownLatch(1);
  final CountDownLatch completionLatch=new CountDownLatch(1);
  Mockito.doNothing().doAnswer(invocation -> {
    exceptionLatch.countDown();
    throw new DeadlockDetectedException("Deadlock");
  }
).when(ragManager).checkWaitOn(lock,lockTransaction);
  lock.mark();
  lock.mark();
  lock.acquireReadLock(LockTracer.NONE,lockTransaction);
  lock.acquireReadLock(LockTracer.NONE,anotherTransaction);
  Runnable writer=() -> {
    try {
      lock.mark();
      lock.acquireWriteLock(LockTracer.NONE,lockTransaction);
    }
 catch (    DeadlockDetectedException ignored) {
    }
    completionLatch.countDown();
  }
;
  executor.execute(writer);
  waitWaitingThreads(lock,1);
  do {
synchronized (lock) {
      lock.notifyAll();
    }
  }
 while (exceptionLatch.getCount() == 1);
  completionLatch.await();
  assertEquals("In case of deadlock caused by spurious wake up " + "thread should be removed from waiting list",0,lock.getWaitingThreadsCount());
}
