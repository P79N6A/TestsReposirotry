@Test void mustRecoverFromExceptions() throws Exception {
  final AtomicBoolean broken=new AtomicBoolean(true);
  Adder adder=new Adder(){
    @Override public void add(    int delta){
      if (broken.get()) {
        throw new IllegalStateException("boom!");
      }
      super.add(delta);
    }
  }
;
  sync=new WorkSync<>(adder);
  try {
    executor.submit(new CallableWork(new AddWork(10))).get();
    fail("Should have thrown");
  }
 catch (  ExecutionException exception) {
    assertThat(exception.getCause(),instanceOf(ExecutionException.class));
    exception=(ExecutionException)exception.getCause();
    assertThat(exception.getCause(),instanceOf(IllegalStateException.class));
  }
  broken.set(false);
  sync.apply(new AddWork(20));
  assertThat(sum.sum(),is(20L));
  assertThat(count.sum(),is(1L));
}
