@Test void mustCombineWork() throws Exception {
  BinaryLatch startLatch=new BinaryLatch();
  BinaryLatch blockLatch=new BinaryLatch();
  FutureTask<Void> blocker=new FutureTask<>(new CallableWork(new AddWork(1){
    @Override public void apply(    Adder adder){
      super.apply(adder);
      startLatch.release();
      blockLatch.await();
    }
  }
));
  new Thread(blocker).start();
  startLatch.await();
  Collection<FutureTask<Void>> tasks=new ArrayList<>();
  tasks.add(blocker);
  for (int i=0; i < 20; i++) {
    CallableWork task=new CallableWork(new AddWork(1));
    FutureTask<Void> futureTask=new FutureTask<>(task);
    tasks.add(futureTask);
    Thread thread=new Thread(futureTask);
    thread.start();
    while (thread.getState() != Thread.State.TIMED_WAITING) {
    }
  }
  blockLatch.release();
  for (  FutureTask<Void> task : tasks) {
    task.get();
  }
  assertThat(count.sum(),lessThan(sum.sum()));
}
