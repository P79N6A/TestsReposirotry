@Test void testMatchesUnknownHosts() throws Exception {
  String knownHost=InetAddress.getLocalHost().getHostName();
  String unknownHost1="unknownHost1";
  String unknownHost2="unknownHost2";
  assertThrows(UnknownHostException.class,() -> InetAddress.getByName(unknownHost1));
  assertThrows(UnknownHostException.class,() -> InetAddress.getByName(unknownHost2));
  HostnamePort hostnamePortSinglePort=new HostnamePort(unknownHost1 + ":1234");
  HostnamePort hostnamePortWithRange=new HostnamePort(unknownHost1 + ":1234-1236");
  assertTrue(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost1 + ":1234")));
  assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost1 + ":1235")));
  assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost2 + ":1234")));
  assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost2 + ":1235")));
  assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost1 + "")));
  assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost2 + "")));
  assertFalse(hostnamePortSinglePort.matches(URI.create("ha://1.2.3.4:1234")));
  assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + knownHost + ":1234")));
  assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost1 + ":1234")));
  assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost1 + ":1235")));
  assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost1 + ":1236")));
  assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost2 + ":1234")));
  assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost2 + ":1235")));
  assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost1 + ":1233")));
  assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost1 + ":1237")));
  assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost1)));
  assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost2)));
}
