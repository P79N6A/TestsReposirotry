@Test public void shouldIncludeBasicMetadata() throws Throwable {
  QueryStatistics queryStatistics=mock(QueryStatistics.class);
  when(queryStatistics.containsUpdates()).thenReturn(true);
  when(queryStatistics.getNodesCreated()).thenReturn(1);
  when(queryStatistics.getNodesDeleted()).thenReturn(2);
  when(queryStatistics.getRelationshipsCreated()).thenReturn(3);
  when(queryStatistics.getRelationshipsDeleted()).thenReturn(4);
  when(queryStatistics.getPropertiesSet()).thenReturn(5);
  when(queryStatistics.getIndexesAdded()).thenReturn(6);
  when(queryStatistics.getIndexesRemoved()).thenReturn(7);
  when(queryStatistics.getConstraintsAdded()).thenReturn(8);
  when(queryStatistics.getConstraintsRemoved()).thenReturn(9);
  when(queryStatistics.getLabelsAdded()).thenReturn(10);
  when(queryStatistics.getLabelsRemoved()).thenReturn(11);
  QueryResult result=mock(QueryResult.class);
  when(result.fieldNames()).thenReturn(new String[0]);
  when(result.executionType()).thenReturn(query(READ_WRITE));
  when(result.queryStatistics()).thenReturn(queryStatistics);
  when(result.getNotifications()).thenReturn(Collections.emptyList());
  Clock clock=mock(Clock.class);
  when(clock.millis()).thenReturn(0L,1337L);
  TransactionalContext tc=mock(TransactionalContext.class);
  CypherAdapterStream stream=new CypherAdapterStream(result,clock);
  MapValue meta=metadataOf(stream);
  assertThat(meta.get("type"),equalTo(stringValue("rw")));
  assertThat(meta.get("stats"),equalTo(mapValues("nodes-created",intValue(1),"nodes-deleted",intValue(2),"relationships-created",intValue(3),"relationships-deleted",intValue(4),"properties-set",intValue(5),"indexes-added",intValue(6),"indexes-removed",intValue(7),"constraints-added",intValue(8),"constraints-removed",intValue(9),"labels-added",intValue(10),"labels-removed",intValue(11))));
  assertThat(meta.get("result_consumed_after"),equalTo(longValue(1337L)));
}
