@Test public void shouldIncludeNotificationsIfPresent() throws Throwable {
  QueryResult result=mock(QueryResult.class);
  when(result.fieldNames()).thenReturn(new String[0]);
  QueryStatistics queryStatistics=mock(QueryStatistics.class);
  when(queryStatistics.containsUpdates()).thenReturn(false);
  when(result.queryStatistics()).thenReturn(queryStatistics);
  when(result.executionType()).thenReturn(query(READ_WRITE));
  when(result.getNotifications()).thenReturn(Arrays.asList(NotificationCode.INDEX_HINT_UNFULFILLABLE.notification(InputPosition.empty),NotificationCode.PLANNER_UNSUPPORTED.notification(new InputPosition(4,5,6))));
  TransactionalContext tc=mock(TransactionalContext.class);
  CypherAdapterStream stream=new CypherAdapterStream(result,Clock.systemUTC());
  MapValue meta=metadataOf(stream);
  MapValue msg1=mapValues("severity",stringValue("WARNING"),"code",stringValue("Neo.ClientError.Schema.IndexNotFound"),"title",stringValue("The request (directly or indirectly) referred to an index that does not exist."),"description",stringValue("The hinted index does not exist, please check the schema"));
  MapValue msg2=mapValues("severity",stringValue("WARNING"),"code",stringValue("Neo.ClientNotification.Statement.PlannerUnsupportedWarning"),"title",stringValue("This query is not supported by the COST planner."),"description",stringValue("Using COST planner is unsupported for this query, please use RULE planner instead"),"position",mapValues("offset",intValue(4),"column",intValue(6),"line",intValue(5)));
  assertThat(meta.get("notifications"),equalTo(list(msg1,msg2)));
}
