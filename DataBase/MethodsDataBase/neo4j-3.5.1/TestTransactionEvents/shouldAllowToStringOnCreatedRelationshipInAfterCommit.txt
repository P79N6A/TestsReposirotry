@Test public void shouldAllowToStringOnCreatedRelationshipInAfterCommit(){
  Relationship relationship;
  Node startNode;
  Node endNode;
  RelationshipType type=MyRelTypes.TEST;
  try (Transaction tx=dbRule.beginTx()){
    startNode=dbRule.createNode();
    endNode=dbRule.createNode();
    relationship=startNode.createRelationshipTo(endNode,type);
    tx.success();
  }
   AtomicReference<String> deletedToString=new AtomicReference<>();
  dbRule.registerTransactionEventHandler(new TransactionEventHandler.Adapter<Object>(){
    @Override public void afterCommit(    TransactionData data,    Object state){
      for (      Relationship relationship : data.deletedRelationships()) {
        deletedToString.set(relationship.toString());
      }
    }
  }
);
  try (Transaction tx=dbRule.beginTx()){
    relationship.delete();
    tx.success();
  }
   assertNotNull(deletedToString.get());
  assertThat(deletedToString.get(),containsString(type.name()));
  assertThat(deletedToString.get(),containsString(format("(%d)",startNode.getId())));
  assertThat(deletedToString.get(),containsString(format("(%d)",endNode.getId())));
}
