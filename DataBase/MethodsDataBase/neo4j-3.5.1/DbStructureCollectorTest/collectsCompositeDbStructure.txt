@Test public void collectsCompositeDbStructure(){
  DbStructureCollector collector=new DbStructureCollector();
  collector.visitLabel(1,"Person");
  collector.visitLabel(2,"City");
  collector.visitPropertyKey(1,"name");
  collector.visitPropertyKey(2,"income");
  collector.visitPropertyKey(3,"lastName");
  collector.visitPropertyKey(4,"tax");
  collector.visitPropertyKey(5,"area");
  collector.visitRelationshipType(1,"LIVES_IN");
  collector.visitRelationshipType(2,"FRIEND");
  collector.visitIndex(TestIndexDescriptorFactory.uniqueForLabel(1,1,3),":Person(name, lastName)",1.0d,1L);
  collector.visitUniqueConstraint(ConstraintDescriptorFactory.uniqueForLabel(2,1,5),":City(name, area)");
  collector.visitIndex(TestIndexDescriptorFactory.forLabel(2,2,4),":City(income, tax)",0.2d,1L);
  collector.visitAllNodesCount(50);
  collector.visitNodeCount(1,"Person",20);
  collector.visitNodeCount(2,"City",30);
  collector.visitRelCount(1,2,-1,"(:Person)-[:FRIEND]->()",500);
  DbStructureLookup lookup=collector.lookup();
  assertEquals(asList(of(1,"Person"),of(2,"City")),Iterators.asList(lookup.labels()));
  assertEquals(asList(of(1,"name"),of(2,"income"),of(3,"lastName"),of(4,"tax"),of(5,"area")),Iterators.asList(lookup.properties()));
  assertEquals(asList(of(1,"LIVES_IN"),of(2,"FRIEND")),Iterators.asList(lookup.relationshipTypes()));
  assertArrayEquals(new String[]{"Person"},lookup.knownUniqueIndices().next().first());
  assertArrayEquals(new String[]{"name","lastName"},lookup.knownUniqueIndices().next().other());
  assertEquals(asList("City"),Iterators.asList(Iterators.map(Pair::first,lookup.knownUniqueConstraints())));
  assertArrayEquals(new String[]{"name","area"},lookup.knownUniqueConstraints().next().other());
  assertEquals(new String[]{"City"},lookup.knownIndices().next().first());
  assertArrayEquals(new String[]{"income","tax"},lookup.knownIndices().next().other());
  assertEquals(50,lookup.nodesAllCardinality());
  assertEquals(20,lookup.nodesWithLabelCardinality(1));
  assertEquals(30,lookup.nodesWithLabelCardinality(2));
  assertEquals(500,lookup.cardinalityByLabelsAndRelationshipType(1,2,-1));
  assertEquals(1.0d,lookup.indexUniqueValueSelectivity(1,1,3),0.01d);
  assertEquals(0.2d,lookup.indexUniqueValueSelectivity(2,2,4),0.01d);
}
