@Test void shouldPerformSuccessfulTransitionsCorrectly() throws Throwable {
  for (int state=0; state < State.values().length; state++) {
    for (int op=0; op < ops.length; op++) {
      MySafeAndSuccessfulLife sf=new MySafeAndSuccessfulLife(State.values()[state]);
      boolean caughtIllegalTransition=false;
      try {
        ops[op].accept(sf);
      }
 catch (      IllegalStateException e) {
        caughtIllegalTransition=true;
      }
      if (onSuccess[state][op] == null) {
        assertTrue(caughtIllegalTransition);
        assertEquals(State.values()[state],sf.state());
      }
 else {
        assertFalse(caughtIllegalTransition);
        assertEquals(onSuccess[state][op],sf.state());
        int expectedOpCode=ignored[state][op] ? -1 : op;
        assertEquals(expectedOpCode,sf.opCode);
      }
    }
  }
}
