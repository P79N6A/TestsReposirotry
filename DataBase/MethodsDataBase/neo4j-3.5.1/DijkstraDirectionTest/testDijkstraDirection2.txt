@Test public void testDijkstraDirection2(){
  graph.makeEdge("a","b");
  graph.makeEdge("b","c");
  graph.makeEdge("c","d");
  graph.makeEdge("d","a");
  graph.makeEdge("s","a");
  graph.makeEdge("b","s");
  graph.makeEdge("e","c");
  graph.makeEdge("d","e");
  Dijkstra<Double> dijkstra=new Dijkstra<>((double)0,graph.getNode("s"),graph.getNode("e"),(relationship,direction) -> {
    assertEquals(Direction.OUTGOING,direction);
    return 1.0;
  }
,new org.neo4j.graphalgo.impl.util.DoubleAdder(),Double::compareTo,Direction.OUTGOING,MyRelTypes.R1);
  dijkstra.getCost();
  dijkstra=new Dijkstra<>((double)0,graph.getNode("s"),graph.getNode("e"),(relationship,direction) -> {
    assertEquals(Direction.INCOMING,direction);
    return 1.0;
  }
,new org.neo4j.graphalgo.impl.util.DoubleAdder(),Double::compareTo,Direction.INCOMING,MyRelTypes.R1);
  dijkstra.getCost();
}
