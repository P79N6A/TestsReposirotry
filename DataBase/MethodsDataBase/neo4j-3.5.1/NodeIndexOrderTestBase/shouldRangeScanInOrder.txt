@Test public void shouldRangeScanInOrder() throws Exception {
  List<Pair<Long,Value>> expected=new ArrayList<>();
  try (Transaction tx=beginTransaction()){
    expected.add(nodeWithProp(tx,"hello"));
    nodeWithProp(tx,"bellow");
    expected.add(nodeWithProp(tx,"schmello"));
    expected.add(nodeWithProp(tx,"low"));
    expected.add(nodeWithProp(tx,"trello"));
    nodeWithProp(tx,"yellow");
    expected.add(nodeWithProp(tx,"low"));
    nodeWithProp(tx,"below");
    tx.success();
  }
   createIndex();
  try (Transaction tx=beginTransaction()){
    int label=tx.tokenRead().nodeLabel("Node");
    int prop=tx.tokenRead().propertyKey("prop");
    IndexReference index=tx.schemaRead().index(label,prop);
    try (NodeValueIndexCursor cursor=tx.cursors().allocateNodeValueIndexCursor()){
      nodeWithProp(tx,"allow");
      expected.add(nodeWithProp(tx,"now"));
      expected.add(nodeWithProp(tx,"jello"));
      nodeWithProp(tx,"willow");
      IndexQuery query=IndexQuery.range(prop,"hello",true,"trello",true);
      tx.dataRead().nodeIndexSeek(index,cursor,indexOrder,true,query);
      assertResultsInOrder(expected,cursor);
    }
   }
 }
