@Test public void shouldAccessAllNodeProperties(){
  try (NodeCursor node=cursors.allocateNodeCursor();PropertyCursor props=cursors.allocatePropertyCursor()){
    read.singleNode(allProps,node);
    assertTrue("node by reference",node.next());
    assertTrue("has properties",hasProperties(node,props));
    node.properties(props);
    Set<Object> values=new HashSet<>();
    while (props.next()) {
      values.add(props.propertyValue().asObject());
    }
    assertTrue("byteProp",values.contains((byte)13));
    assertTrue("shortProp",values.contains((short)13));
    assertTrue("intProp",values.contains(13));
    assertTrue("inlineLongProp",values.contains(13L));
    assertTrue("longProp",values.contains(Long.MAX_VALUE));
    assertTrue("floatProp",values.contains(13.0f));
    assertTrue("doubleProp",values.contains(13.0));
    assertTrue("trueProp",values.contains(true));
    assertTrue("falseProp",values.contains(false));
    assertTrue("charProp",values.contains('x'));
    assertTrue("emptyStringProp",values.contains(""));
    assertTrue("shortStringProp",values.contains("hello"));
    assertTrue("utf8Prop",values.contains(chinese));
    if (supportsBigProperties()) {
      assertTrue("longStringProp",values.contains(LONG_STRING));
      assertThat("smallArray",values,hasItem(intArray(1,2,3,4)));
      assertThat("bigArray",values,hasItem(arrayContaining(LONG_STRING)));
    }
    assertTrue("pointProp",values.contains(pointValue));
    int expected=supportsBigProperties() ? 18 : 15;
    assertEquals("number of values",expected,values.size());
  }
 }
