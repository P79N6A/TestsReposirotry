@Test public void shouldAccessSingleProperty(){
  assertAccessSingleProperty(byteProp,Values.of((byte)13),ValueGroup.NUMBER);
  assertAccessSingleProperty(shortProp,Values.of((short)13),ValueGroup.NUMBER);
  assertAccessSingleProperty(intProp,Values.of(13),ValueGroup.NUMBER);
  assertAccessSingleProperty(inlineLongProp,Values.of(13L),ValueGroup.NUMBER);
  assertAccessSingleProperty(longProp,Values.of(Long.MAX_VALUE),ValueGroup.NUMBER);
  assertAccessSingleProperty(floatProp,Values.of(13.0f),ValueGroup.NUMBER);
  assertAccessSingleProperty(doubleProp,Values.of(13.0),ValueGroup.NUMBER);
  assertAccessSingleProperty(trueProp,Values.of(true),ValueGroup.BOOLEAN);
  assertAccessSingleProperty(falseProp,Values.of(false),ValueGroup.BOOLEAN);
  assertAccessSingleProperty(charProp,Values.of('x'),ValueGroup.TEXT);
  assertAccessSingleProperty(emptyStringProp,Values.of(""),ValueGroup.TEXT);
  assertAccessSingleProperty(shortStringProp,Values.of("hello"),ValueGroup.TEXT);
  if (supportsBigProperties()) {
    assertAccessSingleProperty(longStringProp,Values.of(LONG_STRING),ValueGroup.TEXT);
  }
  assertAccessSingleProperty(utf8Prop,Values.of(chinese),ValueGroup.TEXT);
  if (supportsBigProperties()) {
    assertAccessSingleProperty(smallArray,Values.of(new int[]{1,2,3,4}),ValueGroup.NUMBER_ARRAY);
    assertAccessSingleProperty(bigArray,Values.of(new String[]{LONG_STRING}),ValueGroup.TEXT_ARRAY);
  }
  assertAccessSingleProperty(pointProp,Values.of(pointValue),ValueGroup.GEOMETRY);
  assertAccessSingleProperty(dateProp,Values.of(dateValue),ValueGroup.DATE);
}
