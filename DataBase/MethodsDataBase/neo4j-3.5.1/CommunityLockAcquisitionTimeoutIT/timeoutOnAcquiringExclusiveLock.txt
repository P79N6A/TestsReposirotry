@Test(timeout=TEST_TIMEOUT) public void timeoutOnAcquiringExclusiveLock() throws Exception {
  expectedException.expect(new RootCauseMatcher<>(LockAcquisitionTimeoutException.class,"The transaction has been terminated. " + "Retry your operation in a new transaction, and you should see a successful result. " + "Unable to acquire lock within configured timeout (dbms.lock.acquisition.timeout). "+ "Unable to acquire lock for resource: NODE with id: 0 within 2000 millis."));
  try (Transaction ignored=database.beginTx()){
    ResourceIterator<Node> nodes=database.findNodes(marker);
    Node node=nodes.next();
    node.setProperty(TEST_PROPERTY_NAME,"b");
    Future<Void> propertySetFuture=secondTransactionExecutor.executeDontWait(state -> {
      try (Transaction transaction1=database.beginTx()){
        node.setProperty(TEST_PROPERTY_NAME,"b");
        transaction1.success();
      }
       return null;
    }
);
    secondTransactionExecutor.waitUntilWaiting(exclusiveLockWaitingPredicate());
    clockExecutor.execute((OtherThreadExecutor.WorkerCommand<Void,Void>)state -> {
      fakeClock.forward(3,TimeUnit.SECONDS);
      return null;
    }
);
    propertySetFuture.get();
    fail("Should throw termination exception.");
  }
 }
