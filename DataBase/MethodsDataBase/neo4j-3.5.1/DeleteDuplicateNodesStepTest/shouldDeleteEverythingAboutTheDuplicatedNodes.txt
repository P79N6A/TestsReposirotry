@Repeat(times=10) @Test public void shouldDeleteEverythingAboutTheDuplicatedNodes() throws Exception {
  NeoStores neoStores=neoStoresRule.builder().build();
  Ids[] ids=new Ids[9];
  DataImporter.Monitor monitor=new DataImporter.Monitor();
  ids[0]=createNode(monitor,neoStores,10,10);
  ids[1]=createNode(monitor,neoStores,10,1);
  ids[2]=createNode(monitor,neoStores,10,0);
  ids[3]=createNode(monitor,neoStores,1,10);
  ids[4]=createNode(monitor,neoStores,1,1);
  ids[5]=createNode(monitor,neoStores,1,0);
  ids[6]=createNode(monitor,neoStores,0,10);
  ids[7]=createNode(monitor,neoStores,0,1);
  ids[8]=createNode(monitor,neoStores,0,0);
  long[] duplicateNodeIds=randomNodes(ids);
  SimpleStageControl control=new SimpleStageControl();
  try (DeleteDuplicateNodesStep step=new DeleteDuplicateNodesStep(control,Configuration.DEFAULT,PrimitiveLongCollections.iterator(duplicateNodeIds),neoStores.getNodeStore(),neoStores.getPropertyStore(),monitor)){
    control.steps(step);
    startAndAwaitCompletionOf(step);
  }
   control.assertHealthy();
  int expectedNodes=0;
  int expectedProperties=0;
  for (  Ids entity : ids) {
    boolean expectedToBeInUse=!ArrayUtils.contains(duplicateNodeIds,entity.node.getId());
    int stride=expectedToBeInUse ? 1 : 0;
    expectedNodes+=stride;
    assertEquals(expectedToBeInUse,neoStores.getNodeStore().isInUse(entity.node.getId()));
    for (    DynamicRecord labelRecord : entity.node.getDynamicLabelRecords()) {
      assertEquals(expectedToBeInUse,neoStores.getNodeStore().getDynamicLabelStore().isInUse(labelRecord.getId()));
    }
    for (    PropertyRecord propertyRecord : entity.properties) {
      assertEquals(expectedToBeInUse,neoStores.getPropertyStore().isInUse(propertyRecord.getId()));
      for (      PropertyBlock property : propertyRecord) {
        for (        DynamicRecord valueRecord : property.getValueRecords()) {
          AbstractDynamicStore valueStore;
switch (property.getType()) {
case STRING:
            valueStore=neoStores.getPropertyStore().getStringStore();
          break;
case ARRAY:
        valueStore=neoStores.getPropertyStore().getArrayStore();
      break;
default :
    throw new IllegalArgumentException(propertyRecord + " " + property);
}
assertEquals(expectedToBeInUse,valueStore.isInUse(valueRecord.getId()));
}
expectedProperties+=stride;
}
}
}
assertEquals(expectedNodes,monitor.nodesImported());
assertEquals(expectedProperties,monitor.propertiesImported());
}
