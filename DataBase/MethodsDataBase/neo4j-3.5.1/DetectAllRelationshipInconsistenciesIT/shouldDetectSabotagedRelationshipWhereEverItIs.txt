@Test public void shouldDetectSabotagedRelationshipWhereEverItIs() throws Exception {
  GraphDatabaseAPI db=getGraphDatabaseAPI();
  Sabotage sabotage;
  try {
    Node[] nodes=new Node[1_000];
    Relationship[] relationships=new Relationship[10_000];
    try (Transaction tx=db.beginTx()){
      for (int i=0; i < nodes.length; i++) {
        nodes[i]=db.createNode(label("Foo"));
      }
      for (int i=0; i < 10_000; i++) {
        relationships[i]=random.among(nodes).createRelationshipTo(random.among(nodes),MyRelTypes.TEST);
      }
      tx.success();
    }
     DependencyResolver resolver=db.getDependencyResolver();
    PageCache pageCache=resolver.resolveDependency(PageCache.class);
    StoreFactory storeFactory=newStoreFactory(pageCache);
    try (NeoStores neoStores=storeFactory.openNeoStores(false,StoreType.RELATIONSHIP)){
      RelationshipStore relationshipStore=neoStores.getRelationshipStore();
      Relationship sabotagedRelationships=random.among(relationships);
      sabotage=sabotage(relationshipStore,sabotagedRelationships.getId());
    }
   }
  finally {
    db.shutdown();
  }
  db=getGraphDatabaseAPI();
  try {
    DependencyResolver resolver=db.getDependencyResolver();
    PageCache pageCache=resolver.resolveDependency(PageCache.class);
    StoreFactory storeFactory=newStoreFactory(pageCache);
    try (NeoStores neoStores=storeFactory.openAllNeoStores()){
      StoreAccess storeAccess=new StoreAccess(neoStores).initialize();
      DirectStoreAccess directStoreAccess=new DirectStoreAccess(storeAccess,db.getDependencyResolver().resolveDependency(LabelScanStore.class),db.getDependencyResolver().resolveDependency(IndexProviderMap.class));
      int threads=random.intBetween(2,10);
      FullCheck checker=new FullCheck(getTuningConfiguration(),ProgressMonitorFactory.NONE,Statistics.NONE,threads);
      AssertableLogProvider logProvider=new AssertableLogProvider(true);
      ConsistencySummaryStatistics summary=checker.execute(directStoreAccess,logProvider.getLog(FullCheck.class));
      int relationshipInconsistencies=summary.getInconsistencyCountForRecordType(RecordType.RELATIONSHIP);
      assertTrue("Couldn't detect sabotaged relationship " + sabotage,relationshipInconsistencies > 0);
      logProvider.assertContainsLogCallContaining(sabotage.after.toString());
    }
   }
  finally {
    db.shutdown();
  }
}
