@Test public void test8(){
  Relationship edgeAB=graph.makeEdge("a","b");
  Relationship edgeBC=graph.makeEdge("b","c");
  Relationship edgeCD=graph.makeEdge("c","d");
  Relationship edgeDE=graph.makeEdge("d","e");
  Relationship edgeAB2=graph.makeEdge("a","b2");
  Relationship edgeB2C=graph.makeEdge("b2","c");
  Relationship edgeCD2=graph.makeEdge("c","d2");
  Relationship edgeD2E=graph.makeEdge("d2","e");
  Dijkstra<Double> dijkstra=new Dijkstra<>(0.0,graph.getNode("a"),graph.getNode("e"),(relationship,direction) -> 1.0,new DoubleAdder(),Double::compareTo,Direction.OUTGOING,MyRelTypes.R1);
  boolean pathBD=false;
  boolean pathB2D=false;
  boolean pathBD2=false;
  boolean pathB2D2=false;
  List<List<Relationship>> paths=dijkstra.getPathsAsRelationships();
  assertEquals(4,paths.size());
  for (  List<Relationship> path : paths) {
    assertEquals(4,path.size());
    if (path.get(0).equals(edgeAB)) {
      assertEquals(path.get(1),edgeBC);
    }
 else {
      assertEquals(path.get(0),edgeAB2);
      assertEquals(path.get(1),edgeB2C);
    }
    if (path.get(2).equals(edgeCD)) {
      assertEquals(path.get(3),edgeDE);
    }
 else {
      assertEquals(path.get(2),edgeCD2);
      assertEquals(path.get(3),edgeD2E);
    }
    if (path.get(0).equals(edgeAB)) {
      if (path.get(2).equals(edgeCD)) {
        pathBD=true;
      }
 else       if (path.get(2).equals(edgeCD2)) {
        pathBD2=true;
      }
    }
 else {
      if (path.get(2).equals(edgeCD)) {
        pathB2D=true;
      }
 else       if (path.get(2).equals(edgeCD2)) {
        pathB2D2=true;
      }
    }
  }
  assertTrue(pathBD);
  assertTrue(pathB2D);
  assertTrue(pathBD2);
  assertTrue(pathB2D2);
}
