@Test public void mustPrintMinimalPageCacheMemorySettingForConfiguredDb() throws Exception {
  StringBuilder output=new StringBuilder();
  Path homeDir=directory.directory().toPath();
  Path configDir=homeDir.resolve("conf");
  configDir.toFile().mkdirs();
  Path configFile=configDir.resolve(DEFAULT_CONFIG_FILE_NAME);
  String databaseName="mydb";
  store(stringMap(data_directory.name(),homeDir.toString()),configFile.toFile());
  File databaseDirectory=fromFile(configFile).withHome(homeDir).withSetting(active_database,databaseName).build().get(database_path);
  createDatabaseWithNativeIndexes(databaseDirectory);
  OutsideWorld outsideWorld=new OutputCaptureOutsideWorld(output);
  MemoryRecommendationsCommand command=new MemoryRecommendationsCommand(homeDir,configDir,outsideWorld);
  String heap=bytesToString(recommendHeapMemory(gibiBytes(8)));
  String pagecache=bytesToString(recommendPageCacheMemory(gibiBytes(8)));
  command.execute(array("--database",databaseName,"--memory","8g"));
  String memrecString=output.toString();
  Map<String,String> stringMap=load(new StringReader(memrecString));
  assertThat(stringMap.get(initialHeapSize.name()),is(heap));
  assertThat(stringMap.get(maxHeapSize.name()),is(heap));
  assertThat(stringMap.get(pagecache_memory.name()),is(pagecache));
  long[] expectedSizes=calculatePageCacheFileSize(DatabaseLayout.of(databaseDirectory));
  long expectedPageCacheSize=expectedSizes[0];
  long expectedLuceneSize=expectedSizes[1];
  assertThat(memrecString,containsString("Lucene indexes: " + bytesToString(expectedLuceneSize)));
  assertThat(memrecString,containsString("Data volume and native indexes: " + bytesToString(expectedPageCacheSize)));
}
