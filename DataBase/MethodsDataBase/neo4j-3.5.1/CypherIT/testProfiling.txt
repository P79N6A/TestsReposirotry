@Test @Title("Profile a query") @Documented("By passing in an extra parameter, you can ask the cypher executor to return a profile of the " + "query as it is executed. This can help in locating bottlenecks.") @Graph(nodes={@NODE(name="I",setNameProperty=true),@NODE(name="you",setNameProperty=true),@NODE(name="him",setNameProperty=true,properties={@PROP(key="age",value="25",type=GraphDescription.PropType.INTEGER)})},relationships={@REL(start="I",end="him",type="know",properties={}),@REL(start="I",end="you",type="know",properties={})}) public void testProfiling() throws Exception {
  String script=createScript("MATCH (x)-[r]->(n) WHERE id(x) = %I% RETURN type(r), n.name, n.age");
  String response=doCypherRestCall(cypherUri() + "?profile=true",script,Status.OK);
  Map<String,Object> des=jsonToMap(response);
  assertThat(des.get("plan"),instanceOf(Map.class));
  @SuppressWarnings("unchecked") Map<String,Object> plan=(Map<String,Object>)des.get("plan");
  assertThat(plan.get("name"),instanceOf(String.class));
  assertThat(plan.get("children"),instanceOf(Collection.class));
  assertThat(plan.get("rows"),instanceOf(Number.class));
  assertThat(plan.get("dbHits"),instanceOf(Number.class));
}
