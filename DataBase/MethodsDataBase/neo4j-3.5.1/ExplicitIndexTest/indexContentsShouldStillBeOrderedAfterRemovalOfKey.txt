@Test public void indexContentsShouldStillBeOrderedAfterRemovalOfKey(){
  String indexName="index";
  try (Transaction tx=db.beginTx()){
    db.index().forNodes(indexName);
    tx.success();
  }
   long delete;
  long first;
  long second;
  long third;
  long fourth;
  try (Transaction tx=db.beginTx()){
    Index<Node> nodeIndex=db.index().forNodes(indexName);
    Node node=db.createNode();
    delete=node.getId();
    nodeIndex.add(node,"keydelte","delete");
    node=db.createNode();
    second=node.getId();
    nodeIndex.add(node,"key",ValueContext.numeric(2));
    nodeIndex.add(node,"keydelte","delete");
    node=db.createNode();
    fourth=node.getId();
    nodeIndex.add(node,"key",ValueContext.numeric(4));
    nodeIndex.add(node,"keydelte","delete");
    node=db.createNode();
    first=node.getId();
    nodeIndex.add(node,"key",ValueContext.numeric(1));
    nodeIndex.add(node,"keydelte","delete");
    node=db.createNode();
    third=node.getId();
    nodeIndex.add(node,"key",ValueContext.numeric(3));
    nodeIndex.add(node,"keydelte","delete");
    tx.success();
  }
   try (Transaction tx=db.beginTx()){
    Index<Node> nodeIndex=db.index().forNodes(indexName);
    IndexHits<Node> query=nodeIndex.query("key",QueryContext.numericRange("key",2,3));
    assertEquals(2,query.size());
    query.forEachRemaining(node -> assertTrue(node.getId() == second || node.getId() == third));
  }
   try (Transaction tx=db.beginTx()){
    Index<Node> nodeIndex=db.index().forNodes(indexName);
    nodeIndex.remove(db.getNodeById(delete),"keydelete");
    nodeIndex.remove(db.getNodeById(first),"keydelete");
    nodeIndex.remove(db.getNodeById(second),"keydelete");
    nodeIndex.remove(db.getNodeById(third),"keydelete");
    nodeIndex.remove(db.getNodeById(fourth),"keydelete");
    tx.success();
  }
   try (Transaction tx=db.beginTx()){
    Index<Node> nodeIndex=db.index().forNodes(indexName);
    IndexHits<Node> query=nodeIndex.query("key",QueryContext.numericRange("key",2,3));
    assertEquals(2,query.size());
    query.forEachRemaining(node -> assertTrue(node.getId() == second || node.getId() == third));
  }
 }
