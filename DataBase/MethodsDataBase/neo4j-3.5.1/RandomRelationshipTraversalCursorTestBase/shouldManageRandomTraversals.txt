@Test public void shouldManageRandomTraversals(){
  try (NodeCursor node=cursors.allocateNodeCursor();RelationshipGroupCursor group=cursors.allocateRelationshipGroupCursor();RelationshipTraversalCursor relationship=cursors.allocateRelationshipTraversalCursor()){
    for (int i=0; i < N_TRAVERSALS; i++) {
      long nodeId=nodeIds.get(random.nextInt(N_NODES));
      read.singleNode(nodeId,node);
      assertTrue("access root node",node.next());
      node.relationships(group);
      assertFalse("single root",node.next());
      while (group.next()) {
        group.incoming(relationship);
        while (relationship.next()) {
          assertEquals("incoming origin",nodeId,relationship.originNodeReference());
          relationship.neighbour(node);
        }
        group.outgoing(relationship);
        while (relationship.next()) {
          assertEquals("outgoing origin",nodeId,relationship.originNodeReference());
          relationship.neighbour(node);
        }
        group.loops(relationship);
        while (relationship.next()) {
          assertEquals("loop origin",nodeId,relationship.originNodeReference());
          relationship.neighbour(node);
        }
      }
    }
  }
 catch (  Throwable t) {
    throw new RuntimeException("Failed with random seed " + seed,t);
  }
}
