@Test void shouldGetSameInstantWhenAddingDurationBetweenToInstant(){
  @SuppressWarnings("unchecked") Pair<Temporal,Temporal>[] input=new Pair[]{pair(datetime(date(2017,3,20),localTime(13,37,0,0),ZoneId.of("Europe/Stockholm")),datetime(date(2017,3,26),localTime(19,40,0,0),ZoneId.of("Europe/Stockholm"))),pair(datetime(date(2017,3,20),localTime(13,37,0,0),ZoneId.of("Europe/Stockholm")),datetime(date(2017,3,26),localTime(11,40,0,0),ZoneId.of("Europe/Stockholm"))),pair(datetime(date(2017,10,20),localTime(13,37,0,0),ZoneId.of("Europe/Stockholm")),datetime(date(2017,10,29),localTime(19,40,0,0),ZoneId.of("Europe/Stockholm"))),pair(datetime(date(2017,10,20),localTime(13,37,0,0),ZoneId.of("Europe/Stockholm")),datetime(date(2017,10,29),localTime(11,40,0,0),ZoneId.of("Europe/Stockholm")))};
  for (  Pair<Temporal,Temporal> pair : input) {
    Temporal a=pair.first(), b=pair.other();
    DurationValue diffAB=durationBetween(a,b);
    DurationValue diffBA=durationBetween(b,a);
    DurationValue diffABs=between(SECONDS,a,b);
    DurationValue diffBAs=between(SECONDS,b,a);
    assertEquals(b,a.plus(diffAB),diffAB.prettyPrint());
    assertEquals(a,b.plus(diffBA),diffBA.prettyPrint());
    assertEquals(b,a.plus(diffABs),diffABs.prettyPrint());
    assertEquals(a,b.plus(diffBAs),diffBAs.prettyPrint());
  }
}
