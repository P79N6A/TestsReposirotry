@Test void shouldHaveSensibleHashCode(){
  assertEquals(0,duration(0,0,0,0).computeHash());
  assertNotEquals(duration(0,0,0,1).computeHash(),duration(0,0,0,2).computeHash());
  assertNotEquals(duration(0,0,0,1).computeHash(),duration(0,0,1,0).computeHash());
  assertNotEquals(duration(0,0,0,1).computeHash(),duration(0,1,0,0).computeHash());
  assertNotEquals(duration(0,0,0,1).computeHash(),duration(1,0,0,0).computeHash());
  assertNotEquals(duration(0,0,1,0).computeHash(),duration(0,0,2,0).computeHash());
  assertNotEquals(duration(0,0,1,0).computeHash(),duration(0,0,0,1).computeHash());
  assertNotEquals(duration(0,0,1,0).computeHash(),duration(0,1,0,0).computeHash());
  assertNotEquals(duration(0,0,1,0).computeHash(),duration(1,0,0,0).computeHash());
  assertNotEquals(duration(0,1,0,0).computeHash(),duration(0,2,0,0).computeHash());
  assertNotEquals(duration(0,1,0,0).computeHash(),duration(0,0,0,1).computeHash());
  assertNotEquals(duration(0,1,0,0).computeHash(),duration(0,0,1,0).computeHash());
  assertNotEquals(duration(0,1,0,0).computeHash(),duration(1,0,0,0).computeHash());
  assertNotEquals(duration(1,0,0,0).computeHash(),duration(2,0,0,0).computeHash());
  assertNotEquals(duration(1,0,0,0).computeHash(),duration(0,0,0,1).computeHash());
  assertNotEquals(duration(1,0,0,0).computeHash(),duration(0,0,1,0).computeHash());
  assertNotEquals(duration(1,0,0,0).computeHash(),duration(0,1,0,0).computeHash());
}
