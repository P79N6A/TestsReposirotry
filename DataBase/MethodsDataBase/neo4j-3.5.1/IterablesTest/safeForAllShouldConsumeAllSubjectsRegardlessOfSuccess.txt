@Test void safeForAllShouldConsumeAllSubjectsRegardlessOfSuccess(){
  List<String> seenSubjects=new ArrayList<>();
  List<String> failedSubjects=new ArrayList<>();
  ThrowingConsumer<String,RuntimeException> consumer=new ThrowingConsumer<String,RuntimeException>(){
    @Override public void accept(    String s){
      seenSubjects.add(s);
      if (seenSubjects.size() % 2 == 1) {
        failedSubjects.add(s);
        throw new RuntimeException(s);
      }
    }
  }
;
  Iterable<String> subjects=asList("1","2","3","4","5");
  try {
    Iterables.safeForAll(consumer,subjects);
    fail("Should have thrown exception");
  }
 catch (  RuntimeException e) {
    assertEquals(subjects,seenSubjects);
    Iterator<String> failed=failedSubjects.iterator();
    assertTrue(failed.hasNext());
    assertEquals(e.getMessage(),failed.next());
    for (    Throwable suppressed : e.getSuppressed()) {
      assertTrue(failed.hasNext());
      assertEquals(suppressed.getMessage(),failed.next());
    }
    assertFalse(failed.hasNext());
  }
}
