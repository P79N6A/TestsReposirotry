@Test public void tryEvictThatFailsMustReportExceptionsToEvictionAndFlushEvents() throws Exception {
  pageList.unlockExclusive(pageRef);
  IOException ioException=new IOException();
  PageSwapper swapper=new DummyPageSwapper("a",313){
    @Override public long write(    long filePageId,    long bufferAddress) throws IOException {
      throw ioException;
    }
  }
;
  int swapperId=swappers.allocate(swapper);
  doFault(swapperId,42);
  pageList.unlockExclusiveAndTakeWriteLock(pageRef);
  pageList.unlockWrite(pageRef);
  assertTrue(pageList.isModified(pageRef));
  EvictionAndFlushRecorder recorder=new EvictionAndFlushRecorder();
  try {
    pageList.tryEvict(pageRef,() -> recorder);
    fail("tryEvict should have thrown");
  }
 catch (  IOException e) {
  }
  assertThat(recorder.evictionClosed,is(true));
  assertThat(recorder.filePageId,is(42L));
  assertThat(recorder.swapper,sameInstance(swapper));
  assertThat(recorder.evictionException,sameInstance(ioException));
  assertThat(recorder.cachePageId,is(pageRef));
  assertThat(recorder.bytesWritten,is(0L));
  assertThat(recorder.flushDone,is(true));
  assertThat(recorder.flushException,sameInstance(ioException));
  assertThat(recorder.pagesFlushed,is(0));
}
