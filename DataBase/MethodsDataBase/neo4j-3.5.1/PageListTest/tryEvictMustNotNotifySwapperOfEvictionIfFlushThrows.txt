@Test public void tryEvictMustNotNotifySwapperOfEvictionIfFlushThrows() throws Exception {
  pageList.unlockExclusive(pageRef);
  AtomicBoolean evictionNotified=new AtomicBoolean();
  PageSwapper swapper=new DummyPageSwapper("a",313){
    @Override public long write(    long filePageId,    long bufferAddress) throws IOException {
      throw new IOException();
    }
    @Override public void evicted(    long filePageId){
      evictionNotified.set(true);
    }
  }
;
  int swapperId=swappers.allocate(swapper);
  doFault(swapperId,42);
  pageList.unlockExclusiveAndTakeWriteLock(pageRef);
  pageList.unlockWrite(pageRef);
  assertTrue(pageList.isModified(pageRef));
  try {
    pageList.tryEvict(pageRef,EvictionRunEvent.NULL);
    fail("tryEvict should have thrown");
  }
 catch (  IOException e) {
  }
  assertFalse(evictionNotified.get());
}
