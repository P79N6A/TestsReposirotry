@Test public void tryEvictMustFlushPageIfModified() throws Exception {
  pageList.unlockExclusive(pageRef);
  AtomicLong writtenFilePageId=new AtomicLong(-1);
  AtomicLong writtenBufferAddress=new AtomicLong(-1);
  PageSwapper swapper=new DummyPageSwapper("file",pageSize){
    @Override public long write(    long filePageId,    long bufferAddress) throws IOException {
      assertTrue(writtenFilePageId.compareAndSet(-1,filePageId));
      assertTrue(writtenBufferAddress.compareAndSet(-1,bufferAddress));
      return super.write(filePageId,bufferAddress);
    }
  }
;
  int swapperId=swappers.allocate(swapper);
  doFault(swapperId,42);
  pageList.unlockExclusiveAndTakeWriteLock(pageRef);
  pageList.unlockWrite(pageRef);
  assertTrue(pageList.isModified(pageRef));
  assertTrue(pageList.tryEvict(pageRef,EvictionRunEvent.NULL));
  assertThat(writtenFilePageId.get(),is(42L));
  assertThat(writtenBufferAddress.get(),is(pageList.getAddress(pageRef)));
}
