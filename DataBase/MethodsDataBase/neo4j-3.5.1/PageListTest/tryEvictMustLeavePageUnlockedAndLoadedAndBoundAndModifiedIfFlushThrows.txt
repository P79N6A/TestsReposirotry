@Test public void tryEvictMustLeavePageUnlockedAndLoadedAndBoundAndModifiedIfFlushThrows() throws Exception {
  pageList.unlockExclusive(pageRef);
  PageSwapper swapper=new DummyPageSwapper("a",313){
    @Override public long write(    long filePageId,    long bufferAddress) throws IOException {
      throw new IOException();
    }
  }
;
  int swapperId=swappers.allocate(swapper);
  doFault(swapperId,42);
  pageList.unlockExclusiveAndTakeWriteLock(pageRef);
  pageList.unlockWrite(pageRef);
  assertTrue(pageList.isModified(pageRef));
  try {
    pageList.tryEvict(pageRef,EvictionRunEvent.NULL);
    fail("tryEvict should have thrown");
  }
 catch (  IOException e) {
  }
  assertTrue(pageList.tryExclusiveLock(pageRef));
  assertTrue(pageList.isLoaded(pageRef));
  assertTrue(pageList.isBoundTo(pageRef,swapperId,42));
  assertTrue(pageList.isModified(pageRef));
}
