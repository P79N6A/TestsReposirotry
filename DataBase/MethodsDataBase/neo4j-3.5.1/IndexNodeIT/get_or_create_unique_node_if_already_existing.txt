@Documented("Get or create unique node (existing).\n" + "\n" + "Here,\n"+ "a node is not created but the existing unique node returned, since another node\n"+ "is indexed with the same data already. The node data returned is then that of the\n"+ "already existing node.") @Test public void get_or_create_unique_node_if_already_existing() throws Exception {
  final String index=indexes.newInstance();
  String key="name";
  String value="Peter";
  GraphDatabaseService graphdb=graphdb();
  try (Transaction tx=graphdb().beginTx()){
    Node peter=graphdb.createNode();
    peter.setProperty(key,value);
    peter.setProperty("sequence",1);
    graphdb.index().forNodes(index).add(peter,key,value);
    tx.success();
  }
   helper.createNodeIndex(index);
  ResponseEntity response=gen().expectedStatus(200).payloadType(MediaType.APPLICATION_JSON_TYPE).payload("{\"key\": \"" + key + "\", \"value\": \""+ value+ "\", \"properties\": {\""+ key+ "\": \""+ value+ "\", \"sequence\": 2}}").post(functionalTestHelper.nodeIndexUri() + index + "?uniqueness=get_or_create");
  Map<String,Object> result=JsonHelper.jsonToMap(response.entity());
  Map<String,Object> data=assertCast(Map.class,result.get("data"));
  assertEquals(value,data.get(key));
  assertEquals(1,data.get("sequence"));
}
