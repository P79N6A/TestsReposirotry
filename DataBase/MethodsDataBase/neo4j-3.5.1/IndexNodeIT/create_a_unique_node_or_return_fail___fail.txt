@Documented("Create a unique node or return fail (fail).\n" + "\n" + "Here, in case\n"+ "of an already existing node, an error should be returned. In this\n"+ "example, an existing node indexed with the same data\n"+ "is found and an error is returned.") @Test public void create_a_unique_node_or_return_fail___fail() throws Exception {
  final String index=indexes.newInstance();
  String key="name";
  String value="Peter";
  GraphDatabaseService graphdb=graphdb();
  helper.createNodeIndex(index);
  try (Transaction tx=graphdb.beginTx()){
    Node peter=graphdb.createNode();
    peter.setProperty(key,value);
    peter.setProperty("sequence",1);
    graphdb.index().forNodes(index).add(peter,key,value);
    tx.success();
  }
   RestRequest.req();
  ResponseEntity response=gen.get().expectedStatus(409).payloadType(MediaType.APPLICATION_JSON_TYPE).payload("{\"key\": \"" + key + "\", \"value\": \""+ value+ "\", \"properties\": {\""+ key+ "\": \""+ value+ "\", \"sequence\": 2}}").post(functionalTestHelper.nodeIndexUri() + index + "?uniqueness=create_or_fail");
  Map<String,Object> result=JsonHelper.jsonToMap(response.entity());
  Map<String,Object> data=assertCast(Map.class,result.get("data"));
  assertEquals(value,data.get(key));
  assertEquals(1,data.get("sequence"));
}
