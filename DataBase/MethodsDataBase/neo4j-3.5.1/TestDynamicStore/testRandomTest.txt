@Test public void testRandomTest(){
  Random random=new Random(System.currentTimeMillis());
  DynamicArrayStore store=createDynamicArrayStore();
  ArrayList<Long> idsTaken=new ArrayList<>();
  Map<Long,byte[]> byteData=new HashMap<>();
  float deleteIndex=0.2f;
  float closeIndex=0.1f;
  int currentCount=0;
  int maxCount=128;
  Set<Long> set=new HashSet<>();
  while (currentCount < maxCount) {
    float rIndex=random.nextFloat();
    if (rIndex < deleteIndex && currentCount > 0) {
      long blockId=idsTaken.remove(random.nextInt(currentCount));
      store.getRecords(blockId,NORMAL);
      byte[] bytes=(byte[])store.getArrayFor(store.getRecords(blockId,NORMAL));
      validateData(bytes,byteData.remove(blockId));
      Collection<DynamicRecord> records=store.getRecords(blockId,NORMAL);
      for (      DynamicRecord record : records) {
        record.setInUse(false);
        store.updateRecord(record);
        set.remove(record.getId());
      }
      currentCount--;
    }
 else {
      byte[] bytes=createRandomBytes(random);
      Collection<DynamicRecord> records=new ArrayList<>();
      store.allocateRecords(records,bytes);
      for (      DynamicRecord record : records) {
        assert !set.contains(record.getId());
        store.updateRecord(record);
        set.add(record.getId());
      }
      long blockId=Iterables.first(records).getId();
      idsTaken.add(blockId);
      byteData.put(blockId,bytes);
      currentCount++;
    }
    if (rIndex > (1.0f - closeIndex) || rIndex < closeIndex) {
      neoStores.close();
      store=createDynamicArrayStore();
    }
  }
}
