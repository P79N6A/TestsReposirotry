@Test public void testClose(){
  try {
    IdGeneratorImpl.createGenerator(fs,idGeneratorFile(),0,false);
    IdGenerator idGenerator=new IdGeneratorImpl(fs,idGeneratorFile(),2,1000,false,IdType.NODE,() -> 0L);
    closeIdGenerator(idGenerator);
    try {
      idGenerator.nextId();
      fail("nextId after close should throw exception");
    }
 catch (    IllegalStateException e) {
    }
    try {
      idGenerator.freeId(0);
      fail("freeId after close should throw exception");
    }
 catch (    IllegalStateException e) {
    }
    idGenerator=new IdGeneratorImpl(fs,idGeneratorFile(),2,1000,false,IdType.NODE,() -> 0L);
    assertEquals(0L,idGenerator.nextId());
    assertEquals(1L,idGenerator.nextId());
    assertEquals(2L,idGenerator.nextId());
    closeIdGenerator(idGenerator);
    try {
      idGenerator.nextId();
      fail("nextId after close should throw exception");
    }
 catch (    IllegalStateException e) {
    }
    try {
      idGenerator.freeId(0);
      fail("freeId after close should throw exception");
    }
 catch (    IllegalStateException e) {
    }
  }
  finally {
    File file=idGeneratorFile();
    if (file.exists()) {
      assertTrue(file.delete());
    }
  }
}
