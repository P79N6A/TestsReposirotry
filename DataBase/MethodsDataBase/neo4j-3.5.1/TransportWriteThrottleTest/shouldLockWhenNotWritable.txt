@Test public void shouldLockWhenNotWritable() throws Exception {
  TestThrottleLock lockOverride=new TestThrottleLock();
  TransportThrottle throttle=newThrottleAndInstall(channel,lockOverride);
  when(channel.isWritable()).thenReturn(false);
  Future<Void> future=otherThread.execute(state -> {
    throttle.acquire(channel);
    return null;
  }
);
  try {
    future.get(2000,TimeUnit.MILLISECONDS);
    fail("should timeout");
  }
 catch (  TimeoutException t) {
  }
  assertFalse(future.isDone());
  assertThat(lockOverride.lockCallCount(),greaterThan(0));
  assertThat(lockOverride.unlockCallCount(),is(0));
  future.cancel(true);
  try {
    otherThread.get().awaitFuture(future);
    fail("Exception expected");
  }
 catch (  CancellationException ignore) {
  }
}
