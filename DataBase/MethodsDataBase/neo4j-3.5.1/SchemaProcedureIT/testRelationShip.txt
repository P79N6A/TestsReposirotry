@Test public void testRelationShip() throws Throwable {
  Transaction transaction=newTransaction(AnonymousContext.writeToken());
  long nodeIdPerson=transaction.dataWrite().nodeCreate();
  int labelIdPerson=transaction.tokenWrite().labelGetOrCreateForName("Person");
  transaction.dataWrite().nodeAddLabel(nodeIdPerson,labelIdPerson);
  long nodeIdLocation=transaction.dataWrite().nodeCreate();
  int labelIdLocation=transaction.tokenWrite().labelGetOrCreateForName("Location");
  transaction.dataWrite().nodeAddLabel(nodeIdLocation,labelIdLocation);
  int relationshipTypeId=transaction.tokenWrite().relationshipTypeGetOrCreateForName("LIVES_IN");
  transaction.dataWrite().relationshipCreate(nodeIdPerson,relationshipTypeId,nodeIdLocation);
  commit();
  RawIterator<Object[],ProcedureException> stream=procs().procedureCallRead(procs().procedureGet(procedureName("db","schema")).id(),new Object[0]);
  while (stream.hasNext()) {
    Object[] next=stream.next();
    assertEquals(2,next.length);
    LinkedList<Relationship> relationships=(LinkedList<Relationship>)next[1];
    assertEquals(1,relationships.size());
    assertEquals("LIVES_IN",relationships.get(0).getType().name());
    assertThat(relationships.get(0).getStartNode().getLabels(),contains(equalTo(Label.label("Person"))));
    assertThat(relationships.get(0).getEndNode().getLabels(),contains(equalTo(Label.label("Location"))));
  }
  commit();
}
