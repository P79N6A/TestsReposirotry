@Test public void shouldHandleLongPath(){
  Node a, b, c, d, e;
  Relationship r1, r2, r3, r4;
  try (Transaction tx=db.beginTx()){
    a=db.createNode();
    b=db.createNode();
    c=db.createNode();
    d=db.createNode();
    e=db.createNode();
    r1=a.createRelationshipTo(b,RelationshipType.withName("R"));
    r2=b.createRelationshipTo(c,RelationshipType.withName("R"));
    r3=c.createRelationshipTo(d,RelationshipType.withName("R"));
    r4=d.createRelationshipTo(e,RelationshipType.withName("R"));
    tx.success();
  }
   Path mapped=mapper.mapPath(path(asNodeValues(a,b,c,d,e),asRelationshipsValues(r1,r2,r3,r4)));
  try (Transaction ignore=db.beginTx()){
    assertThat(mapped.length(),equalTo(4));
    assertThat(mapped.startNode(),equalTo(a));
    assertThat(mapped.endNode(),equalTo(e));
    assertThat(Iterables.asList(mapped.relationships()),equalTo(Arrays.asList(r1,r2,r3,r4)));
    assertThat(Iterables.asList(mapped.reverseRelationships()),equalTo(Arrays.asList(r4,r3,r2,r1)));
    assertThat(Iterables.asList(mapped.nodes()),equalTo(Arrays.asList(a,b,c,d,e)));
    assertThat(Iterables.asList(mapped.reverseNodes()),equalTo(Arrays.asList(e,d,c,b,a)));
    assertThat(mapped.lastRelationship(),equalTo(r4));
    assertThat(Iterators.asList(mapped.iterator()),equalTo(Arrays.asList(a,r1,b,r2,c,r3,d,r4,e)));
  }
 }
