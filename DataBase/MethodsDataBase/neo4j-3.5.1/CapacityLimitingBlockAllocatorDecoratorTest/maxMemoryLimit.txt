@Test void maxMemoryLimit(){
  final MemoryAllocationTracker tracker=mock(MemoryAllocationTracker.class);
  final OffHeapBlockAllocator allocator=mock(OffHeapBlockAllocator.class);
  when(allocator.allocate(anyLong(),any(MemoryAllocationTracker.class))).then(invocation -> {
    final long size=invocation.<Long>getArgument(0);
    return new MemoryBlock(0,size,0,size);
  }
);
  final CapacityLimitingBlockAllocatorDecorator decorator=new CapacityLimitingBlockAllocatorDecorator(allocator,1024);
  final List<MemoryBlock> blocks=new ArrayList<>();
  for (int i=0; i < 8; i++) {
    final MemoryBlock block=decorator.allocate(128,tracker);
    blocks.add(block);
  }
  assertThrows(RuntimeException.class,() -> decorator.allocate(128,tracker));
  decorator.free(blocks.remove(0),tracker);
  assertDoesNotThrow(() -> decorator.allocate(128,tracker));
  assertThrows(RuntimeException.class,() -> decorator.allocate(256,tracker));
  decorator.free(blocks.remove(0),tracker);
  assertThrows(RuntimeException.class,() -> decorator.allocate(256,tracker));
  decorator.free(blocks.remove(0),tracker);
  assertDoesNotThrow(() -> decorator.allocate(256,tracker));
}
