@Test public void testMessWithMiddleRecordDeletes(){
  Node node=getGraphDb().createNode();
  long recordsInUseAtStart=propertyRecordsInUse();
  int stuffedShortStrings=0;
  for (; stuffedShortStrings < 3 * PropertyType.getPayloadSizeLongs(); stuffedShortStrings++) {
    node.setProperty("shortString" + stuffedShortStrings,String.valueOf(stuffedShortStrings));
  }
  newTransaction();
  assertEquals(recordsInUseAtStart + 3,propertyRecordsInUse());
  final List<Pair<String,Object>> middleRecordProps=getPropertiesFromRecord(1);
  final Pair<String,Object> secondBlockInMiddleRecord=middleRecordProps.get(1);
  final Pair<String,Object> thirdBlockInMiddleRecord=middleRecordProps.get(2);
  assertEquals(secondBlockInMiddleRecord.getTwo(),node.removeProperty(secondBlockInMiddleRecord.getOne()));
  assertEquals(thirdBlockInMiddleRecord.getTwo(),node.removeProperty(thirdBlockInMiddleRecord.getOne()));
  newTransaction();
  assertEquals(recordsInUseAtStart + 3,propertyRecordsInUse());
  for (int i=0; i < stuffedShortStrings; i++) {
    if (secondBlockInMiddleRecord.getTwo().equals(String.valueOf(i)) || thirdBlockInMiddleRecord.getTwo().equals(String.valueOf(i))) {
      assertFalse(node.hasProperty("shortString" + i));
    }
 else {
      assertEquals(String.valueOf(i),node.getProperty("shortString" + i));
    }
  }
  int deletedProps=0;
  for (  Pair<String,Object> prop : middleRecordProps) {
    final String name=prop.getOne();
    if (node.hasProperty(name)) {
      deletedProps++;
      node.removeProperty(name);
    }
  }
  assertEquals(PropertyType.getPayloadSizeLongs() - 2,deletedProps);
  newTransaction();
  assertEquals(recordsInUseAtStart + 2,propertyRecordsInUse());
  middleRecordProps.forEach(nameAndValue -> assertFalse(node.hasProperty(nameAndValue.getOne())));
  getPropertiesFromRecord(0).forEach(nameAndValue -> {
    final String name=nameAndValue.getOne();
    final Object value=nameAndValue.getTwo();
    assertEquals(value,node.removeProperty(name));
  }
);
  getPropertiesFromRecord(2).forEach(nameAndValue -> {
    final String name=nameAndValue.getOne();
    final Object value=nameAndValue.getTwo();
    assertEquals(value,node.removeProperty(name));
  }
);
}
