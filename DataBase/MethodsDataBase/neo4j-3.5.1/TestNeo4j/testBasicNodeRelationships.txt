@Test public void testBasicNodeRelationships(){
  Node firstNode;
  Node secondNode;
  Relationship rel;
  firstNode=getGraphDb().createNode();
  assertNotNull("Failure creating first node",firstNode);
  secondNode=getGraphDb().createNode();
  assertNotNull("Failure creating second node",secondNode);
  rel=firstNode.createRelationshipTo(secondNode,MyRelTypes.TEST);
  assertNotNull("Relationship is null",rel);
  RelationshipType relType=rel.getType();
  assertNotNull("Relationship's type is is null",relType);
  try (ResourceIterator<Relationship> iterator=asResourceIterator(firstNode.getRelationships(relType).iterator())){
    assertTrue(iterator.hasNext());
  }
   try (ResourceIterator<Relationship> iterator=asResourceIterator(secondNode.getRelationships(relType).iterator())){
    assertTrue(iterator.hasNext());
  }
   ResourceIterable<Relationship> allRels;
  allRels=(ResourceIterable<Relationship>)firstNode.getRelationships();
  assertTrue(this.objectExistsInIterable(rel,allRels));
  allRels=(ResourceIterable<Relationship>)firstNode.getRelationships(relType);
  assertTrue(this.objectExistsInIterable(rel,allRels));
  allRels=(ResourceIterable<Relationship>)secondNode.getRelationships();
  assertTrue(this.objectExistsInIterable(rel,allRels));
  allRels=(ResourceIterable<Relationship>)secondNode.getRelationships(relType);
  assertTrue(this.objectExistsInIterable(rel,allRels));
  Node[] relNodes=rel.getNodes();
  assertEquals("A relationship should always be connected to exactly " + "two nodes",relNodes.length,2);
  assertTrue("Relationship says that it isn't connected to firstNode",this.objectExistsInArray(firstNode,relNodes));
  assertTrue("Relationship says that it isn't connected to secondNode",this.objectExistsInArray(secondNode,relNodes));
  assertEquals("The other node should be secondNode but it isn't",rel.getOtherNode(firstNode),secondNode);
  assertEquals("The other node should be firstNode but it isn't",rel.getOtherNode(secondNode),firstNode);
  rel.delete();
  secondNode.delete();
  firstNode.delete();
}
