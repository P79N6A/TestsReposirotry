@Test void terminateExpiredTransactions(){
  HashSet<KernelTransactionHandle> transactions=new HashSet<>();
  KernelTransactionImplementation tx1=prepareTxMock(3,1,3);
  KernelTransactionImplementation tx2=prepareTxMock(4,1,8);
  KernelTransactionImplementationHandle handle1=new KernelTransactionImplementationHandle(tx1,fakeClock);
  KernelTransactionImplementationHandle handle2=new KernelTransactionImplementationHandle(tx2,fakeClock);
  transactions.add(handle1);
  transactions.add(handle2);
  when(kernelTransactions.activeTransactions()).thenReturn(transactions);
  KernelTransactionMonitor transactionMonitor=buildTransactionMonitor();
  fakeClock.forward(3,TimeUnit.MILLISECONDS);
  transactionMonitor.run();
  verify(tx1,never()).markForTermination(Status.Transaction.TransactionTimedOut);
  verify(tx2,never()).markForTermination(Status.Transaction.TransactionTimedOut);
  logProvider.assertNoMessagesContaining("timeout");
  fakeClock.forward(2,TimeUnit.MILLISECONDS);
  transactionMonitor.run();
  verify(tx1).markForTermination(EXPECTED_REUSE_COUNT,Status.Transaction.TransactionTimedOut);
  verify(tx2,never()).markForTermination(Status.Transaction.TransactionTimedOut);
  logProvider.assertContainsLogCallContaining("timeout");
  logProvider.clear();
  fakeClock.forward(10,TimeUnit.MILLISECONDS);
  transactionMonitor.run();
  verify(tx2).markForTermination(EXPECTED_REUSE_COUNT,Status.Transaction.TransactionTimedOut);
  logProvider.assertContainsLogCallContaining("timeout");
}
