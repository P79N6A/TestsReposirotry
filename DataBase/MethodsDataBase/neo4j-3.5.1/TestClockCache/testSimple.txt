@Test public void testSimple(){
  ClockCacheTest<Integer,String> cache=new ClockCacheTest<>("TestCache",3);
  Map<String,Integer> valueToKey=new HashMap<>();
  Map<Integer,String> keyToValue=new HashMap<>();
  String s1="1";
  Integer key1=1;
  valueToKey.put(s1,key1);
  keyToValue.put(key1,s1);
  String s2="2";
  Integer key2=2;
  valueToKey.put(s2,key2);
  keyToValue.put(key2,s2);
  String s3="3";
  Integer key3=3;
  valueToKey.put(s3,key3);
  keyToValue.put(key3,s3);
  String s4="4";
  Integer key4=4;
  valueToKey.put(s4,key4);
  keyToValue.put(key4,s4);
  String s5="5";
  Integer key5=5;
  valueToKey.put(s5,key5);
  keyToValue.put(key5,s5);
  List<Integer> cleanedElements=new LinkedList<>();
  List<Integer> existingElements=new LinkedList<>();
  cache.put(key1,s1);
  cache.put(key2,s2);
  cache.put(key3,s3);
  assertNull(cache.getLastCleanedElement());
  String fromKey2=cache.get(key2);
  assertEquals(s2,fromKey2);
  String fromKey1=cache.get(key1);
  assertEquals(s1,fromKey1);
  String fromKey3=cache.get(key3);
  assertEquals(s3,fromKey3);
  cache.put(key4,s4);
  assertNotEquals(s4,cache.getLastCleanedElement());
  cleanedElements.add(valueToKey.get(cache.getLastCleanedElement()));
  existingElements.remove(valueToKey.get(cache.getLastCleanedElement()));
  cache.put(key5,s5);
  assertNotEquals(s4,cache.getLastCleanedElement());
  assertNotEquals(s5,cache.getLastCleanedElement());
  cleanedElements.add(valueToKey.get(cache.getLastCleanedElement()));
  existingElements.remove(valueToKey.get(cache.getLastCleanedElement()));
  int size=cache.size();
  assertEquals(3,size);
  for (  Integer key : cleanedElements) {
    assertNull(cache.get(key));
  }
  for (  Integer key : existingElements) {
    assertEquals(keyToValue.get(key),cache.get(key));
  }
  cache.clear();
  assertEquals(0,cache.size());
  for (  Integer key : keyToValue.keySet()) {
    assertNull(cache.get(key));
  }
}
