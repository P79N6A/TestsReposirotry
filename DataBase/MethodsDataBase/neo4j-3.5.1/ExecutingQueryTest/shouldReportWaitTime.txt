@Test public void shouldReportWaitTime(){
  query.compilationCompleted(new CompilerInfo("the-planner","the-runtime",emptyList()),null);
  assertEquals("running",query.snapshot().status());
  clock.forward(10,TimeUnit.SECONDS);
  try (LockWaitEvent event=lock("NODE",17)){
    clock.forward(5,TimeUnit.SECONDS);
    QuerySnapshot snapshot=query.snapshot();
    assertEquals("waiting",snapshot.status());
    assertThat(snapshot.resourceInformation(),CoreMatchers.<Map<String,Object>>allOf(hasEntry("waitTimeMillis",5_000L),hasEntry("resourceType","NODE"),hasEntry(equalTo("resourceIds"),longArray(17))));
    assertEquals(5_000_000,snapshot.waitTimeMicros());
  }
 {
    QuerySnapshot snapshot=query.snapshot();
    assertEquals("running",snapshot.status());
    assertEquals(5_000_000,snapshot.waitTimeMicros());
  }
  clock.forward(2,TimeUnit.SECONDS);
  try (LockWaitEvent event=lock("RELATIONSHIP",612)){
    clock.forward(1,TimeUnit.SECONDS);
    QuerySnapshot snapshot=query.snapshot();
    assertEquals("waiting",snapshot.status());
    assertThat(snapshot.resourceInformation(),CoreMatchers.<Map<String,Object>>allOf(hasEntry("waitTimeMillis",1_000L),hasEntry("resourceType","RELATIONSHIP"),hasEntry(equalTo("resourceIds"),longArray(612))));
    assertEquals(6_000_000,snapshot.waitTimeMicros());
  }
 {
    QuerySnapshot snapshot=query.snapshot();
    assertEquals("running",snapshot.status());
    assertEquals(6_000_000,snapshot.waitTimeMicros());
  }
}
