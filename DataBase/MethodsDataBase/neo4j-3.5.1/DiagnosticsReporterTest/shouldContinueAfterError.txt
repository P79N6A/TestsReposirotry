@Test void shouldContinueAfterError() throws Exception {
  DiagnosticsReporter reporter=new DiagnosticsReporter();
  MyProvider myProvider=new MyProvider(fileSystem);
  reporter.registerOfflineProvider(myProvider);
  myProvider.addFile("logs/a.txt",createNewFileWithContent("a.txt","file a"));
  Path destination=testDirectory.file("logs.zip").toPath();
  Set<String> classifiers=new HashSet<>();
  classifiers.add("logs");
  classifiers.add("fail");
  try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
    PrintStream out=new PrintStream(baos);
    NonInteractiveProgress progress=new NonInteractiveProgress(out,false);
    reporter.dump(classifiers,destination,progress,true);
    assertThat(baos.toString(),is(String.format("1/2 fail.txt%n" + "....................  20%%%n" + "..........%n"+ "Error: Step failed%n"+ "2/2 logs/a.txt%n"+ "....................  20%%%n"+ "....................  40%%%n"+ "....................  60%%%n"+ "....................  80%%%n"+ ".................... 100%%%n%n")));
  }
   URI uri=URI.create("jar:file:" + destination.toAbsolutePath().toUri().getRawPath());
  try (FileSystem fs=FileSystems.newFileSystem(uri,Collections.emptyMap())){
    List<String> fileA=Files.readAllLines(fs.getPath("logs/a.txt"));
    assertEquals(1,fileA.size());
    assertEquals("file a",fileA.get(0));
  }
 }
