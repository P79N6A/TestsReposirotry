@Test public void shouldBeAbleToSkipBadLogEntries() throws Exception {
  AcceptingInvalidLogEntryHandler invalidLogEntryHandler=new AcceptingInvalidLogEntryHandler();
  VersionAwareLogEntryReader<ReadableClosablePositionAwareChannel> reader=new VersionAwareLogEntryReader<>(new RecordStorageCommandReaderFactory(),invalidLogEntryHandler);
  InMemoryClosableChannel channel=new InMemoryClosableChannel(1_000);
  LogEntryWriter writer=new LogEntryWriter(channel.writer());
  long startTime=currentTimeMillis();
  long commitTime=startTime + 10;
  writer.writeStartEntry(1,2,startTime,3,new byte[0]);
  int posBefore=channel.writerPosition();
  writer.serialize(singletonList(new Command.NodeCommand(new NodeRecord(1),new NodeRecord(1).initialize(true,1,false,2,0))));
  int posAfter=channel.writerPosition();
  channel.positionWriter(posBefore);
  while (channel.writerPosition() < posAfter) {
    channel.put((byte)0xFF);
  }
  writer.writeCommitEntry(4,commitTime);
  long secondStartTime=startTime + 100;
  writer.writeStartEntry(1,2,secondStartTime,4,new byte[0]);
  LogEntryStart readStartEntry=reader.readLogEntry(channel.reader()).as();
  LogEntryCommit readCommitEntry=reader.readLogEntry(channel.reader()).as();
  LogEntryStart readSecondStartEntry=reader.readLogEntry(channel.reader()).as();
  assertEquals(1,readStartEntry.getMasterId());
  assertEquals(2,readStartEntry.getLocalId());
  assertEquals(startTime,readStartEntry.getTimeWritten());
  assertEquals(4,readCommitEntry.getTxId());
  assertEquals(commitTime,readCommitEntry.getTimeWritten());
  assertEquals(posAfter - posBefore,invalidLogEntryHandler.bytesSkipped);
  assertEquals(posAfter - posBefore,invalidLogEntryHandler.invalidEntryCalls);
  assertEquals(1,readSecondStartEntry.getMasterId());
  assertEquals(2,readSecondStartEntry.getLocalId());
  assertEquals(secondStartTime,readSecondStartEntry.getTimeWritten());
}
