@Test public void listAllIndexesWithFailedIndex() throws Throwable {
  Transaction transaction=newTransaction(AUTH_DISABLED);
  int failedLabel=transaction.tokenWrite().labelGetOrCreateForName("Fail");
  int propertyKeyId1=transaction.tokenWrite().propertyKeyGetOrCreateForName("foo");
  failNextIndexPopulation.set(true);
  LabelSchemaDescriptor descriptor=forLabel(failedLabel,propertyKeyId1);
  transaction.schemaWrite().indexCreate(descriptor);
  commit();
  try (org.neo4j.graphdb.Transaction ignored=db.beginTx()){
    db.schema().awaitIndexesOnline(2,MINUTES);
    fail("Expected to fail when awaiting for index to come online");
  }
 catch (  IllegalStateException e) {
  }
  RawIterator<Object[],ProcedureException> stream=procs().procedureCallRead(procs().procedureGet(procedureName("db","indexes")).id(),new Object[0]);
  assertTrue(stream.hasNext());
  Object[] result=stream.next();
  assertFalse(stream.hasNext());
  assertEquals("INDEX ON :Fail(foo)",result[0]);
  assertEquals("Unnamed index",result[1]);
  assertEquals(Collections.singletonList("Fail"),result[2]);
  assertEquals(Collections.singletonList("foo"),result[3]);
  assertEquals("FAILED",result[4]);
  assertEquals("node_label_property",result[5]);
  assertEquals(0.0,result[6]);
  Map<String,String> providerDescriptionMap=MapUtil.stringMap("key",GraphDatabaseSettings.SchemaIndex.NATIVE_BTREE10.providerKey(),"version",GraphDatabaseSettings.SchemaIndex.NATIVE_BTREE10.providerVersion());
  assertEquals(providerDescriptionMap,result[7]);
  assertEquals(indexingService.getIndexId(descriptor),result[8]);
  assertThat((String)result[9],containsString("java.lang.RuntimeException: Fail on update during population"));
  commit();
}
