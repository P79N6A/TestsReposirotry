@Test @FrozenClockRule.TimeZone("Europe/Stockholm") public void shouldConstructDateTimeFromComponents(){
  assertEqualTemporal(parse("2018-01-10T10:35:57",clock::getZone),fromValues(builder(clock)).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).build());
  assertEqualTemporal(parse("2018-01-10T10:35:57.999999999",clock::getZone),fromValues(builder(clock)).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("nanosecond",999999999).build());
  assertEqualTemporal(parse("2018-01-10T10:35:57.999999",clock::getZone),fromValues(builder(clock)).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("microsecond",999999).build());
  assertEqualTemporal(parse("2018-01-10T10:35:57.999",clock::getZone),fromValues(builder(clock)).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("millisecond",999).build());
  assertEqualTemporal(parse("2018-01-10T10:35:57.001999999",clock::getZone),fromValues(builder(clock)).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("millisecond",1).add("microsecond",999).add("nanosecond",999).build());
  assertEqualTemporal(parse("2018-01-10T10:35:57.000001999",clock::getZone),fromValues(builder(clock)).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("microsecond",1).add("nanosecond",999).build());
  assertEqualTemporal(parse("2018-01-10T10:35:57.001999",clock::getZone),fromValues(builder(clock)).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("millisecond",1).add("microsecond",999).build());
  assertEqualTemporal(parse("2018-01-10T10:35:57.001999999",clock::getZone),fromValues(builder(clock)).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("millisecond",1).add("microsecond",999).add("nanosecond",999).build());
}
