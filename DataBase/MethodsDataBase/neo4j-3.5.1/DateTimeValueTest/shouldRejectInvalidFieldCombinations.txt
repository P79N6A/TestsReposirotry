@Test public void shouldRejectInvalidFieldCombinations(){
  asserting(fromValues(builder(clock))).add("year",2018).add("month",12).add("dayOfWeek",5).assertThrows(UnsupportedTemporalUnitException.class,"Cannot assign dayOfWeek to calendar date.");
  asserting(fromValues(builder(clock))).add("year",2018).add("week",12).add("day",12).assertThrows(UnsupportedTemporalUnitException.class,"Cannot assign day to week date.");
  asserting(fromValues(builder(clock))).add("year",2018).add("ordinalDay",12).add("dayOfWeek",1).assertThrows(UnsupportedTemporalUnitException.class,"Cannot assign dayOfWeek to ordinal date.");
  asserting(fromValues(builder(clock))).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("nanosecond",1000000000).assertThrows(InvalidValuesArgumentException.class,"Invalid value for Nanosecond: 1000000000");
  asserting(fromValues(builder(clock))).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("microsecond",1000000).assertThrows(InvalidValuesArgumentException.class,"Invalid value for Microsecond: 1000000");
  asserting(fromValues(builder(clock))).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("millisecond",1000).assertThrows(InvalidValuesArgumentException.class,"Invalid value for Millisecond: 1000");
  asserting(fromValues(builder(clock))).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("millisecond",1).add("nanosecond",1000000).assertThrows(InvalidValuesArgumentException.class,"Invalid value for Nanosecond: 1000000");
  asserting(fromValues(builder(clock))).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("microsecond",1).add("nanosecond",1000).assertThrows(InvalidValuesArgumentException.class,"Invalid value for Nanosecond: 1000");
  asserting(fromValues(builder(clock))).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("millisecond",1).add("microsecond",1000).assertThrows(InvalidValuesArgumentException.class,"Invalid value for Microsecond: 1000");
  asserting(fromValues(builder(clock))).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("millisecond",1).add("microsecond",1000).add("nanosecond",999).assertThrows(InvalidValuesArgumentException.class,"Invalid value for Microsecond: 1000");
  asserting(fromValues(builder(clock))).add("year",2018).add("month",1).add("day",10).add("hour",10).add("minute",35).add("second",57).add("millisecond",1).add("microsecond",999).add("nanosecond",1000).assertThrows(InvalidValuesArgumentException.class,"Invalid value for Nanosecond: 1000");
}
