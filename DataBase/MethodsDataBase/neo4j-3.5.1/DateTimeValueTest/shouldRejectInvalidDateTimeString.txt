@Test public void shouldRejectInvalidDateTimeString(){
  assertThrows(TemporalParseException.class,() -> parse("10000-12-17T17:14:35",inUTC));
  assertThrows(TemporalParseException.class,() -> parse("10000-12-17T17:14:35Z",orFail));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-13-17T17:14:35",inUTC)).getMessage(),startsWith("Invalid value for MonthOfYear"));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-00-17T17:14:35",inUTC)).getMessage(),startsWith("Invalid value for MonthOfYear"));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-13-17T17:14:35Z",orFail)).getMessage(),startsWith("Invalid value for MonthOfYear"));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-00-17T17:14:35Z",orFail)).getMessage(),startsWith("Invalid value for MonthOfYear"));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-12-32T17:14:35",inUTC)).getMessage(),startsWith("Invalid value for DayOfMonth"));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-12-00T17:14:35",inUTC)).getMessage(),startsWith("Invalid value for DayOfMonth"));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-12-32T17:14:35Z",orFail)).getMessage(),startsWith("Invalid value for DayOfMonth"));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-12-00T17:14:35Z",orFail)).getMessage(),startsWith("Invalid value for DayOfMonth"));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-12-17T24:14:35",inUTC)).getMessage(),startsWith("Invalid value for HourOfDay"));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-12-17T24:14:35Z",orFail)).getMessage(),startsWith("Invalid value for HourOfDay"));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-12-17T17:60:35",inUTC)).getMessage(),startsWith("Invalid value for MinuteOfHour"));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-12-17T17:60:35Z",orFail)).getMessage(),startsWith("Invalid value for MinuteOfHour"));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-12-17T17:14:61",inUTC)).getMessage(),startsWith("Invalid value for SecondOfMinute"));
  assertThat(assertThrows(TemporalParseException.class,() -> parse("2017-12-17T17:14:61Z",orFail)).getMessage(),startsWith("Invalid value for SecondOfMinute"));
}
