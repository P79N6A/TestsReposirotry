@Test void shouldSearchAndFindOnRandomData(){
  node.initializeLeaf(cursor,STABLE_GENERATION,UNSTABLE_GENERATION);
  List<MutableLong> keys=new ArrayList<>();
  int currentKey=random.nextInt(10_000);
  MutableLong key=layout.newKey();
  int keyCount=0;
  while (true) {
    MutableLong expectedKey=layout.newKey();
    key.setValue(currentKey);
    if (node.leafOverflow(cursor,keyCount,key,dummyValue) != NO) {
      break;
    }
    layout.copyKey(key,expectedKey);
    keys.add(keyCount,expectedKey);
    node.insertKeyValueAt(cursor,key,dummyValue,keyCount,keyCount);
    currentKey+=random.nextInt(100) + 10;
    keyCount++;
  }
  TreeNode.setKeyCount(cursor,keyCount);
  MutableLong searchKey=layout.newKey();
  for (int i=0; i < 1_000; i++) {
    searchKey.setValue(random.nextInt(currentKey + 10));
    int searchResult=search(cursor,node,LEAF,searchKey,readKey,keyCount);
    boolean exists=contains(keys,searchKey,layout);
    int position=KeySearch.positionOf(searchResult);
    assertEquals(exists,KeySearch.isHit(searchResult));
    if (layout.compare(searchKey,keys.get(0)) <= 0) {
      assertEquals(0,position);
    }
 else {
      boolean found=false;
      for (int j=keyCount - 1; j >= 0; j--) {
        if (layout.compare(searchKey,keys.get(j)) > 0) {
          assertEquals(j + 1,position);
          found=true;
          break;
        }
      }
      assertTrue(found);
    }
  }
}
