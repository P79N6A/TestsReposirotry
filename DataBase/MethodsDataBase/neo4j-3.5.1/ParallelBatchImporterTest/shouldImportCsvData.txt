@Test public void shouldImportCsvData() throws Exception {
  ExecutionMonitor processorAssigner=eagerRandomSaturation(config.maxNumberOfProcessors());
  DatabaseLayout databaseLayout=directory.databaseLayout("dir" + random.nextAlphaNumericString(8,8));
  boolean successful=false;
  Groups groups=new Groups();
  IdGroupDistribution groupDistribution=new IdGroupDistribution(NODE_COUNT,NUMBER_OF_ID_GROUPS,random.random(),groups);
  long nodeRandomSeed=random.nextLong();
  long relationshipRandomSeed=random.nextLong();
  JobScheduler jobScheduler=new ThreadPoolJobScheduler();
  final BatchImporter inserter=new ParallelBatchImporter(databaseLayout,fileSystemRule.get(),null,config,NullLogService.getInstance(),processorAssigner,EMPTY,Config.defaults(),getFormat(),NO_MONITOR,jobScheduler);
  try {
    inserter.doImport(Inputs.input(nodes(nodeRandomSeed,NODE_COUNT,config.batchSize(),inputIdGenerator,groupDistribution),relationships(relationshipRandomSeed,RELATIONSHIP_COUNT,config.batchSize(),inputIdGenerator,groupDistribution),idMapper.apply(groups),silentBadCollector(RELATIONSHIP_COUNT),knownEstimates(NODE_COUNT,RELATIONSHIP_COUNT,NODE_COUNT * TOKENS.length / 2,RELATIONSHIP_COUNT * TOKENS.length / 2,NODE_COUNT * TOKENS.length / 2 * Long.BYTES,RELATIONSHIP_COUNT * TOKENS.length / 2 * Long.BYTES,NODE_COUNT * TOKENS.length / 2)));
    GraphDatabaseService db=new TestGraphDatabaseFactory().newEmbeddedDatabaseBuilder(databaseLayout.databaseDirectory()).setConfig("dbms.backup.enabled","false").newGraphDatabase();
    try (Transaction tx=db.beginTx()){
      inputIdGenerator.reset();
      verifyData(NODE_COUNT,RELATIONSHIP_COUNT,db,groupDistribution,nodeRandomSeed,relationshipRandomSeed);
      tx.success();
    }
  finally {
      db.shutdown();
    }
    assertConsistent(databaseLayout);
    successful=true;
  }
  finally {
    jobScheduler.close();
    if (!successful) {
      File failureFile=new File(databaseLayout.databaseDirectory(),"input");
      try (PrintStream out=new PrintStream(failureFile)){
        out.println("Seed used in this failing run: " + random.seed());
        out.println(inputIdGenerator);
        inputIdGenerator.reset();
        out.println();
        out.println("Processor assignments");
        out.println(processorAssigner.toString());
      }
       System.err.println("Additional debug information stored in " + failureFile);
    }
  }
}
