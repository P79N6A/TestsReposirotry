@Test public void testWithAllDifferentNodes() throws Throwable {
  createNode(Arrays.asList("A","B"),Arrays.asList("prop1","prop2"),Arrays.asList(Values.stringValue("Test"),Values.intValue(12)));
  createNode(Arrays.asList("B"),Arrays.asList("prop1"),Arrays.asList(Values.booleanValue(true)));
  createEmptyNode();
  createNode(Arrays.asList("C"),Arrays.asList("prop1"),Arrays.asList(Values.stringArray("Test","Success")));
  RawIterator<Object[],ProcedureException> stream=procs().procedureCallRead(procs().procedureGet(procedureName(nodesProcedureName)).id(),new Object[0]);
  assertThat(asList(stream),containsInAnyOrder(equalTo(nodeEntry(":`A`:`B`",Arrays.asList("A","B"),"prop1",Arrays.asList("String"),true)),equalTo(nodeEntry(":`A`:`B`",Arrays.asList("A","B"),"prop2",Arrays.asList("Integer"),true)),equalTo(nodeEntry(":`B`",Arrays.asList("B"),"prop1",Arrays.asList("Boolean"),true)),equalTo(nodeEntry(":`C`",Arrays.asList("C"),"prop1",Arrays.asList("StringArray"),true)),equalTo(nodeEntry("",Arrays.asList(),null,null,false))));
}
