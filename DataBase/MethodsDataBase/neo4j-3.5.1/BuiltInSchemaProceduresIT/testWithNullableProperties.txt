@Test public void testWithNullableProperties() throws Throwable {
  createNode(Arrays.asList("A"),Arrays.asList("prop1","prop2","prop3"),Arrays.asList(Values.stringValue("Test"),Values.intValue(12),Values.booleanValue(true)));
  createNode(Arrays.asList("A"),Arrays.asList("prop1","prop3"),Arrays.asList(Values.stringValue("Test2"),Values.booleanValue(false)));
  createNode(Arrays.asList("A"),Arrays.asList("prop1","prop2"),Arrays.asList(Values.stringValue("Test3"),Values.intValue(42)));
  createNode(Arrays.asList("B"),Arrays.asList("prop1","prop2"),Arrays.asList(Values.stringValue("Test4"),Values.intValue(21)));
  createNode(Arrays.asList("B"),Arrays.asList(),Arrays.asList());
  RawIterator<Object[],ProcedureException> stream=procs().procedureCallRead(procs().procedureGet(procedureName(nodesProcedureName)).id(),new Object[0]);
  assertThat(asList(stream),containsInAnyOrder(equalTo(nodeEntry(":`A`",Arrays.asList("A"),"prop1",Arrays.asList("String"),true)),equalTo(nodeEntry(":`A`",Arrays.asList("A"),"prop2",Arrays.asList("Integer"),false)),equalTo(nodeEntry(":`A`",Arrays.asList("A"),"prop3",Arrays.asList("Boolean"),false)),equalTo(nodeEntry(":`B`",Arrays.asList("B"),"prop1",Arrays.asList("String"),false)),equalTo(nodeEntry(":`B`",Arrays.asList("B"),"prop2",Arrays.asList("Integer"),false))));
}
