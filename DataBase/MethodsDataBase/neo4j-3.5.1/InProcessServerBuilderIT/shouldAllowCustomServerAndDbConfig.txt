@Test public void shouldAllowCustomServerAndDbConfig() throws Exception {
  trustAllSSLCerts();
  SSLServerSocketFactory ssf=(SSLServerSocketFactory)SSLServerSocketFactory.getDefault();
  String[] defaultCiphers=ssf.getDefaultCipherSuites();
  HttpConnector httpConnector=new HttpConnector("0",Encryption.NONE);
  HttpConnector httpsConnector=new HttpConnector("1",Encryption.TLS);
  try (ServerControls server=getTestServerBuilder(testDir.directory()).withConfig(httpConnector.type,"HTTP").withConfig(httpConnector.enabled,"true").withConfig(httpConnector.encryption,"NONE").withConfig(httpConnector.listen_address,"localhost:0").withConfig(httpsConnector.type,"HTTP").withConfig(httpsConnector.enabled,"true").withConfig(httpsConnector.encryption,"TLS").withConfig(httpsConnector.listen_address,"localhost:0").withConfig(GraphDatabaseSettings.dense_node_threshold,"20").withConfig("https.ssl_policy","test").withConfig("dbms.ssl.policy.test.base_directory",testDir.directory("certificates").getAbsolutePath()).withConfig("dbms.ssl.policy.test.allow_key_generation","true").withConfig("dbms.ssl.policy.test.ciphers",String.join(",",defaultCiphers)).withConfig("dbms.ssl.policy.test.tls_versions","TLSv1.2, TLSv1.1, TLSv1").withConfig("dbms.ssl.policy.test.client_auth",ClientAuth.NONE.name()).withConfig("dbms.ssl.policy.test.trust_all","true").newServer()){
    assertThat(HTTP.GET(server.httpURI().toString()).status(),equalTo(200));
    assertThat(HTTP.GET(server.httpsURI().get().toString()).status(),equalTo(200));
    assertDBConfig(server,"20",GraphDatabaseSettings.dense_node_threshold.name());
  }
 }
