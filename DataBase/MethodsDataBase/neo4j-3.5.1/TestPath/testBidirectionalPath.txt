@Test public void testBidirectionalPath(){
  TraversalDescription side=getGraphDb().traversalDescription().uniqueness(Uniqueness.NODE_PATH);
  BidirectionalTraversalDescription bidirectional=getGraphDb().bidirectionalTraversalDescription().mirroredSides(side);
  Path bidirectionalPath=getFirstPath(bidirectional.traverse(a,e));
  assertPathIsCorrect(bidirectionalPath);
  Path path=getFirstPath(bidirectional.traverse(a,e));
  Node node=path.startNode();
  assertEquals(a,node);
  bidirectionalPath=getFirstPath(bidirectional.traverse(a,e));
  bidirectionalPath.relationships();
  assertEquals(a,bidirectionalPath.startNode());
  bidirectionalPath=getFirstPath(bidirectional.traverse(a,e));
  bidirectionalPath.nodes();
  assertEquals(a,bidirectionalPath.startNode());
  bidirectionalPath=getFirstPath(bidirectional.traverse(a,e));
  bidirectionalPath.reverseRelationships();
  assertEquals(a,bidirectionalPath.startNode());
  bidirectionalPath=getFirstPath(bidirectional.traverse(a,e));
  bidirectionalPath.reverseNodes();
  assertEquals(a,bidirectionalPath.startNode());
  bidirectionalPath=getFirstPath(bidirectional.traverse(a,e));
  bidirectionalPath.iterator();
  assertEquals(a,bidirectionalPath.startNode());
}
