@Test public void creatingIndexWithSpecificAnalyzerMustUseThatAnalyzerForPopulationUpdatingAndQuerying(){
  db=createDatabase();
  LongHashSet noResults=new LongHashSet();
  LongHashSet swedishNodes=new LongHashSet();
  LongHashSet englishNodes=new LongHashSet();
  LongHashSet swedishRels=new LongHashSet();
  LongHashSet englishRels=new LongHashSet();
  String labelledSwedishNodes="labelledSwedishNodes";
  String typedSwedishRelationships="typedSwedishRelationships";
  try (Transaction tx=db.beginTx()){
    Node nodeA=db.createNode(LABEL);
    nodeA.setProperty(PROP,"En apa och en tomte bodde i ett hus.");
    swedishNodes.add(nodeA.getId());
    Node nodeB=db.createNode(LABEL);
    nodeB.setProperty(PROP,"Hello and hello again, in the end.");
    englishNodes.add(nodeB.getId());
    Relationship relA=nodeA.createRelationshipTo(nodeB,REL);
    relA.setProperty(PROP,"En apa och en tomte bodde i ett hus.");
    swedishRels.add(relA.getId());
    Relationship relB=nodeB.createRelationshipTo(nodeA,REL);
    relB.setProperty(PROP,"Hello and hello again, in the end.");
    englishRels.add(relB.getId());
    tx.success();
  }
   try (Transaction tx=db.beginTx()){
    String lbl=array(LABEL.name());
    String rel=array(REL.name());
    String props=array(PROP);
    String swedish=props + ", {analyzer: '" + FulltextAnalyzerTest.SWEDISH+ "'}";
    db.execute(format(NODE_CREATE,labelledSwedishNodes,lbl,swedish)).close();
    db.execute(format(RELATIONSHIP_CREATE,typedSwedishRelationships,rel,swedish)).close();
    tx.success();
  }
   awaitIndexesOnline();
  try (Transaction tx=db.beginTx()){
    Node nodeC=db.createNode(LABEL);
    nodeC.setProperty(PROP,"En apa och en tomte bodde i ett hus.");
    swedishNodes.add(nodeC.getId());
    Node nodeD=db.createNode(LABEL);
    nodeD.setProperty(PROP,"Hello and hello again, in the end.");
    englishNodes.add(nodeD.getId());
    Relationship relC=nodeC.createRelationshipTo(nodeD,REL);
    relC.setProperty(PROP,"En apa och en tomte bodde i ett hus.");
    swedishRels.add(relC.getId());
    Relationship relD=nodeD.createRelationshipTo(nodeC,REL);
    relD.setProperty(PROP,"Hello and hello again, in the end.");
    englishRels.add(relD.getId());
    tx.success();
  }
   try (Transaction ignore=db.beginTx()){
    assertQueryFindsIds(db,true,labelledSwedishNodes,"and",englishNodes);
    assertQueryFindsIds(db,true,labelledSwedishNodes,"ett",noResults);
    assertQueryFindsIds(db,true,labelledSwedishNodes,"apa",swedishNodes);
    assertQueryFindsIds(db,false,typedSwedishRelationships,"and",englishRels);
    assertQueryFindsIds(db,false,typedSwedishRelationships,"ett",noResults);
    assertQueryFindsIds(db,false,typedSwedishRelationships,"apa",swedishRels);
  }
 }
