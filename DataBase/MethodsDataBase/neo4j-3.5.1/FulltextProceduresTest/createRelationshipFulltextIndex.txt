@Test public void createRelationshipFulltextIndex(){
  db=createDatabase();
  db.execute(format(RELATIONSHIP_CREATE,"test-index",array("Reltype1","Reltype2"),array("prop1","prop2"))).close();
  Result result;
  Map<String,Object> row;
  try (Transaction tx=db.beginTx()){
    result=db.execute(DB_INDEXES);
    assertTrue(result.hasNext());
    row=result.next();
    assertEquals("INDEX ON RELATIONSHIP:Reltype1, Reltype2(prop1, prop2)",row.get("description"));
    assertEquals(asList("Reltype1","Reltype2"),row.get("tokenNames"));
    assertEquals(asList("prop1","prop2"),row.get("properties"));
    assertEquals("test-index",row.get("indexName"));
    assertEquals("relationship_fulltext",row.get("type"));
    assertFalse(result.hasNext());
    result.close();
    awaitIndexesOnline();
    result=db.execute(DB_INDEXES);
    assertTrue(result.hasNext());
    assertEquals("ONLINE",result.next().get("state"));
    assertFalse(result.hasNext());
    result.close();
    assertNotNull(db.schema().getIndexByName("test-index"));
    tx.success();
  }
   db.shutdown();
  db=createDatabase();
  try (Transaction tx=db.beginTx()){
    result=db.execute(DB_INDEXES);
    assertTrue(result.hasNext());
    row=result.next();
    assertEquals("INDEX ON RELATIONSHIP:Reltype1, Reltype2(prop1, prop2)",row.get("description"));
    assertEquals("ONLINE",row.get("state"));
    assertFalse(result.hasNext());
    assertFalse(result.hasNext());
    assertNotNull(db.schema().getIndexByName("test-index"));
    tx.success();
  }
 }
