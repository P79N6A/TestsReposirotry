@Test public void fulltextIndexMustNotBeAvailableForRegularIndexSeeks(){
  db=createDatabase();
  try (Transaction tx=db.beginTx()){
    createSimpleNodesIndex();
    tx.success();
  }
   String valueToQueryFor="value to query for";
  try (Transaction tx=db.beginTx()){
    awaitIndexesOnline();
    List<Value> values=generateRandomSimpleValues();
    for (    Value value : values) {
      db.createNode(LABEL).setProperty(PROP,value.asObject());
    }
    db.createNode(LABEL).setProperty(PROP,valueToQueryFor);
    tx.success();
  }
   Map<String,Object> params=new HashMap<>();
  params.put("prop",valueToQueryFor);
  try (Result result=db.execute("profile match (n:" + LABEL.name() + ") where n."+ PROP+ " = {prop} return n",params)){
    assertNoIndexSeeks(result);
  }
   try (Result result=db.execute("cypher planner=rule profile match (n:" + LABEL.name() + ") where n."+ PROP+ " = {prop} return n",params)){
    assertNoIndexSeeks(result);
  }
   try (Result result=db.execute("cypher 2.3 profile match (n:" + LABEL.name() + ") where n."+ PROP+ " = {prop} return n",params)){
    assertNoIndexSeeks(result);
  }
   try (Result result=db.execute("cypher 3.1 profile match (n:" + LABEL.name() + ") where n."+ PROP+ " = {prop} return n",params)){
    assertNoIndexSeeks(result);
  }
   try (Result result=db.execute("cypher 3.4 profile match (n:" + LABEL.name() + ") where n."+ PROP+ " = {prop} return n",params)){
    assertNoIndexSeeks(result);
  }
 }
