@Test public void shouldCreateConsistentUniquenessConstraint() throws Exception {
  BatchInserter inserter=newBatchInserter();
  inserter.createDeferredConstraint(label("Hacker")).assertPropertyIsUnique("handle").create();
  GraphDatabaseAPI graphdb=(GraphDatabaseAPI)switchToEmbeddedGraphDatabaseService(inserter);
  try {
    NeoStores neoStores=graphdb.getDependencyResolver().resolveDependency(RecordStorageEngine.class).testAccessNeoStores();
    SchemaStore store=neoStores.getSchemaStore();
    SchemaStorage storage=new SchemaStorage(store);
    List<Long> inUse=new ArrayList<>();
    DynamicRecord record=store.nextRecord();
    for (long i=1, high=store.getHighestPossibleIdInUse(); i <= high; i++) {
      store.getRecord(i,record,RecordLoad.FORCE);
      if (record.inUse() && record.isStartRecord()) {
        inUse.add(i);
      }
    }
    assertEquals("records in use",2,inUse.size());
    SchemaRule rule0=storage.loadSingleSchemaRule(inUse.get(0));
    SchemaRule rule1=storage.loadSingleSchemaRule(inUse.get(1));
    StoreIndexDescriptor indexRule;
    ConstraintRule constraintRule;
    if (rule0 instanceof StoreIndexDescriptor) {
      indexRule=(StoreIndexDescriptor)rule0;
      constraintRule=(ConstraintRule)rule1;
    }
 else {
      constraintRule=(ConstraintRule)rule0;
      indexRule=(StoreIndexDescriptor)rule1;
    }
    assertEquals("index should reference constraint",constraintRule.getId(),indexRule.getOwningConstraint().longValue());
    assertEquals("constraint should reference index",indexRule.getId(),constraintRule.getOwnedIndex());
  }
  finally {
    graphdb.shutdown();
  }
}
