@Test void showsArgumentsAndDescriptionForSpecifiedCommand() throws Exception {
  CommandLocator commandLocator=mock(CommandLocator.class);
  AdminCommand.Provider commandProvider=mock(AdminCommand.Provider.class);
  when(commandProvider.name()).thenReturn("foobar");
  Arguments arguments=new Arguments().withDatabase();
  when(commandProvider.allArguments()).thenReturn(arguments);
  when(commandProvider.possibleArguments()).thenReturn(Collections.singletonList(arguments));
  when(commandProvider.description()).thenReturn("This is a description of the foobar command.");
  when(commandLocator.findProvider("foobar")).thenReturn(commandProvider);
  try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
    PrintStream ps=new PrintStream(baos);
    HelpCommand helpCommand=new HelpCommand(new Usage("neo4j-admin",commandLocator),ps::println,commandLocator);
    helpCommand.execute("foobar");
    assertEquals(String.format("usage: neo4j-admin foobar [--database=<name>]%n" + "%n" + "environment variables:%n"+ "    NEO4J_CONF    Path to directory which contains neo4j.conf.%n"+ "    NEO4J_DEBUG   Set to anything to enable debug output.%n"+ "    NEO4J_HOME    Neo4j home directory.%n"+ "    HEAP_SIZE     Set JVM maximum heap size during command execution.%n"+ "                  Takes a number and a unit, for example 512m.%n"+ "%n"+ "This is a description of the foobar command.%n"+ "%n"+ "options:%n"+ "  --database=<name>   Name of database. [default:" + GraphDatabaseSettings.DEFAULT_DATABASE_NAME + "]%n"),baos.toString());
  }
 }
