@Test public void throwsWhenTxAwaitDurationExpires(){
  long lastClosedTransactionId=100;
  Supplier<TransactionIdStore> txIdStore=() -> fixedTxIdStore(lastClosedTransactionId);
  Duration txAwaitDuration=Duration.ofSeconds(42);
  FakeClock clock=new FakeClock();
  DatabaseAvailabilityGuard databaseAvailabilityGuard=spy(new DatabaseAvailabilityGuard(DEFAULT_DATABASE_NAME,clock,NullLog.getInstance()));
  when(databaseAvailabilityGuard.isAvailable()).then(invocation -> {
    boolean available=(boolean)invocation.callRealMethod();
    clock.forward(txAwaitDuration.getSeconds() + 1,SECONDS);
    return available;
  }
);
  TransactionStateMachineV1SPI txSpi=createTxSpi(txIdStore,txAwaitDuration,databaseAvailabilityGuard,clock);
  Future<Void> result=otherThread.execute(state -> {
    txSpi.awaitUpToDate(lastClosedTransactionId + 42);
    return null;
  }
);
  try {
    result.get(20,SECONDS);
  }
 catch (  Exception e) {
    assertThat(e,instanceOf(ExecutionException.class));
    assertThat(e.getCause(),instanceOf(TransactionFailureException.class));
  }
}
