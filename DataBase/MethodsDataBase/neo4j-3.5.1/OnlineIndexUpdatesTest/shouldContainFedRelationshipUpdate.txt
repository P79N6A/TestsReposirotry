@Test public void shouldContainFedRelationshipUpdate() throws Exception {
  OnlineIndexUpdates onlineIndexUpdates=new OnlineIndexUpdates(nodeStore,relationshipStore,indexingService,propertyPhysicalToLogicalConverter);
  long relId=0;
  RelationshipRecord inUse=getRelationship(relId,true,ENTITY_TOKEN);
  Value propertyValue=Values.of("hej");
  long propertyId=createRelationshipProperty(inUse,propertyValue,1);
  RelationshipRecord notInUse=getRelationship(relId,false,ENTITY_TOKEN);
  relationshipStore.updateRecord(inUse);
  Command.RelationshipCommand relationshipCommand=new Command.RelationshipCommand(inUse,notInUse);
  PropertyRecord propertyBlocks=new PropertyRecord(propertyId);
  propertyBlocks.setRelId(relId);
  Command.PropertyCommand propertyCommand=new Command.PropertyCommand(recordAccess.getIfLoaded(propertyId).forReadingData(),propertyBlocks);
  StoreIndexDescriptor indexDescriptor=forSchema(multiToken(ENTITY_TOKENS,RELATIONSHIP,1,4,6),EMPTY.getProviderDescriptor()).withId(0);
  indexingService.createIndexes(indexDescriptor);
  indexingService.getIndexProxy(indexDescriptor.schema()).awaitStoreScanCompleted();
  onlineIndexUpdates.feed(LongObjectMaps.immutable.empty(),LongObjectMaps.immutable.of(relId,singletonList(propertyCommand)),LongObjectMaps.immutable.empty(),LongObjectMaps.immutable.of(relId,relationshipCommand));
  assertTrue(onlineIndexUpdates.hasUpdates());
  Iterator<IndexEntryUpdate<SchemaDescriptor>> iterator=onlineIndexUpdates.iterator();
  assertEquals(iterator.next(),IndexEntryUpdate.remove(relId,indexDescriptor,propertyValue,null,null));
  assertFalse(iterator.hasNext());
}
