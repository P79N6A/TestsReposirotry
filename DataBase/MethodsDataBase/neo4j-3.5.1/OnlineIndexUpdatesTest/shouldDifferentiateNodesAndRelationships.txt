@Test public void shouldDifferentiateNodesAndRelationships() throws Exception {
  OnlineIndexUpdates onlineIndexUpdates=new OnlineIndexUpdates(nodeStore,relationshipStore,indexingService,propertyPhysicalToLogicalConverter);
  int nodeId=0;
  NodeRecord inUseNode=getNode(nodeId,true);
  Value nodePropertyValue=Values.of("hej");
  long nodePropertyId=createNodeProperty(inUseNode,nodePropertyValue,1);
  NodeRecord notInUseNode=getNode(nodeId,false);
  nodeStore.updateRecord(inUseNode);
  Command.NodeCommand nodeCommand=new Command.NodeCommand(inUseNode,notInUseNode);
  PropertyRecord nodePropertyBlocks=new PropertyRecord(nodePropertyId);
  nodePropertyBlocks.setNodeId(nodeId);
  Command.PropertyCommand nodePropertyCommand=new Command.PropertyCommand(recordAccess.getIfLoaded(nodePropertyId).forReadingData(),nodePropertyBlocks);
  StoreIndexDescriptor nodeIndexDescriptor=forSchema(multiToken(ENTITY_TOKENS,NODE,1,4,6),EMPTY.getProviderDescriptor()).withId(0);
  indexingService.createIndexes(nodeIndexDescriptor);
  indexingService.getIndexProxy(nodeIndexDescriptor.schema()).awaitStoreScanCompleted();
  long relId=0;
  RelationshipRecord inUse=getRelationship(relId,true,ENTITY_TOKEN);
  Value relationshipPropertyValue=Values.of("da");
  long propertyId=createRelationshipProperty(inUse,relationshipPropertyValue,1);
  RelationshipRecord notInUse=getRelationship(relId,false,ENTITY_TOKEN);
  relationshipStore.updateRecord(inUse);
  Command.RelationshipCommand relationshipCommand=new Command.RelationshipCommand(inUse,notInUse);
  PropertyRecord relationshipPropertyBlocks=new PropertyRecord(propertyId);
  relationshipPropertyBlocks.setRelId(relId);
  Command.PropertyCommand relationshipPropertyCommand=new Command.PropertyCommand(recordAccess.getIfLoaded(propertyId).forReadingData(),relationshipPropertyBlocks);
  StoreIndexDescriptor relationshipIndexDescriptor=forSchema(multiToken(ENTITY_TOKENS,RELATIONSHIP,1,4,6),EMPTY.getProviderDescriptor()).withId(1);
  indexingService.createIndexes(relationshipIndexDescriptor);
  indexingService.getIndexProxy(relationshipIndexDescriptor.schema()).awaitStoreScanCompleted();
  onlineIndexUpdates.feed(LongObjectMaps.immutable.of(nodeId,singletonList(nodePropertyCommand)),LongObjectMaps.immutable.of(relId,singletonList(relationshipPropertyCommand)),LongObjectMaps.immutable.of(nodeId,nodeCommand),LongObjectMaps.immutable.of(relId,relationshipCommand));
  assertTrue(onlineIndexUpdates.hasUpdates());
  assertThat(onlineIndexUpdates,containsInAnyOrder(IndexEntryUpdate.remove(relId,relationshipIndexDescriptor,relationshipPropertyValue,null,null),IndexEntryUpdate.remove(nodeId,nodeIndexDescriptor,nodePropertyValue,null,null)));
}
