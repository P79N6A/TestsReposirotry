@Test public void shouldUpdateCorrectIndexes() throws Exception {
  OnlineIndexUpdates onlineIndexUpdates=new OnlineIndexUpdates(nodeStore,relationshipStore,indexingService,propertyPhysicalToLogicalConverter);
  long relId=0;
  RelationshipRecord inUse=getRelationship(relId,true,ENTITY_TOKEN);
  Value propertyValue=Values.of("hej");
  Value propertyValue2=Values.of("da");
  long propertyId=createRelationshipProperty(inUse,propertyValue,1);
  long propertyId2=createRelationshipProperty(inUse,propertyValue2,4);
  RelationshipRecord notInUse=getRelationship(relId,false,ENTITY_TOKEN);
  relationshipStore.updateRecord(inUse);
  Command.RelationshipCommand relationshipCommand=new Command.RelationshipCommand(inUse,notInUse);
  PropertyRecord propertyBlocks=new PropertyRecord(propertyId);
  propertyBlocks.setRelId(relId);
  Command.PropertyCommand propertyCommand=new Command.PropertyCommand(recordAccess.getIfLoaded(propertyId).forReadingData(),propertyBlocks);
  PropertyRecord propertyBlocks2=new PropertyRecord(propertyId2);
  propertyBlocks2.setRelId(relId);
  Command.PropertyCommand propertyCommand2=new Command.PropertyCommand(recordAccess.getIfLoaded(propertyId2).forReadingData(),propertyBlocks2);
  StoreIndexDescriptor indexDescriptor0=forSchema(multiToken(ENTITY_TOKENS,RELATIONSHIP,1,4,6),EMPTY.getProviderDescriptor()).withId(0);
  StoreIndexDescriptor indexDescriptor1=forSchema(multiToken(ENTITY_TOKENS,RELATIONSHIP,2,4,6),EMPTY.getProviderDescriptor()).withId(1);
  StoreIndexDescriptor indexDescriptor2=forSchema(multiToken(new int[]{ENTITY_TOKEN,OTHER_ENTITY_TOKEN},RELATIONSHIP,1),EMPTY.getProviderDescriptor()).withId(2);
  StoreIndexDescriptor indexDescriptor3=forSchema(multiToken(new int[]{OTHER_ENTITY_TOKEN},RELATIONSHIP,1),EMPTY.getProviderDescriptor()).withId(3);
  indexingService.createIndexes(indexDescriptor0,indexDescriptor1,indexDescriptor2);
  indexingService.getIndexProxy(indexDescriptor0.schema()).awaitStoreScanCompleted();
  indexingService.getIndexProxy(indexDescriptor1.schema()).awaitStoreScanCompleted();
  indexingService.getIndexProxy(indexDescriptor2.schema()).awaitStoreScanCompleted();
  onlineIndexUpdates.feed(LongObjectMaps.immutable.empty(),LongObjectMaps.immutable.of(relId,asList(propertyCommand,propertyCommand2)),LongObjectMaps.immutable.empty(),LongObjectMaps.immutable.of(relId,relationshipCommand));
  assertTrue(onlineIndexUpdates.hasUpdates());
  assertThat(onlineIndexUpdates,containsInAnyOrder(IndexEntryUpdate.remove(relId,indexDescriptor0,propertyValue,propertyValue2,null),IndexEntryUpdate.remove(relId,indexDescriptor1,null,propertyValue2,null),IndexEntryUpdate.remove(relId,indexDescriptor2,propertyValue)));
  assertThat(onlineIndexUpdates,not(containsInAnyOrder(indexDescriptor3)));
}
