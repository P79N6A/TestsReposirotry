@Test public void shouldContainFedNodeUpdate() throws Exception {
  OnlineIndexUpdates onlineIndexUpdates=new OnlineIndexUpdates(nodeStore,relationshipStore,indexingService,propertyPhysicalToLogicalConverter);
  int nodeId=0;
  NodeRecord inUse=getNode(nodeId,true);
  Value propertyValue=Values.of("hej");
  long propertyId=createNodeProperty(inUse,propertyValue,1);
  NodeRecord notInUse=getNode(nodeId,false);
  nodeStore.updateRecord(inUse);
  Command.NodeCommand nodeCommand=new Command.NodeCommand(inUse,notInUse);
  PropertyRecord propertyBlocks=new PropertyRecord(propertyId);
  propertyBlocks.setNodeId(nodeId);
  Command.PropertyCommand propertyCommand=new Command.PropertyCommand(recordAccess.getIfLoaded(propertyId).forReadingData(),propertyBlocks);
  StoreIndexDescriptor indexDescriptor=forSchema(multiToken(ENTITY_TOKENS,NODE,1,4,6),EMPTY.getProviderDescriptor()).withId(0);
  indexingService.createIndexes(indexDescriptor);
  indexingService.getIndexProxy(indexDescriptor.schema()).awaitStoreScanCompleted();
  onlineIndexUpdates.feed(LongObjectMaps.immutable.of(nodeId,singletonList(propertyCommand)),LongObjectMaps.immutable.empty(),LongObjectMaps.immutable.of(nodeId,nodeCommand),LongObjectMaps.immutable.empty());
  assertTrue(onlineIndexUpdates.hasUpdates());
  Iterator<IndexEntryUpdate<SchemaDescriptor>> iterator=onlineIndexUpdates.iterator();
  assertEquals(iterator.next(),IndexEntryUpdate.remove(nodeId,indexDescriptor,propertyValue,null,null));
  assertFalse(iterator.hasNext());
}
