@Test public void shouldThrowWhenGettingTxAfterTermination(){
  MutableObject<Status> terminationReason=new MutableObject<>();
  InternalTransaction tx=mock(InternalTransaction.class);
  doAnswer(invocation -> {
    terminationReason.setValue(Status.Transaction.Terminated);
    return null;
  }
).when(tx).terminate();
  when(tx.terminationReason()).then(invocation -> Optional.ofNullable(terminationReason.getValue()));
  Neo4jTransactionalContext context=newContext(tx);
  context.terminate();
  try {
    context.getOrBeginNewIfClosed();
    fail("Exception expected");
  }
 catch (  Exception e) {
    assertThat(e,instanceOf(TransactionTerminatedException.class));
  }
}
