@Test public void shouldLogIndexStateOnInit() throws Exception {
  IndexProvider provider=mockIndexProviderWithAccessor(PROVIDER_DESCRIPTOR);
  Config config=Config.defaults(default_schema_provider,PROVIDER_DESCRIPTOR.name());
  IndexProviderMap providerMap=life.add(new DefaultIndexProviderMap(buildIndexDependencies(provider),config));
  TokenNameLookup mockLookup=mock(TokenNameLookup.class);
  StoreIndexDescriptor onlineIndex=storeIndex(1,1,1,PROVIDER_DESCRIPTOR);
  StoreIndexDescriptor populatingIndex=storeIndex(2,1,2,PROVIDER_DESCRIPTOR);
  StoreIndexDescriptor failedIndex=storeIndex(3,2,2,PROVIDER_DESCRIPTOR);
  life.add(IndexingServiceFactory.createIndexingService(config,mock(JobScheduler.class),providerMap,mock(IndexStoreView.class),mockLookup,asList(onlineIndex,populatingIndex,failedIndex),internalLogProvider,userLogProvider,IndexingService.NO_MONITOR,schemaState));
  when(provider.getInitialState(onlineIndex)).thenReturn(ONLINE);
  when(provider.getInitialState(populatingIndex)).thenReturn(InternalIndexState.POPULATING);
  when(provider.getInitialState(failedIndex)).thenReturn(InternalIndexState.FAILED);
  when(mockLookup.labelGetName(1)).thenReturn("LabelOne");
  when(mockLookup.labelGetName(2)).thenReturn("LabelTwo");
  when(mockLookup.propertyKeyGetName(1)).thenReturn("propertyOne");
  when(mockLookup.propertyKeyGetName(2)).thenReturn("propertyTwo");
  life.init();
  internalLogProvider.assertAtLeastOnce(logMatch.debug("IndexingService.init: index 1 on :LabelOne(propertyOne) is ONLINE"),logMatch.debug("IndexingService.init: index 2 on :LabelOne(propertyTwo) is POPULATING"),logMatch.debug("IndexingService.init: index 3 on :LabelTwo(propertyTwo) is FAILED"));
}
