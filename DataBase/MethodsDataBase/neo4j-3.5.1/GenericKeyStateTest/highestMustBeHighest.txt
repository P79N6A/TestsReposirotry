@Test void highestMustBeHighest(){
  assertHighest(PointValue.MAX_VALUE);
  assertHighest(DateTimeValue.MAX_VALUE);
  assertHighest(LocalDateTimeValue.MAX_VALUE);
  assertHighest(DateValue.MAX_VALUE);
  assertHighest(TimeValue.MAX_VALUE);
  assertHighest(LocalTimeValue.MAX_VALUE);
  assertHighest(DurationValue.duration(Duration.ofSeconds(Long.MAX_VALUE,999_999_999)));
  assertHighest(DurationValue.duration(Period.of(Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE)));
  assertHighestString();
  assertHighest(of(true));
  assertHighest(of(Byte.MAX_VALUE));
  assertHighest(of(Short.MAX_VALUE));
  assertHighest(of(Integer.MAX_VALUE));
  assertHighest(of(Long.MAX_VALUE));
  assertHighest(of(Float.POSITIVE_INFINITY));
  assertHighest(of(Double.POSITIVE_INFINITY));
  assertHighest(pointArray(new PointValue[]{PointValue.MAX_VALUE}));
  assertHighest(dateTimeArray(new ZonedDateTime[]{DateTimeValue.MAX_VALUE.asObjectCopy()}));
  assertHighest(localDateTimeArray(new LocalDateTime[]{LocalDateTimeValue.MAX_VALUE.asObjectCopy()}));
  assertHighest(dateArray(new LocalDate[]{DateValue.MAX_VALUE.asObjectCopy()}));
  assertHighest(timeArray(new OffsetTime[]{TimeValue.MAX_VALUE.asObjectCopy()}));
  assertHighest(localTimeArray(new LocalTime[]{LocalTimeValue.MAX_VALUE.asObjectCopy()}));
  assertHighest(durationArray(new DurationValue[]{DurationValue.duration(Duration.ofSeconds(Long.MAX_VALUE,999_999_999))}));
  assertHighest(durationArray(new DurationValue[]{DurationValue.duration(Period.of(Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE))}));
  assertHighest(durationArray(new TemporalAmount[]{Duration.ofSeconds(Long.MAX_VALUE,999_999_999)}));
  assertHighest(durationArray(new TemporalAmount[]{Period.of(Integer.MAX_VALUE,Integer.MAX_VALUE,Integer.MAX_VALUE)}));
  assertHighestStringArray();
  assertHighest(booleanArray(new boolean[]{true}));
  assertHighest(byteArray(new byte[]{Byte.MAX_VALUE}));
  assertHighest(shortArray(new short[]{Short.MAX_VALUE}));
  assertHighest(intArray(new int[]{Integer.MAX_VALUE}));
  assertHighest(longArray(new long[]{Long.MAX_VALUE}));
  assertHighest(floatArray(new float[]{Float.POSITIVE_INFINITY}));
  assertHighest(doubleArray(new double[]{Double.POSITIVE_INFINITY}));
}
