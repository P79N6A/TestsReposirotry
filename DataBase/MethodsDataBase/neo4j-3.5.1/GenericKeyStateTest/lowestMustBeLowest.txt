@Test void lowestMustBeLowest(){
  assertLowest(PointValue.MIN_VALUE);
  assertLowest(DateTimeValue.MIN_VALUE);
  assertLowest(LocalDateTimeValue.MIN_VALUE);
  assertLowest(DateValue.MIN_VALUE);
  assertLowest(TimeValue.MIN_VALUE);
  assertLowest(LocalTimeValue.MIN_VALUE);
  assertLowest(DurationValue.duration(Duration.ofSeconds(Long.MIN_VALUE,0)));
  assertLowest(DurationValue.duration(Period.of(Integer.MIN_VALUE,Integer.MIN_VALUE,Integer.MIN_VALUE)));
  assertLowest(of(UTF8.decode(new byte[0])));
  assertLowest(of(false));
  assertLowest(of(Byte.MIN_VALUE));
  assertLowest(of(Short.MIN_VALUE));
  assertLowest(of(Integer.MIN_VALUE));
  assertLowest(of(Long.MIN_VALUE));
  assertLowest(of(Float.NEGATIVE_INFINITY));
  assertLowest(of(Double.NEGATIVE_INFINITY));
  assertLowest(pointArray(new PointValue[0]));
  assertLowest(dateTimeArray(new ZonedDateTime[0]));
  assertLowest(localDateTimeArray(new LocalDateTime[0]));
  assertLowest(dateArray(new LocalDate[0]));
  assertLowest(timeArray(new OffsetTime[0]));
  assertLowest(localTimeArray(new LocalTime[0]));
  assertLowest(durationArray(new DurationValue[0]));
  assertLowest(durationArray(new TemporalAmount[0]));
  assertLowest(of(new String[0]));
  assertLowest(of(new boolean[0]));
  assertLowest(of(new byte[0]));
  assertLowest(of(new short[0]));
  assertLowest(of(new int[0]));
  assertLowest(of(new long[0]));
  assertLowest(of(new float[0]));
  assertLowest(of(new double[0]));
}
