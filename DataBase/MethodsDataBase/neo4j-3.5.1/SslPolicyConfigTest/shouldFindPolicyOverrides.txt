@Test public void shouldFindPolicyOverrides(){
  Map<String,String> params=stringMap();
  String policyName="XYZ";
  SslPolicyConfig policyConfig=new SslPolicyConfig(policyName);
  File homeDir=testDirectory.directory("home");
  params.put(GraphDatabaseSettings.neo4j_home.name(),homeDir.getAbsolutePath());
  params.put(policyConfig.base_directory.name(),"certificates/XYZ");
  File privateKey=testDirectory.directory("/path/to/my.key");
  File publicCertificate=testDirectory.directory("/path/to/my.crt");
  File trustedDir=testDirectory.directory("/some/other/path/to/trusted");
  File revokedDir=testDirectory.directory("/some/other/path/to/revoked");
  params.put(policyConfig.private_key.name(),privateKey.getAbsolutePath());
  params.put(policyConfig.public_certificate.name(),publicCertificate.getAbsolutePath());
  params.put(policyConfig.trusted_dir.name(),trustedDir.getAbsolutePath());
  params.put(policyConfig.revoked_dir.name(),revokedDir.getAbsolutePath());
  params.put(policyConfig.allow_key_generation.name(),"true");
  params.put(policyConfig.trust_all.name(),"true");
  params.put(policyConfig.private_key_password.name(),"setecastronomy");
  params.put(policyConfig.tls_versions.name(),"TLSv1.1,TLSv1.2");
  params.put(policyConfig.ciphers.name(),"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384");
  params.put(policyConfig.client_auth.name(),"optional");
  Config config=Config.defaults(params);
  File privateKeyFromConfig=config.get(policyConfig.private_key);
  File publicCertificateFromConfig=config.get(policyConfig.public_certificate);
  File trustedDirFromConfig=config.get(policyConfig.trusted_dir);
  File revokedDirFromConfig=config.get(policyConfig.revoked_dir);
  String privateKeyPassword=config.get(policyConfig.private_key_password);
  boolean allowKeyGeneration=config.get(policyConfig.allow_key_generation);
  boolean trustAll=config.get(policyConfig.trust_all);
  List<String> tlsVersions=config.get(policyConfig.tls_versions);
  List<String> ciphers=config.get(policyConfig.ciphers);
  ClientAuth clientAuth=config.get(policyConfig.client_auth);
  assertEquals(privateKey,privateKeyFromConfig);
  assertEquals(publicCertificate,publicCertificateFromConfig);
  assertEquals(trustedDir,trustedDirFromConfig);
  assertEquals(revokedDir,revokedDirFromConfig);
  assertTrue(allowKeyGeneration);
  assertTrue(trustAll);
  assertEquals("setecastronomy",privateKeyPassword);
  assertEquals(asList("TLSv1.1","TLSv1.2"),tlsVersions);
  assertEquals(asList("TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384","TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"),ciphers);
  assertEquals(ClientAuth.OPTIONAL,clientAuth);
}
