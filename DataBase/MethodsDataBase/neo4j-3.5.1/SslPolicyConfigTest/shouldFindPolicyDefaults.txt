@Test public void shouldFindPolicyDefaults(){
  Map<String,String> params=stringMap();
  String policyName="XYZ";
  SslPolicyConfig policyConfig=new SslPolicyConfig(policyName);
  File homeDir=testDirectory.directory("home");
  params.put(GraphDatabaseSettings.neo4j_home.name(),homeDir.getAbsolutePath());
  params.put(policyConfig.base_directory.name(),"certificates/XYZ");
  Config config=Config.defaults(params);
  File privateKey=new File(homeDir,"certificates/XYZ/private.key");
  File publicCertificate=new File(homeDir,"certificates/XYZ/public.crt");
  File trustedDir=new File(homeDir,"certificates/XYZ/trusted");
  File revokedDir=new File(homeDir,"certificates/XYZ/revoked");
  File privateKeyFromConfig=config.get(policyConfig.private_key);
  File publicCertificateFromConfig=config.get(policyConfig.public_certificate);
  File trustedDirFromConfig=config.get(policyConfig.trusted_dir);
  File revokedDirFromConfig=config.get(policyConfig.revoked_dir);
  String privateKeyPassword=config.get(policyConfig.private_key_password);
  boolean allowKeyGeneration=config.get(policyConfig.allow_key_generation);
  boolean trustAll=config.get(policyConfig.trust_all);
  List<String> tlsVersions=config.get(policyConfig.tls_versions);
  List<String> ciphers=config.get(policyConfig.ciphers);
  ClientAuth clientAuth=config.get(policyConfig.client_auth);
  assertEquals(privateKey,privateKeyFromConfig);
  assertEquals(publicCertificate,publicCertificateFromConfig);
  assertEquals(trustedDir,trustedDirFromConfig);
  assertEquals(revokedDir,revokedDirFromConfig);
  assertNull(privateKeyPassword);
  assertFalse(allowKeyGeneration);
  assertFalse(trustAll);
  assertEquals(singletonList("TLSv1.2"),tlsVersions);
  assertNull(ciphers);
  assertEquals(ClientAuth.REQUIRE,clientAuth);
}
