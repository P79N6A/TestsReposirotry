@Test public void shouldDeleteJustWhatTheThresholdSays(){
  when(threshold.reached(any(),eq(6L),any())).thenReturn(false);
  when(threshold.reached(any(),eq(5L),any())).thenReturn(false);
  when(threshold.reached(any(),eq(4L),any())).thenReturn(false);
  when(threshold.reached(any(),eq(3L),any())).thenReturn(true);
  File fileName1=new File("logical.log.v1");
  File fileName2=new File("logical.log.v2");
  File fileName3=new File("logical.log.v3");
  File fileName4=new File("logical.log.v4");
  File fileName5=new File("logical.log.v5");
  File fileName6=new File("logical.log.v6");
  when(files.getLogFileForVersion(6)).thenReturn(fileName6);
  when(files.getLogFileForVersion(5)).thenReturn(fileName5);
  when(files.getLogFileForVersion(4)).thenReturn(fileName4);
  when(files.getLogFileForVersion(3)).thenReturn(fileName3);
  when(files.getLogFileForVersion(2)).thenReturn(fileName2);
  when(files.getLogFileForVersion(1)).thenReturn(fileName1);
  when(fileSystem.fileExists(fileName6)).thenReturn(true);
  when(fileSystem.fileExists(fileName5)).thenReturn(true);
  when(fileSystem.fileExists(fileName4)).thenReturn(true);
  when(fileSystem.fileExists(fileName3)).thenReturn(true);
  when(fileSystem.fileExists(fileName2)).thenReturn(true);
  when(fileSystem.fileExists(fileName1)).thenReturn(true);
  when(fileSystem.getFileSize(any())).thenReturn(LOG_HEADER_SIZE + 1L);
  final ThresholdBasedPruneStrategy strategy=new ThresholdBasedPruneStrategy(fileSystem,files,threshold);
  strategy.findLogVersionsToDelete(7L).forEachOrdered(v -> fileSystem.deleteFile(files.getLogFileForVersion(v)));
  InOrder order=inOrder(threshold,fileSystem);
  order.verify(threshold,times(1)).init();
  order.verify(fileSystem,times(1)).deleteFile(fileName1);
  order.verify(fileSystem,times(1)).deleteFile(fileName2);
  order.verify(fileSystem,times(1)).deleteFile(fileName3);
  verify(fileSystem,never()).deleteFile(fileName4);
  verify(fileSystem,never()).deleteFile(fileName5);
  verify(fileSystem,never()).deleteFile(fileName6);
}
