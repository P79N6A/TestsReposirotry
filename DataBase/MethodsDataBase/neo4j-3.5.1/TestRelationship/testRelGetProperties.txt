@Test public void testRelGetProperties(){
  Integer int1=1;
  Integer int2=2;
  String string="3";
  Node node1=getGraphDb().createNode();
  Node node2=getGraphDb().createNode();
  Relationship rel1=node1.createRelationshipTo(node2,TEST);
  try {
    rel1.getProperty(key1);
    fail("get non existing property didn't throw exception");
  }
 catch (  NotFoundException e) {
  }
  try {
    rel1.getProperty(null);
    fail("get of null key didn't throw exception");
  }
 catch (  IllegalArgumentException e) {
  }
  assertTrue(!rel1.hasProperty(key1));
  assertTrue(!rel1.hasProperty(null));
  rel1.setProperty(key1,int1);
  rel1.setProperty(key2,int2);
  rel1.setProperty(key3,string);
  assertTrue(rel1.hasProperty(key1));
  assertTrue(rel1.hasProperty(key2));
  assertTrue(rel1.hasProperty(key3));
  Map<String,Object> properties=rel1.getAllProperties();
  assertEquals(properties.get(key1),int1);
  assertEquals(properties.get(key2),int2);
  assertEquals(properties.get(key3),string);
  properties=rel1.getProperties(key1,key2);
  assertEquals(properties.get(key1),int1);
  assertEquals(properties.get(key2),int2);
  assertFalse(properties.containsKey(key3));
  properties=node1.getProperties();
  assertTrue(properties.isEmpty());
  try {
    node1.getProperties((String[])null);
    fail();
  }
 catch (  NullPointerException e) {
  }
  try {
    String[] names=new String[]{null};
    node1.getProperties(names);
    fail();
  }
 catch (  NullPointerException e) {
  }
  try {
    rel1.removeProperty(key3);
  }
 catch (  NotFoundException e) {
    fail("Remove of property failed.");
  }
  assertTrue(!rel1.hasProperty(key3));
  assertTrue(!rel1.hasProperty(null));
  rel1.delete();
  node2.delete();
  node1.delete();
}
