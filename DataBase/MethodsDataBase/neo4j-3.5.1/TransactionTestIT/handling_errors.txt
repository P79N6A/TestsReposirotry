@Test @Documented("Handling errors\n" + "\n" + "The result of any request against the transaction endpoint is streamed back to the client.\n"+ "Therefore the server does not know whether the request will be successful or not when it sends the HTTP status\n"+ "code.\n"+ "\n"+ "Because of this, all requests against the transactional endpoint will return 200 or 201 status code, regardless\n"+ "of whether statements were successfully executed. At the end of the response payload, the server includes a list\n"+ "of errors that occurred while executing statements. If this list is empty, the request completed successfully.\n"+ "\n"+ "If any errors occur while executing statements, the server will roll back the transaction.\n"+ "\n"+ "In this example, we send the server an invalid statement to demonstrate error handling.\n"+ " \n"+ "For more information on the status codes, see <<status-codes>>.") public void handling_errors() throws JsonParseException {
  String location=POST(getDataUri() + "transaction").location();
  ResponseEntity response=gen.get().expectedStatus(200).payload(quotedJson("{ 'statements': [ { 'statement': 'This is not a valid Cypher Statement.' } ] }")).post(location + "/commit");
  Map<String,Object> result=jsonToMap(response.entity());
  assertErrors(result,Status.Statement.SyntaxError);
}
