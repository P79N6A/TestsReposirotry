@Test @Documented("Reset transaction timeout of an open transaction\n" + "\n" + "Every orphaned transaction is automatically expired after a period of inactivity.  This may be prevented\n"+ "by resetting the transaction timeout.\n"+ "\n"+ "The timeout may be reset by sending a keep-alive request to the server that executes an empty list of statements.\n"+ "This request will reset the transaction timeout and return the new time at which the transaction will\n"+ "expire as an RFC1123 formatted timestamp value in the ``transaction'' section of the response.") public void reset_transaction_timeout_of_an_open_transaction() throws JsonParseException, ParseException, InterruptedException {
  HTTP.Response initialResponse=POST(getDataUri() + "transaction");
  String location=initialResponse.location();
  long initialExpirationTime=expirationTime(jsonToMap(initialResponse.rawContent()));
  Thread.sleep(3000);
  ResponseEntity response=gen.get().expectedStatus(200).payload(quotedJson("{ 'statements': [ ] }")).post(location);
  Map<String,Object> result=jsonToMap(response.entity());
  assertNoErrors(result);
  long newExpirationTime=expirationTime(result);
  assertTrue("Expiration time was not increased",newExpirationTime > initialExpirationTime);
}
