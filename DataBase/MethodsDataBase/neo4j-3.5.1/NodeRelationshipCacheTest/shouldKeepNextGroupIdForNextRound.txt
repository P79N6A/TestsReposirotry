@Test public void shouldKeepNextGroupIdForNextRound(){
  cache=new NodeRelationshipCache(NumberArrayFactory.HEAP,1,100,base);
  long nodeId=0;
  int typeId=10;
  cache.setNodeCount(nodeId + 1);
  cache.incrementCount(nodeId);
  GroupVisitor groupVisitor=mock(GroupVisitor.class);
  when(groupVisitor.visit(anyLong(),anyInt(),anyLong(),anyLong(),anyLong())).thenReturn(1L,2L,3L);
  long firstRelationshipGroupId;
{
    long relationshipId=10;
    cache.getAndPutRelationship(nodeId,typeId,OUTGOING,relationshipId,true);
    firstRelationshipGroupId=cache.getFirstRel(nodeId,groupVisitor);
    assertEquals(1L,firstRelationshipGroupId);
    verify(groupVisitor).visit(nodeId,typeId,relationshipId,-1L,-1L);
    cache.setForwardScan(false,true);
    cache.getAndPutRelationship(nodeId,typeId,OUTGOING,relationshipId,false);
    cache.setForwardScan(true,true);
  }
  long secondRelationshipGroupId;
{
    long relationshipId=11;
    cache.getAndPutRelationship(nodeId,typeId,INCOMING,relationshipId,true);
    secondRelationshipGroupId=cache.getFirstRel(nodeId,groupVisitor);
    assertEquals(2L,secondRelationshipGroupId);
    verify(groupVisitor).visit(nodeId,typeId,-1,relationshipId,-1L);
    cache.setForwardScan(false,true);
    cache.getAndPutRelationship(nodeId,typeId,OUTGOING,relationshipId,false);
    cache.setForwardScan(true,true);
  }
{
    long relationshipId=10;
    cache.getAndPutRelationship(nodeId,typeId,BOTH,relationshipId,true);
    long thirdRelationshipGroupId=cache.getFirstRel(nodeId,groupVisitor);
    assertEquals(3L,thirdRelationshipGroupId);
    verify(groupVisitor).visit(nodeId,typeId,-1L,-1L,relationshipId);
  }
}
