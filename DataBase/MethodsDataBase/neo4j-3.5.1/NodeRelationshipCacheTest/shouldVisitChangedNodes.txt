@Test public void shouldVisitChangedNodes(){
  int nodes=10;
  int typeId=10;
  cache=new NodeRelationshipCache(NumberArrayFactory.HEAP,2,100,base);
  cache.setNodeCount(nodes);
  for (long nodeId=0; nodeId < nodes; nodeId++) {
    cache.incrementCount(nodeId);
    if (random.nextBoolean()) {
      cache.incrementCount(nodeId);
    }
  }
  MutableLongSet keySparseChanged=new LongHashSet();
  MutableLongSet keyDenseChanged=new LongHashSet();
  for (int i=0; i < nodes / 2; i++) {
    long nodeId=random.nextLong(nodes);
    cache.getAndPutRelationship(nodeId,typeId,Direction.OUTGOING,random.nextLong(1_000_000),false);
    boolean dense=cache.isDense(nodeId);
    (dense ? keyDenseChanged : keySparseChanged).add(nodeId);
  }
{
    NodeChangeVisitor visitor=(nodeId,array) -> {
      assertTrue("Unexpected sparse change reported for " + nodeId,keySparseChanged.remove(nodeId));
    }
;
    cache.visitChangedNodes(visitor,NodeType.NODE_TYPE_SPARSE);
    assertTrue("There was " + keySparseChanged.size() + " expected sparse changes that weren't reported",keySparseChanged.isEmpty());
  }
{
    NodeChangeVisitor visitor=(nodeId,array) -> {
      assertTrue("Unexpected dense change reported for " + nodeId,keyDenseChanged.remove(nodeId));
    }
;
    cache.visitChangedNodes(visitor,NodeType.NODE_TYPE_DENSE);
    assertTrue("There was " + keyDenseChanged.size() + " expected dense changes that weren reported",keyDenseChanged.isEmpty());
  }
}
