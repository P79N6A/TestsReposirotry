@Test public void shouldCacheMultipleDenseNodeRelationshipHeads(){
  cache=new NodeRelationshipCache(NumberArrayFactory.HEAP,1);
  cache.setNodeCount(10);
  long nodeId=3;
  cache.setCount(nodeId,10,0,OUTGOING);
  Map<Pair<Integer,Direction>,Long> firstRelationshipIds=new HashMap<>();
  int typeCount=3;
  for (int typeId=0, relationshipId=0; typeId < typeCount; typeId++) {
    for (    Direction direction : Direction.values()) {
      long firstRelationshipId=relationshipId++;
      cache.getAndPutRelationship(nodeId,typeId,direction,firstRelationshipId,true);
      firstRelationshipIds.put(Pair.of(typeId,direction),firstRelationshipId);
    }
  }
  AtomicInteger visitCount=new AtomicInteger();
  GroupVisitor visitor=(nodeId1,typeId,out,in,loop) -> {
    visitCount.incrementAndGet();
    assertEquals(firstRelationshipIds.get(Pair.of(typeId,OUTGOING)).longValue(),out);
    assertEquals(firstRelationshipIds.get(Pair.of(typeId,INCOMING)).longValue(),in);
    assertEquals(firstRelationshipIds.get(Pair.of(typeId,BOTH)).longValue(),loop);
    return 0;
  }
;
  cache.getFirstRel(nodeId,visitor);
  assertEquals(typeCount,visitCount.get());
}
