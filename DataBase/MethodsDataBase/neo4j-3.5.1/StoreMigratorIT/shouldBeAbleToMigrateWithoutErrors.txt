@Test public void shouldBeAbleToMigrateWithoutErrors() throws Exception {
  DatabaseLayout databaseLayout=directory.databaseLayout();
  File prepare=directory.directory("prepare");
  MigrationTestUtils.prepareSampleLegacyDatabase(version,fs,databaseLayout.databaseDirectory(),prepare);
  AssertableLogProvider logProvider=new AssertableLogProvider(true);
  LogService logService=new SimpleLogService(logProvider,logProvider);
  PageCache pageCache=pageCacheRule.getPageCache(fs);
  LogTailScanner tailScanner=getTailScanner(databaseLayout.databaseDirectory());
  UpgradableDatabase upgradableDatabase=getUpgradableDatabase(pageCache,tailScanner);
  String versionToMigrateFrom=upgradableDatabase.checkUpgradable(databaseLayout).storeVersion();
  SilentMigrationProgressMonitor progressMonitor=new SilentMigrationProgressMonitor();
  StoreMigrator migrator=new StoreMigrator(fs,pageCache,CONFIG,logService,jobScheduler);
  CountsMigrator countsMigrator=new CountsMigrator(fs,pageCache,CONFIG);
  DatabaseLayout migrationLayout=directory.databaseLayout(StoreUpgrader.MIGRATION_DIRECTORY);
  migrator.migrate(databaseLayout,migrationLayout,progressMonitor.startSection("section"),versionToMigrateFrom,upgradableDatabase.currentVersion());
  countsMigrator.migrate(databaseLayout,migrationLayout,progressMonitor.startSection("section"),versionToMigrateFrom,upgradableDatabase.currentVersion());
  migrator.moveMigratedFiles(migrationLayout,databaseLayout,versionToMigrateFrom,upgradableDatabase.currentVersion());
  countsMigrator.moveMigratedFiles(migrationLayout,databaseLayout,versionToMigrateFrom,upgradableDatabase.currentVersion());
  StoreFactory storeFactory=new StoreFactory(databaseLayout,CONFIG,new DefaultIdGeneratorFactory(fs),pageCache,fs,logService.getInternalLogProvider(),EmptyVersionContextSupplier.EMPTY);
  storeFactory.openAllNeoStores().close();
  logProvider.assertNoLogCallContaining("ERROR");
}
