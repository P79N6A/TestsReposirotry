@Test public void mirroredTraversalReversesInitialState(){
  createGraph("a TO b","b TO c","c TO d");
  BranchCollisionPolicy collisionPolicy=(evaluator,pathPredicate) -> new StandardBranchCollisionDetector(null,null){
    @Override protected boolean includePath(    Path path,    TraversalBranch startPath,    TraversalBranch endPath){
      assertEquals(0,startPath.state());
      assertEquals(10,endPath.state());
      return true;
    }
  }
;
  Iterables.count(getGraphDb().bidirectionalTraversalDescription().mirroredSides(getGraphDb().traversalDescription().uniqueness(NODE_PATH).expand(PathExpanders.forType(to),new InitialBranchState.State<>(0,10))).collisionPolicy(collisionPolicy).traverse(getNodeWithName("a"),getNodeWithName("d")));
}
