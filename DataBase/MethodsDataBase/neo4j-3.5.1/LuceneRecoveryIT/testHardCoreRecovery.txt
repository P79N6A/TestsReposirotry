@Test public void testHardCoreRecovery() throws Exception {
  String path=testDirectory.storeDir().getPath();
  Process process=Runtime.getRuntime().exec(new String[]{getJavaExecutable().toString(),"-cp",ProcessUtil.getClassPath(),Inserter.class.getName(),path});
  awaitFile(new File(path,"started"));
  Thread.sleep(5000);
  process.destroy();
  process.waitFor();
  GraphDatabaseService db=null;
  try {
    db=new TestGraphDatabaseFactory().newEmbeddedDatabase(testDirectory.storeDir());
    try (Transaction transaction=db.beginTx()){
      assertTrue(db.index().existsForNodes("myIndex"));
      Index<Node> index=db.index().forNodes("myIndex");
      for (      Node node : db.getAllNodes()) {
        for (        String key : node.getPropertyKeys()) {
          String value=(String)node.getProperty(key);
          boolean found=false;
          try (IndexHits<Node> indexHits=index.get(key,value)){
            for (            Node indexedNode : indexHits) {
              if (indexedNode.equals(node)) {
                found=true;
                break;
              }
            }
          }
           if (!found) {
            throw new IllegalStateException(node + " has property '" + key+ "'='"+ value+ "', but not in index");
          }
        }
      }
    }
 catch (    Throwable e) {
      if (Exceptions.contains(e,CorruptIndexException.class) || exceptionContainsStackTraceElementFromPackage(e,"org.apache.lucene")) {
        System.err.println("Lucene exception happened during recovery after a real crash. " + "It may be that the index is corrupt somehow and this is out of control and not " + "something this test can really improve on right now. Printing the exception for reference");
        e.printStackTrace();
        return;
      }
      throw e;
    }
    NodeCreator nodeCreator=new NodeCreator(db);
    Thread t=new Thread(nodeCreator);
    t.start();
    t.join();
  }
  finally {
    if (db != null) {
      db.shutdown();
    }
  }
}
