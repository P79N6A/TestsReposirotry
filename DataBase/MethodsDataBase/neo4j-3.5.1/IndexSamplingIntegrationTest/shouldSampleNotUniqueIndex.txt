@Test public void shouldSampleNotUniqueIndex() throws Throwable {
  GraphDatabaseService db=null;
  long deletedNodes=0;
  try {
    db=new TestGraphDatabaseFactory().newEmbeddedDatabase(testDirectory.storeDir());
    IndexDefinition indexDefinition;
    try (Transaction tx=db.beginTx()){
      indexDefinition=db.schema().indexFor(label).on(property).create();
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      db.schema().awaitIndexOnline(indexDefinition,10,TimeUnit.SECONDS);
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      for (int i=0; i < nodes; i++) {
        db.createNode(label).setProperty(property,names[i % names.length]);
        tx.success();
      }
    }
     try (Transaction tx=db.beginTx()){
      for (int i=0; i < (nodes / 10); i++) {
        try (ResourceIterator<Node> nodes=db.findNodes(label,property,names[i % names.length])){
          nodes.next().delete();
        }
         deletedNodes++;
        tx.success();
      }
    }
   }
  finally {
    if (db != null) {
      db.shutdown();
    }
  }
  triggerIndexResamplingOnNextStartup();
  DoubleLongRegister register=fetchIndexSamplingValues(db);
  assertEquals(names.length,register.readFirst());
  assertThat(register.readSecond(),allOf(greaterThanOrEqualTo(nodes - deletedNodes),lessThanOrEqualTo(nodes)));
  DoubleLongRegister indexSizeRegister=fetchIndexSizeValues(db);
  assertEquals(0,indexSizeRegister.readFirst());
  assertEquals(nodes - deletedNodes,indexSizeRegister.readSecond());
}
