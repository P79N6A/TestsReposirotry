@Test public void shouldBeAbleToSnapshotDuringHeavyLoad() throws Throwable {
  final KernelTransactions transactions=newKernelTransactions();
  Race race=new Race();
  final int threads=50;
  final AtomicBoolean end=new AtomicBoolean();
  final AtomicReferenceArray<KernelTransactionsSnapshot> snapshots=new AtomicReferenceArray<>(threads);
  for (int i=0; i < threads; i++) {
    final int threadIndex=i;
    race.addContestant(() -> {
      ThreadLocalRandom random=ThreadLocalRandom.current();
      while (!end.get()) {
        try (KernelTransaction transaction=getKernelTransaction(transactions)){
          KernelTransactionsSnapshot snapshot=null;
          try {
            parkNanos(MILLISECONDS.toNanos(random.nextInt(3)));
            if (snapshots.get(threadIndex) == null) {
              requireNonNull(transactions,"transactions is null");
              snapshot=requireNonNull(transactions.get(),"transactions.get() returned null");
              snapshots.set(threadIndex,snapshot);
              parkNanos(MILLISECONDS.toNanos(random.nextInt(3)));
            }
          }
 catch (          RuntimeException e) {
            StringBuilder sb=new StringBuilder("Gotcha!\n").append("threadIndex=").append(threadIndex).append('\n').append("transaction=").append(transaction).append('\n').append("snapshots=").append(snapshots).append('\n').append("snapshot=").append(snapshot).append('\n').append("end=").append(end);
            throw new RuntimeException(sb.toString(),e);
          }
        }
 catch (        TransactionFailureException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
  }
  race.addContestant(() -> {
    ThreadLocalRandom random=ThreadLocalRandom.current();
    int snapshotsLeft=1_000;
    while (snapshotsLeft > 0) {
      int threadIndex=random.nextInt(threads);
      KernelTransactionsSnapshot snapshot=snapshots.get(threadIndex);
      if (snapshot != null && snapshot.allClosed()) {
        snapshotsLeft--;
        snapshots.set(threadIndex,null);
      }
    }
    end.set(true);
  }
);
  race.go();
}
