@Test public void shouldFollowSpecificRelationship(){
  try (NodeCursor node=cursors.allocateNodeCursor();RelationshipGroupCursor group=cursors.allocateRelationshipGroupCursor();RelationshipTraversalCursor relationship=cursors.allocateRelationshipTraversalCursor()){
    read.singleNode(start,node);
    assertTrue("access start node",node.next());
    node.relationships(group);
    assertTrue("access relationship group",group.next());
    group.outgoing(relationship);
    assertTrue("access outgoing relationships",relationship.next());
    assertEquals("source node",start,relationship.sourceNodeReference());
    assertEquals("target node",end,relationship.targetNodeReference());
    assertEquals("node of origin",start,relationship.originNodeReference());
    assertEquals("neighbouring node",end,relationship.neighbourNodeReference());
    assertEquals("relationship should have same label as group",group.type(),relationship.type());
    assertFalse("only a single relationship",relationship.next());
    group.incoming(relationship);
    assertFalse("no incoming relationships",relationship.next());
    group.loops(relationship);
    assertFalse("no loop relationships",relationship.next());
    assertFalse("only a single group",group.next());
    read.singleNode(end,node);
    assertTrue("access start node",node.next());
    node.relationships(group);
    assertTrue("access relationship group",group.next());
    group.incoming(relationship);
    assertTrue("access incoming relationships",relationship.next());
    assertEquals("source node",start,relationship.sourceNodeReference());
    assertEquals("target node",end,relationship.targetNodeReference());
    assertEquals("node of origin",end,relationship.originNodeReference());
    assertEquals("neighbouring node",start,relationship.neighbourNodeReference());
    assertEquals("relationship should have same label as group",group.type(),relationship.type());
    assertFalse("only a single relationship",relationship.next());
    group.outgoing(relationship);
    assertFalse("no outgoing relationships",relationship.next());
    group.loops(relationship);
    assertFalse("no loop relationships",relationship.next());
    assertFalse("only a single group",group.next());
  }
 }
