@Test public void shouldCausePanicAfterSomeFailures() throws Throwable {
  RuntimeException[] failures=new RuntimeException[]{new RuntimeException("First"),new RuntimeException("Second"),new RuntimeException("Third")};
  when(checkPointer.checkPointIfNeeded(any(TriggerInfo.class))).thenThrow(failures);
  CheckPointScheduler scheduler=new CheckPointScheduler(checkPointer,ioLimiter,jobScheduler,1,health);
  scheduler.start();
  for (int i=0; i < CheckPointScheduler.MAX_CONSECUTIVE_FAILURES_TOLERANCE - 1; i++) {
    jobScheduler.runJob();
    verifyZeroInteractions(health);
  }
  try {
    jobScheduler.runJob();
    fail("Should have failed");
  }
 catch (  UnderlyingStorageException e) {
    assertEquals(Iterators.asSet(failures),Iterators.asSet(e.getSuppressed()));
    verify(health).panic(e);
  }
}
