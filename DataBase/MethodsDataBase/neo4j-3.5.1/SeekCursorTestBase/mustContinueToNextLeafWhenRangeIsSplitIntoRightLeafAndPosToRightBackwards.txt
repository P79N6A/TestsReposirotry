@Test void mustContinueToNextLeafWhenRangeIsSplitIntoRightLeafAndPosToRightBackwards() throws Exception {
  List<Long> expected=new ArrayList<>();
  long lastSeed=fullLeaf(1,expected);
  Collections.reverse(expected);
  long fromInclusive=lastSeed - 1;
  long toExclusive=-1;
  PageAwareByteArrayCursor seekCursor=cursor.duplicate();
  seekCursor.next();
  try (SeekCursor<KEY,VALUE> seeker=seekCursor(fromInclusive,toExclusive,seekCursor)){
    long middle=lastSeed / 2;
    long stopPoint=middle / 2;
    int readKeys=0;
    while (readKeys < stopPoint && seeker.next()) {
      long key=expected.get(readKeys);
      assertKeyAndValue(seeker,key);
      readKeys++;
    }
    expected.add(0L);
    insert(0L);
    seekCursor.forceRetry();
    while (seeker.next()) {
      long key=expected.get(readKeys);
      assertKeyAndValue(seeker,key);
      readKeys++;
    }
    assertEquals(expected.size(),readKeys);
  }
 }
