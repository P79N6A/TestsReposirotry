@Test void mustNotContinueToSecondLeafAfterFindingEndOfRangeInFirst() throws Exception {
  AtomicBoolean nextCalled=new AtomicBoolean();
  PageCursor pageCursorSpy=new DelegatingPageCursor(cursor){
    @Override public boolean next(    long pageId) throws IOException {
      nextCalled.set(true);
      return super.next(pageId);
    }
  }
;
  long i=fullLeaf();
  long left=createRightSibling(cursor);
  long j=fullLeaf(i);
  long fromInclusive=j - 1;
  long toExclusive=i;
  nextCalled.set(false);
  try (SeekCursor<KEY,VALUE> cursor=seekCursor(fromInclusive,toExclusive,pageCursorSpy)){
    assertRangeInSingleLeaf(fromInclusive,toExclusive,cursor);
  }
   assertFalse(nextCalled.get(),"Cursor continued to next leaf even though end of range is within first leaf");
}
