@Test public void shouldNotStartOtherSamplingWhenSamplingAllTheIndexes(){
  final AtomicInteger totalCount=new AtomicInteger(0);
  final AtomicInteger concurrentCount=new AtomicInteger(0);
  final DoubleLatch jobLatch=new DoubleLatch();
  final DoubleLatch testLatch=new DoubleLatch();
  IndexSamplingJobFactory jobFactory=(indexId,proxy) -> {
    if (!concurrentCount.compareAndSet(0,1)) {
      throw new IllegalStateException("count !== 0 on create");
    }
    totalCount.incrementAndGet();
    jobLatch.waitForAllToStart();
    testLatch.startAndWaitForAllToStart();
    jobLatch.waitForAllToFinish();
    concurrentCount.decrementAndGet();
    testLatch.finish();
    return null;
  }
;
  final IndexSamplingController controller=new IndexSamplingController(samplingConfig,jobFactory,jobQueue,tracker,snapshotProvider,scheduler,always(true));
  when(tracker.canExecuteMoreSamplingJobs()).thenReturn(true);
  when(indexProxy.getState()).thenReturn(ONLINE);
  new Thread(runController(controller,TRIGGER_REBUILD_UPDATED)).start();
  jobLatch.startAndWaitForAllToStart();
  testLatch.waitForAllToStart();
  assertEquals(1,concurrentCount.get());
  controller.sampleIndexes(BACKGROUND_REBUILD_UPDATED);
  jobLatch.finish();
  testLatch.waitForAllToFinish();
  assertEquals(0,concurrentCount.get());
  assertEquals(1,totalCount.get());
}
