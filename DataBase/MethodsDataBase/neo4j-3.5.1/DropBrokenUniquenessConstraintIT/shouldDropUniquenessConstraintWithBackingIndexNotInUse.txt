@Test public void shouldDropUniquenessConstraintWithBackingIndexNotInUse(){
  try (Transaction tx=db.beginTx()){
    db.schema().constraintFor(label).assertPropertyIsUnique(key).create();
    tx.success();
  }
   RecordStorageEngine storageEngine=db.getDependencyResolver().resolveDependency(RecordStorageEngine.class);
  SchemaStore schemaStore=storageEngine.testAccessNeoStores().getSchemaStore();
  SchemaRule indexRule=single(filter(rule -> rule instanceof StoreIndexDescriptor,schemaStore.loadAllSchemaRules()));
  setSchemaRecordNotInUse(schemaStore,indexRule.getId());
  storageEngine.loadSchemaCache();
  try (Transaction tx=db.beginTx()){
    single(db.schema().getConstraints(label).iterator()).drop();
    tx.success();
  }
   try (Transaction ignore=db.beginTx()){
    assertFalse(db.schema().getConstraints().iterator().hasNext());
    assertFalse(db.schema().getIndexes().iterator().hasNext());
  }
 }
