@Test public void verifyFixedSizeStoresCanRebuildIdGeneratorSlowly(){
  Config config=Config.defaults(GraphDatabaseSettings.rebuild_idgenerators_fast,"false");
  File storeFile=testDirectory.file("nodes");
  File idFile=testDirectory.file("idNodes");
  DynamicArrayStore labelStore=mock(DynamicArrayStore.class);
  NodeStore store=new NodeStore(storeFile,idFile,config,new DefaultIdGeneratorFactory(fs),pageCacheRule.getPageCache(fs),NullLogProvider.getInstance(),labelStore,RecordFormatSelector.defaultFormat());
  store.initialise(true);
  store.makeStoreOk();
  NodeRecord record=new NodeRecord(0);
  record.setInUse(true);
  int highestId=50;
  for (int i=0; i < highestId; i++) {
    assertThat(store.nextId(),is((long)i));
    record.setId(i);
    store.updateRecord(record);
  }
  store.setHighestPossibleIdInUse(highestId);
  Long[] idsToFree={2L,3L,5L,7L};
  record.setInUse(false);
  for (  long toDelete : idsToFree) {
    record.setId(toDelete);
    store.updateRecord(record);
  }
  store.rebuildIdGenerator();
  store.closeIdGenerator();
  store.openIdGenerator();
  List<Long> nextIds=new ArrayList<>();
  nextIds.add(store.nextId());
  nextIds.add(store.nextId());
  nextIds.add(store.nextId());
  nextIds.add(store.nextId());
  nextIds.add(store.nextId());
  assertThat(nextIds,contains(2L,3L,5L,7L,50L));
  store.close();
}
