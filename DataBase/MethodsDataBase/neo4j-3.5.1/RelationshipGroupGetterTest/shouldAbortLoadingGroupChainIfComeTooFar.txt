@Test public void shouldAbortLoadingGroupChainIfComeTooFar(){
  LogProvider logProvider=NullLogProvider.getInstance();
  StoreFactory storeFactory=new StoreFactory(testDirectory.databaseLayout(),Config.defaults(),new DefaultIdGeneratorFactory(fs.get()),pageCache.getPageCache(fs.get()),fs.get(),logProvider,EmptyVersionContextSupplier.EMPTY);
  try (NeoStores stores=storeFactory.openNeoStores(true,StoreType.RELATIONSHIP_GROUP)){
    RecordStore<RelationshipGroupRecord> store=spy(stores.getRelationshipGroupStore());
    RelationshipGroupRecord group2=group(0,2);
    RelationshipGroupRecord group4=group(1,4);
    RelationshipGroupRecord group10=group(2,10);
    RelationshipGroupRecord group23=group(3,23);
    link(group2,group4,group10,group23);
    store.updateRecord(group2);
    store.updateRecord(group4);
    store.updateRecord(group10);
    store.updateRecord(group23);
    RelationshipGroupGetter groupGetter=new RelationshipGroupGetter(store);
    NodeRecord node=new NodeRecord(0,true,group2.getId(),-1);
    RecordAccess<RelationshipGroupRecord,Integer> access=new DirectRecordAccess<>(store,Loaders.relationshipGroupLoader(store));
    RelationshipGroupPosition result=groupGetter.getRelationshipGroup(node,7,access);
    InOrder verification=inOrder(store);
    verification.verify(store).getRecord(eq(group2.getId()),any(RelationshipGroupRecord.class),any(RecordLoad.class));
    verification.verify(store).getRecord(eq(group4.getId()),any(RelationshipGroupRecord.class),any(RecordLoad.class));
    verification.verify(store).getRecord(eq(group10.getId()),any(RelationshipGroupRecord.class),any(RecordLoad.class));
    verification.verify(store,never()).getRecord(eq(group23.getId()),any(RelationshipGroupRecord.class),any(RecordLoad.class));
    assertNull(result.group());
    assertEquals(group4,result.closestPrevious().forReadingData());
  }
 }
