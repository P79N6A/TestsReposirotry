@Test public void shouldLockUpdatedNodes() throws Exception {
  LockService locks=mock(LockService.class,new Answer<Object>(){
    @Override public synchronized Object answer(    final InvocationOnMock invocation){
      String name=invocation.getMethod().getName();
      if (name.equals("acquireNodeLock") || name.equals("acquireRelationshipLock")) {
        return mock(Lock.class,invocationOnMock -> null);
      }
      return null;
    }
  }
);
  NeoStores neoStores=neoStoresRule.builder().build();
  NodeStore nodeStore=neoStores.getNodeStore();
  long[] nodes={nodeStore.nextId(),nodeStore.nextId(),nodeStore.nextId(),nodeStore.nextId(),nodeStore.nextId(),nodeStore.nextId(),nodeStore.nextId()};
{
    TransactionRecordState tx=newTransactionRecordState(neoStores);
    for (int i=1; i < nodes.length - 1; i++) {
      tx.nodeCreate(nodes[i]);
    }
    tx.nodeAddProperty(nodes[3],0,Values.of("old"));
    tx.nodeAddProperty(nodes[4],0,Values.of("old"));
    BatchTransactionApplier applier=new NeoStoreBatchTransactionApplier(neoStores,mock(CacheAccessBackDoor.class),locks);
    apply(applier,transaction(tx));
  }
  reset(locks);
  TransactionRecordState tx=newTransactionRecordState(neoStores);
  tx.nodeCreate(nodes[0]);
  tx.addLabelToNode(0,nodes[1]);
  tx.nodeAddProperty(nodes[2],0,Values.of("value"));
  tx.nodeChangeProperty(nodes[3],0,Values.of("value"));
  tx.nodeRemoveProperty(nodes[4],0);
  tx.nodeDelete(nodes[5]);
  tx.nodeCreate(nodes[6]);
  tx.addLabelToNode(0,nodes[6]);
  tx.nodeAddProperty(nodes[6],0,Values.of("value"));
  BatchTransactionApplier applier=new NeoStoreBatchTransactionApplier(neoStores,mock(CacheAccessBackDoor.class),locks);
  apply(applier,transaction(tx));
  verify(locks,times(1)).acquireNodeLock(nodes[0],LockService.LockType.WRITE_LOCK);
  verify(locks,times(1)).acquireNodeLock(nodes[1],LockService.LockType.WRITE_LOCK);
  verify(locks,times(2)).acquireNodeLock(nodes[2],LockService.LockType.WRITE_LOCK);
  verify(locks,times(1)).acquireNodeLock(nodes[3],LockService.LockType.WRITE_LOCK);
  verify(locks,times(2)).acquireNodeLock(nodes[4],LockService.LockType.WRITE_LOCK);
  verify(locks,times(1)).acquireNodeLock(nodes[5],LockService.LockType.WRITE_LOCK);
  verify(locks,times(2)).acquireNodeLock(nodes[6],LockService.LockType.WRITE_LOCK);
}
