@Test public void shouldCreateEqualEntityPropertyUpdatesOnRecoveryOfCreatedEntities() throws Exception {
  NeoStores neoStores=neoStoresRule.builder().build();
  long nodeId=0;
  long relId=1;
  int labelId=5;
  int relTypeId=4;
  int propertyKeyId=7;
  long nodeRuleId=0;
  TransactionRecordState recordState=newTransactionRecordState(neoStores);
  SchemaRule nodeRule=forSchema(forLabel(labelId,propertyKeyId),PROVIDER_DESCRIPTOR).withId(nodeRuleId);
  recordState.createSchemaRule(nodeRule);
  long relRuleId=1;
  SchemaRule relRule=forSchema(forRelType(relTypeId,propertyKeyId),PROVIDER_DESCRIPTOR).withId(relRuleId);
  recordState.createSchemaRule(relRule);
  apply(neoStores,recordState);
  recordState=newTransactionRecordState(neoStores);
  recordState.nodeCreate(nodeId);
  recordState.addLabelToNode(labelId,nodeId);
  recordState.nodeAddProperty(nodeId,propertyKeyId,Values.of("Neo"));
  recordState.relCreate(relId,relTypeId,nodeId,nodeId);
  recordState.relAddProperty(relId,propertyKeyId,Values.of("Oen"));
  PhysicalTransactionRepresentation transaction=transactionRepresentationOf(recordState);
  PropertyCommandsExtractor extractor=new PropertyCommandsExtractor();
  transaction.accept(extractor);
  assertTrue(extractor.containsAnyEntityOrPropertyUpdate());
  MutableLongSet recoveredNodeIds=new LongHashSet();
  recoveredNodeIds.addAll(extractor.nodeCommandsById().keySet());
  recoveredNodeIds.addAll(extractor.propertyCommandsByNodeIds().keySet());
  assertEquals(1,recoveredNodeIds.size());
  assertEquals(nodeId,recoveredNodeIds.longIterator().next());
  MutableLongSet recoveredRelIds=new LongHashSet();
  recoveredRelIds.addAll(extractor.relationshipCommandsById().keySet());
  recoveredRelIds.addAll(extractor.propertyCommandsByRelationshipIds().keySet());
  assertEquals(1,recoveredRelIds.size());
  assertEquals(relId,recoveredRelIds.longIterator().next());
}
