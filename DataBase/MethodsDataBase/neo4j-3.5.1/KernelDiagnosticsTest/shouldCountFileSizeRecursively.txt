@Test public void shouldCountFileSizeRecursively() throws IOException {
  File indexFile=Mockito.mock(File.class);
  when(indexFile.isDirectory()).thenReturn(false);
  when(indexFile.getName()).thenReturn("indexFile");
  when(indexFile.length()).thenReturn(1024L);
  File indexDir=Mockito.mock(File.class);
  when(indexDir.isDirectory()).thenReturn(true);
  when(indexDir.listFiles()).thenReturn(new File[]{indexFile});
  when(indexDir.getName()).thenReturn("indexDir");
  File dbFile=Mockito.mock(File.class);
  when(dbFile.isDirectory()).thenReturn(false);
  when(dbFile.getName()).thenReturn("store");
  when(dbFile.length()).thenReturn(3 * 1024L);
  File databaseDir=Mockito.mock(File.class);
  DatabaseLayout layout=mock(DatabaseLayout.class);
  when(layout.databaseDirectory()).thenReturn(databaseDir);
  when(layout.labelScanStore()).thenReturn(dbFile);
  when(databaseDir.isDirectory()).thenReturn(true);
  when(databaseDir.listFiles()).thenReturn(new File[]{indexDir,dbFile});
  when(databaseDir.getName()).thenReturn("storeDir");
  when(databaseDir.getAbsolutePath()).thenReturn("/test/storeDir");
  AssertableLogProvider logProvider=new AssertableLogProvider();
  KernelDiagnostics.StoreFiles storeFiles=new KernelDiagnostics.StoreFiles(layout);
  storeFiles.dump(logProvider.getLog(getClass()).debugLogger());
  logProvider.assertContainsMessageContaining("Total size of store: 4.00 kB");
  logProvider.assertContainsMessageContaining("Total size of mapped files: 3.00 kB");
}
