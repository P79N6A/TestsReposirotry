@Test public void shouldCheckUniquenessWhenAddingProperties() throws Exception {
  long nodeConflicting, nodeNotConflicting;
  addConstraints("FOO","prop");
  try (org.neo4j.graphdb.Transaction tx=graphDb.beginTx()){
    Node conflict=graphDb.createNode();
    conflict.addLabel(Label.label("FOO"));
    nodeConflicting=conflict.getId();
    Node ok=graphDb.createNode();
    ok.addLabel(Label.label("BAR"));
    nodeNotConflicting=ok.getId();
    Node existing=graphDb.createNode();
    existing.addLabel(Label.label("FOO"));
    existing.setProperty("prop",1337);
    tx.success();
  }
   int property;
  try (Transaction tx=beginTransaction()){
    property=tx.tokenWrite().propertyKeyGetOrCreateForName("prop");
    tx.dataWrite().nodeSetProperty(nodeNotConflicting,property,intValue(1337));
    try {
      tx.dataWrite().nodeSetProperty(nodeConflicting,property,intValue(1337));
      fail();
    }
 catch (    ConstraintValidationException e) {
    }
    tx.success();
  }
   try (Transaction tx=beginTransaction();NodeCursor nodeCursor=tx.cursors().allocateNodeCursor();PropertyCursor propertyCursor=tx.cursors().allocatePropertyCursor()){
    tx.dataRead().singleNode(nodeNotConflicting,nodeCursor);
    assertTrue(nodeCursor.next());
    nodeCursor.properties(propertyCursor);
    assertTrue(hasKey(propertyCursor,property));
    tx.dataRead().singleNode(nodeConflicting,nodeCursor);
    assertTrue(nodeCursor.next());
    nodeCursor.properties(propertyCursor);
    assertFalse(hasKey(propertyCursor,property));
  }
 }
