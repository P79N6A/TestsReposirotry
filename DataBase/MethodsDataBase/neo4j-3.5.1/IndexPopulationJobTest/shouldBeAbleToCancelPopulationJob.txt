@Test public void shouldBeAbleToCancelPopulationJob() throws Exception {
  createNode(map(name,"Mattias"),FIRST);
  IndexPopulator populator=mock(IndexPopulator.class);
  FlippableIndexProxy index=mock(FlippableIndexProxy.class);
  IndexStoreView storeView=mock(IndexStoreView.class);
  ControlledStoreScan storeScan=new ControlledStoreScan();
  when(storeView.visitNodes(any(int[].class),any(IntPredicate.class),ArgumentMatchers.any(),ArgumentMatchers.<Visitor<NodeLabelUpdate,RuntimeException>>any(),anyBoolean())).thenReturn(storeScan);
  final IndexPopulationJob job=newIndexPopulationJob(populator,index,storeView,NullLogProvider.getInstance(),EntityType.NODE,indexDescriptor(FIRST,name,false));
  OtherThreadExecutor<Void> populationJobRunner=cleanup.add(new OtherThreadExecutor<>("Population job test runner",null));
  Future<Void> runFuture=populationJobRunner.executeDontWait(state -> {
    job.run();
    return null;
  }
);
  storeScan.latch.waitForAllToStart();
  job.cancel().get();
  storeScan.latch.waitForAllToFinish();
  runFuture.get();
  verify(populator,times(1)).close(false);
  verify(index,never()).flip(any(),any());
}
