@Test public void shouldCloseMultiPopulatorOnFailedPopulation(){
  NullLogProvider logProvider=NullLogProvider.getInstance();
  IndexStoreView failingStoreView=new IndexStoreView.Adaptor(){
    @Override public <FAILURE extends Exception>StoreScan<FAILURE> visitNodes(    int[] labelIds,    IntPredicate propertyKeyIdFilter,    Visitor<EntityUpdates,FAILURE> propertyUpdateVisitor,    Visitor<NodeLabelUpdate,FAILURE> labelUpdateVisitor,    boolean forceStoreScan){
      return new StoreScan<FAILURE>(){
        @Override public void run(){
          throw new RuntimeException("Just failing");
        }
        @Override public void stop(){
        }
        @Override public void acceptUpdate(        MultipleIndexPopulator.MultipleIndexUpdater updater,        IndexEntryUpdate<?> update,        long currentlyIndexedNodeId){
        }
        @Override public PopulationProgress getProgress(){
          return null;
        }
      }
;
    }
  }
;
  TrackingMultipleIndexPopulator populator=new TrackingMultipleIndexPopulator(failingStoreView,logProvider,EntityType.NODE,new DatabaseSchemaState(logProvider));
  IndexPopulationJob populationJob=new IndexPopulationJob(populator,NO_MONITOR,false);
  populationJob.run();
  assertTrue(populator.closed);
}
