@Test public void shouldPerformNumericRangeSearch() throws Exception {
  boolean needsValues=indexProvidesNumericValues();
  int label=token.nodeLabel("Node");
  int prop=token.propertyKey("prop");
  IndexReference index=schemaRead.index(label,prop);
  IndexValueCapability numberCapability=index.valueCapability(ValueCategory.NUMBER);
  try (NodeValueIndexCursor node=cursors.allocateNodeValueIndexCursor()){
    MutableLongSet uniqueIds=new LongHashSet();
    read.nodeIndexSeek(index,node,IndexOrder.NONE,needsValues,IndexQuery.range(prop,5,true,12,true));
    assertFoundNodesAndValue(node,uniqueIds,numberCapability,needsValues,num5,num6,num12a,num12b);
    read.nodeIndexSeek(index,node,IndexOrder.NONE,needsValues,IndexQuery.range(prop,5,true,12,false));
    assertFoundNodesAndValue(node,uniqueIds,numberCapability,needsValues,num5,num6);
    read.nodeIndexSeek(index,node,IndexOrder.NONE,needsValues,IndexQuery.range(prop,5,false,12,true));
    assertFoundNodesAndValue(node,uniqueIds,numberCapability,needsValues,num6,num12a,num12b);
    read.nodeIndexSeek(index,node,IndexOrder.NONE,needsValues,IndexQuery.range(prop,5,false,12,false));
    assertFoundNodesAndValue(node,uniqueIds,numberCapability,needsValues,num6);
  }
 }
