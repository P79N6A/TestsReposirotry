@Test public void shouldPerformTemporalRangeSearch() throws KernelException {
  boolean needsValues=indexProvidesTemporalValues();
  int label=token.nodeLabel("Node");
  int prop=token.propertyKey("prop");
  IndexReference index=schemaRead.index(label,prop);
  IndexValueCapability temporalCapability=index.valueCapability(ValueCategory.TEMPORAL);
  try (NodeValueIndexCursor node=cursors.allocateNodeValueIndexCursor()){
    MutableLongSet uniqueIds=new LongHashSet();
    read.nodeIndexSeek(index,node,IndexOrder.NONE,needsValues,IndexQuery.range(prop,DateValue.date(1986,11,18),true,DateValue.date(1989,3,24),true));
    assertFoundNodesAndValue(node,uniqueIds,temporalCapability,needsValues,date86,date891,date892);
    read.nodeIndexSeek(index,node,IndexOrder.NONE,needsValues,IndexQuery.range(prop,DateValue.date(1986,11,18),true,DateValue.date(1989,3,24),false));
    assertFoundNodesAndValue(node,uniqueIds,temporalCapability,needsValues,date86);
    read.nodeIndexSeek(index,node,IndexOrder.NONE,needsValues,IndexQuery.range(prop,DateValue.date(1986,11,18),false,DateValue.date(1989,3,24),true));
    assertFoundNodesAndValue(node,uniqueIds,temporalCapability,needsValues,date891,date892);
    read.nodeIndexSeek(index,node,IndexOrder.NONE,needsValues,IndexQuery.range(prop,DateValue.date(1986,11,18),false,DateValue.date(1989,3,24),false));
    assertFoundNodesAndValue(node,uniqueIds,temporalCapability,needsValues);
  }
 }
