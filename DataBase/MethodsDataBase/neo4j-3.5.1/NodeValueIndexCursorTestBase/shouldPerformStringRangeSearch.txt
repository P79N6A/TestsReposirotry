@Test public void shouldPerformStringRangeSearch() throws Exception {
  boolean needsValues=indexProvidesStringValues();
  int label=token.nodeLabel("Node");
  int prop=token.propertyKey("prop");
  IndexReference index=schemaRead.index(label,prop);
  IndexValueCapability stringCapability=index.valueCapability(ValueCategory.TEXT);
  try (NodeValueIndexCursor node=cursors.allocateNodeValueIndexCursor()){
    MutableLongSet uniqueIds=new LongHashSet();
    read.nodeIndexSeek(index,node,IndexOrder.NONE,needsValues,IndexQuery.range(prop,"one",true,"three",true));
    assertFoundNodesAndValue(node,uniqueIds,stringCapability,needsValues,strOne,strThree1,strThree2,strThree3);
    read.nodeIndexSeek(index,node,IndexOrder.NONE,needsValues,IndexQuery.range(prop,"one",true,"three",false));
    assertFoundNodesAndValue(node,uniqueIds,stringCapability,needsValues,strOne);
    read.nodeIndexSeek(index,node,IndexOrder.NONE,needsValues,IndexQuery.range(prop,"one",false,"three",true));
    assertFoundNodesAndValue(node,uniqueIds,stringCapability,needsValues,strThree1,strThree2,strThree3);
    read.nodeIndexSeek(index,node,IndexOrder.NONE,needsValues,IndexQuery.range(prop,"one",false,"two",false));
    assertFoundNodesAndValue(node,uniqueIds,stringCapability,needsValues,strThree1,strThree2,strThree3);
    read.nodeIndexSeek(index,node,IndexOrder.NONE,needsValues,IndexQuery.range(prop,"one",true,"two",true));
    assertFoundNodesAndValue(node,uniqueIds,stringCapability,needsValues,strOne,strThree1,strThree2,strThree3,strTwo1,strTwo2);
  }
 }
