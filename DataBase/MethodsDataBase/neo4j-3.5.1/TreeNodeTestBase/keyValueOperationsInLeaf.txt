@Test void keyValueOperationsInLeaf(){
  node.initializeLeaf(cursor,STABLE_GENERATION,UNSTABLE_GENERATION);
  KEY readKey=layout.newKey();
  VALUE readValue=layout.newValue();
  KEY firstKey=key(1);
  VALUE firstValue=value(10);
  node.insertKeyValueAt(cursor,firstKey,firstValue,0,0);
  TreeNode.setKeyCount(cursor,1);
  assertKeyEquals(firstKey,node.keyAt(cursor,readKey,0,LEAF));
  assertValueEquals(firstValue,node.valueAt(cursor,readValue,0));
  KEY secondKey=key(3);
  VALUE secondValue=value(30);
  node.insertKeyValueAt(cursor,secondKey,secondValue,1,1);
  TreeNode.setKeyCount(cursor,2);
  assertKeyEquals(firstKey,node.keyAt(cursor,readKey,0,LEAF));
  assertValueEquals(firstValue,node.valueAt(cursor,readValue,0));
  assertKeyEquals(secondKey,node.keyAt(cursor,readKey,1,LEAF));
  assertValueEquals(secondValue,node.valueAt(cursor,readValue,1));
  KEY removedKey=key(2);
  VALUE removedValue=value(20);
  node.insertKeyValueAt(cursor,removedKey,removedValue,1,2);
  TreeNode.setKeyCount(cursor,3);
  assertKeyEquals(firstKey,node.keyAt(cursor,readKey,0,LEAF));
  assertValueEquals(firstValue,node.valueAt(cursor,readValue,0));
  assertKeyEquals(removedKey,node.keyAt(cursor,readKey,1,LEAF));
  assertValueEquals(removedValue,node.valueAt(cursor,readValue,1));
  assertKeyEquals(secondKey,node.keyAt(cursor,readKey,2,LEAF));
  assertValueEquals(secondValue,node.valueAt(cursor,readValue,2));
  node.removeKeyValueAt(cursor,1,3);
  TreeNode.setKeyCount(cursor,2);
  assertKeyEquals(firstKey,node.keyAt(cursor,readKey,0,LEAF));
  assertValueEquals(firstValue,node.valueAt(cursor,readValue,0));
  assertKeyEquals(secondKey,node.keyAt(cursor,readKey,1,LEAF));
  assertValueEquals(secondValue,node.valueAt(cursor,readValue,1));
  VALUE overwriteValue=value(666);
  assertTrue(node.setValueAt(cursor,overwriteValue,0),String.format("Could not overwrite value, oldValue=%s, newValue=%s",firstValue,overwriteValue));
  assertKeyEquals(firstKey,node.keyAt(cursor,readKey,0,LEAF));
  assertValueEquals(overwriteValue,node.valueAt(cursor,readValue,0));
  assertKeyEquals(secondKey,node.keyAt(cursor,readKey,1,LEAF));
  assertValueEquals(secondValue,node.valueAt(cursor,readValue,1));
}
