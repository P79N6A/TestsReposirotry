@Test void keyChildOperationsInInternal(){
  node.initializeInternal(cursor,STABLE_GENERATION,UNSTABLE_GENERATION);
  long stable=3;
  long unstable=4;
  long zeroChild=5;
  node.setChildAt(cursor,zeroChild,0,stable,unstable);
  assertKeysAndChildren(stable,unstable,zeroChild);
  long firstKey=1;
  long firstChild=10;
  node.insertKeyAndRightChildAt(cursor,key(firstKey),firstChild,0,0,stable,unstable);
  TreeNode.setKeyCount(cursor,1);
  assertKeysAndChildren(stable,unstable,zeroChild,firstKey,firstChild);
  long secondKey=3;
  long secondChild=30;
  node.insertKeyAndRightChildAt(cursor,key(secondKey),secondChild,1,1,stable,unstable);
  TreeNode.setKeyCount(cursor,2);
  assertKeysAndChildren(stable,unstable,zeroChild,firstKey,firstChild,secondKey,secondChild);
  long removedKey=2;
  long removedChild=20;
  node.insertKeyAndRightChildAt(cursor,key(removedKey),removedChild,1,2,stable,unstable);
  TreeNode.setKeyCount(cursor,3);
  assertKeysAndChildren(stable,unstable,zeroChild,firstKey,firstChild,removedKey,removedChild,secondKey,secondChild);
  node.removeKeyAndRightChildAt(cursor,1,3);
  TreeNode.setKeyCount(cursor,2);
  assertKeysAndChildren(stable,unstable,zeroChild,firstKey,firstChild,secondKey,secondChild);
  node.removeKeyAndLeftChildAt(cursor,0,2);
  TreeNode.setKeyCount(cursor,1);
  assertKeysAndChildren(stable,unstable,firstChild,secondKey,secondChild);
  long overwriteChild=666;
  node.setChildAt(cursor,overwriteChild,0,stable,unstable);
  assertKeysAndChildren(stable,unstable,overwriteChild,secondKey,secondChild);
}
