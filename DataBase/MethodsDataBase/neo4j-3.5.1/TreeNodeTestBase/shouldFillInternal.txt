@Test void shouldFillInternal(){
  node.initializeInternal(cursor,STABLE_GENERATION,UNSTABLE_GENERATION);
  long stable=3;
  long unstable=4;
  int keyCount=0;
  long childId=10;
  node.setChildAt(cursor,childId,0,stable,unstable);
  childId++;
  KEY key=key(childId);
  for (; node.internalOverflow(cursor,keyCount,key) == Overflow.NO; childId++, keyCount++, key=key(childId)) {
    node.insertKeyAndRightChildAt(cursor,key,childId,keyCount,keyCount,stable,unstable);
  }
  long firstChild=10;
  for (int i=0; i <= keyCount; i++) {
    assertEquals(firstChild + i,pointer(node.childAt(cursor,i,stable,unstable)));
  }
  int firstKey=11;
  KEY readKey=layout.newKey();
  for (int i=0; i < keyCount; i++) {
    assertKeyEquals(key(firstKey + i),node.keyAt(cursor,readKey,i,INTERNAL));
  }
}
