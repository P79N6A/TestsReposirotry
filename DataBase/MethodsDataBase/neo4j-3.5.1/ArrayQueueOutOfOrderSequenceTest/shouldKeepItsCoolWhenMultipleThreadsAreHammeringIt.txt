@Test public void shouldKeepItsCoolWhenMultipleThreadsAreHammeringIt() throws Exception {
  final AtomicLong numberSource=new AtomicLong();
  final OutOfOrderSequence sequence=new ArrayQueueOutOfOrderSequence(numberSource.get(),5,new long[1]);
  final AtomicBoolean end=new AtomicBoolean();
  final CountDownLatch startSignal=new CountDownLatch(1);
  Thread[] threads=new Thread[1];
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(() -> {
      await(startSignal);
      while (!end.get()) {
        long number=numberSource.incrementAndGet();
        offer(sequence,number,new long[]{number + 2});
      }
    }
);
  }
  for (  Thread thread : threads) {
    thread.start();
  }
  startSignal.countDown();
  while (numberSource.get() < 10_000_000) {
    sleep(1);
    yield();
  }
  end.set(true);
  for (  Thread thread : threads) {
    thread.join();
  }
  long lastNumber=numberSource.get();
  assertGet(sequence,lastNumber,new long[]{lastNumber + 2});
}
