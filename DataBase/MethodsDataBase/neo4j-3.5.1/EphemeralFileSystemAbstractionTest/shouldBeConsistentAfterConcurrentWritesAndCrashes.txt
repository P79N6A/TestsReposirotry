@Test void shouldBeConsistentAfterConcurrentWritesAndCrashes() throws Exception {
  ExecutorService executorService=Executors.newCachedThreadPool();
  try (EphemeralFileSystemAbstraction fs=new EphemeralFileSystemAbstraction()){
    File aFile=new File("contendedFile");
    for (int attempt=0; attempt < 100; attempt++) {
      Collection<Callable<Void>> workers=new ArrayList<>();
      for (int i=0; i < 100; i++) {
        workers.add(() -> {
          try {
            StoreChannel channel=fs.open(aFile,OpenMode.READ_WRITE);
            channel.position(0);
            writeLong(channel,1);
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
          return null;
        }
);
        workers.add(() -> {
          fs.crash();
          return null;
        }
);
      }
      List<Future<Void>> futures=executorService.invokeAll(workers);
      for (      Future<Void> future : futures) {
        future.get();
      }
      verifyFileIsEitherEmptyOrContainsLongIntegerValueOne(fs.open(aFile,OpenMode.READ_WRITE));
    }
  }
  finally {
    executorService.shutdown();
  }
}
