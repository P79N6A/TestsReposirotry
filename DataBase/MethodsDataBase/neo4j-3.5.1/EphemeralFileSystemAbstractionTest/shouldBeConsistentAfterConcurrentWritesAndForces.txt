@Test void shouldBeConsistentAfterConcurrentWritesAndForces() throws Exception {
  ExecutorService executorService=Executors.newCachedThreadPool();
  try {
    for (int attempt=0; attempt < 100; attempt++) {
      try (EphemeralFileSystemAbstraction fs=new EphemeralFileSystemAbstraction()){
        File aFile=new File("contendedFile");
        Collection<Callable<Void>> workers=new ArrayList<>();
        for (int i=0; i < 100; i++) {
          workers.add(() -> {
            try {
              StoreChannel channel=fs.open(aFile,OpenMode.READ_WRITE);
              channel.position(channel.size());
              writeLong(channel,1);
            }
 catch (            IOException e) {
              throw new RuntimeException(e);
            }
            return null;
          }
);
          workers.add(() -> {
            StoreChannel channel=fs.open(aFile,OpenMode.READ_WRITE);
            channel.force(true);
            return null;
          }
);
        }
        List<Future<Void>> futures=executorService.invokeAll(workers);
        for (        Future<Void> future : futures) {
          future.get();
        }
        fs.crash();
        verifyFileIsFullOfLongIntegerOnes(fs.open(aFile,OpenMode.READ_WRITE));
      }
     }
  }
  finally {
    executorService.shutdown();
  }
}
