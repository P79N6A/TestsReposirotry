@Test(timeout=TEST_RUN_TIME_MS * 20) public void closeTransaction() throws Throwable {
  BlockingQueue<Boolean> committerToTerminator=new LinkedBlockingQueue<>(1);
  BlockingQueue<TerminatorAction> terminatorToCommitter=new LinkedBlockingQueue<>(1);
  runTwoThreads(tx -> {
    Boolean terminatorShouldAct=committerToTerminator.poll();
    if (terminatorShouldAct != null && terminatorShouldAct) {
      TerminatorAction action=TerminatorAction.random();
      action.executeOn(tx);
      assertTrue(terminatorToCommitter.add(action));
    }
  }
,tx -> {
    tx.initialize();
    CommitterAction committerAction=CommitterAction.random();
    committerAction.executeOn(tx);
    if (committerToTerminator.offer(true)) {
      TerminatorAction terminatorAction;
      try {
        terminatorAction=terminatorToCommitter.poll(1,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        return;
      }
      if (terminatorAction != null) {
        close(tx,committerAction,terminatorAction);
      }
    }
  }
);
}
