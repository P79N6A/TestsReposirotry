@Test public void testMultipleCreate() throws InterruptedException {
  final int numThreads=25;
  final String uuid=UUID.randomUUID().toString();
  final Node commonNode;
  try (Transaction tx=graphDb.beginTx()){
    commonNode=graphDb.createNode();
    tx.success();
  }
   ExecutorCompletionService<Node> ecs=new ExecutorCompletionService<>(Executors.newFixedThreadPool(numThreads));
  for (int i=0; i < numThreads; i++) {
    ecs.submit(() -> {
      try (Transaction tx=graphDb.beginTx()){
        final Node node=graphDb.createNode();
        tx.acquireWriteLock(commonNode);
        Index<Node> index=graphDb.index().forNodes("uuids");
        final Node existing=index.get("uuid",uuid).getSingle();
        if (existing != null) {
          throw new RuntimeException("Node already exists");
        }
        node.setProperty("uuid",uuid);
        index.add(node,"uuid",uuid);
        tx.success();
        return node;
      }
     }
);
  }
  int numSucceeded=0;
  for (int i=0; i < numThreads; i++) {
    try {
      ecs.take().get();
      ++numSucceeded;
    }
 catch (    ExecutionException ignored) {
    }
  }
  assertEquals(1,numSucceeded);
}
