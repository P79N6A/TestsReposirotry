@Test public void shouldComputeDegreeWithType() throws Exception {
  long node;
  int in, out, loop;
  try (Transaction tx=transaction()){
    Write write=tx.dataWrite();
    node=write.nodeCreate();
    TokenWrite tokenWrite=tx.tokenWrite();
    out=tokenWrite.relationshipTypeGetOrCreateForName("OUT");
    in=tokenWrite.relationshipTypeGetOrCreateForName("IN");
    loop=tokenWrite.relationshipTypeGetOrCreateForName("LOOP");
    write.relationshipCreate(node,out,write.nodeCreate());
    write.relationshipCreate(node,out,write.nodeCreate());
    write.relationshipCreate(write.nodeCreate(),in,node);
    write.relationshipCreate(node,loop,node);
    tx.success();
  }
   try (Transaction tx=transaction()){
    Read read=tx.dataRead();
    CursorFactory cursors=tx.cursors();
    try (NodeCursor nodes=cursors.allocateNodeCursor()){
      assertThat(nodeGetDegreeIfDense(read,node,nodes,cursors,OUTGOING,out),equalTo(2));
      assertThat(nodeGetDegreeIfDense(read,node,nodes,cursors,OUTGOING,in),equalTo(0));
      assertThat(nodeGetDegreeIfDense(read,node,nodes,cursors,OUTGOING,loop),equalTo(1));
      assertThat(nodeGetDegreeIfDense(read,node,nodes,cursors,INCOMING,out),equalTo(0));
      assertThat(nodeGetDegreeIfDense(read,node,nodes,cursors,INCOMING,in),equalTo(1));
      assertThat(nodeGetDegreeIfDense(read,node,nodes,cursors,INCOMING,loop),equalTo(1));
      assertThat(nodeGetDegreeIfDense(read,node,nodes,cursors,BOTH,out),equalTo(2));
      assertThat(nodeGetDegreeIfDense(read,node,nodes,cursors,BOTH,in),equalTo(1));
      assertThat(nodeGetDegreeIfDense(read,node,nodes,cursors,BOTH,loop),equalTo(1));
    }
   }
 }
