@Test(timeout=60_000) public void possibleToShutdownDbWhenItIsNotHealthyAndNotAllTransactionsAreApplied() throws Exception {
  ClassGuardedAdversary adversary=new ClassGuardedAdversary(new CountingAdversary(1,true),NodeStore.class);
  adversary.disable();
  GraphDatabaseService db=AdversarialPageCacheGraphDatabaseFactory.create(fs,adversary).newEmbeddedDatabaseBuilder(testDir.databaseDir()).newGraphDatabase();
  CountDownLatch txStartLatch=new CountDownLatch(1);
  CountDownLatch txCommitLatch=new CountDownLatch(1);
  Future<?> result=ForkJoinPool.commonPool().submit(() -> {
    try (Transaction tx=db.beginTx()){
      txStartLatch.countDown();
      db.createNode();
      await(txCommitLatch);
      tx.success();
    }
   }
);
  await(txStartLatch);
  adversary.enable();
  txCommitLatch.countDown();
  try {
    result.get();
    fail("Exception expected");
  }
 catch (  ExecutionException ee) {
    assertThat(ee.getCause(),instanceOf(TransactionFailureException.class));
  }
  adversary.disable();
  db.shutdown();
}
