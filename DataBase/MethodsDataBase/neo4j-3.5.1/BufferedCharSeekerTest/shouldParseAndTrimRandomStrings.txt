@Test public void shouldParseAndTrimRandomStrings() throws IOException {
  StringBuilder builder=new StringBuilder();
  int columns=random.nextInt(10) + 5;
  int lines=100;
  List<String> expected=new ArrayList<>();
  char delimiter=randomDelimiter();
  for (int i=0; i < lines; i++) {
    for (int j=0; j < columns; j++) {
      if (j > 0) {
        if (random.nextBoolean()) {
          builder.append(randomWhitespace(delimiter));
        }
        builder.append(delimiter);
        if (random.nextBoolean()) {
          builder.append(randomWhitespace(delimiter));
        }
      }
      boolean quote=random.nextBoolean();
      if (random.nextBoolean()) {
        String value="";
        if (quote) {
          if (random.nextBoolean()) {
            value+=randomWhitespace(delimiter);
          }
        }
        value+=String.valueOf(random.nextInt());
        if (quote) {
          if (random.nextBoolean()) {
            value+=randomWhitespace(delimiter);
          }
        }
        expected.add(value);
        builder.append(quote ? "\"" + value + "\"" : value);
      }
 else {
        expected.add(null);
      }
    }
    builder.append(format("%n"));
  }
  String data=builder.toString();
  seeker=seeker(data,withTrimStrings(config(),true));
  Iterator<String> next=expected.iterator();
  for (int i=0; i < lines; i++) {
    for (int j=0; j < columns; j++) {
      String nextExpected=next.next();
      if (nextExpected == null) {
        assertNextValueNotExtracted(seeker,mark,delimiter);
      }
 else {
        assertNextValue(seeker,mark,delimiter,nextExpected);
      }
    }
  }
  assertEnd(seeker,mark,delimiter);
}
