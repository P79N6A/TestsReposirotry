@Test void writeLockMustInvalidateExistingReadLock(){
  assertTimeout(ofMillis(SHORT_TIMEOUT_MILLIS),() -> {
    configureStandardPageCache();
    BinaryLatch startLatch=new BinaryLatch();
    BinaryLatch continueLatch=new BinaryLatch();
    try (PagedFile pf=map(existingFile("a"),filePageSize);PageCursor cursor=pf.io(0,PF_SHARED_WRITE_LOCK)){
      assertTrue(cursor.next());
      assertTrue(cursor.next());
      Future<Object> read=executor.submit(() -> {
        try (PageCursor innerCursor=pf.io(0,PF_SHARED_READ_LOCK)){
          assertTrue(innerCursor.next());
          assertFalse(innerCursor.shouldRetry());
          startLatch.release();
          continueLatch.await();
          assertTrue(innerCursor.shouldRetry());
        }
         return null;
      }
);
      startLatch.await();
      assertTrue(cursor.next(0));
      continueLatch.release();
      read.get();
    }
   }
);
}
