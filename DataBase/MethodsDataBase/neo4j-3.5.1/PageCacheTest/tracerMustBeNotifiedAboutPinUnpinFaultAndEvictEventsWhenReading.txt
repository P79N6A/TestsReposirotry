@Test void tracerMustBeNotifiedAboutPinUnpinFaultAndEvictEventsWhenReading(){
  assertTimeout(ofMillis(SHORT_TIMEOUT_MILLIS),() -> {
    DefaultPageCacheTracer tracer=new DefaultPageCacheTracer();
    DefaultPageCursorTracerSupplier cursorTracerSupplier=getCursorTracerSupplier(tracer);
    getPageCache(fs,maxPages,tracer,cursorTracerSupplier);
    generateFileWithRecords(file("a"),recordCount,recordSize);
    long countedPages=0;
    long countedFaults=0;
    try (PagedFile pagedFile=map(file("a"),filePageSize);PageCursor cursor=pagedFile.io(0,PF_SHARED_READ_LOCK)){
      while (cursor.next()) {
        countedPages++;
        countedFaults++;
      }
      countedPages++;
      for (int i=0; i < 20; i++) {
        assertTrue(cursor.next(1));
      }
      for (int i=0; i < 20; i++) {
        assertTrue(cursor.next(i));
        countedPages++;
      }
    }
     pageCache.reportEvents();
    assertThat("wrong count of pins",tracer.pins(),is(countedPages));
    assertThat("wrong count of unpins",tracer.unpins(),is(countedPages));
    long faults=tracer.faults();
    long bytesRead=tracer.bytesRead();
    assertThat("wrong count of faults",faults,greaterThanOrEqualTo(countedFaults));
    assertThat("wrong number of bytes read",bytesRead,greaterThanOrEqualTo(countedFaults * filePageSize));
    assertThat("wrong count of evictions",tracer.evictions(),both(greaterThanOrEqualTo(countedFaults - maxPages)).and(lessThanOrEqualTo(countedPages + faults)));
  }
);
}
