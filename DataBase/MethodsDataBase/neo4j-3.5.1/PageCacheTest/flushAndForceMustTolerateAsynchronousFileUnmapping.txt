@Test void flushAndForceMustTolerateAsynchronousFileUnmapping() throws Exception {
  configureStandardPageCache();
  PageCache pageCache=this.pageCache;
  this.pageCache=null;
  File a=existingFile("a");
  File b=existingFile("b");
  File c=existingFile("c");
  BinaryLatch limiterStartLatch=new BinaryLatch();
  BinaryLatch limiterBlockLatch=new BinaryLatch();
  Future<?> flusher;
  try (PagedFile pfA=map(pageCache,a,filePageSize);PagedFile pfB=map(pageCache,b,filePageSize);PagedFile pfC=map(pageCache,c,filePageSize)){
    try (PageCursor cursor=pfA.io(0,PF_SHARED_WRITE_LOCK)){
      assertTrue(cursor.next());
    }
     try (PageCursor cursor=pfB.io(0,PF_SHARED_WRITE_LOCK)){
      assertTrue(cursor.next());
    }
     try (PageCursor cursor=pfC.io(0,PF_SHARED_WRITE_LOCK)){
      assertTrue(cursor.next());
    }
     flusher=executor.submit(() -> {
      pageCache.flushAndForce((stamp,ios,flushable) -> {
        limiterStartLatch.release();
        limiterBlockLatch.await();
        return 0;
      }
);
      return null;
    }
);
    limiterStartLatch.await();
  }
   limiterBlockLatch.release();
  flusher.get();
}
