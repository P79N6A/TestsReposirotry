@Test void newlyWrittenPagesMustBeAccessibleWithNoGrow(){
  assertTimeout(ofMillis(SHORT_TIMEOUT_MILLIS),() -> {
    configureStandardPageCache();
    int initialPages=1;
    int pagesToAdd=3;
    generateFileWithRecords(file("a"),recordsPerFilePage * initialPages,recordSize);
    PagedFile pagedFile=map(file("a"),filePageSize);
    try (PageCursor cursor=pagedFile.io(1L,PF_SHARED_WRITE_LOCK)){
      for (int i=0; i < pagesToAdd; i++) {
        assertTrue(cursor.next());
        writeRecords(cursor);
      }
    }
     int pagesChecked=0;
    try (PageCursor cursor=pagedFile.io(0L,PF_SHARED_WRITE_LOCK | PF_NO_GROW)){
      while (cursor.next()) {
        verifyRecordsMatchExpected(cursor);
        pagesChecked++;
      }
    }
     assertThat(pagesChecked,is(initialPages + pagesToAdd));
    pagesChecked=0;
    try (PageCursor cursor=pagedFile.io(0L,PF_SHARED_READ_LOCK)){
      while (cursor.next()) {
        verifyRecordsMatchExpected(cursor);
        pagesChecked++;
      }
    }
     assertThat(pagesChecked,is(initialPages + pagesToAdd));
    pagedFile.close();
  }
);
}
