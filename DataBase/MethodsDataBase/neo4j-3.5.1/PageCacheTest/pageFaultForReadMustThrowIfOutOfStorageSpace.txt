@Test void pageFaultForReadMustThrowIfOutOfStorageSpace(){
  try {
    assertTimeout(ofMillis(SEMI_LONG_TIMEOUT_MILLIS),() -> {
      final AtomicInteger writeCounter=new AtomicInteger();
      AtomicBoolean restrictWrites=new AtomicBoolean(true);
      FileSystemAbstraction fs=new DelegatingFileSystemAbstraction(this.fs){
        private final List<StoreChannel> channels=new CopyOnWriteArrayList<>();
        @Override public StoreChannel open(        File fileName,        OpenMode openMode) throws IOException {
          StoreChannel channel=new DelegatingStoreChannel(super.open(fileName,openMode)){
            @Override public void writeAll(            ByteBuffer src,            long position) throws IOException {
              if (restrictWrites.get() && writeCounter.incrementAndGet() >= 1) {
                throw new IOException("No space left on device");
              }
              super.writeAll(src,position);
            }
          }
;
          channels.add(channel);
          return channel;
        }
        @Override public void close() throws IOException {
          IOUtils.closeAll(channels);
          super.close();
        }
      }
;
      getPageCache(fs,maxPages,PageCacheTracer.NULL,PageCursorTracerSupplier.NULL);
      generateFileWithRecords(file("a"),recordCount,recordSize);
      PagedFile pagedFile=map(file("a"),filePageSize);
      try (PageCursor cursor=pagedFile.io(0,PF_SHARED_WRITE_LOCK)){
        assertTrue(cursor.next());
      }
       try (PageCursor cursor=pagedFile.io(0,PF_SHARED_READ_LOCK)){
        for (; ; ) {
          while (cursor.next()) {
          }
          cursor.rewind();
        }
      }
  finally {
        restrictWrites.set(false);
        pagedFile.close();
        pageCache.close();
        fs.close();
      }
    }
);
  }
 catch (  Exception e) {
    assertThat(e,instanceOf(IOException.class));
  }
}
