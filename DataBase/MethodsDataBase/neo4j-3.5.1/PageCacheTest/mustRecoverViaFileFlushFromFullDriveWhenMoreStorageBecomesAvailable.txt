@Test void mustRecoverViaFileFlushFromFullDriveWhenMoreStorageBecomesAvailable() throws Exception {
  final AtomicBoolean hasSpace=new AtomicBoolean();
  final AtomicBoolean hasThrown=new AtomicBoolean();
  FileSystemAbstraction fs=new DelegatingFileSystemAbstraction(this.fs){
    @Override public StoreChannel open(    File fileName,    OpenMode openMode) throws IOException {
      return new DelegatingStoreChannel(super.open(fileName,openMode)){
        @Override public void writeAll(        ByteBuffer src,        long position) throws IOException {
          if (!hasSpace.get()) {
            hasThrown.set(true);
            throw new IOException("No space left on device");
          }
          super.writeAll(src,position);
        }
      }
;
    }
  }
;
  fs.create(file("a")).close();
  getPageCache(fs,maxPages,PageCacheTracer.NULL,PageCursorTracerSupplier.NULL);
  PagedFile pagedFile=map(file("a"),filePageSize);
  try (PageCursor cursor=pagedFile.io(0,PF_SHARED_WRITE_LOCK)){
    while (!hasThrown.get()) {
      assertTrue(cursor.next());
      writeRecords(cursor);
    }
  }
 catch (  IOException ignore) {
  }
  hasSpace.set(true);
  pagedFile.flushAndForce();
  try (PageCursor cursor=pagedFile.io(0,PF_SHARED_READ_LOCK)){
    assertTrue(cursor.next());
  }
   pagedFile.close();
}
