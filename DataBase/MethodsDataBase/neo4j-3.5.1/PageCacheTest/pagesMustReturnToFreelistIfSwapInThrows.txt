@Test void pagesMustReturnToFreelistIfSwapInThrows(){
  assertTimeout(ofMillis(SHORT_TIMEOUT_MILLIS),() -> {
    configureStandardPageCache();
    generateFileWithRecords(file("a"),recordCount,recordSize);
    PagedFile pagedFile=map(file("a"),filePageSize);
    int iterations=maxPages * 2;
    accessPagesWhileInterrupted(pagedFile,PF_SHARED_READ_LOCK,iterations);
    accessPagesWhileInterrupted(pagedFile,PF_SHARED_WRITE_LOCK,iterations);
    Thread.interrupted();
    try (PageCursor cursor=pagedFile.io(0,PF_SHARED_READ_LOCK)){
      assertTrue(cursor.next());
      verifyRecordsMatchExpected(cursor);
    }
     pagedFile.close();
  }
);
}
