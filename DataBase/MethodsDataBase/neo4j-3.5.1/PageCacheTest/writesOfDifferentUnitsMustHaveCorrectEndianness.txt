@Test void writesOfDifferentUnitsMustHaveCorrectEndianness(){
  assertTimeout(ofMillis(SHORT_TIMEOUT_MILLIS),() -> {
    configureStandardPageCache();
    try (PagedFile pagedFile=map(file("a"),23)){
      try (PageCursor cursor=pagedFile.io(0,PF_SHARED_WRITE_LOCK)){
        assertTrue(cursor.next());
        byte[] data={42,43,44,45,46};
        cursor.putLong(41);
        cursor.putInt(41);
        cursor.putShort((short)41);
        cursor.putByte((byte)41);
        cursor.putBytes(data);
        cursor.putBytes(3,(byte)47);
      }
       try (PageCursor cursor=pagedFile.io(0,PF_SHARED_WRITE_LOCK)){
        assertTrue(cursor.next());
        long a=cursor.getLong();
        int b=cursor.getInt();
        short c=cursor.getShort();
        byte[] data=new byte[]{cursor.getByte(),cursor.getByte(),cursor.getByte(),cursor.getByte(),cursor.getByte(),cursor.getByte()};
        byte d=cursor.getByte();
        byte e=cursor.getByte();
        byte f=cursor.getByte();
        cursor.setOffset(0);
        cursor.putLong(1 + a);
        cursor.putInt(1 + b);
        cursor.putShort((short)(1 + c));
        for (        byte g : data) {
          g++;
          cursor.putByte(g);
        }
        cursor.putByte((byte)(1 + d));
        cursor.putByte((byte)(1 + e));
        cursor.putByte((byte)(1 + f));
      }
     }
     ByteBuffer buf=ByteBuffer.allocate(23);
    try (StoreChannel channel=fs.open(file("a"),OpenMode.READ)){
      channel.readAll(buf);
    }
     buf.flip();
    assertThat(buf.getLong(),is(42L));
    assertThat(buf.getInt(),is(42));
    assertThat(buf.getShort(),is((short)42));
    assertThat(buf.get(),is((byte)42));
    assertThat(buf.get(),is((byte)43));
    assertThat(buf.get(),is((byte)44));
    assertThat(buf.get(),is((byte)45));
    assertThat(buf.get(),is((byte)46));
    assertThat(buf.get(),is((byte)47));
    assertThat(buf.get(),is((byte)48));
    assertThat(buf.get(),is((byte)48));
    assertThat(buf.get(),is((byte)48));
  }
);
}
