/** 
 * This is also checked by the UniqueConstraintCompatibility test, only not on this abstraction level.
 */
@Test public void shouldProvidePopulatorThatEnforcesUniqueConstraints() throws Exception {
  Value value=Values.of("value1");
  int nodeId1=1;
  int nodeId2=2;
  withPopulator(indexProvider.getPopulator(descriptor,indexSamplingConfig),p -> {
    try {
      p.add(Arrays.asList(add(nodeId1,descriptor.schema(),value),add(nodeId2,descriptor.schema(),value)));
      TestNodePropertyAccessor propertyAccessor=new TestNodePropertyAccessor(nodeId1,descriptor.schema(),value);
      propertyAccessor.addNode(nodeId2,descriptor.schema(),value);
      p.verifyDeferredConstraints(propertyAccessor);
      fail("expected exception");
    }
 catch (    Exception e) {
      Throwable root=Exceptions.rootCause(e);
      if (root instanceof IndexEntryConflictException) {
        IndexEntryConflictException conflict=(IndexEntryConflictException)root;
        assertEquals(nodeId1,conflict.getExistingNodeId());
        assertEquals(ValueTuple.of(value),conflict.getPropertyValues());
        assertEquals(nodeId2,conflict.getAddedNodeId());
      }
 else {
        throw e;
      }
    }
  }
);
}
