@Test public void listAllIndexes() throws Throwable {
  Transaction transaction=newTransaction(AUTH_DISABLED);
  int labelId1=transaction.tokenWrite().labelGetOrCreateForName("Person");
  int labelId2=transaction.tokenWrite().labelGetOrCreateForName("Age");
  int propertyKeyId1=transaction.tokenWrite().propertyKeyGetOrCreateForName("foo");
  int propertyKeyId2=transaction.tokenWrite().propertyKeyGetOrCreateForName("bar");
  LabelSchemaDescriptor personFooDescriptor=forLabel(labelId1,propertyKeyId1);
  LabelSchemaDescriptor ageFooDescriptor=forLabel(labelId2,propertyKeyId1);
  LabelSchemaDescriptor personFooBarDescriptor=forLabel(labelId1,propertyKeyId1,propertyKeyId2);
  transaction.schemaWrite().indexCreate(personFooDescriptor);
  transaction.schemaWrite().uniquePropertyConstraintCreate(ageFooDescriptor);
  transaction.schemaWrite().indexCreate(personFooBarDescriptor);
  commit();
  try (org.neo4j.graphdb.Transaction tx=db.beginTx()){
    db.schema().awaitIndexesOnline(2,MINUTES);
    tx.success();
  }
   RawIterator<Object[],ProcedureException> stream=procs().procedureCallRead(procs().procedureGet(procedureName("db","indexes")).id(),new Object[0]);
  Set<Object[]> result=new HashSet<>();
  while (stream.hasNext()) {
    result.add(stream.next());
  }
  IndexProviderMap indexProviderMap=db.getDependencyResolver().resolveDependency(IndexProviderMap.class);
  IndexingService indexingService=db.getDependencyResolver().resolveDependency(IndexingService.class);
  IndexProvider provider=indexProviderMap.getDefaultProvider();
  Map<String,String> pdm=MapUtil.stringMap("key",provider.getProviderDescriptor().getKey(),"version",provider.getProviderDescriptor().getVersion());
  assertThat(result,containsInAnyOrder(new Object[]{"INDEX ON :Age(foo)","index_1",singletonList("Age"),singletonList("foo"),"ONLINE","node_unique_property",100D,pdm,indexingService.getIndexId(ageFooDescriptor),""},new Object[]{"INDEX ON :Person(foo)","Unnamed index",singletonList("Person"),singletonList("foo"),"ONLINE","node_label_property",100D,pdm,indexingService.getIndexId(personFooDescriptor),""},new Object[]{"INDEX ON :Person(foo, bar)","Unnamed index",singletonList("Person"),Arrays.asList("foo","bar"),"ONLINE","node_label_property",100D,pdm,indexingService.getIndexId(personFooBarDescriptor),""}));
  commit();
}
