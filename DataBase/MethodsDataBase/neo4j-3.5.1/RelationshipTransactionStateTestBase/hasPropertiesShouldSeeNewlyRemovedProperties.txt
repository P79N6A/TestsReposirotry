@Test public void hasPropertiesShouldSeeNewlyRemovedProperties() throws Exception {
  long relationship;
  int prop1, prop2, prop3;
  try (Transaction tx=beginTransaction()){
    Write write=tx.dataWrite();
    int token=tx.tokenWrite().relationshipTypeGetOrCreateForName("R");
    relationship=write.relationshipCreate(write.nodeCreate(),token,write.nodeCreate());
    prop1=tx.tokenWrite().propertyKeyGetOrCreateForName("prop1");
    prop2=tx.tokenWrite().propertyKeyGetOrCreateForName("prop2");
    prop3=tx.tokenWrite().propertyKeyGetOrCreateForName("prop3");
    tx.dataWrite().relationshipSetProperty(relationship,prop1,longValue(1));
    tx.dataWrite().relationshipSetProperty(relationship,prop2,longValue(2));
    tx.dataWrite().relationshipSetProperty(relationship,prop3,longValue(3));
    tx.success();
  }
   try (Transaction tx=beginTransaction()){
    try (RelationshipScanCursor cursor=tx.cursors().allocateRelationshipScanCursor()){
      tx.dataRead().singleRelationship(relationship,cursor);
      assertTrue(cursor.next());
      assertTrue(hasProperties(cursor,tx));
      tx.dataWrite().relationshipRemoveProperty(relationship,prop1);
      assertTrue(hasProperties(cursor,tx));
      tx.dataWrite().relationshipRemoveProperty(relationship,prop2);
      assertTrue(hasProperties(cursor,tx));
      tx.dataWrite().relationshipRemoveProperty(relationship,prop3);
      assertFalse(hasProperties(cursor,tx));
    }
   }
 }
