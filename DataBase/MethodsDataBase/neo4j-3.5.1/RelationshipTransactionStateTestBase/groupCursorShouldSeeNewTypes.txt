@Test public void groupCursorShouldSeeNewTypes() throws Exception {
  try (Transaction tx=beginTransaction()){
    Write write=tx.dataWrite();
    long start=write.nodeCreate();
    int outgoing=tx.tokenWrite().relationshipTypeGetOrCreateForName("OUT");
    int incoming=tx.tokenWrite().relationshipTypeGetOrCreateForName("IN");
    int looping=tx.tokenWrite().relationshipTypeGetOrCreateForName("LOOP");
    long out=write.relationshipCreate(start,outgoing,write.nodeCreate());
    long in1=write.relationshipCreate(write.nodeCreate(),incoming,start);
    long in2=write.relationshipCreate(write.nodeCreate(),incoming,start);
    long loop=write.relationshipCreate(start,looping,start);
    try (NodeCursor node=tx.cursors().allocateNodeCursor();RelationshipTraversalCursor traversal=tx.cursors().allocateRelationshipTraversalCursor();RelationshipGroupCursor group=tx.cursors().allocateRelationshipGroupCursor()){
      Read read=tx.dataRead();
      read.singleNode(start,node);
      assertTrue(node.next());
      node.relationships(group);
      while (group.next()) {
        int t=group.type();
        if (t == outgoing) {
          assertEquals(1,group.outgoingCount());
          assertEquals(0,group.incomingCount());
          assertEquals(0,group.loopCount());
          assertRelationships(OUT,group,traversal,out);
          assertNoRelationships(IN,group,traversal);
          assertNoRelationships(LOOP,group,traversal);
        }
 else         if (t == incoming) {
          assertEquals(0,group.outgoingCount());
          assertEquals(2,group.incomingCount());
          assertEquals(0,group.loopCount());
          assertRelationships(IN,group,traversal,in1,in2);
          assertNoRelationships(OUT,group,traversal);
          assertNoRelationships(LOOP,group,traversal);
        }
 else         if (t == looping) {
          assertEquals(0,group.outgoingCount());
          assertEquals(0,group.incomingCount());
          assertEquals(1,group.loopCount());
          assertRelationships(LOOP,group,traversal,loop);
          assertNoRelationships(OUT,group,traversal);
          assertNoRelationships(IN,group,traversal);
        }
 else {
          fail(t + "  is not the type you're looking for ");
        }
      }
    }
   }
 }
