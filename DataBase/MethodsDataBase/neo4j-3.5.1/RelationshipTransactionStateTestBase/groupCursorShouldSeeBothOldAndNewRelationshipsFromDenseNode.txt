@Test public void groupCursorShouldSeeBothOldAndNewRelationshipsFromDenseNode() throws Exception {
  long start;
  long existingRelationship;
  int one, bulk;
  try (Transaction tx=beginTransaction()){
    Write write=tx.dataWrite();
    start=write.nodeCreate();
    one=tx.tokenWrite().relationshipTypeGetOrCreateForName("ONE");
    existingRelationship=write.relationshipCreate(start,one,write.nodeCreate());
    bulk=tx.tokenWrite().relationshipTypeGetOrCreateForName("BULK");
    for (int i=0; i < 100; i++) {
      write.relationshipCreate(start,bulk,write.nodeCreate());
    }
    tx.success();
  }
   try (Transaction tx=beginTransaction()){
    Write write=tx.dataWrite();
    int two=tx.tokenWrite().relationshipTypeGetOrCreateForName("TWO");
    long newRelationship=write.relationshipCreate(start,two,write.nodeCreate());
    try (NodeCursor node=tx.cursors().allocateNodeCursor();RelationshipTraversalCursor traversal=tx.cursors().allocateRelationshipTraversalCursor();RelationshipGroupCursor group=tx.cursors().allocateRelationshipGroupCursor()){
      Read read=tx.dataRead();
      read.singleNode(start,node);
      assertTrue(node.next());
      assertTrue(node.isDense());
      node.relationships(group);
      while (group.next()) {
        int t=group.type();
        if (t == one) {
          assertEquals(1,group.outgoingCount());
          assertEquals(0,group.incomingCount());
          assertEquals(0,group.loopCount());
          assertRelationships(OUT,group,traversal,existingRelationship);
        }
 else         if (t == two) {
          assertEquals(1,group.outgoingCount());
          assertEquals(0,group.incomingCount());
          assertEquals(0,group.loopCount());
          assertRelationships(OUT,group,traversal,newRelationship);
        }
 else         if (t == bulk) {
          assertEquals(100,group.outgoingCount());
          assertEquals(0,group.incomingCount());
          assertEquals(0,group.loopCount());
        }
 else {
          fail(t + "  is not the type you're looking for ");
        }
      }
    }
   }
 }
