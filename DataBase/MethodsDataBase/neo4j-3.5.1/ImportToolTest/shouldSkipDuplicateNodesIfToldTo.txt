@Test public void shouldSkipDuplicateNodesIfToldTo() throws Exception {
  List<String> nodeIds=asList("a","b","c","d","e","f","a","g");
  Configuration config=Configuration.COMMAS;
  File nodeHeaderFile=nodeHeader(config);
  File nodeData1=nodeData(false,config,nodeIds,lines(0,4));
  File nodeData2=nodeData(false,config,nodeIds,lines(4,nodeIds.size()));
  importTool("--into",dbRule.getDatabaseDirAbsolutePath(),"--skip-duplicate-nodes","--nodes",nodeHeaderFile.getAbsolutePath() + MULTI_FILE_DELIMITER + nodeData1.getAbsolutePath()+ MULTI_FILE_DELIMITER+ nodeData2.getAbsolutePath());
  GraphDatabaseService db=dbRule.getGraphDatabaseAPI();
  Set<String> expectedNodeIds=new HashSet<>(nodeIds);
  try (Transaction tx=db.beginTx()){
    Set<String> foundNodesIds=new HashSet<>();
    for (    Node node : db.getAllNodes()) {
      String id=(String)node.getProperty("id");
      assertTrue(id + ", " + foundNodesIds,foundNodesIds.add(id));
      assertTrue(expectedNodeIds.contains(id));
    }
    assertEquals(expectedNodeIds,foundNodesIds);
    for (int i=0; i < MAX_LABEL_ID; i++) {
      Label label=label(labelName(i));
      try (ResourceIterator<Node> nodesByLabel=db.findNodes(label)){
        while (nodesByLabel.hasNext()) {
          Node node=nodesByLabel.next();
          if (!node.hasLabel(label)) {
            fail("Expected " + node + " to have label "+ label.name()+ ", but instead had "+ asList(node.getLabels()));
          }
        }
      }
     }
    tx.success();
  }
  finally {
    db.shutdown();
  }
}
