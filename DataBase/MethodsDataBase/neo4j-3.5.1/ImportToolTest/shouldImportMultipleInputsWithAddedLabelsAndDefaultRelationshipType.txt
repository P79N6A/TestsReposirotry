@Test public void shouldImportMultipleInputsWithAddedLabelsAndDefaultRelationshipType() throws Exception {
  List<String> nodeIds=nodeIds();
  Configuration config=Configuration.COMMAS;
  final String[] firstLabels={"AddedOne","AddedTwo"};
  final String[] secondLabels={"AddedThree"};
  final String firstType="TYPE_1";
  final String secondType="TYPE_2";
  importTool("--into",dbRule.getDatabaseDirAbsolutePath(),"--nodes:" + join(firstLabels,":"),nodeData(true,config,nodeIds,lines(0,NODE_COUNT / 2)).getAbsolutePath(),"--nodes:" + join(secondLabels,":"),nodeData(true,config,nodeIds,lines(NODE_COUNT / 2,NODE_COUNT)).getAbsolutePath(),"--relationships:" + firstType,relationshipData(true,config,nodeIds,lines(0,RELATIONSHIP_COUNT / 2),false).getAbsolutePath(),"--relationships:" + secondType,relationshipData(true,config,nodeIds,lines(RELATIONSHIP_COUNT / 2,RELATIONSHIP_COUNT),false).getAbsolutePath());
  MutableInt numberOfNodesWithFirstSetOfLabels=new MutableInt();
  MutableInt numberOfNodesWithSecondSetOfLabels=new MutableInt();
  MutableInt numberOfRelationshipsWithFirstType=new MutableInt();
  MutableInt numberOfRelationshipsWithSecondType=new MutableInt();
  verifyData(node -> {
    if (nodeHasLabels(node,firstLabels)) {
      numberOfNodesWithFirstSetOfLabels.increment();
    }
 else     if (nodeHasLabels(node,secondLabels)) {
      numberOfNodesWithSecondSetOfLabels.increment();
    }
 else {
      fail(node + " has neither set of labels, it has " + labelsOf(node));
    }
  }
,relationship -> {
    if (relationship.isType(RelationshipType.withName(firstType))) {
      numberOfRelationshipsWithFirstType.increment();
    }
 else     if (relationship.isType(RelationshipType.withName(secondType))) {
      numberOfRelationshipsWithSecondType.increment();
    }
 else {
      fail(relationship + " didn't have either type, it has " + relationship.getType().name());
    }
  }
);
  assertEquals(NODE_COUNT / 2,numberOfNodesWithFirstSetOfLabels.intValue());
  assertEquals(NODE_COUNT / 2,numberOfNodesWithSecondSetOfLabels.intValue());
  assertEquals(RELATIONSHIP_COUNT / 2,numberOfRelationshipsWithFirstType.intValue());
  assertEquals(RELATIONSHIP_COUNT / 2,numberOfRelationshipsWithSecondType.intValue());
}
