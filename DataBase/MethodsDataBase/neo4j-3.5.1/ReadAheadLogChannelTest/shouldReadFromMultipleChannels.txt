@Test public void shouldReadFromMultipleChannels() throws Exception {
  writeSomeData(file(0),element -> {
    for (int i=0; i < 10; i++) {
      element.putLong(i);
    }
    return true;
  }
);
  writeSomeData(file(1),element -> {
    for (int i=10; i < 20; i++) {
      element.putLong(i);
    }
    return true;
  }
);
  StoreChannel storeChannel=fileSystemRule.get().open(file(0),OpenMode.READ);
  PhysicalLogVersionedStoreChannel versionedStoreChannel=new PhysicalLogVersionedStoreChannel(storeChannel,-1,(byte)-1);
  try (ReadAheadLogChannel channel=new ReadAheadLogChannel(versionedStoreChannel,new LogVersionBridge(){
    private boolean returned;
    @Override public LogVersionedStoreChannel next(    LogVersionedStoreChannel channel) throws IOException {
      if (!returned) {
        returned=true;
        channel.close();
        return new PhysicalLogVersionedStoreChannel(fileSystemRule.get().open(file(1),OpenMode.READ),-1,(byte)-1);
      }
      return channel;
    }
  }
,10)){
    for (long i=0; i < 20; i++) {
      assertEquals(i,channel.getLong());
    }
  }
 }
