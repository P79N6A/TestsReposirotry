@Test public void validates_supported_generic_types(){
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(Map.class,String.class,Object.class))).isTrue();
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(HashMap.class,String.class,Object.class))).isTrue();
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(LinkedHashMap.class,String.class,Object.class))).isTrue();
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(List.class,String.class))).isTrue();
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(LinkedList.class,Number.class))).isTrue();
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(ArrayList.class,Long.class))).isTrue();
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(List.class,Double.class))).isTrue();
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(List.class,Boolean.class))).isTrue();
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(List.class,Path.class))).isTrue();
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(List.class,Node.class))).isTrue();
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(List.class,Relationship.class))).isTrue();
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(List.class,Object.class))).isTrue();
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(List.class,typeMirrorTestUtils().typeOf(Map.class,String.class,Object.class)))).isTrue();
  assertThat(visitor().visit(typeMirrorTestUtils().typeOf(List.class,typeMirrorTestUtils().typeOf(LinkedList.class,Long.class)))).isTrue();
}
