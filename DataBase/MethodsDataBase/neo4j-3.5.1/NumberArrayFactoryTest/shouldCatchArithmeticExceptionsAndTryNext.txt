@Test public void shouldCatchArithmeticExceptionsAndTryNext(){
  NumberArrayFactory throwingMemoryFactory=mock(NumberArrayFactory.class);
  ArithmeticException failure=new ArithmeticException("This is an artificial failure");
  doThrow(failure).when(throwingMemoryFactory).newByteArray(anyLong(),any(byte[].class),anyLong());
  FailureMonitor monitor=new FailureMonitor();
  NumberArrayFactory factory=new NumberArrayFactory.Auto(monitor,throwingMemoryFactory,NumberArrayFactory.HEAP);
  int itemSize=4;
  ByteArray array=factory.newByteArray(KILO,new byte[itemSize],0);
  array.setInt(KILO - 10,0,12345);
  verify(throwingMemoryFactory,times(1)).newByteArray(eq(KILO),any(byte[].class),eq(0L));
  assertTrue(array instanceof HeapByteArray);
  assertEquals(12345,array.getInt(KILO - 10,0));
  assertEquals(KILO * itemSize,monitor.memory);
  assertEquals(NumberArrayFactory.HEAP,monitor.successfulFactory);
  assertEquals(throwingMemoryFactory,single(monitor.attemptedAllocationFailures).getFactory());
  assertThat(single(monitor.attemptedAllocationFailures).getFailure().getMessage(),containsString(failure.getMessage()));
}
