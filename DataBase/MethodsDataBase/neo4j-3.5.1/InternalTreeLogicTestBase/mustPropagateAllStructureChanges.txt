@Test public void mustPropagateAllStructureChanges() throws Exception {
  assumeTrue("No checkpointing, no successor",isCheckpointing);
  initialize();
  long key=10;
  while (numberOfRootSplits == 0) {
    insert(key(key),value(key));
    key++;
  }
  for (long smallKey=0; smallKey < 2; smallKey++) {
    insert(key(smallKey),value(smallKey));
  }
  goTo(readCursor,rootId);
  KEY oldPrimKey=keyAt(0,INTERNAL);
  long originalLeftChild=childAt(readCursor,0,stableGeneration,unstableGeneration);
  long originalRightChild=childAt(readCursor,1,stableGeneration,unstableGeneration);
  goTo(readCursor,originalRightChild);
  List<KEY> keysInRightChild=allKeys(readCursor,LEAF);
  generationManager.checkpoint();
  int index=0;
  long rightChild;
  KEY originalLeftmost=keysInRightChild.get(0);
  KEY leftmostInRightChild;
  do {
    remove(keysInRightChild.get(index),dontCare);
    index++;
    goTo(readCursor,rootId);
    rightChild=childAt(readCursor,1,stableGeneration,unstableGeneration);
    goTo(readCursor,rightChild);
    leftmostInRightChild=keyAt(0,LEAF);
  }
 while (layout.compare(leftmostInRightChild,originalLeftmost) >= 0);
  goTo(readCursor,rootId);
  KEY primKey=keyAt(0,INTERNAL);
  assertEqualsKey(primKey,leftmostInRightChild);
  assertNotEqualsKey(primKey,oldPrimKey);
  long newLeftChild=childAt(readCursor,0,stableGeneration,unstableGeneration);
  long newRightChild=childAt(readCursor,1,stableGeneration,unstableGeneration);
  assertThat(newLeftChild,is(not(originalLeftChild)));
  assertThat(newRightChild,is(not(originalRightChild)));
}
