@Test public void shouldCreateNewVersionWhenInsertInStableRootAsInternal() throws Exception {
  assumeTrue("No checkpointing, no successor",isCheckpointing);
  initialize();
  int keyCount=0;
  KEY key=key(keyCount);
  VALUE value=value(keyCount);
  while (node.leafOverflow(cursor,keyCount,key,value) == NO) {
    insert(key,value);
    keyCount++;
    key=key(keyCount);
    value=value(keyCount);
  }
  insert(key,value);
  keyCount++;
  key=key(keyCount);
  value=value(keyCount);
  goTo(readCursor,rootId);
  long rightChild=childAt(readCursor,1,stableGeneration,unstableGeneration);
  goTo(readCursor,rightChild);
  int rightChildKeyCount=TreeNode.keyCount(readCursor);
  while (node.leafOverflow(readCursor,rightChildKeyCount,key,value) == NO) {
    insert(key,value);
    keyCount++;
    rightChildKeyCount++;
    key=key(keyCount);
    value=value(keyCount);
  }
  long oldRootId=rootId;
  goTo(readCursor,rootId);
  assertEquals(1,keyCount());
  long leftChild=childAt(readCursor,0,stableGeneration,unstableGeneration);
  assertSiblings(leftChild,rightChild,TreeNode.NO_NODE_FLAG);
  generationManager.checkpoint();
  insert(key,value);
  assertEquals(1,numberOfRootSuccessors);
  goTo(readCursor,rootId);
  leftChild=childAt(readCursor,0,stableGeneration,unstableGeneration);
  rightChild=childAt(readCursor,1,stableGeneration,unstableGeneration);
  long farRightChild=childAt(readCursor,2,stableGeneration,unstableGeneration);
  assertSiblings(leftChild,rightChild,farRightChild);
  goTo(readCursor,oldRootId);
  assertEquals(rootId,successor(readCursor,stableGeneration,unstableGeneration));
}
