@Test public void mustPropagateStructureWhenMergingBetweenDifferentSubtrees() throws Exception {
  initialize();
  long i=0;
  while (numberOfRootSplits < 2) {
    insert(key(i),value(i));
    i++;
  }
  goTo(readCursor,rootId);
  long oldLeft=rightmostLeafInSubtree(rootId,0);
  long oldRight=leftmostLeafInSubtree(rootId,1);
  KEY oldSplitter=keyAt(0,INTERNAL);
  KEY rightmostKeyInLeftSubtree=rightmostInternalKeyInSubtree(rootId,0);
  ArrayList<KEY> allKeysInOldLeftAndOldRight=new ArrayList<>();
  goTo(readCursor,oldLeft);
  allKeys(readCursor,allKeysInOldLeftAndOldRight,LEAF);
  goTo(readCursor,oldRight);
  allKeys(readCursor,allKeysInOldLeftAndOldRight,LEAF);
  KEY keyInOldRight=keyAt(0,LEAF);
  generationManager.checkpoint();
  remove(keyInOldRight,dontCare);
  remove(keyInOldRight,allKeysInOldLeftAndOldRight,layout);
  goTo(readCursor,rootId);
  KEY newSplitter=keyAt(0,INTERNAL);
  assertNotEqualsKey(newSplitter,oldSplitter);
  assertEqualsKey(newSplitter,rightmostKeyInLeftSubtree);
  KEY newRightmostInternalKeyInLeftSubtree=rightmostInternalKeyInSubtree(rootId,0);
  assertNotEqualsKey(newRightmostInternalKeyInLeftSubtree,rightmostKeyInLeftSubtree);
  goToSuccessor(readCursor,oldRight);
  List<KEY> allKeysInNewRight=allKeys(readCursor,LEAF);
  assertThat(allKeysInNewRight.size(),is(allKeysInOldLeftAndOldRight.size()));
  for (int index=0; index < allKeysInOldLeftAndOldRight.size(); index++) {
    assertEqualsKey(allKeysInOldLeftAndOldRight.get(index),allKeysInNewRight.get(index));
  }
}
