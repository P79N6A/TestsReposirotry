@Test public void mustNotRebalanceFromRightToLeft() throws Exception {
  initialize();
  long key=0;
  while (numberOfRootSplits == 0) {
    insert(key(key),value(key));
    key++;
  }
  insert(key(key),value(key));
  key++;
  goTo(readCursor,rootId);
  KEY primKey=keyAt(0,INTERNAL);
  long rightChild=childAt(readCursor,1,stableGeneration,unstableGeneration);
  goTo(readCursor,rightChild);
  int expectedKeyCount=TreeNode.keyCount(readCursor);
  for (long i=0; ; i++) {
    KEY removeKey=key(i);
    if (layout.compare(removeKey,primKey) >= 0) {
      break;
    }
    remove(removeKey,dontCare);
  }
  goTo(readCursor,rightChild);
  int actualKeyCount=TreeNode.keyCount(readCursor);
  assertEquals("actualKeyCount=" + actualKeyCount + ", expectedKeyCount="+ expectedKeyCount,expectedKeyCount,actualKeyCount);
  assertEquals("same seed",getSeed(primKey),getSeed(keyAt(0,LEAF)));
}
