@Test public void shouldCreateNewVersionWhenRemoveInStableLeaf() throws Exception {
  assumeTrue("No checkpointing, no successor",isCheckpointing);
  initialize();
  long targetLastId=id.lastId() + 3;
  long i=0;
  for (; id.lastId() < targetLastId; i+=2) {
    insert(key(i),value(i));
  }
  goTo(readCursor,rootId);
  assertEquals(2,keyCount());
  long leftChild=childAt(readCursor,0,stableGeneration,unstableGeneration);
  long middleChild=childAt(readCursor,1,stableGeneration,unstableGeneration);
  long rightChild=childAt(readCursor,2,stableGeneration,unstableGeneration);
  goTo(readCursor,middleChild);
  KEY firstKeyInMiddleChild=keyAt(0,LEAF);
  VALUE firstValueInMiddleChild=valueAt(0);
  long seed=getSeed(firstKeyInMiddleChild);
  insert(key(seed + 1),value(seed + 1));
  insert(key(seed + 3),value(seed + 3));
  goTo(readCursor,rootId);
  assertSiblings(leftChild,middleChild,rightChild);
  generationManager.checkpoint();
  assertNotNull(remove(firstKeyInMiddleChild,dontCare));
  long expectedNewMiddleChild=targetLastId + 1;
  assertEquals(expectedNewMiddleChild,id.lastId());
  long newMiddleChild=childAt(readCursor,1,stableGeneration,unstableGeneration);
  assertEquals(expectedNewMiddleChild,newMiddleChild);
  goTo(readCursor,middleChild);
  assertEquals(newMiddleChild,successor(readCursor,stableGeneration,unstableGeneration));
  assertKeyAssociatedWithValue(firstKeyInMiddleChild,firstValueInMiddleChild);
  goTo(readCursor,newMiddleChild);
  assertKeyNotFound(firstKeyInMiddleChild,LEAF);
  assertSiblings(leftChild,newMiddleChild,rightChild);
}
