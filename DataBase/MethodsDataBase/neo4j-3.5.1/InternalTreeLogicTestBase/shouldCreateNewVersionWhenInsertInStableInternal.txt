@Test public void shouldCreateNewVersionWhenInsertInStableInternal() throws Exception {
  assumeTrue("No checkpointing, no successor",isCheckpointing);
  initialize();
  long someHighMultiplier=1000;
  for (int i=0; numberOfRootSplits < 2; i++) {
    long seed=i * someHighMultiplier;
    insert(key(seed),value(seed));
  }
  long rootAfterInitialData=rootId;
  goTo(readCursor,rootId);
  assertEquals(1,keyCount());
  long leftInternal=childAt(readCursor,0,stableGeneration,unstableGeneration);
  long rightInternal=childAt(readCursor,1,stableGeneration,unstableGeneration);
  assertSiblings(leftInternal,rightInternal,TreeNode.NO_NODE_FLAG);
  goTo(readCursor,leftInternal);
  int leftInternalKeyCount=keyCount();
  assertTrue(TreeNode.isInternal(readCursor));
  long leftLeaf=childAt(readCursor,0,stableGeneration,unstableGeneration);
  goTo(readCursor,leftLeaf);
  KEY firstKeyInLeaf=keyAt(0,LEAF);
  long seedOfFirstKeyInLeaf=getSeed(firstKeyInLeaf);
  generationManager.checkpoint();
  long targetLastId=id.lastId() + 3;
  for (int i=0; id.lastId() < targetLastId; i++) {
    insert(key(seedOfFirstKeyInLeaf + i),value(seedOfFirstKeyInLeaf + i));
    assertFalse(structurePropagation.hasRightKeyInsert);
  }
  assertEquals(rootAfterInitialData,rootId);
  goTo(readCursor,rootId);
  long successorLeftInternal=id.lastId();
  assertEquals(successorLeftInternal,childAt(readCursor,0,stableGeneration,unstableGeneration));
  goTo(readCursor,successorLeftInternal);
  int successorLeftInternalKeyCount=keyCount();
  assertEquals(leftInternalKeyCount + 1,successorLeftInternalKeyCount);
  goTo(readCursor,leftInternal);
  assertEquals(successorLeftInternal,successor(readCursor,stableGeneration,unstableGeneration));
  assertSiblings(successorLeftInternal,rightInternal,TreeNode.NO_NODE_FLAG);
}
