@Test public void longRunningScheduledJobsMustNotDelayOtherLongRunningJobs(){
  life.start();
  List<JobHandle> handles=new ArrayList<>(30);
  AtomicLong startedCounter=new AtomicLong();
  BinaryLatch blockLatch=new BinaryLatch();
  Runnable task=() -> {
    startedCounter.incrementAndGet();
    blockLatch.await();
  }
;
  for (int i=0; i < 10; i++) {
    handles.add(scheduler.schedule(Group.INDEX_POPULATION,task,0,TimeUnit.MILLISECONDS));
  }
  for (int i=0; i < 10; i++) {
    handles.add(scheduler.scheduleRecurring(Group.INDEX_POPULATION,task,Integer.MAX_VALUE,TimeUnit.MILLISECONDS));
  }
  for (int i=0; i < 10; i++) {
    handles.add(scheduler.scheduleRecurring(Group.INDEX_POPULATION,task,0,Integer.MAX_VALUE,TimeUnit.MILLISECONDS));
  }
  long deadline=TimeUnit.SECONDS.toNanos(10) + System.nanoTime();
  do {
    if (startedCounter.get() == handles.size()) {
      blockLatch.release();
      for (      JobHandle handle : handles) {
        handle.cancel(false);
      }
      return;
    }
  }
 while (System.nanoTime() < deadline);
  fail("Only managed to start " + startedCounter.get() + " tasks in 10 seconds, when "+ handles.size()+ " was expected.");
}
