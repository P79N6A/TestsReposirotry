@Test public void shouldSucceedWithUpgradeAfterPreviousAttemptDiedDuringMovingFiles() throws IOException, ConsistencyCheckIncompleteException {
  MigrationTestUtils.prepareSampleLegacyDatabase(version,fs,workingDatabaseLayout.databaseDirectory(),prepareDirectory);
  PageCache pageCache=pageCacheRule.getPageCache(fs);
  StoreVersionCheck check=new StoreVersionCheck(pageCache);
  UpgradableDatabase upgradableDatabase=getUpgradableDatabase(check);
  SilentMigrationProgressMonitor progressMonitor=new SilentMigrationProgressMonitor();
  LogService logService=NullLogService.getInstance();
  StoreMigrator failingStoreMigrator=new StoreMigrator(fs,pageCache,CONFIG,logService,jobScheduler){
    @Override public void moveMigratedFiles(    DatabaseLayout migrationLayout,    DatabaseLayout directoryLayout,    String versionToUpgradeFrom,    String versionToMigrateTo) throws IOException {
      super.moveMigratedFiles(migrationLayout,directoryLayout,versionToUpgradeFrom,versionToMigrateTo);
      throw new RuntimeException("This upgrade is failing");
    }
  }
;
  try {
    newUpgrader(upgradableDatabase,pageCache,progressMonitor,createIndexMigrator(),failingStoreMigrator).migrateIfNeeded(workingDatabaseLayout);
    fail("Should throw exception");
  }
 catch (  RuntimeException e) {
    assertEquals("This upgrade is failing",e.getMessage());
  }
  assertTrue(checkNeoStoreHasDefaultFormatVersion(check,workingDatabaseLayout));
  progressMonitor=new SilentMigrationProgressMonitor();
  StoreMigrator migrator=new StoreMigrator(fs,pageCache,CONFIG,logService,jobScheduler);
  newUpgrader(upgradableDatabase,pageCache,progressMonitor,createIndexMigrator(),migrator).migrateIfNeeded(workingDatabaseLayout);
  assertTrue(checkNeoStoreHasDefaultFormatVersion(check,workingDatabaseLayout));
  pageCache.close();
  startStopDatabase(workingDatabaseLayout.databaseDirectory());
  assertConsistentStore(workingDatabaseLayout);
}
