@Test public void filtersTouchesAllIntermediateNodes(){
  graph.makeEdgeChain("a,b,c,d");
  final Node a=graph.getNode("a");
  final Node d=graph.getNode("d");
  Collection<Node> touchedByFilter=new HashSet<>();
  final Predicate<Node> filter=item -> {
    touchedByFilter.add(item);
    return true;
  }
;
  final PathExpander expander=PathExpanderBuilder.empty().add(R1,OUTGOING).addNodeFilter(filter).build();
  Path path=Iterables.single(GraphAlgoFactory.shortestPath(expander,10).findAllPaths(a,d));
  assertEquals(3,path.length());
  List<Node> nodes=Iterables.asList(path.nodes());
  List<Node> intermediateNodes=nodes.subList(1,nodes.size() - 1);
  assertTrue("touchedByFilter: " + touchedByFilter,touchedByFilter.containsAll(intermediateNodes));
  assertTrue("startNode was not filtered",!touchedByFilter.contains(a));
  assertTrue("endNode was not filtered",!touchedByFilter.contains(d));
}
