@Test public void shouldRollbackOnFailureInBeforeCommit() throws Exception {
  TransactionHook hook=mock(TransactionHook.class);
  final String message="Original";
  when(hook.beforeCommit(any(ReadableTransactionState.class),any(KernelTransaction.class),any(StorageReader.class))).thenReturn(new TransactionHook.Outcome(){
    @Override public boolean isSuccessful(){
      return false;
    }
    @Override public Throwable failure(){
      return new Throwable(message);
    }
  }
);
  internalKernel().registerTransactionHook(hook);
  Write ops=dataWriteInNewTransaction();
  ops.nodeCreate();
  try {
    commit();
    fail("Expected this to fail.");
  }
 catch (  TransactionFailureException e) {
    assertThat(e.status(),equalTo(Status.Transaction.TransactionHookFailed));
    assertThat(e.getCause().getMessage(),equalTo(message));
  }
  verify(hook).beforeCommit(any(ReadableTransactionState.class),any(KernelTransaction.class),any(StorageReader.class));
  verify(hook).afterRollback(any(ReadableTransactionState.class),any(KernelTransaction.class),any(TransactionHook.Outcome.class));
  verifyNoMoreInteractions(hook);
}
