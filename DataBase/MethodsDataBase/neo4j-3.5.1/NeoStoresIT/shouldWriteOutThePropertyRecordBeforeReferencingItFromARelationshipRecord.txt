@Test public void shouldWriteOutThePropertyRecordBeforeReferencingItFromARelationshipRecord() throws Throwable {
  final long node1Id;
  final long node2Id;
  try (Transaction tx=db.beginTx()){
    Node node1=db.createNode();
    node1Id=node1.getId();
    Node node2=db.createNode();
    node2Id=node2.getId();
    tx.success();
  }
   Race race=new Race();
  final long[] latestRelationshipId=new long[1];
  AtomicLong writes=new AtomicLong();
  AtomicLong reads=new AtomicLong();
  long endTime=currentTimeMillis() + SECONDS.toMillis(2);
  race.withEndCondition(() -> (writes.get() > 100 && reads.get() > 10_000) || currentTimeMillis() > endTime);
  race.addContestant(() -> {
    try (Transaction tx=db.beginTx()){
      Node node1=db.getGraphDatabaseAPI().getNodeById(node1Id);
      Node node2=db.getGraphDatabaseAPI().getNodeById(node2Id);
      Relationship rel=node1.createRelationshipTo(node2,FRIEND);
      latestRelationshipId[0]=rel.getId();
      rel.setProperty("largeProperty",LONG_STRING_VALUE);
      tx.success();
    }
     writes.incrementAndGet();
  }
);
  race.addContestant(() -> {
    try (Transaction tx=db.getGraphDatabaseAPI().beginTx()){
      Relationship rel=db.getGraphDatabaseAPI().getRelationshipById(latestRelationshipId[0]);
      for (      String propertyKey : rel.getPropertyKeys()) {
        rel.getProperty(propertyKey);
      }
      tx.success();
    }
 catch (    NotFoundException e) {
      if (Exceptions.contains(e,InvalidRecordException.class)) {
        throw e;
      }
    }
    reads.incrementAndGet();
  }
);
  race.go();
}
