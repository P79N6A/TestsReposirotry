@Test public void shouldFilterResults(){
  List<String> keys=new ArrayList<>();
  for (int i=0; i < 100; i++) {
    keys.add(random.nextAlphaNumericString());
  }
  RawCursor<Hit<StringIndexKey,NativeIndexValue>,IOException> cursor=new ResultCursor(keys.iterator());
  IndexQuery[] predicates=new IndexQuery[]{mock(IndexQuery.class)};
  Predicate<String> filter=string -> string.contains("a");
  when(predicates[0].acceptsValue(any(Value.class))).then(invocation -> filter.test(((TextValue)invocation.getArgument(0)).stringValue()));
  FilteringNativeHitIterator<StringIndexKey,NativeIndexValue> iterator=new FilteringNativeHitIterator<>(cursor,new ArrayList<>(),predicates);
  List<Long> result=new ArrayList<>();
  while (iterator.hasNext()) {
    result.add(iterator.next());
  }
  for (int i=0; i < keys.size(); i++) {
    if (filter.test(keys.get(i))) {
      assertTrue(result.remove((long)i));
    }
  }
  assertTrue(result.isEmpty());
}
