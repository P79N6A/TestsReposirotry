@Test public void shouldSupportFunctionDeprecation() throws Throwable {
  Log log=mock(Log.class);
  ReflectiveProcedureCompiler procedureCompiler=new ReflectiveProcedureCompiler(new TypeMappers(),components,new ComponentRegistry(),log,ProcedureConfig.DEFAULT);
  List<CallableUserAggregationFunction> funcs=procedureCompiler.compileAggregationFunction(FunctionWithDeprecation.class);
  verify(log).warn("Use of @UserAggregationFunction(deprecatedBy) without @Deprecated in org.neo4j.kernel.impl.proc.badFunc");
  verifyNoMoreInteractions(log);
  for (  CallableUserAggregationFunction func : funcs) {
    String name=func.signature().name().name();
    func.create(new BasicContext());
switch (name) {
case "newFunc":
      assertFalse("Should not be deprecated",func.signature().deprecated().isPresent());
    break;
case "oldFunc":
case "badFunc":
  assertTrue("Should be deprecated",func.signature().deprecated().isPresent());
assertThat(func.signature().deprecated().get(),equalTo("newFunc"));
break;
default :
fail("Unexpected function: " + name);
}
}
}
