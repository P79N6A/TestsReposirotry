@Test void mustUnblockPageFaultersWhenEvictionGetsException(){
  assertTimeout(ofMillis(SEMI_LONG_TIMEOUT_MILLIS),() -> {
    writeInitialDataTo(file("a"));
    MutableBoolean throwException=new MutableBoolean(true);
    FileSystemAbstraction fs=new DelegatingFileSystemAbstraction(this.fs){
      @Override public StoreChannel open(      File fileName,      OpenMode openMode) throws IOException {
        return new DelegatingStoreChannel(super.open(fileName,openMode)){
          @Override public void writeAll(          ByteBuffer src,          long position) throws IOException {
            if (throwException.booleanValue()) {
              throw new IOException("uh-oh...");
            }
 else {
              super.writeAll(src,position);
            }
          }
        }
;
      }
    }
;
    try (MuninnPageCache pageCache=createPageCache(fs,2,PageCacheTracer.NULL,PageCursorTracerSupplier.NULL);PagedFile pagedFile=map(pageCache,file("a"),8)){
      try (PageCursor cursor=pagedFile.io(0,PF_SHARED_WRITE_LOCK)){
        for (int i=0; i < 1000; i++) {
          assertTrue(cursor.next());
        }
        fail("Expected an exception at this point");
      }
 catch (      IOException ignore) {
      }
      throwException.setFalse();
    }
   }
);
}
