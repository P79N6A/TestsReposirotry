@Test void mustFlushDirtyPagesOnEvictingAllPages() throws Exception {
  writeInitialDataTo(file("a"));
  RecordingPageCacheTracer tracer=new RecordingPageCacheTracer();
  RecordingPageCursorTracer cursorTracer=new RecordingPageCursorTracer(Fault.class);
  ConfigurablePageCursorTracerSupplier<RecordingPageCursorTracer> cursorTracerSupplier=new ConfigurablePageCursorTracerSupplier<>(cursorTracer);
  try (MuninnPageCache pageCache=createPageCache(fs,4,blockCacheFlush(tracer),cursorTracerSupplier);PagedFile pagedFile=map(pageCache,file("a"),8)){
    try (PageCursor cursor=pagedFile.io(0,PF_SHARED_WRITE_LOCK | PF_NO_GROW)){
      assertTrue(cursor.next());
      cursor.putLong(0L);
      assertTrue(cursor.next());
      cursor.putLong(0L);
      assertFalse(cursor.next());
    }
     cursorTracer.reportEvents();
    assertNotNull(cursorTracer.observe(Fault.class));
    assertNotNull(cursorTracer.observe(Fault.class));
    assertEquals(2,cursorTracer.faults());
    assertEquals(2,tracer.faults());
    long clockArm=pageCache.evictPages(2,0,tracer.beginPageEvictions(2));
    assertThat(clockArm,is(2L));
    assertNotNull(tracer.observe(Evict.class));
    assertNotNull(tracer.observe(Evict.class));
    ByteBuffer buf=readIntoBuffer("a");
    assertThat(buf.getLong(),is(0L));
    assertThat(buf.getLong(),is(0L));
  }
 }
