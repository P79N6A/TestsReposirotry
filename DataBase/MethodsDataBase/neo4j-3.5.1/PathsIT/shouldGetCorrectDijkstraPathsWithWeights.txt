@Test @Graph(nodes={@NODE(name="a",setNameProperty=true),@NODE(name="b",setNameProperty=true),@NODE(name="c",setNameProperty=true),@NODE(name="d",setNameProperty=true),@NODE(name="e",setNameProperty=true),@NODE(name="f",setNameProperty=true)},relationships={@REL(start="a",end="b",type="to",properties={@PROP(key="cost",value="1.5",type=GraphDescription.PropType.DOUBLE)}),@REL(start="a",end="c",type="to",properties={@PROP(key="cost",value="0.5",type=GraphDescription.PropType.DOUBLE)}),@REL(start="a",end="f",type="to",properties={@PROP(key="cost",value="0.5",type=GraphDescription.PropType.DOUBLE)}),@REL(start="c",end="d",type="to",properties={@PROP(key="cost",value="0.5",type=GraphDescription.PropType.DOUBLE)}),@REL(start="d",end="e",type="to",properties={@PROP(key="cost",value="0.5",type=GraphDescription.PropType.DOUBLE)}),@REL(start="b",end="e",type="to",properties={@PROP(key="cost",value="0.5",type=GraphDescription.PropType.DOUBLE)}),@REL(start="f",end="e",type="to",properties={@PROP(key="cost",value="1.0",type=GraphDescription.PropType.DOUBLE)})}) @Title("Execute a Dijkstra algorithm and get multiple paths") @Documented("This example is running a Dijkstra algorithm over a graph with different\n" + "cost properties on different relationships. Note that the request URI\n" + "ends with +/paths+ which means we want multiple paths returned, in case\n"+ "they exist.") public void shouldGetCorrectDijkstraPathsWithWeights() throws Exception {
  long a=nodeId(data.get(),"a");
  long e=nodeId(data.get(),"e");
  String response=gen().expectedStatus(Status.OK.getStatusCode()).payload(getAllPathsUsingDijkstraPayLoad(e,false)).post(getServerUri() + "db/data/node/" + a+ "/paths").entity();
  List<Map<String,Object>> list=JsonHelper.jsonToList(response);
  assertEquals(2,list.size());
  Map<String,Object> firstPath=list.get(0);
  Map<String,Object> secondPath=list.get(1);
  System.out.println(firstPath);
  System.out.println(secondPath);
  assertThatPathStartsWith(firstPath,a);
  assertThatPathStartsWith(secondPath,a);
  assertThatPathEndsWith(firstPath,e);
  assertThatPathEndsWith(secondPath,e);
  assertEquals(1.5,firstPath.get("weight"));
  assertEquals(1.5,secondPath.get("weight"));
  assertEquals(5,(Integer)firstPath.get("length") + (Integer)secondPath.get("length"));
  assertEquals(1,Math.abs((Integer)firstPath.get("length") - (Integer)secondPath.get("length")));
}
