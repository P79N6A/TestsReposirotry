@Title("Find one of the shortest paths") @Test @Graph(value={"a to c","a to d","c to b","d to e","b to f","c to f","f to g","d to g","e to g","c to g"}) @Documented("If no path algorithm is specified, a +shortestPath+ algorithm with a max\n" + "depth of 1 will be chosen. In this example, the +max_depth+ is set to +3+\n" + "in order to find the shortest path between a maximum of 3 linked nodes.") public void shouldBeAbleToFetchSingleShortestPath() throws JsonParseException {
  long a=nodeId(data.get(),"a");
  long g=nodeId(data.get(),"g");
  String response=gen().expectedStatus(Status.OK.getStatusCode()).payload(getAllShortestPathPayLoad(g)).post(getServerUri() + "db/data/node/" + a+ "/path").entity();
  Map<?,?> path=JsonHelper.jsonToMap(response);
  assertThatPathStartsWith(path,a);
  assertThatPathEndsWith(path,g);
  assertThatPathHasLength(path,2);
}
