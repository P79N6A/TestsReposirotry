@Test @Graph(nodes={@NODE(name="a",setNameProperty=true),@NODE(name="b",setNameProperty=true),@NODE(name="c",setNameProperty=true),@NODE(name="d",setNameProperty=true),@NODE(name="e",setNameProperty=true),@NODE(name="f",setNameProperty=true)},relationships={@REL(start="a",end="b",type="to",properties={@PROP(key="cost",value="1",type=GraphDescription.PropType.INTEGER)}),@REL(start="a",end="c",type="to",properties={@PROP(key="cost",value="1",type=GraphDescription.PropType.INTEGER)}),@REL(start="a",end="f",type="to",properties={@PROP(key="cost",value="1",type=GraphDescription.PropType.INTEGER)}),@REL(start="c",end="d",type="to",properties={@PROP(key="cost",value="1",type=GraphDescription.PropType.INTEGER)}),@REL(start="d",end="e",type="to",properties={@PROP(key="cost",value="1",type=GraphDescription.PropType.INTEGER)}),@REL(start="b",end="e",type="to",properties={@PROP(key="cost",value="1",type=GraphDescription.PropType.INTEGER)}),@REL(start="f",end="e",type="to",properties={@PROP(key="cost",value="1",type=GraphDescription.PropType.INTEGER)})}) @Title("Execute a Dijkstra algorithm with equal weights on relationships") @Documented("The following is executing a Dijkstra search on a graph with equal\n" + "weights on all relationships. This example is included to show the\n" + "difference when the same graph structure is used, but the path weight is\n"+ "equal to the number of hops.") public void shouldGetCorrectDijkstraPathsWithEqualWeightsWithDefaultCost() throws Exception {
  long a=nodeId(data.get(),"a");
  long e=nodeId(data.get(),"e");
  String response=gen().expectedStatus(Status.OK.getStatusCode()).payload(getAllPathsUsingDijkstraPayLoad(e,false)).post(getServerUri() + "db/data/node/" + a+ "/path").entity();
  Map<?,?> path=JsonHelper.jsonToMap(response);
  assertThatPathStartsWith(path,a);
  assertThatPathEndsWith(path,e);
  assertThatPathHasLength(path,2);
  assertEquals(2.0,path.get("weight"));
}
