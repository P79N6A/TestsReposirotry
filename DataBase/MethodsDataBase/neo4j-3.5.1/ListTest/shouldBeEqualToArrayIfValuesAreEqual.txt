@Test void shouldBeEqualToArrayIfValuesAreEqual(){
  assertEqualValues(list(),booleanArray(new boolean[]{}));
  assertEqualValues(list(),byteArray(new byte[]{}));
  assertEqualValues(list(),charArray(new char[]{}));
  assertEqualValues(list(),doubleArray(new double[]{}));
  assertEqualValues(list(),floatArray(new float[]{}));
  assertEqualValues(list(),intArray(new int[]{}));
  assertEqualValues(list(),longArray(new long[]{}));
  assertEqualValues(list(),shortArray(new short[]{}));
  assertEqualValues(list(),stringArray());
  assertEqualValues(list(true),booleanArray(new boolean[]{true}));
  assertEqualValues(list(true,false),booleanArray(new boolean[]{true,false}));
  assertEqualValues(list(84),byteArray("T".getBytes()));
  assertEqualValues(list(84,104,105,115,32,105,115,32,106,117,115,116,32,97,32,116,101,115,116),byteArray("This is just a test".getBytes()));
  assertEqualValues(list('h'),charArray(new char[]{'h'}));
  assertEqualValues(list('h','i'),charArray(new char[]{'h','i'}));
  assertEqualValues(list(1.0),doubleArray(new double[]{1.0}));
  assertEqualValues(list(1.0,2.0),doubleArray(new double[]{1.0,2.0}));
  assertEqualValues(list(1.5f),floatArray(new float[]{1.5f}));
  assertEqualValues(list(1.5f,-5f),floatArray(new float[]{1.5f,-5f}));
  assertEqualValues(list(1),intArray(new int[]{1}));
  assertEqualValues(list(1,-3),intArray(new int[]{1,-3}));
  assertEqualValues(list(2L),longArray(new long[]{2L}));
  assertEqualValues(list(2L,-3L),longArray(new long[]{2L,-3L}));
  assertEqualValues(list((short)2),shortArray(new short[]{(short)2}));
  assertEqualValues(list((short)2,(short)-3),shortArray(new short[]{(short)2,(short)-3}));
  assertEqualValues(list("hi"),stringArray("hi"));
  assertEqualValues(list("hi","ho"),stringArray("hi","ho"));
}
