@Test public void shouldSerializeTemporalAsListOfMapsOfProperties() throws Exception {
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  ExecutionResultSerializer serializer=getSerializerWith(output);
  Result executionResult=mockExecutionResult(map("temporal",LocalDate.of(2018,3,12)),map("temporal",ZonedDateTime.of(2018,3,12,13,2,10,10,ZoneId.of("UTC+1"))),map("temporal",OffsetTime.of(12,2,4,71,ZoneOffset.UTC)),map("temporal",LocalDateTime.of(2018,3,12,13,2,10,10)),map("temporal",LocalTime.of(13,2,10,10)),map("temporal",Duration.of(12,ChronoUnit.HOURS)));
  serializer.statementResult(executionResult,false);
  serializer.finish();
  String result=output.toString(UTF_8.name());
  assertEquals("{\"results\":[{\"columns\":[\"temporal\"],\"data\":[" + "{\"row\":[\"2018-03-12\"],\"meta\":[{\"type\":\"date\"}]}," + "{\"row\":[\"2018-03-12T13:02:10.000000010+01:00[UTC+01:00]\"],\"meta\":[{\"type\":\"datetime\"}]},"+ "{\"row\":[\"12:02:04.000000071Z\"],\"meta\":[{\"type\":\"time\"}]},"+ "{\"row\":[\"2018-03-12T13:02:10.000000010\"],\"meta\":[{\"type\":\"localdatetime\"}]},"+ "{\"row\":[\"13:02:10.000000010\"],\"meta\":[{\"type\":\"localtime\"}]},"+ "{\"row\":[\"PT12H\"],\"meta\":[{\"type\":\"duration\"}]}"+ "]}],\"errors\":[]}",result);
}
