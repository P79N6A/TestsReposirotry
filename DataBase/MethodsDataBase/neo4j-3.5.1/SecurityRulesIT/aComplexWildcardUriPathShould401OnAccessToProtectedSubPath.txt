@Test @Title("Using Complex Wildcards to Target Security Rules") @Documented("In this example, a security rule is registered to deny\n" + "access to all URIs matching a complex pattern.\n" + "The config looks like this:\n"+ "\n"+ "@@config\n"+ "\n"+ "with the rule source code of:\n"+ "\n"+ "@@failingRuleWithComplexWildcardPath") public void aComplexWildcardUriPathShould401OnAccessToProtectedSubPath() throws Exception {
  String mountPoint="/protected/wildcard_replacement/x/y/z/something/else/more_wildcard_replacement/a/b/c" + "/final/bit";
  server=CommunityServerBuilder.serverOnRandomPorts().withDefaultDatabaseTuning().withThirdPartyJaxRsPackage("org.dummy.web.service",mountPoint).withSecurityRules(PermanentlyFailingSecurityRuleWithComplexWildcardPath.class.getCanonicalName()).usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).build();
  server.start();
  functionalTestHelper=new FunctionalTestHelper(server);
  JaxRsResponse clientResponse=gen.get().expectedStatus(401).expectedType(MediaType.APPLICATION_JSON_TYPE).expectedHeader("WWW-Authenticate").get(trimTrailingSlash(functionalTestHelper.baseUri()) + mountPoint + "/more/stuff").response();
  assertEquals(401,clientResponse.getStatus());
}
