@Test @Title("Enforcing Server Authorization Rules") @Documented("In this example, a (dummy) failing security rule is registered to deny\n" + "access to all URIs to the server by listing the rules class in\n" + "'neo4j.conf':\n"+ "\n"+ "@@config\n"+ "\n"+ "with the rule source code of:\n"+ "\n"+ "@@failingRule\n"+ "\n"+ "With this rule registered, any access to the server will be\n"+ "denied. In a production-quality implementation the rule\n"+ "will likely lookup credentials/claims in a 3rd-party\n"+ "directory service (e.g. LDAP) or in a local database of\n"+ "authorized users.") public void should401WithBasicChallengeWhenASecurityRuleFails() throws Exception {
  server=CommunityServerBuilder.serverOnRandomPorts().withDefaultDatabaseTuning().withSecurityRules(PermanentlyFailingSecurityRule.class.getCanonicalName()).usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).build();
  server.start();
  functionalTestHelper=new FunctionalTestHelper(server);
  JaxRsResponse response=gen.get().expectedStatus(401).expectedHeader("WWW-Authenticate").post(functionalTestHelper.nodeUri()).response();
  assertThat(response.getHeaders().getFirst("WWW-Authenticate"),containsString("Basic realm=\"" + PermanentlyFailingSecurityRule.REALM + "\""));
}
