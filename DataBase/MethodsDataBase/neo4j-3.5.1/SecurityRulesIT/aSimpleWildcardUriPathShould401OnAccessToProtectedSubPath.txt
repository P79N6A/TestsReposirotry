@Test @Title("Using Wildcards to Target Security Rules") @Documented("In this example, a security rule is registered to deny\n" + "access to all URIs to the server by listing the rule(s) class(es) in\n" + "'neo4j.conf'.\n"+ "In this case, the rule is registered\n"+ "using a wildcard URI path (where `*` characters can be used to signify\n"+ "any part of the path). For example `/users*` means the rule\n"+ "will be bound to any resources under the `/users` root path. Similarly\n"+ "`/users*type*` will bind the rule to resources matching\n"+ "URIs like `/users/fred/type/premium`.\n"+ "\n"+ "@@config\n"+ "\n"+ "with the rule source code of:\n"+ "\n"+ "@@failingRuleWithWildcardPath\n"+ "\n"+ "With this rule registered, any access to URIs under /protected/ will be\n"+ "denied by the server. Using wildcards allows flexible targeting of security rules to\n"+ "arbitrary parts of the server's API, including any unmanaged extensions or managed\n"+ "plugins that have been registered.") public void aSimpleWildcardUriPathShould401OnAccessToProtectedSubPath() throws Exception {
  String mountPoint="/protected/tree/starts/here" + DummyThirdPartyWebService.DUMMY_WEB_SERVICE_MOUNT_POINT;
  server=CommunityServerBuilder.serverOnRandomPorts().withDefaultDatabaseTuning().withThirdPartyJaxRsPackage("org.dummy.web.service",mountPoint).withSecurityRules(PermanentlyFailingSecurityRuleWithWildcardPath.class.getCanonicalName()).usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).build();
  server.start();
  functionalTestHelper=new FunctionalTestHelper(server);
  JaxRsResponse clientResponse=gen.get().expectedStatus(401).expectedType(MediaType.APPLICATION_JSON_TYPE).expectedHeader("WWW-Authenticate").get(trimTrailingSlash(functionalTestHelper.baseUri()) + mountPoint + "/more/stuff").response();
  assertEquals(401,clientResponse.getStatus());
}
