@Test void shouldCombineAllParts() throws IOException {
  SimpleLongLayout layout=new SimpleLongLayout(0,"",true,1,2,3);
  List<RawCursor<Hit<MutableLong,MutableLong>,IOException>> parts=new ArrayList<>();
  int partCount=random.nextInt(1,20);
  List<Hit<MutableLong,MutableLong>> expectedAllData=new ArrayList<>();
  int maxKey=random.nextInt(100,10_000);
  for (int i=0; i < partCount; i++) {
    int dataSize=random.nextInt(0,100);
    List<Hit<MutableLong,MutableLong>> partData=new ArrayList<>(dataSize);
    for (int j=0; j < dataSize; j++) {
      long key=random.nextLong(maxKey);
      partData.add(new SimpleHit<>(new MutableLong(key),new MutableLong(key * 2)));
    }
    partData.sort(HIT_COMPARATOR);
    parts.add(new SimpleSeeker(partData));
    expectedAllData.addAll(partData);
  }
  expectedAllData.sort(HIT_COMPARATOR);
  CombinedPartSeeker<MutableLong,MutableLong> combinedSeeker=new CombinedPartSeeker<>(layout,parts);
  for (  Hit<MutableLong,MutableLong> expectedHit : expectedAllData) {
    assertTrue(combinedSeeker.next());
    Hit<MutableLong,MutableLong> actualHit=combinedSeeker.get();
    assertEquals(expectedHit.key().longValue(),actualHit.key().longValue());
    assertEquals(expectedHit.value().longValue(),actualHit.value().longValue());
  }
  assertFalse(combinedSeeker.next());
  assertFalse(combinedSeeker.next());
}
