@Test public void indexShouldIncludeNodesCreatedPreviouslyInBatch() throws Exception {
  List<TransactionRepresentation> transactions;
  GraphDatabaseAPI db=(GraphDatabaseAPI)new TestGraphDatabaseFactory().newImpermanentDatabase();
  String nodeN="our guy";
  String otherNode="just to create the tokens";
  try {
    try (Transaction tx=db.beginTx()){
      db.createNode(LABEL).setProperty(PROPERTY_KEY,otherNode);
      for (int i=0; i < 10_000; i++) {
        db.createNode();
      }
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      db.createNode(LABEL).setProperty(PROPERTY_KEY,nodeN);
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      db.schema().constraintFor(LABEL).assertPropertyIsUnique(PROPERTY_KEY).create();
      tx.success();
    }
     transactions=extractTransactions(db);
  }
  finally {
    db.shutdown();
  }
  db=(GraphDatabaseAPI)new TestGraphDatabaseFactory().newImpermanentDatabase();
  TransactionCommitProcess commitProcess=db.getDependencyResolver().resolveDependency(TransactionCommitProcess.class);
  try {
    int cutoffIndex=findCutoffIndex(transactions);
    commitProcess.commit(toApply(transactions.subList(0,cutoffIndex)),NULL,EXTERNAL);
    commitProcess.commit(toApply(transactions.subList(cutoffIndex,transactions.size())),NULL,EXTERNAL);
    try (Transaction tx=db.beginTx()){
      assertNotNull("Verification node not found",singleOrNull(db.findNodes(LABEL,PROPERTY_KEY,otherNode)));
      assertNotNull("Node N not found",singleOrNull(db.findNodes(LABEL,PROPERTY_KEY,nodeN)));
      tx.success();
    }
   }
  finally {
    db.shutdown();
  }
}
