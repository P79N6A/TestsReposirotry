@Test public void pruneAndArchiveMultipleLogs() throws IOException {
  life.start();
  generateTransactionLogFiles(logFiles);
  long highestCorrectLogFileIndex=5;
  File highestCorrectLogFile=logFiles.getLogFileForVersion(highestCorrectLogFileIndex);
  long fileSizeBeforePrune=highestCorrectLogFile.length();
  int bytesToPrune=7;
  long byteOffset=fileSizeBeforePrune - bytesToPrune;
  LogPosition prunePosition=new LogPosition(highestCorrectLogFileIndex,byteOffset);
  life.shutdown();
  logPruner.truncate(prunePosition);
  life.start();
  assertEquals(6,logFiles.logFiles().length);
  assertEquals(byteOffset,highestCorrectLogFile.length());
  File corruptedLogsDirectory=new File(databaseDirectory,CorruptedLogsTruncator.CORRUPTED_TX_LOGS_BASE_NAME);
  assertTrue(corruptedLogsDirectory.exists());
  File[] files=corruptedLogsDirectory.listFiles();
  assertEquals(1,files.length);
  File corruptedLogsArchive=files[0];
  checkArchiveName(highestCorrectLogFileIndex,byteOffset,corruptedLogsArchive);
  try (ZipFile zipFile=new ZipFile(corruptedLogsArchive)){
    assertEquals(7,zipFile.size());
    checkEntryNameAndSize(zipFile,highestCorrectLogFile.getName(),bytesToPrune);
    long nextLogFileIndex=highestCorrectLogFileIndex + 1;
    int lastFileIndex=TOTAL_NUMBER_OF_LOG_FILES - 1;
    for (long index=nextLogFileIndex; index < lastFileIndex; index++) {
      checkEntryNameAndSize(zipFile,TransactionLogFiles.DEFAULT_NAME + "." + index,SINGLE_LOG_FILE_SIZE);
    }
    checkEntryNameAndSize(zipFile,TransactionLogFiles.DEFAULT_NAME + "." + lastFileIndex,SINGLE_LOG_FILE_SIZE - 1);
  }
 }
