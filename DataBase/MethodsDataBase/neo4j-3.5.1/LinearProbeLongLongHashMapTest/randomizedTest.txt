@Test void randomizedTest(){
  final int count=10000 + rnd.nextInt(1000);
  final MutableLongLongMap m=new LongLongHashMap();
  while (m.size() < count) {
    m.put(rnd.nextLong(),rnd.nextLong());
  }
  m.forEachKeyValue((k,v) -> {
    assertFalse(map.containsKey(k));
    map.put(k,v);
    assertTrue(map.containsKey(k));
    assertEquals(v,map.get(k));
    assertEquals(v,map.getOrThrow(k));
    assertEquals(v,map.getIfAbsent(k,v * 2));
    assertEquals(v,map.getIfAbsentPut(k,v * 2));
    assertEquals(v,map.getIfAbsentPut(k,() -> v * 2));
  }
);
  assertEquals(m.size(),map.size());
  assertTrue(m.keySet().allSatisfy(map::containsKey));
  final List<LongLongPair> toRemove=m.keyValuesView().select(p -> rnd.nextInt(100) < 75).toList().shuffleThis(rnd.random());
  toRemove.forEach(p -> {
    final long k=p.getOne();
    final long v=p.getTwo();
    map.updateValue(k,v + 1,x -> -x);
    assertEquals(-v,map.get(k));
    map.remove(k);
    assertEquals(v * 2,map.removeKeyIfAbsent(k,v * 2));
    assertEquals(v * 2,map.getIfAbsent(k,v * 2));
    assertFalse(map.containsKey(k));
    assertThrows(IllegalStateException.class,() -> map.getOrThrow(k));
    map.updateValue(k,v + 42,x -> -x);
    assertEquals(-v - 42,map.get(k));
  }
);
  toRemove.forEach(p -> map.removeKey(p.getOne()));
  assertEquals(count - toRemove.size(),map.size());
}
