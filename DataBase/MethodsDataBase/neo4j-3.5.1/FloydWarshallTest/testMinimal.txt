/** 
 * Test case for paths of length 0 and 1, and an impossible path
 */
@Test public void testMinimal(){
  graph.makeEdge("a","b","cost",(double)1);
  graph.makeEdge("a","c","cost",(float)1);
  graph.makeEdge("a","d","cost",(long)1);
  graph.makeEdge("a","e","cost",1);
  graph.makeEdge("b","c","cost",(double)1);
  graph.makeEdge("c","d","cost",(byte)1);
  graph.makeEdge("d","e","cost",(short)1);
  graph.makeEdge("e","b","cost",(byte)1);
  FloydWarshall<Double> floydWarshall=new FloydWarshall<>(0.0,Double.MAX_VALUE,Direction.OUTGOING,CommonEvaluators.doubleCostEvaluator("cost"),new org.neo4j.graphalgo.impl.util.DoubleAdder(),Double::compareTo,graph.getAllNodes(),graph.getAllEdges());
  assertEquals(0.0,floydWarshall.getCost(graph.getNode("a"),graph.getNode("a")),0.0);
  assertEquals(1.0,floydWarshall.getCost(graph.getNode("a"),graph.getNode("b")),0.0);
  assertEquals(floydWarshall.getCost(graph.getNode("b"),graph.getNode("a")),Double.MAX_VALUE,0.0);
}
