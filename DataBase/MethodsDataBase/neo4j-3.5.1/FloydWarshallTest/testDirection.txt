@Test public void testDirection(){
  graph.makeEdge("a","b");
  graph.makeEdge("b","c");
  graph.makeEdge("c","d");
  graph.makeEdge("d","a");
  graph.makeEdge("s","a");
  graph.makeEdge("b","s");
  graph.makeEdge("e","c");
  graph.makeEdge("d","e");
  new FloydWarshall<>(0.0,Double.MAX_VALUE,Direction.OUTGOING,(relationship,direction) -> {
    assertEquals(Direction.OUTGOING,direction);
    return 1.0;
  }
,new org.neo4j.graphalgo.impl.util.DoubleAdder(),Double::compareTo,graph.getAllNodes(),graph.getAllEdges()).calculate();
  new FloydWarshall<>(0.0,Double.MAX_VALUE,Direction.INCOMING,(relationship,direction) -> {
    assertEquals(Direction.INCOMING,direction);
    return 1.0;
  }
,new org.neo4j.graphalgo.impl.util.DoubleAdder(),Double::compareTo,graph.getAllNodes(),graph.getAllEdges()).calculate();
}
