@Test public void indexStringRangeQuery() throws Exception {
  updateAndCommit(asList(add(PROP_ID,"A"),add(2,"B"),add(3,"C"),add(4,"")));
  IndexReader reader=accessor.newReader();
  LongIterator rangeFromBInclusive=reader.query(range(PROP_ID,"B",true,null,false));
  assertThat(PrimitiveLongCollections.asArray(rangeFromBInclusive),LongArrayMatcher.of(2,3));
  LongIterator rangeFromANonInclusive=reader.query(range(PROP_ID,"A",false,null,false));
  assertThat(PrimitiveLongCollections.asArray(rangeFromANonInclusive),LongArrayMatcher.of(2,3));
  LongIterator emptyLowInclusive=reader.query(range(PROP_ID,"",true,null,false));
  assertThat(PrimitiveLongCollections.asArray(emptyLowInclusive),LongArrayMatcher.of(PROP_ID,2,3,4));
  LongIterator emptyUpperNonInclusive=reader.query(range(PROP_ID,"B",true,"",false));
  assertThat(PrimitiveLongCollections.asArray(emptyUpperNonInclusive),LongArrayMatcher.emptyArrayMatcher());
  LongIterator emptyInterval=reader.query(range(PROP_ID,"",true,"",true));
  assertThat(PrimitiveLongCollections.asArray(emptyInterval),LongArrayMatcher.of(4));
  LongIterator emptyAllNonInclusive=reader.query(range(PROP_ID,"",false,null,false));
  assertThat(PrimitiveLongCollections.asArray(emptyAllNonInclusive),LongArrayMatcher.of(PROP_ID,2,3));
  LongIterator nullNonInclusive=reader.query(range(PROP_ID,(String)null,false,null,false));
  assertThat(PrimitiveLongCollections.asArray(nullNonInclusive),LongArrayMatcher.of(PROP_ID,2,3,4));
  LongIterator nullInclusive=reader.query(range(PROP_ID,(String)null,false,null,false));
  assertThat(PrimitiveLongCollections.asArray(nullInclusive),LongArrayMatcher.of(PROP_ID,2,3,4));
}
