@Test public void indexNumberRangeQuery() throws Exception {
  updateAndCommit(asList(add(1,1),add(2,2),add(3,3),add(4,4),add(5,Double.NaN)));
  IndexReader reader=accessor.newReader();
  LongIterator rangeTwoThree=reader.query(range(PROP_ID,2,true,3,true));
  assertThat(PrimitiveLongCollections.asArray(rangeTwoThree),LongArrayMatcher.of(2,3));
  LongIterator infiniteMaxRange=reader.query(range(PROP_ID,2,true,Long.MAX_VALUE,true));
  assertThat(PrimitiveLongCollections.asArray(infiniteMaxRange),LongArrayMatcher.of(2,3,4));
  LongIterator infiniteMinRange=reader.query(range(PROP_ID,Long.MIN_VALUE,true,3,true));
  assertThat(PrimitiveLongCollections.asArray(infiniteMinRange),LongArrayMatcher.of(PROP_ID,2,3));
  LongIterator maxNanInterval=reader.query(range(PROP_ID,3,true,Double.NaN,true));
  assertThat(PrimitiveLongCollections.asArray(maxNanInterval),LongArrayMatcher.of(3,4,5));
  LongIterator minNanInterval=reader.query(range(PROP_ID,Double.NaN,true,5,true));
  assertThat(PrimitiveLongCollections.asArray(minNanInterval),LongArrayMatcher.emptyArrayMatcher());
  LongIterator nanInterval=reader.query(range(PROP_ID,Double.NaN,true,Double.NaN,true));
  assertThat(PrimitiveLongCollections.asArray(nanInterval),LongArrayMatcher.of(5));
}
