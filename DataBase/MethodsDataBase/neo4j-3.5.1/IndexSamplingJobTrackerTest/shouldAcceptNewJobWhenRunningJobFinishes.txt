@Test(timeout=5_000) public void shouldAcceptNewJobWhenRunningJobFinishes() throws Throwable {
  when(config.jobLimit()).thenReturn(1);
  JobScheduler jobScheduler=createInitialisedScheduler();
  final IndexSamplingJobTracker jobTracker=new IndexSamplingJobTracker(config,jobScheduler);
  final DoubleLatch latch=new DoubleLatch();
  final AtomicBoolean lastJobExecuted=new AtomicBoolean();
  jobTracker.scheduleSamplingJob(new IndexSamplingJob(){
    @Override public long indexId(){
      return indexId11;
    }
    @Override public void run(){
      latch.waitForAllToStart();
    }
  }
);
  Executors.newSingleThreadExecutor().execute(() -> {
    jobTracker.waitUntilCanExecuteMoreSamplingJobs();
    jobTracker.scheduleSamplingJob(new IndexSamplingJob(){
      @Override public long indexId(){
        return indexId22;
      }
      @Override public void run(){
        lastJobExecuted.set(true);
        latch.finish();
      }
    }
);
  }
);
  assertFalse(jobTracker.canExecuteMoreSamplingJobs());
  latch.startAndWaitForAllToStart();
  latch.waitForAllToFinish();
  assertTrue(lastJobExecuted.get());
}
