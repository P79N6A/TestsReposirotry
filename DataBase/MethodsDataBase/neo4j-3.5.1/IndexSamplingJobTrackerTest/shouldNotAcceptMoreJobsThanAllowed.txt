@Test public void shouldNotAcceptMoreJobsThanAllowed() throws Throwable {
  when(config.jobLimit()).thenReturn(1);
  JobScheduler jobScheduler=createInitialisedScheduler();
  final IndexSamplingJobTracker jobTracker=new IndexSamplingJobTracker(config,jobScheduler);
  final DoubleLatch latch=new DoubleLatch();
  final DoubleLatch waitingLatch=new DoubleLatch();
  assertTrue(jobTracker.canExecuteMoreSamplingJobs());
  jobTracker.scheduleSamplingJob(new IndexSamplingJob(){
    @Override public void run(){
      latch.startAndWaitForAllToStart();
      latch.waitForAllToFinish();
    }
    @Override public long indexId(){
      return indexId12;
    }
  }
);
  latch.waitForAllToStart();
  assertFalse(jobTracker.canExecuteMoreSamplingJobs());
  final AtomicBoolean waiting=new AtomicBoolean(false);
  new Thread(() -> {
    waiting.set(true);
    waitingLatch.startAndWaitForAllToStart();
    jobTracker.waitUntilCanExecuteMoreSamplingJobs();
    waiting.set(false);
    waitingLatch.finish();
  }
).start();
  waitingLatch.waitForAllToStart();
  assertTrue(waiting.get());
  latch.finish();
  waitingLatch.waitForAllToFinish();
  assertFalse(waiting.get());
  while (!jobTracker.canExecuteMoreSamplingJobs()) {
    Thread.yield();
  }
}
