@Test public void shouldListCompositeIndexesInTheCoreAPI() throws Exception {
  Transaction transaction=newTransaction(AUTH_DISABLED);
  SchemaDescriptor descriptor=SchemaDescriptorFactory.forLabel(labelId,propertyKeyId,propertyKeyId2);
  transaction.schemaWrite().indexCreate(descriptor);
  commit();
  try (@SuppressWarnings("unused") org.neo4j.graphdb.Transaction tx=db.beginTx()){
    Set<IndexDefinition> indexes=Iterables.asSet(db.schema().getIndexes());
    assertEquals(1,indexes.size());
    IndexDefinition index=indexes.iterator().next();
    assertEquals(LABEL,single(index.getLabels()).name());
    assertThat(index.getLabels(),containsInAnyOrder(label(LABEL)));
    try {
      index.getRelationshipType();
      fail("index.getRelationshipType() should have thrown. ");
    }
 catch (    IllegalStateException ignore) {
    }
    try {
      index.getRelationshipTypes();
      fail("index.getRelationshipTypes() should have thrown. ");
    }
 catch (    IllegalStateException ignore) {
    }
    assertFalse("should not be a constraint index",index.isConstraintIndex());
    assertFalse("should not be a multi-token index",index.isMultiTokenIndex());
    assertTrue("should be a composite index",index.isCompositeIndex());
    assertTrue("should be a node index",index.isNodeIndex());
    assertFalse("should not be a relationship index",index.isRelationshipIndex());
    assertEquals(asSet(PROPERTY_KEY,PROPERTY_KEY2),Iterables.asSet(index.getPropertyKeys()));
  }
 }
