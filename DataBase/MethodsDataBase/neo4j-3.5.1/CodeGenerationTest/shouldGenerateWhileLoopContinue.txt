@Test public void shouldGenerateWhileLoopContinue() throws Throwable {
  ClassHandle handle;
  try (ClassGenerator simple=generateClass("SimpleClass")){
    try (CodeBlock callEach=simple.generateMethod(void.class,"callEach",param(TypeReference.parameterizedType(Iterator.class,Runnable.class),"targets"),param(TypeReference.parameterizedType(Iterator.class,Boolean.class),"skipTargets"))){
      try (CodeBlock loop=callEach.whileLoop(invoke(callEach.load("targets"),methodReference(Iterator.class,boolean.class,"hasNext")))){
        loop.declare(TypeReference.typeReference(Runnable.class),"target");
        loop.assign(loop.local("target"),Expression.cast(Runnable.class,invoke(callEach.load("targets"),methodReference(Iterator.class,Object.class,"next"))));
        loop.declare(TypeReference.BOOLEAN,"skip");
        loop.assign(loop.local("skip"),invoke(Expression.cast(Boolean.class,invoke(callEach.load("skipTargets"),methodReference(Iterator.class,Object.class,"next"))),methodReference(Boolean.class,boolean.class,"booleanValue")));
        try (CodeBlock ifBlock=loop.ifStatement(loop.load("skip"))){
          ifBlock.continueIfPossible();
        }
         loop.expression(invoke(loop.load("target"),methodReference(Runnable.class,void.class,"run")));
      }
     }
     handle=simple.handle();
  }
   Runnable a=mock(Runnable.class);
  Runnable b=mock(Runnable.class);
  Runnable c=mock(Runnable.class);
  MethodHandle callEach=instanceMethod(handle.newInstance(),"callEach",Iterator.class,Iterator.class);
  callEach.invoke(Arrays.asList(a,b,c).iterator(),Arrays.asList(false,true,false).iterator());
  InOrder order=inOrder(a,b,c);
  order.verify(a).run();
  order.verify(c).run();
  verifyNoMoreInteractions(a,b,c);
}
