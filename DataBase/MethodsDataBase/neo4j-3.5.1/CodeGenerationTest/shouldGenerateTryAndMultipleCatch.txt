@Test public void shouldGenerateTryAndMultipleCatch() throws Throwable {
  ClassHandle handle;
  try (ClassGenerator simple=generateClass("SimpleClass")){
    try (CodeBlock run=simple.generateMethod(void.class,"run",param(Runnable.class,"body"),param(Runnable.class,"catcher1"),param(Runnable.class,"catcher2"))){
      run.tryCatch(tryBlock -> tryBlock.tryCatch(innerTry -> innerTry.expression(invoke(run.load("body"),RUN)),catchBlock1 -> catchBlock1.expression(invoke(run.load("catcher1"),RUN)),param(MyFirstException.class,"E1")),catchBlock2 -> catchBlock2.expression(invoke(run.load("catcher2"),RUN)),param(MySecondException.class,"E2"));
    }
     handle=simple.handle();
  }
   Runnable body1=mock(Runnable.class);
  Runnable body2=mock(Runnable.class);
  Runnable catcher11=mock(Runnable.class);
  Runnable catcher12=mock(Runnable.class);
  Runnable catcher21=mock(Runnable.class);
  Runnable catcher22=mock(Runnable.class);
  doThrow(MyFirstException.class).when(body1).run();
  doThrow(MySecondException.class).when(body2).run();
  MethodHandle run=instanceMethod(handle.newInstance(),"run",Runnable.class,Runnable.class,Runnable.class);
  run.invoke(body1,catcher11,catcher12);
  verify(body1).run();
  verify(catcher11).run();
  verify(catcher12,never()).run();
  run.invoke(body2,catcher21,catcher22);
  verify(body2).run();
  verify(catcher22).run();
  verify(catcher21,never()).run();
}
