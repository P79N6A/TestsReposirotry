@Test public void shouldNotAuthorizeWhenPasswordChangeRequired() throws Exception {
  final AuthorizationEnabledFilter filter=new AuthorizationEnabledFilter(() -> authManager,logProvider);
  String credentials=Base64.encodeBase64String("foo:bar".getBytes(StandardCharsets.UTF_8));
  BasicLoginContext loginContext=mock(BasicLoginContext.class);
  AuthSubject authSubject=mock(AuthSubject.class);
  when(servletRequest.getMethod()).thenReturn("GET");
  when(servletRequest.getContextPath()).thenReturn("/db/data");
  when(servletRequest.getRequestURL()).thenReturn(new StringBuffer("http://bar.baz:7474/db/data/"));
  when(servletRequest.getRequestURI()).thenReturn("/db/data/");
  when(servletRequest.getHeader(HttpHeaders.AUTHORIZATION)).thenReturn("BASIC " + credentials);
  when(authManager.login(authTokenArgumentMatcher(authToken("foo","bar")))).thenReturn(loginContext);
  when(loginContext.subject()).thenReturn(authSubject);
  when(authSubject.getAuthenticationResult()).thenReturn(AuthenticationResult.PASSWORD_CHANGE_REQUIRED);
  filter.doFilter(servletRequest,servletResponse,filterChain);
  verifyNoMoreInteractions(filterChain);
  verify(servletResponse).setStatus(403);
  verify(servletResponse).addHeader(HttpHeaders.CONTENT_TYPE,"application/json; charset=UTF-8");
  assertThat(outputStream.toString(StandardCharsets.UTF_8.name()),containsString("\"password_change\" : \"http://bar.baz:7474/user/foo/password\""));
  assertThat(outputStream.toString(StandardCharsets.UTF_8.name()),containsString("\"code\" : \"Neo.ClientError.Security.Forbidden\""));
  assertThat(outputStream.toString(StandardCharsets.UTF_8.name()),containsString("\"message\" : \"User is required to change their password.\""));
}
