@Test public void shouldNotAuthorizeWhenTooManyAttemptsMade() throws Exception {
  final AuthorizationEnabledFilter filter=new AuthorizationEnabledFilter(() -> authManager,logProvider);
  String credentials=Base64.encodeBase64String("foo:bar".getBytes(StandardCharsets.UTF_8));
  BasicLoginContext loginContext=mock(BasicLoginContext.class);
  AuthSubject authSubject=mock(AuthSubject.class);
  when(servletRequest.getMethod()).thenReturn("GET");
  when(servletRequest.getContextPath()).thenReturn("/db/data");
  when(servletRequest.getHeader(HttpHeaders.AUTHORIZATION)).thenReturn("BASIC " + credentials);
  when(authManager.login(authTokenArgumentMatcher(authToken("foo","bar")))).thenReturn(loginContext);
  when(loginContext.subject()).thenReturn(authSubject);
  when(authSubject.getAuthenticationResult()).thenReturn(AuthenticationResult.TOO_MANY_ATTEMPTS);
  filter.doFilter(servletRequest,servletResponse,filterChain);
  verifyNoMoreInteractions(filterChain);
  verify(servletResponse).setStatus(429);
  verify(servletResponse).addHeader(HttpHeaders.CONTENT_TYPE,"application/json; charset=UTF-8");
  assertThat(outputStream.toString(StandardCharsets.UTF_8.name()),containsString("\"code\" : \"Neo.ClientError.Security.AuthenticationRateLimit\""));
  assertThat(outputStream.toString(StandardCharsets.UTF_8.name()),containsString("\"message\" : \"Too many failed authentication requests. " + "Please wait 5 seconds and try again.\""));
}
