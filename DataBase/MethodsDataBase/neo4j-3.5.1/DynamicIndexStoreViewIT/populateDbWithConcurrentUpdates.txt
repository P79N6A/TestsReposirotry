@Test public void populateDbWithConcurrentUpdates() throws Exception {
  GraphDatabaseService database=new TestGraphDatabaseFactory().newEmbeddedDatabase(testDirectory.databaseDir());
  try {
    RandomValues randomValues=RandomValues.create();
    int counter=1;
    for (int j=0; j < 100; j++) {
      try (Transaction transaction=database.beginTx()){
        for (int i=0; i < 5; i++) {
          Node node=database.createNode(Label.label("label" + counter));
          node.setProperty("property",randomValues.nextValue().asObject());
        }
        transaction.success();
      }
       counter++;
    }
    int populatorCount=5;
    ExecutorService executor=Executors.newFixedThreadPool(populatorCount);
    CountDownLatch startSignal=new CountDownLatch(1);
    AtomicBoolean endSignal=new AtomicBoolean();
    for (int i=0; i < populatorCount; i++) {
      executor.submit(new Populator(database,counter,startSignal,endSignal));
    }
    try {
      try (Transaction transaction=database.beginTx()){
        database.schema().indexFor(Label.label("label10")).on("property").create();
        transaction.success();
      }
       startSignal.countDown();
      try (Transaction transaction=database.beginTx()){
        database.schema().awaitIndexesOnline(populatorCount,TimeUnit.MINUTES);
        transaction.success();
      }
     }
  finally {
      endSignal.set(true);
      executor.shutdown();
    }
  }
  finally {
    database.shutdown();
    ConsistencyCheckService consistencyCheckService=new ConsistencyCheckService();
    Config config=Config.defaults(GraphDatabaseSettings.pagecache_memory,"8m");
    consistencyCheckService.runFullConsistencyCheck(testDirectory.databaseLayout(),config,ProgressMonitorFactory.NONE,FormattedLogProvider.toOutputStream(System.out),false);
  }
}
