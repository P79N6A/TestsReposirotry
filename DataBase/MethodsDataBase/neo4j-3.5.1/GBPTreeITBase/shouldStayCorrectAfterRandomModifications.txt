@Test public void shouldStayCorrectAfterRandomModifications() throws Exception {
  try (GBPTree<KEY,VALUE> index=createIndex()){
    Comparator<KEY> keyComparator=layout;
    Map<KEY,VALUE> data=new TreeMap<>(keyComparator);
    int count=100;
    int totalNumberOfRounds=10;
    for (int i=0; i < count; i++) {
      data.put(randomKey(random.random()),randomValue(random.random()));
    }
    try (Writer<KEY,VALUE> writer=index.writer()){
      for (      Map.Entry<KEY,VALUE> entry : data.entrySet()) {
        writer.put(entry.getKey(),entry.getValue());
      }
    }
     for (int round=0; round < totalNumberOfRounds; round++) {
      for (int i=0; i < count; i++) {
        KEY first=randomKey(random.random());
        KEY second=randomKey(random.random());
        KEY from;
        KEY to;
        if (layout.keySeed(first) < layout.keySeed(second)) {
          from=first;
          to=second;
        }
 else {
          from=second;
          to=first;
        }
        Map<KEY,VALUE> expectedHits=expectedHits(data,from,to,keyComparator);
        try (RawCursor<Hit<KEY,VALUE>,IOException> result=index.seek(from,to)){
          while (result.next()) {
            KEY key=result.get().key();
            if (expectedHits.remove(key) == null) {
              fail("Unexpected hit " + key + " when searching for "+ from+ " - "+ to);
            }
            assertTrue(keyComparator.compare(key,from) >= 0);
            if (keyComparator.compare(from,to) != 0) {
              assertTrue(keyComparator.compare(key,to) < 0);
            }
          }
          if (!expectedHits.isEmpty()) {
            fail("There were results which were expected to be returned, but weren't:" + expectedHits + " when searching range "+ from+ " - "+ to);
          }
        }
       }
      index.checkpoint(IOLimiter.UNLIMITED);
      randomlyModifyIndex(index,data,random.random(),(double)round / totalNumberOfRounds);
    }
    index.consistencyCheck();
  }
 }
