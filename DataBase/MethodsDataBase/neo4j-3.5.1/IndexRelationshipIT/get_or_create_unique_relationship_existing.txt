@Documented("Get or create unique relationship (existing).\n" + "\n" + "Here, in case\n"+ "of an already existing relationship, the sent data is ignored and the\n"+ "existing relationship returned.") @Test public void get_or_create_unique_relationship_existing(){
  final String index=indexes.newInstance();
  String key="name";
  String value="Peter";
  GraphDatabaseService graphdb=graphdb();
  helper.createRelationshipIndex(index);
  try (Transaction tx=graphdb.beginTx()){
    Node node1=graphdb.createNode();
    Node node2=graphdb.createNode();
    Relationship rel=node1.createRelationshipTo(node2,MyRelationshipTypes.KNOWS);
    graphdb.index().forRelationships(index).add(rel,key,value);
    tx.success();
  }
   gen.get().expectedStatus(200).payloadType(MediaType.APPLICATION_JSON_TYPE).payload("{\"key\": \"" + key + "\", \"value\": \""+ value+ "\", \"start\": \""+ functionalTestHelper.nodeUri(helper.createNode())+ "\", \"end\": \""+ functionalTestHelper.nodeUri(helper.createNode())+ "\", \"type\":\""+ MyRelationshipTypes.KNOWS+ "\"}").post(functionalTestHelper.relationshipIndexUri() + index + "?uniqueness=get_or_create");
}
