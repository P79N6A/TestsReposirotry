@Test public void testRangeMatchInOrderOnRandomValues() throws Exception {
  Assume.assumeTrue("Assume support for granular composite queries",testSuite.supportsGranularCompositeQueries());
  ValueType[] types=randomSetOfSupportedAndSortableTypes();
  List<Value> values=generateValuesFromType(types);
  List<IndexEntryUpdate<?>> updates=generateUpdatesFromValues(values);
  updateAndCommit(updates);
  TreeSet<IndexEntryUpdate> sortedValues=new TreeSet<>((u1,u2) -> Values.COMPARATOR.compare(u1.values()[0],u2.values()[0]));
  sortedValues.addAll(updates);
  for (int i=0; i < 100; i++) {
    ValueType type=random.among(types);
    Value from=random.randomValues().nextValueOfType(type);
    Value to=random.randomValues().nextValueOfType(type);
    if (Values.COMPARATOR.compare(from,to) > 0) {
      Value tmp=from;
      from=to;
      to=tmp;
    }
    boolean fromInclusive=random.nextBoolean();
    boolean toInclusive=random.nextBoolean();
    IndexQuery.RangePredicate<?> predicate=IndexQuery.range(0,from,fromInclusive,to,toInclusive);
    List<Long> expectedIds=expectedIds(sortedValues,from,to,fromInclusive,toInclusive);
    IndexOrder[] indexOrders=indexProvider.getCapability(descriptor).orderCapability(predicate.valueGroup().category());
    for (    IndexOrder order : indexOrders) {
      List<Long> actualIds=assertInOrder(order,predicate);
      actualIds.sort(Long::compare);
      assertThat(actualIds,equalTo(expectedIds));
    }
  }
}
