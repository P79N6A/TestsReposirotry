@Test public void shouldCheckHttpHeaders(){
  assertFalse(isValidHttpHeaderName(null));
  assertFalse(isValidHttpHeaderName(""));
  assertFalse(isValidHttpHeaderName(" "));
  assertFalse(isValidHttpHeaderName("      "));
  assertFalse(isValidHttpHeaderName(" \r "));
  assertFalse(isValidHttpHeaderName(" \r\n\t "));
  assertTrue(isValidHttpHeaderName(HttpHeaders.ACCEPT));
  assertTrue(isValidHttpHeaderName(HttpHeaders.ACCEPT_ENCODING));
  assertTrue(isValidHttpHeaderName(HttpHeaders.AGE));
  assertTrue(isValidHttpHeaderName(HttpHeaders.CONTENT_ENCODING));
  assertTrue(isValidHttpHeaderName(HttpHeaders.EXPIRES));
  assertTrue(isValidHttpHeaderName(HttpHeaders.IF_MATCH));
  assertTrue(isValidHttpHeaderName(HttpHeaders.TRANSFER_ENCODING));
  assertTrue(isValidHttpHeaderName("Weird Header With Spaces"));
  assertFalse(isValidHttpHeaderName("My\nHeader"));
  assertFalse(isValidHttpHeaderName("Other\rStrange-Header"));
  assertFalse(isValidHttpHeaderName("Header-With-Tab\t"));
}
