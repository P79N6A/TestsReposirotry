@Test public void shouldDifferentiateNodesAndRelationships() throws Exception {
  SchemaDescriptor nodes=fulltextAdapter.schemaFor(NODE,new String[]{LABEL.name()},settings,PROP);
  SchemaDescriptor rels=fulltextAdapter.schemaFor(RELATIONSHIP,new String[]{RELTYPE.name()},settings,PROP);
  IndexReference nodesIndex;
  IndexReference relsIndex;
  try (KernelTransactionImplementation tx=getKernelTransaction()){
    nodesIndex=tx.schemaWrite().indexCreate(nodes,FulltextIndexProviderFactory.DESCRIPTOR.name(),Optional.of(NODE_INDEX_NAME));
    relsIndex=tx.schemaWrite().indexCreate(rels,FulltextIndexProviderFactory.DESCRIPTOR.name(),Optional.of(REL_INDEX_NAME));
    tx.success();
  }
   await(nodesIndex);
  await(relsIndex);
  long firstNodeID;
  long secondNodeID;
  long firstRelID;
  long secondRelID;
  try (Transaction tx=db.beginTx()){
    firstNodeID=createNodeIndexableByPropertyValue(LABEL,"Hello. Hello again.");
    secondNodeID=createNodeIndexableByPropertyValue(LABEL,"A zebroid (also zedonk, zorse, zebra mule, zonkey, and zebmule) is the offspring of any " + "cross between a zebra and any other equine: essentially, a zebra hybrid.");
    firstRelID=createRelationshipIndexableByPropertyValue(firstNodeID,secondNodeID,"Hello. Hello again.");
    secondRelID=createRelationshipIndexableByPropertyValue(secondNodeID,firstNodeID,"And now, something completely different");
    tx.success();
  }
   try (Transaction tx=db.beginTx()){
    KernelTransaction ktx=kernelTransaction(tx);
    assertQueryFindsIds(ktx,NODE_INDEX_NAME,"hello",firstNodeID);
    assertQueryFindsIds(ktx,NODE_INDEX_NAME,"zebra",secondNodeID);
    assertQueryFindsNothing(ktx,NODE_INDEX_NAME,"different");
    assertQueryFindsIds(ktx,REL_INDEX_NAME,"hello",firstRelID);
    assertQueryFindsNothing(ktx,REL_INDEX_NAME,"zebra");
    assertQueryFindsIds(ktx,REL_INDEX_NAME,"different",secondRelID);
  }
 }
