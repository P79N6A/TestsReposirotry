@Test public void shouldBeAbleToUpdateAndQueryAfterIndexChange() throws Exception {
  IndexReference index;
  try (KernelTransactionImplementation tx=getKernelTransaction()){
    SchemaDescriptor descriptor=fulltextAdapter.schemaFor(NODE,new String[]{LABEL.name()},settings,PROP);
    index=tx.schemaWrite().indexCreate(descriptor,FulltextIndexProviderFactory.DESCRIPTOR.name(),Optional.of(NODE_INDEX_NAME));
    tx.success();
  }
   await(index);
  long firstID;
  long secondID;
  long thirdID;
  long fourthID;
  try (Transaction tx=db.beginTx()){
    firstID=createNodeIndexableByPropertyValue(LABEL,"thing");
    secondID=db.createNode(LABEL).getId();
    setNodeProp(secondID,"prop2","zebra");
    thirdID=createNodeIndexableByPropertyValue(LABEL,"zebra");
    tx.success();
  }
   try (Transaction tx=db.beginTx()){
    KernelTransaction ktx=kernelTransaction(tx);
    assertQueryFindsIds(ktx,NODE_INDEX_NAME,"thing zebra",firstID,thirdID);
  }
   try (KernelTransactionImplementation tx=getKernelTransaction()){
    SchemaDescriptor descriptor=fulltextAdapter.schemaFor(NODE,new String[]{LABEL.name()},settings,"prop2");
    tx.schemaWrite().indexDrop(index);
    index=tx.schemaWrite().indexCreate(descriptor,FulltextIndexProviderFactory.DESCRIPTOR.name(),Optional.of(NODE_INDEX_NAME));
    tx.success();
  }
   await(index);
  try (Transaction tx=db.beginTx()){
    setNodeProp(firstID,"prop2","thing");
    fourthID=db.createNode(LABEL).getId();
    setNodeProp(fourthID,"prop2","zebra");
    tx.success();
  }
   try (Transaction tx=db.beginTx()){
    KernelTransaction ktx=kernelTransaction(tx);
    assertQueryFindsIds(ktx,NODE_INDEX_NAME,"thing zebra",firstID,secondID,fourthID);
  }
 }
