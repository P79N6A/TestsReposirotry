@Test public void shouldReuseExistingOrphanedConstraintIndex() throws Exception {
  IndexingService indexingService=mock(IndexingService.class);
  StubKernel kernel=new StubKernel();
  long orphanedConstraintIndexId=111;
  when(schemaRead.indexGetCommittedId(indexReference)).thenReturn(orphanedConstraintIndexId);
  IndexProxy indexProxy=mock(IndexProxy.class);
  when(indexingService.getIndexProxy(orphanedConstraintIndexId)).thenReturn(indexProxy);
  NodePropertyAccessor nodePropertyAccessor=mock(NodePropertyAccessor.class);
  when(schemaRead.index(descriptor)).thenReturn(indexReference);
  when(schemaRead.indexGetOwningUniquenessConstraintId(indexReference)).thenReturn(null);
  ConstraintIndexCreator creator=new ConstraintIndexCreator(() -> kernel,indexingService,nodePropertyAccessor,logProvider);
  KernelTransactionImplementation transaction=createTransaction();
  long indexId=creator.createUniquenessConstraintIndex(transaction,descriptor,getDefaultProvider());
  assertEquals(orphanedConstraintIndexId,indexId);
  assertEquals("There should have been no need to acquire a statement to create the constraint index",0,kernel.transactions.size());
  verify(schemaRead).indexGetCommittedId(indexReference);
  verify(schemaRead).index(descriptor);
  verify(schemaRead).indexGetOwningUniquenessConstraintId(indexReference);
  verifyNoMoreInteractions(schemaRead);
  verify(indexProxy).awaitStoreScanCompleted();
}
