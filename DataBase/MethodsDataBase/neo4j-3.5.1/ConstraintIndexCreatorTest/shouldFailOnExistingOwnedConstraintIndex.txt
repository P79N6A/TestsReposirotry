@Test public void shouldFailOnExistingOwnedConstraintIndex() throws Exception {
  IndexingService indexingService=mock(IndexingService.class);
  StubKernel kernel=new StubKernel();
  long constraintIndexId=111;
  long constraintIndexOwnerId=222;
  when(schemaRead.indexGetCommittedId(indexReference)).thenReturn(constraintIndexId);
  IndexProxy indexProxy=mock(IndexProxy.class);
  when(indexingService.getIndexProxy(constraintIndexId)).thenReturn(indexProxy);
  NodePropertyAccessor nodePropertyAccessor=mock(NodePropertyAccessor.class);
  when(schemaRead.index(descriptor)).thenReturn(indexReference);
  when(schemaRead.indexGetOwningUniquenessConstraintId(indexReference)).thenReturn(constraintIndexOwnerId);
  when(tokenRead.nodeLabelName(LABEL_ID)).thenReturn("MyLabel");
  when(tokenRead.propertyKeyName(PROPERTY_KEY_ID)).thenReturn("MyKey");
  ConstraintIndexCreator creator=new ConstraintIndexCreator(() -> kernel,indexingService,nodePropertyAccessor,logProvider);
  try {
    KernelTransactionImplementation transaction=createTransaction();
    creator.createUniquenessConstraintIndex(transaction,descriptor,getDefaultProvider());
    fail("Should've failed");
  }
 catch (  AlreadyConstrainedException e) {
  }
  assertEquals("There should have been no need to acquire a statement to create the constraint index",0,kernel.transactions.size());
  verify(schemaRead).index(descriptor);
  verify(schemaRead).indexGetOwningUniquenessConstraintId(indexReference);
  verifyNoMoreInteractions(schemaRead);
}
