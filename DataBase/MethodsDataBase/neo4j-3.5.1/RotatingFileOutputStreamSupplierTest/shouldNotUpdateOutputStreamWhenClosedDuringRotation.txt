@Test void shouldNotUpdateOutputStreamWhenClosedDuringRotation() throws Exception {
  final CountDownLatch allowRotationComplete=new CountDownLatch(1);
  RotationListener rotationListener=spy(new RotationListener(){
    @Override public void outputFileCreated(    OutputStream out){
      try {
        allowRotationComplete.await();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  final List<OutputStream> mockStreams=new ArrayList<>();
  FileSystemAbstraction fs=new DelegatingFileSystemAbstraction(fileSystem){
    @Override public OutputStream openAsOutputStream(    File fileName,    boolean append) throws IOException {
      final OutputStream stream=spy(super.openAsOutputStream(fileName,append));
      mockStreams.add(stream);
      return stream;
    }
  }
;
  ExecutorService rotationExecutor=Executors.newSingleThreadExecutor();
  try {
    RotatingFileOutputStreamSupplier supplier=new RotatingFileOutputStreamSupplier(fs,logFile,10,0,10,rotationExecutor,rotationListener);
    OutputStream outputStream=supplier.get();
    write(supplier,"A string longer than 10 bytes");
    assertThat(supplier.get(),is(outputStream));
    allowRotationComplete.countDown();
    supplier.close();
  }
  finally {
    shutDownExecutor(rotationExecutor);
  }
  assertStreamClosed(mockStreams.get(0));
}
