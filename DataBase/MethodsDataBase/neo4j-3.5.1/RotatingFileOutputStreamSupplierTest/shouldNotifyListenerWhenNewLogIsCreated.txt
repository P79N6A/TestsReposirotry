@Test void shouldNotifyListenerWhenNewLogIsCreated() throws Exception {
  final CountDownLatch allowRotationComplete=new CountDownLatch(1);
  final CountDownLatch rotationComplete=new CountDownLatch(1);
  String outputFileCreatedMessage="Output file created";
  String rotationCompleteMessage="Rotation complete";
  RotationListener rotationListener=spy(new RotationListener(){
    @Override public void outputFileCreated(    OutputStream out){
      try {
        allowRotationComplete.await(1L,TimeUnit.SECONDS);
        out.write(outputFileCreatedMessage.getBytes());
      }
 catch (      InterruptedException|IOException e) {
        throw new RuntimeException(e);
      }
    }
    @Override public void rotationCompleted(    OutputStream out){
      rotationComplete.countDown();
      try {
        out.write(rotationCompleteMessage.getBytes());
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  ExecutorService rotationExecutor=Executors.newSingleThreadExecutor();
  try {
    RotatingFileOutputStreamSupplier supplier=new RotatingFileOutputStreamSupplier(fileSystem,logFile,10,0,10,rotationExecutor,rotationListener);
    write(supplier,"A string longer than 10 bytes");
    write(supplier,"A string longer than 10 bytes");
    allowRotationComplete.countDown();
    rotationComplete.await(1L,TimeUnit.SECONDS);
    verify(rotationListener).outputFileCreated(any(OutputStream.class));
    verify(rotationListener).rotationCompleted(any(OutputStream.class));
  }
  finally {
    shutDownExecutor(rotationExecutor);
  }
}
