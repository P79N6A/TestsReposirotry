@Test void shouldCloseAllStreamsDespiteError() throws Exception {
  final List<OutputStream> mockStreams=new ArrayList<>();
  FileSystemAbstraction fs=new DelegatingFileSystemAbstraction(fileSystem){
    @Override public OutputStream openAsOutputStream(    File fileName,    boolean append) throws IOException {
      final OutputStream stream=spy(super.openAsOutputStream(fileName,append));
      mockStreams.add(stream);
      return stream;
    }
  }
;
  RotatingFileOutputStreamSupplier supplier=new RotatingFileOutputStreamSupplier(fs,logFile,10,0,10,DIRECT_EXECUTOR);
  write(supplier,"A string longer than 10 bytes");
  write(supplier,"A string longer than 10 bytes");
  IOException exception=new IOException("test exception");
  OutputStream mockStream=mockStreams.get(1);
  doThrow(exception).when(mockStream).close();
  IOException ioException=assertThrows(IOException.class,supplier::close);
  assertThat(ioException,sameInstance(exception));
  verify(mockStream).close();
}
