@Test void shouldHaveReasonableCoveredArea(){
  final double minExtent=0.000001;
  final double maxAspect=100.0;
  final int xmin=-100;
  final int xmax=100;
  final int ymin=-100;
  final int ymax=100;
  final double rectangleStepsPerDimension=9.789;
  final double extensionFactor=5;
  String formatHeader1="Level  Depth Limitation Configuration                  Area Ratio              Ranges                  Depth";
  String formatHeader2="                                                        avg    min    max       avg    min    max       avg    min    max";
  String formatBody="%5d  %-42s   %7.2f%7.2f%7.2f   %7.2f%7d%7d   %7.2f%7d%7d";
  Envelope envelope=new Envelope(xmin,xmax,ymin,ymax);
  for (int level=1; level <= HilbertSpaceFillingCurve2D.MAX_LEVEL; level++) {
    if (debug) {
      logger.debug("");
      logger.debug(formatHeader1);
      logger.debug(formatHeader2);
    }
    for (    SpaceFillingCurveConfiguration config : new SpaceFillingCurveConfiguration[]{new StandardConfiguration(1),new StandardConfiguration(2),new StandardConfiguration(3),new StandardConfiguration(4),new PartialOverlapConfiguration(1,0.99,0.1),new PartialOverlapConfiguration(1,0.99,0.5),new PartialOverlapConfiguration(2,0.99,0.1),new PartialOverlapConfiguration(2,0.99,0.5),new PartialOverlapConfiguration(3,0.99,0.1),new PartialOverlapConfiguration(3,0.99,0.5),new PartialOverlapConfiguration(4,0.99,0.1),new PartialOverlapConfiguration(4,0.99,0.5)}) {
      MonitorDoubleStats areaStats=new MonitorDoubleStats();
      MonitorStats rangeStats=new MonitorStats();
      MonitorStats maxDepthStats=new MonitorStats();
      HilbertSpaceFillingCurve2D curve=new HilbertSpaceFillingCurve2D(envelope,level);
      for (double xExtent=minExtent; xExtent <= xmax; xExtent*=extensionFactor) {
        for (double yExtent=minExtent; yExtent <= ymax; yExtent*=extensionFactor) {
          double aspect=xExtent > yExtent ? (xExtent / yExtent) : (yExtent / xExtent);
          if (aspect < maxAspect) {
            for (double xOffset=0; xmin + xOffset + xExtent <= xmax; xOffset+=(xmax - xmin - xExtent) / rectangleStepsPerDimension) {
              for (double yOffset=0; xmin + yOffset + yExtent <= ymax; yOffset+=(ymax - ymin - yExtent) / rectangleStepsPerDimension) {
                HistogramMonitor monitor=new HistogramMonitor(curve.getMaxLevel());
                final double xStart=xmin + xOffset;
                final double xEnd=xStart + xExtent;
                final double yStart=ymin + yOffset;
                final double yEnd=yStart + yExtent;
                Envelope searchEnvelope=new Envelope(xStart,xEnd,yStart,yEnd);
                final long start=System.currentTimeMillis();
                List<SpaceFillingCurve.LongRange> ranges=curve.getTilesIntersectingEnvelope(searchEnvelope,config,monitor);
                if (debug) {
                  final long end=System.currentTimeMillis();
                  logger.debug(String.format("Results for level %d, with x=[%f,%f] y=[%f,%f]. " + "Search size vs covered size: %d vs %d (%f x). Ranges: %d. Took %d ms\n",level,xStart,xEnd,yStart,yEnd,monitor.getSearchArea(),monitor.getCoveredArea(),(double)(monitor.getCoveredArea()) / monitor.getSearchArea(),ranges.size(),end - start));
                  int[] counts=monitor.getCounts();
                  for (int i=0; i <= monitor.getHighestDepth(); i++) {
                    logger.debug("\t" + i + "\t"+ counts[i]);
                  }
                  areaStats.add((double)(monitor.getCoveredArea()) / monitor.getSearchArea());
                  rangeStats.add(ranges.size());
                  maxDepthStats.add(monitor.getHighestDepth());
                }
                assertThat(ranges,not(empty()));
                assertThat(String.format("Search size was bigger than covered size for level %d, with x=[%a,%a] y=[%a,%a]",level,xStart,xEnd,yStart,yEnd),monitor.getSearchArea(),lessThanOrEqualTo(monitor.getCoveredArea()));
              }
            }
          }
        }
      }
      if (debug) {
        logger.debug(String.format(formatBody,level,config.toString(),areaStats.avg(),areaStats.min,areaStats.max,rangeStats.avg(),rangeStats.min,rangeStats.max,maxDepthStats.avg(),maxDepthStats.min,maxDepthStats.max));
      }
    }
  }
}
