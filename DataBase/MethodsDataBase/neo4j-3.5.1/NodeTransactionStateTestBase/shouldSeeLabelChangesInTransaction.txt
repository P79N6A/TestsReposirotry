@Test public void shouldSeeLabelChangesInTransaction() throws Exception {
  long nodeId;
  int toRetain, toDelete, toAdd, toRegret;
  final String toRetainName="ToRetain";
  final String toDeleteName="ToDelete";
  final String toAddName="ToAdd";
  final String toRegretName="ToRegret";
  try (Transaction tx=beginTransaction()){
    nodeId=tx.dataWrite().nodeCreate();
    toRetain=tx.token().labelGetOrCreateForName(toRetainName);
    toDelete=tx.token().labelGetOrCreateForName(toDeleteName);
    tx.dataWrite().nodeAddLabel(nodeId,toRetain);
    tx.dataWrite().nodeAddLabel(nodeId,toDelete);
    tx.success();
  }
   try (org.neo4j.graphdb.Transaction ignore=graphDb.beginTx()){
    assertThat(graphDb.getNodeById(nodeId).getLabels(),containsInAnyOrder(label(toRetainName),label(toDeleteName)));
  }
   try (Transaction tx=beginTransaction()){
    toAdd=tx.token().labelGetOrCreateForName(toAddName);
    tx.dataWrite().nodeAddLabel(nodeId,toAdd);
    tx.dataWrite().nodeRemoveLabel(nodeId,toDelete);
    toRegret=tx.token().labelGetOrCreateForName(toRegretName);
    tx.dataWrite().nodeAddLabel(nodeId,toRegret);
    tx.dataWrite().nodeRemoveLabel(nodeId,toRegret);
    try (NodeCursor node=tx.cursors().allocateNodeCursor()){
      tx.dataRead().singleNode(nodeId,node);
      assertTrue("should access node",node.next());
      assertLabels(node.labels(),toRetain,toAdd);
      assertTrue(node.hasLabel(toAdd));
      assertTrue(node.hasLabel(toRetain));
      assertFalse(node.hasLabel(toDelete));
      assertFalse(node.hasLabel(toRegret));
      assertFalse("should only find one node",node.next());
    }
     tx.success();
  }
   try (org.neo4j.graphdb.Transaction ignored=graphDb.beginTx()){
    assertThat(graphDb.getNodeById(nodeId).getLabels(),containsInAnyOrder(label(toRetainName),label(toAddName)));
  }
 }
