@Test public void shouldTraverseTreeOfDepthThree(){
  try (NodeCursor node=cursors.allocateNodeCursor();RelationshipGroupCursor group=cursors.allocateRelationshipGroupCursor();RelationshipTraversalCursor relationship1=cursors.allocateRelationshipTraversalCursor();RelationshipTraversalCursor relationship2=cursors.allocateRelationshipTraversalCursor()){
    MutableLongSet leafs=new LongHashSet();
    long total=0;
    read.singleNode(three_root,node);
    assertTrue("access root node",node.next());
    node.relationships(group);
    assertFalse("single root",node.next());
    assertTrue("access group of root",group.next());
    group.incoming(relationship1);
    assertFalse("single group of root",group.next());
    while (relationship1.next()) {
      relationship1.neighbour(node);
      assertTrue("child level 1",node.next());
      node.relationships(group);
      assertFalse("single node",node.next());
      assertTrue("group of level 1 child",group.next());
      group.incoming(relationship2);
      assertFalse("single group of level 1 child",group.next());
      while (relationship2.next()) {
        leafs.add(relationship2.neighbourNodeReference());
        total++;
      }
    }
    assertEquals("total number of leaf nodes",expected_total,total);
    assertEquals("number of distinct leaf nodes",expected_unique,leafs.size());
  }
 }
