@Test public void shouldPutFromMultipleThreads() throws Throwable {
  IdMapper idMapper=mapper(new StringEncoder(),Radix.STRING,NO_MONITOR);
  AtomicLong highNodeId=new AtomicLong();
  int batchSize=1234;
  Race race=new Race();
  LongFunction<Object> inputIdLookup=String::valueOf;
  int countPerThread=30_000;
  race.addContestants(processors,() -> {
    int cursor=batchSize;
    long nextNodeId=0;
    for (int j=0; j < countPerThread; j++) {
      if (cursor == batchSize) {
        nextNodeId=highNodeId.getAndAdd(batchSize);
        cursor=0;
      }
      long nodeId=nextNodeId++;
      cursor++;
      idMapper.put(inputIdLookup.apply(nodeId),nodeId,GLOBAL);
    }
  }
);
  race.go();
  idMapper.prepare(inputIdLookup,mock(Collector.class),ProgressListener.NONE);
  int count=processors * countPerThread;
  int countWithGapsWorstCase=count + batchSize * processors;
  int correctHits=0;
  for (long nodeId=0; nodeId < countWithGapsWorstCase; nodeId++) {
    long result=idMapper.get(inputIdLookup.apply(nodeId),GLOBAL);
    if (result != -1) {
      assertEquals(nodeId,result);
      correctHits++;
    }
  }
  assertEquals(count,correctHits);
}
