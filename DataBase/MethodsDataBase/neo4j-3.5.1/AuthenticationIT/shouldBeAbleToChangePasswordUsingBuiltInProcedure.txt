@Test public void shouldBeAbleToChangePasswordUsingBuiltInProcedure() throws Throwable {
  connection.connect(address).send(util.defaultAcceptedVersions()).send(util.chunk(new InitMessage("TestClient/1.1",map("principal","neo4j","credentials","neo4j","scheme","basic"))));
  assertThat(connection,util.eventuallyReceivesSelectedProtocolVersion());
  assertThat(connection,util.eventuallyReceives(msgSuccess(map("credentials_expired",true,"server",version))));
  connection.send(util.chunk(new RunMessage("CALL dbms.security.changePassword",singletonMap("password","secret")),PullAllMessage.INSTANCE));
  assertThat(connection,util.eventuallyReceives(msgSuccess()));
  reconnect();
  connection.connect(address).send(util.defaultAcceptedVersions()).send(util.chunk(new InitMessage("TestClient/1.1",map("principal","neo4j","credentials","neo4j","scheme","basic"))));
  assertThat(connection,util.eventuallyReceivesSelectedProtocolVersion());
  assertThat(connection,util.eventuallyReceives(msgFailure(Status.Security.Unauthorized,"The client is unauthorized due to authentication failure.")));
  reconnect();
  connection.connect(address).send(util.defaultAcceptedVersions()).send(util.chunk(new InitMessage("TestClient/1.1",map("principal","neo4j","credentials","secret","scheme","basic"))));
  assertThat(connection,util.eventuallyReceivesSelectedProtocolVersion());
  assertThat(connection,util.eventuallyReceives(msgSuccess()));
}
