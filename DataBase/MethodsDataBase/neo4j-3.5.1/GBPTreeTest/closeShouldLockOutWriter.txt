@Test(timeout=50_000L) public void closeShouldLockOutWriter() throws Exception {
  AtomicBoolean enabled=new AtomicBoolean();
  Barrier.Control barrier=new Barrier.Control();
  PageCache pageCacheWithBarrier=pageCacheWithBarrierInClose(enabled,barrier);
  GBPTree<MutableLong,MutableLong> index=index(pageCacheWithBarrier).build();
  long key=10;
  try (Writer<MutableLong,MutableLong> writer=index.writer()){
    writer.put(new MutableLong(key),new MutableLong(key));
  }
   enabled.set(true);
  Future<?> close=executor.submit(throwing(index::close));
  barrier.awaitUninterruptibly();
  AtomicReference<Exception> writerError=new AtomicReference<>();
  Future<?> write=executor.submit(() -> {
    try {
      index.writer().close();
    }
 catch (    Exception e) {
      writerError.set(e);
    }
  }
);
  shouldWait(write);
  barrier.release();
  write.get();
  close.get();
  assertTrue("Writer should not be able to acquired after close",writerError.get() instanceof FileIsNotMappedException);
}
