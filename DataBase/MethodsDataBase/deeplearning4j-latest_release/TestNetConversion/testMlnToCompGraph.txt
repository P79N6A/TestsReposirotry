@Test public void testMlnToCompGraph(){
  Nd4j.getRandom().setSeed(12345);
  for (int i=0; i < 3; i++) {
    MultiLayerNetwork n;
switch (i) {
case 0:
      n=getNet1(false);
    break;
case 1:
  n=getNet1(true);
break;
case 2:
n=getNet2();
break;
default :
throw new RuntimeException();
}
INDArray in=(i <= 1 ? Nd4j.rand(new int[]{8,3,10,10}) : Nd4j.rand(new int[]{8,5,10}));
INDArray labels=(i <= 1 ? Nd4j.rand(new int[]{8,10}) : Nd4j.rand(new int[]{8,10,10}));
ComputationGraph cg=n.toComputationGraph();
INDArray out1=n.output(in);
INDArray out2=cg.outputSingle(in);
assertEquals(out1,out2);
n.setInput(in);
n.setLabels(labels);
cg.setInputs(in);
cg.setLabels(labels);
n.computeGradientAndScore();
cg.computeGradientAndScore();
assertEquals(n.score(),cg.score(),1e-6);
assertEquals(n.gradient().gradient(),cg.gradient().gradient());
n.fit(in,labels);
cg.fit(new INDArray[]{in},new INDArray[]{labels});
assertEquals(n.params(),cg.params());
}
}
