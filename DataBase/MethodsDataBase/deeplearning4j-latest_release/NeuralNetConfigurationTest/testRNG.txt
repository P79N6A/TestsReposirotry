@Test public void testRNG(){
  DenseLayer layer=new DenseLayer.Builder().nIn(trainingSet.numInputs()).nOut(trainingSet.numOutcomes()).weightInit(WeightInit.UNIFORM).activation(Activation.TANH).build();
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().seed(123).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).layer(layer).build();
  long numParams=conf.getLayer().initializer().numParams(conf);
  INDArray params=Nd4j.create(1,numParams);
  Layer model=conf.getLayer().instantiate(conf,null,0,params,true);
  INDArray modelWeights=model.getParam(DefaultParamInitializer.WEIGHT_KEY);
  DenseLayer layer2=new DenseLayer.Builder().nIn(trainingSet.numInputs()).nOut(trainingSet.numOutcomes()).weightInit(WeightInit.UNIFORM).activation(Activation.TANH).build();
  NeuralNetConfiguration conf2=new NeuralNetConfiguration.Builder().seed(123).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).layer(layer2).build();
  long numParams2=conf2.getLayer().initializer().numParams(conf);
  INDArray params2=Nd4j.create(1,numParams);
  Layer model2=conf2.getLayer().instantiate(conf2,null,0,params2,true);
  INDArray modelWeights2=model2.getParam(DefaultParamInitializer.WEIGHT_KEY);
  assertEquals(modelWeights,modelWeights2);
}
