@Test public void testNDArrayRecordBatch(){
  Nd4j.getRandom().setSeed(12345);
  List<List<INDArray>> orig=new ArrayList<>();
  for (int i=0; i < 3; i++) {
    orig.add(new ArrayList<INDArray>());
  }
  for (int i=0; i < 5; i++) {
    orig.get(0).add(Nd4j.rand(1,10));
    orig.get(1).add(Nd4j.rand(new int[]{1,5,6}));
    orig.get(2).add(Nd4j.rand(new int[]{1,3,4,5}));
  }
  List<List<INDArray>> origByExample=new ArrayList<>();
  for (int i=0; i < 5; i++) {
    origByExample.add(Arrays.asList(orig.get(0).get(i),orig.get(1).get(i),orig.get(2).get(i)));
  }
  List<INDArray> batched=new ArrayList<>();
  for (  List<INDArray> l : orig) {
    batched.add(Nd4j.concat(0,l.toArray(new INDArray[5])));
  }
  NDArrayRecordBatch batch=new NDArrayRecordBatch(batched);
  assertEquals(5,batch.size());
  for (int i=0; i < 5; i++) {
    List<Writable> act=batch.get(i);
    List<INDArray> unboxed=new ArrayList<>();
    for (    Writable w : act) {
      unboxed.add(((NDArrayWritable)w).get());
    }
    List<INDArray> exp=origByExample.get(i);
    assertEquals(exp.size(),unboxed.size());
    for (int j=0; j < exp.size(); j++) {
      assertEquals(exp.get(j),unboxed.get(j));
    }
  }
  Iterator<List<Writable>> iter=batch.iterator();
  int count=0;
  while (iter.hasNext()) {
    List<Writable> next=iter.next();
    List<INDArray> unboxed=new ArrayList<>();
    for (    Writable w : next) {
      unboxed.add(((NDArrayWritable)w).get());
    }
    List<INDArray> exp=origByExample.get(count++);
    assertEquals(exp.size(),unboxed.size());
    for (int j=0; j < exp.size(); j++) {
      assertEquals(exp.get(j),unboxed.get(j));
    }
  }
  assertEquals(5,count);
}
