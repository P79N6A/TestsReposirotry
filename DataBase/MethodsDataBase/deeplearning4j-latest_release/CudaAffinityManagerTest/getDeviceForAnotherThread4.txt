/** 
 * This is special test for multi-threaded multi-gpu environment
 * @throws Exception
 */
@Test public void getDeviceForAnotherThread4() throws Exception {
  final int limit=10;
  final CudaAffinityManager manager=new CudaAffinityManager();
  final Thread threads[]=new Thread[limit];
  final AtomicBoolean[] results=new AtomicBoolean[limit];
  final int cards[]=new int[limit];
  for (int cnt=0; cnt < limit; cnt++) {
    final int c=cnt;
    results[cnt]=new AtomicBoolean(false);
    threads[cnt]=new Thread(new Runnable(){
      @Override public void run(){
        final int deviceId=manager.getDeviceForCurrentThread();
        Thread thread=new Thread(new Runnable(){
          @Override public void run(){
            int cdev=manager.getDeviceForCurrentThread();
            assertEquals(deviceId,cdev);
            results[c].set(true);
            cards[c]=cdev;
          }
        }
);
        manager.attachThreadToDevice(thread,deviceId);
        thread.start();
        try {
          thread.join();
        }
 catch (        Exception e) {
          ;
        }
      }
    }
);
    threads[cnt].start();
  }
  for (int cnt=0; cnt < limit; cnt++) {
    threads[cnt].join();
    assertTrue("Failed for thread [" + cnt + "]",results[cnt].get());
  }
  int numDevices=Nd4j.getAffinityManager().getNumberOfDevices();
  for (int c=0; c < numDevices; c++) {
    assertTrue("Failed to find device [" + c + "] in used devices",ArrayUtils.contains(cards,c));
  }
}
