/** 
 * This is special test for multi-threaded environment
 * @throws Exception
 */
@Test public void getDeviceForAnotherThread3() throws Exception {
  final int limit=10;
  final CudaAffinityManager manager=new CudaAffinityManager();
  final Thread threads[]=new Thread[limit];
  final AtomicBoolean[] results=new AtomicBoolean[limit];
  for (int cnt=0; cnt < limit; cnt++) {
    final int c=cnt;
    results[cnt]=new AtomicBoolean(false);
    threads[cnt]=new Thread(new Runnable(){
      @Override public void run(){
        assertEquals(0,manager.getDeviceForCurrentThread().intValue());
        results[c].set(true);
      }
    }
);
    manager.attachThreadToDevice(threads[cnt],0);
    threads[cnt].start();
  }
  for (int cnt=0; cnt < limit; cnt++) {
    threads[cnt].join();
    assertTrue("Failed for thread [" + cnt + "]",results[cnt].get());
  }
}
