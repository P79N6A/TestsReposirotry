@Test(timeout=60000L) public void testEvaluationAndRoc(){
  for (  int evalWorkers : new int[]{1,4,8}) {
    DataSetIterator iter=new IrisDataSetIterator(5,150);
    List<DataSet> l=new ArrayList<>();
    iter.reset();
    while (iter.hasNext()) {
      DataSet ds=iter.next();
      INDArray newL=Nd4j.create(ds.getLabels().size(0),2);
      newL.putColumn(0,ds.getLabels().getColumn(0));
      newL.putColumn(1,ds.getLabels().getColumn(1));
      newL.getColumn(1).addi(ds.getLabels().getColumn(2));
      ds.setLabels(newL);
      l.add(ds);
    }
    iter=new ListDataSetIterator<>(l);
    ComputationGraph cg=getBasicNetIris2Class();
    Evaluation e=cg.evaluate(iter);
    ROC roc=cg.evaluateROC(iter,32);
    SparkComputationGraph scg=new SparkComputationGraph(sc,cg,null);
    scg.setDefaultEvaluationWorkers(evalWorkers);
    JavaRDD<DataSet> rdd=sc.parallelize(l);
    rdd=rdd.repartition(20);
    Evaluation e2=scg.evaluate(rdd);
    ROC roc2=scg.evaluateROC(rdd);
    assertEquals(e2.accuracy(),e.accuracy(),1e-3);
    assertEquals(e2.f1(),e.f1(),1e-3);
    assertEquals(e2.getNumRowCounter(),e.getNumRowCounter(),1e-3);
    assertEquals(e2.falseNegatives(),e.falseNegatives());
    assertEquals(e2.falsePositives(),e.falsePositives());
    assertEquals(e2.trueNegatives(),e.trueNegatives());
    assertEquals(e2.truePositives(),e.truePositives());
    assertEquals(e2.precision(),e.precision(),1e-3);
    assertEquals(e2.recall(),e.recall(),1e-3);
    assertEquals(e2.getConfusionMatrix(),e.getConfusionMatrix());
    assertEquals(roc.calculateAUC(),roc2.calculateAUC(),1e-5);
    assertEquals(roc.calculateAUCPR(),roc2.calculateAUCPR(),1e-5);
  }
}
