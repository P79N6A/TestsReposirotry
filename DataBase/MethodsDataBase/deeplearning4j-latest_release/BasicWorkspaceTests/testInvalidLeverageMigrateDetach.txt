@Test public void testInvalidLeverageMigrateDetach(){
  try {
    MemoryWorkspace ws=Nd4j.getWorkspaceManager().getWorkspaceForCurrentThread(basicConfig,"testInvalidLeverage");
    INDArray invalidArray=null;
    for (int i=0; i < 10; i++) {
      try (MemoryWorkspace ws2=ws.notifyScopeEntered()){
        invalidArray=Nd4j.linspace(1,10,10);
      }
     }
    assertTrue(invalidArray.isAttached());
    MemoryWorkspace ws2=Nd4j.getWorkspaceManager().getWorkspaceForCurrentThread(basicConfig,"testInvalidLeverage2");
    try (MemoryWorkspace ws3=ws2.notifyScopeEntered()){
      invalidArray.leverage();
      fail("Exception should be thrown");
    }
 catch (    ND4JWorkspaceException e) {
      e.printStackTrace();
    }
    try (MemoryWorkspace ws3=ws2.notifyScopeEntered()){
      invalidArray.leverageTo("testInvalidLeverage2");
      fail("Exception should be thrown");
    }
 catch (    ND4JWorkspaceException e) {
      e.printStackTrace();
    }
    try (MemoryWorkspace ws3=ws2.notifyScopeEntered()){
      invalidArray.leverageOrDetach("testInvalidLeverage2");
      fail("Exception should be thrown");
    }
 catch (    ND4JWorkspaceException e) {
      e.printStackTrace();
    }
    try {
      invalidArray.leverageTo("testInvalidLeverage2");
      fail("Exception should be thrown");
    }
 catch (    ND4JWorkspaceException e) {
      e.printStackTrace();
    }
    try {
      invalidArray.detach();
      fail("Exception should be thrown");
    }
 catch (    ND4JWorkspaceException e) {
      e.printStackTrace();
    }
    try (MemoryWorkspace ws3=ws2.notifyScopeEntered()){
      invalidArray.migrate();
      fail("Exception should be thrown");
    }
 catch (    ND4JWorkspaceException e) {
      e.printStackTrace();
    }
    try {
      invalidArray.migrate(true);
      fail("Exception should be thrown");
    }
 catch (    ND4JWorkspaceException e) {
      e.printStackTrace();
    }
    try {
      invalidArray.dup();
      fail("Exception should be thrown");
    }
 catch (    ND4JWorkspaceException e) {
      e.printStackTrace();
    }
    try {
      invalidArray.unsafeDuplication();
      fail("Exception should be thrown");
    }
 catch (    ND4JWorkspaceException e) {
      e.printStackTrace();
    }
    try {
      invalidArray.unsafeDuplication(true);
      fail("Exception should be thrown");
    }
 catch (    ND4JWorkspaceException e) {
      e.printStackTrace();
    }
  }
  finally {
    Nd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();
  }
}
