@Test public void testLoops1() throws Exception {
  Nd4jWorkspace workspace=(Nd4jWorkspace)Nd4j.getWorkspaceManager().createNewWorkspace(loopOverTimeConfig);
  Nd4j.getMemoryManager().setCurrentWorkspace(workspace);
  assertNotEquals(null,Nd4j.getMemoryManager().getCurrentWorkspace());
  assertEquals(0,workspace.getHostOffset());
  workspace.notifyScopeEntered();
  INDArray arrayCold=Nd4j.create(10);
  assertEquals(0,workspace.getHostOffset());
  assertEquals(0,workspace.getCurrentSize());
  arrayCold.assign(1.0f);
  assertEquals(10f,arrayCold.sumNumber().floatValue(),0.01f);
  workspace.notifyScopeLeft();
  workspace.initializeWorkspace();
  long reqMemory=11 * Nd4j.sizeOfDataType();
  assertEquals(reqMemory + reqMemory % 8,workspace.getCurrentSize());
  log.info("-----------------------");
  for (int x=0; x < 10; x++) {
    assertEquals(0,workspace.getHostOffset());
    workspace.notifyScopeEntered();
    INDArray array=Nd4j.create(10);
    long reqMem=10 * Nd4j.sizeOfDataType();
    assertEquals(reqMem + reqMem % 8,workspace.getHostOffset());
    array.addi(1.0f);
    assertEquals(reqMem + reqMem % 8,workspace.getHostOffset());
    assertEquals("Failed on iteration " + x,10,array.sumNumber().doubleValue(),0.01);
    workspace.notifyScopeLeft();
    assertEquals(0,workspace.getHostOffset());
  }
}
