@Test public void testToggle1() throws Exception {
  Nd4jWorkspace workspace=(Nd4jWorkspace)Nd4j.getWorkspaceManager().createNewWorkspace(loopFirstConfig);
  Nd4j.getMemoryManager().setCurrentWorkspace(workspace);
  assertNotEquals(null,Nd4j.getMemoryManager().getCurrentWorkspace());
  assertEquals(0,workspace.getHostOffset());
  try (MemoryWorkspace cW=workspace.notifyScopeEntered()){
    INDArray array1=Nd4j.create(100);
    cW.toggleWorkspaceUse(false);
    INDArray arrayDetached=Nd4j.create(100);
    arrayDetached.assign(1.0f);
    double sum=arrayDetached.sumNumber().doubleValue();
    assertEquals(100f,sum,0.01);
    cW.toggleWorkspaceUse(true);
    INDArray array2=Nd4j.create(100);
  }
   assertEquals(0,workspace.getHostOffset());
  assertEquals(200 * Nd4j.sizeOfDataType(),workspace.getCurrentSize());
  log.info("--------------------------");
  try (MemoryWorkspace cW=workspace.notifyScopeEntered()){
    INDArray array1=Nd4j.create(100);
    cW.toggleWorkspaceUse(false);
    INDArray arrayDetached=Nd4j.create(100);
    arrayDetached.assign(1.0f);
    double sum=arrayDetached.sumNumber().doubleValue();
    assertEquals(100f,sum,0.01);
    cW.toggleWorkspaceUse(true);
    assertEquals(100 * Nd4j.sizeOfDataType(),workspace.getHostOffset());
    INDArray array2=Nd4j.create(100);
    assertEquals(200 * Nd4j.sizeOfDataType(),workspace.getHostOffset());
  }
 }
