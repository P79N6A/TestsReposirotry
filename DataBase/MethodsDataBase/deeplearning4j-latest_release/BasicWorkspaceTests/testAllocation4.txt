@Test public void testAllocation4() throws Exception {
  WorkspaceConfiguration failConfig=WorkspaceConfiguration.builder().initialSize(1024 * 1024).maxSize(1024 * 1024).overallocationLimit(0.1).policyAllocation(AllocationPolicy.STRICT).policyLearning(LearningPolicy.FIRST_LOOP).policyMirroring(MirroringPolicy.FULL).policySpill(SpillPolicy.FAIL).build();
  Nd4jWorkspace workspace=(Nd4jWorkspace)Nd4j.getWorkspaceManager().createNewWorkspace(failConfig);
  Nd4j.getMemoryManager().setCurrentWorkspace(workspace);
  assertNotEquals(null,Nd4j.getMemoryManager().getCurrentWorkspace());
  assertEquals(0,workspace.getHostOffset());
  INDArray array=Nd4j.create(new int[]{1,5},'c');
  long reqMem=5 * Nd4j.sizeOfDataType();
  assertEquals(reqMem + reqMem % 8,workspace.getHostOffset());
  try {
    INDArray array2=Nd4j.create(10000000);
    assertTrue(false);
  }
 catch (  ND4JIllegalStateException e) {
    assertTrue(true);
  }
  assertEquals(reqMem + reqMem % 8,workspace.getHostOffset());
  INDArray array2=Nd4j.create(new int[]{1,5},'c');
  assertEquals((reqMem + reqMem % 8) * 2,workspace.getHostOffset());
}
