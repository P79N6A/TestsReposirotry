@Test public void testNormalize(){
  List<List<Writable>> data=new ArrayList<>();
  data.add(Arrays.<Writable>asList(new DoubleWritable(1),new DoubleWritable(10)));
  data.add(Arrays.<Writable>asList(new DoubleWritable(2),new DoubleWritable(20)));
  data.add(Arrays.<Writable>asList(new DoubleWritable(3),new DoubleWritable(30)));
  List<List<Writable>> expMinMax=new ArrayList<>();
  expMinMax.add(Arrays.<Writable>asList(new DoubleWritable(0.0),new DoubleWritable(0.0)));
  expMinMax.add(Arrays.<Writable>asList(new DoubleWritable(0.5),new DoubleWritable(0.5)));
  expMinMax.add(Arrays.<Writable>asList(new DoubleWritable(1.0),new DoubleWritable(1.0)));
  double m1=(1 + 2 + 3) / 3.0;
  double s1=new StandardDeviation().evaluate(new double[]{1,2,3});
  double m2=(10 + 20 + 30) / 3.0;
  double s2=new StandardDeviation().evaluate(new double[]{10,20,30});
  List<List<Writable>> expStandardize=new ArrayList<>();
  expStandardize.add(Arrays.<Writable>asList(new DoubleWritable((1 - m1) / s1),new DoubleWritable((10 - m2) / s2)));
  expStandardize.add(Arrays.<Writable>asList(new DoubleWritable((2 - m1) / s1),new DoubleWritable((20 - m2) / s2)));
  expStandardize.add(Arrays.<Writable>asList(new DoubleWritable((3 - m1) / s1),new DoubleWritable((30 - m2) / s2)));
  JavaRDD<List<Writable>> rdd=sc.parallelize(data);
  Schema schema=new Schema.Builder().addColumnInteger("c0").addColumnDouble("c1").build();
  JavaRDD<List<Writable>> normalized=Normalization.normalize(schema,rdd);
  JavaRDD<List<Writable>> standardize=Normalization.zeromeanUnitVariance(schema,rdd);
  Comparator<List<Writable>> comparator=new ComparatorFirstCol();
  List<List<Writable>> c=new ArrayList<>(normalized.collect());
  List<List<Writable>> c2=new ArrayList<>(standardize.collect());
  Collections.sort(c,comparator);
  Collections.sort(c2,comparator);
  for (int i=0; i < expMinMax.size(); i++) {
    List<Writable> exp=expMinMax.get(i);
    List<Writable> act=c.get(i);
    for (int j=0; j < exp.size(); j++) {
      assertEquals(exp.get(j).toDouble(),act.get(j).toDouble(),1e-6);
    }
  }
  for (int i=0; i < expStandardize.size(); i++) {
    List<Writable> exp=expStandardize.get(i);
    List<Writable> act=c2.get(i);
    for (int j=0; j < exp.size(); j++) {
      assertEquals(exp.get(j).toDouble(),act.get(j).toDouble(),1e-6);
    }
  }
}
