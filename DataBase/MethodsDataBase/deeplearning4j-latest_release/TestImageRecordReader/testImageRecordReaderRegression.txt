@Test public void testImageRecordReaderRegression() throws Exception {
  PathLabelGenerator regressionLabelGen=new TestRegressionLabelGen();
  ImageRecordReader rr=new ImageRecordReader(28,28,3,regressionLabelGen);
  File rootDir=testDir.newFolder();
  new ClassPathResource("datavec-data-image/testimages/").copyDirectory(rootDir);
  FileSplit fs=new FileSplit(rootDir);
  rr.initialize(fs);
  URI[] arr=fs.locations();
  assertTrue(rr.getLabels() == null || rr.getLabels().isEmpty());
  List<Writable> expLabels=new ArrayList<>();
  for (  URI u : arr) {
    String path=u.getPath();
    expLabels.add(testLabel(path.substring(path.length() - 5,path.length())));
  }
  int count=0;
  while (rr.hasNext()) {
    List<Writable> l=rr.next();
    assertEquals(2,l.size());
    assertEquals(expLabels.get(count),l.get(1));
    count++;
  }
  assertEquals(6,count);
  rr.reset();
  List<List<Writable>> b1=rr.next(3);
  List<List<Writable>> b2=rr.next(3);
  assertFalse(rr.hasNext());
  NDArrayRecordBatch b1a=(NDArrayRecordBatch)b1;
  NDArrayRecordBatch b2a=(NDArrayRecordBatch)b2;
  assertEquals(2,b1a.getArrays().size());
  assertEquals(2,b2a.getArrays().size());
  NDArrayWritable l1=new NDArrayWritable(Nd4j.create(new double[]{expLabels.get(0).toDouble(),expLabels.get(1).toDouble(),expLabels.get(2).toDouble()},new int[]{3,1}));
  NDArrayWritable l2=new NDArrayWritable(Nd4j.create(new double[]{expLabels.get(3).toDouble(),expLabels.get(4).toDouble(),expLabels.get(5).toDouble()},new int[]{3,1}));
  INDArray act1=b1a.getArrays().get(1);
  INDArray act2=b2a.getArrays().get(1);
  assertEquals(l1.get(),act1);
  assertEquals(l2.get(),act2);
}
