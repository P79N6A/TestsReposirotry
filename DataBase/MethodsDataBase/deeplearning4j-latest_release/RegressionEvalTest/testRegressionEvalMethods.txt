@Test public void testRegressionEvalMethods(){
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().weightInit(WeightInit.ZERO).list().layer(0,new OutputLayer.Builder().activation(Activation.TANH).lossFunction(LossFunctions.LossFunction.MSE).nIn(10).nOut(5).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  INDArray f=Nd4j.zeros(4,10);
  INDArray l=Nd4j.ones(4,5);
  DataSet ds=new DataSet(f,l);
  DataSetIterator iter=new ExistingDataSetIterator(Collections.singletonList(ds));
  RegressionEvaluation re=net.evaluateRegression(iter);
  for (int i=0; i < 5; i++) {
    assertEquals(1.0,re.meanSquaredError(i),1e-6);
    assertEquals(1.0,re.meanAbsoluteError(i),1e-6);
  }
  ComputationGraphConfiguration graphConf=new NeuralNetConfiguration.Builder().weightInit(WeightInit.ZERO).graphBuilder().addInputs("in").addLayer("0",new OutputLayer.Builder().lossFunction(LossFunctions.LossFunction.MSE).activation(Activation.TANH).nIn(10).nOut(5).build(),"in").setOutputs("0").build();
  ComputationGraph cg=new ComputationGraph(graphConf);
  cg.init();
  RegressionEvaluation re2=cg.evaluateRegression(iter);
  for (int i=0; i < 5; i++) {
    assertEquals(1.0,re2.meanSquaredError(i),1e-6);
    assertEquals(1.0,re2.meanAbsoluteError(i),1e-6);
  }
}
