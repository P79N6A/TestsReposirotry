@Test public void testOffsetForSlice(){
  INDArray arr=Nd4j.linspace(1,16,16).reshape(2,2,2,2);
  int[] dimensions={0,1};
  INDArray permuted=arr.permute(2,3,0,1);
  int[] test={0,0,1,1};
  for (int i=0; i < permuted.tensorssAlongDimension(dimensions); i++) {
    assertEquals(test[i],NDArrayMath.sliceOffsetForTensor(i,permuted,new int[]{2,2}));
  }
  val arrTensorsPerSlice=NDArrayMath.tensorsPerSlice(arr,new int[]{2,2});
  assertEquals(2,arrTensorsPerSlice);
  INDArray arr2=Nd4j.linspace(1,12,12).reshape(3,2,2);
  int[] assertions={0,1,2};
  for (int i=0; i < assertions.length; i++) {
    assertEquals(assertions[i],NDArrayMath.sliceOffsetForTensor(i,arr2,new int[]{2,2}));
  }
  val tensorsPerSlice=NDArrayMath.tensorsPerSlice(arr2,new int[]{2,2});
  assertEquals(1,tensorsPerSlice);
  INDArray otherTest=Nd4j.linspace(1,144,144).reshape(6,3,2,2,2);
  System.out.println(otherTest);
  INDArray baseArr=Nd4j.linspace(1,8,8).reshape(2,2,2);
  for (int i=0; i < baseArr.tensorssAlongDimension(0,1); i++) {
    System.out.println(NDArrayMath.sliceOffsetForTensor(i,baseArr,new int[]{2,2}));
  }
}
