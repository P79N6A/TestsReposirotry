@Test public void testCnnGlobalPoolingMasking(){
  Nd4j.getRandom().setSeed(12345L);
  int inputDepth=2;
  int inputH=5;
  int inputW=5;
  int layerDepth=3;
  int nOut=2;
  for (int maskDim=2; maskDim <= 3; maskDim++) {
    int[] minibatchSizes=new int[]{1,3};
    PoolingType[] poolingTypes=new PoolingType[]{PoolingType.AVG,PoolingType.SUM,PoolingType.MAX,PoolingType.PNORM};
    for (    int miniBatchSize : minibatchSizes) {
      for (      PoolingType pt : poolingTypes) {
        int[] kernel;
        int[] stride;
        if (maskDim == 2) {
          kernel=new int[]{2,inputW};
          stride=new int[]{1,inputW};
        }
 else {
          kernel=new int[]{inputH,2};
          stride=new int[]{inputH,1};
        }
        MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().updater(new NoOp()).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1.0)).convolutionMode(ConvolutionMode.Same).seed(12345L).list().layer(0,new ConvolutionLayer.Builder().kernelSize(kernel).stride(stride).nOut(layerDepth).build()).layer(1,new GlobalPoolingLayer.Builder().poolingType(pt).build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nOut(nOut).build()).setInputType(InputType.convolutional(inputH,inputW,inputDepth)).build();
        MultiLayerNetwork mln=new MultiLayerNetwork(conf);
        mln.init();
        Random r=new Random(12345L);
        INDArray input=Nd4j.rand(new int[]{miniBatchSize,inputDepth,inputH,inputW}).subi(0.5);
        INDArray inputMask;
        if (miniBatchSize == 1) {
          inputMask=Nd4j.create(new double[]{1,1,1,1,0}).reshape(1,1,(maskDim == 2 ? inputH : 1),(maskDim == 3 ? inputW : 1));
        }
 else         if (miniBatchSize == 3) {
          inputMask=Nd4j.create(new double[][]{{1,1,1,1,1},{1,1,1,1,0},{1,1,1,0,0}}).reshape(miniBatchSize,1,(maskDim == 2 ? inputH : 1),(maskDim == 3 ? inputW : 1));
        }
 else {
          throw new RuntimeException();
        }
        INDArray labels=Nd4j.zeros(miniBatchSize,nOut);
        for (int i=0; i < miniBatchSize; i++) {
          int idx=r.nextInt(nOut);
          labels.putScalar(i,idx,1.0);
        }
        if (PRINT_RESULTS) {
          System.out.println("testCnnGlobalPoolingBasicMultiLayer() - " + pt + ", minibatch = "+ miniBatchSize);
          for (int j=0; j < mln.getnLayers(); j++)           System.out.println("Layer " + j + " # params: "+ mln.getLayer(j).numParams());
        }
        boolean gradOK=GradientCheckUtil.checkGradients(mln,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels,inputMask,null);
        assertTrue(gradOK);
        TestUtils.testModelSerialization(mln);
      }
    }
  }
}
