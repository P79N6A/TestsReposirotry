@Test public void testCnnGlobalPoolingBasicMultiLayer(){
  Nd4j.getRandom().setSeed(12345L);
  int inputDepth=3;
  int inputH=5;
  int inputW=4;
  int layerDepth=4;
  int nOut=2;
  int[] minibatchSizes=new int[]{1,3};
  PoolingType[] poolingTypes=new PoolingType[]{PoolingType.AVG,PoolingType.SUM,PoolingType.MAX,PoolingType.PNORM};
  for (  int miniBatchSize : minibatchSizes) {
    for (    PoolingType pt : poolingTypes) {
      MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().updater(new NoOp()).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1.0)).seed(12345L).list().layer(0,new ConvolutionLayer.Builder().kernelSize(2,2).stride(1,1).nOut(layerDepth).build()).layer(1,new GlobalPoolingLayer.Builder().poolingType(pt).build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nOut(nOut).build()).setInputType(InputType.convolutional(inputH,inputW,inputDepth)).build();
      MultiLayerNetwork mln=new MultiLayerNetwork(conf);
      mln.init();
      Random r=new Random(12345L);
      INDArray input=Nd4j.rand(new int[]{miniBatchSize,inputDepth,inputH,inputW}).subi(0.5);
      INDArray labels=Nd4j.zeros(miniBatchSize,nOut);
      for (int i=0; i < miniBatchSize; i++) {
        int idx=r.nextInt(nOut);
        labels.putScalar(i,idx,1.0);
      }
      if (PRINT_RESULTS) {
        System.out.println("testCnnGlobalPoolingBasicMultiLayer() - " + pt + ", minibatch = "+ miniBatchSize);
        for (int j=0; j < mln.getnLayers(); j++)         System.out.println("Layer " + j + " # params: "+ mln.getLayer(j).numParams());
      }
      boolean gradOK=GradientCheckUtil.checkGradients(mln,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels);
      assertTrue(gradOK);
      TestUtils.testModelSerialization(mln);
    }
  }
}
