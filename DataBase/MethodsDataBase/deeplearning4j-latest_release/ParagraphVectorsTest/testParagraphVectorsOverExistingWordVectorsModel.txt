@Test public void testParagraphVectorsOverExistingWordVectorsModel() throws Exception {
  ClassPathResource resource_sentences=new ClassPathResource("/big/raw_sentences.txt");
  ClassPathResource resource_mixed=new ClassPathResource("/paravec");
  SentenceIterator iter=new AggregatingSentenceIterator.Builder().addSentenceIterator(new BasicLineIterator(resource_sentences.getFile())).addSentenceIterator(new FileSentenceIterator(resource_mixed.getFile())).build();
  TokenizerFactory t=new DefaultTokenizerFactory();
  t.setTokenPreProcessor(new CommonPreprocessor());
  Word2Vec wordVectors=new Word2Vec.Builder().seed(119).minWordFrequency(1).batchSize(250).iterations(1).epochs(3).learningRate(0.025).layerSize(150).minLearningRate(0.001).elementsLearningAlgorithm(new SkipGram<VocabWord>()).useHierarchicSoftmax(true).windowSize(5).workers(2).iterate(iter).tokenizerFactory(t).build();
  wordVectors.fit();
  VocabWord day_A=wordVectors.getVocab().tokenFor("day");
  INDArray vector_day1=wordVectors.getWordVectorMatrix("day").dup();
  FileLabelAwareIterator labelAwareIterator=new FileLabelAwareIterator.Builder().addSourceFolder(new ClassPathResource("/paravec/labeled").getFile()).build();
  FileLabelAwareIterator unlabeledIterator=new FileLabelAwareIterator.Builder().addSourceFolder(new ClassPathResource("/paravec/unlabeled").getFile()).build();
  ParagraphVectors paragraphVectors=new ParagraphVectors.Builder().seed(119).iterate(labelAwareIterator).learningRate(0.025).minLearningRate(0.001).iterations(10).epochs(1).layerSize(150).tokenizerFactory(t).sequenceLearningAlgorithm(new DBOW<VocabWord>()).useHierarchicSoftmax(true).workers(2).trainWordVectors(false).useExistingWordVectors(wordVectors).build();
  paragraphVectors.fit();
  VocabWord day_B=paragraphVectors.getVocab().tokenFor("day");
  assertEquals(day_A.getIndex(),day_B.getIndex());
  INDArray vector_day2=paragraphVectors.getWordVectorMatrix("day").dup();
  double crossDay=arraysSimilarity(vector_day1,vector_day2);
  log.info("Day1: " + vector_day1);
  log.info("Day2: " + vector_day2);
  log.info("Cross-Day similarity: " + crossDay);
  log.info("Cross-Day similiarity 2: " + Transforms.cosineSim(Transforms.unitVec(vector_day1),Transforms.unitVec(vector_day2)));
  assertTrue(crossDay > 0.9d);
  log.info("Zfinance: " + paragraphVectors.getWordVectorMatrix("Zfinance"));
  log.info("Zhealth: " + paragraphVectors.getWordVectorMatrix("Zhealth"));
  log.info("Zscience: " + paragraphVectors.getWordVectorMatrix("Zscience"));
  LabelledDocument document=unlabeledIterator.nextDocument();
  log.info("Results for document '" + document.getLabel() + "'");
  List<String> results=new ArrayList<>(paragraphVectors.predictSeveral(document,3));
  for (  String result : results) {
    double sim=paragraphVectors.similarityToLabel(document,result);
    log.info("Similarity to [" + result + "] is ["+ sim+ "]");
  }
  String topPrediction=paragraphVectors.predict(document);
  assertEquals("Z" + document.getLabel(),topPrediction);
}
