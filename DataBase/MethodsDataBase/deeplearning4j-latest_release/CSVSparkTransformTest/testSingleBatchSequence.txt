@Test public void testSingleBatchSequence() throws Exception {
  List<Writable> input=new ArrayList<>();
  input.add(new DoubleWritable(1.0));
  input.add(new DoubleWritable(2.0));
  Schema schema=new Schema.Builder().addColumnDouble("1.0").addColumnDouble("2.0").build();
  List<Writable> output=new ArrayList<>();
  output.add(new Text("1.0"));
  output.add(new Text("2.0"));
  TransformProcess transformProcess=new TransformProcess.Builder(schema).convertToString("1.0").convertToString("2.0").build();
  CSVSparkTransform csvSparkTransform=new CSVSparkTransform(transformProcess);
  String[] values=new String[]{"1.0","2.0"};
  SingleCSVRecord record=csvSparkTransform.transform(new SingleCSVRecord(values));
  BatchCSVRecord batchCSVRecord=new BatchCSVRecord();
  for (int i=0; i < 3; i++)   batchCSVRecord.add(record);
  BatchCSVRecord batchCSVRecord1=csvSparkTransform.transform(batchCSVRecord);
  SequenceBatchCSVRecord sequenceBatchCSVRecord=new SequenceBatchCSVRecord();
  sequenceBatchCSVRecord.add(Arrays.asList(batchCSVRecord));
  Base64NDArrayBody sequenceArray=csvSparkTransform.transformSequenceArray(sequenceBatchCSVRecord);
  INDArray outputBody=Nd4jBase64.fromBase64(sequenceArray.getNdarray());
  sequenceBatchCSVRecord.add(Arrays.asList(batchCSVRecord));
  sequenceArray=csvSparkTransform.transformSequenceArray(sequenceBatchCSVRecord);
  assertArrayEquals(new long[]{2,2,3},Nd4jBase64.fromBase64(sequenceArray.getNdarray()).shape());
  SequenceBatchCSVRecord transformed=csvSparkTransform.transformSequence(sequenceBatchCSVRecord);
  assertNotNull(transformed.getRecords());
  System.out.println(transformed);
}
