@Test public void testRocBasic(){
  INDArray predictions=Nd4j.create(new double[][]{{1.0,0.001},{0.899,0.101},{0.799,0.201},{0.699,0.301},{0.599,0.401},{0.499,0.501},{0.399,0.601},{0.299,0.701},{0.199,0.801},{0.099,0.901}});
  INDArray actual=Nd4j.create(new double[][]{{1,0},{1,0},{1,0},{1,0},{1,0},{0,1},{0,1},{0,1},{0,1},{0,1}});
  ROC roc=new ROC(10);
  roc.eval(actual,predictions);
  RocCurve rocCurve=roc.getRocCurve();
  assertEquals(11,rocCurve.getThreshold().length);
  for (int i=0; i < 11; i++) {
    double expThreshold=i / 10.0;
    assertEquals(expThreshold,rocCurve.getThreshold(i),1e-5);
    double efpr=expFPR.get(expThreshold);
    double afpr=rocCurve.getFalsePositiveRate(i);
    assertEquals(efpr,afpr,1e-5);
    double etpr=expTPR.get(expThreshold);
    double atpr=rocCurve.getTruePositiveRate(i);
    assertEquals(etpr,atpr,1e-5);
  }
  double auc=roc.calculateAUC();
  assertEquals(1.0,auc,1e-6);
  roc.reset();
  roc.eval(actual,predictions);
  auc=roc.calculateAUC();
  assertEquals(1.0,auc,1e-6);
}
