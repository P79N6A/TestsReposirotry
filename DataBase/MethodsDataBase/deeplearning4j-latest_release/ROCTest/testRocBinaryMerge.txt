@Test public void testRocBinaryMerge(){
  Nd4j.getRandom().setSeed(12345);
  ROCBinary roc=new ROCBinary();
  ROCBinary roc1=new ROCBinary();
  ROCBinary roc2=new ROCBinary();
  int nOut=5;
  for (int i=0; i < 10; i++) {
    INDArray labels=Nd4j.getExecutioner().exec(new BernoulliDistribution(Nd4j.createUninitialized(3,nOut),0.5));
    INDArray out=Nd4j.rand(3,nOut);
    out.diviColumnVector(out.sum(1));
    roc.eval(labels,out);
    if (i % 2 == 0) {
      roc1.eval(labels,out);
    }
 else {
      roc2.eval(labels,out);
    }
  }
  for (int i=0; i < nOut; i++) {
    roc1.calculateAUC(i);
    roc1.calculateAUCPR(i);
    roc2.calculateAUC(i);
    roc2.calculateAUCPR(i);
  }
  roc1.merge(roc2);
  for (int i=0; i < nOut; i++) {
    double aucExp=roc.calculateAUC(i);
    double auprc=roc.calculateAUCPR(i);
    double aucAct=roc1.calculateAUC(i);
    double auprcAct=roc1.calculateAUCPR(i);
    assertEquals(aucExp,aucAct,1e-6);
    assertEquals(auprc,auprcAct,1e-6);
  }
}
