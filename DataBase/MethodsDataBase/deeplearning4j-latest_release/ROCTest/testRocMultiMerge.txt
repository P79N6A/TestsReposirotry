@Test public void testRocMultiMerge(){
  Nd4j.getRandom().setSeed(12345);
  ROCMultiClass roc=new ROCMultiClass();
  ROCMultiClass roc1=new ROCMultiClass();
  ROCMultiClass roc2=new ROCMultiClass();
  int nOut=5;
  Random r=new Random(12345);
  for (int i=0; i < 10; i++) {
    INDArray labels=Nd4j.zeros(3,nOut);
    for (int j=0; j < 3; j++) {
      labels.putScalar(j,r.nextInt(nOut),1.0);
    }
    INDArray out=Nd4j.rand(3,nOut);
    out.diviColumnVector(out.sum(1));
    roc.eval(labels,out);
    if (i % 2 == 0) {
      roc1.eval(labels,out);
    }
 else {
      roc2.eval(labels,out);
    }
  }
  for (int i=0; i < nOut; i++) {
    roc1.calculateAUC(i);
    roc1.calculateAUCPR(i);
    roc2.calculateAUC(i);
    roc2.calculateAUCPR(i);
  }
  roc1.merge(roc2);
  for (int i=0; i < nOut; i++) {
    double aucExp=roc.calculateAUC(i);
    double auprc=roc.calculateAUCPR(i);
    double aucAct=roc1.calculateAUC(i);
    double auprcAct=roc1.calculateAUCPR(i);
    assertEquals(aucExp,aucAct,1e-6);
    assertEquals(auprc,auprcAct,1e-6);
  }
}
