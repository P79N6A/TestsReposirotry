@Test public void testCompare2Vs3Classes(){
  int nExamples=200;
  INDArray predictions3=Nd4j.rand(nExamples,3);
  INDArray tempSum=predictions3.sum(1);
  predictions3.diviColumnVector(tempSum);
  INDArray labels3=Nd4j.create(nExamples,3);
  Random r=new Random(12345);
  for (int i=0; i < nExamples; i++) {
    labels3.putScalar(i,r.nextInt(3),1.0);
  }
  INDArray predictions2=Nd4j.zeros(nExamples,2);
  predictions2.getColumn(0).assign(predictions3.getColumn(0));
  predictions2.getColumn(0).addi(predictions3.getColumn(1));
  predictions2.getColumn(1).addi(predictions3.getColumn(2));
  INDArray labels2=Nd4j.zeros(nExamples,2);
  labels2.getColumn(0).assign(labels3.getColumn(0));
  labels2.getColumn(0).addi(labels3.getColumn(1));
  labels2.getColumn(1).addi(labels3.getColumn(2));
  for (  int numSteps : new int[]{30,0}) {
    ROCMultiClass rocMultiClass3=new ROCMultiClass(numSteps);
    ROCMultiClass rocMultiClass2=new ROCMultiClass(numSteps);
    rocMultiClass3.eval(labels3,predictions3);
    rocMultiClass2.eval(labels2,predictions2);
    double auc3=rocMultiClass3.calculateAUC(2);
    double auc2=rocMultiClass2.calculateAUC(1);
    assertEquals(auc2,auc3,1e-6);
    RocCurve c3=rocMultiClass3.getRocCurve(2);
    RocCurve c2=rocMultiClass2.getRocCurve(1);
    assertArrayEquals(c2.getThreshold(),c3.getThreshold(),1e-6);
    assertArrayEquals(c2.getFpr(),c3.getFpr(),1e-6);
    assertArrayEquals(c2.getTpr(),c3.getTpr(),1e-6);
  }
}
