@Test public void testRocMerge(){
  Nd4j.getRandom().setSeed(12345);
  ROC roc=new ROC();
  ROC roc1=new ROC();
  ROC roc2=new ROC();
  int nOut=2;
  Random r=new Random(12345);
  for (int i=0; i < 10; i++) {
    INDArray labels=Nd4j.zeros(3,nOut);
    for (int j=0; j < 3; j++) {
      labels.putScalar(j,r.nextInt(nOut),1.0);
    }
    INDArray out=Nd4j.rand(3,nOut);
    out.diviColumnVector(out.sum(1));
    roc.eval(labels,out);
    if (i % 2 == 0) {
      roc1.eval(labels,out);
    }
 else {
      roc2.eval(labels,out);
    }
  }
  roc1.calculateAUC();
  roc1.calculateAUCPR();
  roc2.calculateAUC();
  roc2.calculateAUCPR();
  roc1.merge(roc2);
  double aucExp=roc.calculateAUC();
  double auprc=roc.calculateAUCPR();
  double aucAct=roc1.calculateAUC();
  double auprcAct=roc1.calculateAUCPR();
  assertEquals(aucExp,aucAct,1e-6);
  assertEquals(auprc,auprcAct,1e-6);
}
