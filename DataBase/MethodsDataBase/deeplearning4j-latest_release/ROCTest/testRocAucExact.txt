@Test public void testRocAucExact(){
  double[] p=new double[]{0.92961609,0.31637555,0.18391881,0.20456028,0.56772503,0.5955447,0.96451452,0.6531771,0.74890664,0.65356987,0.74771481,0.96130674,0.0083883,0.10644438,0.29870371,0.65641118,0.80981255,0.87217591,0.9646476,0.72368535,0.64247533,0.71745362,0.46759901,0.32558468,0.43964461,0.72968908,0.99401459,0.67687371,0.79082252,0.17091426};
  double[] l=new double[]{1,0,0,1,1,1,0,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1};
  double[] fpr_skl=new double[]{0.0,0.0,0.15789474,0.15789474,0.31578947,0.31578947,0.52631579,0.52631579,0.68421053,0.68421053,0.84210526,0.84210526,0.89473684,0.89473684,1.0};
  double[] tpr_skl=new double[]{0.0,0.09090909,0.09090909,0.18181818,0.18181818,0.36363636,0.36363636,0.45454545,0.45454545,0.72727273,0.72727273,0.90909091,0.90909091,1.0,1.0};
  double[] thr_skl=new double[]{1.0,0.99401459,0.96130674,0.92961609,0.79082252,0.74771481,0.67687371,0.65641118,0.64247533,0.46759901,0.31637555,0.20456028,0.18391881,0.17091426,0.0};
  INDArray prob=Nd4j.create(p,new int[]{30,1});
  INDArray label=Nd4j.create(l,new int[]{30,1});
  ROC roc=new ROC(0);
  roc.eval(label,prob);
  RocCurve rocCurve=roc.getRocCurve();
  assertArrayEquals(thr_skl,rocCurve.getThreshold(),1e-6);
  assertArrayEquals(fpr_skl,rocCurve.getFpr(),1e-6);
  assertArrayEquals(tpr_skl,rocCurve.getTpr(),1e-6);
  double auc=roc.calculateAUC();
  double aucExpSKL=0.459330143541;
  assertEquals(aucExpSKL,auc,1e-6);
  roc=new ROC(0,false);
  roc.eval(label,prob);
  assertEquals(aucExpSKL,roc.calculateAUC(),1e-6);
  roc=new ROC(0,true);
  roc.eval(label,prob);
  double auprcExp=0.398963619227;
  double auprcAct=roc.calculateAUCPR();
  assertEquals(auprcExp,auprcAct,1e-8);
  roc=new ROC(0,false);
  roc.eval(label,prob);
  assertEquals(auprcExp,roc.calculateAUCPR(),1e-8);
  PrecisionRecallCurve prc=roc.getPrecisionRecallCurve();
  for (int i=0; i < thr_skl.length; i++) {
    double threshold=thr_skl[i] - 1e-6;
    threshold=Math.max(0.0,threshold);
    PrecisionRecallCurve.Confusion c=prc.getConfusionMatrixAtThreshold(threshold);
    int tp=c.getTpCount();
    int fp=c.getFpCount();
    int tn=c.getTnCount();
    int fn=c.getFnCount();
    assertEquals(30,tp + fp + tn+ fn);
    double prec=tp / (double)(tp + fp);
    double rec=tp / (double)(tp + fn);
    double fpr=fp / 19.0;
    if (c.getPoint().getThreshold() == 0.0) {
      rec=1.0;
      prec=11.0 / 30;
    }
 else     if (c.getPoint().getThreshold() == 1.0) {
      rec=0.0;
      prec=1.0;
    }
    assertEquals(tpr_skl[i],rec,1e-6);
    assertEquals(fpr_skl[i],fpr,1e-6);
    assertEquals(rec,c.getPoint().getRecall(),1e-6);
    assertEquals(prec,c.getPoint().getPrecision(),1e-6);
  }
  prob=Nd4j.create(new double[]{0.1,0.2,0.5,0.9},new int[]{4,1});
  label=Nd4j.create(new double[]{0,0,1,1},new int[]{4,1});
  roc=new ROC(0);
  roc.eval(label,prob);
  assertEquals(1.0,roc.calculateAUC(),1e-8);
  assertEquals(1.0,roc.calculateAUCPR(),1e-8);
}
