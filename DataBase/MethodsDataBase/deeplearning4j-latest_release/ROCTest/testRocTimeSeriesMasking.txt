@Test public void testRocTimeSeriesMasking(){
  INDArray predictions2d=Nd4j.create(new double[][]{{1.0,0.001},{0.899,0.101},{0.799,0.201},{0.699,0.301},{0.599,0.401},{0.499,0.501},{0.399,0.601},{0.299,0.701},{0.199,0.801},{0.099,0.901}});
  INDArray actual2d=Nd4j.create(new double[][]{{1,0},{1,0},{1,0},{1,0},{1,0},{0,1},{0,1},{0,1},{0,1},{0,1}});
  INDArray predictions3d=Nd4j.create(2,2,6);
  INDArray tad=predictions3d.tensorAlongDimension(0,1,2).transpose();
  tad.get(NDArrayIndex.interval(0,4),NDArrayIndex.all()).assign(predictions2d.get(NDArrayIndex.interval(0,4),NDArrayIndex.all()));
  tad=predictions3d.tensorAlongDimension(1,1,2).transpose();
  tad.assign(predictions2d.get(NDArrayIndex.interval(4,10),NDArrayIndex.all()));
  INDArray labels3d=Nd4j.create(2,2,6);
  tad=labels3d.tensorAlongDimension(0,1,2).transpose();
  tad.get(NDArrayIndex.interval(0,4),NDArrayIndex.all()).assign(actual2d.get(NDArrayIndex.interval(0,4),NDArrayIndex.all()));
  tad=labels3d.tensorAlongDimension(1,1,2).transpose();
  tad.assign(actual2d.get(NDArrayIndex.interval(4,10),NDArrayIndex.all()));
  INDArray mask=Nd4j.zeros(2,6);
  mask.get(NDArrayIndex.point(0),NDArrayIndex.interval(0,4)).assign(1);
  mask.get(NDArrayIndex.point(1),NDArrayIndex.all()).assign(1);
  for (  int steps : new int[]{20,0}) {
    ROC rocExp=new ROC(steps);
    rocExp.eval(actual2d,predictions2d);
    ROC rocAct=new ROC(steps);
    rocAct.evalTimeSeries(labels3d,predictions3d,mask);
    assertEquals(rocExp.calculateAUC(),rocAct.calculateAUC(),1e-6);
    assertEquals(rocExp.getRocCurve(),rocAct.getRocCurve());
  }
}
