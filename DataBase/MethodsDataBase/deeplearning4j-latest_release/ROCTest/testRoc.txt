@Test public void testRoc(){
  INDArray labels=Nd4j.create(new double[][]{{0,1},{0,1},{1,0},{1,0},{1,0}});
  INDArray prediction=Nd4j.create(new double[][]{{0.199,0.801},{0.499,0.501},{0.399,0.601},{0.799,0.201},{0.899,0.101}});
  Map<Double,Double> expTPR=new HashMap<>();
  double totalPositives=2.0;
  expTPR.put(0.0,2.0 / totalPositives);
  expTPR.put(0.1,2.0 / totalPositives);
  expTPR.put(0.2,2.0 / totalPositives);
  expTPR.put(0.3,2.0 / totalPositives);
  expTPR.put(0.4,2.0 / totalPositives);
  expTPR.put(0.5,2.0 / totalPositives);
  expTPR.put(0.6,1.0 / totalPositives);
  expTPR.put(0.7,1.0 / totalPositives);
  expTPR.put(0.8,1.0 / totalPositives);
  expTPR.put(0.9,0.0 / totalPositives);
  expTPR.put(1.0,0.0 / totalPositives);
  Map<Double,Double> expFPR=new HashMap<>();
  double totalNegatives=3.0;
  expFPR.put(0.0,3.0 / totalNegatives);
  expFPR.put(0.1,3.0 / totalNegatives);
  expFPR.put(0.2,2.0 / totalNegatives);
  expFPR.put(0.3,1.0 / totalNegatives);
  expFPR.put(0.4,1.0 / totalNegatives);
  expFPR.put(0.5,1.0 / totalNegatives);
  expFPR.put(0.6,1.0 / totalNegatives);
  expFPR.put(0.7,0.0 / totalNegatives);
  expFPR.put(0.8,0.0 / totalNegatives);
  expFPR.put(0.9,0.0 / totalNegatives);
  expFPR.put(1.0,0.0 / totalNegatives);
  int[] expTPs=new int[]{2,2,2,2,2,2,1,1,1,0,0};
  int[] expFPs=new int[]{3,3,2,1,1,1,1,0,0,0,0};
  int[] expFNs=new int[11];
  int[] expTNs=new int[11];
  for (int i=0; i < 11; i++) {
    expFNs[i]=(int)totalPositives - expTPs[i];
    expTNs[i]=5 - expTPs[i] - expFPs[i]- expFNs[i];
  }
  ROC roc=new ROC(10);
  roc.eval(labels,prediction);
  RocCurve rocCurve=roc.getRocCurve();
  assertEquals(11,rocCurve.getThreshold().length);
  assertEquals(11,rocCurve.getFpr().length);
  assertEquals(11,rocCurve.getTpr().length);
  for (int i=0; i < 11; i++) {
    double expThreshold=i / 10.0;
    assertEquals(expThreshold,rocCurve.getThreshold(i),1e-5);
    double efpr=expFPR.get(expThreshold);
    double afpr=rocCurve.getFalsePositiveRate(i);
    assertEquals(efpr,afpr,1e-5);
    double etpr=expTPR.get(expThreshold);
    double atpr=rocCurve.getTruePositiveRate(i);
    assertEquals(etpr,atpr,1e-5);
  }
  double expAUC=0.5 * 1.0 / 3.0 + (1 - 1 / 3.0) * 1.0;
  double actAUC=roc.calculateAUC();
  assertEquals(expAUC,actAUC,1e-6);
  PrecisionRecallCurve prc=roc.getPrecisionRecallCurve();
  for (int i=0; i < 11; i++) {
    PrecisionRecallCurve.Confusion c=prc.getConfusionMatrixAtThreshold(i * 0.1);
    assertEquals(expTPs[i],c.getTpCount());
    assertEquals(expFPs[i],c.getFpCount());
    assertEquals(expFPs[i],c.getFpCount());
    assertEquals(expTNs[i],c.getTnCount());
  }
}
