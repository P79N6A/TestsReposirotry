@Test public void testInvalidStreamReuseCG() throws Exception {
  int nIn=5;
  int nOut=6;
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).l1(0.01).graphBuilder().addInputs("in").layer("0",new OutputLayer.Builder().nIn(nIn).nOut(nOut).activation(Activation.SOFTMAX).build(),"in").setOutputs("0").build();
  ComputationGraph net=new ComputationGraph(conf);
  net.init();
  DataSet dataSet=trivialDataSet();
  NormalizerStandardize norm=new NormalizerStandardize();
  norm.fit(dataSet);
  File tempFile=tempDir.newFile();
  ModelSerializer.writeModel(net,tempFile,true);
  ModelSerializer.addNormalizerToModel(tempFile,norm);
  InputStream is=new FileInputStream(tempFile);
  ModelSerializer.restoreComputationGraph(is);
  try {
    ModelSerializer.restoreNormalizerFromInputStream(is);
    fail("Expected exception");
  }
 catch (  Exception e) {
    String msg=e.getMessage();
    assertTrue(msg,msg.contains("may have been closed"));
  }
  try {
    ModelSerializer.restoreComputationGraph(is);
    fail("Expected exception");
  }
 catch (  Exception e) {
    String msg=e.getMessage();
    assertTrue(msg,msg.contains("may have been closed"));
  }
  Pair<ComputationGraph,Normalizer> pair=ModelSerializer.restoreComputationGraphAndNormalizer(new FileInputStream(tempFile),true);
  assertEquals(net.params(),pair.getFirst().params());
  assertNotNull(pair.getSecond());
}
