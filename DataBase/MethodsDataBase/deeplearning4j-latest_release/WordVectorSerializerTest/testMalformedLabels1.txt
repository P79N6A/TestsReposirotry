@Test public void testMalformedLabels1() throws Exception {
  List<String> words=new ArrayList<>();
  words.add("test A");
  words.add("test B");
  words.add("test\nC");
  words.add("test`D");
  words.add("test_E");
  words.add("test 5");
  AbstractCache<VocabWord> vocabCache=new AbstractCache<>();
  int cnt=0;
  for (  String word : words) {
    vocabCache.addToken(new VocabWord(1.0,word));
    vocabCache.addWordToIndex(cnt,word);
    cnt++;
  }
  vocabCache.elementAtIndex(1).markAsLabel(true);
  InMemoryLookupTable<VocabWord> lookupTable=new InMemoryLookupTable<>(vocabCache,10,false,0.01,Nd4j.getRandom(),0.0);
  lookupTable.resetWeights(true);
  assertNotEquals(null,lookupTable.getSyn0());
  assertNotEquals(null,lookupTable.getSyn1());
  assertNotEquals(null,lookupTable.getExpTable());
  assertEquals(null,lookupTable.getSyn1Neg());
  ParagraphVectors vec=new ParagraphVectors.Builder().lookupTable(lookupTable).vocabCache(vocabCache).build();
  File tempFile=File.createTempFile("temp","w2v");
  tempFile.deleteOnExit();
  WordVectorSerializer.writeParagraphVectors(vec,tempFile);
  ParagraphVectors restoredVec=WordVectorSerializer.readParagraphVectors(tempFile);
  for (  String word : words) {
    assertEquals(true,restoredVec.hasWord(word));
  }
  assertTrue(restoredVec.getVocab().elementAtIndex(1).isLabel());
}
