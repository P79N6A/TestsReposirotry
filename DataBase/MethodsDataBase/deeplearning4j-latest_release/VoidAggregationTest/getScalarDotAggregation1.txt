/** 
 * This test checks for aggregation of single-array dot
 * @throws Exception
 */
@Test public void getScalarDotAggregation1() throws Exception {
  INDArray x=Nd4j.linspace(0,(NODES * ELEMENTS_PER_NODE) - 1,NODES * ELEMENTS_PER_NODE);
  INDArray y=x.dup();
  double exp=Nd4j.getBlasWrapper().dot(x,y);
  List<DotAggregation> aggregations=new ArrayList<>();
  for (int i=0, j=0; i < NODES; i++) {
    INDArray arrayX=Nd4j.create(ELEMENTS_PER_NODE);
    INDArray arrayY=Nd4j.create(ELEMENTS_PER_NODE);
    for (int e=0; e < ELEMENTS_PER_NODE; j++, e++) {
      arrayX.putScalar(e,(double)j);
      arrayY.putScalar(e,(double)j);
    }
    double dot=Nd4j.getBlasWrapper().dot(arrayX,arrayY);
    DotAggregation aggregation=new DotAggregation(1L,NODES,(short)i,Nd4j.scalar(dot));
    aggregations.add(aggregation);
  }
  DotAggregation aggregation=aggregations.get(0);
  for (  DotAggregation vectorAggregation : aggregations) {
    aggregation.accumulateAggregation(vectorAggregation);
  }
  INDArray result=aggregation.getAccumulatedResult();
  assertEquals(true,result.isScalar());
  assertEquals(exp,result.getDouble(0),1e-5);
}
