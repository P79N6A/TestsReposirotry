/** 
 * In this test we check for aggregation of sample vector.
 * @throws Exception
 */
@Test public void getAccumulatedResult1() throws Exception {
  INDArray exp=Nd4j.linspace(0,(NODES * ELEMENTS_PER_NODE) - 1,NODES * ELEMENTS_PER_NODE);
  List<VectorAggregation> aggregations=new ArrayList<>();
  for (int i=0, j=0; i < NODES; i++) {
    INDArray array=Nd4j.create(ELEMENTS_PER_NODE);
    for (int e=0; e < ELEMENTS_PER_NODE; j++, e++) {
      array.putScalar(e,(double)j);
    }
    VectorAggregation aggregation=new VectorAggregation(1L,NODES,(short)i,array);
    aggregations.add(aggregation);
  }
  VectorAggregation aggregation=aggregations.get(0);
  for (  VectorAggregation vectorAggregation : aggregations) {
    aggregation.accumulateAggregation(vectorAggregation);
  }
  INDArray payload=aggregation.getAccumulatedResult();
  log.info("Payload shape: {}",payload.shape());
  assertEquals(exp.length(),payload.length());
  assertEquals(exp,payload);
}
