@Test public void testExpandDims(){
  final List<Pair<INDArray,String>> testMatricesC=NDArrayCreationUtil.getAllTestMatricesWithShape('c',3,5,0xDEAD);
  final List<Pair<INDArray,String>> testMatricesF=NDArrayCreationUtil.getAllTestMatricesWithShape('f',7,11,0xBEEF);
  final ArrayList<Pair<INDArray,String>> testMatrices=new ArrayList<>(testMatricesC);
  testMatrices.addAll(testMatricesF);
  for (  Pair<INDArray,String> testMatrixPair : testMatrices) {
    final String recreation=testMatrixPair.getSecond();
    final INDArray testMatrix=testMatrixPair.getFirst();
    final char ordering=testMatrix.ordering();
    val shape=testMatrix.shape();
    final int rank=testMatrix.rank();
    for (int i=-rank; i <= rank; i++) {
      final INDArray expanded=Nd4j.expandDims(testMatrix,i);
      final String message="Expanding in Dimension " + i + "; Shape before expanding: "+ Arrays.toString(shape)+ " "+ ordering+ " Order; Shape after expanding: "+ Arrays.toString(expanded.shape())+ " "+ expanded.ordering()+ "; Input Created via: "+ recreation;
      assertEquals(message,1,expanded.shape()[i < 0 ? i + rank : i]);
      assertEquals(message,testMatrix.ravel(),expanded.ravel());
      assertEquals(message,ordering,expanded.ordering());
      testMatrix.assign(Nd4j.rand(shape));
      assertEquals(message,testMatrix.ravel(),expanded.ravel());
    }
  }
}
