@Test public void testSqueeze(){
  final List<Pair<INDArray,String>> testMatricesC=NDArrayCreationUtil.getAllTestMatricesWithShape('c',3,1,0xDEAD);
  final List<Pair<INDArray,String>> testMatricesF=NDArrayCreationUtil.getAllTestMatricesWithShape('f',7,1,0xBEEF);
  final ArrayList<Pair<INDArray,String>> testMatrices=new ArrayList<>(testMatricesC);
  testMatrices.addAll(testMatricesF);
  for (  Pair<INDArray,String> testMatrixPair : testMatrices) {
    final String recreation=testMatrixPair.getSecond();
    final INDArray testMatrix=testMatrixPair.getFirst();
    final char ordering=testMatrix.ordering();
    val shape=testMatrix.shape();
    final INDArray squeezed=Nd4j.squeeze(testMatrix,1);
    final long[] expShape=ArrayUtil.removeIndex(shape,1);
    final String message="Squeezing in dimension 1; Shape before squeezing: " + Arrays.toString(shape) + " "+ ordering+ " Order; Shape after expanding: "+ Arrays.toString(squeezed.shape())+ " "+ squeezed.ordering()+ "; Input Created via: "+ recreation;
    assertArrayEquals(message,expShape,squeezed.shape());
    assertEquals(message,ordering,squeezed.ordering());
    assertEquals(message,testMatrix.ravel(),squeezed.ravel());
    testMatrix.assign(Nd4j.rand(shape));
    assertEquals(message,testMatrix.ravel(),squeezed.ravel());
  }
}
