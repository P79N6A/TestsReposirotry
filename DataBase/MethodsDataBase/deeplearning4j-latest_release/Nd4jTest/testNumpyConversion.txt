@Test public void testNumpyConversion() throws Exception {
  INDArray linspace=Nd4j.linspace(1,4,4);
  Pointer convert=Nd4j.getNDArrayFactory().convertToNumpy(linspace);
  convert.position(0);
  Pointer pointer=NativeOpsHolder.getInstance().getDeviceNativeOps().loadNpyFromHeader(convert);
  Pointer pointer1=NativeOpsHolder.getInstance().getDeviceNativeOps().dataPointForNumpyStruct(pointer);
  pointer1.capacity(linspace.data().getElementSize() * linspace.data().length());
  ByteBuffer byteBuffer=linspace.data().pointer().asByteBuffer();
  byte[] originalData=new byte[byteBuffer.capacity()];
  byteBuffer.get(originalData);
  ByteBuffer floatBuffer=pointer1.asByteBuffer();
  byte[] dataTwo=new byte[floatBuffer.capacity()];
  floatBuffer.get(dataTwo);
  Assert.assertArrayEquals(originalData,dataTwo);
  floatBuffer.position(0);
  DataBuffer dataBuffer=Nd4j.createBuffer(new FloatPointer(floatBuffer.asFloatBuffer()),linspace.length());
  assertEquals(Nd4j.createBuffer(new float[]{1,2,3,4}),dataBuffer);
  INDArray convertedFrom=Nd4j.getNDArrayFactory().createFromNpyHeaderPointer(convert);
  assertEquals(linspace,convertedFrom);
  File tmpFile=new File(System.getProperty("java.io.tmpdir"),"nd4j-numpy-tmp-" + UUID.randomUUID().toString() + ".bin");
  tmpFile.deleteOnExit();
  Nd4j.writeAsNumpy(linspace,tmpFile);
  INDArray numpyFromFile=Nd4j.createFromNpyFile(tmpFile);
  assertEquals(linspace,numpyFromFile);
}
