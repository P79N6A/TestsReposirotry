@Test public void testJson() throws Exception {
  IActivation[] activations=new IActivation[]{new ActivationCube(),new ActivationELU(0.25),new ActivationHardSigmoid(),new ActivationHardTanH(),new ActivationIdentity(),new ActivationLReLU(0.25),new ActivationRationalTanh(),new ActivationReLU(),new ActivationRReLU(0.25,0.5),new ActivationSigmoid(),new ActivationSoftmax(),new ActivationSoftPlus(),new ActivationSoftSign(),new ActivationTanH()};
  String[][] expectedFields=new String[][]{{"@class"},{"@class","alpha"},{"@class"},{"@class"},{"@class"},{"@class","alpha"},{"@class"},{"@class"},{"@class","l","u"},{"@class"},{"@class"},{"@class"},{"@class"},{"@class"}};
  for (int i=0; i < activations.length; i++) {
    String asJson=mapper.writeValueAsString(activations[i]);
    System.out.println(asJson);
    JsonNode node=mapper.readTree(asJson);
    Iterator<String> fieldNamesIter=node.fieldNames();
    List<String> actualFieldsByName=new ArrayList<>();
    while (fieldNamesIter.hasNext()) {
      actualFieldsByName.add(fieldNamesIter.next());
    }
    String[] expFields=expectedFields[i];
    String msg=activations[i].toString() + "\tExpected fields: " + Arrays.toString(expFields)+ "\tActual fields: "+ actualFieldsByName;
    assertEquals(msg,expFields.length,actualFieldsByName.size());
    for (    String s : expFields) {
      msg="Expected field \"" + s + "\", was not found in "+ activations[i].toString();
      assertTrue(msg,actualFieldsByName.contains(s));
    }
    IActivation act=mapper.readValue(asJson,IActivation.class);
    assertEquals(activations[i],act);
  }
}
