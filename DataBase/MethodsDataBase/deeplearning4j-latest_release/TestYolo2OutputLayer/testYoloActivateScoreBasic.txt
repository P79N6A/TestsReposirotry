@Test public void testYoloActivateScoreBasic(){
  int mb=3;
  int b=4;
  int c=3;
  int depth=b * (5 + c);
  int w=6;
  int h=6;
  INDArray bbPrior=Nd4j.rand(b,2).muliRowVector(Nd4j.create(new double[]{w,h}));
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().l2(0.01).list().layer(new ConvolutionLayer.Builder().nIn(depth).nOut(depth).kernelSize(1,1).build()).layer(new Yolo2OutputLayer.Builder().boundingBoxPriors(bbPrior).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  org.deeplearning4j.nn.layers.objdetect.Yolo2OutputLayer y2impl=(org.deeplearning4j.nn.layers.objdetect.Yolo2OutputLayer)net.getLayer(1);
  INDArray input=Nd4j.rand(new int[]{mb,depth,h,w});
  INDArray out=y2impl.activate(input,false,LayerWorkspaceMgr.noWorkspaces());
  assertNotNull(out);
  assertArrayEquals(input.shape(),out.shape());
  int labelDepth=4 + c;
  INDArray labels=Nd4j.zeros(mb,labelDepth,h,w);
  labels.putScalar(0,4 + 0,0,0,1);
  labels.putScalar(1,4 + 1,1,1,1);
  labels.putScalar(2,4 + 2,2,2,1);
  labels.putScalar(0,0,0,0,1);
  labels.putScalar(0,1,0,0,1);
  labels.putScalar(0,2,0,0,2);
  labels.putScalar(0,3,0,0,2);
  labels.putScalar(1,0,1,1,2);
  labels.putScalar(1,1,1,1,2);
  labels.putScalar(1,2,1,1,4);
  labels.putScalar(1,3,1,1,4);
  labels.putScalar(2,0,2,2,3);
  labels.putScalar(2,1,2,2,3);
  labels.putScalar(2,2,2,2,6);
  labels.putScalar(2,3,2,2,6);
  y2impl.setInput(input,LayerWorkspaceMgr.noWorkspaces());
  y2impl.setLabels(labels);
  double score=y2impl.computeScore(0,0,true,LayerWorkspaceMgr.noWorkspaces());
  System.out.println("SCORE: " + score);
  assertTrue(score > 0.0);
  MultiLayerNetwork netLoaded=TestUtils.testModelSerialization(net);
  y2impl=(org.deeplearning4j.nn.layers.objdetect.Yolo2OutputLayer)netLoaded.getLayer(1);
  y2impl.setInput(input,LayerWorkspaceMgr.noWorkspaces());
  y2impl.setLabels(labels);
  double score2=y2impl.computeScore(0,0,true,LayerWorkspaceMgr.noWorkspaces());
  assertEquals(score,score2,1e-8);
  INDArray scoreArr1=net.scoreExamples(new DataSet(input,labels),false);
  INDArray scoreArr2=net.scoreExamples(new DataSet(input,labels),true);
  assertFalse(scoreArr1.isAttached());
  assertFalse(scoreArr2.isAttached());
  assertArrayEquals(new long[]{mb,1},scoreArr1.shape());
  assertArrayEquals(new long[]{mb,1},scoreArr2.shape());
  assertNotEquals(scoreArr1,scoreArr2);
}
