@Test public void testYoloOverfitting() throws Exception {
  Nd4j.getRandom().setSeed(12345);
  InputStream is1=new ClassPathResource("yolo/VOC_TwoImage/JPEGImages/2007_009346.jpg").getInputStream();
  InputStream is2=new ClassPathResource("yolo/VOC_TwoImage/Annotations/2007_009346.xml").getInputStream();
  InputStream is3=new ClassPathResource("yolo/VOC_TwoImage/JPEGImages/2008_003344.jpg").getInputStream();
  InputStream is4=new ClassPathResource("yolo/VOC_TwoImage/Annotations/2008_003344.xml").getInputStream();
  File dir=tempDir.newFolder();
  File jpg=new File(dir,"JPEGImages");
  File annot=new File(dir,"Annotations");
  jpg.mkdirs();
  annot.mkdirs();
  File imgOut=new File(jpg,"2007_009346.jpg");
  File annotationOut=new File(annot,"2007_009346.xml");
  try (FileOutputStream fos=new FileOutputStream(imgOut)){
    IOUtils.copy(is1,fos);
  }
  finally {
    is1.close();
  }
  try (FileOutputStream fos=new FileOutputStream(annotationOut)){
    IOUtils.copy(is2,fos);
  }
  finally {
    is2.close();
  }
  imgOut=new File(jpg,"2008_003344.jpg");
  annotationOut=new File(annot,"2008_003344.xml");
  try (FileOutputStream fos=new FileOutputStream(imgOut)){
    IOUtils.copy(is3,fos);
  }
  finally {
    is3.close();
  }
  try (FileOutputStream fos=new FileOutputStream(annotationOut)){
    IOUtils.copy(is4,fos);
  }
  finally {
    is4.close();
  }
  assertEquals(2,jpg.listFiles().length);
  assertEquals(2,annot.listFiles().length);
  INDArray bbPriors=Nd4j.create(new double[][]{{2,2},{5,5}});
  VocLabelProvider lp=new VocLabelProvider(dir.getPath());
  int h=52;
  int w=52;
  int c=3;
  int origW=500;
  int origH=375;
  int gridW=13;
  int gridH=13;
  RecordReader rr=new ObjectDetectionRecordReader(52,52,3,gridH,gridW,lp);
  FileSplit fileSplit=new FileSplit(jpg);
  rr.initialize(fileSplit);
  int nClasses=rr.getLabels().size();
  val depthOut=bbPriors.size(0) * (5 + nClasses);
  List<String> labels=rr.getLabels();
  labels.add(labels.remove(labels.indexOf("cat")));
  int idxCat=labels.size() - 1;
  DataSetIterator iter=new RecordReaderDataSetIterator(rr,1,1,1,true);
  iter.setPreProcessor(new ImagePreProcessingScaler());
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().convolutionMode(ConvolutionMode.Same).updater(new Adam(2e-3)).gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue).gradientNormalizationThreshold(3).activation(Activation.LEAKYRELU).weightInit(WeightInit.RELU).seed(12345).list().layer(new ConvolutionLayer.Builder().kernelSize(5,5).stride(2,2).nOut(256).build()).layer(new SubsamplingLayer.Builder().kernelSize(2,2).stride(2,2).build()).layer(new ConvolutionLayer.Builder().activation(Activation.IDENTITY).kernelSize(5,5).stride(1,1).nOut(depthOut).build()).layer(new Yolo2OutputLayer.Builder().boundingBoxPriors(bbPriors).build()).setInputType(InputType.convolutional(h,w,c)).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  net.setListeners(new ScoreIterationListener(100));
  int nEpochs=1000;
  DataSet ds=iter.next();
  URI[] uris=fileSplit.locations();
  if (!uris[0].getPath().contains("2007_009346")) {
    ds=iter.next();
  }
  assertEquals(1,ds.getFeatures().size(0));
  for (int i=0; i <= nEpochs; i++) {
    net.fit(ds);
  }
  org.deeplearning4j.nn.layers.objdetect.Yolo2OutputLayer ol=(org.deeplearning4j.nn.layers.objdetect.Yolo2OutputLayer)net.getLayer(3);
  INDArray out=net.output(ds.getFeatures());
  List<DetectedObject> l=ol.getPredictedObjects(out,0.5);
  System.out.println("Detected objects: " + l.size());
  for (  DetectedObject d : l) {
    System.out.println(d);
  }
  assertEquals(2,l.size());
  double cx1Pixels=(60 + 220) / 2.0;
  double cy1Pixels=(123 + 305) / 2.0;
  double cx1=gridW * cx1Pixels / origW;
  double cy1=gridH * cy1Pixels / origH;
  double wGrid1=(220.0 - 60.0) / origW * gridW;
  double hGrid1=(305.0 - 123.0) / origH * gridH;
  double cx2Pixels=(243 + 437) / 2.0;
  double cy2Pixels=(105 + 317) / 2.0;
  double cx2=gridW * cx2Pixels / origW;
  double cy2=gridH * cy2Pixels / origH;
  double wGrid2=(437.0 - 243.0) / origW * gridW;
  double hGrid2=(317 - 105.0) / origH * gridH;
  Collections.sort(l,new Comparator<DetectedObject>(){
    @Override public int compare(    DetectedObject o1,    DetectedObject o2){
      return Double.compare(o1.getCenterX(),o2.getCenterX());
    }
  }
);
  DetectedObject o1=l.get(0);
  double p1=o1.getClassPredictions().getDouble(idxCat);
  double c1=o1.getConfidence();
  assertEquals(idxCat,o1.getPredictedClass());
  assertTrue(String.valueOf(p1),p1 >= 0.85);
  assertTrue(String.valueOf(c1),c1 >= 0.85);
  assertEquals(cx1,o1.getCenterX(),0.1);
  assertEquals(cy1,o1.getCenterY(),0.1);
  assertEquals(wGrid1,o1.getWidth(),0.2);
  assertEquals(hGrid1,o1.getHeight(),0.2);
  DetectedObject o2=l.get(1);
  double p2=o2.getClassPredictions().getDouble(idxCat);
  double c2=o2.getConfidence();
  assertEquals(idxCat,o2.getPredictedClass());
  assertTrue(String.valueOf(p2),p2 >= 0.85);
  assertTrue(String.valueOf(c2),c2 >= 0.85);
  assertEquals(cx2,o2.getCenterX(),0.1);
  assertEquals(cy2,o2.getCenterY(),0.1);
  assertEquals(wGrid2,o2.getWidth(),0.2);
  assertEquals(hGrid2,o2.getHeight(),0.2);
}
