@Test public void testMultithreading1() throws Exception {
  final AtomicInteger cnt=new AtomicInteger(0);
  final CopyOnWriteArrayList<float[]> list=new CopyOnWriteArrayList<>();
  Thread[] threads=new Thread[10];
  for (int x=0; x < threads.length; x++) {
    list.add(null);
  }
  for (int x=0; x < threads.length; x++) {
    threads[x]=new Thread(new Runnable(){
      @Override public void run(){
        Random rnd=Nd4j.getRandom();
        rnd.setSeed(119);
        float[] array=new float[10];
        for (int e=0; e < array.length; e++) {
          array[e]=rnd.nextFloat();
        }
        list.set(cnt.getAndIncrement(),array);
      }
    }
);
    threads[x].start();
  }
  for (int x=0; x < threads.length; x++) {
    threads[x].join();
    assertNotEquals(null,list.get(x));
    if (x > 0) {
      assertArrayEquals(list.get(0),list.get(x),1e-5f);
    }
  }
}
