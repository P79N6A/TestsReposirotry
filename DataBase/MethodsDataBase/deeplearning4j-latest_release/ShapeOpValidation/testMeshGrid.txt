@Test public void testMeshGrid(){
  List<String> failed=new ArrayList<>();
  for (int rank=2; rank <= 4; rank++) {
    SameDiff sd=SameDiff.create();
    SDVariable[] arr=new SDVariable[rank];
    List<String> names=new ArrayList<>();
    for (int i=0; i < rank; i++) {
      INDArray in=Nd4j.linspace(1,3 + i,3 + i).reshape(3 + i);
      arr[i]=sd.var("in" + i,in);
      names.add("meshgrid-" + i);
    }
    SDVariable[] meshgrid=sd.meshgrid(names,false,arr);
    TestCase tc=new TestCase(sd);
    long[] shape;
    if (rank == 2) {
      shape=new long[]{3,4};
    }
 else     if (rank == 3) {
      shape=new long[]{3,4,5};
    }
 else {
      shape=new long[]{3,4,5,6};
    }
    INDArray[] exp=new INDArray[shape.length];
    for (int i=0; i < exp.length; i++) {
      exp[i]=Nd4j.create(shape);
      long nTensors=exp[i].tensorssAlongDimension(i);
      for (long j=0; j < nTensors; j++) {
        INDArray tad=exp[i].tensorAlongDimension((int)j,i);
        tad.assign(arr[i].getArr());
      }
      tc.expected(meshgrid[i],exp[i]);
    }
    SDVariable loss=null;
    for (int i=0; i < rank; i++) {
      if (i == 0)       loss=meshgrid[i].std(true);
 else {
        loss=loss.add("loss-" + i,meshgrid[i].std(true));
      }
    }
    String err=OpValidation.validate(tc,true);
    if (err != null)     failed.add(err);
  }
  assertEquals(failed.toString(),0,failed.size());
}
