@Test public void testPermuteGradient(){
  int[] origShape=new int[]{3,4,5};
  List<String> failed=new ArrayList<>();
  for (  int[] perm : new int[][]{{0,1,2},{0,2,1},{1,0,2},{1,2,0},{2,0,1},{2,1,0}}) {
    for (    Pair<INDArray,String> p : NDArrayCreationUtil.getAll3dTestArraysWithShape(12345,origShape)) {
      String msg="permute=" + Arrays.toString(perm) + ", source="+ p.getSecond();
      System.out.println(msg);
      INDArray inArr=p.getFirst().muli(100);
      SameDiff sd=SameDiff.create();
      SDVariable in=sd.var("in",inArr);
      SDVariable permute=sd.f().permute(in,perm);
      SDVariable stdev=sd.standardDeviation("out",permute,true);
      INDArray exp=inArr.permute(perm);
      INDArray expOut=in.getArr().std(true,Integer.MAX_VALUE);
      TestCase tc=new TestCase(sd);
      tc.testName(msg).expected("out",expOut).expected(permute,exp);
      String error=OpValidation.validate(tc,true);
      if (error != null) {
        failed.add(msg);
      }
    }
  }
  assertEquals(failed.toString(),0,failed.size());
}
