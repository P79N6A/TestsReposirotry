@Test public void testExpandDimsGradient(){
  val origShape=new long[]{3,4};
  List<String> failed=new ArrayList<>();
  boolean first=true;
  for (int i=0; i < 3; i++) {
    long[] expExpandShape;
switch (i) {
case 0:
      expExpandShape=new long[]{1,3,4};
    break;
case 1:
  expExpandShape=new long[]{3,1,4};
break;
case 2:
expExpandShape=new long[]{3,4,1};
break;
default :
throw new RuntimeException();
}
for (Pair<INDArray,String> p : NDArrayCreationUtil.getAllTestMatricesWithShape(origShape[0],origShape[1],12345)) {
INDArray inArr=p.getFirst().muli(100);
SameDiff sd=SameDiff.create();
SDVariable in=sd.var("in",inArr);
SDVariable expand=sd.f().expandDims(in,i);
SDVariable stdev=sd.standardDeviation("out",expand,true);
INDArray out=sd.execAndEndResult();
INDArray expOut=in.getArr().std(true);
assertArrayEquals(expExpandShape,expand.getArr().shape());
INDArray expExpand=inArr.dup('c').reshape(expExpandShape);
String msg="expandDim=" + i + ", source="+ p.getSecond();
log.info("Starting: " + msg);
TestCase tc=new TestCase(sd);
tc.testName(msg).expectedOutput("out",expOut).expectedOutput(expand.getVarName(),expExpand);
String error=OpValidation.validate(tc);
if (error != null) {
failed.add(error);
}
}
}
assertEquals(failed.toString(),0,failed.size());
}
