@Test public void testTile(){
  Nd4j.getRandom().setSeed(12345);
  List<int[]> tileArg=Arrays.asList(new int[]{1},new int[]{5},new int[]{3,4},new int[]{2,3},new int[]{2,3,4});
  INDArray[] orig=new INDArray[tileArg.size()];
  orig[0]=Nd4j.valueArrayOf(new long[]{1},3.0);
  orig[1]=Nd4j.valueArrayOf(new long[]{1},3.0);
  orig[2]=Nd4j.valueArrayOf(new long[]{1,1},3.0);
  orig[3]=Nd4j.rand(2,2).muli(10);
  orig[4]=Nd4j.rand(new int[]{3,4,5}).muli(10);
  INDArray[] exp=new INDArray[tileArg.size()];
  exp[0]=Nd4j.trueVector(new double[]{3});
  exp[1]=Nd4j.trueVector(new double[]{3,3,3,3,3});
  exp[2]=Nd4j.valueArrayOf(new long[]{3,4},3.0);
  exp[3]=Nd4j.create(2 * 2,2 * 3);
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 3; j++) {
      exp[3].get(interval(2 * i,2 * (i + 1)),interval(2 * j,2 * (j + 1))).assign(orig[3]);
    }
  }
  exp[4]=Nd4j.create(3 * 2,4 * 3,5 * 4);
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 3; j++) {
      for (int k=0; k < 4; k++) {
        exp[4].get(interval(3 * i,3 * (i + 1)),interval(4 * j,4 * (j + 1)),interval(5 * k,5 * (k + 1))).assign(orig[4]);
      }
    }
  }
  List<String> failed=new ArrayList<>();
  for (int i=0; i < tileArg.size(); i++) {
    int[] tArg=tileArg.get(i);
    INDArray inArr=orig[i];
    log.info("Starting test {} - shape {}, tile arg {}",i,Arrays.toString(inArr.shape()),Arrays.toString(tArg));
    SameDiff sd=SameDiff.create();
    SDVariable var=sd.var("in",inArr);
    SDVariable tile=sd.tile(var,tArg);
    if (exp[i].length() == 1 || inArr.length() == 1) {
      SDVariable loss=sd.sum("loss",tile);
    }
 else {
      SDVariable loss=sd.standardDeviation("loss",tile,true);
    }
    String msg="Shape=" + Arrays.toString(inArr.shape()) + " - tile="+ Arrays.toString(tArg);
    TestCase tc=new TestCase(sd).expected(tile,exp[i]).gradCheckMinAbsError(5e-3).gradCheckMaxRelativeError(5e-3);
    String error=OpValidation.validate(tc);
    if (error != null) {
      failed.add(msg + " - " + error);
    }
  }
  assertEquals(failed.toString(),0,failed.size());
}
