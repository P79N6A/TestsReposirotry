@Test public void testStridedSliceGradient(){
  Nd4j.getRandom().setSeed(12345);
  List<SSCase> testCases=new ArrayList<>();
  testCases.add(SSCase.builder().shape(3,4).begin(0,0).end(3,4).strides(1,1).build());
  testCases.add(SSCase.builder().shape(3,4).begin(1,1).end(2,3).strides(1,1).build());
  testCases.add(SSCase.builder().shape(3,4).begin(-999,0).end(3,4).strides(1,1).beginMask(1).build());
  testCases.add(SSCase.builder().shape(3,4).begin(1,1).end(3,-999).strides(1,1).endMask(1 << 1).build());
  testCases.add(SSCase.builder().shape(3,4).begin(-999,0).end(-999,4).strides(1,1).beginMask(1).endMask(1).build());
  testCases.add(SSCase.builder().shape(3,4,5).begin(0,0,0).end(3,4,5).strides(1,1,1).build());
  testCases.add(SSCase.builder().shape(3,4,5).begin(1,2,3).end(3,4,5).strides(1,1,1).build());
  testCases.add(SSCase.builder().shape(3,4,5).begin(0,0,0).end(3,3,5).strides(1,2,2).build());
  testCases.add(SSCase.builder().shape(3,4,5).begin(1,-999,1).end(3,3,4).strides(1,1,1).beginMask(1 << 1).build());
  testCases.add(SSCase.builder().shape(3,4,5).begin(1,-999,1).end(3,3,-999).strides(1,1,1).beginMask(1 << 1).endMask(1 << 2).build());
  testCases.add(SSCase.builder().shape(3,4,5).begin(1,2).end(3,4).strides(1,1).ellipsisMask(1 << 1).build());
  testCases.add(SSCase.builder().shape(3,4,5).begin(1,-999,1,2).end(3,-999,3,4).strides(1,-999,1,2).newAxisMask(1 << 1).build());
  testCases.add(SSCase.builder().shape(3,4,5).begin(1,0,1).end(3,-999,4).strides(1,1,1).shrinkAxisMask(1 << 1).build());
  testCases.add(SSCase.builder().shape(3,4,5).begin(1,1,1).end(3,-999,4).strides(1,1,1).shrinkAxisMask(1 << 1).build());
  Map<Integer,INDArrayIndex[]> indices=new HashMap<>();
  indices.put(0,new INDArrayIndex[]{all(),all()});
  indices.put(1,new INDArrayIndex[]{interval(1,2),interval(1,3)});
  indices.put(2,new INDArrayIndex[]{interval(0,3),interval(0,4)});
  indices.put(3,new INDArrayIndex[]{interval(1,3),interval(1,4)});
  indices.put(5,new INDArrayIndex[]{all(),all(),all()});
  indices.put(7,new INDArrayIndex[]{interval(0,1,3),interval(0,2,3),interval(0,2,5)});
  List<String> failed=new ArrayList<>();
  for (int i=0; i < testCases.size(); i++) {
    SSCase t=testCases.get(i);
    INDArray arr=Nd4j.rand(t.getShape());
    SameDiff sd=SameDiff.create();
    SDVariable in=sd.var("in",arr);
    SDVariable slice=sd.stridedSlice(in,t.getBegin(),t.getEnd(),t.getStrides(),t.getBeginMask(),t.getEndMask(),t.getEllipsisMask(),t.getNewAxisMask(),t.getShrinkAxisMask());
    SDVariable stdev=sd.standardDeviation(slice,true);
    String msg="i=" + i + ": "+ t;
    log.info("Starting test: " + msg);
    TestCase tc=new TestCase(sd);
    tc.testName(msg);
    if (indices.containsKey(i)) {
      tc.expected(slice,arr.get(indices.get(i)).dup());
    }
    String error=OpValidation.validate(tc,true);
    if (error != null) {
      failed.add(error);
    }
  }
  assertEquals(failed.toString(),0,failed.size());
}
