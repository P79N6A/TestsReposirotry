@Test public void testConcat(){
  int[] concatDim=new int[]{0,0,0};
  List<List<int[]>> origShapes=new ArrayList<>();
  origShapes.add(Arrays.asList(new int[]{3,4},new int[]{5,4}));
  origShapes.add(Arrays.asList(new int[]{1,2,3},new int[]{1,2,3},new int[]{2,2,3}));
  origShapes.add(Arrays.asList(new int[]{1,2,3,4},new int[]{2,2,3,4}));
  List<String> failed=new ArrayList<>();
  for (int i=0; i < concatDim.length; i++) {
    SameDiff sd=SameDiff.create();
    List<int[]> shapes=origShapes.get(i);
    SDVariable[] toConcat=new SDVariable[shapes.size()];
    INDArray[] orig=new INDArray[shapes.size()];
    for (int j=0; j < shapes.size(); j++) {
      orig[j]=Nd4j.rand(shapes.get(j));
      toConcat[j]=sd.var("concat-in-" + String.valueOf(j),orig[j]);
    }
    SDVariable sdConcat=sd.concat("c",0,toConcat);
    SDVariable stdev=sd.standardDeviation("out",sdConcat,true);
    String msg="i=" + i + ", concatDim="+ concatDim[i];
    TestCase tc=new TestCase(sd);
    tc.testName(msg).expectedOutput("c",Nd4j.concat(concatDim[i],orig));
    String error=OpValidation.validate(tc);
    if (error != null) {
      failed.add(name);
    }
  }
  assertEquals(failed.toString(),0,failed.size());
}
