@Test public void testStack(){
  Nd4j.getRandom().setSeed(12345);
  List<String> failed=new ArrayList<>();
  List<long[]> origShape=Arrays.asList(new long[]{1},new long[]{1,1},new long[]{3,4},new long[]{3,4,5},new long[]{3,4,5,6});
  for (  long[] shape : origShape) {
    for (int axis=0; axis <= shape.length; axis++) {
      for (      int numInputs : new int[]{1,3}) {
        long[] expOutShape=new long[shape.length + 1];
        int x=0;
        for (int i=0; i <= shape.length; i++) {
          if (i == axis) {
            expOutShape[i]=numInputs;
          }
 else {
            expOutShape[i]=shape[x++];
          }
        }
        SameDiff sd=SameDiff.create();
        SDVariable[] in=new SDVariable[numInputs];
        INDArray[] inArr=new INDArray[numInputs];
        for (int i=0; i < numInputs; i++) {
          inArr[i]=Nd4j.rand(shape);
          in[i]=sd.var(String.valueOf(i),inArr[i]);
        }
        INDArray expStack=null;
        if (Arrays.equals(new long[]{3,4},shape)) {
          if (axis == 0) {
            INDArray out=Nd4j.create(numInputs,3,4);
            for (int i=0; i < numInputs; i++) {
              out.get(point(i),all(),all()).assign(inArr[i]);
            }
            expStack=out;
          }
 else           if (axis == 1) {
            INDArray out=Nd4j.create(3,numInputs,4);
            for (int i=0; i < numInputs; i++) {
              out.get(all(),point(i),all()).assign(inArr[i]);
            }
            expStack=out;
          }
 else {
            INDArray out=Nd4j.create(3,4,numInputs);
            for (int i=0; i < numInputs; i++) {
              out.get(all(),all(),point(i)).assign(inArr[i]);
            }
            expStack=out;
          }
        }
        SDVariable stack=sd.stack(axis,in);
        INDArray out=sd.execAndEndResult();
        assertArrayEquals(expOutShape,out.shape());
        if (ArrayUtil.prodLong(shape) == 1) {
          SDVariable loss=sd.sum("loss",stack);
        }
 else {
          SDVariable loss=sd.standardDeviation("loss",stack,true);
        }
        String msg=Arrays.toString(shape) + ", axis=" + axis+ ", numInputs="+ numInputs;
        TestCase tc=new TestCase(sd);
        if (expStack != null) {
          tc.expected(stack,expStack);
        }
        String error=OpValidation.validate(tc);
        if (error != null) {
          failed.add(name);
        }
      }
    }
  }
  assertEquals(failed.toString(),0,failed.size());
}
