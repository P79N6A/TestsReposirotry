@Test public void testGather(){
  List<INDArray> inArrs=new ArrayList<>();
  List<Integer> axis=new ArrayList<>();
  List<INDArray> indices=new ArrayList<>();
  inArrs.add(Nd4j.linspace(1,48,48).reshape(2,4,3,2));
  indices.add(Nd4j.trueVector(new double[]{1,0}));
  axis.add(-2);
  for (int i=0; i < inArrs.size(); i++) {
    INDArray in=inArrs.get(i);
    INDArray idx=indices.get(i);
    int a=axis.get(i);
    int aNorm=(a >= 0 ? a : a + in.rank());
    INDArray expOut;
    if (idx.rank() == 0) {
      INDArrayIndex[] get=new INDArrayIndex[in.rank()];
      for (int j=0; j < aNorm; j++) {
        get[j]=NDArrayIndex.all();
      }
      get[aNorm]=NDArrayIndex.point(idx.getInt(0));
      for (int j=aNorm + 1; j < in.rank(); j++) {
        get[j]=NDArrayIndex.all();
      }
      expOut=in.get(get);
    }
 else     if (idx.rank() == 1) {
      long[] shape=in.shape().clone();
      shape[aNorm]=idx.length();
      expOut=Nd4j.create(shape);
      INDArrayIndex[] get=new INDArrayIndex[in.rank()];
      INDArrayIndex[] put=new INDArrayIndex[in.rank()];
      for (int j=0; j < aNorm; j++) {
        get[j]=NDArrayIndex.all();
        put[j]=NDArrayIndex.all();
      }
      for (int j=aNorm + 1; j < in.rank(); j++) {
        get[j]=NDArrayIndex.all();
        put[j]=NDArrayIndex.all();
      }
      for (int j=0; j < idx.length(); j++) {
        get[aNorm]=NDArrayIndex.point(idx.getInt(j));
        put[aNorm]=NDArrayIndex.point(j);
        expOut.put(put,in.get(get));
      }
    }
 else {
      throw new RuntimeException("Rank 2+ tests not yet implemented");
    }
    SameDiff sd=SameDiff.create();
    SDVariable sdIn=sd.var("in",in);
    SDVariable sdIdx=sd.var("idx",idx);
    SDVariable gather=sd.gather(sdIn,sdIdx,a);
    SDVariable loss=gather.std(true);
    String err=OpValidation.validate(new TestCase(sd).expected(gather,expOut).gradCheckSkipVariables("idx"));
    assertNull(err);
  }
}
