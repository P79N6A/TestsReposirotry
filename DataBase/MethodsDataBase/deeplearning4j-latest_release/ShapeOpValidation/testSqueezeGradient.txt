@Test public void testSqueezeGradient(){
  val origShape=new long[]{3,4,5};
  List<String> failed=new ArrayList<>();
  for (int i=0; i < 3; i++) {
    val shape=origShape.clone();
    shape[i]=1;
    for (    Pair<INDArray,String> p : NDArrayCreationUtil.getAll3dTestArraysWithShape(12345,shape)) {
      INDArray inArr=p.getFirst().muli(100);
      SameDiff sd=SameDiff.create();
      SDVariable in=sd.var("in",inArr);
      SDVariable squeeze=sd.f().squeeze(in,i);
      SDVariable stdev=sd.standardDeviation("out",squeeze,true);
      long[] expShapePostSqueeze;
switch (i) {
case 0:
        expShapePostSqueeze=new long[]{4,5};
      break;
case 1:
    expShapePostSqueeze=new long[]{3,5};
  break;
case 2:
expShapePostSqueeze=new long[]{3,4};
break;
default :
throw new RuntimeException();
}
INDArray exp=inArr.dup('c').reshape('c',expShapePostSqueeze);
sd.execAndEndResult();
INDArray squeezed=squeeze.getArr();
INDArray out=sd.execAndEndResult();
INDArray expOut=in.getArr().std(true,Integer.MAX_VALUE);
assertEquals(expOut,out);
String msg="squeezeDim=" + i + ", source="+ p.getSecond();
TestCase tc=new TestCase(sd).testName(msg).expected(squeeze.getVarName(),exp).expectedOutput("out",expOut);
String error=OpValidation.validate(tc,true);
if (error != null) {
failed.add(name);
}
}
}
assertEquals(failed.toString(),0,failed.size());
}
