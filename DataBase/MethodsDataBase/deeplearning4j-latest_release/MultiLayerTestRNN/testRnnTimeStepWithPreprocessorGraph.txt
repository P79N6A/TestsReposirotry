@Test public void testRnnTimeStepWithPreprocessorGraph(){
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).graphBuilder().addInputs("in").addLayer("0",new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(10).nOut(10).activation(Activation.TANH).build(),"in").addLayer("1",new org.deeplearning4j.nn.conf.layers.GravesLSTM.Builder().nIn(10).nOut(10).activation(Activation.TANH).build(),"0").addLayer("2",new RnnOutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(10).nOut(10).build(),"1").setOutputs("2").inputPreProcessor("0",new FeedForwardToRnnPreProcessor()).build();
  ComputationGraph net=new ComputationGraph(conf);
  net.init();
  INDArray in=Nd4j.rand(1,10);
  net.rnnTimeStep(in);
}
