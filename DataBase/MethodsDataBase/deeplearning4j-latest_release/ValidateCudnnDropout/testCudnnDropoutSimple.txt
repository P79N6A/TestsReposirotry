@Test public void testCudnnDropoutSimple(){
  for (  int[] shape : new int[][]{{10,10},{5,2,5,2}}) {
    Nd4j.getRandom().setSeed(12345);
    INDArray in=Nd4j.ones(shape);
    double pRetain=0.25;
    double valueIfKept=1.0 / pRetain;
    CudnnDropoutHelper d=new CudnnDropoutHelper();
    INDArray out=Nd4j.createUninitialized(shape);
    d.applyDropout(in,out,pRetain);
    int countZero=Nd4j.getExecutioner().execAndReturn(new MatchCondition(out,Conditions.equals(0.0))).z().getInt(0);
    int countNonDropped=Nd4j.getExecutioner().execAndReturn(new MatchCondition(out,Conditions.equals(valueIfKept))).z().getInt(0);
    assertTrue(String.valueOf(countZero),countZero >= 5 && countZero <= 90);
    assertTrue(String.valueOf(countNonDropped),countNonDropped >= 5 && countNonDropped <= 95);
    assertEquals(100,countZero + countNonDropped);
    for (int i=0; i < 10; i++) {
      Nd4j.getRandom().setSeed(12345);
      d.setRngStates(null);
      d.setMask(null);
      INDArray outNew=Nd4j.createUninitialized(shape);
      d.applyDropout(in,outNew,pRetain);
      assertEquals(out,outNew);
    }
    INDArray gradAtOut=Nd4j.ones(shape);
    INDArray gradAtInput=Nd4j.createUninitialized(shape);
    d.backprop(gradAtOut,gradAtInput);
    Nd4j.getExecutioner().commit();
    assertEquals(out,gradAtInput);
  }
}
