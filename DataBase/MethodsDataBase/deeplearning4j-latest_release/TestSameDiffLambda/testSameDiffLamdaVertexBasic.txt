@Test public void testSameDiffLamdaVertexBasic(){
  Nd4j.getRandom().setSeed(12345);
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).updater(new Adam(0.01)).graphBuilder().addInputs("in1","in2").addLayer("0",new DenseLayer.Builder().nIn(5).nOut(5).activation(Activation.TANH).build(),"in1").addLayer("1",new DenseLayer.Builder().nIn(5).nOut(5).activation(Activation.TANH).build(),"in2").addVertex("lambda",new SameDiffSimpleLambdaVertex(),"0","1").addLayer("2",new OutputLayer.Builder().nIn(5).nOut(5).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build(),"lambda").setOutputs("2").build();
  ComputationGraphConfiguration confStd=new NeuralNetConfiguration.Builder().seed(12345).updater(new Adam(0.01)).graphBuilder().addInputs("in1","in2").addLayer("0",new DenseLayer.Builder().nIn(5).nOut(5).activation(Activation.TANH).build(),"in1").addLayer("1",new DenseLayer.Builder().nIn(5).nOut(5).activation(Activation.TANH).build(),"in2").addVertex("elementwise",new ElementWiseVertex(ElementWiseVertex.Op.Product),"0","1").addLayer("3",new OutputLayer.Builder().nIn(5).nOut(5).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build(),"elementwise").setOutputs("3").build();
  ComputationGraph lambda=new ComputationGraph(conf);
  lambda.init();
  ComputationGraph std=new ComputationGraph(confStd);
  std.init();
  lambda.setParams(std.params());
  INDArray in1=Nd4j.rand(3,5);
  INDArray in2=Nd4j.rand(3,5);
  INDArray labels=TestUtils.randomOneHot(3,5);
  MultiDataSet mds=new org.nd4j.linalg.dataset.MultiDataSet(new INDArray[]{in1,in2},new INDArray[]{labels});
  INDArray outLambda=lambda.output(in1,in2)[0];
  INDArray outStd=std.output(in1,in2)[0];
  assertEquals(outLambda,outStd);
  double scoreLambda=lambda.score(mds);
  double scoreStd=std.score(mds);
  assertEquals(scoreStd,scoreLambda,1e-6);
  for (int i=0; i < 3; i++) {
    lambda.fit(mds);
    std.fit(mds);
    String s=String.valueOf(i);
    assertEquals(s,std.params(),lambda.params());
    assertEquals(s,std.getFlattenedGradients(),lambda.getFlattenedGradients());
  }
  ComputationGraph loaded=TestUtils.testModelSerialization(lambda);
  outLambda=loaded.output(in1,in2)[0];
  outStd=std.output(in1,in2)[0];
  assertEquals(outStd,outLambda);
}
