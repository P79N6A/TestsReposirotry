@Test public void testAutoEncoderActivationLayer() throws Exception {
  int minibatch=3;
  int nIn=5;
  int layerSize=5;
  int nOut=3;
  INDArray next=Nd4j.rand(new int[]{minibatch,nIn});
  INDArray labels=Nd4j.zeros(minibatch,nOut);
  for (int i=0; i < minibatch; i++) {
    labels.putScalar(i,i % nOut,1.0);
  }
  Nd4j.getRandom().setSeed(12345);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).seed(123).list().layer(0,new AutoEncoder.Builder().nIn(nIn).nOut(layerSize).corruptionLevel(0.0).activation(Activation.SIGMOID).build()).layer(1,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).activation(Activation.SOFTMAX).nIn(layerSize).nOut(nOut).build()).build();
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  network.init();
  network.fit(next,labels);
  Nd4j.getRandom().setSeed(12345);
  MultiLayerConfiguration conf2=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).seed(123).list().layer(0,new AutoEncoder.Builder().nIn(nIn).nOut(layerSize).corruptionLevel(0.0).activation(Activation.IDENTITY).build()).layer(1,new org.deeplearning4j.nn.conf.layers.ActivationLayer.Builder().activation(Activation.SIGMOID).build()).layer(2,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.RECONSTRUCTION_CROSSENTROPY).activation(Activation.SOFTMAX).nIn(layerSize).nOut(nOut).build()).build();
  MultiLayerNetwork network2=new MultiLayerNetwork(conf2);
  network2.init();
  network2.fit(next,labels);
  assertEquals(network.getLayer(0).getParam("W"),network2.getLayer(0).getParam("W"));
  assertEquals(network.getLayer(1).getParam("W"),network2.getLayer(2).getParam("W"));
  assertEquals(network.getLayer(0).getParam("b"),network2.getLayer(0).getParam("b"));
  assertEquals(network.getLayer(1).getParam("b"),network2.getLayer(2).getParam("b"));
  network.init();
  network.setInput(next);
  List<INDArray> activations=network.feedForward(true);
  network2.init();
  network2.setInput(next);
  List<INDArray> activations2=network2.feedForward(true);
  assertEquals(activations.get(1).reshape(activations2.get(2).shape()),activations2.get(2));
  assertEquals(activations.get(2),activations2.get(3));
}
