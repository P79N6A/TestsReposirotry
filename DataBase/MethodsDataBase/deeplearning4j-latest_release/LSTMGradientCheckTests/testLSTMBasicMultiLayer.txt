@Test public void testLSTMBasicMultiLayer(){
  Nd4j.getRandom().setSeed(12345L);
  int timeSeriesLength=4;
  int nIn=2;
  int layerSize=2;
  int nOut=2;
  int miniBatchSize=5;
  boolean[] gravesLSTM=new boolean[]{true,false};
  for (  boolean graves : gravesLSTM) {
    Layer l0;
    Layer l1;
    if (graves) {
      l0=new GravesLSTM.Builder().nIn(nIn).nOut(layerSize).activation(Activation.SIGMOID).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1.0)).updater(new NoOp()).build();
      l1=new GravesLSTM.Builder().nIn(layerSize).nOut(layerSize).activation(Activation.SIGMOID).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1.0)).updater(new NoOp()).build();
    }
 else {
      l0=new LSTM.Builder().nIn(nIn).nOut(layerSize).activation(Activation.SIGMOID).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1.0)).updater(new NoOp()).build();
      l1=new LSTM.Builder().nIn(layerSize).nOut(layerSize).activation(Activation.SIGMOID).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1.0)).updater(new NoOp()).build();
    }
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345L).list().layer(0,l0).layer(1,l1).layer(2,new RnnOutputLayer.Builder(LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(layerSize).nOut(nOut).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1.0)).updater(new NoOp()).build()).build();
    MultiLayerNetwork mln=new MultiLayerNetwork(conf);
    mln.init();
    Random r=new Random(12345L);
    INDArray input=Nd4j.zeros(miniBatchSize,nIn,timeSeriesLength);
    for (int i=0; i < miniBatchSize; i++) {
      for (int j=0; j < nIn; j++) {
        for (int k=0; k < timeSeriesLength; k++) {
          input.putScalar(new int[]{i,j,k},r.nextDouble() - 0.5);
        }
      }
    }
    INDArray labels=Nd4j.zeros(miniBatchSize,nOut,timeSeriesLength);
    for (int i=0; i < miniBatchSize; i++) {
      for (int j=0; j < timeSeriesLength; j++) {
        int idx=r.nextInt(nOut);
        labels.putScalar(new int[]{i,idx,j},1.0);
      }
    }
    String testName="testLSTMBasic(" + (graves ? "GravesLSTM" : "LSTM") + ")";
    if (PRINT_RESULTS) {
      System.out.println(testName);
      for (int j=0; j < mln.getnLayers(); j++)       System.out.println("Layer " + j + " # params: "+ mln.getLayer(j).numParams());
    }
    boolean gradOK=GradientCheckUtil.checkGradients(mln,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels);
    assertTrue(testName,gradOK);
    TestUtils.testModelSerialization(mln);
  }
}
