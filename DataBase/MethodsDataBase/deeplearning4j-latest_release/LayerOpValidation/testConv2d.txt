@Test public void testConv2d(){
  Nd4j.getRandom().setSeed(12345);
  int[][] inputSizes=new int[][]{{1,3,8,8}};
  List<String> failed=new ArrayList<>();
  for (int i=0; i < 8; i++) {
    for (    int[] inSizeNCHW : inputSizes) {
      SameDiff sd=SameDiff.create();
      SDVariable in=null;
      int[] inSize;
      SDVariable out;
      String msg;
switch (i) {
case 0:
        msg="0 - conv2d+bias, nchw - input " + Arrays.toString(inSizeNCHW);
      inSize=inSizeNCHW;
    in=sd.var("in",inSize);
  SDVariable w0=sd.var("w0",Nd4j.rand(new int[]{3,3,inSizeNCHW[1],3}).muli(10));
SDVariable b0=sd.var("b0",Nd4j.rand(new long[]{3}).muli(10));
out=sd.conv2d(in,w0,b0,Conv2DConfig.builder().dataFormat(Conv2DConfig.NCHW).isSameMode(true).kH(3).kW(3).sH(1).sW(1).build());
break;
case 1:
msg="1 - conv2d+bias, nhwc - input " + Arrays.toString(inSizeNCHW);
inSize=nchwToNhwc(inSizeNCHW);
in=sd.var("in",inSize);
SDVariable w1=sd.var("w1",Nd4j.rand(new int[]{2,4,inSizeNCHW[1],3}).muli(10));
SDVariable b1=sd.var("b1",Nd4j.rand(new long[]{3}).muli(10));
out=sd.conv2d(in,w1,b1,Conv2DConfig.builder().dataFormat(Conv2DConfig.NHWC).isSameMode(false).kH(2).kW(4).sH(2).sW(2).build());
break;
case 2:
msg="2 - conv2d, no bias, nchw - input " + Arrays.toString(inSizeNCHW);
inSize=inSizeNCHW;
in=sd.var("in",inSize);
SDVariable w2=sd.var("w0",Nd4j.rand(new int[]{1,3,inSizeNCHW[1],3}).muli(10));
out=sd.conv2d(in,w2,Conv2DConfig.builder().dataFormat(Conv2DConfig.NCHW).isSameMode(true).kH(1).kW(3).sH(1).sW(2).build());
break;
case 3:
msg="3 - avg pool, NCHW, same - input " + Arrays.toString(inSizeNCHW);
inSize=inSizeNCHW;
in=sd.var("in",inSize);
out=sd.avgPooling2d(in,Pooling2DConfig.builder().isNHWC(true).isSameMode(true).kH(2).kW(2).sH(1).sW(1).build());
break;
case 4:
msg="3 - avg pool, NHWC, not same - input " + Arrays.toString(inSizeNCHW);
inSize=nchwToNhwc(inSizeNCHW);
in=sd.var("in",inSize);
out=sd.avgPooling2d(in,Pooling2DConfig.builder().isNHWC(true).isSameMode(false).kH(3).kW(2).sH(2).sW(2).build());
break;
case 5:
msg="5 - avg pool, NCHW, same - input " + Arrays.toString(inSizeNCHW);
inSize=inSizeNCHW;
in=sd.var("in",inSize);
out=sd.maxPooling2d(in,Pooling2DConfig.builder().isNHWC(false).isSameMode(true).kH(2).kW(2).sH(1).sW(1).build());
break;
case 6:
msg="6 - avg pool, NHWC, not same - input " + Arrays.toString(inSizeNCHW);
inSize=inSizeNCHW;
in=sd.var("in",inSize);
out=sd.maxPooling2d(in,Pooling2DConfig.builder().isNHWC(true).isSameMode(false).kH(3).kW(2).sH(2).sW(2).build());
break;
case 7:
msg="7 - upsampling2d, NCHW, 2x2 - " + Arrays.toString(inSizeNCHW);
inSize=inSizeNCHW;
in=sd.var("in",inSize);
out=sd.upsampling2d(in,true,2,2);
break;
default :
throw new RuntimeException();
}
INDArray inArr=Nd4j.rand(inSize).muli(10);
in.setArray(inArr);
SDVariable loss=sd.standardDeviation("loss",out,true);
log.info("Starting test: " + msg);
TestCase tc=new TestCase(sd);
String error=OpValidation.validate(tc);
if (error != null) {
failed.add(msg);
}
}
}
assertEquals(failed.toString(),0,failed.size());
}
