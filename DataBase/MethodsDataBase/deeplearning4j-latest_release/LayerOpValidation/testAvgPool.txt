@Test public void testAvgPool(){
  long[] inSize={1,8,8,3};
  Pooling2DConfig conf=Pooling2DConfig.builder().isNHWC(true).isSameMode(false).kH(3).kW(2).sH(2).sW(2).type(Pooling2D.Pooling2DType.AVG).build();
  INDArray input=Nd4j.create(inSize);
  AvgPooling2D avgPooling2D=AvgPooling2D.builder().arrayInput(input).config(conf).build();
  List<long[]> outSizes=Nd4j.getExecutioner().calculateOutputShape(avgPooling2D);
  assertEquals(1,outSizes.size());
  int outH=(8 - 3) / 2 + 1;
  int outW=(8 - 2) / 2 + 1;
  long[] exp=new long[]{1,outH,outW,3};
  assertEquals(1,outSizes.size());
  assertArrayEquals(exp,outSizes.get(0));
  INDArray grad=Nd4j.create(exp);
  Pooling2DDerivative avg2dDeriv=Pooling2DDerivative.derivativeBuilder().arrayInputs(new INDArray[]{input,grad}).arrayOutputs(new INDArray[]{Nd4j.create(inSize)}).config(conf).build();
  List<long[]> outSizesBP=Nd4j.getExecutioner().calculateOutputShape(avg2dDeriv);
  assertEquals(1,outSizesBP.size());
  assertArrayEquals(inSize,outSizesBP.get(0));
  Nd4j.getExecutioner().exec(avg2dDeriv);
}
