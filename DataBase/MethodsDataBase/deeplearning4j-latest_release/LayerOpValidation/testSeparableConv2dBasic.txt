@Test public void testSeparableConv2dBasic(){
  Nd4j.getRandom().setSeed(12345);
  int nIn=2;
  int nOut=3;
  int kH=2;
  int kW=2;
  int mb=2;
  int imgH=8;
  int imgW=8;
  int depthWise=3;
  SameDiff sd=SameDiff.create();
  INDArray depthWeightArr=Nd4j.rand(new int[]{kH,kW,nIn,depthWise});
  INDArray pointWeightArr=Nd4j.rand(new int[]{1,1,nIn * depthWise,nOut});
  INDArray bArr=Nd4j.rand(new int[]{nOut});
  INDArray inArr=Nd4j.rand(new int[]{mb,nIn,imgH,imgW});
  SDVariable in=sd.var("in",inArr);
  SDVariable dW=sd.var("dW",depthWeightArr);
  SDVariable pW=sd.var("pW",pointWeightArr);
  SDVariable b=sd.var("b",bArr);
  SDVariable[] vars=new SDVariable[]{in,dW,pW,b};
  Conv2DConfig c=Conv2DConfig.builder().kH(kH).kW(kW).pH(0).pW(0).sH(1).sW(1).dH(1).dW(1).isSameMode(false).dataFormat(Conv2DConfig.NCHW).build();
  SDVariable out=sd.sconv2d(vars,c);
  out=sd.tanh("out",out);
  INDArray outArr=sd.execAndEndResult();
  val outShape=outArr.shape();
  assertArrayEquals(new long[]{mb,nOut,7,7},outShape);
  SDVariable loss=out.std(true);
  TestCase tc=new TestCase(sd);
  String err=OpValidation.validate(tc);
  assertNull(err);
}
