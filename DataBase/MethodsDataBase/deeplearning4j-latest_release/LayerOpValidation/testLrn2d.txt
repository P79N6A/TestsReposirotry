@Test public void testLrn2d(){
  OpValidationSuite.ignoreFailing();
  Nd4j.getRandom().setSeed(12345);
  int[][] inputSizes=new int[][]{{1,3,8,8},{3,6,12,12}};
  List<String> failed=new ArrayList<>();
  for (  int[] inSizeNCHW : inputSizes) {
    SameDiff sd=SameDiff.create();
    SDVariable in=null;
    int[] inSize;
    String msg="7 - LRN with NCHW - input" + Arrays.toString(inSizeNCHW);
    inSize=inSizeNCHW;
    in=sd.var("in",inSize);
    SDVariable out=sd.localResponseNormalization(in,LocalResponseNormalizationConfig.builder().depth(3).bias(1).alpha(1).beta(0.5).build());
    INDArray inArr=Nd4j.rand(inSize).muli(10);
    in.setArray(inArr);
    SDVariable loss=sd.standardDeviation("loss",out,true);
    log.info("Starting test: " + msg);
    TestCase tc=new TestCase(sd);
    String error=OpValidation.validate(tc);
    if (error != null) {
      failed.add(msg);
    }
  }
  assertEquals(failed.toString(),0,failed.size());
}
