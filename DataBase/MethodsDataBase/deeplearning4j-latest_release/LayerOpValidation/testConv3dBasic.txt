@Test public void testConv3dBasic(){
  int nIn=3;
  int nOut=4;
  int kH=2;
  int kW=2;
  int kD=2;
  int mb=3;
  int imgH=8;
  int imgW=8;
  int imgT=8;
  SameDiff sd=SameDiff.create();
  INDArray wArr=Nd4j.rand(new int[]{kD,kH,kW,nIn,nOut});
  INDArray bArr=Nd4j.rand(1,nOut);
  INDArray inArr=Nd4j.rand(new int[]{mb,nIn,imgT,imgH,imgW});
  SDVariable in=sd.var("in",inArr);
  SDVariable w=sd.var("W",wArr);
  SDVariable b=sd.var("b",bArr);
  Conv3DConfig conv3DConfig=Conv3DConfig.builder().kH(kH).kW(kW).kD(kD).sD(1).sH(1).sW(1).dH(1).dW(1).dD(1).isSameMode(true).biasUsed(false).dataFormat(Conv3DConfig.NCDHW).build();
  SDVariable out=sd.conv3d(in,w,b,conv3DConfig);
  out=sd.tanh("out",out);
  INDArray outArr=sd.execAndEndResult();
  val outShape=outArr.shape();
  assertArrayEquals(new long[]{mb,nOut,8,8,8},outShape);
  SDVariable loss=out.std(true);
  TestCase tc=new TestCase(sd);
  String err=OpValidation.validate(tc);
  assertNull(err);
}
