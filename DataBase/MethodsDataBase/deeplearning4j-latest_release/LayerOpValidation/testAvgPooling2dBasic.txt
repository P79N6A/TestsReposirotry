@Test public void testAvgPooling2dBasic(){
  Nd4j.getRandom().setSeed(12345);
  int nIn=3;
  int kH=2;
  int kW=2;
  int mb=3;
  int imgH=8;
  int imgW=8;
  SameDiff sd=SameDiff.create();
  INDArray inArr=Nd4j.rand(new int[]{mb,nIn,imgH,imgW});
  SDVariable in=sd.var("in",inArr);
  Pooling2DConfig pooling2DConfig=Pooling2DConfig.builder().kH(kH).kW(kW).pH(0).pW(0).sH(1).sW(1).dH(1).dW(1).isSameMode(false).build();
  SDVariable outPool=sd.avgPooling2d(in,pooling2DConfig);
  SDVariable out=sd.tanh("out",outPool);
  INDArray outArr=sd.execAndEndResult();
  val outShape=outArr.shape();
  assertArrayEquals(new long[]{mb,nIn,7,7},outShape);
  SDVariable loss=out.std(true);
  INDArray exp=Nd4j.create(mb,nIn,7,7);
  NdIndexIterator iter=new NdIndexIterator(mb,nIn,7,7);
  while (iter.hasNext()) {
    long[] next=iter.next();
    double avg=(inArr.getDouble(next) + inArr.getDouble(next[0],next[1],next[2] + 1,next[3]) + inArr.getDouble(next[0],next[1],next[2],next[3] + 1)+ inArr.getDouble(next[0],next[1],next[2] + 1,next[3] + 1)) / 4.0;
    exp.putScalar(next,avg);
  }
  assertNull(OpValidation.validate(new TestCase(sd).expected(outPool,exp)));
}
