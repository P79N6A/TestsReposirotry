@Test public void testTadShapes2d(){
  int rows=3;
  int cols=4;
  int dim2=5;
  INDArray testValues=Nd4j.linspace(1,rows * cols * dim2,rows * cols * dim2).reshape('c',rows,cols,dim2);
  List<Pair<INDArray,String>> list=NDArrayCreationUtil.getAll3dTestArraysWithShape(12345,rows,cols,dim2);
  for (  Pair<INDArray,String> p : list) {
    INDArray arr=p.getFirst().assign(testValues);
    assertEquals(dim2,arr.tensorssAlongDimension(0,1));
    for (int i=0; i < dim2; i++) {
      INDArray javaTad=arr.javaTensorAlongDimension(i,0,1);
      INDArray tad=arr.tensorAlongDimension(i,0,1);
      int javaEleStride=javaTad.elementWiseStride();
      int testTad=tad.elementWiseStride();
      assertEquals(javaEleStride,testTad);
      assertEquals(javaTad,tad);
      assertArrayEquals(new long[]{rows,cols},tad.shape());
      assertEquals(testValues.tensorAlongDimension(i,0,1),tad);
    }
    assertEquals(cols,arr.tensorssAlongDimension(0,2));
    for (int i=0; i < cols; i++) {
      INDArray javaTad=arr.javaTensorAlongDimension(i,0,2);
      INDArray tad=arr.tensorAlongDimension(i,0,2);
      assertEquals(javaTad,tad);
      assertArrayEquals(new long[]{rows,dim2},tad.shape());
      assertEquals(testValues.javaTensorAlongDimension(i,0,2),tad);
    }
    assertEquals(rows,arr.tensorssAlongDimension(1,2));
    for (int i=0; i < rows; i++) {
      INDArray tad=arr.tensorAlongDimension(i,1,2);
      assertArrayEquals(new long[]{cols,dim2},tad.shape());
      assertEquals(testValues.javaTensorAlongDimension(i,1,2),tad);
    }
  }
  int dim3=6;
  testValues=Nd4j.linspace(1,rows * cols * dim2* dim3,rows * cols * dim2* dim3).reshape('c',rows,cols,dim2,dim3);
  list=NDArrayCreationUtil.getAll4dTestArraysWithShape(12345,rows,cols,dim2,dim3);
  for (  Pair<INDArray,String> p : list) {
    INDArray arr=p.getFirst().assign(testValues);
    assertEquals(dim2 * dim3,arr.tensorssAlongDimension(0,1));
    for (int i=0; i < dim2 * dim3; i++) {
      INDArray tad=arr.tensorAlongDimension(i,0,1);
      assertArrayEquals(new long[]{rows,cols},tad.shape());
      assertEquals(testValues.javaTensorAlongDimension(i,0,1),tad);
    }
    assertEquals(cols * dim3,arr.tensorssAlongDimension(0,2));
    for (int i=0; i < cols * dim3; i++) {
      INDArray tad=arr.tensorAlongDimension(i,0,2);
      assertArrayEquals(new long[]{rows,dim2},tad.shape());
      assertEquals(testValues.javaTensorAlongDimension(i,0,2),tad);
    }
    assertEquals(cols * dim2,arr.tensorssAlongDimension(0,3));
    for (int i=0; i < cols * dim2; i++) {
      INDArray tad=arr.tensorAlongDimension(i,0,3);
      assertArrayEquals(new long[]{rows,dim3},tad.shape());
      assertEquals(testValues.javaTensorAlongDimension(i,0,3),tad);
    }
    assertEquals(rows * dim3,arr.tensorssAlongDimension(1,2));
    for (int i=0; i < rows * dim3; i++) {
      INDArray tad=arr.tensorAlongDimension(i,1,2);
      assertArrayEquals(new long[]{cols,dim2},tad.shape());
      assertEquals(testValues.javaTensorAlongDimension(i,1,2),tad);
    }
    assertEquals(rows * dim2,arr.tensorssAlongDimension(1,3));
    for (int i=0; i < rows * dim2; i++) {
      INDArray tad=arr.tensorAlongDimension(i,1,3);
      assertArrayEquals(new long[]{cols,dim3},tad.shape());
      assertEquals(testValues.javaTensorAlongDimension(i,1,3),tad);
    }
    assertEquals(rows * cols,arr.tensorssAlongDimension(2,3));
    for (int i=0; i < rows * cols; i++) {
      INDArray tad=arr.tensorAlongDimension(i,2,3);
      assertArrayEquals(new long[]{dim2,dim3},tad.shape());
      assertEquals(testValues.javaTensorAlongDimension(i,2,3),tad);
    }
  }
}
