@Test public void testTadShapes1d(){
  int rows=3;
  int cols=4;
  INDArray testValues=Nd4j.linspace(1,rows * cols,rows * cols).reshape('c',rows,cols);
  List<Pair<INDArray,String>> list=NDArrayCreationUtil.getAllTestMatricesWithShape('c',rows,cols,12345);
  for (  Pair<INDArray,String> p : list) {
    INDArray arr=p.getFirst().assign(testValues);
    assertEquals(cols,arr.tensorssAlongDimension(0));
    for (int i=0; i < cols; i++) {
      INDArray tad=arr.tensorAlongDimension(i,0);
      INDArray javaTad=arr.javaTensorAlongDimension(i,0);
      assertEquals(javaTad,tad);
      assertArrayEquals(new int[]{1,rows},tad.shape());
      assertEquals(testValues.javaTensorAlongDimension(i,0),tad);
    }
    assertEquals(rows,arr.tensorssAlongDimension(1));
    for (int i=0; i < rows; i++) {
      INDArray tad=arr.tensorAlongDimension(i,1);
      assertArrayEquals(new int[]{1,cols},tad.shape());
      assertEquals(testValues.javaTensorAlongDimension(i,1),tad);
    }
  }
  int dim2=5;
  log.info("AF");
  testValues=Nd4j.linspace(1,rows * cols * dim2,rows * cols * dim2).reshape('c',rows,cols,dim2);
  list=NDArrayCreationUtil.getAll3dTestArraysWithShape(12345,rows,cols,dim2);
  for (  Pair<INDArray,String> p : list) {
    INDArray arr=p.getFirst().assign(testValues);
    INDArray javaTad=arr.javaTensorAlongDimension(0,0);
    INDArray tadTest=arr.tensorAlongDimension(0,0);
    assertEquals(javaTad,tadTest);
    assertEquals("Failed on " + p.getValue(),cols * dim2,arr.tensorssAlongDimension(0));
    for (int i=0; i < cols * dim2; i++) {
      INDArray tad=arr.tensorAlongDimension(i,0);
      assertArrayEquals(new int[]{1,rows},tad.shape());
      assertEquals(testValues.javaTensorAlongDimension(i,0),tad);
    }
    assertEquals(rows * dim2,arr.tensorssAlongDimension(1));
    for (int i=0; i < rows * dim2; i++) {
      INDArray tad=arr.tensorAlongDimension(i,1);
      assertArrayEquals(new int[]{1,cols},tad.shape());
      assertEquals(testValues.javaTensorAlongDimension(i,1),tad);
    }
    assertEquals(rows * cols,arr.tensorssAlongDimension(2));
    for (int i=0; i < rows * cols; i++) {
      INDArray tad=arr.tensorAlongDimension(i,2);
      assertArrayEquals(new int[]{1,dim2},tad.shape());
      assertEquals(testValues.javaTensorAlongDimension(i,2),tad);
    }
  }
}
