@Test public void testTadKnownValues(){
  int[] shape={2,3,4};
  INDArray arr=Nd4j.create(shape);
  for (int i=0; i < shape[0]; i++) {
    for (int j=0; j < shape[1]; j++) {
      for (int k=0; k < shape[2]; k++) {
        double d=100 * i + 10 * j + k;
        arr.putScalar(i,j,k,d);
      }
    }
  }
  INDArray exp01_0=Nd4j.create(new double[][]{{0,10,20},{100,110,120}});
  INDArray exp01_1=Nd4j.create(new double[][]{{1,11,21},{101,111,121}});
  INDArray exp02_0=Nd4j.create(new double[][]{{0,1,2,3},{100,101,102,103}});
  INDArray exp02_1=Nd4j.create(new double[][]{{10,11,12,13},{110,111,112,113}});
  INDArray exp12_0=Nd4j.create(new double[][]{{0,1,2,3},{10,11,12,13},{20,21,22,23}});
  INDArray exp12_1=Nd4j.create(new double[][]{{100,101,102,103},{110,111,112,113},{120,121,122,123}});
  assertEquals(exp01_0,arr.tensorAlongDimension(0,0,1));
  assertEquals(exp01_0,arr.tensorAlongDimension(0,1,0));
  assertEquals(exp01_1,arr.tensorAlongDimension(1,0,1));
  assertEquals(exp01_1,arr.tensorAlongDimension(1,1,0));
  assertEquals(exp02_0,arr.tensorAlongDimension(0,0,2));
  assertEquals(exp02_0,arr.tensorAlongDimension(0,2,0));
  assertEquals(exp02_1,arr.tensorAlongDimension(1,0,2));
  assertEquals(exp02_1,arr.tensorAlongDimension(1,2,0));
  assertEquals(exp12_0,arr.tensorAlongDimension(0,1,2));
  assertEquals(exp12_0,arr.tensorAlongDimension(0,2,1));
  assertEquals(exp12_1,arr.tensorAlongDimension(1,1,2));
  assertEquals(exp12_1,arr.tensorAlongDimension(1,2,1));
}
