@Test @Ignore public void testBasicMnistDataSource() throws InterruptedException {
  ParameterSpace<Double> learningRateHyperparam=new ContinuousParameterSpace(0.0001,0.1);
  ParameterSpace<Integer> layerSizeHyperparam=new IntegerParameterSpace(16,256);
  MultiLayerSpace hyperparameterSpace=new MultiLayerSpace.Builder().weightInit(WeightInit.XAVIER).l2(0.0001).updater(new SgdSpace(learningRateHyperparam)).addLayer(new DenseLayerSpace.Builder().nIn(784).activation(Activation.LEAKYRELU).nOut(layerSizeHyperparam).build()).addLayer(new OutputLayerSpace.Builder().nOut(10).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build()).build();
  CandidateGenerator candidateGenerator=new RandomSearchGenerator(hyperparameterSpace,null);
  ScoreFunction scoreFunction=new EvaluationScoreFunction(Evaluation.Metric.ACCURACY);
  TerminationCondition[] terminationConditions={new MaxTimeCondition(5,TimeUnit.MINUTES),new MaxCandidatesCondition(2)};
  String modelSavePath=new File(System.getProperty("java.io.tmpdir"),"ArbiterUiTestBasicMnist\\").getAbsolutePath();
  File f=new File(modelSavePath);
  if (f.exists())   f.delete();
  f.mkdir();
  if (!f.exists())   throw new RuntimeException();
  Class<? extends DataSource> ds=MnistDataSource.class;
  Properties dsp=new Properties();
  dsp.setProperty("minibatch","8");
  OptimizationConfiguration configuration=new OptimizationConfiguration.Builder().candidateGenerator(candidateGenerator).dataSource(ds,dsp).modelSaver(new FileModelSaver(modelSavePath)).scoreFunction(scoreFunction).terminationConditions(terminationConditions).build();
  IOptimizationRunner runner=new LocalOptimizationRunner(configuration,new MultiLayerNetworkTaskCreator());
  StatsStorage ss=new InMemoryStatsStorage();
  StatusListener sl=new ArbiterStatusListener(ss);
  runner.addListeners(sl);
  UIServer.getInstance().attach(ss);
  runner.execute();
  Thread.sleep(90000);
}
