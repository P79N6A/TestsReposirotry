@Test public void testVariableInput1() throws Exception {
  Nd4jWorkspace workspace=(Nd4jWorkspace)Nd4j.getWorkspaceManager().getWorkspaceForCurrentThread(adsiConfiguration,"ADSI");
  INDArray array1=null;
  INDArray array2=null;
  try (MemoryWorkspace ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(adsiConfiguration,"ADSI")){
    array1=Nd4j.create(8,128,100);
  }
   long requiredMemory=8 * 128 * 100* Nd4j.sizeOfDataType();
  long shiftedSize=((long)(requiredMemory * 1.3)) + (8 - (((long)(requiredMemory * 1.3)) % 8));
  assertEquals(shiftedSize,workspace.getInitialBlockSize());
  assertEquals(shiftedSize * 4,workspace.getCurrentSize());
  assertEquals(0,workspace.getHostOffset());
  assertEquals(0,workspace.getDeviceOffset());
  assertEquals(1,workspace.getCyclesCount());
  assertEquals(0,workspace.getStepNumber());
  try (MemoryWorkspace ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(adsiConfiguration,"ADSI")){
    array1=Nd4j.create(8,128,100);
  }
   assertEquals(workspace.getInitialBlockSize(),workspace.getHostOffset());
  assertEquals(workspace.getInitialBlockSize(),workspace.getDeviceOffset());
  assertEquals(2,workspace.getCyclesCount());
  assertEquals(0,workspace.getStepNumber());
  try (MemoryWorkspace ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(adsiConfiguration,"ADSI")){
    array1=Nd4j.create(8,128,200).assign(1.0);
  }
   assertEquals(workspace.getInitialBlockSize(),workspace.getHostOffset());
  assertEquals(workspace.getInitialBlockSize(),workspace.getDeviceOffset());
  assertEquals(1,workspace.getNumberOfPinnedAllocations());
  assertEquals(3,workspace.getCyclesCount());
  assertEquals(0,workspace.getStepNumber());
  try (MemoryWorkspace ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(adsiConfiguration,"ADSI")){
    array1=Nd4j.create(8,128,100);
  }
   assertEquals(2,workspace.getNumberOfPinnedAllocations());
  assertEquals(0,workspace.getStepNumber());
  assertEquals(4,workspace.getCyclesCount());
  try (MemoryWorkspace ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(adsiConfiguration,"ADSI")){
    array1=Nd4j.create(8,128,100);
  }
   assertEquals(3,workspace.getNumberOfPinnedAllocations());
  assertEquals(1,workspace.getStepNumber());
  assertEquals(5,workspace.getCyclesCount());
  for (int i=0; i < 12; i++) {
    try (MemoryWorkspace ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(adsiConfiguration,"ADSI")){
      array1=Nd4j.create(8,128,100);
    }
   }
  assertEquals(4,workspace.getStepNumber());
  requiredMemory=8 * 128 * 200* Nd4j.sizeOfDataType();
  shiftedSize=((long)(requiredMemory * 1.3)) + (8 - (((long)(requiredMemory * 1.3)) % 8));
  assertEquals(shiftedSize * 4,workspace.getCurrentSize());
  assertEquals(workspace.getCurrentSize(),workspace.getHostOffset());
  assertEquals(workspace.getCurrentSize(),workspace.getDeviceOffset());
}
