/** 
 * This simple test checks for over-time learning with coefficient applied
 * @throws Exception
 */
@Test public void testUnboundedLoop2() throws Exception {
  WorkspaceConfiguration configuration=WorkspaceConfiguration.builder().initialSize(0).policyReset(ResetPolicy.ENDOFBUFFER_REACHED).policyAllocation(AllocationPolicy.OVERALLOCATE).overallocationLimit(4.0).policyLearning(LearningPolicy.OVER_TIME).cyclesBeforeInitialization(5).build();
  Nd4jWorkspace ws1=(Nd4jWorkspace)Nd4j.getWorkspaceManager().getWorkspaceForCurrentThread(configuration,"ITER");
  long requiredMemory=100 * Nd4j.sizeOfDataType();
  long shiftedSize=((long)(requiredMemory * 1.3)) + (8 - (((long)(requiredMemory * 1.3)) % 8));
  for (int x=0; x < 100; x++) {
    try (Nd4jWorkspace wsI=(Nd4jWorkspace)Nd4j.getWorkspaceManager().getWorkspaceForCurrentThread(configuration,"ITER").notifyScopeEntered()){
      INDArray array=Nd4j.create(100);
    }
     if (x > 4) {
      assertEquals(shiftedSize,ws1.getInitialBlockSize());
      assertEquals(5 * shiftedSize,ws1.getCurrentSize());
    }
 else     if (x < 4) {
      assertEquals("Failed on iteration " + x,0,ws1.getCurrentSize());
    }
  }
  assertEquals(5 * shiftedSize,ws1.getCurrentSize());
  assertNull(Nd4j.getMemoryManager().getCurrentWorkspace());
}
