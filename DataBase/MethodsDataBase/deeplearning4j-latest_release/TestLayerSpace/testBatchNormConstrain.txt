@Test public void testBatchNormConstrain(){
  ArrayList<List<LayerConstraint>> constrainListOptions=new ArrayList<List<LayerConstraint>>();
  constrainListOptions.add(Collections.singletonList((LayerConstraint)new MaxNormConstraint(0.5,1)));
  constrainListOptions.add(Collections.singletonList((LayerConstraint)new MinMaxNormConstraint(0.3,0.4,1.0,1)));
  constrainListOptions.add(Collections.singletonList((LayerConstraint)new NonNegativeConstraint()));
  constrainListOptions.add(Collections.singletonList((LayerConstraint)new UnitNormConstraint(1)));
  DiscreteParameterSpace<List<LayerConstraint>> constrainParamSpace=new DiscreteParameterSpace<>(constrainListOptions);
  BatchNormalizationSpace sp=new BatchNormalizationSpace.Builder().gamma(1.5).beta(0.6).lockGammaBeta(true).constrainBeta(constrainParamSpace).constrainGamma(new NonNegativeConstraint()).build();
  BatchNormalization bnExpected=new BatchNormalization.Builder().gamma(1.5).beta(0.6).lockGammaBeta(true).constrainBeta(new NonNegativeConstraint()).constrainGamma(new NonNegativeConstraint()).build();
  List<ParameterSpace> list=sp.collectLeaves();
  int k=0;
  for (int j=0; j < list.size(); j++) {
    if (list.get(j).numParameters() > 0) {
      list.get(j).setIndices(k++);
    }
  }
  assertEquals(1,sp.getNumParameters());
  BatchNormalization bn=sp.getValue(new double[]{0.6});
  assertEquals(bnExpected,bn);
}
