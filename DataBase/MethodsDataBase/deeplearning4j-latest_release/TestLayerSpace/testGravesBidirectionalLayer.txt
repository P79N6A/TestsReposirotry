@Test public void testGravesBidirectionalLayer(){
  Activation[] actFns=new Activation[]{Activation.SOFTSIGN,Activation.RELU,Activation.LEAKYRELU};
  GravesBidirectionalLSTMLayerSpace ls=new GravesBidirectionalLSTMLayerSpace.Builder().activation(new DiscreteParameterSpace<>(actFns)).forgetGateBiasInit(new ContinuousParameterSpace(0.5,0.8)).nIn(10).nOut(new IntegerParameterSpace(10,20)).build();
  List<ParameterSpace> list=ls.collectLeaves();
  int k=0;
  for (int j=0; j < list.size(); j++) {
    if (list.get(j).numParameters() > 0) {
      list.get(j).setIndices(k++);
    }
  }
  int nParam=ls.numParameters();
  assertEquals(3,nParam);
  Random r=new Random(12345);
  for (int i=0; i < 20; i++) {
    double[] d=new double[nParam];
    for (int j=0; j < d.length; j++) {
      d[j]=r.nextDouble();
    }
    GravesBidirectionalLSTM el=ls.getValue(d);
    IActivation activation=el.getActivationFn();
    long nOut=el.getNOut();
    double forgetGate=el.getForgetGateBiasInit();
    System.out.println(activation + "\t" + nOut+ "\t"+ forgetGate);
    assertTrue(containsActivationFunction(actFns,activation));
    assertTrue(nOut >= 10 && nOut <= 20);
    assertTrue(forgetGate >= 0.5 && forgetGate <= 0.8);
  }
}
