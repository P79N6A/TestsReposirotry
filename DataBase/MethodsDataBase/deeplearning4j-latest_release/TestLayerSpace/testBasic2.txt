@Test public void testBasic2(){
  Activation[] actFns=new Activation[]{Activation.SOFTSIGN,Activation.RELU,Activation.LEAKYRELU};
  Random r=new Random(12345);
  for (int i=0; i < 20; i++) {
    new DenseLayer.Builder().build();
    DenseLayerSpace ls=new DenseLayerSpace.Builder().nOut(20).updater(new SgdSpace(new ContinuousParameterSpace(0.3,0.4))).l2(new ContinuousParameterSpace(0.01,0.1)).activation(new DiscreteParameterSpace<>(actFns)).build();
    List<ParameterSpace> list=ls.collectLeaves();
    int k=0;
    for (int j=0; j < list.size(); j++) {
      if (list.get(j).numParameters() > 0) {
        list.get(j).setIndices(k++);
      }
    }
    int nParam=ls.numParameters();
    assertEquals(3,nParam);
    double[] d=new double[nParam];
    for (int j=0; j < d.length; j++) {
      d[j]=r.nextDouble();
    }
    DenseLayer l=ls.getValue(d);
    assertEquals(20,l.getNOut());
    double lr=((Sgd)l.getIUpdater()).getLearningRate();
    double l2=l.getL2();
    IActivation activation=l.getActivationFn();
    System.out.println(lr + "\t" + l2+ "\t"+ activation);
    assertTrue(lr >= 0.3 && lr <= 0.4);
    assertTrue(l2 >= 0.01 && l2 <= 0.1);
    assertTrue(containsActivationFunction(actFns,activation));
  }
}
