@Test public void normalizationTests(){
  List<List<Writable>> data=new ArrayList<>();
  Schema.Builder builder=new Schema.Builder();
  int numColumns=6;
  for (int i=0; i < numColumns; i++)   builder.addColumnDouble(String.valueOf(i));
  for (int i=0; i < 5; i++) {
    List<Writable> record=new ArrayList<>(numColumns);
    data.add(record);
    for (int j=0; j < numColumns; j++) {
      record.add(new DoubleWritable(1.0));
    }
  }
  INDArray arr=RecordConverter.toMatrix(data);
  Schema schema=builder.build();
  JavaRDD<List<Writable>> rdd=sc.parallelize(data);
  assertEquals(schema,DataFrames.fromStructType(DataFrames.fromSchema(schema)));
  assertEquals(rdd.collect(),DataFrames.toRecords(DataFrames.toDataFrame(schema,rdd)).getSecond().collect());
  DataRowsFacade dataFrame=DataFrames.toDataFrame(schema,rdd);
  dataFrame.get().show();
  Normalization.zeromeanUnitVariance(dataFrame).get().show();
  Normalization.normalize(dataFrame).get().show();
  NormalizerStandardize standardScaler=new NormalizerStandardize();
  standardScaler.fit(new DataSet(arr.dup(),arr.dup()));
  INDArray standardScalered=arr.dup();
  standardScaler.transform(new DataSet(standardScalered,standardScalered));
  DataNormalization zeroToOne=new NormalizerMinMaxScaler();
  zeroToOne.fit(new DataSet(arr.dup(),arr.dup()));
  INDArray zeroToOnes=arr.dup();
  zeroToOne.transform(new DataSet(zeroToOnes,zeroToOnes));
  INDArray zeroMeanUnitVarianceDataFrame=RecordConverter.toMatrix(Normalization.zeromeanUnitVariance(schema,rdd).collect());
  INDArray zeroMeanUnitVarianceDataFrameZeroToOne=RecordConverter.toMatrix(Normalization.normalize(schema,rdd).collect());
  assertEquals(standardScalered,zeroMeanUnitVarianceDataFrame);
  assertTrue(zeroToOnes.equalsWithEps(zeroMeanUnitVarianceDataFrameZeroToOne,1e-1));
}
