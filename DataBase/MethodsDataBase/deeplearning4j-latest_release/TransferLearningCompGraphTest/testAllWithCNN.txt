@Test public void testAllWithCNN(){
  DataSet randomData=new DataSet(Nd4j.rand(10,28 * 28 * 3).reshape(10,3,28,28),Nd4j.rand(10,10));
  ComputationGraph modelToFineTune=new ComputationGraph(new NeuralNetConfiguration.Builder().seed(123).weightInit(WeightInit.XAVIER).updater(new Nesterovs(0.01,0.9)).graphBuilder().addInputs("layer0In").setInputTypes(InputType.convolutionalFlat(28,28,3)).addLayer("layer0",new ConvolutionLayer.Builder(5,5).nIn(3).stride(1,1).nOut(20).activation(Activation.IDENTITY).build(),"layer0In").addLayer("layer1",new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build(),"layer0").addLayer("layer2",new ConvolutionLayer.Builder(5,5).stride(1,1).nOut(50).activation(Activation.IDENTITY).build(),"layer1").addLayer("layer3",new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build(),"layer2").addLayer("layer4",new DenseLayer.Builder().activation(Activation.RELU).nOut(500).build(),"layer3").addLayer("layer5",new DenseLayer.Builder().activation(Activation.RELU).nOut(250).build(),"layer4").addLayer("layer6",new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nOut(100).activation(Activation.SOFTMAX).build(),"layer5").setOutputs("layer6").build());
  modelToFineTune.init();
  NeuralNetConfiguration.Builder overallConf=new NeuralNetConfiguration.Builder().seed(456).updater(new Sgd(0.001));
  FineTuneConfiguration fineTuneConfiguration=new FineTuneConfiguration.Builder().seed(456).updater(new Sgd(0.001)).build();
  ComputationGraph modelNow=new TransferLearning.GraphBuilder(modelToFineTune).fineTuneConfiguration(fineTuneConfiguration).setFeatureExtractor("layer1").nOutReplace("layer4",600,WeightInit.XAVIER).removeVertexAndConnections("layer5").removeVertexAndConnections("layer6").setInputs("layer0In").setInputTypes(InputType.convolutionalFlat(28,28,3)).addLayer("layer5",new DenseLayer.Builder().activation(Activation.RELU).nIn(600).nOut(300).build(),"layer4").addLayer("layer6",new DenseLayer.Builder().activation(Activation.RELU).nIn(300).nOut(150).build(),"layer5").addLayer("layer7",new DenseLayer.Builder().activation(Activation.RELU).nIn(150).nOut(50).build(),"layer6").addLayer("layer8",new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).activation(Activation.SOFTMAX).nIn(50).nOut(10).build(),"layer7").setOutputs("layer8").build();
  ComputationGraph modelExpectedArch=new ComputationGraph(overallConf.graphBuilder().addInputs("layer0In").setInputTypes(InputType.convolutionalFlat(28,28,3)).addLayer("layer0",new FrozenLayer(new ConvolutionLayer.Builder(5,5).nIn(3).stride(1,1).nOut(20).activation(Activation.IDENTITY).build()),"layer0In").addLayer("layer1",new FrozenLayer(new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build()),"layer0").addLayer("layer2",new ConvolutionLayer.Builder(5,5).stride(1,1).nOut(50).activation(Activation.IDENTITY).build(),"layer1").addLayer("layer3",new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build(),"layer2").addLayer("layer4",new DenseLayer.Builder().activation(Activation.RELU).nOut(600).build(),"layer3").addLayer("layer5",new DenseLayer.Builder().activation(Activation.RELU).nOut(300).build(),"layer4").addLayer("layer6",new DenseLayer.Builder().activation(Activation.RELU).nOut(150).build(),"layer5").addLayer("layer7",new DenseLayer.Builder().activation(Activation.RELU).nOut(50).build(),"layer6").addLayer("layer8",new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nOut(10).activation(Activation.SOFTMAX).build(),"layer7").setOutputs("layer8").build());
  modelExpectedArch.init();
  modelExpectedArch.getVertex("layer0").setLayerAsFrozen();
  modelExpectedArch.getVertex("layer1").setLayerAsFrozen();
  assertEquals(modelExpectedArch.getConfiguration().toJson(),modelNow.getConfiguration().toJson());
  modelNow.setParams(modelExpectedArch.params());
  int i=0;
  while (i < 5) {
    modelExpectedArch.fit(randomData);
    modelNow.fit(randomData);
    i++;
  }
  assertEquals(modelExpectedArch.params(),modelNow.params());
}
