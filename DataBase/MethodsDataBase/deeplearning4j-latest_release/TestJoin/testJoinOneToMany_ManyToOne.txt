@Test public void testJoinOneToMany_ManyToOne(){
  Schema customerInfoSchema=new Schema.Builder().addColumnLong("customerID").addColumnString("customerName").build();
  Schema purchasesSchema=new Schema.Builder().addColumnLong("purchaseID").addColumnLong("customerID").addColumnDouble("amount").build();
  List<List<Writable>> infoList=new ArrayList<>();
  infoList.add(Arrays.<Writable>asList(new LongWritable(12345),new Text("Customer12345")));
  infoList.add(Arrays.<Writable>asList(new LongWritable(98765),new Text("Customer98765")));
  infoList.add(Arrays.<Writable>asList(new LongWritable(50000),new Text("Customer50000")));
  List<List<Writable>> purchaseList=new ArrayList<>();
  purchaseList.add(Arrays.<Writable>asList(new LongWritable(1000000),new LongWritable(12345),new DoubleWritable(10.00)));
  purchaseList.add(Arrays.<Writable>asList(new LongWritable(1000001),new LongWritable(12345),new DoubleWritable(20.00)));
  purchaseList.add(Arrays.<Writable>asList(new LongWritable(1000002),new LongWritable(98765),new DoubleWritable(30.00)));
  Join join=new Join.Builder(Join.JoinType.RightOuter).setJoinColumns("customerID").setSchemas(customerInfoSchema,purchasesSchema).build();
  List<List<Writable>> expected=new ArrayList<>();
  expected.add(Arrays.<Writable>asList(new LongWritable(12345),new Text("Customer12345"),new LongWritable(1000000),new DoubleWritable(10.00)));
  expected.add(Arrays.<Writable>asList(new LongWritable(12345),new Text("Customer12345"),new LongWritable(1000001),new DoubleWritable(20.00)));
  expected.add(Arrays.<Writable>asList(new LongWritable(98765),new Text("Customer98765"),new LongWritable(1000002),new DoubleWritable(30.00)));
  List<List<Writable>> info=(infoList);
  List<List<Writable>> purchases=(purchaseList);
  List<List<Writable>> joined=LocalTransformExecutor.executeJoin(join,info,purchases);
  List<List<Writable>> joinedList=new ArrayList<>(joined);
  Collections.sort(joinedList,new Comparator<List<Writable>>(){
    @Override public int compare(    List<Writable> o1,    List<Writable> o2){
      return Long.compare(o1.get(2).toLong(),o2.get(2).toLong());
    }
  }
);
  assertEquals(expected,joinedList);
  assertEquals(3,joinedList.size());
  List<String> expectedColNames=Arrays.asList("customerID","customerName","purchaseID","amount");
  assertEquals(expectedColNames,join.getOutputSchema().getColumnNames());
  List<ColumnType> expectedColTypes=Arrays.asList(ColumnType.Long,ColumnType.String,ColumnType.Long,ColumnType.Double);
  assertEquals(expectedColTypes,join.getOutputSchema().getColumnTypes());
  Join join2=new Join.Builder(Join.JoinType.LeftOuter).setJoinColumns("customerID").setSchemas(purchasesSchema,customerInfoSchema).build();
  List<List<Writable>> expectedManyToOne=new ArrayList<>();
  expectedManyToOne.add(Arrays.<Writable>asList(new LongWritable(1000000),new LongWritable(12345),new DoubleWritable(10.00),new Text("Customer12345")));
  expectedManyToOne.add(Arrays.<Writable>asList(new LongWritable(1000001),new LongWritable(12345),new DoubleWritable(20.00),new Text("Customer12345")));
  expectedManyToOne.add(Arrays.<Writable>asList(new LongWritable(1000002),new LongWritable(98765),new DoubleWritable(30.00),new Text("Customer98765")));
  List<List<Writable>> joined2=LocalTransformExecutor.executeJoin(join2,purchases,info);
  List<List<Writable>> joinedList2=new ArrayList<>(joined2);
  Collections.sort(joinedList2,new Comparator<List<Writable>>(){
    @Override public int compare(    List<Writable> o1,    List<Writable> o2){
      return Long.compare(o1.get(0).toLong(),o2.get(0).toLong());
    }
  }
);
  assertEquals(3,joinedList2.size());
  assertEquals(expectedManyToOne,joinedList2);
  List<String> expectedColNames2=Arrays.asList("purchaseID","customerID","amount","customerName");
  assertEquals(expectedColNames2,join2.getOutputSchema().getColumnNames());
  List<ColumnType> expectedColTypes2=Arrays.asList(ColumnType.Long,ColumnType.Long,ColumnType.Double,ColumnType.String);
  assertEquals(expectedColTypes2,join2.getOutputSchema().getColumnTypes());
}
