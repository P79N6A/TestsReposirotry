@Test public void testTransformsRegexBrackets(){
  Schema schema=new Schema.Builder().addColumnString("someCol").addColumnString("otherCol").build();
  Transform[] transforms=new Transform[]{new ConditionalCopyValueTransform("someCol","otherCol",new StringRegexColumnCondition("someCol","\\d")),new ConditionalCopyValueTransform("someCol","otherCol",new StringRegexColumnCondition("someCol","\\D+")),new ConditionalCopyValueTransform("someCol","otherCol",new StringRegexColumnCondition("someCol","\".*\"")),new ConditionalCopyValueTransform("someCol","otherCol",new StringRegexColumnCondition("someCol","[]{}()][}{)("))};
  for (  Transform t : transforms) {
    String json=j.serialize(t);
    Transform t3=j.deserializeTransform(json);
    assertEquals(t,t3);
    TransformProcess tp=new TransformProcess.Builder(schema).transform(t).build();
    String tpJson=j.serialize(tp);
    TransformProcess fromJson=TransformProcess.fromJson(tpJson);
    assertEquals(tp,fromJson);
  }
  String tArrAsYaml=y.serialize(transforms);
  String tArrAsJson=j.serialize(transforms);
  String tListAsYaml=y.serializeTransformList(Arrays.asList(transforms));
  String tListAsJson=j.serializeTransformList(Arrays.asList(transforms));
  List<Transform> lFromYaml=y.deserializeTransformList(tListAsYaml);
  List<Transform> lFromJson=j.deserializeTransformList(tListAsJson);
  assertEquals(Arrays.asList(transforms),y.deserializeTransformList(tArrAsYaml));
  assertEquals(Arrays.asList(transforms),j.deserializeTransformList(tArrAsJson));
  assertEquals(Arrays.asList(transforms),lFromYaml);
  assertEquals(Arrays.asList(transforms),lFromJson);
}
