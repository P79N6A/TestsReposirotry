@Test public void testTransforms(){
  Map<String,String> map=new HashMap<>();
  map.put("A","A1");
  map.put("B","B1");
  Transform[] transforms=new Transform[]{new CategoricalToIntegerTransform("ColName"),new CategoricalToOneHotTransform("ColName"),new IntegerToCategoricalTransform("ColName",Arrays.asList("State0","State1")),new StringToCategoricalTransform("ColName",Arrays.asList("State0","State1")),new DuplicateColumnsTransform(Arrays.asList("Dup1","Dup2"),Arrays.asList("NewName1","NewName2")),new RemoveColumnsTransform("R1","R2"),new RenameColumnsTransform(Arrays.asList("N1","N2"),Arrays.asList("NewN1","NewN2")),new ReorderColumnsTransform("A","B"),new DoubleColumnsMathOpTransform("NewName",MathOp.Subtract,"A","B"),new DoubleMathOpTransform("ColName",MathOp.Multiply,2.0),new Log2Normalizer("ColName",1.0,0.0,2.0),new MinMaxNormalizer("ColName",0,100,-1,1),new StandardizeNormalizer("ColName",20,5),new SubtractMeanNormalizer("ColName",10),new IntegerColumnsMathOpTransform("NewName",MathOp.Multiply,"A","B"),new IntegerMathOpTransform("ColName",MathOp.Add,10),new ReplaceEmptyIntegerWithValueTransform("Col",3),new ReplaceInvalidWithIntegerTransform("Col",3),new LongColumnsMathOpTransform("NewName",MathOp.Multiply,"A","B"),new LongMathOpTransform("Col",MathOp.ScalarMax,5L),new MapAllStringsExceptListTransform("Col","NewVal",Arrays.asList("E1","E2")),new RemoveWhiteSpaceTransform("Col"),new ReplaceEmptyStringTransform("Col","WasEmpty"),new ReplaceStringTransform("Col_A",map),new StringListToCategoricalSetTransform("Col",Arrays.asList("A","B"),Arrays.asList("A","B"),","),new StringMapTransform("Col",map),new DeriveColumnsFromTimeTransform.Builder("TimeColName").addIntegerDerivedColumn("Hour",DateTimeFieldType.hourOfDay()).addStringDerivedColumn("DateTime","YYYY-MM-dd hh:mm:ss",DateTimeZone.UTC).build(),new StringToTimeTransform("TimeCol","YYYY-MM-dd hh:mm:ss",DateTimeZone.UTC),new TimeMathOpTransform("TimeCol",MathOp.Add,1,TimeUnit.HOURS)};
  for (  Transform t : transforms) {
    String yaml=y.serialize(t);
    String json=j.serialize(t);
    Transform t3=j.deserializeTransform(json);
    assertEquals(t,t3);
  }
  String tArrAsYaml=y.serialize(transforms);
  String tArrAsJson=j.serialize(transforms);
  String tListAsYaml=y.serializeTransformList(Arrays.asList(transforms));
  String tListAsJson=j.serializeTransformList(Arrays.asList(transforms));
  List<Transform> lFromYaml=y.deserializeTransformList(tListAsYaml);
  List<Transform> lFromJson=j.deserializeTransformList(tListAsJson);
  assertEquals(Arrays.asList(transforms),y.deserializeTransformList(tArrAsYaml));
  assertEquals(Arrays.asList(transforms),j.deserializeTransformList(tArrAsJson));
  assertEquals(Arrays.asList(transforms),lFromYaml);
  assertEquals(Arrays.asList(transforms),lFromJson);
}
