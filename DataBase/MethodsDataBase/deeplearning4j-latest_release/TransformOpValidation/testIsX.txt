@Test public void testIsX(){
  List<String> failed=new ArrayList<>();
  for (int i=0; i < 4; i++) {
    SameDiff sd=SameDiff.create();
    SDVariable in=sd.var("in",4);
    boolean doGrad=true;
    SDVariable out;
    INDArray exp;
    INDArray inArr;
switch (i) {
case 0:
      inArr=Nd4j.trueVector(new double[]{10,Double.POSITIVE_INFINITY,0,Double.NEGATIVE_INFINITY});
    exp=Nd4j.trueVector(new double[]{1,0,1,0});
  out=sd.isFinite(in);
break;
case 1:
inArr=Nd4j.trueVector(new double[]{10,Double.POSITIVE_INFINITY,0,Double.NEGATIVE_INFINITY});
exp=Nd4j.trueVector(new double[]{0,1,0,1});
out=sd.isInfinite(in);
break;
case 2:
inArr=Nd4j.trueVector(new double[]{-3,5,0,2});
exp=Nd4j.trueVector(new double[]{0,1,0,0});
out=sd.isMax(in);
break;
case 3:
inArr=Nd4j.trueVector(new double[]{0,Double.NaN,10,Double.NaN});
exp=Nd4j.trueVector(new double[]{0,1,0,1});
out=sd.isNaN(in);
doGrad=false;
break;
default :
throw new RuntimeException();
}
SDVariable loss=out.mean();
TestCase tc=new TestCase(sd).gradientCheck(doGrad).expected(out,exp);
in.setArray(inArr);
String err=OpValidation.validate(tc,true);
if (err != null) {
failed.add(err);
}
}
assertEquals(failed.toString(),0,failed.size());
}
