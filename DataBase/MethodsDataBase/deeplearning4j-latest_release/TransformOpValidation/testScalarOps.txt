@Test public void testScalarOps(){
  int d0=2;
  int d1=3;
  int d2=4;
  int n=d0 * d1 * d2;
  List<String> failed=new ArrayList<>();
  for (int i=0; i < 11; i++) {
    for (    char inOrder : new char[]{'c','f'}) {
      SameDiff sd=SameDiff.create();
      INDArray inArr=Nd4j.linspace(1,n,n).reshape('c',d0,d1,d2).dup(inOrder);
      SDVariable in=sd.var("in",inArr);
      TestCase tc=new TestCase(sd).gradientCheck(true);
      SDVariable out;
      String msg;
switch (i) {
case 0:
        out=in.mul(2);
      tc.expectedOutput(out.getVarName(),inArr.mul(2));
    msg="mul - " + inOrder;
  break;
case 1:
out=in.div(2);
tc.expectedOutput(out.getVarName(),inArr.div(2));
msg="div - " + inOrder;
break;
case 2:
out=in.add(2);
tc.expectedOutput(out.getVarName(),inArr.add(2));
msg="add - " + inOrder;
break;
case 3:
out=in.sub(2);
tc.expectedOutput(out.getVarName(),inArr.sub(2));
msg="sub - " + inOrder;
break;
case 4:
out=in.rdiv(2);
tc.expectedOutput(out.getVarName(),inArr.rdiv(2));
msg="rdiv - " + inOrder;
break;
case 5:
out=in.rsub(2);
tc.expectedOutput(out.getVarName(),inArr.rsub(2));
msg="rsub - " + inOrder;
break;
case 6:
out=sd.pow(in,2);
tc.expectedOutput(out.getVarName(),Transforms.pow(inArr,2));
msg="pow - " + inOrder;
break;
case 7:
inArr.assign(Nd4j.rand(inArr.shape()).muli(5).subi(2.5));
out=sd.scalarFloorMod(in,2);
tc.expected(out,Nd4j.getExecutioner().execAndReturn(new ScalarFMod(inArr.dup(),2.0)));
msg="scalarRemainer - " + inOrder;
break;
case 8:
inArr.assign(Nd4j.rand(inArr.shape()));
out=sd.scalarMax(in,0.5);
tc.expected(out,Transforms.max(inArr.dup(),0.5));
msg="scalarMax - " + inOrder;
break;
case 9:
inArr.assign(Nd4j.rand(inArr.shape()));
out=sd.scalarMin(in,0.5);
tc.expected(out,Transforms.min(inArr.dup(),0.5));
msg="scalarMin - " + inOrder;
break;
case 10:
out=in.assign(0.5);
tc.expected(out,Nd4j.valueArrayOf(inArr.shape(),0.5));
msg="scalarSet - " + inOrder;
break;
default :
throw new RuntimeException();
}
tc.testName(msg);
SDVariable loss=sd.standardDeviation(out,true);
log.info("Starting test: " + msg);
String err=OpValidation.validate(tc,true);
if (err != null) {
failed.add(err);
}
}
}
assertEquals(failed.toString(),0,failed.size());
}
