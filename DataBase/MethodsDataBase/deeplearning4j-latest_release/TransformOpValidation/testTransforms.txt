@Test public void testTransforms(){
  Nd4j.getRandom().setSeed(12345);
  List<String> allSkipped=new ArrayList<>();
  List<String> allFailed=new ArrayList<>();
  for (int i=0; i < 80; i++) {
    SameDiff sd=SameDiff.create();
    int nOut=4;
    int minibatch=5;
    SDVariable in=sd.var("in",new int[]{-1,nOut});
    INDArray ia=Nd4j.randn(minibatch,nOut);
    int dim;
    SDVariable t;
    TestCase tc=new TestCase(sd);
    boolean stdevLoss=false;
switch (i) {
case 0:
      t=in.add(5.0);
    tc.expectedOutput(t.getVarName(),ia.add(5.0));
  break;
case 1:
t=in.sub(5.0);
tc.expectedOutput(t.getVarName(),ia.sub(5.0));
break;
case 2:
t=in.mul(2.5);
tc.expectedOutput(t.getVarName(),ia.mul(2.5));
break;
case 3:
t=in.div(4.0);
tc.expectedOutput(t.getVarName(),ia.div(4.0));
break;
case 4:
t=in.rsub(5.0);
tc.expectedOutput(t.getVarName(),ia.rsub(5.0));
break;
case 5:
t=in.rdiv(1.0);
tc.expectedOutput(t.getVarName(),ia.rdiv(1.0));
break;
case 6:
t=sd.pow(in,2.5);
ia=Nd4j.rand(minibatch,nOut);
tc.expectedOutput(t.getVarName(),Transforms.pow(ia,2.5,true));
break;
case 7:
t=sd.sigmoid(in);
ia=Nd4j.rand(minibatch,nOut).muli(2).subi(1.0);
tc.expectedOutput(t.getVarName(),Transforms.sigmoid(ia,true));
break;
case 8:
t=sd.tanh(in);
ia=Nd4j.rand(minibatch,nOut).muli(2).subi(1.0);
tc.expectedOutput(t.getVarName(),Transforms.tanh(ia,true));
break;
case 9:
t=sd.tan(in);
ia=Nd4j.rand(minibatch,nOut);
tc.expectedOutput(t.getVarName(),Transforms.tan(ia));
break;
case 10:
t=sd.cos(in);
tc.expectedOutput(t.getVarName(),Transforms.cos(ia,true));
break;
case 11:
t=sd.sin(in);
tc.expectedOutput(t.getVarName(),Transforms.sin(ia,true));
break;
case 12:
t=sd.softplus(in);
tc.expectedOutput(t.getVarName(),Transforms.softPlus(ia,true));
break;
case 13:
t=sd.log(in);
ia=Nd4j.rand(minibatch,nOut);
tc.expectedOutput(t.getVarName(),Transforms.log(ia,true));
break;
case 14:
t=sd.neg(in);
tc.expectedOutput(t.getVarName(),ia.neg());
break;
case 15:
t=sd.acos(in);
ia=Nd4j.rand(minibatch,nOut).muli(1.8).subi(0.9);
tc.expectedOutput(t.getVarName(),Transforms.acos(ia,true));
break;
case 16:
t=sd.acosh(in);
ia=Nd4j.rand(minibatch,nOut).addi(1.01);
tc.expectedOutput(t.getVarName(),Nd4j.getExecutioner().execAndReturn(new ACosh(ia.dup())));
break;
case 17:
t=sd.asin(in);
ia=Nd4j.rand(minibatch,nOut).muli(1.8).subi(0.9);
tc.expectedOutput(t.getVarName(),Transforms.asin(ia,true));
break;
case 18:
t=sd.atan(in);
ia=Nd4j.rand(minibatch,nOut).muli(4).subi(2);
tc.expectedOutput(t.getVarName(),Transforms.atan(ia,true));
break;
case 19:
t=sd.atanh(in);
ia=Nd4j.rand(minibatch,nOut).muli(1.8).subi(0.9);
tc.expectedOutput(t.getVarName(),Transforms.atanh(ia,true));
break;
case 20:
t=sd.cosh(in);
tc.expectedOutput(t.getVarName(),Transforms.cosh(ia,true));
break;
case 21:
t=sd.cube(in);
tc.expectedOutput(t.getVarName(),Transforms.pow(ia,3.0,true));
break;
case 22:
t=sd.elu(in);
tc.expectedOutput(t.getVarName(),Transforms.elu(ia,true));
break;
case 23:
t=sd.softmax(in);
ia=Nd4j.rand(minibatch,nOut);
tc.expectedOutput(t.getVarName(),Nd4j.getExecutioner().execAndReturn(new OldSoftMax(ia.dup())));
break;
case 24:
t=sd.sqrt(in);
ia=Nd4j.rand(minibatch,nOut);
tc.expectedOutput(t.getVarName(),Transforms.sqrt(ia,true));
break;
case 25:
t=sd.square(in);
tc.expectedOutput(t.getVarName(),Transforms.pow(ia,2.0,true));
break;
case 26:
t=sd.transpose(in);
tc.expectedOutput(t.getVarName(),ia.transpose().dup());
break;
case 27:
t=sd.abs(in);
tc.expectedOutput(t.getVarName(),Transforms.abs(ia,true));
break;
case 28:
t=sd.sinh(in);
tc.expectedOutput(t.getVarName(),Transforms.sinh(ia,true));
break;
case 29:
t=sd.asinh(in);
tc.expectedOutput(t.getVarName(),Nd4j.getExecutioner().execAndReturn(new ASinh(ia.dup())));
break;
case 30:
t=sd.exp(in);
tc.expectedOutput(t.getVarName(),Transforms.exp(ia,true));
break;
case 31:
t=sd.floor(in);
tc.expectedOutput(t.getVarName(),Transforms.floor(ia,true));
break;
case 32:
t=sd.relu(in,0.0);
ia=Nd4j.rand(minibatch,nOut);
tc.expectedOutput(t.getVarName(),Transforms.relu(ia,true));
break;
case 33:
t=sd.hardTanh(in);
ia=Nd4j.rand(minibatch,nOut).muli(2).subi(1.0);
tc.expectedOutput(t.getVarName(),Transforms.hardTanh(ia,true));
break;
case 34:
t=sd.logSigmoid(in);
tc.expectedOutput(t.getVarName(),Nd4j.getExecutioner().execAndReturn(new LogSigmoid(ia.dup())));
break;
case 35:
t=sd.swish(in);
tc.expectedOutput(t.getVarName(),Nd4j.getExecutioner().execAndReturn(new Swish(ia.dup())));
break;
case 36:
t=sd.sign(in);
tc.expectedOutput(t.getVarName(),Transforms.sign(ia,true));
break;
case 37:
t=sd.softsign(in);
tc.expectedOutput(t.getVarName(),Transforms.softsign(ia,true));
break;
case 38:
t=sd.leakyRelu(in,0.0);
ia=Nd4j.rand(minibatch,nOut);
tc.expectedOutput(t.getVarName(),Transforms.leakyRelu(ia,true));
break;
case 39:
t=sd.logSoftmax(in);
ia=Nd4j.rand(minibatch,nOut).muli(10).subi(5);
tc.expectedOutput(t.getVarName(),Transforms.log(Transforms.softmax(ia,true)));
stdevLoss=true;
break;
case 40:
t=sd.selu(in);
tc.expectedOutput(t.getVarName(),Nd4j.getExecutioner().execAndReturn(new SELU(ia.dup())));
break;
case 41:
t=sd.gt(in,1.0);
tc.expectedOutput(t.getVarName(),ia.gt(1.0));
break;
case 42:
t=sd.gte(in,1.0);
tc.expectedOutput(t.getVarName(),ia.gte(1.0));
break;
case 43:
t=sd.lt(in,1.0);
tc.expectedOutput(t.getVarName(),ia.lt(1.0));
break;
case 44:
t=sd.lte(in,1.0);
tc.expectedOutput(t.getVarName(),ia.lte(1.0));
break;
case 45:
t=sd.eq(in,2.0);
ia=Nd4j.linspace(1,minibatch * nOut,minibatch * nOut).reshape('c',minibatch,nOut);
tc.expectedOutput(t.getVarName(),ia.eq(2.0));
break;
case 46:
t=sd.neq(in,2.0);
ia=Nd4j.linspace(1,minibatch * nOut,minibatch * nOut).reshape('c',minibatch,nOut);
tc.expectedOutput(t.getVarName(),ia.neq(2.0));
break;
case 47:
t=sd.ceil(in);
tc.expectedOutput(t.getVarName(),Transforms.ceil(ia,true));
break;
case 48:
ia=Nd4j.randn(ia.shape()).muli(2);
t=sd.clipByValue(in,-3,2);
INDArray expOut48=ia.dup();
BooleanIndexing.replaceWhere(expOut48,-3,Conditions.lessThan(-3));
BooleanIndexing.replaceWhere(expOut48,2,Conditions.greaterThan(2));
tc.expectedOutput(t.getVarName(),expOut48);
break;
case 49:
double clip=2.0;
t=sd.clipByNorm(in,clip,0);
ia=Nd4j.rand(ia.shape());
ia.diviRowVector(ia.norm2(0)).muli(clip);
ia.muliColumnVector(Nd4j.linspace(0.9,1.1,ia.size(0)).transpose());
INDArray expOut49=Nd4j.create(ia.shape());
for (int j=0; j < ia.columns(); j++) {
INDArray origCol=ia.getColumn(j);
if (origCol.norm2Number().doubleValue() < clip) {
expOut49.putColumn(j,origCol);
}
 else {
expOut49.putColumn(j,origCol.mul(clip / origCol.norm2Number().doubleValue()));
}
}
tc.expectedOutput(t.getVarName(),expOut49);
break;
case 50:
dim=1;
t=sd.reverse(in,dim);
INDArray expOut50=Nd4j.create(ia.shape());
DynamicCustomOp reverse=DynamicCustomOp.builder("reverse").addIntegerArguments(dim).addInputs(ia).addOutputs(expOut50).build();
Nd4j.getExecutioner().exec(reverse);
tc.expectedOutput(t.getVarName(),expOut50);
break;
case 51:
dim=0;
boolean exclusive=false;
boolean reverseBool=false;
t=sd.cumsum(in,exclusive,reverseBool,dim);
INDArray expOut51=Nd4j.create(ia.shape());
DynamicCustomOp cumsum=DynamicCustomOp.builder("cumsum").addIntegerArguments((exclusive) ? 1 : 0,(reverseBool) ? 1 : 0,dim).addInputs(ia).addOutputs(expOut51).build();
Nd4j.getExecutioner().exec(cumsum);
tc.expectedOutput(t.getVarName(),expOut51);
break;
case 52:
if (OpValidationSuite.IGNORE_FAILING) {
continue;
}
boolean ex=false;
boolean revBool=false;
t=sd.cumprod(in,ex,revBool,0);
INDArray expOut52=Nd4j.create(ia.shape());
for (int s0=0; s0 < ia.size(0); s0++) {
for (int s1=0; s1 < ia.size(1); s1++) {
double prod=1.0;
for (int x=0; x <= s0; x++) {
prod*=ia.getDouble(x,s1);
}
expOut52.putScalar(s0,s1,prod);
}
}
tc.expectedOutput(t.getVarName(),expOut52);
break;
case 53:
if (OpValidationSuite.IGNORE_FAILING) {
continue;
}
t=sd.diag(in);
ia=Nd4j.create(new float[]{4,2});
in=sd.var("in",new int[]{1,2});
INDArray expOut53=Nd4j.create(new int[]{2,2});
DynamicCustomOp op=DynamicCustomOp.builder("diag").addInputs(ia).addOutputs(expOut53).build();
Nd4j.getExecutioner().exec(op);
tc.expectedOutput(t.getVarName(),expOut53);
break;
case 54:
t=sd.erf(in);
INDArray expOut54=Nd4j.createUninitialized(ia.shape(),ia.ordering());
Nd4j.getExecutioner().exec(new Erf(ia,expOut54));
tc.expectedOutput(t.getVarName(),expOut54);
break;
case 55:
t=sd.erfc(in);
tc.expectedOutput(t.getVarName(),Nd4j.getExecutioner().execAndReturn(new Erfc(ia,Nd4j.createUninitialized(ia.shape(),ia.ordering()))));
break;
case 56:
t=sd.expm1(in);
tc.expectedOutput(t.getVarName(),Transforms.expm1(ia,true));
break;
case 57:
t=sd.log1p(in);
ia=Nd4j.rand(minibatch,nOut);
tc.expectedOutput(t.getVarName(),Transforms.log1p(ia,true));
break;
case 58:
t=sd.round(in);
tc.expectedOutput(t.getVarName(),Transforms.round(ia,true));
break;
case 59:
ia=Nd4j.create(new float[]{4,2});
in=sd.var("in",new int[]{1,2});
t=sd.rsqrt(in);
tc.expectedOutput(t.getVarName(),Nd4j.getExecutioner().execAndReturn(new RSqrt(ia,Nd4j.create(ia.shape(),ia.ordering()))));
break;
case 60:
t=sd.relu6(in,0);
ia=Nd4j.rand(minibatch,nOut);
tc.expectedOutput(t.getVarName(),Transforms.relu6(ia,true));
break;
case 61:
ia=Nd4j.create(new float[]{2,2});
in=sd.var("in",new int[]{1,2});
sd.associateArrayWithVariable(ia,in);
double value=42;
t=sd.fill(in,value);
tc.expectedOutput(t.getVarName(),Nd4j.valueArrayOf(new int[]{2,2},42));
break;
case 62:
t=sd.hardSigmoid(in);
tc.expectedOutput(t.getVarName(),Nd4j.getExecutioner().execAndReturn(new HardSigmoid(ia,ia.dup())));
break;
case 63:
t=sd.scalarMax(in,0.5);
tc.expectedOutput(t.getVarName(),Transforms.max(ia,0.5,true));
break;
case 64:
t=sd.scalarMin(in,0.5);
tc.expectedOutput(t.getVarName(),Transforms.min(ia,0.5,true));
break;
case 65:
t=sd.assign(in,0.5);
tc.expectedOutput(t.getVarName(),ia.dup().assign(0.5));
break;
case 66:
t=sd.scalarFloorMod(in,0.5);
tc.expectedOutput(t.getVarName(),Nd4j.getExecutioner().execAndReturn(new ScalarFMod(ia.dup(),0.5)));
break;
case 67:
t=sd.reciprocal(in);
tc.expectedOutput(t.getVarName(),ia.rdiv(1.0));
break;
case 68:
t=sd.shape(in);
tc.expectedOutput(t.getVarName(),Nd4j.create(ArrayUtil.toDouble(ia.shape())));
break;
case 69:
t=sd.rank(in);
tc.expectedOutput(t.getVarName(),Nd4j.create(new double[]{ia.rank()}));
break;
case 70:
t=sd.onesLike(in);
tc.expectedOutput(t.getVarName(),Nd4j.ones(ia.shape()));
break;
case 71:
ia=Nd4j.randn(nOut,nOut);
t=sd.diagPart(in);
tc.expectedOutput(t.getVarName(),Nd4j.trueVector(new double[]{ia.getDouble(0,0),ia.getDouble(1,1),ia.getDouble(2,2),ia.getDouble(3,3)}));
break;
case 72:
t=sd.identity(in);
tc.expected(t,ia.dup());
break;
case 73:
t=sd.step(in,1.0);
tc.expected(t,ia.gte(1.0));
break;
case 74:
if (OpValidationSuite.IGNORE_FAILING) {
continue;
}
t=sd.f().noop(in);
tc.expected(t,ia.dup());
break;
case 75:
ia=Nd4j.rand(ia.shape());
t=sd.log(in,2);
tc.expected(t,Transforms.log(ia,2,true));
break;
case 76:
ia=Nd4j.rand(ia.shape());
t=sd.log(in,10);
tc.expected(t,Transforms.log(ia,10,true));
break;
case 77:
ia=Nd4j.rand(ia.shape());
t=sd.matchCondition(in,Conditions.lessThan(0.5));
INDArray exp=ia.dup().lt(0.5);
tc.expected(t,exp);
break;
case 78:
ia=Nd4j.rand(ia.shape()).muli(2).subi(1);
t=sd.f().tanhRational(in);
tc.expected(t,Nd4j.getExecutioner().execAndReturn(new RationalTanh(ia.dup())));
break;
case 79:
ia=Nd4j.rand(ia.shape()).muli(2).subi(1);
t=sd.f().tanhRectified(in);
tc.expected(t,Nd4j.getExecutioner().execAndReturn(new RectifiedTanh(ia.dup())));
break;
default :
throw new RuntimeException();
}
DifferentialFunction[] funcs=sd.functions();
String name=funcs[0].opName();
String msg="test: " + i + " - "+ name;
log.info("*** Starting test: " + msg);
SDVariable loss;
if (stdevLoss) {
loss=sd.standardDeviation("loss",t,false,Integer.MAX_VALUE);
}
 else {
loss=sd.mean("loss",t);
}
sd.associateArrayWithVariable(ia,in);
tc.testName(name);
String error=OpValidation.validate(tc,true);
if (error != null) {
allFailed.add(name);
}
}
if (allSkipped.size() > 0) {
log.info("All backward skipped transforms: " + allSkipped);
log.info(allSkipped.size() + " backward passes were skipped.");
}
if (allFailed.size() > 0) {
log.error("All failed transforms: " + allFailed);
fail(allFailed.size() + " transforms failed");
}
}
