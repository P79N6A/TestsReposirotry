@Test public void testDynamicPartition(){
  SameDiff sd=SameDiff.create();
  INDArray ia=Nd4j.trueVector(new float[]{4,3,5,7,8,0});
  INDArray partitions=Nd4j.trueVector(new float[]{1,0,1,0,0,1});
  int numPartitions=2;
  SDVariable in=sd.var("in",new long[]{6});
  SDVariable sdPartitions=sd.var("partitions",new long[]{6});
  INDArray expOut1=Nd4j.create(3L);
  INDArray expOut2=Nd4j.create(3L);
  INDArray[] expOut=new INDArray[]{expOut1,expOut2};
  DynamicCustomOp dynamicPartition=DynamicCustomOp.builder("dynamic_partition").addInputs(ia,partitions).addIntegerArguments(numPartitions).addOutputs(expOut1,expOut2).build();
  Nd4j.getExecutioner().exec(dynamicPartition);
  SDVariable[] parts=sd.dynamicPartition(new String[]{"dp0","dp1"},in,sdPartitions,numPartitions);
  SDVariable t=sd.mergeAdd(parts);
  SDVariable loss=sd.mean("loss",t);
  sd.associateArrayWithVariable(ia,in);
  sd.associateArrayWithVariable(partitions,sdPartitions);
  String err=OpValidation.validate(new TestCase(sd).gradientCheck(true).gradCheckSkipVariables("partitions").expectedOutput("dp0",expOut[0]).expectedOutput("dp1",expOut[1]).gradientCheck(true));
  assertNull(err,err);
}
