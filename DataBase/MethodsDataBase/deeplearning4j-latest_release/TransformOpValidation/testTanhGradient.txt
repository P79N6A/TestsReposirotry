@Test public void testTanhGradient(){
  SameDiff sameDiff=SameDiff.create();
  INDArray sumInput=Nd4j.linspace(1,4,4).reshape(2,2);
  Map<String,INDArray> inputs=new HashMap<>();
  inputs.put("x",sumInput);
  sameDiff.defineFunction("tanhGradient",new SameDiffFunctionDefinition(){
    @Override public SDVariable[] define(    SameDiff sameDiff,    Map<String,INDArray> inputs,    SDVariable[] variableInputs){
      SDVariable input=sameDiff.var("x",inputs.get("x"));
      SDVariable tanh=sameDiff.tanh(input);
      SDVariable sum=sameDiff.sum(tanh,Integer.MAX_VALUE);
      return new SDVariable[]{tanh};
    }
  }
,inputs);
  INDArray executions=sameDiff.getFunction("tanhGradient").execBackwardAndEndResult();
  INDArray assertion=Nd4j.create(new double[][]{{0.41997434161402614,0.07065082485316443},{0.009866037165440211,0.0013409506830258655}});
  assertTrue(assertion.equalsWithEps(executions,1e-3));
  assertArrayEquals(sumInput.shape(),executions.shape());
  assertEquals(assertion,executions);
  System.out.println(executions);
}
