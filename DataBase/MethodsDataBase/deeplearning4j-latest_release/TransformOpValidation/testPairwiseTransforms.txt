@Test public void testPairwiseTransforms(){
  Nd4j.getRandom().setSeed(12345);
  List<String> allFailed=new ArrayList<>();
  for (int i=0; i < 23; i++) {
    SameDiff sd=SameDiff.create();
    int nOut=4;
    int minibatch=5;
    SDVariable in1=sd.var("in1",new int[]{-1,nOut});
    SDVariable in2=sd.var("in2",new int[]{-1,nOut});
    INDArray ia=Nd4j.randn(minibatch,nOut);
    INDArray ib=Nd4j.randn(minibatch,nOut);
    SDVariable t;
    TestCase tc=new TestCase(sd);
switch (i) {
case 0:
      t=in1.add(in2);
    tc.expectedOutput(t.getVarName(),ia.add(ib));
  break;
case 1:
t=in1.sub(in2);
tc.expectedOutput(t.getVarName(),ia.sub(ib));
break;
case 2:
t=in1.mul(in2);
tc.expectedOutput(t.getVarName(),ia.mul(ib));
break;
case 3:
t=in1.div(in2);
tc.expectedOutput(t.getVarName(),ia.div(ib));
break;
case 4:
t=in1.rsub(in2);
tc.expectedOutput(t.getVarName(),ia.rsub(ib));
break;
case 5:
t=in1.rdiv(in2);
tc.expectedOutput(t.getVarName(),ia.rdiv(ib));
break;
case 6:
t=sd.eq(in1,in2);
tc.expectedOutput(t.getVarName(),ia.eq(ib));
break;
case 7:
t=sd.neq(in1,in2);
tc.expectedOutput(t.getVarName(),ia.neq(ib));
break;
case 8:
t=sd.gt(in1,in2);
tc.expectedOutput(t.getVarName(),ia.gt(ib));
break;
case 9:
t=sd.lt(in1,in2);
tc.expectedOutput(t.getVarName(),ia.lt(ib));
break;
case 10:
t=sd.gte(in1,in2);
INDArray expOut10=ia.dup();
Nd4j.getExecutioner().exec(new GreaterThanOrEqual(new INDArray[]{ia,ib},new INDArray[]{expOut10}));
tc.expectedOutput(t.getVarName(),expOut10);
break;
case 11:
t=sd.lte(in1,in2);
INDArray expOut11=ia.dup();
Nd4j.getExecutioner().exec(new LessThanOrEqual(new INDArray[]{ia,ib},new INDArray[]{expOut11}));
tc.expectedOutput(t.getVarName(),expOut11);
break;
case 12:
ia=Nd4j.getExecutioner().exec(new BernoulliDistribution(ia,0.5));
ib=Nd4j.getExecutioner().exec(new BernoulliDistribution(ib,0.5));
t=sd.or(in1,in2);
tc.expectedOutput(t.getVarName(),Transforms.or(ia,ib));
break;
case 13:
ib=Nd4j.randn(nOut,nOut);
t=sd.mmul(in1,in2);
tc.expectedOutput(t.getVarName(),ia.mmul(ib));
break;
case 14:
t=sd.max(in1,in2);
tc.expectedOutput(t.getVarName(),Nd4j.getExecutioner().execAndReturn(new OldMax(ia,ib,ia.dup(),ia.length())));
break;
case 15:
t=sd.min(in1,in2);
tc.expectedOutput(t.getVarName(),Nd4j.getExecutioner().execAndReturn(new OldMin(ia,ib,ia.dup(),ia.length())));
break;
case 16:
ia=Nd4j.getExecutioner().exec(new BernoulliDistribution(ia,0.5));
ib=Nd4j.getExecutioner().exec(new BernoulliDistribution(ib,0.5));
t=sd.and(in1,in2);
tc.expectedOutput(t.getVarName(),Transforms.and(ia,ib));
break;
case 17:
ia=Nd4j.getExecutioner().exec(new BernoulliDistribution(ia,0.5));
ib=Nd4j.getExecutioner().exec(new BernoulliDistribution(ib,0.5));
t=sd.xor(in1,in2);
tc.expectedOutput(t.getVarName(),Transforms.xor(ia,ib));
break;
case 18:
t=sd.assign(in1,in2);
tc.expectedOutput(t.getVarName(),ib);
break;
case 19:
t=sd.atan2(in1,in2);
tc.expectedOutput(t.getVarName(),Transforms.atan2(ib,ia));
break;
case 20:
t=sd.mergeAdd(in1,in2,in2);
tc.expectedOutput(t.getVarName(),ia.add(ib).add(ib));
break;
case 21:
t=in1.squaredDifference(in2);
INDArray expOut21=Nd4j.create(ia.shape(),ia.ordering());
DynamicCustomOp squareDiff=DynamicCustomOp.builder("squaredsubtract").addInputs(ia,ib).addOutputs(expOut21).build();
Nd4j.getExecutioner().exec(squareDiff);
tc.expectedOutput(t.getVarName(),expOut21);
break;
case 22:
ia=Nd4j.randn(nOut,nOut);
ib=Nd4j.randn(1,nOut).reshape(nOut);
INDArray expOut22=ia.dup();
for (int j=0; j < nOut; j++) {
expOut22.putScalar(j,j,ib.getDouble(j));
}
t=sd.setDiag(in1,in2);
tc.expectedOutput(t.getVarName(),expOut22);
break;
default :
throw new RuntimeException();
}
DifferentialFunction[] funcs=sd.functions();
String name=funcs[0].opName();
String msg="test: " + i + " - "+ name;
log.info("*** Starting test: " + msg);
SDVariable loss=sd.mean("loss",t);
sd.associateArrayWithVariable(ia,in1);
sd.associateArrayWithVariable(ib,in2);
tc.testName(name);
String error=OpValidation.validate(tc,true);
if (error != null) {
allFailed.add(name);
}
}
if (allFailed.size() > 0) {
log.error("All failed transforms: " + allFailed);
fail(allFailed.size() + " transforms failed");
}
}
