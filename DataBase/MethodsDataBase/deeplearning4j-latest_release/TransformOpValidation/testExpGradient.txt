@Test public void testExpGradient(){
  SameDiff sameDiff=SameDiff.create();
  INDArray sumInput=Nd4j.linspace(1,4,4).reshape(2,2);
  Map<String,INDArray> inputs=new HashMap<>();
  inputs.put("x",sumInput);
  sameDiff.defineFunction("expGradient",new SameDiffFunctionDefinition(){
    @Override public SDVariable[] define(    SameDiff sameDiff,    Map<String,INDArray> inputs,    SDVariable[] variableInputs){
      SDVariable input=sameDiff.var("x",inputs.get("x"));
      SDVariable exp=sameDiff.exp(input);
      SDVariable sum=sameDiff.sum(exp,Integer.MAX_VALUE);
      return new SDVariable[]{sum};
    }
  }
,inputs);
  List<DifferentialFunction> ops=sameDiff.getFunction("expGradient").execBackwards().getRight();
  INDArray executions=ops.get(ops.size() - 1).outputVariables()[0].getArr();
  INDArray assertion=Nd4j.create(new double[][]{{2.7183,7.3891},{20.0855,54.5981}});
  assertArrayEquals(sumInput.shape(),executions.shape());
  assertEquals(assertion,executions);
  System.out.println(executions);
}
