@Test public void validateConvLayers(){
  Nd4j.getRandom().setSeed(12345);
  int numClasses=10;
  int imageHeight=240;
  int imageWidth=240;
  int channels=3;
  IActivation activation=new ActivationIdentity();
  MultiLayerConfiguration multiLayerConfiguration=new NeuralNetConfiguration.Builder().weightInit(WeightInit.XAVIER).seed(42).activation(new ActivationELU()).updater(new Nesterovs(1e-2,0.9)).list(new Convolution2D.Builder().nOut(96).kernelSize(11,11).biasInit(0.0).stride(4,4).build(),new ActivationLayer.Builder().activation(activation).build(),new Pooling2D.Builder().poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(3,3).stride(2,2).build(),new Convolution2D.Builder().nOut(256).kernelSize(5,5).padding(2,2).biasInit(0.0).stride(1,1).build(),new ActivationLayer.Builder().activation(activation).build(),new Pooling2D.Builder().poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(3,3).stride(2,2).build(),new Convolution2D.Builder().nOut(384).kernelSize(3,3).padding(1,1).biasInit(0.0).stride(1,1).build(),new ActivationLayer.Builder().activation(activation).build(),new Convolution2D.Builder().nOut(256).kernelSize(3,3).padding(1,1).stride(1,1).build(),new ActivationLayer.Builder().activation(activation).build(),new Pooling2D.Builder().poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(3,3).stride(2,2).build(),new DenseLayer.Builder().nOut(4096).biasInit(0.0).build(),new ActivationLayer.Builder().activation(activation).build(),new OutputLayer.Builder().activation(new ActivationSoftmax()).lossFunction(new LossNegativeLogLikelihood()).nOut(numClasses).biasInit(0.0).build()).setInputType(InputType.convolutionalFlat(imageHeight,imageWidth,channels)).build();
  MultiLayerNetwork net=new MultiLayerNetwork(multiLayerConfiguration);
  net.init();
  int[] fShape=new int[]{32,channels,imageHeight,imageWidth};
  int[] lShape=new int[]{32,numClasses};
  List<Class<?>> classesToTest=new ArrayList<>();
  classesToTest.add(ConvolutionLayer.class);
  classesToTest.add(org.deeplearning4j.nn.layers.convolution.subsampling.SubsamplingLayer.class);
  validateLayers(net,classesToTest,true,fShape,lShape);
}
