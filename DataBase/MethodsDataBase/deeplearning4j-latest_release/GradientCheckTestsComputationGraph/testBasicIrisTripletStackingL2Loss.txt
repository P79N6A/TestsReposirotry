@Test public void testBasicIrisTripletStackingL2Loss(){
  Nd4j.getRandom().setSeed(12345);
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).updater(new NoOp()).graphBuilder().addInputs("input1","input2","input3").addVertex("stack1",new StackVertex(),"input1","input2","input3").addLayer("l1",new DenseLayer.Builder().nIn(4).nOut(5).activation(Activation.TANH).build(),"stack1").addVertex("unstack0",new UnstackVertex(0,3),"l1").addVertex("unstack1",new UnstackVertex(1,3),"l1").addVertex("unstack2",new UnstackVertex(2,3),"l1").addVertex("l2-1",new L2Vertex(),"unstack1","unstack0").addVertex("l2-2",new L2Vertex(),"unstack1","unstack2").addLayer("lossLayer",new LossLayer.Builder().lossFunction(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).build(),"l2-1","l2-2").setOutputs("lossLayer").build();
  ComputationGraph graph=new ComputationGraph(conf);
  graph.init();
  int numParams=(4 * 5 + 5);
  assertEquals(numParams,graph.numParams());
  Nd4j.getRandom().setSeed(12345);
  long nParams=graph.numParams();
  INDArray newParams=Nd4j.rand(new long[]{1,nParams});
  graph.setParams(newParams);
  INDArray pos=Nd4j.rand(150,4);
  INDArray anc=Nd4j.rand(150,4);
  INDArray neg=Nd4j.rand(150,4);
  INDArray labels=Nd4j.zeros(150,2);
  Random r=new Random(12345);
  for (int i=0; i < 150; i++) {
    labels.putScalar(i,r.nextInt(2),1.0);
  }
  Map<String,INDArray> out=graph.feedForward(new INDArray[]{pos,anc,neg},true);
  for (  String s : out.keySet()) {
    System.out.println(s + "\t" + Arrays.toString(out.get(s).shape()));
  }
  if (PRINT_RESULTS) {
    System.out.println("testBasicIrisTripletStackingL2Loss()");
    for (int j=0; j < graph.getNumLayers(); j++)     System.out.println("Layer " + j + " # params: "+ graph.getLayer(j).numParams());
  }
  boolean gradOK=GradientCheckUtil.checkGradients(graph,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,new INDArray[]{pos,anc,neg},new INDArray[]{labels});
  String msg="testBasicIrisTripletStackingL2Loss()";
  assertTrue(msg,gradOK);
  TestUtils.testModelSerialization(graph);
}
