@Test public void testBasicStackUnstackVariableLengthTS(){
  int layerSizes=2;
  Nd4j.getRandom().setSeed(12345);
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).activation(Activation.TANH).updater(new NoOp()).graphBuilder().addInputs("in1","in2").addLayer("d0",new GravesLSTM.Builder().nIn(layerSizes).nOut(layerSizes).build(),"in1").addLayer("d1",new GravesLSTM.Builder().nIn(layerSizes).nOut(layerSizes).build(),"in2").addVertex("stack",new StackVertex(),"d0","d1").addLayer("d2",new GravesLSTM.Builder().nIn(layerSizes).nOut(layerSizes).build(),"stack").addVertex("u1",new UnstackVertex(0,2),"d2").addVertex("u2",new UnstackVertex(1,2),"d2").addLayer("p1",new GlobalPoolingLayer.Builder(PoolingType.AVG).build(),"u1").addLayer("p2",new GlobalPoolingLayer.Builder(PoolingType.AVG).build(),"u2").addLayer("out1",new OutputLayer.Builder().lossFunction(LossFunctions.LossFunction.L2).nIn(layerSizes).nOut(layerSizes).activation(Activation.IDENTITY).build(),"p1").addLayer("out2",new OutputLayer.Builder().lossFunction(LossFunctions.LossFunction.L2).nIn(layerSizes).nOut(2).activation(Activation.IDENTITY).build(),"p2").setOutputs("out1","out2").build();
  ComputationGraph graph=new ComputationGraph(conf);
  graph.init();
  Nd4j.getRandom().setSeed(12345);
  long nParams=graph.numParams();
  INDArray newParams=Nd4j.rand(new long[]{1,nParams});
  graph.setParams(newParams);
  int[] mbSizes=new int[]{1,3,10};
  for (  int minibatch : mbSizes) {
    INDArray in1=Nd4j.rand(new int[]{minibatch,layerSizes,4});
    INDArray in2=Nd4j.rand(new int[]{minibatch,layerSizes,5});
    INDArray inMask1=Nd4j.zeros(minibatch,4);
    inMask1.get(NDArrayIndex.all(),NDArrayIndex.interval(0,3)).assign(1);
    INDArray inMask2=Nd4j.zeros(minibatch,5);
    inMask2.get(NDArrayIndex.all(),NDArrayIndex.interval(0,4)).assign(1);
    INDArray labels1=Nd4j.rand(new int[]{minibatch,2});
    INDArray labels2=Nd4j.rand(new int[]{minibatch,2});
    String testName="testBasicStackUnstackVariableLengthTS() - minibatch = " + minibatch;
    if (PRINT_RESULTS) {
      System.out.println(testName);
      for (int j=0; j < graph.getNumLayers(); j++)       System.out.println("Layer " + j + " # params: "+ graph.getLayer(j).numParams());
    }
    graph.setLayerMaskArrays(new INDArray[]{inMask1,inMask2},null);
    boolean gradOK=GradientCheckUtil.checkGradients(graph,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,new INDArray[]{in1,in2},new INDArray[]{labels1,labels2},new INDArray[]{inMask1,inMask2},null);
    assertTrue(testName,gradOK);
    TestUtils.testModelSerialization(graph);
  }
}
