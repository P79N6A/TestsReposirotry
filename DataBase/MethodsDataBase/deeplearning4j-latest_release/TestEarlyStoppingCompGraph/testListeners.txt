@Test public void testListeners(){
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new Sgd(0.001)).weightInit(WeightInit.XAVIER).graphBuilder().addInputs("in").addLayer("0",new OutputLayer.Builder().nIn(4).nOut(3).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build(),"in").setOutputs("0").build();
  ComputationGraph net=new ComputationGraph(conf);
  net.setListeners(new ScoreIterationListener(1));
  DataSetIterator irisIter=new IrisDataSetIterator(150,150);
  EarlyStoppingModelSaver<ComputationGraph> saver=new InMemoryModelSaver<>();
  EarlyStoppingConfiguration<ComputationGraph> esConf=new EarlyStoppingConfiguration.Builder<ComputationGraph>().epochTerminationConditions(new MaxEpochsTerminationCondition(5)).iterationTerminationConditions(new MaxTimeIterationTerminationCondition(1,TimeUnit.MINUTES)).scoreCalculator(new DataSetLossCalculatorCG(irisIter,true)).modelSaver(saver).build();
  LoggingEarlyStoppingListener listener=new LoggingEarlyStoppingListener();
  IEarlyStoppingTrainer trainer=new EarlyStoppingGraphTrainer(esConf,net,irisIter,listener);
  trainer.fit();
  assertEquals(1,listener.onStartCallCount);
  assertEquals(5,listener.onEpochCallCount);
  assertEquals(1,listener.onCompletionCallCount);
}
