@Test public void testZerosOnesLike(){
  Nd4j.getRandom().setSeed(12345);
  List<int[]> shapes=Arrays.asList(new int[0],new int[]{3},new int[]{3,4},new int[]{3,4,5});
  List<String> failed=new ArrayList<>();
  for (  boolean zeros : new boolean[]{true,false}) {
    for (    int[] shape : shapes) {
      SameDiff sd=SameDiff.create();
      INDArray arr;
      if (shape.length > 0) {
        arr=Nd4j.rand(shape);
      }
 else {
        arr=Nd4j.trueScalar(Nd4j.rand(new int[]{1,1}).getDouble(0));
      }
      SDVariable var=sd.var("in",arr);
      SDVariable xLike;
      if (zeros) {
        xLike=sd.zerosLike(var);
      }
 else {
        xLike=sd.onesLike(var);
      }
      SDVariable loss;
      if (shape.length > 0) {
        loss=xLike.std(true);
      }
 else {
        loss=xLike.mean();
      }
      String err=OpValidation.validate(new TestCase(sd).expected(xLike,(zeros ? Nd4j.zeros(shape) : Nd4j.ones(shape))),true);
      if (err != null) {
        failed.add(err);
      }
    }
  }
  assertEquals(failed.toString(),0,failed.size());
}
