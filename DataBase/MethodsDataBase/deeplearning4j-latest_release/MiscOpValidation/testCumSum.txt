@Test public void testCumSum(){
  List<String> failing=new ArrayList<>();
  for (  char order : new char[]{'c','f'}) {
    Nd4j.getRandom().setSeed(12345);
    INDArray arr=Nd4j.linspace(1,15,15).reshape(3,5).dup(order);
    INDArray expFF=Nd4j.create(new double[][]{{1,3,6,10,15},{6,13,21,30,40},{11,23,36,50,65}});
    INDArray expTF=Nd4j.create(new double[][]{{0,1,3,6,10},{0,6,13,21,30},{0,11,23,36,50}});
    INDArray expFT=Nd4j.create(new double[][]{{15,14,12,9,5},{40,34,27,19,10},{65,54,42,29,15}});
    INDArray expTT=Nd4j.create(new double[][]{{14,12,9,5,0},{34,27,19,10,0},{54,42,29,15,0}});
    INDArray axisArg=Nd4j.scalar(1);
    for (    boolean exclusive : new boolean[]{false,true}) {
      for (      boolean reverse : new boolean[]{false,true}) {
        String msg=order + ", exclusive=" + exclusive+ ", reverse="+ reverse;
        INDArray out=Nd4j.create(3,5);
        OpTestCase op=new OpTestCase(new CumSum(arr,out,exclusive,reverse,1));
        if (!exclusive && !reverse) {
          op.expectedOutput(0,expFF);
        }
 else         if (exclusive && !reverse) {
          op.expectedOutput(0,expTF);
        }
 else         if (!exclusive && reverse) {
          op.expectedOutput(0,expFT);
        }
 else {
          op.expectedOutput(0,expTT);
        }
        String err=OpValidation.validate(op);
        if (err != null) {
          failing.add(msg);
        }
      }
    }
  }
  assertEquals(failing.toString(),0,failing.size());
}
