@Test public void testMmulGradientManual(){
  SameDiff sameDiff=SameDiff.create();
  INDArray sumInput=Nd4j.linspace(1,4,4).reshape(2,2);
  Map<String,INDArray> inputs=new HashMap<>();
  inputs.put("x",sumInput);
  inputs.put("y",sumInput.dup());
  sameDiff.defineFunction("mmulGradient",new SameDiffFunctionDefinition(){
    @Override public SDVariable[] define(    SameDiff sameDiff,    Map<String,INDArray> inputs,    SDVariable[] variableInputs){
      SDVariable input=sameDiff.var("x",inputs.get("x"));
      SDVariable input2=sameDiff.var("y",inputs.get("y"));
      SDVariable exp=sameDiff.mmul(input,input2);
      SDVariable sum=sameDiff.sum(exp,Integer.MAX_VALUE);
      return new SDVariable[]{sum};
    }
  }
,inputs);
  List<DifferentialFunction> ops=sameDiff.getFunction("mmulGradient").execBackwards().getRight();
  assumeNotNull(sameDiff.getFunction("mmulGradient").getFunction("grad"));
  assumeNotNull(sameDiff.getFunction("mmulGradient").grad("x"));
  assumeNotNull(sameDiff.getFunction("mmulGradient").grad("y"));
  SDVariable gradWrtX=sameDiff.getFunction("mmulGradient").grad("x");
  SDVariable gradWrtY=sameDiff.getFunction("mmulGradient").grad("y");
  assumeNotNull(gradWrtX.getArr());
  assumeNotNull(gradWrtY.getArr());
  INDArray xGradAssertion=Nd4j.create(new double[][]{{3,7},{3,7}});
  INDArray yGradAssertion=Nd4j.create(new double[][]{{4,4},{6,6}});
  assertEquals(xGradAssertion,gradWrtX.getArr());
  assertEquals(yGradAssertion,gradWrtY.getArr());
}
