@Test public void testCumProd(){
  List<String> failing=new ArrayList<>();
  for (  char order : new char[]{'c','f'}) {
    Nd4j.getRandom().setSeed(12345);
    INDArray arr=Nd4j.linspace(1,15,15).reshape(3,5).dup(order);
    INDArray expFF=Nd4j.create(new double[][]{{1,2,6,24,120},{6,42,336,3024,30240},{11,132,1716,24024,360360}});
    INDArray expTF=Nd4j.create(new double[][]{{1,1,2,6,24},{1,6,42,336,3024},{1,11,132,1716,24024}});
    INDArray expFT=Nd4j.create(new double[][]{{120,120,60,20,5},{30240,5040,720,90,10},{360360,32760,2730,210,15}});
    INDArray expTT=Nd4j.create(new double[][]{{120,60,20,5,1},{5040,720,90,10,1},{32760,2730,210,15,1}});
    INDArray axisArg=Nd4j.scalar(1);
    for (    boolean exclusive : new boolean[]{false,true}) {
      for (      boolean reverse : new boolean[]{false,true}) {
        INDArray out=Nd4j.create(3,5);
        OpTestCase op=new OpTestCase(new CumProd(arr,out,exclusive,reverse,1));
        String msg=order + ", exclusive=" + exclusive+ ", reverse="+ reverse;
        if (!exclusive && !reverse) {
          op.expectedOutput(0,expFF);
        }
 else         if (exclusive && !reverse) {
          op.expectedOutput(0,expTF);
        }
 else         if (!exclusive && reverse) {
          op.expectedOutput(0,expFT);
        }
 else {
          op.expectedOutput(0,expTT);
        }
        String err=OpValidation.validate(op);
        if (err != null) {
          failing.add(msg);
        }
      }
    }
  }
  assertEquals(failing.toString(),0,failing.size());
}
