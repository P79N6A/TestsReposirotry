@Test public void testMmulGradients(){
  int[] aShape=new int[]{2,3};
  int[] bShape=new int[]{3,4};
  List<String> failed=new ArrayList<>();
  for (  char aOrder : new char[]{'c','f'}) {
    for (    char bOrder : new char[]{'c','f'}) {
      for (      boolean transposeA : new boolean[]{false,true}) {
        for (        boolean transposeB : new boolean[]{false,true}) {
          for (          boolean transposeResult : new boolean[]{false,true}) {
            Nd4j.getRandom().setSeed(12345);
            INDArray aArr=Nd4j.rand(t(transposeA,aShape)).dup(aOrder);
            INDArray bArr=Nd4j.rand(t(transposeB,bShape)).dup(bOrder);
            SameDiff sd=SameDiff.create();
            SDVariable a=sd.var("a",aArr);
            SDVariable b=sd.var("b",bArr);
            MMulTranspose mt=MMulTranspose.builder().transposeA(transposeA).transposeB(transposeB).transposeResult(transposeResult).build();
            SDVariable mmul=sd.mmul(a,b,mt);
            INDArray exp=(transposeA ? aArr.transpose() : aArr);
            exp=exp.mmul(transposeB ? bArr.transpose() : bArr);
            exp=(transposeResult ? exp.transpose() : exp);
            SDVariable loss=mmul.std(true);
            String name=aOrder + "," + bOrder+ ",tA="+ transposeA+ ",tB="+ transposeB+ ",tRes="+ transposeResult;
            TestCase tc=new TestCase(sd).testName(name).expected(mmul,exp);
            String err=OpValidation.validate(tc,true);
            if (err != null)             failed.add(err);
          }
        }
      }
    }
  }
  assertEquals(failed.toString(),0,failed.size());
}
