@Test public void testGradientAutoBroadcast3(){
  Nd4j.getRandom().setSeed(12345);
  List<String> failed=new ArrayList<>();
  List<Triple<long[],long[],long[]>> testCases=new ArrayList<>();
  testCases.add(new Triple<>(new long[]{3,1},new long[]{1,4},new long[]{3,4}));
  testCases.add(new Triple<>(new long[]{3,1},new long[]{3,4},new long[]{3,4}));
  testCases.add(new Triple<>(new long[]{3,4},new long[]{1,4},new long[]{3,4}));
  testCases.add(new Triple<>(new long[]{3,4,1},new long[]{1,1,5},new long[]{3,4,5}));
  testCases.add(new Triple<>(new long[]{3,4,1},new long[]{3,1,5},new long[]{3,4,5}));
  testCases.add(new Triple<>(new long[]{3,1,5},new long[]{1,4,1},new long[]{3,4,5}));
  testCases.add(new Triple<>(new long[]{3,1,5},new long[]{1,4,5},new long[]{3,4,5}));
  testCases.add(new Triple<>(new long[]{3,1,5},new long[]{3,4,5},new long[]{3,4,5}));
  testCases.add(new Triple<>(new long[]{3,1,1,1},new long[]{1,4,5,6},new long[]{3,4,5,6}));
  testCases.add(new Triple<>(new long[]{1,1,1,6},new long[]{3,4,5,6},new long[]{3,4,5,6}));
  testCases.add(new Triple<>(new long[]{1,4,5,1},new long[]{3,1,1,6},new long[]{3,4,5,6}));
  if (!OpValidationSuite.IGNORE_FAILING) {
    testCases.add(new Triple<>(new long[]{1,6},new long[]{3,4,5,1},new long[]{3,4,5,6}));
  }
  for (  val p : testCases) {
    for (int i=0; i < 8; i++) {
      SameDiff sd=SameDiff.create();
      SDVariable in3=sd.var("in1",p.getFirst());
      SDVariable in2=sd.var("in2",p.getSecond());
      String name;
      SDVariable bcOp;
switch (i) {
case 0:
        bcOp=in3.add(in2);
      name="add";
    break;
case 1:
  bcOp=in3.sub(in2);
name="sub";
break;
case 2:
bcOp=in3.mul(in2);
name="mul";
break;
case 3:
bcOp=in3.div(in2);
name="div";
break;
case 4:
bcOp=in3.rsub(in2);
name="rsub";
break;
case 5:
bcOp=in3.rdiv(in2);
name="rdiv";
break;
case 6:
bcOp=sd.f().floorDiv(in3,in2);
name="floordiv";
break;
case 7:
bcOp=sd.f().floorMod(in3,in2);
name="floormod";
if (OpValidationSuite.IGNORE_FAILING) {
continue;
}
break;
default :
throw new RuntimeException();
}
SDVariable outVar=sd.sum(bcOp);
String msg="(test " + i + ": "+ name+ ", array 1 size ="+ Arrays.toString(p.getFirst())+ ", array 2 size = "+ Arrays.toString(p.getSecond())+ ")";
log.info("*** Starting test: " + msg);
INDArray in3Arr=Nd4j.randn(p.getFirst()).muli(100);
INDArray in2Arr=Nd4j.randn(p.getSecond()).muli(100);
sd.associateArrayWithVariable(in3Arr,in3);
sd.associateArrayWithVariable(in2Arr,in2);
TestCase tc=new TestCase(sd);
String error=OpValidation.validate(tc);
if (error != null) {
failed.add(name + " " + i+ " - "+ error);
}
}
}
assertEquals("Failed: " + failed,0,failed.size());
}
