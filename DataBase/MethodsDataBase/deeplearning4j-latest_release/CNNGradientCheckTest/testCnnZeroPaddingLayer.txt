@Test public void testCnnZeroPaddingLayer(){
  Nd4j.getRandom().setSeed(12345);
  int nOut=4;
  int[] minibatchSizes={1,3};
  int width=6;
  int height=6;
  int[] inputDepths={1,3};
  int[] kernel={2,2};
  int[] stride={1,1};
  int[] padding={0,0};
  int[][] zeroPadLayer=new int[][]{{0,0,0,0},{1,1,0,0},{2,2,2,2}};
  for (  int inputDepth : inputDepths) {
    for (    int minibatchSize : minibatchSizes) {
      INDArray input=Nd4j.rand(new int[]{minibatchSize,inputDepth,height,width});
      INDArray labels=Nd4j.zeros(minibatchSize,nOut);
      for (int i=0; i < minibatchSize; i++) {
        labels.putScalar(new int[]{i,i % nOut},1.0);
      }
      for (      int[] zeroPad : zeroPadLayer) {
        MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().updater(new NoOp()).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).list().layer(0,new ConvolutionLayer.Builder(kernel,stride,padding).cudnnAllowFallback(false).nIn(inputDepth).nOut(3).build()).layer(1,new ZeroPaddingLayer.Builder(zeroPad).build()).layer(2,new ConvolutionLayer.Builder(kernel,stride,padding).nIn(3).nOut(3).cudnnAllowFallback(false).build()).layer(3,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nOut(4).build()).setInputType(InputType.convolutional(height,width,inputDepth)).build();
        MultiLayerNetwork net=new MultiLayerNetwork(conf);
        net.init();
        org.deeplearning4j.nn.layers.convolution.ZeroPaddingLayer zpl=(org.deeplearning4j.nn.layers.convolution.ZeroPaddingLayer)net.getLayer(1);
        val expShape=new long[]{minibatchSize,inputDepth,height + zeroPad[0] + zeroPad[1],width + zeroPad[2] + zeroPad[3]};
        INDArray out=zpl.activate(input,false,LayerWorkspaceMgr.noWorkspaces());
        assertArrayEquals(expShape,out.shape());
        String msg="minibatch=" + minibatchSize + ", channels="+ inputDepth+ ", zeroPad = "+ Arrays.toString(zeroPad);
        if (PRINT_RESULTS) {
          System.out.println(msg);
          for (int j=0; j < net.getnLayers(); j++)           System.out.println("Layer " + j + " # params: "+ net.getLayer(j).numParams());
        }
        boolean gradOK=GradientCheckUtil.checkGradients(net,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels);
        assertTrue(msg,gradOK);
        TestUtils.testModelSerialization(net);
      }
    }
  }
}
