@Test public void testCnnLocallyConnected2D(){
  int nOut=3;
  int[] minibatchSizes={2};
  int width=5;
  int height=5;
  int[] inputDepths={1,2,4};
  Activation[] activations={Activation.SIGMOID,Activation.TANH};
  Nd4j.getRandom().setSeed(12345);
  for (  int inputDepth : inputDepths) {
    for (    Activation afn : activations) {
      for (      int minibatchSize : minibatchSizes) {
        INDArray input=Nd4j.rand(minibatchSize,width * height * inputDepth);
        INDArray labels=Nd4j.zeros(minibatchSize,nOut);
        for (int i=0; i < minibatchSize; i++) {
          labels.putScalar(new int[]{i,i % nOut},1.0);
        }
        MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).updater(new NoOp()).activation(afn).list().layer(0,new ConvolutionLayer.Builder().kernelSize(2,2).stride(1,1).padding(0,0).nIn(inputDepth).nOut(2).build()).layer(1,new LocallyConnected2D.Builder().nIn(2).nOut(7).kernelSize(2,2).setInputSize(4,4).convolutionMode(ConvolutionMode.Strict).hasBias(false).stride(1,1).padding(0,0).build()).layer(2,new ConvolutionLayer.Builder().nIn(7).nOut(2).kernelSize(2,2).stride(1,1).padding(0,0).build()).layer(3,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(2 * 2 * 2).nOut(nOut).build()).setInputType(InputType.convolutionalFlat(height,width,inputDepth)).build();
        assertEquals(ConvolutionMode.Truncate,((ConvolutionLayer)conf.getConf(0).getLayer()).getConvolutionMode());
        MultiLayerNetwork net=new MultiLayerNetwork(conf);
        net.init();
        for (int i=0; i < 4; i++) {
          System.out.println("nParams, layer " + i + ": "+ net.getLayer(i).numParams());
        }
        String msg="Minibatch=" + minibatchSize + ", activationFn="+ afn;
        System.out.println(msg);
        boolean gradOK=GradientCheckUtil.checkGradients(net,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels);
        assertTrue(msg,gradOK);
        TestUtils.testModelSerialization(net);
      }
    }
  }
}
