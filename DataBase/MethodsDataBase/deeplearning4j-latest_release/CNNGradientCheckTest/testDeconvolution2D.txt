@Test public void testDeconvolution2D(){
  int nOut=2;
  int[] minibatchSizes=new int[]{1,4,1,4,1,1,2,1};
  int[] kernelSizes=new int[]{1,1,3,3,1,1,3,3};
  int[] strides={1,1,1,1,2,2,2,2};
  int[] dilation={1,2,2,1,1,1,2,2};
  Activation[] activations=new Activation[]{Activation.SIGMOID,Activation.TANH,Activation.TANH,Activation.TANH,Activation.TANH,Activation.SIGMOID,Activation.SIGMOID,Activation.SIGMOID};
  ConvolutionMode[] cModes=new ConvolutionMode[]{Truncate,Truncate,Truncate,Truncate,Truncate,Truncate,Truncate,Truncate};
  int width=7;
  int height=7;
  int inputDepth=3;
  Nd4j.getRandom().setSeed(12345);
  for (int i=0; i < minibatchSizes.length; i++) {
    int minibatchSize=minibatchSizes[i];
    int k=kernelSizes[i];
    int s=strides[i];
    int d=dilation[i];
    ConvolutionMode cm=cModes[i];
    Activation act=activations[i];
    int w=d * width;
    int h=d * height;
    INDArray input=Nd4j.rand(minibatchSize,w * h * inputDepth);
    INDArray labels=Nd4j.zeros(minibatchSize,nOut);
    for (int j=0; j < minibatchSize; j++) {
      labels.putScalar(new int[]{j,j % nOut},1.0);
    }
    NeuralNetConfiguration.ListBuilder b=new NeuralNetConfiguration.Builder().seed(12345).updater(new NoOp()).activation(act).list().layer(new Deconvolution2D.Builder().name("deconvolution_2D_layer-0").cudnnAllowFallback(false).kernelSize(1,1).stride(1,1).dilation(0,0).convolutionMode(cm).nIn(inputDepth).nOut(inputDepth).build()).layer(new Deconvolution2D.Builder().name("deconvolution_2D_layer").cudnnAllowFallback(false).kernelSize(k,k).stride(s,s).dilation(d,d).convolutionMode(cm).nIn(inputDepth).nOut(nOut).build());
    MultiLayerConfiguration conf=b.layer(new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nOut(nOut).build()).setInputType(InputType.convolutionalFlat(h,w,inputDepth)).build();
    MultiLayerNetwork net=new MultiLayerNetwork(conf);
    net.init();
    for (int j=0; j < net.getLayers().length; j++) {
      System.out.println("nParams, layer " + j + ": "+ net.getLayer(j).numParams());
    }
    String msg=" - mb=" + minibatchSize + ", k="+ k+ ", s="+ s+ ", d="+ d+ ", cm="+ cm;
    System.out.println(msg);
    boolean gradOK=GradientCheckUtil.checkGradients(net,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels);
    assertTrue(msg,gradOK);
    TestUtils.testModelSerialization(net);
  }
}
