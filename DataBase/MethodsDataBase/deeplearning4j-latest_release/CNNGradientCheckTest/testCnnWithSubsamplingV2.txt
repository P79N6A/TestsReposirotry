@Test public void testCnnWithSubsamplingV2(){
  Nd4j.getRandom().setSeed(12345);
  int nOut=4;
  int[] minibatchSizes={1,3};
  int width=5;
  int height=5;
  int inputDepth=1;
  int[] kernel={2,2};
  int[] stride={1,1};
  int[] padding={0,0};
  int pNorm=3;
  Activation[] activations={Activation.SIGMOID,Activation.TANH};
  SubsamplingLayer.PoolingType[] poolingTypes=new SubsamplingLayer.PoolingType[]{SubsamplingLayer.PoolingType.MAX,SubsamplingLayer.PoolingType.AVG,SubsamplingLayer.PoolingType.PNORM};
  for (  Activation afn : activations) {
    for (    SubsamplingLayer.PoolingType poolingType : poolingTypes) {
      for (      int minibatchSize : minibatchSizes) {
        INDArray input=Nd4j.rand(minibatchSize,width * height * inputDepth);
        INDArray labels=Nd4j.zeros(minibatchSize,nOut);
        for (int i=0; i < minibatchSize; i++) {
          labels.putScalar(new int[]{i,i % nOut},1.0);
        }
        MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().updater(new NoOp()).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).list().layer(0,new ConvolutionLayer.Builder(kernel,stride,padding).nIn(inputDepth).cudnnAllowFallback(false).nOut(3).build()).layer(1,new SubsamplingLayer.Builder(poolingType).kernelSize(kernel).stride(stride).padding(padding).cudnnAllowFallback(false).pnorm(pNorm).build()).layer(2,new ConvolutionLayer.Builder(kernel,stride,padding).cudnnAllowFallback(false).nIn(3).nOut(2).build()).layer(3,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(2 * 2 * 2).nOut(4).build()).setInputType(InputType.convolutionalFlat(height,width,inputDepth)).build();
        MultiLayerNetwork net=new MultiLayerNetwork(conf);
        net.init();
        String msg="PoolingType=" + poolingType + ", minibatch="+ minibatchSize+ ", activationFn="+ afn;
        System.out.println(msg);
        boolean gradOK=GradientCheckUtil.checkGradients(net,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels);
        assertTrue(msg,gradOK);
        TestUtils.testModelSerialization(net);
      }
    }
  }
}
