@Test public void testCnnDilated(){
  int nOut=2;
  int minibatchSize=3;
  int width=8;
  int height=8;
  int inputDepth=3;
  Nd4j.getRandom().setSeed(12345);
  boolean[] sub=new boolean[]{true,false,true,false,true,false,true,false};
  int[] stride=new int[]{1,1,2,2,1,1,2,2};
  int[] kernel=new int[]{2,2,2,2,3,3,3,3};
  int[] ds=new int[]{2,3,3,2,2,3,3,2};
  ConvolutionMode[] cms=new ConvolutionMode[]{Same,Same,Same,Truncate,Truncate,Truncate,Same,Truncate};
  for (int t=0; t < sub.length; t++) {
    boolean subsampling=sub[t];
    int s=stride[t];
    int k=kernel[t];
    int d=ds[t];
    ConvolutionMode cm=cms[t];
    int w=d * width;
    int h=d * height;
    INDArray input=Nd4j.rand(minibatchSize,w * h * inputDepth);
    INDArray labels=Nd4j.zeros(minibatchSize,nOut);
    for (int i=0; i < minibatchSize; i++) {
      labels.putScalar(new int[]{i,i % nOut},1.0);
    }
    NeuralNetConfiguration.ListBuilder b=new NeuralNetConfiguration.Builder().seed(12345).updater(new NoOp()).activation(Activation.TANH).convolutionMode(cm).list().layer(new ConvolutionLayer.Builder().name("layer 0").kernelSize(k,k).stride(s,s).dilation(d,d).cudnnAllowFallback(false).nIn(inputDepth).nOut(2).build());
    if (subsampling) {
      b.layer(new SubsamplingLayer.Builder().poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(k,k).stride(s,s).cudnnAllowFallback(false).dilation(d,d).build());
    }
 else {
      b.layer(new ConvolutionLayer.Builder().nIn(2).nOut(2).kernelSize(k,k).stride(s,s).dilation(d,d).cudnnAllowFallback(false).build());
    }
    MultiLayerConfiguration conf=b.layer(new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nOut(nOut).build()).setInputType(InputType.convolutionalFlat(h,w,inputDepth)).build();
    MultiLayerNetwork net=new MultiLayerNetwork(conf);
    net.init();
    for (int i=0; i < net.getLayers().length; i++) {
      System.out.println("nParams, layer " + i + ": "+ net.getLayer(i).numParams());
    }
    String msg=(subsampling ? "subsampling" : "conv") + " - mb=" + minibatchSize+ ", k="+ k+ ", s="+ s+ ", d="+ d+ ", cm="+ cm;
    System.out.println(msg);
    boolean gradOK=GradientCheckUtil.checkGradients(net,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels);
    assertTrue(msg,gradOK);
    TestUtils.testModelSerialization(net);
  }
}
