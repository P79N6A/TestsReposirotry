@Test public void testGradient2dSimple(){
  DataNormalization scaler=new NormalizerMinMaxScaler();
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  scaler.fit(iter);
  iter.setPreProcessor(scaler);
  DataSet ds=iter.next();
  INDArray input=ds.getFeatures();
  INDArray labels=ds.getLabels();
  MultiLayerConfiguration.Builder builder=new NeuralNetConfiguration.Builder().updater(new NoOp()).seed(12345L).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).list().layer(0,new DenseLayer.Builder().nIn(4).nOut(3).activation(Activation.IDENTITY).build()).layer(1,new BatchNormalization.Builder().nOut(3).build()).layer(2,new ActivationLayer.Builder().activation(Activation.TANH).build()).layer(3,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(3).nOut(3).build());
  MultiLayerNetwork mln=new MultiLayerNetwork(builder.build());
  mln.init();
  if (PRINT_RESULTS) {
    for (int j=0; j < mln.getnLayers(); j++)     System.out.println("Layer " + j + " # params: "+ mln.getLayer(j).numParams());
  }
  Set<String> excludeParams=new HashSet<>(Arrays.asList("1_mean","1_var"));
  boolean gradOK=GradientCheckUtil.checkGradients(mln,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels,excludeParams);
  assertTrue(gradOK);
  TestUtils.testModelSerialization(mln);
}
