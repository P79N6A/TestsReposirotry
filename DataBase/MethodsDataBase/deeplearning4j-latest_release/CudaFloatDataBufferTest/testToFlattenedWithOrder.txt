@Test public void testToFlattenedWithOrder(){
  int[] firstShape={10,3};
  int firstLen=ArrayUtil.prod(firstShape);
  int[] secondShape={2,7};
  int secondLen=ArrayUtil.prod(secondShape);
  int[] thirdShape={3,3};
  int thirdLen=ArrayUtil.prod(thirdShape);
  INDArray firstC=Nd4j.linspace(1,firstLen,firstLen).reshape('c',firstShape);
  INDArray firstF=Nd4j.create(firstShape,'f').assign(firstC);
  INDArray secondC=Nd4j.linspace(1,secondLen,secondLen).reshape('c',secondShape);
  INDArray secondF=Nd4j.create(secondShape,'f').assign(secondC);
  INDArray thirdC=Nd4j.linspace(1,thirdLen,thirdLen).reshape('c',thirdShape);
  INDArray thirdF=Nd4j.create(thirdShape,'f').assign(thirdC);
  assertEquals(firstC,firstF);
  assertEquals(secondC,secondF);
  assertEquals(thirdC,thirdF);
  INDArray cc=Nd4j.toFlattened('c',firstC,secondC,thirdC);
  INDArray cf=Nd4j.toFlattened('c',firstF,secondF,thirdF);
  assertEquals(cc,cf);
  INDArray cmixed=Nd4j.toFlattened('c',firstC,secondF,thirdF);
  assertEquals(cc,cmixed);
  INDArray fc=Nd4j.toFlattened('f',firstC,secondC,thirdC);
  assertNotEquals(cc,fc);
  INDArray ff=Nd4j.toFlattened('f',firstF,secondF,thirdF);
  assertEquals(fc,ff);
  INDArray fmixed=Nd4j.toFlattened('f',firstC,secondF,thirdF);
  assertEquals(fc,fmixed);
}
