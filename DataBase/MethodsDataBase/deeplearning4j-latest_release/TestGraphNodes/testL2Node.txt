@Test public void testL2Node(){
  Nd4j.getRandom().setSeed(12345);
  GraphVertex l2=new L2Vertex(null,"",-1,1e-8);
  INDArray in1=Nd4j.rand(5,2);
  INDArray in2=Nd4j.rand(5,2);
  l2.setInputs(in1,in2);
  INDArray out=l2.doForward(false,LayerWorkspaceMgr.noWorkspaces());
  INDArray expOut=Nd4j.create(5,1);
  for (int i=0; i < 5; i++) {
    double d2=0.0;
    for (int j=0; j < in1.size(1); j++) {
      double temp=(in1.getDouble(i,j) - in2.getDouble(i,j));
      d2+=temp * temp;
    }
    d2=Math.sqrt(d2);
    expOut.putScalar(i,0,d2);
  }
  assertEquals(expOut,out);
  INDArray epsilon=Nd4j.rand(5,1);
  INDArray diff=in1.sub(in2);
  INDArray sNegHalf=out.rdiv(1.0);
  INDArray dLda=diff.mulColumnVector(epsilon.mul(sNegHalf));
  INDArray dLdb=diff.mulColumnVector(epsilon.mul(sNegHalf)).neg();
  l2.setEpsilon(epsilon);
  Pair<Gradient,INDArray[]> p=l2.doBackward(false,LayerWorkspaceMgr.noWorkspaces());
  assertEquals(dLda,p.getSecond()[0]);
  assertEquals(dLdb,p.getSecond()[1]);
}
