@Test public void testLastTimeStepWithTransfer(){
  int lstmLayerSize=16;
  int numLabelClasses=10;
  int numInputs=5;
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().trainingWorkspaceMode(WorkspaceMode.NONE).inferenceWorkspaceMode(WorkspaceMode.NONE).seed(123).updater(new AdaDelta()).weightInit(WeightInit.XAVIER).graphBuilder().addInputs("rr").setInputTypes(InputType.recurrent(30)).addLayer("1",new GravesLSTM.Builder().activation(Activation.TANH).nIn(numInputs).nOut(lstmLayerSize).dropOut(0.9).build(),"rr").addLayer("2",new RnnOutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nOut(numLabelClasses).build(),"1").setOutputs("2").build();
  ComputationGraph net=new ComputationGraph(conf);
  net.init();
  ComputationGraph updatedModel=new TransferLearning.GraphBuilder(net).addVertex("laststepoutput",new LastTimeStepVertex("rr"),"2").setOutputs("laststepoutput").build();
  INDArray input=Nd4j.rand(new int[]{10,numInputs,16});
  INDArray[] out=updatedModel.output(input);
  assertNotNull(out);
  assertEquals(1,out.length);
  assertNotNull(out[0]);
  assertArrayEquals(new long[]{10,numLabelClasses},out[0].shape());
  Map<String,INDArray> acts=updatedModel.feedForward(input,false);
  assertEquals(4,acts.size());
  assertNotNull(acts.get("laststepoutput"));
  assertArrayEquals(new long[]{10,numLabelClasses},acts.get("laststepoutput").shape());
  String toString=out[0].toString();
}
