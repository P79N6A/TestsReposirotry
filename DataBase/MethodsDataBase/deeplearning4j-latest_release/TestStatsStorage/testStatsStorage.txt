@Test public void testStatsStorage() throws IOException {
  for (  boolean useJ7Storage : new boolean[]{false,true}) {
    for (int i=0; i < 3; i++) {
      StatsStorage ss;
switch (i) {
case 0:
        File f=createTempFile("TestMapDbStatsStore",".db");
      f.delete();
    ss=new MapDBStatsStorage.Builder().file(f).build();
  break;
case 1:
File f2=createTempFile("TestJ7FileStatsStore",".db");
f2.delete();
ss=new J7FileStatsStorage(f2);
break;
case 2:
ss=new InMemoryStatsStorage();
break;
default :
throw new RuntimeException();
}
CountingListener l=new CountingListener();
ss.registerStatsStorageListener(l);
assertEquals(1,ss.getListeners().size());
assertEquals(0,ss.listSessionIDs().size());
assertNull(ss.getLatestUpdate("sessionID","typeID","workerID"));
assertEquals(0,ss.listSessionIDs().size());
ss.putStaticInfo(getInitReport(0,0,0,useJ7Storage));
assertEquals(1,l.countNewSession);
assertEquals(1,l.countNewWorkerId);
assertEquals(1,l.countStaticInfo);
assertEquals(0,l.countUpdate);
assertEquals(Collections.singletonList("sid0"),ss.listSessionIDs());
assertTrue(ss.sessionExists("sid0"));
assertFalse(ss.sessionExists("sid1"));
Persistable expected=getInitReport(0,0,0,useJ7Storage);
Persistable p=ss.getStaticInfo("sid0","tid0","wid0");
assertEquals(expected,p);
List<Persistable> allStatic=ss.getAllStaticInfos("sid0","tid0");
assertEquals(Collections.singletonList(expected),allStatic);
assertNull(ss.getLatestUpdate("sid0","tid0","wid0"));
assertEquals(Collections.singletonList("tid0"),ss.listTypeIDsForSession("sid0"));
assertEquals(Collections.singletonList("wid0"),ss.listWorkerIDsForSession("sid0"));
assertEquals(Collections.singletonList("wid0"),ss.listWorkerIDsForSessionAndType("sid0","tid0"));
assertEquals(0,ss.getAllUpdatesAfter("sid0","tid0","wid0",0).size());
assertEquals(0,ss.getNumUpdateRecordsFor("sid0"));
assertEquals(0,ss.getNumUpdateRecordsFor("sid0","tid0","wid0"));
ss.putUpdate(getReport(0,0,0,12345,useJ7Storage));
assertEquals(1,ss.getNumUpdateRecordsFor("sid0"));
assertEquals(getReport(0,0,0,12345,useJ7Storage),ss.getLatestUpdate("sid0","tid0","wid0"));
assertEquals(Collections.singletonList("tid0"),ss.listTypeIDsForSession("sid0"));
assertEquals(Collections.singletonList("wid0"),ss.listWorkerIDsForSession("sid0"));
assertEquals(Collections.singletonList("wid0"),ss.listWorkerIDsForSessionAndType("sid0","tid0"));
assertEquals(Collections.singletonList(getReport(0,0,0,12345,useJ7Storage)),ss.getAllUpdatesAfter("sid0","tid0","wid0",0));
assertEquals(1,ss.getNumUpdateRecordsFor("sid0"));
assertEquals(1,ss.getNumUpdateRecordsFor("sid0","tid0","wid0"));
List<Persistable> list=ss.getLatestUpdateAllWorkers("sid0","tid0");
assertEquals(1,list.size());
assertEquals(getReport(0,0,0,12345,useJ7Storage),ss.getUpdate("sid0","tid0","wid0",12345));
assertEquals(1,l.countNewSession);
assertEquals(1,l.countNewWorkerId);
assertEquals(1,l.countStaticInfo);
assertEquals(1,l.countUpdate);
ss.putUpdate(getReport(0,0,0,12346,useJ7Storage));
assertEquals(1,ss.getLatestUpdateAllWorkers("sid0","tid0").size());
assertEquals(Collections.singletonList("tid0"),ss.listTypeIDsForSession("sid0"));
assertEquals(Collections.singletonList("wid0"),ss.listWorkerIDsForSession("sid0"));
assertEquals(Collections.singletonList("wid0"),ss.listWorkerIDsForSessionAndType("sid0","tid0"));
assertEquals(getReport(0,0,0,12346,useJ7Storage),ss.getLatestUpdate("sid0","tid0","wid0"));
assertEquals(getReport(0,0,0,12346,useJ7Storage),ss.getUpdate("sid0","tid0","wid0",12346));
ss.putUpdate(getReport(0,0,1,12345,useJ7Storage));
assertEquals(2,ss.getLatestUpdateAllWorkers("sid0","tid0").size());
assertEquals(getReport(0,0,1,12345,useJ7Storage),ss.getLatestUpdate("sid0","tid0","wid1"));
assertEquals(getReport(0,0,1,12345,useJ7Storage),ss.getUpdate("sid0","tid0","wid1",12345));
assertEquals(1,l.countNewSession);
assertEquals(2,l.countNewWorkerId);
assertEquals(1,l.countStaticInfo);
assertEquals(3,l.countUpdate);
ss.putStaticInfo(getInitReport(100,200,300,useJ7Storage));
assertEquals(2,ss.getLatestUpdateAllWorkers("sid0","tid0").size());
ss.putUpdate(getReport(100,200,300,12346,useJ7Storage));
assertEquals(Collections.singletonList(getReport(100,200,300,12346,useJ7Storage)),ss.getLatestUpdateAllWorkers("sid100","tid200"));
assertEquals(Collections.singletonList("tid200"),ss.listTypeIDsForSession("sid100"));
List<String> temp=ss.listWorkerIDsForSession("sid100");
System.out.println("temp: " + temp);
assertEquals(Collections.singletonList("wid300"),ss.listWorkerIDsForSession("sid100"));
assertEquals(Collections.singletonList("wid300"),ss.listWorkerIDsForSessionAndType("sid100","tid200"));
assertEquals(getReport(100,200,300,12346,useJ7Storage),ss.getLatestUpdate("sid100","tid200","wid300"));
assertEquals(getReport(100,200,300,12346,useJ7Storage),ss.getUpdate("sid100","tid200","wid300",12346));
assertEquals(2,l.countNewSession);
assertEquals(3,l.countNewWorkerId);
assertEquals(2,l.countStaticInfo);
assertEquals(4,l.countUpdate);
long[] expTSWid0=new long[]{12345,12346};
long[] actTSWid0=ss.getAllUpdateTimes("sid0","tid0","wid0");
assertArrayEquals(expTSWid0,actTSWid0);
long[] expTSWid1=new long[]{12345};
long[] actTSWid1=ss.getAllUpdateTimes("sid0","tid0","wid1");
assertArrayEquals(expTSWid1,actTSWid1);
ss.putUpdate(getReport(100,200,300,12347,useJ7Storage));
ss.putUpdate(getReport(100,200,300,12348,useJ7Storage));
ss.putUpdate(getReport(100,200,300,12349,useJ7Storage));
long[] expTSWid300=new long[]{12346,12347,12348,12349};
long[] actTSWid300=ss.getAllUpdateTimes("sid100","tid200","wid300");
assertArrayEquals(expTSWid300,actTSWid300);
List<Persistable> subset=ss.getUpdates("sid100","tid200","wid300",new long[]{12346,12349});
assertEquals(2,subset.size());
assertEquals(Arrays.asList(getReport(100,200,300,12346,useJ7Storage),getReport(100,200,300,12349,useJ7Storage)),subset);
}
}
}
