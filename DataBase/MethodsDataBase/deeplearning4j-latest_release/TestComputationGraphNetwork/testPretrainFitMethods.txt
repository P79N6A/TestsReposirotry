@Test public void testPretrainFitMethods(){
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").layer("0",new VariationalAutoencoder.Builder().nIn(10).nOut(10).encoderLayerSizes(10).decoderLayerSizes(10).build(),"in").layer("1",new OutputLayer.Builder().nIn(10).nOut(10).activation(Activation.SOFTMAX).build(),"0").setOutputs("1").pretrain(true).build();
  ComputationGraph net=new ComputationGraph(conf);
  net.init();
  Set<Class<?>> exp=new HashSet<>();
  exp.add(ComputationGraph.class);
  MultiLayerTest.CheckModelsListener listener=new MultiLayerTest.CheckModelsListener();
  net.setListeners(listener);
  INDArray f=Nd4j.create(1,10);
  INDArray l=Nd4j.create(1,10);
  DataSet ds=new DataSet(f,l);
  MultiDataSet mds=new org.nd4j.linalg.dataset.MultiDataSet(f,l);
  DataSetIterator iter=new ExistingDataSetIterator(Collections.singletonList(ds));
  net.fit(ds);
  assertEquals(exp,listener.getModelClasses());
  net.fit(iter);
  assertEquals(exp,listener.getModelClasses());
  net.fit(new INDArray[]{f},new INDArray[]{l});
  assertEquals(exp,listener.getModelClasses());
  net.fit(new INDArray[]{f},new INDArray[]{l},null,null);
  assertEquals(exp,listener.getModelClasses());
  net.fit(mds);
  assertEquals(exp,listener.getModelClasses());
  net.fit(new SingletonMultiDataSetIterator(mds));
  assertEquals(exp,listener.getModelClasses());
}
