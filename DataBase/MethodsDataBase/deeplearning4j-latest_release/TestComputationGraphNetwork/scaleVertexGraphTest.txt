@Test public void scaleVertexGraphTest(){
  final double scaleFactor=2;
  final double[] inputArr=new double[]{-2,-1,0,1,2};
  final double[] expected=new double[inputArr.length];
  for (int i=0; i < expected.length; i++) {
    expected[i]=inputArr[i] * scaleFactor;
  }
  final INDArray input=getInputArray4d(inputArr);
  final String inputName="input";
  final String outputName="output";
  final String scaleName="scale";
  final ComputationGraph graph=new ComputationGraph(new NeuralNetConfiguration.Builder().graphBuilder().addInputs(inputName).setOutputs(outputName).setInputTypes(InputType.inferInputType(input)).addVertex(scaleName,new ScaleVertex(scaleFactor),inputName).addLayer(outputName,new OutputLayer.Builder().activation(new ActivationIdentity()).lossFunction(LossFunctions.LossFunction.MSE).nOut(input.length()).biasInit(0).build(),scaleName).build());
  graph.init();
  graph.getOutputLayer(0).setParam("W",Nd4j.eye(input.length()));
  graph.getOutputLayer(0).setParam("b",Nd4j.zeros(input.length()));
  assertEquals("Incorrect output",Nd4j.create(expected),graph.outputSingle(input));
}
