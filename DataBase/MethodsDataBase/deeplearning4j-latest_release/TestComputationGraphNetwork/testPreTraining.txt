@Test public void testPreTraining(){
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new Sgd(1e-6)).l2(2e-4).graphBuilder().addInputs("in").addLayer("layer0",new VariationalAutoencoder.Builder().nIn(4).nOut(3).weightInit(WeightInit.DISTRIBUTION).dist(new UniformDistribution(0,1)).activation(Activation.TANH).lossFunction(LossFunctions.LossFunction.KL_DIVERGENCE).build(),"in").addLayer("layer1",new VariationalAutoencoder.Builder().nIn(4).nOut(3).weightInit(WeightInit.DISTRIBUTION).dist(new UniformDistribution(0,1)).activation(Activation.TANH).lossFunction(LossFunctions.LossFunction.KL_DIVERGENCE).build(),"in").addLayer("layer2",new VariationalAutoencoder.Builder().nIn(3).nOut(3).weightInit(WeightInit.DISTRIBUTION).dist(new UniformDistribution(0,1)).activation(Activation.TANH).lossFunction(LossFunctions.LossFunction.KL_DIVERGENCE).build(),"layer1").addLayer("out",new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(3 + 3).nOut(3).weightInit(WeightInit.DISTRIBUTION).dist(new UniformDistribution(0,1)).activation(Activation.SOFTMAX).build(),"layer0","layer2").setOutputs("out").pretrain(true).backprop(false).build();
  ComputationGraph net=new ComputationGraph(conf);
  net.init();
  net.setListeners(new ScoreIterationListener(1));
  DataSetIterator iter=new IrisDataSetIterator(10,150);
  net.pretrain(iter);
}
