@Test public void testLayerSize(){
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").layer("0",new ConvolutionLayer.Builder().kernelSize(2,2).nOut(6).build(),"in").layer("1",new SubsamplingLayer.Builder().kernelSize(2,2).build(),"0").layer("2",new DenseLayer.Builder().nOut(30).build(),"1").layer("3",new OutputLayer.Builder().nOut(13).activation(Activation.SOFTMAX).build(),"2").setOutputs("3").setInputTypes(InputType.convolutional(28,28,3)).build();
  ComputationGraph net=new ComputationGraph(conf);
  net.init();
  assertEquals(6,net.layerSize(0));
  assertEquals(0,net.layerSize(1));
  assertEquals(30,net.layerSize(2));
  assertEquals(13,net.layerSize(3));
  assertEquals(3,net.layerInputSize(0));
  assertEquals(0,net.layerInputSize(1));
  assertEquals(((FeedForwardLayer)net.getLayer(2).conf().getLayer()).getNIn(),net.layerInputSize(2));
  assertEquals(30,net.layerInputSize(3));
  assertEquals(6,net.layerSize("0"));
  assertEquals(0,net.layerSize("1"));
  assertEquals(30,net.layerSize("2"));
  assertEquals(13,net.layerSize("3"));
  assertEquals(3,net.layerInputSize("0"));
  assertEquals(0,net.layerInputSize("1"));
  assertEquals(((FeedForwardLayer)net.getLayer(2).conf().getLayer()).getNIn(),net.layerInputSize("2"));
  assertEquals(30,net.layerInputSize("3"));
}
