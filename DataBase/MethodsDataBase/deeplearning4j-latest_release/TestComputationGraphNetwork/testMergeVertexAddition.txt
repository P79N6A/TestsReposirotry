@Test public void testMergeVertexAddition(){
  NeuralNetConfiguration nnc=new NeuralNetConfiguration();
  nnc.setLayer(new DenseLayer.Builder().build());
  GraphVertex[] singleInputVertices=new GraphVertex[]{new L2NormalizeVertex(),new LayerVertex(nnc,null),new PoolHelperVertex(),new PreprocessorVertex(),new ReshapeVertex(new int[]{1,1}),new ScaleVertex(1.0),new ShiftVertex(1.0),new SubsetVertex(1,1),new UnstackVertex(0,2),new DuplicateToTimeSeriesVertex("in1"),new LastTimeStepVertex("in1")};
  for (  GraphVertex gv : singleInputVertices) {
    ComputationGraphConfiguration c=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in1","in2").addVertex("gv",gv,"in1","in2").setOutputs("gv").build();
    boolean foundMerge=false;
    for (    GraphVertex g : c.getVertices().values()) {
      if (g instanceof MergeVertex) {
        foundMerge=true;
        break;
      }
    }
    if (!foundMerge) {
      fail("Network did not add merge vertex for vertex " + gv.getClass());
    }
  }
}
