@Test public void testFeedForwardIncludeNonLayerVertices(){
  ComputationGraphConfiguration c=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").addLayer("0",new DenseLayer.Builder().nIn(5).nOut(5).build(),"in").addLayer("1",new DenseLayer.Builder().nIn(5).nOut(5).build(),"in").addVertex("merge",new MergeVertex(),"0","1").addLayer("out",new OutputLayer.Builder().nIn(10).nOut(5).activation(Activation.SOFTMAX).build(),"merge").setOutputs("out").build();
  ComputationGraph cg=new ComputationGraph(c);
  cg.init();
  cg.setInputs(Nd4j.ones(5));
  Map<String,INDArray> layersOnly=cg.feedForward(true,false,false);
  Map<String,INDArray> alsoVertices=cg.feedForward(true,false,true);
  assertEquals(4,layersOnly.size());
  assertEquals(5,alsoVertices.size());
  assertFalse(layersOnly.containsKey("merge"));
  assertTrue(alsoVertices.containsKey("merge"));
}
