@Test public void testTopoSortSaving(){
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in1","in2").addLayer("l0",new DenseLayer.Builder().nIn(10).nOut(10).build(),"in1").addLayer("l1",new DenseLayer.Builder().nIn(20).nOut(10).build(),"in1","in2").addLayer("l2",new DenseLayer.Builder().nIn(10).nOut(10).build(),"in2").addLayer("l3",new DenseLayer.Builder().nIn(10).nOut(10).build(),"l0").addLayer("l4",new DenseLayer.Builder().nIn(10).nOut(10).build(),"l1").addLayer("l5",new DenseLayer.Builder().nIn(10).nOut(10).build(),"l2").addLayer("l6",new OutputLayer.Builder().nIn(20).nOut(10).activation(Activation.SOFTMAX).build(),"l3","l5").addLayer("l7",new OutputLayer.Builder().nIn(10).nOut(10).activation(Activation.SOFTMAX).build(),"l4").setOutputs("l6","l7").build();
  INDArray[] in=new INDArray[]{Nd4j.rand(3,10),Nd4j.rand(3,10)};
  ComputationGraph cg=new ComputationGraph(conf);
  cg.init();
  GraphIndices indices=cg.calculateIndices();
  int[] order=cg.topologicalSortOrder();
  List<String> strOrder=cg.getConfiguration().getTopologicalOrderStr();
  INDArray[] out1=cg.output(in);
  ComputationGraph cg2=TestUtils.testModelSerialization(cg);
  int[] order2=cg2.topologicalSortOrder();
  List<String> strOrder2=cg.getConfiguration().getTopologicalOrderStr();
  assertArrayEquals(order,order2);
  assertEquals(strOrder,strOrder2);
  INDArray[] out2=cg2.output(in);
  assertArrayEquals(out1,out2);
  ComputationGraphConfiguration conf3=cg2.getConfiguration().clone();
  conf3.setTopologicalOrder(null);
  conf3.setTopologicalOrderStr(null);
  ComputationGraph cg3=new ComputationGraph(conf3);
  cg3.init();
  cg3.setParams(cg2.params());
  int[] order3=cg3.topologicalSortOrder();
  List<String> strOrder3=cg.getConfiguration().getTopologicalOrderStr();
  INDArray[] out3=cg3.output(in);
  assertArrayEquals(order,order3);
  assertEquals(strOrder,strOrder3);
  assertArrayEquals(out1,out3);
  List<List<String>> someValidOrders=new ArrayList<>();
  someValidOrders.add(Arrays.asList("in1","in2","l0","l1-merge","l1","l2","l3","l4","l5","l6-merge","l6","l7"));
  someValidOrders.add(Arrays.asList("in1","in2","l1-merge","l1","l0","l2","l3","l4","l5","l6-merge","l6","l7"));
  someValidOrders.add(Arrays.asList("in1","in2","l2","l1-merge","l1","l0","l3","l4","l5","l6-merge","l6","l7"));
  someValidOrders.add(Arrays.asList("in1","in2","l2","l5","l0","l1-merge","l1","l3","l4","l7","l6-merge","l6"));
  for (  List<String> l : someValidOrders) {
    assertEquals(strOrder.size(),l.size());
  }
  for (int i=0; i < someValidOrders.size(); i++) {
    List<String> l=someValidOrders.get(i);
    int[] arr=new int[l.size()];
    int j=0;
    for (    String s : l) {
      arr[j++]=indices.getNameToIdx().get(s);
    }
    ComputationGraphConfiguration conf2=conf.clone();
    conf2.setTopologicalOrderStr(l);
    conf2.setTopologicalOrder(arr);
    ComputationGraph g=new ComputationGraph(conf2);
    g.init();
    g.setParamTable(cg.paramTable());
    int[] origOrder=g.topologicalSortOrder();
    INDArray[] out4=g.output(in);
    assertArrayEquals(out1,out4);
    ComputationGraph g2=TestUtils.testModelSerialization(g);
    int[] loadedOrder=g2.topologicalSortOrder();
    assertArrayEquals(origOrder,loadedOrder);
    INDArray[] out5=g2.output(in);
    assertArrayEquals(out1,out5);
  }
}
