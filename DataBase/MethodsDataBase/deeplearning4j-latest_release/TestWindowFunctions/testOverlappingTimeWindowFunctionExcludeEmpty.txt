@Test public void testOverlappingTimeWindowFunctionExcludeEmpty(){
  List<List<Writable>> sequence=new ArrayList<>();
  sequence.add(Arrays.asList((Writable)new LongWritable(0),new IntWritable(0)));
  sequence.add(Arrays.asList((Writable)new LongWritable(100),new IntWritable(1)));
  sequence.add(Arrays.asList((Writable)new LongWritable(200),new IntWritable(2)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1000),new IntWritable(3)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1500),new IntWritable(4)));
  sequence.add(Arrays.asList((Writable)new LongWritable(2000),new IntWritable(5)));
  sequence.add(Arrays.asList((Writable)new LongWritable(5000),new IntWritable(7)));
  Schema schema=new SequenceSchema.Builder().addColumnTime("timecolumn",DateTimeZone.UTC).addColumnInteger("intcolumn").build();
  WindowFunction wf2=new OverlappingTimeWindowFunction.Builder().timeColumn("timecolumn").windowSize(2,TimeUnit.SECONDS).windowSeparation(1,TimeUnit.SECONDS).excludeEmptyWindows(true).build();
  wf2.setInputSchema(schema);
  List<List<List<Writable>>> windowsAct=wf2.applyToSequence(sequence);
  List<List<Writable>> exp0=new ArrayList<>();
  exp0.add(Arrays.asList((Writable)new LongWritable(0),new IntWritable(0)));
  exp0.add(Arrays.asList((Writable)new LongWritable(100),new IntWritable(1)));
  exp0.add(Arrays.asList((Writable)new LongWritable(200),new IntWritable(2)));
  List<List<Writable>> exp1=new ArrayList<>();
  exp1.add(Arrays.asList((Writable)new LongWritable(0),new IntWritable(0)));
  exp1.add(Arrays.asList((Writable)new LongWritable(100),new IntWritable(1)));
  exp1.add(Arrays.asList((Writable)new LongWritable(200),new IntWritable(2)));
  exp1.add(Arrays.asList((Writable)new LongWritable(1000),new IntWritable(3)));
  exp1.add(Arrays.asList((Writable)new LongWritable(1500),new IntWritable(4)));
  List<List<Writable>> exp2=new ArrayList<>();
  exp2.add(Arrays.asList((Writable)new LongWritable(1000),new IntWritable(3)));
  exp2.add(Arrays.asList((Writable)new LongWritable(1500),new IntWritable(4)));
  exp2.add(Arrays.asList((Writable)new LongWritable(2000),new IntWritable(5)));
  List<List<Writable>> exp3=new ArrayList<>();
  exp3.add(Arrays.asList((Writable)new LongWritable(2000),new IntWritable(5)));
  List<List<Writable>> exp5=new ArrayList<>();
  exp5.add(Arrays.asList((Writable)new LongWritable(5000),new IntWritable(7)));
  List<List<Writable>> exp6=new ArrayList<>();
  exp6.add(Arrays.asList((Writable)new LongWritable(5000),new IntWritable(7)));
  List<List<List<Writable>>> windowsExp=Arrays.asList(exp0,exp1,exp2,exp3,exp5,exp6);
  assertEquals(6,windowsAct.size());
  for (int i=0; i < 6; i++) {
    List<List<Writable>> exp=windowsExp.get(i);
    List<List<Writable>> act=windowsAct.get(i);
    assertEquals(exp,act);
  }
}
