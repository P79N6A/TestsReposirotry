@Test public void testOverlappingTimeWindowFunctionSimple(){
  List<List<Writable>> sequence=new ArrayList<>();
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L),new IntWritable(0)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 100L),new IntWritable(1)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 200L),new IntWritable(2)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 1000L),new IntWritable(3)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 3000L),new IntWritable(4)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 3100L),new IntWritable(5)));
  Schema schema=new SequenceSchema.Builder().addColumnTime("timecolumn",DateTimeZone.UTC).addColumnInteger("intcolumn").build();
  WindowFunction wf=new TimeWindowFunction("timecolumn",1,TimeUnit.SECONDS);
  wf.setInputSchema(schema);
  WindowFunction wf2=new OverlappingTimeWindowFunction("timecolumn",1,TimeUnit.SECONDS,1,TimeUnit.SECONDS);
  wf2.setInputSchema(schema);
  List<List<List<Writable>>> windowsExp=wf.applyToSequence(sequence);
  List<List<List<Writable>>> windowsAct=wf2.applyToSequence(sequence);
  int[] expSizes={3,1,0,2};
  assertEquals(4,windowsExp.size());
  assertEquals(4,windowsAct.size());
  for (int i=0; i < 4; i++) {
    assertEquals(expSizes[i],windowsExp.get(i).size());
    assertEquals(expSizes[i],windowsAct.get(i).size());
    assertEquals(windowsExp.get(i),windowsAct.get(i));
  }
}
