@Test public void testTimeWindowFunctionExcludeEmpty(){
  List<List<Writable>> sequence=new ArrayList<>();
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L),new IntWritable(0)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 100L),new IntWritable(1)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 200L),new IntWritable(2)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 1000L),new IntWritable(3)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 3000L),new IntWritable(4)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 3100L),new IntWritable(5)));
  Schema schema=new SequenceSchema.Builder().addColumnTime("timecolumn",DateTimeZone.UTC).addColumnInteger("intcolumn").build();
  WindowFunction wf=new TimeWindowFunction.Builder().timeColumn("timecolumn").windowSize(1,TimeUnit.SECONDS).excludeEmptyWindows(true).build();
  wf.setInputSchema(schema);
  List<List<List<Writable>>> windows=wf.applyToSequence(sequence);
  assertEquals(3,windows.size());
  assertEquals(3,windows.get(0).size());
  assertEquals(1,windows.get(1).size());
  assertEquals(2,windows.get(2).size());
  List<List<Writable>> exp0=new ArrayList<>();
  exp0.add(sequence.get(0));
  exp0.add(sequence.get(1));
  exp0.add(sequence.get(2));
  assertEquals(exp0,windows.get(0));
  List<List<Writable>> exp1=new ArrayList<>();
  exp1.add(sequence.get(3));
  assertEquals(exp1,windows.get(1));
  List<List<Writable>> exp2=new ArrayList<>();
  exp2.add(sequence.get(4));
  exp2.add(sequence.get(5));
  assertEquals(exp2,windows.get(2));
}
