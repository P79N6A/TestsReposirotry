@Test public void testShuffleNd(){
  int numDims=7;
  int nLabels=3;
  Random r=new Random();
  int[] shape=new int[numDims];
  int entries=1;
  for (int i=0; i < numDims; i++) {
    shape[i]=r.nextInt(4) + 2;
    entries*=shape[i];
  }
  int labels=shape[0] * nLabels;
  INDArray ds_data=Nd4j.linspace(1,entries,entries).reshape(shape);
  INDArray ds_labels=Nd4j.linspace(1,labels,labels).reshape(shape[0],nLabels);
  DataSet ds=new DataSet(ds_data,ds_labels);
  ds.shuffle();
  for (int dim=1; dim < numDims; dim++) {
    for (int tensorNum=0; tensorNum < ds_data.tensorssAlongDimension(dim); tensorNum++) {
      for (int i=0, j=1; j < shape[dim]; i++, j++) {
        int f_element=ds.getFeatures().tensorAlongDimension(tensorNum,dim).getInt(i);
        int f_next_element=ds.getFeatures().tensorAlongDimension(tensorNum,dim).getInt(j);
        int f_element_diff=f_next_element - f_element;
        assertTrue(f_element_diff == ds_data.stride(dim));
      }
    }
  }
  int dim=1;
  for (int tensorNum=0; tensorNum < ds_labels.tensorssAlongDimension(dim); tensorNum++) {
    for (int i=0, j=1; j < nLabels; i++, j++) {
      int l_element=ds.getLabels().tensorAlongDimension(tensorNum,dim).getInt(i);
      int l_next_element=ds.getLabels().tensorAlongDimension(tensorNum,dim).getInt(j);
      int l_element_diff=l_next_element - l_element;
      assertTrue(l_element_diff == ds_labels.stride(dim));
    }
  }
}
