@Test public void testTimeSeriesMergeWithMasking(){
  int numExamples=10;
  int inSize=13;
  int labelSize=5;
  int minTSLength=10;
  Random r=new Random(12345);
  Nd4j.getRandom().setSeed(12345);
  List<DataSet> list=new ArrayList<>(numExamples);
  for (int i=0; i < numExamples; i++) {
    INDArray in=Nd4j.rand(new long[]{1,inSize,minTSLength + i});
    INDArray out=Nd4j.rand(new long[]{1,labelSize,minTSLength + i});
    INDArray inMask=Nd4j.create(1,minTSLength + i);
    INDArray outMask=Nd4j.create(1,minTSLength + i);
    for (int j=0; j < inMask.size(1); j++) {
      inMask.putScalar(j,(r.nextBoolean() ? 1.0 : 0.0));
      outMask.putScalar(j,(r.nextBoolean() ? 1.0 : 0.0));
    }
    list.add(new DataSet(in,out,inMask,outMask));
  }
  DataSet merged=DataSet.merge(list);
  assertEquals(numExamples,merged.numExamples());
  INDArray f=merged.getFeatures();
  INDArray l=merged.getLabels();
  int expectedLength=minTSLength + numExamples - 1;
  assertArrayEquals(new long[]{numExamples,inSize,expectedLength},f.shape());
  assertArrayEquals(new long[]{numExamples,labelSize,expectedLength},l.shape());
  assertTrue(merged.hasMaskArrays());
  assertNotNull(merged.getFeaturesMaskArray());
  assertNotNull(merged.getLabelsMaskArray());
  INDArray featuresMask=merged.getFeaturesMaskArray();
  INDArray labelsMask=merged.getLabelsMaskArray();
  assertArrayEquals(new long[]{numExamples,expectedLength},featuresMask.shape());
  assertArrayEquals(new long[]{numExamples,expectedLength},labelsMask.shape());
  for (int i=0; i < numExamples; i++) {
    DataSet original=list.get(i);
    INDArray expIn=original.getFeatures();
    INDArray expL=original.getLabels();
    INDArray origMaskF=original.getFeaturesMaskArray();
    INDArray origMaskL=original.getLabelsMaskArray();
    int thisRowOriginalLength=minTSLength + i;
    INDArray fSubset=f.get(interval(i,i + 1),all(),all());
    INDArray lSubset=l.get(interval(i,i + 1),all(),all());
    for (int j=0; j < inSize; j++) {
      for (int k=0; k < thisRowOriginalLength; k++) {
        double expected=expIn.getDouble(0,j,k);
        double act=fSubset.getDouble(0,j,k);
        if (Math.abs(expected - act) > 1e-3) {
          System.out.println(expIn);
          System.out.println(fSubset);
        }
        assertEquals(expected,act,1e-3f);
      }
      for (int k=thisRowOriginalLength; k < expectedLength; k++) {
        assertEquals(0.0,fSubset.getDouble(0,j,k),0.0);
      }
    }
    for (int j=0; j < labelSize; j++) {
      for (int k=0; k < thisRowOriginalLength; k++) {
        double expected=expL.getDouble(0,j,k);
        double act=lSubset.getDouble(0,j,k);
        assertEquals(expected,act,1e-3f);
      }
      for (int k=thisRowOriginalLength; k < expectedLength; k++) {
        assertEquals(0.0,lSubset.getDouble(0,j,k),0.0);
      }
    }
    for (int j=0; j < expectedLength; j++) {
      double expectedF;
      double expectedL;
      if (j >= thisRowOriginalLength) {
        expectedF=0.0;
        expectedL=0.0;
      }
 else {
        expectedF=origMaskF.getDouble(j);
        expectedL=origMaskL.getDouble(j);
      }
      double actFMask=featuresMask.getDouble(i,j);
      double actLMask=labelsMask.getDouble(i,j);
      assertEquals(expectedF,actFMask,0.0);
      assertEquals(expectedL,actLMask,0.0);
    }
  }
}
