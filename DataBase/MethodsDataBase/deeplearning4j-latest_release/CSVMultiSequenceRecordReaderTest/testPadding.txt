@Test public void testPadding() throws Exception {
  for (int i=0; i < 3; i++) {
    String seqSep;
    String seqSepRegex;
switch (i) {
case 0:
      seqSep="";
    seqSepRegex="^$";
  break;
case 1:
seqSep="---";
seqSepRegex=seqSep;
break;
case 2:
seqSep="&";
seqSepRegex=seqSep;
break;
default :
throw new RuntimeException();
}
String str="a,b\n1\nx\n" + seqSep + "\nA\nB\nC";
File f=testDir.newFile();
FileUtils.writeStringToFile(f,str);
SequenceRecordReader seqRR=new CSVMultiSequenceRecordReader(seqSepRegex,CSVMultiSequenceRecordReader.Mode.PAD,new Text("PAD"));
seqRR.initialize(new FileSplit(f));
List<List<Writable>> exp0=Arrays.asList(Arrays.<Writable>asList(new Text("a"),new Text("1"),new Text("x")),Arrays.<Writable>asList(new Text("b"),new Text("PAD"),new Text("PAD")));
List<List<Writable>> exp1=Collections.singletonList(Arrays.<Writable>asList(new Text("A"),new Text("B"),new Text("C")));
assertEquals(exp0,seqRR.sequenceRecord());
assertEquals(exp1,seqRR.sequenceRecord());
assertFalse(seqRR.hasNext());
seqRR.reset();
assertEquals(exp0,seqRR.sequenceRecord());
assertEquals(exp1,seqRR.sequenceRecord());
assertFalse(seqRR.hasNext());
}
}
