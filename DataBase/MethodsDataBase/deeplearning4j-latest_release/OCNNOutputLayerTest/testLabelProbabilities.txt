@Test public void testLabelProbabilities() throws Exception {
  Nd4j.getRandom().setSeed(42);
  DataSetIterator dataSetIterator=getNormalizedIterator();
  MultiLayerNetwork network=getSingleLayer();
  DataSet next=dataSetIterator.next();
  DataSet filtered=next.filterBy(new int[]{0,1});
  for (int i=0; i < 4; i++) {
    network.setEpochCount(i);
    network.getLayerWiseConfigurations().setEpochCount(i);
    network.fit(filtered);
  }
  DataSet anomalies=next.filterBy(new int[]{2});
  INDArray output=network.labelProbabilities(anomalies.getFeatures());
  INDArray normalOutput=network.output(anomalies.getFeatures(),false);
  assertEquals(output.lt(0.0).sumNumber().doubleValue(),normalOutput.eq(0.0).sumNumber().doubleValue(),1e-1);
  System.out.println("Labels " + anomalies.getLabels());
  System.out.println("Anomaly output " + normalOutput);
  System.out.println(output);
  INDArray normalProbs=network.labelProbabilities(filtered.getFeatures());
  INDArray outputForNormalSamples=network.output(filtered.getFeatures(),false);
  System.out.println("Normal probabilities " + normalProbs);
  System.out.println("Normal raw output " + outputForNormalSamples);
  File tmpFile=new File(testDir.getRoot(),"tmp-file-" + UUID.randomUUID().toString());
  ModelSerializer.writeModel(network,tmpFile,true);
  tmpFile.deleteOnExit();
  MultiLayerNetwork multiLayerNetwork=ModelSerializer.restoreMultiLayerNetwork(tmpFile);
  assertEquals(network.params(),multiLayerNetwork.params());
  assertEquals(network.numParams(),multiLayerNetwork.numParams());
}
