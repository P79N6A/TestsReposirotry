@Test public void testLfwModel() throws Exception {
  final int numRows=28;
  final int numColumns=28;
  int numChannels=3;
  int outputNum=LFWLoader.NUM_LABELS;
  int numSamples=LFWLoader.NUM_IMAGES;
  int batchSize=2;
  int seed=123;
  int listenerFreq=1;
  LFWDataSetIterator lfw=new LFWDataSetIterator(batchSize,numSamples,new int[]{numRows,numColumns,numChannels},outputNum,false,true,1.0,new Random(seed));
  MultiLayerConfiguration.Builder builder=new NeuralNetConfiguration.Builder().seed(seed).gradientNormalization(GradientNormalization.RenormalizeL2PerLayer).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).list().layer(0,new ConvolutionLayer.Builder(5,5).nIn(numChannels).nOut(6).weightInit(WeightInit.XAVIER).activation(Activation.RELU).build()).layer(1,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX,new int[]{2,2}).stride(1,1).build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nOut(outputNum).weightInit(WeightInit.XAVIER).activation(Activation.SOFTMAX).build()).setInputType(InputType.convolutionalFlat(numRows,numColumns,numChannels));
  MultiLayerNetwork model=new MultiLayerNetwork(builder.build());
  model.init();
  model.setListeners(new ScoreIterationListener(listenerFreq));
  model.fit(lfw.next());
  DataSet dataTest=lfw.next();
  INDArray output=model.output(dataTest.getFeatures());
  Evaluation eval=new Evaluation(outputNum);
  eval.eval(dataTest.getLabels(),output);
  System.out.println(eval.stats());
}
