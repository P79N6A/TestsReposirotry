@Test public void yoloGradientCheckRealData() throws Exception {
  InputStream is1=new ClassPathResource("yolo/VOC_TwoImage/JPEGImages/2007_009346.jpg").getInputStream();
  InputStream is2=new ClassPathResource("yolo/VOC_TwoImage/Annotations/2007_009346.xml").getInputStream();
  InputStream is3=new ClassPathResource("yolo/VOC_TwoImage/JPEGImages/2008_003344.jpg").getInputStream();
  InputStream is4=new ClassPathResource("yolo/VOC_TwoImage/Annotations/2008_003344.xml").getInputStream();
  File dir=testDir.newFolder("testYoloOverfitting");
  File jpg=new File(dir,"JPEGImages");
  File annot=new File(dir,"Annotations");
  jpg.mkdirs();
  annot.mkdirs();
  File imgOut=new File(jpg,"2007_009346.jpg");
  File annotationOut=new File(annot,"2007_009346.xml");
  try (FileOutputStream fos=new FileOutputStream(imgOut)){
    IOUtils.copy(is1,fos);
  }
  finally {
    is1.close();
  }
  try (FileOutputStream fos=new FileOutputStream(annotationOut)){
    IOUtils.copy(is2,fos);
  }
  finally {
    is2.close();
  }
  imgOut=new File(jpg,"2008_003344.jpg");
  annotationOut=new File(annot,"2008_003344.xml");
  try (FileOutputStream fos=new FileOutputStream(imgOut)){
    IOUtils.copy(is3,fos);
  }
  finally {
    is3.close();
  }
  try (FileOutputStream fos=new FileOutputStream(annotationOut)){
    IOUtils.copy(is4,fos);
  }
  finally {
    is4.close();
  }
  INDArray bbPriors=Nd4j.create(new double[][]{{3,3},{3,5},{5,7}});
  VocLabelProvider lp=new VocLabelProvider(dir.getPath());
  int h=26;
  int w=26;
  int c=3;
  RecordReader rr=new ObjectDetectionRecordReader(h,w,c,13,13,lp);
  rr.initialize(new FileSplit(jpg));
  int nClasses=rr.getLabels().size();
  long depthOut=bbPriors.size(0) * (5 + nClasses);
  DataSetIterator iter=new RecordReaderDataSetIterator(rr,2,1,1,true);
  iter.setPreProcessor(new ImagePreProcessingScaler());
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().convolutionMode(ConvolutionMode.Same).updater(new NoOp()).weightInit(WeightInit.DISTRIBUTION).dist(new GaussianDistribution(0,0.1)).list().layer(new ConvolutionLayer.Builder().kernelSize(3,3).stride(1,1).nOut(4).build()).layer(new SubsamplingLayer.Builder().kernelSize(2,2).stride(2,2).build()).layer(new ConvolutionLayer.Builder().activation(Activation.IDENTITY).kernelSize(3,3).stride(1,1).nOut(depthOut).build()).layer(new Yolo2OutputLayer.Builder().boundingBoxPriors(bbPriors).build()).setInputType(InputType.convolutional(h,w,c)).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  DataSet ds=iter.next();
  INDArray f=ds.getFeatures();
  INDArray l=ds.getLabels();
  boolean ok=GradientCheckUtil.checkGradients(net,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,f,l);
  assertTrue(ok);
  TestUtils.testModelSerialization(net);
}
