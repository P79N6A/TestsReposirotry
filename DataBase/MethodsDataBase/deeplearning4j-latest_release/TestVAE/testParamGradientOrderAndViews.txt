@Test public void testParamGradientOrderAndViews(){
  Nd4j.getRandom().setSeed(12345);
  MultiLayerConfiguration mlc=new NeuralNetConfiguration.Builder().list().layer(0,new org.deeplearning4j.nn.conf.layers.variational.VariationalAutoencoder.Builder().nIn(10).nOut(5).encoderLayerSizes(12,13).decoderLayerSizes(14,15).build()).build();
  NeuralNetConfiguration c=mlc.getConf(0);
  org.deeplearning4j.nn.conf.layers.variational.VariationalAutoencoder vae=(org.deeplearning4j.nn.conf.layers.variational.VariationalAutoencoder)c.getLayer();
  MultiLayerNetwork net=new MultiLayerNetwork(mlc);
  net.init();
  net.initGradientsView();
  org.deeplearning4j.nn.layers.variational.VariationalAutoencoder layer=(org.deeplearning4j.nn.layers.variational.VariationalAutoencoder)net.getLayer(0);
  Map<String,INDArray> layerParams=layer.paramTable();
  Map<String,INDArray> layerGradViews=layer.getGradientViews();
  layer.setInput(Nd4j.rand(3,10),LayerWorkspaceMgr.noWorkspaces());
  layer.computeGradientAndScore(LayerWorkspaceMgr.noWorkspaces());
  Gradient g=layer.gradient();
  Map<String,INDArray> grads=g.gradientForVariable();
  assertEquals(layerParams.size(),layerGradViews.size());
  assertEquals(layerParams.size(),grads.size());
  Iterator<String> pIter=layerParams.keySet().iterator();
  Iterator<String> gvIter=layerGradViews.keySet().iterator();
  Iterator<String> gIter=grads.keySet().iterator();
  while (pIter.hasNext()) {
    String p=pIter.next();
    String gv=gvIter.next();
    String gr=gIter.next();
    assertEquals(p,gv);
    assertEquals(p,gr);
    INDArray pArr=layerParams.get(p);
    INDArray gvArr=layerGradViews.get(p);
    INDArray gArr=grads.get(p);
    assertArrayEquals(pArr.shape(),gvArr.shape());
    assertTrue(gvArr == gArr);
  }
}
