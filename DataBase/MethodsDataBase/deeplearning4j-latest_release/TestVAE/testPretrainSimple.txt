@Test public void testPretrainSimple(){
  int inputSize=3;
  MultiLayerConfiguration mlc=new NeuralNetConfiguration.Builder().list().layer(0,new org.deeplearning4j.nn.conf.layers.variational.VariationalAutoencoder.Builder().nIn(inputSize).nOut(4).encoderLayerSizes(5).decoderLayerSizes(6).build()).pretrain(true).backprop(false).build();
  NeuralNetConfiguration c=mlc.getConf(0);
  org.deeplearning4j.nn.conf.layers.variational.VariationalAutoencoder vae=(org.deeplearning4j.nn.conf.layers.variational.VariationalAutoencoder)c.getLayer();
  long allParams=vae.initializer().numParams(c);
  MultiLayerNetwork net=new MultiLayerNetwork(mlc);
  net.init();
  net.initGradientsView();
  Map<String,INDArray> paramTable=net.getLayer(0).paramTable();
  Map<String,INDArray> gradTable=((org.deeplearning4j.nn.layers.variational.VariationalAutoencoder)net.getLayer(0)).getGradientViews();
  assertEquals(paramTable.keySet(),gradTable.keySet());
  for (  String s : paramTable.keySet()) {
    assertEquals(paramTable.get(s).length(),gradTable.get(s).length());
    assertArrayEquals(paramTable.get(s).shape(),gradTable.get(s).shape());
  }
  System.out.println("Num params: " + net.numParams());
  INDArray data=Nd4j.rand(1,inputSize);
  net.pretrainLayer(0,data);
}
