@Test public void testLegacyOpsMapping(){
  Nd4j.create(1);
  val str=NativeOpsHolder.getInstance().getDeviceNativeOps().getAllOperations().replaceAll("simdOps::","").replaceAll("randomOps::","");
  val missing=new ArrayList<String>();
  val groups=str.split(">>");
  for (  val group : groups) {
    val line=group.split(" ");
    val bt=Integer.valueOf(line[0]).byteValue();
    val ops=line[1].split("<<");
    val type=FlatBuffersMapper.getTypeFromByte(bt);
    val list=getOperations(type);
    for (    val op : ops) {
      val args=op.split(":");
      val hash=Long.valueOf(args[0]).longValue();
      val opNum=Long.valueOf(args[1]).longValue();
      val name=args[2];
      val needle=new Operation(type == Op.Type.CUSTOM ? -1 : opNum,name.toLowerCase());
      if (!opMapped(list,needle))       missing.add(type.toString() + " " + name);
    }
  }
  if (missing.size() > 0) {
    log.info("{} ops missing!",missing.size());
    log.info("{}",missing);
  }
}
