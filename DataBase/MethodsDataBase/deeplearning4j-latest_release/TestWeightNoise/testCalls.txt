@Test public void testCalls(){
  List<DataSet> trainData=new ArrayList<>();
  trainData.add(new DataSet(Nd4j.rand(5,10),Nd4j.rand(5,10)));
  trainData.add(new DataSet(Nd4j.rand(5,10),Nd4j.rand(5,10)));
  trainData.add(new DataSet(Nd4j.rand(5,10),Nd4j.rand(5,10)));
  List<List<WeightNoiseCall>> expCalls=new ArrayList<>();
  for (int i=0; i < 3; i++) {
    List<WeightNoiseCall> expCallsForLayer=new ArrayList<>();
    expCallsForLayer.add(new WeightNoiseCall(i,"W",0,0,true));
    expCallsForLayer.add(new WeightNoiseCall(i,"b",0,0,true));
    expCallsForLayer.add(new WeightNoiseCall(i,"W",1,0,true));
    expCallsForLayer.add(new WeightNoiseCall(i,"b",1,0,true));
    expCallsForLayer.add(new WeightNoiseCall(i,"W",2,0,true));
    expCallsForLayer.add(new WeightNoiseCall(i,"b",2,0,true));
    expCallsForLayer.add(new WeightNoiseCall(i,"W",3,1,true));
    expCallsForLayer.add(new WeightNoiseCall(i,"b",3,1,true));
    expCallsForLayer.add(new WeightNoiseCall(i,"W",4,1,true));
    expCallsForLayer.add(new WeightNoiseCall(i,"b",4,1,true));
    expCallsForLayer.add(new WeightNoiseCall(i,"W",5,1,true));
    expCallsForLayer.add(new WeightNoiseCall(i,"b",5,1,true));
    expCallsForLayer.add(new WeightNoiseCall(i,"W",6,2,false));
    expCallsForLayer.add(new WeightNoiseCall(i,"b",6,2,false));
    expCalls.add(expCallsForLayer);
  }
  CustomWeightNoise wn1=new CustomWeightNoise();
  CustomWeightNoise wn2=new CustomWeightNoise();
  CustomWeightNoise wn3=new CustomWeightNoise();
  List<CustomWeightNoise> list=Arrays.asList(wn1,wn2,wn3);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().list().layer(new DenseLayer.Builder().nIn(10).nOut(10).weightNoise(wn1).build()).layer(new DenseLayer.Builder().nIn(10).nOut(10).weightNoise(wn2).build()).layer(new OutputLayer.Builder().nIn(10).nOut(10).activation(Activation.SOFTMAX).weightNoise(wn3).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  net.fit(new ExistingDataSetIterator(trainData.iterator()));
  net.fit(new ExistingDataSetIterator(trainData.iterator()));
  net.output(trainData.get(0).getFeatures());
  for (int i=0; i < 3; i++) {
    assertEquals(expCalls.get(i),list.get(i).getAllCalls());
  }
  wn1=new CustomWeightNoise();
  wn2=new CustomWeightNoise();
  wn3=new CustomWeightNoise();
  list=Arrays.asList(wn1,wn2,wn3);
  ComputationGraphConfiguration conf2=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").layer("0",new DenseLayer.Builder().nIn(10).nOut(10).weightNoise(wn1).build(),"in").layer("1",new DenseLayer.Builder().nIn(10).nOut(10).weightNoise(wn2).build(),"0").layer("2",new OutputLayer.Builder().nIn(10).nOut(10).activation(Activation.SOFTMAX).weightNoise(wn3).build(),"1").setOutputs("2").build();
  ComputationGraph graph=new ComputationGraph(conf2);
  graph.init();
  int[] layerIdxs=new int[]{graph.getLayer(0).getIndex(),graph.getLayer(1).getIndex(),graph.getLayer(2).getIndex()};
  expCalls.clear();
  for (int i=0; i < 3; i++) {
    List<WeightNoiseCall> expCallsForLayer=new ArrayList<>();
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"W",0,0,true));
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"b",0,0,true));
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"W",1,0,true));
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"b",1,0,true));
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"W",2,0,true));
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"b",2,0,true));
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"W",3,1,true));
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"b",3,1,true));
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"W",4,1,true));
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"b",4,1,true));
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"W",5,1,true));
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"b",5,1,true));
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"W",6,2,false));
    expCallsForLayer.add(new WeightNoiseCall(layerIdxs[i],"b",6,2,false));
    expCalls.add(expCallsForLayer);
  }
  graph.fit(new ExistingDataSetIterator(trainData.iterator()));
  graph.fit(new ExistingDataSetIterator(trainData.iterator()));
  graph.output(trainData.get(0).getFeatures());
  for (int i=0; i < 3; i++) {
    assertEquals(String.valueOf(i),expCalls.get(i),list.get(i).getAllCalls());
  }
}
