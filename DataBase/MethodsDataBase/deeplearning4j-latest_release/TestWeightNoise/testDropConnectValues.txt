@Test public void testDropConnectValues(){
  Nd4j.getRandom().setSeed(12345);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().weightInit(WeightInit.ONES).list().layer(new OutputLayer.Builder().nIn(10).nOut(10).activation(Activation.SOFTMAX).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  Layer l=net.getLayer(0);
  DropConnect d=new DropConnect(0.5);
  INDArray outTest=d.getParameter(l,"W",0,0,false,LayerWorkspaceMgr.noWorkspaces());
  assertTrue(l.getParam("W") == outTest);
  INDArray outTrain=d.getParameter(l,"W",0,0,true,LayerWorkspaceMgr.noWorkspaces());
  assertNotEquals(l.getParam("W"),outTrain);
  assertEquals(l.getParam("W"),Nd4j.ones(10,10));
  int countZeros=Nd4j.getExecutioner().exec(new MatchCondition(outTrain,Conditions.equals(0))).z().getInt(0);
  int countOnes=Nd4j.getExecutioner().exec(new MatchCondition(outTrain,Conditions.equals(1))).z().getInt(0);
  assertEquals(100,countZeros + countOnes);
  assertTrue(countZeros >= 25 && countZeros <= 75);
  assertTrue(countOnes >= 25 && countOnes <= 75);
}
