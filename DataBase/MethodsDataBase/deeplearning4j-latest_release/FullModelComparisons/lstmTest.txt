@Test public void lstmTest() throws IOException, UnsupportedKerasConfigurationException, InvalidKerasConfigurationException, InterruptedException {
  String modelPath="modelimport/keras/fullconfigs/lstm/lstm_th_keras_2_config.json";
  String weightsPath="modelimport/keras/fullconfigs/lstm/lstm_th_keras_2_weights.h5";
  ClassPathResource modelResource=new ClassPathResource(modelPath,classLoader);
  ClassPathResource weightsResource=new ClassPathResource(weightsPath,classLoader);
  KerasSequentialModel kerasModel=new KerasModel().modelBuilder().modelJsonInputStream(modelResource.getInputStream()).weightsHdf5FilenameNoRoot(weightsResource.getFile().getAbsolutePath()).enforceTrainingConfig(false).buildSequential();
  MultiLayerNetwork model=kerasModel.getMultiLayerNetwork();
  model.init();
  System.out.println(model.summary());
  LSTM firstLstm=(LSTM)model.getLayer(0);
  org.deeplearning4j.nn.conf.layers.LSTM firstConf=(org.deeplearning4j.nn.conf.layers.LSTM)firstLstm.conf().getLayer();
  assertTrue(firstConf.getForgetGateBiasInit() == 1.0);
  assertTrue(firstConf.getGateActivationFn() instanceof ActivationHardSigmoid);
  assertTrue(firstConf.getActivationFn() instanceof ActivationTanH);
  int nIn=12;
  int nOut=96;
  INDArray W=firstLstm.getParam("W");
  assertTrue(Arrays.equals(W.shape(),new long[]{nIn,4 * nOut}));
  TestCase.assertEquals(W.getDouble(0,288),-0.30737767,1e-7);
  TestCase.assertEquals(W.getDouble(0,289),-0.5845409,1e-7);
  TestCase.assertEquals(W.getDouble(1,288),-0.44083247,1e-7);
  TestCase.assertEquals(W.getDouble(11,288),0.017539706,1e-7);
  TestCase.assertEquals(W.getDouble(0,96),0.2707935,1e-7);
  TestCase.assertEquals(W.getDouble(0,192),-0.19856165,1e-7);
  TestCase.assertEquals(W.getDouble(0,0),0.15368782,1e-7);
  INDArray RW=firstLstm.getParam("RW");
  assertTrue(Arrays.equals(RW.shape(),new long[]{nOut,4 * nOut}));
  TestCase.assertEquals(RW.getDouble(0,288),0.15112677,1e-7);
  INDArray b=firstLstm.getParam("b");
  assertTrue(Arrays.equals(b.shape(),new long[]{1,4 * nOut}));
  TestCase.assertEquals(b.getDouble(0,288),-0.36940336,1e-7);
  TestCase.assertEquals(b.getDouble(0,96),0.6031118,1e-7);
  TestCase.assertEquals(b.getDouble(0,192),-0.13569744,1e-7);
  TestCase.assertEquals(b.getDouble(0,0),-0.2587392,1e-7);
  LSTM secondLstm=(LSTM)((LastTimeStepLayer)model.getLayer(1)).getUnderlying();
  org.deeplearning4j.nn.conf.layers.LSTM secondConf=(org.deeplearning4j.nn.conf.layers.LSTM)secondLstm.conf().getLayer();
  assertTrue(secondConf.getForgetGateBiasInit() == 1.0);
  assertTrue(firstConf.getGateActivationFn() instanceof ActivationHardSigmoid);
  assertTrue(firstConf.getActivationFn() instanceof ActivationTanH);
  nIn=96;
  nOut=96;
  W=secondLstm.getParam("W");
  assertTrue(Arrays.equals(W.shape(),new long[]{nIn,4 * nOut}));
  TestCase.assertEquals(W.getDouble(0,288),-0.7559755,1e-7);
  RW=secondLstm.getParam("RW");
  assertTrue(Arrays.equals(RW.shape(),new long[]{nOut,4 * nOut}));
  TestCase.assertEquals(RW.getDouble(0,288),-0.33184892,1e-7);
  b=secondLstm.getParam("b");
  assertTrue(Arrays.equals(b.shape(),new long[]{1,4 * nOut}));
  TestCase.assertEquals(b.getDouble(0,288),-0.2223678,1e-7);
  TestCase.assertEquals(b.getDouble(0,96),0.73556226,1e-7);
  TestCase.assertEquals(b.getDouble(0,192),-0.63227624,1e-7);
  TestCase.assertEquals(b.getDouble(0,0),0.06636357,1e-7);
  File dataDir=testDir.newFolder();
  SequenceRecordReader reader=new CSVSequenceRecordReader(0,";");
  new ClassPathResource("deeplearning4j-modelimport/data/",classLoader).copyDirectory(dataDir);
  reader.initialize(new NumberedFileInputSplit(dataDir.getAbsolutePath() + "/sequences/%d.csv",0,282));
  DataSetIterator dataSetIterator=new SequenceRecordReaderDataSetIterator(reader,1,-1,12,true);
  List<Double> preds=new LinkedList<>();
  while (dataSetIterator.hasNext()) {
    DataSet dataSet=dataSetIterator.next();
    INDArray sequence=dataSet.getFeatures().get(NDArrayIndex.point(0)).transpose();
    INDArray bsSequence=sequence.reshape(1,4,12);
    INDArray permuteSequence=bsSequence.permute(0,2,1);
    INDArray pred=model.output(permuteSequence);
    assertTrue(Arrays.equals(pred.shape(),new long[]{1,1}));
    preds.add(pred.getDouble(0,0));
  }
  INDArray dl4jPredictions=Nd4j.create(preds);
  ClassPathResource predResource=new ClassPathResource("modelimport/keras/fullconfigs/lstm/predictions.npy",classLoader);
  INDArray kerasPredictions=Nd4j.createFromNpyFile(predResource.getFile());
  for (int i=0; i < 283; i++) {
    TestCase.assertEquals(kerasPredictions.getDouble(i),dl4jPredictions.getDouble(i),1e-7);
  }
  INDArray ones=Nd4j.ones(1,12,4);
  INDArray predOnes=model.output(ones);
  TestCase.assertEquals(predOnes.getDouble(0,0),0.7216,1e-4);
}
