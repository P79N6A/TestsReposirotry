@Test public void testDelayedAllocation1() throws Exception {
  final AtomicAllocator allocator=AtomicAllocator.getInstance();
  final int limit=6;
  final INDArray[] arrays=new INDArray[limit];
  final Thread threads[]=new Thread[limit];
  final int cards[]=new int[limit];
  for (int c=0; c < arrays.length; c++) {
    arrays[c]=Nd4j.create(new float[]{1f,2f,3f,4f,5f});
    assertEquals(AllocationStatus.HOST,allocator.getAllocationPoint(arrays[c]).getAllocationStatus());
    assertEquals(AllocationStatus.HOST,allocator.getAllocationPoint(arrays[c].shapeInfoDataBuffer()).getAllocationStatus());
  }
  for (int c=0; c < arrays.length; c++) {
    final int cnt=c;
    threads[cnt]=new Thread(new Runnable(){
      @Override public void run(){
        float sum=arrays[cnt].sumNumber().floatValue();
        cards[cnt]=allocator.getDeviceId();
        assertEquals("Failed on C: " + cnt,15f,sum,0.001f);
      }
    }
);
    threads[cnt].start();
  }
  for (int c=0; c < arrays.length; c++) {
    threads[c].join();
  }
  for (int c=0; c < arrays.length; c++) {
    assertNotEquals(allocator.getAllocationPoint(arrays[c]).getPointers().getDevicePointer(),allocator.getAllocationPoint(arrays[c]).getPointers().getHostPointer());
    assertNotEquals(allocator.getAllocationPoint(arrays[c].shapeInfoDataBuffer()).getPointers().getDevicePointer(),allocator.getAllocationPoint(arrays[c].shapeInfoDataBuffer()).getPointers().getHostPointer());
  }
  int numDevices=Nd4j.getAffinityManager().getNumberOfDevices();
  for (int c=0; c < numDevices; c++) {
    assertTrue("Failed to find device [" + c + "] in used devices",ArrayUtils.contains(cards,c));
  }
}
