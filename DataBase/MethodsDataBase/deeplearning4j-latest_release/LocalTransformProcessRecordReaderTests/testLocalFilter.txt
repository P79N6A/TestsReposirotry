@Test public void testLocalFilter(){
  List<List<Writable>> in=new ArrayList<>();
  in.add(Arrays.asList(new Text("Keep"),new IntWritable(0)));
  in.add(Arrays.asList(new Text("Remove"),new IntWritable(1)));
  in.add(Arrays.asList(new Text("Keep"),new IntWritable(2)));
  in.add(Arrays.asList(new Text("Remove"),new IntWritable(3)));
  Schema s=new Schema.Builder().addColumnCategorical("cat","Keep","Remove").addColumnInteger("int").build();
  TransformProcess tp=new TransformProcess.Builder(s).filter(new CategoricalColumnCondition("cat",ConditionOp.Equal,"Remove")).build();
  RecordReader rr=new CollectionRecordReader(in);
  LocalTransformProcessRecordReader ltprr=new LocalTransformProcessRecordReader(rr,tp);
  List<List<Writable>> out=new ArrayList<>();
  while (ltprr.hasNext()) {
    out.add(ltprr.next());
  }
  List<List<Writable>> exp=Arrays.asList(in.get(0),in.get(2));
  assertEquals(exp,out);
  ltprr.reset();
  out.clear();
  while (ltprr.hasNext()) {
    out.add(ltprr.next());
  }
  assertEquals(exp,out);
  List<Record> rl=new ArrayList<>();
  rr.reset();
  while (rr.hasNext()) {
    rl.add(rr.nextRecord());
  }
  List<Record> exp2=Arrays.asList(rl.get(0),rl.get(2));
  List<Record> act=new ArrayList<>();
  ltprr.reset();
  while (ltprr.hasNext()) {
    act.add(ltprr.nextRecord());
  }
}
