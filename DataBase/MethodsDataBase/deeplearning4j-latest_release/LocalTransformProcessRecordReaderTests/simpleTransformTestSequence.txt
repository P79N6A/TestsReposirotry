@Test public void simpleTransformTestSequence(){
  List<List<Writable>> sequence=new ArrayList<>();
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L),new IntWritable(0),new IntWritable(0)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 100L),new IntWritable(1),new IntWritable(0)));
  sequence.add(Arrays.asList((Writable)new LongWritable(1451606400000L + 200L),new IntWritable(2),new IntWritable(0)));
  Schema schema=new SequenceSchema.Builder().addColumnTime("timecolumn",DateTimeZone.UTC).addColumnInteger("intcolumn").addColumnInteger("intcolumn2").build();
  TransformProcess transformProcess=new TransformProcess.Builder(schema).removeColumns("intcolumn2").build();
  InMemorySequenceRecordReader inMemorySequenceRecordReader=new InMemorySequenceRecordReader(Arrays.asList(sequence));
  LocalTransformProcessSequenceRecordReader transformProcessSequenceRecordReader=new LocalTransformProcessSequenceRecordReader(inMemorySequenceRecordReader,transformProcess);
  List<List<Writable>> next=transformProcessSequenceRecordReader.sequenceRecord();
  assertEquals(2,next.get(0).size());
}
