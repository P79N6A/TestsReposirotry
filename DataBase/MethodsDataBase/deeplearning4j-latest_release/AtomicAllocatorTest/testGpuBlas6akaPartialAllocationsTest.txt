@Test public void testGpuBlas6akaPartialAllocationsTest() throws Exception {
  assertEquals("JcublasLevel1",Nd4j.getBlasWrapper().level1().getClass().getSimpleName());
  Random rnd=new Random(42);
  int trackingBefore=allocator.getTotalTrackingPoints();
  int zeroBefore=(int)allocator.getMemoryHandler().getAllocatedHostObjects();
  INDArray array1=Nd4j.create(100,757);
  INDArray array2=Nd4j.create(100,757);
  for (int y=0; y < array1.rows(); y++) {
    float[] srcArray1=new float[757];
    float[] srcArray2=new float[757];
    for (int x=0; x < srcArray1.length; x++) {
      srcArray1[x]=rnd.nextFloat();
      srcArray2[x]=rnd.nextFloat();
    }
    INDArray arrayX=Nd4j.create(srcArray1);
    array1.putRow(y,arrayX);
    array2.putRow(y,Nd4j.create(srcArray2));
    INDArray slice1=array1.slice(y);
    assertEquals(arrayX.getDouble(3),slice1.getDouble(3),0.00001);
  }
  log.info("Original shape: " + AllocationUtils.buildAllocationShape(array1));
  INDArray slice1=array1.slice(10);
  INDArray slice2=array2.slice(10);
  INDArray slice3=slice1.slice(0);
  log.info("slice1 offset: " + slice1.offset());
  log.info("slice3 offset: " + slice3.offset());
  log.info("slice3 length: " + slice3.length());
  assertNotEquals(0,slice1.offset());
  assertEquals(null,array1.data().underlyingDataBuffer().underlyingDataBuffer());
  assertTrue(slice1.data().originalDataBuffer() == array1.data().originalDataBuffer());
  assertNotEquals(null,slice1.data().originalDataBuffer());
  assertTrue(slice2.data().underlyingDataBuffer() == array2.data());
  double results[]=new double[]{196.73057556152344,187.9628448486328,185.44927978515625,195.71868896484375,201.3914031982422,206.9940948486328,186.59426879882812,178.36427307128906,188.29483032226562,183.08912658691406,193.56333923339844,189.89263916015625,189.0192108154297,193.63824462890625,201.99197387695312,187.71295166015625,197.52166748046875,180.9663848876953,189.44374084472656,186.75148010253906};
  for (int x=0; x < 20; x++) {
    slice1=array1.slice(x);
    slice2=array2.slice(x);
    double dotWrapped=Nd4j.getBlasWrapper().dot(slice1,slice2);
    log.info("Offset: " + slice1.offset());
    assertEquals(results[x],dotWrapped,0.001d);
    log.info("Cycle [" + x + "] passed. Dot: "+ dotWrapped);
  }
  log.info("Slice shape: " + AllocationUtils.buildAllocationShape(slice1));
  AllocationPoint point=allocator.getAllocationPoint(array1.data().originalDataBuffer().getTrackingPoint());
  assertEquals(AllocationStatus.DEVICE,point.getAllocationStatus());
}
