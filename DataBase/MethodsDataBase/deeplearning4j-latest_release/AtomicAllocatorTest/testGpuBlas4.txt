@Test public void testGpuBlas4() throws Exception {
  INDArray array1=Nd4j.create(new float[]{1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f,1.01f});
  for (int i=0; i < 50000; i++) {
    BlasBufferUtil.getBlasStride(array1);
  }
  long time1=System.nanoTime();
  int count=50000;
  for (int i=0; i < count; i++) {
    BlasBufferUtil.getBlasStride(array1);
  }
  long time2=System.nanoTime();
  System.out.println("Average Execution time: [" + (time2 - time1) / count + "] ns");
}
