@Test public void testFunctionScalarResultPropagation(){
  SameDiff sameDiffOuter=SameDiff.create();
  Map<String,INDArray> inputs=variablesForInput();
  sameDiffOuter.defineFunction("logisticPredictions",new SameDiffFunctionDefinition(){
    @Override public SDVariable[] define(    SameDiff sameDiff,    Map<String,INDArray> inputs,    SDVariable[] variableInputs){
      SDVariable input=sameDiff.var("x",inputs.get("x"));
      SDVariable w=sameDiff.var("w",inputs.get("w"));
      SDVariable preOutput=sameDiff.mmul(input,w);
      SDVariable sigmoid=sameDiff.sigmoid(preOutput);
      return new SDVariable[]{sigmoid};
    }
  }
,inputs);
  sameDiffOuter.defineFunction("oneminuspredictions",new SameDiffFunctionDefinition(){
    @Override public SDVariable[] define(    SameDiff sameDiff,    Map<String,INDArray> inputs,    SDVariable[] variableInputs){
      SDVariable y=sameDiff.var("y",inputs.get("y"));
      SDVariable oneMinusPredictions=y.rsub(1.0);
      return new SDVariable[]{oneMinusPredictions};
    }
  }
,inputs);
  SameDiff logisticGraph=sameDiffOuter.getFunction("oneminuspredictions");
  INDArray[] outputs=logisticGraph.eval(inputs);
  INDArray assertion=Nd4j.create(new double[]{0,0,1,0});
  assertEquals(assertion,outputs[outputs.length - 1]);
}
