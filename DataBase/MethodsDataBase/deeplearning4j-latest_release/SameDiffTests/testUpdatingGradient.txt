@Test public void testUpdatingGradient(){
  Nd4j.getRandom().setSeed(12345);
  SameDiff sd=SameDiff.create();
  SDVariable in=sd.var("in",Nd4j.linspace(1,12,12).reshape(3,4));
  SDVariable w=sd.var("w",Nd4j.linspace(1,20,20).reshape(4,5));
  SDVariable out=sd.mmul(in,w);
  SDVariable loss=out.std("out",true);
  INDArray outArr=sd.execAndEndResult().dup();
  sd.execBackwards();
  Map<String,INDArray> origGrad=new HashMap<>();
  origGrad.put("in",in.gradient().getArr().dup());
  origGrad.put("w",w.gradient().getArr().dup());
  origGrad.put("out",out.gradient().getArr().dup());
  in.getArr().assign(Nd4j.rand(in.getArr().shape()));
  INDArray outArr2=sd.execAndEndResult();
  sd.execBackwards();
  assertNotEquals(outArr,outArr2);
  assertNotEquals(origGrad.get("in"),in.gradient().getArr());
  assertNotEquals(origGrad.get("w"),w.gradient().getArr());
  assertNotEquals(origGrad.get("out"),out.gradient().getArr());
}
