@Test public void testSqueezeDims(){
  val origShape=new long[]{3,4,5};
  for (int i=0; i < 3; i++) {
    val shape=origShape.clone();
    shape[i]=1;
    for (    Pair<INDArray,String> p : NDArrayCreationUtil.getAll3dTestArraysWithShape(12345,shape)) {
      INDArray inArr=p.getFirst().muli(100);
      SameDiff sd=SameDiff.create();
      SDVariable in=sd.var("in",inArr);
      SDVariable squeeze=sd.f().squeeze(in,i);
      INDArray out=sd.execAndEndResult();
      INDArray expOut;
switch (i) {
case 0:
        expOut=inArr.dup('c').reshape('c',origShape[1],origShape[2]);
      break;
case 1:
    expOut=inArr.dup('c').reshape('c',origShape[0],origShape[2]);
  break;
case 2:
expOut=inArr.dup('c').reshape('c',origShape[0],origShape[1]);
break;
default :
throw new RuntimeException();
}
String msg="squeezeDim=" + i + ", source="+ p.getSecond();
assertEquals(msg,out,expOut);
}
}
}
