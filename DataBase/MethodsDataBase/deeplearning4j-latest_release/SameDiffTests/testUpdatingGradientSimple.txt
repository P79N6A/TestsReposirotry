@Test public void testUpdatingGradientSimple() throws Exception {
  SameDiff sd=SameDiff.create();
  SDVariable in=sd.var("in",Nd4j.linspace(1,12,12).reshape(3,4));
  SDVariable out=in.mul(2.0);
  SDVariable loss=out.std("out",true);
  INDArray outArr=sd.execAndEndResult().dup();
  sd.execBackwards();
  SameDiff sdGrad=sd.getFunction("grad");
  Field f=SameDiff.class.getDeclaredField("variableNameToArr");
  f.setAccessible(true);
  Map<String,INDArray> before=(Map<String,INDArray>)f.get(sdGrad);
  for (  Map.Entry<String,INDArray> e : before.entrySet()) {
    System.out.println(e.getKey());
    System.out.println(e.getValue());
  }
  Map<String,INDArray> origGrad=new HashMap<>();
  origGrad.put("in",in.gradient().getArr().dup());
  origGrad.put("out",out.gradient().getArr().dup());
  double stdBefore=in.getArr().stdNumber().doubleValue();
  in.getArr().assign(Nd4j.rand(in.getArr().shape()));
  double stdAfter=in.getArr().stdNumber().doubleValue();
  System.out.println("Before vs. after: " + stdBefore + ", "+ stdAfter);
  INDArray outArr2=sd.execAndEndResult();
  sd.execBackwards();
  assertNotEquals(outArr,outArr2);
  System.out.println("=======================================================");
  Map<String,INDArray> after=(Map<String,INDArray>)f.get(sdGrad);
  for (  Map.Entry<String,INDArray> e : after.entrySet()) {
    System.out.println(e.getKey());
    System.out.println(e.getValue());
  }
  assertNotEquals(origGrad.get("in"),in.gradient().getArr());
  assertNotEquals(origGrad.get("out"),out.gradient().getArr());
}
