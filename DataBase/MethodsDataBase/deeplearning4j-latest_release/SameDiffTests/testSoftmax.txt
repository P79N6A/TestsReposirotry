@Test public void testSoftmax(){
  SameDiff sameDiff=SameDiff.create();
  INDArray sumInput=Nd4j.linspace(1,4,4).reshape(2,2);
  Map<String,INDArray> inputs=new HashMap<>();
  inputs.put("x",sumInput);
  sameDiff.defineFunction("softmax",new SameDiffFunctionDefinition(){
    @Override public SDVariable[] define(    SameDiff sameDiff,    Map<String,INDArray> inputs,    SDVariable[] variableInputs){
      SDVariable input=sameDiff.var("x",inputs.get("x").dup());
      SDVariable softmax=sameDiff.softmax(input);
      return new SDVariable[]{softmax};
    }
  }
,inputs);
  INDArray executions=sameDiff.execAndEndResult("softmax");
  INDArray assertions=Transforms.softmax(sumInput.dup());
  assertArrayEquals(sumInput.shape(),executions.shape());
  System.out.println(executions);
  assertEquals(assertions,executions);
  SoftMaxDerivative softMaxDerivative=new SoftMaxDerivative(sumInput);
  Nd4j.getExecutioner().exec(softMaxDerivative);
  System.out.println(softMaxDerivative.z());
}
