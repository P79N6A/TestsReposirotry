@Test public void testGraphBuilding(){
  final SameDiff sameDiffOuter=SameDiff.create();
  Map<String,INDArray> inputs=variablesForInput();
  sameDiffOuter.defineFunction("logisticPredictions",new SameDiffFunctionDefinition(){
    @Override public SDVariable[] define(    SameDiff sameDiff,    Map<String,INDArray> inputs,    SDVariable[] variableInputs){
      SDVariable input=sameDiff.var("x",inputs.get("x"));
      SDVariable w=sameDiff.var("w",inputs.get("w"));
      SDVariable y=sameDiff.var("y",inputs.get("y"));
      SDVariable preOutput=sameDiff.mmul(input,w);
      SDVariable sigmoid=sameDiff.sigmoid(preOutput);
      return new SDVariable[]{sigmoid};
    }
  }
,inputs);
  sameDiffOuter.defineFunction("loss",new SameDiffFunctionDefinition(){
    @Override public SDVariable[] define(    SameDiff sameDiff,    Map<String,INDArray> inputs,    SDVariable[] variableInputs){
      SDVariable outputs=sameDiffOuter.invokeFunctionOn("logisticPredictions",sameDiff);
      SDVariable y=sameDiff.getVariable("y");
      SDVariable outputTimesY=outputs.mul(y);
      return new SDVariable[]{outputTimesY};
    }
  }
,inputs);
  SameDiff logisticPrediction=sameDiffOuter.getFunction("logisticPredictions");
  List<String> logisticOpNameAssertions=Arrays.asList("mmul","sigmoid");
}
