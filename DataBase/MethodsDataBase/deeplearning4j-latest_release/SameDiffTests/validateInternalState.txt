@Test public void validateInternalState(){
  SameDiff sd=SameDiff.create();
  sd.enableDebugMode();
  int nOut=4;
  int minibatch=10;
  SDVariable input=sd.var("in",new int[]{minibatch,nOut});
  SDVariable label=sd.var("label",new int[]{minibatch,nOut});
  SDVariable diff=input.sub("diff",label);
  SDVariable sqDiff=diff.mul("sqDiff",diff);
  SDVariable msePerEx=sd.mean("msePerEx",sqDiff,1);
  SDVariable out=sd.mean("loss",msePerEx,0);
  assertEquals("diff",diff.getVarName());
  assertEquals("sqDiff",sqDiff.getVarName());
  DifferentialFunction[] dfs=sd.functions();
  assertEquals(4,dfs.length);
  assertEquals(SubOp.class,dfs[0].getClass());
  assertEquals(MulOp.class,dfs[1].getClass());
  assertEquals(Mean.class,dfs[2].getClass());
  assertEquals(Mean.class,dfs[3].getClass());
  Map<String,String[]> incomingArgsReverse=getObject("incomingArgsReverse",sd,SameDiff.class);
  assertEquals(4,incomingArgsReverse.size());
  Map<String,String[]> incomingArgsReverseExp=new LinkedHashMap<>();
  incomingArgsReverseExp.put(dfs[0].getOwnName(),new String[]{"in","label"});
  incomingArgsReverseExp.put(dfs[1].getOwnName(),new String[]{"diff","diff"});
  incomingArgsReverseExp.put(dfs[2].getOwnName(),new String[]{"sqDiff"});
  incomingArgsReverseExp.put(dfs[3].getOwnName(),new String[]{"msePerEx"});
  for (  Map.Entry<String,String[]> e : incomingArgsReverseExp.entrySet()) {
    assertArrayEquals(e.getValue(),incomingArgsReverse.get(e.getKey()));
  }
  Map<String,String[]> outgoingArgsReverse=getObject("outgoingArgsReverse",sd,SameDiff.class);
  Map<String,String[]> outgoingArgsReverseExp=new LinkedHashMap<>();
  outgoingArgsReverseExp.put(dfs[0].getOwnName(),new String[]{"diff"});
  outgoingArgsReverseExp.put(dfs[1].getOwnName(),new String[]{"sqDiff"});
  outgoingArgsReverseExp.put(dfs[2].getOwnName(),new String[]{"msePerEx"});
  outgoingArgsReverseExp.put(dfs[3].getOwnName(),new String[]{"loss"});
  for (  Map.Entry<String,String[]> e : outgoingArgsReverseExp.entrySet()) {
    assertArrayEquals(e.getValue(),outgoingArgsReverse.get(e.getKey()));
  }
  sd.createGradFunction();
  SameDiff sdGrad=sd.getFunction("grad");
  DifferentialFunction[] dfsBackward=sdGrad.functions();
  assertEquals(10,dfsBackward.length);
  val classesExp=Arrays.asList(SubOp.class,MulOp.class,Mean.class,Mean.class,GradientBackwardsMarker.class,MeanBp.class,MeanBp.class,MulBpOp.class,AddOp.class,SubBpOp.class);
  for (int i=0; i < 10; i++) {
    assertEquals(classesExp.get(i),dfsBackward[i].getClass());
  }
  List<SDVariable> variables=sdGrad.variables();
  Map<String,String[]> incomingArgsReverseBP=getObject("incomingArgsReverse",sdGrad,SameDiff.class);
  assertEquals(10,incomingArgsReverseBP.size());
  Map<String,String[]> outgoingArgsReverseBP=getObject("outgoingArgsReverse",sdGrad,SameDiff.class);
  assertEquals(10,outgoingArgsReverseBP.size());
}
