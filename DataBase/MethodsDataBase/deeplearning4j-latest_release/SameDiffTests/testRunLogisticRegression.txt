@Test public void testRunLogisticRegression(){
  Map<String,INDArray> vars=this.variablesForInput();
  SameDiff outside=SameDiff.create();
  outside.defineFunction("activate",new SameDiffFunctionDefinition(){
    @Override public SDVariable[] define(    SameDiff sameDiff,    Map<String,INDArray> inputs,    SDVariable[] variableInputs){
      sameDiff.enableDebugMode();
      SDVariable x=sameDiff.var("x",inputs.get("x"));
      SDVariable w=sameDiff.var("w",inputs.get("w"));
      SDVariable y=sameDiff.var("y",inputs.get("y"));
      SDVariable activation=sameDiff.sigmoid("activation",sameDiff.mmul("mmul",x,w));
      SDVariable oneMinusY=y.rsub("oneminusy",1.0);
      SDVariable oneMinusPredictions=activation.rsub("oneminusactivations",1.0);
      SDVariable outputTimesY=y.mul("output * y",activation);
      SDVariable yHat=oneMinusPredictions.mul("yhat",oneMinusY);
      SDVariable probs=outputTimesY.add("probs",yHat);
      SDVariable logProbs=sameDiff.log("logprob",probs);
      SDVariable ret=sameDiff.sum("totalsum",logProbs,Integer.MAX_VALUE);
      SDVariable ret2=sameDiff.neg("negtotalsum",ret);
      return new SDVariable[]{ret2};
    }
  }
,vars);
  SameDiff activation=outside.getFunction("activate");
  int epochsToRun=5;
  double lr=0.1;
}
