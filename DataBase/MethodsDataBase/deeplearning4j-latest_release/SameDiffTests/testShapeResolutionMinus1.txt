@Test public void testShapeResolutionMinus1(){
  int nIn=3;
  int nOut=4;
  int minibatch=3;
  for (  boolean useMinus1 : new boolean[]{false,true}) {
    log.info("Starting: {}",(useMinus1 ? "minibatch -1" : "minibatch 3"));
    long[] inShape;
    if (useMinus1) {
      inShape=new long[]{-1,nIn};
    }
 else {
      inShape=new long[]{minibatch,nIn};
    }
    val wShape=new long[]{nIn,nOut};
    val bShape=new long[]{1,nOut};
    SameDiff sd=SameDiff.create();
    SDVariable layerInput=sd.var("in",inShape);
    SDVariable weights=sd.var("W",wShape);
    SDVariable bias=sd.var("b",bShape);
    SDVariable mmul=sd.mmul("mmul",layerInput,weights);
    SDVariable z=mmul.add("z",bias);
    SDVariable out=sd.sigmoid("out",z);
    Map<String,INDArray> m=new HashMap<>();
    INDArray in=Nd4j.rand(new long[]{minibatch,nIn});
    INDArray w=Nd4j.rand(wShape);
    INDArray b=Nd4j.rand(bShape);
    sd.associateArrayWithVariable(in,sd.getVariable("in"));
    assertNotNull(sd.getArrForVarName("in"));
    sd.associateArrayWithVariable(w,sd.getVariable("W"));
    sd.associateArrayWithVariable(b,sd.getVariable("b"));
    INDArray outArr=sd.execAndEndResult();
    assertArrayEquals(new long[]{minibatch,nOut},outArr.shape());
  }
}
