@Test public void testNestedExecution(){
  final SameDiff outer=SameDiff.create();
  Map<String,INDArray> input=new HashMap<>();
  input.put("x",Nd4j.ones(2));
  outer.defineFunction("firstadd",new SameDiffFunctionDefinition(){
    @Override public SDVariable[] define(    SameDiff sameDiff,    Map<String,INDArray> inputs,    SDVariable[] variableInputs){
      SDVariable input=sameDiff.var("x",inputs.get("x"));
      SDVariable ret=input.add(input);
      return new SDVariable[]{ret};
    }
  }
,input);
  outer.defineFunction("secondadd",new SameDiffFunctionDefinition(){
    @Override public SDVariable[] define(    SameDiff sameDiff,    Map<String,INDArray> inputs,    SDVariable[] variableInputs){
      SDVariable result=outer.invokeFunctionOn("firstadd",sameDiff);
      return new SDVariable[]{result.add(1.0)};
    }
  }
);
  SameDiff secondAdd=outer.getFunction("secondadd");
  INDArray[] outputs=secondAdd.eval(input);
  INDArray outputsAssertion=Nd4j.valueArrayOf(2,2.0);
  assertEquals(outputsAssertion,outputs[0]);
}
