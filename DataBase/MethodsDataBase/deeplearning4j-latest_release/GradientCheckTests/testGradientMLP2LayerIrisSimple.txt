@Test public void testGradientMLP2LayerIrisSimple(){
  Activation[] activFns={Activation.SIGMOID,Activation.TANH};
  boolean[] characteristic={false,true};
  LossFunction[] lossFunctions={LossFunction.MCXENT,LossFunction.MSE};
  Activation[] outputActivations={Activation.SOFTMAX,Activation.TANH};
  DataNormalization scaler=new NormalizerMinMaxScaler();
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  scaler.fit(iter);
  iter.setPreProcessor(scaler);
  DataSet ds=iter.next();
  INDArray input=ds.getFeatures();
  INDArray labels=ds.getLabels();
  for (  Activation afn : activFns) {
    for (    boolean doLearningFirst : characteristic) {
      for (int i=0; i < lossFunctions.length; i++) {
        LossFunction lf=lossFunctions[i];
        Activation outputActivation=outputActivations[i];
        MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).updater(new NoOp()).seed(12345L).list().layer(0,new DenseLayer.Builder().nIn(4).nOut(3).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).activation(afn).build()).layer(1,new OutputLayer.Builder(lf).activation(outputActivation).nIn(3).nOut(3).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).build()).build();
        MultiLayerNetwork mln=new MultiLayerNetwork(conf);
        mln.init();
        if (doLearningFirst) {
          mln.setInput(ds.getFeatures());
          mln.setLabels(ds.getLabels());
          mln.computeGradientAndScore();
          double scoreBefore=mln.score();
          for (int j=0; j < 10; j++)           mln.fit(ds);
          mln.computeGradientAndScore();
          double scoreAfter=mln.score();
          String msg="testGradMLP2LayerIrisSimple() - score did not (sufficiently) decrease during learning - activationFn=" + afn + ", lossFn="+ lf+ ", outputActivation="+ outputActivation+ ", doLearningFirst="+ doLearningFirst+ " (before="+ scoreBefore+ ", scoreAfter="+ scoreAfter+ ")";
        }
        if (PRINT_RESULTS) {
          System.out.println("testGradientMLP2LayerIrisSimpleRandom() - activationFn=" + afn + ", lossFn="+ lf+ ", outputActivation="+ outputActivation+ ", doLearningFirst="+ doLearningFirst);
          for (int j=0; j < mln.getnLayers(); j++)           System.out.println("Layer " + j + " # params: "+ mln.getLayer(j).numParams());
        }
        boolean gradOK=GradientCheckUtil.checkGradients(mln,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels);
        String msg="testGradMLP2LayerIrisSimple() - activationFn=" + afn + ", lossFn="+ lf+ ", outputActivation="+ outputActivation+ ", doLearningFirst="+ doLearningFirst;
        assertTrue(msg,gradOK);
        TestUtils.testModelSerialization(mln);
      }
    }
  }
}
