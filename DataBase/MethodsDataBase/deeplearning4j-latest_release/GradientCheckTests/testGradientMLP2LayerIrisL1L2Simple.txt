@Test public void testGradientMLP2LayerIrisL1L2Simple(){
  Activation[] activFns={Activation.SIGMOID,Activation.TANH,Activation.THRESHOLDEDRELU};
  boolean[] characteristic={false,true};
  LossFunction[] lossFunctions={LossFunction.MCXENT,LossFunction.MSE};
  Activation[] outputActivations={Activation.SOFTMAX,Activation.TANH};
  DataNormalization scaler=new NormalizerMinMaxScaler();
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  scaler.fit(iter);
  iter.setPreProcessor(scaler);
  DataSet ds=iter.next();
  INDArray input=ds.getFeatures();
  INDArray labels=ds.getLabels();
  double[] l2vals={0.4,0.0,0.4,0.4};
  double[] l1vals={0.0,0.0,0.5,0.0};
  double[] biasL2={0.0,0.0,0.0,0.2};
  double[] biasL1={0.0,0.0,0.6,0.0};
  for (  Activation afn : activFns) {
    for (    boolean doLearningFirst : characteristic) {
      for (int i=0; i < lossFunctions.length; i++) {
        for (int k=0; k < l2vals.length; k++) {
          LossFunction lf=lossFunctions[i];
          Activation outputActivation=outputActivations[i];
          double l2=l2vals[k];
          double l1=l1vals[k];
          MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().l2(l2).l1(l1).l2Bias(biasL2[k]).l1Bias(biasL1[k]).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).seed(12345L).list().layer(0,new DenseLayer.Builder().nIn(4).nOut(3).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).updater(new NoOp()).activation(afn).build()).layer(1,new OutputLayer.Builder(lf).nIn(3).nOut(3).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).updater(new NoOp()).activation(outputActivation).build()).build();
          MultiLayerNetwork mln=new MultiLayerNetwork(conf);
          mln.init();
          doLearningFirst=false;
          if (doLearningFirst) {
            mln.setInput(ds.getFeatures());
            mln.setLabels(ds.getLabels());
            mln.computeGradientAndScore();
            double scoreBefore=mln.score();
            for (int j=0; j < 10; j++)             mln.fit(ds);
            mln.computeGradientAndScore();
            double scoreAfter=mln.score();
            String msg="testGradMLP2LayerIrisSimple() - score did not (sufficiently) decrease during learning - activationFn=" + afn + ", lossFn="+ lf+ ", outputActivation="+ outputActivation+ ", doLearningFirst="+ doLearningFirst+ ", l2="+ l2+ ", l1="+ l1+ " (before="+ scoreBefore+ ", scoreAfter="+ scoreAfter+ ")";
            assertTrue(msg,scoreAfter < 0.8 * scoreBefore);
          }
          if (PRINT_RESULTS) {
            System.out.println("testGradientMLP2LayerIrisSimpleRandom() - activationFn=" + afn + ", lossFn="+ lf+ ", outputActivation="+ outputActivation+ ", doLearningFirst="+ doLearningFirst+ ", l2="+ l2+ ", l1="+ l1);
            for (int j=0; j < mln.getnLayers(); j++)             System.out.println("Layer " + j + " # params: "+ mln.getLayer(j).numParams());
          }
          boolean gradOK=GradientCheckUtil.checkGradients(mln,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels);
          String msg="testGradMLP2LayerIrisSimple() - activationFn=" + afn + ", lossFn="+ lf+ ", outputActivation="+ outputActivation+ ", doLearningFirst="+ doLearningFirst+ ", l2="+ l2+ ", l1="+ l1;
          assertTrue(msg,gradOK);
          TestUtils.testModelSerialization(mln);
        }
      }
    }
  }
}
