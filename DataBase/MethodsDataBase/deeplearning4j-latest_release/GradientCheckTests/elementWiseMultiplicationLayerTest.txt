@Test public void elementWiseMultiplicationLayerTest(){
  for (  Activation a : new Activation[]{Activation.IDENTITY,Activation.TANH}) {
    ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).updater(new NoOp()).seed(12345L).weightInit(new UniformDistribution(0,1)).graphBuilder().addInputs("features").addLayer("dense",new DenseLayer.Builder().nIn(4).nOut(4).activation(Activation.TANH).build(),"features").addLayer("elementWiseMul",new ElementWiseMultiplicationLayer.Builder().nIn(4).nOut(4).activation(a).build(),"dense").addLayer("loss",new LossLayer.Builder(LossFunctions.LossFunction.COSINE_PROXIMITY).activation(Activation.IDENTITY).build(),"elementWiseMul").setOutputs("loss").build();
    ComputationGraph netGraph=new ComputationGraph(conf);
    netGraph.init();
    log.info("params before learning: " + netGraph.getLayer(1).paramTable());
    INDArray features=Nd4j.create(new double[][]{{1,2,3,4},{1,2,3,1},{1,2,3,0}});
    INDArray labels=Nd4j.create(new double[][]{{1,1,1,8},{1,1,1,2},{1,1,1,1}});
    netGraph.setInputs(features);
    netGraph.setLabels(labels);
    netGraph.computeGradientAndScore();
    double scoreBefore=netGraph.score();
    String msg;
    for (int epoch=0; epoch < 5; epoch++)     netGraph.fit(new INDArray[]{features},new INDArray[]{labels});
    netGraph.computeGradientAndScore();
    double scoreAfter=netGraph.score();
    msg="elementWiseMultiplicationLayerTest() - score did not (sufficiently) decrease during learning - activationFn=" + "Id" + ", lossFn="+ "Cos-sim"+ ", outputActivation="+ "Id"+ ", doLearningFirst="+ "true"+ " (before=" + scoreBefore + ", scoreAfter="+ scoreAfter+ ")";
    assertTrue(msg,scoreAfter < 0.8 * scoreBefore);
    log.info("params after learning: " + netGraph.getLayer(1).paramTable());
    boolean gradOK=checkGradients(netGraph,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,new INDArray[]{features},new INDArray[]{labels});
    msg="elementWiseMultiplicationLayerTest() - activationFn=" + "ID" + ", lossFn="+ "Cos-sim"+ ", outputActivation="+ "Id"+ ", doLearningFirst="+ "true";
    assertTrue(msg,gradOK);
    TestUtils.testModelSerialization(netGraph);
  }
}
