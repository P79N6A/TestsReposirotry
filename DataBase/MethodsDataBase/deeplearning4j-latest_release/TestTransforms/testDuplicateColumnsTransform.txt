@Test public void testDuplicateColumnsTransform(){
  Schema schema=new Schema.Builder().addColumnString("stringCol").addColumnInteger("intCol").addColumnLong("longCol").build();
  List<String> toDup=Arrays.asList("intCol","longCol");
  List<String> newNames=Arrays.asList("dup_intCol","dup_longCol");
  Transform transform=new DuplicateColumnsTransform(toDup,newNames);
  transform.setInputSchema(schema);
  Schema out=transform.transform(schema);
  assertEquals(5,out.getColumnMetaData().size());
  List<String> expOutNames=Arrays.asList("stringCol","intCol","dup_intCol","longCol","dup_longCol");
  List<ColumnType> expOutTypes=Arrays.asList(ColumnType.String,ColumnType.Integer,ColumnType.Integer,ColumnType.Long,ColumnType.Long);
  for (int i=0; i < 5; i++) {
    assertEquals(expOutNames.get(i),out.getName(i));
    TestCase.assertEquals(expOutTypes.get(i),out.getType(i));
  }
  List<Writable> inList=Arrays.asList((Writable)new Text("one"),new IntWritable(2),new LongWritable(3L));
  List<Writable> outList=Arrays.asList((Writable)new Text("one"),new IntWritable(2),new IntWritable(2),new LongWritable(3L),new LongWritable(3L));
  assertEquals(outList,transform.map(inList));
}
