@Test public void testDeriveColumnsFromTimeTransform() throws Exception {
  Schema schema=new Schema.Builder().addColumnTime("column",DateTimeZone.forID("UTC")).addColumnString("otherColumn").build();
  Transform transform=new DeriveColumnsFromTimeTransform.Builder("column").insertAfter("otherColumn").addIntegerDerivedColumn("hour",DateTimeFieldType.hourOfDay()).addIntegerDerivedColumn("day",DateTimeFieldType.dayOfMonth()).addIntegerDerivedColumn("second",DateTimeFieldType.secondOfMinute()).addStringDerivedColumn("humanReadable","YYYY-MM-dd HH:mm:ss",DateTimeZone.UTC).build();
  transform.setInputSchema(schema);
  Schema out=transform.transform(schema);
  assertEquals(6,out.getColumnMetaData().size());
  TestCase.assertEquals(ColumnType.Time,out.getMetaData(0).getColumnType());
  TestCase.assertEquals(ColumnType.String,out.getMetaData(1).getColumnType());
  TestCase.assertEquals(ColumnType.Integer,out.getMetaData(2).getColumnType());
  TestCase.assertEquals(ColumnType.Integer,out.getMetaData(3).getColumnType());
  TestCase.assertEquals(ColumnType.Integer,out.getMetaData(4).getColumnType());
  TestCase.assertEquals(ColumnType.String,out.getMetaData(5).getColumnType());
  assertEquals("column",out.getName(0));
  assertEquals("otherColumn",out.getName(1));
  assertEquals("hour",out.getName(2));
  assertEquals("day",out.getName(3));
  assertEquals("second",out.getName(4));
  assertEquals("humanReadable",out.getName(5));
  long in1=1451651445000L;
  List<Writable> out1=new ArrayList<>();
  out1.add(new LongWritable(in1));
  out1.add(new Text("otherColumnValue"));
  out1.add(new IntWritable(12));
  out1.add(new IntWritable(1));
  out1.add(new IntWritable(45));
  out1.add(new Text("2016-01-01 12:30:45"));
  long in2=1435708799000L;
  List<Writable> out2=new ArrayList<>();
  out2.add(new LongWritable(in2));
  out2.add(new Text("otherColumnValue"));
  out2.add(new IntWritable(23));
  out2.add(new IntWritable(30));
  out2.add(new IntWritable(59));
  out2.add(new Text("2015-06-30 23:59:59"));
  assertEquals(out1,transform.map(Arrays.asList((Writable)new LongWritable(in1),new Text("otherColumnValue"))));
  assertEquals(out2,transform.map(Arrays.asList((Writable)new LongWritable(in2),new Text("otherColumnValue"))));
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ObjectOutputStream oos=new ObjectOutputStream(baos);
  oos.writeObject(transform);
  byte[] bytes=baos.toByteArray();
  ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
  ObjectInputStream ois=new ObjectInputStream(bais);
  Transform deserialized=(Transform)ois.readObject();
  assertEquals(out1,deserialized.map(Arrays.asList((Writable)new LongWritable(in1),new Text("otherColumnValue"))));
  assertEquals(out2,deserialized.map(Arrays.asList((Writable)new LongWritable(in2),new Text("otherColumnValue"))));
}
