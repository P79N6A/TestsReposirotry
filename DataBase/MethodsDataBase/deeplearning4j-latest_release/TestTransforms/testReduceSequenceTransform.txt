@Test public void testReduceSequenceTransform(){
  Schema schema=new SequenceSchema.Builder().addColumnsDouble("col%d",0,2).build();
  IAssociativeReducer reducer=new Reducer.Builder(ReduceOp.Mean).countColumns("col1").maxColumn("col2").build();
  ReduceSequenceTransform t=new ReduceSequenceTransform(reducer);
  t.setInputSchema(schema);
  List<List<Writable>> seq=Arrays.asList(Arrays.<Writable>asList(new DoubleWritable(0),new DoubleWritable(1),new DoubleWritable(2)),Arrays.<Writable>asList(new DoubleWritable(3),new DoubleWritable(4),new DoubleWritable(5)),Arrays.<Writable>asList(new DoubleWritable(6),new DoubleWritable(7),new DoubleWritable(8)));
  List<List<Writable>> exp=Collections.singletonList(Arrays.<Writable>asList(new DoubleWritable(3),new LongWritable(3L),new DoubleWritable(8)));
  List<List<Writable>> act=t.mapSequence(seq);
  assertEquals(exp,act);
  Schema expOutSchema=new SequenceSchema.Builder().addColumnDouble("mean(col0)").addColumn(new LongMetaData("count(col1)",0L,null)).addColumnDouble("max(col2)").build();
  assertEquals(expOutSchema,t.transform(schema));
}
