@Test public void testConcatenateStringColumnsTransform() throws Exception {
  final String DELIMITER=" ";
  final String NEW_COLUMN="NewColumn";
  final List<String> CONCAT_COLUMNS=Arrays.asList("ConcatenatedColumn1","ConcatenatedColumn2","ConcatenatedColumn3");
  final List<String> ALL_COLUMNS=Arrays.asList("ConcatenatedColumn1","OtherColumn4","ConcatenatedColumn2","OtherColumn5","ConcatenatedColumn3","OtherColumn6");
  final List<Text> COLUMN_VALUES=Arrays.asList(new Text("string1"),new Text("other4"),new Text("string2"),new Text("other5"),new Text("string3"),new Text("other6"));
  final String NEW_COLUMN_VALUE="string1 string2 string3";
  Transform transform=new ConcatenateStringColumns(NEW_COLUMN,DELIMITER,CONCAT_COLUMNS);
  String[] allColumns=ALL_COLUMNS.toArray(new String[ALL_COLUMNS.size()]);
  Schema schema=new Schema.Builder().addColumnsString(allColumns).build();
  List<String> outputColumns=new ArrayList<>(ALL_COLUMNS);
  outputColumns.add(NEW_COLUMN);
  Schema newSchema=transform.transform(schema);
  Assert.assertEquals(outputColumns,newSchema.getColumnNames());
  List<Writable> input=new ArrayList<>();
  for (  Writable value : COLUMN_VALUES)   input.add(value);
  transform.setInputSchema(schema);
  List<Writable> transformed=transform.map(input);
  Assert.assertEquals(NEW_COLUMN_VALUE,transformed.get(transformed.size() - 1).toString());
  List<Text> outputColumnValues=new ArrayList<>(COLUMN_VALUES);
  outputColumnValues.add(new Text(NEW_COLUMN_VALUE));
  Assert.assertEquals(outputColumnValues,transformed);
  String s=JsonMappers.getMapper().writeValueAsString(transform);
  Transform transform2=JsonMappers.getMapper().readValue(s,ConcatenateStringColumns.class);
  Assert.assertEquals(transform,transform2);
}
