@Test public void testTextToCharacterIndexTransform(){
  Schema s=new Schema.Builder().addColumnString("col").addColumnDouble("d").build();
  List<List<Writable>> inSeq=Arrays.asList(Arrays.<Writable>asList(new Text("text"),new DoubleWritable(1.0)),Arrays.<Writable>asList(new Text("ab"),new DoubleWritable(2.0)));
  Map<Character,Integer> map=new HashMap<>();
  map.put('a',0);
  map.put('b',1);
  map.put('e',2);
  map.put('t',3);
  map.put('x',4);
  List<List<Writable>> exp=Arrays.asList(Arrays.<Writable>asList(new IntWritable(3),new DoubleWritable(1.0)),Arrays.<Writable>asList(new IntWritable(2),new DoubleWritable(1.0)),Arrays.<Writable>asList(new IntWritable(4),new DoubleWritable(1.0)),Arrays.<Writable>asList(new IntWritable(3),new DoubleWritable(1.0)),Arrays.<Writable>asList(new IntWritable(0),new DoubleWritable(2.0)),Arrays.<Writable>asList(new IntWritable(1),new DoubleWritable(2.0)));
  Transform t=new TextToCharacterIndexTransform("col","newName",map,false);
  t.setInputSchema(s);
  Schema outputSchema=t.transform(s);
  assertEquals(2,outputSchema.getColumnNames().size());
  assertEquals(ColumnType.Integer,outputSchema.getType(0));
  assertEquals(ColumnType.Double,outputSchema.getType(1));
  IntegerMetaData intMetadata=(IntegerMetaData)outputSchema.getMetaData(0);
  assertEquals(0,(int)intMetadata.getMinAllowedValue());
  assertEquals(4,(int)intMetadata.getMaxAllowedValue());
  List<List<Writable>> out=t.mapSequence(inSeq);
  assertEquals(exp,out);
}
