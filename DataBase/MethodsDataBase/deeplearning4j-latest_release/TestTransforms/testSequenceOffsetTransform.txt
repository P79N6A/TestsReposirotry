@Test public void testSequenceOffsetTransform(){
  List<List<Writable>> seq=Arrays.asList(Arrays.<Writable>asList(new DoubleWritable(0),new DoubleWritable(1),new DoubleWritable(2)),Arrays.<Writable>asList(new DoubleWritable(3),new DoubleWritable(4),new DoubleWritable(5)),Arrays.<Writable>asList(new DoubleWritable(6),new DoubleWritable(7),new DoubleWritable(8)),Arrays.<Writable>asList(new DoubleWritable(9),new DoubleWritable(10),new DoubleWritable(11)));
  Schema schema=new SequenceSchema.Builder().addColumnsDouble("col%d",0,2).build();
  List<List<Writable>> exp1=Arrays.asList(Arrays.<Writable>asList(new DoubleWritable(6),new DoubleWritable(1),new DoubleWritable(8)),Arrays.<Writable>asList(new DoubleWritable(9),new DoubleWritable(4),new DoubleWritable(11)));
  List<List<Writable>> exp2=Arrays.asList(Arrays.<Writable>asList(new DoubleWritable(0),new DoubleWritable(7),new DoubleWritable(2)),Arrays.<Writable>asList(new DoubleWritable(3),new DoubleWritable(10),new DoubleWritable(5)));
  SequenceOffsetTransform t_inplace_trim_p2=new SequenceOffsetTransform(Collections.singletonList("col1"),2,SequenceOffsetTransform.OperationType.InPlace,SequenceOffsetTransform.EdgeHandling.TrimSequence,null);
  SequenceOffsetTransform t_inplace_trim_m2=new SequenceOffsetTransform(Collections.singletonList("col1"),-2,SequenceOffsetTransform.OperationType.InPlace,SequenceOffsetTransform.EdgeHandling.TrimSequence,null);
  t_inplace_trim_p2.setInputSchema(schema);
  t_inplace_trim_m2.setInputSchema(schema);
  assertEquals(exp1,t_inplace_trim_p2.mapSequence(seq));
  assertEquals(exp2,t_inplace_trim_m2.mapSequence(seq));
  SequenceOffsetTransform t_inplace_specified_p2=new SequenceOffsetTransform(Collections.singletonList("col1"),2,SequenceOffsetTransform.OperationType.InPlace,SequenceOffsetTransform.EdgeHandling.SpecifiedValue,NullWritable.INSTANCE);
  SequenceOffsetTransform t_inplace_specified_m2=new SequenceOffsetTransform(Collections.singletonList("col1"),-2,SequenceOffsetTransform.OperationType.InPlace,SequenceOffsetTransform.EdgeHandling.SpecifiedValue,NullWritable.INSTANCE);
  t_inplace_specified_p2.setInputSchema(schema);
  t_inplace_specified_m2.setInputSchema(schema);
  List<List<Writable>> exp3=Arrays.asList(Arrays.<Writable>asList(new DoubleWritable(0),NullWritable.INSTANCE,new DoubleWritable(2)),Arrays.<Writable>asList(new DoubleWritable(3),NullWritable.INSTANCE,new DoubleWritable(5)),Arrays.<Writable>asList(new DoubleWritable(6),new DoubleWritable(1),new DoubleWritable(8)),Arrays.<Writable>asList(new DoubleWritable(9),new DoubleWritable(4),new DoubleWritable(11)));
  List<List<Writable>> exp4=Arrays.asList(Arrays.<Writable>asList(new DoubleWritable(0),new DoubleWritable(7),new DoubleWritable(2)),Arrays.<Writable>asList(new DoubleWritable(3),new DoubleWritable(10),new DoubleWritable(5)),Arrays.<Writable>asList(new DoubleWritable(6),NullWritable.INSTANCE,new DoubleWritable(8)),Arrays.<Writable>asList(new DoubleWritable(9),NullWritable.INSTANCE,new DoubleWritable(11)));
  assertEquals(exp3,t_inplace_specified_p2.mapSequence(seq));
  assertEquals(exp4,t_inplace_specified_m2.mapSequence(seq));
  List<List<Writable>> exp1a=Arrays.asList(Arrays.<Writable>asList(new DoubleWritable(6),new DoubleWritable(7),new DoubleWritable(1),new DoubleWritable(8)),Arrays.<Writable>asList(new DoubleWritable(9),new DoubleWritable(10),new DoubleWritable(4),new DoubleWritable(11)));
  List<List<Writable>> exp2a=Arrays.asList(Arrays.<Writable>asList(new DoubleWritable(0),new DoubleWritable(1),new DoubleWritable(7),new DoubleWritable(2)),Arrays.<Writable>asList(new DoubleWritable(3),new DoubleWritable(4),new DoubleWritable(10),new DoubleWritable(5)));
  SequenceOffsetTransform t_newcol_trim_p2=new SequenceOffsetTransform(Collections.singletonList("col1"),2,SequenceOffsetTransform.OperationType.NewColumn,SequenceOffsetTransform.EdgeHandling.TrimSequence,null);
  SequenceOffsetTransform t_newcol_trim_m2=new SequenceOffsetTransform(Collections.singletonList("col1"),-2,SequenceOffsetTransform.OperationType.NewColumn,SequenceOffsetTransform.EdgeHandling.TrimSequence,null);
  t_newcol_trim_p2.setInputSchema(schema);
  t_newcol_trim_m2.setInputSchema(schema);
  assertEquals(exp1a,t_newcol_trim_p2.mapSequence(seq));
  assertEquals(exp2a,t_newcol_trim_m2.mapSequence(seq));
  List<List<Writable>> exp3a=Arrays.asList(Arrays.<Writable>asList(new DoubleWritable(0),new DoubleWritable(1),NullWritable.INSTANCE,new DoubleWritable(2)),Arrays.<Writable>asList(new DoubleWritable(3),new DoubleWritable(4),NullWritable.INSTANCE,new DoubleWritable(5)),Arrays.<Writable>asList(new DoubleWritable(6),new DoubleWritable(7),new DoubleWritable(1),new DoubleWritable(8)),Arrays.<Writable>asList(new DoubleWritable(9),new DoubleWritable(10),new DoubleWritable(4),new DoubleWritable(11)));
  List<List<Writable>> exp4a=Arrays.asList(Arrays.<Writable>asList(new DoubleWritable(0),new DoubleWritable(1),new DoubleWritable(7),new DoubleWritable(2)),Arrays.<Writable>asList(new DoubleWritable(3),new DoubleWritable(4),new DoubleWritable(10),new DoubleWritable(5)),Arrays.<Writable>asList(new DoubleWritable(6),new DoubleWritable(7),NullWritable.INSTANCE,new DoubleWritable(8)),Arrays.<Writable>asList(new DoubleWritable(9),new DoubleWritable(10),NullWritable.INSTANCE,new DoubleWritable(11)));
  SequenceOffsetTransform t_newcol_specified_p2=new SequenceOffsetTransform(Collections.singletonList("col1"),2,SequenceOffsetTransform.OperationType.NewColumn,SequenceOffsetTransform.EdgeHandling.SpecifiedValue,NullWritable.INSTANCE);
  SequenceOffsetTransform t_newcol_specified_m2=new SequenceOffsetTransform(Collections.singletonList("col1"),-2,SequenceOffsetTransform.OperationType.NewColumn,SequenceOffsetTransform.EdgeHandling.SpecifiedValue,NullWritable.INSTANCE);
  t_newcol_specified_p2.setInputSchema(schema);
  t_newcol_specified_m2.setInputSchema(schema);
  assertEquals(exp3a,t_newcol_specified_p2.mapSequence(seq));
  assertEquals(exp4a,t_newcol_specified_m2.mapSequence(seq));
  assertEquals(Collections.emptyList(),t_inplace_trim_p2.mapSequence(exp1));
  assertEquals(Collections.emptyList(),t_inplace_trim_m2.mapSequence(exp1));
  assertEquals(Collections.emptyList(),t_newcol_trim_p2.mapSequence(exp1));
  assertEquals(Collections.emptyList(),t_newcol_trim_m2.mapSequence(exp1));
}
