@Test public void testTrimSequenceTransform(){
  List<List<Writable>> seq=Arrays.asList(Arrays.<Writable>asList(new DoubleWritable(0),new DoubleWritable(1),new DoubleWritable(2)),Arrays.<Writable>asList(new DoubleWritable(3),new DoubleWritable(4),new DoubleWritable(5)),Arrays.<Writable>asList(new DoubleWritable(6),new DoubleWritable(7),new DoubleWritable(8)),Arrays.<Writable>asList(new DoubleWritable(9),new DoubleWritable(10),new DoubleWritable(11)));
  List<List<Writable>> expTrimFirst=Arrays.asList(Arrays.<Writable>asList(new DoubleWritable(6),new DoubleWritable(7),new DoubleWritable(8)),Arrays.<Writable>asList(new DoubleWritable(9),new DoubleWritable(10),new DoubleWritable(11)));
  List<List<Writable>> expTrimLast=Arrays.asList(Arrays.<Writable>asList(new DoubleWritable(0),new DoubleWritable(1),new DoubleWritable(2)),Arrays.<Writable>asList(new DoubleWritable(3),new DoubleWritable(4),new DoubleWritable(5)));
  SequenceTrimTransform tFirst=new SequenceTrimTransform(2,true);
  SequenceTrimTransform tLast=new SequenceTrimTransform(2,false);
  Schema schema=new SequenceSchema.Builder().addColumnsDouble("col%d",0,2).build();
  tFirst.setInputSchema(schema);
  tLast.setInputSchema(schema);
  assertEquals(expTrimFirst,tFirst.mapSequence(seq));
  assertEquals(expTrimLast,tLast.mapSequence(seq));
}
