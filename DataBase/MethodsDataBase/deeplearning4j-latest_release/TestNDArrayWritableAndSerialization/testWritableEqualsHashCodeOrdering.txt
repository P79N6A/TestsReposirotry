@Test public void testWritableEqualsHashCodeOrdering() throws Exception {
  INDArray arrC=Nd4j.rand(new int[]{10,20},'c');
  INDArray arrF=arrC.dup('f');
  NDArrayWritable wC=new NDArrayWritable(arrC);
  NDArrayWritable wF=new NDArrayWritable(arrF);
  assertEquals(wC,wF);
  assertEquals(wC.hashCode(),wF.hashCode());
  int compare=wC.compareTo(wF);
  assertEquals(0,compare);
  assertEquals(-1,new NDArrayWritable(null).compareTo(new NDArrayWritable(Nd4j.create(1))));
  assertEquals(-1,new NDArrayWritable(Nd4j.create(1,1)).compareTo(new NDArrayWritable(Nd4j.create(1,1,1))));
  assertEquals(-1,new NDArrayWritable(Nd4j.create(1,1)).compareTo(new NDArrayWritable(Nd4j.create(1,2))));
  assertEquals(-1,new NDArrayWritable(Nd4j.create(1,3)).compareTo(new NDArrayWritable(Nd4j.create(3,1))));
  assertEquals(-1,new NDArrayWritable(Nd4j.create(new double[]{1.0,2.0,3.0})).compareTo(new NDArrayWritable(Nd4j.create(new double[]{1.0,2.0,3.1}))));
  assertEquals(1,new NDArrayWritable(Nd4j.create(1)).compareTo(new NDArrayWritable(null)));
  assertEquals(1,new NDArrayWritable(Nd4j.create(1,1,1)).compareTo(new NDArrayWritable(Nd4j.create(1,1))));
  assertEquals(1,new NDArrayWritable(Nd4j.create(1,2)).compareTo(new NDArrayWritable(Nd4j.create(1,1))));
  assertEquals(1,new NDArrayWritable(Nd4j.create(3,1)).compareTo(new NDArrayWritable(Nd4j.create(1,3))));
  assertEquals(1,new NDArrayWritable(Nd4j.create(new double[]{1.0,2.0,3.1})).compareTo(new NDArrayWritable(Nd4j.create(new double[]{1.0,2.0,3.0}))));
}
