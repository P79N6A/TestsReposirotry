@Test public void testListenerBasic(){
  for (  boolean useJ7 : new boolean[]{false,true}) {
    DataSet ds=new IrisDataSetIterator(150,150).next();
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).list().layer(0,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(4).nOut(3).build()).build();
    MultiLayerNetwork net=new MultiLayerNetwork(conf);
    net.init();
    StatsStorage ss=new MapDBStatsStorage();
    if (useJ7) {
      net.setListeners(new J7StatsListener(ss,1));
    }
 else {
      net.setListeners(new StatsListener(ss,1));
    }
    for (int i=0; i < 3; i++) {
      net.fit(ds);
    }
    List<String> sids=ss.listSessionIDs();
    assertEquals(1,sids.size());
    String sessionID=ss.listSessionIDs().get(0);
    assertEquals(1,ss.listTypeIDsForSession(sessionID).size());
    String typeID=ss.listTypeIDsForSession(sessionID).get(0);
    assertEquals(1,ss.listWorkerIDsForSession(sessionID).size());
    String workerID=ss.listWorkerIDsForSession(sessionID).get(0);
    Persistable staticInfo=ss.getStaticInfo(sessionID,typeID,workerID);
    assertNotNull(staticInfo);
    System.out.println(staticInfo);
    List<Persistable> updates=ss.getAllUpdatesAfter(sessionID,typeID,workerID,0);
    assertEquals(3,updates.size());
    for (    Persistable p : updates) {
      System.out.println(p);
    }
  }
}
