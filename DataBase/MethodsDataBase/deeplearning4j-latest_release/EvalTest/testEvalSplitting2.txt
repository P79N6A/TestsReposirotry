@Test public void testEvalSplitting2(){
  List<List<Writable>> seqFeatures=new ArrayList<>();
  List<Writable> step=Arrays.<Writable>asList(new FloatWritable(0),new FloatWritable(0),new FloatWritable(0));
  for (int i=0; i < 30; i++) {
    seqFeatures.add(step);
  }
  List<List<Writable>> seqLabels=Collections.singletonList(Collections.<Writable>singletonList(new FloatWritable(0)));
  SequenceRecordReader fsr=new CollectionSequenceRecordReader(Collections.singletonList(seqFeatures));
  SequenceRecordReader lsr=new CollectionSequenceRecordReader(Collections.singletonList(seqLabels));
  DataSetIterator testData=new SequenceRecordReaderDataSetIterator(fsr,lsr,1,-1,true,SequenceRecordReaderDataSetIterator.AlignmentMode.ALIGN_END);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(123).list().layer(0,new LSTM.Builder().activation(Activation.TANH).nIn(3).nOut(3).build()).layer(1,new RnnOutputLayer.Builder().activation(Activation.SIGMOID).lossFunction(LossFunctions.LossFunction.XENT).nIn(3).nOut(1).build()).backpropType(BackpropType.TruncatedBPTT).tBPTTForwardLength(10).tBPTTBackwardLength(10).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  net.evaluate(testData);
}
