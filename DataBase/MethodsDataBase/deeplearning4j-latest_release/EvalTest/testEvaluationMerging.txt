@Test public void testEvaluationMerging(){
  int nRows=20;
  int nCols=3;
  Random r=new Random(12345);
  INDArray actual=Nd4j.create(nRows,nCols);
  INDArray predicted=Nd4j.create(nRows,nCols);
  for (int i=0; i < nRows; i++) {
    int x1=r.nextInt(nCols);
    int x2=r.nextInt(nCols);
    actual.putScalar(new int[]{i,x1},1.0);
    predicted.putScalar(new int[]{i,x2},1.0);
  }
  Evaluation evalExpected=new Evaluation();
  evalExpected.eval(actual,predicted);
  Evaluation eval1=new Evaluation();
  eval1.eval(actual.get(interval(0,5),all()),predicted.get(interval(0,5),all()));
  Evaluation eval2=new Evaluation();
  eval2.eval(actual.get(interval(5,10),all()),predicted.get(interval(5,10),all()));
  Evaluation eval3=new Evaluation();
  eval3.eval(actual.get(interval(10,nRows),all()),predicted.get(interval(10,nRows),all()));
  eval1.merge(eval2);
  eval1.merge(eval3);
  checkEvaluationEquality(evalExpected,eval1);
  eval1=new Evaluation();
  eval1.eval(actual.get(interval(0,5),all()),predicted.get(interval(0,5),all()));
  Evaluation evalInitiallyEmpty=new Evaluation();
  evalInitiallyEmpty.merge(eval1);
  evalInitiallyEmpty.merge(eval2);
  evalInitiallyEmpty.merge(eval3);
  checkEvaluationEquality(evalExpected,evalInitiallyEmpty);
  eval1.merge(new Evaluation());
  eval1.merge(eval2);
  eval1.merge(new Evaluation());
  eval1.merge(eval3);
  checkEvaluationEquality(evalExpected,eval1);
}
