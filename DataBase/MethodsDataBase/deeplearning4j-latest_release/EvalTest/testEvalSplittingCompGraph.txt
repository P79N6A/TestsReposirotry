@Test public void testEvalSplittingCompGraph(){
  for (  WorkspaceMode ws : WorkspaceMode.values()) {
    System.out.println("Starting test for workspace mode: " + ws);
    int nIn=4;
    int layerSize=5;
    int nOut=6;
    int tbpttLength=10;
    int tsLength=5 * tbpttLength + tbpttLength / 2;
    ComputationGraphConfiguration conf1=new NeuralNetConfiguration.Builder().seed(12345).trainingWorkspaceMode(ws).inferenceWorkspaceMode(ws).graphBuilder().addInputs("in").addLayer("0",new LSTM.Builder().nIn(nIn).nOut(layerSize).build(),"in").addLayer("1",new RnnOutputLayer.Builder().nIn(layerSize).nOut(nOut).activation(Activation.SOFTMAX).build(),"0").setOutputs("1").build();
    ComputationGraphConfiguration conf2=new NeuralNetConfiguration.Builder().seed(12345).trainingWorkspaceMode(ws).inferenceWorkspaceMode(ws).graphBuilder().addInputs("in").addLayer("0",new LSTM.Builder().nIn(nIn).nOut(layerSize).build(),"in").addLayer("1",new RnnOutputLayer.Builder().nIn(layerSize).nOut(nOut).activation(Activation.SOFTMAX).build(),"0").setOutputs("1").tBPTTLength(10).backpropType(BackpropType.TruncatedBPTT).build();
    ComputationGraph net1=new ComputationGraph(conf1);
    net1.init();
    ComputationGraph net2=new ComputationGraph(conf2);
    net2.init();
    net2.setParams(net1.params());
    for (    boolean useMask : new boolean[]{false,true}) {
      INDArray in1=Nd4j.rand(new int[]{3,nIn,tsLength});
      INDArray out1=TestUtils.randomOneHotTimeSeries(3,nOut,tsLength);
      INDArray in2=Nd4j.rand(new int[]{5,nIn,tsLength});
      INDArray out2=TestUtils.randomOneHotTimeSeries(5,nOut,tsLength);
      INDArray lMask1=null;
      INDArray lMask2=null;
      if (useMask) {
        lMask1=Nd4j.create(3,tsLength);
        lMask2=Nd4j.create(5,tsLength);
        Nd4j.getExecutioner().exec(new BernoulliDistribution(lMask1,0.5));
        Nd4j.getExecutioner().exec(new BernoulliDistribution(lMask2,0.5));
      }
      List<DataSet> l=Arrays.asList(new DataSet(in1,out1),new DataSet(in2,out2));
      DataSetIterator iter=new ExistingDataSetIterator(l);
      System.out.println("Eval net 1");
      org.nd4j.evaluation.IEvaluation[] e1=net1.doEvaluation(iter,new org.nd4j.evaluation.classification.Evaluation(),new org.nd4j.evaluation.classification.ROCMultiClass(),new org.nd4j.evaluation.regression.RegressionEvaluation());
      System.out.println("Eval net 2");
      org.nd4j.evaluation.IEvaluation[] e2=net2.doEvaluation(iter,new org.nd4j.evaluation.classification.Evaluation(),new org.nd4j.evaluation.classification.ROCMultiClass(),new org.nd4j.evaluation.regression.RegressionEvaluation());
      assertEquals(e1[0],e2[0]);
      assertEquals(e1[1],e2[1]);
      assertEquals(e1[2],e2[2]);
    }
  }
}
