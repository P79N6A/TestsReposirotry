@Test public void testEvaluationWithMetaData() throws Exception {
  RecordReader csv=new CSVRecordReader();
  csv.initialize(new FileSplit(new ClassPathResource("iris.txt").getTempFileFromArchive()));
  int batchSize=10;
  int labelIdx=4;
  int numClasses=3;
  RecordReaderDataSetIterator rrdsi=new RecordReaderDataSetIterator(csv,batchSize,labelIdx,numClasses);
  NormalizerStandardize ns=new NormalizerStandardize();
  ns.fit(rrdsi);
  rrdsi.setPreProcessor(ns);
  rrdsi.reset();
  Nd4j.getRandom().setSeed(12345);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new Sgd(0.1)).list().layer(0,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(4).nOut(3).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  for (int i=0; i < 4; i++) {
    net.fit(rrdsi);
    rrdsi.reset();
  }
  org.nd4j.evaluation.classification.Evaluation e=new org.nd4j.evaluation.classification.Evaluation();
  rrdsi.setCollectMetaData(true);
  while (rrdsi.hasNext()) {
    DataSet ds=rrdsi.next();
    List<RecordMetaData> meta=ds.getExampleMetaData(RecordMetaData.class);
    INDArray out=net.output(ds.getFeatures());
    e.eval(ds.getLabels(),out,meta);
  }
  System.out.println(e.stats());
  System.out.println("\n\n*** Prediction Errors: ***");
  List<org.nd4j.evaluation.meta.Prediction> errors=e.getPredictionErrors();
  List<RecordMetaData> metaForErrors=new ArrayList<>();
  for (  org.nd4j.evaluation.meta.Prediction p : errors) {
    metaForErrors.add((RecordMetaData)p.getRecordMetaData());
  }
  DataSet ds=rrdsi.loadFromMetaData(metaForErrors);
  INDArray output=net.output(ds.getFeatures());
  int count=0;
  for (  org.nd4j.evaluation.meta.Prediction t : errors) {
    System.out.println(t + "\t\tRaw Data: " + csv.loadFromMetaData((RecordMetaData)t.getRecordMetaData()).getRecord()+ "\tNormalized: "+ ds.getFeatures().getRow(count)+ "\tLabels: "+ ds.getLabels().getRow(count)+ "\tNetwork predictions: "+ output.getRow(count));
    count++;
  }
  int errorCount=errors.size();
  double expAcc=1.0 - errorCount / 150.0;
  assertEquals(expAcc,e.accuracy(),1e-5);
  org.nd4j.evaluation.classification.ConfusionMatrix<Integer> confusion=e.getConfusionMatrix();
  int[] actualCounts=new int[3];
  int[] predictedCounts=new int[3];
  for (int i=0; i < 3; i++) {
    for (int j=0; j < 3; j++) {
      int entry=confusion.getCount(i,j);
      List<org.nd4j.evaluation.meta.Prediction> list=e.getPredictions(i,j);
      assertEquals(entry,list.size());
      actualCounts[i]+=entry;
      predictedCounts[j]+=entry;
    }
  }
  for (int i=0; i < 3; i++) {
    List<org.nd4j.evaluation.meta.Prediction> actualClassI=e.getPredictionsByActualClass(i);
    List<org.nd4j.evaluation.meta.Prediction> predictedClassI=e.getPredictionByPredictedClass(i);
    assertEquals(actualCounts[i],actualClassI.size());
    assertEquals(predictedCounts[i],predictedClassI.size());
  }
}
