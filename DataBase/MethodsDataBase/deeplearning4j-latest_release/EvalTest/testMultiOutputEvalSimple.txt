@Test public void testMultiOutputEvalSimple(){
  Nd4j.getRandom().setSeed(12345);
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).graphBuilder().addInputs("in").addLayer("out1",new OutputLayer.Builder().nIn(4).nOut(3).activation(Activation.SOFTMAX).build(),"in").addLayer("out2",new OutputLayer.Builder().nIn(4).nOut(3).activation(Activation.SOFTMAX).build(),"in").setOutputs("out1","out2").build();
  ComputationGraph cg=new ComputationGraph(conf);
  cg.init();
  List<MultiDataSet> list=new ArrayList<>();
  DataSetIterator iter=new IrisDataSetIterator(30,150);
  while (iter.hasNext()) {
    DataSet ds=iter.next();
    list.add(new org.nd4j.linalg.dataset.MultiDataSet(new INDArray[]{ds.getFeatures()},new INDArray[]{ds.getLabels(),ds.getLabels()}));
  }
  Evaluation e=new Evaluation();
  RegressionEvaluation e2=new RegressionEvaluation();
  Map<Integer,IEvaluation[]> evals=new HashMap<>();
  evals.put(0,new IEvaluation[]{(IEvaluation)e});
  evals.put(1,new IEvaluation[]{(IEvaluation)e2});
  cg.evaluate(new IteratorMultiDataSetIterator(list.iterator(),30),evals);
  assertEquals(150,e.getNumRowCounter());
  assertEquals(150,e2.getExampleCountPerColumn().getInt(0));
}
