@Test public void testMultiOutputEvalCG(){
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").layer("0",new EmbeddingSequenceLayer.Builder().nIn(10).nOut(10).build(),"in").layer("1",new LSTM.Builder().nIn(10).nOut(10).build(),"0").layer("2",new LSTM.Builder().nIn(10).nOut(10).build(),"0").layer("out1",new RnnOutputLayer.Builder().nIn(10).nOut(10).activation(Activation.SOFTMAX).build(),"1").layer("out2",new RnnOutputLayer.Builder().nIn(10).nOut(20).activation(Activation.SOFTMAX).build(),"2").setOutputs("out1","out2").build();
  ComputationGraph cg=new ComputationGraph(conf);
  cg.init();
  org.nd4j.linalg.dataset.MultiDataSet mds=new org.nd4j.linalg.dataset.MultiDataSet(new INDArray[]{Nd4j.create(10,1,10)},new INDArray[]{Nd4j.create(10,10,10),Nd4j.create(10,20,10)});
  Map<Integer,org.nd4j.evaluation.IEvaluation[]> m=new HashMap<>();
  m.put(0,new org.nd4j.evaluation.IEvaluation[]{new org.nd4j.evaluation.classification.Evaluation()});
  m.put(1,new org.nd4j.evaluation.IEvaluation[]{new org.nd4j.evaluation.classification.Evaluation()});
  cg.evaluate(new SingletonMultiDataSetIterator(mds),m);
}
