@Test public void testF1FBeta_MicroMacroAveraging(){
  INDArray zero=Nd4j.create(new double[]{1,0,0});
  INDArray one=Nd4j.create(new double[]{0,1,0});
  INDArray two=Nd4j.create(new double[]{0,0,1});
  Evaluation e=new Evaluation();
  apply(e,3,zero,zero);
  apply(e,1,one,zero);
  apply(e,2,zero,one);
  apply(e,2,one,one);
  apply(e,1,two,one);
  apply(e,3,one,two);
  apply(e,4,two,two);
  assertEquals(3,e.getConfusionMatrix().getCount(0,0));
  assertEquals(1,e.getConfusionMatrix().getCount(0,1));
  assertEquals(0,e.getConfusionMatrix().getCount(0,2));
  assertEquals(2,e.getConfusionMatrix().getCount(1,0));
  assertEquals(2,e.getConfusionMatrix().getCount(1,1));
  assertEquals(1,e.getConfusionMatrix().getCount(1,2));
  assertEquals(0,e.getConfusionMatrix().getCount(2,0));
  assertEquals(3,e.getConfusionMatrix().getCount(2,1));
  assertEquals(4,e.getConfusionMatrix().getCount(2,2));
  double beta=3.5;
  double[] prec=new double[3];
  double[] rec=new double[3];
  for (int i=0; i < 3; i++) {
    prec[i]=e.truePositives().get(i) / (double)(e.truePositives().get(i) + e.falsePositives().get(i));
    rec[i]=e.truePositives().get(i) / (double)(e.truePositives().get(i) + e.falseNegatives().get(i));
  }
  assertEquals(3,(int)e.truePositives().get(0));
  assertEquals(1,(int)e.falseNegatives().get(0));
  assertEquals(2,(int)e.falsePositives().get(0));
  assertEquals(10,(int)e.trueNegatives().get(0));
  assertEquals(2,(int)e.truePositives().get(1));
  assertEquals(3,(int)e.falseNegatives().get(1));
  assertEquals(4,(int)e.falsePositives().get(1));
  assertEquals(7,(int)e.trueNegatives().get(1));
  assertEquals(4,(int)e.truePositives().get(2));
  assertEquals(3,(int)e.falseNegatives().get(2));
  assertEquals(1,(int)e.falsePositives().get(2));
  assertEquals(8,(int)e.trueNegatives().get(2));
  double[] fBeta=new double[3];
  double[] f1=new double[3];
  double[] mcc=new double[3];
  for (int i=0; i < 3; i++) {
    fBeta[i]=(1 + beta * beta) * prec[i] * rec[i] / (beta * beta * prec[i] + rec[i]);
    f1[i]=2 * prec[i] * rec[i] / (prec[i] + rec[i]);
    assertEquals(fBeta[i],e.fBeta(beta,i),1e-6);
    assertEquals(f1[i],e.f1(i),1e-6);
    double gmeasure=Math.sqrt(prec[i] * rec[i]);
    assertEquals(gmeasure,e.gMeasure(i),1e-6);
    double tp=e.truePositives().get(i);
    double tn=e.trueNegatives().get(i);
    double fp=e.falsePositives().get(i);
    double fn=e.falseNegatives().get(i);
    mcc[i]=(tp * tn - fp * fn) / Math.sqrt((tp + fp) * (tp + fn) * (tn + fp)* (tn + fn));
    assertEquals(mcc[i],e.matthewsCorrelation(i),1e-6);
  }
  int tp=0;
  int fn=0;
  int fp=0;
  int tn=0;
  double macroPrecision=0.0;
  double macroRecall=0.0;
  double macroF1=0.0;
  double macroFBeta=0.0;
  double macroMcc=0.0;
  for (int i=0; i < 3; i++) {
    tp+=e.truePositives().get(i);
    fn+=e.falseNegatives().get(i);
    fp+=e.falsePositives().get(i);
    tn+=e.trueNegatives().get(i);
    macroPrecision+=prec[i];
    macroRecall+=rec[i];
    macroF1+=f1[i];
    macroFBeta+=fBeta[i];
    macroMcc+=mcc[i];
  }
  macroPrecision/=3;
  macroRecall/=3;
  macroF1/=3;
  macroFBeta/=3;
  macroMcc/=3;
  double microPrecision=tp / (double)(tp + fp);
  double microRecall=tp / (double)(tp + fn);
  double microFBeta=(1 + beta * beta) * microPrecision * microRecall / (beta * beta * microPrecision + microRecall);
  double microF1=2 * microPrecision * microRecall / (microPrecision + microRecall);
  double microMcc=(tp * tn - fp * fn) / Math.sqrt((tp + fp) * (tp + fn) * (tn + fp)* (tn + fn));
  assertEquals(microPrecision,e.precision(EvaluationAveraging.Micro),1e-6);
  assertEquals(microRecall,e.recall(EvaluationAveraging.Micro),1e-6);
  assertEquals(macroPrecision,e.precision(EvaluationAveraging.Macro),1e-6);
  assertEquals(macroRecall,e.recall(EvaluationAveraging.Macro),1e-6);
  assertEquals(microFBeta,e.fBeta(beta,EvaluationAveraging.Micro),1e-6);
  assertEquals(macroFBeta,e.fBeta(beta,EvaluationAveraging.Macro),1e-6);
  assertEquals(microF1,e.f1(EvaluationAveraging.Micro),1e-6);
  assertEquals(macroF1,e.f1(EvaluationAveraging.Macro),1e-6);
  assertEquals(microMcc,e.matthewsCorrelation(EvaluationAveraging.Micro),1e-6);
  assertEquals(macroMcc,e.matthewsCorrelation(EvaluationAveraging.Macro),1e-6);
}
