@Test @Ignore public void testUI() throws Exception {
  int nChannels=1;
  int outputNum=10;
  int batchSize=64;
  DataSetIterator mnistTrain=new MnistDataSetIterator(batchSize,true,12345);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).l2(0.0005).weightInit(WeightInit.XAVIER).updater(new Nesterovs(0.01,0.9)).list().layer(0,new ConvolutionLayer.Builder(5,5).nIn(nChannels).stride(1,1).nOut(20).activation(Activation.IDENTITY).build()).layer(1,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build()).layer(2,new ConvolutionLayer.Builder(5,5).stride(1,1).nOut(50).activation(Activation.IDENTITY).build()).layer(3,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build()).layer(4,new DenseLayer.Builder().activation(Activation.RELU).nOut(500).build()).layer(5,new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nOut(outputNum).activation(Activation.SOFTMAX).build()).setInputType(InputType.convolutionalFlat(28,28,1)).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  net.setListeners(new ConvolutionalIterationListener(1),new ScoreIterationListener(1));
  for (int i=0; i < 50; i++) {
    net.fit(mnistTrain.next());
    Thread.sleep(1000);
  }
  Thread.sleep(100000);
}
