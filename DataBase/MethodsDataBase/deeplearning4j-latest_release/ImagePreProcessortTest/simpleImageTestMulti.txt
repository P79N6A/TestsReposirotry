@Test public void simpleImageTestMulti(){
  INDArray rChannels=Nd4j.zeros(10,10).addi(128);
  INDArray gChannels=Nd4j.zeros(10,10).addi(64);
  INDArray bChannels=Nd4j.zeros(10,10).addi(255);
  INDArray image=Nd4j.vstack(rChannels,gChannels,bChannels).reshape(3,10,10);
  INDArray orig=image.dup();
  MultiDataSet ds=new MultiDataSet(new INDArray[]{Nd4j.valueArrayOf(10,100.0),image.reshape(1,3,10,10)},new INDArray[]{Nd4j.ones(1,1)});
  ImageMultiPreProcessingScaler myScaler=new ImageMultiPreProcessingScaler(1);
  INDArray expected=image.mul(0);
  expected.slice(0,0).addi(0.5);
  expected.slice(1,0).addi(0.25);
  expected.slice(2,0).addi(1.0);
  myScaler.transform(ds);
  assertEquals(Nd4j.valueArrayOf(10,100.0),ds.getFeatures(0));
  assertTrue(Transforms.abs(ds.getFeatures(1).sub(expected)).maxNumber().doubleValue() <= 0.01);
  ds=new MultiDataSet(new INDArray[]{Nd4j.valueArrayOf(10,100.0),image.reshape(1,3,10,10)},new INDArray[]{Nd4j.ones(1,1)});
  myScaler=new ImageMultiPreProcessingScaler(0.0,1.0,16,new int[]{1});
  expected=image.mul(0);
  expected.slice(0,0).addi(0.5 / 256);
  expected.slice(1,0).addi(0.25 / 256);
  expected.slice(2,0).addi(1.0 / 256);
  myScaler.transform(ds);
  assertEquals(Nd4j.valueArrayOf(10,100.0),ds.getFeatures(0));
  assertTrue(Transforms.abs(ds.getFeatures(1).sub(expected)).maxNumber().doubleValue() <= 0.01);
  INDArray before=ds.getFeatures(1).dup();
  myScaler=new ImageMultiPreProcessingScaler(0.0,1.0,new int[]{1});
  myScaler.transform(ds);
  assertTrue(Transforms.abs(ds.getFeatures(1).sub(before)).maxNumber().doubleValue() <= 0.0001);
  myScaler=new ImageMultiPreProcessingScaler(0.0,(256.0 * 256 * 256 - 1),new int[]{1});
  myScaler.transform(ds);
  assertTrue(Transforms.abs(ds.getFeatures(1).sub(image)).maxNumber().doubleValue() <= 1);
  before=orig.dup();
  myScaler=new ImageMultiPreProcessingScaler(0.0,1.0,1,new int[]{1});
  MultiDataSet beforeDS=new MultiDataSet(new INDArray[]{null,before},new INDArray[]{null});
  myScaler.transform(beforeDS);
  myScaler.revertFeatures(beforeDS.getFeatures());
  assertEquals(orig,before);
}
