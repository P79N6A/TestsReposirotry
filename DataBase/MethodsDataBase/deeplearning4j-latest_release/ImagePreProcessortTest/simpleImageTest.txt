@Test public void simpleImageTest(){
  INDArray rChannels=Nd4j.zeros(10,10).addi(128);
  INDArray gChannels=Nd4j.zeros(10,10).addi(64);
  INDArray bChannels=Nd4j.zeros(10,10).addi(255);
  INDArray image=Nd4j.vstack(rChannels,gChannels,bChannels).reshape(3,10,10);
  INDArray orig=image.dup();
  DataSet ds=new DataSet(image.reshape(1,3,10,10),Nd4j.ones(1,1));
  ImagePreProcessingScaler myScaler=new ImagePreProcessingScaler();
  INDArray expected=image.mul(0);
  expected.slice(0,0).addi(0.5);
  expected.slice(1,0).addi(0.25);
  expected.slice(2,0).addi(1.0);
  myScaler.transform(ds);
  assertTrue(Transforms.abs(ds.getFeatures().sub(expected)).maxNumber().doubleValue() <= 0.01);
  ds=new DataSet(image.reshape(1,3,10,10),Nd4j.ones(1,1));
  myScaler=new ImagePreProcessingScaler(0,1,16);
  expected=image.mul(0);
  expected.slice(0,0).addi(0.5 / 256);
  expected.slice(1,0).addi(0.25 / 256);
  expected.slice(2,0).addi(1.0 / 256);
  myScaler.transform(ds);
  assertTrue(Transforms.abs(ds.getFeatures().sub(expected)).maxNumber().doubleValue() <= 0.01);
  INDArray before=ds.getFeatures().dup();
  myScaler=new ImagePreProcessingScaler(0,1,1);
  myScaler.transform(ds);
  assertTrue(Transforms.abs(ds.getFeatures().sub(before)).maxNumber().doubleValue() <= 0.0001);
  myScaler=new ImagePreProcessingScaler(0,(256 * 256 * 256 - 1),1);
  myScaler.transform(ds);
  assertTrue(Transforms.abs(ds.getFeatures().sub(image)).maxNumber().doubleValue() <= 1);
  before=orig.dup();
  myScaler=new ImagePreProcessingScaler(0,1,1);
  myScaler.transform(before);
  myScaler.revertFeatures(before);
  assertEquals(orig,before);
}
