/** 
 * This test checks for TADs equality between Java & native
 * @throws Exception
 */
@Test public void testEquality1() throws Exception {
  char[] order=new char[]{'c','f'};
  int[] dim_e=new int[]{0,2};
  int[] dim_x=new int[]{1,3};
  List<int[]> dim_3=Arrays.asList(new int[]{0,2,3},new int[]{0,1,2},new int[]{1,2,3},new int[]{0,1,3});
  for (  char o : order) {
    INDArray array=Nd4j.create(new int[]{3,5,7,9},o);
    for (    int e : dim_e) {
      for (      int x : dim_x) {
        int[] shape=new int[]{e,x};
        Arrays.sort(shape);
        INDArray assertion=array.javaTensorAlongDimension(0,shape);
        INDArray test=array.tensorAlongDimension(0,shape);
        assertEquals(assertion,test);
        assertEquals(assertion.shapeInfoDataBuffer(),test.shapeInfoDataBuffer());
      }
    }
  }
  log.info("3D TADs:");
  for (  char o : order) {
    INDArray array=Nd4j.create(new int[]{9,7,5,3},o);
    for (    int[] shape : dim_3) {
      Arrays.sort(shape);
      log.info("About to do shape: " + Arrays.toString(shape) + " for array of shape "+ array.shapeInfoToString());
      INDArray assertion=array.javaTensorAlongDimension(0,shape);
      INDArray test=array.tensorAlongDimension(0,shape);
      assertEquals(assertion,test);
      assertEquals(assertion.shapeInfoDataBuffer(),test.shapeInfoDataBuffer());
    }
  }
}
