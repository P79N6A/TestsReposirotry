@Test(timeout=20000L) public void testParallelInferenceErrorPropagation(){
  int nIn=10;
  int wrongNIn=5;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().activation(Activation.TANH).seed(12345).list().layer(new DenseLayer.Builder().nIn(nIn).nOut(5).build()).layer(new OutputLayer.Builder().nIn(5).nOut(5).activation(Activation.SOFTMAX).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  INDArray inOk=Nd4j.ones(1,nIn);
  INDArray inWrong=Nd4j.ones(1,wrongNIn);
  INDArray expOk=net.output(inOk);
  for (  InferenceMode m : InferenceMode.values()) {
    for (    int w : new int[]{1,2}) {
      log.info("Starting: m={}, w={}",m,w);
      final ParallelInference inf=new ParallelInference.Builder(net).inferenceMode(m).batchLimit(20).queueLimit(64).workers(w).build();
      INDArray actOk=inf.output(inOk);
      assertEquals(expOk,actOk);
      try {
        inf.output(inWrong);
        fail("Expected exception");
      }
 catch (      DL4JInvalidInputException e) {
        System.out.println("Expected exception: " + e.getMessage());
      }
catch (      Exception e) {
        e.printStackTrace();
        fail("Expected other exception type");
      }
      actOk=inf.output(inOk);
      assertEquals(expOk,actOk);
      inf.shutdown();
    }
  }
}
