@Test public void testProvider4() throws Exception {
  LinkedBlockingQueue queue=new LinkedBlockingQueue();
  BasicInferenceObserver observer=new BasicInferenceObserver();
  ParallelInference.ObservablesProvider provider=new ParallelInference.ObservablesProvider(10000000L,4,queue);
  BatchedInferenceObservable observable1=(BatchedInferenceObservable)provider.setInput(observer,Nd4j.create(100).assign(1.0));
  BatchedInferenceObservable observable2=(BatchedInferenceObservable)provider.setInput(observer,Nd4j.create(100).assign(2.0));
  BatchedInferenceObservable observable3=(BatchedInferenceObservable)provider.setInput(observer,Nd4j.create(100).assign(3.0));
  INDArray bigOutput=Nd4j.create(3,10);
  for (int i=0; i < bigOutput.rows(); i++)   bigOutput.getRow(i).assign((float)i);
  Field f=BatchedInferenceObservable.class.getDeclaredField("outputBatchInputArrays");
  f.setAccessible(true);
  List<int[]> l=new ArrayList<>();
  l.add(new int[]{0,2});
  f.set(observable3,l);
  f=BatchedInferenceObservable.class.getDeclaredField("inputs");
  f.setAccessible(true);
  f.set(observable3,Arrays.asList(new INDArray[]{bigOutput.getRow(0)},new INDArray[]{bigOutput.getRow(1)},new INDArray[]{bigOutput.getRow(2)}));
  observable3.setOutputBatches(Collections.singletonList(new INDArray[]{bigOutput}));
  INDArray out=null;
  observable3.setPosition(0);
  out=observable3.getOutput()[0];
  assertArrayEquals(new long[]{1,10},out.shape());
  assertEquals(0.0f,out.meanNumber().floatValue(),0.01f);
  observable3.setPosition(1);
  out=observable3.getOutput()[0];
  assertArrayEquals(new long[]{1,10},out.shape());
  assertEquals(1.0f,out.meanNumber().floatValue(),0.01f);
  observable3.setPosition(2);
  out=observable3.getOutput()[0];
  assertArrayEquals(new long[]{1,10},out.shape());
  assertEquals(2.0f,out.meanNumber().floatValue(),0.01f);
}
