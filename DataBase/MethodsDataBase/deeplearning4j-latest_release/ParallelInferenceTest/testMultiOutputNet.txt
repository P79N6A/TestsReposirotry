@Test(timeout=60000L) public void testMultiOutputNet() throws Exception {
  int nIn=5;
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").layer("out0",new OutputLayer.Builder().nIn(nIn).nOut(4).activation(Activation.SOFTMAX).build(),"in").layer("out1",new OutputLayer.Builder().nIn(nIn).nOut(6).activation(Activation.SOFTMAX).build(),"in").setOutputs("out0","out1").build();
  ComputationGraph net=new ComputationGraph(conf);
  net.init();
  Random r=new Random();
  for (  InferenceMode m : InferenceMode.values()) {
    for (    int w : new int[]{1,2}) {
      final ParallelInference inf=new ParallelInference.Builder(net).inferenceMode(m).batchLimit(5).queueLimit(64).workers(w).build();
      List<INDArray[]> in=new ArrayList<>();
      List<INDArray[]> exp=new ArrayList<>();
      for (int i=0; i < 100; i++) {
        int currNumEx=1 + r.nextInt(3);
        INDArray inArr=Nd4j.rand(new int[]{currNumEx,nIn});
        in.add(new INDArray[]{inArr});
        INDArray[] out=net.output(inArr);
        exp.add(out);
      }
      testParallelInferenceMulti(inf,in,null,exp);
      inf.shutdown();
    }
  }
}
