@Test(timeout=60000L) public void testParallelInferenceVariableLengthTS2() throws Exception {
  Nd4j.getRandom().setSeed(12345);
  int nIn=10;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().activation(Activation.TANH).seed(12345).list().layer(new LSTM.Builder().nIn(nIn).nOut(5).build()).layer(new RnnOutputLayer.Builder().nIn(5).nOut(5).activation(Activation.SOFTMAX).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  int[] defaultSize=new int[]{1,10,5};
  for (  InferenceMode m : InferenceMode.values()) {
    for (    int w : new int[]{2,3}) {
      final ParallelInference inf=new ParallelInference.Builder(net).inferenceMode(m).batchLimit(20).queueLimit(64).workers(w).build();
      List<INDArray> arrs=new ArrayList<>();
      List<INDArray> exp=new ArrayList<>();
      Random r=new Random();
      for (int i=0; i < 500; i++) {
        int[] shape=defaultSize;
        if (r.nextDouble() < 0.4) {
          shape=new int[]{r.nextInt(5) + 1,10,r.nextInt(10) + 1};
        }
        INDArray in=Nd4j.rand(shape);
        arrs.add(in);
        INDArray out=net.output(in);
        exp.add(out);
      }
      testParallelInference(inf,arrs,exp);
      inf.shutdown();
    }
  }
}
