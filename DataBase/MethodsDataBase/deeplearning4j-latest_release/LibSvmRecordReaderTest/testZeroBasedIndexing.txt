@Test public void testZeroBasedIndexing() throws IOException, InterruptedException {
  Map<Integer,List<Writable>> correct=new HashMap<>();
  correct.put(0,Arrays.asList(ZERO,ZERO,ONE,ZERO,new DoubleWritable(2),ZERO,new DoubleWritable(3),ZERO,new DoubleWritable(4),ZERO,new DoubleWritable(5),LABEL_ZERO,LABEL_ONE,LABEL_ZERO,LABEL_ONE,LABEL_ZERO));
  correct.put(1,Arrays.asList(ZERO,new DoubleWritable(0.1),new DoubleWritable(2),ZERO,ZERO,ZERO,new DoubleWritable(6.6),ZERO,new DoubleWritable(80),ZERO,ZERO,LABEL_ZERO,LABEL_ZERO,LABEL_ONE,LABEL_ZERO,LABEL_ZERO));
  correct.put(2,Arrays.asList(ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,LABEL_ZERO,LABEL_ONE,LABEL_ONE,LABEL_ZERO,LABEL_ONE));
  correct.put(3,Arrays.asList(ZERO,new DoubleWritable(1.0),ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,LABEL_ZERO,LABEL_ZERO,LABEL_ZERO,LABEL_ZERO,LABEL_ZERO));
  correct.put(4,Arrays.asList(ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,ZERO,LABEL_ZERO,LABEL_ZERO,LABEL_ZERO,LABEL_ZERO,LABEL_ZERO));
  LibSvmRecordReader rr=new LibSvmRecordReader();
  Configuration config=new Configuration();
  config.setBoolean(SVMLightRecordReader.ZERO_BASED_LABEL_INDEXING,true);
  config.setBoolean(LibSvmRecordReader.APPEND_LABEL,true);
  config.setInt(LibSvmRecordReader.NUM_FEATURES,11);
  config.setBoolean(LibSvmRecordReader.MULTILABEL,true);
  config.setInt(LibSvmRecordReader.NUM_LABELS,5);
  rr.initialize(config,new FileSplit(new ClassPathResource("datavec-api/svmlight/multilabel.txt").getFile()));
  int i=0;
  while (rr.hasNext()) {
    List<Writable> record=rr.next();
    assertEquals(correct.get(i),record);
    i++;
  }
  assertEquals(i,correct.size());
}
