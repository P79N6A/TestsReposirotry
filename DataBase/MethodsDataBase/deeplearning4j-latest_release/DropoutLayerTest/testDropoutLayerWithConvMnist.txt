@Test public void testDropoutLayerWithConvMnist() throws Exception {
  DataSetIterator iter=new MnistDataSetIterator(2,2);
  DataSet next=iter.next();
  Nd4j.getRandom().setSeed(12345);
  MultiLayerConfiguration confIntegrated=new NeuralNetConfiguration.Builder().seed(123).list().layer(0,new ConvolutionLayer.Builder(4,4).stride(2,2).nIn(1).nOut(20).activation(Activation.TANH).weightInit(WeightInit.XAVIER).build()).layer(1,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).weightInit(WeightInit.XAVIER).activation(Activation.SOFTMAX).dropOut(0.5).nOut(10).build()).setInputType(InputType.convolutionalFlat(28,28,1)).build();
  Nd4j.getRandom().setSeed(12345);
  Map<Integer,InputPreProcessor> preProcessorMap=new HashMap<>();
  preProcessorMap.put(1,new CnnToFeedForwardPreProcessor(13,13,20));
  MultiLayerConfiguration confSeparate=new NeuralNetConfiguration.Builder().seed(123).list().layer(0,new ConvolutionLayer.Builder(4,4).stride(2,2).nIn(1).nOut(20).activation(Activation.TANH).weightInit(WeightInit.XAVIER).build()).layer(1,new DropoutLayer.Builder(0.5).build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).weightInit(WeightInit.XAVIER).activation(Activation.SOFTMAX).nOut(10).build()).inputPreProcessors(preProcessorMap).setInputType(InputType.convolutionalFlat(28,28,1)).build();
  Nd4j.getRandom().setSeed(12345);
  MultiLayerNetwork netIntegrated=new MultiLayerNetwork(confIntegrated);
  netIntegrated.init();
  Nd4j.getRandom().setSeed(12345);
  MultiLayerNetwork netSeparate=new MultiLayerNetwork(confSeparate);
  netSeparate.init();
  assertEquals(netIntegrated.params(),netSeparate.params());
  Nd4j.getRandom().setSeed(12345);
  netIntegrated.fit(next);
  Nd4j.getRandom().setSeed(12345);
  netSeparate.fit(next);
  assertEquals(netIntegrated.params(),netSeparate.params());
  assertEquals(netIntegrated.getLayer(0).getParam("W"),netSeparate.getLayer(0).getParam("W"));
  assertEquals(netIntegrated.getLayer(0).getParam("b"),netSeparate.getLayer(0).getParam("b"));
  assertEquals(netIntegrated.getLayer(1).getParam("W"),netSeparate.getLayer(2).getParam("W"));
  assertEquals(netIntegrated.getLayer(1).getParam("b"),netSeparate.getLayer(2).getParam("b"));
  netIntegrated.setInput(next.getFeatures());
  netSeparate.setInput(next.getFeatures());
  Nd4j.getRandom().setSeed(12345);
  List<INDArray> actTrainIntegrated=netIntegrated.feedForward(true);
  Nd4j.getRandom().setSeed(12345);
  List<INDArray> actTrainSeparate=netSeparate.feedForward(true);
  assertEquals(actTrainIntegrated.get(1),actTrainSeparate.get(1));
  assertEquals(actTrainIntegrated.get(2),actTrainSeparate.get(3));
  Nd4j.getRandom().setSeed(12345);
  List<INDArray> actTestIntegrated=netIntegrated.feedForward(false);
  Nd4j.getRandom().setSeed(12345);
  List<INDArray> actTestSeparate=netSeparate.feedForward(false);
  assertEquals(actTestIntegrated.get(1),actTrainSeparate.get(1));
  assertEquals(actTestIntegrated.get(2),actTestSeparate.get(3));
}
