@Test public void testInvalidOrder(){
  try {
    Nd4j.create(new int[]{1},'z');
    fail("Expected failure");
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage().toLowerCase().contains("order"));
  }
  try {
    Nd4j.zeros(1,'z');
    fail("Expected failure");
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage().toLowerCase().contains("order"));
  }
  try {
    Nd4j.zeros(new int[]{1},'z');
    fail("Expected failure");
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage().toLowerCase().contains("order"));
  }
  try {
    Nd4j.create(new long[]{1},'z');
    fail("Expected failure");
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage().toLowerCase().contains("order"));
  }
  try {
    Nd4j.rand('z',1,1);
    fail("Expected failure");
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage().toLowerCase().contains("order"));
  }
  try {
    Nd4j.createUninitialized(new int[]{1},'z');
    fail("Expected failure");
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage().toLowerCase().contains("order"));
  }
  try {
    Nd4j.createUninitialized(new long[]{1},'z');
    fail("Expected failure");
  }
 catch (  IllegalArgumentException e) {
    assertTrue(e.getMessage().toLowerCase().contains("order"));
  }
}
