@Test public void testPutRow(){
  INDArray d=Nd4j.linspace(1,4,4).reshape(2,2);
  INDArray slice1=d.slice(1);
  INDArray n=d.dup();
  float nFirst=2;
  float dFirst=d.getFloat(0,1);
  assertEquals(nFirst,dFirst,1e-1);
  assertEquals(d,n);
  assertEquals(true,Arrays.equals(new long[]{2,2},n.shape()));
  INDArray newRow=Nd4j.linspace(5,6,2);
  n.putRow(0,newRow);
  d.putRow(0,newRow);
  INDArray testRow=n.getRow(0);
  assertEquals(newRow.length(),testRow.length());
  assertEquals(true,Shape.shapeEquals(new long[]{1,2},testRow.shape()));
  INDArray nLast=Nd4j.create(Nd4j.linspace(1,4,4).data(),new long[]{2,2});
  INDArray row=nLast.getRow(1);
  INDArray row1=Nd4j.create(new double[]{3,4},new long[]{1,2});
  assertEquals(row,row1);
  INDArray arr=Nd4j.create(new long[]{3,2});
  INDArray evenRow=Nd4j.create(new double[]{1,2},new long[]{1,2});
  arr.putRow(0,evenRow);
  INDArray firstRow=arr.getRow(0);
  assertEquals(true,Shape.shapeEquals(new long[]{1,2},firstRow.shape()));
  INDArray testRowEven=arr.getRow(0);
  assertEquals(evenRow,testRowEven);
  INDArray row12=Nd4j.create(new double[]{5,6},new long[]{1,2});
  arr.putRow(1,row12);
  assertEquals(true,Shape.shapeEquals(new long[]{1,2},arr.getRow(0).shape()));
  INDArray testRow1=arr.getRow(1);
  assertEquals(row12,testRow1);
  INDArray multiSliceTest=Nd4j.create(Nd4j.linspace(1,16,16).data(),new long[]{4,2,2});
  INDArray test=Nd4j.create(new double[]{5,6},new long[]{1,2});
  INDArray test2=Nd4j.create(new double[]{7,8},new long[]{1,2});
  INDArray multiSliceRow1=multiSliceTest.slice(1).getRow(0);
  INDArray multiSliceRow2=multiSliceTest.slice(1).getRow(1);
  assertEquals(test,multiSliceRow1);
  assertEquals(test2,multiSliceRow2);
  INDArray threeByThree=Nd4j.create(3,3);
  INDArray threeByThreeRow1AndTwo=threeByThree.get(NDArrayIndex.interval(1,3),NDArrayIndex.all());
  threeByThreeRow1AndTwo.putRow(1,Nd4j.ones(3));
  assertEquals(Nd4j.ones(3),threeByThreeRow1AndTwo.getRow(1));
}
