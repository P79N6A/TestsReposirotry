@Test public void testIsMax2of4d(){
  Nd4j.getRandom().setSeed(12345);
  val s=new long[]{2,3,4,5};
  INDArray arr=Nd4j.rand(s);
  INDArray exp=Nd4j.create(s);
  for (int i=0; i < 4; i++) {
    for (int j=0; j < 5; j++) {
      INDArray subset=arr.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.point(i),NDArrayIndex.point(j));
      INDArray subsetExp=exp.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.point(i),NDArrayIndex.point(j));
      assertArrayEquals(new long[]{2,3},subset.shape());
      NdIndexIterator iter=new NdIndexIterator(2,3);
      val maxIdx=new long[]{0,0};
      double max=-Double.MAX_VALUE;
      while (iter.hasNext()) {
        val next=iter.next();
        double d=subset.getDouble(next);
        if (d > max) {
          max=d;
          maxIdx[0]=next[0];
          maxIdx[1]=next[1];
        }
      }
      subsetExp.putScalar(maxIdx,1.0);
    }
  }
  INDArray actC=Nd4j.getExecutioner().execAndReturn(new IsMax(arr.dup('c'),0,1));
  INDArray actF=Nd4j.getExecutioner().execAndReturn(new IsMax(arr.dup('f'),0,1));
  assertEquals(exp,actC);
  assertEquals(exp,actF);
  exp=Nd4j.create(s);
  for (int i=0; i < 2; i++) {
    for (int j=0; j < 3; j++) {
      INDArray subset=arr.get(NDArrayIndex.point(i),NDArrayIndex.point(j),NDArrayIndex.all(),NDArrayIndex.all());
      INDArray subsetExp=exp.get(NDArrayIndex.point(i),NDArrayIndex.point(j),NDArrayIndex.all(),NDArrayIndex.all());
      assertArrayEquals(new long[]{4,5},subset.shape());
      NdIndexIterator iter=new NdIndexIterator(4,5);
      val maxIdx=new long[]{0,0};
      double max=-Double.MAX_VALUE;
      while (iter.hasNext()) {
        val next=iter.next();
        double d=subset.getDouble(next);
        if (d > max) {
          max=d;
          maxIdx[0]=next[0];
          maxIdx[1]=next[1];
        }
      }
      subsetExp.putScalar(maxIdx,1.0);
    }
  }
  actC=Nd4j.getExecutioner().execAndReturn(new IsMax(arr.dup('c'),2,3));
  actF=Nd4j.getExecutioner().execAndReturn(new IsMax(arr.dup('f'),2,3));
  assertEquals(exp,actC);
  assertEquals(exp,actF);
}
