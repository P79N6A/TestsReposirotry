@Test public void testToFlattened2(){
  int rows=3;
  int cols=4;
  int dim2=5;
  int dim3=6;
  int length2d=rows * cols;
  int length3d=rows * cols * dim2;
  int length4d=rows * cols * dim2* dim3;
  INDArray c2d=Nd4j.linspace(1,length2d,length2d).reshape('c',rows,cols);
  INDArray f2d=Nd4j.create(new long[]{rows,cols},'f').assign(c2d).addi(0.1);
  INDArray c3d=Nd4j.linspace(1,length3d,length3d).reshape('c',rows,cols,dim2);
  INDArray f3d=Nd4j.create(new long[]{rows,cols,dim2}).assign(c3d).addi(0.3);
  c3d.addi(0.2);
  INDArray c4d=Nd4j.linspace(1,length4d,length4d).reshape('c',rows,cols,dim2,dim3);
  INDArray f4d=Nd4j.create(new long[]{rows,cols,dim2,dim3}).assign(c4d).addi(0.3);
  c4d.addi(0.4);
  assertEquals(toFlattenedViaIterator('c',c2d,f2d),Nd4j.toFlattened('c',c2d,f2d));
  assertEquals(toFlattenedViaIterator('f',c2d,f2d),Nd4j.toFlattened('f',c2d,f2d));
  assertEquals(toFlattenedViaIterator('c',f2d,c2d),Nd4j.toFlattened('c',f2d,c2d));
  assertEquals(toFlattenedViaIterator('f',f2d,c2d),Nd4j.toFlattened('f',f2d,c2d));
  assertEquals(toFlattenedViaIterator('c',c3d,f3d),Nd4j.toFlattened('c',c3d,f3d));
  assertEquals(toFlattenedViaIterator('f',c3d,f3d),Nd4j.toFlattened('f',c3d,f3d));
  assertEquals(toFlattenedViaIterator('c',c2d,f2d,c3d,f3d),Nd4j.toFlattened('c',c2d,f2d,c3d,f3d));
  assertEquals(toFlattenedViaIterator('f',c2d,f2d,c3d,f3d),Nd4j.toFlattened('f',c2d,f2d,c3d,f3d));
  assertEquals(toFlattenedViaIterator('c',c4d,f4d),Nd4j.toFlattened('c',c4d,f4d));
  assertEquals(toFlattenedViaIterator('f',c4d,f4d),Nd4j.toFlattened('f',c4d,f4d));
  assertEquals(toFlattenedViaIterator('c',c2d,f2d,c3d,f3d,c4d,f4d),Nd4j.toFlattened('c',c2d,f2d,c3d,f3d,c4d,f4d));
  assertEquals(toFlattenedViaIterator('f',c2d,f2d,c3d,f3d,c4d,f4d),Nd4j.toFlattened('f',c2d,f2d,c3d,f3d,c4d,f4d));
}
