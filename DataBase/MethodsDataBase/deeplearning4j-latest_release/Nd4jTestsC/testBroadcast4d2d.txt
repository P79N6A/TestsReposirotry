@Test public void testBroadcast4d2d(){
  char[] orders={'c','f'};
  for (  char orderArr : orders) {
    for (    char orderbc : orders) {
      System.out.println(orderArr + "\t" + orderbc);
      INDArray arrOrig=Nd4j.ones(3,4,5,6).dup(orderArr);
      INDArray bc01=Nd4j.create(new double[][]{{1,1,1,1},{1,0,1,1},{1,1,0,0}}).dup(orderbc);
      INDArray result01=arrOrig.dup(orderArr);
      Nd4j.getExecutioner().exec(new BroadcastMulOp(result01,bc01,result01,0,1));
      for (int d2=0; d2 < 5; d2++) {
        for (int d3=0; d3 < 6; d3++) {
          INDArray subset=result01.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.point(d2),NDArrayIndex.point(d3));
          assertEquals(bc01,subset);
        }
      }
      INDArray bc02=Nd4j.create(new double[][]{{1,1,1,1,1},{1,0,0,1,1},{1,1,1,0,0}}).dup(orderbc);
      INDArray result02=arrOrig.dup(orderArr);
      Nd4j.getExecutioner().exec(new BroadcastMulOp(result02,bc02,result02,0,2));
      for (int d1=0; d1 < 4; d1++) {
        for (int d3=0; d3 < 6; d3++) {
          INDArray subset=result02.get(NDArrayIndex.all(),NDArrayIndex.point(d1),NDArrayIndex.all(),NDArrayIndex.point(d3));
          assertEquals(bc02,subset);
        }
      }
      INDArray bc03=Nd4j.create(new double[][]{{1,1,1,1,1,1},{1,0,0,1,1,1},{1,1,1,0,0,0}}).dup(orderbc);
      INDArray result03=arrOrig.dup(orderArr);
      Nd4j.getExecutioner().exec(new BroadcastMulOp(result03,bc03,result03,0,3));
      for (int d1=0; d1 < 4; d1++) {
        for (int d2=0; d2 < 5; d2++) {
          INDArray subset=result03.get(NDArrayIndex.all(),NDArrayIndex.point(d1),NDArrayIndex.point(d2),NDArrayIndex.all());
          assertEquals(bc03,subset);
        }
      }
      INDArray bc12=Nd4j.create(new double[][]{{1,1,1,1,1},{0,1,1,1,1},{1,0,0,1,1},{1,1,1,0,0}}).dup(orderbc);
      INDArray result12=arrOrig.dup(orderArr);
      Nd4j.getExecutioner().exec(new BroadcastMulOp(result12,bc12,result12,1,2));
      for (int d0=0; d0 < 3; d0++) {
        for (int d3=0; d3 < 6; d3++) {
          INDArray subset=result12.get(NDArrayIndex.point(d0),NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.point(d3));
          assertEquals(bc12,subset);
        }
      }
      INDArray bc13=Nd4j.create(new double[][]{{1,1,1,1,1,1},{0,1,1,1,1,1},{1,0,0,1,1,1},{1,1,1,0,0,1}}).dup(orderbc);
      INDArray result13=arrOrig.dup(orderArr);
      Nd4j.getExecutioner().exec(new BroadcastMulOp(result13,bc13,result13,1,3));
      for (int d0=0; d0 < 3; d0++) {
        for (int d2=0; d2 < 5; d2++) {
          INDArray subset=result13.get(NDArrayIndex.point(d0),NDArrayIndex.all(),NDArrayIndex.point(d2),NDArrayIndex.all());
          assertEquals(bc13,subset);
        }
      }
      INDArray bc23=Nd4j.create(new double[][]{{1,1,1,1,1,1},{1,0,0,1,1,1},{1,1,1,0,0,0},{1,1,1,0,0,0},{1,1,1,0,0,0}}).dup(orderbc);
      INDArray result23=arrOrig.dup(orderArr);
      Nd4j.getExecutioner().exec(new BroadcastMulOp(result23,bc23,result23,2,3));
      for (int d0=0; d0 < 3; d0++) {
        for (int d1=0; d1 < 4; d1++) {
          INDArray subset=result23.get(NDArrayIndex.point(d0),NDArrayIndex.point(d1),NDArrayIndex.all(),NDArrayIndex.all());
          assertEquals(bc23,subset);
        }
      }
    }
  }
}
