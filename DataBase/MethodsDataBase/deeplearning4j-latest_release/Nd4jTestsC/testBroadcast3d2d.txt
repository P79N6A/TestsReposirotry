@Test public void testBroadcast3d2d(){
  char[] orders={'c','f'};
  for (  char orderArr : orders) {
    for (    char orderbc : orders) {
      System.out.println(orderArr + "\t" + orderbc);
      INDArray arrOrig=Nd4j.ones(3,4,5).dup(orderArr);
      INDArray bc01=Nd4j.create(new double[][]{{1,1,1,1},{1,0,1,1},{1,1,0,0}}).dup(orderbc);
      INDArray result01=arrOrig.dup(orderArr);
      Nd4j.getExecutioner().exec(new BroadcastMulOp(arrOrig,bc01,result01,0,1));
      for (int i=0; i < 5; i++) {
        INDArray subset=result01.tensorAlongDimension(i,0,1);
        assertEquals(bc01,subset);
      }
      INDArray bc02=Nd4j.create(new double[][]{{1,1,1,1,1},{1,0,0,1,1},{1,1,1,0,0}}).dup(orderbc);
      INDArray result02=arrOrig.dup(orderArr);
      Nd4j.getExecutioner().exec(new BroadcastMulOp(arrOrig,bc02,result02,0,2));
      for (int i=0; i < 4; i++) {
        INDArray subset=result02.tensorAlongDimension(i,0,2);
        assertEquals(bc02,subset);
      }
      INDArray bc12=Nd4j.create(new double[][]{{1,1,1,1,1},{0,1,1,1,1},{1,0,0,1,1},{1,1,1,0,0}}).dup(orderbc);
      INDArray result12=arrOrig.dup(orderArr);
      Nd4j.getExecutioner().exec(new BroadcastMulOp(arrOrig,bc12,result12,1,2));
      for (int i=0; i < 3; i++) {
        INDArray subset=result12.tensorAlongDimension(i,1,2);
        assertEquals("Failed for subset " + i,bc12,subset);
      }
    }
  }
}
