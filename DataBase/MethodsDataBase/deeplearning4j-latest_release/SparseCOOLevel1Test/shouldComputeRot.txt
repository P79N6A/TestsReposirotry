@Test public void shouldComputeRot(){
  INDArray temp1=Nd4j.create(new double[]{1,2,0,4});
  INDArray temp2=Nd4j.create(new double[]{1,2,3,4});
  System.out.println("before: " + temp1.data() + " "+ temp2.data());
  Nd4j.getBlasWrapper().level1().rot(temp1.length(),temp1,temp2,1,2);
  System.out.println("after: " + temp1.data() + " "+ temp2.data());
  INDArray sparseVec=Nd4j.createSparseCOO(data,indexes,shape);
  INDArray vec=Nd4j.create(new double[]{1,2,3,4});
  Nd4j.getBlasWrapper().level1().rot(vec.length(),sparseVec,vec,1,2);
  System.out.println(sparseVec.data() + " " + vec.data());
  INDArray expectedSparseVec=Nd4j.createSparseCSR(new double[]{3,6,6,12},new int[]{0,1,2,3},new int[]{0},new int[]{4},new long[]{1,4});
  INDArray expectedVec=Nd4j.create(new double[]{-1,-2,3,-4});
  assertEquals(getFailureMessage(),expectedSparseVec.data(),sparseVec.data());
  assertEquals(getFailureMessage(),expectedVec,vec);
}
