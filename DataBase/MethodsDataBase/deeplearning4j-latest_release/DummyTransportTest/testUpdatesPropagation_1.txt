@Test public void testUpdatesPropagation_1() throws Exception {
  val counter=new AtomicInteger(0);
  val connector=new DummyTransport.Connector();
  val transportA=new DummyTransport("alpha",connector);
  val transportB=new DummyTransport("beta",connector);
  val transportG=new DummyTransport("gamma",connector);
  val transportD=new DummyTransport("delta",connector);
  connector.register(transportA,transportB,transportG,transportD);
  transportB.sendMessage(new HandshakeRequest(),"alpha");
  transportG.sendMessage(new HandshakeRequest(),"alpha");
  transportD.sendMessage(new HandshakeRequest(),"alpha");
  val f=new MessageCallable<GradientsUpdateMessage>(){
    @Override public void apply(    GradientsUpdateMessage message){
      val update=message.getPayload();
      counter.addAndGet(update.sumNumber().intValue());
    }
  }
;
  transportA.addPrecursor(GradientsUpdateMessage.class,f);
  transportB.addPrecursor(GradientsUpdateMessage.class,f);
  transportG.addPrecursor(GradientsUpdateMessage.class,f);
  transportD.addPrecursor(GradientsUpdateMessage.class,f);
  val array=Nd4j.ones(10,10);
  val msg=new GradientsUpdateMessage("message",array);
  msg.setOriginatorId("beta");
  transportB.propagateMessage(msg,PropagationMode.BOTH_WAYS);
  assertEquals(400,counter.get());
}
