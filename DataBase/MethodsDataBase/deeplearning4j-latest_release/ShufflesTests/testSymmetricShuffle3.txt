@Test public void testSymmetricShuffle3() throws Exception {
  INDArray features=Nd4j.zeros(10,10,20);
  INDArray featuresMask=Nd4j.zeros(10,20);
  INDArray labels=Nd4j.zeros(10,10,3);
  INDArray labelsMask=Nd4j.zeros(10,3);
  for (int x=0; x < 10; x++) {
    features.slice(x).assign(x);
    featuresMask.slice(x).assign(x);
    labels.slice(x).assign(x);
    labelsMask.slice(x).assign(x);
  }
  OrderScanner3D scannerFeatures=new OrderScanner3D(features);
  OrderScanner3D scannerLabels=new OrderScanner3D(labels);
  OrderScanner3D scannerFeaturesMask=new OrderScanner3D(featuresMask);
  OrderScanner3D scannerLabelsMask=new OrderScanner3D(labelsMask);
  List<INDArray> arrays=new ArrayList<>();
  arrays.add(features);
  arrays.add(labels);
  arrays.add(featuresMask);
  arrays.add(labelsMask);
  List<int[]> dimensions=new ArrayList<>();
  dimensions.add(ArrayUtil.range(1,features.rank()));
  dimensions.add(ArrayUtil.range(1,labels.rank()));
  dimensions.add(ArrayUtil.range(1,featuresMask.rank()));
  dimensions.add(ArrayUtil.range(1,labelsMask.rank()));
  Nd4j.shuffle(arrays,new Random(11),dimensions);
  assertTrue(scannerFeatures.compareSlice(features));
  assertTrue(scannerLabels.compareSlice(labels));
  assertTrue(scannerFeaturesMask.compareSlice(featuresMask));
  assertTrue(scannerLabelsMask.compareSlice(labelsMask));
  for (int x=0; x < 10; x++) {
    double val=features.slice(x).getDouble(0);
    INDArray sliceLabels=labels.slice(x);
    INDArray sliceLabelsMask=labelsMask.slice(x);
    INDArray sliceFeaturesMask=featuresMask.slice(x);
    for (int y=0; y < sliceLabels.length(); y++) {
      assertEquals(val,sliceLabels.getDouble(y),0.001);
    }
    for (int y=0; y < sliceLabelsMask.length(); y++) {
      assertEquals(val,sliceLabelsMask.getDouble(y),0.001);
    }
    for (int y=0; y < sliceFeaturesMask.length(); y++) {
      assertEquals(val,sliceFeaturesMask.getDouble(y),0.001);
    }
  }
}
