@Test public void testConvertPix() throws Exception {
  PIX pix;
  Mat mat;
  pix=pixCreate(11,22,1);
  mat=NativeImageLoader.convert(pix);
  assertEquals(11,mat.cols());
  assertEquals(22,mat.rows());
  assertEquals(CV_8UC1,mat.type());
  pix=pixCreate(33,44,2);
  mat=NativeImageLoader.convert(pix);
  assertEquals(33,mat.cols());
  assertEquals(44,mat.rows());
  assertEquals(CV_8UC1,mat.type());
  pix=pixCreate(55,66,4);
  mat=NativeImageLoader.convert(pix);
  assertEquals(55,mat.cols());
  assertEquals(66,mat.rows());
  assertEquals(CV_8UC1,mat.type());
  pix=pixCreate(77,88,8);
  mat=NativeImageLoader.convert(pix);
  assertEquals(77,mat.cols());
  assertEquals(88,mat.rows());
  assertEquals(CV_8UC1,mat.type());
  pix=pixCreate(99,111,16);
  mat=NativeImageLoader.convert(pix);
  assertEquals(99,mat.cols());
  assertEquals(111,mat.rows());
  assertEquals(CV_8UC2,mat.type());
  pix=pixCreate(222,333,24);
  mat=NativeImageLoader.convert(pix);
  assertEquals(222,mat.cols());
  assertEquals(333,mat.rows());
  assertEquals(CV_8UC3,mat.type());
  pix=pixCreate(444,555,32);
  mat=NativeImageLoader.convert(pix);
  assertEquals(444,mat.cols());
  assertEquals(555,mat.rows());
  assertEquals(CV_8UC4,mat.type());
  pix=pixCreate(32,32,8);
  PIXCMAP cmap=pixcmapCreateLinear(8,256);
  pixSetColormap(pix,cmap);
  mat=NativeImageLoader.convert(pix);
  assertEquals(32,mat.cols());
  assertEquals(32,mat.rows());
  assertEquals(CV_8UC4,mat.type());
  int w4=100, h4=238, ch4=1, pages=1;
  String path2MitosisFile="datavec-data-image/testimages2/mitosis.tif";
  NativeImageLoader loader5=new NativeImageLoader(h4,w4,ch4,NativeImageLoader.MultiPageMode.FIRST);
  INDArray array6=null;
  try {
    array6=loader5.asMatrix(new ClassPathResource(path2MitosisFile).getFile().getAbsolutePath());
  }
 catch (  IOException e) {
    e.printStackTrace();
    fail();
  }
  assertEquals(4,array6.rank());
  assertEquals(pages,array6.size(0));
  assertEquals(ch4,array6.size(1));
  assertEquals(h4,array6.size(2));
  assertEquals(w4,array6.size(3));
  int ch5=4, pages1=1;
  NativeImageLoader loader6=new NativeImageLoader(h4,w4,1,NativeImageLoader.MultiPageMode.CHANNELS);
  loader6.direct=false;
  INDArray array7=null;
  try {
    array7=loader6.asMatrix(new ClassPathResource(path2MitosisFile).getFile());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  assertEquals(4,array7.rank());
  assertEquals(pages1,array7.size(0));
  assertEquals(ch5,array7.size(1));
  assertEquals(h4,array7.size(2));
  assertEquals(w4,array7.size(3));
  int ch6=1, pages2=4;
  NativeImageLoader loader7=new NativeImageLoader(h4,w4,ch6,NativeImageLoader.MultiPageMode.MINIBATCH);
  INDArray array8=null;
  try {
    array8=loader7.asMatrix(new ClassPathResource(path2MitosisFile).getFile().getAbsolutePath());
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  assertEquals(4,array8.rank());
  assertEquals(pages2,array8.size(0));
  assertEquals(ch6,array8.size(1));
  assertEquals(h4,array8.size(2));
  assertEquals(w4,array8.size(3));
}
