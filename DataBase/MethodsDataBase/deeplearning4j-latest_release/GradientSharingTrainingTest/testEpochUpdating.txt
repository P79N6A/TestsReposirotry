@Test public void testEpochUpdating() throws Exception {
  File temp=testDir.newFolder();
  String controller=Inet4Address.getLocalHost().getHostAddress();
  String networkMask=controller.substring(0,controller.lastIndexOf('.')) + ".0" + "/16";
  VoidConfiguration voidConfiguration=VoidConfiguration.builder().unicastPort(40123).networkMask(networkMask).controllerAddress(controller).meshBuildMode(MeshBuildMode.PLAIN).build();
  SharedTrainingMaster tm=new SharedTrainingMaster.Builder(voidConfiguration,2,new AdaptiveThresholdAlgorithm(1e-3),16).rngSeed(12345).collectTrainingStats(false).batchSizePerWorker(16).workersPerNode(2).exportDirectory("file:///" + temp.getAbsolutePath().replaceAll("\\\\","/")).build();
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).updater(new AMSGrad(0.1)).graphBuilder().addInputs("in").layer("out",new OutputLayer.Builder().nIn(784).nOut(10).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build(),"in").setOutputs("out").build();
  SparkComputationGraph sparkNet=new SparkComputationGraph(sc,conf,tm);
  sparkNet.setListeners(new TestListener());
  DataSetIterator iter=new MnistDataSetIterator(16,true,12345);
  int count=0;
  List<String> paths=new ArrayList<>();
  List<DataSet> ds=new ArrayList<>();
  File f=testDir.newFolder();
  while (iter.hasNext() && count++ < 8) {
    DataSet d=iter.next();
    File out=new File(f,count + ".bin");
    d.save(out);
    String path="file:///" + out.getAbsolutePath().replaceAll("\\\\","/");
    paths.add(path);
    ds.add(d);
  }
  JavaRDD<String> pathRdd=sc.parallelize(paths);
  for (int i=0; i < 3; i++) {
    ThresholdAlgorithm ta=tm.getThresholdAlgorithm();
    sparkNet.fitPaths(pathRdd);
    ThresholdAlgorithm taAfter=tm.getThresholdAlgorithm();
    assertTrue("Threshold algorithm should have been updated with different instance after averaging",ta != taAfter);
    AdaptiveThresholdAlgorithm ataAfter=(AdaptiveThresholdAlgorithm)taAfter;
    assertFalse(Double.isNaN(ataAfter.getLastSparsity()));
    assertFalse(Double.isNaN(ataAfter.getLastThreshold()));
  }
  Set<Integer> expectedEpochs=new HashSet<>(Arrays.asList(0,1,2));
  assertEquals(expectedEpochs,TestListener.epochs);
}
