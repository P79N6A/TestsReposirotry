@Test public void differentNetsTrainingTest() throws Exception {
  int batch=3;
  File temp=testDir.newFolder();
  DataSet ds=new IrisDataSetIterator(150,150).next();
  List<DataSet> list=ds.asList();
  Collections.shuffle(list,new Random(12345));
  int pos=0;
  int dsCount=0;
  while (pos < list.size()) {
    List<DataSet> l2=new ArrayList<>();
    for (int i=0; i < 3 && pos < list.size(); i++) {
      l2.add(list.get(pos++));
    }
    DataSet d=DataSet.merge(l2);
    File f=new File(temp,dsCount++ + ".bin");
    d.save(f);
  }
  INDArray last=null;
  INDArray lastDup=null;
  for (int i=0; i < 2; i++) {
    System.out.println("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
    log.info("Starting: {}",i);
    MultiLayerConfiguration conf;
    if (i == 0) {
      conf=new NeuralNetConfiguration.Builder().weightInit(WeightInit.XAVIER).seed(12345).list().layer(new OutputLayer.Builder().nIn(4).nOut(3).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build()).build();
    }
 else {
      conf=new NeuralNetConfiguration.Builder().weightInit(WeightInit.XAVIER).seed(12345).list().layer(new DenseLayer.Builder().nIn(4).nOut(4).activation(Activation.TANH).build()).layer(new OutputLayer.Builder().nIn(4).nOut(3).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build()).build();
    }
    MultiLayerNetwork net=new MultiLayerNetwork(conf);
    net.init();
    String controller=Inet4Address.getLocalHost().getHostAddress();
    String networkMask=controller.substring(0,controller.lastIndexOf('.')) + ".0" + "/16";
    VoidConfiguration voidConfiguration=VoidConfiguration.builder().unicastPort(40123).networkMask(networkMask).controllerAddress(controller).build();
    TrainingMaster tm=new SharedTrainingMaster.Builder(voidConfiguration,2,new FixedThresholdAlgorithm(1e-4),batch).rngSeed(12345).collectTrainingStats(false).batchSizePerWorker(batch).workersPerNode(2).build();
    SparkDl4jMultiLayer sparkNet=new SparkDl4jMultiLayer(sc,net,tm);
    System.out.println(Arrays.toString(sparkNet.getNetwork().params().get(NDArrayIndex.point(0),NDArrayIndex.interval(0,256)).dup().data().asFloat()));
    String fitPath="file:///" + temp.getAbsolutePath().replaceAll("\\\\","/");
    INDArray paramsBefore=net.params().dup();
    for (int j=0; j < 3; j++) {
      sparkNet.fit(fitPath);
    }
    INDArray paramsAfter=net.params();
    assertNotEquals(paramsBefore,paramsAfter);
    if (i == 0) {
      last=sparkNet.getNetwork().params();
      lastDup=last.dup();
    }
 else {
      assertEquals(lastDup,last);
    }
  }
}
