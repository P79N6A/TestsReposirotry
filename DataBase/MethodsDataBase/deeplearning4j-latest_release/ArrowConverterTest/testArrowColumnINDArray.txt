@Test public void testArrowColumnINDArray(){
  Schema.Builder schema=new Schema.Builder();
  List<String> single=new ArrayList<>();
  int numCols=2;
  INDArray arr=Nd4j.linspace(1,4,4);
  for (int i=0; i < numCols; i++) {
    schema.addColumnNDArray(String.valueOf(i),new long[]{1,4});
    single.add(String.valueOf(i));
  }
  Schema buildSchema=schema.build();
  List<List<Writable>> list=new ArrayList<>();
  List<Writable> firstRow=new ArrayList<>();
  for (int i=0; i < numCols; i++) {
    firstRow.add(new NDArrayWritable(arr));
  }
  list.add(firstRow);
  List<FieldVector> fieldVectors=ArrowConverter.toArrowColumns(bufferAllocator,buildSchema,list);
  assertEquals(numCols,fieldVectors.size());
  assertEquals(1,fieldVectors.get(0).getValueCount());
  assertFalse(fieldVectors.get(0).isNull(0));
  ArrowWritableRecordBatch arrowWritableRecordBatch=ArrowConverter.toArrowWritables(fieldVectors,buildSchema);
  assertEquals(1,arrowWritableRecordBatch.size());
  Writable writable=arrowWritableRecordBatch.get(0).get(0);
  assertTrue(writable instanceof NDArrayWritable);
  NDArrayWritable ndArrayWritable=(NDArrayWritable)writable;
  assertEquals(arr,ndArrayWritable.get());
  Writable writable1=ArrowConverter.fromEntry(0,fieldVectors.get(0),ColumnType.NDArray);
  NDArrayWritable ndArrayWritablewritable1=(NDArrayWritable)writable1;
  System.out.println(ndArrayWritablewritable1.get());
}
