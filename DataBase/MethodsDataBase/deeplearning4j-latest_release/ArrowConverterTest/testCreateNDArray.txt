@Test public void testCreateNDArray() throws Exception {
  val recordsToWrite=recordToWrite();
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  ArrowConverter.writeRecordBatchTo(recordsToWrite.getRight(),recordsToWrite.getFirst(),byteArrayOutputStream);
  File f=testDir.newFolder();
  File tmpFile=new File(f,"tmp-arrow-file-" + UUID.randomUUID().toString() + ".arrorw");
  FileOutputStream outputStream=new FileOutputStream(tmpFile);
  tmpFile.deleteOnExit();
  ArrowConverter.writeRecordBatchTo(recordsToWrite.getRight(),recordsToWrite.getFirst(),outputStream);
  outputStream.flush();
  outputStream.close();
  Pair<Schema,ArrowWritableRecordBatch> schemaArrowWritableRecordBatchPair=ArrowConverter.readFromFile(tmpFile);
  assertEquals(recordsToWrite.getFirst(),schemaArrowWritableRecordBatchPair.getFirst());
  assertEquals(recordsToWrite.getRight(),schemaArrowWritableRecordBatchPair.getRight().toArrayList());
  byte[] arr=byteArrayOutputStream.toByteArray();
  val read=ArrowConverter.readFromBytes(arr);
  assertEquals(recordsToWrite,read);
  File tmp=tmpDataFile(recordsToWrite);
  ArrowRecordReader recordReader=new ArrowRecordReader();
  recordReader.initialize(new FileSplit(tmp));
  recordReader.next();
  ArrowWritableRecordBatch currentBatch=recordReader.getCurrentBatch();
  INDArray arr2=ArrowConverter.toArray(currentBatch);
  assertEquals(2,arr2.rows());
  assertEquals(2,arr2.columns());
}
