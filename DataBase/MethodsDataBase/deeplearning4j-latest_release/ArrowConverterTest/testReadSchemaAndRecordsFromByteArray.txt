@Test public void testReadSchemaAndRecordsFromByteArray() throws Exception {
  BufferAllocator allocator=new RootAllocator(Long.MAX_VALUE);
  int valueCount=3;
  List<Field> fields=new ArrayList<>();
  fields.add(ArrowConverter.field("field1",new ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE)));
  fields.add(ArrowConverter.intField("field2"));
  List<FieldVector> fieldVectors=new ArrayList<>();
  fieldVectors.add(ArrowConverter.vectorFor(allocator,"field1",new float[]{1,2,3}));
  fieldVectors.add(ArrowConverter.vectorFor(allocator,"field2",new int[]{1,2,3}));
  org.apache.arrow.vector.types.pojo.Schema schema=new org.apache.arrow.vector.types.pojo.Schema(fields);
  VectorSchemaRoot schemaRoot1=new VectorSchemaRoot(schema,fieldVectors,valueCount);
  VectorUnloader vectorUnloader=new VectorUnloader(schemaRoot1);
  vectorUnloader.getRecordBatch();
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  try (ArrowFileWriter arrowFileWriter=new ArrowFileWriter(schemaRoot1,null,newChannel(byteArrayOutputStream))){
    arrowFileWriter.writeBatch();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  byte[] arr=byteArrayOutputStream.toByteArray();
  val arr2=ArrowConverter.readFromBytes(arr);
  assertEquals(2,arr2.getFirst().numColumns());
  assertEquals(3,arr2.getRight().size());
  val arrowCols=ArrowConverter.toArrowColumns(allocator,arr2.getFirst(),arr2.getRight());
  assertEquals(2,arrowCols.size());
  assertEquals(valueCount,arrowCols.get(0).getValueCount());
}
