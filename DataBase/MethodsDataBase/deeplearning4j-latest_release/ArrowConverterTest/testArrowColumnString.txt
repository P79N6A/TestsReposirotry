@Test public void testArrowColumnString(){
  Schema.Builder schema=new Schema.Builder();
  List<String> single=new ArrayList<>();
  for (int i=0; i < 2; i++) {
    schema.addColumnInteger(String.valueOf(i));
    single.add(String.valueOf(i));
  }
  List<FieldVector> fieldVectors=ArrowConverter.toArrowColumnsStringSingle(bufferAllocator,schema.build(),single);
  List<List<Writable>> records=ArrowConverter.toArrowWritables(fieldVectors,schema.build());
  List<List<Writable>> assertion=new ArrayList<>();
  assertion.add(Arrays.<Writable>asList(new IntWritable(0),new IntWritable(1)));
  assertEquals(assertion,records);
  List<List<String>> batch=new ArrayList<>();
  for (int i=0; i < 2; i++) {
    batch.add(Arrays.asList(String.valueOf(i),String.valueOf(i)));
  }
  List<FieldVector> fieldVectorsBatch=ArrowConverter.toArrowColumnsString(bufferAllocator,schema.build(),batch);
  List<List<Writable>> batchRecords=ArrowConverter.toArrowWritables(fieldVectorsBatch,schema.build());
  List<List<Writable>> assertionBatch=new ArrayList<>();
  assertionBatch.add(Arrays.<Writable>asList(new IntWritable(0),new IntWritable(0)));
  assertionBatch.add(Arrays.<Writable>asList(new IntWritable(1),new IntWritable(1)));
  assertEquals(assertionBatch,batchRecords);
}
