@Test public void testAdaDeltaUpdate(){
  INDArray dxSquared;
  Map<String,INDArray> msg=new HashMap<>();
  Map<String,INDArray> msdx=new HashMap<>();
  double rho=0.85;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().layer(new DenseLayer.Builder().nIn(nIn).nOut(nOut).updater(new AdaDelta(rho,Nd4j.EPS_THRESHOLD)).build()).build();
  long numParams=conf.getLayer().initializer().numParams(conf);
  INDArray params=Nd4j.create(1,numParams);
  BaseLayer layer=(BaseLayer)conf.getLayer().instantiate(conf,null,0,params,true);
  layer.setBackpropGradientsViewArray(gradients);
  Updater updater=UpdaterCreator.getUpdater(layer);
  int updaterStateSize=(int)layer.layerConf().getIUpdater().stateSize(numParams);
  INDArray updaterState=Nd4j.create(1,updaterStateSize);
  updater.setStateViewArray(layer,updaterState,true);
  Gradient gradientCopyPreUpdate=new DefaultGradient();
  INDArray g=gradients.dup();
  INDArray wg=g.get(point(0),interval(0,nIn * nOut));
  INDArray bg=g.get(point(0),interval(nIn * nOut,nIn * nOut + nOut));
  gradientCopyPreUpdate.setGradientFor(DefaultParamInitializer.WEIGHT_KEY,wg);
  gradientCopyPreUpdate.setGradientFor(DefaultParamInitializer.BIAS_KEY,bg);
  int count=0;
  for (int i=0; i < 2; i++) {
    updater.update(layer,gradient,i,0,1,LayerWorkspaceMgr.noWorkspaces());
    for (    Map.Entry<String,INDArray> entry : gradientCopyPreUpdate.gradientForVariable().entrySet()) {
      key=entry.getKey();
      val=entry.getValue();
      INDArray msgTmp=msg.get(key);
      INDArray msdxTmp=msdx.get(key);
      if (msgTmp == null) {
        msgTmp=Nd4j.zeros(val.shape());
        msdxTmp=Nd4j.zeros(val.shape());
      }
      msgTmp.muli(rho);
      msgTmp.addi(val.mul(val).muli(1 - rho));
      gradExpected=Transforms.sqrt(msdxTmp.add(Nd4j.EPS_THRESHOLD)).divi(Transforms.sqrt(msgTmp.add(Nd4j.EPS_THRESHOLD))).muli(val);
      gradientCopyPreUpdate.setGradientFor(key,gradExpected);
      assertEquals(gradExpected,gradient.getGradientFor(entry.getKey()));
      msdxTmp.muli(rho);
      dxSquared=gradExpected.mul(gradExpected);
      msdxTmp.addi(dxSquared.muli(1 - rho));
      msg.put(key,msgTmp);
      msdx.put(key,msdxTmp);
      count++;
    }
    assertEquals(rho,((AdaDelta)layer.layerConf().getIUpdater()).getRho(),1e-4);
  }
  assertEquals(4,count);
}
