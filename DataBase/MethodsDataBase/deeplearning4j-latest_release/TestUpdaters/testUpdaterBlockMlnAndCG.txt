@Test public void testUpdaterBlockMlnAndCG(){
  for (int i=0; i < 2; i++) {
    List<UpdaterBlock> blocks;
    if (i == 0) {
      MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().list().layer(0,new DenseLayer.Builder().nIn(10).nOut(10).name("l0").updater(new Adam(0.5)).build()).layer(1,new DenseLayer.Builder().nIn(10).nOut(10).name("l1").updater(new Adam(0.5)).biasUpdater(new Adam(0.25)).build()).layer(2,new DenseLayer.Builder().nIn(10).nOut(10).name("l2").updater(new AdaDelta()).build()).layer(3,new DenseLayer.Builder().nIn(10).nOut(10).name("l3").updater(new AdaGrad(0.5)).build()).layer(4,new OutputLayer.Builder().nIn(10).nOut(10).name("l4").activation(Activation.SOFTMAX).updater(new AdaMax(0.5)).build()).build();
      MultiLayerNetwork net=new MultiLayerNetwork(conf);
      net.init();
      MultiLayerUpdater u=(MultiLayerUpdater)net.getUpdater();
      blocks=u.getUpdaterBlocks();
    }
 else {
      ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").addLayer("l0",new DenseLayer.Builder().nIn(10).nOut(10).updater(new Adam(0.5)).build(),"in").addLayer("l1",new DenseLayer.Builder().nIn(10).nOut(10).updater(new Adam(0.5)).biasUpdater(new Adam(0.25)).build(),"l0").addLayer("l2",new DenseLayer.Builder().nIn(10).nOut(10).updater(new AdaDelta()).build(),"l1").addLayer("l3",new DenseLayer.Builder().nIn(10).nOut(10).updater(new AdaGrad(0.5)).build(),"l2").addLayer("l4",new OutputLayer.Builder().nIn(10).nOut(10).activation(Activation.SOFTMAX).updater(new AdaMax(0.5)).build(),"l3").setOutputs("l4").build();
      ComputationGraph net=new ComputationGraph(conf);
      net.init();
      ComputationGraphUpdater u=net.getUpdater();
      blocks=u.getUpdaterBlocks();
    }
    assertEquals(5,blocks.size());
    UpdaterBlock ub0=blocks.get(0);
    assertEquals(3,ub0.getLayersAndVariablesInBlock().size());
    assertEquals("l0",ub0.getLayersAndVariablesInBlock().get(0).getLayer().getConfig().getLayerName());
    assertEquals(DefaultParamInitializer.WEIGHT_KEY,ub0.getLayersAndVariablesInBlock().get(0).getParamName());
    assertEquals("l0",ub0.getLayersAndVariablesInBlock().get(1).getLayer().getConfig().getLayerName());
    assertEquals(DefaultParamInitializer.BIAS_KEY,ub0.getLayersAndVariablesInBlock().get(1).getParamName());
    assertEquals("l1",ub0.getLayersAndVariablesInBlock().get(2).getLayer().getConfig().getLayerName());
    assertEquals(DefaultParamInitializer.WEIGHT_KEY,ub0.getLayersAndVariablesInBlock().get(2).getParamName());
    int nParams0=10 * 10 + 10 + 10 * 10;
    assertEquals(0,ub0.getParamOffsetStart());
    assertEquals(nParams0,ub0.getParamOffsetEnd());
    int nUpdaterVals0=2 * nParams0;
    assertEquals(0,ub0.getUpdaterViewOffsetStart());
    assertEquals(nUpdaterVals0,ub0.getUpdaterViewOffsetEnd());
    UpdaterBlock ub1=blocks.get(1);
    assertEquals(1,ub1.getLayersAndVariablesInBlock().size());
    assertEquals("l1",ub1.getLayersAndVariablesInBlock().get(0).getLayer().getConfig().getLayerName());
    assertEquals(DefaultParamInitializer.BIAS_KEY,ub1.getLayersAndVariablesInBlock().get(0).getParamName());
    int nParams1=10;
    assertEquals(nParams0,ub1.getParamOffsetStart());
    assertEquals(nParams0 + nParams1,ub1.getParamOffsetEnd());
    int nUpdaterVals1=2 * nParams1;
    assertEquals(nUpdaterVals0,ub1.getUpdaterViewOffsetStart());
    assertEquals(nUpdaterVals0 + nUpdaterVals1,ub1.getUpdaterViewOffsetEnd());
    UpdaterBlock ub2=blocks.get(2);
    assertEquals(2,ub2.getLayersAndVariablesInBlock().size());
    assertEquals("l2",ub2.getLayersAndVariablesInBlock().get(0).getLayer().getConfig().getLayerName());
    assertEquals(DefaultParamInitializer.WEIGHT_KEY,ub2.getLayersAndVariablesInBlock().get(0).getParamName());
    assertEquals("l2",ub2.getLayersAndVariablesInBlock().get(1).getLayer().getConfig().getLayerName());
    assertEquals(DefaultParamInitializer.BIAS_KEY,ub2.getLayersAndVariablesInBlock().get(1).getParamName());
    int nParams2=10 * 10 + 10;
    assertEquals(nParams0 + nParams1,ub2.getParamOffsetStart());
    assertEquals(nParams0 + nParams1 + nParams2,ub2.getParamOffsetEnd());
    int nUpdaterVals2=2 * nParams2;
    assertEquals(nUpdaterVals0 + nUpdaterVals1,ub2.getUpdaterViewOffsetStart());
    assertEquals(nUpdaterVals0 + nUpdaterVals1 + nUpdaterVals2,ub2.getUpdaterViewOffsetEnd());
    UpdaterBlock ub3=blocks.get(3);
    assertEquals(2,ub3.getLayersAndVariablesInBlock().size());
    assertEquals("l3",ub3.getLayersAndVariablesInBlock().get(0).getLayer().getConfig().getLayerName());
    assertEquals(DefaultParamInitializer.WEIGHT_KEY,ub3.getLayersAndVariablesInBlock().get(0).getParamName());
    assertEquals("l3",ub3.getLayersAndVariablesInBlock().get(1).getLayer().getConfig().getLayerName());
    assertEquals(DefaultParamInitializer.BIAS_KEY,ub3.getLayersAndVariablesInBlock().get(1).getParamName());
    int nParams3=10 * 10 + 10;
    assertEquals(nParams0 + nParams1 + nParams2,ub3.getParamOffsetStart());
    assertEquals(nParams0 + nParams1 + nParams2+ nParams3,ub3.getParamOffsetEnd());
    int nUpdaterVals3=nParams3;
    assertEquals(nUpdaterVals0 + nUpdaterVals1 + nUpdaterVals2,ub3.getUpdaterViewOffsetStart());
    assertEquals(nUpdaterVals0 + nUpdaterVals1 + nUpdaterVals2+ nUpdaterVals3,ub3.getUpdaterViewOffsetEnd());
    UpdaterBlock ub4=blocks.get(4);
    assertEquals(2,ub4.getLayersAndVariablesInBlock().size());
    assertEquals("l4",ub4.getLayersAndVariablesInBlock().get(0).getLayer().getConfig().getLayerName());
    assertEquals(DefaultParamInitializer.WEIGHT_KEY,ub4.getLayersAndVariablesInBlock().get(0).getParamName());
    assertEquals("l4",ub4.getLayersAndVariablesInBlock().get(1).getLayer().getConfig().getLayerName());
    assertEquals(DefaultParamInitializer.BIAS_KEY,ub4.getLayersAndVariablesInBlock().get(1).getParamName());
    int nParams4=10 * 10 + 10;
    assertEquals(nParams0 + nParams1 + nParams2+ nParams3,ub4.getParamOffsetStart());
    assertEquals(nParams0 + nParams1 + nParams2+ nParams3+ nParams4,ub4.getParamOffsetEnd());
    int nUpdaterVals4=2 * nParams4;
    assertEquals(nUpdaterVals0 + nUpdaterVals1 + nUpdaterVals2+ nUpdaterVals3,ub4.getUpdaterViewOffsetStart());
    assertEquals(nUpdaterVals0 + nUpdaterVals1 + nUpdaterVals2+ nUpdaterVals3+ nUpdaterVals4,ub4.getUpdaterViewOffsetEnd());
  }
}
