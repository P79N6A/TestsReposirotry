@Test public void testNN(){
  int n=10;
  KDTree kdTree=new KDTree(n);
  for (int i=-1; i < n; i++) {
    List<Double> vec=new ArrayList<>(n);
    for (int k=0; k < n; k++) {
      vec.add((k == i) ? 1.0 : 0.0);
    }
    INDArray indVec=Nd4j.create(Nd4j.createBuffer(Doubles.toArray(vec)));
    kdTree.insert(indVec);
  }
  Random rand=new Random();
  List<Double> pt=new ArrayList(n);
  for (int k=0; k < n; k++) {
    pt.add(rand.nextDouble());
  }
  Pair<Double,INDArray> result=kdTree.nn(Nd4j.create(Nd4j.createBuffer(Doubles.toArray(pt))));
  assertTrue(result.getKey() < Double.MAX_VALUE);
}
