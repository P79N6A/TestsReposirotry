@Test public void tesUnfrozenSubset(){
  NeuralNetConfiguration.Builder overallConf=new NeuralNetConfiguration.Builder().seed(124).activation(Activation.IDENTITY).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new Sgd(0.1));
  ComputationGraphConfiguration conf=overallConf.graphBuilder().addInputs("inCentre","inRight").addLayer("denseCentre0",new DenseLayer.Builder().nIn(10).nOut(9).build(),"inCentre").addLayer("denseCentre1",new DenseLayer.Builder().nIn(9).nOut(8).build(),"denseCentre0").addLayer("denseCentre2",new DenseLayer.Builder().nIn(8).nOut(7).build(),"denseCentre1").addLayer("denseCentre3",new DenseLayer.Builder().nIn(7).nOut(7).build(),"denseCentre2").addLayer("outCentre",new OutputLayer.Builder(LossFunctions.LossFunction.MSE).nIn(7).nOut(4).build(),"denseCentre3").addVertex("subsetLeft",new SubsetVertex(0,3),"denseCentre1").addLayer("denseLeft0",new DenseLayer.Builder().nIn(4).nOut(5).build(),"subsetLeft").addLayer("outLeft",new OutputLayer.Builder(LossFunctions.LossFunction.MSE).nIn(5).nOut(6).build(),"denseLeft0").addLayer("denseRight",new DenseLayer.Builder().nIn(7).nOut(7).build(),"denseCentre2").addLayer("denseRight0",new DenseLayer.Builder().nIn(2).nOut(3).build(),"inRight").addVertex("mergeRight",new MergeVertex(),"denseRight","denseRight0").addLayer("denseRight1",new DenseLayer.Builder().nIn(10).nOut(5).build(),"mergeRight").addLayer("outRight",new OutputLayer.Builder(LossFunctions.LossFunction.MSE).nIn(5).nOut(5).build(),"denseRight1").setOutputs("outLeft","outCentre","outRight").build();
  ComputationGraph modelToTune=new ComputationGraph(conf);
  modelToTune.init();
  TransferLearningHelper helper=new TransferLearningHelper(modelToTune,"denseCentre2");
  ComputationGraph modelSubset=helper.unfrozenGraph();
  ComputationGraphConfiguration expectedConf=overallConf.graphBuilder().addInputs("denseCentre1","denseCentre2","inRight").addLayer("denseCentre3",new DenseLayer.Builder().nIn(7).nOut(7).build(),"denseCentre2").addLayer("outCentre",new OutputLayer.Builder(LossFunctions.LossFunction.MSE).nIn(7).nOut(4).build(),"denseCentre3").addVertex("subsetLeft",new SubsetVertex(0,3),"denseCentre1").addLayer("denseLeft0",new DenseLayer.Builder().nIn(4).nOut(5).build(),"subsetLeft").addLayer("outLeft",new OutputLayer.Builder(LossFunctions.LossFunction.MSE).nIn(5).nOut(6).build(),"denseLeft0").addLayer("denseRight",new DenseLayer.Builder().nIn(7).nOut(7).build(),"denseCentre2").addLayer("denseRight0",new DenseLayer.Builder().nIn(2).nOut(3).build(),"inRight").addVertex("mergeRight",new MergeVertex(),"denseRight","denseRight0").addLayer("denseRight1",new DenseLayer.Builder().nIn(10).nOut(5).build(),"mergeRight").addLayer("outRight",new OutputLayer.Builder(LossFunctions.LossFunction.MSE).nIn(5).nOut(5).build(),"denseRight1").setOutputs("outLeft","outCentre","outRight").build();
  ComputationGraph expectedModel=new ComputationGraph(expectedConf);
  expectedModel.init();
  assertEquals(expectedConf.toJson(),modelSubset.getConfiguration().toJson());
}
