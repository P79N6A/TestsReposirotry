@Test public void testFitUnFrozen(){
  NeuralNetConfiguration.Builder overallConf=new NeuralNetConfiguration.Builder().updater(new Sgd(0.9)).seed(124).activation(Activation.IDENTITY).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT);
  ComputationGraphConfiguration conf=overallConf.graphBuilder().addInputs("inCentre","inRight").addLayer("denseCentre0",new DenseLayer.Builder().nIn(10).nOut(9).build(),"inCentre").addLayer("denseCentre1",new DenseLayer.Builder().nIn(9).nOut(8).build(),"denseCentre0").addLayer("denseCentre2",new DenseLayer.Builder().nIn(8).nOut(7).build(),"denseCentre1").addLayer("denseCentre3",new DenseLayer.Builder().nIn(7).nOut(7).build(),"denseCentre2").addLayer("outCentre",new OutputLayer.Builder(LossFunctions.LossFunction.MSE).nIn(7).nOut(4).build(),"denseCentre3").addVertex("subsetLeft",new SubsetVertex(0,3),"denseCentre1").addLayer("denseLeft0",new DenseLayer.Builder().nIn(4).nOut(5).build(),"subsetLeft").addLayer("outLeft",new OutputLayer.Builder(LossFunctions.LossFunction.MSE).nIn(5).nOut(6).build(),"denseLeft0").addLayer("denseRight",new DenseLayer.Builder().nIn(7).nOut(7).build(),"denseCentre2").addLayer("denseRight0",new DenseLayer.Builder().nIn(2).nOut(3).build(),"inRight").addVertex("mergeRight",new MergeVertex(),"denseRight","denseRight0").addLayer("denseRight1",new DenseLayer.Builder().nIn(10).nOut(5).build(),"mergeRight").addLayer("outRight",new OutputLayer.Builder(LossFunctions.LossFunction.MSE).nIn(5).nOut(5).build(),"denseRight1").setOutputs("outLeft","outCentre","outRight").build();
  ComputationGraph modelToTune=new ComputationGraph(conf);
  modelToTune.init();
  INDArray inRight=Nd4j.rand(10,2);
  INDArray inCentre=Nd4j.rand(10,10);
  INDArray outLeft=Nd4j.rand(10,6);
  INDArray outRight=Nd4j.rand(10,5);
  INDArray outCentre=Nd4j.rand(10,4);
  MultiDataSet origData=new MultiDataSet(new INDArray[]{inCentre,inRight},new INDArray[]{outLeft,outCentre,outRight});
  ComputationGraph modelIdentical=modelToTune.clone();
  modelIdentical.getVertex("denseCentre0").setLayerAsFrozen();
  modelIdentical.getVertex("denseCentre1").setLayerAsFrozen();
  modelIdentical.getVertex("denseCentre2").setLayerAsFrozen();
  TransferLearningHelper helper=new TransferLearningHelper(modelToTune,"denseCentre2");
  MultiDataSet featurizedDataSet=helper.featurize(origData);
  assertEquals(modelIdentical.getLayer("denseRight0").params(),modelToTune.getLayer("denseRight0").params());
  modelIdentical.fit(origData);
  helper.fitFeaturized(featurizedDataSet);
  assertEquals(modelIdentical.getLayer("denseCentre0").params(),modelToTune.getLayer("denseCentre0").params());
  assertEquals(modelIdentical.getLayer("denseCentre1").params(),modelToTune.getLayer("denseCentre1").params());
  assertEquals(modelIdentical.getLayer("denseCentre2").params(),modelToTune.getLayer("denseCentre2").params());
  assertEquals(modelIdentical.getLayer("denseCentre3").params(),modelToTune.getLayer("denseCentre3").params());
  assertEquals(modelIdentical.getLayer("outCentre").params(),modelToTune.getLayer("outCentre").params());
  assertEquals(modelIdentical.getLayer("denseRight").conf().toJson(),modelToTune.getLayer("denseRight").conf().toJson());
  assertEquals(modelIdentical.getLayer("denseRight").params(),modelToTune.getLayer("denseRight").params());
  assertEquals(modelIdentical.getLayer("denseRight0").conf().toJson(),modelToTune.getLayer("denseRight0").conf().toJson());
  assertEquals(modelIdentical.getLayer("denseRight1").params(),modelToTune.getLayer("denseRight1").params());
  assertEquals(modelIdentical.getLayer("outRight").params(),modelToTune.getLayer("outRight").params());
  assertEquals(modelIdentical.getLayer("denseLeft0").params(),modelToTune.getLayer("denseLeft0").params());
  assertEquals(modelIdentical.getLayer("outLeft").params(),modelToTune.getLayer("outLeft").params());
  log.info(modelIdentical.summary());
  log.info(helper.unfrozenGraph().summary());
}
