@Test public void testGradientNoBiasDenseOutput(){
  int nIn=5;
  int nOut=3;
  int layerSize=6;
  for (  int minibatch : new int[]{1,4}) {
    INDArray input=Nd4j.rand(minibatch,nIn);
    INDArray labels=Nd4j.zeros(minibatch,nOut);
    for (int i=0; i < minibatch; i++) {
      labels.putScalar(i,i % nOut,1.0);
    }
    for (    boolean denseHasBias : new boolean[]{true,false}) {
      for (      boolean outHasBias : new boolean[]{true,false}) {
        MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().updater(new NoOp()).seed(12345L).list().layer(0,new DenseLayer.Builder().nIn(nIn).nOut(layerSize).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).activation(Activation.TANH).hasBias(true).build()).layer(1,new DenseLayer.Builder().nIn(layerSize).nOut(layerSize).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).activation(Activation.TANH).hasBias(denseHasBias).build()).layer(2,new OutputLayer.Builder(LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(layerSize).nOut(nOut).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).hasBias(outHasBias).build()).build();
        MultiLayerNetwork mln=new MultiLayerNetwork(conf);
        mln.init();
        if (denseHasBias) {
          assertEquals(layerSize * layerSize + layerSize,mln.getLayer(1).numParams());
        }
 else {
          assertEquals(layerSize * layerSize,mln.getLayer(1).numParams());
        }
        if (outHasBias) {
          assertEquals(layerSize * nOut + nOut,mln.getLayer(2).numParams());
        }
 else {
          assertEquals(layerSize * nOut,mln.getLayer(2).numParams());
        }
        String msg="testGradientNoBiasDenseOutput(), minibatch = " + minibatch + ", denseHasBias = "+ denseHasBias+ ", outHasBias = "+ outHasBias+ ")";
        if (PRINT_RESULTS) {
          System.out.println(msg);
        }
        boolean gradOK=GradientCheckUtil.checkGradients(mln,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels);
        assertTrue(msg,gradOK);
        TestUtils.testModelSerialization(mln);
      }
    }
  }
}
