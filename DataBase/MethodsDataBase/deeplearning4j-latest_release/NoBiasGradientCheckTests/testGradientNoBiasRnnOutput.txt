@Test public void testGradientNoBiasRnnOutput(){
  int nIn=5;
  int nOut=3;
  int tsLength=3;
  int layerSize=6;
  for (  int minibatch : new int[]{1,4}) {
    INDArray input=Nd4j.rand(new int[]{minibatch,nIn,tsLength});
    INDArray labels=TestUtils.randomOneHotTimeSeries(minibatch,nOut,tsLength);
    for (    boolean rnnOutHasBias : new boolean[]{true,false}) {
      MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().updater(new NoOp()).seed(12345L).list().layer(0,new LSTM.Builder().nIn(nIn).nOut(layerSize).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).activation(Activation.TANH).build()).layer(1,new RnnOutputLayer.Builder(LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(layerSize).nOut(nOut).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).hasBias(rnnOutHasBias).build()).build();
      MultiLayerNetwork mln=new MultiLayerNetwork(conf);
      mln.init();
      if (rnnOutHasBias) {
        assertEquals(layerSize * nOut + nOut,mln.getLayer(1).numParams());
      }
 else {
        assertEquals(layerSize * nOut,mln.getLayer(1).numParams());
      }
      String msg="testGradientNoBiasRnnOutput(), minibatch = " + minibatch + ", rnnOutHasBias = "+ rnnOutHasBias+ ")";
      if (PRINT_RESULTS) {
        System.out.println(msg);
      }
      boolean gradOK=GradientCheckUtil.checkGradients(mln,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels);
      assertTrue(msg,gradOK);
      TestUtils.testModelSerialization(mln);
    }
  }
}
