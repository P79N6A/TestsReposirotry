@Test public void testFromSvmLight() throws Exception {
  JavaRDD<LabeledPoint> data=MLUtils.loadLibSVMFile(sc.sc(),new ClassPathResource("svmLight/iris_svmLight_0.txt").getTempFileFromArchive().getAbsolutePath()).toJavaRDD().map(new TestFn());
  DataSet d=new IrisDataSetIterator(150,150).next();
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(123).optimizationAlgo(OptimizationAlgorithm.LINE_GRADIENT_DESCENT).miniBatch(true).maxNumLineSearchIterations(10).list().layer(0,new DenseLayer.Builder().nIn(4).nOut(100).weightInit(WeightInit.XAVIER).activation(Activation.RELU).build()).layer(1,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(100).nOut(3).activation(Activation.SOFTMAX).weightInit(WeightInit.XAVIER).build()).backprop(false).build();
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  network.init();
  System.out.println("Initializing network");
  SparkDl4jMultiLayer master=new SparkDl4jMultiLayer(sc,getBasicConf(),new ParameterAveragingTrainingMaster(true,numExecutors(),1,5,1,0));
  MultiLayerNetwork network2=master.fitLabeledPoint(data);
  Evaluation evaluation=new Evaluation();
  evaluation.eval(d.getLabels(),network2.output(d.getFeatures()));
  System.out.println(evaluation.stats());
}
