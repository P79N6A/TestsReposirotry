@Test public void regressionTestMLP1() throws Exception {
  File f=new ClassPathResource("regression_testing/080/080_ModelSerializer_Regression_MLP_1.zip").getTempFileFromArchive();
  MultiLayerNetwork net=ModelSerializer.restoreMultiLayerNetwork(f,true);
  MultiLayerConfiguration conf=net.getLayerWiseConfigurations();
  assertEquals(2,conf.getConfs().size());
  assertTrue(conf.isBackprop());
  assertFalse(conf.isPretrain());
  DenseLayer l0=(DenseLayer)conf.getConf(0).getLayer();
  assertTrue(l0.getActivationFn() instanceof ActivationReLU);
  assertEquals(3,l0.getNIn());
  assertEquals(4,l0.getNOut());
  assertEquals(WeightInit.XAVIER,l0.getWeightInit());
  assertTrue(l0.getIUpdater() instanceof Nesterovs);
  Nesterovs n=(Nesterovs)l0.getIUpdater();
  assertEquals(0.9,n.getMomentum(),1e-6);
  assertEquals(0.15,((Nesterovs)l0.getIUpdater()).getLearningRate(),1e-6);
  assertEquals(0.15,n.getLearningRate(),1e-6);
  OutputLayer l1=(OutputLayer)conf.getConf(1).getLayer();
  assertTrue(l1.getActivationFn() instanceof ActivationSoftmax);
  assertTrue(l1.getLossFn() instanceof LossMCXENT);
  assertEquals(4,l1.getNIn());
  assertEquals(5,l1.getNOut());
  assertEquals(WeightInit.XAVIER,l1.getWeightInit());
  assertTrue(l1.getIUpdater() instanceof Nesterovs);
  assertEquals(0.9,((Nesterovs)l1.getIUpdater()).getMomentum(),1e-6);
  assertEquals(0.15,((Nesterovs)l1.getIUpdater()).getLearningRate(),1e-6);
  assertEquals(0.15,n.getLearningRate(),1e-6);
  int numParams=(int)net.numParams();
  assertEquals(Nd4j.linspace(1,numParams,numParams),net.params());
  int updaterSize=(int)new Nesterovs().stateSize(numParams);
  assertEquals(Nd4j.linspace(1,updaterSize,updaterSize),net.getUpdater().getStateViewArray());
  assertTrue(net.getLayerWiseConfigurations().isLegacyBatchScaledL2());
  assertTrue(l1.isLegacyBatchScaledL2());
}
