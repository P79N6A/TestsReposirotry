@Test public void testExecutionSequence(){
  Schema schema=new SequenceSchema.Builder().addColumnInteger("col0").addColumnCategorical("col1","state0","state1","state2").addColumnDouble("col2").build();
  TransformProcess tp=new TransformProcess.Builder(schema).categoricalToInteger("col1").doubleMathOp("col2",MathOp.Add,10.0).build();
  List<List<List<Writable>>> inputSequences=new ArrayList<>();
  List<List<Writable>> seq1=new ArrayList<>();
  seq1.add(Arrays.<Writable>asList(new IntWritable(0),new Text("state2"),new DoubleWritable(0.1)));
  seq1.add(Arrays.<Writable>asList(new IntWritable(1),new Text("state1"),new DoubleWritable(1.1)));
  seq1.add(Arrays.<Writable>asList(new IntWritable(2),new Text("state0"),new DoubleWritable(2.1)));
  List<List<Writable>> seq2=new ArrayList<>();
  seq2.add(Arrays.<Writable>asList(new IntWritable(3),new Text("state0"),new DoubleWritable(3.1)));
  seq2.add(Arrays.<Writable>asList(new IntWritable(4),new Text("state1"),new DoubleWritable(4.1)));
  inputSequences.add(seq1);
  inputSequences.add(seq2);
  List<List<List<Writable>>> rdd=(inputSequences);
  List<List<List<Writable>>> out=LocalTransformExecutor.executeSequenceToSequence(rdd,tp);
  Collections.sort(out,new Comparator<List<List<Writable>>>(){
    @Override public int compare(    List<List<Writable>> o1,    List<List<Writable>> o2){
      return -Integer.compare(o1.size(),o2.size());
    }
  }
);
  List<List<List<Writable>>> expectedSequence=new ArrayList<>();
  List<List<Writable>> seq1e=new ArrayList<>();
  seq1e.add(Arrays.<Writable>asList(new IntWritable(0),new IntWritable(2),new DoubleWritable(10.1)));
  seq1e.add(Arrays.<Writable>asList(new IntWritable(1),new IntWritable(1),new DoubleWritable(11.1)));
  seq1e.add(Arrays.<Writable>asList(new IntWritable(2),new IntWritable(0),new DoubleWritable(12.1)));
  List<List<Writable>> seq2e=new ArrayList<>();
  seq2e.add(Arrays.<Writable>asList(new IntWritable(3),new IntWritable(0),new DoubleWritable(13.1)));
  seq2e.add(Arrays.<Writable>asList(new IntWritable(4),new IntWritable(1),new DoubleWritable(14.1)));
  expectedSequence.add(seq1e);
  expectedSequence.add(seq2e);
  assertEquals(expectedSequence,out);
}
