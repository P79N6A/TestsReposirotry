@Test public void testExecutionSimple(){
  Schema schema=new Schema.Builder().addColumnInteger("col0").addColumnCategorical("col1","state0","state1","state2").addColumnDouble("col2").addColumnFloat("col3").build();
  TransformProcess tp=new TransformProcess.Builder(schema).categoricalToInteger("col1").doubleMathOp("col2",MathOp.Add,10.0).floatMathOp("col3",MathOp.Add,5f).build();
  List<List<Writable>> inputData=new ArrayList<>();
  inputData.add(Arrays.<Writable>asList(new IntWritable(0),new Text("state2"),new DoubleWritable(0.1),new FloatWritable(0.3f)));
  inputData.add(Arrays.<Writable>asList(new IntWritable(1),new Text("state1"),new DoubleWritable(1.1),new FloatWritable(1.7f)));
  inputData.add(Arrays.<Writable>asList(new IntWritable(2),new Text("state0"),new DoubleWritable(2.1),new FloatWritable(3.6f)));
  List<List<Writable>> rdd=(inputData);
  List<List<Writable>> out=new ArrayList<>(LocalTransformExecutor.execute(rdd,tp));
  Collections.sort(out,new Comparator<List<Writable>>(){
    @Override public int compare(    List<Writable> o1,    List<Writable> o2){
      return Integer.compare(o1.get(0).toInt(),o2.get(0).toInt());
    }
  }
);
  List<List<Writable>> expected=new ArrayList<>();
  expected.add(Arrays.<Writable>asList(new IntWritable(0),new IntWritable(2),new DoubleWritable(10.1),new FloatWritable(5.3f)));
  expected.add(Arrays.<Writable>asList(new IntWritable(1),new IntWritable(1),new DoubleWritable(11.1),new FloatWritable(6.7f)));
  expected.add(Arrays.<Writable>asList(new IntWritable(2),new IntWritable(0),new DoubleWritable(12.1),new FloatWritable(8.6f)));
  assertEquals(expected,out);
}
