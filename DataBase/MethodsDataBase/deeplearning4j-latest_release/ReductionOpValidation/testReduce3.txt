@Test public void testReduce3(){
  Nd4j.getRandom().setSeed(12345);
  int d0=3;
  int d1=4;
  int d2=5;
  List<String> failed=new ArrayList<>();
  for (  int[] reduceDims : new int[][]{{Integer.MAX_VALUE},{0,1,2},{0},{1},{2},{0,1},{0,2},{1,2}}) {
    for (int i=6; i < 7; i++) {
      SameDiff sd=SameDiff.create();
      sd.setLogExecution(false);
      SDVariable in=sd.var("in",new int[]{-1,d1,d2});
      SDVariable in2=sd.var("in2",new int[]{-1,d1,d2});
      INDArray inArr=Nd4j.randn(new int[]{d0,d1,d2}).muli(100);
      INDArray in2Arr=Nd4j.randn(inArr.shape()).muli(100);
      INDArray exp;
      SDVariable reduced;
      String name;
      TestCase tc=new TestCase(sd);
switch (i) {
case 0:
        reduced=sd.manhattanDistance(in,in2,reduceDims);
      name="manhattan";
    exp=Nd4j.getExecutioner().exec(new ManhattanDistance(inArr,in2Arr,null,true,false),reduceDims);
  break;
case 1:
reduced=sd.euclideanDistance(in,in2,reduceDims);
name="euclidean";
exp=Nd4j.getExecutioner().exec(new EuclideanDistance(inArr,in2Arr,null,true,false),reduceDims);
break;
case 2:
inArr.muli(1e-4);
in2Arr.muli(1e-4);
reduced=sd.cosineSimilarity(in,in2,reduceDims);
name="cosine";
exp=Nd4j.getExecutioner().exec(new CosineSimilarity(inArr,in2Arr,null,true,false),reduceDims);
break;
case 3:
reduced=sd.cosineDistance(in,in2,reduceDims);
name="cosinedistance";
exp=Nd4j.getExecutioner().exec(new CosineDistance(inArr,in2Arr,null,true,false),reduceDims);
break;
case 4:
reduced=sd.hammingDistance(in,in2,reduceDims);
name="hamming";
exp=Nd4j.getExecutioner().exec(new HammingDistance(inArr,in2Arr,null,true,false),reduceDims);
break;
case 5:
name="jaccard";
reduced=sd.jaccardDistance(name,in,in2,reduceDims);
inArr.divi(100).addi(0.1);
in2Arr.divi(100).addi(0.1);
exp=Nd4j.getExecutioner().exec(new JaccardDistance(inArr,in2Arr,null,true,false),reduceDims);
if (OpValidationSuite.IGNORE_FAILING && reduceDims.length == 2) continue;
break;
case 6:
if (OpValidationSuite.IGNORE_FAILING) {
continue;
}
name="dot";
reduced=sd.dot(name,in,in2,reduceDims);
exp=Nd4j.getExecutioner().exec(new Dot(inArr,in2Arr,null,true,false),reduceDims);
break;
default :
throw new RuntimeException();
}
SDVariable sum=sd.sum(reduced,Integer.MAX_VALUE);
String msg="(test " + i + " - "+ name+ ", dimensions="+ Arrays.toString(reduceDims)+ ")";
log.info("*** Starting test: " + msg);
sd.associateArrayWithVariable(inArr,in);
sd.associateArrayWithVariable(in2Arr,in2);
tc.expected(reduced,exp);
String error=OpValidation.validate(tc,true);
if (error != null) {
failed.add(msg + " - " + error);
}
}
}
assertEquals("Failed: " + failed,0,failed.size());
}
