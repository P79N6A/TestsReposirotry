@Test public void testReductionGradients1(){
  Nd4j.getRandom().setSeed(12345);
  List<String> failed=new ArrayList<>();
  for (  int dim : new int[]{0,Integer.MAX_VALUE}) {
    for (int i=0; i < 18; i++) {
      SameDiff sd=SameDiff.create();
      int nOut=4;
      int minibatch=10;
      SDVariable input=sd.var("in",new int[]{-1,nOut});
      SDVariable label=sd.var("label",new int[]{-1,nOut});
      SDVariable diff=input.sub(label);
      SDVariable sqDiff=diff.mul(diff);
      SDVariable msePerEx=sd.mean("msePerEx",sqDiff,1);
      SDVariable loss;
      String name;
      TestCase tc=new TestCase(sd);
      boolean uDistInput=false;
switch (i) {
case 0:
        loss=sd.mean("loss",msePerEx,dim);
      name="mean";
    break;
case 1:
  loss=sd.sum("loss",msePerEx,dim);
name="sum";
break;
case 2:
loss=sd.standardDeviation("loss",msePerEx,true,dim);
name="stdev";
break;
case 3:
loss=sd.min("loss",msePerEx,dim);
name="min";
break;
case 4:
loss=sd.max("loss",msePerEx,dim);
name="max";
break;
case 5:
loss=sd.variance("loss",msePerEx,true,dim);
name="variance";
break;
case 6:
loss=sd.prod("loss",msePerEx,dim);
name="prod";
break;
case 7:
loss=sd.norm1("loss",msePerEx,dim);
name="norm1";
break;
case 8:
loss=sd.norm2("loss",msePerEx,dim);
name="norm2";
break;
case 9:
loss=sd.normmax("loss",msePerEx,dim);
name="normmax";
break;
case 10:
loss=sd.countNonZero("loss",msePerEx,dim);
name="countNonZero";
break;
case 11:
loss=sd.countZero("loss",msePerEx,dim);
name="countZero";
break;
case 12:
loss=sd.amax("loss",msePerEx,dim);
name="amax";
break;
case 13:
loss=sd.amin("loss",msePerEx,dim);
name="amin";
break;
case 14:
loss=sd.asum("loss",msePerEx,dim);
name="asum";
break;
case 15:
loss=sd.amean("loss",msePerEx,dim);
name="amean";
break;
case 16:
loss=sd.entropy("loss",msePerEx,dim);
name="entropy";
break;
case 17:
name="logEntropy";
loss=sd.logEntropy("loss",msePerEx,dim);
uDistInput=true;
break;
default :
throw new RuntimeException();
}
String msg="(test " + i + " - "+ name+ ", dimension="+ dim+ ")";
log.info("*** Starting test: " + msg);
INDArray inputArr=uDistInput ? Nd4j.rand(minibatch,nOut) : Nd4j.randn(minibatch,nOut).muli(100);
INDArray labelArr=uDistInput ? Nd4j.rand(minibatch,nOut) : Nd4j.randn(minibatch,nOut).muli(100);
sd.associateArrayWithVariable(inputArr,input);
sd.associateArrayWithVariable(labelArr,label);
String error=OpValidation.validate(tc);
if (error != null) {
failed.add(name);
}
}
}
assertEquals("Failed: " + failed,0,failed.size());
}
