@Test public void testIndexAccum(){
  List<String> failed=new ArrayList<>();
  List<int[]> dims=Arrays.asList(new int[]{0},new int[]{1},new int[]{0,1},new int[0]);
  INDArray in=Nd4j.rand(3,4);
  for (int t=0; t < 4; t++) {
    int[] d=dims.get(t);
    for (int i=0; i < 7; i++) {
      int[] dim=d.length == 0 ? null : d;
      SameDiff sd=SameDiff.create();
      SDVariable s=sd.var("in",in);
      SDVariable reduce;
      String name;
      INDArray exp;
switch (i) {
case 0:
        reduce=s.argmax(dim);
      exp=Nd4j.argMax(in,dim);
    name="argmax";
  break;
case 1:
reduce=s.argmin(dim);
exp=Nd4j.argMin(in,dim);
name="argmin";
break;
case 2:
reduce=sd.iamax(s,dim);
exp=Nd4j.getExecutioner().exec(new IAMax(in.dup()),dim);
name="iamax";
break;
case 3:
reduce=sd.iamin(s,dim);
exp=Nd4j.getExecutioner().exec(new IAMin(in.dup()),dim);
name="iamin";
break;
case 4:
reduce=sd.firstIndex(s,Conditions.greaterThan(0),dim);
exp=in.sum(dim).assign(0);
name="firstindex";
break;
case 5:
reduce=sd.lastIndex(s,Conditions.greaterThan(0),dim);
if (t == 0) exp=Nd4j.create(new double[]{2,2,2,2});
 else if (t == 1) exp=Nd4j.create(new double[]{3,3,3});
 else exp=Nd4j.create(new double[]{11});
name="lastindex";
break;
case 6:
reduce=sd.matchConditionCount("count",s,Conditions.greaterThan(0),false,dim);
if (t == 0) exp=Nd4j.create(new double[]{3,3,3,3});
 else if (t == 1) exp=Nd4j.create(new double[]{4,4,4});
 else exp=Nd4j.create(new double[]{12});
name="matchConditionCount";
break;
default :
throw new RuntimeException();
}
SDVariable loss;
if (dim == null || dim.length == 2) {
loss=reduce.mean();
}
 else {
loss=reduce.std(true);
}
TestCase tc=new TestCase(sd).expected(reduce,exp).testName(name + " - " + (dim == null ? null : Arrays.toString(dim)));
log.info("Starting: {}",tc.testName());
String err=OpValidation.validate(tc,true);
if (err != null) {
failed.add(err);
}
}
}
assertEquals(failed.toString(),0,failed.size());
}
