@Test public void testIntermediateReduction() throws Exception {
  Nd4j.create(1);
  SameDiff tg=TFGraphMapper.getInstance().importGraph(new ClassPathResource("tf_graphs/reduce_dim.pb.txt").getInputStream());
  SDVariable sumResultVar=tg.getVariable("Sum");
  ByteBuffer fb=tg.asFlatBuffers();
  assertNotNull(fb);
  FlatGraph graph=FlatGraph.getRootAsFlatGraph(fb);
  assertEquals(1,graph.nodesLength());
  assertEquals(2,graph.variablesLength());
  assertEquals("Sum",graph.nodes(0).name());
  FlatNode nodeSum=graph.nodes(0);
  assertEquals(2,nodeSum.inputPairedLength());
  val in0=nodeSum.inputPaired(0);
  val in1=nodeSum.inputPaired(1);
  assertEquals(1,in0.first());
  assertEquals(0,in0.second());
  assertEquals(2,in1.first());
  assertEquals(0,in1.second());
  System.out.println(tg.summary());
  int dimensionsLength=nodeSum.dimensionsLength();
  assertEquals(1,dimensionsLength);
  int d=nodeSum.dimensions(0);
  assertEquals(1,d);
  val executioner=new NativeGraphExecutioner();
  val exp=Nd4j.create(3,1).assign(3);
  val results=executioner.executeGraph(tg,configuration);
  assertNotNull(results);
  assertEquals(1,results.length);
  assertEquals(exp,results[0]);
}
