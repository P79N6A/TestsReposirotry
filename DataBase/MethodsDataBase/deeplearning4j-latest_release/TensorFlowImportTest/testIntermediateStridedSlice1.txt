@Test @Ignore public void testIntermediateStridedSlice1() throws Exception {
  Nd4j.create(1);
  val tg=TFGraphMapper.getInstance().importGraph(new ClassPathResource("tf_graphs/tensor_slice.pb.txt").getInputStream());
  assertNotNull(tg);
  val constIn=tg.getVariable("StridedSlice/input");
  assertNotNull(constIn);
  val arr=tg.getArrForVarName(constIn.getVarName());
  assertEquals(139.5,arr.sumNumber().doubleValue(),1e-5);
  val fb=tg.asFlatBuffers();
  assertNotNull(fb);
  val graph=FlatGraph.getRootAsFlatGraph(fb);
  assertEquals(5,graph.variablesLength());
  val nodeSlice=graph.nodes(0);
  assertEquals(14,nodeSlice.extraIntegerLength());
  val begin_mask=nodeSlice.extraInteger(0);
  val ellipsis_mask=nodeSlice.extraInteger(1);
  val end_mask=nodeSlice.extraInteger(2);
  val new_axis_mask=nodeSlice.extraInteger(3);
  val shrink_axis_mask=nodeSlice.extraInteger(4);
  assertEquals(0,begin_mask);
  assertEquals(0,ellipsis_mask);
  assertEquals(0,end_mask);
  assertEquals(0,new_axis_mask);
  assertEquals(0,shrink_axis_mask);
  val nodeSum=graph.nodes(1);
  assertEquals(4,nodeSlice.inputPairedLength());
  assertEquals(2,nodeSum.inputPairedLength());
  val in0=nodeSum.inputPaired(0);
  val in1=nodeSum.inputPaired(1);
}
