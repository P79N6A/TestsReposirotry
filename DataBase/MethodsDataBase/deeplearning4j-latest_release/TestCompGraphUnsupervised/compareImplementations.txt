@Test public void compareImplementations() throws Exception {
  for (  WorkspaceMode wsm : new WorkspaceMode[]{WorkspaceMode.NONE,WorkspaceMode.ENABLED}) {
    MultiLayerConfiguration conf2=new NeuralNetConfiguration.Builder().seed(12345).updater(new Adam(1e-3)).weightInit(WeightInit.XAVIER).inferenceWorkspaceMode(wsm).trainingWorkspaceMode(wsm).list().layer(new VariationalAutoencoder.Builder().nIn(784).nOut(32).encoderLayerSizes(16).decoderLayerSizes(16).activation(Activation.TANH).pzxActivationFunction(Activation.SIGMOID).reconstructionDistribution(new BernoulliReconstructionDistribution(Activation.SIGMOID)).build()).layer(new VariationalAutoencoder.Builder().nIn(32).nOut(8).encoderLayerSizes(16).decoderLayerSizes(16).activation(Activation.TANH).pzxActivationFunction(Activation.SIGMOID).reconstructionDistribution(new GaussianReconstructionDistribution(Activation.TANH)).build()).build();
    MultiLayerNetwork net=new MultiLayerNetwork(conf2);
    net.init();
    ComputationGraph cg=net.toComputationGraph();
    cg.getConfiguration().setInferenceWorkspaceMode(wsm);
    cg.getConfiguration().setTrainingWorkspaceMode(wsm);
    DataSetIterator ds=new EarlyTerminationDataSetIterator(new MnistDataSetIterator(1,true,12345),1);
    Nd4j.getRandom().setSeed(12345);
    net.pretrainLayer(0,ds);
    ds=new EarlyTerminationDataSetIterator(new MnistDataSetIterator(1,true,12345),1);
    Nd4j.getRandom().setSeed(12345);
    cg.pretrainLayer("0",ds);
    assertEquals(net.params(),cg.params());
  }
}
