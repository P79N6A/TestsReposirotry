@Test public void testVAE() throws Exception {
  for (  WorkspaceMode wsm : new WorkspaceMode[]{WorkspaceMode.NONE,WorkspaceMode.ENABLED}) {
    ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).updater(new Adam(1e-3)).weightInit(WeightInit.XAVIER).inferenceWorkspaceMode(wsm).trainingWorkspaceMode(wsm).graphBuilder().addInputs("in").addLayer("vae1",new VariationalAutoencoder.Builder().nIn(784).nOut(32).encoderLayerSizes(16).decoderLayerSizes(16).activation(Activation.TANH).pzxActivationFunction(Activation.SIGMOID).reconstructionDistribution(new BernoulliReconstructionDistribution(Activation.SIGMOID)).build(),"in").addLayer("vae2",new VariationalAutoencoder.Builder().nIn(32).nOut(8).encoderLayerSizes(16).decoderLayerSizes(16).activation(Activation.TANH).pzxActivationFunction(Activation.SIGMOID).reconstructionDistribution(new GaussianReconstructionDistribution(Activation.TANH)).build(),"vae1").setOutputs("vae2").build();
    ComputationGraph cg=new ComputationGraph(conf);
    cg.init();
    DataSetIterator ds=new EarlyTerminationDataSetIterator(new MnistDataSetIterator(8,true,12345),3);
    Map<String,INDArray> paramsBefore=new HashMap<>();
    for (    Map.Entry<String,INDArray> e : cg.paramTable().entrySet()) {
      paramsBefore.put(e.getKey(),e.getValue().dup());
    }
    cg.pretrainLayer("vae1",ds);
    for (    Map.Entry<String,INDArray> e : cg.paramTable().entrySet()) {
      if (e.getKey().startsWith("vae1")) {
        assertNotEquals(paramsBefore.get(e.getKey()),e.getValue());
      }
 else {
        assertEquals(paramsBefore.get(e.getKey()),e.getValue());
      }
    }
    int count=Nd4j.getExecutioner().exec(new MatchCondition(cg.params(),Conditions.isNan())).z().getInt(0);
    assertEquals(0,count);
    for (    Map.Entry<String,INDArray> e : cg.paramTable().entrySet()) {
      paramsBefore.put(e.getKey(),e.getValue().dup());
    }
    cg.pretrainLayer("vae2",ds);
    for (    Map.Entry<String,INDArray> e : cg.paramTable().entrySet()) {
      if (e.getKey().startsWith("vae2")) {
        assertNotEquals(paramsBefore.get(e.getKey()),e.getValue());
      }
 else {
        assertEquals(paramsBefore.get(e.getKey()),e.getValue());
      }
    }
    count=Nd4j.getExecutioner().exec(new MatchCondition(cg.params(),Conditions.isNan())).z().getInt(0);
    assertEquals(0,count);
  }
}
