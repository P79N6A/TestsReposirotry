@Ignore @Test public void testLinearMetaOp1() throws Exception {
  CudaGridExecutioner executioner=new CudaGridExecutioner();
  INDArray array=Nd4j.create(new float[]{-11f,-12f,-13f,-14f,-15f,-16f,-17f,-18f,-19f,-20f});
  INDArray exp=Nd4j.create(new float[]{1f,2f,3f,4f,5f,6f,7f,8f,9f,10f});
  INDArray exp2=Nd4j.create(new float[]{11f,12f,13f,14f,15f,16f,17f,18f,19f,20f});
  ScalarAdd opA=new ScalarAdd(array,10f);
  Abs opB=new Abs(array);
  PredicateMetaOp metaOp=new PredicateMetaOp(opA,opB);
  executioner.prepareGrid(metaOp);
  GridDescriptor descriptor=metaOp.getGridDescriptor();
  assertEquals(2,descriptor.getGridDepth());
  assertEquals(2,descriptor.getGridPointers().size());
  assertEquals(Op.Type.SCALAR,descriptor.getGridPointers().get(0).getType());
  assertEquals(Op.Type.TRANSFORM,descriptor.getGridPointers().get(1).getType());
  long time1=System.nanoTime();
  executioner.exec(metaOp);
  long time2=System.nanoTime();
  System.out.println("Execution time Meta: " + ((time2 - time1) / 1));
  assertEquals(exp,array);
  time1=System.nanoTime();
  Nd4j.getExecutioner().exec(opA);
  Nd4j.getExecutioner().exec(opB);
  time2=System.nanoTime();
  System.out.println("Execution time Linear: " + ((time2 - time1) / 1));
  assertEquals(exp2,array);
}
