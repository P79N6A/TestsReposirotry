@Test public void testSequenceRecordReaderRegression() throws Exception {
  File rootDir=temporaryFolder.newFolder();
  for (int i=0; i < 3; i++) {
    new ClassPathResource(String.format("csvsequence_%d.txt",i)).getTempFileFromArchive(rootDir);
  }
  String featuresPath=FilenameUtils.concat(rootDir.getAbsolutePath(),"csvsequence_%d.txt");
  String labelsPath=FilenameUtils.concat(rootDir.getAbsolutePath(),"csvsequence_%d.txt");
  SequenceRecordReader featureReader=new CSVSequenceRecordReader(1,",");
  SequenceRecordReader labelReader=new CSVSequenceRecordReader(1,",");
  featureReader.initialize(new NumberedFileInputSplit(featuresPath,0,2));
  labelReader.initialize(new NumberedFileInputSplit(labelsPath,0,2));
  SequenceRecordReaderDataSetIterator iter=new SequenceRecordReaderDataSetIterator(featureReader,labelReader,1,0,true);
  assertEquals(3,iter.inputColumns());
  assertEquals(3,iter.totalOutcomes());
  List<DataSet> dsList=new ArrayList<>();
  while (iter.hasNext()) {
    dsList.add(iter.next());
  }
  assertEquals(3,dsList.size());
  for (int i=0; i < 3; i++) {
    DataSet ds=dsList.get(i);
    INDArray features=ds.getFeatures();
    INDArray labels=ds.getLabels();
    assertArrayEquals(new long[]{1,3,4},features.shape());
    assertArrayEquals(new long[]{1,3,4},labels.shape());
    assertEquals(features,labels);
  }
  featureReader.reset();
  iter=new SequenceRecordReaderDataSetIterator(featureReader,1,0,2,true);
  int count=0;
  while (iter.hasNext()) {
    DataSet ds=iter.next();
    assertEquals(2,ds.getFeatures().size(1));
    assertEquals(1,ds.getLabels().size(1));
    count++;
  }
  assertEquals(3,count);
  iter.reset();
  count=0;
  while (iter.hasNext()) {
    iter.next();
    count++;
  }
  assertEquals(3,count);
}
