@Test public void testSequenceRecordReaderMultiRegression() throws Exception {
  File rootDir=temporaryFolder.newFolder();
  for (int i=0; i < 3; i++) {
    new ClassPathResource(String.format("csvsequence_%d.txt",i)).getTempFileFromArchive(rootDir);
  }
  String featuresPath=FilenameUtils.concat(rootDir.getAbsolutePath(),"csvsequence_%d.txt");
  SequenceRecordReader reader=new CSVSequenceRecordReader(1,",");
  reader.initialize(new NumberedFileInputSplit(featuresPath,0,2));
  SequenceRecordReaderDataSetIterator iter=new SequenceRecordReaderDataSetIterator(reader,1,2,1,true);
  assertEquals(1,iter.inputColumns());
  assertEquals(2,iter.totalOutcomes());
  List<DataSet> dsList=new ArrayList<>();
  while (iter.hasNext()) {
    dsList.add(iter.next());
  }
  assertEquals(3,dsList.size());
  for (int i=0; i < 3; i++) {
    DataSet ds=dsList.get(i);
    INDArray features=ds.getFeatures();
    INDArray labels=ds.getLabels();
    assertArrayEquals(new long[]{1,1,4},features.shape());
    assertArrayEquals(new long[]{1,2,4},labels.shape());
    INDArray f2d=features.get(point(0),all(),all()).transpose();
    INDArray l2d=labels.get(point(0),all(),all()).transpose();
switch (i) {
case 0:
      assertEquals(Nd4j.create(new double[]{0,10,20,30},new int[]{4,1}),f2d);
    assertEquals(Nd4j.create(new double[][]{{1,2},{11,12},{21,22},{31,32}}),l2d);
  break;
case 1:
assertEquals(Nd4j.create(new double[]{100,110,120,130},new int[]{4,1}),f2d);
assertEquals(Nd4j.create(new double[][]{{101,102},{111,112},{121,122},{131,132}}),l2d);
break;
case 2:
assertEquals(Nd4j.create(new double[]{200,210,220,230},new int[]{4,1}),f2d);
assertEquals(Nd4j.create(new double[][]{{201,202},{211,212},{221,222},{231,232}}),l2d);
break;
default :
throw new RuntimeException();
}
}
iter.reset();
int count=0;
while (iter.hasNext()) {
iter.next();
count++;
}
assertEquals(3,count);
}
