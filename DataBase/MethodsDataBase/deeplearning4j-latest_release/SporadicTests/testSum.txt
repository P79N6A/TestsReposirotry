@Test public void testSum(){
  DataTypeUtil.setDTypeForContext(DataBuffer.Type.DOUBLE);
  System.out.println("dType: " + Nd4j.dataType());
  double[] d=new double[]{0.0018527202080054288,4.860460399681257E-5,1.0866740014537973E-4,-0.0067027589698796745,3.137875745180366E-4,-0.004068275565124544,-0.01787441478759584,0.008485829165871582,-2.763756128155635E-4,2.871786662038523E-4,-0.010483973019250817,0.007756981321203987,-0.0017533316296846166,-0.013154552997235138,0.002664089383318023,0.003219604745689706,-0.017140063751978196,-0.0402780728371146,-0.024062552380901596,0.0034055167376910362,-0.0014209322438402164,-0.0019807697611663373,-2.2838830354674253E-4,0.00802614947703168,6.809417793628905E-5,-3.5682443741929696E-4,2.3642116161687557E-4,0.0020248602841291333,0.008922488929012673,-1.8730312287067906E-6,2.6969347916614046E-5,-1.3560804909521155E-5,-0.0019803959188298536,-0.011388435316124648,0.009815024112605878,-6.217212819848868E-5,7.198174495385047E-6,7.859570666088778E-4,3.2352438373925256E-4,0.009310926419061586,0.001285919484459703,-0.004614530932162568,-5.693929364499898E-4,4.436935763832914E-5,0.010423203318809186,0.006593852752045009,0.0063445124848706584,9.737683314182195E-5,-7.002675823907349E-4,0.0010906784650723032,-9.972152373258224E-6,0.00871521334612937,0.0015878927877041975,3.5864863535235535E-4,-4.398790476749721E-5,-7.77853455185052E-5,1.8862217750434992E-4,0.0224868440061588,0.0073318858545188175,-8.220926236861101E-4,-2.4336360596325374E-4,-0.0018348955616861627,0.011423225743787646,-0.0016207645948113378,2.289915435117371E-4,-7.122130486259979E-4,-4.94058936059287E-4,0.004245767850547438,2.1598406094246788E-4,0.0014093429117757112,3.1948093888499473E-4,-1.327894312872927E-4,5.756401064075624E-4,-0.013501868757425933,0.08022280647460137,-0.025763510735921924,0.2147635435756625,-3.570893204705811E-4,0.23699343725699218,0.02005726530793397,0.2233494849035487,0.0015628679046820334,0.03686828571588657,-0.034884254322163376,-0.04580585504492872,0.022492109246861913,0.6122906576027609,0.0013512843074173794,0.009833469844281123,-0.12754922577196826,-0.05866094108326281,0.00786015783509335,0.012943402024682067,-0.04138337949224019,0.16422596234194609,-0.003224047448184361,-0.013553967826667544,0.024567523776697443,0.003119569763001505,0.06676632404231841,0.0019518418481909879,-3.546570152995131E-4,8.843184961729061E-4,0.02791605441470666,-0.013688049930718094,0.03237370158354087,7.749693316768275E-4,-0.006175397798237791,-0.001425650837729542,-7.358356122518933E-4,-5.924546696292049E-4,2.572174974203492E-4,0.008635399542952251,-0.00785894020636433,0.00611004654858908,3.849937280461072E-4,-0.0011280073492511923,-0.014039863611056342,0.005258910284221449,-0.0012716079353840685,-0.005880609969998075,0.03884904612026859,-0.007808162270479559,0.13764734350512128,-0.0955607452917015,0.01739042887598923,0.003176716700283583,-8.845189001196553E-5,0.059890266991132,-0.011719738031782573,-0.009720651901132008,-0.020271048497565218,3.5861474460486776E-5,0.003234054136867597,-0.016855942686723118,-0.04109181803561225,0.03929335910336556,-0.002045944958743484,4.986319734224706E-6,-2.0719501403766647E-5,0.022377318509545937,-0.007592601387358396,4.490315393644052E-4,9.033852118576955E-5,4.621091068084668E-6,-5.247702006473915E-4,-7.902654461500924E-4,-0.0011914084606579713,0.0030085580689989877,-4.246971856810759E-4,-1.2340215512440867E-4,0.0019671074593817285,-6.010387216740781E-4,0.013650305790487045,-0.0011454153127967719,-0.007189180788631945,2.870289907492301E-6,4.3693088414999864E-4,0.01200434591332941,-0.014509596674846678,-0.0029357117029629866,-2.1150207332328822E-4,-0.00315536512642124,1.0374814880225154E-4,-0.0034757406691398496,0.011599985159323294,1.2969970680596453E-4,9.964327556021442E-4,-0.001849649601501932,0.002689358375591656,0.012896200751328621,0.007476029001401352,-0.0033194177760658377,-4.3432827454975976E-4,3.411369387610943E-4,-4.103832908635317E-4,0.007055642948203781,-0.0015501810107658967,-0.005752034090813254,-2.844831713420882E-4,-9.563438979460705E-5,-0.02284555356663203,-0.009025504086580169,-0.1559083024105329,0.12294355422935457,-8.708345100849238E-4,0.02784682111718311,0.09887344727692746,0.1984110780215329,-0.0019539047730033083,0.436534119185953,-0.0022943880212978763,0.0033303334626212217,-0.47305986663738375,0.2870128297740214,-0.4852364244335913,-0.1966639932906117,-0.011543131716351632,-0.037961570290375855,0.7991053621370379,-0.0965493466734368,0.14022527291688097,-0.15353621266599798,0.032127740955076554,-0.03391229079838272,0.04220928870735664,-0.10022115665949234,-0.0060843857983522015,0.05969884290137722,-0.001513774894231756,0.003573617155056928,-0.030126515163639428,0.006604847374388239,-0.01685524264155275,-0.015135550991685925,-0.002122525156000015};
  int[] shape={2,108};
  int[] stride={108,1};
  char order='c';
  INDArray arr=Nd4j.create(d,shape,stride,0,order);
  double[] exp=new double[2];
  for (int i=0; i < shape[1]; i++) {
    exp[0]+=arr.getDouble(0,i);
    exp[1]+=arr.getDouble(1,i);
  }
  System.out.println("Expected: " + Arrays.toString(exp));
  System.out.println("Actual:   " + Arrays.toString(arr.sum(1).data().asDouble()));
}
