@Test public void testReplicate3() throws Exception {
  INDArray array=Nd4j.ones(10,10);
  INDArray exp=Nd4j.create(10).assign(10f);
  log.error("Array length: {}",array.length());
  int numDevices=Nd4j.getAffinityManager().getNumberOfDevices();
  final DeviceLocalNDArray locals=new DeviceLocalNDArray(array);
  Thread[] threads=new Thread[numDevices];
  for (int t=0; t < numDevices; t++) {
    threads[t]=new Thread(new Runnable(){
      @Override public void run(){
        AllocationPoint point=AtomicAllocator.getInstance().getAllocationPoint(locals.get());
        log.error("Point deviceId: {}; current deviceId: {}",point.getDeviceId(),Nd4j.getAffinityManager().getDeviceForCurrentThread());
        INDArray sum=locals.get().sum(1);
        INDArray localExp=Nd4j.create(10).assign(10f);
        assertEquals(localExp,sum);
      }
    }
);
    threads[t].start();
  }
  for (int t=0; t < numDevices; t++) {
    threads[t].join();
  }
  for (int t=0; t < numDevices; t++) {
    AllocationPoint point=AtomicAllocator.getInstance().getAllocationPoint(locals.get(t));
    log.error("Point deviceId: {}; current deviceId: {}",point.getDeviceId(),Nd4j.getAffinityManager().getDeviceForCurrentThread());
    exp.addi(0.0f);
    assertEquals(exp,locals.get(t).sum(0));
    log.error("Point after: {}",point.getDeviceId());
  }
}
