@Test public void testReplicate5() throws Exception {
  INDArray array=Nd4j.create(3,3);
  log.error("Original: Host pt: {}; Dev pt: {}",AtomicAllocator.getInstance().getAllocationPoint(array).getPointers().getHostPointer().address(),AtomicAllocator.getInstance().getAllocationPoint(array).getPointers().getDevicePointer().address());
  final DeviceLocalNDArray locals=new DeviceLocalNDArray(array);
  int numDevices=Nd4j.getAffinityManager().getNumberOfDevices();
  for (int t=0; t < numDevices; t++) {
    log.error("deviceId: {}; Host pt: {}; Dev pt: {}",t,AtomicAllocator.getInstance().getAllocationPoint(locals.get(t)).getPointers().getHostPointer().address(),AtomicAllocator.getInstance().getAllocationPoint(locals.get(t)).getPointers().getDevicePointer().address());
  }
  Thread[] threads=new Thread[numDevices];
  for (int t=0; t < numDevices; t++) {
    threads[t]=new Thread(new Runnable(){
      @Override public void run(){
        AllocationPoint point=AtomicAllocator.getInstance().getAllocationPoint(locals.get());
        log.error("deviceId: {}; Host pt: {}; Dev pt: {}",Nd4j.getAffinityManager().getDeviceForCurrentThread(),point.getPointers().getHostPointer().address(),point.getPointers().getDevicePointer().address());
      }
    }
);
    threads[t].start();
  }
  for (int t=0; t < numDevices; t++) {
    threads[t].join();
  }
}
