@Test public void testBroadcastWithPermute(){
  Nd4j.getRandom().setSeed(12345);
  int length=4 * 4 * 5* 2;
  INDArray arr=Nd4j.linspace(1,length,length).reshape('c',4,4,5,2).permute(2,3,1,0);
  Nd4j.getExecutioner().commit();
  INDArray arrDup=arr.dup('c');
  Nd4j.getExecutioner().commit();
  INDArray row=Nd4j.rand(1,2);
  assertEquals(row.length(),arr.size(1));
  assertEquals(row.length(),arrDup.size(1));
  assertEquals(arr,arrDup);
  INDArray first=Nd4j.getExecutioner().execAndReturn(new BroadcastSubOp(arr,row,Nd4j.createUninitialized(arr.shape(),'c'),1));
  INDArray second=Nd4j.getExecutioner().execAndReturn(new BroadcastSubOp(arrDup,row,Nd4j.createUninitialized(arr.shape(),'c'),1));
  System.out.println("A1: " + Arrays.toString(arr.shapeInfoDataBuffer().asInt()));
  System.out.println("A2: " + Arrays.toString(first.shapeInfoDataBuffer().asInt()));
  System.out.println("B1: " + Arrays.toString(arrDup.shapeInfoDataBuffer().asInt()));
  System.out.println("B2: " + Arrays.toString(second.shapeInfoDataBuffer().asInt()));
  INDArray resultSameStrides=Nd4j.zeros(new int[]{4,4,5,2},'c').permute(2,3,1,0);
  assertArrayEquals(arr.stride(),resultSameStrides.stride());
  INDArray third=Nd4j.getExecutioner().execAndReturn(new BroadcastSubOp(arr,row,resultSameStrides,1));
  assertEquals(second,third);
  assertEquals(first,second);
}
