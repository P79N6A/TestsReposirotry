/** 
 * This test checks multiple Clients hammering single Shard
 * @throws Exception
 */
@Test(timeout=60000L) public void testPerformanceUnicast4() throws Exception {
  VoidConfiguration voidConfiguration=VoidConfiguration.builder().numberOfShards(1).shardAddresses(Arrays.asList("127.0.0.1:49823")).build();
  voidConfiguration.setUnicastControllerPort(49823);
  Transport transport=new RoutedTransport();
  transport.setIpAndPort("127.0.0.1",Integer.valueOf("49823"));
  VoidParameterServer parameterServer=new VoidParameterServer(NodeRole.SHARD);
  parameterServer.setShardIndex((short)0);
  parameterServer.init(voidConfiguration,transport,new SkipGramTrainer());
  parameterServer.initializeSeqVec(100,NUM_WORDS,123L,100,true,false);
  VoidParameterServer[] clients=new VoidParameterServer[1];
  for (int c=0; c < clients.length; c++) {
    clients[c]=new VoidParameterServer(NodeRole.CLIENT);
    Transport clientTransport=new RoutedTransport();
    clientTransport.setIpAndPort("127.0.0.1",Integer.valueOf("4872" + c));
    clients[c].init(voidConfiguration,clientTransport,new SkipGramTrainer());
    assertEquals(NodeRole.CLIENT,clients[c].getNodeRole());
  }
  final List<Long> times=new CopyOnWriteArrayList<>();
  log.info("Starting loop...");
  Thread[] threads=new Thread[clients.length];
  for (int t=0; t < threads.length; t++) {
    final int c=t;
    threads[t]=new Thread(() -> {
      List<Long> results=new ArrayList<>();
      AtomicLong sequence=new AtomicLong(0);
      for (int i=0; i < 500; i++) {
        Frame<SkipGramRequestMessage> frame=new Frame<>(sequence.incrementAndGet());
        for (int f=0; f < 128; f++) {
          frame.stackMessage(getSGRM());
        }
        long time1=System.nanoTime();
        clients[c].execDistributed(frame);
        long time2=System.nanoTime();
        results.add(time2 - time1);
        if ((i + 1) % 50 == 0)         log.info("Thread_{} finished {} frames...",c,i);
      }
      times.addAll(results);
    }
);
    threads[t].setDaemon(true);
    threads[t].start();
  }
  for (  Thread thread : threads)   thread.join();
  List<Long> newTimes=new ArrayList<>(times);
  Collections.sort(newTimes);
  log.info("p50: {} us",newTimes.get(newTimes.size() / 2) / 1000);
  for (  VoidParameterServer client : clients) {
    client.shutdown();
  }
  parameterServer.shutdown();
}
