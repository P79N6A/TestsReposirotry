@Test public void testLastTimeStepLayer(){
  int nIn=3;
  int nOut=5;
  int tsLength=4;
  int layerSize=8;
  Bidirectional.Mode[] modes=new Bidirectional.Mode[]{Bidirectional.Mode.CONCAT,Bidirectional.Mode.ADD,Bidirectional.Mode.AVERAGE,Bidirectional.Mode.MUL};
  Random r=new Random(12345);
  for (  int mb : new int[]{1,3}) {
    for (    boolean inputMask : new boolean[]{false,true}) {
      for (      boolean simple : new boolean[]{false,true}) {
        INDArray in=Nd4j.rand(new int[]{mb,nIn,tsLength});
        INDArray labels=Nd4j.create(mb,nOut);
        for (int i=0; i < mb; i++) {
          labels.putScalar(i,r.nextInt(nOut),1.0);
        }
        String maskType=(inputMask ? "inputMask" : "none");
        INDArray inMask=null;
        if (inputMask) {
          inMask=Nd4j.ones(mb,tsLength);
          for (int i=0; i < mb; i++) {
            int firstMaskedStep=tsLength - 1 - i;
            if (firstMaskedStep == 0) {
              firstMaskedStep=tsLength;
            }
            for (int j=firstMaskedStep; j < tsLength; j++) {
              inMask.putScalar(i,j,0.0);
            }
          }
        }
        String name="testLastTimeStepLayer() - mb=" + mb + ", tsLength = "+ tsLength+ ", maskType="+ maskType+ ", rnnType="+ (simple ? "SimpleRnn" : "LSTM");
        if (PRINT_RESULTS) {
          System.out.println("Starting test: " + name);
        }
        MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().activation(Activation.TANH).updater(new NoOp()).weightInit(WeightInit.XAVIER).list().layer(simple ? new SimpleRnn.Builder().nOut(layerSize).build() : new LSTM.Builder().nOut(layerSize).build()).layer(new LastTimeStep(simple ? new SimpleRnn.Builder().nOut(layerSize).build() : new LSTM.Builder().nOut(layerSize).build())).layer(new OutputLayer.Builder().nOut(nOut).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build()).setInputType(InputType.recurrent(nIn)).build();
        MultiLayerNetwork net=new MultiLayerNetwork(conf);
        net.init();
        boolean gradOK=GradientCheckUtil.checkGradients(net,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,in,labels,inMask,null);
        assertTrue(name,gradOK);
        TestUtils.testModelSerialization(net);
      }
    }
  }
}
