@Test public void testUpdatesPropagation_1() throws Exception {
  val conf=VoidConfiguration.builder().meshBuildMode(MeshBuildMode.PLAIN).build();
  val array=Nd4j.ones(10,10);
  val connector=new DummyTransport.Connector();
  val rootTransport=new DelayedDummyTransport(rootId,connector,rootId,conf);
  val clientTransportA=new DelayedDummyTransport("412334",connector,rootId,conf);
  val clientTransportB=new DelayedDummyTransport("123441",connector,rootId,conf);
  connector.register(rootTransport,clientTransportA,clientTransportB);
  val rootServer=new ModelParameterServer(rootTransport,true);
  val clientServerA=new ModelParameterServer(clientTransportA,false);
  val clientServerB=new ModelParameterServer(clientTransportB,false);
  rootServer.launch();
  clientServerA.launch();
  clientServerB.launch();
  val servers=new ArrayList<ModelParameterServer>();
  val transports=new ArrayList<DelayedDummyTransport>();
  for (int e=0; e < 128; e++) {
    val clientTransport=new DelayedDummyTransport(String.valueOf(e),connector,rootId,conf);
    val clientServer=new ModelParameterServer(clientTransport,false);
    connector.register(clientTransport);
    servers.add(clientServer);
    transports.add(clientTransport);
    clientServer.launch();
  }
  connector.blockUntilFinished();
  assertEquals(servers.size() + 3,rootTransport.getMesh().totalNodes());
  clientServerA.sendUpdate(array);
  connector.blockUntilFinished();
  val updatesR=rootServer.getUpdates();
  val updatesA=clientServerA.getUpdates();
  val updatesB=clientServerB.getUpdates();
  assertEquals(1,updatesR.size());
  assertEquals(1,updatesB.size());
  assertEquals(0,updatesA.size());
  for (int e=0; e < servers.size(); e++) {
    val s=servers.get(e);
    assertEquals("Failed at node [" + e + "]",1,s.getUpdates().size());
  }
}
