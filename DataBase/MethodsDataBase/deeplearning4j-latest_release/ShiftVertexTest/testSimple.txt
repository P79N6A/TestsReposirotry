@Test public void testSimple(){
  INDArray input=Nd4j.create(new double[][]{{0.2,0.3,0.5},{0.7,1.1,1.3},{1.7,1.9,2.3},{2.9,3.1,3.7}});
  double sf=4.1;
  ComputationGraphConfiguration cgc=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("input").addLayer("denselayer",new DenseLayer.Builder().nIn(input.columns()).nOut(1).activation(Activation.IDENTITY).build(),"input").addLayer("identityinputactivation",new ActivationLayer.Builder().activation(Activation.IDENTITY).build(),"input").addVertex("shiftvertex",new ShiftVertex(sf),"identityinputactivation").addLayer("identityshiftvertex",new ActivationLayer.Builder().activation(Activation.IDENTITY).build(),"shiftvertex").setOutputs("identityshiftvertex","denselayer").build();
  ComputationGraph cg=new ComputationGraph(cgc);
  cg.init();
  INDArray output=cg.output(true,input)[0];
  INDArray target=Nd4j.zeros(input.shape());
  target.addi(input);
  target.addi(sf);
  INDArray squared=output.sub(target);
  double rms=squared.mul(squared).sumNumber().doubleValue();
  Assert.assertEquals(0.0,rms,this.epsilon);
}
