@Test public void testCnnMergeFeatureMasks(){
  for (int t=0; t < 3; t++) {
    log.info("Starting test: {}",t);
    int nOut=3;
    int width=5;
    int height=4;
    int depth=3;
    int nExamples1=2;
    int nExamples2=1;
    int length1=width * height * depth* nExamples1;
    int length2=width * height * depth* nExamples2;
    INDArray first=Nd4j.linspace(1,length1,length1).reshape('c',nExamples1,depth,height,width);
    INDArray second=Nd4j.linspace(1,length2,length2).reshape('c',nExamples2,depth,height,width).addi(0.1);
    INDArray third=Nd4j.linspace(1,length2,length2).reshape('c',nExamples2,depth,height,width).addi(0.2);
    INDArray fm1=null;
    INDArray fm2;
    INDArray fm3;
switch (t) {
case 0:
      fm2=Nd4j.ones(1,1,height,1);
    fm3=Nd4j.zeros(1,1,height,1);
  fm3.get(all(),all(),interval(0,2),all()).assign(1.0);
break;
case 1:
fm2=Nd4j.ones(1,1,1,width);
fm3=Nd4j.zeros(1,1,1,width);
fm3.get(all(),all(),all(),interval(0,3)).assign(1.0);
break;
case 2:
fm2=Nd4j.ones(1,1,height,width);
fm3=Nd4j.zeros(1,1,height,width);
fm3.get(all(),all(),interval(0,2),interval(0,3)).assign(1.0);
break;
default :
throw new RuntimeException();
}
INDArray fmExpected=Nd4j.concat(0,Nd4j.ones(2,1,(t == 1 ? 1 : height),(t == 0 ? 1 : width)),fm2,fm3);
INDArray labels1=Nd4j.linspace(1,nExamples1 * nOut,nExamples1 * nOut).reshape('c',nExamples1,nOut);
INDArray labels2=Nd4j.linspace(1,nExamples2 * nOut,nExamples2 * nOut).reshape('c',nExamples2,nOut).addi(0.1);
INDArray labels3=Nd4j.linspace(1,nExamples2 * nOut,nExamples2 * nOut).reshape('c',nExamples2,nOut).addi(0.2);
MultiDataSet ds1=new MultiDataSet(first,labels1,fm1,null);
MultiDataSet ds2=new MultiDataSet(second,labels2,fm2,null);
MultiDataSet ds3=new MultiDataSet(third,labels3,fm3,null);
MultiDataSet merged=MultiDataSet.merge(Arrays.asList(ds1,ds2,ds3));
INDArray fMerged=merged.getFeatures(0);
INDArray lMerged=merged.getLabels(0);
INDArray fmMerged=merged.getFeaturesMaskArray(0);
assertArrayEquals(new long[]{nExamples1 + 2 * nExamples2,depth,height,width},fMerged.shape());
assertArrayEquals(new long[]{nExamples1 + 2 * nExamples2,nOut},lMerged.shape());
assertArrayEquals(new long[]{nExamples1 + 2 * nExamples2,1,(t == 1 ? 1 : height),(t == 0 ? 1 : width)},fmMerged.shape());
assertEquals(first,fMerged.get(interval(0,nExamples1),all(),all(),all()));
INDArray secondExp=fMerged.get(interval(nExamples1,nExamples1 + nExamples2),all(),all(),all());
assertEquals(second,secondExp);
assertEquals(third,fMerged.get(interval(nExamples1 + nExamples2,nExamples1 + 2 * nExamples2),all(),all(),all()));
assertEquals(labels1,lMerged.get(interval(0,nExamples1),all()));
assertEquals(labels2,lMerged.get(interval(nExamples1,nExamples1 + nExamples2),all()));
assertEquals(labels3,lMerged.get(interval(nExamples1 + nExamples2,nExamples1 + 2 * nExamples2),all()));
assertEquals(fmExpected,fmMerged);
MultiDataSet merged2=MultiDataSet.merge(Arrays.asList(ds1,new MultiDataSet(),ds2,ds3));
assertEquals(merged,merged2);
INDArray temp=ds1.getFeatures(0);
ds1.setFeatures(0,null);
try {
MultiDataSet.merge(Arrays.asList(ds1,ds2));
fail("Expected exception");
}
 catch (NullPointerException e) {
assertTrue(e.getMessage().contains("null feature array"));
}
try {
MultiDataSet.merge(Arrays.asList(ds2,ds1));
fail("Expected exception");
}
 catch (NullPointerException e) {
assertTrue(e.getMessage().contains("merging"));
}
ds1.setFeatures(0,temp);
ds2.setLabels(0,null);
try {
MultiDataSet.merge(Arrays.asList(ds1,ds2));
fail("Expected exception");
}
 catch (NullPointerException e) {
assertTrue(e.getMessage().contains("merging"));
}
try {
MultiDataSet.merge(Arrays.asList(ds2,ds1));
fail("Expected exception");
}
 catch (NullPointerException e) {
assertTrue(e.getMessage().contains("merge"));
}
}
}
