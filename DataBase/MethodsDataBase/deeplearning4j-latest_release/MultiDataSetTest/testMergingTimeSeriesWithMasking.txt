@Test public void testMergingTimeSeriesWithMasking(){
  int tsLengthIn0=8;
  int tsLengthIn1=9;
  int tsLengthOut0=10;
  int tsLengthOut1=11;
  int nRows=5;
  int nColsIn0=3;
  int nColsIn1=4;
  int nColsOut0=5;
  int nColsOut1=6;
  INDArray expectedIn0=Nd4j.zeros(nRows,nColsIn0,tsLengthIn0);
  INDArray expectedIn1=Nd4j.zeros(nRows,nColsIn1,tsLengthIn1);
  INDArray expectedOut0=Nd4j.zeros(nRows,nColsOut0,tsLengthOut0);
  INDArray expectedOut1=Nd4j.zeros(nRows,nColsOut1,tsLengthOut1);
  INDArray expectedMaskIn0=Nd4j.zeros(nRows,tsLengthIn0);
  INDArray expectedMaskIn1=Nd4j.zeros(nRows,tsLengthIn1);
  INDArray expectedMaskOut0=Nd4j.zeros(nRows,tsLengthOut0);
  INDArray expectedMaskOut1=Nd4j.zeros(nRows,tsLengthOut1);
  Random r=new Random(12345);
  List<MultiDataSet> list=new ArrayList<>(nRows);
  for (int i=0; i < nRows; i++) {
    int thisRowIn0Length=tsLengthIn0 - i;
    int thisRowIn1Length=tsLengthIn1 - i;
    int thisRowOut0Length=tsLengthOut0 - i;
    int thisRowOut1Length=tsLengthOut1 - i;
    int in0NumElem=thisRowIn0Length * nColsIn0;
    INDArray in0=Nd4j.linspace(0,in0NumElem - 1,in0NumElem).reshape(1,nColsIn0,thisRowIn0Length);
    int in1NumElem=thisRowIn1Length * nColsIn1;
    INDArray in1=Nd4j.linspace(0,in1NumElem - 1,in1NumElem).reshape(1,nColsIn1,thisRowIn1Length);
    int out0NumElem=thisRowOut0Length * nColsOut0;
    INDArray out0=Nd4j.linspace(0,out0NumElem - 1,out0NumElem).reshape(1,nColsOut0,thisRowOut0Length);
    int out1NumElem=thisRowOut1Length * nColsOut1;
    INDArray out1=Nd4j.linspace(0,out1NumElem - 1,out1NumElem).reshape(1,nColsOut1,thisRowOut1Length);
    INDArray maskIn0=null;
    INDArray maskIn1=Nd4j.zeros(1,thisRowIn1Length);
    for (int j=0; j < thisRowIn1Length; j++) {
      if (r.nextBoolean())       maskIn1.putScalar(j,1.0);
    }
    INDArray maskOut0=null;
    INDArray maskOut1=Nd4j.zeros(1,thisRowOut1Length);
    for (int j=0; j < thisRowOut1Length; j++) {
      if (r.nextBoolean())       maskOut1.putScalar(j,1.0);
    }
    expectedIn0.put(new INDArrayIndex[]{NDArrayIndex.point(i),NDArrayIndex.all(),NDArrayIndex.interval(0,thisRowIn0Length)},in0);
    expectedIn1.put(new INDArrayIndex[]{NDArrayIndex.point(i),NDArrayIndex.all(),NDArrayIndex.interval(0,thisRowIn1Length)},in1);
    expectedOut0.put(new INDArrayIndex[]{NDArrayIndex.point(i),NDArrayIndex.all(),NDArrayIndex.interval(0,thisRowOut0Length)},out0);
    expectedOut1.put(new INDArrayIndex[]{NDArrayIndex.point(i),NDArrayIndex.all(),NDArrayIndex.interval(0,thisRowOut1Length)},out1);
    expectedMaskIn0.put(new INDArrayIndex[]{NDArrayIndex.point(i),NDArrayIndex.interval(0,thisRowIn0Length)},Nd4j.ones(1,thisRowIn0Length));
    expectedMaskIn1.put(new INDArrayIndex[]{NDArrayIndex.point(i),NDArrayIndex.interval(0,thisRowIn1Length)},maskIn1);
    expectedMaskOut0.put(new INDArrayIndex[]{NDArrayIndex.point(i),NDArrayIndex.interval(0,thisRowOut0Length)},Nd4j.ones(1,thisRowOut0Length));
    expectedMaskOut1.put(new INDArrayIndex[]{NDArrayIndex.point(i),NDArrayIndex.interval(0,thisRowOut1Length)},maskOut1);
    list.add(new MultiDataSet(new INDArray[]{in0,in1},new INDArray[]{out0,out1},new INDArray[]{maskIn0,maskIn1},new INDArray[]{maskOut0,maskOut1}));
  }
  MultiDataSet merged=MultiDataSet.merge(list);
  assertEquals(2,merged.getFeatures().length);
  assertEquals(2,merged.getLabels().length);
  assertEquals(2,merged.getFeaturesMaskArrays().length);
  assertEquals(2,merged.getLabelsMaskArrays().length);
  assertEquals(expectedIn0,merged.getFeatures(0));
  assertEquals(expectedIn1,merged.getFeatures(1));
  assertEquals(expectedOut0,merged.getLabels(0));
  assertEquals(expectedOut1,merged.getLabels(1));
  assertEquals(expectedMaskIn0,merged.getFeaturesMaskArray(0));
  assertEquals(expectedMaskIn1,merged.getFeaturesMaskArray(1));
  assertEquals(expectedMaskOut0,merged.getLabelsMaskArray(0));
  assertEquals(expectedMaskOut1,merged.getLabelsMaskArray(1));
}
