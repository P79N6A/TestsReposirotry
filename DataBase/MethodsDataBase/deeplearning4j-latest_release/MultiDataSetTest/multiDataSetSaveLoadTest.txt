@Test public void multiDataSetSaveLoadTest() throws IOException {
  int max=3;
  Nd4j.getRandom().setSeed(12345);
  for (int numF=0; numF <= max; numF++) {
    for (int numL=0; numL <= max; numL++) {
      INDArray[] f=(numF > 0 ? new INDArray[numF] : null);
      INDArray[] l=(numL > 0 ? new INDArray[numL] : null);
      INDArray[] fm=(numF > 0 ? new INDArray[numF] : null);
      INDArray[] lm=(numL > 0 ? new INDArray[numL] : null);
      if (numF > 0) {
        for (int i=0; i < f.length; i++) {
          f[i]=Nd4j.rand(new int[]{3,4,5});
        }
      }
      if (numL > 0) {
        for (int i=0; i < l.length; i++) {
          l[i]=Nd4j.rand(new int[]{2,3,4});
        }
      }
      if (numF > 0) {
        for (int i=0; i < Math.min(fm.length,2); i++) {
          fm[i]=Nd4j.rand(new int[]{3,5});
        }
      }
      if (numL > 0) {
        for (int i=0; i < Math.min(lm.length,2); i++) {
          lm[i]=Nd4j.rand(new int[]{2,4});
        }
      }
      MultiDataSet mds=new MultiDataSet(f,l,fm,lm);
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      DataOutputStream dos=new DataOutputStream(baos);
      mds.save(dos);
      byte[] asBytes=baos.toByteArray();
      ByteArrayInputStream bais=new ByteArrayInputStream(asBytes);
      DataInputStream dis=new DataInputStream(bais);
      MultiDataSet mds2=new MultiDataSet();
      mds2.load(dis);
      assertEquals("Failed at [" + numF + "]/["+ numL+ "]",mds,mds2);
    }
  }
}
