@Test public void testGeneration() throws Exception {
  Map<String,Object> commands=new HashMap<>();
  commands.put(DataSetIteratorFactoryProvider.FACTORY_KEY,new HashMap<>());
  CandidateGenerator candidateGenerator=new GridSearchCandidateGenerator(new BraninSpace(),4,GridSearchCandidateGenerator.Mode.Sequential,commands);
  double[] expValuesFirst={-5,0,5,10};
  double[] expValuesSecond={0,5,10,15};
  for (int i=0; i < 4 * 4; i++) {
    BraninConfig conf=(BraninConfig)candidateGenerator.getCandidate().getValue();
    double expF=expValuesFirst[i % 4];
    double expS=expValuesSecond[i / 4];
    double actF=conf.getX1();
    double actS=conf.getX2();
    assertEquals(expF,actF,1e-4);
    assertEquals(expS,actS,1e-4);
  }
  double[][] orderedOutput=new double[16][2];
  for (int i=0; i < expValuesFirst.length; i++) {
    for (int j=0; j < expValuesSecond.length; j++) {
      orderedOutput[4 * j + i][0]=expValuesFirst[i];
      orderedOutput[4 * j + i][1]=expValuesSecond[j];
    }
  }
  candidateGenerator=new GridSearchCandidateGenerator(new BraninSpace(),4,GridSearchCandidateGenerator.Mode.RandomOrder,commands);
  boolean[] seen=new boolean[16];
  int seenCount=0;
  for (int i=0; i < 4 * 4; i++) {
    assertTrue(candidateGenerator.hasMoreCandidates());
    BraninConfig config=(BraninConfig)candidateGenerator.getCandidate().getValue();
    double x1=config.getX1();
    double x2=config.getX2();
    boolean matched=false;
    for (int j=0; j < 16; j++) {
      if (Math.abs(orderedOutput[j][0] - x1) < 1e-5 && Math.abs(orderedOutput[j][1] - x2) < 1e-5) {
        matched=true;
        if (seen[j])         fail("Same candidate generated multiple times");
        seen[j]=true;
        seenCount++;
        break;
      }
    }
    assertTrue("Candidate " + x1 + ", "+ x2+ " not found; invalid?",matched);
  }
  assertFalse(candidateGenerator.hasMoreCandidates());
  assertEquals(16,seenCount);
}
