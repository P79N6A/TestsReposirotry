@Test public void testSparkFrozenLayersCompGraph(){
  FineTuneConfiguration finetune=new FineTuneConfiguration.Builder().updater(new Sgd(0.1)).build();
  int nIn=6;
  int nOut=3;
  ComputationGraph origModel=new ComputationGraph(new NeuralNetConfiguration.Builder().updater(new Sgd(0.1)).activation(Activation.TANH).graphBuilder().addInputs("in").addLayer("0",new DenseLayer.Builder().nIn(6).nOut(5).build(),"in").addLayer("1",new DenseLayer.Builder().nIn(5).nOut(4).build(),"0").addLayer("2",new DenseLayer.Builder().nIn(4).nOut(3).build(),"1").addLayer("3",new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(3).nOut(3).build(),"2").setOutputs("3").build());
  origModel.init();
  ComputationGraph withFrozen=new TransferLearning.GraphBuilder(origModel).fineTuneConfiguration(finetune).setFeatureExtractor("1").build();
  Map<String,INDArray> m=withFrozen.paramTable();
  Map<String,INDArray> pCopy=new HashMap<>();
  for (  Map.Entry<String,INDArray> entry : m.entrySet()) {
    pCopy.put(entry.getKey(),entry.getValue().dup());
  }
  int avgFreq=2;
  int batchSize=8;
  ParameterAveragingTrainingMaster tm=new ParameterAveragingTrainingMaster.Builder(batchSize).averagingFrequency(avgFreq).batchSizePerWorker(batchSize).rddTrainingApproach(RDDTrainingApproach.Direct).workerPrefetchNumBatches(0).build();
  SparkComputationGraph sNet=new SparkComputationGraph(sc,withFrozen.clone(),tm);
  assertTrue(withFrozen.getLayer(0) instanceof FrozenLayer);
  assertTrue(withFrozen.getLayer(1) instanceof FrozenLayer);
  int numMinibatches=4 * sc.defaultParallelism();
  List<DataSet> list=new ArrayList<>();
  for (int i=0; i < numMinibatches; i++) {
    INDArray f=Nd4j.rand(batchSize,nIn);
    INDArray l=Nd4j.zeros(batchSize,nOut);
    for (int j=0; j < batchSize; j++) {
      l.putScalar(j,j % nOut,1.0);
    }
    list.add(new DataSet(f,l));
  }
  JavaRDD<DataSet> rdd=sc.parallelize(list);
  sNet.fit(rdd);
  ComputationGraph fitted=sNet.getNetwork();
  Map<String,INDArray> fittedParams=fitted.paramTable();
  for (  Map.Entry<String,INDArray> entry : fittedParams.entrySet()) {
    INDArray orig=pCopy.get(entry.getKey());
    INDArray now=entry.getValue();
    boolean isFrozen=entry.getKey().startsWith("0_") || entry.getKey().startsWith("1_");
    if (isFrozen) {
      assertEquals(entry.getKey(),orig,now);
    }
 else {
      assertNotEquals(entry.getKey(),orig,now);
    }
  }
}
