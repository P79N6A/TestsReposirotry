@Test public void testPoolingEdgeCases(){
  for (  char inputOrder : new char[]{'c','f'}) {
    for (    char outputOrder : new char[]{'c','f'}) {
      INDArray input=Nd4j.create(1,1,3,3);
      input.get(point(0),point(0),all(),all()).assign(Nd4j.linspace(1,9,9).reshape('c',3,3)).dup(inputOrder);
      input=input.dup('c');
      INDArray input2=Nd4j.create(new double[]{1,2,3,4,5,6,7,8,9},new int[]{1,1,3,3},'c');
      assertEquals(input,input2);
      input=input2;
      for (int i=0; i < 3; i++) {
        for (int j=0; j < 3; j++) {
          System.out.print(input.getDouble(0,0,i,j) + ",");
        }
        System.out.println();
      }
      System.out.println();
      INDArray sums=Nd4j.create(new double[][]{{(1 + 2 + 4+ 5),(2 + 3 + 5+ 6),(3 + 6)},{(4 + 5 + 7+ 8),(5 + 6 + 8+ 9),(6 + 9)},{(7 + 8),(8 + 9),(9)}});
      INDArray divEnabled=Nd4j.create(new double[][]{{4,4,2},{4,4,2},{2,2,1}});
      INDArray expEnabled=sums.div(divEnabled);
      INDArray expDl4j=sums.div(4);
      DynamicCustomOp op1=DynamicCustomOp.builder("avgpool2d").addIntegerArguments(new int[]{2,2,1,1,0,0,1,1,1,0,0}).addInputs(input).addOutputs(Nd4j.create(new int[]{1,1,3,3},outputOrder)).build();
      DynamicCustomOp op2=DynamicCustomOp.builder("avgpool2d").addIntegerArguments(new int[]{2,2,1,1,0,0,1,1,1,1,0}).addInputs(input).addOutputs(Nd4j.create(new int[]{1,1,3,3},outputOrder)).build();
      Nd4j.getExecutioner().exec(op1);
      Nd4j.getExecutioner().exec(op2);
      INDArray actEnabled=op1.getOutputArgument(0);
      INDArray actDl4j=op2.getOutputArgument(0);
      String msg="inOrder=" + inputOrder + ", outOrder="+ outputOrder;
      assertEquals(msg,expDl4j,actDl4j.get(point(0),point(0),all(),all()));
      assertEquals(msg,expEnabled,actEnabled.get(point(0),point(0),all(),all()));
    }
  }
}
