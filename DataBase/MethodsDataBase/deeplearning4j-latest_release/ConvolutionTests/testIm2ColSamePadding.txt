@Test public void testIm2ColSamePadding(){
  int miniBatch=2;
  int depth=2;
  int inH=3;
  int inW=3;
  int strideH=1;
  int strideW=1;
  int kH=2;
  int kW=2;
  int outH=(int)Math.ceil(inH / ((double)strideH));
  int outW=(int)Math.ceil(inW / ((double)strideW));
  assertEquals(outH,inH);
  assertEquals(outW,inW);
  int sumPadHeight=((outH - 1) * strideH + kH - inH);
  int padTop=sumPadHeight / 2;
  int padBottom=sumPadHeight - padTop;
  int sumPadWidth=((outW - 1) * strideW + kW - inW);
  int padLeft=sumPadWidth / 2;
  int padRight=sumPadWidth - padLeft;
  System.out.println("Output size: " + outH + ", "+ outW);
  System.out.println("Pad top/bottom: " + padTop + "\t"+ padBottom);
  System.out.println("Pad left/right: " + padLeft + "\t"+ padRight);
  INDArray input=Nd4j.create(new int[]{miniBatch,depth,inH,inW},'c');
  input.put(new INDArrayIndex[]{point(0),point(0),all(),all()},Nd4j.create(new double[][]{{0,1,2},{3,4,5},{6,7,8}}));
  input.put(new INDArrayIndex[]{point(0),point(1),all(),all()},Nd4j.create(new double[][]{{9,10,11},{12,13,14},{15,16,17}}));
  input.put(new INDArrayIndex[]{point(1),point(0),all(),all()},Nd4j.create(new double[][]{{18,19,20},{21,22,23},{24,25,26}}));
  input.put(new INDArrayIndex[]{point(1),point(1),all(),all()},Nd4j.create(new double[][]{{27,28,29},{30,31,32},{33,34,35}}));
  INDArray expected=Nd4j.create(new int[]{miniBatch,depth,kH,kW,outH,outW},'c');
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(0)},Nd4j.create(new double[][]{{0,1},{3,4}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(1)},Nd4j.create(new double[][]{{1,2},{4,5}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(2)},Nd4j.create(new double[][]{{2,0},{5,0}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(0)},Nd4j.create(new double[][]{{3,4},{6,7}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(1)},Nd4j.create(new double[][]{{4,5},{7,8}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(2)},Nd4j.create(new double[][]{{5,0},{8,0}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(2),point(0)},Nd4j.create(new double[][]{{6,7},{0,0}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(2),point(1)},Nd4j.create(new double[][]{{7,8},{0,0}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(2),point(2)},Nd4j.create(new double[][]{{8,0},{0,0}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(0),point(0)},Nd4j.create(new double[][]{{9,10},{12,13}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(0),point(1)},Nd4j.create(new double[][]{{10,11},{13,14}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(0),point(2)},Nd4j.create(new double[][]{{11,0},{14,0}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(1),point(0)},Nd4j.create(new double[][]{{12,13},{15,16}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(1),point(1)},Nd4j.create(new double[][]{{13,14},{16,17}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(1),point(2)},Nd4j.create(new double[][]{{14,0},{17,0}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(2),point(0)},Nd4j.create(new double[][]{{15,16},{0,0}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(2),point(1)},Nd4j.create(new double[][]{{16,17},{0,0}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(2),point(2)},Nd4j.create(new double[][]{{17,0},{0,0}}));
  expected.put(new INDArrayIndex[]{point(1),point(0),all(),all(),point(0),point(0)},Nd4j.create(new double[][]{{18,19},{21,22}}));
  expected.put(new INDArrayIndex[]{point(1),point(0),all(),all(),point(0),point(1)},Nd4j.create(new double[][]{{19,20},{22,23}}));
  expected.put(new INDArrayIndex[]{point(1),point(0),all(),all(),point(0),point(2)},Nd4j.create(new double[][]{{20,0},{23,0}}));
  expected.put(new INDArrayIndex[]{point(1),point(0),all(),all(),point(1),point(0)},Nd4j.create(new double[][]{{21,22},{24,25}}));
  expected.put(new INDArrayIndex[]{point(1),point(0),all(),all(),point(1),point(1)},Nd4j.create(new double[][]{{22,23},{25,26}}));
  expected.put(new INDArrayIndex[]{point(1),point(0),all(),all(),point(1),point(2)},Nd4j.create(new double[][]{{23,0},{26,0}}));
  expected.put(new INDArrayIndex[]{point(1),point(0),all(),all(),point(2),point(0)},Nd4j.create(new double[][]{{24,25},{0,0}}));
  expected.put(new INDArrayIndex[]{point(1),point(0),all(),all(),point(2),point(1)},Nd4j.create(new double[][]{{25,26},{0,0}}));
  expected.put(new INDArrayIndex[]{point(1),point(0),all(),all(),point(2),point(2)},Nd4j.create(new double[][]{{26,0},{0,0}}));
  expected.put(new INDArrayIndex[]{point(1),point(1),all(),all(),point(0),point(0)},Nd4j.create(new double[][]{{27,28},{30,31}}));
  expected.put(new INDArrayIndex[]{point(1),point(1),all(),all(),point(0),point(1)},Nd4j.create(new double[][]{{28,29},{31,32}}));
  expected.put(new INDArrayIndex[]{point(1),point(1),all(),all(),point(0),point(2)},Nd4j.create(new double[][]{{29,0},{32,0}}));
  expected.put(new INDArrayIndex[]{point(1),point(1),all(),all(),point(1),point(0)},Nd4j.create(new double[][]{{30,31},{33,34}}));
  expected.put(new INDArrayIndex[]{point(1),point(1),all(),all(),point(1),point(1)},Nd4j.create(new double[][]{{31,32},{34,35}}));
  expected.put(new INDArrayIndex[]{point(1),point(1),all(),all(),point(1),point(2)},Nd4j.create(new double[][]{{32,0},{35,0}}));
  expected.put(new INDArrayIndex[]{point(1),point(1),all(),all(),point(2),point(0)},Nd4j.create(new double[][]{{33,34},{0,0}}));
  expected.put(new INDArrayIndex[]{point(1),point(1),all(),all(),point(2),point(1)},Nd4j.create(new double[][]{{34,35},{0,0}}));
  expected.put(new INDArrayIndex[]{point(1),point(1),all(),all(),point(2),point(2)},Nd4j.create(new double[][]{{35,0},{0,0}}));
  INDArray outAlloc=Nd4j.create(miniBatch,depth,kH,kW,outH,outW);
  INDArray out=Convolution.im2col(input,kH,kW,strideH,strideW,padTop,padLeft,true,outAlloc);
  assertEquals(expected,out);
  INDArray out2=Nd4j.create(new int[]{miniBatch,depth,outH,outW,kH,kW},'c');
  INDArray out2p=out2.permute(0,1,4,5,2,3);
  Convolution.im2col(input,kH,kW,strideH,strideW,padTop,padLeft,true,out2p);
  assertEquals(expected,out2p);
  INDArray out3=Nd4j.create(new int[]{miniBatch,outH,outW,depth,kH,kW},'c');
  INDArray out3p=out3.permute(0,3,4,5,1,2);
  Convolution.im2col(input,kH,kW,strideH,strideW,padTop,padLeft,true,out3p);
  assertEquals(expected,out3p);
  INDArray col2imResult=Nd4j.create(input.shape());
  INDArray col2im=Convolution.col2im(out,col2imResult,strideH,strideW,padTop,padLeft,inH,inW,1,1);
  System.out.println(Arrays.toString(col2im.data().asDouble()));
}
