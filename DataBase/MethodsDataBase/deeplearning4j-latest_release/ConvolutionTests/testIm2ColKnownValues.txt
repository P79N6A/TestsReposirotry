@Test public void testIm2ColKnownValues(){
  int miniBatch=2;
  int depth=2;
  int height=3;
  int width=3;
  int outH=2;
  int outW=2;
  int kH=2;
  int kW=2;
  int sX=1;
  int sY=1;
  int pX=0;
  int pY=0;
  INDArray input=Nd4j.create(new int[]{miniBatch,depth,height,width},'c');
  input.put(new INDArrayIndex[]{point(0),point(0),all(),all()},Nd4j.create(new double[][]{{0,1,2},{3,4,5},{6,7,8}}));
  input.put(new INDArrayIndex[]{point(0),point(1),all(),all()},Nd4j.create(new double[][]{{9,10,11},{12,13,14},{15,16,17}}));
  input.put(new INDArrayIndex[]{point(1),point(0),all(),all()},Nd4j.create(new double[][]{{18,19,20},{21,22,23},{24,25,26}}));
  input.put(new INDArrayIndex[]{point(1),point(1),all(),all()},Nd4j.create(new double[][]{{27,28,29},{30,31,32},{33,34,35}}));
  INDArray expected=Nd4j.create(new int[]{miniBatch,depth,kH,kW,outH,outW},'c');
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(0)},Nd4j.create(new double[][]{{0,1},{3,4}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(1)},Nd4j.create(new double[][]{{1,2},{4,5}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(0)},Nd4j.create(new double[][]{{3,4},{6,7}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(1)},Nd4j.create(new double[][]{{4,5},{7,8}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(0),point(0)},Nd4j.create(new double[][]{{9,10},{12,13}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(0),point(1)},Nd4j.create(new double[][]{{10,11},{13,14}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(1),point(0)},Nd4j.create(new double[][]{{12,13},{15,16}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(1),point(1)},Nd4j.create(new double[][]{{13,14},{16,17}}));
  expected.put(new INDArrayIndex[]{point(1),point(0),all(),all(),point(0),point(0)},Nd4j.create(new double[][]{{18,19},{21,22}}));
  expected.put(new INDArrayIndex[]{point(1),point(0),all(),all(),point(0),point(1)},Nd4j.create(new double[][]{{19,20},{22,23}}));
  expected.put(new INDArrayIndex[]{point(1),point(0),all(),all(),point(1),point(0)},Nd4j.create(new double[][]{{21,22},{24,25}}));
  expected.put(new INDArrayIndex[]{point(1),point(0),all(),all(),point(1),point(1)},Nd4j.create(new double[][]{{22,23},{25,26}}));
  expected.put(new INDArrayIndex[]{point(1),point(1),all(),all(),point(0),point(0)},Nd4j.create(new double[][]{{27,28},{30,31}}));
  expected.put(new INDArrayIndex[]{point(1),point(1),all(),all(),point(0),point(1)},Nd4j.create(new double[][]{{28,29},{31,32}}));
  expected.put(new INDArrayIndex[]{point(1),point(1),all(),all(),point(1),point(0)},Nd4j.create(new double[][]{{30,31},{33,34}}));
  expected.put(new INDArrayIndex[]{point(1),point(1),all(),all(),point(1),point(1)},Nd4j.create(new double[][]{{31,32},{34,35}}));
  INDArray out=Convolution.im2col(input,kH,kW,sY,sX,pY,pX,false);
  assertEquals(expected,out);
  INDArray out2=Nd4j.create(new int[]{miniBatch,depth,outH,outW,kH,kW},'c');
  INDArray out2p=out2.permute(0,1,4,5,2,3);
  Convolution.im2col(input,kH,kW,sY,sX,pY,pX,false,out2p);
  assertEquals(expected,out2p);
  INDArray out3=Nd4j.create(new int[]{miniBatch,outH,outW,depth,kH,kW},'c');
  INDArray out3p=out3.permute(0,3,4,5,1,2);
  Convolution.im2col(input,kH,kW,sY,sX,pY,pX,false,out3p);
  assertEquals(expected,out3p);
}
