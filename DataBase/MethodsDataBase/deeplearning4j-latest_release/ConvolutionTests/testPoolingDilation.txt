@Test public void testPoolingDilation(){
  int[] inputShape={1,1,4,5};
  int outH=inputShape[2];
  int outW=inputShape[3];
  int[] kernel={2,2};
  int[] strides={1,1};
  int[] pad={1,1};
  int[] dilation={2,2};
  boolean same=true;
  INDArray origInput=Nd4j.create(inputShape);
  origInput.get(point(0),point(0),all(),all()).assign(Nd4j.linspace(1,20,20).reshape('c',4,5));
  INDArray expMax=Nd4j.create(1,1,4,5);
  expMax.get(point(0),point(0),all(),all()).assign(Nd4j.create(new double[][]{{7,8,9,10,9},{12,13,14,15,14},{17,18,19,20,19},{12,13,14,15,14}}));
  INDArray sum=Nd4j.create(1,1,4,5);
  sum.get(point(0),point(0),all(),all()).assign(Nd4j.create(new double[][]{{7,(6 + 8),(7 + 9),(8 + 10),9},{(2 + 12),(1 + 3 + 11+ 13),(2 + 4 + 12+ 14),(3 + 5 + 13+ 15),(4 + 14)},{(7 + 17),(6 + 8 + 16+ 18),(7 + 9 + 17+ 19),(8 + 10 + 18+ 20),(9 + 19)},{12,(11 + 13),(12 + 14),(13 + 15),14}}));
  INDArray expAvgExclude=sum.dup();
  expAvgExclude.get(point(0),point(0),all(),all()).divi(Nd4j.create(new double[][]{{1,2,2,2,1},{2,4,4,4,2},{2,4,4,4,2},{1,2,2,2,1}}));
  INDArray expAvgInclude=sum.div(4.0);
  int testNum=0;
  for (int i=0; i < 3; i++) {
    List<Pair<INDArray,String>> inputs=NDArrayCreationUtil.getAll4dTestArraysWithShape(12345,inputShape);
    for (    Pair<INDArray,String> pIn : inputs) {
      INDArray input=pIn.getFirst().assign(origInput);
      INDArray out=Nd4j.create(input.shape(),'c');
      input=input.dup('c');
      INDArray exp;
      String mode;
switch (i) {
case 0:
        Convolution.pooling2D(input,kernel[0],kernel[1],strides[0],strides[1],pad[0],pad[1],dilation[0],dilation[1],same,Pooling2D.Pooling2DType.MAX,Pooling2D.Divisor.INCLUDE_PADDING,0.0,outH,outW,out);
      exp=expMax;
    mode="max";
  break;
case 1:
Convolution.pooling2D(input,kernel[0],kernel[1],strides[0],strides[1],pad[0],pad[1],dilation[0],dilation[1],same,Pooling2D.Pooling2DType.AVG,Pooling2D.Divisor.EXCLUDE_PADDING,0.0,outH,outW,out);
exp=expAvgExclude;
mode="avg_0";
break;
case 2:
Convolution.pooling2D(input,kernel[0],kernel[1],strides[0],strides[1],pad[0],pad[1],dilation[0],dilation[1],same,Pooling2D.Pooling2DType.AVG,Pooling2D.Divisor.INCLUDE_PADDING,0.0,outH,outW,out);
exp=expAvgInclude;
mode="avg_2";
break;
default :
throw new RuntimeException();
}
String msg="TestNum=" + testNum + ", Mode: "+ mode+ ", "+ pIn.getSecond();
assertEquals(msg,exp,out);
testNum++;
}
}
}
