@Test public void testCol2ImSamePaddingStride1Dilation2(){
  int miniBatch=1;
  int depth=1;
  int inH=4;
  int inW=5;
  int strideH=1;
  int strideW=1;
  int dH=2;
  int dW=2;
  int kH=2;
  int kW=2;
  int effectiveKH=kH + (kH - 1) * (dH - 1);
  int effectiveKW=kW + (kW - 1) * (dW - 1);
  int outH=(int)Math.ceil(inH / ((double)strideH));
  int outW=(int)Math.ceil(inW / ((double)strideW));
  assertEquals(5,outW);
  assertEquals(4,outH);
  int sumPadHeight=((outH - 1) * strideH + effectiveKH - inH);
  int padTop=sumPadHeight / 2;
  int padBottom=sumPadHeight - padTop;
  assertEquals(1,padTop);
  assertEquals(1,padBottom);
  int sumPadWidth=((outW - 1) * strideW + effectiveKW - inW);
  int padLeft=sumPadWidth / 2;
  int padRight=sumPadWidth - padLeft;
  assertEquals(1,padLeft);
  assertEquals(1,padRight);
  INDArray input=Nd4j.create(new int[]{miniBatch,depth,inH,inW},'c');
  input.put(new INDArrayIndex[]{point(0),point(0),all(),all()},Nd4j.create(new double[][]{{0,1,2,3,4},{5,6,7,8,9},{10,11,12,13,14},{15,16,17,18,19}}));
  INDArray col6d=Nd4j.create(new int[]{miniBatch,depth,kH,kW,outH,outW},'c');
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(0)},Nd4j.create(new double[][]{{0,0},{0,6}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(1)},Nd4j.create(new double[][]{{0,0},{5,7}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(2)},Nd4j.create(new double[][]{{0,0},{6,8}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(3)},Nd4j.create(new double[][]{{0,0},{7,9}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(4)},Nd4j.create(new double[][]{{0,0},{8,0}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(0)},Nd4j.create(new double[][]{{0,1},{0,11}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(1)},Nd4j.create(new double[][]{{0,2},{10,12}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(2)},Nd4j.create(new double[][]{{1,3},{11,13}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(3)},Nd4j.create(new double[][]{{2,4},{12,14}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(4)},Nd4j.create(new double[][]{{3,0},{13,0}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(2),point(0)},Nd4j.create(new double[][]{{0,6},{0,16}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(2),point(1)},Nd4j.create(new double[][]{{5,7},{15,17}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(2),point(2)},Nd4j.create(new double[][]{{6,8},{16,18}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(2),point(3)},Nd4j.create(new double[][]{{7,9},{17,19}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(2),point(4)},Nd4j.create(new double[][]{{8,0},{18,0}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(3),point(0)},Nd4j.create(new double[][]{{0,11},{0,0}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(3),point(1)},Nd4j.create(new double[][]{{10,12},{0,0}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(3),point(2)},Nd4j.create(new double[][]{{11,13},{0,0}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(3),point(3)},Nd4j.create(new double[][]{{12,14},{0,0}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(3),point(4)},Nd4j.create(new double[][]{{13,0},{0,0}}));
  INDArray im2col=Convolution.im2col(input,kH,kW,strideH,strideW,padTop,padLeft,dH,dW,true);
  for (int j=0; j < outH; j++) {
    for (int i=0; i < outW; i++) {
      INDArray exp=col6d.get(point(0),point(0),all(),all(),point(j),point(i));
      INDArray act=im2col.get(point(0),point(0),all(),all(),point(j),point(i));
      if (!exp.equals(act)) {
        System.out.println(i + "\t" + j);
        System.out.println(exp);
        System.out.println();
        System.out.println(act);
        System.out.println("\n");
      }
    }
  }
  assertEquals(col6d,im2col);
  INDArray expected=Nd4j.create(miniBatch,depth,inH,inW);
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all()},Nd4j.create(new double[][]{{0,2,4,6,4},{10,24,28,32,18},{20,44,48,52,28},{15,32,34,36,19}}));
  INDArray col2imResult=Nd4j.create(miniBatch,depth,inH,inW);
  INDArray col2im=Convolution.col2im(col6d,col2imResult,strideH,strideW,padTop,padLeft,inH,inW,dH,dW);
  assertEquals(expected,col2im);
}
