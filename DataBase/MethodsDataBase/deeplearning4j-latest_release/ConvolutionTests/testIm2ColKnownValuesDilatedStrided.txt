@Test public void testIm2ColKnownValuesDilatedStrided(){
  int miniBatch=1;
  int depth=1;
  int height=5;
  int width=5;
  int outH=2;
  int outW=2;
  int kH=2;
  int kW=2;
  int sX=2;
  int sY=2;
  int pX=0;
  int pY=0;
  int dh=2;
  int dw=2;
  INDArray input=Nd4j.create(new int[]{miniBatch,depth,height,width},'c');
  input.put(new INDArrayIndex[]{point(0),point(0),all(),all()},Nd4j.create(new double[][]{{0,1,2,3,4},{5,6,7,8,9},{10,11,12,13,14},{15,16,17,18,19},{20,21,22,23,24}}));
  INDArray expected=Nd4j.create(new int[]{miniBatch,depth,kH,kW,outH,outW},'c');
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(0)},Nd4j.create(new double[][]{{0,2},{10,12}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(1)},Nd4j.create(new double[][]{{2,4},{12,14}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(0)},Nd4j.create(new double[][]{{10,12},{20,22}}));
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(1)},Nd4j.create(new double[][]{{12,14},{22,24}}));
  INDArray out=Convolution.im2col(input,kH,kW,sY,sX,pY,pX,dh,dw,false);
  assertEquals(expected,out);
  INDArray out2=Nd4j.create(new int[]{miniBatch,depth,outH,outW,kH,kW},'c');
  INDArray out2p=out2.permute(0,1,4,5,2,3);
  Convolution.im2col(input,kH,kW,sY,sX,pY,pX,dh,dw,false,out2p);
  assertEquals(expected,out2p);
  INDArray out3=Nd4j.create(new int[]{miniBatch,outH,outW,depth,kH,kW},'c');
  INDArray out3p=out3.permute(0,3,4,5,1,2);
  Convolution.im2col(input,kH,kW,sY,sX,pY,pX,dh,dw,false,out3p);
  assertEquals(expected,out3p);
}
