@Test public void testCol2ImSamePaddingStride2(){
  int miniBatch=1;
  int depth=2;
  int inH=3;
  int inW=4;
  int strideH=2;
  int strideW=2;
  int kH=3;
  int kW=3;
  int outH=(int)Math.ceil(inH / ((double)strideH));
  int outW=(int)Math.ceil(inW / ((double)strideW));
  assertEquals(2,outH);
  assertEquals(2,outW);
  int sumPadHeight=((outH - 1) * strideH + kH - inH);
  int padTop=sumPadHeight / 2;
  int padBottom=sumPadHeight - padTop;
  assertEquals(1,padTop);
  assertEquals(1,padBottom);
  int sumPadWidth=((outW - 1) * strideW + kW - inW);
  int padLeft=sumPadWidth / 2;
  int padRight=sumPadWidth - padLeft;
  assertEquals(0,padLeft);
  assertEquals(1,padRight);
  INDArray col6d=Nd4j.create(new int[]{miniBatch,depth,kH,kW,outH,outW},'c');
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(0)},Nd4j.create(new double[][]{{0,0,0},{0,1,2},{4,5,6}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(0),point(1)},Nd4j.create(new double[][]{{0,0,0},{2,3,0},{6,7,0}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(0)},Nd4j.create(new double[][]{{4,5,6},{8,9,10},{0,0,0}}));
  col6d.put(new INDArrayIndex[]{point(0),point(0),all(),all(),point(1),point(1)},Nd4j.create(new double[][]{{6,7,0},{10,11,0},{0,0,0}}));
  col6d.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(0),point(0)},Nd4j.create(new double[][]{{0,0,0},{12,13,14},{16,17,18}}));
  col6d.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(0),point(1)},Nd4j.create(new double[][]{{0,0,0},{14,15,0},{18,19,0}}));
  col6d.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(1),point(0)},Nd4j.create(new double[][]{{16,17,18},{20,21,22},{0,0,0}}));
  col6d.put(new INDArrayIndex[]{point(0),point(1),all(),all(),point(1),point(1)},Nd4j.create(new double[][]{{18,19,0},{22,23,0},{0,0,0}}));
  INDArray expected=Nd4j.create(miniBatch,depth,inH,inW);
  expected.put(new INDArrayIndex[]{point(0),point(0),all(),all()},Nd4j.create(new double[][]{{0,1,4,3},{8,10,24,14},{8,9,20,11}}));
  expected.put(new INDArrayIndex[]{point(0),point(1),all(),all()},Nd4j.create(new double[][]{{12,13,28,15},{32,34,72,38},{20,21,44,23}}));
  INDArray col2imResult=Nd4j.create(miniBatch,depth,inH,inW);
  INDArray col2im=Convolution.col2im(col6d,col2imResult,strideH,strideW,padTop,padLeft,inH,inW,1,1);
  assertEquals(expected,col2im);
}
