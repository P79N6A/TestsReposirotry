/** 
 * This test should be run on multi-gpu system only. On single-gpu system this test will fail
 * @throws Exception
 */
@Test public void testMultiDeviceAveraging() throws Exception {
  final List<Pair<INDArray,INDArray>> pairs=new ArrayList<>();
  int numDevices=Nd4j.getAffinityManager().getNumberOfDevices();
  AtomicAllocator allocator=AtomicAllocator.getInstance();
  for (int i=0; i < THREADS; i++) {
    final int order=i;
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        pairs.add(new Pair<INDArray,INDArray>(Nd4j.valueArrayOf(LENGTH,(double)order),null));
        try {
          Thread.sleep(100);
        }
 catch (        Exception e) {
        }
      }
    }
);
    thread.start();
    thread.join();
  }
  assertEquals(THREADS,pairs.size());
  final List<INDArray> arrays=new ArrayList<>();
  AtomicBoolean hasNonZero=new AtomicBoolean(false);
  for (int i=0; i < THREADS; i++) {
    INDArray array=pairs.get(i).getKey();
    AllocationPoint point=allocator.getAllocationPoint(array.data());
    if (point.getDeviceId() != 0)     hasNonZero.set(true);
    arrays.add(array);
  }
  assertEquals(true,hasNonZero.get());
  long time1=System.currentTimeMillis();
  INDArray z=Nd4j.averageAndPropagate(arrays);
  long time2=System.currentTimeMillis();
  System.out.println("Execution time: " + (time2 - time1));
  assertEquals(7.5f,z.getFloat(0),0.01f);
  assertEquals(7.5f,z.getFloat(10),0.01f);
  for (int i=0; i < THREADS; i++) {
    for (int x=0; x < LENGTH; x++) {
      assertEquals("Failed on array [" + i + "], element ["+ x+ "]",z.getFloat(0),arrays.get(i).getFloat(x),0.01f);
    }
  }
}
