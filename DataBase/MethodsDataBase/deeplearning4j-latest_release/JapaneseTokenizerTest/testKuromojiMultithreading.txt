@Test public void testKuromojiMultithreading() throws Exception {
class Worker implements Runnable {
    private final JapaneseTokenizerFactory tf;
    private final String[] jobs;
    private int runs;
    private boolean passed=false;
    public Worker(    JapaneseTokenizerFactory tf,    String[] jobs,    int runs){
      this.tf=tf;
      this.jobs=jobs;
      this.runs=runs;
    }
    @Override public void run(){
      while (runs > 0) {
        String s=jobs[runs-- % jobs.length];
        List<String> tokens=tf.create(s).getTokens();
        StringBuilder sb=new StringBuilder();
        for (        String token : tokens) {
          sb.append(token);
        }
        if (sb.toString().length() != s.length()) {
          return;
        }
      }
      passed=true;
    }
  }
  JapaneseTokenizerFactory tf=new JapaneseTokenizerFactory();
  String[] work={toTokenize,baseString,toTokenize,baseString};
  Worker[] workers=new Worker[10];
  for (int i=0; i < workers.length; i++) {
    workers[i]=new Worker(tf,work,50);
  }
  Thread[] threads=new Thread[10];
  for (int i=0; i < threads.length; i++) {
    threads[i]=new Thread(workers[i]);
    threads[i].start();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
  for (int i=0; i < workers.length; i++) {
    assertTrue(workers[i].passed);
  }
}
