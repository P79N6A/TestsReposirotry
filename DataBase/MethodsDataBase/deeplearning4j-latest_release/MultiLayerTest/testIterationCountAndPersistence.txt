@Test public void testIterationCountAndPersistence() throws IOException {
  Nd4j.getRandom().setSeed(123);
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).seed(123).list().layer(0,new DenseLayer.Builder().nIn(4).nOut(3).weightInit(WeightInit.XAVIER).activation(Activation.TANH).build()).layer(1,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(3).nOut(3).build()).build();
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  network.init();
  DataSetIterator iter=new IrisDataSetIterator(50,150);
  assertEquals(0,network.getLayerWiseConfigurations().getIterationCount());
  network.fit(iter);
  assertEquals(3,network.getLayerWiseConfigurations().getIterationCount());
  iter.reset();
  network.fit(iter);
  assertEquals(6,network.getLayerWiseConfigurations().getIterationCount());
  iter.reset();
  network.fit(iter.next());
  assertEquals(7,network.getLayerWiseConfigurations().getIterationCount());
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ModelSerializer.writeModel(network,baos,true);
  byte[] asBytes=baos.toByteArray();
  ByteArrayInputStream bais=new ByteArrayInputStream(asBytes);
  MultiLayerNetwork net=ModelSerializer.restoreMultiLayerNetwork(bais,true);
  assertEquals(7,net.getLayerWiseConfigurations().getIterationCount());
}
