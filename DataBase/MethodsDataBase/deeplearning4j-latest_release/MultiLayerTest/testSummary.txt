@Test public void testSummary(){
  int V_WIDTH=130;
  int V_HEIGHT=130;
  int V_NFRAMES=150;
  MultiLayerConfiguration confForArchitecture=new NeuralNetConfiguration.Builder().seed(12345).l2(0.001).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).list().layer(0,new ConvolutionLayer.Builder(10,10).nIn(3).nOut(30).stride(4,4).activation(Activation.RELU).weightInit(WeightInit.RELU).updater(Updater.ADAGRAD).build()).layer(1,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(3,3).stride(2,2).build()).layer(2,new ConvolutionLayer.Builder(3,3).nIn(30).nOut(10).stride(2,2).activation(Activation.RELU).weightInit(WeightInit.RELU).updater(Updater.ADAGRAD).build()).layer(3,new DenseLayer.Builder().activation(Activation.RELU).nIn(490).nOut(50).weightInit(WeightInit.RELU).updater(Updater.ADAGRAD).gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue).gradientNormalizationThreshold(10).build()).layer(4,new GravesLSTM.Builder().activation(Activation.SOFTSIGN).nIn(50).nOut(50).weightInit(WeightInit.XAVIER).updater(Updater.ADAGRAD).gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue).gradientNormalizationThreshold(10).build()).layer(5,new RnnOutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(50).nOut(4).updater(Updater.ADAGRAD).weightInit(WeightInit.XAVIER).gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue).gradientNormalizationThreshold(10).build()).inputPreProcessor(0,new RnnToCnnPreProcessor(V_HEIGHT,V_WIDTH,3)).inputPreProcessor(3,new CnnToFeedForwardPreProcessor(7,7,10)).inputPreProcessor(4,new FeedForwardToRnnPreProcessor()).backpropType(BackpropType.TruncatedBPTT).tBPTTForwardLength(V_NFRAMES / 5).tBPTTBackwardLength(V_NFRAMES / 5).build();
  MultiLayerNetwork modelExpectedArch=new MultiLayerNetwork(confForArchitecture);
  modelExpectedArch.init();
  MultiLayerNetwork modelMow=new TransferLearning.Builder(modelExpectedArch).setFeatureExtractor(2).build();
  System.out.println(modelExpectedArch.summary());
  System.out.println(modelMow.summary());
  System.out.println(modelMow.summary(InputType.recurrent(V_HEIGHT * V_WIDTH * 3)));
}
