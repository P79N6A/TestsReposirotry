@Test public void testConvnetJson(){
  final int numRows=76;
  final int numColumns=76;
  int nChannels=3;
  int outputNum=6;
  int seed=123;
  MultiLayerConfiguration.Builder builder=new NeuralNetConfiguration.Builder().seed(seed).l1(1e-1).l2(2e-4).weightNoise(new DropConnect(0.5)).miniBatch(true).optimizationAlgo(OptimizationAlgorithm.CONJUGATE_GRADIENT).list().layer(0,new ConvolutionLayer.Builder(5,5).nOut(5).dropOut(0.5).weightInit(WeightInit.XAVIER).activation(Activation.RELU).build()).layer(1,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX,new int[]{2,2}).build()).layer(2,new ConvolutionLayer.Builder(3,3).nOut(10).dropOut(0.5).weightInit(WeightInit.XAVIER).activation(Activation.RELU).build()).layer(3,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX,new int[]{2,2}).build()).layer(4,new DenseLayer.Builder().nOut(100).activation(Activation.RELU).build()).layer(5,new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nOut(outputNum).weightInit(WeightInit.XAVIER).activation(Activation.SOFTMAX).build()).setInputType(InputType.convolutional(numRows,numColumns,nChannels));
  MultiLayerConfiguration conf=builder.build();
  String json=conf.toJson();
  MultiLayerConfiguration conf2=MultiLayerConfiguration.fromJson(json);
  assertEquals(conf,conf2);
}
