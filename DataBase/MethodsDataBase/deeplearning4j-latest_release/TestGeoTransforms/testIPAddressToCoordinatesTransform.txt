@Test public void testIPAddressToCoordinatesTransform() throws Exception {
  Schema schema=new Schema.Builder().addColumnString("column").build();
  Transform transform=new IPAddressToCoordinatesTransform("column","CUSTOM_DELIMITER");
  transform.setInputSchema(schema);
  Schema out=transform.transform(schema);
  assertEquals(1,out.getColumnMetaData().size());
  assertEquals(ColumnType.String,out.getMetaData(0).getColumnType());
  String in="128.101.101.101";
  double latitude=44.9733;
  double longitude=-93.2323;
  List<Writable> writables=transform.map(Collections.singletonList((Writable)new Text(in)));
  assertEquals(1,writables.size());
  String[] coordinates=writables.get(0).toString().split("CUSTOM_DELIMITER");
  assertEquals(2,coordinates.length);
  assertEquals(latitude,Double.parseDouble(coordinates[0]),0.1);
  assertEquals(longitude,Double.parseDouble(coordinates[1]),0.1);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ObjectOutputStream oos=new ObjectOutputStream(baos);
  oos.writeObject(transform);
  byte[] bytes=baos.toByteArray();
  ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
  ObjectInputStream ois=new ObjectInputStream(bais);
  Transform deserialized=(Transform)ois.readObject();
  writables=deserialized.map(Collections.singletonList((Writable)new Text(in)));
  assertEquals(1,writables.size());
  coordinates=writables.get(0).toString().split("CUSTOM_DELIMITER");
  System.out.println(Arrays.toString(coordinates));
  assertEquals(2,coordinates.length);
  assertEquals(latitude,Double.parseDouble(coordinates[0]),0.1);
  assertEquals(longitude,Double.parseDouble(coordinates[1]),0.1);
}
