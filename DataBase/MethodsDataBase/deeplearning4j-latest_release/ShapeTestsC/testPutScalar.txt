@Test public void testPutScalar(){
  val shapes=new int[][]{{3,4},{1,4},{3,1},{3,4,5},{1,4,5},{3,1,5},{3,4,1},{1,1,5},{3,4,5,6},{1,4,5,6},{3,1,5,6},{3,4,1,6},{3,4,5,1},{1,1,5,6},{3,1,1,6},{3,1,1,1}};
  for (  int[] shape : shapes) {
    int rank=shape.length;
    NdIndexIterator iter=new NdIndexIterator(shape);
    INDArray firstC=Nd4j.create(shape,'c');
    INDArray firstF=Nd4j.create(shape,'f');
    INDArray secondC=Nd4j.create(shape,'c');
    INDArray secondF=Nd4j.create(shape,'f');
    int i=0;
    while (iter.hasNext()) {
      val currIdx=iter.next();
      firstC.putScalar(currIdx,i);
      firstF.putScalar(currIdx,i);
switch (rank) {
case 2:
        secondC.putScalar(currIdx[0],currIdx[1],i);
      secondF.putScalar(currIdx[0],currIdx[1],i);
    break;
case 3:
  secondC.putScalar(currIdx[0],currIdx[1],currIdx[2],i);
secondF.putScalar(currIdx[0],currIdx[1],currIdx[2],i);
break;
case 4:
secondC.putScalar(currIdx[0],currIdx[1],currIdx[2],currIdx[3],i);
secondF.putScalar(currIdx[0],currIdx[1],currIdx[2],currIdx[3],i);
break;
default :
throw new RuntimeException();
}
i++;
}
assertEquals(firstC,firstF);
assertEquals(firstC,secondC);
assertEquals(firstC,secondF);
}
}
