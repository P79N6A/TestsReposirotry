@Test public void testCBOWGradientNegative1() throws Exception {
  INDArray syn0=Nd4j.create(10,10).assign(0.01f);
  INDArray syn1=Nd4j.create(10,10).assign(0.02f);
  INDArray syn1Neg=Nd4j.create(10,10).assign(0.03f);
  INDArray expTable=Nd4j.create(10000).assign(0.5f);
  INDArray table=Nd4j.create(100000);
  double lr=0.025;
  INDArray syn0dup=syn0.dup();
  INDArray syn1dup=syn1.dup();
  INDArray syn1NegDup=syn1Neg.dup();
  INDArray expSyn0_row0=Nd4j.create(10).assign(0.0096265625);
  INDArray expSyn0_row3=Nd4j.create(10).assign(0.01f);
  INDArray expSyn1Neg_row6=Nd4j.create(10).assign(0.030125f);
  AggregateCBOW op=new AggregateCBOW(syn0,syn1,syn1Neg,expTable,table,0,new int[]{0,1,2},new int[]{},new int[]{},2,6,10,lr,2L,10);
  Nd4j.getExecutioner().exec(op);
  assertNotEquals(syn0dup,syn0);
  assertNotEquals(syn1NegDup,syn1Neg);
  assertEquals(syn1dup,syn1);
  log.info("syn1neg_row6 after: {}",Arrays.toString(syn1Neg.getRow(6).dup().data().asFloat()));
  assertEquals(expSyn1Neg_row6,syn1Neg.getRow(6));
  assertEquals(expSyn0_row0,syn0.getRow(0));
  assertEquals(expSyn0_row0,syn0.getRow(1));
  assertEquals(expSyn0_row0,syn0.getRow(2));
  assertEquals(expSyn0_row3,syn0.getRow(3));
  assertEquals(expSyn0_row3,syn0.getRow(4));
  assertEquals(expSyn0_row3,syn0.getRow(5));
  assertEquals(expSyn0_row3,syn0.getRow(6));
  assertEquals(expSyn0_row3,syn0.getRow(7));
  assertEquals(expSyn0_row3,syn0.getRow(8));
  assertEquals(expSyn0_row3,syn0.getRow(9));
}
