@Test public void testRnnCnnMaskingSimple(){
  int kernelSize1=2;
  int padding=0;
  int cnnStride1=1;
  int channels=1;
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).weightInit(WeightInit.XAVIER).convolutionMode(ConvolutionMode.Same).graphBuilder().addInputs("inputs").addLayer("cnn1",new ConvolutionLayer.Builder(new int[]{kernelSize1,kernelSize1},new int[]{cnnStride1,cnnStride1},new int[]{padding,padding}).nIn(channels).nOut(2).build(),"inputs").addLayer("lstm1",new LSTM.Builder().nIn(7 * 7 * 2).nOut(2).build(),"cnn1").addLayer("output",new RnnOutputLayer.Builder(LossFunctions.LossFunction.MSE).activation(Activation.RELU).nIn(2).nOut(2).build(),"lstm1").setOutputs("output").setInputTypes(InputType.recurrent(7 * 7,1)).inputPreProcessor("cnn1",new RnnToCnnPreProcessor(7,7,channels)).inputPreProcessor("lstm1",new CnnToRnnPreProcessor(7,7,2)).build();
  ComputationGraph cg=new ComputationGraph(conf);
  cg.init();
  cg.fit(new DataSet(Nd4j.create(1,7 * 7,5),Nd4j.create(1,2,5),Nd4j.ones(1,5),Nd4j.ones(1,5)));
}
