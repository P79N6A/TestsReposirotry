@Test public void testBernoulliLogProb(){
  Nd4j.getRandom().setSeed(12345);
  int inputSize=4;
  int[] mbs=new int[]{1,2,5};
  Random r=new Random(12345);
  for (  boolean average : new boolean[]{true,false}) {
    for (    int minibatch : mbs) {
      INDArray x=Nd4j.zeros(minibatch,inputSize);
      for (int i=0; i < minibatch; i++) {
        for (int j=0; j < inputSize; j++) {
          x.putScalar(i,j,r.nextInt(2));
        }
      }
      INDArray distributionParams=Nd4j.rand(minibatch,inputSize).muli(2).subi(1);
      INDArray prob=Transforms.sigmoid(distributionParams,true);
      ReconstructionDistribution dist=new BernoulliReconstructionDistribution(Activation.SIGMOID);
      double negLogProb=dist.negLogProbability(x,distributionParams,average);
      INDArray exampleNegLogProb=dist.exampleNegLogProbability(x,distributionParams);
      assertArrayEquals(new long[]{minibatch,1},exampleNegLogProb.shape());
      double logProbSum=0.0;
      for (int i=0; i < minibatch; i++) {
        double exampleSum=0.0;
        for (int j=0; j < inputSize; j++) {
          double p=prob.getDouble(i,j);
          BinomialDistribution binomial=new BinomialDistribution(1,p);
          double xVal=x.getDouble(i,j);
          double thisLogProb=binomial.logProbability((int)xVal);
          logProbSum+=thisLogProb;
          exampleSum+=thisLogProb;
        }
        assertEquals(-exampleNegLogProb.getDouble(i),exampleSum,1e-6);
      }
      double expNegLogProb;
      if (average) {
        expNegLogProb=-logProbSum / minibatch;
      }
 else {
        expNegLogProb=-logProbSum;
      }
      assertEquals(expNegLogProb,negLogProb,1e-6);
      int count=minibatch * inputSize;
      INDArray arr=Nd4j.linspace(-3,3,count).reshape(minibatch,inputSize);
      INDArray sampleMean=dist.generateAtMean(arr);
      INDArray sampleRandom=dist.generateRandom(arr);
      for (int i=0; i < minibatch; i++) {
        for (int j=0; j < inputSize; j++) {
          double d1=sampleMean.getDouble(i,j);
          double d2=sampleRandom.getDouble(i,j);
          assertTrue(d1 >= 0.0 || d1 <= 1.0);
          assertTrue(d2 == 0.0 || d2 == 1.0);
        }
      }
    }
  }
}
