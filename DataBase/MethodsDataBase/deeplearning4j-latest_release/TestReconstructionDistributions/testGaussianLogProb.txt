@Test public void testGaussianLogProb(){
  Nd4j.getRandom().setSeed(12345);
  int inputSize=4;
  int[] mbs=new int[]{1,2,5};
  for (  boolean average : new boolean[]{true,false}) {
    for (    int minibatch : mbs) {
      INDArray x=Nd4j.rand(minibatch,inputSize);
      INDArray mean=Nd4j.randn(minibatch,inputSize);
      INDArray logStdevSquared=Nd4j.rand(minibatch,inputSize).subi(0.5);
      INDArray distributionParams=Nd4j.createUninitialized(new int[]{minibatch,2 * inputSize});
      distributionParams.get(NDArrayIndex.all(),NDArrayIndex.interval(0,inputSize)).assign(mean);
      distributionParams.get(NDArrayIndex.all(),NDArrayIndex.interval(inputSize,2 * inputSize)).assign(logStdevSquared);
      ReconstructionDistribution dist=new GaussianReconstructionDistribution(Activation.IDENTITY);
      double negLogProb=dist.negLogProbability(x,distributionParams,average);
      INDArray exampleNegLogProb=dist.exampleNegLogProbability(x,distributionParams);
      assertArrayEquals(new long[]{minibatch,1},exampleNegLogProb.shape());
      double logProbSum=0.0;
      for (int i=0; i < minibatch; i++) {
        double exampleSum=0.0;
        for (int j=0; j < inputSize; j++) {
          double mu=mean.getDouble(i,j);
          double logSigma2=logStdevSquared.getDouble(i,j);
          double sigma=Math.sqrt(Math.exp(logSigma2));
          NormalDistribution nd=new NormalDistribution(mu,sigma);
          double xVal=x.getDouble(i,j);
          double thisLogProb=nd.logDensity(xVal);
          logProbSum+=thisLogProb;
          exampleSum+=thisLogProb;
        }
        assertEquals(-exampleNegLogProb.getDouble(i),exampleSum,1e-6);
      }
      double expNegLogProb;
      if (average) {
        expNegLogProb=-logProbSum / minibatch;
      }
 else {
        expNegLogProb=-logProbSum;
      }
      assertEquals(expNegLogProb,negLogProb,1e-6);
      int count=minibatch * inputSize;
      INDArray arr=Nd4j.linspace(-3,3,count).reshape(minibatch,inputSize);
      INDArray sampleMean=dist.generateAtMean(arr);
      INDArray sampleRandom=dist.generateRandom(arr);
    }
  }
}
