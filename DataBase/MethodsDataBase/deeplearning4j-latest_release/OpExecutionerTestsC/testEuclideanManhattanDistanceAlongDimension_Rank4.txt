@Test public void testEuclideanManhattanDistanceAlongDimension_Rank4(){
  DataBuffer.Type initialType=Nd4j.dataType();
  DataTypeUtil.setDTypeForContext(DataBuffer.Type.DOUBLE);
  Nd4j.getRandom().setSeed(12345);
  INDArray firstOneExample=Nd4j.linspace(1,8,8).reshape('c',new int[]{1,2,2,2});
  INDArray secondOneExample=firstOneExample.add(1);
  double[] d1=firstOneExample.data().asDouble();
  double[] d2=secondOneExample.data().asDouble();
  double sumSquaredDiff=0.0;
  double expManhattanDistance=0.0;
  for (int i=0; i < d1.length; i++) {
    double diff=d1[i] - d2[i];
    sumSquaredDiff+=diff * diff;
    expManhattanDistance+=Math.abs(diff);
  }
  double expectedEuclidean=Math.sqrt(sumSquaredDiff);
  System.out.println("Expected, Euclidean: " + expectedEuclidean);
  System.out.println("Expected, Manhattan: " + expManhattanDistance);
  int mb=2;
  INDArray firstOrig=Nd4j.create(mb,2,2,2);
  INDArray secondOrig=Nd4j.create(mb,2,2,2);
  for (int i=0; i < mb; i++) {
    firstOrig.put(new INDArrayIndex[]{point(i),all(),all(),all()},firstOneExample);
    secondOrig.put(new INDArrayIndex[]{point(i),all(),all(),all()},secondOneExample);
  }
  for (  char order : new char[]{'c','f'}) {
    INDArray first=firstOrig.dup(order);
    INDArray second=secondOrig.dup(order);
    assertEquals(firstOrig,first);
    assertEquals(secondOrig,second);
    INDArray out=Nd4j.getExecutioner().exec(new EuclideanDistance(first,second),1,2,3);
    for (int i=0; i < first.tensorssAlongDimension(1,2,3); i++) {
      val j=first.javaTensorAlongDimension(i,1,2,3).shapeInfoDataBuffer().asLong();
      val t=first.tensorAlongDimension(i,1,2,3).shapeInfoDataBuffer().asLong();
      log.info("J: {}",j);
      log.info("T: {}\n\n",t);
      assertArrayEquals(j,t);
    }
    Pair<DataBuffer,DataBuffer> firstTadInfo=Nd4j.getExecutioner().getTADManager().getTADOnlyShapeInfo(first,1,2,3);
    Pair<DataBuffer,DataBuffer> secondTadInfo=Nd4j.getExecutioner().getTADManager().getTADOnlyShapeInfo(second,1,2,3);
    for (int i=0; i < first.tensorssAlongDimension(1,2,3); i++) {
      assertEquals(first.javaTensorAlongDimension(i,1,2,3).offset(),firstTadInfo.getSecond().getLong(i));
      assertEquals(second.javaTensorAlongDimension(i,1,2,3).offset(),secondTadInfo.getSecond().getLong(i));
    }
    INDArray outManhattan=Nd4j.getExecutioner().exec(new ManhattanDistance(first,second),1,2,3);
    System.out.println("\n\nOrder: " + order);
    System.out.println("Euclidean:");
    System.out.println(Arrays.toString(out.getRow(0).dup().data().asDouble()));
    System.out.println(Arrays.toString(out.getRow(1).dup().data().asDouble()));
    assertEquals(out.getRow(0),out.getRow(1));
    System.out.println("Manhattan:");
    System.out.println(Arrays.toString(outManhattan.getRow(0).dup().data().asDouble()));
    System.out.println(Arrays.toString(outManhattan.getRow(1).dup().data().asDouble()));
    assertEquals(expManhattanDistance,outManhattan.getRow(0).getDouble(0),1e-5);
    assertEquals(expectedEuclidean,out.getRow(0).getDouble(0),1e-5);
  }
  DataTypeUtil.setDTypeForContext(initialType);
}
