@Test public void testVarianceSingleVsMultipleDimensions(){
  DataBuffer.Type type=Nd4j.dataType();
  DataTypeUtil.setDTypeForContext(DataBuffer.Type.DOUBLE);
  Nd4j.getRandom().setSeed(12345);
  INDArray fourd=Nd4j.rand('c',new int[]{100,5,10,10}).muli(10);
  INDArray twod=Shape.newShapeNoCopy(fourd,new int[]{100,5 * 10 * 10},false);
  INDArray var4=fourd.var(false,1,2,3);
  INDArray var2=twod.var(false,1);
  double[] sums=new double[100];
  double[] sumSquares=new double[100];
  NdIndexIterator iter=new NdIndexIterator(fourd.shape());
  while (iter.hasNext()) {
    val next=iter.next();
    double d=fourd.getDouble(next);
    sums[(int)next[0]]+=d;
    sumSquares[(int)next[0]]+=d * d;
  }
  double[] manualVariance=new double[100];
  val N=(fourd.length() / sums.length);
  for (int i=0; i < sums.length; i++) {
    manualVariance[i]=(sumSquares[i] - (sums[i] * sums[i]) / N) / N;
  }
  INDArray var4bias=fourd.var(true,1,2,3);
  INDArray var2bias=twod.var(true,1);
  assertArrayEquals(var2.data().asDouble(),var4.data().asDouble(),1e-5);
  assertArrayEquals(manualVariance,var2.data().asDouble(),1e-5);
  assertArrayEquals(var2bias.data().asDouble(),var4bias.data().asDouble(),1e-5);
  DataTypeUtil.setDTypeForContext(type);
}
