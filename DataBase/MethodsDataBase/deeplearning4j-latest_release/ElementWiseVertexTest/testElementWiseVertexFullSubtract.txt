@Test public void testElementWiseVertexFullSubtract(){
  int batchsz=24;
  int featuresz=17;
  int midsz=13;
  int outputsz=11;
  ComputationGraphConfiguration cgc=new NeuralNetConfiguration.Builder().weightInit(WeightInit.XAVIER).biasInit(0.0).updater(new Sgd()).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).graphBuilder().addInputs("input1","input2").addLayer("dense1",new DenseLayer.Builder().nIn(featuresz).nOut(midsz).activation(new ActivationTanH()).build(),"input1").addLayer("dense2",new DenseLayer.Builder().nIn(featuresz).nOut(midsz).activation(new ActivationTanH()).build(),"input2").addVertex("elementwiseSubtract",new ElementWiseVertex(ElementWiseVertex.Op.Subtract),"dense1","dense2").addLayer("output",new OutputLayer.Builder().nIn(midsz).nOut(outputsz).activation(new ActivationSigmoid()).lossFunction(LossFunction.MSE).build(),"elementwiseSubtract").setOutputs("output").build();
  ComputationGraph cg=new ComputationGraph(cgc);
  cg.init();
  INDArray input1=Nd4j.rand(new int[]{batchsz,featuresz},new UniformDistribution(-1,1));
  INDArray input2=Nd4j.rand(new int[]{batchsz,featuresz},new UniformDistribution(-1,1));
  INDArray target=nullsafe(Nd4j.rand(new int[]{batchsz,outputsz},new UniformDistribution(0,1)));
  cg.setInputs(input1,input2);
  cg.setLabels(target);
  cg.computeGradientAndScore();
  Map<String,INDArray> params=cg.paramTable();
  INDArray dense1_W=nullsafe(params.get("dense1_W"));
  INDArray dense1_b=nullsafe(params.get("dense1_b"));
  INDArray dense2_W=nullsafe(params.get("dense2_W"));
  INDArray dense2_b=nullsafe(params.get("dense2_b"));
  INDArray output_W=nullsafe(params.get("output_W"));
  INDArray output_b=nullsafe(params.get("output_b"));
  INDArray mh=input1.mmul(dense1_W).addi(dense1_b.repmat(batchsz,1));
  INDArray m=(Transforms.tanh(mh));
  INDArray nh=input2.mmul(dense2_W).addi(dense2_b.repmat(batchsz,1));
  INDArray n=(Transforms.tanh(nh));
  INDArray middle=Nd4j.zeros(batchsz,midsz);
  middle.addi(m).subi(n);
  INDArray expect=Nd4j.zeros(batchsz,outputsz);
  expect.addi(Transforms.sigmoid(middle.mmul(output_W).addi(output_b.repmat(batchsz,1))));
  INDArray output=nullsafe(cg.output(input1,input2)[0]);
  Assert.assertEquals(0.0,mse(output,expect),this.epsilon);
  Pair<Gradient,Double> pgd=cg.gradientAndScore();
  double score=pgd.getSecond();
  Assert.assertEquals(score,mse(output,target),this.epsilon);
  Map<String,INDArray> gradients=pgd.getFirst().gradientForVariable();
  INDArray y=output;
  INDArray s=middle;
  INDArray W4=output_W;
  INDArray dEdy=Nd4j.zeros(target.shape());
  dEdy.addi(y).subi(target).muli(2);
  dEdy.divi(target.shape()[1]);
  INDArray dydyh=y.mul(y.mul(-1).add(1));
  INDArray dEdyh=dydyh.mul(dEdy);
  INDArray dyhdW4=s.transpose();
  INDArray dEdW4=nullsafe(dyhdW4.mmul(dEdyh));
  INDArray dyhdb4=Nd4j.ones(1,batchsz);
  INDArray dEdb4=nullsafe(dyhdb4.mmul(dEdyh));
  INDArray dyhds=W4.transpose();
  INDArray dEds=dEdyh.mmul(dyhds);
  INDArray dsdm=Nd4j.ones(batchsz,midsz);
  INDArray dEdm=dsdm.mul(dEds);
  INDArray dmdmh=(m.mul(m)).mul(-1).add(1);
  INDArray dEdmh=dmdmh.mul(dEdm);
  INDArray dmhdW1=input1.transpose();
  INDArray dEdW1=nullsafe(dmhdW1.mmul(dEdmh));
  INDArray dmhdb1=Nd4j.ones(1,batchsz);
  INDArray dEdb1=nullsafe(dmhdb1.mmul(dEdmh));
  INDArray dsdn=Nd4j.ones(batchsz,midsz).muli(-1);
  INDArray dEdn=dsdn.mul(dEds);
  INDArray dndnh=(n.mul(n)).mul(-1).add(1);
  INDArray dEdnh=dndnh.mul(dEdn);
  INDArray dnhdW2=input2.transpose();
  INDArray dEdW2=nullsafe(dnhdW2.mmul(dEdnh));
  INDArray dnhdb2=Nd4j.ones(1,batchsz);
  INDArray dEdb2=nullsafe(dnhdb2.mmul(dEdnh));
  Assert.assertEquals(0,mse(nullsafe(gradients.get("output_W")),dEdW4),this.epsilon);
  Assert.assertEquals(0,mse(nullsafe(gradients.get("output_b")),dEdb4),this.epsilon);
  Assert.assertEquals(0,mse(nullsafe(gradients.get("dense1_W")),dEdW1),this.epsilon);
  Assert.assertEquals(0,mse(nullsafe(gradients.get("dense1_b")),dEdb1),this.epsilon);
  Assert.assertEquals(0,mse(nullsafe(gradients.get("dense2_W")),dEdW2),this.epsilon);
  Assert.assertEquals(0,mse(nullsafe(gradients.get("dense2_b")),dEdb2),this.epsilon);
}
