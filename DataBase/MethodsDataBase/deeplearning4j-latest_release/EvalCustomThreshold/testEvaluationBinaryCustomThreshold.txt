@Test public void testEvaluationBinaryCustomThreshold(){
  int nExamples=20;
  int nOut=2;
  INDArray probs=Nd4j.rand(nExamples,nOut);
  INDArray labels=Nd4j.getExecutioner().exec(new BernoulliDistribution(Nd4j.createUninitialized(nExamples,nOut),0.5));
  EvaluationBinary eStd=new EvaluationBinary();
  eStd.eval(labels,probs);
  EvaluationBinary eb05=new EvaluationBinary(Nd4j.create(new double[]{0.5,0.5}));
  eb05.eval(labels,probs);
  EvaluationBinary eb05v2=new EvaluationBinary(Nd4j.create(new double[]{0.5,0.5}));
  for (int i=0; i < nExamples; i++) {
    eb05v2.eval(labels.getRow(i),probs.getRow(i));
  }
  for (  EvaluationBinary eb2 : new EvaluationBinary[]{eb05,eb05v2}) {
    assertArrayEquals(eStd.getCountTruePositive(),eb2.getCountTruePositive());
    assertArrayEquals(eStd.getCountFalsePositive(),eb2.getCountFalsePositive());
    assertArrayEquals(eStd.getCountTrueNegative(),eb2.getCountTrueNegative());
    assertArrayEquals(eStd.getCountFalseNegative(),eb2.getCountFalseNegative());
    for (int j=0; j < nOut; j++) {
      assertEquals(eStd.accuracy(j),eb2.accuracy(j),1e-6);
      assertEquals(eStd.f1(j),eb2.f1(j),1e-6);
    }
  }
  INDArray probs2=probs.mul(2);
  probs2=Transforms.min(probs2,1.0);
  INDArray probs4=probs.mul(4);
  probs4=Transforms.min(probs4,1.0);
  EvaluationBinary ebThreshold=new EvaluationBinary(Nd4j.create(new double[]{0.25,0.125}));
  ebThreshold.eval(labels,probs);
  EvaluationBinary ebStd2=new EvaluationBinary();
  ebStd2.eval(labels,probs2);
  EvaluationBinary ebStd4=new EvaluationBinary();
  ebStd4.eval(labels,probs4);
  assertEquals(ebThreshold.truePositives(0),ebStd2.truePositives(0));
  assertEquals(ebThreshold.trueNegatives(0),ebStd2.trueNegatives(0));
  assertEquals(ebThreshold.falsePositives(0),ebStd2.falsePositives(0));
  assertEquals(ebThreshold.falseNegatives(0),ebStd2.falseNegatives(0));
  assertEquals(ebThreshold.truePositives(1),ebStd4.truePositives(1));
  assertEquals(ebThreshold.trueNegatives(1),ebStd4.trueNegatives(1));
  assertEquals(ebThreshold.falsePositives(1),ebStd4.falsePositives(1));
  assertEquals(ebThreshold.falseNegatives(1),ebStd4.falseNegatives(1));
}
