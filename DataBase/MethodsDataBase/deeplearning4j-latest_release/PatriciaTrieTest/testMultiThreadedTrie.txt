@Test public void testMultiThreadedTrie() throws InterruptedException {
  final int numThreads=10;
  final int perThreadRuns=500000;
  final int keySetSize=1000;
  final List<Thread> threads=new ArrayList<>();
  final List<String> randoms=new ArrayList<>();
  final PatriciaTrie<Integer> trie=new PatriciaTrie<>();
  for (int i=0; i < keySetSize; i++) {
    String random=UUID.randomUUID().toString();
    randoms.add(random);
    trie.put(random,i);
  }
  for (int i=0; i < numThreads; i++) {
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        for (int run=0; run < perThreadRuns; run++) {
          int randomIndex=(int)(Math.random() * randoms.size());
          String random=randoms.get(randomIndex);
          assertEquals(randomIndex,(int)trie.get(random));
          int randomPrefixLength=(int)(Math.random() * random.length());
          assertTrue(trie.containsKeyPrefix(random.substring(0,randomPrefixLength)));
        }
      }
    }
);
    threads.add(thread);
    thread.start();
  }
  for (  Thread thread : threads) {
    thread.join();
  }
  assertTrue(true);
}
