@Test public void testTransform(){
  long randSeed=12345;
  int nFeatures=2;
  int nSamples=6400;
  int bsize=8;
  int a=5;
  int b=100;
  INDArray sampleMean, sampleStd, sampleMeanDelta, sampleStdDelta, delta, deltaPerc;
  double maxDeltaPerc, sampleMeanSEM;
  genRandomDataSet normData=new genRandomDataSet(nSamples,nFeatures,a,b,randSeed);
  genRandomDataSet expectedData=new genRandomDataSet(nSamples,nFeatures,1,0,randSeed);
  genRandomDataSet beforeTransformData=new genRandomDataSet(nSamples,nFeatures,a,b,randSeed);
  NormalizerStandardize myNormalizer=new NormalizerStandardize();
  myNormalizer.fitLabel(true);
  DataSetIterator normIterator=normData.getIter(bsize);
  DataSetIterator expectedIterator=expectedData.getIter(bsize);
  DataSetIterator beforeTransformIterator=beforeTransformData.getIter(bsize);
  myNormalizer.fit(normIterator);
  double tolerancePerc=0.5;
  sampleMean=myNormalizer.getMean();
  sampleMeanDelta=Transforms.abs(sampleMean.sub(normData.theoreticalMean));
  assertTrue(sampleMeanDelta.mul(100).div(normData.theoreticalMean).max(1).getDouble(0,0) < tolerancePerc);
  sampleMeanSEM=sampleMeanDelta.div(normData.theoreticalSEM).max(1).getDouble(0,0);
  assertTrue(String.valueOf(sampleMeanSEM),sampleMeanSEM < 2.6);
  tolerancePerc=5;
  sampleStd=myNormalizer.getStd();
  sampleStdDelta=Transforms.abs(sampleStd.sub(normData.theoreticalStd));
  assertTrue(sampleStdDelta.div(normData.theoreticalStd).max(1).mul(100).getDouble(0,0) < tolerancePerc);
  tolerancePerc=1;
  normIterator.setPreProcessor(myNormalizer);
  while (normIterator.hasNext()) {
    INDArray before=beforeTransformIterator.next().getFeatures();
    DataSet here=normIterator.next();
    assertEquals(here.getFeatures(),here.getLabels());
    INDArray after=here.getFeatures();
    INDArray expected=expectedIterator.next().getFeatures();
    delta=Transforms.abs(after.sub(expected));
    deltaPerc=delta.div(before.sub(expected));
    deltaPerc.muli(100);
    maxDeltaPerc=deltaPerc.max(0,1).getDouble(0,0);
    assertTrue(maxDeltaPerc < tolerancePerc);
  }
}
