@Test public void test1dInputType(){
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().convolutionMode(ConvolutionMode.Same).list().layer(new Convolution1DLayer.Builder().nOut(3).kernelSize(2).activation(Activation.TANH).build()).layer(new Subsampling1DLayer.Builder().kernelSize(2).stride(2).build()).layer(new Upsampling1D.Builder().size(2).build()).layer(new RnnOutputLayer.Builder().nOut(7).activation(Activation.SOFTMAX).build()).setInputType(InputType.recurrent(10)).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  List<InputType> l=conf.getLayerActivationTypes(InputType.recurrent(10));
  assertEquals(InputType.recurrent(3,-1),l.get(0));
  assertEquals(InputType.recurrent(3,-1),l.get(1));
  assertEquals(InputType.recurrent(3,-1),l.get(2));
  assertEquals(InputType.recurrent(7,-1),l.get(3));
  List<InputType> l2=conf.getLayerActivationTypes(InputType.recurrent(10,6));
  assertEquals(InputType.recurrent(3,6),l2.get(0));
  assertEquals(InputType.recurrent(3,3),l2.get(1));
  assertEquals(InputType.recurrent(3,6),l2.get(2));
  assertEquals(InputType.recurrent(7,6),l2.get(3));
  INDArray in=Nd4j.create(2,10,6);
  INDArray out=net.output(in);
  assertArrayEquals(new long[]{2,7,6},out.shape());
}
