@Test public void testYoloHouseNumber() throws Exception {
  File f=new ClassPathResource("regression_testing/100a/HouseNumberDetection_100a.bin").getTempFileFromArchive();
  ComputationGraph net=ComputationGraph.load(f,true);
  int nBoxes=5;
  int nClasses=10;
  ConvolutionLayer cl=(ConvolutionLayer)((LayerVertex)net.getConfiguration().getVertices().get("convolution2d_9")).getLayerConf().getLayer();
  assertEquals(nBoxes * (5 + nClasses),cl.getNOut());
  assertEquals(new ActivationIdentity(),cl.getActivationFn());
  assertEquals(ConvolutionMode.Same,cl.getConvolutionMode());
  assertEquals(WeightInit.XAVIER,cl.getWeightInit());
  assertArrayEquals(new int[]{1,1},cl.getKernelSize());
  assertArrayEquals(new int[]{1,1},cl.getKernelSize());
  INDArray outExp;
  File f2=new ClassPathResource("regression_testing/100a/HouseNumberDetection_Output_100a.bin").getTempFileFromArchive();
  try (DataInputStream dis=new DataInputStream(new FileInputStream(f2))){
    outExp=Nd4j.read(dis);
  }
   INDArray in;
  File f3=new ClassPathResource("regression_testing/100a/HouseNumberDetection_Input_100a.bin").getTempFileFromArchive();
  try (DataInputStream dis=new DataInputStream(new FileInputStream(f3))){
    in=Nd4j.read(dis);
  }
   for (  Layer l : net.getLayers()) {
    if (l.conf().getLayer() instanceof BatchNormalization) {
      BatchNormalization bn=(BatchNormalization)l.conf().getLayer();
      bn.setEps(0.0);
    }
  }
  INDArray outAct=net.outputSingle(in);
  assertEquals(outExp,outAct);
}
