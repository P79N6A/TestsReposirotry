@Test public void validateImplMultiLayerTBPTT() throws Exception {
  Nd4j.getRandom().setSeed(12345);
  int minibatch=10;
  int inputSize=3;
  int lstmLayerSize=4;
  int timeSeriesLength=23;
  int tbpttLength=5;
  int nOut=2;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().updater(new NoOp()).inferenceWorkspaceMode(WorkspaceMode.NONE).trainingWorkspaceMode(WorkspaceMode.NONE).seed(12345L).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,2)).list().layer(0,new LSTM.Builder().nIn(inputSize).nOut(lstmLayerSize).gateActivationFunction(Activation.SIGMOID).activation(Activation.TANH).build()).layer(1,new LSTM.Builder().nIn(lstmLayerSize).nOut(lstmLayerSize).gateActivationFunction(Activation.SIGMOID).activation(Activation.TANH).build()).layer(2,new RnnOutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(lstmLayerSize).nOut(nOut).build()).backpropType(BackpropType.TruncatedBPTT).tBPTTLength(tbpttLength).build();
  MultiLayerNetwork mln1=new MultiLayerNetwork(conf.clone());
  mln1.init();
  MultiLayerNetwork mln2=new MultiLayerNetwork(conf.clone());
  mln2.init();
  assertEquals(mln1.params(),mln2.params());
  Field f=org.deeplearning4j.nn.layers.recurrent.LSTM.class.getDeclaredField("helper");
  f.setAccessible(true);
  Layer l0=mln1.getLayer(0);
  Layer l1=mln1.getLayer(1);
  f.set(l0,null);
  f.set(l1,null);
  assertNull(f.get(l0));
  assertNull(f.get(l1));
  l0=mln2.getLayer(0);
  l1=mln2.getLayer(1);
  assertTrue(f.get(l0) instanceof CudnnLSTMHelper);
  assertTrue(f.get(l1) instanceof CudnnLSTMHelper);
  Random r=new Random(12345);
  for (int x=0; x < 1; x++) {
    INDArray input=Nd4j.rand(new int[]{minibatch,inputSize,timeSeriesLength});
    INDArray labels=Nd4j.zeros(minibatch,nOut,timeSeriesLength);
    for (int i=0; i < minibatch; i++) {
      for (int j=0; j < timeSeriesLength; j++) {
        labels.putScalar(i,r.nextInt(nOut),j,1.0);
      }
    }
    DataSet ds=new DataSet(input,labels);
    mln1.fit(ds);
    mln2.fit(ds);
  }
  assertEquals(mln1.params(),mln2.params());
}
