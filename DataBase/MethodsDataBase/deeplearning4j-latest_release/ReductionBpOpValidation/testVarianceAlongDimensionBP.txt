@Test public void testVarianceAlongDimensionBP(){
  for (  boolean biasCorrected : new boolean[]{false,true}) {
    for (    boolean keepDims : new boolean[]{false,true}) {
      long[] reducedShape_0=(keepDims ? new long[]{1,4} : new long[]{4});
      INDArray preReduceInput=Nd4j.linspace(1,12,12).reshape(3,4);
      long divisor=biasCorrected ? 2 : 3;
      INDArray mean_0=preReduceInput.mean(0);
      INDArray dLdOut_0=Nd4j.create(new double[]{1,2,3,4},reducedShape_0);
      INDArray dLdInExpected_0=preReduceInput.dup();
      dLdInExpected_0.subiRowVector(mean_0).muli(2.0 / divisor).muliRowVector(dLdOut_0);
      INDArray dLdIn=Nd4j.createUninitialized(3,4);
      String err=OpValidation.validate(new OpTestCase(new VarianceBp(preReduceInput,dLdOut_0,dLdIn,biasCorrected,keepDims,0)).expectedOutput(0,dLdInExpected_0));
      assertNull(err);
      divisor=biasCorrected ? 3 : 4;
      long[] reducedShape_1=(keepDims ? new long[]{3,1} : new long[]{3});
      INDArray dLdOut_1=Nd4j.create(new double[]{1,2,3},reducedShape_1);
      INDArray mean_1=preReduceInput.mean(1);
      INDArray dLdInExpected_1=preReduceInput.dup();
      dLdInExpected_1.subiColumnVector(mean_1).muli(2.0 / divisor).muliColumnVector(dLdOut_1.reshape(3,1));
      dLdIn=Nd4j.createUninitialized(3,4);
      err=OpValidation.validate(new OpTestCase(new VarianceBp(preReduceInput,dLdOut_1,dLdIn,biasCorrected,keepDims,1)).expectedOutput(0,dLdInExpected_1));
      assertNull(err);
    }
  }
}
