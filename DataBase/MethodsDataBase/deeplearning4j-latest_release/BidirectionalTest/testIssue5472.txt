@Test public void testIssue5472(){
  int in=2;
  int out=2;
  ComputationGraphConfiguration.GraphBuilder builder=new NeuralNetConfiguration.Builder().updater(new Adam(0.01)).activation(Activation.RELU).graphBuilder().addInputs("IN").setInputTypes(InputType.recurrent(in)).addLayer("AUTOENCODER",new VariationalAutoencoder.Builder().encoderLayerSizes(64).decoderLayerSizes(64).nOut(7).pzxActivationFunction(Activation.IDENTITY).reconstructionDistribution(new BernoulliReconstructionDistribution(Activation.SIGMOID.getActivationFunction())).build(),"IN").addLayer("RNN",new Bidirectional(Bidirectional.Mode.ADD,new GravesLSTM.Builder().nOut(128).build()),"AUTOENCODER").addLayer("OUT",new RnnOutputLayer.Builder().nOut(out).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build(),"RNN").setOutputs("OUT").pretrain(true);
  ComputationGraph net=new ComputationGraph(builder.build());
  net.init();
  MultiDataSetIterator iterator=new SingletonMultiDataSetIterator(new MultiDataSet(Nd4j.create(10,in,5),Nd4j.create(10,out,5)));
  EarlyStoppingConfiguration.Builder b=new EarlyStoppingConfiguration.Builder<>().epochTerminationConditions(new MaxEpochsTerminationCondition(10)).scoreCalculator(new DataSetLossCalculator(iterator,true)).evaluateEveryNEpochs(1).modelSaver(new InMemoryModelSaver<>());
  EarlyStoppingGraphTrainer earlyStoppingGraphTrainer=new EarlyStoppingGraphTrainer(b.build(),net,iterator,null);
  earlyStoppingGraphTrainer.fit();
}
