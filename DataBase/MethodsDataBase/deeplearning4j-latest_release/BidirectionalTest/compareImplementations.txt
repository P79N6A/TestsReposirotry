@Test public void compareImplementations(){
  for (  WorkspaceMode wsm : WorkspaceMode.values()) {
    log.info("*** Starting workspace mode: " + wsm);
    MultiLayerConfiguration conf1=new NeuralNetConfiguration.Builder().activation(Activation.TANH).weightInit(WeightInit.XAVIER).trainingWorkspaceMode(wsm).inferenceWorkspaceMode(wsm).updater(new Adam()).list().layer(new Bidirectional(Bidirectional.Mode.ADD,new GravesLSTM.Builder().nIn(10).nOut(10).build())).layer(new Bidirectional(Bidirectional.Mode.ADD,new GravesLSTM.Builder().nIn(10).nOut(10).build())).layer(new RnnOutputLayer.Builder().lossFunction(LossFunctions.LossFunction.MSE).nIn(10).nOut(10).build()).build();
    MultiLayerConfiguration conf2=new NeuralNetConfiguration.Builder().activation(Activation.TANH).weightInit(WeightInit.XAVIER).trainingWorkspaceMode(wsm).inferenceWorkspaceMode(wsm).updater(new Adam()).list().layer(new GravesBidirectionalLSTM.Builder().nIn(10).nOut(10).build()).layer(new GravesBidirectionalLSTM.Builder().nIn(10).nOut(10).build()).layer(new RnnOutputLayer.Builder().lossFunction(LossFunctions.LossFunction.MSE).nIn(10).nOut(10).build()).build();
    MultiLayerNetwork net1=new MultiLayerNetwork(conf1);
    net1.init();
    MultiLayerNetwork net2=new MultiLayerNetwork(conf2);
    net2.init();
    assertEquals(net1.numParams(),net2.numParams());
    for (int i=0; i < 3; i++) {
      int n1=(int)net1.getLayer(i).numParams();
      int n2=(int)net2.getLayer(i).numParams();
      assertEquals(n1,n2);
    }
    net2.setParams(net1.params());
    INDArray in=Nd4j.rand(new int[]{3,10,5});
    INDArray out1=net1.output(in);
    INDArray out2=net2.output(in);
    assertEquals(out1,out2);
    INDArray labels=Nd4j.rand(new int[]{3,10,5});
    net1.setInput(in);
    net1.setLabels(labels);
    net2.setInput(in);
    net2.setLabels(labels);
    net1.computeGradientAndScore();
    net2.computeGradientAndScore();
    assertEquals(net1.score(),net2.score(),1e-6);
    Gradient g1=net1.gradient();
    Gradient g2=net2.gradient();
    assertEquals(g1.gradient(),g2.gradient());
    MultiLayerUpdater u1=(MultiLayerUpdater)net1.getUpdater();
    MultiLayerUpdater u2=(MultiLayerUpdater)net2.getUpdater();
    assertEquals(u1.getUpdaterStateViewArray(),u2.getUpdaterStateViewArray());
    u1.update(net1,g1,0,0,3,LayerWorkspaceMgr.noWorkspaces());
    u2.update(net2,g2,0,0,3,LayerWorkspaceMgr.noWorkspaces());
    assertEquals(g1.gradient(),g2.gradient());
    assertEquals(u1.getUpdaterStateViewArray(),u2.getUpdaterStateViewArray());
    net1.fit(in,labels);
    net2.fit(in,labels);
    INDArray p1=net1.params();
    INDArray p2=net2.params();
    assertEquals(p1,p2);
  }
}
