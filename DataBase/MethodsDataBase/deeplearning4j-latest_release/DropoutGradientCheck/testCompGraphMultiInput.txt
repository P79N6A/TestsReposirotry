@Test public void testCompGraphMultiInput(){
  Nd4j.getRandom().setSeed(12345);
  int mb=3;
  ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).convolutionMode(ConvolutionMode.Same).dropOut(new GaussianDropout(0.1)).activation(Activation.TANH).updater(new NoOp()).graphBuilder().addInputs("in").addLayer("0",new DenseLayer.Builder().nIn(5).nOut(5).build(),"in").addLayer("1",new DenseLayer.Builder().nIn(5).nOut(5).build(),"0").addLayer("2",new DenseLayer.Builder().nIn(5).nOut(5).build(),"0").addLayer("3",new DenseLayer.Builder().nIn(5).nOut(5).build(),"0").addLayer("out",new OutputLayer.Builder().nIn(15).nOut(5).activation(Activation.SOFTMAX).lossFunction(LossFunction.MCXENT).build(),"1","2","3").setOutputs("out").build();
  ComputationGraph cg=new ComputationGraph(conf);
  cg.init();
  INDArray[] in=new INDArray[]{Nd4j.rand(mb,5)};
  INDArray[] l=new INDArray[]{TestUtils.randomOneHot(mb,5)};
  boolean ok=GradientCheckUtil.checkGradients(cg,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,in,l,null,null,null,12345);
  assertTrue(ok);
}
