@Test public void testAdaptiveThresholdAlgorithm() throws Exception {
  double initialThreshold=1e-3;
  double minTargetSparsity=1e-3;
  double maxTargetSparsity=1e-2;
  double decayRate=0.95;
  ThresholdAlgorithm ta=new AdaptiveThresholdAlgorithm(initialThreshold,minTargetSparsity,maxTargetSparsity,decayRate);
  INDArray update=Nd4j.rand(new long[]{1,100});
  update.muli(2).subi(1);
  update.muli(initialThreshold * 2);
  double t1=ta.calculateThreshold(0,0,null,null,null,update);
  assertEquals(initialThreshold,t1,0.0);
  double t2=ta.calculateThreshold(1,0,initialThreshold,true,null,update);
  double expT2=(1.0 / decayRate) * initialThreshold;
  assertEquals(expT2,t2,1e-6);
  double t3=ta.calculateThreshold(2,0,t2,false,1e-1,update);
  double expT3=(1.0 / decayRate) * t2;
  assertEquals(expT3,t3,1e-6);
  double t4=ta.calculateThreshold(3,0,t3,false,1e-4,update);
  double expT4=decayRate * t3;
  assertEquals(expT4,t4,1e-6);
  Field f=AdaptiveThresholdAlgorithm.class.getDeclaredField("lastThreshold");
  f.setAccessible(true);
  double fValue=(Double)f.get(ta);
  assertEquals(t4,fValue,0.0);
  AdaptiveThresholdAlgorithm ta2=(AdaptiveThresholdAlgorithm)ta.clone();
  assertEquals(ta,ta2);
  ThresholdAlgorithmReducer reducer=ta.newReducer();
  reducer.add(ta);
  reducer.add(ta2);
  ThresholdAlgorithm reduced=reducer.getFinalResult();
  assertEquals(reduced,ta);
  reducer.add(new AdaptiveThresholdAlgorithm(initialThreshold,minTargetSparsity,maxTargetSparsity,decayRate));
  reduced=reducer.getFinalResult();
  assertEquals(reduced,ta);
  double t5=reduced.calculateThreshold(5,1,null,null,null,update);
  double expT5=decayRate * t4;
  assertEquals(expT5,t5,1e-6);
  ThresholdAlgorithm taA=new AdaptiveThresholdAlgorithm(initialThreshold,minTargetSparsity,maxTargetSparsity,decayRate);
  ThresholdAlgorithm taB=new AdaptiveThresholdAlgorithm(initialThreshold,minTargetSparsity,maxTargetSparsity,decayRate);
  f.set(taA,1e-4);
  f.set(taB,5e-4);
  ThresholdAlgorithmReducer r2=taA.newReducer();
  r2.add(taA);
  ThresholdAlgorithmReducer r3=taB.newReducer();
  r3.add(taB);
  r2.merge(r3);
  reduced=r2.getFinalResult();
  fValue=(Double)f.get(reduced);
  assertEquals((1e-4 + 5e-4) / 2.0,fValue,1e-10);
}
