@Test public void testCalls(){
  CustomDropout d1=new CustomDropout();
  CustomDropout d2=new CustomDropout();
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().list().layer(new DenseLayer.Builder().nIn(4).nOut(3).dropOut(d1).build()).layer(new OutputLayer.Builder(LossFunctions.LossFunction.MSE).dropOut(d2).nIn(3).nOut(3).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  List<DataSet> l=new ArrayList<>();
  l.add(new DataSet(Nd4j.rand(5,4),Nd4j.rand(5,3)));
  l.add(new DataSet(Nd4j.rand(5,4),Nd4j.rand(5,3)));
  l.add(new DataSet(Nd4j.rand(5,4),Nd4j.rand(5,3)));
  DataSetIterator iter=new ExistingDataSetIterator(l);
  net.fit(iter);
  net.fit(iter);
  List<Pair<Integer,Integer>> expList=Arrays.asList(new Pair<>(0,0),new Pair<>(1,0),new Pair<>(2,0),new Pair<>(3,1),new Pair<>(4,1),new Pair<>(5,1));
  assertEquals(expList,d1.getAllCalls());
  assertEquals(expList,d2.getAllCalls());
  assertEquals(expList,d1.getAllReverseCalls());
  assertEquals(expList,d2.getAllReverseCalls());
  d1=new CustomDropout();
  d2=new CustomDropout();
  ComputationGraphConfiguration conf2=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").addLayer("0",new DenseLayer.Builder().nIn(4).nOut(3).dropOut(d1).build(),"in").addLayer("1",new OutputLayer.Builder(LossFunctions.LossFunction.MSE).dropOut(d2).nIn(3).nOut(3).build(),"0").setOutputs("1").build();
  ComputationGraph net2=new ComputationGraph(conf2);
  net2.init();
  net2.fit(iter);
  net2.fit(iter);
  assertEquals(expList,d1.getAllCalls());
  assertEquals(expList,d2.getAllCalls());
}
