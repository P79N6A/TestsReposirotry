@Test public void testDropoutValues(){
  Nd4j.getRandom().setSeed(12345);
  Dropout d=new Dropout(0.5);
  INDArray in=Nd4j.ones(10,10);
  INDArray out=d.applyDropout(in,Nd4j.create(10,10),0,0,LayerWorkspaceMgr.noWorkspacesImmutable());
  assertEquals(in,Nd4j.ones(10,10));
  int countZeros=Nd4j.getExecutioner().exec(new MatchCondition(out,Conditions.equals(0))).z().getInt(0);
  int countTwos=Nd4j.getExecutioner().exec(new MatchCondition(out,Conditions.equals(2))).z().getInt(0);
  assertEquals(100,countZeros + countTwos);
  assertTrue(countZeros >= 25 && countZeros <= 75);
  assertTrue(countTwos >= 25 && countTwos <= 75);
  d=new Dropout(new MapSchedule.Builder(ScheduleType.ITERATION).add(0,0.5).add(5,0.1).build());
  for (int i=0; i < 10; i++) {
    out=d.applyDropout(in,Nd4j.create(in.shape()),i,0,LayerWorkspaceMgr.noWorkspacesImmutable());
    assertEquals(in,Nd4j.ones(10,10));
    countZeros=Nd4j.getExecutioner().exec(new MatchCondition(out,Conditions.equals(0))).z().getInt(0);
    if (i < 5) {
      countTwos=Nd4j.getExecutioner().exec(new MatchCondition(out,Conditions.equals(2))).z().getInt(0);
      assertEquals(String.valueOf(i),100,countZeros + countTwos);
      assertTrue(countZeros >= 25 && countZeros <= 75);
      assertTrue(countTwos >= 25 && countTwos <= 75);
    }
 else {
      int countInverse=Nd4j.getExecutioner().exec(new MatchCondition(out,Conditions.equals(1.0 / 0.1))).z().getInt(0);
      assertEquals(100,countZeros + countInverse);
      assertTrue(countZeros >= 80);
      assertTrue(countInverse <= 20);
    }
  }
}
