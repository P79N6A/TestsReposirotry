@Test public void testSpatialDropoutValues3D(){
  Nd4j.getRandom().setSeed(12345);
  SpatialDropout d=new SpatialDropout(0.5);
  INDArray in=Nd4j.ones(10,8,12);
  INDArray out=d.applyDropout(in,Nd4j.create(in.shape()),0,0,LayerWorkspaceMgr.noWorkspacesImmutable());
  assertEquals(in,Nd4j.ones(10,8,12));
  int countZero=0;
  int countTwo=0;
  for (int i=0; i < 10; i++) {
    for (int j=0; j < 8; j++) {
      double value=out.getDouble(i,j,0);
      assertTrue(value == 0 || value == 2.0);
      INDArray exp=Nd4j.valueArrayOf(new int[]{1,12},value);
      INDArray act=out.get(point(i),point(j),all());
      assertEquals(exp,act);
      if (value == 0.0) {
        countZero++;
      }
 else {
        countTwo++;
      }
    }
  }
  assertTrue(countZero >= 20 && countZero <= 60);
  assertTrue(countTwo >= 20 && countTwo <= 60);
  d=new SpatialDropout(new MapSchedule.Builder(ScheduleType.ITERATION).add(0,0.5).add(5,0.1).build());
  for (int i=0; i < 10; i++) {
    out=d.applyDropout(in,Nd4j.create(in.shape()),i,0,LayerWorkspaceMgr.noWorkspacesImmutable());
    assertEquals(in,Nd4j.ones(10,8,12));
    if (i < 5) {
      countZero=0;
      countTwo=0;
      for (int m=0; m < 10; m++) {
        for (int j=0; j < 8; j++) {
          double value=out.getDouble(m,j,0);
          assertTrue(value == 0 || value == 2.0);
          INDArray exp=Nd4j.valueArrayOf(new int[]{1,12},value);
          INDArray act=out.get(point(m),point(j),all());
          assertEquals(exp,act);
          if (value == 0.0) {
            countZero++;
          }
 else {
            countTwo++;
          }
        }
      }
      assertTrue(countZero >= 20 && countZero <= 60);
      assertTrue(countTwo >= 20 && countTwo <= 60);
    }
 else {
      countZero=0;
      int countInverse=0;
      for (int m=0; m < 10; m++) {
        for (int j=0; j < 8; j++) {
          double value=out.getDouble(m,j,0);
          assertTrue(value == 0 || value == 10.0);
          INDArray exp=Nd4j.valueArrayOf(new int[]{1,12},value);
          INDArray act=out.get(point(m),point(j),all());
          assertEquals(exp,act);
          if (value == 0.0) {
            countZero++;
          }
 else {
            countInverse++;
          }
        }
      }
      assertTrue(countZero >= 60);
      assertTrue(countInverse <= 15);
    }
  }
}
