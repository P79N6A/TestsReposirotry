@Test public void testVariationalAutoencoderLayerSpaceBasic(){
  MultiLayerSpace mls=new MultiLayerSpace.Builder().updater(new Sgd(0.005)).seed(12345).addLayer(new VariationalAutoencoderLayerSpace.Builder().nIn(new IntegerParameterSpace(50,75)).nOut(200).encoderLayerSizes(234,567).decoderLayerSizes(123,456).reconstructionDistribution(new DiscreteParameterSpace<ReconstructionDistribution>(new GaussianReconstructionDistribution(),new BernoulliReconstructionDistribution())).build()).backprop(false).pretrain(true).build();
  int numParams=mls.numParameters();
  List<ParameterSpace> noDuplicatesList=LeafUtils.getUniqueObjects(mls.collectLeaves());
  int c=0;
  for (  ParameterSpace ps : noDuplicatesList) {
    int np=ps.numParameters();
    if (np == 1) {
      ps.setIndices(c++);
    }
 else {
      int[] values=new int[np];
      for (int j=0; j < np; j++)       values[c++]=j;
      ps.setIndices(values);
    }
  }
  double[] zeros=new double[numParams];
  DL4JConfiguration configuration=mls.getValue(zeros);
  MultiLayerConfiguration conf=configuration.getMultiLayerConfiguration();
  assertEquals(1,conf.getConfs().size());
  NeuralNetConfiguration nnc=conf.getConf(0);
  VariationalAutoencoder vae=(VariationalAutoencoder)nnc.getLayer();
  assertEquals(50,vae.getNIn());
  assertEquals(200,vae.getNOut());
  assertArrayEquals(new int[]{234,567},vae.getEncoderLayerSizes());
  assertArrayEquals(new int[]{123,456},vae.getDecoderLayerSizes());
  assertTrue(vae.getOutputDistribution() instanceof GaussianReconstructionDistribution);
  double[] ones=new double[numParams];
  for (int i=0; i < ones.length; i++)   ones[i]=1.0;
  configuration=mls.getValue(ones);
  conf=configuration.getMultiLayerConfiguration();
  assertEquals(1,conf.getConfs().size());
  nnc=conf.getConf(0);
  vae=(VariationalAutoencoder)nnc.getLayer();
  assertEquals(75,vae.getNIn());
  assertEquals(200,vae.getNOut());
  assertArrayEquals(new int[]{234,567},vae.getEncoderLayerSizes());
  assertArrayEquals(new int[]{123,456},vae.getDecoderLayerSizes());
  assertTrue(vae.getOutputDistribution() instanceof BernoulliReconstructionDistribution);
}
