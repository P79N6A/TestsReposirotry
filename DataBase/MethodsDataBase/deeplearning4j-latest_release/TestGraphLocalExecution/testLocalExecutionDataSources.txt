@Test public void testLocalExecutionDataSources() throws Exception {
  for (int dataApproach=0; dataApproach < 3; dataApproach++) {
    log.info("////////////////// Starting Test: {} ///////////////////",dataApproach);
    ComputationGraphSpace mls=new ComputationGraphSpace.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new SgdSpace(new ContinuousParameterSpace(0.0001,0.1))).l2(new ContinuousParameterSpace(0.0001,0.01)).addInputs("in").addLayer("0",new DenseLayerSpace.Builder().nIn(784).nOut(new IntegerParameterSpace(10,20)).activation(new DiscreteParameterSpace<>(Activation.RELU,Activation.TANH)).build(),"in").addLayer("1",new OutputLayerSpace.Builder().nOut(10).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build(),"0").setOutputs("1").setInputTypes(InputType.feedForward(784)).numEpochs(3).pretrain(false).backprop(true).build();
    DataProvider dp=null;
    Class<? extends DataSource> ds=null;
    Properties dsP=null;
    CandidateGenerator candidateGenerator;
    if (dataApproach == 0) {
      ds=TestDL4JLocalExecution.MnistDataSource.class;
      dsP=new Properties();
      dsP.setProperty("minibatch","8");
      candidateGenerator=new RandomSearchGenerator(mls);
    }
 else     if (dataApproach == 1) {
      dp=new TestDL4JLocalExecution.MnistDataProvider();
      candidateGenerator=new RandomSearchGenerator(mls);
    }
 else {
      Map<String,Object> commands=new HashMap<>();
      commands.put(DataSetIteratorFactoryProvider.FACTORY_KEY,TestDataFactoryProviderMnist.class.getCanonicalName());
      candidateGenerator=new RandomSearchGenerator(mls,commands);
      dp=new DataSetIteratorFactoryProvider();
    }
    File f=testDir.newFolder();
    File modelSave=new File(f,"modelSaveDir");
    OptimizationConfiguration configuration=new OptimizationConfiguration.Builder().candidateGenerator(candidateGenerator).dataProvider(dp).dataSource(ds,dsP).modelSaver(new FileModelSaver(modelSave)).scoreFunction(new TestSetLossScoreFunction()).terminationConditions(new MaxTimeCondition(2,TimeUnit.MINUTES),new MaxCandidatesCondition(5)).build();
    IOptimizationRunner runner=new LocalOptimizationRunner(configuration,new ComputationGraphTaskCreator(new ClassificationEvaluator()));
    runner.execute();
    List<ResultReference> results=runner.getResults();
    assertEquals(5,results.size());
    System.out.println("----- COMPLETE - " + results.size() + " results -----");
  }
}
