@Test public void testRocBinaryMerging(){
  for (  int nSteps : new int[]{30,0}) {
    int nOut=4;
    int[] shape1={30,nOut};
    int[] shape2={50,nOut};
    Nd4j.getRandom().setSeed(12345);
    INDArray l1=Nd4j.getExecutioner().exec(new BernoulliDistribution(Nd4j.createUninitialized(shape1),0.5));
    INDArray l2=Nd4j.getExecutioner().exec(new BernoulliDistribution(Nd4j.createUninitialized(shape2),0.5));
    INDArray p1=Nd4j.rand(shape1);
    INDArray p2=Nd4j.rand(shape2);
    ROCBinary rb=new ROCBinary(nSteps);
    rb.eval(l1,p1);
    rb.eval(l2,p2);
    ROCBinary rb1=new ROCBinary(nSteps);
    rb1.eval(l1,p1);
    ROCBinary rb2=new ROCBinary(nSteps);
    rb2.eval(l2,p2);
    rb1.merge(rb2);
    assertEquals(rb.stats(),rb1.stats());
  }
}
