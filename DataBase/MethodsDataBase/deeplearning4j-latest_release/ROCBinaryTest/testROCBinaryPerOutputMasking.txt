@Test public void testROCBinaryPerOutputMasking(){
  for (  int nSteps : new int[]{30,0}) {
    INDArray mask=Nd4j.create(new double[][]{{1,1,1},{0,1,1},{1,0,1},{1,1,0},{1,1,1}});
    INDArray labels=Nd4j.create(new double[][]{{0,1,0},{1,1,0},{0,1,1},{0,0,1},{1,1,1}});
    INDArray labelsExMasked=Nd4j.create(new double[][]{{0,1,0},{0,1,0},{0,0,1},{1,1,1}});
    INDArray predicted=Nd4j.create(new double[][]{{0.9,0.4,0.6},{0.2,0.8,0.4},{0.6,0.1,0.1},{0.3,0.7,0.2},{0.8,0.6,0.6}});
    INDArray predictedExMasked=Nd4j.create(new double[][]{{0.9,0.4,0.6},{0.6,0.8,0.4},{0.3,0.7,0.1},{0.8,0.6,0.6}});
    ROCBinary rbMasked=new ROCBinary(nSteps);
    rbMasked.eval(labels,predicted,mask);
    ROCBinary rb=new ROCBinary(nSteps);
    rb.eval(labelsExMasked,predictedExMasked);
    assertEquals(rb.stats(),rbMasked.stats());
    for (int i=0; i < 3; i++) {
      PrecisionRecallCurve pExp=rb.getPrecisionRecallCurve(i);
      PrecisionRecallCurve p=rbMasked.getPrecisionRecallCurve(i);
      assertEquals(pExp,p);
    }
  }
}
