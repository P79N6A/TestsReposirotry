@Test public void testInvalidInputShape(){
  NeuralNetConfiguration.Builder builder=new NeuralNetConfiguration.Builder().seed(123).miniBatch(true).cacheMode(CacheMode.DEVICE).updater(new Nesterovs(0.9)).gradientNormalization(GradientNormalization.RenormalizeL2PerLayer).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT);
  int[] kernelArray=new int[]{3,3};
  int[] strideArray=new int[]{1,1};
  int[] zeroPaddingArray=new int[]{0,0};
  int processWidth=4;
  NeuralNetConfiguration.ListBuilder listBuilder=builder.list();
  listBuilder=listBuilder.layer(0,new ConvolutionLayer.Builder(kernelArray,strideArray,zeroPaddingArray).name("cnn1").convolutionMode(ConvolutionMode.Strict).nIn(2).nOut(processWidth).weightInit(WeightInit.XAVIER_UNIFORM).activation(Activation.RELU).biasInit(1e-2).build());
  listBuilder=listBuilder.layer(1,new ConvolutionLayer.Builder(kernelArray,strideArray,zeroPaddingArray).name("cnn2").convolutionMode(ConvolutionMode.Strict).nOut(processWidth).weightInit(WeightInit.XAVIER_UNIFORM).activation(Activation.RELU).biasInit(1e-2).build());
  listBuilder=listBuilder.layer(2,new ConvolutionLayer.Builder(kernelArray,strideArray,zeroPaddingArray).name("cnn3").convolutionMode(ConvolutionMode.Strict).nOut(processWidth).weightInit(WeightInit.XAVIER_UNIFORM).activation(Activation.RELU).build());
  listBuilder=listBuilder.layer(3,new ConvolutionLayer.Builder(kernelArray,strideArray,zeroPaddingArray).name("cnn4").convolutionMode(ConvolutionMode.Strict).nOut(processWidth).weightInit(WeightInit.XAVIER_UNIFORM).activation(Activation.RELU).build());
  listBuilder=listBuilder.layer(4,new OutputLayer.Builder(LossFunctions.LossFunction.MSE).name("output").nOut(1).activation(Activation.TANH).build());
  MultiLayerConfiguration conf=listBuilder.setInputType(InputType.convolutional(20,10,2)).build();
  MultiLayerNetwork niceModel=new MultiLayerNetwork(conf);
  niceModel.init();
  niceModel.output(Nd4j.create(1,2,20,10));
  try {
    niceModel.output(Nd4j.create(1,2,10,20));
    fail("Expected exception");
  }
 catch (  IllegalStateException e) {
  }
}
