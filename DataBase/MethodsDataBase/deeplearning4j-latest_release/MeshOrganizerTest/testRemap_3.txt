@Test public void testRemap_3() throws Exception {
  val mesh=new MeshOrganizer(MeshBuildMode.MESH);
  mesh.getRootNode().setId("ROOT_NODE");
  val nodes=new ArrayList<MeshOrganizer.Node>();
  for (int e=0; e < 512; e++) {
    val node=mesh.addNode(String.valueOf(e));
    nodes.add(node);
  }
  val node=nodes.get(8);
  assertNotNull(node.getUpstreamNode());
  assertEquals(MeshOrganizer.MAX_DOWNSTREAMS,node.getDownstreamNodes().size());
  log.info("Node ID: {}; Upstream ID: {}; Downstreams: {}",node.getId(),node.getUpstreamNode().getId(),node.getDownstreamNodes());
  val ids=new ArrayList<String>();
  node.getDownstreamNodes().forEach(n -> ids.add(n.getId()));
  mesh.remapNodeAndDownstreams(node);
  assertEquals(mesh.getRootNode(),node.getUpstreamNode());
  log.info("Node ID: {}; Upstream ID: {}; Downstreams: {}",node.getId(),node.getUpstreamNode().getId(),node.getDownstreamNodes());
  assertEquals(0,node.getDownstreamNodes().size());
  for (  val i : ids) {
    val n=mesh.getNodeById(i);
    assertNotNull(n);
    assertNotEquals(node.getId(),n.getUpstreamNode().getId());
    assertTrue(n.getUpstreamNode().getDownstreamNodes().contains(n));
  }
}
