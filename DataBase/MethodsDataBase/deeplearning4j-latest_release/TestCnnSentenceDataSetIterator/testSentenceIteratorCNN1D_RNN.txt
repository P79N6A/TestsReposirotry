@Test public void testSentenceIteratorCNN1D_RNN() throws Exception {
  WordVectors w2v=WordVectorSerializer.readWord2VecModel(new ClassPathResource("word2vec/googleload/sample_vec.bin").getFile());
  int vectorSize=w2v.lookupTable().layerSize();
  List<String> sentences=new ArrayList<>();
  sentences.add("these balance Database model");
  sentences.add("into same THISWORDDOESNTEXIST are");
  int maxLength=4;
  List<String> s1=Arrays.asList("these","balance","Database","model");
  List<String> s2=Arrays.asList("into","same","are");
  List<String> labelsForSentences=Arrays.asList("Positive","Negative");
  INDArray expLabels=Nd4j.create(new double[][]{{0,1},{1,0}});
  for (  boolean norm : new boolean[]{true,false}) {
    for (    CnnSentenceDataSetIterator.Format f : new CnnSentenceDataSetIterator.Format[]{CnnSentenceDataSetIterator.Format.CNN1D,CnnSentenceDataSetIterator.Format.RNN}) {
      INDArray expectedFeatures=Nd4j.create(2,vectorSize,maxLength);
      int[] fmShape=new int[]{2,4};
      INDArray expectedFeatureMask=Nd4j.create(new double[][]{{1,1,1,1},{1,1,1,0}}).reshape('c',fmShape);
      for (int i=0; i < 4; i++) {
        INDArray v=norm ? w2v.getWordVectorMatrixNormalized(s1.get(i)) : w2v.getWordVectorMatrix(s1.get(i));
        expectedFeatures.get(NDArrayIndex.point(0),NDArrayIndex.all(),NDArrayIndex.point(i)).assign(v);
      }
      for (int i=0; i < 3; i++) {
        INDArray v=norm ? w2v.getWordVectorMatrixNormalized(s2.get(i)) : w2v.getWordVectorMatrix(s2.get(i));
        expectedFeatures.get(NDArrayIndex.point(1),NDArrayIndex.all(),NDArrayIndex.point(i)).assign(v);
      }
      LabeledSentenceProvider p=new CollectionLabeledSentenceProvider(sentences,labelsForSentences,null);
      CnnSentenceDataSetIterator dsi=new CnnSentenceDataSetIterator.Builder(f).sentenceProvider(p).useNormalizedWordVectors(norm).wordVectors(w2v).maxSentenceLength(256).minibatchSize(32).build();
      DataSet ds=dsi.next();
      assertArrayEquals(expectedFeatures.shape(),ds.getFeatures().shape());
      assertEquals(expectedFeatures,ds.getFeatures());
      assertEquals(expLabels,ds.getLabels());
      assertEquals(expectedFeatureMask,ds.getFeaturesMaskArray());
      assertNull(ds.getLabelsMaskArray());
      INDArray s1F=dsi.loadSingleSentence(sentences.get(0));
      INDArray s2F=dsi.loadSingleSentence(sentences.get(1));
      INDArray sub1=ds.getFeatures().get(NDArrayIndex.interval(0,0,true),NDArrayIndex.all(),NDArrayIndex.all());
      INDArray sub2=ds.getFeatures().get(NDArrayIndex.interval(1,1,true),NDArrayIndex.all(),NDArrayIndex.interval(0,3));
      assertArrayEquals(sub1.shape(),s1F.shape());
      assertArrayEquals(sub2.shape(),s2F.shape());
      assertEquals(sub1,s1F);
      assertEquals(sub2,s2F);
    }
  }
}
