@Test public void testSaveRestoreMapFileSequences(){
  List<List<List<Writable>>> l=new ArrayList<>();
  l.add(Arrays.asList(Arrays.<org.datavec.api.writable.Writable>asList(new Text("zero"),new IntWritable(0),new DoubleWritable(0),new NDArrayWritable(Nd4j.valueArrayOf(10,0.0))),Arrays.<org.datavec.api.writable.Writable>asList(new Text("one"),new IntWritable(1),new DoubleWritable(1.0),new NDArrayWritable(Nd4j.valueArrayOf(10,1.0))),Arrays.<org.datavec.api.writable.Writable>asList(new Text("two"),new IntWritable(2),new DoubleWritable(2.0),new NDArrayWritable(Nd4j.valueArrayOf(10,2.0)))));
  l.add(Arrays.asList(Arrays.<org.datavec.api.writable.Writable>asList(new Text("Bzero"),new IntWritable(10),new DoubleWritable(10),new NDArrayWritable(Nd4j.valueArrayOf(10,10.0))),Arrays.<org.datavec.api.writable.Writable>asList(new Text("Bone"),new IntWritable(11),new DoubleWritable(11.0),new NDArrayWritable(Nd4j.valueArrayOf(10,11.0))),Arrays.<org.datavec.api.writable.Writable>asList(new Text("Btwo"),new IntWritable(12),new DoubleWritable(12.0),new NDArrayWritable(Nd4j.valueArrayOf(10,12.0)))));
  l.add(Arrays.asList(Arrays.<org.datavec.api.writable.Writable>asList(new Text("Czero"),new IntWritable(20),new DoubleWritable(20),new NDArrayWritable(Nd4j.valueArrayOf(10,20.0))),Arrays.<org.datavec.api.writable.Writable>asList(new Text("Cone"),new IntWritable(21),new DoubleWritable(21.0),new NDArrayWritable(Nd4j.valueArrayOf(10,21.0))),Arrays.<org.datavec.api.writable.Writable>asList(new Text("Ctwo"),new IntWritable(22),new DoubleWritable(22.0),new NDArrayWritable(Nd4j.valueArrayOf(10,22.0)))));
  JavaRDD<List<List<Writable>>> rdd=sc.parallelize(l);
  File f=Files.createTempDir();
  f.delete();
  f.deleteOnExit();
  String path="file:///" + f.getAbsolutePath();
  SparkStorageUtils.saveMapFileSequences(path,rdd);
  JavaPairRDD<Long,List<List<Writable>>> restored=SparkStorageUtils.restoreMapFileSequences(path,sc);
  Map<Long,List<List<Writable>>> m=restored.collectAsMap();
  assertEquals(3,m.size());
  for (int i=0; i < 3; i++) {
    assertEquals(l.get(i),m.get((long)i));
  }
  f=Files.createTempDir();
  f.delete();
  f.deleteOnExit();
  path="file:///" + f.getAbsolutePath();
  SparkStorageUtils.saveSequenceFileSequences(path,rdd);
  List<List<List<Writable>>> restored2=SparkStorageUtils.restoreSequenceFileSequences(path,sc).collect();
  assertEquals(3,restored2.size());
  assertTrue(l.containsAll(restored2) && restored2.containsAll(l));
}
