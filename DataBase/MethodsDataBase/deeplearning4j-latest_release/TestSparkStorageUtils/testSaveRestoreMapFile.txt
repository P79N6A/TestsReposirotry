@Test public void testSaveRestoreMapFile(){
  List<List<Writable>> l=new ArrayList<>();
  l.add(Arrays.<org.datavec.api.writable.Writable>asList(new Text("zero"),new IntWritable(0),new DoubleWritable(0),new NDArrayWritable(Nd4j.valueArrayOf(10,0.0))));
  l.add(Arrays.<org.datavec.api.writable.Writable>asList(new Text("one"),new IntWritable(11),new DoubleWritable(11.0),new NDArrayWritable(Nd4j.valueArrayOf(10,11.0))));
  l.add(Arrays.<org.datavec.api.writable.Writable>asList(new Text("two"),new IntWritable(22),new DoubleWritable(22.0),new NDArrayWritable(Nd4j.valueArrayOf(10,22.0))));
  JavaRDD<List<Writable>> rdd=sc.parallelize(l);
  File f=Files.createTempDir();
  f.delete();
  f.deleteOnExit();
  String path="file:///" + f.getAbsolutePath();
  SparkStorageUtils.saveMapFile(path,rdd);
  JavaPairRDD<Long,List<Writable>> restored=SparkStorageUtils.restoreMapFile(path,sc);
  Map<Long,List<Writable>> m=restored.collectAsMap();
  assertEquals(3,m.size());
  for (int i=0; i < 3; i++) {
    assertEquals(l.get(i),m.get((long)i));
  }
  f=Files.createTempDir();
  f.delete();
  f.deleteOnExit();
  path="file:///" + f.getAbsolutePath();
  SparkStorageUtils.saveSequenceFile(path,rdd);
  List<List<Writable>> restored2=SparkStorageUtils.restoreSequenceFile(path,sc).collect();
  assertEquals(3,restored2.size());
  assertTrue(l.containsAll(restored2) && restored2.containsAll(l));
}
