@Test public void testSimple() throws Exception {
  for (int i=0; i < 10; i++) {
    for (    boolean execFirst : new boolean[]{false,true}) {
      log.info("Starting test: i={}, execFirst={}",i,execFirst);
      SameDiff sd=SameDiff.create();
      SDVariable in=sd.var("in",Nd4j.linspace(1,12,12).reshape(3,4));
      SDVariable x;
switch (i) {
case 0:
        x=sd.cumsum("out",in,false,false,1);
      break;
case 1:
    x=sd.tanh("out",in);
  break;
case 2:
case 3:
x=sd.mean("x",in,i == 2,1);
break;
case 4:
x=sd.square(in);
break;
case 5:
case 6:
x=sd.argmax("x",in,i == 5,1);
break;
case 7:
x=in.add(10);
break;
case 8:
SDVariable y=sd.var("in2",Nd4j.linspace(1,12,12).muli(0.1).addi(0.5).reshape(3,4));
x=sd.cosineSimilarity(in,y);
break;
case 9:
SDVariable z=sd.var("in2",Nd4j.linspace(1,12,12).muli(0.1).addi(0.5).reshape(3,4));
x=sd.cosineSimilarity(in,z,1);
break;
default :
throw new RuntimeException();
}
if (execFirst) {
sd.execAndEndResult();
}
File f=testDir.newFile();
f.delete();
sd.asFlatFile(f);
SameDiff restored=SameDiff.fromFlatFile(f);
List<SDVariable> varsOrig=sd.variables();
List<SDVariable> varsRestored=restored.variables();
assertEquals(varsOrig.size(),varsRestored.size());
for (int j=0; j < varsOrig.size(); j++) {
assertEquals(varsOrig.get(j).getVarName(),varsRestored.get(j).getVarName());
}
DifferentialFunction[] fOrig=sd.functions();
DifferentialFunction[] fRestored=restored.functions();
assertEquals(fOrig.length,fRestored.length);
for (int j=0; j < sd.functions().length; j++) {
assertEquals(fOrig[j].getClass(),fRestored[j].getClass());
}
INDArray outOrig=sd.execAndEndResult();
INDArray outRestored=restored.execAndEndResult();
assertEquals(outOrig,outRestored);
}
}
}
