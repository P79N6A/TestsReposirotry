@Test public void testReliabilityDiagram(){
  INDArray bin0Probs=Nd4j.create(new double[][]{{1.0,0.0},{0.9,0.1},{0.85,0.15}});
  INDArray bin0Labels=Nd4j.create(new double[][]{{1.0,0.0},{1.0,0.0},{0.0,1.0}});
  INDArray bin1Probs=Nd4j.create(new double[][]{{0.8,0.2},{0.7,0.3},{0.65,0.35}});
  INDArray bin1Labels=Nd4j.create(new double[][]{{1.0,0.0},{0.0,1.0},{1.0,0.0}});
  INDArray bin2Probs=Nd4j.create(new double[][]{{0.59,0.41},{0.5,0.5},{0.45,0.55}});
  INDArray bin2Labels=Nd4j.create(new double[][]{{1.0,0.0},{0.0,1.0},{0.0,1.0}});
  INDArray bin4Probs=Nd4j.create(new double[][]{{0.0,1.0},{0.1,0.9}});
  INDArray bin4Labels=Nd4j.create(new double[][]{{0.0,1.0},{0.0,1.0}});
  INDArray probs=Nd4j.vstack(bin0Probs,bin1Probs,bin2Probs,bin4Probs);
  INDArray labels=Nd4j.vstack(bin0Labels,bin1Labels,bin2Labels,bin4Labels);
  EvaluationCalibration ec=new EvaluationCalibration(5,5);
  ec.eval(labels,probs);
  for (int i=0; i < 1; i++) {
    double[] avgBinProbsClass;
    double[] fracPos;
    if (i == 0) {
      avgBinProbsClass=new double[]{0.05,(0.59 + 0.5 + 0.45) / 3,(0.65 + 0.7) / 2.0,(0.8 + 0.85 + 0.9+ 1.0) / 4};
      fracPos=new double[]{0.0 / 2.0,1.0 / 3,1.0 / 2,3.0 / 4};
    }
 else {
      avgBinProbsClass=new double[]{bin0Probs.getColumn(i).meanNumber().doubleValue(),bin1Probs.getColumn(i).meanNumber().doubleValue(),bin2Probs.getColumn(i).meanNumber().doubleValue(),bin4Probs.getColumn(i).meanNumber().doubleValue()};
      fracPos=new double[]{bin0Labels.getColumn(i).sumNumber().doubleValue() / bin0Labels.size(0),bin1Labels.getColumn(i).sumNumber().doubleValue() / bin1Labels.size(0),bin2Labels.getColumn(i).sumNumber().doubleValue() / bin2Labels.size(0),bin4Labels.getColumn(i).sumNumber().doubleValue() / bin4Labels.size(0)};
    }
    org.nd4j.evaluation.curves.ReliabilityDiagram rd=ec.getReliabilityDiagram(i);
    double[] x=rd.getMeanPredictedValueX();
    double[] y=rd.getFractionPositivesY();
    assertArrayEquals(avgBinProbsClass,x,1e-6);
    assertArrayEquals(fracPos,y,1e-6);
  }
}
