@Test public void testResidualPlots(){
  int minibatch=50;
  int nClasses=3;
  INDArray arr=Nd4j.rand(minibatch,nClasses);
  arr.diviColumnVector(arr.sum(1));
  INDArray labels=Nd4j.zeros(minibatch,nClasses);
  Random r=new Random(12345);
  for (int i=0; i < minibatch; i++) {
    labels.putScalar(i,r.nextInt(nClasses),1.0);
  }
  int numBins=5;
  EvaluationCalibration ec=new EvaluationCalibration(numBins,numBins);
  ec.eval(labels,arr);
  INDArray absLabelSubProb=Transforms.abs(labels.sub(arr));
  INDArray argmaxLabels=Nd4j.argMax(labels,1);
  int[] countsAllClasses=new int[numBins];
  int[][] countsByClass=new int[nClasses][numBins];
  double binSize=1.0 / numBins;
  for (int i=0; i < minibatch; i++) {
    int actualClassIdx=argmaxLabels.getInt(i,0);
    for (int j=0; j < nClasses; j++) {
      double labelSubProb=absLabelSubProb.getDouble(i,j);
      for (int k=0; k < numBins; k++) {
        double binLower=k * binSize;
        double binUpper=(k + 1) * binSize;
        if (k == numBins - 1)         binUpper=1.0;
        if (labelSubProb >= binLower && labelSubProb < binUpper) {
          countsAllClasses[k]++;
          if (j == actualClassIdx) {
            countsByClass[j][k]++;
          }
        }
      }
    }
  }
  org.nd4j.evaluation.curves.Histogram rpAllClasses=ec.getResidualPlotAllClasses();
  int[] rpAllClassesBinCounts=rpAllClasses.getBinCounts();
  assertArrayEquals(countsAllClasses,rpAllClassesBinCounts);
  for (int i=0; i < nClasses; i++) {
    org.nd4j.evaluation.curves.Histogram rpCurrClass=ec.getResidualPlot(i);
    int[] rpCurrClassCounts=rpCurrClass.getBinCounts();
    assertArrayEquals("Class: " + i,countsByClass[i],rpCurrClassCounts);
  }
  int[] probCountsAllClasses=new int[numBins];
  int[][] probCountsByClass=new int[nClasses][numBins];
  for (int i=0; i < minibatch; i++) {
    int actualClassIdx=argmaxLabels.getInt(i,0);
    for (int j=0; j < nClasses; j++) {
      double prob=arr.getDouble(i,j);
      for (int k=0; k < numBins; k++) {
        double binLower=k * binSize;
        double binUpper=(k + 1) * binSize;
        if (k == numBins - 1)         binUpper=1.0;
        if (prob >= binLower && prob < binUpper) {
          probCountsAllClasses[k]++;
          if (j == actualClassIdx) {
            probCountsByClass[j][k]++;
          }
        }
      }
    }
  }
  org.nd4j.evaluation.curves.Histogram allProb=ec.getProbabilityHistogramAllClasses();
  int[] actProbCountsAllClasses=allProb.getBinCounts();
  assertArrayEquals(probCountsAllClasses,actProbCountsAllClasses);
  for (int i=0; i < nClasses; i++) {
    org.nd4j.evaluation.curves.Histogram probCurrClass=ec.getProbabilityHistogram(i);
    int[] actProbCurrClass=probCurrClass.getBinCounts();
    assertArrayEquals(probCountsByClass[i],actProbCurrClass);
  }
}
