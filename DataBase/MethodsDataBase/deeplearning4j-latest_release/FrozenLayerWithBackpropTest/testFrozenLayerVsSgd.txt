/** 
 * Frozen layer should have same results as a layer with Sgd updater with learning rate set to 0
 */
@Test public void testFrozenLayerVsSgd(){
  DataSet randomData=new DataSet(Nd4j.rand(100,4,12345),Nd4j.rand(100,1,12345));
  MultiLayerConfiguration confSgd=new NeuralNetConfiguration.Builder().seed(12345).weightInit(WeightInit.XAVIER).updater(new Sgd(2)).list().layer(0,new DenseLayer.Builder().nIn(4).nOut(3).build()).layer(1,new DenseLayer.Builder().updater(new Sgd(0.0)).biasUpdater(new Sgd(0.0)).nIn(3).nOut(4).build()).layer(2,new DenseLayer.Builder().updater(new Sgd(0.0)).biasUpdater(new Sgd(0.0)).nIn(4).nOut(2).build()).layer(3,new OutputLayer.Builder(LossFunctions.LossFunction.MSE).updater(new Sgd(0.0)).biasUpdater(new Sgd(0.0)).activation(Activation.TANH).nIn(2).nOut(1).build()).build();
  MultiLayerConfiguration confFrozen=new NeuralNetConfiguration.Builder().seed(12345).weightInit(WeightInit.XAVIER).updater(new Sgd(2)).list().layer(0,new DenseLayer.Builder().nIn(4).nOut(3).build()).layer(1,new org.deeplearning4j.nn.conf.layers.misc.FrozenLayerWithBackprop(new DenseLayer.Builder().nIn(3).nOut(4).build())).layer(2,new org.deeplearning4j.nn.conf.layers.misc.FrozenLayerWithBackprop(new DenseLayer.Builder().nIn(4).nOut(2).build())).layer(3,new org.deeplearning4j.nn.conf.layers.misc.FrozenLayerWithBackprop(new OutputLayer.Builder(LossFunctions.LossFunction.MSE).activation(Activation.TANH).nIn(2).nOut(1).build())).build();
  MultiLayerNetwork frozenNetwork=new MultiLayerNetwork(confFrozen);
  frozenNetwork.init();
  INDArray unfrozenLayerParams=frozenNetwork.getLayer(0).params().dup();
  INDArray frozenLayerParams1=frozenNetwork.getLayer(1).params().dup();
  INDArray frozenLayerParams2=frozenNetwork.getLayer(2).params().dup();
  INDArray frozenOutputLayerParams=frozenNetwork.getLayer(3).params().dup();
  MultiLayerNetwork sgdNetwork=new MultiLayerNetwork(confSgd);
  sgdNetwork.init();
  INDArray unfrozenSgdLayerParams=sgdNetwork.getLayer(0).params().dup();
  INDArray frozenSgdLayerParams1=sgdNetwork.getLayer(1).params().dup();
  INDArray frozenSgdLayerParams2=sgdNetwork.getLayer(2).params().dup();
  INDArray frozenSgdOutputLayerParams=sgdNetwork.getLayer(3).params().dup();
  for (int i=0; i < 100; i++) {
    frozenNetwork.fit(randomData);
  }
  for (int i=0; i < 100; i++) {
    sgdNetwork.fit(randomData);
  }
  assertEquals(frozenNetwork.getLayer(0).params(),sgdNetwork.getLayer(0).params());
  assertEquals(frozenNetwork.getLayer(1).params(),sgdNetwork.getLayer(1).params());
  assertEquals(frozenNetwork.getLayer(2).params(),sgdNetwork.getLayer(2).params());
  assertEquals(frozenNetwork.getLayer(3).params(),sgdNetwork.getLayer(3).params());
}
