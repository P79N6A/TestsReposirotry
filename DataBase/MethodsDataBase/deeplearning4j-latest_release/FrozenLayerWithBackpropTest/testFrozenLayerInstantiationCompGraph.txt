@Test public void testFrozenLayerInstantiationCompGraph(){
  ComputationGraphConfiguration conf1=new NeuralNetConfiguration.Builder().seed(12345).graphBuilder().addInputs("in").addLayer("0",new DenseLayer.Builder().nIn(10).nOut(10).activation(Activation.TANH).weightInit(WeightInit.XAVIER).build(),"in").addLayer("1",new DenseLayer.Builder().nIn(10).nOut(10).activation(Activation.TANH).weightInit(WeightInit.XAVIER).build(),"0").addLayer("2",new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(10).nOut(10).build(),"1").setOutputs("2").build();
  ComputationGraphConfiguration conf2=new NeuralNetConfiguration.Builder().seed(12345).graphBuilder().addInputs("in").addLayer("0",new org.deeplearning4j.nn.conf.layers.misc.FrozenLayerWithBackprop(new DenseLayer.Builder().nIn(10).nOut(10).activation(Activation.TANH).weightInit(WeightInit.XAVIER).build()),"in").addLayer("1",new org.deeplearning4j.nn.conf.layers.misc.FrozenLayerWithBackprop(new DenseLayer.Builder().nIn(10).nOut(10).activation(Activation.TANH).weightInit(WeightInit.XAVIER).build()),"0").addLayer("2",new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(10).nOut(10).build(),"1").setOutputs("2").build();
  ComputationGraph net1=new ComputationGraph(conf1);
  net1.init();
  ComputationGraph net2=new ComputationGraph(conf2);
  net2.init();
  assertEquals(net1.params(),net2.params());
  String json=conf2.toJson();
  ComputationGraphConfiguration fromJson=ComputationGraphConfiguration.fromJson(json);
  assertEquals(conf2,fromJson);
  ComputationGraph net3=new ComputationGraph(fromJson);
  net3.init();
  INDArray input=Nd4j.rand(10,10);
  INDArray out2=net2.outputSingle(input);
  INDArray out3=net3.outputSingle(input);
  assertEquals(out2,out3);
}
