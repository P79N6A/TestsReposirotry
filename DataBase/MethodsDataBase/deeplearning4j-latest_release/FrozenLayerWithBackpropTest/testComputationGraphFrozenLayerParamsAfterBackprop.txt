@Test public void testComputationGraphFrozenLayerParamsAfterBackprop(){
  DataSet randomData=new DataSet(Nd4j.rand(100,4,12345),Nd4j.rand(100,1,12345));
  String frozenBranchName="B1-";
  String unfrozenBranchName="B2-";
  String initialLayer="initial";
  String frozenBranchUnfrozenLayer0=frozenBranchName + "0";
  String frozenBranchFrozenLayer1=frozenBranchName + "1";
  String frozenBranchFrozenLayer2=frozenBranchName + "2";
  String frozenBranchOutput=frozenBranchName + "Output";
  String unfrozenLayer0=unfrozenBranchName + "0";
  String unfrozenLayer1=unfrozenBranchName + "1";
  String unfrozenBranch2=unfrozenBranchName + "Output";
  ComputationGraphConfiguration computationGraphConf=new NeuralNetConfiguration.Builder().updater(new Sgd(2.0)).seed(12345).graphBuilder().addInputs("input").addLayer(initialLayer,new DenseLayer.Builder().nIn(4).nOut(4).build(),"input").addLayer(frozenBranchUnfrozenLayer0,new DenseLayer.Builder().nIn(4).nOut(3).build(),initialLayer).addLayer(frozenBranchFrozenLayer1,new org.deeplearning4j.nn.conf.layers.misc.FrozenLayerWithBackprop(new DenseLayer.Builder().nIn(3).nOut(4).build()),frozenBranchUnfrozenLayer0).addLayer(frozenBranchFrozenLayer2,new org.deeplearning4j.nn.conf.layers.misc.FrozenLayerWithBackprop(new DenseLayer.Builder().nIn(4).nOut(2).build()),frozenBranchFrozenLayer1).addLayer(unfrozenLayer0,new DenseLayer.Builder().nIn(4).nOut(4).build(),initialLayer).addLayer(unfrozenLayer1,new DenseLayer.Builder().nIn(4).nOut(2).build(),unfrozenLayer0).addLayer(unfrozenBranch2,new DenseLayer.Builder().nIn(2).nOut(1).build(),unfrozenLayer1).addVertex("merge",new MergeVertex(),frozenBranchFrozenLayer2,unfrozenBranch2).addLayer(frozenBranchOutput,new org.deeplearning4j.nn.conf.layers.misc.FrozenLayerWithBackprop(new OutputLayer.Builder(LossFunctions.LossFunction.MSE).nIn(3).nOut(1).build()),"merge").setOutputs(frozenBranchOutput).build();
  ComputationGraph computationGraph=new ComputationGraph(computationGraphConf);
  computationGraph.init();
  INDArray unfrozenLayerParams=computationGraph.getLayer(frozenBranchUnfrozenLayer0).params().dup();
  INDArray frozenLayerParams1=computationGraph.getLayer(frozenBranchFrozenLayer1).params().dup();
  INDArray frozenLayerParams2=computationGraph.getLayer(frozenBranchFrozenLayer2).params().dup();
  INDArray frozenOutputLayerParams=computationGraph.getLayer(frozenBranchOutput).params().dup();
  for (int i=0; i < 100; i++) {
    computationGraph.fit(randomData);
  }
  assertNotEquals(unfrozenLayerParams,computationGraph.getLayer(frozenBranchUnfrozenLayer0).params());
  assertEquals(frozenLayerParams1,computationGraph.getLayer(frozenBranchFrozenLayer1).params());
  assertEquals(frozenLayerParams2,computationGraph.getLayer(frozenBranchFrozenLayer2).params());
  assertEquals(frozenOutputLayerParams,computationGraph.getLayer(frozenBranchOutput).params());
}
