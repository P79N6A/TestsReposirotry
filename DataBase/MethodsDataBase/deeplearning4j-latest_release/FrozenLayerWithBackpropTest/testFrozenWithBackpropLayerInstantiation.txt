@Test public void testFrozenWithBackpropLayerInstantiation(){
  MultiLayerConfiguration conf1=new NeuralNetConfiguration.Builder().seed(12345).list().layer(0,new DenseLayer.Builder().nIn(10).nOut(10).activation(Activation.TANH).weightInit(WeightInit.XAVIER).build()).layer(1,new DenseLayer.Builder().nIn(10).nOut(10).activation(Activation.TANH).weightInit(WeightInit.XAVIER).build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(10).nOut(10).build()).build();
  MultiLayerConfiguration conf2=new NeuralNetConfiguration.Builder().seed(12345).list().layer(0,new org.deeplearning4j.nn.conf.layers.misc.FrozenLayerWithBackprop(new DenseLayer.Builder().nIn(10).nOut(10).activation(Activation.TANH).weightInit(WeightInit.XAVIER).build())).layer(1,new org.deeplearning4j.nn.conf.layers.misc.FrozenLayerWithBackprop(new DenseLayer.Builder().nIn(10).nOut(10).activation(Activation.TANH).weightInit(WeightInit.XAVIER).build())).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(10).nOut(10).build()).build();
  MultiLayerNetwork net1=new MultiLayerNetwork(conf1);
  net1.init();
  MultiLayerNetwork net2=new MultiLayerNetwork(conf2);
  net2.init();
  assertEquals(net1.params(),net2.params());
  String json=conf2.toJson();
  MultiLayerConfiguration fromJson=MultiLayerConfiguration.fromJson(json);
  assertEquals(conf2,fromJson);
  MultiLayerNetwork net3=new MultiLayerNetwork(fromJson);
  net3.init();
  INDArray input=Nd4j.rand(10,10);
  INDArray out2=net2.output(input);
  INDArray out3=net3.output(input);
  assertEquals(out2,out3);
}
