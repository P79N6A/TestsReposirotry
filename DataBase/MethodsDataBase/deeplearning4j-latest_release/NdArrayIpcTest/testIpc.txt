@Test public void testIpc() throws Exception {
  INDArray arr=Nd4j.scalar(1.0);
  final AtomicBoolean running=new AtomicBoolean(true);
  Aeron aeron=Aeron.connect(getContext());
  AeronNDArraySubscriber subscriber=AeronNDArraySubscriber.builder().streamId(streamId).aeron(aeron).channel(channel).running(running).ndArrayCallback(new NDArrayCallback(){
    /** 
 * A listener for ndarray message
 * @param message the message for the callback
 */
    @Override public void onNDArrayMessage(    NDArrayMessage message){
      System.out.println(arr);
      running.set(false);
    }
    @Override public void onNDArrayPartial(    INDArray arr,    long idx,    int... dimensions){
    }
    @Override public void onNDArray(    INDArray arr){
    }
  }
).build();
  Thread t=new Thread(() -> {
    try {
      subscriber.launch();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
);
  t.start();
  while (!subscriber.launched())   Thread.sleep(1000);
  Thread.sleep(10000);
  AeronNDArrayPublisher publisher=AeronNDArrayPublisher.builder().streamId(streamId).aeron(aeron).channel(channel).build();
  for (int i=0; i < 1 && running.get(); i++) {
    publisher.publish(arr);
  }
  Thread.sleep(30000);
  assertFalse(running.get());
  publisher.close();
  subscriber.close();
}
