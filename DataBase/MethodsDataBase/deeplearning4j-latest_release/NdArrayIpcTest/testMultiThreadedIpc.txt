@Test public void testMultiThreadedIpc() throws Exception {
  ExecutorService executorService=Executors.newFixedThreadPool(4);
  INDArray arr=Nd4j.scalar(1.0);
  final AtomicBoolean running=new AtomicBoolean(true);
  Aeron aeron=Aeron.connect(getContext());
  int numSubscribers=10;
  AeronNDArraySubscriber[] subscribers=new AeronNDArraySubscriber[numSubscribers];
  for (int i=0; i < numSubscribers; i++) {
    AeronNDArraySubscriber subscriber=AeronNDArraySubscriber.builder().streamId(streamId).ctx(getContext()).channel(channel).aeron(aeron).running(running).ndArrayCallback(new NDArrayCallback(){
      /** 
 * A listener for ndarray message
 * @param message the message for the callback
 */
      @Override public void onNDArrayMessage(      NDArrayMessage message){
        System.out.println("Callback invoked for subscriber on ndarray ipc test");
        running.set(false);
      }
      @Override public void onNDArrayPartial(      INDArray arr,      long idx,      int... dimensions){
      }
      @Override public void onNDArray(      INDArray arr){
        System.out.println("Callback invoked for subscriber on ndarray ipc test");
        running.set(false);
      }
    }
).build();
    Thread t=new Thread(() -> {
      try {
        subscriber.launch();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
);
    t.setDaemon(true);
    t.start();
    subscribers[i]=subscriber;
  }
  AeronNDArrayPublisher publisher=AeronNDArrayPublisher.builder().streamId(streamId).channel(channel).aeron(aeron).build();
  Thread.sleep(10000);
  for (int i=0; i < 10 && running.get(); i++) {
    executorService.execute(() -> {
      try {
        log.info("About to send array.");
        publisher.publish(arr);
        log.info("Sent array");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
);
  }
  Thread.sleep(30000);
  for (int i=0; i < numSubscribers; i++)   CloseHelper.close(subscribers[i]);
  CloseHelper.close(publisher);
  CloseHelper.close(aeron);
  assertFalse(running.get());
}
