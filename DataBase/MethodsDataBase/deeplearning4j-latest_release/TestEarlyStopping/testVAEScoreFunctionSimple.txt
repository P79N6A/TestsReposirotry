@Test public void testVAEScoreFunctionSimple() throws Exception {
  for (  RegressionEvaluation.Metric metric : new RegressionEvaluation.Metric[]{RegressionEvaluation.Metric.MSE,RegressionEvaluation.Metric.MAE}) {
    log.info("Metric: " + metric);
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().list().layer(new VariationalAutoencoder.Builder().nIn(784).nOut(32).encoderLayerSizes(64).decoderLayerSizes(64).build()).pretrain(true).backprop(false).build();
    MultiLayerNetwork net=new MultiLayerNetwork(conf);
    net.init();
    DataSetIterator iter=new MnistDataSetIterator(32,false,12345);
    List<DataSet> l=new ArrayList<>();
    for (int i=0; i < 10; i++) {
      DataSet ds=iter.next();
      l.add(new DataSet(ds.getFeatures(),ds.getFeatures()));
    }
    iter=new ExistingDataSetIterator(l);
    EarlyStoppingModelSaver<MultiLayerNetwork> saver=new InMemoryModelSaver<>();
    EarlyStoppingConfiguration<MultiLayerNetwork> esConf=new EarlyStoppingConfiguration.Builder<MultiLayerNetwork>().epochTerminationConditions(new MaxEpochsTerminationCondition(5)).iterationTerminationConditions(new MaxTimeIterationTerminationCondition(1,TimeUnit.MINUTES)).scoreCalculator(new VAEReconErrorScoreCalculator(metric,iter)).modelSaver(saver).build();
    EarlyStoppingTrainer trainer=new EarlyStoppingTrainer(esConf,net,iter);
    EarlyStoppingResult<MultiLayerNetwork> result=trainer.fit();
    assertNotNull(result.getBestModel());
    assertTrue(result.getBestModelScore() > 0.0);
  }
}
