@Test public void testAllAggregateOpsAreSerializable() throws Exception {
  Set<String> allTypes=new HashSet<>();
  allTypes.add("org.datavec.api.transform.ops.LongWritableOp");
  allTypes.add("org.datavec.api.transform.ops.IntWritableOp");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregableMean");
  allTypes.add("org.datavec.api.transform.ops.StringAggregatorImpls$AggregableStringReduce");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregableRange");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImplsTest");
  allTypes.add("org.datavec.api.transform.ops.DispatchWithConditionOp");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregableVariance");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls");
  allTypes.add("org.datavec.api.transform.ops.FloatWritableOp");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregableProd");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregableLast");
  allTypes.add("org.datavec.api.transform.ops.StringAggregatorImpls$AggregableStringPrepend");
  allTypes.add("org.datavec.api.transform.ops.ByteWritableOp");
  allTypes.add("org.datavec.api.transform.ops.AggregableMultiOpTest");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregableStdDev");
  allTypes.add("org.datavec.api.transform.ops.StringAggregatorImpls$1");
  allTypes.add("org.datavec.api.transform.ops.DispatchOp");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregableMin");
  allTypes.add("org.datavec.api.transform.ops.StringAggregatorImpls$AggregableStringAppend");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregableCount");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregableSum");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregablePopulationVariance");
  allTypes.add("org.datavec.api.transform.ops.AggregableCheckingOp");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregableMax");
  allTypes.add("org.datavec.api.transform.ops.AggregableMultiOp");
  allTypes.add("org.datavec.api.transform.ops.IAggregableReduceOp");
  allTypes.add("org.datavec.api.transform.ops.DispatchOpTest");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregableCountUnique");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregableUncorrectedStdDev");
  allTypes.add("org.datavec.api.transform.ops.StringWritableOp");
  allTypes.add("org.datavec.api.transform.ops.StringAggregatorImpls");
  allTypes.add("org.datavec.api.transform.ops.DoubleWritableOp");
  allTypes.add("org.datavec.api.transform.ops.AggregatorImpls$AggregableFirst");
  Set<String> ops=new HashSet<>();
  for (  String type : allTypes) {
    if (type.startsWith("org.datavec.api.transform.ops")) {
      if (type.endsWith("Op")) {
        ops.add(type);
      }
      if (type.contains("Aggregable") && !type.endsWith("Test")) {
        ops.add(type);
      }
    }
  }
  for (  String op : ops) {
    Class<?> cls=Class.forName(op);
    assertTrue(op + " should implement Serializable",implementsSerializable(cls));
  }
}
