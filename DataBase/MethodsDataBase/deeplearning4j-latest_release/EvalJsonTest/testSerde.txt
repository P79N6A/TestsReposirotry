@Test public void testSerde(){
  boolean print=true;
  Nd4j.getRandom().setSeed(12345);
  Evaluation evaluation=new Evaluation();
  EvaluationBinary evaluationBinary=new EvaluationBinary();
  ROC roc=new ROC(2);
  ROCBinary roc2=new ROCBinary(2);
  ROCMultiClass roc3=new ROCMultiClass(2);
  RegressionEvaluation regressionEvaluation=new RegressionEvaluation();
  EvaluationCalibration ec=new EvaluationCalibration();
  IEvaluation[] arr=new IEvaluation[]{evaluation,evaluationBinary,roc,roc2,roc3,regressionEvaluation,ec};
  INDArray evalLabel=Nd4j.create(10,3);
  for (int i=0; i < 10; i++) {
    evalLabel.putScalar(i,i % 3,1.0);
  }
  INDArray evalProb=Nd4j.rand(10,3);
  evalProb.diviColumnVector(evalProb.sum(1));
  evaluation.eval(evalLabel,evalProb);
  roc3.eval(evalLabel,evalProb);
  ec.eval(evalLabel,evalProb);
  evalLabel=Nd4j.getExecutioner().exec(new BernoulliDistribution(Nd4j.createUninitialized(10,3),0.5));
  evalProb=Nd4j.rand(10,3);
  evaluationBinary.eval(evalLabel,evalProb);
  roc2.eval(evalLabel,evalProb);
  evalLabel=Nd4j.getExecutioner().exec(new BernoulliDistribution(Nd4j.createUninitialized(10,1),0.5));
  evalProb=Nd4j.rand(10,1);
  roc.eval(evalLabel,evalProb);
  regressionEvaluation.eval(Nd4j.rand(10,3),Nd4j.rand(10,3));
  for (  IEvaluation e : arr) {
    String json=e.toJson();
    if (print) {
      System.out.println(e.getClass() + "\n" + json+ "\n\n");
    }
    IEvaluation fromJson=(IEvaluation)BaseEvaluation.fromJson(json,BaseEvaluation.class);
    assertEquals(e.toJson(),fromJson.toJson());
  }
}
