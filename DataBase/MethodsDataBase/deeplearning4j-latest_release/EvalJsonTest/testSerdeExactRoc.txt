@Test public void testSerdeExactRoc(){
  Nd4j.getRandom().setSeed(12345);
  boolean print=true;
  ROC roc=new ROC(0);
  ROCBinary roc2=new ROCBinary(0);
  ROCMultiClass roc3=new ROCMultiClass(0);
  IEvaluation[] arr=new IEvaluation[]{roc,roc2,roc3};
  INDArray evalLabel=Nd4j.create(100,3);
  for (int i=0; i < 100; i++) {
    evalLabel.putScalar(i,i % 3,1.0);
  }
  INDArray evalProb=Nd4j.rand(100,3);
  evalProb.diviColumnVector(evalProb.sum(1));
  roc3.eval(evalLabel,evalProb);
  evalLabel=Nd4j.getExecutioner().exec(new BernoulliDistribution(Nd4j.createUninitialized(100,3),0.5));
  evalProb=Nd4j.rand(100,3);
  roc2.eval(evalLabel,evalProb);
  evalLabel=Nd4j.getExecutioner().exec(new BernoulliDistribution(Nd4j.createUninitialized(100,1),0.5));
  evalProb=Nd4j.rand(100,1);
  roc.eval(evalLabel,evalProb);
  for (  IEvaluation e : arr) {
    System.out.println(e.getClass());
    String json=e.toJson();
    String stats=e.stats();
    if (print) {
      System.out.println(json + "\n\n");
    }
    IEvaluation fromJson=BaseEvaluation.fromJson(json,BaseEvaluation.class);
    assertEquals(e,fromJson);
    if (fromJson instanceof ROC) {
      assertNull(((ROC)fromJson).getProbAndLabel());
      assertTrue(((ROC)fromJson).calculateAUC() > 0.0);
      assertTrue(((ROC)fromJson).calculateAUCPR() > 0.0);
      assertEquals(((ROC)e).getRocCurve(),((ROC)fromJson).getRocCurve());
      assertEquals(((ROC)e).getPrecisionRecallCurve(),((ROC)fromJson).getPrecisionRecallCurve());
    }
 else     if (e instanceof ROCBinary) {
      org.nd4j.evaluation.classification.ROC[] rocs=((ROCBinary)fromJson).getUnderlying();
      org.nd4j.evaluation.classification.ROC[] origRocs=((ROCBinary)e).getUnderlying();
      for (int i=0; i < origRocs.length; i++) {
        org.nd4j.evaluation.classification.ROC r=rocs[i];
        org.nd4j.evaluation.classification.ROC origR=origRocs[i];
        assertNull(r.getProbAndLabel());
        assertEquals(origR.calculateAUC(),origR.calculateAUC(),1e-6);
        assertEquals(origR.calculateAUCPR(),origR.calculateAUCPR(),1e-6);
        assertEquals(origR.getRocCurve(),origR.getRocCurve());
        assertEquals(origR.getPrecisionRecallCurve(),origR.getPrecisionRecallCurve());
      }
    }
 else     if (e instanceof ROCMultiClass) {
      org.nd4j.evaluation.classification.ROC[] rocs=((ROCMultiClass)fromJson).getUnderlying();
      org.nd4j.evaluation.classification.ROC[] origRocs=((ROCMultiClass)e).getUnderlying();
      for (int i=0; i < origRocs.length; i++) {
        org.nd4j.evaluation.classification.ROC r=rocs[i];
        org.nd4j.evaluation.classification.ROC origR=origRocs[i];
        assertNull(r.getProbAndLabel());
        assertEquals(origR.calculateAUC(),origR.calculateAUC(),1e-6);
        assertEquals(origR.calculateAUCPR(),origR.calculateAUCPR(),1e-6);
        assertEquals(origR.getRocCurve(),origR.getRocCurve());
        assertEquals(origR.getPrecisionRecallCurve(),origR.getPrecisionRecallCurve());
      }
    }
  }
}
