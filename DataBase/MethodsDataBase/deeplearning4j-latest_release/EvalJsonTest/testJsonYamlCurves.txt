@Test public void testJsonYamlCurves(){
  ROC roc=new ROC(0);
  INDArray evalLabel=Nd4j.getExecutioner().exec(new BernoulliDistribution(Nd4j.createUninitialized(100,1),0.5));
  INDArray evalProb=Nd4j.rand(100,1);
  roc.eval(evalLabel,evalProb);
  RocCurve c=roc.getRocCurve();
  PrecisionRecallCurve prc=roc.getPrecisionRecallCurve();
  String json1=c.toJson();
  String json2=prc.toJson();
  RocCurve c2=RocCurve.fromJson(json1);
  PrecisionRecallCurve prc2=PrecisionRecallCurve.fromJson(json2);
  assertEquals(c,c2);
  assertEquals(prc,prc2);
  EvaluationCalibration ec=new EvaluationCalibration();
  evalLabel=Nd4j.create(10,3);
  for (int i=0; i < 10; i++) {
    evalLabel.putScalar(i,i % 3,1.0);
  }
  evalProb=Nd4j.rand(10,3);
  evalProb.diviColumnVector(evalProb.sum(1));
  ec.eval(evalLabel,evalProb);
  Histogram[] histograms=new Histogram[]{ec.getResidualPlotAllClasses(),ec.getResidualPlot(0),ec.getResidualPlot(1),ec.getProbabilityHistogramAllClasses(),ec.getProbabilityHistogram(0),ec.getProbabilityHistogram(1)};
  for (  Histogram h : histograms) {
    String json=h.toJson();
    String yaml=h.toYaml();
    Histogram h2=Histogram.fromJson(json);
    Histogram h3=Histogram.fromYaml(yaml);
    assertEquals(h,h2);
    assertEquals(h2,h3);
  }
}
