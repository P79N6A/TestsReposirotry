@Test public void testMultiWrite() throws Exception {
  val recordsPair=records();
  Path p=Files.createTempFile("arrowwritetest",".arrow");
  FileUtils.write(p.toFile(),recordsPair.getFirst());
  p.toFile().deleteOnExit();
  int numReaders=2;
  RecordReader[] readers=new RecordReader[numReaders];
  InputSplit[] splits=new InputSplit[numReaders];
  for (int i=0; i < readers.length; i++) {
    FileSplit split=new FileSplit(p.toFile());
    ArrowRecordReader arrowRecordReader=new ArrowRecordReader();
    readers[i]=arrowRecordReader;
    splits[i]=split;
  }
  ArrowRecordWriter arrowRecordWriter=new ArrowRecordWriter(recordsPair.getMiddle());
  FileSplit split=new FileSplit(p.toFile());
  arrowRecordWriter.initialize(split,new NumberOfRecordsPartitioner());
  arrowRecordWriter.writeBatch(recordsPair.getRight());
  CSVRecordWriter csvRecordWriter=new CSVRecordWriter();
  Path p2=Files.createTempFile("arrowwritetest",".csv");
  FileUtils.write(p2.toFile(),recordsPair.getFirst());
  p.toFile().deleteOnExit();
  FileSplit outputCsv=new FileSplit(p2.toFile());
  RecordMapper mapper=RecordMapper.builder().batchSize(10).inputUrl(split).outputUrl(outputCsv).partitioner(new NumberOfRecordsPartitioner()).readersToConcat(readers).splitPerReader(splits).recordWriter(csvRecordWriter).build();
  mapper.copy();
}
