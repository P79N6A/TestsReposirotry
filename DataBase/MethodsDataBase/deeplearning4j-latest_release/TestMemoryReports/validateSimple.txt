@Test public void validateSimple(){
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().list().layer(0,new DenseLayer.Builder().nIn(10).nOut(20).build()).layer(1,new DenseLayer.Builder().nIn(20).nOut(27).build()).build();
  MemoryReport mr=conf.getMemoryReport(InputType.feedForward(10));
  int numParams=(10 * 20 + 20) + (20 * 27 + 27);
  int actSize=20 + 27;
  int total15Minibatch=numParams + 15 * actSize;
  long fixedBytes=mr.getTotalMemoryBytes(0,MemoryUseMode.INFERENCE,CacheMode.NONE,DataBuffer.Type.FLOAT);
  long varBytes=mr.getTotalMemoryBytes(1,MemoryUseMode.INFERENCE,CacheMode.NONE,DataBuffer.Type.FLOAT) - fixedBytes;
  assertEquals(numParams * 4,fixedBytes);
  assertEquals(actSize * 4,varBytes);
  long minibatch15=mr.getTotalMemoryBytes(15,MemoryUseMode.INFERENCE,CacheMode.NONE,DataBuffer.Type.FLOAT);
  assertEquals(total15Minibatch * 4,minibatch15);
  assertEquals(actSize * 4,mr.getMemoryBytes(MemoryType.ACTIVATIONS,1,MemoryUseMode.TRAINING,CacheMode.NONE,DataBuffer.Type.FLOAT));
  assertEquals(actSize * 4,mr.getMemoryBytes(MemoryType.ACTIVATIONS,1,MemoryUseMode.INFERENCE,CacheMode.NONE,DataBuffer.Type.FLOAT));
  int inputActSize=10 + 20;
  assertEquals(inputActSize * 4,mr.getMemoryBytes(MemoryType.ACTIVATION_GRADIENTS,1,MemoryUseMode.TRAINING,CacheMode.NONE,DataBuffer.Type.FLOAT));
  assertEquals(0,mr.getMemoryBytes(MemoryType.ACTIVATION_GRADIENTS,1,MemoryUseMode.INFERENCE,CacheMode.NONE,DataBuffer.Type.FLOAT));
  int workingMemVariable=27;
  assertEquals(workingMemVariable * 4,mr.getMemoryBytes(MemoryType.WORKING_MEMORY_VARIABLE,1,MemoryUseMode.TRAINING,CacheMode.NONE,DataBuffer.Type.FLOAT));
  assertEquals(0,mr.getMemoryBytes(MemoryType.WORKING_MEMORY_VARIABLE,1,MemoryUseMode.INFERENCE,CacheMode.NONE,DataBuffer.Type.FLOAT));
}
