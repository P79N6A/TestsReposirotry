@Test public void testBatchedSkipGram1() throws Exception {
  INDArray syn0=Nd4j.create(10,10).assign(0.01f);
  INDArray syn1=Nd4j.create(10,10).assign(0.02f);
  INDArray syn1Neg=Nd4j.ones(10,10).assign(0.03f);
  INDArray expTable=Nd4j.create(10000).assign(0.5f);
  double lr=0.001;
  int idxSyn0_1=0;
  int idxSyn0_2=3;
  INDArray expSyn0=Nd4j.create(10).assign(0.01f);
  INDArray expSyn1_1=Nd4j.create(10).assign(0.020005);
  INDArray expSyn1_2=Nd4j.create(10).assign(0.019995f);
  INDArray syn0row_1=syn0.getRow(idxSyn0_1);
  INDArray syn0row_2=syn0.getRow(idxSyn0_2);
  AggregateSkipGram op1=new AggregateSkipGram(syn0,syn1,syn1Neg,expTable,null,idxSyn0_1,new int[]{1,2},new int[]{0,1},0,0,10,lr,1L,10);
  AggregateSkipGram op2=new AggregateSkipGram(syn0,syn1,syn1Neg,expTable,null,idxSyn0_2,new int[]{4,5},new int[]{0,1},0,0,10,lr,1L,10);
  List<Aggregate> batch=new ArrayList<>();
  batch.add(op1);
  batch.add(op2);
  Nd4j.getExecutioner().exec(batch);
  assertEquals(expSyn0,syn0row_1);
  assertEquals(expSyn0,syn0row_2);
  assertEquals(expSyn1_1,syn1.getRow(1));
  assertEquals(expSyn1_1,syn1.getRow(4));
  assertEquals(expSyn1_2,syn1.getRow(2));
  assertEquals(expSyn1_2,syn1.getRow(5));
}
