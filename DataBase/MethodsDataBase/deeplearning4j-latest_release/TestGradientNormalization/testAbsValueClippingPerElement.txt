@Test public void testAbsValueClippingPerElement(){
  Nd4j.getRandom().setSeed(12345);
  double threshold=3;
  NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().layer(new DenseLayer.Builder().nIn(10).nOut(20).updater(new NoOp()).gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue).gradientNormalizationThreshold(threshold).build()).build();
  long numParams=conf.getLayer().initializer().numParams(conf);
  INDArray params=Nd4j.create(1,numParams);
  Layer layer=conf.getLayer().instantiate(conf,null,0,params,true);
  INDArray gradArray=Nd4j.rand(1,220).muli(10).subi(5);
  layer.setBackpropGradientsViewArray(gradArray);
  INDArray weightGrad=Shape.newShapeNoCopy(gradArray.get(NDArrayIndex.point(0),NDArrayIndex.interval(0,200)),new int[]{10,20},true);
  INDArray biasGrad=gradArray.get(NDArrayIndex.point(0),NDArrayIndex.interval(200,220));
  INDArray weightGradCopy=weightGrad.dup();
  INDArray biasGradCopy=biasGrad.dup();
  Gradient gradient=new DefaultGradient(gradArray);
  gradient.setGradientFor(DefaultParamInitializer.WEIGHT_KEY,weightGrad);
  gradient.setGradientFor(DefaultParamInitializer.BIAS_KEY,biasGrad);
  Updater updater=UpdaterCreator.getUpdater(layer);
  updater.update(layer,gradient,0,0,1,LayerWorkspaceMgr.noWorkspaces());
  assertNotEquals(weightGradCopy,weightGrad);
  assertNotEquals(biasGradCopy,biasGrad);
  INDArray expectedWeightGrad=weightGradCopy.dup();
  for (int i=0; i < expectedWeightGrad.length(); i++) {
    double d=expectedWeightGrad.getDouble(i);
    if (d > threshold)     expectedWeightGrad.putScalar(i,threshold);
 else     if (d < -threshold)     expectedWeightGrad.putScalar(i,-threshold);
  }
  INDArray expectedBiasGrad=biasGradCopy.dup();
  for (int i=0; i < expectedBiasGrad.length(); i++) {
    double d=expectedBiasGrad.getDouble(i);
    if (d > threshold)     expectedBiasGrad.putScalar(i,threshold);
 else     if (d < -threshold)     expectedBiasGrad.putScalar(i,-threshold);
  }
  assertEquals(expectedWeightGrad,gradient.getGradientFor(DefaultParamInitializer.WEIGHT_KEY));
  assertEquals(expectedBiasGrad,gradient.getGradientFor(DefaultParamInitializer.BIAS_KEY));
}
