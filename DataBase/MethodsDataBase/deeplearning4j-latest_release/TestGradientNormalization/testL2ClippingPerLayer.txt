@Test public void testL2ClippingPerLayer(){
  Nd4j.getRandom().setSeed(12345);
  double threshold=3;
  for (int t=0; t < 2; t++) {
    NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().layer(new DenseLayer.Builder().nIn(10).nOut(20).updater(new NoOp()).gradientNormalization(GradientNormalization.ClipL2PerLayer).gradientNormalizationThreshold(threshold).build()).build();
    val numParams=conf.getLayer().initializer().numParams(conf);
    INDArray params=Nd4j.create(1,numParams);
    Layer layer=conf.getLayer().instantiate(conf,null,0,params,true);
    INDArray gradArray=Nd4j.rand(1,220).muli(t == 0 ? 0.05 : 10).subi(t == 0 ? 0 : 5);
    layer.setBackpropGradientsViewArray(gradArray);
    INDArray weightGrad=Shape.newShapeNoCopy(gradArray.get(NDArrayIndex.point(0),NDArrayIndex.interval(0,200)),new int[]{10,20},true);
    INDArray biasGrad=gradArray.get(NDArrayIndex.point(0),NDArrayIndex.interval(200,220));
    INDArray weightGradCopy=weightGrad.dup();
    INDArray biasGradCopy=biasGrad.dup();
    Gradient gradient=new DefaultGradient(gradArray);
    gradient.setGradientFor(DefaultParamInitializer.WEIGHT_KEY,weightGrad);
    gradient.setGradientFor(DefaultParamInitializer.BIAS_KEY,biasGrad);
    double layerGradL2=gradient.gradient().norm2Number().doubleValue();
    if (t == 0)     assertTrue(layerGradL2 < threshold);
 else     assertTrue(layerGradL2 > threshold);
    Updater updater=UpdaterCreator.getUpdater(layer);
    updater.update(layer,gradient,0,0,1,LayerWorkspaceMgr.noWorkspaces());
    if (t == 0) {
      assertEquals(weightGradCopy,weightGrad);
      assertEquals(biasGradCopy,biasGrad);
      continue;
    }
 else {
      assertNotEquals(weightGradCopy,weightGrad);
      assertNotEquals(biasGradCopy,biasGrad);
    }
    double scalingFactor=threshold / layerGradL2;
    INDArray expectedWeightGrad=weightGradCopy.mul(scalingFactor);
    INDArray expectedBiasGrad=biasGradCopy.mul(scalingFactor);
    assertEquals(expectedWeightGrad,gradient.getGradientFor(DefaultParamInitializer.WEIGHT_KEY));
    assertEquals(expectedBiasGrad,gradient.getGradientFor(DefaultParamInitializer.BIAS_KEY));
  }
}
