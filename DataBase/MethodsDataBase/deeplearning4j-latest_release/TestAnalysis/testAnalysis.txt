@Test public void testAnalysis() throws Exception {
  Schema schema=new Schema.Builder().addColumnInteger("intCol").addColumnDouble("doubleCol").addColumnTime("timeCol",DateTimeZone.UTC).addColumnCategorical("catCol","A","B").addColumnNDArray("ndarray",new long[]{1,10}).build();
  List<List<Writable>> data=new ArrayList<>();
  data.add(Arrays.asList((Writable)new IntWritable(0),new DoubleWritable(1.0),new LongWritable(1000),new Text("A"),new NDArrayWritable(Nd4j.valueArrayOf(10,100.0))));
  data.add(Arrays.asList((Writable)new IntWritable(5),new DoubleWritable(0.0),new LongWritable(2000),new Text("A"),new NDArrayWritable(Nd4j.valueArrayOf(10,200.0))));
  data.add(Arrays.asList((Writable)new IntWritable(3),new DoubleWritable(10.0),new LongWritable(3000),new Text("A"),new NDArrayWritable(Nd4j.valueArrayOf(10,300.0))));
  data.add(Arrays.asList((Writable)new IntWritable(-1),new DoubleWritable(-1.0),new LongWritable(20000),new Text("B"),new NDArrayWritable(Nd4j.valueArrayOf(10,400.0))));
  JavaRDD<List<Writable>> rdd=sc.parallelize(data);
  DataAnalysis da=AnalyzeSpark.analyze(schema,rdd);
  String daString=da.toString();
  System.out.println(da);
  List<ColumnAnalysis> ca=da.getColumnAnalysis();
  assertEquals(5,ca.size());
  assertTrue(ca.get(0) instanceof IntegerAnalysis);
  assertTrue(ca.get(1) instanceof DoubleAnalysis);
  assertTrue(ca.get(2) instanceof TimeAnalysis);
  assertTrue(ca.get(3) instanceof CategoricalAnalysis);
  assertTrue(ca.get(4) instanceof NDArrayAnalysis);
  IntegerAnalysis ia=(IntegerAnalysis)ca.get(0);
  assertEquals(-1,ia.getMin());
  assertEquals(5,ia.getMax());
  assertEquals(4,ia.getCountTotal());
  TDigest itd=ia.getDigest();
  assertEquals(-0.5,itd.quantile(0.25),1e-9);
  assertEquals(1.5,itd.quantile(0.5),1e-9);
  assertEquals(4.0,itd.quantile(0.75),1e-9);
  assertEquals(5.0,itd.quantile(1),1e-9);
  DoubleAnalysis dba=(DoubleAnalysis)ca.get(1);
  assertEquals(-1.0,dba.getMin(),0.0);
  assertEquals(10.0,dba.getMax(),0.0);
  assertEquals(4,dba.getCountTotal());
  TDigest dtd=dba.getDigest();
  assertEquals(-0.5,dtd.quantile(0.25),1e-9);
  assertEquals(0.5,dtd.quantile(0.5),1e-9);
  assertEquals(5.5,dtd.quantile(0.75),1e-9);
  assertEquals(10.0,dtd.quantile(1),1e-9);
  TimeAnalysis ta=(TimeAnalysis)ca.get(2);
  assertEquals(1000,ta.getMin());
  assertEquals(20000,ta.getMax());
  assertEquals(4,ta.getCountTotal());
  TDigest ttd=ta.getDigest();
  assertEquals(1500.0,ttd.quantile(0.25),1e-9);
  assertEquals(2500.0,ttd.quantile(0.5),1e-9);
  assertEquals(11500.0,ttd.quantile(0.75),1e-9);
  assertEquals(20000.0,ttd.quantile(1),1e-9);
  CategoricalAnalysis cata=(CategoricalAnalysis)ca.get(3);
  Map<String,Long> map=cata.getMapOfCounts();
  assertEquals(2,map.keySet().size());
  assertEquals(3L,(long)map.get("A"));
  assertEquals(1L,(long)map.get("B"));
  NDArrayAnalysis na=(NDArrayAnalysis)ca.get(4);
  assertEquals(4,na.getCountTotal());
  assertEquals(0,na.getCountNull());
  assertEquals(10,na.getMinLength());
  assertEquals(10,na.getMaxLength());
  assertEquals(4 * 10,na.getTotalNDArrayValues());
  assertEquals(Collections.singletonMap(2,4L),na.getCountsByRank());
  assertEquals(100.0,na.getMinValue(),0.0);
  assertEquals(400.0,na.getMaxValue(),0.0);
  assertNotNull(ia.getHistogramBuckets());
  assertNotNull(ia.getHistogramBucketCounts());
  assertNotNull(dba.getHistogramBuckets());
  assertNotNull(dba.getHistogramBucketCounts());
  assertNotNull(ta.getHistogramBuckets());
  assertNotNull(ta.getHistogramBucketCounts());
  assertNotNull(na.getHistogramBuckets());
  assertNotNull(na.getHistogramBucketCounts());
  double[] bucketsD=dba.getHistogramBuckets();
  long[] countD=dba.getHistogramBucketCounts();
  assertEquals(-1.0,bucketsD[0],0.0);
  assertEquals(10.0,bucketsD[bucketsD.length - 1],0.0);
  assertEquals(1,countD[0]);
  assertEquals(1,countD[countD.length - 1]);
  File f=Files.createTempFile("datavec_spark_analysis_UITest",".html").toFile();
  System.out.println(f.getAbsolutePath());
  f.deleteOnExit();
  HtmlAnalysis.createHtmlAnalysisFile(da,f);
}
