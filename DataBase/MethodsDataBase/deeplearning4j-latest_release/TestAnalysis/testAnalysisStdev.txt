@Test public void testAnalysisStdev(){
  Random r=new Random(12345);
  List<Double> l1=new ArrayList<>();
  List<Integer> l2=new ArrayList<>();
  List<Long> l3=new ArrayList<>();
  int n=10000;
  for (int i=0; i < n; i++) {
    l1.add(10 * r.nextDouble());
    l2.add(-1000 + r.nextInt(2000));
    l3.add(-1000L + r.nextInt(2000));
  }
  List<Double> l2d=new ArrayList<>();
  for (  Integer i : l2)   l2d.add(i.doubleValue());
  List<Double> l3d=new ArrayList<>();
  for (  Long l : l3)   l3d.add(l.doubleValue());
  StatCounter sc1=sc.parallelizeDoubles(l1).stats();
  StatCounter sc2=sc.parallelizeDoubles(l2d).stats();
  StatCounter sc3=sc.parallelizeDoubles(l3d).stats();
  org.datavec.api.transform.analysis.counter.StatCounter sc1new=new org.datavec.api.transform.analysis.counter.StatCounter();
  for (  double d : l1) {
    sc1new.add(d);
  }
  assertEquals(sc1.sampleStdev(),sc1new.getStddev(false),1e-6);
  List<StatCounter> sparkCounters=new ArrayList<>();
  List<org.datavec.api.transform.analysis.counter.StatCounter> counters=new ArrayList<>();
  for (int i=0; i < 10; i++) {
    counters.add(new org.datavec.api.transform.analysis.counter.StatCounter());
    sparkCounters.add(new StatCounter());
  }
  for (int i=0; i < l1.size(); i++) {
    int idx=i % 10;
    counters.get(idx).add(l1.get(i));
    sparkCounters.get(idx).merge(l1.get(i));
  }
  org.datavec.api.transform.analysis.counter.StatCounter counter=counters.get(0);
  StatCounter sparkCounter=sparkCounters.get(0);
  for (int i=1; i < 10; i++) {
    counter.merge(counters.get(i));
    sparkCounter.merge(sparkCounters.get(i));
    System.out.println();
  }
  assertEquals(sc1.sampleStdev(),counter.getStddev(false),1e-6);
  assertEquals(sparkCounter.sampleStdev(),counter.getStddev(false),1e-6);
  List<List<Writable>> data=new ArrayList<>();
  for (int i=0; i < n; i++) {
    List<Writable> l=new ArrayList<>();
    l.add(new DoubleWritable(l1.get(i)));
    l.add(new IntWritable(l2.get(i)));
    l.add(new LongWritable(l3.get(i)));
    data.add(l);
  }
  Schema schema=new Schema.Builder().addColumnDouble("d").addColumnInteger("i").addColumnLong("l").build();
  JavaRDD<List<Writable>> rdd=sc.parallelize(data);
  DataAnalysis da=AnalyzeSpark.analyze(schema,rdd);
  double stdev1=sc1.sampleStdev();
  double stdev1a=((DoubleAnalysis)da.getColumnAnalysis("d")).getSampleStdev();
  double re1=Math.abs(stdev1 - stdev1a) / (Math.abs(stdev1) + Math.abs(stdev1a));
  assertTrue(re1 < 1e-6);
  double stdev2=sc2.sampleStdev();
  double stdev2a=((IntegerAnalysis)da.getColumnAnalysis("i")).getSampleStdev();
  double re2=Math.abs(stdev2 - stdev2a) / (Math.abs(stdev2) + Math.abs(stdev2a));
  assertTrue(re2 < 1e-6);
  double stdev3=sc3.sampleStdev();
  double stdev3a=((LongAnalysis)da.getColumnAnalysis("l")).getSampleStdev();
  double re3=Math.abs(stdev3 - stdev3a) / (Math.abs(stdev3) + Math.abs(stdev3a));
  assertTrue(re3 < 1e-6);
}
