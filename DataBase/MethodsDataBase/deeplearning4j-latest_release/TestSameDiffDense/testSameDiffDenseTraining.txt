@Test public void testSameDiffDenseTraining(){
  Nd4j.getRandom().setSeed(12345);
  int nIn=4;
  int nOut=3;
  boolean workspaces=true;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).trainingWorkspaceMode(workspaces ? WorkspaceMode.ENABLED : WorkspaceMode.NONE).inferenceWorkspaceMode(workspaces ? WorkspaceMode.ENABLED : WorkspaceMode.NONE).updater(new Adam(0.1)).list().layer(new SameDiffDense.Builder().nIn(nIn).nOut(5).activation(Activation.TANH).build()).layer(new SameDiffDense.Builder().nIn(5).nOut(5).activation(Activation.TANH).build()).layer(new OutputLayer.Builder().nIn(5).nOut(nOut).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build()).build();
  MultiLayerNetwork netSD=new MultiLayerNetwork(conf);
  netSD.init();
  MultiLayerConfiguration conf2=new NeuralNetConfiguration.Builder().seed(12345).updater(new Adam(0.1)).list().layer(new DenseLayer.Builder().activation(Activation.TANH).nIn(nIn).nOut(5).build()).layer(new DenseLayer.Builder().activation(Activation.TANH).nIn(5).nOut(5).build()).layer(new OutputLayer.Builder().nIn(5).nOut(nOut).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build()).build();
  MultiLayerNetwork netStandard=new MultiLayerNetwork(conf2);
  netStandard.init();
  netSD.params().assign(netStandard.params());
  assertEquals(netStandard.params(),netSD.params());
  assertEquals(netStandard.paramTable(),netSD.paramTable());
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet ds=iter.next();
  INDArray outSD=netSD.output(ds.getFeatures());
  INDArray outStd=netStandard.output(ds.getFeatures());
  assertEquals(outStd,outSD);
  for (int i=0; i < 3; i++) {
    netSD.fit(ds);
    netStandard.fit(ds);
    String s=String.valueOf(i);
    assertEquals(s,netStandard.getFlattenedGradients(),netSD.getFlattenedGradients());
    assertEquals(s,netStandard.params(),netSD.params());
    assertEquals(s,netStandard.getUpdater().getStateViewArray(),netSD.getUpdater().getStateViewArray());
  }
}
