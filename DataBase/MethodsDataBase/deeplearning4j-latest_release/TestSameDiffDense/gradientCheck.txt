@Test public void gradientCheck(){
  int nIn=4;
  int nOut=4;
  for (  boolean workspaces : new boolean[]{false,true}) {
    for (    Activation a : new Activation[]{Activation.TANH,Activation.IDENTITY}) {
      String msg="workspaces: " + workspaces + ", "+ a;
      Nd4j.getRandom().setSeed(12345);
      MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).updater(new NoOp()).trainingWorkspaceMode(workspaces ? WorkspaceMode.ENABLED : WorkspaceMode.NONE).inferenceWorkspaceMode(workspaces ? WorkspaceMode.ENABLED : WorkspaceMode.NONE).list().layer(new SameDiffDense.Builder().nIn(nIn).nOut(nOut).activation(a).build()).layer(new SameDiffDense.Builder().nIn(nOut).nOut(nOut).activation(a).build()).layer(new OutputLayer.Builder().nIn(nOut).nOut(nOut).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build()).build();
      MultiLayerNetwork net=new MultiLayerNetwork(conf);
      net.init();
      INDArray f=Nd4j.rand(3,nIn);
      INDArray l=TestUtils.randomOneHot(3,nOut);
      log.info("Starting: " + msg);
      boolean gradOK=GradientCheckUtil.checkGradients(net,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,f,l);
      assertTrue(msg,gradOK);
      TestUtils.testModelSerialization(net);
    }
  }
}
