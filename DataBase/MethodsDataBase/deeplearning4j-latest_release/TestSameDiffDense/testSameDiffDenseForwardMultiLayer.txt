@Test public void testSameDiffDenseForwardMultiLayer(){
  assumeTrue("CPU".equalsIgnoreCase(Nd4j.getExecutioner().getEnvironmentInformation().getProperty("backend")));
  for (  int minibatch : new int[]{5,1}) {
    int nIn=3;
    int nOut=4;
    Activation[] afns=new Activation[]{Activation.TANH,Activation.SIGMOID,Activation.ELU,Activation.IDENTITY,Activation.SOFTPLUS,Activation.SOFTSIGN,Activation.CUBE,Activation.HARDTANH,Activation.RELU};
    for (    Activation a : afns) {
      log.info("Starting test - " + a);
      MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).list().layer(new SameDiffDense.Builder().nIn(nIn).nOut(nOut).weightInit(WeightInit.XAVIER).activation(a).build()).layer(new SameDiffDense.Builder().nIn(nOut).nOut(nOut).weightInit(WeightInit.XAVIER).activation(a).build()).layer(new OutputLayer.Builder().nIn(nOut).nOut(nOut).weightInit(WeightInit.XAVIER).activation(a).build()).validateOutputLayerConfig(false).build();
      MultiLayerNetwork net=new MultiLayerNetwork(conf);
      net.init();
      assertNotNull(net.paramTable());
      MultiLayerConfiguration conf2=new NeuralNetConfiguration.Builder().seed(12345).weightInit(WeightInit.XAVIER).list().layer(new DenseLayer.Builder().activation(a).nIn(nIn).nOut(nOut).build()).layer(new DenseLayer.Builder().activation(a).nIn(nOut).nOut(nOut).build()).layer(new OutputLayer.Builder().nIn(nOut).nOut(nOut).activation(a).build()).validateOutputLayerConfig(false).build();
      MultiLayerNetwork net2=new MultiLayerNetwork(conf2);
      net2.init();
      assertEquals(net2.params(),net.params());
      assertEquals(net2.params(),net.params());
      Map<String,INDArray> params1=net.paramTable();
      Map<String,INDArray> params2=net2.paramTable();
      assertEquals(params2,params1);
      INDArray in=Nd4j.rand(minibatch,nIn);
      INDArray out=net.output(in);
      INDArray outExp=net2.output(in);
      assertEquals(outExp,out);
      MultiLayerNetwork netLoaded=TestUtils.testModelSerialization(net);
      INDArray outLoaded=netLoaded.output(in);
      assertEquals(outExp,outLoaded);
      in=Nd4j.rand(2 * minibatch,nIn);
      out=net.output(in);
      outExp=net2.output(in);
      assertEquals(outExp,out);
    }
  }
}
