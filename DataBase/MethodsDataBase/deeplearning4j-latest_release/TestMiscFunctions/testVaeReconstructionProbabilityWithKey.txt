@Test public void testVaeReconstructionProbabilityWithKey(){
  int nIn=10;
  MultiLayerConfiguration mlc=new NeuralNetConfiguration.Builder().list().layer(0,new org.deeplearning4j.nn.conf.layers.variational.VariationalAutoencoder.Builder().reconstructionDistribution(new GaussianReconstructionDistribution(Activation.IDENTITY)).nIn(nIn).nOut(5).encoderLayerSizes(12).decoderLayerSizes(13).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(mlc);
  net.init();
  List<Tuple2<Integer,INDArray>> toScore=new ArrayList<>();
  for (int i=0; i < 100; i++) {
    INDArray arr=Nd4j.rand(1,nIn);
    toScore.add(new Tuple2<Integer,INDArray>(i,arr));
  }
  JavaPairRDD<Integer,INDArray> rdd=sc.parallelizePairs(toScore);
  JavaPairRDD<Integer,Double> reconstr=rdd.mapPartitionsToPair(new VaeReconstructionProbWithKeyFunction<Integer>(sc.broadcast(net.params()),sc.broadcast(mlc.toJson()),true,16,128));
  Map<Integer,Double> l=reconstr.collectAsMap();
  assertEquals(100,l.size());
  for (int i=0; i < 100; i++) {
    assertTrue(l.containsKey(i));
    assertTrue(l.get(i) < 0.0);
  }
}
