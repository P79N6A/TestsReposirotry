@Test public void testFeedForwardWithKey(){
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().weightInit(WeightInit.XAVIER).list().layer(0,new DenseLayer.Builder().nIn(4).nOut(3).build()).layer(1,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(3).nOut(3).activation(Activation.SOFTMAX).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  DataSetIterator iter=new IrisDataSetIterator(150,150);
  DataSet ds=iter.next();
  List<INDArray> expected=new ArrayList<>();
  List<Tuple2<Integer,INDArray>> mapFeatures=new ArrayList<>();
  int count=0;
  int arrayCount=0;
  Random r=new Random(12345);
  while (count < 150) {
    int exampleCount=r.nextInt(5) + 1;
    if (count + exampleCount > 150)     exampleCount=150 - count;
    INDArray subset=ds.getFeatures().get(NDArrayIndex.interval(count,count + exampleCount),NDArrayIndex.all());
    expected.add(net.output(subset,false));
    mapFeatures.add(new Tuple2<>(arrayCount,subset));
    arrayCount++;
    count+=exampleCount;
  }
  JavaPairRDD<Integer,INDArray> rdd=sc.parallelizePairs(mapFeatures);
  SparkDl4jMultiLayer multiLayer=new SparkDl4jMultiLayer(sc,net,null);
  Map<Integer,INDArray> map=multiLayer.feedForwardWithKey(rdd,16).collectAsMap();
  for (int i=0; i < expected.size(); i++) {
    INDArray exp=expected.get(i);
    INDArray act=map.get(i);
    assertEquals(exp,act);
  }
}
