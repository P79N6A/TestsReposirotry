@Test public void testVaeAsMLP(){
  Activation[] activFns={Activation.IDENTITY,Activation.TANH,Activation.IDENTITY,Activation.TANH,Activation.IDENTITY,Activation.TANH};
  LossFunction[] lossFunctions={LossFunction.MCXENT,LossFunction.MCXENT,LossFunction.MSE,LossFunction.MSE,LossFunction.MCXENT,LossFunction.MSE};
  Activation[] outputActivations={Activation.SOFTMAX,Activation.SOFTMAX,Activation.TANH,Activation.TANH,Activation.SOFTMAX,Activation.TANH};
  double[] l2vals={0.4,0.0,0.4,0.4,0.0,0.0};
  double[] l1vals={0.0,0.0,0.5,0.0,0.0,0.5};
  double[] biasL2={0.0,0.0,0.0,0.2,0.0,0.4};
  double[] biasL1={0.0,0.0,0.6,0.0,0.0,0.0};
  int[][] encoderLayerSizes=new int[][]{{5},{5},{5,6},{5,6},{5},{5,6}};
  int[][] decoderLayerSizes=new int[][]{{6},{7,8},{6},{7,8},{6},{7,8}};
  int[] minibatches=new int[]{1,5,4,3,1,4};
  Nd4j.getRandom().setSeed(12345);
  for (int i=0; i < activFns.length; i++) {
    LossFunction lf=lossFunctions[i];
    Activation outputActivation=outputActivations[i];
    double l2=l2vals[i];
    double l1=l1vals[i];
    int[] encoderSizes=encoderLayerSizes[i];
    int[] decoderSizes=decoderLayerSizes[i];
    int minibatch=minibatches[i];
    INDArray input=Nd4j.rand(minibatch,4);
    INDArray labels=Nd4j.create(minibatch,3);
    for (int j=0; j < minibatch; j++) {
      labels.putScalar(j,j % 3,1.0);
    }
    Activation afn=activFns[i];
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().l2(l2).l1(l1).updater(new NoOp()).l2Bias(biasL2[i]).l1Bias(biasL1[i]).updater(new NoOp()).seed(12345L).list().layer(0,new VariationalAutoencoder.Builder().nIn(4).nOut(3).encoderLayerSizes(encoderSizes).decoderLayerSizes(decoderSizes).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).activation(afn).build()).layer(1,new OutputLayer.Builder(lf).activation(outputActivation).nIn(3).nOut(3).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).build()).build();
    MultiLayerNetwork mln=new MultiLayerNetwork(conf);
    mln.init();
    String msg="testVaeAsMLP() - activationFn=" + afn + ", lossFn="+ lf+ ", outputActivation="+ outputActivation+ ", encLayerSizes = "+ Arrays.toString(encoderSizes)+ ", decLayerSizes = "+ Arrays.toString(decoderSizes)+ ", l2="+ l2+ ", l1="+ l1;
    if (PRINT_RESULTS) {
      System.out.println(msg);
      for (int j=0; j < mln.getnLayers(); j++)       System.out.println("Layer " + j + " # params: "+ mln.getLayer(j).numParams());
    }
    boolean gradOK=GradientCheckUtil.checkGradients(mln,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels);
    assertTrue(msg,gradOK);
    TestUtils.testModelSerialization(mln);
  }
}
