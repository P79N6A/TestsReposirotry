@Test public void testGravesBidirectionalLSTMForwardPassHelper() throws Exception {
  Nd4j.getRandom().setSeed(12345);
  final int nIn=10;
  final int layerSize=15;
  final int miniBatchSize=4;
  final int timeSeriesLength=7;
  final NeuralNetConfiguration conf=new NeuralNetConfiguration.Builder().layer(new org.deeplearning4j.nn.conf.layers.GravesBidirectionalLSTM.Builder().nIn(nIn).nOut(layerSize).weightInit(WeightInit.DISTRIBUTION).dist(new UniformDistribution(0,1)).activation(Activation.TANH).build()).build();
  long numParams=conf.getLayer().initializer().numParams(conf);
  INDArray params=Nd4j.create(1,numParams);
  final GravesBidirectionalLSTM lstm=(GravesBidirectionalLSTM)conf.getLayer().instantiate(conf,null,0,params,true);
  final INDArray input=Nd4j.rand(new int[]{miniBatchSize,nIn,timeSeriesLength});
  lstm.setInput(input,LayerWorkspaceMgr.noWorkspaces());
  final INDArray fwdPassFalse=LSTMHelpers.activateHelper(lstm,lstm.conf(),new ActivationSigmoid(),lstm.input(),lstm.getParam(GravesBidirectionalLSTMParamInitializer.RECURRENT_WEIGHT_KEY_FORWARDS),lstm.getParam(GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_FORWARDS),lstm.getParam(GravesBidirectionalLSTMParamInitializer.BIAS_KEY_FORWARDS),false,null,null,false,true,GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_FORWARDS,null,true,null,CacheMode.NONE,LayerWorkspaceMgr.noWorkspaces()).fwdPassOutput;
  final INDArray[] fwdPassTrue=LSTMHelpers.activateHelper(lstm,lstm.conf(),new ActivationSigmoid(),lstm.input(),lstm.getParam(GravesBidirectionalLSTMParamInitializer.RECURRENT_WEIGHT_KEY_FORWARDS),lstm.getParam(GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_FORWARDS),lstm.getParam(GravesBidirectionalLSTMParamInitializer.BIAS_KEY_FORWARDS),false,null,null,true,true,GravesBidirectionalLSTMParamInitializer.INPUT_WEIGHT_KEY_FORWARDS,null,true,null,CacheMode.NONE,LayerWorkspaceMgr.noWorkspaces()).fwdPassOutputAsArrays;
  for (int i=0; i < timeSeriesLength; i++) {
    final INDArray sliceFalse=fwdPassFalse.tensorAlongDimension(i,1,0);
    final INDArray sliceTrue=fwdPassTrue[i];
    assertTrue(sliceFalse.equals(sliceTrue));
  }
}
