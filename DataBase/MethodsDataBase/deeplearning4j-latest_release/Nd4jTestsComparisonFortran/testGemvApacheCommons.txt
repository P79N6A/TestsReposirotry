@Test public void testGemvApacheCommons(){
  int[] rowsArr=new int[]{4,4,4,8,8,8};
  int[] colsArr=new int[]{2,1,10,2,1,10};
  for (int x=0; x < rowsArr.length; x++) {
    int rows=rowsArr[x];
    int cols=colsArr[x];
    List<Pair<INDArray,String>> matrices=NDArrayCreationUtil.getAllTestMatricesWithShape(rows,cols,12345);
    List<Pair<INDArray,String>> vectors=NDArrayCreationUtil.getAllTestMatricesWithShape(cols,1,12345);
    for (int i=0; i < matrices.size(); i++) {
      for (int j=0; j < vectors.size(); j++) {
        Pair<INDArray,String> p1=matrices.get(i);
        Pair<INDArray,String> p2=vectors.get(j);
        String errorMsg=getTestWithOpsErrorMsg(i,j,"mmul",p1,p2);
        INDArray m=p1.getFirst();
        INDArray v=p2.getFirst();
        RealMatrix rm=new BlockRealMatrix((int)m.rows(),(int)m.columns());
        for (int r=0; r < m.rows(); r++) {
          for (int c=0; c < m.columns(); c++) {
            double d=m.getDouble(r,c);
            rm.setEntry(r,c,d);
          }
        }
        RealMatrix rv=new BlockRealMatrix(cols,1);
        for (int r=0; r < v.rows(); r++) {
          double d=v.getDouble(r,0);
          rv.setEntry(r,0,d);
        }
        INDArray gemv=m.mmul(v);
        RealMatrix gemv2=rm.multiply(rv);
        assertArrayEquals(new int[]{rows,1},gemv.shape());
        assertArrayEquals(new int[]{rows,1},new int[]{gemv2.getRowDimension(),gemv2.getColumnDimension()});
        for (int r=0; r < rows; r++) {
          double exp=gemv2.getEntry(r,0);
          double act=gemv.getDouble(r,0);
          assertEquals(errorMsg,exp,act,1e-5);
        }
      }
    }
  }
}
