@Test public void testSerializationConfigurations(){
  SerializerInstance si=sc.env().serializer().newInstance();
  Map<Integer,Double> m=new HashMap<>();
  m.put(0,0.5);
  m.put(10,0.1);
  MultiLayerConfiguration mlc=new NeuralNetConfiguration.Builder().updater(new Nadam(new MapSchedule(ScheduleType.ITERATION,m))).list().layer(0,new OutputLayer.Builder().nIn(10).nOut(10).build()).build();
  testSerialization(mlc,si);
  ComputationGraphConfiguration cgc=new NeuralNetConfiguration.Builder().weightInit(WeightInit.DISTRIBUTION).dist(new UniformDistribution(-1,1)).updater(new Adam(new MapSchedule(ScheduleType.ITERATION,m))).graphBuilder().addInputs("in").addLayer("out",new OutputLayer.Builder().nIn(10).nOut(10).build(),"in").setOutputs("out").build();
  testSerialization(cgc,si);
  Layer[] layers=new Layer[]{new OutputLayer.Builder().nIn(10).nOut(10).build(),new RnnOutputLayer.Builder().nIn(10).nOut(10).build(),new LossLayer.Builder().build(),new CenterLossOutputLayer.Builder().nIn(10).nOut(10).build(),new DenseLayer.Builder().nIn(10).nOut(10).build(),new ConvolutionLayer.Builder().nIn(10).nOut(10).build(),new SubsamplingLayer.Builder().build(),new Convolution1DLayer.Builder(2,2).nIn(10).nOut(10).build(),new ActivationLayer.Builder().activation(Activation.TANH).build(),new GlobalPoolingLayer.Builder().build(),new GravesLSTM.Builder().nIn(10).nOut(10).build(),new LSTM.Builder().nIn(10).nOut(10).build(),new DropoutLayer.Builder(0.5).build(),new BatchNormalization.Builder().build(),new LocalResponseNormalization.Builder().build()};
  for (  Layer l : layers) {
    testSerialization(l,si);
  }
  GraphVertex[] vertices=new GraphVertex[]{new ElementWiseVertex(ElementWiseVertex.Op.Add),new L2NormalizeVertex(),new LayerVertex(null,null),new MergeVertex(),new PoolHelperVertex(),new PreprocessorVertex(new CnnToFeedForwardPreProcessor(28,28,1)),new ReshapeVertex(new int[]{1,1}),new ScaleVertex(1.0),new ShiftVertex(1.0),new SubsetVertex(1,1),new UnstackVertex(0,2),new DuplicateToTimeSeriesVertex("in1"),new LastTimeStepVertex("in1")};
  for (  GraphVertex gv : vertices) {
    testSerialization(gv,si);
  }
}
