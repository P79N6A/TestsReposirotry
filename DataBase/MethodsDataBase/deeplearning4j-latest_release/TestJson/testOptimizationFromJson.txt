@Test public void testOptimizationFromJson(){
  EarlyStoppingConfiguration<ComputationGraph> esConf=new EarlyStoppingConfiguration.Builder<ComputationGraph>().epochTerminationConditions(new MaxEpochsTerminationCondition(100)).scoreCalculator(new DataSetLossCalculatorCG(new IrisDataSetIterator(150,150),true)).modelSaver(new InMemoryModelSaver<ComputationGraph>()).build();
  ComputationGraphSpace cgs=new ComputationGraphSpace.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new AdaMaxSpace(new ContinuousParameterSpace(0.0001,0.1))).l2(new ContinuousParameterSpace(0.0001,0.01)).addInputs("in").setInputTypes(InputType.feedForward(4)).addLayer("first",new DenseLayerSpace.Builder().nIn(4).nOut(new IntegerParameterSpace(2,10)).activation(new DiscreteParameterSpace<>(Activation.RELU,Activation.TANH)).build(),"in").addLayer("out",new OutputLayerSpace.Builder().nOut(3).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build(),"first").setOutputs("out").earlyStoppingConfiguration(esConf).pretrain(false).backprop(true).build();
  Map<String,Object> commands=new HashMap<>();
  commands.put(DataSetIteratorFactoryProvider.FACTORY_KEY,TestDataFactoryProviderMnist.class.getCanonicalName());
  CandidateGenerator candidateGenerator=new RandomSearchGenerator(cgs,commands);
  DataProvider dataProvider=new DataSetIteratorFactoryProvider();
  OptimizationConfiguration configuration=new OptimizationConfiguration.Builder().candidateGenerator(candidateGenerator).dataProvider(dataProvider).scoreFunction(new TestSetLossScoreFunction()).terminationConditions(new MaxTimeCondition(2,TimeUnit.MINUTES),new MaxCandidatesCondition(100)).build();
  String json=configuration.toJson();
  OptimizationConfiguration loadConf=OptimizationConfiguration.fromJson(json);
  assertEquals(configuration,loadConf);
}
