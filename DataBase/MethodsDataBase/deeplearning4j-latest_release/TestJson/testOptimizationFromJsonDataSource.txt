@Test public void testOptimizationFromJsonDataSource(){
  for (  boolean withProperties : new boolean[]{false,true}) {
    ComputationGraphSpace cgs=new ComputationGraphSpace.Builder().optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new AdaMaxSpace(new ContinuousParameterSpace(0.0001,0.1))).l2(new ContinuousParameterSpace(0.0001,0.01)).addInputs("in").setInputTypes(InputType.feedForward(4)).addLayer("first",new DenseLayerSpace.Builder().nIn(4).nOut(new IntegerParameterSpace(2,10)).activation(new DiscreteParameterSpace<>(Activation.RELU,Activation.TANH)).build(),"in").addLayer("out",new OutputLayerSpace.Builder().nOut(3).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build(),"first").setOutputs("out").pretrain(false).backprop(true).build();
    Map<String,Object> commands=new HashMap<>();
    commands.put(DataSetIteratorFactoryProvider.FACTORY_KEY,TestDataFactoryProviderMnist.class.getCanonicalName());
    CandidateGenerator candidateGenerator=new RandomSearchGenerator(cgs,commands);
    Properties p=new Properties();
    p.setProperty("minibatch","16");
    OptimizationConfiguration configuration=new OptimizationConfiguration.Builder().candidateGenerator(candidateGenerator).dataSource(MnistDataSource.class,(withProperties ? p : null)).scoreFunction(new TestSetLossScoreFunction()).terminationConditions(new MaxTimeCondition(2,TimeUnit.MINUTES),new MaxCandidatesCondition(100)).build();
    String json=configuration.toJson();
    OptimizationConfiguration loadConf=OptimizationConfiguration.fromJson(json);
    assertEquals(configuration,loadConf);
    assertNotNull(loadConf.getDataSource());
    if (withProperties) {
      assertNotNull(loadConf.getDataSourceProperties());
    }
  }
}
