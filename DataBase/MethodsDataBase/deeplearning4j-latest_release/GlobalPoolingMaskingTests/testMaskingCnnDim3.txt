@Test public void testMaskingCnnDim3(){
  int minibatch=3;
  int depthIn=3;
  int depthOut=4;
  int nOut=5;
  int height=3;
  int width=6;
  PoolingType[] poolingTypes=new PoolingType[]{PoolingType.SUM,PoolingType.AVG,PoolingType.MAX,PoolingType.PNORM};
  for (  PoolingType pt : poolingTypes) {
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().weightInit(WeightInit.XAVIER).convolutionMode(ConvolutionMode.Same).seed(12345L).list().layer(0,new ConvolutionLayer.Builder().nIn(depthIn).nOut(depthOut).kernelSize(height,2).stride(height,1).activation(Activation.TANH).build()).layer(1,new org.deeplearning4j.nn.conf.layers.GlobalPoolingLayer.Builder().poolingType(pt).build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(depthOut).nOut(nOut).build()).build();
    MultiLayerNetwork net=new MultiLayerNetwork(conf);
    net.init();
    INDArray inToBeMasked=Nd4j.rand(new int[]{minibatch,depthIn,height,width});
    INDArray maskArray=Nd4j.create(new double[][]{{1,1,1,1,1,1},{1,1,1,1,1,0},{1,1,1,1,0,0}}).reshape('c',minibatch,1,1,width);
    Nd4j.getExecutioner().exec(new BroadcastMulOp(inToBeMasked,maskArray,inToBeMasked,0,3));
    net.setLayerMaskArrays(maskArray,null);
    INDArray outMasked=net.output(inToBeMasked);
    net.clearLayerMaskArrays();
    for (int i=0; i < minibatch; i++) {
      int numSteps=width - i;
      INDArray subset=inToBeMasked.get(NDArrayIndex.interval(i,i,true),NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(0,numSteps));
      assertArrayEquals(new long[]{1,depthIn,height,width - i},subset.shape());
      INDArray outSubset=net.output(subset);
      INDArray outMaskedSubset=outMasked.getRow(i);
      assertEquals("minibatch: " + i,outSubset,outMaskedSubset);
    }
  }
}
