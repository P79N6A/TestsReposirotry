@Test public void testMaskingCnnDim23(){
  int minibatch=2;
  int depthIn=2;
  int depthOut=4;
  int nOut=5;
  int height=5;
  int width=4;
  PoolingType[] poolingTypes=new PoolingType[]{PoolingType.SUM,PoolingType.AVG,PoolingType.MAX,PoolingType.PNORM};
  for (  PoolingType pt : poolingTypes) {
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().weightInit(WeightInit.XAVIER).convolutionMode(ConvolutionMode.Same).seed(12345L).list().layer(0,new ConvolutionLayer.Builder().nIn(depthIn).nOut(depthOut).kernelSize(2,2).stride(1,1).activation(Activation.TANH).build()).layer(1,new org.deeplearning4j.nn.conf.layers.GlobalPoolingLayer.Builder().poolingType(pt).build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(depthOut).nOut(nOut).build()).build();
    MultiLayerNetwork net=new MultiLayerNetwork(conf);
    net.init();
    INDArray inToBeMasked=Nd4j.rand(new int[]{minibatch,depthIn,height,width});
    inToBeMasked.get(point(1),NDArrayIndex.all(),NDArrayIndex.interval(3,height),NDArrayIndex.all()).assign(0);
    inToBeMasked.get(point(1),NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(2,width)).assign(0);
    INDArray maskArray=Nd4j.create(minibatch,1,height,width);
    maskArray.get(point(0),all(),all(),all()).assign(1);
    maskArray.get(point(1),all(),interval(0,3),interval(0,2)).assign(1);
    net.setLayerMaskArrays(maskArray,null);
    INDArray outMasked=net.output(inToBeMasked);
    net.clearLayerMaskArrays();
    net.setLayerMaskArrays(maskArray,null);
    for (int i=0; i < minibatch; i++) {
      INDArray subset;
      if (i == 0) {
        subset=inToBeMasked.get(interval(i,i,true),all(),all(),all());
      }
 else {
        subset=inToBeMasked.get(interval(i,i,true),all(),interval(0,3),interval(0,2));
      }
      net.clear();
      net.clearLayerMaskArrays();
      INDArray outSubset=net.output(subset);
      INDArray outMaskedSubset=outMasked.getRow(i);
      assertEquals("minibatch: " + i + ", "+ pt,outSubset,outMaskedSubset);
    }
  }
}
