@Test public void testBruteForce(){
  int nSamples=500;
  int x=4, y=2, z=3;
  INDArray featureX=Nd4j.linspace(1,nSamples,nSamples).reshape(nSamples,1);
  INDArray featureY=featureX.mul(y);
  INDArray featureZ=featureX.mul(z);
  featureX.muli(x);
  INDArray featureSet=Nd4j.concat(1,featureX,featureY,featureZ);
  INDArray labelSet=Nd4j.zeros(nSamples,1);
  DataSet sampleDataSet=new DataSet(featureSet,labelSet);
  INDArray theoreticalMin=Nd4j.create(new double[]{x,y,z});
  INDArray theoreticalMax=Nd4j.create(new double[]{nSamples * x,nSamples * y,nSamples * z});
  INDArray theoreticalRange=theoreticalMax.sub(theoreticalMin);
  NormalizerMinMaxScaler myNormalizer=new NormalizerMinMaxScaler();
  myNormalizer.fit(sampleDataSet);
  INDArray minDataSet=myNormalizer.getMin();
  INDArray maxDataSet=myNormalizer.getMax();
  INDArray minDiff=minDataSet.sub(theoreticalMin).max(1);
  INDArray maxDiff=maxDataSet.sub(theoreticalMax).max(1);
  assertEquals(minDiff.getDouble(0,0),0.0,0.000000001);
  assertEquals(maxDiff.max(1).getDouble(0,0),0.0,0.000000001);
  int bSize=1;
  DataSetIterator sampleIter=new TestDataSetIterator(sampleDataSet,bSize);
  myNormalizer.fit(sampleIter);
  minDataSet=myNormalizer.getMin();
  maxDataSet=myNormalizer.getMax();
  assertEquals(minDataSet.sub(theoreticalMin).max(1).getDouble(0,0),0.0,0.000000001);
  assertEquals(maxDataSet.sub(theoreticalMax).max(1).getDouble(0,0),0.0,0.000000001);
  sampleIter.setPreProcessor(myNormalizer);
  INDArray actual, expected, delta;
  int i=1;
  while (sampleIter.hasNext()) {
    expected=theoreticalMin.mul(i - 1).div(theoreticalRange);
    actual=sampleIter.next().getFeatures();
    delta=Transforms.abs(actual.sub(expected));
    assertTrue(delta.max(1).getDouble(0,0) < 0.0001);
    i++;
  }
}
