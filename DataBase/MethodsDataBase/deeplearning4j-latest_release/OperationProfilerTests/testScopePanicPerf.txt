@Test public void testScopePanicPerf(){
  try (MemoryWorkspace workspace=Nd4j.getWorkspaceManager().getAndActivateWorkspace("WS121")){
    INDArray x=Nd4j.create(1000,1000).assign(1.0);
    INDArray y=Nd4j.create(1000,1000).assign(1.0);
    for (int e=0; e < 10000; e++) {
      x.addi(y);
    }
    Nd4j.getExecutioner().setProfilingMode(OpExecutioner.ProfilingMode.SCOPE_PANIC);
    val nanosC=System.nanoTime();
    for (int e=0; e < 10000; e++) {
      x.addi(y);
    }
    val nanosD=System.nanoTime();
    val avgB=(nanosD - nanosC) / 10000;
    Nd4j.getExecutioner().setProfilingMode(OpExecutioner.ProfilingMode.DISABLED);
    val nanosA=System.nanoTime();
    for (int e=0; e < 10000; e++) {
      x.addi(y);
    }
    val nanosB=System.nanoTime();
    val avgA=(nanosB - nanosA) / 10000;
    log.info("A: {}; B: {}",avgA,avgB);
  }
 }
