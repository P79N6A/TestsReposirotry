@Test public void testBruteForce3d(){
  NormalizerStandardize myNormalizer=new NormalizerStandardize();
  NormalizerMinMaxScaler myMinMaxScaler=new NormalizerMinMaxScaler();
  int timeSteps=15;
  int samples=100;
  INDArray featureScaleA=Nd4j.create(new double[]{1,-2,3}).reshape(3,1);
  INDArray featureScaleB=Nd4j.create(new double[]{2,2,3}).reshape(3,1);
  Construct3dDataSet caseA=new Construct3dDataSet(featureScaleA,timeSteps,samples,1);
  Construct3dDataSet caseB=new Construct3dDataSet(featureScaleB,timeSteps,samples,1);
  myNormalizer.fit(caseA.sampleDataSet);
  assertEquals(caseA.expectedMean,myNormalizer.getMean());
  assertTrue(Transforms.abs(myNormalizer.getStd().div(caseA.expectedStd).sub(1)).maxNumber().floatValue() < 0.01);
  myMinMaxScaler.fit(caseB.sampleDataSet);
  assertEquals(caseB.expectedMin,myMinMaxScaler.getMin());
  assertEquals(caseB.expectedMax,myMinMaxScaler.getMax());
  DataSetIterator sampleIterA=new TestDataSetIterator(caseA.sampleDataSet,5);
  DataSetIterator sampleIterB=new TestDataSetIterator(caseB.sampleDataSet,5);
  myNormalizer.fit(sampleIterA);
  assertEquals(myNormalizer.getMean(),caseA.expectedMean);
  assertTrue(Transforms.abs(myNormalizer.getStd().div(caseA.expectedStd).sub(1)).maxNumber().floatValue() < 0.01);
  myMinMaxScaler.fit(sampleIterB);
  assertEquals(myMinMaxScaler.getMin(),caseB.expectedMin);
  assertEquals(myMinMaxScaler.getMax(),caseB.expectedMax);
}
