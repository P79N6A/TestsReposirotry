@Test public void testBruteForce3dMaskLabels(){
  NormalizerStandardize myNormalizer=new NormalizerStandardize();
  myNormalizer.fitLabel(true);
  NormalizerMinMaxScaler myMinMaxScaler=new NormalizerMinMaxScaler();
  myMinMaxScaler.fitLabel(true);
  int samples=100;
  INDArray featureScale=Nd4j.create(new float[]{1,2,10}).reshape(3,1);
  int timeStepsU=5;
  Construct3dDataSet sampleU=new Construct3dDataSet(featureScale,timeStepsU,samples,1);
  int timeStepsV=3;
  Construct3dDataSet sampleV=new Construct3dDataSet(featureScale,timeStepsV,samples,sampleU.newOrigin);
  List<DataSet> dataSetList=new ArrayList<DataSet>();
  dataSetList.add(sampleU.sampleDataSet);
  dataSetList.add(sampleV.sampleDataSet);
  DataSet fullDataSetA=DataSet.merge(dataSetList);
  DataSet fullDataSetAA=fullDataSetA.copy();
  Construct3dDataSet fullDataSetNoMask=new Construct3dDataSet(featureScale,timeStepsU + timeStepsV,samples,1);
  myNormalizer.fit(fullDataSetA);
  assertEquals(myNormalizer.getMean(),fullDataSetNoMask.expectedMean);
  assertEquals(myNormalizer.getStd(),fullDataSetNoMask.expectedStd);
  assertEquals(myNormalizer.getLabelMean(),fullDataSetNoMask.expectedMean);
  assertEquals(myNormalizer.getLabelStd(),fullDataSetNoMask.expectedStd);
  myMinMaxScaler.fit(fullDataSetAA);
  assertEquals(myMinMaxScaler.getMin(),fullDataSetNoMask.expectedMin);
  assertEquals(myMinMaxScaler.getMax(),fullDataSetNoMask.expectedMax);
  assertEquals(myMinMaxScaler.getLabelMin(),fullDataSetNoMask.expectedMin);
  assertEquals(myMinMaxScaler.getLabelMax(),fullDataSetNoMask.expectedMax);
  DataSetIterator sampleIterA=new TestDataSetIterator(fullDataSetA,5);
  DataSetIterator sampleIterB=new TestDataSetIterator(fullDataSetAA,5);
  myNormalizer.fit(sampleIterA);
  assertEquals(myNormalizer.getMean(),fullDataSetNoMask.expectedMean);
  assertEquals(myNormalizer.getLabelMean(),fullDataSetNoMask.expectedMean);
  assertTrue(Transforms.abs(myNormalizer.getStd().div(fullDataSetNoMask.expectedStd).sub(1)).maxNumber().floatValue() < 0.01);
  assertTrue(Transforms.abs(myNormalizer.getLabelStd().div(fullDataSetNoMask.expectedStd).sub(1)).maxNumber().floatValue() < 0.01);
  myMinMaxScaler.fit(sampleIterB);
  assertEquals(myMinMaxScaler.getMin(),fullDataSetNoMask.expectedMin);
  assertEquals(myMinMaxScaler.getMax(),fullDataSetNoMask.expectedMax);
  assertEquals(myMinMaxScaler.getLabelMin(),fullDataSetNoMask.expectedMin);
  assertEquals(myMinMaxScaler.getLabelMax(),fullDataSetNoMask.expectedMax);
}
