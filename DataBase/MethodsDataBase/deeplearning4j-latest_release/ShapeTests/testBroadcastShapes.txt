@Test public void testBroadcastShapes(){
  List<Triple<long[],long[],long[]>> testCases=new ArrayList<>();
  testCases.add(new Triple<>(new long[]{3,1},new long[]{1,4},new long[]{3,4}));
  testCases.add(new Triple<>(new long[]{3,1},new long[]{3,4},new long[]{3,4}));
  testCases.add(new Triple<>(new long[]{3,4},new long[]{1,4},new long[]{3,4}));
  testCases.add(new Triple<>(new long[]{3,4,1},new long[]{1,1,5},new long[]{3,4,5}));
  testCases.add(new Triple<>(new long[]{3,4,1},new long[]{3,1,5},new long[]{3,4,5}));
  testCases.add(new Triple<>(new long[]{3,1,5},new long[]{1,4,1},new long[]{3,4,5}));
  testCases.add(new Triple<>(new long[]{3,1,5},new long[]{1,4,5},new long[]{3,4,5}));
  testCases.add(new Triple<>(new long[]{3,1,5},new long[]{3,4,5},new long[]{3,4,5}));
  testCases.add(new Triple<>(new long[]{3,1,1,1},new long[]{1,4,5,6},new long[]{3,4,5,6}));
  testCases.add(new Triple<>(new long[]{1,1,1,6},new long[]{3,4,5,6},new long[]{3,4,5,6}));
  testCases.add(new Triple<>(new long[]{1,4,5,1},new long[]{3,1,1,6},new long[]{3,4,5,6}));
  testCases.add(new Triple<>(new long[]{1,6},new long[]{3,4,5,1},new long[]{3,4,5,6}));
  for (  Triple<long[],long[],long[]> t : testCases) {
    val x=t.getFirst();
    val y=t.getSecond();
    val exp=t.getThird();
    val act=Shape.broadcastOutputShape(x,y);
    assertArrayEquals(exp,act);
  }
}
