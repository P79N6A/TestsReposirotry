@Test public void testCnn1DWithZeroPadding1D(){
  Nd4j.getRandom().setSeed(1337);
  int[] minibatchSizes={1,3};
  int length=7;
  int convNIn=2;
  int convNOut1=3;
  int convNOut2=4;
  int finalNOut=4;
  int[] kernels={1,2,4};
  int stride=1;
  int pnorm=2;
  int padding=0;
  int zeroPadding=2;
  int paddedLength=length + 2 * zeroPadding;
  Activation[] activations={Activation.SIGMOID};
  SubsamplingLayer.PoolingType[] poolingTypes=new SubsamplingLayer.PoolingType[]{SubsamplingLayer.PoolingType.MAX,SubsamplingLayer.PoolingType.AVG,SubsamplingLayer.PoolingType.PNORM};
  for (  Activation afn : activations) {
    for (    SubsamplingLayer.PoolingType poolingType : poolingTypes) {
      for (      int minibatchSize : minibatchSizes) {
        for (        int kernel : kernels) {
          INDArray input=Nd4j.rand(new int[]{minibatchSize,convNIn,length});
          INDArray labels=Nd4j.zeros(minibatchSize,finalNOut,paddedLength);
          for (int i=0; i < minibatchSize; i++) {
            for (int j=0; j < paddedLength; j++) {
              labels.putScalar(new int[]{i,i % finalNOut,j},1.0);
            }
          }
          MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().updater(new NoOp()).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).convolutionMode(ConvolutionMode.Same).list().layer(new Convolution1DLayer.Builder().activation(afn).kernelSize(kernel).stride(stride).padding(padding).nIn(convNIn).nOut(convNOut1).build()).layer(new ZeroPadding1DLayer.Builder(zeroPadding).build()).layer(new Convolution1DLayer.Builder().activation(afn).kernelSize(kernel).stride(stride).padding(padding).nIn(convNOut1).nOut(convNOut2).build()).layer(new ZeroPadding1DLayer.Builder(0).build()).layer(new Subsampling1DLayer.Builder(poolingType).kernelSize(kernel).stride(stride).padding(padding).pnorm(pnorm).build()).layer(new RnnOutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nOut(finalNOut).build()).setInputType(InputType.recurrent(convNIn,length)).build();
          String json=conf.toJson();
          MultiLayerConfiguration c2=MultiLayerConfiguration.fromJson(json);
          assertEquals(conf,c2);
          MultiLayerNetwork net=new MultiLayerNetwork(conf);
          net.init();
          String msg="PoolingType=" + poolingType + ", minibatch="+ minibatchSize+ ", activationFn="+ afn+ ", kernel = "+ kernel;
          if (PRINT_RESULTS) {
            System.out.println(msg);
            for (int j=0; j < net.getnLayers(); j++)             System.out.println("Layer " + j + " # params: "+ net.getLayer(j).numParams());
          }
          boolean gradOK=GradientCheckUtil.checkGradients(net,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels);
          assertTrue(msg,gradOK);
          TestUtils.testModelSerialization(net);
        }
      }
    }
  }
}
