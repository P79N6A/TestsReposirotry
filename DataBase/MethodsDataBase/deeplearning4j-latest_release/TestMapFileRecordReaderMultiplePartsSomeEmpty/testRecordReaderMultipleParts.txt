@Test public void testRecordReaderMultipleParts() throws Exception {
  RecordReader rr=new MapFileRecordReader();
  URI uri=mapFilePath.toUri();
  InputSplit is=new FileSplit(new File(uri));
  rr.initialize(is);
  Field f=MapFileRecordReader.class.getDeclaredField("indexToKey");
  f.setAccessible(true);
  IndexToKey itk=(IndexToKey)f.get(rr);
  assertEquals(recordMap.size(),itk.getNumRecords());
  List<Pair<Long,Long>> expReaderExampleIdxs=new ArrayList<>();
  expReaderExampleIdxs.add(new Pair<>(0L,2L));
  expReaderExampleIdxs.add(new Pair<>(-1L,-1L));
  expReaderExampleIdxs.add(new Pair<>(3L,5L));
  f=LongIndexToKey.class.getDeclaredField("readerIndices");
  f.setAccessible(true);
  assertEquals(expReaderExampleIdxs,f.get(itk));
  assertTrue(rr.hasNext());
  int count=0;
  while (rr.hasNext()) {
    List<org.datavec.api.writable.Writable> l=rr.next();
    assertEquals(recordMap.get(new LongWritable(count)).getRecord(),l);
    count++;
  }
  assertEquals(recordMap.size(),count);
  rr.close();
  rr=new MapFileRecordReader(new Random(12345));
  rr.initialize(is);
  f=MapFileRecordReader.class.getDeclaredField("order");
  f.setAccessible(true);
  int[] order=(int[])f.get(rr);
  assertNotNull(order);
  int[] expOrder=new int[recordMap.size()];
  for (int i=0; i < expOrder.length; i++) {
    expOrder[i]=i;
  }
  MathUtils.shuffleArray(expOrder,new Random(12345));
  assertArrayEquals(expOrder,order);
  count=0;
  while (rr.hasNext()) {
    List<org.datavec.api.writable.Writable> l=rr.next();
    assertEquals(recordMap.get(new LongWritable(expOrder[count])).getRecord(),l);
    count++;
  }
}
