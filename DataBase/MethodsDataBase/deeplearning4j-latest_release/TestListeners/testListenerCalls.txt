@Test public void testListenerCalls(){
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().list().layer(new OutputLayer.Builder().nIn(4).nOut(3).activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  TestListener tl=new TestListener();
  net.setListeners(tl);
  DataSetIterator irisIter=new IrisDataSetIterator(50,150);
  net.fit(irisIter,2);
  List<Triple<Call,Integer,Integer>> exp=new ArrayList<>();
  exp.add(new Triple<>(Call.EPOCH_START,0,0));
  exp.add(new Triple<>(Call.ON_FWD,0,0));
  exp.add(new Triple<>(Call.ON_BWD,0,0));
  exp.add(new Triple<>(Call.ON_GRAD,0,0));
  exp.add(new Triple<>(Call.ITER_DONE,0,0));
  exp.add(new Triple<>(Call.ON_FWD,1,0));
  exp.add(new Triple<>(Call.ON_BWD,1,0));
  exp.add(new Triple<>(Call.ON_GRAD,1,0));
  exp.add(new Triple<>(Call.ITER_DONE,1,0));
  exp.add(new Triple<>(Call.ON_FWD,2,0));
  exp.add(new Triple<>(Call.ON_BWD,2,0));
  exp.add(new Triple<>(Call.ON_GRAD,2,0));
  exp.add(new Triple<>(Call.ITER_DONE,2,0));
  exp.add(new Triple<>(Call.EPOCH_END,3,0));
  exp.add(new Triple<>(Call.EPOCH_START,3,1));
  exp.add(new Triple<>(Call.ON_FWD,3,1));
  exp.add(new Triple<>(Call.ON_BWD,3,1));
  exp.add(new Triple<>(Call.ON_GRAD,3,1));
  exp.add(new Triple<>(Call.ITER_DONE,3,1));
  exp.add(new Triple<>(Call.ON_FWD,4,1));
  exp.add(new Triple<>(Call.ON_BWD,4,1));
  exp.add(new Triple<>(Call.ON_GRAD,4,1));
  exp.add(new Triple<>(Call.ITER_DONE,4,1));
  exp.add(new Triple<>(Call.ON_FWD,5,1));
  exp.add(new Triple<>(Call.ON_BWD,5,1));
  exp.add(new Triple<>(Call.ON_GRAD,5,1));
  exp.add(new Triple<>(Call.ITER_DONE,5,1));
  exp.add(new Triple<>(Call.EPOCH_END,6,1));
  assertEquals(exp,tl.getCalls());
  tl=new TestListener();
  ComputationGraph cg=net.toComputationGraph();
  cg.setListeners(tl);
  cg.fit(irisIter,2);
  assertEquals(exp,tl.getCalls());
}
