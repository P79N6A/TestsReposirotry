@Test public void testStatsCollection(){
  JavaSparkContext sc=getContext();
  int nExecutors=numExecutors();
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(123).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).list().layer(0,new DenseLayer.Builder().nIn(4).nOut(100).weightInit(WeightInit.XAVIER).activation(Activation.RELU).build()).layer(1,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(100).nOut(3).activation(Activation.SOFTMAX).weightInit(WeightInit.XAVIER).build()).build();
  MultiLayerNetwork network=new MultiLayerNetwork(conf);
  network.init();
  TrainingMaster tm=new ParameterAveragingTrainingMaster.Builder(1).batchSizePerWorker(5).averagingFrequency(6).build();
  SparkDl4jMultiLayer net=new SparkDl4jMultiLayer(sc,conf,tm);
  StatsStorage ss=new MapDBStatsStorage();
  net.setListeners(ss,Collections.singletonList(new StatsListener(null)));
  List<DataSet> list=new IrisDataSetIterator(120,150).next().asList();
  JavaRDD<DataSet> rdd=sc.parallelize(list);
  net.fit(rdd);
  List<String> sessions=ss.listSessionIDs();
  System.out.println("Sessions: " + sessions);
  assertEquals(1,sessions.size());
  String sid=sessions.get(0);
  List<String> typeIDs=ss.listTypeIDsForSession(sid);
  List<String> workers=ss.listWorkerIDsForSession(sid);
  System.out.println(sid + "\t" + typeIDs+ "\t"+ workers);
  List<Persistable> lastUpdates=ss.getLatestUpdateAllWorkers(sid,StatsListener.TYPE_ID);
  System.out.println(lastUpdates);
  System.out.println("Static info:");
  for (  String wid : workers) {
    Persistable staticInfo=ss.getStaticInfo(sid,StatsListener.TYPE_ID,wid);
    System.out.println(sid + "\t" + wid);
  }
  assertEquals(1,typeIDs.size());
  assertEquals(numExecutors(),workers.size());
  String firstWorker=workers.get(0);
  String firstWorkerSubstring=workers.get(0).substring(0,firstWorker.length() - 1);
  for (  String wid : workers) {
    String widSubstring=wid.substring(0,wid.length() - 1);
    assertEquals(firstWorkerSubstring,widSubstring);
    String counterVal=wid.substring(wid.length() - 1,wid.length());
    int cv=Integer.parseInt(counterVal);
    assertTrue(0 <= cv && cv < numExecutors());
  }
}
