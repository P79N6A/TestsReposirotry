@Test public void testSettingListenersUnsupervised(){
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().list().layer(0,new AutoEncoder.Builder().nIn(10).nOut(10).build()).layer(1,new VariationalAutoencoder.Builder().nIn(10).nOut(10).build()).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  net.setListeners(new ScoreIterationListener(),new TestRoutingListener());
  for (  Layer l : net.getLayers()) {
    Collection<TrainingListener> layerListeners=l.getListeners();
    assertEquals(l.getClass().toString(),2,layerListeners.size());
    TrainingListener[] lArr=layerListeners.toArray(new TrainingListener[2]);
    assertTrue(lArr[0] instanceof ScoreIterationListener);
    assertTrue(lArr[1] instanceof TestRoutingListener);
  }
  Collection<TrainingListener> netListeners=net.getListeners();
  assertEquals(2,netListeners.size());
  TrainingListener[] lArr=netListeners.toArray(new TrainingListener[2]);
  assertTrue(lArr[0] instanceof ScoreIterationListener);
  assertTrue(lArr[1] instanceof TestRoutingListener);
  ComputationGraphConfiguration gConf=new NeuralNetConfiguration.Builder().graphBuilder().addInputs("in").addLayer("0",new AutoEncoder.Builder().nIn(10).nOut(10).build(),"in").addLayer("1",new VariationalAutoencoder.Builder().nIn(10).nOut(10).build(),"0").setOutputs("1").build();
  ComputationGraph cg=new ComputationGraph(gConf);
  cg.init();
  cg.setListeners(new ScoreIterationListener(),new TestRoutingListener());
  for (  Layer l : cg.getLayers()) {
    Collection<TrainingListener> layerListeners=l.getListeners();
    assertEquals(2,layerListeners.size());
    lArr=layerListeners.toArray(new TrainingListener[2]);
    assertTrue(lArr[0] instanceof ScoreIterationListener);
    assertTrue(lArr[1] instanceof TestRoutingListener);
  }
  netListeners=cg.getListeners();
  assertEquals(2,netListeners.size());
  lArr=netListeners.toArray(new TrainingListener[2]);
  assertTrue(lArr[0] instanceof ScoreIterationListener);
  assertTrue(lArr[1] instanceof TestRoutingListener);
}
