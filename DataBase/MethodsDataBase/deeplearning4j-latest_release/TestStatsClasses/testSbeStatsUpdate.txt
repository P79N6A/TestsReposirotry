@Test public void testSbeStatsUpdate() throws Exception {
  String[] paramNames=new String[]{"param0","param1"};
  String[] layerNames=new String[]{"layer0","layer1"};
  String sessionID="sid";
  String typeID="tid";
  String workerID="wid";
  long timestamp=-1;
  long time=System.currentTimeMillis();
  int duration=123456;
  int iterCount=123;
  long perfRuntime=1;
  long perfTotalEx=2;
  long perfTotalMB=3;
  double perfEPS=4.0;
  double perfMBPS=5.0;
  long memJC=6;
  long memJM=7;
  long memOC=8;
  long memOM=9;
  long[] memDC=new long[]{10,11};
  long[] memDM=new long[]{12,13};
  String gc1Name="14";
  int gcdc1=16;
  int gcdt1=17;
  String gc2Name="18";
  int gcdc2=20;
  int gcdt2=21;
  double score=22.0;
  Map<String,Double> lrByParam=new HashMap<>();
  lrByParam.put(paramNames[0],22.5);
  lrByParam.put(paramNames[1],22.75);
  Map<String,Histogram> pHist=new HashMap<>();
  pHist.put(paramNames[0],new Histogram(23,24,2,new int[]{25,26}));
  pHist.put(paramNames[1],new Histogram(27,28,3,new int[]{29,30,31}));
  Map<String,Histogram> gHist=new HashMap<>();
  gHist.put(paramNames[0],new Histogram(230,240,2,new int[]{250,260}));
  gHist.put(paramNames[1],new Histogram(270,280,3,new int[]{290,300,310}));
  Map<String,Histogram> uHist=new HashMap<>();
  uHist.put(paramNames[0],new Histogram(32,33,2,new int[]{34,35}));
  uHist.put(paramNames[1],new Histogram(36,37,3,new int[]{38,39,40}));
  Map<String,Histogram> aHist=new HashMap<>();
  aHist.put(layerNames[0],new Histogram(41,42,2,new int[]{43,44}));
  aHist.put(layerNames[1],new Histogram(45,46,3,new int[]{47,48,47}));
  Map<String,Double> pMean=new HashMap<>();
  pMean.put(paramNames[0],49.0);
  pMean.put(paramNames[1],50.0);
  Map<String,Double> gMean=new HashMap<>();
  gMean.put(paramNames[0],49.1);
  gMean.put(paramNames[1],50.1);
  Map<String,Double> uMean=new HashMap<>();
  uMean.put(paramNames[0],51.0);
  uMean.put(paramNames[1],52.0);
  Map<String,Double> aMean=new HashMap<>();
  aMean.put(layerNames[0],53.0);
  aMean.put(layerNames[1],54.0);
  Map<String,Double> pStd=new HashMap<>();
  pStd.put(paramNames[0],55.0);
  pStd.put(paramNames[1],56.0);
  Map<String,Double> gStd=new HashMap<>();
  gStd.put(paramNames[0],55.1);
  gStd.put(paramNames[1],56.1);
  Map<String,Double> uStd=new HashMap<>();
  uStd.put(paramNames[0],57.0);
  uStd.put(paramNames[1],58.0);
  Map<String,Double> aStd=new HashMap<>();
  aStd.put(layerNames[0],59.0);
  aStd.put(layerNames[1],60.0);
  Map<String,Double> pMM=new HashMap<>();
  pMM.put(paramNames[0],61.0);
  pMM.put(paramNames[1],62.0);
  Map<String,Double> gMM=new HashMap<>();
  gMM.put(paramNames[0],61.1);
  gMM.put(paramNames[1],62.1);
  Map<String,Double> uMM=new HashMap<>();
  uMM.put(paramNames[0],63.0);
  uMM.put(paramNames[1],64.0);
  Map<String,Double> aMM=new HashMap<>();
  aMM.put(layerNames[0],65.0);
  aMM.put(layerNames[1],66.0);
  List<Serializable> metaDataList=new ArrayList<>();
  metaDataList.add("meta1");
  metaDataList.add("meta2");
  metaDataList.add("meta3");
  Class<?> metaDataClass=String.class;
  boolean[] tf=new boolean[]{true,false};
  boolean[][] tf4=new boolean[][]{{false,false,false,false},{true,false,false,false},{false,true,false,false},{false,false,true,false},{false,false,false,true},{true,true,true,true}};
  int testCount=0;
  for (  boolean collectPerformanceStats : tf) {
    for (    boolean collectMemoryStats : tf) {
      for (      boolean collectGCStats : tf) {
        for (        boolean collectScore : tf) {
          for (          boolean collectLearningRates : tf) {
            for (            boolean collectMetaData : tf) {
              for (              boolean[] collectHistograms : tf4) {
                for (                boolean[] collectMeanStdev : tf4) {
                  for (                  boolean[] collectMM : tf4) {
                    SbeStatsReport report=new SbeStatsReport();
                    report.reportIDs(sessionID,typeID,workerID,time);
                    report.reportStatsCollectionDurationMS(duration);
                    report.reportIterationCount(iterCount);
                    if (collectPerformanceStats) {
                      report.reportPerformance(perfRuntime,perfTotalEx,perfTotalMB,perfEPS,perfMBPS);
                    }
                    if (collectMemoryStats) {
                      report.reportMemoryUse(memJC,memJM,memOC,memOM,memDC,memDM);
                    }
                    if (collectGCStats) {
                      report.reportGarbageCollection(gc1Name,gcdc1,gcdt1);
                      report.reportGarbageCollection(gc2Name,gcdc2,gcdt2);
                    }
                    if (collectScore) {
                      report.reportScore(score);
                    }
                    if (collectLearningRates) {
                      report.reportLearningRates(lrByParam);
                    }
                    if (collectMetaData) {
                      report.reportDataSetMetaData(metaDataList,metaDataClass);
                    }
                    if (collectHistograms[0]) {
                      report.reportHistograms(StatsType.Parameters,pHist);
                    }
                    if (collectHistograms[1]) {
                      report.reportHistograms(StatsType.Gradients,gHist);
                    }
                    if (collectHistograms[2]) {
                      report.reportHistograms(StatsType.Updates,uHist);
                    }
                    if (collectHistograms[3]) {
                      report.reportHistograms(StatsType.Activations,aHist);
                    }
                    if (collectMeanStdev[0]) {
                      report.reportMean(StatsType.Parameters,pMean);
                      report.reportStdev(StatsType.Parameters,pStd);
                    }
                    if (collectMeanStdev[1]) {
                      report.reportMean(StatsType.Gradients,gMean);
                      report.reportStdev(StatsType.Gradients,gStd);
                    }
                    if (collectMeanStdev[2]) {
                      report.reportMean(StatsType.Updates,uMean);
                      report.reportStdev(StatsType.Updates,uStd);
                    }
                    if (collectMeanStdev[3]) {
                      report.reportMean(StatsType.Activations,aMean);
                      report.reportStdev(StatsType.Activations,aStd);
                    }
                    if (collectMM[0]) {
                      report.reportMeanMagnitudes(StatsType.Parameters,pMM);
                    }
                    if (collectMM[1]) {
                      report.reportMeanMagnitudes(StatsType.Gradients,gMM);
                    }
                    if (collectMM[2]) {
                      report.reportMeanMagnitudes(StatsType.Updates,uMM);
                    }
                    if (collectMM[3]) {
                      report.reportMeanMagnitudes(StatsType.Activations,aMM);
                    }
                    byte[] bytes=report.encode();
                    StatsReport report2=new SbeStatsReport();
                    report2.decode(bytes);
                    assertEquals(report,report2);
                    assertEquals(sessionID,report2.getSessionID());
                    assertEquals(typeID,report2.getTypeID());
                    assertEquals(workerID,report2.getWorkerID());
                    assertEquals(time,report2.getTimeStamp());
                    assertEquals(time,report2.getTimeStamp());
                    assertEquals(duration,report2.getStatsCollectionDurationMs());
                    assertEquals(iterCount,report2.getIterationCount());
                    if (collectPerformanceStats) {
                      assertEquals(perfRuntime,report2.getTotalRuntimeMs());
                      assertEquals(perfTotalEx,report2.getTotalExamples());
                      assertEquals(perfTotalMB,report2.getTotalMinibatches());
                      assertEquals(perfEPS,report2.getExamplesPerSecond(),0.0);
                      assertEquals(perfMBPS,report2.getMinibatchesPerSecond(),0.0);
                      Assert.assertTrue(report2.hasPerformance());
                    }
 else {
                      Assert.assertFalse(report2.hasPerformance());
                    }
                    if (collectMemoryStats) {
                      assertEquals(memJC,report2.getJvmCurrentBytes());
                      assertEquals(memJM,report2.getJvmMaxBytes());
                      assertEquals(memOC,report2.getOffHeapCurrentBytes());
                      assertEquals(memOM,report2.getOffHeapMaxBytes());
                      assertArrayEquals(memDC,report2.getDeviceCurrentBytes());
                      assertArrayEquals(memDM,report2.getDeviceMaxBytes());
                      Assert.assertTrue(report2.hasMemoryUse());
                    }
 else {
                      Assert.assertFalse(report2.hasMemoryUse());
                    }
                    if (collectGCStats) {
                      List<Pair<String,int[]>> gcs=report2.getGarbageCollectionStats();
                      Assert.assertEquals(2,gcs.size());
                      Assert.assertEquals(gc1Name,gcs.get(0).getFirst());
                      Assert.assertArrayEquals(new int[]{gcdc1,gcdt1},gcs.get(0).getSecond());
                      Assert.assertEquals(gc2Name,gcs.get(1).getFirst());
                      Assert.assertArrayEquals(new int[]{gcdc2,gcdt2},gcs.get(1).getSecond());
                      Assert.assertTrue(report2.hasGarbageCollection());
                    }
 else {
                      Assert.assertFalse(report2.hasGarbageCollection());
                    }
                    if (collectScore) {
                      assertEquals(score,report2.getScore(),0.0);
                      Assert.assertTrue(report2.hasScore());
                    }
 else {
                      Assert.assertFalse(report2.hasScore());
                    }
                    if (collectLearningRates) {
                      assertEquals(lrByParam.keySet(),report2.getLearningRates().keySet());
                      for (                      String s : lrByParam.keySet()) {
                        assertEquals(lrByParam.get(s),report2.getLearningRates().get(s),1e-6);
                      }
                      Assert.assertTrue(report2.hasLearningRates());
                    }
 else {
                      Assert.assertFalse(report2.hasLearningRates());
                    }
                    if (collectMetaData) {
                      assertNotNull(report2.getDataSetMetaData());
                      assertEquals(metaDataList,report2.getDataSetMetaData());
                      assertEquals(metaDataClass.getName(),report2.getDataSetMetaDataClassName());
                      assertTrue(report2.hasDataSetMetaData());
                    }
 else {
                      assertFalse(report2.hasDataSetMetaData());
                    }
                    if (collectHistograms[0]) {
                      assertEquals(pHist,report2.getHistograms(StatsType.Parameters));
                      Assert.assertTrue(report2.hasHistograms(StatsType.Parameters));
                    }
 else {
                      Assert.assertFalse(report2.hasHistograms(StatsType.Parameters));
                    }
                    if (collectHistograms[1]) {
                      assertEquals(gHist,report2.getHistograms(StatsType.Gradients));
                      Assert.assertTrue(report2.hasHistograms(StatsType.Gradients));
                    }
 else {
                      Assert.assertFalse(report2.hasHistograms(StatsType.Gradients));
                    }
                    if (collectHistograms[2]) {
                      assertEquals(uHist,report2.getHistograms(StatsType.Updates));
                      Assert.assertTrue(report2.hasHistograms(StatsType.Updates));
                    }
 else {
                      Assert.assertFalse(report2.hasHistograms(StatsType.Updates));
                    }
                    if (collectHistograms[3]) {
                      assertEquals(aHist,report2.getHistograms(StatsType.Activations));
                      Assert.assertTrue(report2.hasHistograms(StatsType.Activations));
                    }
 else {
                      Assert.assertFalse(report2.hasHistograms(StatsType.Activations));
                    }
                    if (collectMeanStdev[0]) {
                      assertEquals(pMean,report2.getMean(StatsType.Parameters));
                      assertEquals(pStd,report2.getStdev(StatsType.Parameters));
                      Assert.assertTrue(report2.hasSummaryStats(StatsType.Parameters,SummaryType.Mean));
                      Assert.assertTrue(report2.hasSummaryStats(StatsType.Parameters,SummaryType.Stdev));
                    }
 else {
                      Assert.assertFalse(report2.hasSummaryStats(StatsType.Parameters,SummaryType.Mean));
                      Assert.assertFalse(report2.hasSummaryStats(StatsType.Parameters,SummaryType.Stdev));
                    }
                    if (collectMeanStdev[1]) {
                      assertEquals(gMean,report2.getMean(StatsType.Gradients));
                      assertEquals(gStd,report2.getStdev(StatsType.Gradients));
                      Assert.assertTrue(report2.hasSummaryStats(StatsType.Gradients,SummaryType.Mean));
                      Assert.assertTrue(report2.hasSummaryStats(StatsType.Gradients,SummaryType.Stdev));
                    }
 else {
                      Assert.assertFalse(report2.hasSummaryStats(StatsType.Gradients,SummaryType.Mean));
                      Assert.assertFalse(report2.hasSummaryStats(StatsType.Gradients,SummaryType.Stdev));
                    }
                    if (collectMeanStdev[2]) {
                      assertEquals(uMean,report2.getMean(StatsType.Updates));
                      assertEquals(uStd,report2.getStdev(StatsType.Updates));
                      Assert.assertTrue(report2.hasSummaryStats(StatsType.Updates,SummaryType.Mean));
                      Assert.assertTrue(report2.hasSummaryStats(StatsType.Updates,SummaryType.Stdev));
                    }
 else {
                      Assert.assertFalse(report2.hasSummaryStats(StatsType.Updates,SummaryType.Mean));
                      Assert.assertFalse(report2.hasSummaryStats(StatsType.Updates,SummaryType.Stdev));
                    }
                    if (collectMeanStdev[3]) {
                      assertEquals(aMean,report2.getMean(StatsType.Activations));
                      assertEquals(aStd,report2.getStdev(StatsType.Activations));
                      Assert.assertTrue(report2.hasSummaryStats(StatsType.Activations,SummaryType.Mean));
                      Assert.assertTrue(report2.hasSummaryStats(StatsType.Activations,SummaryType.Stdev));
                    }
 else {
                      Assert.assertFalse(report2.hasSummaryStats(StatsType.Activations,SummaryType.Mean));
                      Assert.assertFalse(report2.hasSummaryStats(StatsType.Activations,SummaryType.Stdev));
                    }
                    if (collectMM[0]) {
                      assertEquals(pMM,report2.getMeanMagnitudes(StatsType.Parameters));
                      Assert.assertTrue(report2.hasSummaryStats(StatsType.Parameters,SummaryType.MeanMagnitudes));
                    }
 else {
                      Assert.assertFalse(report2.hasSummaryStats(StatsType.Parameters,SummaryType.MeanMagnitudes));
                    }
                    if (collectMM[1]) {
                      assertEquals(gMM,report2.getMeanMagnitudes(StatsType.Gradients));
                      Assert.assertTrue(report2.hasSummaryStats(StatsType.Gradients,SummaryType.MeanMagnitudes));
                    }
 else {
                      Assert.assertFalse(report2.hasSummaryStats(StatsType.Gradients,SummaryType.MeanMagnitudes));
                    }
                    if (collectMM[2]) {
                      assertEquals(uMM,report2.getMeanMagnitudes(StatsType.Updates));
                      Assert.assertTrue(report2.hasSummaryStats(StatsType.Updates,SummaryType.MeanMagnitudes));
                    }
 else {
                      Assert.assertFalse(report2.hasSummaryStats(StatsType.Updates,SummaryType.MeanMagnitudes));
                    }
                    if (collectMM[3]) {
                      assertEquals(aMM,report2.getMeanMagnitudes(StatsType.Activations));
                      Assert.assertTrue(report2.hasSummaryStats(StatsType.Activations,SummaryType.MeanMagnitudes));
                    }
 else {
                      Assert.assertFalse(report2.hasSummaryStats(StatsType.Activations,SummaryType.MeanMagnitudes));
                    }
                    ByteArrayOutputStream baos=new ByteArrayOutputStream();
                    ObjectOutputStream oos=new ObjectOutputStream(baos);
                    oos.writeObject(report);
                    oos.close();
                    byte[] javaBytes=baos.toByteArray();
                    ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(javaBytes));
                    SbeStatsReport report3=(SbeStatsReport)ois.readObject();
                    assertEquals(report,report3);
                    testCount++;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  Assert.assertEquals(13824,testCount);
}
