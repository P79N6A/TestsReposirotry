@Test public void testStatsInitializationReport() throws Exception {
  boolean[] tf=new boolean[]{true,false};
  for (  boolean useJ7 : new boolean[]{false,true}) {
    String sessionID="sid";
    String typeID="tid";
    String workerID="wid";
    long timestamp=-1;
    int jvmAvailableProcessors=1;
    int numDevices=2;
    long jvmMaxMemory=3;
    long offHeapMaxMemory=4;
    long[] deviceTotalMemory=new long[]{5,6};
    String[] deviceDescription=new String[]{"7","8"};
    String hwUID="8a";
    String arch="9";
    String osName="10";
    String jvmName="11";
    String jvmVersion="12";
    String jvmSpecVersion="13";
    String nd4jBackendClass="14";
    String nd4jDataTypeName="15";
    String hostname="15a";
    String jvmUID="15b";
    Map<String,String> swEnvInfo=new HashMap<>();
    swEnvInfo.put("env15c-1","SomeData");
    swEnvInfo.put("env15c-2","OtherData");
    swEnvInfo.put("env15c-3","EvenMoreData");
    String modelClassName="16";
    String modelConfigJson="17";
    String[] modelparamNames=new String[]{"18","19","20","21"};
    int numLayers=22;
    long numParams=23;
    for (    boolean hasHardwareInfo : tf) {
      for (      boolean hasSoftwareInfo : tf) {
        for (        boolean hasModelInfo : tf) {
          StatsInitializationReport report;
          if (useJ7) {
            report=new JavaStatsInitializationReport();
          }
 else {
            report=new SbeStatsInitializationReport();
          }
          report.reportIDs(sessionID,typeID,workerID,timestamp);
          if (hasHardwareInfo) {
            report.reportHardwareInfo(jvmAvailableProcessors,numDevices,jvmMaxMemory,offHeapMaxMemory,deviceTotalMemory,deviceDescription,hwUID);
          }
          if (hasSoftwareInfo) {
            report.reportSoftwareInfo(arch,osName,jvmName,jvmVersion,jvmSpecVersion,nd4jBackendClass,nd4jDataTypeName,hostname,jvmUID,swEnvInfo);
          }
          if (hasModelInfo) {
            report.reportModelInfo(modelClassName,modelConfigJson,modelparamNames,numLayers,numParams);
          }
          byte[] asBytes=report.encode();
          StatsInitializationReport report2;
          if (useJ7) {
            report2=new JavaStatsInitializationReport();
          }
 else {
            report2=new SbeStatsInitializationReport();
          }
          report2.decode(asBytes);
          assertEquals(report,report2);
          assertEquals(sessionID,report2.getSessionID());
          assertEquals(typeID,report2.getTypeID());
          assertEquals(workerID,report2.getWorkerID());
          assertEquals(timestamp,report2.getTimeStamp());
          if (hasHardwareInfo) {
            assertEquals(jvmAvailableProcessors,report2.getHwJvmAvailableProcessors());
            assertEquals(numDevices,report2.getHwNumDevices());
            assertEquals(jvmMaxMemory,report2.getHwJvmMaxMemory());
            assertEquals(offHeapMaxMemory,report2.getHwOffHeapMaxMemory());
            assertArrayEquals(deviceTotalMemory,report2.getHwDeviceTotalMemory());
            assertArrayEquals(deviceDescription,report2.getHwDeviceDescription());
            assertEquals(hwUID,report2.getHwHardwareUID());
            assertTrue(report2.hasHardwareInfo());
          }
 else {
            assertFalse(report2.hasHardwareInfo());
          }
          if (hasSoftwareInfo) {
            assertEquals(arch,report2.getSwArch());
            assertEquals(osName,report2.getSwOsName());
            assertEquals(jvmName,report2.getSwJvmName());
            assertEquals(jvmVersion,report2.getSwJvmVersion());
            assertEquals(jvmSpecVersion,report2.getSwJvmSpecVersion());
            assertEquals(nd4jBackendClass,report2.getSwNd4jBackendClass());
            assertEquals(nd4jDataTypeName,report2.getSwNd4jDataTypeName());
            assertEquals(jvmUID,report2.getSwJvmUID());
            assertEquals(hostname,report2.getSwHostName());
            assertEquals(swEnvInfo,report2.getSwEnvironmentInfo());
            assertTrue(report2.hasSoftwareInfo());
          }
 else {
            assertFalse(report2.hasSoftwareInfo());
          }
          if (hasModelInfo) {
            assertEquals(modelClassName,report2.getModelClassName());
            assertEquals(modelConfigJson,report2.getModelConfigJson());
            assertArrayEquals(modelparamNames,report2.getModelParamNames());
            assertEquals(numLayers,report2.getModelNumLayers());
            assertEquals(numParams,report2.getModelNumParams());
            assertTrue(report2.hasModelInfo());
          }
 else {
            assertFalse(report2.hasModelInfo());
          }
          ByteArrayOutputStream baos=new ByteArrayOutputStream();
          ObjectOutputStream oos=new ObjectOutputStream(baos);
          oos.writeObject(report);
          oos.close();
          byte[] javaBytes=baos.toByteArray();
          ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(javaBytes));
          StatsInitializationReport report3=(StatsInitializationReport)ois.readObject();
          assertEquals(report,report3);
        }
      }
    }
  }
}
