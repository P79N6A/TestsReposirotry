@Test public void testStatsInitializationReportNullValues() throws Exception {
  boolean[] tf=new boolean[]{true,false};
  for (  boolean useJ7 : new boolean[]{false,true}) {
    int jvmAvailableProcessors=1;
    int numDevices=2;
    long jvmMaxMemory=3;
    long offHeapMaxMemory=4;
    long[] deviceTotalMemory=null;
    String[] deviceDescription=null;
    String hwUID=null;
    String arch=null;
    String osName=null;
    String jvmName=null;
    String jvmVersion=null;
    String jvmSpecVersion=null;
    String nd4jBackendClass=null;
    String nd4jDataTypeName=null;
    String hostname=null;
    String jvmUID=null;
    Map<String,String> swEnvInfo=null;
    String modelClassName=null;
    String modelConfigJson=null;
    String[] modelparamNames=null;
    int numLayers=22;
    long numParams=23;
    for (    boolean hasHardwareInfo : tf) {
      for (      boolean hasSoftwareInfo : tf) {
        for (        boolean hasModelInfo : tf) {
          System.out.println(hasHardwareInfo + "\t" + hasSoftwareInfo+ "\t"+ hasModelInfo);
          StatsInitializationReport report;
          if (useJ7) {
            report=new JavaStatsInitializationReport();
          }
 else {
            report=new SbeStatsInitializationReport();
          }
          report.reportIDs(null,null,null,-1);
          if (hasHardwareInfo) {
            report.reportHardwareInfo(jvmAvailableProcessors,numDevices,jvmMaxMemory,offHeapMaxMemory,deviceTotalMemory,deviceDescription,hwUID);
          }
          if (hasSoftwareInfo) {
            report.reportSoftwareInfo(arch,osName,jvmName,jvmVersion,jvmSpecVersion,nd4jBackendClass,nd4jDataTypeName,hostname,jvmUID,swEnvInfo);
          }
          if (hasModelInfo) {
            report.reportModelInfo(modelClassName,modelConfigJson,modelparamNames,numLayers,numParams);
          }
          byte[] asBytes=report.encode();
          StatsInitializationReport report2;
          if (useJ7) {
            report2=new JavaStatsInitializationReport();
          }
 else {
            report2=new SbeStatsInitializationReport();
          }
          report2.decode(asBytes);
          if (hasHardwareInfo) {
            assertEquals(jvmAvailableProcessors,report2.getHwJvmAvailableProcessors());
            assertEquals(numDevices,report2.getHwNumDevices());
            assertEquals(jvmMaxMemory,report2.getHwJvmMaxMemory());
            assertEquals(offHeapMaxMemory,report2.getHwOffHeapMaxMemory());
            if (useJ7) {
              assertArrayEquals(null,report2.getHwDeviceTotalMemory());
              assertArrayEquals(null,report2.getHwDeviceDescription());
            }
 else {
              assertArrayEquals(new long[]{0,0},report2.getHwDeviceTotalMemory());
              assertArrayEquals(new String[]{"",""},report2.getHwDeviceDescription());
            }
            assertNullOrZeroLength(report2.getHwHardwareUID());
            assertTrue(report2.hasHardwareInfo());
          }
 else {
            assertFalse(report2.hasHardwareInfo());
          }
          if (hasSoftwareInfo) {
            assertNullOrZeroLength(report2.getSwArch());
            assertNullOrZeroLength(report2.getSwOsName());
            assertNullOrZeroLength(report2.getSwJvmName());
            assertNullOrZeroLength(report2.getSwJvmVersion());
            assertNullOrZeroLength(report2.getSwJvmSpecVersion());
            assertNullOrZeroLength(report2.getSwNd4jBackendClass());
            assertNullOrZeroLength(report2.getSwNd4jDataTypeName());
            assertNullOrZeroLength(report2.getSwJvmUID());
            assertNull(report2.getSwEnvironmentInfo());
            assertTrue(report2.hasSoftwareInfo());
          }
 else {
            assertFalse(report2.hasSoftwareInfo());
          }
          if (hasModelInfo) {
            assertNullOrZeroLength(report2.getModelClassName());
            assertNullOrZeroLength(report2.getModelConfigJson());
            assertNullOrZeroLengthArray(report2.getModelParamNames());
            assertEquals(numLayers,report2.getModelNumLayers());
            assertEquals(numParams,report2.getModelNumParams());
            assertTrue(report2.hasModelInfo());
          }
 else {
            assertFalse(report2.hasModelInfo());
          }
          ByteArrayOutputStream baos=new ByteArrayOutputStream();
          ObjectOutputStream oos=new ObjectOutputStream(baos);
          oos.writeObject(report);
          oos.close();
          byte[] javaBytes=baos.toByteArray();
          ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(javaBytes));
          StatsInitializationReport report3=(StatsInitializationReport)ois.readObject();
          assertEquals(report,report3);
        }
      }
    }
  }
}
