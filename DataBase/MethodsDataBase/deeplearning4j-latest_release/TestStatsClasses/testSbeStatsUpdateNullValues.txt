@Test public void testSbeStatsUpdateNullValues() throws Exception {
  String[] paramNames=null;
  long time=System.currentTimeMillis();
  int duration=123456;
  int iterCount=123;
  long perfRuntime=1;
  long perfTotalEx=2;
  long perfTotalMB=3;
  double perfEPS=4.0;
  double perfMBPS=5.0;
  long memJC=6;
  long memJM=7;
  long memOC=8;
  long memOM=9;
  long[] memDC=null;
  long[] memDM=null;
  String gc1Name=null;
  int gcdc1=16;
  int gcdt1=17;
  String gc2Name=null;
  int gcdc2=20;
  int gcdt2=21;
  double score=22.0;
  Map<String,Double> lrByParam=null;
  Map<String,Histogram> pHist=null;
  Map<String,Histogram> gHist=null;
  Map<String,Histogram> uHist=null;
  Map<String,Histogram> aHist=null;
  Map<String,Double> pMean=null;
  Map<String,Double> gMean=null;
  Map<String,Double> uMean=null;
  Map<String,Double> aMean=null;
  Map<String,Double> pStd=null;
  Map<String,Double> gStd=null;
  Map<String,Double> uStd=null;
  Map<String,Double> aStd=null;
  Map<String,Double> pMM=null;
  Map<String,Double> gMM=null;
  Map<String,Double> uMM=null;
  Map<String,Double> aMM=null;
  boolean[] tf=new boolean[]{true,false};
  boolean[][] tf4=new boolean[][]{{false,false,false,false},{true,false,false,false},{false,true,false,false},{false,false,true,false},{false,false,false,true},{true,true,true,true}};
  int testCount=0;
  for (  boolean collectPerformanceStats : tf) {
    for (    boolean collectMemoryStats : tf) {
      for (      boolean collectGCStats : tf) {
        for (        boolean collectDataSetMetaData : tf) {
          for (          boolean collectScore : tf) {
            for (            boolean collectLearningRates : tf) {
              for (              boolean[] collectHistograms : tf4) {
                for (                boolean[] collectMeanStdev : tf4) {
                  for (                  boolean[] collectMM : tf4) {
                    SbeStatsReport report=new SbeStatsReport();
                    report.reportIDs(null,null,null,time);
                    report.reportStatsCollectionDurationMS(duration);
                    report.reportIterationCount(iterCount);
                    if (collectPerformanceStats) {
                      report.reportPerformance(perfRuntime,perfTotalEx,perfTotalMB,perfEPS,perfMBPS);
                    }
                    if (collectMemoryStats) {
                      report.reportMemoryUse(memJC,memJM,memOC,memOM,memDC,memDM);
                    }
                    if (collectGCStats) {
                      report.reportGarbageCollection(gc1Name,gcdc1,gcdt1);
                      report.reportGarbageCollection(gc2Name,gcdc2,gcdt2);
                    }
                    if (collectDataSetMetaData) {
                    }
                    if (collectScore) {
                      report.reportScore(score);
                    }
                    if (collectLearningRates) {
                      report.reportLearningRates(lrByParam);
                    }
                    if (collectHistograms[0]) {
                      report.reportHistograms(StatsType.Parameters,pHist);
                    }
                    if (collectHistograms[1]) {
                      report.reportHistograms(StatsType.Gradients,gHist);
                    }
                    if (collectHistograms[2]) {
                      report.reportHistograms(StatsType.Updates,uHist);
                    }
                    if (collectHistograms[3]) {
                      report.reportHistograms(StatsType.Activations,aHist);
                    }
                    if (collectMeanStdev[0]) {
                      report.reportMean(StatsType.Parameters,pMean);
                      report.reportStdev(StatsType.Parameters,pStd);
                    }
                    if (collectMeanStdev[1]) {
                      report.reportMean(StatsType.Gradients,gMean);
                      report.reportStdev(StatsType.Gradients,gStd);
                    }
                    if (collectMeanStdev[2]) {
                      report.reportMean(StatsType.Updates,uMean);
                      report.reportStdev(StatsType.Updates,uStd);
                    }
                    if (collectMeanStdev[3]) {
                      report.reportMean(StatsType.Activations,aMean);
                      report.reportStdev(StatsType.Activations,aStd);
                    }
                    if (collectMM[0]) {
                      report.reportMeanMagnitudes(StatsType.Parameters,pMM);
                    }
                    if (collectMM[1]) {
                      report.reportMeanMagnitudes(StatsType.Gradients,gMM);
                    }
                    if (collectMM[2]) {
                      report.reportMeanMagnitudes(StatsType.Updates,uMM);
                    }
                    if (collectMM[3]) {
                      report.reportMeanMagnitudes(StatsType.Activations,aMM);
                    }
                    byte[] bytes=report.encode();
                    StatsReport report2=new SbeStatsReport();
                    report2.decode(bytes);
                    assertEquals(time,report2.getTimeStamp());
                    assertEquals(duration,report2.getStatsCollectionDurationMs());
                    assertEquals(iterCount,report2.getIterationCount());
                    if (collectPerformanceStats) {
                      assertEquals(perfRuntime,report2.getTotalRuntimeMs());
                      assertEquals(perfTotalEx,report2.getTotalExamples());
                      assertEquals(perfTotalMB,report2.getTotalMinibatches());
                      assertEquals(perfEPS,report2.getExamplesPerSecond(),0.0);
                      assertEquals(perfMBPS,report2.getMinibatchesPerSecond(),0.0);
                      Assert.assertTrue(report2.hasPerformance());
                    }
 else {
                      Assert.assertFalse(report2.hasPerformance());
                    }
                    if (collectMemoryStats) {
                      assertEquals(memJC,report2.getJvmCurrentBytes());
                      assertEquals(memJM,report2.getJvmMaxBytes());
                      assertEquals(memOC,report2.getOffHeapCurrentBytes());
                      assertEquals(memOM,report2.getOffHeapMaxBytes());
                      assertArrayEquals(memDC,report2.getDeviceCurrentBytes());
                      assertArrayEquals(memDM,report2.getDeviceMaxBytes());
                      Assert.assertTrue(report2.hasMemoryUse());
                    }
 else {
                      Assert.assertFalse(report2.hasMemoryUse());
                    }
                    if (collectGCStats) {
                      List<Pair<String,int[]>> gcs=report2.getGarbageCollectionStats();
                      Assert.assertEquals(2,gcs.size());
                      assertNullOrZeroLength(gcs.get(0).getFirst());
                      Assert.assertArrayEquals(new int[]{gcdc1,gcdt1},gcs.get(0).getSecond());
                      assertNullOrZeroLength(gcs.get(1).getFirst());
                      Assert.assertArrayEquals(new int[]{gcdc2,gcdt2},gcs.get(1).getSecond());
                      Assert.assertTrue(report2.hasGarbageCollection());
                    }
 else {
                      Assert.assertFalse(report2.hasGarbageCollection());
                    }
                    if (collectDataSetMetaData) {
                    }
                    if (collectScore) {
                      assertEquals(score,report2.getScore(),0.0);
                      Assert.assertTrue(report2.hasScore());
                    }
 else {
                      Assert.assertFalse(report2.hasScore());
                    }
                    if (collectLearningRates) {
                      assertNull(report2.getLearningRates());
                    }
 else {
                      Assert.assertFalse(report2.hasLearningRates());
                    }
                    assertNull(report2.getHistograms(StatsType.Parameters));
                    Assert.assertFalse(report2.hasHistograms(StatsType.Parameters));
                    assertNull(report2.getHistograms(StatsType.Gradients));
                    Assert.assertFalse(report2.hasHistograms(StatsType.Gradients));
                    assertNull(report2.getHistograms(StatsType.Updates));
                    Assert.assertFalse(report2.hasHistograms(StatsType.Updates));
                    assertNull(report2.getHistograms(StatsType.Activations));
                    Assert.assertFalse(report2.hasHistograms(StatsType.Activations));
                    assertNull(report2.getMean(StatsType.Parameters));
                    assertNull(report2.getStdev(StatsType.Parameters));
                    Assert.assertFalse(report2.hasSummaryStats(StatsType.Parameters,SummaryType.Mean));
                    Assert.assertFalse(report2.hasSummaryStats(StatsType.Parameters,SummaryType.Stdev));
                    assertNull(report2.getMean(StatsType.Gradients));
                    assertNull(report2.getStdev(StatsType.Gradients));
                    Assert.assertFalse(report2.hasSummaryStats(StatsType.Gradients,SummaryType.Mean));
                    Assert.assertFalse(report2.hasSummaryStats(StatsType.Gradients,SummaryType.Stdev));
                    assertNull(report2.getMean(StatsType.Updates));
                    assertNull(report2.getStdev(StatsType.Updates));
                    Assert.assertFalse(report2.hasSummaryStats(StatsType.Updates,SummaryType.Mean));
                    Assert.assertFalse(report2.hasSummaryStats(StatsType.Updates,SummaryType.Stdev));
                    assertNull(report2.getMean(StatsType.Activations));
                    assertNull(report2.getStdev(StatsType.Activations));
                    Assert.assertFalse(report2.hasSummaryStats(StatsType.Activations,SummaryType.Mean));
                    Assert.assertFalse(report2.hasSummaryStats(StatsType.Activations,SummaryType.Stdev));
                    assertNull(report2.getMeanMagnitudes(StatsType.Parameters));
                    Assert.assertFalse(report2.hasSummaryStats(StatsType.Parameters,SummaryType.MeanMagnitudes));
                    assertNull(report2.getMeanMagnitudes(StatsType.Gradients));
                    Assert.assertFalse(report2.hasSummaryStats(StatsType.Gradients,SummaryType.MeanMagnitudes));
                    assertNull(report2.getMeanMagnitudes(StatsType.Updates));
                    Assert.assertFalse(report2.hasSummaryStats(StatsType.Updates,SummaryType.MeanMagnitudes));
                    assertNull(report2.getMeanMagnitudes(StatsType.Activations));
                    Assert.assertFalse(report2.hasSummaryStats(StatsType.Activations,SummaryType.MeanMagnitudes));
                    ByteArrayOutputStream baos=new ByteArrayOutputStream();
                    ObjectOutputStream oos=new ObjectOutputStream(baos);
                    oos.writeObject(report);
                    oos.close();
                    byte[] javaBytes=baos.toByteArray();
                    ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(javaBytes));
                    SbeStatsReport report3=(SbeStatsReport)ois.readObject();
                    assertEquals(report,report3);
                    testCount++;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  Assert.assertEquals(13824,testCount);
}
