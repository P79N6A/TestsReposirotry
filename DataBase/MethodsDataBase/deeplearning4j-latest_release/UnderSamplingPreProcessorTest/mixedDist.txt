@Test public void mixedDist(){
  UnderSamplingByMaskingPreProcessor preProcessor=new UnderSamplingByMaskingPreProcessor(targetDist,window);
  DataSet dataSet=knownDistVariedDataSet(new float[]{0.1f,0.2f,0.8f},false);
  int loop=2;
  for (int i=0; i < loop; i++) {
    DataSet dataSetToPreProcess=dataSet.copy();
    INDArray labelsBefore=dataSetToPreProcess.getLabels().dup();
    preProcessor.preProcess(dataSetToPreProcess);
    INDArray labels=dataSetToPreProcess.getLabels();
    assertEquals(labelsBefore,labels);
    INDArray masks=dataSetToPreProcess.getLabelsMaskArray();
    INDArray shouldBeAllZeros=masks.get(NDArrayIndex.interval(0,3),NDArrayIndex.interval(shortSeq,longSeq));
    assertEquals(Nd4j.zeros(shouldBeAllZeros.shape()),shouldBeAllZeros);
    for (int j=(int)Math.ceil((double)longSeq / window); j > 0; j--) {
      int maxIndex=min(longSeq,j * window);
      int minIndex=min(0,maxIndex - window);
      INDArray maskWindow=masks.get(NDArrayIndex.all(),NDArrayIndex.interval(minIndex,maxIndex));
      INDArray labelWindow=labels.get(NDArrayIndex.all(),NDArrayIndex.point(0),NDArrayIndex.interval(minIndex,maxIndex));
      INDArray minorityDist=labelWindow.mul(maskWindow).sum(1).div(maskWindow.sum(1));
      if (j < shortSeq / window) {
        assertEquals("Failed on window " + j + " batch 0, loop "+ i,targetDist,minorityDist.getFloat(0,0),tolerancePerc);
        assertEquals("Failed on window " + j + " batch 1, loop "+ i,targetDist,minorityDist.getFloat(1,0),tolerancePerc);
        assertEquals("Failed on window " + j + " batch 2, loop "+ i,0.8,minorityDist.getFloat(2,0),tolerancePerc);
      }
      assertEquals("Failed on window " + j + " batch 3, loop "+ i,targetDist,minorityDist.getFloat(3,0),tolerancePerc);
      assertEquals("Failed on window " + j + " batch 4, loop "+ i,targetDist,minorityDist.getFloat(4,0),tolerancePerc);
      assertEquals("Failed on window " + j + " batch 5, loop "+ i,0.8,minorityDist.getFloat(5,0),tolerancePerc);
    }
  }
}
