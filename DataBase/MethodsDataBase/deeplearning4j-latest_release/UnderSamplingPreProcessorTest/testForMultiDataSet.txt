@Test public void testForMultiDataSet(){
  DataSet dataSetA=knownDistVariedDataSet(new float[]{0.8f,0.1f,0.2f},false);
  DataSet dataSetB=knownDistVariedDataSet(new float[]{0.2f,0.9f,0.8f},true);
  HashMap<Integer,Double> targetDists=new HashMap<>();
  targetDists.put(0,0.5);
  targetDists.put(1,0.3);
  UnderSamplingByMaskingMultiDataSetPreProcessor maskingMultiDataSetPreProcessor=new UnderSamplingByMaskingMultiDataSetPreProcessor(targetDists,window);
  maskingMultiDataSetPreProcessor.overrideMinorityDefault(1);
  MultiDataSet multiDataSet=fromDataSet(dataSetA,dataSetB);
  maskingMultiDataSetPreProcessor.preProcess(multiDataSet);
  INDArray labels;
  INDArray minorityCount;
  INDArray seqCount;
  INDArray minorityDist;
  labels=multiDataSet.getLabels(0).reshape(minibatchSize * 2,longSeq).mul(multiDataSet.getLabelsMaskArray(0));
  minorityCount=labels.sum(1);
  seqCount=multiDataSet.getLabelsMaskArray(0).sum(1);
  minorityDist=minorityCount.div(seqCount);
  assertEquals(minorityDist.getDouble(1,0),0.5,tolerancePerc);
  assertEquals(minorityDist.getDouble(2,0),0.5,tolerancePerc);
  assertEquals(minorityDist.getDouble(4,0),0.5,tolerancePerc);
  assertEquals(minorityDist.getDouble(5,0),0.5,tolerancePerc);
  labels=multiDataSet.getLabels(1).get(NDArrayIndex.all(),NDArrayIndex.point(0),NDArrayIndex.all()).mul(multiDataSet.getLabelsMaskArray(1));
  minorityCount=labels.sum(1);
  seqCount=multiDataSet.getLabelsMaskArray(1).sum(1);
  minorityDist=minorityCount.div(seqCount);
  assertEquals(minorityDist.getDouble(1,0),0.3,tolerancePerc);
  assertEquals(minorityDist.getDouble(2,0),0.3,tolerancePerc);
  assertEquals(minorityDist.getDouble(4,0),0.3,tolerancePerc);
  assertEquals(minorityDist.getDouble(5,0),0.3,tolerancePerc);
}
