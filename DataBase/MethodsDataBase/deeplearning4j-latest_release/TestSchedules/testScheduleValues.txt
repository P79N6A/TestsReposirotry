@Test public void testScheduleValues(){
  double lr=0.8;
  double decay=0.9;
  double power=2;
  double gamma=0.5;
  int step=20;
  for (  ScheduleType st : ScheduleType.values()) {
    ISchedule[] schedules=new ISchedule[]{new ExponentialSchedule(st,lr,gamma),new InverseSchedule(st,lr,gamma,power),new PolySchedule(st,lr,power,step),new SigmoidSchedule(st,lr,gamma,step),new StepSchedule(st,lr,decay,step)};
    for (    ISchedule s : schedules) {
      for (int i=0; i < 9; i++) {
        int epoch=i / 3;
        int x;
        if (st == ScheduleType.ITERATION) {
          x=i;
        }
 else {
          x=epoch;
        }
        double now=s.valueAt(i,epoch);
        double e;
        if (s instanceof ExponentialSchedule) {
          e=calcExponentialDecay(lr,gamma,x);
        }
 else         if (s instanceof InverseSchedule) {
          e=calcInverseDecay(lr,gamma,x,power);
        }
 else         if (s instanceof PolySchedule) {
          e=calcPolyDecay(lr,x,power,step);
        }
 else         if (s instanceof SigmoidSchedule) {
          e=calcSigmoidDecay(lr,gamma,x,step);
        }
 else         if (s instanceof StepSchedule) {
          e=calcStepDecay(lr,decay,x,step);
        }
 else {
          throw new RuntimeException();
        }
        assertEquals(s.toString() + ", " + st,e,now,1e-6);
      }
    }
  }
}
