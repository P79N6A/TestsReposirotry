@Test public void testParallelWrapperRun() throws Exception {
  int nChannels=1;
  int outputNum=10;
  int batchSize=128;
  int nEpochs=2;
  int seed=123;
  log.info("Load data....");
  DataSetIterator mnistTrain=new EarlyTerminationDataSetIterator(new MnistDataSetIterator(batchSize,true,12345),100);
  DataSetIterator mnistTest=new EarlyTerminationDataSetIterator(new MnistDataSetIterator(batchSize,false,12345),10);
  assertTrue(mnistTrain.hasNext());
  val t0=mnistTrain.next();
  log.info("F: {}; L: {};",t0.getFeatures().shape(),t0.getLabels().shape());
  log.info("Build model....");
  MultiLayerConfiguration.Builder builder=new NeuralNetConfiguration.Builder().seed(seed).l2(0.0005).weightInit(WeightInit.XAVIER).updater(new Nesterovs(0.01,0.9)).list().layer(0,new ConvolutionLayer.Builder(5,5).nIn(nChannels).stride(1,1).nOut(20).activation(Activation.IDENTITY).build()).layer(1,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build()).layer(2,new ConvolutionLayer.Builder(5,5).stride(1,1).nOut(50).activation(Activation.IDENTITY).build()).layer(3,new SubsamplingLayer.Builder(SubsamplingLayer.PoolingType.MAX).kernelSize(2,2).stride(2,2).build()).layer(4,new DenseLayer.Builder().activation(Activation.RELU).nOut(500).build()).layer(5,new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).nOut(outputNum).activation(Activation.SOFTMAX).build()).setInputType(InputType.convolutionalFlat(28,28,nChannels));
  MultiLayerConfiguration conf=builder.build();
  MultiLayerNetwork model=new MultiLayerNetwork(conf);
  model.init();
  ParallelWrapper wrapper=new ParallelWrapper.Builder(model).prefetchBuffer(24).workers(2).averagingFrequency(3).reportScoreAfterAveraging(true).build();
  log.info("Train model....");
  model.setListeners(new ScoreIterationListener(100));
  long timeX=System.currentTimeMillis();
  for (int i=0; i < nEpochs; i++) {
    long time1=System.currentTimeMillis();
    wrapper.fit(mnistTrain);
    long time2=System.currentTimeMillis();
    log.info("*** Completed epoch {}, time: {} ***",i,(time2 - time1));
  }
  long timeY=System.currentTimeMillis();
  log.info("*** Training complete, time: {} ***",(timeY - timeX));
  Evaluation eval=model.evaluate(mnistTest);
  log.info(eval.stats());
  mnistTest.reset();
  double acc=eval.accuracy();
  assertTrue(String.valueOf(acc),acc > 0.5);
  wrapper.shutdown();
}
