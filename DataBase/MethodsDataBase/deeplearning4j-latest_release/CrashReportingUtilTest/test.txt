@Test public void test() throws Exception {
  File dir=testDir.newFolder();
  CrashReportingUtil.crashDumpOutputDirectory(dir);
  int kernel=2;
  int stride=1;
  int padding=0;
  PoolingType poolingType=PoolingType.MAX;
  int inputDepth=1;
  int height=28;
  int width=28;
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().updater(new NoOp()).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).list().layer(0,new ConvolutionLayer.Builder().kernelSize(kernel,kernel).stride(stride,stride).padding(padding,padding).nIn(inputDepth).nOut(3).build()).layer(1,new SubsamplingLayer.Builder(poolingType).kernelSize(kernel,kernel).stride(stride,stride).padding(padding,padding).build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nOut(10).build()).setInputType(InputType.convolutionalFlat(height,width,inputDepth)).build();
  MultiLayerNetwork net=new MultiLayerNetwork(conf);
  net.init();
  net.addListeners(new ScoreIterationListener(1));
  Exception e=new Exception();
  CrashReportingUtil.writeMemoryCrashDump(net,e);
  File[] list=dir.listFiles();
  assertNotNull(list);
  assertEquals(1,list.length);
  String str=FileUtils.readFileToString(list[0]);
  assertTrue(str.contains("Network Information"));
  assertTrue(str.contains("Layer Helpers"));
  assertTrue(str.contains("JavaCPP"));
  assertTrue(str.contains("ScoreIterationListener"));
  DataSetIterator iter=new EarlyTerminationDataSetIterator(new MnistDataSetIterator(32,true,12345),5);
  net.fit(iter);
  dir=testDir.newFolder();
  CrashReportingUtil.crashDumpOutputDirectory(dir);
  CrashReportingUtil.writeMemoryCrashDump(net,e);
  list=dir.listFiles();
  assertNotNull(list);
  assertEquals(1,list.length);
  str=FileUtils.readFileToString(list[0]);
  assertTrue(str.contains("Network Information"));
  assertTrue(str.contains("Layer Helpers"));
  assertTrue(str.contains("JavaCPP"));
  assertTrue(str.contains("ScoreIterationListener(1)"));
  String mlnMemoryInfo=net.memoryInfo(32,InputType.convolutionalFlat(28,28,1));
  assertTrue(mlnMemoryInfo.contains("Network Information"));
  assertTrue(mlnMemoryInfo.contains("Layer Helpers"));
  assertTrue(mlnMemoryInfo.contains("JavaCPP"));
  assertTrue(mlnMemoryInfo.contains("ScoreIterationListener(1)"));
  dir=testDir.newFolder();
  CrashReportingUtil.crashDumpOutputDirectory(dir);
  ComputationGraph cg=net.toComputationGraph();
  cg.setListeners(new ScoreIterationListener(1));
  CrashReportingUtil.writeMemoryCrashDump(cg,e);
  list=dir.listFiles();
  assertNotNull(list);
  assertEquals(1,list.length);
  str=FileUtils.readFileToString(list[0]);
  assertTrue(str.contains("Network Information"));
  assertTrue(str.contains("Layer Helpers"));
  assertTrue(str.contains("JavaCPP"));
  assertTrue(str.contains("ScoreIterationListener(1)"));
  cg.fit(iter);
  dir=testDir.newFolder();
  CrashReportingUtil.crashDumpOutputDirectory(dir);
  CrashReportingUtil.writeMemoryCrashDump(cg,e);
  list=dir.listFiles();
  assertNotNull(list);
  assertEquals(1,list.length);
  str=FileUtils.readFileToString(list[0]);
  assertTrue(str.contains("Network Information"));
  assertTrue(str.contains("Layer Helpers"));
  assertTrue(str.contains("JavaCPP"));
  assertTrue(str.contains("ScoreIterationListener(1)"));
  String cgMemoryInfo=cg.memoryInfo(32,InputType.convolutionalFlat(28,28,1));
  assertTrue(cgMemoryInfo.contains("Network Information"));
  assertTrue(cgMemoryInfo.contains("Layer Helpers"));
  assertTrue(cgMemoryInfo.contains("JavaCPP"));
  assertTrue(cgMemoryInfo.contains("ScoreIterationListener(1)"));
}
