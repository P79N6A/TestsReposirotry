@Test public void testOutputLayersRnnForwardPass(){
  int nIn=2;
  int nOut=5;
  int layerSize=4;
  int timeSeriesLength=6;
  int miniBatchSize=3;
  Random r=new Random(12345L);
  INDArray input=Nd4j.zeros(miniBatchSize,nIn,timeSeriesLength);
  for (int i=0; i < miniBatchSize; i++) {
    for (int j=0; j < nIn; j++) {
      for (int k=0; k < timeSeriesLength; k++) {
        input.putScalar(new int[]{i,j,k},r.nextDouble() - 0.5);
      }
    }
  }
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345L).list().layer(0,new GravesLSTM.Builder().nIn(nIn).nOut(layerSize).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).activation(Activation.TANH).updater(new NoOp()).build()).layer(1,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(layerSize).nOut(nOut).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).updater(new NoOp()).build()).inputPreProcessor(1,new RnnToFeedForwardPreProcessor()).build();
  MultiLayerNetwork mln=new MultiLayerNetwork(conf);
  mln.init();
  INDArray out2d=mln.feedForward(input).get(2);
  assertArrayEquals(out2d.shape(),new long[]{miniBatchSize * timeSeriesLength,nOut});
  INDArray out=mln.output(input);
  assertArrayEquals(out.shape(),new long[]{miniBatchSize * timeSeriesLength,nOut});
  INDArray preout=mln.activate(input);
  assertArrayEquals(preout.shape(),new long[]{miniBatchSize * timeSeriesLength,nOut});
  MultiLayerConfiguration confRnn=new NeuralNetConfiguration.Builder().seed(12345L).list().layer(0,new GravesLSTM.Builder().nIn(nIn).nOut(layerSize).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).activation(Activation.TANH).updater(new NoOp()).build()).layer(1,new org.deeplearning4j.nn.conf.layers.RnnOutputLayer.Builder(LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(layerSize).nOut(nOut).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).updater(new NoOp()).build()).build();
  MultiLayerNetwork mlnRnn=new MultiLayerNetwork(confRnn);
  mln.init();
  INDArray out3d=mlnRnn.feedForward(input).get(2);
  assertArrayEquals(out3d.shape(),new long[]{miniBatchSize,nOut,timeSeriesLength});
  INDArray outRnn=mlnRnn.output(input);
  assertArrayEquals(outRnn.shape(),new long[]{miniBatchSize,nOut,timeSeriesLength});
  INDArray preoutRnn=mlnRnn.activate(input);
  assertArrayEquals(preoutRnn.shape(),new long[]{miniBatchSize,nOut,timeSeriesLength});
}
