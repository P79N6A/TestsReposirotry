@Test public void testCnnLossLayerCompGraph(){
  for (  WorkspaceMode ws : WorkspaceMode.values()) {
    log.info("*** Testing workspace: " + ws);
    for (    Activation a : new Activation[]{Activation.TANH,Activation.SELU}) {
      ComputationGraphConfiguration conf1=new NeuralNetConfiguration.Builder().seed(12345L).updater(new NoOp()).convolutionMode(ConvolutionMode.Same).inferenceWorkspaceMode(ws).trainingWorkspaceMode(ws).graphBuilder().addInputs("in").addLayer("0",new ConvolutionLayer.Builder().nIn(3).nOut(4).activation(Activation.IDENTITY).kernelSize(2,2).stride(1,1).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1.0)).updater(new NoOp()).build(),"in").addLayer("1",new CnnLossLayer.Builder(LossFunction.MSE).activation(a).build(),"0").setOutputs("1").build();
      ComputationGraphConfiguration conf2=new NeuralNetConfiguration.Builder().seed(12345L).updater(new NoOp()).convolutionMode(ConvolutionMode.Same).inferenceWorkspaceMode(ws).trainingWorkspaceMode(ws).graphBuilder().addInputs("in").addLayer("0",new ConvolutionLayer.Builder().nIn(3).nOut(4).activation(a).kernelSize(2,2).stride(1,1).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1.0)).updater(new NoOp()).build(),"in").addLayer("1",new CnnLossLayer.Builder(LossFunction.MSE).activation(Activation.IDENTITY).build(),"0").setOutputs("1").build();
      ComputationGraph graph=new ComputationGraph(conf1);
      graph.init();
      ComputationGraph graph2=new ComputationGraph(conf2);
      graph2.init();
      graph2.setParams(graph.params());
      INDArray in=Nd4j.rand(new int[]{3,3,5,5});
      INDArray out1=graph.outputSingle(in);
      INDArray out2=graph2.outputSingle(in);
      assertEquals(out1,out2);
      INDArray labels=Nd4j.rand(out1.shape());
      graph.setInput(0,in);
      graph.setLabels(labels);
      graph2.setInput(0,in);
      graph2.setLabels(labels);
      graph.computeGradientAndScore();
      graph2.computeGradientAndScore();
      assertEquals(graph.score(),graph2.score(),1e-6);
      assertEquals(graph.gradient().gradient(),graph2.gradient().gradient());
      INDArray in2a=Nd4j.rand(new int[]{1,3,5,5});
      INDArray labels2a=Nd4j.rand(new int[]{1,4,5,5});
      INDArray in2=Nd4j.concat(0,in2a,in2a);
      INDArray labels2=Nd4j.concat(0,labels2a,labels2a);
      INDArray s=graph.scoreExamples(new DataSet(in2,labels2),false);
      assertArrayEquals(new long[]{2,1},s.shape());
      assertEquals(s.getDouble(0),s.getDouble(1),1e-6);
      TestUtils.testModelSerialization(graph);
    }
  }
}
