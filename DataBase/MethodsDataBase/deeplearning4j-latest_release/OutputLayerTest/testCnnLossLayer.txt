@Test public void testCnnLossLayer(){
  for (  WorkspaceMode ws : WorkspaceMode.values()) {
    log.info("*** Testing workspace: " + ws);
    for (    Activation a : new Activation[]{Activation.TANH,Activation.SELU}) {
      MultiLayerConfiguration conf1=new NeuralNetConfiguration.Builder().seed(12345L).updater(new NoOp()).convolutionMode(ConvolutionMode.Same).inferenceWorkspaceMode(ws).trainingWorkspaceMode(ws).list().layer(new ConvolutionLayer.Builder().nIn(3).nOut(4).activation(Activation.IDENTITY).kernelSize(2,2).stride(1,1).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1.0)).updater(new NoOp()).build()).layer(new CnnLossLayer.Builder(LossFunction.MSE).activation(a).build()).build();
      MultiLayerConfiguration conf2=new NeuralNetConfiguration.Builder().seed(12345L).updater(new NoOp()).convolutionMode(ConvolutionMode.Same).inferenceWorkspaceMode(ws).trainingWorkspaceMode(ws).list().layer(new ConvolutionLayer.Builder().nIn(3).nOut(4).activation(a).kernelSize(2,2).stride(1,1).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1.0)).updater(new NoOp()).build()).layer(new CnnLossLayer.Builder(LossFunction.MSE).activation(Activation.IDENTITY).build()).build();
      MultiLayerNetwork mln=new MultiLayerNetwork(conf1);
      mln.init();
      MultiLayerNetwork mln2=new MultiLayerNetwork(conf2);
      mln2.init();
      mln2.setParams(mln.params());
      INDArray in=Nd4j.rand(new int[]{3,3,5,5});
      INDArray out1=mln.output(in);
      INDArray out2=mln2.output(in);
      assertEquals(out1,out2);
      INDArray labels=Nd4j.rand(out1.shape());
      mln.setInput(in);
      mln.setLabels(labels);
      mln2.setInput(in);
      mln2.setLabels(labels);
      mln.computeGradientAndScore();
      mln2.computeGradientAndScore();
      assertEquals(mln.score(),mln2.score(),1e-6);
      assertEquals(mln.gradient().gradient(),mln2.gradient().gradient());
      INDArray in2a=Nd4j.rand(new int[]{1,3,5,5});
      INDArray labels2a=Nd4j.rand(new int[]{1,4,5,5});
      INDArray in2=Nd4j.concat(0,in2a,in2a);
      INDArray labels2=Nd4j.concat(0,labels2a,labels2a);
      INDArray s=mln.scoreExamples(new DataSet(in2,labels2),false);
      assertArrayEquals(new long[]{2,1},s.shape());
      assertEquals(s.getDouble(0),s.getDouble(1),1e-6);
      TestUtils.testModelSerialization(mln);
    }
  }
}
