@Test public void testNoutChanges(){
  DataSet randomData=new DataSet(Nd4j.rand(10,4),Nd4j.rand(10,2));
  NeuralNetConfiguration.Builder equivalentConf=new NeuralNetConfiguration.Builder().updater(new Sgd(0.1));
  FineTuneConfiguration overallConf=new FineTuneConfiguration.Builder().updater(new Sgd(0.1)).build();
  MultiLayerNetwork modelToFineTune=new MultiLayerNetwork(equivalentConf.list().layer(0,new DenseLayer.Builder().nIn(4).nOut(5).build()).layer(1,new DenseLayer.Builder().nIn(3).nOut(2).build()).layer(2,new DenseLayer.Builder().nIn(2).nOut(3).build()).layer(3,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(3).nOut(3).build()).build());
  modelToFineTune.init();
  MultiLayerNetwork modelNow=new TransferLearning.Builder(modelToFineTune).fineTuneConfiguration(overallConf).nOutReplace(3,2,WeightInit.XAVIER,WeightInit.XAVIER).nOutReplace(0,3,WeightInit.XAVIER,new NormalDistribution(1,1e-1)).build();
  MultiLayerNetwork modelExpectedArch=new MultiLayerNetwork(equivalentConf.list().layer(0,new DenseLayer.Builder().nIn(4).nOut(3).build()).layer(1,new DenseLayer.Builder().nIn(3).nOut(2).build()).layer(2,new DenseLayer.Builder().nIn(2).nOut(3).build()).layer(3,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(3).nOut(2).build()).build());
  modelExpectedArch.init();
  BaseLayer bl0=((BaseLayer)modelNow.getLayerWiseConfigurations().getConf(0).getLayer());
  BaseLayer bl1=((BaseLayer)modelNow.getLayerWiseConfigurations().getConf(1).getLayer());
  BaseLayer bl3=((BaseLayer)modelNow.getLayerWiseConfigurations().getConf(3).getLayer());
  assertEquals(bl0.getWeightInit(),WeightInit.XAVIER);
  assertEquals(bl0.getDist(),null);
  assertEquals(bl1.getWeightInit(),WeightInit.DISTRIBUTION);
  assertEquals(bl1.getDist(),new NormalDistribution(1,1e-1));
  assertEquals(bl3.getWeightInit(),WeightInit.XAVIER);
  assertArrayEquals(modelExpectedArch.params().shape(),modelNow.params().shape());
  assertArrayEquals(modelExpectedArch.getLayer(0).params().shape(),modelNow.getLayer(0).params().shape());
  assertArrayEquals(modelExpectedArch.getLayer(1).params().shape(),modelNow.getLayer(1).params().shape());
  assertArrayEquals(modelExpectedArch.getLayer(2).params().shape(),modelNow.getLayer(2).params().shape());
  assertArrayEquals(modelExpectedArch.getLayer(3).params().shape(),modelNow.getLayer(3).params().shape());
  modelNow.setParams(modelExpectedArch.params());
  modelExpectedArch.fit(randomData);
  modelNow.fit(randomData);
  assertEquals(modelExpectedArch.score(),modelNow.score(),0.000001);
  assertEquals(modelExpectedArch.params(),modelNow.params());
}
