@Test public void simpleFineTune(){
  long rng=12345L;
  DataSet randomData=new DataSet(Nd4j.rand(10,4),Nd4j.rand(10,3));
  NeuralNetConfiguration.Builder confToChange=new NeuralNetConfiguration.Builder().seed(rng).optimizationAlgo(OptimizationAlgorithm.LBFGS).updater(new Nesterovs(0.01,0.99));
  MultiLayerNetwork modelToFineTune=new MultiLayerNetwork(confToChange.list().layer(0,new DenseLayer.Builder().nIn(4).nOut(3).build()).layer(1,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(3).nOut(3).build()).build());
  modelToFineTune.init();
  MultiLayerNetwork modelNow=new TransferLearning.Builder(modelToFineTune).fineTuneConfiguration(new FineTuneConfiguration.Builder().seed(rng).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new RmsProp(0.5)).l2(0.4).build()).build();
  for (  org.deeplearning4j.nn.api.Layer l : modelNow.getLayers()) {
    BaseLayer bl=((BaseLayer)l.conf().getLayer());
    assertEquals(new RmsProp(0.5),bl.getIUpdater());
  }
  NeuralNetConfiguration.Builder confSet=new NeuralNetConfiguration.Builder().seed(rng).optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT).updater(new RmsProp(0.5)).l2(0.4);
  MultiLayerNetwork expectedModel=new MultiLayerNetwork(confSet.list().layer(0,new DenseLayer.Builder().nIn(4).nOut(3).build()).layer(1,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(3).nOut(3).build()).build());
  expectedModel.init();
  expectedModel.setParams(modelToFineTune.params().dup());
  assertEquals(expectedModel.params(),modelNow.params());
  MultiLayerConfiguration expectedConf=expectedModel.getLayerWiseConfigurations();
  assertEquals(expectedConf.toJson(),modelNow.getLayerWiseConfigurations().toJson());
  modelNow.fit(randomData);
  expectedModel.fit(randomData);
  assertEquals(modelNow.score(),expectedModel.score(),1e-6);
  INDArray pExp=expectedModel.params();
  INDArray pNow=modelNow.params();
  assertEquals(pExp,pNow);
}
