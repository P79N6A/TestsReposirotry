@Test public void testRemoveAndAdd(){
  DataSet randomData=new DataSet(Nd4j.rand(10,4),Nd4j.rand(10,3));
  NeuralNetConfiguration.Builder equivalentConf=new NeuralNetConfiguration.Builder().updater(new Sgd(0.1));
  FineTuneConfiguration overallConf=new FineTuneConfiguration.Builder().updater(new Sgd(0.1)).build();
  MultiLayerNetwork modelToFineTune=new MultiLayerNetwork(equivalentConf.list().layer(0,new DenseLayer.Builder().nIn(4).nOut(5).build()).layer(1,new DenseLayer.Builder().nIn(5).nOut(2).build()).layer(2,new DenseLayer.Builder().nIn(2).nOut(3).build()).layer(3,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).nIn(3).nOut(3).build()).build());
  modelToFineTune.init();
  MultiLayerNetwork modelNow=new TransferLearning.Builder(modelToFineTune).fineTuneConfiguration(overallConf).nOutReplace(0,7,WeightInit.XAVIER,WeightInit.XAVIER).nOutReplace(2,5,WeightInit.XAVIER).removeOutputLayer().addLayer(new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(5).nOut(3).updater(new Sgd(0.5)).activation(Activation.SOFTMAX).build()).build();
  MultiLayerNetwork modelExpectedArch=new MultiLayerNetwork(equivalentConf.list().layer(0,new DenseLayer.Builder().nIn(4).nOut(7).build()).layer(1,new DenseLayer.Builder().nIn(7).nOut(2).build()).layer(2,new DenseLayer.Builder().nIn(2).nOut(5).build()).layer(3,new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).activation(Activation.SOFTMAX).updater(new Sgd(0.5)).nIn(5).nOut(3).build()).build());
  modelExpectedArch.init();
  assertArrayEquals(modelExpectedArch.params().shape(),modelNow.params().shape());
  assertArrayEquals(modelExpectedArch.getLayer(0).params().shape(),modelNow.getLayer(0).params().shape());
  assertArrayEquals(modelExpectedArch.getLayer(1).params().shape(),modelNow.getLayer(1).params().shape());
  assertArrayEquals(modelExpectedArch.getLayer(2).params().shape(),modelNow.getLayer(2).params().shape());
  assertArrayEquals(modelExpectedArch.getLayer(3).params().shape(),modelNow.getLayer(3).params().shape());
  modelNow.setParams(modelExpectedArch.params());
  modelExpectedArch.fit(randomData);
  modelNow.fit(randomData);
  assertTrue(modelExpectedArch.score() == modelNow.score());
  assertEquals(modelExpectedArch.params(),modelNow.params());
}
