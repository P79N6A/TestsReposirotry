@Test public void testEuclideanManhattanDistanceAlongDimension_Rank4(){
  Nd4j.getRandom().setSeed(12345);
  INDArray firstOneExample=Nd4j.rand('c',new int[]{1,2,2,2});
  INDArray secondOneExample=Nd4j.rand('c',new int[]{1,2,2,2});
  double[] d1=firstOneExample.data().asDouble();
  double[] d2=secondOneExample.data().asDouble();
  double sumSquaredDiff=0.0;
  double expManhattanDistance=0.0;
  for (int i=0; i < d1.length; i++) {
    double diff=d1[i] - d2[i];
    sumSquaredDiff+=diff * diff;
    expManhattanDistance+=Math.abs(diff);
  }
  double expected=Math.sqrt(sumSquaredDiff);
  System.out.println("Expected, Euclidean: " + expected);
  System.out.println("Expected, Manhattan: " + expManhattanDistance);
  int mb=2;
  INDArray firstOrig=Nd4j.create(mb,2,2,2);
  INDArray secondOrig=Nd4j.create(mb,2,2,2);
  for (int i=0; i < mb; i++) {
    firstOrig.put(new INDArrayIndex[]{NDArrayIndex.point(i),NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.all()},firstOneExample);
    secondOrig.put(new INDArrayIndex[]{NDArrayIndex.point(i),NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.all()},secondOneExample);
  }
  for (  char order : new char[]{'c','f'}) {
    INDArray first=firstOrig.dup(order);
    INDArray second=secondOrig.dup(order);
    assertEquals(firstOrig,first);
    assertEquals(secondOrig,second);
    INDArray out=Nd4j.getExecutioner().exec(new EuclideanDistance(first,second),1,2,3);
    INDArray outManhattan=Nd4j.getExecutioner().exec(new ManhattanDistance(first,second),1,2,3);
    System.out.println("\n\nOrder: " + order);
    System.out.println("Euclidean:");
    System.out.println(Arrays.toString(out.getRow(0).dup().data().asDouble()));
    System.out.println(Arrays.toString(out.getRow(1).dup().data().asDouble()));
    assertEquals(out.getRow(0),out.getRow(1));
    System.out.println("Manhattan:");
    System.out.println(Arrays.toString(outManhattan.getRow(0).dup().data().asDouble()));
    System.out.println(Arrays.toString(outManhattan.getRow(1).dup().data().asDouble()));
    assertEquals(expected,out.getRow(0).getDouble(0),1e-5);
    assertEquals(expManhattanDistance,outManhattan.getRow(0).getDouble(0),1e-5);
  }
}
