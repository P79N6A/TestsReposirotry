@Test public void testMultithreadedRandom1() throws Exception {
  final List<INDArray> holder=new ArrayList<>();
  final AtomicLong failures=new AtomicLong(0);
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      holder.add(Nd4j.ones(10));
    }
  }
);
  Nd4j.getAffinityManager().attachThreadToDevice(thread,1);
  thread.start();
  thread.join();
  Thread[] threads=new Thread[100];
  for (int x=0; x < threads.length; x++) {
    threads[x]=new Thread(new Runnable(){
      @Override public void run(){
        try {
          INDArray array=holder.get(0).dup();
        }
 catch (        Exception e) {
          failures.incrementAndGet();
          throw new RuntimeException(e);
        }
      }
    }
);
    threads[x].start();
  }
  for (int x=0; x < threads.length; x++) {
    threads[x].join();
  }
  assertEquals(0,failures.get());
}
