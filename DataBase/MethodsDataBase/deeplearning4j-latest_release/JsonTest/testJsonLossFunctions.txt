@Test public void testJsonLossFunctions(){
  ILossFunction[] lossFunctions=new ILossFunction[]{new LossBinaryXENT(),new LossBinaryXENT(),new LossCosineProximity(),new LossHinge(),new LossKLD(),new LossKLD(),new LossL1(),new LossL1(),new LossL2(),new LossL2(),new LossMAE(),new LossMAE(),new LossMAPE(),new LossMAPE(),new LossMCXENT(),new LossMSE(),new LossMSE(),new LossMSLE(),new LossMSLE(),new LossNegativeLogLikelihood(),new LossNegativeLogLikelihood(),new LossPoisson(),new LossSquaredHinge(),new LossFMeasure(),new LossFMeasure(2.0)};
  Activation[] outputActivationFn=new Activation[]{Activation.SIGMOID,Activation.SIGMOID,Activation.TANH,Activation.TANH,Activation.SIGMOID,Activation.SOFTMAX,Activation.TANH,Activation.SOFTMAX,Activation.TANH,Activation.SOFTMAX,Activation.IDENTITY,Activation.SOFTMAX,Activation.IDENTITY,Activation.SOFTMAX,Activation.SOFTMAX,Activation.IDENTITY,Activation.SOFTMAX,Activation.SIGMOID,Activation.SOFTMAX,Activation.SIGMOID,Activation.SOFTMAX,Activation.SIGMOID,Activation.TANH,Activation.SIGMOID,Activation.SOFTMAX};
  int[] nOut=new int[]{1,3,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2};
  for (int i=0; i < lossFunctions.length; i++) {
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).updater(Updater.ADAM).list().layer(0,new DenseLayer.Builder().nIn(4).nOut(nOut[i]).activation(Activation.TANH).build()).layer(1,new LossLayer.Builder().lossFunction(lossFunctions[i]).activation(outputActivationFn[i]).build()).validateOutputLayerConfig(false).build();
    String json=conf.toJson();
    String yaml=conf.toYaml();
    MultiLayerConfiguration fromJson=MultiLayerConfiguration.fromJson(json);
    MultiLayerConfiguration fromYaml=MultiLayerConfiguration.fromYaml(yaml);
    assertEquals(conf,fromJson);
    assertEquals(conf,fromYaml);
  }
}
