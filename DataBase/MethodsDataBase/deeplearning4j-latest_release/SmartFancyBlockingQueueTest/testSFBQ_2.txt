@Test public void testSFBQ_2() throws Exception {
  final val queue=new SmartFancyBlockingQueue(1285601,Nd4j.create(5,5));
  final val barrier=new CyclicBarrier(4);
  val threads=new ArrayList<Thread>();
  for (int e=0; e < 4; e++) {
    val f=e;
    val t=new Thread(new Runnable(){
      @Override public void run(){
        int cnt=0;
        while (true) {
          while (cnt < 1000) {
            if (!queue.isEmpty()) {
              if (cnt % 50 == 0)               log.info("Thread {}: [{}]",f,cnt);
              val arr=queue.poll();
              assertNotNull(arr);
              val local=arr.unsafeDuplication(true);
              assertEquals(cnt,local.meanNumber().intValue());
              cnt++;
            }
            try {
              barrier.await();
              if (f == 0)               queue.registerConsumers(4);
              barrier.await();
            }
 catch (            InterruptedException e1) {
              e1.printStackTrace();
            }
catch (            BrokenBarrierException e1) {
              e1.printStackTrace();
            }
          }
          break;
        }
      }
    }
);
    t.setName("reader thread " + f);
    t.start();
    threads.add(t);
  }
  for (int e=0; e < 1000; e++) {
    queue.put(Nd4j.create(5,5).assign(e));
    Nd4j.getExecutioner().commit();
  }
  for (  val t : threads)   t.join();
}
