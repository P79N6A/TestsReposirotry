@Test public void testSFBQ_4() throws Exception {
  final val queue=new SmartFancyBlockingQueue(16,Nd4j.create(5,5));
  final val barrier=new CyclicBarrier(4);
  val threads=new ArrayList<Thread>();
  for (int e=0; e < 4; e++) {
    val f=e;
    val t=new Thread(new Runnable(){
      @Override public void run(){
        try {
          for (int e=0; e < 100; e++) {
            log.info("[Thread {}]: fill phase {}",f,e);
            val numUpdates=RandomUtils.nextInt(8,128);
            for (int p=0; p < numUpdates; p++) {
              queue.put(Nd4j.createUninitialized(5,5));
            }
            if (f == 0)             queue.registerConsumers(4);
            barrier.await();
            log.info("[Thread {}]: read phase {}",f,e);
            while (!queue.isEmpty()) {
              val arr=queue.poll();
              assertNotNull(arr);
            }
            barrier.await();
          }
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
catch (        BrokenBarrierException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
    t.setName("worker thread " + f);
    t.start();
    threads.add(t);
  }
  for (  val t : threads)   t.join();
}
