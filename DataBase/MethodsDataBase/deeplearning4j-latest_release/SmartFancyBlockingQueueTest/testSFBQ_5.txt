@Test public void testSFBQ_5() throws Exception {
  final val queue=new SmartFancyBlockingQueue(16,Nd4j.create(5,5));
  final val barrier=new CyclicBarrier(4);
  val writers=new ArrayList<Thread>();
  for (int e=0; e < 4; e++) {
    val w=new Thread(new Runnable(){
      @Override public void run(){
        while (true) {
          try {
            val n=RandomUtils.nextInt(8,64);
            for (int i=1; i < n + 1; i++) {
              val arr=Nd4j.createUninitialized(5,5).assign(i);
              Nd4j.getExecutioner().commit();
              queue.put(arr);
            }
            ThreadUtils.uncheckedSleep(10);
          }
 catch (          InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
      }
    }
);
    w.setName("writer thread " + e);
    w.setDaemon(true);
    w.start();
    writers.add(w);
  }
  val means=new long[4];
  val readers=new ArrayList<Thread>();
  for (int e=0; e < 4; e++) {
    val f=e;
    means[f]=0;
    val t=new Thread(new Runnable(){
      @Override public void run(){
        try {
          int cnt=0;
          int fnt=0;
          while (cnt < 1000) {
            if (!queue.isEmpty()) {
              while (!queue.isEmpty()) {
                val m=queue.poll();
                val arr=m.unsafeDuplication(true);
                val mean=arr.meanNumber().longValue();
                assertNotEquals("Failed at cycle: " + cnt,0,mean);
                means[f]+=mean;
                cnt++;
              }
              barrier.await();
            }
            barrier.await();
            if (f == 0) {
              log.info("Read cycle finished");
              queue.registerConsumers(4);
            }
            barrier.await();
          }
        }
 catch (        InterruptedException e) {
          throw new RuntimeException(e);
        }
catch (        BrokenBarrierException e) {
          throw new RuntimeException(e);
        }
      }
    }
);
    t.setName("reader thread " + f);
    t.start();
    readers.add(t);
  }
  for (  val t : readers)   t.join();
  assertEquals(means[0],means[1]);
  assertEquals(means[0],means[2]);
  assertEquals(means[0],means[3]);
}
