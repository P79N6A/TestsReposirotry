@Test @Ignore public void testCompareIm2ColImpl(){
  int[] miniBatches={1,3,5};
  int[] depths={1,3,5};
  int[] inHeights={5,21};
  int[] inWidths={5,21};
  int[] strideH={1,2};
  int[] strideW={1,2};
  int[] sizeW={1,2,3};
  int[] sizeH={1,2,3};
  int[] padH={0,1,2};
  int[] padW={0,1,2};
  boolean[] coverall={false,true};
  DataBuffer.Type[] types=new DataBuffer.Type[]{DataBuffer.Type.FLOAT,DataBuffer.Type.DOUBLE,DataBuffer.Type.FLOAT,DataBuffer.Type.DOUBLE};
  DataBuffer.AllocationMode[] modes=new DataBuffer.AllocationMode[]{DataBuffer.AllocationMode.HEAP,DataBuffer.AllocationMode.HEAP,DataBuffer.AllocationMode.DIRECT,DataBuffer.AllocationMode.DIRECT};
  String factoryClassName=Nd4j.factory().getClass().toString().toLowerCase();
  if (factoryClassName.contains("jcublas") || factoryClassName.contains("cuda")) {
    types=new DataBuffer.Type[]{DataBuffer.Type.FLOAT,DataBuffer.Type.DOUBLE};
    modes=new DataBuffer.AllocationMode[]{DataBuffer.AllocationMode.DIRECT,DataBuffer.AllocationMode.DIRECT};
  }
  DataBuffer.Type initialType=Nd4j.dataType();
  for (int i=0; i < types.length; i++) {
    DataBuffer.Type type=types[i];
    DataBuffer.AllocationMode mode=modes[i];
    DataTypeUtil.setDTypeForContext(type);
    Nd4j.alloc=mode;
    AllocUtil.setAllocationModeForContext(mode);
    for (    int m : miniBatches) {
      for (      int d : depths) {
        for (        int h : inHeights) {
          for (          int w : inWidths) {
            for (            int sh : strideH) {
              for (              int sw : strideW) {
                for (                int kh : sizeH) {
                  for (                  int kw : sizeW) {
                    for (                    int ph : padH) {
                      for (                      int pw : padW) {
                        if ((w - kw + 2 * pw) % sw != 0 || (h - kh + 2 * ph) % sh != 0)                         continue;
                        System.out.println("Running " + m + " "+ d+ " "+ h+ " "+ w);
                        for (                        boolean cAll : coverall) {
                          INDArray in=Nd4j.rand(new int[]{m,d,h,w});
                          INDArray outOrig=OldConvolution.im2col(in,kh,kw,sh,sw,ph,pw,-1,cAll);
                          INDArray outNew=Convolution.im2col(in,kh,kw,sh,sw,ph,pw,cAll);
                          assertEquals(outOrig,outNew);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  DataTypeUtil.setDTypeForContext(initialType);
}
