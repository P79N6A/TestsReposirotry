@Test public void gradientCheckMaskingOutputSimple(){
  int timeSeriesLength=5;
  boolean[][] mask=new boolean[5][0];
  mask[0]=new boolean[]{true,true,true,true,true};
  mask[1]=new boolean[]{false,true,true,true,true};
  mask[2]=new boolean[]{false,false,false,false,true};
  mask[3]=new boolean[]{false,false,true,false,true};
  mask[4]=new boolean[]{true,true,true,false,true};
  int nIn=4;
  int layerSize=3;
  GradientCheckSimpleScenario[] scenarios=new GradientCheckSimpleScenario[]{new GradientCheckSimpleScenario(LossFunctions.LossFunction.MCXENT.getILossFunction(),Activation.SOFTMAX,2,2),new GradientCheckSimpleScenario(LossMixtureDensity.builder().gaussians(2).labelWidth(3).build(),Activation.TANH,10,3),new GradientCheckSimpleScenario(LossMixtureDensity.builder().gaussians(2).labelWidth(4).build(),Activation.IDENTITY,12,4),new GradientCheckSimpleScenario(LossFunctions.LossFunction.L2.getILossFunction(),Activation.SOFTMAX,2,2)};
  for (  GradientCheckSimpleScenario s : scenarios) {
    Random r=new Random(12345L);
    INDArray input=Nd4j.zeros(1,nIn,timeSeriesLength);
    for (int m=0; m < 1; m++) {
      for (int j=0; j < nIn; j++) {
        for (int k=0; k < timeSeriesLength; k++) {
          input.putScalar(new int[]{m,j,k},r.nextDouble() - 0.5);
        }
      }
    }
    INDArray labels=Nd4j.zeros(1,s.labelWidth,timeSeriesLength);
    for (int m=0; m < 1; m++) {
      for (int j=0; j < timeSeriesLength; j++) {
        int idx=r.nextInt(s.labelWidth);
        labels.putScalar(new int[]{m,idx,j},1.0f);
      }
    }
    for (int i=0; i < mask.length; i++) {
      INDArray maskArr=Nd4j.create(1,timeSeriesLength);
      for (int j=0; j < mask[i].length; j++) {
        maskArr.putScalar(new int[]{0,j},mask[i][j] ? 1.0 : 0.0);
      }
      MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345L).list().layer(0,new GravesLSTM.Builder().nIn(nIn).nOut(layerSize).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).updater(new NoOp()).build()).layer(1,new RnnOutputLayer.Builder(s.lf).activation(s.act).nIn(layerSize).nOut(s.nOut).weightInit(WeightInit.DISTRIBUTION).dist(new NormalDistribution(0,1)).updater(new NoOp()).build()).build();
      MultiLayerNetwork mln=new MultiLayerNetwork(conf);
      mln.init();
      boolean gradOK=GradientCheckUtil.checkGradients(mln,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,input,labels,null,maskArr);
      String msg="gradientCheckMaskingOutputSimple() - timeSeriesLength=" + timeSeriesLength + ", miniBatchSize="+ 1;
      assertTrue(msg,gradOK);
      TestUtils.testModelSerialization(mln);
    }
  }
}
