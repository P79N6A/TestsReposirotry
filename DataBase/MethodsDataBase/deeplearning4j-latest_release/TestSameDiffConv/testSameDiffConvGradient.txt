@Test public void testSameDiffConvGradient(){
  assumeTrue("CPU".equalsIgnoreCase(Nd4j.getExecutioner().getEnvironmentInformation().getProperty("backend")));
  int imgH=8;
  int imgW=8;
  int nIn=3;
  int nOut=4;
  int[] kernel={2,2};
  int[] strides={1,1};
  int[] dilation={1,1};
  int count=0;
  Random r=new Random(12345);
  int n=1;
  int m=5;
  for (  boolean workspaces : new boolean[]{false,true}) {
    for (    int minibatch : new int[]{5,1}) {
      for (      boolean hasBias : new boolean[]{true,false}) {
        for (        ConvolutionMode cm : new ConvolutionMode[]{ConvolutionMode.Truncate,ConvolutionMode.Same}) {
          int i=r.nextInt(m);
          if (i >= n) {
            continue;
          }
          String msg="Test " + (count++) + " - minibatch="+ minibatch+ ", ConvolutionMode="+ cm+ ", hasBias="+ hasBias;
          int outH=cm == ConvolutionMode.Same ? imgH : (imgH - 2);
          int outW=cm == ConvolutionMode.Same ? imgW : (imgW - 2);
          MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().seed(12345).updater(new NoOp()).trainingWorkspaceMode(workspaces ? WorkspaceMode.ENABLED : WorkspaceMode.NONE).inferenceWorkspaceMode(workspaces ? WorkspaceMode.ENABLED : WorkspaceMode.NONE).list().layer(new SameDiffConv.Builder().weightInit(WeightInit.XAVIER).nIn(nIn).nOut(nOut).kernelSize(kernel).stride(strides).dilation(dilation).convolutionMode(cm).activation(Activation.TANH).hasBias(hasBias).build()).layer(new SameDiffConv.Builder().weightInit(WeightInit.XAVIER).nIn(nOut).nOut(nOut).kernelSize(kernel).stride(strides).dilation(dilation).convolutionMode(cm).activation(Activation.SIGMOID).hasBias(hasBias).build()).layer(new OutputLayer.Builder().activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).nIn(nOut * outH * outW).nOut(nOut).build()).inputPreProcessor(2,new CnnToFeedForwardPreProcessor(outH,outW,nOut)).build();
          MultiLayerNetwork net=new MultiLayerNetwork(conf);
          net.init();
          INDArray f=Nd4j.rand(new int[]{minibatch,nIn,imgH,imgW});
          INDArray l=TestUtils.randomOneHot(minibatch,nOut);
          log.info("Starting: " + msg);
          boolean gradOK=GradientCheckUtil.checkGradients(net,DEFAULT_EPS,DEFAULT_MAX_REL_ERROR,DEFAULT_MIN_ABS_ERROR,PRINT_RESULTS,RETURN_ON_FIRST_FAILURE,f,l);
          assertTrue(msg,gradOK);
          TestUtils.testModelSerialization(net);
        }
      }
    }
  }
}
