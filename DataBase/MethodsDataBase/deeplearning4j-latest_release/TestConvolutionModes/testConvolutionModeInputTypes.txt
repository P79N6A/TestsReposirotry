@Test public void testConvolutionModeInputTypes(){
  int inH=3;
  int inW=3;
  int kH=2;
  int kW=2;
  int sH=1;
  int sW=1;
  int pH=0;
  int pW=0;
  int minibatch=3;
  int dIn=5;
  int dOut=7;
  int[] kernel={kH,kW};
  int[] stride={sH,sW};
  int[] padding={pH,pW};
  int[] dilation={1,1};
  INDArray inData=Nd4j.create(minibatch,dIn,inH,inW);
  InputType inputType=InputType.convolutional(inH,inW,dIn);
  InputType.InputTypeConvolutional it=(InputType.InputTypeConvolutional)InputTypeUtil.getOutputTypeCnnLayers(inputType,kernel,stride,padding,dilation,ConvolutionMode.Strict,dOut,-1,"layerName",ConvolutionLayer.class);
  assertEquals(2,it.getHeight());
  assertEquals(2,it.getWidth());
  assertEquals(dOut,it.getChannels());
  int[] outSize=ConvolutionUtils.getOutputSize(inData,kernel,stride,padding,ConvolutionMode.Strict);
  assertEquals(2,outSize[0]);
  assertEquals(2,outSize[1]);
  it=(InputType.InputTypeConvolutional)InputTypeUtil.getOutputTypeCnnLayers(inputType,kernel,stride,padding,dilation,ConvolutionMode.Truncate,dOut,-1,"layerName",ConvolutionLayer.class);
  assertEquals(2,it.getHeight());
  assertEquals(2,it.getWidth());
  assertEquals(dOut,it.getChannels());
  outSize=ConvolutionUtils.getOutputSize(inData,kernel,stride,padding,ConvolutionMode.Truncate);
  assertEquals(2,outSize[0]);
  assertEquals(2,outSize[1]);
  it=(InputType.InputTypeConvolutional)InputTypeUtil.getOutputTypeCnnLayers(inputType,kernel,stride,null,dilation,ConvolutionMode.Same,dOut,-1,"layerName",ConvolutionLayer.class);
  assertEquals(3,it.getHeight());
  assertEquals(3,it.getWidth());
  assertEquals(dOut,it.getChannels());
  outSize=ConvolutionUtils.getOutputSize(inData,kernel,stride,null,ConvolutionMode.Same);
  assertEquals(3,outSize[0]);
  assertEquals(3,outSize[1]);
  inH=3;
  inW=4;
  kH=3;
  kW=3;
  sH=2;
  sW=2;
  kernel=new int[]{kH,kW};
  stride=new int[]{sH,sW};
  padding=new int[]{pH,pW};
  inData=Nd4j.create(minibatch,dIn,inH,inW);
  inputType=InputType.convolutional(inH,inW,dIn);
  try {
    InputTypeUtil.getOutputTypeCnnLayers(inputType,kernel,stride,padding,dilation,ConvolutionMode.Strict,dOut,-1,"layerName",ConvolutionLayer.class);
    fail("Expected exception");
  }
 catch (  DL4JException e) {
    System.out.println(e.getMessage());
  }
  try {
    outSize=ConvolutionUtils.getOutputSize(inData,kernel,stride,padding,ConvolutionMode.Strict);
    fail("Exception expected");
  }
 catch (  DL4JException e) {
    System.out.println(e.getMessage());
  }
  it=(InputType.InputTypeConvolutional)InputTypeUtil.getOutputTypeCnnLayers(inputType,kernel,stride,padding,dilation,ConvolutionMode.Truncate,dOut,-1,"layerName",ConvolutionLayer.class);
  assertEquals(1,it.getHeight());
  assertEquals(1,it.getWidth());
  assertEquals(dOut,it.getChannels());
  outSize=ConvolutionUtils.getOutputSize(inData,kernel,stride,padding,ConvolutionMode.Truncate);
  assertEquals(1,outSize[0]);
  assertEquals(1,outSize[1]);
  it=(InputType.InputTypeConvolutional)InputTypeUtil.getOutputTypeCnnLayers(inputType,kernel,stride,null,dilation,ConvolutionMode.Same,dOut,-1,"layerName",ConvolutionLayer.class);
  assertEquals(2,it.getHeight());
  assertEquals(2,it.getWidth());
  assertEquals(dOut,it.getChannels());
  outSize=ConvolutionUtils.getOutputSize(inData,kernel,stride,null,ConvolutionMode.Same);
  assertEquals(2,outSize[0]);
  assertEquals(2,outSize[1]);
}
