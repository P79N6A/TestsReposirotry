@Test public void testStrictTruncateConvolutionModeCompGraph(){
  Nd4j.getRandom().setSeed(12345);
  int[] minibatches={1,3};
  int[] inDepths={1,3};
  int[] inSizes={9,10,11};
  for (  boolean isSubsampling : new boolean[]{false,true}) {
    for (    int minibatch : minibatches) {
      for (      int inDepth : inDepths) {
        INDArray origData=Nd4j.rand(new int[]{minibatch,inDepth,9,9});
        for (        int inSize : inSizes) {
          for (          ConvolutionMode cm : new ConvolutionMode[]{ConvolutionMode.Strict,ConvolutionMode.Truncate}) {
            INDArray inputData=Nd4j.rand(new int[]{minibatch,inDepth,inSize,inSize});
            inputData.get(NDArrayIndex.all(),NDArrayIndex.all(),NDArrayIndex.interval(0,9),NDArrayIndex.interval(0,9)).assign(origData);
            Layer layer;
            if (isSubsampling) {
              layer=new SubsamplingLayer.Builder().kernelSize(3,3).stride(3,3).padding(0,0).build();
            }
 else {
              layer=new ConvolutionLayer.Builder().kernelSize(3,3).stride(3,3).padding(0,0).nOut(3).build();
            }
            ComputationGraph net=null;
            try {
              ComputationGraphConfiguration conf=new NeuralNetConfiguration.Builder().weightInit(WeightInit.XAVIER).convolutionMode(cm).graphBuilder().addInputs("in").addLayer("0",layer,"in").addLayer("1",new OutputLayer.Builder().activation(Activation.SOFTMAX).lossFunction(LossFunctions.LossFunction.MCXENT).nOut(3).build(),"0").setOutputs("1").setInputTypes(InputType.convolutional(inSize,inSize,inDepth)).build();
              net=new ComputationGraph(conf);
              net.init();
              if (inSize > 9 && cm == ConvolutionMode.Strict) {
                fail("Expected exception");
              }
            }
 catch (            DL4JException e) {
              if (inSize == 9 || cm != ConvolutionMode.Strict) {
                e.printStackTrace();
                fail("Unexpected exception");
              }
              continue;
            }
catch (            Exception e) {
              e.printStackTrace();
              fail("Unexpected exception");
            }
            INDArray out=net.outputSingle(origData);
            INDArray out2=net.outputSingle(inputData);
            assertEquals(out,out2);
          }
        }
      }
    }
  }
}
