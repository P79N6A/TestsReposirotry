@Test public void testSameModeActivationSizes(){
  int inH=3;
  int inW=4;
  int inDepth=3;
  int minibatch=5;
  int sH=2;
  int sW=2;
  int kH=3;
  int kW=3;
  Layer[] l=new Layer[2];
  l[0]=new ConvolutionLayer.Builder().nOut(4).kernelSize(kH,kW).stride(sH,sW).build();
  l[1]=new SubsamplingLayer.Builder().kernelSize(kH,kW).stride(sH,sW).build();
  for (int i=0; i < l.length; i++) {
    MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().convolutionMode(ConvolutionMode.Same).list().layer(0,l[i]).layer(1,new OutputLayer.Builder().nOut(3).activation(Activation.SOFTMAX).build()).setInputType(InputType.convolutional(inH,inW,inDepth)).build();
    MultiLayerNetwork net=new MultiLayerNetwork(conf);
    net.init();
    INDArray inData=Nd4j.create(minibatch,inDepth,inH,inW);
    List<INDArray> activations=net.feedForward(inData);
    INDArray actL0=activations.get(1);
    int outH=(int)Math.ceil(inH / ((double)sH));
    int outW=(int)Math.ceil(inW / ((double)sW));
    System.out.println(Arrays.toString(actL0.shape()));
    assertArrayEquals(new long[]{minibatch,(i == 0 ? 4 : inDepth),outH,outW},actL0.shape());
  }
}
