@Test public void testELUDerivative(){
  INDArray z=Nd4j.zeros(100);
  double[] out=new double[100];
  double[] outDeriv=new double[100];
  for (int i=0; i < 100; i++) {
    double x=0.1 * (i - 50);
    z.putScalar(i,x);
    if (x >= 0) {
      out[i]=x;
      outDeriv[i]=1.0;
    }
 else {
      out[i]=FastMath.exp(x) - 1.0;
      outDeriv[i]=FastMath.exp(x);
    }
  }
  INDArray act=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("elu",z.dup()));
  INDArray actDeriv=Nd4j.getExecutioner().execAndReturn(new ELUDerivative(z.dup()));
  System.out.println(act);
  for (int i=0; i < 100; i++) {
    double relError1=Math.abs(out[i] - act.getDouble(i)) / (Math.abs(out[i]) + Math.abs(act.getDouble(i)));
    if (out[i] == 0.0 && act.getDouble(i) == 0.0)     relError1=0.0;
    double relError2=Math.abs(outDeriv[i] - actDeriv.getDouble(i)) / (Math.abs(outDeriv[i]) + Math.abs(actDeriv.getDouble(i)));
    if (outDeriv[i] == 0.0 && actDeriv.getDouble(i) == 0.0)     relError2=0.0;
    assertTrue(relError1 < REL_ERROR_TOLERANCE);
    assertTrue(relError2 < REL_ERROR_TOLERANCE);
  }
}
