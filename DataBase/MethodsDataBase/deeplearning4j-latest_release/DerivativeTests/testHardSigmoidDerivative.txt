@Test public void testHardSigmoidDerivative(){
  double[] expHSOut=new double[300];
  double[] expDerivOut=new double[300];
  INDArray xArr=Nd4j.linspace(-3,3,300);
  for (int i=0; i < xArr.length(); i++) {
    double x=xArr.getDouble(i);
    double hs=0.2 * x + 0.5;
    if (hs < 0)     hs=0;
    if (hs > 1)     hs=1;
    expHSOut[i]=hs;
    double hsDeriv;
    if (x < -2.5 || x > 2.5)     hsDeriv=0;
 else     hsDeriv=0.2;
    expDerivOut[i]=hsDeriv;
  }
  INDArray z=Nd4j.getExecutioner().execAndReturn(Nd4j.getOpFactory().createTransform("hard_sigmoid",xArr.dup()));
  INDArray zPrime=Nd4j.getExecutioner().execAndReturn(new HardSigmoidDerivative(xArr.dup()));
  System.out.println(xArr);
  System.out.println(z);
  System.out.println(zPrime);
  for (int i=0; i < expHSOut.length; i++) {
    double relErrorHS=Math.abs(expHSOut[i] - z.getDouble(i)) / (Math.abs(expHSOut[i]) + Math.abs(z.getDouble(i)));
    if (!(expHSOut[i] == 0 && z.getDouble(i) == 0)) {
      assertTrue(relErrorHS < REL_ERROR_TOLERANCE);
    }
    double relErrorDeriv=Math.abs(expDerivOut[i] - zPrime.getDouble(i)) / (Math.abs(expDerivOut[i]) + Math.abs(zPrime.getDouble(i)));
    if (!(expDerivOut[i] == 0 && zPrime.getDouble(i) == 0)) {
      assertTrue(relErrorDeriv < REL_ERROR_TOLERANCE);
    }
  }
}
