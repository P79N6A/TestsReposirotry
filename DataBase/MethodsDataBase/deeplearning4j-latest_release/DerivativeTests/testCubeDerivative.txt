@Test public void testCubeDerivative(){
  INDArray z=Nd4j.zeros(100);
  double[] expOut=new double[100];
  for (int i=0; i < 100; i++) {
    double x=0.1 * (i - 50);
    z.putScalar(i,x);
    expOut[i]=3 * x * x;
  }
  INDArray zPrime=Nd4j.getExecutioner().execAndReturn(new CubeDerivative(z));
  for (int i=0; i < 100; i++) {
    double d1=expOut[i];
    double d2=zPrime.getDouble(i);
    double relError=Math.abs(d1 - d1) / (Math.abs(d1) + Math.abs(d2));
    if (d1 == 0.0 && d2 == 0.0)     relError=0.0;
    String str="exp=" + expOut[i] + ", act="+ zPrime.getDouble(i)+ "; relError = "+ relError;
    assertTrue(str,relError < REL_ERROR_TOLERANCE);
  }
}
