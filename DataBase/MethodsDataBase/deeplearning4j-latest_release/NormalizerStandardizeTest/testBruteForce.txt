@Test public void testBruteForce(){
  double tolerancePerc=0.01;
  int nSamples=5120;
  int x=1, y=2, z=3;
  INDArray featureX=Nd4j.linspace(1,nSamples,nSamples).reshape(nSamples,1).mul(x);
  INDArray featureY=featureX.mul(y);
  INDArray featureZ=featureX.mul(z);
  INDArray featureSet=Nd4j.concat(1,featureX,featureY,featureZ);
  INDArray labelSet=Nd4j.zeros(nSamples,1);
  DataSet sampleDataSet=new DataSet(featureSet,labelSet);
  double meanNaturalNums=(nSamples + 1) / 2.0;
  INDArray theoreticalMean=Nd4j.create(new double[]{meanNaturalNums * x,meanNaturalNums * y,meanNaturalNums * z});
  double stdNaturalNums=Math.sqrt((nSamples * nSamples - 1) / 12.0);
  INDArray theoreticalStd=Nd4j.create(new double[]{stdNaturalNums * x,stdNaturalNums * y,stdNaturalNums * z});
  NormalizerStandardize myNormalizer=new NormalizerStandardize();
  myNormalizer.fit(sampleDataSet);
  INDArray meanDelta=Transforms.abs(theoreticalMean.sub(myNormalizer.getMean()));
  INDArray meanDeltaPerc=meanDelta.div(theoreticalMean).mul(100);
  double maxMeanDeltaPerc=meanDeltaPerc.max(1).getDouble(0,0);
  assertTrue(maxMeanDeltaPerc < tolerancePerc);
  INDArray stdDelta=Transforms.abs(theoreticalStd.sub(myNormalizer.getStd()));
  INDArray stdDeltaPerc=stdDelta.div(theoreticalStd).mul(100);
  double maxStdDeltaPerc=stdDeltaPerc.max(1).getDouble(0,0);
  assertTrue(maxStdDeltaPerc < tolerancePerc);
  int bSize=10;
  tolerancePerc=0.1;
  DataSetIterator sampleIter=new TestDataSetIterator(sampleDataSet,bSize);
  myNormalizer.fit(sampleIter);
  meanDelta=Transforms.abs(theoreticalMean.sub(myNormalizer.getMean()));
  meanDeltaPerc=meanDelta.div(theoreticalMean).mul(100);
  maxMeanDeltaPerc=meanDeltaPerc.max(1).getDouble(0,0);
  assertTrue(maxMeanDeltaPerc < tolerancePerc);
  stdDelta=Transforms.abs(theoreticalStd.sub(myNormalizer.getStd()));
  stdDeltaPerc=stdDelta.div(theoreticalStd).mul(100);
  maxStdDeltaPerc=stdDeltaPerc.max(1).getDouble(0,0);
  assertTrue(maxStdDeltaPerc < tolerancePerc);
}
