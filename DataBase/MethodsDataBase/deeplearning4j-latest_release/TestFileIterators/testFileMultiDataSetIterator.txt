@Test public void testFileMultiDataSetIterator() throws Exception {
  folder.create();
  File f=folder.newFolder();
  MultiDataSet d1=new org.nd4j.linalg.dataset.MultiDataSet(Nd4j.linspace(1,10,10).transpose(),Nd4j.linspace(101,110,10).transpose());
  MultiDataSet d2=new org.nd4j.linalg.dataset.MultiDataSet(Nd4j.linspace(11,20,10).transpose(),Nd4j.linspace(111,120,10).transpose());
  MultiDataSet d3=new org.nd4j.linalg.dataset.MultiDataSet(Nd4j.linspace(21,30,10).transpose(),Nd4j.linspace(121,130,10).transpose());
  d1.save(new File(f,"d1.bin"));
  File f2=new File(f,"subdir/d2.bin");
  f2.getParentFile().mkdir();
  d2.save(f2);
  d3.save(new File(f,"d3.otherExt"));
  Map<Double,MultiDataSet> exp=new HashMap<>();
  exp.put(d1.getFeatures(0).getDouble(0),d1);
  exp.put(d2.getFeatures(0).getDouble(0),d2);
  exp.put(d3.getFeatures(0).getDouble(0),d3);
  MultiDataSetIterator iter=new FileMultiDataSetIterator(f,true,null,-1,(String[])null);
  Map<Double,MultiDataSet> act=new HashMap<>();
  while (iter.hasNext()) {
    MultiDataSet next=iter.next();
    act.put(next.getFeatures(0).getDouble(0),next);
  }
  assertEquals(exp,act);
  folder2.create();
  File f2a=folder2.newFolder();
  File f2b=folder2.newFolder();
  File f2c=folder2.newFolder();
  d1.save(new File(f2a,"d1.bin"));
  d2.save(new File(f2a,"d2.bin"));
  d3.save(new File(f2b,"d3.bin"));
  d1.save(new File(f2c,"d1.bin"));
  d2.save(new File(f2c,"d2.bin"));
  d3.save(new File(f2c,"d3.bin"));
  iter=new FileMultiDataSetIterator(f2c,true,null,-1,(String[])null);
  MultiDataSetIterator iterMultiDir=new FileMultiDataSetIterator(new File[]{f2a,f2b},true,null,-1,(String[])null);
  iter.reset();
  int count=0;
  Map<Double,MultiDataSet> m1=new HashMap<>();
  Map<Double,MultiDataSet> m2=new HashMap<>();
  while (iter.hasNext()) {
    MultiDataSet ds1=iter.next();
    MultiDataSet ds2=iterMultiDir.next();
    m1.put(ds1.getFeatures(0).getDouble(0),ds1);
    m2.put(ds2.getFeatures(0).getDouble(0),ds2);
    count++;
  }
  assertEquals(3,count);
  assertEquals(m1,m2);
  exp=new HashMap<>();
  exp.put(d1.getFeatures(0).getDouble(0),d1);
  exp.put(d2.getFeatures(0).getDouble(0),d2);
  iter=new FileMultiDataSetIterator(f,true,null,-1,"bin");
  act=new HashMap<>();
  while (iter.hasNext()) {
    MultiDataSet next=iter.next();
    act.put(next.getFeatures(0).getDouble(0),next);
  }
  assertEquals(exp,act);
  exp=new HashMap<>();
  exp.put(d1.getFeatures(0).getDouble(0),d1);
  exp.put(d3.getFeatures(0).getDouble(0),d3);
  iter=new FileMultiDataSetIterator(f,false,null,-1,(String[])null);
  act=new HashMap<>();
  while (iter.hasNext()) {
    MultiDataSet next=iter.next();
    act.put(next.getFeatures(0).getDouble(0),next);
  }
  assertEquals(exp,act);
  f=folder.newFolder();
  d1.save(new File(f,"d1.bin"));
  d2.save(new File(f,"d2.bin"));
  d3.save(new File(f,"d3.bin"));
  iter=new FileMultiDataSetIterator(f,true,null,15,(String[])null);
  count=0;
  while (iter.hasNext()) {
    MultiDataSet next=iter.next();
    assertArrayEquals(new long[]{15,1},next.getFeatures(0).shape());
    assertArrayEquals(new long[]{15,1},next.getLabels(0).shape());
    count++;
  }
  assertEquals(2,count);
}
