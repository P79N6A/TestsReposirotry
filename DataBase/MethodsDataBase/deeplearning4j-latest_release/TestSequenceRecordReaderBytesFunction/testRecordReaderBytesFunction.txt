@Test public void testRecordReaderBytesFunction() throws Exception {
  File f=testDir.newFolder();
  new ClassPathResource("datavec-spark/video/").copyDirectory(f);
  String path=f.getAbsolutePath() + "/*";
  JavaPairRDD<String,PortableDataStream> origData=sc.binaryFiles(path);
  JavaPairRDD<Text,BytesWritable> filesAsBytes=origData.mapToPair(new FilesAsBytesFunction());
  Path p=Files.createTempDirectory("dl4j_rrbytesTest");
  p.toFile().deleteOnExit();
  String outPath=p.toString() + "/out";
  filesAsBytes.saveAsNewAPIHadoopFile(outPath,Text.class,BytesWritable.class,SequenceFileOutputFormat.class);
  JavaPairRDD<Text,BytesWritable> fromSeqFile=sc.sequenceFile(outPath,Text.class,BytesWritable.class);
  SequenceRecordReader seqRR=new CodecRecordReader();
  Configuration conf=new Configuration();
  conf.set(CodecRecordReader.RAVEL,"true");
  conf.set(CodecRecordReader.START_FRAME,"0");
  conf.set(CodecRecordReader.TOTAL_FRAMES,"25");
  conf.set(CodecRecordReader.ROWS,"64");
  conf.set(CodecRecordReader.COLUMNS,"64");
  Configuration confCopy=new Configuration(conf);
  seqRR.setConf(conf);
  JavaRDD<List<List<Writable>>> dataVecData=fromSeqFile.map(new SequenceRecordReaderBytesFunction(seqRR));
  InputSplit is=new FileSplit(f,new String[]{"mp4"},true);
  SequenceRecordReader srr=new CodecRecordReader();
  srr.initialize(is);
  srr.setConf(confCopy);
  List<List<List<Writable>>> list=new ArrayList<>(4);
  while (srr.hasNext()) {
    list.add(srr.sequenceRecord());
  }
  assertEquals(4,list.size());
  List<List<List<Writable>>> fromSequenceFile=dataVecData.collect();
  assertEquals(4,list.size());
  assertEquals(4,fromSequenceFile.size());
  boolean[] found=new boolean[4];
  for (int i=0; i < 4; i++) {
    int foundIndex=-1;
    List<List<Writable>> collection=fromSequenceFile.get(i);
    for (int j=0; j < 4; j++) {
      if (collection.equals(list.get(j))) {
        if (foundIndex != -1)         fail();
        foundIndex=j;
        if (found[foundIndex])         fail();
        found[foundIndex]=true;
      }
    }
  }
  int count=0;
  for (  boolean b : found)   if (b)   count++;
  assertEquals(4,count);
}
