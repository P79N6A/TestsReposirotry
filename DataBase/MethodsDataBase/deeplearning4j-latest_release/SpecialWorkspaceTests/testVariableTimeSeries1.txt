@Test public void testVariableTimeSeries1() throws Exception {
  WorkspaceConfiguration configuration=WorkspaceConfiguration.builder().initialSize(0).overallocationLimit(3.0).policyAllocation(AllocationPolicy.OVERALLOCATE).policySpill(SpillPolicy.EXTERNAL).policyLearning(LearningPolicy.FIRST_LOOP).policyReset(ResetPolicy.ENDOFBUFFER_REACHED).build();
  try (MemoryWorkspace ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(configuration,"WS1")){
    Nd4j.create(500);
    Nd4j.create(500);
  }
   Nd4jWorkspace workspace=(Nd4jWorkspace)Nd4j.getWorkspaceManager().getWorkspaceForCurrentThread("WS1");
  workspace.enableDebug(true);
  assertEquals(0,workspace.getStepNumber());
  long requiredMemory=1000 * Nd4j.sizeOfDataType();
  long shiftedSize=((long)(requiredMemory * 1.3)) + (8 - (((long)(requiredMemory * 1.3)) % 8));
  assertEquals(requiredMemory,workspace.getSpilledSize());
  assertEquals(shiftedSize,workspace.getInitialBlockSize());
  assertEquals(workspace.getInitialBlockSize() * 4,workspace.getCurrentSize());
  try (MemoryWorkspace ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace("WS1")){
    Nd4j.create(2000);
  }
   assertEquals(0,workspace.getStepNumber());
  assertEquals(1000 * Nd4j.sizeOfDataType(),workspace.getSpilledSize());
  assertEquals(2000 * Nd4j.sizeOfDataType(),workspace.getPinnedSize());
  assertEquals(0,workspace.getDeviceOffset());
  assertEquals(0,workspace.getThisCycleAllocations());
  log.info("------------------");
  assertEquals(1,workspace.getNumberOfPinnedAllocations());
  for (int e=0; e < 4; e++) {
    for (int i=0; i < 4; i++) {
      try (MemoryWorkspace ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(configuration,"WS1")){
        Nd4j.create(500);
        Nd4j.create(500);
      }
       assertEquals("Failed on iteration " + i,(i + 1) * workspace.getInitialBlockSize(),workspace.getDeviceOffset());
    }
    if (e >= 2) {
      assertEquals("Failed on iteration " + e,0,workspace.getNumberOfPinnedAllocations());
    }
 else {
      assertEquals("Failed on iteration " + e,1,workspace.getNumberOfPinnedAllocations());
    }
  }
  assertEquals(0,workspace.getSpilledSize());
  assertEquals(0,workspace.getPinnedSize());
  assertEquals(0,workspace.getNumberOfPinnedAllocations());
  assertEquals(0,workspace.getNumberOfExternalAllocations());
  log.info("Workspace state after first block: ---------------------------------------------------------");
  Nd4j.getWorkspaceManager().printAllocationStatisticsForCurrentThread();
  log.info("--------------------------------------------------------------------------------------------");
  for (int i=0; i < 100; i++) {
    try (MemoryWorkspace ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(configuration,"WS1")){
      Nd4j.create(500);
      Nd4j.create(500);
      Nd4j.create(500);
      assertEquals(1500 * Nd4j.sizeOfDataType(),workspace.getThisCycleAllocations());
    }
   }
  assertEquals(0,workspace.getSpilledSize());
  assertNotEquals(0,workspace.getPinnedSize());
  assertNotEquals(0,workspace.getNumberOfPinnedAllocations());
  assertEquals(0,workspace.getNumberOfExternalAllocations());
  for (int i=0; i < 100; i++) {
    try (MemoryWorkspace ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(configuration,"WS1")){
      Nd4j.create(500);
      Nd4j.create(500);
    }
   }
  assertEquals(0,workspace.getSpilledSize());
  assertEquals(0,workspace.getPinnedSize());
  assertEquals(0,workspace.getNumberOfPinnedAllocations());
  assertEquals(0,workspace.getNumberOfExternalAllocations());
  log.info("Workspace state after second block: ---------------------------------------------------------");
  Nd4j.getWorkspaceManager().printAllocationStatisticsForCurrentThread();
}
