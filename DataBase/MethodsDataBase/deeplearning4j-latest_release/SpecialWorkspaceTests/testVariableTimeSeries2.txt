@Test public void testVariableTimeSeries2() throws Exception {
  WorkspaceConfiguration configuration=WorkspaceConfiguration.builder().initialSize(0).overallocationLimit(3.0).policyAllocation(AllocationPolicy.OVERALLOCATE).policySpill(SpillPolicy.REALLOCATE).policyLearning(LearningPolicy.FIRST_LOOP).policyReset(ResetPolicy.ENDOFBUFFER_REACHED).build();
  Nd4jWorkspace workspace=(Nd4jWorkspace)Nd4j.getWorkspaceManager().getWorkspaceForCurrentThread(configuration,"WS1");
  workspace.enableDebug(true);
  try (MemoryWorkspace ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(configuration,"WS1")){
    Nd4j.create(500);
    Nd4j.create(500);
  }
   assertEquals(0,workspace.getStepNumber());
  long requiredMemory=1000 * Nd4j.sizeOfDataType();
  long shiftedSize=((long)(requiredMemory * 1.3)) + (8 - (((long)(requiredMemory * 1.3)) % 8));
  assertEquals(requiredMemory,workspace.getSpilledSize());
  assertEquals(shiftedSize,workspace.getInitialBlockSize());
  assertEquals(workspace.getInitialBlockSize() * 4,workspace.getCurrentSize());
  for (int i=0; i < 100; i++) {
    try (MemoryWorkspace ws=Nd4j.getWorkspaceManager().getAndActivateWorkspace(configuration,"WS1")){
      Nd4j.create(500);
      Nd4j.create(500);
      Nd4j.create(500);
    }
   }
  assertEquals(workspace.getInitialBlockSize() * 4,workspace.getCurrentSize());
  assertEquals(0,workspace.getNumberOfPinnedAllocations());
  assertEquals(0,workspace.getNumberOfExternalAllocations());
  assertEquals(0,workspace.getSpilledSize());
  assertEquals(0,workspace.getPinnedSize());
}
