@Test public void testInitPretrained() throws IOException {
  ZooModel model=ResNet50.builder().numClasses(0).build();
  assertTrue(model.pretrainedAvailable(PretrainedType.IMAGENET));
  ComputationGraph initializedModel=(ComputationGraph)model.initPretrained();
  INDArray f=Nd4j.rand(new int[]{1,3,224,224});
  INDArray[] result=initializedModel.output(f);
  assertArrayEquals(result[0].shape(),new long[]{1,1000});
  initializedModel=new TransferLearning.GraphBuilder(initializedModel).removeVertexAndConnections("fc1000").addLayer("fc1000",new OutputLayer.Builder().lossFunction(LossFunctions.LossFunction.MCXENT).nIn(2048).nOut(1000).activation(Activation.SOFTMAX).build(),"flatten_1").setOutputs("fc1000").build();
  initializedModel.fit(new org.nd4j.linalg.dataset.DataSet(f,TestUtils.randomOneHot(1,1000,12345)));
  Nd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();
  System.gc();
  model=VGG16.builder().numClasses(0).build();
  assertTrue(model.pretrainedAvailable(PretrainedType.IMAGENET));
  initializedModel=(ComputationGraph)model.initPretrained();
  result=initializedModel.output(Nd4j.rand(new int[]{1,3,224,224}));
  assertArrayEquals(result[0].shape(),new long[]{1,1000});
  Nd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();
  System.gc();
  model=VGG19.builder().numClasses(0).build();
  assertTrue(model.pretrainedAvailable(PretrainedType.IMAGENET));
  initializedModel=(ComputationGraph)model.initPretrained();
  result=initializedModel.output(Nd4j.rand(new int[]{1,3,224,224}));
  assertArrayEquals(result[0].shape(),new long[]{1,1000});
  Nd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();
  System.gc();
  model=Darknet19.builder().numClasses(0).build();
  assertTrue(model.pretrainedAvailable(PretrainedType.IMAGENET));
  initializedModel=(ComputationGraph)model.initPretrained();
  result=initializedModel.output(Nd4j.rand(new long[]{1,3,224,224}));
  assertArrayEquals(result[0].shape(),new long[]{1,1000});
  Nd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();
  System.gc();
  model=Darknet19.builder().numClasses(0).build();
  model.setInputShape(new int[][]{{3,448,448}});
  assertTrue(model.pretrainedAvailable(PretrainedType.IMAGENET));
  initializedModel=(ComputationGraph)model.initPretrained();
  result=initializedModel.output(Nd4j.rand(new long[]{1,3,448,448}));
  assertArrayEquals(result[0].shape(),new long[]{1,1000});
  Nd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();
  System.gc();
  model=TinyYOLO.builder().numClasses(0).build();
  assertTrue(model.pretrainedAvailable(PretrainedType.IMAGENET));
  initializedModel=(ComputationGraph)model.initPretrained();
  result=initializedModel.output(Nd4j.rand(new long[]{1,3,416,416}));
  assertArrayEquals(result[0].shape(),new long[]{1,125,13,13});
  Nd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();
  System.gc();
  model=YOLO2.builder().numClasses(0).build();
  assertTrue(model.pretrainedAvailable(PretrainedType.IMAGENET));
  initializedModel=(ComputationGraph)model.initPretrained();
  result=initializedModel.output(Nd4j.rand(new int[]{1,3,608,608}));
  assertArrayEquals(result[0].shape(),new long[]{1,425,19,19});
  Nd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();
  System.gc();
  model=Xception.builder().numClasses(0).build();
  assertTrue(model.pretrainedAvailable(PretrainedType.IMAGENET));
  initializedModel=(ComputationGraph)model.initPretrained();
  result=initializedModel.output(Nd4j.rand(new int[]{1,3,299,299}));
  assertArrayEquals(result[0].shape(),new long[]{1,1000});
  Nd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();
  System.gc();
  model=SqueezeNet.builder().numClasses(0).build();
  assertTrue(model.pretrainedAvailable(PretrainedType.IMAGENET));
  initializedModel=(ComputationGraph)model.initPretrained();
  log.info(initializedModel.summary());
  result=initializedModel.output(Nd4j.rand(new long[]{1,3,227,227}));
  assertArrayEquals(result[0].shape(),new long[]{1,1000});
}
