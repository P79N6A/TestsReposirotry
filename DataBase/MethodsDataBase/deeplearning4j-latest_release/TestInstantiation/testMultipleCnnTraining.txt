@Test public void testMultipleCnnTraining() throws Exception {
  ZooModel[] models=new ZooModel[]{Darknet19.builder().numClasses(10).build(),TinyYOLO.builder().numClasses(10).build(),YOLO2.builder().numClasses(10).build()};
  for (int i=0; i < models.length; i++) {
    int numClasses=10;
    ZooModel model=models[i];
    String modelName=model.getClass().getSimpleName();
    log.info("Testing training on zoo model " + modelName);
    int gridWidth=-1;
    int gridHeight=-1;
    if (modelName.equals("TinyYOLO") || modelName.equals("YOLO2")) {
      int[] inputShapes=model.metaData().getInputShape()[0];
      gridWidth=DarknetHelper.getGridWidth(inputShapes);
      gridHeight=DarknetHelper.getGridHeight(inputShapes);
      numClasses+=4;
    }
    int[] inputShape=model.metaData().getInputShape()[0];
    DataSetIterator iter=new BenchmarkDataSetIterator(new int[]{8,inputShape[0],inputShape[1],inputShape[2]},numClasses,1,gridWidth,gridHeight);
    Model initializedModel=model.init();
    while (iter.hasNext()) {
      DataSet ds=iter.next();
      if (initializedModel instanceof ComputationGraph)       ((ComputationGraph)initializedModel).fit(ds);
 else       if (initializedModel instanceof MultiLayerNetwork)       ((MultiLayerNetwork)initializedModel).fit(ds);
 else       throw new IllegalStateException("Zoo models are only MultiLayerNetwork or ComputationGraph.");
    }
    Nd4j.getWorkspaceManager().destroyAllWorkspacesForCurrentThread();
    System.gc();
    Thread.sleep(1000);
  }
}
