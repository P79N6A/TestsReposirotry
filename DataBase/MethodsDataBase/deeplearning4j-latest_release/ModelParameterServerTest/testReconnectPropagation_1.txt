@Test public void testReconnectPropagation_1() throws Exception {
  val config=VoidConfiguration.builder().meshBuildMode(MeshBuildMode.MESH).build();
  val connector=new DummyTransport.Connector();
  val rootTransport=new DummyTransport(rootId,connector,rootId,config);
  connector.register(rootTransport);
  val rootServer=new ModelParameterServer(config,rootTransport,true);
  rootServer.addUpdatesSubscriber(new AbstractUpdatesHandler(){
    @Override public INDArray getParametersArray(){
      return Nd4j.create(10,10);
    }
    @Override public void onNext(    INDArray array){
    }
  }
);
  rootServer.launch();
  val servers=new ArrayList<ModelParameterServer>();
  val transports=new ArrayList<DummyTransport>();
  for (int e=0; e < 128; e++) {
    val clientTransport=new DummyTransport(java.util.UUID.randomUUID().toString(),connector,rootId,config);
    val clientServer=new ModelParameterServer(config,clientTransport,false);
    servers.add(clientServer);
    transports.add(clientTransport);
    connector.register(clientTransport);
    clientServer.launch();
  }
  val rootMesh=rootTransport.getMesh();
  val originalVersion=rootMesh.getVersion();
  assertEquals(128,rootMesh.getVersion());
  for (  val t : transports)   assertEquals(rootMesh,t.getMesh());
  val badServer=servers.get(23);
  val badTransport=transports.get(23);
  val badId=badTransport.id();
  val badNode=rootMesh.getNodeById(badId);
  val upstreamId=badNode.getUpstreamNode().getId();
  log.info("Upstream: [{}]; Number of downstreams: [{}]",upstreamId,badNode.numberOfDownstreams());
  connector.dropConnection(badId);
  val clientTransport=new DummyTransport(badId,connector,rootId);
  val clientServer=new ModelParameterServer(clientTransport,false);
  connector.register(clientTransport);
  clientServer.launch();
  assertNotEquals(originalVersion,rootMesh.getVersion());
  val newNode=rootMesh.getNodeById(badId);
  val newUpstream=newNode.getUpstreamNode().getId();
  assertNotEquals(upstreamId,newUpstream);
  assertEquals(0,newNode.numberOfDownstreams());
}
