@Test public void testCnnToDense(){
  MultiLayerConfiguration conf=new NeuralNetConfiguration.Builder().list().layer(0,new org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder(4,4).nIn(1).nOut(10).padding(2,2).stride(2,2).weightInit(WeightInit.RELU).activation(Activation.RELU).build()).layer(1,new org.deeplearning4j.nn.conf.layers.DenseLayer.Builder().activation(Activation.RELU).nOut(200).build()).layer(2,new OutputLayer.Builder(LossFunctions.LossFunction.MCXENT).nIn(200).nOut(5).weightInit(WeightInit.RELU).activation(Activation.SOFTMAX).build()).setInputType(InputType.convolutionalFlat(28,28,1)).build();
  assertNotNull(conf.getInputPreProcess(0));
  assertNotNull(conf.getInputPreProcess(1));
  assertTrue(conf.getInputPreProcess(0) instanceof FeedForwardToCnnPreProcessor);
  assertTrue(conf.getInputPreProcess(1) instanceof CnnToFeedForwardPreProcessor);
  FeedForwardToCnnPreProcessor ffcnn=(FeedForwardToCnnPreProcessor)conf.getInputPreProcess(0);
  CnnToFeedForwardPreProcessor cnnff=(CnnToFeedForwardPreProcessor)conf.getInputPreProcess(1);
  assertEquals(28,ffcnn.getInputHeight());
  assertEquals(28,ffcnn.getInputWidth());
  assertEquals(1,ffcnn.getNumChannels());
  assertEquals(15,cnnff.getInputHeight());
  assertEquals(15,cnnff.getInputWidth());
  assertEquals(10,cnnff.getNumChannels());
  assertEquals(15 * 15 * 10,((FeedForwardLayer)conf.getConf(1).getLayer()).getNIn());
}
