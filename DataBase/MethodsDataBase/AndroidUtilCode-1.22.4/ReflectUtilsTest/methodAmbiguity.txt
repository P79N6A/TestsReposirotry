@Test public void methodAmbiguity(){
  Test3 test;
  test=ReflectUtils.reflect(Test3.class).newInstance().method("method").get();
  assertEquals(null,test.n);
  assertEquals(Test3.MethodType.NO_ARGS,test.methodType);
  test=ReflectUtils.reflect(Test3.class).newInstance().method("method","abc").get();
  assertEquals("abc",test.n);
  assertEquals(Test3.MethodType.OBJECT,test.methodType);
  test=ReflectUtils.reflect(Test3.class).newInstance().method("method",new Long("1")).get();
  assertEquals(1L,test.n);
  assertEquals(Test3.MethodType.NUMBER,test.methodType);
  test=ReflectUtils.reflect(Test3.class).newInstance().method("method",1).get();
  assertEquals(1,test.n);
  assertEquals(Test3.MethodType.INTEGER,test.methodType);
  test=ReflectUtils.reflect(Test3.class).newInstance().method("method",'a').get();
  assertEquals('a',test.n);
  assertEquals(Test3.MethodType.OBJECT,test.methodType);
}
