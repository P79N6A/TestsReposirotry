@Test public void testMoveToFront(){
  final int firstCount=8;
  final int highCount=17;
  ArrayList<WorkQueue.WorkItem> highWorkItems=new ArrayList<WorkQueue.WorkItem>();
  CountingRunnable highRun=new CountingRunnable();
  CountingRunnable firstRun=new CountingRunnable();
  CountingRunnable lowRun=new CountingRunnable();
  ScriptableExecutor executor=new ScriptableExecutor();
  WorkQueue manager=new WorkQueue(firstCount,executor);
  for (int i=0; i < firstCount; i++) {
    addActiveWorkItem(manager,firstRun);
  }
  int lowCount=0;
  for (int h=0; h < highCount; h++) {
    highWorkItems.add(addActiveWorkItem(manager,highRun));
    for (int l=0; l < h; l++) {
      addActiveWorkItem(manager,lowRun);
      lowCount++;
    }
  }
  assertEquals(firstCount,executor.getPendingCount());
  for (  WorkQueue.WorkItem highItem : highWorkItems) {
    prioritizeWork(manager,highItem);
  }
  for (int i=0; i < firstCount; i++) {
    assertEquals(i,firstRun.getRunCount());
    executeNext(manager,executor);
  }
  for (int i=0; i < highCount; i++) {
    assertEquals(i,highRun.getRunCount());
    executeNext(manager,executor);
  }
  for (int i=0; i < lowCount; i++) {
    assertEquals(i,lowRun.getRunCount());
    executeNext(manager,executor);
  }
  assertEquals(firstCount,firstRun.getRunCount());
  assertEquals(highCount,highRun.getRunCount());
  assertEquals(lowCount,lowRun.getRunCount());
}
