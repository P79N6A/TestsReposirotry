@Test public void testCacheSizeLimit() throws Exception {
  int count=64;
  int dataSize=32;
  int cacheSize=count * dataSize / 2;
  byte[] data=generateBytes(dataSize);
  FileLruCache cache=new FileLruCache("testCacheSizeLimit",limitCacheSize(cacheSize));
  try {
    TestUtils.clearFileLruCache(cache);
    for (int i=0; i < count; i++) {
      put(cache,i,data);
      int totalDataSize=(i + 1) * dataSize;
      assertTrue(cache.sizeInBytesForTest() > Math.min(totalDataSize,cacheSize / 2));
      assertTrue(cache.sizeInBytesForTest() < Math.min(2 * totalDataSize,cacheSize));
    }
    Thread.sleep(200);
    boolean hasValueExists=false;
    boolean hasNoValueExists=false;
    for (int i=0; i < count; i++) {
      String key=Integer.valueOf(i).toString();
      if (hasValue(cache,key)) {
        hasValueExists=true;
        checkValue(cache,key,data);
      }
 else {
        hasNoValueExists=true;
      }
    }
    assertEquals(true,hasValueExists);
    assertEquals(true,hasNoValueExists);
  }
  finally {
    TestUtils.clearAndDeleteLruCacheDirectory(cache);
  }
}
