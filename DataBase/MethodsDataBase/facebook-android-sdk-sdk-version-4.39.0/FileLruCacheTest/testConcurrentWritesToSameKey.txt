@Test public void testConcurrentWritesToSameKey() throws IOException, InterruptedException {
  final int count=5;
  final int dataSize=81;
  final int threadCount=31;
  final int iterationCount=10;
  final byte[] data=generateBytes(dataSize);
  final FileLruCache cache=new FileLruCache("testConcurrentWritesToSameKey",limitCacheCount(count + 1));
  try {
    TestUtils.clearFileLruCache(cache);
    Runnable run=new Runnable(){
      @Override public void run(){
        for (int iterations=0; iterations < iterationCount; iterations++) {
          for (int i=0; i < count; i++) {
            put(cache,i,data);
          }
        }
      }
    }
;
    Thread[] threads=new Thread[threadCount];
    for (int i=0; i < threads.length; i++) {
      threads[i]=new Thread(run);
    }
    for (    Thread thread : threads) {
      thread.start();
    }
    for (    Thread thread : threads) {
      thread.join(10 * 1000,0);
    }
    for (int i=0; i < count; i++) {
      checkValue(cache,i,data);
    }
  }
  finally {
    TestUtils.clearAndDeleteLruCacheDirectory(cache);
  }
}
