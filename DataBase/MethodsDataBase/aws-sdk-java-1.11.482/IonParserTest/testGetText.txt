@Test public void testGetText() throws IOException {
  String defaultText="default";
  String integer=String.valueOf(123);
  String flt=String.valueOf(42.0);
  IonParser parser=parse("{foo:" + integer + ", bar:"+ flt+ "} {{\"abc\"}} null true false");
  assertNull(parser.getText());
  assertEquals(defaultText,parser.getValueAsString(defaultText));
  assertEquals(JsonToken.START_OBJECT,parser.nextToken());
  assertEquals(JsonToken.START_OBJECT.asString(),parser.getText());
  assertEquals(defaultText,parser.getValueAsString(defaultText));
  assertEquals(JsonToken.FIELD_NAME,parser.nextToken());
  assertEquals("foo",parser.getText());
  assertEquals(defaultText,parser.getValueAsString(defaultText));
  assertEquals("foo",parser.getCurrentName());
  assertEquals(JsonToken.VALUE_NUMBER_INT,parser.nextToken());
  assertEquals(integer,parser.getText());
  assertEquals(integer,parser.getValueAsString(defaultText));
  assertEquals(123,parser.getIntValue());
  assertEquals(JsonToken.VALUE_NUMBER_FLOAT,parser.nextValue());
  assertEquals(flt,parser.getText());
  assertEquals(flt,parser.getValueAsString(defaultText));
  assertEquals(42.0,parser.getFloatValue(),1e-9);
  assertEquals("bar",parser.getCurrentName());
  assertEquals(JsonToken.END_OBJECT,parser.nextToken());
  assertEquals(JsonToken.END_OBJECT.asString(),parser.getText());
  assertEquals(defaultText,parser.getValueAsString(defaultText));
  assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT,parser.nextToken());
  assertNull(parser.getText());
  assertEquals(JsonToken.VALUE_NULL,parser.nextToken());
  assertEquals(JsonToken.VALUE_NULL.asString(),parser.getText());
  assertEquals(defaultText,parser.getValueAsString(defaultText));
  assertEquals(JsonToken.VALUE_TRUE,parser.nextToken());
  assertEquals(JsonToken.VALUE_TRUE.asString(),parser.getText());
  assertEquals(JsonToken.VALUE_TRUE.asString(),parser.getValueAsString(defaultText));
  assertEquals(JsonToken.VALUE_FALSE,parser.nextToken());
  assertEquals(JsonToken.VALUE_FALSE.asString(),parser.getText());
  assertEquals(JsonToken.VALUE_FALSE.asString(),parser.getValueAsString(defaultText));
  assertNull(parser.nextToken());
  assertNull(parser.getText());
  assertEquals(defaultText,parser.getValueAsString(defaultText));
}
