@Test public void testGetNumberValue() throws IOException {
  String integer=String.valueOf(Integer.MAX_VALUE);
  String lng=String.valueOf(Long.MAX_VALUE);
  String bigInteger=BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE).toString();
  String flt=String.valueOf(Float.MAX_VALUE);
  String dbl=String.valueOf(Double.MAX_VALUE);
  String inf="1.7976931348623157E309";
  String bigDecimal=new BigDecimal(inf).toString();
  IonParser parser=parse(integer + " " + lng+ " "+ bigInteger+ " "+ flt+ " "+ dbl+ " "+ inf+ " "+ bigDecimal.toLowerCase().replace("e","D"));
  assertEquals(JsonToken.VALUE_NUMBER_INT,parser.nextToken());
  assertEquals(integer,parser.getNumberValue().toString());
  assertEquals(JsonToken.VALUE_NUMBER_INT,parser.nextToken());
  assertEquals(lng,parser.getNumberValue().toString());
  assertEquals(JsonToken.VALUE_NUMBER_INT,parser.nextToken());
  assertEquals(bigInteger,parser.getNumberValue().toString());
  assertEquals(JsonToken.VALUE_NUMBER_FLOAT,parser.nextToken());
  assertEquals(flt,parser.getNumberValue().toString());
  assertEquals(JsonToken.VALUE_NUMBER_FLOAT,parser.nextToken());
  assertEquals(dbl,parser.getNumberValue().toString());
  assertEquals(JsonToken.VALUE_NUMBER_FLOAT,parser.nextToken());
  assertTrue(Double.isInfinite(parser.getDoubleValue()));
  assertTrue(Double.isInfinite(parser.getFloatValue()));
  assertEquals(JsonToken.VALUE_NUMBER_FLOAT,parser.nextToken());
  assertEquals(bigDecimal,parser.getNumberValue().toString());
}
