@Test public void rountripStateMachine(){
  StateMachine stateMachine=stateMachine().state("ParallelState",testParallelState()).state("WaitForTimestamp",testWaitForTimestamp()).state("WaitForTimestampPath",testWaitForTimestampPath()).state("WaitForSeconds",testWaitForSeconds()).state("WaitForSecondsPath",testWaitForSecondsPath()).state("ChoiceState",testChoiceState()).state("FailState",testFailState()).state("PassState",passState().transition(next("EndState"))).state("EndState",succeedState()).startAt("ParallelState").build();
  CreateStateMachineResult createResult=client.createStateMachine(new CreateStateMachineRequest().withName(STATE_MACHINE_NAME).withRoleArn(roleArn).withDefinition(stateMachine));
  stateMachineArn=createResult.getStateMachineArn();
  DescribeStateMachineResult describeResult=client.describeStateMachine(new DescribeStateMachineRequest().withStateMachineArn(stateMachineArn));
  StatesAsserts.assertStateMachineMatches("IntegrationTestStateMachine.json",stateMachine);
  StatesAsserts.assertStateMachineMatches("IntegrationTestStateMachine.json",StateMachine.fromJson(describeResult.getDefinition()).build());
}
