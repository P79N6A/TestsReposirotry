/** 
 * Tests serializing a more complex policy object with multiple statements.
 */
@Test public void testMultipleStatements() throws Exception {
  Policy policy=new Policy("S3PolicyId1");
  policy.withStatements(new Statement(Effect.Allow).withPrincipals(Principal.AllUsers).withActions(new TestAction("action1")).withResources(new Resource("resource")).withConditions(new IpAddressCondition("192.168.143.0/24"),new IpAddressCondition(IpAddressComparisonType.NotIpAddress,"192.168.143.188/32")),new Statement(Effect.Deny).withPrincipals(Principal.AllUsers).withActions(new TestAction("action2")).withResources(new Resource("resource")).withConditions(new IpAddressCondition("10.1.2.0/24")));
  JsonNode jsonPolicy=Jackson.jsonNodeOf(policy.toJson());
  assertTrue(jsonPolicy.has("Id"));
  JsonNode statementArray=jsonPolicy.get("Statement");
  assertEquals(statementArray.size(),2);
  assertValidStatementIds(policy);
  JsonNode statement;
  for (int i=0; i < statementArray.size(); i++) {
    statement=statementArray.get(i);
    assertTrue(statement.has("Sid"));
    assertTrue(statement.has("Effect"));
    assertTrue(statement.has("Principal"));
    assertTrue(statement.has("Action"));
    assertTrue(statement.has("Resource"));
    assertTrue(statement.has("Condition"));
  }
}
