@Test public void testPrincipals(){
  Policy policy=new Policy();
  policy.withStatements(new Statement(Effect.Allow).withResources(new Resource("resource")).withPrincipals(new Principal("accountId1"),new Principal("accountId2")).withActions(new TestAction("action")));
  JsonNode jsonPolicyNode=Jackson.jsonNodeOf(policy.toJson());
  JsonNode statementArray=jsonPolicyNode.get("Statement");
  assertTrue(statementArray.isArray());
  assertTrue(statementArray.size() == 1);
  JsonNode statement=statementArray.get(0);
  assertTrue(statement.has("Resource"));
  assertTrue(statement.has("Principal"));
  assertTrue(statement.has("Action"));
  assertTrue(statement.has("Effect"));
  JsonNode users=statement.get("Principal").get("AWS");
  assertEquals(2,users.size());
  assertEquals(users.get(0).asText(),"accountId1");
  assertEquals(users.get(1).asText(),"accountId2");
  policy=new Policy();
  policy.withStatements(new Statement(Effect.Allow).withResources(new Resource("resource")).withPrincipals(new Principal(Services.AmazonEC2),new Principal(Services.AmazonElasticTranscoder)).withActions(new TestAction("action")));
  jsonPolicyNode=Jackson.jsonNodeOf(policy.toJson());
  statementArray=jsonPolicyNode.get("Statement");
  assertTrue(statementArray.size() == 1);
  statement=statementArray.get(0);
  assertTrue(statement.has("Resource"));
  assertTrue(statement.has("Principal"));
  assertTrue(statement.has("Action"));
  assertTrue(statement.has("Effect"));
  JsonNode services=statement.get("Principal").get("Service");
  assertTrue(services.isArray());
  assertTrue(services.size() == 2);
  assertEquals(Services.AmazonEC2.getServiceId(),services.get(0).asText());
  assertEquals(Services.AmazonElasticTranscoder.getServiceId(),services.get(1).asText());
  policy=new Policy();
  policy.withStatements(new Statement(Effect.Allow).withResources(new Resource("resource")).withPrincipals(Principal.AllUsers).withActions(new TestAction("action")));
  jsonPolicyNode=Jackson.jsonNodeOf(policy.toJson());
  statementArray=jsonPolicyNode.get("Statement");
  assertTrue(statementArray.size() == 1);
  statement=statementArray.get(0);
  assertTrue(statement.has("Resource"));
  assertTrue(statement.has("Principal"));
  assertTrue(statement.has("Action"));
  assertTrue(statement.has("Effect"));
  users=statement.get("Principal").get("AWS");
  assertEquals(users.asText(),"*");
  policy=new Policy();
  policy.withStatements(new Statement(Effect.Allow).withResources(new Resource("resource")).withPrincipals(Principal.AllServices,Principal.AllUsers).withActions(new TestAction("action")));
  jsonPolicyNode=Jackson.jsonNodeOf(policy.toJson());
  statementArray=jsonPolicyNode.get("Statement");
  assertTrue(statementArray.size() == 1);
  statement=statementArray.get(0);
  assertTrue(statement.has("Resource"));
  assertTrue(statement.has("Principal"));
  assertTrue(statement.has("Action"));
  assertTrue(statement.has("Effect"));
  users=statement.get("Principal").get("AWS");
  services=statement.get("Principal").get("Service");
  assertEquals(users.asText(),"*");
  assertEquals(services.asText(),"*");
  policy=new Policy();
  policy.withStatements(new Statement(Effect.Allow).withResources(new Resource("resource")).withPrincipals(Principal.AllServices,Principal.AllUsers,Principal.AllWebProviders).withActions(new TestAction("action")));
  jsonPolicyNode=Jackson.jsonNodeOf(policy.toJson());
  statementArray=jsonPolicyNode.get("Statement");
  assertTrue(statementArray.size() == 1);
  statement=statementArray.get(0);
  assertTrue(statement.has("Resource"));
  assertTrue(statement.has("Principal"));
  assertTrue(statement.has("Action"));
  assertTrue(statement.has("Effect"));
  users=statement.get("Principal").get("AWS");
  services=statement.get("Principal").get("Service");
  JsonNode webProviders=statement.get("Principal").get("Federated");
  assertEquals(users.asText(),"*");
  assertEquals(services.asText(),"*");
  assertEquals(webProviders.asText(),"*");
  policy=new Policy();
  policy.withStatements(new Statement(Effect.Allow).withResources(new Resource("resource")).withPrincipals(Principal.AllServices,Principal.AllUsers,Principal.AllWebProviders,Principal.All).withActions(new TestAction("action")));
  jsonPolicyNode=Jackson.jsonNodeOf(policy.toJson());
  statementArray=jsonPolicyNode.get("Statement");
  assertTrue(statementArray.size() == 1);
  statement=statementArray.get(0);
  assertTrue(statement.has("Resource"));
  assertTrue(statement.has("Principal"));
  assertTrue(statement.has("Action"));
  assertTrue(statement.has("Effect"));
  users=statement.get("Principal").get("AWS");
  services=statement.get("Principal").get("Service");
  webProviders=statement.get("Principal").get("Federated");
  JsonNode allUsers=statement.get("Principal").get("*");
  assertEquals(users.asText(),"*");
  assertEquals(services.asText(),"*");
  assertEquals(webProviders.asText(),"*");
  assertEquals(allUsers.asText(),"*");
  policy=new Policy();
  policy.withStatements(new Statement(Effect.Allow).withResources(new Resource("resource")).withPrincipals(new Principal("accountId1"),Principal.AllUsers).withActions(new TestAction("action")));
  jsonPolicyNode=Jackson.jsonNodeOf(policy.toJson());
  statementArray=jsonPolicyNode.get("Statement");
  assertTrue(statementArray.size() == 1);
  statement=statementArray.get(0);
  assertTrue(statement.has("Resource"));
  assertTrue(statement.has("Principal"));
  assertTrue(statement.has("Action"));
  assertTrue(statement.has("Effect"));
  users=statement.get("Principal").get("AWS");
  assertTrue(users.isArray());
  assertEquals(users.get(0).asText(),"accountId1");
  assertEquals(users.get(1).asText(),"*");
  policy=new Policy();
  policy.withStatements(new Statement(Effect.Allow).withResources(new Resource("resource")).withPrincipals(new Principal(Services.AmazonEC2),Principal.AllServices,new Principal("accountId1")).withActions(new TestAction("action")));
  jsonPolicyNode=Jackson.jsonNodeOf(policy.toJson());
  statementArray=jsonPolicyNode.get("Statement");
  assertTrue(statementArray.size() == 1);
  statement=statementArray.get(0);
  assertTrue(statement.has("Resource"));
  assertTrue(statement.has("Principal"));
  assertTrue(statement.has("Action"));
  assertTrue(statement.has("Effect"));
  users=statement.get("Principal").get("AWS");
  services=statement.get("Principal").get("Service");
  assertEquals(users.asText(),"accountId1");
  assertEquals(services.get(0).asText(),Services.AmazonEC2.getServiceId());
  assertEquals(services.get(1).asText(),"*");
  policy=new Policy();
  policy.withStatements(new Statement(Effect.Allow).withResources(new Resource("resource")).withPrincipals(new Principal(Services.AmazonEC2),Principal.AllServices,new Principal("accountId1"),new Principal(WebIdentityProviders.Amazon),Principal.AllWebProviders).withActions(new TestAction("action")));
  jsonPolicyNode=Jackson.jsonNodeOf(policy.toJson());
  statementArray=jsonPolicyNode.get("Statement");
  assertTrue(statementArray.size() == 1);
  statement=statementArray.get(0);
  assertTrue(statement.has("Resource"));
  assertTrue(statement.has("Principal"));
  assertTrue(statement.has("Action"));
  assertTrue(statement.has("Effect"));
  users=statement.get("Principal").get("AWS");
  services=statement.get("Principal").get("Service");
  webProviders=statement.get("Principal").get("Federated");
  assertEquals(services.get(0).asText(),Services.AmazonEC2.getServiceId());
  assertEquals(services.get(1).asText(),"*");
  assertEquals(users.asText(),"accountId1");
  assertEquals(webProviders.get(0).asText(),WebIdentityProviders.Amazon.getWebIdentityProvider());
  assertEquals(webProviders.get(1).asText(),"*");
}
