@Test public void testPrincipals(){
  Policy policy=new Policy();
  policy.withStatements(new Statement(Effect.Allow).withResources(new Resource("resource")).withPrincipals(new Principal("accountId1"),new Principal("accountId2")).withActions(new TestAction("action")));
  policy=Policy.fromJson(policy.toJson());
  assertEquals(1,policy.getStatements().size());
  List<Statement> statements=new LinkedList<Statement>(policy.getStatements());
  assertEquals(Effect.Allow,statements.get(0).getEffect());
  assertEquals("action",statements.get(0).getActions().get(0).getActionName());
  assertEquals("resource",statements.get(0).getResources().get(0).getId());
  assertEquals(2,statements.get(0).getPrincipals().size());
  assertEquals("AWS",statements.get(0).getPrincipals().get(0).getProvider());
  assertEquals("accountId1",statements.get(0).getPrincipals().get(0).getId());
  assertEquals("AWS",statements.get(0).getPrincipals().get(1).getProvider());
  assertEquals("accountId2",statements.get(0).getPrincipals().get(1).getId());
  policy=new Policy();
  policy.withStatements(new Statement(Effect.Allow).withResources(new Resource("resource")).withPrincipals(new Principal(Services.AmazonEC2),new Principal(Services.AmazonElasticTranscoder)).withActions(new TestAction("action")));
  policy=Policy.fromJson(policy.toJson());
  assertEquals(1,policy.getStatements().size());
  statements=new LinkedList<Statement>(policy.getStatements());
  assertEquals(Effect.Allow,statements.get(0).getEffect());
  assertEquals(1,statements.get(0).getActions().size());
  assertEquals("action",statements.get(0).getActions().get(0).getActionName());
  assertEquals(2,statements.get(0).getPrincipals().size());
  assertEquals("Service",statements.get(0).getPrincipals().get(0).getProvider());
  assertEquals(Services.AmazonEC2.getServiceId(),statements.get(0).getPrincipals().get(0).getId());
  assertEquals("Service",statements.get(0).getPrincipals().get(1).getProvider());
  assertEquals(Services.AmazonElasticTranscoder.getServiceId(),statements.get(0).getPrincipals().get(1).getId());
  policy=new Policy();
  policy.withStatements(new Statement(Effect.Allow).withResources(new Resource("resource")).withPrincipals(Principal.All).withActions(new TestAction("action")));
  policy=Policy.fromJson(policy.toJson());
  assertEquals(1,policy.getStatements().size());
  statements=new LinkedList<Statement>(policy.getStatements());
  assertEquals(Effect.Allow,statements.get(0).getEffect());
  assertEquals(1,statements.get(0).getActions().size());
  assertEquals("action",statements.get(0).getActions().get(0).getActionName());
  assertEquals(1,statements.get(0).getPrincipals().size());
  assertEquals(Principal.All,statements.get(0).getPrincipals().get(0));
  policy=new Policy();
  policy.withStatements(new Statement(Effect.Allow).withResources(new Resource("resource")).withPrincipals(Principal.AllUsers,Principal.AllServices,Principal.AllWebProviders).withActions(new TestAction("action")));
  policy=Policy.fromJson(policy.toJson());
  assertEquals(1,policy.getStatements().size());
  statements=new LinkedList<Statement>(policy.getStatements());
  assertEquals(Effect.Allow,statements.get(0).getEffect());
  assertEquals(1,statements.get(0).getActions().size());
  assertEquals("action",statements.get(0).getActions().get(0).getActionName());
  assertEquals(3,statements.get(0).getPrincipals().size());
  assertThat(statements.get(0).getPrincipals(),contains(Principal.AllUsers,Principal.AllServices,Principal.AllWebProviders));
}
