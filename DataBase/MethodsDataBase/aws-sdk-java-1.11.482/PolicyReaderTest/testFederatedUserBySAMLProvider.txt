/** 
 * Tests that SAML-based federated user is supported as principal.
 */
@Test public void testFederatedUserBySAMLProvider(){
  String jsonString="{" + "\"Version\":\"2012-10-17\"," + "\"Statement\":["+ "{"+ "\"Sid\":\"\","+ "\"Effect\":\"Allow\","+ "\"Principal\":{"+ "\"Federated\":\"arn:aws:iam::862954416975:saml-provider/myprovider\""+ "},"+ "\"Action\":\"sts:AssumeRoleWithSAML\","+ "\"Condition\":{"+ "\"StringEquals\":{"+ "\"SAML:aud\":\"https://signin.aws.amazon.com/saml\""+ "}"+ "}"+ "}"+ "]"+ "}";
  Policy policy=Policy.fromJson(jsonString);
  assertEquals(POLICY_VERSION,policy.getVersion());
  List<Statement> statements=new LinkedList<Statement>(policy.getStatements());
  assertEquals(1,statements.size());
  assertEquals(1,statements.get(0).getActions().size());
  assertEquals(Effect.Allow,statements.get(0).getEffect());
  assertEquals("sts:AssumeRoleWithSAML",statements.get(0).getActions().get(0).getActionName());
  assertEquals(1,statements.get(0).getConditions().size());
  assertEquals("StringEquals",statements.get(0).getConditions().get(0).getType());
  assertEquals("SAML:aud",statements.get(0).getConditions().get(0).getConditionKey());
  assertEquals(1,statements.get(0).getConditions().get(0).getValues().size());
  assertEquals("https://signin.aws.amazon.com/saml",statements.get(0).getConditions().get(0).getValues().get(0));
  assertEquals(1,statements.get(0).getPrincipals().size());
  assertEquals("arn:aws:iam::862954416975:saml-provider/myprovider",statements.get(0).getPrincipals().get(0).getId());
  assertEquals("Federated",statements.get(0).getPrincipals().get(0).getProvider());
}
