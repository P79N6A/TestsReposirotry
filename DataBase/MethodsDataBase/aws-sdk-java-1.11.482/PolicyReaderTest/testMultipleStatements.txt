@Test public void testMultipleStatements() throws Exception {
  Policy policy=new Policy("S3PolicyId1");
  policy.withStatements(new Statement(Effect.Allow).withId("0").withPrincipals(Principal.AllUsers).withActions(new TestAction("action1")).withResources(new Resource("resource")).withConditions(new IpAddressCondition("192.168.143.0/24"),new IpAddressCondition(IpAddressComparisonType.NotIpAddress,"192.168.143.188/32")),new Statement(Effect.Deny).withId("1").withPrincipals(Principal.AllUsers).withActions(new TestAction("action2")).withResources(new Resource("resource")).withConditions(new IpAddressCondition("10.1.2.0/24")));
  policy=Policy.fromJson(policy.toJson());
  assertEquals(2,policy.getStatements().size());
  assertEquals("S3PolicyId1",policy.getId());
  List<Statement> statements=new LinkedList<Statement>(policy.getStatements());
  assertEquals(Effect.Allow,statements.get(0).getEffect());
  assertEquals("0",statements.get(0).getId());
  assertEquals(1,statements.get(0).getPrincipals().size());
  assertEquals("*",statements.get(0).getPrincipals().get(0).getId());
  assertEquals("AWS",statements.get(0).getPrincipals().get(0).getProvider());
  assertEquals(1,statements.get(0).getResources().size());
  assertEquals("resource",statements.get(0).getResources().get(0).getId());
  assertEquals(1,statements.get(0).getActions().size());
  assertEquals("action1",statements.get(0).getActions().get(0).getActionName());
  assertEquals(2,statements.get(0).getConditions().size());
  assertEquals("IpAddress",statements.get(0).getConditions().get(0).getType());
  assertEquals(ConditionFactory.SOURCE_IP_CONDITION_KEY,statements.get(0).getConditions().get(0).getConditionKey());
  assertEquals(1,statements.get(0).getConditions().get(0).getValues().size());
  assertEquals("192.168.143.0/24",statements.get(0).getConditions().get(0).getValues().get(0));
  assertEquals("NotIpAddress",statements.get(0).getConditions().get(1).getType());
  assertEquals(1,statements.get(0).getConditions().get(1).getValues().size());
  assertEquals("192.168.143.188/32",statements.get(0).getConditions().get(1).getValues().get(0));
  assertEquals(ConditionFactory.SOURCE_IP_CONDITION_KEY,statements.get(1).getConditions().get(0).getConditionKey());
  assertEquals(Effect.Deny,statements.get(1).getEffect());
  assertEquals("1",statements.get(1).getId());
  assertEquals(1,statements.get(1).getPrincipals().size());
  assertEquals("*",statements.get(1).getPrincipals().get(0).getId());
  assertEquals("AWS",statements.get(1).getPrincipals().get(0).getProvider());
  assertEquals(1,statements.get(1).getResources().size());
  assertEquals("resource",statements.get(1).getResources().get(0).getId());
  assertEquals(1,statements.get(1).getActions().size());
  assertEquals("action2",statements.get(1).getActions().get(0).getActionName());
  assertEquals(1,statements.get(1).getConditions().size());
  assertEquals("IpAddress",statements.get(1).getConditions().get(0).getType());
  assertEquals(ConditionFactory.SOURCE_IP_CONDITION_KEY,statements.get(0).getConditions().get(0).getConditionKey());
  assertEquals(1,statements.get(0).getConditions().get(0).getValues().size());
  assertEquals("10.1.2.0/24",statements.get(1).getConditions().get(0).getValues().get(0));
}
