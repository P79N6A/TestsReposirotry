@Test public void testHandlerCallbacksOnFailFailSuccess() throws IOException {
  Exception ioException=new IOException("SomethingBad");
  EasyMock.reset(httpClient);
  EasyMock.expect(httpClient.getConnectionManager()).andReturn(null).anyTimes();
  EasyMock.expect(httpClient.execute(EasyMock.<HttpUriRequest>anyObject(),EasyMock.<HttpContext>anyObject())).andThrow(ioException).times(2);
  EasyMock.expect(httpClient.execute(EasyMock.<HttpUriRequest>anyObject(),EasyMock.<HttpContext>anyObject())).andReturn(createBasicHttpResponse()).once();
  EasyMock.replay(httpClient);
  SetupMockRequestHandler2(mockHandler,3,MockRequestOutcome.Success);
  ExecutionContext.Builder contextBuilder=ExecutionContext.builder();
  contextBuilder.withRequestHandler2s(requestHandlers);
  ExecutionContext context=contextBuilder.build();
  Request<?> request=new DefaultRequest<Object>(SERVER_NAME);
  request.setEndpoint(java.net.URI.create(URI_NAME));
  request.setContent(new ByteArrayInputStream(new byte[0]));
  try {
    client.requestExecutionBuilder().request(request).executionContext(context).execute();
  }
 catch (  Exception e) {
  }
  EasyMock.verify(mockHandler);
}
