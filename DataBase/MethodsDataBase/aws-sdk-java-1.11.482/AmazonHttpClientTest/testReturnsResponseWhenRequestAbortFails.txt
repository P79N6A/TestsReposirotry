@Test public void testReturnsResponseWhenRequestAbortFails() throws Exception {
  final RuntimeException expectedThrown=new AbortedException("request was interrupted");
  HttpResponseHandler<AmazonWebServiceResponse<Object>> handler=EasyMock.createMock(HttpResponseHandler.class);
  EasyMock.expect(handler.needsConnectionLeftOpen()).andReturn(true).anyTimes();
  AmazonWebServiceResponse response=EasyMock.createMock(AmazonWebServiceResponse.class);
  EasyMock.expect(handler.handle(EasyMock.isA(HttpResponse.class))).andReturn(response);
  EasyMock.replay(handler);
  EasyMock.reset(httpClient);
  EasyMock.expect(httpClient.getConnectionManager()).andReturn(null).anyTimes();
  InputStream responseStream=EasyMock.createMock(InputStream.class);
  responseStream.close();
  EasyMock.expectLastCall().times(1);
  EasyMock.replay(responseStream);
  BasicHttpResponse httpResponse=createBasicHttpResponse(responseStream);
  EasyMock.expect(httpClient.execute(EasyMock.<HttpUriRequest>anyObject(),EasyMock.<HttpContext>anyObject())).andReturn(httpResponse).times(1);
  EasyMock.replay(httpClient);
  InputStream requestInputStream=new ByteArrayInputStream("foo".getBytes()){
    @Override public void close() throws IOException {
      throw expectedThrown;
    }
  }
;
  ExecutionContext context=new ExecutionContext();
  Request<?> request=new DefaultRequest<Object>(null,"testsvc");
  request.setEndpoint(java.net.URI.create("http://testsvc.region.amazonaws.com"));
  request.setContent(requestInputStream);
  Response<AmazonWebServiceResponse<Object>> awsResponse=client.requestExecutionBuilder().request(request).executionContext(context).execute(handler);
  awsResponse.getHttpResponse().getContent().close();
  EasyMock.verify(httpClient);
  EasyMock.verify(responseStream);
}
