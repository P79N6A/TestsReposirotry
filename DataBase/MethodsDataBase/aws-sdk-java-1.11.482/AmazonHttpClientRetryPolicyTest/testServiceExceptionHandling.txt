/** 
 * Tests AmazonHttpClient's behavior upon simulated service exceptions when the request payload is repeatable.
 */
@Test public void testServiceExceptionHandling(){
  int random500StatusCode=500 + random.nextInt(100);
  String randomErrorCode=UUID.randomUUID().toString();
  injectMockHttpClient(testedClient,new ReturnServiceErrorHttpClient(random500StatusCode,randomErrorCode));
  ExecutionContext context=new ExecutionContext(true);
  Request<?> testedRepeatableRequest=getSampleRequestWithRepeatableContent(originalRequest);
  AmazonServiceException expectedServiceException=null;
  try {
    testedClient.requestExecutionBuilder().request(testedRepeatableRequest).errorResponseHandler(errorResponseHandler).executionContext(context).execute();
    Assert.fail("AmazonServiceException is expected.");
  }
 catch (  AmazonServiceException ase) {
    Assert.assertEquals(random500StatusCode,ase.getStatusCode());
    Assert.assertEquals(randomErrorCode,ase.getErrorCode());
    expectedServiceException=ase;
  }
  verifyExpectedContextData(retryCondition,originalRequest,expectedServiceException,EXPECTED_SHOULD_RETRY_CALL_COUNT);
  verifyExpectedContextData(backoffStrategy,originalRequest,expectedServiceException,EXPECTED_RETRY_COUNT);
  Assert.assertEquals(EXPECTED_RETRY_COUNT + 1,context.getAwsRequestMetrics().getTimingInfo().getCounter(AWSRequestMetrics.Field.RequestCount.toString()).intValue());
}
