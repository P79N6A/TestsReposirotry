@Test public void testSigning_ForRequestToBjsRegion() throws Exception {
  final String EXPECTED_AUTHORIZATION_HEADER_WITHOUT_SHA256_HEADER="AWS4-HMAC-SHA256 Credential=access/19810216/cn-north-1/application-autoscaling/aws4_request, SignedHeaders=host;x-amz-archive-description;x-amz-date, Signature=a6e694a96dfa9243b8a8ca6139a046de96dc7fcd2896c2cd7ff36daab48e78d0";
  final String EXPECTED_AUTHORIZATION_HEADER_WITH_SHA256_HEADER="AWS4-HMAC-SHA256 Credential=access/19810216/cn-north-1/application-autoscaling/aws4_request, SignedHeaders=host;x-amz-archive-description;x-amz-date;x-amz-sha256, Signature=504f0cc7e4afdc30d985a6ba607917744539621c138a75f185dbfed652c8ebeb";
  AWSCredentials credentials=new BasicAWSCredentials("access","secret");
  SignableRequest<?> request=generateBasicRequestToBjs();
  Calendar c=new GregorianCalendar();
  c.set(1981,1,16,6,30,0);
  c.setTimeZone(TimeZone.getTimeZone("UTC"));
  AWS4Signer signer=new AWS4Signer();
  signer.setOverrideDate(c.getTime());
  signer.setServiceName("application-autoscaling");
  signer.setEndpointPrefix("autoscaling");
  signer.sign(request,credentials);
  assertEquals(EXPECTED_AUTHORIZATION_HEADER_WITHOUT_SHA256_HEADER,request.getHeaders().get("Authorization"));
  request=generateBasicRequestToBjs();
  request.addHeader("x-amz-sha256","required");
  signer.sign(request,credentials);
  assertEquals(EXPECTED_AUTHORIZATION_HEADER_WITH_SHA256_HEADER,request.getHeaders().get("Authorization"));
}
