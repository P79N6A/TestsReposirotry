@Test public void testSigning() throws Exception {
  final String EXPECTED_AUTHORIZATION_HEADER_WITHOUT_SHA256_HEADER="AWS4-HMAC-SHA256 Credential=access/19810216/us-east-1/demo/aws4_request, SignedHeaders=host;x-amz-archive-description;x-amz-date, Signature=77fe7c02927966018667f21d1dc3dfad9057e58401cbb9ed64f1b7868288e35a";
  final String EXPECTED_AUTHORIZATION_HEADER_WITH_SHA256_HEADER="AWS4-HMAC-SHA256 Credential=access/19810216/us-east-1/demo/aws4_request, SignedHeaders=host;x-amz-archive-description;x-amz-date;x-amz-sha256, Signature=e73e20539446307a5dc71252dbd5b97e861f1d1267456abda3ebd8d57e519951";
  AWSCredentials credentials=new BasicAWSCredentials("access","secret");
  SignableRequest<?> request=generateBasicRequest();
  Calendar c=new GregorianCalendar();
  c.set(1981,1,16,6,30,0);
  c.setTimeZone(TimeZone.getTimeZone("UTC"));
  signer.setOverrideDate(c.getTime());
  signer.setServiceName("demo");
  signer.sign(request,credentials);
  assertEquals(EXPECTED_AUTHORIZATION_HEADER_WITHOUT_SHA256_HEADER,request.getHeaders().get("Authorization"));
  request=generateBasicRequest();
  request.addHeader("x-amz-sha256","required");
  signer.sign(request,credentials);
  assertEquals(EXPECTED_AUTHORIZATION_HEADER_WITH_SHA256_HEADER,request.getHeaders().get("Authorization"));
}
