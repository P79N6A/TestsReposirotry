@Test public void clientConfigurationCopyConstructor_CopiesAllValues() throws Exception {
  ClientConfiguration customConfig=new ClientConfiguration();
  for (  Field field : ClientConfiguration.class.getDeclaredFields()) {
    if (isStaticField(field)) {
      continue;
    }
    field.setAccessible(true);
    final Class<?> clzz=field.getType();
    if (clzz.isAssignableFrom(int.class) || clzz.isAssignableFrom(long.class)) {
      field.set(customConfig,Math.abs(RANDOM.nextInt()));
    }
 else     if (clzz.isAssignableFrom(boolean.class)) {
      field.set(customConfig,!(Boolean)field.get(customConfig));
    }
 else     if (clzz.isAssignableFrom(String.class)) {
      field.set(customConfig,RandomStringUtils.random(10));
    }
 else     if (clzz.isAssignableFrom(RetryPolicy.class)) {
      field.set(customConfig,CUSTOM_RETRY_POLICY);
    }
 else     if (clzz.isAssignableFrom(InetAddress.class)) {
      field.set(customConfig,InetAddress.getLocalHost());
    }
 else     if (clzz.isAssignableFrom(Protocol.class)) {
      if (field.getName().equals("protocol")) {
        field.set(customConfig,Protocol.HTTP);
      }
 else {
        field.set(customConfig,Protocol.HTTPS);
      }
    }
 else     if (clzz.isAssignableFrom(DnsResolver.class)) {
      field.set(customConfig,new MyCustomDnsResolver());
    }
 else     if (clzz.isAssignableFrom(SecureRandom.class)) {
      field.set(customConfig,new SecureRandom());
    }
 else     if (field.getName().equals("headers")) {
      field.set(customConfig,ImmutableMapParameter.of("foo","bar"));
    }
 else     if (clzz.isAssignableFrom(ApacheHttpClientConfig.class)) {
      customConfig.getApacheHttpClientConfig().setSslSocketFactory(Mockito.mock(ConnectionSocketFactory.class));
    }
 else     if (clzz.isAssignableFrom(List.class)) {
      field.set(customConfig,new ArrayList<Object>());
    }
 else {
      throw new RuntimeException(String.format("Field %s of type %s is not supported",field.getName(),field.getType()));
    }
    assertNotEquals(String.format("Field %s does not differ from default value",field.getName()),field.get(DEFAULT_CLIENT_CONFIG),field.get(customConfig));
  }
  assertReflectionEquals(customConfig,new ClientConfiguration(customConfig));
}
