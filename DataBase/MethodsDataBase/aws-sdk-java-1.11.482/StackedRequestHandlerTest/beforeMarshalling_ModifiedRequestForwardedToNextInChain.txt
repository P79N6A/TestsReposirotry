/** 
 * The beforeMarshalling step is a bit different. It's expected to take the potentially modified  {@link AmazonWebServiceRequest} returned by{@link RequestHandler2#beforeMarshalling(AmazonWebServiceRequest)} and forward thatresult as input to the next request handler in the chain. This tests makes sure that each request handler forwards the appropriate the result to the next in the chain and that the end result is what's returned by the last request handler in the chain
 */
@Test public void beforeMarshalling_ModifiedRequestForwardedToNextInChain(){
  final AmazonWebServiceRequest origAwsRequest=mock(AmazonWebServiceRequest.class);
  final AmazonWebServiceRequest afterFirstAwsRequest=mock(AmazonWebServiceRequest.class);
  final AmazonWebServiceRequest afterSecondAwsRequest=mock(AmazonWebServiceRequest.class);
  final AmazonWebServiceRequest afterThirdAwsRequest=mock(AmazonWebServiceRequest.class);
  doReturn(afterFirstAwsRequest).when(first).beforeMarshalling(origAwsRequest);
  doReturn(afterSecondAwsRequest).when(second).beforeMarshalling(afterFirstAwsRequest);
  doReturn(afterThirdAwsRequest).when(third).beforeMarshalling(afterSecondAwsRequest);
  assertEquals(afterThirdAwsRequest,stackedRequestHandler.beforeMarshalling(origAwsRequest));
  InOrder inOrder=inOrder(first,second,third);
  inOrder.verify(first).beforeMarshalling(origAwsRequest);
  inOrder.verify(second).beforeMarshalling(afterFirstAwsRequest);
  inOrder.verify(third).beforeMarshalling(afterSecondAwsRequest);
}
