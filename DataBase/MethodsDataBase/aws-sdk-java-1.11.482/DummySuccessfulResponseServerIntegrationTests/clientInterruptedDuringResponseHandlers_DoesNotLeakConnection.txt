/** 
 * Tests that a streaming operation has it's request properly cleaned up if the client is interrupted after the response is received.
 * @see TT0070103230
 */
@Test public void clientInterruptedDuringResponseHandlers_DoesNotLeakConnection() throws IOException {
  ClientConfiguration config=new ClientConfiguration();
  ConnectionManagerAwareHttpClient rawHttpClient=new ApacheHttpClientFactory().create(HttpClientSettings.adapt(config));
  httpClient=new AmazonHttpClient(config,rawHttpClient,null);
  interruptCurrentThreadAfterDelay(1000);
  List<RequestHandler2> requestHandlers=RequestHandlerTestUtils.buildRequestHandlerList(new SlowRequestHandler().withAfterResponseWaitInSeconds(10));
  try {
    requestBuilder().executionContext(withHandlers(requestHandlers)).execute(new DummyResponseHandler().leaveConnectionOpen());
    fail("Expected exception");
  }
 catch (  AmazonClientException e) {
    assertThat(e.getCause(),instanceOf(InterruptedException.class));
  }
  @SuppressWarnings("deprecation") int leasedConnections=((ConnPoolControl<?>)((SdkHttpClient)rawHttpClient).getHttpClientConnectionManager()).getTotalStats().getLeased();
  assertEquals(0,leasedConnections);
}
