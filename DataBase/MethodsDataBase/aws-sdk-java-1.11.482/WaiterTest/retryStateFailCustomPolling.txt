@Test(expected=WaiterTimedOutException.class) public void retryStateFailCustomPolling() throws Exception {
  List<WaiterAcceptor> acceptors=new ArrayList<WaiterAcceptor>();
  acceptors.add(new ExceptionAcceptor());
  PollingStrategy pollingStrategy=new PollingStrategy(new PollingStrategy.RetryStrategy(){
    int retryCount=0;
    @Override public boolean shouldRetry(    PollingStrategyContext retryStrategyParameters){
      if (retryStrategyParameters.getRetriesAttempted() < 4) {
        retryCount++;
        return true;
      }
      Assert.assertEquals("It didn't retry the expected number of times",4,retryCount);
      return false;
    }
  }
,new PollingStrategy.DelayStrategy(){
    int retries=0;
    @Override public void delayBeforeNextRetry(    PollingStrategyContext pollingStrategyContext) throws InterruptedException {
      Assert.assertEquals("Request object is different from the expected request",request,pollingStrategyContext.getOriginalRequest());
      Assert.assertEquals("Number of retries is different from the expected retries",retries,pollingStrategyContext.getRetriesAttempted());
      retries++;
      if (pollingStrategyContext.getRetriesAttempted() < 4) {
        Thread.sleep(2000);
        return;
      }
      Assert.assertEquals("It didn't back off the expected number of times",4,retries);
    }
  }
);
  waiterExecutionBuilder.withAcceptors(acceptors).withPollingStrategy(pollingStrategy);
  WaiterExecution waiter=new WaiterExecution(waiterExecutionBuilder);
  waiter.pollResource();
}
