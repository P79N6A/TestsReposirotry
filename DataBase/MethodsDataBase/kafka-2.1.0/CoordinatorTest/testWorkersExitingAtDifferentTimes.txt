@Test public void testWorkersExitingAtDifferentTimes() throws Exception {
  MockTime time=new MockTime(0,0,0);
  Scheduler scheduler=new MockScheduler(time);
  try (MiniTrogdorCluster cluster=new MiniTrogdorCluster.Builder().addCoordinator("node01").addAgent("node02").addAgent("node03").scheduler(scheduler).build()){
    CoordinatorClient coordinatorClient=cluster.coordinatorClient();
    new ExpectedTasks().waitFor(coordinatorClient);
    HashMap<String,Long> nodeToExitMs=new HashMap<>();
    nodeToExitMs.put("node02",10L);
    nodeToExitMs.put("node03",20L);
    SampleTaskSpec fooSpec=new SampleTaskSpec(2,100,nodeToExitMs,"");
    coordinatorClient.createTask(new CreateTaskRequest("foo",fooSpec));
    new ExpectedTasks().addTask(new ExpectedTaskBuilder("foo").taskState(new TaskPending(fooSpec)).build()).waitFor(coordinatorClient);
    time.sleep(2);
    ObjectNode status1=new ObjectNode(JsonNodeFactory.instance);
    status1.set("node02",new TextNode("active"));
    status1.set("node03",new TextNode("active"));
    new ExpectedTasks().addTask(new ExpectedTaskBuilder("foo").taskState(new TaskRunning(fooSpec,2,status1)).workerState(new WorkerRunning("foo",fooSpec,2,new TextNode("active"))).build()).waitFor(coordinatorClient).waitFor(cluster.agentClient("node02")).waitFor(cluster.agentClient("node03"));
    time.sleep(10);
    ObjectNode status2=new ObjectNode(JsonNodeFactory.instance);
    status2.set("node02",new TextNode("halted"));
    status2.set("node03",new TextNode("active"));
    new ExpectedTasks().addTask(new ExpectedTaskBuilder("foo").taskState(new TaskRunning(fooSpec,2,status2)).workerState(new WorkerRunning("foo",fooSpec,2,new TextNode("active"))).build()).waitFor(coordinatorClient).waitFor(cluster.agentClient("node03"));
    new ExpectedTasks().addTask(new ExpectedTaskBuilder("foo").taskState(new TaskRunning(fooSpec,2,status2)).workerState(new WorkerDone("foo",fooSpec,2,12,new TextNode("halted"),"")).build()).waitFor(cluster.agentClient("node02"));
    time.sleep(10);
    ObjectNode status3=new ObjectNode(JsonNodeFactory.instance);
    status3.set("node02",new TextNode("halted"));
    status3.set("node03",new TextNode("halted"));
    new ExpectedTasks().addTask(new ExpectedTaskBuilder("foo").taskState(new TaskDone(fooSpec,2,22,"",false,status3)).build()).waitFor(coordinatorClient);
  }
 }
