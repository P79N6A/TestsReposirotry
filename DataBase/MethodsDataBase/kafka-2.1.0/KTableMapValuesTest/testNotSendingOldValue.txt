@Test public void testNotSendingOldValue(){
  final StreamsBuilder builder=new StreamsBuilder();
  final String topic1="topic1";
  final KTableImpl<String,String,String> table1=(KTableImpl<String,String,String>)builder.table(topic1,consumed);
  final KTableImpl<String,String,Integer> table2=(KTableImpl<String,String,Integer>)table1.mapValues(new ValueMapper<String,Integer>(){
    @Override public Integer apply(    final String value){
      return new Integer(value);
    }
  }
);
  final MockProcessorSupplier<String,Integer> supplier=new MockProcessorSupplier<>();
  final Topology topology=builder.build().addProcessor("proc",supplier,table2.name);
  try (final TopologyTestDriver driver=new TopologyTestDriver(topology,props)){
    final MockProcessor<String,Integer> proc=supplier.theCapturedProcessor();
    assertFalse(table1.sendingOldValueEnabled());
    assertFalse(table2.sendingOldValueEnabled());
    driver.pipeInput(recordFactory.create(topic1,"A","01"));
    driver.pipeInput(recordFactory.create(topic1,"B","01"));
    driver.pipeInput(recordFactory.create(topic1,"C","01"));
    proc.checkAndClearProcessResult("A:(1<-null)","B:(1<-null)","C:(1<-null)");
    driver.pipeInput(recordFactory.create(topic1,"A","02"));
    driver.pipeInput(recordFactory.create(topic1,"B","02"));
    proc.checkAndClearProcessResult("A:(2<-null)","B:(2<-null)");
    driver.pipeInput(recordFactory.create(topic1,"A","03"));
    proc.checkAndClearProcessResult("A:(3<-null)");
    driver.pipeInput(recordFactory.create(topic1,"A",(String)null));
    proc.checkAndClearProcessResult("A:(null<-null)");
  }
 }
