@Test public void testErrorHandlingInSinkTasks() throws Exception {
  Map<String,String> reportProps=new HashMap<>();
  reportProps.put(ConnectorConfig.ERRORS_LOG_ENABLE_CONFIG,"true");
  reportProps.put(ConnectorConfig.ERRORS_LOG_INCLUDE_MESSAGES_CONFIG,"true");
  LogReporter reporter=new LogReporter(taskId,connConfig(reportProps),errorHandlingMetrics);
  RetryWithToleranceOperator retryWithToleranceOperator=operator();
  retryWithToleranceOperator.metrics(errorHandlingMetrics);
  retryWithToleranceOperator.reporters(singletonList(reporter));
  createSinkTask(initialState,retryWithToleranceOperator);
  expectInitializeTask();
  ConsumerRecord<byte[],byte[]> record1=new ConsumerRecord<>(TOPIC,PARTITION1,FIRST_OFFSET,null,"{\"a\": 10}".getBytes());
  ConsumerRecord<byte[],byte[]> record2=new ConsumerRecord<>(TOPIC,PARTITION2,FIRST_OFFSET,null,"{\"a\" 10}".getBytes());
  EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andReturn(records(record1));
  EasyMock.expect(consumer.poll(Duration.ofMillis(EasyMock.anyLong()))).andReturn(records(record2));
  sinkTask.put(EasyMock.anyObject());
  EasyMock.expectLastCall().times(2);
  PowerMock.replayAll();
  workerSinkTask.initialize(TASK_CONFIG);
  workerSinkTask.initializeAndStart();
  workerSinkTask.iteration();
  workerSinkTask.iteration();
  assertSinkMetricValue("sink-record-read-total",2.0);
  assertSinkMetricValue("sink-record-send-total",1.0);
  assertErrorHandlingMetricValue("total-record-errors",1.0);
  assertErrorHandlingMetricValue("total-record-failures",3.0);
  assertErrorHandlingMetricValue("total-records-skipped",1.0);
  PowerMock.verifyAll();
}
