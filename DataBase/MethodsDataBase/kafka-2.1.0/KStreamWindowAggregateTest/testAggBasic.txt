@Test public void testAggBasic(){
  final StreamsBuilder builder=new StreamsBuilder();
  final String topic1="topic1";
  final KTable<Windowed<String>,String> table2=builder.stream(topic1,Consumed.with(Serdes.String(),Serdes.String())).groupByKey(Grouped.with(Serdes.String(),Serdes.String())).windowedBy(TimeWindows.of(ofMillis(10)).advanceBy(ofMillis(5))).aggregate(MockInitializer.STRING_INIT,MockAggregator.TOSTRING_ADDER,Materialized.<String,String,WindowStore<Bytes,byte[]>>as("topic1-Canonized").withValueSerde(Serdes.String()));
  final MockProcessorSupplier<Windowed<String>,String> supplier=new MockProcessorSupplier<>();
  table2.toStream().process(supplier);
  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props,0L)){
    driver.pipeInput(recordFactory.create(topic1,"A","1",0L));
    driver.pipeInput(recordFactory.create(topic1,"B","2",1L));
    driver.pipeInput(recordFactory.create(topic1,"C","3",2L));
    driver.pipeInput(recordFactory.create(topic1,"D","4",3L));
    driver.pipeInput(recordFactory.create(topic1,"A","1",4L));
    driver.pipeInput(recordFactory.create(topic1,"A","1",5L));
    driver.pipeInput(recordFactory.create(topic1,"B","2",6L));
    driver.pipeInput(recordFactory.create(topic1,"D","4",7L));
    driver.pipeInput(recordFactory.create(topic1,"B","2",8L));
    driver.pipeInput(recordFactory.create(topic1,"C","3",9L));
    driver.pipeInput(recordFactory.create(topic1,"A","1",10L));
    driver.pipeInput(recordFactory.create(topic1,"B","2",11L));
    driver.pipeInput(recordFactory.create(topic1,"D","4",12L));
    driver.pipeInput(recordFactory.create(topic1,"B","2",13L));
    driver.pipeInput(recordFactory.create(topic1,"C","3",14L));
  }
   assertEquals(Utils.mkList("[A@0/10]:0+1","[B@0/10]:0+2","[C@0/10]:0+3","[D@0/10]:0+4","[A@0/10]:0+1+1","[A@0/10]:0+1+1+1","[A@5/15]:0+1","[B@0/10]:0+2+2","[B@5/15]:0+2","[D@0/10]:0+4+4","[D@5/15]:0+4","[B@0/10]:0+2+2+2","[B@5/15]:0+2+2","[C@0/10]:0+3+3","[C@5/15]:0+3","[A@5/15]:0+1+1","[A@10/20]:0+1","[B@5/15]:0+2+2+2","[B@10/20]:0+2","[D@5/15]:0+4+4","[D@10/20]:0+4","[B@5/15]:0+2+2+2+2","[B@10/20]:0+2+2","[C@5/15]:0+3+3","[C@10/20]:0+3"),supplier.theCapturedProcessor().processed);
}
