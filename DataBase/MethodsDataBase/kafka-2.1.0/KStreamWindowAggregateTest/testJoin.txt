@Test public void testJoin(){
  final StreamsBuilder builder=new StreamsBuilder();
  final String topic1="topic1";
  final String topic2="topic2";
  final KTable<Windowed<String>,String> table1=builder.stream(topic1,Consumed.with(Serdes.String(),Serdes.String())).groupByKey(Grouped.with(Serdes.String(),Serdes.String())).windowedBy(TimeWindows.of(ofMillis(10)).advanceBy(ofMillis(5))).aggregate(MockInitializer.STRING_INIT,MockAggregator.TOSTRING_ADDER,Materialized.<String,String,WindowStore<Bytes,byte[]>>as("topic1-Canonized").withValueSerde(Serdes.String()));
  final MockProcessorSupplier<Windowed<String>,String> supplier=new MockProcessorSupplier<>();
  table1.toStream().process(supplier);
  final KTable<Windowed<String>,String> table2=builder.stream(topic2,Consumed.with(Serdes.String(),Serdes.String())).groupByKey(Grouped.with(Serdes.String(),Serdes.String())).windowedBy(TimeWindows.of(ofMillis(10)).advanceBy(ofMillis(5))).aggregate(MockInitializer.STRING_INIT,MockAggregator.TOSTRING_ADDER,Materialized.<String,String,WindowStore<Bytes,byte[]>>as("topic2-Canonized").withValueSerde(Serdes.String()));
  table2.toStream().process(supplier);
  table1.join(table2,(p1,p2) -> p1 + "%" + p2).toStream().process(supplier);
  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props,0L)){
    driver.pipeInput(recordFactory.create(topic1,"A","1",0L));
    driver.pipeInput(recordFactory.create(topic1,"B","2",1L));
    driver.pipeInput(recordFactory.create(topic1,"C","3",2L));
    driver.pipeInput(recordFactory.create(topic1,"D","4",3L));
    driver.pipeInput(recordFactory.create(topic1,"A","1",4L));
    final List<MockProcessor<Windowed<String>,String>> processors=supplier.capturedProcessors(3);
    processors.get(0).checkAndClearProcessResult("[A@0/10]:0+1","[B@0/10]:0+2","[C@0/10]:0+3","[D@0/10]:0+4","[A@0/10]:0+1+1");
    processors.get(1).checkAndClearProcessResult();
    processors.get(2).checkAndClearProcessResult();
    driver.pipeInput(recordFactory.create(topic1,"A","1",5L));
    driver.pipeInput(recordFactory.create(topic1,"B","2",6L));
    driver.pipeInput(recordFactory.create(topic1,"D","4",7L));
    driver.pipeInput(recordFactory.create(topic1,"B","2",8L));
    driver.pipeInput(recordFactory.create(topic1,"C","3",9L));
    processors.get(0).checkAndClearProcessResult("[A@0/10]:0+1+1+1","[A@5/15]:0+1","[B@0/10]:0+2+2","[B@5/15]:0+2","[D@0/10]:0+4+4","[D@5/15]:0+4","[B@0/10]:0+2+2+2","[B@5/15]:0+2+2","[C@0/10]:0+3+3","[C@5/15]:0+3");
    processors.get(1).checkAndClearProcessResult();
    processors.get(2).checkAndClearProcessResult();
    driver.pipeInput(recordFactory.create(topic2,"A","a",0L));
    driver.pipeInput(recordFactory.create(topic2,"B","b",1L));
    driver.pipeInput(recordFactory.create(topic2,"C","c",2L));
    driver.pipeInput(recordFactory.create(topic2,"D","d",3L));
    driver.pipeInput(recordFactory.create(topic2,"A","a",4L));
    processors.get(0).checkAndClearProcessResult();
    processors.get(1).checkAndClearProcessResult("[A@0/10]:0+a","[B@0/10]:0+b","[C@0/10]:0+c","[D@0/10]:0+d","[A@0/10]:0+a+a");
    processors.get(2).checkAndClearProcessResult("[A@0/10]:0+1+1+1%0+a","[B@0/10]:0+2+2+2%0+b","[C@0/10]:0+3+3%0+c","[D@0/10]:0+4+4%0+d","[A@0/10]:0+1+1+1%0+a+a");
    driver.pipeInput(recordFactory.create(topic2,"A","a",5L));
    driver.pipeInput(recordFactory.create(topic2,"B","b",6L));
    driver.pipeInput(recordFactory.create(topic2,"D","d",7L));
    driver.pipeInput(recordFactory.create(topic2,"B","b",8L));
    driver.pipeInput(recordFactory.create(topic2,"C","c",9L));
    processors.get(0).checkAndClearProcessResult();
    processors.get(1).checkAndClearProcessResult("[A@0/10]:0+a+a+a","[A@5/15]:0+a","[B@0/10]:0+b+b","[B@5/15]:0+b","[D@0/10]:0+d+d","[D@5/15]:0+d","[B@0/10]:0+b+b+b","[B@5/15]:0+b+b","[C@0/10]:0+c+c","[C@5/15]:0+c");
    processors.get(2).checkAndClearProcessResult("[A@0/10]:0+1+1+1%0+a+a+a","[A@5/15]:0+1%0+a","[B@0/10]:0+2+2+2%0+b+b","[B@5/15]:0+2+2%0+b","[D@0/10]:0+4+4%0+d+d","[D@5/15]:0+4%0+d","[B@0/10]:0+2+2+2%0+b+b+b","[B@5/15]:0+2+2%0+b+b","[C@0/10]:0+3+3%0+c+c","[C@5/15]:0+3%0+c");
  }
 }
