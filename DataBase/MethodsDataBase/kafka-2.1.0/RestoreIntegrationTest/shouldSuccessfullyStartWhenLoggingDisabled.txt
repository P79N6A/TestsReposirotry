@Test public void shouldSuccessfullyStartWhenLoggingDisabled() throws InterruptedException {
  final StreamsBuilder builder=new StreamsBuilder();
  final KStream<Integer,Integer> stream=builder.stream(INPUT_STREAM);
  stream.groupByKey().reduce(new Reducer<Integer>(){
    @Override public Integer apply(    final Integer value1,    final Integer value2){
      return value1 + value2;
    }
  }
,Materialized.<Integer,Integer,KeyValueStore<Bytes,byte[]>>as("reduce-store").withLoggingDisabled());
  final CountDownLatch startupLatch=new CountDownLatch(1);
  kafkaStreams=new KafkaStreams(builder.build(),props(APPID));
  kafkaStreams.setStateListener(new KafkaStreams.StateListener(){
    @Override public void onChange(    final KafkaStreams.State newState,    final KafkaStreams.State oldState){
      if (newState == KafkaStreams.State.RUNNING && oldState == KafkaStreams.State.REBALANCING) {
        startupLatch.countDown();
      }
    }
  }
);
  kafkaStreams.start();
  assertTrue(startupLatch.await(30,TimeUnit.SECONDS));
}
