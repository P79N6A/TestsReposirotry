@Test public void testAggRepartition(){
  final StreamsBuilder builder=new StreamsBuilder();
  final String topic1="topic1";
  final KTable<String,String> table1=builder.table(topic1,consumed);
  final KTable<String,String> table2=table1.groupBy(new KeyValueMapper<String,String,KeyValue<String,String>>(){
    @Override public KeyValue<String,String> apply(    final String key,    final String value){
switch (key) {
case "null":
        return KeyValue.pair(null,value);
case "NULL":
      return null;
default :
    return KeyValue.pair(value,value);
}
}
}
,stringSerialzied).aggregate(MockInitializer.STRING_INIT,MockAggregator.TOSTRING_ADDER,MockAggregator.TOSTRING_REMOVER,Materialized.<String,String,KeyValueStore<Bytes,byte[]>>as("topic1-Canonized").withValueSerde(stringSerde));
table2.toStream().process(supplier);
driver.setUp(builder,stateDir);
driver.process(topic1,"A","1");
driver.flushState();
driver.process(topic1,"A",null);
driver.flushState();
driver.process(topic1,"A","1");
driver.flushState();
driver.process(topic1,"B","2");
driver.flushState();
driver.process(topic1,"null","3");
driver.flushState();
driver.process(topic1,"B","4");
driver.flushState();
driver.process(topic1,"NULL","5");
driver.flushState();
driver.process(topic1,"B","7");
driver.flushState();
assertEquals(Utils.mkList("1:0+1","1:0+1-1","1:0+1-1+1","2:0+2","2:0+2-2","4:0+4","4:0+4-4","7:0+7"),supplier.theCapturedProcessor().processed);
}
