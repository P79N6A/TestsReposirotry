@Test public void testLinearBinScheme(){
  LinearBinScheme scheme=new LinearBinScheme(10,10);
  assertEquals(Float.NEGATIVE_INFINITY,scheme.fromBin(-1),0.001d);
  assertEquals(Float.POSITIVE_INFINITY,scheme.fromBin(11),0.001d);
  assertEquals(0.0,scheme.fromBin(0),0.001d);
  assertEquals(0.2222,scheme.fromBin(1),0.001d);
  assertEquals(0.6666,scheme.fromBin(2),0.001d);
  assertEquals(1.3333,scheme.fromBin(3),0.001d);
  assertEquals(2.2222,scheme.fromBin(4),0.001d);
  assertEquals(3.3333,scheme.fromBin(5),0.001d);
  assertEquals(4.6667,scheme.fromBin(6),0.001d);
  assertEquals(6.2222,scheme.fromBin(7),0.001d);
  assertEquals(8.0000,scheme.fromBin(8),0.001d);
  assertEquals(10.000,scheme.fromBin(9),0.001d);
  assertEquals(0,scheme.toBin(0.0000));
  assertEquals(0,scheme.toBin(0.2221));
  assertEquals(1,scheme.toBin(0.2223));
  assertEquals(2,scheme.toBin(0.6667));
  assertEquals(3,scheme.toBin(1.3334));
  assertEquals(4,scheme.toBin(2.2223));
  assertEquals(5,scheme.toBin(3.3334));
  assertEquals(6,scheme.toBin(4.6667));
  assertEquals(7,scheme.toBin(6.2223));
  assertEquals(8,scheme.toBin(8.0000));
  assertEquals(9,scheme.toBin(10.000));
  assertEquals(9,scheme.toBin(10.001));
  assertEquals(Float.POSITIVE_INFINITY,scheme.fromBin(10),0.001d);
  checkBinningConsistency(scheme);
}
