@Test public void testConstantBinSchemeWithPositiveRange(){
  ConstantBinScheme scheme=new ConstantBinScheme(5,0,5);
  assertEquals("A value below the lower bound should map to the first bin",0,scheme.toBin(-1.0));
  assertEquals("A value above the upper bound should map to the last bin",4,scheme.toBin(5.01));
  assertEquals("Check boundary of bucket 0",0,scheme.toBin(-0.0001));
  assertEquals("Check boundary of bucket 0",0,scheme.toBin(0.0000));
  assertEquals("Check boundary of bucket 0",0,scheme.toBin(0.0001));
  assertEquals("Check boundary of bucket 0",0,scheme.toBin(0.9999));
  assertEquals("Check boundary of bucket 1",1,scheme.toBin(1.0000));
  assertEquals("Check boundary of bucket 1",1,scheme.toBin(1.0001));
  assertEquals("Check boundary of bucket 1",1,scheme.toBin(1.9999));
  assertEquals("Check boundary of bucket 2",2,scheme.toBin(2.0000));
  assertEquals("Check boundary of bucket 2",2,scheme.toBin(2.0001));
  assertEquals("Check boundary of bucket 2",2,scheme.toBin(2.9999));
  assertEquals("Check boundary of bucket 3",3,scheme.toBin(3.0000));
  assertEquals("Check boundary of bucket 3",3,scheme.toBin(3.0001));
  assertEquals("Check boundary of bucket 3",3,scheme.toBin(3.9999));
  assertEquals("Check boundary of bucket 4",4,scheme.toBin(4.0000));
  assertEquals("Check boundary of bucket 4",4,scheme.toBin(4.9999));
  assertEquals("Check boundary of bucket 4",4,scheme.toBin(5.0000));
  assertEquals("Check boundary of bucket 4",4,scheme.toBin(5.0001));
  assertEquals(Float.NEGATIVE_INFINITY,scheme.fromBin(-1),0.001d);
  assertEquals(Float.POSITIVE_INFINITY,scheme.fromBin(5),0.001d);
  assertEquals(0.0,scheme.fromBin(0),0.001d);
  assertEquals(1.0,scheme.fromBin(1),0.001d);
  assertEquals(2.0,scheme.fromBin(2),0.001d);
  assertEquals(3.0,scheme.fromBin(3),0.001d);
  assertEquals(4.0,scheme.fromBin(4),0.001d);
  checkBinningConsistency(scheme);
}
