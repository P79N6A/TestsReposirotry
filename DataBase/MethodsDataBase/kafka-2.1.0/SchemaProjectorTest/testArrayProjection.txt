@Test public void testArrayProjection() throws Exception {
  Schema source=SchemaBuilder.array(Schema.INT32_SCHEMA).build();
  Object projected=SchemaProjector.project(source,Arrays.asList(1,2,3),source);
  assertEquals(Arrays.asList(1,2,3),(List<Integer>)projected);
  Schema optionalSource=SchemaBuilder.array(Schema.INT32_SCHEMA).optional().build();
  Schema target=SchemaBuilder.array(Schema.INT32_SCHEMA).defaultValue(Arrays.asList(1,2,3)).build();
  projected=SchemaProjector.project(optionalSource,Arrays.asList(4,5),target);
  assertEquals(Arrays.asList(4,5),(List<Integer>)projected);
  projected=SchemaProjector.project(optionalSource,null,target);
  assertEquals(Arrays.asList(1,2,3),(List<Integer>)projected);
  Schema promotedTarget=SchemaBuilder.array(Schema.INT64_SCHEMA).defaultValue(Arrays.asList(1L,2L,3L)).build();
  projected=SchemaProjector.project(optionalSource,Arrays.asList(4,5),promotedTarget);
  List<Long> expectedProjected=Arrays.asList(4L,5L);
  assertEquals(expectedProjected,(List<Long>)projected);
  projected=SchemaProjector.project(optionalSource,null,promotedTarget);
  assertEquals(Arrays.asList(1L,2L,3L),(List<Long>)projected);
  Schema noDefaultValueTarget=SchemaBuilder.array(Schema.INT32_SCHEMA).build();
  try {
    SchemaProjector.project(optionalSource,null,noDefaultValueTarget);
    fail("Target schema does not provide a default value.");
  }
 catch (  SchemaProjectorException e) {
  }
  Schema nonPromotableTarget=SchemaBuilder.array(Schema.BOOLEAN_SCHEMA).build();
  try {
    SchemaProjector.project(optionalSource,null,nonPromotableTarget);
    fail("Neither source type matches target type nor source type can be promoted to target type");
  }
 catch (  SchemaProjectorException e) {
  }
}
