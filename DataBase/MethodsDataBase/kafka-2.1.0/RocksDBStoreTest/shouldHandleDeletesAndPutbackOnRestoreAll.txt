@Test public void shouldHandleDeletesAndPutbackOnRestoreAll(){
  final List<KeyValue<byte[],byte[]>> entries=new ArrayList<>();
  entries.add(new KeyValue<>("1".getBytes(UTF_8),"a".getBytes(UTF_8)));
  entries.add(new KeyValue<>("2".getBytes(UTF_8),"b".getBytes(UTF_8)));
  entries.add(new KeyValue<>("1".getBytes(UTF_8),null));
  entries.add(new KeyValue<>("3".getBytes(UTF_8),"c".getBytes(UTF_8)));
  entries.add(new KeyValue<>("1".getBytes(UTF_8),"restored".getBytes(UTF_8)));
  rocksDBStore.init(context,rocksDBStore);
  context.restore(rocksDBStore.name(),entries);
  final KeyValueIterator<Bytes,byte[]> iterator=rocksDBStore.all();
  final Set<String> keys=new HashSet<>();
  while (iterator.hasNext()) {
    keys.add(stringDeserializer.deserialize(null,iterator.next().key.get()));
  }
  assertThat(keys,equalTo(Utils.mkSet("1","2","3")));
  assertEquals(stringDeserializer.deserialize(null,rocksDBStore.get(new Bytes(stringSerializer.serialize(null,"1")))),"restored");
  assertEquals(stringDeserializer.deserialize(null,rocksDBStore.get(new Bytes(stringSerializer.serialize(null,"2")))),"b");
  assertEquals(stringDeserializer.deserialize(null,rocksDBStore.get(new Bytes(stringSerializer.serialize(null,"3")))),"c");
}
