@Test public void shouldLogAndMeasureExpiredRecords(){
  LogCaptureAppender.setClassLoggerToDebug(RocksDBSegmentedBytesStore.class);
  final LogCaptureAppender appender=LogCaptureAppender.createAndRegister();
  context.setStreamTime(Math.max(retention,segmentInterval) * 2);
  bytesStore.put(serializeKey(new Windowed<>("a",windows[0])),serializeValue(5));
  LogCaptureAppender.unregister(appender);
  final Map<MetricName,? extends Metric> metrics=context.metrics().metrics();
  final Metric dropTotal=metrics.get(new MetricName("expired-window-record-drop-total","stream-metrics-scope-metrics","The total number of occurrence of expired-window-record-drop operations.",mkMap(mkEntry("client-id","mock"),mkEntry("task-id","0_0"),mkEntry("metrics-scope-id","bytes-store"))));
  final Metric dropRate=metrics.get(new MetricName("expired-window-record-drop-rate","stream-metrics-scope-metrics","The average number of occurrence of expired-window-record-drop operation per second.",mkMap(mkEntry("client-id","mock"),mkEntry("task-id","0_0"),mkEntry("metrics-scope-id","bytes-store"))));
  assertEquals(1.0,dropTotal.metricValue());
  assertNotEquals(0.0,dropRate.metricValue());
  final List<String> messages=appender.getMessages();
  assertThat(messages,hasItem("Skipping record for expired segment."));
}
