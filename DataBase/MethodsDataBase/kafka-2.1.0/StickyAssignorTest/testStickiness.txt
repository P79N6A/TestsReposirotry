@Test public void testStickiness(){
  Map<String,Integer> partitionsPerTopic=new HashMap<>();
  partitionsPerTopic.put("topic01",3);
  Map<String,Subscription> subscriptions=new HashMap<>();
  subscriptions.put("consumer01",new Subscription(topics("topic01")));
  subscriptions.put("consumer02",new Subscription(topics("topic01")));
  subscriptions.put("consumer03",new Subscription(topics("topic01")));
  subscriptions.put("consumer04",new Subscription(topics("topic01")));
  Map<String,List<TopicPartition>> assignment=assignor.assign(partitionsPerTopic,subscriptions);
  verifyValidityAndBalance(subscriptions,assignment);
  Map<String,TopicPartition> partitionsAssigned=new HashMap<>();
  Set<Entry<String,List<TopicPartition>>> assignments=assignment.entrySet();
  for (  Map.Entry<String,List<TopicPartition>> entry : assignments) {
    String consumer=entry.getKey();
    List<TopicPartition> topicPartitions=entry.getValue();
    int size=topicPartitions.size();
    assertTrue("Consumer " + consumer + " is assigned more topic partitions than expected.",size <= 1);
    if (size == 1)     partitionsAssigned.put(consumer,topicPartitions.get(0));
  }
  subscriptions.remove("consumer01");
  subscriptions.put("consumer02",new Subscription(topics("topic01"),StickyAssignor.serializeTopicPartitionAssignment(assignment.get("consumer02"))));
  subscriptions.put("consumer03",new Subscription(topics("topic01"),StickyAssignor.serializeTopicPartitionAssignment(assignment.get("consumer03"))));
  subscriptions.put("consumer04",new Subscription(topics("topic01"),StickyAssignor.serializeTopicPartitionAssignment(assignment.get("consumer04"))));
  assignment=assignor.assign(partitionsPerTopic,subscriptions);
  verifyValidityAndBalance(subscriptions,assignment);
  assertTrue(assignor.isSticky());
  assignments=assignment.entrySet();
  for (  Map.Entry<String,List<TopicPartition>> entry : assignments) {
    String consumer=entry.getKey();
    List<TopicPartition> topicPartitions=entry.getValue();
    assertEquals("Consumer " + consumer + " is assigned more topic partitions than expected.",1,topicPartitions.size());
    assertTrue("Stickiness was not honored for consumer " + consumer,(!partitionsAssigned.containsKey(consumer)) || (assignment.get(consumer).contains(partitionsAssigned.get(consumer))));
  }
}
