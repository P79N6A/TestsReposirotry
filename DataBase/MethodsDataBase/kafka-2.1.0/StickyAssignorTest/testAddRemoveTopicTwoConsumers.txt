@Test public void testAddRemoveTopicTwoConsumers(){
  String topic="topic";
  String consumer1="consumer";
  String consumer2="consumer2";
  Map<String,Integer> partitionsPerTopic=new HashMap<>();
  partitionsPerTopic.put(topic,3);
  Map<String,Subscription> subscriptions=new HashMap<>();
  subscriptions.put(consumer1,new Subscription(topics(topic)));
  subscriptions.put(consumer2,new Subscription(topics(topic)));
  Map<String,List<TopicPartition>> assignment=assignor.assign(partitionsPerTopic,subscriptions);
  assertTrue(isFullyBalanced(assignment));
  verifyValidityAndBalance(subscriptions,assignment);
  List<TopicPartition> consumer1Assignment1=assignment.get(consumer1);
  List<TopicPartition> consumer2Assignment1=assignment.get(consumer2);
  assertTrue((consumer1Assignment1.size() == 1 && consumer2Assignment1.size() == 2) || (consumer1Assignment1.size() == 2 && consumer2Assignment1.size() == 1));
  String topic2="topic2";
  partitionsPerTopic.put(topic2,3);
  subscriptions.put(consumer1,new Subscription(topics(topic,topic2),StickyAssignor.serializeTopicPartitionAssignment(assignment.get(consumer1))));
  subscriptions.put(consumer2,new Subscription(topics(topic,topic2),StickyAssignor.serializeTopicPartitionAssignment(assignment.get(consumer2))));
  assignment=assignor.assign(partitionsPerTopic,subscriptions);
  verifyValidityAndBalance(subscriptions,assignment);
  assertTrue(isFullyBalanced(assignment));
  List<TopicPartition> consumer1assignment=assignment.get(consumer1);
  List<TopicPartition> consumer2assignment=assignment.get(consumer2);
  assertTrue(consumer1assignment.size() == 3 && consumer2assignment.size() == 3);
  assertTrue(consumer1assignment.containsAll(consumer1Assignment1));
  assertTrue(consumer2assignment.containsAll(consumer2Assignment1));
  assertTrue(assignor.isSticky());
  partitionsPerTopic.remove(topic);
  subscriptions.put(consumer1,new Subscription(topics(topic2),StickyAssignor.serializeTopicPartitionAssignment(assignment.get(consumer1))));
  subscriptions.put(consumer2,new Subscription(topics(topic2),StickyAssignor.serializeTopicPartitionAssignment(assignment.get(consumer2))));
  assignment=assignor.assign(partitionsPerTopic,subscriptions);
  verifyValidityAndBalance(subscriptions,assignment);
  assertTrue(isFullyBalanced(assignment));
  List<TopicPartition> consumer1Assignment3=assignment.get(consumer1);
  List<TopicPartition> consumer2Assignment3=assignment.get(consumer2);
  assertTrue((consumer1Assignment3.size() == 1 && consumer2Assignment3.size() == 2) || (consumer1Assignment3.size() == 2 && consumer2Assignment3.size() == 1));
  assertTrue(consumer1assignment.containsAll(consumer1Assignment3));
  assertTrue(consumer2assignment.containsAll(consumer2Assignment3));
  assertTrue(assignor.isSticky());
}
