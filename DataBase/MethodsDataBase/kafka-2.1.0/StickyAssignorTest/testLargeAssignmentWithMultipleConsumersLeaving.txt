@Test public void testLargeAssignmentWithMultipleConsumersLeaving(){
  Random rand=new Random();
  int topicCount=40;
  int consumerCount=200;
  Map<String,Integer> partitionsPerTopic=new HashMap<>();
  for (int i=0; i < topicCount; i++)   partitionsPerTopic.put(getTopicName(i,topicCount),rand.nextInt(10) + 1);
  Map<String,Subscription> subscriptions=new HashMap<>();
  for (int i=0; i < consumerCount; i++) {
    List<String> topics=new ArrayList<String>();
    for (int j=0; j < rand.nextInt(20); j++)     topics.add(getTopicName(rand.nextInt(topicCount),topicCount));
    subscriptions.put(getConsumerName(i,consumerCount),new Subscription(topics));
  }
  Map<String,List<TopicPartition>> assignment=assignor.assign(partitionsPerTopic,subscriptions);
  verifyValidityAndBalance(subscriptions,assignment);
  for (int i=1; i < consumerCount; i++) {
    String consumer=getConsumerName(i,consumerCount);
    subscriptions.put(consumer,new Subscription(subscriptions.get(consumer).topics(),StickyAssignor.serializeTopicPartitionAssignment(assignment.get(consumer))));
  }
  for (int i=0; i < 50; ++i) {
    String c=getConsumerName(rand.nextInt(consumerCount),consumerCount);
    subscriptions.remove(c);
  }
  assignment=assignor.assign(partitionsPerTopic,subscriptions);
  verifyValidityAndBalance(subscriptions,assignment);
  assertTrue(assignor.isSticky());
}
