@Test public void testReassignmentWithRandomSubscriptionsAndChanges(){
  final int minNumConsumers=20;
  final int maxNumConsumers=40;
  final int minNumTopics=10;
  final int maxNumTopics=20;
  for (int round=1; round <= 100; ++round) {
    int numTopics=minNumTopics + new Random().nextInt(maxNumTopics - minNumTopics);
    ArrayList<String> topics=new ArrayList<>();
    for (int i=0; i < numTopics; ++i)     topics.add(getTopicName(i,maxNumTopics));
    Map<String,Integer> partitionsPerTopic=new HashMap<>();
    for (int i=0; i < numTopics; ++i)     partitionsPerTopic.put(getTopicName(i,maxNumTopics),i + 1);
    int numConsumers=minNumConsumers + new Random().nextInt(maxNumConsumers - minNumConsumers);
    Map<String,Subscription> subscriptions=new HashMap<>();
    for (int i=0; i < numConsumers; ++i) {
      List<String> sub=Utils.sorted(getRandomSublist(topics));
      subscriptions.put(getConsumerName(i,maxNumConsumers),new Subscription(sub));
    }
    StickyAssignor assignor=new StickyAssignor();
    Map<String,List<TopicPartition>> assignment=assignor.assign(partitionsPerTopic,subscriptions);
    verifyValidityAndBalance(subscriptions,assignment);
    subscriptions.clear();
    for (int i=0; i < numConsumers; ++i) {
      List<String> sub=Utils.sorted(getRandomSublist(topics));
      String consumer=getConsumerName(i,maxNumConsumers);
      subscriptions.put(consumer,new Subscription(sub,StickyAssignor.serializeTopicPartitionAssignment(assignment.get(consumer))));
    }
    assignment=assignor.assign(partitionsPerTopic,subscriptions);
    verifyValidityAndBalance(subscriptions,assignment);
    assertTrue(assignor.isSticky());
  }
}
