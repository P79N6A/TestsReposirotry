@Test public void testAddRemoveConsumerOneTopic(){
  String topic="topic";
  String consumer1="consumer";
  Map<String,Integer> partitionsPerTopic=new HashMap<>();
  partitionsPerTopic.put(topic,3);
  Map<String,Subscription> subscriptions=new HashMap<>();
  subscriptions.put(consumer1,new Subscription(topics(topic)));
  Map<String,List<TopicPartition>> assignment=assignor.assign(partitionsPerTopic,subscriptions);
  assertEquals(partitions(tp(topic,0),tp(topic,1),tp(topic,2)),assignment.get(consumer1));
  verifyValidityAndBalance(subscriptions,assignment);
  assertTrue(isFullyBalanced(assignment));
  String consumer2="consumer2";
  subscriptions.put(consumer1,new Subscription(topics(topic),StickyAssignor.serializeTopicPartitionAssignment(assignment.get(consumer1))));
  subscriptions.put(consumer2,new Subscription(topics(topic)));
  assignment=assignor.assign(partitionsPerTopic,subscriptions);
  assertEquals(partitions(tp(topic,1),tp(topic,2)),assignment.get(consumer1));
  assertEquals(partitions(tp(topic,0)),assignment.get(consumer2));
  verifyValidityAndBalance(subscriptions,assignment);
  assertTrue(isFullyBalanced(assignment));
  assertTrue(assignor.isSticky());
  subscriptions.remove(consumer1);
  subscriptions.put(consumer2,new Subscription(topics(topic),StickyAssignor.serializeTopicPartitionAssignment(assignment.get(consumer2))));
  assignment=assignor.assign(partitionsPerTopic,subscriptions);
  assertTrue(assignment.get(consumer2).contains(tp(topic,0)));
  assertTrue(assignment.get(consumer2).contains(tp(topic,1)));
  assertTrue(assignment.get(consumer2).contains(tp(topic,2)));
  verifyValidityAndBalance(subscriptions,assignment);
  assertTrue(isFullyBalanced(assignment));
  assertTrue(assignor.isSticky());
}
