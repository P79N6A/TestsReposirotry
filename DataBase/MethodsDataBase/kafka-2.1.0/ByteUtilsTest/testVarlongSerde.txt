@Test public void testVarlongSerde() throws Exception {
  assertVarlongSerde(0,new byte[]{x00});
  assertVarlongSerde(-1,new byte[]{x01});
  assertVarlongSerde(1,new byte[]{x02});
  assertVarlongSerde(63,new byte[]{x7E});
  assertVarlongSerde(-64,new byte[]{x7F});
  assertVarlongSerde(64,new byte[]{x80,x01});
  assertVarlongSerde(-65,new byte[]{x81,x01});
  assertVarlongSerde(8191,new byte[]{xFE,x7F});
  assertVarlongSerde(-8192,new byte[]{xFF,x7F});
  assertVarlongSerde(8192,new byte[]{x80,x80,x01});
  assertVarlongSerde(-8193,new byte[]{x81,x80,x01});
  assertVarlongSerde(1048575,new byte[]{xFE,xFF,x7F});
  assertVarlongSerde(-1048576,new byte[]{xFF,xFF,x7F});
  assertVarlongSerde(1048576,new byte[]{x80,x80,x80,x01});
  assertVarlongSerde(-1048577,new byte[]{x81,x80,x80,x01});
  assertVarlongSerde(134217727,new byte[]{xFE,xFF,xFF,x7F});
  assertVarlongSerde(-134217728,new byte[]{xFF,xFF,xFF,x7F});
  assertVarlongSerde(134217728,new byte[]{x80,x80,x80,x80,x01});
  assertVarlongSerde(-134217729,new byte[]{x81,x80,x80,x80,x01});
  assertVarlongSerde(Integer.MAX_VALUE,new byte[]{xFE,xFF,xFF,xFF,x0F});
  assertVarlongSerde(Integer.MIN_VALUE,new byte[]{xFF,xFF,xFF,xFF,x0F});
  assertVarlongSerde(17179869183L,new byte[]{xFE,xFF,xFF,xFF,x7F});
  assertVarlongSerde(-17179869184L,new byte[]{xFF,xFF,xFF,xFF,x7F});
  assertVarlongSerde(17179869184L,new byte[]{x80,x80,x80,x80,x80,x01});
  assertVarlongSerde(-17179869185L,new byte[]{x81,x80,x80,x80,x80,x01});
  assertVarlongSerde(2199023255551L,new byte[]{xFE,xFF,xFF,xFF,xFF,x7F});
  assertVarlongSerde(-2199023255552L,new byte[]{xFF,xFF,xFF,xFF,xFF,x7F});
  assertVarlongSerde(2199023255552L,new byte[]{x80,x80,x80,x80,x80,x80,x01});
  assertVarlongSerde(-2199023255553L,new byte[]{x81,x80,x80,x80,x80,x80,x01});
  assertVarlongSerde(281474976710655L,new byte[]{xFE,xFF,xFF,xFF,xFF,xFF,x7F});
  assertVarlongSerde(-281474976710656L,new byte[]{xFF,xFF,xFF,xFF,xFF,xFF,x7F});
  assertVarlongSerde(281474976710656L,new byte[]{x80,x80,x80,x80,x80,x80,x80,x01});
  assertVarlongSerde(-281474976710657L,new byte[]{x81,x80,x80,x80,x80,x80,x80,1});
  assertVarlongSerde(36028797018963967L,new byte[]{xFE,xFF,xFF,xFF,xFF,xFF,xFF,x7F});
  assertVarlongSerde(-36028797018963968L,new byte[]{xFF,xFF,xFF,xFF,xFF,xFF,xFF,x7F});
  assertVarlongSerde(36028797018963968L,new byte[]{x80,x80,x80,x80,x80,x80,x80,x80,x01});
  assertVarlongSerde(-36028797018963969L,new byte[]{x81,x80,x80,x80,x80,x80,x80,x80,x01});
  assertVarlongSerde(4611686018427387903L,new byte[]{xFE,xFF,xFF,xFF,xFF,xFF,xFF,xFF,x7F});
  assertVarlongSerde(-4611686018427387904L,new byte[]{xFF,xFF,xFF,xFF,xFF,xFF,xFF,xFF,x7F});
  assertVarlongSerde(4611686018427387904L,new byte[]{x80,x80,x80,x80,x80,x80,x80,x80,x80,x01});
  assertVarlongSerde(-4611686018427387905L,new byte[]{x81,x80,x80,x80,x80,x80,x80,x80,x80,x01});
  assertVarlongSerde(Long.MAX_VALUE,new byte[]{xFE,xFF,xFF,xFF,xFF,xFF,xFF,xFF,xFF,x01});
  assertVarlongSerde(Long.MIN_VALUE,new byte[]{xFF,xFF,xFF,xFF,xFF,xFF,xFF,xFF,xFF,x01});
}
