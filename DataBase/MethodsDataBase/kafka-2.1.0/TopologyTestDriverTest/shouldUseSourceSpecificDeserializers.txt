@Test public void shouldUseSourceSpecificDeserializers(){
  final Topology topology=new Topology();
  final String sourceName1="source-1";
  final String sourceName2="source-2";
  final String processor="processor";
  topology.addSource(sourceName1,Serdes.Long().deserializer(),Serdes.String().deserializer(),SOURCE_TOPIC_1);
  topology.addSource(sourceName2,Serdes.Integer().deserializer(),Serdes.Double().deserializer(),SOURCE_TOPIC_2);
  topology.addProcessor(processor,new MockProcessorSupplier(),sourceName1,sourceName2);
  topology.addSink("sink",SINK_TOPIC_1,new Serializer<Object>(){
    @Override public byte[] serialize(    final String topic,    final Object data){
      if (data instanceof Long) {
        return Serdes.Long().serializer().serialize(topic,(Long)data);
      }
      return Serdes.Integer().serializer().serialize(topic,(Integer)data);
    }
    @Override public void close(){
    }
    @Override public void configure(    final Map configs,    final boolean isKey){
    }
  }
,new Serializer<Object>(){
    @Override public byte[] serialize(    final String topic,    final Object data){
      if (data instanceof String) {
        return Serdes.String().serializer().serialize(topic,(String)data);
      }
      return Serdes.Double().serializer().serialize(topic,(Double)data);
    }
    @Override public void close(){
    }
    @Override public void configure(    final Map configs,    final boolean isKey){
    }
  }
,processor);
  testDriver=new TopologyTestDriver(topology,config);
  final ConsumerRecordFactory<Long,String> source1Factory=new ConsumerRecordFactory<>(SOURCE_TOPIC_1,Serdes.Long().serializer(),Serdes.String().serializer());
  final ConsumerRecordFactory<Integer,Double> source2Factory=new ConsumerRecordFactory<>(SOURCE_TOPIC_2,Serdes.Integer().serializer(),Serdes.Double().serializer());
  final Long source1Key=42L;
  final String source1Value="anyString";
  final Integer source2Key=73;
  final Double source2Value=3.14;
  final ConsumerRecord<byte[],byte[]> consumerRecord1=source1Factory.create(source1Key,source1Value);
  final ConsumerRecord<byte[],byte[]> consumerRecord2=source2Factory.create(source2Key,source2Value);
  testDriver.pipeInput(consumerRecord1);
  OutputVerifier.compareKeyValue(testDriver.readOutput(SINK_TOPIC_1,Serdes.Long().deserializer(),Serdes.String().deserializer()),source1Key,source1Value);
  testDriver.pipeInput(consumerRecord2);
  OutputVerifier.compareKeyValue(testDriver.readOutput(SINK_TOPIC_1,Serdes.Integer().deserializer(),Serdes.Double().deserializer()),source2Key,source2Value);
}
