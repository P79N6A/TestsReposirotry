@Test public void shouldProcessFromSourcesThatMatchMultiplePattern(){
  final Pattern pattern2Source1=Pattern.compile("source-topic-\\d");
  final Pattern pattern2Source2=Pattern.compile("source-topic-[A-Z]");
  final String consumerTopic2="source-topic-Z";
  final ConsumerRecord<byte[],byte[]> consumerRecord2=consumerRecordFactory.create(consumerTopic2,key2,value2,timestamp2);
  testDriver=new TopologyTestDriver(setupMultipleSourcesPatternTopology(pattern2Source1,pattern2Source2),config);
  final List<Record> processedRecords1=mockProcessors.get(0).processedRecords;
  final List<Record> processedRecords2=mockProcessors.get(1).processedRecords;
  testDriver.pipeInput(consumerRecord1);
  assertEquals(1,processedRecords1.size());
  assertEquals(0,processedRecords2.size());
  final Record record1=processedRecords1.get(0);
  final Record expectedResult1=new Record(consumerRecord1,0L);
  assertThat(record1,equalTo(expectedResult1));
  testDriver.pipeInput(consumerRecord2);
  assertEquals(1,processedRecords1.size());
  assertEquals(1,processedRecords2.size());
  final Record record2=processedRecords2.get(0);
  final Record expectedResult2=new Record(consumerRecord2,0L);
  assertThat(record2,equalTo(expectedResult2));
}
