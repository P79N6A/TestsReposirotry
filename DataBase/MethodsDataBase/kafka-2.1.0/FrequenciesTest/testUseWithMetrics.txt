@Test @SuppressWarnings("deprecation") public void testUseWithMetrics(){
  MetricName name1=name("1");
  MetricName name2=name("2");
  MetricName name3=name("3");
  MetricName name4=name("4");
  Frequencies frequencies=new Frequencies(4,1.0,4.0,new Frequency(name1,1.0),new Frequency(name2,2.0),new Frequency(name3,3.0),new Frequency(name4,4.0));
  Sensor sensor=metrics.sensor("test",config);
  sensor.add(frequencies);
  Metric metric1=this.metrics.metrics().get(name1);
  Metric metric2=this.metrics.metrics().get(name2);
  Metric metric3=this.metrics.metrics().get(name3);
  Metric metric4=this.metrics.metrics().get(name4);
  for (int i=0; i != 100; ++i) {
    frequencies.record(config,i % 4 + 1,time.milliseconds());
  }
  assertEquals(0.25,(Double)metric1.metricValue(),DELTA);
  assertEquals(0.25,(Double)metric2.metricValue(),DELTA);
  assertEquals(0.25,(Double)metric3.metricValue(),DELTA);
  assertEquals(0.25,(Double)metric4.metricValue(),DELTA);
  for (int i=0; i != 100; ++i) {
    frequencies.record(config,i % 2 + 1,time.milliseconds());
  }
  assertEquals(0.50,(Double)metric1.metricValue(),DELTA);
  assertEquals(0.50,(Double)metric2.metricValue(),DELTA);
  assertEquals(0.00,(Double)metric3.metricValue(),DELTA);
  assertEquals(0.00,(Double)metric4.metricValue(),DELTA);
  for (int i=0; i != 50; ++i) {
    frequencies.record(config,4.0,time.milliseconds());
  }
  assertEquals(0.25,(Double)metric1.metricValue(),DELTA);
  assertEquals(0.25,(Double)metric2.metricValue(),DELTA);
  assertEquals(0.00,(Double)metric3.metricValue(),DELTA);
  assertEquals(0.50,(Double)metric4.metricValue(),DELTA);
}
