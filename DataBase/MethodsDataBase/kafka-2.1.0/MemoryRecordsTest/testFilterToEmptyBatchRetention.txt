@Test public void testFilterToEmptyBatchRetention(){
  if (magic >= RecordBatch.MAGIC_VALUE_V2) {
    for (    boolean isTransactional : Arrays.asList(true,false)) {
      ByteBuffer buffer=ByteBuffer.allocate(2048);
      long producerId=23L;
      short producerEpoch=5;
      long baseOffset=3L;
      int baseSequence=10;
      int partitionLeaderEpoch=293;
      int numRecords=2;
      MemoryRecordsBuilder builder=MemoryRecords.builder(buffer,magic,compression,TimestampType.CREATE_TIME,baseOffset,RecordBatch.NO_TIMESTAMP,producerId,producerEpoch,baseSequence,isTransactional,partitionLeaderEpoch);
      builder.append(11L,"2".getBytes(),"b".getBytes());
      builder.append(12L,"3".getBytes(),"c".getBytes());
      builder.close();
      MemoryRecords records=builder.build();
      ByteBuffer filtered=ByteBuffer.allocate(2048);
      MemoryRecords.FilterResult filterResult=records.filterTo(new TopicPartition("foo",0),new MemoryRecords.RecordFilter(){
        @Override protected BatchRetention checkBatchRetention(        RecordBatch batch){
          return BatchRetention.RETAIN_EMPTY;
        }
        @Override protected boolean shouldRetainRecord(        RecordBatch recordBatch,        Record record){
          return false;
        }
      }
,filtered,Integer.MAX_VALUE,BufferSupplier.NO_CACHING);
      assertEquals(numRecords,filterResult.messagesRead());
      assertEquals(records.sizeInBytes(),filterResult.bytesRead());
      assertEquals(baseOffset + 1,filterResult.maxOffset());
      assertEquals(0,filterResult.messagesRetained());
      assertEquals(DefaultRecordBatch.RECORD_BATCH_OVERHEAD,filterResult.bytesRetained());
      assertEquals(12,filterResult.maxTimestamp());
      assertEquals(baseOffset + 1,filterResult.shallowOffsetOfMaxTimestamp());
      filtered.flip();
      MemoryRecords filteredRecords=MemoryRecords.readableRecords(filtered);
      List<MutableRecordBatch> batches=TestUtils.toList(filteredRecords.batches());
      assertEquals(1,batches.size());
      MutableRecordBatch batch=batches.get(0);
      assertEquals(0,batch.countOrNull().intValue());
      assertEquals(12L,batch.maxTimestamp());
      assertEquals(TimestampType.CREATE_TIME,batch.timestampType());
      assertEquals(baseOffset,batch.baseOffset());
      assertEquals(baseOffset + 1,batch.lastOffset());
      assertEquals(baseSequence,batch.baseSequence());
      assertEquals(baseSequence + 1,batch.lastSequence());
      assertEquals(isTransactional,batch.isTransactional());
    }
  }
}
