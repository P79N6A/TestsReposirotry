@Test public void testFilterToPreservesProducerInfo(){
  if (magic >= RecordBatch.MAGIC_VALUE_V2) {
    ByteBuffer buffer=ByteBuffer.allocate(2048);
    MemoryRecordsBuilder builder=MemoryRecords.builder(buffer,magic,compression,TimestampType.CREATE_TIME,0L);
    builder.append(10L,null,"a".getBytes());
    builder.append(11L,"1".getBytes(),"b".getBytes());
    builder.append(12L,null,"c".getBytes());
    builder.close();
    long pid1=23L;
    short epoch1=5;
    int baseSequence1=10;
    builder=MemoryRecords.builder(buffer,magic,compression,TimestampType.CREATE_TIME,3L,RecordBatch.NO_TIMESTAMP,pid1,epoch1,baseSequence1);
    builder.append(13L,null,"d".getBytes());
    builder.append(14L,"4".getBytes(),"e".getBytes());
    builder.append(15L,"5".getBytes(),"f".getBytes());
    builder.close();
    long pid2=99384L;
    short epoch2=234;
    int baseSequence2=15;
    builder=MemoryRecords.builder(buffer,magic,compression,TimestampType.CREATE_TIME,3L,RecordBatch.NO_TIMESTAMP,pid2,epoch2,baseSequence2,true,RecordBatch.NO_PARTITION_LEADER_EPOCH);
    builder.append(16L,"6".getBytes(),"g".getBytes());
    builder.append(17L,"7".getBytes(),"h".getBytes());
    builder.append(18L,null,"i".getBytes());
    builder.close();
    buffer.flip();
    ByteBuffer filtered=ByteBuffer.allocate(2048);
    MemoryRecords.readableRecords(buffer).filterTo(new TopicPartition("foo",0),new RetainNonNullKeysFilter(),filtered,Integer.MAX_VALUE,BufferSupplier.NO_CACHING);
    filtered.flip();
    MemoryRecords filteredRecords=MemoryRecords.readableRecords(filtered);
    List<MutableRecordBatch> batches=TestUtils.toList(filteredRecords.batches());
    assertEquals(3,batches.size());
    MutableRecordBatch firstBatch=batches.get(0);
    assertEquals(1,firstBatch.countOrNull().intValue());
    assertEquals(0L,firstBatch.baseOffset());
    assertEquals(2L,firstBatch.lastOffset());
    assertEquals(RecordBatch.NO_PRODUCER_ID,firstBatch.producerId());
    assertEquals(RecordBatch.NO_PRODUCER_EPOCH,firstBatch.producerEpoch());
    assertEquals(RecordBatch.NO_SEQUENCE,firstBatch.baseSequence());
    assertEquals(RecordBatch.NO_SEQUENCE,firstBatch.lastSequence());
    assertFalse(firstBatch.isTransactional());
    List<Record> firstBatchRecords=TestUtils.toList(firstBatch);
    assertEquals(1,firstBatchRecords.size());
    assertEquals(RecordBatch.NO_SEQUENCE,firstBatchRecords.get(0).sequence());
    assertEquals(new SimpleRecord(11L,"1".getBytes(),"b".getBytes()),new SimpleRecord(firstBatchRecords.get(0)));
    MutableRecordBatch secondBatch=batches.get(1);
    assertEquals(2,secondBatch.countOrNull().intValue());
    assertEquals(3L,secondBatch.baseOffset());
    assertEquals(5L,secondBatch.lastOffset());
    assertEquals(pid1,secondBatch.producerId());
    assertEquals(epoch1,secondBatch.producerEpoch());
    assertEquals(baseSequence1,secondBatch.baseSequence());
    assertEquals(baseSequence1 + 2,secondBatch.lastSequence());
    assertFalse(secondBatch.isTransactional());
    List<Record> secondBatchRecords=TestUtils.toList(secondBatch);
    assertEquals(2,secondBatchRecords.size());
    assertEquals(baseSequence1 + 1,secondBatchRecords.get(0).sequence());
    assertEquals(new SimpleRecord(14L,"4".getBytes(),"e".getBytes()),new SimpleRecord(secondBatchRecords.get(0)));
    assertEquals(baseSequence1 + 2,secondBatchRecords.get(1).sequence());
    assertEquals(new SimpleRecord(15L,"5".getBytes(),"f".getBytes()),new SimpleRecord(secondBatchRecords.get(1)));
    MutableRecordBatch thirdBatch=batches.get(2);
    assertEquals(2,thirdBatch.countOrNull().intValue());
    assertEquals(3L,thirdBatch.baseOffset());
    assertEquals(5L,thirdBatch.lastOffset());
    assertEquals(pid2,thirdBatch.producerId());
    assertEquals(epoch2,thirdBatch.producerEpoch());
    assertEquals(baseSequence2,thirdBatch.baseSequence());
    assertEquals(baseSequence2 + 2,thirdBatch.lastSequence());
    assertTrue(thirdBatch.isTransactional());
    List<Record> thirdBatchRecords=TestUtils.toList(thirdBatch);
    assertEquals(2,thirdBatchRecords.size());
    assertEquals(baseSequence2,thirdBatchRecords.get(0).sequence());
    assertEquals(new SimpleRecord(16L,"6".getBytes(),"g".getBytes()),new SimpleRecord(thirdBatchRecords.get(0)));
    assertEquals(baseSequence2 + 1,thirdBatchRecords.get(1).sequence());
    assertEquals(new SimpleRecord(17L,"7".getBytes(),"h".getBytes()),new SimpleRecord(thirdBatchRecords.get(1)));
  }
}
