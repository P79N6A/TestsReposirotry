@Test public void testFilterToPreservesLogAppendTime(){
  expectExceptionWithZStd(compression,magic);
  long logAppendTime=System.currentTimeMillis();
  ByteBuffer buffer=ByteBuffer.allocate(2048);
  MemoryRecordsBuilder builder=MemoryRecords.builder(buffer,magic,compression,TimestampType.LOG_APPEND_TIME,0L,logAppendTime,pid,epoch,firstSequence);
  builder.append(10L,null,"a".getBytes());
  builder.close();
  builder=MemoryRecords.builder(buffer,magic,compression,TimestampType.LOG_APPEND_TIME,1L,logAppendTime,pid,epoch,firstSequence);
  builder.append(11L,"1".getBytes(),"b".getBytes());
  builder.append(12L,null,"c".getBytes());
  builder.close();
  builder=MemoryRecords.builder(buffer,magic,compression,TimestampType.LOG_APPEND_TIME,3L,logAppendTime,pid,epoch,firstSequence);
  builder.append(13L,null,"d".getBytes());
  builder.append(14L,"4".getBytes(),"e".getBytes());
  builder.append(15L,"5".getBytes(),"f".getBytes());
  builder.close();
  buffer.flip();
  ByteBuffer filtered=ByteBuffer.allocate(2048);
  MemoryRecords.readableRecords(buffer).filterTo(new TopicPartition("foo",0),new RetainNonNullKeysFilter(),filtered,Integer.MAX_VALUE,BufferSupplier.NO_CACHING);
  filtered.flip();
  MemoryRecords filteredRecords=MemoryRecords.readableRecords(filtered);
  List<MutableRecordBatch> batches=TestUtils.toList(filteredRecords.batches());
  assertEquals(magic < RecordBatch.MAGIC_VALUE_V2 && compression == CompressionType.NONE ? 3 : 2,batches.size());
  for (  RecordBatch batch : batches) {
    assertEquals(compression,batch.compressionType());
    if (magic > RecordBatch.MAGIC_VALUE_V0) {
      assertEquals(TimestampType.LOG_APPEND_TIME,batch.timestampType());
      assertEquals(logAppendTime,batch.maxTimestamp());
    }
  }
}
