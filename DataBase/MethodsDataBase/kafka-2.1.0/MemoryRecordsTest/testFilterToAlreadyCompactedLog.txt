@Test public void testFilterToAlreadyCompactedLog(){
  expectExceptionWithZStd(compression,magic);
  ByteBuffer buffer=ByteBuffer.allocate(2048);
  MemoryRecordsBuilder builder=MemoryRecords.builder(buffer,magic,compression,TimestampType.CREATE_TIME,0L);
  builder.appendWithOffset(5L,10L,null,"a".getBytes());
  builder.appendWithOffset(8L,11L,"1".getBytes(),"b".getBytes());
  builder.appendWithOffset(10L,12L,null,"c".getBytes());
  builder.close();
  buffer.flip();
  ByteBuffer filtered=ByteBuffer.allocate(2048);
  MemoryRecords.readableRecords(buffer).filterTo(new TopicPartition("foo",0),new RetainNonNullKeysFilter(),filtered,Integer.MAX_VALUE,BufferSupplier.NO_CACHING);
  filtered.flip();
  MemoryRecords filteredRecords=MemoryRecords.readableRecords(filtered);
  List<MutableRecordBatch> batches=TestUtils.toList(filteredRecords.batches());
  assertEquals(1,batches.size());
  MutableRecordBatch batch=batches.get(0);
  List<Record> records=TestUtils.toList(batch);
  assertEquals(1,records.size());
  assertEquals(8L,records.get(0).offset());
  if (magic >= RecordBatch.MAGIC_VALUE_V1)   assertEquals(new SimpleRecord(11L,"1".getBytes(),"b".getBytes()),new SimpleRecord(records.get(0)));
 else   assertEquals(new SimpleRecord(RecordBatch.NO_TIMESTAMP,"1".getBytes(),"b".getBytes()),new SimpleRecord(records.get(0)));
  if (magic >= RecordBatch.MAGIC_VALUE_V2) {
    assertEquals(0L,batch.baseOffset());
    assertEquals(10L,batch.lastOffset());
  }
 else {
    assertEquals(8L,batch.baseOffset());
    assertEquals(8L,batch.lastOffset());
  }
}
