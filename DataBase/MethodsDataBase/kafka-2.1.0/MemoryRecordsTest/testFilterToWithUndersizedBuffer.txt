@Test public void testFilterToWithUndersizedBuffer(){
  expectExceptionWithZStd(compression,magic);
  ByteBuffer buffer=ByteBuffer.allocate(1024);
  MemoryRecordsBuilder builder=MemoryRecords.builder(buffer,magic,compression,TimestampType.CREATE_TIME,0L);
  builder.append(10L,null,"a".getBytes());
  builder.close();
  builder=MemoryRecords.builder(buffer,magic,compression,TimestampType.CREATE_TIME,1L);
  builder.append(11L,"1".getBytes(),new byte[128]);
  builder.append(12L,"2".getBytes(),"c".getBytes());
  builder.append(13L,null,"d".getBytes());
  builder.close();
  builder=MemoryRecords.builder(buffer,magic,compression,TimestampType.CREATE_TIME,4L);
  builder.append(14L,null,"e".getBytes());
  builder.append(15L,"5".getBytes(),"f".getBytes());
  builder.append(16L,"6".getBytes(),"g".getBytes());
  builder.close();
  builder=MemoryRecords.builder(buffer,magic,compression,TimestampType.CREATE_TIME,7L);
  builder.append(17L,"7".getBytes(),new byte[128]);
  builder.close();
  buffer.flip();
  ByteBuffer output=ByteBuffer.allocate(64);
  List<Record> records=new ArrayList<>();
  while (buffer.hasRemaining()) {
    output.rewind();
    MemoryRecords.FilterResult result=MemoryRecords.readableRecords(buffer).filterTo(new TopicPartition("foo",0),new RetainNonNullKeysFilter(),output,Integer.MAX_VALUE,BufferSupplier.NO_CACHING);
    buffer.position(buffer.position() + result.bytesRead());
    result.outputBuffer().flip();
    if (output != result.outputBuffer())     assertEquals(0,output.position());
    MemoryRecords filtered=MemoryRecords.readableRecords(result.outputBuffer());
    records.addAll(TestUtils.toList(filtered.records()));
  }
  assertEquals(5,records.size());
  for (  Record record : records)   assertNotNull(record.key());
}
