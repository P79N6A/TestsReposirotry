@Test public void testIncrementalPartitionRemoval(){
  FetchSessionHandler handler=new FetchSessionHandler(LOG_CONTEXT,1);
  FetchSessionHandler.Builder builder=handler.newBuilder();
  builder.add(new TopicPartition("foo",0),new FetchRequest.PartitionData(0,100,200,Optional.empty()));
  builder.add(new TopicPartition("foo",1),new FetchRequest.PartitionData(10,110,210,Optional.empty()));
  builder.add(new TopicPartition("bar",0),new FetchRequest.PartitionData(20,120,220,Optional.empty()));
  FetchSessionHandler.FetchRequestData data=builder.build();
  assertMapsEqual(reqMap(new ReqEntry("foo",0,0,100,200),new ReqEntry("foo",1,10,110,210),new ReqEntry("bar",0,20,120,220)),data.toSend(),data.sessionPartitions());
  assertTrue(data.metadata().isFull());
  FetchResponse<MemoryRecords> resp=new FetchResponse<>(Errors.NONE,respMap(new RespEntry("foo",0,10,20),new RespEntry("foo",1,10,20),new RespEntry("bar",0,10,20)),0,123);
  handler.handleResponse(resp);
  FetchSessionHandler.Builder builder2=handler.newBuilder();
  builder2.add(new TopicPartition("foo",1),new FetchRequest.PartitionData(10,110,210,Optional.empty()));
  FetchSessionHandler.FetchRequestData data2=builder2.build();
  assertFalse(data2.metadata().isFull());
  assertEquals(123,data2.metadata().sessionId());
  assertEquals(1,data2.metadata().epoch());
  assertMapEquals(reqMap(new ReqEntry("foo",1,10,110,210)),data2.sessionPartitions());
  assertMapEquals(reqMap(),data2.toSend());
  ArrayList<TopicPartition> expectedToForget2=new ArrayList<>();
  expectedToForget2.add(new TopicPartition("foo",0));
  expectedToForget2.add(new TopicPartition("bar",0));
  assertListEquals(expectedToForget2,data2.toForget());
  FetchResponse<MemoryRecords> resp2=new FetchResponse<>(Errors.FETCH_SESSION_ID_NOT_FOUND,respMap(),0,INVALID_SESSION_ID);
  handler.handleResponse(resp2);
  FetchSessionHandler.Builder builder3=handler.newBuilder();
  builder3.add(new TopicPartition("foo",0),new FetchRequest.PartitionData(0,100,200,Optional.empty()));
  FetchSessionHandler.FetchRequestData data3=builder3.build();
  assertTrue(data3.metadata().isFull());
  assertEquals(INVALID_SESSION_ID,data3.metadata().sessionId());
  assertEquals(INITIAL_EPOCH,data3.metadata().epoch());
  assertMapsEqual(reqMap(new ReqEntry("foo",0,0,100,200)),data3.sessionPartitions(),data3.toSend());
}
