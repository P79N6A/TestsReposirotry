/** 
 * This test was written to reproduce https://issues.apache.org/jira/browse/KAFKA-4492 It is based on a fairly complicated join used by the developer that reported the bug. Before the fix this would trigger an IllegalStateException.
 */
@Test public void shouldNotThrowIllegalStateExceptionWhenMultiCacheEvictions(){
  final String agg="agg";
  final String tableOne="tableOne";
  final String tableTwo="tableTwo";
  final String tableThree="tableThree";
  final String tableFour="tableFour";
  final String tableFive="tableFive";
  final String tableSix="tableSix";
  final String[] inputs={agg,tableOne,tableTwo,tableThree,tableFour,tableFive,tableSix};
  final StreamsBuilder builder=new StreamsBuilder();
  final Consumed<Long,String> consumed=Consumed.with(Serdes.Long(),Serdes.String());
  final KTable<Long,String> aggTable=builder.table(agg,consumed).groupBy(new KeyValueMapper<Long,String,KeyValue<Long,String>>(){
    @Override public KeyValue<Long,String> apply(    final Long key,    final String value){
      return new KeyValue<>(key,value);
    }
  }
,Serialized.with(Serdes.Long(),Serdes.String())).reduce(MockReducer.STRING_ADDER,MockReducer.STRING_ADDER,Materialized.<Long,String,KeyValueStore<Bytes,byte[]>>as("agg-store"));
  final KTable<Long,String> one=builder.table(tableOne,consumed);
  final KTable<Long,String> two=builder.table(tableTwo,consumed);
  final KTable<Long,String> three=builder.table(tableThree,consumed);
  final KTable<Long,String> four=builder.table(tableFour,consumed);
  final KTable<Long,String> five=builder.table(tableFive,consumed);
  final KTable<Long,String> six=builder.table(tableSix,consumed);
  final ValueMapper<String,String> mapper=new ValueMapper<String,String>(){
    @Override public String apply(    final String value){
      return value.toUpperCase(Locale.ROOT);
    }
  }
;
  final KTable<Long,String> seven=one.mapValues(mapper);
  final KTable<Long,String> eight=six.leftJoin(seven,MockValueJoiner.TOSTRING_JOINER);
  aggTable.leftJoin(one,MockValueJoiner.TOSTRING_JOINER).leftJoin(two,MockValueJoiner.TOSTRING_JOINER).leftJoin(three,MockValueJoiner.TOSTRING_JOINER).leftJoin(four,MockValueJoiner.TOSTRING_JOINER).leftJoin(five,MockValueJoiner.TOSTRING_JOINER).leftJoin(eight,MockValueJoiner.TOSTRING_JOINER).mapValues(mapper);
  driver.setUp(builder,stateDir,250);
  final String[] values={"a","AA","BBB","CCCC","DD","EEEEEEEE","F","GGGGGGGGGGGGGGG","HHH","IIIIIIIIII","J","KK","LLLL","MMMMMMMMMMMMMMMMMMMMMM","NNNNN","O","P","QQQQQ","R","SSSS","T","UU","VVVVVVVVVVVVVVVVVVV"};
  final Random random=new Random();
  for (int i=0; i < 1000; i++) {
    for (    final String input : inputs) {
      final Long key=(long)random.nextInt(1000);
      final String value=values[random.nextInt(values.length)];
      driver.process(input,key,value);
    }
  }
}
