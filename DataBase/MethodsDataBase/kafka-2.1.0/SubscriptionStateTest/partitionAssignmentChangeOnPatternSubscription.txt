@Test public void partitionAssignmentChangeOnPatternSubscription(){
  state.subscribe(Pattern.compile(".*"),rebalanceListener);
  assertTrue(state.assignedPartitions().isEmpty());
  assertEquals(0,state.numAssignedPartitions());
  state.subscribeFromPattern(new HashSet<>(Collections.singletonList(topic)));
  assertTrue(state.assignedPartitions().isEmpty());
  assertEquals(0,state.numAssignedPartitions());
  state.assignFromSubscribed(singleton(tp1));
  assertEquals(singleton(tp1),state.assignedPartitions());
  assertEquals(1,state.numAssignedPartitions());
  assertEquals(singleton(topic),state.subscription());
  state.assignFromSubscribed(Collections.singletonList(t1p0));
  assertEquals(singleton(t1p0),state.assignedPartitions());
  assertEquals(1,state.numAssignedPartitions());
  assertEquals(singleton(topic),state.subscription());
  state.subscribe(Pattern.compile(".*t"),rebalanceListener);
  assertEquals(singleton(t1p0),state.assignedPartitions());
  assertEquals(1,state.numAssignedPartitions());
  state.subscribeFromPattern(singleton(topic));
  assertEquals(singleton(t1p0),state.assignedPartitions());
  assertEquals(1,state.numAssignedPartitions());
  state.assignFromSubscribed(Collections.singletonList(tp0));
  assertEquals(singleton(tp0),state.assignedPartitions());
  assertEquals(1,state.numAssignedPartitions());
  assertEquals(singleton(topic),state.subscription());
  state.unsubscribe();
  assertTrue(state.assignedPartitions().isEmpty());
  assertEquals(0,state.numAssignedPartitions());
}
