@Test public void testDisconnectWithMultipleInFlights(){
  NetworkClient client=this.clientWithNoVersionDiscovery;
  awaitReady(client,node);
  assertTrue("Expected NetworkClient to be ready to send to node " + node.idString(),client.isReady(node,time.milliseconds()));
  MetadataRequest.Builder builder=new MetadataRequest.Builder(Collections.<String>emptyList(),true);
  long now=time.milliseconds();
  final List<ClientResponse> callbackResponses=new ArrayList<>();
  RequestCompletionHandler callback=new RequestCompletionHandler(){
    @Override public void onComplete(    ClientResponse response){
      callbackResponses.add(response);
    }
  }
;
  ClientRequest request1=client.newClientRequest(node.idString(),builder,now,true,defaultRequestTimeoutMs,callback);
  client.send(request1,now);
  client.poll(0,now);
  ClientRequest request2=client.newClientRequest(node.idString(),builder,now,true,defaultRequestTimeoutMs,callback);
  client.send(request2,now);
  client.poll(0,now);
  assertNotEquals(request1.correlationId(),request2.correlationId());
  assertEquals(2,client.inFlightRequestCount());
  assertEquals(2,client.inFlightRequestCount(node.idString()));
  client.disconnect(node.idString());
  List<ClientResponse> responses=client.poll(0,time.milliseconds());
  assertEquals(2,responses.size());
  assertEquals(responses,callbackResponses);
  assertEquals(0,client.inFlightRequestCount());
  assertEquals(0,client.inFlightRequestCount(node.idString()));
  ClientResponse response1=responses.get(0);
  assertTrue(response1.wasDisconnected());
  assertEquals(request1.correlationId(),response1.requestHeader().correlationId());
  ClientResponse response2=responses.get(1);
  assertTrue(response2.wasDisconnected());
  assertEquals(request2.correlationId(),response2.requestHeader().correlationId());
}
