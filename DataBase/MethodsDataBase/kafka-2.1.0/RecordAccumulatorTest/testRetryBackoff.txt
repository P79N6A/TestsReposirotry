@Test public void testRetryBackoff() throws Exception {
  long lingerMs=Integer.MAX_VALUE / 16;
  long retryBackoffMs=Integer.MAX_VALUE / 8;
  int requestTimeoutMs=Integer.MAX_VALUE / 4;
  long deliveryTimeoutMs=Integer.MAX_VALUE;
  long totalSize=10 * 1024;
  int batchSize=1024 + DefaultRecordBatch.RECORD_BATCH_OVERHEAD;
  String metricGrpName="producer-metrics";
  final RecordAccumulator accum=new RecordAccumulator(logContext,batchSize,CompressionType.NONE,lingerMs,retryBackoffMs,deliveryTimeoutMs,metrics,metricGrpName,time,new ApiVersions(),null,new BufferPool(totalSize,batchSize,metrics,time,metricGrpName));
  long now=time.milliseconds();
  accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,maxBlockTimeMs);
  RecordAccumulator.ReadyCheckResult result=accum.ready(cluster,now + lingerMs + 1);
  assertEquals("Node1 should be ready",Collections.singleton(node1),result.readyNodes);
  Map<Integer,List<ProducerBatch>> batches=accum.drain(cluster,result.readyNodes,Integer.MAX_VALUE,now + lingerMs + 1);
  assertEquals("Node1 should be the only ready node.",1,batches.size());
  assertEquals("Partition 0 should only have one batch drained.",1,batches.get(0).size());
  now=time.milliseconds();
  accum.reenqueue(batches.get(0).get(0),now);
  accum.append(tp2,0L,key,value,Record.EMPTY_HEADERS,null,maxBlockTimeMs);
  result=accum.ready(cluster,now + lingerMs + 1);
  assertEquals("Node1 should be ready",Collections.singleton(node1),result.readyNodes);
  batches=accum.drain(cluster,result.readyNodes,Integer.MAX_VALUE,now + lingerMs + 1);
  assertEquals("Node1 should be the only ready node.",1,batches.size());
  assertEquals("Node1 should only have one batch drained.",1,batches.get(0).size());
  assertEquals("Node1 should only have one batch for partition 1.",tp2,batches.get(0).get(0).topicPartition);
  result=accum.ready(cluster,now + retryBackoffMs + 1);
  assertEquals("Node1 should be ready",Collections.singleton(node1),result.readyNodes);
  batches=accum.drain(cluster,result.readyNodes,Integer.MAX_VALUE,now + retryBackoffMs + 1);
  assertEquals("Node1 should be the only ready node.",1,batches.size());
  assertEquals("Node1 should only have one batch drained.",1,batches.get(0).size());
  assertEquals("Node1 should only have one batch for partition 0.",tp1,batches.get(0).get(0).topicPartition);
}
