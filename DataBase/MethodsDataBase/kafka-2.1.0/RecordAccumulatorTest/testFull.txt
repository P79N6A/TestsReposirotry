@Test public void testFull() throws Exception {
  long now=time.milliseconds();
  int batchSize=1025;
  RecordAccumulator accum=createTestRecordAccumulator(batchSize + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10L * batchSize,CompressionType.NONE,10L);
  int appends=expectedNumAppends(batchSize);
  for (int i=0; i < appends; i++) {
    accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,maxBlockTimeMs);
    Deque<ProducerBatch> partitionBatches=accum.batches().get(tp1);
    assertEquals(1,partitionBatches.size());
    ProducerBatch batch=partitionBatches.peekFirst();
    assertTrue(batch.isWritable());
    assertEquals("No partitions should be ready.",0,accum.ready(cluster,now).readyNodes.size());
  }
  accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,maxBlockTimeMs);
  Deque<ProducerBatch> partitionBatches=accum.batches().get(tp1);
  assertEquals(2,partitionBatches.size());
  Iterator<ProducerBatch> partitionBatchesIterator=partitionBatches.iterator();
  assertTrue(partitionBatchesIterator.next().isWritable());
  assertEquals("Our partition's leader should be ready",Collections.singleton(node1),accum.ready(cluster,time.milliseconds()).readyNodes);
  List<ProducerBatch> batches=accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,0).get(node1.id());
  assertEquals(1,batches.size());
  ProducerBatch batch=batches.get(0);
  Iterator<Record> iter=batch.records().records().iterator();
  for (int i=0; i < appends; i++) {
    Record record=iter.next();
    assertEquals("Keys should match",ByteBuffer.wrap(key),record.key());
    assertEquals("Values should match",ByteBuffer.wrap(value),record.value());
  }
  assertFalse("No more records",iter.hasNext());
}
