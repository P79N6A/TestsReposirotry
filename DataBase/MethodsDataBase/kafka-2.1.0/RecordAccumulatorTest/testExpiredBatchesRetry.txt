@Test public void testExpiredBatchesRetry() throws InterruptedException {
  int lingerMs=3000;
  int rtt=1000;
  int deliveryTimeoutMs=3200;
  Set<Node> readyNodes;
  List<ProducerBatch> expiredBatches;
  List<Boolean> muteStates=Arrays.asList(false,true);
  int batchSize=1025;
  RecordAccumulator accum=createTestRecordAccumulator(batchSize + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10 * batchSize,CompressionType.NONE,lingerMs);
  for (  Boolean mute : muteStates) {
    accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,0);
    time.sleep(lingerMs);
    readyNodes=accum.ready(cluster,time.milliseconds()).readyNodes;
    assertEquals("Our partition's leader should be ready",Collections.singleton(node1),readyNodes);
    Map<Integer,List<ProducerBatch>> drained=accum.drain(cluster,readyNodes,Integer.MAX_VALUE,time.milliseconds());
    assertEquals("There should be only one batch.",1,drained.get(node1.id()).size());
    time.sleep(rtt);
    accum.reenqueue(drained.get(node1.id()).get(0),time.milliseconds());
    if (mute)     accum.mutePartition(tp1);
 else     accum.unmutePartition(tp1,0L);
    time.sleep(deliveryTimeoutMs - rtt);
    accum.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,time.milliseconds());
    expiredBatches=accum.expiredBatches(time.milliseconds());
    assertEquals("RecordAccumulator has expired batches if the partition is not muted",mute ? 1 : 0,expiredBatches.size());
  }
}
