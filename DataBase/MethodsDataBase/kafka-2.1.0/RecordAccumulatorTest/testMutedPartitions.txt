@Test public void testMutedPartitions() throws InterruptedException {
  long now=time.milliseconds();
  int batchSize=1025;
  RecordAccumulator accum=createTestRecordAccumulator(batchSize + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10 * batchSize,CompressionType.NONE,10);
  int appends=expectedNumAppends(batchSize);
  for (int i=0; i < appends; i++) {
    accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,maxBlockTimeMs);
    assertEquals("No partitions should be ready.",0,accum.ready(cluster,now).readyNodes.size());
  }
  time.sleep(2000);
  accum.mutePartition(tp1);
  RecordAccumulator.ReadyCheckResult result=accum.ready(cluster,time.milliseconds());
  assertEquals("No node should be ready",0,result.readyNodes.size());
  accum.unmutePartition(tp1,0L);
  result=accum.ready(cluster,time.milliseconds());
  assertTrue("The batch should be ready",result.readyNodes.size() > 0);
  accum.mutePartition(tp1);
  Map<Integer,List<ProducerBatch>> drained=accum.drain(cluster,result.readyNodes,Integer.MAX_VALUE,time.milliseconds());
  assertEquals("No batch should have been drained",0,drained.get(node1.id()).size());
  accum.unmutePartition(tp1,0L);
  drained=accum.drain(cluster,result.readyNodes,Integer.MAX_VALUE,time.milliseconds());
  assertTrue("The batch should have been drained.",drained.get(node1.id()).size() > 0);
}
