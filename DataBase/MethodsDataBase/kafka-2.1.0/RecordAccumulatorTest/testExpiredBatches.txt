@Test public void testExpiredBatches() throws InterruptedException {
  long retryBackoffMs=100L;
  long lingerMs=30L;
  int requestTimeout=60;
  long deliveryTimeoutMs=3200L;
  int batchSize=1025;
  RecordAccumulator accum=createTestRecordAccumulator(deliveryTimeoutMs,batchSize + DefaultRecordBatch.RECORD_BATCH_OVERHEAD,10 * batchSize,CompressionType.NONE,lingerMs);
  int appends=expectedNumAppends(batchSize);
  for (int i=0; i < appends; i++) {
    accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,maxBlockTimeMs);
    assertEquals("No partitions should be ready.",0,accum.ready(cluster,time.milliseconds()).readyNodes.size());
  }
  accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,0);
  Set<Node> readyNodes=accum.ready(cluster,time.milliseconds()).readyNodes;
  assertEquals("Our partition's leader should be ready",Collections.singleton(node1),readyNodes);
  time.sleep(deliveryTimeoutMs + 1);
  accum.mutePartition(tp1);
  List<ProducerBatch> expiredBatches=accum.expiredBatches(time.milliseconds());
  assertEquals("The batches will be muted no matter if the partition is muted or not",2,expiredBatches.size());
  accum.unmutePartition(tp1,0L);
  expiredBatches=accum.expiredBatches(time.milliseconds());
  assertEquals("All batches should have been expired earlier",0,expiredBatches.size());
  assertEquals("No partitions should be ready.",0,accum.ready(cluster,time.milliseconds()).readyNodes.size());
  time.sleep(lingerMs);
  assertEquals("Our partition's leader should be ready",Collections.singleton(node1),readyNodes);
  time.sleep(requestTimeout + 1);
  accum.mutePartition(tp1);
  expiredBatches=accum.expiredBatches(time.milliseconds());
  assertEquals("The batch should not be expired when metadata is still available and partition is muted",0,expiredBatches.size());
  accum.unmutePartition(tp1,0L);
  expiredBatches=accum.expiredBatches(time.milliseconds());
  assertEquals("All batches should have been expired",0,expiredBatches.size());
  assertEquals("No partitions should be ready.",0,accum.ready(cluster,time.milliseconds()).readyNodes.size());
  accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,0);
  time.sleep(lingerMs);
  readyNodes=accum.ready(cluster,time.milliseconds()).readyNodes;
  assertEquals("Our partition's leader should be ready",Collections.singleton(node1),readyNodes);
  Map<Integer,List<ProducerBatch>> drained=accum.drain(cluster,readyNodes,Integer.MAX_VALUE,time.milliseconds());
  assertEquals("There should be only one batch.",drained.get(node1.id()).size(),1);
  time.sleep(1000L);
  accum.reenqueue(drained.get(node1.id()).get(0),time.milliseconds());
  time.sleep(requestTimeout + retryBackoffMs);
  expiredBatches=accum.expiredBatches(time.milliseconds());
  assertEquals("The batch should not be expired.",0,expiredBatches.size());
  time.sleep(1L);
  accum.mutePartition(tp1);
  expiredBatches=accum.expiredBatches(time.milliseconds());
  assertEquals("The batch should not be expired when the partition is muted",0,expiredBatches.size());
  accum.unmutePartition(tp1,0L);
  expiredBatches=accum.expiredBatches(time.milliseconds());
  assertEquals("All batches should have been expired.",0,expiredBatches.size());
  accum.append(tp1,0L,key,value,Record.EMPTY_HEADERS,null,0);
  time.sleep(lingerMs);
  readyNodes=accum.ready(cluster,time.milliseconds()).readyNodes;
  assertEquals("Our partition's leader should be ready",Collections.singleton(node1),readyNodes);
  time.sleep(requestTimeout + 1);
  accum.mutePartition(tp1);
  expiredBatches=accum.expiredBatches(time.milliseconds());
  assertEquals("The batch should not be expired when the partition is muted",0,expiredBatches.size());
  long throttleTimeMs=100L;
  accum.unmutePartition(tp1,time.milliseconds() + throttleTimeMs);
  expiredBatches=accum.expiredBatches(time.milliseconds());
  assertEquals("The batch should not be expired when the partition is muted",0,expiredBatches.size());
  time.sleep(throttleTimeMs);
  expiredBatches=accum.expiredBatches(time.milliseconds());
  assertEquals("All batches should have been expired earlier",0,expiredBatches.size());
  assertEquals("No partitions should be ready.",1,accum.ready(cluster,time.milliseconds()).readyNodes.size());
}
