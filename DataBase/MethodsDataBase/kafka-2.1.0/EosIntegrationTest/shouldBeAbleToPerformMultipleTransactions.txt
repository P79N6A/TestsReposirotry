@Test public void shouldBeAbleToPerformMultipleTransactions() throws Exception {
  final StreamsBuilder builder=new StreamsBuilder();
  builder.stream(SINGLE_PARTITION_INPUT_TOPIC).to(SINGLE_PARTITION_OUTPUT_TOPIC);
  final KafkaStreams streams=new KafkaStreams(builder.build(),StreamsTestUtils.getStreamsConfig(applicationId,CLUSTER.bootstrapServers(),Serdes.LongSerde.class.getName(),Serdes.LongSerde.class.getName(),new Properties(){
{
      put(StreamsConfig.PROCESSING_GUARANTEE_CONFIG,StreamsConfig.EXACTLY_ONCE);
      put(StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG,0);
      put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG,100);
      put(ConsumerConfig.METADATA_MAX_AGE_CONFIG,"1000");
      put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,"earliest");
    }
  }
));
  try {
    streams.start();
    final List<KeyValue<Long,Long>> firstBurstOfData=prepareData(0L,5L,0L);
    final List<KeyValue<Long,Long>> secondBurstOfData=prepareData(5L,8L,0L);
    IntegrationTestUtils.produceKeyValuesSynchronously(SINGLE_PARTITION_INPUT_TOPIC,firstBurstOfData,TestUtils.producerConfig(CLUSTER.bootstrapServers(),LongSerializer.class,LongSerializer.class),CLUSTER.time);
    final List<KeyValue<Long,Long>> firstCommittedRecords=IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(TestUtils.consumerConfig(CLUSTER.bootstrapServers(),CONSUMER_GROUP_ID,LongDeserializer.class,LongDeserializer.class,new Properties(){
{
        put(ConsumerConfig.ISOLATION_LEVEL_CONFIG,IsolationLevel.READ_COMMITTED.name().toLowerCase(Locale.ROOT));
      }
    }
),SINGLE_PARTITION_OUTPUT_TOPIC,firstBurstOfData.size());
    assertThat(firstCommittedRecords,equalTo(firstBurstOfData));
    IntegrationTestUtils.produceKeyValuesSynchronously(SINGLE_PARTITION_INPUT_TOPIC,secondBurstOfData,TestUtils.producerConfig(CLUSTER.bootstrapServers(),LongSerializer.class,LongSerializer.class),CLUSTER.time);
    final List<KeyValue<Long,Long>> secondCommittedRecords=IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(TestUtils.consumerConfig(CLUSTER.bootstrapServers(),CONSUMER_GROUP_ID,LongDeserializer.class,LongDeserializer.class,new Properties(){
{
        put(ConsumerConfig.ISOLATION_LEVEL_CONFIG,IsolationLevel.READ_COMMITTED.name().toLowerCase(Locale.ROOT));
      }
    }
),SINGLE_PARTITION_OUTPUT_TOPIC,secondBurstOfData.size());
    assertThat(secondCommittedRecords,equalTo(secondBurstOfData));
  }
  finally {
    streams.close();
  }
}
