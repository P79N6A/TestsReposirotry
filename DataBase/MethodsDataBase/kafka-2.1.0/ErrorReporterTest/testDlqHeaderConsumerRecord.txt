@Test public void testDlqHeaderConsumerRecord(){
  Map<String,String> props=new HashMap<>();
  props.put(SinkConnectorConfig.DLQ_TOPIC_NAME_CONFIG,DLQ_TOPIC);
  props.put(SinkConnectorConfig.DLQ_CONTEXT_HEADERS_ENABLE_CONFIG,"true");
  DeadLetterQueueReporter deadLetterQueueReporter=new DeadLetterQueueReporter(producer,config(props),TASK_ID,errorHandlingMetrics);
  ProcessingContext context=new ProcessingContext();
  context.consumerRecord(new ConsumerRecord<>("source-topic",7,10,"source-key".getBytes(),"source-value".getBytes()));
  context.currentContext(Stage.TRANSFORMATION,Transformation.class);
  context.error(new ConnectException("Test Exception"));
  ProducerRecord<byte[],byte[]> producerRecord=new ProducerRecord<>(DLQ_TOPIC,"source-key".getBytes(),"source-value".getBytes());
  deadLetterQueueReporter.populateContextHeaders(producerRecord,context);
  assertEquals("source-topic",headerValue(producerRecord,ERROR_HEADER_ORIG_TOPIC));
  assertEquals("7",headerValue(producerRecord,ERROR_HEADER_ORIG_PARTITION));
  assertEquals("10",headerValue(producerRecord,ERROR_HEADER_ORIG_OFFSET));
  assertEquals(TASK_ID.connector(),headerValue(producerRecord,ERROR_HEADER_CONNECTOR_NAME));
  assertEquals(String.valueOf(TASK_ID.task()),headerValue(producerRecord,ERROR_HEADER_TASK_ID));
  assertEquals(Stage.TRANSFORMATION.name(),headerValue(producerRecord,ERROR_HEADER_STAGE));
  assertEquals(Transformation.class.getName(),headerValue(producerRecord,ERROR_HEADER_EXECUTING_CLASS));
  assertEquals(ConnectException.class.getName(),headerValue(producerRecord,ERROR_HEADER_EXCEPTION));
  assertEquals("Test Exception",headerValue(producerRecord,ERROR_HEADER_EXCEPTION_MESSAGE));
  assertTrue(headerValue(producerRecord,ERROR_HEADER_EXCEPTION_STACK_TRACE).length() > 0);
  assertTrue(headerValue(producerRecord,ERROR_HEADER_EXCEPTION_STACK_TRACE).startsWith("org.apache.kafka.connect.errors.ConnectException: Test Exception"));
}
