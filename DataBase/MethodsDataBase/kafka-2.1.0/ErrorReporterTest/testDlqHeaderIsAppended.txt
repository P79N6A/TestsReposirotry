@Test public void testDlqHeaderIsAppended(){
  Map<String,String> props=new HashMap<>();
  props.put(SinkConnectorConfig.DLQ_TOPIC_NAME_CONFIG,DLQ_TOPIC);
  props.put(SinkConnectorConfig.DLQ_CONTEXT_HEADERS_ENABLE_CONFIG,"true");
  DeadLetterQueueReporter deadLetterQueueReporter=new DeadLetterQueueReporter(producer,config(props),TASK_ID,errorHandlingMetrics);
  ProcessingContext context=new ProcessingContext();
  context.consumerRecord(new ConsumerRecord<>("source-topic",7,10,"source-key".getBytes(),"source-value".getBytes()));
  context.currentContext(Stage.TRANSFORMATION,Transformation.class);
  context.error(new ConnectException("Test Exception"));
  ProducerRecord<byte[],byte[]> producerRecord=new ProducerRecord<>(DLQ_TOPIC,"source-key".getBytes(),"source-value".getBytes());
  producerRecord.headers().add(ERROR_HEADER_ORIG_TOPIC,"dummy".getBytes());
  deadLetterQueueReporter.populateContextHeaders(producerRecord,context);
  int appearances=0;
  for (  Header header : producerRecord.headers()) {
    if (ERROR_HEADER_ORIG_TOPIC.equalsIgnoreCase(header.key())) {
      appearances++;
    }
  }
  assertEquals("source-topic",headerValue(producerRecord,ERROR_HEADER_ORIG_TOPIC));
  assertEquals(2,appearances);
}
