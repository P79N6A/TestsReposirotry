@Test public void testPutConnectorConfig() throws Exception {
  EasyMock.expect(member.memberId()).andStubReturn("leader");
  expectRebalance(1,Arrays.asList(CONN1),Collections.<ConnectorTaskId>emptyList());
  expectPostRebalanceCatchup(SNAPSHOT);
  worker.startConnector(EasyMock.eq(CONN1),EasyMock.<Map<String,String>>anyObject(),EasyMock.<ConnectorContext>anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED));
  PowerMock.expectLastCall().andReturn(true);
  EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);
  EasyMock.expect(worker.connectorTaskConfigs(CONN1,conn1SinkConfig)).andReturn(TASK_CONFIGS);
  member.wakeup();
  PowerMock.expectLastCall().anyTimes();
  member.poll(EasyMock.anyInt());
  PowerMock.expectLastCall();
  member.ensureActive();
  PowerMock.expectLastCall();
  Connector connectorMock=PowerMock.createMock(SourceConnector.class);
  EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);
  final Capture<Map<String,String>> configCapture=EasyMock.newCapture();
  EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);
  EasyMock.expect(worker.getPlugins()).andReturn(plugins).anyTimes();
  EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);
  EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);
  EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());
  EasyMock.expect(connectorMock.validate(CONN1_CONFIG_UPDATED)).andReturn(new Config(Collections.<ConfigValue>emptyList()));
  EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);
  configBackingStore.putConnectorConfig(CONN1,CONN1_CONFIG_UPDATED);
  PowerMock.expectLastCall().andAnswer(new IAnswer<Object>(){
    @Override public Object answer() throws Throwable {
      configUpdateListener.onConnectorConfigUpdate(CONN1);
      return null;
    }
  }
);
  EasyMock.expect(configBackingStore.snapshot()).andReturn(SNAPSHOT_UPDATED_CONN1_CONFIG);
  worker.stopConnector(CONN1);
  PowerMock.expectLastCall().andReturn(true);
  worker.startConnector(EasyMock.eq(CONN1),EasyMock.<Map<String,String>>anyObject(),EasyMock.<ConnectorContext>anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED));
  PowerMock.expectLastCall().andReturn(true);
  EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);
  EasyMock.expect(worker.connectorTaskConfigs(CONN1,conn1SinkConfigUpdated)).andReturn(TASK_CONFIGS);
  member.poll(EasyMock.anyInt());
  PowerMock.expectLastCall();
  member.ensureActive();
  PowerMock.expectLastCall();
  member.poll(EasyMock.anyInt());
  PowerMock.expectLastCall();
  PowerMock.replayAll();
  FutureCallback<Map<String,String>> connectorConfigCb=new FutureCallback<>();
  herder.connectorConfig(CONN1,connectorConfigCb);
  herder.tick();
  assertTrue(connectorConfigCb.isDone());
  assertEquals(CONN1_CONFIG,connectorConfigCb.get());
  FutureCallback<Herder.Created<ConnectorInfo>> putConfigCb=new FutureCallback<>();
  herder.putConnectorConfig(CONN1,CONN1_CONFIG_UPDATED,true,putConfigCb);
  herder.tick();
  assertTrue(putConfigCb.isDone());
  ConnectorInfo updatedInfo=new ConnectorInfo(CONN1,CONN1_CONFIG_UPDATED,Arrays.asList(TASK0,TASK1,TASK2),ConnectorType.SOURCE);
  assertEquals(new Herder.Created<>(false,updatedInfo),putConfigCb.get());
  connectorConfigCb=new FutureCallback<>();
  herder.connectorConfig(CONN1,connectorConfigCb);
  herder.tick();
  assertTrue(connectorConfigCb.isDone());
  assertEquals(CONN1_CONFIG_UPDATED,connectorConfigCb.get());
  PowerMock.verifyAll();
}
