@Test public void testRestartConnector() throws Exception {
  EasyMock.expect(worker.connectorTaskConfigs(CONN1,conn1SinkConfig)).andStubReturn(TASK_CONFIGS);
  EasyMock.expect(member.memberId()).andStubReturn("leader");
  EasyMock.expect(worker.getPlugins()).andReturn(plugins);
  expectRebalance(1,singletonList(CONN1),Collections.<ConnectorTaskId>emptyList());
  expectPostRebalanceCatchup(SNAPSHOT);
  member.poll(EasyMock.anyInt());
  PowerMock.expectLastCall();
  worker.startConnector(EasyMock.eq(CONN1),EasyMock.<Map<String,String>>anyObject(),EasyMock.<ConnectorContext>anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED));
  PowerMock.expectLastCall().andReturn(true);
  EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);
  member.wakeup();
  PowerMock.expectLastCall();
  member.ensureActive();
  PowerMock.expectLastCall();
  member.poll(EasyMock.anyInt());
  PowerMock.expectLastCall();
  worker.stopConnector(CONN1);
  PowerMock.expectLastCall().andReturn(true);
  EasyMock.expect(worker.getPlugins()).andReturn(plugins);
  worker.startConnector(EasyMock.eq(CONN1),EasyMock.<Map<String,String>>anyObject(),EasyMock.<ConnectorContext>anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED));
  PowerMock.expectLastCall().andReturn(true);
  EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);
  PowerMock.replayAll();
  herder.tick();
  FutureCallback<Void> callback=new FutureCallback<>();
  herder.restartConnector(CONN1,callback);
  herder.tick();
  callback.get(1000L,TimeUnit.MILLISECONDS);
  PowerMock.verifyAll();
}
