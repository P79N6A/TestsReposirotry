@Test public void testAccessors() throws Exception {
  EasyMock.expect(member.memberId()).andStubReturn("leader");
  EasyMock.expect(worker.getPlugins()).andReturn(plugins).anyTimes();
  expectRebalance(1,Collections.<String>emptyList(),Collections.<ConnectorTaskId>emptyList());
  expectPostRebalanceCatchup(SNAPSHOT);
  member.wakeup();
  PowerMock.expectLastCall().anyTimes();
  member.poll(EasyMock.anyInt());
  PowerMock.expectLastCall();
  PowerMock.replayAll();
  FutureCallback<Collection<String>> listConnectorsCb=new FutureCallback<>();
  herder.connectors(listConnectorsCb);
  FutureCallback<ConnectorInfo> connectorInfoCb=new FutureCallback<>();
  herder.connectorInfo(CONN1,connectorInfoCb);
  FutureCallback<Map<String,String>> connectorConfigCb=new FutureCallback<>();
  herder.connectorConfig(CONN1,connectorConfigCb);
  FutureCallback<List<TaskInfo>> taskConfigsCb=new FutureCallback<>();
  herder.taskConfigs(CONN1,taskConfigsCb);
  herder.tick();
  assertTrue(listConnectorsCb.isDone());
  assertEquals(Collections.singleton(CONN1),listConnectorsCb.get());
  assertTrue(connectorInfoCb.isDone());
  ConnectorInfo info=new ConnectorInfo(CONN1,CONN1_CONFIG,Arrays.asList(TASK0,TASK1,TASK2),ConnectorType.SOURCE);
  assertEquals(info,connectorInfoCb.get());
  assertTrue(connectorConfigCb.isDone());
  assertEquals(CONN1_CONFIG,connectorConfigCb.get());
  assertTrue(taskConfigsCb.isDone());
  assertEquals(Arrays.asList(new TaskInfo(TASK0,TASK_CONFIG),new TaskInfo(TASK1,TASK_CONFIG),new TaskInfo(TASK2,TASK_CONFIG)),taskConfigsCb.get());
  PowerMock.verifyAll();
}
