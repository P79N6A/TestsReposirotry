@Test public void testConnectorPaused() throws Exception {
  EasyMock.expect(member.memberId()).andStubReturn("member");
  EasyMock.expect(worker.connectorNames()).andStubReturn(Collections.singleton(CONN1));
  expectRebalance(1,Arrays.asList(CONN1),Collections.<ConnectorTaskId>emptyList());
  expectPostRebalanceCatchup(SNAPSHOT);
  worker.startConnector(EasyMock.eq(CONN1),EasyMock.<Map<String,String>>anyObject(),EasyMock.<ConnectorContext>anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED));
  PowerMock.expectLastCall().andReturn(true);
  EasyMock.expect(worker.getPlugins()).andReturn(plugins);
  EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);
  EasyMock.expect(worker.connectorTaskConfigs(CONN1,conn1SinkConfig)).andReturn(TASK_CONFIGS);
  member.poll(EasyMock.anyInt());
  PowerMock.expectLastCall();
  member.wakeup();
  member.ensureActive();
  PowerMock.expectLastCall();
  EasyMock.expect(configBackingStore.snapshot()).andReturn(SNAPSHOT_PAUSED_CONN1);
  PowerMock.expectLastCall();
  worker.setTargetState(CONN1,TargetState.PAUSED);
  PowerMock.expectLastCall();
  member.poll(EasyMock.anyInt());
  PowerMock.expectLastCall();
  PowerMock.replayAll();
  herder.tick();
  configUpdateListener.onConnectorTargetStateChange(CONN1);
  herder.tick();
  PowerMock.verifyAll();
}
