@Test public void testRebalance() throws Exception {
  EasyMock.expect(member.memberId()).andStubReturn("member");
  EasyMock.expect(worker.getPlugins()).andReturn(plugins);
  expectRebalance(1,Arrays.asList(CONN1),Arrays.asList(TASK1));
  expectPostRebalanceCatchup(SNAPSHOT);
  worker.startConnector(EasyMock.eq(CONN1),EasyMock.<Map<String,String>>anyObject(),EasyMock.<ConnectorContext>anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED));
  PowerMock.expectLastCall().andReturn(true);
  EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);
  EasyMock.expect(worker.connectorTaskConfigs(CONN1,conn1SinkConfig)).andReturn(TASK_CONFIGS);
  worker.startTask(EasyMock.eq(TASK1),EasyMock.<ClusterConfigState>anyObject(),EasyMock.<Map<String,String>>anyObject(),EasyMock.<Map<String,String>>anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED));
  PowerMock.expectLastCall().andReturn(true);
  member.poll(EasyMock.anyInt());
  PowerMock.expectLastCall();
  EasyMock.expect(worker.getPlugins()).andReturn(plugins);
  expectRebalance(Arrays.asList(CONN1),Arrays.asList(TASK1),ConnectProtocol.Assignment.NO_ERROR,1,Arrays.asList(CONN1),Arrays.<ConnectorTaskId>asList());
  worker.startConnector(EasyMock.eq(CONN1),EasyMock.<Map<String,String>>anyObject(),EasyMock.<ConnectorContext>anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED));
  PowerMock.expectLastCall().andReturn(true);
  EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);
  EasyMock.expect(worker.connectorTaskConfigs(CONN1,conn1SinkConfig)).andReturn(TASK_CONFIGS);
  member.poll(EasyMock.anyInt());
  PowerMock.expectLastCall();
  PowerMock.replayAll();
  time.sleep(1000L);
  assertStatistics(0,0,0,Double.POSITIVE_INFINITY);
  herder.tick();
  time.sleep(2000L);
  assertStatistics(3,1,100,2000);
  herder.tick();
  time.sleep(3000L);
  assertStatistics(3,2,100,3000);
  PowerMock.verifyAll();
}
