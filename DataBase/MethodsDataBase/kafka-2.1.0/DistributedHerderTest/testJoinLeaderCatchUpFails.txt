@Test public void testJoinLeaderCatchUpFails() throws Exception {
  EasyMock.expect(member.memberId()).andStubReturn("leader");
  expectRebalance(Collections.<String>emptyList(),Collections.<ConnectorTaskId>emptyList(),ConnectProtocol.Assignment.CONFIG_MISMATCH,1,Collections.<String>emptyList(),Collections.<ConnectorTaskId>emptyList());
  configBackingStore.refresh(EasyMock.anyLong(),EasyMock.anyObject(TimeUnit.class));
  EasyMock.expectLastCall().andThrow(new TimeoutException());
  member.maybeLeaveGroup();
  EasyMock.expectLastCall();
  PowerMock.expectPrivate(herder,"backoff",DistributedConfig.WORKER_UNSYNC_BACKOFF_MS_DEFAULT);
  member.requestRejoin();
  expectRebalance(1,Arrays.asList(CONN1),Arrays.asList(TASK1));
  expectPostRebalanceCatchup(SNAPSHOT);
  worker.startConnector(EasyMock.eq(CONN1),EasyMock.<Map<String,String>>anyObject(),EasyMock.<ConnectorContext>anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED));
  PowerMock.expectLastCall().andReturn(true);
  EasyMock.expect(worker.getPlugins()).andReturn(plugins);
  EasyMock.expect(worker.connectorTaskConfigs(CONN1,conn1SinkConfig)).andReturn(TASK_CONFIGS);
  worker.startTask(EasyMock.eq(TASK1),EasyMock.<ClusterConfigState>anyObject(),EasyMock.<Map<String,String>>anyObject(),EasyMock.<Map<String,String>>anyObject(),EasyMock.eq(herder),EasyMock.eq(TargetState.STARTED));
  PowerMock.expectLastCall().andReturn(true);
  EasyMock.expect(worker.isRunning(CONN1)).andReturn(true);
  member.poll(EasyMock.anyInt());
  PowerMock.expectLastCall();
  PowerMock.replayAll();
  herder.tick();
  time.sleep(1000L);
  assertStatistics("leaderUrl",true,3,0,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);
  herder.tick();
  time.sleep(2000L);
  assertStatistics("leaderUrl",false,3,1,100,2000L);
  PowerMock.verifyAll();
}
