@Test public void testConnectorNameConflictsWithWorkerGroupId() throws Exception {
  EasyMock.expect(member.memberId()).andStubReturn("leader");
  expectRebalance(1,Collections.<String>emptyList(),Collections.<ConnectorTaskId>emptyList());
  expectPostRebalanceCatchup(SNAPSHOT);
  member.wakeup();
  PowerMock.expectLastCall();
  Map<String,String> config=new HashMap<>(CONN2_CONFIG);
  config.put(ConnectorConfig.NAME_CONFIG,"test-group");
  Connector connectorMock=PowerMock.createMock(SinkConnector.class);
  EasyMock.expect(worker.configTransformer()).andReturn(transformer).times(2);
  final Capture<Map<String,String>> configCapture=EasyMock.newCapture();
  EasyMock.expect(transformer.transform(EasyMock.capture(configCapture))).andAnswer(configCapture::getValue);
  EasyMock.expect(worker.getPlugins()).andReturn(plugins).times(3);
  EasyMock.expect(plugins.compareAndSwapLoaders(connectorMock)).andReturn(delegatingLoader);
  EasyMock.expect(plugins.newConnector(EasyMock.anyString())).andReturn(connectorMock);
  EasyMock.expect(connectorMock.config()).andReturn(new ConfigDef());
  EasyMock.expect(connectorMock.validate(config)).andReturn(new Config(Collections.<ConfigValue>emptyList()));
  EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);
  Capture<Throwable> error=EasyMock.newCapture();
  putConnectorCallback.onCompletion(EasyMock.capture(error),EasyMock.isNull(Herder.Created.class));
  PowerMock.expectLastCall();
  member.poll(EasyMock.anyInt());
  PowerMock.expectLastCall();
  PowerMock.replayAll();
  herder.putConnectorConfig(CONN2,config,false,putConnectorCallback);
  herder.tick();
  assertTrue(error.hasCaptured());
  assertTrue(error.getValue() instanceof BadRequestException);
  time.sleep(1000L);
  assertStatistics(3,1,100,1000L);
  PowerMock.verifyAll();
}
