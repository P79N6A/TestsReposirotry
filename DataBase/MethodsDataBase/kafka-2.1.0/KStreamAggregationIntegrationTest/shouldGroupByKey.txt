@Test public void shouldGroupByKey() throws Exception {
  final long timestamp=mockTime.milliseconds();
  produceMessages(timestamp);
  produceMessages(timestamp);
  stream.groupByKey(Serialized.with(Serdes.Integer(),Serdes.String())).windowedBy(TimeWindows.of(ofMillis(500L))).count().toStream((windowedKey,value) -> windowedKey.key() + "@" + windowedKey.window().start()).to(outputTopic,Produced.with(Serdes.String(),Serdes.Long()));
  startStreams();
  final List<KeyValue<String,Long>> results=receiveMessages(new StringDeserializer(),new LongDeserializer(),10);
  Collections.sort(results,KStreamAggregationIntegrationTest::compare);
  final long window=timestamp / 500 * 500;
  assertThat(results,is(Arrays.asList(KeyValue.pair("1@" + window,1L),KeyValue.pair("1@" + window,2L),KeyValue.pair("2@" + window,1L),KeyValue.pair("2@" + window,2L),KeyValue.pair("3@" + window,1L),KeyValue.pair("3@" + window,2L),KeyValue.pair("4@" + window,1L),KeyValue.pair("4@" + window,2L),KeyValue.pair("5@" + window,1L),KeyValue.pair("5@" + window,2L))));
}
