@Test public void shouldRestoreAndNotifyMultipleStores() throws Exception {
  final TopicPartition one=new TopicPartition("one",0);
  final TopicPartition two=new TopicPartition("two",0);
  final MockStateRestoreListener callbackOne=new MockStateRestoreListener();
  final MockStateRestoreListener callbackTwo=new MockStateRestoreListener();
  final CompositeRestoreListener restoreListener1=new CompositeRestoreListener(callbackOne);
  final CompositeRestoreListener restoreListener2=new CompositeRestoreListener(callbackTwo);
  setupConsumer(10,topicPartition);
  setupConsumer(5,one);
  setupConsumer(3,two);
  changelogReader.register(new StateRestorer(topicPartition,restoreListener,0L,Long.MAX_VALUE,true,"storeName1"));
  changelogReader.register(new StateRestorer(one,restoreListener1,0L,Long.MAX_VALUE,true,"storeName2"));
  changelogReader.register(new StateRestorer(two,restoreListener2,0L,Long.MAX_VALUE,true,"storeName3"));
  expect(active.restoringTaskFor(one)).andReturn(task);
  expect(active.restoringTaskFor(two)).andReturn(task);
  expect(active.restoringTaskFor(topicPartition)).andReturn(task);
  expect(active.restoringTaskFor(topicPartition)).andStubReturn(task);
  replay(active,task);
  changelogReader.restore(active);
  changelogReader.restore(active);
  assertThat(callback.restored.size(),equalTo(10));
  assertThat(callbackOne.restored.size(),equalTo(5));
  assertThat(callbackTwo.restored.size(),equalTo(3));
  assertAllCallbackStatesExecuted(callback,"storeName1");
  assertCorrectOffsetsReportedByListener(callback,0L,9L,10L);
  assertAllCallbackStatesExecuted(callbackOne,"storeName2");
  assertCorrectOffsetsReportedByListener(callbackOne,0L,4L,5L);
  assertAllCallbackStatesExecuted(callbackTwo,"storeName3");
  assertCorrectOffsetsReportedByListener(callbackTwo,0L,2L,3L);
}
