@Test public void shouldRestorePartitionsRegisteredPostInitialization(){
  final MockRestoreCallback callbackTwo=new MockRestoreCallback();
  final CompositeRestoreListener restoreListener2=new CompositeRestoreListener(callbackTwo);
  setupConsumer(1,topicPartition);
  consumer.updateEndOffsets(Collections.singletonMap(topicPartition,10L));
  changelogReader.register(new StateRestorer(topicPartition,restoreListener,null,Long.MAX_VALUE,false,"storeName"));
  final TopicPartition postInitialization=new TopicPartition("other",0);
  expect(active.restoringTaskFor(topicPartition)).andStubReturn(task);
  expect(active.restoringTaskFor(postInitialization)).andStubReturn(task);
  replay(active,task);
  assertTrue(changelogReader.restore(active).isEmpty());
  addRecords(9,topicPartition,1);
  setupConsumer(3,postInitialization);
  consumer.updateBeginningOffsets(Collections.singletonMap(postInitialization,0L));
  consumer.updateEndOffsets(Collections.singletonMap(postInitialization,3L));
  changelogReader.register(new StateRestorer(postInitialization,restoreListener2,null,Long.MAX_VALUE,false,"otherStore"));
  final Collection<TopicPartition> expected=Utils.mkSet(topicPartition,postInitialization);
  consumer.assign(expected);
  assertThat(changelogReader.restore(active),equalTo(expected));
  assertThat(callback.restored.size(),equalTo(10));
  assertThat(callbackTwo.restored.size(),equalTo(3));
}
