@Test public void testTypeVariance(){
  final Predicate<Number,Object> positive=new Predicate<Number,Object>(){
    @Override public boolean test(    final Number key,    final Object value){
      return key.doubleValue() > 0;
    }
  }
;
  final Predicate<Number,Object> negative=new Predicate<Number,Object>(){
    @Override public boolean test(    final Number key,    final Object value){
      return key.doubleValue() < 0;
    }
  }
;
  @SuppressWarnings("unchecked") final KStream<Integer,String>[] branches=new StreamsBuilder().<Integer,String>stream("empty").branch(positive,negative);
}
