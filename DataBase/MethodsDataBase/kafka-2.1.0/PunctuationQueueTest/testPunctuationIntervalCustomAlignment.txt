@Test public void testPunctuationIntervalCustomAlignment(){
  final PunctuationSchedule sched=new PunctuationSchedule(node,50L,100L,punctuator);
  final long now=sched.timestamp - 50L;
  queue.schedule(sched);
  final ProcessorNodePunctuator processorNodePunctuator=new ProcessorNodePunctuator(){
    @Override public void punctuate(    final ProcessorNode node,    final long time,    final PunctuationType type,    final Punctuator punctuator){
      punctuator.punctuate(time);
    }
  }
;
  queue.mayPunctuate(now,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(0,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 49L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(0,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 50L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(1,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 149L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(1,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 150L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(2,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 1051L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(3,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 1052L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(3,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 1150L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(4,node.mockProcessor.punctuatedStreamTime.size());
}
