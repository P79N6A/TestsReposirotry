@Test public void testPunctuationInterval(){
  final PunctuationSchedule sched=new PunctuationSchedule(node,0L,100L,punctuator);
  final long now=sched.timestamp - 100L;
  queue.schedule(sched);
  final ProcessorNodePunctuator processorNodePunctuator=new ProcessorNodePunctuator(){
    @Override public void punctuate(    final ProcessorNode node,    final long time,    final PunctuationType type,    final Punctuator punctuator){
      punctuator.punctuate(time);
    }
  }
;
  queue.mayPunctuate(now,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(0,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 99L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(0,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 100L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(1,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 199L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(1,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 200L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(2,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 1001L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(3,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 1002L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(3,node.mockProcessor.punctuatedStreamTime.size());
  queue.mayPunctuate(now + 1100L,PunctuationType.STREAM_TIME,processorNodePunctuator);
  assertEquals(4,node.mockProcessor.punctuatedStreamTime.size());
}
