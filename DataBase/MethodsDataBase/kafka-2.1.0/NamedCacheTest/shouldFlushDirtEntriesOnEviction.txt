@Test public void shouldFlushDirtEntriesOnEviction(){
  final List<ThreadCache.DirtyEntry> flushed=new ArrayList<>();
  cache.put(Bytes.wrap(new byte[]{0}),new LRUCacheEntry(new byte[]{10},headers,true,0,0,0,""));
  cache.put(Bytes.wrap(new byte[]{1}),new LRUCacheEntry(new byte[]{20}));
  cache.put(Bytes.wrap(new byte[]{2}),new LRUCacheEntry(new byte[]{30},headers,true,0,0,0,""));
  cache.setListener(new ThreadCache.DirtyEntryFlushListener(){
    @Override public void apply(    final List<ThreadCache.DirtyEntry> dirty){
      flushed.addAll(dirty);
    }
  }
);
  cache.evict();
  assertEquals(2,flushed.size());
  assertEquals(Bytes.wrap(new byte[]{0}),flushed.get(0).key());
  assertEquals(headers,flushed.get(0).entry().context().headers());
  assertArrayEquals(new byte[]{10},flushed.get(0).newValue());
  assertEquals(Bytes.wrap(new byte[]{2}),flushed.get(1).key());
  assertArrayEquals(new byte[]{30},flushed.get(1).newValue());
  assertEquals(cache.flushes(),1);
}
