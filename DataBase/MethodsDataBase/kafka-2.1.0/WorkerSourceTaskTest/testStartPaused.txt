@Test public void testStartPaused() throws Exception {
  final CountDownLatch pauseLatch=new CountDownLatch(1);
  createWorkerTask(TargetState.PAUSED);
  statusListener.onPause(taskId);
  EasyMock.expectLastCall().andAnswer(new IAnswer<Void>(){
    @Override public Void answer() throws Throwable {
      pauseLatch.countDown();
      return null;
    }
  }
);
  producer.close(EasyMock.anyLong(),EasyMock.anyObject(TimeUnit.class));
  EasyMock.expectLastCall();
  transformationChain.close();
  EasyMock.expectLastCall();
  statusListener.onShutdown(taskId);
  EasyMock.expectLastCall();
  PowerMock.replayAll();
  workerTask.initialize(TASK_CONFIG);
  Future<?> taskFuture=executor.submit(workerTask);
  assertTrue(pauseLatch.await(5,TimeUnit.SECONDS));
  workerTask.stop();
  assertTrue(workerTask.awaitStop(1000));
  taskFuture.get();
  PowerMock.verifyAll();
}
