@Test public void testForeach(){
  final List<KeyValue<Integer,String>> inputRecords=Arrays.asList(new KeyValue<>(0,"zero"),new KeyValue<>(1,"one"),new KeyValue<>(2,"two"),new KeyValue<>(3,"three"));
  final List<KeyValue<Integer,String>> expectedRecords=Arrays.asList(new KeyValue<>(0,"ZERO"),new KeyValue<>(2,"ONE"),new KeyValue<>(4,"TWO"),new KeyValue<>(6,"THREE"));
  final List<KeyValue<Integer,String>> actualRecords=new ArrayList<>();
  final ForeachAction<Integer,String> action=new ForeachAction<Integer,String>(){
    @Override public void apply(    final Integer key,    final String value){
      actualRecords.add(new KeyValue<>(key * 2,value.toUpperCase(Locale.ROOT)));
    }
  }
;
  final StreamsBuilder builder=new StreamsBuilder();
  final KStream<Integer,String> stream=builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.String()));
  stream.foreach(action);
  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
    for (    final KeyValue<Integer,String> record : inputRecords) {
      driver.pipeInput(recordFactory.create(topicName,record.key,record.value));
    }
  }
   assertEquals(expectedRecords.size(),actualRecords.size());
  for (int i=0; i < expectedRecords.size(); i++) {
    final KeyValue<Integer,String> expectedRecord=expectedRecords.get(i);
    final KeyValue<Integer,String> actualRecord=actualRecords.get(i);
    assertEquals(expectedRecord,actualRecord);
  }
}
