@Test public void testMap(){
  final StreamsBuilder builder=new StreamsBuilder();
  final int[] expectedKeys=new int[]{0,1,2,3};
  final MockProcessorSupplier<String,Integer> supplier=new MockProcessorSupplier<>();
  final KStream<Integer,String> stream=builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.String()));
  stream.map((key,value) -> KeyValue.pair(value,key)).process(supplier);
  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topicName,expectedKey,"V" + expectedKey));
    }
  }
   assertEquals(4,supplier.theCapturedProcessor().processed.size());
  final String[] expected=new String[]{"V0:0","V1:1","V2:2","V3:3"};
  for (int i=0; i < expected.length; i++) {
    assertEquals(expected[i],supplier.theCapturedProcessor().processed.get(i));
  }
}
