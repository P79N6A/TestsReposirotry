@Test public void shouldNotReturnDuplicatesInRanges(){
  final StreamsBuilder builder=new StreamsBuilder();
  final StoreBuilder<WindowStore<String,String>> storeBuilder=Stores.windowStoreBuilder(Stores.persistentWindowStore("store-name",ofHours(1L),ofMinutes(1L),false),Serdes.String(),Serdes.String()).withCachingEnabled();
  builder.addStateStore(storeBuilder);
  builder.stream(topic,Consumed.with(Serdes.String(),Serdes.String())).transform(() -> new Transformer<String,String,KeyValue<String,String>>(){
    private WindowStore<String,String> store;
    private int numRecordsProcessed;
    @Override public void init(    final ProcessorContext processorContext){
      this.store=(WindowStore<String,String>)processorContext.getStateStore("store-name");
      int count=0;
      final KeyValueIterator<Windowed<String>,String> all=store.all();
      while (all.hasNext()) {
        count++;
        all.next();
      }
      assertThat(count,equalTo(0));
    }
    @Override public KeyValue<String,String> transform(    final String key,    final String value){
      int count=0;
      final KeyValueIterator<Windowed<String>,String> all=store.all();
      while (all.hasNext()) {
        count++;
        all.next();
      }
      assertThat(count,equalTo(numRecordsProcessed));
      store.put(value,value);
      numRecordsProcessed++;
      return new KeyValue<>(key,value);
    }
    @Override public void close(){
    }
  }
,"store-name");
  final String bootstrapServers="localhost:9092";
  final Properties streamsConfiguration=new Properties();
  streamsConfiguration.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,"earliest");
  streamsConfiguration.put(StreamsConfig.APPLICATION_ID_CONFIG,"test-app");
  streamsConfiguration.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,bootstrapServers);
  streamsConfiguration.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG,Serdes.String().getClass().getName());
  streamsConfiguration.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG,Serdes.String().getClass().getName());
  streamsConfiguration.put(StreamsConfig.STATE_DIR_CONFIG,TestUtils.tempDirectory().getPath());
  streamsConfiguration.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG,10 * 1000);
  final long initialWallClockTime=0L;
  final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),streamsConfiguration,initialWallClockTime);
  final ConsumerRecordFactory<String,String> recordFactory=new ConsumerRecordFactory<>(Serdes.String().serializer(),Serdes.String().serializer(),initialWallClockTime);
  for (int i=0; i < 5; i++) {
    driver.pipeInput(recordFactory.create(topic,UUID.randomUUID().toString(),UUID.randomUUID().toString()));
  }
  driver.advanceWallClockTime(10 * 1000L);
  recordFactory.advanceTimeMs(10 * 1000L);
  for (int i=0; i < 5; i++) {
    driver.pipeInput(recordFactory.create(topic,UUID.randomUUID().toString(),UUID.randomUUID().toString()));
  }
  driver.advanceWallClockTime(10 * 1000L);
  recordFactory.advanceTimeMs(10 * 1000L);
  for (int i=0; i < 5; i++) {
    driver.pipeInput(recordFactory.create(topic,UUID.randomUUID().toString(),UUID.randomUUID().toString()));
  }
  driver.advanceWallClockTime(10 * 1000L);
  recordFactory.advanceTimeMs(10 * 1000L);
  for (int i=0; i < 5; i++) {
    driver.pipeInput(recordFactory.create(topic,UUID.randomUUID().toString(),UUID.randomUUID().toString()));
  }
}
