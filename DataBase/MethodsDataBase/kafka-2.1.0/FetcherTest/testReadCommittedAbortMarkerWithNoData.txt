@Test public void testReadCommittedAbortMarkerWithNoData(){
  Fetcher<String,String> fetcher=createFetcher(subscriptions,new Metrics(),new StringDeserializer(),new StringDeserializer(),Integer.MAX_VALUE,IsolationLevel.READ_COMMITTED);
  ByteBuffer buffer=ByteBuffer.allocate(1024);
  long producerId=1L;
  abortTransaction(buffer,producerId,5L);
  appendTransactionalRecords(buffer,producerId,6L,new SimpleRecord("6".getBytes(),null),new SimpleRecord("7".getBytes(),null),new SimpleRecord("8".getBytes(),null));
  commitTransaction(buffer,producerId,9L);
  buffer.flip();
  subscriptions.assignFromUser(singleton(tp0));
  subscriptions.seek(tp0,0);
  assertEquals(1,fetcher.sendFetches());
  List<FetchResponse.AbortedTransaction> abortedTransactions=new ArrayList<>();
  abortedTransactions.add(new FetchResponse.AbortedTransaction(producerId,0L));
  client.prepareResponse(fullFetchResponseWithAbortedTransactions(MemoryRecords.readableRecords(buffer),abortedTransactions,Errors.NONE,100L,100L,0));
  consumerClient.poll(time.timer(0));
  assertTrue(fetcher.hasCompletedFetches());
  Map<TopicPartition,List<ConsumerRecord<String,String>>> allFetchedRecords=fetcher.fetchedRecords();
  assertTrue(allFetchedRecords.containsKey(tp0));
  List<ConsumerRecord<String,String>> fetchedRecords=allFetchedRecords.get(tp0);
  assertEquals(3,fetchedRecords.size());
  assertEquals(Arrays.asList(6L,7L,8L),collectRecordOffsets(fetchedRecords));
}
