@Test public void testFetcherLeadMetric(){
  subscriptions.assignFromUser(singleton(tp0));
  subscriptions.seek(tp0,0);
  MetricName minLeadMetric=metrics.metricInstance(metricsRegistry.recordsLeadMin);
  Map<String,String> tags=new HashMap<>(2);
  tags.put("topic",tp0.topic());
  tags.put("partition",String.valueOf(tp0.partition()));
  MetricName partitionLeadMetric=metrics.metricName("records-lead",metricGroup,"",tags);
  Map<MetricName,KafkaMetric> allMetrics=metrics.metrics();
  KafkaMetric recordsFetchLeadMin=allMetrics.get(minLeadMetric);
  assertEquals(Double.MAX_VALUE,(Double)recordsFetchLeadMin.metricValue(),EPSILON);
  fetchRecords(tp0,MemoryRecords.EMPTY,Errors.NONE,100L,-1L,0L,0);
  assertEquals(0L,(Double)recordsFetchLeadMin.metricValue(),EPSILON);
  KafkaMetric partitionLead=allMetrics.get(partitionLeadMetric);
  assertEquals(0L,(Double)partitionLead.metricValue(),EPSILON);
  MemoryRecordsBuilder builder=MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME,0L);
  for (int v=0; v < 3; v++) {
    builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,"key".getBytes(),("value-" + v).getBytes());
  }
  fetchRecords(tp0,builder.build(),Errors.NONE,200L,-1L,0L,0);
  assertEquals(0L,(Double)recordsFetchLeadMin.metricValue(),EPSILON);
  assertEquals(3L,(Double)partitionLead.metricValue(),EPSILON);
  subscriptions.unsubscribe();
  assertFalse(allMetrics.containsKey(partitionLeadMetric));
}
