@Test public void testReturnCommittedTransactions(){
  Fetcher<byte[],byte[]> fetcher=createFetcher(subscriptions,new Metrics(),new ByteArrayDeserializer(),new ByteArrayDeserializer(),Integer.MAX_VALUE,IsolationLevel.READ_COMMITTED);
  ByteBuffer buffer=ByteBuffer.allocate(1024);
  int currentOffset=0;
  currentOffset+=appendTransactionalRecords(buffer,1L,currentOffset,new SimpleRecord(time.milliseconds(),"key".getBytes(),"value".getBytes()),new SimpleRecord(time.milliseconds(),"key".getBytes(),"value".getBytes()));
  currentOffset+=commitTransaction(buffer,1L,currentOffset);
  buffer.flip();
  List<FetchResponse.AbortedTransaction> abortedTransactions=new ArrayList<>();
  MemoryRecords records=MemoryRecords.readableRecords(buffer);
  subscriptions.assignFromUser(singleton(tp0));
  subscriptions.seek(tp0,0);
  assertEquals(1,fetcher.sendFetches());
  assertFalse(fetcher.hasCompletedFetches());
  client.prepareResponse(new MockClient.RequestMatcher(){
    @Override public boolean matches(    AbstractRequest body){
      FetchRequest request=(FetchRequest)body;
      assertEquals(IsolationLevel.READ_COMMITTED,request.isolationLevel());
      return true;
    }
  }
,fullFetchResponseWithAbortedTransactions(records,abortedTransactions,Errors.NONE,100L,100L,0));
  consumerClient.poll(time.timer(0));
  assertTrue(fetcher.hasCompletedFetches());
  Map<TopicPartition,List<ConsumerRecord<byte[],byte[]>>> fetchedRecords=fetcher.fetchedRecords();
  assertTrue(fetchedRecords.containsKey(tp0));
  assertEquals(fetchedRecords.get(tp0).size(),2);
}
