@Test public void testFetcherIgnoresControlRecords(){
  subscriptions.assignFromUser(singleton(tp0));
  subscriptions.seek(tp0,0);
  assertEquals(1,fetcher.sendFetches());
  assertFalse(fetcher.hasCompletedFetches());
  long producerId=1;
  short producerEpoch=0;
  int baseSequence=0;
  int partitionLeaderEpoch=0;
  ByteBuffer buffer=ByteBuffer.allocate(1024);
  MemoryRecordsBuilder builder=MemoryRecords.idempotentBuilder(buffer,CompressionType.NONE,0L,producerId,producerEpoch,baseSequence);
  builder.append(0L,"key".getBytes(),null);
  builder.close();
  MemoryRecords.writeEndTransactionalMarker(buffer,1L,time.milliseconds(),partitionLeaderEpoch,producerId,producerEpoch,new EndTransactionMarker(ControlRecordType.ABORT,0));
  buffer.flip();
  client.prepareResponse(fullFetchResponse(tp0,MemoryRecords.readableRecords(buffer),Errors.NONE,100L,0));
  consumerClient.poll(time.timer(0));
  assertTrue(fetcher.hasCompletedFetches());
  Map<TopicPartition,List<ConsumerRecord<byte[],byte[]>>> partitionRecords=fetcher.fetchedRecords();
  assertTrue(partitionRecords.containsKey(tp0));
  List<ConsumerRecord<byte[],byte[]>> records=partitionRecords.get(tp0);
  assertEquals(1,records.size());
  assertEquals(2L,subscriptions.position(tp0).longValue());
  ConsumerRecord<byte[],byte[]> record=records.get(0);
  assertArrayEquals("key".getBytes(),record.key());
}
