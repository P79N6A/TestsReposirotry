@Test public void testConsumingViaIncrementalFetchRequests(){
  Fetcher<byte[],byte[]> fetcher=createFetcher(subscriptions,new Metrics(time),2);
  List<ConsumerRecord<byte[],byte[]>> records;
  subscriptions.assignFromUser(new HashSet<>(Arrays.asList(tp0,tp1)));
  subscriptions.seek(tp0,0);
  subscriptions.seek(tp1,1);
  LinkedHashMap<TopicPartition,FetchResponse.PartitionData<MemoryRecords>> partitions1=new LinkedHashMap<>();
  partitions1.put(tp0,new FetchResponse.PartitionData<>(Errors.NONE,2L,2,0L,null,this.records));
  partitions1.put(tp1,new FetchResponse.PartitionData<>(Errors.NONE,100L,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,emptyRecords));
  FetchResponse resp1=new FetchResponse<>(Errors.NONE,partitions1,0,123);
  client.prepareResponse(resp1);
  assertEquals(1,fetcher.sendFetches());
  assertFalse(fetcher.hasCompletedFetches());
  consumerClient.poll(time.timer(0));
  assertTrue(fetcher.hasCompletedFetches());
  Map<TopicPartition,List<ConsumerRecord<byte[],byte[]>>> fetchedRecords=fetcher.fetchedRecords();
  assertFalse(fetchedRecords.containsKey(tp1));
  records=fetchedRecords.get(tp0);
  assertEquals(2,records.size());
  assertEquals(3L,subscriptions.position(tp0).longValue());
  assertEquals(1L,subscriptions.position(tp1).longValue());
  assertEquals(1,records.get(0).offset());
  assertEquals(2,records.get(1).offset());
  assertEquals(0,fetcher.sendFetches());
  fetchedRecords=fetcher.fetchedRecords();
  assertFalse(fetchedRecords.containsKey(tp1));
  records=fetchedRecords.get(tp0);
  assertEquals(1,records.size());
  assertEquals(3,records.get(0).offset());
  assertEquals(4L,subscriptions.position(tp0).longValue());
  LinkedHashMap<TopicPartition,FetchResponse.PartitionData<MemoryRecords>> partitions2=new LinkedHashMap<>();
  FetchResponse resp2=new FetchResponse<>(Errors.NONE,partitions2,0,123);
  client.prepareResponse(resp2);
  assertEquals(1,fetcher.sendFetches());
  consumerClient.poll(time.timer(0));
  fetchedRecords=fetcher.fetchedRecords();
  assertTrue(fetchedRecords.isEmpty());
  assertEquals(4L,subscriptions.position(tp0).longValue());
  assertEquals(1L,subscriptions.position(tp1).longValue());
  LinkedHashMap<TopicPartition,FetchResponse.PartitionData<MemoryRecords>> partitions3=new LinkedHashMap<>();
  partitions3.put(tp0,new FetchResponse.PartitionData<>(Errors.NONE,100L,4,0L,null,this.nextRecords));
  FetchResponse resp3=new FetchResponse<>(Errors.NONE,partitions3,0,123);
  client.prepareResponse(resp3);
  assertEquals(1,fetcher.sendFetches());
  consumerClient.poll(time.timer(0));
  fetchedRecords=fetcher.fetchedRecords();
  assertFalse(fetchedRecords.containsKey(tp1));
  records=fetchedRecords.get(tp0);
  assertEquals(2,records.size());
  assertEquals(6L,subscriptions.position(tp0).longValue());
  assertEquals(1L,subscriptions.position(tp1).longValue());
  assertEquals(4,records.get(0).offset());
  assertEquals(5,records.get(1).offset());
}
