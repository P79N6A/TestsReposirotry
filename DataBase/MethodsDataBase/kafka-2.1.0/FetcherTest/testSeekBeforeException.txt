@Test public void testSeekBeforeException(){
  Fetcher<byte[],byte[]> fetcher=createFetcher(subscriptionsNoAutoReset,new Metrics(time),2);
  subscriptionsNoAutoReset.assignFromUser(Utils.mkSet(tp0));
  subscriptionsNoAutoReset.seek(tp0,1);
  assertEquals(1,fetcher.sendFetches());
  Map<TopicPartition,FetchResponse.PartitionData<MemoryRecords>> partitions=new HashMap<>();
  partitions.put(tp0,new FetchResponse.PartitionData<>(Errors.NONE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,FetchResponse.INVALID_LOG_START_OFFSET,null,records));
  client.prepareResponse(fullFetchResponse(tp0,this.records,Errors.NONE,100L,0));
  consumerClient.poll(time.timer(0));
  assertEquals(2,fetcher.fetchedRecords().get(tp0).size());
  subscriptionsNoAutoReset.assignFromUser(Utils.mkSet(tp0,tp1));
  subscriptionsNoAutoReset.seek(tp1,1);
  assertEquals(1,fetcher.sendFetches());
  partitions=new HashMap<>();
  partitions.put(tp1,new FetchResponse.PartitionData<>(Errors.OFFSET_OUT_OF_RANGE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,FetchResponse.INVALID_LOG_START_OFFSET,null,MemoryRecords.EMPTY));
  client.prepareResponse(new FetchResponse<>(Errors.NONE,new LinkedHashMap<>(partitions),0,INVALID_SESSION_ID));
  consumerClient.poll(time.timer(0));
  assertEquals(1,fetcher.fetchedRecords().get(tp0).size());
  subscriptionsNoAutoReset.seek(tp1,10);
  assertEquals(0,fetcher.fetchedRecords().size());
}
