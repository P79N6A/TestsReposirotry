@Test public void testParseCorruptedRecord() throws Exception {
  ByteBuffer buffer=ByteBuffer.allocate(1024);
  DataOutputStream out=new DataOutputStream(new ByteBufferOutputStream(buffer));
  byte magic=RecordBatch.MAGIC_VALUE_V1;
  byte[] key="foo".getBytes();
  byte[] value="baz".getBytes();
  long offset=0;
  long timestamp=500L;
  int size=LegacyRecord.recordSize(magic,key.length,value.length);
  byte attributes=LegacyRecord.computeAttributes(magic,CompressionType.NONE,TimestampType.CREATE_TIME);
  long crc=LegacyRecord.computeChecksum(magic,attributes,timestamp,key,value);
  out.writeLong(offset);
  out.writeInt(size);
  LegacyRecord.write(out,magic,crc,LegacyRecord.computeAttributes(magic,CompressionType.NONE,TimestampType.CREATE_TIME),timestamp,key,value);
  out.writeLong(offset + 1);
  out.writeInt(size);
  LegacyRecord.write(out,magic,crc + 1,LegacyRecord.computeAttributes(magic,CompressionType.NONE,TimestampType.CREATE_TIME),timestamp,key,value);
  out.writeLong(offset + 2);
  out.writeInt(size);
  LegacyRecord.write(out,magic,crc,LegacyRecord.computeAttributes(magic,CompressionType.NONE,TimestampType.CREATE_TIME),timestamp,key,value);
  out.writeLong(offset + 3);
  out.writeInt(1);
  out.writeLong(offset + 4);
  out.writeInt(size);
  LegacyRecord.write(out,magic,crc,LegacyRecord.computeAttributes(magic,CompressionType.NONE,TimestampType.CREATE_TIME),timestamp,key,value);
  buffer.flip();
  subscriptions.assignFromUser(singleton(tp0));
  subscriptions.seek(tp0,0);
  assertEquals(1,fetcher.sendFetches());
  client.prepareResponse(fullFetchResponse(tp0,MemoryRecords.readableRecords(buffer),Errors.NONE,100L,0));
  consumerClient.poll(time.timer(0));
  assertEquals(1,fetcher.fetchedRecords().get(tp0).size());
  assertEquals(1,subscriptions.position(tp0).longValue());
  ensureBlockOnRecord(1L);
  seekAndConsumeRecord(buffer,2L);
  ensureBlockOnRecord(3L);
  try {
    seekAndConsumeRecord(buffer,4L);
    fail("Should have thrown exception when fail to retrieve a record from iterator.");
  }
 catch (  KafkaException ke) {
  }
  ensureBlockOnRecord(4L);
}
