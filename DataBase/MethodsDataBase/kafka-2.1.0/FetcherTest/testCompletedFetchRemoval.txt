@Test public void testCompletedFetchRemoval(){
  subscriptionsNoAutoReset.assignFromUser(Utils.mkSet(tp0,tp1,tp2,tp3));
  subscriptionsNoAutoReset.seek(tp0,1);
  subscriptionsNoAutoReset.seek(tp1,1);
  subscriptionsNoAutoReset.seek(tp2,1);
  subscriptionsNoAutoReset.seek(tp3,1);
  assertEquals(1,fetcherNoAutoReset.sendFetches());
  Map<TopicPartition,FetchResponse.PartitionData<MemoryRecords>> partitions=new LinkedHashMap<>();
  partitions.put(tp1,new FetchResponse.PartitionData<>(Errors.NONE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,FetchResponse.INVALID_LOG_START_OFFSET,null,records));
  partitions.put(tp0,new FetchResponse.PartitionData<>(Errors.OFFSET_OUT_OF_RANGE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,FetchResponse.INVALID_LOG_START_OFFSET,null,MemoryRecords.EMPTY));
  partitions.put(tp2,new FetchResponse.PartitionData<>(Errors.NONE,100L,4,0L,null,nextRecords));
  partitions.put(tp3,new FetchResponse.PartitionData<>(Errors.NONE,100L,4,0L,null,partialRecords));
  client.prepareResponse(new FetchResponse<>(Errors.NONE,new LinkedHashMap<>(partitions),0,INVALID_SESSION_ID));
  consumerClient.poll(time.timer(0));
  List<ConsumerRecord<byte[],byte[]>> fetchedRecords=new ArrayList<>();
  for (  List<ConsumerRecord<byte[],byte[]>> records : fetcherNoAutoReset.fetchedRecords().values())   fetchedRecords.addAll(records);
  assertEquals(fetchedRecords.size(),subscriptionsNoAutoReset.position(tp1) - 1);
  assertEquals(4,subscriptionsNoAutoReset.position(tp1).longValue());
  assertEquals(3,fetchedRecords.size());
  List<OffsetOutOfRangeException> oorExceptions=new ArrayList<>();
  try {
    for (    List<ConsumerRecord<byte[],byte[]>> records : fetcherNoAutoReset.fetchedRecords().values())     fetchedRecords.addAll(records);
  }
 catch (  OffsetOutOfRangeException oor) {
    oorExceptions.add(oor);
  }
  assertEquals(1,oorExceptions.size());
  OffsetOutOfRangeException oor=oorExceptions.get(0);
  assertTrue(oor.offsetOutOfRangePartitions().containsKey(tp0));
  assertEquals(oor.offsetOutOfRangePartitions().size(),1);
  for (  List<ConsumerRecord<byte[],byte[]>> records : fetcherNoAutoReset.fetchedRecords().values())   fetchedRecords.addAll(records);
  assertEquals(6,subscriptionsNoAutoReset.position(tp2).longValue());
  assertEquals(5,fetchedRecords.size());
  int numExceptionsExpected=3;
  List<KafkaException> kafkaExceptions=new ArrayList<>();
  for (int i=1; i <= numExceptionsExpected; i++) {
    try {
      for (      List<ConsumerRecord<byte[],byte[]>> records : fetcherNoAutoReset.fetchedRecords().values())       fetchedRecords.addAll(records);
    }
 catch (    KafkaException e) {
      kafkaExceptions.add(e);
    }
  }
  assertEquals(numExceptionsExpected,kafkaExceptions.size());
}
