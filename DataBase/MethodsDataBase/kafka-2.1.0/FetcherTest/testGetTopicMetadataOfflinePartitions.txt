@Test public void testGetTopicMetadataOfflinePartitions(){
  MetadataResponse originalResponse=newMetadataResponse(topicName,Errors.NONE);
  List<MetadataResponse.TopicMetadata> altTopics=new ArrayList<>();
  for (  MetadataResponse.TopicMetadata item : originalResponse.topicMetadata()) {
    List<MetadataResponse.PartitionMetadata> partitions=item.partitionMetadata();
    List<MetadataResponse.PartitionMetadata> altPartitions=new ArrayList<>();
    for (    MetadataResponse.PartitionMetadata p : partitions) {
      altPartitions.add(new MetadataResponse.PartitionMetadata(p.error(),p.partition(),null,Optional.empty(),p.replicas(),p.isr(),p.offlineReplicas()));
    }
    MetadataResponse.TopicMetadata alteredTopic=new MetadataResponse.TopicMetadata(item.error(),item.topic(),item.isInternal(),altPartitions);
    altTopics.add(alteredTopic);
  }
  Node controller=originalResponse.controller();
  MetadataResponse altered=new MetadataResponse((List<Node>)originalResponse.brokers(),originalResponse.clusterId(),controller != null ? controller.id() : MetadataResponse.NO_CONTROLLER_ID,altTopics);
  client.prepareResponse(altered);
  Map<String,List<PartitionInfo>> topicMetadata=fetcher.getTopicMetadata(new MetadataRequest.Builder(Collections.singletonList(topicName),false),time.timer(5000L));
  Assert.assertNotNull(topicMetadata);
  Assert.assertNotNull(topicMetadata.get(topicName));
  Assert.assertEquals((int)cluster.partitionCountForTopic(topicName),topicMetadata.get(topicName).size());
}
