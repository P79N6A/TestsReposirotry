@Test public void testReadCommittedWithCompactedTopic(){
  Fetcher<String,String> fetcher=createFetcher(subscriptions,new Metrics(),new StringDeserializer(),new StringDeserializer(),Integer.MAX_VALUE,IsolationLevel.READ_COMMITTED);
  ByteBuffer buffer=ByteBuffer.allocate(1024);
  long pid1=1L;
  long pid2=2L;
  long pid3=3L;
  appendTransactionalRecords(buffer,pid3,3L,new SimpleRecord("3".getBytes(),"value".getBytes()),new SimpleRecord("4".getBytes(),"value".getBytes()));
  appendTransactionalRecords(buffer,pid2,15L,new SimpleRecord("15".getBytes(),"value".getBytes()),new SimpleRecord("16".getBytes(),"value".getBytes()),new SimpleRecord("17".getBytes(),"value".getBytes()));
  appendTransactionalRecords(buffer,pid1,22L,new SimpleRecord("22".getBytes(),"value".getBytes()),new SimpleRecord("23".getBytes(),"value".getBytes()));
  abortTransaction(buffer,pid2,28L);
  appendTransactionalRecords(buffer,pid3,30L,new SimpleRecord("30".getBytes(),"value".getBytes()),new SimpleRecord("31".getBytes(),"value".getBytes()),new SimpleRecord("32".getBytes(),"value".getBytes()));
  commitTransaction(buffer,pid3,35L);
  appendTransactionalRecords(buffer,pid1,39L,new SimpleRecord("39".getBytes(),"value".getBytes()),new SimpleRecord("40".getBytes(),"value".getBytes()));
  buffer.flip();
  subscriptions.assignFromUser(singleton(tp0));
  subscriptions.seek(tp0,0);
  assertEquals(1,fetcher.sendFetches());
  List<FetchResponse.AbortedTransaction> abortedTransactions=new ArrayList<>();
  abortedTransactions.add(new FetchResponse.AbortedTransaction(pid2,6L));
  abortedTransactions.add(new FetchResponse.AbortedTransaction(pid1,0L));
  client.prepareResponse(fullFetchResponseWithAbortedTransactions(MemoryRecords.readableRecords(buffer),abortedTransactions,Errors.NONE,100L,100L,0));
  consumerClient.poll(time.timer(0));
  assertTrue(fetcher.hasCompletedFetches());
  Map<TopicPartition,List<ConsumerRecord<String,String>>> allFetchedRecords=fetcher.fetchedRecords();
  assertTrue(allFetchedRecords.containsKey(tp0));
  List<ConsumerRecord<String,String>> fetchedRecords=allFetchedRecords.get(tp0);
  assertEquals(5,fetchedRecords.size());
  assertEquals(Arrays.asList(3L,4L,30L,31L,32L),collectRecordOffsets(fetchedRecords));
}
