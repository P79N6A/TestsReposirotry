@Test public void testHeaders(){
  Fetcher<byte[],byte[]> fetcher=createFetcher(subscriptions,new Metrics(time));
  MemoryRecordsBuilder builder=MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME,1L);
  builder.append(0L,"key".getBytes(),"value-1".getBytes());
  Header[] headersArray=new Header[1];
  headersArray[0]=new RecordHeader("headerKey","headerValue".getBytes(StandardCharsets.UTF_8));
  builder.append(0L,"key".getBytes(),"value-2".getBytes(),headersArray);
  Header[] headersArray2=new Header[2];
  headersArray2[0]=new RecordHeader("headerKey","headerValue".getBytes(StandardCharsets.UTF_8));
  headersArray2[1]=new RecordHeader("headerKey","headerValue2".getBytes(StandardCharsets.UTF_8));
  builder.append(0L,"key".getBytes(),"value-3".getBytes(),headersArray2);
  MemoryRecords memoryRecords=builder.build();
  List<ConsumerRecord<byte[],byte[]>> records;
  subscriptions.assignFromUser(singleton(tp0));
  subscriptions.seek(tp0,1);
  client.prepareResponse(matchesOffset(tp0,1),fullFetchResponse(tp0,memoryRecords,Errors.NONE,100L,0));
  assertEquals(1,fetcher.sendFetches());
  consumerClient.poll(time.timer(0));
  records=fetcher.fetchedRecords().get(tp0);
  assertEquals(3,records.size());
  Iterator<ConsumerRecord<byte[],byte[]>> recordIterator=records.iterator();
  ConsumerRecord<byte[],byte[]> record=recordIterator.next();
  assertNull(record.headers().lastHeader("headerKey"));
  record=recordIterator.next();
  assertEquals("headerValue",new String(record.headers().lastHeader("headerKey").value(),StandardCharsets.UTF_8));
  assertEquals("headerKey",record.headers().lastHeader("headerKey").key());
  record=recordIterator.next();
  assertEquals("headerValue2",new String(record.headers().lastHeader("headerKey").value(),StandardCharsets.UTF_8));
  assertEquals("headerKey",record.headers().lastHeader("headerKey").key());
}
