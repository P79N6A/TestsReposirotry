@Test public void testUpdatePositionWithLastRecordMissingFromBatch(){
  MemoryRecords records=MemoryRecords.withRecords(CompressionType.NONE,new SimpleRecord("0".getBytes(),"v".getBytes()),new SimpleRecord("1".getBytes(),"v".getBytes()),new SimpleRecord("2".getBytes(),"v".getBytes()),new SimpleRecord(null,"value".getBytes()));
  MemoryRecords.FilterResult result=records.filterTo(tp0,new MemoryRecords.RecordFilter(){
    @Override protected BatchRetention checkBatchRetention(    RecordBatch batch){
      return BatchRetention.DELETE_EMPTY;
    }
    @Override protected boolean shouldRetainRecord(    RecordBatch recordBatch,    Record record){
      return record.key() != null;
    }
  }
,ByteBuffer.allocate(1024),Integer.MAX_VALUE,BufferSupplier.NO_CACHING);
  result.outputBuffer().flip();
  MemoryRecords compactedRecords=MemoryRecords.readableRecords(result.outputBuffer());
  subscriptions.assignFromUser(singleton(tp0));
  subscriptions.seek(tp0,0);
  assertEquals(1,fetcher.sendFetches());
  client.prepareResponse(fullFetchResponse(tp0,compactedRecords,Errors.NONE,100L,0));
  consumerClient.poll(time.timer(0));
  assertTrue(fetcher.hasCompletedFetches());
  Map<TopicPartition,List<ConsumerRecord<byte[],byte[]>>> allFetchedRecords=fetcher.fetchedRecords();
  assertTrue(allFetchedRecords.containsKey(tp0));
  List<ConsumerRecord<byte[],byte[]>> fetchedRecords=allFetchedRecords.get(tp0);
  assertEquals(3,fetchedRecords.size());
  for (int i=0; i < 3; i++) {
    assertEquals(Integer.toString(i),new String(fetchedRecords.get(i).key()));
  }
  assertEquals(4L,subscriptions.position(tp0).longValue());
}
