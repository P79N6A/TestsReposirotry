@Test public void testFetchedRecordsRaisesOnSerializationErrors(){
  ByteArrayDeserializer deserializer=new ByteArrayDeserializer(){
    int i=0;
    @Override public byte[] deserialize(    String topic,    byte[] data){
      if (i++ % 2 == 1) {
        assertEquals("value-1",new String(data,StandardCharsets.UTF_8));
        throw new SerializationException();
      }
      return data;
    }
  }
;
  Fetcher<byte[],byte[]> fetcher=createFetcher(subscriptions,new Metrics(time),deserializer,deserializer);
  subscriptions.assignFromUser(singleton(tp0));
  subscriptions.seek(tp0,1);
  client.prepareResponse(matchesOffset(tp0,1),fullFetchResponse(tp0,this.records,Errors.NONE,100L,0));
  assertEquals(1,fetcher.sendFetches());
  consumerClient.poll(time.timer(0));
  for (int i=0; i < 2; i++) {
    try {
      fetcher.fetchedRecords();
      fail("fetchedRecords should have raised");
    }
 catch (    SerializationException e) {
      assertEquals(1,subscriptions.position(tp0).longValue());
    }
  }
}
