@Test public void testFetchResponseMetrics(){
  String topic1="foo";
  String topic2="bar";
  TopicPartition tp1=new TopicPartition(topic1,0);
  TopicPartition tp2=new TopicPartition(topic2,0);
  Map<String,Integer> partitionCounts=new HashMap<>();
  partitionCounts.put(topic1,1);
  partitionCounts.put(topic2,1);
  Cluster cluster=TestUtils.clusterWith(1,partitionCounts);
  metadata.update(cluster,Collections.<String>emptySet(),time.milliseconds());
  subscriptions.assignFromUser(Utils.mkSet(tp1,tp2));
  int expectedBytes=0;
  LinkedHashMap<TopicPartition,FetchResponse.PartitionData<MemoryRecords>> fetchPartitionData=new LinkedHashMap<>();
  for (  TopicPartition tp : Utils.mkSet(tp1,tp2)) {
    subscriptions.seek(tp,0);
    MemoryRecordsBuilder builder=MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME,0L);
    for (int v=0; v < 3; v++)     builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,"key".getBytes(),("value-" + v).getBytes());
    MemoryRecords records=builder.build();
    for (    Record record : records.records())     expectedBytes+=record.sizeInBytes();
    fetchPartitionData.put(tp,new FetchResponse.PartitionData<>(Errors.NONE,15L,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,records));
  }
  assertEquals(1,fetcher.sendFetches());
  client.prepareResponse(new FetchResponse<>(Errors.NONE,fetchPartitionData,0,INVALID_SESSION_ID));
  consumerClient.poll(time.timer(0));
  Map<TopicPartition,List<ConsumerRecord<byte[],byte[]>>> fetchedRecords=fetcher.fetchedRecords();
  assertEquals(3,fetchedRecords.get(tp1).size());
  assertEquals(3,fetchedRecords.get(tp2).size());
  Map<MetricName,KafkaMetric> allMetrics=metrics.metrics();
  KafkaMetric fetchSizeAverage=allMetrics.get(metrics.metricInstance(metricsRegistry.fetchSizeAvg));
  KafkaMetric recordsCountAverage=allMetrics.get(metrics.metricInstance(metricsRegistry.recordsPerRequestAvg));
  assertEquals(expectedBytes,(Double)fetchSizeAverage.metricValue(),EPSILON);
  assertEquals(6,(Double)recordsCountAverage.metricValue(),EPSILON);
}
