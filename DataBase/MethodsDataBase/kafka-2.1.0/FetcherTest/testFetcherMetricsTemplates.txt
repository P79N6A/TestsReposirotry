@Test public void testFetcherMetricsTemplates() throws Exception {
  metrics.close();
  Map<String,String> clientTags=Collections.singletonMap("client-id","clientA");
  metrics=new Metrics(new MetricConfig().tags(clientTags));
  metricsRegistry=new FetcherMetricsRegistry(clientTags.keySet(),"consumer" + groupId);
  fetcher.close();
  fetcher=createFetcher(subscriptions,metrics);
  subscriptions.assignFromUser(singleton(tp0));
  subscriptions.seek(tp0,0);
  assertEquals(1,fetcher.sendFetches());
  client.prepareResponse(fullFetchResponse(tp0,this.records,Errors.NONE,100L,0));
  consumerClient.poll(time.timer(0));
  assertTrue(fetcher.hasCompletedFetches());
  Map<TopicPartition,List<ConsumerRecord<byte[],byte[]>>> partitionRecords=fetcher.fetchedRecords();
  assertTrue(partitionRecords.containsKey(tp0));
  Fetcher.throttleTimeSensor(metrics,metricsRegistry);
  Set<MetricNameTemplate> allMetrics=new HashSet<>();
  for (  MetricName n : metrics.metrics().keySet()) {
    String name=n.name().replaceAll(tp0.toString(),"{topic}-{partition}");
    if (!n.group().equals("kafka-metrics-count"))     allMetrics.add(new MetricNameTemplate(name,n.group(),"",n.tags().keySet()));
  }
  TestUtils.checkEquals(allMetrics,new HashSet<>(metricsRegistry.getAllTemplates()),"metrics","templates");
}
