@Test public void testFetchResponseMetricsWithOnePartitionError(){
  subscriptions.assignFromUser(Utils.mkSet(tp0,tp1));
  subscriptions.seek(tp0,0);
  subscriptions.seek(tp1,0);
  Map<MetricName,KafkaMetric> allMetrics=metrics.metrics();
  KafkaMetric fetchSizeAverage=allMetrics.get(metrics.metricInstance(metricsRegistry.fetchSizeAvg));
  KafkaMetric recordsCountAverage=allMetrics.get(metrics.metricInstance(metricsRegistry.recordsPerRequestAvg));
  MemoryRecordsBuilder builder=MemoryRecords.builder(ByteBuffer.allocate(1024),CompressionType.NONE,TimestampType.CREATE_TIME,0L);
  for (int v=0; v < 3; v++)   builder.appendWithOffset(v,RecordBatch.NO_TIMESTAMP,"key".getBytes(),("value-" + v).getBytes());
  MemoryRecords records=builder.build();
  Map<TopicPartition,FetchResponse.PartitionData<MemoryRecords>> partitions=new HashMap<>();
  partitions.put(tp0,new FetchResponse.PartitionData<>(Errors.NONE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,records));
  partitions.put(tp1,new FetchResponse.PartitionData<>(Errors.OFFSET_OUT_OF_RANGE,100,FetchResponse.INVALID_LAST_STABLE_OFFSET,0L,null,MemoryRecords.EMPTY));
  assertEquals(1,fetcher.sendFetches());
  client.prepareResponse(new FetchResponse<>(Errors.NONE,new LinkedHashMap<>(partitions),0,INVALID_SESSION_ID));
  consumerClient.poll(time.timer(0));
  fetcher.fetchedRecords();
  int expectedBytes=0;
  for (  Record record : records.records())   expectedBytes+=record.sizeInBytes();
  assertEquals(expectedBytes,(Double)fetchSizeAverage.metricValue(),EPSILON);
  assertEquals(3,(Double)recordsCountAverage.metricValue(),EPSILON);
}
