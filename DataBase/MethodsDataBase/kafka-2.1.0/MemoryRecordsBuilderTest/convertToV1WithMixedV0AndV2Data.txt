@Test public void convertToV1WithMixedV0AndV2Data(){
  expectExceptionWithZStd(compressionType,RecordBatch.MAGIC_VALUE_V0);
  ByteBuffer buffer=ByteBuffer.allocate(512);
  MemoryRecordsBuilder builder=MemoryRecords.builder(buffer,RecordBatch.MAGIC_VALUE_V0,compressionType,TimestampType.NO_TIMESTAMP_TYPE,0L);
  builder.append(RecordBatch.NO_TIMESTAMP,"1".getBytes(),"a".getBytes());
  builder.close();
  builder=MemoryRecords.builder(buffer,RecordBatch.MAGIC_VALUE_V2,compressionType,TimestampType.CREATE_TIME,1L);
  builder.append(11L,"2".getBytes(),"b".getBytes());
  builder.append(12L,"3".getBytes(),"c".getBytes());
  builder.close();
  buffer.flip();
  ConvertedRecords<MemoryRecords> convertedRecords=MemoryRecords.readableRecords(buffer).downConvert(RecordBatch.MAGIC_VALUE_V1,0,time);
  MemoryRecords records=convertedRecords.records();
  verifyRecordsProcessingStats(convertedRecords.recordConversionStats(),3,2,records.sizeInBytes(),buffer.limit());
  List<? extends RecordBatch> batches=Utils.toList(records.batches().iterator());
  if (compressionType != CompressionType.NONE) {
    assertEquals(2,batches.size());
    assertEquals(RecordBatch.MAGIC_VALUE_V0,batches.get(0).magic());
    assertEquals(0,batches.get(0).baseOffset());
    assertEquals(RecordBatch.MAGIC_VALUE_V1,batches.get(1).magic());
    assertEquals(1,batches.get(1).baseOffset());
  }
 else {
    assertEquals(3,batches.size());
    assertEquals(RecordBatch.MAGIC_VALUE_V0,batches.get(0).magic());
    assertEquals(0,batches.get(0).baseOffset());
    assertEquals(RecordBatch.MAGIC_VALUE_V1,batches.get(1).magic());
    assertEquals(1,batches.get(1).baseOffset());
    assertEquals(RecordBatch.MAGIC_VALUE_V1,batches.get(2).magic());
    assertEquals(2,batches.get(2).baseOffset());
  }
  List<Record> logRecords=Utils.toList(records.records().iterator());
  assertEquals("1",utf8(logRecords.get(0).key()));
  assertEquals("2",utf8(logRecords.get(1).key()));
  assertEquals("3",utf8(logRecords.get(2).key()));
  convertedRecords=MemoryRecords.readableRecords(buffer).downConvert(RecordBatch.MAGIC_VALUE_V1,2L,time);
  records=convertedRecords.records();
  batches=Utils.toList(records.batches().iterator());
  logRecords=Utils.toList(records.records().iterator());
  if (compressionType != CompressionType.NONE) {
    assertEquals(2,batches.size());
    assertEquals(RecordBatch.MAGIC_VALUE_V0,batches.get(0).magic());
    assertEquals(0,batches.get(0).baseOffset());
    assertEquals(RecordBatch.MAGIC_VALUE_V1,batches.get(1).magic());
    assertEquals(1,batches.get(1).baseOffset());
    assertEquals("1",utf8(logRecords.get(0).key()));
    assertEquals("2",utf8(logRecords.get(1).key()));
    assertEquals("3",utf8(logRecords.get(2).key()));
    verifyRecordsProcessingStats(convertedRecords.recordConversionStats(),3,2,records.sizeInBytes(),buffer.limit());
  }
 else {
    assertEquals(2,batches.size());
    assertEquals(RecordBatch.MAGIC_VALUE_V0,batches.get(0).magic());
    assertEquals(0,batches.get(0).baseOffset());
    assertEquals(RecordBatch.MAGIC_VALUE_V1,batches.get(1).magic());
    assertEquals(2,batches.get(1).baseOffset());
    assertEquals("1",utf8(logRecords.get(0).key()));
    assertEquals("3",utf8(logRecords.get(1).key()));
    verifyRecordsProcessingStats(convertedRecords.recordConversionStats(),3,1,records.sizeInBytes(),buffer.limit());
  }
}
