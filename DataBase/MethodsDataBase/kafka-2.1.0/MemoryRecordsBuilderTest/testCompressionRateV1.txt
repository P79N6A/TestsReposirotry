@Test public void testCompressionRateV1(){
  expectExceptionWithZStd(compressionType,RecordBatch.MAGIC_VALUE_V1);
  ByteBuffer buffer=ByteBuffer.allocate(1024);
  buffer.position(bufferOffset);
  LegacyRecord[] records=new LegacyRecord[]{LegacyRecord.create(RecordBatch.MAGIC_VALUE_V1,0L,"a".getBytes(),"1".getBytes()),LegacyRecord.create(RecordBatch.MAGIC_VALUE_V1,1L,"b".getBytes(),"2".getBytes()),LegacyRecord.create(RecordBatch.MAGIC_VALUE_V1,2L,"c".getBytes(),"3".getBytes())};
  MemoryRecordsBuilder builder=new MemoryRecordsBuilder(buffer,RecordBatch.MAGIC_VALUE_V1,compressionType,TimestampType.CREATE_TIME,0L,0L,RecordBatch.NO_PRODUCER_ID,RecordBatch.NO_PRODUCER_EPOCH,RecordBatch.NO_SEQUENCE,false,false,RecordBatch.NO_PARTITION_LEADER_EPOCH,buffer.capacity());
  int uncompressedSize=0;
  for (  LegacyRecord record : records) {
    uncompressedSize+=record.sizeInBytes() + Records.LOG_OVERHEAD;
    builder.append(record);
  }
  MemoryRecords built=builder.build();
  if (compressionType == CompressionType.NONE) {
    assertEquals(1.0,builder.compressionRatio(),0.00001);
  }
 else {
    int compressedSize=built.sizeInBytes() - Records.LOG_OVERHEAD - LegacyRecord.RECORD_OVERHEAD_V1;
    double computedCompressionRate=(double)compressedSize / uncompressedSize;
    assertEquals(computedCompressionRate,builder.compressionRatio(),0.00001);
  }
}
