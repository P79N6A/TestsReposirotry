@Test public void shouldSupportFinalResultsForTimeWindows(){
  final String testId="-shouldSupportFinalResultsForTimeWindows";
  final String appId=getClass().getSimpleName().toLowerCase(Locale.getDefault()) + testId;
  final String input="input" + testId;
  final String outputSuppressed="output-suppressed" + testId;
  final String outputRaw="output-raw" + testId;
  cleanStateBeforeTest(CLUSTER,input,outputRaw,outputSuppressed);
  final StreamsBuilder builder=new StreamsBuilder();
  final KTable<Windowed<String>,Long> valueCounts=builder.stream(input,Consumed.with(STRING_SERDE,STRING_SERDE)).groupBy((  String k1,  String v1) -> k1,Grouped.with(STRING_SERDE,STRING_SERDE)).windowedBy(TimeWindows.of(ofMillis(scaledTime(2L))).grace(ofMillis(scaledTime(1L)))).count(Materialized.<String,Long,WindowStore<Bytes,byte[]>>as("counts").withCachingDisabled().withLoggingDisabled());
  valueCounts.suppress(untilWindowCloses(unbounded())).toStream().map((  final Windowed<String> k,  final Long v) -> new KeyValue<>(k.toString(),v)).to(outputSuppressed,Produced.with(STRING_SERDE,Serdes.Long()));
  valueCounts.toStream().map((  final Windowed<String> k,  final Long v) -> new KeyValue<>(k.toString(),v)).to(outputRaw,Produced.with(STRING_SERDE,Serdes.Long()));
  final Properties streamsConfig=getStreamsConfig(appId);
  final KafkaStreams driver=IntegrationTestUtils.getStartedStreams(streamsConfig,builder,true);
  try {
    produceSynchronously(input,asList(new KeyValueTimestamp<>("k1","v1",scaledTime(0L)),new KeyValueTimestamp<>("k1","v1",scaledTime(1L)),new KeyValueTimestamp<>("k1","v1",scaledTime(2L)),new KeyValueTimestamp<>("k1","v1",scaledTime(1L)),new KeyValueTimestamp<>("k1","v1",scaledTime(0L)),new KeyValueTimestamp<>("k1","v1",scaledTime(4L)),new KeyValueTimestamp<>("k1","v1",scaledTime(0L))));
    verifyOutput(outputRaw,asList(new KeyValueTimestamp<>(scaledWindowKey("k1",0L,2L),1L,scaledTime(0L)),new KeyValueTimestamp<>(scaledWindowKey("k1",0L,2L),2L,scaledTime(1L)),new KeyValueTimestamp<>(scaledWindowKey("k1",2L,4L),1L,scaledTime(2L)),new KeyValueTimestamp<>(scaledWindowKey("k1",0L,2L),3L,scaledTime(1L)),new KeyValueTimestamp<>(scaledWindowKey("k1",0L,2L),4L,scaledTime(0L)),new KeyValueTimestamp<>(scaledWindowKey("k1",4L,6L),1L,scaledTime(4L))));
    verifyOutput(outputSuppressed,singletonList(new KeyValueTimestamp<>(scaledWindowKey("k1",0L,2L),4L,scaledTime(0L))));
  }
  finally {
    driver.close();
    cleanStateAfterTest(CLUSTER,driver);
  }
}
