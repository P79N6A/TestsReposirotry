@Test public void testBuffersGarbageCollected() throws Exception {
  Runtime runtime=Runtime.getRuntime();
  long maxHeap=runtime.maxMemory();
  long maxPool=maxHeap / 2;
  long maxSingleAllocation=maxPool / 10;
  Assert.assertTrue(maxSingleAllocation < Integer.MAX_VALUE / 2);
  GarbageCollectedMemoryPool pool=new GarbageCollectedMemoryPool(maxPool,(int)maxSingleAllocation,false,null);
  int timeoutSeconds=30;
  long giveUp=System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(timeoutSeconds);
  boolean success=false;
  int buffersAllocated=0;
  while (System.currentTimeMillis() < giveUp) {
    ByteBuffer buffer=pool.tryAllocate((int)maxSingleAllocation);
    if (buffer == null) {
      System.gc();
      Thread.sleep(10);
      continue;
    }
    buffersAllocated++;
    if (buffersAllocated >= 30) {
      success=true;
      break;
    }
  }
  Assert.assertTrue("failed to allocate 30 buffers in " + timeoutSeconds + " seconds."+ " buffers allocated: "+ buffersAllocated+ " heap "+ Utils.formatBytes(maxHeap)+ " pool "+ Utils.formatBytes(maxPool)+ " single allocation "+ Utils.formatBytes(maxSingleAllocation),success);
}
