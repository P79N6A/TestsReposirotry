@Test public void sendExpiry(){
  int requestTimeoutMs=10;
  final AtomicBoolean isReady=new AtomicBoolean();
  final AtomicBoolean disconnected=new AtomicBoolean();
  client=new MockClient(time){
    @Override public boolean ready(    Node node,    long now){
      if (isReady.get())       return super.ready(node,now);
 else       return false;
    }
    @Override public boolean connectionFailed(    Node node){
      return disconnected.get();
    }
  }
;
  consumerClient=new ConsumerNetworkClient(new LogContext(),client,metadata,time,100,requestTimeoutMs,Integer.MAX_VALUE);
  RequestFuture<ClientResponse> future1=consumerClient.send(node,heartbeat());
  assertEquals(1,consumerClient.pendingRequestCount());
  assertEquals(1,consumerClient.pendingRequestCount(node));
  assertFalse(future1.isDone());
  time.sleep(requestTimeoutMs + 1);
  RequestFuture<ClientResponse> future2=consumerClient.send(node,heartbeat());
  assertEquals(2,consumerClient.pendingRequestCount());
  assertEquals(2,consumerClient.pendingRequestCount(node));
  assertFalse(future2.isDone());
  consumerClient.poll(time.timer(0));
  assertTrue(future1.isDone());
  assertFalse(future1.succeeded());
  assertEquals(1,consumerClient.pendingRequestCount());
  assertEquals(1,consumerClient.pendingRequestCount(node));
  assertFalse(future2.isDone());
  isReady.set(true);
  client.prepareResponse(heartbeatResponse(Errors.NONE));
  consumerClient.poll(future2);
  ClientResponse clientResponse=future2.value();
  HeartbeatResponse response=(HeartbeatResponse)clientResponse.responseBody();
  assertEquals(Errors.NONE,response.error());
  isReady.set(false);
  RequestFuture<ClientResponse> future3=consumerClient.send(node,heartbeat());
  assertEquals(1,consumerClient.pendingRequestCount());
  assertEquals(1,consumerClient.pendingRequestCount(node));
  disconnected.set(true);
  consumerClient.poll(time.timer(0));
  assertTrue(future3.isDone());
  assertFalse(future3.succeeded());
  assertEquals(0,consumerClient.pendingRequestCount());
  assertEquals(0,consumerClient.pendingRequestCount(node));
}
