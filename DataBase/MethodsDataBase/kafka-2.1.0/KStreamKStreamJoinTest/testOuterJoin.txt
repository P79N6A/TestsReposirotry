@Test public void testOuterJoin(){
  final StreamsBuilder builder=new StreamsBuilder();
  final int[] expectedKeys=new int[]{0,1,2,3};
  final KStream<Integer,String> stream1;
  final KStream<Integer,String> stream2;
  final KStream<Integer,String> joined;
  final MockProcessorSupplier<Integer,String> supplier=new MockProcessorSupplier<>();
  stream1=builder.stream(topic1,consumed);
  stream2=builder.stream(topic2,consumed);
  joined=stream1.outerJoin(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.of(ofMillis(100)),Joined.with(Serdes.Integer(),Serdes.String(),Serdes.String()));
  joined.process(supplier);
  final Collection<Set<String>> copartitionGroups=TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();
  assertEquals(1,copartitionGroups.size());
  assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next());
  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props,0L)){
    final MockProcessor<Integer,String> processor=supplier.theCapturedProcessor();
    for (int i=0; i < 2; i++) {
      driver.pipeInput(recordFactory.create(topic1,expectedKeys[i],"X" + expectedKeys[i]));
    }
    processor.checkAndClearProcessResult("0:X0+null","1:X1+null");
    for (int i=0; i < 2; i++) {
      driver.pipeInput(recordFactory.create(topic2,expectedKeys[i],"Y" + expectedKeys[i]));
    }
    processor.checkAndClearProcessResult("0:X0+Y0","1:X1+Y1");
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic1,expectedKey,"X" + expectedKey));
    }
    processor.checkAndClearProcessResult("0:X0+Y0","1:X1+Y1","2:X2+null","3:X3+null");
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic2,expectedKey,"YY" + expectedKey));
    }
    processor.checkAndClearProcessResult("0:X0+YY0","0:X0+YY0","1:X1+YY1","1:X1+YY1","2:X2+YY2","3:X3+YY3");
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic1,expectedKey,"XX" + expectedKey));
    }
    processor.checkAndClearProcessResult("0:XX0+Y0","0:XX0+YY0","1:XX1+Y1","1:XX1+YY1","2:XX2+YY2","3:XX3+YY3");
    for (int i=0; i < 2; i++) {
      driver.pipeInput(recordFactory.create(topic2,expectedKeys[i],"YYY" + expectedKeys[i]));
    }
    processor.checkAndClearProcessResult("0:X0+YYY0","0:X0+YYY0","0:XX0+YYY0","1:X1+YYY1","1:X1+YYY1","1:XX1+YYY1");
  }
 }
