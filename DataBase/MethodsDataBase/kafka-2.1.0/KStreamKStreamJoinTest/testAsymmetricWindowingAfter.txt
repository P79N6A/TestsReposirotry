@Test public void testAsymmetricWindowingAfter(){
  long time=1000L;
  final StreamsBuilder builder=new StreamsBuilder();
  final int[] expectedKeys=new int[]{0,1,2,3};
  final KStream<Integer,String> stream1;
  final KStream<Integer,String> stream2;
  final KStream<Integer,String> joined;
  final MockProcessorSupplier<Integer,String> supplier=new MockProcessorSupplier<>();
  stream1=builder.stream(topic1,consumed);
  stream2=builder.stream(topic2,consumed);
  joined=stream1.join(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.of(ofMillis(0)).after(ofMillis(100)),Joined.with(Serdes.Integer(),Serdes.String(),Serdes.String()));
  joined.process(supplier);
  final Collection<Set<String>> copartitionGroups=TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();
  assertEquals(1,copartitionGroups.size());
  assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next());
  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props,time)){
    final MockProcessor<Integer,String> processor=supplier.theCapturedProcessor();
    for (int i=0; i < expectedKeys.length; i++) {
      driver.pipeInput(recordFactory.create(topic1,expectedKeys[i],"X" + expectedKeys[i],time + i));
    }
    processor.checkAndClearProcessResult();
    time=1000L - 1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic2,expectedKey,"YY" + expectedKey,time));
    }
    processor.checkAndClearProcessResult();
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic2,expectedKey,"YY" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:X0+YY0");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic2,expectedKey,"YY" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:X0+YY0","1:X1+YY1");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic2,expectedKey,"YY" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:X0+YY0","1:X1+YY1","2:X2+YY2");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic2,expectedKey,"YY" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:X0+YY0","1:X1+YY1","2:X2+YY2","3:X3+YY3");
    time=1000 + 100L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic2,expectedKey,"YY" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:X0+YY0","1:X1+YY1","2:X2+YY2","3:X3+YY3");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic2,expectedKey,"YY" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("1:X1+YY1","2:X2+YY2","3:X3+YY3");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic2,expectedKey,"YY" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("2:X2+YY2","3:X3+YY3");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic2,expectedKey,"YY" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("3:X3+YY3");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic2,expectedKey,"YY" + expectedKey,time));
    }
    processor.checkAndClearProcessResult();
  }
 }
