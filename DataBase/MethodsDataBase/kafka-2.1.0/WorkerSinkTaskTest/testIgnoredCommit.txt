@Test public void testIgnoredCommit() throws Exception {
  createTask(initialState);
  expectInitializeTask();
  expectPollInitialAssignment();
  expectConsumerPoll(1);
  expectConversionAndTransformation(1);
  sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());
  EasyMock.expectLastCall();
  final Map<TopicPartition,OffsetAndMetadata> workerStartingOffsets=new HashMap<>();
  workerStartingOffsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET));
  workerStartingOffsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET));
  final Map<TopicPartition,OffsetAndMetadata> workerCurrentOffsets=new HashMap<>();
  workerCurrentOffsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET + 1));
  workerCurrentOffsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET));
  sinkTask.preCommit(workerCurrentOffsets);
  EasyMock.expectLastCall().andReturn(workerStartingOffsets);
  expectConsumerPoll(0);
  sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());
  EasyMock.expectLastCall();
  PowerMock.replayAll();
  workerTask.initialize(TASK_CONFIG);
  workerTask.initializeAndStart();
  workerTask.iteration();
  assertEquals(workerStartingOffsets,Whitebox.<Map<TopicPartition,OffsetAndMetadata>>getInternalState(workerTask,"currentOffsets"));
  assertEquals(workerStartingOffsets,Whitebox.<Map<TopicPartition,OffsetAndMetadata>>getInternalState(workerTask,"lastCommittedOffsets"));
  workerTask.iteration();
  sinkTaskContext.getValue().requestCommit();
  workerTask.iteration();
  PowerMock.verifyAll();
}
