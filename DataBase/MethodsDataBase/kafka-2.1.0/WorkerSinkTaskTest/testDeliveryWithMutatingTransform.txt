@Test public void testDeliveryWithMutatingTransform() throws Exception {
  createTask(initialState);
  expectInitializeTask();
  expectPollInitialAssignment();
  expectConsumerPoll(1);
  expectConversionAndTransformation(1,"newtopic_");
  sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());
  EasyMock.expectLastCall();
  final Map<TopicPartition,OffsetAndMetadata> offsets=new HashMap<>();
  offsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET + 1));
  offsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET));
  sinkTask.preCommit(offsets);
  EasyMock.expectLastCall().andReturn(offsets);
  final Capture<OffsetCommitCallback> callback=EasyMock.newCapture();
  consumer.commitAsync(EasyMock.eq(offsets),EasyMock.capture(callback));
  EasyMock.expectLastCall().andAnswer(new IAnswer<Void>(){
    @Override public Void answer() throws Throwable {
      callback.getValue().onComplete(offsets,null);
      return null;
    }
  }
);
  expectConsumerPoll(0);
  sinkTask.put(Collections.<SinkRecord>emptyList());
  EasyMock.expectLastCall();
  PowerMock.replayAll();
  workerTask.initialize(TASK_CONFIG);
  workerTask.initializeAndStart();
  workerTask.iteration();
  workerTask.iteration();
  sinkTaskContext.getValue().requestCommit();
  assertTrue(sinkTaskContext.getValue().isCommitRequested());
  assertNotEquals(offsets,Whitebox.<Map<TopicPartition,OffsetAndMetadata>>getInternalState(workerTask,"lastCommittedOffsets"));
  workerTask.iteration();
  assertFalse(sinkTaskContext.getValue().isCommitRequested());
  assertEquals(offsets,Whitebox.<Map<TopicPartition,OffsetAndMetadata>>getInternalState(workerTask,"lastCommittedOffsets"));
  assertEquals(0,workerTask.commitFailures());
  assertEquals(1.0,metrics.currentMetricValueAsDouble(workerTask.taskMetricsGroup().metricGroup(),"batch-size-max"),0.0001);
  PowerMock.verifyAll();
}
