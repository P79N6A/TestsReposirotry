@Test public void testLongRunningCommitWithoutTimeout() throws Exception {
  createTask(initialState);
  expectInitializeTask();
  expectPollInitialAssignment();
  expectConsumerPoll(1);
  expectConversionAndTransformation(1);
  sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());
  EasyMock.expectLastCall();
  final Map<TopicPartition,OffsetAndMetadata> workerStartingOffsets=new HashMap<>();
  workerStartingOffsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET));
  workerStartingOffsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET));
  final Map<TopicPartition,OffsetAndMetadata> workerCurrentOffsets=new HashMap<>();
  workerCurrentOffsets.put(TOPIC_PARTITION,new OffsetAndMetadata(FIRST_OFFSET + 1));
  workerCurrentOffsets.put(TOPIC_PARTITION2,new OffsetAndMetadata(FIRST_OFFSET));
  sinkTask.preCommit(workerCurrentOffsets);
  EasyMock.expectLastCall().andReturn(workerCurrentOffsets);
  final ExecutorService executor=Executors.newSingleThreadExecutor();
  final CountDownLatch latch=new CountDownLatch(1);
  consumer.commitAsync(EasyMock.eq(workerCurrentOffsets),EasyMock.<OffsetCommitCallback>anyObject());
  EasyMock.expectLastCall().andAnswer(new IAnswer<Void>(){
    @SuppressWarnings("unchecked") @Override public Void answer() throws Throwable {
      final Object[] args=EasyMock.getCurrentArguments();
      final Map<TopicPartition,OffsetAndMetadata> offsets=(Map<TopicPartition,OffsetAndMetadata>)args[0];
      final OffsetCommitCallback callback=(OffsetCommitCallback)args[1];
      executor.execute(new Runnable(){
        @Override public void run(){
          try {
            latch.await();
          }
 catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
          }
          callback.onComplete(offsets,null);
        }
      }
);
      return null;
    }
  }
);
  expectConsumerPoll(0);
  sinkTask.put(EasyMock.<Collection<SinkRecord>>anyObject());
  EasyMock.expectLastCall();
  PowerMock.replayAll();
  workerTask.initialize(TASK_CONFIG);
  workerTask.initializeAndStart();
  workerTask.iteration();
  assertEquals(workerStartingOffsets,Whitebox.<Map<TopicPartition,OffsetAndMetadata>>getInternalState(workerTask,"currentOffsets"));
  assertEquals(workerStartingOffsets,Whitebox.<Map<TopicPartition,OffsetAndMetadata>>getInternalState(workerTask,"lastCommittedOffsets"));
  time.sleep(WorkerConfig.OFFSET_COMMIT_TIMEOUT_MS_DEFAULT);
  workerTask.iteration();
  sinkTaskContext.getValue().requestCommit();
  workerTask.iteration();
  assertTrue("Expected worker to be in the process of committing offsets",workerTask.isCommitting());
  latch.countDown();
  executor.shutdown();
  executor.awaitTermination(30,TimeUnit.SECONDS);
  assertEquals(workerCurrentOffsets,Whitebox.<Map<TopicPartition,OffsetAndMetadata>>getInternalState(workerTask,"currentOffsets"));
  assertEquals(workerCurrentOffsets,Whitebox.<Map<TopicPartition,OffsetAndMetadata>>getInternalState(workerTask,"lastCommittedOffsets"));
  PowerMock.verifyAll();
}
