@Test public void shouldCreateKeyValueStoreWithTheProvidedInnerStore(){
  final KeyValueBytesStoreSupplier supplier=EasyMock.createNiceMock(KeyValueBytesStoreSupplier.class);
  final InMemoryKeyValueStore<Bytes,byte[]> store=new InMemoryKeyValueStore<>("name",Serdes.Bytes(),Serdes.ByteArray());
  EasyMock.expect(supplier.name()).andReturn("name").anyTimes();
  EasyMock.expect(supplier.get()).andReturn(store);
  EasyMock.replay(supplier);
  final MaterializedInternal<String,Integer,KeyValueStore<Bytes,byte[]>> materialized=new MaterializedInternal<>(Materialized.as(supplier));
  materialized.generateStoreNameIfNeeded(nameProvider,storePrefix);
  final KeyValueStoreMaterializer<String,Integer> materializer=new KeyValueStoreMaterializer<>(materialized);
  final StoreBuilder<KeyValueStore<String,Integer>> builder=materializer.materialize();
  final KeyValueStore<String,Integer> built=builder.build();
  final StateStore inner=((WrappedStateStore)built).inner();
  assertThat(inner,CoreMatchers.<StateStore>equalTo(store));
}
