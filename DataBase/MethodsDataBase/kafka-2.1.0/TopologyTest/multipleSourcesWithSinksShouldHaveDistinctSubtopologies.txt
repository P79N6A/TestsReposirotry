@Test public void multipleSourcesWithSinksShouldHaveDistinctSubtopologies(){
  final TopologyDescription.Source expectedSourceNode1=addSource("source1","topic1");
  final TopologyDescription.Sink expectedSinkNode1=addSink("sink1","sinkTopic1",expectedSourceNode1);
  final TopologyDescription.Source expectedSourceNode2=addSource("source2","topic2");
  final TopologyDescription.Sink expectedSinkNode2=addSink("sink2","sinkTopic2",expectedSourceNode2);
  final TopologyDescription.Source expectedSourceNode3=addSource("source3","topic3");
  final TopologyDescription.Sink expectedSinkNode3=addSink("sink3","sinkTopic3",expectedSourceNode3);
  final Set<TopologyDescription.Node> allNodes1=new HashSet<>();
  allNodes1.add(expectedSourceNode1);
  allNodes1.add(expectedSinkNode1);
  expectedDescription.addSubtopology(new InternalTopologyBuilder.Subtopology(0,allNodes1));
  final Set<TopologyDescription.Node> allNodes2=new HashSet<>();
  allNodes2.add(expectedSourceNode2);
  allNodes2.add(expectedSinkNode2);
  expectedDescription.addSubtopology(new InternalTopologyBuilder.Subtopology(1,allNodes2));
  final Set<TopologyDescription.Node> allNodes3=new HashSet<>();
  allNodes3.add(expectedSourceNode3);
  allNodes3.add(expectedSinkNode3);
  expectedDescription.addSubtopology(new InternalTopologyBuilder.Subtopology(2,allNodes3));
  assertThat(topology.describe(),equalTo(expectedDescription));
}
