@Test public void processorsWithSharedStateShouldHaveSameSubtopology(){
  final String[] store1=new String[]{"store1"};
  final String[] store2=new String[]{"store2"};
  final String[] bothStores=new String[]{store1[0],store2[0]};
  final TopologyDescription.Source expectedSourceNode1=addSource("source","topic");
  final TopologyDescription.Processor expectedProcessorNode1=addProcessorWithNewStore("processor1",store1,expectedSourceNode1);
  final TopologyDescription.Source expectedSourceNode2=addSource("source2","topic2");
  final TopologyDescription.Processor expectedProcessorNode2=addProcessorWithNewStore("processor2",store2,expectedSourceNode2);
  final TopologyDescription.Source expectedSourceNode3=addSource("source3","topic3");
  final TopologyDescription.Processor expectedProcessorNode3=addProcessorWithExistingStore("processor3",bothStores,expectedSourceNode3);
  final Set<TopologyDescription.Node> allNodes=new HashSet<>();
  allNodes.add(expectedSourceNode1);
  allNodes.add(expectedProcessorNode1);
  allNodes.add(expectedSourceNode2);
  allNodes.add(expectedProcessorNode2);
  allNodes.add(expectedSourceNode3);
  allNodes.add(expectedProcessorNode3);
  expectedDescription.addSubtopology(new InternalTopologyBuilder.Subtopology(0,allNodes));
  assertThat(topology.describe(),equalTo(expectedDescription));
}
