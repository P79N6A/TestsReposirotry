/** 
 * Tests that a connect and disconnect in a single poll invocation results in the channel id being in `disconnected`, but not `connected`.
 */
@Test public void testConnectDisconnectDuringInSinglePoll() throws Exception {
  KafkaChannel kafkaChannel=mock(KafkaChannel.class);
  when(kafkaChannel.id()).thenReturn("1");
  when(kafkaChannel.socketDescription()).thenReturn("");
  when(kafkaChannel.state()).thenReturn(ChannelState.NOT_CONNECTED);
  when(kafkaChannel.finishConnect()).thenReturn(true);
  when(kafkaChannel.isConnected()).thenReturn(true);
  when(kafkaChannel.ready()).thenReturn(false);
  doThrow(new IOException()).when(kafkaChannel).prepare();
  SelectionKey selectionKey=mock(SelectionKey.class);
  when(kafkaChannel.selectionKey()).thenReturn(selectionKey);
  when(selectionKey.channel()).thenReturn(SocketChannel.open());
  when(selectionKey.readyOps()).thenReturn(SelectionKey.OP_CONNECT);
  selectionKey.attach(kafkaChannel);
  Set<SelectionKey> selectionKeys=Utils.mkSet(selectionKey);
  selector.pollSelectionKeys(selectionKeys,false,System.nanoTime());
  assertFalse(selector.connected().contains(kafkaChannel.id()));
  assertTrue(selector.disconnected().containsKey(kafkaChannel.id()));
  assertNull(selectionKey.attachment());
  verify(kafkaChannel,atLeastOnce()).ready();
  verify(kafkaChannel).disconnect();
  verify(kafkaChannel).close();
  verify(selectionKey).cancel();
}
