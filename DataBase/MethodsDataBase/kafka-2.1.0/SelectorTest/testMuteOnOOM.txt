@Test public void testMuteOnOOM() throws Exception {
  selector.close();
  MemoryPool pool=new SimpleMemoryPool(900,900,false,null);
  selector=new Selector(NetworkReceive.UNLIMITED,5000,metrics,time,"MetricGroup",new HashMap<String,String>(),true,false,channelBuilder,pool,new LogContext());
  try (ServerSocketChannel ss=ServerSocketChannel.open()){
    ss.bind(new InetSocketAddress(0));
    InetSocketAddress serverAddress=(InetSocketAddress)ss.getLocalAddress();
    Thread sender1=createSender(serverAddress,randomPayload(900));
    Thread sender2=createSender(serverAddress,randomPayload(900));
    sender1.start();
    sender2.start();
    sender1.join(5000);
    sender2.join(5000);
    SocketChannel channelX=ss.accept();
    channelX.configureBlocking(false);
    SocketChannel channelY=ss.accept();
    channelY.configureBlocking(false);
    selector.register("clientX",channelX);
    selector.register("clientY",channelY);
    List<NetworkReceive> completed=Collections.emptyList();
    long deadline=System.currentTimeMillis() + 5000;
    while (System.currentTimeMillis() < deadline && completed.isEmpty()) {
      selector.poll(1000);
      completed=selector.completedReceives();
    }
    assertEquals("could not read a single request within timeout",1,completed.size());
    NetworkReceive firstReceive=completed.get(0);
    assertEquals(0,pool.availableMemory());
    assertTrue(selector.isOutOfMemory());
    selector.poll(10);
    assertTrue(selector.completedReceives().isEmpty());
    assertEquals(0,pool.availableMemory());
    assertTrue(selector.isOutOfMemory());
    firstReceive.close();
    assertEquals(900,pool.availableMemory());
    completed=Collections.emptyList();
    deadline=System.currentTimeMillis() + 5000;
    while (System.currentTimeMillis() < deadline && completed.isEmpty()) {
      selector.poll(1000);
      completed=selector.completedReceives();
    }
    assertEquals("could not read a single request within timeout",1,selector.completedReceives().size());
    assertEquals(0,pool.availableMemory());
    assertFalse(selector.isOutOfMemory());
  }
 }
