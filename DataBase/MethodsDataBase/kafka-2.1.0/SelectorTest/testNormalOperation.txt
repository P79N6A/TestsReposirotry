/** 
 * Send multiple requests to several connections in parallel. Validate that responses are received in the order that requests were sent.
 */
@Test public void testNormalOperation() throws Exception {
  int conns=5;
  int reqs=500;
  InetSocketAddress addr=new InetSocketAddress("localhost",server.port);
  for (int i=0; i < conns; i++)   connect(Integer.toString(i),addr);
  Map<String,Integer> requests=new HashMap<>();
  Map<String,Integer> responses=new HashMap<>();
  int responseCount=0;
  for (int i=0; i < conns; i++) {
    String node=Integer.toString(i);
    selector.send(createSend(node,node + "-0"));
  }
  while (responseCount < conns * reqs) {
    selector.poll(0L);
    assertEquals("No disconnects should have occurred.",0,selector.disconnected().size());
    for (    NetworkReceive receive : selector.completedReceives()) {
      String[] pieces=asString(receive).split("-");
      assertEquals("Should be in the form 'conn-counter'",2,pieces.length);
      assertEquals("Check the source",receive.source(),pieces[0]);
      assertEquals("Check that the receive has kindly been rewound",0,receive.payload().position());
      if (responses.containsKey(receive.source())) {
        assertEquals("Check the request counter",(int)responses.get(receive.source()),Integer.parseInt(pieces[1]));
        responses.put(receive.source(),responses.get(receive.source()) + 1);
      }
 else {
        assertEquals("Check the request counter",0,Integer.parseInt(pieces[1]));
        responses.put(receive.source(),1);
      }
      responseCount++;
    }
    for (    Send send : selector.completedSends()) {
      String dest=send.destination();
      if (requests.containsKey(dest))       requests.put(dest,requests.get(dest) + 1);
 else       requests.put(dest,1);
      if (requests.get(dest) < reqs)       selector.send(createSend(dest,dest + "-" + requests.get(dest)));
    }
  }
}
