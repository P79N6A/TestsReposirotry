@Test public void testJoin(){
  final StreamsBuilder builder=new StreamsBuilder();
  final int[] expectedKeys=new int[]{0,1,2,3};
  final KTable<Integer,String> table1;
  final KTable<Integer,String> table2;
  final KTable<Integer,String> joined;
  final MockProcessorSupplier<Integer,String> supplier;
  supplier=new MockProcessorSupplier<>();
  table1=builder.table(topic1,consumed);
  table2=builder.table(topic2,consumed);
  joined=table1.outerJoin(table2,MockValueJoiner.TOSTRING_JOINER);
  joined.toStream().process(supplier);
  final Collection<Set<String>> copartitionGroups=TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();
  assertEquals(1,copartitionGroups.size());
  assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next());
  final KTableValueGetterSupplier<Integer,String> getterSupplier=((KTableImpl<Integer,String,String>)joined).valueGetterSupplier();
  driver.setUp(builder,stateDir);
  final MockProcessor<Integer,String> processor=supplier.theCapturedProcessor();
  final KTableValueGetter<Integer,String> getter=getterSupplier.get();
  getter.init(driver.context());
  for (int i=0; i < 2; i++) {
    driver.process(topic1,expectedKeys[i],"X" + expectedKeys[i]);
  }
  driver.process(topic1,null,"SomeVal");
  driver.flushState();
  processor.checkAndClearProcessResult("0:X0+null","1:X1+null");
  checkJoinedValues(getter,kv(0,"X0+null"),kv(1,"X1+null"),kv(2,null),kv(3,null));
  for (int i=0; i < 2; i++) {
    driver.process(topic2,expectedKeys[i],"Y" + expectedKeys[i]);
  }
  driver.process(topic2,null,"AnotherVal");
  driver.flushState();
  processor.checkAndClearProcessResult("0:X0+Y0","1:X1+Y1");
  checkJoinedValues(getter,kv(0,"X0+Y0"),kv(1,"X1+Y1"),kv(2,null),kv(3,null));
  for (  final int expectedKey : expectedKeys) {
    driver.process(topic1,expectedKey,"X" + expectedKey);
  }
  driver.flushState();
  processor.checkAndClearProcessResult("0:X0+Y0","1:X1+Y1","2:X2+null","3:X3+null");
  checkJoinedValues(getter,kv(0,"X0+Y0"),kv(1,"X1+Y1"),kv(2,"X2+null"),kv(3,"X3+null"));
  for (  final int expectedKey : expectedKeys) {
    driver.process(topic2,expectedKey,"YY" + expectedKey);
  }
  driver.flushState();
  processor.checkAndClearProcessResult("0:X0+YY0","1:X1+YY1","2:X2+YY2","3:X3+YY3");
  checkJoinedValues(getter,kv(0,"X0+YY0"),kv(1,"X1+YY1"),kv(2,"X2+YY2"),kv(3,"X3+YY3"));
  for (  final int expectedKey : expectedKeys) {
    driver.process(topic1,expectedKey,"X" + expectedKey);
  }
  driver.flushState();
  processor.checkAndClearProcessResult("0:X0+YY0","1:X1+YY1","2:X2+YY2","3:X3+YY3");
  checkJoinedValues(getter,kv(0,"X0+YY0"),kv(1,"X1+YY1"),kv(2,"X2+YY2"),kv(3,"X3+YY3"));
  for (int i=0; i < 2; i++) {
    driver.process(topic2,expectedKeys[i],null);
  }
  driver.flushState();
  processor.checkAndClearProcessResult("0:X0+null","1:X1+null");
  checkJoinedValues(getter,kv(0,"X0+null"),kv(1,"X1+null"),kv(2,"X2+YY2"),kv(3,"X3+YY3"));
  for (  final int expectedKey : expectedKeys) {
    driver.process(topic1,expectedKey,"XX" + expectedKey);
  }
  driver.flushState();
  processor.checkAndClearProcessResult("0:XX0+null","1:XX1+null","2:XX2+YY2","3:XX3+YY3");
  checkJoinedValues(getter,kv(0,"XX0+null"),kv(1,"XX1+null"),kv(2,"XX2+YY2"),kv(3,"XX3+YY3"));
  for (int i=1; i < 3; i++) {
    driver.process(topic1,expectedKeys[i],null);
  }
  driver.flushState();
  processor.checkAndClearProcessResult("1:null","2:null+YY2");
  checkJoinedValues(getter,kv(0,"XX0+null"),kv(1,null),kv(2,"null+YY2"),kv(3,"XX3+YY3"));
}
