@Test public void cancelBeforeStopping() throws Exception {
  ConnectorTaskId taskId=new ConnectorTaskId("foo",0);
  WorkerTask workerTask=partialMockBuilder(WorkerTask.class).withConstructor(ConnectorTaskId.class,TaskStatus.Listener.class,TargetState.class,ClassLoader.class,ConnectMetrics.class,RetryWithToleranceOperator.class).withArgs(taskId,statusListener,TargetState.STARTED,loader,metrics,retryWithToleranceOperator).addMockedMethod("initialize").addMockedMethod("execute").addMockedMethod("close").createStrictMock();
  final CountDownLatch stopped=new CountDownLatch(1);
  final Thread thread=new Thread(){
    @Override public void run(){
      try {
        stopped.await();
      }
 catch (      Exception e) {
      }
    }
  }
;
  workerTask.initialize(TASK_CONFIG);
  EasyMock.expectLastCall();
  workerTask.execute();
  expectLastCall().andAnswer(new IAnswer<Void>(){
    @Override public Void answer() throws Throwable {
      thread.start();
      return null;
    }
  }
);
  statusListener.onStartup(taskId);
  expectLastCall();
  workerTask.close();
  expectLastCall();
  workerTask.releaseResources();
  EasyMock.expectLastCall();
  replay(workerTask);
  workerTask.initialize(TASK_CONFIG);
  workerTask.run();
  workerTask.stop();
  workerTask.cancel();
  stopped.countDown();
  thread.join();
  verify(workerTask);
}
