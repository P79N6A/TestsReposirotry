@Test public void testAssignWithStandbyReplicas(){
  final Map<String,Object> props=configProps();
  props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG,"1");
  final StreamsConfig streamsConfig=new StreamsConfig(props);
  builder.addSource(null,"source1",null,null,null,"topic1");
  builder.addSource(null,"source2",null,null,null,"topic2");
  builder.addProcessor("processor",new MockProcessorSupplier(),"source1","source2");
  final List<String> topics=Utils.mkList("topic1","topic2");
  final Set<TaskId> allTasks=Utils.mkSet(task0,task1,task2);
  final Set<TaskId> prevTasks00=Utils.mkSet(task0);
  final Set<TaskId> prevTasks01=Utils.mkSet(task1);
  final Set<TaskId> prevTasks02=Utils.mkSet(task2);
  final Set<TaskId> standbyTasks01=Utils.mkSet(task1);
  final Set<TaskId> standbyTasks02=Utils.mkSet(task2);
  final Set<TaskId> standbyTasks00=Utils.mkSet(task0);
  final UUID uuid1=UUID.randomUUID();
  final UUID uuid2=UUID.randomUUID();
  mockTaskManager(prevTasks00,standbyTasks01,uuid1,builder);
  configurePartitionAssignor(Collections.<String,Object>singletonMap(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG,1));
  partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig,mockClientSupplier.restoreConsumer));
  final Map<String,PartitionAssignor.Subscription> subscriptions=new HashMap<>();
  subscriptions.put("consumer10",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid1,prevTasks00,standbyTasks01,userEndPoint).encode()));
  subscriptions.put("consumer11",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid1,prevTasks01,standbyTasks02,userEndPoint).encode()));
  subscriptions.put("consumer20",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid2,prevTasks02,standbyTasks00,"any:9097").encode()));
  final Map<String,PartitionAssignor.Assignment> assignments=partitionAssignor.assign(metadata,subscriptions);
  final AssignmentInfo info10=checkAssignment(allTopics,assignments.get("consumer10"));
  final Set<TaskId> allActiveTasks=new HashSet<>(info10.activeTasks());
  final Set<TaskId> allStandbyTasks=new HashSet<>(info10.standbyTasks().keySet());
  final AssignmentInfo info11=checkAssignment(allTopics,assignments.get("consumer11"));
  allActiveTasks.addAll(info11.activeTasks());
  allStandbyTasks.addAll(info11.standbyTasks().keySet());
  assertNotEquals("same processId has same set of standby tasks",info11.standbyTasks().keySet(),info10.standbyTasks().keySet());
  assertEquals(Utils.mkSet(task0,task1),new HashSet<>(allActiveTasks));
  assertEquals(Utils.mkSet(task2),new HashSet<>(allStandbyTasks));
  final AssignmentInfo info20=checkAssignment(allTopics,assignments.get("consumer20"));
  allActiveTasks.addAll(info20.activeTasks());
  allStandbyTasks.addAll(info20.standbyTasks().keySet());
  assertEquals(3,allActiveTasks.size());
  assertEquals(allTasks,allActiveTasks);
  assertEquals(3,allStandbyTasks.size());
  assertEquals(allTasks,allStandbyTasks);
}
