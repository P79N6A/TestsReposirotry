@Test public void testSubscription(){
  builder.addSource(null,"source1",null,null,null,"topic1");
  builder.addSource(null,"source2",null,null,null,"topic2");
  builder.addProcessor("processor",new MockProcessorSupplier(),"source1","source2");
  final Set<TaskId> prevTasks=Utils.mkSet(new TaskId(0,1),new TaskId(1,1),new TaskId(2,1));
  final Set<TaskId> cachedTasks=Utils.mkSet(new TaskId(0,1),new TaskId(1,1),new TaskId(2,1),new TaskId(0,2),new TaskId(1,2),new TaskId(2,2));
  final UUID processId=UUID.randomUUID();
  mockTaskManager(prevTasks,cachedTasks,processId,builder);
  configurePartitionAssignor(Collections.<String,Object>emptyMap());
  final PartitionAssignor.Subscription subscription=partitionAssignor.subscription(Utils.mkSet("topic1","topic2"));
  Collections.sort(subscription.topics());
  assertEquals(Utils.mkList("topic1","topic2"),subscription.topics());
  final Set<TaskId> standbyTasks=new HashSet<>(cachedTasks);
  standbyTasks.removeAll(prevTasks);
  final SubscriptionInfo info=new SubscriptionInfo(processId,prevTasks,standbyTasks,null);
  assertEquals(info.encode(),subscription.userData());
}
