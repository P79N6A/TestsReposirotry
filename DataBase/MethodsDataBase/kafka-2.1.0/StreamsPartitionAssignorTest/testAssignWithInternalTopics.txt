@Test public void testAssignWithInternalTopics(){
  builder.setApplicationId(applicationId);
  builder.addInternalTopic("topicX");
  builder.addSource(null,"source1",null,null,null,"topic1");
  builder.addProcessor("processor1",new MockProcessorSupplier(),"source1");
  builder.addSink("sink1","topicX",null,null,null,"processor1");
  builder.addSource(null,"source2",null,null,null,"topicX");
  builder.addProcessor("processor2",new MockProcessorSupplier(),"source2");
  final List<String> topics=Utils.mkList("topic1",applicationId + "-topicX");
  final Set<TaskId> allTasks=Utils.mkSet(task0,task1,task2);
  final UUID uuid1=UUID.randomUUID();
  mockTaskManager(Collections.<TaskId>emptySet(),Collections.<TaskId>emptySet(),uuid1,builder);
  configurePartitionAssignor(Collections.<String,Object>emptyMap());
  final MockInternalTopicManager internalTopicManager=new MockInternalTopicManager(streamsConfig,mockClientSupplier.restoreConsumer);
  partitionAssignor.setInternalTopicManager(internalTopicManager);
  final Map<String,PartitionAssignor.Subscription> subscriptions=new HashMap<>();
  final Set<TaskId> emptyTasks=Collections.emptySet();
  subscriptions.put("consumer10",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid1,emptyTasks,emptyTasks,userEndPoint).encode()));
  partitionAssignor.assign(metadata,subscriptions);
  assertEquals(1,internalTopicManager.readyTopics.size());
  assertEquals(allTasks.size(),(long)internalTopicManager.readyTopics.get(applicationId + "-topicX"));
}
