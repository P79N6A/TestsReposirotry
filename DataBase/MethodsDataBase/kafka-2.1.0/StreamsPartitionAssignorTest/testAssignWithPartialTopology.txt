@Test public void testAssignWithPartialTopology(){
  builder.addSource(null,"source1",null,null,null,"topic1");
  builder.addProcessor("processor1",new MockProcessorSupplier(),"source1");
  builder.addStateStore(new MockKeyValueStoreBuilder("store1",false),"processor1");
  builder.addSource(null,"source2",null,null,null,"topic2");
  builder.addProcessor("processor2",new MockProcessorSupplier(),"source2");
  builder.addStateStore(new MockKeyValueStoreBuilder("store2",false),"processor2");
  final List<String> topics=Utils.mkList("topic1","topic2");
  final Set<TaskId> allTasks=Utils.mkSet(task0,task1,task2);
  final UUID uuid1=UUID.randomUUID();
  mockTaskManager(Collections.<TaskId>emptySet(),Collections.<TaskId>emptySet(),uuid1,builder);
  configurePartitionAssignor(Collections.singletonMap(StreamsConfig.PARTITION_GROUPER_CLASS_CONFIG,(Object)SingleGroupPartitionGrouperStub.class));
  partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig,mockClientSupplier.restoreConsumer));
  final Map<String,PartitionAssignor.Subscription> subscriptions=new HashMap<>();
  subscriptions.put("consumer10",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid1,Collections.<TaskId>emptySet(),Collections.<TaskId>emptySet(),userEndPoint).encode()));
  final Map<String,PartitionAssignor.Assignment> assignments=partitionAssignor.assign(metadata,subscriptions);
  final AssignmentInfo info10=checkAssignment(Utils.mkSet("topic1"),assignments.get("consumer10"));
  final Set<TaskId> allActiveTasks=new HashSet<>(info10.activeTasks());
  assertEquals(3,allActiveTasks.size());
  assertEquals(allTasks,new HashSet<>(allActiveTasks));
}
