@Test public void shouldMapUserEndPointToTopicPartitions(){
  builder.setApplicationId(applicationId);
  builder.addSource(null,"source",null,null,null,"topic1");
  builder.addProcessor("processor",new MockProcessorSupplier(),"source");
  builder.addSink("sink","output",null,null,null,"processor");
  final List<String> topics=Utils.mkList("topic1");
  final UUID uuid1=UUID.randomUUID();
  mockTaskManager(Collections.<TaskId>emptySet(),Collections.<TaskId>emptySet(),uuid1,builder);
  configurePartitionAssignor(Collections.singletonMap(StreamsConfig.APPLICATION_SERVER_CONFIG,(Object)userEndPoint));
  partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig,mockClientSupplier.restoreConsumer));
  final Map<String,PartitionAssignor.Subscription> subscriptions=new HashMap<>();
  final Set<TaskId> emptyTasks=Collections.emptySet();
  subscriptions.put("consumer1",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid1,emptyTasks,emptyTasks,userEndPoint).encode()));
  final Map<String,PartitionAssignor.Assignment> assignments=partitionAssignor.assign(metadata,subscriptions);
  final PartitionAssignor.Assignment consumerAssignment=assignments.get("consumer1");
  final AssignmentInfo assignmentInfo=AssignmentInfo.decode(consumerAssignment.userData());
  final Set<TopicPartition> topicPartitions=assignmentInfo.partitionsByHost().get(new HostInfo("localhost",8080));
  assertEquals(Utils.mkSet(new TopicPartition("topic1",0),new TopicPartition("topic1",1),new TopicPartition("topic1",2)),topicPartitions);
}
