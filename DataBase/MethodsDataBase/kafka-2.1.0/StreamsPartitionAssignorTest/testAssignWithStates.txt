@Test public void testAssignWithStates(){
  builder.setApplicationId(applicationId);
  builder.addSource(null,"source1",null,null,null,"topic1");
  builder.addSource(null,"source2",null,null,null,"topic2");
  builder.addProcessor("processor-1",new MockProcessorSupplier(),"source1");
  builder.addStateStore(new MockKeyValueStoreBuilder("store1",false),"processor-1");
  builder.addProcessor("processor-2",new MockProcessorSupplier(),"source2");
  builder.addStateStore(new MockKeyValueStoreBuilder("store2",false),"processor-2");
  builder.addStateStore(new MockKeyValueStoreBuilder("store3",false),"processor-2");
  final List<String> topics=Utils.mkList("topic1","topic2");
  final TaskId task00=new TaskId(0,0);
  final TaskId task01=new TaskId(0,1);
  final TaskId task02=new TaskId(0,2);
  final TaskId task10=new TaskId(1,0);
  final TaskId task11=new TaskId(1,1);
  final TaskId task12=new TaskId(1,2);
  final List<TaskId> tasks=Utils.mkList(task00,task01,task02,task10,task11,task12);
  final UUID uuid1=UUID.randomUUID();
  final UUID uuid2=UUID.randomUUID();
  mockTaskManager(Collections.<TaskId>emptySet(),Collections.<TaskId>emptySet(),uuid1,builder);
  configurePartitionAssignor(Collections.<String,Object>emptyMap());
  partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig,mockClientSupplier.restoreConsumer));
  final Map<String,PartitionAssignor.Subscription> subscriptions=new HashMap<>();
  subscriptions.put("consumer10",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid1,Collections.<TaskId>emptySet(),Collections.<TaskId>emptySet(),userEndPoint).encode()));
  subscriptions.put("consumer11",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid1,Collections.<TaskId>emptySet(),Collections.<TaskId>emptySet(),userEndPoint).encode()));
  subscriptions.put("consumer20",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid2,Collections.<TaskId>emptySet(),Collections.<TaskId>emptySet(),userEndPoint).encode()));
  final Map<String,PartitionAssignor.Assignment> assignments=partitionAssignor.assign(metadata,subscriptions);
  assertEquals(2,assignments.get("consumer10").partitions().size());
  assertEquals(2,assignments.get("consumer11").partitions().size());
  assertEquals(2,assignments.get("consumer20").partitions().size());
  final AssignmentInfo info10=AssignmentInfo.decode(assignments.get("consumer10").userData());
  final AssignmentInfo info11=AssignmentInfo.decode(assignments.get("consumer11").userData());
  final AssignmentInfo info20=AssignmentInfo.decode(assignments.get("consumer20").userData());
  assertEquals(2,info10.activeTasks().size());
  assertEquals(2,info11.activeTasks().size());
  assertEquals(2,info20.activeTasks().size());
  final Set<TaskId> allTasks=new HashSet<>();
  allTasks.addAll(info10.activeTasks());
  allTasks.addAll(info11.activeTasks());
  allTasks.addAll(info20.activeTasks());
  assertEquals(new HashSet<>(tasks),allTasks);
  final Map<Integer,InternalTopologyBuilder.TopicsInfo> topicGroups=builder.topicGroups();
  assertEquals(Utils.mkSet(task00,task01,task02),tasksForState("store1",tasks,topicGroups));
  assertEquals(Utils.mkSet(task10,task11,task12),tasksForState("store2",tasks,topicGroups));
  assertEquals(Utils.mkSet(task10,task11,task12),tasksForState("store3",tasks,topicGroups));
}
