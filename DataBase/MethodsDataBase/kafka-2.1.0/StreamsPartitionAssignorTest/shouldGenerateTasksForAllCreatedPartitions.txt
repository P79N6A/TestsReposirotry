@Test public void shouldGenerateTasksForAllCreatedPartitions(){
  final StreamsBuilder builder=new StreamsBuilder();
  final KStream<Object,Object> stream1=builder.stream("topic1").map(new KeyValueMapper<Object,Object,KeyValue<Object,Object>>(){
    @Override public KeyValue<Object,Object> apply(    final Object key,    final Object value){
      return new KeyValue<>(key,value);
    }
  }
);
  final KTable<Object,Long> table1=builder.table("topic3").groupBy(new KeyValueMapper<Object,Object,KeyValue<Object,Object>>(){
    @Override public KeyValue<Object,Object> apply(    final Object key,    final Object value){
      return new KeyValue<>(key,value);
    }
  }
).count();
  stream1.join(table1,new ValueJoiner(){
    @Override public Object apply(    final Object value1,    final Object value2){
      return null;
    }
  }
);
  final UUID uuid=UUID.randomUUID();
  final String client="client1";
  final InternalTopologyBuilder internalTopologyBuilder=TopologyWrapper.getInternalTopologyBuilder(builder.build());
  internalTopologyBuilder.setApplicationId(applicationId);
  mockTaskManager(Collections.<TaskId>emptySet(),Collections.<TaskId>emptySet(),UUID.randomUUID(),internalTopologyBuilder);
  configurePartitionAssignor(Collections.<String,Object>emptyMap());
  final MockInternalTopicManager mockInternalTopicManager=new MockInternalTopicManager(streamsConfig,mockClientSupplier.restoreConsumer);
  partitionAssignor.setInternalTopicManager(mockInternalTopicManager);
  final Map<String,PartitionAssignor.Subscription> subscriptions=new HashMap<>();
  final Set<TaskId> emptyTasks=Collections.emptySet();
  subscriptions.put(client,new PartitionAssignor.Subscription(Utils.mkList("topic1","topic3"),new SubscriptionInfo(uuid,emptyTasks,emptyTasks,userEndPoint).encode()));
  final Map<String,PartitionAssignor.Assignment> assignment=partitionAssignor.assign(metadata,subscriptions);
  final Map<String,Integer> expectedCreatedInternalTopics=new HashMap<>();
  expectedCreatedInternalTopics.put(applicationId + "-KTABLE-AGGREGATE-STATE-STORE-0000000006-repartition",4);
  expectedCreatedInternalTopics.put(applicationId + "-KTABLE-AGGREGATE-STATE-STORE-0000000006-changelog",4);
  expectedCreatedInternalTopics.put(applicationId + "-topic3-STATE-STORE-0000000002-changelog",4);
  expectedCreatedInternalTopics.put(applicationId + "-KSTREAM-MAP-0000000001-repartition",4);
  assertThat(mockInternalTopicManager.readyTopics,equalTo(expectedCreatedInternalTopics));
  final List<TopicPartition> expectedAssignment=Arrays.asList(new TopicPartition("topic1",0),new TopicPartition("topic1",1),new TopicPartition("topic1",2),new TopicPartition("topic3",0),new TopicPartition("topic3",1),new TopicPartition("topic3",2),new TopicPartition("topic3",3),new TopicPartition(applicationId + "-KTABLE-AGGREGATE-STATE-STORE-0000000006-repartition",0),new TopicPartition(applicationId + "-KTABLE-AGGREGATE-STATE-STORE-0000000006-repartition",1),new TopicPartition(applicationId + "-KTABLE-AGGREGATE-STATE-STORE-0000000006-repartition",2),new TopicPartition(applicationId + "-KTABLE-AGGREGATE-STATE-STORE-0000000006-repartition",3),new TopicPartition(applicationId + "-KSTREAM-MAP-0000000001-repartition",0),new TopicPartition(applicationId + "-KSTREAM-MAP-0000000001-repartition",1),new TopicPartition(applicationId + "-KSTREAM-MAP-0000000001-repartition",2),new TopicPartition(applicationId + "-KSTREAM-MAP-0000000001-repartition",3));
  assertThat(new HashSet<>(assignment.get(client).partitions()),equalTo(new HashSet<>(expectedAssignment)));
}
