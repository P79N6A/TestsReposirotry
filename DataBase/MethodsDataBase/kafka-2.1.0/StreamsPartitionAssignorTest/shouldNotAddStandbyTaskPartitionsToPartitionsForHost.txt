@Test public void shouldNotAddStandbyTaskPartitionsToPartitionsForHost(){
  final StreamsBuilder builder=new StreamsBuilder();
  builder.stream("topic1").groupByKey().count();
  final InternalTopologyBuilder internalTopologyBuilder=TopologyWrapper.getInternalTopologyBuilder(builder.build());
  internalTopologyBuilder.setApplicationId(applicationId);
  final UUID uuid=UUID.randomUUID();
  mockTaskManager(Collections.<TaskId>emptySet(),Collections.<TaskId>emptySet(),uuid,internalTopologyBuilder);
  final Map<String,Object> props=new HashMap<>();
  props.put(StreamsConfig.NUM_STANDBY_REPLICAS_CONFIG,1);
  props.put(StreamsConfig.APPLICATION_SERVER_CONFIG,userEndPoint);
  configurePartitionAssignor(props);
  partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig,mockClientSupplier.restoreConsumer));
  final Map<String,PartitionAssignor.Subscription> subscriptions=new HashMap<>();
  final Set<TaskId> emptyTasks=Collections.emptySet();
  subscriptions.put("consumer1",new PartitionAssignor.Subscription(Collections.singletonList("topic1"),new SubscriptionInfo(uuid,emptyTasks,emptyTasks,userEndPoint).encode()));
  subscriptions.put("consumer2",new PartitionAssignor.Subscription(Collections.singletonList("topic1"),new SubscriptionInfo(UUID.randomUUID(),emptyTasks,emptyTasks,"other:9090").encode()));
  final Set<TopicPartition> allPartitions=Utils.mkSet(t1p0,t1p1,t1p2);
  final Map<String,PartitionAssignor.Assignment> assign=partitionAssignor.assign(metadata,subscriptions);
  final PartitionAssignor.Assignment consumer1Assignment=assign.get("consumer1");
  final AssignmentInfo assignmentInfo=AssignmentInfo.decode(consumer1Assignment.userData());
  final Set<TopicPartition> consumer1partitions=assignmentInfo.partitionsByHost().get(new HostInfo("localhost",8080));
  final Set<TopicPartition> consumer2Partitions=assignmentInfo.partitionsByHost().get(new HostInfo("other",9090));
  final HashSet<TopicPartition> allAssignedPartitions=new HashSet<>(consumer1partitions);
  allAssignedPartitions.addAll(consumer2Partitions);
  assertThat(consumer1partitions,not(allPartitions));
  assertThat(consumer2Partitions,not(allPartitions));
  assertThat(allAssignedPartitions,equalTo(allPartitions));
}
