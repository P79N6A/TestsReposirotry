@Test public void testAssignBasic(){
  builder.addSource(null,"source1",null,null,null,"topic1");
  builder.addSource(null,"source2",null,null,null,"topic2");
  builder.addProcessor("processor",new MockProcessorSupplier(),"source1","source2");
  final List<String> topics=Utils.mkList("topic1","topic2");
  final Set<TaskId> allTasks=Utils.mkSet(task0,task1,task2);
  final Set<TaskId> prevTasks10=Utils.mkSet(task0);
  final Set<TaskId> prevTasks11=Utils.mkSet(task1);
  final Set<TaskId> prevTasks20=Utils.mkSet(task2);
  final Set<TaskId> standbyTasks10=Utils.mkSet(task1);
  final Set<TaskId> standbyTasks11=Utils.mkSet(task2);
  final Set<TaskId> standbyTasks20=Utils.mkSet(task0);
  final UUID uuid1=UUID.randomUUID();
  final UUID uuid2=UUID.randomUUID();
  mockTaskManager(prevTasks10,standbyTasks10,uuid1,builder);
  configurePartitionAssignor(Collections.<String,Object>emptyMap());
  partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig,mockClientSupplier.restoreConsumer));
  final Map<String,PartitionAssignor.Subscription> subscriptions=new HashMap<>();
  subscriptions.put("consumer10",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid1,prevTasks10,standbyTasks10,userEndPoint).encode()));
  subscriptions.put("consumer11",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid1,prevTasks11,standbyTasks11,userEndPoint).encode()));
  subscriptions.put("consumer20",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid2,prevTasks20,standbyTasks20,userEndPoint).encode()));
  final Map<String,PartitionAssignor.Assignment> assignments=partitionAssignor.assign(metadata,subscriptions);
  assertEquals(Utils.mkSet(Utils.mkSet(t1p0,t2p0),Utils.mkSet(t1p1,t2p1)),Utils.mkSet(new HashSet<>(assignments.get("consumer10").partitions()),new HashSet<>(assignments.get("consumer11").partitions())));
  assertEquals(Utils.mkSet(t1p2,t2p2),new HashSet<>(assignments.get("consumer20").partitions()));
  final AssignmentInfo info10=checkAssignment(allTopics,assignments.get("consumer10"));
  final Set<TaskId> allActiveTasks=new HashSet<>(info10.activeTasks());
  final AssignmentInfo info11=checkAssignment(allTopics,assignments.get("consumer11"));
  allActiveTasks.addAll(info11.activeTasks());
  assertEquals(Utils.mkSet(task0,task1),allActiveTasks);
  final AssignmentInfo info20=checkAssignment(allTopics,assignments.get("consumer20"));
  allActiveTasks.addAll(info20.activeTasks());
  assertEquals(3,allActiveTasks.size());
  assertEquals(allTasks,new HashSet<>(allActiveTasks));
  assertEquals(3,allActiveTasks.size());
  assertEquals(allTasks,allActiveTasks);
}
