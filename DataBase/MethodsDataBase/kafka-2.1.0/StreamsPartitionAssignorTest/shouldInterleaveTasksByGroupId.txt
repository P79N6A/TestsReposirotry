@Test public void shouldInterleaveTasksByGroupId(){
  final TaskId taskIdA0=new TaskId(0,0);
  final TaskId taskIdA1=new TaskId(0,1);
  final TaskId taskIdA2=new TaskId(0,2);
  final TaskId taskIdA3=new TaskId(0,3);
  final TaskId taskIdB0=new TaskId(1,0);
  final TaskId taskIdB1=new TaskId(1,1);
  final TaskId taskIdB2=new TaskId(1,2);
  final TaskId taskIdC0=new TaskId(2,0);
  final TaskId taskIdC1=new TaskId(2,1);
  final List<TaskId> expectedSubList1=Arrays.asList(taskIdA0,taskIdA3,taskIdB2);
  final List<TaskId> expectedSubList2=Arrays.asList(taskIdA1,taskIdB0,taskIdC0);
  final List<TaskId> expectedSubList3=Arrays.asList(taskIdA2,taskIdB1,taskIdC1);
  final List<List<TaskId>> embeddedList=Arrays.asList(expectedSubList1,expectedSubList2,expectedSubList3);
  final List<TaskId> tasks=Arrays.asList(taskIdC0,taskIdC1,taskIdB0,taskIdB1,taskIdB2,taskIdA0,taskIdA1,taskIdA2,taskIdA3);
  Collections.shuffle(tasks);
  final List<List<TaskId>> interleavedTaskIds=partitionAssignor.interleaveTasksByGroupId(tasks,3);
  assertThat(interleavedTaskIds,equalTo(embeddedList));
}
