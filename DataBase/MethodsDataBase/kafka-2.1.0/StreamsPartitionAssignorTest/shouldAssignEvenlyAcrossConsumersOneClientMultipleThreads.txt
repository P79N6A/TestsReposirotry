@Test public void shouldAssignEvenlyAcrossConsumersOneClientMultipleThreads(){
  builder.addSource(null,"source1",null,null,null,"topic1");
  builder.addSource(null,"source2",null,null,null,"topic2");
  builder.addProcessor("processor",new MockProcessorSupplier(),"source1");
  builder.addProcessor("processorII",new MockProcessorSupplier(),"source2");
  final List<PartitionInfo> localInfos=Arrays.asList(new PartitionInfo("topic1",0,Node.noNode(),new Node[0],new Node[0]),new PartitionInfo("topic1",1,Node.noNode(),new Node[0],new Node[0]),new PartitionInfo("topic1",2,Node.noNode(),new Node[0],new Node[0]),new PartitionInfo("topic1",3,Node.noNode(),new Node[0],new Node[0]),new PartitionInfo("topic2",0,Node.noNode(),new Node[0],new Node[0]),new PartitionInfo("topic2",1,Node.noNode(),new Node[0],new Node[0]),new PartitionInfo("topic2",2,Node.noNode(),new Node[0],new Node[0]),new PartitionInfo("topic2",3,Node.noNode(),new Node[0],new Node[0]));
  final Cluster localMetadata=new Cluster("cluster",Collections.singletonList(Node.noNode()),localInfos,Collections.<String>emptySet(),Collections.<String>emptySet());
  final List<String> topics=Utils.mkList("topic1","topic2");
  final TaskId taskIdA0=new TaskId(0,0);
  final TaskId taskIdA1=new TaskId(0,1);
  final TaskId taskIdA2=new TaskId(0,2);
  final TaskId taskIdA3=new TaskId(0,3);
  final TaskId taskIdB0=new TaskId(1,0);
  final TaskId taskIdB1=new TaskId(1,1);
  final TaskId taskIdB2=new TaskId(1,2);
  final TaskId taskIdB3=new TaskId(1,3);
  final UUID uuid1=UUID.randomUUID();
  mockTaskManager(new HashSet<TaskId>(),new HashSet<TaskId>(),uuid1,builder);
  configurePartitionAssignor(Collections.<String,Object>emptyMap());
  partitionAssignor.setInternalTopicManager(new MockInternalTopicManager(streamsConfig,mockClientSupplier.restoreConsumer));
  final Map<String,PartitionAssignor.Subscription> subscriptions=new HashMap<>();
  subscriptions.put("consumer10",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid1,new HashSet<TaskId>(),new HashSet<TaskId>(),userEndPoint).encode()));
  subscriptions.put("consumer11",new PartitionAssignor.Subscription(topics,new SubscriptionInfo(uuid1,new HashSet<TaskId>(),new HashSet<TaskId>(),userEndPoint).encode()));
  final Map<String,PartitionAssignor.Assignment> assignments=partitionAssignor.assign(localMetadata,subscriptions);
  assertEquals(Utils.mkSet(Utils.mkSet(t2p2,t1p0,t1p2,t2p0),Utils.mkSet(t1p1,t2p1,t1p3,t2p3)),Utils.mkSet(new HashSet<>(assignments.get("consumer10").partitions()),new HashSet<>(assignments.get("consumer11").partitions())));
  final AssignmentInfo info10=AssignmentInfo.decode(assignments.get("consumer10").userData());
  final List<TaskId> expectedInfo10TaskIds=Arrays.asList(taskIdA1,taskIdA3,taskIdB1,taskIdB3);
  assertEquals(expectedInfo10TaskIds,info10.activeTasks());
  final AssignmentInfo info11=AssignmentInfo.decode(assignments.get("consumer11").userData());
  final List<TaskId> expectedInfo11TaskIds=Arrays.asList(taskIdA0,taskIdA2,taskIdB0,taskIdB2);
  assertEquals(expectedInfo11TaskIds,info11.activeTasks());
}
