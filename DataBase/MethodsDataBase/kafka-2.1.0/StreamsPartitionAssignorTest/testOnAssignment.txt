@Test public void testOnAssignment(){
  configurePartitionAssignor(Collections.<String,Object>emptyMap());
  final List<TaskId> activeTaskList=Utils.mkList(task0,task3);
  final Map<TaskId,Set<TopicPartition>> activeTasks=new HashMap<>();
  final Map<TaskId,Set<TopicPartition>> standbyTasks=new HashMap<>();
  final Map<HostInfo,Set<TopicPartition>> hostState=Collections.singletonMap(new HostInfo("localhost",9090),Utils.mkSet(t3p0,t3p3));
  activeTasks.put(task0,Utils.mkSet(t3p0));
  activeTasks.put(task3,Utils.mkSet(t3p3));
  standbyTasks.put(task1,Utils.mkSet(t3p1));
  standbyTasks.put(task2,Utils.mkSet(t3p2));
  final AssignmentInfo info=new AssignmentInfo(activeTaskList,standbyTasks,hostState);
  final PartitionAssignor.Assignment assignment=new PartitionAssignor.Assignment(Utils.mkList(t3p0,t3p3),info.encode());
  final Capture<Cluster> capturedCluster=EasyMock.newCapture();
  taskManager.setPartitionsByHostState(hostState);
  EasyMock.expectLastCall();
  taskManager.setAssignmentMetadata(activeTasks,standbyTasks);
  EasyMock.expectLastCall();
  taskManager.setClusterMetadata(EasyMock.capture(capturedCluster));
  EasyMock.expectLastCall();
  EasyMock.replay(taskManager);
  partitionAssignor.onAssignment(assignment);
  EasyMock.verify(taskManager);
  assertEquals(Collections.singleton(t3p0.topic()),capturedCluster.getValue().topics());
  assertEquals(2,capturedCluster.getValue().partitionsForTopic(t3p0.topic()).size());
}
