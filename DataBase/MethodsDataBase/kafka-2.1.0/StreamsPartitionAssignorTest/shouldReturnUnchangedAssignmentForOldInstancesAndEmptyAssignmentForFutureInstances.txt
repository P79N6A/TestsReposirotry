@Test public void shouldReturnUnchangedAssignmentForOldInstancesAndEmptyAssignmentForFutureInstances(){
  builder.addSource(null,"source1",null,null,null,"topic1");
  final Map<String,PartitionAssignor.Subscription> subscriptions=new HashMap<>();
  final Set<TaskId> allTasks=Utils.mkSet(task0,task1,task2);
  final Set<TaskId> activeTasks=Utils.mkSet(task0,task1);
  final Set<TaskId> standbyTasks=Utils.mkSet(task2);
  final Map<TaskId,Set<TopicPartition>> standbyTaskMap=new HashMap<TaskId,Set<TopicPartition>>(){
{
      put(task2,Collections.singleton(t1p2));
    }
  }
;
  subscriptions.put("consumer1",new PartitionAssignor.Subscription(Collections.singletonList("topic1"),new SubscriptionInfo(UUID.randomUUID(),activeTasks,standbyTasks,null).encode()));
  subscriptions.put("future-consumer",new PartitionAssignor.Subscription(Collections.singletonList("topic1"),encodeFutureSubscription()));
  mockTaskManager(allTasks,allTasks,UUID.randomUUID(),builder);
  partitionAssignor.configure(configProps());
  final Map<String,PartitionAssignor.Assignment> assignment=partitionAssignor.assign(metadata,subscriptions);
  assertThat(assignment.size(),equalTo(2));
  assertThat(AssignmentInfo.decode(assignment.get("consumer1").userData()),equalTo(new AssignmentInfo(new ArrayList<>(activeTasks),standbyTaskMap,Collections.<HostInfo,Set<TopicPartition>>emptyMap())));
  assertThat(assignment.get("consumer1").partitions(),equalTo(Utils.mkList(t1p0,t1p1)));
  assertThat(AssignmentInfo.decode(assignment.get("future-consumer").userData()),equalTo(new AssignmentInfo()));
  assertThat(assignment.get("future-consumer").partitions().size(),equalTo(0));
}
