@Test public void shouldExtractGraceFromAncestorThroughStatefulParent(){
  final SessionWindows windows=SessionWindows.with(ofMillis(10L)).grace(ofMillis(1234L));
  final StatefulProcessorNode<String,Long> graceGrandparent=new StatefulProcessorNode<>("asdf",new ProcessorParameters<>(new KStreamSessionWindowAggregate<String,Long,Integer>(windows,"asdf",null,null,null),"asdf"),(StoreBuilder<? extends StateStore>)null,false);
  final StatefulProcessorNode<String,Long> statefulParent=new StatefulProcessorNode<>("stateful",new ProcessorParameters<>(() -> new Processor<String,Long>(){
    @Override public void init(    final ProcessorContext context){
    }
    @Override public void process(    final String key,    final Long value){
    }
    @Override public void close(){
    }
  }
,"dummy"),(StoreBuilder<? extends StateStore>)null,false);
  graceGrandparent.addChild(statefulParent);
  final ProcessorGraphNode<String,Long> node=new ProcessorGraphNode<>("stateless",null);
  statefulParent.addChild(node);
  final long extracted=GraphGraceSearchUtil.findAndVerifyWindowGrace(node);
  assertThat(extracted,is(windows.gracePeriodMs()));
}
