@Test public void shouldFailIfThereIsNoGraceAncestor(){
  final StatefulProcessorNode<String,Long> gracelessAncestor=new StatefulProcessorNode<>("stateful",new ProcessorParameters<>(() -> new Processor<String,Long>(){
    @Override public void init(    final ProcessorContext context){
    }
    @Override public void process(    final String key,    final Long value){
    }
    @Override public void close(){
    }
  }
,"dummy"),(StoreBuilder<? extends StateStore>)null,false);
  final ProcessorGraphNode<String,Long> node=new ProcessorGraphNode<>("stateless",null);
  gracelessAncestor.addChild(node);
  try {
    GraphGraceSearchUtil.findAndVerifyWindowGrace(node);
    fail("should have thrown.");
  }
 catch (  final TopologyException e) {
    assertThat(e.getMessage(),is("Invalid topology: Window close time is only defined for windowed computations. Got [stateful->stateless]."));
  }
}
