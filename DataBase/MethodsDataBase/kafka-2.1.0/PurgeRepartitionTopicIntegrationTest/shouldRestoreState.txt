@Test public void shouldRestoreState() throws InterruptedException, ExecutionException {
  final List<KeyValue<Integer,Integer>> messages=new ArrayList<>();
  for (int i=0; i < 1000; i++) {
    messages.add(new KeyValue<>(i,i));
  }
  IntegrationTestUtils.produceKeyValuesSynchronouslyWithTimestamp(INPUT_TOPIC,messages,TestUtils.producerConfig(CLUSTER.bootstrapServers(),IntegerSerializer.class,IntegerSerializer.class),time.milliseconds());
  kafkaStreams.start();
  TestUtils.waitForCondition(new RepartitionTopicCreatedWithExpectedConfigs(),60000,"Repartition topic " + REPARTITION_TOPIC + " not created with the expected configs after 60000 ms.");
  TestUtils.waitForCondition(new RepartitionTopicVerified(new TopicSizeVerifier(){
    @Override public boolean verify(    final long currentSize){
      return currentSize > 0;
    }
  }
),60000,"Repartition topic " + REPARTITION_TOPIC + " not received data after 60000 ms.");
  TestUtils.waitForCondition(new RepartitionTopicVerified(new TopicSizeVerifier(){
    @Override public boolean verify(    final long currentSize){
      return currentSize <= purgeSegmentBytes;
    }
  }
),60000,"Repartition topic " + REPARTITION_TOPIC + " not purged data after 60000 ms.");
}
