@Test public void testSendingOldValue(){
  final StreamsBuilder builder=new StreamsBuilder();
  final String topic1="topic1";
  final KTableImpl<String,String,String> table1=(KTableImpl<String,String,String>)builder.table(topic1,stringConsumed);
  table1.enableSendingOldValues();
  assertTrue(table1.sendingOldValueEnabled());
  final MockProcessorSupplier<String,Integer> supplier=new MockProcessorSupplier<>();
  final Topology topology=builder.build().addProcessor("proc1",supplier,table1.name);
  try (final TopologyTestDriver driver=new TopologyTestDriver(topology,props)){
    final MockProcessor<String,Integer> proc1=supplier.theCapturedProcessor();
    driver.pipeInput(recordFactory.create(topic1,"A","01"));
    driver.pipeInput(recordFactory.create(topic1,"B","01"));
    driver.pipeInput(recordFactory.create(topic1,"C","01"));
    proc1.checkAndClearProcessResult("A:(01<-null)","B:(01<-null)","C:(01<-null)");
    driver.pipeInput(recordFactory.create(topic1,"A","02"));
    driver.pipeInput(recordFactory.create(topic1,"B","02"));
    proc1.checkAndClearProcessResult("A:(02<-01)","B:(02<-01)");
    driver.pipeInput(recordFactory.create(topic1,"A","03"));
    proc1.checkAndClearProcessResult("A:(03<-02)");
    driver.pipeInput(recordFactory.create(topic1,"A",(String)null));
    driver.pipeInput(recordFactory.create(topic1,"B",(String)null));
    proc1.checkAndClearProcessResult("A:(null<-03)","B:(null<-02)");
  }
 }
