/** 
 * Test the MessageSet.searchFor API.
 */
@Test public void testSearch() throws IOException {
  SimpleRecord lastMessage=new SimpleRecord("test".getBytes());
  fileRecords.append(MemoryRecords.withRecords(50L,CompressionType.NONE,lastMessage));
  List<RecordBatch> batches=batches(fileRecords);
  int position=0;
  int message1Size=batches.get(0).sizeInBytes();
  assertEquals("Should be able to find the first message by its offset",new FileRecords.LogOffsetPosition(0L,position,message1Size),fileRecords.searchForOffsetWithSize(0,0));
  position+=message1Size;
  int message2Size=batches.get(1).sizeInBytes();
  assertEquals("Should be able to find second message when starting from 0",new FileRecords.LogOffsetPosition(1L,position,message2Size),fileRecords.searchForOffsetWithSize(1,0));
  assertEquals("Should be able to find second message starting from its offset",new FileRecords.LogOffsetPosition(1L,position,message2Size),fileRecords.searchForOffsetWithSize(1,position));
  position+=message2Size + batches.get(2).sizeInBytes();
  int message4Size=batches.get(3).sizeInBytes();
  assertEquals("Should be able to find fourth message from a non-existant offset",new FileRecords.LogOffsetPosition(50L,position,message4Size),fileRecords.searchForOffsetWithSize(3,position));
  assertEquals("Should be able to find fourth message by correct offset",new FileRecords.LogOffsetPosition(50L,position,message4Size),fileRecords.searchForOffsetWithSize(50,position));
}
