@Test public void testReloadOnStart() throws Exception {
  expectStart();
  expectStop();
  PowerMock.replayAll();
  Map<TopicPartition,Long> endOffsets=new HashMap<>();
  endOffsets.put(TP0,1L);
  endOffsets.put(TP1,1L);
  consumer.updateEndOffsets(endOffsets);
  final CountDownLatch finishedLatch=new CountDownLatch(1);
  consumer.schedulePollTask(new Runnable(){
    @Override public void run(){
      consumer.scheduleNopPollTask();
      consumer.scheduleNopPollTask();
      consumer.schedulePollTask(new Runnable(){
        @Override public void run(){
          consumer.addRecord(new ConsumerRecord<>(TOPIC,0,0,0L,TimestampType.CREATE_TIME,0L,0,0,TP0_KEY,TP0_VALUE));
        }
      }
);
      consumer.scheduleNopPollTask();
      consumer.scheduleNopPollTask();
      consumer.schedulePollTask(new Runnable(){
        @Override public void run(){
          consumer.addRecord(new ConsumerRecord<>(TOPIC,1,0,0L,TimestampType.CREATE_TIME,0L,0,0,TP1_KEY,TP1_VALUE));
        }
      }
);
      consumer.schedulePollTask(new Runnable(){
        @Override public void run(){
          finishedLatch.countDown();
        }
      }
);
    }
  }
);
  store.start();
  assertTrue(finishedLatch.await(10000,TimeUnit.MILLISECONDS));
  assertEquals(CONSUMER_ASSIGNMENT,consumer.assignment());
  assertEquals(2,consumedRecords.size());
  assertEquals(TP0_VALUE,consumedRecords.get(TP0).get(0).value());
  assertEquals(TP1_VALUE,consumedRecords.get(TP1).get(0).value());
  store.stop();
  assertFalse(Whitebox.<Thread>getInternalState(store,"thread").isAlive());
  assertTrue(consumer.closed());
  PowerMock.verifyAll();
}
