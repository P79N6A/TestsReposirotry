@Test public void testConsumerError() throws Exception {
  expectStart();
  expectStop();
  PowerMock.replayAll();
  final CountDownLatch finishedLatch=new CountDownLatch(1);
  Map<TopicPartition,Long> endOffsets=new HashMap<>();
  endOffsets.put(TP0,1L);
  endOffsets.put(TP1,1L);
  consumer.updateEndOffsets(endOffsets);
  consumer.schedulePollTask(new Runnable(){
    @Override public void run(){
      consumer.schedulePollTask(new Runnable(){
        @Override public void run(){
          consumer.setException(Errors.COORDINATOR_NOT_AVAILABLE.exception());
        }
      }
);
      consumer.scheduleNopPollTask();
      consumer.scheduleNopPollTask();
      consumer.schedulePollTask(new Runnable(){
        @Override public void run(){
          consumer.addRecord(new ConsumerRecord<>(TOPIC,0,0,0L,TimestampType.CREATE_TIME,0L,0,0,TP0_KEY,TP0_VALUE_NEW));
          consumer.addRecord(new ConsumerRecord<>(TOPIC,1,0,0L,TimestampType.CREATE_TIME,0L,0,0,TP0_KEY,TP0_VALUE_NEW));
        }
      }
);
      consumer.schedulePollTask(new Runnable(){
        @Override public void run(){
          finishedLatch.countDown();
        }
      }
);
    }
  }
);
  store.start();
  assertTrue(finishedLatch.await(10000,TimeUnit.MILLISECONDS));
  assertEquals(CONSUMER_ASSIGNMENT,consumer.assignment());
  assertEquals(1L,consumer.position(TP0));
  store.stop();
  assertFalse(Whitebox.<Thread>getInternalState(store,"thread").isAlive());
  assertTrue(consumer.closed());
  PowerMock.verifyAll();
}
