@Test public void login1Commit1Login2Abort2Login3Commit3Logout3() throws LoginException {
  Subject subject=new Subject();
  Set<Object> privateCredentials=subject.getPrivateCredentials();
  Set<Object> publicCredentials=subject.getPublicCredentials();
  OAuthBearerToken[] tokens=new OAuthBearerToken[]{mock(OAuthBearerToken.class),mock(OAuthBearerToken.class),mock(OAuthBearerToken.class)};
  SaslExtensions[] extensions=new SaslExtensions[]{mock(SaslExtensions.class),mock(SaslExtensions.class),mock(SaslExtensions.class)};
  TestCallbackHandler testTokenCallbackHandler=new TestCallbackHandler(tokens,extensions);
  OAuthBearerLoginModule loginModule1=new OAuthBearerLoginModule();
  loginModule1.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
  OAuthBearerLoginModule loginModule2=new OAuthBearerLoginModule();
  loginModule2.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
  OAuthBearerLoginModule loginModule3=new OAuthBearerLoginModule();
  loginModule3.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
  assertEquals(0,privateCredentials.size());
  assertEquals(0,publicCredentials.size());
  loginModule1.login();
  assertEquals(0,privateCredentials.size());
  assertEquals(0,publicCredentials.size());
  loginModule1.commit();
  assertEquals(1,privateCredentials.size());
  assertEquals(1,publicCredentials.size());
  assertSame(tokens[0],privateCredentials.iterator().next());
  assertSame(extensions[0],publicCredentials.iterator().next());
  loginModule2.login();
  assertEquals(1,privateCredentials.size());
  assertEquals(1,publicCredentials.size());
  assertSame(tokens[0],privateCredentials.iterator().next());
  assertSame(extensions[0],publicCredentials.iterator().next());
  loginModule2.abort();
  assertEquals(1,privateCredentials.size());
  assertSame(tokens[0],privateCredentials.iterator().next());
  assertEquals(1,publicCredentials.size());
  assertSame(extensions[0],publicCredentials.iterator().next());
  loginModule2.login();
  assertEquals(1,privateCredentials.size());
  assertSame(tokens[0],privateCredentials.iterator().next());
  assertEquals(1,publicCredentials.size());
  assertSame(extensions[0],publicCredentials.iterator().next());
  loginModule2.commit();
  assertEquals(2,privateCredentials.size());
  Iterator<Object> iterator=privateCredentials.iterator();
  assertNotSame(tokens[1],iterator.next());
  assertNotSame(tokens[1],iterator.next());
  assertEquals(2,publicCredentials.size());
  Iterator<Object> publicIterator=publicCredentials.iterator();
  assertNotSame(extensions[1],publicIterator.next());
  assertNotSame(extensions[1],publicIterator.next());
  loginModule1.logout();
  assertEquals(1,privateCredentials.size());
  assertSame(tokens[2],privateCredentials.iterator().next());
  assertEquals(1,publicCredentials.size());
  assertSame(extensions[2],publicCredentials.iterator().next());
  verifyZeroInteractions((Object[])tokens);
  verifyZeroInteractions((Object[])extensions);
}
