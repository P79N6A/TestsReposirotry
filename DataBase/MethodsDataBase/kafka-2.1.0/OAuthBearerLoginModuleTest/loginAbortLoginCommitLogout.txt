@Test public void loginAbortLoginCommitLogout() throws LoginException {
  Subject subject=new Subject();
  Set<Object> privateCredentials=subject.getPrivateCredentials();
  Set<Object> publicCredentials=subject.getPublicCredentials();
  OAuthBearerToken[] tokens=new OAuthBearerToken[]{mock(OAuthBearerToken.class),mock(OAuthBearerToken.class)};
  SaslExtensions[] extensions=new SaslExtensions[]{mock(SaslExtensions.class),mock(SaslExtensions.class)};
  TestCallbackHandler testTokenCallbackHandler=new TestCallbackHandler(tokens,extensions);
  OAuthBearerLoginModule loginModule=new OAuthBearerLoginModule();
  loginModule.initialize(subject,testTokenCallbackHandler,Collections.emptyMap(),Collections.emptyMap());
  assertEquals(0,privateCredentials.size());
  assertEquals(0,publicCredentials.size());
  loginModule.login();
  assertEquals(0,privateCredentials.size());
  assertEquals(0,publicCredentials.size());
  loginModule.abort();
  assertEquals(0,privateCredentials.size());
  assertEquals(0,publicCredentials.size());
  loginModule.login();
  assertEquals(0,privateCredentials.size());
  assertEquals(0,publicCredentials.size());
  loginModule.commit();
  assertEquals(1,privateCredentials.size());
  assertEquals(1,publicCredentials.size());
  assertSame(tokens[1],privateCredentials.iterator().next());
  assertSame(extensions[1],publicCredentials.iterator().next());
  loginModule.logout();
  assertEquals(0,privateCredentials.size());
  assertEquals(0,publicCredentials.size());
  verifyZeroInteractions((Object[])tokens);
  verifyZeroInteractions((Object[])extensions);
}
