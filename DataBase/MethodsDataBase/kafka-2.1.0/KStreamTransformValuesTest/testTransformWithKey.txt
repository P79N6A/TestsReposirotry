@Test public void testTransformWithKey(){
  final StreamsBuilder builder=new StreamsBuilder();
  final ValueTransformerWithKeySupplier<Integer,Number,Integer> valueTransformerSupplier=new ValueTransformerWithKeySupplier<Integer,Number,Integer>(){
    public ValueTransformerWithKey<Integer,Number,Integer> get(){
      return new ValueTransformerWithKey<Integer,Number,Integer>(){
        private int total=0;
        @Override public void init(        final ProcessorContext context){
        }
        @Override public Integer transform(        final Integer readOnlyKey,        final Number value){
          total+=value.intValue() + readOnlyKey;
          return total;
        }
        @Override public void close(){
        }
      }
;
    }
  }
;
  final int[] expectedKeys={1,10,100,1000};
  final KStream<Integer,Integer> stream;
  stream=builder.stream(topicName,Consumed.with(Serdes.Integer(),Serdes.Integer()));
  stream.transformValues(valueTransformerSupplier).process(supplier);
  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props,0L)){
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topicName,expectedKey,expectedKey * 10,0L));
    }
  }
   final String[] expected={"1:11","10:121","100:1221","1000:12221"};
  assertArrayEquals(expected,supplier.theCapturedProcessor().processed.toArray());
}
