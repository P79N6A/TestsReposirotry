@Test public void shouldCloseStateMangerOnTaskCloseWhenCommitFailed() throws Exception {
  consumer.assign(mkList(globalTopicPartition));
  final Map<TopicPartition,OffsetAndMetadata> committedOffsets=new HashMap<>();
  committedOffsets.put(new TopicPartition(globalTopicPartition.topic(),globalTopicPartition.partition()),new OffsetAndMetadata(100L));
  consumer.commitSync(committedOffsets);
  restoreStateConsumer.updatePartitions(globalStoreName,mkList(new PartitionInfo(globalStoreName,0,Node.noNode(),new Node[0],new Node[0])));
  final StreamsConfig config=createConfig(baseDir);
  final AtomicBoolean closedStateManager=new AtomicBoolean(false);
  final StandbyTask task=new StandbyTask(taskId,ktablePartitions,ktableTopology,consumer,changelogReader,config,null,stateDirectory){
    @Override public void commit(){
      throw new RuntimeException("KABOOM!");
    }
    @Override void closeStateManager(    final boolean writeCheckpoint) throws ProcessorStateException {
      closedStateManager.set(true);
    }
  }
;
  task.initializeStateStores();
  try {
    task.close(true,false);
    fail("should have thrown exception");
  }
 catch (  final Exception e) {
  }
  assertTrue(closedStateManager.get());
}
