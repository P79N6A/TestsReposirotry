@Test public void shouldCheckpointStoreOffsetsOnCommit() throws IOException {
  consumer.assign(mkList(globalTopicPartition));
  final Map<TopicPartition,OffsetAndMetadata> committedOffsets=new HashMap<>();
  committedOffsets.put(new TopicPartition(globalTopicPartition.topic(),globalTopicPartition.partition()),new OffsetAndMetadata(100L));
  consumer.commitSync(committedOffsets);
  restoreStateConsumer.updatePartitions(globalStoreName,mkList(new PartitionInfo(globalStoreName,0,Node.noNode(),new Node[0],new Node[0])));
  final TaskId taskId=new TaskId(0,0);
  final MockTime time=new MockTime();
  final StreamsConfig config=createConfig(baseDir);
  final StandbyTask task=new StandbyTask(taskId,ktablePartitions,ktableTopology,consumer,changelogReader,config,null,stateDirectory);
  task.initializeStateStores();
  restoreStateConsumer.assign(new ArrayList<>(task.checkpointedOffsets().keySet()));
  final byte[] serializedValue=Serdes.Integer().serializer().serialize("",1);
  task.update(globalTopicPartition,singletonList(new ConsumerRecord<>(globalTopicPartition.topic(),globalTopicPartition.partition(),50L,serializedValue,serializedValue)));
  time.sleep(config.getLong(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG));
  task.commit();
  final Map<TopicPartition,Long> checkpoint=new OffsetCheckpoint(new File(stateDirectory.directoryForTask(taskId),ProcessorStateManager.CHECKPOINT_FILE_NAME)).read();
  assertThat(checkpoint,equalTo(Collections.singletonMap(globalTopicPartition,51L)));
}
