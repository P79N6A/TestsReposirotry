@Test public void shouldWriteCheckpointFile() throws IOException {
  final String storeName="checkpoint-file-store";
  final String changelogName=applicationId + "-" + storeName+ "-changelog";
  final TopicPartition topicPartition=new TopicPartition(changelogName,1);
  final List<TopicPartition> partitions=mkList(topicPartition);
  final InternalTopologyBuilder internalTopologyBuilder=new InternalTopologyBuilder().setApplicationId(applicationId);
  final InternalStreamsBuilder builder=new InternalStreamsBuilder(internalTopologyBuilder);
  builder.stream(Collections.singleton("topic"),new ConsumedInternal<>()).groupByKey().count(Materialized.as(storeName));
  builder.buildAndOptimizeTopology();
  consumer.assign(partitions);
  final StandbyTask task=new StandbyTask(taskId,partitions,internalTopologyBuilder.build(0),consumer,changelogReader,createConfig(baseDir),new MockStreamsMetrics(new Metrics()),stateDirectory);
  task.initializeStateStores();
  consumer.commitSync(mkMap(mkEntry(topicPartition,new OffsetAndMetadata(20L))));
  task.commit();
  task.update(topicPartition,singletonList(makeWindowedConsumerRecord(changelogName,10,1,0L,60_000L)));
  task.closeStateManager(true);
  final File taskDir=stateDirectory.directoryForTask(taskId);
  final OffsetCheckpoint checkpoint=new OffsetCheckpoint(new File(taskDir,ProcessorStateManager.CHECKPOINT_FILE_NAME));
  final Map<TopicPartition,Long> offsets=checkpoint.read();
  assertEquals(1,offsets.size());
  assertEquals(new Long(11L),offsets.get(topicPartition));
}
