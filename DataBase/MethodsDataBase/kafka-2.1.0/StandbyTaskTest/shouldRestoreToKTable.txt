@Test public void shouldRestoreToKTable() throws IOException {
  consumer.assign(mkList(globalTopicPartition));
  consumer.commitSync(mkMap(mkEntry(globalTopicPartition,new OffsetAndMetadata(0L))));
  final StandbyTask task=new StandbyTask(taskId,ktablePartitions,ktableTopology,consumer,changelogReader,createConfig(baseDir),null,stateDirectory);
  task.initializeStateStores();
  List<ConsumerRecord<byte[],byte[]>> remaining=task.update(globalTopicPartition,Arrays.asList(makeConsumerRecord(globalTopicPartition,10,1),makeConsumerRecord(globalTopicPartition,20,2),makeConsumerRecord(globalTopicPartition,30,3),makeConsumerRecord(globalTopicPartition,40,4),makeConsumerRecord(globalTopicPartition,50,5)));
  assertEquals(5,remaining.size());
  consumer.commitSync(mkMap(mkEntry(globalTopicPartition,new OffsetAndMetadata(10L))));
  task.commit();
  remaining=task.update(globalTopicPartition,remaining);
  assertEquals(5,remaining.size());
  consumer.commitSync(mkMap(mkEntry(globalTopicPartition,new OffsetAndMetadata(11L))));
  task.commit();
  remaining=task.update(globalTopicPartition,remaining);
  assertEquals(4,remaining.size());
  consumer.commitSync(mkMap(mkEntry(globalTopicPartition,new OffsetAndMetadata(45L))));
  task.commit();
  remaining=task.update(globalTopicPartition,remaining);
  assertEquals(1,remaining.size());
  consumer.commitSync(mkMap(mkEntry(globalTopicPartition,new OffsetAndMetadata(50L))));
  task.commit();
  remaining=task.update(globalTopicPartition,remaining);
  assertEquals(1,remaining.size());
  consumer.commitSync(mkMap(mkEntry(globalTopicPartition,new OffsetAndMetadata(60L))));
  task.commit();
  remaining=task.update(globalTopicPartition,remaining);
  assertEquals(emptyList(),remaining);
}
