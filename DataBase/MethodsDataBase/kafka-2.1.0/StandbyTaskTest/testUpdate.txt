@Test public void testUpdate() throws IOException {
  final StreamsConfig config=createConfig(baseDir);
  final StandbyTask task=new StandbyTask(taskId,topicPartitions,topology,consumer,changelogReader,config,null,stateDirectory);
  task.initializeStateStores();
  final Set<TopicPartition> partition=Collections.singleton(partition2);
  restoreStateConsumer.assign(partition);
  for (  final ConsumerRecord<Integer,Integer> record : Arrays.asList(new ConsumerRecord<>(partition2.topic(),partition2.partition(),10,0L,TimestampType.CREATE_TIME,0L,0,0,1,100),new ConsumerRecord<>(partition2.topic(),partition2.partition(),20,0L,TimestampType.CREATE_TIME,0L,0,0,2,100),new ConsumerRecord<>(partition2.topic(),partition2.partition(),30,0L,TimestampType.CREATE_TIME,0L,0,0,3,100))) {
    restoreStateConsumer.bufferRecord(record);
  }
  restoreStateConsumer.seekToBeginning(partition);
  task.update(partition2,restoreStateConsumer.poll(ofMillis(100)).records(partition2));
  final StandbyContextImpl context=(StandbyContextImpl)task.context();
  final MockKeyValueStore store1=(MockKeyValueStore)context.getStateMgr().getStore(storeName1);
  final MockKeyValueStore store2=(MockKeyValueStore)context.getStateMgr().getStore(storeName2);
  assertEquals(Collections.emptyList(),store1.keys);
  assertEquals(mkList(1,2,3),store2.keys);
}
