/** 
 * If the callback handler handles the `OAuthBearerExtensionsValidatorCallback` and finds an invalid extension, SaslServer should throw an authentication exception
 */
@Test(expected=SaslAuthenticationException.class) public void throwsAuthenticationExceptionOnInvalidExtensions() throws Exception {
  OAuthBearerUnsecuredValidatorCallbackHandler invalidHandler=new OAuthBearerUnsecuredValidatorCallbackHandler(){
    @Override public void handle(    Callback[] callbacks) throws UnsupportedCallbackException {
      for (      Callback callback : callbacks) {
        if (callback instanceof OAuthBearerValidatorCallback) {
          OAuthBearerValidatorCallback validationCallback=(OAuthBearerValidatorCallback)callback;
          validationCallback.token(new OAuthBearerTokenMock());
        }
 else         if (callback instanceof OAuthBearerExtensionsValidatorCallback) {
          OAuthBearerExtensionsValidatorCallback extensionsCallback=(OAuthBearerExtensionsValidatorCallback)callback;
          extensionsCallback.error("firstKey","is not valid");
          extensionsCallback.error("secondKey","is not valid either");
        }
 else         throw new UnsupportedCallbackException(callback);
      }
    }
  }
;
  saslServer=new OAuthBearerSaslServer(invalidHandler);
  Map<String,String> customExtensions=new HashMap<>();
  customExtensions.put("firstKey","value");
  customExtensions.put("secondKey","value");
  saslServer.evaluateResponse(clientInitialResponse(null,false,customExtensions));
}
