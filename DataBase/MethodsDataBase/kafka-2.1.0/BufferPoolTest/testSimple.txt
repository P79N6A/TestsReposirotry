/** 
 * Test the simple non-blocking allocation paths
 */
@Test public void testSimple() throws Exception {
  long totalMemory=64 * 1024;
  int size=1024;
  BufferPool pool=new BufferPool(totalMemory,size,metrics,time,metricGroup);
  ByteBuffer buffer=pool.allocate(size,maxBlockTimeMs);
  assertEquals("Buffer size should equal requested size.",size,buffer.limit());
  assertEquals("Unallocated memory should have shrunk",totalMemory - size,pool.unallocatedMemory());
  assertEquals("Available memory should have shrunk",totalMemory - size,pool.availableMemory());
  buffer.putInt(1);
  buffer.flip();
  pool.deallocate(buffer);
  assertEquals("All memory should be available",totalMemory,pool.availableMemory());
  assertEquals("But now some is on the free list",totalMemory - size,pool.unallocatedMemory());
  buffer=pool.allocate(size,maxBlockTimeMs);
  assertEquals("Recycled buffer should be cleared.",0,buffer.position());
  assertEquals("Recycled buffer should be cleared.",buffer.capacity(),buffer.limit());
  pool.deallocate(buffer);
  assertEquals("All memory should be available",totalMemory,pool.availableMemory());
  assertEquals("Still a single buffer on the free list",totalMemory - size,pool.unallocatedMemory());
  buffer=pool.allocate(2 * size,maxBlockTimeMs);
  pool.deallocate(buffer);
  assertEquals("All memory should be available",totalMemory,pool.availableMemory());
  assertEquals("Non-standard size didn't go to the free list.",totalMemory - size,pool.unallocatedMemory());
}
