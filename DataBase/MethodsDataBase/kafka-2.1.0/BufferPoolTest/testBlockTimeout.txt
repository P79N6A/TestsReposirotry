/** 
 * Test if Timeout exception is thrown when there is not enough memory to allocate and the elapsed time is greater than the max specified block time. And verify that the allocation attempt finishes soon after the maxBlockTimeMs.
 */
@Test public void testBlockTimeout() throws Exception {
  BufferPool pool=new BufferPool(10,1,metrics,Time.SYSTEM,metricGroup);
  ByteBuffer buffer1=pool.allocate(1,maxBlockTimeMs);
  ByteBuffer buffer2=pool.allocate(1,maxBlockTimeMs);
  ByteBuffer buffer3=pool.allocate(1,maxBlockTimeMs);
  delayedDeallocate(pool,buffer1,maxBlockTimeMs / 2);
  delayedDeallocate(pool,buffer2,maxBlockTimeMs);
  delayedDeallocate(pool,buffer3,maxBlockTimeMs / 2 * 5);
  long beginTimeMs=Time.SYSTEM.milliseconds();
  try {
    pool.allocate(10,maxBlockTimeMs);
    fail("The buffer allocated more memory than its maximum value 10");
  }
 catch (  TimeoutException e) {
  }
  assertTrue("available memory " + pool.availableMemory(),pool.availableMemory() >= 8 && pool.availableMemory() <= 10);
  long durationMs=Time.SYSTEM.milliseconds() - beginTimeMs;
  assertTrue("TimeoutException should not throw before maxBlockTimeMs",durationMs >= maxBlockTimeMs);
  assertTrue("TimeoutException should throw soon after maxBlockTimeMs",durationMs < maxBlockTimeMs + 1000);
}
