@Test public void testLargeAvailableMemory() throws Exception {
  long memory=20_000_000_000L;
  int poolableSize=2_000_000_000;
  final AtomicInteger freeSize=new AtomicInteger(0);
  BufferPool pool=new BufferPool(memory,poolableSize,metrics,time,metricGroup){
    @Override protected ByteBuffer allocateByteBuffer(    int size){
      return ByteBuffer.allocate(0);
    }
    @Override protected int freeSize(){
      return freeSize.get();
    }
  }
;
  pool.allocate(poolableSize,0);
  assertEquals(18_000_000_000L,pool.availableMemory());
  pool.allocate(poolableSize,0);
  assertEquals(16_000_000_000L,pool.availableMemory());
  freeSize.incrementAndGet();
  assertEquals(18_000_000_000L,pool.availableMemory());
  freeSize.incrementAndGet();
  assertEquals(20_000_000_000L,pool.availableMemory());
}
