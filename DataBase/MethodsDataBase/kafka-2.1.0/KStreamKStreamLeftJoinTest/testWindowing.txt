@Test public void testWindowing(){
  final StreamsBuilder builder=new StreamsBuilder();
  final int[] expectedKeys=new int[]{0,1,2,3};
  long time=0L;
  final KStream<Integer,String> stream1;
  final KStream<Integer,String> stream2;
  final KStream<Integer,String> joined;
  final MockProcessorSupplier<Integer,String> supplier=new MockProcessorSupplier<>();
  stream1=builder.stream(topic1,consumed);
  stream2=builder.stream(topic2,consumed);
  joined=stream1.leftJoin(stream2,MockValueJoiner.TOSTRING_JOINER,JoinWindows.of(ofMillis(100)),Joined.with(Serdes.Integer(),Serdes.String(),Serdes.String()));
  joined.process(supplier);
  final Collection<Set<String>> copartitionGroups=TopologyWrapper.getInternalTopologyBuilder(builder.build()).copartitionGroups();
  assertEquals(1,copartitionGroups.size());
  assertEquals(new HashSet<>(Arrays.asList(topic1,topic2)),copartitionGroups.iterator().next());
  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props,time)){
    final MockProcessor<Integer,String> processor=supplier.theCapturedProcessor();
    for (int i=0; i < 2; i++) {
      driver.pipeInput(recordFactory.create(topic1,expectedKeys[i],"X" + expectedKeys[i],time));
    }
    processor.checkAndClearProcessResult("0:X0+null","1:X1+null");
    for (int i=0; i < 2; i++) {
      driver.pipeInput(recordFactory.create(topic2,expectedKeys[i],"Y" + expectedKeys[i],time));
    }
    processor.checkAndClearProcessResult("0:X0+Y0","1:X1+Y1");
    time=1000L;
    for (int i=0; i < expectedKeys.length; i++) {
      driver.pipeInput(recordFactory.create(topic2,expectedKeys[i],"Y" + expectedKeys[i],time + i));
    }
    processor.checkAndClearProcessResult();
    time=1000L + 100L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic1,expectedKey,"XX" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:XX0+Y0","1:XX1+Y1","2:XX2+Y2","3:XX3+Y3");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic1,expectedKey,"XX" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:XX0+null","1:XX1+Y1","2:XX2+Y2","3:XX3+Y3");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic1,expectedKey,"XX" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:XX0+null","1:XX1+null","2:XX2+Y2","3:XX3+Y3");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic1,expectedKey,"XX" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:XX0+null","1:XX1+null","2:XX2+null","3:XX3+Y3");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic1,expectedKey,"XX" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:XX0+null","1:XX1+null","2:XX2+null","3:XX3+null");
    time=1000L - 100L - 1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic1,expectedKey,"XX" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:XX0+null","1:XX1+null","2:XX2+null","3:XX3+null");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic1,expectedKey,"XX" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:XX0+Y0","1:XX1+null","2:XX2+null","3:XX3+null");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic1,expectedKey,"XX" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:XX0+Y0","1:XX1+Y1","2:XX2+null","3:XX3+null");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic1,expectedKey,"XX" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:XX0+Y0","1:XX1+Y1","2:XX2+Y2","3:XX3+null");
    time+=1L;
    for (    final int expectedKey : expectedKeys) {
      driver.pipeInput(recordFactory.create(topic1,expectedKey,"XX" + expectedKey,time));
    }
    processor.checkAndClearProcessResult("0:XX0+Y0","1:XX1+Y1","2:XX2+Y2","3:XX3+Y3");
  }
 }
