@Test public void shouldEvenlyDistributeByTaskIdAndPartition(){
  createClient(p1,4);
  createClient(p2,4);
  createClient(p3,4);
  createClient(p4,4);
  final List<TaskId> taskIds=new ArrayList<>();
  final TaskId[] taskIdArray=new TaskId[16];
  for (int i=1; i <= 2; i++) {
    for (int j=0; j < 8; j++) {
      taskIds.add(new TaskId(i,j));
    }
  }
  Collections.shuffle(taskIds);
  taskIds.toArray(taskIdArray);
  final StickyTaskAssignor<Integer> taskAssignor=createTaskAssignor(taskIdArray);
  taskAssignor.assign(0);
  Collections.sort(taskIds);
  final Set<TaskId> expectedClientOneAssignment=getExpectedTaskIdAssignment(taskIds,0,4,8,12);
  final Set<TaskId> expectedClientTwoAssignment=getExpectedTaskIdAssignment(taskIds,1,5,9,13);
  final Set<TaskId> expectedClientThreeAssignment=getExpectedTaskIdAssignment(taskIds,2,6,10,14);
  final Set<TaskId> expectedClientFourAssignment=getExpectedTaskIdAssignment(taskIds,3,7,11,15);
  final Map<Integer,Set<TaskId>> sortedAssignments=sortClientAssignments(clients);
  assertThat(sortedAssignments.get(p1),equalTo(expectedClientOneAssignment));
  assertThat(sortedAssignments.get(p2),equalTo(expectedClientTwoAssignment));
  assertThat(sortedAssignments.get(p3),equalTo(expectedClientThreeAssignment));
  assertThat(sortedAssignments.get(p4),equalTo(expectedClientFourAssignment));
}
