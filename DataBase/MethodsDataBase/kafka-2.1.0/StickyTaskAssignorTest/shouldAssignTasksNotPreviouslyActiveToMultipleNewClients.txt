@Test public void shouldAssignTasksNotPreviouslyActiveToMultipleNewClients(){
  final TaskId task10=new TaskId(0,10);
  final TaskId task11=new TaskId(0,11);
  final TaskId task12=new TaskId(1,2);
  final TaskId task13=new TaskId(1,3);
  final TaskId task20=new TaskId(2,0);
  final TaskId task21=new TaskId(2,1);
  final TaskId task22=new TaskId(2,2);
  final TaskId task23=new TaskId(2,3);
  final ClientState c1=createClientWithPreviousActiveTasks(p1,1,task01,task12,task13);
  c1.addPreviousStandbyTasks(Utils.mkSet(task00,task11,task20,task21,task23));
  final ClientState c2=createClientWithPreviousActiveTasks(p2,1,task00,task11,task22);
  c2.addPreviousStandbyTasks(Utils.mkSet(task01,task10,task02,task20,task03,task12,task21,task13,task23));
  final ClientState bounce1=createClient(p3,1);
  bounce1.addPreviousStandbyTasks(Utils.mkSet(task20,task21,task23));
  final ClientState bounce2=createClient(p4,1);
  bounce2.addPreviousStandbyTasks(Utils.mkSet(task02,task03,task10));
  final StickyTaskAssignor<Integer> taskAssignor=createTaskAssignor(task00,task10,task01,task02,task11,task20,task03,task12,task21,task13,task22,task23);
  taskAssignor.assign(0);
  assertThat(c1.activeTasks(),equalTo(Utils.mkSet(task01,task12,task13)));
  assertThat(c2.activeTasks(),equalTo(Utils.mkSet(task00,task11,task22)));
  assertThat(bounce1.activeTasks(),equalTo(Utils.mkSet(task20,task21,task23)));
  assertThat(bounce2.activeTasks(),equalTo(Utils.mkSet(task02,task03,task10)));
}
