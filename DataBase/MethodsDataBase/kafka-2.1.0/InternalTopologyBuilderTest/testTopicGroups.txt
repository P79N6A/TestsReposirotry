@Test public void testTopicGroups(){
  builder.setApplicationId("X");
  builder.addInternalTopic("topic-1x");
  builder.addSource(null,"source-1",null,null,null,"topic-1","topic-1x");
  builder.addSource(null,"source-2",null,null,null,"topic-2");
  builder.addSource(null,"source-3",null,null,null,"topic-3");
  builder.addSource(null,"source-4",null,null,null,"topic-4");
  builder.addSource(null,"source-5",null,null,null,"topic-5");
  builder.addProcessor("processor-1",new MockProcessorSupplier(),"source-1");
  builder.addProcessor("processor-2",new MockProcessorSupplier(),"source-2","processor-1");
  builder.copartitionSources(mkList("source-1","source-2"));
  builder.addProcessor("processor-3",new MockProcessorSupplier(),"source-3","source-4");
  final Map<Integer,InternalTopologyBuilder.TopicsInfo> topicGroups=builder.topicGroups();
  final Map<Integer,InternalTopologyBuilder.TopicsInfo> expectedTopicGroups=new HashMap<>();
  expectedTopicGroups.put(0,new InternalTopologyBuilder.TopicsInfo(Collections.<String>emptySet(),mkSet("topic-1","X-topic-1x","topic-2"),Collections.<String,InternalTopicConfig>emptyMap(),Collections.<String,InternalTopicConfig>emptyMap()));
  expectedTopicGroups.put(1,new InternalTopologyBuilder.TopicsInfo(Collections.<String>emptySet(),mkSet("topic-3","topic-4"),Collections.<String,InternalTopicConfig>emptyMap(),Collections.<String,InternalTopicConfig>emptyMap()));
  expectedTopicGroups.put(2,new InternalTopologyBuilder.TopicsInfo(Collections.<String>emptySet(),mkSet("topic-5"),Collections.<String,InternalTopicConfig>emptyMap(),Collections.<String,InternalTopicConfig>emptyMap()));
  assertEquals(3,topicGroups.size());
  assertEquals(expectedTopicGroups,topicGroups);
  final Collection<Set<String>> copartitionGroups=builder.copartitionGroups();
  assertEquals(mkSet(mkSet("topic-1","X-topic-1x","topic-2")),new HashSet<>(copartitionGroups));
}
