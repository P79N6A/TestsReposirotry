@Test public void shouldSortProcessorNodesCorrectly(){
  builder.addSource(null,"source1",null,null,null,"topic1");
  builder.addSource(null,"source2",null,null,null,"topic2");
  builder.addProcessor("processor1",new MockProcessorSupplier(),"source1");
  builder.addProcessor("processor2",new MockProcessorSupplier(),"source1","source2");
  builder.addProcessor("processor3",new MockProcessorSupplier(),"processor2");
  builder.addSink("sink1","topic2",null,null,null,"processor1","processor3");
  assertEquals(1,builder.describe().subtopologies().size());
  final Iterator<TopologyDescription.Node> iterator=((InternalTopologyBuilder.Subtopology)builder.describe().subtopologies().iterator().next()).nodesInOrder();
  assertTrue(iterator.hasNext());
  InternalTopologyBuilder.AbstractNode node=(InternalTopologyBuilder.AbstractNode)iterator.next();
  assertTrue(node.name.equals("source1"));
  assertEquals(6,node.size);
  assertTrue(iterator.hasNext());
  node=(InternalTopologyBuilder.AbstractNode)iterator.next();
  assertTrue(node.name.equals("source2"));
  assertEquals(4,node.size);
  assertTrue(iterator.hasNext());
  node=(InternalTopologyBuilder.AbstractNode)iterator.next();
  assertTrue(node.name.equals("processor2"));
  assertEquals(3,node.size);
  assertTrue(iterator.hasNext());
  node=(InternalTopologyBuilder.AbstractNode)iterator.next();
  assertTrue(node.name.equals("processor1"));
  assertEquals(2,node.size);
  assertTrue(iterator.hasNext());
  node=(InternalTopologyBuilder.AbstractNode)iterator.next();
  assertTrue(node.name.equals("processor3"));
  assertEquals(2,node.size);
  assertTrue(iterator.hasNext());
  node=(InternalTopologyBuilder.AbstractNode)iterator.next();
  assertTrue(node.name.equals("sink1"));
  assertEquals(1,node.size);
}
