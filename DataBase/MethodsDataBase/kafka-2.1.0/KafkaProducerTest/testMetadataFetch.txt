@Test public void testMetadataFetch() throws InterruptedException {
  Properties props=new Properties();
  props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9999");
  ProducerConfig config=new ProducerConfig(ProducerConfig.addSerializerToConfig(props,new StringSerializer(),new StringSerializer()));
  String topic="topic";
  Collection<Node> nodes=Collections.singletonList(new Node(0,"host1",1000));
  final Cluster emptyCluster=new Cluster(null,nodes,Collections.emptySet(),Collections.emptySet(),Collections.emptySet());
  final Cluster cluster=new Cluster("dummy",Collections.singletonList(new Node(0,"host1",1000)),Collections.singletonList(new PartitionInfo(topic,0,null,null,null)),Collections.emptySet(),Collections.emptySet());
  Metadata metadata=mock(Metadata.class);
  when(metadata.fetch()).thenReturn(emptyCluster,emptyCluster,emptyCluster,emptyCluster,cluster);
  KafkaProducer<String,String> producer=new KafkaProducer<String,String>(config,null,null,metadata,new MockClient(Time.SYSTEM,metadata),null,Time.SYSTEM){
    @Override Sender newSender(    LogContext logContext,    KafkaClient kafkaClient,    Metadata metadata){
      return super.newSender(logContext,kafkaClient,new Metadata(0,100_000,true));
    }
  }
;
  ProducerRecord<String,String> record=new ProducerRecord<>(topic,"value");
  producer.send(record);
  verify(metadata,times(4)).requestUpdate();
  verify(metadata,times(4)).awaitUpdate(anyInt(),anyLong());
  verify(metadata,times(5)).fetch();
  producer.send(record,null);
  verify(metadata,times(4)).requestUpdate();
  verify(metadata,times(4)).awaitUpdate(anyInt(),anyLong());
  verify(metadata,times(6)).fetch();
  producer.partitionsFor(topic);
  verify(metadata,times(4)).requestUpdate();
  verify(metadata,times(4)).awaitUpdate(anyInt(),anyLong());
  verify(metadata,times(7)).fetch();
  producer.close(0,TimeUnit.MILLISECONDS);
}
