@Test public void testSendToInvalidTopic() throws Exception {
  Properties props=new Properties();
  props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9000");
  props.put(ProducerConfig.MAX_BLOCK_MS_CONFIG,"15000");
  Time time=new MockTime();
  Cluster cluster=TestUtils.singletonCluster();
  Node node=cluster.nodes().get(0);
  Metadata metadata=new Metadata(0,Long.MAX_VALUE,true);
  metadata.update(cluster,Collections.emptySet(),time.milliseconds());
  MockClient client=new MockClient(time,metadata);
  client.setNode(node);
  Producer<String,String> producer=new KafkaProducer<>(new ProducerConfig(ProducerConfig.addSerializerToConfig(props,new StringSerializer(),new StringSerializer())),null,null,metadata,client,null,time);
  String invalidTopicName="topic abc";
  ProducerRecord<String,String> record=new ProducerRecord<>(invalidTopicName,"HelloKafka");
  Set<String> invalidTopic=new HashSet<>();
  invalidTopic.add(invalidTopicName);
  Cluster metaDataUpdateResponseCluster=new Cluster(cluster.clusterResource().clusterId(),cluster.nodes(),new ArrayList<>(0),Collections.emptySet(),invalidTopic,cluster.internalTopics(),cluster.controller());
  client.prepareMetadataUpdate(metaDataUpdateResponseCluster,Collections.emptySet());
  Future<RecordMetadata> future=producer.send(record);
  assertEquals("Cluster has incorrect invalid topic list",metaDataUpdateResponseCluster.invalidTopics(),metadata.fetch().invalidTopics());
  TestUtils.assertFutureError(future,InvalidTopicException.class);
  producer.close(0,TimeUnit.MILLISECONDS);
}
