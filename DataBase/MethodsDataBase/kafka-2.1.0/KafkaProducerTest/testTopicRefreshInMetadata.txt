@Test public void testTopicRefreshInMetadata() throws InterruptedException {
  Properties props=new Properties();
  props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9999");
  props.setProperty(ProducerConfig.MAX_BLOCK_MS_CONFIG,"600000");
  ProducerConfig config=new ProducerConfig(ProducerConfig.addSerializerToConfig(props,new StringSerializer(),new StringSerializer()));
  long refreshBackoffMs=500L;
  long metadataExpireMs=60000L;
  final Metadata metadata=new Metadata(refreshBackoffMs,metadataExpireMs,true,true,new ClusterResourceListeners());
  final Time time=new MockTime();
  final String topic="topic";
  try (KafkaProducer<String,String> producer=new KafkaProducer<>(config,null,null,metadata,null,null,time)){
    Thread t=new Thread(() -> {
      long startTimeMs=System.currentTimeMillis();
      for (int i=0; i < 10; i++) {
        while (!metadata.updateRequested() && System.currentTimeMillis() - startTimeMs < 1000)         Thread.yield();
        metadata.update(Cluster.empty(),Collections.singleton(topic),time.milliseconds());
        time.sleep(60 * 1000L);
      }
    }
);
    t.start();
    try {
      producer.partitionsFor(topic);
      fail("Expect TimeoutException");
    }
 catch (    TimeoutException e) {
    }
    t.join();
  }
   assertTrue("Topic should still exist in metadata",metadata.containsTopic(topic));
}
