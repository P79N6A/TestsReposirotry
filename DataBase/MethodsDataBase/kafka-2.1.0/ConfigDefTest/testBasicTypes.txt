@Test public void testBasicTypes(){
  ConfigDef def=new ConfigDef().define("a",Type.INT,5,Range.between(0,14),Importance.HIGH,"docs").define("b",Type.LONG,Importance.HIGH,"docs").define("c",Type.STRING,"hello",Importance.HIGH,"docs").define("d",Type.LIST,Importance.HIGH,"docs").define("e",Type.DOUBLE,Importance.HIGH,"docs").define("f",Type.CLASS,Importance.HIGH,"docs").define("g",Type.BOOLEAN,Importance.HIGH,"docs").define("h",Type.BOOLEAN,Importance.HIGH,"docs").define("i",Type.BOOLEAN,Importance.HIGH,"docs").define("j",Type.PASSWORD,Importance.HIGH,"docs");
  Properties props=new Properties();
  props.put("a","1   ");
  props.put("b",2);
  props.put("d"," a , b, c");
  props.put("e",42.5d);
  props.put("f",String.class.getName());
  props.put("g","true");
  props.put("h","FalSE");
  props.put("i","TRUE");
  props.put("j","password");
  Map<String,Object> vals=def.parse(props);
  assertEquals(1,vals.get("a"));
  assertEquals(2L,vals.get("b"));
  assertEquals("hello",vals.get("c"));
  assertEquals(asList("a","b","c"),vals.get("d"));
  assertEquals(42.5d,vals.get("e"));
  assertEquals(String.class,vals.get("f"));
  assertEquals(true,vals.get("g"));
  assertEquals(false,vals.get("h"));
  assertEquals(true,vals.get("i"));
  assertEquals(new Password("password"),vals.get("j"));
  assertEquals(Password.HIDDEN,vals.get("j").toString());
}
