@Test public void shouldAggregateSessionWindows(){
  final Map<Windowed<String>,Integer> results=new HashMap<>();
  final KTable<Windowed<String>,Integer> table=groupedStream.windowedBy(SessionWindows.with(ofMillis(30))).aggregate(new Initializer<Integer>(){
    @Override public Integer apply(){
      return 0;
    }
  }
,new Aggregator<String,String,Integer>(){
    @Override public Integer apply(    final String aggKey,    final String value,    final Integer aggregate){
      return aggregate + 1;
    }
  }
,new Merger<String,Integer>(){
    @Override public Integer apply(    final String aggKey,    final Integer aggOne,    final Integer aggTwo){
      return aggOne + aggTwo;
    }
  }
,Materialized.<String,Integer,SessionStore<Bytes,byte[]>>as("session-store").withValueSerde(Serdes.Integer()));
  table.toStream().foreach(new ForeachAction<Windowed<String>,Integer>(){
    @Override public void apply(    final Windowed<String> key,    final Integer value){
      results.put(key,value);
    }
  }
);
  doAggregateSessionWindows(results);
  assertEquals(table.queryableStoreName(),"session-store");
}
