@Test public void shouldAttemptToRejoinGroupAfterSyncGroupFailed() throws Exception {
  Time time=new MockTime();
  Cluster cluster=TestUtils.singletonCluster(topic,1);
  Node node=cluster.nodes().get(0);
  Metadata metadata=new Metadata(0,Long.MAX_VALUE,false);
  metadata.update(cluster,Collections.<String>emptySet(),time.milliseconds());
  MockClient client=new MockClient(time,metadata);
  client.setNode(node);
  PartitionAssignor assignor=new RoundRobinAssignor();
  KafkaConsumer<String,String> consumer=newConsumer(time,client,metadata,assignor,false);
  consumer.subscribe(singleton(topic),getConsumerRebalanceListener(consumer));
  client.prepareResponseFrom(new FindCoordinatorResponse(Errors.NONE,node),node);
  Node coordinator=new Node(Integer.MAX_VALUE - node.id(),node.host(),node.port());
  client.prepareResponseFrom(joinGroupFollowerResponse(assignor,1,"memberId","leaderId",Errors.NONE),coordinator);
  client.prepareResponseFrom(syncGroupResponse(singletonList(tp0),Errors.NONE),coordinator);
  client.prepareResponseFrom(fetchResponse(tp0,0,1),node);
  client.prepareResponseFrom(fetchResponse(tp0,1,0),node);
  consumer.updateAssignmentMetadataIfNeeded(time.timer(Long.MAX_VALUE));
  consumer.poll(Duration.ZERO);
  client.prepareResponseFrom(new MockClient.RequestMatcher(){
    @Override public boolean matches(    AbstractRequest body){
      return true;
    }
  }
,new HeartbeatResponse(Errors.REBALANCE_IN_PROGRESS),coordinator);
  final ByteBuffer byteBuffer=ConsumerProtocol.serializeSubscription(new PartitionAssignor.Subscription(singletonList(topic)));
  final JoinGroupResponse leaderResponse=new JoinGroupResponse(Errors.NONE,1,assignor.name(),"memberId","memberId",Collections.singletonMap("memberId",byteBuffer));
  client.prepareResponseFrom(leaderResponse,coordinator);
  client.prepareResponseFrom(syncGroupResponse(singletonList(tp0),Errors.NONE),coordinator,true);
  client.prepareResponseFrom(new FindCoordinatorResponse(Errors.NONE,node),node);
  client.prepareResponseFrom(joinGroupFollowerResponse(assignor,1,"memberId","leaderId",Errors.NONE),coordinator);
  client.prepareResponseFrom(syncGroupResponse(singletonList(tp0),Errors.NONE),coordinator);
  client.prepareResponseFrom(new MockClient.RequestMatcher(){
    @Override public boolean matches(    final AbstractRequest body){
      return body instanceof FetchRequest && ((FetchRequest)body).fetchData().containsKey(tp0);
    }
  }
,fetchResponse(tp0,1,1),node);
  time.sleep(heartbeatIntervalMs);
  Thread.sleep(heartbeatIntervalMs);
  consumer.updateAssignmentMetadataIfNeeded(time.timer(Long.MAX_VALUE));
  final ConsumerRecords<String,String> records=consumer.poll(Duration.ZERO);
  assertFalse(records.isEmpty());
  consumer.close(0,TimeUnit.MILLISECONDS);
}
