@Test public void testFetchProgressWithMissingPartitionPosition(){
  Time time=new MockTime();
  Cluster cluster=TestUtils.singletonCluster(topic,2);
  Node node=cluster.nodes().get(0);
  Metadata metadata=createMetadata();
  metadata.update(cluster,Collections.emptySet(),time.milliseconds());
  MockClient client=new MockClient(time,metadata);
  client.setNode(node);
  KafkaConsumer<String,String> consumer=newConsumerNoAutoCommit(time,client,metadata);
  consumer.assign(Arrays.asList(tp0,tp1));
  consumer.seekToEnd(singleton(tp0));
  consumer.seekToBeginning(singleton(tp1));
  client.prepareResponse(new MockClient.RequestMatcher(){
    @Override public boolean matches(    AbstractRequest body){
      ListOffsetRequest request=(ListOffsetRequest)body;
      Map<TopicPartition,ListOffsetRequest.PartitionData> timestamps=request.partitionTimestamps();
      return timestamps.get(tp0).timestamp == ListOffsetRequest.LATEST_TIMESTAMP && timestamps.get(tp1).timestamp == ListOffsetRequest.EARLIEST_TIMESTAMP;
    }
  }
,listOffsetsResponse(Collections.singletonMap(tp0,50L),Collections.singletonMap(tp1,Errors.NOT_LEADER_FOR_PARTITION)));
  client.prepareResponse(new MockClient.RequestMatcher(){
    @Override public boolean matches(    AbstractRequest body){
      FetchRequest request=(FetchRequest)body;
      return request.fetchData().keySet().equals(singleton(tp0)) && request.fetchData().get(tp0).fetchOffset == 50L;
    }
  }
,fetchResponse(tp0,50L,5));
  ConsumerRecords<String,String> records=consumer.poll(Duration.ofMillis(1));
  assertEquals(5,records.count());
  assertEquals(singleton(tp0),records.partitions());
}
