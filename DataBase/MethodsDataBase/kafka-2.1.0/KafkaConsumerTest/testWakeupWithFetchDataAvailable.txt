@Test public void testWakeupWithFetchDataAvailable() throws Exception {
  final Time time=new MockTime();
  Cluster cluster=TestUtils.singletonCluster(topic,1);
  Node node=cluster.nodes().get(0);
  Metadata metadata=createMetadata();
  metadata.update(cluster,Collections.<String>emptySet(),time.milliseconds());
  MockClient client=new MockClient(time,metadata);
  client.setNode(node);
  PartitionAssignor assignor=new RoundRobinAssignor();
  KafkaConsumer<String,String> consumer=newConsumer(time,client,metadata,assignor,true);
  consumer.subscribe(singleton(topic),getConsumerRebalanceListener(consumer));
  prepareRebalance(client,node,assignor,singletonList(tp0),null);
  consumer.updateAssignmentMetadataIfNeeded(time.timer(Long.MAX_VALUE));
  consumer.poll(Duration.ZERO);
  client.respondFrom(fetchResponse(tp0,0,5),node);
  client.poll(0,time.milliseconds());
  consumer.wakeup();
  try {
    consumer.poll(Duration.ZERO);
    fail();
  }
 catch (  WakeupException e) {
  }
  assertEquals(0,consumer.position(tp0));
  ConsumerRecords<String,String> records=consumer.poll(Duration.ZERO);
  assertEquals(5,records.count());
  final ScheduledExecutorService exec=Executors.newSingleThreadScheduledExecutor();
  exec.scheduleAtFixedRate(new Runnable(){
    @Override public void run(){
      time.sleep(sessionTimeoutMs);
    }
  }
,0L,10L,TimeUnit.MILLISECONDS);
  consumer.close();
  exec.shutdownNow();
  exec.awaitTermination(5L,TimeUnit.SECONDS);
}
