@Test public void testOffsetOfPausedPartitions(){
  Time time=new MockTime();
  Cluster cluster=TestUtils.singletonCluster(topic,2);
  Node node=cluster.nodes().get(0);
  Metadata metadata=createMetadata();
  metadata.update(cluster,Collections.<String>emptySet(),time.milliseconds());
  MockClient client=new MockClient(time,metadata);
  client.setNode(node);
  PartitionAssignor assignor=new RangeAssignor();
  KafkaConsumer<String,String> consumer=newConsumer(time,client,metadata,assignor,true);
  client.prepareResponseFrom(new FindCoordinatorResponse(Errors.NONE,node),node);
  Node coordinator=new Node(Integer.MAX_VALUE - node.id(),node.host(),node.port());
  Set<TopicPartition> partitions=Utils.mkSet(tp0,tp1);
  consumer.assign(partitions);
  assertEquals(partitions,consumer.assignment());
  consumer.pause(partitions);
  consumer.seekToEnd(partitions);
  Map<TopicPartition,Long> offsets=new HashMap<>();
  offsets.put(tp0,0L);
  offsets.put(tp1,0L);
  client.prepareResponseFrom(offsetResponse(offsets,Errors.NONE),coordinator);
  assertEquals(0,consumer.committed(tp0).offset());
  offsets.remove(tp0);
  offsets.put(tp1,0L);
  client.prepareResponseFrom(offsetResponse(offsets,Errors.NONE),coordinator);
  assertEquals(0,consumer.committed(tp1).offset());
  final Map<TopicPartition,Long> offsetResponse=new HashMap<>();
  offsetResponse.put(tp0,3L);
  offsetResponse.put(tp1,3L);
  client.prepareResponse(listOffsetsResponse(offsetResponse));
  assertEquals(3L,consumer.position(tp0));
  assertEquals(3L,consumer.position(tp1));
  client.requests().clear();
  consumer.unsubscribe();
  consumer.close();
}
