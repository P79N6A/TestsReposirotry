@Test public void shouldAddGlobalTablesToEachGroup(){
  final String one="globalTable";
  final String two="globalTable2";
  final MaterializedInternal<String,String,KeyValueStore<Bytes,byte[]>> materializedInternal=new MaterializedInternal<>(Materialized.as(one));
  materializedInternal.generateStoreNameIfNeeded(builder,storePrefix);
  final GlobalKTable<String,String> globalTable=builder.globalTable("table",consumed,materializedInternal);
  final MaterializedInternal<String,String,KeyValueStore<Bytes,byte[]>> materializedInternal2=new MaterializedInternal<>(Materialized.as(two));
  materializedInternal2.generateStoreNameIfNeeded(builder,storePrefix);
  final GlobalKTable<String,String> globalTable2=builder.globalTable("table2",consumed,materializedInternal2);
  final MaterializedInternal<String,String,KeyValueStore<Bytes,byte[]>> materializedInternalNotGlobal=new MaterializedInternal<>(Materialized.as("not-global"));
  materializedInternalNotGlobal.generateStoreNameIfNeeded(builder,storePrefix);
  builder.table("not-global",consumed,materializedInternalNotGlobal);
  final KeyValueMapper<String,String,String> kvMapper=(key,value) -> value;
  final KStream<String,String> stream=builder.stream(Collections.singleton("t1"),consumed);
  stream.leftJoin(globalTable,kvMapper,MockValueJoiner.TOSTRING_JOINER);
  final KStream<String,String> stream2=builder.stream(Collections.singleton("t2"),consumed);
  stream2.leftJoin(globalTable2,kvMapper,MockValueJoiner.TOSTRING_JOINER);
  final Map<Integer,Set<String>> nodeGroups=builder.internalTopologyBuilder.nodeGroups();
  for (  final Integer groupId : nodeGroups.keySet()) {
    final ProcessorTopology topology=builder.internalTopologyBuilder.build(groupId);
    final List<StateStore> stateStores=topology.globalStateStores();
    final Set<String> names=new HashSet<>();
    for (    final StateStore stateStore : stateStores) {
      names.add(stateStore.name());
    }
    assertEquals(2,stateStores.size());
    assertTrue(names.contains(one));
    assertTrue(names.contains(two));
  }
}
