@Test public void testPollHeartbeatAwakesHeartbeatThread() throws Exception {
  setupCoordinator(LONG_RETRY_BACKOFF_MS);
  mockClient.prepareResponse(groupCoordinatorResponse(node,Errors.NONE));
  mockClient.prepareResponse(joinGroupFollowerResponse(1,"memberId","leaderId",Errors.NONE));
  mockClient.prepareResponse(syncGroupResponse(Errors.NONE));
  coordinator.ensureActiveGroup();
  final CountDownLatch heartbeatDone=new CountDownLatch(1);
  mockClient.prepareResponse(new MockClient.RequestMatcher(){
    @Override public boolean matches(    AbstractRequest body){
      heartbeatDone.countDown();
      return body instanceof HeartbeatRequest;
    }
  }
,heartbeatResponse(Errors.NONE));
  mockTime.sleep(HEARTBEAT_INTERVAL_MS);
  coordinator.pollHeartbeat(mockTime.milliseconds());
  if (!heartbeatDone.await(1,TimeUnit.SECONDS)) {
    fail("Should have received a heartbeat request after calling pollHeartbeat");
  }
}
