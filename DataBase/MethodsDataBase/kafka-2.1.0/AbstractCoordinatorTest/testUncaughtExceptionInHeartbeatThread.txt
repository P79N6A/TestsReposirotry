@Test public void testUncaughtExceptionInHeartbeatThread() throws Exception {
  setupCoordinator();
  mockClient.prepareResponse(groupCoordinatorResponse(node,Errors.NONE));
  mockClient.prepareResponse(joinGroupFollowerResponse(1,"memberId","leaderId",Errors.NONE));
  mockClient.prepareResponse(syncGroupResponse(Errors.NONE));
  final RuntimeException e=new RuntimeException();
  mockClient.prepareResponse(new MockClient.RequestMatcher(){
    @Override public boolean matches(    AbstractRequest body){
      if (body instanceof HeartbeatRequest)       throw e;
      return false;
    }
  }
,heartbeatResponse(Errors.UNKNOWN_SERVER_ERROR));
  try {
    coordinator.ensureActiveGroup();
    mockTime.sleep(HEARTBEAT_INTERVAL_MS);
    long startMs=System.currentTimeMillis();
    while (System.currentTimeMillis() - startMs < 1000) {
      Thread.sleep(10);
      coordinator.pollHeartbeat(mockTime.milliseconds());
    }
    fail("Expected pollHeartbeat to raise an error in 1 second");
  }
 catch (  RuntimeException exception) {
    assertEquals(exception,e);
  }
}
