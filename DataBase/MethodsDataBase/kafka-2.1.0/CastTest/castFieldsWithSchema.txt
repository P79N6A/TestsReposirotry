@Test public void castFieldsWithSchema(){
  Date day=new Date(MILLIS_PER_DAY);
  xformValue.configure(Collections.singletonMap(Cast.SPEC_CONFIG,"int8:int16,int16:int32,int32:int64,int64:boolean,float32:float64,float64:boolean,boolean:int8,string:int32,bigdecimal:string,date:string,optional:int32"));
  SchemaBuilder builder=SchemaBuilder.struct();
  builder.field("int8",Schema.INT8_SCHEMA);
  builder.field("int16",Schema.OPTIONAL_INT16_SCHEMA);
  builder.field("int32",SchemaBuilder.int32().defaultValue(2).build());
  builder.field("int64",Schema.INT64_SCHEMA);
  builder.field("float32",Schema.FLOAT32_SCHEMA);
  builder.field("float64",SchemaBuilder.float64().defaultValue(-1.125).build());
  builder.field("boolean",Schema.BOOLEAN_SCHEMA);
  builder.field("string",Schema.STRING_SCHEMA);
  builder.field("bigdecimal",Decimal.schema(new BigDecimal(42).scale()));
  builder.field("date",Timestamp.SCHEMA);
  builder.field("optional",Schema.OPTIONAL_FLOAT32_SCHEMA);
  builder.field("timestamp",Timestamp.SCHEMA);
  Schema supportedTypesSchema=builder.build();
  Struct recordValue=new Struct(supportedTypesSchema);
  recordValue.put("int8",(byte)8);
  recordValue.put("int16",(short)16);
  recordValue.put("int32",32);
  recordValue.put("int64",(long)64);
  recordValue.put("float32",32.f);
  recordValue.put("float64",-64.);
  recordValue.put("boolean",true);
  recordValue.put("bigdecimal",new BigDecimal(42));
  recordValue.put("date",day);
  recordValue.put("string","42");
  recordValue.put("timestamp",new Date(0));
  SourceRecord transformed=xformValue.apply(new SourceRecord(null,null,"topic",0,supportedTypesSchema,recordValue));
  assertEquals((short)8,((Struct)transformed.value()).get("int8"));
  assertTrue(((Struct)transformed.value()).schema().field("int16").schema().isOptional());
  assertEquals(16,((Struct)transformed.value()).get("int16"));
  assertEquals((long)32,((Struct)transformed.value()).get("int32"));
  assertEquals(2L,((Struct)transformed.value()).schema().field("int32").schema().defaultValue());
  assertEquals(true,((Struct)transformed.value()).get("int64"));
  assertEquals(32.,((Struct)transformed.value()).get("float32"));
  assertEquals(true,((Struct)transformed.value()).get("float64"));
  assertEquals(true,((Struct)transformed.value()).schema().field("float64").schema().defaultValue());
  assertEquals((byte)1,((Struct)transformed.value()).get("boolean"));
  assertEquals(42,((Struct)transformed.value()).get("string"));
  assertEquals("42",((Struct)transformed.value()).get("bigdecimal"));
  assertEquals(Values.dateFormatFor(day).format(day),((Struct)transformed.value()).get("date"));
  assertEquals(new Date(0),((Struct)transformed.value()).get("timestamp"));
  assertNull(((Struct)transformed.value()).get("optional"));
  Schema transformedSchema=((Struct)transformed.value()).schema();
  assertEquals(Schema.INT16_SCHEMA.type(),transformedSchema.field("int8").schema().type());
  assertEquals(Schema.OPTIONAL_INT32_SCHEMA.type(),transformedSchema.field("int16").schema().type());
  assertEquals(Schema.INT64_SCHEMA.type(),transformedSchema.field("int32").schema().type());
  assertEquals(Schema.BOOLEAN_SCHEMA.type(),transformedSchema.field("int64").schema().type());
  assertEquals(Schema.FLOAT64_SCHEMA.type(),transformedSchema.field("float32").schema().type());
  assertEquals(Schema.BOOLEAN_SCHEMA.type(),transformedSchema.field("float64").schema().type());
  assertEquals(Schema.INT8_SCHEMA.type(),transformedSchema.field("boolean").schema().type());
  assertEquals(Schema.INT32_SCHEMA.type(),transformedSchema.field("string").schema().type());
  assertEquals(Schema.STRING_SCHEMA.type(),transformedSchema.field("bigdecimal").schema().type());
  assertEquals(Schema.STRING_SCHEMA.type(),transformedSchema.field("date").schema().type());
  assertEquals(Schema.OPTIONAL_INT32_SCHEMA.type(),transformedSchema.field("optional").schema().type());
  assertEquals(Timestamp.SCHEMA.type(),transformedSchema.field("timestamp").schema().type());
}
