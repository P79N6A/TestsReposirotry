@Test public void shouldKStreamGlobalKTableJoin() throws Exception {
  final KStream<String,String> streamTableJoin=stream.join(globalTable,keyMapper,joiner);
  streamTableJoin.foreach(foreachAction);
  produceInitialGlobalTableValues();
  startStreams();
  produceTopicValues(streamTopic);
  final Map<String,String> expected=new HashMap<>();
  expected.put("a","1+A");
  expected.put("b","2+B");
  expected.put("c","3+C");
  expected.put("d","4+D");
  TestUtils.waitForCondition(new TestCondition(){
    @Override public boolean conditionMet(){
      return results.equals(expected);
    }
  }
,30000L,"waiting for initial values");
  produceGlobalTableValues();
  final ReadOnlyKeyValueStore<Long,String> replicatedStore=kafkaStreams.store(globalStore,QueryableStoreTypes.<Long,String>keyValueStore());
  TestUtils.waitForCondition(new TestCondition(){
    @Override public boolean conditionMet(){
      return "J".equals(replicatedStore.get(5L));
    }
  }
,30000,"waiting for data in replicated store");
  produceTopicValues(streamTopic);
  expected.put("a","1+F");
  expected.put("b","2+G");
  expected.put("c","3+H");
  expected.put("d","4+I");
  expected.put("e","5+J");
  TestUtils.waitForCondition(new TestCondition(){
    @Override public boolean conditionMet(){
      return results.equals(expected);
    }
  }
,30000L,"waiting for final values");
}
