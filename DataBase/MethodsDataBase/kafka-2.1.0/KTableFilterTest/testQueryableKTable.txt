@Test public void testQueryableKTable(){
  final StreamsBuilder builder=new StreamsBuilder();
  final String topic1="topic1";
  final KTable<String,Integer> table1=builder.table(topic1,consumed);
  final KTable<String,Integer> table2=table1.filter(new Predicate<String,Integer>(){
    @Override public boolean test(    final String key,    final Integer value){
      return (value % 2) == 0;
    }
  }
,Materialized.<String,Integer,KeyValueStore<Bytes,byte[]>>as("anyStoreNameFilter"));
  final KTable<String,Integer> table3=table1.filterNot(new Predicate<String,Integer>(){
    @Override public boolean test(    final String key,    final Integer value){
      return (value % 2) == 0;
    }
  }
);
  assertEquals("anyStoreNameFilter",table2.queryableStoreName());
  assertNull(table3.queryableStoreName());
  doTestKTable(builder,table2,table3,topic1);
}
