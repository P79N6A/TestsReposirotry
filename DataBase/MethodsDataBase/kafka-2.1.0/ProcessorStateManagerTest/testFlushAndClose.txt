@Test public void testFlushAndClose() throws IOException {
  checkpoint.write(Collections.emptyMap());
  final HashMap<TopicPartition,Long> ackedOffsets=new HashMap<>();
  ackedOffsets.put(new TopicPartition(persistentStoreTopicName,1),123L);
  ackedOffsets.put(new TopicPartition(nonPersistentStoreTopicName,1),456L);
  ackedOffsets.put(new TopicPartition(ProcessorStateManager.storeChangelogTopic(applicationId,"otherTopic"),1),789L);
  final ProcessorStateManager stateMgr=new ProcessorStateManager(taskId,noPartitions,false,stateDirectory,new HashMap<String,String>(){
{
      put(persistentStoreName,persistentStoreTopicName);
      put(nonPersistentStoreName,nonPersistentStoreTopicName);
    }
  }
,changelogReader,false,logContext);
  try {
    assertFalse(checkpointFile.exists());
    stateMgr.register(persistentStore,persistentStore.stateRestoreCallback);
    stateMgr.register(nonPersistentStore,nonPersistentStore.stateRestoreCallback);
  }
  finally {
    stateMgr.flush();
    stateMgr.close(ackedOffsets);
  }
  assertTrue(persistentStore.flushed);
  assertTrue(persistentStore.closed);
  assertTrue(nonPersistentStore.flushed);
  assertTrue(nonPersistentStore.closed);
  assertTrue(checkpointFile.exists());
  final Map<TopicPartition,Long> checkpointedOffsets=checkpoint.read();
  assertEquals(1,checkpointedOffsets.size());
  assertEquals(new Long(124),checkpointedOffsets.get(new TopicPartition(persistentStoreTopicName,1)));
}
