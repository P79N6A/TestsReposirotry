@Test public void testChangeLogOffsets() throws IOException {
  final TaskId taskId=new TaskId(0,0);
  final long lastCheckpointedOffset=10L;
  final String storeName1="store1";
  final String storeName2="store2";
  final String storeName3="store3";
  final String storeTopicName1=ProcessorStateManager.storeChangelogTopic(applicationId,storeName1);
  final String storeTopicName2=ProcessorStateManager.storeChangelogTopic(applicationId,storeName2);
  final String storeTopicName3=ProcessorStateManager.storeChangelogTopic(applicationId,storeName3);
  final Map<String,String> storeToChangelogTopic=new HashMap<>();
  storeToChangelogTopic.put(storeName1,storeTopicName1);
  storeToChangelogTopic.put(storeName2,storeTopicName2);
  storeToChangelogTopic.put(storeName3,storeTopicName3);
  final OffsetCheckpoint checkpoint=new OffsetCheckpoint(new File(stateDirectory.directoryForTask(taskId),ProcessorStateManager.CHECKPOINT_FILE_NAME));
  checkpoint.write(Collections.singletonMap(new TopicPartition(storeTopicName1,0),lastCheckpointedOffset));
  final TopicPartition partition1=new TopicPartition(storeTopicName1,0);
  final TopicPartition partition2=new TopicPartition(storeTopicName2,0);
  final TopicPartition partition3=new TopicPartition(storeTopicName3,1);
  final MockKeyValueStore store1=new MockKeyValueStore(storeName1,true);
  final MockKeyValueStore store2=new MockKeyValueStore(storeName2,true);
  final MockKeyValueStore store3=new MockKeyValueStore(storeName3,true);
  final Set<TopicPartition> sourcePartitions=Utils.mkSet(new TopicPartition(storeTopicName3,1));
  final ProcessorStateManager stateMgr=new ProcessorStateManager(taskId,sourcePartitions,true,stateDirectory,storeToChangelogTopic,changelogReader,false,logContext);
  try {
    stateMgr.register(store1,store1.stateRestoreCallback);
    stateMgr.register(store2,store2.stateRestoreCallback);
    stateMgr.register(store3,store3.stateRestoreCallback);
    final Map<TopicPartition,Long> changeLogOffsets=stateMgr.checkpointed();
    assertEquals(3,changeLogOffsets.size());
    assertTrue(changeLogOffsets.containsKey(partition1));
    assertTrue(changeLogOffsets.containsKey(partition2));
    assertTrue(changeLogOffsets.containsKey(partition3));
    assertEquals(lastCheckpointedOffset,(long)changeLogOffsets.get(partition1));
    assertEquals(-1L,(long)changeLogOffsets.get(partition2));
    assertEquals(-1L,(long)changeLogOffsets.get(partition3));
  }
  finally {
    stateMgr.close(Collections.emptyMap());
  }
}
