@Test public void finalResultsSuppressionShouldBufferAndEmitAtGraceExpiration(){
  final Harness<Windowed<String>,Long> harness=new Harness<>(finalResults(ofMillis(1L)),timeWindowedSerdeFrom(String.class,1L),Long());
  final MockInternalProcessorContext context=harness.context;
  final KTableSuppressProcessor<Windowed<String>,Long> processor=harness.processor;
  final long windowStart=99L;
  final long recordTime=99L;
  final long windowEnd=100L;
  context.setRecordMetadata("topic",0,0,null,recordTime);
  context.setStreamTime(recordTime);
  final Windowed<String> key=new Windowed<>("hey",new TimeWindow(windowStart,windowEnd));
  final Change<Long> value=ARBITRARY_CHANGE;
  processor.process(key,value);
  assertThat(context.forwarded(),hasSize(0));
  final long windowStart2=100L;
  final long recordTime2=100L;
  final long windowEnd2=101L;
  context.setRecordMetadata("topic",0,1,null,recordTime2);
  context.setStreamTime(recordTime2);
  processor.process(new Windowed<>("dummyKey1",new TimeWindow(windowStart2,windowEnd2)),ARBITRARY_CHANGE);
  assertThat(context.forwarded(),hasSize(0));
  final long windowStart3=101L;
  final long recordTime3=101L;
  final long windowEnd3=102L;
  context.setRecordMetadata("topic",0,1,null,recordTime3);
  context.setStreamTime(recordTime3);
  processor.process(new Windowed<>("dummyKey2",new TimeWindow(windowStart3,windowEnd3)),ARBITRARY_CHANGE);
  assertThat(context.forwarded(),hasSize(1));
  final MockProcessorContext.CapturedForward capturedForward=context.forwarded().get(0);
  assertThat(capturedForward.keyValue(),is(new KeyValue<>(key,value)));
  assertThat(capturedForward.timestamp(),is(recordTime));
}
