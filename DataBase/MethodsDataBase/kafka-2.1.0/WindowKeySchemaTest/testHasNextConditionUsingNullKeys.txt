@Test public void testHasNextConditionUsingNullKeys(){
  final List<KeyValue<Bytes,Integer>> keys=Arrays.asList(KeyValue.pair(WindowKeySchema.toStoreKeyBinary(new Windowed<>(Bytes.wrap(new byte[]{0,0}),new TimeWindow(0,1)),0),1),KeyValue.pair(WindowKeySchema.toStoreKeyBinary(new Windowed<>(Bytes.wrap(new byte[]{0}),new TimeWindow(0,1)),0),2),KeyValue.pair(WindowKeySchema.toStoreKeyBinary(new Windowed<>(Bytes.wrap(new byte[]{0,0,0}),new TimeWindow(0,1)),0),3),KeyValue.pair(WindowKeySchema.toStoreKeyBinary(new Windowed<>(Bytes.wrap(new byte[]{0}),new TimeWindow(10,20)),4),4),KeyValue.pair(WindowKeySchema.toStoreKeyBinary(new Windowed<>(Bytes.wrap(new byte[]{0,0}),new TimeWindow(10,20)),5),5),KeyValue.pair(WindowKeySchema.toStoreKeyBinary(new Windowed<>(Bytes.wrap(new byte[]{0,0,0}),new TimeWindow(10,20)),6),6));
  final DelegatingPeekingKeyValueIterator<Bytes,Integer> iterator=new DelegatingPeekingKeyValueIterator<>("foo",new KeyValueIteratorStub<>(keys.iterator()));
  final HasNextCondition hasNextCondition=windowKeySchema.hasNextCondition(null,null,0,Long.MAX_VALUE);
  final List<Integer> results=new ArrayList<>();
  while (hasNextCondition.hasNext(iterator)) {
    results.add(iterator.next().value);
  }
  assertThat(results,equalTo(Arrays.asList(1,2,3,4,5,6)));
}
