@Test public void testMetadataRetries() throws Exception {
  String topic="topic";
  MockClient mockClient=new MockClient(Time.SYSTEM);
  Cluster bootstrapCluster=Cluster.bootstrap(singletonList(new InetSocketAddress("localhost",9999)));
  Cluster initializedCluster=mockCluster(0);
  mockClient.setNode(bootstrapCluster.nodes().get(0));
  try (final AdminClientUnitTestEnv env=new AdminClientUnitTestEnv(mockClient,Time.SYSTEM,bootstrapCluster,newStrMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9999",AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG,"10000000",AdminClientConfig.RETRIES_CONFIG,"0"))){
    env.kafkaClient().prepareResponse(null,true);
    env.kafkaClient().prepareResponse(new MetadataResponse(initializedCluster.nodes(),initializedCluster.clusterResource().clusterId(),initializedCluster.controller().id(),Collections.emptyList()));
    Node leader=initializedCluster.nodes().get(0);
    MetadataResponse.PartitionMetadata partitionMetadata=new MetadataResponse.PartitionMetadata(Errors.NONE,0,leader,Optional.of(10),singletonList(leader),singletonList(leader),singletonList(leader));
    env.kafkaClient().prepareResponse(new MetadataResponse(initializedCluster.nodes(),initializedCluster.clusterResource().clusterId(),1,singletonList(new MetadataResponse.TopicMetadata(Errors.NONE,topic,false,singletonList(partitionMetadata)))));
    DescribeTopicsResult result=env.adminClient().describeTopics(Collections.singleton(topic));
    Map<String,TopicDescription> topicDescriptions=result.all().get();
    assertEquals(leader,topicDescriptions.get(topic).partitions().get(0).leader());
  }
 }
