@Test public void testDeleteTopics() throws Exception {
  try (AdminClientUnitTestEnv env=mockClientEnv()){
    env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());
    env.kafkaClient().setNode(env.cluster().controller());
    env.kafkaClient().prepareResponse(body -> body instanceof DeleteTopicsRequest,new DeleteTopicsResponse(Collections.singletonMap("myTopic",Errors.NONE)));
    KafkaFuture<Void> future=env.adminClient().deleteTopics(Collections.singletonList("myTopic"),new DeleteTopicsOptions()).all();
    future.get();
    env.kafkaClient().prepareResponse(body -> body instanceof DeleteTopicsRequest,new DeleteTopicsResponse(Collections.singletonMap("myTopic",Errors.TOPIC_DELETION_DISABLED)));
    future=env.adminClient().deleteTopics(Collections.singletonList("myTopic"),new DeleteTopicsOptions()).all();
    TestUtils.assertFutureError(future,TopicDeletionDisabledException.class);
    env.kafkaClient().prepareResponse(body -> body instanceof DeleteTopicsRequest,new DeleteTopicsResponse(Collections.singletonMap("myTopic",Errors.UNKNOWN_TOPIC_OR_PARTITION)));
    future=env.adminClient().deleteTopics(Collections.singletonList("myTopic"),new DeleteTopicsOptions()).all();
    TestUtils.assertFutureError(future,UnknownTopicOrPartitionException.class);
  }
 }
