@Test public void testDescribeConsumerGroups() throws Exception {
  final HashMap<Integer,Node> nodes=new HashMap<>();
  nodes.put(0,new Node(0,"localhost",8121));
  final Cluster cluster=new Cluster("mockClusterId",nodes.values(),Collections.<PartitionInfo>emptyList(),Collections.<String>emptySet(),Collections.<String>emptySet(),nodes.get(0));
  try (AdminClientUnitTestEnv env=new AdminClientUnitTestEnv(cluster)){
    env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());
    env.kafkaClient().setNode(env.cluster().controller());
    env.kafkaClient().prepareResponse(new FindCoordinatorResponse(Errors.NONE,env.cluster().controller()));
    final Map<String,DescribeGroupsResponse.GroupMetadata> groupMetadataMap=new HashMap<>();
    TopicPartition myTopicPartition0=new TopicPartition("my_topic",0);
    TopicPartition myTopicPartition1=new TopicPartition("my_topic",1);
    TopicPartition myTopicPartition2=new TopicPartition("my_topic",2);
    final List<TopicPartition> topicPartitions=new ArrayList<>();
    topicPartitions.add(0,myTopicPartition0);
    topicPartitions.add(1,myTopicPartition1);
    topicPartitions.add(2,myTopicPartition2);
    final ByteBuffer memberAssignment=ConsumerProtocol.serializeAssignment(new PartitionAssignor.Assignment(topicPartitions));
    groupMetadataMap.put("group-0",new DescribeGroupsResponse.GroupMetadata(Errors.NONE,"",ConsumerProtocol.PROTOCOL_TYPE,"",asList(new DescribeGroupsResponse.GroupMember("0","clientId0","clientHost",null,memberAssignment),new DescribeGroupsResponse.GroupMember("1","clientId1","clientHost",null,memberAssignment))));
    groupMetadataMap.put("group-connect-0",new DescribeGroupsResponse.GroupMetadata(Errors.NONE,"","connect","",asList(new DescribeGroupsResponse.GroupMember("0","clientId0","clientHost",null,memberAssignment),new DescribeGroupsResponse.GroupMember("1","clientId1","clientHost",null,memberAssignment))));
    env.kafkaClient().prepareResponse(new DescribeGroupsResponse(groupMetadataMap));
    final DescribeConsumerGroupsResult result=env.adminClient().describeConsumerGroups(singletonList("group-0"));
    final ConsumerGroupDescription groupDescription=result.describedGroups().get("group-0").get();
    assertEquals(1,result.describedGroups().size());
    assertEquals("group-0",groupDescription.groupId());
    assertEquals(2,groupDescription.members().size());
  }
 }
