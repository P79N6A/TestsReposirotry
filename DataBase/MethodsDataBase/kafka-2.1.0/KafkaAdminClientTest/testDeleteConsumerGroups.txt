@Test public void testDeleteConsumerGroups() throws Exception {
  final HashMap<Integer,Node> nodes=new HashMap<>();
  nodes.put(0,new Node(0,"localhost",8121));
  final Cluster cluster=new Cluster("mockClusterId",nodes.values(),Collections.<PartitionInfo>emptyList(),Collections.<String>emptySet(),Collections.<String>emptySet(),nodes.get(0));
  final List<String> groupIds=singletonList("group-0");
  try (AdminClientUnitTestEnv env=new AdminClientUnitTestEnv(cluster)){
    env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());
    env.kafkaClient().setNode(env.cluster().controller());
    env.kafkaClient().prepareResponse(new FindCoordinatorResponse(Errors.COORDINATOR_NOT_AVAILABLE,Node.noNode()));
    env.kafkaClient().prepareResponse(new FindCoordinatorResponse(Errors.COORDINATOR_LOAD_IN_PROGRESS,Node.noNode()));
    env.kafkaClient().prepareResponse(new FindCoordinatorResponse(Errors.NONE,env.cluster().controller()));
    final Map<String,Errors> response=new HashMap<>();
    response.put("group-0",Errors.NONE);
    env.kafkaClient().prepareResponse(new DeleteGroupsResponse(response));
    final DeleteConsumerGroupsResult result=env.adminClient().deleteConsumerGroups(groupIds);
    final KafkaFuture<Void> results=result.deletedGroups().get("group-0");
    assertNull(results.get());
    env.kafkaClient().prepareResponse(new FindCoordinatorResponse(Errors.GROUP_AUTHORIZATION_FAILED,Node.noNode()));
    final DeleteConsumerGroupsResult errorResult=env.adminClient().deleteConsumerGroups(groupIds);
    TestUtils.assertFutureError(errorResult.deletedGroups().get("group-0"),GroupAuthorizationException.class);
  }
 }
