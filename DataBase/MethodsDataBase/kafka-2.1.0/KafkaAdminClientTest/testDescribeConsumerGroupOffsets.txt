@Test public void testDescribeConsumerGroupOffsets() throws Exception {
  final HashMap<Integer,Node> nodes=new HashMap<>();
  nodes.put(0,new Node(0,"localhost",8121));
  final Cluster cluster=new Cluster("mockClusterId",nodes.values(),Collections.emptyList(),Collections.emptySet(),Collections.emptySet(),nodes.get(0));
  try (AdminClientUnitTestEnv env=new AdminClientUnitTestEnv(cluster)){
    env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());
    env.kafkaClient().setNode(env.cluster().controller());
    env.kafkaClient().prepareResponse(new FindCoordinatorResponse(Errors.NONE,env.cluster().controller()));
    TopicPartition myTopicPartition0=new TopicPartition("my_topic",0);
    TopicPartition myTopicPartition1=new TopicPartition("my_topic",1);
    TopicPartition myTopicPartition2=new TopicPartition("my_topic",2);
    final Map<TopicPartition,OffsetFetchResponse.PartitionData> responseData=new HashMap<>();
    responseData.put(myTopicPartition0,new OffsetFetchResponse.PartitionData(10,Optional.empty(),"",Errors.NONE));
    responseData.put(myTopicPartition1,new OffsetFetchResponse.PartitionData(0,Optional.empty(),"",Errors.NONE));
    responseData.put(myTopicPartition2,new OffsetFetchResponse.PartitionData(20,Optional.empty(),"",Errors.NONE));
    env.kafkaClient().prepareResponse(new OffsetFetchResponse(Errors.NONE,responseData));
    final ListConsumerGroupOffsetsResult result=env.adminClient().listConsumerGroupOffsets("group-0");
    final Map<TopicPartition,OffsetAndMetadata> partitionToOffsetAndMetadata=result.partitionsToOffsetAndMetadata().get();
    assertEquals(3,partitionToOffsetAndMetadata.size());
    assertEquals(10,partitionToOffsetAndMetadata.get(myTopicPartition0).offset());
    assertEquals(0,partitionToOffsetAndMetadata.get(myTopicPartition1).offset());
    assertEquals(20,partitionToOffsetAndMetadata.get(myTopicPartition2).offset());
  }
 }
