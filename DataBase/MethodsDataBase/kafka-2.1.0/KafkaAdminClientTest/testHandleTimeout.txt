/** 
 * Test handling timeouts.
 */
@Ignore @Test public void testHandleTimeout() throws Exception {
  HashMap<Integer,Node> nodes=new HashMap<>();
  MockTime time=new MockTime();
  nodes.put(0,new Node(0,"localhost",8121));
  Cluster cluster=new Cluster("mockClusterId",nodes.values(),Collections.<PartitionInfo>emptySet(),Collections.<String>emptySet(),Collections.<String>emptySet(),nodes.get(0));
  try (AdminClientUnitTestEnv env=new AdminClientUnitTestEnv(time,cluster,AdminClientConfig.RECONNECT_BACKOFF_MAX_MS_CONFIG,"1",AdminClientConfig.RECONNECT_BACKOFF_MS_CONFIG,"1")){
    env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());
    env.kafkaClient().setNode(nodes.get(0));
    assertEquals(time,env.time());
    assertEquals(env.time(),((KafkaAdminClient)env.adminClient()).time());
    log.info("Starting AdminClient#listTopics...");
    final ListTopicsResult result=env.adminClient().listTopics(new ListTopicsOptions().timeoutMs(1000));
    TestUtils.waitForCondition(new TestCondition(){
      @Override public boolean conditionMet(){
        return env.kafkaClient().hasInFlightRequests();
      }
    }
,"Timed out waiting for inFlightRequests");
    time.sleep(5000);
    TestUtils.waitForCondition(new TestCondition(){
      @Override public boolean conditionMet(){
        return result.listings().isDone();
      }
    }
,"Timed out waiting for listTopics to complete");
    TestUtils.assertFutureError(result.listings(),TimeoutException.class);
    log.info("Verified the error result of AdminClient#listTopics");
    time.sleep(5000);
    env.kafkaClient().prepareResponse(new DescribeConfigsResponse(0,Collections.singletonMap(new ConfigResource(ConfigResource.Type.TOPIC,"foo"),new DescribeConfigsResponse.Config(ApiError.NONE,Collections.emptySet()))));
    DescribeConfigsResult result2=env.adminClient().describeConfigs(Collections.singleton(new ConfigResource(ConfigResource.Type.TOPIC,"foo")));
    time.sleep(5000);
    result2.values().get(new ConfigResource(ConfigResource.Type.TOPIC,"foo")).get();
  }
 }
