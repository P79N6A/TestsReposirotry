@Test public void testInvalidTopicNames() throws Exception {
  try (AdminClientUnitTestEnv env=mockClientEnv()){
    env.kafkaClient().setNodeApiVersions(NodeApiVersions.create());
    env.kafkaClient().setNode(env.cluster().controller());
    List<String> sillyTopicNames=asList("",null);
    Map<String,KafkaFuture<Void>> deleteFutures=env.adminClient().deleteTopics(sillyTopicNames).values();
    for (    String sillyTopicName : sillyTopicNames) {
      TestUtils.assertFutureError(deleteFutures.get(sillyTopicName),InvalidTopicException.class);
    }
    assertEquals(0,env.kafkaClient().inFlightRequestCount());
    Map<String,KafkaFuture<TopicDescription>> describeFutures=env.adminClient().describeTopics(sillyTopicNames).values();
    for (    String sillyTopicName : sillyTopicNames) {
      TestUtils.assertFutureError(describeFutures.get(sillyTopicName),InvalidTopicException.class);
    }
    assertEquals(0,env.kafkaClient().inFlightRequestCount());
    List<NewTopic> newTopics=new ArrayList<>();
    for (    String sillyTopicName : sillyTopicNames) {
      newTopics.add(new NewTopic(sillyTopicName,1,(short)1));
    }
    Map<String,KafkaFuture<Void>> createFutures=env.adminClient().createTopics(newTopics).values();
    for (    String sillyTopicName : sillyTopicNames) {
      TestUtils.assertFutureError(createFutures.get(sillyTopicName),InvalidTopicException.class);
    }
    assertEquals(0,env.kafkaClient().inFlightRequestCount());
  }
 }
