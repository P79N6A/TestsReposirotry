@Test public void shouldReturnFalseOnCloseWhenThreadsHaventTerminated() throws Exception {
  final AtomicBoolean keepRunning=new AtomicBoolean(true);
  KafkaStreams streams=null;
  try {
    final StreamsBuilder builder=new StreamsBuilder();
    final CountDownLatch latch=new CountDownLatch(1);
    final String topic="input";
    CLUSTER.createTopics(topic);
    builder.stream(topic,Consumed.with(Serdes.String(),Serdes.String())).foreach((key,value) -> {
      try {
        latch.countDown();
        while (keepRunning.get()) {
          Thread.sleep(10);
        }
      }
 catch (      final InterruptedException e) {
      }
    }
);
    streams=new KafkaStreams(builder.build(),props);
    streams.start();
    IntegrationTestUtils.produceKeyValuesSynchronouslyWithTimestamp(topic,Collections.singletonList(new KeyValue<>("A","A")),TestUtils.producerConfig(CLUSTER.bootstrapServers(),StringSerializer.class,StringSerializer.class,new Properties()),System.currentTimeMillis());
    assertTrue("Timed out waiting to receive single message",latch.await(30,TimeUnit.SECONDS));
    assertFalse(streams.close(Duration.ofMillis(10)));
  }
  finally {
    keepRunning.set(false);
    if (streams != null) {
      streams.close();
    }
  }
}
