@Test public void testStateThreadClose() throws Exception {
  builder.globalTable("anyTopic");
  final KafkaStreams streams=new KafkaStreams(builder.build(),props);
  try {
    final java.lang.reflect.Field threadsField=streams.getClass().getDeclaredField("threads");
    threadsField.setAccessible(true);
    final StreamThread[] threads=(StreamThread[])threadsField.get(streams);
    assertEquals(NUM_THREADS,threads.length);
    assertEquals(streams.state(),KafkaStreams.State.CREATED);
    streams.start();
    TestUtils.waitForCondition(() -> streams.state() == KafkaStreams.State.RUNNING,10 * 1000,"Streams never started.");
    for (int i=0; i < NUM_THREADS; i++) {
      final StreamThread tmpThread=threads[i];
      tmpThread.shutdown();
      TestUtils.waitForCondition(() -> tmpThread.state() == StreamThread.State.DEAD,10 * 1000,"Thread never stopped.");
      threads[i].join();
    }
    TestUtils.waitForCondition(() -> streams.state() == KafkaStreams.State.ERROR,10 * 1000,"Streams never stopped.");
  }
  finally {
    streams.close();
  }
  TestUtils.waitForCondition(() -> streams.state() == KafkaStreams.State.NOT_RUNNING,10 * 1000,"Streams never stopped.");
  final java.lang.reflect.Field globalThreadField=streams.getClass().getDeclaredField("globalStreamThread");
  globalThreadField.setAccessible(true);
  final GlobalStreamThread globalStreamThread=(GlobalStreamThread)globalThreadField.get(streams);
  assertNull(globalStreamThread);
}
