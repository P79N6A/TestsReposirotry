@Test public void testOptionalAndDefaultValuesNested(){
  xformValue.configure(Collections.<String,String>emptyMap());
  SchemaBuilder builder=SchemaBuilder.struct().optional();
  builder.field("req_field",Schema.STRING_SCHEMA);
  builder.field("opt_field",SchemaBuilder.string().optional().defaultValue("child_default").build());
  Struct childDefaultValue=new Struct(builder);
  childDefaultValue.put("req_field","req_default");
  builder.defaultValue(childDefaultValue);
  Schema schema=builder.build();
  Struct value=new Struct(schema);
  SourceRecord transformed=xformValue.apply(new SourceRecord(null,null,"topic",0,schema,value));
  assertNotNull(transformed);
  Schema transformedSchema=transformed.valueSchema();
  assertEquals(Schema.Type.STRUCT,transformedSchema.type());
  assertEquals(2,transformedSchema.fields().size());
  Schema transformedReqFieldSchema=SchemaBuilder.string().optional().defaultValue("req_default").build();
  assertEquals(transformedReqFieldSchema,transformedSchema.field("req_field").schema());
  Schema transformedOptFieldSchema=SchemaBuilder.string().optional().defaultValue("child_default").build();
  assertEquals(transformedOptFieldSchema,transformedSchema.field("opt_field").schema());
}
