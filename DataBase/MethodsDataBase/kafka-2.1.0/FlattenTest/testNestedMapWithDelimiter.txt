@Test public void testNestedMapWithDelimiter(){
  xformValue.configure(Collections.singletonMap("delimiter","#"));
  Map<String,Object> supportedTypes=new HashMap<>();
  supportedTypes.put("int8",(byte)8);
  supportedTypes.put("int16",(short)16);
  supportedTypes.put("int32",32);
  supportedTypes.put("int64",(long)64);
  supportedTypes.put("float32",32.f);
  supportedTypes.put("float64",64.);
  supportedTypes.put("boolean",true);
  supportedTypes.put("string","stringy");
  supportedTypes.put("bytes","bytes".getBytes());
  Map<String,Object> oneLevelNestedMap=Collections.singletonMap("B",(Object)supportedTypes);
  Map<String,Object> twoLevelNestedMap=Collections.singletonMap("A",(Object)oneLevelNestedMap);
  SourceRecord transformed=xformValue.apply(new SourceRecord(null,null,"topic",0,null,twoLevelNestedMap));
  assertNull(transformed.valueSchema());
  assertTrue(transformed.value() instanceof Map);
  Map<String,Object> transformedMap=(Map<String,Object>)transformed.value();
  assertEquals(9,transformedMap.size());
  assertEquals((byte)8,transformedMap.get("A#B#int8"));
  assertEquals((short)16,transformedMap.get("A#B#int16"));
  assertEquals(32,transformedMap.get("A#B#int32"));
  assertEquals((long)64,transformedMap.get("A#B#int64"));
  assertEquals(32.f,(float)transformedMap.get("A#B#float32"),0.f);
  assertEquals(64.,(double)transformedMap.get("A#B#float64"),0.);
  assertEquals(true,transformedMap.get("A#B#boolean"));
  assertEquals("stringy",transformedMap.get("A#B#string"));
  assertArrayEquals("bytes".getBytes(),(byte[])transformedMap.get("A#B#bytes"));
}
