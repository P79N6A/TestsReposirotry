@Test public void testTimeTracking(){
  assertEquals(0,group.numBuffered());
  final List<ConsumerRecord<byte[],byte[]>> list1=Arrays.asList(new ConsumerRecord<>("topic",1,1L,recordKey,recordValue),new ConsumerRecord<>("topic",1,3L,recordKey,recordValue),new ConsumerRecord<>("topic",1,5L,recordKey,recordValue));
  group.addRawRecords(partition1,list1);
  final List<ConsumerRecord<byte[],byte[]>> list2=Arrays.asList(new ConsumerRecord<>("topic",2,2L,recordKey,recordValue),new ConsumerRecord<>("topic",2,4L,recordKey,recordValue),new ConsumerRecord<>("topic",2,6L,recordKey,recordValue));
  group.addRawRecords(partition2,list2);
  verifyBuffered(6,3,3);
  assertEquals(-1L,group.timestamp());
  assertEquals(0.0,metrics.metric(lastLatenessValue).metricValue());
  StampedRecord record;
  final PartitionGroup.RecordInfo info=new PartitionGroup.RecordInfo();
  record=group.nextRecord(info);
  assertEquals(partition1,info.partition());
  verifyTimes(record,1L,1L);
  verifyBuffered(5,2,3);
  assertEquals(0.0,metrics.metric(lastLatenessValue).metricValue());
  record=group.nextRecord(info);
  assertEquals(partition2,info.partition());
  verifyTimes(record,2L,2L);
  verifyBuffered(4,2,2);
  assertEquals(0.0,metrics.metric(lastLatenessValue).metricValue());
  final List<ConsumerRecord<byte[],byte[]>> list3=Arrays.asList(new ConsumerRecord<>("topic",1,2L,recordKey,recordValue),new ConsumerRecord<>("topic",1,4L,recordKey,recordValue));
  group.addRawRecords(partition1,list3);
  verifyBuffered(6,4,2);
  assertEquals(2L,group.timestamp());
  assertEquals(0.0,metrics.metric(lastLatenessValue).metricValue());
  record=group.nextRecord(info);
  assertEquals(partition1,info.partition());
  verifyTimes(record,3L,3L);
  verifyBuffered(5,3,2);
  assertEquals(0.0,metrics.metric(lastLatenessValue).metricValue());
  record=group.nextRecord(info);
  assertEquals(partition2,info.partition());
  verifyTimes(record,4L,4L);
  verifyBuffered(4,3,1);
  assertEquals(0.0,metrics.metric(lastLatenessValue).metricValue());
  record=group.nextRecord(info);
  assertEquals(partition1,info.partition());
  verifyTimes(record,5L,5L);
  verifyBuffered(3,2,1);
  assertEquals(0.0,metrics.metric(lastLatenessValue).metricValue());
  record=group.nextRecord(info);
  assertEquals(partition1,info.partition());
  verifyTimes(record,2L,5L);
  verifyBuffered(2,1,1);
  assertEquals(3.0,metrics.metric(lastLatenessValue).metricValue());
  record=group.nextRecord(info);
  assertEquals(partition1,info.partition());
  verifyTimes(record,4L,5L);
  verifyBuffered(1,0,1);
  assertEquals(1.0,metrics.metric(lastLatenessValue).metricValue());
  record=group.nextRecord(info);
  assertEquals(partition2,info.partition());
  verifyTimes(record,6L,6L);
  verifyBuffered(0,0,0);
  assertEquals(0.0,metrics.metric(lastLatenessValue).metricValue());
}
