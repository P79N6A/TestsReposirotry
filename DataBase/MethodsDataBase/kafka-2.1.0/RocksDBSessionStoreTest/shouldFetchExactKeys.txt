@Test public void shouldFetchExactKeys(){
  final RocksDBSegmentedBytesStore bytesStore=new RocksDBSegmentedBytesStore("session-store","metrics-scope",0x7a00000000000000L,0x7a00000000000000L,new SessionKeySchema());
  sessionStore=new RocksDBSessionStore<>(bytesStore,Serdes.String(),Serdes.Long());
  sessionStore.init(context,sessionStore);
  sessionStore.put(new Windowed<>("a",new SessionWindow(0,0)),1L);
  sessionStore.put(new Windowed<>("aa",new SessionWindow(0,0)),2L);
  sessionStore.put(new Windowed<>("a",new SessionWindow(10,20)),3L);
  sessionStore.put(new Windowed<>("aa",new SessionWindow(10,20)),4L);
  sessionStore.put(new Windowed<>("a",new SessionWindow(0x7a00000000000000L - 2,0x7a00000000000000L - 1)),5L);
  KeyValueIterator<Windowed<String>,Long> iterator=sessionStore.findSessions("a",0,Long.MAX_VALUE);
  List<Long> results=new ArrayList<>();
  while (iterator.hasNext()) {
    results.add(iterator.next().value);
  }
  assertThat(results,equalTo(Arrays.asList(1L,3L,5L)));
  iterator=sessionStore.findSessions("aa",0,Long.MAX_VALUE);
  results=new ArrayList<>();
  while (iterator.hasNext()) {
    results.add(iterator.next().value);
  }
  assertThat(results,equalTo(Arrays.asList(2L,4L)));
  final KeyValueIterator<Windowed<String>,Long> rangeIterator=sessionStore.findSessions("a","aa",0,Long.MAX_VALUE);
  final List<Long> rangeResults=new ArrayList<>();
  while (rangeIterator.hasNext()) {
    rangeResults.add(rangeIterator.next().value);
  }
  assertThat(rangeResults,equalTo(Arrays.asList(1L,3L,2L,4L,5L)));
}
