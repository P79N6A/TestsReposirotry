@Test public void testAllowDrainInAbortableErrorState() throws InterruptedException {
  final long pid=13131L;
  final short epoch=1;
  doInitTransactions(pid,epoch);
  transactionManager.beginTransaction();
  transactionManager.maybeAddPartitionToTransaction(tp1);
  prepareAddPartitionsToTxn(tp1,Errors.NONE);
  sender.run(time.milliseconds());
  assertTrue(transactionManager.transactionContainsPartition(tp1));
  transactionManager.maybeAddPartitionToTransaction(tp0);
  prepareAddPartitionsToTxn(tp0,Errors.TOPIC_AUTHORIZATION_FAILED);
  sender.run(time.milliseconds());
  assertTrue(transactionManager.hasAbortableError());
  assertTrue(transactionManager.isSendToPartitionAllowed(tp1));
  Node node1=new Node(1,"localhost",1112);
  PartitionInfo part1=new PartitionInfo(topic,1,node1,null,null);
  Cluster cluster=new Cluster(null,Arrays.asList(node1),Arrays.asList(part1),Collections.<String>emptySet(),Collections.<String>emptySet());
  accumulator.append(tp1,time.milliseconds(),"key".getBytes(),"value".getBytes(),Record.EMPTY_HEADERS,null,MAX_BLOCK_TIMEOUT);
  Map<Integer,List<ProducerBatch>> drainedBatches=accumulator.drain(cluster,Collections.singleton(node1),Integer.MAX_VALUE,time.milliseconds());
  assertTrue(drainedBatches.containsKey(node1.id()));
  assertEquals(1,drainedBatches.get(node1.id()).size());
  assertTrue(transactionManager.hasAbortableError());
}
