@Test public void testCommitTransactionWithInFlightProduceRequest() throws Exception {
  final long pid=13131L;
  final short epoch=1;
  doInitTransactions(pid,epoch);
  transactionManager.beginTransaction();
  transactionManager.maybeAddPartitionToTransaction(tp0);
  Future<RecordMetadata> responseFuture=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),Record.EMPTY_HEADERS,null,MAX_BLOCK_TIMEOUT).future;
  prepareAddPartitionsToTxn(tp0,Errors.NONE);
  sender.run(time.milliseconds());
  assertTrue(accumulator.hasUndrained());
  accumulator.beginFlush();
  sender.run(time.milliseconds());
  assertFalse(accumulator.hasUndrained());
  assertTrue(accumulator.hasIncomplete());
  assertFalse(transactionManager.hasInFlightTransactionalRequest());
  transactionManager.beginCommit();
  sender.run(time.milliseconds());
  assertFalse(accumulator.hasUndrained());
  assertTrue(accumulator.hasIncomplete());
  assertFalse(transactionManager.hasInFlightTransactionalRequest());
  assertFalse(responseFuture.isDone());
  sender.run(time.milliseconds());
  assertFalse(accumulator.hasUndrained());
  assertTrue(accumulator.hasIncomplete());
  assertFalse(transactionManager.hasInFlightTransactionalRequest());
  assertFalse(responseFuture.isDone());
  sendProduceResponse(Errors.NONE,pid,epoch);
  sender.run(time.milliseconds());
  assertTrue(responseFuture.isDone());
  assertFalse(accumulator.hasUndrained());
  assertFalse(accumulator.hasIncomplete());
  assertFalse(transactionManager.hasInFlightTransactionalRequest());
  sender.run(time.milliseconds());
  assertTrue(transactionManager.hasInFlightTransactionalRequest());
  sendEndTxnResponse(Errors.NONE,TransactionResult.COMMIT,pid,epoch);
  sender.run(time.milliseconds());
  assertFalse(transactionManager.hasInFlightTransactionalRequest());
  assertTrue(transactionManager.isReady());
}
