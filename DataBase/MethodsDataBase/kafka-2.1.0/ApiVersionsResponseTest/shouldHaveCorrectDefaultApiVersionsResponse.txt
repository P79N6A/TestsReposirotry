@Test public void shouldHaveCorrectDefaultApiVersionsResponse(){
  Collection<ApiVersionsResponse.ApiVersion> apiVersions=ApiVersionsResponse.defaultApiVersionsResponse().apiVersions();
  assertEquals("API versions for all API keys must be maintained.",apiVersions.size(),ApiKeys.values().length);
  for (  ApiKeys key : ApiKeys.values()) {
    ApiVersionsResponse.ApiVersion version=ApiVersionsResponse.defaultApiVersionsResponse().apiVersion(key.id);
    assertNotNull("Could not find ApiVersion for API " + key.name,version);
    assertEquals("Incorrect min version for Api " + key.name,version.minVersion,key.oldestVersion());
    assertEquals("Incorrect max version for Api " + key.name,version.maxVersion,key.latestVersion());
    for (int i=0; i < version.minVersion; ++i) {
      assertNull("Request version " + i + " for API "+ version.apiKey+ " must be null",key.requestSchemas[i]);
      assertNull("Response version " + i + " for API "+ version.apiKey+ " must be null",key.responseSchemas[i]);
    }
    for (int i=version.minVersion; i <= version.maxVersion; ++i) {
      assertNotNull("Request version " + i + " for API "+ version.apiKey+ " must not be null",key.requestSchemas[i]);
      assertNotNull("Response version " + i + " for API "+ version.apiKey+ " must not be null",key.responseSchemas[i]);
    }
  }
}
