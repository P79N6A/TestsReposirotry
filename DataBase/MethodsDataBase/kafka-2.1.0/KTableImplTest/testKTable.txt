@Test public void testKTable(){
  final StreamsBuilder builder=new StreamsBuilder();
  final String topic1="topic1";
  final String topic2="topic2";
  final KTable<String,String> table1=builder.table(topic1,consumed);
  final MockProcessorSupplier<String,Object> supplier=new MockProcessorSupplier<>();
  table1.toStream().process(supplier);
  final KTable<String,Integer> table2=table1.mapValues(new ValueMapper<String,Integer>(){
    @Override public Integer apply(    final String value){
      return new Integer(value);
    }
  }
);
  table2.toStream().process(supplier);
  final KTable<String,Integer> table3=table2.filter(new Predicate<String,Integer>(){
    @Override public boolean test(    final String key,    final Integer value){
      return (value % 2) == 0;
    }
  }
);
  table3.toStream().process(supplier);
  table1.toStream().to(topic2,produced);
  final KTable<String,String> table4=builder.table(topic2,consumed);
  table4.toStream().process(supplier);
  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
    driver.pipeInput(recordFactory.create(topic1,"A","01"));
    driver.pipeInput(recordFactory.create(topic1,"B","02"));
    driver.pipeInput(recordFactory.create(topic1,"C","03"));
    driver.pipeInput(recordFactory.create(topic1,"D","04"));
  }
   final List<MockProcessor<String,Object>> processors=supplier.capturedProcessors(4);
  assertEquals(Utils.mkList("A:01","B:02","C:03","D:04"),processors.get(0).processed);
  assertEquals(Utils.mkList("A:1","B:2","C:3","D:4"),processors.get(1).processed);
  assertEquals(Utils.mkList("A:null","B:2","C:null","D:4"),processors.get(2).processed);
  assertEquals(Utils.mkList("A:01","B:02","C:03","D:04"),processors.get(3).processed);
}
