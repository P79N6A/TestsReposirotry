@Test public void testStateStore(){
  final String topic1="topic1";
  final String topic2="topic2";
  final StreamsBuilder builder=new StreamsBuilder();
  final KTableImpl<String,String,String> table1=(KTableImpl<String,String,String>)builder.table(topic1,consumed);
  final KTableImpl<String,String,String> table2=(KTableImpl<String,String,String>)builder.table(topic2,consumed);
  final KTableImpl<String,String,Integer> table1Mapped=(KTableImpl<String,String,Integer>)table1.mapValues(new ValueMapper<String,Integer>(){
    @Override public Integer apply(    final String value){
      return new Integer(value);
    }
  }
);
  final KTableImpl<String,Integer,Integer> table1MappedFiltered=(KTableImpl<String,Integer,Integer>)table1Mapped.filter(new Predicate<String,Integer>(){
    @Override public boolean test(    final String key,    final Integer value){
      return (value % 2) == 0;
    }
  }
);
  table2.join(table1MappedFiltered,new ValueJoiner<String,Integer,String>(){
    @Override public String apply(    final String v1,    final Integer v2){
      return v1 + v2;
    }
  }
);
  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
    assertEquals(2,driver.getAllStateStores().size());
  }
 }
