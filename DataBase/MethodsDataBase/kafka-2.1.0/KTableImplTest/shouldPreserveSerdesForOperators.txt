@Test public void shouldPreserveSerdesForOperators(){
  final StreamsBuilder builder=new StreamsBuilder();
  final KTable<String,String> table1=builder.table("topic-2",stringConsumed);
  final ConsumedInternal<String,String> consumedInternal=new ConsumedInternal<>(stringConsumed);
  final KeyValueMapper<String,String,String> selector=(key,value) -> key;
  final ValueMapper<String,String> mapper=value -> value;
  final ValueJoiner<String,String,String> joiner=(value1,value2) -> value1;
  final ValueTransformerWithKeySupplier<String,String,String> valueTransformerWithKeySupplier=() -> new ValueTransformerWithKey<String,String,String>(){
    @Override public void init(    final ProcessorContext context){
    }
    @Override public String transform(    final String key,    final String value){
      return value;
    }
    @Override public void close(){
    }
  }
;
  assertEquals(((AbstractStream)table1.filter((key,value) -> false)).keySerde(),consumedInternal.keySerde());
  assertEquals(((AbstractStream)table1.filter((key,value) -> false)).valueSerde(),consumedInternal.valueSerde());
  assertEquals(((AbstractStream)table1.filter((key,value) -> false,Materialized.with(mySerde,mySerde))).keySerde(),mySerde);
  assertEquals(((AbstractStream)table1.filter((key,value) -> false,Materialized.with(mySerde,mySerde))).valueSerde(),mySerde);
  assertEquals(((AbstractStream)table1.filterNot((key,value) -> false)).keySerde(),consumedInternal.keySerde());
  assertEquals(((AbstractStream)table1.filterNot((key,value) -> false)).valueSerde(),consumedInternal.valueSerde());
  assertEquals(((AbstractStream)table1.filterNot((key,value) -> false,Materialized.with(mySerde,mySerde))).keySerde(),mySerde);
  assertEquals(((AbstractStream)table1.filterNot((key,value) -> false,Materialized.with(mySerde,mySerde))).valueSerde(),mySerde);
  assertEquals(((AbstractStream)table1.mapValues(mapper)).keySerde(),consumedInternal.keySerde());
  assertNull(((AbstractStream)table1.mapValues(mapper)).valueSerde());
  assertEquals(((AbstractStream)table1.mapValues(mapper,Materialized.with(mySerde,mySerde))).keySerde(),mySerde);
  assertEquals(((AbstractStream)table1.mapValues(mapper,Materialized.with(mySerde,mySerde))).valueSerde(),mySerde);
  assertEquals(((AbstractStream)table1.toStream()).keySerde(),consumedInternal.keySerde());
  assertEquals(((AbstractStream)table1.toStream()).valueSerde(),consumedInternal.valueSerde());
  assertNull(((AbstractStream)table1.toStream(selector)).keySerde());
  assertEquals(((AbstractStream)table1.toStream(selector)).valueSerde(),consumedInternal.valueSerde());
  assertEquals(((AbstractStream)table1.transformValues(valueTransformerWithKeySupplier)).keySerde(),consumedInternal.keySerde());
  assertNull(((AbstractStream)table1.transformValues(valueTransformerWithKeySupplier)).valueSerde());
  assertEquals(((AbstractStream)table1.transformValues(valueTransformerWithKeySupplier,Materialized.with(mySerde,mySerde))).keySerde(),mySerde);
  assertEquals(((AbstractStream)table1.transformValues(valueTransformerWithKeySupplier,Materialized.with(mySerde,mySerde))).valueSerde(),mySerde);
  assertEquals(((AbstractStream)table1.groupBy(KeyValue::new)).keySerde(),null);
  assertEquals(((AbstractStream)table1.groupBy(KeyValue::new)).valueSerde(),null);
  assertEquals(((AbstractStream)table1.groupBy(KeyValue::new,Serialized.with(mySerde,mySerde))).keySerde(),mySerde);
  assertEquals(((AbstractStream)table1.groupBy(KeyValue::new,Serialized.with(mySerde,mySerde))).valueSerde(),mySerde);
  assertEquals(((AbstractStream)table1.join(table1,joiner)).keySerde(),consumedInternal.keySerde());
  assertEquals(((AbstractStream)table1.join(table1,joiner)).valueSerde(),null);
  assertEquals(((AbstractStream)table1.join(table1,joiner,Materialized.with(mySerde,mySerde))).keySerde(),mySerde);
  assertEquals(((AbstractStream)table1.join(table1,joiner,Materialized.with(mySerde,mySerde))).valueSerde(),mySerde);
  assertEquals(((AbstractStream)table1.leftJoin(table1,joiner)).keySerde(),consumedInternal.keySerde());
  assertEquals(((AbstractStream)table1.leftJoin(table1,joiner)).valueSerde(),null);
  assertEquals(((AbstractStream)table1.leftJoin(table1,joiner,Materialized.with(mySerde,mySerde))).keySerde(),mySerde);
  assertEquals(((AbstractStream)table1.leftJoin(table1,joiner,Materialized.with(mySerde,mySerde))).valueSerde(),mySerde);
  assertEquals(((AbstractStream)table1.outerJoin(table1,joiner)).keySerde(),consumedInternal.keySerde());
  assertEquals(((AbstractStream)table1.outerJoin(table1,joiner)).valueSerde(),null);
  assertEquals(((AbstractStream)table1.outerJoin(table1,joiner,Materialized.with(mySerde,mySerde))).keySerde(),mySerde);
  assertEquals(((AbstractStream)table1.outerJoin(table1,joiner,Materialized.with(mySerde,mySerde))).valueSerde(),mySerde);
}
