@Test public void validateExpirationTimeAndIssuedAtConsistency() throws OAuthBearerIllegalTokenException {
  long nowMs=TIME.milliseconds();
  double nowClaimValue=((double)nowMs) / 1000;
  for (  boolean issuedAtExists : new boolean[]{true,false}) {
    if (!issuedAtExists) {
      StringBuilder sb=new StringBuilder("{");
      appendJsonText(sb,"exp",nowClaimValue);
      appendCommaJsonText(sb,"sub","principalName");
      sb.append("}");
      String compactSerialization=HEADER_COMPACT_SERIALIZATION + Base64.getUrlEncoder().withoutPadding().encodeToString(sb.toString().getBytes(StandardCharsets.UTF_8)) + ".";
      OAuthBearerUnsecuredJws testJwt=new OAuthBearerUnsecuredJws(compactSerialization,"sub","scope");
      assertTrue(isSuccess(OAuthBearerValidationUtils.validateTimeConsistency(testJwt)));
    }
 else     for (int expirationTimeOffset=-1; expirationTimeOffset <= 1; ++expirationTimeOffset) {
      StringBuilder sb=new StringBuilder("{");
      appendJsonText(sb,"iat",nowClaimValue);
      appendCommaJsonText(sb,"exp",nowClaimValue + expirationTimeOffset);
      appendCommaJsonText(sb,"sub","principalName");
      sb.append("}");
      String compactSerialization=HEADER_COMPACT_SERIALIZATION + Base64.getUrlEncoder().withoutPadding().encodeToString(sb.toString().getBytes(StandardCharsets.UTF_8)) + ".";
      OAuthBearerUnsecuredJws testJwt=new OAuthBearerUnsecuredJws(compactSerialization,"sub","scope");
      OAuthBearerValidationResult result=OAuthBearerValidationUtils.validateTimeConsistency(testJwt);
      if (expirationTimeOffset <= 0)       assertTrue(isFailureWithMessageAndNoFailureScope(result));
 else       assertTrue(isSuccess(result));
    }
  }
}
