@Test public void validateIssuedAt(){
  long nowMs=TIME.milliseconds();
  double nowClaimValue=((double)nowMs) / 1000;
  for (  boolean exists : new boolean[]{true,false}) {
    StringBuilder sb=new StringBuilder("{");
    appendJsonText(sb,"exp",nowClaimValue);
    appendCommaJsonText(sb,"sub","principalName");
    if (exists)     appendCommaJsonText(sb,"iat",nowClaimValue);
    sb.append("}");
    String compactSerialization=HEADER_COMPACT_SERIALIZATION + Base64.getUrlEncoder().withoutPadding().encodeToString(sb.toString().getBytes(StandardCharsets.UTF_8)) + ".";
    OAuthBearerUnsecuredJws testJwt=new OAuthBearerUnsecuredJws(compactSerialization,"sub","scope");
    for (    boolean required : new boolean[]{true,false}) {
      for (      int allowableClockSkewMs : new int[]{0,5,10,20}) {
        for (        long whenCheckOffsetMs : new long[]{-10,0,10}) {
          long whenCheckMs=nowMs + whenCheckOffsetMs;
          OAuthBearerValidationResult result=OAuthBearerValidationUtils.validateIssuedAt(testJwt,required,whenCheckMs,allowableClockSkewMs);
          if (required && !exists)           assertTrue("useErrorValue || required && !exists",isFailureWithMessageAndNoFailureScope(result));
 else           if (!required && !exists)           assertTrue("!required && !exists",isSuccess(result));
 else           if (nowClaimValue * 1000 > whenCheckMs + allowableClockSkewMs)           assertTrue(assertionFailureMessage(nowClaimValue,allowableClockSkewMs,whenCheckMs),isFailureWithMessageAndNoFailureScope(result));
 else           assertTrue(assertionFailureMessage(nowClaimValue,allowableClockSkewMs,whenCheckMs),isSuccess(result));
        }
      }
    }
  }
}
