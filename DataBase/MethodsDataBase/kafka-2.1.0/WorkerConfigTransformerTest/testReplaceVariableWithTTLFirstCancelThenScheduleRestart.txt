@Test public void testReplaceVariableWithTTLFirstCancelThenScheduleRestart() throws Exception {
  EasyMock.expect(worker.herder()).andReturn(herder);
  EasyMock.expect(herder.connectorConfigReloadAction(MY_CONNECTOR)).andReturn(Herder.ConfigReloadAction.RESTART);
  EasyMock.expect(herder.restartConnector(1L,MY_CONNECTOR,null)).andReturn(requestId);
  EasyMock.expect(worker.herder()).andReturn(herder);
  EasyMock.expect(herder.connectorConfigReloadAction(MY_CONNECTOR)).andReturn(Herder.ConfigReloadAction.RESTART);
  EasyMock.expectLastCall();
  requestId.cancel();
  EasyMock.expectLastCall();
  EasyMock.expect(herder.restartConnector(10L,MY_CONNECTOR,null)).andReturn(requestId);
  replayAll();
  Map<String,String> result=configTransformer.transform(MY_CONNECTOR,Collections.singletonMap(MY_KEY,"${test:testPath:testKeyWithTTL}"));
  assertEquals(TEST_RESULT_WITH_TTL,result.get(MY_KEY));
  result=configTransformer.transform(MY_CONNECTOR,Collections.singletonMap(MY_KEY,"${test:testPath:testKeyWithLongerTTL}"));
  assertEquals(TEST_RESULT_WITH_LONGER_TTL,result.get(MY_KEY));
}
