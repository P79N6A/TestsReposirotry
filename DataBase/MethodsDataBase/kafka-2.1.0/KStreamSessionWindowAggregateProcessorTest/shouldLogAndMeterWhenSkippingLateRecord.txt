@Test public void shouldLogAndMeterWhenSkippingLateRecord(){
  LogCaptureAppender.setClassLoggerToDebug(KStreamSessionWindowAggregate.class);
  final LogCaptureAppender appender=LogCaptureAppender.createAndRegister();
  final Processor<String,String> processor=new KStreamSessionWindowAggregate<>(SessionWindows.with(ofMillis(10L)).grace(ofMillis(10L)),STORE_NAME,initializer,aggregator,sessionMerger).get();
  initStore(false);
  processor.init(context);
  context.setStreamTime(20);
  context.setRecordContext(new ProcessorRecordContext(0,-2,-3,"topic",null));
  processor.process("A","1");
  context.setRecordContext(new ProcessorRecordContext(1,-2,-3,"topic",null));
  processor.process("A","1");
  LogCaptureAppender.unregister(appender);
  final MetricName dropMetric=new MetricName("late-record-drop-total","stream-processor-node-metrics","The total number of occurrence of late-record-drop operations.",mkMap(mkEntry("client-id","test"),mkEntry("task-id","0_0"),mkEntry("processor-node-id","TESTING_NODE")));
  assertThat(metrics.metrics().get(dropMetric).metricValue(),is(2.0));
  final MetricName dropRate=new MetricName("late-record-drop-rate","stream-processor-node-metrics","The average number of occurrence of late-record-drop operations.",mkMap(mkEntry("client-id","test"),mkEntry("task-id","0_0"),mkEntry("processor-node-id","TESTING_NODE")));
  assertThat((Double)metrics.metrics().get(dropRate).metricValue(),greaterThan(0.0));
  assertThat(appender.getMessages(),hasItem("Skipping record for expired window. key=[A] topic=[topic] partition=[-3] offset=[-2] timestamp=[0] window=[0,0) expiration=[10]"));
  assertThat(appender.getMessages(),hasItem("Skipping record for expired window. key=[A] topic=[topic] partition=[-3] offset=[-2] timestamp=[1] window=[1,1) expiration=[10]"));
}
