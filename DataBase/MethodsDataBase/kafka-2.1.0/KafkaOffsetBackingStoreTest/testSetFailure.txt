@Test public void testSetFailure() throws Exception {
  expectConfigure();
  expectStart(Collections.EMPTY_LIST);
  expectStop();
  Capture<org.apache.kafka.clients.producer.Callback> callback0=EasyMock.newCapture();
  storeLog.send(EasyMock.aryEq(TP0_KEY.array()),EasyMock.aryEq(TP0_VALUE.array()),EasyMock.capture(callback0));
  PowerMock.expectLastCall();
  Capture<org.apache.kafka.clients.producer.Callback> callback1=EasyMock.newCapture();
  storeLog.send(EasyMock.aryEq(TP1_KEY.array()),EasyMock.aryEq(TP1_VALUE.array()),EasyMock.capture(callback1));
  PowerMock.expectLastCall();
  Capture<org.apache.kafka.clients.producer.Callback> callback2=EasyMock.newCapture();
  storeLog.send(EasyMock.aryEq(TP2_KEY.array()),EasyMock.aryEq(TP2_VALUE.array()),EasyMock.capture(callback2));
  PowerMock.expectLastCall();
  PowerMock.replayAll();
  store.configure(DEFAULT_DISTRIBUTED_CONFIG);
  store.start();
  Map<ByteBuffer,ByteBuffer> toSet=new HashMap<>();
  toSet.put(TP0_KEY,TP0_VALUE);
  toSet.put(TP1_KEY,TP1_VALUE);
  toSet.put(TP2_KEY,TP2_VALUE);
  final AtomicBoolean invoked=new AtomicBoolean(false);
  final AtomicBoolean invokedFailure=new AtomicBoolean(false);
  Future<Void> setFuture=store.set(toSet,new Callback<Void>(){
    @Override public void onCompletion(    Throwable error,    Void result){
      invoked.set(true);
      if (error != null)       invokedFailure.set(true);
    }
  }
);
  assertFalse(setFuture.isDone());
  callback1.getValue().onCompletion(null,null);
  assertFalse(invoked.get());
  callback2.getValue().onCompletion(null,new KafkaException("bogus error"));
  assertTrue(invoked.get());
  assertTrue(invokedFailure.get());
  callback0.getValue().onCompletion(null,null);
  try {
    setFuture.get(10000,TimeUnit.MILLISECONDS);
    fail("Should have seen KafkaException thrown when waiting on KafkaOffsetBackingStore.set() future");
  }
 catch (  ExecutionException e) {
    assertNotNull(e.getCause());
    assertTrue(e.getCause() instanceof KafkaException);
  }
  store.stop();
  PowerMock.verifyAll();
}
