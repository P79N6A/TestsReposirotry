@Test() public void testConfigValidationTransformsExtendResults(){
  AbstractHerder herder=createConfigValidationHerder(TestSourceConnector.class);
  Set<PluginDesc<Transformation>> transformations=new HashSet<>();
  transformations.add(new PluginDesc<Transformation>(SampleTransformation.class,"1.0",classLoader));
  EasyMock.expect(plugins.transformations()).andReturn(transformations).times(2);
  replayAll();
  Map<String,String> config=new HashMap<>();
  config.put(ConnectorConfig.CONNECTOR_CLASS_CONFIG,TestSourceConnector.class.getName());
  config.put(ConnectorConfig.NAME_CONFIG,"connector-name");
  config.put(ConnectorConfig.TRANSFORMS_CONFIG,"xformA,xformB");
  config.put(ConnectorConfig.TRANSFORMS_CONFIG + ".xformA.type",SampleTransformation.class.getName());
  config.put("required","value");
  ConfigInfos result=herder.validateConnectorConfig(config);
  assertEquals(herder.connectorTypeForClass(config.get(ConnectorConfig.CONNECTOR_CLASS_CONFIG)),ConnectorType.SOURCE);
  assertEquals(TestSourceConnector.class.getName(),result.name());
  List<String> expectedGroups=Arrays.asList(ConnectorConfig.COMMON_GROUP,ConnectorConfig.TRANSFORMS_GROUP,ConnectorConfig.ERROR_GROUP,"Transforms: xformA","Transforms: xformB");
  assertEquals(expectedGroups,result.groups());
  assertEquals(2,result.errorCount());
  assertEquals(18,result.values().size());
  assertEquals("transforms.xformA.type",result.values().get(13).configValue().name());
  assertTrue(result.values().get(13).configValue().errors().isEmpty());
  assertEquals("transforms.xformA.subconfig",result.values().get(14).configValue().name());
  assertEquals("transforms.xformB.type",result.values().get(15).configValue().name());
  assertFalse(result.values().get(15).configValue().errors().isEmpty());
  verifyAll();
}
