@Test public void putConnectorStateShouldOverride(){
  final byte[] value=new byte[0];
  String otherWorkerId="anotherhost:8083";
  KafkaBasedLog<String,byte[]> kafkaBasedLog=mock(KafkaBasedLog.class);
  Converter converter=mock(Converter.class);
  final KafkaStatusBackingStore store=new KafkaStatusBackingStore(new MockTime(),converter,STATUS_TOPIC,kafkaBasedLog);
  Map<String,Object> firstStatusRead=new HashMap<>();
  firstStatusRead.put("worker_id",otherWorkerId);
  firstStatusRead.put("state","RUNNING");
  firstStatusRead.put("generation",1L);
  Map<String,Object> secondStatusRead=new HashMap<>();
  secondStatusRead.put("worker_id",WORKER_ID);
  secondStatusRead.put("state","UNASSIGNED");
  secondStatusRead.put("generation",0L);
  expect(converter.toConnectData(STATUS_TOPIC,value)).andReturn(new SchemaAndValue(null,firstStatusRead)).andReturn(new SchemaAndValue(null,secondStatusRead));
  expect(converter.fromConnectData(eq(STATUS_TOPIC),anyObject(Schema.class),anyObject(Struct.class))).andStubReturn(value);
  final Capture<Callback> callbackCapture=newCapture();
  kafkaBasedLog.send(eq("status-connector-conn"),eq(value),capture(callbackCapture));
  expectLastCall().andAnswer(new IAnswer<Void>(){
    @Override public Void answer() throws Throwable {
      callbackCapture.getValue().onCompletion(null,null);
      store.read(consumerRecord(1,"status-connector-conn",value));
      return null;
    }
  }
);
  replayAll();
  store.read(consumerRecord(0,"status-connector-conn",value));
  ConnectorStatus status=new ConnectorStatus(CONNECTOR,ConnectorStatus.State.UNASSIGNED,WORKER_ID,0);
  store.put(status);
  assertEquals(status,store.get(CONNECTOR));
  verifyAll();
}
