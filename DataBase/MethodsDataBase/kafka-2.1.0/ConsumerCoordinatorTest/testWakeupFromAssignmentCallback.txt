@Test public void testWakeupFromAssignmentCallback(){
  ConsumerCoordinator coordinator=buildCoordinator(new Metrics(),assignors,ConsumerConfig.DEFAULT_EXCLUDE_INTERNAL_TOPICS,false,true);
  final String topic="topic1";
  TopicPartition partition=new TopicPartition(topic,0);
  final String consumerId="follower";
  Set<String> topics=Collections.singleton(topic);
  MockRebalanceListener rebalanceListener=new MockRebalanceListener(){
    @Override public void onPartitionsAssigned(    Collection<TopicPartition> partitions){
      boolean raiseWakeup=this.assignedCount == 0;
      super.onPartitionsAssigned(partitions);
      if (raiseWakeup)       throw new WakeupException();
    }
  }
;
  subscriptions.subscribe(topics,rebalanceListener);
  metadata.setTopics(topics);
  metadata.update(TestUtils.singletonCluster(topic,1),Collections.emptySet(),time.milliseconds());
  client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE));
  coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));
  partitionAssignor.prepare(singletonMap(consumerId,Collections.singletonList(partition)));
  client.prepareResponse(joinGroupFollowerResponse(1,consumerId,"leader",Errors.NONE));
  client.prepareResponse(syncGroupResponse(Collections.singletonList(partition),Errors.NONE));
  try {
    coordinator.poll(time.timer(Long.MAX_VALUE));
    fail("Expected exception thrown from assignment callback");
  }
 catch (  WakeupException e) {
  }
  coordinator.poll(time.timer(Long.MAX_VALUE));
  assertFalse(coordinator.rejoinNeededOrPending());
  assertEquals(1,rebalanceListener.revokedCount);
  assertEquals(2,rebalanceListener.assignedCount);
}
