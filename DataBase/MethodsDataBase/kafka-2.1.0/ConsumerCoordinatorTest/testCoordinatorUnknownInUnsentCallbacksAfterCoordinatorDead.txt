@Test public void testCoordinatorUnknownInUnsentCallbacksAfterCoordinatorDead() throws Exception {
  client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE));
  coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));
  final AtomicBoolean asyncCallbackInvoked=new AtomicBoolean(false);
  Map<TopicPartition,OffsetCommitRequest.PartitionData> offsets=singletonMap(new TopicPartition("foo",0),new OffsetCommitRequest.PartitionData(13L,RecordBatch.NO_PARTITION_LEADER_EPOCH,""));
  consumerClient.send(coordinator.checkAndGetCoordinator(),new OffsetCommitRequest.Builder(groupId,offsets)).compose(new RequestFutureAdapter<ClientResponse,Object>(){
    @Override public void onSuccess(    ClientResponse value,    RequestFuture<Object> future){
    }
    @Override public void onFailure(    RuntimeException e,    RequestFuture<Object> future){
      assertTrue("Unexpected exception type: " + e.getClass(),e instanceof DisconnectException);
      assertTrue(coordinator.coordinatorUnknown());
      asyncCallbackInvoked.set(true);
    }
  }
);
  coordinator.markCoordinatorUnknown();
  consumerClient.pollNoWakeup();
  assertTrue(asyncCallbackInvoked.get());
}
