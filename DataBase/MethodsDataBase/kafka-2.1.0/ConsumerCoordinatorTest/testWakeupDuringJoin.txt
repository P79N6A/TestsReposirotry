@Test public void testWakeupDuringJoin(){
  final String consumerId="leader";
  subscriptions.subscribe(singleton(topic1),rebalanceListener);
  metadata.setTopics(singletonList(topic1));
  metadata.update(cluster,Collections.<String>emptySet(),time.milliseconds());
  client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE));
  coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));
  Map<String,List<String>> memberSubscriptions=singletonMap(consumerId,singletonList(topic1));
  partitionAssignor.prepare(singletonMap(consumerId,singletonList(t1p)));
  client.prepareResponse(joinGroupLeaderResponse(1,consumerId,memberSubscriptions,Errors.NONE));
  consumerClient.wakeup();
  try {
    coordinator.poll(time.timer(Long.MAX_VALUE));
  }
 catch (  WakeupException e) {
  }
  client.prepareResponse(syncGroupResponse(singletonList(t1p),Errors.NONE));
  coordinator.poll(time.timer(Long.MAX_VALUE));
  assertFalse(coordinator.rejoinNeededOrPending());
  assertEquals(singleton(t1p),subscriptions.assignedPartitions());
  assertEquals(1,rebalanceListener.revokedCount);
  assertEquals(Collections.emptySet(),rebalanceListener.revoked);
  assertEquals(1,rebalanceListener.assignedCount);
  assertEquals(singleton(t1p),rebalanceListener.assigned);
}
