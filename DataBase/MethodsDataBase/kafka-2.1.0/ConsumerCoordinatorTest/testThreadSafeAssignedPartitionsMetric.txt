@Test public void testThreadSafeAssignedPartitionsMetric() throws Exception {
  final Metric metric=metrics.metric(new MetricName("assigned-partitions","consumer" + groupId + "-coordinator-metrics","",Collections.<String,String>emptyMap()));
  final AtomicBoolean doStop=new AtomicBoolean();
  final AtomicReference<Exception> exceptionHolder=new AtomicReference<>();
  final AtomicInteger observedSize=new AtomicInteger();
  Thread poller=new Thread(){
    @Override public void run(){
      while (!doStop.get()) {
        try {
          int size=((Double)metric.metricValue()).intValue();
          observedSize.set(size);
        }
 catch (        Exception e) {
          exceptionHolder.set(e);
          return;
        }
      }
    }
  }
;
  poller.start();
  client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE));
  coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));
  Set<TopicPartition> partitions=new HashSet<>();
  int totalPartitions=10;
  for (int partition=0; partition < totalPartitions; partition++) {
    partitions.add(new TopicPartition(topic1,partition));
    subscriptions.assignFromUser(partitions);
  }
  TestUtils.waitForCondition(new TestCondition(){
    @Override public boolean conditionMet(){
      return observedSize.get() == totalPartitions || exceptionHolder.get() != null;
    }
  }
,"Failed to observe expected assignment change");
  doStop.set(true);
  poller.join();
  assertNull("Failed fetching the metric at least once",exceptionHolder.get());
}
