@Test public void testUpdateMetadataDuringRebalance(){
  final String topic1="topic1";
  final String topic2="topic2";
  TopicPartition tp1=new TopicPartition(topic1,0);
  TopicPartition tp2=new TopicPartition(topic2,0);
  final String consumerId="leader";
  List<String> topics=Arrays.asList(topic1,topic2);
  subscriptions.subscribe(new HashSet<>(topics),rebalanceListener);
  metadata.setTopics(topics);
  metadata.update(TestUtils.singletonCluster(topic1,1),Collections.<String>emptySet(),time.milliseconds());
  client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE));
  coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));
  Map<String,List<String>> memberSubscriptions=singletonMap(consumerId,topics);
  partitionAssignor.prepare(singletonMap(consumerId,Collections.singletonList(tp1)));
  client.prepareResponse(joinGroupLeaderResponse(1,consumerId,memberSubscriptions,Errors.NONE));
  client.prepareResponse(new MockClient.RequestMatcher(){
    @Override public boolean matches(    AbstractRequest body){
      SyncGroupRequest sync=(SyncGroupRequest)body;
      if (sync.memberId().equals(consumerId) && sync.generationId() == 1 && sync.groupAssignment().containsKey(consumerId)) {
        Map<String,Integer> topicPartitionCounts=new HashMap<>();
        topicPartitionCounts.put(topic1,1);
        topicPartitionCounts.put(topic2,1);
        metadata.update(TestUtils.singletonCluster(topicPartitionCounts),Collections.<String>emptySet(),time.milliseconds());
        return true;
      }
      return false;
    }
  }
,syncGroupResponse(Collections.singletonList(tp1),Errors.NONE));
  client.prepareResponse(joinGroupLeaderResponse(2,consumerId,memberSubscriptions,Errors.NONE));
  client.prepareResponse(syncGroupResponse(Arrays.asList(tp1,tp2),Errors.NONE));
  coordinator.poll(time.timer(Long.MAX_VALUE));
  assertFalse(coordinator.rejoinNeededOrPending());
  assertEquals(new HashSet<>(Arrays.asList(tp1,tp2)),subscriptions.assignedPartitions());
}
