@Test public void testPatternJoinGroupFollower(){
  final String consumerId="consumer";
  subscriptions.subscribe(Pattern.compile("test.*"),rebalanceListener);
  metadata.setTopics(singletonList(topic1));
  metadata.update(TestUtils.singletonCluster(topic1,1),Collections.<String>emptySet(),time.milliseconds());
  client.prepareResponse(groupCoordinatorResponse(node,Errors.NONE));
  coordinator.ensureCoordinatorReady(time.timer(Long.MAX_VALUE));
  client.prepareResponse(joinGroupFollowerResponse(1,consumerId,"leader",Errors.NONE));
  client.prepareResponse(new MockClient.RequestMatcher(){
    @Override public boolean matches(    AbstractRequest body){
      SyncGroupRequest sync=(SyncGroupRequest)body;
      return sync.memberId().equals(consumerId) && sync.generationId() == 1 && sync.groupAssignment().isEmpty();
    }
  }
,syncGroupResponse(Arrays.asList(t1p,t2p),Errors.NONE));
  client.prepareMetadataUpdate(cluster,Collections.emptySet());
  coordinator.joinGroupIfNeeded(time.timer(Long.MAX_VALUE));
  assertFalse(coordinator.rejoinNeededOrPending());
  assertEquals(2,subscriptions.numAssignedPartitions());
  assertEquals(2,subscriptions.subscription().size());
  assertEquals(1,rebalanceListener.revokedCount);
  assertEquals(1,rebalanceListener.assignedCount);
  assertEquals(2,rebalanceListener.assigned.size());
}
