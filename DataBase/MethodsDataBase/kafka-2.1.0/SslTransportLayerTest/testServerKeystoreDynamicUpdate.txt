/** 
 * Tests reconfiguration of server keystore. Verifies that existing connections continue to work with old keystore and new connections work with new keystore.
 */
@Test public void testServerKeystoreDynamicUpdate() throws Exception {
  SecurityProtocol securityProtocol=SecurityProtocol.SSL;
  TestSecurityConfig config=new TestSecurityConfig(sslServerConfigs);
  ListenerName listenerName=ListenerName.forSecurityProtocol(securityProtocol);
  ChannelBuilder serverChannelBuilder=ChannelBuilders.serverChannelBuilder(listenerName,false,securityProtocol,config,null,null);
  server=new NioEchoServer(listenerName,securityProtocol,config,"localhost",serverChannelBuilder,null,time);
  server.start();
  InetSocketAddress addr=new InetSocketAddress("localhost",server.port());
  String oldNode="0";
  Selector oldClientSelector=createSelector(sslClientConfigs);
  oldClientSelector.connect(oldNode,addr,BUFFER_SIZE,BUFFER_SIZE);
  NetworkTestUtils.checkClientConnection(selector,oldNode,100,10);
  CertStores newServerCertStores=new CertStores(true,"server","localhost");
  Map<String,Object> newKeystoreConfigs=newServerCertStores.keyStoreProps();
  assertTrue("SslChannelBuilder not reconfigurable",serverChannelBuilder instanceof ListenerReconfigurable);
  ListenerReconfigurable reconfigurableBuilder=(ListenerReconfigurable)serverChannelBuilder;
  assertEquals(listenerName,reconfigurableBuilder.listenerName());
  reconfigurableBuilder.validateReconfiguration(newKeystoreConfigs);
  reconfigurableBuilder.reconfigure(newKeystoreConfigs);
  oldClientSelector.connect("1",addr,BUFFER_SIZE,BUFFER_SIZE);
  NetworkTestUtils.waitForChannelClose(oldClientSelector,"1",ChannelState.State.AUTHENTICATION_FAILED);
  sslClientConfigs=clientCertStores.getTrustingConfig(newServerCertStores);
  Selector newClientSelector=createSelector(sslClientConfigs);
  newClientSelector.connect("2",addr,BUFFER_SIZE,BUFFER_SIZE);
  NetworkTestUtils.checkClientConnection(newClientSelector,"2",100,10);
  NetworkTestUtils.checkClientConnection(oldClientSelector,oldNode,100,10);
  CertStores invalidCertStores=new CertStores(true,"server","127.0.0.1");
  Map<String,Object> invalidConfigs=invalidCertStores.getTrustingConfig(clientCertStores);
  verifyInvalidReconfigure(reconfigurableBuilder,invalidConfigs,"keystore with different SubjectAltName");
  Map<String,Object> missingStoreConfigs=new HashMap<>();
  missingStoreConfigs.put(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG,"PKCS12");
  missingStoreConfigs.put(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG,"some.keystore.path");
  missingStoreConfigs.put(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG,new Password("some.keystore.password"));
  missingStoreConfigs.put(SslConfigs.SSL_KEY_PASSWORD_CONFIG,new Password("some.key.password"));
  verifyInvalidReconfigure(reconfigurableBuilder,missingStoreConfigs,"keystore not found");
  newClientSelector.connect("3",addr,BUFFER_SIZE,BUFFER_SIZE);
  NetworkTestUtils.checkClientConnection(newClientSelector,"3",100,10);
}
