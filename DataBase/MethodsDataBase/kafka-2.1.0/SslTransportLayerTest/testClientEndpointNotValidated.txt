/** 
 * According to RFC 2818: <blockquote>Typically, the server has no external knowledge of what the client's identity ought to be and so checks (other than that the client has a certificate chain rooted in an appropriate CA) are not possible. If a server has such knowledge (typically from some source external to HTTP or TLS) it SHOULD check the identity as described above.</blockquote> However, Java SSL engine does not perform any endpoint validation for client IP address. Hence it is safe to avoid reverse DNS lookup while creating the SSL engine. This test checks that client validation does not fail even if the client certificate has an invalid hostname. This test is to ensure that if client endpoint validation is added to Java in future, we can detect and update Kafka SSL code to enable validation on the server-side and provide hostname if required.
 */
@Test public void testClientEndpointNotValidated() throws Exception {
  String node="0";
  clientCertStores=new CertStores(false,"non-existent.com");
  serverCertStores=new CertStores(true,"localhost");
  sslServerConfigs=serverCertStores.getTrustingConfig(clientCertStores);
  sslClientConfigs=clientCertStores.getTrustingConfig(serverCertStores);
  SslChannelBuilder serverChannelBuilder=new TestSslChannelBuilder(Mode.SERVER){
    @Override protected TestSslTransportLayer newTransportLayer(    String id,    SelectionKey key,    SSLEngine sslEngine) throws IOException {
      SSLParameters sslParams=sslEngine.getSSLParameters();
      sslParams.setEndpointIdentificationAlgorithm("HTTPS");
      sslEngine.setSSLParameters(sslParams);
      return super.newTransportLayer(id,key,sslEngine);
    }
  }
;
  serverChannelBuilder.configure(sslServerConfigs);
  server=new NioEchoServer(ListenerName.forSecurityProtocol(SecurityProtocol.SSL),SecurityProtocol.SSL,new TestSecurityConfig(sslServerConfigs),"localhost",serverChannelBuilder,null,time);
  server.start();
  createSelector(sslClientConfigs);
  InetSocketAddress addr=new InetSocketAddress("localhost",server.port());
  selector.connect(node,addr,BUFFER_SIZE,BUFFER_SIZE);
  NetworkTestUtils.checkClientConnection(selector,node,100,10);
}
