/** 
 * Tests that server certificate with invalid host name is accepted by a client that has disabled endpoint validation
 */
@Test public void testEndpointIdentificationDisabled() throws Exception {
  serverCertStores=new CertStores(true,"server","notahost");
  clientCertStores=new CertStores(false,"client","localhost");
  sslServerConfigs=serverCertStores.getTrustingConfig(clientCertStores);
  sslClientConfigs=clientCertStores.getTrustingConfig(serverCertStores);
  SecurityProtocol securityProtocol=SecurityProtocol.SSL;
  server=createEchoServer(SecurityProtocol.SSL);
  InetSocketAddress addr=new InetSocketAddress("localhost",server.port());
  String node="1";
  sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG,"");
  createSelector(sslClientConfigs);
  selector.connect(node,addr,BUFFER_SIZE,BUFFER_SIZE);
  NetworkTestUtils.checkClientConnection(selector,node,100,10);
  String node2="2";
  sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG,null);
  createSelector(sslClientConfigs);
  selector.connect(node2,addr,BUFFER_SIZE,BUFFER_SIZE);
  NetworkTestUtils.checkClientConnection(selector,node2,100,10);
  String node3="3";
  sslClientConfigs.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG,"HTTPS");
  createSelector(sslClientConfigs);
  selector.connect(node3,addr,BUFFER_SIZE,BUFFER_SIZE);
  NetworkTestUtils.waitForChannelClose(selector,node3,ChannelState.State.AUTHENTICATION_FAILED);
  selector.close();
}
