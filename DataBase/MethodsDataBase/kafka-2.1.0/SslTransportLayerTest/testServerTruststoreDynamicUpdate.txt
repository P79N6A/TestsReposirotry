/** 
 * Tests reconfiguration of server truststore. Verifies that existing connections continue to work with old truststore and new connections work with new truststore.
 */
@Test public void testServerTruststoreDynamicUpdate() throws Exception {
  SecurityProtocol securityProtocol=SecurityProtocol.SSL;
  sslServerConfigs.put(BrokerSecurityConfigs.SSL_CLIENT_AUTH_CONFIG,"required");
  TestSecurityConfig config=new TestSecurityConfig(sslServerConfigs);
  ListenerName listenerName=ListenerName.forSecurityProtocol(securityProtocol);
  ChannelBuilder serverChannelBuilder=ChannelBuilders.serverChannelBuilder(listenerName,false,securityProtocol,config,null,null);
  server=new NioEchoServer(listenerName,securityProtocol,config,"localhost",serverChannelBuilder,null,time);
  server.start();
  InetSocketAddress addr=new InetSocketAddress("localhost",server.port());
  String oldNode="0";
  Selector oldClientSelector=createSelector(sslClientConfigs);
  oldClientSelector.connect(oldNode,addr,BUFFER_SIZE,BUFFER_SIZE);
  NetworkTestUtils.checkClientConnection(selector,oldNode,100,10);
  CertStores newClientCertStores=new CertStores(true,"client","localhost");
  sslClientConfigs=newClientCertStores.getTrustingConfig(serverCertStores);
  Map<String,Object> newTruststoreConfigs=newClientCertStores.trustStoreProps();
  assertTrue("SslChannelBuilder not reconfigurable",serverChannelBuilder instanceof ListenerReconfigurable);
  ListenerReconfigurable reconfigurableBuilder=(ListenerReconfigurable)serverChannelBuilder;
  assertEquals(listenerName,reconfigurableBuilder.listenerName());
  reconfigurableBuilder.validateReconfiguration(newTruststoreConfigs);
  reconfigurableBuilder.reconfigure(newTruststoreConfigs);
  oldClientSelector.connect("1",addr,BUFFER_SIZE,BUFFER_SIZE);
  NetworkTestUtils.waitForChannelClose(oldClientSelector,"1",ChannelState.State.AUTHENTICATION_FAILED);
  Selector newClientSelector=createSelector(sslClientConfigs);
  newClientSelector.connect("2",addr,BUFFER_SIZE,BUFFER_SIZE);
  NetworkTestUtils.checkClientConnection(newClientSelector,"2",100,10);
  NetworkTestUtils.checkClientConnection(oldClientSelector,oldNode,100,10);
  Map<String,Object> invalidConfigs=new HashMap<>(newTruststoreConfigs);
  invalidConfigs.put(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG,"INVALID_TYPE");
  verifyInvalidReconfigure(reconfigurableBuilder,invalidConfigs,"invalid truststore type");
  Map<String,Object> missingStoreConfigs=new HashMap<>();
  missingStoreConfigs.put(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG,"PKCS12");
  missingStoreConfigs.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,"some.truststore.path");
  missingStoreConfigs.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG,new Password("some.truststore.password"));
  verifyInvalidReconfigure(reconfigurableBuilder,missingStoreConfigs,"truststore not found");
  newClientSelector.connect("3",addr,BUFFER_SIZE,BUFFER_SIZE);
  NetworkTestUtils.checkClientConnection(newClientSelector,"3",100,10);
}
