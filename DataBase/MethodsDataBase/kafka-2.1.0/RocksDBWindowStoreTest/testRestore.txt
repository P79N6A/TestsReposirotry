@Test public void testRestore() throws IOException {
  final long startTime=segmentInterval * 2;
  final long increment=segmentInterval / 2;
  windowStore=createWindowStore(context,false);
  setCurrentTime(startTime);
  windowStore.put(0,"zero");
  setCurrentTime(startTime + increment);
  windowStore.put(1,"one");
  setCurrentTime(startTime + increment * 2);
  windowStore.put(2,"two");
  setCurrentTime(startTime + increment * 3);
  windowStore.put(3,"three");
  setCurrentTime(startTime + increment * 4);
  windowStore.put(4,"four");
  setCurrentTime(startTime + increment * 5);
  windowStore.put(5,"five");
  setCurrentTime(startTime + increment * 6);
  windowStore.put(6,"six");
  setCurrentTime(startTime + increment * 7);
  windowStore.put(7,"seven");
  setCurrentTime(startTime + increment * 8);
  windowStore.put(8,"eight");
  windowStore.flush();
  windowStore.close();
  Utils.delete(baseDir);
  windowStore=createWindowStore(context,false);
  assertEquals(Utils.mkList(),toList(windowStore.fetch(0,ofEpochMilli(startTime - windowSize),ofEpochMilli(startTime + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(1,ofEpochMilli(startTime + increment - windowSize),ofEpochMilli(startTime + increment + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - windowSize),ofEpochMilli(startTime + increment * 2 + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - windowSize),ofEpochMilli(startTime + increment * 3 + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - windowSize),ofEpochMilli(startTime + increment * 4 + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - windowSize),ofEpochMilli(startTime + increment * 5 + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - windowSize),ofEpochMilli(startTime + increment * 6 + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - windowSize),ofEpochMilli(startTime + increment * 7 + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - windowSize),ofEpochMilli(startTime + increment * 8 + windowSize))));
  context.restore(windowName,changeLog);
  assertEquals(Utils.mkList(),toList(windowStore.fetch(0,ofEpochMilli(startTime - windowSize),ofEpochMilli(startTime + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(1,ofEpochMilli(startTime + increment - windowSize),ofEpochMilli(startTime + increment + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(2,ofEpochMilli(startTime + increment * 2 - windowSize),ofEpochMilli(startTime + increment * 2 + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(3,ofEpochMilli(startTime + increment * 3 - windowSize),ofEpochMilli(startTime + increment * 3 + windowSize))));
  assertEquals(Utils.mkList("four"),toList(windowStore.fetch(4,ofEpochMilli(startTime + increment * 4 - windowSize),ofEpochMilli(startTime + increment * 4 + windowSize))));
  assertEquals(Utils.mkList("five"),toList(windowStore.fetch(5,ofEpochMilli(startTime + increment * 5 - windowSize),ofEpochMilli(startTime + increment * 5 + windowSize))));
  assertEquals(Utils.mkList("six"),toList(windowStore.fetch(6,ofEpochMilli(startTime + increment * 6 - windowSize),ofEpochMilli(startTime + increment * 6 + windowSize))));
  assertEquals(Utils.mkList("seven"),toList(windowStore.fetch(7,ofEpochMilli(startTime + increment * 7 - windowSize),ofEpochMilli(startTime + increment * 7 + windowSize))));
  assertEquals(Utils.mkList("eight"),toList(windowStore.fetch(8,ofEpochMilli(startTime + increment * 8 - windowSize),ofEpochMilli(startTime + increment * 8 + windowSize))));
  windowStore.flush();
  assertEquals(Utils.mkSet(segments.segmentName(4L),segments.segmentName(5L),segments.segmentName(6L)),segmentDirs(baseDir));
}
