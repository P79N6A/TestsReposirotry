@Test public void testRangeAndSinglePointFetch(){
  windowStore=createWindowStore(context,false);
  final long startTime=segmentInterval - 4L;
  putFirstBatch(windowStore,startTime,context);
  assertEquals("zero",windowStore.fetch(0,startTime));
  assertEquals("one",windowStore.fetch(1,startTime + 1L));
  assertEquals("two",windowStore.fetch(2,startTime + 2L));
  assertEquals("four",windowStore.fetch(4,startTime + 4L));
  assertEquals("five",windowStore.fetch(5,startTime + 5L));
  assertEquals(Utils.mkList("zero"),toList(windowStore.fetch(0,ofEpochMilli(startTime + 0L - windowSize),ofEpochMilli(startTime + 0L + windowSize))));
  assertEquals(Utils.mkList("one"),toList(windowStore.fetch(1,ofEpochMilli(startTime + 1L - windowSize),ofEpochMilli(startTime + 1L + windowSize))));
  assertEquals(Utils.mkList("two"),toList(windowStore.fetch(2,ofEpochMilli(startTime + 2L - windowSize),ofEpochMilli(startTime + 2L + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(3,ofEpochMilli(startTime + 3L - windowSize),ofEpochMilli(startTime + 3L + windowSize))));
  assertEquals(Utils.mkList("four"),toList(windowStore.fetch(4,ofEpochMilli(startTime + 4L - windowSize),ofEpochMilli(startTime + 4L + windowSize))));
  assertEquals(Utils.mkList("five"),toList(windowStore.fetch(5,ofEpochMilli(startTime + 5L - windowSize),ofEpochMilli(startTime + 5L + windowSize))));
  putSecondBatch(windowStore,startTime,context);
  assertEquals("two+1",windowStore.fetch(2,startTime + 3L));
  assertEquals("two+2",windowStore.fetch(2,startTime + 4L));
  assertEquals("two+3",windowStore.fetch(2,startTime + 5L));
  assertEquals("two+4",windowStore.fetch(2,startTime + 6L));
  assertEquals("two+5",windowStore.fetch(2,startTime + 7L));
  assertEquals("two+6",windowStore.fetch(2,startTime + 8L));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(2,ofEpochMilli(startTime - 2L - windowSize),ofEpochMilli(startTime - 2L + windowSize))));
  assertEquals(Utils.mkList("two"),toList(windowStore.fetch(2,ofEpochMilli(startTime - 1L - windowSize),ofEpochMilli(startTime - 1L + windowSize))));
  assertEquals(Utils.mkList("two","two+1"),toList(windowStore.fetch(2,ofEpochMilli(startTime - windowSize),ofEpochMilli(startTime + windowSize))));
  assertEquals(Utils.mkList("two","two+1","two+2"),toList(windowStore.fetch(2,ofEpochMilli(startTime + 1L - windowSize),ofEpochMilli(startTime + 1L + windowSize))));
  assertEquals(Utils.mkList("two","two+1","two+2","two+3"),toList(windowStore.fetch(2,ofEpochMilli(startTime + 2L - windowSize),ofEpochMilli(startTime + 2L + windowSize))));
  assertEquals(Utils.mkList("two","two+1","two+2","two+3","two+4"),toList(windowStore.fetch(2,ofEpochMilli(startTime + 3L - windowSize),ofEpochMilli(startTime + 3L + windowSize))));
  assertEquals(Utils.mkList("two","two+1","two+2","two+3","two+4","two+5"),toList(windowStore.fetch(2,ofEpochMilli(startTime + 4L - windowSize),ofEpochMilli(startTime + 4L + windowSize))));
  assertEquals(Utils.mkList("two","two+1","two+2","two+3","two+4","two+5","two+6"),toList(windowStore.fetch(2,ofEpochMilli(startTime + 5L - windowSize),ofEpochMilli(startTime + 5L + windowSize))));
  assertEquals(Utils.mkList("two+1","two+2","two+3","two+4","two+5","two+6"),toList(windowStore.fetch(2,ofEpochMilli(startTime + 6L - windowSize),ofEpochMilli(startTime + 6L + windowSize))));
  assertEquals(Utils.mkList("two+2","two+3","two+4","two+5","two+6"),toList(windowStore.fetch(2,ofEpochMilli(startTime + 7L - windowSize),ofEpochMilli(startTime + 7L + windowSize))));
  assertEquals(Utils.mkList("two+3","two+4","two+5","two+6"),toList(windowStore.fetch(2,ofEpochMilli(startTime + 8L - windowSize),ofEpochMilli(startTime + 8L + windowSize))));
  assertEquals(Utils.mkList("two+4","two+5","two+6"),toList(windowStore.fetch(2,ofEpochMilli(startTime + 9L - windowSize),ofEpochMilli(startTime + 9L + windowSize))));
  assertEquals(Utils.mkList("two+5","two+6"),toList(windowStore.fetch(2,ofEpochMilli(startTime + 10L - windowSize),ofEpochMilli(startTime + 10L + windowSize))));
  assertEquals(Utils.mkList("two+6"),toList(windowStore.fetch(2,ofEpochMilli(startTime + 11L - windowSize),ofEpochMilli(startTime + 11L + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(2,ofEpochMilli(startTime + 12L - windowSize),ofEpochMilli(startTime + 12L + windowSize))));
  windowStore.flush();
  final Map<Integer,Set<String>> entriesByKey=entriesByKey(changeLog,startTime);
  assertEquals(Utils.mkSet("zero@0"),entriesByKey.get(0));
  assertEquals(Utils.mkSet("one@1"),entriesByKey.get(1));
  assertEquals(Utils.mkSet("two@2","two+1@3","two+2@4","two+3@5","two+4@6","two+5@7","two+6@8"),entriesByKey.get(2));
  assertNull(entriesByKey.get(3));
  assertEquals(Utils.mkSet("four@4"),entriesByKey.get(4));
  assertEquals(Utils.mkSet("five@5"),entriesByKey.get(5));
  assertNull(entriesByKey.get(6));
}
