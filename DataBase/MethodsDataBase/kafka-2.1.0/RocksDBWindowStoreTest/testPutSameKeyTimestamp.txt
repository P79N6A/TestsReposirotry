@Test public void testPutSameKeyTimestamp(){
  windowStore=createWindowStore(context,true);
  final long startTime=segmentInterval - 4L;
  setCurrentTime(startTime);
  windowStore.put(0,"zero");
  assertEquals(Utils.mkList("zero"),toList(windowStore.fetch(0,ofEpochMilli(startTime - windowSize),ofEpochMilli(startTime + windowSize))));
  windowStore.put(0,"zero");
  windowStore.put(0,"zero+");
  windowStore.put(0,"zero++");
  assertEquals(Utils.mkList("zero","zero","zero+","zero++"),toList(windowStore.fetch(0,ofEpochMilli(startTime - windowSize),ofEpochMilli(startTime + windowSize))));
  assertEquals(Utils.mkList("zero","zero","zero+","zero++"),toList(windowStore.fetch(0,ofEpochMilli(startTime + 1L - windowSize),ofEpochMilli(startTime + 1L + windowSize))));
  assertEquals(Utils.mkList("zero","zero","zero+","zero++"),toList(windowStore.fetch(0,ofEpochMilli(startTime + 2L - windowSize),ofEpochMilli(startTime + 2L + windowSize))));
  assertEquals(Utils.mkList("zero","zero","zero+","zero++"),toList(windowStore.fetch(0,ofEpochMilli(startTime + 3L - windowSize),ofEpochMilli(startTime + 3L + windowSize))));
  assertEquals(Utils.mkList(),toList(windowStore.fetch(0,ofEpochMilli(startTime + 4L - windowSize),ofEpochMilli(startTime + 4L + windowSize))));
  windowStore.flush();
  final Map<Integer,Set<String>> entriesByKey=entriesByKey(changeLog,startTime);
  assertEquals(Utils.mkSet("zero@0","zero@0","zero+@0","zero++@0"),entriesByKey.get(0));
}
