@Test public void testFetchRange(){
  windowStore=createWindowStore(context,false);
  final long startTime=segmentInterval - 4L;
  putFirstBatch(windowStore,startTime,context);
  final KeyValue<Windowed<Integer>,String> zero=windowedPair(0,"zero",startTime + 0);
  final KeyValue<Windowed<Integer>,String> one=windowedPair(1,"one",startTime + 1);
  final KeyValue<Windowed<Integer>,String> two=windowedPair(2,"two",startTime + 2);
  final KeyValue<Windowed<Integer>,String> four=windowedPair(4,"four",startTime + 4);
  final KeyValue<Windowed<Integer>,String> five=windowedPair(5,"five",startTime + 5);
  assertEquals(Utils.mkList(zero,one),StreamsTestUtils.toList(windowStore.fetch(0,1,ofEpochMilli(startTime + 0L - windowSize),ofEpochMilli(startTime + 0L + windowSize))));
  assertEquals(Utils.mkList(one),StreamsTestUtils.toList(windowStore.fetch(1,1,ofEpochMilli(startTime + 0L - windowSize),ofEpochMilli(startTime + 0L + windowSize))));
  assertEquals(Utils.mkList(one,two),StreamsTestUtils.toList(windowStore.fetch(1,3,ofEpochMilli(startTime + 0L - windowSize),ofEpochMilli(startTime + 0L + windowSize))));
  assertEquals(Utils.mkList(zero,one,two),StreamsTestUtils.toList(windowStore.fetch(0,5,ofEpochMilli(startTime + 0L - windowSize),ofEpochMilli(startTime + 0L + windowSize))));
  assertEquals(Utils.mkList(zero,one,two,four,five),StreamsTestUtils.toList(windowStore.fetch(0,5,ofEpochMilli(startTime + 0L - windowSize),ofEpochMilli(startTime + 0L + windowSize+ 5L))));
  assertEquals(Utils.mkList(two,four,five),StreamsTestUtils.toList(windowStore.fetch(0,5,ofEpochMilli(startTime + 2L),ofEpochMilli(startTime + 0L + windowSize+ 5L))));
  assertEquals(Utils.mkList(),StreamsTestUtils.toList(windowStore.fetch(4,5,ofEpochMilli(startTime + 2L),ofEpochMilli(startTime + windowSize))));
  assertEquals(Utils.mkList(),StreamsTestUtils.toList(windowStore.fetch(0,3,ofEpochMilli(startTime + 3L),ofEpochMilli(startTime + windowSize + 5))));
}
