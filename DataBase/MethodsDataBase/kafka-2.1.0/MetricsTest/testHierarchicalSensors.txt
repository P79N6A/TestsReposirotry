@Test public void testHierarchicalSensors(){
  Sensor parent1=metrics.sensor("test.parent1");
  parent1.add(metrics.metricName("test.parent1.count","grp1"),new Count());
  Sensor parent2=metrics.sensor("test.parent2");
  parent2.add(metrics.metricName("test.parent2.count","grp1"),new Count());
  Sensor child1=metrics.sensor("test.child1",parent1,parent2);
  child1.add(metrics.metricName("test.child1.count","grp1"),new Count());
  Sensor child2=metrics.sensor("test.child2",parent1);
  child2.add(metrics.metricName("test.child2.count","grp1"),new Count());
  Sensor grandchild=metrics.sensor("test.grandchild",child1);
  grandchild.add(metrics.metricName("test.grandchild.count","grp1"),new Count());
  parent1.record();
  parent2.record();
  child1.record();
  child2.record();
  grandchild.record();
  double p1=(double)parent1.metrics().get(0).metricValue();
  double p2=(double)parent2.metrics().get(0).metricValue();
  double c1=(double)child1.metrics().get(0).metricValue();
  double c2=(double)child2.metrics().get(0).metricValue();
  double gc=(double)grandchild.metrics().get(0).metricValue();
  assertEquals(1.0,gc,EPS);
  assertEquals(1.0 + gc,c1,EPS);
  assertEquals(1.0,c2,EPS);
  assertEquals(1.0 + c1,p2,EPS);
  assertEquals(1.0 + c1 + c2,p1,EPS);
  assertEquals(Arrays.asList(child1,child2),metrics.childrenSensors().get(parent1));
  assertEquals(Arrays.asList(child1),metrics.childrenSensors().get(parent2));
  assertNull(metrics.childrenSensors().get(grandchild));
}
