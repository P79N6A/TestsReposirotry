@Test public void testOnConsumeChain(){
  List<ConsumerInterceptor<Integer,Integer>> interceptorList=new ArrayList<>();
  FilterConsumerInterceptor<Integer,Integer> interceptor1=new FilterConsumerInterceptor<>(filterPartition1);
  FilterConsumerInterceptor<Integer,Integer> interceptor2=new FilterConsumerInterceptor<>(filterPartition2);
  interceptorList.add(interceptor1);
  interceptorList.add(interceptor2);
  ConsumerInterceptors<Integer,Integer> interceptors=new ConsumerInterceptors<>(interceptorList);
  Map<TopicPartition,List<ConsumerRecord<Integer,Integer>>> records=new HashMap<>();
  List<ConsumerRecord<Integer,Integer>> list1=new ArrayList<>();
  list1.add(consumerRecord);
  List<ConsumerRecord<Integer,Integer>> list2=new ArrayList<>();
  list2.add(new ConsumerRecord<>(filterTopicPart1.topic(),filterTopicPart1.partition(),0,0L,TimestampType.CREATE_TIME,0L,0,0,1,1));
  List<ConsumerRecord<Integer,Integer>> list3=new ArrayList<>();
  list3.add(new ConsumerRecord<>(filterTopicPart2.topic(),filterTopicPart2.partition(),0,0L,TimestampType.CREATE_TIME,0L,0,0,1,1));
  records.put(tp,list1);
  records.put(filterTopicPart1,list2);
  records.put(filterTopicPart2,list3);
  ConsumerRecords<Integer,Integer> consumerRecords=new ConsumerRecords<>(records);
  ConsumerRecords<Integer,Integer> interceptedRecords=interceptors.onConsume(consumerRecords);
  assertEquals(1,interceptedRecords.count());
  assertTrue(interceptedRecords.partitions().contains(tp));
  assertFalse(interceptedRecords.partitions().contains(filterTopicPart1));
  assertFalse(interceptedRecords.partitions().contains(filterTopicPart2));
  assertEquals(2,onConsumeCount);
  interceptor1.injectOnConsumeError(true);
  ConsumerRecords<Integer,Integer> partInterceptedRecs=interceptors.onConsume(consumerRecords);
  assertEquals(2,partInterceptedRecs.count());
  assertTrue(partInterceptedRecs.partitions().contains(filterTopicPart1));
  assertFalse(partInterceptedRecs.partitions().contains(filterTopicPart2));
  assertEquals(4,onConsumeCount);
  interceptor2.injectOnConsumeError(true);
  ConsumerRecords<Integer,Integer> noneInterceptedRecs=interceptors.onConsume(consumerRecords);
  assertEquals(noneInterceptedRecs,consumerRecords);
  assertEquals(3,noneInterceptedRecs.count());
  assertEquals(6,onConsumeCount);
  interceptors.close();
}
