/** 
 * Tests client connection close before response for authentication failure is sent.
 */
@Test public void testClientConnectionClose() throws Exception {
  String node="0";
  SecurityProtocol securityProtocol=SecurityProtocol.SASL_SSL;
  TestJaasConfig jaasConfig=configureMechanisms("PLAIN",Arrays.asList("PLAIN"));
  jaasConfig.setClientOptions("PLAIN",TestJaasConfig.USERNAME,"invalidpassword");
  server=createEchoServer(securityProtocol);
  createClientConnection(securityProtocol,node);
  Map<?,?> delayedClosingChannels=NetworkTestUtils.delayedClosingChannels(server.selector());
  TestUtils.waitForCondition(() -> {
    poll(selector);
    return !server.selector().channels().isEmpty();
  }
,"Timeout waiting for connection");
  TestUtils.waitForCondition(() -> {
    poll(selector);
    return failedAuthenticationDelayMs == 0 || !delayedClosingChannels.isEmpty();
  }
,"Timeout waiting for auth failure");
  selector.close();
  selector=null;
  TestUtils.waitForCondition(() -> failedAuthenticationDelayMs == 0 || delayedClosingChannels.isEmpty(),"Timeout waiting for delayed response remove");
  TestUtils.waitForCondition(() -> server.selector().channels().isEmpty(),"Timeout waiting for connection close");
  TestUtils.waitForCondition(() -> time.milliseconds() > startTimeMs + failedAuthenticationDelayMs + 1,"Timeout when waiting for auth failure response timeout to elapse");
  NetworkTestUtils.completeDelayedChannelClose(server.selector(),time.nanoseconds());
}
