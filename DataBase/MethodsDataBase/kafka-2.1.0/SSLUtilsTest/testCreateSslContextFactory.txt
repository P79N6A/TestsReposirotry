@Test public void testCreateSslContextFactory(){
  Map<String,String> configMap=new HashMap<>(DEFAULT_CONFIG);
  configMap.put("ssl.keystore.location","/path/to/keystore");
  configMap.put("ssl.keystore.password","123456");
  configMap.put("ssl.key.password","123456");
  configMap.put("ssl.truststore.location","/path/to/truststore");
  configMap.put("ssl.truststore.password","123456");
  configMap.put("ssl.provider","SunJSSE");
  configMap.put("ssl.cipher.suites","SSL_RSA_WITH_RC4_128_SHA,SSL_RSA_WITH_RC4_128_MD5");
  configMap.put("ssl.secure.random.implementation","SHA1PRNG");
  configMap.put("ssl.client.auth","required");
  configMap.put("ssl.endpoint.identification.algorithm","HTTPS");
  configMap.put("ssl.keystore.type","JKS");
  configMap.put("ssl.protocol","TLS");
  configMap.put("ssl.truststore.type","JKS");
  configMap.put("ssl.enabled.protocols","TLSv1.2,TLSv1.1,TLSv1");
  configMap.put("ssl.keymanager.algorithm","SunX509");
  configMap.put("ssl.trustmanager.algorithm","PKIX");
  DistributedConfig config=new DistributedConfig(configMap);
  SslContextFactory ssl=SSLUtils.createSslContextFactory(config);
  Assert.assertEquals("file:///path/to/keystore",ssl.getKeyStorePath());
  Assert.assertEquals("file:///path/to/truststore",ssl.getTrustStorePath());
  Assert.assertEquals("SunJSSE",ssl.getProvider());
  Assert.assertArrayEquals(new String[]{"SSL_RSA_WITH_RC4_128_SHA","SSL_RSA_WITH_RC4_128_MD5"},ssl.getIncludeCipherSuites());
  Assert.assertEquals("SHA1PRNG",ssl.getSecureRandomAlgorithm());
  Assert.assertTrue(ssl.getNeedClientAuth());
  Assert.assertEquals("JKS",ssl.getKeyStoreType());
  Assert.assertEquals("JKS",ssl.getTrustStoreType());
  Assert.assertEquals("TLS",ssl.getProtocol());
  Assert.assertArrayEquals(new String[]{"TLSv1.2","TLSv1.1","TLSv1"},ssl.getIncludeProtocols());
  Assert.assertEquals("SunX509",ssl.getKeyManagerFactoryAlgorithm());
  Assert.assertEquals("PKIX",ssl.getTrustManagerFactoryAlgorithm());
}
