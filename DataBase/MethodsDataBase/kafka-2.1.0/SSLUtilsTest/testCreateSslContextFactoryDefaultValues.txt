@Test public void testCreateSslContextFactoryDefaultValues(){
  Map<String,String> configMap=new HashMap<>(DEFAULT_CONFIG);
  configMap.put(StandaloneConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG,"/tmp/offset/file");
  configMap.put(WorkerConfig.KEY_CONVERTER_CLASS_CONFIG,"org.apache.kafka.connect.json.JsonConverter");
  configMap.put(WorkerConfig.VALUE_CONVERTER_CLASS_CONFIG,"org.apache.kafka.connect.json.JsonConverter");
  configMap.put(WorkerConfig.INTERNAL_KEY_CONVERTER_CLASS_CONFIG,"org.apache.kafka.connect.json.JsonConverter");
  configMap.put(WorkerConfig.INTERNAL_VALUE_CONVERTER_CLASS_CONFIG,"org.apache.kafka.connect.json.JsonConverter");
  configMap.put("ssl.keystore.location","/path/to/keystore");
  configMap.put("ssl.keystore.password","123456");
  configMap.put("ssl.key.password","123456");
  configMap.put("ssl.truststore.location","/path/to/truststore");
  configMap.put("ssl.truststore.password","123456");
  configMap.put("ssl.provider","SunJSSE");
  configMap.put("ssl.cipher.suites","SSL_RSA_WITH_RC4_128_SHA,SSL_RSA_WITH_RC4_128_MD5");
  configMap.put("ssl.secure.random.implementation","SHA1PRNG");
  DistributedConfig config=new DistributedConfig(configMap);
  SslContextFactory ssl=SSLUtils.createSslContextFactory(config);
  Assert.assertEquals(SslConfigs.DEFAULT_SSL_KEYSTORE_TYPE,ssl.getKeyStoreType());
  Assert.assertEquals(SslConfigs.DEFAULT_SSL_TRUSTSTORE_TYPE,ssl.getTrustStoreType());
  Assert.assertEquals(SslConfigs.DEFAULT_SSL_PROTOCOL,ssl.getProtocol());
  Assert.assertArrayEquals(Arrays.asList(SslConfigs.DEFAULT_SSL_ENABLED_PROTOCOLS.split("\\s*,\\s*")).toArray(),ssl.getIncludeProtocols());
  Assert.assertEquals(SslConfigs.DEFAULT_SSL_KEYMANGER_ALGORITHM,ssl.getKeyManagerFactoryAlgorithm());
  Assert.assertEquals(SslConfigs.DEFAULT_SSL_TRUSTMANAGER_ALGORITHM,ssl.getTrustManagerFactoryAlgorithm());
  Assert.assertFalse(ssl.getNeedClientAuth());
  Assert.assertFalse(ssl.getWantClientAuth());
}
