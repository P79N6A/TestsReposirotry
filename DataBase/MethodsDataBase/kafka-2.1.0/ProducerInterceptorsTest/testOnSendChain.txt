@Test public void testOnSendChain(){
  List<ProducerInterceptor<Integer,String>> interceptorList=new ArrayList<>();
  AppendProducerInterceptor interceptor1=new AppendProducerInterceptor("One");
  AppendProducerInterceptor interceptor2=new AppendProducerInterceptor("Two");
  interceptorList.add(interceptor1);
  interceptorList.add(interceptor2);
  ProducerInterceptors<Integer,String> interceptors=new ProducerInterceptors<>(interceptorList);
  ProducerRecord<Integer,String> interceptedRecord=interceptors.onSend(producerRecord);
  assertEquals(2,onSendCount);
  assertEquals(producerRecord.topic(),interceptedRecord.topic());
  assertEquals(producerRecord.partition(),interceptedRecord.partition());
  assertEquals(producerRecord.key(),interceptedRecord.key());
  assertEquals(interceptedRecord.value(),producerRecord.value().concat("One").concat("Two"));
  ProducerRecord<Integer,String> anotherRecord=interceptors.onSend(producerRecord);
  assertEquals(4,onSendCount);
  assertEquals(interceptedRecord,anotherRecord);
  interceptor1.injectOnSendError(true);
  ProducerRecord<Integer,String> partInterceptRecord=interceptors.onSend(producerRecord);
  assertEquals(6,onSendCount);
  assertEquals(partInterceptRecord.value(),producerRecord.value().concat("Two"));
  interceptor2.injectOnSendError(true);
  ProducerRecord<Integer,String> noInterceptRecord=interceptors.onSend(producerRecord);
  assertEquals(producerRecord,noInterceptRecord);
  interceptors.close();
}
