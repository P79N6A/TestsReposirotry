@Test public void testUnknownProducerErrorShouldBeRetriedForFutureBatchesWhenFirstFails() throws Exception {
  final long producerId=343434L;
  TransactionManager transactionManager=new TransactionManager();
  setupWithTransactionState(transactionManager);
  prepareAndReceiveInitProducerId(producerId,Errors.NONE);
  assertTrue(transactionManager.hasProducerId());
  assertEquals(0,transactionManager.sequenceNumber(tp0).longValue());
  Future<RecordMetadata> request1=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  sender.run(time.milliseconds());
  assertEquals(1,client.inFlightRequestCount());
  assertEquals(1,transactionManager.sequenceNumber(tp0).longValue());
  assertEquals(-1,transactionManager.lastAckedSequence(tp0));
  sendIdempotentProducerResponse(0,tp0,Errors.NONE,1000L,10L);
  sender.run(time.milliseconds());
  assertTrue(request1.isDone());
  assertEquals(1000L,request1.get().offset());
  assertEquals(0L,transactionManager.lastAckedSequence(tp0));
  assertEquals(1000L,transactionManager.lastAckedOffset(tp0));
  Future<RecordMetadata> request2=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  sender.run(time.milliseconds());
  assertEquals(2,transactionManager.sequenceNumber(tp0).longValue());
  assertEquals(0,transactionManager.lastAckedSequence(tp0));
  Future<RecordMetadata> request3=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  sender.run(time.milliseconds());
  assertEquals(3,transactionManager.sequenceNumber(tp0).longValue());
  assertEquals(0,transactionManager.lastAckedSequence(tp0));
  assertFalse(request2.isDone());
  assertFalse(request3.isDone());
  assertEquals(2,client.inFlightRequestCount());
  sendIdempotentProducerResponse(1,tp0,Errors.UNKNOWN_PRODUCER_ID,-1L,1010L);
  sender.run(time.milliseconds());
  assertEquals(-1,transactionManager.lastAckedSequence(tp0));
  assertEquals(2,transactionManager.sequenceNumber(tp0).longValue());
  assertFalse(request2.isDone());
  assertFalse(request3.isDone());
  assertEquals(1,client.inFlightRequestCount());
  sender.run(time.milliseconds());
  assertEquals(2,client.inFlightRequestCount());
  sendIdempotentProducerResponse(2,tp0,Errors.UNKNOWN_PRODUCER_ID,-1,1010L);
  sender.run(time.milliseconds());
  assertEquals(1,client.inFlightRequestCount());
  assertEquals(-1,transactionManager.lastAckedSequence(tp0));
  assertEquals(2,transactionManager.sequenceNumber(tp0).longValue());
  sendIdempotentProducerResponse(0,tp0,Errors.NONE,1011L,1010L);
  sender.run(time.milliseconds());
  assertTrue(request2.isDone());
  assertFalse(request3.isDone());
  assertFalse(client.hasInFlightRequests());
  assertEquals(0,transactionManager.lastAckedSequence(tp0));
  assertEquals(1011L,request2.get().offset());
  assertEquals(1011L,transactionManager.lastAckedOffset(tp0));
  sender.run(time.milliseconds());
  assertEquals(1,client.inFlightRequestCount());
  sendIdempotentProducerResponse(1,tp0,Errors.NONE,1012L,1010L);
  sender.run(time.milliseconds());
  assertFalse(client.hasInFlightRequests());
  assertTrue(request3.isDone());
  assertEquals(1012L,request3.get().offset());
  assertEquals(1012L,transactionManager.lastAckedOffset(tp0));
}
