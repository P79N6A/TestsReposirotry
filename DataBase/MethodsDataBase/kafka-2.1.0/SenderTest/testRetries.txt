@Test public void testRetries() throws Exception {
  int maxRetries=1;
  Metrics m=new Metrics();
  SenderMetricsRegistry senderMetrics=new SenderMetricsRegistry(m);
  try {
    Sender sender=new Sender(logContext,client,metadata,this.accumulator,false,MAX_REQUEST_SIZE,ACKS_ALL,maxRetries,senderMetrics,time,REQUEST_TIMEOUT,50,null,apiVersions);
    Future<RecordMetadata> future=accumulator.append(tp0,0L,"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
    sender.run(time.milliseconds());
    sender.run(time.milliseconds());
    String id=client.requests().peek().destination();
    Node node=new Node(Integer.parseInt(id),"localhost",0);
    assertEquals(1,client.inFlightRequestCount());
    assertTrue(client.hasInFlightRequests());
    assertEquals(1,sender.inFlightBatches(tp0).size());
    assertTrue("Client ready status should be true",client.isReady(node,0L));
    client.disconnect(id);
    assertEquals(0,client.inFlightRequestCount());
    assertFalse(client.hasInFlightRequests());
    assertFalse("Client ready status should be false",client.isReady(node,0L));
    assertEquals(1,sender.inFlightBatches(tp0).size());
    sender.run(time.milliseconds());
    sender.run(time.milliseconds());
    sender.run(time.milliseconds());
    assertEquals(1,client.inFlightRequestCount());
    assertTrue(client.hasInFlightRequests());
    assertEquals(1,sender.inFlightBatches(tp0).size());
    long offset=0;
    client.respond(produceResponse(tp0,offset,Errors.NONE,0));
    sender.run(time.milliseconds());
    assertTrue("Request should have retried and completed",future.isDone());
    assertEquals(offset,future.get().offset());
    assertEquals(0,sender.inFlightBatches(tp0).size());
    future=accumulator.append(tp0,0L,"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
    sender.run(time.milliseconds());
    assertEquals(1,sender.inFlightBatches(tp0).size());
    for (int i=0; i < maxRetries + 1; i++) {
      client.disconnect(client.requests().peek().destination());
      sender.run(time.milliseconds());
      assertEquals(0,sender.inFlightBatches(tp0).size());
      sender.run(time.milliseconds());
      sender.run(time.milliseconds());
      assertEquals(i > 0 ? 0 : 1,sender.inFlightBatches(tp0).size());
    }
    sender.run(time.milliseconds());
    assertFutureFailure(future,NetworkException.class);
    assertEquals(0,sender.inFlightBatches(tp0).size());
  }
  finally {
    m.close();
  }
}
