@Test public void testExpiryOfFirstBatchShouldNotCauseUnresolvedSequencesIfFutureBatchesSucceed() throws Exception {
  final long producerId=343434L;
  TransactionManager transactionManager=new TransactionManager();
  setupWithTransactionState(transactionManager,false,null);
  prepareAndReceiveInitProducerId(producerId,Errors.NONE);
  assertTrue(transactionManager.hasProducerId());
  assertEquals(0,transactionManager.sequenceNumber(tp0).longValue());
  Future<RecordMetadata> request1=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  sender.run(time.milliseconds());
  time.sleep(1000L);
  Future<RecordMetadata> request2=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  sender.run(time.milliseconds());
  assertEquals(2,client.inFlightRequestCount());
  assertEquals(2,sender.inFlightBatches(tp0).size());
  sendIdempotentProducerResponse(0,tp0,Errors.REQUEST_TIMED_OUT,-1);
  sender.run(time.milliseconds());
  assertEquals(1,sender.inFlightBatches(tp0).size());
  Node node=this.cluster.nodes().get(0);
  time.sleep(600L);
  client.disconnect(node.idString());
  client.blackout(node,10);
  sender.run(time.milliseconds());
  assertFutureFailure(request1,TimeoutException.class);
  assertTrue(transactionManager.hasUnresolvedSequence(tp0));
  assertEquals(0,sender.inFlightBatches(tp0).size());
  Future<RecordMetadata> request3=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  time.sleep(20);
  assertFalse(request2.isDone());
  sender.run(time.milliseconds());
  sendIdempotentProducerResponse(1,tp0,Errors.NONE,1);
  assertEquals(1,sender.inFlightBatches(tp0).size());
  sender.run(time.milliseconds());
  assertTrue(request2.isDone());
  assertEquals(1,request2.get().offset());
  assertEquals(0,sender.inFlightBatches(tp0).size());
  Deque<ProducerBatch> batches=accumulator.batches().get(tp0);
  assertEquals(1,batches.size());
  assertFalse(batches.peekFirst().hasSequence());
  assertFalse(client.hasInFlightRequests());
  assertEquals(2L,transactionManager.sequenceNumber(tp0).longValue());
  assertTrue(transactionManager.hasUnresolvedSequence(tp0));
  sender.run(time.milliseconds());
  assertFalse(transactionManager.hasUnresolvedSequence(tp0));
  assertTrue(transactionManager.hasProducerId());
  assertEquals(0,batches.size());
  assertEquals(1,client.inFlightRequestCount());
  assertFalse(request3.isDone());
  assertEquals(1,sender.inFlightBatches(tp0).size());
}
