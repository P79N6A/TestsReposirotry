@Test public void testSequenceNumberIncrement() throws InterruptedException {
  final long producerId=343434L;
  TransactionManager transactionManager=new TransactionManager();
  transactionManager.setProducerIdAndEpoch(new ProducerIdAndEpoch(producerId,(short)0));
  setupWithTransactionState(transactionManager);
  client.setNode(new Node(1,"localhost",33343));
  int maxRetries=10;
  Metrics m=new Metrics();
  SenderMetricsRegistry senderMetrics=new SenderMetricsRegistry(m);
  Sender sender=new Sender(logContext,client,metadata,this.accumulator,true,MAX_REQUEST_SIZE,ACKS_ALL,maxRetries,senderMetrics,time,REQUEST_TIMEOUT,50,transactionManager,apiVersions);
  Future<RecordMetadata> responseFuture=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  client.prepareResponse(new MockClient.RequestMatcher(){
    @Override public boolean matches(    AbstractRequest body){
      if (body instanceof ProduceRequest) {
        ProduceRequest request=(ProduceRequest)body;
        MemoryRecords records=request.partitionRecordsOrFail().get(tp0);
        Iterator<MutableRecordBatch> batchIterator=records.batches().iterator();
        assertTrue(batchIterator.hasNext());
        RecordBatch batch=batchIterator.next();
        assertFalse(batchIterator.hasNext());
        assertEquals(0,batch.baseSequence());
        assertEquals(producerId,batch.producerId());
        assertEquals(0,batch.producerEpoch());
        return true;
      }
      return false;
    }
  }
,produceResponse(tp0,0,Errors.NONE,0));
  sender.run(time.milliseconds());
  sender.run(time.milliseconds());
  sender.run(time.milliseconds());
  assertTrue(responseFuture.isDone());
  assertEquals(0L,(long)transactionManager.lastAckedSequence(tp0));
  assertEquals(1L,(long)transactionManager.sequenceNumber(tp0));
}
