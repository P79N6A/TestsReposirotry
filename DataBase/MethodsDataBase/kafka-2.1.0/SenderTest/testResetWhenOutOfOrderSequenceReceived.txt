@Test public void testResetWhenOutOfOrderSequenceReceived() throws InterruptedException {
  final long producerId=343434L;
  TransactionManager transactionManager=new TransactionManager();
  transactionManager.setProducerIdAndEpoch(new ProducerIdAndEpoch(producerId,(short)0));
  setupWithTransactionState(transactionManager);
  client.setNode(new Node(1,"localhost",33343));
  int maxRetries=10;
  Metrics m=new Metrics();
  SenderMetricsRegistry senderMetrics=new SenderMetricsRegistry(m);
  Sender sender=new Sender(logContext,client,metadata,this.accumulator,true,MAX_REQUEST_SIZE,ACKS_ALL,maxRetries,senderMetrics,time,REQUEST_TIMEOUT,50,transactionManager,apiVersions);
  Future<RecordMetadata> responseFuture=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  sender.run(time.milliseconds());
  sender.run(time.milliseconds());
  assertEquals(1,client.inFlightRequestCount());
  assertEquals(1,sender.inFlightBatches(tp0).size());
  client.respond(produceResponse(tp0,0,Errors.OUT_OF_ORDER_SEQUENCE_NUMBER,0));
  sender.run(time.milliseconds());
  assertTrue(responseFuture.isDone());
  assertEquals(0,sender.inFlightBatches(tp0).size());
  assertFalse("Expected transaction state to be reset upon receiving an OutOfOrderSequenceException",transactionManager.hasProducerId());
}
