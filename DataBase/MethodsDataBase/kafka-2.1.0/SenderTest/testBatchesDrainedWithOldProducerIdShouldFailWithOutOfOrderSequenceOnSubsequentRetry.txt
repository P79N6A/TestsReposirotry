@Test public void testBatchesDrainedWithOldProducerIdShouldFailWithOutOfOrderSequenceOnSubsequentRetry() throws Exception {
  final long producerId=343434L;
  TransactionManager transactionManager=new TransactionManager();
  transactionManager.setProducerIdAndEpoch(new ProducerIdAndEpoch(producerId,(short)0));
  setupWithTransactionState(transactionManager);
  client.setNode(new Node(1,"localhost",33343));
  int maxRetries=10;
  Metrics m=new Metrics();
  SenderMetricsRegistry senderMetrics=new SenderMetricsRegistry(m);
  Sender sender=new Sender(logContext,client,metadata,this.accumulator,true,MAX_REQUEST_SIZE,ACKS_ALL,maxRetries,senderMetrics,time,REQUEST_TIMEOUT,50,transactionManager,apiVersions);
  Future<RecordMetadata> failedResponse=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  Future<RecordMetadata> successfulResponse=accumulator.append(tp1,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  sender.run(time.milliseconds());
  sender.run(time.milliseconds());
  assertEquals(1,client.inFlightRequestCount());
  Map<TopicPartition,OffsetAndError> responses=new LinkedHashMap<>();
  responses.put(tp1,new OffsetAndError(-1,Errors.NOT_LEADER_FOR_PARTITION));
  responses.put(tp0,new OffsetAndError(-1,Errors.OUT_OF_ORDER_SEQUENCE_NUMBER));
  client.respond(produceResponse(responses));
  sender.run(time.milliseconds());
  assertTrue(failedResponse.isDone());
  assertFalse("Expected transaction state to be reset upon receiving an OutOfOrderSequenceException",transactionManager.hasProducerId());
  prepareAndReceiveInitProducerId(producerId + 1,Errors.NONE);
  assertEquals(producerId + 1,transactionManager.producerIdAndEpoch().producerId);
  sender.run(time.milliseconds());
  assertFalse(successfulResponse.isDone());
  client.respond(produceResponse(tp1,0,Errors.NOT_LEADER_FOR_PARTITION,-1));
  sender.run(time.milliseconds());
  assertTrue(successfulResponse.isDone());
  try {
    successfulResponse.get();
    fail("Should have raised an OutOfOrderSequenceException");
  }
 catch (  Exception e) {
    assertTrue(e.getCause() instanceof OutOfOrderSequenceException);
  }
}
