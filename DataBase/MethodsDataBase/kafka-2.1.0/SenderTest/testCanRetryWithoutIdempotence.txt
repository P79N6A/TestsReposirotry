@Test public void testCanRetryWithoutIdempotence() throws Exception {
  Future<RecordMetadata> future=accumulator.append(tp0,0L,"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  sender.run(time.milliseconds());
  sender.run(time.milliseconds());
  String id=client.requests().peek().destination();
  Node node=new Node(Integer.parseInt(id),"localhost",0);
  assertEquals(1,client.inFlightRequestCount());
  assertTrue(client.hasInFlightRequests());
  assertEquals(1,sender.inFlightBatches(tp0).size());
  assertTrue("Client ready status should be true",client.isReady(node,0L));
  assertFalse(future.isDone());
  client.respond(new MockClient.RequestMatcher(){
    @Override public boolean matches(    AbstractRequest body){
      ProduceRequest request=(ProduceRequest)body;
      assertFalse(request.isIdempotent());
      return true;
    }
  }
,produceResponse(tp0,-1L,Errors.TOPIC_AUTHORIZATION_FAILED,0));
  sender.run(time.milliseconds());
  assertTrue(future.isDone());
  try {
    future.get();
  }
 catch (  Exception e) {
    assertTrue(e.getCause() instanceof TopicAuthorizationException);
  }
}
