@Test public void testSendInOrder() throws Exception {
  int maxRetries=1;
  Metrics m=new Metrics();
  SenderMetricsRegistry senderMetrics=new SenderMetricsRegistry(m);
  try {
    Sender sender=new Sender(logContext,client,metadata,this.accumulator,true,MAX_REQUEST_SIZE,ACKS_ALL,maxRetries,senderMetrics,time,REQUEST_TIMEOUT,50,null,apiVersions);
    Cluster cluster1=TestUtils.clusterWith(2,"test",2);
    metadata.update(cluster1,Collections.emptySet(),time.milliseconds());
    TopicPartition tp2=new TopicPartition("test",1);
    accumulator.append(tp2,0L,"key1".getBytes(),"value1".getBytes(),null,null,MAX_BLOCK_TIMEOUT);
    sender.run(time.milliseconds());
    sender.run(time.milliseconds());
    String id=client.requests().peek().destination();
    assertEquals(ApiKeys.PRODUCE,client.requests().peek().requestBuilder().apiKey());
    Node node=new Node(Integer.parseInt(id),"localhost",0);
    assertEquals(1,client.inFlightRequestCount());
    assertTrue(client.hasInFlightRequests());
    assertTrue("Client ready status should be true",client.isReady(node,0L));
    assertEquals(1,sender.inFlightBatches(tp2).size());
    time.sleep(900);
    accumulator.append(tp2,0L,"key2".getBytes(),"value2".getBytes(),null,null,MAX_BLOCK_TIMEOUT);
    Cluster cluster2=TestUtils.singletonCluster("test",2);
    metadata.update(cluster2,Collections.emptySet(),time.milliseconds());
    assertEquals(1,sender.inFlightBatches(tp2).size());
    sender.run(time.milliseconds());
    assertEquals(1,client.inFlightRequestCount());
    assertTrue(client.hasInFlightRequests());
    assertEquals(1,sender.inFlightBatches(tp2).size());
  }
  finally {
    m.close();
  }
}
