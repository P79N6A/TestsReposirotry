/** 
 * Tests that topics are added to the metadata list when messages are available to send and expired if not used during a metadata refresh interval.
 */
@Test public void testMetadataTopicExpiry() throws Exception {
  long offset=0;
  metadata.update(Cluster.empty(),Collections.<String>emptySet(),time.milliseconds());
  Future<RecordMetadata> future=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  sender.run(time.milliseconds());
  assertTrue("Topic not added to metadata",metadata.containsTopic(tp0.topic()));
  metadata.update(cluster,Collections.<String>emptySet(),time.milliseconds());
  sender.run(time.milliseconds());
  client.respond(produceResponse(tp0,offset++,Errors.NONE,0));
  sender.run(time.milliseconds());
  assertEquals("Request completed.",0,client.inFlightRequestCount());
  assertFalse(client.hasInFlightRequests());
  assertEquals(0,sender.inFlightBatches(tp0).size());
  sender.run(time.milliseconds());
  assertTrue("Request should be completed",future.isDone());
  assertTrue("Topic not retained in metadata list",metadata.containsTopic(tp0.topic()));
  time.sleep(Metadata.TOPIC_EXPIRY_MS);
  metadata.update(Cluster.empty(),Collections.<String>emptySet(),time.milliseconds());
  assertFalse("Unused topic has not been expired",metadata.containsTopic(tp0.topic()));
  future=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  sender.run(time.milliseconds());
  assertTrue("Topic not added to metadata",metadata.containsTopic(tp0.topic()));
  metadata.update(cluster,Collections.<String>emptySet(),time.milliseconds());
  sender.run(time.milliseconds());
  client.respond(produceResponse(tp0,offset++,Errors.NONE,0));
  sender.run(time.milliseconds());
  assertEquals("Request completed.",0,client.inFlightRequestCount());
  assertFalse(client.hasInFlightRequests());
  assertEquals(0,sender.inFlightBatches(tp0).size());
  sender.run(time.milliseconds());
  assertTrue("Request should be completed",future.isDone());
}
