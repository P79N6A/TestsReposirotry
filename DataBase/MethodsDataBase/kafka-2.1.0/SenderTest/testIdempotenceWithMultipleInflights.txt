@Test public void testIdempotenceWithMultipleInflights() throws Exception {
  final long producerId=343434L;
  TransactionManager transactionManager=new TransactionManager();
  setupWithTransactionState(transactionManager);
  prepareAndReceiveInitProducerId(producerId,Errors.NONE);
  assertTrue(transactionManager.hasProducerId());
  assertEquals(0,transactionManager.sequenceNumber(tp0).longValue());
  Future<RecordMetadata> request1=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  sender.run(time.milliseconds());
  String nodeId=client.requests().peek().destination();
  Node node=new Node(Integer.valueOf(nodeId),"localhost",0);
  assertEquals(1,client.inFlightRequestCount());
  assertEquals(1,transactionManager.sequenceNumber(tp0).longValue());
  assertEquals(-1,transactionManager.lastAckedSequence(tp0));
  Future<RecordMetadata> request2=accumulator.append(tp0,time.milliseconds(),"key".getBytes(),"value".getBytes(),null,null,MAX_BLOCK_TIMEOUT).future;
  sender.run(time.milliseconds());
  assertEquals(2,client.inFlightRequestCount());
  assertEquals(2,transactionManager.sequenceNumber(tp0).longValue());
  assertEquals(-1,transactionManager.lastAckedSequence(tp0));
  assertFalse(request1.isDone());
  assertFalse(request2.isDone());
  assertTrue(client.isReady(node,time.milliseconds()));
  sendIdempotentProducerResponse(0,tp0,Errors.NONE,0L);
  sender.run(time.milliseconds());
  assertEquals(1,client.inFlightRequestCount());
  assertEquals(0,transactionManager.lastAckedSequence(tp0));
  assertTrue(request1.isDone());
  assertEquals(0,request1.get().offset());
  assertFalse(request2.isDone());
  sendIdempotentProducerResponse(1,tp0,Errors.NONE,1L);
  sender.run(time.milliseconds());
  assertEquals(1,transactionManager.lastAckedSequence(tp0));
  assertFalse(client.hasInFlightRequests());
  assertEquals(0,sender.inFlightBatches(tp0).size());
  assertTrue(request2.isDone());
  assertEquals(1,request2.get().offset());
}
