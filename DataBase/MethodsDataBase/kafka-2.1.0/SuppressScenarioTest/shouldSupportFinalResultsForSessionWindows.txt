@Test public void shouldSupportFinalResultsForSessionWindows(){
  final StreamsBuilder builder=new StreamsBuilder();
  final KTable<Windowed<String>,Long> valueCounts=builder.stream("input",Consumed.with(STRING_SERDE,STRING_SERDE)).groupBy((  String k,  String v) -> k,Grouped.with(STRING_SERDE,STRING_SERDE)).windowedBy(SessionWindows.with(5L).grace(ofMillis(5L))).count(Materialized.<String,Long,SessionStore<Bytes,byte[]>>as("counts").withCachingDisabled());
  valueCounts.suppress(untilWindowCloses(unbounded())).toStream().map((  final Windowed<String> k,  final Long v) -> new KeyValue<>(k.toString(),v)).to("output-suppressed",Produced.with(STRING_SERDE,Serdes.Long()));
  valueCounts.toStream().map((  final Windowed<String> k,  final Long v) -> new KeyValue<>(k.toString(),v)).to("output-raw",Produced.with(STRING_SERDE,Serdes.Long()));
  final Topology topology=builder.build();
  System.out.println(topology.describe());
  final Properties config=Utils.mkProperties(Utils.mkMap(Utils.mkEntry(StreamsConfig.APPLICATION_ID_CONFIG,getClass().getSimpleName().toLowerCase(Locale.getDefault())),Utils.mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"bogus")));
  final ConsumerRecordFactory<String,String> recordFactory=new ConsumerRecordFactory<>(STRING_SERIALIZER,STRING_SERIALIZER);
  try (final TopologyTestDriver driver=new TopologyTestDriver(topology,config)){
    driver.pipeInput(recordFactory.create("input","k1","v1",0L));
    driver.pipeInput(recordFactory.create("input","k1","v1",1L));
    driver.pipeInput(recordFactory.create("input","k1","v1",7L));
    driver.pipeInput(recordFactory.create("input","k1","v1",1L));
    driver.pipeInput(recordFactory.create("input","k1","v1",30L));
    verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("[k1@0/0]",1L,0L),new KeyValueTimestamp<>("[k1@0/0]",null,1L),new KeyValueTimestamp<>("[k1@0/1]",2L,1L),new KeyValueTimestamp<>("[k1@7/7]",1L,7L),new KeyValueTimestamp<>("[k1@30/30]",1L,30L)));
    verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("[k1@0/1]",2L,1L),new KeyValueTimestamp<>("[k1@7/7]",1L,7L)));
  }
 }
