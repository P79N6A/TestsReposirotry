@Test public void shouldSuppressIntermediateEventsWithRecordLimit(){
  final StreamsBuilder builder=new StreamsBuilder();
  final KTable<String,Long> valueCounts=builder.table("input",Consumed.with(STRING_SERDE,STRING_SERDE),Materialized.<String,String,KeyValueStore<Bytes,byte[]>>with(STRING_SERDE,STRING_SERDE).withCachingDisabled().withLoggingDisabled()).groupBy((k,v) -> new KeyValue<>(v,k),Grouped.with(STRING_SERDE,STRING_SERDE)).count(Materialized.with(STRING_SERDE,Serdes.Long()));
  valueCounts.suppress(untilTimeLimit(ofMillis(Long.MAX_VALUE),maxRecords(1L).emitEarlyWhenFull())).toStream().to("output-suppressed",Produced.with(STRING_SERDE,Serdes.Long()));
  valueCounts.toStream().to("output-raw",Produced.with(STRING_SERDE,Serdes.Long()));
  final Topology topology=builder.build();
  System.out.println(topology.describe());
  final Properties config=Utils.mkProperties(Utils.mkMap(Utils.mkEntry(StreamsConfig.APPLICATION_ID_CONFIG,getClass().getSimpleName().toLowerCase(Locale.getDefault())),Utils.mkEntry(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"bogus")));
  final ConsumerRecordFactory<String,String> recordFactory=new ConsumerRecordFactory<>(STRING_SERIALIZER,STRING_SERIALIZER);
  try (final TopologyTestDriver driver=new TopologyTestDriver(topology,config)){
    driver.pipeInput(recordFactory.create("input","k1","v1",0L));
    driver.pipeInput(recordFactory.create("input","k1","v2",1L));
    driver.pipeInput(recordFactory.create("input","k2","v1",2L));
    verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("v1",1L,0L),new KeyValueTimestamp<>("v1",0L,1L),new KeyValueTimestamp<>("v2",1L,1L),new KeyValueTimestamp<>("v1",1L,2L)));
    verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),asList(new KeyValueTimestamp<>("v1",0L,1L),new KeyValueTimestamp<>("v2",1L,1L)));
    driver.pipeInput(recordFactory.create("input","x","x",3L));
    verify(drainProducerRecords(driver,"output-raw",STRING_DESERIALIZER,LONG_DESERIALIZER),singletonList(new KeyValueTimestamp<>("x",1L,3L)));
    verify(drainProducerRecords(driver,"output-suppressed",STRING_DESERIALIZER,LONG_DESERIALIZER),singletonList(new KeyValueTimestamp<>("v1",1L,2L)));
  }
 }
