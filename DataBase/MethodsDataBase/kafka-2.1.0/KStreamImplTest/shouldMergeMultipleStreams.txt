@Test public void shouldMergeMultipleStreams(){
  final String topic1="topic-1";
  final String topic2="topic-2";
  final String topic3="topic-3";
  final String topic4="topic-4";
  final KStream<String,String> source1=builder.stream(topic1);
  final KStream<String,String> source2=builder.stream(topic2);
  final KStream<String,String> source3=builder.stream(topic3);
  final KStream<String,String> source4=builder.stream(topic4);
  final KStream<String,String> merged=source1.merge(source2).merge(source3).merge(source4);
  merged.process(processorSupplier);
  try (final TopologyTestDriver driver=new TopologyTestDriver(builder.build(),props)){
    driver.pipeInput(recordFactory.create(topic1,"A","aa"));
    driver.pipeInput(recordFactory.create(topic2,"B","bb"));
    driver.pipeInput(recordFactory.create(topic3,"C","cc"));
    driver.pipeInput(recordFactory.create(topic4,"D","dd"));
    driver.pipeInput(recordFactory.create(topic4,"E","ee"));
    driver.pipeInput(recordFactory.create(topic3,"F","ff"));
    driver.pipeInput(recordFactory.create(topic2,"G","gg"));
    driver.pipeInput(recordFactory.create(topic1,"H","hh"));
  }
   assertEquals(Utils.mkList("A:aa","B:bb","C:cc","D:dd","E:ee","F:ff","G:gg","H:hh"),processorSupplier.theCapturedProcessor().processed);
}
