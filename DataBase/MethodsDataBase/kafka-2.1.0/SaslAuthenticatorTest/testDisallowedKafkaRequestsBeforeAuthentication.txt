/** 
 * Tests that Kafka requests that are forbidden until successful authentication result in authentication failure and do not cause any failures in the server.
 */
@Test public void testDisallowedKafkaRequestsBeforeAuthentication() throws Exception {
  SecurityProtocol securityProtocol=SecurityProtocol.SASL_PLAINTEXT;
  configureMechanisms("PLAIN",Arrays.asList("PLAIN"));
  server=createEchoServer(securityProtocol);
  String node1="invalid1";
  createClientConnection(SecurityProtocol.PLAINTEXT,node1);
  MetadataRequest metadataRequest1=new MetadataRequest.Builder(Collections.singletonList("sometopic"),true).build();
  RequestHeader metadataRequestHeader1=new RequestHeader(ApiKeys.METADATA,metadataRequest1.version(),"someclient",1);
  selector.send(metadataRequest1.toSend(node1,metadataRequestHeader1));
  NetworkTestUtils.waitForChannelClose(selector,node1,ChannelState.READY.state());
  selector.close();
  createAndCheckClientConnection(securityProtocol,"good1");
  String node2="invalid2";
  createClientConnection(SecurityProtocol.PLAINTEXT,node2);
  sendHandshakeRequestReceiveResponse(node2,(short)1);
  MetadataRequest metadataRequest2=new MetadataRequest.Builder(Collections.singletonList("sometopic"),true).build();
  RequestHeader metadataRequestHeader2=new RequestHeader(ApiKeys.METADATA,metadataRequest2.version(),"someclient",2);
  selector.send(metadataRequest2.toSend(node2,metadataRequestHeader2));
  NetworkTestUtils.waitForChannelClose(selector,node2,ChannelState.READY.state());
  selector.close();
  createAndCheckClientConnection(securityProtocol,"good2");
}
