/** 
 * Tests SASL server login callback class override.
 */
@Test public void testServerLoginCallbackOverride() throws Exception {
  SecurityProtocol securityProtocol=SecurityProtocol.SASL_PLAINTEXT;
  TestJaasConfig jaasConfig=configureMechanisms("PLAIN",Collections.singletonList("PLAIN"));
  jaasConfig.createOrUpdateEntry(TestJaasConfig.LOGIN_CONTEXT_SERVER,TestPlainLoginModule.class.getName(),Collections.emptyMap());
  jaasConfig.setClientOptions("PLAIN",TestServerCallbackHandler.USERNAME,TestServerCallbackHandler.PASSWORD);
  ListenerName listenerName=ListenerName.forSecurityProtocol(securityProtocol);
  String prefix=listenerName.saslMechanismConfigPrefix("PLAIN");
  saslServerConfigs.put(prefix + BrokerSecurityConfigs.SASL_SERVER_CALLBACK_HANDLER_CLASS,TestServerCallbackHandler.class);
  Class<?> loginCallback=TestLoginCallbackHandler.class;
  try {
    createEchoServer(securityProtocol);
    fail("Should have failed to create server with default login handler");
  }
 catch (  KafkaException e) {
  }
  try {
    saslServerConfigs.put(SaslConfigs.SASL_LOGIN_CALLBACK_HANDLER_CLASS,loginCallback);
    createEchoServer(securityProtocol);
    fail("Should have failed to create server with login handler config without listener+mechanism prefix");
  }
 catch (  KafkaException e) {
    saslServerConfigs.remove(SaslConfigs.SASL_LOGIN_CALLBACK_HANDLER_CLASS);
  }
  try {
    saslServerConfigs.put("plain." + SaslConfigs.SASL_LOGIN_CALLBACK_HANDLER_CLASS,loginCallback);
    createEchoServer(securityProtocol);
    fail("Should have failed to create server with login handler config without listener prefix");
  }
 catch (  KafkaException e) {
    saslServerConfigs.remove("plain." + SaslConfigs.SASL_LOGIN_CALLBACK_HANDLER_CLASS);
  }
  try {
    saslServerConfigs.put(listenerName.configPrefix() + SaslConfigs.SASL_LOGIN_CALLBACK_HANDLER_CLASS,loginCallback);
    createEchoServer(securityProtocol);
    fail("Should have failed to create server with login handler config without mechanism prefix");
  }
 catch (  KafkaException e) {
    saslServerConfigs.remove("plain." + SaslConfigs.SASL_LOGIN_CALLBACK_HANDLER_CLASS);
  }
  saslServerConfigs.put(prefix + SaslConfigs.SASL_LOGIN_CALLBACK_HANDLER_CLASS,loginCallback);
  server=createEchoServer(securityProtocol);
  createAndCheckClientConnection(securityProtocol,"1");
}
