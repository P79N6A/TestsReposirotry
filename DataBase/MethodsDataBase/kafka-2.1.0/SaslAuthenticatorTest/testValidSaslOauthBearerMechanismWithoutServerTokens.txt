/** 
 * Tests OAUTHBEARER client channels without tokens for the server.
 */
@Test public void testValidSaslOauthBearerMechanismWithoutServerTokens() throws Exception {
  String node="0";
  SecurityProtocol securityProtocol=SecurityProtocol.SASL_SSL;
  saslClientConfigs.put(SaslConfigs.SASL_MECHANISM,"OAUTHBEARER");
  saslServerConfigs.put(BrokerSecurityConfigs.SASL_ENABLED_MECHANISMS_CONFIG,Arrays.asList("OAUTHBEARER"));
  saslClientConfigs.put(SaslConfigs.SASL_JAAS_CONFIG,TestJaasConfig.jaasConfigProperty("OAUTHBEARER",Collections.singletonMap("unsecuredLoginStringClaim_sub",TestJaasConfig.USERNAME)));
  saslServerConfigs.put("listener.name.sasl_ssl.oauthbearer." + SaslConfigs.SASL_JAAS_CONFIG,TestJaasConfig.jaasConfigProperty("OAUTHBEARER",Collections.emptyMap()));
  server=createEchoServer(securityProtocol);
  createAndCheckClientConnection(securityProtocol,node);
  saslClientConfigs.put(SaslConfigs.SASL_JAAS_CONFIG,TestJaasConfig.jaasConfigProperty("OAUTHBEARER",Collections.emptyMap()));
  createAndCheckClientConnectionFailure(securityProtocol,node);
  saslServerConfigs.put("listener.name.sasl_ssl.oauthbearer." + SaslConfigs.SASL_JAAS_CONFIG,TestJaasConfig.jaasConfigProperty("OAUTHBEARER",Collections.singletonMap("unsecuredLoginExtension_test","something")));
  try {
    createEchoServer(securityProtocol);
    fail("Server created with invalid login config containing extensions without a token");
  }
 catch (  Throwable e) {
    assertTrue("Unexpected exception " + Utils.stackTrace(e),e.getCause() instanceof LoginException);
  }
}
