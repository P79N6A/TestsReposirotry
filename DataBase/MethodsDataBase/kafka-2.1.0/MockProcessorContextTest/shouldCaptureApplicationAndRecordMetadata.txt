@Test public void shouldCaptureApplicationAndRecordMetadata(){
  final Properties config=new Properties();
  config.put(StreamsConfig.APPLICATION_ID_CONFIG,"testMetadata");
  config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"");
  final AbstractProcessor<String,Object> processor=new AbstractProcessor<String,Object>(){
    @Override public void process(    final String key,    final Object value){
      context().forward("appId",context().applicationId());
      context().forward("taskId",context().taskId());
      context().forward("topic",context().topic());
      context().forward("partition",context().partition());
      context().forward("offset",context().offset());
      context().forward("timestamp",context().timestamp());
      context().forward("key",key);
      context().forward("value",value);
    }
  }
;
  final MockProcessorContext context=new MockProcessorContext(config);
  processor.init(context);
  try {
    processor.process("foo",5L);
    fail("Should have thrown an exception.");
  }
 catch (  final IllegalStateException expected) {
  }
  context.resetForwards();
  context.setRecordMetadata("t1",0,0L,null,0L);
{
    processor.process("foo",5L);
    final Iterator<CapturedForward> forwarded=context.forwarded().iterator();
    assertEquals(new KeyValue<>("appId","testMetadata"),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("taskId",new TaskId(0,0)),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("topic","t1"),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("partition",0),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("offset",0L),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("timestamp",0L),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("key","foo"),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("value",5L),forwarded.next().keyValue());
  }
  context.resetForwards();
  context.setOffset(1L);
  context.setTimestamp(10L);
{
    processor.process("bar",50L);
    final Iterator<CapturedForward> forwarded=context.forwarded().iterator();
    assertEquals(new KeyValue<>("appId","testMetadata"),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("taskId",new TaskId(0,0)),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("topic","t1"),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("partition",0),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("offset",1L),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("timestamp",10L),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("key","bar"),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("value",50L),forwarded.next().keyValue());
  }
  context.resetForwards();
  context.setTopic("t2");
  context.setPartition(30);
{
    processor.process("baz",500L);
    final Iterator<CapturedForward> forwarded=context.forwarded().iterator();
    assertEquals(new KeyValue<>("appId","testMetadata"),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("taskId",new TaskId(0,0)),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("topic","t2"),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("partition",30),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("offset",1L),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("timestamp",10L),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("key","baz"),forwarded.next().keyValue());
    assertEquals(new KeyValue<>("value",500L),forwarded.next().keyValue());
  }
}
