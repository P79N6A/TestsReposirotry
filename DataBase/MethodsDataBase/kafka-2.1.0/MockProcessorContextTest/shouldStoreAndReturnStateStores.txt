@Test public void shouldStoreAndReturnStateStores(){
  final AbstractProcessor<String,Long> processor=new AbstractProcessor<String,Long>(){
    @Override public void process(    final String key,    final Long value){
      final KeyValueStore<String,Long> stateStore=(KeyValueStore<String,Long>)context().getStateStore("my-state");
      stateStore.put(key,(stateStore.get(key) == null ? 0 : stateStore.get(key)) + value);
      stateStore.put("all",(stateStore.get("all") == null ? 0 : stateStore.get("all")) + value);
    }
  }
;
  final MockProcessorContext context=new MockProcessorContext();
  final KeyValueStore<String,Long> store=new InMemoryKeyValueStore<>("my-state",Serdes.String(),Serdes.Long());
  context.register(store,null);
  store.init(context,store);
  processor.init(context);
  processor.process("foo",5L);
  processor.process("bar",50L);
  assertEquals(5L,(long)store.get("foo"));
  assertEquals(50L,(long)store.get("bar"));
  assertEquals(55L,(long)store.get("all"));
}
