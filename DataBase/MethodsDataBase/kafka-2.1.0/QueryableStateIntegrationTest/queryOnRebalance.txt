@Test public void queryOnRebalance() throws InterruptedException {
  final int numThreads=STREAM_TWO_PARTITIONS;
  final StreamRunnable[] streamRunnables=new StreamRunnable[numThreads];
  final Thread[] streamThreads=new Thread[numThreads];
  final ProducerRunnable producerRunnable=new ProducerRunnable(streamThree,inputValues,1);
  producerRunnable.run();
  final String storeName="word-count-store";
  final String windowStoreName="windowed-word-count-store";
  for (int i=0; i < numThreads; i++) {
    streamRunnables[i]=new StreamRunnable(streamThree,outputTopicThree,outputTopicConcurrentWindowed,storeName,windowStoreName,i);
    streamThreads[i]=new Thread(streamRunnables[i]);
    streamThreads[i].start();
  }
  try {
    waitUntilAtLeastNumRecordProcessed(outputTopicThree,1);
    for (int i=0; i < numThreads; i++) {
      verifyAllKVKeys(streamRunnables,streamRunnables[i].getStream(),streamRunnables[i].getStateListener(),inputValuesKeys,storeName + "-" + streamThree);
      verifyAllWindowedKeys(streamRunnables,streamRunnables[i].getStream(),streamRunnables[i].getStateListener(),inputValuesKeys,windowStoreName + "-" + streamThree,0L,WINDOW_SIZE);
      assertEquals(KafkaStreams.State.RUNNING,streamRunnables[i].getStream().state());
    }
    for (int i=1; i < numThreads; i++) {
      streamRunnables[i].close();
      streamThreads[i].interrupt();
      streamThreads[i].join();
    }
    verifyAllKVKeys(streamRunnables,streamRunnables[0].getStream(),streamRunnables[0].getStateListener(),inputValuesKeys,storeName + "-" + streamThree);
    verifyAllWindowedKeys(streamRunnables,streamRunnables[0].getStream(),streamRunnables[0].getStateListener(),inputValuesKeys,windowStoreName + "-" + streamThree,0L,WINDOW_SIZE);
    assertEquals(KafkaStreams.State.RUNNING,streamRunnables[0].getStream().state());
  }
  finally {
    for (int i=0; i < numThreads; i++) {
      if (!streamRunnables[i].isClosed()) {
        streamRunnables[i].close();
        streamThreads[i].interrupt();
        streamThreads[i].join();
      }
    }
  }
}
