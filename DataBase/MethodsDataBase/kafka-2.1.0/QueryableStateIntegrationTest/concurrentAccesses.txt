@Test public void concurrentAccesses() throws InterruptedException {
  final int numIterations=500000;
  final String storeName="word-count-store";
  final String windowStoreName="windowed-word-count-store";
  final ProducerRunnable producerRunnable=new ProducerRunnable(streamConcurrent,inputValues,numIterations);
  final Thread producerThread=new Thread(producerRunnable);
  kafkaStreams=createCountStream(streamConcurrent,outputTopicConcurrent,outputTopicConcurrentWindowed,storeName,windowStoreName,streamsConfiguration);
  kafkaStreams.start();
  producerThread.start();
  try {
    waitUntilAtLeastNumRecordProcessed(outputTopicConcurrent,numberOfWordsPerIteration);
    waitUntilAtLeastNumRecordProcessed(outputTopicConcurrentWindowed,numberOfWordsPerIteration);
    final ReadOnlyKeyValueStore<String,Long> keyValueStore=kafkaStreams.store(storeName + "-" + streamConcurrent,QueryableStoreTypes.<String,Long>keyValueStore());
    final ReadOnlyWindowStore<String,Long> windowStore=kafkaStreams.store(windowStoreName + "-" + streamConcurrent,QueryableStoreTypes.<String,Long>windowStore());
    final Map<String,Long> expectedWindowState=new HashMap<>();
    final Map<String,Long> expectedCount=new HashMap<>();
    while (producerRunnable.getCurrIteration() < numIterations) {
      verifyGreaterOrEqual(inputValuesKeys.toArray(new String[inputValuesKeys.size()]),expectedWindowState,expectedCount,windowStore,keyValueStore,true);
    }
  }
  finally {
    producerRunnable.shutdown();
    producerThread.interrupt();
    producerThread.join();
  }
}
