@Test public void shouldNotUnLockStateDirLockedByAnotherThread() throws IOException, InterruptedException {
  final TaskId taskId=new TaskId(0,0);
  final CountDownLatch lockLatch=new CountDownLatch(1);
  final CountDownLatch unlockLatch=new CountDownLatch(1);
  final AtomicReference<Exception> exceptionOnThread=new AtomicReference<>();
  final Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      try {
        directory.lock(taskId);
        lockLatch.countDown();
        unlockLatch.await();
        directory.unlock(taskId);
      }
 catch (      final Exception e) {
        exceptionOnThread.set(e);
      }
    }
  }
);
  thread.start();
  lockLatch.await(5,TimeUnit.SECONDS);
  assertNull("should not have had an exception on other thread",exceptionOnThread.get());
  directory.unlock(taskId);
  assertFalse(directory.lock(taskId));
  unlockLatch.countDown();
  thread.join(30000);
  assertNull("should not have had an exception on other thread",exceptionOnThread.get());
  assertTrue(directory.lock(taskId));
}
