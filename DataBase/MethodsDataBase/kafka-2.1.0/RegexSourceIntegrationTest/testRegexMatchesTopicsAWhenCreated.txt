@Test public void testRegexMatchesTopicsAWhenCreated() throws Exception {
  final Serde<String> stringSerde=Serdes.String();
  final List<String> expectedFirstAssignment=Arrays.asList("TEST-TOPIC-1");
  final List<String> expectedSecondAssignment=Arrays.asList("TEST-TOPIC-1","TEST-TOPIC-2");
  CLUSTER.createTopic("TEST-TOPIC-1");
  final StreamsBuilder builder=new StreamsBuilder();
  final KStream<String,String> pattern1Stream=builder.stream(Pattern.compile("TEST-TOPIC-\\d"));
  pattern1Stream.to(DEFAULT_OUTPUT_TOPIC,Produced.with(stringSerde,stringSerde));
  final List<String> assignedTopics=new ArrayList<>();
  streams=new KafkaStreams(builder.build(),streamsConfiguration,new DefaultKafkaClientSupplier(){
    @Override public Consumer<byte[],byte[]> getConsumer(    final Map<String,Object> config){
      return new KafkaConsumer<byte[],byte[]>(config,new ByteArrayDeserializer(),new ByteArrayDeserializer()){
        @Override public void subscribe(        final Pattern topics,        final ConsumerRebalanceListener listener){
          super.subscribe(topics,new TheConsumerRebalanceListener(assignedTopics,listener));
        }
      }
;
    }
  }
);
  streams.start();
  TestUtils.waitForCondition(new TestCondition(){
    @Override public boolean conditionMet(){
      return assignedTopics.equals(expectedFirstAssignment);
    }
  }
,STREAM_TASKS_NOT_UPDATED);
  CLUSTER.createTopic("TEST-TOPIC-2");
  TestUtils.waitForCondition(new TestCondition(){
    @Override public boolean conditionMet(){
      return assignedTopics.equals(expectedSecondAssignment);
    }
  }
,STREAM_TASKS_NOT_UPDATED);
}
