@Test public void testShouldReadFromRegexAndNamedTopics() throws Exception {
  final String topic1TestMessage="topic-1 test";
  final String topic2TestMessage="topic-2 test";
  final String topicATestMessage="topic-A test";
  final String topicCTestMessage="topic-C test";
  final String topicYTestMessage="topic-Y test";
  final String topicZTestMessage="topic-Z test";
  final Serde<String> stringSerde=Serdes.String();
  final StreamsBuilder builder=new StreamsBuilder();
  final KStream<String,String> pattern1Stream=builder.stream(Pattern.compile("topic-\\d"));
  final KStream<String,String> pattern2Stream=builder.stream(Pattern.compile("topic-[A-D]"));
  final KStream<String,String> namedTopicsStream=builder.stream(Arrays.asList(TOPIC_Y,TOPIC_Z));
  pattern1Stream.to(DEFAULT_OUTPUT_TOPIC,Produced.with(stringSerde,stringSerde));
  pattern2Stream.to(DEFAULT_OUTPUT_TOPIC,Produced.with(stringSerde,stringSerde));
  namedTopicsStream.to(DEFAULT_OUTPUT_TOPIC,Produced.with(stringSerde,stringSerde));
  streams=new KafkaStreams(builder.build(),streamsConfiguration);
  streams.start();
  final Properties producerConfig=TestUtils.producerConfig(CLUSTER.bootstrapServers(),StringSerializer.class,StringSerializer.class);
  IntegrationTestUtils.produceValuesSynchronously(TOPIC_1,Arrays.asList(topic1TestMessage),producerConfig,mockTime);
  IntegrationTestUtils.produceValuesSynchronously(TOPIC_2,Arrays.asList(topic2TestMessage),producerConfig,mockTime);
  IntegrationTestUtils.produceValuesSynchronously(TOPIC_A,Arrays.asList(topicATestMessage),producerConfig,mockTime);
  IntegrationTestUtils.produceValuesSynchronously(TOPIC_C,Arrays.asList(topicCTestMessage),producerConfig,mockTime);
  IntegrationTestUtils.produceValuesSynchronously(TOPIC_Y,Arrays.asList(topicYTestMessage),producerConfig,mockTime);
  IntegrationTestUtils.produceValuesSynchronously(TOPIC_Z,Arrays.asList(topicZTestMessage),producerConfig,mockTime);
  final Properties consumerConfig=TestUtils.consumerConfig(CLUSTER.bootstrapServers(),StringDeserializer.class,StringDeserializer.class);
  final List<String> expectedReceivedValues=Arrays.asList(topicATestMessage,topic1TestMessage,topic2TestMessage,topicCTestMessage,topicYTestMessage,topicZTestMessage);
  final List<KeyValue<String,String>> receivedKeyValues=IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(consumerConfig,DEFAULT_OUTPUT_TOPIC,6);
  final List<String> actualValues=new ArrayList<>(6);
  for (  final KeyValue<String,String> receivedKeyValue : receivedKeyValues) {
    actualValues.add(receivedKeyValue.value);
  }
  Collections.sort(actualValues);
  Collections.sort(expectedReceivedValues);
  assertThat(actualValues,equalTo(expectedReceivedValues));
}
