@Test public void testAddRemoveTask() throws Exception {
  expectConverters();
  expectStartStorage();
  EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);
  EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);
  PowerMock.expectNew(WorkerSourceTask.class,EasyMock.eq(TASK_ID),EasyMock.eq(task),anyObject(TaskStatus.Listener.class),EasyMock.eq(TargetState.STARTED),anyObject(JsonConverter.class),anyObject(JsonConverter.class),anyObject(JsonConverter.class),EasyMock.eq(new TransformationChain(Collections.emptyList(),NOOP_OPERATOR)),anyObject(KafkaProducer.class),anyObject(OffsetStorageReader.class),anyObject(OffsetStorageWriter.class),EasyMock.eq(config),anyObject(ClusterConfigState.class),anyObject(ConnectMetrics.class),anyObject(ClassLoader.class),anyObject(Time.class),anyObject(RetryWithToleranceOperator.class)).andReturn(workerTask);
  Map<String,String> origProps=new HashMap<>();
  origProps.put(TaskConfig.TASK_CLASS_CONFIG,TestSourceTask.class.getName());
  TaskConfig taskConfig=new TaskConfig(origProps);
  EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);
  EasyMock.expect(task.version()).andReturn("1.0");
  workerTask.initialize(taskConfig);
  EasyMock.expectLastCall();
  assertNotNull(taskKeyConverter);
  assertNotNull(taskValueConverter);
  assertNotNull(taskHeaderConverter);
  expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskKeyConverter);
  expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,taskValueConverter);
  expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,taskHeaderConverter);
  workerTask.run();
  EasyMock.expectLastCall();
  EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);
  EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName())).andReturn(pluginLoader);
  EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2);
  EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);
  EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);
  workerTask.stop();
  EasyMock.expectLastCall();
  EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);
  EasyMock.expectLastCall();
  expectStopStorage();
  PowerMock.replayAll();
  worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore);
  worker.start();
  assertStatistics(worker,0,0);
  assertStartupStatistics(worker,0,0,0,0);
  assertEquals(Collections.emptySet(),worker.taskIds());
  worker.startTask(TASK_ID,ClusterConfigState.EMPTY,anyConnectorConfigMap(),origProps,taskStatusListener,TargetState.STARTED);
  assertStatistics(worker,0,1);
  assertStartupStatistics(worker,0,0,1,0);
  assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds());
  worker.stopAndAwaitTask(TASK_ID);
  assertStatistics(worker,0,0);
  assertStartupStatistics(worker,0,0,1,0);
  assertEquals(Collections.emptySet(),worker.taskIds());
  worker.stop();
  assertStatistics(worker,0,0);
  assertStartupStatistics(worker,0,0,1,0);
  PowerMock.verifyAll();
}
