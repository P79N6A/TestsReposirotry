@Test public void testConverterOverrides() throws Exception {
  expectConverters();
  expectStartStorage();
  EasyMock.expect(workerTask.id()).andStubReturn(TASK_ID);
  Capture<TestConverter> keyConverter=EasyMock.newCapture();
  Capture<TestConfigurableConverter> valueConverter=EasyMock.newCapture();
  Capture<HeaderConverter> headerConverter=EasyMock.newCapture();
  EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader).times(2);
  PowerMock.expectNew(WorkerSourceTask.class,EasyMock.eq(TASK_ID),EasyMock.eq(task),anyObject(TaskStatus.Listener.class),EasyMock.eq(TargetState.STARTED),EasyMock.capture(keyConverter),EasyMock.capture(valueConverter),EasyMock.capture(headerConverter),EasyMock.eq(new TransformationChain(Collections.emptyList(),NOOP_OPERATOR)),anyObject(KafkaProducer.class),anyObject(OffsetStorageReader.class),anyObject(OffsetStorageWriter.class),anyObject(WorkerConfig.class),anyObject(ClusterConfigState.class),anyObject(ConnectMetrics.class),EasyMock.eq(pluginLoader),anyObject(Time.class),anyObject(RetryWithToleranceOperator.class)).andReturn(workerTask);
  Map<String,String> origProps=new HashMap<>();
  origProps.put(TaskConfig.TASK_CLASS_CONFIG,TestSourceTask.class.getName());
  TaskConfig taskConfig=new TaskConfig(origProps);
  EasyMock.expect(plugins.newTask(TestSourceTask.class)).andReturn(task);
  EasyMock.expect(task.version()).andReturn("1.0");
  workerTask.initialize(taskConfig);
  EasyMock.expectLastCall();
  assertNotNull(taskKeyConverter);
  assertNotNull(taskValueConverter);
  assertNotNull(taskHeaderConverter);
  expectTaskKeyConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,null);
  expectTaskKeyConverters(ClassLoaderUsage.PLUGINS,taskKeyConverter);
  expectTaskValueConverters(ClassLoaderUsage.CURRENT_CLASSLOADER,null);
  expectTaskValueConverters(ClassLoaderUsage.PLUGINS,taskValueConverter);
  expectTaskHeaderConverter(ClassLoaderUsage.CURRENT_CLASSLOADER,null);
  expectTaskHeaderConverter(ClassLoaderUsage.PLUGINS,taskHeaderConverter);
  workerTask.run();
  EasyMock.expectLastCall();
  EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);
  EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName())).andReturn(pluginLoader);
  EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader).times(2);
  EasyMock.expect(workerTask.loader()).andReturn(pluginLoader);
  EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader).times(2);
  workerTask.stop();
  EasyMock.expectLastCall();
  EasyMock.expect(workerTask.awaitStop(EasyMock.anyLong())).andStubReturn(true);
  EasyMock.expectLastCall();
  expectStopStorage();
  PowerMock.replayAll();
  worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore);
  worker.start();
  assertStatistics(worker,0,0);
  assertEquals(Collections.emptySet(),worker.taskIds());
  Map<String,String> connProps=anyConnectorConfigMap();
  connProps.put(ConnectorConfig.KEY_CONVERTER_CLASS_CONFIG,TestConverter.class.getName());
  connProps.put("key.converter.extra.config","foo");
  connProps.put(ConnectorConfig.VALUE_CONVERTER_CLASS_CONFIG,TestConfigurableConverter.class.getName());
  connProps.put("value.converter.extra.config","bar");
  worker.startTask(TASK_ID,ClusterConfigState.EMPTY,connProps,origProps,taskStatusListener,TargetState.STARTED);
  assertStatistics(worker,0,1);
  assertEquals(new HashSet<>(Arrays.asList(TASK_ID)),worker.taskIds());
  worker.stopAndAwaitTask(TASK_ID);
  assertStatistics(worker,0,0);
  assertEquals(Collections.emptySet(),worker.taskIds());
  worker.stop();
  assertStatistics(worker,0,0);
  PowerMock.verifyAll();
}
