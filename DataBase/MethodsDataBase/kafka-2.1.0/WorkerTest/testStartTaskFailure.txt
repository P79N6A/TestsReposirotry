@Test public void testStartTaskFailure() throws Exception {
  expectConverters();
  expectStartStorage();
  Map<String,String> origProps=new HashMap<>();
  origProps.put(TaskConfig.TASK_CLASS_CONFIG,"missing.From.This.Workers.Classpath");
  EasyMock.expect(plugins.currentThreadLoader()).andReturn(delegatingLoader);
  EasyMock.expect(plugins.delegatingLoader()).andReturn(delegatingLoader);
  EasyMock.expect(delegatingLoader.connectorLoader(WorkerTestConnector.class.getName())).andReturn(pluginLoader);
  EasyMock.expect(Plugins.compareAndSwapLoaders(pluginLoader)).andReturn(delegatingLoader);
  EasyMock.expect(Plugins.compareAndSwapLoaders(delegatingLoader)).andReturn(pluginLoader);
  taskStatusListener.onFailure(EasyMock.eq(TASK_ID),EasyMock.<ConfigException>anyObject());
  EasyMock.expectLastCall();
  PowerMock.replayAll();
  worker=new Worker(WORKER_ID,new MockTime(),plugins,config,offsetBackingStore);
  worker.start();
  assertStatistics(worker,0,0);
  assertStartupStatistics(worker,0,0,0,0);
  assertFalse(worker.startTask(TASK_ID,ClusterConfigState.EMPTY,anyConnectorConfigMap(),origProps,taskStatusListener,TargetState.STARTED));
  assertStartupStatistics(worker,0,0,1,1);
  assertStatistics(worker,0,0);
  assertStartupStatistics(worker,0,0,1,1);
  assertEquals(Collections.emptySet(),worker.taskIds());
  PowerMock.verifyAll();
}
