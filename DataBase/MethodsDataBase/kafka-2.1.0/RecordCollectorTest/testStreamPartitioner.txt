@Test public void testStreamPartitioner(){
  final RecordCollectorImpl collector=new RecordCollectorImpl("RecordCollectorTest-TestStreamPartitioner",new LogContext("RecordCollectorTest-TestStreamPartitioner "),new DefaultProductionExceptionHandler(),new Metrics().sensor("skipped-records"));
  collector.init(new MockProducer<>(cluster,true,new DefaultPartitioner(),byteArraySerializer,byteArraySerializer));
  final Headers headers=new RecordHeaders(new Header[]{new RecordHeader("key","value".getBytes())});
  collector.send("topic1","3","0",null,null,stringSerializer,stringSerializer,streamPartitioner);
  collector.send("topic1","9","0",null,null,stringSerializer,stringSerializer,streamPartitioner);
  collector.send("topic1","27","0",null,null,stringSerializer,stringSerializer,streamPartitioner);
  collector.send("topic1","81","0",null,null,stringSerializer,stringSerializer,streamPartitioner);
  collector.send("topic1","243","0",null,null,stringSerializer,stringSerializer,streamPartitioner);
  collector.send("topic1","28","0",headers,null,stringSerializer,stringSerializer,streamPartitioner);
  collector.send("topic1","82","0",headers,null,stringSerializer,stringSerializer,streamPartitioner);
  collector.send("topic1","244","0",headers,null,stringSerializer,stringSerializer,streamPartitioner);
  collector.send("topic1","245","0",null,null,stringSerializer,stringSerializer,streamPartitioner);
  final Map<TopicPartition,Long> offsets=collector.offsets();
  assertEquals((Long)4L,offsets.get(new TopicPartition("topic1",0)));
  assertEquals((Long)2L,offsets.get(new TopicPartition("topic1",1)));
  assertEquals((Long)0L,offsets.get(new TopicPartition("topic1",2)));
}
