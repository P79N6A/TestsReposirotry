@SuppressWarnings("unchecked") @Test public void shouldRecordSkippedMetricAndLogWarningIfSendFailsWithContinueExceptionHandler(){
  final Metrics metrics=new Metrics();
  final Sensor sensor=metrics.sensor("skipped-records");
  final LogCaptureAppender logCaptureAppender=LogCaptureAppender.createAndRegister();
  final MetricName metricName=new MetricName("name","group","description",Collections.EMPTY_MAP);
  sensor.add(metricName,new Sum());
  final RecordCollector collector=new RecordCollectorImpl("test",logContext,new AlwaysContinueProductionExceptionHandler(),sensor);
  collector.init(new MockProducer(cluster,true,new DefaultPartitioner(),byteArraySerializer,byteArraySerializer){
    @Override public synchronized Future<RecordMetadata> send(    final ProducerRecord record,    final Callback callback){
      callback.onCompletion(null,new Exception());
      return null;
    }
  }
);
  collector.send("topic1","3","0",null,null,stringSerializer,stringSerializer,streamPartitioner);
  assertEquals(1.0,metrics.metrics().get(metricName).metricValue());
  assertTrue(logCaptureAppender.getMessages().contains("test Error sending records (key=[3] value=[0] timestamp=[null]) to topic=[topic1] and partition=[0]; The exception handler chose to CONTINUE processing in spite of this error."));
  LogCaptureAppender.unregister(logCaptureAppender);
}
