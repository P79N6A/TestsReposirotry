@Test public void shouldReturnOffsetsForRepartitionTopicsForPurging(){
  final TopicPartition repartition=new TopicPartition("repartition",1);
  final ProcessorTopology topology=ProcessorTopology.withRepartitionTopics(Utils.mkList(source1,source2),mkMap(mkEntry(topic1,source1),mkEntry(repartition.topic(),source2)),Collections.singleton(repartition.topic()));
  consumer.assign(Arrays.asList(partition1,repartition));
  task=new StreamTask(taskId00,Utils.mkSet(partition1,repartition),topology,consumer,changelogReader,createConfig(false),streamsMetrics,stateDirectory,null,time,() -> producer=new MockProducer<>(false,bytesSerializer,bytesSerializer),metrics.sensor("dummy"));
  task.initializeStateStores();
  task.initializeTopology();
  task.addRecords(partition1,singletonList(getConsumerRecord(partition1,5L)));
  task.addRecords(repartition,singletonList(getConsumerRecord(repartition,10L)));
  assertTrue(task.process());
  assertTrue(task.process());
  task.commit();
  final Map<TopicPartition,Long> map=task.purgableOffsets();
  assertThat(map,equalTo(Collections.singletonMap(repartition,11L)));
}
