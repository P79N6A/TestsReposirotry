@Test public void shouldBeProcessableIfWaitedForTooLong(){
  task=createStatelessTask(createConfig(false));
  task.initializeStateStores();
  task.initializeTopology();
  final MetricName enforcedProcessMetric=metrics.metricName("enforced-processing-total","stream-task-metrics",mkMap(mkEntry("client-id","test"),mkEntry("task-id",taskId00.toString())));
  assertFalse(task.isProcessable(0L));
  assertEquals(0.0,metrics.metric(enforcedProcessMetric).metricValue());
  final byte[] bytes=ByteBuffer.allocate(4).putInt(1).array();
  task.addRecords(partition1,Collections.singleton(new ConsumerRecord<>(topic1,1,0,bytes,bytes)));
  assertFalse(task.isProcessable(time.milliseconds()));
  assertFalse(task.isProcessable(time.milliseconds() + 50L));
  assertTrue(task.isProcessable(time.milliseconds() + 100L));
  assertEquals(1.0,metrics.metric(enforcedProcessMetric).metricValue());
  assertTrue(task.isProcessable(time.milliseconds() + 101L));
  assertEquals(2.0,metrics.metric(enforcedProcessMetric).metricValue());
  task.addRecords(partition2,Collections.singleton(new ConsumerRecord<>(topic2,1,0,bytes,bytes)));
  assertTrue(task.isProcessable(time.milliseconds() + 130L));
  assertEquals(2.0,metrics.metric(enforcedProcessMetric).metricValue());
  task.process();
  assertFalse(task.isProcessable(time.milliseconds() + 150L));
  assertEquals(2.0,metrics.metric(enforcedProcessMetric).metricValue());
  assertFalse(task.isProcessable(time.milliseconds() + 249L));
  assertEquals(2.0,metrics.metric(enforcedProcessMetric).metricValue());
  assertTrue(task.isProcessable(time.milliseconds() + 250L));
  assertEquals(3.0,metrics.metric(enforcedProcessMetric).metricValue());
}
