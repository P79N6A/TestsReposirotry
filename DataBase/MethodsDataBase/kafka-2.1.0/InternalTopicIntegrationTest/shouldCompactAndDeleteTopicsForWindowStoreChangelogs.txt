@Test public void shouldCompactAndDeleteTopicsForWindowStoreChangelogs() throws Exception {
  final String appID=APP_ID + "-compact-delete";
  streamsProp.put(StreamsConfig.APPLICATION_ID_CONFIG,appID);
  final StreamsBuilder builder=new StreamsBuilder();
  final KStream<String,String> textLines=builder.stream(DEFAULT_INPUT_TOPIC);
  final int durationMs=2000;
  textLines.flatMapValues(value -> Arrays.asList(value.toLowerCase(Locale.getDefault()).split("\\W+"))).groupBy(MockMapper.selectValueMapper()).windowedBy(TimeWindows.of(ofSeconds(1L)).grace(ofMillis(0L))).count(Materialized.<String,Long,WindowStore<Bytes,byte[]>>as("CountWindows").withRetention(ofSeconds(2L)));
  final KafkaStreams streams=new KafkaStreams(builder.build(),streamsProp);
  streams.start();
  produceData(Arrays.asList("hello","world","world","hello world"));
  waitForCompletion(streams,2,30000);
  streams.close();
  final Properties properties=getTopicProperties(ProcessorStateManager.storeChangelogTopic(appID,"CountWindows"));
  final List<String> policies=Arrays.asList(properties.getProperty(LogConfig.CleanupPolicyProp()).split(","));
  assertEquals(2,policies.size());
  assertTrue(policies.contains(LogConfig.Compact()));
  assertTrue(policies.contains(LogConfig.Delete()));
  final long retention=TimeUnit.MILLISECONDS.convert(1,TimeUnit.DAYS) + durationMs;
  assertEquals(retention,Long.parseLong(properties.getProperty(LogConfig.RetentionMsProp())));
  final Properties repartitionProps=getTopicProperties(appID + "-CountWindows-repartition");
  assertEquals(LogConfig.Delete(),repartitionProps.getProperty(LogConfig.CleanupPolicyProp()));
  assertEquals(5,repartitionProps.size());
}
