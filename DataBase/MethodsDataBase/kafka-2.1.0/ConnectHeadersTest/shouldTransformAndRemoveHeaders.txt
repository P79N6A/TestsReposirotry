@Test public void shouldTransformAndRemoveHeaders(){
  populate(headers);
  iter=headers.allWithName(key);
  assertNextHeader(iter,key,Schema.BOOLEAN_SCHEMA,true);
  assertNextHeader(iter,key,Schema.INT32_SCHEMA,0);
  assertNextHeader(iter,key,Schema.OPTIONAL_STRING_SCHEMA,null);
  assertNextHeader(iter,key,Schema.STRING_SCHEMA,"third");
  assertNoNextHeader(iter);
  iter=headers.allWithName(other);
  assertOnlyNextHeader(iter,other,Schema.STRING_SCHEMA,"other value");
  assertEquals(5,headers.size());
  headers.apply(key,removeHeadersOfType(Type.STRING));
  assertEquals(3,headers.size());
  iter=headers.allWithName(key);
  assertNextHeader(iter,key,Schema.BOOLEAN_SCHEMA,true);
  assertNextHeader(iter,key,Schema.INT32_SCHEMA,0);
  assertNoNextHeader(iter);
  assertHeader(headers.lastWithName(key),key,Schema.INT32_SCHEMA,0);
  iter=headers.allWithName(other);
  assertOnlyNextHeader(iter,other,Schema.STRING_SCHEMA,"other value");
  assertEquals(3,headers.size());
  headers.apply(removeHeadersOfType(Type.STRING));
  assertEquals(2,headers.size());
  assertNoHeaderWithKey(other);
  iter=headers.allWithName(key);
  assertNextHeader(iter,key,Schema.BOOLEAN_SCHEMA,true);
  assertNextHeader(iter,key,Schema.INT32_SCHEMA,0);
  assertNoNextHeader(iter);
}
