@Test public void shouldValidateBuildInTypes(){
  assertSchemaMatches(Schema.OPTIONAL_BOOLEAN_SCHEMA,null);
  assertSchemaMatches(Schema.OPTIONAL_BYTES_SCHEMA,null);
  assertSchemaMatches(Schema.OPTIONAL_INT8_SCHEMA,null);
  assertSchemaMatches(Schema.OPTIONAL_INT16_SCHEMA,null);
  assertSchemaMatches(Schema.OPTIONAL_INT32_SCHEMA,null);
  assertSchemaMatches(Schema.OPTIONAL_INT64_SCHEMA,null);
  assertSchemaMatches(Schema.OPTIONAL_FLOAT32_SCHEMA,null);
  assertSchemaMatches(Schema.OPTIONAL_FLOAT64_SCHEMA,null);
  assertSchemaMatches(Schema.OPTIONAL_STRING_SCHEMA,null);
  assertSchemaMatches(Schema.BOOLEAN_SCHEMA,true);
  assertSchemaMatches(Schema.BYTES_SCHEMA,new byte[]{});
  assertSchemaMatches(Schema.INT8_SCHEMA,(byte)0);
  assertSchemaMatches(Schema.INT16_SCHEMA,(short)0);
  assertSchemaMatches(Schema.INT32_SCHEMA,0);
  assertSchemaMatches(Schema.INT64_SCHEMA,0L);
  assertSchemaMatches(Schema.FLOAT32_SCHEMA,1.0f);
  assertSchemaMatches(Schema.FLOAT64_SCHEMA,1.0d);
  assertSchemaMatches(Schema.STRING_SCHEMA,"value");
  assertSchemaMatches(SchemaBuilder.array(Schema.STRING_SCHEMA),new ArrayList<String>());
  assertSchemaMatches(SchemaBuilder.array(Schema.STRING_SCHEMA),Collections.singletonList("value"));
  assertSchemaMatches(SchemaBuilder.map(Schema.STRING_SCHEMA,Schema.INT32_SCHEMA),new HashMap<String,Integer>());
  assertSchemaMatches(SchemaBuilder.map(Schema.STRING_SCHEMA,Schema.INT32_SCHEMA),Collections.singletonMap("a",0));
  Schema emptyStructSchema=SchemaBuilder.struct();
  assertSchemaMatches(emptyStructSchema,new Struct(emptyStructSchema));
  Schema structSchema=SchemaBuilder.struct().field("foo",Schema.OPTIONAL_BOOLEAN_SCHEMA).field("bar",Schema.STRING_SCHEMA).schema();
  assertSchemaMatches(structSchema,new Struct(structSchema).put("foo",true).put("bar","v"));
}
