@Test public void shouldReturnActiveTaskMetadataWhileRunningState(){
  internalTopologyBuilder.addSource(null,"source",null,null,null,topic1);
  final StreamThread thread=createStreamThread(clientId,config,false);
  thread.setState(StreamThread.State.RUNNING);
  thread.rebalanceListener.onPartitionsRevoked(null);
  final Map<TaskId,Set<TopicPartition>> activeTasks=new HashMap<>();
  final List<TopicPartition> assignedPartitions=new ArrayList<>();
  assignedPartitions.add(t1p1);
  activeTasks.put(task1,Collections.singleton(t1p1));
  thread.taskManager().setAssignmentMetadata(activeTasks,Collections.<TaskId,Set<TopicPartition>>emptyMap());
  final MockConsumer<byte[],byte[]> mockConsumer=(MockConsumer<byte[],byte[]>)thread.consumer;
  mockConsumer.assign(assignedPartitions);
  mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1,0L));
  thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);
  thread.runOnce();
  final ThreadMetadata threadMetadata=thread.threadMetadata();
  assertEquals(StreamThread.State.RUNNING.name(),threadMetadata.threadState());
  assertTrue(threadMetadata.activeTasks().contains(new TaskMetadata(task1.toString(),Utils.mkSet(t1p1))));
  assertTrue(threadMetadata.standbyTasks().isEmpty());
}
