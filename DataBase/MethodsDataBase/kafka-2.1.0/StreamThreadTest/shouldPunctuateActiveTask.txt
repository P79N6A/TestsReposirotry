@Test public void shouldPunctuateActiveTask(){
  final List<Long> punctuatedStreamTime=new ArrayList<>();
  final List<Long> punctuatedWallClockTime=new ArrayList<>();
  final ProcessorSupplier<Object,Object> punctuateProcessor=new ProcessorSupplier<Object,Object>(){
    @Override public Processor<Object,Object> get(){
      return new Processor<Object,Object>(){
        @Override public void init(        final ProcessorContext context){
          context.schedule(Duration.ofMillis(100L),PunctuationType.STREAM_TIME,new Punctuator(){
            @Override public void punctuate(            final long timestamp){
              punctuatedStreamTime.add(timestamp);
            }
          }
);
          context.schedule(Duration.ofMillis(100L),PunctuationType.WALL_CLOCK_TIME,new Punctuator(){
            @Override public void punctuate(            final long timestamp){
              punctuatedWallClockTime.add(timestamp);
            }
          }
);
        }
        @Override public void process(        final Object key,        final Object value){
        }
        @Override public void close(){
        }
      }
;
    }
  }
;
  internalStreamsBuilder.stream(Collections.singleton(topic1),consumed).process(punctuateProcessor);
  internalStreamsBuilder.buildAndOptimizeTopology();
  final StreamThread thread=createStreamThread(clientId,config,false);
  thread.setState(StreamThread.State.RUNNING);
  thread.rebalanceListener.onPartitionsRevoked(null);
  final List<TopicPartition> assignedPartitions=new ArrayList<>();
  final Map<TaskId,Set<TopicPartition>> activeTasks=new HashMap<>();
  assignedPartitions.add(t1p1);
  activeTasks.put(task1,Collections.singleton(t1p1));
  thread.taskManager().setAssignmentMetadata(activeTasks,Collections.<TaskId,Set<TopicPartition>>emptyMap());
  clientSupplier.consumer.assign(assignedPartitions);
  clientSupplier.consumer.updateBeginningOffsets(Collections.singletonMap(t1p1,0L));
  thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);
  thread.runOnce();
  assertEquals(0,punctuatedStreamTime.size());
  assertEquals(0,punctuatedWallClockTime.size());
  mockTime.sleep(100L);
  for (long i=0L; i < 10L; i++) {
    clientSupplier.consumer.addRecord(new ConsumerRecord<>(topic1,1,i,i * 100L,TimestampType.CREATE_TIME,ConsumerRecord.NULL_CHECKSUM,("K" + i).getBytes().length,("V" + i).getBytes().length,("K" + i).getBytes(),("V" + i).getBytes()));
  }
  thread.runOnce();
  assertEquals(1,punctuatedStreamTime.size());
  assertEquals(1,punctuatedWallClockTime.size());
  mockTime.sleep(100L);
  thread.runOnce();
  assertEquals(1,punctuatedStreamTime.size());
  assertEquals(2,punctuatedWallClockTime.size());
}
