@Test public void shouldRespectNumIterationsInMainLoop(){
  final MockProcessor mockProcessor=new MockProcessor(PunctuationType.WALL_CLOCK_TIME,10L);
  internalTopologyBuilder.addSource(null,"source1",null,null,null,topic1);
  internalTopologyBuilder.addProcessor("processor1",() -> mockProcessor,"source1");
  internalTopologyBuilder.addProcessor("processor2",() -> new MockProcessor(PunctuationType.STREAM_TIME,10L),"source1");
  final Properties properties=new Properties();
  properties.put(StreamsConfig.COMMIT_INTERVAL_MS_CONFIG,100L);
  final StreamsConfig config=new StreamsConfig(StreamsTestUtils.getStreamsConfig(applicationId,"localhost:2171",Serdes.ByteArraySerde.class.getName(),Serdes.ByteArraySerde.class.getName(),properties));
  final StreamThread thread=createStreamThread(clientId,config,false);
  thread.setState(StreamThread.State.RUNNING);
  thread.setState(StreamThread.State.PARTITIONS_REVOKED);
  final Set<TopicPartition> assignedPartitions=Collections.singleton(t1p1);
  thread.taskManager().setAssignmentMetadata(Collections.singletonMap(new TaskId(0,t1p1.partition()),assignedPartitions),Collections.<TaskId,Set<TopicPartition>>emptyMap());
  final MockConsumer<byte[],byte[]> mockConsumer=(MockConsumer<byte[],byte[]>)thread.consumer;
  mockConsumer.assign(Collections.singleton(t1p1));
  mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1,0L));
  thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);
  thread.runOnce();
  long offset=-1;
  mockConsumer.addRecord(new ConsumerRecord<>(t1p1.topic(),t1p1.partition(),++offset,0,TimestampType.CREATE_TIME,-1,-1,-1,new byte[0],new byte[0]));
  thread.runOnce();
  assertThat(thread.currentNumIterations(),equalTo(1));
  mockConsumer.addRecord(new ConsumerRecord<>(t1p1.topic(),t1p1.partition(),++offset,1,TimestampType.CREATE_TIME,-1,-1,-1,new byte[0],new byte[0]));
  thread.runOnce();
  assertThat(thread.currentNumIterations(),equalTo(2));
  thread.runOnce();
  assertThat(thread.currentNumIterations(),equalTo(2));
  mockTime.sleep(11L);
  thread.runOnce();
  assertThat(thread.currentNumIterations(),equalTo(1));
  mockConsumer.addRecord(new ConsumerRecord<>(t1p1.topic(),t1p1.partition(),++offset,5,TimestampType.CREATE_TIME,-1,-1,-1,new byte[0],new byte[0]));
  mockConsumer.addRecord(new ConsumerRecord<>(t1p1.topic(),t1p1.partition(),++offset,6,TimestampType.CREATE_TIME,-1,-1,-1,new byte[0],new byte[0]));
  thread.runOnce();
  assertThat(thread.currentNumIterations(),equalTo(2));
  mockConsumer.addRecord(new ConsumerRecord<>(t1p1.topic(),t1p1.partition(),++offset,11,TimestampType.CREATE_TIME,-1,-1,-1,new byte[0],new byte[0]));
  thread.runOnce();
  assertThat(thread.currentNumIterations(),equalTo(1));
  mockConsumer.addRecord(new ConsumerRecord<>(t1p1.topic(),t1p1.partition(),++offset,12,TimestampType.CREATE_TIME,-1,-1,-1,new byte[0],new byte[0]));
  mockConsumer.addRecord(new ConsumerRecord<>(t1p1.topic(),t1p1.partition(),++offset,13,TimestampType.CREATE_TIME,-1,-1,-1,new byte[0],new byte[0]));
  mockConsumer.addRecord(new ConsumerRecord<>(t1p1.topic(),t1p1.partition(),++offset,14,TimestampType.CREATE_TIME,-1,-1,-1,new byte[0],new byte[0]));
  thread.runOnce();
  assertThat(thread.currentNumIterations(),equalTo(3));
  mockProcessor.requestCommit();
  mockConsumer.addRecord(new ConsumerRecord<>(t1p1.topic(),t1p1.partition(),++offset,15,TimestampType.CREATE_TIME,-1,-1,-1,new byte[0],new byte[0]));
  thread.runOnce();
  assertThat(thread.currentNumIterations(),equalTo(3));
  mockTime.sleep(90L);
  thread.runOnce();
  assertThat(thread.currentNumIterations(),equalTo(1));
}
