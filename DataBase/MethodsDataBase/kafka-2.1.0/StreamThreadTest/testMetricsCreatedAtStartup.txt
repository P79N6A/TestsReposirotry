@Test public void testMetricsCreatedAtStartup(){
  final StreamThread thread=createStreamThread(clientId,config,false);
  final String defaultGroupName="stream-metrics";
  final Map<String,String> defaultTags=Collections.singletonMap("client-id",thread.getName());
  assertNotNull(metrics.metrics().get(metrics.metricName("commit-latency-avg",defaultGroupName,"The average commit time in ms",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("commit-latency-max",defaultGroupName,"The maximum commit time in ms",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("commit-rate",defaultGroupName,"The average per-second number of commit calls",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("commit-total",defaultGroupName,"The total number of commit calls",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("poll-latency-avg",defaultGroupName,"The average poll time in ms",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("poll-latency-max",defaultGroupName,"The maximum poll time in ms",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("poll-rate",defaultGroupName,"The average per-second number of record-poll calls",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("poll-total",defaultGroupName,"The total number of record-poll calls",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("process-latency-avg",defaultGroupName,"The average process time in ms",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("process-latency-max",defaultGroupName,"The maximum process time in ms",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("process-rate",defaultGroupName,"The average per-second number of process calls",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("process-total",defaultGroupName,"The total number of process calls",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("punctuate-latency-avg",defaultGroupName,"The average punctuate time in ms",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("punctuate-latency-max",defaultGroupName,"The maximum punctuate time in ms",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("punctuate-rate",defaultGroupName,"The average per-second number of punctuate calls",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("punctuate-total",defaultGroupName,"The total number of punctuate calls",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("task-created-rate",defaultGroupName,"The average per-second number of newly created tasks",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("task-created-total",defaultGroupName,"The total number of newly created tasks",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("task-closed-rate",defaultGroupName,"The average per-second number of closed tasks",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("task-closed-total",defaultGroupName,"The total number of closed tasks",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("skipped-records-rate",defaultGroupName,"The average per-second number of skipped records.",defaultTags)));
  assertNotNull(metrics.metrics().get(metrics.metricName("skipped-records-total",defaultGroupName,"The total number of skipped records.",defaultTags)));
}
