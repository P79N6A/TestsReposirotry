@Test public void shouldCloseTaskAsZombieAndRemoveFromActiveTasksIfProducerGotFencedInCommitTransactionWhenSuspendingTaks(){
  final StreamThread thread=createStreamThread(clientId,new StreamsConfig(configProps(true)),true);
  internalTopologyBuilder.addSource(null,"name",null,null,null,topic1);
  internalTopologyBuilder.addSink("out","output",null,null,null,"name");
  thread.setState(StreamThread.State.RUNNING);
  thread.rebalanceListener.onPartitionsRevoked(null);
  final Map<TaskId,Set<TopicPartition>> activeTasks=new HashMap<>();
  final List<TopicPartition> assignedPartitions=new ArrayList<>();
  assignedPartitions.add(t1p1);
  activeTasks.put(task1,Collections.singleton(t1p1));
  thread.taskManager().setAssignmentMetadata(activeTasks,Collections.<TaskId,Set<TopicPartition>>emptyMap());
  final MockConsumer<byte[],byte[]> mockConsumer=(MockConsumer<byte[],byte[]>)thread.consumer;
  mockConsumer.assign(assignedPartitions);
  mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1,0L));
  thread.rebalanceListener.onPartitionsAssigned(assignedPartitions);
  thread.runOnce();
  assertThat(thread.tasks().size(),equalTo(1));
  clientSupplier.producers.get(0).fenceProducer();
  thread.rebalanceListener.onPartitionsRevoked(null);
  assertTrue(clientSupplier.producers.get(0).transactionInFlight());
  assertFalse(clientSupplier.producers.get(0).transactionCommitted());
  assertTrue(clientSupplier.producers.get(0).closed());
  assertTrue(thread.tasks().isEmpty());
}
