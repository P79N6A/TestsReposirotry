@Test public void adminClientMetricsVerification(){
  final Node broker1=new Node(0,"dummyHost-1",1234);
  final Node broker2=new Node(1,"dummyHost-2",1234);
  final List<Node> cluster=Arrays.asList(broker1,broker2);
  final MockAdminClient adminClient=new MockAdminClient(cluster,broker1,null);
  final MockProducer<byte[],byte[]> producer=new MockProducer<>();
  final Consumer<byte[],byte[]> consumer=EasyMock.createNiceMock(Consumer.class);
  final TaskManager taskManager=EasyMock.createNiceMock(TaskManager.class);
  final StreamThread.StreamsMetricsThreadImpl streamsMetrics=new StreamThread.StreamsMetricsThreadImpl(metrics,"");
  final StreamThread thread=new StreamThread(mockTime,config,producer,consumer,consumer,null,taskManager,streamsMetrics,internalTopologyBuilder,clientId,new LogContext(""),new AtomicInteger());
  final MetricName testMetricName=new MetricName("test_metric","","",new HashMap<String,String>());
  final Metric testMetric=new KafkaMetric(new Object(),testMetricName,new Measurable(){
    @Override public double measure(    final MetricConfig config,    final long now){
      return 0;
    }
  }
,null,new MockTime());
  EasyMock.expect(taskManager.getAdminClient()).andReturn(adminClient);
  EasyMock.expectLastCall();
  EasyMock.replay(taskManager,consumer);
  adminClient.setMockMetrics(testMetricName,testMetric);
  final Map<MetricName,Metric> adminClientMetrics=thread.adminClientMetrics();
  assertEquals(testMetricName,adminClientMetrics.get(testMetricName).metricName());
}
