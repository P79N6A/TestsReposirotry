@Test public void shouldReturnStandbyTaskMetadataWhileRunningState(){
  internalStreamsBuilder.stream(Collections.singleton(topic1),consumed).groupByKey().count(Materialized.<Object,Long,KeyValueStore<Bytes,byte[]>>as("count-one"));
  internalStreamsBuilder.buildAndOptimizeTopology();
  final StreamThread thread=createStreamThread(clientId,config,false);
  final MockConsumer<byte[],byte[]> restoreConsumer=clientSupplier.restoreConsumer;
  restoreConsumer.updatePartitions("stream-thread-test-count-one-changelog",singletonList(new PartitionInfo("stream-thread-test-count-one-changelog",0,null,new Node[0],new Node[0])));
  final HashMap<TopicPartition,Long> offsets=new HashMap<>();
  offsets.put(new TopicPartition("stream-thread-test-count-one-changelog",1),0L);
  restoreConsumer.updateEndOffsets(offsets);
  restoreConsumer.updateBeginningOffsets(offsets);
  thread.setState(StreamThread.State.RUNNING);
  thread.rebalanceListener.onPartitionsRevoked(null);
  final Map<TaskId,Set<TopicPartition>> standbyTasks=new HashMap<>();
  standbyTasks.put(task1,Collections.singleton(t1p1));
  thread.taskManager().setAssignmentMetadata(Collections.<TaskId,Set<TopicPartition>>emptyMap(),standbyTasks);
  thread.rebalanceListener.onPartitionsAssigned(Collections.<TopicPartition>emptyList());
  thread.runOnce();
  final ThreadMetadata threadMetadata=thread.threadMetadata();
  assertEquals(StreamThread.State.RUNNING.name(),threadMetadata.threadState());
  assertTrue(threadMetadata.standbyTasks().contains(new TaskMetadata(task1.toString(),Utils.mkSet(t1p1))));
  assertTrue(threadMetadata.activeTasks().isEmpty());
}
