@Test public void shouldInjectSharedProducerForAllTasksUsingClientSupplierOnCreateIfEosDisabled(){
  internalTopologyBuilder.addSource(null,"source1",null,null,null,topic1);
  internalStreamsBuilder.buildAndOptimizeTopology();
  final StreamThread thread=createStreamThread(clientId,config,false);
  thread.setState(StreamThread.State.RUNNING);
  thread.rebalanceListener.onPartitionsRevoked(Collections.<TopicPartition>emptyList());
  final Map<TaskId,Set<TopicPartition>> activeTasks=new HashMap<>();
  final List<TopicPartition> assignedPartitions=new ArrayList<>();
  assignedPartitions.add(t1p1);
  assignedPartitions.add(t1p2);
  activeTasks.put(task1,Collections.singleton(t1p1));
  activeTasks.put(task2,Collections.singleton(t1p2));
  thread.taskManager().setAssignmentMetadata(activeTasks,Collections.<TaskId,Set<TopicPartition>>emptyMap());
  final MockConsumer<byte[],byte[]> mockConsumer=(MockConsumer<byte[],byte[]>)thread.consumer;
  mockConsumer.assign(assignedPartitions);
  final Map<TopicPartition,Long> beginOffsets=new HashMap<>();
  beginOffsets.put(t1p1,0L);
  beginOffsets.put(t1p2,0L);
  mockConsumer.updateBeginningOffsets(beginOffsets);
  thread.rebalanceListener.onPartitionsAssigned(new HashSet<>(assignedPartitions));
  assertEquals(1,clientSupplier.producers.size());
  final Producer globalProducer=clientSupplier.producers.get(0);
  for (  final Task task : thread.tasks().values()) {
    assertSame(globalProducer,((RecordCollectorImpl)((StreamTask)task).recordCollector()).producer());
  }
  assertSame(clientSupplier.consumer,thread.consumer);
  assertSame(clientSupplier.restoreConsumer,thread.restoreConsumer);
}
