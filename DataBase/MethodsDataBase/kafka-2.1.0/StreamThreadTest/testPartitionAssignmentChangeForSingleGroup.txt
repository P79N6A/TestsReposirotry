@Test public void testPartitionAssignmentChangeForSingleGroup(){
  internalTopologyBuilder.addSource(null,"source1",null,null,null,topic1);
  final StreamThread thread=createStreamThread(clientId,config,false);
  final StateListenerStub stateListener=new StateListenerStub();
  thread.setStateListener(stateListener);
  assertEquals(thread.state(),StreamThread.State.CREATED);
  final ConsumerRebalanceListener rebalanceListener=thread.rebalanceListener;
  thread.setState(StreamThread.State.RUNNING);
  final List<TopicPartition> revokedPartitions;
  final List<TopicPartition> assignedPartitions;
  revokedPartitions=Collections.emptyList();
  rebalanceListener.onPartitionsRevoked(revokedPartitions);
  assertEquals(thread.state(),StreamThread.State.PARTITIONS_REVOKED);
  assignedPartitions=singletonList(t1p1);
  thread.taskManager().setAssignmentMetadata(Collections.<TaskId,Set<TopicPartition>>emptyMap(),Collections.<TaskId,Set<TopicPartition>>emptyMap());
  final MockConsumer<byte[],byte[]> mockConsumer=(MockConsumer<byte[],byte[]>)thread.consumer;
  mockConsumer.assign(assignedPartitions);
  mockConsumer.updateBeginningOffsets(Collections.singletonMap(t1p1,0L));
  rebalanceListener.onPartitionsAssigned(assignedPartitions);
  thread.runOnce();
  assertEquals(thread.state(),StreamThread.State.RUNNING);
  Assert.assertEquals(4,stateListener.numChanges);
  Assert.assertEquals(StreamThread.State.PARTITIONS_ASSIGNED,stateListener.oldState);
  thread.shutdown();
  assertSame(StreamThread.State.PENDING_SHUTDOWN,thread.state());
}
