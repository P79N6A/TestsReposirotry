@Test public void test(){
  ClassNode cls=getClassNode(TestCls.class);
  String code=cls.getCode().toString();
  FieldNode field=cls.searchFieldByName("field");
  MethodNode func=cls.searchMethodByName("func()V");
  ClassNode inner=cls.getInnerClasses().get(0);
  MethodNode innerFunc=inner.searchMethodByName("innerFunc()V");
  MethodNode innerFunc2=inner.searchMethodByName("innerFunc2()V");
  MethodNode innerFunc3=inner.searchMethodByName("innerFunc3()V");
  FieldNode innerField=inner.searchFieldByName("innerField");
  int testClassLine=18;
  assertEquals(testClassLine + 3,func.getSourceLine());
  assertEquals(testClassLine + 9,innerFunc.getSourceLine());
  assertEquals(testClassLine + 12,innerFunc2.getSourceLine());
  assertEquals(testClassLine + 20,innerFunc3.getSourceLine());
  String[] lines=code.split(CodeWriter.NL);
  checkLine(lines,field,"int field;");
  checkLine(lines,func,"public void func() {");
  checkLine(lines,inner,"public static class Inner {");
  checkLine(lines,innerField,"int innerField;");
  checkLine(lines,innerFunc,"public void innerFunc() {");
  checkLine(lines,innerFunc2,"public void innerFunc2() {");
  checkLine(lines,innerFunc3,"public void innerFunc3() {");
}
