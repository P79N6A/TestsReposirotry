@Test public void field_regular_returnType() throws Exception {
  assertReachable("field/renderable/");
  assertReachable("field/renderable/valid");
  ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(RENDERABLE_CLASS_SIGNATURE);
  assertNotReachable("field/renderable/");
  assertFieldRequestWasBlockedAndResetFlag();
  assertNotReachable("field/renderable/valid");
  assertFieldRequestWasBlockedAndResetFlag();
  ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).removeBlacklistSignature(RENDERABLE_CLASS_SIGNATURE);
  assertReachable("field/renderable/");
  assertReachable("field/renderable/valid");
  ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).add(RENDERABLE_CLASS_SIGNATURE);
  ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(FieldWithWhitelist.FIELD_SIGNATURE);
  assertNotReachable("field/renderable/");
  assertFieldRequestWasBlockedAndResetFlag();
  assertNotReachable("field/renderable/valid");
  assertFieldRequestWasBlockedAndResetFlag();
  ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).remove(RENDERABLE_CLASS_SIGNATURE);
  ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).removeBlacklistSignature(FieldWithWhitelist.FIELD_SIGNATURE);
  ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(RENDERABLE_CLASS_SIGNATURE);
  ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).add(FieldWithWhitelist.FIELD_SIGNATURE);
  assertReachable("field/renderable/");
  assertReachable("field/renderable/valid");
}
