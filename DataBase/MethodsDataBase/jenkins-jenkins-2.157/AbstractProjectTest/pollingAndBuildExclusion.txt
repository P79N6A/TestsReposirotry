/** 
 * Unless the concurrent build option is enabled, polling and build should be mutually exclusive to avoid allocating unnecessary workspaces.
 */
@Test @Issue("JENKINS-4202") public void pollingAndBuildExclusion() throws Exception {
  final OneShotEvent sync=new OneShotEvent();
  final FreeStyleProject p=j.createFreeStyleProject();
  FreeStyleBuild b1=j.buildAndAssertSuccess(p);
  p.setScm(new NullSCM(){
    @Override public boolean pollChanges(    AbstractProject project,    Launcher launcher,    FilePath workspace,    TaskListener listener){
      try {
        sync.block();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      return true;
    }
    /** 
 * Don't write 'this', so that subtypes can be implemented as anonymous class.
 */
    private Object writeReplace(){
      return new Object();
    }
    @Override public boolean requiresWorkspaceForPolling(){
      return true;
    }
    @Override public SCMDescriptor<?> getDescriptor(){
      return new SCMDescriptor<SCM>(null){
      }
;
    }
  }
);
  Thread t=new Thread(){
    @Override public void run(){
      p.pollSCMChanges(StreamTaskListener.fromStdout());
    }
  }
;
  try {
    t.start();
    Future<FreeStyleBuild> f=p.scheduleBuild2(0);
    Thread.sleep(3000);
    sync.signal();
    FreeStyleBuild b2=j.assertBuildStatusSuccess(f);
    assertEquals(b1.getWorkspace(),b2.getWorkspace());
  }
  finally {
    t.interrupt();
  }
}
