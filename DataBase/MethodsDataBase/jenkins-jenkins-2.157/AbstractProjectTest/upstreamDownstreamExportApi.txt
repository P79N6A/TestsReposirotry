@Issue("SECURITY-617") @Test public void upstreamDownstreamExportApi() throws Exception {
  FreeStyleProject us=j.createFreeStyleProject("upstream-project");
  FreeStyleProject ds=j.createFreeStyleProject("downstream-project");
  us.getPublishersList().add(new BuildTrigger(Collections.singleton(ds),Result.SUCCESS));
  j.jenkins.rebuildDependencyGraph();
  assertEquals(Collections.singletonList(ds),us.getDownstreamProjects());
  assertEquals(Collections.singletonList(us),ds.getUpstreamProjects());
  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
  j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().toEveryone().grant(Item.READ).everywhere().to("alice").grant(Item.READ).onItems(us).to("bob").grant(Item.READ).onItems(ds).to("charlie"));
  String api=j.createWebClient().withBasicCredentials("alice").goTo(us.getUrl() + "api/json?pretty",null).getWebResponse().getContentAsString();
  System.out.println(api);
  assertThat(api,containsString("downstream-project"));
  api=j.createWebClient().withBasicCredentials("alice").goTo(ds.getUrl() + "api/json?pretty",null).getWebResponse().getContentAsString();
  System.out.println(api);
  assertThat(api,containsString("upstream-project"));
  api=j.createWebClient().withBasicCredentials("bob").goTo(us.getUrl() + "api/json?pretty",null).getWebResponse().getContentAsString();
  System.out.println(api);
  assertThat(api,not(containsString("downstream-project")));
  api=j.createWebClient().withBasicCredentials("charlie").goTo(ds.getUrl() + "api/json?pretty",null).getWebResponse().getContentAsString();
  System.out.println(api);
  assertThat(api,not(containsString("upstream-project")));
}
