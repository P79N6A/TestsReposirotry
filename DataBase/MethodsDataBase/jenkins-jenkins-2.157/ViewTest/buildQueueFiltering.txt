@Test public void buildQueueFiltering() throws Exception {
  FreeStyleProject singleItemJob=Mockito.mock(FreeStyleProject.class);
  Mockito.when(singleItemJob.getOwnerTask()).thenReturn(singleItemJob);
  Queue.Item singleItemQueueItem=new MockItem(singleItemJob);
  FreeStyleProject multiItemJob=Mockito.mock(FreeStyleProject.class);
  Project multiItemSubJob=Mockito.mock(Project.class);
  Mockito.when(multiItemSubJob.getRootProject()).thenReturn(multiItemJob);
  Mockito.when(multiItemSubJob.getOwnerTask()).thenReturn(multiItemSubJob);
  Queue.Item multiItemQueueItem=new MockItem(multiItemSubJob);
  BuildableTopLevelItem multiStepJob=Mockito.mock(BuildableTopLevelItem.class);
  Mockito.when(multiStepJob.getOwnerTask()).thenReturn(multiStepJob);
  BuildableItem multiStepSubStep=Mockito.mock(BuildableItem.class);
  Mockito.when(multiStepSubStep.getOwnerTask()).thenReturn(multiStepJob);
  Queue.Item multiStepQueueItem=new MockItem(multiStepSubStep);
  View view=Mockito.mock(View.class);
  List<Queue.Item> queue=Arrays.asList(singleItemQueueItem,multiItemQueueItem,multiStepQueueItem);
  Mockito.when(view.isFilterQueue()).thenReturn(true);
  List<TopLevelItem> viewJobs=Arrays.asList(singleItemJob,multiItemJob,multiStepJob);
  Mockito.when(view.getItems()).thenReturn(viewJobs);
  assertEquals(Arrays.asList(singleItemQueueItem,multiItemQueueItem,multiStepQueueItem),Whitebox.invokeMethod(view,"filterQueue",queue));
  Mockito.when(view.getItems()).thenReturn(Collections.emptyList());
  List<Queue.Item> expected=Arrays.asList(singleItemQueueItem,multiItemQueueItem,multiStepQueueItem);
  assertEquals(Collections.emptyList(),Whitebox.<List<Queue.Item>>invokeMethod(view,"filterQueue",queue));
}
