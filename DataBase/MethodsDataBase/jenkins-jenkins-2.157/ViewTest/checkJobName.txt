@Issue("JENKINS-20509") @Test public void checkJobName() throws Exception {
  j.createFreeStyleProject("topprj");
  final MockFolder d1=j.createFolder("d1");
  d1.createProject(FreeStyleProject.class,"subprj");
  final MockFolder d2=j.createFolder("d2");
  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
  j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to("admin").grant(Jenkins.READ).everywhere().toEveryone().grant(Job.READ).everywhere().toEveryone().grant(Item.CREATE).onFolders(d1).to("dev"));
  ACL.impersonate(Jenkins.ANONYMOUS,new NotReallyRoleSensitiveCallable<Void,Exception>(){
    @Override public Void call() throws Exception {
      try {
        assertCheckJobName(j.jenkins,"whatever",FormValidation.Kind.OK);
        fail("should not have been allowed");
      }
 catch (      AccessDeniedException2 x) {
      }
      return null;
    }
  }
);
  ACL.impersonate(User.get("dev").impersonate(),new NotReallyRoleSensitiveCallable<Void,Exception>(){
    @Override public Void call() throws Exception {
      try {
        assertCheckJobName(j.jenkins,"whatever",FormValidation.Kind.OK);
        fail("should not have been allowed");
      }
 catch (      AccessDeniedException2 x) {
      }
      try {
        assertCheckJobName(d2,"whatever",FormValidation.Kind.OK);
        fail("should not have been allowed");
      }
 catch (      AccessDeniedException2 x) {
      }
      assertCheckJobName(d1,"whatever",FormValidation.Kind.OK);
      return null;
    }
  }
);
  ACL.impersonate(User.get("admin").impersonate(),new NotReallyRoleSensitiveCallable<Void,Exception>(){
    @Override public Void call() throws Exception {
      assertCheckJobName(j.jenkins,"whatever",FormValidation.Kind.OK);
      assertCheckJobName(d1,"whatever",FormValidation.Kind.OK);
      assertCheckJobName(d2,"whatever",FormValidation.Kind.OK);
      assertCheckJobName(j.jenkins,"d1",FormValidation.Kind.ERROR);
      assertCheckJobName(j.jenkins,"topprj",FormValidation.Kind.ERROR);
      assertCheckJobName(d1,"subprj",FormValidation.Kind.ERROR);
      assertCheckJobName(j.jenkins,"",FormValidation.Kind.OK);
      assertCheckJobName(j.jenkins,"foo/bie",FormValidation.Kind.ERROR);
      assertCheckJobName(d2,"New",FormValidation.Kind.OK);
      j.jenkins.setProjectNamingStrategy(new ProjectNamingStrategy.PatternProjectNamingStrategy("[a-z]+","",true));
      assertCheckJobName(d2,"New",FormValidation.Kind.ERROR);
      assertCheckJobName(d2,"new",FormValidation.Kind.OK);
      return null;
    }
  }
);
  JenkinsRule.WebClient wc=j.createWebClient().withBasicCredentials("admin");
  assertEquals("original ${rootURL}/checkJobName still supported","<div/>",wc.goTo("checkJobName?value=stuff").getWebResponse().getContentAsString());
  assertEquals("but now possible on a view in a folder","<div/>",wc.goTo("job/d1/view/All/checkJobName?value=stuff").getWebResponse().getContentAsString());
}
