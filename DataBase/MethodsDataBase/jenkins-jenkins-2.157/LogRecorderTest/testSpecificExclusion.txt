@Test public void testSpecificExclusion(){
  LogRecorder lr=new LogRecorder("foo");
  LogRecorder.Target targetLevel0=new LogRecorder.Target("",Level.FINE);
  LogRecorder.Target targetLevel1=new LogRecorder.Target("foo",Level.INFO);
  LogRecorder.Target targetLevel2=new LogRecorder.Target("foo.bar",Level.SEVERE);
  lr.targets.add(targetLevel1);
  lr.targets.add(targetLevel2);
  lr.targets.add(targetLevel0);
  assertEquals(lr.orderedTargets()[0],targetLevel2);
  assertEquals(lr.orderedTargets()[1],targetLevel1);
  assertEquals(lr.orderedTargets()[2],targetLevel0);
  LogRecord r1=createLogRecord("baz",Level.INFO,"visible");
  LogRecord r2=createLogRecord("foo",Level.FINE,"hidden");
  LogRecord r3=createLogRecord("foo.bar",Level.INFO,"hidden");
  LogRecord r4=createLogRecord("foo.bar.baz",Level.INFO,"hidden");
  LogRecord r5=createLogRecord("foo.bar.baz",Level.SEVERE,"visible");
  LogRecord r6=createLogRecord("foo",Level.INFO,"visible");
  lr.handler.publish(r1);
  lr.handler.publish(r2);
  lr.handler.publish(r3);
  lr.handler.publish(r4);
  lr.handler.publish(r5);
  lr.handler.publish(r6);
  assertTrue(lr.handler.getView().contains(r1));
  assertFalse(lr.handler.getView().contains(r2));
  assertFalse(lr.handler.getView().contains(r3));
  assertFalse(lr.handler.getView().contains(r4));
  assertTrue(lr.handler.getView().contains(r5));
  assertTrue(lr.handler.getView().contains(r6));
}
