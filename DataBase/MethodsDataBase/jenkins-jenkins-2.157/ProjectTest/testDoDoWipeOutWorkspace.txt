@Test public void testDoDoWipeOutWorkspace() throws Exception {
  FreeStyleProject project=j.createFreeStyleProject("project");
  GlobalMatrixAuthorizationStrategy auth=new GlobalMatrixAuthorizationStrategy();
  j.jenkins.setAuthorizationStrategy(auth);
  j.jenkins.setCrumbIssuer(null);
  HudsonPrivateSecurityRealm realm=new HudsonPrivateSecurityRealm(false);
  j.jenkins.setSecurityRealm(realm);
  User user=realm.createAccount("John Smith","password");
  try (ACLContext as=ACL.as(user)){
    project.doDoWipeOutWorkspace();
    fail("User should not have permission to build project");
  }
 catch (  Exception e) {
    if (!(e.getClass().isAssignableFrom(AccessDeniedException2.class))) {
      fail("AccessDeniedException should be thrown.");
    }
  }
  auth.add(Job.READ,user.getId());
  auth.add(Job.BUILD,user.getId());
  auth.add(Job.WIPEOUT,user.getId());
  auth.add(Jenkins.READ,user.getId());
  Slave slave=j.createOnlineSlave();
  project.setAssignedLabel(slave.getSelfLabel());
  String cmd="echo hello > change.log";
  project.getBuildersList().add(Functions.isWindows() ? new BatchFile(cmd) : new Shell(cmd));
  j.buildAndAssertSuccess(project);
  JenkinsRule.WebClient wc=j.createWebClient();
  wc.withBasicCredentials(user.getId(),"password");
  WebRequest request=new WebRequest(new URL(wc.getContextPath() + project.getUrl() + "doWipeOutWorkspace"),HttpMethod.POST);
  HtmlPage p=wc.getPage(request);
  assertEquals(p.getWebResponse().getStatusCode(),200);
  Thread.sleep(500);
  assertFalse("Workspace should not exist.",project.getSomeWorkspace().exists());
}
