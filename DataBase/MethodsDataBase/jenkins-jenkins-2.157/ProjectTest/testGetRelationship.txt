@Test public void testGetRelationship() throws Exception {
  final FreeStyleProject upstream=j.createFreeStyleProject("upstream");
  FreeStyleProject downstream=j.createFreeStyleProject("downstream");
  j.buildAndAssertSuccess(upstream);
  j.buildAndAssertSuccess(upstream);
  j.buildAndAssertSuccess(downstream);
  assertTrue("Project upstream should not have any relationship with downstream",upstream.getRelationship(downstream).isEmpty());
  upstream.getPublishersList().add(new Fingerprinter("change.log",true));
  upstream.getBuildersList().add(new WorkspaceWriter("change.log","hello"));
  upstream.getPublishersList().add(new ArtifactArchiver("change.log"));
  downstream.getPublishersList().add(new Fingerprinter("change.log",false));
  downstream.getBuildersList().add(new TestBuilder(){
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      for (      Run<?,?>.Artifact a : upstream.getLastBuild().getArtifacts()) {
        Util.copyFile(a.getFile(),new File(build.getWorkspace().child(a.getFileName()).getRemote()));
      }
      return true;
    }
  }
);
  j.buildAndAssertSuccess(upstream);
  j.buildAndAssertSuccess(downstream);
  j.buildAndAssertSuccess(upstream);
  j.buildAndAssertSuccess(downstream);
  upstream.getBuildersList().add(new WorkspaceWriter("change.log","helloWorld"));
  j.buildAndAssertSuccess(upstream);
  j.buildAndAssertSuccess(downstream);
  Map<Integer,Fingerprint.RangeSet> relationship=upstream.getRelationship(downstream);
  assertFalse("Project upstream should have relationship with downstream",relationship.isEmpty());
  assertTrue("Relationship should contain upstream #3",relationship.keySet().contains(3));
  assertFalse("Relationship should not contain upstream #4 because previous fingerprinted file was not changed since #3",relationship.keySet().contains(4));
  assertEquals("downstream #2 should be the first build which depends on upstream #3",2,relationship.get(3).min());
  assertEquals("downstream #3 should be the last build which depends on upstream #3",3,relationship.get(3).max() - 1);
  assertEquals("downstream #4 should depend only on upstream #5",4,relationship.get(5).min());
  assertEquals("downstream #4 should depend only on upstream #5",4,relationship.get(5).max() - 1);
}
