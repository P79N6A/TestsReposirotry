@Test public void testDoEnable() throws Exception {
  FreeStyleProject project=j.createFreeStyleProject("project");
  GlobalMatrixAuthorizationStrategy auth=new GlobalMatrixAuthorizationStrategy();
  j.jenkins.setAuthorizationStrategy(auth);
  j.jenkins.setCrumbIssuer(null);
  HudsonPrivateSecurityRealm realm=new HudsonPrivateSecurityRealm(false);
  j.jenkins.setSecurityRealm(realm);
  User user=realm.createAccount("John Smith","password");
  try (ACLContext as=ACL.as(user)){
    project.disable();
  }
   try (ACLContext as=ACL.as(user)){
    project.doEnable();
    fail("User should not have permission to build project");
  }
 catch (  Exception e) {
    if (!(e.getClass().isAssignableFrom(AccessDeniedException2.class))) {
      fail("AccessDeniedException should be thrown.");
    }
  }
  auth.add(Job.READ,user.getId());
  auth.add(Job.CONFIGURE,user.getId());
  auth.add(Jenkins.READ,user.getId());
  JenkinsRule.WebClient wc=j.createWebClient();
  wc.withBasicCredentials(user.getId(),"password");
  HtmlPage p=wc.goTo(project.getUrl());
  List<HtmlForm> forms=p.getForms();
  for (  HtmlForm form : forms) {
    if ("enable".equals(form.getAttribute("action"))) {
      j.submit(form);
    }
  }
  assertFalse("Project should be enabled.",project.isDisabled());
}
