@Issue("SECURITY-611") @Test public void apiPermissions() throws Exception {
  DumbSlave slave=new DumbSlave("slave",j.jenkins.getRootDir().getAbsolutePath(),j.createComputerLauncher(null));
  slave.setNumExecutors(2);
  j.jenkins.addNode(slave);
  FreeStyleProject publicProject=j.createFreeStyleProject("public-project");
  publicProject.setAssignedNode(slave);
  startBlockingBuild(publicProject);
  FreeStyleProject secretProject=j.createFreeStyleProject("secret-project");
  secretProject.setAssignedNode(slave);
  startBlockingBuild(secretProject);
  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
  j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().toEveryone().grant(Item.READ).onItems(publicProject).toEveryone().grant(Item.READ).onItems(secretProject).to("has-security-clearance"));
  JenkinsRule.WebClient wc=j.createWebClient();
  wc.withBasicCredentials("has-security-clearance");
  String api=wc.goTo(slave.toComputer().getUrl() + "api/json?pretty&depth=1",null).getWebResponse().getContentAsString();
  System.out.println(api);
  assertThat(api,allOf(containsString("public-project"),containsString("secret-project")));
  wc=j.createWebClient();
  wc.withBasicCredentials("regular-joe");
  api=wc.goTo(slave.toComputer().getUrl() + "api/json?pretty&depth=1",null).getWebResponse().getContentAsString();
  System.out.println(api);
  assertThat(api,allOf(containsString("public-project"),not(containsString("secret-project"))));
}
