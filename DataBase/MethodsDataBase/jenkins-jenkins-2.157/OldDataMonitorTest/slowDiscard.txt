/** 
 * Note that this doesn't actually run slowly, it just ensures that the  {@link OldDataMonitor#changeListener's onChange()} can completewhile  {@link OldDataMonitor#doDiscard(org.kohsuke.stapler.StaplerRequest,org.kohsuke.stapler.StaplerResponse)}is still running.
 */
@Issue("JENKINS-24763") @Test public void slowDiscard() throws InterruptedException, IOException, ExecutionException {
  final OldDataMonitor oldDataMonitor=OldDataMonitor.get(r.jenkins);
  final CountDownLatch ensureEntry=new CountDownLatch(1);
  final CountDownLatch preventExit=new CountDownLatch(1);
  Saveable slowSavable=new Saveable(){
    @Override public void save() throws IOException {
      try {
        ensureEntry.countDown();
        preventExit.await();
      }
 catch (      InterruptedException e) {
      }
    }
  }
;
  OldDataMonitor.report(slowSavable,(String)null);
  ExecutorService executors=Executors.newSingleThreadExecutor();
  Future<Void> discardFuture=executors.submit(new Callable<Void>(){
    @Override public Void call() throws Exception {
      oldDataMonitor.doDiscard(Stapler.getCurrentRequest(),Stapler.getCurrentResponse());
      return null;
    }
  }
);
  ensureEntry.await();
  File xml=File.createTempFile("OldDataMonitorTest.slowDiscard","xml");
  xml.deleteOnExit();
  OldDataMonitor.changeListener.onChange(new Saveable(){
    public void save() throws IOException {
    }
  }
,new XmlFile(xml));
  preventExit.countDown();
  discardFuture.get();
}
