@Test @Issue("SECURITY-765") public void passwordsAreRedacted_andOtherStayTheSame() throws Exception {
  j.jenkins.setCrumbIssuer(null);
  TestPassword testPassword=j.jenkins.getExtensionList(RootAction.class).get(TestPassword.class);
  JenkinsRule.WebClient wc=j.createWebClient();
  HtmlPage page=wc.goTo("test");
  String textSimple="plain-1";
  String pwdSimple="secret-1";
  ((HtmlInput)page.getElementById("text-simple")).setValueAttribute(textSimple);
  ((HtmlInput)page.getElementById("pwd-simple")).setValueAttribute(pwdSimple);
  String textLevelOne="plain-2";
  String pwdLevelOneA="secret-2";
  String pwdLevelOneB="secret-3";
  ((HtmlInput)page.getElementById("text-level-one")).setValueAttribute(textLevelOne);
  ((HtmlInput)page.getElementById("pwd-level-one-a")).setValueAttribute(pwdLevelOneA);
  ((HtmlInput)page.getElementById("pwd-level-one-b")).setValueAttribute(pwdLevelOneB);
  HtmlForm form=page.getFormByName("config");
  Page formSubmitPage=j.submit(form);
  assertThat(formSubmitPage.getWebResponse().getStatusCode(),equalTo(200));
  JSONObject rawJson=testPassword.lastJsonReceived;
  String rawJsonToString=rawJson.toString();
  assertThat(rawJsonToString,containsString(textSimple));
  assertThat(rawJsonToString,containsString(pwdSimple));
  assertThat(rawJsonToString,containsString(textLevelOne));
  assertThat(rawJsonToString,containsString(pwdLevelOneA));
  assertThat(rawJson.getString(RedactSecretJsonInErrorMessageSanitizer.REDACT_KEY),equalTo("pwd-simple"));
  assertThat(rawJson.getJSONObject("sub-one").getJSONArray(RedactSecretJsonInErrorMessageSanitizer.REDACT_KEY),allOf(hasItem("pwd-level-one-a"),hasItem("pwd-level-one-b")));
  JSONObject redactedJson=RedactSecretJsonInErrorMessageSanitizer.INSTANCE.sanitize(rawJson);
  String redactedJsonToString=redactedJson.toString();
  assertThat(redactedJsonToString,containsString(textSimple));
  assertThat(redactedJsonToString,not(containsString(pwdSimple)));
  assertThat(redactedJsonToString,containsString(textLevelOne));
  assertThat(redactedJsonToString,not(containsString(pwdLevelOneA)));
  assertThat(redactedJsonToString,not(containsString(pwdLevelOneB)));
  assertThat(redactedJsonToString,containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE));
}
