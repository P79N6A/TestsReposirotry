@Issue("JENKINS-9942") @Test public void backwardsSlashesOnWindows(){
  File tmpFile=null;
  try {
    File baz=new File(new File(new File(tmpDir,"foo"),"bar"),"baz");
    baz.mkdirs();
    tmpFile=new File(baz,"Test.txt");
    tmpFile.createNewFile();
  }
 catch (  IOException e) {
    fail("unable to prepare source directory for zipping",e);
  }
  File zipFile=null;
  ZipArchiver archiver=null;
  try {
    zipFile=File.createTempFile("test",".zip");
    archiver=new ZipArchiver(Files.newOutputStream(zipFile.toPath()));
    archiver.visit(tmpFile,"foo\\bar\\baz\\Test.txt");
  }
 catch (  Exception e) {
    fail("exception driving ZipArchiver",e);
  }
 finally {
    if (archiver != null) {
      try {
        archiver.close();
      }
 catch (      IOException e) {
      }
    }
  }
  String zipEntryName=null;
  ZipFile zipFileVerify=null;
  try {
    zipFileVerify=new ZipFile(zipFile);
    zipEntryName=((ZipEntry)zipFileVerify.entries().nextElement()).getName();
  }
 catch (  Exception e) {
    fail("failure enumerating zip entries",e);
  }
 finally {
    if (zipFileVerify != null) {
      try {
        zipFileVerify.close();
      }
 catch (      IOException e) {
      }
    }
  }
  assertEquals("foo/bar/baz/Test.txt",zipEntryName);
}
