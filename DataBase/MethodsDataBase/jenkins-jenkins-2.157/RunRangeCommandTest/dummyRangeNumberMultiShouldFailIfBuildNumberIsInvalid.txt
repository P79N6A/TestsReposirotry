@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsInvalid() throws Exception {
  CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,"1a,2,3");
  assertThat(result,failedWith(3));
  assertThat(result,hasNoStandardOutput());
  assertThat(result.stderr(),containsString("ERROR: Unable to parse '1a,2,3', expected number"));
  result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,"aa,2,3");
  assertThat(result,failedWith(3));
  assertThat(result,hasNoStandardOutput());
  assertThat(result.stderr(),containsString("ERROR: Unable to parse 'aa,2,3', expected number"));
  result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,"1,2a,3");
  assertThat(result,failedWith(3));
  assertThat(result,hasNoStandardOutput());
  assertThat(result.stderr(),containsString("ERROR: Unable to parse '1,2a,3', expected number"));
  result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,"1,aa,3");
  assertThat(result,failedWith(3));
  assertThat(result,hasNoStandardOutput());
  assertThat(result.stderr(),containsString("ERROR: Unable to parse '1,aa,3', expected number"));
  result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,"1,2,3a");
  assertThat(result,failedWith(3));
  assertThat(result,hasNoStandardOutput());
  assertThat(result.stderr(),containsString("ERROR: Unable to parse '1,2,3a', expected number"));
  result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,"1,2,aa");
  assertThat(result,failedWith(3));
  assertThat(result,hasNoStandardOutput());
  assertThat(result.stderr(),containsString("ERROR: Unable to parse '1,2,aa', expected number"));
}
