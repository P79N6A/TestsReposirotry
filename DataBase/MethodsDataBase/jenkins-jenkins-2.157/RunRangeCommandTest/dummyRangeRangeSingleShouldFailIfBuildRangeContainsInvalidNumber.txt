@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsInvalidNumber() throws Exception {
  CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,"1-2a");
  assertThat(result,failedWith(3));
  assertThat(result,hasNoStandardOutput());
  assertThat(result.stderr(),containsString("ERROR: Unable to parse '1-2a', expected number"));
  result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,"1-aa");
  assertThat(result,failedWith(3));
  assertThat(result,hasNoStandardOutput());
  assertThat(result.stderr(),containsString("ERROR: Unable to parse '1-aa', expected number"));
  result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,"2a-2");
  assertThat(result,failedWith(3));
  assertThat(result,hasNoStandardOutput());
  assertThat(result.stderr(),containsString("ERROR: Unable to parse '2a-2', expected number"));
  result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,"aa-2");
  assertThat(result,failedWith(3));
  assertThat(result,hasNoStandardOutput());
  assertThat(result.stderr(),containsString("ERROR: Unable to parse 'aa-2', expected number"));
  result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,"2a-2a");
  assertThat(result,failedWith(3));
  assertThat(result,hasNoStandardOutput());
  assertThat(result.stderr(),containsString("ERROR: Unable to parse '2a-2a', expected number"));
  result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(PROJECT_NAME,"aa-aa");
  assertThat(result,failedWith(3));
  assertThat(result,hasNoStandardOutput());
  assertThat(result.stderr(),containsString("ERROR: Unable to parse 'aa-aa', expected number"));
}
