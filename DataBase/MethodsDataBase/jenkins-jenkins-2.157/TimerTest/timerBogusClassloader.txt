/** 
 * Launch two tasks which can only complete by running doRun() concurrently.
 */
@Test @Issue("JENKINS-49206") public void timerBogusClassloader() throws Exception {
  final int threadCount=10;
  final CountDownLatch startLatch=new CountDownLatch(threadCount);
  final ClassLoader[] contextClassloaders=new ClassLoader[threadCount];
  ScheduledFuture[] futures=new ScheduledFuture[threadCount];
  final ClassLoader bogusClassloader=new GroovyClassLoader();
  Runnable timerTest=new Runnable(){
    @Override public void run(){
      ClassLoader cl=Thread.currentThread().getContextClassLoader();
      Thread.currentThread().setContextClassLoader(bogusClassloader);
      ScheduledExecutorService exec=Timer.get();
      for (int i=0; i < threadCount; i++) {
        final int j=i;
        futures[j]=exec.schedule(new Runnable(){
          @Override public void run(){
            try {
              startLatch.countDown();
              contextClassloaders[j]=Thread.currentThread().getContextClassLoader();
            }
 catch (            Exception ex) {
              throw new RuntimeException(ex);
            }
          }
        }
,0,TimeUnit.SECONDS);
      }
      Thread.currentThread().setContextClassLoader(cl);
    }
  }
;
  Thread t=new Thread(timerTest);
  t.run();
  t.join(1000L);
  for (int i=0; i < threadCount; i++) {
    futures[i].get();
    Assert.assertEquals(Timer.class.getClassLoader(),contextClassloaders[i]);
  }
}
