/** 
 * Verifies the queueing behavior in the presence of the expression.
 */
@Test public void queueBehavior1() throws Exception {
  DumbSlave w32=j.createSlave("win 32bit",null);
  DumbSlave w64=j.createSlave("win 64bit",null);
  j.createSlave("linux 32bit",null);
  final SequenceLock seq=new SequenceLock();
  FreeStyleProject p1=j.createFreeStyleProject();
  p1.getBuildersList().add(new TestBuilder(){
    public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      seq.phase(0);
      seq.phase(2);
      seq.done();
      return true;
    }
  }
);
  p1.setAssignedLabel(j.jenkins.getLabel("win && 32bit"));
  FreeStyleProject p2=j.createFreeStyleProject();
  p2.setAssignedLabel(j.jenkins.getLabel("win && 32bit"));
  FreeStyleProject p3=j.createFreeStyleProject();
  p3.setAssignedLabel(j.jenkins.getLabel("win"));
  Future<FreeStyleBuild> f1=p1.scheduleBuild2(0);
  seq.phase(1);
  Future<FreeStyleBuild> f2=p2.scheduleBuild2(0);
  Thread.sleep(1000);
  FreeStyleBuild b3=j.assertBuildStatusSuccess(p3.scheduleBuild2(0));
  assertSame(w64,b3.getBuiltOn());
  seq.phase(3);
  FreeStyleBuild b1=j.assertBuildStatusSuccess(f1);
  assertSame(w32,b1.getBuiltOn());
  FreeStyleBuild b2=j.assertBuildStatusSuccess(f2);
  assertSame(w32,b2.getBuiltOn());
}
