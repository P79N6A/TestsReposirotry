@Issue("JENKINS-15816") @SuppressWarnings({"unchecked","rawtypes"}) @Test public void timezoneOfID() throws Exception {
  TimeZone origTZ=TimeZone.getDefault();
  try {
    final Run r;
    String id;
    TimeZone.setDefault(TimeZone.getTimeZone("America/Chicago"));
    ExecutorService svc=Executors.newSingleThreadExecutor();
    try {
      r=svc.submit(new Callable<Run>(){
        @Override public Run call() throws Exception {
          return new Run(new StubJob(),1234567890){
          }
;
        }
      }
).get();
      TimeZone.setDefault(TimeZone.getTimeZone("America/Los_Angeles"));
      id=r.getId();
      assertEquals(id,svc.submit(new Callable<String>(){
        @Override public String call() throws Exception {
          return r.getId();
        }
      }
).get());
    }
  finally {
      svc.shutdown();
    }
    TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
    svc=Executors.newSingleThreadExecutor();
    try {
      assertEquals(id,r.getId());
      assertEquals(id,svc.submit(new Callable<String>(){
        @Override public String call() throws Exception {
          return r.getId();
        }
      }
).get());
    }
  finally {
      svc.shutdown();
    }
  }
  finally {
    TimeZone.setDefault(origTZ);
  }
}
