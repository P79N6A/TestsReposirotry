@Test public void quietDownShouldSuccessWithBlockAndRunningExecutor() throws Exception {
  final FreeStyleProject project=j.createFreeStyleProject("aProject");
  final ExecutorService threadPool=Executors.newSingleThreadExecutor();
  final OneShotEvent beforeCli=new OneShotEvent();
  final OneShotEvent finish=new OneShotEvent();
  final Future<FreeStyleBuild> build=OnlineNodeCommandTest.startBlockingAndFinishingBuild(project,finish);
  assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds(),hasSize(1));
  boolean timeoutOccurred=false;
  final FutureTask exec_task=new FutureTask(new Callable(){
    public Object call(){
      assertJenkinsNotInQuietMode();
      beforeCli.signal();
      final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Jenkins.ADMINISTER).invokeWithArgs("-block");
      fail("Should never return from previous CLI call!");
      return null;
    }
  }
);
  try {
    threadPool.submit(exec_task);
    beforeCli.block();
    assertJenkinsInQuietMode();
    exec_task.get(10,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    timeoutOccurred=true;
  }
  if (!timeoutOccurred)   fail("Missing timeout for CLI call");
  finish.signal();
  build.get();
  assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds(),hasSize(1));
  assertThat(project.isBuilding(),equalTo(false));
  j.assertBuildStatusSuccess(build);
  exec_task.cancel(true);
  assertJenkinsInQuietMode();
}
