@Test public void quietDownShouldSuccessWithBlockAndNonExpiredTimeoutAndFinishingExecutor() throws Exception {
  final int TIMEOUT=5000;
  final FreeStyleProject project=j.createFreeStyleProject("aProject");
  final ExecutorService threadPool=Executors.newSingleThreadExecutor();
  final OneShotEvent beforeCli=new OneShotEvent();
  final OneShotEvent finish=new OneShotEvent();
  final Future<FreeStyleBuild> build=OnlineNodeCommandTest.startBlockingAndFinishingBuild(project,finish);
  assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds(),hasSize(1));
  final FutureTask exec_task=new FutureTask(new Callable(){
    public Object call(){
      assertJenkinsNotInQuietMode();
      final long time_before=System.currentTimeMillis();
      beforeCli.signal();
      final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Jenkins.ADMINISTER).invokeWithArgs("-block","-timeout",Integer.toString(TIMEOUT));
      assertThat(result,succeededSilently());
      assertThat(System.currentTimeMillis() > time_before + 1000,equalTo(true));
      assertThat(System.currentTimeMillis() < time_before + TIMEOUT,equalTo(true));
      assertJenkinsInQuietMode();
      return null;
    }
  }
);
  threadPool.submit(exec_task);
  beforeCli.block();
  assertJenkinsInQuietMode();
  finish.signal();
  build.get();
  assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds(),hasSize(1));
  assertThat(project.isBuilding(),equalTo(false));
  j.assertBuildStatusSuccess(build);
  assertJenkinsInQuietMode();
  get(exec_task);
}
