@Test public void uploadDependencyResolution() throws Exception {
  assumeFalse("TODO: Implement this test for Windows",Functions.isWindows());
  PersistedList<UpdateSite> sites=r.jenkins.getUpdateCenter().getSites();
  sites.clear();
  URL url=PluginManagerTest.class.getResource("/plugins/upload-test-update-center.json");
  UpdateSite site=new UpdateSite(UpdateCenter.ID_DEFAULT,url.toString());
  sites.add(site);
  assertEquals(FormValidation.ok(),site.updateDirectly(false).get());
  assertNotNull(site.getData());
  assertNull(r.jenkins.getPluginManager().getPlugin("Parameterized-Remote-Trigger"));
  assertNull(r.jenkins.getPluginManager().getPlugin("token-macro"));
  HtmlPage page=r.createWebClient().goTo("pluginManager/advanced");
  HtmlForm f=page.getFormByName("uploadPlugin");
  File dir=tmp.newFolder();
  File plugin=new File(dir,"Parameterized-Remote-Trigger.hpi");
  FileUtils.copyURLToFile(getClass().getClassLoader().getResource("plugins/Parameterized-Remote-Trigger.hpi"),plugin);
  f.getInputByName("name").setValueAttribute(plugin.getAbsolutePath());
  r.submit(f);
  assertTrue(r.jenkins.getUpdateCenter().getJobs().size() > 0);
  boolean done=true;
  boolean passed=true;
  do {
    Thread.sleep(100);
    done=true;
    for (    UpdateCenterJob job : r.jenkins.getUpdateCenter().getJobs()) {
      if (job instanceof UpdateCenter.DownloadJob) {
        UpdateCenter.DownloadJob j=(UpdateCenter.DownloadJob)job;
        assertFalse(j.status instanceof UpdateCenter.DownloadJob.Failure);
        done&=!(((j.status instanceof UpdateCenter.DownloadJob.Pending) || (j.status instanceof UpdateCenter.DownloadJob.Installing)));
      }
    }
  }
 while (!done);
  assertTrue(new File(r.jenkins.getRootDir(),"plugins/Parameterized-Remote-Trigger.jpi").exists());
  assertTrue(new File(r.jenkins.getRootDir(),"plugins/token-macro.jpi").exists());
  assertNotNull(r.jenkins.getPluginManager().getPlugin("Parameterized-Remote-Trigger"));
  assertNotNull(r.jenkins.getPluginManager().getPlugin("token-macro"));
}
