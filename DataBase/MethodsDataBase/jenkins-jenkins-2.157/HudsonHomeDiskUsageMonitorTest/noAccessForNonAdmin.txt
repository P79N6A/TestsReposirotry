@Issue("SECURITY-371") @Test public void noAccessForNonAdmin() throws Exception {
  ApiTokenTestHelper.enableLegacyBehavior();
  JenkinsRule.WebClient wc=j.createWebClient();
  JenkinsRule.DummySecurityRealm realm=j.createDummySecurityRealm();
  realm.addGroups("administrator","admins");
  realm.addGroups("bob","users");
  j.jenkins.setSecurityRealm(realm);
  GlobalMatrixAuthorizationStrategy auth=new GlobalMatrixAuthorizationStrategy();
  auth.add(Jenkins.ADMINISTER,"admins");
  auth.add(Jenkins.READ,"users");
  j.jenkins.setAuthorizationStrategy(auth);
  User bob=User.getById("bob",true);
  User administrator=User.getById("administrator",true);
  WebRequest request=new WebRequest(new URL(wc.getContextPath() + "administrativeMonitor/hudsonHomeIsFull/act"),HttpMethod.POST);
  NameValuePair param=new NameValuePair("no","true");
  request.setRequestParameters(Collections.singletonList(param));
  HudsonHomeDiskUsageMonitor mon=HudsonHomeDiskUsageMonitor.get();
  wc.withBasicApiToken(bob);
  try {
    wc.getPage(request);
    fail();
  }
 catch (  FailingHttpStatusCodeException e) {
    assertEquals(403,e.getStatusCode());
  }
  assertTrue(mon.isEnabled());
  WebRequest requestReadOnly=new WebRequest(new URL(wc.getContextPath() + "administrativeMonitor/hudsonHomeIsFull"),HttpMethod.GET);
  try {
    wc.getPage(requestReadOnly);
    fail();
  }
 catch (  FailingHttpStatusCodeException e) {
    assertEquals(403,e.getStatusCode());
  }
  wc.withBasicApiToken(administrator);
  wc.getPage(request);
  assertFalse(mon.isEnabled());
}
