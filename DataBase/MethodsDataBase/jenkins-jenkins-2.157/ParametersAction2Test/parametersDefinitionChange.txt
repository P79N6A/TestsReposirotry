@Test @Issue("SECURITY-170") public void parametersDefinitionChange() throws Exception {
  FreeStyleProject p=j.createFreeStyleProject();
  p.addProperty(new ParametersDefinitionProperty(Arrays.<ParameterDefinition>asList(new StringParameterDefinition("foo","foo"),new StringParameterDefinition("bar","bar"))));
  FreeStyleBuild build=j.assertBuildStatusSuccess(p.scheduleBuild2(0,new Cause.UserIdCause(),new ParametersAction(new StringParameterValue("foo","baz"),new StringParameterValue("bar","bar"),new StringParameterValue("undef","undef"))));
  assertTrue("undef parameter is not listed in getParameters",!hasParameterWithName(build.getAction(ParametersAction.class),"undef"));
  p.removeProperty(ParametersDefinitionProperty.class);
  p.addProperty(new ParametersDefinitionProperty(Arrays.<ParameterDefinition>asList(new StringParameterDefinition("foo","foo"),new StringParameterDefinition("bar","bar"),new StringParameterDefinition("undef","undef"))));
  assertTrue("undef parameter is not listed in getParameters",!hasParameterWithName(build.getAction(ParametersAction.class),"undef"));
  p.removeProperty(ParametersDefinitionProperty.class);
  p.addProperty(new ParametersDefinitionProperty(Arrays.<ParameterDefinition>asList(new StringParameterDefinition("foo","foo"))));
  assertTrue("the build still have 2 parameters",build.getAction(ParametersAction.class).getParameters().size() == 2);
  p.removeProperty(ParametersDefinitionProperty.class);
  assertTrue("the build still have 2 parameters",build.getAction(ParametersAction.class).getParameters().size() == 2);
}
