@Test public void doAddNestedJobToRecursiveView() throws Exception {
  ListView view=new ListView("a_view",j.jenkins);
  view.setRecurse(true);
  j.jenkins.addView(view);
  MockFolder folder=j.createFolder("folder");
  FreeStyleProject np=folder.createProject(FreeStyleProject.class,"nested_project");
  view.add(np);
  assertTrue(view.contains(np));
  view.remove(np);
  assertFalse(view.contains(np));
  Page page=doPost(view,"addJobToView?name=folder/nested_project");
  j.assertGoodStatus(page);
  assertTrue(view.contains(np));
  page=doPost(view,"removeJobFromView?name=folder/nested_project");
  j.assertGoodStatus(page);
  assertFalse(view.contains(np));
  MockFolder nf=folder.createProject(MockFolder.class,"nested_folder");
  FreeStyleProject nnp=nf.createProject(FreeStyleProject.class,"nested_nested_project");
  ListView nestedView=new ListView("nested_view",folder);
  nestedView.setRecurse(true);
  folder.addView(nestedView);
  page=doPost(nestedView,"addJobToView?name=nested_folder/nested_nested_project");
  j.assertGoodStatus(page);
  assertTrue(nestedView.contains(nnp));
  page=doPost(nestedView,"removeJobFromView?name=nested_folder/nested_nested_project");
  j.assertGoodStatus(page);
  assertFalse(nestedView.contains(nnp));
  page=doPost(nestedView,"addJobToView?name=/folder/nested_folder/nested_nested_project");
  j.assertGoodStatus(page);
  assertTrue(nestedView.contains(nnp));
  page=doPost(nestedView,"removeJobFromView?name=/folder/nested_folder/nested_nested_project");
  j.assertGoodStatus(page);
  assertFalse(nestedView.contains(nnp));
}
