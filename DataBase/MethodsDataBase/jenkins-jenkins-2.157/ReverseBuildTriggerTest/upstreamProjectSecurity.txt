/** 
 * @see BuildTriggerTest#testDownstreamProjectSecurity 
 */
@Test public void upstreamProjectSecurity() throws Exception {
  r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
  MockAuthorizationStrategy auth=new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().to("alice","bob").grant(Computer.BUILD).everywhere().to("alice","bob").grant(Jenkins.ADMINISTER).everywhere().to("admin");
  r.jenkins.setAuthorizationStrategy(auth);
  String upstreamName="upstr3@m";
  final FreeStyleProject upstream=r.createFreeStyleProject(upstreamName);
  String downstreamName="d0wnstr3am";
  FreeStyleProject downstream=r.createFreeStyleProject(downstreamName);
  auth.grant(Item.READ).onItems(downstream).to("alice").grant(Item.READ).onItems(upstream).to("bob");
  @SuppressWarnings("rawtypes") Trigger<Job> t=new ReverseBuildTrigger(upstreamName,Result.SUCCESS);
  downstream.addTrigger(t);
  t.start(downstream,true);
  r.jenkins.rebuildDependencyGraph();
  assertEquals(Collections.singletonList(downstream),upstream.getDownstreamProjects());
  FreeStyleBuild b=r.buildAndAssertSuccess(upstream);
  r.assertLogContains(downstreamName,b);
  r.waitUntilNoActivity();
  assertNotNull(JenkinsRule.getLog(b),downstream.getLastBuild());
  assertEquals(1,downstream.getLastBuild().number);
  QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(ImmutableMap.of(upstreamName,User.get("admin").impersonate(),downstreamName,Jenkins.ANONYMOUS)));
  b=r.buildAndAssertSuccess(upstream);
  r.assertLogContains(downstreamName,b);
  r.assertLogContains(Messages.ReverseBuildTrigger_running_as_cannot_even_see_for_trigger_f("anonymous",upstreamName,downstreamName),b);
  r.waitUntilNoActivity();
  assertEquals(1,downstream.getLastBuild().number);
  QueueItemAuthenticatorConfiguration.get().getAuthenticators().replace(new MockQueueItemAuthenticator(ImmutableMap.of(upstreamName,User.get("bob").impersonate(),downstreamName,Jenkins.ANONYMOUS)));
  b=r.buildAndAssertSuccess(upstream);
  r.assertLogNotContains(downstreamName,b);
  r.waitUntilNoActivity();
  assertEquals(1,downstream.getLastBuild().number);
  auth.grant(Item.READ).onItems(upstream).to("alice","bob");
  Map<String,Authentication> qiaConfig=new HashMap<String,Authentication>();
  qiaConfig.put(upstreamName,User.get("bob").impersonate());
  qiaConfig.put(downstreamName,User.get("alice").impersonate());
  QueueItemAuthenticatorConfiguration.get().getAuthenticators().replace(new MockQueueItemAuthenticator(qiaConfig));
  b=r.buildAndAssertSuccess(upstream);
  r.assertLogNotContains(downstreamName,b);
  r.waitUntilNoActivity();
  assertEquals(2,downstream.getLastBuild().number);
  assertEquals(new Cause.UpstreamCause((Run)b),downstream.getLastBuild().getCause(Cause.UpstreamCause.class));
  qiaConfig=new HashMap<String,Authentication>();
  qiaConfig.put(upstreamName,User.get("admin").impersonate());
  qiaConfig.put(downstreamName,User.get("alice").impersonate());
  QueueItemAuthenticatorConfiguration.get().getAuthenticators().replace(new MockQueueItemAuthenticator(qiaConfig));
  b=r.buildAndAssertSuccess(upstream);
  r.assertLogContains(downstreamName,b);
  r.waitUntilNoActivity();
  assertEquals(3,downstream.getLastBuild().number);
  assertEquals(new Cause.UpstreamCause((Run)b),downstream.getLastBuild().getCause(Cause.UpstreamCause.class));
  auth=new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().to("alice","bob").grant(Computer.BUILD).everywhere().to("alice","bob").grant(Jenkins.ADMINISTER).everywhere().to("admin").grant(Item.READ).onItems(upstream).to("bob").grant(Item.DISCOVER).onItems(upstream).to("alice");
  r.jenkins.setAuthorizationStrategy(auth);
  auth.grant(Item.READ).onItems(downstream).to("alice");
  qiaConfig=new HashMap<String,Authentication>();
  qiaConfig.put(upstreamName,User.get("bob").impersonate());
  qiaConfig.put(downstreamName,User.get("alice").impersonate());
  QueueItemAuthenticatorConfiguration.get().getAuthenticators().replace(new MockQueueItemAuthenticator(qiaConfig));
  b=r.buildAndAssertSuccess(upstream);
  r.assertLogNotContains(downstreamName,b);
  r.waitUntilNoActivity();
  assertEquals(3,downstream.getLastBuild().number);
  auth.grant(Item.READ).onItems(upstream).to("bob");
  auth.grant(Item.DISCOVER).onItems(upstream).to("anonymous");
  qiaConfig=new HashMap<String,Authentication>();
  qiaConfig.put(upstreamName,User.get("bob").impersonate());
  qiaConfig.put(downstreamName,Jenkins.ANONYMOUS);
  QueueItemAuthenticatorConfiguration.get().getAuthenticators().replace(new MockQueueItemAuthenticator(qiaConfig));
  b=r.buildAndAssertSuccess(upstream);
  r.assertLogNotContains(downstreamName,b);
  r.assertLogNotContains("Please login to access job " + upstreamName,b);
  r.waitUntilNoActivity();
  assertEquals(3,downstream.getLastBuild().number);
}
