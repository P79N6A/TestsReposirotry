@Test public void testHasPermission() throws Exception {
  Node node=j.createOnlineSlave();
  GlobalMatrixAuthorizationStrategy auth=new GlobalMatrixAuthorizationStrategy();
  j.jenkins.setAuthorizationStrategy(auth);
  j.jenkins.setCrumbIssuer(null);
  HudsonPrivateSecurityRealm realm=new HudsonPrivateSecurityRealm(false);
  j.jenkins.setSecurityRealm(realm);
  User user=realm.createAccount("John Smith","abcdef");
  SecurityContextHolder.getContext().setAuthentication(user.impersonate());
  assertFalse("Current user should not have permission read.",node.hasPermission(Permission.READ));
  auth.add(Computer.CONFIGURE,user.getId());
  assertTrue("Current user should have permission CONFIGURE.",user.hasPermission(Permission.CONFIGURE));
  auth.add(Jenkins.ADMINISTER,user.getId());
  assertTrue("Current user should have permission read, because he has permission administer.",user.hasPermission(Permission.READ));
  SecurityContextHolder.getContext().setAuthentication(Jenkins.ANONYMOUS);
  user=User.get("anonymous");
  assertFalse("Current user should not have permission read, because does not have global permission read and authentication is anonymous.",user.hasPermission(Permission.READ));
}
