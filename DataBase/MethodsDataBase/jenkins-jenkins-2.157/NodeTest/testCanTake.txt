@Test public void testCanTake() throws Exception {
  Node node=j.createOnlineSlave();
  node.setLabelString("label1 label2");
  FreeStyleProject project=j.createFreeStyleProject();
  project.setAssignedLabel(j.jenkins.getLabel("label1"));
  FreeStyleProject project2=j.createFreeStyleProject();
  FreeStyleProject project3=j.createFreeStyleProject();
  project3.setAssignedLabel(j.jenkins.getLabel("notContained"));
  Queue.BuildableItem item=new Queue.BuildableItem(new WaitingItem(new GregorianCalendar(),project,new ArrayList<Action>()));
  Queue.BuildableItem item2=new Queue.BuildableItem(new WaitingItem(new GregorianCalendar(),project2,new ArrayList<Action>()));
  Queue.BuildableItem item3=new Queue.BuildableItem(new WaitingItem(new GregorianCalendar(),project3,new ArrayList<Action>()));
  assertNull("Node should take project which is assigned to its label.",node.canTake(item));
  assertNull("Node should take project which is assigned to its label.",node.canTake(item2));
  assertNotNull("Node should not take project which is not assigned to its label.",node.canTake(item3));
  String message=Messages._Node_LabelMissing(node.getNodeName(),j.jenkins.getLabel("notContained")).toString();
  assertEquals("Cause of blockage should be missing label.",message,node.canTake(item3).getShortDescription());
  ((Slave)node).setMode(Node.Mode.EXCLUSIVE);
  assertNotNull("Node should not take project which has null label because it is in exclusive mode.",node.canTake(item2));
  message=Messages._Node_BecauseNodeIsReserved(node.getNodeName()).toString();
  assertEquals("Cause of blockage should be reserved label.",message,node.canTake(item2).getShortDescription());
  node.getNodeProperties().add(new NodePropertyImpl());
  notTake=true;
  assertNotNull("Node should not take project because node property not alow it.",node.canTake(item));
  assertTrue("Cause of blockage should be bussy label.",node.canTake(item) instanceof CauseOfBlockage.BecauseLabelIsBusy);
  User user=User.get("John");
  GlobalMatrixAuthorizationStrategy auth=new GlobalMatrixAuthorizationStrategy();
  j.jenkins.setAuthorizationStrategy(auth);
  j.jenkins.setCrumbIssuer(null);
  HudsonPrivateSecurityRealm realm=new HudsonPrivateSecurityRealm(false);
  j.jenkins.setSecurityRealm(realm);
  realm.createAccount("John","");
  notTake=false;
  QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(project.getFullName(),user.impersonate())));
  assertNotNull("Node should not take project because user does not have build permission.",node.canTake(item));
  message=Messages._Node_LackingBuildPermission(item.authenticate().getName(),node.getNodeName()).toString();
  assertEquals("Cause of blockage should be bussy label.",message,node.canTake(item).getShortDescription());
}
