@Test @Issue("SECURITY-896") public void legacyToken_withoutLastGrantedAuthorities(){
  AtomicReference<String> token=new AtomicReference<>();
  rr.addStep(new Statement(){
    @Override public void evaluate() throws Throwable {
      enableLegacyTokenGenerationOnUserCreation();
      configureSecurity();
{
        JenkinsRule.WebClient wc=rr.j.createWebClient();
        wc.login("user1");
        HtmlPage page=wc.goTo("user/user1/configure");
        String tokenValue=((HtmlTextInput)page.getDocumentElement().querySelector("#apiToken")).getText();
        token.set(tokenValue);
      }
    }
  }
);
  rr.addStep(new Statement(){
    @Override public void evaluate() throws Throwable {
      User user=User.getById("user1",false);
      assertNull(user);
      JenkinsRule.WebClient wc=rr.j.createWebClient();
      wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
{
        WebRequest request=new WebRequest(new URL(rr.j.jenkins.getRootUrl() + "whoAmI/api/xml"));
        request.setAdditionalHeader("Authorization",base64("user1","invalid-token"));
        assertThat(wc.getPage(request).getWebResponse().getStatusCode(),equalTo(401));
      }
{
        WebRequest request=new WebRequest(new URL(rr.j.jenkins.getRootUrl() + "whoAmI/api/xml"));
        request.setAdditionalHeader("Authorization",base64("user-not-valid",token.get()));
        assertThat(wc.getPage(request).getWebResponse().getStatusCode(),equalTo(401));
      }
      assertNull(User.getById("user1",false));
      assertNull(User.getById("user-not-valid",false));
{
        WebRequest request=new WebRequest(new URL(rr.j.jenkins.getRootUrl() + "whoAmI/api/xml"));
        request.setAdditionalHeader("Authorization",base64("user1",token.get()));
        XmlPage xmlPage=wc.getPage(request);
        assertThat(xmlPage,hasXPath("//name",is("user1")));
      }
    }
  }
);
  rr.addStep(new Statement(){
    @Override public void evaluate() throws Throwable {
      User user=User.getById("user1",false);
      assertNull(user);
    }
  }
);
}
