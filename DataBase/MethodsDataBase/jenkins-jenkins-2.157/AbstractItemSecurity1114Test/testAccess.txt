@Test @Issue("SECURITY-1114") @For(AbstractItem.class) public void testAccess() throws Exception {
  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
  MockAuthorizationStrategy authorizationStrategy=new MockAuthorizationStrategy();
  authorizationStrategy.grant(Jenkins.READ).onRoot().toEveryone();
  authorizationStrategy.grant(Item.DISCOVER).everywhere().to("alice");
  authorizationStrategy.grant(Item.READ).everywhere().to("bob");
  j.jenkins.setAuthorizationStrategy(authorizationStrategy);
  j.createFreeStyleProject("myproject");
  JenkinsRule.WebClient wc=j.createWebClient().login("alice");
  try {
    wc.goTo("bypass/myproject");
    Assert.fail("expected exception");
  }
 catch (  FailingHttpStatusCodeException e) {
    Assert.assertEquals("alice can discover",403,e.getStatusCode());
  }
  wc=j.createWebClient().login("bob");
  wc.goTo("bypass/myproject");
  wc=j.createWebClient().login("carol");
  try {
    wc.goTo("bypass/nonexisting");
    Assert.fail("expected exception");
  }
 catch (  FailingHttpStatusCodeException e) {
    Assert.assertEquals("carol gets 404 for nonexisting project",404,e.getStatusCode());
  }
  try {
    wc.goTo("bypass/myproject");
    Assert.fail("expected exception");
  }
 catch (  FailingHttpStatusCodeException e) {
    Assert.assertEquals("carol gets 404 for invisible project",404,e.getStatusCode());
  }
}
