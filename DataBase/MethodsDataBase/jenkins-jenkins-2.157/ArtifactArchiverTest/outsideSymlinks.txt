@Issue("SECURITY-162") @Test public void outsideSymlinks() throws Exception {
  final FreeStyleProject p=j.createFreeStyleProject();
  p.getBuildersList().add(new TestBuilder(){
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      FilePath ws=build.getWorkspace();
      if (ws == null) {
        return false;
      }
      ws.child("hack").symlinkTo(p.getConfigFile().getFile().getAbsolutePath(),listener);
      return true;
    }
  }
);
  p.getPublishersList().add(new ArtifactArchiver("hack","",false,true));
  FreeStyleBuild b=j.assertBuildStatusSuccess(p.scheduleBuild2(0));
  List<FreeStyleBuild.Artifact> artifacts=b.getArtifacts();
  assertEquals(1,artifacts.size());
  FreeStyleBuild.Artifact artifact=artifacts.get(0);
  assertEquals("hack",artifact.relativePath);
  VirtualFile[] kids=b.getArtifactManager().root().list();
  assertEquals(1,kids.length);
  assertEquals("hack",kids[0].getName());
  assertFalse(kids[0].isDirectory());
  assertFalse(kids[0].isFile());
  assertFalse(kids[0].exists());
  j.createWebClient().assertFails(b.getUrl() + "artifact/hack",HttpURLConnection.HTTP_FORBIDDEN);
}
