@Test public void fileParameter_canStillUse_internalHierarchy() throws Exception {
  FreeStyleProject p=j.createFreeStyleProject();
  p.addProperty(new ParametersDefinitionProperty(Arrays.asList(new FileParameterDefinition("direct-child1.txt",null),new FileParameterDefinition("parent/child2.txt",null))));
  File uploadedFile1=tmp.newFile();
  FileUtils.write(uploadedFile1,"test1");
  File uploadedFile2=tmp.newFile();
  FileUtils.write(uploadedFile2,"test2");
  FreeStyleBuild build=j.assertBuildStatusSuccess(p.scheduleBuild2(0,new Cause.UserIdCause(),new ParametersAction(new FileParameterValue("direct-child1.txt",uploadedFile1,"uploaded-file-1.txt"),new FileParameterValue("parent/child2.txt",uploadedFile2,"uploaded-file-2.txt"))));
  File directChild=new File(build.getRootDir(),"fileParameters/" + "direct-child1.txt");
  assertTrue(directChild.exists());
  File parentChild=new File(build.getRootDir(),"fileParameters/" + "parent/child2.txt");
  assertTrue(parentChild.exists());
  assertTrue(build.getWorkspace().child("direct-child1.txt").exists());
  assertTrue(build.getWorkspace().child("parent").child("child2.txt").exists());
  JenkinsRule.WebClient wc=j.createWebClient();
  HtmlPage workspacePage=wc.goTo(p.getUrl() + "ws");
  String workspaceContent=workspacePage.getWebResponse().getContentAsString();
  assertThat(workspaceContent,allOf(containsString("direct-child1.txt"),containsString("parent")));
  HtmlPage workspaceParentPage=wc.goTo(p.getUrl() + "ws" + "/parent");
  String workspaceParentContent=workspaceParentPage.getWebResponse().getContentAsString();
  assertThat(workspaceParentContent,containsString("child2.txt"));
}
