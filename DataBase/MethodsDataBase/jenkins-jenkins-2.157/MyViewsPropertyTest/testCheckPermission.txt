@Test public void testCheckPermission() throws IOException {
  rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());
  User user=User.get("User");
  User user2=User.get("User2");
  MyViewsProperty property=new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);
  property.readResolve();
  property.setUser(user);
  GlobalMatrixAuthorizationStrategy auth=new GlobalMatrixAuthorizationStrategy();
  rule.jenkins.setAuthorizationStrategy(auth);
  user.addProperty(property);
  boolean ex=false;
  SecurityContextHolder.getContext().setAuthentication(user2.impersonate());
  try {
    property.checkPermission(Permission.CONFIGURE);
  }
 catch (  AccessDeniedException e) {
    ex=true;
  }
  assertTrue("Property should throw AccessDeniedException.",ex);
  SecurityContextHolder.getContext().setAuthentication(user.impersonate());
  try {
    property.checkPermission(Permission.CONFIGURE);
  }
 catch (  AccessDeniedException e) {
    fail("Property should not throw AccessDeniedException - user should control of himself.");
  }
  SecurityContextHolder.getContext().setAuthentication(user2.impersonate());
  auth.add(Jenkins.ADMINISTER,"User2");
  try {
    property.checkPermission(Permission.CONFIGURE);
  }
 catch (  AccessDeniedException e) {
    fail("Property should not throw AccessDeniedException.");
  }
}
