@Test public void testDeleteView() throws IOException {
  User user=User.get("User");
  MyViewsProperty property=new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);
  property.readResolve();
  property.setUser(user);
  user.addProperty(property);
  boolean ex=false;
  try {
    property.deleteView(property.getView(AllView.DEFAULT_VIEW_NAME));
  }
 catch (  IllegalStateException e) {
    ex=true;
  }
  assertTrue("Property should throw IllegalStateException.",ex);
  assertTrue("Property should contain view " + AllView.DEFAULT_VIEW_NAME,property.getViews().contains(property.getView(AllView.DEFAULT_VIEW_NAME)));
  View view=new ListView("foo",property);
  property.addView(view);
  ex=false;
  try {
    property.deleteView(view);
  }
 catch (  IllegalStateException e) {
    ex=true;
  }
  assertFalse("Property should not contain view " + view.name,property.getViews().contains(view));
  property.addView(view);
  property.setPrimaryViewName(view.name);
  assertTrue("Property should not contain view " + view.name,property.getViews().contains(view));
  property.deleteView(property.getView(AllView.DEFAULT_VIEW_NAME));
  assertFalse("Property should not contains view " + AllView.DEFAULT_VIEW_NAME,property.getViews().contains(property.getView(AllView.DEFAULT_VIEW_NAME)));
}
