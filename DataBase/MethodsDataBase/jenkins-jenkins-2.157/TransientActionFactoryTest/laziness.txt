@Test public void laziness() throws Exception {
  FreeStyleProject p=r.createFreeStyleProject();
  assertNull(p.getAction(FoldableAction.class));
  assertEquals(0,LazyFactory.count);
  assertNotNull(p.getAction(ProminentProjectAction.class));
  assertEquals(1,LazyFactory.count);
  assertNotNull(p.getAction(MyProminentProjectAction.class));
  assertEquals(2,LazyFactory.count);
  LazyFactory.count=0;
  List<? extends Action> allActions=p.getAllActions();
  assertEquals(1,LazyFactory.count);
  assertThat(Util.filter(allActions,FoldableAction.class),Matchers.<FoldableAction>iterableWithSize(0));
  assertThat(Util.filter(allActions,ProminentProjectAction.class),Matchers.<ProminentProjectAction>iterableWithSize(1));
  assertThat(Util.filter(allActions,MyProminentProjectAction.class),Matchers.<MyProminentProjectAction>iterableWithSize(1));
  LazyFactory.count=0;
  assertThat(p.getActions(FoldableAction.class),Matchers.<FoldableAction>iterableWithSize(0));
  assertEquals(0,LazyFactory.count);
  assertThat(p.getActions(ProminentProjectAction.class),Matchers.<ProminentProjectAction>iterableWithSize(1));
  assertEquals(1,LazyFactory.count);
  assertThat(p.getActions(MyProminentProjectAction.class),Matchers.<MyProminentProjectAction>iterableWithSize(1));
  assertEquals(2,LazyFactory.count);
  LazyFactory.count=0;
  MockFolder d=r.createFolder("d");
  assertNull(d.getAction(FoldableAction.class));
  assertNull(d.getAction(ProminentProjectAction.class));
  allActions=d.getAllActions();
  assertThat(Util.filter(allActions,FoldableAction.class),Matchers.<FoldableAction>iterableWithSize(0));
  assertThat(Util.filter(allActions,ProminentProjectAction.class),Matchers.<ProminentProjectAction>iterableWithSize(0));
  assertThat(d.getActions(FoldableAction.class),Matchers.<FoldableAction>iterableWithSize(0));
  assertThat(d.getActions(ProminentProjectAction.class),Matchers.<ProminentProjectAction>iterableWithSize(0));
  assertEquals(0,LazyFactory.count);
}
