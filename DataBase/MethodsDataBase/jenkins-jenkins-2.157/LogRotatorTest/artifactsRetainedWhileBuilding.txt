@Test @Issue("JENKINS-27836") public void artifactsRetainedWhileBuilding() throws Exception {
  j.getInstance().setNumExecutors(3);
  FreeStyleProject p=j.createFreeStyleProject();
  p.setBuildDiscarder(new LogRotator(-1,3,-1,1));
  StallBuilder sync=new StallBuilder();
  p.getBuildersList().replaceBy(Arrays.asList(new CreateArtifact(),sync));
  p.setConcurrentBuild(true);
  QueueTaskFuture<FreeStyleBuild> futureRun1=p.scheduleBuild2(0);
  FreeStyleBuild run1=futureRun1.waitForStart();
  sync.waitFor(run1.getNumber(),1,TimeUnit.SECONDS);
  QueueTaskFuture<FreeStyleBuild> futureRun2=p.scheduleBuild2(0);
  FreeStyleBuild run2=futureRun2.waitForStart();
  sync.waitFor(run2.getNumber(),1,TimeUnit.SECONDS);
  QueueTaskFuture<FreeStyleBuild> futureRun3=p.scheduleBuild2(0);
  FreeStyleBuild run3=futureRun3.waitForStart();
  sync.waitFor(run3.getNumber(),1,TimeUnit.SECONDS);
  assertThat("we haven't released run1's guard",run1.isBuilding(),is(true));
  assertThat("we haven't released run2's guard",run2.isBuilding(),is(true));
  assertThat("we haven't released run3's guard",run3.isBuilding(),is(true));
  assertThat("we have artifacts in run1",run1.getHasArtifacts(),is(true));
  assertThat("we have artifacts in run2",run2.getHasArtifacts(),is(true));
  assertThat("we have artifacts in run3",run3.getHasArtifacts(),is(true));
  sync.release(run1.getNumber());
  futureRun1.get();
  assertThat("we have released run1's guard",run1.isBuilding(),is(false));
  assertThat("we haven't released run2's guard",run2.isBuilding(),is(true));
  assertThat("we haven't released run3's guard",run3.isBuilding(),is(true));
  assertThat("run1 is last stable build",p.getLastStableBuild(),is(run1));
  assertThat("run1 is last successful build",p.getLastSuccessfulBuild(),is(run1));
  assertThat("we have artifacts in run1",run1.getHasArtifacts(),is(true));
  assertThat("CRITICAL ASSERTION: we have artifacts in run2",run2.getHasArtifacts(),is(true));
  assertThat("we have artifacts in run3",run3.getHasArtifacts(),is(true));
  sync.release(run2.getNumber());
  futureRun2.get();
  assertThat("we have released run2's guard",run2.isBuilding(),is(false));
  assertThat("we haven't released run3's guard",run3.isBuilding(),is(true));
  assertThat("we have no artifacts in run1",run1.getHasArtifacts(),is(false));
  assertThat("run2 is last stable build",p.getLastStableBuild(),is(run2));
  assertThat("run2 is last successful build",p.getLastSuccessfulBuild(),is(run2));
  assertThat("we have artifacts in run2",run2.getHasArtifacts(),is(true));
  assertThat("we have artifacts in run3",run3.getHasArtifacts(),is(true));
  sync.release(run3.getNumber());
  futureRun3.get();
  assertThat("we have released run3's guard",run3.isBuilding(),is(false));
  assertThat("we have no artifacts in run1",run1.getHasArtifacts(),is(false));
  assertThat("we have no artifacts in run2",run2.getHasArtifacts(),is(false));
  assertThat("run3 is last stable build",p.getLastStableBuild(),is(run3));
  assertThat("run3 is last successful build",p.getLastSuccessfulBuild(),is(run3));
  assertThat("we have artifacts in run3",run3.getHasArtifacts(),is(true));
}
