/** 
 * Verify that when a  {@link Label} is assigned to a {@link Project}, that label's  {@link LoadStatistics#queueLength} reflects the number of itemsin the queue scheduled for that project, and updates if the project's label is changed.
 */
@Test public void queueLengthReflectsJobsAssignedLabel() throws Exception {
  final Label label=Label.get(LABEL_STRING);
  final Label altLabel=Label.get(ALT_LABEL_STRING);
  FreeStyleProject project=createTestProject();
  project.setAssignedLabel(label);
  assertTrue("Initially the rolling queue length for the label is 0.",label.loadStatistics.queueLength.getLatest(TimeScale.SEC10) == 0f);
  assertTrue("Initially the rolling queue length for the alt label is 0.",altLabel.loadStatistics.queueLength.getLatest(TimeScale.SEC10) == 0f);
  for (int i=0; i < 3; i++) {
    project.scheduleBuild(0,CAUSE,new ParametersAction(new StringParameterValue(PARAMETER_NAME,String.valueOf(i))));
  }
  assertEquals("The job is queued as often as it was scheduled.",3,j.getInstance().getQueue().getItems(project).size());
  maintainQueueAndForceRunOfLoadStatisticsUpdater(project);
  float labelQueueLength=label.loadStatistics.queueLength.getLatest(TimeScale.SEC10);
  assertTrue("After LoadStatisticsUpdater runs, the queue length load statistic for the label is greater than 0.",labelQueueLength > 0f);
  project.setAssignedLabel(altLabel);
  maintainQueueAndForceRunOfLoadStatisticsUpdater(project);
  float labelQueueLengthNew=label.loadStatistics.queueLength.getLatest(TimeScale.SEC10);
  assertTrue("After assigning an alternate label to the job, the queue length load statistic for the queued builds should decrease.",labelQueueLengthNew < labelQueueLength);
  float altLabelQueueLength=altLabel.loadStatistics.queueLength.getLatest(TimeScale.SEC10);
  assertTrue("After assigning an alternate label to the job, the queue length load statistic for the alternate label should be greater than 0.",altLabelQueueLength > 0f);
}
