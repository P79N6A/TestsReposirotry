@Test @Issue("SECURITY-904") public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {
  Assume.assumeTrue(Functions.isWindows());
  FreeStyleProject p=j.createFreeStyleProject();
  File secretsFolder=new File(j.jenkins.getRootDir(),"secrets");
  File secretTarget=new File(secretsFolder,"goal.txt");
  String secretContent="secret";
  FileUtils.write(secretTarget,secretContent);
  String script=loadContentFromResource("outsideWorkspaceStructureWithJunctions.bat");
  p.getBuildersList().add(new BatchFile(script));
  assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());
  JenkinsRule.WebClient wc=j.createWebClient();
  wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
{
    Page page=wc.goTo(p.getUrl() + "ws/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    String workspaceContent=page.getWebResponse().getContentAsString();
    assertThat(workspaceContent,allOf(containsString("public1.key"),containsString("intermediateFolder"),containsString("to_secrets1j"),containsString("to_secrets1s"),containsString("to_secrets_goal1"),not(containsString("to_secrets2")),not(containsString("to_secrets_goal2"))));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/to_secrets1s/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/to_secrets1j/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/to_secrets_goal1/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    String workspaceContent=page.getWebResponse().getContentAsString();
    assertThat(workspaceContent,allOf(not(containsString("to_secrets1")),not(containsString("to_secrets_goal1")),containsString("to_secrets2s"),containsString("to_secrets2j"),containsString("to_secrets_goal2")));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_secrets2s/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_secrets2j/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_secrets2s/master.key",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_secrets2j/master.key",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_secrets_goal2/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/**/*.key",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    String workspaceContent=page.getWebResponse().getContentAsString();
    assertThat(workspaceContent,allOf(not(containsString("master.key")),containsString("public1.key"),containsString("public2.key"),containsString("intermediateFolder"),not(containsString("otherFolder")),not(containsString("to_secrets3j")),not(containsString("to_secrets3s")),not(containsString("to_secrets2j")),not(containsString("to_secrets2s")),not(containsString("to_secrets1j")),not(containsString("to_secrets1s"))));
  }
{
    Page zipPage=wc.goTo(p.getUrl() + "ws/*zip*/ws.zip",null);
    assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);
    assertThat(entryNames,containsInAnyOrder(p.getName() + "/intermediateFolder/public2.key",p.getName() + "/public1.key"));
  }
{
    Page zipPage=wc.goTo(p.getUrl() + "ws/intermediateFolder/*zip*/intermediateFolder.zip",null);
    assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);
    assertThat(entryNames,contains("intermediateFolder/public2.key"));
  }
}
