@Test @Issue("SECURITY-904") public void symlink_avoidLeakingInformation_aboutIllegalFolder() throws Exception {
  FreeStyleProject p=j.createFreeStyleProject();
  File secretsFolder=new File(j.jenkins.getRootDir(),"secrets");
  File secretTarget=new File(secretsFolder,"goal.txt");
  String secretContent="secret";
  FileUtils.write(secretTarget,secretContent);
  FileUtils.write(new File(secretsFolder,"public_fake1.key"),secretContent);
  FileUtils.write(new File(secretsFolder,"public_fake2.key"),secretContent);
  FileUtils.write(new File(secretsFolder,"public_fake3.key"),secretContent);
  if (Functions.isWindows()) {
    String script=loadContentFromResource("outsideWorkspaceStructure.bat");
    p.getBuildersList().add(new BatchFile(script));
  }
 else {
    String script=loadContentFromResource("outsideWorkspaceStructure.sh");
    p.getBuildersList().add(new Shell(script));
  }
  assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());
  JenkinsRule.WebClient wc=j.createWebClient();
  wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
{
    Page page=wc.goTo(p.getUrl() + "ws/**/goal.txt",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    String workspaceContent=page.getWebResponse().getContentAsString();
    assertThat(workspaceContent,allOf(not(containsString("public1.key")),not(containsString("public2.key")),not(containsString("to_secrets")),not(containsString("to_secrets2")),not(containsString("to_secrets3"))));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/**/public*.key",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    String workspaceContent=page.getWebResponse().getContentAsString();
    assertThat(workspaceContent,allOf(containsString("public1.key"),containsString("public2.key"),not(containsString("otherFolder")),not(containsString("to_secrets")),not(containsString("to_secrets2")),not(containsString("to_secrets3"))));
  }
}
