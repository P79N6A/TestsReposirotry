@Test @Issue("SECURITY-904") public void symlink_insideWorkspace_areStillAllowed() throws Exception {
  FreeStyleProject p=j.createFreeStyleProject();
  assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());
  File jobWorkspaceFolder=new File(new File(j.jenkins.getRootDir(),"workspace"),p.name);
  File folderInsideWorkspace=new File(jobWorkspaceFolder,"asset");
  folderInsideWorkspace.mkdir();
  File fileTarget=new File(folderInsideWorkspace,"goal.txt");
  String publicContent="not-secret";
  FileUtils.write(fileTarget,publicContent);
  if (Functions.isWindows()) {
    String script=loadContentFromResource("insideWorkspaceStructure.bat");
    p.getBuildersList().add(new BatchFile(script));
  }
 else {
    String script=loadContentFromResource("insideWorkspaceStructure.sh");
    p.getBuildersList().add(new Shell(script));
  }
  assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());
  JenkinsRule.WebClient wc=j.createWebClient();
  wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
{
    Page page=wc.goTo(p.getUrl() + "ws/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    String workspaceContent=page.getWebResponse().getContentAsString();
    assertThat(workspaceContent,allOf(containsString("asset"),containsString("to_internal1"),containsString("to_internal_goal1"),containsString("intermediateFolder"),not(containsString("to_internal2")),not(containsString("to_internal_goal2"))));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/to_internal1/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    String workspaceContent=page.getWebResponse().getContentAsString();
    assertThat(workspaceContent,containsString("goal.txt"));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/to_internal_goal1/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    String workspaceContent=page.getWebResponse().getContentAsString();
    assertThat(workspaceContent,containsString(publicContent));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_internal2/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    String workspaceContent=page.getWebResponse().getContentAsString();
    assertThat(workspaceContent,containsString("goal.txt"));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_internal_goal2/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    String workspaceContent=page.getWebResponse().getContentAsString();
    assertThat(workspaceContent,containsString(publicContent));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/asset/goal.txt/",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    String workspaceContent=page.getWebResponse().getContentAsString();
    assertThat(workspaceContent,containsString(publicContent));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/*zip*/ws.zip",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/*zip*/intermediateFolder.zip",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
  }
{
    Page page=wc.goTo(p.getUrl() + "ws/asset/*zip*/asset.zip",null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
  }
}
