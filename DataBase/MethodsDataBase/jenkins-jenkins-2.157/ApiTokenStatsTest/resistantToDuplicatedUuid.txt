@Test public void resistantToDuplicatedUuid() throws Exception {
  final String ID_1=UUID.randomUUID().toString();
  final String ID_2=UUID.randomUUID().toString();
  final String ID_3=UUID.randomUUID().toString();
{
    ApiTokenStats tokenStats=createFromFile(tmp.getRoot());
    tokenStats.updateUsageForId(ID_1);
    tokenStats.updateUsageForId(ID_1);
    tokenStats.updateUsageForId(ID_1);
    tokenStats.updateUsageForId(ID_1);
    tokenStats.updateUsageForId(ID_2);
    tokenStats.updateUsageForId(ID_3);
    tokenStats.updateUsageForId(ID_2);
  }
{
    XmlFile statsFile=ApiTokenStats.getConfigFile(tmp.getRoot());
    String content=FileUtils.readFileToString(statsFile.getFile());
    String newContentWithDuplicatedId=content.replace(ID_1,ID_2).replace(ID_3,ID_2);
    FileUtils.write(statsFile.getFile(),newContentWithDuplicatedId);
  }
{
    ApiTokenStats tokenStats=createFromFile(tmp.getRoot());
    assertNotNull(tokenStats);
    ApiTokenStats.SingleTokenStats stats_1=tokenStats.findTokenStatsById(ID_1);
    assertEquals(0,stats_1.getUseCounter());
    ApiTokenStats.SingleTokenStats stats_2=tokenStats.findTokenStatsById(ID_2);
    assertEquals(2,stats_2.getUseCounter());
    ApiTokenStats.SingleTokenStats stats_3=tokenStats.findTokenStatsById(ID_3);
    assertEquals(0,stats_3.getUseCounter());
  }
}
