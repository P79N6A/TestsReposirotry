@Test @Issue("JENKINS-28446") public void computeQueueLength() throws Exception {
  final Queue queue=j.jenkins.getQueue();
  assertEquals("Queue must be empty when the test starts",0,queue.getBuildableItems().size());
  assertEquals("Statistics must return 0 when the test starts",0,unlabeledLoad.computeQueueLength());
  j.jenkins.setNumExecutors(0);
  DumbSlave slave=j.createOnlineSlave(new LabelAtom("testLabel"));
  slave.setMode(Node.Mode.EXCLUSIVE);
  FreeStyleProject unlabeledProject=j.createFreeStyleProject("UnlabeledProject");
  unlabeledProject.setConcurrentBuild(true);
  FreeStyleProject labeledProject=j.createFreeStyleProject("LabeledProject");
  labeledProject.setAssignedLabel(new LabelAtom("foo"));
  unlabeledProject.scheduleBuild2(0,new ParametersAction(new StringParameterValue("FOO","BAR1")));
  queue.maintain();
  assertEquals("Unlabeled build must be taken into account",1,unlabeledLoad.computeQueueLength());
  unlabeledProject.scheduleBuild2(0,new ParametersAction(new StringParameterValue("FOO","BAR2")));
  queue.maintain();
  assertEquals("Second Unlabeled build must be taken into account",2,unlabeledLoad.computeQueueLength());
  labeledProject.scheduleBuild2(0);
  queue.maintain();
  assertEquals("Labeled builds must be ignored",2,unlabeledLoad.computeQueueLength());
  j.jenkins.setNumExecutors(1);
  j.buildAndAssertSuccess(unlabeledProject);
  queue.maintain();
  assertEquals("Queue must contain the labeled project build",1,queue.getBuildableItems().size());
  assertEquals("Statistics must return 0 after all builds",0,unlabeledLoad.computeQueueLength());
}
