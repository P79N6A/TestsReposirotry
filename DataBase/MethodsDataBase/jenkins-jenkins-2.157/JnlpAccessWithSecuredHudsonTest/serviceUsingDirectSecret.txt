@PresetData(DataSet.NO_ANONYMOUS_READACCESS) @SuppressWarnings("SleepWhileInLoop") @Test public void serviceUsingDirectSecret() throws Exception {
  Slave slave=createNewJnlpSlave("test");
  r.jenkins.setNodes(Collections.singletonList(slave));
  r.createWebClient().goTo("computer/test/slave-agent.jnlp?encrypt=true","application/octet-stream");
  String secret=slave.getComputer().getJnlpMac();
  File slaveJar=tmp.newFile();
  FileUtils.copyURLToFile(new Slave.JnlpJar("slave.jar").getURL(),slaveJar);
  Proc p=new hudson.Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().stdout(System.out).stderr(System.err).cmds(JavaEnvUtils.getJreExecutable("java"),"-jar",slaveJar.getAbsolutePath(),"-jnlpUrl",r.getURL() + "computer/test/slave-agent.jnlp","-secret",secret).start();
  try {
    while (!slave.toComputer().isOnline()) {
      Thread.sleep(100);
    }
    Channel channel=slave.getComputer().getChannel();
    assertFalse("SECURITY-206",channel.isRemoteClassLoadingAllowed());
    r.jenkins.getExtensionList(AdminWhitelistRule.class).get(AdminWhitelistRule.class).setMasterKillSwitch(false);
    final File f=new File(r.jenkins.getRootDir(),"config.xml");
    assertTrue(f.exists());
    try {
      fail("SECURITY-206: " + channel.call(new Attack(f.getAbsolutePath())));
    }
 catch (    Exception x) {
      assertThat(Functions.printThrowable(x),containsString("https://jenkins.io/redirect/security-144"));
    }
  }
  finally {
    p.kill();
  }
}
