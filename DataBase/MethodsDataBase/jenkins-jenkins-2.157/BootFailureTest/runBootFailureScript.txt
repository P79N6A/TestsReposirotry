@Test public void runBootFailureScript() throws Exception {
  final File home=tmpDir.newFolder();
  j.with(new HudsonHomeLoader(){
    @Override public File allocate() throws Exception {
      return home;
    }
  }
);
  FileUtils.write(new File(home,"boot-failure.groovy"),"hudson.util.BootFailureTest.problem = exception");
  File d=new File(home,"boot-failure.groovy.d");
  d.mkdirs();
  FileUtils.write(new File(d,"1.groovy"),"hudson.util.BootFailureTest.runRecord << '1'");
  FileUtils.write(new File(d,"2.groovy"),"hudson.util.BootFailureTest.runRecord << '2'");
  makeBootFail=true;
  assertNull(j.newHudson());
  assertEquals(1,bootFailures(home));
  problem=null;
  runRecord=new ArrayList<String>();
  assertNull(j.newHudson());
  assertEquals(2,bootFailures(home));
  assertEquals(Arrays.asList("1","2"),runRecord);
  assertEquals(SeriousError.class,problem.getCause().getClass());
  makeBootFail=false;
  assertNotNull(j.newHudson());
  assertFalse(BootFailure.getBootFailureFile(home).exists());
}
