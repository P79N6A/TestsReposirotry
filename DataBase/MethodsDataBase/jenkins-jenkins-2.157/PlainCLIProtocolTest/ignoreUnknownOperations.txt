@Test public void ignoreUnknownOperations() throws Exception {
  final PipedOutputStream upload=new PipedOutputStream();
  final PipedOutputStream download=new PipedOutputStream();
class Client extends PlainCLIProtocol.ClientSide {
    int code=-1;
    final ByteArrayOutputStream stdout=new ByteArrayOutputStream();
    Client() throws IOException {
      super(new PipedInputStream(download),upload);
    }
    @Override protected synchronized void onExit(    int code){
      this.code=code;
      notifyAll();
    }
    @Override protected void onStdout(    byte[] chunk) throws IOException {
      stdout.write(chunk);
    }
    @Override protected void onStderr(    byte[] chunk) throws IOException {
    }
    @Override protected void handleClose(){
    }
    void send() throws IOException {
      sendArg("command");
      sendStart();
      streamStdin().write("hello".getBytes());
    }
    void newop() throws IOException {
      dos.writeInt(0);
      dos.writeByte(99);
      dos.flush();
    }
  }
class Server extends PlainCLIProtocol.ServerSide {
    String arg;
    boolean started;
    final ByteArrayOutputStream stdin=new ByteArrayOutputStream();
    Server() throws IOException {
      super(new PipedInputStream(upload),download);
    }
    @Override protected void onArg(    String text){
      arg=text;
    }
    @Override protected void onLocale(    String text){
    }
    @Override protected void onEncoding(    String text){
    }
    @Override protected synchronized void onStart(){
      started=true;
      notifyAll();
    }
    @Override protected void onStdin(    byte[] chunk) throws IOException {
      stdin.write(chunk);
    }
    @Override protected void onEndStdin() throws IOException {
    }
    @Override protected void handleClose(){
    }
    void send() throws IOException {
      streamStdout().write("goodbye".getBytes());
      sendExit(2);
    }
    void newop() throws IOException {
      dos.writeInt(0);
      dos.writeByte(99);
      dos.flush();
    }
  }
  Client client=new Client();
  Server server=new Server();
  client.begin();
  server.begin();
  client.send();
  client.newop();
synchronized (server) {
    while (!server.started) {
      server.wait();
    }
  }
  server.newop();
  server.send();
synchronized (client) {
    while (client.code == -1) {
      client.wait();
    }
  }
  assertEquals("hello",server.stdin.toString());
  assertEquals("command",server.arg);
  assertEquals("goodbye",client.stdout.toString());
  assertEquals(2,client.code);
}
