@Test public void testSTABLEFilter() throws Exception {
  FreeStyleProject project=j.createFreeStyleProject("project");
  FreeStyleBuild successfulBuild=project.scheduleBuild2(0).get();
  project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.UNSTABLE)));
  FreeStyleBuild unstableBuild=project.scheduleBuild2(0).get();
  project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.FAILURE)));
  FreeStyleBuild failedBuild=project.scheduleBuild2(0).get();
  project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.NOT_BUILT)));
  FreeStyleBuild notBuiltBuild=project.scheduleBuild2(0).get();
  project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.ABORTED)));
  FreeStyleBuild abortedBuild=project.scheduleBuild2(0).get();
  FreeStyleProject paramProject=j.createFreeStyleProject("paramProject");
  ParametersDefinitionProperty pdp=new ParametersDefinitionProperty(new RunParameterDefinition("RUN",project.getName(),"run description",RunParameterFilter.STABLE));
  paramProject.addProperty(pdp);
  FreeStyleBuild build=paramProject.scheduleBuild2(0).get();
  assertEquals(Integer.toString(successfulBuild.getNumber()),build.getEnvironment(new LogTaskListener(LOGGER,Level.INFO)).get("RUN_NUMBER"));
}
