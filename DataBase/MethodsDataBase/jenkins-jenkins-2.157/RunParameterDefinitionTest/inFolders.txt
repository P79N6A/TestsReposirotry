@Issue("JENKINS-16462") @Test public void inFolders() throws Exception {
  MockFolder dir=j.createFolder("dir");
  MockFolder subdir=dir.createProject(MockFolder.class,"sub dir");
  FreeStyleProject p=subdir.createProject(FreeStyleProject.class,"some project");
  p.scheduleBuild2(0).get();
  FreeStyleBuild build2=p.scheduleBuild2(0).get();
  p.scheduleBuild2(0).get();
  String id=build2.getExternalizableId();
  assertEquals("dir/sub dir/some project#2",id);
  assertEquals(build2,Run.fromExternalizableId(id));
  RunParameterDefinition def=new RunParameterDefinition("build","dir/sub dir/some project","my build",null);
  assertEquals("dir/sub dir/some project",def.getProjectName());
  assertEquals(p,def.getProject());
  EnvVars env=new EnvVars();
  def.getDefaultParameterValue().buildEnvironment(null,env);
  assertEquals(j.jenkins.getRootUrl() + "job/dir/job/sub%20dir/job/some%20project/3/",env.get("build"));
  RunParameterValue val=def.createValue(id);
  assertEquals(build2,val.getRun());
  assertEquals("dir/sub dir/some project",val.getJobName());
  assertEquals("2",val.getNumber());
  val.buildEnvironment(null,env);
  assertEquals(j.jenkins.getRootUrl() + "job/dir/job/sub%20dir/job/some%20project/2/",env.get("build"));
  assertEquals("dir/sub dir/some project",env.get("build.jobName"));
  assertEquals("dir/sub dir/some project",env.get("build_JOBNAME"));
  assertEquals("2",env.get("build.number"));
  assertEquals("2",env.get("build_NUMBER"));
}
