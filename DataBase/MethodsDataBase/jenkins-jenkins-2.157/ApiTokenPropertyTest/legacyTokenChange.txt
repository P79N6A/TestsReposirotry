@Test @Issue("JENKINS-32776") public void legacyTokenChange() throws Exception {
  j.jenkins.setCrumbIssuer(null);
  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
  ApiTokenPropertyConfiguration config=ApiTokenPropertyConfiguration.get();
  config.setTokenGenerationOnCreationEnabled(true);
  User user=User.getById("user",true);
  WebClient wc=j.createWebClient();
  wc.withBasicCredentials("user","user");
  ApiTokenProperty apiTokenProperty=user.getProperty(ApiTokenProperty.class);
{
    String currentLegacyToken=apiTokenProperty.getApiToken();
    assertEquals(1,apiTokenProperty.getTokenList().size());
    config.setCreationOfLegacyTokenEnabled(true);
{
      changeLegacyToken(wc,"user",true);
      String newLegacyToken=apiTokenProperty.getApiToken();
      assertNotEquals(newLegacyToken,currentLegacyToken);
      apiTokenProperty.changeApiToken();
      String newLegacyToken2=apiTokenProperty.getApiToken();
      assertNotEquals(newLegacyToken2,newLegacyToken);
      assertNotEquals(newLegacyToken2,currentLegacyToken);
      currentLegacyToken=newLegacyToken2;
    }
    config.setCreationOfLegacyTokenEnabled(false);
{
      changeLegacyToken(wc,"user",true);
      String newLegacyToken=apiTokenProperty.getApiToken();
      assertNotEquals(newLegacyToken,currentLegacyToken);
      apiTokenProperty.changeApiToken();
      String newLegacyToken2=apiTokenProperty.getApiToken();
      assertNotEquals(newLegacyToken2,newLegacyToken);
      assertNotEquals(newLegacyToken2,currentLegacyToken);
    }
  }
{
    revokeAllToken(wc,user);
    checkCombinationWithConfigAndMethodForLegacyTokenCreation(config,wc,user);
  }
{
    generateNewToken(wc,"user","New token");
    checkCombinationWithConfigAndMethodForLegacyTokenCreation(config,wc,user);
  }
}
