@Issue("JENKINS-17030") @Test public void testBreakableString(){
  assertBrokenAs("Hello world!","Hello world!");
  assertBrokenAs("Hello-world!","Hello","-world!");
  assertBrokenAs("ALongStringThatCanNotBeBrokenByDefaultAndNeedsToUseTheBreakableElement","ALongStringThatCanNo","tBeBrokenByDefaultAn","dNeedsToUseTheBreaka","bleElement");
  assertBrokenAs("DontBreakShortStringBefore-Hyphen","DontBreakShortStringBefore","-Hyphen");
  assertBrokenAs("jenkins_main_trunk","jenkins","_main","_trunk");
  assertBrokenAs("&lt;&lt;&lt;&lt;&lt;","","&lt;","&lt;","&lt;","&lt;","&lt;");
  assertBrokenAs("&amp;&amp;&amp;&amp;&amp;","","&amp;","&amp;","&amp;","&amp;","&amp;");
  assertBrokenAs("&thetasym;&thetasym;&thetasym;","","&thetasym;","&thetasym;","&thetasym;");
  assertBrokenAs("Crazy &lt;ha ha&gt;","Crazy ","&lt;ha ha","&gt;");
  assertBrokenAs("A;String>Full]Of)Weird}Punctuation","A;String",">Full","]Of",")Weird","}Punctuation");
  assertBrokenAs("&lt;&lt;a&lt;bc&lt;def&lt;ghi&lt;","","&lt;","&lt;a","&lt;bc","&lt;def","&lt;ghi","&lt;");
  assertBrokenAs("H,e.l/l:o=w_o+|d","H",",e",".l","/l",":o","=w","_o","+|d");
  assertBrokenAs("a¶‱ﻷa¶‱ﻷa¶‱ﻷa¶‱ﻷa¶‱ﻷa¶‱ﻷa¶‱ﻷa¶‱ﻷ","a¶‱ﻷa¶‱ﻷa¶‱ﻷa¶‱ﻷa¶‱ﻷ","a¶‱ﻷa¶‱ﻷa¶‱ﻷ");
  assertNull(Functions.breakableString(null));
}
