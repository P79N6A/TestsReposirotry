@Issue("JENKINS-22767") @Test public void slowRetrieve() throws Exception {
  for (int i=1; i <= 3; i++) {
    slowBuilder.add(i);
    slowBuilderStartSemaphores.put(i,new Semaphore(0));
    slowBuilderEndSemaphores.put(i,new Semaphore(0));
    slowBuilderLoadCount.put(i,new AtomicInteger());
  }
  final FakeMap m=slowBuilder.make();
  Future<Build> firstLoad=Timer.get().submit(new Callable<Build>(){
    @Override public Build call() throws Exception {
      return m.getByNumber(2);
    }
  }
);
  Future<Build> secondLoad=Timer.get().submit(new Callable<Build>(){
    @Override public Build call() throws Exception {
      return m.getByNumber(2);
    }
  }
);
  slowBuilderStartSemaphores.get(2).acquire(1);
  slowBuilderEndSemaphores.get(2).release(2);
  Build first=firstLoad.get();
  Build second=secondLoad.get();
  assertEquals(1,slowBuilderLoadCount.get(2).get());
  assertSame(second,first);
}
