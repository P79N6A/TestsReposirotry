@Test public void testHasPermission() throws IOException {
  GlobalMatrixAuthorizationStrategy auth=new GlobalMatrixAuthorizationStrategy();
  j.jenkins.setAuthorizationStrategy(auth);
  j.jenkins.setCrumbIssuer(null);
  HudsonPrivateSecurityRealm realm=new HudsonPrivateSecurityRealm(false);
  j.jenkins.setSecurityRealm(realm);
  User user=realm.createAccount("John Smith","password");
  User user2=realm.createAccount("John Smith2","password");
  SecurityContextHolder.getContext().setAuthentication(user.impersonate());
  assertFalse("Current user should not have permission read.",user2.hasPermission(Permission.READ));
  assertTrue("Current user should always have permission read to himself.",user.hasPermission(Permission.READ));
  auth.add(Jenkins.ADMINISTER,user.getId());
  assertTrue("Current user should have permission read, because he has permission administer.",user2.hasPermission(Permission.READ));
  SecurityContextHolder.getContext().setAuthentication(Jenkins.ANONYMOUS);
  user2=User.get("anonymous");
  assertFalse("Current user should not have permission read, because does not have global permission read and authentication is anonymous.",user2.hasPermission(Permission.READ));
}
