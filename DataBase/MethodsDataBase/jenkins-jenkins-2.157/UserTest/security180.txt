@Test public void security180() throws Exception {
  ApiTokenTestHelper.enableLegacyBehavior();
  final GlobalMatrixAuthorizationStrategy auth=new GlobalMatrixAuthorizationStrategy();
  j.jenkins.setAuthorizationStrategy(auth);
  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
  User alice=User.get("alice");
  User bob=User.get("bob");
  User admin=User.get("admin");
  auth.add(Jenkins.READ,alice.getId());
  auth.add(Jenkins.READ,bob.getId());
  auth.add(Jenkins.ADMINISTER,admin.getId());
  SecurityContextHolder.getContext().setAuthentication(admin.impersonate());
  admin.getProperty(ApiTokenProperty.class).changeApiToken();
  alice.getProperty(ApiTokenProperty.class).changeApiToken();
  SecurityContextHolder.getContext().setAuthentication(bob.impersonate());
  bob.getProperty(ApiTokenProperty.class).changeApiToken();
  try {
    alice.getProperty(ApiTokenProperty.class).changeApiToken();
    fail("Bob should not be authorized to change alice's token");
  }
 catch (  AccessDeniedException expected) {
  }
  SecurityContextHolder.getContext().setAuthentication(Jenkins.ANONYMOUS);
  try {
    alice.getProperty(ApiTokenProperty.class).changeApiToken();
    fail("Anonymous should not be authorized to change alice's token");
  }
 catch (  AccessDeniedException expected) {
  }
}
