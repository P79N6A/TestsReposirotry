@Test public void testDoConfigSubmit() throws Exception {
  GlobalMatrixAuthorizationStrategy auth=new GlobalMatrixAuthorizationStrategy();
  j.jenkins.setAuthorizationStrategy(auth);
  j.jenkins.setCrumbIssuer(null);
  HudsonPrivateSecurityRealm realm=new HudsonPrivateSecurityRealm(false);
  j.jenkins.setSecurityRealm(realm);
  User user=realm.createAccount("John Smith","password");
  User user2=realm.createAccount("John Smith2","password");
  user2.save();
  auth.add(Jenkins.ADMINISTER,user.getId());
  auth.add(Jenkins.READ,user2.getId());
  SecurityContextHolder.getContext().setAuthentication(user.impersonate());
  HtmlForm form=j.createWebClient().withBasicCredentials(user.getId(),"password").goTo(user2.getUrl() + "/configure").getFormByName("config");
  form.getInputByName("_.fullName").setValueAttribute("Alice Smith");
  j.submit(form);
  assertEquals("User should have full name Alice Smith.","Alice Smith",user2.getFullName());
  SecurityContextHolder.getContext().setAuthentication(user2.impersonate());
  try {
    user.doConfigSubmit(null,null);
    fail("User should not have permission to configure another user.");
  }
 catch (  Exception e) {
    if (!(e.getClass().isAssignableFrom(AccessDeniedException2.class))) {
      fail("AccessDeniedException should be thrown.");
    }
  }
  form=j.createWebClient().withBasicCredentials(user2.getId(),"password").goTo(user2.getUrl() + "/configure").getFormByName("config");
  form.getInputByName("_.fullName").setValueAttribute("John");
  j.submit(form);
  assertEquals("User should be albe to configure himself.","John",user2.getFullName());
}
