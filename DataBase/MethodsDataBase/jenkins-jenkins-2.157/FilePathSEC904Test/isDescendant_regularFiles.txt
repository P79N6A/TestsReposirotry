@Test @Issue("SECURITY-904") public void isDescendant_regularFiles() throws IOException, InterruptedException {
  FilePath rootFolder=new FilePath(temp.newFolder("root"));
  FilePath workspaceFolder=rootFolder.child("workspace");
  FilePath subFolder=workspaceFolder.child("sub");
  FilePath protectedFolder=rootFolder.child("protected");
  FilePath regularFile=workspaceFolder.child("regular.txt");
  regularFile.write("regular-file",StandardCharsets.UTF_8.name());
  FilePath subRegularFile=subFolder.child("sub-regular.txt");
  subRegularFile.write("sub-regular-file",StandardCharsets.UTF_8.name());
  FilePath secretFile=protectedFolder.child("secret.txt");
  secretFile.write("secrets",StandardCharsets.UTF_8.name());
  assertTrue(workspaceFolder.isDescendant("."));
  assertTrue(workspaceFolder.isDescendant("regular.txt"));
  assertTrue(workspaceFolder.isDescendant("./regular.txt"));
  assertTrue(workspaceFolder.isDescendant("sub/sub-regular.txt"));
  assertTrue(workspaceFolder.isDescendant("sub//sub-regular.txt"));
  assertTrue(workspaceFolder.isDescendant("sub/../sub/sub-regular.txt"));
  assertTrue(workspaceFolder.isDescendant("./sub/../sub/sub-regular.txt"));
  assertTrue(workspaceFolder.isDescendant("nonexistent.txt"));
  assertTrue(workspaceFolder.isDescendant("sub/nonexistent.txt"));
  assertTrue(workspaceFolder.isDescendant("nonexistent/nonexistent.txt"));
  assertFalse(workspaceFolder.isDescendant("../protected/nonexistent.txt"));
  assertFalse(workspaceFolder.isDescendant("../nonexistent/nonexistent.txt"));
  assertFalse(workspaceFolder.isDescendant("./../workspace"));
  assertFalse(workspaceFolder.isDescendant("./../workspace/"));
  assertFalse(workspaceFolder.isDescendant("./../workspace/regular.txt"));
  assertFalse(workspaceFolder.isDescendant("../workspace/regular.txt"));
  assertFalse(workspaceFolder.isDescendant("./../../root/workspace/regular.txt"));
  assertFalse(workspaceFolder.isDescendant("../protected/secret.txt"));
  assertFalse(workspaceFolder.isDescendant("./../protected/secret.txt"));
}
