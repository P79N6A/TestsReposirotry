@Test public void checkRenamePermissions() throws Exception {
  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
  MockAuthorizationStrategy mas=new MockAuthorizationStrategy();
  mas.grant(Item.CONFIGURE).everywhere().to("alice","bob");
  mas.grant(Item.READ).everywhere().to("alice");
  j.jenkins.setAuthorizationStrategy(mas);
  FreeStyleProject p=j.createFreeStyleProject("foo");
  j.createFreeStyleProject("foo-exists");
  try (ACLContext unused=ACL.as(User.getById("alice",true))){
    assertThat(checkNameAndReturnError(p,"foo-exists"),equalTo(Messages.AbstractItem_NewNameInUse("foo-exists")));
  }
   try (ACLContext unused=ACL.as(User.getById("bob",true))){
    assertThat(checkNameAndReturnError(p,"foo-exists"),equalTo(Messages.Jenkins_NotAllowedName("foo-exists")));
  }
   try (ACLContext unused=ACL.as(User.getById("carol",true))){
    try {
      p.doCheckNewName("foo");
      fail("Expecting AccessDeniedException");
    }
 catch (    AccessDeniedException2 e) {
      assertThat(e.permission,equalTo(Item.CREATE));
    }
  }
 }
