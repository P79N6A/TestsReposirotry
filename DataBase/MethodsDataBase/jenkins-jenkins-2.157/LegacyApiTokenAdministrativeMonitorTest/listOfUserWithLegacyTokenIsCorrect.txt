@Test public void listOfUserWithLegacyTokenIsCorrect() throws Exception {
  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
  ApiTokenPropertyConfiguration config=ApiTokenPropertyConfiguration.get();
  config.setCreationOfLegacyTokenEnabled(true);
  config.setTokenGenerationOnCreationEnabled(false);
  LegacyApiTokenAdministrativeMonitor monitor=j.jenkins.getExtensionList(AdministrativeMonitor.class).get(LegacyApiTokenAdministrativeMonitor.class);
  JenkinsRule.WebClient wc=j.createWebClient();
  int numToken=0;
  int numFreshToken=0;
  int numRecentToken=0;
{
    checkUserWithLegacyTokenListIsEmpty(wc,monitor);
  }
{
    User user=User.getById("user",true);
    ApiTokenProperty apiTokenProperty=user.getProperty(ApiTokenProperty.class);
    assertFalse(apiTokenProperty.hasLegacyToken());
    checkUserWithLegacyTokenListIsEmpty(wc,monitor);
  }
{
    User user=User.getById("user",true);
    ApiTokenProperty apiTokenProperty=user.getProperty(ApiTokenProperty.class);
    assertFalse(apiTokenProperty.hasLegacyToken());
    apiTokenProperty.getTokenStore().generateNewToken("Not legacy");
    checkUserWithLegacyTokenListIsEmpty(wc,monitor);
    checkUserWithLegacyTokenListHasSizeOf(wc,monitor,numToken,numFreshToken,numRecentToken);
  }
{
    createUserWithToken(true,false,false);
    numToken++;
    checkUserWithLegacyTokenListHasSizeOf(wc,monitor,numToken,numFreshToken,numRecentToken);
  }
{
    createUserWithToken(true,true,false);
    numToken++;
    numFreshToken++;
    checkUserWithLegacyTokenListHasSizeOf(wc,monitor,numToken,numFreshToken,numRecentToken);
  }
{
    createUserWithToken(true,false,true);
    numToken++;
    numRecentToken++;
    checkUserWithLegacyTokenListHasSizeOf(wc,monitor,numToken,numFreshToken,numRecentToken);
  }
{
    createUserWithToken(true,true,true);
    numToken++;
    numFreshToken++;
    numRecentToken++;
    checkUserWithLegacyTokenListHasSizeOf(wc,monitor,numToken,numFreshToken,numRecentToken);
  }
}
