@Issue("JENKINS-28926") @Test public void upstreamDownstreamCycle() throws Exception {
  FreeStyleProject trigger=r.createFreeStyleProject();
  FreeStyleProject chain1=r.createFreeStyleProject();
  FreeStyleProject chain2a=r.createFreeStyleProject();
  FreeStyleProject chain2b=r.createFreeStyleProject();
  FreeStyleProject chain3=r.createFreeStyleProject();
  trigger.getPublishersList().add(new BuildTrigger(String.format("%s, %s, %s, %s",chain1.getName(),chain2a.getName(),chain2b.getName(),chain3.getName()),true));
  trigger.setQuietPeriod(0);
  chain1.setQuietPeriod(1);
  chain2a.setQuietPeriod(1);
  chain2b.setQuietPeriod(1);
  chain3.setQuietPeriod(1);
  chain1.getPublishersList().add(new BuildTrigger(String.format("%s, %s",chain2a.getName(),chain2b.getName()),true));
  chain2a.getPublishersList().add(new BuildTrigger(chain3.getName(),true));
  chain2b.getPublishersList().add(new BuildTrigger(chain3.getName(),true));
  chain1.setBlockBuildWhenDownstreamBuilding(true);
  chain2a.setBlockBuildWhenDownstreamBuilding(true);
  chain2b.setBlockBuildWhenDownstreamBuilding(true);
  chain3.setBlockBuildWhenUpstreamBuilding(true);
  r.jenkins.rebuildDependencyGraph();
  r.buildAndAssertSuccess(trigger);
  r.waitUntilNoActivity();
  final Queue queue=r.getInstance().getQueue();
  assertThat("The cycle should have been defanged and chain1 executed",queue.getItem(chain1),nullValue());
  assertThat("The cycle should have been defanged and chain2a executed",queue.getItem(chain2a),nullValue());
  assertThat("The cycle should have been defanged and chain2b executed",queue.getItem(chain2b),nullValue());
  assertThat("The cycle should have been defanged and chain3 executed",queue.getItem(chain3),nullValue());
}
