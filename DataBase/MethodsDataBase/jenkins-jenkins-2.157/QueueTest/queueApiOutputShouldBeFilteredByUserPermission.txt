@Issue({"SECURITY-186","SECURITY-618"}) @Test public void queueApiOutputShouldBeFilteredByUserPermission() throws Exception {
  ApiTokenTestHelper.enableLegacyBehavior();
  r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
  ProjectMatrixAuthorizationStrategy str=new ProjectMatrixAuthorizationStrategy();
  str.add(Jenkins.READ,"bob");
  str.add(Jenkins.READ,"alice");
  str.add(Jenkins.READ,"james");
  r.jenkins.setAuthorizationStrategy(str);
  FreeStyleProject project=r.createFreeStyleProject("project");
  Map<Permission,Set<String>> permissions=new HashMap<Permission,Set<String>>();
  permissions.put(Item.READ,Collections.singleton("bob"));
  permissions.put(Item.DISCOVER,Collections.singleton("james"));
  AuthorizationMatrixProperty prop1=new AuthorizationMatrixProperty(permissions);
  project.addProperty(prop1);
  project.getBuildersList().add(new SleepBuilder(10));
  project.scheduleBuild2(0);
  User alice=User.getById("alice",true);
  User bob=User.getById("bob",true);
  User james=User.getById("james",true);
  JenkinsRule.WebClient webClient=r.createWebClient();
  webClient.withBasicApiToken(bob);
  XmlPage p=webClient.goToXml("queue/api/xml");
  for (  DomNode element : p.getFirstChild().getFirstChild().getChildNodes()) {
    if (element.getNodeName().equals("task")) {
      for (      DomNode child : ((DomElement)element).getChildNodes()) {
        if (child.getNodeName().equals("name")) {
          assertEquals(child.asText(),"project");
        }
 else         if (child.getNodeName().equals("url")) {
          assertNotNull(child.asText());
        }
      }
    }
  }
  webClient=r.createWebClient();
  webClient.withBasicApiToken(alice);
  XmlPage p2=webClient.goToXml("queue/api/xml");
  assertTrue(p2.getByXPath("/queue/node()").isEmpty());
  webClient=r.createWebClient();
  webClient.withBasicApiToken(james);
  XmlPage p3=webClient.goToXml("queue/api/xml");
  List projects=p3.getByXPath("/queue/discoverableItem/task/name/text()");
  assertEquals(1,projects.size());
  assertEquals("project",projects.get(0).toString());
  String url=project.getQueueItem().getUrl() + "api/xml";
  r.createWebClient().withBasicApiToken(bob).goToXml(url);
  r.createWebClient().withBasicApiToken(james).assertFails(url,HttpURLConnection.HTTP_FORBIDDEN);
  r.createWebClient().withBasicApiToken(alice).assertFails(url,HttpURLConnection.HTTP_NOT_FOUND);
}
