@Test public void pendingsConsistenceAfterErrorDuringMaintain() throws IOException, ExecutionException, InterruptedException {
  FreeStyleProject project1=r.createFreeStyleProject();
  FreeStyleProject project2=r.createFreeStyleProject();
  TopLevelItemDescriptor descriptor=new TopLevelItemDescriptor(FreeStyleProject.class){
    @Override public FreeStyleProject newInstance(    ItemGroup parent,    String name){
      return (FreeStyleProject)new FreeStyleProject(parent,name){
        @Override public Label getAssignedLabel(){
          throw new IllegalArgumentException("Test exception");
        }
        @Override public void save(){
        }
      }
;
    }
  }
;
  FreeStyleProject projectError=(FreeStyleProject)r.jenkins.createProject(descriptor,"throw-error");
  project1.setAssignedLabel(r.jenkins.getSelfLabel());
  project2.setAssignedLabel(r.jenkins.getSelfLabel());
  project1.getBuildersList().add(new Shell("sleep 2"));
  project1.scheduleBuild2(0);
  QueueTaskFuture<FreeStyleBuild> v=project2.scheduleBuild2(0);
  projectError.scheduleBuild2(0);
  Executor e=r.jenkins.toComputer().getExecutors().get(0);
  Thread.sleep(2000);
  while (project2.getLastBuild() == null) {
    if (!e.isAlive()) {
      break;
    }
    if (e.isIdle()) {
      assertTrue("Node went to idle before project had" + project2.getDisplayName() + " been started",v.isDone());
    }
    Thread.sleep(1000);
  }
  if (project2.getLastBuild() != null)   return;
  Queue.getInstance().cancel(projectError);
  while (!e.isIdle()) {
    Thread.sleep(1000);
  }
  List<Queue.BuildableItem> items=Queue.getInstance().getPendingItems();
  for (  Queue.BuildableItem item : items) {
    assertFalse("Project " + project2.getDisplayName() + " stuck in pendings",item.task.getName().equals(project2.getName()));
  }
}
