/** 
 * Make sure that the slave assignment honors the permissions. We do this test by letting a build run twice to determine its natural home, and then introduce a security restriction to prohibit that.
 */
@Test public void permissionSensitiveSlaveAllocations() throws Exception {
  r.jenkins.setNumExecutors(0);
  DumbSlave s1=r.createSlave();
  DumbSlave s2=r.createSlave();
  FreeStyleProject p=r.createFreeStyleProject();
  QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap(p.getFullName(),alice)));
  p.getBuildersList().add(new TestBuilder(){
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      assertEquals(alice,Jenkins.getAuthentication());
      return true;
    }
  }
);
  final FreeStyleBuild b1=r.assertBuildStatusSuccess(p.scheduleBuild2(0));
  final FreeStyleBuild b2=r.assertBuildStatusSuccess(p.scheduleBuild2(0));
  r.jenkins.setAuthorizationStrategy(new AliceCannotBuild(b1.getBuiltOnStr()));
  for (int i=0; i < 3; i++) {
    FreeStyleBuild b3=r.assertBuildStatusSuccess(p.scheduleBuild2(0));
    assertNotSame(b3.getBuiltOnStr(),b1.getBuiltOnStr());
  }
}
