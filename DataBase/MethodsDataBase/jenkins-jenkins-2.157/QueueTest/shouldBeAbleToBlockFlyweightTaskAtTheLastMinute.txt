@Ignore("TODO too flaky; upstream can finish before we even examine the queue") @Issue("JENKINS-30084") @Test public void shouldBeAbleToBlockFlyweightTaskAtTheLastMinute() throws Exception {
  MatrixProject matrixProject=r.jenkins.createProject(MatrixProject.class,"downstream");
  matrixProject.setDisplayName("downstream");
  matrixProject.setAxes(new AxisList(new Axis("axis","a","b")));
  Label label=LabelExpression.get("aws-linux-dummy");
  DummyCloudImpl dummyCloud=new DummyCloudImpl(r,0);
  dummyCloud.label=label;
  BlockDownstreamProjectExecution property=new BlockDownstreamProjectExecution();
  dummyCloud.getNodeProperties().add(property);
  r.jenkins.clouds.add(dummyCloud);
  matrixProject.setAssignedLabel(label);
  FreeStyleProject upstreamProject=r.createFreeStyleProject("upstream");
  upstreamProject.getBuildersList().add(new SleepBuilder(10000));
  upstreamProject.setDisplayName("upstream");
  matrixProject.addTrigger(new ReverseBuildTrigger("upstream",Result.SUCCESS));
  matrixProject.setBlockBuildWhenUpstreamBuilding(true);
  QueueTaskFuture downstream=matrixProject.scheduleBuild2(0);
  if (downstream == null) {
    throw new Exception("the flyweight task could not be scheduled, thus the test will be interrupted");
  }
  while (Queue.getInstance().getBuildableItems().size() != 1) {
    Thread.sleep(10);
  }
  assertFalse(Queue.getInstance().getItems()[0].isBlocked());
  QueueTaskFuture upstream=upstreamProject.scheduleBuild2(0);
  if (upstream == null) {
    throw new Exception("the upstream task could not be scheduled, thus the test will be interrupted");
  }
  Thread.sleep(1000);
  boolean enteredTheQueue=false;
  while (!enteredTheQueue) {
    for (    Queue.BuildableItem item : Queue.getInstance().getBuildableItems()) {
      if (item.task.getDisplayName() != null && item.task.getDisplayName().equals(upstreamProject.getDisplayName())) {
        enteredTheQueue=true;
      }
    }
    Thread.sleep(10);
  }
  while (!Queue.getInstance().getBuildableItems().isEmpty()) {
    Thread.sleep(10);
  }
  assertTrue(Queue.getInstance().getItems()[0].isBlocked());
  assertTrue(Queue.getInstance().getBlockedItems().get(0).task.getDisplayName().equals(matrixProject.displayName));
  r.assertBuildStatusSuccess(upstream);
  while (Queue.getInstance().getBuildableItems().isEmpty()) {
    Thread.sleep(10);
  }
  assertFalse(Queue.getInstance().getItems()[0].isBlocked());
  assertTrue(Queue.getInstance().getBlockedItems().isEmpty());
  assertTrue(Queue.getInstance().getBuildableItems().get(0).task.getDisplayName().equals(matrixProject.displayName));
}
