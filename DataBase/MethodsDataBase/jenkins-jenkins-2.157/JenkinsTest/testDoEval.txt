@Test public void testDoEval() throws Exception {
  ApiTokenTestHelper.enableLegacyBehavior();
  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
  j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to("alice").grant(Jenkins.READ).everywhere().to("bob").grantWithoutImplication(Jenkins.ADMINISTER,Jenkins.READ).everywhere().to("charlie"));
  WebClient wc=j.createWebClient();
  wc.withBasicApiToken(User.getById("alice",true));
  wc.assertFails("eval",HttpURLConnection.HTTP_BAD_METHOD);
  assertEquals("3",eval(wc));
  wc.withBasicApiToken(User.getById("bob",true));
  try {
    eval(wc);
    fail("bob has only READ");
  }
 catch (  FailingHttpStatusCodeException e) {
    assertEquals(HttpURLConnection.HTTP_FORBIDDEN,e.getStatusCode());
  }
  wc.withBasicApiToken(User.getById("charlie",true));
  try {
    eval(wc);
    fail("charlie has ADMINISTER but not RUN_SCRIPTS");
  }
 catch (  FailingHttpStatusCodeException e) {
    assertEquals(HttpURLConnection.HTTP_FORBIDDEN,e.getStatusCode());
  }
}
