@Test public void culprits() throws Exception {
  FreeStyleProject p=j.createFreeStyleProject();
  FakeChangeLogSCM scm=new FakeChangeLogSCM();
  p.setScm(scm);
  LogRotatorTest.StallBuilder sync=new LogRotatorTest.StallBuilder();
  scm.addChange().withAuthor("alice");
  FreeStyleBuild b=j.buildAndAssertSuccess(p);
  assertCulprits(b,"alice");
  scm.addChange().withAuthor("bob");
  p.getBuildersList().add(new FailureBuilder());
  b=j.assertBuildStatus(Result.FAILURE,p.scheduleBuild2(0).get());
  assertCulprits(b,"bob");
  p.getBuildersList().add(sync);
  scm.addChange().withAuthor("charlie");
  b=p.scheduleBuild2(0).waitForStart();
  sync.waitFor(b.getNumber(),1,TimeUnit.SECONDS);
  assertCulprits(b,"bob","charlie");
  sync.release(b.getNumber());
  j.assertBuildStatus(Result.FAILURE,j.waitForCompletion(b));
  assertCulprits(b,"bob","charlie");
  scm.addChange().withAuthor("dave");
  p.getBuildersList().replaceBy(Collections.singleton(new UnstableBuilder()));
  b=j.assertBuildStatus(Result.UNSTABLE,p.scheduleBuild2(0).get());
  assertCulprits(b,"bob","charlie","dave");
  scm.addChange().withAuthor("eve");
  b=j.assertBuildStatus(Result.UNSTABLE,p.scheduleBuild2(0).get());
  assertCulprits(b,"bob","charlie","dave","eve");
  scm.addChange().withAuthor("fred");
  p.getBuildersList().clear();
  b=j.buildAndAssertSuccess(p);
  assertCulprits(b,"bob","charlie","dave","eve","fred");
  scm.addChange().withAuthor("george");
  b=j.buildAndAssertSuccess(p);
  assertCulprits(b,"george");
}
