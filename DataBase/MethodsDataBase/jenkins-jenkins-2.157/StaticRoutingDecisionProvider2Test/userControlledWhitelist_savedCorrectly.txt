@Test public void userControlledWhitelist_savedCorrectly() throws Exception {
  File whitelistUserControlledList=new File(j.jenkins.getRootDir(),"stapler-whitelist.txt");
  assertFalse(whitelistUserControlledList.exists());
  StaticRoutingDecisionProvider wl=new StaticRoutingDecisionProvider();
  assertFalse(whitelistUserControlledList.exists());
  assertThat(wl.decide("nothing"),is(RoutingDecisionProvider.Decision.UNKNOWN));
  wl.save();
  assertTrue(whitelistUserControlledList.exists());
  assertThat(FileUtils.readFileToString(whitelistUserControlledList),is(""));
  wl.add("white-1");
  assertThat(wl.decide("white-1"),is(RoutingDecisionProvider.Decision.ACCEPTED));
  assertTrue(whitelistUserControlledList.exists());
  assertThat(FileUtils.readFileToString(whitelistUserControlledList),containsString("white-1"));
{
    StaticRoutingDecisionProvider temp=new StaticRoutingDecisionProvider();
    assertThat(temp.decide("white-1"),is(RoutingDecisionProvider.Decision.ACCEPTED));
  }
  wl.addBlacklistSignature("black-2");
  assertThat(wl.decide("white-1"),is(RoutingDecisionProvider.Decision.ACCEPTED));
  assertThat(wl.decide("black-2"),is(RoutingDecisionProvider.Decision.REJECTED));
  assertThat(FileUtils.readFileToString(whitelistUserControlledList),allOf(containsString("white-1"),containsString("!black-2")));
{
    StaticRoutingDecisionProvider temp=new StaticRoutingDecisionProvider();
    assertThat(temp.decide("white-1"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(temp.decide("black-2"),is(RoutingDecisionProvider.Decision.REJECTED));
  }
  wl.removeBlacklistSignature("black-2");
  assertThat(wl.decide("white-1"),is(RoutingDecisionProvider.Decision.ACCEPTED));
  assertThat(wl.decide("black-2"),is(RoutingDecisionProvider.Decision.UNKNOWN));
  assertThat(FileUtils.readFileToString(whitelistUserControlledList),allOf(containsString("white-1"),not(containsString("black-2"))));
{
    StaticRoutingDecisionProvider temp=new StaticRoutingDecisionProvider();
    assertThat(temp.decide("white-1"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(temp.decide("black-2"),is(RoutingDecisionProvider.Decision.UNKNOWN));
  }
  wl.remove("white-1");
  assertThat(wl.decide("white-1"),is(RoutingDecisionProvider.Decision.UNKNOWN));
  assertThat(wl.decide("black-2"),is(RoutingDecisionProvider.Decision.UNKNOWN));
  assertThat(FileUtils.readFileToString(whitelistUserControlledList),allOf(not(containsString("white-1")),not(containsString("black-2"))));
{
    StaticRoutingDecisionProvider temp=new StaticRoutingDecisionProvider();
    assertThat(temp.decide("white-1"),is(RoutingDecisionProvider.Decision.UNKNOWN));
    assertThat(temp.decide("black-2"),is(RoutingDecisionProvider.Decision.UNKNOWN));
  }
}
