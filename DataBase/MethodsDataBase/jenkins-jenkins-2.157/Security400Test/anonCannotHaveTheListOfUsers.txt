@Test public void anonCannotHaveTheListOfUsers() throws Exception {
  j.jenkins.setCrumbIssuer(null);
  FullControlOnceLoggedInAuthorizationStrategy authorizationStrategy=new FullControlOnceLoggedInAuthorizationStrategy();
  j.jenkins.setAuthorizationStrategy(authorizationStrategy);
  HudsonPrivateSecurityRealm securityRealm=new HudsonPrivateSecurityRealm(false,false,null);
  j.jenkins.setSecurityRealm(securityRealm);
  securityRealm.createAccount("admin","admin");
  securityRealm.createAccount("secretUser","secretUser");
{
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.login("admin");
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    Page page=wc.goTo("securityRealm");
    assertEquals(200,page.getWebResponse().getStatusCode());
    assertThat(page.getWebResponse().getContentAsString(),containsString("secretUser"));
    assertRequestWasNotBlocked();
  }
  authorizationStrategy.setAllowAnonymousRead(true);
{
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    wc.getOptions().setRedirectEnabled(false);
    Page page=wc.goTo("securityRealm/",null);
    checkPageIsRedirectedToLogin(page);
    assertThat(page.getWebResponse().getContentAsString(),not(containsString("secretUser")));
    assertRequestWasNotBlocked();
    page=wc.goTo("asynchPeople/",null);
    assertEquals(200,page.getWebResponse().getStatusCode());
    assertThat(page.getWebResponse().getContentAsString(),containsString("Includes all known"));
    assertRequestWasNotBlocked();
  }
  authorizationStrategy.setAllowAnonymousRead(false);
{
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    wc.getOptions().setRedirectEnabled(false);
    Page page=wc.goTo("securityRealm/",null);
    checkPageIsRedirectedToLogin(page);
    assertThat(page.getWebResponse().getContentAsString(),not(containsString("secretUser")));
    assertRequestWasNotBlocked();
    page=wc.goTo("asynchPeople/",null);
    checkPageIsRedirectedToLogin(page);
    assertThat(page.getWebResponse().getContentAsString(),not(containsString("secretUser")));
    assertRequestWasNotBlocked();
  }
}
