/** 
 * replacement of "computers/0/executors/0/contextClassLoader/context/handlers/0/sessionManager/stop" attack
 */
@Test @Issue("SECURITY-404") public void avoidDangerousAccessToSession() throws Exception {
  j.jenkins.setCrumbIssuer(null);
  j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
  j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to("admin").grant(Jenkins.READ).everywhere().to("user"));
  JenkinsRule.WebClient wc=j.createWebClient();
  wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
  wc.login("admin");
  JenkinsRule.WebClient wc2=j.createWebClient();
  wc2.getOptions().setThrowExceptionOnFailingStatusCode(false);
  wc2.login("user");
  Page page;
  page=wc.goTo("whoAmI/api/xml/",null);
  System.out.println(page.getWebResponse().getContentAsString());
  assertThat(page.getWebResponse().getContentAsString(),containsString("<anonymous>false</anonymous>"));
  page=wc2.goTo("whoAmI/api/xml/",null);
  System.out.println(page.getWebResponse().getContentAsString());
  assertThat(page.getWebResponse().getContentAsString(),containsString("<anonymous>false</anonymous>"));
  assertRequestWasNotBlocked();
  page=wc2.goTo("adjuncts/<randomString>/webApp/context/contextHandler/beans/0/beans/0/stop",null);
  assertEquals(403,page.getWebResponse().getStatusCode());
  page=wc.goTo("whoAmI/api/xml/",null);
  System.out.println(page.getWebResponse().getContentAsString());
  assertThat(page.getWebResponse().getContentAsString(),containsString("<anonymous>false</anonymous>"));
  page=wc2.goTo("whoAmI/api/xml/",null);
  System.out.println(page.getWebResponse().getContentAsString());
  assertThat(page.getWebResponse().getContentAsString(),containsString("<anonymous>false</anonymous>"));
  assertRequestWasNotBlocked();
}
