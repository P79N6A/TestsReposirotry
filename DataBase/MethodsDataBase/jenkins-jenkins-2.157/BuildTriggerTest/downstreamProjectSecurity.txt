/** 
 * @see ReverseBuildTriggerTest#upstreamProjectSecurity 
 */
@Test public void downstreamProjectSecurity() throws Exception {
  j.jenkins.setSecurityRealm(new LegacySecurityRealm());
  ProjectMatrixAuthorizationStrategy auth=new ProjectMatrixAuthorizationStrategy();
  auth.add(Jenkins.READ,"alice");
  auth.add(Computer.BUILD,"alice");
  auth.add(Computer.BUILD,"anonymous");
  j.jenkins.setAuthorizationStrategy(auth);
  final FreeStyleProject upstream=j.createFreeStyleProject("upstream");
  Authentication alice=User.get("alice").impersonate();
  QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap("upstream",alice)));
  Map<Permission,Set<String>> perms=new HashMap<Permission,Set<String>>();
  perms.put(Item.READ,Collections.singleton("alice"));
  perms.put(Item.CONFIGURE,Collections.singleton("alice"));
  upstream.addProperty(new AuthorizationMatrixProperty(perms));
  String downstreamName="d0wnstr3am";
  FreeStyleProject downstream=j.createFreeStyleProject(downstreamName);
  upstream.getPublishersList().add(new BuildTrigger(downstreamName,Result.SUCCESS));
  j.jenkins.rebuildDependencyGraph();
  assertEquals(Collections.singletonList(downstream),upstream.getDownstreamProjects());
  assertDoCheck(alice,Messages.BuildTrigger_NoSuchProject(downstreamName,"upstream"),upstream,downstreamName);
  assertDoCheck(alice,null,null,downstreamName);
  FreeStyleBuild b=j.buildAndAssertSuccess(upstream);
  j.assertLogNotContains(downstreamName,b);
  j.waitUntilNoActivity();
  assertNull(downstream.getLastBuild());
  Map<Permission,Set<String>> grantedPermissions=new HashMap<Permission,Set<String>>();
  grantedPermissions.put(Item.READ,Collections.singleton("alice"));
  AuthorizationMatrixProperty amp=new AuthorizationMatrixProperty(grantedPermissions);
  downstream.addProperty(amp);
  assertDoCheck(alice,Messages.BuildTrigger_you_have_no_permission_to_build_(downstreamName),upstream,downstreamName);
  assertDoCheck(alice,null,null,downstreamName);
  b=j.buildAndAssertSuccess(upstream);
  j.assertLogContains(downstreamName,b);
  j.waitUntilNoActivity();
  assertNull(downstream.getLastBuild());
  grantedPermissions.put(Item.BUILD,Collections.singleton("alice"));
  downstream.removeProperty(amp);
  amp=new AuthorizationMatrixProperty(grantedPermissions);
  downstream.addProperty(amp);
  assertDoCheck(alice,null,upstream,downstreamName);
  assertDoCheck(alice,null,null,downstreamName);
  b=j.buildAndAssertSuccess(upstream);
  j.assertLogContains(downstreamName,b);
  j.waitUntilNoActivity();
  FreeStyleBuild b2=downstream.getLastBuild();
  assertNotNull(b2);
  Cause.UpstreamCause cause=b2.getCause(Cause.UpstreamCause.class);
  assertNotNull(cause);
  assertEquals(b,cause.getUpstreamRun());
  QueueItemAuthenticatorConfiguration.get().getAuthenticators().replace(new MockQueueItemAuthenticator(Collections.singletonMap("upstream",Jenkins.ANONYMOUS)));
  assertDoCheck(alice,Messages.BuildTrigger_you_have_no_permission_to_build_(downstreamName),upstream,downstreamName);
  assertDoCheck(alice,null,null,downstreamName);
  b=j.buildAndAssertSuccess(upstream);
  j.assertLogNotContains(downstreamName,b);
  j.waitUntilNoActivity();
  assertEquals(1,downstream.getLastBuild().number);
  grantedPermissions.put(Item.READ,Collections.singleton("anonymous"));
  grantedPermissions.put(Item.BUILD,Collections.singleton("anonymous"));
  downstream.removeProperty(amp);
  amp=new AuthorizationMatrixProperty(grantedPermissions);
  downstream.addProperty(amp);
  assertDoCheck(alice,null,upstream,downstreamName);
  assertDoCheck(alice,null,null,downstreamName);
  b=j.buildAndAssertSuccess(upstream);
  j.assertLogContains(downstreamName,b);
  j.waitUntilNoActivity();
  assertEquals(2,downstream.getLastBuild().number);
  FreeStyleProject simple=j.createFreeStyleProject("simple");
  FreeStyleBuild b3=j.buildAndAssertSuccess(simple);
  grantedPermissions.clear();
  downstream.removeProperty(amp);
  amp=new AuthorizationMatrixProperty(grantedPermissions);
  downstream.addProperty(amp);
  QueueItemAuthenticatorConfiguration.get().getAuthenticators().clear();
  assertDoCheck(alice,Messages.BuildTrigger_NoSuchProject(downstreamName,"upstream"),upstream,downstreamName);
  assertDoCheck(alice,null,null,downstreamName);
  b=j.buildAndAssertSuccess(upstream);
  j.assertLogContains(downstreamName,b);
  j.waitUntilNoActivity();
  assertEquals(3,downstream.getLastBuild().number);
  b3=j.buildAndAssertSuccess(simple);
}
