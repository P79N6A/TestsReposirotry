@Test public void testReadBitsToByteArray(){
  byte[] result=new byte[TEST_DATA.length];
  testArray.readBits(result,0,6);
  assertThat(result[0]).isEqualTo((byte)(TEST_DATA[0] & 0xFC));
  testArray.readBits(result,0,8);
  assertThat(result[0]).isEqualTo((byte)(((TEST_DATA[0] & 0x03) << 6) | ((TEST_DATA[1] & 0xFC) >> 2)));
  testArray.readBits(result,1,50);
  for (int i=1; i < 7; i++) {
    assertThat(result[i]).isEqualTo((byte)(((TEST_DATA[i] & 0x03) << 6) | ((TEST_DATA[i + 1] & 0xFC) >> 2)));
  }
  assertThat(result[7]).isEqualTo((byte)((TEST_DATA[7] & 0x03) << 6));
  assertThat(testArray.bitsLeft()).isEqualTo(0);
  testArray.setPosition(31);
  result[3]=0;
  testArray.readBits(result,3,3);
  assertThat(result[3]).isEqualTo((byte)0xE0);
  result[0]=0;
  assertThat(testArray.getPosition()).isEqualTo(34);
  testArray.readBits(result,0,3);
  assertThat(result[0]).isEqualTo((byte)0xE0);
  testArray.setPosition(32);
  result[1]=0;
  testArray.readBits(result,1,0);
  assertThat(result[1]).isEqualTo((byte)0);
  testArray.setPosition(0);
  testArray.readBits(result,0,16);
  assertThat(result[0]).isEqualTo(TEST_DATA[0]);
  assertThat(result[1]).isEqualTo(TEST_DATA[1]);
  result[1]=(byte)0xFF;
  testArray.readBits(result,0,9);
  assertThat(result[0]).isEqualTo((byte)0x5F);
  assertThat(result[1]).isEqualTo((byte)0x7F);
}
