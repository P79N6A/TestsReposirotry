/** 
 * Tests audio track selection when there are multiple audio renderers. 
 */
@Test public void testSelectPreferredAudioTrackMultipleRenderers() throws Exception {
  Format english=buildAudioFormat("en","en");
  Format german=buildAudioFormat("de","de");
  Map<String,Integer> firstRendererMappedCapabilities=new HashMap<>();
  firstRendererMappedCapabilities.put(english.id,FORMAT_HANDLED);
  firstRendererMappedCapabilities.put(german.id,FORMAT_UNSUPPORTED_SUBTYPE);
  RendererCapabilities firstRendererCapabilities=new FakeMappedRendererCapabilities(C.TRACK_TYPE_AUDIO,firstRendererMappedCapabilities);
  Map<String,Integer> secondRendererMappedCapabilities=new HashMap<>();
  secondRendererMappedCapabilities.put(english.id,FORMAT_UNSUPPORTED_SUBTYPE);
  secondRendererMappedCapabilities.put(german.id,FORMAT_HANDLED);
  RendererCapabilities secondRendererCapabilities=new FakeMappedRendererCapabilities(C.TRACK_TYPE_AUDIO,secondRendererMappedCapabilities);
  RendererCapabilities[] rendererCapabilities=new RendererCapabilities[]{firstRendererCapabilities,secondRendererCapabilities};
  TrackSelectorResult result=trackSelector.selectTracks(rendererCapabilities,wrapFormats(english,german));
  assertThat(result.selections.get(0).getFormat(0)).isSameAs(english);
  assertThat(result.selections.get(1)).isNull();
  trackSelector.setParameters(trackSelector.buildUponParameters().setPreferredAudioLanguage("en"));
  result=trackSelector.selectTracks(rendererCapabilities,wrapFormats(english,german));
  assertThat(result.selections.get(0).getFormat(0)).isSameAs(english);
  assertThat(result.selections.get(1)).isNull();
  trackSelector.setParameters(trackSelector.buildUponParameters().setPreferredAudioLanguage("de"));
  result=trackSelector.selectTracks(rendererCapabilities,wrapFormats(english,german));
  assertThat(result.selections.get(0)).isNull();
  assertThat(result.selections.get(1).getFormat(0)).isSameAs(german);
}
