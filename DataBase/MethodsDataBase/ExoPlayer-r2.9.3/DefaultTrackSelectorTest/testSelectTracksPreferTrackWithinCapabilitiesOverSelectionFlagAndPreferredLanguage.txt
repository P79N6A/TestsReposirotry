/** 
 * Tests that track selector will prefer tracks that are within renderer's capabilities over track that have both language matching preferred audio given by  {@link Parameters} and{@link C#SELECTION_FLAG_DEFAULT}, but exceed renderer's capabilities.
 */
@Test public void testSelectTracksPreferTrackWithinCapabilitiesOverSelectionFlagAndPreferredLanguage() throws Exception {
  trackSelector.setParameters(new ParametersBuilder().setPreferredAudioLanguage("eng").build());
  Format supportedFrFormat=Format.createAudioSampleFormat("supportedFormat",MimeTypes.AUDIO_AAC,null,Format.NO_VALUE,Format.NO_VALUE,2,44100,null,null,0,"fra");
  Format exceededDefaultSelectionEnFormat=Format.createAudioSampleFormat("exceededFormat",MimeTypes.AUDIO_AAC,null,Format.NO_VALUE,Format.NO_VALUE,2,44100,null,null,C.SELECTION_FLAG_DEFAULT,"eng");
  Map<String,Integer> mappedCapabilities=new HashMap<>();
  mappedCapabilities.put(exceededDefaultSelectionEnFormat.id,FORMAT_EXCEEDS_CAPABILITIES);
  mappedCapabilities.put(supportedFrFormat.id,FORMAT_HANDLED);
  RendererCapabilities mappedAudioRendererCapabilities=new FakeMappedRendererCapabilities(C.TRACK_TYPE_AUDIO,mappedCapabilities);
  TrackSelectorResult result=trackSelector.selectTracks(new RendererCapabilities[]{mappedAudioRendererCapabilities},singleTrackGroup(exceededDefaultSelectionEnFormat,supportedFrFormat));
  assertThat(result.selections.get(0).getSelectedFormat()).isEqualTo(supportedFrFormat);
}
