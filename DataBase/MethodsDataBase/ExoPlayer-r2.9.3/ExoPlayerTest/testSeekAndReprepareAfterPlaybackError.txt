@Test public void testSeekAndReprepareAfterPlaybackError() throws Exception {
  Timeline timeline=new FakeTimeline(1);
  final long[] positionHolder=new long[2];
  ActionSchedule actionSchedule=new ActionSchedule.Builder("testReprepareAfterPlaybackError").pause().waitForPlaybackState(Player.STATE_READY).throwPlaybackException(ExoPlaybackException.createForSource(new IOException())).waitForPlaybackState(Player.STATE_IDLE).seek(50).waitForSeekProcessed().executeRunnable(new PlayerRunnable(){
    @Override public void run(    SimpleExoPlayer player){
      positionHolder[0]=player.getCurrentPosition();
    }
  }
).prepareSource(new FakeMediaSource(timeline,null),false,false).waitForPlaybackState(Player.STATE_READY).executeRunnable(new PlayerRunnable(){
    @Override public void run(    SimpleExoPlayer player){
      positionHolder[1]=player.getCurrentPosition();
    }
  }
).play().build();
  ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setActionSchedule(actionSchedule).build(context);
  try {
    testRunner.start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
    fail();
  }
 catch (  ExoPlaybackException e) {
  }
  testRunner.assertTimelinesEqual(timeline,timeline);
  testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED,Player.TIMELINE_CHANGE_REASON_PREPARED);
  testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_SEEK);
  assertThat(positionHolder[0]).isEqualTo(50);
  assertThat(positionHolder[1]).isEqualTo(50);
}
