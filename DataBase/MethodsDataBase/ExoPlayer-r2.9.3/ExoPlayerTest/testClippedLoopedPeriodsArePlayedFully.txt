@Test public void testClippedLoopedPeriodsArePlayedFully() throws Exception {
  long startPositionUs=300_000;
  long expectedDurationUs=700_000;
  MediaSource mediaSource=new ClippingMediaSource(new FakeMediaSource(new FakeTimeline(1),null),startPositionUs,startPositionUs + expectedDurationUs);
  Clock clock=new AutoAdvancingFakeClock();
  AtomicReference<Player> playerReference=new AtomicReference<>();
  AtomicLong positionAtDiscontinuityMs=new AtomicLong(C.TIME_UNSET);
  AtomicLong clockAtStartMs=new AtomicLong(C.TIME_UNSET);
  AtomicLong clockAtDiscontinuityMs=new AtomicLong(C.TIME_UNSET);
  EventListener eventListener=new EventListener(){
    @Override public void onPlayerStateChanged(    boolean playWhenReady,    int playbackState){
      if (playbackState == Player.STATE_READY && clockAtStartMs.get() == C.TIME_UNSET) {
        clockAtStartMs.set(clock.elapsedRealtime());
      }
    }
    @Override public void onPositionDiscontinuity(    @DiscontinuityReason int reason){
      if (reason == Player.DISCONTINUITY_REASON_PERIOD_TRANSITION) {
        positionAtDiscontinuityMs.set(playerReference.get().getCurrentPosition());
        clockAtDiscontinuityMs.set(clock.elapsedRealtime());
      }
    }
  }
;
  ActionSchedule actionSchedule=new ActionSchedule.Builder("testClippedLoopedPeriodsArePlayedFully").executeRunnable(new PlayerRunnable(){
    @Override public void run(    SimpleExoPlayer player){
      playerReference.set(player);
      player.addListener(eventListener);
    }
  }
).pause().setRepeatMode(Player.REPEAT_MODE_ALL).waitForPlaybackState(Player.STATE_READY).playUntilPosition(0,1).playUntilStartOfWindow(0).setRepeatMode(Player.REPEAT_MODE_OFF).play().build();
  new ExoPlayerTestRunner.Builder().setClock(clock).setMediaSource(mediaSource).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
  assertThat(positionAtDiscontinuityMs.get()).isAtLeast(0L);
  assertThat(clockAtDiscontinuityMs.get() - clockAtStartMs.get()).isAtLeast(C.usToMs(expectedDurationUs));
}
