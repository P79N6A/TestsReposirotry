@Test public void testPlaybackErrorDuringSourceInfoRefreshWithShuffleModeEnabledUsesCorrectFirstPeriod() throws Exception {
  FakeMediaSource mediaSource=new FakeMediaSource(new FakeTimeline(1),null);
  ConcatenatingMediaSource concatenatingMediaSource=new ConcatenatingMediaSource(false,new FakeShuffleOrder(0),mediaSource,mediaSource);
  AtomicInteger windowIndexAfterError=new AtomicInteger();
  ActionSchedule actionSchedule=new ActionSchedule.Builder("testPlaybackErrorDuringSourceInfoRefreshUsesCorrectFirstPeriod").setShuffleModeEnabled(true).waitForPlaybackState(Player.STATE_BUFFERING).seek(100,0).waitForPlaybackState(Player.STATE_IDLE).executeRunnable(new PlayerRunnable(){
    @Override public void run(    SimpleExoPlayer player){
      windowIndexAfterError.set(player.getCurrentWindowIndex());
    }
  }
).build();
  ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setMediaSource(concatenatingMediaSource).setActionSchedule(actionSchedule).build(context);
  try {
    testRunner.start().blockUntilActionScheduleFinished(TIMEOUT_MS).blockUntilEnded(TIMEOUT_MS);
    fail();
  }
 catch (  ExoPlaybackException e) {
    assertThat(e.getUnexpectedException()).isInstanceOf(IllegalSeekPositionException.class);
  }
  assertThat(windowIndexAfterError.get()).isEqualTo(1);
}
