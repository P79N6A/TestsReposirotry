@Test public void testDynamicallyAddedSecondMediaSourceInPlaylistOnlyThrowsWhenPreviousPeriodIsFullyRead() throws Exception {
  Timeline fakeTimeline=new FakeTimeline(new TimelineWindowDefinition(true,false,10 * C.MICROS_PER_SECOND));
  MediaSource workingMediaSource=new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT);
  MediaSource failingMediaSource=new FakeMediaSource(null,null,Builder.VIDEO_FORMAT){
    @Override public void maybeThrowSourceInfoRefreshError() throws IOException {
      throw new IOException();
    }
  }
;
  ConcatenatingMediaSource concatenatingMediaSource=new ConcatenatingMediaSource(workingMediaSource);
  ActionSchedule actionSchedule=new ActionSchedule.Builder("testFailingSecondMediaSourceInPlaylistOnlyThrowsLater").pause().waitForPlaybackState(Player.STATE_READY).executeRunnable(() -> concatenatingMediaSource.addMediaSource(failingMediaSource)).play().build();
  FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
  ExoPlayerTestRunner testRunner=new Builder().setMediaSource(concatenatingMediaSource).setActionSchedule(actionSchedule).setRenderers(renderer).build(context);
  try {
    testRunner.start().blockUntilEnded(TIMEOUT_MS);
    fail();
  }
 catch (  ExoPlaybackException e) {
  }
  assertThat(renderer.sampleBufferReadCount).isAtLeast(1);
  assertThat(renderer.hasReadStreamToEnd()).isTrue();
}
