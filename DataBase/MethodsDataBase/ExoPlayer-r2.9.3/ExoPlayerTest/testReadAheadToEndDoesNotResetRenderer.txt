/** 
 * Tests that the player does not unnecessarily reset renderers when playing a multi-period source.
 */
@Test public void testReadAheadToEndDoesNotResetRenderer() throws Exception {
  TimelineWindowDefinition windowDefinition0=new TimelineWindowDefinition(1,0,false,false,100_000);
  TimelineWindowDefinition windowDefinition1=new TimelineWindowDefinition(1,1,false,false,100_000);
  TimelineWindowDefinition windowDefinition2=new TimelineWindowDefinition(1,2,false,false,100_000);
  Timeline timeline=new FakeTimeline(windowDefinition0,windowDefinition1,windowDefinition2);
  final FakeRenderer videoRenderer=new FakeRenderer(Builder.VIDEO_FORMAT);
  FakeMediaClockRenderer audioRenderer=new FakeMediaClockRenderer(Builder.AUDIO_FORMAT){
    @Override public long getPositionUs(){
      return isCurrentStreamFinal() ? 30 : 0;
    }
    @Override public PlaybackParameters setPlaybackParameters(    PlaybackParameters playbackParameters){
      return PlaybackParameters.DEFAULT;
    }
    @Override public PlaybackParameters getPlaybackParameters(){
      return PlaybackParameters.DEFAULT;
    }
    @Override public boolean isEnded(){
      return videoRenderer.isEnded();
    }
  }
;
  ExoPlayerTestRunner testRunner=new Builder().setTimeline(timeline).setRenderers(videoRenderer,audioRenderer).setSupportedFormats(Builder.VIDEO_FORMAT,Builder.AUDIO_FORMAT).build(context).start().blockUntilEnded(TIMEOUT_MS);
  testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION);
  testRunner.assertTimelinesEqual(timeline);
  assertThat(audioRenderer.positionResetCount).isEqualTo(1);
  assertThat(videoRenderer.isEnded).isTrue();
  assertThat(audioRenderer.isEnded).isTrue();
}
