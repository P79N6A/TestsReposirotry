@Test public void testRecursivePlayerChangesAreReportedInCorrectOrder() throws Exception {
  final AtomicReference<Player> playerReference=new AtomicReference<>();
  final List<Boolean> eventListenerPlayWhenReady=new ArrayList<>();
  final List<Integer> eventListenerStates=new ArrayList<>();
  final EventListener eventListener=new EventListener(){
    @Override public void onTimelineChanged(    Timeline timeline,    @Nullable Object manifest,    int reason){
      if (timeline.isEmpty()) {
        playerReference.get().setPlayWhenReady(false);
      }
    }
    @Override public void onPlayerStateChanged(    boolean playWhenReady,    int playbackState){
      eventListenerPlayWhenReady.add(playWhenReady);
      eventListenerStates.add(playbackState);
      if (playbackState == Player.STATE_READY) {
        playerReference.get().stop(true);
      }
    }
  }
;
  ActionSchedule actionSchedule=new ActionSchedule.Builder("testRecursivePlayerChanges").executeRunnable(new PlayerRunnable(){
    @Override public void run(    SimpleExoPlayer player){
      playerReference.set(player);
      player.addListener(eventListener);
    }
  }
).build();
  new ExoPlayerTestRunner.Builder().setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
  assertThat(eventListenerStates).containsExactly(Player.STATE_BUFFERING,Player.STATE_READY,Player.STATE_IDLE,Player.STATE_IDLE).inOrder();
  assertThat(eventListenerPlayWhenReady).containsExactly(true,true,true,false).inOrder();
}
