@Test public void testSeekProcessedCallback() throws Exception {
  Timeline timeline=new FakeTimeline(2);
  ActionSchedule actionSchedule=new ActionSchedule.Builder("testSeekProcessedCallback").pause().seek(5).waitForSeekProcessed().seek(2).seek(10).waitForPlaybackState(Player.STATE_READY).seek(10).play().waitForPositionDiscontinuity().seek(5).seek(60).build();
  final List<Integer> playbackStatesWhenSeekProcessed=new ArrayList<>();
  EventListener eventListener=new EventListener(){
    private int currentPlaybackState=Player.STATE_IDLE;
    @Override public void onPlayerStateChanged(    boolean playWhenReady,    int playbackState){
      currentPlaybackState=playbackState;
    }
    @Override public void onSeekProcessed(){
      playbackStatesWhenSeekProcessed.add(currentPlaybackState);
    }
  }
;
  ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setTimeline(timeline).setEventListener(eventListener).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
  testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_SEEK,Player.DISCONTINUITY_REASON_SEEK,Player.DISCONTINUITY_REASON_SEEK,Player.DISCONTINUITY_REASON_SEEK,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_SEEK,Player.DISCONTINUITY_REASON_SEEK);
  assertThat(playbackStatesWhenSeekProcessed).containsExactly(Player.STATE_BUFFERING,Player.STATE_BUFFERING,Player.STATE_READY,Player.STATE_BUFFERING).inOrder();
}
