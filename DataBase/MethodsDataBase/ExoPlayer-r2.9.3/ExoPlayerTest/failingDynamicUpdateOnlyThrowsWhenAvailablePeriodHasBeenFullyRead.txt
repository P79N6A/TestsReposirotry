@Test public void failingDynamicUpdateOnlyThrowsWhenAvailablePeriodHasBeenFullyRead() throws Exception {
  Timeline fakeTimeline=new FakeTimeline(new TimelineWindowDefinition(true,true,10 * C.MICROS_PER_SECOND));
  AtomicReference<Boolean> wasReadyOnce=new AtomicReference<>(false);
  MediaSource mediaSource=new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT){
    @Override public void maybeThrowSourceInfoRefreshError() throws IOException {
      if (wasReadyOnce.get()) {
        throw new IOException();
      }
    }
  }
;
  ActionSchedule actionSchedule=new ActionSchedule.Builder("testFailingDynamicMediaSourceInTimelineOnlyThrowsLater").pause().waitForPlaybackState(Player.STATE_READY).executeRunnable(() -> wasReadyOnce.set(true)).play().build();
  FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
  ExoPlayerTestRunner testRunner=new Builder().setMediaSource(mediaSource).setActionSchedule(actionSchedule).setRenderers(renderer).build(context);
  try {
    testRunner.start().blockUntilEnded(TIMEOUT_MS);
    fail();
  }
 catch (  ExoPlaybackException e) {
  }
  assertThat(renderer.sampleBufferReadCount).isAtLeast(1);
  assertThat(renderer.hasReadStreamToEnd()).isTrue();
}
