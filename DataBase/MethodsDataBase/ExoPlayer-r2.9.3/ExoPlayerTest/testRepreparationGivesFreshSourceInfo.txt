@Test public void testRepreparationGivesFreshSourceInfo() throws Exception {
  Timeline timeline=new FakeTimeline(1);
  FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
  Object firstSourceManifest=new Object();
  MediaSource firstSource=new FakeMediaSource(timeline,firstSourceManifest,Builder.VIDEO_FORMAT);
  final CountDownLatch queuedSourceInfoCountDownLatch=new CountDownLatch(1);
  final CountDownLatch completePreparationCountDownLatch=new CountDownLatch(1);
  MediaSource secondSource=new FakeMediaSource(timeline,new Object(),Builder.VIDEO_FORMAT){
    @Override public synchronized void prepareSourceInternal(    ExoPlayer player,    boolean isTopLevelSource,    @Nullable TransferListener mediaTransferListener){
      super.prepareSourceInternal(player,isTopLevelSource,mediaTransferListener);
      queuedSourceInfoCountDownLatch.countDown();
      try {
        completePreparationCountDownLatch.await();
      }
 catch (      InterruptedException e) {
        throw new IllegalStateException(e);
      }
    }
  }
;
  Object thirdSourceManifest=new Object();
  MediaSource thirdSource=new FakeMediaSource(timeline,thirdSourceManifest,Builder.VIDEO_FORMAT);
  ActionSchedule actionSchedule=new ActionSchedule.Builder("testRepreparation").waitForTimelineChanged(timeline).prepareSource(secondSource).executeRunnable(() -> {
    try {
      queuedSourceInfoCountDownLatch.await();
    }
 catch (    InterruptedException e) {
    }
  }
).prepareSource(thirdSource).executeRunnable(completePreparationCountDownLatch::countDown).build();
  ExoPlayerTestRunner testRunner=new Builder().setMediaSource(firstSource).setRenderers(renderer).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
  testRunner.assertNoPositionDiscontinuities();
  testRunner.assertTimelinesEqual(timeline,Timeline.EMPTY,timeline);
  testRunner.assertManifestsEqual(firstSourceManifest,null,thirdSourceManifest);
  testRunner.assertTimelineChangeReasonsEqual(Player.TIMELINE_CHANGE_REASON_PREPARED,Player.TIMELINE_CHANGE_REASON_RESET,Player.TIMELINE_CHANGE_REASON_PREPARED);
  testRunner.assertTrackGroupsEqual(new TrackGroupArray(new TrackGroup(Builder.VIDEO_FORMAT)));
  assertThat(renderer.isEnded).isTrue();
}
