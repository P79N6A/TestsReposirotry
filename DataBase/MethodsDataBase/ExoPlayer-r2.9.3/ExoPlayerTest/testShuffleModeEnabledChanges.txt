@Test public void testShuffleModeEnabledChanges() throws Exception {
  Timeline fakeTimeline=new FakeTimeline(1);
  MediaSource[] fakeMediaSources={new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT),new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT),new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT)};
  ConcatenatingMediaSource mediaSource=new ConcatenatingMediaSource(false,new FakeShuffleOrder(3),fakeMediaSources);
  FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
  ActionSchedule actionSchedule=new ActionSchedule.Builder("testShuffleModeEnabled").pause().waitForPlaybackState(Player.STATE_READY).setRepeatMode(Player.REPEAT_MODE_ALL).playUntilStartOfWindow(1).setShuffleModeEnabled(true).playUntilStartOfWindow(1).setShuffleModeEnabled(false).setRepeatMode(Player.REPEAT_MODE_OFF).play().build();
  ExoPlayerTestRunner testRunner=new ExoPlayerTestRunner.Builder().setMediaSource(mediaSource).setRenderers(renderer).setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
  testRunner.assertPlayedPeriodIndices(0,1,0,2,1,2);
  testRunner.assertPositionDiscontinuityReasonsEqual(Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION,Player.DISCONTINUITY_REASON_PERIOD_TRANSITION);
  assertThat(renderer.isEnded).isTrue();
}
