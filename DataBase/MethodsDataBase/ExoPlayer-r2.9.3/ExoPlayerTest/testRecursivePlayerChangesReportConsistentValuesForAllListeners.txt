@Test public void testRecursivePlayerChangesReportConsistentValuesForAllListeners() throws Exception {
  final AtomicReference<Player> playerReference=new AtomicReference<>();
  final List<Integer> eventListener1States=new ArrayList<>();
  final List<Integer> eventListener2States=new ArrayList<>();
  final EventListener eventListener1=new EventListener(){
    @Override public void onPlayerStateChanged(    boolean playWhenReady,    int playbackState){
      eventListener1States.add(playbackState);
      if (playbackState == Player.STATE_READY) {
        playerReference.get().stop(true);
      }
    }
  }
;
  final EventListener eventListener2=new EventListener(){
    @Override public void onPlayerStateChanged(    boolean playWhenReady,    int playbackState){
      eventListener2States.add(playbackState);
    }
  }
;
  ActionSchedule actionSchedule=new ActionSchedule.Builder("testRecursivePlayerChanges").executeRunnable(new PlayerRunnable(){
    @Override public void run(    SimpleExoPlayer player){
      playerReference.set(player);
      player.addListener(eventListener1);
      player.addListener(eventListener2);
    }
  }
).build();
  new ExoPlayerTestRunner.Builder().setActionSchedule(actionSchedule).build(context).start().blockUntilEnded(TIMEOUT_MS);
  assertThat(eventListener1States).containsExactly(Player.STATE_BUFFERING,Player.STATE_READY,Player.STATE_IDLE).inOrder();
  assertThat(eventListener2States).containsExactly(Player.STATE_BUFFERING,Player.STATE_READY,Player.STATE_IDLE).inOrder();
}
