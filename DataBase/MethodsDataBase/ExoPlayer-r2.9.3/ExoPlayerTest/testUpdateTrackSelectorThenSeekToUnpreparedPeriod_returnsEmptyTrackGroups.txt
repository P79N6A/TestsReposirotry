@Test public void testUpdateTrackSelectorThenSeekToUnpreparedPeriod_returnsEmptyTrackGroups() throws Exception {
  Timeline fakeTimeline=new FakeTimeline(new TimelineWindowDefinition(true,false,C.TIME_UNSET));
  MediaSource[] fakeMediaSources={new FakeMediaSource(fakeTimeline,null,Builder.VIDEO_FORMAT),new FakeMediaSource(fakeTimeline,null,Builder.AUDIO_FORMAT)};
  MediaSource mediaSource=new ConcatenatingMediaSource(fakeMediaSources);
  FakeRenderer renderer=new FakeRenderer(Builder.VIDEO_FORMAT);
  DefaultTrackSelector trackSelector=new DefaultTrackSelector();
  ActionSchedule actionSchedule=new ActionSchedule.Builder("testUpdateTrackSelectorThenSeekToUnpreparedPeriod").pause().waitForPlaybackState(Player.STATE_READY).seek(1,0).play().build();
  List<TrackGroupArray> trackGroupsList=new ArrayList<>();
  List<TrackSelectionArray> trackSelectionsList=new ArrayList<>();
  new Builder().setMediaSource(mediaSource).setTrackSelector(trackSelector).setRenderers(renderer).setActionSchedule(actionSchedule).setEventListener(new EventListener(){
    @Override public void onTracksChanged(    TrackGroupArray trackGroups,    TrackSelectionArray trackSelections){
      trackGroupsList.add(trackGroups);
      trackSelectionsList.add(trackSelections);
    }
  }
).build(context).start().blockUntilEnded(TIMEOUT_MS);
  assertThat(trackGroupsList).hasSize(3);
  assertThat(trackGroupsList.get(0).get(0).getFormat(0)).isEqualTo(Builder.VIDEO_FORMAT);
  assertThat(trackGroupsList.get(1)).isEqualTo(TrackGroupArray.EMPTY);
  assertThat(trackSelectionsList.get(1).get(0)).isNull();
  assertThat(trackGroupsList.get(2).get(0).getFormat(0)).isEqualTo(Builder.AUDIO_FORMAT);
}
