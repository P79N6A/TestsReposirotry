@Test public void testProgressiveDownloadSeparatePeriods() throws Exception {
  FakeDataSet fakeDataSet=new FakeDataSet().setData(TEST_MPD_URI,TEST_MPD).setRandomData("audio_init_data",10).setRandomData("audio_segment_1",4).setRandomData("audio_segment_2",5).setRandomData("audio_segment_3",6).setRandomData("period_2_segment_1",1).setRandomData("period_2_segment_2",2).setRandomData("period_2_segment_3",3);
  FakeDataSource fakeDataSource=new FakeDataSource(fakeDataSet);
  Factory factory=mock(Factory.class);
  when(factory.createDataSource()).thenReturn(fakeDataSource);
  DashDownloader dashDownloader=getDashDownloader(factory,new StreamKey(0,0,0),new StreamKey(1,0,0));
  dashDownloader.download();
  DataSpec[] openedDataSpecs=fakeDataSource.getAndClearOpenedDataSpecs();
  assertThat(openedDataSpecs.length).isEqualTo(8);
  assertThat(openedDataSpecs[0].uri).isEqualTo(TEST_MPD_URI);
  assertThat(openedDataSpecs[1].uri.getPath()).isEqualTo("audio_init_data");
  assertThat(openedDataSpecs[2].uri.getPath()).isEqualTo("audio_segment_1");
  assertThat(openedDataSpecs[3].uri.getPath()).isEqualTo("audio_segment_2");
  assertThat(openedDataSpecs[4].uri.getPath()).isEqualTo("audio_segment_3");
  assertThat(openedDataSpecs[5].uri.getPath()).isEqualTo("period_2_segment_1");
  assertThat(openedDataSpecs[6].uri.getPath()).isEqualTo("period_2_segment_2");
  assertThat(openedDataSpecs[7].uri.getPath()).isEqualTo("period_2_segment_3");
}
