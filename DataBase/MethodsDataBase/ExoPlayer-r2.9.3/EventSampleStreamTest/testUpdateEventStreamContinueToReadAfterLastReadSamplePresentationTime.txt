/** 
 * Tests that  {@link EventSampleStream#updateEventStream(EventStream,boolean)} will update theunderlying event stream, but keep the read timestamp, so the next {@link EventSampleStream#readData(FormatHolder,DecoderInputBuffer,boolean)} callwill return sample data from after the last read sample timestamp.
 */
@Test public void testUpdateEventStreamContinueToReadAfterLastReadSamplePresentationTime(){
  long presentationTimeUs1=1000000;
  long presentationTimeUs2=2000000;
  long presentationTimeUs3=3000000;
  EventMessage eventMessage1=newEventMessageWithIdAndTime(1,presentationTimeUs1);
  EventMessage eventMessage2=newEventMessageWithIdAndTime(2,presentationTimeUs2);
  EventMessage eventMessage3=newEventMessageWithIdAndTime(3,presentationTimeUs3);
  EventStream eventStream1=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1,presentationTimeUs2},new EventMessage[]{eventMessage1,eventMessage2});
  EventStream eventStream2=new EventStream(SCHEME_ID,VALUE,TIME_SCALE,new long[]{presentationTimeUs1,presentationTimeUs2,presentationTimeUs3},new EventMessage[]{eventMessage1,eventMessage2,eventMessage3});
  EventSampleStream sampleStream=new EventSampleStream(eventStream1,FORMAT,true);
  readData(sampleStream);
  readData(sampleStream);
  readData(sampleStream);
  sampleStream.updateEventStream(eventStream2,true);
  int result=readData(sampleStream);
  assertThat(result).isEqualTo(C.RESULT_BUFFER_READ);
  assertThat(inputBuffer.data.array()).isEqualTo(getEncodedMessage(eventMessage3));
}
