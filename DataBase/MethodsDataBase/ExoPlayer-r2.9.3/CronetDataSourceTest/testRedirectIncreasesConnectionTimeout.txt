@Test public void testRedirectIncreasesConnectionTimeout() throws Exception {
  long startTimeMs=SystemClock.elapsedRealtime();
  final ConditionVariable startCondition=buildUrlRequestStartedCondition();
  final CountDownLatch timedOutLatch=new CountDownLatch(1);
  final AtomicInteger openExceptions=new AtomicInteger(0);
  new Thread(){
    @Override public void run(){
      try {
        dataSourceUnderTest.open(testDataSpec);
        fail();
      }
 catch (      HttpDataSourceException e) {
        assertThat(e instanceof CronetDataSource.OpenException).isTrue();
        assertThat(e.getCause() instanceof SocketTimeoutException).isTrue();
        openExceptions.getAndIncrement();
        timedOutLatch.countDown();
      }
    }
  }
.start();
  startCondition.block();
  assertNotCountedDown(timedOutLatch);
  SystemClock.setCurrentTimeMillis(startTimeMs + TEST_CONNECT_TIMEOUT_MS - 1);
  assertNotCountedDown(timedOutLatch);
  dataSourceUnderTest.urlRequestCallback.onRedirectReceived(mockUrlRequest,testUrlResponseInfo,"RandomRedirectedUrl1");
  long newTimeoutMs=2 * TEST_CONNECT_TIMEOUT_MS - 1;
  SystemClock.setCurrentTimeMillis(startTimeMs + newTimeoutMs - 1);
  assertNotCountedDown(timedOutLatch);
  dataSourceUnderTest.urlRequestCallback.onRedirectReceived(mockUrlRequest,testUrlResponseInfo,"RandomRedirectedUrl2");
  newTimeoutMs=3 * TEST_CONNECT_TIMEOUT_MS - 2;
  SystemClock.setCurrentTimeMillis(startTimeMs + newTimeoutMs - 1);
  assertNotCountedDown(timedOutLatch);
  SystemClock.setCurrentTimeMillis(startTimeMs + newTimeoutMs + 10);
  timedOutLatch.await();
  verify(mockTransferListener,never()).onTransferStart(dataSourceUnderTest,testDataSpec,true);
  assertThat(openExceptions.get()).isEqualTo(1);
}
