@Test public void testEncryption() throws Exception {
  byte[] key="Bar12345Bar12345".getBytes(C.UTF8_NAME);
  byte[] key2="Foo12345Foo12345".getBytes(C.UTF8_NAME);
  assertStoredAndLoadedEqual(new CachedContentIndex(cacheDir,key),new CachedContentIndex(cacheDir,key));
  File file1=new File(cacheDir,CachedContentIndex.FILE_NAME);
  File file2=new File(cacheDir,"file2compare");
  assertThat(file1.renameTo(file2)).isTrue();
  assertStoredAndLoadedEqual(new CachedContentIndex(cacheDir,key),new CachedContentIndex(cacheDir,key));
  assertThat(file1.length()).isEqualTo(file2.length());
  FileInputStream fis1=new FileInputStream(file1);
  FileInputStream fis2=new FileInputStream(file2);
  for (int b; (b=fis1.read()) == fis2.read(); ) {
    assertThat(b != -1).isTrue();
  }
  boolean threw=false;
  try {
    assertStoredAndLoadedEqual(new CachedContentIndex(cacheDir,key),new CachedContentIndex(cacheDir,key2));
  }
 catch (  AssertionError e) {
    threw=true;
  }
  assertWithMessage("Encrypted index file can not be read with different encryption key").that(threw).isTrue();
  try {
    assertStoredAndLoadedEqual(new CachedContentIndex(cacheDir,key),new CachedContentIndex(cacheDir));
  }
 catch (  AssertionError e) {
    threw=true;
  }
  assertWithMessage("Encrypted index file can not be read without encryption key").that(threw).isTrue();
  assertStoredAndLoadedEqual(new CachedContentIndex(cacheDir),new CachedContentIndex(cacheDir,key));
  CachedContentIndex index=new CachedContentIndex(cacheDir,key);
  index.getOrAdd("key3");
  index.store();
  assertStoredAndLoadedEqual(index,new CachedContentIndex(cacheDir,key));
}
