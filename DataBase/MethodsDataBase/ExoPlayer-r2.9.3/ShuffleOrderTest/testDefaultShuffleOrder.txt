@Test public void testDefaultShuffleOrder(){
  assertShuffleOrderCorrectness(new DefaultShuffleOrder(0,RANDOM_SEED),0);
  assertShuffleOrderCorrectness(new DefaultShuffleOrder(1,RANDOM_SEED),1);
  assertShuffleOrderCorrectness(new DefaultShuffleOrder(5,RANDOM_SEED),5);
  for (int initialLength=0; initialLength < 4; initialLength++) {
    for (int insertionPoint=0; insertionPoint <= initialLength; insertionPoint+=2) {
      testCloneAndInsert(new DefaultShuffleOrder(initialLength,RANDOM_SEED),insertionPoint,0);
      testCloneAndInsert(new DefaultShuffleOrder(initialLength,RANDOM_SEED),insertionPoint,1);
      testCloneAndInsert(new DefaultShuffleOrder(initialLength,RANDOM_SEED),insertionPoint,5);
    }
  }
  testCloneAndRemove(new DefaultShuffleOrder(5,RANDOM_SEED),0,1);
  testCloneAndRemove(new DefaultShuffleOrder(5,RANDOM_SEED),2,3);
  testCloneAndRemove(new DefaultShuffleOrder(5,RANDOM_SEED),4,5);
  testCloneAndRemove(new DefaultShuffleOrder(1,RANDOM_SEED),0,1);
  testCloneAndRemove(new DefaultShuffleOrder(1000,RANDOM_SEED),0,1000);
  testCloneAndRemove(new DefaultShuffleOrder(1000,RANDOM_SEED),0,999);
  testCloneAndRemove(new DefaultShuffleOrder(1000,RANDOM_SEED),0,500);
  testCloneAndRemove(new DefaultShuffleOrder(1000,RANDOM_SEED),100,600);
  testCloneAndRemove(new DefaultShuffleOrder(1000,RANDOM_SEED),500,1000);
}
