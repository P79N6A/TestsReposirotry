@Test public void testUnshuffledShuffleOrder(){
  assertShuffleOrderCorrectness(new UnshuffledShuffleOrder(0),0);
  assertShuffleOrderCorrectness(new UnshuffledShuffleOrder(1),1);
  assertShuffleOrderCorrectness(new UnshuffledShuffleOrder(5),5);
  for (int initialLength=0; initialLength < 4; initialLength++) {
    for (int insertionPoint=0; insertionPoint <= initialLength; insertionPoint+=2) {
      testCloneAndInsert(new UnshuffledShuffleOrder(initialLength),insertionPoint,0);
      testCloneAndInsert(new UnshuffledShuffleOrder(initialLength),insertionPoint,1);
      testCloneAndInsert(new UnshuffledShuffleOrder(initialLength),insertionPoint,5);
    }
  }
  testCloneAndRemove(new UnshuffledShuffleOrder(5),0,1);
  testCloneAndRemove(new UnshuffledShuffleOrder(5),2,3);
  testCloneAndRemove(new UnshuffledShuffleOrder(5),4,5);
  testCloneAndRemove(new UnshuffledShuffleOrder(1),0,1);
  testCloneAndRemove(new UnshuffledShuffleOrder(1000),0,1000);
  testCloneAndRemove(new UnshuffledShuffleOrder(1000),0,999);
  testCloneAndRemove(new UnshuffledShuffleOrder(1000),0,500);
  testCloneAndRemove(new UnshuffledShuffleOrder(1000),100,600);
  testCloneAndRemove(new UnshuffledShuffleOrder(1000),500,1000);
}
