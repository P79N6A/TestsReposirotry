/** 
 * Test used to verify the happy path of  {@link ThreadAsyncExecutor#startProcess(Callable,AsyncCallback)}
 */
@Test public void testSuccessfulTaskWithCallback() throws Exception {
  assertTimeout(ofMillis(3000),() -> {
    final ThreadAsyncExecutor executor=new ThreadAsyncExecutor();
    final Object result=new Object();
    final Callable<Object> task=mock(Callable.class);
    when(task.call()).thenReturn(result);
    final AsyncCallback callback=mock(AsyncCallback.class);
    final AsyncResult<Object> asyncResult=executor.startProcess(task,callback);
    assertNotNull(asyncResult);
    asyncResult.await();
    assertTrue(asyncResult.isCompleted());
    verify(task,times(1)).call();
    final ArgumentCaptor<Optional<Exception>> optionalCaptor=ArgumentCaptor.forClass((Class)Optional.class);
    verify(callback,times(1)).onComplete(eq(result),optionalCaptor.capture());
    final Optional<Exception> optionalException=optionalCaptor.getValue();
    assertNotNull(optionalException);
    assertFalse(optionalException.isPresent());
    assertSame(result,asyncResult.getValue());
  }
);
}
