@Test public void testLottery(){
  administration.resetLottery();
  assertEquals(administration.getAllSubmittedTickets().size(),0);
  Optional<LotteryTicketId> ticket1=service.submitTicket(LotteryTestUtils.createLotteryTicket("cvt@bbb.com","123-12312","+32425255",new HashSet<>(Arrays.asList(1,2,3,4))));
  assertTrue(ticket1.isPresent());
  Optional<LotteryTicketId> ticket2=service.submitTicket(LotteryTestUtils.createLotteryTicket("ant@bac.com","123-12312","+32423455",new HashSet<>(Arrays.asList(11,12,13,14))));
  assertTrue(ticket2.isPresent());
  Optional<LotteryTicketId> ticket3=service.submitTicket(LotteryTestUtils.createLotteryTicket("arg@boo.com","123-12312","+32421255",new HashSet<>(Arrays.asList(6,8,13,19))));
  assertTrue(ticket3.isPresent());
  assertEquals(administration.getAllSubmittedTickets().size(),3);
  LotteryNumbers winningNumbers=administration.performLottery();
  Optional<LotteryTicketId> ticket4=service.submitTicket(LotteryTestUtils.createLotteryTicket("lucky@orb.com","123-12312","+12421255",winningNumbers.getNumbers()));
  assertTrue(ticket4.isPresent());
  assertEquals(administration.getAllSubmittedTickets().size(),4);
  Map<LotteryTicketId,LotteryTicket> tickets=administration.getAllSubmittedTickets();
  for (  LotteryTicketId id : tickets.keySet()) {
    LotteryTicketCheckResult checkResult=service.checkTicketForPrize(id,winningNumbers);
    assertTrue(checkResult.getResult() != CheckResult.TICKET_NOT_SUBMITTED);
    if (checkResult.getResult().equals(CheckResult.WIN_PRIZE)) {
      assertTrue(checkResult.getPrizeAmount() > 0);
    }
 else     if (checkResult.getResult().equals(CheckResult.WIN_PRIZE)) {
      assertEquals(checkResult.getPrizeAmount(),0);
    }
  }
  LotteryTicketCheckResult checkResult=service.checkTicketForPrize(new LotteryTicketId(),winningNumbers);
  assertTrue(checkResult.getResult() == CheckResult.TICKET_NOT_SUBMITTED);
  assertEquals(checkResult.getPrizeAmount(),0);
}
