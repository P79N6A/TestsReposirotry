@Test public void dependentPromiseIsFulfilledWithAnExceptionIfTheFunctionThrowsException() throws InterruptedException, ExecutionException, TimeoutException {
  Promise<String> dependentPromise=promise.fulfillInAsync(new NumberCrunchingTask(),executor).thenApply(new Function<Integer,String>(){
    @Override public String apply(    Integer value){
      throw new RuntimeException("Barf!");
    }
  }
);
  try {
    dependentPromise.get();
    fail("Fetching dependent promise should result in exception " + "if the function threw an exception");
  }
 catch (  ExecutionException ex) {
    assertTrue(promise.isDone());
    assertFalse(promise.isCancelled());
  }
  try {
    dependentPromise.get(1000,TimeUnit.SECONDS);
    fail("Fetching dependent promise should result in exception " + "if the function threw an exception");
  }
 catch (  ExecutionException ex) {
    assertTrue(promise.isDone());
    assertFalse(promise.isCancelled());
  }
}
