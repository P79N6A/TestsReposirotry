/** 
 * Test singleton instance in a concurrent setting
 */
@Test public void testMultipleCallsReturnTheSameObjectInDifferentThreads() throws Exception {
  assertTimeout(ofMillis(10000),() -> {
    final List<Callable<S>> tasks=new ArrayList<>();
    for (int i=0; i < 10000; i++) {
      tasks.add(this.singletonInstanceMethod::get);
    }
    final ExecutorService executorService=Executors.newFixedThreadPool(8);
    final List<Future<S>> results=executorService.invokeAll(tasks);
    final S expectedInstance=this.singletonInstanceMethod.get();
    for (    Future<S> res : results) {
      final S instance=res.get();
      assertNotNull(instance);
      assertSame(expectedInstance,instance);
    }
    executorService.shutdown();
  }
);
}
