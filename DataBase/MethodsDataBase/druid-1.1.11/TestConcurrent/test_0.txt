public void test_0() throws Exception {
{
    Assert.assertEquals(0,dataSource.getActiveCount());
    Assert.assertEquals(0,dataSource.getPoolingCount());
    Assert.assertEquals(true,dataSource.isEnable());
    Connection conn=dataSource.getConnection();
    Assert.assertEquals(1,dataSource.getActiveCount());
    Assert.assertEquals(0,dataSource.getPoolingCount());
    Assert.assertEquals(true,dataSource.isEnable());
    conn.close();
    Assert.assertEquals(0,dataSource.getActiveCount());
    Assert.assertEquals(1,dataSource.getPoolingCount());
  }
  Assert.assertEquals(true,dataSource.isEnable());
  for (int i=0; i < 1000; ++i) {
    Assert.assertEquals(0,dataSource.getActiveCount());
    Connection conn=dataSource.getConnection();
    Assert.assertEquals(1,dataSource.getActiveCount());
    conn.close();
    Assert.assertEquals(0,dataSource.getActiveCount());
    Assert.assertEquals(1,dataSource.getPoolingCount());
    Assert.assertEquals(true,dataSource.isEnable());
  }
  for (int i=0; i < 1000 * 1; ++i) {
    final int COUNT=10;
    Connection[] connections=new Connection[COUNT];
    for (int j=0; j < connections.length; ++j) {
      connections[j]=dataSource.getConnection();
      Assert.assertEquals(j + 1,dataSource.getActiveCount());
    }
    Assert.assertEquals(0,dataSource.getDestroyCount());
    Assert.assertEquals(COUNT,dataSource.getActiveCount());
    Assert.assertEquals(COUNT,dataSource.getCreateCount());
    Assert.assertEquals(0,dataSource.getPoolingCount());
    for (int j=0; j < connections.length; ++j) {
      connections[j].close();
      Assert.assertEquals(j + 1,dataSource.getPoolingCount());
    }
    Assert.assertEquals(0,dataSource.getActiveCount());
    Assert.assertEquals(COUNT,dataSource.getPoolingCount());
  }
  for (int i=0; i < 3; ++i) {
    concurrent(2);
  }
  for (int i=0; i < 3; ++i) {
    concurrent(5);
  }
  for (int i=0; i < 3; ++i) {
    concurrent(10);
  }
  for (int i=0; i < 3; ++i) {
    concurrent(20);
  }
  for (int i=0; i < 3; ++i) {
    concurrent(50);
  }
  for (int i=0; i < 3; ++i) {
    concurrent(100);
  }
}
