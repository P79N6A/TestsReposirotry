/** 
 * 并发执行10000次
 * @param threadCount
 * @throws InterruptedException
 */
private void concurrent(final int threadCount) throws InterruptedException {
  final CountDownLatch startLatch=new CountDownLatch(1);
  final CountDownLatch endLatch=new CountDownLatch(threadCount);
  Thread[] threads=new Thread[threadCount];
  for (int i=0; i < threadCount; ++i) {
    threads[i]=new Thread(){
      public void run(){
        try {
          startLatch.await();
          for (int i=0; i < 1000 * 1; ++i) {
            Connection conn=dataSource.getConnection();
            Statement stmt=conn.createStatement();
            ResultSet rs=stmt.executeQuery("SELECT 1");
            rs.close();
            stmt.close();
            conn.close();
          }
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
 finally {
          endLatch.countDown();
        }
      }
    }
;
    threads[i].start();
  }
  dataSource.shrink();
  Assert.assertEquals("actveCount != 0",0,dataSource.getActiveCount());
  Assert.assertEquals("minIdle != poolingCount",dataSource.getMinIdle(),dataSource.getPoolingCount());
  System.out.println(threadCount + "-threads start");
  startLatch.countDown();
  endLatch.await();
  System.out.println(threadCount + "-threads complete");
  Assert.assertEquals(0,dataSource.getActiveCount());
  Assert.assertTrue(threadCount >= dataSource.getPoolingCount());
}
