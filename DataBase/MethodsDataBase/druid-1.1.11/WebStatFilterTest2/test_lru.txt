public void test_lru() throws Exception {
  MockServletContext servletContext=new MockServletContext();
  MockFilterConfig filterConfig=new MockFilterConfig(servletContext);
  filterConfig.addInitParameter(WebStatFilter.PARAM_NAME_SESSION_STAT_MAX_COUNT,"3");
  WebStatFilter filter=new WebStatFilter();
  filter.init(filterConfig);
  WebAppStat appStat=filter.getWebAppStat();
  Assert.assertEquals(3,filter.getSessionStatMaxCount());
  Assert.assertEquals(0,appStat.getSessionStatDataList().size());
  final MockHttpSession session_0=new MockHttpSession(servletContext);
  final MockHttpSession session_1=new MockHttpSession(servletContext);
  final MockHttpSession session_2=new MockHttpSession(servletContext);
  final MockHttpSession session_3=new MockHttpSession(servletContext);
  final MockHttpSession session_4=new MockHttpSession(servletContext);
{
    Assert.assertNull(appStat.getSessionStat(session_0.getId()));
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    MockFilterChain chain=new MockFilterChain(){
      public void doFilter(      javax.servlet.ServletRequest request,      javax.servlet.ServletResponse response){
        ((MockHttpServletRequest)request).setSession(session_0);
      }
    }
;
    filter.doFilter(request,response,chain);
    Assert.assertEquals(1,appStat.getSessionStatDataList().size());
    Assert.assertEquals(1,appStat.getSessionStat(session_0.getId()).getRequestCount());
    Assert.assertTrue(appStat.getSessionStat(session_0.getId()).getLastAccessTimeMillis() > 0);
  }
{
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    MockFilterChain chain=new MockFilterChain(){
      public void doFilter(      javax.servlet.ServletRequest request,      javax.servlet.ServletResponse response){
        ((MockHttpServletRequest)request).setSession(session_0);
      }
    }
;
    filter.doFilter(request,response,chain);
    Assert.assertEquals(1,appStat.getSessionStatDataList().size());
    Assert.assertEquals(2,appStat.getSessionStat(session_0.getId()).getRequestCount());
  }
{
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    MockFilterChain chain=new MockFilterChain(){
      public void doFilter(      javax.servlet.ServletRequest request,      javax.servlet.ServletResponse response){
        ((MockHttpServletRequest)request).setSession(session_1);
      }
    }
;
    filter.doFilter(request,response,chain);
    Assert.assertEquals(2,appStat.getSessionStatDataList().size());
    Assert.assertEquals(2,appStat.getSessionStat(session_0.getId()).getRequestCount());
    Assert.assertEquals(1,appStat.getSessionStat(session_1.getId()).getRequestCount());
  }
{
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    MockFilterChain chain=new MockFilterChain(){
      public void doFilter(      javax.servlet.ServletRequest request,      javax.servlet.ServletResponse response){
        ((MockHttpServletRequest)request).setSession(session_2);
      }
    }
;
    filter.doFilter(request,response,chain);
    Assert.assertEquals(3,appStat.getSessionStatDataList().size());
    Assert.assertEquals(2,appStat.getSessionStat(session_0.getId()).getRequestCount());
    Assert.assertEquals(1,appStat.getSessionStat(session_1.getId()).getRequestCount());
    Assert.assertEquals(1,appStat.getSessionStat(session_2.getId()).getRequestCount());
  }
{
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    MockFilterChain chain=new MockFilterChain(){
      public void doFilter(      javax.servlet.ServletRequest request,      javax.servlet.ServletResponse response){
        ((MockHttpServletRequest)request).setSession(session_3);
      }
    }
;
    filter.doFilter(request,response,chain);
    Assert.assertEquals(3,appStat.getSessionStatDataList().size());
    Assert.assertNull(appStat.getSessionStat(session_0.getId()));
    Assert.assertEquals(1,appStat.getSessionStat(session_1.getId()).getRequestCount());
    Assert.assertEquals(1,appStat.getSessionStat(session_2.getId()).getRequestCount());
    Assert.assertEquals(1,appStat.getSessionStat(session_3.getId()).getRequestCount());
  }
{
    MockHttpServletRequest request=new MockHttpServletRequest();
    MockHttpServletResponse response=new MockHttpServletResponse();
    MockFilterChain chain=new MockFilterChain(){
      public void doFilter(      javax.servlet.ServletRequest request,      javax.servlet.ServletResponse response){
        ((MockHttpServletRequest)request).setSession(session_4);
      }
    }
;
    filter.doFilter(request,response,chain);
    Assert.assertEquals(3,appStat.getSessionStatDataList().size());
    Assert.assertNull(appStat.getSessionStat(session_0.getId()));
    Assert.assertNull(appStat.getSessionStat(session_1.getId()));
    Assert.assertEquals(1,appStat.getSessionStat(session_2.getId()).getRequestCount());
    Assert.assertEquals(1,appStat.getSessionStat(session_3.getId()).getRequestCount());
    Assert.assertEquals(1,appStat.getSessionStat(session_4.getId()).getRequestCount());
  }
}
