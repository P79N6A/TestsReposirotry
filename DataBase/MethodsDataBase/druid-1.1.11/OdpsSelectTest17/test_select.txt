public void test_select() throws Exception {
  String sql="SELECT prov\n" + "  , name\n" + "  , cnt\n"+ "FROM mock_app.adl_mock_v_fct\n"+ "WHERE ds = 20160920\n"+ "  AND name != 'none'\n"+ "  AND prov in ( select prov from (\n"+ "    SELECT prov, sum(cnt) as cnt\n"+ "    FROM mock_app.adl_mock_v_fct\n"+ "    WHERE ds = 20160920\n"+ "    GROUP BY prov\n"+ "    ORDER BY cnt DESC LIMIT 5\n"+ ") top )\n"+ "ORDER BY cnt DESC\n"+ "LIMIT 800";
  assertEquals("SELECT prov, name, cnt\n" + "FROM mock_app.adl_mock_v_fct\n" + "WHERE ds = 20160920\n"+ "\tAND name != 'none'\n"+ "\tAND prov IN (\n"+ "\t\tSELECT prov\n"+ "\t\tFROM (\n"+ "\t\t\tSELECT prov, SUM(cnt) AS cnt\n"+ "\t\t\tFROM mock_app.adl_mock_v_fct\n"+ "\t\t\tWHERE ds = 20160920\n"+ "\t\t\tGROUP BY prov\n"+ "\t\t\tORDER BY cnt DESC\n"+ "\t\t\tLIMIT 5\n"+ "\t\t) top\n"+ "\t)\n"+ "ORDER BY cnt DESC\n"+ "LIMIT 800",SQLUtils.formatOdps(sql));
  assertEquals("select prov, name, cnt\n" + "from mock_app.adl_mock_v_fct\n" + "where ds = 20160920\n"+ "\tand name != 'none'\n"+ "\tand prov in (\n"+ "\t\tselect prov\n"+ "\t\tfrom (\n"+ "\t\t\tselect prov, sum(cnt) as cnt\n"+ "\t\t\tfrom mock_app.adl_mock_v_fct\n"+ "\t\t\twhere ds = 20160920\n"+ "\t\t\tgroup by prov\n"+ "\t\t\torder by cnt desc\n"+ "\t\t\tlimit 5\n"+ "\t\t) top\n"+ "\t)\n"+ "order by cnt desc\n"+ "limit 800",SQLUtils.formatOdps(sql,SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
  List<SQLStatement> statementList=SQLUtils.parseStatements(sql,JdbcConstants.ODPS);
  SQLStatement stmt=statementList.get(0);
  Assert.assertEquals(1,statementList.size());
  SchemaStatVisitor visitor=SQLUtils.createSchemaStatVisitor(JdbcConstants.ODPS);
  stmt.accept(visitor);
  Assert.assertEquals(1,visitor.getTables().size());
  Assert.assertEquals(4,visitor.getColumns().size());
  Assert.assertEquals(3,visitor.getConditions().size());
}
