protected void setUp() throws Exception {
  dataSource=new DruidDataSource();
  dataSource.setUrl("jdbc:mock:xxx");
  dataSource.setFilters("stat");
  dataSource.setTestOnBorrow(false);
  dataSource.getProxyFilters().add(new FilterAdapter(){
    @Override public Object resultSet_getObject(    FilterChain chain,    ResultSetProxy result,    int columnIndex) throws SQLException {
      return new ClobProxyImpl(result.getStatementProxy().getConnectionProxy().getDirectDataSource(),result.getStatementProxy().getConnectionProxy(),new MockClob());
    }
    @Override public Object resultSet_getObject(    FilterChain chain,    ResultSetProxy result,    String columnLabel) throws SQLException {
      return new ClobProxyImpl(result.getStatementProxy().getConnectionProxy().getDirectDataSource(),result.getStatementProxy().getConnectionProxy(),new MockClob());
    }
    @Override public Object resultSet_getObject(    FilterChain chain,    ResultSetProxy result,    int columnIndex,    java.util.Map<String,Class<?>> map) throws SQLException {
      return new ClobProxyImpl(result.getStatementProxy().getConnectionProxy().getDirectDataSource(),result.getStatementProxy().getConnectionProxy(),new MockClob());
    }
    @Override public Object resultSet_getObject(    FilterChain chain,    ResultSetProxy result,    String columnIndex,    java.util.Map<String,Class<?>> map) throws SQLException {
      return new ClobProxyImpl(result.getStatementProxy().getConnectionProxy().getDirectDataSource(),result.getStatementProxy().getConnectionProxy(),new MockClob());
    }
  }
);
  dataSource.init();
}
