protected void setUp() throws Exception {
  dataSource=new DruidDataSource();
  dataSource.setUrl("jdbc:mock:xxx");
  dataSource.setTestOnBorrow(false);
  dataSource.setFilters("stat");
  dataSource.setPoolPreparedStatements(true);
  dataSource.getProxyFilters().add(new FilterAdapter(){
    @Override public PreparedStatementProxy connection_prepareStatement(    FilterChain chain,    ConnectionProxy connection,    String sql) throws SQLException {
      throw new SQLException();
    }
    @Override public PreparedStatementProxy connection_prepareStatement(    FilterChain chain,    ConnectionProxy connection,    String sql,    int autoGeneratedKeys) throws SQLException {
      throw new SQLException();
    }
    @Override public PreparedStatementProxy connection_prepareStatement(    FilterChain chain,    ConnectionProxy connection,    String sql,    int resultSetType,    int resultSetConcurrency) throws SQLException {
      throw new SQLException();
    }
    @Override public PreparedStatementProxy connection_prepareStatement(    FilterChain chain,    ConnectionProxy connection,    String sql,    int resultSetType,    int resultSetConcurrency,    int resultSetHoldability) throws SQLException {
      throw new SQLException();
    }
    @Override public PreparedStatementProxy connection_prepareStatement(    FilterChain chain,    ConnectionProxy connection,    String sql,    int[] columnIndexes) throws SQLException {
      throw new SQLException();
    }
    @Override public PreparedStatementProxy connection_prepareStatement(    FilterChain chain,    ConnectionProxy connection,    String sql,    String[] columnNames) throws SQLException {
      throw new SQLException();
    }
    @Override public CallableStatementProxy connection_prepareCall(    FilterChain chain,    ConnectionProxy connection,    String sql) throws SQLException {
      throw new SQLException();
    }
    @Override public CallableStatementProxy connection_prepareCall(    FilterChain chain,    ConnectionProxy connection,    String sql,    int resultSetType,    int resultSetConcurrency) throws SQLException {
      throw new SQLException();
    }
    @Override public CallableStatementProxy connection_prepareCall(    FilterChain chain,    ConnectionProxy connection,    String sql,    int resultSetType,    int resultSetConcurrency,    int resultSetHoldability) throws SQLException {
      throw new SQLException();
    }
  }
);
}
