private void concurrent(final MockDriver driver,final DruidDataSource dataSource,final int count) throws Exception {
  final int LOOP_COUNT=1000;
  Thread[] threads=new Thread[count];
  final CyclicBarrier barrier=new CyclicBarrier(count);
  final CountDownLatch endLatch=new CountDownLatch(count);
  for (int i=0; i < count; ++i) {
    threads[i]=new Thread("thread-" + i){
      public void run(){
        try {
          for (int i=0; i < LOOP_COUNT; ++i) {
            barrier.await();
            Connection conn=dataSource.getConnection();
{
              AtomicInteger c=new AtomicInteger();
              for (int j=0; j < 1000 * 1; ++j) {
                c.incrementAndGet();
              }
              c.set(0);
              Thread.sleep(1);
            }
            conn.close();
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
 finally {
          endLatch.countDown();
        }
      }
    }
;
  }
  for (int i=0; i < count; ++i) {
    threads[i].start();
  }
  endLatch.await();
  System.out.println("concurrent end");
  int max=count > dataSource.getMaxActive() ? dataSource.getMaxActive() : count;
  Assert.assertEquals(max,driver.getConnections().size());
}
