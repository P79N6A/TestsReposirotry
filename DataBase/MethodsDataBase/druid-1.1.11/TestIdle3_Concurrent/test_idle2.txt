public void test_idle2() throws Exception {
  MockDriver driver=new MockDriver();
  DruidDataSource dataSource=new DruidDataSource();
  dataSource.setUrl("jdbc:mock:xxx");
  dataSource.setDriver(driver);
  dataSource.setInitialSize(1);
  dataSource.setMaxActive(14);
  dataSource.setMaxIdle(14);
  dataSource.setMinIdle(1);
  dataSource.setMinEvictableIdleTimeMillis(30 * 10);
  dataSource.setTimeBetweenEvictionRunsMillis(18 * 10);
  dataSource.setTestWhileIdle(true);
  dataSource.setTestOnBorrow(false);
  dataSource.setValidationQuery("SELECT 1");
  dataSource.setFilters("stat");
{
    Assert.assertEquals(0,dataSource.getCreateCount());
    Assert.assertEquals(0,dataSource.getActiveCount());
    Connection conn=dataSource.getConnection();
    Assert.assertEquals(dataSource.getInitialSize(),dataSource.getCreateCount());
    Assert.assertEquals(dataSource.getInitialSize(),driver.getConnections().size());
    Assert.assertEquals(1,dataSource.getActiveCount());
    conn.close();
    Assert.assertEquals(0,dataSource.getDestroyCount());
    Assert.assertEquals(1,driver.getConnections().size());
    Assert.assertEquals(1,dataSource.getCreateCount());
    Assert.assertEquals(0,dataSource.getActiveCount());
  }
{
    concurrent(driver,dataSource,30);
  }
  for (int i=0; i < 1000; ++i) {
    Assert.assertEquals(0,dataSource.getActiveCount());
    Connection conn=dataSource.getConnection();
    Assert.assertEquals(1,dataSource.getActiveCount());
    conn.close();
  }
  Thread.sleep(1000);
  Assert.assertEquals(1,dataSource.getPoolingCount());
  dataSource.close();
}
