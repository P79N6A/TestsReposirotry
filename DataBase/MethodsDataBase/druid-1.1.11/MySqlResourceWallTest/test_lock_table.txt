@Test public void test_lock_table() throws Exception {
  WallProvider provider=new MySqlWallProvider();
  provider.getConfig().setNoneBaseStatementAllow(true);
  String sql="lock tables etstsun write";
  WallCheckResult result=provider.check(sql);
  if (result.getViolations().size() > 0) {
    Violation violation=result.getViolations().get(0);
    System.out.println("error () : " + violation.getMessage());
  }
  Assert.assertTrue(provider.checkValid(sql));
  sql="lock tables etstsun LOW_PRIORITY write";
  result=provider.check(sql);
  if (result.getViolations().size() > 0) {
    Violation violation=result.getViolations().get(0);
    System.out.println("error () : " + violation.getMessage());
  }
  Assert.assertTrue(provider.checkValid(sql));
  sql="UNLOCK TABLES";
  result=provider.check(sql);
  if (result.getViolations().size() > 0) {
    Violation violation=result.getViolations().get(0);
    System.out.println("error () : " + violation.getMessage());
  }
  Assert.assertTrue(provider.checkValid(sql));
  sql="lock table dsdfsdf read";
  result=provider.check(sql);
  if (result.getViolations().size() > 0) {
    Violation violation=result.getViolations().get(0);
    System.out.println("error () : " + violation.getMessage());
  }
  Assert.assertTrue(provider.checkValid(sql));
  sql="lock table dsdfsdf read local";
  result=provider.check(sql);
  if (result.getViolations().size() > 0) {
    Violation violation=result.getViolations().get(0);
    System.out.println("error () : " + violation.getMessage());
  }
  Assert.assertTrue(provider.checkValid(sql));
}
