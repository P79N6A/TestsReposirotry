public void test_logFilter_2() throws Exception {
  DataSourceProxyConfig config=new DataSourceProxyConfig();
  config.setRawUrl("jdbc:mock:");
  DataSourceProxyImpl dataSource=new DataSourceProxyImpl(new MockDriver(),config);
  Log4jFilter log4jFilter=new Log4jFilter();
{
    log4jFilter.init(dataSource);
    setLogDisableAll(log4jFilter,true);
    config.getFilters().add(log4jFilter);
  }
  CommonsLogFilter logFilter=new CommonsLogFilter();
{
    logFilter.init(dataSource);
    setLogDisableAll(logFilter,true);
    config.getFilters().add(logFilter);
  }
  final MockResultSetMetaData rsMeta=new MockResultSetMetaData(){
    private int[] types=new int[]{Types.BLOB,Types.CLOB,Types.NCLOB,Types.BINARY,Types.OTHER};
    @Override public int getColumnCount() throws SQLException {
      return types.length;
    }
    @Override public int getColumnType(    int column) throws SQLException {
      return types[column - 1];
    }
  }
;
  ConnectionProxy conn=(ConnectionProxy)dataSource.connect(new Properties());
{
    StatementProxy stmt=(StatementProxy)conn.createStatement();
    MockResultSet rs=new MockResultSet(null){
      @Override public ResultSetMetaData getMetaData() throws SQLException {
        return rsMeta;
      }
      @Override public boolean next() throws SQLException {
        return true;
      }
      @Override public Object getObject(      int columnIndex) throws SQLException {
        if (columnIndex == 5) {
          throw new SQLException();
        }
        return null;
      }
    }
;
    FilterChainImpl chain=new FilterChainImpl(dataSource);
    chain.resultSet_next(new ResultSetProxyImpl(stmt,rs,1001,null));
  }
{
    final MockResultSet rs=new MockResultSet(null){
      @Override public ResultSetMetaData getMetaData() throws SQLException {
        throw new SQLException();
      }
    }
;
    StatementProxy stmt=new StatementProxyImpl(conn,new MockStatement(conn){
      public ResultSet getResultSet() throws SQLException {
        return rs;
      }
    }
,0);
    FilterChainImpl chain=new FilterChainImpl(dataSource);
    chain.statement_getResultSet(stmt);
  }
{
    StatementProxy stmt=(StatementProxy)conn.createStatement();
    MockResultSet rs=new MockResultSet(null){
      @Override public ResultSetMetaData getMetaData() throws SQLException {
        return rsMeta;
      }
      @Override public boolean next() throws SQLException {
        return true;
      }
      @Override public Object getObject(      int columnIndex) throws SQLException {
        if (columnIndex == 5) {
          throw new SQLException();
        }
        return null;
      }
    }
;
{
      logFilter.setResultSetLogEnabled(false);
      FilterChainImpl chain=new FilterChainImpl(dataSource);
      chain.resultSet_next(new ResultSetProxyImpl(stmt,rs,1001,null));
    }
{
      logFilter.setResultSetNextAfterLogEnabled(false);
      FilterChainImpl chain=new FilterChainImpl(dataSource);
      chain.resultSet_next(new ResultSetProxyImpl(stmt,rs,1001,null));
    }
  }
}
