private void p0(final DataSource dataSource,String name,int threadCount) throws Exception {
  final CountDownLatch startLatch=new CountDownLatch(1);
  final CountDownLatch endLatch=new CountDownLatch(threadCount);
  final AtomicLong blockedStat=new AtomicLong();
  final AtomicLong waitedStat=new AtomicLong();
  for (int i=0; i < threadCount; ++i) {
    Thread thread=new Thread(){
      public void run(){
        try {
          startLatch.await();
          long threadId=Thread.currentThread().getId();
          long startBlockedCount, startWaitedCount;
{
            ThreadInfo threadInfo=ManagementFactory.getThreadMXBean().getThreadInfo(threadId);
            startBlockedCount=threadInfo.getBlockedCount();
            startWaitedCount=threadInfo.getWaitedCount();
          }
          for (int i=0; i < LOOP_COUNT; ++i) {
            Connection conn=dataSource.getConnection();
            conn.close();
          }
          ThreadInfo threadInfo=ManagementFactory.getThreadMXBean().getThreadInfo(threadId);
          long blockedCount=threadInfo.getBlockedCount() - startBlockedCount;
          long waitedCount=threadInfo.getWaitedCount() - startWaitedCount;
          blockedStat.addAndGet(blockedCount);
          waitedStat.addAndGet(waitedCount);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
        endLatch.countDown();
      }
    }
;
    thread.start();
  }
  long startMillis=System.currentTimeMillis();
  long startYGC=TestUtil.getYoungGC();
  long startFullGC=TestUtil.getFullGC();
  startLatch.countDown();
  endLatch.await();
  long millis=System.currentTimeMillis() - startMillis;
  long ygc=TestUtil.getYoungGC() - startYGC;
  long fullGC=TestUtil.getFullGC() - startFullGC;
  System.out.println("thread " + threadCount + " "+ name+ " millis : "+ NumberFormat.getInstance().format(millis)+ ", YGC "+ ygc+ " FGC "+ fullGC+ " blockedCount "+ blockedStat.get()+ " waitedCount "+ waitedStat.get());
}
