public void f_test_recycle_error_interrupt() throws Exception {
  final AtomicReference<Exception> errorRef=new AtomicReference<Exception>();
  final CountDownLatch closeBeforeLatch=new CountDownLatch(1);
  final CountDownLatch lockLatch=new CountDownLatch(1);
  final CountDownLatch endLatch=new CountDownLatch(1);
  Thread thread=new Thread(){
    public void run(){
      try {
        DruidPooledConnection conn=dataSource.getConnection();
        conn.setAutoCommit(false);
        conn.setReadOnly(false);
        Statement stmt=conn.createStatement();
        stmt.execute("select 1");
        Assert.assertEquals(0,dataSource.getPoolingCount());
        Assert.assertEquals(1,dataSource.getActiveCount());
        closeBeforeLatch.countDown();
        lockLatch.await();
        conn.close();
      }
 catch (      Exception e) {
        errorRef.set(e);
      }
 finally {
        endLatch.countDown();
      }
    }
  }
;
  thread.start();
  Assert.assertTrue(closeBeforeLatch.await(1,TimeUnit.SECONDS));
  dataSource.getLock().lock();
  lockLatch.countDown();
  Thread.sleep(10);
  thread.interrupt();
  Assert.assertTrue(endLatch.await(1,TimeUnit.MINUTES));
  Exception error=errorRef.get();
  Assert.assertNull(error);
}
