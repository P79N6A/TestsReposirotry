private void p0(final DataSource dataSource,String name,int threadCount) throws Exception {
  final AtomicInteger count=new AtomicInteger();
  final AtomicInteger errorCount=new AtomicInteger();
  final CountDownLatch startLatch=new CountDownLatch(1);
  final CountDownLatch endLatch=new CountDownLatch(threadCount);
  for (int i=0; i < threadCount; ++i) {
    Thread thread=new Thread(){
      public void run(){
        try {
          startLatch.await();
          for (int i=0; i < LOOP_COUNT; ++i) {
            Connection conn=dataSource.getConnection();
            Statement stmt=conn.createStatement();
            ResultSet rs=stmt.executeQuery(sql);
            while (rs.next()) {
              rs.getInt(1);
            }
            rs.close();
            stmt.close();
            conn.close();
            count.incrementAndGet();
          }
        }
 catch (        Throwable ex) {
          errorCount.incrementAndGet();
          ex.printStackTrace();
        }
 finally {
          endLatch.countDown();
        }
      }
    }
;
    thread.start();
  }
  long startMillis=System.currentTimeMillis();
  long startYGC=TestUtil.getYoungGC();
  long startFullGC=TestUtil.getFullGC();
  startLatch.countDown();
  endLatch.await();
  long millis=System.currentTimeMillis() - startMillis;
  long ygc=TestUtil.getYoungGC() - startYGC;
  long fullGC=TestUtil.getFullGC() - startFullGC;
  Assert.assertEquals(LOOP_COUNT * threadCount,count.get());
  Thread.sleep(1);
  System.out.println("thread " + threadCount + " "+ name+ " millis : "+ NumberFormat.getInstance().format(millis)+ ", YGC "+ ygc+ " FGC "+ fullGC);
}
