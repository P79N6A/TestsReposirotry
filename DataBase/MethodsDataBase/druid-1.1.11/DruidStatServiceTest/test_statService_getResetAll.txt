public void test_statService_getResetAll() throws Exception {
  String sql="select 1";
  Connection conn=dataSource.getConnection();
  PreparedStatement stmt=conn.prepareStatement(sql);
  ResultSet rs=stmt.executeQuery();
  rs.next();
  rs.close();
  stmt.close();
  conn.close();
  String resultSQL=DruidStatService.getInstance().service("/sql.json");
  Map<String,Object> resultSQLMap=(Map<String,Object>)JSONUtils.parse(resultSQL);
  List<Map<String,Object>> sqlList=(List<Map<String,Object>>)resultSQLMap.get("Content");
  assertThat(sqlList.size(),equalTo(1));
  Map<String,Object> sqlStat=sqlList.get(0);
  assertThat((Integer)sqlStat.get("RunningCount"),equalTo(0));
  String uri="/";
  MockServletContext servletContext=new MockServletContext();
  MockFilterConfig filterConfig=new MockFilterConfig(servletContext);
  WebStatFilter filter=new WebStatFilter();
  filter.init(filterConfig);
  MockHttpServletRequest request=new MockHttpServletRequest("GET",uri);
  MockHttpSession session=new MockHttpSession();
  request.setSession(session);
  String sessionId=session.getId();
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  filter.doFilter(request,response,chain);
  String resultWebSession=DruidStatService.getInstance().service("/websession.json");
  Map<String,Object> resultWebSessionMap=(Map<String,Object>)JSONUtils.parse(resultWebSession);
  List<Map<String,Object>> contentWebSessionList=(List<Map<String,Object>>)resultWebSessionMap.get("Content");
  assertThat(contentWebSessionList.size(),equalTo(1));
  Map<String,Object> contentWebSessionMap=contentWebSessionList.get(0);
  assertThat((String)contentWebSessionMap.get("SESSIONID"),equalTo(sessionId));
  ApplicationContext context=new ClassPathXmlApplicationContext("classpath:com/alibaba/druid/stat/spring-config-stat.xml");
  UserService userService=(UserService)context.getBean("userService");
  userService.save();
  String resultSpring=DruidStatService.getInstance().service("/spring.json");
  Map<String,Object> resultSpringMap=(Map<String,Object>)JSONUtils.parse(resultSpring);
  List<Map<String,Object>> contentSpringList=(List<Map<String,Object>>)resultSpringMap.get("Content");
  assertThat(contentSpringList.size(),equalTo(1));
  Map<String,Object> contentMap=contentSpringList.get(0);
  assertThat((String)contentMap.get("Class"),is(not(nullValue())));
  assertThat((Integer)contentMap.get("ExecuteCount"),equalTo(1));
  String result=DruidStatService.getInstance().service("/reset-all.json");
  Map<String,Object> resultMap=(Map<String,Object>)JSONUtils.parse(result);
  assertThat(resultMap.get("content"),is(nullValue()));
  resultSQL=DruidStatService.getInstance().service("/sql.json");
  resultSQLMap=(Map<String,Object>)JSONUtils.parse(resultSQL);
  sqlList=(List<Map<String,Object>>)resultSQLMap.get("Content");
  assertThat(sqlList,is(nullValue()));
  resultWebSession=DruidStatService.getInstance().service("/websession.json");
  resultWebSessionMap=(Map<String,Object>)JSONUtils.parse(resultWebSession);
  contentWebSessionList=(List<Map<String,Object>>)resultWebSessionMap.get("Content");
  assertThat(contentWebSessionList,is(nullValue()));
  resultSpring=DruidStatService.getInstance().service("/spring.json");
  resultSpringMap=(Map<String,Object>)JSONUtils.parse(resultSpring);
  contentSpringList=(List<Map<String,Object>>)resultSpringMap.get("Content");
  assertThat(contentSpringList,is(nullValue()));
}
