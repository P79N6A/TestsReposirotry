public void test_statService_getWebSession() throws Exception {
  String uri="/";
  MockServletContext servletContext=new MockServletContext();
  MockFilterConfig filterConfig=new MockFilterConfig(servletContext);
  WebStatFilter filter=new WebStatFilter();
  filter.init(filterConfig);
  MockHttpServletRequest request=new MockHttpServletRequest("GET",uri);
  MockHttpSession session=new MockHttpSession();
  request.setSession(session);
  String sessionId=session.getId();
  MockHttpServletResponse response=new MockHttpServletResponse();
  MockFilterChain chain=new MockFilterChain();
  filter.doFilter(request,response,chain);
  String result=DruidStatService.getInstance().service("/websession.json");
  Map<String,Object> resultMap=(Map<String,Object>)JSONUtils.parse(result);
  List<Map<String,Object>> contentList=(List<Map<String,Object>>)resultMap.get("Content");
  assertThat(contentList.size(),equalTo(1));
  Map<String,Object> contentMap=contentList.get(0);
  assertThat((String)contentMap.get("SESSIONID"),equalTo(sessionId));
  MockHttpServletRequest request2=new MockHttpServletRequest("GET",uri);
  MockHttpSession session2=new MockHttpSession();
  request2.setSession(session2);
  String sessionId2=session2.getId();
  MockHttpServletResponse response2=new MockHttpServletResponse();
  MockFilterChain chain2=new MockFilterChain();
  filter.doFilter(request2,response2,chain2);
  result=DruidStatService.getInstance().service("/websession.json");
  resultMap=(Map<String,Object>)JSONUtils.parse(result);
  contentList=(List<Map<String,Object>>)resultMap.get("Content");
  assertThat(contentList.size(),equalTo(2));
  contentMap=contentList.get(1);
  assertThat((String)contentMap.get("SESSIONID"),equalTo(sessionId2));
  filter.destroy();
}
