public void test_read() throws Exception {
{
    Exception error=null;
    try {
      Utils.read(new Reader(){
        @Override public int read(        char[] cbuf,        int off,        int len) throws IOException {
          throw new IOException();
        }
        @Override public void close() throws IOException {
          throw new IOException();
        }
      }
);
    }
 catch (    RuntimeException ex) {
      error=ex;
    }
    Assert.assertNotNull(error);
  }
{
    Exception error=null;
    try {
      Utils.read(new Reader(){
        @Override public int read(        char[] cbuf,        int off,        int len) throws IOException {
          throw new IOException();
        }
        @Override public void close() throws IOException {
          throw new IOException();
        }
      }
,0);
    }
 catch (    RuntimeException ex) {
      error=ex;
    }
    Assert.assertNotNull(error);
  }
{
    String text=Utils.read(new Reader(){
      @Override public int read(      char[] cbuf,      int off,      int len) throws IOException {
        return -1;
      }
      @Override public void close() throws IOException {
        throw new IOException();
      }
    }
,1);
    Assert.assertEquals("",text);
  }
{
    String text=Utils.read(new Reader(){
      @Override public int read(      char[] cbuf,      int off,      int len) throws IOException {
        for (int i=off; i < len; ++i) {
          cbuf[i]='A';
        }
        return len;
      }
      @Override public void close() throws IOException {
        throw new IOException();
      }
    }
,2);
    Assert.assertEquals("AA",text);
  }
{
    Reader reader=new Reader(){
      @Override public int read(      char[] cbuf,      int off,      int len) throws IOException {
        cbuf[off]='A';
        return 1;
      }
      @Override public void close() throws IOException {
        throw new IOException();
      }
    }
;
    String text=Utils.read(reader,2);
    Assert.assertEquals("AA",text);
  }
}
