public void test_select() throws Exception {
  String sql="select last_name, first_name, department_id, hire_date, salary,\n" + "     SUM (salary)\n" + "    OVER (PARTITION BY department_id ORDER BY last_name, first_name\n"+ "         RANGE 90 PRECEDING) department_total\n"+ "  from employee\n"+ "  order by department_id, hire_date;\n"+ "";
  assertEquals("SELECT last_name, first_name, department_id, hire_date, salary\n" + "\t, SUM(salary) OVER (PARTITION BY department_id ORDER BY last_name, \n" + "\t\tfirst_name RANGE 90 PRECEDING) AS department_total\n"+ "FROM employee\n"+ "ORDER BY department_id, \n"+ "\thire_date;",SQLUtils.formatOdps(sql));
  Assert.assertEquals("select last_name, first_name, department_id, hire_date, salary\n" + "\t, sum(salary) over (partition by department_id order by last_name, \n" + "\t\tfirst_name range 90 preceding) as department_total\n"+ "from employee\n"+ "order by department_id, \n"+ "\thire_date;",SQLUtils.formatOdps(sql,SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
  List<SQLStatement> statementList=SQLUtils.parseStatements(sql,JdbcConstants.ODPS);
  SQLStatement stmt=statementList.get(0);
  Assert.assertEquals(1,statementList.size());
  SchemaStatVisitor visitor=SQLUtils.createSchemaStatVisitor(JdbcConstants.ODPS);
  stmt.accept(visitor);
  Assert.assertEquals(1,visitor.getTables().size());
  Assert.assertEquals(5,visitor.getColumns().size());
  Assert.assertEquals(0,visitor.getConditions().size());
}
