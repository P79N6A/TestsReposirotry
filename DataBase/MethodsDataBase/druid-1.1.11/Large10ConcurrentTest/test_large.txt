public void test_large() throws Exception {
  final Connection[] connections=new Connection[dataSources.length * 8];
  final CountDownLatch connLatch=new CountDownLatch(connections.length);
  final AtomicLong connErrorCount=new AtomicLong();
  for (int i=0; i < dataSources.length; ++i) {
    for (int j=0; j < 8; ++j) {
      final DataSource dataSource=dataSources[i];
      final int index=i * 8 + j;
      Runnable task=new Runnable(){
        public void run(){
          try {
            connections[index]=dataSource.getConnection();
          }
 catch (          SQLException e) {
            connErrorCount.incrementAndGet();
            e.printStackTrace();
          }
 finally {
            connLatch.countDown();
          }
        }
      }
;
      executor.execute(task);
    }
  }
  connLatch.await();
  for (int i=0; i < dataSources.length; ++i) {
    Assert.assertEquals(8,dataSources[i].getActiveCount());
  }
  for (int i=0; i < dataSources.length; ++i) {
    Assert.assertEquals(0,dataSources[i].getPoolingCount());
  }
  final CountDownLatch closeLatch=new CountDownLatch(connections.length);
  for (int i=0; i < dataSources.length; ++i) {
    for (int j=0; j < 8; ++j) {
      final int index=i * 8 + j;
      Runnable task=new Runnable(){
        public void run(){
          JdbcUtils.close(connections[index]);
          closeLatch.countDown();
        }
      }
;
      executor.execute(task);
    }
  }
  closeLatch.await();
}
