@Test public void testCheckForValidRegistrationSessionIDs() throws IOException {
  new JavaTestKit(actorSystem){
{
      ActorGateway taskManagerGateway=null;
      final UUID falseLeaderSessionID=UUID.randomUUID();
      final UUID trueLeaderSessionID=UUID.randomUUID();
      HighAvailabilityServices mockedHighAvailabilityServices=mock(HighAvailabilityServices.class);
      when(mockedHighAvailabilityServices.getJobManagerLeaderRetriever(Matchers.eq(HighAvailabilityServices.DEFAULT_JOB_ID))).thenReturn(new StandaloneLeaderRetrievalService(getTestActor().path().toString(),trueLeaderSessionID));
      when(mockedHighAvailabilityServices.createBlobStore()).thenReturn(new VoidBlobStore());
      try {
        taskManagerGateway=createTaskManager(actorSystem,mockedHighAvailabilityServices,config,true,false);
        final ActorRef taskManager=taskManagerGateway.actor();
        new Within(timeout){
          @Override protected void run(){
            taskManager.tell(TaskManagerMessages.getNotifyWhenRegisteredAtJobManagerMessage(),getTestActor());
            LeaderSessionMessage lsm=expectMsgClass(LeaderSessionMessage.class);
            assertTrue(lsm.leaderSessionID().equals(trueLeaderSessionID));
            assertTrue(lsm.message() instanceof RegisterTaskManager);
            final ActorRef tm=getLastSender();
            tm.tell(new LeaderSessionMessage(falseLeaderSessionID,new AcknowledgeRegistration(new InstanceID(),1)),getTestActor());
            tm.tell(new LeaderSessionMessage(trueLeaderSessionID,new AcknowledgeRegistration(new InstanceID(),1)),getTestActor());
            Object message=null;
            while (!(message instanceof TaskManagerMessages.RegisteredAtJobManager)) {
              message=receiveOne(TestingUtils.TESTING_DURATION());
            }
            tm.tell(JobManagerMessages.getRequestLeaderSessionID(),getTestActor());
            expectMsgEquals(new JobManagerMessages.ResponseLeaderSessionID(trueLeaderSessionID));
          }
        }
;
      }
  finally {
        stopActorGracefully(taskManagerGateway);
      }
    }
  }
;
}
