/** 
 * Manually run this to write binary snapshot data. Remove @Ignore to run.
 */
@Ignore @Test public void writeSnapshot() throws Exception {
  final File outDir=tempFolder.newFolder();
  BucketingSink<String> sink=new BucketingSink<String>(outDir.getAbsolutePath()).setWriter(new StringWriter<String>()).setBatchSize(5).setPartPrefix(PART_PREFIX).setInProgressPrefix("").setPendingPrefix("").setValidLengthPrefix("").setInProgressSuffix(IN_PROGRESS_SUFFIX).setPendingSuffix(PENDING_SUFFIX).setValidLengthSuffix(VALID_LENGTH_SUFFIX);
  OneInputStreamOperatorTestHarness<String,Object> testHarness=new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink));
  testHarness.setup();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>("test1",0L));
  testHarness.processElement(new StreamRecord<>("test2",0L));
  checkLocalFs(outDir,1,1,0,0);
  testHarness.processElement(new StreamRecord<>("test3",0L));
  testHarness.processElement(new StreamRecord<>("test4",0L));
  testHarness.processElement(new StreamRecord<>("test5",0L));
  checkLocalFs(outDir,1,4,0,0);
  OperatorSubtaskState snapshot=testHarness.snapshot(0L,0L);
  OperatorSnapshotUtil.writeStateHandle(snapshot,"src/test/resources/bucketing-sink-migration-test-flink" + flinkGenerateSavepointVersion + "-snapshot");
  testHarness.close();
}
