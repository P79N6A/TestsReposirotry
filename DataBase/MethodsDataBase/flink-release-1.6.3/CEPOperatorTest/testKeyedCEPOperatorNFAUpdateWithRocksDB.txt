@Test public void testKeyedCEPOperatorNFAUpdateWithRocksDB() throws Exception {
  String rocksDbPath=tempFolder.newFolder().getAbsolutePath();
  RocksDBStateBackend rocksDBStateBackend=new RocksDBStateBackend(new MemoryStateBackend());
  rocksDBStateBackend.setDbStoragePath(rocksDbPath);
  SelectCepOperator<Event,Integer,Map<String,List<Event>>> operator=CepOperatorTestUtilities.getKeyedCepOpearator(true,new SimpleNFAFactory());
  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness=CepOperatorTestUtilities.getCepTestHarness(operator);
  try {
    harness.setStateBackend(rocksDBStateBackend);
    harness.open();
    Event startEvent=new Event(42,"c",1.0);
    SubEvent middleEvent=new SubEvent(42,"a",1.0,10.0);
    Event endEvent=new Event(42,"b",1.0);
    harness.processElement(new StreamRecord<>(startEvent,1L));
    OperatorSubtaskState snapshot=harness.snapshot(0L,0L);
    harness.close();
    operator=CepOperatorTestUtilities.getKeyedCepOpearator(true,new SimpleNFAFactory());
    harness=CepOperatorTestUtilities.getCepTestHarness(operator);
    rocksDBStateBackend=new RocksDBStateBackend(new MemoryStateBackend());
    rocksDBStateBackend.setDbStoragePath(rocksDbPath);
    harness.setStateBackend(rocksDBStateBackend);
    harness.setup();
    harness.initializeState(snapshot);
    harness.open();
    harness.processElement(new StreamRecord<>(new Event(42,"d",1.0),4L));
    OperatorSubtaskState snapshot2=harness.snapshot(0L,0L);
    harness.close();
    operator=CepOperatorTestUtilities.getKeyedCepOpearator(true,new SimpleNFAFactory());
    harness=CepOperatorTestUtilities.getCepTestHarness(operator);
    rocksDBStateBackend=new RocksDBStateBackend(new MemoryStateBackend());
    rocksDBStateBackend.setDbStoragePath(rocksDbPath);
    harness.setStateBackend(rocksDBStateBackend);
    harness.setup();
    harness.initializeState(snapshot2);
    harness.open();
    harness.processElement(new StreamRecord<Event>(middleEvent,4L));
    harness.processElement(new StreamRecord<>(endEvent,4L));
    Queue<Object> result=harness.getOutput();
    assertEquals(1,result.size());
    verifyPattern(result.poll(),startEvent,middleEvent,endEvent);
  }
  finally {
    harness.close();
  }
}
