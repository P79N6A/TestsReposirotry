@Test public void testKeyedCEPOperatorCheckpointingWithRocksDB() throws Exception {
  String rocksDbPath=tempFolder.newFolder().getAbsolutePath();
  RocksDBStateBackend rocksDBStateBackend=new RocksDBStateBackend(new MemoryStateBackend());
  rocksDBStateBackend.setDbStoragePath(rocksDbPath);
  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness=getCepTestHarness(false);
  try {
    harness.setStateBackend(rocksDBStateBackend);
    harness.open();
    Event startEvent=new Event(42,"start",1.0);
    SubEvent middleEvent=new SubEvent(42,"foo",1.0,10.0);
    Event endEvent=new Event(42,"end",1.0);
    harness.processElement(new StreamRecord<>(startEvent,1L));
    harness.processElement(new StreamRecord<>(new Event(42,"foobar",1.0),2L));
    OperatorSubtaskState snapshot=harness.snapshot(0L,0L);
    harness.close();
    harness=getCepTestHarness(false);
    rocksDBStateBackend=new RocksDBStateBackend(new MemoryStateBackend());
    rocksDBStateBackend.setDbStoragePath(rocksDbPath);
    harness.setStateBackend(rocksDBStateBackend);
    harness.setup();
    harness.initializeState(snapshot);
    harness.open();
    harness.processWatermark(new Watermark(Long.MIN_VALUE));
    harness.processElement(new StreamRecord<Event>(new SubEvent(42,"barfoo",1.0,5.0),3L));
    harness.processWatermark(new Watermark(2L));
    OperatorSubtaskState snapshot2=harness.snapshot(1L,1L);
    harness.close();
    harness=getCepTestHarness(false);
    rocksDBStateBackend=new RocksDBStateBackend(new MemoryStateBackend());
    rocksDBStateBackend.setDbStoragePath(rocksDbPath);
    harness.setStateBackend(rocksDBStateBackend);
    harness.setup();
    harness.initializeState(snapshot2);
    harness.open();
    harness.processElement(new StreamRecord<Event>(middleEvent,3L));
    harness.processElement(new StreamRecord<>(new Event(42,"start",1.0),4L));
    harness.processElement(new StreamRecord<>(endEvent,5L));
    harness.processWatermark(new Watermark(Long.MAX_VALUE));
    Queue<Object> result=harness.getOutput();
    assertEquals(2,result.size());
    verifyPattern(result.poll(),startEvent,middleEvent,endEvent);
    verifyWatermark(result.poll(),Long.MAX_VALUE);
  }
  finally {
    harness.close();
  }
}
