@Test public void testSimpleKeyedPatternCEP() throws Exception {
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(2);
  DataStream<Event> input=env.fromElements(new Event(1,"barfoo",1.0),new Event(2,"start",2.0),new Event(3,"start",2.1),new Event(3,"foobar",3.0),new SubEvent(4,"foo",4.0,1.0),new SubEvent(3,"middle",3.2,1.0),new Event(42,"start",3.1),new SubEvent(42,"middle",3.3,1.2),new Event(5,"middle",5.0),new SubEvent(2,"middle",6.0,2.0),new SubEvent(7,"bar",3.0,3.0),new Event(42,"42",42.0),new Event(3,"end",2.0),new Event(2,"end",1.0),new Event(42,"end",42.0)).keyBy(new KeySelector<Event,Integer>(){
    @Override public Integer getKey(    Event value) throws Exception {
      return value.getId();
    }
  }
);
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("start");
    }
  }
).followedByAny("middle").subtype(SubEvent.class).where(new SimpleCondition<SubEvent>(){
    @Override public boolean filter(    SubEvent value) throws Exception {
      return value.getName().equals("middle");
    }
  }
).followedByAny("end").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("end");
    }
  }
);
  DataStream<String> result=CEP.pattern(input,pattern).select(p -> {
    StringBuilder builder=new StringBuilder();
    builder.append(p.get("start").get(0).getId()).append(",").append(p.get("middle").get(0).getId()).append(",").append(p.get("end").get(0).getId());
    return builder.toString();
  }
);
  List<String> resultList=new ArrayList<>();
  DataStreamUtils.collect(result).forEachRemaining(resultList::add);
  resultList.sort(String::compareTo);
  assertEquals(Arrays.asList("2,2,2","3,3,3","42,42,42"),resultList);
}
