@Test public void testProcessingTimeWithWindow() throws Exception {
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setParallelism(1);
  DataStream<Integer> input=env.fromElements(1,2);
  Pattern<Integer,?> pattern=Pattern.<Integer>begin("start").followedByAny("end").within(Time.days(1));
  DataStream<Integer> result=CEP.pattern(input,pattern).select(new PatternSelectFunction<Integer,Integer>(){
    @Override public Integer select(    Map<String,List<Integer>> pattern) throws Exception {
      return pattern.get("start").get(0) + pattern.get("end").get(0);
    }
  }
);
  List<Integer> resultList=new ArrayList<>();
  DataStreamUtils.collect(result).forEachRemaining(resultList::add);
  assertEquals(Arrays.asList(3),resultList);
}
