@Test public void testSimplePatternEventTime() throws Exception {
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  DataStream<Event> input=env.fromElements(Tuple2.of(new Event(1,"start",1.0),5L),Tuple2.of(new Event(2,"middle",2.0),1L),Tuple2.of(new Event(3,"end",3.0),3L),Tuple2.of(new Event(4,"end",4.0),10L),Tuple2.of(new Event(5,"middle",5.0),7L),Tuple2.of(new Event(5,"middle",5.0),100L)).assignTimestampsAndWatermarks(new AssignerWithPunctuatedWatermarks<Tuple2<Event,Long>>(){
    @Override public long extractTimestamp(    Tuple2<Event,Long> element,    long previousTimestamp){
      return element.f1;
    }
    @Override public Watermark checkAndGetNextWatermark(    Tuple2<Event,Long> lastElement,    long extractedTimestamp){
      return new Watermark(lastElement.f1 - 5);
    }
  }
).map(new MapFunction<Tuple2<Event,Long>,Event>(){
    @Override public Event map(    Tuple2<Event,Long> value) throws Exception {
      return value.f0;
    }
  }
);
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("start");
    }
  }
).followedByAny("middle").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("middle");
    }
  }
).followedByAny("end").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("end");
    }
  }
);
  DataStream<String> result=CEP.pattern(input,pattern).select(new PatternSelectFunction<Event,String>(){
    @Override public String select(    Map<String,List<Event>> pattern){
      StringBuilder builder=new StringBuilder();
      builder.append(pattern.get("start").get(0).getId()).append(",").append(pattern.get("middle").get(0).getId()).append(",").append(pattern.get("end").get(0).getId());
      return builder.toString();
    }
  }
);
  List<String> resultList=new ArrayList<>();
  DataStreamUtils.collect(result).forEachRemaining(resultList::add);
  resultList.sort(String::compareTo);
  assertEquals(Arrays.asList("1,5,4"),resultList);
}
