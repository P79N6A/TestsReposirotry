@Test public void testSimplePatternWithSingleState() throws Exception {
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStream<Tuple2<Integer,Integer>> input=env.fromElements(new Tuple2<>(0,1),new Tuple2<>(0,2));
  Pattern<Tuple2<Integer,Integer>,?> pattern=Pattern.<Tuple2<Integer,Integer>>begin("start").where(new SimpleCondition<Tuple2<Integer,Integer>>(){
    @Override public boolean filter(    Tuple2<Integer,Integer> rec) throws Exception {
      return rec.f1 == 1;
    }
  }
);
  PatternStream<Tuple2<Integer,Integer>> pStream=CEP.pattern(input,pattern);
  DataStream<Tuple2<Integer,Integer>> result=pStream.select(new PatternSelectFunction<Tuple2<Integer,Integer>,Tuple2<Integer,Integer>>(){
    @Override public Tuple2<Integer,Integer> select(    Map<String,List<Tuple2<Integer,Integer>>> pattern) throws Exception {
      return pattern.get("start").get(0);
    }
  }
);
  List<Tuple2<Integer,Integer>> resultList=new ArrayList<>();
  DataStreamUtils.collect(result).forEachRemaining(resultList::add);
  assertEquals(Arrays.asList(new Tuple2<>(0,1)),resultList);
}
