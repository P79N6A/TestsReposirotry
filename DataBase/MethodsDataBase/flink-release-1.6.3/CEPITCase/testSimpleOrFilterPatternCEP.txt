/** 
 * Checks that a certain event sequence is recognized with an OR filter.
 * @throws Exception
 */
@Test public void testSimpleOrFilterPatternCEP() throws Exception {
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStream<Event> input=env.fromElements(new Event(1,"start",1.0),new Event(2,"middle",2.0),new Event(3,"end",3.0),new Event(4,"start",4.0),new Event(5,"middle",5.0),new Event(6,"end",6.0));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("start");
    }
  }
).followedByAny("middle").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getPrice() == 2.0;
    }
  }
).or(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getPrice() == 5.0;
    }
  }
).followedByAny("end").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("end");
    }
  }
);
  DataStream<String> result=CEP.pattern(input,pattern).select(new PatternSelectFunction<Event,String>(){
    @Override public String select(    Map<String,List<Event>> pattern){
      StringBuilder builder=new StringBuilder();
      builder.append(pattern.get("start").get(0).getId()).append(",").append(pattern.get("middle").get(0).getId()).append(",").append(pattern.get("end").get(0).getId());
      return builder.toString();
    }
  }
);
  List<String> resultList=new ArrayList<>();
  DataStreamUtils.collect(result).forEachRemaining(resultList::add);
  List<String> expected=Arrays.asList("1,5,6","1,2,3","4,5,6","1,2,6");
  expected.sort(String::compareTo);
  resultList.sort(String::compareTo);
  assertEquals(expected,resultList);
}
