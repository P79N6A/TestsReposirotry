/** 
 * Test unplanned task failure of a pending worker.
 */
@Test public void testWorkerFailed() throws Exception {
  new Context(){
{
      MesosWorkerStore.Worker worker1launched=MesosWorkerStore.Worker.newWorker(task1).launchWorker(slave1,slave1host);
      when(rmServices.workerStore.getFrameworkID()).thenReturn(Option.apply(framework1));
      when(rmServices.workerStore.recoverWorkers()).thenReturn(singletonList(worker1launched));
      when(rmServices.workerStore.newTaskID()).thenReturn(task2);
      startResourceManager();
      when(rmServices.workerStore.removeWorker(task1)).thenReturn(true);
      resourceManager.taskTerminated(new TaskMonitor.TaskTerminated(task1,Protos.TaskStatus.newBuilder().setTaskId(task1).setSlaveId(slave1).setState(Protos.TaskState.TASK_FAILED).build()));
      verify(rmServices.workerStore).removeWorker(task1);
      assertThat(resourceManager.workersInLaunch.entrySet(),empty());
      assertThat(resourceManager.workersBeingReturned.entrySet(),empty());
      assertThat(resourceManager.workersInNew,hasKey(extractResourceID(task2)));
      assertThat(resourceManager.closedTaskManagerConnections,hasItem(extractResourceID(task1)));
    }
  }
;
}
