/** 
 * Validates taking the application-defined file system state backend and adding with additional parameters from the cluster configuration, but giving precedence to application-defined parameters over configuration-defined parameters.
 */
@Test public void testLoadFileSystemStateBackendMixed() throws Exception {
  final String appCheckpointDir=new Path(tmp.newFolder().toURI()).toString();
  final String checkpointDir=new Path(tmp.newFolder().toURI()).toString();
  final String savepointDir=new Path(tmp.newFolder().toURI()).toString();
  final String localDir1=tmp.newFolder().getAbsolutePath();
  final String localDir2=tmp.newFolder().getAbsolutePath();
  final String localDir3=tmp.newFolder().getAbsolutePath();
  final String localDir4=tmp.newFolder().getAbsolutePath();
  final boolean incremental=!CheckpointingOptions.INCREMENTAL_CHECKPOINTS.defaultValue();
  final Path expectedCheckpointsPath=new Path(appCheckpointDir);
  final Path expectedSavepointsPath=new Path(savepointDir);
  final RocksDBStateBackend backend=new RocksDBStateBackend(appCheckpointDir,incremental);
  backend.setDbStoragePaths(localDir1,localDir2);
  final Configuration config=new Configuration();
  config.setString(backendKey,"jobmanager");
  config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY,checkpointDir);
  config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY,savepointDir);
  config.setBoolean(CheckpointingOptions.INCREMENTAL_CHECKPOINTS,!incremental);
  config.setString(RocksDBOptions.LOCAL_DIRECTORIES,localDir3 + ":" + localDir4);
  final StateBackend loadedBackend=StateBackendLoader.fromApplicationOrConfigOrDefault(backend,config,cl,null);
  assertTrue(loadedBackend instanceof RocksDBStateBackend);
  final RocksDBStateBackend loadedRocks=(RocksDBStateBackend)loadedBackend;
  assertEquals(incremental,loadedRocks.isIncrementalCheckpointsEnabled());
  checkPaths(loadedRocks.getDbStoragePaths(),localDir1,localDir2);
  AbstractFileStateBackend fsBackend=(AbstractFileStateBackend)loadedRocks.getCheckpointBackend();
  assertEquals(expectedCheckpointsPath,fsBackend.getCheckpointPath());
  assertEquals(expectedSavepointsPath,fsBackend.getSavepointPath());
}
