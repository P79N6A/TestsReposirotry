/** 
 * This also verifies that the timestamps ouf side-emitted records is correct.
 */
@Test public void testSideOutput() throws Exception {
  ProcessOperator<Integer,String> operator=new ProcessOperator<>(new SideOutputProcessFunction());
  OneInputStreamOperatorTestHarness<Integer,String> testHarness=new OneInputStreamOperatorTestHarness<>(operator);
  testHarness.setup();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(42,17L));
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  expectedOutput.add(new StreamRecord<>("IN:42",17L));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  ConcurrentLinkedQueue<StreamRecord<Integer>> expectedIntSideOutput=new ConcurrentLinkedQueue<>();
  expectedIntSideOutput.add(new StreamRecord<>(42,17L));
  ConcurrentLinkedQueue<StreamRecord<Integer>> intSideOutput=testHarness.getSideOutput(SideOutputProcessFunction.INTEGER_OUTPUT_TAG);
  TestHarnessUtil.assertOutputEquals("Side output was not correct.",expectedIntSideOutput,intSideOutput);
  ConcurrentLinkedQueue<StreamRecord<Long>> expectedLongSideOutput=new ConcurrentLinkedQueue<>();
  expectedLongSideOutput.add(new StreamRecord<>(42L,17L));
  ConcurrentLinkedQueue<StreamRecord<Long>> longSideOutput=testHarness.getSideOutput(SideOutputProcessFunction.LONG_OUTPUT_TAG);
  TestHarnessUtil.assertOutputEquals("Side output was not correct.",expectedLongSideOutput,longSideOutput);
  testHarness.close();
}
