@Test public void testCheckAgainstOverflowUnderflowOnRelease(){
  MemorySegment seg=createSegment(512);
  seg.free();
  try {
    seg.get(0);
    fail("Expecting an IllegalStateException");
  }
 catch (  Exception e) {
    assertTrue(e instanceof IllegalStateException || e instanceof NullPointerException);
  }
  try {
    seg.get(Integer.MAX_VALUE);
    fail("Expecting an IllegalStateException");
  }
 catch (  Exception e) {
    assertTrue(e instanceof IllegalStateException || e instanceof NullPointerException);
  }
  try {
    seg.get(Integer.MIN_VALUE);
    fail("Expecting an IllegalStateException");
  }
 catch (  Exception e) {
    assertTrue(e instanceof IllegalStateException || e instanceof NullPointerException);
  }
  try {
    seg.getLong(0);
    fail("Expecting an IllegalStateException");
  }
 catch (  Exception e) {
    assertTrue(e instanceof IllegalStateException || e instanceof NullPointerException);
  }
  try {
    seg.getLong(Integer.MAX_VALUE);
    fail("Expecting an IllegalStateException");
  }
 catch (  Exception e) {
    assertTrue(e instanceof IllegalStateException || e instanceof NullPointerException);
  }
  try {
    seg.getLong(Integer.MIN_VALUE);
    fail("Expecting an IllegalStateException");
  }
 catch (  Exception e) {
    assertTrue(e instanceof IllegalStateException || e instanceof NullPointerException);
  }
}
