/** 
 * Tests broadcasting events when records have been emitted. The emitted records cover all three  {@link SerializationResult} types.
 */
@Test public void testBroadcastEventMixedRecords() throws Exception {
  Random rand=new XORShiftRandom();
  int numChannels=4;
  int bufferSize=32;
  int lenBytes=4;
  @SuppressWarnings("unchecked") Queue<BufferConsumer>[] queues=new Queue[numChannels];
  for (int i=0; i < numChannels; i++) {
    queues[i]=new ArrayDeque<>();
  }
  TestPooledBufferProvider bufferProvider=new TestPooledBufferProvider(Integer.MAX_VALUE,bufferSize);
  ResultPartitionWriter partitionWriter=new CollectingPartitionWriter(queues,bufferProvider);
  RecordWriter<ByteArrayIO> writer=new RecordWriter<>(partitionWriter,new RoundRobin<ByteArrayIO>());
  CheckpointBarrier barrier=new CheckpointBarrier(Integer.MAX_VALUE + 1292L,Integer.MAX_VALUE + 199L,CheckpointOptions.forCheckpointWithDefaultLocation());
  byte[] bytes=new byte[bufferSize / 2];
  rand.nextBytes(bytes);
  writer.emit(new ByteArrayIO(bytes));
  bytes=new byte[bufferSize + 1];
  rand.nextBytes(bytes);
  writer.emit(new ByteArrayIO(bytes));
  bytes=new byte[bufferSize - lenBytes];
  rand.nextBytes(bytes);
  writer.emit(new ByteArrayIO(bytes));
  writer.broadcastEvent(barrier);
  assertEquals(4,bufferProvider.getNumberOfCreatedBuffers());
  BufferOrEvent boe;
  assertEquals(2,queues[0].size());
  assertTrue(parseBuffer(queues[0].remove(),0).isBuffer());
  assertEquals(3,queues[1].size());
  assertTrue(parseBuffer(queues[1].remove(),1).isBuffer());
  assertTrue(parseBuffer(queues[1].remove(),1).isBuffer());
  assertEquals(2,queues[2].size());
  assertTrue(parseBuffer(queues[2].remove(),2).isBuffer());
  assertEquals(1,queues[3].size());
  for (int i=0; i < numChannels; i++) {
    boe=parseBuffer(queues[i].remove(),i);
    assertTrue(boe.isEvent());
    assertEquals(barrier,boe.getEvent());
  }
}
