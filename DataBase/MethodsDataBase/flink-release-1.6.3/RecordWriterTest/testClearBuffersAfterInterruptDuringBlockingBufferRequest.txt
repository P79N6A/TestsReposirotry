/** 
 * Tests a fix for FLINK-2089.
 * @see <a href="https://issues.apache.org/jira/browse/FLINK-2089">FLINK-2089</a>
 */
@Test public void testClearBuffersAfterInterruptDuringBlockingBufferRequest() throws Exception {
  ExecutorService executor=null;
  try {
    executor=Executors.newSingleThreadExecutor();
    final CountDownLatch sync=new CountDownLatch(2);
    final TrackingBufferRecycler recycler=new TrackingBufferRecycler();
    final MemorySegment memorySegment=MemorySegmentFactory.allocateUnpooledSegment(4);
    Answer<BufferBuilder> request=new Answer<BufferBuilder>(){
      @Override public BufferBuilder answer(      InvocationOnMock invocation) throws Throwable {
        sync.countDown();
        if (sync.getCount() == 1) {
          return new BufferBuilder(memorySegment,recycler);
        }
        final Object o=new Object();
synchronized (o) {
          while (true) {
            o.wait();
          }
        }
      }
    }
;
    BufferProvider bufferProvider=mock(BufferProvider.class);
    when(bufferProvider.requestBufferBuilderBlocking()).thenAnswer(request);
    ResultPartitionWriter partitionWriter=new RecyclingPartitionWriter(bufferProvider);
    final RecordWriter<IntValue> recordWriter=new RecordWriter<IntValue>(partitionWriter);
    Future<?> result=executor.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        IntValue val=new IntValue(0);
        try {
          recordWriter.emit(val);
          recordWriter.flushAll();
          recordWriter.emit(val);
        }
 catch (        InterruptedException e) {
          recordWriter.clearBuffers();
        }
        return null;
      }
    }
);
    sync.await();
    result.cancel(true);
    recordWriter.clearBuffers();
    verify(bufferProvider,times(2)).requestBufferBuilderBlocking();
    assertEquals(1,recycler.getRecycledMemorySegments().size());
    assertEquals(memorySegment,recycler.getRecycledMemorySegments().get(0));
  }
  finally {
    if (executor != null) {
      executor.shutdown();
    }
  }
}
