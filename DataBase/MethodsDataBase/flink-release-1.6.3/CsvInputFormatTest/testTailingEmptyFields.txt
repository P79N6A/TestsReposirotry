@Test public void testTailingEmptyFields() throws Exception {
  final String fileContent="aa,bb,cc\n" + "aa,bb,\n" + "aa,,\n"+ ",,\n"+ "aa,bb";
  final FileInputSplit split=createTempFile(fileContent);
  final TupleTypeInfo<Tuple3<String,String,String>> typeInfo=TupleTypeInfo.getBasicTupleTypeInfo(String.class,String.class,String.class);
  final CsvInputFormat<Tuple3<String,String,String>> format=new TupleCsvInputFormat<Tuple3<String,String,String>>(PATH,typeInfo);
  format.setFieldDelimiter(",");
  format.configure(new Configuration());
  format.open(split);
  Tuple3<String,String,String> result=new Tuple3<String,String,String>();
  result=format.nextRecord(result);
  assertNotNull(result);
  assertEquals("aa",result.f0);
  assertEquals("bb",result.f1);
  assertEquals("cc",result.f2);
  result=format.nextRecord(result);
  assertNotNull(result);
  assertEquals("aa",result.f0);
  assertEquals("bb",result.f1);
  assertEquals("",result.f2);
  result=format.nextRecord(result);
  assertNotNull(result);
  assertEquals("aa",result.f0);
  assertEquals("",result.f1);
  assertEquals("",result.f2);
  result=format.nextRecord(result);
  assertNotNull(result);
  assertEquals("",result.f0);
  assertEquals("",result.f1);
  assertEquals("",result.f2);
  try {
    format.nextRecord(result);
    fail("Parse Exception was not thrown! (Row too short)");
  }
 catch (  ParseException e) {
  }
}
