@Test public void testDirectoriesForExclusiveAndSharedState() throws Exception {
  final FileSystem fs=LocalFileSystem.getSharedInstance();
  final Path checkpointDir=randomTempPath();
  final Path sharedStateDir=randomTempPath();
  FsCheckpointStorageLocation storageLocation=new FsCheckpointStorageLocation(fs,checkpointDir,sharedStateDir,randomTempPath(),CheckpointStorageLocationReference.getDefault(),FILE_SIZE_THRESHOLD);
  assertNotEquals(storageLocation.getCheckpointDirectory(),storageLocation.getSharedStateDirectory());
  assertEquals(0,fs.listStatus(storageLocation.getCheckpointDirectory()).length);
  assertEquals(0,fs.listStatus(storageLocation.getSharedStateDirectory()).length);
  CheckpointStateOutputStream exclusiveStream=storageLocation.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE);
  exclusiveStream.write(42);
  exclusiveStream.flush();
  StreamStateHandle exclusiveHandle=exclusiveStream.closeAndGetHandle();
  assertEquals(1,fs.listStatus(storageLocation.getCheckpointDirectory()).length);
  assertEquals(0,fs.listStatus(storageLocation.getSharedStateDirectory()).length);
  CheckpointStateOutputStream sharedStream=storageLocation.createCheckpointStateOutputStream(CheckpointedStateScope.SHARED);
  sharedStream.write(42);
  sharedStream.flush();
  StreamStateHandle sharedHandle=sharedStream.closeAndGetHandle();
  assertEquals(1,fs.listStatus(storageLocation.getCheckpointDirectory()).length);
  assertEquals(1,fs.listStatus(storageLocation.getSharedStateDirectory()).length);
  exclusiveHandle.discardState();
  sharedHandle.discardState();
}
