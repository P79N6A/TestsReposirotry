@Test public void testClearingSharedBufferWithMultipleEdgesBetweenEntries() throws Exception {
  SharedBuffer<Event> sharedBuffer=TestSharedBuffer.createTestBuffer(Event.createTypeSerializer());
  int numberEvents=8;
  Event[] events=new Event[numberEvents];
  EventId[] eventIds=new EventId[numberEvents];
  final long timestamp=1L;
  for (int i=0; i < numberEvents; i++) {
    events[i]=new Event(i + 1,"e" + (i + 1),i);
    eventIds[i]=sharedBuffer.registerEvent(events[i],timestamp);
  }
  NodeId start=sharedBuffer.put("start",eventIds[1],null,DeweyNumber.fromString("1"));
  NodeId b0=sharedBuffer.put("branching",eventIds[2],start,DeweyNumber.fromString("1.0"));
  NodeId b1=sharedBuffer.put("branching",eventIds[3],start,DeweyNumber.fromString("1.1"));
  NodeId b00=sharedBuffer.put("branching",eventIds[3],b0,DeweyNumber.fromString("1.0.0"));
  sharedBuffer.put("branching",eventIds[4],b00,DeweyNumber.fromString("1.0.0.0"));
  NodeId b10=sharedBuffer.put("branching",eventIds[4],b1,DeweyNumber.fromString("1.1.0"));
  sharedBuffer.lockNode(b0);
  sharedBuffer.releaseNode(b10);
  for (  EventId eventId : eventIds) {
    sharedBuffer.releaseEvent(eventId);
  }
  assertFalse(sharedBuffer.isEmpty());
}
