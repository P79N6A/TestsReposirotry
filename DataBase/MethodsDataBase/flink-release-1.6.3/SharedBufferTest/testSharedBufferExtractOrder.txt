@Test public void testSharedBufferExtractOrder() throws Exception {
  SharedBuffer<Event> sharedBuffer=TestSharedBuffer.createTestBuffer(Event.createTypeSerializer());
  int numberEvents=5;
  Event[] events=new Event[numberEvents];
  EventId[] eventIds=new EventId[numberEvents];
  final long timestamp=1L;
  for (int i=0; i < numberEvents; i++) {
    events[i]=new Event(i + 1,"e" + (i + 1),i);
    eventIds[i]=sharedBuffer.registerEvent(events[i],timestamp);
  }
  Map<String,List<Event>> expectedResult=new LinkedHashMap<>();
  expectedResult.put("a",new ArrayList<>());
  expectedResult.get("a").add(events[0]);
  expectedResult.put("b",new ArrayList<>());
  expectedResult.get("b").add(events[1]);
  expectedResult.put("aa",new ArrayList<>());
  expectedResult.get("aa").add(events[2]);
  expectedResult.put("bb",new ArrayList<>());
  expectedResult.get("bb").add(events[3]);
  expectedResult.put("c",new ArrayList<>());
  expectedResult.get("c").add(events[4]);
  NodeId a=sharedBuffer.put("a",eventIds[0],null,DeweyNumber.fromString("1"));
  NodeId b=sharedBuffer.put("b",eventIds[1],a,DeweyNumber.fromString("1.0"));
  NodeId aa=sharedBuffer.put("aa",eventIds[2],b,DeweyNumber.fromString("1.0.0"));
  NodeId bb=sharedBuffer.put("bb",eventIds[3],aa,DeweyNumber.fromString("1.0.0.0"));
  NodeId c=sharedBuffer.put("c",eventIds[4],bb,DeweyNumber.fromString("1.0.0.0.0"));
  Map<String,List<Event>> patternsResult=sharedBuffer.materializeMatch(sharedBuffer.extractPatterns(c,DeweyNumber.fromString("1.0.0.0.0")).get(0));
  List<String> expectedOrder=new ArrayList<>();
  expectedOrder.add("a");
  expectedOrder.add("b");
  expectedOrder.add("aa");
  expectedOrder.add("bb");
  expectedOrder.add("c");
  for (  EventId eventId : eventIds) {
    sharedBuffer.releaseEvent(eventId);
  }
  List<String> resultOrder=new ArrayList<>(patternsResult.keySet());
  assertEquals(expectedOrder,resultOrder);
}
