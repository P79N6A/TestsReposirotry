@Test public void testSharedBuffer() throws Exception {
  SharedBuffer<Event> sharedBuffer=TestSharedBuffer.createTestBuffer(Event.createTypeSerializer());
  int numberEvents=8;
  Event[] events=new Event[numberEvents];
  EventId[] eventIds=new EventId[numberEvents];
  final long timestamp=1L;
  for (int i=0; i < numberEvents; i++) {
    events[i]=new Event(i + 1,"e" + (i + 1),i);
    eventIds[i]=sharedBuffer.registerEvent(events[i],timestamp);
  }
  Map<String,List<Event>> expectedPattern1=new HashMap<>();
  expectedPattern1.put("a1",new ArrayList<>());
  expectedPattern1.get("a1").add(events[2]);
  expectedPattern1.put("a[]",new ArrayList<>());
  expectedPattern1.get("a[]").add(events[3]);
  expectedPattern1.put("b",new ArrayList<>());
  expectedPattern1.get("b").add(events[5]);
  Map<String,List<Event>> expectedPattern2=new HashMap<>();
  expectedPattern2.put("a1",new ArrayList<>());
  expectedPattern2.get("a1").add(events[0]);
  expectedPattern2.put("a[]",new ArrayList<>());
  expectedPattern2.get("a[]").add(events[1]);
  expectedPattern2.get("a[]").add(events[2]);
  expectedPattern2.get("a[]").add(events[3]);
  expectedPattern2.get("a[]").add(events[4]);
  expectedPattern2.put("b",new ArrayList<>());
  expectedPattern2.get("b").add(events[5]);
  Map<String,List<Event>> expectedPattern3=new HashMap<>();
  expectedPattern3.put("a1",new ArrayList<>());
  expectedPattern3.get("a1").add(events[0]);
  expectedPattern3.put("a[]",new ArrayList<>());
  expectedPattern3.get("a[]").add(events[1]);
  expectedPattern3.get("a[]").add(events[2]);
  expectedPattern3.get("a[]").add(events[3]);
  expectedPattern3.get("a[]").add(events[4]);
  expectedPattern3.get("a[]").add(events[5]);
  expectedPattern3.get("a[]").add(events[6]);
  expectedPattern3.put("b",new ArrayList<>());
  expectedPattern3.get("b").add(events[7]);
  NodeId a10=sharedBuffer.put("a1",eventIds[0],null,DeweyNumber.fromString("1"));
  NodeId aLoop0=sharedBuffer.put("a[]",eventIds[1],a10,DeweyNumber.fromString("1.0"));
  NodeId a11=sharedBuffer.put("a1",eventIds[2],null,DeweyNumber.fromString("2"));
  NodeId aLoop1=sharedBuffer.put("a[]",eventIds[2],aLoop0,DeweyNumber.fromString("1.0"));
  NodeId aLoop2=sharedBuffer.put("a[]",eventIds[3],aLoop1,DeweyNumber.fromString("1.0"));
  NodeId aSecondLoop0=sharedBuffer.put("a[]",eventIds[3],a11,DeweyNumber.fromString("2.0"));
  NodeId aLoop3=sharedBuffer.put("a[]",eventIds[4],aLoop2,DeweyNumber.fromString("1.0"));
  NodeId b0=sharedBuffer.put("b",eventIds[5],aLoop3,DeweyNumber.fromString("1.0.0"));
  NodeId aLoop4=sharedBuffer.put("a[]",eventIds[5],aLoop3,DeweyNumber.fromString("1.1"));
  NodeId b1=sharedBuffer.put("b",eventIds[5],aSecondLoop0,DeweyNumber.fromString("2.0.0"));
  NodeId aLoop5=sharedBuffer.put("a[]",eventIds[6],aLoop4,DeweyNumber.fromString("1.1"));
  NodeId b3=sharedBuffer.put("b",eventIds[7],aLoop5,DeweyNumber.fromString("1.1.0"));
  List<Map<String,List<EventId>>> patterns3=sharedBuffer.extractPatterns(b3,DeweyNumber.fromString("1.1.0"));
  assertEquals(1L,patterns3.size());
  assertEquals(expectedPattern3,sharedBuffer.materializeMatch(patterns3.get(0)));
  sharedBuffer.releaseNode(b3);
  List<Map<String,List<EventId>>> patterns4=sharedBuffer.extractPatterns(b3,DeweyNumber.fromString("1.1.0"));
  assertEquals(0L,patterns4.size());
  assertTrue(patterns4.isEmpty());
  List<Map<String,List<EventId>>> patterns1=sharedBuffer.extractPatterns(b1,DeweyNumber.fromString("2.0.0"));
  assertEquals(1L,patterns1.size());
  assertEquals(expectedPattern1,sharedBuffer.materializeMatch(patterns1.get(0)));
  List<Map<String,List<EventId>>> patterns2=sharedBuffer.extractPatterns(b0,DeweyNumber.fromString("1.0.0"));
  assertEquals(1L,patterns2.size());
  assertEquals(expectedPattern2,sharedBuffer.materializeMatch(patterns2.get(0)));
  sharedBuffer.releaseNode(b1);
  sharedBuffer.releaseNode(b0);
  for (  EventId eventId : eventIds) {
    sharedBuffer.releaseEvent(eventId);
  }
  assertTrue(sharedBuffer.isEmpty());
}
