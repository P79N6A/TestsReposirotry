@Test public void testMetricsReporting(){
  StreamShardHandle fakeToBeConsumedShard=getMockStreamShard("fakeStream",0);
  LinkedList<KinesisStreamShardState> subscribedShardsStateUnderTest=new LinkedList<>();
  subscribedShardsStateUnderTest.add(new KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(fakeToBeConsumedShard),fakeToBeConsumedShard,new SequenceNumber("fakeStartingState")));
  TestSourceContext<String> sourceContext=new TestSourceContext<>();
  TestableKinesisDataFetcher<String> fetcher=new TestableKinesisDataFetcher<>(Collections.singletonList("fakeStream"),sourceContext,new Properties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),10,2,new AtomicReference<>(),subscribedShardsStateUnderTest,KinesisDataFetcher.createInitialSubscribedStreamsToLastDiscoveredShardsState(Collections.singletonList("fakeStream")),Mockito.mock(KinesisProxyInterface.class));
  ShardMetricsReporter shardMetricsReporter=new ShardMetricsReporter();
  long millisBehindLatest=500L;
  new ShardConsumer<>(fetcher,0,subscribedShardsStateUnderTest.get(0).getStreamShardHandle(),subscribedShardsStateUnderTest.get(0).getLastProcessedSequenceNum(),FakeKinesisBehavioursFactory.totalNumOfRecordsAfterNumOfGetRecordsCalls(1000,9,millisBehindLatest),shardMetricsReporter).run();
  assertEquals(millisBehindLatest,shardMetricsReporter.getMillisBehindLatest());
}
