@Test public void testCorrectNumOfCollectedRecordsAndUpdatedStateWithAdaptiveReads(){
  Properties consumerProperties=new Properties();
  consumerProperties.put("flink.shard.adaptivereads","true");
  StreamShardHandle fakeToBeConsumedShard=getMockStreamShard("fakeStream",0);
  LinkedList<KinesisStreamShardState> subscribedShardsStateUnderTest=new LinkedList<>();
  subscribedShardsStateUnderTest.add(new KinesisStreamShardState(KinesisDataFetcher.convertToStreamShardMetadata(fakeToBeConsumedShard),fakeToBeConsumedShard,new SequenceNumber("fakeStartingState")));
  TestSourceContext<String> sourceContext=new TestSourceContext<>();
  TestableKinesisDataFetcher<String> fetcher=new TestableKinesisDataFetcher<>(Collections.singletonList("fakeStream"),sourceContext,consumerProperties,new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),10,2,new AtomicReference<>(),subscribedShardsStateUnderTest,KinesisDataFetcher.createInitialSubscribedStreamsToLastDiscoveredShardsState(Collections.singletonList("fakeStream")),Mockito.mock(KinesisProxyInterface.class));
  new ShardConsumer<>(fetcher,0,subscribedShardsStateUnderTest.get(0).getStreamShardHandle(),subscribedShardsStateUnderTest.get(0).getLastProcessedSequenceNum(),FakeKinesisBehavioursFactory.initialNumOfRecordsAfterNumOfGetRecordsCallsWithAdaptiveReads(10,2,500L),new ShardMetricsReporter()).run();
  assertEquals(50,sourceContext.getCollectedOutputs().size());
  assertEquals(SentinelSequenceNumber.SENTINEL_SHARD_ENDING_SEQUENCE_NUM.get(),subscribedShardsStateUnderTest.get(0).getLastProcessedSequenceNum());
}
