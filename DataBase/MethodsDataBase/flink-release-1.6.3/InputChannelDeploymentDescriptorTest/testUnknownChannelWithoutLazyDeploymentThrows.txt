@Test public void testUnknownChannelWithoutLazyDeploymentThrows() throws Exception {
  ResourceID consumerResourceId=ResourceID.generate();
  ExecutionVertex consumer=mock(ExecutionVertex.class);
  LogicalSlot consumerSlot=mockSlot(consumerResourceId);
  ExecutionVertex unknownProducer=mockExecutionVertex(ExecutionState.CREATED,null);
  IntermediateResultPartition unknownPartition=mockPartition(unknownProducer);
  ResultPartitionID unknownPartitionId=new ResultPartitionID(unknownPartition.getPartitionId(),unknownProducer.getCurrentExecutionAttempt().getAttemptId());
  ExecutionEdge unknownEdge=new ExecutionEdge(unknownPartition,consumer,2);
  boolean allowLazyDeployment=true;
  InputChannelDeploymentDescriptor[] desc=InputChannelDeploymentDescriptor.fromEdges(new ExecutionEdge[]{unknownEdge},consumerSlot.getTaskManagerLocation().getResourceID(),allowLazyDeployment);
  assertEquals(1,desc.length);
  assertEquals(unknownPartitionId,desc[0].getConsumedPartitionId());
  assertTrue(desc[0].getConsumedPartitionLocation().isUnknown());
  assertNull(desc[0].getConsumedPartitionLocation().getConnectionId());
  try {
    allowLazyDeployment=false;
    InputChannelDeploymentDescriptor.fromEdges(new ExecutionEdge[]{unknownEdge},consumerSlot.getTaskManagerLocation().getResourceID(),allowLazyDeployment);
    fail("Did not throw expected ExecutionGraphException");
  }
 catch (  ExecutionGraphException ignored) {
  }
}
