@Test public void testSequentialAllocateAndRelease(){
  try {
    final JobVertexID jid1=new JobVertexID();
    final JobVertexID jid2=new JobVertexID();
    final JobVertexID jid3=new JobVertexID();
    final JobVertexID jid4=new JobVertexID();
    final SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1,jid2,jid3,jid4);
    testingSlotProvider.addTaskManager(4);
    LogicalSlot slot_1_1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,0,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot slot_1_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,1,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot slot_2_1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,0,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot slot_2_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,1,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot slot_3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid3,0,1,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot slot_1_3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,2,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot slot_1_4=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,3,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot slot_2_3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,2,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot slot_2_4=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,3,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    slot_1_1.releaseSlot();
    slot_1_2.releaseSlot();
    slot_1_3.releaseSlot();
    slot_1_4.releaseSlot();
    slot_2_1.releaseSlot();
    slot_2_2.releaseSlot();
    slot_2_3.releaseSlot();
    slot_2_4.releaseSlot();
    LogicalSlot slot_4_1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid4,0,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot slot_4_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid4,1,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot slot_4_3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid4,2,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot slot_4_4=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid4,3,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    slot_3.releaseSlot();
    slot_4_1.releaseSlot();
    slot_4_2.releaseSlot();
    slot_4_3.releaseSlot();
    slot_4_4.releaseSlot();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
