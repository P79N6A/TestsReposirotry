@Test public void allocateSlotWithTemporarilyEmptyVertexGroup(){
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    JobVertexID jid3=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1,jid2,jid3);
    testingSlotProvider.addTaskManager(2);
    testingSlotProvider.addTaskManager(2);
    LogicalSlot s1_1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,0,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s2_1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,1,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s3_1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,2,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s4_1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,3,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(s1_1);
    assertNotNull(s2_1);
    assertNotNull(s3_1);
    assertNotNull(s4_1);
    assertTrue(areAllDistinct(s1_1,s2_1,s3_1,s4_1));
    LogicalSlot s1_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,0,7,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s2_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,1,7,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s3_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,2,7,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s4_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,3,7,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(s1_2);
    assertNotNull(s2_2);
    assertNotNull(s3_2);
    assertNotNull(s4_2);
    assertTrue(areAllDistinct(s1_2,s2_2,s3_2,s4_2));
    LogicalSlot s1_3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid3,0,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s2_3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid3,1,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s3_3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid3,2,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s4_3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid3,3,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(s1_3);
    assertNotNull(s2_3);
    assertNotNull(s3_3);
    assertNotNull(s4_3);
    assertTrue(areAllDistinct(s1_3,s2_3,s3_3,s4_3));
    try {
      testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,4,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    ExecutionException e) {
      assertTrue(e.getCause() instanceof NoResourceAvailableException);
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    s1_2.releaseSlot();
    s2_2.releaseSlot();
    s3_2.releaseSlot();
    s4_2.releaseSlot();
    LogicalSlot s5_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,5,7,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s6_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,6,7,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s7_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,7,7,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(s5_2);
    assertNotNull(s6_2);
    assertNotNull(s7_2);
    s1_1.releaseSlot();
    s2_1.releaseSlot();
    s3_1.releaseSlot();
    s4_1.releaseSlot();
    s5_2.releaseSlot();
    s6_2.releaseSlot();
    s7_2.releaseSlot();
    assertEquals(0,testingSlotProvider.getNumberOfAvailableSlots());
    s1_3.releaseSlot();
    s2_3.releaseSlot();
    s3_3.releaseSlot();
    s4_3.releaseSlot();
    assertEquals(4,testingSlotProvider.getNumberOfAvailableSlots());
    assertEquals(0,testingSlotProvider.getNumberOfLocalizedAssignments());
    assertEquals(0,testingSlotProvider.getNumberOfNonLocalizedAssignments());
    assertEquals(15,testingSlotProvider.getNumberOfUnconstrainedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
