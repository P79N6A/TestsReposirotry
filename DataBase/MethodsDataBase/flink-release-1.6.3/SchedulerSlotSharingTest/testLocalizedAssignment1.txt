/** 
 * Tests that the scheduler assigns the correct existing shared slots
 */
@Test public void testLocalizedAssignment1(){
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1,jid2);
    TaskManagerLocation loc1=testingSlotProvider.addTaskManager(2);
    TaskManagerLocation loc2=testingSlotProvider.addTaskManager(2);
    LogicalSlot s1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertexWithLocation(jid1,0,2,sharingGroup,loc1),sharingGroup.getSlotSharingGroupId()),false,slotProfileForLocation(loc1),TestingUtils.infiniteTime()).get();
    LogicalSlot s2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertexWithLocation(jid1,1,2,sharingGroup,loc2),sharingGroup.getSlotSharingGroupId()),false,slotProfileForLocation(loc2),TestingUtils.infiniteTime()).get();
    assertNotNull(s1);
    assertNotNull(s2);
    assertEquals(2,testingSlotProvider.getNumberOfSlots(sharingGroup));
    assertEquals(loc1,s1.getTaskManagerLocation());
    assertEquals(loc2,s2.getTaskManagerLocation());
    LogicalSlot s3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertexWithLocation(jid2,0,2,sharingGroup,loc1),sharingGroup.getSlotSharingGroupId()),false,slotProfileForLocation(loc1),TestingUtils.infiniteTime()).get();
    LogicalSlot s4=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertexWithLocation(jid2,1,2,sharingGroup,loc2),sharingGroup.getSlotSharingGroupId()),false,slotProfileForLocation(loc2),TestingUtils.infiniteTime()).get();
    assertNotNull(s3);
    assertNotNull(s4);
    assertEquals(2,testingSlotProvider.getNumberOfSlots(sharingGroup));
    assertEquals(loc1,s3.getTaskManagerLocation());
    assertEquals(loc2,s4.getTaskManagerLocation());
    assertEquals(2,testingSlotProvider.getNumberOfAvailableSlots());
    assertEquals(4,testingSlotProvider.getNumberOfLocalizedAssignments());
    assertEquals(0,testingSlotProvider.getNumberOfNonLocalizedAssignments());
    assertEquals(0,testingSlotProvider.getNumberOfUnconstrainedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
