@Test public void scheduleMixedSharingAndNonSharing(){
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    JobVertexID jidA=new JobVertexID();
    JobVertexID jidB=new JobVertexID();
    JobVertexID jidC=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1,jid2);
    testingSlotProvider.addTaskManager(3);
    testingSlotProvider.addTaskManager(2);
    LogicalSlot sA2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jidA,1,2,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot sA1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jidA,0,2,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(sA1);
    assertNotNull(sA2);
    LogicalSlot s1_0=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,0,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s1_1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,1,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s2_0=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,0,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s2_1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,1,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(s1_0);
    assertNotNull(s1_1);
    assertNotNull(s2_0);
    assertNotNull(s2_1);
    LogicalSlot sB1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jidB,1,3,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(sB1);
    try {
      testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,2,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    ExecutionException e) {
      assertTrue(e.getCause() instanceof NoResourceAvailableException);
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    try {
      testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,2,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    ExecutionException e) {
      assertTrue(e.getCause() instanceof NoResourceAvailableException);
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    try {
      testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jidB,0,3,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    ExecutionException e) {
      assertTrue(e.getCause() instanceof NoResourceAvailableException);
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    try {
      testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jidC,0,1,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    ExecutionException e) {
      assertTrue(e.getCause() instanceof NoResourceAvailableException);
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    sA1.releaseSlot();
    LogicalSlot s1_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,2,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s2_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,3,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(s1_2);
    assertNotNull(s2_2);
    s1_0.releaseSlot();
    s1_1.releaseSlot();
    s2_0.releaseSlot();
    assertEquals(1,testingSlotProvider.getNumberOfAvailableSlots());
    LogicalSlot sB0=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jidB,0,3,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(sB0);
    s2_1.releaseSlot();
    LogicalSlot sB2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jidB,2,3,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(sB2);
    sA2.releaseSlot();
    LogicalSlot s1_3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,3,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s2_3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,2,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(s1_3);
    assertNotNull(s2_3);
    s1_2.releaseSlot();
    s2_2.releaseSlot();
    s1_3.releaseSlot();
    s2_3.releaseSlot();
    LogicalSlot sC0=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jidC,1,2,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot sC1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jidC,0,2,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(sC0);
    assertNotNull(sC1);
    sB0.releaseSlot();
    sB1.releaseSlot();
    sB2.releaseSlot();
    sC0.releaseSlot();
    sC1.releaseSlot();
    assertEquals(5,testingSlotProvider.getNumberOfAvailableSlots());
    assertEquals(0,testingSlotProvider.getNumberOfLocalizedAssignments());
    assertEquals(0,testingSlotProvider.getNumberOfNonLocalizedAssignments());
    assertEquals(15,testingSlotProvider.getNumberOfUnconstrainedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
