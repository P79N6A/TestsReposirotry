@Test public void scheduleSingleVertexType(){
  try {
    JobVertexID jid1=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1);
    final ResourceID tm1ResourceId=testingSlotProvider.addTaskManager(2).getResourceID();
    testingSlotProvider.addTaskManager(2);
    LogicalSlot s1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,0,8,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,1,8,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,2,8,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s4=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,3,8,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(s1);
    assertNotNull(s2);
    assertNotNull(s3);
    assertNotNull(s4);
    assertTrue(areAllDistinct(s1,s2,s3,s4));
    try {
      testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,4,8,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
      fail("Scheduler accepted too many tasks at the same time");
    }
 catch (    ExecutionException e) {
      assertTrue(e.getCause() instanceof NoResourceAvailableException);
    }
catch (    Exception e) {
      fail("Wrong exception.");
    }
    s3.releaseSlot();
    LogicalSlot s5=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,4,8,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(s5);
    s1.releaseSlot();
    s2.releaseSlot();
    s4.releaseSlot();
    LogicalSlot s6=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,5,8,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s7=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,6,8,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s8=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,7,8,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(s6);
    assertNotNull(s7);
    assertNotNull(s8);
    int c=0;
    c+=(s5.getTaskManagerLocation().getResourceID().equals(tm1ResourceId)) ? 1 : -1;
    c+=(s6.getTaskManagerLocation().getResourceID().equals(tm1ResourceId)) ? 1 : -1;
    c+=(s7.getTaskManagerLocation().getResourceID().equals(tm1ResourceId)) ? 1 : -1;
    c+=(s8.getTaskManagerLocation().getResourceID().equals(tm1ResourceId)) ? 1 : -1;
    assertEquals(0,c);
    s5.releaseSlot();
    s6.releaseSlot();
    s7.releaseSlot();
    s8.releaseSlot();
    assertEquals(4,testingSlotProvider.getNumberOfAvailableSlots());
    assertEquals(0,testingSlotProvider.getNumberOfLocalizedAssignments());
    assertEquals(0,testingSlotProvider.getNumberOfNonLocalizedAssignments());
    assertEquals(8,testingSlotProvider.getNumberOfUnconstrainedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
