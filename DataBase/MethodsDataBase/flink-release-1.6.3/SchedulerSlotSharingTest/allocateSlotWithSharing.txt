@Test public void allocateSlotWithSharing() throws Exception {
  JobVertexID jid1=new JobVertexID();
  JobVertexID jid2=new JobVertexID();
  SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1,jid2);
  testingSlotProvider.addTaskManager(2);
  testingSlotProvider.addTaskManager(2);
  LogicalSlot s1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,0,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,1,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,2,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s4=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,3,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  assertNotNull(s1);
  assertNotNull(s2);
  assertNotNull(s3);
  assertNotNull(s4);
  assertTrue(areAllDistinct(s1,s2,s3,s4));
  try {
    testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,4,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    fail("Scheduler accepted too many tasks at the same time");
  }
 catch (  ExecutionException e) {
    assertTrue(e.getCause() instanceof NoResourceAvailableException);
  }
catch (  Exception e) {
    fail("Wrong exception.");
  }
  LogicalSlot s1_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,0,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s2_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,1,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s3_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,2,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s4_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,3,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  assertNotNull(s1_2);
  assertNotNull(s2_2);
  assertNotNull(s3_2);
  assertNotNull(s4_2);
  try {
    testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,4,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    fail("Scheduler accepted too many tasks at the same time");
  }
 catch (  ExecutionException e) {
    assertTrue(e.getCause() instanceof NoResourceAvailableException);
  }
catch (  Exception e) {
    fail("Wrong exception.");
  }
  s1.releaseSlot();
  s4.releaseSlot();
  assertEquals(4,testingSlotProvider.getNumberOfSlots(sharingGroup));
  assertEquals(2,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid1));
  assertEquals(0,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid2));
  try {
    testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,4,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    fail("Scheduler accepted too many tasks at the same time");
  }
 catch (  ExecutionException e) {
    assertTrue(e.getCause() instanceof NoResourceAvailableException);
  }
catch (  Exception e) {
    fail("Wrong exception.");
  }
  LogicalSlot s5=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,4,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  assertNotNull(s5);
  assertEquals(4,testingSlotProvider.getNumberOfSlots(sharingGroup));
  assertEquals(1,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid1));
  assertEquals(0,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid2));
  s2_2.releaseSlot();
  LogicalSlot s5_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,4,5,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  assertNotNull(s5_2);
  s2.releaseSlot();
  s3.releaseSlot();
  s5.releaseSlot();
  s1_2.releaseSlot();
  s3_2.releaseSlot();
  s4_2.releaseSlot();
  s5_2.releaseSlot();
  assertEquals(0,testingSlotProvider.getNumberOfSlots(sharingGroup));
  assertEquals(4,testingSlotProvider.getNumberOfAvailableSlots());
  assertEquals(0,testingSlotProvider.getNumberOfLocalizedAssignments());
  assertEquals(0,testingSlotProvider.getNumberOfNonLocalizedAssignments());
  assertEquals(10,testingSlotProvider.getNumberOfUnconstrainedAssignments());
}
