@Test public void allocateSlotWithIntermediateTotallyEmptySharingGroup(){
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1,jid2);
    testingSlotProvider.addTaskManager(2);
    testingSlotProvider.addTaskManager(2);
    LogicalSlot s1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,0,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,1,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,2,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s4=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,3,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertEquals(4,testingSlotProvider.getNumberOfSlots(sharingGroup));
    assertEquals(0,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid1));
    assertEquals(4,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid2));
    s1.releaseSlot();
    s2.releaseSlot();
    s3.releaseSlot();
    s4.releaseSlot();
    assertEquals(0,testingSlotProvider.getNumberOfSlots(sharingGroup));
    assertEquals(0,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid1));
    assertEquals(0,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid2));
    LogicalSlot s1_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,0,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s2_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,1,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s3_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,2,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s4_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,3,4,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertEquals(4,testingSlotProvider.getNumberOfSlots(sharingGroup));
    assertEquals(4,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid1));
    assertEquals(0,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid2));
    s1_2.releaseSlot();
    s2_2.releaseSlot();
    s3_2.releaseSlot();
    s4_2.releaseSlot();
    assertEquals(0,testingSlotProvider.getNumberOfSlots(sharingGroup));
    assertEquals(0,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid1));
    assertEquals(0,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid2));
    assertEquals(4,testingSlotProvider.getNumberOfAvailableSlots());
    assertEquals(0,testingSlotProvider.getNumberOfLocalizedAssignments());
    assertEquals(0,testingSlotProvider.getNumberOfNonLocalizedAssignments());
    assertEquals(8,testingSlotProvider.getNumberOfUnconstrainedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
