@Test public void allocateSlotWithTemporarilyEmptyVertexGroup2(){
  try {
    JobVertexID jid1=new JobVertexID();
    JobVertexID jid2=new JobVertexID();
    JobVertexID jid3=new JobVertexID();
    SlotSharingGroup sharingGroup=new SlotSharingGroup(jid1,jid2);
    testingSlotProvider.addTaskManager(2);
    LogicalSlot s1_1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,0,2,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s2_1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,0,2,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    LogicalSlot s2_2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,1,2,sharingGroup),sharingGroup.getSlotSharingGroupId()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(s1_1);
    assertNotNull(s2_1);
    assertNotNull(s2_2);
    assertEquals(2,testingSlotProvider.getNumberOfSlots(sharingGroup));
    assertEquals(1,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid1));
    assertEquals(0,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid2));
    s2_1.releaseSlot();
    s2_2.releaseSlot();
    LogicalSlot sx=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid3,0,1,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    assertNotNull(sx);
    assertEquals(1,testingSlotProvider.getNumberOfSlots(sharingGroup));
    assertEquals(0,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid1));
    assertEquals(1,testingSlotProvider.getNumberOfAvailableSlotsForGroup(sharingGroup,jid2));
    assertEquals(0,testingSlotProvider.getNumberOfLocalizedAssignments());
    assertEquals(0,testingSlotProvider.getNumberOfNonLocalizedAssignments());
    assertEquals(4,testingSlotProvider.getNumberOfUnconstrainedAssignments());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
