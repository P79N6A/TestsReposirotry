/** 
 * Tests that validates that embarrassingly parallel chains of vertices work correctly. <pre> (a1) --> (b1) (a2) --> (b2) (a3) --> (b3) ... </pre>
 */
@Test public void testEmbarrassinglyParallelCase() throws Exception {
  int parallelism=10000;
  final JobVertex vertex1=new JobVertex("vertex1");
  vertex1.setInvokableClass(NoOpInvokable.class);
  vertex1.setParallelism(parallelism);
  final JobVertex vertex2=new JobVertex("vertex2");
  vertex2.setInvokableClass(NoOpInvokable.class);
  vertex2.setParallelism(parallelism);
  final JobVertex vertex3=new JobVertex("vertex3");
  vertex3.setInvokableClass(NoOpInvokable.class);
  vertex3.setParallelism(parallelism);
  vertex2.connectNewDataSetAsInput(vertex1,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED);
  vertex3.connectNewDataSetAsInput(vertex2,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED);
  final JobGraph jobGraph=new JobGraph("test job",vertex1,vertex2,vertex3);
  final ExecutionGraph eg=createExecutionGraph(jobGraph);
  RestartPipelinedRegionStrategy failoverStrategy=(RestartPipelinedRegionStrategy)eg.getFailoverStrategy();
  FailoverRegion preRegion1=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex1.getID()).getTaskVertices()[0]);
  FailoverRegion preRegion2=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex2.getID()).getTaskVertices()[0]);
  FailoverRegion preRegion3=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex3.getID()).getTaskVertices()[0]);
  assertTrue(preRegion1 == preRegion2);
  assertTrue(preRegion2 == preRegion3);
  for (int i=1; i < parallelism; ++i) {
    FailoverRegion region1=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex1.getID()).getTaskVertices()[i]);
    FailoverRegion region2=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex2.getID()).getTaskVertices()[i]);
    FailoverRegion region3=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex3.getID()).getTaskVertices()[i]);
    assertTrue(region1 == region2);
    assertTrue(region2 == region3);
    assertTrue(preRegion1 != region1);
  }
}
