/** 
 * Cascades of joins with partially blocking, partially pipelined exchanges: <pre> (1)--+ +--(5)-+ (2)--+      | (block) | +--(7) | (block) (3)--+      | +--(6)-+ (4)--+ ... </pre> Component 1: 1, 2, 5; component 2: 3,4,6; component 3: 7 
 */
@Test public void testMultipleComponentsViaCascadeOfJoins() throws Exception {
  final JobVertex vertex1=new JobVertex("vertex1");
  vertex1.setInvokableClass(NoOpInvokable.class);
  vertex1.setParallelism(8);
  final JobVertex vertex2=new JobVertex("vertex2");
  vertex2.setInvokableClass(NoOpInvokable.class);
  vertex2.setParallelism(8);
  final JobVertex vertex3=new JobVertex("vertex3");
  vertex3.setInvokableClass(NoOpInvokable.class);
  vertex3.setParallelism(8);
  final JobVertex vertex4=new JobVertex("vertex4");
  vertex4.setInvokableClass(NoOpInvokable.class);
  vertex4.setParallelism(8);
  final JobVertex vertex5=new JobVertex("vertex5");
  vertex5.setInvokableClass(NoOpInvokable.class);
  vertex5.setParallelism(4);
  final JobVertex vertex6=new JobVertex("vertex6");
  vertex6.setInvokableClass(NoOpInvokable.class);
  vertex6.setParallelism(4);
  final JobVertex vertex7=new JobVertex("vertex7");
  vertex7.setInvokableClass(NoOpInvokable.class);
  vertex7.setParallelism(2);
  vertex5.connectNewDataSetAsInput(vertex1,DistributionPattern.ALL_TO_ALL,ResultPartitionType.PIPELINED);
  vertex5.connectNewDataSetAsInput(vertex2,DistributionPattern.ALL_TO_ALL,ResultPartitionType.PIPELINED);
  vertex6.connectNewDataSetAsInput(vertex3,DistributionPattern.ALL_TO_ALL,ResultPartitionType.PIPELINED);
  vertex6.connectNewDataSetAsInput(vertex4,DistributionPattern.ALL_TO_ALL,ResultPartitionType.PIPELINED);
  vertex7.connectNewDataSetAsInput(vertex5,DistributionPattern.ALL_TO_ALL,ResultPartitionType.BLOCKING);
  vertex7.connectNewDataSetAsInput(vertex6,DistributionPattern.ALL_TO_ALL,ResultPartitionType.BLOCKING);
  final JobGraph jobGraph=new JobGraph("test job",vertex1,vertex2,vertex3,vertex4,vertex5,vertex6,vertex7);
  final ExecutionGraph eg=createExecutionGraph(jobGraph);
  RestartPipelinedRegionStrategy failoverStrategy=(RestartPipelinedRegionStrategy)eg.getFailoverStrategy();
  FailoverRegion region1=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex1.getID()).getTaskVertices()[0]);
  FailoverRegion region2=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex2.getID()).getTaskVertices()[5]);
  FailoverRegion region5=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex5.getID()).getTaskVertices()[2]);
  assertTrue(region1 == region2);
  assertTrue(region1 == region5);
  FailoverRegion region3=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex3.getID()).getTaskVertices()[0]);
  FailoverRegion region4=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex4.getID()).getTaskVertices()[5]);
  FailoverRegion region6=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex6.getID()).getTaskVertices()[2]);
  assertTrue(region3 == region4);
  assertTrue(region3 == region6);
  FailoverRegion region71=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex7.getID()).getTaskVertices()[0]);
  FailoverRegion region72=failoverStrategy.getFailoverRegion(eg.getJobVertex(vertex7.getID()).getTaskVertices()[1]);
  assertTrue(region71 != region72);
  assertTrue(region1 != region71);
  assertTrue(region1 != region72);
  assertTrue(region3 != region71);
  assertTrue(region3 != region72);
}
