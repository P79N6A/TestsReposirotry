@Test public void testSpillAndRollOverSimple() throws IOException {
  final Random rnd=new Random();
  final Random bufferRnd=new Random();
  final int maxNumEventsAndBuffers=3000;
  final int maxNumChannels=1656;
  BufferBlocker bufferBlocker=createBufferBlocker();
  for (int round=0; round < 5; round++) {
    final long bufferSeed=rnd.nextLong();
    bufferRnd.setSeed(bufferSeed);
    final int numEventsAndBuffers=rnd.nextInt(maxNumEventsAndBuffers) + 1;
    final int numChannels=rnd.nextInt(maxNumChannels) + 1;
    final ArrayList<BufferOrEvent> events=new ArrayList<BufferOrEvent>(128);
    for (int i=0; i < numEventsAndBuffers; i++) {
      boolean isEvent=rnd.nextDouble() < 0.05d;
      BufferOrEvent evt;
      if (isEvent) {
        evt=generateRandomEvent(rnd,numChannels);
        events.add(evt);
      }
 else {
        evt=generateRandomBuffer(bufferRnd.nextInt(PAGE_SIZE) + 1,bufferRnd.nextInt(numChannels));
      }
      bufferBlocker.add(evt);
    }
    bufferRnd.setSeed(bufferSeed);
    BufferOrEventSequence seq=bufferBlocker.rollOverReusingResources();
    seq.open();
    int numEvent=0;
    for (int i=0; i < numEventsAndBuffers; i++) {
      BufferOrEvent next=seq.getNext();
      assertNotNull(next);
      if (next.isEvent()) {
        BufferOrEvent expected=events.get(numEvent++);
        assertEquals(expected.getEvent(),next.getEvent());
        assertEquals(expected.getChannelIndex(),next.getChannelIndex());
      }
 else {
        validateBuffer(next,bufferRnd.nextInt(PAGE_SIZE) + 1,bufferRnd.nextInt(numChannels));
      }
    }
    assertNull(seq.getNext());
    assertEquals(events.size(),numEvent);
    seq.cleanup();
  }
}
