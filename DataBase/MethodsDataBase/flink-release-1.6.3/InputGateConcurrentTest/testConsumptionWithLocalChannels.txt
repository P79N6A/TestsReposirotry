@Test public void testConsumptionWithLocalChannels() throws Exception {
  final int numChannels=11;
  final int buffersPerChannel=1000;
  final ResultPartition resultPartition=mock(ResultPartition.class);
  final PipelinedSubpartition[] partitions=new PipelinedSubpartition[numChannels];
  final Source[] sources=new Source[numChannels];
  final ResultPartitionManager resultPartitionManager=createResultPartitionManager(partitions);
  final SingleInputGate gate=new SingleInputGate("Test Task Name",new JobID(),new IntermediateDataSetID(),ResultPartitionType.PIPELINED,0,numChannels,mock(TaskActions.class),UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),true);
  for (int i=0; i < numChannels; i++) {
    LocalInputChannel channel=new LocalInputChannel(gate,i,new ResultPartitionID(),resultPartitionManager,mock(TaskEventDispatcher.class),UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup());
    gate.setInputChannel(new IntermediateResultPartitionID(),channel);
    partitions[i]=new PipelinedSubpartition(0,resultPartition);
    sources[i]=new PipelinedSubpartitionSource(partitions[i]);
  }
  ProducerThread producer=new ProducerThread(sources,numChannels * buffersPerChannel,4,10);
  ConsumerThread consumer=new ConsumerThread(gate,numChannels * buffersPerChannel);
  producer.start();
  consumer.start();
  producer.sync();
  consumer.sync();
}
