@Test public void testFairConsumptionRemoteChannels() throws Exception {
  final int numChannels=37;
  final int buffersPerChannel=27;
  final Buffer mockBuffer=TestBufferFactory.createBuffer(42);
  SingleInputGate gate=new FairnessVerifyingInputGate("Test Task Name",new JobID(),new IntermediateDataSetID(),0,numChannels,mock(TaskActions.class),UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup(),true);
  final ConnectionManager connManager=createDummyConnectionManager();
  final RemoteInputChannel[] channels=new RemoteInputChannel[numChannels];
  final int[] channelSequenceNums=new int[numChannels];
  for (int i=0; i < numChannels; i++) {
    RemoteInputChannel channel=new RemoteInputChannel(gate,i,new ResultPartitionID(),mock(ConnectionID.class),connManager,0,0,UnregisteredMetricGroups.createUnregisteredTaskMetricGroup().getIOMetricGroup());
    channels[i]=channel;
    gate.setInputChannel(new IntermediateResultPartitionID(),channel);
  }
  channels[11].onBuffer(mockBuffer,0,-1);
  channelSequenceNums[11]++;
  for (int i=0; i < numChannels * buffersPerChannel; i++) {
    assertNotNull(gate.getNextBufferOrEvent());
    int min=Integer.MAX_VALUE;
    int max=0;
    for (    RemoteInputChannel channel : channels) {
      int size=channel.getNumberOfQueuedBuffers();
      min=Math.min(min,size);
      max=Math.max(max,size);
    }
    assertTrue(max == min || max == (min + 1));
    if (i % (2 * numChannels) == 0) {
      fillRandom(channels,channelSequenceNums,3,mockBuffer);
    }
  }
}
