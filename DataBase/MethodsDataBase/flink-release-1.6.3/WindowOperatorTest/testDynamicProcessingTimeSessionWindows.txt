@Test @SuppressWarnings("unchecked") public void testDynamicProcessingTimeSessionWindows() throws Exception {
  closeCalled.set(0);
  SessionWindowTimeGapExtractor<Tuple2<String,Integer>> extractor=mock(SessionWindowTimeGapExtractor.class);
  when(extractor.extract(any(Tuple2.class))).thenAnswer(invocation -> {
    Tuple2<String,Integer> element=(Tuple2<String,Integer>)invocation.getArguments()[0];
switch (element.f0) {
case "key1":
      return 3000;
case "key2":
switch (element.f1) {
case 10:
      return 1000;
default :
    return 2000;
}
default :
return 0;
}
}
);
ListStateDescriptor<Tuple2<String,Integer>> stateDesc=new ListStateDescriptor<>("window-contents",STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
WindowOperator<String,Tuple2<String,Integer>,Iterable<Tuple2<String,Integer>>,Tuple3<String,Long,Long>,TimeWindow> operator=new WindowOperator<>(DynamicProcessingTimeSessionWindows.withDynamicGap(extractor),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new SessionWindowFunction()),ProcessingTimeTrigger.create(),0,null);
OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple3<String,Long,Long>> testHarness=createTestHarness(operator);
ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
testHarness.open();
testHarness.setProcessingTime(10);
testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",3),10));
testHarness.setProcessingTime(5000);
testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",4),5000));
testHarness.setProcessingTime(6000);
testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",5),6000));
testHarness.setProcessingTime(8999);
expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3",10L,3010L),3009));
expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-9",5000L,8000L),7999));
testHarness.setProcessingTime(9000);
testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),9000));
testHarness.setProcessingTime(10000);
testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",2),10000));
testHarness.setProcessingTime(10500);
testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",10),10500));
testHarness.setProcessingTime(10500);
expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-13",9000L,12000L),11999));
testHarness.setProcessingTime(13000);
testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",10),13000));
testHarness.setProcessingTime(13500);
testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",10),13500));
testHarness.setProcessingTime(14000);
testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),14000));
testHarness.setProcessingTime(16999);
expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-21",13000L,16000L),15999));
TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple3ResultSortComparator());
testHarness.close();
}
