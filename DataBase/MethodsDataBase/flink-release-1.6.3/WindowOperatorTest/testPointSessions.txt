/** 
 * This tests a custom Session window assigner that assigns some elements to "point windows", windows that have the same timestamp for start and end. <p>In this test, elements that have 33 as the second tuple field will be put into a point window.
 */
@Test @SuppressWarnings("unchecked") public void testPointSessions() throws Exception {
  closeCalled.set(0);
  ListStateDescriptor<Tuple2<String,Integer>> stateDesc=new ListStateDescriptor<>("window-contents",STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Iterable<Tuple2<String,Integer>>,Tuple3<String,Long,Long>,TimeWindow> operator=new WindowOperator<>(new PointSessionWindows(3000),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new SessionWindowFunction()),EventTimeTrigger.create(),0,null);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  OperatorSubtaskState snapshot;
  try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple3<String,Long,Long>> testHarness=createTestHarness(operator)){
    testHarness.open();
    testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),0));
    testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",33),1000));
    snapshot=testHarness.snapshot(0L,0L);
  }
   try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple3<String,Long,Long>> testHarness=createTestHarness(operator)){
    testHarness.setup();
    testHarness.initializeState(snapshot);
    testHarness.open();
    testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",33),2500));
    testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),10));
    testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",2),1000));
    testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",33),2500));
    testHarness.processWatermark(new Watermark(12000));
    expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-36",10L,4000L),3999));
    expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-67",0L,3000L),2999));
    expectedOutput.add(new Watermark(12000));
    TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple3ResultSortComparator());
  }
 }
