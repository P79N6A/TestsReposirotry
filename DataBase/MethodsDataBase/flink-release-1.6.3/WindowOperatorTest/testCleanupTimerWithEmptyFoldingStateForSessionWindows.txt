@Test public void testCleanupTimerWithEmptyFoldingStateForSessionWindows() throws Exception {
  final int gapSize=3;
  final long lateness=10;
  FoldingStateDescriptor<Tuple2<String,Integer>,Tuple2<String,Integer>> windowStateDesc=new FoldingStateDescriptor<>("window-contents",new Tuple2<>((String)null,0),new FoldFunction<Tuple2<String,Integer>,Tuple2<String,Integer>>(){
    private static final long serialVersionUID=1L;
    @Override public Tuple2<String,Integer> fold(    Tuple2<String,Integer> accumulator,    Tuple2<String,Integer> value) throws Exception {
      return new Tuple2<>(value.f0,accumulator.f1 + value.f1);
    }
  }
,STRING_INT_TUPLE);
  windowStateDesc.initializeSerializerUnlessSet(new ExecutionConfig());
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator=new WindowOperator<>(EventTimeSessionWindows.withGap(Time.seconds(gapSize)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),windowStateDesc,new InternalSingleValueWindowFunction<>(new PassThroughFunction()),EventTimeTrigger.create(),lateness,null);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=createTestHarness(operator);
  testHarness.open();
  ConcurrentLinkedQueue<Object> expected=new ConcurrentLinkedQueue<>();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),1000));
  testHarness.processWatermark(new Watermark(4998));
  expected.add(new StreamRecord<>(new Tuple2<>("key2",1),3999));
  expected.add(new Watermark(4998));
  testHarness.processWatermark(new Watermark(14600));
  expected.add(new Watermark(14600));
  ConcurrentLinkedQueue<Object> actual=testHarness.getOutput();
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expected,actual,new Tuple2ResultSortComparator());
  testHarness.close();
}
