/** 
 * This tests whether merging works correctly with the ContinuousEventTimeTrigger.
 */
@Test public void testSessionWindowsWithContinuousEventTimeTrigger() throws Exception {
  closeCalled.set(0);
  final int sessionSize=3;
  ListStateDescriptor<Tuple2<String,Integer>> stateDesc=new ListStateDescriptor<>("window-contents",STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Iterable<Tuple2<String,Integer>>,Tuple3<String,Long,Long>,TimeWindow> operator=new WindowOperator<>(EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new SessionWindowFunction()),ContinuousEventTimeTrigger.of(Time.seconds(2)),0,null);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple3<String,Long,Long>> testHarness=createTestHarness(operator);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),1500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),0));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",3),2500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",2),1000));
  testHarness.processWatermark(new Watermark(2500));
  expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-1",1500L,4500L),4499));
  expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-6",0L,5500L),5499));
  expectedOutput.add(new Watermark(2500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",5),4000));
  testHarness.processWatermark(new Watermark(3000));
  expectedOutput.add(new Watermark(3000));
  OperatorSubtaskState snapshot=testHarness.snapshot(0L,0L);
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple3ResultSortComparator());
  testHarness.close();
  expectedOutput.clear();
  testHarness=createTestHarness(operator);
  testHarness.setup();
  testHarness.initializeState(snapshot);
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",2),4000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",4),3500));
  testHarness.processWatermark(new Watermark(4000));
  expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-3",1500L,7000L),6999));
  expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-15",0L,7000L),6999));
  expectedOutput.add(new Watermark(4000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple3ResultSortComparator());
  testHarness.close();
}
