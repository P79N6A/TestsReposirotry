@Test public void testDropDueToLatenessSessionWithLatenessPurgingTrigger() throws Exception {
  final int gapSize=3;
  final long lateness=10;
  ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc=new ReducingStateDescriptor<>("window-contents",new SumReducer(),STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple3<String,Long,Long>,TimeWindow> operator=new WindowOperator<>(EventTimeSessionWindows.withGap(Time.seconds(gapSize)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new ReducedSessionWindowFunction()),PurgingTrigger.of(EventTimeTrigger.create()),lateness,lateOutputTag);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple3<String,Long,Long>> testHarness=createTestHarness(operator);
  testHarness.open();
  ConcurrentLinkedQueue<Object> expected=new ConcurrentLinkedQueue<>();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),1000));
  testHarness.processWatermark(new Watermark(1999));
  expected.add(new Watermark(1999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),2000));
  testHarness.processWatermark(new Watermark(4998));
  expected.add(new Watermark(4998));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),4500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),8500));
  testHarness.processWatermark(new Watermark(7400));
  expected.add(new Watermark(7400));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),7000));
  testHarness.processWatermark(new Watermark(11501));
  expected.add(new StreamRecord<>(new Tuple3<>("key2-5",1000L,11500L),11499));
  expected.add(new Watermark(11501));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),11600));
  testHarness.processWatermark(new Watermark(14600));
  expected.add(new StreamRecord<>(new Tuple3<>("key2-1",11600L,14600L),14599));
  expected.add(new Watermark(14600));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),10000));
  expected.add(new StreamRecord<>(new Tuple3<>("key2-1",10000L,14600L),14599));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),14500));
  testHarness.processWatermark(new Watermark(20000));
  expected.add(new StreamRecord<>(new Tuple3<>("key2-1",10000L,17500L),17499));
  expected.add(new Watermark(20000));
  testHarness.processWatermark(new Watermark(100000));
  expected.add(new Watermark(100000));
  ConcurrentLinkedQueue<Object> actual=testHarness.getOutput();
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expected,actual,new Tuple3ResultSortComparator());
  testHarness.close();
}
