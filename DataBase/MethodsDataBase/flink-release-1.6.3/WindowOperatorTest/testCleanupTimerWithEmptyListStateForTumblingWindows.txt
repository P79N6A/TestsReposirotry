@Test public void testCleanupTimerWithEmptyListStateForTumblingWindows() throws Exception {
  final int windowSize=2;
  final long lateness=1;
  ListStateDescriptor<Tuple2<String,Integer>> windowStateDesc=new ListStateDescriptor<>("window-contents",STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Iterable<Tuple2<String,Integer>>,Tuple2<String,Integer>,TimeWindow> operator=new WindowOperator<>(TumblingEventTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),windowStateDesc,new InternalIterableWindowFunction<>(new PassThroughFunction()),EventTimeTrigger.create(),lateness,null);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=createTestHarness(operator);
  testHarness.open();
  ConcurrentLinkedQueue<Object> expected=new ConcurrentLinkedQueue<>();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),1000));
  testHarness.processWatermark(new Watermark(1599));
  testHarness.processWatermark(new Watermark(1999));
  testHarness.processWatermark(new Watermark(2000));
  testHarness.processWatermark(new Watermark(5000));
  expected.add(new Watermark(1599));
  expected.add(new StreamRecord<>(new Tuple2<>("key2",1),1999));
  expected.add(new Watermark(1999));
  expected.add(new Watermark(2000));
  expected.add(new Watermark(5000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expected,testHarness.getOutput(),new Tuple2ResultSortComparator());
  testHarness.close();
}
