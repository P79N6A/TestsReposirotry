@Test public void testLateness() throws Exception {
  final int windowSize=2;
  final long lateness=500;
  ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc=new ReducingStateDescriptor<>("window-contents",new SumReducer(),STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator=new WindowOperator<>(TumblingEventTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),PurgingTrigger.of(EventTimeTrigger.create()),lateness,lateOutputTag);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=createTestHarness(operator);
  testHarness.open();
  ConcurrentLinkedQueue<Object> expected=new ConcurrentLinkedQueue<>();
  ConcurrentLinkedQueue<Object> lateExpected=new ConcurrentLinkedQueue<>();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),500));
  testHarness.processWatermark(new Watermark(1500));
  expected.add(new Watermark(1500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),1300));
  testHarness.processWatermark(new Watermark(2300));
  expected.add(new StreamRecord<>(new Tuple2<>("key2",2),1999));
  expected.add(new Watermark(2300));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),1997));
  testHarness.processWatermark(new Watermark(6000));
  expected.add(new StreamRecord<>(new Tuple2<>("key2",1),1999));
  expected.add(new Watermark(6000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),1998));
  testHarness.processWatermark(new Watermark(7000));
  lateExpected.add(new StreamRecord<>(new Tuple2<>("key2",1),1998));
  expected.add(new Watermark(7000));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expected,testHarness.getOutput(),new Tuple2ResultSortComparator());
  TestHarnessUtil.assertOutputEqualsSorted("SideOutput was not correct.",lateExpected,(Iterable)testHarness.getSideOutput(lateOutputTag),new Tuple2ResultSortComparator());
  testHarness.close();
}
