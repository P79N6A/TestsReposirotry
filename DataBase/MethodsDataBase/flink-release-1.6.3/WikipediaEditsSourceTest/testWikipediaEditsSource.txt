/** 
 * We first check the connection to the IRC server. If it fails, this test is ignored.
 */
@Test @RetryOnFailure(times=1) public void testWikipediaEditsSource() throws Exception {
  if (canConnect(1,TimeUnit.SECONDS)) {
    final Time testTimeout=Time.seconds(60);
    final WikipediaEditsSource wikipediaEditsSource=new WikipediaEditsSource();
    ExecutorService executorService=null;
    try {
      executorService=Executors.newSingleThreadExecutor();
      BlockingQueue<Object> collectedEvents=new ArrayBlockingQueue<>(1);
      AtomicReference<Exception> asyncError=new AtomicReference<>();
      executorService.execute(() -> {
        try {
          wikipediaEditsSource.run(new CollectingSourceContext<>(collectedEvents));
        }
 catch (        Exception e) {
          boolean interrupted=e instanceof InterruptedException;
          if (!interrupted) {
            LOG.warn("Failure in WikipediaEditsSource",e);
          }
          asyncError.compareAndSet(null,e);
        }
      }
);
      long deadline=deadlineNanos(testTimeout);
      Object event=null;
      Exception error=null;
      while (event == null && error == null && System.nanoTime() < deadline) {
        event=collectedEvents.poll(1,TimeUnit.SECONDS);
        error=asyncError.get();
      }
      if (error != null) {
        fail("Failure in WikipediaEditsSource: " + error.getMessage());
      }
      assertNotNull("Did not receive a WikipediaEditEvent within the desired timeout",event);
      assertTrue("Received unexpected event " + event,event instanceof WikipediaEditEvent);
    }
  finally {
      wikipediaEditsSource.cancel();
      if (executorService != null) {
        executorService.shutdownNow();
        executorService.awaitTermination(1,TimeUnit.SECONDS);
      }
    }
  }
 else {
    LOG.info("Skipping test, because not able to connect to IRC server.");
  }
}
