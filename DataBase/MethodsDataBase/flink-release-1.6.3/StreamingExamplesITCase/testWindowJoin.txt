@Test public void testWindowJoin() throws Exception {
  final String resultPath=File.createTempFile("result-path","dir").toURI().toString();
final class Parser implements MapFunction<String,Tuple2<String,Integer>> {
    @Override public Tuple2<String,Integer> map(    String value) throws Exception {
      String[] fields=value.split(",");
      return new Tuple2<>(fields[1],Integer.parseInt(fields[2]));
    }
  }
  try {
    final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
    DataStream<Tuple2<String,Integer>> grades=env.fromElements(WindowJoinData.GRADES_INPUT.split("\n")).map(new Parser());
    DataStream<Tuple2<String,Integer>> salaries=env.fromElements(WindowJoinData.SALARIES_INPUT.split("\n")).map(new Parser());
    org.apache.flink.streaming.examples.join.WindowJoin.runWindowJoin(grades,salaries,100).writeAsText(resultPath,FileSystem.WriteMode.OVERWRITE);
    env.execute();
    checkLinesAgainstRegexp(resultPath,"^\\([a-z]+,(\\d),(\\d)+\\)");
  }
  finally {
    try {
      FileUtils.deleteDirectory(new File(resultPath));
    }
 catch (    Throwable ignored) {
    }
  }
}
