/** 
 * Tests that  {@link PermanentBlobCache} sets the expected reference counts and cleanup timeoutswhen registering, releasing, and re-registering jobs.
 */
@Test public void testPermanentJobReferences() throws IOException, InterruptedException {
  JobID jobId=new JobID();
  Configuration config=new Configuration();
  config.setString(BlobServerOptions.STORAGE_DIRECTORY,temporaryFolder.newFolder().getAbsolutePath());
  config.setLong(BlobServerOptions.CLEANUP_INTERVAL,3_600_000L);
  InetSocketAddress serverAddress=new InetSocketAddress("localhost",12345);
  try (PermanentBlobCache cache=new PermanentBlobCache(config,new VoidBlobStore(),serverAddress)){
    cache.registerJob(jobId);
    assertEquals(1,cache.getJobRefCounters().get(jobId).references);
    assertEquals(-1,cache.getJobRefCounters().get(jobId).keepUntil);
    cache.registerJob(jobId);
    assertEquals(2,cache.getJobRefCounters().get(jobId).references);
    assertEquals(-1,cache.getJobRefCounters().get(jobId).keepUntil);
    cache.releaseJob(jobId);
    assertEquals(1,cache.getJobRefCounters().get(jobId).references);
    assertEquals(-1,cache.getJobRefCounters().get(jobId).keepUntil);
    long cleanupLowerBound=System.currentTimeMillis() + config.getLong(BlobServerOptions.CLEANUP_INTERVAL);
    cache.releaseJob(jobId);
    assertEquals(0,cache.getJobRefCounters().get(jobId).references);
    assertThat(cache.getJobRefCounters().get(jobId).keepUntil,greaterThanOrEqualTo(cleanupLowerBound));
    cache.registerJob(jobId);
    assertEquals(1,cache.getJobRefCounters().get(jobId).references);
    assertEquals(-1,cache.getJobRefCounters().get(jobId).keepUntil);
    cleanupLowerBound=System.currentTimeMillis() + config.getLong(BlobServerOptions.CLEANUP_INTERVAL);
    cache.releaseJob(jobId);
    assertEquals(0,cache.getJobRefCounters().get(jobId).references);
    assertThat(cache.getJobRefCounters().get(jobId).keepUntil,greaterThanOrEqualTo(cleanupLowerBound));
  }
 }
