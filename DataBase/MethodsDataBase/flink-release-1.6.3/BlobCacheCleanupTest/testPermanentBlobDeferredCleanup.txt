/** 
 * Tests the deferred cleanup of  {@link PermanentBlobCache}, i.e. after calling  {@link PermanentBlobCache#releaseJob(JobID)} the file should be preserved a bit longer and thencleaned up.
 */
@Test @Ignore("manual test due to stalling: ensures a BLOB is retained first and only deleted after the (long) timeout ") public void testPermanentBlobDeferredCleanup() throws IOException, InterruptedException {
  long cleanupInterval=5L;
  JobID jobId=new JobID();
  List<PermanentBlobKey> keys=new ArrayList<>();
  BlobServer server=null;
  PermanentBlobCache cache=null;
  final byte[] buf=new byte[128];
  try {
    Configuration config=new Configuration();
    config.setString(BlobServerOptions.STORAGE_DIRECTORY,temporaryFolder.newFolder().getAbsolutePath());
    config.setLong(BlobServerOptions.CLEANUP_INTERVAL,cleanupInterval);
    server=new BlobServer(config,new VoidBlobStore());
    server.start();
    InetSocketAddress serverAddress=new InetSocketAddress("localhost",server.getPort());
    cache=new PermanentBlobCache(config,new VoidBlobStore(),serverAddress);
    keys.add(server.putPermanent(jobId,buf));
    buf[0]+=1;
    keys.add(server.putPermanent(jobId,buf));
    checkFileCountForJob(2,jobId,server);
    checkFileCountForJob(0,jobId,cache);
    cache.registerJob(jobId);
    checkFileCountForJob(2,jobId,server);
    checkFileCountForJob(0,jobId,cache);
    for (    PermanentBlobKey key : keys) {
      cache.getFile(jobId,key);
    }
    cache.registerJob(jobId);
    for (    PermanentBlobKey key : keys) {
      cache.getFile(jobId,key);
    }
    assertEquals(2,checkFilesExist(jobId,keys,cache,true));
    checkFileCountForJob(2,jobId,server);
    checkFileCountForJob(2,jobId,cache);
    cache.releaseJob(jobId);
    assertEquals(2,checkFilesExist(jobId,keys,cache,true));
    checkFileCountForJob(2,jobId,server);
    checkFileCountForJob(2,jobId,cache);
    cache.releaseJob(jobId);
    assertEquals(2,checkFilesExist(jobId,keys,cache,true));
    checkFileCountForJob(2,jobId,cache);
    Thread.sleep(cleanupInterval / 5);
    assertEquals(2,checkFilesExist(jobId,keys,cache,true));
    checkFileCountForJob(2,jobId,cache);
    Thread.sleep((cleanupInterval * 4) / 5);
    verifyJobCleanup(cache,jobId,keys);
    checkFileCountForJob(2,jobId,server);
  }
  finally {
    if (cache != null) {
      cache.close();
    }
    if (server != null) {
      server.close();
    }
    checkFileCountForJob(0,jobId,server);
  }
}
