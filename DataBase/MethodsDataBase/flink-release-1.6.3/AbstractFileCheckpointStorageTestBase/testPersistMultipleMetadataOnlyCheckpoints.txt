/** 
 * Validates that multiple checkpoints from different jobs with the same checkpoint ID do not interfere with each other.
 */
@Test public void testPersistMultipleMetadataOnlyCheckpoints() throws Exception {
  final FileSystem fs=FileSystem.getLocalFileSystem();
  final Path checkpointDir=new Path(tmp.newFolder().toURI());
  final long checkpointId=177;
  final CheckpointStorage storage1=createCheckpointStorage(checkpointDir);
  final CheckpointStorage storage2=createCheckpointStorage(checkpointDir);
  final CheckpointStorageLocation loc1=storage1.initializeLocationForCheckpoint(checkpointId);
  final CheckpointStorageLocation loc2=storage2.initializeLocationForCheckpoint(checkpointId);
  final byte[] data1={77,66,55,99,88};
  final byte[] data2={1,3,2,5,4};
  final CompletedCheckpointStorageLocation completedLocation1;
  try (CheckpointMetadataOutputStream out=loc1.createMetadataOutputStream()){
    out.write(data1);
    completedLocation1=out.closeAndFinalizeCheckpoint();
  }
   final String result1=completedLocation1.getExternalPointer();
  final CompletedCheckpointStorageLocation completedLocation2;
  try (CheckpointMetadataOutputStream out=loc2.createMetadataOutputStream()){
    out.write(data2);
    completedLocation2=out.closeAndFinalizeCheckpoint();
  }
   final String result2=completedLocation2.getExternalPointer();
  FileStatus[] files=fs.listStatus(checkpointDir);
  assertEquals(2,files.length);
  FileStatus[] job1Files=fs.listStatus(files[0].getPath());
  FileStatus[] job2Files=fs.listStatus(files[1].getPath());
  assertTrue(job1Files.length >= 1);
  assertTrue(job2Files.length >= 1);
  assertTrue(fs.exists(new Path(result1,AbstractFsCheckpointStorage.METADATA_FILE_NAME)));
  assertTrue(fs.exists(new Path(result2,AbstractFsCheckpointStorage.METADATA_FILE_NAME)));
  validateContents(storage1.resolveCheckpoint(result1).getMetadataHandle(),data1);
  validateContents(storage1.resolveCheckpoint(result2).getMetadataHandle(),data2);
  validateContents(storage2.resolveCheckpoint(result1).getMetadataHandle(),data1);
  validateContents(storage2.resolveCheckpoint(result2).getMetadataHandle(),data2);
}
