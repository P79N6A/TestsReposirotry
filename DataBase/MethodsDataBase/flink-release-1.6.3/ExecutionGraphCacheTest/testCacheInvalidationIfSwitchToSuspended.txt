/** 
 * Tests that a cache entry is invalidated if the retrieved  {@link AccessExecutionGraph} changes itsstate to  {@link JobStatus#SUSPENDING} or {@link JobStatus#SUSPENDED}. <p>This test can be removed once we no longer request the actual  {@link ExecutionGraph} from the{@link JobManager}.
 */
@Test public void testCacheInvalidationIfSwitchToSuspended() throws Exception {
  final Time timeout=Time.milliseconds(100L);
  final Time timeToLive=Time.hours(1L);
  final JobID expectedJobId=new JobID();
  final SuspendableAccessExecutionGraph toBeSuspendingExecutionGraph=new SuspendableAccessExecutionGraph(expectedJobId);
  final SuspendableAccessExecutionGraph toBeSuspendedExecutionGraph=new SuspendableAccessExecutionGraph(expectedJobId);
  final CountingRestfulGateway restfulGateway=createCountingRestfulGateway(expectedJobId,CompletableFuture.completedFuture(toBeSuspendingExecutionGraph),CompletableFuture.completedFuture(toBeSuspendedExecutionGraph),CompletableFuture.completedFuture(expectedExecutionGraph));
  try (ExecutionGraphCache executionGraphCache=new ExecutionGraphCache(timeout,timeToLive)){
    CompletableFuture<AccessExecutionGraph> executionGraphFuture=executionGraphCache.getExecutionGraph(expectedJobId,restfulGateway);
    assertEquals(toBeSuspendingExecutionGraph,executionGraphFuture.get());
    toBeSuspendingExecutionGraph.setJobStatus(JobStatus.SUSPENDING);
    executionGraphFuture=executionGraphCache.getExecutionGraph(expectedJobId,restfulGateway);
    assertEquals(toBeSuspendedExecutionGraph,executionGraphFuture.get());
    toBeSuspendedExecutionGraph.setJobStatus(JobStatus.SUSPENDED);
    executionGraphFuture=executionGraphCache.getExecutionGraph(expectedJobId,restfulGateway);
    assertEquals(expectedExecutionGraph,executionGraphFuture.get());
    executionGraphFuture=executionGraphCache.getExecutionGraph(expectedJobId,restfulGateway);
    assertEquals(expectedExecutionGraph,executionGraphFuture.get());
    assertThat(restfulGateway.getNumRequestJobCalls(),Matchers.equalTo(3));
  }
 }
