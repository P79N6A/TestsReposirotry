/** 
 * Tests that a cache entry is invalidated if the retrieved  {@link AccessExecutionGraph} is instate  {@link JobStatus#SUSPENDING} or {@link JobStatus#SUSPENDED}. <p>This test can be removed once we no longer request the actual  {@link ExecutionGraph} from the{@link JobManager}.
 */
@Test public void testCacheInvalidationIfSuspended() throws Exception {
  final Time timeout=Time.milliseconds(100L);
  final Time timeToLive=Time.hours(1L);
  final JobID expectedJobId=new JobID();
  final ArchivedExecutionGraph suspendingExecutionGraph=new ArchivedExecutionGraphBuilder().setState(JobStatus.SUSPENDING).build();
  final ArchivedExecutionGraph suspendedExecutionGraph=new ArchivedExecutionGraphBuilder().setState(JobStatus.SUSPENDED).build();
  final ConcurrentLinkedQueue<CompletableFuture<? extends AccessExecutionGraph>> requestJobAnswers=new ConcurrentLinkedQueue<>();
  requestJobAnswers.offer(CompletableFuture.completedFuture(suspendingExecutionGraph));
  requestJobAnswers.offer(CompletableFuture.completedFuture(suspendedExecutionGraph));
  requestJobAnswers.offer(CompletableFuture.completedFuture(expectedExecutionGraph));
  final TestingRestfulGateway restfulGateway=TestingRestfulGateway.newBuilder().setRequestJobFunction(jobId -> {
    assertThat(jobId,Matchers.equalTo(expectedJobId));
    return requestJobAnswers.poll();
  }
).build();
  try (ExecutionGraphCache executionGraphCache=new ExecutionGraphCache(timeout,timeToLive)){
    CompletableFuture<AccessExecutionGraph> executionGraphFuture=executionGraphCache.getExecutionGraph(expectedJobId,restfulGateway);
    assertEquals(suspendingExecutionGraph,executionGraphFuture.get());
    executionGraphFuture=executionGraphCache.getExecutionGraph(expectedJobId,restfulGateway);
    assertEquals(suspendedExecutionGraph,executionGraphFuture.get());
    executionGraphFuture=executionGraphCache.getExecutionGraph(expectedJobId,restfulGateway);
    assertEquals(expectedExecutionGraph,executionGraphFuture.get());
  }
 }
