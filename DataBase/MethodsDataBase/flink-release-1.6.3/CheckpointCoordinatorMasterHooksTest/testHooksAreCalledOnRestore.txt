@Test public void testHooksAreCalledOnRestore() throws Exception {
  final String id1="id1";
  final String id2="id2";
  final String state1="the-test-string-state";
  final byte[] state1serialized=new StringSerializer().serialize(state1);
  final long state2=987654321L;
  final byte[] state2serialized=new LongSerializer().serialize(state2);
  final List<MasterState> masterHookStates=Arrays.asList(new MasterState(id1,state1serialized,StringSerializer.VERSION),new MasterState(id2,state2serialized,LongSerializer.VERSION));
  final MasterTriggerRestoreHook<String> statefulHook1=mockGeneric(MasterTriggerRestoreHook.class);
  when(statefulHook1.getIdentifier()).thenReturn(id1);
  when(statefulHook1.createCheckpointDataSerializer()).thenReturn(new StringSerializer());
  when(statefulHook1.triggerCheckpoint(anyLong(),anyLong(),any(Executor.class))).thenThrow(new Exception("not expected"));
  final MasterTriggerRestoreHook<Long> statefulHook2=mockGeneric(MasterTriggerRestoreHook.class);
  when(statefulHook2.getIdentifier()).thenReturn(id2);
  when(statefulHook2.createCheckpointDataSerializer()).thenReturn(new LongSerializer());
  when(statefulHook2.triggerCheckpoint(anyLong(),anyLong(),any(Executor.class))).thenThrow(new Exception("not expected"));
  final MasterTriggerRestoreHook<Void> statelessHook=mockGeneric(MasterTriggerRestoreHook.class);
  when(statelessHook.getIdentifier()).thenReturn("some-id");
  final JobID jid=new JobID();
  final long checkpointId=13L;
  final CompletedCheckpoint checkpoint=new CompletedCheckpoint(jid,checkpointId,123L,125L,Collections.<OperatorID,OperatorState>emptyMap(),masterHookStates,CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),new TestCompletedCheckpointStorageLocation());
  final ExecutionAttemptID execId=new ExecutionAttemptID();
  final ExecutionVertex ackVertex=mockExecutionVertex(execId);
  final CheckpointCoordinator cc=instantiateCheckpointCoordinator(jid,ackVertex);
  cc.addMasterHook(statefulHook1);
  cc.addMasterHook(statelessHook);
  cc.addMasterHook(statefulHook2);
  cc.getCheckpointStore().addCheckpoint(checkpoint);
  cc.restoreLatestCheckpointedState(Collections.<JobVertexID,ExecutionJobVertex>emptyMap(),true,false);
  verify(statefulHook1,times(1)).restoreCheckpoint(eq(checkpointId),eq(state1));
  verify(statefulHook2,times(1)).restoreCheckpoint(eq(checkpointId),eq(state2));
  verify(statelessHook,times(1)).restoreCheckpoint(eq(checkpointId),isNull(Void.class));
}
