@Test public void testHooksAreCalledOnTrigger() throws Exception {
  final String id1="id1";
  final String id2="id2";
  final String state1="the-test-string-state";
  final byte[] state1serialized=new StringSerializer().serialize(state1);
  final long state2=987654321L;
  final byte[] state2serialized=new LongSerializer().serialize(state2);
  final MasterTriggerRestoreHook<String> statefulHook1=mockGeneric(MasterTriggerRestoreHook.class);
  when(statefulHook1.getIdentifier()).thenReturn(id1);
  when(statefulHook1.createCheckpointDataSerializer()).thenReturn(new StringSerializer());
  when(statefulHook1.triggerCheckpoint(anyLong(),anyLong(),any(Executor.class))).thenReturn(CompletableFuture.completedFuture(state1));
  final MasterTriggerRestoreHook<Long> statefulHook2=mockGeneric(MasterTriggerRestoreHook.class);
  when(statefulHook2.getIdentifier()).thenReturn(id2);
  when(statefulHook2.createCheckpointDataSerializer()).thenReturn(new LongSerializer());
  when(statefulHook2.triggerCheckpoint(anyLong(),anyLong(),any(Executor.class))).thenReturn(CompletableFuture.completedFuture(state2));
  final MasterTriggerRestoreHook<Void> statelessHook=mockGeneric(MasterTriggerRestoreHook.class);
  when(statelessHook.getIdentifier()).thenReturn("some-id");
  final JobID jid=new JobID();
  final ExecutionAttemptID execId=new ExecutionAttemptID();
  final ExecutionVertex ackVertex=mockExecutionVertex(execId);
  final CheckpointCoordinator cc=instantiateCheckpointCoordinator(jid,ackVertex);
  cc.addMasterHook(statefulHook1);
  cc.addMasterHook(statelessHook);
  cc.addMasterHook(statefulHook2);
  assertTrue(cc.triggerCheckpoint(System.currentTimeMillis(),false));
  assertEquals(1,cc.getNumberOfPendingCheckpoints());
  verify(statefulHook1,times(1)).triggerCheckpoint(anyLong(),anyLong(),any(Executor.class));
  verify(statefulHook2,times(1)).triggerCheckpoint(anyLong(),anyLong(),any(Executor.class));
  verify(statelessHook,times(1)).triggerCheckpoint(anyLong(),anyLong(),any(Executor.class));
  final long checkpointId=cc.getPendingCheckpoints().values().iterator().next().getCheckpointId();
  cc.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,execId,checkpointId));
  assertEquals(0,cc.getNumberOfPendingCheckpoints());
  assertEquals(1,cc.getNumberOfRetainedSuccessfulCheckpoints());
  final CompletedCheckpoint chk=cc.getCheckpointStore().getLatestCheckpoint();
  final Collection<MasterState> masterStates=chk.getMasterHookStates();
  assertEquals(2,masterStates.size());
  for (  MasterState ms : masterStates) {
    if (ms.name().equals(id1)) {
      assertArrayEquals(state1serialized,ms.bytes());
      assertEquals(StringSerializer.VERSION,ms.version());
    }
 else     if (ms.name().equals(id2)) {
      assertArrayEquals(state2serialized,ms.bytes());
      assertEquals(LongSerializer.VERSION,ms.version());
    }
 else {
      fail("unrecognized state name: " + ms.name());
    }
  }
}
