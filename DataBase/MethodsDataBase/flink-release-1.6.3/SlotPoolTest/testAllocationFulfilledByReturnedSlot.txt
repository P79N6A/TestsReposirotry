@Test public void testAllocationFulfilledByReturnedSlot() throws Exception {
  final ArrayBlockingQueue<SlotRequest> slotRequestQueue=new ArrayBlockingQueue<>(2);
  resourceManagerGateway.setRequestSlotConsumer(slotRequest -> {
    while (!slotRequestQueue.offer(slotRequest)) {
    }
  }
);
  final SlotPool slotPool=new SlotPool(rpcService,jobId,LocationPreferenceSchedulingStrategy.getInstance());
  try {
    SlotPoolGateway slotPoolGateway=setupSlotPool(slotPool,resourceManagerGateway);
    slotPool.registerTaskManager(taskManagerLocation.getResourceID());
    CompletableFuture<LogicalSlot> future1=slotPoolGateway.allocateSlot(new SlotRequestId(),new DummyScheduledUnit(),SlotProfile.noLocality(DEFAULT_TESTING_PROFILE),true,timeout);
    CompletableFuture<LogicalSlot> future2=slotPoolGateway.allocateSlot(new SlotRequestId(),new DummyScheduledUnit(),SlotProfile.noLocality(DEFAULT_TESTING_PROFILE),true,timeout);
    assertFalse(future1.isDone());
    assertFalse(future2.isDone());
    final List<SlotRequest> slotRequests=new ArrayList<>(2);
    for (int i=0; i < 2; i++) {
      slotRequests.add(slotRequestQueue.poll(timeout.toMilliseconds(),TimeUnit.MILLISECONDS));
    }
    final SlotOffer slotOffer=new SlotOffer(slotRequests.get(0).getAllocationId(),0,DEFAULT_TESTING_PROFILE);
    assertTrue(slotPoolGateway.offerSlot(taskManagerLocation,taskManagerGateway,slotOffer).get());
    LogicalSlot slot1=future1.get(1,TimeUnit.SECONDS);
    assertTrue(future1.isDone());
    assertFalse(future2.isDone());
    slot1.releaseSlot();
    LogicalSlot slot2=future2.get(1,TimeUnit.SECONDS);
    assertTrue(future2.isDone());
    assertNotEquals(slot1,slot2);
    assertFalse(slot1.isAlive());
    assertTrue(slot2.isAlive());
    assertEquals(slot1.getTaskManagerLocation(),slot2.getTaskManagerLocation());
    assertEquals(slot1.getPhysicalSlotNumber(),slot2.getPhysicalSlotNumber());
    assertEquals(slot1.getAllocationId(),slot2.getAllocationId());
  }
  finally {
    RpcUtils.terminateRpcEndpoint(slotPool,timeout);
  }
}
