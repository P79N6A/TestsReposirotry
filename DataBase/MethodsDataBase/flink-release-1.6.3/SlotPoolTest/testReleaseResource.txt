@Test public void testReleaseResource() throws Exception {
  final CompletableFuture<SlotRequest> slotRequestFuture=new CompletableFuture<>();
  resourceManagerGateway.setRequestSlotConsumer(slotRequest -> slotRequestFuture.complete(slotRequest));
  final SlotPool slotPool=new SlotPool(rpcService,jobId,LocationPreferenceSchedulingStrategy.getInstance());
  try {
    SlotPoolGateway slotPoolGateway=setupSlotPool(slotPool,resourceManagerGateway);
    slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID());
    CompletableFuture<LogicalSlot> future1=slotPoolGateway.allocateSlot(new SlotRequestId(),new DummyScheduledUnit(),SlotProfile.noLocality(DEFAULT_TESTING_PROFILE),true,timeout);
    final SlotRequest slotRequest=slotRequestFuture.get(timeout.toMilliseconds(),TimeUnit.MILLISECONDS);
    CompletableFuture<LogicalSlot> future2=slotPoolGateway.allocateSlot(new SlotRequestId(),new DummyScheduledUnit(),SlotProfile.noLocality(DEFAULT_TESTING_PROFILE),true,timeout);
    final SlotOffer slotOffer=new SlotOffer(slotRequest.getAllocationId(),0,DEFAULT_TESTING_PROFILE);
    assertTrue(slotPoolGateway.offerSlot(taskManagerLocation,taskManagerGateway,slotOffer).get());
    LogicalSlot slot1=future1.get(1,TimeUnit.SECONDS);
    assertTrue(future1.isDone());
    assertFalse(future2.isDone());
    final CompletableFuture<?> releaseFuture=new CompletableFuture<>();
    final DummyPayload dummyPayload=new DummyPayload(releaseFuture);
    slot1.tryAssignPayload(dummyPayload);
    slotPoolGateway.releaseTaskManager(taskManagerLocation.getResourceID(),null);
    releaseFuture.get();
    assertFalse(slot1.isAlive());
    Thread.sleep(10);
    assertFalse(future2.isDone());
  }
  finally {
    slotPool.shutDown();
  }
}
