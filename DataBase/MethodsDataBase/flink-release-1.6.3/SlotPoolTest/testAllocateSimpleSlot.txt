@Test public void testAllocateSimpleSlot() throws Exception {
  CompletableFuture<SlotRequest> slotRequestFuture=new CompletableFuture<>();
  resourceManagerGateway.setRequestSlotConsumer(slotRequest -> slotRequestFuture.complete(slotRequest));
  final SlotPool slotPool=new SlotPool(rpcService,jobId,LocationPreferenceSchedulingStrategy.getInstance());
  try {
    SlotPoolGateway slotPoolGateway=setupSlotPool(slotPool,resourceManagerGateway);
    slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID());
    SlotRequestId requestId=new SlotRequestId();
    CompletableFuture<LogicalSlot> future=slotPoolGateway.allocateSlot(requestId,new DummyScheduledUnit(),SlotProfile.noLocality(DEFAULT_TESTING_PROFILE),true,timeout);
    assertFalse(future.isDone());
    final SlotRequest slotRequest=slotRequestFuture.get(timeout.toMilliseconds(),TimeUnit.MILLISECONDS);
    final SlotOffer slotOffer=new SlotOffer(slotRequest.getAllocationId(),0,DEFAULT_TESTING_PROFILE);
    assertTrue(slotPoolGateway.offerSlot(taskManagerLocation,taskManagerGateway,slotOffer).get());
    LogicalSlot slot=future.get(1,TimeUnit.SECONDS);
    assertTrue(future.isDone());
    assertTrue(slot.isAlive());
    assertEquals(taskManagerLocation,slot.getTaskManagerLocation());
  }
  finally {
    RpcUtils.terminateRpcEndpoint(slotPool,timeout);
  }
}
