@Test public void testGetShardList() throws Exception {
  List<String> shardIds=Arrays.asList("shardId-000000000000","shardId-000000000001","shardId-000000000002","shardId-000000000003");
  String nextToken="NextToken";
  String fakeStreamName="fake-stream";
  List<Shard> shards=shardIds.stream().map(shardId -> new Shard().withShardId(shardId)).collect(Collectors.toList());
  Properties kinesisConsumerConfig=new Properties();
  kinesisConsumerConfig.setProperty(ConsumerConfigConstants.AWS_REGION,"us-east-1");
  kinesisConsumerConfig.setProperty(ConsumerConfigConstants.AWS_ACCESS_KEY_ID,"fake_accesskey");
  kinesisConsumerConfig.setProperty(ConsumerConfigConstants.AWS_SECRET_ACCESS_KEY,"fake_secretkey");
  KinesisProxy kinesisProxy=new KinesisProxy(kinesisConsumerConfig);
  AmazonKinesis mockClient=mock(AmazonKinesis.class);
  Whitebox.setInternalState(kinesisProxy,"kinesisClient",mockClient);
  ListShardsResult responseWithMoreData=new ListShardsResult().withShards(shards.subList(0,2)).withNextToken(nextToken);
  ListShardsResult responseFinal=new ListShardsResult().withShards(shards.subList(2,shards.size())).withNextToken(null);
  doReturn(responseWithMoreData).when(mockClient).listShards(argThat(initialListShardsRequestMatcher()));
  doReturn(responseFinal).when(mockClient).listShards(argThat(listShardsNextToken(nextToken)));
  HashMap<String,String> streamHashMap=createInitialSubscribedStreamsToLastDiscoveredShardsState(Arrays.asList(fakeStreamName));
  GetShardListResult shardListResult=kinesisProxy.getShardList(streamHashMap);
  Assert.assertEquals(shardListResult.hasRetrievedShards(),true);
  Set<String> expectedStreams=new HashSet<>();
  expectedStreams.add(fakeStreamName);
  Assert.assertEquals(shardListResult.getStreamsWithRetrievedShards(),expectedStreams);
  List<StreamShardHandle> actualShardList=shardListResult.getRetrievedShardListOfStream(fakeStreamName);
  List<StreamShardHandle> expectedStreamShard=new ArrayList<>();
  assertThat(actualShardList,hasSize(4));
  for (int i=0; i < 4; i++) {
    StreamShardHandle shardHandle=new StreamShardHandle(fakeStreamName,new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(i)));
    expectedStreamShard.add(shardHandle);
  }
  Assert.assertThat(actualShardList,containsInAnyOrder(expectedStreamShard.toArray(new StreamShardHandle[actualShardList.size()])));
}
