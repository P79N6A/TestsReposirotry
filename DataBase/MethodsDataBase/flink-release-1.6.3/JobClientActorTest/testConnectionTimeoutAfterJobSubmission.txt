/** 
 * Tests that a  {@link org.apache.flink.runtime.client.JobClientActorConnectionTimeoutException}is thrown after a successful job submission if the JobManager dies.
 * @throws Exception
 */
@Test(expected=JobClientActorConnectionTimeoutException.class) public void testConnectionTimeoutAfterJobSubmission() throws Exception {
  FiniteDuration jobClientActorTimeout=new FiniteDuration(1L,TimeUnit.SECONDS);
  FiniteDuration timeout=jobClientActorTimeout.$times(2);
  UUID leaderSessionID=UUID.randomUUID();
  ActorRef jobManager=system.actorOf(Props.create(JobAcceptingActor.class,leaderSessionID));
  SettableLeaderRetrievalService settableLeaderRetrievalService=new SettableLeaderRetrievalService(jobManager.path().toString(),leaderSessionID);
  Props jobClientActorProps=JobSubmissionClientActor.createActorProps(settableLeaderRetrievalService,jobClientActorTimeout,false,clientConfig);
  ActorRef jobClientActor=system.actorOf(jobClientActorProps);
  Future<Object> jobExecutionResult=Patterns.ask(jobClientActor,new JobClientMessages.SubmitJobAndWait(testJobGraph),new Timeout(timeout));
  Future<Object> waitFuture=Patterns.ask(jobManager,new RegisterTest(),new Timeout(timeout));
  Await.result(waitFuture,timeout);
  jobManager.tell(PoisonPill.getInstance(),ActorRef.noSender());
  Await.result(jobExecutionResult,timeout);
}
