@Test public void testLogNotFoundHandling() throws Exception {
  new JavaTestKit(system){
{
      ActorGateway jobManager=null;
      ActorGateway taskManager=null;
      try {
        ActorRef jm=system.actorOf(Props.create(new SimplePartitionStateLookupJobManagerCreator(LEADER_SESSION_ID,getTestActor())));
        jobManager=new AkkaActorGateway(jm,LEADER_SESSION_ID);
        final int dataPort=NetUtils.getAvailablePort();
        Configuration config=new Configuration();
        config.setInteger(TaskManagerOptions.DATA_PORT,dataPort);
        config.setInteger(TaskManagerOptions.NETWORK_REQUEST_BACKOFF_INITIAL,100);
        config.setInteger(TaskManagerOptions.NETWORK_REQUEST_BACKOFF_MAX,200);
        config.setString(ConfigConstants.TASK_MANAGER_LOG_PATH_KEY,"/i/dont/exist");
        highAvailabilityServices.setJobMasterLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID,new StandaloneLeaderRetrievalService(jobManager.path(),jobManager.leaderSessionID()));
        taskManager=TestingUtils.createTaskManager(system,highAvailabilityServices,config,false,true);
        final ActorGateway tm=taskManager;
        new Within(d){
          @Override protected void run(){
            Future<Object> logFuture=tm.ask(TaskManagerMessages.getRequestTaskManagerLog(),timeout);
            try {
              Await.result(logFuture,timeout);
              Assert.fail();
            }
 catch (            Exception e) {
              Assert.assertTrue(e.getMessage().startsWith("TaskManager log files are unavailable. Log file could not be found at"));
            }
          }
        }
;
      }
  finally {
        TestingUtils.stopActor(taskManager);
        TestingUtils.stopActor(jobManager);
      }
    }
  }
;
}
