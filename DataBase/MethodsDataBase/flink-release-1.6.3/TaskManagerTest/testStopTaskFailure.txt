/** 
 * Tests that the TaskManager sends a proper exception back to the sender if the stop task message fails.
 */
@Test public void testStopTaskFailure() throws Exception {
  ActorGateway jobManager=null;
  ActorGateway taskManager=null;
  try {
    final ExecutionAttemptID executionAttemptId=new ExecutionAttemptID();
    ActorRef jm=system.actorOf(Props.create(SimpleJobManager.class,LEADER_SESSION_ID));
    jobManager=new AkkaActorGateway(jm,LEADER_SESSION_ID);
    highAvailabilityServices.setJobMasterLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID,new StandaloneLeaderRetrievalService(jobManager.path(),jobManager.leaderSessionID()));
    taskManager=TestingUtils.createTaskManager(system,highAvailabilityServices,new Configuration(),true,true);
    TaskDeploymentDescriptor tdd=createTaskDeploymentDescriptor(new JobID(),"test job",new JobVertexID(),executionAttemptId,new SerializedValue<>(new ExecutionConfig()),"test task",1,0,1,0,new Configuration(),new Configuration(),BlockingNoOpInvokable.class.getName(),Collections.<ResultPartitionDeploymentDescriptor>emptyList(),Collections.<InputGateDeploymentDescriptor>emptyList(),Collections.emptyList(),Collections.emptyList(),0);
    Future<Object> submitResponse=taskManager.ask(new SubmitTask(tdd),timeout);
    Await.result(submitResponse,timeout);
    final Future<Object> taskRunning=taskManager.ask(new TestingTaskManagerMessages.NotifyWhenTaskIsRunning(executionAttemptId),timeout);
    Await.result(taskRunning,timeout);
    Future<Object> stopResponse=taskManager.ask(new StopTask(executionAttemptId),timeout);
    try {
      Await.result(stopResponse,timeout);
      fail("The stop task message should have failed.");
    }
 catch (    UnsupportedOperationException e) {
    }
  }
  finally {
    TestingUtils.stopActor(jobManager);
    TestingUtils.stopActor(taskManager);
  }
}
