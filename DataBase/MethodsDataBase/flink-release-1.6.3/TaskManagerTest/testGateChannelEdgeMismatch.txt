@Test public void testGateChannelEdgeMismatch(){
  new JavaTestKit(system){
{
      ActorGateway jobManager=null;
      ActorGateway taskManager=null;
      final ActorGateway testActorGateway=new AkkaActorGateway(getTestActor(),LEADER_SESSION_ID);
      try {
        ActorRef jm=system.actorOf(Props.create(SimpleJobManager.class,LEADER_SESSION_ID));
        jobManager=new AkkaActorGateway(jm,LEADER_SESSION_ID);
        highAvailabilityServices.setJobMasterLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID,new StandaloneLeaderRetrievalService(jobManager.path(),jobManager.leaderSessionID()));
        taskManager=TestingUtils.createTaskManager(system,highAvailabilityServices,new Configuration(),true,true);
        final ActorGateway tm=taskManager;
        final JobID jid=new JobID();
        JobVertexID vid1=new JobVertexID();
        JobVertexID vid2=new JobVertexID();
        final ExecutionAttemptID eid1=new ExecutionAttemptID();
        final ExecutionAttemptID eid2=new ExecutionAttemptID();
        final TaskDeploymentDescriptor tdd1=createTaskDeploymentDescriptor(jid,"TestJob",vid1,eid1,new SerializedValue<>(new ExecutionConfig()),"Sender",1,0,1,0,new Configuration(),new Configuration(),Tasks.Sender.class.getName(),Collections.<ResultPartitionDeploymentDescriptor>emptyList(),Collections.<InputGateDeploymentDescriptor>emptyList(),new ArrayList<>(),Collections.emptyList(),0);
        final TaskDeploymentDescriptor tdd2=createTaskDeploymentDescriptor(jid,"TestJob",vid2,eid2,new SerializedValue<>(new ExecutionConfig()),"Receiver",7,2,7,0,new Configuration(),new Configuration(),Tasks.Receiver.class.getName(),Collections.<ResultPartitionDeploymentDescriptor>emptyList(),Collections.<InputGateDeploymentDescriptor>emptyList(),new ArrayList<>(),Collections.emptyList(),0);
        new Within(d){
          @Override protected void run(){
            try {
              tm.tell(new SubmitTask(tdd1),testActorGateway);
              tm.tell(new SubmitTask(tdd2),testActorGateway);
              expectMsgEquals(Acknowledge.get());
              expectMsgEquals(Acknowledge.get());
              tm.tell(new TestingTaskManagerMessages.NotifyWhenTaskRemoved(eid1),testActorGateway);
              tm.tell(new TestingTaskManagerMessages.NotifyWhenTaskRemoved(eid2),testActorGateway);
              expectMsgEquals(true);
              expectMsgEquals(true);
              tm.tell(TestingTaskManagerMessages.getRequestRunningTasksMessage(),testActorGateway);
              Map<ExecutionAttemptID,Task> tasks=expectMsgClass(TestingTaskManagerMessages.ResponseRunningTasks.class).asJava();
              assertEquals(0,tasks.size());
            }
 catch (            Exception e) {
              e.printStackTrace();
              fail(e.getMessage());
            }
          }
        }
;
      }
 catch (      Exception e) {
        e.printStackTrace();
        fail(e.getMessage());
      }
 finally {
        TestingUtils.stopActor(taskManager);
        TestingUtils.stopActor(jobManager);
      }
    }
  }
;
}
