@Test public void testRegisterAndDownload() throws IOException {
  assumeTrue(!OperatingSystem.isWindows());
  JobID jobId=new JobID();
  BlobServer server=null;
  PermanentBlobCache cache=null;
  BlobLibraryCacheManager libCache=null;
  File cacheDir=null;
  try {
    Configuration config=new Configuration();
    config.setString(BlobServerOptions.STORAGE_DIRECTORY,temporaryFolder.newFolder().getAbsolutePath());
    config.setLong(BlobServerOptions.CLEANUP_INTERVAL,1_000_000L);
    server=new BlobServer(config,new VoidBlobStore());
    server.start();
    InetSocketAddress serverAddress=new InetSocketAddress("localhost",server.getPort());
    cache=new PermanentBlobCache(config,new VoidBlobStore(),serverAddress);
    PermanentBlobKey dataKey1=server.putPermanent(jobId,new byte[]{1,2,3,4,5,6,7,8});
    PermanentBlobKey dataKey2=server.putPermanent(jobId,new byte[]{11,12,13,14,15,16,17,18});
    libCache=new BlobLibraryCacheManager(cache,FlinkUserCodeClassLoaders.ResolveOrder.CHILD_FIRST,new String[0]);
    assertEquals(0,libCache.getNumberOfManagedJobs());
    checkFileCountForJob(2,jobId,server);
    checkFileCountForJob(0,jobId,cache);
    assertEquals(0,libCache.getNumberOfReferenceHolders(new JobID()));
    try {
      libCache.getClassLoader(new JobID());
      fail("Should fail with an IllegalStateException");
    }
 catch (    IllegalStateException e) {
    }
{
      Collection<PermanentBlobKey> keys=Collections.singleton(dataKey1);
      cache.registerJob(jobId);
      ExecutionAttemptID executionId=new ExecutionAttemptID();
      libCache.registerTask(jobId,executionId,keys,Collections.<URL>emptyList());
      ClassLoader classLoader1=libCache.getClassLoader(jobId);
      assertEquals(1,libCache.getNumberOfManagedJobs());
      assertEquals(1,libCache.getNumberOfReferenceHolders(jobId));
      assertEquals(1,checkFilesExist(jobId,keys,cache,true));
      checkFileCountForJob(2,jobId,server);
      checkFileCountForJob(1,jobId,cache);
      assertNotNull(libCache.getClassLoader(jobId));
      libCache.registerJob(jobId,keys,Collections.<URL>emptyList());
      ClassLoader classLoader2=libCache.getClassLoader(jobId);
      assertEquals(classLoader1,classLoader2);
      assertEquals(1,libCache.getNumberOfManagedJobs());
      assertEquals(2,libCache.getNumberOfReferenceHolders(jobId));
      assertEquals(1,checkFilesExist(jobId,keys,cache,true));
      checkFileCountForJob(2,jobId,server);
      checkFileCountForJob(1,jobId,cache);
      assertNotNull(libCache.getClassLoader(jobId));
      libCache.unregisterJob(jobId);
      assertEquals(1,libCache.getNumberOfManagedJobs());
      assertEquals(1,libCache.getNumberOfReferenceHolders(jobId));
      assertEquals(1,checkFilesExist(jobId,keys,cache,true));
      checkFileCountForJob(2,jobId,server);
      checkFileCountForJob(1,jobId,cache);
      libCache.unregisterTask(jobId,executionId);
      assertEquals(0,libCache.getNumberOfManagedJobs());
      assertEquals(0,libCache.getNumberOfReferenceHolders(jobId));
      checkFileCountForJob(2,jobId,server);
      checkFileCountForJob(1,jobId,cache);
      libCache.unregisterJob(jobId);
      assertEquals(0,libCache.getNumberOfManagedJobs());
      assertEquals(0,libCache.getNumberOfReferenceHolders(jobId));
      libCache.unregisterTask(jobId,executionId);
      assertEquals(0,libCache.getNumberOfManagedJobs());
      assertEquals(0,libCache.getNumberOfReferenceHolders(jobId));
      cache.releaseJob(jobId);
      checkFileCountForJob(2,jobId,server);
      checkFileCountForJob(1,jobId,cache);
    }
    cacheDir=cache.getStorageLocation(jobId,new PermanentBlobKey()).getParentFile();
    assertTrue(cacheDir.exists());
    assertTrue("Could not remove write permissions from cache directory",cacheDir.setWritable(false,false));
    try {
      cache.registerJob(jobId);
      libCache.registerTask(jobId,new ExecutionAttemptID(),Collections.singleton(dataKey2),Collections.<URL>emptyList());
      fail("This should fail with an IOException");
    }
 catch (    IOException e) {
      cache.releaseJob(jobId);
    }
  }
  finally {
    if (cacheDir != null) {
      if (!cacheDir.setWritable(true,false)) {
        System.err.println("Could not re-add write permissions to cache directory.");
      }
    }
    if (cache != null) {
      cache.close();
    }
    if (libCache != null) {
      libCache.shutdown();
    }
    if (server != null) {
      server.close();
    }
  }
}
