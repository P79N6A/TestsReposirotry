/** 
 * Tests that input gate can successfully convert unknown input channels into local and remote channels.
 */
@Test public void testUpdateUnknownInputChannel() throws Exception {
  final SingleInputGate inputGate=createInputGate(2);
  int buffersPerChannel=2;
  final NetworkEnvironment network=new NetworkEnvironment(100,32,0,0,buffersPerChannel,8,enableCreditBasedFlowControl);
  try {
    final ResultPartitionID localResultPartitionId=new ResultPartitionID();
    addUnknownInputChannel(network,inputGate,localResultPartitionId,0);
    final ResultPartitionID remoteResultPartitionId=new ResultPartitionID();
    addUnknownInputChannel(network,inputGate,remoteResultPartitionId,1);
    network.setupInputGate(inputGate);
    assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),is(instanceOf((UnknownInputChannel.class))));
    assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),is(instanceOf((UnknownInputChannel.class))));
    final ConnectionID remoteConnectionId=new ConnectionID(new InetSocketAddress("localhost",5000),0);
    inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(remoteResultPartitionId,ResultPartitionLocation.createRemote(remoteConnectionId)));
    assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),is(instanceOf((RemoteInputChannel.class))));
    assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),is(instanceOf((UnknownInputChannel.class))));
    inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(localResultPartitionId,ResultPartitionLocation.createLocal()));
    assertThat(inputGate.getInputChannels().get(remoteResultPartitionId.getPartitionId()),is(instanceOf((RemoteInputChannel.class))));
    assertThat(inputGate.getInputChannels().get(localResultPartitionId.getPartitionId()),is(instanceOf((LocalInputChannel.class))));
  }
  finally {
    inputGate.releaseAllResources();
    network.shutdown();
  }
}
