/** 
 * Tests that input gate requests and assigns network buffers when unknown input channel updates to remote input channel.
 */
@Test public void testRequestBuffersWithUnknownInputChannel() throws Exception {
  final SingleInputGate inputGate=createInputGate(1,ResultPartitionType.PIPELINED_BOUNDED);
  int buffersPerChannel=2;
  int extraNetworkBuffersPerGate=8;
  final NetworkEnvironment network=new NetworkEnvironment(100,32,0,0,buffersPerChannel,extraNetworkBuffersPerGate,enableCreditBasedFlowControl);
  try {
    final ResultPartitionID resultPartitionId=new ResultPartitionID();
    addUnknownInputChannel(network,inputGate,resultPartitionId,0);
    network.setupInputGate(inputGate);
    NetworkBufferPool bufferPool=network.getNetworkBufferPool();
    if (enableCreditBasedFlowControl) {
      assertEquals(bufferPool.getTotalNumberOfMemorySegments(),bufferPool.getNumberOfAvailableMemorySegments());
      assertEquals(extraNetworkBuffersPerGate,bufferPool.countBuffers());
    }
 else {
      assertEquals(buffersPerChannel + extraNetworkBuffersPerGate,bufferPool.countBuffers());
    }
    final ConnectionID connectionId=new ConnectionID(new InetSocketAddress("localhost",5000),0);
    inputGate.updateInputChannel(new InputChannelDeploymentDescriptor(resultPartitionId,ResultPartitionLocation.createRemote(connectionId)));
    if (enableCreditBasedFlowControl) {
      RemoteInputChannel remote=(RemoteInputChannel)inputGate.getInputChannels().get(resultPartitionId.getPartitionId());
      assertEquals(buffersPerChannel,remote.getNumberOfAvailableBuffers());
      assertEquals(bufferPool.getTotalNumberOfMemorySegments() - buffersPerChannel,bufferPool.getNumberOfAvailableMemorySegments());
      assertEquals(extraNetworkBuffersPerGate,bufferPool.countBuffers());
    }
 else {
      assertEquals(buffersPerChannel + extraNetworkBuffersPerGate,bufferPool.countBuffers());
    }
  }
  finally {
    inputGate.releaseAllResources();
    network.shutdown();
  }
}
