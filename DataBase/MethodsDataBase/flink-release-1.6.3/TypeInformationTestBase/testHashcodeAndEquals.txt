@Test public void testHashcodeAndEquals() throws Exception {
  final T[] testData=getTestData();
  final TypeInformation<?> unrelatedTypeInfo=new UnrelatedTypeInfo();
  for (  T typeInfo : testData) {
    if (typeInfo.getClass().getMethod("hashCode").getDeclaringClass() == Object.class) {
      throw new AssertionError("Type information does not implement own hashCode method: " + typeInfo.getClass().getCanonicalName());
    }
    if (typeInfo.getClass().getMethod("equals",Object.class).getDeclaringClass() == Object.class) {
      throw new AssertionError("Type information does not implement own equals method: " + typeInfo.getClass().getCanonicalName());
    }
    for (    T otherTypeInfo : testData) {
      assertTrue("canEqual() returns inconsistent results.",typeInfo.canEqual(otherTypeInfo));
      if (typeInfo == otherTypeInfo) {
        assertTrue("hashCode() returns inconsistent results.",typeInfo.hashCode() == otherTypeInfo.hashCode());
        assertEquals("equals() is false for same object.",typeInfo,otherTypeInfo);
      }
 else {
        assertNotEquals("equals() returned true for different objects.",typeInfo,otherTypeInfo);
      }
    }
    assertFalse("Type information allows to compare with unrelated type.",typeInfo.canEqual(unrelatedTypeInfo));
    assertNotEquals(typeInfo,unrelatedTypeInfo);
  }
}
