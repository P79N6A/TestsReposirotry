@Test public void testIgnorePartitionStateSentinelInSnapshot() throws Exception {
  final String testTopic="test topic name";
  Map<KafkaTopicPartition,Long> originalPartitions=new HashMap<>();
  originalPartitions.put(new KafkaTopicPartition(testTopic,1),KafkaTopicPartitionStateSentinel.LATEST_OFFSET);
  originalPartitions.put(new KafkaTopicPartition(testTopic,2),KafkaTopicPartitionStateSentinel.GROUP_OFFSET);
  originalPartitions.put(new KafkaTopicPartition(testTopic,3),KafkaTopicPartitionStateSentinel.EARLIEST_OFFSET);
  TestSourceContext<Long> sourceContext=new TestSourceContext<>();
  TestFetcher<Long> fetcher=new TestFetcher<>(sourceContext,originalPartitions,null,null,new TestProcessingTimeService(),0);
synchronized (sourceContext.getCheckpointLock()) {
    HashMap<KafkaTopicPartition,Long> currentState=fetcher.snapshotCurrentState();
    fetcher.commitInternalOffsetsToKafka(currentState,new KafkaCommitCallback(){
      @Override public void onSuccess(){
      }
      @Override public void onException(      Throwable cause){
        throw new RuntimeException("Callback failed",cause);
      }
    }
);
    assertTrue(fetcher.getLastCommittedOffsets().isPresent());
    assertEquals(Collections.emptyMap(),fetcher.getLastCommittedOffsets().get());
  }
}
