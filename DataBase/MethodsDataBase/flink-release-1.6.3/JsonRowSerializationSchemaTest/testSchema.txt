@Test public void testSchema() throws IOException {
  final TypeInformation<Row> rowSchema=JsonRowSchemaConverter.convert("{" + "    type: 'object'," + "    properties: {"+ "         id: { type: 'integer' },"+ "         idNumber: { type: 'number' },"+ "         idOrNull: { type: ['integer', 'null'] },"+ "         name: { type: 'string' },"+ "         date: { type: 'string', format: 'date' },"+ "         time: { type: 'string', format: 'time' },"+ "         timestamp: { type: 'string', format: 'date-time' },"+ "         bytes: { type: 'string', contentEncoding: 'base64' },"+ "         numbers: { type: 'array', items: { type: 'integer' } },"+ "         strings: { type: 'array', items: { type: 'string' } },"+ "         nested: { "+ "             type: 'object',"+ "             properties: { "+ "                 booleanField: { type: 'boolean' },"+ "                 decimalField: { type: 'number' }"+ "             }"+ "         }"+ "    }"+ "}");
  final Row row=new Row(11);
  row.setField(0,BigDecimal.valueOf(-333));
  row.setField(1,BigDecimal.valueOf(12.2222));
  row.setField(2,null);
  row.setField(3,"");
  row.setField(4,Date.valueOf("1990-10-14"));
  row.setField(5,Time.valueOf("12:12:43"));
  row.setField(6,Timestamp.valueOf("1990-10-14 12:12:43"));
  final byte[] bytes=new byte[1024];
  ThreadLocalRandom.current().nextBytes(bytes);
  row.setField(7,bytes);
  final BigDecimal[] numbers=new BigDecimal[]{BigDecimal.valueOf(1),BigDecimal.valueOf(2),BigDecimal.valueOf(3)};
  row.setField(8,numbers);
  final String[] strings=new String[]{"one","two","three"};
  row.setField(9,strings);
  final Row nestedRow=new Row(2);
  nestedRow.setField(0,true);
  nestedRow.setField(1,BigDecimal.valueOf(12));
  row.setField(10,nestedRow);
  final Row resultRow=serializeAndDeserialize(rowSchema,row);
  assertEquals(row,resultRow);
}
