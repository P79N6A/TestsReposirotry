@Test public void scheduleWithIntermediateRelease() throws Exception {
  JobVertexID jid1=new JobVertexID();
  JobVertexID jid2=new JobVertexID();
  JobVertexID jid3=new JobVertexID();
  JobVertexID jid4=new JobVertexID();
  testingSlotProvider.addTaskManager(1);
  testingSlotProvider.addTaskManager(1);
  assertEquals(2,testingSlotProvider.getNumberOfAvailableSlots());
  SlotSharingGroup sharingGroup=new SlotSharingGroup();
  CoLocationConstraint c1=new CoLocationConstraint(new CoLocationGroup());
  LogicalSlot s1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,0,1,sharingGroup),sharingGroup.getSlotSharingGroupId(),c1),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,0,1,sharingGroup),sharingGroup.getSlotSharingGroupId(),c1),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot sSolo=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid4,0,1,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  ResourceID taskManager=s1.getTaskManagerLocation().getResourceID();
  s1.releaseSlot();
  s2.releaseSlot();
  sSolo.releaseSlot();
  LogicalSlot sNew=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid3,0,1,sharingGroup),sharingGroup.getSlotSharingGroupId(),c1),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  assertEquals(taskManager,sNew.getTaskManagerLocation().getResourceID());
  assertEquals(2,testingSlotProvider.getNumberOfLocalizedAssignments());
  assertEquals(0,testingSlotProvider.getNumberOfNonLocalizedAssignments());
  assertEquals(2,testingSlotProvider.getNumberOfUnconstrainedAssignments());
}
