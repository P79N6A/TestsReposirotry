@Test public void scheduleWithReleaseNoResource() throws Exception {
  JobVertexID jid1=new JobVertexID();
  JobVertexID jid2=new JobVertexID();
  JobVertexID jid3=new JobVertexID();
  testingSlotProvider.addTaskManager(1);
  testingSlotProvider.addTaskManager(1);
  assertEquals(2,testingSlotProvider.getNumberOfAvailableSlots());
  SlotSharingGroup sharingGroup=new SlotSharingGroup();
  CoLocationConstraint c1=new CoLocationConstraint(new CoLocationGroup());
  LogicalSlot s1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,0,1,sharingGroup),sharingGroup.getSlotSharingGroupId(),c1),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  s1.releaseSlot();
  testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,0,1,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,1,2,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  try {
    testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid3,0,1,sharingGroup),sharingGroup.getSlotSharingGroupId(),c1),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    fail("Scheduled even though no resource was available.");
  }
 catch (  ExecutionException e) {
    assertTrue(e.getCause() instanceof NoResourceAvailableException);
  }
  assertEquals(0,testingSlotProvider.getNumberOfLocalizedAssignments());
  assertEquals(0,testingSlotProvider.getNumberOfNonLocalizedAssignments());
  assertEquals(3,testingSlotProvider.getNumberOfUnconstrainedAssignments());
}
