@Test public void scheduleAllSharedAndCoLocated() throws Exception {
  JobVertexID jid1=new JobVertexID();
  JobVertexID jid2=new JobVertexID();
  testingSlotProvider.addTaskManager(2);
  testingSlotProvider.addTaskManager(2);
  testingSlotProvider.addTaskManager(2);
  assertEquals(6,testingSlotProvider.getNumberOfAvailableSlots());
  SlotSharingGroup sharingGroup=new SlotSharingGroup();
  CoLocationGroup ccg=new CoLocationGroup();
  CoLocationConstraint c1=new CoLocationConstraint(ccg);
  CoLocationConstraint c2=new CoLocationConstraint(ccg);
  CoLocationConstraint c3=new CoLocationConstraint(ccg);
  CoLocationConstraint c4=new CoLocationConstraint(ccg);
  CoLocationConstraint c5=new CoLocationConstraint(ccg);
  CoLocationConstraint c6=new CoLocationConstraint(ccg);
  LogicalSlot s1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,0,6,sharingGroup),sharingGroup.getSlotSharingGroupId(),c1),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,1,6,sharingGroup),sharingGroup.getSlotSharingGroupId(),c2),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s3=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,2,6,sharingGroup),sharingGroup.getSlotSharingGroupId(),c3),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s4=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,3,6,sharingGroup),sharingGroup.getSlotSharingGroupId(),c4),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s5=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,0,6,sharingGroup),sharingGroup.getSlotSharingGroupId(),c1),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s6=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,1,6,sharingGroup),sharingGroup.getSlotSharingGroupId(),c2),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s7=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,2,6,sharingGroup),sharingGroup.getSlotSharingGroupId(),c3),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s8=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,4,6,sharingGroup),sharingGroup.getSlotSharingGroupId(),c5),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s9=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid1,5,6,sharingGroup),sharingGroup.getSlotSharingGroupId(),c6),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s10=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,3,6,sharingGroup),sharingGroup.getSlotSharingGroupId(),c4),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s11=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,4,6,sharingGroup),sharingGroup.getSlotSharingGroupId(),c5),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s12=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(jid2,5,6,sharingGroup),sharingGroup.getSlotSharingGroupId(),c6),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  assertNotNull(s1);
  assertNotNull(s2);
  assertNotNull(s3);
  assertNotNull(s4);
  assertNotNull(s5);
  assertNotNull(s6);
  assertNotNull(s7);
  assertNotNull(s8);
  assertNotNull(s9);
  assertNotNull(s10);
  assertNotNull(s11);
  assertNotNull(s12);
  assertEquals(s1.getTaskManagerLocation(),s5.getTaskManagerLocation());
  assertEquals(s2.getTaskManagerLocation(),s6.getTaskManagerLocation());
  assertEquals(s3.getTaskManagerLocation(),s7.getTaskManagerLocation());
  assertEquals(s4.getTaskManagerLocation(),s10.getTaskManagerLocation());
  assertEquals(s8.getTaskManagerLocation(),s11.getTaskManagerLocation());
  assertEquals(s9.getTaskManagerLocation(),s12.getTaskManagerLocation());
  assertEquals(c1.getLocation(),s1.getTaskManagerLocation());
  assertEquals(c2.getLocation(),s2.getTaskManagerLocation());
  assertEquals(c3.getLocation(),s3.getTaskManagerLocation());
  assertEquals(c4.getLocation(),s4.getTaskManagerLocation());
  assertEquals(c5.getLocation(),s8.getTaskManagerLocation());
  assertEquals(c6.getLocation(),s9.getTaskManagerLocation());
  assertEquals(0,testingSlotProvider.getNumberOfAvailableSlots());
  assertEquals(6,testingSlotProvider.getNumberOfLocalizedAssignments());
  assertEquals(0,testingSlotProvider.getNumberOfNonLocalizedAssignments());
  assertEquals(6,testingSlotProvider.getNumberOfUnconstrainedAssignments());
  s1.releaseSlot();
  s2.releaseSlot();
  s3.releaseSlot();
  s4.releaseSlot();
  s7.releaseSlot();
  s10.releaseSlot();
  s11.releaseSlot();
  s12.releaseSlot();
  assertTrue(testingSlotProvider.getNumberOfAvailableSlots() >= 1);
  LogicalSlot single=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertex(new JobVertexID(),0,1,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  assertNotNull(single);
  s1.releaseSlot();
  s2.releaseSlot();
  s3.releaseSlot();
  s5.releaseSlot();
  s6.releaseSlot();
  s7.releaseSlot();
  s8.releaseSlot();
  s9.releaseSlot();
  s11.releaseSlot();
  s12.releaseSlot();
  assertEquals(5,testingSlotProvider.getNumberOfAvailableSlots());
  assertEquals(6,testingSlotProvider.getNumberOfLocalizedAssignments());
  assertEquals(0,testingSlotProvider.getNumberOfNonLocalizedAssignments());
  assertEquals(7,testingSlotProvider.getNumberOfUnconstrainedAssignments());
}
