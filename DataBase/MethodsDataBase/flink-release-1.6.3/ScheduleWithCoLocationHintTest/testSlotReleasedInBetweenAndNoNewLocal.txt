@Test public void testSlotReleasedInBetweenAndNoNewLocal() throws Exception {
  JobVertexID jid1=new JobVertexID();
  JobVertexID jid2=new JobVertexID();
  JobVertexID jidx=new JobVertexID();
  TaskManagerLocation loc1=testingSlotProvider.addTaskManager(1);
  TaskManagerLocation loc2=testingSlotProvider.addTaskManager(1);
  assertEquals(2,testingSlotProvider.getNumberOfAvailableSlots());
  SlotSharingGroup sharingGroup=new SlotSharingGroup();
  CoLocationGroup ccg=new CoLocationGroup();
  CoLocationConstraint cc1=new CoLocationConstraint(ccg);
  CoLocationConstraint cc2=new CoLocationConstraint(ccg);
  LogicalSlot s1=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertexWithLocation(jid1,0,2,sharingGroup,loc1),sharingGroup.getSlotSharingGroupId(),cc1),false,slotProfileForLocation(loc1),TestingUtils.infiniteTime()).get();
  LogicalSlot s2=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertexWithLocation(jid1,1,2,sharingGroup,loc2),sharingGroup.getSlotSharingGroupId(),cc2),false,slotProfileForLocation(loc2),TestingUtils.infiniteTime()).get();
  s1.releaseSlot();
  s2.releaseSlot();
  assertEquals(2,testingSlotProvider.getNumberOfAvailableSlots());
  assertEquals(0,sharingGroup.getTaskAssignment().getNumberOfSlots());
  LogicalSlot sa=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertexWithLocation(jidx,0,2,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot sb=testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertexWithLocation(jidx,1,2,null)),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  try {
    testingSlotProvider.allocateSlot(new ScheduledUnit(getTestVertexWithLocation(jid2,0,2,sharingGroup,loc2),sharingGroup.getSlotSharingGroupId(),cc1),false,slotProfileForLocation(loc2),TestingUtils.infiniteTime()).get();
    fail("should not be able to find a resource");
  }
 catch (  ExecutionException e) {
    assertTrue(e.getCause() instanceof NoResourceAvailableException);
  }
catch (  Exception e) {
    fail("wrong exception");
  }
  sa.releaseSlot();
  sb.releaseSlot();
  assertEquals(2,testingSlotProvider.getNumberOfAvailableSlots());
  assertEquals(2,testingSlotProvider.getNumberOfLocalizedAssignments());
  assertEquals(0,testingSlotProvider.getNumberOfNonLocalizedAssignments());
  assertEquals(2,testingSlotProvider.getNumberOfUnconstrainedAssignments());
}
