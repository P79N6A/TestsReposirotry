@Test public void testClearingBufferWithUntilAtTheEnd() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event a1=new Event(40,"a",1.0);
  Event d1=new Event(41,"d",2.0);
  Event d2=new Event(41,"d",2.0);
  Event d3=new Event(41,"d",2.0);
  Event d4=new Event(41,"d",2.0);
  inputEvents.add(new StreamRecord<>(a1,1));
  inputEvents.add(new StreamRecord<>(d1,2));
  inputEvents.add(new StreamRecord<>(d2,2));
  inputEvents.add(new StreamRecord<>(d3,2));
  inputEvents.add(new StreamRecord<>(d4,4));
  Pattern<Event,?> pattern=Pattern.<Event>begin("a").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).followedBy("d").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("d");
    }
  }
).oneOrMore().until(new IterativeCondition<Event>(){
    @Override public boolean filter(    Event value,    Context<Event> ctx) throws Exception {
      return Iterators.size(ctx.getEventsForPattern("d").iterator()) == 3;
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  NFAState nfaState=nfa.createInitialNFAState();
  List<List<Event>> resultingPatterns=feedNFA(inputEvents,nfa,nfaState);
  compareMaps(resultingPatterns,Lists.<List<Event>>newArrayList(Lists.newArrayList(a1,d1,d2,d3),Lists.newArrayList(a1,d1,d2),Lists.newArrayList(a1,d1)));
  assertEquals(1,nfaState.getPartialMatches().size());
  assertEquals("a",nfaState.getPartialMatches().peek().getCurrentStateName());
}
