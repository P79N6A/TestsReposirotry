@Test public void testEndWLoopingWSameElement() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event startEvent=new Event(40,"c",1.0);
  Event middleEvent1=new Event(41,"a",2.0);
  Event middleEvent1a=new Event(41,"a",2.0);
  Event middleEvent1b=new Event(41,"a",2.0);
  final Event end=new Event(44,"b",5.0);
  inputEvents.add(new StreamRecord<>(startEvent,1));
  inputEvents.add(new StreamRecord<>(middleEvent1,3));
  inputEvents.add(new StreamRecord<>(middleEvent1a,3));
  inputEvents.add(new StreamRecord<>(middleEvent1b,3));
  inputEvents.add(new StreamRecord<>(end,7));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("c");
    }
  }
).followedByAny("middle").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).oneOrMore().optional();
  NFA<Event> nfa=compile(pattern,false);
  final List<List<Event>> resultingPatterns=feedNFA(inputEvents,nfa);
  compareMaps(resultingPatterns,Lists.<List<Event>>newArrayList(Lists.newArrayList(startEvent),Lists.newArrayList(startEvent,middleEvent1),Lists.newArrayList(startEvent,middleEvent1a),Lists.newArrayList(startEvent,middleEvent1b),Lists.newArrayList(startEvent,middleEvent1,middleEvent1a),Lists.newArrayList(startEvent,middleEvent1a,middleEvent1b),Lists.newArrayList(startEvent,middleEvent1,middleEvent1a,middleEvent1b)));
}
