/** 
 * Tests that one can can mark allocated slots as active.
 */
@Test public void testTryMarkSlotActive() throws SlotNotFoundException {
  final TaskSlotTable taskSlotTable=createTaskSlotTable(Collections.nCopies(3,ResourceProfile.UNKNOWN));
  try {
    taskSlotTable.start(new TestingSlotActionsBuilder().build());
    final JobID jobId1=new JobID();
    final AllocationID allocationId1=new AllocationID();
    taskSlotTable.allocateSlot(0,jobId1,allocationId1,SLOT_TIMEOUT);
    final AllocationID allocationId2=new AllocationID();
    taskSlotTable.allocateSlot(1,jobId1,allocationId2,SLOT_TIMEOUT);
    final AllocationID allocationId3=new AllocationID();
    final JobID jobId2=new JobID();
    taskSlotTable.allocateSlot(2,jobId2,allocationId3,SLOT_TIMEOUT);
    taskSlotTable.markSlotActive(allocationId1);
    assertThat(taskSlotTable.isAllocated(0,jobId1,allocationId1),is(true));
    assertThat(taskSlotTable.isAllocated(1,jobId1,allocationId2),is(true));
    assertThat(taskSlotTable.isAllocated(2,jobId2,allocationId3),is(true));
    assertThat(IteratorUtils.toList(taskSlotTable.getActiveSlots(jobId1)),is(equalTo(Arrays.asList(allocationId1))));
    assertThat(taskSlotTable.tryMarkSlotActive(jobId1,allocationId1),is(true));
    assertThat(taskSlotTable.tryMarkSlotActive(jobId1,allocationId2),is(true));
    assertThat(taskSlotTable.tryMarkSlotActive(jobId1,allocationId3),is(false));
    assertThat(Sets.newHashSet(taskSlotTable.getActiveSlots(jobId1)),is(equalTo(new HashSet<>(Arrays.asList(allocationId2,allocationId1)))));
  }
  finally {
    taskSlotTable.stop();
  }
}
