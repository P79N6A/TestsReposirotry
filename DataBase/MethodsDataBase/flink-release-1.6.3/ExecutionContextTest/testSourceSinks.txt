@Test public void testSourceSinks() throws Exception {
  final ExecutionContext<?> context=createExecutionContext();
  final Map<String,TableSource<?>> sources=context.getTableSources();
  final Map<String,TableSink<?>> sinks=context.getTableSinks();
  assertEquals(new HashSet<>(Arrays.asList("TableSourceSink","TableNumber1","TableNumber2")),sources.keySet());
  assertEquals(new HashSet<>(Collections.singletonList("TableSourceSink")),sinks.keySet());
  assertArrayEquals(new String[]{"IntegerField1","StringField1"},sources.get("TableNumber1").getTableSchema().getColumnNames());
  assertArrayEquals(new TypeInformation[]{Types.INT(),Types.STRING()},sources.get("TableNumber1").getTableSchema().getTypes());
  assertArrayEquals(new String[]{"IntegerField2","StringField2"},sources.get("TableNumber2").getTableSchema().getColumnNames());
  assertArrayEquals(new TypeInformation[]{Types.INT(),Types.STRING()},sources.get("TableNumber2").getTableSchema().getTypes());
  assertArrayEquals(new String[]{"BooleanField","StringField"},sinks.get("TableSourceSink").getFieldNames());
  assertArrayEquals(new TypeInformation[]{Types.BOOLEAN(),Types.STRING()},sinks.get("TableSourceSink").getFieldTypes());
  final TableEnvironment tableEnv=context.createEnvironmentInstance().getTableEnvironment();
  assertArrayEquals(new String[]{"TableNumber1","TableNumber2","TableSourceSink"},tableEnv.listTables());
}
