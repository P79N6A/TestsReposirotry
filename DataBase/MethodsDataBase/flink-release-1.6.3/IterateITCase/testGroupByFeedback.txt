/** 
 * This test relies on the hash function used by the  {@link DataStream#keyBy}, which is assumed to be  {@link MathUtils#murmurHash}. <p>For the test to pass all FlatMappers must see at least two records in the iteration, which can only be achieved if the hashed values of the input keys map to a complete congruence system. Given that the test is designed for 3 parallel FlatMapper instances keys chosen from the [1,3] range are a suitable choice.
 */
@Test public void testGroupByFeedback() throws Exception {
  int numRetries=5;
  int timeoutScale=1;
  for (int numRetry=0; numRetry < numRetries; numRetry++) {
    try {
      StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
      env.setParallelism(parallelism - 1);
      env.getConfig().setMaxParallelism(env.getParallelism());
      KeySelector<Integer,Integer> key=new KeySelector<Integer,Integer>(){
        @Override public Integer getKey(        Integer value) throws Exception {
          return value % 3;
        }
      }
;
      DataStream<Integer> source=env.fromElements(1,2,3).map(noOpIntMap).name("ParallelizeMap");
      IterativeStream<Integer> it=source.keyBy(key).iterate(3000 * timeoutScale);
      DataStream<Integer> head=it.flatMap(new RichFlatMapFunction<Integer,Integer>(){
        int received=0;
        int key=-1;
        @Override public void flatMap(        Integer value,        Collector<Integer> out) throws Exception {
          received++;
          if (key == -1) {
            key=MathUtils.murmurHash(value % 3) % 3;
          }
 else {
            assertEquals(key,MathUtils.murmurHash(value % 3) % 3);
          }
          if (value > 0) {
            out.collect(value - 1);
          }
        }
        @Override public void close(){
          assertTrue(received > 1);
        }
      }
);
      it.closeWith(head.keyBy(key).union(head.map(noOpIntMap).keyBy(key))).addSink(new ReceiveCheckNoOpSink<Integer>());
      env.execute();
      break;
    }
 catch (    Throwable t) {
      LOG.info("Run " + (numRetry + 1) + "/"+ numRetries+ " failed",t);
      if (numRetry >= numRetries - 1) {
        throw t;
      }
 else {
        timeoutScale*=2;
      }
    }
  }
}
