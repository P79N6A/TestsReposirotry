@Test public void testSubmitWithUnknownSavepointPath() throws Exception {
  int numTaskManagers=1;
  int numSlotsPerTaskManager=1;
  int parallelism=numTaskManagers * numSlotsPerTaskManager;
  final File tmpDir=folder.newFolder();
  final File savepointDir=new File(tmpDir,"savepoints");
  final Configuration config=new Configuration();
  config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY,savepointDir.toURI().toString());
  MiniClusterResource cluster=new MiniClusterResource(new MiniClusterResourceConfiguration.Builder().setConfiguration(config).setNumberTaskManagers(numTaskManagers).setNumberSlotsPerTaskManager(numSlotsPerTaskManager).build());
  cluster.before();
  ClusterClient<?> client=cluster.getClusterClient();
  try {
    int numberOfRetries=1000;
    final JobGraph jobGraph=createJobGraph(parallelism,numberOfRetries,3600000);
    jobGraph.setSavepointRestoreSettings(SavepointRestoreSettings.forPath("unknown path"));
    assertEquals("unknown path",jobGraph.getSavepointRestoreSettings().getRestorePath());
    LOG.info("Submitting job " + jobGraph.getJobID() + " in detached mode.");
    try {
      client.setDetached(false);
      client.submitJob(jobGraph,SavepointITCase.class.getClassLoader());
    }
 catch (    Exception e) {
      Optional<JobExecutionException> expectedJobExecutionException=ExceptionUtils.findThrowable(e,JobExecutionException.class);
      Optional<FileNotFoundException> expectedFileNotFoundException=ExceptionUtils.findThrowable(e,FileNotFoundException.class);
      if (!(expectedJobExecutionException.isPresent() && expectedFileNotFoundException.isPresent())) {
        throw e;
      }
    }
  }
  finally {
    cluster.after();
  }
}
