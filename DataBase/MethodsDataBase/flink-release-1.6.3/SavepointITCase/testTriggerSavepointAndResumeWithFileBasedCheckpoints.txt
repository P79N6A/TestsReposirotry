/** 
 * Triggers a savepoint for a job that uses the FsStateBackend. We expect that all checkpoint files are written to a new savepoint directory. <ol> <li>Submit job, wait for some progress</li> <li>Trigger savepoint and verify that savepoint has been created</li> <li>Shut down the cluster, re-submit the job from the savepoint, verify that the initial state has been reset, and all tasks are running again</li> <li>Cancel job, dispose the savepoint, and verify that everything has been cleaned up</li> </ol>
 */
@Test public void testTriggerSavepointAndResumeWithFileBasedCheckpoints() throws Exception {
  final int numTaskManagers=2;
  final int numSlotsPerTaskManager=2;
  final int parallelism=numTaskManagers * numSlotsPerTaskManager;
  final File testRoot=folder.newFolder();
  Configuration config=new Configuration();
  final File checkpointDir=new File(testRoot,"checkpoints");
  final File savepointRootDir=new File(testRoot,"savepoints");
  if (!checkpointDir.mkdir() || !savepointRootDir.mkdirs()) {
    fail("Test setup failed: failed to create temporary directories.");
  }
  config.setString(CheckpointingOptions.STATE_BACKEND,"filesystem");
  config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY,checkpointDir.toURI().toString());
  config.setInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD,0);
  config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY,savepointRootDir.toURI().toString());
  MiniClusterResourceFactory clusterFactory=new MiniClusterResourceFactory(numTaskManagers,numSlotsPerTaskManager,config);
  String savepointPath=submitJobAndGetVerifiedSavepoint(clusterFactory,parallelism);
  restoreJobAndVerifyState(savepointPath,clusterFactory,parallelism);
}
