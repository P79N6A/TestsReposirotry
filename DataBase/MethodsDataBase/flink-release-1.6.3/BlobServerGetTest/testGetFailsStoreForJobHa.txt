/** 
 * Retrieves a BLOB from the HA store to a  {@link BlobServer} which cannot create the finalstorage file. File transfers should fail.
 */
@Test public void testGetFailsStoreForJobHa() throws IOException {
  assumeTrue(!OperatingSystem.isWindows());
  final JobID jobId=new JobID();
  final Configuration config=new Configuration();
  config.setString(HighAvailabilityOptions.HA_MODE,"ZOOKEEPER");
  config.setString(BlobServerOptions.STORAGE_DIRECTORY,temporaryFolder.newFolder().getAbsolutePath());
  config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,temporaryFolder.newFolder().getPath());
  BlobStoreService blobStore=null;
  try {
    blobStore=BlobUtils.createBlobStoreFromConfig(config);
    File jobStoreDir=null;
    try (BlobServer server=new BlobServer(config,blobStore)){
      server.start();
      byte[] data=new byte[2000000];
      rnd.nextBytes(data);
      BlobKey blobKey=put(server,jobId,data,PERMANENT_BLOB);
      assertTrue(server.getStorageLocation(jobId,blobKey).delete());
      jobStoreDir=server.getStorageLocation(jobId,blobKey).getParentFile();
      assertTrue(jobStoreDir.setExecutable(true,false));
      assertTrue(jobStoreDir.setReadable(true,false));
      assertTrue(jobStoreDir.setWritable(false,false));
      exception.expect(AccessDeniedException.class);
      try {
        get(server,jobId,blobKey);
      }
  finally {
        File incomingFileDir=new File(jobStoreDir.getParent(),"incoming");
        assertArrayEquals(new String[]{},incomingFileDir.list());
        assertArrayEquals(new String[]{},jobStoreDir.list());
      }
    }
  finally {
      if (jobStoreDir != null) {
        jobStoreDir.setWritable(true,false);
      }
    }
  }
  finally {
    if (blobStore != null) {
      blobStore.closeAndCleanupAllData();
    }
  }
}
