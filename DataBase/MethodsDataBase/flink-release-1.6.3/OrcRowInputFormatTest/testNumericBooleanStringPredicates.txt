@Test public void testNumericBooleanStringPredicates() throws Exception {
  rowOrcInputFormat=new OrcRowInputFormat(getPath(TEST_FILE_NESTED),TEST_SCHEMA_NESTED,new Configuration());
  rowOrcInputFormat.selectFields(0,1,2,3,4,5,6,8);
  rowOrcInputFormat.addPredicate(new OrcRowInputFormat.Equals("boolean1",PredicateLeaf.Type.BOOLEAN,false));
  rowOrcInputFormat.addPredicate(new OrcRowInputFormat.LessThan("byte1",PredicateLeaf.Type.LONG,1));
  rowOrcInputFormat.addPredicate(new OrcRowInputFormat.LessThanEquals("short1",PredicateLeaf.Type.LONG,1024));
  rowOrcInputFormat.addPredicate(new OrcRowInputFormat.Between("int1",PredicateLeaf.Type.LONG,-1,65536));
  rowOrcInputFormat.addPredicate(new OrcRowInputFormat.Equals("long1",PredicateLeaf.Type.LONG,9223372036854775807L));
  rowOrcInputFormat.addPredicate(new OrcRowInputFormat.Equals("float1",PredicateLeaf.Type.FLOAT,1.0));
  rowOrcInputFormat.addPredicate(new OrcRowInputFormat.Equals("double1",PredicateLeaf.Type.FLOAT,-15.0));
  rowOrcInputFormat.addPredicate(new OrcRowInputFormat.IsNull("string1",PredicateLeaf.Type.STRING));
  rowOrcInputFormat.addPredicate(new OrcRowInputFormat.Equals("string1",PredicateLeaf.Type.STRING,"hello"));
  FileInputSplit[] splits=rowOrcInputFormat.createInputSplits(1);
  rowOrcInputFormat.openInputFormat();
  OrcRowInputFormat spy=spy(rowOrcInputFormat);
  Reader.Options options=new Reader.Options();
  doReturn(options).when(spy).getOptions(any());
  spy.openInputFormat();
  spy.open(splits[0]);
  SearchArgument sarg=options.getSearchArgument();
  assertNotNull(sarg);
  assertEquals("(and leaf-0 leaf-1 leaf-2 leaf-3 leaf-4 leaf-5 leaf-6 leaf-7 leaf-8)",sarg.getExpression().toString());
  assertEquals(9,sarg.getLeaves().size());
  List<PredicateLeaf> leaves=sarg.getLeaves();
  assertEquals("(EQUALS boolean1 false)",leaves.get(0).toString());
  assertEquals("(LESS_THAN byte1 1)",leaves.get(1).toString());
  assertEquals("(LESS_THAN_EQUALS short1 1024)",leaves.get(2).toString());
  assertEquals("(BETWEEN int1 -1 65536)",leaves.get(3).toString());
  assertEquals("(EQUALS long1 9223372036854775807)",leaves.get(4).toString());
  assertEquals("(EQUALS float1 1.0)",leaves.get(5).toString());
  assertEquals("(EQUALS double1 -15.0)",leaves.get(6).toString());
  assertEquals("(IS_NULL string1)",leaves.get(7).toString());
  assertEquals("(EQUALS string1 hello)",leaves.get(8).toString());
}
