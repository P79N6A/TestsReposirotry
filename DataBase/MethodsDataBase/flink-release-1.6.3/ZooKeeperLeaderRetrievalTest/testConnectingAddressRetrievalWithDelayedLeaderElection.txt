/** 
 * Tests that LeaderRetrievalUtils.findConnectingAddress finds the correct connecting address in case of an old leader address in ZooKeeper and a subsequent election of a new leader. The findConnectingAddress should block until the new leader has been elected and his address has been written to ZooKeeper.
 */
@Test public void testConnectingAddressRetrievalWithDelayedLeaderElection() throws Exception {
  FiniteDuration timeout=new FiniteDuration(1,TimeUnit.MINUTES);
  long sleepingTime=1000;
  LeaderElectionService leaderElectionService=null;
  LeaderElectionService faultyLeaderElectionService;
  ServerSocket serverSocket;
  InetAddress localHost;
  Thread thread;
  try {
    String wrongAddress=AkkaRpcServiceUtils.getRpcUrl("1.1.1.1",1234,"foobar",HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION,config);
    try {
      localHost=InetAddress.getLocalHost();
      serverSocket=new ServerSocket(0,50,localHost);
    }
 catch (    UnknownHostException e) {
      System.err.println("Skipping 'testNetworkInterfaceSelection' test.");
      return;
    }
catch (    IOException e) {
      System.err.println("Skipping 'testNetworkInterfaceSelection' test.");
      return;
    }
    InetSocketAddress correctInetSocketAddress=new InetSocketAddress(localHost,serverSocket.getLocalPort());
    String correctAddress=AkkaRpcServiceUtils.getRpcUrl(localHost.getHostName(),correctInetSocketAddress.getPort(),JobMaster.JOB_MANAGER_NAME,HighAvailabilityServicesUtils.AddressResolution.NO_ADDRESS_RESOLUTION,config);
    faultyLeaderElectionService=highAvailabilityServices.getJobManagerLeaderElectionService(HighAvailabilityServices.DEFAULT_JOB_ID);
    TestingContender wrongLeaderAddressContender=new TestingContender(wrongAddress,faultyLeaderElectionService);
    faultyLeaderElectionService.start(wrongLeaderAddressContender);
    FindConnectingAddress findConnectingAddress=new FindConnectingAddress(timeout,highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID));
    thread=new Thread(findConnectingAddress);
    thread.start();
    leaderElectionService=highAvailabilityServices.getJobManagerLeaderElectionService(HighAvailabilityServices.DEFAULT_JOB_ID);
    TestingContender correctLeaderAddressContender=new TestingContender(correctAddress,leaderElectionService);
    Thread.sleep(sleepingTime);
    faultyLeaderElectionService.stop();
    leaderElectionService.start(correctLeaderAddressContender);
    thread.join();
    InetAddress result=findConnectingAddress.getInetAddress();
    Socket socket=new Socket();
    try {
      SocketAddress bindP=new InetSocketAddress(result,0);
      socket.bind(bindP);
      socket.connect(correctInetSocketAddress,1000);
    }
  finally {
      socket.close();
    }
  }
  finally {
    if (leaderElectionService != null) {
      leaderElectionService.stop();
    }
  }
}
