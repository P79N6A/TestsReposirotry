/** 
 * Tests that a suspend call while restarting a job, will abort the restarting.
 * @throws Exception
 */
@Test public void testSuspendWhileRestarting() throws Exception {
  final Time timeout=Time.of(1,TimeUnit.MINUTES);
  Instance instance=ExecutionGraphTestUtils.getInstance(new ActorTaskManagerGateway(new SimpleActorGateway(TestingUtils.directExecutionContext())),NUM_TASKS);
  Scheduler scheduler=new Scheduler(TestingUtils.defaultExecutionContext());
  scheduler.newInstanceAvailable(instance);
  JobVertex sender=new JobVertex("Task");
  sender.setInvokableClass(NoOpInvokable.class);
  sender.setParallelism(NUM_TASKS);
  JobGraph jobGraph=new JobGraph("Pointwise job",sender);
  ControllableRestartStrategy controllableRestartStrategy=new ControllableRestartStrategy(timeout);
  ExecutionGraph eg=new ExecutionGraph(TestingUtils.defaultExecutor(),TestingUtils.defaultExecutor(),new JobID(),"Test job",new Configuration(),new SerializedValue<>(new ExecutionConfig()),AkkaUtils.getDefaultTimeout(),controllableRestartStrategy,scheduler);
  eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources());
  assertEquals(JobStatus.CREATED,eg.getState());
  eg.scheduleForExecution();
  assertEquals(JobStatus.RUNNING,eg.getState());
  instance.markDead();
  controllableRestartStrategy.getReachedCanRestart().await(timeout.toMilliseconds(),TimeUnit.MILLISECONDS);
  assertEquals(JobStatus.RESTARTING,eg.getState());
  eg.suspend(new Exception("Test exception"));
  assertEquals(JobStatus.SUSPENDED,eg.getState());
  controllableRestartStrategy.unlockRestart();
  controllableRestartStrategy.getRestartDone().await(timeout.toMilliseconds(),TimeUnit.MILLISECONDS);
  assertEquals(JobStatus.SUSPENDED,eg.getState());
}
