/** 
 * Tests that a graph is not restarted after cancellation via a call to {@link ExecutionGraph#failGlobal(Throwable)}. This can happen when a slot is released concurrently with cancellation.
 */
@Test public void testFailExecutionAfterCancel() throws Exception {
  Instance instance=ExecutionGraphTestUtils.getInstance(new ActorTaskManagerGateway(new SimpleActorGateway(TestingUtils.directExecutionContext())),2);
  Scheduler scheduler=new Scheduler(TestingUtils.defaultExecutionContext());
  scheduler.newInstanceAvailable(instance);
  JobVertex vertex=ExecutionGraphTestUtils.createJobVertex("Test Vertex",1,NoOpInvokable.class);
  ExecutionConfig executionConfig=new ExecutionConfig();
  executionConfig.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE,Integer.MAX_VALUE));
  JobGraph jobGraph=new JobGraph("Test Job",vertex);
  jobGraph.setExecutionConfig(executionConfig);
  ExecutionGraph eg=newExecutionGraph(new InfiniteDelayRestartStrategy(),scheduler);
  eg.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources());
  assertEquals(JobStatus.CREATED,eg.getState());
  eg.scheduleForExecution();
  assertEquals(JobStatus.RUNNING,eg.getState());
  eg.cancel();
  for (  ExecutionVertex v : eg.getAllExecutionVertices()) {
    v.getCurrentExecutionAttempt().fail(new Exception("Test Exception"));
  }
  assertEquals(JobStatus.CANCELED,eg.getTerminationFuture().get());
  Execution execution=eg.getAllExecutionVertices().iterator().next().getCurrentExecutionAttempt();
  execution.cancelingComplete();
  assertEquals(JobStatus.CANCELED,eg.getState());
}
