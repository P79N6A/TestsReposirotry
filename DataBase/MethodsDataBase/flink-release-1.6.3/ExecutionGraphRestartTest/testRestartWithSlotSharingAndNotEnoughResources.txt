@Test public void testRestartWithSlotSharingAndNotEnoughResources() throws Exception {
  assertTrue("test assumptions violated",((ThreadPoolExecutor)executor).getCorePoolSize() > 1);
  final int numRestarts=10;
  final int parallelism=20;
  TaskManagerGateway taskManagerGateway=new SimpleAckingTaskManagerGateway();
  final Scheduler scheduler=createSchedulerWithInstances(parallelism - 1,taskManagerGateway);
  final SlotSharingGroup sharingGroup=new SlotSharingGroup();
  final JobVertex source=new JobVertex("source");
  source.setInvokableClass(NoOpInvokable.class);
  source.setParallelism(parallelism);
  source.setSlotSharingGroup(sharingGroup);
  final JobVertex sink=new JobVertex("sink");
  sink.setInvokableClass(NoOpInvokable.class);
  sink.setParallelism(parallelism);
  sink.setSlotSharingGroup(sharingGroup);
  sink.connectNewDataSetAsInput(source,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED_BOUNDED);
  final ExecutionGraph eg=ExecutionGraphTestUtils.createExecutionGraph(new JobID(),scheduler,new FixedDelayRestartStrategy(numRestarts,0),executor,source,sink);
  eg.setScheduleMode(ScheduleMode.EAGER);
  eg.scheduleForExecution();
  while (eg.getNumberOfFullRestarts() < numRestarts) {
    Thread.sleep(1);
  }
  waitUntilJobStatus(eg,JobStatus.FAILED,1000);
  final Throwable t=eg.getFailureCause();
  if (!(t instanceof NoResourceAvailableException)) {
    ExceptionUtils.rethrowException(t,t.getMessage());
  }
}
