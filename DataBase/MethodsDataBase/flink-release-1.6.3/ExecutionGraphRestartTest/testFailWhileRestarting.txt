@Test public void testFailWhileRestarting() throws Exception {
  Scheduler scheduler=new Scheduler(TestingUtils.defaultExecutionContext());
  Instance instance=ExecutionGraphTestUtils.getInstance(new ActorTaskManagerGateway(new SimpleActorGateway(TestingUtils.directExecutionContext())),NUM_TASKS);
  scheduler.newInstanceAvailable(instance);
  ExecutionGraph executionGraph=new ExecutionGraph(TestingUtils.defaultExecutor(),TestingUtils.defaultExecutor(),new JobID(),"TestJob",new Configuration(),new SerializedValue<>(new ExecutionConfig()),AkkaUtils.getDefaultTimeout(),new InfiniteDelayRestartStrategy(),scheduler);
  JobVertex jobVertex=new JobVertex("NoOpInvokable");
  jobVertex.setInvokableClass(NoOpInvokable.class);
  jobVertex.setParallelism(NUM_TASKS);
  JobGraph jobGraph=new JobGraph("TestJob",jobVertex);
  executionGraph.attachJobGraph(jobGraph.getVerticesSortedTopologicallyFromSources());
  assertEquals(JobStatus.CREATED,executionGraph.getState());
  executionGraph.scheduleForExecution();
  assertEquals(JobStatus.RUNNING,executionGraph.getState());
  instance.markDead();
  waitUntilJobStatus(executionGraph,JobStatus.RESTARTING,TestingUtils.TESTING_DURATION().toMillis());
  assertEquals(JobStatus.RESTARTING,executionGraph.getState());
  final long globalModVersion=executionGraph.getGlobalModVersion();
  final Exception testException=new Exception("Test exception");
  executionGraph.failGlobal(testException);
  assertNotEquals(globalModVersion,executionGraph.getGlobalModVersion());
  assertEquals(JobStatus.RESTARTING,executionGraph.getState());
  assertEquals(testException,executionGraph.getFailureCause());
  executionGraph.failGlobal(new SuppressRestartsException(new Exception("Suppress restart exception")));
  assertEquals(JobStatus.FAILED,executionGraph.getState());
  executionGraph.restart(executionGraph.getGlobalModVersion());
  assertEquals(JobStatus.FAILED,executionGraph.getState());
}
