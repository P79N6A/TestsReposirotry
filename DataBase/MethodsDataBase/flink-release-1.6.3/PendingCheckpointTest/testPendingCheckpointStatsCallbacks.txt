/** 
 * Tests that the stats callbacks happen if the callback is registered.
 */
@Test public void testPendingCheckpointStatsCallbacks() throws Exception {
{
    PendingCheckpointStats callback=mock(PendingCheckpointStats.class);
    PendingCheckpoint pending=createPendingCheckpoint(CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION));
    pending.setStatsCallback(callback);
    pending.acknowledgeTask(ATTEMPT_ID,null,new CheckpointMetrics());
    verify(callback,times(1)).reportSubtaskStats(any(JobVertexID.class),any(SubtaskStateStats.class));
    pending.finalizeCheckpoint();
    verify(callback,times(1)).reportCompletedCheckpoint(any(String.class));
  }
{
    PendingCheckpointStats callback=mock(PendingCheckpointStats.class);
    PendingCheckpoint pending=createPendingCheckpoint(CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION));
    pending.setStatsCallback(callback);
    pending.abortSubsumed();
    verify(callback,times(1)).reportFailedCheckpoint(anyLong(),any(Exception.class));
  }
{
    PendingCheckpointStats callback=mock(PendingCheckpointStats.class);
    PendingCheckpoint pending=createPendingCheckpoint(CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION));
    pending.setStatsCallback(callback);
    pending.abortDeclined();
    verify(callback,times(1)).reportFailedCheckpoint(anyLong(),any(Exception.class));
  }
{
    PendingCheckpointStats callback=mock(PendingCheckpointStats.class);
    PendingCheckpoint pending=createPendingCheckpoint(CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION));
    pending.setStatsCallback(callback);
    pending.abortError(new Exception("Expected test error"));
    verify(callback,times(1)).reportFailedCheckpoint(anyLong(),any(Exception.class));
  }
{
    PendingCheckpointStats callback=mock(PendingCheckpointStats.class);
    PendingCheckpoint pending=createPendingCheckpoint(CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION));
    pending.setStatsCallback(callback);
    pending.abortExpired();
    verify(callback,times(1)).reportFailedCheckpoint(anyLong(),any(Exception.class));
  }
}
