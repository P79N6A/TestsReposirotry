/** 
 * Tests that the completion future is succeeded on finalize and failed on abort and failures during finalize.
 */
@Test public void testCompletionFuture() throws Exception {
  CheckpointProperties props=new CheckpointProperties(false,CheckpointType.SAVEPOINT,false,false,false,false,false);
  PendingCheckpoint pending=createPendingCheckpoint(props);
  CompletableFuture<CompletedCheckpoint> future=pending.getCompletionFuture();
  assertFalse(future.isDone());
  pending.abortDeclined();
  assertTrue(future.isDone());
  pending=createPendingCheckpoint(props);
  future=pending.getCompletionFuture();
  assertFalse(future.isDone());
  pending.abortExpired();
  assertTrue(future.isDone());
  pending=createPendingCheckpoint(props);
  future=pending.getCompletionFuture();
  assertFalse(future.isDone());
  pending.abortSubsumed();
  assertTrue(future.isDone());
  pending=createPendingCheckpoint(props);
  future=pending.getCompletionFuture();
  assertFalse(future.isDone());
  pending.acknowledgeTask(ATTEMPT_ID,null,new CheckpointMetrics());
  assertTrue(pending.isFullyAcknowledged());
  pending.finalizeCheckpoint();
  assertTrue(future.isDone());
  pending=createPendingCheckpoint(props);
  future=pending.getCompletionFuture();
  assertFalse(future.isDone());
  try {
    pending.finalizeCheckpoint();
    fail("Did not throw expected Exception");
  }
 catch (  IllegalStateException ignored) {
  }
}
