/** 
 * Verifies that building an  {@link ExecutionGraph} from a {@link JobGraph} withparallelism higher than the maximum parallelism fails.
 */
@Test public void testExecutionGraphConstructionFailsRescaleDopExceedMaxParallelism() throws Exception {
  final Configuration config=new Configuration();
  final int initialParallelism=1;
  final int maxParallelism=10;
  final JobVertex[] jobVertices=createVerticesForSimpleBipartiteJobGraph(initialParallelism,maxParallelism);
  final JobGraph jobGraph=new JobGraph(jobVertices);
  for (  JobVertex jv : jobVertices) {
    jv.setParallelism(maxParallelism + 1);
  }
  try {
    ExecutionGraphBuilder.buildGraph(null,jobGraph,config,TestingUtils.defaultExecutor(),TestingUtils.defaultExecutor(),new Scheduler(TestingUtils.defaultExecutionContext()),Thread.currentThread().getContextClassLoader(),new StandaloneCheckpointRecoveryFactory(),AkkaUtils.getDefaultTimeout(),new NoRestartStrategy(),new UnregisteredMetricsGroup(),VoidBlobWriter.getInstance(),AkkaUtils.getDefaultTimeout(),TEST_LOGGER);
    fail("Building the ExecutionGraph with a parallelism higher than the max parallelism should fail.");
  }
 catch (  JobException e) {
  }
}
