@Test public void testTypeInfoTestCoverage(){
  Reflections reflections=new Reflections("org.apache.flink");
  Set<Class<? extends TypeInformation>> typeInfos=reflections.getSubTypesOf(TypeInformation.class);
  Set<String> typeInfoTestNames=reflections.getSubTypesOf(TypeInformationTestBase.class).stream().map(Class::getName).collect(Collectors.toSet());
  for (  Class<? extends TypeInformation> typeInfo : typeInfos) {
    if (Modifier.isAbstract(typeInfo.getModifiers()) || Modifier.isPrivate(typeInfo.getModifiers()) || typeInfo.getName().contains("Test$")|| typeInfo.getName().contains("TestBase$")|| typeInfo.getName().contains("ITCase$")|| typeInfo.getName().contains("$$anon")|| typeInfo.getName().contains("queryablestate")) {
      continue;
    }
    final String testToFind=typeInfo.getName() + "Test";
    if (!typeInfoTestNames.contains(testToFind)) {
      fail("Could not find test '" + testToFind + "' that covers '"+ typeInfo.getName()+ "'.");
    }
  }
}
