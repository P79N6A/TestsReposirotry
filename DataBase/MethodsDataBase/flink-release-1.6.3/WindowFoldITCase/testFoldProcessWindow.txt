@Test public void testFoldProcessWindow() throws Exception {
  testResults=new ArrayList<>();
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  env.setParallelism(1);
  DataStream<Tuple2<String,Integer>> source1=env.addSource(new SourceFunction<Tuple2<String,Integer>>(){
    private static final long serialVersionUID=1L;
    @Override public void run(    SourceContext<Tuple2<String,Integer>> ctx) throws Exception {
      ctx.collect(Tuple2.of("a",0));
      ctx.collect(Tuple2.of("a",1));
      ctx.collect(Tuple2.of("a",2));
      ctx.collect(Tuple2.of("b",3));
      ctx.collect(Tuple2.of("b",4));
      ctx.collect(Tuple2.of("b",5));
      ctx.collect(Tuple2.of("a",6));
      ctx.collect(Tuple2.of("a",7));
      ctx.collect(Tuple2.of("a",8));
    }
    @Override public void cancel(){
    }
  }
).assignTimestampsAndWatermarks(new Tuple2TimestampExtractor());
  source1.keyBy(0).window(TumblingEventTimeWindows.of(Time.of(3,TimeUnit.MILLISECONDS))).fold(Tuple2.of(0,"R:"),new FoldFunction<Tuple2<String,Integer>,Tuple2<Integer,String>>(){
    @Override public Tuple2<Integer,String> fold(    Tuple2<Integer,String> accumulator,    Tuple2<String,Integer> value) throws Exception {
      accumulator.f1+=value.f0;
      accumulator.f0+=value.f1;
      return accumulator;
    }
  }
,new ProcessWindowFunction<Tuple2<Integer,String>,Tuple3<String,Integer,Integer>,Tuple,TimeWindow>(){
    @Override public void process(    Tuple tuple,    Context context,    Iterable<Tuple2<Integer,String>> elements,    Collector<Tuple3<String,Integer,Integer>> out) throws Exception {
      int i=0;
      for (      Tuple2<Integer,String> in : elements) {
        out.collect(new Tuple3<>(in.f1,in.f0,i++));
      }
    }
  }
).addSink(new SinkFunction<Tuple3<String,Integer,Integer>>(){
    @Override public void invoke(    Tuple3<String,Integer,Integer> value) throws Exception {
      testResults.add(value.toString());
    }
  }
);
  env.execute("Fold Process Window Test");
  List<String> expectedResult=Arrays.asList("(R:aaa,3,0)","(R:aaa,21,0)","(R:bbb,12,0)");
  Collections.sort(expectedResult);
  Collections.sort(testResults);
  Assert.assertEquals(expectedResult,testResults);
}
