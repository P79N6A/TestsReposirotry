/** 
 * Tests that metrics registered on the JobManager are actually accessible via JMX.
 */
@Test public void testJobManagerJMXMetricAccess() throws Exception {
  Deadline deadline=Deadline.now().plus(Duration.ofMinutes(2));
  try {
    JobVertex sourceJobVertex=new JobVertex("Source");
    sourceJobVertex.setInvokableClass(BlockingInvokable.class);
    JobGraph jobGraph=new JobGraph("TestingJob",sourceJobVertex);
    jobGraph.setSnapshotSettings(new JobCheckpointingSettings(Collections.<JobVertexID>emptyList(),Collections.<JobVertexID>emptyList(),Collections.<JobVertexID>emptyList(),new CheckpointCoordinatorConfiguration(500,500,50,5,CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,true),null));
    ClusterClient<?> client=MINI_CLUSTER_RESOURCE.getClusterClient();
    client.setDetached(true);
    client.submitJob(jobGraph,JMXJobManagerMetricTest.class.getClassLoader());
    FutureUtils.retrySuccesfulWithDelay(() -> client.getJobStatus(jobGraph.getJobID()),Time.milliseconds(10),deadline,status -> status == JobStatus.RUNNING,TestingUtils.defaultScheduledExecutor()).get(deadline.timeLeft().toMillis(),TimeUnit.MILLISECONDS);
    MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
    Set<ObjectName> nameSet=mBeanServer.queryNames(new ObjectName("org.apache.flink.jobmanager.job.lastCheckpointSize:job_name=TestingJob,*"),null);
    Assert.assertEquals(1,nameSet.size());
    assertEquals(-1L,mBeanServer.getAttribute(nameSet.iterator().next(),"Value"));
    BlockingInvokable.unblock();
  }
  finally {
    BlockingInvokable.unblock();
  }
}
