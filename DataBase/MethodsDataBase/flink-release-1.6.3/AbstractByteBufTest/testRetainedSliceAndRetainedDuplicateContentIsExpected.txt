@Test public void testRetainedSliceAndRetainedDuplicateContentIsExpected(){
  ByteBuf buf=newBuffer(8).resetWriterIndex();
  ByteBuf expected1=newBuffer(6).resetWriterIndex();
  ByteBuf expected2=newBuffer(5).resetWriterIndex();
  ByteBuf expected3=newBuffer(4).resetWriterIndex();
  ByteBuf expected4=newBuffer(3).resetWriterIndex();
  buf.writeBytes(new byte[]{1,2,3,4,5,6,7,8});
  expected1.writeBytes(new byte[]{2,3,4,5,6,7});
  expected2.writeBytes(new byte[]{3,4,5,6,7});
  expected3.writeBytes(new byte[]{4,5,6,7});
  expected4.writeBytes(new byte[]{5,6,7});
  ByteBuf slice1=buf.retainedSlice(buf.readerIndex() + 1,6);
  assertEquals(0,slice1.compareTo(expected1));
  assertEquals(0,slice1.compareTo(buf.slice(buf.readerIndex() + 1,6)));
  buf.release();
  slice1.readByte();
  ByteBuf dup1=slice1.retainedDuplicate();
  assertEquals(0,dup1.compareTo(expected2));
  assertEquals(0,dup1.compareTo(slice1.duplicate()));
  dup1.readByte();
  ByteBuf dup2=dup1.duplicate();
  assertEquals(0,dup2.compareTo(expected3));
  dup2.readByte();
  ByteBuf slice2=dup2.retainedSlice(dup2.readerIndex(),3);
  assertEquals(0,slice2.compareTo(expected4));
  assertEquals(0,slice2.compareTo(dup2.slice(dup2.readerIndex(),3)));
  assertTrue(expected1.release());
  assertTrue(expected2.release());
  assertTrue(expected3.release());
  assertTrue(expected4.release());
  slice2.release();
  dup2.release();
  assertEquals(slice2.refCnt(),dup2.refCnt());
  assertEquals(dup2.refCnt(),dup1.refCnt());
  assertTrue(slice1.release());
  assertEquals(0,buf.refCnt());
  assertEquals(0,slice1.refCnt());
  assertEquals(0,slice2.refCnt());
  assertEquals(0,dup1.refCnt());
  assertEquals(0,dup2.refCnt());
}
