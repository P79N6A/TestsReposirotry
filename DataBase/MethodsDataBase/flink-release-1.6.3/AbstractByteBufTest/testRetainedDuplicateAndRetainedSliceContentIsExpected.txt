@Test public void testRetainedDuplicateAndRetainedSliceContentIsExpected(){
  ByteBuf buf=newBuffer(8).resetWriterIndex();
  ByteBuf expected1=newBuffer(6).resetWriterIndex();
  ByteBuf expected2=newBuffer(5).resetWriterIndex();
  ByteBuf expected3=newBuffer(4).resetWriterIndex();
  buf.writeBytes(new byte[]{1,2,3,4,5,6,7,8});
  expected1.writeBytes(new byte[]{2,3,4,5,6,7});
  expected2.writeBytes(new byte[]{3,4,5,6,7});
  expected3.writeBytes(new byte[]{5,6,7});
  ByteBuf dup1=buf.retainedDuplicate();
  assertEquals(0,dup1.compareTo(buf));
  assertEquals(0,dup1.compareTo(buf.slice()));
  buf.release();
  dup1.readByte();
  ByteBuf slice1=dup1.retainedSlice(dup1.readerIndex(),6);
  assertEquals(0,slice1.compareTo(expected1));
  assertEquals(0,slice1.compareTo(slice1.duplicate()));
  slice1.readByte();
  ByteBuf dup2=slice1.duplicate();
  assertEquals(0,dup2.compareTo(slice1));
  dup2.readByte();
  ByteBuf slice2=dup2.retainedSlice(dup2.readerIndex() + 1,3);
  assertEquals(0,slice2.compareTo(expected3));
  assertEquals(0,slice2.compareTo(dup2.slice(dup2.readerIndex() + 1,3)));
  assertTrue(expected1.release());
  assertTrue(expected2.release());
  assertTrue(expected3.release());
  slice2.release();
  slice1.release();
  assertEquals(slice2.refCnt(),dup2.refCnt());
  assertEquals(dup2.refCnt(),slice1.refCnt());
  assertTrue(dup1.release());
  assertEquals(0,buf.refCnt());
  assertEquals(0,slice1.refCnt());
  assertEquals(0,slice2.refCnt());
  assertEquals(0,dup1.refCnt());
  assertEquals(0,dup2.refCnt());
}
