/** 
 * Tests that we obtain the correct collection of available job details.
 */
@Test public void testAvailableJobDetails() throws IOException {
  final int numberExecutionGraphs=10;
  final Collection<ArchivedExecutionGraph> executionGraphs=generateTerminalExecutionGraphs(numberExecutionGraphs);
  final Collection<JobDetails> jobDetails=executionGraphs.stream().map(WebMonitorUtils::createDetailsForJob).collect(Collectors.toList());
  final File rootDir=temporaryFolder.newFolder();
  try (final FileArchivedExecutionGraphStore executionGraphStore=createDefaultExecutionGraphStore(rootDir)){
    for (    ArchivedExecutionGraph executionGraph : executionGraphs) {
      executionGraphStore.put(executionGraph);
    }
    assertThat(executionGraphStore.getAvailableJobDetails(),Matchers.containsInAnyOrder(jobDetails.toArray()));
  }
 }
