@Test @SuppressWarnings("unchecked") public void testApplyPredicate() throws Exception {
  OrcTableSource orc=OrcTableSource.builder().path(getPath(TEST_FILE_NESTED)).forOrcSchema(TEST_SCHEMA_NESTED).build();
  Expression pred1=new GreaterThan(new ResolvedFieldReference("int1",Types.INT),new Literal(100,Types.INT));
  Expression pred2=new EqualTo(new ResolvedFieldReference("string1",Types.STRING),new Literal("hello",Types.STRING));
  Expression unsupportedPred=new EqualTo(new GetCompositeField(new ItemAt(new ResolvedFieldReference("list",ObjectArrayTypeInfo.getInfoFor(Types.ROW_NAMED(new String[]{"int1","string1"},Types.INT,Types.STRING))),new Literal(1,Types.INT)),"int1"),new Literal(1,Types.INT));
  Expression invalidPred=new EqualTo(new ResolvedFieldReference("long1",Types.LONG),new Literal(new OrcTableSourceTest(),Types.LONG));
  ArrayList<Expression> preds=new ArrayList<>();
  preds.add(pred1);
  preds.add(pred2);
  preds.add(unsupportedPred);
  preds.add(invalidPred);
  OrcTableSource projected=(OrcTableSource)orc.applyPredicate(preds);
  assertTrue(orc != projected);
  assertEquals(orc.getTableSchema(),projected.getTableSchema());
  assertEquals(Types.ROW_NAMED(getNestedFieldNames(),getNestedFieldTypes()),projected.getReturnType());
  OrcTableSource spyTS=spy(projected);
  OrcRowInputFormat mockIF=mock(OrcRowInputFormat.class);
  doReturn(mockIF).when(spyTS).buildOrcInputFormat();
  ExecutionEnvironment environment=mock(ExecutionEnvironment.class);
  when(environment.createInput(any(InputFormat.class))).thenReturn(mock(DataSource.class));
  spyTS.getDataSet(environment);
  ArgumentCaptor<OrcRowInputFormat.Predicate> arguments=ArgumentCaptor.forClass(OrcRowInputFormat.Predicate.class);
  verify(mockIF,times(2)).addPredicate(arguments.capture());
  List<String> values=arguments.getAllValues().stream().map(Object::toString).collect(Collectors.toList());
  assertTrue(values.contains(new OrcRowInputFormat.Not(new OrcRowInputFormat.LessThanEquals("int1",PredicateLeaf.Type.LONG,100)).toString()));
  assertTrue(values.contains(new OrcRowInputFormat.Equals("string1",PredicateLeaf.Type.STRING,"hello").toString()));
  assertTrue(spyTS.isFilterPushedDown());
  assertFalse(orc.isFilterPushedDown());
}
