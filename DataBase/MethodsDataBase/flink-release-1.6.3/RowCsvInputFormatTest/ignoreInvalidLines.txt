@Test public void ignoreInvalidLines() throws Exception {
  String fileContent="#description of the data\n" + "header1|header2|header3|\n" + "this is|1|2.0|\n"+ "//a comment\n"+ "a test|3|4.0|\n"+ "#next|5|6.0|\n";
  FileInputSplit split=createTempFile(fileContent);
  TypeInformation[] fieldTypes=new TypeInformation[]{BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.DOUBLE_TYPE_INFO};
  RowCsvInputFormat format=new RowCsvInputFormat(PATH,fieldTypes,"\n","|");
  format.setLenient(false);
  Configuration parameters=new Configuration();
  format.configure(new Configuration());
  format.open(split);
  Row result=new Row(3);
  try {
    result=format.nextRecord(result);
    fail("Parse Exception was not thrown! (Row too short)");
  }
 catch (  ParseException ignored) {
  }
  try {
    result=format.nextRecord(result);
    fail("Parse Exception was not thrown! (Invalid int value)");
  }
 catch (  ParseException ignored) {
  }
  result=format.nextRecord(result);
  assertNotNull(result);
  assertEquals("this is",result.getField(0));
  assertEquals(1,result.getField(1));
  assertEquals(2.0,result.getField(2));
  try {
    result=format.nextRecord(result);
    fail("Parse Exception was not thrown! (Row too short)");
  }
 catch (  ParseException ignored) {
  }
  result=format.nextRecord(result);
  assertNotNull(result);
  assertEquals("a test",result.getField(0));
  assertEquals(3,result.getField(1));
  assertEquals(4.0,result.getField(2));
  result=format.nextRecord(result);
  assertNotNull(result);
  assertEquals("#next",result.getField(0));
  assertEquals(5,result.getField(1));
  assertEquals(6.0,result.getField(2));
  result=format.nextRecord(result);
  assertNull(result);
  format.setLenient(true);
  format.configure(parameters);
  format.open(split);
  result=new Row(3);
  result=format.nextRecord(result);
  assertNotNull(result);
  assertEquals("header1",result.getField(0));
  assertNull(result.getField(1));
  assertNull(result.getField(2));
  result=format.nextRecord(result);
  assertNotNull(result);
  assertEquals("this is",result.getField(0));
  assertEquals(1,result.getField(1));
  assertEquals(2.0,result.getField(2));
  result=format.nextRecord(result);
  assertNotNull(result);
  assertEquals("a test",result.getField(0));
  assertEquals(3,result.getField(1));
  assertEquals(4.0,result.getField(2));
  result=format.nextRecord(result);
  assertNotNull(result);
  assertEquals("#next",result.getField(0));
  assertEquals(5,result.getField(1));
  assertEquals(6.0,result.getField(2));
  result=format.nextRecord(result);
  assertNull(result);
}
