/** 
 * Verifies that the handlers correctly handle expected REST calls.
 */
@Test public void testHandleRequest() throws Exception {
  MetricFetcher fetcher=new MetricFetcher(mock(GatewayRetriever.class),mock(MetricQueryServiceRetriever.class),Executors.directExecutor(),TestingUtils.TIMEOUT());
  MetricStoreTest.setupStore(fetcher.getMetricStore());
  JobVertexMetricsHandler handler=new JobVertexMetricsHandler(Executors.directExecutor(),fetcher);
  Map<String,String> pathParams=new HashMap<>();
  Map<String,String> queryParams=new HashMap<>();
  pathParams.put("jobid","jobid");
  pathParams.put("vertexid","taskid");
  String availableList=handler.handleJsonRequest(pathParams,queryParams,null).get();
  assertEquals("[" + "{\"id\":\"8.opname.abc.metric6\"}," + "{\"id\":\"8.opname.abc.metric7\"},"+ "{\"id\":\"1.opname.abc.metric6\"},"+ "{\"id\":\"1.opname.abc.metric7\"},"+ "{\"id\":\"8.abc.metric5\"}"+ "]",availableList);
  queryParams.put("get","8.opname.abc.metric6");
  String metricValue=handler.handleJsonRequest(pathParams,queryParams,null).get();
  assertEquals("[" + "{\"id\":\"8.opname.abc.metric6\",\"value\":\"5\"}" + "]",metricValue);
  queryParams.put("get","8.opname.abc.metric6,8.abc.metric5");
  String metricValues=handler.handleJsonRequest(pathParams,queryParams,null).get();
  assertEquals("[" + "{\"id\":\"8.opname.abc.metric6\",\"value\":\"5\"}," + "{\"id\":\"8.abc.metric5\",\"value\":\"4\"}"+ "]",metricValues);
}
