@Test @SuppressWarnings("rawtypes") public void testProcessEventTime() throws Exception {
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
  DataStream<Tuple2<String,Integer>> source=env.fromElements(Tuple2.of("hello",1),Tuple2.of("hello",2));
  DataStream<Tuple2<String,Integer>> window1=source.windowAll(TumblingEventTimeWindows.of(Time.of(1,TimeUnit.SECONDS))).process(new ProcessAllWindowFunction<Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow>(){
    private static final long serialVersionUID=1L;
    @Override public void process(    Context ctx,    Iterable<Tuple2<String,Integer>> values,    Collector<Tuple2<String,Integer>> out) throws Exception {
      for (      Tuple2<String,Integer> in : values) {
        out.collect(in);
      }
    }
  }
);
  OneInputTransformation<Tuple2<String,Integer>,Tuple2<String,Integer>> transform=(OneInputTransformation<Tuple2<String,Integer>,Tuple2<String,Integer>>)window1.getTransformation();
  OneInputStreamOperator<Tuple2<String,Integer>,Tuple2<String,Integer>> operator=transform.getOperator();
  Assert.assertTrue(operator instanceof WindowOperator);
  WindowOperator<String,Tuple2<String,Integer>,?,?,?> winOperator=(WindowOperator<String,Tuple2<String,Integer>,?,?,?>)operator;
  Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);
  Assert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows);
  Assert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);
  processElementAndEnsureOutput(winOperator,winOperator.getKeySelector(),BasicTypeInfo.STRING_TYPE_INFO,new Tuple2<>("hello",1));
}
