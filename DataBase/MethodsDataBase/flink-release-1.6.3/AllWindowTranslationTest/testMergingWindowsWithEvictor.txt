@Test @SuppressWarnings("rawtypes") public void testMergingWindowsWithEvictor() throws Exception {
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
  DataStream<Tuple2<String,Integer>> source=env.fromElements(Tuple2.of("hello",1),Tuple2.of("hello",2));
  DataStream<Tuple3<String,String,Integer>> window1=source.windowAll(EventTimeSessionWindows.withGap(Time.seconds(5))).evictor(CountEvictor.of(5)).process(new TestProcessAllWindowFunction());
  OneInputTransformation<Tuple2<String,Integer>,Tuple3<String,String,Integer>> transform=(OneInputTransformation<Tuple2<String,Integer>,Tuple3<String,String,Integer>>)window1.getTransformation();
  OneInputStreamOperator<Tuple2<String,Integer>,Tuple3<String,String,Integer>> operator=transform.getOperator();
  Assert.assertTrue(operator instanceof WindowOperator);
  WindowOperator<String,Tuple2<String,Integer>,?,?,?> winOperator=(WindowOperator<String,Tuple2<String,Integer>,?,?,?>)operator;
  Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);
  Assert.assertTrue(winOperator.getWindowAssigner() instanceof EventTimeSessionWindows);
  Assert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);
  processElementAndEnsureOutput(winOperator,winOperator.getKeySelector(),BasicTypeInfo.STRING_TYPE_INFO,new Tuple2<>("hello",1));
}
