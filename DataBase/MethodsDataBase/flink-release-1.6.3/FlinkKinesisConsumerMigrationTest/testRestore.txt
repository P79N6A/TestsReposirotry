@Test public void testRestore() throws Exception {
  final List<StreamShardHandle> initialDiscoveryShards=new ArrayList<>(TEST_STATE.size());
  for (  StreamShardMetadata shardMetadata : TEST_STATE.keySet()) {
    Shard shard=new Shard();
    shard.setShardId(shardMetadata.getShardId());
    SequenceNumberRange sequenceNumberRange=new SequenceNumberRange();
    sequenceNumberRange.withStartingSequenceNumber("1");
    shard.setSequenceNumberRange(sequenceNumberRange);
    initialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(),shard));
  }
  final TestFetcher<String> fetcher=new TestFetcher<>(Collections.singletonList(TEST_STREAM_NAME),new TestSourceContext<>(),new TestRuntimeContext(true,1,0),TestUtils.getStandardProperties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),null,initialDiscoveryShards);
  final DummyFlinkKinesisConsumer<String> consumerFunction=new DummyFlinkKinesisConsumer<>(fetcher,new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()));
  StreamSource<String,DummyFlinkKinesisConsumer<String>> consumerOperator=new StreamSource<>(consumerFunction);
  final AbstractStreamOperatorTestHarness<String> testHarness=new AbstractStreamOperatorTestHarness<>(consumerOperator,1,1,0);
  testHarness.setup();
  MigrationTestUtil.restoreFromSnapshot(testHarness,"src/test/resources/kinesis-consumer-migration-test-flink" + testMigrateVersion + "-snapshot",testMigrateVersion);
  testHarness.open();
  consumerFunction.run(new TestSourceContext<>());
  assertNotEquals(null,consumerFunction.getRestoredState());
  assertEquals(1,consumerFunction.getRestoredState().size());
  assertEquals(TEST_STATE,removeEquivalenceWrappers(consumerFunction.getRestoredState()));
  assertEquals(1,fetcher.getSubscribedShardsState().size());
  assertEquals(TEST_SEQUENCE_NUMBER,fetcher.getSubscribedShardsState().get(0).getLastProcessedSequenceNum());
  KinesisStreamShardState restoredShardState=fetcher.getSubscribedShardsState().get(0);
  assertEquals(TEST_STREAM_NAME,restoredShardState.getStreamShardHandle().getStreamName());
  assertEquals(TEST_SHARD_ID,restoredShardState.getStreamShardHandle().getShard().getShardId());
  assertFalse(restoredShardState.getStreamShardHandle().isClosed());
  assertEquals(TEST_SEQUENCE_NUMBER,restoredShardState.getLastProcessedSequenceNum());
  consumerOperator.close();
  consumerOperator.cancel();
}
