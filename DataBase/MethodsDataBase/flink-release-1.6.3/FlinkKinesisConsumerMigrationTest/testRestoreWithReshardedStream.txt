@Test public void testRestoreWithReshardedStream() throws Exception {
  final List<StreamShardHandle> initialDiscoveryShards=new ArrayList<>(TEST_STATE.size());
  for (  StreamShardMetadata shardMetadata : TEST_STATE.keySet()) {
    Shard closedShard=new Shard();
    closedShard.setShardId(shardMetadata.getShardId());
    SequenceNumberRange closedSequenceNumberRange=new SequenceNumberRange();
    closedSequenceNumberRange.withStartingSequenceNumber("1");
    closedSequenceNumberRange.withEndingSequenceNumber("1087654321");
    closedShard.setSequenceNumberRange(closedSequenceNumberRange);
    initialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(),closedShard));
    Shard newSplitShard1=new Shard();
    newSplitShard1.setShardId(KinesisShardIdGenerator.generateFromShardOrder(1));
    SequenceNumberRange newSequenceNumberRange1=new SequenceNumberRange();
    newSequenceNumberRange1.withStartingSequenceNumber("1087654322");
    newSplitShard1.setSequenceNumberRange(newSequenceNumberRange1);
    newSplitShard1.setParentShardId(TEST_SHARD_ID);
    Shard newSplitShard2=new Shard();
    newSplitShard2.setShardId(KinesisShardIdGenerator.generateFromShardOrder(2));
    SequenceNumberRange newSequenceNumberRange2=new SequenceNumberRange();
    newSequenceNumberRange2.withStartingSequenceNumber("2087654322");
    newSplitShard2.setSequenceNumberRange(newSequenceNumberRange2);
    newSplitShard2.setParentShardId(TEST_SHARD_ID);
    initialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(),newSplitShard1));
    initialDiscoveryShards.add(new StreamShardHandle(shardMetadata.getStreamName(),newSplitShard2));
  }
  final TestFetcher<String> fetcher=new TestFetcher<>(Collections.singletonList(TEST_STREAM_NAME),new TestSourceContext<>(),new TestRuntimeContext(true,1,0),TestUtils.getStandardProperties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),null,initialDiscoveryShards);
  final DummyFlinkKinesisConsumer<String> consumerFunction=new DummyFlinkKinesisConsumer<>(fetcher,new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()));
  StreamSource<String,DummyFlinkKinesisConsumer<String>> consumerOperator=new StreamSource<>(consumerFunction);
  final AbstractStreamOperatorTestHarness<String> testHarness=new AbstractStreamOperatorTestHarness<>(consumerOperator,1,1,0);
  testHarness.setup();
  MigrationTestUtil.restoreFromSnapshot(testHarness,"src/test/resources/kinesis-consumer-migration-test-flink" + testMigrateVersion + "-snapshot",testMigrateVersion);
  testHarness.open();
  consumerFunction.run(new TestSourceContext<>());
  assertNotEquals(null,consumerFunction.getRestoredState());
  assertEquals(1,consumerFunction.getRestoredState().size());
  assertEquals(TEST_STATE,removeEquivalenceWrappers(consumerFunction.getRestoredState()));
  assertEquals(3,fetcher.getSubscribedShardsState().size());
  KinesisStreamShardState restoredClosedShardState=fetcher.getSubscribedShardsState().get(0);
  assertEquals(TEST_STREAM_NAME,restoredClosedShardState.getStreamShardHandle().getStreamName());
  assertEquals(TEST_SHARD_ID,restoredClosedShardState.getStreamShardHandle().getShard().getShardId());
  assertTrue(restoredClosedShardState.getStreamShardHandle().isClosed());
  assertEquals(TEST_SEQUENCE_NUMBER,restoredClosedShardState.getLastProcessedSequenceNum());
  KinesisStreamShardState restoredNewSplitShard1=fetcher.getSubscribedShardsState().get(1);
  assertEquals(TEST_STREAM_NAME,restoredNewSplitShard1.getStreamShardHandle().getStreamName());
  assertEquals(KinesisShardIdGenerator.generateFromShardOrder(1),restoredNewSplitShard1.getStreamShardHandle().getShard().getShardId());
  assertFalse(restoredNewSplitShard1.getStreamShardHandle().isClosed());
  assertEquals(SentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get(),restoredNewSplitShard1.getLastProcessedSequenceNum());
  KinesisStreamShardState restoredNewSplitShard2=fetcher.getSubscribedShardsState().get(2);
  assertEquals(TEST_STREAM_NAME,restoredNewSplitShard2.getStreamShardHandle().getStreamName());
  assertEquals(KinesisShardIdGenerator.generateFromShardOrder(2),restoredNewSplitShard2.getStreamShardHandle().getShard().getShardId());
  assertFalse(restoredNewSplitShard2.getStreamShardHandle().isClosed());
  assertEquals(SentinelSequenceNumber.SENTINEL_EARLIEST_SEQUENCE_NUM.get(),restoredNewSplitShard2.getLastProcessedSequenceNum());
  consumerOperator.close();
  consumerOperator.cancel();
}
