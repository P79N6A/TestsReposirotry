@Test public void testNoRestore() throws Exception {
  MemoryStateBackend stateBackend=spy(new MemoryStateBackend(1024));
  StreamTaskStateInitializer streamTaskStateManager=streamTaskStateManager(stateBackend,null,true);
  OperatorID operatorID=new OperatorID(47L,11L);
  AbstractStreamOperator<?> streamOperator=mock(AbstractStreamOperator.class);
  when(streamOperator.getOperatorID()).thenReturn(operatorID);
  TypeSerializer<?> typeSerializer=new IntSerializer();
  CloseableRegistry closeableRegistry=new CloseableRegistry();
  StreamOperatorStateContext stateContext=streamTaskStateManager.streamOperatorStateContext(streamOperator.getOperatorID(),streamOperator.getClass().getSimpleName(),streamOperator,typeSerializer,closeableRegistry);
  OperatorStateBackend operatorStateBackend=stateContext.operatorStateBackend();
  AbstractKeyedStateBackend<?> keyedStateBackend=stateContext.keyedStateBackend();
  InternalTimeServiceManager<?> timeServiceManager=stateContext.internalTimerServiceManager();
  CloseableIterable<KeyGroupStatePartitionStreamProvider> keyedStateInputs=stateContext.rawKeyedStateInputs();
  CloseableIterable<StatePartitionStreamProvider> operatorStateInputs=stateContext.rawOperatorStateInputs();
  Assert.assertEquals(false,stateContext.isRestored());
  Assert.assertNotNull(operatorStateBackend);
  Assert.assertNotNull(keyedStateBackend);
  Assert.assertNotNull(timeServiceManager);
  Assert.assertNotNull(keyedStateInputs);
  Assert.assertNotNull(operatorStateInputs);
  checkCloseablesRegistered(closeableRegistry,operatorStateBackend,keyedStateBackend,keyedStateInputs,operatorStateInputs);
  Assert.assertFalse(keyedStateInputs.iterator().hasNext());
  Assert.assertFalse(operatorStateInputs.iterator().hasNext());
}
