/** 
 * Since  {@link AbstractKeyedStateBackend#getKeys(String,Object)} does't support concurrent modificationand  {@link AbstractKeyedStateBackend#applyToAllKeys(Object,TypeSerializer,StateDescriptor,KeyedStateFunction)} rely on it to get keys from backend. So we need this unit test to verify the concurrentmodification with  {@link AbstractKeyedStateBackend#applyToAllKeys(Object,TypeSerializer,StateDescriptor,KeyedStateFunction)}.
 */
@Test public void testConcurrentModificationWithApplyToAllKeys() throws Exception {
  AbstractKeyedStateBackend<Integer> backend=createKeyedBackend(IntSerializer.INSTANCE);
  try {
    ListStateDescriptor<String> listStateDescriptor=new ListStateDescriptor<>("foo",StringSerializer.INSTANCE);
    ListState<String> listState=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,listStateDescriptor);
    for (int i=0; i < 100; ++i) {
      backend.setCurrentKey(i);
      listState.add("Hello" + i);
    }
    backend.applyToAllKeys(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,listStateDescriptor,new KeyedStateFunction<Integer,ListState<String>>(){
      @Override public void process(      Integer key,      ListState<String> state) throws Exception {
        assertEquals("Hello" + key,state.get().iterator().next());
      }
    }
);
    backend.applyToAllKeys(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,listStateDescriptor,new KeyedStateFunction<Integer,ListState<String>>(){
      @Override public void process(      Integer key,      ListState<String> state) throws Exception {
        state.clear();
      }
    }
);
    backend.applyToAllKeys(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,listStateDescriptor,new KeyedStateFunction<Integer,ListState<String>>(){
      @Override public void process(      Integer key,      ListState<String> state) throws Exception {
        assertFalse(state.get().iterator().hasNext());
      }
    }
);
    backend.applyToAllKeys(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,listStateDescriptor,new KeyedStateFunction<Integer,ListState<String>>(){
      @Override public void process(      Integer key,      ListState<String> state) throws Exception {
        state.add("Hello" + key);
        state.clear();
        state.add("Hello_" + key);
      }
    }
);
    backend.applyToAllKeys(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,listStateDescriptor,new KeyedStateFunction<Integer,ListState<String>>(){
      @Override public void process(      Integer key,      ListState<String> state) throws Exception {
        final Iterator<String> it=state.get().iterator();
        assertEquals("Hello_" + key,it.next());
        assertFalse(it.hasNext());
      }
    }
);
  }
  finally {
    IOUtils.closeQuietly(backend);
    backend.dispose();
  }
}
