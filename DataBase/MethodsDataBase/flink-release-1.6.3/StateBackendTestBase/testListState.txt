@Test @SuppressWarnings("unchecked,rawtypes") public void testListState() throws Exception {
  CheckpointStreamFactory streamFactory=createStreamFactory();
  SharedStateRegistry sharedStateRegistry=new SharedStateRegistry();
  AbstractKeyedStateBackend<Integer> backend=createKeyedBackend(IntSerializer.INSTANCE);
  ListStateDescriptor<String> kvId=new ListStateDescriptor<>("id",String.class);
  TypeSerializer<Integer> keySerializer=IntSerializer.INSTANCE;
  TypeSerializer<VoidNamespace> namespaceSerializer=VoidNamespaceSerializer.INSTANCE;
  ListState<String> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
  @SuppressWarnings("unchecked") InternalKvState<Integer,VoidNamespace,String> kvState=(InternalKvState<Integer,VoidNamespace,String>)state;
  TypeSerializer<String> valueSerializer=kvId.getElementSerializer();
  Joiner joiner=Joiner.on(",");
  backend.setCurrentKey(1);
  assertNull(state.get());
  assertNull(getSerializedList(kvState,1,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer));
  state.add("1");
  backend.setCurrentKey(2);
  assertNull(state.get());
  assertNull(getSerializedList(kvState,2,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer));
  state.update(Arrays.asList("2"));
  backend.setCurrentKey(1);
  assertEquals("1",joiner.join(state.get()));
  assertEquals("1",joiner.join(getSerializedList(kvState,1,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer)));
  KeyedStateHandle snapshot1=runSnapshot(backend.snapshot(682375462378L,2,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation()),sharedStateRegistry);
  backend.setCurrentKey(1);
  state.add("u1");
  backend.setCurrentKey(2);
  state.add("u2");
  backend.setCurrentKey(3);
  state.add("u3");
  KeyedStateHandle snapshot2=runSnapshot(backend.snapshot(682375462379L,4,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation()),sharedStateRegistry);
  backend.setCurrentKey(1);
  assertEquals("1,u1",joiner.join(state.get()));
  assertEquals("1,u1",joiner.join(getSerializedList(kvState,1,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer)));
  backend.setCurrentKey(2);
  assertEquals("2,u2",joiner.join(state.get()));
  assertEquals("2,u2",joiner.join(getSerializedList(kvState,2,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer)));
  backend.setCurrentKey(3);
  assertEquals("u3",joiner.join(state.get()));
  assertEquals("u3",joiner.join(getSerializedList(kvState,3,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer)));
  backend.dispose();
  backend=restoreKeyedBackend(IntSerializer.INSTANCE,snapshot1);
  snapshot1.discardState();
  ListState<String> restored1=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
  @SuppressWarnings("unchecked") InternalKvState<Integer,VoidNamespace,String> restoredKvState1=(InternalKvState<Integer,VoidNamespace,String>)restored1;
  backend.setCurrentKey(1);
  assertEquals("1",joiner.join(restored1.get()));
  assertEquals("1",joiner.join(getSerializedList(restoredKvState1,1,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer)));
  backend.setCurrentKey(2);
  assertEquals("2",joiner.join(restored1.get()));
  assertEquals("2",joiner.join(getSerializedList(restoredKvState1,2,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer)));
  backend.dispose();
  backend=restoreKeyedBackend(IntSerializer.INSTANCE,snapshot2);
  snapshot2.discardState();
  ListState<String> restored2=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
  @SuppressWarnings("unchecked") InternalKvState<Integer,VoidNamespace,String> restoredKvState2=(InternalKvState<Integer,VoidNamespace,String>)restored2;
  backend.setCurrentKey(1);
  assertEquals("1,u1",joiner.join(restored2.get()));
  assertEquals("1,u1",joiner.join(getSerializedList(restoredKvState2,1,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer)));
  backend.setCurrentKey(2);
  assertEquals("2,u2",joiner.join(restored2.get()));
  assertEquals("2,u2",joiner.join(getSerializedList(restoredKvState2,2,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer)));
  backend.setCurrentKey(3);
  assertEquals("u3",joiner.join(restored2.get()));
  assertEquals("u3",joiner.join(getSerializedList(restoredKvState2,3,keySerializer,VoidNamespace.INSTANCE,namespaceSerializer,valueSerializer)));
  backend.dispose();
}
