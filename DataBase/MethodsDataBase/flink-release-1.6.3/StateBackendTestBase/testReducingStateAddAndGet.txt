@Test public void testReducingStateAddAndGet() throws Exception {
  final ReducingStateDescriptor<Long> stateDescr=new ReducingStateDescriptor<>("my-state",(a,b) -> a + b,Long.class);
  AbstractKeyedStateBackend<String> keyedBackend=createKeyedBackend(StringSerializer.INSTANCE);
  try {
    ReducingState<Long> state=keyedBackend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,stateDescr);
    keyedBackend.setCurrentKey("abc");
    assertNull(state.get());
    keyedBackend.setCurrentKey("def");
    assertNull(state.get());
    state.add(17L);
    state.add(11L);
    assertEquals(28L,state.get().longValue());
    keyedBackend.setCurrentKey("abc");
    assertNull(state.get());
    keyedBackend.setCurrentKey("g");
    assertNull(state.get());
    state.add(1L);
    state.add(2L);
    keyedBackend.setCurrentKey("def");
    assertEquals(28L,state.get().longValue());
    state.clear();
    assertNull(state.get());
    keyedBackend.setCurrentKey("g");
    state.add(3L);
    state.add(2L);
    state.add(1L);
    keyedBackend.setCurrentKey("def");
    assertNull(state.get());
    keyedBackend.setCurrentKey("g");
    assertEquals(9L,state.get().longValue());
    state.clear();
    assertThat("State backend is not empty.",keyedBackend.numKeyValueStateEntries(),is(0));
  }
  finally {
    keyedBackend.close();
    keyedBackend.dispose();
  }
}
