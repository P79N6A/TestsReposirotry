@Test @SuppressWarnings("unchecked") public void testMultipleValueStates() throws Exception {
  CheckpointStreamFactory streamFactory=createStreamFactory();
  SharedStateRegistry sharedStateRegistry=new SharedStateRegistry();
  AbstractKeyedStateBackend<Integer> backend=createKeyedBackend(IntSerializer.INSTANCE,1,new KeyGroupRange(0,0),new DummyEnvironment());
  ValueStateDescriptor<String> desc1=new ValueStateDescriptor<>("a-string",StringSerializer.INSTANCE);
  ValueStateDescriptor<Integer> desc2=new ValueStateDescriptor<>("an-integer",IntSerializer.INSTANCE);
  ValueState<String> state1=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc1);
  ValueState<Integer> state2=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc2);
  backend.setCurrentKey(1);
  assertNull(state1.value());
  assertNull(state2.value());
  state1.update("1");
  assertEquals("1",state1.value());
  assertNull(state2.value());
  state2.update(13);
  assertEquals("1",state1.value());
  assertEquals(13,(int)state2.value());
  KeyedStateHandle snapshot1=runSnapshot(backend.snapshot(682375462378L,2,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation()),sharedStateRegistry);
  backend.dispose();
  backend=restoreKeyedBackend(IntSerializer.INSTANCE,1,new KeyGroupRange(0,0),Collections.singletonList(snapshot1),new DummyEnvironment());
  snapshot1.discardState();
  backend.setCurrentKey(1);
  state1=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc1);
  state2=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc2);
  assertEquals("1",state1.value());
  assertEquals(13,(int)state2.value());
  backend.dispose();
}
