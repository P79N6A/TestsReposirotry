@Test public void testBackendUsesRegisteredKryoSerializer() throws Exception {
  CheckpointStreamFactory streamFactory=createStreamFactory();
  Environment env=new DummyEnvironment();
  SharedStateRegistry sharedStateRegistry=new SharedStateRegistry();
  AbstractKeyedStateBackend<Integer> backend=createKeyedBackend(IntSerializer.INSTANCE,env);
  env.getExecutionConfig().registerTypeWithKryoSerializer(TestPojo.class,ExceptionThrowingTestSerializer.class);
  TypeInformation<TestPojo> pojoType=new GenericTypeInfo<>(TestPojo.class);
  assertTrue(pojoType.createSerializer(env.getExecutionConfig()) instanceof KryoSerializer);
  ValueStateDescriptor<TestPojo> kvId=new ValueStateDescriptor<>("id",pojoType);
  ValueState<TestPojo> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
  int numExceptions=0;
  backend.setCurrentKey(1);
  try {
    state.update(new TestPojo("u1",1));
  }
 catch (  ExpectedKryoTestException e) {
    numExceptions++;
  }
catch (  Exception e) {
    if (e.getCause() instanceof ExpectedKryoTestException) {
      numExceptions++;
    }
 else {
      throw e;
    }
  }
  try {
    runSnapshot(backend.snapshot(682375462378L,2,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation()),sharedStateRegistry);
  }
 catch (  ExpectedKryoTestException e) {
    numExceptions++;
  }
catch (  Exception e) {
    if (e.getCause() instanceof ExpectedKryoTestException) {
      numExceptions++;
    }
 else {
      throw e;
    }
  }
  assertEquals("Didn't see the expected Kryo exception.",1,numExceptions);
  backend.dispose();
}
