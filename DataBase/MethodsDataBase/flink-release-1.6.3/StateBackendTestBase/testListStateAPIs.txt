@Test public void testListStateAPIs() throws Exception {
  AbstractKeyedStateBackend<String> keyedBackend=createKeyedBackend(StringSerializer.INSTANCE);
  final ListStateDescriptor<Long> stateDescr=new ListStateDescriptor<>("my-state",Long.class);
  try {
    ListState<Long> state=keyedBackend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,stateDescr);
    keyedBackend.setCurrentKey("def");
    assertNull(state.get());
    state.add(17L);
    state.add(11L);
    assertThat(state.get(),containsInAnyOrder(17L,11L));
    state.update(Collections.emptyList());
    assertNull(state.get());
    state.update(Arrays.asList(10L,16L));
    assertThat(state.get(),containsInAnyOrder(16L,10L));
    assertThat(state.get(),containsInAnyOrder(16L,10L));
    keyedBackend.setCurrentKey("abc");
    assertNull(state.get());
    keyedBackend.setCurrentKey("g");
    assertNull(state.get());
    assertNull(state.get());
    state.addAll(Collections.emptyList());
    assertNull(state.get());
    state.addAll(Arrays.asList(3L,4L));
    assertThat(state.get(),containsInAnyOrder(3L,4L));
    assertThat(state.get(),containsInAnyOrder(3L,4L));
    state.addAll(new ArrayList<>());
    assertThat(state.get(),containsInAnyOrder(3L,4L));
    state.addAll(Arrays.asList(5L,6L));
    assertThat(state.get(),containsInAnyOrder(3L,4L,5L,6L));
    state.addAll(new ArrayList<>());
    assertThat(state.get(),containsInAnyOrder(3L,4L,5L,6L));
    assertThat(state.get(),containsInAnyOrder(3L,4L,5L,6L));
    state.update(Arrays.asList(1L,2L));
    assertThat(state.get(),containsInAnyOrder(1L,2L));
    keyedBackend.setCurrentKey("def");
    assertThat(state.get(),containsInAnyOrder(10L,16L));
    state.clear();
    assertNull(state.get());
    keyedBackend.setCurrentKey("g");
    state.add(3L);
    state.add(2L);
    state.add(1L);
    keyedBackend.setCurrentKey("def");
    assertNull(state.get());
    keyedBackend.setCurrentKey("g");
    assertThat(state.get(),containsInAnyOrder(1L,2L,3L,2L,1L));
    state.update(Arrays.asList(5L,6L));
    assertThat(state.get(),containsInAnyOrder(5L,6L));
    state.clear();
    assertThat("State backend is not empty.",keyedBackend.numKeyValueStateEntries(),is(0));
  }
  finally {
    keyedBackend.close();
    keyedBackend.dispose();
  }
}
