@Test public void testPriorityQueueSerializerUpdates() throws Exception {
  final String stateName="test";
  final CheckpointStreamFactory streamFactory=createStreamFactory();
  final SharedStateRegistry sharedStateRegistry=new SharedStateRegistry();
  AbstractKeyedStateBackend<Integer> keyedBackend=createKeyedBackend(IntSerializer.INSTANCE);
  try {
    TypeSerializer<InternalPriorityQueueTestBase.TestElement> serializer=InternalPriorityQueueTestBase.TestElementSerializer.INSTANCE;
    KeyGroupedInternalPriorityQueue<InternalPriorityQueueTestBase.TestElement> priorityQueue=keyedBackend.create(stateName,serializer);
    priorityQueue.add(new InternalPriorityQueueTestBase.TestElement(42L,0L));
    RunnableFuture<SnapshotResult<KeyedStateHandle>> snapshot=keyedBackend.snapshot(0L,0L,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation());
    KeyedStateHandle keyedStateHandle=runSnapshot(snapshot,sharedStateRegistry);
    keyedBackend.dispose();
    keyedBackend=restoreKeyedBackend(IntSerializer.INSTANCE,keyedStateHandle);
    serializer=new ModifiedTestElementSerializer();
    priorityQueue=keyedBackend.create(stateName,serializer);
    final InternalPriorityQueueTestBase.TestElement checkElement=new InternalPriorityQueueTestBase.TestElement(4711L,1L);
    priorityQueue.add(checkElement);
    snapshot=keyedBackend.snapshot(1L,1L,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation());
    keyedStateHandle=runSnapshot(snapshot,sharedStateRegistry);
    keyedBackend.dispose();
    keyedBackend=restoreKeyedBackend(IntSerializer.INSTANCE,keyedStateHandle);
    priorityQueue=keyedBackend.create(stateName,serializer);
    priorityQueue.poll();
    ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos();
    DataOutputViewStreamWrapper outWrapper=new DataOutputViewStreamWrapper(out);
    serializer.serialize(checkElement,outWrapper);
    InternalPriorityQueueTestBase.TestElement expected=serializer.deserialize(new DataInputViewStreamWrapper(new ByteArrayInputStreamWithPos(out.toByteArray())));
    Assert.assertEquals(expected,priorityQueue.poll());
    Assert.assertTrue(priorityQueue.isEmpty());
    keyedBackend.dispose();
    serializer=InternalPriorityQueueTestBase.TestElementSerializer.INSTANCE;
    keyedBackend=restoreKeyedBackend(IntSerializer.INSTANCE,keyedStateHandle);
    try {
      keyedBackend.create("test",serializer);
      Assert.fail("Expected exception from incompatible serializer.");
    }
 catch (    Exception e) {
      Assert.assertTrue("Exception was not caused by state migration: " + e,ExceptionUtils.findThrowable(e,StateMigrationException.class).isPresent());
    }
  }
  finally {
    keyedBackend.dispose();
  }
}
