@Test public void testPojoRestoreResilienceWithDifferentRegistrationOrder() throws Exception {
  CheckpointStreamFactory streamFactory=createStreamFactory();
  Environment env=new DummyEnvironment();
  SharedStateRegistry sharedStateRegistry=new SharedStateRegistry();
  env.getExecutionConfig().registerPojoType(TestNestedPojoClassA.class);
  env.getExecutionConfig().registerPojoType(TestNestedPojoClassB.class);
  AbstractKeyedStateBackend<Integer> backend=createKeyedBackend(IntSerializer.INSTANCE,env);
  try {
    TypeInformation<TestPojo> pojoType=TypeExtractor.getForClass(TestPojo.class);
    assertTrue(pojoType.createSerializer(env.getExecutionConfig()) instanceof PojoSerializer);
    ValueStateDescriptor<TestPojo> kvId=new ValueStateDescriptor<>("id",pojoType);
    ValueState<TestPojo> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
    backend.setCurrentKey(1);
    state.update(new TestPojo("u1",1,new TestNestedPojoClassA(1.0,2),new TestNestedPojoClassB(2.3,"foo")));
    backend.setCurrentKey(2);
    state.update(new TestPojo("u2",2,new TestNestedPojoClassA(2.0,5),new TestNestedPojoClassB(3.1,"bar")));
    KeyedStateHandle snapshot=runSnapshot(backend.snapshot(682375462378L,2,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation()),sharedStateRegistry);
    backend.dispose();
    env=new DummyEnvironment();
    env.getExecutionConfig().registerPojoType(TestNestedPojoClassB.class);
    env.getExecutionConfig().registerPojoType(TestNestedPojoClassA.class);
    backend=restoreKeyedBackend(IntSerializer.INSTANCE,snapshot,env);
    kvId=new ValueStateDescriptor<>("id",pojoType);
    state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
    backend.setCurrentKey(1);
    state.update(new TestPojo("u1",11,new TestNestedPojoClassA(22.1,12),new TestNestedPojoClassB(1.23,"foobar")));
    runSnapshot(backend.snapshot(682375462378L,2,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation()),sharedStateRegistry);
    snapshot.discardState();
  }
  finally {
    backend.dispose();
  }
}
