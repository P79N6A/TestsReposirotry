@Test public void testStateSerializerReconfiguration() throws Exception {
  CheckpointStreamFactory streamFactory=createStreamFactory();
  SharedStateRegistry sharedStateRegistry=new SharedStateRegistry();
  Environment env=new DummyEnvironment();
  AbstractKeyedStateBackend<Integer> backend=createKeyedBackend(IntSerializer.INSTANCE,env);
  try {
    ValueStateDescriptor<TestCustomStateClass> kvId=new ValueStateDescriptor<>("id",new TestReconfigurableCustomTypeSerializer());
    ValueState<TestCustomStateClass> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
    backend.setCurrentKey(1);
    state.update(new TestCustomStateClass("test-message-1","this-should-be-ignored"));
    backend.setCurrentKey(2);
    state.update(new TestCustomStateClass("test-message-2","this-should-be-ignored"));
    InternalKvState internal=(InternalKvState)state;
    assertTrue(internal.getValueSerializer() instanceof TestReconfigurableCustomTypeSerializer);
    assertFalse(((TestReconfigurableCustomTypeSerializer)internal.getValueSerializer()).isReconfigured());
    KeyedStateHandle snapshot1=runSnapshot(backend.snapshot(682375462378L,2,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation()),sharedStateRegistry);
    backend.dispose();
    env=new DummyEnvironment();
    backend=restoreKeyedBackend(IntSerializer.INSTANCE,snapshot1,env);
    kvId=new ValueStateDescriptor<>("id",new TestReconfigurableCustomTypeSerializer());
    state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
    internal=(InternalKvState)state;
    assertTrue(internal.getValueSerializer() instanceof TestReconfigurableCustomTypeSerializer);
    assertTrue(((TestReconfigurableCustomTypeSerializer)internal.getValueSerializer()).isReconfigured());
    backend.setCurrentKey(1);
    TestCustomStateClass restoredState1=state.value();
    assertEquals("test-message-1",restoredState1.getMessage());
    assertNull(restoredState1.getExtraMessage());
    state.update(new TestCustomStateClass("new-test-message-1","extra-message-1"));
    backend.setCurrentKey(2);
    TestCustomStateClass restoredState2=state.value();
    assertEquals("test-message-2",restoredState2.getMessage());
    assertNull(restoredState1.getExtraMessage());
    state.update(new TestCustomStateClass("new-test-message-2","extra-message-2"));
    KeyedStateHandle snapshot2=runSnapshot(backend.snapshot(682375462379L,3,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation()),sharedStateRegistry);
    snapshot1.discardState();
    backend.dispose();
    env=new DummyEnvironment();
    backend=restoreKeyedBackend(IntSerializer.INSTANCE,snapshot2,env);
    snapshot2.discardState();
    kvId=new ValueStateDescriptor<>("id",new TestReconfigurableCustomTypeSerializer());
    state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
    internal=(InternalKvState)state;
    assertTrue(internal.getValueSerializer() instanceof TestReconfigurableCustomTypeSerializer);
    assertTrue(((TestReconfigurableCustomTypeSerializer)internal.getValueSerializer()).isReconfigured());
    backend.setCurrentKey(1);
    restoredState1=state.value();
    assertEquals("new-test-message-1",restoredState1.getMessage());
    assertEquals("extra-message-1",restoredState1.getExtraMessage());
    backend.setCurrentKey(2);
    restoredState2=state.value();
    assertEquals("new-test-message-2",restoredState2.getMessage());
    assertEquals("extra-message-2",restoredState2.getExtraMessage());
  }
  finally {
    backend.dispose();
  }
}
