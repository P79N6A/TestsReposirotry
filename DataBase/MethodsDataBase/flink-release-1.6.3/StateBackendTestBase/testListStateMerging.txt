@Test public void testListStateMerging() throws Exception {
  AbstractKeyedStateBackend<String> keyedBackend=createKeyedBackend(StringSerializer.INSTANCE);
  final ListStateDescriptor<Long> stateDescr=new ListStateDescriptor<>("my-state",Long.class);
  final Integer namespace1=1;
  final Integer namespace2=2;
  final Integer namespace3=3;
  try {
    InternalListState<String,Integer,Long> state=(InternalListState<String,Integer,Long>)keyedBackend.getPartitionedState(0,IntSerializer.INSTANCE,stateDescr);
    keyedBackend.setCurrentKey("abc");
    state.setCurrentNamespace(namespace1);
    state.add(33L);
    state.add(55L);
    state.setCurrentNamespace(namespace2);
    state.add(22L);
    state.add(11L);
    state.setCurrentNamespace(namespace3);
    state.add(44L);
    keyedBackend.setCurrentKey("def");
    state.setCurrentNamespace(namespace1);
    state.add(11L);
    state.add(44L);
    state.setCurrentNamespace(namespace3);
    state.add(22L);
    state.add(55L);
    state.add(33L);
    keyedBackend.setCurrentKey("jkl");
    state.setCurrentNamespace(namespace1);
    state.add(11L);
    state.add(22L);
    state.add(33L);
    state.add(44L);
    state.add(55L);
    keyedBackend.setCurrentKey("mno");
    state.setCurrentNamespace(namespace3);
    state.add(11L);
    state.add(22L);
    state.add(33L);
    state.add(44L);
    state.add(55L);
    keyedBackend.setCurrentKey("abc");
    state.mergeNamespaces(namespace1,asList(namespace2,namespace3));
    state.setCurrentNamespace(namespace1);
    assertThat(state.get(),containsInAnyOrder(11L,22L,33L,44L,55L));
    keyedBackend.setCurrentKey("def");
    state.mergeNamespaces(namespace1,asList(namespace2,namespace3));
    state.setCurrentNamespace(namespace1);
    assertThat(state.get(),containsInAnyOrder(11L,22L,33L,44L,55L));
    keyedBackend.setCurrentKey("ghi");
    state.mergeNamespaces(namespace1,asList(namespace2,namespace3));
    state.setCurrentNamespace(namespace1);
    assertNull(state.get());
    keyedBackend.setCurrentKey("jkl");
    state.mergeNamespaces(namespace1,asList(namespace2,namespace3));
    state.setCurrentNamespace(namespace1);
    assertThat(state.get(),containsInAnyOrder(11L,22L,33L,44L,55L));
    keyedBackend.setCurrentKey("mno");
    state.mergeNamespaces(namespace1,asList(namespace2,namespace3));
    state.setCurrentNamespace(namespace1);
    assertThat(state.get(),containsInAnyOrder(11L,22L,33L,44L,55L));
    keyedBackend.setCurrentKey("abc");
    state.setCurrentNamespace(namespace1);
    state.clear();
    keyedBackend.setCurrentKey("def");
    state.setCurrentNamespace(namespace1);
    state.clear();
    keyedBackend.setCurrentKey("ghi");
    state.setCurrentNamespace(namespace1);
    state.clear();
    keyedBackend.setCurrentKey("jkl");
    state.setCurrentNamespace(namespace1);
    state.clear();
    keyedBackend.setCurrentKey("mno");
    state.setCurrentNamespace(namespace1);
    state.clear();
    assertThat("State backend is not empty.",keyedBackend.numKeyValueStateEntries(),is(0));
  }
  finally {
    keyedBackend.close();
    keyedBackend.dispose();
  }
}
