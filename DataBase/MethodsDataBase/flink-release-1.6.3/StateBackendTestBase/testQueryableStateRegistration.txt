/** 
 * Tests registration with the KvStateRegistry.
 */
@Test public void testQueryableStateRegistration() throws Exception {
  DummyEnvironment env=new DummyEnvironment();
  KvStateRegistry registry=env.getKvStateRegistry();
  CheckpointStreamFactory streamFactory=createStreamFactory();
  SharedStateRegistry sharedStateRegistry=new SharedStateRegistry();
  AbstractKeyedStateBackend<Integer> backend=createKeyedBackend(IntSerializer.INSTANCE,env);
  KeyGroupRange expectedKeyGroupRange=backend.getKeyGroupRange();
  KvStateRegistryListener listener=mock(KvStateRegistryListener.class);
  registry.registerListener(HighAvailabilityServices.DEFAULT_JOB_ID,listener);
  ValueStateDescriptor<Integer> desc=new ValueStateDescriptor<>("test",IntSerializer.INSTANCE);
  desc.setQueryable("banana");
  backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc);
  verify(listener,times(1)).notifyKvStateRegistered(eq(env.getJobID()),eq(env.getJobVertexId()),eq(expectedKeyGroupRange),eq("banana"),any(KvStateID.class));
  KeyedStateHandle snapshot=runSnapshot(backend.snapshot(682375462379L,4,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation()),sharedStateRegistry);
  backend.dispose();
  verify(listener,times(1)).notifyKvStateUnregistered(eq(env.getJobID()),eq(env.getJobVertexId()),eq(expectedKeyGroupRange),eq("banana"));
  backend.dispose();
  backend=restoreKeyedBackend(IntSerializer.INSTANCE,snapshot,env);
  snapshot.discardState();
  backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc);
  verify(listener,times(2)).notifyKvStateRegistered(eq(env.getJobID()),eq(env.getJobVertexId()),eq(expectedKeyGroupRange),eq("banana"),any(KvStateID.class));
  backend.dispose();
}
