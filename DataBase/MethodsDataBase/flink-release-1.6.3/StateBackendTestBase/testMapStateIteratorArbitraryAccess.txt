/** 
 * Verify iterator of  {@link MapState} supporting arbitrary access, see [FLINK-10267] to know more details.
 */
@Test public void testMapStateIteratorArbitraryAccess() throws Exception {
  MapStateDescriptor<Integer,Long> kvId=new MapStateDescriptor<>("id",Integer.class,Long.class);
  AbstractKeyedStateBackend<Integer> backend=createKeyedBackend(IntSerializer.INSTANCE);
  try {
    MapState<Integer,Long> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
    backend.setCurrentKey(1);
    int stateSize=4096;
    for (int i=0; i < stateSize; i++) {
      state.put(i,i * 2L);
    }
    Iterator<Map.Entry<Integer,Long>> iterator=state.iterator();
    int iteratorCount=0;
    while (iterator.hasNext()) {
      Map.Entry<Integer,Long> entry=iterator.next();
      assertEquals(iteratorCount,(int)entry.getKey());
switch (ThreadLocalRandom.current().nextInt() % 3) {
case 0:
        iterator.remove();
      try {
        iterator.remove();
        fail();
      }
 catch (      IllegalStateException e) {
      }
    break;
case 1:
  iterator.hasNext();
iterator.remove();
break;
case 2:
break;
}
iteratorCount++;
}
assertEquals(stateSize,iteratorCount);
}
  finally {
backend.dispose();
}
}
