@Test public void testInvalidParameters(){
  WindowAssigner.WindowAssignerContext mockContext=mock(WindowAssigner.WindowAssignerContext.class);
  try {
    SessionWindowTimeGapExtractor extractor=mock(SessionWindowTimeGapExtractor.class);
    when(extractor.extract(any())).thenReturn(-1L);
    DynamicEventTimeSessionWindows assigner=DynamicEventTimeSessionWindows.withDynamicGap(extractor);
    assigner.assignWindows(Lists.newArrayList(new Object()),1,mockContext);
    fail("should fail");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.toString(),containsString("0 < gap"));
  }
  try {
    SessionWindowTimeGapExtractor extractor=mock(SessionWindowTimeGapExtractor.class);
    when(extractor.extract(any())).thenReturn(0L);
    DynamicEventTimeSessionWindows assigner=DynamicEventTimeSessionWindows.withDynamicGap(extractor);
    assigner.assignWindows(Lists.newArrayList(new Object()),1,mockContext);
    fail("should fail");
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.toString(),containsString("0 < gap"));
  }
}
