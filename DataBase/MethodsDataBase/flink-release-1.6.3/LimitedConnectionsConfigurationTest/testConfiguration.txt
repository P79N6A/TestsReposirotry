/** 
 * This test validates that the File System is correctly wrapped by the file system factories when the corresponding entries are in the configuration.
 */
@Test public void testConfiguration() throws Exception {
  final String fsScheme=TestFileSystem.SCHEME;
  FileSystem schemeFs=FileSystem.get(URI.create(fsScheme + ":///a/b/c"));
  FileSystem localFs=FileSystem.get(tempDir.newFile().toURI());
  assertFalse(schemeFs instanceof LimitedConnectionsFileSystem);
  assertFalse(localFs instanceof LimitedConnectionsFileSystem);
  final Configuration config=new Configuration();
  config.setInteger("fs." + fsScheme + ".limit.total",42);
  config.setInteger("fs." + fsScheme + ".limit.input",11);
  config.setInteger("fs." + fsScheme + ".limit.output",40);
  config.setInteger("fs." + fsScheme + ".limit.timeout",12345);
  config.setInteger("fs." + fsScheme + ".limit.stream-timeout",98765);
  try {
    FileSystem.initialize(config);
    schemeFs=FileSystem.get(URI.create(fsScheme + ":///a/b/c"));
    localFs=FileSystem.get(tempDir.newFile().toURI());
    assertTrue(schemeFs instanceof LimitedConnectionsFileSystem);
    assertFalse(localFs instanceof LimitedConnectionsFileSystem);
    LimitedConnectionsFileSystem limitedFs=(LimitedConnectionsFileSystem)schemeFs;
    assertEquals(42,limitedFs.getMaxNumOpenStreamsTotal());
    assertEquals(11,limitedFs.getMaxNumOpenInputStreams());
    assertEquals(40,limitedFs.getMaxNumOpenOutputStreams());
    assertEquals(12345,limitedFs.getStreamOpenTimeout());
    assertEquals(98765,limitedFs.getStreamInactivityTimeout());
  }
  finally {
    FileSystem.initialize(new Configuration());
  }
}
