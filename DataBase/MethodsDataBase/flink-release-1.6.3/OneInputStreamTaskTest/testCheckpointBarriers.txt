/** 
 * This test verifies that checkpoint barriers are correctly forwarded.
 */
@Test public void testCheckpointBarriers() throws Exception {
  final OneInputStreamTaskTestHarness<String,String> testHarness=new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new,2,2,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setupOutputForSingletonOperatorChain();
  StreamConfig streamConfig=testHarness.getStreamConfig();
  StreamMap<String,String> mapOperator=new StreamMap<String,String>(new IdentityMap());
  streamConfig.setStreamOperator(mapOperator);
  streamConfig.setOperatorID(new OperatorID());
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<Object>();
  long initialTime=0L;
  testHarness.invoke();
  testHarness.waitForTaskRunning();
  testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,0);
  testHarness.processElement(new StreamRecord<String>("Hello-0-0",initialTime),0,0);
  testHarness.processElement(new StreamRecord<String>("Ciao-0-0",initialTime),0,0);
  testHarness.processElement(new StreamRecord<String>("Hello-1-1",initialTime),1,1);
  testHarness.processElement(new StreamRecord<String>("Ciao-1-1",initialTime),1,1);
  expectedOutput.add(new StreamRecord<String>("Hello-1-1",initialTime));
  expectedOutput.add(new StreamRecord<String>("Ciao-1-1",initialTime));
  testHarness.waitForInputProcessing();
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,1);
  testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,0);
  testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,1);
  testHarness.waitForInputProcessing();
  expectedOutput.add(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()));
  expectedOutput.add(new StreamRecord<String>("Hello-0-0",initialTime));
  expectedOutput.add(new StreamRecord<String>("Ciao-0-0",initialTime));
  testHarness.endInput();
  testHarness.waitForTaskCompletion();
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
}
