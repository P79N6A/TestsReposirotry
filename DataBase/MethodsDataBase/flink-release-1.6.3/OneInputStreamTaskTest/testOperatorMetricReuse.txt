@Test public void testOperatorMetricReuse() throws Exception {
  final OneInputStreamTaskTestHarness<String,String> testHarness=new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setupOperatorChain(new OperatorID(),new DuplicatingOperator()).chain(new OperatorID(),new DuplicatingOperator(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig())).chain(new OperatorID(),new DuplicatingOperator(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig())).finish();
  final TaskMetricGroup taskMetricGroup=new UnregisteredMetricGroups.UnregisteredTaskMetricGroup(){
    @Override public OperatorMetricGroup addOperator(    OperatorID operatorID,    String name){
      return new OperatorMetricGroup(NoOpMetricRegistry.INSTANCE,this,operatorID,name);
    }
  }
;
  final StreamMockEnvironment env=new StreamMockEnvironment(testHarness.jobConfig,testHarness.taskConfig,testHarness.memorySize,new MockInputSplitProvider(),testHarness.bufferSize,new TestTaskStateManager()){
    @Override public TaskMetricGroup getMetricGroup(){
      return taskMetricGroup;
    }
  }
;
  final Counter numRecordsInCounter=taskMetricGroup.getIOMetricGroup().getNumRecordsInCounter();
  final Counter numRecordsOutCounter=taskMetricGroup.getIOMetricGroup().getNumRecordsOutCounter();
  testHarness.invoke(env);
  testHarness.waitForTaskRunning();
  final int numRecords=5;
  for (int x=0; x < numRecords; x++) {
    testHarness.processElement(new StreamRecord<>("hello"));
  }
  testHarness.waitForInputProcessing();
  assertEquals(numRecords,numRecordsInCounter.getCount());
  assertEquals(numRecords * 2 * 2* 2,numRecordsOutCounter.getCount());
}
