/** 
 * This test verifies that watermarks and stream statuses are correctly forwarded. This also checks whether watermarks are forwarded only when we have received watermarks from all inputs. The forwarded watermark must be the minimum of the watermarks of all active inputs.
 */
@Test @SuppressWarnings("unchecked") public void testWatermarkAndStreamStatusForwarding() throws Exception {
  final OneInputStreamTaskTestHarness<String,String> testHarness=new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new,2,2,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setupOutputForSingletonOperatorChain();
  StreamConfig streamConfig=testHarness.getStreamConfig();
  StreamMap<String,String> mapOperator=new StreamMap<String,String>(new IdentityMap());
  streamConfig.setStreamOperator(mapOperator);
  streamConfig.setOperatorID(new OperatorID());
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<Object>();
  long initialTime=0L;
  testHarness.invoke();
  testHarness.waitForTaskRunning();
  testHarness.processElement(new Watermark(initialTime),0,0);
  testHarness.processElement(new Watermark(initialTime),0,1);
  testHarness.processElement(new Watermark(initialTime),1,0);
  testHarness.waitForInputProcessing();
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(new Watermark(initialTime),1,1);
  testHarness.waitForInputProcessing();
  expectedOutput.add(new Watermark(initialTime));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(new StreamRecord<String>("Hello",initialTime));
  testHarness.processElement(new StreamRecord<String>("Ciao",initialTime));
  expectedOutput.add(new StreamRecord<String>("Hello",initialTime));
  expectedOutput.add(new StreamRecord<String>("Ciao",initialTime));
  testHarness.processElement(new Watermark(initialTime + 4),0,0);
  testHarness.processElement(new Watermark(initialTime + 3),0,1);
  testHarness.processElement(new Watermark(initialTime + 3),1,0);
  testHarness.processElement(new Watermark(initialTime + 2),1,1);
  testHarness.waitForInputProcessing();
  expectedOutput.add(new Watermark(initialTime + 2));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(new Watermark(initialTime + 4),1,1);
  testHarness.waitForInputProcessing();
  expectedOutput.add(new Watermark(initialTime + 3));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(new Watermark(initialTime + 4),0,1);
  testHarness.processElement(new Watermark(initialTime + 4),1,0);
  testHarness.waitForInputProcessing();
  expectedOutput.add(new Watermark(initialTime + 4));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(StreamStatus.IDLE,0,1);
  testHarness.processElement(StreamStatus.IDLE,1,0);
  testHarness.processElement(new Watermark(initialTime + 6),0,0);
  testHarness.processElement(new Watermark(initialTime + 5),1,1);
  testHarness.processElement(StreamStatus.IDLE,1,1);
  testHarness.waitForInputProcessing();
  expectedOutput.add(new Watermark(initialTime + 5));
  expectedOutput.add(new Watermark(initialTime + 6));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(StreamStatus.IDLE,0,0);
  testHarness.waitForInputProcessing();
  expectedOutput.add(StreamStatus.IDLE);
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processElement(StreamStatus.ACTIVE,1,0);
  testHarness.processElement(StreamStatus.ACTIVE,0,1);
  testHarness.waitForInputProcessing();
  expectedOutput.add(StreamStatus.ACTIVE);
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.endInput();
  testHarness.waitForTaskCompletion();
  List<String> resultElements=TestHarnessUtil.getRawElementsFromOutput(testHarness.getOutput());
  assertEquals(2,resultElements.size());
}
