/** 
 * This test verifies that open() and close() are correctly called. This test also verifies that timestamps of emitted elements are correct.  {@link StreamMap} assigns the inputtimestamp to emitted elements.
 */
@Test public void testOpenCloseAndTimestamps() throws Exception {
  final OneInputStreamTaskTestHarness<String,String> testHarness=new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setupOutputForSingletonOperatorChain();
  StreamConfig streamConfig=testHarness.getStreamConfig();
  StreamMap<String,String> mapOperator=new StreamMap<String,String>(new TestOpenCloseMapFunction());
  streamConfig.setStreamOperator(mapOperator);
  streamConfig.setOperatorID(new OperatorID());
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<Object>();
  testHarness.invoke();
  testHarness.waitForTaskRunning();
  testHarness.processElement(new StreamRecord<String>("Hello",initialTime + 1));
  testHarness.processElement(new StreamRecord<String>("Ciao",initialTime + 2));
  expectedOutput.add(new StreamRecord<String>("Hello",initialTime + 1));
  expectedOutput.add(new StreamRecord<String>("Ciao",initialTime + 2));
  testHarness.endInput();
  testHarness.waitForTaskCompletion();
  assertTrue("RichFunction methods where not called.",TestOpenCloseMapFunction.closeCalled);
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
}
