@Test public void testWatermarkMetrics() throws Exception {
  final OneInputStreamTaskTestHarness<String,String> testHarness=new OneInputStreamTaskTestHarness<>(OneInputStreamTask::new,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  OneInputStreamOperator<String,String> headOperator=new WatermarkMetricOperator();
  OperatorID headOperatorId=new OperatorID();
  OneInputStreamOperator<String,String> chainedOperator=new WatermarkMetricOperator();
  OperatorID chainedOperatorId=new OperatorID();
  testHarness.setupOperatorChain(headOperatorId,headOperator).chain(chainedOperatorId,chainedOperator,BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig())).finish();
  InterceptingOperatorMetricGroup headOperatorMetricGroup=new InterceptingOperatorMetricGroup();
  InterceptingOperatorMetricGroup chainedOperatorMetricGroup=new InterceptingOperatorMetricGroup();
  InterceptingTaskMetricGroup taskMetricGroup=new InterceptingTaskMetricGroup(){
    @Override public OperatorMetricGroup addOperator(    OperatorID id,    String name){
      if (id.equals(headOperatorId)) {
        return headOperatorMetricGroup;
      }
 else       if (id.equals(chainedOperatorId)) {
        return chainedOperatorMetricGroup;
      }
 else {
        return super.addOperator(id,name);
      }
    }
  }
;
  StreamMockEnvironment env=new StreamMockEnvironment(testHarness.jobConfig,testHarness.taskConfig,testHarness.memorySize,new MockInputSplitProvider(),testHarness.bufferSize,new TestTaskStateManager()){
    @Override public TaskMetricGroup getMetricGroup(){
      return taskMetricGroup;
    }
  }
;
  testHarness.invoke(env);
  testHarness.waitForTaskRunning();
  Gauge<Long> taskInputWatermarkGauge=(Gauge<Long>)taskMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);
  Gauge<Long> headInputWatermarkGauge=(Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);
  Gauge<Long> headOutputWatermarkGauge=(Gauge<Long>)headOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);
  Gauge<Long> chainedInputWatermarkGauge=(Gauge<Long>)chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_INPUT_WATERMARK);
  Gauge<Long> chainedOutputWatermarkGauge=(Gauge<Long>)chainedOperatorMetricGroup.get(MetricNames.IO_CURRENT_OUTPUT_WATERMARK);
  Assert.assertEquals("A metric was registered multiple times.",5,new HashSet<>(Arrays.asList(taskInputWatermarkGauge,headInputWatermarkGauge,headOutputWatermarkGauge,chainedInputWatermarkGauge,chainedOutputWatermarkGauge)).size());
  Assert.assertEquals(Long.MIN_VALUE,taskInputWatermarkGauge.getValue().longValue());
  Assert.assertEquals(Long.MIN_VALUE,headInputWatermarkGauge.getValue().longValue());
  Assert.assertEquals(Long.MIN_VALUE,headOutputWatermarkGauge.getValue().longValue());
  Assert.assertEquals(Long.MIN_VALUE,chainedInputWatermarkGauge.getValue().longValue());
  Assert.assertEquals(Long.MIN_VALUE,chainedOutputWatermarkGauge.getValue().longValue());
  testHarness.processElement(new Watermark(1L));
  testHarness.waitForInputProcessing();
  Assert.assertEquals(1L,taskInputWatermarkGauge.getValue().longValue());
  Assert.assertEquals(1L,headInputWatermarkGauge.getValue().longValue());
  Assert.assertEquals(2L,headOutputWatermarkGauge.getValue().longValue());
  Assert.assertEquals(2L,chainedInputWatermarkGauge.getValue().longValue());
  Assert.assertEquals(4L,chainedOutputWatermarkGauge.getValue().longValue());
  testHarness.processElement(new Watermark(2L));
  testHarness.waitForInputProcessing();
  Assert.assertEquals(2L,taskInputWatermarkGauge.getValue().longValue());
  Assert.assertEquals(2L,headInputWatermarkGauge.getValue().longValue());
  Assert.assertEquals(4L,headOutputWatermarkGauge.getValue().longValue());
  Assert.assertEquals(4L,chainedInputWatermarkGauge.getValue().longValue());
  Assert.assertEquals(8L,chainedOutputWatermarkGauge.getValue().longValue());
  testHarness.endInput();
  testHarness.waitForTaskCompletion();
}
