@Test public void testTimesWithNotFollowedBy() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event a1=new Event(40,"a",1.0);
  Event b1=new Event(41,"b",2.0);
  Event c=new Event(42,"c",3.0);
  Event b2=new Event(43,"b",4.0);
  Event d=new Event(43,"d",4.0);
  inputEvents.add(new StreamRecord<>(a1,1));
  inputEvents.add(new StreamRecord<>(b1,2));
  inputEvents.add(new StreamRecord<>(c,3));
  inputEvents.add(new StreamRecord<>(b2,4));
  inputEvents.add(new StreamRecord<>(d,5));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=-2568839911852184515L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).followedByAny("middle").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=-3632232424064269636L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("b");
    }
  }
).times(2).notFollowedBy("notPattern").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=3685596793523534611L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("c");
    }
  }
).followedBy("end").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=1960758663575587243L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("d");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  final List<List<Event>> matches=feedNFA(inputEvents,nfa);
  compareMaps(matches,Lists.<List<Event>>newArrayList());
}
