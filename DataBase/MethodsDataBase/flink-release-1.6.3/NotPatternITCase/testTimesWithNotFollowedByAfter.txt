@Test public void testTimesWithNotFollowedByAfter() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event a1=new Event(40,"a",1.0);
  Event e=new Event(41,"e",2.0);
  Event c1=new Event(42,"c",3.0);
  Event b1=new Event(43,"b",4.0);
  Event b2=new Event(44,"b",5.0);
  Event d1=new Event(46,"d",7.0);
  Event d2=new Event(47,"d",8.0);
  inputEvents.add(new StreamRecord<>(a1,1));
  inputEvents.add(new StreamRecord<>(d1,2));
  inputEvents.add(new StreamRecord<>(e,1));
  inputEvents.add(new StreamRecord<>(b1,3));
  inputEvents.add(new StreamRecord<>(b2,3));
  inputEvents.add(new StreamRecord<>(c1,2));
  inputEvents.add(new StreamRecord<>(d2,5));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=6193105689601702341L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).followedByAny("middle").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5195859580923169111L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("b");
    }
  }
).times(2).notFollowedBy("notPattern").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=4973027956103783831L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("c");
    }
  }
).followedBy("end").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=2724622546678984894L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("d");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  final List<List<Event>> matches=feedNFA(inputEvents,nfa);
  compareMaps(matches,Lists.<List<Event>>newArrayList());
}
