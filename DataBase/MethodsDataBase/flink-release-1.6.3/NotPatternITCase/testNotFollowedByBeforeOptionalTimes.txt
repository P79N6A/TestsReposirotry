@Test public void testNotFollowedByBeforeOptionalTimes() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event a1=new Event(40,"a",1.0);
  Event c1=new Event(41,"c",2.0);
  Event b1=new Event(42,"b",3.0);
  Event c2=new Event(43,"c",4.0);
  Event d=new Event(43,"d",4.0);
  inputEvents.add(new StreamRecord<>(a1,1));
  inputEvents.add(new StreamRecord<>(c1,2));
  inputEvents.add(new StreamRecord<>(b1,3));
  inputEvents.add(new StreamRecord<>(c2,4));
  inputEvents.add(new StreamRecord<>(d,5));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=-7885381452276160322L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).notFollowedBy("notPattern").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=3471511260235826653L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("b");
    }
  }
).followedByAny("middle").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=9073793782452363833L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("c");
    }
  }
).times(2).optional().followedBy("end").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=7972902718259767076L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("d");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  final List<List<Event>> matches=feedNFA(inputEvents,nfa);
  compareMaps(matches,Lists.<List<Event>>newArrayList(Lists.newArrayList(a1,c1,c2,d)));
}
