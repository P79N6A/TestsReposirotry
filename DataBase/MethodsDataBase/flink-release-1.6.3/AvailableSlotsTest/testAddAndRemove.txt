@Test public void testAddAndRemove() throws Exception {
  SlotPool.AvailableSlots availableSlots=new SlotPool.AvailableSlots();
  final ResourceID resource1=new ResourceID("resource1");
  final ResourceID resource2=new ResourceID("resource2");
  final AllocatedSlot slot1=createAllocatedSlot(resource1);
  final AllocatedSlot slot2=createAllocatedSlot(resource1);
  final AllocatedSlot slot3=createAllocatedSlot(resource2);
  availableSlots.add(slot1,1L);
  availableSlots.add(slot2,2L);
  availableSlots.add(slot3,3L);
  assertEquals(3,availableSlots.size());
  assertTrue(availableSlots.contains(slot1.getAllocationId()));
  assertTrue(availableSlots.contains(slot2.getAllocationId()));
  assertTrue(availableSlots.contains(slot3.getAllocationId()));
  assertTrue(availableSlots.containsTaskManager(resource1));
  assertTrue(availableSlots.containsTaskManager(resource2));
  availableSlots.removeAllForTaskManager(resource1);
  assertEquals(1,availableSlots.size());
  assertFalse(availableSlots.contains(slot1.getAllocationId()));
  assertFalse(availableSlots.contains(slot2.getAllocationId()));
  assertTrue(availableSlots.contains(slot3.getAllocationId()));
  assertFalse(availableSlots.containsTaskManager(resource1));
  assertTrue(availableSlots.containsTaskManager(resource2));
  availableSlots.removeAllForTaskManager(resource2);
  assertEquals(0,availableSlots.size());
  assertFalse(availableSlots.contains(slot1.getAllocationId()));
  assertFalse(availableSlots.contains(slot2.getAllocationId()));
  assertFalse(availableSlots.contains(slot3.getAllocationId()));
  assertFalse(availableSlots.containsTaskManager(resource1));
  assertFalse(availableSlots.containsTaskManager(resource2));
}
