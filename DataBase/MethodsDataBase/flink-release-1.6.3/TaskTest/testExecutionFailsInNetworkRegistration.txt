@Test public void testExecutionFailsInNetworkRegistration(){
  try {
    BlobCacheService blobService=createBlobCache();
    LibraryCacheManager libCache=mock(LibraryCacheManager.class);
    when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader());
    ResultPartitionManager partitionManager=mock(ResultPartitionManager.class);
    ResultPartitionConsumableNotifier consumableNotifier=new NoOpResultPartitionConsumableNotifier();
    PartitionProducerStateChecker partitionProducerStateChecker=mock(PartitionProducerStateChecker.class);
    TaskEventDispatcher taskEventDispatcher=mock(TaskEventDispatcher.class);
    Executor executor=mock(Executor.class);
    NetworkEnvironment network=mock(NetworkEnvironment.class);
    when(network.getResultPartitionManager()).thenReturn(partitionManager);
    when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC);
    when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher);
    doThrow(new RuntimeException("buffers")).when(network).registerTask(any(Task.class));
    Task task=createTask(TestInvokableCorrect.class,blobService,libCache,network,consumableNotifier,partitionProducerStateChecker,executor);
    task.registerExecutionListener(listener);
    task.run();
    assertEquals(ExecutionState.FAILED,task.getExecutionState());
    assertTrue(task.isCanceledOrFailed());
    assertTrue(task.getFailureCause().getMessage().contains("buffers"));
    validateUnregisterTask(task.getExecutionId());
    validateListenerMessage(ExecutionState.FAILED,task,true);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
