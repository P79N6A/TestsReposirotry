/** 
 * Tests a checkpoint details request for an in progress checkpoint.
 */
@Test public void testCheckpointDetailsRequestInProgressCheckpoint() throws Exception {
  PendingCheckpointStats checkpoint=mock(PendingCheckpointStats.class);
  when(checkpoint.getCheckpointId()).thenReturn(1992139L);
  when(checkpoint.getStatus()).thenReturn(CheckpointStatsStatus.IN_PROGRESS);
  when(checkpoint.getProperties()).thenReturn(CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION));
  when(checkpoint.getTriggerTimestamp()).thenReturn(1919191900L);
  when(checkpoint.getLatestAckTimestamp()).thenReturn(1977791901L);
  when(checkpoint.getStateSize()).thenReturn(111939272822L);
  when(checkpoint.getEndToEndDuration()).thenReturn(121191L);
  when(checkpoint.getAlignmentBuffered()).thenReturn(1L);
  when(checkpoint.getNumberOfSubtasks()).thenReturn(501);
  when(checkpoint.getNumberOfAcknowledgedSubtasks()).thenReturn(101);
  List<TaskStateStats> taskStats=new ArrayList<>();
  TaskStateStats task1=createTaskStateStats();
  TaskStateStats task2=createTaskStateStats();
  taskStats.add(task1);
  taskStats.add(task2);
  when(checkpoint.getAllTaskStateStats()).thenReturn(taskStats);
  JsonNode rootNode=triggerRequest(checkpoint);
  assertEquals(checkpoint.getCheckpointId(),rootNode.get("id").asLong());
  assertEquals(checkpoint.getStatus().toString(),rootNode.get("status").asText());
  assertEquals(checkpoint.getProperties().isSavepoint(),rootNode.get("is_savepoint").asBoolean());
  assertEquals(checkpoint.getTriggerTimestamp(),rootNode.get("trigger_timestamp").asLong());
  assertEquals(checkpoint.getLatestAckTimestamp(),rootNode.get("latest_ack_timestamp").asLong());
  assertEquals(checkpoint.getStateSize(),rootNode.get("state_size").asLong());
  assertEquals(checkpoint.getEndToEndDuration(),rootNode.get("end_to_end_duration").asLong());
  assertEquals(checkpoint.getAlignmentBuffered(),rootNode.get("alignment_buffered").asLong());
  assertEquals(checkpoint.getNumberOfSubtasks(),rootNode.get("num_subtasks").asInt());
  assertEquals(checkpoint.getNumberOfAcknowledgedSubtasks(),rootNode.get("num_acknowledged_subtasks").asInt());
  verifyTaskNodes(taskStats,rootNode);
}
