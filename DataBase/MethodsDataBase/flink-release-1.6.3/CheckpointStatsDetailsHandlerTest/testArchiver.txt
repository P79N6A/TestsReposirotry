@Test public void testArchiver() throws IOException {
  JsonArchivist archivist=new CheckpointStatsDetailsHandler.CheckpointStatsDetailsJsonArchivist();
  CompletedCheckpointStats completedCheckpoint=createCompletedCheckpoint();
  FailedCheckpointStats failedCheckpoint=createFailedCheckpoint();
  List<AbstractCheckpointStats> checkpoints=new ArrayList<>();
  checkpoints.add(failedCheckpoint);
  checkpoints.add(completedCheckpoint);
  CheckpointStatsHistory history=mock(CheckpointStatsHistory.class);
  when(history.getCheckpoints()).thenReturn(checkpoints);
  CheckpointStatsSnapshot snapshot=mock(CheckpointStatsSnapshot.class);
  when(snapshot.getHistory()).thenReturn(history);
  AccessExecutionGraph graph=mock(AccessExecutionGraph.class);
  when(graph.getCheckpointStatsSnapshot()).thenReturn(snapshot);
  when(graph.getJobID()).thenReturn(new JobID());
  ObjectMapper mapper=new ObjectMapper();
  Collection<ArchivedJson> archives=archivist.archiveJsonWithPath(graph);
  Assert.assertEquals(2,archives.size());
  Iterator<ArchivedJson> iterator=archives.iterator();
  ArchivedJson archive1=iterator.next();
  Assert.assertEquals("/jobs/" + graph.getJobID() + "/checkpoints/details/"+ failedCheckpoint.getCheckpointId(),archive1.getPath());
  compareFailedCheckpoint(failedCheckpoint,mapper.readTree(archive1.getJson()));
  ArchivedJson archive2=iterator.next();
  Assert.assertEquals("/jobs/" + graph.getJobID() + "/checkpoints/details/"+ completedCheckpoint.getCheckpointId(),archive2.getPath());
  compareCompletedCheckpoint(completedCheckpoint,mapper.readTree(archive2.getJson()));
}
