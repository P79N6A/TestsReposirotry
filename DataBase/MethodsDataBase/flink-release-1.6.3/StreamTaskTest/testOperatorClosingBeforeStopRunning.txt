/** 
 * Tests that the StreamTask first closes all of its operators before setting its state to not running (isRunning == false) <p>See FLINK-7430.
 */
@Test public void testOperatorClosingBeforeStopRunning() throws Throwable {
  Configuration taskConfiguration=new Configuration();
  StreamConfig streamConfig=new StreamConfig(taskConfiguration);
  streamConfig.setStreamOperator(new BlockingCloseStreamOperator());
  streamConfig.setOperatorID(new OperatorID());
  try (MockEnvironment mockEnvironment=new MockEnvironmentBuilder().setTaskName("Test Task").setMemorySize(32L * 1024L).setInputSplitProvider(new MockInputSplitProvider()).setBufferSize(1).setTaskConfiguration(taskConfiguration).build()){
    StreamTask<Void,BlockingCloseStreamOperator> streamTask=new NoOpStreamTask<>(mockEnvironment);
    final AtomicReference<Throwable> atomicThrowable=new AtomicReference<>(null);
    CompletableFuture<Void> invokeFuture=CompletableFuture.runAsync(() -> {
      try {
        streamTask.invoke();
      }
 catch (      Exception e) {
        atomicThrowable.set(e);
      }
    }
,TestingUtils.defaultExecutor());
    BlockingCloseStreamOperator.IN_CLOSE.await();
    assertTrue(streamTask.isRunning());
    BlockingCloseStreamOperator.FINISH_CLOSE.trigger();
    invokeFuture.get();
    assertFalse(streamTask.isRunning());
    if (atomicThrowable.get() != null) {
      throw atomicThrowable.get();
    }
  }
 }
