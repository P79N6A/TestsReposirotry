@Test public void testFailingCheckpointStreamOperator() throws Exception {
  final long checkpointId=42L;
  final long timestamp=1L;
  TaskInfo mockTaskInfo=mock(TaskInfo.class);
  when(mockTaskInfo.getTaskNameWithSubtasks()).thenReturn("foobar");
  when(mockTaskInfo.getIndexOfThisSubtask()).thenReturn(0);
  Environment mockEnvironment=new MockEnvironmentBuilder().build();
  StreamTask<?,?> streamTask=new EmptyStreamTask(mockEnvironment);
  CheckpointMetaData checkpointMetaData=new CheckpointMetaData(checkpointId,timestamp);
  StreamOperator<?> streamOperator1=mock(StreamOperator.class);
  StreamOperator<?> streamOperator2=mock(StreamOperator.class);
  StreamOperator<?> streamOperator3=mock(StreamOperator.class);
  OperatorSnapshotFutures operatorSnapshotResult1=mock(OperatorSnapshotFutures.class);
  OperatorSnapshotFutures operatorSnapshotResult2=mock(OperatorSnapshotFutures.class);
  final Exception testException=new Exception("Test exception");
  when(streamOperator1.snapshotState(anyLong(),anyLong(),any(CheckpointOptions.class),any(CheckpointStreamFactory.class))).thenReturn(operatorSnapshotResult1);
  when(streamOperator2.snapshotState(anyLong(),anyLong(),any(CheckpointOptions.class),any(CheckpointStreamFactory.class))).thenReturn(operatorSnapshotResult2);
  when(streamOperator3.snapshotState(anyLong(),anyLong(),any(CheckpointOptions.class),any(CheckpointStreamFactory.class))).thenThrow(testException);
  OperatorID operatorID1=new OperatorID();
  OperatorID operatorID2=new OperatorID();
  OperatorID operatorID3=new OperatorID();
  when(streamOperator1.getOperatorID()).thenReturn(operatorID1);
  when(streamOperator2.getOperatorID()).thenReturn(operatorID2);
  when(streamOperator3.getOperatorID()).thenReturn(operatorID3);
  StreamOperator<?>[] streamOperators={streamOperator1,streamOperator2,streamOperator3};
  OperatorChain<Void,AbstractStreamOperator<Void>> operatorChain=mock(OperatorChain.class);
  when(operatorChain.getAllOperators()).thenReturn(streamOperators);
  Whitebox.setInternalState(streamTask,"isRunning",true);
  Whitebox.setInternalState(streamTask,"lock",new Object());
  Whitebox.setInternalState(streamTask,"operatorChain",operatorChain);
  Whitebox.setInternalState(streamTask,"cancelables",new CloseableRegistry());
  Whitebox.setInternalState(streamTask,"configuration",new StreamConfig(new Configuration()));
  Whitebox.setInternalState(streamTask,"checkpointStorage",new MemoryBackendCheckpointStorage(new JobID(),null,null,Integer.MAX_VALUE));
  CheckpointExceptionHandlerFactory checkpointExceptionHandlerFactory=new CheckpointExceptionHandlerFactory();
  CheckpointExceptionHandler checkpointExceptionHandler=checkpointExceptionHandlerFactory.createCheckpointExceptionHandler(true,mockEnvironment);
  Whitebox.setInternalState(streamTask,"synchronousCheckpointExceptionHandler",checkpointExceptionHandler);
  StreamTask.AsyncCheckpointExceptionHandler asyncCheckpointExceptionHandler=new StreamTask.AsyncCheckpointExceptionHandler(streamTask);
  Whitebox.setInternalState(streamTask,"asynchronousCheckpointExceptionHandler",asyncCheckpointExceptionHandler);
  try {
    streamTask.triggerCheckpoint(checkpointMetaData,CheckpointOptions.forCheckpointWithDefaultLocation());
    fail("Expected test exception here.");
  }
 catch (  Exception e) {
    assertEquals(testException,e.getCause());
  }
  verify(operatorSnapshotResult1).cancel();
  verify(operatorSnapshotResult2).cancel();
}
