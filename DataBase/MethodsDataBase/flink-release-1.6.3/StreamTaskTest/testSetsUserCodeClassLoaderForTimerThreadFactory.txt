/** 
 * Test set user code ClassLoader before calling ProcessingTimeCallback.
 */
@Test public void testSetsUserCodeClassLoaderForTimerThreadFactory() throws Throwable {
  syncLatch=new OneShotLatch();
  try (MockEnvironment mockEnvironment=new MockEnvironmentBuilder().setUserCodeClassLoader(new TestUserCodeClassLoader()).build()){
    TimeServiceTask timerServiceTask=new TimeServiceTask(mockEnvironment);
    CompletableFuture<Void> invokeFuture=CompletableFuture.runAsync(() -> {
      try {
        timerServiceTask.invoke();
      }
 catch (      Exception e) {
        throw new CompletionException(e);
      }
    }
,TestingUtils.defaultExecutor());
    invokeFuture.get();
    assertThat(timerServiceTask.getClassLoaders(),hasSize(greaterThanOrEqualTo(1)));
    assertThat(timerServiceTask.getClassLoaders(),everyItem(instanceOf(TestUserCodeClassLoader.class)));
  }
 }
