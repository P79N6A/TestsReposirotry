/** 
 * Verify that we only ever have one processing-time task registered at the {@link ProcessingTimeService}.
 */
@Test public void testOnlySetsOnePhysicalProcessingTimeTimer() throws Exception {
  @SuppressWarnings("unchecked") Triggerable<Integer,String> mockTriggerable=mock(Triggerable.class);
  TestKeyContext keyContext=new TestKeyContext();
  TestProcessingTimeService processingTimeService=new TestProcessingTimeService();
  PriorityQueueSetFactory priorityQueueSetFactory=new HeapPriorityQueueSetFactory(testKeyGroupRange,maxParallelism,128);
  InternalTimerServiceImpl<Integer,String> timerService=createAndStartInternalTimerService(mockTriggerable,keyContext,processingTimeService,testKeyGroupRange,priorityQueueSetFactory);
  int key=getKeyInKeyGroupRange(testKeyGroupRange,maxParallelism);
  keyContext.setCurrentKey(key);
  timerService.registerProcessingTimeTimer("ciao",10);
  timerService.registerProcessingTimeTimer("ciao",20);
  timerService.registerProcessingTimeTimer("ciao",30);
  timerService.registerProcessingTimeTimer("hello",10);
  timerService.registerProcessingTimeTimer("hello",20);
  assertEquals(5,timerService.numProcessingTimeTimers());
  assertEquals(2,timerService.numProcessingTimeTimers("hello"));
  assertEquals(3,timerService.numProcessingTimeTimers("ciao"));
  assertEquals(1,processingTimeService.getNumActiveTimers());
  assertThat(processingTimeService.getActiveTimerTimestamps(),containsInAnyOrder(10L));
  processingTimeService.setCurrentTime(10);
  assertEquals(3,timerService.numProcessingTimeTimers());
  assertEquals(1,timerService.numProcessingTimeTimers("hello"));
  assertEquals(2,timerService.numProcessingTimeTimers("ciao"));
  assertEquals(1,processingTimeService.getNumActiveTimers());
  assertThat(processingTimeService.getActiveTimerTimestamps(),containsInAnyOrder(20L));
  processingTimeService.setCurrentTime(20);
  assertEquals(1,timerService.numProcessingTimeTimers());
  assertEquals(0,timerService.numProcessingTimeTimers("hello"));
  assertEquals(1,timerService.numProcessingTimeTimers("ciao"));
  assertEquals(1,processingTimeService.getNumActiveTimers());
  assertThat(processingTimeService.getActiveTimerTimestamps(),containsInAnyOrder(30L));
  processingTimeService.setCurrentTime(30);
  assertEquals(0,timerService.numProcessingTimeTimers());
  assertEquals(0,processingTimeService.getNumActiveTimers());
  timerService.registerProcessingTimeTimer("ciao",40);
  assertEquals(1,processingTimeService.getNumActiveTimers());
}
