@Test public void testTimerAssignmentToKeyGroups(){
  int totalNoOfTimers=100;
  int totalNoOfKeyGroups=100;
  int startKeyGroupIdx=0;
  int endKeyGroupIdx=totalNoOfKeyGroups - 1;
  @SuppressWarnings("unchecked") Set<TimerHeapInternalTimer<Integer,String>>[] expectedNonEmptyTimerSets=new HashSet[totalNoOfKeyGroups];
  TestKeyContext keyContext=new TestKeyContext();
  final KeyGroupRange keyGroupRange=new KeyGroupRange(startKeyGroupIdx,endKeyGroupIdx);
  final PriorityQueueSetFactory priorityQueueSetFactory=createQueueFactory(keyGroupRange,totalNoOfKeyGroups);
  InternalTimerServiceImpl<Integer,String> timerService=createInternalTimerService(keyGroupRange,keyContext,new TestProcessingTimeService(),IntSerializer.INSTANCE,StringSerializer.INSTANCE,priorityQueueSetFactory);
  timerService.startTimerService(IntSerializer.INSTANCE,StringSerializer.INSTANCE,mock(Triggerable.class));
  for (int i=0; i < totalNoOfTimers; i++) {
    TimerHeapInternalTimer<Integer,String> timer=new TimerHeapInternalTimer<>(10 + i,i,"hello_world_" + i);
    int keyGroupIdx=KeyGroupRangeAssignment.assignToKeyGroup(timer.getKey(),totalNoOfKeyGroups);
    Set<TimerHeapInternalTimer<Integer,String>> timerSet=expectedNonEmptyTimerSets[keyGroupIdx];
    if (timerSet == null) {
      timerSet=new HashSet<>();
      expectedNonEmptyTimerSets[keyGroupIdx]=timerSet;
    }
    timerSet.add(timer);
    keyContext.setCurrentKey(timer.getKey());
    timerService.registerEventTimeTimer(timer.getNamespace(),timer.getTimestamp());
    timerService.registerProcessingTimeTimer(timer.getNamespace(),timer.getTimestamp());
  }
  List<Set<TimerHeapInternalTimer<Integer,String>>> eventTimeTimers=timerService.getEventTimeTimersPerKeyGroup();
  List<Set<TimerHeapInternalTimer<Integer,String>>> processingTimeTimers=timerService.getProcessingTimeTimersPerKeyGroup();
  for (int i=0; i < expectedNonEmptyTimerSets.length; i++) {
    Set<TimerHeapInternalTimer<Integer,String>> expected=expectedNonEmptyTimerSets[i];
    Set<TimerHeapInternalTimer<Integer,String>> actualEvent=eventTimeTimers.get(i);
    Set<TimerHeapInternalTimer<Integer,String>> actualProcessing=processingTimeTimers.get(i);
    if (expected == null) {
      Assert.assertTrue(actualEvent.isEmpty());
      Assert.assertTrue(actualProcessing.isEmpty());
    }
 else {
      Assert.assertEquals(expected,actualEvent);
      Assert.assertEquals(expected,actualProcessing);
    }
  }
}
