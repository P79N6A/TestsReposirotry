/** 
 * This tests checks whether FlinkKafkaProducer011 correctly aborts lingering transactions after a failure. If such transactions were left alone lingering it consumers would be unable to read committed records that were created after this lingering transaction.
 */
@Test public void testFailBeforeNotifyAndResumeWorkAfterwards() throws Exception {
  String topic="flink-kafka-producer-fail-before-notify";
  OneInputStreamOperatorTestHarness<Integer,Object> testHarness=createTestHarness(topic);
  testHarness.setup();
  testHarness.open();
  testHarness.processElement(42,0);
  testHarness.snapshot(0,1);
  testHarness.processElement(43,2);
  OperatorSubtaskState snapshot1=testHarness.snapshot(1,3);
  testHarness.processElement(44,4);
  testHarness.snapshot(2,5);
  testHarness.processElement(45,6);
  testHarness=createTestHarness(topic);
  testHarness.setup();
  testHarness.initializeState(snapshot1);
  testHarness.open();
  testHarness.processElement(46,7);
  testHarness.snapshot(4,8);
  testHarness.processElement(47,9);
  testHarness.notifyOfCompletedCheckpoint(4);
  assertExactlyOnceForTopic(createProperties(),topic,0,Arrays.asList(42,43,46));
  testHarness.close();
  deleteTestTopic(topic);
}
