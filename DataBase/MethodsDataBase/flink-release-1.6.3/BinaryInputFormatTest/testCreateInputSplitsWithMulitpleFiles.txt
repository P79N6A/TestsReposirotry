@Test public void testCreateInputSplitsWithMulitpleFiles() throws IOException {
  final int blockInfoSize=new BlockInfo().getInfoSize();
  final int blockSize=blockInfoSize + 8;
  final int numBlocks1=3;
  final int numBlocks2=5;
  final File tempFile1=createBinaryInputFile("binary_input_format_test",blockSize,numBlocks1);
  final File tempFile2=createBinaryInputFile("binary_input_format_test_2",blockSize,numBlocks2);
  final String pathFile1=tempFile1.toURI().toString();
  final String pathFile2=tempFile2.toURI().toString();
  final BinaryInputFormat<Record> inputFormat=new MyBinaryInputFormat();
  inputFormat.setFilePaths(pathFile1,pathFile2);
  inputFormat.setBlockSize(blockSize);
  final int numBlocksTotal=numBlocks1 + numBlocks2;
  FileInputSplit[] inputSplits=inputFormat.createInputSplits(numBlocksTotal);
  int numSplitsFile1=0;
  int numSplitsFile2=0;
  Assert.assertEquals("Returns requested numbers of splits.",numBlocksTotal,inputSplits.length);
  for (int i=0; i < inputSplits.length; i++) {
    Assert.assertEquals(String.format("%d. split has block size length.",i),blockSize,inputSplits[i].getLength());
    if (inputSplits[i].getPath().toString().equals(pathFile1)) {
      numSplitsFile1++;
    }
 else     if (inputSplits[i].getPath().toString().equals(pathFile2)) {
      numSplitsFile2++;
    }
 else {
      Assert.fail("Split does not belong to any input file.");
    }
  }
  Assert.assertEquals(numBlocks1,numSplitsFile1);
  Assert.assertEquals(numBlocks2,numSplitsFile2);
}
