/** 
 * This tests that state that was reported to the  {@link org.apache.flink.runtime.state.TaskStateManager} is alsoreported to  {@link org.apache.flink.runtime.taskmanager.CheckpointResponder} and {@link TaskLocalStateStoreImpl}.
 */
@Test public void testReportingFromTaskStateManagerToResponderAndTaskLocalStateStore() throws Exception {
  final JobID jobID=new JobID();
  final AllocationID allocationID=new AllocationID();
  final ExecutionAttemptID executionAttemptID=new ExecutionAttemptID();
  final CheckpointMetaData checkpointMetaData=new CheckpointMetaData(42L,4711L);
  final CheckpointMetrics checkpointMetrics=new CheckpointMetrics();
  final int subtaskIdx=42;
  JobVertexID jobVertexID=new JobVertexID();
  TaskStateSnapshot jmSnapshot=new TaskStateSnapshot();
  TaskStateSnapshot tmSnapshot=new TaskStateSnapshot();
  final AtomicBoolean jmReported=new AtomicBoolean(false);
  final AtomicBoolean tmReported=new AtomicBoolean(false);
  TestCheckpointResponder checkpointResponder=new TestCheckpointResponder(){
    @Override public void acknowledgeCheckpoint(    JobID lJobID,    ExecutionAttemptID lExecutionAttemptID,    long lCheckpointId,    CheckpointMetrics lCheckpointMetrics,    TaskStateSnapshot lSubtaskState){
      Assert.assertEquals(jobID,lJobID);
      Assert.assertEquals(executionAttemptID,lExecutionAttemptID);
      Assert.assertEquals(checkpointMetaData.getCheckpointId(),lCheckpointId);
      Assert.assertEquals(checkpointMetrics,lCheckpointMetrics);
      jmReported.set(true);
    }
  }
;
  Executor executor=Executors.directExecutor();
  LocalRecoveryDirectoryProviderImpl directoryProvider=new LocalRecoveryDirectoryProviderImpl(temporaryFolder.newFolder(),jobID,jobVertexID,subtaskIdx);
  LocalRecoveryConfig localRecoveryConfig=new LocalRecoveryConfig(true,directoryProvider);
  TaskLocalStateStore taskLocalStateStore=new TaskLocalStateStoreImpl(jobID,allocationID,jobVertexID,subtaskIdx,localRecoveryConfig,executor){
    @Override public void storeLocalState(    @Nonnegative long checkpointId,    @Nullable TaskStateSnapshot localState){
      Assert.assertEquals(tmSnapshot,localState);
      tmReported.set(true);
    }
  }
;
  TaskStateManagerImpl taskStateManager=new TaskStateManagerImpl(jobID,executionAttemptID,taskLocalStateStore,null,checkpointResponder);
  taskStateManager.reportTaskStateSnapshots(checkpointMetaData,checkpointMetrics,jmSnapshot,tmSnapshot);
  Assert.assertTrue("Reporting for JM state was not called.",jmReported.get());
  Assert.assertTrue("Reporting for TM state was not called.",tmReported.get());
}
