@Test public void testArchiver() throws Exception {
  JsonArchivist archivist=new CheckpointStatsDetailsSubtasksHandler.CheckpointStatsDetailsSubtasksJsonArchivist();
  ObjectMapper mapper=new ObjectMapper();
  PendingCheckpointStats checkpoint=mock(PendingCheckpointStats.class);
  when(checkpoint.getCheckpointId()).thenReturn(1992139L);
  when(checkpoint.getStatus()).thenReturn(CheckpointStatsStatus.IN_PROGRESS);
  when(checkpoint.getTriggerTimestamp()).thenReturn(0L);
  TaskStateStats task=createTaskStateStats(1237);
  when(checkpoint.getAllTaskStateStats()).thenReturn(Collections.singletonList(task));
  CheckpointStatsHistory history=mock(CheckpointStatsHistory.class);
  when(history.getCheckpoints()).thenReturn(Collections.<AbstractCheckpointStats>singletonList(checkpoint));
  CheckpointStatsSnapshot snapshot=mock(CheckpointStatsSnapshot.class);
  when(snapshot.getHistory()).thenReturn(history);
  AccessExecutionGraph graph=mock(AccessExecutionGraph.class);
  when(graph.getCheckpointStatsSnapshot()).thenReturn(snapshot);
  when(graph.getJobID()).thenReturn(new JobID());
  Collection<ArchivedJson> archives=archivist.archiveJsonWithPath(graph);
  Assert.assertEquals(1,archives.size());
  ArchivedJson archive=archives.iterator().next();
  Assert.assertEquals("/jobs/" + graph.getJobID() + "/checkpoints/details/"+ checkpoint.getCheckpointId()+ "/subtasks/"+ task.getJobVertexId(),archive.getPath());
  JsonNode rootNode=mapper.readTree(archive.getJson());
  assertEquals(checkpoint.getCheckpointId(),rootNode.get("id").asLong());
  assertEquals(checkpoint.getStatus().toString(),rootNode.get("status").asText());
  verifyTaskNode(rootNode,task,checkpoint.getTriggerTimestamp());
}
