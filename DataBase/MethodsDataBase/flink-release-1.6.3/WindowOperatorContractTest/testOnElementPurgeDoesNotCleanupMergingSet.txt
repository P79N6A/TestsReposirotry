@Test public void testOnElementPurgeDoesNotCleanupMergingSet() throws Exception {
  MergingWindowAssigner<Integer,TimeWindow> mockAssigner=mockMergingAssigner();
  Trigger<Integer,TimeWindow> mockTrigger=mockTrigger();
  InternalWindowFunction<Iterable<Integer>,Void,Integer,TimeWindow> mockWindowFunction=mockWindowFunction();
  KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness=createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction);
  testHarness.open();
  when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(0,2)));
  assertEquals(0,testHarness.getOutput().size());
  assertEquals(0,testHarness.numKeyedStateEntries());
  doAnswer(new Answer<TriggerResult>(){
    @Override public TriggerResult answer(    InvocationOnMock invocation) throws Exception {
      return TriggerResult.PURGE;
    }
  }
).when(mockTrigger).onElement(Matchers.<Integer>anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext());
  testHarness.processElement(new StreamRecord<>(0,0L));
  assertEquals(1,testHarness.numKeyedStateEntries());
  assertEquals(1,testHarness.numEventTimeTimers());
  assertEquals(0,testHarness.getOutput().size());
}
