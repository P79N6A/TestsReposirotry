@Test public void testOnElementPurge() throws Exception {
  WindowAssigner<Integer,TimeWindow> mockAssigner=mockTimeWindowAssigner();
  Trigger<Integer,TimeWindow> mockTrigger=mockTrigger();
  InternalWindowFunction<Iterable<Integer>,Void,Integer,TimeWindow> mockWindowFunction=mockWindowFunction();
  KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness=createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction);
  testHarness.open();
  when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(2,4),new TimeWindow(0,2)));
  assertEquals(0,testHarness.getOutput().size());
  assertEquals(0,testHarness.numKeyedStateEntries());
  doAnswer(new Answer<TriggerResult>(){
    @Override public TriggerResult answer(    InvocationOnMock invocation) throws Exception {
      Trigger.TriggerContext context=(Trigger.TriggerContext)invocation.getArguments()[3];
      context.registerEventTimeTimer(0L);
      context.getPartitionedState(valueStateDescriptor).update("hello");
      return TriggerResult.PURGE;
    }
  }
).when(mockTrigger).onElement(Matchers.<Integer>anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext());
  testHarness.processElement(new StreamRecord<>(0,0L));
  verify(mockTrigger,never()).clear(anyTimeWindow(),anyTriggerContext());
  assertEquals(2,testHarness.numKeyedStateEntries());
  assertEquals(4,testHarness.numEventTimeTimers());
  assertEquals(0,testHarness.getOutput().size());
}
