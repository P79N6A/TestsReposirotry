@Test public void testProcessingElementsWithinAllowedLateness() throws Exception {
  WindowAssigner<Integer,TimeWindow> mockAssigner=mockTimeWindowAssigner();
  Trigger<Integer,TimeWindow> mockTrigger=mockTrigger();
  InternalWindowFunction<Iterable<Integer>,Void,Integer,TimeWindow> mockWindowFunction=mockWindowFunction();
  KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness=createWindowOperator(mockAssigner,mockTrigger,20L,mockWindowFunction);
  testHarness.open();
  when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(0,2)));
  assertEquals(0,testHarness.getOutput().size());
  assertEquals(0,testHarness.numKeyedStateEntries());
  shouldFireOnElement(mockTrigger);
  testHarness.processWatermark(new Watermark(20));
  testHarness.processElement(new StreamRecord<>(0,0L));
  verify(mockWindowFunction,times(1)).process(eq(0),eq(new TimeWindow(0,2)),anyInternalWindowContext(),intIterable(0),WindowOperatorContractTest.<Void>anyCollector());
  verify(mockTrigger,never()).clear(anyTimeWindow(),anyTriggerContext());
  assertEquals(1,testHarness.numKeyedStateEntries());
  assertEquals(1,testHarness.numEventTimeTimers());
}
