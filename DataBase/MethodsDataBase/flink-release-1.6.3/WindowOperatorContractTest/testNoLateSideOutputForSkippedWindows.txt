/** 
 * Verify that there is no late-data side output if the  {@code WindowAssigner} doesnot assign any windows.
 */
@Test public void testNoLateSideOutputForSkippedWindows() throws Exception {
  OutputTag<Integer> lateOutputTag=new OutputTag<Integer>("late"){
  }
;
  WindowAssigner<Integer,TimeWindow> mockAssigner=mockTimeWindowAssigner();
  Trigger<Integer,TimeWindow> mockTrigger=mockTrigger();
  InternalWindowFunction<Iterable<Integer>,Void,Integer,TimeWindow> mockWindowFunction=mockWindowFunction();
  OneInputStreamOperatorTestHarness<Integer,Void> testHarness=createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction,lateOutputTag);
  testHarness.open();
  when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Collections.<TimeWindow>emptyList());
  testHarness.processWatermark(0);
  testHarness.processElement(new StreamRecord<>(0,5L));
  verify(mockAssigner,times(1)).assignWindows(eq(0),eq(5L),anyAssignerContext());
  assertTrue(testHarness.getSideOutput(lateOutputTag) == null || testHarness.getSideOutput(lateOutputTag).isEmpty());
}
