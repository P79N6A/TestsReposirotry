@Test public void testWindowsDontInterfere() throws Exception {
  WindowAssigner<Integer,TimeWindow> mockAssigner=mockTimeWindowAssigner();
  Trigger<Integer,TimeWindow> mockTrigger=mockTrigger();
  InternalWindowFunction<Iterable<Integer>,Void,Integer,TimeWindow> mockWindowFunction=mockWindowFunction();
  KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness=createWindowOperator(mockAssigner,mockTrigger,0L,mockWindowFunction);
  testHarness.open();
  when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Collections.singletonList(new TimeWindow(0,2)));
  testHarness.processElement(new StreamRecord<>(0,0L));
  when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Collections.singletonList(new TimeWindow(0,1)));
  testHarness.processElement(new StreamRecord<>(1,0L));
  assertTrue(testHarness.extractOutputStreamRecords().isEmpty());
  assertEquals(2,testHarness.numKeyedStateEntries());
  assertEquals(2,testHarness.numEventTimeTimers());
  shouldFireOnElement(mockTrigger);
  when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Collections.singletonList(new TimeWindow(0,1)));
  testHarness.processElement(new StreamRecord<>(1,0L));
  when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Collections.singletonList(new TimeWindow(0,2)));
  testHarness.processElement(new StreamRecord<>(0,0L));
  verify(mockWindowFunction,times(2)).process(anyInt(),anyTimeWindow(),anyInternalWindowContext(),anyIntIterable(),WindowOperatorContractTest.<Void>anyCollector());
  verify(mockWindowFunction,times(1)).process(eq(0),eq(new TimeWindow(0,2)),anyInternalWindowContext(),intIterable(0,0),WindowOperatorContractTest.<Void>anyCollector());
  verify(mockWindowFunction,times(1)).process(eq(1),eq(new TimeWindow(0,1)),anyInternalWindowContext(),intIterable(1,1),WindowOperatorContractTest.<Void>anyCollector());
}
