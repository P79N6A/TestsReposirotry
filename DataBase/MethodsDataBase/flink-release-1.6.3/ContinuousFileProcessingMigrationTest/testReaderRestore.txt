@Test public void testReaderRestore() throws Exception {
  File testFolder=tempFolder.newFolder();
  final OneShotLatch latch=new OneShotLatch();
  BlockingFileInputFormat format=new BlockingFileInputFormat(latch,new Path(testFolder.getAbsolutePath()));
  TypeInformation<FileInputSplit> typeInfo=TypeExtractor.getInputFormatTypes(format);
  ContinuousFileReaderOperator<FileInputSplit> initReader=new ContinuousFileReaderOperator<>(format);
  initReader.setOutputType(typeInfo,new ExecutionConfig());
  OneInputStreamOperatorTestHarness<TimestampedFileInputSplit,FileInputSplit> testHarness=new OneInputStreamOperatorTestHarness<>(initReader);
  testHarness.setTimeCharacteristic(TimeCharacteristic.EventTime);
  testHarness.setup();
  MigrationTestUtil.restoreFromSnapshot(testHarness,OperatorSnapshotUtil.getResourceFilename("reader-migration-test-flink" + testMigrateVersion + "-snapshot"),testMigrateVersion);
  testHarness.open();
  latch.trigger();
synchronized (testHarness.getCheckpointLock()) {
    testHarness.close();
  }
  TimestampedFileInputSplit split1=new TimestampedFileInputSplit(0,3,new Path("test/test1"),0,100,null);
  TimestampedFileInputSplit split2=new TimestampedFileInputSplit(10,2,new Path("test/test2"),101,200,null);
  TimestampedFileInputSplit split3=new TimestampedFileInputSplit(10,1,new Path("test/test2"),0,100,null);
  TimestampedFileInputSplit split4=new TimestampedFileInputSplit(11,0,new Path("test/test3"),0,100,null);
  Assert.assertTrue(testHarness.getOutput().contains(new StreamRecord<>(split1)));
  Assert.assertTrue(testHarness.getOutput().contains(new StreamRecord<>(split2)));
  Assert.assertTrue(testHarness.getOutput().contains(new StreamRecord<>(split3)));
  Assert.assertTrue(testHarness.getOutput().contains(new StreamRecord<>(split4)));
}
