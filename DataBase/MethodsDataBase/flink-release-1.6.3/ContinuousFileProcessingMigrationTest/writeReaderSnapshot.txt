/** 
 * Manually run this to write binary snapshot data. Remove @Ignore to run.
 */
@Ignore @Test public void writeReaderSnapshot() throws Exception {
  File testFolder=tempFolder.newFolder();
  TimestampedFileInputSplit split1=new TimestampedFileInputSplit(0,3,new Path("test/test1"),0,100,null);
  TimestampedFileInputSplit split2=new TimestampedFileInputSplit(10,2,new Path("test/test2"),101,200,null);
  TimestampedFileInputSplit split3=new TimestampedFileInputSplit(10,1,new Path("test/test2"),0,100,null);
  TimestampedFileInputSplit split4=new TimestampedFileInputSplit(11,0,new Path("test/test3"),0,100,null);
  final OneShotLatch blockingLatch=new OneShotLatch();
  BlockingFileInputFormat format=new BlockingFileInputFormat(blockingLatch,new Path(testFolder.getAbsolutePath()));
  TypeInformation<FileInputSplit> typeInfo=TypeExtractor.getInputFormatTypes(format);
  ContinuousFileReaderOperator<FileInputSplit> initReader=new ContinuousFileReaderOperator<>(format);
  initReader.setOutputType(typeInfo,new ExecutionConfig());
  OneInputStreamOperatorTestHarness<TimestampedFileInputSplit,FileInputSplit> testHarness=new OneInputStreamOperatorTestHarness<>(initReader);
  testHarness.setTimeCharacteristic(TimeCharacteristic.EventTime);
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(split1));
  testHarness.processElement(new StreamRecord<>(split2));
  testHarness.processElement(new StreamRecord<>(split3));
  testHarness.processElement(new StreamRecord<>(split4));
  final OperatorSubtaskState snapshot;
synchronized (testHarness.getCheckpointLock()) {
    snapshot=testHarness.snapshot(0L,0L);
  }
  OperatorSnapshotUtil.writeStateHandle(snapshot,"src/test/resources/reader-migration-test-flink" + flinkGenerateSavepointVersion + "-snapshot");
}
