@Test public void testSerializationRoundTrip() throws IOException {
  final SimpleVersionedSerializer<String> utfEncoder=new SimpleVersionedSerializer<String>(){
    private static final int VERSION=Integer.MAX_VALUE / 2;
    @Override public int getVersion(){
      return VERSION;
    }
    @Override public byte[] serialize(    String str) throws IOException {
      return str.getBytes(StandardCharsets.UTF_8);
    }
    @Override public String deserialize(    int version,    byte[] serialized) throws IOException {
      assertEquals(VERSION,version);
      return new String(serialized,StandardCharsets.UTF_8);
    }
  }
;
  final String testString="dugfakgs";
  final DataOutputSerializer out=new DataOutputSerializer(32);
  SimpleVersionedSerialization.writeVersionAndSerialize(utfEncoder,testString,out);
  final byte[] outBytes=out.getCopyOfBuffer();
  final byte[] bytes=SimpleVersionedSerialization.writeVersionAndSerialize(utfEncoder,testString);
  assertArrayEquals(bytes,outBytes);
  final DataInputDeserializer in=new DataInputDeserializer(bytes);
  final String deserialized=SimpleVersionedSerialization.readVersionAndDeSerialize(utfEncoder,in);
  final String deserializedFromBytes=SimpleVersionedSerialization.readVersionAndDeSerialize(utfEncoder,outBytes);
  assertEquals(testString,deserialized);
  assertEquals(testString,deserializedFromBytes);
}
