@Test public void testSerializeEmpty() throws IOException {
  final String testString="beeeep!";
  SimpleVersionedSerializer<String> emptySerializer=new SimpleVersionedSerializer<String>(){
    @Override public int getVersion(){
      return 42;
    }
    @Override public byte[] serialize(    String obj) throws IOException {
      return new byte[0];
    }
    @Override public String deserialize(    int version,    byte[] serialized) throws IOException {
      assertEquals(42,version);
      assertEquals(0,serialized.length);
      return testString;
    }
  }
;
  final DataOutputSerializer out=new DataOutputSerializer(32);
  SimpleVersionedSerialization.writeVersionAndSerialize(emptySerializer,"abc",out);
  final byte[] outBytes=out.getCopyOfBuffer();
  final byte[] bytes=SimpleVersionedSerialization.writeVersionAndSerialize(emptySerializer,"abc");
  assertArrayEquals(bytes,outBytes);
  final DataInputDeserializer in=new DataInputDeserializer(bytes);
  final String deserialized=SimpleVersionedSerialization.readVersionAndDeSerialize(emptySerializer,in);
  final String deserializedFromBytes=SimpleVersionedSerialization.readVersionAndDeSerialize(emptySerializer,outBytes);
  assertEquals(testString,deserialized);
  assertEquals(testString,deserializedFromBytes);
}
