/** 
 * Test receive registration with unmatched leadershipId from job master
 */
@Test public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {
  String jobMasterAddress="/jobMasterAddress1";
  JobID jobID=mockJobMaster(jobMasterAddress);
  TestingLeaderElectionService resourceManagerLeaderElectionService=new TestingLeaderElectionService();
  SettableLeaderRetrievalService jobMasterLeaderRetrievalService=new SettableLeaderRetrievalService("localhost",HighAvailabilityServices.DEFAULT_LEADER_ID);
  TestingFatalErrorHandler testingFatalErrorHandler=new TestingFatalErrorHandler();
  final ResourceManager<?> resourceManager=createAndStartResourceManager(resourceManagerLeaderElectionService,jobID,jobMasterLeaderRetrievalService,testingFatalErrorHandler);
  final ResourceManagerGateway rmGateway=resourceManager.getSelfGateway(ResourceManagerGateway.class);
  final ResourceID jmResourceId=new ResourceID(jobMasterAddress);
  resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get();
  JobMasterId differentJobMasterId=JobMasterId.generate();
  CompletableFuture<RegistrationResponse> unMatchedLeaderFuture=rmGateway.registerJobManager(differentJobMasterId,jmResourceId,jobMasterAddress,jobID,timeout);
  assertTrue(unMatchedLeaderFuture.get(5,TimeUnit.SECONDS) instanceof RegistrationResponse.Decline);
  if (testingFatalErrorHandler.hasExceptionOccurred()) {
    testingFatalErrorHandler.rethrowError();
  }
}
