/** 
 * Test receive normal registration from job master and receive duplicate registration from job master
 */
@Test public void testRegisterJobMaster() throws Exception {
  String jobMasterAddress="/jobMasterAddress1";
  JobID jobID=mockJobMaster(jobMasterAddress);
  JobMasterId jobMasterId=JobMasterId.generate();
  final ResourceID jmResourceId=new ResourceID(jobMasterAddress);
  SettableLeaderRetrievalService jobMasterLeaderRetrievalService=new SettableLeaderRetrievalService(jobMasterAddress,jobMasterId.toUUID());
  TestingLeaderElectionService resourceManagerLeaderElectionService=new TestingLeaderElectionService();
  TestingFatalErrorHandler testingFatalErrorHandler=new TestingFatalErrorHandler();
  final ResourceManager<?> resourceManager=createAndStartResourceManager(resourceManagerLeaderElectionService,jobID,jobMasterLeaderRetrievalService,testingFatalErrorHandler);
  final ResourceManagerGateway rmGateway=resourceManager.getSelfGateway(ResourceManagerGateway.class);
  resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get();
  CompletableFuture<RegistrationResponse> successfulFuture=rmGateway.registerJobManager(jobMasterId,jmResourceId,jobMasterAddress,jobID,timeout);
  RegistrationResponse response=successfulFuture.get(timeout.toMilliseconds(),TimeUnit.MILLISECONDS);
  assertTrue(response instanceof JobMasterRegistrationSuccess);
  if (testingFatalErrorHandler.hasExceptionOccurred()) {
    testingFatalErrorHandler.rethrowError();
  }
}
