/** 
 * Verifies that  {@link ExecutionGraph#updateState(TaskExecutionState)} updates the accumulators and metrics for anexecution that failed or was canceled.
 */
@Test public void testAccumulatorsAndMetricsForwarding() throws Exception {
  final JobVertexID jid1=new JobVertexID();
  final JobVertexID jid2=new JobVertexID();
  JobVertex v1=new JobVertex("v1",jid1);
  JobVertex v2=new JobVertex("v2",jid2);
  Tuple2<ExecutionGraph,Map<ExecutionAttemptID,Execution>> graphAndExecutions=setupExecution(v1,1,v2,1);
  ExecutionGraph graph=graphAndExecutions.f0;
  Execution execution1=graphAndExecutions.f1.values().iterator().next();
  IOMetrics ioMetrics=new IOMetrics(0,0,0,0,0,0.0,0.0,0.0,0.0,0.0);
  Map<String,Accumulator<?,?>> accumulators=new HashMap<>();
  accumulators.put("acc",new IntCounter(4));
  AccumulatorSnapshot accumulatorSnapshot=new AccumulatorSnapshot(graph.getJobID(),execution1.getAttemptId(),accumulators);
  TaskExecutionState state=new TaskExecutionState(graph.getJobID(),execution1.getAttemptId(),ExecutionState.CANCELED,null,accumulatorSnapshot,ioMetrics);
  graph.updateState(state);
  assertEquals(ioMetrics,execution1.getIOMetrics());
  assertNotNull(execution1.getUserAccumulators());
  assertEquals(4,execution1.getUserAccumulators().get("acc").getLocalValue());
  Execution execution2=graphAndExecutions.f1.values().iterator().next();
  IOMetrics ioMetrics2=new IOMetrics(0,0,0,0,0,0.0,0.0,0.0,0.0,0.0);
  Map<String,Accumulator<?,?>> accumulators2=new HashMap<>();
  accumulators2.put("acc",new IntCounter(8));
  AccumulatorSnapshot accumulatorSnapshot2=new AccumulatorSnapshot(graph.getJobID(),execution2.getAttemptId(),accumulators2);
  TaskExecutionState state2=new TaskExecutionState(graph.getJobID(),execution2.getAttemptId(),ExecutionState.FAILED,null,accumulatorSnapshot2,ioMetrics2);
  graph.updateState(state2);
  assertEquals(ioMetrics2,execution2.getIOMetrics());
  assertNotNull(execution2.getUserAccumulators());
  assertEquals(8,execution2.getUserAccumulators().get("acc").getLocalValue());
}
