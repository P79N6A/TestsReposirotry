/** 
 * Tests that on restore the task state is reset for each stateful task.
 */
@Test public void testSetState(){
  try {
    KeyGroupRange keyGroupRange=KeyGroupRange.of(0,0);
    List<SerializableObject> testStates=Collections.singletonList(new SerializableObject());
    final KeyedStateHandle serializedKeyGroupStates=CheckpointCoordinatorTest.generateKeyGroupState(keyGroupRange,testStates);
    final JobID jid=new JobID();
    final JobVertexID statefulId=new JobVertexID();
    final JobVertexID statelessId=new JobVertexID();
    Execution statefulExec1=mockExecution();
    Execution statefulExec2=mockExecution();
    Execution statefulExec3=mockExecution();
    Execution statelessExec1=mockExecution();
    Execution statelessExec2=mockExecution();
    ExecutionVertex stateful1=mockExecutionVertex(statefulExec1,statefulId,0,3);
    ExecutionVertex stateful2=mockExecutionVertex(statefulExec2,statefulId,1,3);
    ExecutionVertex stateful3=mockExecutionVertex(statefulExec3,statefulId,2,3);
    ExecutionVertex stateless1=mockExecutionVertex(statelessExec1,statelessId,0,2);
    ExecutionVertex stateless2=mockExecutionVertex(statelessExec2,statelessId,1,2);
    ExecutionJobVertex stateful=mockExecutionJobVertex(statefulId,new ExecutionVertex[]{stateful1,stateful2,stateful3});
    ExecutionJobVertex stateless=mockExecutionJobVertex(statelessId,new ExecutionVertex[]{stateless1,stateless2});
    Map<JobVertexID,ExecutionJobVertex> map=new HashMap<JobVertexID,ExecutionJobVertex>();
    map.put(statefulId,stateful);
    map.put(statelessId,stateless);
    CheckpointCoordinator coord=new CheckpointCoordinator(jid,200000L,200000L,0,Integer.MAX_VALUE,CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,new ExecutionVertex[]{stateful1,stateful2,stateful3,stateless1,stateless2},new ExecutionVertex[]{stateful1,stateful2,stateful3,stateless1,stateless2},new ExecutionVertex[0],new StandaloneCheckpointIDCounter(),new StandaloneCompletedCheckpointStore(1),new MemoryStateBackend(),Executors.directExecutor(),SharedStateRegistry.DEFAULT_FACTORY);
    final long timestamp=34623786L;
    coord.triggerCheckpoint(timestamp,false);
    PendingCheckpoint pending=coord.getPendingCheckpoints().values().iterator().next();
    final long checkpointId=pending.getCheckpointId();
    final TaskStateSnapshot subtaskStates=new TaskStateSnapshot();
    subtaskStates.putSubtaskStateByOperatorID(OperatorID.fromJobVertexID(statefulId),new OperatorSubtaskState(StateObjectCollection.empty(),StateObjectCollection.empty(),StateObjectCollection.singleton(serializedKeyGroupStates),StateObjectCollection.empty()));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,statefulExec1.getAttemptId(),checkpointId,new CheckpointMetrics(),subtaskStates));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,statefulExec2.getAttemptId(),checkpointId,new CheckpointMetrics(),subtaskStates));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,statefulExec3.getAttemptId(),checkpointId,new CheckpointMetrics(),subtaskStates));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,statelessExec1.getAttemptId(),checkpointId));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,statelessExec2.getAttemptId(),checkpointId));
    assertEquals(1,coord.getNumberOfRetainedSuccessfulCheckpoints());
    assertEquals(0,coord.getNumberOfPendingCheckpoints());
    coord.restoreLatestCheckpointedState(map,true,false);
    BaseMatcher<JobManagerTaskRestore> matcher=new BaseMatcher<JobManagerTaskRestore>(){
      @Override public boolean matches(      Object o){
        if (o instanceof JobManagerTaskRestore) {
          JobManagerTaskRestore taskRestore=(JobManagerTaskRestore)o;
          return Objects.equals(taskRestore.getTaskStateSnapshot(),subtaskStates);
        }
        return false;
      }
      @Override public void describeTo(      Description description){
        description.appendValue(subtaskStates);
      }
    }
;
    verify(statefulExec1,times(1)).setInitialState(Mockito.argThat(matcher));
    verify(statefulExec2,times(1)).setInitialState(Mockito.argThat(matcher));
    verify(statefulExec3,times(1)).setInitialState(Mockito.argThat(matcher));
    verify(statelessExec1,times(0)).setInitialState(Mockito.<JobManagerTaskRestore>any());
    verify(statelessExec2,times(0)).setInitialState(Mockito.<JobManagerTaskRestore>any());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
