@Test public void testRestoreFromSnapshot() throws Exception {
  int lowerBound=-1;
  boolean lowerBoundInclusive=true;
  int upperBound=1;
  boolean upperBoundInclusive=true;
  OperatorSubtaskState handles;
  List<StreamRecord<Tuple2<TestElem,TestElem>>> expectedOutput;
  try (TestHarness testHarness=createTestHarness(lowerBound,lowerBoundInclusive,upperBound,upperBoundInclusive)){
    testHarness.setup();
    testHarness.open();
    testHarness.processElement1(createStreamRecord(1,"lhs"));
    testHarness.processWatermark1(new Watermark(1));
    testHarness.processElement2(createStreamRecord(1,"rhs"));
    testHarness.processWatermark2(new Watermark(1));
    testHarness.processElement1(createStreamRecord(2,"lhs"));
    testHarness.processWatermark1(new Watermark(2));
    testHarness.processElement2(createStreamRecord(2,"rhs"));
    testHarness.processWatermark2(new Watermark(2));
    testHarness.processElement1(createStreamRecord(3,"lhs"));
    testHarness.processWatermark1(new Watermark(3));
    testHarness.processElement2(createStreamRecord(3,"rhs"));
    testHarness.processWatermark2(new Watermark(3));
    handles=testHarness.snapshot(0,0);
    testHarness.close();
    expectedOutput=Lists.newArrayList(streamRecordOf(1,1),streamRecordOf(1,2),streamRecordOf(2,1),streamRecordOf(2,2),streamRecordOf(2,3),streamRecordOf(3,2),streamRecordOf(3,3));
    TestHarnessUtil.assertNoLateRecords(testHarness.getOutput());
    assertOutput(expectedOutput,testHarness.getOutput());
  }
   try (TestHarness newTestHarness=createTestHarness(lowerBound,lowerBoundInclusive,upperBound,upperBoundInclusive)){
    newTestHarness.setup();
    newTestHarness.initializeState(handles);
    newTestHarness.open();
    newTestHarness.processElement1(createStreamRecord(4,"lhs"));
    newTestHarness.processWatermark1(new Watermark(4));
    newTestHarness.processElement2(createStreamRecord(4,"rhs"));
    newTestHarness.processWatermark2(new Watermark(4));
    expectedOutput=Lists.newArrayList(streamRecordOf(3,4),streamRecordOf(4,3),streamRecordOf(4,4));
    TestHarnessUtil.assertNoLateRecords(newTestHarness.getOutput());
    assertOutput(expectedOutput,newTestHarness.getOutput());
  }
 }
