/** 
 * Test that all writes are duplicated to both streams and that the state reflects what was written.
 */
@Test public void testDuplicatedWrite() throws Exception {
  int streamCapacity=1024 * 1024;
  TestMemoryCheckpointOutputStream primaryStream=new TestMemoryCheckpointOutputStream(streamCapacity);
  TestMemoryCheckpointOutputStream secondaryStream=new TestMemoryCheckpointOutputStream(streamCapacity);
  TestMemoryCheckpointOutputStream referenceStream=new TestMemoryCheckpointOutputStream(streamCapacity);
  DuplicatingCheckpointOutputStream duplicatingStream=new DuplicatingCheckpointOutputStream(primaryStream,secondaryStream,64);
  Random random=new Random(42);
  for (int i=0; i < 500; ++i) {
    int choice=random.nextInt(3);
    if (choice == 0) {
      int val=random.nextInt();
      referenceStream.write(val);
      duplicatingStream.write(val);
    }
 else {
      byte[] bytes=new byte[random.nextInt(128)];
      random.nextBytes(bytes);
      if (choice == 1) {
        referenceStream.write(bytes);
        duplicatingStream.write(bytes);
      }
 else {
        int off=bytes.length > 0 ? random.nextInt(bytes.length) : 0;
        int len=bytes.length > 0 ? random.nextInt(bytes.length - off) : 0;
        referenceStream.write(bytes,off,len);
        duplicatingStream.write(bytes,off,len);
      }
    }
    Assert.assertEquals(referenceStream.getPos(),duplicatingStream.getPos());
  }
  StreamStateHandle refStateHandle=referenceStream.closeAndGetHandle();
  StreamStateHandle primaryStateHandle=duplicatingStream.closeAndGetPrimaryHandle();
  StreamStateHandle secondaryStateHandle=duplicatingStream.closeAndGetSecondaryHandle();
  Assert.assertTrue(CommonTestUtils.isSteamContentEqual(refStateHandle.openInputStream(),primaryStateHandle.openInputStream()));
  Assert.assertTrue(CommonTestUtils.isSteamContentEqual(refStateHandle.openInputStream(),secondaryStateHandle.openInputStream()));
  refStateHandle.discardState();
  primaryStateHandle.discardState();
  secondaryStateHandle.discardState();
}
