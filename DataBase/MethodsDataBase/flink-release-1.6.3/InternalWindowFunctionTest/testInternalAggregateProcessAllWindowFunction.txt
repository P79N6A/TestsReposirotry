@SuppressWarnings("unchecked") @Test public void testInternalAggregateProcessAllWindowFunction() throws Exception {
  AggregateProcessAllWindowFunctionMock mock=mock(AggregateProcessAllWindowFunctionMock.class);
  InternalAggregateProcessAllWindowFunction<Long,Set<Long>,Map<Long,Long>,String,TimeWindow> windowFunction=new InternalAggregateProcessAllWindowFunction<>(new AggregateFunction<Long,Set<Long>,Map<Long,Long>>(){
    private static final long serialVersionUID=1L;
    @Override public Set<Long> createAccumulator(){
      return new HashSet<>();
    }
    @Override public Set<Long> add(    Long value,    Set<Long> accumulator){
      accumulator.add(value);
      return accumulator;
    }
    @Override public Map<Long,Long> getResult(    Set<Long> accumulator){
      Map<Long,Long> result=new HashMap<>();
      for (      Long in : accumulator) {
        result.put(in,in);
      }
      return result;
    }
    @Override public Set<Long> merge(    Set<Long> a,    Set<Long> b){
      a.addAll(b);
      return a;
    }
  }
,mock);
  TypeInformation<String> stringType=BasicTypeInfo.STRING_TYPE_INFO;
  ExecutionConfig execConf=new ExecutionConfig();
  execConf.setParallelism(42);
  StreamingFunctionUtils.setOutputType(windowFunction,stringType,execConf);
  verify(mock).setOutputType(stringType,execConf);
  Configuration config=new Configuration();
  windowFunction.open(config);
  verify(mock).open(config);
  RuntimeContext rCtx=mock(RuntimeContext.class);
  windowFunction.setRuntimeContext(rCtx);
  verify(mock).setRuntimeContext(rCtx);
  TimeWindow w=mock(TimeWindow.class);
  Collector<String> c=(Collector<String>)mock(Collector.class);
  List<Long> args=new LinkedList<>();
  args.add(23L);
  args.add(24L);
  InternalWindowFunction.InternalWindowContext ctx=mock(InternalWindowFunction.InternalWindowContext.class);
  windowFunction.process(((byte)0),w,ctx,args,c);
  verify(mock).process((AggregateProcessAllWindowFunctionMock.Context)anyObject(),(Iterable)argThat(containsInAnyOrder(allOf(hasEntry(is(23L),is(23L)),hasEntry(is(24L),is(24L))))),eq(c));
  windowFunction.close();
  verify(mock).close();
}
