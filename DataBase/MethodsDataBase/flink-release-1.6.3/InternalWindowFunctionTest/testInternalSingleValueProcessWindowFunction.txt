@SuppressWarnings("unchecked") @Test public void testInternalSingleValueProcessWindowFunction() throws Exception {
  ProcessWindowFunctionMock mock=mock(ProcessWindowFunctionMock.class);
  InternalSingleValueProcessWindowFunction<Long,String,Long,TimeWindow> windowFunction=new InternalSingleValueProcessWindowFunction<>(mock);
  TypeInformation<String> stringType=BasicTypeInfo.STRING_TYPE_INFO;
  ExecutionConfig execConf=new ExecutionConfig();
  execConf.setParallelism(42);
  StreamingFunctionUtils.setOutputType(windowFunction,stringType,execConf);
  verify(mock).setOutputType(stringType,execConf);
  Configuration config=new Configuration();
  windowFunction.open(config);
  verify(mock).open(config);
  RuntimeContext rCtx=mock(RuntimeContext.class);
  windowFunction.setRuntimeContext(rCtx);
  verify(mock).setRuntimeContext(rCtx);
  TimeWindow w=mock(TimeWindow.class);
  Collector<String> c=(Collector<String>)mock(Collector.class);
  InternalWindowFunction.InternalWindowContext ctx=mock(InternalWindowFunction.InternalWindowContext.class);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      ProcessWindowFunctionMock.Context c=(ProcessWindowFunction.Context)invocationOnMock.getArguments()[1];
      c.currentProcessingTime();
      c.currentWatermark();
      c.windowState();
      c.globalState();
      return null;
    }
  }
).when(mock).process(eq(42L),(ProcessWindowFunctionMock.Context)anyObject(),(Iterable<Long>)argThat(IsIterableContainingInOrder.contains(23L)),eq(c));
  windowFunction.process(42L,w,ctx,23L,c);
  verify(ctx).currentProcessingTime();
  verify(ctx).currentWatermark();
  verify(ctx).windowState();
  verify(ctx).globalState();
  windowFunction.close();
  verify(mock).close();
}
