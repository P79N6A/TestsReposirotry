/** 
 * Test the iteration over the keyed state on the broadcast side. 
 */
@Test public void testAccessToKeyedStateIt() throws Exception {
  final List<String> test1content=new ArrayList<>();
  test1content.add("test1");
  test1content.add("test1");
  final List<String> test2content=new ArrayList<>();
  test2content.add("test2");
  test2content.add("test2");
  test2content.add("test2");
  test2content.add("test2");
  final List<String> test3content=new ArrayList<>();
  test3content.add("test3");
  test3content.add("test3");
  test3content.add("test3");
  final Map<String,List<String>> expectedState=new HashMap<>();
  expectedState.put("test1",test1content);
  expectedState.put("test2",test2content);
  expectedState.put("test3",test3content);
  try (TwoInputStreamOperatorTestHarness<String,Integer,String> testHarness=getInitializedTestHarness(BasicTypeInfo.STRING_TYPE_INFO,new IdentityKeySelector<>(),new StatefulFunctionWithKeyedStateAccessedOnBroadcast(expectedState))){
    testHarness.processElement1(new StreamRecord<>("test1",12L));
    testHarness.processElement1(new StreamRecord<>("test1",12L));
    testHarness.processElement1(new StreamRecord<>("test2",13L));
    testHarness.processElement1(new StreamRecord<>("test2",13L));
    testHarness.processElement1(new StreamRecord<>("test2",13L));
    testHarness.processElement1(new StreamRecord<>("test3",14L));
    testHarness.processElement1(new StreamRecord<>("test3",14L));
    testHarness.processElement1(new StreamRecord<>("test3",14L));
    testHarness.processElement1(new StreamRecord<>("test2",13L));
    testHarness.processElement2(new StreamRecord<>(1,13L));
  }
 }
