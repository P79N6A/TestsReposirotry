@Test public void testKeyQuerying() throws Exception {
class KeyQueryingProcessFunction extends KeyedBroadcastProcessFunction<Integer,Tuple2<Integer,String>,String,String> {
    @Override public void processElement(    Tuple2<Integer,String> value,    ReadOnlyContext ctx,    Collector<String> out) throws Exception {
      assertTrue("Did not get expected key.",ctx.getCurrentKey().equals(value.f0));
      out.collect(value.f1);
    }
    @Override public void processBroadcastElement(    String value,    Context ctx,    Collector<String> out) throws Exception {
    }
  }
  CoBroadcastWithKeyedOperator<Integer,Tuple2<Integer,String>,String,String> operator=new CoBroadcastWithKeyedOperator<>(new KeyQueryingProcessFunction(),Collections.emptyList());
  try (TwoInputStreamOperatorTestHarness<Tuple2<Integer,String>,String,String> testHarness=new KeyedTwoInputStreamOperatorTestHarness<>(operator,(in) -> in.f0,null,BasicTypeInfo.INT_TYPE_INFO)){
    testHarness.setup();
    testHarness.open();
    testHarness.processElement1(new StreamRecord<>(Tuple2.of(5,"5"),12L));
    testHarness.processElement1(new StreamRecord<>(Tuple2.of(42,"42"),13L));
    ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
    expectedOutput.add(new StreamRecord<>("5",12L));
    expectedOutput.add(new StreamRecord<>("42",13L));
    TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  }
 }
