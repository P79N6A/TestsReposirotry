@Test public void testFunctionWithBroadcastState() throws Exception {
  final Map<String,Integer> expectedBroadcastState=new HashMap<>();
  expectedBroadcastState.put("5.key",5);
  expectedBroadcastState.put("34.key",34);
  expectedBroadcastState.put("53.key",53);
  expectedBroadcastState.put("12.key",12);
  expectedBroadcastState.put("98.key",98);
  final String expectedKey="trigger";
  try (TwoInputStreamOperatorTestHarness<String,Integer,String> testHarness=getInitializedTestHarness(BasicTypeInfo.STRING_TYPE_INFO,new IdentityKeySelector<>(),new FunctionWithBroadcastState("key",expectedBroadcastState,41L,expectedKey))){
    testHarness.processWatermark1(new Watermark(10L));
    testHarness.processWatermark2(new Watermark(10L));
    testHarness.processElement2(new StreamRecord<>(5,10L));
    testHarness.processElement2(new StreamRecord<>(34,12L));
    testHarness.processElement2(new StreamRecord<>(53,15L));
    testHarness.processElement2(new StreamRecord<>(12,16L));
    testHarness.processElement2(new StreamRecord<>(98,19L));
    testHarness.processElement1(new StreamRecord<>(expectedKey,13L));
    testHarness.processElement2(new StreamRecord<>(51,21L));
    testHarness.processWatermark1(new Watermark(50L));
    testHarness.processWatermark2(new Watermark(50L));
    Queue<Object> output=testHarness.getOutput();
    assertEquals(3L,output.size());
    Object firstRawWm=output.poll();
    assertTrue(firstRawWm instanceof Watermark);
    Watermark firstWm=(Watermark)firstRawWm;
    assertEquals(10L,firstWm.getTimestamp());
    Object rawOutputElem=output.poll();
    assertTrue(rawOutputElem instanceof StreamRecord);
    StreamRecord<?> outputRec=(StreamRecord<?>)rawOutputElem;
    assertTrue(outputRec.getValue() instanceof String);
    String outputElem=(String)outputRec.getValue();
    expectedBroadcastState.put("51.key",51);
    List<Map.Entry<String,Integer>> expectedEntries=new ArrayList<>();
    expectedEntries.addAll(expectedBroadcastState.entrySet());
    String expected="TS:41 " + mapToString(expectedEntries);
    assertEquals(expected,outputElem);
    Object secondRawWm=output.poll();
    assertTrue(secondRawWm instanceof Watermark);
    Watermark secondWm=(Watermark)secondRawWm;
    assertEquals(50L,secondWm.getTimestamp());
  }
 }
