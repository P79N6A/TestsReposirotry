/** 
 * Tests that slot requests time out after the specified request timeout. If a slot request times out, then the request is cancelled, removed from the slot manager and the resource manager is notified about the failed allocation.
 */
@Test public void testSlotRequestTimeout() throws Exception {
  final long allocationTimeout=50L;
  final ResourceActions resourceManagerActions=mock(ResourceActions.class);
  final ResourceManagerId resourceManagerId=ResourceManagerId.generate();
  final JobID jobId=new JobID();
  final AllocationID allocationId=new AllocationID();
  final ResourceProfile resourceProfile=new ResourceProfile(1.0,1);
  final SlotRequest slotRequest=new SlotRequest(jobId,allocationId,resourceProfile,"foobar");
  final Executor mainThreadExecutor=TestingUtils.defaultExecutor();
  try (SlotManager slotManager=new SlotManager(TestingUtils.defaultScheduledExecutor(),TestingUtils.infiniteTime(),Time.milliseconds(allocationTimeout),TestingUtils.infiniteTime())){
    slotManager.start(resourceManagerId,mainThreadExecutor,resourceManagerActions);
    final AtomicReference<Exception> atomicException=new AtomicReference<>(null);
    mainThreadExecutor.execute(new Runnable(){
      @Override public void run(){
        try {
          assertTrue(slotManager.registerSlotRequest(slotRequest));
        }
 catch (        Exception e) {
          atomicException.compareAndSet(null,e);
        }
      }
    }
);
    verify(resourceManagerActions,timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(eq(jobId),eq(allocationId),any(TimeoutException.class));
    if (atomicException.get() != null) {
      throw atomicException.get();
    }
  }
 }
