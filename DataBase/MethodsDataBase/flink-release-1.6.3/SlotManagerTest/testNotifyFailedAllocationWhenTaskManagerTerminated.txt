/** 
 * Tests notify the job manager of the allocations when the task manager is failed/killed.
 */
@Test public void testNotifyFailedAllocationWhenTaskManagerTerminated() throws Exception {
  final Queue<Tuple2<JobID,AllocationID>> allocationFailures=new ArrayDeque<>(5);
  final TestingResourceActions resourceManagerActions=new TestingResourceActionsBuilder().setNotifyAllocationFailureConsumer((  Tuple3<JobID,AllocationID,Exception> failureMessage) -> allocationFailures.offer(Tuple2.of(failureMessage.f0,failureMessage.f1))).createTestingResourceActions();
  try (final SlotManager slotManager=createSlotManager(ResourceManagerId.generate(),resourceManagerActions)){
    JobID jobId1=new JobID();
    final SlotRequest slotRequest11=createSlotRequest(jobId1);
    final SlotRequest slotRequest12=createSlotRequest(jobId1);
    slotManager.registerSlotRequest(slotRequest11);
    slotManager.registerSlotRequest(slotRequest12);
    final ResourceID taskExecutorResourceId1=ResourceID.generate();
    final TestingTaskExecutorGateway testingTaskExecutorGateway1=new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway();
    final TaskExecutorConnection taskExecutionConnection1=new TaskExecutorConnection(taskExecutorResourceId1,testingTaskExecutorGateway1);
    final SlotReport slotReport1=createSlotReport(taskExecutorResourceId1,2);
    slotManager.registerTaskManager(taskExecutionConnection1,slotReport1);
    JobID jobId2=new JobID();
    final SlotRequest slotRequest21=createSlotRequest(jobId2);
    final SlotRequest slotRequest22=createSlotRequest(jobId2);
    slotManager.registerSlotRequest(slotRequest21);
    slotManager.registerSlotRequest(slotRequest22);
    JobID jobId3=new JobID();
    final SlotRequest slotRequest31=createSlotRequest(jobId3);
    slotManager.registerSlotRequest(slotRequest31);
    final ResourceID taskExecutorResourceId2=ResourceID.generate();
    final TestingTaskExecutorGateway testingTaskExecutorGateway2=new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway();
    final TaskExecutorConnection taskExecutionConnection2=new TaskExecutorConnection(taskExecutorResourceId2,testingTaskExecutorGateway2);
    final SlotReport slotReport2=createSlotReport(taskExecutorResourceId2,3);
    slotManager.registerTaskManager(taskExecutionConnection2,slotReport2);
    slotManager.unregisterTaskManager(taskExecutionConnection1.getInstanceID());
    assertThat(allocationFailures,hasSize(2));
    Tuple2<JobID,AllocationID> allocationFailure;
    final Set<AllocationID> failedAllocations=new HashSet<>(2);
    while ((allocationFailure=allocationFailures.poll()) != null) {
      assertThat(allocationFailure.f0,equalTo(jobId1));
      failedAllocations.add(allocationFailure.f1);
    }
    assertThat(failedAllocations,containsInAnyOrder(slotRequest11.getAllocationId(),slotRequest12.getAllocationId()));
    slotManager.unregisterTaskManager(taskExecutionConnection2.getInstanceID());
    assertThat(allocationFailures,hasSize(3));
    Map<JobID,List<Tuple2<JobID,AllocationID>>> job2AndJob3FailedAllocationInfo=allocationFailures.stream().collect(Collectors.groupingBy(tuple -> tuple.f0));
    assertThat(job2AndJob3FailedAllocationInfo.entrySet(),hasSize(2));
    final Set<AllocationID> job2FailedAllocations=extractFailedAllocationsForJob(jobId2,job2AndJob3FailedAllocationInfo);
    final Set<AllocationID> job3FailedAllocations=extractFailedAllocationsForJob(jobId3,job2AndJob3FailedAllocationInfo);
    assertThat(job2FailedAllocations,containsInAnyOrder(slotRequest21.getAllocationId(),slotRequest22.getAllocationId()));
    assertThat(job3FailedAllocations,containsInAnyOrder(slotRequest31.getAllocationId()));
  }
 }
