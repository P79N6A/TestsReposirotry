/** 
 * Tests that a task manager timeout does not remove the slots from the SlotManager. A timeout should only trigger the  {@link ResourceActions#releaseResource(InstanceID,Exception)}callback. The receiver of the callback can then decide what to do with the TaskManager. <p>See FLINK-7793
 */
@Test public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {
  final Time taskManagerTimeout=Time.milliseconds(10L);
  final ResourceManagerId resourceManagerId=ResourceManagerId.generate();
  final ResourceID resourceID=ResourceID.generate();
  final ResourceActions resourceActions=mock(ResourceActions.class);
  final TaskExecutorGateway taskExecutorGateway=mock(TaskExecutorGateway.class);
  final TaskExecutorConnection taskExecutorConnection=new TaskExecutorConnection(resourceID,taskExecutorGateway);
  final SlotStatus slotStatus=new SlotStatus(new SlotID(resourceID,0),new ResourceProfile(1.0,1));
  final SlotReport initialSlotReport=new SlotReport(slotStatus);
  try (final SlotManager slotManager=new SlotManager(TestingUtils.defaultScheduledExecutor(),TestingUtils.infiniteTime(),TestingUtils.infiniteTime(),taskManagerTimeout)){
    slotManager.start(resourceManagerId,Executors.directExecutor(),resourceActions);
    slotManager.registerTaskManager(taskExecutorConnection,initialSlotReport);
    assertEquals(1,slotManager.getNumberRegisteredSlots());
    verify(resourceActions,timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()),any(Exception.class));
    assertEquals(1,slotManager.getNumberRegisteredSlots());
    slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID());
    assertEquals(0,slotManager.getNumberRegisteredSlots());
  }
 }
