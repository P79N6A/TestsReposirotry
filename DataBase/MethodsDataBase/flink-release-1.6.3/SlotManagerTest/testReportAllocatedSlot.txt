/** 
 * Tests that free slots which are reported as allocated won't be considered for fulfilling other pending slot requests. <p>See: FLINK-8505
 */
@Test public void testReportAllocatedSlot() throws Exception {
  final ResourceID taskManagerId=ResourceID.generate();
  final ResourceActions resourceActions=mock(ResourceActions.class);
  final TestingTaskExecutorGateway taskExecutorGateway=new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway();
  final TaskExecutorConnection taskExecutorConnection=new TaskExecutorConnection(taskManagerId,taskExecutorGateway);
  try (final SlotManager slotManager=new SlotManager(TestingUtils.defaultScheduledExecutor(),TestingUtils.infiniteTime(),TestingUtils.infiniteTime(),TestingUtils.infiniteTime())){
    slotManager.start(ResourceManagerId.generate(),Executors.directExecutor(),resourceActions);
    final SlotID slotId=new SlotID(taskManagerId,0);
    final SlotStatus initialSlotStatus=new SlotStatus(slotId,ResourceProfile.UNKNOWN);
    final SlotReport initialSlotReport=new SlotReport(initialSlotStatus);
    slotManager.registerTaskManager(taskExecutorConnection,initialSlotReport);
    assertThat(slotManager.getNumberRegisteredSlots(),is(equalTo(1)));
    final SlotStatus slotStatus=new SlotStatus(slotId,ResourceProfile.UNKNOWN,new JobID(),new AllocationID());
    final SlotReport slotReport=new SlotReport(slotStatus);
    slotManager.reportSlotStatus(taskExecutorConnection.getInstanceID(),slotReport);
    final AllocationID allocationId=new AllocationID();
    final SlotRequest slotRequest=new SlotRequest(new JobID(),allocationId,ResourceProfile.UNKNOWN,"foobar");
    slotManager.registerSlotRequest(slotRequest);
    assertThat(slotManager.getSlotRequest(allocationId).isAssigned(),is(false));
  }
 }
