/** 
 * Tests that pending slot requests are tried to be fulfilled upon new slot registrations.
 */
@Test public void testFulfillingPendingSlotRequest() throws Exception {
  final ResourceManagerId resourceManagerId=ResourceManagerId.generate();
  final ResourceID resourceID=ResourceID.generate();
  final JobID jobId=new JobID();
  final SlotID slotId=new SlotID(resourceID,0);
  final String targetAddress="localhost";
  final AllocationID allocationId=new AllocationID();
  final ResourceProfile resourceProfile=new ResourceProfile(42.0,1337);
  final SlotRequest slotRequest=new SlotRequest(jobId,allocationId,resourceProfile,targetAddress);
  ResourceActions resourceManagerActions=mock(ResourceActions.class);
  final TaskExecutorGateway taskExecutorGateway=mock(TaskExecutorGateway.class);
  when(taskExecutorGateway.requestSlot(eq(slotId),eq(jobId),eq(allocationId),anyString(),eq(resourceManagerId),any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()));
  final TaskExecutorConnection taskExecutorConnection=new TaskExecutorConnection(resourceID,taskExecutorGateway);
  final SlotStatus slotStatus=new SlotStatus(slotId,resourceProfile);
  final SlotReport slotReport=new SlotReport(slotStatus);
  try (SlotManager slotManager=createSlotManager(resourceManagerId,resourceManagerActions)){
    assertTrue("The slot request should be accepted",slotManager.registerSlotRequest(slotRequest));
    verify(resourceManagerActions,times(1)).allocateResource(eq(resourceProfile));
    slotManager.registerTaskManager(taskExecutorConnection,slotReport);
    verify(taskExecutorGateway).requestSlot(eq(slotId),eq(jobId),eq(allocationId),eq(targetAddress),eq(resourceManagerId),any(Time.class));
    TaskManagerSlot slot=slotManager.getSlot(slotId);
    assertEquals("The slot has not been allocated to the expected allocation id.",allocationId,slot.getAllocationId());
  }
 }
