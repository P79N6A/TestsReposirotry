@Test public void testCompatibilityWithPojoSerializer() throws Exception {
  final TypeSerializer<SimpleUser> serializer;
  final TypeSerializerConfigSnapshot configSnapshot;
  try (InputStream in=getClass().getClassLoader().getResourceAsStream(SNAPSHOT_RESOURCE)){
    DataInputViewStreamWrapper inView=new DataInputViewStreamWrapper(in);
    List<Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>> deserialized=TypeSerializerSerializationUtil.readSerializersAndConfigsWithResilience(inView,getClass().getClassLoader());
    assertEquals(1,deserialized.size());
    @SuppressWarnings("unchecked") final TypeSerializer<SimpleUser> typedSerializer=(TypeSerializer<SimpleUser>)deserialized.get(0).f0;
    serializer=typedSerializer;
    configSnapshot=deserialized.get(0).f1;
  }
   assertNotNull(serializer);
  assertNotNull(configSnapshot);
  assertTrue(serializer instanceof PojoSerializer);
  assertTrue(configSnapshot instanceof PojoSerializerConfigSnapshot);
  validateDeserialization(serializer);
  assertFalse(serializer.ensureCompatibility(configSnapshot).isRequiresMigration());
  final TypeSerializer<SimpleUser> newSerializer=new AvroTypeInfo<>(SimpleUser.class,true).createSerializer(new ExecutionConfig());
  assertFalse(newSerializer.ensureCompatibility(configSnapshot).isRequiresMigration());
  validateDeserialization(newSerializer);
  TypeSerializerConfigSnapshot nextSnapshot=newSerializer.snapshotConfiguration();
  final TypeSerializer<SimpleUser> nextSerializer=new AvroTypeInfo<>(SimpleUser.class,true).createSerializer(new ExecutionConfig());
  assertFalse(nextSerializer.ensureCompatibility(nextSnapshot).isRequiresMigration());
  validateDeserialization(nextSerializer);
}
