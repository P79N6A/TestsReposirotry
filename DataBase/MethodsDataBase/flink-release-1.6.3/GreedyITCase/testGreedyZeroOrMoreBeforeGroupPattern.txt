@Test public void testGreedyZeroOrMoreBeforeGroupPattern() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event c=new Event(40,"c",1.0);
  Event a1=new Event(40,"a",1.0);
  Event a2=new Event(40,"a",1.0);
  Event a3=new Event(40,"a",1.0);
  Event d1=new Event(40,"d",1.0);
  Event e1=new Event(40,"e",1.0);
  Event d2=new Event(40,"d",1.0);
  Event e2=new Event(40,"e",1.0);
  Event f=new Event(44,"f",3.0);
  inputEvents.add(new StreamRecord<>(c,1));
  inputEvents.add(new StreamRecord<>(a1,2));
  inputEvents.add(new StreamRecord<>(a2,3));
  inputEvents.add(new StreamRecord<>(new Event(43,"dummy",2.0),4));
  inputEvents.add(new StreamRecord<>(a3,5));
  inputEvents.add(new StreamRecord<>(d1,6));
  inputEvents.add(new StreamRecord<>(e1,7));
  inputEvents.add(new StreamRecord<>(d2,8));
  inputEvents.add(new StreamRecord<>(e2,9));
  inputEvents.add(new StreamRecord<>(f,10));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("c");
    }
  }
).followedBy("middle").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).oneOrMore().optional().greedy().followedBy(Pattern.<Event>begin("middle1").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("d");
    }
  }
).followedBy("middle2").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("e");
    }
  }
)).times(2).followedBy("end").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("f");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  final List<List<Event>> resultingPatterns=feedNFA(inputEvents,nfa);
  compareMaps(resultingPatterns,Lists.<List<Event>>newArrayList(Lists.newArrayList(c,a1,a2,a3,d1,e1,d2,e2,f)));
}
