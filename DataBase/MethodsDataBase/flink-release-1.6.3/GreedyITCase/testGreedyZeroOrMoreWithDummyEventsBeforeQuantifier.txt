@Test public void testGreedyZeroOrMoreWithDummyEventsBeforeQuantifier() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event c=new Event(40,"c",1.0);
  Event d=new Event(44,"d",3.0);
  inputEvents.add(new StreamRecord<>(c,1));
  inputEvents.add(new StreamRecord<>(new Event(43,"dummy",2.0),2));
  inputEvents.add(new StreamRecord<>(d,5));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("c");
    }
  }
).followedBy("middle").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).oneOrMore().optional().greedy().followedBy("end").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("d");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  final List<List<Event>> resultingPatterns=feedNFA(inputEvents,nfa);
  compareMaps(resultingPatterns,Lists.<List<Event>>newArrayList(Lists.newArrayList(c,d)));
}
