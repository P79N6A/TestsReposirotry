@Test public void testArchiver() throws IOException {
  JsonArchivist archivist=new CheckpointConfigHandler.CheckpointConfigJsonArchivist();
  GraphAndSettings graphAndSettings=createGraphAndSettings(true,true);
  AccessExecutionGraph graph=graphAndSettings.graph;
  when(graph.getJobID()).thenReturn(new JobID());
  CheckpointCoordinatorConfiguration chkConfig=graphAndSettings.jobCheckpointingConfiguration;
  CheckpointRetentionPolicy retentionPolicy=graphAndSettings.retentionPolicy;
  Collection<ArchivedJson> archives=archivist.archiveJsonWithPath(graph);
  Assert.assertEquals(1,archives.size());
  ArchivedJson archive=archives.iterator().next();
  Assert.assertEquals("/jobs/" + graph.getJobID() + "/checkpoints/config",archive.getPath());
  ObjectMapper mapper=new ObjectMapper();
  JsonNode rootNode=mapper.readTree(archive.getJson());
  Assert.assertEquals("exactly_once",rootNode.get("mode").asText());
  Assert.assertEquals(chkConfig.getCheckpointInterval(),rootNode.get("interval").asLong());
  Assert.assertEquals(chkConfig.getCheckpointTimeout(),rootNode.get("timeout").asLong());
  Assert.assertEquals(chkConfig.getMinPauseBetweenCheckpoints(),rootNode.get("min_pause").asLong());
  Assert.assertEquals(chkConfig.getMaxConcurrentCheckpoints(),rootNode.get("max_concurrent").asInt());
  JsonNode externalizedNode=rootNode.get("externalization");
  Assert.assertNotNull(externalizedNode);
  Assert.assertEquals(retentionPolicy != CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,externalizedNode.get("enabled").asBoolean());
  Assert.assertEquals(retentionPolicy != CheckpointRetentionPolicy.RETAIN_ON_CANCELLATION,externalizedNode.get("delete_on_cancellation").asBoolean());
}
