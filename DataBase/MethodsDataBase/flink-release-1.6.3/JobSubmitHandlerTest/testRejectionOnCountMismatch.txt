@Test public void testRejectionOnCountMismatch() throws Exception {
  final Path jobGraphFile=TEMPORARY_FOLDER.newFile().toPath();
  try (ObjectOutputStream objectOut=new ObjectOutputStream(Files.newOutputStream(jobGraphFile))){
    objectOut.writeObject(new JobGraph("testjob"));
  }
   final Path countExceedingFile=TEMPORARY_FOLDER.newFile().toPath();
  TestingDispatcherGateway.Builder builder=new TestingDispatcherGateway.Builder();
  builder.setBlobServerPort(blobServer.getPort()).setSubmitFunction(jobGraph -> CompletableFuture.completedFuture(Acknowledge.get())).setHostname("localhost");
  DispatcherGateway mockGateway=builder.build();
  JobSubmitHandler handler=new JobSubmitHandler(CompletableFuture.completedFuture("http://localhost:1234"),() -> CompletableFuture.completedFuture(mockGateway),RpcUtils.INF_TIMEOUT,Collections.emptyMap(),TestingUtils.defaultExecutor(),configuration);
  JobSubmitRequestBody request=new JobSubmitRequestBody(jobGraphFile.getFileName().toString(),Collections.emptyList(),Collections.emptyList());
  try {
    handler.handleRequest(new HandlerRequest<>(request,EmptyMessageParameters.getInstance(),Collections.emptyMap(),Collections.emptyMap(),Arrays.asList(jobGraphFile.toFile(),countExceedingFile.toFile())),mockGateway).get();
  }
 catch (  Exception e) {
    ExceptionUtils.findThrowable(e,candidate -> candidate instanceof RestHandlerException && candidate.getMessage().contains("count"));
  }
}
