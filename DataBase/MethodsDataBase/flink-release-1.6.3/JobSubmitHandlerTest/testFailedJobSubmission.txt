@Test public void testFailedJobSubmission() throws Exception {
  final String errorMessage="test";
  DispatcherGateway mockGateway=new TestingDispatcherGateway.Builder().setSubmitFunction(jobgraph -> FutureUtils.completedExceptionally(new Exception(errorMessage))).build();
  JobSubmitHandler handler=new JobSubmitHandler(CompletableFuture.completedFuture("http://localhost:1234"),() -> CompletableFuture.completedFuture(mockGateway),RpcUtils.INF_TIMEOUT,Collections.emptyMap(),TestingUtils.defaultExecutor(),configuration);
  final Path jobGraphFile=TEMPORARY_FOLDER.newFile().toPath();
  JobGraph jobGraph=new JobGraph("testjob");
  try (ObjectOutputStream objectOut=new ObjectOutputStream(Files.newOutputStream(jobGraphFile))){
    objectOut.writeObject(jobGraph);
  }
   JobSubmitRequestBody request=new JobSubmitRequestBody(jobGraphFile.getFileName().toString(),Collections.emptyList(),Collections.emptyList());
  try {
    handler.handleRequest(new HandlerRequest<>(request,EmptyMessageParameters.getInstance(),Collections.emptyMap(),Collections.emptyMap(),Collections.singletonList(jobGraphFile.toFile())),mockGateway).get();
  }
 catch (  Exception e) {
    Throwable t=ExceptionUtils.stripExecutionException(e);
    Assert.assertEquals(errorMessage,t.getMessage());
  }
}
