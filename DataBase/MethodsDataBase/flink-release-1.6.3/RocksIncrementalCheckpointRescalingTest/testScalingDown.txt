@Test @SuppressWarnings("unchecked") public void testScalingDown() throws Exception {
  KeyedOneInputStreamOperatorTestHarness<String,String,Integer>[] harness3=new KeyedOneInputStreamOperatorTestHarness[3];
  OperatorSubtaskState snapshot3;
  try {
    List<KeyGroupRange> keyGroupPartitions=StateAssignmentOperation.createKeyGroupPartitions(maxParallelism,3);
    KeyGroupRange localKeyGroupRange30=keyGroupPartitions.get(0);
    Assert.assertEquals(new KeyGroupRange(0,3),localKeyGroupRange30);
    harness3[0]=getHarnessTest(keySelector,maxParallelism,3,0);
    harness3[0].setStateBackend(getStateBackend());
    harness3[0].open();
    KeyGroupRange localKeyGroupRange31=keyGroupPartitions.get(1);
    Assert.assertEquals(new KeyGroupRange(4,6),localKeyGroupRange31);
    harness3[1]=getHarnessTest(keySelector,maxParallelism,3,1);
    harness3[1].setStateBackend(getStateBackend());
    harness3[1].open();
    KeyGroupRange localKeyGroupRange32=keyGroupPartitions.get(2);
    Assert.assertEquals(new KeyGroupRange(7,9),localKeyGroupRange32);
    harness3[2]=getHarnessTest(keySelector,maxParallelism,3,2);
    harness3[2].setStateBackend(getStateBackend());
    harness3[2].open();
    validHarnessResult(harness3[0],1,records[0],records[1],records[2],records[3]);
    validHarnessResult(harness3[1],1,records[4],records[5],records[6]);
    validHarnessResult(harness3[2],1,records[7],records[8],records[9]);
    snapshot3=AbstractStreamOperatorTestHarness.repackageState(harness3[0].snapshot(0,0),harness3[1].snapshot(0,0),harness3[2].snapshot(0,0));
  }
  finally {
    closeHarness(harness3);
  }
  KeyedOneInputStreamOperatorTestHarness<String,String,Integer>[] harness2=new KeyedOneInputStreamOperatorTestHarness[3];
  OperatorSubtaskState snapshot2;
  try {
    List<KeyGroupRange> keyGroupPartitions=StateAssignmentOperation.createKeyGroupPartitions(maxParallelism,2);
    KeyGroupRange localKeyGroupRange20=keyGroupPartitions.get(0);
    Assert.assertEquals(new KeyGroupRange(0,4),localKeyGroupRange20);
    harness2[0]=getHarnessTest(keySelector,maxParallelism,2,0);
    harness2[0].setStateBackend(getStateBackend());
    harness2[0].setup();
    harness2[0].initializeState(snapshot3);
    harness2[0].open();
    KeyGroupRange localKeyGroupRange21=keyGroupPartitions.get(1);
    Assert.assertEquals(new KeyGroupRange(5,9),localKeyGroupRange21);
    harness2[1]=getHarnessTest(keySelector,maxParallelism,2,1);
    harness2[1].setStateBackend(getStateBackend());
    harness2[1].setup();
    harness2[1].initializeState(snapshot3);
    harness2[1].open();
    validHarnessResult(harness2[0],2,records[0],records[1],records[2],records[3],records[4]);
    validHarnessResult(harness2[1],2,records[5],records[6],records[7],records[8],records[9]);
    snapshot2=AbstractStreamOperatorTestHarness.repackageState(harness2[0].snapshot(0,0),harness2[1].snapshot(0,0));
    validHarnessResult(harness2[0],1,records[5],records[6],records[7],records[8],records[9]);
    validHarnessResult(harness2[1],1,records[0],records[1],records[2],records[3],records[4]);
  }
  finally {
    closeHarness(harness2);
  }
  try (KeyedOneInputStreamOperatorTestHarness<String,String,Integer> harness=getHarnessTest(keySelector,maxParallelism,1,0)){
    harness.setStateBackend(getStateBackend());
    harness.setup();
    harness.initializeState(snapshot2);
    harness.open();
    validHarnessResult(harness,3,records);
  }
 }
