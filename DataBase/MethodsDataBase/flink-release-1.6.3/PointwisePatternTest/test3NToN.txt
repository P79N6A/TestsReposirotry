@Test public void test3NToN() throws Exception {
  final int N=17;
  JobVertex v1=new JobVertex("vertex1");
  JobVertex v2=new JobVertex("vertex2");
  v1.setParallelism(3 * N);
  v2.setParallelism(N);
  v1.setInvokableClass(AbstractInvokable.class);
  v2.setInvokableClass(AbstractInvokable.class);
  v2.connectNewDataSetAsInput(v1,DistributionPattern.POINTWISE,ResultPartitionType.PIPELINED);
  List<JobVertex> ordered=new ArrayList<JobVertex>(Arrays.asList(v1,v2));
  ExecutionGraph eg=new ExecutionGraph(TestingUtils.defaultExecutor(),TestingUtils.defaultExecutor(),jobId,jobName,cfg,new SerializedValue<>(new ExecutionConfig()),AkkaUtils.getDefaultTimeout(),new NoRestartStrategy(),new Scheduler(TestingUtils.defaultExecutionContext()));
  try {
    eg.attachJobGraph(ordered);
  }
 catch (  JobException e) {
    e.printStackTrace();
    fail("Job failed with exception: " + e.getMessage());
  }
  ExecutionJobVertex target=eg.getAllVertices().get(v2.getID());
  for (  ExecutionVertex ev : target.getTaskVertices()) {
    assertEquals(1,ev.getNumberOfInputs());
    ExecutionEdge[] inEdges=ev.getInputEdges(0);
    assertEquals(3,inEdges.length);
    assertEquals(ev.getParallelSubtaskIndex() * 3,inEdges[0].getSource().getPartitionNumber());
    assertEquals(ev.getParallelSubtaskIndex() * 3 + 1,inEdges[1].getSource().getPartitionNumber());
    assertEquals(ev.getParallelSubtaskIndex() * 3 + 2,inEdges[2].getSource().getPartitionNumber());
  }
}
