/** 
 * Tests a simple successful query via an EmbeddedChannel.
 */
@Test public void testSimpleQuery() throws Exception {
  KvStateRegistry registry=new KvStateRegistry();
  AtomicKvStateRequestStats stats=new AtomicKvStateRequestStats();
  MessageSerializer<KvStateInternalRequest,KvStateResponse> serializer=new MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(),new KvStateResponse.KvStateResponseDeserializer());
  KvStateServerHandler handler=new KvStateServerHandler(testServer,registry,serializer,stats);
  EmbeddedChannel channel=new EmbeddedChannel(getFrameDecoder(),handler);
  ValueStateDescriptor<Integer> desc=new ValueStateDescriptor<>("any",IntSerializer.INSTANCE);
  desc.setQueryable("vanilla");
  int numKeyGroups=1;
  AbstractStateBackend abstractBackend=new MemoryStateBackend();
  DummyEnvironment dummyEnv=new DummyEnvironment("test",1,0);
  dummyEnv.setKvStateRegistry(registry);
  AbstractKeyedStateBackend<Integer> backend=createKeyedStateBackend(registry,numKeyGroups,abstractBackend,dummyEnv);
  final TestRegistryListener registryListener=new TestRegistryListener();
  registry.registerListener(dummyEnv.getJobID(),registryListener);
  int expectedValue=712828289;
  int key=99812822;
  backend.setCurrentKey(key);
  ValueState<Integer> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc);
  state.update(expectedValue);
  byte[] serializedKeyAndNamespace=KvStateSerializer.serializeKeyAndNamespace(key,IntSerializer.INSTANCE,VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE);
  long requestId=Integer.MAX_VALUE + 182828L;
  assertTrue(registryListener.registrationName.equals("vanilla"));
  KvStateInternalRequest request=new KvStateInternalRequest(registryListener.kvStateId,serializedKeyAndNamespace);
  ByteBuf serRequest=MessageSerializer.serializeRequest(channel.alloc(),requestId,request);
  channel.writeInbound(serRequest);
  ByteBuf buf=(ByteBuf)readInboundBlocking(channel);
  buf.skipBytes(4);
  assertEquals(MessageType.REQUEST_RESULT,MessageSerializer.deserializeHeader(buf));
  long deserRequestId=MessageSerializer.getRequestId(buf);
  KvStateResponse response=serializer.deserializeResponse(buf);
  assertEquals(requestId,deserRequestId);
  int actualValue=KvStateSerializer.deserializeValue(response.getContent(),IntSerializer.INSTANCE);
  assertEquals(expectedValue,actualValue);
  assertEquals(stats.toString(),1,stats.getNumRequests());
  long deadline=System.nanoTime() + TimeUnit.NANOSECONDS.convert(30,TimeUnit.SECONDS);
  while (stats.getNumSuccessful() != 1L && System.nanoTime() <= deadline) {
    Thread.sleep(10L);
  }
  assertEquals(stats.toString(),1L,stats.getNumSuccessful());
}
