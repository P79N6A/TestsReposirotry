/** 
 * Tests the failure response on a failure on the  {@link InternalKvState#getSerializedValue(byte[],TypeSerializer,TypeSerializer,TypeSerializer)} call.
 */
@Test public void testFailureOnGetSerializedValue() throws Exception {
  KvStateRegistry registry=new KvStateRegistry();
  AtomicKvStateRequestStats stats=new AtomicKvStateRequestStats();
  MessageSerializer<KvStateInternalRequest,KvStateResponse> serializer=new MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(),new KvStateResponse.KvStateResponseDeserializer());
  KvStateServerHandler handler=new KvStateServerHandler(testServer,registry,serializer,stats);
  EmbeddedChannel channel=new EmbeddedChannel(getFrameDecoder(),handler);
  InternalKvState<Integer,VoidNamespace,Long> kvState=new InternalKvState<Integer,VoidNamespace,Long>(){
    @Override public TypeSerializer<Integer> getKeySerializer(){
      return IntSerializer.INSTANCE;
    }
    @Override public TypeSerializer<VoidNamespace> getNamespaceSerializer(){
      return VoidNamespaceSerializer.INSTANCE;
    }
    @Override public TypeSerializer<Long> getValueSerializer(){
      return LongSerializer.INSTANCE;
    }
    @Override public void setCurrentNamespace(    VoidNamespace namespace){
    }
    @Override public byte[] getSerializedValue(    final byte[] serializedKeyAndNamespace,    final TypeSerializer<Integer> safeKeySerializer,    final TypeSerializer<VoidNamespace> safeNamespaceSerializer,    final TypeSerializer<Long> safeValueSerializer) throws Exception {
      throw new RuntimeException("Expected test Exception");
    }
    @Override public void clear(){
    }
  }
;
  KvStateID kvStateId=registry.registerKvState(new JobID(),new JobVertexID(),new KeyGroupRange(0,0),"vanilla",kvState);
  KvStateInternalRequest request=new KvStateInternalRequest(kvStateId,new byte[0]);
  ByteBuf serRequest=MessageSerializer.serializeRequest(channel.alloc(),282872L,request);
  channel.writeInbound(serRequest);
  ByteBuf buf=(ByteBuf)readInboundBlocking(channel);
  buf.skipBytes(4);
  assertEquals(MessageType.REQUEST_FAILURE,MessageSerializer.deserializeHeader(buf));
  RequestFailure response=MessageSerializer.deserializeRequestFailure(buf);
  assertTrue(response.getCause().getMessage().contains("Expected test Exception"));
  assertEquals(1L,stats.getNumRequests());
  assertEquals(1L,stats.getNumFailed());
}
