/** 
 * Tests the failure response if the serializers don't match.
 */
@Test public void testSerializerMismatch() throws Exception {
  KvStateRegistry registry=new KvStateRegistry();
  AtomicKvStateRequestStats stats=new AtomicKvStateRequestStats();
  MessageSerializer<KvStateInternalRequest,KvStateResponse> serializer=new MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(),new KvStateResponse.KvStateResponseDeserializer());
  KvStateServerHandler handler=new KvStateServerHandler(testServer,registry,serializer,stats);
  EmbeddedChannel channel=new EmbeddedChannel(getFrameDecoder(),handler);
  int numKeyGroups=1;
  AbstractStateBackend abstractBackend=new MemoryStateBackend();
  DummyEnvironment dummyEnv=new DummyEnvironment("test",1,0);
  dummyEnv.setKvStateRegistry(registry);
  AbstractKeyedStateBackend<Integer> backend=createKeyedStateBackend(registry,numKeyGroups,abstractBackend,dummyEnv);
  final TestRegistryListener registryListener=new TestRegistryListener();
  registry.registerListener(dummyEnv.getJobID(),registryListener);
  ValueStateDescriptor<Integer> desc=new ValueStateDescriptor<>("any",IntSerializer.INSTANCE);
  desc.setQueryable("vanilla");
  ValueState<Integer> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc);
  int key=99812822;
  backend.setCurrentKey(key);
  state.update(712828289);
  byte[] wrongKeyAndNamespace=KvStateSerializer.serializeKeyAndNamespace("wrong-key-type",StringSerializer.INSTANCE,"wrong-namespace-type",StringSerializer.INSTANCE);
  byte[] wrongNamespace=KvStateSerializer.serializeKeyAndNamespace(key,IntSerializer.INSTANCE,"wrong-namespace-type",StringSerializer.INSTANCE);
  assertTrue(registryListener.registrationName.equals("vanilla"));
  KvStateInternalRequest request=new KvStateInternalRequest(registryListener.kvStateId,wrongKeyAndNamespace);
  ByteBuf serRequest=MessageSerializer.serializeRequest(channel.alloc(),182828L,request);
  channel.writeInbound(serRequest);
  ByteBuf buf=(ByteBuf)readInboundBlocking(channel);
  buf.skipBytes(4);
  assertEquals(MessageType.REQUEST_FAILURE,MessageSerializer.deserializeHeader(buf));
  RequestFailure response=MessageSerializer.deserializeRequestFailure(buf);
  assertEquals(182828L,response.getRequestId());
  assertTrue(response.getCause().getMessage().contains("IOException"));
  request=new KvStateInternalRequest(registryListener.kvStateId,wrongNamespace);
  serRequest=MessageSerializer.serializeRequest(channel.alloc(),182829L,request);
  channel.writeInbound(serRequest);
  buf=(ByteBuf)readInboundBlocking(channel);
  buf.skipBytes(4);
  assertEquals(MessageType.REQUEST_FAILURE,MessageSerializer.deserializeHeader(buf));
  response=MessageSerializer.deserializeRequestFailure(buf);
  assertEquals(182829L,response.getRequestId());
  assertTrue(response.getCause().getMessage().contains("IOException"));
  assertEquals(2L,stats.getNumRequests());
  assertEquals(2L,stats.getNumFailed());
}
