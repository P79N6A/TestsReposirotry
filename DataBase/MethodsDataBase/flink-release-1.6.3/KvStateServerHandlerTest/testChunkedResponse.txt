/** 
 * Tests that large responses are chunked.
 */
@Test public void testChunkedResponse() throws Exception {
  KvStateRegistry registry=new KvStateRegistry();
  KvStateRequestStats stats=new AtomicKvStateRequestStats();
  MessageSerializer<KvStateInternalRequest,KvStateResponse> serializer=new MessageSerializer<>(new KvStateInternalRequest.KvStateInternalRequestDeserializer(),new KvStateResponse.KvStateResponseDeserializer());
  KvStateServerHandler handler=new KvStateServerHandler(testServer,registry,serializer,stats);
  EmbeddedChannel channel=new EmbeddedChannel(getFrameDecoder(),handler);
  int numKeyGroups=1;
  AbstractStateBackend abstractBackend=new MemoryStateBackend();
  DummyEnvironment dummyEnv=new DummyEnvironment("test",1,0);
  dummyEnv.setKvStateRegistry(registry);
  AbstractKeyedStateBackend<Integer> backend=createKeyedStateBackend(registry,numKeyGroups,abstractBackend,dummyEnv);
  final TestRegistryListener registryListener=new TestRegistryListener();
  registry.registerListener(dummyEnv.getJobID(),registryListener);
  ValueStateDescriptor<byte[]> desc=new ValueStateDescriptor<>("any",BytePrimitiveArraySerializer.INSTANCE);
  desc.setQueryable("vanilla");
  ValueState<byte[]> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,desc);
  byte[] bytes=new byte[2 * channel.config().getWriteBufferHighWaterMark()];
  byte current=0;
  for (int i=0; i < bytes.length; i++) {
    bytes[i]=current++;
  }
  int key=99812822;
  backend.setCurrentKey(key);
  state.update(bytes);
  byte[] serializedKeyAndNamespace=KvStateSerializer.serializeKeyAndNamespace(key,IntSerializer.INSTANCE,VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE);
  long requestId=Integer.MAX_VALUE + 182828L;
  assertTrue(registryListener.registrationName.equals("vanilla"));
  KvStateInternalRequest request=new KvStateInternalRequest(registryListener.kvStateId,serializedKeyAndNamespace);
  ByteBuf serRequest=MessageSerializer.serializeRequest(channel.alloc(),requestId,request);
  channel.writeInbound(serRequest);
  Object msg=readInboundBlocking(channel);
  assertTrue("Not ChunkedByteBuf",msg instanceof ChunkedByteBuf);
}
