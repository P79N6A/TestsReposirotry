/** 
 * Verifies that memory-backed keyed state backend fails with appropriate error and message if previous serializer can not be restored.
 */
@Test public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {
  CheckpointStreamFactory streamFactory=createStreamFactory();
  SharedStateRegistry sharedStateRegistry=new SharedStateRegistry();
  KeyedStateBackend<Integer> backend=createKeyedBackend(IntSerializer.INSTANCE);
  ValueStateDescriptor<String> kvId=new ValueStateDescriptor<>("id",String.class,null);
  kvId.initializeSerializerUnlessSet(new ExecutionConfig());
  HeapKeyedStateBackend<Integer> heapBackend=(HeapKeyedStateBackend<Integer>)backend;
  assertEquals(0,heapBackend.numKeyValueStateEntries());
  ValueState<String> state=backend.getPartitionedState(VoidNamespace.INSTANCE,VoidNamespaceSerializer.INSTANCE,kvId);
  backend.setCurrentKey(0);
  state.update("hello");
  state.update("ciao");
  KeyedStateHandle snapshot=runSnapshot(((HeapKeyedStateBackend<Integer>)backend).snapshot(682375462378L,2,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation()),sharedStateRegistry);
  backend.dispose();
  try {
    restoreKeyedBackend(IntSerializer.INSTANCE,snapshot,new DummyEnvironment(new ArtificialCNFExceptionThrowingClassLoader(getClass().getClassLoader(),Collections.singleton(StringSerializer.class.getName()))));
    fail("The keyed state restore should have failed if the previous state serializer could not be loaded.");
  }
 catch (  IOException expected) {
    Assert.assertTrue(expected.getMessage().contains("Unable to restore keyed state"));
  }
}
