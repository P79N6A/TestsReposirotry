/** 
 * Tests that the number of remembered checkpoints configuration is respected.
 */
@Test public void testTrackerWithoutHistory() throws Exception {
  int numberOfSubtasks=3;
  ExecutionJobVertex jobVertex=mock(ExecutionJobVertex.class);
  when(jobVertex.getJobVertexId()).thenReturn(new JobVertexID());
  when(jobVertex.getParallelism()).thenReturn(numberOfSubtasks);
  CheckpointStatsTracker tracker=new CheckpointStatsTracker(0,Collections.singletonList(jobVertex),mock(CheckpointCoordinatorConfiguration.class),new UnregisteredMetricsGroup());
  PendingCheckpointStats pending=tracker.reportPendingCheckpoint(0,1,CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION));
  pending.reportSubtaskStats(jobVertex.getJobVertexId(),createSubtaskStats(0));
  pending.reportSubtaskStats(jobVertex.getJobVertexId(),createSubtaskStats(1));
  pending.reportSubtaskStats(jobVertex.getJobVertexId(),createSubtaskStats(2));
  pending.reportCompletedCheckpoint(null);
  CheckpointStatsSnapshot snapshot=tracker.createSnapshot();
  assertFalse(snapshot.getHistory().getCheckpoints().iterator().hasNext());
  CheckpointStatsCounts counts=snapshot.getCounts();
  assertEquals(1,counts.getNumberOfCompletedCheckpoints());
  assertEquals(1,counts.getTotalNumberOfCheckpoints());
  CompletedCheckpointStatsSummary summary=snapshot.getSummaryStats();
  assertEquals(1,summary.getStateSizeStats().getCount());
  assertEquals(1,summary.getEndToEndDurationStats().getCount());
  assertEquals(1,summary.getAlignmentBufferedStats().getCount());
  assertNotNull(snapshot.getHistory().getLatestCompletedCheckpoint());
  assertEquals(0,snapshot.getHistory().getLatestCompletedCheckpoint().getCheckpointId());
}
