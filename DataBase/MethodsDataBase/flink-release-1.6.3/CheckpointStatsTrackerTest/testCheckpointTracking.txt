/** 
 * Tests tracking of checkpoints.
 */
@Test public void testCheckpointTracking() throws Exception {
  int numberOfSubtasks=3;
  ExecutionJobVertex jobVertex=mock(ExecutionJobVertex.class);
  when(jobVertex.getJobVertexId()).thenReturn(new JobVertexID());
  when(jobVertex.getParallelism()).thenReturn(numberOfSubtasks);
  CheckpointStatsTracker tracker=new CheckpointStatsTracker(10,Collections.singletonList(jobVertex),mock(CheckpointCoordinatorConfiguration.class),new UnregisteredMetricsGroup());
  PendingCheckpointStats completed1=tracker.reportPendingCheckpoint(0,1,CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION));
  completed1.reportSubtaskStats(jobVertex.getJobVertexId(),createSubtaskStats(0));
  completed1.reportSubtaskStats(jobVertex.getJobVertexId(),createSubtaskStats(1));
  completed1.reportSubtaskStats(jobVertex.getJobVertexId(),createSubtaskStats(2));
  completed1.reportCompletedCheckpoint(null);
  PendingCheckpointStats failed=tracker.reportPendingCheckpoint(1,1,CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION));
  failed.reportFailedCheckpoint(12,null);
  PendingCheckpointStats savepoint=tracker.reportPendingCheckpoint(2,1,CheckpointProperties.forSavepoint());
  savepoint.reportSubtaskStats(jobVertex.getJobVertexId(),createSubtaskStats(0));
  savepoint.reportSubtaskStats(jobVertex.getJobVertexId(),createSubtaskStats(1));
  savepoint.reportSubtaskStats(jobVertex.getJobVertexId(),createSubtaskStats(2));
  savepoint.reportCompletedCheckpoint(null);
  PendingCheckpointStats inProgress=tracker.reportPendingCheckpoint(3,1,CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION));
  RestoredCheckpointStats restored=new RestoredCheckpointStats(81,CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),123,null);
  tracker.reportRestoredCheckpoint(restored);
  CheckpointStatsSnapshot snapshot=tracker.createSnapshot();
  CheckpointStatsCounts counts=snapshot.getCounts();
  assertEquals(4,counts.getTotalNumberOfCheckpoints());
  assertEquals(1,counts.getNumberOfInProgressCheckpoints());
  assertEquals(2,counts.getNumberOfCompletedCheckpoints());
  assertEquals(1,counts.getNumberOfFailedCheckpoints());
  CompletedCheckpointStatsSummary summary=snapshot.getSummaryStats();
  assertEquals(2,summary.getStateSizeStats().getCount());
  assertEquals(2,summary.getEndToEndDurationStats().getCount());
  assertEquals(2,summary.getAlignmentBufferedStats().getCount());
  CheckpointStatsHistory history=snapshot.getHistory();
  Iterator<AbstractCheckpointStats> it=history.getCheckpoints().iterator();
  assertTrue(it.hasNext());
  AbstractCheckpointStats stats=it.next();
  assertEquals(3,stats.getCheckpointId());
  assertTrue(stats.getStatus().isInProgress());
  assertTrue(it.hasNext());
  stats=it.next();
  assertEquals(2,stats.getCheckpointId());
  assertTrue(stats.getStatus().isCompleted());
  assertTrue(it.hasNext());
  stats=it.next();
  assertEquals(1,stats.getCheckpointId());
  assertTrue(stats.getStatus().isFailed());
  assertTrue(it.hasNext());
  stats=it.next();
  assertEquals(0,stats.getCheckpointId());
  assertTrue(stats.getStatus().isCompleted());
  assertFalse(it.hasNext());
  assertEquals(completed1.getCheckpointId(),snapshot.getHistory().getLatestCompletedCheckpoint().getCheckpointId());
  assertEquals(savepoint.getCheckpointId(),snapshot.getHistory().getLatestSavepoint().getCheckpointId());
  assertEquals(failed.getCheckpointId(),snapshot.getHistory().getLatestFailedCheckpoint().getCheckpointId());
  assertEquals(restored,snapshot.getLatestRestoredCheckpoint());
}
