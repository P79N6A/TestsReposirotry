@Test(timeout=2000) @RetryOnFailure(times=3) public void testRocksDbMergePerformance() throws Exception {
  final int num=50000;
  try (RocksDB rocksDB=RocksDB.open(options,rocksDir.getAbsolutePath())){
    log.info("begin insert");
    final long beginInsert=System.nanoTime();
    for (int i=0; i < num; i++) {
      rocksDB.merge(writeOptions,keyBytes,valueBytes);
    }
    final long endInsert=System.nanoTime();
    log.info("end insert - duration: {} ms",(endInsert - beginInsert) / 1_000_000);
    final byte[] resultHolder=new byte[num * (valueBytes.length + 2)];
    final long beginGet1=System.nanoTime();
    rocksDB.get(keyBytes,resultHolder);
    final long endGet1=System.nanoTime();
    log.info("end get - duration: {} ms",(endGet1 - beginGet1) / 1_000_000);
    final long beginGet2=System.nanoTime();
    rocksDB.get(keyBytes,resultHolder);
    final long endGet2=System.nanoTime();
    log.info("end get - duration: {} ms",(endGet2 - beginGet2) / 1_000_000);
    log.info("compacting...");
    final long beginCompact=System.nanoTime();
    rocksDB.compactRange();
    final long endCompact=System.nanoTime();
    log.info("end compaction - duration: {} ms",(endCompact - beginCompact) / 1_000_000);
    final long beginGet3=System.nanoTime();
    rocksDB.get(keyBytes,resultHolder);
    final long endGet3=System.nanoTime();
    log.info("end get - duration: {} ms",(endGet3 - beginGet3) / 1_000_000);
  }
 }
