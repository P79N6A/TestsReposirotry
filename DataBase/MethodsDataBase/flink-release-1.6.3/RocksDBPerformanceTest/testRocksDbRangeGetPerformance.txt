@Test(timeout=2000) @RetryOnFailure(times=3) public void testRocksDbRangeGetPerformance() throws Exception {
  final int num=50000;
  try (RocksDB rocksDB=RocksDB.open(options,rocksDir.getAbsolutePath())){
    final byte[] keyTemplate=Arrays.copyOf(keyBytes,keyBytes.length + 4);
    final Unsafe unsafe=MemoryUtils.UNSAFE;
    final long offset=unsafe.arrayBaseOffset(byte[].class) + keyTemplate.length - 4;
    log.info("begin insert");
    final long beginInsert=System.nanoTime();
    for (int i=0; i < num; i++) {
      unsafe.putInt(keyTemplate,offset,i);
      rocksDB.put(writeOptions,keyTemplate,valueBytes);
    }
    final long endInsert=System.nanoTime();
    log.info("end insert - duration: {} ms",(endInsert - beginInsert) / 1_000_000);
    @SuppressWarnings("MismatchedReadAndWriteOfArray") final byte[] resultHolder=new byte[num * valueBytes.length];
    final long beginGet=System.nanoTime();
    int pos=0;
    try (final RocksIteratorWrapper iterator=RocksDBKeyedStateBackend.getRocksIterator(rocksDB)){
      unsafe.putInt(keyTemplate,offset,0);
      iterator.seek(keyTemplate);
      while (iterator.isValid() && samePrefix(keyBytes,iterator.key())) {
        byte[] currValue=iterator.value();
        System.arraycopy(currValue,0,resultHolder,pos,currValue.length);
        pos+=currValue.length;
        iterator.next();
      }
    }
     final long endGet=System.nanoTime();
    log.info("end get - duration: {} ms",(endGet - beginGet) / 1_000_000);
  }
 }
