@Test public void testCompressionConfiguration(){
  ExecutionConfig executionConfig=new ExecutionConfig();
  executionConfig.setUseSnapshotCompression(true);
  AbstractKeyedStateBackend<String> stateBackend=new HeapKeyedStateBackend<>(mock(TaskKvStateRegistry.class),StringSerializer.INSTANCE,StateSnapshotCompressionTest.class.getClassLoader(),16,new KeyGroupRange(0,15),true,executionConfig,TestLocalRecoveryConfig.disabled(),mock(HeapPriorityQueueSetFactory.class),TtlTimeProvider.DEFAULT);
  try {
    Assert.assertTrue(SnappyStreamCompressionDecorator.INSTANCE.equals(stateBackend.getKeyGroupCompressionDecorator()));
  }
  finally {
    IOUtils.closeQuietly(stateBackend);
    stateBackend.dispose();
  }
  executionConfig=new ExecutionConfig();
  executionConfig.setUseSnapshotCompression(false);
  stateBackend=new HeapKeyedStateBackend<>(mock(TaskKvStateRegistry.class),StringSerializer.INSTANCE,StateSnapshotCompressionTest.class.getClassLoader(),16,new KeyGroupRange(0,15),true,executionConfig,TestLocalRecoveryConfig.disabled(),mock(HeapPriorityQueueSetFactory.class),TtlTimeProvider.DEFAULT);
  try {
    Assert.assertTrue(UncompressedStreamCompressionDecorator.INSTANCE.equals(stateBackend.getKeyGroupCompressionDecorator()));
  }
  finally {
    IOUtils.closeQuietly(stateBackend);
    stateBackend.dispose();
  }
}
