/** 
 * Tests the registration and accounting of resources at the ResourceManager.
 */
@Test public void testTaskManagerRegistration(){
  new JavaTestKit(system){
{
      new Within(duration("10 seconds")){
        @Override protected void run(){
          fakeJobManager=TestingUtils.createForwardingActor(system,getTestActor(),HighAvailabilityServices.DEFAULT_LEADER_ID,Option.<String>empty());
          jobManagerLeaderRetrievalService.notifyListener(fakeJobManager.path(),HighAvailabilityServices.DEFAULT_LEADER_ID);
          resourceManager=TestingUtils.createResourceManager(system,config,highAvailabilityServices);
          expectMsgClass(RegisterResourceManager.class);
          resourceManager.tell(new RegisterResourceManagerSuccessful(fakeJobManager.actor(),Collections.<ResourceID>emptyList()),fakeJobManager);
          ResourceID resourceID=ResourceID.generate();
          resourceManager.tell(new NotifyResourceStarted(resourceID),fakeJobManager);
          expectMsgClass(Acknowledge.class);
          resourceManager.tell(new TestingResourceManager.GetRegisteredResources(),fakeJobManager);
          TestingResourceManager.GetRegisteredResourcesReply reply=expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class);
          assertEquals(1,reply.resources.size());
          resourceManager.tell(new NotifyResourceStarted(resourceID),fakeJobManager);
          expectMsgClass(Acknowledge.class);
          resourceManager.tell(new TestingResourceManager.GetRegisteredResources(),fakeJobManager);
          reply=expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class);
          assertEquals(1,reply.resources.size());
          resourceManager.tell(new NotifyResourceStarted(null),fakeJobManager);
          expectMsgClass(Acknowledge.class);
          resourceManager.tell(new TestingResourceManager.GetRegisteredResources(),fakeJobManager);
          reply=expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class);
          assertEquals(1,reply.resources.size());
        }
      }
;
    }
  }
;
}
