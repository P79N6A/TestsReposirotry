/** 
 * Tests whether the resource manager connects and reconciles existing task managers.
 */
@Test public void testResourceManagerReconciliation(){
  new JavaTestKit(system){
{
      new Within(duration("10 seconds")){
        @Override protected void run(){
          ActorGateway jobManager=null;
          ActorGateway resourceManager=null;
          ActorGateway forwardingActor=null;
          try {
            jobManager=TestingUtils.createJobManager(system,TestingUtils.defaultExecutor(),TestingUtils.defaultExecutor(),config,highAvailabilityServices,"ReconciliationTest");
            forwardingActor=TestingUtils.createForwardingActor(system,getTestActor(),jobManager.leaderSessionID(),Option.<String>empty());
            ResourceID resourceID=ResourceID.generate();
            TaskManagerLocation location=mock(TaskManagerLocation.class);
            when(location.getResourceID()).thenReturn(resourceID);
            HardwareDescription resourceProfile=HardwareDescription.extractFromSystem(1_000_000);
            jobManager.tell(new RegistrationMessages.RegisterTaskManager(resourceID,location,resourceProfile,1),forwardingActor);
            expectMsgClass(RegistrationMessages.AcknowledgeRegistration.class);
            resourceManager=TestingUtils.createResourceManager(system,config,highAvailabilityServices);
            resourceManager.tell(new TestingResourceManager.NotifyWhenResourceManagerConnected(),forwardingActor);
            expectMsgEquals(Acknowledge.get());
            resourceManager.tell(new TestingResourceManager.GetRegisteredResources(),forwardingActor);
            TestingResourceManager.GetRegisteredResourcesReply reply=expectMsgClass(TestingResourceManager.GetRegisteredResourcesReply.class);
            assertEquals(1,reply.resources.size());
            assertTrue(reply.resources.contains(resourceID));
          }
  finally {
            TestingUtils.stopActorGatewaysGracefully(Arrays.asList(jobManager,resourceManager,forwardingActor));
          }
        }
      }
;
    }
  }
;
}
