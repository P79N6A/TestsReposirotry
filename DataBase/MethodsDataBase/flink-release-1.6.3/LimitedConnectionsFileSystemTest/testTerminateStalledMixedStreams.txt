@Test public void testTerminateStalledMixedStreams() throws Exception {
  final int maxConcurrentOpen=2;
  final int numThreads=20;
  final LimitedConnectionsFileSystem limitedFs=new LimitedConnectionsFileSystem(LocalFileSystem.getSharedInstance(),maxConcurrentOpen,0L,50L);
  final Random rnd=new Random();
  final CheckedThread[] threads=new CheckedThread[numThreads];
  final BlockingThread[] blockers=new BlockingThread[numThreads];
  for (int i=0; i < numThreads; i++) {
    File file1=tempFolder.newFile();
    File file2=tempFolder.newFile();
    Path path1=new Path(file1.toURI());
    Path path2=new Path(file2.toURI());
    if (rnd.nextBoolean()) {
      createRandomContents(file1,rnd);
      createRandomContents(file2,rnd);
      threads[i]=new ReaderThread(limitedFs,path1,maxConcurrentOpen,Integer.MAX_VALUE);
      blockers[i]=new BlockingReaderThread(limitedFs,path2,maxConcurrentOpen,Integer.MAX_VALUE);
    }
 else {
      threads[i]=new WriterThread(limitedFs,path1,maxConcurrentOpen,Integer.MAX_VALUE);
      blockers[i]=new BlockingWriterThread(limitedFs,path2,maxConcurrentOpen,Integer.MAX_VALUE);
    }
  }
  for (int i=0; i < numThreads; i++) {
    blockers[i].start();
    threads[i].start();
  }
  for (  CheckedThread t : threads) {
    try {
      t.sync();
    }
 catch (    LimitedConnectionsFileSystem.StreamTimeoutException e) {
    }
  }
  for (  BlockingThread t : blockers) {
    t.wakeup();
  }
  for (  BlockingThread t : blockers) {
    try {
      t.sync();
    }
 catch (    LimitedConnectionsFileSystem.StreamTimeoutException ignored) {
    }
  }
}
