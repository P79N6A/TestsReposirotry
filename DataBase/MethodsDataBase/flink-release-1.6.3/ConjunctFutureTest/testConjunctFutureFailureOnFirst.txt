@Test public void testConjunctFutureFailureOnFirst() throws Exception {
  java.util.concurrent.CompletableFuture<Object> future1=new java.util.concurrent.CompletableFuture<>();
  java.util.concurrent.CompletableFuture<Object> future2=new java.util.concurrent.CompletableFuture<>();
  java.util.concurrent.CompletableFuture<Object> future3=new java.util.concurrent.CompletableFuture<>();
  java.util.concurrent.CompletableFuture<Object> future4=new java.util.concurrent.CompletableFuture<>();
  ConjunctFuture<?> result=futureFactory.createFuture(Arrays.asList(future1,future2,future3,future4));
  CompletableFuture<?> resultMapped=result.thenAccept(value -> {
  }
);
  assertEquals(4,result.getNumFuturesTotal());
  assertEquals(0,result.getNumFuturesCompleted());
  assertFalse(result.isDone());
  assertFalse(resultMapped.isDone());
  future2.completeExceptionally(new IOException());
  assertEquals(0,result.getNumFuturesCompleted());
  assertTrue(result.isDone());
  assertTrue(resultMapped.isDone());
  try {
    result.get();
    fail();
  }
 catch (  ExecutionException e) {
    assertTrue(e.getCause() instanceof IOException);
  }
  try {
    resultMapped.get();
    fail();
  }
 catch (  ExecutionException e) {
    assertTrue(e.getCause() instanceof IOException);
  }
}
