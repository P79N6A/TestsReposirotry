@Test public void testConjunctFutureCompletion() throws Exception {
  java.util.concurrent.CompletableFuture<Object> future1=new java.util.concurrent.CompletableFuture<>();
  java.util.concurrent.CompletableFuture<Object> future2=new java.util.concurrent.CompletableFuture<>();
  java.util.concurrent.CompletableFuture<Object> future3=new java.util.concurrent.CompletableFuture<>();
  java.util.concurrent.CompletableFuture<Object> future4=new java.util.concurrent.CompletableFuture<>();
  future2.complete(new Object());
  ConjunctFuture<?> result=futureFactory.createFuture(Arrays.asList(future1,future2,future3,future4));
  CompletableFuture<?> resultMapped=result.thenAccept(value -> {
  }
);
  assertEquals(4,result.getNumFuturesTotal());
  assertEquals(1,result.getNumFuturesCompleted());
  assertFalse(result.isDone());
  assertFalse(resultMapped.isDone());
  future4.complete(new Object());
  assertEquals(2,result.getNumFuturesCompleted());
  assertFalse(result.isDone());
  assertFalse(resultMapped.isDone());
  future1.complete(new Object());
  assertEquals(3,result.getNumFuturesCompleted());
  assertFalse(result.isDone());
  assertFalse(resultMapped.isDone());
  future1.complete(new Object());
  assertEquals(3,result.getNumFuturesCompleted());
  assertFalse(result.isDone());
  assertFalse(resultMapped.isDone());
  future3.complete(new Object());
  assertEquals(4,result.getNumFuturesCompleted());
  assertTrue(result.isDone());
  assertTrue(resultMapped.isDone());
}
