/** 
 * Test ensuring that the producer is not dropping buffered records; we set a timeout because the test will not finish if the logic is broken.
 */
@SuppressWarnings({"unchecked","ResultOfMethodCallIgnored"}) @Test(timeout=10000) public void testAtLeastOnceProducer() throws Throwable {
  final DummyFlinkKinesisProducer<String> producer=new DummyFlinkKinesisProducer<>(new SimpleStringSchema());
  OneInputStreamOperatorTestHarness<String,Object> testHarness=new OneInputStreamOperatorTestHarness<>(new StreamSink<>(producer));
  testHarness.open();
  testHarness.processElement(new StreamRecord<>("msg-1"));
  testHarness.processElement(new StreamRecord<>("msg-2"));
  testHarness.processElement(new StreamRecord<>("msg-3"));
  CheckedThread snapshotThread=new CheckedThread(){
    @Override public void go() throws Exception {
      testHarness.snapshot(123L,123L);
    }
  }
;
  snapshotThread.start();
  producer.waitUntilFlushStarted();
  Assert.assertTrue("Snapshot returned before all records were flushed",snapshotThread.isAlive());
  UserRecordResult result=mock(UserRecordResult.class);
  when(result.isSuccessful()).thenReturn(true);
  producer.getPendingRecordFutures().get(0).set(result);
  Assert.assertTrue("Snapshot returned before all records were flushed",snapshotThread.isAlive());
  producer.getPendingRecordFutures().get(1).set(result);
  Assert.assertTrue("Snapshot returned before all records were flushed",snapshotThread.isAlive());
  producer.getPendingRecordFutures().get(2).set(result);
  snapshotThread.sync();
  testHarness.close();
}
