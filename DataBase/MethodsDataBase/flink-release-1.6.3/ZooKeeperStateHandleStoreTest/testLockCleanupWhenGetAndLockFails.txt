/** 
 * FLINK-6612 Tests that getAndLock removes a created lock if the RetrievableStateHandle cannot be retrieved (e.g. deserialization problem).
 */
@Test public void testLockCleanupWhenGetAndLockFails() throws Exception {
  LongStateStorage longStateStorage=new LongStateStorage();
  ZooKeeperStateHandleStore<Long> zkStore1=new ZooKeeperStateHandleStore<>(ZOOKEEPER.getClient(),longStateStorage);
  ZooKeeperStateHandleStore<Long> zkStore2=new ZooKeeperStateHandleStore<>(ZOOKEEPER.getClient(),longStateStorage);
  final String path="/state";
  zkStore1.addAndLock(path,42L);
  final byte[] corruptedData={1,2};
  ZOOKEEPER.getClient().setData().forPath(path,corruptedData);
  try {
    zkStore2.getAndLock(path);
    fail("Should fail because we cannot deserialize the node's data");
  }
 catch (  IOException ignored) {
  }
  String lockNodePath=zkStore2.getLockPath(path);
  Stat stat=ZOOKEEPER.getClient().checkExists().forPath(lockNodePath);
  assertNull("zkStore2 should not have created a lock node.",stat);
  Collection<String> children=ZOOKEEPER.getClient().getChildren().forPath(path);
  assertEquals(1,children.size());
  zkStore1.releaseAndTryRemove(path);
  stat=ZOOKEEPER.getClient().checkExists().forPath(path);
  assertNull("The state node should have been removed.",stat);
}
