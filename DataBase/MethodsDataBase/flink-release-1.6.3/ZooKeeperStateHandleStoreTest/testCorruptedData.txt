/** 
 * Tests that the ZooKeeperStateHandleStore can handle corrupted data by releasing and trying to remove the respective ZooKeeper ZNodes.
 */
@Test public void testCorruptedData() throws Exception {
  LongStateStorage stateStorage=new LongStateStorage();
  ZooKeeperStateHandleStore<Long> store=new ZooKeeperStateHandleStore<>(ZOOKEEPER.getClient(),stateStorage);
  final Collection<Long> input=new HashSet<>();
  input.add(1L);
  input.add(2L);
  input.add(3L);
  for (  Long aLong : input) {
    store.addAndLock("/" + aLong,aLong);
  }
  ZOOKEEPER.getClient().setData().forPath("/" + 2,new byte[2]);
  List<Tuple2<RetrievableStateHandle<Long>,String>> allEntries=store.getAllAndLock();
  Collection<Long> expected=new HashSet<>(input);
  expected.remove(2L);
  Collection<Long> actual=new HashSet<>(expected.size());
  for (  Tuple2<RetrievableStateHandle<Long>,String> entry : allEntries) {
    actual.add(entry.f0.retrieveState());
  }
  assertEquals(expected,actual);
  allEntries=store.getAllSortedByNameAndLock();
  actual.clear();
  for (  Tuple2<RetrievableStateHandle<Long>,String> entry : allEntries) {
    actual.add(entry.f0.retrieveState());
  }
  assertEquals(expected,actual);
  Stat stat=ZOOKEEPER.getClient().checkExists().forPath("/" + 2);
  assertNull("The corrupted node should no longer exist.",stat);
}
