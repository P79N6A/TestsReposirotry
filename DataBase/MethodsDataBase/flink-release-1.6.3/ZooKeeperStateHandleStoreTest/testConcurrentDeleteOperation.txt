/** 
 * FLINK-6612 Tests that a concurrent delete operation cannot succeed if another instance holds a lock on the specified node.
 */
@Test public void testConcurrentDeleteOperation() throws Exception {
  LongStateStorage longStateStorage=new LongStateStorage();
  ZooKeeperStateHandleStore<Long> zkStore1=new ZooKeeperStateHandleStore<>(ZOOKEEPER.getClient(),longStateStorage);
  ZooKeeperStateHandleStore<Long> zkStore2=new ZooKeeperStateHandleStore<>(ZOOKEEPER.getClient(),longStateStorage);
  final String statePath="/state";
  zkStore1.addAndLock(statePath,42L);
  RetrievableStateHandle<Long> stateHandle=zkStore2.getAndLock(statePath);
  zkStore1.releaseAndTryRemove(statePath);
  assertEquals(42L,(long)stateHandle.retrieveState());
  Stat nodeStat=ZOOKEEPER.getClient().checkExists().forPath(statePath);
  assertNotNull("NodeStat should not be null, otherwise the referenced node does not exist.",nodeStat);
  zkStore2.releaseAndTryRemove(statePath);
  nodeStat=ZOOKEEPER.getClient().checkExists().forPath(statePath);
  assertNull("NodeState should be null, because the referenced node should no longer exist.",nodeStat);
}
