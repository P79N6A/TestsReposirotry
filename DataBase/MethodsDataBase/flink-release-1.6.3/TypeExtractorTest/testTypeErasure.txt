@SuppressWarnings({"unchecked","rawtypes"}) @Test public void testTypeErasure(){
  TypeInformation<?> ti=TypeExtractor.getFlatMapReturnTypes(new DummyFlatMapFunction<String,Integer,String,Boolean>(),(TypeInformation)TypeInformation.of(new TypeHint<Tuple2<String,Integer>>(){
  }
),"name",true);
  Assert.assertTrue(ti instanceof MissingTypeInfo);
  try {
    TypeExtractor.getFlatMapReturnTypes(new DummyFlatMapFunction<String,Integer,String,Boolean>(),(TypeInformation)TypeInformation.of(new TypeHint<Tuple2<String,Integer>>(){
    }
));
    Assert.fail("Expected an exception");
  }
 catch (  InvalidTypesException e) {
  }
}
