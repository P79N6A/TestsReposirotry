@SuppressWarnings({"rawtypes","unchecked"}) @Test public void testInputMismatchExceptions(){
  RichMapFunction<?,?> function=new RichMapFunction<Tuple2<String,String>,String>(){
    private static final long serialVersionUID=1L;
    @Override public String map(    Tuple2<String,String> value) throws Exception {
      return null;
    }
  }
;
  try {
    TypeExtractor.getMapReturnTypes(function,(TypeInformation)TypeInformation.of(new TypeHint<Tuple2<Integer,String>>(){
    }
));
    Assert.fail("exception expected");
  }
 catch (  InvalidTypesException e) {
  }
  try {
    TypeExtractor.getMapReturnTypes(function,(TypeInformation)TypeInformation.of(new TypeHint<Tuple3<String,String,String>>(){
    }
));
    Assert.fail("exception expected");
  }
 catch (  InvalidTypesException e) {
  }
  RichMapFunction<?,?> function2=new RichMapFunction<StringValue,String>(){
    private static final long serialVersionUID=1L;
    @Override public String map(    StringValue value) throws Exception {
      return null;
    }
  }
;
  try {
    TypeExtractor.getMapReturnTypes(function2,(TypeInformation)TypeInformation.of(new TypeHint<IntValue>(){
    }
));
    Assert.fail("exception expected");
  }
 catch (  InvalidTypesException e) {
  }
  RichMapFunction<?,?> function3=new RichMapFunction<Tuple1<Integer>[],String>(){
    private static final long serialVersionUID=1L;
    @Override public String map(    Tuple1<Integer>[] value) throws Exception {
      return null;
    }
  }
;
  try {
    TypeExtractor.getMapReturnTypes(function3,(TypeInformation)TypeInformation.of(new TypeHint<Integer[]>(){
    }
));
    Assert.fail("exception expected");
  }
 catch (  InvalidTypesException e) {
  }
}
