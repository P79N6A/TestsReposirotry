@Test public void testStateAndTimerStateShufflingScalingDown() throws Exception {
  final int maxParallelism=10;
  KeyGroupRange subKeyGroupRange1=new KeyGroupRange(0,(maxParallelism / 2) - 1);
  KeyGroupRange subKeyGroupRange2=new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1,maxParallelism - 1);
  int key1=getKeyInKeyGroupRange(subKeyGroupRange1,maxParallelism);
  int key2=getKeyInKeyGroupRange(subKeyGroupRange2,maxParallelism);
  TestOperator testOperator1=new TestOperator();
  KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1=new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,0);
  testHarness1.setup();
  testHarness1.open();
  testHarness1.processWatermark(0L);
  testHarness1.setProcessingTime(0L);
  TestOperator testOperator2=new TestOperator();
  KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness2=new KeyedOneInputStreamOperatorTestHarness<>(testOperator2,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,1);
  testHarness2.setup();
  testHarness2.open();
  testHarness2.processWatermark(0L);
  testHarness2.setProcessingTime(0L);
  testHarness1.processElement(new Tuple2<>(key1,"SET_EVENT_TIME_TIMER:30"),0);
  testHarness1.processElement(new Tuple2<>(key1,"SET_PROC_TIME_TIMER:30"),0);
  testHarness1.processElement(new Tuple2<>(key1,"SET_STATE:HELLO"),0);
  testHarness2.processElement(new Tuple2<>(key2,"SET_EVENT_TIME_TIMER:40"),0);
  testHarness2.processElement(new Tuple2<>(key2,"SET_PROC_TIME_TIMER:40"),0);
  testHarness2.processElement(new Tuple2<>(key2,"SET_STATE:CIAO"),0);
  OperatorSubtaskState repackagedState=AbstractStreamOperatorTestHarness.repackageState(testHarness1.snapshot(0,0),testHarness2.snapshot(0,0));
  TestOperator testOperator3=new TestOperator();
  KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness3=new KeyedOneInputStreamOperatorTestHarness<>(testOperator3,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,1,0);
  testHarness3.setup();
  testHarness3.initializeState(repackagedState);
  testHarness3.open();
  testHarness3.processWatermark(30L);
  assertThat(extractResult(testHarness3),contains("ON_EVENT_TIME:HELLO"));
  assertTrue(extractResult(testHarness3).isEmpty());
  testHarness3.processWatermark(40L);
  assertThat(extractResult(testHarness3),contains("ON_EVENT_TIME:CIAO"));
  assertTrue(extractResult(testHarness3).isEmpty());
  testHarness3.setProcessingTime(30L);
  assertThat(extractResult(testHarness3),contains("ON_PROC_TIME:HELLO"));
  assertTrue(extractResult(testHarness3).isEmpty());
  testHarness3.setProcessingTime(40L);
  assertThat(extractResult(testHarness3),contains("ON_PROC_TIME:CIAO"));
  assertTrue(extractResult(testHarness3).isEmpty());
}
