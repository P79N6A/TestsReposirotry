/** 
 * Verify that state and timers are checkpointed per key group and that they are correctly assigned to operator subtasks when restoring.
 */
@Test public void testStateAndTimerStateShufflingScalingUp() throws Exception {
  final int maxParallelism=10;
  KeyGroupRange subKeyGroupRange1=new KeyGroupRange(0,(maxParallelism / 2) - 1);
  KeyGroupRange subKeyGroupRange2=new KeyGroupRange(subKeyGroupRange1.getEndKeyGroup() + 1,maxParallelism - 1);
  int key1=getKeyInKeyGroupRange(subKeyGroupRange1,maxParallelism);
  int key2=getKeyInKeyGroupRange(subKeyGroupRange2,maxParallelism);
  TestOperator testOperator=new TestOperator();
  KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(testOperator,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,1,0);
  testHarness.open();
  testHarness.processWatermark(0L);
  testHarness.setProcessingTime(0L);
  testHarness.processElement(new Tuple2<>(key1,"SET_EVENT_TIME_TIMER:10"),0);
  testHarness.processElement(new Tuple2<>(key2,"SET_EVENT_TIME_TIMER:20"),0);
  testHarness.processElement(new Tuple2<>(key1,"SET_PROC_TIME_TIMER:10"),0);
  testHarness.processElement(new Tuple2<>(key2,"SET_PROC_TIME_TIMER:20"),0);
  testHarness.processElement(new Tuple2<>(key1,"SET_STATE:HELLO"),0);
  testHarness.processElement(new Tuple2<>(key2,"SET_STATE:CIAO"),0);
  assertTrue(extractResult(testHarness).isEmpty());
  OperatorSubtaskState snapshot=testHarness.snapshot(0,0);
  TestOperator testOperator1=new TestOperator();
  KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness1=new KeyedOneInputStreamOperatorTestHarness<>(testOperator1,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,0);
  testHarness1.setup();
  testHarness1.initializeState(snapshot);
  testHarness1.open();
  testHarness1.processWatermark(10L);
  assertThat(extractResult(testHarness1),contains("ON_EVENT_TIME:HELLO"));
  assertTrue(extractResult(testHarness1).isEmpty());
  testHarness1.processWatermark(20L);
  assertTrue(extractResult(testHarness1).isEmpty());
  testHarness1.setProcessingTime(10L);
  assertThat(extractResult(testHarness1),contains("ON_PROC_TIME:HELLO"));
  assertTrue(extractResult(testHarness1).isEmpty());
  testHarness1.setProcessingTime(20L);
  assertTrue(extractResult(testHarness1).isEmpty());
  TestOperator testOperator2=new TestOperator();
  KeyedOneInputStreamOperatorTestHarness<Integer,Tuple2<Integer,String>,String> testHarness2=new KeyedOneInputStreamOperatorTestHarness<>(testOperator2,new TestKeySelector(),BasicTypeInfo.INT_TYPE_INFO,maxParallelism,2,1);
  testHarness2.setup();
  testHarness2.initializeState(snapshot);
  testHarness2.open();
  testHarness2.processWatermark(10L);
  assertTrue(extractResult(testHarness2).isEmpty());
  testHarness2.processWatermark(20L);
  assertThat(extractResult(testHarness2),contains("ON_EVENT_TIME:CIAO"));
  testHarness2.setProcessingTime(10L);
  assertTrue(extractResult(testHarness2).isEmpty());
  testHarness2.setProcessingTime(20L);
  assertThat(extractResult(testHarness2),contains("ON_PROC_TIME:CIAO"));
  assertTrue(extractResult(testHarness2).isEmpty());
}
