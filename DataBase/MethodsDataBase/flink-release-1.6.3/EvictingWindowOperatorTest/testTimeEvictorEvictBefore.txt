/** 
 * Tests TimeEvictor evictBefore behavior.
 */
@Test public void testTimeEvictorEvictBefore() throws Exception {
  AtomicInteger closeCalled=new AtomicInteger(0);
  final int triggerCount=2;
  final int windowSize=4;
  @SuppressWarnings({"unchecked","rawtypes"}) TypeSerializer<StreamRecord<Tuple2<String,Integer>>> streamRecordSerializer=(TypeSerializer<StreamRecord<Tuple2<String,Integer>>>)new StreamElementSerializer(STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
  ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc=new ListStateDescriptor<>("window-contents",streamRecordSerializer);
  EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator=new EvictingWindowOperator<>(TumblingEventTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<TimeWindow>(closeCalled)),CountTrigger.of(triggerCount),TimeEvictor.of(Time.seconds(2)),0,null);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO);
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 20));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 5999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 2001));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1001));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",1),3999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",2),3999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",3),3999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 6500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1002));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",2),7999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",3),3999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.close();
  Assert.assertEquals("Close was not called.",1,closeCalled.get());
}
