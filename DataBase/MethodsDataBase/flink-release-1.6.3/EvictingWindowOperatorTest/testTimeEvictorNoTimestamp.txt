/** 
 * Tests time evictor, if no timestamp information in the StreamRecord. No element will be evicted from the window.
 */
@Test public void testTimeEvictorNoTimestamp() throws Exception {
  AtomicInteger closeCalled=new AtomicInteger(0);
  final int triggerCount=2;
  final boolean evictAfter=true;
  @SuppressWarnings({"unchecked","rawtypes"}) TypeSerializer<StreamRecord<Tuple2<String,Integer>>> streamRecordSerializer=(TypeSerializer<StreamRecord<Tuple2<String,Integer>>>)new StreamElementSerializer(STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
  ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc=new ListStateDescriptor<>("window-contents",streamRecordSerializer);
  EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator=new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(triggerCount),TimeEvictor.of(Time.seconds(2),evictAfter),0,null);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1)));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1)));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1)));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1)));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1)));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1)));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1)));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1)));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",2),Long.MAX_VALUE));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",2),Long.MAX_VALUE));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",4),Long.MAX_VALUE));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1)));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1)));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",4),Long.MAX_VALUE));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",6),Long.MAX_VALUE));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.close();
  Assert.assertEquals("Close was not called.",1,closeCalled.get());
}
