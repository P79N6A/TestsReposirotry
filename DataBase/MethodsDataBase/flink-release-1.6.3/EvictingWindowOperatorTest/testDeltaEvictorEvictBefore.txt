/** 
 * Tests DeltaEvictor, evictBefore behavior.
 */
@Test public void testDeltaEvictorEvictBefore() throws Exception {
  AtomicInteger closeCalled=new AtomicInteger(0);
  final int triggerCount=2;
  final boolean evictAfter=false;
  final int threshold=2;
  @SuppressWarnings({"unchecked","rawtypes"}) TypeSerializer<StreamRecord<Tuple2<String,Integer>>> streamRecordSerializer=(TypeSerializer<StreamRecord<Tuple2<String,Integer>>>)new StreamElementSerializer(STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
  ListStateDescriptor<StreamRecord<Tuple2<String,Integer>>> stateDesc=new ListStateDescriptor<>("window-contents",streamRecordSerializer);
  EvictingWindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,GlobalWindow> operator=new EvictingWindowOperator<>(GlobalWindows.create(),new GlobalWindow.Serializer(),new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new RichSumReducer<GlobalWindow>(closeCalled)),CountTrigger.of(triggerCount),DeltaEvictor.of(threshold,new DeltaFunction<Tuple2<String,Integer>>(){
    @Override public double getDelta(    Tuple2<String,Integer> oldDataPoint,    Tuple2<String,Integer> newDataPoint){
      return newDataPoint.f1 - oldDataPoint.f1;
    }
  }
,evictAfter),0,null);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector(),BasicTypeInfo.STRING_TYPE_INFO);
  long initialTime=0L;
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 3000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",4),initialTime + 3999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime + 20));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),initialTime));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",5),initialTime + 999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",5),initialTime + 1998));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",6),initialTime + 1999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),initialTime + 1000));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",4),Long.MAX_VALUE));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",11),Long.MAX_VALUE));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",2),Long.MAX_VALUE));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",3),initialTime + 10999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",10),initialTime + 1000));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",8),Long.MAX_VALUE));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",10),Long.MAX_VALUE));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new ResultSortComparator());
  testHarness.close();
  Assert.assertEquals("Close was not called.",1,closeCalled.get());
}
