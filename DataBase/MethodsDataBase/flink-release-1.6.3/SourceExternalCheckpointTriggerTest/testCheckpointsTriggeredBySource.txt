@Test @SuppressWarnings("unchecked") public void testCheckpointsTriggeredBySource() throws Exception {
  final StreamTaskTestHarness<Long> testHarness=new StreamTaskTestHarness<>(SourceStreamTask::new,BasicTypeInfo.LONG_TYPE_INFO);
  testHarness.setupOutputForSingletonOperatorChain();
  testHarness.getExecutionConfig().setLatencyTrackingInterval(-1);
  final long numElements=10;
  final long checkpointEvery=3;
  ExternalCheckpointsSource source=new ExternalCheckpointsSource(numElements,checkpointEvery);
  StreamConfig streamConfig=testHarness.getStreamConfig();
  StreamSource<Long,?> sourceOperator=new StreamSource<>(source);
  streamConfig.setStreamOperator(sourceOperator);
  streamConfig.setOperatorID(new OperatorID());
  testHarness.invoke();
  final StreamTask<Long,?> sourceTask=testHarness.getTask();
  ready.await();
  assertTrue(sourceTask.triggerCheckpoint(new CheckpointMetaData(32,829),CheckpointOptions.forCheckpointWithDefaultLocation()));
  sync.trigger();
  verifyNextElement(testHarness.getOutput(),1L);
  sync.trigger();
  verifyNextElement(testHarness.getOutput(),2L);
  sync.trigger();
  verifyNextElement(testHarness.getOutput(),3L);
  verifyCheckpointBarrier(testHarness.getOutput(),1L);
  sync.trigger();
  verifyNextElement(testHarness.getOutput(),4L);
  assertTrue(sourceTask.triggerCheckpoint(new CheckpointMetaData(34,900),CheckpointOptions.forCheckpointWithDefaultLocation()));
  sync.trigger();
  verifyNextElement(testHarness.getOutput(),5L);
  sync.trigger();
  verifyNextElement(testHarness.getOutput(),6L);
  verifyCheckpointBarrier(testHarness.getOutput(),2L);
  for (long l=7L, checkpoint=3L; l <= numElements; l++) {
    sync.trigger();
    verifyNextElement(testHarness.getOutput(),l);
    if (l % checkpointEvery == 0) {
      verifyCheckpointBarrier(testHarness.getOutput(),checkpoint++);
    }
  }
}
