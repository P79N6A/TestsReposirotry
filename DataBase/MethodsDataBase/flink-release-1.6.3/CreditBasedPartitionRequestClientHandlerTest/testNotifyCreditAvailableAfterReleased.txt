/** 
 * Verifies that  {@link RemoteInputChannel} is enqueued in the pipeline, but {@link AddCredit}message is not sent actually when this input channel is released.
 */
@Test public void testNotifyCreditAvailableAfterReleased() throws Exception {
  final CreditBasedPartitionRequestClientHandler handler=new CreditBasedPartitionRequestClientHandler();
  final EmbeddedChannel channel=new EmbeddedChannel(handler);
  final PartitionRequestClient client=new PartitionRequestClient(channel,handler,mock(ConnectionID.class),mock(PartitionRequestClientFactory.class));
  final NetworkBufferPool networkBufferPool=new NetworkBufferPool(10,32);
  final SingleInputGate inputGate=createSingleInputGate();
  final RemoteInputChannel inputChannel=createRemoteInputChannel(inputGate,client);
  try {
    final BufferPool bufferPool=networkBufferPool.createBufferPool(6,6);
    inputGate.setBufferPool(bufferPool);
    final int numExclusiveBuffers=2;
    inputGate.assignExclusiveSegments(networkBufferPool,numExclusiveBuffers);
    inputChannel.requestSubpartition(0);
    Object readFromOutbound=channel.readOutbound();
    assertThat(readFromOutbound,instanceOf(PartitionRequest.class));
    assertEquals(2,((PartitionRequest)readFromOutbound).credit);
    final BufferResponse bufferResponse=createBufferResponse(TestBufferFactory.createBuffer(32),0,inputChannel.getInputChannelId(),1);
    handler.channelRead(mock(ChannelHandlerContext.class),bufferResponse);
    assertEquals(2,inputChannel.getUnannouncedCredit());
    inputGate.releaseAllResources();
    readFromOutbound=channel.readOutbound();
    assertThat(readFromOutbound,instanceOf(CloseRequest.class));
    channel.runPendingTasks();
    assertNull(channel.readOutbound());
  }
  finally {
    inputGate.releaseAllResources();
    networkBufferPool.destroyAllBufferPools();
    networkBufferPool.destroy();
  }
}
