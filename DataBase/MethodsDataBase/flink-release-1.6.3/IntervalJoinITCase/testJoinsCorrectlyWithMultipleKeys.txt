@Test public void testJoinsCorrectlyWithMultipleKeys() throws Exception {
  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  env.setParallelism(1);
  KeyedStream<Tuple2<String,Integer>,String> streamOne=env.fromElements(Tuple2.of("key1",0),Tuple2.of("key2",1),Tuple2.of("key1",2),Tuple2.of("key2",3),Tuple2.of("key1",4),Tuple2.of("key2",5)).assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor()).keyBy(new Tuple2KeyExtractor());
  KeyedStream<Tuple2<String,Integer>,String> streamTwo=env.fromElements(Tuple2.of("key1",0),Tuple2.of("key2",1),Tuple2.of("key1",2),Tuple2.of("key2",3),Tuple2.of("key1",4),Tuple2.of("key2",5)).assignTimestampsAndWatermarks(new AscendingTuple2TimestampExtractor()).keyBy(new Tuple2KeyExtractor());
  streamOne.intervalJoin(streamTwo).between(Time.milliseconds(0),Time.milliseconds(1)).process(new CombineToStringJoinFunction()).addSink(new ResultSink());
  env.execute();
  expectInAnyOrder("(key1,0):(key1,0)","(key2,1):(key2,1)","(key1,2):(key1,2)","(key2,3):(key2,3)","(key1,4):(key1,4)","(key2,5):(key2,5)");
}
