@Test public void testBoundedUnorderedStreamsStillJoinCorrectly() throws Exception {
  final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  env.setParallelism(1);
  DataStream<Tuple2<String,Integer>> streamOne=env.addSource(new SourceFunction<Tuple2<String,Integer>>(){
    @Override public void run(    SourceContext<Tuple2<String,Integer>> ctx){
      ctx.collectWithTimestamp(Tuple2.of("key",5),5L);
      ctx.collectWithTimestamp(Tuple2.of("key",1),1L);
      ctx.collectWithTimestamp(Tuple2.of("key",4),4L);
      ctx.collectWithTimestamp(Tuple2.of("key",3),3L);
      ctx.collectWithTimestamp(Tuple2.of("key",2),2L);
      ctx.emitWatermark(new Watermark(5));
      ctx.collectWithTimestamp(Tuple2.of("key",9),9L);
      ctx.collectWithTimestamp(Tuple2.of("key",8),8L);
      ctx.collectWithTimestamp(Tuple2.of("key",7),7L);
      ctx.collectWithTimestamp(Tuple2.of("key",6),6L);
    }
    @Override public void cancel(){
    }
  }
);
  DataStream<Tuple2<String,Integer>> streamTwo=env.addSource(new SourceFunction<Tuple2<String,Integer>>(){
    @Override public void run(    SourceContext<Tuple2<String,Integer>> ctx){
      ctx.collectWithTimestamp(Tuple2.of("key",2),2L);
      ctx.collectWithTimestamp(Tuple2.of("key",1),1L);
      ctx.collectWithTimestamp(Tuple2.of("key",3),3L);
      ctx.collectWithTimestamp(Tuple2.of("key",4),4L);
      ctx.collectWithTimestamp(Tuple2.of("key",5),5L);
      ctx.emitWatermark(new Watermark(5));
      ctx.collectWithTimestamp(Tuple2.of("key",8),8L);
      ctx.collectWithTimestamp(Tuple2.of("key",7),7L);
      ctx.collectWithTimestamp(Tuple2.of("key",9),9L);
      ctx.collectWithTimestamp(Tuple2.of("key",6),6L);
    }
    @Override public void cancel(){
    }
  }
);
  streamOne.keyBy(new Tuple2KeyExtractor()).intervalJoin(streamTwo.keyBy(new Tuple2KeyExtractor())).between(Time.milliseconds(-1),Time.milliseconds(1)).process(new CombineToStringJoinFunction()).addSink(new ResultSink());
  env.execute();
  expectInAnyOrder("(key,1):(key,1)","(key,1):(key,2)","(key,2):(key,1)","(key,2):(key,2)","(key,2):(key,3)","(key,3):(key,2)","(key,3):(key,3)","(key,3):(key,4)","(key,4):(key,3)","(key,4):(key,4)","(key,4):(key,5)","(key,5):(key,4)","(key,5):(key,5)","(key,5):(key,6)","(key,6):(key,5)","(key,6):(key,6)","(key,6):(key,7)","(key,7):(key,6)","(key,7):(key,7)","(key,7):(key,8)","(key,8):(key,7)","(key,8):(key,8)","(key,8):(key,9)","(key,9):(key,8)","(key,9):(key,9)");
}
