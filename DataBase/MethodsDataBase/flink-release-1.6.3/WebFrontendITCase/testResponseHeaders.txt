@Test public void testResponseHeaders() throws Exception {
  URL taskManagersUrl=new URL("http://localhost:" + CLUSTER.getWebUIPort() + "/taskmanagers");
  HttpURLConnection taskManagerConnection=(HttpURLConnection)taskManagersUrl.openConnection();
  taskManagerConnection.setConnectTimeout(100000);
  taskManagerConnection.connect();
  if (taskManagerConnection.getResponseCode() >= 400) {
    InputStream is=taskManagerConnection.getErrorStream();
    String errorMessage=IOUtils.toString(is,ConfigConstants.DEFAULT_CHARSET);
    throw new RuntimeException(errorMessage);
  }
  Assert.assertNull(taskManagerConnection.getContentEncoding());
  Assert.assertEquals("application/json; charset=UTF-8",taskManagerConnection.getContentType());
  URL notFoundJobUrl=new URL("http://localhost:" + CLUSTER.getWebUIPort() + "/jobs/dontexist");
  HttpURLConnection notFoundJobConnection=(HttpURLConnection)notFoundJobUrl.openConnection();
  notFoundJobConnection.setConnectTimeout(100000);
  notFoundJobConnection.connect();
  if (notFoundJobConnection.getResponseCode() >= 400) {
    Assert.assertNull(notFoundJobConnection.getContentEncoding());
    if (CLUSTER.getCodebaseType() == TestBaseUtils.CodebaseType.NEW) {
      Assert.assertEquals("application/json; charset=UTF-8",notFoundJobConnection.getContentType());
    }
 else {
      Assert.assertEquals("text/plain; charset=UTF-8",notFoundJobConnection.getContentType());
    }
  }
 else {
    throw new RuntimeException("Request for non-existing job did not return an error.");
  }
}
