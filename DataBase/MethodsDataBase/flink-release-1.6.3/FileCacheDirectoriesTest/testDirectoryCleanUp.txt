@Test public void testDirectoryCleanUp() throws Exception {
  JobID jobID=new JobID();
  ExecutionAttemptID attemptID1=new ExecutionAttemptID();
  ExecutionAttemptID attemptID2=new ExecutionAttemptID();
  final String fileName="test_file";
  final DistributedCache.DistributedCacheEntry entry=new DistributedCache.DistributedCacheEntry(fileName,false,InstantiationUtil.serializeObject(permanentBlobKey),true);
  Future<Path> copyResult=fileCache.createTmpFile(fileName,entry,jobID,attemptID1);
  fileCache.createTmpFile(fileName,entry,jobID,attemptID2);
  final Path dstPath=copyResult.get();
  final FileSystem fs=dstPath.getFileSystem();
  final FileStatus fileStatus=fs.getFileStatus(dstPath);
  final Path cacheFile=new Path(dstPath,"cacheFile");
  assertTrue(fileStatus.isDir());
  assertTrue(fs.exists(cacheFile));
  fileCache.releaseJob(jobID,attemptID1);
  assertTrue(fileStatus.isDir());
  assertTrue(fs.exists(cacheFile));
  fileCache.releaseJob(jobID,attemptID2);
  assertTrue(fileStatus.isDir());
  assertTrue(fs.exists(cacheFile));
  assertEquals(CLEANUP_INTERVAL,executorService.lastDelayMillis);
  executorService.lastDeleteProcess.run();
  assertFalse(fs.exists(dstPath));
  assertFalse(fs.exists(cacheFile));
}
