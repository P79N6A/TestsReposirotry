@Test public void testReadWithCharset() throws IOException {
  String[] records=new String[]{"\u020e\u021f","Flink","\u020b\u020f"};
  String delimiter="\u05c0\u05c0";
  String fileContent=StringUtils.join(records,delimiter);
  GenericCsvInputFormat<String[]> format=new GenericCsvInputFormat<String[]>(){
    @Override public String[] readRecord(    String[] target,    byte[] bytes,    int offset,    int numBytes) throws IOException {
      return parseRecord(target,bytes,offset,numBytes) ? target : null;
    }
  }
;
  format.setFilePath("file:///some/file/that/will/not/be/read");
  for (  String charset : new String[]{"UTF-8","UTF-16BE","UTF-16LE"}) {
    File tempFile=File.createTempFile("test_contents","tmp");
    tempFile.deleteOnExit();
    try (Writer out=new OutputStreamWriter(new FileOutputStream(tempFile),charset)){
      out.write(fileContent);
    }
     FileInputSplit split=new FileInputSplit(0,new Path(tempFile.toURI().toString()),0,tempFile.length(),new String[]{"localhost"});
    format.setFieldDelimiter(delimiter);
    format.setFieldTypesGeneric(String.class,String.class,String.class);
    format.setCharset(charset);
    format.configure(new Configuration());
    format.open(split);
    String[] values=new String[]{"","",""};
    values=format.nextRecord(values);
    assertNotNull(values);
    for (int i=0; i < records.length; i++) {
      assertEquals(records[i],values[i]);
    }
    assertNull(format.nextRecord(values));
    assertTrue(format.reachedEnd());
  }
  format.close();
}
