/** 
 * This test triggers incremental rehash and tests for corruptions.
 */
@Test public void testIncrementalRehash(){
  RegisteredKeyValueStateBackendMetaInfo<Integer,ArrayList<Integer>> metaInfo=new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.UNKNOWN,"test",IntSerializer.INSTANCE,new ArrayListSerializer<>(IntSerializer.INSTANCE));
  final MockInternalKeyContext<Integer> keyContext=new MockInternalKeyContext<>(IntSerializer.INSTANCE);
  final CopyOnWriteStateTable<Integer,Integer,ArrayList<Integer>> stateTable=new CopyOnWriteStateTable<>(keyContext,metaInfo);
  int insert=0;
  int remove=0;
  while (!stateTable.isRehashing()) {
    stateTable.put(insert++,0,new ArrayList<Integer>());
    if (insert % 8 == 0) {
      stateTable.remove(remove++,0);
    }
  }
  Assert.assertEquals(insert - remove,stateTable.size());
  while (stateTable.isRehashing()) {
    stateTable.put(insert++,0,new ArrayList<Integer>());
    if (insert % 8 == 0) {
      stateTable.remove(remove++,0);
    }
  }
  Assert.assertEquals(insert - remove,stateTable.size());
  for (int i=0; i < insert; ++i) {
    if (i < remove) {
      Assert.assertFalse(stateTable.containsKey(i,0));
    }
 else {
      Assert.assertTrue(stateTable.containsKey(i,0));
    }
  }
}
