/** 
 * Testing the basic map operations.
 */
@Test public void testPutGetRemoveContainsTransform() throws Exception {
  RegisteredKeyValueStateBackendMetaInfo<Integer,ArrayList<Integer>> metaInfo=new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.UNKNOWN,"test",IntSerializer.INSTANCE,new ArrayListSerializer<>(IntSerializer.INSTANCE));
  final MockInternalKeyContext<Integer> keyContext=new MockInternalKeyContext<>(IntSerializer.INSTANCE);
  final CopyOnWriteStateTable<Integer,Integer,ArrayList<Integer>> stateTable=new CopyOnWriteStateTable<>(keyContext,metaInfo);
  ArrayList<Integer> state_1_1=new ArrayList<>();
  state_1_1.add(41);
  ArrayList<Integer> state_2_1=new ArrayList<>();
  state_2_1.add(42);
  ArrayList<Integer> state_1_2=new ArrayList<>();
  state_1_2.add(43);
  Assert.assertNull(stateTable.putAndGetOld(1,1,state_1_1));
  Assert.assertEquals(state_1_1,stateTable.get(1,1));
  Assert.assertEquals(1,stateTable.size());
  Assert.assertNull(stateTable.putAndGetOld(2,1,state_2_1));
  Assert.assertEquals(state_2_1,stateTable.get(2,1));
  Assert.assertEquals(2,stateTable.size());
  Assert.assertNull(stateTable.putAndGetOld(1,2,state_1_2));
  Assert.assertEquals(state_1_2,stateTable.get(1,2));
  Assert.assertEquals(3,stateTable.size());
  Assert.assertTrue(stateTable.containsKey(2,1));
  Assert.assertFalse(stateTable.containsKey(3,1));
  Assert.assertFalse(stateTable.containsKey(2,3));
  stateTable.put(2,1,null);
  Assert.assertTrue(stateTable.containsKey(2,1));
  Assert.assertEquals(3,stateTable.size());
  Assert.assertNull(stateTable.get(2,1));
  stateTable.put(2,1,state_2_1);
  Assert.assertEquals(3,stateTable.size());
  Assert.assertEquals(state_2_1,stateTable.removeAndGetOld(2,1));
  Assert.assertFalse(stateTable.containsKey(2,1));
  Assert.assertEquals(2,stateTable.size());
  stateTable.remove(1,2);
  Assert.assertFalse(stateTable.containsKey(1,2));
  Assert.assertEquals(1,stateTable.size());
  Assert.assertNull(stateTable.removeAndGetOld(4,2));
  Assert.assertEquals(1,stateTable.size());
  StateTransformationFunction<ArrayList<Integer>,Integer> function=new StateTransformationFunction<ArrayList<Integer>,Integer>(){
    @Override public ArrayList<Integer> apply(    ArrayList<Integer> previousState,    Integer value) throws Exception {
      previousState.add(value);
      return previousState;
    }
  }
;
  final int value=4711;
  stateTable.transform(1,1,value,function);
  state_1_1=function.apply(state_1_1,value);
  Assert.assertEquals(state_1_1,stateTable.get(1,1));
}
