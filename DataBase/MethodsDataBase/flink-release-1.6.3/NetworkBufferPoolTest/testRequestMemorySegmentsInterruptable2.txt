/** 
 * Tests  {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted and remains in a defined state even if the waiting is interrupted.
 */
@Test public void testRequestMemorySegmentsInterruptable2() throws Exception {
  final int numBuffers=10;
  NetworkBufferPool globalPool=new NetworkBufferPool(numBuffers,128);
  MemorySegment segment=globalPool.requestMemorySegment();
  assertNotNull(segment);
  final OneShotLatch isRunning=new OneShotLatch();
  CheckedThread asyncRequest=new CheckedThread(){
    @Override public void go() throws Exception {
      isRunning.trigger();
      globalPool.requestMemorySegments(10);
    }
  }
;
  asyncRequest.start();
  isRunning.await();
  Thread.sleep(10);
  asyncRequest.interrupt();
  globalPool.recycle(segment);
  try {
    asyncRequest.sync();
  }
 catch (  IOException e) {
    assertThat(e,hasProperty("cause",instanceOf(InterruptedException.class)));
    globalPool.createBufferPool(10,10);
  }
 finally {
    globalPool.destroy();
  }
}
