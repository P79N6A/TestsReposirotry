/** 
 * Tests  {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}currently not containing the number of required free segments (currently occupied by a buffer pool).
 */
@Test public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException {
  final int numBuffers=10;
  NetworkBufferPool networkBufferPool=new NetworkBufferPool(numBuffers,128);
  final List<Buffer> buffers=new ArrayList<>(numBuffers);
  List<MemorySegment> memorySegments=Collections.emptyList();
  Thread bufferRecycler=null;
  BufferPool lbp1=null;
  try {
    lbp1=networkBufferPool.createBufferPool(numBuffers / 2,numBuffers);
    for (int i=0; i < numBuffers; ++i) {
      Buffer buffer=lbp1.requestBuffer();
      buffers.add(buffer);
      assertNotNull(buffer);
    }
    final OneShotLatch isRunning=new OneShotLatch();
    bufferRecycler=new Thread(() -> {
      try {
        isRunning.trigger();
        Thread.sleep(100);
      }
 catch (      InterruptedException ignored) {
      }
      for (      Buffer buffer : buffers) {
        buffer.recycleBuffer();
      }
    }
);
    bufferRecycler.start();
    isRunning.await();
    memorySegments=networkBufferPool.requestMemorySegments(numBuffers / 2);
    assertThat(memorySegments,not(hasItem(nullValue())));
  }
  finally {
    if (bufferRecycler != null) {
      bufferRecycler.join();
    }
    if (lbp1 != null) {
      lbp1.lazyDestroy();
    }
    networkBufferPool.recycleMemorySegments(memorySegments);
    networkBufferPool.destroy();
  }
}
