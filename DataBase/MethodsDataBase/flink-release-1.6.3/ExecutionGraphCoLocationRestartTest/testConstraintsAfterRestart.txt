@Test public void testConstraintsAfterRestart() throws Exception {
  final long timeout=5000L;
  testingSlotProvider.addTaskManager(NUM_TASKS);
  JobVertex groupVertex=ExecutionGraphTestUtils.createNoOpVertex(NUM_TASKS);
  JobVertex groupVertex2=ExecutionGraphTestUtils.createNoOpVertex(NUM_TASKS);
  SlotSharingGroup sharingGroup=new SlotSharingGroup();
  groupVertex.setSlotSharingGroup(sharingGroup);
  groupVertex2.setSlotSharingGroup(sharingGroup);
  groupVertex.setStrictlyCoLocatedWith(groupVertex2);
  final ExecutionGraph eg=ExecutionGraphTestUtils.createSimpleTestGraph(new JobID(),testingSlotProvider,new OneTimeDirectRestartStrategy(),groupVertex,groupVertex2);
  if (schedulerType == SchedulerType.SLOT_POOL) {
    eg.setQueuedSchedulingAllowed(true);
  }
  assertEquals(JobStatus.CREATED,eg.getState());
  eg.scheduleForExecution();
  Predicate<Execution> isDeploying=ExecutionGraphTestUtils.isInExecutionState(ExecutionState.DEPLOYING);
  ExecutionGraphTestUtils.waitForAllExecutionsPredicate(eg,isDeploying,timeout);
  assertEquals(JobStatus.RUNNING,eg.getState());
  validateConstraints(eg);
  ExecutionGraphTestUtils.failExecutionGraph(eg,new FlinkException("Test exception"));
  ExecutionGraphTestUtils.waitUntilJobStatus(eg,JobStatus.RUNNING,timeout);
  ExecutionGraphTestUtils.waitForAllExecutionsPredicate(eg,isDeploying,timeout);
  validateConstraints(eg);
  ExecutionGraphTestUtils.finishAllVertices(eg);
  assertThat(eg.getState(),is(FINISHED));
}
