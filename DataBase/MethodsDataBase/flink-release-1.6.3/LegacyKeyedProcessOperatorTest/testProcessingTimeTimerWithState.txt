/** 
 * Verifies that we don't have leakage between different keys.
 */
@Test public void testProcessingTimeTimerWithState() throws Exception {
  LegacyKeyedProcessOperator<Integer,Integer,String> operator=new LegacyKeyedProcessOperator<>(new TriggeringStatefulFlatMapFunction(TimeDomain.PROCESSING_TIME));
  OneInputStreamOperatorTestHarness<Integer,String> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new IdentityKeySelector<Integer>(),BasicTypeInfo.INT_TYPE_INFO);
  testHarness.setup();
  testHarness.open();
  testHarness.setProcessingTime(1);
  testHarness.processElement(new StreamRecord<>(17));
  testHarness.setProcessingTime(2);
  testHarness.processElement(new StreamRecord<>(42));
  testHarness.setProcessingTime(6);
  testHarness.setProcessingTime(7);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  expectedOutput.add(new StreamRecord<>("INPUT:17"));
  expectedOutput.add(new StreamRecord<>("INPUT:42"));
  expectedOutput.add(new StreamRecord<>("STATE:17"));
  expectedOutput.add(new StreamRecord<>("STATE:42"));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.close();
}
