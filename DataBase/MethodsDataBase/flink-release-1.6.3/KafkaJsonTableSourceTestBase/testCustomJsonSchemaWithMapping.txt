@Test public void testCustomJsonSchemaWithMapping(){
  KafkaJsonTableSource.Builder b=(KafkaJsonTableSource.Builder)getBuilder();
  super.configureBuilder(b);
  b.withProctimeAttribute("time2");
  Map<String,String> mapping=new HashMap<>();
  mapping.put("field1","otherField1");
  mapping.put("field2","otherField2");
  mapping.put("field3","otherField3");
  b.forJsonSchema(TableSchema.builder().field("otherField1",Types.LONG()).field("otherField2",Types.STRING()).field("rowtime",Types.LONG()).field("otherField3",Types.DOUBLE()).field("otherField4",Types.BYTE()).field("otherField5",Types.INT()).build());
  b.withTableToJsonMapping(mapping);
  b.withRowtimeAttribute("time1",new ExistingField("timeField1"),new AscendingTimestamps());
  KafkaJsonTableSource source=(KafkaJsonTableSource)b.build();
  RowTypeInfo returnType=(RowTypeInfo)source.getReturnType();
  assertNotNull(returnType);
  assertEquals(6,returnType.getArity());
  assertEquals("otherField1",returnType.getFieldNames()[0]);
  assertEquals("otherField2",returnType.getFieldNames()[1]);
  assertEquals("rowtime",returnType.getFieldNames()[2]);
  assertEquals("otherField3",returnType.getFieldNames()[3]);
  assertEquals("otherField4",returnType.getFieldNames()[4]);
  assertEquals("otherField5",returnType.getFieldNames()[5]);
  assertEquals(Types.LONG(),returnType.getTypeAt(0));
  assertEquals(Types.STRING(),returnType.getTypeAt(1));
  assertEquals(Types.LONG(),returnType.getTypeAt(2));
  assertEquals(Types.DOUBLE(),returnType.getTypeAt(3));
  assertEquals(Types.BYTE(),returnType.getTypeAt(4));
  assertEquals(Types.INT(),returnType.getTypeAt(5));
  Map<String,String> fieldMapping=source.getFieldMapping();
  assertNotNull(fieldMapping);
  assertEquals(3,fieldMapping.size());
  assertEquals("otherField1",fieldMapping.get("field1"));
  assertEquals("otherField2",fieldMapping.get("field2"));
  assertEquals("otherField3",fieldMapping.get("field3"));
}
