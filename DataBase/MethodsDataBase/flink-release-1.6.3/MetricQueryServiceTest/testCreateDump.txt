@Test public void testCreateDump() throws Exception {
  ActorSystem s=AkkaUtils.createLocalActorSystem(new Configuration());
  ActorRef serviceActor=MetricQueryService.startMetricQueryService(s,null,Long.MAX_VALUE);
  TestActorRef testActorRef=TestActorRef.create(s,Props.create(TestActor.class));
  TestActor testActor=(TestActor)testActorRef.underlyingActor();
  final Counter c=new SimpleCounter();
  final Gauge<String> g=new Gauge<String>(){
    @Override public String getValue(){
      return "Hello";
    }
  }
;
  final Histogram h=new TestHistogram();
  final Meter m=new Meter(){
    @Override public void markEvent(){
    }
    @Override public void markEvent(    long n){
    }
    @Override public double getRate(){
      return 5;
    }
    @Override public long getCount(){
      return 10;
    }
  }
;
  MetricRegistryImpl registry=new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration());
  final TaskManagerMetricGroup tm=new TaskManagerMetricGroup(registry,"host","id");
  MetricQueryService.notifyOfAddedMetric(serviceActor,c,"counter",tm);
  MetricQueryService.notifyOfAddedMetric(serviceActor,g,"gauge",tm);
  MetricQueryService.notifyOfAddedMetric(serviceActor,h,"histogram",tm);
  MetricQueryService.notifyOfAddedMetric(serviceActor,m,"meter",tm);
  serviceActor.tell(MetricQueryService.getCreateDump(),testActorRef);
synchronized (testActor.lock) {
    if (testActor.message == null) {
      testActor.lock.wait();
    }
  }
  MetricDumpSerialization.MetricSerializationResult dump=(MetricDumpSerialization.MetricSerializationResult)testActor.message;
  testActor.message=null;
  assertTrue(dump.serializedCounters.length > 0);
  assertTrue(dump.serializedGauges.length > 0);
  assertTrue(dump.serializedHistograms.length > 0);
  assertTrue(dump.serializedMeters.length > 0);
  MetricQueryService.notifyOfRemovedMetric(serviceActor,c);
  MetricQueryService.notifyOfRemovedMetric(serviceActor,g);
  MetricQueryService.notifyOfRemovedMetric(serviceActor,h);
  MetricQueryService.notifyOfRemovedMetric(serviceActor,m);
  serviceActor.tell(MetricQueryService.getCreateDump(),testActorRef);
synchronized (testActor.lock) {
    if (testActor.message == null) {
      testActor.lock.wait();
    }
  }
  MetricDumpSerialization.MetricSerializationResult emptyDump=(MetricDumpSerialization.MetricSerializationResult)testActor.message;
  testActor.message=null;
  assertEquals(0,emptyDump.serializedCounters.length);
  assertEquals(0,emptyDump.serializedGauges.length);
  assertEquals(0,emptyDump.serializedHistograms.length);
  assertEquals(0,emptyDump.serializedMeters.length);
  s.terminate();
}
