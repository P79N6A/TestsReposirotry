@Test public void testHandleOversizedMetricMessage() throws Exception {
  ActorSystem s=AkkaUtils.createLocalActorSystem(new Configuration());
  final long sizeLimit=200L;
  ActorRef serviceActor=MetricQueryService.startMetricQueryService(s,null,sizeLimit);
  TestActorRef testActorRef=TestActorRef.create(s,Props.create(TestActor.class));
  TestActor testActor=(TestActor)testActorRef.underlyingActor();
  final Counter c=new SimpleCounter();
  final Histogram h=new TestHistogram();
  final Meter m=new Meter(){
    @Override public void markEvent(){
    }
    @Override public void markEvent(    long n){
    }
    @Override public double getRate(){
      return 5;
    }
    @Override public long getCount(){
      return 10;
    }
  }
;
  MetricRegistryImpl registry=new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration());
  final TaskManagerMetricGroup tm=new TaskManagerMetricGroup(registry,"host","id");
  final String gaugeValue="Hello";
  final long requiredGaugesToExceedLimit=sizeLimit / gaugeValue.length() + 1;
  List<Tuple2<String,Gauge<String>>> gauges=LongStream.range(0,requiredGaugesToExceedLimit).mapToObj(x -> Tuple2.of("gauge" + x,(Gauge<String>)() -> "Hello" + x)).collect(Collectors.toList());
  gauges.forEach(gauge -> MetricQueryService.notifyOfAddedMetric(serviceActor,gauge.f1,gauge.f0,tm));
  MetricQueryService.notifyOfAddedMetric(serviceActor,c,"counter",tm);
  MetricQueryService.notifyOfAddedMetric(serviceActor,h,"histogram",tm);
  MetricQueryService.notifyOfAddedMetric(serviceActor,m,"meter",tm);
  serviceActor.tell(MetricQueryService.getCreateDump(),testActorRef);
synchronized (testActor.lock) {
    if (testActor.message == null) {
      testActor.lock.wait();
    }
  }
  MetricDumpSerialization.MetricSerializationResult dump=(MetricDumpSerialization.MetricSerializationResult)testActor.message;
  testActor.message=null;
  assertTrue(dump.serializedCounters.length > 0);
  assertEquals(1,dump.numCounters);
  assertTrue(dump.serializedMeters.length > 0);
  assertEquals(1,dump.numMeters);
  assertEquals(0,dump.serializedGauges.length);
  assertEquals(0,dump.numGauges);
  assertTrue(dump.serializedHistograms.length > 0);
  assertEquals(1,dump.numHistograms);
  for (int x=1; x < gauges.size(); x++) {
    MetricQueryService.notifyOfRemovedMetric(serviceActor,gauges.get(x).f1);
  }
  serviceActor.tell(MetricQueryService.getCreateDump(),testActorRef);
synchronized (testActor.lock) {
    if (testActor.message == null) {
      testActor.lock.wait();
    }
  }
  MetricDumpSerialization.MetricSerializationResult recoveredDump=(MetricDumpSerialization.MetricSerializationResult)testActor.message;
  testActor.message=null;
  assertTrue(recoveredDump.serializedCounters.length > 0);
  assertEquals(1,recoveredDump.numCounters);
  assertTrue(recoveredDump.serializedMeters.length > 0);
  assertEquals(1,recoveredDump.numMeters);
  assertTrue(recoveredDump.serializedGauges.length > 0);
  assertEquals(1,recoveredDump.numGauges);
  assertTrue(recoveredDump.serializedHistograms.length > 0);
  assertEquals(1,recoveredDump.numHistograms);
  s.shutdown();
}
