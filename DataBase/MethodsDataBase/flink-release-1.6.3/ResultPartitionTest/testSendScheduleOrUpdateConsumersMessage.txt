/** 
 * Tests the schedule or update consumers message sending behaviour depending on the relevant flags.
 */
@Test public void testSendScheduleOrUpdateConsumersMessage() throws Exception {
{
    ResultPartitionConsumableNotifier notifier=mock(ResultPartitionConsumableNotifier.class);
    ResultPartition partition=createPartition(notifier,ResultPartitionType.PIPELINED,true);
    partition.addBufferConsumer(createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE),0);
    verify(notifier,times(1)).notifyPartitionConsumable(eq(partition.getJobId()),eq(partition.getPartitionId()),any(TaskActions.class));
  }
{
    ResultPartitionConsumableNotifier notifier=mock(ResultPartitionConsumableNotifier.class);
    ResultPartition partition=createPartition(notifier,ResultPartitionType.PIPELINED,false);
    partition.addBufferConsumer(createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE),0);
    verify(notifier,never()).notifyPartitionConsumable(any(JobID.class),any(ResultPartitionID.class),any(TaskActions.class));
  }
{
    ResultPartitionConsumableNotifier notifier=mock(ResultPartitionConsumableNotifier.class);
    ResultPartition partition=createPartition(notifier,ResultPartitionType.BLOCKING,true);
    partition.addBufferConsumer(createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE),0);
    verify(notifier,never()).notifyPartitionConsumable(any(JobID.class),any(ResultPartitionID.class),any(TaskActions.class));
  }
{
    ResultPartitionConsumableNotifier notifier=mock(ResultPartitionConsumableNotifier.class);
    ResultPartition partition=createPartition(notifier,ResultPartitionType.BLOCKING,false);
    partition.addBufferConsumer(createFilledBufferConsumer(BufferBuilderTestUtils.BUFFER_SIZE),0);
    verify(notifier,never()).notifyPartitionConsumable(any(JobID.class),any(ResultPartitionID.class),any(TaskActions.class));
  }
}
