@Test public void testCloseMethodForwarding() throws Exception {
  CheckpointStreamFactory streamFactory=createCheckpointStreamFactory();
  MethodForwardingTestUtil.testMethodForwarding(Closeable.class,CheckpointStreamWithResultProvider.PrimaryStreamOnly::new,() -> {
    try {
      return streamFactory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
);
  MethodForwardingTestUtil.testMethodForwarding(Closeable.class,CheckpointStreamWithResultProvider.PrimaryAndSecondaryStream::new,() -> {
    try {
      return new DuplicatingCheckpointOutputStream(streamFactory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE),streamFactory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
);
}
