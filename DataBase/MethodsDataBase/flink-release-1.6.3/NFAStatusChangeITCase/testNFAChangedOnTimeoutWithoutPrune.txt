@Test public void testNFAChangedOnTimeoutWithoutPrune() throws Exception {
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new IterativeCondition<Event>(){
    @Override public boolean filter(    Event value,    Context<Event> ctx) throws Exception {
      return value.getName().equals("start");
    }
  }
).followedBy("end").where(new IterativeCondition<Event>(){
    private static final long serialVersionUID=8061969839441121955L;
    @Override public boolean filter(    Event value,    Context<Event> ctx) throws Exception {
      return value.getName().equals("end");
    }
  }
).within(Time.milliseconds(10));
  NFA<Event> nfa=compile(pattern,true);
  NFAState nfaState=nfa.createInitialNFAState();
  nfaState.resetStateChanged();
  nfa.advanceTime(sharedBuffer,nfaState,6L);
  nfa.process(sharedBuffer,nfaState,new Event(6,"start",1.0),6L);
  nfaState.resetStateChanged();
  nfa.advanceTime(sharedBuffer,nfaState,17L);
  assertTrue(nfaState.isStateChanged());
}
