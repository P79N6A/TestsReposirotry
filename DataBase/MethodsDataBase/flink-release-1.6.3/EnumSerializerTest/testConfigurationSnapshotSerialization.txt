@Test public void testConfigurationSnapshotSerialization() throws Exception {
  EnumSerializer<PublicEnum> serializer=new EnumSerializer<>(PublicEnum.class);
  byte[] serializedConfig;
  try (ByteArrayOutputStream out=new ByteArrayOutputStream()){
    TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out),serializer.snapshotConfiguration());
    serializedConfig=out.toByteArray();
  }
   TypeSerializerConfigSnapshot restoredConfig;
  try (ByteArrayInputStream in=new ByteArrayInputStream(serializedConfig)){
    restoredConfig=TypeSerializerSerializationUtil.readSerializerConfigSnapshot(new DataInputViewStreamWrapper(in),Thread.currentThread().getContextClassLoader());
  }
   CompatibilityResult<PublicEnum> compatResult=serializer.ensureCompatibility(restoredConfig);
  assertFalse(compatResult.isRequiresMigration());
  assertEquals(PublicEnum.FOO.ordinal(),serializer.getValueToOrdinal().get(PublicEnum.FOO).intValue());
  assertEquals(PublicEnum.BAR.ordinal(),serializer.getValueToOrdinal().get(PublicEnum.BAR).intValue());
  assertEquals(PublicEnum.PETER.ordinal(),serializer.getValueToOrdinal().get(PublicEnum.PETER).intValue());
  assertEquals(PublicEnum.NATHANIEL.ordinal(),serializer.getValueToOrdinal().get(PublicEnum.NATHANIEL).intValue());
  assertEquals(PublicEnum.EMMA.ordinal(),serializer.getValueToOrdinal().get(PublicEnum.EMMA).intValue());
  assertEquals(PublicEnum.PAULA.ordinal(),serializer.getValueToOrdinal().get(PublicEnum.PAULA).intValue());
  assertTrue(Arrays.equals(PublicEnum.values(),serializer.getValues()));
}
