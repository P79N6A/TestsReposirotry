@Test public void testSerializeReconfiguredEnumSerializer() throws Exception {
  PublicEnum[] mockPreviousOrder={PublicEnum.BAR,PublicEnum.PAULA,PublicEnum.NATHANIEL};
  EnumSerializer<PublicEnum> serializer=new EnumSerializer<>(PublicEnum.class);
  assertEquals(PublicEnum.FOO.ordinal(),serializer.getValueToOrdinal().get(PublicEnum.FOO).intValue());
  assertEquals(PublicEnum.BAR.ordinal(),serializer.getValueToOrdinal().get(PublicEnum.BAR).intValue());
  assertEquals(PublicEnum.PETER.ordinal(),serializer.getValueToOrdinal().get(PublicEnum.PETER).intValue());
  assertEquals(PublicEnum.NATHANIEL.ordinal(),serializer.getValueToOrdinal().get(PublicEnum.NATHANIEL).intValue());
  assertEquals(PublicEnum.EMMA.ordinal(),serializer.getValueToOrdinal().get(PublicEnum.EMMA).intValue());
  assertEquals(PublicEnum.PAULA.ordinal(),serializer.getValueToOrdinal().get(PublicEnum.PAULA).intValue());
  CompatibilityResult<PublicEnum> compatResult=serializer.ensureCompatibility(new EnumSerializer.EnumSerializerConfigSnapshot<>(PublicEnum.class,mockPreviousOrder));
  assertFalse(compatResult.isRequiresMigration());
  byte[] serializedSerializer=InstantiationUtil.serializeObject(serializer);
  serializer=InstantiationUtil.deserializeObject(serializedSerializer,Thread.currentThread().getContextClassLoader());
  PublicEnum[] expectedOrder={PublicEnum.BAR,PublicEnum.PAULA,PublicEnum.NATHANIEL,PublicEnum.FOO,PublicEnum.PETER,PublicEnum.EMMA};
  int i=0;
  for (  PublicEnum constant : expectedOrder) {
    assertEquals(i,serializer.getValueToOrdinal().get(constant).intValue());
    i++;
  }
  assertTrue(Arrays.equals(expectedOrder,serializer.getValues()));
}
