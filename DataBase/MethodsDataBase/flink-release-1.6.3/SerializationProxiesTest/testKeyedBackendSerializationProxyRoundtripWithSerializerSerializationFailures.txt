@Test public void testKeyedBackendSerializationProxyRoundtripWithSerializerSerializationFailures() throws Exception {
  TypeSerializer<?> keySerializer=IntSerializer.INSTANCE;
  TypeSerializer<?> namespaceSerializer=LongSerializer.INSTANCE;
  TypeSerializer<?> stateSerializer=DoubleSerializer.INSTANCE;
  List<StateMetaInfoSnapshot> stateMetaInfoList=new ArrayList<>();
  stateMetaInfoList.add(new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,"a",namespaceSerializer,stateSerializer).snapshot());
  stateMetaInfoList.add(new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,"b",namespaceSerializer,stateSerializer).snapshot());
  stateMetaInfoList.add(new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,"c",namespaceSerializer,stateSerializer).snapshot());
  KeyedBackendSerializationProxy<?> serializationProxy=new KeyedBackendSerializationProxy<>(keySerializer,stateMetaInfoList,true);
  byte[] serialized;
  try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
    serializationProxy.write(new DataOutputViewStreamWrapper(out));
    serialized=out.toByteArray();
  }
   Set<String> cnfThrowingSerializerClasses=new HashSet<>();
  cnfThrowingSerializerClasses.add(IntSerializer.class.getName());
  cnfThrowingSerializerClasses.add(LongSerializer.class.getName());
  cnfThrowingSerializerClasses.add(DoubleSerializer.class.getName());
  serializationProxy=new KeyedBackendSerializationProxy<>(new ArtificialCNFExceptionThrowingClassLoader(Thread.currentThread().getContextClassLoader(),cnfThrowingSerializerClasses),false);
  try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
    serializationProxy.read(new DataInputViewStreamWrapper(in));
  }
   Assert.assertEquals(true,serializationProxy.isUsingKeyGroupCompression());
  Assert.assertTrue(serializationProxy.getKeySerializer() instanceof UnloadableDummyTypeSerializer);
  Assert.assertEquals(keySerializer.snapshotConfiguration(),serializationProxy.getKeySerializerConfigSnapshot());
  for (  StateMetaInfoSnapshot snapshot : serializationProxy.getStateMetaInfoSnapshots()) {
    final RegisteredKeyValueStateBackendMetaInfo<?,?> restoredMetaInfo=new RegisteredKeyValueStateBackendMetaInfo<>(snapshot);
    Assert.assertTrue(restoredMetaInfo.getNamespaceSerializer() instanceof UnloadableDummyTypeSerializer);
    Assert.assertTrue(restoredMetaInfo.getStateSerializer() instanceof UnloadableDummyTypeSerializer);
    Assert.assertEquals(namespaceSerializer.snapshotConfiguration(),snapshot.getTypeSerializerConfigSnapshot(StateMetaInfoSnapshot.CommonSerializerKeys.NAMESPACE_SERIALIZER));
    Assert.assertEquals(stateSerializer.snapshotConfiguration(),snapshot.getTypeSerializerConfigSnapshot(StateMetaInfoSnapshot.CommonSerializerKeys.VALUE_SERIALIZER));
  }
}
