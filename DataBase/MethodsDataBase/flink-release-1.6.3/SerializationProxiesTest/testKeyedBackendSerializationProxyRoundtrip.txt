@Test public void testKeyedBackendSerializationProxyRoundtrip() throws Exception {
  TypeSerializer<?> keySerializer=IntSerializer.INSTANCE;
  TypeSerializer<?> namespaceSerializer=LongSerializer.INSTANCE;
  TypeSerializer<?> stateSerializer=DoubleSerializer.INSTANCE;
  List<StateMetaInfoSnapshot> stateMetaInfoList=new ArrayList<>();
  stateMetaInfoList.add(new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,"a",namespaceSerializer,stateSerializer).snapshot());
  stateMetaInfoList.add(new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,"b",namespaceSerializer,stateSerializer).snapshot());
  stateMetaInfoList.add(new RegisteredKeyValueStateBackendMetaInfo<>(StateDescriptor.Type.VALUE,"c",namespaceSerializer,stateSerializer).snapshot());
  KeyedBackendSerializationProxy<?> serializationProxy=new KeyedBackendSerializationProxy<>(keySerializer,stateMetaInfoList,true);
  byte[] serialized;
  try (ByteArrayOutputStreamWithPos out=new ByteArrayOutputStreamWithPos()){
    serializationProxy.write(new DataOutputViewStreamWrapper(out));
    serialized=out.toByteArray();
  }
   serializationProxy=new KeyedBackendSerializationProxy<>(Thread.currentThread().getContextClassLoader(),true);
  try (ByteArrayInputStreamWithPos in=new ByteArrayInputStreamWithPos(serialized)){
    serializationProxy.read(new DataInputViewStreamWrapper(in));
  }
   Assert.assertTrue(serializationProxy.isUsingKeyGroupCompression());
  Assert.assertEquals(keySerializer,serializationProxy.getKeySerializer());
  Assert.assertEquals(keySerializer.snapshotConfiguration(),serializationProxy.getKeySerializerConfigSnapshot());
  assertEqualStateMetaInfoSnapshotsLists(stateMetaInfoList,serializationProxy.getStateMetaInfoSnapshots());
}
