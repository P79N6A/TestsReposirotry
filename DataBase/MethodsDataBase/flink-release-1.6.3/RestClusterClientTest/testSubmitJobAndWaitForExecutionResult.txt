@Test public void testSubmitJobAndWaitForExecutionResult() throws Exception {
  final TestJobExecutionResultHandler testJobExecutionResultHandler=new TestJobExecutionResultHandler(new RestHandlerException("should trigger retry",HttpResponseStatus.SERVICE_UNAVAILABLE),JobExecutionResultResponseBody.inProgress(),JobExecutionResultResponseBody.created(new JobResult.Builder().applicationStatus(ApplicationStatus.SUCCEEDED).jobId(jobId).netRuntime(Long.MAX_VALUE).accumulatorResults(Collections.singletonMap("testName",new SerializedValue<>(OptionalFailure.of(1.0)))).build()),JobExecutionResultResponseBody.created(new JobResult.Builder().applicationStatus(ApplicationStatus.FAILED).jobId(jobId).netRuntime(Long.MAX_VALUE).serializedThrowable(new SerializedThrowable(new RuntimeException("expected"))).build()));
  final AtomicBoolean firstPollFailed=new AtomicBoolean();
  failHttpRequest=(messageHeaders,messageParameters,requestBody) -> messageHeaders instanceof JobExecutionResultHeaders && !firstPollFailed.getAndSet(true);
  try (TestRestServerEndpoint ignored=createRestServerEndpoint(testJobExecutionResultHandler,new TestJobSubmitHandler())){
    JobExecutionResult jobExecutionResult;
    jobExecutionResult=(JobExecutionResult)restClusterClient.submitJob(jobGraph,ClassLoader.getSystemClassLoader());
    assertThat(jobExecutionResult.getJobID(),equalTo(jobId));
    assertThat(jobExecutionResult.getNetRuntime(),equalTo(Long.MAX_VALUE));
    assertThat(jobExecutionResult.getAllAccumulatorResults(),equalTo(Collections.singletonMap("testName",1.0)));
    try {
      restClusterClient.submitJob(jobGraph,ClassLoader.getSystemClassLoader());
      fail("Expected exception not thrown.");
    }
 catch (    final ProgramInvocationException e) {
      final Optional<RuntimeException> cause=ExceptionUtils.findThrowable(e,RuntimeException.class);
      assertThat(cause.isPresent(),is(true));
      assertThat(cause.get().getMessage(),equalTo("expected"));
    }
  }
 }
