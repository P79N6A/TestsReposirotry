/** 
 * Tests that partitions list is determinate and correctly provided to custom partitioner.
 */
@SuppressWarnings("unchecked") @Test public void testPartitionerInvokedWithDeterminatePartitionList() throws Exception {
  FlinkKafkaPartitioner<String> mockPartitioner=mock(FlinkKafkaPartitioner.class);
  RuntimeContext mockRuntimeContext=mock(StreamingRuntimeContext.class);
  when(mockRuntimeContext.getIndexOfThisSubtask()).thenReturn(0);
  when(mockRuntimeContext.getNumberOfParallelSubtasks()).thenReturn(1);
  List<PartitionInfo> mockPartitionsList=new ArrayList<>(4);
  mockPartitionsList.add(new PartitionInfo(DummyFlinkKafkaProducer.DUMMY_TOPIC,3,null,null,null));
  mockPartitionsList.add(new PartitionInfo(DummyFlinkKafkaProducer.DUMMY_TOPIC,1,null,null,null));
  mockPartitionsList.add(new PartitionInfo(DummyFlinkKafkaProducer.DUMMY_TOPIC,0,null,null,null));
  mockPartitionsList.add(new PartitionInfo(DummyFlinkKafkaProducer.DUMMY_TOPIC,2,null,null,null));
  final DummyFlinkKafkaProducer<String> producer=new DummyFlinkKafkaProducer<>(FakeStandardProducerConfig.get(),new KeyedSerializationSchemaWrapper<>(new SimpleStringSchema()),mockPartitioner);
  producer.setRuntimeContext(mockRuntimeContext);
  final KafkaProducer mockProducer=producer.getMockKafkaProducer();
  when(mockProducer.partitionsFor(anyString())).thenReturn(mockPartitionsList);
  when(mockProducer.metrics()).thenReturn(null);
  producer.open(new Configuration());
  verify(mockPartitioner,times(1)).open(0,1);
  producer.invoke("foobar",SinkContextUtil.forTimestamp(0));
  verify(mockPartitioner,times(1)).partition("foobar",null,"foobar".getBytes(),DummyFlinkKafkaProducer.DUMMY_TOPIC,new int[]{0,1,2,3});
}
