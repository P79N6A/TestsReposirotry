@Test public void testConnectFailure() throws Exception {
  final Configuration baseConfig=new Configuration();
  baseConfig.setString(AkkaOptions.TCP_TIMEOUT,"1 s");
  Configuration sslConfig1=new Configuration(baseConfig);
  sslConfig1.setBoolean(SecurityOptions.SSL_INTERNAL_ENABLED,true);
  sslConfig1.setString(SecurityOptions.SSL_INTERNAL_KEYSTORE,KEY_STORE_FILE);
  sslConfig1.setString(SecurityOptions.SSL_INTERNAL_TRUSTSTORE,TRUST_STORE_FILE);
  sslConfig1.setString(SecurityOptions.SSL_INTERNAL_KEYSTORE_PASSWORD,"password");
  sslConfig1.setString(SecurityOptions.SSL_INTERNAL_KEY_PASSWORD,"password");
  sslConfig1.setString(SecurityOptions.SSL_INTERNAL_TRUSTSTORE_PASSWORD,"password");
  sslConfig1.setString(SecurityOptions.SSL_ALGORITHMS,"TLS_RSA_WITH_AES_128_CBC_SHA");
  Configuration sslConfig2=new Configuration(baseConfig);
  sslConfig2.setBoolean(SecurityOptions.SSL_INTERNAL_ENABLED,true);
  sslConfig2.setString(SecurityOptions.SSL_INTERNAL_KEYSTORE,UNTRUSTED_KEY_STORE_FILE);
  sslConfig2.setString(SecurityOptions.SSL_INTERNAL_TRUSTSTORE,TRUST_STORE_FILE);
  sslConfig2.setString(SecurityOptions.SSL_INTERNAL_KEYSTORE_PASSWORD,"password");
  sslConfig2.setString(SecurityOptions.SSL_INTERNAL_KEY_PASSWORD,"password");
  sslConfig2.setString(SecurityOptions.SSL_INTERNAL_TRUSTSTORE_PASSWORD,"password");
  sslConfig2.setString(SecurityOptions.SSL_ALGORITHMS,"TLS_RSA_WITH_AES_128_CBC_SHA");
  ActorSystem actorSystem1=null;
  ActorSystem actorSystem2=null;
  RpcService rpcService1=null;
  RpcService rpcService2=null;
  try {
    actorSystem1=AkkaUtils.createActorSystem(sslConfig1,"localhost",0);
    actorSystem2=AkkaUtils.createActorSystem(sslConfig2,"localhost",0);
    rpcService1=new AkkaRpcService(actorSystem1,Time.of(10000000,TimeUnit.SECONDS));
    rpcService2=new AkkaRpcService(actorSystem2,Time.of(10000000,TimeUnit.SECONDS));
    TestEndpoint endpoint=new TestEndpoint(rpcService1);
    endpoint.start();
    CompletableFuture<TestGateway> future=rpcService2.connect(endpoint.getAddress(),TestGateway.class);
    TestGateway gateway=future.get(10000000,TimeUnit.SECONDS);
    CompletableFuture<String> fooFuture=gateway.foo();
    fooFuture.get();
    fail("should never complete normally");
  }
 catch (  ExecutionException e) {
    assertTrue(e.getCause() instanceof RpcConnectionException);
  }
 finally {
    final CompletableFuture<Void> rpcTerminationFuture1=rpcService1 != null ? rpcService1.stopService() : CompletableFuture.completedFuture(null);
    final CompletableFuture<Void> rpcTerminationFuture2=rpcService2 != null ? rpcService2.stopService() : CompletableFuture.completedFuture(null);
    FutureUtils.waitForAll(Arrays.asList(rpcTerminationFuture1,rpcTerminationFuture2)).get();
  }
}
