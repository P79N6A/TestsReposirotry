@Test public void testPeriodicSchedulingWithInactiveTasks(){
  try {
    final JobID jid=new JobID();
    final ExecutionAttemptID triggerAttemptID=new ExecutionAttemptID();
    final ExecutionAttemptID ackAttemptID=new ExecutionAttemptID();
    final ExecutionAttemptID commitAttemptID=new ExecutionAttemptID();
    ExecutionVertex triggerVertex=mockExecutionVertex(triggerAttemptID);
    ExecutionVertex ackVertex=mockExecutionVertex(ackAttemptID);
    ExecutionVertex commitVertex=mockExecutionVertex(commitAttemptID);
    final AtomicReference<ExecutionState> currentState=new AtomicReference<>(ExecutionState.CREATED);
    when(triggerVertex.getCurrentExecutionAttempt().getState()).thenAnswer(invocation -> currentState.get());
    CheckpointCoordinator coord=new CheckpointCoordinator(jid,10,200000,0L,2,CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,new ExecutionVertex[]{triggerVertex},new ExecutionVertex[]{ackVertex},new ExecutionVertex[]{commitVertex},new StandaloneCheckpointIDCounter(),new StandaloneCompletedCheckpointStore(2),new MemoryStateBackend(),Executors.directExecutor(),SharedStateRegistry.DEFAULT_FACTORY);
    coord.startCheckpointScheduler();
    Thread.sleep(200);
    assertEquals(0,coord.getNumberOfPendingCheckpoints());
    currentState.set(ExecutionState.RUNNING);
    final long timeout=System.currentTimeMillis() + 10000;
    do {
      Thread.sleep(20);
    }
 while (System.currentTimeMillis() < timeout && coord.getNumberOfPendingCheckpoints() == 0);
    assertTrue(coord.getNumberOfPendingCheckpoints() > 0);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
