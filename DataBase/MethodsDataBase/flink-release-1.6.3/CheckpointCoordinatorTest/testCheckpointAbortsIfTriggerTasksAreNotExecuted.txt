@Test public void testCheckpointAbortsIfTriggerTasksAreNotExecuted(){
  try {
    final JobID jid=new JobID();
    final long timestamp=System.currentTimeMillis();
    ExecutionVertex triggerVertex1=mock(ExecutionVertex.class);
    ExecutionVertex triggerVertex2=mock(ExecutionVertex.class);
    final ExecutionAttemptID ackAttemptID1=new ExecutionAttemptID();
    final ExecutionAttemptID ackAttemptID2=new ExecutionAttemptID();
    ExecutionVertex ackVertex1=mockExecutionVertex(ackAttemptID1);
    ExecutionVertex ackVertex2=mockExecutionVertex(ackAttemptID2);
    CheckpointCoordinator coord=new CheckpointCoordinator(jid,600000,600000,0,Integer.MAX_VALUE,CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,new ExecutionVertex[]{triggerVertex1,triggerVertex2},new ExecutionVertex[]{ackVertex1,ackVertex2},new ExecutionVertex[]{},new StandaloneCheckpointIDCounter(),new StandaloneCompletedCheckpointStore(1),new MemoryStateBackend(),Executors.directExecutor(),SharedStateRegistry.DEFAULT_FACTORY);
    assertEquals(0,coord.getNumberOfPendingCheckpoints());
    assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
    assertFalse(coord.triggerCheckpoint(timestamp,false));
    assertEquals(0,coord.getNumberOfPendingCheckpoints());
    assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
    coord.shutdown(JobStatus.FINISHED);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
