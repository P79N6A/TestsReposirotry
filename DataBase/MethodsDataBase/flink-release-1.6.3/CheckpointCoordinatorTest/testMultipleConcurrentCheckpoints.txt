@Test public void testMultipleConcurrentCheckpoints(){
  try {
    final JobID jid=new JobID();
    final long timestamp1=System.currentTimeMillis();
    final long timestamp2=timestamp1 + 8617;
    final ExecutionAttemptID triggerAttemptID1=new ExecutionAttemptID();
    final ExecutionAttemptID triggerAttemptID2=new ExecutionAttemptID();
    final ExecutionAttemptID ackAttemptID1=new ExecutionAttemptID();
    final ExecutionAttemptID ackAttemptID2=new ExecutionAttemptID();
    final ExecutionAttemptID ackAttemptID3=new ExecutionAttemptID();
    final ExecutionAttemptID commitAttemptID=new ExecutionAttemptID();
    ExecutionVertex triggerVertex1=mockExecutionVertex(triggerAttemptID1);
    ExecutionVertex triggerVertex2=mockExecutionVertex(triggerAttemptID2);
    ExecutionVertex ackVertex1=mockExecutionVertex(ackAttemptID1);
    ExecutionVertex ackVertex2=mockExecutionVertex(ackAttemptID2);
    ExecutionVertex ackVertex3=mockExecutionVertex(ackAttemptID3);
    ExecutionVertex commitVertex=mockExecutionVertex(commitAttemptID);
    CheckpointCoordinator coord=new CheckpointCoordinator(jid,600000,600000,0,Integer.MAX_VALUE,CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,new ExecutionVertex[]{triggerVertex1,triggerVertex2},new ExecutionVertex[]{ackVertex1,ackVertex2,ackVertex3},new ExecutionVertex[]{commitVertex},new StandaloneCheckpointIDCounter(),new StandaloneCompletedCheckpointStore(2),new MemoryStateBackend(),Executors.directExecutor(),SharedStateRegistry.DEFAULT_FACTORY);
    assertEquals(0,coord.getNumberOfPendingCheckpoints());
    assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
    assertTrue(coord.triggerCheckpoint(timestamp1,false));
    assertEquals(1,coord.getNumberOfPendingCheckpoints());
    assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
    PendingCheckpoint pending1=coord.getPendingCheckpoints().values().iterator().next();
    long checkpointId1=pending1.getCheckpointId();
    verify(triggerVertex1.getCurrentExecutionAttempt(),times(1)).triggerCheckpoint(eq(checkpointId1),eq(timestamp1),any(CheckpointOptions.class));
    verify(triggerVertex2.getCurrentExecutionAttempt(),times(1)).triggerCheckpoint(eq(checkpointId1),eq(timestamp1),any(CheckpointOptions.class));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID2,checkpointId1));
    assertTrue(coord.triggerCheckpoint(timestamp2,false));
    assertEquals(2,coord.getNumberOfPendingCheckpoints());
    assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
    PendingCheckpoint pending2;
{
      Iterator<PendingCheckpoint> all=coord.getPendingCheckpoints().values().iterator();
      PendingCheckpoint cc1=all.next();
      PendingCheckpoint cc2=all.next();
      pending2=pending1 == cc1 ? cc2 : cc1;
    }
    long checkpointId2=pending2.getCheckpointId();
    verify(triggerVertex1.getCurrentExecutionAttempt(),times(1)).triggerCheckpoint(eq(checkpointId2),eq(timestamp2),any(CheckpointOptions.class));
    verify(triggerVertex2.getCurrentExecutionAttempt(),times(1)).triggerCheckpoint(eq(checkpointId2),eq(timestamp2),any(CheckpointOptions.class));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID3,checkpointId1));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID1,checkpointId2));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID1,checkpointId1));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID2,checkpointId2));
    assertEquals(1,coord.getNumberOfPendingCheckpoints());
    assertEquals(1,coord.getNumberOfRetainedSuccessfulCheckpoints());
    assertTrue(pending1.isDiscarded());
    verify(commitVertex.getCurrentExecutionAttempt(),times(1)).notifyCheckpointComplete(eq(checkpointId1),eq(timestamp1));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID3,checkpointId2));
    assertEquals(0,coord.getNumberOfPendingCheckpoints());
    assertEquals(2,coord.getNumberOfRetainedSuccessfulCheckpoints());
    assertTrue(pending2.isDiscarded());
    verify(commitVertex.getCurrentExecutionAttempt(),times(1)).notifyCheckpointComplete(eq(checkpointId2),eq(timestamp2));
    List<CompletedCheckpoint> scs=coord.getSuccessfulCheckpoints();
    CompletedCheckpoint sc1=scs.get(0);
    assertEquals(checkpointId1,sc1.getCheckpointID());
    assertEquals(timestamp1,sc1.getTimestamp());
    assertEquals(jid,sc1.getJobId());
    assertTrue(sc1.getOperatorStates().isEmpty());
    CompletedCheckpoint sc2=scs.get(1);
    assertEquals(checkpointId2,sc2.getCheckpointID());
    assertEquals(timestamp2,sc2.getTimestamp());
    assertEquals(jid,sc2.getJobId());
    assertTrue(sc2.getOperatorStates().isEmpty());
    coord.shutdown(JobStatus.FINISHED);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
