@Test public void testSuccessfulCheckpointSubsumesUnsuccessful(){
  try {
    final JobID jid=new JobID();
    final long timestamp1=System.currentTimeMillis();
    final long timestamp2=timestamp1 + 1552;
    final ExecutionAttemptID triggerAttemptID1=new ExecutionAttemptID();
    final ExecutionAttemptID triggerAttemptID2=new ExecutionAttemptID();
    final ExecutionAttemptID ackAttemptID1=new ExecutionAttemptID();
    final ExecutionAttemptID ackAttemptID2=new ExecutionAttemptID();
    final ExecutionAttemptID ackAttemptID3=new ExecutionAttemptID();
    final ExecutionAttemptID commitAttemptID=new ExecutionAttemptID();
    ExecutionVertex triggerVertex1=mockExecutionVertex(triggerAttemptID1);
    ExecutionVertex triggerVertex2=mockExecutionVertex(triggerAttemptID2);
    ExecutionVertex ackVertex1=mockExecutionVertex(ackAttemptID1);
    ExecutionVertex ackVertex2=mockExecutionVertex(ackAttemptID2);
    ExecutionVertex ackVertex3=mockExecutionVertex(ackAttemptID3);
    ExecutionVertex commitVertex=mockExecutionVertex(commitAttemptID);
    CheckpointCoordinator coord=new CheckpointCoordinator(jid,600000,600000,0,Integer.MAX_VALUE,CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,new ExecutionVertex[]{triggerVertex1,triggerVertex2},new ExecutionVertex[]{ackVertex1,ackVertex2,ackVertex3},new ExecutionVertex[]{commitVertex},new StandaloneCheckpointIDCounter(),new StandaloneCompletedCheckpointStore(10),new MemoryStateBackend(),Executors.directExecutor(),SharedStateRegistry.DEFAULT_FACTORY);
    assertEquals(0,coord.getNumberOfPendingCheckpoints());
    assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
    assertTrue(coord.triggerCheckpoint(timestamp1,false));
    assertEquals(1,coord.getNumberOfPendingCheckpoints());
    assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
    PendingCheckpoint pending1=coord.getPendingCheckpoints().values().iterator().next();
    long checkpointId1=pending1.getCheckpointId();
    verify(triggerVertex1.getCurrentExecutionAttempt(),times(1)).triggerCheckpoint(eq(checkpointId1),eq(timestamp1),any(CheckpointOptions.class));
    verify(triggerVertex2.getCurrentExecutionAttempt(),times(1)).triggerCheckpoint(eq(checkpointId1),eq(timestamp1),any(CheckpointOptions.class));
    OperatorID opID1=OperatorID.fromJobVertexID(ackVertex1.getJobvertexId());
    OperatorID opID2=OperatorID.fromJobVertexID(ackVertex2.getJobvertexId());
    OperatorID opID3=OperatorID.fromJobVertexID(ackVertex3.getJobvertexId());
    TaskStateSnapshot taskOperatorSubtaskStates1_1=spy(new TaskStateSnapshot());
    TaskStateSnapshot taskOperatorSubtaskStates1_2=spy(new TaskStateSnapshot());
    TaskStateSnapshot taskOperatorSubtaskStates1_3=spy(new TaskStateSnapshot());
    OperatorSubtaskState subtaskState1_1=mock(OperatorSubtaskState.class);
    OperatorSubtaskState subtaskState1_2=mock(OperatorSubtaskState.class);
    OperatorSubtaskState subtaskState1_3=mock(OperatorSubtaskState.class);
    taskOperatorSubtaskStates1_1.putSubtaskStateByOperatorID(opID1,subtaskState1_1);
    taskOperatorSubtaskStates1_2.putSubtaskStateByOperatorID(opID2,subtaskState1_2);
    taskOperatorSubtaskStates1_3.putSubtaskStateByOperatorID(opID3,subtaskState1_3);
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID2,checkpointId1,new CheckpointMetrics(),taskOperatorSubtaskStates1_2));
    assertTrue(coord.triggerCheckpoint(timestamp2,false));
    assertEquals(2,coord.getNumberOfPendingCheckpoints());
    assertEquals(0,coord.getNumberOfRetainedSuccessfulCheckpoints());
    PendingCheckpoint pending2;
{
      Iterator<PendingCheckpoint> all=coord.getPendingCheckpoints().values().iterator();
      PendingCheckpoint cc1=all.next();
      PendingCheckpoint cc2=all.next();
      pending2=pending1 == cc1 ? cc2 : cc1;
    }
    long checkpointId2=pending2.getCheckpointId();
    TaskStateSnapshot taskOperatorSubtaskStates2_1=spy(new TaskStateSnapshot());
    TaskStateSnapshot taskOperatorSubtaskStates2_2=spy(new TaskStateSnapshot());
    TaskStateSnapshot taskOperatorSubtaskStates2_3=spy(new TaskStateSnapshot());
    OperatorSubtaskState subtaskState2_1=mock(OperatorSubtaskState.class);
    OperatorSubtaskState subtaskState2_2=mock(OperatorSubtaskState.class);
    OperatorSubtaskState subtaskState2_3=mock(OperatorSubtaskState.class);
    taskOperatorSubtaskStates2_1.putSubtaskStateByOperatorID(opID1,subtaskState2_1);
    taskOperatorSubtaskStates2_2.putSubtaskStateByOperatorID(opID2,subtaskState2_2);
    taskOperatorSubtaskStates2_3.putSubtaskStateByOperatorID(opID3,subtaskState2_3);
    verify(triggerVertex1.getCurrentExecutionAttempt(),times(1)).triggerCheckpoint(eq(checkpointId2),eq(timestamp2),any(CheckpointOptions.class));
    verify(triggerVertex2.getCurrentExecutionAttempt(),times(1)).triggerCheckpoint(eq(checkpointId2),eq(timestamp2),any(CheckpointOptions.class));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID3,checkpointId2,new CheckpointMetrics(),taskOperatorSubtaskStates2_3));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID1,checkpointId2,new CheckpointMetrics(),taskOperatorSubtaskStates2_1));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID1,checkpointId1,new CheckpointMetrics(),taskOperatorSubtaskStates1_1));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID2,checkpointId2,new CheckpointMetrics(),taskOperatorSubtaskStates2_2));
    assertTrue(pending1.isDiscarded());
    assertTrue(pending2.isDiscarded());
    assertEquals(0,coord.getNumberOfPendingCheckpoints());
    assertEquals(1,coord.getNumberOfRetainedSuccessfulCheckpoints());
    verify(subtaskState1_1,times(1)).discardState();
    verify(subtaskState1_2,times(1)).discardState();
    verify(subtaskState2_1,never()).discardState();
    verify(subtaskState2_2,never()).discardState();
    verify(subtaskState2_3,never()).discardState();
    List<CompletedCheckpoint> scs=coord.getSuccessfulCheckpoints();
    CompletedCheckpoint success=scs.get(0);
    assertEquals(checkpointId2,success.getCheckpointID());
    assertEquals(timestamp2,success.getTimestamp());
    assertEquals(jid,success.getJobId());
    assertEquals(3,success.getOperatorStates().size());
    verify(commitVertex.getCurrentExecutionAttempt(),times(1)).notifyCheckpointComplete(eq(checkpointId2),eq(timestamp2));
    coord.receiveAcknowledgeMessage(new AcknowledgeCheckpoint(jid,ackAttemptID3,checkpointId1,new CheckpointMetrics(),taskOperatorSubtaskStates1_3));
    verify(subtaskState1_3,times(1)).discardState();
    coord.shutdown(JobStatus.FINISHED);
    verify(subtaskState2_1,times(1)).discardState();
    verify(subtaskState2_2,times(1)).discardState();
    verify(subtaskState2_3,times(1)).discardState();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
