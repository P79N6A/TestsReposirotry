@Test public void testReplicateModeStateHandle(){
  Map<String,OperatorStateHandle.StateMetaInfo> metaInfoMap=new HashMap<>(1);
  metaInfoMap.put("t-1",new OperatorStateHandle.StateMetaInfo(new long[]{0,23},OperatorStateHandle.Mode.UNION));
  metaInfoMap.put("t-2",new OperatorStateHandle.StateMetaInfo(new long[]{42,64},OperatorStateHandle.Mode.UNION));
  metaInfoMap.put("t-3",new OperatorStateHandle.StateMetaInfo(new long[]{72,83},OperatorStateHandle.Mode.SPLIT_DISTRIBUTE));
  metaInfoMap.put("t-4",new OperatorStateHandle.StateMetaInfo(new long[]{87,94,95},OperatorStateHandle.Mode.BROADCAST));
  metaInfoMap.put("t-5",new OperatorStateHandle.StateMetaInfo(new long[]{97,108,112},OperatorStateHandle.Mode.BROADCAST));
  metaInfoMap.put("t-6",new OperatorStateHandle.StateMetaInfo(new long[]{121,143,147},OperatorStateHandle.Mode.BROADCAST));
  OperatorStateHandle osh=new OperatorStreamStateHandle(metaInfoMap,new ByteStreamStateHandle("test",new byte[150]));
  OperatorStateRepartitioner repartitioner=RoundRobinOperatorStateRepartitioner.INSTANCE;
  List<List<OperatorStateHandle>> repartitionedStates=repartitioner.repartitionState(Collections.singletonList(osh),3);
  Map<String,Integer> checkCounts=new HashMap<>(3);
  for (  Collection<OperatorStateHandle> operatorStateHandles : repartitionedStates) {
    for (    OperatorStateHandle operatorStateHandle : operatorStateHandles) {
      for (      Map.Entry<String,OperatorStateHandle.StateMetaInfo> stateNameToMetaInfo : operatorStateHandle.getStateNameToPartitionOffsets().entrySet()) {
        String stateName=stateNameToMetaInfo.getKey();
        Integer count=checkCounts.get(stateName);
        if (null == count) {
          checkCounts.put(stateName,1);
        }
 else {
          checkCounts.put(stateName,1 + count);
        }
        OperatorStateHandle.StateMetaInfo stateMetaInfo=stateNameToMetaInfo.getValue();
        if (OperatorStateHandle.Mode.SPLIT_DISTRIBUTE.equals(stateMetaInfo.getDistributionMode())) {
          Assert.assertEquals(1,stateNameToMetaInfo.getValue().getOffsets().length);
        }
 else         if (OperatorStateHandle.Mode.UNION.equals(stateMetaInfo.getDistributionMode())) {
          Assert.assertEquals(2,stateNameToMetaInfo.getValue().getOffsets().length);
        }
 else {
          Assert.assertEquals(3,stateNameToMetaInfo.getValue().getOffsets().length);
        }
      }
    }
  }
  Assert.assertEquals(6,checkCounts.size());
  Assert.assertEquals(3,checkCounts.get("t-1").intValue());
  Assert.assertEquals(3,checkCounts.get("t-2").intValue());
  Assert.assertEquals(2,checkCounts.get("t-3").intValue());
  Assert.assertEquals(3,checkCounts.get("t-4").intValue());
  Assert.assertEquals(3,checkCounts.get("t-5").intValue());
  Assert.assertEquals(3,checkCounts.get("t-6").intValue());
}
