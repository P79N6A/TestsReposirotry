/** 
 * Manually run this to write binary snapshot data.
 */
@Ignore @Test public void writeSessionWindowsWithCountTriggerSnapshot() throws Exception {
  final int sessionSize=3;
  ListStateDescriptor<Tuple2<String,Integer>> stateDesc=new ListStateDescriptor<>("window-contents",STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Iterable<Tuple2<String,Integer>>,Tuple3<String,Long,Long>,TimeWindow> operator=new WindowOperator<>(EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),new TimeWindow.Serializer(),new TupleKeySelector<String>(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new SessionWindowFunction()),PurgingTrigger.of(CountTrigger.of(4)),0,null);
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple3<String,Long,Long>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setup();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),0));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",2),1000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",3),2500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",4),3500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),10));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",2),1000));
  OperatorSubtaskState snapshot=testHarness.snapshot(0L,0L);
  OperatorSnapshotUtil.writeStateHandle(snapshot,"src/test/resources/win-op-migration-test-session-with-stateful-trigger-flink" + flinkGenerateSavepointVersion + "-snapshot");
  testHarness.close();
}
