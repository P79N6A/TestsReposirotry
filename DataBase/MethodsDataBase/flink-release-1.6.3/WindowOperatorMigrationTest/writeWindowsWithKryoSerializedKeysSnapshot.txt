/** 
 * Manually run this to write binary snapshot data.
 */
@Ignore @Test public void writeWindowsWithKryoSerializedKeysSnapshot() throws Exception {
  final int windowSize=3;
  TypeInformation<Tuple2<NonPojoType,Integer>> inputType=new TypeHint<Tuple2<NonPojoType,Integer>>(){
  }
.getTypeInfo();
  ReducingStateDescriptor<Tuple2<NonPojoType,Integer>> stateDesc=new ReducingStateDescriptor<>("window-contents",new SumReducer<>(),inputType.createSerializer(new ExecutionConfig()));
  TypeSerializer<NonPojoType> keySerializer=TypeInformation.of(NonPojoType.class).createSerializer(new ExecutionConfig());
  assertTrue(keySerializer instanceof KryoSerializer);
  WindowOperator<NonPojoType,Tuple2<NonPojoType,Integer>,Tuple2<NonPojoType,Integer>,Tuple2<NonPojoType,Integer>,TimeWindow> operator=new WindowOperator<>(TumblingEventTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector<>(),keySerializer,stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<>()),EventTimeTrigger.create(),0,null);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  OneInputStreamOperatorTestHarness<Tuple2<NonPojoType,Integer>,Tuple2<NonPojoType,Integer>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector<>(),TypeInformation.of(NonPojoType.class));
  testHarness.setup();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"),1),3999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"),1),3000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"),1),20));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"),1),0));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"),1),999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"),1),1998));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"),1),1999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"),1),1000));
  testHarness.processWatermark(new Watermark(999));
  expectedOutput.add(new Watermark(999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator<>());
  testHarness.processWatermark(new Watermark(1999));
  expectedOutput.add(new Watermark(1999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator<>());
  OperatorSubtaskState snapshot=testHarness.snapshot(0,0);
  OperatorSnapshotUtil.writeStateHandle(snapshot,"src/test/resources/win-op-migration-test-kryo-serialized-key-flink" + flinkGenerateSavepointVersion + "-snapshot");
  testHarness.close();
}
