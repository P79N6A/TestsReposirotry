@Test public void testRestoreReducingEventTimeWindows() throws Exception {
  final int windowSize=3;
  ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc=new ReducingStateDescriptor<>("window-contents",new SumReducer<>(),STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator=new WindowOperator<>(TumblingEventTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),EventTimeTrigger.create(),0,null);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setup();
  MigrationTestUtil.restoreFromSnapshot(testHarness,OperatorSnapshotUtil.getResourceFilename("win-op-migration-test-reduce-event-time-flink" + testMigrateVersion + "-snapshot"),testMigrateVersion);
  testHarness.open();
  testHarness.processWatermark(new Watermark(2999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",3),2999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",3),2999));
  expectedOutput.add(new Watermark(2999));
  testHarness.processWatermark(new Watermark(3999));
  expectedOutput.add(new Watermark(3999));
  testHarness.processWatermark(new Watermark(4999));
  expectedOutput.add(new Watermark(4999));
  testHarness.processWatermark(new Watermark(5999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",2),5999));
  expectedOutput.add(new Watermark(5999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator<>());
  testHarness.close();
}
