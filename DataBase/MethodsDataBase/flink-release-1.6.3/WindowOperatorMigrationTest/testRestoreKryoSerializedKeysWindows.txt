@Test public void testRestoreKryoSerializedKeysWindows() throws Exception {
  final int windowSize=3;
  TypeInformation<Tuple2<NonPojoType,Integer>> inputType=new TypeHint<Tuple2<NonPojoType,Integer>>(){
  }
.getTypeInfo();
  ReducingStateDescriptor<Tuple2<NonPojoType,Integer>> stateDesc=new ReducingStateDescriptor<>("window-contents",new SumReducer<>(),inputType.createSerializer(new ExecutionConfig()));
  TypeSerializer<NonPojoType> keySerializer=TypeInformation.of(NonPojoType.class).createSerializer(new ExecutionConfig());
  assertTrue(keySerializer instanceof KryoSerializer);
  WindowOperator<NonPojoType,Tuple2<NonPojoType,Integer>,Tuple2<NonPojoType,Integer>,Tuple2<NonPojoType,Integer>,TimeWindow> operator=new WindowOperator<>(TumblingEventTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector<>(),keySerializer,stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<>()),EventTimeTrigger.create(),0,null);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  OneInputStreamOperatorTestHarness<Tuple2<NonPojoType,Integer>,Tuple2<NonPojoType,Integer>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector<>(),TypeInformation.of(NonPojoType.class));
  testHarness.setup();
  MigrationTestUtil.restoreFromSnapshot(testHarness,OperatorSnapshotUtil.getResourceFilename("win-op-migration-test-kryo-serialized-key-flink" + testMigrateVersion + "-snapshot"),testMigrateVersion);
  testHarness.open();
  testHarness.processWatermark(new Watermark(2999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>(new NonPojoType("key1"),3),2999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"),3),2999));
  expectedOutput.add(new Watermark(2999));
  testHarness.processWatermark(new Watermark(3999));
  expectedOutput.add(new Watermark(3999));
  testHarness.processWatermark(new Watermark(4999));
  expectedOutput.add(new Watermark(4999));
  testHarness.processWatermark(new Watermark(5999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>(new NonPojoType("key2"),2),5999));
  expectedOutput.add(new Watermark(5999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator<>());
  testHarness.close();
}
