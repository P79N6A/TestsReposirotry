/** 
 * This checks that we can restore from a virgin  {@code WindowOperator} that has never seenany elements.
 */
@Test public void testRestoreSessionWindowsWithCountTriggerInMintCondition() throws Exception {
  final int sessionSize=3;
  ListStateDescriptor<Tuple2<String,Integer>> stateDesc=new ListStateDescriptor<>("window-contents",STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Iterable<Tuple2<String,Integer>>,Tuple3<String,Long,Long>,TimeWindow> operator=new WindowOperator<>(EventTimeSessionWindows.withGap(Time.seconds(sessionSize)),new TimeWindow.Serializer(),new TupleKeySelector<String>(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalIterableWindowFunction<>(new SessionWindowFunction()),PurgingTrigger.of(CountTrigger.of(4)),0,null);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple3<String,Long,Long>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setup();
  MigrationTestUtil.restoreFromSnapshot(testHarness,OperatorSnapshotUtil.getResourceFilename("win-op-migration-test-session-with-stateful-trigger-mint-flink" + testMigrateVersion + "-snapshot"),testMigrateVersion);
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),0));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",2),1000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",3),2500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",4),3500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),10));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",2),1000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",3),2500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),6000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",2),6500));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",3),7000));
  expectedOutput.add(new StreamRecord<>(new Tuple3<>("key2-10",0L,6500L),6499));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple3ResultSortComparator());
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",10),4500));
  expectedOutput.add(new StreamRecord<>(new Tuple3<>("key1-22",10L,10000L),9999L));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple3ResultSortComparator());
  testHarness.close();
}
