/** 
 * Manually run this to write binary snapshot data.
 */
@Ignore @Test public void writeReducingProcessingTimeWindowsSnapshot() throws Exception {
  final int windowSize=3;
  ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc=new ReducingStateDescriptor<>("window-contents",new SumReducer<>(),STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator=new WindowOperator<>(TumblingProcessingTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),ProcessingTimeTrigger.create(),0,null);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setup();
  testHarness.open();
  testHarness.setProcessingTime(10);
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1)));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1)));
  testHarness.setProcessingTime(3010);
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1)));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key3",1)));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key1",1),2999));
  expectedOutput.add(new StreamRecord<>(new Tuple2<>("key2",1),2999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator<>());
  OperatorSubtaskState snapshot=testHarness.snapshot(0,0);
  OperatorSnapshotUtil.writeStateHandle(snapshot,"src/test/resources/win-op-migration-test-reduce-processing-time-flink" + flinkGenerateSavepointVersion + "-snapshot");
  testHarness.close();
}
