/** 
 * Manually run this to write binary snapshot data.
 */
@Ignore @Test public void writeReducingEventTimeWindowsSnapshot() throws Exception {
  final int windowSize=3;
  ReducingStateDescriptor<Tuple2<String,Integer>> stateDesc=new ReducingStateDescriptor<>("window-contents",new SumReducer<>(),STRING_INT_TUPLE.createSerializer(new ExecutionConfig()));
  WindowOperator<String,Tuple2<String,Integer>,Tuple2<String,Integer>,Tuple2<String,Integer>,TimeWindow> operator=new WindowOperator<>(TumblingEventTimeWindows.of(Time.of(windowSize,TimeUnit.SECONDS)),new TimeWindow.Serializer(),new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO.createSerializer(new ExecutionConfig()),stateDesc,new InternalSingleValueWindowFunction<>(new PassThroughWindowFunction<String,TimeWindow,Tuple2<String,Integer>>()),EventTimeTrigger.create(),0,null);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Tuple2<String,Integer>> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,new TupleKeySelector<>(),BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setup();
  testHarness.open();
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),3999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),3000));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),20));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),0));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key1",1),999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),1998));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),1999));
  testHarness.processElement(new StreamRecord<>(new Tuple2<>("key2",1),1000));
  testHarness.processWatermark(new Watermark(999));
  expectedOutput.add(new Watermark(999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator<>());
  testHarness.processWatermark(new Watermark(1999));
  expectedOutput.add(new Watermark(1999));
  TestHarnessUtil.assertOutputEqualsSorted("Output was not correct.",expectedOutput,testHarness.getOutput(),new Tuple2ResultSortComparator<>());
  OperatorSubtaskState snapshot=testHarness.snapshot(0,0);
  OperatorSnapshotUtil.writeStateHandle(snapshot,"src/test/resources/win-op-migration-test-reduce-event-time-flink" + flinkGenerateSavepointVersion + "-snapshot");
  testHarness.close();
}
