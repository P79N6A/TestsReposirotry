@SuppressWarnings("unchecked") @Test public void testCorrectClassLoaderUsedOnSnapshot() throws Exception {
  AbstractStateBackend abstractStateBackend=new MemoryStateBackend(4096);
  final Environment env=createMockEnvironment();
  OperatorStateBackend operatorStateBackend=abstractStateBackend.createOperatorStateBackend(env,"test-op-name");
  AtomicInteger copyCounter=new AtomicInteger(0);
  TypeSerializer<Integer> serializer=new VerifyingIntSerializer(env.getUserClassLoader(),copyCounter);
  ListStateDescriptor<Integer> stateDescriptor=new ListStateDescriptor<>("test",serializer);
  ListState<Integer> listState=operatorStateBackend.getListState(stateDescriptor);
  listState.add(42);
  AtomicInteger keyCopyCounter=new AtomicInteger(0);
  AtomicInteger valueCopyCounter=new AtomicInteger(0);
  TypeSerializer<Integer> keySerializer=new VerifyingIntSerializer(env.getUserClassLoader(),keyCopyCounter);
  TypeSerializer<Integer> valueSerializer=new VerifyingIntSerializer(env.getUserClassLoader(),valueCopyCounter);
  MapStateDescriptor<Integer,Integer> broadcastStateDesc=new MapStateDescriptor<>("test-broadcast",keySerializer,valueSerializer);
  BroadcastState<Integer,Integer> broadcastState=operatorStateBackend.getBroadcastState(broadcastStateDesc);
  broadcastState.put(1,2);
  broadcastState.put(3,4);
  broadcastState.put(5,6);
  CheckpointStreamFactory streamFactory=new MemCheckpointStreamFactory(4096);
  RunnableFuture<SnapshotResult<OperatorStateHandle>> runnableFuture=operatorStateBackend.snapshot(1,1,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation());
  FutureUtil.runIfNotDoneAndGet(runnableFuture);
  assertTrue(copyCounter.get() > 0);
  assertTrue(keyCopyCounter.get() > 0);
  assertTrue(valueCopyCounter.get() > 0);
}
