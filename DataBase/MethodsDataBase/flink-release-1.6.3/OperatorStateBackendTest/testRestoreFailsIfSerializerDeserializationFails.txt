@Test public void testRestoreFailsIfSerializerDeserializationFails() throws Exception {
  AbstractStateBackend abstractStateBackend=new MemoryStateBackend(4096);
  OperatorStateBackend operatorStateBackend=abstractStateBackend.createOperatorStateBackend(createMockEnvironment(),"test-op-name");
  ListStateDescriptor<Serializable> stateDescriptor1=new ListStateDescriptor<>("test1",new JavaSerializer<>());
  ListStateDescriptor<Serializable> stateDescriptor2=new ListStateDescriptor<>("test2",new JavaSerializer<>());
  ListStateDescriptor<Serializable> stateDescriptor3=new ListStateDescriptor<>("test3",new JavaSerializer<>());
  ListState<Serializable> listState1=operatorStateBackend.getListState(stateDescriptor1);
  ListState<Serializable> listState2=operatorStateBackend.getListState(stateDescriptor2);
  ListState<Serializable> listState3=operatorStateBackend.getUnionListState(stateDescriptor3);
  listState1.add(42);
  listState1.add(4711);
  listState2.add(7);
  listState2.add(13);
  listState2.add(23);
  listState3.add(17);
  listState3.add(18);
  listState3.add(19);
  listState3.add(20);
  CheckpointStreamFactory streamFactory=new MemCheckpointStreamFactory(4096);
  RunnableFuture<SnapshotResult<OperatorStateHandle>> runnableFuture=operatorStateBackend.snapshot(1,1,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation());
  SnapshotResult<OperatorStateHandle> snapshotResult=FutureUtil.runIfNotDoneAndGet(runnableFuture);
  OperatorStateHandle stateHandle=snapshotResult.getJobManagerOwnedSnapshot();
  try {
    operatorStateBackend.close();
    operatorStateBackend.dispose();
    operatorStateBackend=abstractStateBackend.createOperatorStateBackend(new DummyEnvironment(new ArtificialCNFExceptionThrowingClassLoader(getClass().getClassLoader(),Collections.singleton(JavaSerializer.class.getName()))),"testOperator");
    operatorStateBackend.restore(StateObjectCollection.singleton(stateHandle));
    fail("The operator state restore should have failed if the previous state serializer could not be loaded.");
  }
 catch (  IOException expected) {
    Assert.assertTrue(expected.getMessage().contains("Unable to restore operator state"));
  }
 finally {
    stateHandle.discardState();
  }
}
