@Test public void testSnapshotAsyncCancel() throws Exception {
  DefaultOperatorStateBackend operatorStateBackend=new DefaultOperatorStateBackend(OperatorStateBackendTest.class.getClassLoader(),new ExecutionConfig(),true);
  ListStateDescriptor<MutableType> stateDescriptor1=new ListStateDescriptor<>("test1",new JavaSerializer<MutableType>());
  ListState<MutableType> listState1=operatorStateBackend.getOperatorState(stateDescriptor1);
  listState1.add(MutableType.of(42));
  listState1.add(MutableType.of(4711));
  BlockerCheckpointStreamFactory streamFactory=new BlockerCheckpointStreamFactory(1024 * 1024);
  OneShotLatch waiterLatch=new OneShotLatch();
  OneShotLatch blockerLatch=new OneShotLatch();
  streamFactory.setWaiterLatch(waiterLatch);
  streamFactory.setBlockerLatch(blockerLatch);
  RunnableFuture<SnapshotResult<OperatorStateHandle>> runnableFuture=operatorStateBackend.snapshot(1,1,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation());
  ExecutorService executorService=Executors.newFixedThreadPool(1);
  executorService.submit(runnableFuture);
  waiterLatch.await();
  runnableFuture.cancel(true);
  for (  BlockingCheckpointOutputStream stream : streamFactory.getAllCreatedStreams()) {
    Assert.assertTrue(stream.isClosed());
  }
  blockerLatch.trigger();
  try {
    runnableFuture.get(60,TimeUnit.SECONDS);
    Assert.fail();
  }
 catch (  CancellationException ignore) {
  }
}
