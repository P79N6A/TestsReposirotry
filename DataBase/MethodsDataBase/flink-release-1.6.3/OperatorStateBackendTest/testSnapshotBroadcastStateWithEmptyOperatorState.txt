@Test public void testSnapshotBroadcastStateWithEmptyOperatorState() throws Exception {
  final AbstractStateBackend abstractStateBackend=new MemoryStateBackend(4096);
  final OperatorStateBackend operatorStateBackend=abstractStateBackend.createOperatorStateBackend(createMockEnvironment(),"testOperator");
  final MapStateDescriptor<Integer,Integer> broadcastStateDesc=new MapStateDescriptor<>("test-broadcast",BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO);
  final Map<Integer,Integer> expected=new HashMap<>(3);
  expected.put(1,2);
  expected.put(3,4);
  expected.put(5,6);
  final BroadcastState<Integer,Integer> broadcastState=operatorStateBackend.getBroadcastState(broadcastStateDesc);
  broadcastState.putAll(expected);
  final CheckpointStreamFactory streamFactory=new MemCheckpointStreamFactory(4096);
  OperatorStateHandle stateHandle=null;
  try {
    RunnableFuture<SnapshotResult<OperatorStateHandle>> snapshot=operatorStateBackend.snapshot(0L,0L,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation());
    SnapshotResult<OperatorStateHandle> snapshotResult=FutureUtil.runIfNotDoneAndGet(snapshot);
    stateHandle=snapshotResult.getJobManagerOwnedSnapshot();
    assertNotNull(stateHandle);
    final Map<Integer,Integer> retrieved=new HashMap<>();
    operatorStateBackend.restore(StateObjectCollection.singleton(stateHandle));
    BroadcastState<Integer,Integer> retrievedState=operatorStateBackend.getBroadcastState(broadcastStateDesc);
    for (    Map.Entry<Integer,Integer> e : retrievedState.entries()) {
      retrieved.put(e.getKey(),e.getValue());
    }
    assertEquals(expected,retrieved);
    broadcastState.remove(1);
    expected.remove(1);
    snapshot=operatorStateBackend.snapshot(1L,1L,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation());
    snapshotResult=FutureUtil.runIfNotDoneAndGet(snapshot);
    stateHandle.discardState();
    stateHandle=snapshotResult.getJobManagerOwnedSnapshot();
    retrieved.clear();
    operatorStateBackend.restore(StateObjectCollection.singleton(stateHandle));
    retrievedState=operatorStateBackend.getBroadcastState(broadcastStateDesc);
    for (    Map.Entry<Integer,Integer> e : retrievedState.immutableEntries()) {
      retrieved.put(e.getKey(),e.getValue());
    }
    assertEquals(expected,retrieved);
    broadcastState.clear();
    expected.clear();
    snapshot=operatorStateBackend.snapshot(2L,2L,streamFactory,CheckpointOptions.forCheckpointWithDefaultLocation());
    snapshotResult=FutureUtil.runIfNotDoneAndGet(snapshot);
    if (stateHandle != null) {
      stateHandle.discardState();
    }
    stateHandle=snapshotResult.getJobManagerOwnedSnapshot();
    retrieved.clear();
    operatorStateBackend.restore(StateObjectCollection.singleton(stateHandle));
    retrievedState=operatorStateBackend.getBroadcastState(broadcastStateDesc);
    for (    Map.Entry<Integer,Integer> e : retrievedState.immutableEntries()) {
      retrieved.put(e.getKey(),e.getValue());
    }
    assertTrue(expected.isEmpty());
    assertEquals(expected,retrieved);
    if (stateHandle != null) {
      stateHandle.discardState();
      stateHandle=null;
    }
  }
  finally {
    operatorStateBackend.close();
    operatorStateBackend.dispose();
    if (stateHandle != null) {
      stateHandle.discardState();
    }
  }
}
