@Test public void testRegisterStatesWithoutTypeSerializer() throws Exception {
  final Class<?> registeredType=FutureTask.class;
  assertFalse(new KryoSerializer<>(File.class,new ExecutionConfig()).getKryo().getDefaultSerializer(registeredType) instanceof com.esotericsoftware.kryo.serializers.JavaSerializer);
  final ExecutionConfig cfg=new ExecutionConfig();
  cfg.registerTypeWithKryoSerializer(registeredType,com.esotericsoftware.kryo.serializers.JavaSerializer.class);
  final OperatorStateBackend operatorStateBackend=new DefaultOperatorStateBackend(classLoader,cfg,false);
  ListStateDescriptor<File> stateDescriptor=new ListStateDescriptor<>("test",File.class);
  ListStateDescriptor<String> stateDescriptor2=new ListStateDescriptor<>("test2",String.class);
  ListState<File> listState=operatorStateBackend.getListState(stateDescriptor);
  assertNotNull(listState);
  ListState<String> listState2=operatorStateBackend.getListState(stateDescriptor2);
  assertNotNull(listState2);
  assertEquals(2,operatorStateBackend.getRegisteredStateNames().size());
  TypeSerializer<?> serializer=((PartitionableListState<?>)listState).getStateMetaInfo().getPartitionStateSerializer();
  assertTrue(serializer instanceof KryoSerializer);
  assertTrue(((KryoSerializer<?>)serializer).getKryo().getSerializer(registeredType) instanceof com.esotericsoftware.kryo.serializers.JavaSerializer);
  Iterator<String> it=listState2.get().iterator();
  assertFalse(it.hasNext());
  listState2.add("kevin");
  listState2.add("sunny");
  it=listState2.get().iterator();
  assertEquals("kevin",it.next());
  assertEquals("sunny",it.next());
  assertFalse(it.hasNext());
}
