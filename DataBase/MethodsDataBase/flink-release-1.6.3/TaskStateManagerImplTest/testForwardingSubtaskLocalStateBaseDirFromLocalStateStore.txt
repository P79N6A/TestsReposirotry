/** 
 * This tests if the  {@link TaskStateManager} properly returns the the subtask local state dir from thecorresponding  {@link TaskLocalStateStoreImpl}.
 */
@Test public void testForwardingSubtaskLocalStateBaseDirFromLocalStateStore() throws IOException {
  JobID jobID=new JobID(42L,43L);
  AllocationID allocationID=new AllocationID(4711L,23L);
  JobVertexID jobVertexID=new JobVertexID(12L,34L);
  ExecutionAttemptID executionAttemptID=new ExecutionAttemptID(23L,24L);
  TestCheckpointResponder checkpointResponderMock=new TestCheckpointResponder();
  Executor directExecutor=Executors.directExecutor();
  TemporaryFolder tmpFolder=new TemporaryFolder();
  try {
    tmpFolder.create();
    File[] allocBaseDirs=new File[]{tmpFolder.newFolder(),tmpFolder.newFolder(),tmpFolder.newFolder()};
    LocalRecoveryDirectoryProviderImpl directoryProvider=new LocalRecoveryDirectoryProviderImpl(allocBaseDirs,jobID,jobVertexID,0);
    LocalRecoveryConfig localRecoveryConfig=new LocalRecoveryConfig(true,directoryProvider);
    TaskLocalStateStore taskLocalStateStore=new TaskLocalStateStoreImpl(jobID,allocationID,jobVertexID,13,localRecoveryConfig,directExecutor);
    TaskStateManager taskStateManager=taskStateManager(jobID,executionAttemptID,checkpointResponderMock,null,taskLocalStateStore);
    LocalRecoveryConfig localRecoveryConfFromTaskLocalStateStore=taskLocalStateStore.getLocalRecoveryConfig();
    LocalRecoveryConfig localRecoveryConfFromTaskStateManager=taskStateManager.createLocalRecoveryConfig();
    for (int i=0; i < 10; ++i) {
      Assert.assertEquals(allocBaseDirs[i % allocBaseDirs.length],localRecoveryConfFromTaskLocalStateStore.getLocalStateDirectoryProvider().allocationBaseDirectory(i));
      Assert.assertEquals(allocBaseDirs[i % allocBaseDirs.length],localRecoveryConfFromTaskStateManager.getLocalStateDirectoryProvider().allocationBaseDirectory(i));
    }
    Assert.assertEquals(localRecoveryConfFromTaskLocalStateStore.isLocalRecoveryEnabled(),localRecoveryConfFromTaskStateManager.isLocalRecoveryEnabled());
  }
  finally {
    tmpFolder.delete();
  }
}
