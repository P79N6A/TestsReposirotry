/** 
 * This test verifies that checkpoint barriers are correctly forwarded.
 */
@Test @SuppressWarnings("unchecked") public void testCheckpointBarriers() throws Exception {
  final TwoInputStreamTaskTestHarness<String,Integer,String> testHarness=new TwoInputStreamTaskTestHarness<String,Integer,String>(TwoInputStreamTask::new,2,2,new int[]{1,2},BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.INT_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setupOutputForSingletonOperatorChain();
  StreamConfig streamConfig=testHarness.getStreamConfig();
  CoStreamMap<String,Integer,String> coMapOperator=new CoStreamMap<String,Integer,String>(new IdentityMap());
  streamConfig.setStreamOperator(coMapOperator);
  streamConfig.setOperatorID(new OperatorID());
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<Object>();
  long initialTime=0L;
  testHarness.invoke();
  testHarness.waitForTaskRunning();
  testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,0);
  testHarness.processElement(new StreamRecord<String>("Hello-0-0",initialTime),0,0);
  testHarness.processElement(new StreamRecord<String>("Ciao-0-0",initialTime),0,1);
  expectedOutput.add(new StreamRecord<String>("Ciao-0-0",initialTime));
  testHarness.waitForInputProcessing();
  testHarness.processElement(new StreamRecord<Integer>(11,initialTime),1,1);
  testHarness.processElement(new StreamRecord<Integer>(111,initialTime),1,1);
  expectedOutput.add(new StreamRecord<String>("11",initialTime));
  expectedOutput.add(new StreamRecord<String>("111",initialTime));
  testHarness.waitForInputProcessing();
  for (int i=0; i < 20; ++i) {
    if (testHarness.getOutput().size() >= expectedOutput.size()) {
      break;
    }
 else {
      Thread.sleep(100);
    }
  }
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),0,1);
  testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,0);
  testHarness.processEvent(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()),1,1);
  testHarness.waitForInputProcessing();
  testHarness.endInput();
  testHarness.waitForTaskCompletion();
  expectedOutput.add(new CheckpointBarrier(0,0,CheckpointOptions.forCheckpointWithDefaultLocation()));
  expectedOutput.add(new StreamRecord<String>("Hello-0-0",initialTime));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  List<String> resultElements=TestHarnessUtil.getRawElementsFromOutput(testHarness.getOutput());
  Assert.assertEquals(4,resultElements.size());
}
