@Test public void testIterativeWithABACPattern() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  final Event startEvent1=new Event(40,"start",1.0);
  final Event startEvent2=new Event(40,"start",2.0);
  final Event startEvent3=new Event(40,"start",3.0);
  final Event startEvent4=new Event(40,"start",4.0);
  final SubEvent middleEvent1=new SubEvent(41,"foo1",1.0,10);
  final SubEvent middleEvent2=new SubEvent(42,"foo2",2.0,10);
  final SubEvent middleEvent3=new SubEvent(43,"foo3",3.0,10);
  final SubEvent middleEvent4=new SubEvent(43,"foo4",1.0,10);
  final Event endEvent=new Event(46,"end",1.0);
  inputEvents.add(new StreamRecord<>(startEvent1,1L));
  inputEvents.add(new StreamRecord<Event>(middleEvent1,2L));
  inputEvents.add(new StreamRecord<>(startEvent2,2L));
  inputEvents.add(new StreamRecord<>(startEvent3,2L));
  inputEvents.add(new StreamRecord<Event>(middleEvent2,2L));
  inputEvents.add(new StreamRecord<>(startEvent4,2L));
  inputEvents.add(new StreamRecord<Event>(middleEvent3,2L));
  inputEvents.add(new StreamRecord<Event>(middleEvent4,2L));
  inputEvents.add(new StreamRecord<>(endEvent,4L));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=6215754202506583964L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("start");
    }
  }
).followedByAny("middle1").subtype(SubEvent.class).where(new SimpleCondition<SubEvent>(){
    private static final long serialVersionUID=2178338526904474690L;
    @Override public boolean filter(    SubEvent value) throws Exception {
      return value.getName().startsWith("foo");
    }
  }
).followedBy("middle2").where(new IterativeCondition<Event>(){
    private static final long serialVersionUID=-1223388426808292695L;
    @Override public boolean filter(    Event value,    Context<Event> ctx) throws Exception {
      if (!value.getName().equals("start")) {
        return false;
      }
      double sum=0.0;
      for (      Event e : ctx.getEventsForPattern("middle2")) {
        sum+=e.getPrice();
      }
      sum+=value.getPrice();
      return Double.compare(sum,5.0) <= 0;
    }
  }
).oneOrMore().followedBy("end").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=562590474115118323L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("end");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  TestSharedBuffer<Event> sharedBuffer=TestSharedBuffer.createTestBuffer(Event.createTypeSerializer());
  for (  StreamRecord<Event> inputEvent : inputEvents) {
    nfa.process(sharedBuffer,nfa.createInitialNFAState(),inputEvent.getValue(),inputEvent.getTimestamp());
  }
  assertEquals(20,sharedBuffer.getStateReads());
  assertEquals(24,sharedBuffer.getStateWrites());
  assertEquals(44,sharedBuffer.getStateAccesses());
}
