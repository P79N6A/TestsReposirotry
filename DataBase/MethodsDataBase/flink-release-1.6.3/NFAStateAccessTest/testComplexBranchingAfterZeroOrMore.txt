@Test public void testComplexBranchingAfterZeroOrMore() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event startEvent=new Event(40,"c",1.0);
  Event middleEvent1=new Event(41,"a",2.0);
  Event middleEvent2=new Event(42,"a",3.0);
  Event middleEvent3=new Event(43,"a",4.0);
  Event end1=new Event(44,"b",5.0);
  Event end2=new Event(45,"d",6.0);
  Event end3=new Event(46,"d",7.0);
  Event end4=new Event(47,"e",8.0);
  inputEvents.add(new StreamRecord<>(startEvent,1));
  inputEvents.add(new StreamRecord<>(middleEvent1,3));
  inputEvents.add(new StreamRecord<>(middleEvent2,4));
  inputEvents.add(new StreamRecord<>(middleEvent3,5));
  inputEvents.add(new StreamRecord<>(end1,6));
  inputEvents.add(new StreamRecord<>(end2,7));
  inputEvents.add(new StreamRecord<>(end3,8));
  inputEvents.add(new StreamRecord<>(end4,9));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("c");
    }
  }
).followedByAny("middle").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).oneOrMore().allowCombinations().optional().followedByAny("end1").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("b");
    }
  }
).followedByAny("end2").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("d");
    }
  }
).followedByAny("end3").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("e");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  TestSharedBuffer<Event> sharedBuffer=TestSharedBuffer.createTestBuffer(Event.createTypeSerializer());
  for (  StreamRecord<Event> inputEvent : inputEvents) {
    nfa.process(sharedBuffer,nfa.createInitialNFAState(),inputEvent.getValue(),inputEvent.getTimestamp());
  }
  assertEquals(5,sharedBuffer.getStateReads());
  assertEquals(6,sharedBuffer.getStateWrites());
  assertEquals(11,sharedBuffer.getStateAccesses());
}
