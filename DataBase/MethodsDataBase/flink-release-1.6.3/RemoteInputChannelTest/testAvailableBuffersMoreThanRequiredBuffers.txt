/** 
 * Tests to verify the behaviours of recycling floating and exclusive buffers if the number of available buffers is more than required buffers by decreasing the sender's backlog.
 */
@Test public void testAvailableBuffersMoreThanRequiredBuffers() throws Exception {
  final NetworkBufferPool networkBufferPool=new NetworkBufferPool(16,32);
  final int numExclusiveBuffers=2;
  final int numFloatingBuffers=14;
  final SingleInputGate inputGate=createSingleInputGate();
  final RemoteInputChannel inputChannel=createRemoteInputChannel(inputGate);
  inputGate.setInputChannel(inputChannel.partitionId.getPartitionId(),inputChannel);
  Throwable thrown=null;
  try {
    final BufferPool bufferPool=spy(networkBufferPool.createBufferPool(numFloatingBuffers,numFloatingBuffers));
    inputGate.setBufferPool(bufferPool);
    inputGate.assignExclusiveSegments(networkBufferPool,numExclusiveBuffers);
    inputChannel.requestSubpartition(0);
    final Buffer exclusiveBuffer=inputChannel.requestBuffer();
    assertNotNull(exclusiveBuffer);
    final Buffer floatingBuffer=bufferPool.requestBuffer();
    assertNotNull(floatingBuffer);
    verify(bufferPool,times(1)).requestBuffer();
    inputChannel.onSenderBacklog(12);
    verify(bufferPool,times(14)).requestBuffer();
    verify(bufferPool,times(0)).addBufferListener(inputChannel);
    assertEquals("There should be 14 buffers available in the channel",14,inputChannel.getNumberOfAvailableBuffers());
    assertEquals("There should be 14 buffers required in the channel",14,inputChannel.getNumberOfRequiredBuffers());
    assertEquals("There should be 0 buffers available in local pool",0,bufferPool.getNumberOfAvailableMemorySegments());
    inputChannel.onSenderBacklog(10);
    verify(bufferPool,times(14)).requestBuffer();
    verify(bufferPool,times(0)).addBufferListener(inputChannel);
    assertEquals("There should be 14 buffers available in the channel",14,inputChannel.getNumberOfAvailableBuffers());
    assertEquals("There should be 12 buffers required in the channel",12,inputChannel.getNumberOfRequiredBuffers());
    assertEquals("There should be 0 buffers available in local pool",0,bufferPool.getNumberOfAvailableMemorySegments());
    exclusiveBuffer.recycleBuffer();
    verify(bufferPool,times(14)).requestBuffer();
    verify(bufferPool,times(0)).addBufferListener(inputChannel);
    assertEquals("There should be 14 buffers available in the channel",14,inputChannel.getNumberOfAvailableBuffers());
    assertEquals("There should be 12 buffers required in the channel",12,inputChannel.getNumberOfRequiredBuffers());
    assertEquals("There should be 1 buffer available in local pool",1,bufferPool.getNumberOfAvailableMemorySegments());
    floatingBuffer.recycleBuffer();
    verify(bufferPool,times(14)).requestBuffer();
    verify(bufferPool,times(0)).addBufferListener(inputChannel);
    assertEquals("There should be 14 buffers available in the channel",14,inputChannel.getNumberOfAvailableBuffers());
    assertEquals("There should be 12 buffers required in the channel",12,inputChannel.getNumberOfRequiredBuffers());
    assertEquals("There should be 2 buffers available in local pool",2,bufferPool.getNumberOfAvailableMemorySegments());
  }
 catch (  Throwable t) {
    thrown=t;
  }
 finally {
    cleanup(networkBufferPool,null,null,thrown,inputChannel);
  }
}
