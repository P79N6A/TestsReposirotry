@Test public void testSkipPastLast2() throws Exception {
  List<StreamRecord<Event>> streamEvents=new ArrayList<>();
  Event a1=new Event(1,"a1",0.0);
  Event a2=new Event(2,"a2",0.0);
  Event b1=new Event(3,"b1",0.0);
  Event b2=new Event(4,"b2",0.0);
  Event c1=new Event(5,"c1",0.0);
  Event c2=new Event(6,"c2",0.0);
  Event d1=new Event(7,"d1",0.0);
  Event d2=new Event(7,"d2",0.0);
  streamEvents.add(new StreamRecord<>(a1));
  streamEvents.add(new StreamRecord<>(a2));
  streamEvents.add(new StreamRecord<>(b1));
  streamEvents.add(new StreamRecord<>(b2));
  streamEvents.add(new StreamRecord<>(c1));
  streamEvents.add(new StreamRecord<>(c2));
  streamEvents.add(new StreamRecord<>(d1));
  streamEvents.add(new StreamRecord<>(d2));
  Pattern<Event,?> pattern=Pattern.<Event>begin("a",AfterMatchSkipStrategy.skipPastLastEvent()).where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("a");
    }
  }
).followedByAny("b").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("b");
    }
  }
).followedByAny("c").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("c");
    }
  }
).followedBy("d").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("d");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  List<List<Event>> resultingPatterns=feedNFA(streamEvents,nfa,pattern.getAfterMatchSkipStrategy());
  compareMaps(resultingPatterns,Collections.singletonList(Lists.newArrayList(a1,b1,c1,d1)));
}
