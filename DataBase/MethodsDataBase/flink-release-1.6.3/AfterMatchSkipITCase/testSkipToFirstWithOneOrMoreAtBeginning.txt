/** 
 * Example from docs. 
 */
@Test public void testSkipToFirstWithOneOrMoreAtBeginning() throws Exception {
  List<StreamRecord<Event>> streamEvents=new ArrayList<>();
  Event a1=new Event(1,"a1",0.0);
  Event a2=new Event(2,"a2",0.0);
  Event a3=new Event(3,"a3",0.0);
  Event b1=new Event(4,"b1",0.0);
  streamEvents.add(new StreamRecord<>(a1));
  streamEvents.add(new StreamRecord<>(a2));
  streamEvents.add(new StreamRecord<>(a3));
  streamEvents.add(new StreamRecord<>(b1));
  Pattern<Event,?> pattern=Pattern.<Event>begin("a",AfterMatchSkipStrategy.skipToFirst("a")).where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("a");
    }
  }
).oneOrMore().consecutive().greedy().next("b").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("b");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  List<List<Event>> resultingPatterns=feedNFA(streamEvents,nfa,pattern.getAfterMatchSkipStrategy());
  compareMaps(resultingPatterns,Lists.newArrayList(Lists.newArrayList(a1,a2,a3,b1),Lists.newArrayList(a2,a3,b1),Lists.newArrayList(a3,b1)));
}
