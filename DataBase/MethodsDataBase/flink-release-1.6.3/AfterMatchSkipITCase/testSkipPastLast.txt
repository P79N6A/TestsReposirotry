@Test public void testSkipPastLast() throws Exception {
  List<StreamRecord<Event>> streamEvents=new ArrayList<>();
  Event a1=new Event(1,"a",0.0);
  Event a2=new Event(2,"a",0.0);
  Event a3=new Event(3,"a",0.0);
  Event a4=new Event(4,"a",0.0);
  Event a5=new Event(5,"a",0.0);
  Event a6=new Event(6,"a",0.0);
  streamEvents.add(new StreamRecord<Event>(a1));
  streamEvents.add(new StreamRecord<Event>(a2));
  streamEvents.add(new StreamRecord<Event>(a3));
  streamEvents.add(new StreamRecord<Event>(a4));
  streamEvents.add(new StreamRecord<Event>(a5));
  streamEvents.add(new StreamRecord<Event>(a6));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start",AfterMatchSkipStrategy.skipPastLastEvent()).where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).times(3);
  NFA<Event> nfa=compile(pattern,false);
  List<List<Event>> resultingPatterns=feedNFA(streamEvents,nfa,pattern.getAfterMatchSkipStrategy());
  compareMaps(resultingPatterns,Lists.newArrayList(Lists.newArrayList(a1,a2,a3),Lists.newArrayList(a4,a5,a6)));
}
