@Test public void testSkipToFirstAtStartPosition() throws Exception {
  List<StreamRecord<Event>> streamEvents=new ArrayList<>();
  Event ab1=new Event(1,"ab1",0.0);
  Event c1=new Event(2,"c1",0.0);
  Event ab2=new Event(3,"ab2",0.0);
  Event c2=new Event(4,"c2",0.0);
  streamEvents.add(new StreamRecord<Event>(ab1));
  streamEvents.add(new StreamRecord<Event>(c1));
  streamEvents.add(new StreamRecord<Event>(ab2));
  streamEvents.add(new StreamRecord<Event>(c2));
  Pattern<Event,?> pattern=Pattern.<Event>begin("b",AfterMatchSkipStrategy.skipToFirst("b")).where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("b");
    }
  }
).next("c").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("c");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  List<List<Event>> resultingPatterns=feedNFA(streamEvents,nfa,pattern.getAfterMatchSkipStrategy());
  compareMaps(resultingPatterns,Lists.newArrayList(Lists.newArrayList(ab1,c1),Lists.newArrayList(ab2,c2)));
}
