/** 
 * Example from docs. 
 */
@Test public void testSkipToFirstDiscarding() throws Exception {
  List<StreamRecord<Event>> streamEvents=new ArrayList<>();
  Event a=new Event(1,"a",0.0);
  Event b=new Event(2,"b",0.0);
  Event c1=new Event(3,"c1",0.0);
  Event c2=new Event(4,"c2",0.0);
  Event c3=new Event(5,"c3",0.0);
  Event d=new Event(6,"d",0.0);
  streamEvents.add(new StreamRecord<>(a));
  streamEvents.add(new StreamRecord<>(b));
  streamEvents.add(new StreamRecord<>(c1));
  streamEvents.add(new StreamRecord<>(c2));
  streamEvents.add(new StreamRecord<>(c3));
  streamEvents.add(new StreamRecord<>(d));
  Pattern<Event,?> pattern=Pattern.<Event>begin("a or c",AfterMatchSkipStrategy.skipToFirst("c*")).where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("a") || value.getName().contains("c");
    }
  }
).followedBy("b or c").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("b") || value.getName().contains("c");
    }
  }
).followedBy("c*").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("c");
    }
  }
).oneOrMore().greedy().followedBy("d").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("d");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  List<List<Event>> resultingPatterns=feedNFA(streamEvents,nfa,pattern.getAfterMatchSkipStrategy());
  compareMaps(resultingPatterns,Lists.newArrayList(Lists.newArrayList(a,b,c1,c2,c3,d),Lists.newArrayList(c1,c2,c3,d)));
}
