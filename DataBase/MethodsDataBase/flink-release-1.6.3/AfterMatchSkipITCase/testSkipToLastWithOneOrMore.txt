@Test public void testSkipToLastWithOneOrMore() throws Exception {
  List<StreamRecord<Event>> streamEvents=new ArrayList<>();
  Event a1=new Event(1,"a1",0.0);
  Event b1=new Event(2,"b1",0.0);
  Event a2=new Event(3,"a2",0.0);
  Event b2=new Event(4,"b2",0.0);
  Event b3=new Event(5,"b3",0.0);
  Event a3=new Event(3,"a3",0.0);
  Event b4=new Event(4,"b4",0.0);
  streamEvents.add(new StreamRecord<Event>(a1));
  streamEvents.add(new StreamRecord<Event>(b1));
  streamEvents.add(new StreamRecord<Event>(a2));
  streamEvents.add(new StreamRecord<Event>(b2));
  streamEvents.add(new StreamRecord<Event>(b3));
  streamEvents.add(new StreamRecord<Event>(a3));
  streamEvents.add(new StreamRecord<Event>(b4));
  Pattern<Event,?> pattern=Pattern.<Event>begin("a",AfterMatchSkipStrategy.skipToLast("b")).where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("a");
    }
  }
).next("b").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("b");
    }
  }
).oneOrMore().consecutive();
  NFA<Event> nfa=compile(pattern,false);
  List<List<Event>> resultingPatterns=feedNFA(streamEvents,nfa,pattern.getAfterMatchSkipStrategy());
  compareMaps(resultingPatterns,Lists.newArrayList(Lists.newArrayList(a1,b1),Lists.newArrayList(a2,b2),Lists.newArrayList(a3,b4)));
}
