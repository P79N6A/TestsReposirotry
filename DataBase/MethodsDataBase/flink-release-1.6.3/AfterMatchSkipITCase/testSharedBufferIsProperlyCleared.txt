@Test public void testSharedBufferIsProperlyCleared() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  for (int i=0; i < 4; i++) {
    inputEvents.add(new StreamRecord<>(new Event(1,"a",1.0),i));
  }
  AfterMatchSkipStrategy matchSkipStrategy=AfterMatchSkipStrategy.skipPastLastEvent();
  Pattern<Event,?> pattern=Pattern.<Event>begin("start",matchSkipStrategy).where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return true;
    }
  }
).times(2);
  NFA<Event> nfa=compile(pattern,false);
  SharedBuffer<Event> sharedBuffer=TestSharedBuffer.createTestBuffer(Event.createTypeSerializer());
  NFAState nfaState=nfa.createInitialNFAState();
  for (  StreamRecord<Event> inputEvent : inputEvents) {
    nfa.advanceTime(sharedBuffer,nfaState,inputEvent.getTimestamp());
    nfa.process(sharedBuffer,nfaState,inputEvent.getValue(),inputEvent.getTimestamp(),matchSkipStrategy);
  }
  assertThat(sharedBuffer.isEmpty(),Matchers.is(true));
}
