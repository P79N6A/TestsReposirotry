@Test public void testSkipToLast() throws Exception {
  List<StreamRecord<Event>> streamEvents=new ArrayList<>();
  Event ab1=new Event(1,"ab",0.0);
  Event ab2=new Event(2,"ab",0.0);
  Event ab3=new Event(3,"ab",0.0);
  Event ab4=new Event(4,"ab",0.0);
  Event ab5=new Event(5,"ab",0.0);
  Event ab6=new Event(6,"ab",0.0);
  Event ab7=new Event(7,"ab",0.0);
  streamEvents.add(new StreamRecord<Event>(ab1));
  streamEvents.add(new StreamRecord<Event>(ab2));
  streamEvents.add(new StreamRecord<Event>(ab3));
  streamEvents.add(new StreamRecord<Event>(ab4));
  streamEvents.add(new StreamRecord<Event>(ab5));
  streamEvents.add(new StreamRecord<Event>(ab6));
  streamEvents.add(new StreamRecord<Event>(ab7));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start",AfterMatchSkipStrategy.skipToLast("end")).where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("a");
    }
  }
).times(2).next("end").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("b");
    }
  }
).times(2);
  NFA<Event> nfa=compile(pattern,false);
  List<List<Event>> resultingPatterns=feedNFA(streamEvents,nfa,pattern.getAfterMatchSkipStrategy());
  compareMaps(resultingPatterns,Lists.newArrayList(Lists.newArrayList(ab1,ab2,ab3,ab4),Lists.newArrayList(ab4,ab5,ab6,ab7)));
}
