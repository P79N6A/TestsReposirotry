@Test public void testSkipBeforeOtherAlreadyCompleted() throws Exception {
  List<StreamRecord<Event>> streamEvents=new ArrayList<>();
  Event a1=new Event(1,"a1",0.0);
  Event c1=new Event(2,"c1",0.0);
  Event a2=new Event(3,"a2",1.0);
  Event c2=new Event(4,"c2",0.0);
  Event b1=new Event(5,"b1",1.0);
  Event b2=new Event(6,"b2",0.0);
  streamEvents.add(new StreamRecord<>(a1));
  streamEvents.add(new StreamRecord<>(c1));
  streamEvents.add(new StreamRecord<>(a2));
  streamEvents.add(new StreamRecord<>(c2));
  streamEvents.add(new StreamRecord<>(b1));
  streamEvents.add(new StreamRecord<>(b2));
  Pattern<Event,?> pattern=Pattern.<Event>begin("a",AfterMatchSkipStrategy.skipToFirst("c")).where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("a");
    }
  }
).followedBy("c").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().contains("c");
    }
  }
).followedBy("b").where(new IterativeCondition<Event>(){
    @Override public boolean filter(    Event value,    Context<Event> ctx) throws Exception {
      return value.getName().contains("b") && ctx.getEventsForPattern("a").iterator().next().getPrice() == value.getPrice();
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  List<List<Event>> resultingPatterns=feedNFA(streamEvents,nfa,pattern.getAfterMatchSkipStrategy());
  compareMaps(resultingPatterns,Lists.newArrayList(Lists.newArrayList(a1,c1,b2),Lists.newArrayList(a2,c2,b1)));
}
