@Test public void testSlidingTimeWindow(){
  final int numElementsPerKey=3000;
  final int windowSize=1000;
  final int windowSlide=100;
  final int numKeys=1;
  try {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(PARALLELISM);
    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
    env.enableCheckpointing(100);
    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1,0));
    env.getConfig().disableSysoutLogging();
    env.addSource(new FailingSource(new EventTimeWindowCheckpointingITCase.KeyedEventTimeGenerator(numKeys,windowSlide),numElementsPerKey)).rebalance().timeWindowAll(Time.of(windowSize,MILLISECONDS),Time.of(windowSlide,MILLISECONDS)).apply(new RichAllWindowFunction<Tuple2<Long,IntType>,Tuple4<Long,Long,Long,IntType>,TimeWindow>(){
      private boolean open=false;
      @Override public void open(      Configuration parameters){
        assertEquals(1,getRuntimeContext().getNumberOfParallelSubtasks());
        open=true;
      }
      @Override public void apply(      TimeWindow window,      Iterable<Tuple2<Long,IntType>> values,      Collector<Tuple4<Long,Long,Long,IntType>> out){
        assertTrue(open);
        int sum=0;
        long key=-1;
        for (        Tuple2<Long,IntType> value : values) {
          sum+=value.f1.value;
          key=value.f0;
        }
        out.collect(new Tuple4<>(key,window.getStart(),window.getEnd(),new IntType(sum)));
      }
    }
).addSink(new ValidatingSink<>(new EventTimeWindowCheckpointingITCase.SinkValidatorUpdateFun(numElementsPerKey),new EventTimeWindowCheckpointingITCase.SinkValidatorCheckFun(numKeys,numElementsPerKey,windowSlide))).setParallelism(1);
    env.execute("Sliding Window Test");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
