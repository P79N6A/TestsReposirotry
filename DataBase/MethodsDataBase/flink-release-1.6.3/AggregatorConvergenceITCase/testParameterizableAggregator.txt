@Test public void testParameterizableAggregator() throws Exception {
  final int maxIterations=5;
  final String aggregatorName="elements.in.component.aggregator";
  final long componentId=1L;
  final ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Tuple2<Long,Long>> initialSolutionSet=env.fromCollection(verticesInput);
  DataSet<Tuple2<Long,Long>> edges=env.fromCollection(edgesInput);
  IterativeDataSet<Tuple2<Long,Long>> iteration=initialSolutionSet.iterate(maxIterations);
  iteration.registerAggregator(aggregatorName,new LongSumAggregatorWithParameter(componentId));
  DataSet<Tuple2<Long,Long>> verticesWithNewComponents=iteration.join(edges).where(0).equalTo(0).with(new NeighborWithComponentIDJoin()).groupBy(0).min(1);
  DataSet<Tuple2<Long,Long>> updatedComponentId=verticesWithNewComponents.join(iteration).where(0).equalTo(0).flatMap(new MinimumIdFilterCounting(aggregatorName));
  List<Tuple2<Long,Long>> result=iteration.closeWith(updatedComponentId).collect();
  Collections.sort(result,new TestBaseUtils.TupleComparator<Tuple2<Long,Long>>());
  List<Tuple2<Long,Long>> expectedResult=Arrays.asList(new Tuple2<>(1L,1L),new Tuple2<>(2L,1L),new Tuple2<>(3L,1L),new Tuple2<>(4L,1L),new Tuple2<>(5L,1L),new Tuple2<>(6L,1L),new Tuple2<>(7L,7L),new Tuple2<>(8L,7L),new Tuple2<>(9L,7L));
  assertEquals(expectedResult,result);
  long[] aggrValues=MinimumIdFilterCounting.aggr_value;
  assertEquals(3,aggrValues[0]);
  assertEquals(4,aggrValues[1]);
  assertEquals(5,aggrValues[2]);
  assertEquals(6,aggrValues[3]);
}
