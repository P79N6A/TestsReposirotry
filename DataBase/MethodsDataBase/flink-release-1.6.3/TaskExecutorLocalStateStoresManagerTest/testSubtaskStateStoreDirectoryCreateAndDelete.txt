/** 
 * This tests that the  {@link TaskExecutorLocalStateStoresManager} creates {@link TaskLocalStateStoreImpl} that havea properly initialized local state base directory. It also checks that subdirectories are correctly deleted on shutdown.
 */
@Test public void testSubtaskStateStoreDirectoryCreateAndDelete() throws Exception {
  JobID jobID=new JobID();
  JobVertexID jobVertexID=new JobVertexID();
  AllocationID allocationID=new AllocationID();
  int subtaskIdx=23;
  File[] rootDirs={temporaryFolder.newFolder(),temporaryFolder.newFolder(),temporaryFolder.newFolder()};
  TaskExecutorLocalStateStoresManager storesManager=new TaskExecutorLocalStateStoresManager(true,rootDirs,Executors.directExecutor());
  TaskLocalStateStore taskLocalStateStore=storesManager.localStateStoreForSubtask(jobID,allocationID,jobVertexID,subtaskIdx);
  LocalRecoveryDirectoryProvider directoryProvider=taskLocalStateStore.getLocalRecoveryConfig().getLocalStateDirectoryProvider();
  for (int i=0; i < 10; ++i) {
    Assert.assertEquals(new File(rootDirs[(i & Integer.MAX_VALUE) % rootDirs.length],storesManager.allocationSubDirString(allocationID)),directoryProvider.allocationBaseDirectory(i));
  }
  long chkId=42L;
  File allocBaseDirChk42=directoryProvider.allocationBaseDirectory(chkId);
  File subtaskSpecificCheckpointDirectory=directoryProvider.subtaskSpecificCheckpointDirectory(chkId);
  Assert.assertEquals(new File(allocBaseDirChk42,"jid_" + jobID + File.separator+ "vtx_"+ jobVertexID+ "_"+ "sti_"+ subtaskIdx+ File.separator+ "chk_"+ chkId),subtaskSpecificCheckpointDirectory);
  Assert.assertTrue(subtaskSpecificCheckpointDirectory.mkdirs());
  File testFile=new File(subtaskSpecificCheckpointDirectory,"test");
  Assert.assertTrue(testFile.createNewFile());
  Assert.assertEquals(storesManager.isLocalRecoveryEnabled(),taskLocalStateStore.getLocalRecoveryConfig().isLocalRecoveryEnabled());
  Assert.assertTrue(testFile.exists());
  storesManager.releaseLocalStateForAllocationId(allocationID);
  checkRootDirsClean(rootDirs);
  AllocationID otherAllocationID=new AllocationID();
  taskLocalStateStore=storesManager.localStateStoreForSubtask(jobID,otherAllocationID,jobVertexID,subtaskIdx);
  directoryProvider=taskLocalStateStore.getLocalRecoveryConfig().getLocalStateDirectoryProvider();
  File chkDir=directoryProvider.subtaskSpecificCheckpointDirectory(23L);
  Assert.assertTrue(chkDir.mkdirs());
  testFile=new File(chkDir,"test");
  Assert.assertTrue(testFile.createNewFile());
  storesManager.shutdown();
  checkRootDirsClean(rootDirs);
}
