/** 
 * Tests that returned slot futures are failed if the allocation request is failed.
 */
@Test public void testFailingQueuedSharedSlotScheduling() throws ExecutionException, InterruptedException {
  final CompletableFuture<AllocationID> allocationIdFuture=new CompletableFuture<>();
  final TestingResourceManagerGateway testingResourceManagerGateway=slotPoolResource.getTestingResourceManagerGateway();
  testingResourceManagerGateway.setRequestSlotConsumer((  SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId()));
  final SlotProvider slotProvider=slotPoolResource.getSlotProvider();
  CompletableFuture<LogicalSlot> logicalSlotFuture=slotProvider.allocateSlot(new ScheduledUnit(new JobVertexID(),new SlotSharingGroupId(),null),true,SlotProfile.noRequirements(),TestingUtils.infiniteTime());
  final AllocationID allocationId=allocationIdFuture.get();
  final SlotPoolGateway slotPoolGateway=slotPoolResource.getSlotPoolGateway();
  slotPoolGateway.failAllocation(allocationId,new FlinkException("Testing Exception"));
  try {
    logicalSlotFuture.get();
    fail("The slot future should have failed.");
  }
 catch (  ExecutionException ee) {
    assertTrue(ExceptionUtils.findThrowable(ee,FlinkException.class).isPresent());
  }
}
