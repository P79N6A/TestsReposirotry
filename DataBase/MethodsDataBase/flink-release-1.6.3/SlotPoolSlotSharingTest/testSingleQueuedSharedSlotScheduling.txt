@Test public void testSingleQueuedSharedSlotScheduling() throws Exception {
  final CompletableFuture<AllocationID> allocationIdFuture=new CompletableFuture<>();
  final TestingResourceManagerGateway testingResourceManagerGateway=slotPoolResource.getTestingResourceManagerGateway();
  testingResourceManagerGateway.setRequestSlotConsumer((  SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId()));
  LocalTaskManagerLocation taskManagerLocation=new LocalTaskManagerLocation();
  final SlotPoolGateway slotPoolGateway=slotPoolResource.getSlotPoolGateway();
  slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get();
  SlotSharingGroupId slotSharingGroupId=new SlotSharingGroupId();
  final SlotProvider slotProvider=slotPoolResource.getSlotProvider();
  CompletableFuture<LogicalSlot> logicalSlotFuture=slotProvider.allocateSlot(new ScheduledUnit(new JobVertexID(),slotSharingGroupId,null),true,SlotProfile.noRequirements(),TestingUtils.infiniteTime());
  assertFalse(logicalSlotFuture.isDone());
  final AllocationID allocationId=allocationIdFuture.get();
  CompletableFuture<Boolean> booleanCompletableFuture=slotPoolGateway.offerSlot(taskManagerLocation,new SimpleAckingTaskManagerGateway(),new SlotOffer(allocationId,0,ResourceProfile.UNKNOWN));
  assertTrue(booleanCompletableFuture.get());
  final LogicalSlot logicalSlot=logicalSlotFuture.get();
  assertEquals(slotSharingGroupId,logicalSlot.getSlotSharingGroupId());
}
