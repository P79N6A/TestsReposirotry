/** 
 * Tests queued slot scheduling with a single slot sharing group
 */
@Test public void testQueuedSharedSlotScheduling() throws InterruptedException, ExecutionException {
  final BlockingQueue<AllocationID> allocationIds=new ArrayBlockingQueue<>(2);
  final TestingResourceManagerGateway testingResourceManagerGateway=slotPoolResource.getTestingResourceManagerGateway();
  testingResourceManagerGateway.setRequestSlotConsumer((  SlotRequest slotRequest) -> allocationIds.offer(slotRequest.getAllocationId()));
  final TaskManagerLocation taskManagerLocation=new LocalTaskManagerLocation();
  final SlotPoolGateway slotPoolGateway=slotPoolResource.getSlotPoolGateway();
  slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get();
  final SlotSharingGroupId slotSharingGroupId=new SlotSharingGroupId();
  final JobVertexID jobVertexId1=new JobVertexID();
  final JobVertexID jobVertexId2=new JobVertexID();
  final SlotProvider slotProvider=slotPoolResource.getSlotProvider();
  CompletableFuture<LogicalSlot> logicalSlotFuture1=slotProvider.allocateSlot(new ScheduledUnit(jobVertexId1,slotSharingGroupId,null),true,SlotProfile.noRequirements(),TestingUtils.infiniteTime());
  CompletableFuture<LogicalSlot> logicalSlotFuture2=slotProvider.allocateSlot(new ScheduledUnit(jobVertexId2,slotSharingGroupId,null),true,SlotProfile.noRequirements(),TestingUtils.infiniteTime());
  assertFalse(logicalSlotFuture1.isDone());
  assertFalse(logicalSlotFuture2.isDone());
  final AllocationID allocationId1=allocationIds.take();
  CompletableFuture<LogicalSlot> logicalSlotFuture3=slotProvider.allocateSlot(new ScheduledUnit(jobVertexId1,slotSharingGroupId,null),true,SlotProfile.noRequirements(),TestingUtils.infiniteTime());
  CompletableFuture<LogicalSlot> logicalSlotFuture4=slotProvider.allocateSlot(new ScheduledUnit(jobVertexId2,slotSharingGroupId,null),true,SlotProfile.noRequirements(),TestingUtils.infiniteTime());
  assertFalse(logicalSlotFuture3.isDone());
  assertFalse(logicalSlotFuture4.isDone());
  final AllocationID allocationId2=allocationIds.take();
  CompletableFuture<Boolean> offerFuture=slotPoolGateway.offerSlot(taskManagerLocation,new SimpleAckingTaskManagerGateway(),new SlotOffer(allocationId1,0,ResourceProfile.UNKNOWN));
  assertTrue(offerFuture.get());
  LogicalSlot logicalSlot1=logicalSlotFuture1.get();
  LogicalSlot logicalSlot2=logicalSlotFuture2.get();
  assertEquals(logicalSlot1.getTaskManagerLocation(),logicalSlot2.getTaskManagerLocation());
  assertEquals(allocationId1,logicalSlot1.getAllocationId());
  assertEquals(allocationId1,logicalSlot2.getAllocationId());
  assertFalse(logicalSlotFuture3.isDone());
  assertFalse(logicalSlotFuture4.isDone());
  logicalSlot1.releaseSlot(null);
  logicalSlot2.releaseSlot(null);
  LogicalSlot logicalSlot3=logicalSlotFuture3.get();
  LogicalSlot logicalSlot4=logicalSlotFuture4.get();
  assertEquals(logicalSlot3.getTaskManagerLocation(),logicalSlot4.getTaskManagerLocation());
  assertEquals(allocationId1,logicalSlot3.getAllocationId());
  assertEquals(allocationId1,logicalSlot4.getAllocationId());
}
