@Test public void testThroughput() throws Exception {
  Object[][] configParams=new Object[][]{new Object[]{1,false,false,false,4,2},new Object[]{1,true,false,false,4,2},new Object[]{1,true,true,false,4,2},new Object[]{1,true,false,true,4,2},new Object[]{2,true,false,false,4,2},new Object[]{4,true,false,false,4,2},new Object[]{4,true,false,false,8,4}};
  for (  Object[] p : configParams) {
    final int dataVolumeGb=(Integer)p[0];
    final boolean useForwarder=(Boolean)p[1];
    final boolean isSlowSender=(Boolean)p[2];
    final boolean isSlowReceiver=(Boolean)p[3];
    final int parallelism=(Integer)p[4];
    final int numSlotsPerTaskManager=(Integer)p[5];
    if (parallelism % numSlotsPerTaskManager != 0) {
      throw new RuntimeException("The test case defines a parallelism that is not a multiple of the slots per task manager.");
    }
    final int numTaskManagers=parallelism / numSlotsPerTaskManager;
    final MiniClusterResource cluster=new MiniClusterResource(new MiniClusterResourceConfiguration.Builder().setNumberTaskManagers(numTaskManagers).setNumberSlotsPerTaskManager(numSlotsPerTaskManager).build());
    cluster.before();
    try {
      System.out.println(String.format("Running test with parameters: dataVolumeGB=%s, useForwarder=%s, isSlowSender=%s, isSlowReceiver=%s, parallelism=%s, numSlotsPerTM=%s",dataVolumeGb,useForwarder,isSlowSender,isSlowReceiver,parallelism,numSlotsPerTaskManager));
      testProgram(cluster,dataVolumeGb,useForwarder,isSlowSender,isSlowReceiver,parallelism);
    }
  finally {
      cluster.after();
    }
  }
}
