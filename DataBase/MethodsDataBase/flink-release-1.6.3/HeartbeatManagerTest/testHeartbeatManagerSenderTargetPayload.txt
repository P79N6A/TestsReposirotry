/** 
 * Tests that the heartbeat target  {@link ResourceID} is properly passed to the {@link HeartbeatListener} by the{@link HeartbeatManagerSenderImpl}.
 */
@Test public void testHeartbeatManagerSenderTargetPayload() throws Exception {
  final long heartbeatTimeout=100L;
  final long heartbeatPeriod=2000L;
  final ScheduledThreadPoolExecutor scheduledThreadPoolExecutor=new ScheduledThreadPoolExecutor(1);
  final ResourceID someTargetId=ResourceID.generate();
  final ResourceID specialTargetId=ResourceID.generate();
  final OneShotLatch someTargetReceivedLatch=new OneShotLatch();
  final OneShotLatch specialTargetReceivedLatch=new OneShotLatch();
  final TargetDependentHeartbeatReceiver someHeartbeatTarget=new TargetDependentHeartbeatReceiver(someTargetReceivedLatch);
  final TargetDependentHeartbeatReceiver specialHeartbeatTarget=new TargetDependentHeartbeatReceiver(specialTargetReceivedLatch);
  final int defaultResponse=0;
  final int specialResponse=1;
  HeartbeatManager<?,Integer> heartbeatManager=new HeartbeatManagerSenderImpl<>(heartbeatPeriod,heartbeatTimeout,ResourceID.generate(),new TargetDependentHeartbeatSender(specialTargetId,specialResponse,defaultResponse),Executors.directExecutor(),new ScheduledExecutorServiceAdapter(scheduledThreadPoolExecutor),LOG);
  try {
    heartbeatManager.monitorTarget(someTargetId,someHeartbeatTarget);
    heartbeatManager.monitorTarget(specialTargetId,specialHeartbeatTarget);
    someTargetReceivedLatch.await(5,TimeUnit.SECONDS);
    specialTargetReceivedLatch.await(5,TimeUnit.SECONDS);
    assertEquals(defaultResponse,someHeartbeatTarget.getLastRequestedHeartbeatPayload());
    assertEquals(specialResponse,specialHeartbeatTarget.getLastRequestedHeartbeatPayload());
  }
  finally {
    heartbeatManager.stop();
    scheduledThreadPoolExecutor.shutdown();
  }
}
