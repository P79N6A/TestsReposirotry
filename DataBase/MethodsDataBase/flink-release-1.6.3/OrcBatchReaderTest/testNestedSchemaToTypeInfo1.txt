@Test public void testNestedSchemaToTypeInfo1(){
  String schema="struct<" + "middle:struct<" + "list:array<"+ "struct<"+ "int1:int,"+ "string1:string"+ ">"+ ">"+ ">,"+ "list:array<"+ "struct<"+ "int1:int,"+ "string1:string"+ ">"+ ">,"+ "map:map<"+ "string,"+ "struct<"+ "int1:int,"+ "string1:string"+ ">"+ ">"+ ">";
  TypeInformation typeInfo=OrcBatchReader.schemaToTypeInfo(TypeDescription.fromString(schema));
  Assert.assertNotNull(typeInfo);
  Assert.assertTrue(typeInfo instanceof RowTypeInfo);
  RowTypeInfo rowTypeInfo=(RowTypeInfo)typeInfo;
  Assert.assertArrayEquals(new TypeInformation[]{Types.ROW_NAMED(new String[]{"list"},ObjectArrayTypeInfo.getInfoFor(Types.ROW_NAMED(new String[]{"int1","string1"},Types.INT,Types.STRING))),ObjectArrayTypeInfo.getInfoFor(Types.ROW_NAMED(new String[]{"int1","string1"},Types.INT,Types.STRING)),new MapTypeInfo<>(Types.STRING,Types.ROW_NAMED(new String[]{"int1","string1"},Types.INT,Types.STRING))},rowTypeInfo.getFieldTypes());
  Assert.assertArrayEquals(new String[]{"middle","list","map"},rowTypeInfo.getFieldNames());
}
