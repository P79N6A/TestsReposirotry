@Test public void testSkipCorruptedRecord() throws Exception {
  final String stream="fakeStream";
  final int numShards=3;
  final LinkedList<KinesisStreamShardState> testShardStates=new LinkedList<>();
  final TestSourceContext<String> sourceContext=new TestSourceContext<>();
  final TestableKinesisDataFetcher<String> fetcher=new TestableKinesisDataFetcher<>(Collections.singletonList(stream),sourceContext,TestUtils.getStandardProperties(),new KinesisDeserializationSchemaWrapper<>(new SimpleStringSchema()),1,0,new AtomicReference<>(),testShardStates,new HashMap<>(),FakeKinesisBehavioursFactory.nonReshardedStreamsBehaviour(Collections.singletonMap(stream,numShards)));
  final DummyFlinkKinesisConsumer<String> consumer=new DummyFlinkKinesisConsumer<>(TestUtils.getStandardProperties(),fetcher,1,0);
  CheckedThread consumerThread=new CheckedThread(){
    @Override public void go() throws Exception {
      consumer.run(new TestSourceContext<>());
    }
  }
;
  consumerThread.start();
  fetcher.waitUntilRun();
  consumer.cancel();
  consumerThread.sync();
  assertEquals(numShards,testShardStates.size());
  for (int i=0; i < numShards; i++) {
    fetcher.emitRecordAndUpdateState("record-" + i,10L,i,new SequenceNumber("seq-num-1"));
    assertEquals(new SequenceNumber("seq-num-1"),testShardStates.get(i).getLastProcessedSequenceNum());
    assertEquals(new StreamRecord<>("record-" + i,10L),sourceContext.removeLatestOutput());
  }
  fetcher.emitRecordAndUpdateState(null,10L,1,new SequenceNumber("seq-num-2"));
  assertEquals(new SequenceNumber("seq-num-2"),testShardStates.get(1).getLastProcessedSequenceNum());
  assertEquals(null,sourceContext.removeLatestOutput());
}
