/** 
 * Tests that  {@link KvStateRegistryListener} registered under {@link HighAvailabilityServices#DEFAULT_JOB_ID}will be used for all notifications.
 */
@Test public void testLegacyCodePathPreference(){
  final KvStateRegistry kvStateRegistry=new KvStateRegistry();
  final ArrayDeque<JobID> stateRegistrationNotifications=new ArrayDeque<>(2);
  final ArrayDeque<JobID> stateDeregistrationNotifications=new ArrayDeque<>(2);
  final TestingKvStateRegistryListener testingListener=new TestingKvStateRegistryListener(stateRegistrationNotifications,stateDeregistrationNotifications);
  final ArrayDeque<JobID> anotherQueue=new ArrayDeque<>(2);
  final TestingKvStateRegistryListener anotherListener=new TestingKvStateRegistryListener(anotherQueue,anotherQueue);
  final JobID jobId=new JobID();
  kvStateRegistry.registerListener(HighAvailabilityServices.DEFAULT_JOB_ID,testingListener);
  kvStateRegistry.registerListener(jobId,anotherListener);
  final JobVertexID jobVertexId=new JobVertexID();
  final KeyGroupRange keyGroupRange=new KeyGroupRange(0,1);
  final String registrationName="registrationName";
  final KvStateID kvStateID=kvStateRegistry.registerKvState(jobId,jobVertexId,keyGroupRange,registrationName,new DummyKvState());
  assertThat(stateRegistrationNotifications.poll(),equalTo(jobId));
  assertThat(anotherQueue.isEmpty(),is(true));
  kvStateRegistry.unregisterKvState(jobId,jobVertexId,keyGroupRange,registrationName,kvStateID);
  assertThat(stateDeregistrationNotifications.poll(),equalTo(jobId));
  assertThat(anotherQueue.isEmpty(),is(true));
}
