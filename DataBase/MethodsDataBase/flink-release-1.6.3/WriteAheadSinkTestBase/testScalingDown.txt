@Test public void testScalingDown() throws Exception {
  S sink1=createSink();
  OneInputStreamOperatorTestHarness<IN,IN> testHarness1=new OneInputStreamOperatorTestHarness<>(sink1,10,2,0);
  testHarness1.open();
  S sink2=createSink();
  OneInputStreamOperatorTestHarness<IN,IN> testHarness2=new OneInputStreamOperatorTestHarness<>(sink2,10,2,1);
  testHarness2.open();
  int elementCounter=1;
  int snapshotCount=0;
  for (int x=0; x < 10; x++) {
    testHarness1.processElement(new StreamRecord<>(generateValue(elementCounter,0)));
    elementCounter++;
  }
  for (int x=0; x < 11; x++) {
    testHarness2.processElement(new StreamRecord<>(generateValue(elementCounter,0)));
    elementCounter++;
  }
  OperatorSubtaskState snapshot1=testHarness1.snapshot(snapshotCount,0);
  OperatorSubtaskState snapshot2=testHarness2.snapshot(snapshotCount,0);
  OperatorSubtaskState mergedSnapshot=AbstractStreamOperatorTestHarness.repackageState(snapshot1,snapshot2);
  testHarness1.close();
  testHarness2.close();
  S sink3=createSink();
  OneInputStreamOperatorTestHarness<IN,IN> mergedTestHarness=new OneInputStreamOperatorTestHarness<>(sink3,10,1,0);
  mergedTestHarness.setup();
  mergedTestHarness.initializeState(mergedSnapshot);
  mergedTestHarness.open();
  for (int x=0; x < 12; x++) {
    mergedTestHarness.processElement(new StreamRecord<>(generateValue(elementCounter,0)));
    elementCounter++;
  }
  snapshotCount++;
  mergedTestHarness.snapshot(snapshotCount,1);
  mergedTestHarness.notifyOfCompletedCheckpoint(snapshotCount);
  verifyResultsWhenReScaling(sink3,1,33);
  mergedTestHarness.close();
}
