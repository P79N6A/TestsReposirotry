@Test public void testScalingUp() throws Exception {
  S sink1=createSink();
  OneInputStreamOperatorTestHarness<IN,IN> testHarness1=new OneInputStreamOperatorTestHarness<>(sink1,10,1,0);
  int elementCounter=1;
  int snapshotCount=0;
  testHarness1.open();
  for (int x=0; x < 10; x++) {
    testHarness1.processElement(new StreamRecord<>(generateValue(elementCounter,0)));
    elementCounter++;
  }
  testHarness1.snapshot(++snapshotCount,0);
  for (int x=0; x < 11; x++) {
    testHarness1.processElement(new StreamRecord<>(generateValue(elementCounter,0)));
    elementCounter++;
  }
  OperatorSubtaskState snapshot=testHarness1.snapshot(++snapshotCount,0);
  testHarness1.close();
  verifyResultsWhenReScaling(sink1,0,-1);
  ++snapshotCount;
  S sink2=createSink();
  OneInputStreamOperatorTestHarness<IN,IN> testHarness2=new OneInputStreamOperatorTestHarness<>(sink2,10,2,0);
  testHarness2.setup();
  testHarness2.initializeState(snapshot);
  testHarness2.open();
  testHarness2.notifyOfCompletedCheckpoint(snapshotCount);
  verifyResultsWhenReScaling(sink2,1,10);
  S sink3=createSink();
  OneInputStreamOperatorTestHarness<IN,IN> testHarness3=new OneInputStreamOperatorTestHarness<>(sink3,10,2,1);
  testHarness3.setup();
  testHarness3.initializeState(snapshot);
  testHarness3.open();
  for (int x=0; x < 10; x++) {
    testHarness3.processElement(new StreamRecord<>(generateValue(elementCounter,0)));
    elementCounter++;
  }
  testHarness3.snapshot(snapshotCount,1);
  testHarness3.notifyOfCompletedCheckpoint(snapshotCount);
  verifyResultsWhenReScaling(sink3,11,31);
  testHarness2.close();
  testHarness3.close();
}
