@Test public void translateUnion2Group(){
  try {
    final int parallelism=4;
    ExecutionEnvironment env=ExecutionEnvironment.createLocalEnvironment(parallelism);
    DataSet<Tuple3<Double,StringValue,LongValue>> dataset1=getSourceDataSet(env,3);
    DataSet<Tuple3<Double,StringValue,LongValue>> dataset2=getSourceDataSet(env,2);
    dataset1.union(dataset2).groupBy((KeySelector<Tuple3<Double,StringValue,LongValue>,String>)value -> "").reduceGroup((GroupReduceFunction<Tuple3<Double,StringValue,LongValue>,String>)(values,out) -> {
    }
).returns(String.class).output(new DiscardingOutputFormat<>());
    Plan p=env.createProgramPlan();
    GenericDataSinkBase<?> sink=p.getDataSinks().iterator().next();
    Union unionOperator=(Union)((SingleInputOperator)sink.getInput()).getInput();
    assertTrue(unionOperator.getFirstInput() instanceof MapOperatorBase<?,?,?>);
    assertTrue(unionOperator.getSecondInput() instanceof MapOperatorBase<?,?,?>);
    assertEquals(unionOperator.getFirstInput().getParallelism(),3);
    assertEquals(unionOperator.getSecondInput().getParallelism(),2);
    assertEquals(unionOperator.getParallelism(),ExecutionConfig.PARALLELISM_DEFAULT);
  }
 catch (  Exception e) {
    System.err.println(e.getMessage());
    e.printStackTrace();
    fail("Test caused an error: " + e.getMessage());
  }
}
