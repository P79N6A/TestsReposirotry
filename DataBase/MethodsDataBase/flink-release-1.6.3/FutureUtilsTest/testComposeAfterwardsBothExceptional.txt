@Test public void testComposeAfterwardsBothExceptional() throws InterruptedException {
  final CompletableFuture<Void> inputFuture=new CompletableFuture<>();
  final FlinkException testException1=new FlinkException("Test exception1");
  final FlinkException testException2=new FlinkException("Test exception2");
  final OneShotLatch composeLatch=new OneShotLatch();
  final CompletableFuture<Void> composeFuture=FutureUtils.composeAfterwards(inputFuture,() -> {
    composeLatch.trigger();
    return FutureUtils.completedExceptionally(testException2);
  }
);
  assertThat(composeLatch.isTriggered(),is(false));
  assertThat(composeFuture.isDone(),is(false));
  inputFuture.completeExceptionally(testException1);
  assertThat(composeLatch.isTriggered(),is(true));
  assertThat(composeFuture.isDone(),is(true));
  try {
    composeFuture.get();
    fail("Expected an exceptional completion");
  }
 catch (  ExecutionException ee) {
    final Throwable actual=ExceptionUtils.stripExecutionException(ee);
    assertThat(actual,is(testException1));
    assertThat(actual.getSuppressed(),arrayWithSize(1));
    assertThat(actual.getSuppressed()[0],is(testException2));
  }
}
