@Test public void testCompleteAllPartialExceptional() throws Exception {
  final CompletableFuture<String> inputFuture1=new CompletableFuture<>();
  final CompletableFuture<Integer> inputFuture2=new CompletableFuture<>();
  final List<CompletableFuture<?>> futuresToComplete=Arrays.asList(inputFuture1,inputFuture2);
  final FutureUtils.ConjunctFuture<Void> completeFuture=FutureUtils.completeAll(futuresToComplete);
  assertThat(completeFuture.isDone(),is(false));
  assertThat(completeFuture.getNumFuturesCompleted(),is(0));
  assertThat(completeFuture.getNumFuturesTotal(),is(futuresToComplete.size()));
  final FlinkException testException1=new FlinkException("Test exception 1");
  inputFuture2.completeExceptionally(testException1);
  assertThat(completeFuture.isDone(),is(false));
  assertThat(completeFuture.getNumFuturesCompleted(),is(1));
  inputFuture1.complete("foobar");
  assertThat(completeFuture.isDone(),is(true));
  assertThat(completeFuture.getNumFuturesCompleted(),is(2));
  try {
    completeFuture.get();
    fail("Expected an exceptional completion");
  }
 catch (  ExecutionException ee) {
    assertThat(ExceptionUtils.stripExecutionException(ee),is(testException1));
  }
}
