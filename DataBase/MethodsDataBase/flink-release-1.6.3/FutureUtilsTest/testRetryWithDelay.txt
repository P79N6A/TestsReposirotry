/** 
 * Tests that the delay is respected between subsequent retries of a retry future with retry delay.
 */
@Test public void testRetryWithDelay() throws Exception {
  final int retries=4;
  final Time delay=Time.milliseconds(5L);
  final AtomicInteger countDown=new AtomicInteger(retries);
  long start=System.currentTimeMillis();
  CompletableFuture<Boolean> retryFuture=FutureUtils.retryWithDelay(() -> {
    if (countDown.getAndDecrement() == 0) {
      return CompletableFuture.completedFuture(true);
    }
 else {
      return FutureUtils.completedExceptionally(new FlinkException("Test exception."));
    }
  }
,retries,delay,TestingUtils.defaultScheduledExecutor());
  Boolean result=retryFuture.get();
  long completionTime=System.currentTimeMillis() - start;
  assertTrue(result);
  assertTrue("The completion time should be at least rertries times delay between retries.",completionTime >= retries * delay.toMilliseconds());
}
