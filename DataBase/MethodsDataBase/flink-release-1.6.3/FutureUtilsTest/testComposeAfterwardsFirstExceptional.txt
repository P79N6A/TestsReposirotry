@Test public void testComposeAfterwardsFirstExceptional() throws InterruptedException {
  final CompletableFuture<Void> inputFuture=new CompletableFuture<>();
  final OneShotLatch composeLatch=new OneShotLatch();
  final FlinkException testException=new FlinkException("Test exception");
  final CompletableFuture<Void> composeFuture=FutureUtils.composeAfterwards(inputFuture,() -> {
    composeLatch.trigger();
    return CompletableFuture.completedFuture(null);
  }
);
  assertThat(composeLatch.isTriggered(),is(false));
  assertThat(composeFuture.isDone(),is(false));
  inputFuture.completeExceptionally(testException);
  assertThat(composeLatch.isTriggered(),is(true));
  assertThat(composeFuture.isDone(),is(true));
  try {
    composeFuture.get();
    fail("Expected an exceptional completion");
  }
 catch (  ExecutionException ee) {
    assertThat(ExceptionUtils.stripExecutionException(ee),is(testException));
  }
}
