@Test public void testCompleteAllExceptional() throws Exception {
  final CompletableFuture<String> inputFuture1=new CompletableFuture<>();
  final CompletableFuture<Integer> inputFuture2=new CompletableFuture<>();
  final List<CompletableFuture<?>> futuresToComplete=Arrays.asList(inputFuture1,inputFuture2);
  final FutureUtils.ConjunctFuture<Void> completeFuture=FutureUtils.completeAll(futuresToComplete);
  assertThat(completeFuture.isDone(),is(false));
  assertThat(completeFuture.getNumFuturesCompleted(),is(0));
  assertThat(completeFuture.getNumFuturesTotal(),is(futuresToComplete.size()));
  final FlinkException testException1=new FlinkException("Test exception 1");
  inputFuture1.completeExceptionally(testException1);
  assertThat(completeFuture.isDone(),is(false));
  assertThat(completeFuture.getNumFuturesCompleted(),is(1));
  final FlinkException testException2=new FlinkException("Test exception 2");
  inputFuture2.completeExceptionally(testException2);
  assertThat(completeFuture.isDone(),is(true));
  assertThat(completeFuture.getNumFuturesCompleted(),is(2));
  try {
    completeFuture.get();
    fail("Expected an exceptional completion");
  }
 catch (  ExecutionException ee) {
    final Throwable actual=ExceptionUtils.stripExecutionException(ee);
    final Throwable[] suppressed=actual.getSuppressed();
    final FlinkException suppressedException;
    if (actual.equals(testException1)) {
      suppressedException=testException2;
    }
 else {
      suppressedException=testException1;
    }
    assertThat(suppressed,is(not(emptyArray())));
    assertThat(suppressed,arrayContaining(suppressedException));
  }
}
