/** 
 * This test validates that a close operation can happen even while a 'closeAndGetHandle()' call is in progress. <p> <p>That behavior is essential for fast cancellation (concurrent cleanup).
 */
@Test public void testCloseDoesNotLock() throws Exception {
  final Path folder=new Path(tmp.newFolder().toURI());
  final String fileName="this-is-ignored-anyways.file";
  final FileSystem fileSystem=spy(new TestFs((path) -> new BlockerStream()));
  final FSDataOutputStream checkpointStream=createTestStream(fileSystem,folder,fileName);
  final OneShotLatch sync=new OneShotLatch();
  final CheckedThread thread=new CheckedThread(){
    @Override public void go() throws Exception {
      sync.trigger();
      closeAndGetResult(checkpointStream);
    }
  }
;
  thread.start();
  sync.await();
  checkpointStream.close();
  try {
    thread.sync();
  }
 catch (  IOException ignored) {
  }
}
