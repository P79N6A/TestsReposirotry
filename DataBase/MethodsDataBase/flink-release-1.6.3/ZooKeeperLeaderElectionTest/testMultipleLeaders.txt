/** 
 * Tests that the current leader is notified when his leader connection information in ZooKeeper are overwritten. The leader must re-establish the correct leader connection information in ZooKeeper.
 */
@Test public void testMultipleLeaders() throws Exception {
  final String FAULTY_CONTENDER_URL="faultyContender";
  final String leaderPath="/leader";
  configuration.setString(HighAvailabilityOptions.HA_ZOOKEEPER_LEADER_PATH,leaderPath);
  ZooKeeperLeaderElectionService leaderElectionService=null;
  ZooKeeperLeaderRetrievalService leaderRetrievalService=null;
  ZooKeeperLeaderRetrievalService leaderRetrievalService2=null;
  TestingListener listener=new TestingListener();
  TestingListener listener2=new TestingListener();
  TestingContender contender;
  try {
    leaderElectionService=ZooKeeperUtils.createLeaderElectionService(client,configuration);
    leaderRetrievalService=ZooKeeperUtils.createLeaderRetrievalService(client,configuration);
    leaderRetrievalService2=ZooKeeperUtils.createLeaderRetrievalService(client,configuration);
    contender=new TestingContender(TEST_URL,leaderElectionService);
    leaderElectionService.start(contender);
    leaderRetrievalService.start(listener);
    listener.waitForNewLeader(timeout);
    assertEquals(listener.getLeaderSessionID(),contender.getLeaderSessionID());
    assertEquals(TEST_URL,listener.getAddress());
    CuratorFramework client=ZooKeeperUtils.startCuratorFramework(configuration);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(baos);
    oos.writeUTF(FAULTY_CONTENDER_URL);
    oos.writeObject(null);
    oos.close();
    boolean dataWritten=false;
    while (!dataWritten) {
      client.delete().forPath(leaderPath);
      try {
        client.create().forPath(leaderPath,baos.toByteArray());
        dataWritten=true;
      }
 catch (      KeeperException.NodeExistsException e) {
      }
    }
    leaderRetrievalService2.start(listener2);
    listener2.waitForNewLeader(timeout);
    if (FAULTY_CONTENDER_URL.equals(listener2.getAddress())) {
      listener2.waitForNewLeader(timeout);
    }
    assertEquals(listener2.getLeaderSessionID(),contender.getLeaderSessionID());
    assertEquals(listener2.getAddress(),contender.getAddress());
  }
  finally {
    if (leaderElectionService != null) {
      leaderElectionService.stop();
    }
    if (leaderRetrievalService != null) {
      leaderRetrievalService.stop();
    }
    if (leaderRetrievalService2 != null) {
      leaderRetrievalService2.stop();
    }
  }
}
