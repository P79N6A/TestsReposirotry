@Test public void testTupleNestedArrayKeyRejection(){
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStream<Tuple2<Integer[],String>> input=env.fromElements(new Tuple2<>(new Integer[]{1,2},"test-test"));
  TypeInformation<?> expectedTypeInfo=new TupleTypeInfo<Tuple2<Integer[],String>>(BasicArrayTypeInfo.INT_ARRAY_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  expectedException.expect(InvalidProgramException.class);
  expectedException.expectMessage(new StringStartsWith("Type " + expectedTypeInfo + " cannot be used as key."));
  input.keyBy(new KeySelector<Tuple2<Integer[],String>,Tuple2<Integer[],String>>(){
    @Override public Tuple2<Integer[],String> getKey(    Tuple2<Integer[],String> value) throws Exception {
      return value;
    }
  }
);
}
