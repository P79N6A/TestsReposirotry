/** 
 * Tests that older checkpoints are not cleaned up right away when recovering. Only after another checkpointed has been completed the old checkpoints exceeding the number of checkpoints to retain will be removed.
 */
@Test public void testRecover() throws Exception {
  SharedStateRegistry sharedStateRegistry=new SharedStateRegistry();
  CompletedCheckpointStore checkpoints=createCompletedCheckpoints(3);
  TestCompletedCheckpoint[] expected=new TestCompletedCheckpoint[]{createCheckpoint(0,sharedStateRegistry),createCheckpoint(1,sharedStateRegistry),createCheckpoint(2,sharedStateRegistry)};
  checkpoints.addCheckpoint(expected[0]);
  checkpoints.addCheckpoint(expected[1]);
  checkpoints.addCheckpoint(expected[2]);
  verifyCheckpointRegistered(expected[0].getOperatorStates().values(),sharedStateRegistry);
  verifyCheckpointRegistered(expected[1].getOperatorStates().values(),sharedStateRegistry);
  verifyCheckpointRegistered(expected[2].getOperatorStates().values(),sharedStateRegistry);
  assertEquals(3,ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size());
  assertEquals(3,checkpoints.getNumberOfRetainedCheckpoints());
  sharedStateRegistry.close();
  sharedStateRegistry=new SharedStateRegistry();
  checkpoints.recover();
  assertEquals(3,ZOOKEEPER.getClient().getChildren().forPath(CHECKPOINT_PATH).size());
  assertEquals(3,checkpoints.getNumberOfRetainedCheckpoints());
  assertEquals(expected[2],checkpoints.getLatestCheckpoint());
  List<CompletedCheckpoint> expectedCheckpoints=new ArrayList<>(3);
  expectedCheckpoints.add(expected[1]);
  expectedCheckpoints.add(expected[2]);
  expectedCheckpoints.add(createCheckpoint(3,sharedStateRegistry));
  checkpoints.addCheckpoint(expectedCheckpoints.get(2));
  List<CompletedCheckpoint> actualCheckpoints=checkpoints.getAllCheckpoints();
  assertEquals(expectedCheckpoints,actualCheckpoints);
  for (  CompletedCheckpoint actualCheckpoint : actualCheckpoints) {
    verifyCheckpointRegistered(actualCheckpoint.getOperatorStates().values(),sharedStateRegistry);
  }
}
