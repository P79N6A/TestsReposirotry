@Test public void testCancelSlotAllocationWithoutResourceManager() throws Exception {
  final JobID jid=new JobID();
  final TestingSlotPool pool=new TestingSlotPool(rpcService,jid,SystemClock.getInstance(),TestingUtils.infiniteTime(),TestingUtils.infiniteTime());
  try {
    final CompletableFuture<SlotRequestId> timeoutFuture=new CompletableFuture<>();
    pool.setTimeoutPendingSlotRequestConsumer(slotRequestId -> timeoutFuture.complete(slotRequestId));
    pool.start(JobMasterId.generate(),"foobar");
    SlotPoolGateway slotPoolGateway=pool.getSelfGateway(SlotPoolGateway.class);
    SlotRequestId requestId=new SlotRequestId();
    CompletableFuture<LogicalSlot> future=slotPoolGateway.allocateSlot(requestId,new ScheduledUnit(SchedulerTestUtils.getDummyTask()),SlotProfile.noLocality(DEFAULT_TESTING_PROFILE),true,fastTimeout);
    try {
      future.get();
      fail("We expected a TimeoutException.");
    }
 catch (    ExecutionException e) {
      assertTrue(ExceptionUtils.stripExecutionException(e) instanceof TimeoutException);
    }
    timeoutFuture.get();
    assertEquals(0L,(long)pool.getNumberOfWaitingForResourceRequests().get());
  }
  finally {
    RpcUtils.terminateRpcEndpoint(pool,timeout);
  }
}
