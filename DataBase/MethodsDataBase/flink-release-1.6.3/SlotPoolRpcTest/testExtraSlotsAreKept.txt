/** 
 * Tests that extra slots are kept by the  {@link SlotPool}.
 */
@Test public void testExtraSlotsAreKept() throws Exception {
  final JobID jid=new JobID();
  final TestingSlotPool pool=new TestingSlotPool(rpcService,jid,SystemClock.getInstance(),TestingUtils.infiniteTime(),TestingUtils.infiniteTime());
  try {
    pool.start(JobMasterId.generate(),"foobar");
    SlotPoolGateway slotPoolGateway=pool.getSelfGateway(SlotPoolGateway.class);
    final CompletableFuture<AllocationID> allocationIdFuture=new CompletableFuture<>();
    TestingResourceManagerGateway resourceManagerGateway=new TestingResourceManagerGateway();
    resourceManagerGateway.setRequestSlotConsumer((    SlotRequest slotRequest) -> allocationIdFuture.complete(slotRequest.getAllocationId()));
    final CompletableFuture<SlotRequestId> slotRequestTimeoutFuture=new CompletableFuture<>();
    pool.setTimeoutPendingSlotRequestConsumer(slotRequestTimeoutFuture::complete);
    pool.connectToResourceManager(resourceManagerGateway);
    SlotRequestId requestId=new SlotRequestId();
    CompletableFuture<LogicalSlot> future=slotPoolGateway.allocateSlot(requestId,new ScheduledUnit(SchedulerTestUtils.getDummyTask()),SlotProfile.noLocality(DEFAULT_TESTING_PROFILE),true,fastTimeout);
    try {
      future.get();
      fail("We expected a TimeoutException.");
    }
 catch (    ExecutionException e) {
      assertTrue(ExceptionUtils.stripExecutionException(e) instanceof TimeoutException);
    }
    slotRequestTimeoutFuture.get();
    assertEquals(0L,(long)pool.getNumberOfPendingRequests().get());
    AllocationID allocationId=allocationIdFuture.get();
    final SlotOffer slotOffer=new SlotOffer(allocationId,0,DEFAULT_TESTING_PROFILE);
    final TaskManagerLocation taskManagerLocation=new LocalTaskManagerLocation();
    final TaskManagerGateway taskManagerGateway=new SimpleAckingTaskManagerGateway();
    slotPoolGateway.registerTaskManager(taskManagerLocation.getResourceID()).get();
    assertTrue(slotPoolGateway.offerSlot(taskManagerLocation,taskManagerGateway,slotOffer).get());
    assertTrue(pool.containsAvailableSlot(allocationId).get());
  }
  finally {
    RpcUtils.terminateRpcEndpoint(pool,timeout);
  }
}
