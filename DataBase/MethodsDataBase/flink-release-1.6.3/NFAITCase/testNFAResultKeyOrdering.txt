@Test public void testNFAResultKeyOrdering() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event a1=new Event(41,"a",2.0);
  Event b1=new Event(41,"b",3.0);
  Event aa1=new Event(41,"aa",4.0);
  Event bb1=new Event(41,"bb",5.0);
  Event ab1=new Event(41,"ab",6.0);
  inputEvents.add(new StreamRecord<>(a1,1));
  inputEvents.add(new StreamRecord<>(b1,3));
  inputEvents.add(new StreamRecord<>(aa1,4));
  inputEvents.add(new StreamRecord<>(bb1,5));
  inputEvents.add(new StreamRecord<>(ab1,6));
  Pattern<Event,?> pattern=Pattern.<Event>begin("a").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=6452194090480345053L;
    @Override public boolean filter(    Event s) throws Exception {
      return s.getName().equals("a");
    }
  }
).next("b").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event s) throws Exception {
      return s.getName().equals("b");
    }
  }
).next("aa").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event s) throws Exception {
      return s.getName().equals("aa");
    }
  }
).next("bb").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event s) throws Exception {
      return s.getName().equals("bb");
    }
  }
).next("ab").where(new SimpleCondition<Event>(){
    @Override public boolean filter(    Event s) throws Exception {
      return s.getName().equals("ab");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  List<Map<String,List<Event>>> resultingPatterns=new ArrayList<>();
  NFAState nfaState=nfa.createInitialNFAState();
  for (  StreamRecord<Event> inputEvent : inputEvents) {
    Collection<Map<String,List<Event>>> patterns=nfa.process(sharedBuffer,nfaState,inputEvent.getValue(),inputEvent.getTimestamp());
    resultingPatterns.addAll(patterns);
  }
  Assert.assertEquals(1L,resultingPatterns.size());
  Map<String,List<Event>> match=resultingPatterns.get(0);
  List<String> expectedOrder=Lists.newArrayList("a","b","aa","bb","ab");
  List<String> resultOrder=new ArrayList<>();
  for (  String key : match.keySet()) {
    resultOrder.add(key);
  }
  Assert.assertEquals(expectedOrder,resultOrder);
}
