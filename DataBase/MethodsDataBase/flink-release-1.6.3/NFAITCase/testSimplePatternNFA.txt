@Test public void testSimplePatternNFA() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event startEvent=new Event(41,"start",1.0);
  SubEvent middleEvent=new SubEvent(42,"foo",1.0,10.0);
  Event endEvent=new Event(43,"end",1.0);
  inputEvents.add(new StreamRecord<>(startEvent,1));
  inputEvents.add(new StreamRecord<>(new Event(43,"foobar",1.0),2));
  inputEvents.add(new StreamRecord<Event>(new SubEvent(41,"barfoo",1.0,5.0),3));
  inputEvents.add(new StreamRecord<Event>(middleEvent,3));
  inputEvents.add(new StreamRecord<>(new Event(43,"start",1.0),4));
  inputEvents.add(new StreamRecord<>(endEvent,5));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("start");
    }
  }
).followedBy("middle").subtype(SubEvent.class).where(new SimpleCondition<SubEvent>(){
    private static final long serialVersionUID=6215754202506583964L;
    @Override public boolean filter(    SubEvent value) throws Exception {
      return value.getVolume() > 5.0;
    }
  }
).followedBy("end").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=7056763917392056548L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("end");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  List<List<Event>> resultingPatterns=feedNFA(inputEvents,nfa);
  compareMaps(resultingPatterns,Lists.<List<Event>>newArrayList(Lists.newArrayList(startEvent,middleEvent,endEvent)));
}
