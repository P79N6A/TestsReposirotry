@Test public void testBeginWithAtLeastOne() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event startEvent1=new Event(41,"a",2.0);
  Event startEvent2=new Event(42,"a",3.0);
  Event startEvent3=new Event(42,"a",4.0);
  Event end1=new Event(44,"b",5.0);
  inputEvents.add(new StreamRecord<>(startEvent1,3));
  inputEvents.add(new StreamRecord<>(startEvent2,4));
  inputEvents.add(new StreamRecord<>(startEvent3,5));
  inputEvents.add(new StreamRecord<>(end1,6));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).oneOrMore().allowCombinations().followedBy("end").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("b");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  final List<List<Event>> resultingPatterns=feedNFA(inputEvents,nfa);
  compareMaps(resultingPatterns,Lists.<List<Event>>newArrayList(Lists.newArrayList(startEvent1,startEvent2,startEvent3,end1),Lists.newArrayList(startEvent1,startEvent2,end1),Lists.newArrayList(startEvent1,startEvent3,end1),Lists.newArrayList(startEvent2,startEvent3,end1),Lists.newArrayList(startEvent1,end1),Lists.newArrayList(startEvent2,end1),Lists.newArrayList(startEvent3,end1)));
}
