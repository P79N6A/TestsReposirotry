@Test public void testZeroOrMoreClearingBuffer() throws Exception {
  Event startEvent=new Event(40,"c",1.0);
  Event middleEvent1=new Event(41,"a",2.0);
  Event middleEvent2=new Event(42,"a",3.0);
  Event end1=new Event(44,"b",5.0);
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("c");
    }
  }
).followedBy("middle").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).oneOrMore().allowCombinations().optional().followedBy("end1").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("b");
    }
  }
).within(Time.milliseconds(8));
  NFA<Event> nfa=compile(pattern,false);
  NFAState nfaState=nfa.createInitialNFAState();
  nfa.process(sharedBuffer,nfaState,startEvent,1);
  nfa.process(sharedBuffer,nfaState,middleEvent1,3);
  nfa.process(sharedBuffer,nfaState,middleEvent2,4);
  nfa.process(sharedBuffer,nfaState,end1,6);
  nfa.advanceTime(sharedBuffer,nfaState,10);
  assertEquals(1,nfaState.getPartialMatches().size());
  assertEquals("start",nfaState.getPartialMatches().peek().getCurrentStateName());
}
