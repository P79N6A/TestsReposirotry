@Test public void testStrictContinuityNoResultsAfterZeroOrMore() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event start=new Event(40,"d",2.0);
  Event middleEvent1=new Event(41,"a",2.0);
  Event middleEvent2=new Event(42,"a",2.0);
  Event middleEvent3=new Event(43,"c",3.0);
  Event end=new Event(44,"b",4.0);
  inputEvents.add(new StreamRecord<>(start,1));
  inputEvents.add(new StreamRecord<>(middleEvent1,2));
  inputEvents.add(new StreamRecord<>(middleEvent2,3));
  inputEvents.add(new StreamRecord<>(middleEvent3,4));
  inputEvents.add(new StreamRecord<>(end,5));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("d");
    }
  }
).followedBy("middle").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).oneOrMore().optional().next("end").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("b");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  final List<List<Event>> resultingPatterns=feedNFA(inputEvents,nfa);
  compareMaps(resultingPatterns,Lists.<List<Event>>newArrayList());
}
