@Test public void testNextZeroOrMore() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event startEvent=new Event(40,"start",1.0);
  Event middleEvent1=new Event(40,"middle",2.0);
  Event middleEvent2=new Event(40,"middle",3.0);
  Event middleEvent3=new Event(40,"middle",4.0);
  Event endEvent=new Event(46,"end",1.0);
  inputEvents.add(new StreamRecord<>(startEvent,1L));
  inputEvents.add(new StreamRecord<>(new Event(1,"event",1.0),2L));
  inputEvents.add(new StreamRecord<>(middleEvent1,3L));
  inputEvents.add(new StreamRecord<>(middleEvent2,4L));
  inputEvents.add(new StreamRecord<>(middleEvent3,5L));
  inputEvents.add(new StreamRecord<>(endEvent,6L));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=6215754202506583964L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("start");
    }
  }
).next("middle").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=6215754202506583964L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("middle");
    }
  }
).oneOrMore().optional().consecutive().followedBy("end").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=7056763917392056548L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("end");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  final List<List<Event>> resultingPatterns=feedNFA(inputEvents,nfa);
  compareMaps(resultingPatterns,Lists.<List<Event>>newArrayList(Lists.newArrayList(startEvent,endEvent)));
}
