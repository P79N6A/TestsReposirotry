@Test public void testZeroOrMoreAfterBranching() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event startEvent=new Event(40,"c",1.0);
  Event middleEvent1=new Event(41,"a",2.0);
  Event middleEvent2=new Event(42,"a",3.0);
  Event merging=new Event(42,"f",3.0);
  Event kleene1=new Event(43,"d",4.0);
  Event kleene2=new Event(44,"d",4.0);
  Event end=new Event(45,"e",4.0);
  inputEvents.add(new StreamRecord<>(startEvent,1));
  inputEvents.add(new StreamRecord<>(middleEvent1,3));
  inputEvents.add(new StreamRecord<>(middleEvent2,4));
  inputEvents.add(new StreamRecord<>(merging,5));
  inputEvents.add(new StreamRecord<>(kleene1,6));
  inputEvents.add(new StreamRecord<>(kleene2,7));
  inputEvents.add(new StreamRecord<>(end,8));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("c");
    }
  }
).followedByAny("branching").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).followedByAny("merging").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("f");
    }
  }
).followedByAny("kleene").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("d");
    }
  }
).oneOrMore().allowCombinations().optional().followedBy("end").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("e");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  final List<List<Event>> resultingPatterns=feedNFA(inputEvents,nfa);
  compareMaps(resultingPatterns,Lists.<List<Event>>newArrayList(Lists.newArrayList(startEvent,middleEvent1,merging,end),Lists.newArrayList(startEvent,middleEvent1,merging,kleene1,end),Lists.newArrayList(startEvent,middleEvent1,merging,kleene2,end),Lists.newArrayList(startEvent,middleEvent1,merging,kleene1,kleene2,end),Lists.newArrayList(startEvent,middleEvent2,merging,end),Lists.newArrayList(startEvent,middleEvent2,merging,kleene1,end),Lists.newArrayList(startEvent,middleEvent2,merging,kleene2,end),Lists.newArrayList(startEvent,middleEvent2,merging,kleene1,kleene2,end)));
}
