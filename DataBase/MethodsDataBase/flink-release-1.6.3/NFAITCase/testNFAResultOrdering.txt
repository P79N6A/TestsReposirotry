@Test public void testNFAResultOrdering() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event startEvent1=new Event(41,"a-1",2.0);
  Event startEvent2=new Event(41,"a-2",3.0);
  Event startEvent3=new Event(41,"a-3",4.0);
  Event startEvent4=new Event(41,"a-4",5.0);
  Event endEvent1=new Event(41,"b-1",6.0);
  Event endEvent2=new Event(41,"b-2",7.0);
  Event endEvent3=new Event(41,"b-3",8.0);
  inputEvents.add(new StreamRecord<>(startEvent1,1));
  inputEvents.add(new StreamRecord<>(startEvent2,3));
  inputEvents.add(new StreamRecord<>(startEvent3,4));
  inputEvents.add(new StreamRecord<>(startEvent4,5));
  inputEvents.add(new StreamRecord<>(endEvent1,6));
  inputEvents.add(new StreamRecord<>(endEvent2,7));
  inputEvents.add(new StreamRecord<>(endEvent3,10));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=6452194090480345053L;
    @Override public boolean filter(    Event s) throws Exception {
      return s.getName().startsWith("a-");
    }
  }
).times(4).allowCombinations().followedByAny("middle").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=-6838398439317275390L;
    public boolean filter(    Event s) throws Exception {
      return s.getName().startsWith("b-");
    }
  }
).times(3).consecutive();
  NFA<Event> nfa=compile(pattern,false);
  List<Map<String,List<Event>>> resultingPatterns=new ArrayList<>();
  NFAState nfaState=nfa.createInitialNFAState();
  for (  StreamRecord<Event> inputEvent : inputEvents) {
    Collection<Map<String,List<Event>>> patterns=nfa.process(sharedBuffer,nfaState,inputEvent.getValue(),inputEvent.getTimestamp());
    resultingPatterns.addAll(patterns);
  }
  Assert.assertEquals(1L,resultingPatterns.size());
  Map<String,List<Event>> match=resultingPatterns.get(0);
  Assert.assertArrayEquals(match.get("start").toArray(),Lists.newArrayList(startEvent1,startEvent2,startEvent3,startEvent4).toArray());
  Assert.assertArrayEquals(match.get("middle").toArray(),Lists.newArrayList(endEvent1,endEvent2,endEvent3).toArray());
}
