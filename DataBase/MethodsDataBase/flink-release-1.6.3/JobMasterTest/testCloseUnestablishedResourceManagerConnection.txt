/** 
 * Tests that we can close an unestablished ResourceManager connection.
 */
@Test public void testCloseUnestablishedResourceManagerConnection() throws Exception {
  final JobMaster jobMaster=createJobMaster(configuration,jobGraph,haServices,new TestingJobManagerSharedServicesBuilder().build());
  try {
    jobMaster.start(JobMasterId.generate(),testingTimeout).get();
    final ResourceManagerId resourceManagerId=ResourceManagerId.generate();
    final String firstResourceManagerAddress="address1";
    final String secondResourceManagerAddress="address2";
    final TestingResourceManagerGateway firstResourceManagerGateway=new TestingResourceManagerGateway();
    final TestingResourceManagerGateway secondResourceManagerGateway=new TestingResourceManagerGateway();
    rpcService.registerGateway(firstResourceManagerAddress,firstResourceManagerGateway);
    rpcService.registerGateway(secondResourceManagerAddress,secondResourceManagerGateway);
    final OneShotLatch firstJobManagerRegistration=new OneShotLatch();
    final OneShotLatch secondJobManagerRegistration=new OneShotLatch();
    firstResourceManagerGateway.setRegisterJobManagerConsumer(jobMasterIdResourceIDStringJobIDTuple4 -> firstJobManagerRegistration.trigger());
    secondResourceManagerGateway.setRegisterJobManagerConsumer(jobMasterIdResourceIDStringJobIDTuple4 -> secondJobManagerRegistration.trigger());
    rmLeaderRetrievalService.notifyListener(firstResourceManagerAddress,resourceManagerId.toUUID());
    firstJobManagerRegistration.await();
    rmLeaderRetrievalService.notifyListener(secondResourceManagerAddress,resourceManagerId.toUUID());
    secondJobManagerRegistration.await();
  }
  finally {
    RpcUtils.terminateRpcEndpoint(jobMaster,testingTimeout);
  }
}
