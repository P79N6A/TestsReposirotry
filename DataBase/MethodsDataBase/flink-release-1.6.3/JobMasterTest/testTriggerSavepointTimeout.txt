/** 
 * Tests that the timeout in  {@link JobMasterGateway#triggerSavepoint(String,boolean,Time)}is respected.
 */
@Test public void testTriggerSavepointTimeout() throws Exception {
  final JobMaster jobMaster=new JobMaster(rpcService,JobMasterConfiguration.fromConfiguration(configuration),jmResourceId,jobGraph,haServices,DefaultSlotPoolFactory.fromConfiguration(configuration,rpcService),new TestingJobManagerSharedServicesBuilder().build(),heartbeatServices,blobServer,UnregisteredJobManagerJobMetricGroupFactory.INSTANCE,new NoOpOnCompletionActions(),testingFatalErrorHandler,JobMasterTest.class.getClassLoader()){
    @Override public CompletableFuture<String> triggerSavepoint(    @Nullable final String targetDirectory,    final boolean cancelJob,    final Time timeout){
      return new CompletableFuture<>();
    }
  }
;
  try {
    final CompletableFuture<Acknowledge> startFuture=jobMaster.start(jobMasterId,testingTimeout);
    startFuture.get(testingTimeout.toMilliseconds(),TimeUnit.MILLISECONDS);
    final JobMasterGateway jobMasterGateway=jobMaster.getSelfGateway(JobMasterGateway.class);
    final CompletableFuture<String> savepointFutureLowTimeout=jobMasterGateway.triggerSavepoint("/tmp",false,Time.milliseconds(1));
    final CompletableFuture<String> savepointFutureHighTimeout=jobMasterGateway.triggerSavepoint("/tmp",false,RpcUtils.INF_TIMEOUT);
    try {
      savepointFutureLowTimeout.get(testingTimeout.getSize(),testingTimeout.getUnit());
      fail();
    }
 catch (    final ExecutionException e) {
      final Throwable cause=ExceptionUtils.stripExecutionException(e);
      assertThat(cause,instanceOf(TimeoutException.class));
    }
    assertThat(savepointFutureHighTimeout.isDone(),is(equalTo(false)));
  }
  finally {
    RpcUtils.terminateRpcEndpoint(jobMaster,testingTimeout);
  }
}
