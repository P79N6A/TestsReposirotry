@Test public void testHeartbeatTimeoutWithTaskManager() throws Exception {
  final CompletableFuture<ResourceID> heartbeatResourceIdFuture=new CompletableFuture<>();
  final CompletableFuture<JobID> disconnectedJobManagerFuture=new CompletableFuture<>();
  final TaskManagerLocation taskManagerLocation=new LocalTaskManagerLocation();
  final TestingTaskExecutorGateway taskExecutorGateway=new TestingTaskExecutorGatewayBuilder().setHeartbeatJobManagerConsumer(heartbeatResourceIdFuture::complete).setDisconnectJobManagerConsumer((jobId,throwable) -> disconnectedJobManagerFuture.complete(jobId)).createTestingTaskExecutorGateway();
  rpcService.registerGateway(taskExecutorGateway.getAddress(),taskExecutorGateway);
  final JobManagerSharedServices jobManagerSharedServices=new TestingJobManagerSharedServicesBuilder().build();
  final JobMaster jobMaster=createJobMaster(configuration,jobGraph,haServices,jobManagerSharedServices);
  CompletableFuture<Acknowledge> startFuture=jobMaster.start(jobMasterId,testingTimeout);
  try {
    startFuture.get(testingTimeout.toMilliseconds(),TimeUnit.MILLISECONDS);
    final JobMasterGateway jobMasterGateway=jobMaster.getSelfGateway(JobMasterGateway.class);
    CompletableFuture<RegistrationResponse> registrationResponse=jobMasterGateway.registerTaskManager(taskExecutorGateway.getAddress(),taskManagerLocation,testingTimeout);
    registrationResponse.get();
    final ResourceID heartbeatResourceId=heartbeatResourceIdFuture.get(testingTimeout.toMilliseconds(),TimeUnit.MILLISECONDS);
    assertThat(heartbeatResourceId,Matchers.equalTo(jmResourceId));
    final JobID disconnectedJobManager=disconnectedJobManagerFuture.get(testingTimeout.toMilliseconds(),TimeUnit.MILLISECONDS);
    assertThat(disconnectedJobManager,Matchers.equalTo(jobGraph.getJobID()));
  }
  finally {
    jobManagerSharedServices.shutdown();
    RpcUtils.terminateRpcEndpoint(jobMaster,testingTimeout);
  }
}
