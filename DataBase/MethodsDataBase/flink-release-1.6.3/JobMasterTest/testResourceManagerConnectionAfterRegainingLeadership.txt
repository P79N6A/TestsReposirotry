/** 
 * Tests that the a JM connects to the leading RM after regaining leadership.
 */
@Test public void testResourceManagerConnectionAfterRegainingLeadership() throws Exception {
  final JobMaster jobMaster=createJobMaster(configuration,jobGraph,haServices,new TestingJobManagerSharedServicesBuilder().build());
  jobMaster.start(jobMasterId,testingTimeout);
  try {
    final TestingResourceManagerGateway testingResourceManagerGateway=new TestingResourceManagerGateway();
    final BlockingQueue<JobMasterId> registrationQueue=new ArrayBlockingQueue<>(1);
    testingResourceManagerGateway.setRegisterJobManagerConsumer(jobMasterIdResourceIDStringJobIDTuple4 -> registrationQueue.offer(jobMasterIdResourceIDStringJobIDTuple4.f0));
    final String resourceManagerAddress=testingResourceManagerGateway.getAddress();
    rpcService.registerGateway(resourceManagerAddress,testingResourceManagerGateway);
    rmLeaderRetrievalService.notifyListener(resourceManagerAddress,testingResourceManagerGateway.getFencingToken().toUUID());
    final JobMasterId firstRegistrationAttempt=registrationQueue.take();
    assertThat(firstRegistrationAttempt,equalTo(jobMasterId));
    jobMaster.suspend(new FlinkException("Test exception."),testingTimeout).get();
    final JobMasterId jobMasterId2=JobMasterId.generate();
    jobMaster.start(jobMasterId2,testingTimeout).get();
    final JobMasterId secondRegistrationAttempt=registrationQueue.take();
    assertThat(secondRegistrationAttempt,equalTo(jobMasterId2));
  }
  finally {
    RpcUtils.terminateRpcEndpoint(jobMaster,testingTimeout);
  }
}
