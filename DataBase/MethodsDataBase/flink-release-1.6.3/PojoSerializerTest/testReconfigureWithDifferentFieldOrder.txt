/** 
 * Verifies that reconfiguration reorders the fields of the new Pojo serializer to remain the same.
 */
@Test public void testReconfigureWithDifferentFieldOrder() throws Exception {
  Field[] mockOriginalFieldOrder={TestUserClass.class.getField("dumm4"),TestUserClass.class.getField("dumm3"),TestUserClass.class.getField("nestedClass"),TestUserClass.class.getField("dumm1"),TestUserClass.class.getField("dumm2"),TestUserClass.class.getField("dumm5")};
  PojoSerializer<TestUserClass> ser=(PojoSerializer<TestUserClass>)type.createSerializer(new ExecutionConfig());
  LinkedHashMap<String,Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>> mockOriginalFieldToSerializerConfigSnapshot=new LinkedHashMap<>(mockOriginalFieldOrder.length);
  mockOriginalFieldToSerializerConfigSnapshot.put(mockOriginalFieldOrder[0].getName(),new Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>(ser.getFieldSerializers()[3],ser.getFieldSerializers()[3].snapshotConfiguration()));
  mockOriginalFieldToSerializerConfigSnapshot.put(mockOriginalFieldOrder[1].getName(),new Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>(ser.getFieldSerializers()[2],ser.getFieldSerializers()[2].snapshotConfiguration()));
  mockOriginalFieldToSerializerConfigSnapshot.put(mockOriginalFieldOrder[2].getName(),new Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>(ser.getFieldSerializers()[5],ser.getFieldSerializers()[5].snapshotConfiguration()));
  mockOriginalFieldToSerializerConfigSnapshot.put(mockOriginalFieldOrder[3].getName(),new Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>(ser.getFieldSerializers()[0],ser.getFieldSerializers()[0].snapshotConfiguration()));
  mockOriginalFieldToSerializerConfigSnapshot.put(mockOriginalFieldOrder[4].getName(),new Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>(ser.getFieldSerializers()[1],ser.getFieldSerializers()[1].snapshotConfiguration()));
  mockOriginalFieldToSerializerConfigSnapshot.put(mockOriginalFieldOrder[5].getName(),new Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>(ser.getFieldSerializers()[4],ser.getFieldSerializers()[4].snapshotConfiguration()));
  PojoSerializer<TestUserClass> pojoSerializer=(PojoSerializer<TestUserClass>)type.createSerializer(new ExecutionConfig());
  assertEquals(TestUserClass.class.getField("dumm1"),pojoSerializer.getFields()[0]);
  assertEquals(TestUserClass.class.getField("dumm2"),pojoSerializer.getFields()[1]);
  assertEquals(TestUserClass.class.getField("dumm3"),pojoSerializer.getFields()[2]);
  assertEquals(TestUserClass.class.getField("dumm4"),pojoSerializer.getFields()[3]);
  assertEquals(TestUserClass.class.getField("dumm5"),pojoSerializer.getFields()[4]);
  assertEquals(TestUserClass.class.getField("nestedClass"),pojoSerializer.getFields()[5]);
  PojoSerializer.PojoSerializerConfigSnapshot<TestUserClass> mockPreviousConfigSnapshot=new PojoSerializer.PojoSerializerConfigSnapshot<>(TestUserClass.class,mockOriginalFieldToSerializerConfigSnapshot,new LinkedHashMap<Class<?>,Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>>(),new HashMap<Class<?>,Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>>());
  CompatibilityResult<TestUserClass> compatResult=pojoSerializer.ensureCompatibility(mockPreviousConfigSnapshot);
  assertFalse(compatResult.isRequiresMigration());
  int i=0;
  for (  Field field : mockOriginalFieldOrder) {
    assertEquals(field,pojoSerializer.getFields()[i]);
    i++;
  }
}
