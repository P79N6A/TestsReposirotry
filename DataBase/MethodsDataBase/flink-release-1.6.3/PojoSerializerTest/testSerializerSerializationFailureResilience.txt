@SuppressWarnings("unchecked") @Test public void testSerializerSerializationFailureResilience() throws Exception {
  PojoSerializer<TestUserClass> pojoSerializer=(PojoSerializer<TestUserClass>)type.createSerializer(new ExecutionConfig());
  PojoSerializer.PojoSerializerConfigSnapshot<TestUserClass> config=pojoSerializer.snapshotConfiguration();
  byte[] serializedConfig;
  try (ByteArrayOutputStream out=new ByteArrayOutputStream()){
    TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out),config);
    serializedConfig=out.toByteArray();
  }
   Set<String> cnfThrowingClassnames=new HashSet<>();
  cnfThrowingClassnames.add(IntSerializer.class.getName());
  cnfThrowingClassnames.add(IntPrimitiveArraySerializer.class.getName());
  cnfThrowingClassnames.add(StringSerializer.class.getName());
  cnfThrowingClassnames.add(DateSerializer.class.getName());
  cnfThrowingClassnames.add(DoubleSerializer.class.getName());
  PojoSerializer.PojoSerializerConfigSnapshot<TestUserClass> deserializedConfig;
  try (ByteArrayInputStream in=new ByteArrayInputStream(serializedConfig)){
    deserializedConfig=(PojoSerializer.PojoSerializerConfigSnapshot<TestUserClass>)TypeSerializerSerializationUtil.readSerializerConfigSnapshot(new DataInputViewStreamWrapper(in),new ArtificialCNFExceptionThrowingClassLoader(Thread.currentThread().getContextClassLoader(),cnfThrowingClassnames));
  }
   Assert.assertFalse(pojoSerializer.ensureCompatibility(deserializedConfig).isRequiresMigration());
  verifyPojoSerializerConfigSnapshotWithSerializerSerializationFailure(config,deserializedConfig);
}
