/** 
 * Tests that reconfiguration repopulates previously cached subclass serializers.
 */
@Test public void testReconfigureRepopulateNonregisteredSubclassSerializerCache() throws Exception {
  PojoSerializer<TestUserClass> pojoSerializer=(PojoSerializer<TestUserClass>)type.createSerializer(new ExecutionConfig());
  pojoSerializer.getSubclassSerializer(SubTestUserClassA.class);
  pojoSerializer.getSubclassSerializer(SubTestUserClassB.class);
  assertEquals(2,pojoSerializer.getSubclassSerializerCache().size());
  assertTrue(pojoSerializer.getSubclassSerializerCache().containsKey(SubTestUserClassA.class));
  assertTrue(pojoSerializer.getSubclassSerializerCache().containsKey(SubTestUserClassB.class));
  TypeSerializerConfigSnapshot pojoSerializerConfigSnapshot=pojoSerializer.snapshotConfiguration();
  byte[] serializedConfig;
  try (ByteArrayOutputStream out=new ByteArrayOutputStream()){
    TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out),pojoSerializerConfigSnapshot);
    serializedConfig=out.toByteArray();
  }
   pojoSerializer=(PojoSerializer<TestUserClass>)type.createSerializer(new ExecutionConfig());
  try (ByteArrayInputStream in=new ByteArrayInputStream(serializedConfig)){
    pojoSerializerConfigSnapshot=TypeSerializerSerializationUtil.readSerializerConfigSnapshot(new DataInputViewStreamWrapper(in),Thread.currentThread().getContextClassLoader());
  }
   CompatibilityResult<TestUserClass> compatResult=pojoSerializer.ensureCompatibility(pojoSerializerConfigSnapshot);
  assertFalse(compatResult.isRequiresMigration());
  assertEquals(2,pojoSerializer.getSubclassSerializerCache().size());
  assertTrue(pojoSerializer.getSubclassSerializerCache().containsKey(SubTestUserClassA.class));
  assertTrue(pojoSerializer.getSubclassSerializerCache().containsKey(SubTestUserClassB.class));
}
