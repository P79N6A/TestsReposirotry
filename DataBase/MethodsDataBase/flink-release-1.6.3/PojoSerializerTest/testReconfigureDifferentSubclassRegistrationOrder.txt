/** 
 * Tests that reconfiguration correctly reorders subclass registrations to their previous order.
 */
@Test public void testReconfigureDifferentSubclassRegistrationOrder() throws Exception {
  ExecutionConfig executionConfig=new ExecutionConfig();
  executionConfig.registerPojoType(SubTestUserClassA.class);
  executionConfig.registerPojoType(SubTestUserClassB.class);
  PojoSerializer<TestUserClass> pojoSerializer=(PojoSerializer<TestUserClass>)type.createSerializer(executionConfig);
  int subClassATag=pojoSerializer.getRegisteredClasses().get(SubTestUserClassA.class);
  int subClassBTag=pojoSerializer.getRegisteredClasses().get(SubTestUserClassB.class);
  TypeSerializerConfigSnapshot pojoSerializerConfigSnapshot=pojoSerializer.snapshotConfiguration();
  byte[] serializedConfig;
  try (ByteArrayOutputStream out=new ByteArrayOutputStream()){
    TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out),pojoSerializerConfigSnapshot);
    serializedConfig=out.toByteArray();
  }
   executionConfig=new ExecutionConfig();
  executionConfig.registerPojoType(SubTestUserClassB.class);
  executionConfig.registerPojoType(SubTestUserClassA.class);
  pojoSerializer=(PojoSerializer<TestUserClass>)type.createSerializer(executionConfig);
  try (ByteArrayInputStream in=new ByteArrayInputStream(serializedConfig)){
    pojoSerializerConfigSnapshot=TypeSerializerSerializationUtil.readSerializerConfigSnapshot(new DataInputViewStreamWrapper(in),Thread.currentThread().getContextClassLoader());
  }
   CompatibilityResult<TestUserClass> compatResult=pojoSerializer.ensureCompatibility(pojoSerializerConfigSnapshot);
  assertTrue(!compatResult.isRequiresMigration());
  assertEquals(subClassATag,pojoSerializer.getRegisteredClasses().get(SubTestUserClassA.class).intValue());
  assertEquals(subClassBTag,pojoSerializer.getRegisteredClasses().get(SubTestUserClassB.class).intValue());
}
