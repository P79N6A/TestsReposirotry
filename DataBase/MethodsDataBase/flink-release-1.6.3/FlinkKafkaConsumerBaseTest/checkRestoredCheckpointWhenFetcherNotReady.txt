/** 
 * Tests that when taking a checkpoint when the fetcher is not running yet, the checkpoint correctly contains the restored state instead.
 */
@Test public void checkRestoredCheckpointWhenFetcherNotReady() throws Exception {
  @SuppressWarnings("unchecked") final FlinkKafkaConsumerBase<String> consumer=new DummyFlinkKafkaConsumer<>();
  final TestingListState<Tuple2<KafkaTopicPartition,Long>> restoredListState=new TestingListState<>();
  setupConsumer(consumer,true,restoredListState,true,0,1);
  consumer.snapshotState(new StateSnapshotContextSynchronousImpl(17,17));
  Assert.assertTrue(restoredListState.isClearCalled());
  Set<Serializable> expected=new HashSet<>();
  for (  Serializable serializable : restoredListState.get()) {
    expected.add(serializable);
  }
  int counter=0;
  for (  Serializable serializable : restoredListState.get()) {
    assertTrue(expected.contains(serializable));
    counter++;
  }
  assertEquals(expected.size(),counter);
}
