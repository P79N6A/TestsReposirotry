@Test public void testBasicPipelinedProduceConsumeLogic() throws Exception {
  assertFalse(readView.nextBufferIsEvent());
  assertNoNextBuffer(readView);
  assertFalse(readView.nextBufferIsEvent());
  assertEquals(0,availablityListener.getNumNotifications());
  subpartition.add(createFilledBufferConsumer(BUFFER_SIZE));
  assertFalse(readView.nextBufferIsEvent());
  assertEquals(1,subpartition.getTotalNumberOfBuffers());
  assertEquals(1,subpartition.getBuffersInBacklog());
  assertEquals(0,subpartition.getTotalNumberOfBytes());
  assertEquals(1,availablityListener.getNumNotifications());
  assertNextBuffer(readView,BUFFER_SIZE,false,subpartition.getBuffersInBacklog() - 1,false,true);
  assertEquals(BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
  assertEquals(0,subpartition.getBuffersInBacklog());
  assertNoNextBuffer(readView);
  assertEquals(0,subpartition.getBuffersInBacklog());
  subpartition.add(createFilledBufferConsumer(BUFFER_SIZE));
  assertFalse(readView.nextBufferIsEvent());
  assertEquals(2,subpartition.getTotalNumberOfBuffers());
  assertEquals(1,subpartition.getBuffersInBacklog());
  assertEquals(BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
  assertEquals(2,availablityListener.getNumNotifications());
  assertNextBuffer(readView,BUFFER_SIZE,false,subpartition.getBuffersInBacklog() - 1,false,true);
  assertEquals(2 * BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
  assertEquals(0,subpartition.getBuffersInBacklog());
  assertNoNextBuffer(readView);
  assertEquals(0,subpartition.getBuffersInBacklog());
  subpartition.add(createFilledBufferConsumer(BUFFER_SIZE));
  assertFalse(readView.nextBufferIsEvent());
  subpartition.add(createEventBufferConsumer(BUFFER_SIZE));
  assertFalse(readView.nextBufferIsEvent());
  subpartition.add(createFilledBufferConsumer(BUFFER_SIZE));
  assertFalse(readView.nextBufferIsEvent());
  assertEquals(5,subpartition.getTotalNumberOfBuffers());
  assertEquals(2,subpartition.getBuffersInBacklog());
  assertEquals(2 * BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
  assertEquals(4,availablityListener.getNumNotifications());
  assertNextBuffer(readView,BUFFER_SIZE,true,subpartition.getBuffersInBacklog() - 1,true,true);
  assertEquals(3 * BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
  assertEquals(1,subpartition.getBuffersInBacklog());
  assertNextEvent(readView,BUFFER_SIZE,null,true,subpartition.getBuffersInBacklog(),false,true);
  assertEquals(4 * BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
  assertEquals(1,subpartition.getBuffersInBacklog());
  assertNextBuffer(readView,BUFFER_SIZE,false,subpartition.getBuffersInBacklog() - 1,false,true);
  assertEquals(5 * BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
  assertEquals(0,subpartition.getBuffersInBacklog());
  assertNoNextBuffer(readView);
  assertEquals(0,subpartition.getBuffersInBacklog());
  assertEquals(5,subpartition.getTotalNumberOfBuffers());
  assertEquals(5 * BUFFER_SIZE,subpartition.getTotalNumberOfBytes());
  assertEquals(4,availablityListener.getNumNotifications());
}
