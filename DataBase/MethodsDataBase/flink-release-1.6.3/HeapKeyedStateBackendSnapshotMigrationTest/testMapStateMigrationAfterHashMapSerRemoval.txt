@Test public void testMapStateMigrationAfterHashMapSerRemoval() throws Exception {
  ClassLoader cl=getClass().getClassLoader();
  URL resource=cl.getResource("heap_keyed_statebackend_1_5_map.snapshot");
  Preconditions.checkNotNull(resource,"Binary snapshot resource not found!");
  try (final HeapKeyedStateBackend<String> keyedBackend=createKeyedBackend()){
    final Integer namespace1=1;
    final Integer namespace2=2;
    final Integer namespace3=3;
    final SnapshotResult<KeyedStateHandle> stateHandles;
    try (BufferedInputStream bis=new BufferedInputStream((new FileInputStream(resource.getFile())))){
      stateHandles=InstantiationUtil.deserializeObject(bis,Thread.currentThread().getContextClassLoader());
    }
     final MapStateDescriptor<Long,Long> stateDescr=new MapStateDescriptor<>("my-map-state",Long.class,Long.class);
    stateDescr.initializeSerializerUnlessSet(new ExecutionConfig());
    keyedBackend.restore(StateObjectCollection.singleton(stateHandles.getJobManagerOwnedSnapshot()));
    InternalMapState<String,Integer,Long,Long> state=keyedBackend.createInternalState(IntSerializer.INSTANCE,stateDescr);
    keyedBackend.setCurrentKey("abc");
    state.setCurrentNamespace(namespace1);
    assertEquals(33L,(long)state.get(33L));
    assertEquals(55L,(long)state.get(55L));
    assertEquals(2,getStateSize(state));
    state.setCurrentNamespace(namespace2);
    assertEquals(22L,(long)state.get(22L));
    assertEquals(11L,(long)state.get(11L));
    assertEquals(2,getStateSize(state));
    state.setCurrentNamespace(namespace3);
    assertEquals(44L,(long)state.get(44L));
    assertEquals(1,getStateSize(state));
    keyedBackend.setCurrentKey("def");
    state.setCurrentNamespace(namespace1);
    assertEquals(11L,(long)state.get(11L));
    assertEquals(44L,(long)state.get(44L));
    assertEquals(2,getStateSize(state));
    state.setCurrentNamespace(namespace3);
    assertEquals(22L,(long)state.get(22L));
    assertEquals(55L,(long)state.get(55L));
    assertEquals(33L,(long)state.get(33L));
    assertEquals(3,getStateSize(state));
    keyedBackend.setCurrentKey("jkl");
    state.setCurrentNamespace(namespace1);
    assertEquals(11L,(long)state.get(11L));
    assertEquals(22L,(long)state.get(22L));
    assertEquals(33L,(long)state.get(33L));
    assertEquals(44L,(long)state.get(44L));
    assertEquals(55L,(long)state.get(55L));
    assertEquals(5,getStateSize(state));
    keyedBackend.setCurrentKey("mno");
    state.setCurrentNamespace(namespace3);
    assertEquals(11L,(long)state.get(11L));
    assertEquals(22L,(long)state.get(22L));
    assertEquals(33L,(long)state.get(33L));
    assertEquals(44L,(long)state.get(44L));
    assertEquals(55L,(long)state.get(55L));
    assertEquals(5,getStateSize(state));
    RunnableFuture<SnapshotResult<KeyedStateHandle>> snapshot=keyedBackend.snapshot(1L,1L,new MemCheckpointStreamFactory(4 * 1024 * 1024),CheckpointOptions.forCheckpointWithDefaultLocation());
    snapshot.run();
  }
 }
