/** 
 * Tests triggering a new request and monitoring it.
 */
@Test public void testTriggerNewRequest() throws Exception {
  JobID jobId=new JobID();
  ExecutionGraphCache holder=mock(ExecutionGraphCache.class);
  ExecutionGraph graph=mock(ExecutionGraph.class);
  when(holder.getExecutionGraph(eq(jobId),any(JobManagerGateway.class))).thenReturn(CompletableFuture.completedFuture(graph));
  when(graph.getCheckpointCoordinatorConfiguration()).thenReturn(new CheckpointCoordinatorConfiguration(1L,1L,1L,1,CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,true));
  JobCancellationWithSavepointHandlers handlers=new JobCancellationWithSavepointHandlers(holder,executor);
  JobCancellationWithSavepointHandlers.TriggerHandler trigger=handlers.getTriggerHandler();
  JobCancellationWithSavepointHandlers.InProgressHandler progress=handlers.getInProgressHandler();
  Map<String,String> params=new HashMap<>();
  params.put("jobid",jobId.toString());
  params.put("targetDirectory","custom-directory");
  JobManagerGateway jobManager=mock(JobManagerGateway.class);
  CompletableFuture<String> successfulCancelWithSavepoint=new CompletableFuture<>();
  when(jobManager.cancelJobWithSavepoint(eq(jobId),eq("custom-directory"),any(Time.class))).thenReturn(successfulCancelWithSavepoint);
  FullHttpResponse response=trigger.handleRequest(params,Collections.emptyMap(),jobManager).get();
  verify(jobManager).cancelJobWithSavepoint(eq(jobId),eq("custom-directory"),any(Time.class));
  String location=String.format("/jobs/%s/cancel-with-savepoint/in-progress/1",jobId);
  assertEquals(HttpResponseStatus.ACCEPTED,response.getStatus());
  assertEquals("application/json; charset=UTF-8",response.headers().get(HttpHeaders.Names.CONTENT_TYPE));
  assertEquals(Integer.toString(response.content().readableBytes()),response.headers().get(HttpHeaders.Names.CONTENT_LENGTH));
  assertEquals(location,response.headers().get(HttpHeaders.Names.LOCATION));
  String json=response.content().toString(Charset.forName("UTF-8"));
  JsonNode root=new ObjectMapper().readTree(json);
  assertEquals("accepted",root.get("status").asText());
  assertEquals("1",root.get("request-id").asText());
  assertEquals(location,root.get("location").asText());
  response=trigger.handleRequest(params,Collections.<String,String>emptyMap(),jobManager).get();
  assertEquals(HttpResponseStatus.ACCEPTED,response.getStatus());
  assertEquals("application/json; charset=UTF-8",response.headers().get(HttpHeaders.Names.CONTENT_TYPE));
  assertEquals(Integer.toString(response.content().readableBytes()),response.headers().get(HttpHeaders.Names.CONTENT_LENGTH));
  assertEquals(location,response.headers().get(HttpHeaders.Names.LOCATION));
  json=response.content().toString(Charset.forName("UTF-8"));
  root=new ObjectMapper().readTree(json);
  assertEquals("accepted",root.get("status").asText());
  assertEquals("1",root.get("request-id").asText());
  assertEquals(location,root.get("location").asText());
  verify(jobManager).cancelJobWithSavepoint(eq(jobId),eq("custom-directory"),any(Time.class));
  params.put("requestId","1");
  response=progress.handleRequest(params,Collections.<String,String>emptyMap(),jobManager).get();
  assertEquals(HttpResponseStatus.ACCEPTED,response.getStatus());
  assertEquals("application/json; charset=UTF-8",response.headers().get(HttpHeaders.Names.CONTENT_TYPE));
  assertEquals(Integer.toString(response.content().readableBytes()),response.headers().get(HttpHeaders.Names.CONTENT_LENGTH));
  json=response.content().toString(Charset.forName("UTF-8"));
  root=new ObjectMapper().readTree(json);
  assertEquals("in-progress",root.get("status").asText());
  assertEquals("1",root.get("request-id").asText());
  successfulCancelWithSavepoint.complete("_path-savepoint_");
  response=progress.handleRequest(params,Collections.<String,String>emptyMap(),jobManager).get();
  assertEquals(HttpResponseStatus.CREATED,response.getStatus());
  assertEquals("application/json; charset=UTF-8",response.headers().get(HttpHeaders.Names.CONTENT_TYPE));
  assertEquals(Integer.toString(response.content().readableBytes()),response.headers().get(HttpHeaders.Names.CONTENT_LENGTH));
  json=response.content().toString(Charset.forName("UTF-8"));
  root=new ObjectMapper().readTree(json);
  assertEquals("success",root.get("status").asText());
  assertEquals("1",root.get("request-id").asText());
  assertEquals("_path-savepoint_",root.get("savepoint-path").asText());
  response=progress.handleRequest(params,Collections.<String,String>emptyMap(),jobManager).get();
  assertEquals(HttpResponseStatus.CREATED,response.getStatus());
  assertEquals("application/json; charset=UTF-8",response.headers().get(HttpHeaders.Names.CONTENT_TYPE));
  assertEquals(Integer.toString(response.content().readableBytes()),response.headers().get(HttpHeaders.Names.CONTENT_LENGTH));
  json=response.content().toString(Charset.forName("UTF-8"));
  root=new ObjectMapper().readTree(json);
  assertEquals("success",root.get("status").asText());
  assertEquals("1",root.get("request-id").asText());
  assertEquals("_path-savepoint_",root.get("savepoint-path").asText());
  params.put("requestId","9929");
  response=progress.handleRequest(params,Collections.<String,String>emptyMap(),jobManager).get();
  assertEquals(HttpResponseStatus.BAD_REQUEST,response.getStatus());
  assertEquals("application/json; charset=UTF-8",response.headers().get(HttpHeaders.Names.CONTENT_TYPE));
  assertEquals(Integer.toString(response.content().readableBytes()),response.headers().get(HttpHeaders.Names.CONTENT_LENGTH));
  json=response.content().toString(Charset.forName("UTF-8"));
  root=new ObjectMapper().readTree(json);
  assertEquals("failed",root.get("status").asText());
  assertEquals("9929",root.get("request-id").asText());
  assertEquals("Unknown job/request ID",root.get("cause").asText());
}
