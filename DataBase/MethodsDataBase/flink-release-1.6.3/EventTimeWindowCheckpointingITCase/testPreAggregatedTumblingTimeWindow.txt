@Test public void testPreAggregatedTumblingTimeWindow(){
  final int numElementsPerKey=numElementsPerKey();
  final int windowSize=windowSize();
  final int numKeys=numKeys();
  try {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(PARALLELISM);
    env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
    env.enableCheckpointing(100);
    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1,0));
    env.getConfig().disableSysoutLogging();
    env.setStateBackend(this.stateBackend);
    env.getConfig().setUseSnapshotCompression(true);
    env.addSource(new FailingSource(new KeyedEventTimeGenerator(numKeys,windowSize),numElementsPerKey)).rebalance().keyBy(0).timeWindow(Time.of(windowSize,MILLISECONDS)).reduce(new ReduceFunction<Tuple2<Long,IntType>>(){
      @Override public Tuple2<Long,IntType> reduce(      Tuple2<Long,IntType> a,      Tuple2<Long,IntType> b){
        return new Tuple2<>(a.f0,new IntType(a.f1.value + b.f1.value));
      }
    }
,new RichWindowFunction<Tuple2<Long,IntType>,Tuple4<Long,Long,Long,IntType>,Tuple,TimeWindow>(){
      private boolean open=false;
      @Override public void open(      Configuration parameters){
        assertEquals(PARALLELISM,getRuntimeContext().getNumberOfParallelSubtasks());
        open=true;
      }
      @Override public void apply(      Tuple tuple,      TimeWindow window,      Iterable<Tuple2<Long,IntType>> input,      Collector<Tuple4<Long,Long,Long,IntType>> out){
        assertTrue(open);
        for (        Tuple2<Long,IntType> in : input) {
          final Tuple4<Long,Long,Long,IntType> output=new Tuple4<>(in.f0,window.getStart(),window.getEnd(),in.f1);
          out.collect(output);
        }
      }
    }
).addSink(new ValidatingSink<>(new SinkValidatorUpdateFun(numElementsPerKey),new SinkValidatorCheckFun(numKeys,numElementsPerKey,windowSize))).setParallelism(1);
    env.execute("Tumbling Window Test");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
