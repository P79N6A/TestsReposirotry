/** 
 * Tests that we fail the operation if the remote connection closes.
 */
@Test public void testConnectionClosedHandling() throws Exception {
  final Configuration config=new Configuration();
  config.setLong(RestOptions.IDLENESS_TIMEOUT,5000L);
  try (final ServerSocket serverSocket=new ServerSocket(0);final RestClient restClient=new RestClient(RestClientConfiguration.fromConfiguration(config),TestingUtils.defaultExecutor())){
    final String targetAddress="localhost";
    final int targetPort=serverSocket.getLocalPort();
    final CompletableFuture<Socket> socketCompletableFuture=CompletableFuture.supplyAsync(CheckedSupplier.unchecked(serverSocket::accept));
    final CompletableFuture<EmptyResponseBody> responseFuture=restClient.sendRequest(targetAddress,targetPort,new TestMessageHeaders(),EmptyMessageParameters.getInstance(),EmptyRequestBody.getInstance(),Collections.emptyList());
    Socket connectionSocket=null;
    try {
      connectionSocket=socketCompletableFuture.get(TIMEOUT,TimeUnit.SECONDS);
    }
 catch (    TimeoutException ignored) {
      socketCompletableFuture.cancel(true);
    }
    if (connectionSocket != null) {
      connectionSocket.close();
    }
    try {
      responseFuture.get();
    }
 catch (    ExecutionException ee) {
      if (!ExceptionUtils.findThrowable(ee,IOException.class).isPresent()) {
        throw ee;
      }
    }
  }
 }
