@Test public void testMigrationWithTypeDevoidOfAvroTypes() throws Exception {
class FakeClass {
    public List<Integer> array;
    FakeClass(    List<Integer> array){
      this.array=array;
    }
  }
{
    ExecutionConfig executionConfig=new ExecutionConfig();
    KryoSerializer<FakeClass> kryoSerializer=new KryoSerializer<>(FakeClass.class,executionConfig);
    try (FileInputStream f=new FileInputStream("src/test/resources/type-without-avro-serialized-using-kryo");DataInputViewStreamWrapper inputView=new DataInputViewStreamWrapper(f)){
      FakeClass myTestClass=kryoSerializer.deserialize(inputView);
      assertThat(myTestClass.array.get(0),is(10));
      assertThat(myTestClass.array.get(1),is(20));
      assertThat(myTestClass.array.get(2),is(30));
    }
   }
}
