/** 
 * Verifies that reconfiguration result is INCOMPATIBLE if data type has changed.
 */
@Test public void testMigrationStrategyWithDifferentKryoType() throws Exception {
  KryoSerializer<TestClassA> kryoSerializerForA=new KryoSerializer<>(TestClassA.class,new ExecutionConfig());
  TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot=kryoSerializerForA.snapshotConfiguration();
  byte[] serializedConfig;
  try (ByteArrayOutputStream out=new ByteArrayOutputStream()){
    TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out),kryoSerializerConfigSnapshot);
    serializedConfig=out.toByteArray();
  }
   KryoSerializer<TestClassB> kryoSerializerForB=new KryoSerializer<>(TestClassB.class,new ExecutionConfig());
  try (ByteArrayInputStream in=new ByteArrayInputStream(serializedConfig)){
    kryoSerializerConfigSnapshot=TypeSerializerSerializationUtil.readSerializerConfigSnapshot(new DataInputViewStreamWrapper(in),Thread.currentThread().getContextClassLoader());
  }
   CompatibilityResult<TestClassB> compatResult=kryoSerializerForB.ensureCompatibility(kryoSerializerConfigSnapshot);
  assertTrue(compatResult.isRequiresMigration());
}
