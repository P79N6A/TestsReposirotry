/** 
 * Tests that after reconfiguration, registration ids are reconfigured to remain the same as the preceding KryoSerializer.
 */
@Test public void testMigrationStrategyForDifferentRegistrationOrder() throws Exception {
  ExecutionConfig executionConfig=new ExecutionConfig();
  executionConfig.registerKryoType(TestClassA.class);
  executionConfig.registerKryoType(TestClassB.class);
  KryoSerializer<TestClass> kryoSerializer=new KryoSerializer<>(TestClass.class,executionConfig);
  int testClassId=kryoSerializer.getKryo().getRegistration(TestClass.class).getId();
  int testClassAId=kryoSerializer.getKryo().getRegistration(TestClassA.class).getId();
  int testClassBId=kryoSerializer.getKryo().getRegistration(TestClassB.class).getId();
  TypeSerializerConfigSnapshot kryoSerializerConfigSnapshot=kryoSerializer.snapshotConfiguration();
  byte[] serializedConfig;
  try (ByteArrayOutputStream out=new ByteArrayOutputStream()){
    TypeSerializerSerializationUtil.writeSerializerConfigSnapshot(new DataOutputViewStreamWrapper(out),kryoSerializerConfigSnapshot);
    serializedConfig=out.toByteArray();
  }
   executionConfig=new ExecutionConfig();
  executionConfig.registerKryoType(TestClassB.class);
  executionConfig.registerKryoType(TestClassA.class);
  kryoSerializer=new KryoSerializer<>(TestClass.class,executionConfig);
  try (ByteArrayInputStream in=new ByteArrayInputStream(serializedConfig)){
    kryoSerializerConfigSnapshot=TypeSerializerSerializationUtil.readSerializerConfigSnapshot(new DataInputViewStreamWrapper(in),Thread.currentThread().getContextClassLoader());
  }
   CompatibilityResult<TestClass> compatResult=kryoSerializer.ensureCompatibility(kryoSerializerConfigSnapshot);
  assertFalse(compatResult.isRequiresMigration());
  assertEquals(testClassId,kryoSerializer.getKryo().getRegistration(TestClass.class).getId());
  assertEquals(testClassAId,kryoSerializer.getKryo().getRegistration(TestClassA.class).getId());
  assertEquals(testClassBId,kryoSerializer.getKryo().getRegistration(TestClassB.class).getId());
}
