@Test(timeout=2000) @RetryOnFailure(times=3) public void testRocksDbListStateAPIs() throws Exception {
  final File rocksDir=tmp.newFolder();
  NativeLibraryLoader.getInstance().loadLibrary(rocksDir.getAbsolutePath());
  final String key1="key1";
  final String key2="key2";
  final String value="abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ7890654321";
  final byte[] keyBytes1=key1.getBytes(StandardCharsets.UTF_8);
  final byte[] keyBytes2=key2.getBytes(StandardCharsets.UTF_8);
  final byte[] valueBytes=value.getBytes(StandardCharsets.UTF_8);
  final int num=10;
  try (final Options options=new Options().setCompactionStyle(CompactionStyle.LEVEL).setLevelCompactionDynamicLevelBytes(true).setIncreaseParallelism(4).setUseFsync(false).setMaxOpenFiles(-1).setCreateIfMissing(true).setMergeOperatorName(RocksDBKeyedStateBackend.MERGE_OPERATOR_NAME);final WriteOptions writeOptions=new WriteOptions().setSync(false).setDisableWAL(true);final RocksDB rocksDB=RocksDB.open(options,rocksDir.getAbsolutePath())){
    log.info("begin add");
    final long beginInsert1=System.nanoTime();
    for (int i=0; i < num; i++) {
      rocksDB.merge(writeOptions,keyBytes1,valueBytes);
    }
    final long endInsert1=System.nanoTime();
    log.info("end add - duration: {} ns",(endInsert1 - beginInsert1));
    List<byte[]> list=new ArrayList<>(num);
    for (int i=0; i < num; i++) {
      list.add(valueBytes);
    }
    byte[] premerged=merge(list);
    log.info("begin update");
    final long beginInsert2=System.nanoTime();
    rocksDB.merge(writeOptions,keyBytes2,premerged);
    final long endInsert2=System.nanoTime();
    log.info("end update - duration: {} ns",(endInsert2 - beginInsert2));
  }
 }
