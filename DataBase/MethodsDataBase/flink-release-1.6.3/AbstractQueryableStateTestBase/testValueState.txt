/** 
 * Tests simple value state queryable state instance. Each source emits (subtaskIndex, 0)..(subtaskIndex, numElements) tuples, which are then queried. The tests succeeds after each subtask index is queried with value numElements (the latest element updated the state).
 */
@Test public void testValueState() throws Exception {
  final Deadline deadline=Deadline.now().plus(TEST_TIMEOUT);
  final long numElements=1024L;
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStateBackend(stateBackend);
  env.setParallelism(maxParallelism);
  env.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE,1000L));
  DataStream<Tuple2<Integer,Long>> source=env.addSource(new TestAscendingValueSource(numElements));
  ValueStateDescriptor<Tuple2<Integer,Long>> valueState=new ValueStateDescriptor<>("any",source.getType());
  source.keyBy(new KeySelector<Tuple2<Integer,Long>,Integer>(){
    private static final long serialVersionUID=7662520075515707428L;
    @Override public Integer getKey(    Tuple2<Integer,Long> value){
      return value.f0;
    }
  }
).asQueryableState("hakuna",valueState);
  try (AutoCancellableJob autoCancellableJob=new AutoCancellableJob(deadline,clusterClient,env)){
    final JobID jobId=autoCancellableJob.getJobId();
    final JobGraph jobGraph=autoCancellableJob.getJobGraph();
    clusterClient.setDetached(true);
    clusterClient.submitJob(jobGraph,AbstractQueryableStateTestBase.class.getClassLoader());
    executeValueQuery(deadline,client,jobId,"hakuna",valueState,numElements);
  }
 }
