@Test public void allocateMultipleOwners(){
  final int numOwners=17;
  try {
    AbstractInvokable[] owners=new AbstractInvokable[numOwners];
    @SuppressWarnings("unchecked") List<MemorySegment>[] mems=(List<MemorySegment>[])new List<?>[numOwners];
    for (int i=0; i < numOwners; i++) {
      owners[i]=new DummyInvokable();
      mems[i]=new ArrayList<MemorySegment>(64);
    }
    for (int i=0; i < NUM_PAGES; i++) {
      final int owner=this.random.nextInt(numOwners);
      mems[owner].addAll(this.memoryManager.allocatePages(owners[owner],1));
    }
    for (int i=0; i < numOwners; i++) {
      this.memoryManager.releaseAll(owners[i]);
      owners[i]=null;
      Assert.assertTrue("Released memory segments have not been destroyed.",allMemorySegmentsFreed(mems[i]));
      mems[i]=null;
      for (int k=i + 1; k < numOwners; k++) {
        Assert.assertTrue("Non-released memory segments are accidentaly destroyed.",allMemorySegmentsValid(mems[k]));
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
