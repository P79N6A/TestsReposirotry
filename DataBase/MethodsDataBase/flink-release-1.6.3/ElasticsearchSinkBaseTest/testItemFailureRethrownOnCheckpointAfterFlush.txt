/** 
 * Tests that any item failure in the listener callbacks due to flushing on an immediately following checkpoint is rethrown; we set a timeout because the test will not finish if the logic is broken.
 */
@Test(timeout=5000) public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable {
  final DummyElasticsearchSink<String> sink=new DummyElasticsearchSink<>(new HashMap<String,String>(),new SimpleSinkFunction<String>(),new NoOpFailureHandler());
  final OneInputStreamOperatorTestHarness<String,Object> testHarness=new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink));
  testHarness.open();
  List<Exception> mockResponsesList=new ArrayList<>(2);
  mockResponsesList.add(null);
  mockResponsesList.add(new Exception("artificial failure for record"));
  sink.setMockItemFailuresListForNextBulkItemResponses(mockResponsesList);
  testHarness.processElement(new StreamRecord<>("msg-1"));
  verify(sink.getMockBulkProcessor(),times(1)).add(any(IndexRequest.class));
  sink.manualBulkRequestWithAllPendingRequests();
  testHarness.processElement(new StreamRecord<>("msg-2"));
  testHarness.processElement(new StreamRecord<>("msg-3"));
  verify(sink.getMockBulkProcessor(),times(3)).add(any(IndexRequest.class));
  CheckedThread snapshotThread=new CheckedThread(){
    @Override public void go() throws Exception {
      testHarness.snapshot(1L,1000L);
    }
  }
;
  snapshotThread.start();
  while (snapshotThread.getState() != Thread.State.WAITING) {
    Thread.sleep(10);
  }
  sink.continueFlush();
  try {
    snapshotThread.sync();
  }
 catch (  Exception e) {
    Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"));
    return;
  }
  Assert.fail();
}
