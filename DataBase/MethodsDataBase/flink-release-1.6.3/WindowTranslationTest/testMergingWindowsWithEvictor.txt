@Test @SuppressWarnings("rawtypes") public void testMergingWindowsWithEvictor() throws Exception {
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
  DataStream<Integer> source=env.fromElements(1,2);
  DataStream<String> window1=source.keyBy(new KeySelector<Integer,String>(){
    @Override public String getKey(    Integer value) throws Exception {
      return value.toString();
    }
  }
).window(EventTimeSessionWindows.withGap(Time.seconds(5))).evictor(CountEvictor.of(5)).process(new TestProcessWindowFunction());
  final OneInputTransformation<Integer,String> transform=(OneInputTransformation<Integer,String>)window1.getTransformation();
  final OneInputStreamOperator<Integer,String> operator=transform.getOperator();
  Assert.assertTrue(operator instanceof WindowOperator);
  WindowOperator<String,Integer,?,?,?> winOperator=(WindowOperator<String,Integer,?,?,?>)operator;
  Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);
  Assert.assertTrue(winOperator.getWindowAssigner() instanceof EventTimeSessionWindows);
  Assert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);
  processElementAndEnsureOutput(winOperator,winOperator.getKeySelector(),BasicTypeInfo.STRING_TYPE_INFO,1);
}
