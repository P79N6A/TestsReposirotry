@Test public void testAggregateWithProcessWindowFunctionProcessingTime() throws Exception {
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.ProcessingTime);
  DataStream<Tuple3<String,String,Integer>> source=env.fromElements(Tuple3.of("hello","hallo",1),Tuple3.of("hello","hallo",2));
  DataStream<String> window=source.keyBy(new Tuple3KeySelector()).window(TumblingProcessingTimeWindows.of(Time.of(1,TimeUnit.SECONDS))).aggregate(new DummyAggregationFunction(),new TestProcessWindowFunction());
  final OneInputTransformation<Tuple3<String,String,Integer>,String> transform=(OneInputTransformation<Tuple3<String,String,Integer>,String>)window.getTransformation();
  final OneInputStreamOperator<Tuple3<String,String,Integer>,String> operator=transform.getOperator();
  Assert.assertTrue(operator instanceof WindowOperator);
  WindowOperator<String,Tuple3<String,String,Integer>,?,?,?> winOperator=(WindowOperator<String,Tuple3<String,String,Integer>,?,?,?>)operator;
  Assert.assertTrue(winOperator.getTrigger() instanceof ProcessingTimeTrigger);
  Assert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingProcessingTimeWindows);
  Assert.assertTrue(winOperator.getStateDescriptor() instanceof AggregatingStateDescriptor);
  processElementAndEnsureOutput(operator,winOperator.getKeySelector(),BasicTypeInfo.STRING_TYPE_INFO,new Tuple3<>("hello","hallo",1));
}
