@Test @SuppressWarnings({"rawtypes","unchecked"}) public void testFoldWithEvictor() throws Exception {
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
  DataStream<Tuple2<String,Integer>> source=env.fromElements(Tuple2.of("hello",1),Tuple2.of("hello",2));
  DataStream<Tuple3<String,String,Integer>> window1=source.keyBy(0).window(SlidingEventTimeWindows.of(Time.of(1,TimeUnit.SECONDS),Time.of(100,TimeUnit.MILLISECONDS))).evictor(CountEvictor.of(100)).fold(new Tuple3<>("","",1),new DummyFolder());
  OneInputTransformation<Tuple2<String,Integer>,Tuple3<String,String,Integer>> transform=(OneInputTransformation<Tuple2<String,Integer>,Tuple3<String,String,Integer>>)window1.getTransformation();
  OneInputStreamOperator<Tuple2<String,Integer>,Tuple3<String,String,Integer>> operator=transform.getOperator();
  Assert.assertTrue(operator instanceof EvictingWindowOperator);
  EvictingWindowOperator<String,Tuple2<String,Integer>,?,?> winOperator=(EvictingWindowOperator<String,Tuple2<String,Integer>,?,?>)operator;
  Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);
  Assert.assertTrue(winOperator.getEvictor() instanceof CountEvictor);
  Assert.assertTrue(winOperator.getWindowAssigner() instanceof SlidingEventTimeWindows);
  Assert.assertTrue(winOperator.getStateDescriptor() instanceof ListStateDescriptor);
  winOperator.setOutputType((TypeInformation)window1.getType(),new ExecutionConfig());
  processElementAndEnsureOutput(winOperator,winOperator.getKeySelector(),BasicTypeInfo.STRING_TYPE_INFO,new Tuple2<>("hello",1));
}
