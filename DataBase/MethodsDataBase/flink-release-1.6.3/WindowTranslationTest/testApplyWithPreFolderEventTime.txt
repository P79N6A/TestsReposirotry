@Test @SuppressWarnings("rawtypes") public void testApplyWithPreFolderEventTime() throws Exception {
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.setStreamTimeCharacteristic(TimeCharacteristic.IngestionTime);
  DataStream<Tuple2<String,Integer>> source=env.fromElements(Tuple2.of("hello",1),Tuple2.of("hello",2));
  DataStream<Tuple3<String,String,Integer>> window=source.keyBy(new TupleKeySelector()).window(TumblingEventTimeWindows.of(Time.of(1,TimeUnit.SECONDS))).apply(new Tuple3<>("","",0),new DummyFolder(),new WindowFunction<Tuple3<String,String,Integer>,Tuple3<String,String,Integer>,String,TimeWindow>(){
    private static final long serialVersionUID=1L;
    @Override public void apply(    String key,    TimeWindow window,    Iterable<Tuple3<String,String,Integer>> values,    Collector<Tuple3<String,String,Integer>> out) throws Exception {
      for (      Tuple3<String,String,Integer> in : values) {
        out.collect(new Tuple3<>(in.f0,in.f1,in.f2));
      }
    }
  }
);
  OneInputTransformation<Tuple2<String,Integer>,Tuple3<String,String,Integer>> transform=(OneInputTransformation<Tuple2<String,Integer>,Tuple3<String,String,Integer>>)window.getTransformation();
  OneInputStreamOperator<Tuple2<String,Integer>,Tuple3<String,String,Integer>> operator=transform.getOperator();
  Assert.assertTrue(operator instanceof WindowOperator);
  WindowOperator<String,Tuple2<String,Integer>,?,?,?> winOperator=(WindowOperator<String,Tuple2<String,Integer>,?,?,?>)operator;
  Assert.assertTrue(winOperator.getTrigger() instanceof EventTimeTrigger);
  Assert.assertTrue(winOperator.getWindowAssigner() instanceof TumblingEventTimeWindows);
  Assert.assertTrue(winOperator.getStateDescriptor() instanceof FoldingStateDescriptor);
  processElementAndEnsureOutput(winOperator,winOperator.getKeySelector(),BasicTypeInfo.STRING_TYPE_INFO,new Tuple2<>("hello",1));
}
