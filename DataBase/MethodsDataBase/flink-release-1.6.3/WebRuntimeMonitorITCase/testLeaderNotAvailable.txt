@Test public void testLeaderNotAvailable() throws Exception {
  final Deadline deadline=TEST_TIMEOUT.fromNow();
  ActorSystem actorSystem=null;
  WebRuntimeMonitor webRuntimeMonitor=null;
  try (TestingServer zooKeeper=new TestingServer()){
    File logDir=temporaryFolder.newFolder();
    Path logFile=Files.createFile(new File(logDir,"jobmanager.log").toPath());
    Files.createFile(new File(logDir,"jobmanager.out").toPath());
    final Configuration config=new Configuration();
    config.setInteger(WebOptions.PORT,0);
    config.setString(WebOptions.LOG_PATH,logFile.toString());
    config.setString(HighAvailabilityOptions.HA_MODE,"ZOOKEEPER");
    config.setString(HighAvailabilityOptions.HA_ZOOKEEPER_QUORUM,zooKeeper.getConnectString());
    actorSystem=AkkaUtils.createDefaultActorSystem();
    webRuntimeMonitor=new WebRuntimeMonitor(config,mock(LeaderRetrievalService.class),new AkkaJobManagerRetriever(actorSystem,TIMEOUT,0,Time.milliseconds(50L)),new AkkaQueryServiceRetriever(actorSystem,TIMEOUT),TIMEOUT,TestingUtils.defaultScheduledExecutor());
    webRuntimeMonitor.start();
    try (HttpTestClient client=new HttpTestClient("localhost",webRuntimeMonitor.getServerPort())){
      client.sendGetRequest("index.html",deadline.timeLeft());
      HttpTestClient.SimpleHttpResponse response=client.getNextResponse();
      assertEquals(HttpResponseStatus.SERVICE_UNAVAILABLE,response.getStatus());
      assertEquals("application/json; charset=UTF-8",response.getType());
      assertTrue(response.getContent().contains("refresh"));
    }
   }
  finally {
    if (actorSystem != null) {
      actorSystem.shutdown();
    }
    if (webRuntimeMonitor != null) {
      webRuntimeMonitor.stop();
    }
  }
}
