/** 
 * Tests that we can release nested slots from the leaves onwards
 */
@Test public void testNestedSlotRelease() throws Exception {
  TestingAllocatedSlotActions testingAllocatedSlotActions=new TestingAllocatedSlotActions();
  final CompletableFuture<SlotRequestId> releasedSlotFuture=new CompletableFuture<>();
  testingAllocatedSlotActions.setReleaseSlotConsumer(tuple3 -> releasedSlotFuture.complete(tuple3.f0));
  final SlotSharingManager slotSharingManager=new SlotSharingManager(SLOT_SHARING_GROUP_ID,testingAllocatedSlotActions,SLOT_OWNER);
  SlotRequestId rootSlotRequestId=new SlotRequestId();
  SlotRequestId allocatedSlotRequestId=new SlotRequestId();
  SlotSharingManager.MultiTaskSlot rootSlot=slotSharingManager.createRootSlot(rootSlotRequestId,new CompletableFuture<>(),allocatedSlotRequestId);
  SlotRequestId singleTaskSlotRequestId=new SlotRequestId();
  SlotSharingManager.SingleTaskSlot singleTaskSlot=rootSlot.allocateSingleTaskSlot(singleTaskSlotRequestId,new AbstractID(),Locality.LOCAL);
  SlotRequestId multiTaskSlotRequestId=new SlotRequestId();
  SlotSharingManager.MultiTaskSlot multiTaskSlot=rootSlot.allocateMultiTaskSlot(multiTaskSlotRequestId,new AbstractID());
  CompletableFuture<LogicalSlot> singleTaskSlotFuture=singleTaskSlot.getLogicalSlotFuture();
  assertTrue(slotSharingManager.contains(rootSlotRequestId));
  assertTrue(slotSharingManager.contains(singleTaskSlotRequestId));
  assertFalse(singleTaskSlotFuture.isDone());
  FlinkException testException=new FlinkException("Test exception");
  singleTaskSlot.release(testException);
  assertTrue(singleTaskSlotFuture.isCompletedExceptionally());
  assertFalse(slotSharingManager.contains(singleTaskSlotRequestId));
  assertTrue(slotSharingManager.contains(rootSlotRequestId));
  multiTaskSlot.release(testException);
  assertEquals(allocatedSlotRequestId,releasedSlotFuture.get());
  assertFalse(slotSharingManager.contains(rootSlotRequestId));
  assertFalse(slotSharingManager.contains(multiTaskSlotRequestId));
  assertTrue(slotSharingManager.isEmpty());
}
