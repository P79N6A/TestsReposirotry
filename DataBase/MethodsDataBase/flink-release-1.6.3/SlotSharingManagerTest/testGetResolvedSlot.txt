/** 
 * Tests that we can correctly retrieve resolved slots.
 */
@Test public void testGetResolvedSlot(){
  final TestingAllocatedSlotActions allocatedSlotActions=new TestingAllocatedSlotActions();
  SlotSharingManager slotSharingManager=new SlotSharingManager(SLOT_SHARING_GROUP_ID,allocatedSlotActions,SLOT_OWNER);
  SlotSharingManager.MultiTaskSlot rootSlot=slotSharingManager.createRootSlot(new SlotRequestId(),CompletableFuture.completedFuture(new SimpleSlotContext(new AllocationID(),new LocalTaskManagerLocation(),0,new SimpleAckingTaskManagerGateway())),new SlotRequestId());
  AbstractID groupId=new AbstractID();
  SlotSharingManager.MultiTaskSlotLocality resolvedRootSlotLocality=slotSharingManager.getResolvedRootSlot(groupId,LocationPreferenceSchedulingStrategy.getInstance(),SlotProfile.noRequirements());
  assertNotNull(resolvedRootSlotLocality);
  assertEquals(Locality.UNCONSTRAINED,resolvedRootSlotLocality.getLocality());
  assertEquals(rootSlot.getSlotRequestId(),resolvedRootSlotLocality.getMultiTaskSlot().getSlotRequestId());
  SlotSharingManager.MultiTaskSlot resolvedRootSlot=resolvedRootSlotLocality.getMultiTaskSlot();
  resolvedRootSlot.allocateSingleTaskSlot(new SlotRequestId(),groupId,resolvedRootSlotLocality.getLocality());
  SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1=slotSharingManager.getResolvedRootSlot(groupId,LocationPreferenceSchedulingStrategy.getInstance(),SlotProfile.noRequirements());
  assertNull(resolvedRootSlot1);
}
