/** 
 * Tests that the location preferences are honoured when looking for a resolved slot.
 */
@Test public void testGetResolvedSlotWithLocationPreferences(){
  final TestingAllocatedSlotActions allocatedSlotActions=new TestingAllocatedSlotActions();
  SlotSharingManager slotSharingManager=new SlotSharingManager(SLOT_SHARING_GROUP_ID,allocatedSlotActions,SLOT_OWNER);
  SlotSharingManager.MultiTaskSlot rootSlot1=slotSharingManager.createRootSlot(new SlotRequestId(),CompletableFuture.completedFuture(new SimpleSlotContext(new AllocationID(),new LocalTaskManagerLocation(),0,new SimpleAckingTaskManagerGateway())),new SlotRequestId());
  LocalTaskManagerLocation taskManagerLocation=new LocalTaskManagerLocation();
  SlotSharingManager.MultiTaskSlot rootSlot2=slotSharingManager.createRootSlot(new SlotRequestId(),CompletableFuture.completedFuture(new SimpleSlotContext(new AllocationID(),taskManagerLocation,0,new SimpleAckingTaskManagerGateway())),new SlotRequestId());
  AbstractID groupId=new AbstractID();
  SlotProfile slotProfile=SlotProfile.preferredLocality(ResourceProfile.UNKNOWN,Collections.singleton(taskManagerLocation));
  SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot1=slotSharingManager.getResolvedRootSlot(groupId,LocationPreferenceSchedulingStrategy.getInstance(),slotProfile);
  assertNotNull(resolvedRootSlot1);
  assertEquals(Locality.LOCAL,resolvedRootSlot1.getLocality());
  assertEquals(rootSlot2.getSlotRequestId(),resolvedRootSlot1.getMultiTaskSlot().getSlotRequestId());
  resolvedRootSlot1.getMultiTaskSlot().allocateSingleTaskSlot(new SlotRequestId(),groupId,resolvedRootSlot1.getLocality());
  SlotSharingManager.MultiTaskSlotLocality resolvedRootSlot2=slotSharingManager.getResolvedRootSlot(groupId,LocationPreferenceSchedulingStrategy.getInstance(),slotProfile);
  assertNotNull(resolvedRootSlot2);
  assertNotSame(Locality.LOCAL,(resolvedRootSlot2.getLocality()));
  assertEquals(rootSlot1.getSlotRequestId(),resolvedRootSlot2.getMultiTaskSlot().getSlotRequestId());
}
