/** 
 * Tests that we can create nested slots.
 */
@Test public void testNestedSlotCreation(){
  final TestingAllocatedSlotActions allocatedSlotActions=new TestingAllocatedSlotActions();
  final SlotSharingManager slotSharingManager=new SlotSharingManager(SLOT_SHARING_GROUP_ID,allocatedSlotActions,SLOT_OWNER);
  SlotSharingManager.MultiTaskSlot rootSlot=slotSharingManager.createRootSlot(new SlotRequestId(),new CompletableFuture<>(),new SlotRequestId());
  AbstractID singleTaskSlotGroupId=new AbstractID();
  SlotRequestId singleTaskSlotRequestId=new SlotRequestId();
  SlotSharingManager.SingleTaskSlot singleTaskSlot=rootSlot.allocateSingleTaskSlot(singleTaskSlotRequestId,singleTaskSlotGroupId,Locality.LOCAL);
  AbstractID multiTaskSlotGroupId=new AbstractID();
  SlotRequestId multiTaskSlotRequestId=new SlotRequestId();
  SlotSharingManager.MultiTaskSlot multiTaskSlot=rootSlot.allocateMultiTaskSlot(multiTaskSlotRequestId,multiTaskSlotGroupId);
  assertTrue(Objects.equals(singleTaskSlotRequestId,singleTaskSlot.getSlotRequestId()));
  assertTrue(Objects.equals(multiTaskSlotRequestId,multiTaskSlot.getSlotRequestId()));
  assertTrue(rootSlot.contains(singleTaskSlotGroupId));
  assertTrue(rootSlot.contains(multiTaskSlotGroupId));
  assertTrue(slotSharingManager.contains(singleTaskSlotRequestId));
  assertTrue(slotSharingManager.contains(multiTaskSlotRequestId));
}
