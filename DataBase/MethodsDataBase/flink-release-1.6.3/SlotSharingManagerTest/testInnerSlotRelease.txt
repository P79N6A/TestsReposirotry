/** 
 * Tests that we can release inner slots and that this triggers the slot release for all its children.
 */
@Test public void testInnerSlotRelease(){
  final TestingAllocatedSlotActions allocatedSlotActions=new TestingAllocatedSlotActions();
  final SlotSharingManager slotSharingManager=new SlotSharingManager(SLOT_SHARING_GROUP_ID,allocatedSlotActions,SLOT_OWNER);
  SlotSharingManager.MultiTaskSlot rootSlot=slotSharingManager.createRootSlot(new SlotRequestId(),new CompletableFuture<>(),new SlotRequestId());
  SlotSharingManager.MultiTaskSlot multiTaskSlot=rootSlot.allocateMultiTaskSlot(new SlotRequestId(),new AbstractID());
  SlotSharingManager.SingleTaskSlot singleTaskSlot1=multiTaskSlot.allocateSingleTaskSlot(new SlotRequestId(),new AbstractID(),Locality.LOCAL);
  SlotSharingManager.MultiTaskSlot multiTaskSlot1=multiTaskSlot.allocateMultiTaskSlot(new SlotRequestId(),new AbstractID());
  assertTrue(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()));
  assertTrue(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()));
  assertTrue(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()));
  multiTaskSlot.release(new FlinkException("Test exception"));
  assertFalse(slotSharingManager.contains(multiTaskSlot1.getSlotRequestId()));
  assertFalse(slotSharingManager.contains(singleTaskSlot1.getSlotRequestId()));
  assertFalse(slotSharingManager.contains(multiTaskSlot.getSlotRequestId()));
  assertTrue(singleTaskSlot1.getLogicalSlotFuture().isCompletedExceptionally());
}
