/** 
 * Verifies resilience to serializer deserialization failures when writing and reading serializer and config snapshot pairs.
 */
@Test public void testSerializerAndConfigPairsSerializationWithSerializerDeserializationFailures() throws Exception {
  List<Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>> serializersAndConfigs=Arrays.asList(new Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>(IntSerializer.INSTANCE,IntSerializer.INSTANCE.snapshotConfiguration()),new Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>(DoubleSerializer.INSTANCE,DoubleSerializer.INSTANCE.snapshotConfiguration()));
  byte[] serializedSerializersAndConfigs;
  try (ByteArrayOutputStream out=new ByteArrayOutputStream()){
    TypeSerializerSerializationUtil.writeSerializersAndConfigsWithResilience(new DataOutputViewStreamWrapper(out),serializersAndConfigs);
    serializedSerializersAndConfigs=out.toByteArray();
  }
   Set<String> cnfThrowingClassnames=new HashSet<>();
  cnfThrowingClassnames.add(IntSerializer.class.getName());
  cnfThrowingClassnames.add(DoubleSerializer.class.getName());
  List<Tuple2<TypeSerializer<?>,TypeSerializerConfigSnapshot>> restored;
  try (ByteArrayInputStream in=new ByteArrayInputStream(serializedSerializersAndConfigs)){
    restored=TypeSerializerSerializationUtil.readSerializersAndConfigsWithResilience(new DataInputViewStreamWrapper(in),new ArtificialCNFExceptionThrowingClassLoader(Thread.currentThread().getContextClassLoader(),cnfThrowingClassnames));
  }
   Assert.assertEquals(2,restored.size());
  Assert.assertTrue(restored.get(0).f0 instanceof UnloadableDummyTypeSerializer);
  Assert.assertEquals(IntSerializer.INSTANCE.snapshotConfiguration(),restored.get(0).f1);
  Assert.assertTrue(restored.get(1).f0 instanceof UnloadableDummyTypeSerializer);
  Assert.assertEquals(DoubleSerializer.INSTANCE.snapshotConfiguration(),restored.get(1).f1);
}
