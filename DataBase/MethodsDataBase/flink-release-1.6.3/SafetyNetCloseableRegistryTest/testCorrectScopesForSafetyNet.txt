@Test public void testCorrectScopesForSafetyNet() throws Exception {
  CheckedThread t1=new CheckedThread(){
    @Override public void go() throws Exception {
      try {
        FileSystem fs1=FileSystem.getLocalFileSystem();
        Assert.assertFalse(fs1 instanceof SafetyNetWrapperFileSystem);
        FileSystemSafetyNet.initializeSafetyNetForThread();
        fs1=FileSystem.getLocalFileSystem();
        Assert.assertTrue(fs1 instanceof SafetyNetWrapperFileSystem);
        Path tmp=new Path(tmpFolder.newFolder().toURI().toString(),"test_file");
        try (FSDataOutputStream stream=fs1.create(tmp,FileSystem.WriteMode.NO_OVERWRITE)){
          CheckedThread t2=new CheckedThread(){
            @Override public void go(){
              FileSystem fs2=FileSystem.getLocalFileSystem();
              Assert.assertFalse(fs2 instanceof SafetyNetWrapperFileSystem);
              FileSystemSafetyNet.initializeSafetyNetForThread();
              fs2=FileSystem.getLocalFileSystem();
              Assert.assertTrue(fs2 instanceof SafetyNetWrapperFileSystem);
              FileSystemSafetyNet.closeSafetyNetAndGuardedResourcesForThread();
              fs2=FileSystem.getLocalFileSystem();
              Assert.assertFalse(fs2 instanceof SafetyNetWrapperFileSystem);
            }
          }
;
          t2.start();
          t2.sync();
          stream.write(42);
          FileSystemSafetyNet.closeSafetyNetAndGuardedResourcesForThread();
          try {
            stream.write(43);
            Assert.fail();
          }
 catch (          IOException ignore) {
          }
          fs1=FileSystem.getLocalFileSystem();
          Assert.assertFalse(fs1 instanceof SafetyNetWrapperFileSystem);
        }
  finally {
          fs1.delete(tmp,false);
        }
      }
 catch (      Exception e) {
        Assert.fail(ExceptionUtils.stringifyException(e));
      }
    }
  }
;
  t1.start();
  t1.sync();
}
