/** 
 * Tests that resources are filtered according to the framework role (if any).
 */
@Test public void testReservationFiltering(){
  MesosResourceAllocation allocation;
  allocation=new MesosResourceAllocation(resources(cpus(UNRESERVED_ROLE,1.0),ports(UNRESERVED_ROLE,range(80,80))));
  Assert.assertEquals(resources(cpus(UNRESERVED_ROLE,1.0)),allocation.takeScalar("cpus",1.0,AS_NO_ROLE));
  Assert.assertEquals(resources(ports(UNRESERVED_ROLE,range(80,80))),allocation.takeRanges("ports",1,AS_NO_ROLE));
  allocation=new MesosResourceAllocation(resources(cpus(UNRESERVED_ROLE,1.0),ports(UNRESERVED_ROLE,range(80,80))));
  Assert.assertEquals(resources(cpus(UNRESERVED_ROLE,1.0)),allocation.takeScalar("cpus",1.0,AS_ROLE_A));
  Assert.assertEquals(resources(ports(UNRESERVED_ROLE,range(80,80))),allocation.takeRanges("ports",1,AS_ROLE_A));
  allocation=new MesosResourceAllocation(resources(cpus(ROLE_A,1.0),ports(ROLE_A,range(80,80))));
  Assert.assertEquals(resources(),allocation.takeScalar("cpus",1.0,AS_NO_ROLE));
  Assert.assertEquals(resources(),allocation.takeRanges("ports",1,AS_NO_ROLE));
  Assert.assertEquals(resources(cpus(ROLE_A,1.0)),allocation.takeScalar("cpus",1.0,AS_ROLE_A));
  Assert.assertEquals(resources(ports(ROLE_A,range(80,80))),allocation.takeRanges("ports",1,AS_ROLE_A));
  allocation=new MesosResourceAllocation(resources(cpus(ROLE_B,1.0),ports(ROLE_B,range(80,80))));
  Assert.assertEquals(resources(),allocation.takeScalar("cpus",1.0,AS_NO_ROLE));
  Assert.assertEquals(resources(),allocation.takeRanges("ports",1,AS_NO_ROLE));
  Assert.assertEquals(resources(),allocation.takeScalar("cpus",1.0,AS_ROLE_A));
  Assert.assertEquals(resources(),allocation.takeRanges("ports",1,AS_ROLE_A));
}
