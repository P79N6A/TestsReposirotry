/** 
 * Tests range resource accounting.
 */
@Test public void testRangeResourceAccounting(){
  MesosResourceAllocation allocation;
  List<Protos.Resource> ports=resources(ports(ROLE_A,range(80,81),range(443,444)),ports(UNRESERVED_ROLE,range(1024,1025),range(8080,8081)));
  allocation=new MesosResourceAllocation(ports);
  Assert.assertEquals(resources(ports(ROLE_A,range(80,80))),allocation.takeRanges("ports",1,AS_ROLE_A));
  Assert.assertEquals(resources(ports(ROLE_A,range(81,81),range(443,444)),ports(UNRESERVED_ROLE,range(1024,1025),range(8080,8081))),allocation.getRemaining());
  allocation=new MesosResourceAllocation(ports);
  Assert.assertEquals(resources(ports(ROLE_A,range(80,81))),allocation.takeRanges("ports",2,AS_ROLE_A));
  Assert.assertEquals(resources(ports(ROLE_A,range(443,444)),ports(UNRESERVED_ROLE,range(1024,1025),range(8080,8081))),allocation.getRemaining());
  allocation=new MesosResourceAllocation(ports);
  Assert.assertEquals(resources(ports(ROLE_A,range(80,81),range(443,443))),allocation.takeRanges("ports",3,AS_ROLE_A));
  Assert.assertEquals(resources(ports(ROLE_A,range(444,444)),ports(UNRESERVED_ROLE,range(1024,1025),range(8080,8081))),allocation.getRemaining());
  allocation=new MesosResourceAllocation(ports);
  Assert.assertEquals(resources(ports(ROLE_A,range(80,81),range(443,444))),allocation.takeRanges("ports",4,AS_ROLE_A));
  Assert.assertEquals(resources(ports(UNRESERVED_ROLE,range(1024,1025),range(8080,8081))),allocation.getRemaining());
  allocation=new MesosResourceAllocation(ports);
  Assert.assertEquals(resources(ports(ROLE_A,range(80,81),range(443,444)),ports(UNRESERVED_ROLE,range(1024,1024))),allocation.takeRanges("ports",5,AS_ROLE_A));
  Assert.assertEquals(resources(ports(UNRESERVED_ROLE,range(1025,1025),range(8080,8081))),allocation.getRemaining());
}
