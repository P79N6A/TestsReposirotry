@Test public void testKeyQuerying() throws Exception {
class KeyQueryingProcessFunction extends KeyedProcessFunction<Integer,Tuple2<Integer,String>,String> {
    @Override public void processElement(    Tuple2<Integer,String> value,    Context ctx,    Collector<String> out) throws Exception {
      assertTrue("Did not get expected key.",ctx.getCurrentKey().equals(value.f0));
      out.collect(value.f1);
    }
  }
  KeyedProcessOperator<Integer,Tuple2<Integer,String>,String> operator=new KeyedProcessOperator<>(new KeyQueryingProcessFunction());
  try (OneInputStreamOperatorTestHarness<Tuple2<Integer,String>,String> testHarness=new KeyedOneInputStreamOperatorTestHarness<>(operator,(in) -> in.f0,BasicTypeInfo.INT_TYPE_INFO)){
    testHarness.setup();
    testHarness.open();
    testHarness.processElement(new StreamRecord<>(Tuple2.of(5,"5"),12L));
    testHarness.processElement(new StreamRecord<>(Tuple2.of(42,"42"),13L));
    ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
    expectedOutput.add(new StreamRecord<>("5",12L));
    expectedOutput.add(new StreamRecord<>("42",13L));
    TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  }
 }
