/** 
 * Tests adding a job and finding out its leader id
 */
@Test(timeout=10000) public void testAddingJob() throws Exception {
  final JobID jobId=new JobID();
  final String address="foobar";
  final JobMasterId leaderId=JobMasterId.generate();
  TestingHighAvailabilityServices highAvailabilityServices=new TestingHighAvailabilityServices();
  SettableLeaderRetrievalService leaderRetrievalService=new SettableLeaderRetrievalService(null,null);
  highAvailabilityServices.setJobMasterLeaderRetriever(jobId,leaderRetrievalService);
  ScheduledExecutor scheduledExecutor=mock(ScheduledExecutor.class);
  Time timeout=Time.milliseconds(5000L);
  JobLeaderIdActions jobLeaderIdActions=mock(JobLeaderIdActions.class);
  JobLeaderIdService jobLeaderIdService=new JobLeaderIdService(highAvailabilityServices,scheduledExecutor,timeout);
  jobLeaderIdService.start(jobLeaderIdActions);
  jobLeaderIdService.addJob(jobId);
  CompletableFuture<JobMasterId> leaderIdFuture=jobLeaderIdService.getLeaderId(jobId);
  leaderRetrievalService.notifyListener(address,leaderId.toUUID());
  assertEquals(leaderId,leaderIdFuture.get());
  assertTrue(jobLeaderIdService.containsJob(jobId));
}
