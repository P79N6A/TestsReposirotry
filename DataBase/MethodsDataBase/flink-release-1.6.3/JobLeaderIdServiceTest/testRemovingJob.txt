/** 
 * Tests that removing a job completes the job leader id future exceptionally
 */
@Test(timeout=10000) public void testRemovingJob() throws Exception {
  final JobID jobId=new JobID();
  TestingHighAvailabilityServices highAvailabilityServices=new TestingHighAvailabilityServices();
  SettableLeaderRetrievalService leaderRetrievalService=new SettableLeaderRetrievalService(null,null);
  highAvailabilityServices.setJobMasterLeaderRetriever(jobId,leaderRetrievalService);
  ScheduledExecutor scheduledExecutor=mock(ScheduledExecutor.class);
  Time timeout=Time.milliseconds(5000L);
  JobLeaderIdActions jobLeaderIdActions=mock(JobLeaderIdActions.class);
  JobLeaderIdService jobLeaderIdService=new JobLeaderIdService(highAvailabilityServices,scheduledExecutor,timeout);
  jobLeaderIdService.start(jobLeaderIdActions);
  jobLeaderIdService.addJob(jobId);
  CompletableFuture<JobMasterId> leaderIdFuture=jobLeaderIdService.getLeaderId(jobId);
  jobLeaderIdService.removeJob(jobId);
  assertFalse(jobLeaderIdService.containsJob(jobId));
  try {
    leaderIdFuture.get();
    fail("The leader id future should be completed exceptionally.");
  }
 catch (  ExecutionException ignored) {
  }
}
