/** 
 * Verifies that  {@link RemoteInputChannel#onBuffer(Buffer,int,int)} is called when a{@link BufferResponse} is received.
 */
@Test public void testReceiveBuffer() throws Exception {
  final NetworkBufferPool networkBufferPool=new NetworkBufferPool(10,32);
  final SingleInputGate inputGate=createSingleInputGate();
  final RemoteInputChannel inputChannel=createRemoteInputChannel(inputGate);
  try {
    final BufferPool bufferPool=networkBufferPool.createBufferPool(8,8);
    inputGate.setBufferPool(bufferPool);
    final int numExclusiveBuffers=2;
    inputGate.assignExclusiveSegments(networkBufferPool,numExclusiveBuffers);
    final PartitionRequestClientHandler handler=new PartitionRequestClientHandler();
    handler.addInputChannel(inputChannel);
    final int backlog=2;
    final BufferResponse bufferResponse=createBufferResponse(TestBufferFactory.createBuffer(32),0,inputChannel.getInputChannelId(),backlog);
    handler.channelRead(mock(ChannelHandlerContext.class),bufferResponse);
    assertEquals(1,inputChannel.getNumberOfQueuedBuffers());
  }
  finally {
    inputGate.releaseAllResources();
    networkBufferPool.destroyAllBufferPools();
    networkBufferPool.destroy();
  }
}
