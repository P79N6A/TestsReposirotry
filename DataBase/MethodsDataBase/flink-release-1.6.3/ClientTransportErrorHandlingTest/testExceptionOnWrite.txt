/** 
 * Verifies that failed client requests via  {@link PartitionRequestClient} are correctlyattributed to the respective  {@link RemoteInputChannel}.
 */
@Test public void testExceptionOnWrite() throws Exception {
  NettyProtocol protocol=new NettyProtocol(mock(ResultPartitionProvider.class),mock(TaskEventDispatcher.class),true){
    @Override public ChannelHandler[] getServerChannelHandlers(){
      return new ChannelHandler[0];
    }
  }
;
  NettyServerAndClient serverAndClient=initServerAndClient(protocol,createConfig());
  Channel ch=connect(serverAndClient);
  NetworkClientHandler handler=getClientHandler(ch);
  ch.pipeline().addFirst(new ChannelOutboundHandlerAdapter(){
    int writeNum=0;
    @Override public void write(    ChannelHandlerContext ctx,    Object msg,    ChannelPromise promise) throws Exception {
      if (writeNum >= 1) {
        throw new RuntimeException("Expected test exception.");
      }
      writeNum++;
      ctx.write(msg,promise);
    }
  }
);
  PartitionRequestClient requestClient=new PartitionRequestClient(ch,handler,mock(ConnectionID.class),mock(PartitionRequestClientFactory.class));
  RemoteInputChannel[] rich=new RemoteInputChannel[]{createRemoteInputChannel(),createRemoteInputChannel()};
  final CountDownLatch sync=new CountDownLatch(1);
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      sync.countDown();
      return null;
    }
  }
).when(rich[1]).onError(isA(LocalTransportException.class));
  ChannelFuture f=requestClient.requestSubpartition(new ResultPartitionID(),0,rich[0],0);
  assertTrue(f.await().isSuccess());
  f=requestClient.requestSubpartition(new ResultPartitionID(),0,rich[1],0);
  assertFalse(f.await().isSuccess());
  verify(rich[0],times(0)).onError(any(LocalTransportException.class));
  if (!sync.await(TestingUtils.TESTING_DURATION().toMillis(),TimeUnit.MILLISECONDS)) {
    fail("Timed out after waiting for " + TestingUtils.TESTING_DURATION().toMillis() + " ms to be notified about the channel error.");
  }
  shutdown(serverAndClient);
}
