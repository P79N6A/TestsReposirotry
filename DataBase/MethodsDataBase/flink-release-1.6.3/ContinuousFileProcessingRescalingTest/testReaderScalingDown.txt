@Test public void testReaderScalingDown() throws Exception {
  final OneShotLatch waitingLatch=new OneShotLatch();
  final OneShotLatch triggerLatch1=new OneShotLatch();
  BlockingFileInputFormat format1=new BlockingFileInputFormat(triggerLatch1,waitingLatch,new Path("test"),20,5);
  FileInputSplit[] splits=format1.createInputSplits(2);
  OneInputStreamOperatorTestHarness<TimestampedFileInputSplit,String> testHarness1=getTestHarness(format1,2,0);
  testHarness1.open();
  testHarness1.processElement(new StreamRecord<>(getTimestampedSplit(0,splits[0])));
  if (!triggerLatch1.isTriggered()) {
    triggerLatch1.await();
  }
  final OneShotLatch triggerLatch2=new OneShotLatch();
  BlockingFileInputFormat format2=new BlockingFileInputFormat(triggerLatch2,waitingLatch,new Path("test"),20,15);
  OneInputStreamOperatorTestHarness<TimestampedFileInputSplit,String> testHarness2=getTestHarness(format2,2,1);
  testHarness2.open();
  testHarness2.processElement(new StreamRecord<>(getTimestampedSplit(0,splits[1])));
  if (!triggerLatch2.isTriggered()) {
    triggerLatch2.await();
  }
  testHarness1.getOutput().clear();
  testHarness2.getOutput().clear();
  OperatorSubtaskState mergedState=AbstractStreamOperatorTestHarness.repackageState(testHarness2.snapshot(0,0),testHarness1.snapshot(0,0));
  final OneShotLatch wLatch=new OneShotLatch();
  final OneShotLatch tLatch=new OneShotLatch();
  BlockingFileInputFormat format=new BlockingFileInputFormat(wLatch,tLatch,new Path("test"),20,5);
  OneInputStreamOperatorTestHarness<TimestampedFileInputSplit,String> testHarness=getTestHarness(format,1,0);
  testHarness.initializeState(mergedState);
  testHarness.open();
  wLatch.trigger();
  tLatch.trigger();
  waitingLatch.trigger();
synchronized (testHarness1.getCheckpointLock()) {
    testHarness1.close();
  }
synchronized (testHarness2.getCheckpointLock()) {
    testHarness2.close();
  }
synchronized (testHarness.getCheckpointLock()) {
    testHarness.close();
  }
  Queue<Object> expectedResult=new ArrayDeque<>();
  putElementsInQ(expectedResult,testHarness1.getOutput());
  putElementsInQ(expectedResult,testHarness2.getOutput());
  Queue<Object> actualResult=new ArrayDeque<>();
  putElementsInQ(actualResult,testHarness.getOutput());
  Assert.assertEquals(20,actualResult.size());
  Assert.assertArrayEquals(expectedResult.toArray(),actualResult.toArray());
}
