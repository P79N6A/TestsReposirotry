@Test public void testReaderScalingUp() throws Exception {
  final OneShotLatch waitingLatch1=new OneShotLatch();
  final OneShotLatch triggerLatch1=new OneShotLatch();
  BlockingFileInputFormat format1=new BlockingFileInputFormat(triggerLatch1,waitingLatch1,new Path("test"),20,5);
  FileInputSplit[] splits=format1.createInputSplits(2);
  OneInputStreamOperatorTestHarness<TimestampedFileInputSplit,String> testHarness1=getTestHarness(format1,1,0);
  testHarness1.open();
  testHarness1.processElement(new StreamRecord<>(getTimestampedSplit(0,splits[0])));
  testHarness1.processElement(new StreamRecord<>(getTimestampedSplit(1,splits[1])));
  if (!triggerLatch1.isTriggered()) {
    triggerLatch1.await();
  }
  OperatorSubtaskState snapshot=testHarness1.snapshot(0,0);
  testHarness1.getOutput().clear();
  waitingLatch1.trigger();
  final OneShotLatch triggerLatch2=new OneShotLatch();
  final OneShotLatch waitingLatch2=new OneShotLatch();
  BlockingFileInputFormat format2=new BlockingFileInputFormat(triggerLatch2,waitingLatch2,new Path("test"),20,15);
  OneInputStreamOperatorTestHarness<TimestampedFileInputSplit,String> testHarness2=getTestHarness(format2,2,0);
  testHarness2.setup();
  testHarness2.initializeState(snapshot);
  testHarness2.open();
  BlockingFileInputFormat format3=new BlockingFileInputFormat(triggerLatch2,waitingLatch2,new Path("test"),20,15);
  OneInputStreamOperatorTestHarness<TimestampedFileInputSplit,String> testHarness3=getTestHarness(format3,2,1);
  testHarness3.setup();
  testHarness3.initializeState(snapshot);
  testHarness3.open();
  triggerLatch2.trigger();
  waitingLatch2.trigger();
synchronized (testHarness1.getCheckpointLock()) {
    testHarness1.close();
  }
synchronized (testHarness2.getCheckpointLock()) {
    testHarness2.close();
  }
synchronized (testHarness3.getCheckpointLock()) {
    testHarness3.close();
  }
  Queue<Object> expectedResult=new ArrayDeque<>();
  putElementsInQ(expectedResult,testHarness1.getOutput());
  Queue<Object> actualResult=new ArrayDeque<>();
  putElementsInQ(actualResult,testHarness2.getOutput());
  putElementsInQ(actualResult,testHarness3.getOutput());
  Assert.assertEquals(35,actualResult.size());
  Assert.assertArrayEquals(expectedResult.toArray(),actualResult.toArray());
}
