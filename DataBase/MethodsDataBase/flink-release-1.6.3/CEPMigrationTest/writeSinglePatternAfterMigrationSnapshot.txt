/** 
 * Manually run this to write binary snapshot data.
 */
@Ignore @Test public void writeSinglePatternAfterMigrationSnapshot() throws Exception {
  KeySelector<Event,Integer> keySelector=new KeySelector<Event,Integer>(){
    private static final long serialVersionUID=-4873366487571254798L;
    @Override public Integer getKey(    Event value) throws Exception {
      return value.getId();
    }
  }
;
  final Event startEvent1=new Event(42,"start",1.0);
  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness=new KeyedOneInputStreamOperatorTestHarness<>(getKeyedCepOpearator(false,new SinglePatternNFAFactory()),keySelector,BasicTypeInfo.INT_TYPE_INFO);
  try {
    harness.setup();
    harness.open();
    harness.processWatermark(new Watermark(5));
    OperatorSubtaskState snapshot=harness.snapshot(0L,0L);
    OperatorSnapshotUtil.writeStateHandle(snapshot,"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot");
  }
  finally {
    harness.close();
  }
}
