/** 
 * Manually run this to write binary snapshot data.
 */
@Ignore @Test public void writeAfterBranchingPatternSnapshot() throws Exception {
  KeySelector<Event,Integer> keySelector=new KeySelector<Event,Integer>(){
    private static final long serialVersionUID=-4873366487571254798L;
    @Override public Integer getKey(    Event value) throws Exception {
      return value.getId();
    }
  }
;
  final Event startEvent=new Event(42,"start",1.0);
  final SubEvent middleEvent1=new SubEvent(42,"foo1",1.0,10.0);
  final SubEvent middleEvent2=new SubEvent(42,"foo2",2.0,10.0);
  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness=new KeyedOneInputStreamOperatorTestHarness<>(getKeyedCepOpearator(false,new NFAFactory()),keySelector,BasicTypeInfo.INT_TYPE_INFO);
  try {
    harness.setup();
    harness.open();
    harness.processElement(new StreamRecord<Event>(startEvent,1));
    harness.processElement(new StreamRecord<Event>(new Event(42,"foobar",1.0),2));
    harness.processElement(new StreamRecord<Event>(new SubEvent(42,"barfoo",1.0,5.0),3));
    harness.processElement(new StreamRecord<Event>(middleEvent1,2));
    harness.processElement(new StreamRecord<Event>(middleEvent2,3));
    harness.processWatermark(new Watermark(5));
    OperatorSubtaskState snapshot=harness.snapshot(0L,0L);
    OperatorSnapshotUtil.writeStateHandle(snapshot,"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot");
  }
  finally {
    harness.close();
  }
}
