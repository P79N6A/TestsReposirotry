@Test public void testPartitionsFewerThanConsumersFixedPartitions(){
  try {
    List<KafkaTopicPartition> mockGetAllPartitionsForTopicsReturn=Arrays.asList(new KafkaTopicPartition(TEST_TOPIC,0),new KafkaTopicPartition(TEST_TOPIC,1),new KafkaTopicPartition(TEST_TOPIC,2),new KafkaTopicPartition(TEST_TOPIC,3));
    final Set<KafkaTopicPartition> allPartitions=new HashSet<>();
    allPartitions.addAll(mockGetAllPartitionsForTopicsReturn);
    final int numConsumers=2 * mockGetAllPartitionsForTopicsReturn.size() + 3;
    int startIndex=KafkaTopicPartitionAssigner.assign(mockGetAllPartitionsForTopicsReturn.get(0),numConsumers);
    for (int subtaskIndex=0; subtaskIndex < numConsumers; subtaskIndex++) {
      TestPartitionDiscoverer partitionDiscoverer=new TestPartitionDiscoverer(topicsDescriptor,subtaskIndex,numConsumers,TestPartitionDiscoverer.createMockGetAllTopicsSequenceFromFixedReturn(Collections.singletonList(TEST_TOPIC)),TestPartitionDiscoverer.createMockGetAllPartitionsFromTopicsSequenceFromFixedReturn(mockGetAllPartitionsForTopicsReturn));
      partitionDiscoverer.open();
      List<KafkaTopicPartition> initialDiscovery=partitionDiscoverer.discoverPartitions();
      assertTrue(initialDiscovery.size() <= 1);
      for (      KafkaTopicPartition p : initialDiscovery) {
        assertTrue(allPartitions.remove(p));
        assertEquals(getExpectedSubtaskIndex(p,startIndex,numConsumers),subtaskIndex);
      }
      List<KafkaTopicPartition> secondDiscovery=partitionDiscoverer.discoverPartitions();
      List<KafkaTopicPartition> thirdDiscovery=partitionDiscoverer.discoverPartitions();
      assertEquals(0,secondDiscovery.size());
      assertEquals(0,thirdDiscovery.size());
    }
    assertTrue(allPartitions.isEmpty());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
