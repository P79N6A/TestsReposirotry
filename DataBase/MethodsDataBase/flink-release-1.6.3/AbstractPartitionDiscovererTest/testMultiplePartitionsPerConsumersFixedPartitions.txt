@Test public void testMultiplePartitionsPerConsumersFixedPartitions(){
  try {
    final int[] partitionIDs={0,1,2,3,4,5,6,7,8,9,10};
    final List<KafkaTopicPartition> mockGetAllPartitionsForTopicsReturn=new ArrayList<>();
    final Set<KafkaTopicPartition> allPartitions=new HashSet<>();
    for (    int p : partitionIDs) {
      KafkaTopicPartition part=new KafkaTopicPartition(TEST_TOPIC,p);
      mockGetAllPartitionsForTopicsReturn.add(part);
      allPartitions.add(part);
    }
    final int numConsumers=3;
    final int minPartitionsPerConsumer=mockGetAllPartitionsForTopicsReturn.size() / numConsumers;
    final int maxPartitionsPerConsumer=mockGetAllPartitionsForTopicsReturn.size() / numConsumers + 1;
    int startIndex=KafkaTopicPartitionAssigner.assign(mockGetAllPartitionsForTopicsReturn.get(0),numConsumers);
    for (int subtaskIndex=0; subtaskIndex < numConsumers; subtaskIndex++) {
      TestPartitionDiscoverer partitionDiscoverer=new TestPartitionDiscoverer(topicsDescriptor,subtaskIndex,numConsumers,TestPartitionDiscoverer.createMockGetAllTopicsSequenceFromFixedReturn(Collections.singletonList(TEST_TOPIC)),TestPartitionDiscoverer.createMockGetAllPartitionsFromTopicsSequenceFromFixedReturn(mockGetAllPartitionsForTopicsReturn));
      partitionDiscoverer.open();
      List<KafkaTopicPartition> initialDiscovery=partitionDiscoverer.discoverPartitions();
      assertTrue(initialDiscovery.size() >= minPartitionsPerConsumer);
      assertTrue(initialDiscovery.size() <= maxPartitionsPerConsumer);
      for (      KafkaTopicPartition p : initialDiscovery) {
        assertTrue(allPartitions.remove(p));
        assertEquals(getExpectedSubtaskIndex(p,startIndex,numConsumers),subtaskIndex);
      }
      List<KafkaTopicPartition> secondDiscovery=partitionDiscoverer.discoverPartitions();
      List<KafkaTopicPartition> thirdDiscovery=partitionDiscoverer.discoverPartitions();
      assertEquals(0,secondDiscovery.size());
      assertEquals(0,thirdDiscovery.size());
    }
    assertTrue(allPartitions.isEmpty());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
