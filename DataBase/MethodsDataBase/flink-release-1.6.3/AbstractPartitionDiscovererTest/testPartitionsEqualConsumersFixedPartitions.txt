@Test public void testPartitionsEqualConsumersFixedPartitions() throws Exception {
  List<KafkaTopicPartition> mockGetAllPartitionsForTopicsReturn=Arrays.asList(new KafkaTopicPartition(TEST_TOPIC,0),new KafkaTopicPartition(TEST_TOPIC,1),new KafkaTopicPartition(TEST_TOPIC,2),new KafkaTopicPartition(TEST_TOPIC,3));
  int numSubtasks=mockGetAllPartitionsForTopicsReturn.size();
  int numConsumers=KafkaTopicPartitionAssigner.assign(mockGetAllPartitionsForTopicsReturn.get(0),numSubtasks);
  for (int subtaskIndex=0; subtaskIndex < mockGetAllPartitionsForTopicsReturn.size(); subtaskIndex++) {
    TestPartitionDiscoverer partitionDiscoverer=new TestPartitionDiscoverer(topicsDescriptor,subtaskIndex,mockGetAllPartitionsForTopicsReturn.size(),TestPartitionDiscoverer.createMockGetAllTopicsSequenceFromFixedReturn(Collections.singletonList(TEST_TOPIC)),TestPartitionDiscoverer.createMockGetAllPartitionsFromTopicsSequenceFromFixedReturn(mockGetAllPartitionsForTopicsReturn));
    partitionDiscoverer.open();
    List<KafkaTopicPartition> initialDiscovery=partitionDiscoverer.discoverPartitions();
    assertEquals(1,initialDiscovery.size());
    assertTrue(contains(mockGetAllPartitionsForTopicsReturn,initialDiscovery.get(0).getPartition()));
    assertEquals(getExpectedSubtaskIndex(initialDiscovery.get(0),numConsumers,numSubtasks),subtaskIndex);
    List<KafkaTopicPartition> secondDiscovery=partitionDiscoverer.discoverPartitions();
    List<KafkaTopicPartition> thirdDiscovery=partitionDiscoverer.discoverPartitions();
    assertEquals(0,secondDiscovery.size());
    assertEquals(0,thirdDiscovery.size());
  }
}
