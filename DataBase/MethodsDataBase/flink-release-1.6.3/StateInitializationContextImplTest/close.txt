@Test public void close() throws Exception {
  int count=0;
  int stopCount=NUM_HANDLES / 2;
  boolean isClosed=false;
  try {
    for (    KeyGroupStatePartitionStreamProvider stateStreamProvider : initializationContext.getRawKeyedStateInputs()) {
      Assert.assertNotNull(stateStreamProvider);
      if (count == stopCount) {
        closableRegistry.close();
        isClosed=true;
      }
      try (InputStream is=stateStreamProvider.getStream()){
        DataInputView div=new DataInputViewStreamWrapper(is);
        try {
          int val=div.readInt();
          Assert.assertEquals(stateStreamProvider.getKeyGroupId(),val);
          if (isClosed) {
            Assert.fail("Close was ignored: stream");
          }
          ++count;
        }
 catch (        IOException ioex) {
          if (!isClosed) {
            throw ioex;
          }
        }
      }
     }
    Assert.fail("Close was ignored: registry");
  }
 catch (  IOException iex) {
    Assert.assertTrue(isClosed);
    Assert.assertEquals(stopCount,count);
  }
}
