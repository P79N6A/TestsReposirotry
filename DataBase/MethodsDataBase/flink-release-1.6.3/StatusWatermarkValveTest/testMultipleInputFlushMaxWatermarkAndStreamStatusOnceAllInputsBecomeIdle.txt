/** 
 * Tests that when all inputs become idle, the max watermark across all channels is correctly "flushed" from the valve, as well as the stream status IDLE marker. <p>This test along with  {@link #testMultipleInputWatermarkAdvancingAsChannelsIndividuallyBecomeIdle}should completely verify that the eventual watermark advancement result when all inputs become idle is independent of the order that the inputs become idle.
 */
@Test public void testMultipleInputFlushMaxWatermarkAndStreamStatusOnceAllInputsBecomeIdle(){
  BufferedValveOutputHandler valveOutput=new BufferedValveOutputHandler();
  StatusWatermarkValve valve=new StatusWatermarkValve(3,valveOutput);
  valve.inputWatermark(new Watermark(10),0);
  valve.inputWatermark(new Watermark(5),1);
  valve.inputWatermark(new Watermark(3),2);
  assertEquals(new Watermark(3),valveOutput.popLastSeenOutput());
  valve.inputStreamStatus(StreamStatus.IDLE,0);
  valve.inputStreamStatus(StreamStatus.IDLE,1);
  assertEquals(null,valveOutput.popLastSeenOutput());
  valve.inputStreamStatus(StreamStatus.IDLE,2);
  assertEquals(new Watermark(10),valveOutput.popLastSeenOutput());
  assertEquals(StreamStatus.IDLE,valveOutput.popLastSeenOutput());
  assertEquals(null,valveOutput.popLastSeenOutput());
}
