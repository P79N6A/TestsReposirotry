/** 
 * Tests that new min watermark is emitted from the valve as soon as the overall new min watermark across inputs advances.
 */
@Test public void testMultipleInputIncreasingWatermarks(){
  BufferedValveOutputHandler valveOutput=new BufferedValveOutputHandler();
  StatusWatermarkValve valve=new StatusWatermarkValve(3,valveOutput);
  valve.inputWatermark(new Watermark(0),0);
  valve.inputWatermark(new Watermark(0),1);
  valve.inputWatermark(new Watermark(0),2);
  assertEquals(new Watermark(0),valveOutput.popLastSeenOutput());
  valve.inputWatermark(new Watermark(12),0);
  valve.inputWatermark(new Watermark(8),2);
  valve.inputWatermark(new Watermark(10),2);
  assertEquals(null,valveOutput.popLastSeenOutput());
  valve.inputWatermark(new Watermark(15),1);
  assertEquals(new Watermark(10),valveOutput.popLastSeenOutput());
  assertEquals(null,valveOutput.popLastSeenOutput());
  valve.inputWatermark(new Watermark(17),2);
  assertEquals(new Watermark(12),valveOutput.popLastSeenOutput());
  assertEquals(null,valveOutput.popLastSeenOutput());
  valve.inputWatermark(new Watermark(20),0);
  assertEquals(new Watermark(15),valveOutput.popLastSeenOutput());
  assertEquals(null,valveOutput.popLastSeenOutput());
}
