@Test public void testCommitAfterRecovery() throws Exception {
  final Path testDir=getBasePathForTest();
  final Path path=new Path(testDir,"part-0");
  final RecoverableWriter initWriter=getNewFileSystemWriter();
  final RecoverableWriter.CommitRecoverable recoverable;
  try (final RecoverableFsDataOutputStream stream=initWriter.open(path)){
    stream.write(testData1.getBytes(StandardCharsets.UTF_8));
    stream.persist();
    stream.persist();
    stream.write(testData2.getBytes(StandardCharsets.UTF_8));
    recoverable=stream.closeForCommit().getRecoverable();
  }
   final byte[] serializedRecoverable=initWriter.getCommitRecoverableSerializer().serialize(recoverable);
  final RecoverableWriter newWriter=getNewFileSystemWriter();
  final SimpleVersionedSerializer<RecoverableWriter.CommitRecoverable> deserializer=newWriter.getCommitRecoverableSerializer();
  final RecoverableWriter.CommitRecoverable recoveredRecoverable=deserializer.deserialize(deserializer.getVersion(),serializedRecoverable);
  final RecoverableFsDataOutputStream.Committer committer=newWriter.recoverForCommit(recoveredRecoverable);
  committer.commitAfterRecovery();
  Map<Path,String> files=getFileContentByPath(testDir);
  Assert.assertEquals(1L,files.size());
  for (  Map.Entry<Path,String> fileContents : files.entrySet()) {
    Assert.assertEquals("part-0",fileContents.getKey().getName());
    Assert.assertEquals(testData1 + testData2,fileContents.getValue());
  }
}
