@Test public void testExceptionInInitializeOnMaster() throws Exception {
  final JobVertex failingJobVertex=new FailingJobVertex("Failing job vertex");
  failingJobVertex.setInvokableClass(NoOpInvokable.class);
  final JobGraph failingJobGraph=new JobGraph("Failing testing job",failingJobVertex);
  ClusterClient<?> client=MINI_CLUSTER_RESOURCE.getClusterClient();
  client.setDetached(detached);
  try {
    client.submitJob(failingJobGraph,JobSubmissionFailsITCase.class.getClassLoader());
    fail("Job submission should have thrown an exception.");
  }
 catch (  Exception e) {
    Optional<Throwable> expectedCause=ExceptionUtils.findThrowable(e,candidate -> "Test exception.".equals(candidate.getMessage()));
    if (!expectedCause.isPresent()) {
      throw e;
    }
  }
  client.setDetached(false);
  client.submitJob(getWorkingJobGraph(),JobSubmissionFailsITCase.class.getClassLoader());
}
