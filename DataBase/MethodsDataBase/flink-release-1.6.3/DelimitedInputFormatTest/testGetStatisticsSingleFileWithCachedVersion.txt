@Test public void testGetStatisticsSingleFileWithCachedVersion() throws IOException {
  final String myString="my mocked line 1\nmy mocked line 2\n";
  final Path tempFile=createTempFilePath(myString);
  final long size=myString.length();
  final long fakeSize=10065;
  DelimitedInputFormat<String> format=new MyTextInputFormat();
  format.setFilePath(tempFile);
  format.configure(new Configuration());
  FileBaseStatistics stats=format.getStatistics(null);
  assertNotNull(stats);
  assertEquals("The file size from the statistics is wrong.",size,stats.getTotalInputSize());
  format=new MyTextInputFormat();
  format.setFilePath(tempFile);
  format.configure(new Configuration());
  FileBaseStatistics newStats=format.getStatistics(stats);
  assertEquals("Statistics object was changed.",newStats,stats);
  format=new MyTextInputFormat();
  format.setFilePath(tempFile);
  format.configure(new Configuration());
  FileBaseStatistics fakeStats=new FileBaseStatistics(stats.getLastModificationTime(),fakeSize,BaseStatistics.AVG_RECORD_BYTES_UNKNOWN);
  BaseStatistics latest=format.getStatistics(fakeStats);
  assertEquals("The file size from the statistics is wrong.",fakeSize,latest.getTotalInputSize());
  format=new MyTextInputFormat();
  format.setFilePath(tempFile);
  format.configure(new Configuration());
  FileBaseStatistics outDatedFakeStats=new FileBaseStatistics(stats.getLastModificationTime() - 1,fakeSize,BaseStatistics.AVG_RECORD_BYTES_UNKNOWN);
  BaseStatistics reGathered=format.getStatistics(outDatedFakeStats);
  assertEquals("The file size from the statistics is wrong.",size,reGathered.getTotalInputSize());
}
