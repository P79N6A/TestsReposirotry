/** 
 * Tests list serialization and deserialization match.
 * @see KvStateRequestSerializerTest#testListSerialization() KvStateRequestSerializerTest#testListSerialization() using the heap state back-end test
 */
@Test public void testListSerialization() throws Exception {
  final long key=0L;
  DBOptions dbOptions=PredefinedOptions.DEFAULT.createDBOptions();
  dbOptions.setCreateIfMissing(true);
  ColumnFamilyOptions columnFamilyOptions=PredefinedOptions.DEFAULT.createColumnOptions();
  final RocksDBKeyedStateBackend<Long> longHeapKeyedStateBackend=new RocksDBKeyedStateBackend<>("no-op",ClassLoader.getSystemClassLoader(),temporaryFolder.getRoot(),dbOptions,columnFamilyOptions,mock(TaskKvStateRegistry.class),LongSerializer.INSTANCE,1,new KeyGroupRange(0,0),new ExecutionConfig(),false,TestLocalRecoveryConfig.disabled(),RocksDBStateBackend.PriorityQueueStateType.HEAP,TtlTimeProvider.DEFAULT);
  longHeapKeyedStateBackend.restore(null);
  longHeapKeyedStateBackend.setCurrentKey(key);
  final InternalListState<Long,VoidNamespace,Long> listState=longHeapKeyedStateBackend.createInternalState(VoidNamespaceSerializer.INSTANCE,new ListStateDescriptor<>("test",LongSerializer.INSTANCE));
  KvStateRequestSerializerTest.testListSerialization(key,listState);
  longHeapKeyedStateBackend.dispose();
}
