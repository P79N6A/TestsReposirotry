@Test public void testBufferRedistributionMixed1() throws IOException {
  for (int i=0; i < 1_000; ++i) {
    BufferPool first=networkBufferPool.createBufferPool(0,10);
    assertEquals(10,first.getNumBuffers());
    BufferPool second=networkBufferPool.createBufferPool(0,10);
    assertEquals(10,first.getNumBuffers());
    assertEquals(10,second.getNumBuffers());
    BufferPool third=networkBufferPool.createBufferPool(0,Integer.MAX_VALUE);
    for (    BufferPool bp : new BufferPool[]{first,second,third}) {
      int size=networkBufferPool.getTotalNumberOfMemorySegments() * Math.min(networkBufferPool.getTotalNumberOfMemorySegments(),bp.getMaxNumberOfMemorySegments()) / (networkBufferPool.getTotalNumberOfMemorySegments() + 20);
      if (bp.getNumBuffers() != size && bp.getNumBuffers() != (size + 1)) {
        fail("wrong buffer pool size after redistribution: " + bp.getNumBuffers());
      }
    }
    BufferPool fourth=networkBufferPool.createBufferPool(0,Integer.MAX_VALUE);
    for (    BufferPool bp : new BufferPool[]{first,second,third,fourth}) {
      int size=networkBufferPool.getTotalNumberOfMemorySegments() * Math.min(networkBufferPool.getTotalNumberOfMemorySegments(),bp.getMaxNumberOfMemorySegments()) / (2 * networkBufferPool.getTotalNumberOfMemorySegments() + 20);
      if (bp.getNumBuffers() != size && bp.getNumBuffers() != (size + 1)) {
        fail("wrong buffer pool size after redistribution: " + bp.getNumBuffers());
      }
    }
    verifyAllBuffersReturned();
    setupNetworkBufferPool();
  }
}
