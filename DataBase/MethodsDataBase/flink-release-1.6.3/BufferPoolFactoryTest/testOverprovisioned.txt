/** 
 * Tests creating two buffer pools which together require as many buffers as available but where there are less buffers available to the  {@link NetworkBufferPool} at the time of the second{@link LocalBufferPool} creation.
 */
@Test public void testOverprovisioned() throws IOException {
  int buffersToTakeFromPool1=numBuffers / 2 + 1;
  int buffersToTakeFromPool2=numBuffers - buffersToTakeFromPool1;
  List<Buffer> buffers=new ArrayList<>(numBuffers);
  BufferPool bufferPool1=null, bufferPool2=null;
  try {
    bufferPool1=networkBufferPool.createBufferPool(buffersToTakeFromPool2,numBuffers);
    for (int i=0; i < buffersToTakeFromPool1; ++i) {
      Buffer buffer=bufferPool1.requestBuffer();
      assertNotNull(buffer);
      buffers.add(buffer);
    }
    assertEquals(buffersToTakeFromPool1,bufferPool1.bestEffortGetNumOfUsedBuffers());
    assertEquals(numBuffers,bufferPool1.getNumBuffers());
    bufferPool2=networkBufferPool.createBufferPool(buffersToTakeFromPool1,numBuffers);
    assertEquals(bufferPool2.getNumberOfRequiredMemorySegments(),bufferPool2.getNumBuffers());
    assertEquals(bufferPool1.getNumberOfRequiredMemorySegments(),bufferPool1.getNumBuffers());
    assertNull(bufferPool1.requestBuffer());
    for (int i=0; i < buffersToTakeFromPool2; ++i) {
      Buffer buffer=bufferPool2.requestBuffer();
      assertNotNull(buffer);
      buffers.add(buffer);
    }
    assertEquals(buffersToTakeFromPool2,bufferPool2.bestEffortGetNumOfUsedBuffers());
    assertNull(bufferPool2.requestBuffer());
    buffers.remove(0).recycleBuffer();
    assertEquals(1,networkBufferPool.getNumberOfAvailableMemorySegments());
    assertEquals(buffersToTakeFromPool1 - 1,bufferPool1.bestEffortGetNumOfUsedBuffers() + bufferPool1.getNumberOfAvailableMemorySegments());
    assertEquals(buffersToTakeFromPool2,bufferPool2.bestEffortGetNumOfUsedBuffers() + bufferPool2.getNumberOfAvailableMemorySegments());
    Buffer buffer=bufferPool2.requestBuffer();
    assertNotNull(buffer);
    buffers.add(buffer);
    assertEquals(0,networkBufferPool.getNumberOfAvailableMemorySegments());
    assertEquals(buffersToTakeFromPool1 - 1,bufferPool1.bestEffortGetNumOfUsedBuffers() + bufferPool1.getNumberOfAvailableMemorySegments());
    assertEquals(buffersToTakeFromPool2 + 1,bufferPool2.bestEffortGetNumOfUsedBuffers() + bufferPool2.getNumberOfAvailableMemorySegments());
  }
  finally {
    for (    Buffer buffer : buffers) {
      buffer.recycleBuffer();
    }
    if (bufferPool1 != null) {
      bufferPool1.lazyDestroy();
    }
    if (bufferPool2 != null) {
      bufferPool2.lazyDestroy();
    }
  }
}
