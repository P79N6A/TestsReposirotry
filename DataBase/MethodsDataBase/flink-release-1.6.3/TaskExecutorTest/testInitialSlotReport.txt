/** 
 * Tests that the  {@link TaskExecutor} sends the initial slot report after itregistered at the ResourceManager.
 */
@Test public void testInitialSlotReport() throws Exception {
  final TaskSlotTable taskSlotTable=new TaskSlotTable(Collections.singleton(ResourceProfile.UNKNOWN),timerService);
  final TaskManagerLocation taskManagerLocation=new LocalTaskManagerLocation();
  final TaskManagerServices taskManagerServices=new TaskManagerServicesBuilder().setTaskSlotTable(taskSlotTable).setTaskManagerLocation(taskManagerLocation).build();
  final TaskExecutor taskExecutor=createTaskExecutor(taskManagerServices);
  taskExecutor.start();
  try {
    final TestingResourceManagerGateway testingResourceManagerGateway=new TestingResourceManagerGateway();
    final CompletableFuture<ResourceID> initialSlotReportFuture=new CompletableFuture<>();
    testingResourceManagerGateway.setSendSlotReportFunction(resourceIDInstanceIDSlotReportTuple3 -> {
      initialSlotReportFuture.complete(resourceIDInstanceIDSlotReportTuple3.f0);
      return CompletableFuture.completedFuture(Acknowledge.get());
    }
);
    rpc.registerGateway(testingResourceManagerGateway.getAddress(),testingResourceManagerGateway);
    resourceManagerLeaderRetriever.notifyListener(testingResourceManagerGateway.getAddress(),testingResourceManagerGateway.getFencingToken().toUUID());
    assertThat(initialSlotReportFuture.get(),equalTo(taskManagerLocation.getResourceID()));
  }
  finally {
    RpcUtils.terminateRpcEndpoint(taskExecutor,timeout);
  }
}
