@Test public void testMaximumRegistrationDurationAfterConnectionLoss() throws Exception {
  configuration.setString(TaskManagerOptions.REGISTRATION_TIMEOUT,"100 ms");
  final TaskSlotTable taskSlotTable=new TaskSlotTable(Collections.singleton(ResourceProfile.UNKNOWN),timerService);
  final long heartbeatInterval=10L;
  final TaskManagerServices taskManagerServices=new TaskManagerServicesBuilder().setTaskSlotTable(taskSlotTable).build();
  final TaskExecutor taskExecutor=new TaskExecutor(rpc,TaskManagerConfiguration.fromConfiguration(configuration),haServices,taskManagerServices,new HeartbeatServices(heartbeatInterval,10L),UnregisteredMetricGroups.createUnregisteredTaskManagerMetricGroup(),dummyBlobCacheService,testingFatalErrorHandler);
  taskExecutor.start();
  final CompletableFuture<ResourceID> registrationFuture=new CompletableFuture<>();
  final OneShotLatch secondRegistration=new OneShotLatch();
  try {
    final TestingResourceManagerGateway testingResourceManagerGateway=new TestingResourceManagerGateway();
    testingResourceManagerGateway.setRegisterTaskExecutorFunction(tuple -> {
      if (registrationFuture.complete(tuple.f1)) {
        return CompletableFuture.completedFuture(new TaskExecutorRegistrationSuccess(new InstanceID(),testingResourceManagerGateway.getOwnResourceId(),heartbeatInterval,new ClusterInformation("localhost",1234)));
      }
 else {
        secondRegistration.trigger();
        return CompletableFuture.completedFuture(new RegistrationResponse.Decline("Only the first registration should succeed."));
      }
    }
);
    rpc.registerGateway(testingResourceManagerGateway.getAddress(),testingResourceManagerGateway);
    resourceManagerLeaderRetriever.notifyListener(testingResourceManagerGateway.getAddress(),UUID.randomUUID());
    final ResourceID registrationResourceId=registrationFuture.get();
    assertThat(registrationResourceId,equalTo(taskManagerServices.getTaskManagerLocation().getResourceID()));
    secondRegistration.await();
    final Throwable error=testingFatalErrorHandler.getErrorFuture().get();
    assertThat(error,is(notNullValue()));
    assertThat(ExceptionUtils.stripExecutionException(error),instanceOf(RegistrationTimeoutException.class));
    testingFatalErrorHandler.clearError();
  }
  finally {
    RpcUtils.terminateRpcEndpoint(taskExecutor,timeout);
  }
}
