@Test public void testImmediatelyRegistersIfLeaderIsKnown() throws Exception {
  final String resourceManagerAddress="/resource/manager/address/one";
  final ResourceID resourceManagerResourceId=new ResourceID(resourceManagerAddress);
  final String dispatcherAddress="localhost";
  final String jobManagerAddress="localhost";
  final String webMonitorAddress="localhost";
  ResourceManagerGateway rmGateway=mock(ResourceManagerGateway.class);
  when(rmGateway.registerTaskExecutor(anyString(),any(ResourceID.class),anyInt(),any(HardwareDescription.class),any(Time.class))).thenReturn(CompletableFuture.completedFuture(new TaskExecutorRegistrationSuccess(new InstanceID(),resourceManagerResourceId,10L,new ClusterInformation("localhost",1234))));
  rpc.registerGateway(resourceManagerAddress,rmGateway);
  StandaloneHaServices haServices=new StandaloneHaServices(resourceManagerAddress,dispatcherAddress,jobManagerAddress,webMonitorAddress);
  final TaskSlotTable taskSlotTable=mock(TaskSlotTable.class);
  final SlotReport slotReport=new SlotReport();
  when(taskSlotTable.createSlotReport(any(ResourceID.class))).thenReturn(slotReport);
  TaskExecutorLocalStateStoresManager localStateStoresManager=new TaskExecutorLocalStateStoresManager(false,new File[]{tmp.newFolder()},Executors.directExecutor());
  final TaskManagerServices taskManagerServices=new TaskManagerServicesBuilder().setTaskManagerLocation(taskManagerLocation).setTaskSlotTable(taskSlotTable).setTaskStateManager(localStateStoresManager).build();
  TaskExecutor taskManager=new TaskExecutor(rpc,taskManagerConfiguration,haServices,taskManagerServices,new HeartbeatServices(1000L,1000L),UnregisteredMetricGroups.createUnregisteredTaskManagerMetricGroup(),dummyBlobCacheService,testingFatalErrorHandler);
  try {
    taskManager.start();
    String taskManagerAddress=taskManager.getAddress();
    verify(rmGateway,Mockito.timeout(timeout.toMilliseconds())).registerTaskExecutor(eq(taskManagerAddress),eq(taskManagerLocation.getResourceID()),anyInt(),any(HardwareDescription.class),any(Time.class));
  }
  finally {
    taskManager.shutDown();
    taskManager.getTerminationFuture().get(timeout.toMilliseconds(),TimeUnit.MILLISECONDS);
  }
}
