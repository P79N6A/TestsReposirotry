@Test public void testHeartbeatTimeoutWithJobManager() throws Exception {
  final TaskSlotTable taskSlotTable=new TaskSlotTable(Arrays.asList(ResourceProfile.UNKNOWN),timerService);
  final JobLeaderService jobLeaderService=new JobLeaderService(taskManagerLocation);
  final long heartbeatInterval=1L;
  final long heartbeatTimeout=3L;
  HeartbeatServices heartbeatServices=new HeartbeatServices(heartbeatInterval,heartbeatTimeout);
  final String jobMasterAddress="jm";
  final UUID jmLeaderId=UUID.randomUUID();
  final ResourceID jmResourceId=ResourceID.generate();
  final CompletableFuture<TaskManagerLocation> taskManagerLocationFuture=new CompletableFuture<>();
  final CompletableFuture<ResourceID> disconnectTaskManagerFuture=new CompletableFuture<>();
  final TestingJobMasterGateway jobMasterGateway=new TestingJobMasterGatewayBuilder().setRegisterTaskManagerFunction((s,taskManagerLocation) -> {
    taskManagerLocationFuture.complete(taskManagerLocation);
    return CompletableFuture.completedFuture(new JMTMRegistrationSuccess(jmResourceId));
  }
).setDisconnectTaskManagerFunction(resourceID -> {
    disconnectTaskManagerFuture.complete(resourceID);
    return CompletableFuture.completedFuture(Acknowledge.get());
  }
).build();
  TaskExecutorLocalStateStoresManager localStateStoresManager=new TaskExecutorLocalStateStoresManager(false,new File[]{tmp.newFolder()},Executors.directExecutor());
  final TaskManagerServices taskManagerServices=new TaskManagerServicesBuilder().setTaskManagerLocation(taskManagerLocation).setTaskSlotTable(taskSlotTable).setJobLeaderService(jobLeaderService).setTaskStateManager(localStateStoresManager).build();
  final TaskExecutor taskManager=new TaskExecutor(rpc,taskManagerConfiguration,haServices,taskManagerServices,heartbeatServices,UnregisteredMetricGroups.createUnregisteredTaskManagerMetricGroup(),dummyBlobCacheService,testingFatalErrorHandler);
  try {
    taskManager.start();
    rpc.registerGateway(jobMasterAddress,jobMasterGateway);
    jobLeaderService.addJob(jobId,jobMasterAddress);
    jobManagerLeaderRetriever.notifyListener(jobMasterAddress,jmLeaderId);
    final TaskManagerLocation taskManagerLocation1=taskManagerLocationFuture.get(timeout.toMilliseconds(),TimeUnit.MILLISECONDS);
    assertThat(taskManagerLocation1,equalTo(taskManagerLocation));
    final ResourceID resourceID=disconnectTaskManagerFuture.get(heartbeatTimeout * 50L,TimeUnit.MILLISECONDS);
    assertThat(resourceID,equalTo(taskManagerLocation.getResourceID()));
  }
  finally {
    RpcUtils.terminateRpcEndpoint(taskManager,timeout);
  }
}
