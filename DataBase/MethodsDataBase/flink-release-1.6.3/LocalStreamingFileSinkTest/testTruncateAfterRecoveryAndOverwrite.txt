@Test public void testTruncateAfterRecoveryAndOverwrite() throws Exception {
  final File outDir=TEMP_FOLDER.newFolder();
  OperatorSubtaskState snapshot;
  try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness=TestUtils.createRescalingTestSink(outDir,1,0,100L,10L)){
    testHarness.setup();
    testHarness.open();
    testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",1),1L));
    TestUtils.checkLocalFs(outDir,1,0);
    snapshot=testHarness.snapshot(1L,1L);
    testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",2),2L));
    testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",3),3L));
    TestUtils.checkLocalFs(outDir,2,0);
    Map<File,String> contents=TestUtils.getFileContentByPath(outDir);
    int fileCounter=0;
    for (    Map.Entry<File,String> fileContents : contents.entrySet()) {
      if (fileContents.getKey().getName().contains(".part-0-0.inprogress")) {
        fileCounter++;
        Assert.assertEquals("test1@1\ntest1@2\n",fileContents.getValue());
      }
 else       if (fileContents.getKey().getName().contains(".part-0-1.inprogress")) {
        fileCounter++;
        Assert.assertEquals("test1@3\n",fileContents.getValue());
      }
    }
    Assert.assertEquals(2L,fileCounter);
  }
   try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness=TestUtils.createRescalingTestSink(outDir,1,0,100L,10L)){
    testHarness.setup();
    testHarness.initializeState(snapshot);
    testHarness.open();
    TestUtils.checkLocalFs(outDir,2,0);
    int fileCounter=0;
    for (    Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
      if (fileContents.getKey().getName().contains(".part-0-0.inprogress")) {
        fileCounter++;
        Assert.assertEquals("test1@1\n",fileContents.getValue());
      }
 else       if (fileContents.getKey().getName().contains(".part-0-1.inprogress")) {
        fileCounter++;
        Assert.assertEquals("test1@3\n",fileContents.getValue());
      }
    }
    Assert.assertEquals(2L,fileCounter);
    testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",4),4L));
    fileCounter=0;
    for (    Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
      if (fileContents.getKey().getName().contains(".part-0-0.inprogress")) {
        fileCounter++;
        Assert.assertEquals("test1@1\ntest1@4\n",fileContents.getValue());
      }
 else       if (fileContents.getKey().getName().contains(".part-0-1.inprogress")) {
        fileCounter++;
        Assert.assertEquals("test1@3\n",fileContents.getValue());
      }
    }
    Assert.assertEquals(2L,fileCounter);
    testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",5),5L));
    TestUtils.checkLocalFs(outDir,3,0);
    testHarness.snapshot(2L,2L);
    testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",6),6L));
    TestUtils.checkLocalFs(outDir,3,0);
    fileCounter=0;
    for (    Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
      if (fileContents.getKey().getName().contains(".part-0-0.inprogress")) {
        fileCounter++;
        Assert.assertEquals("test1@1\ntest1@4\n",fileContents.getValue());
      }
 else       if (fileContents.getKey().getName().contains(".part-0-1.inprogress")) {
        if (fileContents.getValue().equals("test1@5\ntest1@6\n") || fileContents.getValue().equals("test1@3\n")) {
          fileCounter++;
        }
      }
    }
    Assert.assertEquals(3L,fileCounter);
    testHarness.notifyOfCompletedCheckpoint(2L);
    TestUtils.checkLocalFs(outDir,2,1);
    fileCounter=0;
    for (    Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
      if (fileContents.getKey().getName().equals("part-0-0")) {
        fileCounter++;
        Assert.assertEquals("test1@1\ntest1@4\n",fileContents.getValue());
      }
 else       if (fileContents.getKey().getName().contains(".part-0-1.inprogress")) {
        if (fileContents.getValue().equals("test1@5\ntest1@6\n") || fileContents.getValue().equals("test1@3\n")) {
          fileCounter++;
        }
      }
    }
    Assert.assertEquals(3L,fileCounter);
  }
 }
