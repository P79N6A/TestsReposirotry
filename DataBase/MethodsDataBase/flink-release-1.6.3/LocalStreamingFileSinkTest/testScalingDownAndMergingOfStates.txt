@Test public void testScalingDownAndMergingOfStates() throws Exception {
  final File outDir=TEMP_FOLDER.newFolder();
  OperatorSubtaskState mergedSnapshot;
  try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness1=TestUtils.createRescalingTestSink(outDir,2,0,100L,10L);OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness2=TestUtils.createRescalingTestSink(outDir,2,1,100L,10L)){
    testHarness1.setup();
    testHarness1.open();
    testHarness2.setup();
    testHarness2.open();
    testHarness1.processElement(new StreamRecord<>(Tuple2.of("test1",0),0L));
    TestUtils.checkLocalFs(outDir,1,0);
    testHarness2.processElement(new StreamRecord<>(Tuple2.of("test1",1),1L));
    testHarness2.processElement(new StreamRecord<>(Tuple2.of("test2",1),1L));
    TestUtils.checkLocalFs(outDir,3,0);
    int counter=0;
    for (    Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
      final String parentFilename=fileContents.getKey().getParentFile().getName();
      final String inProgressFilename=fileContents.getKey().getName();
      if (parentFilename.equals("test1") && (inProgressFilename.contains(".part-0-0.inprogress") || inProgressFilename.contains(".part-1-0.inprogress"))) {
        counter++;
      }
 else       if (parentFilename.equals("test2") && inProgressFilename.contains(".part-1-1.inprogress")) {
        counter++;
      }
    }
    Assert.assertEquals(3L,counter);
    mergedSnapshot=AbstractStreamOperatorTestHarness.repackageState(testHarness1.snapshot(1L,0L),testHarness2.snapshot(1L,0L));
  }
   try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness=TestUtils.createRescalingTestSink(outDir,1,0,100L,10L)){
    testHarness.setup();
    testHarness.initializeState(mergedSnapshot);
    testHarness.open();
    TestUtils.checkLocalFs(outDir,3,0);
    testHarness.snapshot(2L,2L);
    testHarness.notifyOfCompletedCheckpoint(2L);
    int counter=0;
    for (    Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
      final String parentFilename=fileContents.getKey().getParentFile().getName();
      final String filename=fileContents.getKey().getName();
      if (parentFilename.equals("test1")) {
        if (filename.contains("-0.inprogress") || filename.endsWith("-0")) {
          counter++;
          Assert.assertTrue(fileContents.getValue().equals("test1@1\n") || fileContents.getValue().equals("test1@0\n"));
        }
      }
 else       if (parentFilename.equals("test2") && filename.contains(".part-1-1.inprogress")) {
        counter++;
        Assert.assertEquals("test2@1\n",fileContents.getValue());
      }
    }
    Assert.assertEquals(3L,counter);
  }
 }
