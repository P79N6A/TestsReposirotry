@Test public void testInactivityPeriodWithLateNotify() throws Exception {
  final File outDir=TEMP_FOLDER.newFolder();
  try (OneInputStreamOperatorTestHarness<Tuple2<String,Integer>,Object> testHarness=TestUtils.createRescalingTestSink(outDir,1,0,100L,124L)){
    testHarness.setup();
    testHarness.open();
    testHarness.setProcessingTime(0L);
    testHarness.processElement(new StreamRecord<>(Tuple2.of("test1",1),1L));
    testHarness.processElement(new StreamRecord<>(Tuple2.of("test2",1),1L));
    TestUtils.checkLocalFs(outDir,2,0);
    int bucketCounter=0;
    for (    Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
      if (fileContents.getKey().getParentFile().getName().equals("test1")) {
        bucketCounter++;
      }
 else       if (fileContents.getKey().getParentFile().getName().equals("test2")) {
        bucketCounter++;
      }
    }
    Assert.assertEquals(2L,bucketCounter);
    testHarness.setProcessingTime(101L);
    TestUtils.checkLocalFs(outDir,2,0);
    testHarness.snapshot(0L,0L);
    TestUtils.checkLocalFs(outDir,2,0);
    testHarness.processElement(new StreamRecord<>(Tuple2.of("test3",1),1L));
    testHarness.processElement(new StreamRecord<>(Tuple2.of("test4",1),1L));
    testHarness.setProcessingTime(202L);
    testHarness.snapshot(1L,0L);
    TestUtils.checkLocalFs(outDir,4,0);
    testHarness.notifyOfCompletedCheckpoint(0L);
    TestUtils.checkLocalFs(outDir,2,2);
    bucketCounter=0;
    for (    Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
      if (fileContents.getKey().getParentFile().getName().equals("test1")) {
        bucketCounter++;
        Assert.assertEquals("part-0-0",fileContents.getKey().getName());
        Assert.assertEquals("test1@1\n",fileContents.getValue());
      }
 else       if (fileContents.getKey().getParentFile().getName().equals("test2")) {
        bucketCounter++;
        Assert.assertEquals("part-0-1",fileContents.getKey().getName());
        Assert.assertEquals("test2@1\n",fileContents.getValue());
      }
 else       if (fileContents.getKey().getParentFile().getName().equals("test3")) {
        bucketCounter++;
      }
 else       if (fileContents.getKey().getParentFile().getName().equals("test4")) {
        bucketCounter++;
      }
    }
    Assert.assertEquals(4L,bucketCounter);
    testHarness.notifyOfCompletedCheckpoint(1L);
    TestUtils.checkLocalFs(outDir,0,4);
    bucketCounter=0;
    for (    Map.Entry<File,String> fileContents : TestUtils.getFileContentByPath(outDir).entrySet()) {
      if (fileContents.getKey().getParentFile().getName().equals("test1")) {
        bucketCounter++;
        Assert.assertEquals("test1@1\n",fileContents.getValue());
      }
 else       if (fileContents.getKey().getParentFile().getName().equals("test2")) {
        bucketCounter++;
        Assert.assertEquals("test2@1\n",fileContents.getValue());
      }
 else       if (fileContents.getKey().getParentFile().getName().equals("test3")) {
        bucketCounter++;
        Assert.assertEquals("part-0-2",fileContents.getKey().getName());
        Assert.assertEquals("test3@1\n",fileContents.getValue());
      }
 else       if (fileContents.getKey().getParentFile().getName().equals("test4")) {
        bucketCounter++;
        Assert.assertEquals("part-0-3",fileContents.getKey().getName());
        Assert.assertEquals("test4@1\n",fileContents.getValue());
      }
    }
    Assert.assertEquals(4L,bucketCounter);
  }
 }
