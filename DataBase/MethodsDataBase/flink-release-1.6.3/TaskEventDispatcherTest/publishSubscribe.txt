/** 
 * Tests  {@link TaskEventDispatcher#publish(ResultPartitionID,TaskEvent)} and {@link TaskEventDispatcher#subscribeToEvent(ResultPartitionID,EventListener,Class)} methods.
 */
@Test public void publishSubscribe() throws Exception {
  ResultPartitionID partitionId1=new ResultPartitionID();
  ResultPartitionID partitionId2=new ResultPartitionID();
  TaskEventDispatcher ted=new TaskEventDispatcher();
  AllWorkersDoneEvent event1=new AllWorkersDoneEvent();
  TerminationEvent event2=new TerminationEvent();
  assertFalse(ted.publish(partitionId1,event1));
  ted.registerPartition(partitionId1);
  ted.registerPartition(partitionId2);
  assertTrue(ted.publish(partitionId1,event1));
  OneShotEventListener eventListener1a=new OneShotEventListener(event1);
  ZeroShotEventListener eventListener1b=new ZeroShotEventListener();
  ZeroShotEventListener eventListener2=new ZeroShotEventListener();
  OneShotEventListener eventListener3=new OneShotEventListener(event2);
  ted.subscribeToEvent(partitionId1,eventListener1a,AllWorkersDoneEvent.class);
  ted.subscribeToEvent(partitionId2,eventListener1b,AllWorkersDoneEvent.class);
  ted.subscribeToEvent(partitionId1,eventListener2,TaskEvent.class);
  ted.subscribeToEvent(partitionId1,eventListener3,TerminationEvent.class);
  assertTrue(ted.publish(partitionId1,event1));
  assertTrue("listener should have fired for AllWorkersDoneEvent",eventListener1a.fired);
  assertFalse("listener should not have fired for AllWorkersDoneEvent",eventListener3.fired);
  assertTrue(ted.publish(partitionId1,event2));
  assertTrue("listener should have fired for TerminationEvent",eventListener3.fired);
}
