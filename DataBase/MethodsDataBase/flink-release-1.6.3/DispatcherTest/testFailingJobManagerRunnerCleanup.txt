/** 
 * Tests that a failing  {@link JobManagerRunner} will be properly cleaned up.
 */
@Test public void testFailingJobManagerRunnerCleanup() throws Exception {
  final FlinkException testException=new FlinkException("Test exception.");
  final ArrayBlockingQueue<Optional<Exception>> queue=new ArrayBlockingQueue<>(2);
  dispatcher=createAndStartDispatcher(heartbeatServices,haServices,new BlockingJobManagerRunnerFactory(() -> {
    final Optional<Exception> take=queue.take();
    final Exception exception=take.orElse(null);
    if (exception != null) {
      throw exception;
    }
  }
));
  dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get();
  final DispatcherGateway dispatcherGateway=dispatcher.getSelfGateway(DispatcherGateway.class);
  CompletableFuture<Acknowledge> submissionFuture=dispatcherGateway.submitJob(jobGraph,TIMEOUT);
  assertThat(submissionFuture.isDone(),is(false));
  queue.offer(Optional.of(testException));
  try {
    submissionFuture.get();
    fail("Should fail because we could not instantiate the JobManagerRunner.");
  }
 catch (  Exception e) {
    assertThat(ExceptionUtils.findThrowable(e,t -> t.equals(testException)).isPresent(),is(true));
  }
  submissionFuture=dispatcherGateway.submitJob(jobGraph,TIMEOUT);
  queue.offer(Optional.empty());
  submissionFuture.get();
}
