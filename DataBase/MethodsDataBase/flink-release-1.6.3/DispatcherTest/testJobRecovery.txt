/** 
 * Tests that a reelected Dispatcher can recover jobs.
 */
@Test public void testJobRecovery() throws Exception {
  dispatcher=createAndStartDispatcher(heartbeatServices,haServices,new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID,createdJobManagerRunnerLatch));
  final DispatcherGateway dispatcherGateway=dispatcher.getSelfGateway(DispatcherGateway.class);
  dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get();
  dispatcherGateway.submitJob(jobGraph,TIMEOUT).get();
  assertThat(submittedJobGraphStore.getJobIds(),contains(jobGraph.getJobID()));
  jobMasterLeaderElectionService.isLeader(UUID.randomUUID()).get();
  assertThat(runningJobsRegistry.getJobSchedulingStatus(jobGraph.getJobID()),is(RunningJobsRegistry.JobSchedulingStatus.RUNNING));
  dispatcherLeaderElectionService.notLeader();
  dispatcherLeaderElectionService.isLeader(UUID.randomUUID()).get();
  createdJobManagerRunnerLatch.await();
  final Collection<JobID> jobIds=dispatcherGateway.listJobs(TIMEOUT).get();
  assertThat(jobIds,hasSize(1));
  assertThat(jobIds,contains(jobGraph.getJobID()));
}
