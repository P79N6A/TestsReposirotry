/** 
 * This tests attempts to test (almost) the full space of significantly different options for verifying and prioritizing  {@link OperatorSubtaskState} options for local recovery over primary/remote state handles.
 */
@Test public void testPrioritization(){
  for (int i=0; i < 81; ++i) {
    OperatorSubtaskState primaryAndFallback=generateForConfiguration(i);
    for (int j=0; j < 9; ++j) {
      int modeFirst=j % 3;
      OperatorSubtaskState bestAlternative=createAlternativeSubtaskState(primaryAndFallback,modeFirst);
      int modeSecond=(j / 3) % 3;
      OperatorSubtaskState secondBestAlternative=createAlternativeSubtaskState(primaryAndFallback,modeSecond);
      List<OperatorSubtaskState> orderedAlternativesList=Arrays.asList(bestAlternative,secondBestAlternative);
      List<OperatorSubtaskState> validAlternativesList=new ArrayList<>(3);
      if (modeFirst == 0) {
        validAlternativesList.add(bestAlternative);
      }
      if (modeSecond == 0) {
        validAlternativesList.add(secondBestAlternative);
      }
      validAlternativesList.add(primaryAndFallback);
      PrioritizedOperatorSubtaskState.Builder builder=new PrioritizedOperatorSubtaskState.Builder(primaryAndFallback,orderedAlternativesList);
      PrioritizedOperatorSubtaskState prioritizedOperatorSubtaskState=builder.build();
      OperatorSubtaskState[] validAlternatives=validAlternativesList.toArray(new OperatorSubtaskState[validAlternativesList.size()]);
      OperatorSubtaskState[] onlyPrimary=new OperatorSubtaskState[]{primaryAndFallback};
      Assert.assertTrue(checkResultAsExpected(OperatorSubtaskState::getManagedOperatorState,PrioritizedOperatorSubtaskState::getPrioritizedManagedOperatorState,prioritizedOperatorSubtaskState,primaryAndFallback.getManagedOperatorState().size() == 1 ? validAlternatives : onlyPrimary));
      Assert.assertTrue(checkResultAsExpected(OperatorSubtaskState::getManagedKeyedState,PrioritizedOperatorSubtaskState::getPrioritizedManagedKeyedState,prioritizedOperatorSubtaskState,primaryAndFallback.getManagedKeyedState().size() == 1 ? validAlternatives : onlyPrimary));
      Assert.assertTrue(checkResultAsExpected(OperatorSubtaskState::getRawOperatorState,PrioritizedOperatorSubtaskState::getPrioritizedRawOperatorState,prioritizedOperatorSubtaskState,primaryAndFallback.getRawOperatorState().size() == 1 ? validAlternatives : onlyPrimary));
      Assert.assertTrue(checkResultAsExpected(OperatorSubtaskState::getRawKeyedState,PrioritizedOperatorSubtaskState::getPrioritizedRawKeyedState,prioritizedOperatorSubtaskState,primaryAndFallback.getRawKeyedState().size() == 1 ? validAlternatives : onlyPrimary));
    }
  }
}
