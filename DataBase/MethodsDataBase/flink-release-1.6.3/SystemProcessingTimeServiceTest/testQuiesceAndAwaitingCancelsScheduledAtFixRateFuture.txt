/** 
 * Tests that shutting down the SystemProcessingTimeService will also cancel the scheduled at fix rate future.
 */
@Test public void testQuiesceAndAwaitingCancelsScheduledAtFixRateFuture() throws Exception {
  final Object lock=new Object();
  final AtomicReference<Throwable> errorRef=new AtomicReference<>();
  final long period=10L;
  final SystemProcessingTimeService timer=new SystemProcessingTimeService(new ReferenceSettingExceptionHandler(errorRef),lock);
  try {
    ScheduledFuture<?> scheduledFuture=timer.scheduleAtFixedRate(new ProcessingTimeCallback(){
      @Override public void onProcessingTime(      long timestamp) throws Exception {
      }
    }
,0L,period);
    assertFalse(scheduledFuture.isDone());
    timer.quiesce();
    timer.awaitPendingAfterQuiesce();
    try {
      scheduledFuture.get();
      fail("scheduled future is not cancelled");
    }
 catch (    CancellationException ignored) {
    }
    scheduledFuture=timer.scheduleAtFixedRate(new ProcessingTimeCallback(){
      @Override public void onProcessingTime(      long timestamp) throws Exception {
        throw new Exception("Test exception.");
      }
    }
,0L,100L);
    assertNotNull(scheduledFuture);
    assertEquals(0,timer.getNumTasksScheduled());
    if (errorRef.get() != null) {
      throw new Exception(errorRef.get());
    }
  }
  finally {
    timer.shutdownService();
  }
}
