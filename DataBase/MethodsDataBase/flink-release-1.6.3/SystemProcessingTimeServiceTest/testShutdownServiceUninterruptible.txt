@Test public void testShutdownServiceUninterruptible(){
  final Object lock=new Object();
  final OneShotLatch blockUntilTriggered=new OneShotLatch();
  final AtomicBoolean timerFinished=new AtomicBoolean(false);
  final SystemProcessingTimeService timeService=createBlockingSystemProcessingTimeService(lock,blockUntilTriggered,timerFinished);
  Assert.assertFalse(timeService.isTerminated());
  final Thread interruptTarget=Thread.currentThread();
  final AtomicBoolean runInterrupts=new AtomicBoolean(true);
  final Thread interruptCallerThread=new Thread(() -> {
    while (runInterrupts.get()) {
      interruptTarget.interrupt();
      try {
        Thread.sleep(1);
      }
 catch (      InterruptedException ignore) {
      }
    }
  }
);
  interruptCallerThread.start();
  final long timeoutMs=50L;
  final long startTime=System.nanoTime();
  Assert.assertFalse(timeService.isTerminated());
  Assert.assertFalse(timeService.shutdownServiceUninterruptible(timeoutMs));
  Assert.assertTrue(timeService.isTerminated());
  Assert.assertFalse(timerFinished.get());
  Assert.assertTrue((System.nanoTime() - startTime) >= (1_000_000L * timeoutMs));
  runInterrupts.set(false);
  do {
    try {
      interruptCallerThread.join();
    }
 catch (    InterruptedException ignore) {
    }
  }
 while (interruptCallerThread.isAlive());
  blockUntilTriggered.trigger();
  Assert.assertTrue(timeService.shutdownServiceUninterruptible(timeoutMs));
  Assert.assertTrue(timerFinished.get());
}
