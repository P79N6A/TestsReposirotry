/** 
 * Tests that the schedule at fixed rate callback is called under the given lock.
 */
@Test public void testScheduleAtFixedRateHoldsLock() throws Exception {
  final Object lock=new Object();
  final AtomicReference<Throwable> errorRef=new AtomicReference<>();
  final SystemProcessingTimeService timer=new SystemProcessingTimeService(new ReferenceSettingExceptionHandler(errorRef),lock);
  final OneShotLatch awaitCallback=new OneShotLatch();
  try {
    assertEquals(0,timer.getNumTasksScheduled());
    ScheduledFuture<?> future=timer.scheduleAtFixedRate(new ProcessingTimeCallback(){
      @Override public void onProcessingTime(      long timestamp){
        assertTrue(Thread.holdsLock(lock));
        awaitCallback.trigger();
      }
    }
,0L,100L);
    awaitCallback.await();
    future.cancel(true);
    if (errorRef.get() != null) {
      throw new Exception(errorRef.get());
    }
  }
  finally {
    timer.shutdownService();
  }
}
