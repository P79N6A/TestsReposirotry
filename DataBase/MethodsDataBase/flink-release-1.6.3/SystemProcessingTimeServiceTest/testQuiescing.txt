@Test public void testQuiescing() throws Exception {
  final Object lock=new Object();
  final AtomicReference<Throwable> errorRef=new AtomicReference<>();
  final SystemProcessingTimeService timer=new SystemProcessingTimeService(new ReferenceSettingExceptionHandler(errorRef),lock);
  try {
    final OneShotLatch latch=new OneShotLatch();
    final ReentrantLock scopeLock=new ReentrantLock();
    timer.registerTimer(timer.getCurrentProcessingTime() + 20L,new ProcessingTimeCallback(){
      @Override public void onProcessingTime(      long timestamp) throws Exception {
        scopeLock.lock();
        try {
          latch.trigger();
          Thread.sleep(5);
        }
  finally {
          scopeLock.unlock();
        }
      }
    }
);
    latch.await();
    timer.quiesce();
    timer.awaitPendingAfterQuiesce();
    assertTrue(scopeLock.tryLock());
    ScheduledFuture<?> future=timer.registerTimer(timer.getCurrentProcessingTime() - 5L,new ProcessingTimeCallback(){
      @Override public void onProcessingTime(      long timestamp) throws Exception {
        throw new Exception("test");
      }
    }
);
    assertNotNull(future);
    assertEquals(0L,timer.getNumTasksScheduled());
    if (errorRef.get() != null) {
      throw new Exception(errorRef.get());
    }
  }
  finally {
    timer.shutdownService();
  }
}
