/** 
 * Validates that the buffer skips over a later checkpoint if it receives a barrier from an even later checkpoint on a blocked input.
 */
@Test public void testMultiChannelSkippingCheckpointsViaBlockedInputs() throws Exception {
  BufferOrEvent[] sequence={createBuffer(0,PAGE_SIZE),createBuffer(2,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBarrier(1,1),createBarrier(1,2),createBuffer(2,PAGE_SIZE),createBuffer(1,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBarrier(1,0),createBuffer(1,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBarrier(2,1),createBuffer(1,PAGE_SIZE),createBuffer(2,PAGE_SIZE),createBarrier(2,0),createBuffer(1,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBarrier(3,0),createBuffer(0,PAGE_SIZE),createBarrier(4,1),createBuffer(1,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBuffer(2,PAGE_SIZE),createBarrier(2,2),createBuffer(0,PAGE_SIZE),createBarrier(3,2),createBuffer(2,PAGE_SIZE),createBarrier(4,0),createBuffer(0,PAGE_SIZE),createBuffer(1,PAGE_SIZE),createBuffer(2,PAGE_SIZE),createBarrier(4,2),createBuffer(1,PAGE_SIZE),createEndOfPartition(1),createBuffer(2,PAGE_SIZE),createEndOfPartition(2),createBuffer(0,PAGE_SIZE),createEndOfPartition(0)};
  MockInputGate gate=new MockInputGate(PAGE_SIZE,3,Arrays.asList(sequence));
  BarrierBuffer buffer=createBarrierHandler(gate);
  check(sequence[0],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[1],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[2],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[7],buffer.getNextNonBlocked(),PAGE_SIZE);
  assertEquals(1L,buffer.getCurrentCheckpointId());
  check(sequence[5],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[6],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[9],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[10],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[13],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[22],buffer.getNextNonBlocked(),PAGE_SIZE);
  assertEquals(2L,buffer.getCurrentCheckpointId());
  check(sequence[12],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[15],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[16],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[18],buffer.getNextNonBlocked(),PAGE_SIZE);
  assertEquals(4L,buffer.getCurrentCheckpointId());
  check(sequence[21],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[24],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[26],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[30],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[20],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[28],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[29],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[32],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[33],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[34],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[35],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[36],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[37],buffer.getNextNonBlocked(),PAGE_SIZE);
  assertNull(buffer.getNextNonBlocked());
  assertNull(buffer.getNextNonBlocked());
  buffer.cleanup();
}
