/** 
 * Validates that the buffer preserved the order of elements for a input with a single input channel, and checkpoint events.
 */
@Test public void testSingleChannelWithBarriers() throws Exception {
  BufferOrEvent[] sequence={createBuffer(0,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBarrier(1,0),createBuffer(0,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBarrier(2,0),createBarrier(3,0),createBuffer(0,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBarrier(4,0),createBarrier(5,0),createBarrier(6,0),createBuffer(0,PAGE_SIZE),createEndOfPartition(0)};
  MockInputGate gate=new MockInputGate(PAGE_SIZE,1,Arrays.asList(sequence));
  BarrierBuffer buffer=createBarrierHandler(gate);
  ValidatingCheckpointHandler handler=new ValidatingCheckpointHandler();
  buffer.registerCheckpointEventHandler(handler);
  handler.setNextExpectedCheckpointId(1L);
  for (  BufferOrEvent boe : sequence) {
    if (boe.isBuffer() || boe.getEvent().getClass() != CheckpointBarrier.class) {
      assertEquals(boe,buffer.getNextNonBlocked());
    }
  }
  assertNull(buffer.getNextNonBlocked());
  assertNull(buffer.getNextNonBlocked());
  buffer.cleanup();
}
