@Test public void testSingleChannelAbortCheckpoint() throws Exception {
  BufferOrEvent[] sequence={createBuffer(0,PAGE_SIZE),createBarrier(1,0),createBuffer(0,PAGE_SIZE),createBarrier(2,0),createCancellationBarrier(4,0),createBarrier(5,0),createBuffer(0,PAGE_SIZE),createCancellationBarrier(6,0),createBuffer(0,PAGE_SIZE)};
  MockInputGate gate=new MockInputGate(PAGE_SIZE,1,Arrays.asList(sequence));
  BarrierBuffer buffer=createBarrierHandler(gate);
  AbstractInvokable toNotify=mock(AbstractInvokable.class);
  buffer.registerCheckpointEventHandler(toNotify);
  check(sequence[0],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[2],buffer.getNextNonBlocked(),PAGE_SIZE);
  verify(toNotify,times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(1L)),any(CheckpointOptions.class),any(CheckpointMetrics.class));
  assertEquals(0L,buffer.getAlignmentDurationNanos());
  check(sequence[6],buffer.getNextNonBlocked(),PAGE_SIZE);
  assertEquals(5L,buffer.getCurrentCheckpointId());
  verify(toNotify,times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(2L)),any(CheckpointOptions.class),any(CheckpointMetrics.class));
  verify(toNotify,times(1)).abortCheckpointOnBarrier(eq(4L),any(CheckpointDeclineOnCancellationBarrierException.class));
  verify(toNotify,times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(5L)),any(CheckpointOptions.class),any(CheckpointMetrics.class));
  assertEquals(0L,buffer.getAlignmentDurationNanos());
  check(sequence[8],buffer.getNextNonBlocked(),PAGE_SIZE);
  assertEquals(6L,buffer.getCurrentCheckpointId());
  verify(toNotify,times(1)).abortCheckpointOnBarrier(eq(6L),any(CheckpointDeclineOnCancellationBarrierException.class));
  assertEquals(0L,buffer.getAlignmentDurationNanos());
  buffer.cleanup();
}
