/** 
 * Validates that the buffer skips over the current checkpoint if it receives a barrier from a later checkpoint on a non-blocked input.
 */
@Test public void testMultiChannelSkippingCheckpoints() throws Exception {
  BufferOrEvent[] sequence={createBuffer(0,PAGE_SIZE),createBuffer(2,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBarrier(1,1),createBarrier(1,2),createBuffer(2,PAGE_SIZE),createBuffer(1,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBarrier(1,0),createBuffer(1,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBarrier(2,1),createBuffer(1,PAGE_SIZE),createBuffer(2,PAGE_SIZE),createBarrier(2,0),createBuffer(2,PAGE_SIZE),createBuffer(0,PAGE_SIZE),createBarrier(3,2),createBuffer(2,PAGE_SIZE),createBuffer(1,PAGE_SIZE),createEndOfPartition(1),createBuffer(2,PAGE_SIZE),createEndOfPartition(2),createBuffer(0,PAGE_SIZE),createEndOfPartition(0)};
  MockInputGate gate=new MockInputGate(PAGE_SIZE,3,Arrays.asList(sequence));
  BarrierBuffer buffer=createBarrierHandler(gate);
  AbstractInvokable toNotify=mock(AbstractInvokable.class);
  buffer.registerCheckpointEventHandler(toNotify);
  long startTs;
  check(sequence[0],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[1],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[2],buffer.getNextNonBlocked(),PAGE_SIZE);
  startTs=System.nanoTime();
  check(sequence[7],buffer.getNextNonBlocked(),PAGE_SIZE);
  assertEquals(1L,buffer.getCurrentCheckpointId());
  check(sequence[5],buffer.getNextNonBlocked(),PAGE_SIZE);
  validateAlignmentTime(startTs,buffer.getAlignmentDurationNanos());
  verify(toNotify).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(1L)),any(CheckpointOptions.class),any(CheckpointMetrics.class));
  check(sequence[6],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[9],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[10],buffer.getNextNonBlocked(),PAGE_SIZE);
  startTs=System.nanoTime();
  check(sequence[13],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[15],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[12],buffer.getNextNonBlocked(),PAGE_SIZE);
  assertEquals(3L,buffer.getCurrentCheckpointId());
  validateAlignmentTime(startTs,buffer.getAlignmentDurationNanos());
  verify(toNotify).abortCheckpointOnBarrier(eq(2L),any(CheckpointDeclineSubsumedException.class));
  check(sequence[16],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[19],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[20],buffer.getNextNonBlocked(),PAGE_SIZE);
  verify(toNotify).abortCheckpointOnBarrier(eq(3L),any(CheckpointDeclineSubsumedException.class));
  check(sequence[18],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[21],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[22],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[23],buffer.getNextNonBlocked(),PAGE_SIZE);
  check(sequence[24],buffer.getNextNonBlocked(),PAGE_SIZE);
  assertNull(buffer.getNextNonBlocked());
  assertNull(buffer.getNextNonBlocked());
  buffer.cleanup();
}
