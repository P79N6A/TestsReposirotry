@Test public void testLimitedSnapshot() throws UnknownHostException {
  final TypeInformation<Row> type=Types.ROW(Types.STRING,Types.LONG);
  TestMaterializedCollectStreamResult<?> result=null;
  try {
    result=new TestMaterializedCollectStreamResult<>(type,new ExecutionConfig(),InetAddress.getLocalHost(),0,2,3);
    result.isRetrieving=true;
    result.processRecord(Tuple2.of(true,Row.of("D",1)));
    result.processRecord(Tuple2.of(true,Row.of("A",1)));
    result.processRecord(Tuple2.of(true,Row.of("B",1)));
    result.processRecord(Tuple2.of(true,Row.of("A",1)));
    assertEquals(Arrays.asList(null,null,Row.of("B",1),Row.of("A",1)),result.getMaterializedTable());
    assertEquals(TypedResult.payload(2),result.snapshot(1));
    assertEquals(Collections.singletonList(Row.of("B",1)),result.retrievePage(1));
    assertEquals(Collections.singletonList(Row.of("A",1)),result.retrievePage(2));
    result.processRecord(Tuple2.of(true,Row.of("C",1)));
    assertEquals(Arrays.asList(Row.of("A",1),Row.of("C",1)),result.getMaterializedTable());
    result.processRecord(Tuple2.of(false,Row.of("A",1)));
    assertEquals(Collections.singletonList(Row.of("C",1)),result.getMaterializedTable());
  }
  finally {
    if (result != null) {
      result.close();
    }
  }
}
