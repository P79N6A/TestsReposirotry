/** 
 * Tests that pruning shared buffer elements and computations state use the same window border semantics (left side inclusive and right side exclusive).
 */
@Test public void testTimeoutWindowPruningWindowBorders() throws Exception {
  NFA<Event> nfa=createStartEndNFA();
  List<StreamRecord<Event>> streamEvents=new ArrayList<>();
  streamEvents.add(new StreamRecord<>(new Event(1,"start",1.0),1L));
  streamEvents.add(new StreamRecord<>(new Event(2,"start",2.0),2L));
  streamEvents.add(new StreamRecord<>(new Event(3,"foobar",3.0),3L));
  streamEvents.add(new StreamRecord<>(new Event(4,"end",4.0),3L));
  Set<Map<String,List<Event>>> expectedPatterns=new HashSet<>();
  Map<String,List<Event>> secondPattern=new HashMap<>();
  secondPattern.put("start",Collections.singletonList(new Event(2,"start",2.0)));
  secondPattern.put("end",Collections.singletonList(new Event(4,"end",4.0)));
  expectedPatterns.add(secondPattern);
  Collection<Map<String,List<Event>>> actualPatterns=runNFA(nfa,nfa.createInitialNFAState(),streamEvents);
  assertEquals(expectedPatterns,actualPatterns);
}
