@Test public void testGroupReduceCollectionWithRuntimeContext(){
  try {
    final String taskName="Test Task";
    final AtomicBoolean opened=new AtomicBoolean();
    final AtomicBoolean closed=new AtomicBoolean();
    final RichGroupReduceFunction<Tuple2<String,Integer>,Tuple2<String,Integer>> reducer=new RichGroupReduceFunction<Tuple2<String,Integer>,Tuple2<String,Integer>>(){
      @Override public void reduce(      Iterable<Tuple2<String,Integer>> values,      Collector<Tuple2<String,Integer>> out) throws Exception {
        Iterator<Tuple2<String,Integer>> input=values.iterator();
        Tuple2<String,Integer> result=input.next();
        int sum=result.f1;
        while (input.hasNext()) {
          Tuple2<String,Integer> next=input.next();
          sum+=next.f1;
        }
        result.f1=sum;
        out.collect(result);
      }
      @Override public void open(      Configuration parameters) throws Exception {
        opened.set(true);
        RuntimeContext ctx=getRuntimeContext();
        assertEquals(0,ctx.getIndexOfThisSubtask());
        assertEquals(1,ctx.getNumberOfParallelSubtasks());
        assertEquals(taskName,ctx.getTaskName());
      }
      @Override public void close() throws Exception {
        closed.set(true);
      }
    }
;
    GroupReduceOperatorBase<Tuple2<String,Integer>,Tuple2<String,Integer>,GroupReduceFunction<Tuple2<String,Integer>,Tuple2<String,Integer>>> op=new GroupReduceOperatorBase<>(reducer,new UnaryOperatorInformation<>(STRING_INT_TUPLE,STRING_INT_TUPLE),new int[]{0},"TestReducer");
    List<Tuple2<String,Integer>> input=new ArrayList<>(asList(new Tuple2<>("foo",1),new Tuple2<>("foo",3),new Tuple2<>("bar",2),new Tuple2<>("bar",4)));
    final TaskInfo taskInfo=new TaskInfo(taskName,1,0,1,0);
    ExecutionConfig executionConfig=new ExecutionConfig();
    executionConfig.disableObjectReuse();
    List<Tuple2<String,Integer>> resultMutableSafe=op.executeOnCollections(input,new RuntimeUDFContext(taskInfo,null,executionConfig,new HashMap<>(),new HashMap<>(),new UnregisteredMetricsGroup()),executionConfig);
    executionConfig.enableObjectReuse();
    List<Tuple2<String,Integer>> resultRegular=op.executeOnCollections(input,new RuntimeUDFContext(taskInfo,null,executionConfig,new HashMap<>(),new HashMap<>(),new UnregisteredMetricsGroup()),executionConfig);
    Set<Tuple2<String,Integer>> resultSetMutableSafe=new HashSet<>(resultMutableSafe);
    Set<Tuple2<String,Integer>> resultSetRegular=new HashSet<>(resultRegular);
    Set<Tuple2<String,Integer>> expectedResult=new HashSet<>(asList(new Tuple2<>("foo",4),new Tuple2<>("bar",6)));
    assertEquals(expectedResult,resultSetMutableSafe);
    assertEquals(expectedResult,resultSetRegular);
    assertTrue(opened.get());
    assertTrue(closed.get());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
