@Test public void testSnapshotAndRestore() throws Exception {
  final File outDir=TEMP_FOLDER.newFolder();
  final Path path=new Path(outDir.toURI());
  final RollingPolicy<String,String> onCheckpointRollingPolicy=OnCheckpointRollingPolicy.build();
  final Buckets<String,String> buckets=createBuckets(path,onCheckpointRollingPolicy,0);
  final ListState<byte[]> bucketStateContainer=new MockListState<>();
  final ListState<Long> partCounterContainer=new MockListState<>();
  buckets.onElement("test1",new TestUtils.MockSinkContext(null,1L,2L));
  buckets.snapshotState(0L,bucketStateContainer,partCounterContainer);
  assertThat(buckets.getActiveBuckets().get("test1"),hasSinglePartFileToBeCommittedOnCheckpointAck(path,"test1"));
  buckets.onElement("test2",new TestUtils.MockSinkContext(null,1L,2L));
  buckets.snapshotState(1L,bucketStateContainer,partCounterContainer);
  assertThat(buckets.getActiveBuckets().get("test1"),hasSinglePartFileToBeCommittedOnCheckpointAck(path,"test1"));
  assertThat(buckets.getActiveBuckets().get("test2"),hasSinglePartFileToBeCommittedOnCheckpointAck(path,"test2"));
  Buckets<String,String> restoredBuckets=restoreBuckets(path,onCheckpointRollingPolicy,0,bucketStateContainer,partCounterContainer);
  final Map<String,Bucket<String,String>> activeBuckets=restoredBuckets.getActiveBuckets();
  Assert.assertTrue(activeBuckets.isEmpty());
}
