@Test public void testMergeAtScaleInAndMaxCounterAtRecovery() throws Exception {
  final File outDir=TEMP_FOLDER.newFolder();
  final Path path=new Path(outDir.toURI());
  final RollingPolicy<String,String> onCheckpointRP=DefaultRollingPolicy.create().withMaxPartSize(7L).build();
  final MockListState<byte[]> bucketStateContainerOne=new MockListState<>();
  final MockListState<byte[]> bucketStateContainerTwo=new MockListState<>();
  final MockListState<Long> partCounterContainerOne=new MockListState<>();
  final MockListState<Long> partCounterContainerTwo=new MockListState<>();
  final Buckets<String,String> bucketsOne=createBuckets(path,onCheckpointRP,0);
  final Buckets<String,String> bucketsTwo=createBuckets(path,onCheckpointRP,1);
  bucketsOne.onElement("test1",new TestUtils.MockSinkContext(null,1L,2L));
  bucketsOne.snapshotState(0L,bucketStateContainerOne,partCounterContainerOne);
  Assert.assertEquals(1L,bucketsOne.getMaxPartCounter());
  Assert.assertNotNull(bucketsOne.getActiveBuckets().get("test1").getInProgressPart());
  bucketsTwo.onElement("test1",new TestUtils.MockSinkContext(null,1L,2L));
  bucketsTwo.onElement("test1",new TestUtils.MockSinkContext(null,1L,2L));
  bucketsTwo.onElement("test1",new TestUtils.MockSinkContext(null,1L,2L));
  bucketsTwo.snapshotState(0L,bucketStateContainerTwo,partCounterContainerTwo);
  Assert.assertEquals(2L,bucketsTwo.getMaxPartCounter());
  Assert.assertEquals(1L,bucketsTwo.getActiveBuckets().get("test1").getPendingPartsPerCheckpoint().size());
  Assert.assertNotNull(bucketsTwo.getActiveBuckets().get("test1").getInProgressPart());
  final ListState<byte[]> mergedBucketStateContainer=new MockListState<>();
  final ListState<Long> mergedPartCounterContainer=new MockListState<>();
  mergedBucketStateContainer.addAll(bucketStateContainerOne.getBackingList());
  mergedBucketStateContainer.addAll(bucketStateContainerTwo.getBackingList());
  mergedPartCounterContainer.addAll(partCounterContainerOne.getBackingList());
  mergedPartCounterContainer.addAll(partCounterContainerTwo.getBackingList());
  final Buckets<String,String> restoredBuckets=restoreBuckets(path,onCheckpointRP,0,mergedBucketStateContainer,mergedPartCounterContainer);
  Assert.assertEquals(2L,restoredBuckets.getMaxPartCounter());
  final Map<String,Bucket<String,String>> activeBuckets=restoredBuckets.getActiveBuckets();
  Assert.assertEquals(1L,activeBuckets.size());
  Assert.assertTrue(activeBuckets.keySet().contains("test1"));
  final Bucket<String,String> bucket=activeBuckets.get("test1");
  Assert.assertEquals("test1",bucket.getBucketId());
  Assert.assertEquals(new Path(path,"test1"),bucket.getBucketPath());
  Assert.assertNotNull(bucket.getInProgressPart());
  Assert.assertEquals(1L,bucket.getPendingPartsForCurrentCheckpoint().size());
  Assert.assertTrue(bucket.getPendingPartsPerCheckpoint().isEmpty());
}
