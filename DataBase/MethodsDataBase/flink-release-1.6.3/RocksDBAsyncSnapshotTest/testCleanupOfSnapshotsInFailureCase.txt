/** 
 * Test that the snapshot files are cleaned up in case of a failure during the snapshot procedure.
 */
@Test public void testCleanupOfSnapshotsInFailureCase() throws Exception {
  long checkpointId=1L;
  long timestamp=42L;
  Environment env=new DummyEnvironment("test task",1,0);
  final IOException testException=new IOException("Test exception");
  CheckpointStateOutputStream outputStream=spy(new FailingStream(testException));
  RocksDBStateBackend backend=new RocksDBStateBackend((StateBackend)new MemoryStateBackend());
  backend.setDbStoragePath(temporaryFolder.newFolder().toURI().toString());
  AbstractKeyedStateBackend<Void> keyedStateBackend=backend.createKeyedStateBackend(env,new JobID(),"test operator",VoidSerializer.INSTANCE,1,new KeyGroupRange(0,0),null);
  try {
    keyedStateBackend.restore(null);
    keyedStateBackend.getPartitionedState("namespace",StringSerializer.INSTANCE,new ValueStateDescriptor<>("foobar",String.class));
    RunnableFuture<SnapshotResult<KeyedStateHandle>> snapshotFuture=keyedStateBackend.snapshot(checkpointId,timestamp,new TestCheckpointStreamFactory(() -> outputStream),CheckpointOptions.forCheckpointWithDefaultLocation());
    try {
      FutureUtil.runIfNotDoneAndGet(snapshotFuture);
      fail("Expected an exception to be thrown here.");
    }
 catch (    ExecutionException e) {
      Assert.assertEquals(testException,e.getCause());
    }
    verify(outputStream).close();
  }
  finally {
    IOUtils.closeQuietly(keyedStateBackend);
    keyedStateBackend.dispose();
  }
}
