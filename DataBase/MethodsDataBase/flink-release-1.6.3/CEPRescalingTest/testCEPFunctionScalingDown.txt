@Test public void testCEPFunctionScalingDown() throws Exception {
  int maxParallelism=10;
  KeySelector<Event,Integer> keySelector=new KeySelector<Event,Integer>(){
    private static final long serialVersionUID=-4873366487571254798L;
    @Override public Integer getKey(    Event value) throws Exception {
      return value.getId();
    }
  }
;
  Event startEvent1=new Event(7,"start",1.0);
  SubEvent middleEvent1=new SubEvent(7,"foo",1.0,10.0);
  Event endEvent1=new Event(7,"end",1.0);
  int keygroup=KeyGroupRangeAssignment.assignToKeyGroup(keySelector.getKey(startEvent1),maxParallelism);
  assertEquals(1,keygroup);
  assertEquals(0,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,3,keygroup));
  assertEquals(0,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,2,keygroup));
  Event startEvent2=new Event(45,"start",1.0);
  SubEvent middleEvent2=new SubEvent(45,"foo",1.0,10.0);
  Event endEvent2=new Event(45,"end",1.0);
  keygroup=KeyGroupRangeAssignment.assignToKeyGroup(keySelector.getKey(startEvent2),maxParallelism);
  assertEquals(6,keygroup);
  assertEquals(1,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,3,keygroup));
  assertEquals(1,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,2,keygroup));
  Event startEvent3=new Event(90,"start",1.0);
  SubEvent middleEvent3=new SubEvent(90,"foo",1.0,10.0);
  Event endEvent3=new Event(90,"end",1.0);
  keygroup=KeyGroupRangeAssignment.assignToKeyGroup(keySelector.getKey(startEvent3),maxParallelism);
  assertEquals(2,keygroup);
  assertEquals(0,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,3,keygroup));
  assertEquals(0,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,2,keygroup));
  Event startEvent4=new Event(10,"start",1.0);
  SubEvent middleEvent4=new SubEvent(10,"foo",1.0,10.0);
  Event endEvent4=new Event(10,"end",1.0);
  keygroup=KeyGroupRangeAssignment.assignToKeyGroup(keySelector.getKey(startEvent4),maxParallelism);
  assertEquals(9,keygroup);
  assertEquals(2,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,3,keygroup));
  assertEquals(1,KeyGroupRangeAssignment.computeOperatorIndexForKeyGroup(maxParallelism,2,keygroup));
  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness1=getTestHarness(maxParallelism,3,0);
  harness1.open();
  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness2=getTestHarness(maxParallelism,3,1);
  harness2.open();
  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness3=getTestHarness(maxParallelism,3,2);
  harness3.open();
  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness4=null;
  OneInputStreamOperatorTestHarness<Event,Map<String,List<Event>>> harness5=null;
  try {
    harness1.processWatermark(Long.MIN_VALUE);
    harness2.processWatermark(Long.MIN_VALUE);
    harness3.processWatermark(Long.MIN_VALUE);
    harness1.processElement(new StreamRecord<>(startEvent1,1));
    harness1.processElement(new StreamRecord<>(new Event(7,"foobar",1.0),2));
    harness1.processElement(new StreamRecord<Event>(middleEvent1,3));
    harness1.processElement(new StreamRecord<>(endEvent1,5));
    harness1.processElement(new StreamRecord<>(startEvent3,10));
    harness1.processElement(new StreamRecord<>(startEvent1,10));
    harness2.processElement(new StreamRecord<>(startEvent2,7));
    harness2.processElement(new StreamRecord<Event>(middleEvent2,8));
    harness3.processElement(new StreamRecord<>(startEvent4,15));
    harness3.processElement(new StreamRecord<Event>(middleEvent4,16));
    harness3.processElement(new StreamRecord<>(endEvent4,17));
    assertEquals(1,harness1.getOutput().size());
    verifyWatermark(harness1.getOutput().poll(),Long.MIN_VALUE);
    assertEquals(1,harness2.getOutput().size());
    verifyWatermark(harness2.getOutput().poll(),Long.MIN_VALUE);
    assertEquals(1,harness3.getOutput().size());
    verifyWatermark(harness3.getOutput().poll(),Long.MIN_VALUE);
    OperatorSubtaskState snapshot=AbstractStreamOperatorTestHarness.repackageState(harness2.snapshot(0,0),harness1.snapshot(0,0),harness3.snapshot(0,0));
    harness4=getTestHarness(maxParallelism,2,0);
    harness4.setup();
    harness4.initializeState(snapshot);
    harness4.open();
    harness5=getTestHarness(maxParallelism,2,1);
    harness5.setup();
    harness5.initializeState(snapshot);
    harness5.open();
    harness5.processElement(new StreamRecord<>(endEvent2,11));
    harness5.processWatermark(new Watermark(12));
    verifyPattern(harness5.getOutput().poll(),startEvent2,middleEvent2,endEvent2);
    verifyWatermark(harness5.getOutput().poll(),12);
    harness4.processWatermark(new Watermark(12));
    assertEquals(2,harness4.getOutput().size());
    verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);
    verifyWatermark(harness4.getOutput().poll(),12);
    harness4.processElement(new StreamRecord<Event>(middleEvent3,15));
    harness4.processElement(new StreamRecord<>(endEvent3,16));
    harness4.processElement(new StreamRecord<Event>(middleEvent1,15));
    harness4.processElement(new StreamRecord<>(endEvent1,16));
    harness4.processWatermark(new Watermark(Long.MAX_VALUE));
    harness5.processWatermark(new Watermark(Long.MAX_VALUE));
    assertEquals(3,harness4.getOutput().size());
    Queue<Object> output=harness4.getOutput();
    StreamRecord<?> resultRecord=(StreamRecord<?>)output.peek();
    assertTrue(resultRecord.getValue() instanceof Map);
    @SuppressWarnings("unchecked") Map<String,List<Event>> patternMap=(Map<String,List<Event>>)resultRecord.getValue();
    if (patternMap.get("start").get(0).getId() == 7) {
      verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);
      verifyPattern(harness4.getOutput().poll(),startEvent3,middleEvent3,endEvent3);
    }
 else {
      verifyPattern(harness4.getOutput().poll(),startEvent3,middleEvent3,endEvent3);
      verifyPattern(harness4.getOutput().poll(),startEvent1,middleEvent1,endEvent1);
    }
    assertEquals(2,harness5.getOutput().size());
    verifyPattern(harness5.getOutput().poll(),startEvent4,middleEvent4,endEvent4);
  }
  finally {
    closeSilently(harness1);
    closeSilently(harness2);
    closeSilently(harness3);
    closeSilently(harness4);
    closeSilently(harness5);
  }
}
