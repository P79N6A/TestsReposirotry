/** 
 * Test CoProcessFunction side output.
 */
@Test public void testCoProcessFunctionSideOutput() throws Exception {
  final OutputTag<String> sideOutputTag=new OutputTag<String>("side"){
  }
;
  TestListResultSink<String> sideOutputResultSink=new TestListResultSink<>();
  TestListResultSink<Integer> resultSink=new TestListResultSink<>();
  StreamExecutionEnvironment see=StreamExecutionEnvironment.getExecutionEnvironment();
  see.setParallelism(3);
  DataStream<Integer> ds1=see.fromCollection(elements);
  DataStream<Integer> ds2=see.fromCollection(elements);
  SingleOutputStreamOperator<Integer> passThroughtStream=ds1.connect(ds2).process(new CoProcessFunction<Integer,Integer,Integer>(){
    @Override public void processElement1(    Integer value,    Context ctx,    Collector<Integer> out) throws Exception {
      if (value < 3) {
        out.collect(value);
        ctx.output(sideOutputTag,"sideout1-" + String.valueOf(value));
      }
    }
    @Override public void processElement2(    Integer value,    Context ctx,    Collector<Integer> out) throws Exception {
      if (value >= 3) {
        out.collect(value);
        ctx.output(sideOutputTag,"sideout2-" + String.valueOf(value));
      }
    }
  }
);
  passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);
  passThroughtStream.addSink(resultSink);
  see.execute();
  assertEquals(Arrays.asList("sideout1-1","sideout1-2","sideout2-3","sideout2-4","sideout2-5"),sideOutputResultSink.getSortedResult());
  assertEquals(Arrays.asList(1,2,3,4,5),resultSink.getSortedResult());
}
