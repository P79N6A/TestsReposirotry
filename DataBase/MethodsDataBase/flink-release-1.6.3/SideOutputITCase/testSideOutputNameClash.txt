@Test public void testSideOutputNameClash() throws Exception {
  final OutputTag<String> sideOutputTag1=new OutputTag<String>("side"){
  }
;
  final OutputTag<Integer> sideOutputTag2=new OutputTag<Integer>("side"){
  }
;
  TestListResultSink<String> sideOutputResultSink1=new TestListResultSink<>();
  TestListResultSink<Integer> sideOutputResultSink2=new TestListResultSink<>();
  StreamExecutionEnvironment see=StreamExecutionEnvironment.getExecutionEnvironment();
  see.setParallelism(3);
  DataStream<Integer> dataStream=see.fromCollection(elements);
  SingleOutputStreamOperator<Integer> passThroughtStream=dataStream.process(new ProcessFunction<Integer,Integer>(){
    private static final long serialVersionUID=1L;
    @Override public void processElement(    Integer value,    Context ctx,    Collector<Integer> out) throws Exception {
      out.collect(value);
      ctx.output(sideOutputTag1,"sideout-" + String.valueOf(value));
      ctx.output(sideOutputTag2,13);
    }
  }
);
  passThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink1);
  expectedException.expect(UnsupportedOperationException.class);
  passThroughtStream.getSideOutput(sideOutputTag2).addSink(sideOutputResultSink2);
}
