/** 
 * Test keyed ProcessFunction side output.
 */
@Test public void testKeyedProcessFunctionSideOutput() throws Exception {
  final OutputTag<String> sideOutputTag=new OutputTag<String>("side"){
  }
;
  TestListResultSink<String> sideOutputResultSink=new TestListResultSink<>();
  TestListResultSink<Integer> resultSink=new TestListResultSink<>();
  StreamExecutionEnvironment see=StreamExecutionEnvironment.getExecutionEnvironment();
  see.setParallelism(3);
  DataStream<Integer> dataStream=see.fromCollection(elements);
  SingleOutputStreamOperator<Integer> passThroughtStream=dataStream.keyBy(new KeySelector<Integer,Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer getKey(    Integer value) throws Exception {
      return value;
    }
  }
).process(new ProcessFunction<Integer,Integer>(){
    private static final long serialVersionUID=1L;
    @Override public void processElement(    Integer value,    Context ctx,    Collector<Integer> out) throws Exception {
      out.collect(value);
      ctx.output(sideOutputTag,"sideout-" + String.valueOf(value));
    }
  }
);
  passThroughtStream.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);
  passThroughtStream.addSink(resultSink);
  see.execute();
  assertEquals(Arrays.asList("sideout-1","sideout-2","sideout-3","sideout-4","sideout-5"),sideOutputResultSink.getSortedResult());
  assertEquals(Arrays.asList(1,2,3,4,5),resultSink.getSortedResult());
}
