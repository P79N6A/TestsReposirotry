@Test public void testProcessAllWindowFunctionSideOutput() throws Exception {
  TestListResultSink<Integer> resultSink=new TestListResultSink<>();
  TestListResultSink<String> sideOutputResultSink=new TestListResultSink<>();
  StreamExecutionEnvironment see=StreamExecutionEnvironment.getExecutionEnvironment();
  see.setParallelism(1);
  see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  DataStream<Integer> dataStream=see.fromCollection(elements);
  OutputTag<String> sideOutputTag=new OutputTag<String>("side"){
  }
;
  SingleOutputStreamOperator<Integer> windowOperator=dataStream.assignTimestampsAndWatermarks(new TestWatermarkAssigner()).timeWindowAll(Time.milliseconds(1),Time.milliseconds(1)).process(new ProcessAllWindowFunction<Integer,Integer,TimeWindow>(){
    private static final long serialVersionUID=1L;
    @Override public void process(    Context context,    Iterable<Integer> elements,    Collector<Integer> out) throws Exception {
      for (      Integer e : elements) {
        out.collect(e);
        context.output(sideOutputTag,"sideout-" + String.valueOf(e));
      }
    }
  }
);
  windowOperator.getSideOutput(sideOutputTag).addSink(sideOutputResultSink);
  windowOperator.addSink(resultSink);
  see.execute();
  assertEquals(Arrays.asList("sideout-1","sideout-2","sideout-5"),sideOutputResultSink.getSortedResult());
  assertEquals(Arrays.asList(1,2,5),resultSink.getSortedResult());
}
