@Test public void testDifferentSideOutputTypes() throws Exception {
  final OutputTag<String> sideOutputTag1=new OutputTag<String>("string"){
  }
;
  final OutputTag<Integer> sideOutputTag2=new OutputTag<Integer>("int"){
  }
;
  TestListResultSink<String> sideOutputResultSink1=new TestListResultSink<>();
  TestListResultSink<Integer> sideOutputResultSink2=new TestListResultSink<>();
  TestListResultSink<Integer> resultSink=new TestListResultSink<>();
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  env.getConfig().enableObjectReuse();
  env.setParallelism(3);
  DataStream<Integer> dataStream=env.fromCollection(elements);
  SingleOutputStreamOperator<Integer> passThroughtStream=dataStream.process(new ProcessFunction<Integer,Integer>(){
    private static final long serialVersionUID=1L;
    @Override public void processElement(    Integer value,    Context ctx,    Collector<Integer> out) throws Exception {
      out.collect(value);
      ctx.output(sideOutputTag1,"sideout-" + String.valueOf(value));
      ctx.output(sideOutputTag2,13);
    }
  }
);
  passThroughtStream.getSideOutput(sideOutputTag1).addSink(sideOutputResultSink1);
  passThroughtStream.getSideOutput(sideOutputTag2).addSink(sideOutputResultSink2);
  passThroughtStream.addSink(resultSink);
  env.execute();
  assertEquals(Arrays.asList("sideout-1","sideout-2","sideout-3","sideout-4","sideout-5"),sideOutputResultSink1.getSortedResult());
  assertEquals(Arrays.asList(13,13,13,13,13),sideOutputResultSink2.getSortedResult());
  assertEquals(Arrays.asList(1,2,3,4,5),resultSink.getSortedResult());
}
