@Test public void testKeyedWindowLateArrivingEvents() throws Exception {
  TestListResultSink<String> resultSink=new TestListResultSink<>();
  TestListResultSink<Integer> lateResultSink=new TestListResultSink<>();
  StreamExecutionEnvironment see=StreamExecutionEnvironment.getExecutionEnvironment();
  see.setParallelism(3);
  see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  DataStream<Integer> dataStream=see.fromCollection(elements);
  OutputTag<Integer> lateDataTag=new OutputTag<Integer>("late"){
  }
;
  SingleOutputStreamOperator<String> windowOperator=dataStream.assignTimestampsAndWatermarks(new TestWatermarkAssigner()).keyBy(new TestKeySelector()).timeWindow(Time.milliseconds(1),Time.milliseconds(1)).allowedLateness(Time.milliseconds(2)).sideOutputLateData(lateDataTag).apply(new WindowFunction<Integer,String,Integer,TimeWindow>(){
    private static final long serialVersionUID=1L;
    @Override public void apply(    Integer key,    TimeWindow window,    Iterable<Integer> input,    Collector<String> out) throws Exception {
      for (      Integer val : input) {
        out.collect(String.valueOf(key) + "-" + String.valueOf(val));
      }
    }
  }
);
  windowOperator.addSink(resultSink);
  windowOperator.getSideOutput(lateDataTag).addSink(lateResultSink);
  see.execute();
  assertEquals(Arrays.asList("1-1","2-2","4-4","5-5"),resultSink.getSortedResult());
  assertEquals(Collections.singletonList(3),lateResultSink.getSortedResult());
}
