/** 
 * Test window late arriving events stream.
 */
@Test public void testAllWindowLateArrivingEvents() throws Exception {
  TestListResultSink<String> sideOutputResultSink=new TestListResultSink<>();
  StreamExecutionEnvironment see=StreamExecutionEnvironment.getExecutionEnvironment();
  see.setParallelism(1);
  see.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);
  DataStream<Integer> dataStream=see.fromCollection(elements);
  OutputTag<Integer> lateDataTag=new OutputTag<Integer>("late"){
  }
;
  SingleOutputStreamOperator<Integer> windowOperator=dataStream.assignTimestampsAndWatermarks(new TestWatermarkAssigner()).timeWindowAll(Time.milliseconds(1),Time.milliseconds(1)).sideOutputLateData(lateDataTag).apply(new AllWindowFunction<Integer,Integer,TimeWindow>(){
    private static final long serialVersionUID=1L;
    @Override public void apply(    TimeWindow window,    Iterable<Integer> values,    Collector<Integer> out) throws Exception {
      for (      Integer val : values) {
        out.collect(val);
      }
    }
  }
);
  windowOperator.getSideOutput(lateDataTag).flatMap(new FlatMapFunction<Integer,String>(){
    private static final long serialVersionUID=1L;
    @Override public void flatMap(    Integer value,    Collector<String> out) throws Exception {
      out.collect("late-" + String.valueOf(value));
    }
  }
).addSink(sideOutputResultSink);
  see.execute();
  assertEquals(sideOutputResultSink.getSortedResult(),Arrays.asList("late-3","late-4"));
}
