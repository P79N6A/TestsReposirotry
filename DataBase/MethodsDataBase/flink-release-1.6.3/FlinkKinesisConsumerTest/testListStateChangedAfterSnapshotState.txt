@Test public void testListStateChangedAfterSnapshotState() throws Exception {
  Properties config=TestUtils.getStandardProperties();
  ArrayList<Tuple2<StreamShardMetadata,SequenceNumber>> initialState=new ArrayList<>(1);
  initialState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(new StreamShardHandle("fakeStream1",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(0)))),new SequenceNumber("1")));
  ArrayList<Tuple2<StreamShardMetadata,SequenceNumber>> expectedStateSnapshot=new ArrayList<>(3);
  expectedStateSnapshot.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(new StreamShardHandle("fakeStream1",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(0)))),new SequenceNumber("12")));
  expectedStateSnapshot.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(new StreamShardHandle("fakeStream1",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(1)))),new SequenceNumber("11")));
  expectedStateSnapshot.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(new StreamShardHandle("fakeStream1",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2)))),new SequenceNumber("31")));
  TestingListState<Tuple2<StreamShardMetadata,SequenceNumber>> listState=new TestingListState<>();
  for (  Tuple2<StreamShardMetadata,SequenceNumber> state : initialState) {
    listState.add(state);
  }
  OperatorStateStore operatorStateStore=mock(OperatorStateStore.class);
  when(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);
  StateInitializationContext initializationContext=mock(StateInitializationContext.class);
  when(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);
  when(initializationContext.isRestored()).thenReturn(true);
  HashMap<StreamShardMetadata,SequenceNumber> stateSnapshot=new HashMap<>();
  for (  Tuple2<StreamShardMetadata,SequenceNumber> tuple : expectedStateSnapshot) {
    stateSnapshot.put(tuple.f0,tuple.f1);
  }
  KinesisDataFetcher mockedFetcher=mock(KinesisDataFetcher.class);
  when(mockedFetcher.snapshotState()).thenReturn(stateSnapshot);
  FlinkKinesisConsumer<String> consumer=new FlinkKinesisConsumer<>("fakeStream",new SimpleStringSchema(),config);
  FlinkKinesisConsumer<?> mockedConsumer=spy(consumer);
  RuntimeContext context=mock(RuntimeContext.class);
  when(context.getIndexOfThisSubtask()).thenReturn(1);
  mockedConsumer.setRuntimeContext(context);
  mockedConsumer.initializeState(initializationContext);
  mockedConsumer.open(new Configuration());
  Whitebox.setInternalState(mockedConsumer,"fetcher",mockedFetcher);
  mockedConsumer.snapshotState(mock(FunctionSnapshotContext.class));
  assertEquals(true,listState.clearCalled);
  assertEquals(3,listState.getList().size());
  for (  Tuple2<StreamShardMetadata,SequenceNumber> state : initialState) {
    for (    Tuple2<StreamShardMetadata,SequenceNumber> currentState : listState.getList()) {
      assertNotEquals(state,currentState);
    }
  }
  for (  Tuple2<StreamShardMetadata,SequenceNumber> state : expectedStateSnapshot) {
    boolean hasOneIsSame=false;
    for (    Tuple2<StreamShardMetadata,SequenceNumber> currentState : listState.getList()) {
      hasOneIsSame=hasOneIsSame || state.equals(currentState);
    }
    assertEquals(true,hasOneIsSame);
  }
}
