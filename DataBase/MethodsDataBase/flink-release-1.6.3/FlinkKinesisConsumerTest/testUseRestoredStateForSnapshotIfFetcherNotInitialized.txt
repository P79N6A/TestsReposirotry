@Test public void testUseRestoredStateForSnapshotIfFetcherNotInitialized() throws Exception {
  Properties config=TestUtils.getStandardProperties();
  List<Tuple2<StreamShardMetadata,SequenceNumber>> globalUnionState=new ArrayList<>(4);
  globalUnionState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(new StreamShardHandle("fakeStream",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(0)))),new SequenceNumber("1")));
  globalUnionState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(new StreamShardHandle("fakeStream",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(1)))),new SequenceNumber("1")));
  globalUnionState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(new StreamShardHandle("fakeStream",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(2)))),new SequenceNumber("1")));
  globalUnionState.add(Tuple2.of(KinesisDataFetcher.convertToStreamShardMetadata(new StreamShardHandle("fakeStream",new Shard().withShardId(KinesisShardIdGenerator.generateFromShardOrder(3)))),new SequenceNumber("1")));
  TestingListState<Tuple2<StreamShardMetadata,SequenceNumber>> listState=new TestingListState<>();
  for (  Tuple2<StreamShardMetadata,SequenceNumber> state : globalUnionState) {
    listState.add(state);
  }
  FlinkKinesisConsumer<String> consumer=new FlinkKinesisConsumer<>("fakeStream",new SimpleStringSchema(),config);
  RuntimeContext context=mock(RuntimeContext.class);
  when(context.getIndexOfThisSubtask()).thenReturn(0);
  when(context.getNumberOfParallelSubtasks()).thenReturn(2);
  consumer.setRuntimeContext(context);
  OperatorStateStore operatorStateStore=mock(OperatorStateStore.class);
  when(operatorStateStore.getUnionListState(Matchers.any(ListStateDescriptor.class))).thenReturn(listState);
  StateInitializationContext initializationContext=mock(StateInitializationContext.class);
  when(initializationContext.getOperatorStateStore()).thenReturn(operatorStateStore);
  when(initializationContext.isRestored()).thenReturn(true);
  consumer.initializeState(initializationContext);
  consumer.open(new Configuration());
  consumer.snapshotState(new StateSnapshotContextSynchronousImpl(123,123));
  assertTrue(listState.isClearCalled());
  assertEquals(globalUnionState.size() / 2,listState.getList().size());
  assertTrue(listState.getList().contains(globalUnionState.get(0)));
  assertTrue(listState.getList().contains(globalUnionState.get(2)));
}
