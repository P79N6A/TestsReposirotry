/** 
 * Tests whether the fold operation can also be called with non Java serializable types.
 */
@Test public void testFoldOperationWithNonJavaSerializableType() throws Exception {
  final int numElements=10;
  StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
  DataStream<Tuple2<Integer,NonSerializable>> input=env.addSource(new NonSerializableTupleSource(numElements));
  final MemorySinkFunction sinkFunction=new MemorySinkFunction(0);
  final ArrayList<Integer> actualResult=new ArrayList<>();
  MemorySinkFunction.registerCollection(0,actualResult);
  input.keyBy(0).fold(new NonSerializable(42),new FoldFunction<Tuple2<Integer,NonSerializable>,NonSerializable>(){
    private static final long serialVersionUID=2705497830143608897L;
    @Override public NonSerializable fold(    NonSerializable accumulator,    Tuple2<Integer,NonSerializable> value) throws Exception {
      return new NonSerializable(accumulator.value + value.f1.value);
    }
  }
).map(new MapFunction<NonSerializable,Integer>(){
    private static final long serialVersionUID=6906984044674568945L;
    @Override public Integer map(    NonSerializable value) throws Exception {
      return value.value;
    }
  }
).addSink(sinkFunction);
  Collection<Integer> expected=new ArrayList<>(10);
  for (int i=0; i < numElements; i++) {
    expected.add(42 + i);
  }
  env.execute();
  Collections.sort(actualResult);
  Assert.assertEquals(expected,actualResult);
  MemorySinkFunction.clear();
}
