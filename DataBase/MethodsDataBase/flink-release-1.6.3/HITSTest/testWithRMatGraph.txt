@Test public void testWithRMatGraph() throws Exception {
  DataSet<Result<LongValue>> hits=directedRMatGraph(10,16).run(new HITS<>(ACCURACY));
  Map<Long,Result<LongValue>> results=new HashMap<>();
  for (  Result<LongValue> result : new Collect<Result<LongValue>>().run(hits).execute()) {
    results.put(result.getVertexId0().getValue(),result);
  }
  assertEquals(902,results.size());
  Map<Long,Tuple2<Double,Double>> expectedResults=new HashMap<>();
  expectedResults.put(0L,Tuple2.of(0.231077034503,0.238110215657));
  expectedResults.put(1L,Tuple2.of(0.162364053853,0.169679504542));
  expectedResults.put(2L,Tuple2.of(0.162412612418,0.161015667467));
  expectedResults.put(8L,Tuple2.of(0.167064641648,0.158592966732));
  expectedResults.put(13L,Tuple2.of(0.0419155956364,0.0407091624972));
  expectedResults.put(29L,Tuple2.of(0.0102017346609,0.0146218045619));
  expectedResults.put(109L,Tuple2.of(0.00190531000308,0.00481944991974));
  expectedResults.put(394L,Tuple2.of(0.0122287016151,0.0147987969383));
  expectedResults.put(652L,Tuple2.of(0.0109666592418,0.0113713306828));
  expectedResults.put(1020L,Tuple2.of(0.0,0.000326973733252));
  for (  Map.Entry<Long,Tuple2<Double,Double>> expected : expectedResults.entrySet()) {
    double hubScore=results.get(expected.getKey()).getHubScore().getValue();
    double authorityScore=results.get(expected.getKey()).getAuthorityScore().getValue();
    assertEquals(expected.getValue().f0,hubScore,ACCURACY);
    assertEquals(expected.getValue().f1,authorityScore,ACCURACY);
  }
}
