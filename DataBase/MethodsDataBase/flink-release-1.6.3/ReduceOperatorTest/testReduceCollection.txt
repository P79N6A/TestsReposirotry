@Test public void testReduceCollection(){
  try {
    final ReduceFunction<Tuple2<String,Integer>> reducer=(value1,value2) -> new Tuple2<>(value1.f0,value1.f1 + value2.f1);
    ReduceOperatorBase<Tuple2<String,Integer>,ReduceFunction<Tuple2<String,Integer>>> op=new ReduceOperatorBase<>(reducer,new UnaryOperatorInformation<>(STRING_INT_TUPLE,STRING_INT_TUPLE),new int[]{0},"TestReducer");
    List<Tuple2<String,Integer>> input=new ArrayList<>(asList(new Tuple2<>("foo",1),new Tuple2<>("foo",3),new Tuple2<>("bar",2),new Tuple2<>("bar",4)));
    ExecutionConfig executionConfig=new ExecutionConfig();
    executionConfig.disableObjectReuse();
    List<Tuple2<String,Integer>> resultMutableSafe=op.executeOnCollections(input,null,executionConfig);
    executionConfig.enableObjectReuse();
    List<Tuple2<String,Integer>> resultRegular=op.executeOnCollections(input,null,executionConfig);
    Set<Tuple2<String,Integer>> resultSetMutableSafe=new HashSet<>(resultMutableSafe);
    Set<Tuple2<String,Integer>> resultSetRegular=new HashSet<>(resultRegular);
    Set<Tuple2<String,Integer>> expectedResult=new HashSet<>(asList(new Tuple2<>("foo",4),new Tuple2<>("bar",6)));
    assertEquals(expectedResult,resultSetMutableSafe);
    assertEquals(expectedResult,resultSetRegular);
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
