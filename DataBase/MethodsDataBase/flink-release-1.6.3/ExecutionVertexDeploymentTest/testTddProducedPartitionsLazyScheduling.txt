/** 
 * Tests that the lazy scheduling flag is correctly forwarded to the produced partition descriptors.
 */
@Test public void testTddProducedPartitionsLazyScheduling() throws Exception {
  TestingUtils.QueuedActionExecutionContext context=TestingUtils.queuedActionExecutionContext();
  ExecutionJobVertex jobVertex=getExecutionVertex(new JobVertexID(),context);
  IntermediateResult result=new IntermediateResult(new IntermediateDataSetID(),jobVertex,1,ResultPartitionType.PIPELINED);
  ExecutionVertex vertex=new ExecutionVertex(jobVertex,0,new IntermediateResult[]{result},Time.minutes(1));
  ExecutionEdge mockEdge=createMockExecutionEdge(1);
  result.getPartitions()[0].addConsumerGroup();
  result.getPartitions()[0].addConsumer(mockEdge,0);
  SlotContext slotContext=mock(SlotContext.class);
  when(slotContext.getAllocationId()).thenReturn(new AllocationID());
  LogicalSlot slot=mock(LogicalSlot.class);
  when(slot.getAllocationId()).thenReturn(new AllocationID());
  for (  ScheduleMode mode : ScheduleMode.values()) {
    vertex.getExecutionGraph().setScheduleMode(mode);
    TaskDeploymentDescriptor tdd=vertex.createDeploymentDescriptor(new ExecutionAttemptID(),slot,null,1);
    Collection<ResultPartitionDeploymentDescriptor> producedPartitions=tdd.getProducedPartitions();
    assertEquals(1,producedPartitions.size());
    ResultPartitionDeploymentDescriptor desc=producedPartitions.iterator().next();
    assertEquals(mode.allowLazyDeployment(),desc.sendScheduleOrUpdateConsumersMessage());
  }
}
