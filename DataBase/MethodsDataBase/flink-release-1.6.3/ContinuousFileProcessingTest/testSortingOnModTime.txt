@Test public void testSortingOnModTime() throws Exception {
  String testBasePath=hdfsURI + "/" + UUID.randomUUID()+ "/";
  final long[] modTimes=new long[NO_OF_FILES];
  final org.apache.hadoop.fs.Path[] filesCreated=new org.apache.hadoop.fs.Path[NO_OF_FILES];
  for (int i=0; i < NO_OF_FILES; i++) {
    Tuple2<org.apache.hadoop.fs.Path,String> file=createFileAndFillWithData(testBasePath,"file",i,"This is test line.");
    Thread.sleep(400);
    filesCreated[i]=file.f0;
    modTimes[i]=hdfs.getFileStatus(file.f0).getModificationTime();
  }
  TextInputFormat format=new TextInputFormat(new Path(testBasePath));
  format.setFilesFilter(FilePathFilter.createDefaultFilter());
  FileInputSplit[] splits=format.createInputSplits(1);
  ContinuousFileMonitoringFunction<String> monitoringFunction=createTestContinuousFileMonitoringFunction(format,FileProcessingMode.PROCESS_ONCE);
  ModTimeVerifyingSourceContext context=new ModTimeVerifyingSourceContext(modTimes);
  monitoringFunction.open(new Configuration());
  monitoringFunction.run(context);
  Assert.assertEquals(splits.length,context.getCounter());
  for (int i=0; i < NO_OF_FILES; i++) {
    hdfs.delete(filesCreated[i],false);
  }
}
