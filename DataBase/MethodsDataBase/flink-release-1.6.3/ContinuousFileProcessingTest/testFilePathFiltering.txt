@Test public void testFilePathFiltering() throws Exception {
  String testBasePath=hdfsURI + "/" + UUID.randomUUID()+ "/";
  Set<org.apache.hadoop.fs.Path> filesCreated=new HashSet<>();
  Set<String> filesKept=new TreeSet<>();
  for (int i=0; i < NO_OF_FILES; i++) {
    Tuple2<org.apache.hadoop.fs.Path,String> file=createFileAndFillWithData(testBasePath,"**file",i,"This is test line.");
    filesCreated.add(file.f0);
  }
  for (int i=0; i < NO_OF_FILES; i++) {
    Tuple2<org.apache.hadoop.fs.Path,String> file=createFileAndFillWithData(testBasePath,"file",i,"This is test line.");
    filesCreated.add(file.f0);
    filesKept.add(file.f0.getName());
  }
  TextInputFormat format=new TextInputFormat(new Path(testBasePath));
  format.setFilesFilter(new FilePathFilter(){
    private static final long serialVersionUID=2611449927338589804L;
    @Override public boolean filterPath(    Path filePath){
      return filePath.getName().startsWith("**");
    }
  }
);
  ContinuousFileMonitoringFunction<String> monitoringFunction=createTestContinuousFileMonitoringFunction(format,FileProcessingMode.PROCESS_ONCE);
  final FileVerifyingSourceContext context=new FileVerifyingSourceContext(new OneShotLatch(),monitoringFunction);
  monitoringFunction.open(new Configuration());
  monitoringFunction.run(context);
  Assert.assertArrayEquals(filesKept.toArray(),context.getSeenFiles().toArray());
  for (  org.apache.hadoop.fs.Path file : filesCreated) {
    hdfs.delete(file,false);
  }
}
