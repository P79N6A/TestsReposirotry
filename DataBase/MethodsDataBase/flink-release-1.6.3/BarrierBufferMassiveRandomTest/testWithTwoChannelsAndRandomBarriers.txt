@Test public void testWithTwoChannelsAndRandomBarriers(){
  IOManager ioMan=null;
  NetworkBufferPool networkBufferPool1=null;
  NetworkBufferPool networkBufferPool2=null;
  try {
    ioMan=new IOManagerAsync();
    networkBufferPool1=new NetworkBufferPool(100,PAGE_SIZE);
    networkBufferPool2=new NetworkBufferPool(100,PAGE_SIZE);
    BufferPool pool1=networkBufferPool1.createBufferPool(100,100);
    BufferPool pool2=networkBufferPool2.createBufferPool(100,100);
    RandomGeneratingInputGate myIG=new RandomGeneratingInputGate(new BufferPool[]{pool1,pool2},new BarrierGenerator[]{new CountBarrier(100000),new RandomBarrier(100000)});
    BarrierBuffer barrierBuffer=new BarrierBuffer(myIG,new BufferSpiller(ioMan,myIG.getPageSize()));
    for (int i=0; i < 2000000; i++) {
      BufferOrEvent boe=barrierBuffer.getNextNonBlocked();
      if (boe.isBuffer()) {
        boe.getBuffer().recycleBuffer();
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
 finally {
    if (ioMan != null) {
      ioMan.shutdown();
    }
    if (networkBufferPool1 != null) {
      networkBufferPool1.destroyAllBufferPools();
      networkBufferPool1.destroy();
    }
    if (networkBufferPool2 != null) {
      networkBufferPool2.destroyAllBufferPools();
      networkBufferPool2.destroy();
    }
  }
}
