@Test public void testInMemorySorterDisposal() throws Exception {
  final TestingInMemorySorterFactory<Tuple2<Integer,Integer>> inMemorySorterFactory=new TestingInMemorySorterFactory<>();
  final int numPages=32;
  final MemoryManager memoryManager=new MemoryManager(MemoryManager.DEFAULT_PAGE_SIZE * numPages,1);
  final IOManagerAsync ioManager=new IOManagerAsync();
  final DummyInvokable parentTask=new DummyInvokable();
  try {
    final List<MemorySegment> memory=memoryManager.allocatePages(parentTask,numPages);
    final UnilateralSortMerger<Tuple2<Integer,Integer>> unilateralSortMerger=new UnilateralSortMerger<>(memoryManager,memory,ioManager,EmptyMutableObjectIterator.get(),parentTask,TestData.getIntIntTupleSerializerFactory(),TestData.getIntIntTupleComparator(),10,2,1.0f,true,false,false,inMemorySorterFactory);
    final Collection<TestingInMemorySorter<?>> inMemorySorters=inMemorySorterFactory.getInMemorySorters();
    assertThat(inMemorySorters,is(not(empty())));
    unilateralSortMerger.close();
    assertThat(unilateralSortMerger.closed,is(true));
    for (    TestingInMemorySorter<?> inMemorySorter : inMemorySorters) {
      assertThat(inMemorySorter.isDisposed(),is(true));
    }
  }
  finally {
    ioManager.shutdown();
    memoryManager.shutdown();
  }
}
