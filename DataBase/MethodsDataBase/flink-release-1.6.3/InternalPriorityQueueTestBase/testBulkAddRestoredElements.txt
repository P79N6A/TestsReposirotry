@Test public void testBulkAddRestoredElements() throws Exception {
  final int testSize=10;
  HashSet<TestElement> elementSet=new HashSet<>(testSize);
  for (int i=0; i < testSize; ++i) {
    elementSet.add(new TestElement(i,i));
  }
  List<TestElement> twoTimesElementSet=new ArrayList<>(elementSet.size() * 2);
  for (  TestElement testElement : elementSet) {
    twoTimesElementSet.add(testElement.deepCopy());
    twoTimesElementSet.add(testElement.deepCopy());
  }
  InternalPriorityQueue<TestElement> priorityQueue=newPriorityQueue(1);
  priorityQueue.addAll(twoTimesElementSet);
  priorityQueue.addAll(elementSet);
  final int expectedSize=testSetSemanticsAgainstDuplicateElements() ? elementSet.size() : 3 * elementSet.size();
  Assert.assertEquals(expectedSize,priorityQueue.size());
  try (final CloseableIterator<TestElement> iterator=priorityQueue.iterator()){
    while (iterator.hasNext()) {
      if (testSetSemanticsAgainstDuplicateElements()) {
        Assert.assertTrue(elementSet.remove(iterator.next()));
      }
 else {
        Assert.assertTrue(elementSet.contains(iterator.next()));
      }
    }
  }
   if (testSetSemanticsAgainstDuplicateElements()) {
    Assert.assertTrue(elementSet.isEmpty());
  }
}
