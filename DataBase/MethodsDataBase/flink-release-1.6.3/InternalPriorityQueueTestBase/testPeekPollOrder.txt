@Test public void testPeekPollOrder(){
  final int initialCapacity=4;
  final int testSize=1000;
  final Comparator<Long> comparator=getTestElementPriorityComparator();
  InternalPriorityQueue<TestElement> priorityQueue=newPriorityQueue(initialCapacity);
  HashSet<TestElement> checkSet=new HashSet<>(testSize);
  insertRandomElements(priorityQueue,checkSet,testSize);
  long lastPriorityValue=getHighestPriorityValueForComparator();
  int lastSize=priorityQueue.size();
  Assert.assertEquals(testSize,lastSize);
  TestElement testElement;
  while ((testElement=priorityQueue.peek()) != null) {
    Assert.assertFalse(priorityQueue.isEmpty());
    Assert.assertEquals(lastSize,priorityQueue.size());
    Assert.assertEquals(testElement,priorityQueue.poll());
    Assert.assertTrue(checkSet.remove(testElement));
    Assert.assertTrue(comparator.compare(testElement.getPriority(),lastPriorityValue) >= 0);
    lastPriorityValue=testElement.getPriority();
    --lastSize;
  }
  Assert.assertTrue(priorityQueue.isEmpty());
  Assert.assertEquals(0,priorityQueue.size());
  Assert.assertEquals(0,checkSet.size());
}
