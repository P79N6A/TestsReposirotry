/** 
 * Verifies that we don't have leakage between different keys.
 */
@Test public void testEventTimeTimerWithState() throws Exception {
  KeyedCoProcessOperator<String,Integer,String,String> operator=new KeyedCoProcessOperator<>(new EventTimeTriggeringStatefulProcessFunction());
  TwoInputStreamOperatorTestHarness<Integer,String,String> testHarness=new KeyedTwoInputStreamOperatorTestHarness<>(operator,new IntToStringKeySelector<>(),new IdentityKeySelector<String>(),BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setup();
  testHarness.open();
  testHarness.processWatermark1(new Watermark(1));
  testHarness.processWatermark2(new Watermark(1));
  testHarness.processElement1(new StreamRecord<>(17,0L));
  testHarness.processElement1(new StreamRecord<>(13,0L));
  testHarness.processWatermark1(new Watermark(2));
  testHarness.processWatermark2(new Watermark(2));
  testHarness.processElement1(new StreamRecord<>(13,1L));
  testHarness.processElement2(new StreamRecord<>("42",1L));
  testHarness.processWatermark1(new Watermark(6));
  testHarness.processWatermark2(new Watermark(6));
  testHarness.processWatermark1(new Watermark(7));
  testHarness.processWatermark2(new Watermark(7));
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  expectedOutput.add(new Watermark(1L));
  expectedOutput.add(new StreamRecord<>("INPUT1:17",0L));
  expectedOutput.add(new StreamRecord<>("INPUT1:13",0L));
  expectedOutput.add(new Watermark(2L));
  expectedOutput.add(new StreamRecord<>("INPUT2:42",1L));
  expectedOutput.add(new StreamRecord<>("STATE:17",6L));
  expectedOutput.add(new Watermark(6L));
  expectedOutput.add(new StreamRecord<>("STATE:42",7L));
  expectedOutput.add(new Watermark(7L));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.close();
}
