@Test public void testSnapshotAndRestore() throws Exception {
  KeyedCoProcessOperator<String,Integer,String,String> operator=new KeyedCoProcessOperator<>(new BothTriggeringProcessFunction());
  TwoInputStreamOperatorTestHarness<Integer,String,String> testHarness=new KeyedTwoInputStreamOperatorTestHarness<>(operator,new IntToStringKeySelector<>(),new IdentityKeySelector<String>(),BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setup();
  testHarness.open();
  testHarness.processElement1(new StreamRecord<>(5,12L));
  testHarness.processElement2(new StreamRecord<>("5",12L));
  OperatorSubtaskState snapshot=testHarness.snapshot(0,0);
  testHarness.close();
  operator=new KeyedCoProcessOperator<>(new BothTriggeringProcessFunction());
  testHarness=new KeyedTwoInputStreamOperatorTestHarness<>(operator,new IntToStringKeySelector<>(),new IdentityKeySelector<String>(),BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setup();
  testHarness.initializeState(snapshot);
  testHarness.open();
  testHarness.setProcessingTime(5);
  testHarness.processWatermark1(new Watermark(6));
  testHarness.processWatermark2(new Watermark(6));
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  expectedOutput.add(new StreamRecord<>("PROC:1777"));
  expectedOutput.add(new StreamRecord<>("EVENT:1777",6L));
  expectedOutput.add(new Watermark(6));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.close();
}
