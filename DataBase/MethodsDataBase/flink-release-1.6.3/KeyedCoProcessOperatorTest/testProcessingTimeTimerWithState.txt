/** 
 * Verifies that we don't have leakage between different keys.
 */
@Test public void testProcessingTimeTimerWithState() throws Exception {
  KeyedCoProcessOperator<String,Integer,String,String> operator=new KeyedCoProcessOperator<>(new ProcessingTimeTriggeringStatefulProcessFunction());
  TwoInputStreamOperatorTestHarness<Integer,String,String> testHarness=new KeyedTwoInputStreamOperatorTestHarness<>(operator,new IntToStringKeySelector<>(),new IdentityKeySelector<String>(),BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setup();
  testHarness.open();
  testHarness.setProcessingTime(1);
  testHarness.processElement1(new StreamRecord<>(17));
  testHarness.processElement1(new StreamRecord<>(13));
  testHarness.setProcessingTime(2);
  testHarness.processElement1(new StreamRecord<>(13));
  testHarness.processElement2(new StreamRecord<>("42"));
  testHarness.setProcessingTime(6);
  testHarness.setProcessingTime(7);
  ConcurrentLinkedQueue<Object> expectedOutput=new ConcurrentLinkedQueue<>();
  expectedOutput.add(new StreamRecord<>("INPUT1:17"));
  expectedOutput.add(new StreamRecord<>("INPUT1:13"));
  expectedOutput.add(new StreamRecord<>("INPUT2:42"));
  expectedOutput.add(new StreamRecord<>("STATE:17"));
  expectedOutput.add(new StreamRecord<>("STATE:42"));
  TestHarnessUtil.assertOutputEquals("Output was not correct.",expectedOutput,testHarness.getOutput());
  testHarness.close();
}
