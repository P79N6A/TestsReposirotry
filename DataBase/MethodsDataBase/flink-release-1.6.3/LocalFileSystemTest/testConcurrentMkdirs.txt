@Test public void testConcurrentMkdirs() throws Exception {
  final FileSystem fs=FileSystem.getLocalFileSystem();
  final File root=temporaryFolder.getRoot();
  final int directoryDepth=10;
  final int concurrentOperations=10;
  final Collection<File> targetDirectories=createTargetDirectories(root,directoryDepth,concurrentOperations);
  final ExecutorService executor=Executors.newFixedThreadPool(concurrentOperations);
  final CyclicBarrier cyclicBarrier=new CyclicBarrier(concurrentOperations);
  try {
    final Collection<CompletableFuture<Void>> mkdirsFutures=new ArrayList<>(concurrentOperations);
    for (    File targetDirectory : targetDirectories) {
      final CompletableFuture<Void> mkdirsFuture=CompletableFuture.runAsync(() -> {
        try {
          cyclicBarrier.await();
          assertThat(fs.mkdirs(Path.fromLocalFile(targetDirectory)),is(true));
        }
 catch (        Exception e) {
          throw new CompletionException(e);
        }
      }
,executor);
      mkdirsFutures.add(mkdirsFuture);
    }
    final CompletableFuture<Void> allFutures=CompletableFuture.allOf(mkdirsFutures.toArray(new CompletableFuture[concurrentOperations]));
    allFutures.get();
  }
  finally {
    final long timeout=10000L;
    ExecutorUtils.gracefulShutdown(timeout,TimeUnit.MILLISECONDS,executor);
  }
}
