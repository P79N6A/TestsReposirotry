/** 
 * Tests that the checkpoint does not exist in the store when we fail to add it into the store (i.e., there exists an exception thrown by the method).
 */
@Test public void testAddCheckpointWithFailedRemove() throws Exception {
  final CuratorFramework client=mock(CuratorFramework.class,Mockito.RETURNS_DEEP_STUBS);
  final RetrievableStateStorageHelper<CompletedCheckpoint> storageHelperMock=mock(RetrievableStateStorageHelper.class);
  ZooKeeperStateHandleStore<CompletedCheckpoint> zookeeperStateHandleStoreMock=spy(new ZooKeeperStateHandleStore<>(client,storageHelperMock));
  whenNew(ZooKeeperStateHandleStore.class).withAnyArguments().thenReturn(zookeeperStateHandleStoreMock);
  doAnswer(new Answer<RetrievableStateHandle<CompletedCheckpoint>>(){
    @Override public RetrievableStateHandle<CompletedCheckpoint> answer(    InvocationOnMock invocationOnMock) throws Throwable {
      CompletedCheckpoint checkpoint=(CompletedCheckpoint)invocationOnMock.getArguments()[1];
      RetrievableStateHandle<CompletedCheckpoint> retrievableStateHandle=mock(RetrievableStateHandle.class);
      when(retrievableStateHandle.retrieveState()).thenReturn(checkpoint);
      return retrievableStateHandle;
    }
  }
).when(zookeeperStateHandleStoreMock).addAndLock(anyString(),any(CompletedCheckpoint.class));
  doThrow(new Exception()).when(zookeeperStateHandleStoreMock).releaseAndTryRemove(anyString());
  final int numCheckpointsToRetain=1;
  final String checkpointsPath="foobar";
  final RetrievableStateStorageHelper<CompletedCheckpoint> stateSotrage=mock(RetrievableStateStorageHelper.class);
  ZooKeeperCompletedCheckpointStore zooKeeperCompletedCheckpointStore=new ZooKeeperCompletedCheckpointStore(numCheckpointsToRetain,client,checkpointsPath,stateSotrage,Executors.directExecutor());
  for (long i=0; i <= numCheckpointsToRetain; ++i) {
    CompletedCheckpoint checkpointToAdd=mock(CompletedCheckpoint.class);
    doReturn(i).when(checkpointToAdd).getCheckpointID();
    doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates();
    try {
      zooKeeperCompletedCheckpointStore.addCheckpoint(checkpointToAdd);
      List<CompletedCheckpoint> addedCheckpoints=zooKeeperCompletedCheckpointStore.getAllCheckpoints();
      assertTrue(addedCheckpoints.contains(checkpointToAdd));
    }
 catch (    Exception e) {
      List<CompletedCheckpoint> addedCheckpoints=zooKeeperCompletedCheckpointStore.getAllCheckpoints();
      assertFalse(addedCheckpoints.contains(checkpointToAdd));
    }
  }
}
