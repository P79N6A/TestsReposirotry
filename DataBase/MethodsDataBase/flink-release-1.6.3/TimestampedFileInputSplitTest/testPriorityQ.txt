@Test public void testPriorityQ(){
  TimestampedFileInputSplit richFirstSplit=new TimestampedFileInputSplit(0,3,new Path("test/test1"),0,100,null);
  TimestampedFileInputSplit richSecondSplit=new TimestampedFileInputSplit(10,2,new Path("test/test2"),0,100,null);
  TimestampedFileInputSplit richThirdSplit=new TimestampedFileInputSplit(10,1,new Path("test/test2"),0,100,null);
  TimestampedFileInputSplit richForthSplit=new TimestampedFileInputSplit(11,0,new Path("test/test3"),0,100,null);
  TimestampedFileInputSplit richFifthSplit=new TimestampedFileInputSplit(11,1,new Path("test/test3"),0,100,null);
  Queue<TimestampedFileInputSplit> pendingSplits=new PriorityQueue<>();
  pendingSplits.add(richSecondSplit);
  pendingSplits.add(richForthSplit);
  pendingSplits.add(richFirstSplit);
  pendingSplits.add(richFifthSplit);
  pendingSplits.add(richFifthSplit);
  pendingSplits.add(richThirdSplit);
  List<TimestampedFileInputSplit> actualSortedSplits=new ArrayList<>();
  while (true) {
    actualSortedSplits.add(pendingSplits.poll());
    if (pendingSplits.isEmpty()) {
      break;
    }
  }
  List<TimestampedFileInputSplit> expectedSortedSplits=new ArrayList<>();
  expectedSortedSplits.add(richFirstSplit);
  expectedSortedSplits.add(richThirdSplit);
  expectedSortedSplits.add(richSecondSplit);
  expectedSortedSplits.add(richForthSplit);
  expectedSortedSplits.add(richFifthSplit);
  expectedSortedSplits.add(richFifthSplit);
  Assert.assertArrayEquals(expectedSortedSplits.toArray(),actualSortedSplits.toArray());
}
