@Test public void testFileCleanup() throws Exception {
  final Path dir=temporaryFolder.newFolder().toPath();
  final Path file=dir.resolve("file");
  Files.createFile(file);
  final String restAddress="http://localhost:1234";
  RestfulGateway mockRestfulGateway=TestingRestfulGateway.newBuilder().setRestAddress(restAddress).build();
  final GatewayRetriever<RestfulGateway> mockGatewayRetriever=() -> CompletableFuture.completedFuture(mockRestfulGateway);
  CompletableFuture<Void> requestProcessingCompleteFuture=new CompletableFuture<>();
  TestHandler handler=new TestHandler(requestProcessingCompleteFuture,CompletableFuture.completedFuture(restAddress),mockGatewayRetriever);
  RouteResult<?> routeResult=new RouteResult<>("","",Collections.emptyMap(),Collections.emptyMap(),"");
  HttpRequest request=new DefaultFullHttpRequest(HttpVersion.HTTP_1_1,HttpMethod.GET,TestHandler.TestHeaders.INSTANCE.getTargetRestEndpointURL(),Unpooled.wrappedBuffer(new byte[0]));
  RoutedRequest<?> routerRequest=new RoutedRequest<>(routeResult,request);
  Attribute<FileUploads> attribute=new SimpleAttribute();
  attribute.set(new FileUploads(dir));
  Channel channel=mock(Channel.class);
  when(channel.attr(any(AttributeKey.class))).thenReturn(attribute);
  ChannelHandlerContext context=mock(ChannelHandlerContext.class);
  when(context.channel()).thenReturn(channel);
  handler.respondAsLeader(context,routerRequest,mockRestfulGateway);
  Assert.assertTrue(Files.exists(file));
  requestProcessingCompleteFuture.complete(null);
  Assert.assertFalse(Files.exists(file));
}
