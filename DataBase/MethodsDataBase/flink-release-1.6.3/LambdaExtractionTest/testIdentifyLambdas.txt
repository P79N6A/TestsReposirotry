@Test @SuppressWarnings({"Convert2Lambda","Anonymous2MethodRef"}) public void testIdentifyLambdas() throws TypeExtractionException {
  MapFunction<?,?> anonymousFromInterface=new MapFunction<String,Integer>(){
    @Override public Integer map(    String value){
      return Integer.parseInt(value);
    }
  }
;
  MapFunction<?,?> anonymousFromClass=new RichMapFunction<String,Integer>(){
    @Override public Integer map(    String value){
      return Integer.parseInt(value);
    }
  }
;
  MapFunction<?,?> fromProperClass=new StaticMapper();
  MapFunction<?,?> fromDerived=new ToTuple<Integer>(){
    @Override public Tuple2<Integer,Long> map(    Integer value){
      return new Tuple2<>(value,1L);
    }
  }
;
  MapFunction<String,Integer> staticLambda=Integer::parseInt;
  MapFunction<Integer,String> instanceLambda=Object::toString;
  MapFunction<String,Integer> constructorLambda=Integer::new;
  assertNull(checkAndExtractLambda(anonymousFromInterface));
  assertNull(checkAndExtractLambda(anonymousFromClass));
  assertNull(checkAndExtractLambda(fromProperClass));
  assertNull(checkAndExtractLambda(fromDerived));
  assertNotNull(checkAndExtractLambda(staticLambda));
  assertNotNull(checkAndExtractLambda(instanceLambda));
  assertNotNull(checkAndExtractLambda(constructorLambda));
  assertNotNull(checkAndExtractLambda(STATIC_LAMBDA));
}
