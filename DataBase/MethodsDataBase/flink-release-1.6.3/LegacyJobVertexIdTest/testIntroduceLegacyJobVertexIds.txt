@Test public void testIntroduceLegacyJobVertexIds() throws Exception {
  JobVertexID defaultId=new JobVertexID();
  JobVertexID legacyId1=new JobVertexID();
  JobVertexID legacyId2=new JobVertexID();
  JobVertex jobVertex=new JobVertex("test",defaultId,Arrays.asList(legacyId1,legacyId2),new ArrayList<OperatorID>(),new ArrayList<OperatorID>());
  jobVertex.setInvokableClass(AbstractInvokable.class);
  ExecutionGraph executionGraph=new ExecutionGraph(mock(ScheduledExecutorService.class),mock(Executor.class),new JobID(),"test",mock(Configuration.class),mock(SerializedValue.class),Time.seconds(1),mock(RestartStrategy.class),mock(SlotProvider.class));
  ExecutionJobVertex executionJobVertex=new ExecutionJobVertex(executionGraph,jobVertex,1,Time.seconds(1));
  Map<JobVertexID,ExecutionJobVertex> idToVertex=new HashMap<>();
  idToVertex.put(executionJobVertex.getJobVertexId(),executionJobVertex);
  Assert.assertEquals(executionJobVertex,idToVertex.get(defaultId));
  Assert.assertNull(idToVertex.get(legacyId1));
  Assert.assertNull(idToVertex.get(legacyId2));
  idToVertex=ExecutionJobVertex.includeLegacyJobVertexIDs(idToVertex);
  Assert.assertEquals(3,idToVertex.size());
  Assert.assertEquals(executionJobVertex,idToVertex.get(defaultId));
  Assert.assertEquals(executionJobVertex,idToVertex.get(legacyId1));
  Assert.assertEquals(executionJobVertex,idToVertex.get(legacyId2));
}
