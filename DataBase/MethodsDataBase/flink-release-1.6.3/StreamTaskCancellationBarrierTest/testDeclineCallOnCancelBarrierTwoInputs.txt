/** 
 * This test verifies (for two input tasks) that the Stream tasks react the following way to receiving a checkpoint cancellation barrier: - send a "decline checkpoint" notification out (to the JobManager) - emit a cancellation barrier downstream.
 */
@Test public void testDeclineCallOnCancelBarrierTwoInputs() throws Exception {
  TwoInputStreamTaskTestHarness<String,String,String> testHarness=new TwoInputStreamTaskTestHarness<>(TwoInputStreamTask::new,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO,BasicTypeInfo.STRING_TYPE_INFO);
  testHarness.setupOutputForSingletonOperatorChain();
  StreamConfig streamConfig=testHarness.getStreamConfig();
  CoStreamMap<String,String,String> op=new CoStreamMap<>(new UnionCoMap());
  streamConfig.setStreamOperator(op);
  streamConfig.setOperatorID(new OperatorID());
  StreamMockEnvironment environment=spy(testHarness.createEnvironment());
  testHarness.invoke(environment);
  testHarness.waitForTaskRunning();
  testHarness.processEvent(new CancelCheckpointMarker(2L),0,0);
  testHarness.processEvent(new CancelCheckpointMarker(2L),1,0);
  testHarness.waitForInputProcessing();
  verify(environment,times(1)).declineCheckpoint(eq(2L),any(CheckpointDeclineOnCancellationBarrierException.class));
  Object result=testHarness.getOutput().poll();
  assertNotNull("nothing emitted",result);
  assertTrue("wrong type emitted",result instanceof CancelCheckpointMarker);
  assertEquals("wrong checkpoint id",2L,((CancelCheckpointMarker)result).getCheckpointId());
  testHarness.endInput();
  testHarness.waitForTaskCompletion();
}
