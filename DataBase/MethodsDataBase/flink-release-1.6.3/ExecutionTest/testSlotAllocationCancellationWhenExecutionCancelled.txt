/** 
 * Tests that a slot allocation from a  {@link SlotProvider} is cancelled if the{@link Execution} is cancelled.
 */
@Test public void testSlotAllocationCancellationWhenExecutionCancelled() throws Exception {
  final JobVertexID jobVertexId=new JobVertexID();
  final JobVertex jobVertex=new JobVertex("test vertex",jobVertexId);
  jobVertex.setInvokableClass(NoOpInvokable.class);
  final ProgrammedSlotProvider slotProvider=new ProgrammedSlotProvider(1);
  final CompletableFuture<LogicalSlot> slotFuture=new CompletableFuture<>();
  slotProvider.addSlot(jobVertexId,0,slotFuture);
  final ExecutionGraph executionGraph=ExecutionGraphTestUtils.createSimpleTestGraph(new JobID(),slotProvider,new NoRestartStrategy(),jobVertex);
  final ExecutionJobVertex executionJobVertex=executionGraph.getJobVertex(jobVertexId);
  final Execution currentExecutionAttempt=executionJobVertex.getTaskVertices()[0].getCurrentExecutionAttempt();
  final CompletableFuture<Execution> allocationFuture=currentExecutionAttempt.allocateAndAssignSlotForExecution(slotProvider,false,LocationPreferenceConstraint.ALL,Collections.emptySet(),TestingUtils.infiniteTime());
  assertThat(allocationFuture.isDone(),is(false));
  assertThat(slotProvider.getSlotRequestedFuture(jobVertexId,0).get(),is(true));
  final Set<SlotRequestId> slotRequests=slotProvider.getSlotRequests();
  assertThat(slotRequests,hasSize(1));
  assertThat(currentExecutionAttempt.getState(),is(ExecutionState.SCHEDULED));
  currentExecutionAttempt.cancel();
  assertThat(currentExecutionAttempt.getState(),is(ExecutionState.CANCELED));
  assertThat(allocationFuture.isCompletedExceptionally(),is(true));
  final Set<SlotRequestId> canceledSlotRequests=slotProvider.getCanceledSlotRequests();
  assertThat(canceledSlotRequests,equalTo(slotRequests));
}
