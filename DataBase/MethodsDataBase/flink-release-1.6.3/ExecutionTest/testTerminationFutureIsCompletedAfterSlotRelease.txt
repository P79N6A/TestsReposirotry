/** 
 * Checks that the  {@link Execution} termination future is only completed after theassigned slot has been released. <p>NOTE: This test only fails spuriously without the fix of this commit. Thus, one has to execute this test multiple times to see the failure.
 */
@Test public void testTerminationFutureIsCompletedAfterSlotRelease() throws Exception {
  final JobVertex jobVertex=createNoOpJobVertex();
  final JobVertexID jobVertexId=jobVertex.getID();
  final SingleSlotTestingSlotOwner slotOwner=new SingleSlotTestingSlotOwner();
  final ProgrammedSlotProvider slotProvider=createProgrammedSlotProvider(1,Collections.singleton(jobVertexId),slotOwner);
  ExecutionGraph executionGraph=ExecutionGraphTestUtils.createSimpleTestGraph(new JobID(),slotProvider,new NoRestartStrategy(),jobVertex);
  ExecutionJobVertex executionJobVertex=executionGraph.getJobVertex(jobVertexId);
  ExecutionVertex executionVertex=executionJobVertex.getTaskVertices()[0];
  executionVertex.scheduleForExecution(slotProvider,false,LocationPreferenceConstraint.ANY,Collections.emptySet()).get();
  Execution currentExecutionAttempt=executionVertex.getCurrentExecutionAttempt();
  CompletableFuture<LogicalSlot> returnedSlotFuture=slotOwner.getReturnedSlotFuture();
  CompletableFuture<?> terminationFuture=executionVertex.cancel();
  CompletableFuture.runAsync(() -> currentExecutionAttempt.cancelingComplete(),TestingUtils.defaultExecutor());
  Thread.yield();
  CompletableFuture<Boolean> restartFuture=terminationFuture.thenApply(ignored -> {
    assertTrue(returnedSlotFuture.isDone());
    return true;
  }
);
  restartFuture.get();
}
