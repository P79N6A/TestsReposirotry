@Test public void testAggregatingTumblingProcessingTimeWindow(){
  final int numElements=3000;
  try {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(PARALLELISM);
    env.setStreamTimeCharacteristic(timeCharacteristic);
    env.getConfig().setAutoWatermarkInterval(10);
    env.enableCheckpointing(100);
    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1,0));
    env.getConfig().disableSysoutLogging();
    SinkValidatorUpdaterAndChecker updaterAndChecker=new SinkValidatorUpdaterAndChecker(numElements,1);
    env.addSource(new FailingSource(new Generator(),numElements,timeCharacteristic)).map(new MapFunction<Tuple2<Long,IntType>,Tuple2<Long,IntType>>(){
      @Override public Tuple2<Long,IntType> map(      Tuple2<Long,IntType> value){
        value.f1.value=1;
        return value;
      }
    }
).rebalance().keyBy(0).timeWindow(Time.of(100,MILLISECONDS)).reduce(new ReduceFunction<Tuple2<Long,IntType>>(){
      @Override public Tuple2<Long,IntType> reduce(      Tuple2<Long,IntType> a,      Tuple2<Long,IntType> b){
        return new Tuple2<>(a.f0,new IntType(1));
      }
    }
).addSink(new ValidatingSink<>(updaterAndChecker,updaterAndChecker,timeCharacteristic)).setParallelism(1);
    tryExecute(env,"Aggregating Tumbling Window Test");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
