@Test public void testTumblingProcessingTimeWindow(){
  final int numElements=3000;
  try {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(PARALLELISM);
    env.setStreamTimeCharacteristic(timeCharacteristic);
    env.getConfig().setAutoWatermarkInterval(10);
    env.enableCheckpointing(100);
    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1,0));
    env.getConfig().disableSysoutLogging();
    SinkValidatorUpdaterAndChecker updaterAndChecker=new SinkValidatorUpdaterAndChecker(numElements,1);
    env.addSource(new FailingSource(new Generator(),numElements,timeCharacteristic)).rebalance().keyBy(0).timeWindow(Time.of(100,MILLISECONDS)).apply(new RichWindowFunction<Tuple2<Long,IntType>,Tuple2<Long,IntType>,Tuple,TimeWindow>(){
      private boolean open=false;
      @Override public void open(      Configuration parameters){
        assertEquals(PARALLELISM,getRuntimeContext().getNumberOfParallelSubtasks());
        open=true;
      }
      @Override public void apply(      Tuple tuple,      TimeWindow window,      Iterable<Tuple2<Long,IntType>> values,      Collector<Tuple2<Long,IntType>> out){
        assertTrue(open);
        for (        Tuple2<Long,IntType> value : values) {
          assertEquals(value.f0.intValue(),value.f1.value);
          out.collect(new Tuple2<>(value.f0,new IntType(1)));
        }
      }
    }
).addSink(new ValidatingSink<>(updaterAndChecker,updaterAndChecker,timeCharacteristic)).setParallelism(1);
    tryExecute(env,"Tumbling Window Test");
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail(e.getMessage());
  }
}
