/** 
 * Test restoring from savepoints before version Flink 1.3 should fail if discovery is enabled.
 */
@Test public void testRestoreFailsWithNonEmptyPreFlink13StatesIfDiscoveryEnabled() throws Exception {
  assumeTrue(testMigrateVersion == MigrationVersion.v1_3 || testMigrateVersion == MigrationVersion.v1_2);
  final List<KafkaTopicPartition> partitions=new ArrayList<>(PARTITION_STATE.keySet());
  final DummyFlinkKafkaConsumer<String> consumerFunction=new DummyFlinkKafkaConsumer<>(partitions,1000L);
  StreamSource<String,DummyFlinkKafkaConsumer<String>> consumerOperator=new StreamSource<>(consumerFunction);
  final AbstractStreamOperatorTestHarness<String> testHarness=new AbstractStreamOperatorTestHarness<>(consumerOperator,1,1,0);
  testHarness.setTimeCharacteristic(TimeCharacteristic.ProcessingTime);
  testHarness.setup();
  try {
    MigrationTestUtil.restoreFromSnapshot(testHarness,OperatorSnapshotUtil.getResourceFilename("kafka-consumer-migration-test-flink" + testMigrateVersion + "-snapshot"),testMigrateVersion);
    fail("Restore from savepoints from version before Flink 1.3.x should have failed if discovery is enabled.");
  }
 catch (  Exception e) {
    Assert.assertTrue(e instanceof IllegalArgumentException);
  }
}
