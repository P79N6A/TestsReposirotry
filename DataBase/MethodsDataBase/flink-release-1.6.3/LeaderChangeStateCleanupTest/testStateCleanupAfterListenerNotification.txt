/** 
 * Tests that a job is properly canceled in the event of a leader change. However, this time only the TMs are notified about the changing leader. This should be enough to cancel the currently running job, though.
 */
@Test public void testStateCleanupAfterListenerNotification() throws Exception {
  UUID leaderSessionID=UUID.randomUUID();
  UUID newLeaderSessionID=UUID.randomUUID();
  highAvailabilityServices.grantLeadership(jobId,0,leaderSessionID);
  highAvailabilityServices.notifyRetrievers(jobId,0,leaderSessionID);
  cluster.waitForTaskManagersToBeRegistered(timeout);
  cluster.submitJobDetached(job);
  ActorGateway jm=cluster.getLeaderGateway(timeout);
  Future<Object> wait=jm.ask(new WaitForAllVerticesToBeRunningOrFinished(job.getJobID()),timeout);
  Await.ready(wait,timeout);
  Future<Object> jobRemoval=jm.ask(new NotifyWhenJobRemoved(job.getJobID()),timeout);
  highAvailabilityServices.notifyRetrievers(jobId,1,newLeaderSessionID);
  Await.ready(jobRemoval,timeout);
}
