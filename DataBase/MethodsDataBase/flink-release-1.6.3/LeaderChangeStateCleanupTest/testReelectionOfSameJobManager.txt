/** 
 * Tests that the same JobManager can be reelected as the leader. Even though, the same JM is elected as the next leader, all currently running jobs should be canceled properly and all TMs should disconnect from the leader and then reconnect to it.
 */
@Test public void testReelectionOfSameJobManager() throws Exception {
  UUID leaderSessionID=UUID.randomUUID();
  UUID newLeaderSessionID=UUID.randomUUID();
  FiniteDuration shortTimeout=new FiniteDuration(10,TimeUnit.SECONDS);
  highAvailabilityServices.grantLeadership(jobId,0,leaderSessionID);
  highAvailabilityServices.notifyRetrievers(jobId,0,leaderSessionID);
  cluster.waitForTaskManagersToBeRegistered(timeout);
  cluster.submitJobDetached(job);
  ActorGateway jm=cluster.getLeaderGateway(timeout);
  Future<Object> wait=jm.ask(new WaitForAllVerticesToBeRunningOrFinished(job.getJobID()),timeout);
  Await.ready(wait,timeout);
  Future<Object> jobRemoval=jm.ask(new NotifyWhenJobRemoved(job.getJobID()),timeout);
  LOG.info("Make JM(0) again the leader. This should first revoke the leadership.");
  highAvailabilityServices.grantLeadership(jobId,0,newLeaderSessionID);
  Await.ready(jobRemoval,timeout);
  LOG.info("Job removed.");
  try {
    cluster.waitForTaskManagersToBeRegistered(shortTimeout);
    fail("TaskManager should not be able to register at JobManager.");
  }
 catch (  TimeoutException e) {
  }
  LOG.info("Notify TMs about the new (old) leader.");
  highAvailabilityServices.notifyRetrievers(jobId,0,newLeaderSessionID);
  cluster.waitForTaskManagersToBeRegistered(timeout);
  ActorGateway leaderGateway=cluster.getLeaderGateway(timeout);
  Tasks.BlockingOnceReceiver$.MODULE$.blocking_$eq(false);
  cluster.submitJobAndWait(job,false,timeout);
}
