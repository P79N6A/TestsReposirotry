@Test public void getStores() throws Exception {
{
    HandlerRequest<EmptyRequestBody,P> request=new HandlerRequest<>(EmptyRequestBody.getInstance(),handler.getMessageHeaders().getUnresolvedMessageParameters(),pathParameters,Collections.emptyMap());
    Collection<? extends MetricStore.ComponentMetricStore> subStores=handler.getStores(store,request);
    assertEquals(3,subStores.size());
    List<String> sortedMetrics1=subStores.stream().map(subStore -> subStore.getMetric("abc.metric1")).filter(Objects::nonNull).sorted().collect(Collectors.toList());
    assertEquals(2,sortedMetrics1.size());
    assertEquals("1",sortedMetrics1.get(0));
    assertEquals("3",sortedMetrics1.get(1));
    List<String> sortedMetrics2=subStores.stream().map(subStore -> subStore.getMetric("abc.metric2")).filter(Objects::nonNull).sorted().collect(Collectors.toList());
    assertEquals(1,sortedMetrics2.size());
    assertEquals("5",sortedMetrics2.get(0));
  }
{
    Tuple2<String,List<String>> filter=getFilter();
    Map<String,List<String>> queryParameters=new HashMap<>(4);
    queryParameters.put(filter.f0,filter.f1);
    HandlerRequest<EmptyRequestBody,P> request=new HandlerRequest<>(EmptyRequestBody.getInstance(),handler.getMessageHeaders().getUnresolvedMessageParameters(),pathParameters,queryParameters);
    Collection<? extends MetricStore.ComponentMetricStore> subStores=handler.getStores(store,request);
    assertEquals(2,subStores.size());
    List<String> sortedMetrics1=subStores.stream().map(subStore -> subStore.getMetric("abc.metric1")).filter(Objects::nonNull).sorted().collect(Collectors.toList());
    assertEquals(1,sortedMetrics1.size());
    assertEquals("1",sortedMetrics1.get(0));
    List<String> sortedMetrics2=subStores.stream().map(subStore -> subStore.getMetric("abc.metric2")).filter(Objects::nonNull).sorted().collect(Collectors.toList());
    assertEquals(1,sortedMetrics2.size());
    assertEquals("5",sortedMetrics2.get(0));
  }
}
