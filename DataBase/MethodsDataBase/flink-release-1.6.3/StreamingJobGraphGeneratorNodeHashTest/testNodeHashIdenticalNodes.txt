/** 
 * Tests that there are no collisions with two identical intermediate nodes connected to the same predecessor. <pre> /-> [ (map) ] -> [ (sink) ] [ (src) ] -+ \-> [ (map) ] -> [ (sink) ] </pre>
 */
@Test public void testNodeHashIdenticalNodes() throws Exception {
  StreamExecutionEnvironment env=StreamExecutionEnvironment.createLocalEnvironment();
  env.setParallelism(4);
  env.disableOperatorChaining();
  DataStream<String> src=env.addSource(new NoOpSourceFunction());
  src.map(new NoOpMapFunction()).addSink(new NoOpSinkFunction());
  src.map(new NoOpMapFunction()).addSink(new NoOpSinkFunction());
  JobGraph jobGraph=env.getStreamGraph().getJobGraph();
  Set<JobVertexID> vertexIds=new HashSet<>();
  for (  JobVertex vertex : jobGraph.getVertices()) {
    assertTrue(vertexIds.add(vertex.getID()));
  }
}
