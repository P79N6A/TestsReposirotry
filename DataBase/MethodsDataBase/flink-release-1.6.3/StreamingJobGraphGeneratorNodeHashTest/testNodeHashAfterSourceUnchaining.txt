/** 
 * Tests that (un)chaining affects the node hash (for sources). <pre> A (chained): [ (src0) -> (map) -> (filter) -> (sink) ] B (unchained): [ (src0) ] -> [ (map) -> (filter) -> (sink) ] </pre> <p>The hashes for the single vertex in A and the source vertex in B need to be different.
 */
@Test public void testNodeHashAfterSourceUnchaining() throws Exception {
  StreamExecutionEnvironment env=StreamExecutionEnvironment.createLocalEnvironment();
  env.setParallelism(4);
  env.addSource(new NoOpSourceFunction()).map(new NoOpMapFunction()).filter(new NoOpFilterFunction()).addSink(new NoOpSinkFunction());
  JobGraph jobGraph=env.getStreamGraph().getJobGraph();
  JobVertexID sourceId=jobGraph.getVerticesSortedTopologicallyFromSources().get(0).getID();
  env=StreamExecutionEnvironment.createLocalEnvironment();
  env.setParallelism(4);
  env.addSource(new NoOpSourceFunction()).map(new NoOpMapFunction()).startNewChain().filter(new NoOpFilterFunction()).addSink(new NoOpSinkFunction());
  jobGraph=env.getStreamGraph().getJobGraph();
  JobVertexID unchainedSourceId=jobGraph.getVerticesSortedTopologicallyFromSources().get(0).getID();
  assertNotEquals(sourceId,unchainedSourceId);
}
