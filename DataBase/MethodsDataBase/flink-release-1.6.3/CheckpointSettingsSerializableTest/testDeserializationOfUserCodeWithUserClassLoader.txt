@Test public void testDeserializationOfUserCodeWithUserClassLoader() throws Exception {
  final ClassLoader classLoader=new URLClassLoader(new URL[0],getClass().getClassLoader());
  final Serializable outOfClassPath=CommonTestUtils.createObjectForClassNotInClassPath(classLoader);
  final MasterTriggerRestoreHook.Factory[] hooks={new TestFactory(outOfClassPath)};
  final SerializedValue<MasterTriggerRestoreHook.Factory[]> serHooks=new SerializedValue<>(hooks);
  final JobCheckpointingSettings checkpointingSettings=new JobCheckpointingSettings(Collections.<JobVertexID>emptyList(),Collections.<JobVertexID>emptyList(),Collections.<JobVertexID>emptyList(),new CheckpointCoordinatorConfiguration(1000L,10000L,0L,1,CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,true),new SerializedValue<StateBackend>(new CustomStateBackend(outOfClassPath)),serHooks);
  final JobGraph jobGraph=new JobGraph(new JobID(),"test job");
  jobGraph.setSnapshotSettings(checkpointingSettings);
  final JobGraph copy=CommonTestUtils.createCopySerializable(jobGraph);
  final Time timeout=Time.seconds(10L);
  final ExecutionGraph eg=ExecutionGraphBuilder.buildGraph(null,copy,new Configuration(),TestingUtils.defaultExecutor(),TestingUtils.defaultExecutor(),mock(SlotProvider.class),classLoader,new StandaloneCheckpointRecoveryFactory(),timeout,new NoRestartStrategy(),new UnregisteredMetricsGroup(),10,VoidBlobWriter.getInstance(),timeout,log);
  assertEquals(1,eg.getCheckpointCoordinator().getNumberOfRegisteredMasterHooks());
  assertTrue(jobGraph.getCheckpointingSettings().getDefaultStateBackend().deserializeValue(classLoader) instanceof CustomStateBackend);
}
