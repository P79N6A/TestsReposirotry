@Test public void testReducingWindow() throws Exception {
  WindowAssigner<Integer,TimeWindow> mockAssigner=mockTimeWindowAssigner();
  Trigger<Integer,TimeWindow> mockTrigger=mockTrigger();
  InternalWindowFunction<Integer,Void,Integer,TimeWindow> mockWindowFunction=mockWindowFunction();
  ReducingStateDescriptor<Integer> intReduceSumDescriptor=new ReducingStateDescriptor<>("int-reduce",new ReduceFunction<Integer>(){
    private static final long serialVersionUID=1L;
    @Override public Integer reduce(    Integer a,    Integer b) throws Exception {
      return a + b;
    }
  }
,IntSerializer.INSTANCE);
  final ValueStateDescriptor<String> valueStateDescriptor=new ValueStateDescriptor<>("string-state",StringSerializer.INSTANCE);
  KeyedOneInputStreamOperatorTestHarness<Integer,Integer,Void> testHarness=createWindowOperator(mockAssigner,mockTrigger,0L,intReduceSumDescriptor,mockWindowFunction);
  testHarness.open();
  when(mockAssigner.assignWindows(anyInt(),anyLong(),anyAssignerContext())).thenReturn(Arrays.asList(new TimeWindow(2,4),new TimeWindow(0,2)));
  assertEquals(0,testHarness.getOutput().size());
  assertEquals(0,testHarness.numKeyedStateEntries());
  testHarness.processElement(new StreamRecord<>(1,0L));
  testHarness.processElement(new StreamRecord<>(1,0L));
  doAnswer(new Answer<TriggerResult>(){
    @Override public TriggerResult answer(    InvocationOnMock invocation) throws Exception {
      TimeWindow window=(TimeWindow)invocation.getArguments()[2];
      Trigger.TriggerContext context=(Trigger.TriggerContext)invocation.getArguments()[3];
      context.registerEventTimeTimer(window.getEnd());
      context.getPartitionedState(valueStateDescriptor).update("hello");
      return TriggerResult.FIRE;
    }
  }
).when(mockTrigger).onElement(Matchers.<Integer>anyObject(),anyLong(),anyTimeWindow(),anyTriggerContext());
  testHarness.processElement(new StreamRecord<>(1,0L));
  verify(mockWindowFunction,times(2)).process(eq(1),anyTimeWindow(),anyInternalWindowContext(),anyInt(),WindowOperatorContractTest.<Void>anyCollector());
  verify(mockWindowFunction,times(1)).process(eq(1),eq(new TimeWindow(0,2)),anyInternalWindowContext(),eq(3),WindowOperatorContractTest.<Void>anyCollector());
  verify(mockWindowFunction,times(1)).process(eq(1),eq(new TimeWindow(2,4)),anyInternalWindowContext(),eq(3),WindowOperatorContractTest.<Void>anyCollector());
  verify(mockTrigger,never()).clear(anyTimeWindow(),anyTriggerContext());
  assertEquals(4,testHarness.numKeyedStateEntries());
  assertEquals(4,testHarness.numEventTimeTimers());
}
