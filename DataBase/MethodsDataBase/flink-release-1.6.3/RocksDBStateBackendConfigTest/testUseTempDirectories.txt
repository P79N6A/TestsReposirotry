/** 
 * This tests whether the RocksDB backends uses the temp directories that are provided from the  {@link Environment} when no db storage path is set.
 */
@Test public void testUseTempDirectories() throws Exception {
  String checkpointPath=tempFolder.newFolder().toURI().toString();
  RocksDBStateBackend rocksDbBackend=new RocksDBStateBackend(checkpointPath);
  File dir1=tempFolder.newFolder();
  File dir2=tempFolder.newFolder();
  File[] tempDirs=new File[]{dir1,dir2};
  assertNull(rocksDbBackend.getDbStoragePaths());
  Environment env=getMockEnvironment(tempDirs);
  RocksDBKeyedStateBackend<Integer> keyedBackend=(RocksDBKeyedStateBackend<Integer>)rocksDbBackend.createKeyedStateBackend(env,env.getJobID(),"test_op",IntSerializer.INSTANCE,1,new KeyGroupRange(0,0),env.getTaskKvStateRegistry());
  try {
    File instanceBasePath=keyedBackend.getInstanceBasePath();
    assertThat(instanceBasePath.getAbsolutePath(),anyOf(startsWith(dir1.getAbsolutePath()),startsWith(dir2.getAbsolutePath())));
  }
  finally {
    IOUtils.closeQuietly(keyedBackend);
    keyedBackend.dispose();
  }
}
