@Test public void testConfigureTimerService() throws Exception {
  Assert.assertEquals("state.backend.rocksdb.timer-service.factory",RocksDBOptions.TIMER_SERVICE_FACTORY.key());
  Assert.assertEquals(2,RocksDBStateBackend.PriorityQueueStateType.values().length);
  Assert.assertEquals("ROCKSDB",RocksDBStateBackend.PriorityQueueStateType.ROCKSDB.toString());
  Assert.assertEquals("HEAP",RocksDBStateBackend.PriorityQueueStateType.HEAP.toString());
  Assert.assertEquals(RocksDBStateBackend.PriorityQueueStateType.HEAP.toString(),RocksDBOptions.TIMER_SERVICE_FACTORY.defaultValue());
  RocksDBStateBackend rocksDbBackend=new RocksDBStateBackend(tempFolder.newFolder().toURI().toString());
  RocksDBKeyedStateBackend<Integer> keyedBackend=createKeyedStateBackend(rocksDbBackend);
  keyedBackend.restore(Collections.emptyList());
  Assert.assertEquals(HeapPriorityQueueSetFactory.class,keyedBackend.getPriorityQueueFactory().getClass());
  keyedBackend.dispose();
  Configuration conf=new Configuration();
  conf.setString(RocksDBOptions.TIMER_SERVICE_FACTORY,RocksDBStateBackend.PriorityQueueStateType.ROCKSDB.toString());
  rocksDbBackend=rocksDbBackend.configure(conf);
  keyedBackend=createKeyedStateBackend(rocksDbBackend);
  keyedBackend.restore(Collections.emptyList());
  Assert.assertEquals(RocksDBKeyedStateBackend.RocksDBPriorityQueueSetFactory.class,keyedBackend.getPriorityQueueFactory().getClass());
  keyedBackend.dispose();
}
