/** 
 * Retrieves a BLOB from the HA store to a  {@link BlobServer} whose HA store does not containthe file. File transfers should fail.
 */
@Test public void testGetFailsHaStoreForJobHa() throws IOException {
  final JobID jobId=new JobID();
  final Configuration config=new Configuration();
  config.setString(BlobServerOptions.STORAGE_DIRECTORY,temporaryFolder.newFolder().getAbsolutePath());
  try (BlobServer server=new BlobServer(config,new VoidBlobStore());BlobCacheService cache=new BlobCacheService(config,new VoidBlobStore(),new InetSocketAddress("localhost",server.getPort()))){
    server.start();
    byte[] data=new byte[2000000];
    rnd.nextBytes(data);
    PermanentBlobKey blobKey=(PermanentBlobKey)put(server,jobId,data,PERMANENT_BLOB);
    assertTrue(server.getStorageLocation(jobId,blobKey).delete());
    File tempFileDir=server.createTemporaryFilename().getParentFile();
    exception.expect(IOException.class);
    exception.expectMessage("Failed to fetch BLOB ");
    try {
      get(cache,jobId,blobKey);
    }
  finally {
      HashSet<String> expectedDirs=new HashSet<>();
      expectedDirs.add("incoming");
      expectedDirs.add(JOB_DIR_PREFIX + jobId);
      File storageDir=tempFileDir.getParentFile();
      String[] actualDirs=storageDir.list();
      assertNotNull(actualDirs);
      assertEquals(expectedDirs,new HashSet<>(Arrays.asList(actualDirs)));
      File jobDir=new File(tempFileDir.getParentFile(),JOB_DIR_PREFIX + jobId);
      assertArrayEquals(new String[]{},jobDir.list());
    }
  }
 }
