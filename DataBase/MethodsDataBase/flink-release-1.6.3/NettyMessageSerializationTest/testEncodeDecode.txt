@Test public void testEncodeDecode(){
  testEncodeDecodeBuffer(false);
  testEncodeDecodeBuffer(true);
{
{
      IllegalStateException expectedError=new IllegalStateException();
      InputChannelID receiverId=new InputChannelID();
      NettyMessage.ErrorResponse expected=new NettyMessage.ErrorResponse(expectedError,receiverId);
      NettyMessage.ErrorResponse actual=encodeAndDecode(expected);
      assertEquals(expected.cause.getClass(),actual.cause.getClass());
      assertEquals(expected.cause.getMessage(),actual.cause.getMessage());
      assertEquals(receiverId,actual.receiverId);
    }
{
      IllegalStateException expectedError=new IllegalStateException("Illegal illegal illegal");
      InputChannelID receiverId=new InputChannelID();
      NettyMessage.ErrorResponse expected=new NettyMessage.ErrorResponse(expectedError,receiverId);
      NettyMessage.ErrorResponse actual=encodeAndDecode(expected);
      assertEquals(expected.cause.getClass(),actual.cause.getClass());
      assertEquals(expected.cause.getMessage(),actual.cause.getMessage());
      assertEquals(receiverId,actual.receiverId);
    }
{
      IllegalStateException expectedError=new IllegalStateException("Illegal illegal illegal");
      NettyMessage.ErrorResponse expected=new NettyMessage.ErrorResponse(expectedError);
      NettyMessage.ErrorResponse actual=encodeAndDecode(expected);
      assertEquals(expected.cause.getClass(),actual.cause.getClass());
      assertEquals(expected.cause.getMessage(),actual.cause.getMessage());
      assertNull(actual.receiverId);
      assertTrue(actual.isFatalError());
    }
  }
{
    NettyMessage.PartitionRequest expected=new NettyMessage.PartitionRequest(new ResultPartitionID(new IntermediateResultPartitionID(),new ExecutionAttemptID()),random.nextInt(),new InputChannelID(),random.nextInt());
    NettyMessage.PartitionRequest actual=encodeAndDecode(expected);
    assertEquals(expected.partitionId,actual.partitionId);
    assertEquals(expected.queueIndex,actual.queueIndex);
    assertEquals(expected.receiverId,actual.receiverId);
    assertEquals(expected.credit,actual.credit);
  }
{
    NettyMessage.TaskEventRequest expected=new NettyMessage.TaskEventRequest(new IntegerTaskEvent(random.nextInt()),new ResultPartitionID(new IntermediateResultPartitionID(),new ExecutionAttemptID()),new InputChannelID());
    NettyMessage.TaskEventRequest actual=encodeAndDecode(expected);
    assertEquals(expected.event,actual.event);
    assertEquals(expected.partitionId,actual.partitionId);
    assertEquals(expected.receiverId,actual.receiverId);
  }
{
    NettyMessage.CancelPartitionRequest expected=new NettyMessage.CancelPartitionRequest(new InputChannelID());
    NettyMessage.CancelPartitionRequest actual=encodeAndDecode(expected);
    assertEquals(expected.receiverId,actual.receiverId);
  }
{
    NettyMessage.CloseRequest expected=new NettyMessage.CloseRequest();
    NettyMessage.CloseRequest actual=encodeAndDecode(expected);
    assertEquals(expected.getClass(),actual.getClass());
  }
{
    NettyMessage.AddCredit expected=new NettyMessage.AddCredit(new ResultPartitionID(new IntermediateResultPartitionID(),new ExecutionAttemptID()),random.nextInt(Integer.MAX_VALUE) + 1,new InputChannelID());
    NettyMessage.AddCredit actual=encodeAndDecode(expected);
    assertEquals(expected.partitionId,actual.partitionId);
    assertEquals(expected.credit,actual.credit);
    assertEquals(expected.receiverId,actual.receiverId);
  }
}
