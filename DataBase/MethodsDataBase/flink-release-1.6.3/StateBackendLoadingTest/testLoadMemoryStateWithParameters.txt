/** 
 * Validates loading a memory state backend with additional parameters from the cluster configuration.
 */
@Test public void testLoadMemoryStateWithParameters() throws Exception {
  final String checkpointDir=new Path(tmp.newFolder().toURI()).toString();
  final String savepointDir=new Path(tmp.newFolder().toURI()).toString();
  final Path expectedCheckpointPath=new Path(checkpointDir);
  final Path expectedSavepointPath=new Path(savepointDir);
  final boolean async=!CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue();
  final Configuration config1=new Configuration();
  config1.setString(backendKey,"jobmanager");
  config1.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY,checkpointDir);
  config1.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY,savepointDir);
  config1.setBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS,async);
  final Configuration config2=new Configuration();
  config2.setString(backendKey,MemoryStateBackendFactory.class.getName());
  config2.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY,checkpointDir);
  config2.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY,savepointDir);
  config2.setBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS,async);
  MemoryStateBackend backend1=(MemoryStateBackend)StateBackendLoader.loadStateBackendFromConfig(config1,cl,null);
  MemoryStateBackend backend2=(MemoryStateBackend)StateBackendLoader.loadStateBackendFromConfig(config2,cl,null);
  assertNotNull(backend1);
  assertNotNull(backend2);
  assertEquals(expectedCheckpointPath,backend1.getCheckpointPath());
  assertEquals(expectedCheckpointPath,backend2.getCheckpointPath());
  assertEquals(expectedSavepointPath,backend1.getSavepointPath());
  assertEquals(expectedSavepointPath,backend2.getSavepointPath());
  assertEquals(async,backend1.isUsingAsynchronousSnapshots());
  assertEquals(async,backend2.isUsingAsynchronousSnapshots());
}
