/** 
 * Validates taking the application-defined memory state backend and adding additional parameters from the cluster configuration, but giving precedence to application-defined parameters over configuration-defined parameters.
 */
@Test public void testConfigureMemoryStateBackendMixed() throws Exception {
  final String appCheckpointDir=new Path(tmp.newFolder().toURI()).toString();
  final String checkpointDir=new Path(tmp.newFolder().toURI()).toString();
  final String savepointDir=new Path(tmp.newFolder().toURI()).toString();
  final Path expectedCheckpointPath=new Path(appCheckpointDir);
  final Path expectedSavepointPath=new Path(savepointDir);
  final MemoryStateBackend backend=new MemoryStateBackend(appCheckpointDir,null);
  final Configuration config=new Configuration();
  config.setString(backendKey,"filesystem");
  config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY,checkpointDir);
  config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY,savepointDir);
  StateBackend loadedBackend=StateBackendLoader.fromApplicationOrConfigOrDefault(backend,config,cl,null);
  assertTrue(loadedBackend instanceof MemoryStateBackend);
  final MemoryStateBackend memBackend=(MemoryStateBackend)loadedBackend;
  assertEquals(expectedCheckpointPath,memBackend.getCheckpointPath());
  assertEquals(expectedSavepointPath,memBackend.getSavepointPath());
}
