/** 
 * Validates taking the application-defined memory state backend and adding additional parameters from the cluster configuration.
 */
@Test public void testConfigureMemoryStateBackend() throws Exception {
  final String checkpointDir=new Path(tmp.newFolder().toURI()).toString();
  final String savepointDir=new Path(tmp.newFolder().toURI()).toString();
  final Path expectedCheckpointPath=new Path(checkpointDir);
  final Path expectedSavepointPath=new Path(savepointDir);
  final int maxSize=100;
  final boolean async=!CheckpointingOptions.ASYNC_SNAPSHOTS.defaultValue();
  final MemoryStateBackend backend=new MemoryStateBackend(maxSize,async);
  final Configuration config=new Configuration();
  config.setString(backendKey,"filesystem");
  config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY,checkpointDir);
  config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY,savepointDir);
  config.setBoolean(CheckpointingOptions.ASYNC_SNAPSHOTS,!async);
  StateBackend loadedBackend=StateBackendLoader.fromApplicationOrConfigOrDefault(backend,config,cl,null);
  assertTrue(loadedBackend instanceof MemoryStateBackend);
  final MemoryStateBackend memBackend=(MemoryStateBackend)loadedBackend;
  assertEquals(expectedCheckpointPath,memBackend.getCheckpointPath());
  assertEquals(expectedSavepointPath,memBackend.getSavepointPath());
  assertEquals(maxSize,memBackend.getMaxStateSize());
  assertEquals(async,memBackend.isUsingAsynchronousSnapshots());
}
