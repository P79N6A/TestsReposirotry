@Test public void testHighAvailabilityDefaultFallbackLocalPaths() throws Exception {
  final String haPersistenceDir=new Path(tmp.newFolder().getAbsolutePath()).toString();
  final Path expectedCheckpointPath=new Path(haPersistenceDir).makeQualified(FileSystem.getLocalFileSystem());
  final Configuration config1=new Configuration();
  config1.setString(HighAvailabilityOptions.HA_MODE,"zookeeper");
  config1.setString(HighAvailabilityOptions.HA_CLUSTER_ID,"myCluster");
  config1.setString(HighAvailabilityOptions.HA_STORAGE_PATH,haPersistenceDir);
  final Configuration config2=new Configuration();
  config2.setString(backendKey,"jobmanager");
  config2.setString(HighAvailabilityOptions.HA_MODE,"zookeeper");
  config2.setString(HighAvailabilityOptions.HA_CLUSTER_ID,"myCluster");
  config2.setString(HighAvailabilityOptions.HA_STORAGE_PATH,haPersistenceDir);
  final MemoryStateBackend appBackend=new MemoryStateBackend();
  final StateBackend loaded1=StateBackendLoader.fromApplicationOrConfigOrDefault(appBackend,config1,cl,null);
  final StateBackend loaded2=StateBackendLoader.fromApplicationOrConfigOrDefault(null,config1,cl,null);
  final StateBackend loaded3=StateBackendLoader.fromApplicationOrConfigOrDefault(null,config2,cl,null);
  assertTrue(loaded1 instanceof MemoryStateBackend);
  assertTrue(loaded2 instanceof MemoryStateBackend);
  assertTrue(loaded3 instanceof MemoryStateBackend);
  final MemoryStateBackend memBackend1=(MemoryStateBackend)loaded1;
  final MemoryStateBackend memBackend2=(MemoryStateBackend)loaded2;
  final MemoryStateBackend memBackend3=(MemoryStateBackend)loaded3;
  assertNotNull(memBackend1.getCheckpointPath());
  assertNotNull(memBackend2.getCheckpointPath());
  assertNotNull(memBackend3.getCheckpointPath());
  assertNull(memBackend1.getSavepointPath());
  assertNull(memBackend2.getSavepointPath());
  assertNull(memBackend3.getSavepointPath());
  assertEquals(expectedCheckpointPath,memBackend1.getCheckpointPath().getParent());
  assertEquals(expectedCheckpointPath,memBackend2.getCheckpointPath().getParent());
  assertEquals(expectedCheckpointPath,memBackend3.getCheckpointPath().getParent());
}
