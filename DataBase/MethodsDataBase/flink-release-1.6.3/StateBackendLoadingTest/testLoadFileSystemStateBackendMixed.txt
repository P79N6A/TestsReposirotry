/** 
 * Validates taking the application-defined file system state backend and adding with additional parameters from the cluster configuration, but giving precedence to application-defined parameters over configuration-defined parameters.
 */
@Test public void testLoadFileSystemStateBackendMixed() throws Exception {
  final String appCheckpointDir=new Path(tmp.newFolder().toURI()).toString();
  final String checkpointDir=new Path(tmp.newFolder().toURI()).toString();
  final String savepointDir=new Path(tmp.newFolder().toURI()).toString();
  final Path expectedCheckpointsPath=new Path(new URI(appCheckpointDir));
  final Path expectedSavepointsPath=new Path(savepointDir);
  final int threshold=1000000;
  final FsStateBackend backend=new FsStateBackend(new URI(appCheckpointDir),threshold);
  final Configuration config=new Configuration();
  config.setString(backendKey,"jobmanager");
  config.setString(CheckpointingOptions.CHECKPOINTS_DIRECTORY,checkpointDir);
  config.setString(CheckpointingOptions.SAVEPOINT_DIRECTORY,savepointDir);
  config.setInteger(CheckpointingOptions.FS_SMALL_FILE_THRESHOLD,20);
  final StateBackend loadedBackend=StateBackendLoader.fromApplicationOrConfigOrDefault(backend,config,cl,null);
  assertTrue(loadedBackend instanceof FsStateBackend);
  final FsStateBackend fs=(FsStateBackend)loadedBackend;
  assertEquals(expectedCheckpointsPath,fs.getCheckpointPath());
  assertEquals(expectedSavepointsPath,fs.getSavepointPath());
  assertEquals(threshold,fs.getMinFileSizeThreshold());
}
