/** 
 * Verify that the user-specified state backend is used even if checkpointing is disabled.
 */
@Test public void testStateBackendWithoutCheckpointing() throws Exception {
  StreamExecutionEnvironment see=StreamExecutionEnvironment.getExecutionEnvironment();
  see.setParallelism(1);
  see.getConfig().setRestartStrategy(RestartStrategies.noRestart());
  see.setStateBackend(new FailingStateBackend());
  see.fromElements(new Tuple2<>("Hello",1)).keyBy(0).map(new RichMapFunction<Tuple2<String,Integer>,String>(){
    private static final long serialVersionUID=1L;
    @Override public void open(    Configuration parameters) throws Exception {
      super.open(parameters);
      getRuntimeContext().getState(new ValueStateDescriptor<>("Test",Integer.class));
    }
    @Override public String map(    Tuple2<String,Integer> value) throws Exception {
      return value.f0;
    }
  }
).print();
  try {
    see.execute();
    fail();
  }
 catch (  JobExecutionException e) {
    assertTrue(ExceptionUtils.findThrowable(e,SuccessException.class).isPresent());
  }
}
