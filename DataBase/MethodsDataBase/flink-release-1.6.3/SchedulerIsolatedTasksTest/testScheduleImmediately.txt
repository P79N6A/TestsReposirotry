@Test public void testScheduleImmediately() throws Exception {
  assertEquals(0,testingSlotProvider.getNumberOfAvailableSlots());
  testingSlotProvider.addTaskManager(2);
  testingSlotProvider.addTaskManager(1);
  testingSlotProvider.addTaskManager(2);
  assertEquals(5,testingSlotProvider.getNumberOfAvailableSlots());
  LogicalSlot s1=testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s2=testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s3=testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s4=testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s5=testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  assertTrue(areAllDistinct(s1,s2,s3,s4,s5));
  try {
    testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    fail("Scheduler accepted scheduling request without available resource.");
  }
 catch (  ExecutionException e) {
    assertTrue(e.getCause() instanceof NoResourceAvailableException);
  }
  s3.releaseSlot();
  s4.releaseSlot();
  assertEquals(2,testingSlotProvider.getNumberOfAvailableSlots());
  LogicalSlot s6=testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  LogicalSlot s7=testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
  assertTrue(areAllDistinct(s1,s2,s3,s4,s5,s6,s7));
  s1.releaseSlot();
  s2.releaseSlot();
  s5.releaseSlot();
  s6.releaseSlot();
  s7.releaseSlot();
  assertEquals(5,testingSlotProvider.getNumberOfAvailableSlots());
  s1.releaseSlot();
  s2.releaseSlot();
  s5.releaseSlot();
  s6.releaseSlot();
  s7.releaseSlot();
  assertEquals(5,testingSlotProvider.getNumberOfAvailableSlots());
}
