@Test public void testScheduleWithDyingInstances() throws Exception {
  final TaskManagerLocation taskManagerLocation1=testingSlotProvider.addTaskManager(2);
  final TaskManagerLocation taskManagerLocation2=testingSlotProvider.addTaskManager(2);
  final TaskManagerLocation taskManagerLocation3=testingSlotProvider.addTaskManager(1);
  List<LogicalSlot> slots=new ArrayList<>();
  slots.add(testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get());
  slots.add(testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get());
  slots.add(testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get());
  slots.add(testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get());
  slots.add(testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get());
  testingSlotProvider.releaseTaskManager(taskManagerLocation2.getResourceID());
  for (  LogicalSlot slot : slots) {
    if (slot.getTaskManagerLocation().getResourceID().equals(taskManagerLocation2.getResourceID())) {
      assertFalse(slot.isAlive());
    }
 else {
      assertTrue(slot.isAlive());
    }
    slot.releaseSlot();
  }
  assertEquals(3,testingSlotProvider.getNumberOfAvailableSlots());
  testingSlotProvider.releaseTaskManager(taskManagerLocation1.getResourceID());
  testingSlotProvider.releaseTaskManager(taskManagerLocation3.getResourceID());
  try {
    testingSlotProvider.allocateSlot(new ScheduledUnit(getDummyTask()),false,SlotProfile.noRequirements(),TestingUtils.infiniteTime()).get();
    fail("Scheduler served a slot from a dead instance");
  }
 catch (  ExecutionException e) {
    assertTrue(e.getCause() instanceof NoResourceAvailableException);
  }
catch (  Exception e) {
    fail("Wrong exception type.");
  }
  assertEquals(0,testingSlotProvider.getNumberOfAvailableSlots());
}
