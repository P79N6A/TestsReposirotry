@Test public void testScaleUp() throws Exception {
  final Set<String> keysToRegister=new HashSet<>();
  keysToRegister.add("test1");
  keysToRegister.add("test2");
  keysToRegister.add("test3");
  final OperatorSubtaskState mergedSnapshot;
  try (TwoInputStreamOperatorTestHarness<String,Integer,String> testHarness1=getInitializedTestHarness(new TestFunctionWithOutput(keysToRegister),10,2,0,STATE_DESCRIPTOR);TwoInputStreamOperatorTestHarness<String,Integer,String> testHarness2=getInitializedTestHarness(new TestFunctionWithOutput(keysToRegister),10,2,1,STATE_DESCRIPTOR)){
    testHarness1.processElement2(new StreamRecord<>(3));
    testHarness2.processElement2(new StreamRecord<>(3));
    mergedSnapshot=AbstractStreamOperatorTestHarness.repackageState(testHarness1.snapshot(0L,0L),testHarness2.snapshot(0L,0L));
  }
   final Set<String> expected=new HashSet<>(3);
  expected.add("test1=3");
  expected.add("test2=3");
  expected.add("test3=3");
  try (TwoInputStreamOperatorTestHarness<String,Integer,String> testHarness1=getInitializedTestHarness(new TestFunctionWithOutput(keysToRegister),10,3,0,mergedSnapshot,STATE_DESCRIPTOR);TwoInputStreamOperatorTestHarness<String,Integer,String> testHarness2=getInitializedTestHarness(new TestFunctionWithOutput(keysToRegister),10,3,1,mergedSnapshot,STATE_DESCRIPTOR);TwoInputStreamOperatorTestHarness<String,Integer,String> testHarness3=getInitializedTestHarness(new TestFunctionWithOutput(keysToRegister),10,3,2,mergedSnapshot,STATE_DESCRIPTOR)){
    testHarness1.processElement1(new StreamRecord<>("trigger"));
    testHarness2.processElement1(new StreamRecord<>("trigger"));
    testHarness3.processElement1(new StreamRecord<>("trigger"));
    Queue<?> output1=testHarness1.getOutput();
    Queue<?> output2=testHarness2.getOutput();
    Queue<?> output3=testHarness3.getOutput();
    Assert.assertEquals(expected.size(),output1.size());
    for (    Object o : output1) {
      StreamRecord<String> rec=(StreamRecord<String>)o;
      Assert.assertTrue(expected.contains(rec.getValue()));
    }
    Assert.assertEquals(expected.size(),output2.size());
    for (    Object o : output2) {
      StreamRecord<String> rec=(StreamRecord<String>)o;
      Assert.assertTrue(expected.contains(rec.getValue()));
    }
    Assert.assertEquals(expected.size(),output3.size());
    for (    Object o : output3) {
      StreamRecord<String> rec=(StreamRecord<String>)o;
      Assert.assertTrue(expected.contains(rec.getValue()));
    }
  }
 }
