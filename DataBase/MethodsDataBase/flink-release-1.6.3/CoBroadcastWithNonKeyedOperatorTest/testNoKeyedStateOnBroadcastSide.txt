@Test public void testNoKeyedStateOnBroadcastSide() throws Exception {
  boolean exceptionThrown=false;
  try (TwoInputStreamOperatorTestHarness<String,Integer,String> testHarness=getInitializedTestHarness(new BroadcastProcessFunction<String,Integer,String>(){
    private static final long serialVersionUID=-1725365436500098384L;
    private final ValueStateDescriptor<String> valueState=new ValueStateDescriptor<>("any",BasicTypeInfo.STRING_TYPE_INFO);
    @Override public void processBroadcastElement(    Integer value,    Context ctx,    Collector<String> out) throws Exception {
      getRuntimeContext().getState(valueState).value();
    }
    @Override public void processElement(    String value,    ReadOnlyContext ctx,    Collector<String> out) throws Exception {
    }
  }
)){
    testHarness.processWatermark1(new Watermark(10L));
    testHarness.processWatermark2(new Watermark(10L));
    testHarness.processElement2(new StreamRecord<>(5,12L));
  }
 catch (  NullPointerException e) {
    Assert.assertEquals("Keyed state can only be used on a 'keyed stream', i.e., after a 'keyBy()' operation.",e.getMessage());
    exceptionThrown=true;
  }
  if (!exceptionThrown) {
    Assert.fail("No exception thrown");
  }
}
