@Test public void testExecutionConfigSerialization() throws IOException, ClassNotFoundException {
  final Random r=new Random();
  final int parallelism=1 + r.nextInt(10);
  final boolean closureCleanerEnabled=r.nextBoolean(), forceAvroEnabled=r.nextBoolean(), forceKryoEnabled=r.nextBoolean(), disableGenericTypes=r.nextBoolean(), objectReuseEnabled=r.nextBoolean(), sysoutLoggingEnabled=r.nextBoolean();
  final ExecutionConfig config=new ExecutionConfig();
  if (closureCleanerEnabled) {
    config.enableClosureCleaner();
  }
 else {
    config.disableClosureCleaner();
  }
  if (forceAvroEnabled) {
    config.enableForceAvro();
  }
 else {
    config.disableForceAvro();
  }
  if (forceKryoEnabled) {
    config.enableForceKryo();
  }
 else {
    config.disableForceKryo();
  }
  if (disableGenericTypes) {
    config.disableGenericTypes();
  }
 else {
    config.enableGenericTypes();
  }
  if (objectReuseEnabled) {
    config.enableObjectReuse();
  }
 else {
    config.disableObjectReuse();
  }
  if (sysoutLoggingEnabled) {
    config.enableSysoutLogging();
  }
 else {
    config.disableSysoutLogging();
  }
  config.setParallelism(parallelism);
  final ExecutionConfig copy1=CommonTestUtils.createCopySerializable(config);
  final ExecutionConfig copy2=new SerializedValue<>(config).deserializeValue(getClass().getClassLoader());
  assertNotNull(copy1);
  assertNotNull(copy2);
  assertEquals(config,copy1);
  assertEquals(config,copy2);
  assertEquals(closureCleanerEnabled,copy1.isClosureCleanerEnabled());
  assertEquals(forceAvroEnabled,copy1.isForceAvroEnabled());
  assertEquals(forceKryoEnabled,copy1.isForceKryoEnabled());
  assertEquals(disableGenericTypes,copy1.hasGenericTypesDisabled());
  assertEquals(objectReuseEnabled,copy1.isObjectReuseEnabled());
  assertEquals(sysoutLoggingEnabled,copy1.isSysoutLoggingEnabled());
  assertEquals(parallelism,copy1.getParallelism());
}
