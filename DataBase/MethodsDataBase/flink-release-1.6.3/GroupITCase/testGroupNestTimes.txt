@Test public void testGroupNestTimes() throws Exception {
  List<StreamRecord<Event>> inputEvents=new ArrayList<>();
  Event d=new Event(40,"d",1.0);
  Event a1=new Event(41,"a",2.0);
  Event b1=new Event(42,"b",3.0);
  Event c1=new Event(43,"c",4.0);
  Event b2=new Event(44,"b",5.0);
  Event c2=new Event(45,"c",4.0);
  Event b3=new Event(46,"b",5.0);
  Event c3=new Event(47,"c",4.0);
  Event a2=new Event(48,"a",2.0);
  Event b4=new Event(49,"b",3.0);
  Event c4=new Event(50,"c",4.0);
  Event b5=new Event(51,"b",5.0);
  Event c5=new Event(52,"c",4.0);
  Event b6=new Event(53,"b",5.0);
  Event c6=new Event(54,"c",4.0);
  Event e=new Event(55,"e",6.0);
  inputEvents.add(new StreamRecord<>(d,1));
  inputEvents.add(new StreamRecord<>(a1,2));
  inputEvents.add(new StreamRecord<>(b1,3));
  inputEvents.add(new StreamRecord<>(c1,4));
  inputEvents.add(new StreamRecord<>(b2,5));
  inputEvents.add(new StreamRecord<>(c2,6));
  inputEvents.add(new StreamRecord<>(b3,7));
  inputEvents.add(new StreamRecord<>(c3,8));
  inputEvents.add(new StreamRecord<>(a2,9));
  inputEvents.add(new StreamRecord<>(b4,10));
  inputEvents.add(new StreamRecord<>(c4,11));
  inputEvents.add(new StreamRecord<>(b5,12));
  inputEvents.add(new StreamRecord<>(c5,13));
  inputEvents.add(new StreamRecord<>(b6,14));
  inputEvents.add(new StreamRecord<>(c6,15));
  inputEvents.add(new StreamRecord<>(e,16));
  Pattern<Event,?> pattern=Pattern.<Event>begin("start").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("d");
    }
  }
).followedByAny(Pattern.<Event>begin("middle1").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("a");
    }
  }
).followedBy(Pattern.<Event>begin("middle2").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("b");
    }
  }
).followedBy("middle3").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("c");
    }
  }
)).times(3)).times(0,2).followedBy("end").where(new SimpleCondition<Event>(){
    private static final long serialVersionUID=5726188262756267490L;
    @Override public boolean filter(    Event value) throws Exception {
      return value.getName().equals("e");
    }
  }
);
  NFA<Event> nfa=compile(pattern,false);
  final List<List<Event>> resultingPatterns=feedNFA(inputEvents,nfa);
  compareMaps(resultingPatterns,Lists.<List<Event>>newArrayList(Lists.newArrayList(d,e),Lists.newArrayList(d,a1,b1,c1,b2,c2,b3,c3,e),Lists.newArrayList(d,a2,b4,c4,b5,c5,b6,c6,e),Lists.newArrayList(d,a1,b1,c1,b2,c2,b3,c3,a2,b4,c4,b5,c5,b6,c6,e)));
}
