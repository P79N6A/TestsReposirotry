@Test @SuppressWarnings("deprecation") public void testDelegateFsMethods() throws IOException {
  final FileSystem fs=mock(FileSystem.class);
  when(fs.open(any(Path.class))).thenReturn(mock(FSDataInputStream.class));
  when(fs.open(any(Path.class),anyInt())).thenReturn(mock(FSDataInputStream.class));
  when(fs.create(any(Path.class),anyBoolean())).thenReturn(mock(FSDataOutputStream.class));
  when(fs.create(any(Path.class),any(WriteMode.class))).thenReturn(mock(FSDataOutputStream.class));
  when(fs.create(any(Path.class),anyBoolean(),anyInt(),anyShort(),anyLong())).thenReturn(mock(FSDataOutputStream.class));
  final LimitedConnectionsFileSystem lfs=new LimitedConnectionsFileSystem(fs,1000);
  final Random rnd=new Random();
  lfs.isDistributedFS();
  verify(fs).isDistributedFS();
  lfs.getWorkingDirectory();
  verify(fs).isDistributedFS();
  lfs.getHomeDirectory();
  verify(fs).getHomeDirectory();
  lfs.getUri();
  verify(fs).getUri();
{
    Path path=mock(Path.class);
    lfs.getFileStatus(path);
    verify(fs).getFileStatus(path);
  }
{
    FileStatus path=mock(FileStatus.class);
    int pos=rnd.nextInt();
    int len=rnd.nextInt();
    lfs.getFileBlockLocations(path,pos,len);
    verify(fs).getFileBlockLocations(path,pos,len);
  }
{
    Path path=mock(Path.class);
    int bufferSize=rnd.nextInt();
    lfs.open(path,bufferSize);
    verify(fs).open(path,bufferSize);
  }
{
    Path path=mock(Path.class);
    lfs.open(path);
    verify(fs).open(path);
  }
  lfs.getDefaultBlockSize();
  verify(fs).getDefaultBlockSize();
{
    Path path=mock(Path.class);
    lfs.listStatus(path);
    verify(fs).listStatus(path);
  }
{
    Path path=mock(Path.class);
    lfs.exists(path);
    verify(fs).exists(path);
  }
{
    Path path=mock(Path.class);
    boolean recursive=rnd.nextBoolean();
    lfs.delete(path,recursive);
    verify(fs).delete(path,recursive);
  }
{
    Path path=mock(Path.class);
    lfs.mkdirs(path);
    verify(fs).mkdirs(path);
  }
{
    Path path=mock(Path.class);
    boolean overwrite=rnd.nextBoolean();
    int bufferSize=rnd.nextInt();
    short replication=(short)rnd.nextInt();
    long blockSize=rnd.nextInt();
    lfs.create(path,overwrite,bufferSize,replication,blockSize);
    verify(fs).create(path,overwrite,bufferSize,replication,blockSize);
  }
{
    Path path=mock(Path.class);
    WriteMode mode=rnd.nextBoolean() ? WriteMode.OVERWRITE : WriteMode.NO_OVERWRITE;
    lfs.create(path,mode);
    verify(fs).create(path,mode);
  }
{
    Path path1=mock(Path.class);
    Path path2=mock(Path.class);
    lfs.rename(path1,path2);
    verify(fs).rename(path1,path2);
  }
{
    FileSystemKind kind=rnd.nextBoolean() ? FileSystemKind.FILE_SYSTEM : FileSystemKind.OBJECT_STORE;
    when(fs.getKind()).thenReturn(kind);
    assertEquals(kind,lfs.getKind());
    verify(fs).getKind();
  }
}
