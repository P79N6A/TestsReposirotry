@Test public void testEmptyRecords() throws IOException {
  final int segmentSize=11;
  final SpanningRecordSerializer<SerializationTestType> serializer=new SpanningRecordSerializer<>();
  try {
    Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD,serializer.continueWritingWithNextBufferBuilder(createBufferBuilder(segmentSize)));
  }
 catch (  IOException e) {
    e.printStackTrace();
    Assert.fail(e.getMessage());
  }
  SerializationTestType emptyRecord=new SerializationTestType(){
    @Override public SerializationTestType getRandom(    Random rnd){
      throw new UnsupportedOperationException();
    }
    @Override public int length(){
      throw new UnsupportedOperationException();
    }
    @Override public void write(    DataOutputView out){
    }
    @Override public void read(    DataInputView in){
    }
    @Override public int hashCode(){
      throw new UnsupportedOperationException();
    }
    @Override public boolean equals(    Object obj){
      throw new UnsupportedOperationException();
    }
  }
;
  RecordSerializer.SerializationResult result=serializer.addRecord(emptyRecord);
  Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD,result);
  result=serializer.addRecord(emptyRecord);
  Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD,result);
  result=serializer.addRecord(emptyRecord);
  Assert.assertEquals(RecordSerializer.SerializationResult.PARTIAL_RECORD_MEMORY_SEGMENT_FULL,result);
  result=serializer.continueWritingWithNextBufferBuilder(createBufferBuilder(segmentSize));
  Assert.assertEquals(RecordSerializer.SerializationResult.FULL_RECORD,result);
}
