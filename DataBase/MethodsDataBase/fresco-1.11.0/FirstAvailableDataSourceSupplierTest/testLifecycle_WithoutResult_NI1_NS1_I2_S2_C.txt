/** 
 * Test data source without result
 */
@Test public void testLifecycle_WithoutResult_NI1_NS1_I2_S2_C(){
  DataSource<Object> dataSource=getAndSubscribe();
  DataSubscriber<Object> subscriber1=verifyGetAndSubscribe(mDataSourceSupplier1,mSrc1);
  setState(mSrc1,NOT_CLOSED,NOT_FINISHED,WITHOUT_RESULT,null,NOT_FAILED,null);
  subscriber1.onNewResult(mSrc1);
  verifySubscriber(dataSource,mSrc1,NO_INTERACTIONS);
  verifyState(dataSource,null,NOT_CLOSED,NOT_FINISHED,WITHOUT_RESULT,null,NOT_FAILED,null);
  setState(mSrc1,NOT_CLOSED,FINISHED,WITHOUT_RESULT,null,NOT_FAILED,null);
  subscriber1.onNewResult(mSrc1);
  mInOrder.verify(mSrc1).close();
  DataSubscriber<Object> subscriber2=verifyGetAndSubscribe(mDataSourceSupplier2,mSrc2);
  verifyState(dataSource,null,NOT_CLOSED,NOT_FINISHED,WITHOUT_RESULT,null,NOT_FAILED,null);
  Object val2a=mock(Object.class);
  setState(mSrc2,NOT_CLOSED,NOT_FINISHED,WITH_RESULT,val2a,NOT_FAILED,null);
  subscriber2.onNewResult(mSrc2);
  verifySubscriber(dataSource,mSrc2,ON_NEW_RESULT);
  verifyState(dataSource,mSrc2,NOT_CLOSED,NOT_FINISHED,WITH_RESULT,val2a,NOT_FAILED,null);
  Object val2b=mock(Object.class);
  setState(mSrc2,NOT_CLOSED,FINISHED,WITH_RESULT,val2b,NOT_FAILED,null);
  subscriber2.onNewResult(mSrc2);
  verifySubscriber(dataSource,mSrc2,ON_NEW_RESULT);
  verifyState(dataSource,mSrc2,NOT_CLOSED,FINISHED,WITH_RESULT,val2b,NOT_FAILED,null);
  testClose(dataSource,mSrc2);
  verifyState(dataSource,null,CLOSED,FINISHED,WITHOUT_RESULT,null,NOT_FAILED,null);
}
