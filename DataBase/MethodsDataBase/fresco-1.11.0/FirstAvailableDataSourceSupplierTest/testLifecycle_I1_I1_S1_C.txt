/** 
 * First data source succeeded, with multiple intermediate results.
 */
@Test public void testLifecycle_I1_I1_S1_C(){
  DataSource<Object> dataSource=getAndSubscribe();
  DataSubscriber<Object> subscriber1=verifyGetAndSubscribe(mDataSourceSupplier1,mSrc1);
  Object val1=mock(Object.class);
  setState(mSrc1,NOT_CLOSED,NOT_FINISHED,WITH_RESULT,val1,NOT_FAILED,null);
  subscriber1.onNewResult(mSrc1);
  verifySubscriber(dataSource,mSrc1,ON_NEW_RESULT);
  verifyState(dataSource,mSrc1,NOT_CLOSED,NOT_FINISHED,WITH_RESULT,val1,NOT_FAILED,null);
  Object val2=mock(Object.class);
  setState(mSrc1,NOT_CLOSED,NOT_FINISHED,WITH_RESULT,val2,NOT_FAILED,null);
  subscriber1.onNewResult(mSrc1);
  verifySubscriber(dataSource,mSrc1,ON_NEW_RESULT);
  verifyState(dataSource,mSrc1,NOT_CLOSED,NOT_FINISHED,WITH_RESULT,val2,NOT_FAILED,null);
  Object val=mock(Object.class);
  setState(mSrc1,NOT_CLOSED,FINISHED,WITH_RESULT,val,NOT_FAILED,null);
  subscriber1.onNewResult(mSrc1);
  verifySubscriber(dataSource,mSrc1,ON_NEW_RESULT);
  verifyState(dataSource,mSrc1,NOT_CLOSED,FINISHED,WITH_RESULT,val,NOT_FAILED,null);
  testClose(dataSource,mSrc1);
  verifyState(dataSource,null,CLOSED,FINISHED,WITHOUT_RESULT,null,NOT_FAILED,null);
}
