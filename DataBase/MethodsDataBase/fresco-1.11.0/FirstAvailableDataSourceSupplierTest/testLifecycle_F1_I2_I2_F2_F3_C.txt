/** 
 * All data sources failed, second data source produced multiple intermediate results.
 */
@Test public void testLifecycle_F1_I2_I2_F2_F3_C(){
  DataSource<Object> dataSource=getAndSubscribe();
  DataSubscriber<Object> subscriber1=verifyGetAndSubscribe(mDataSourceSupplier1,mSrc1);
  setState(mSrc1,NOT_CLOSED,FINISHED,WITHOUT_RESULT,null,FAILED,mock(Throwable.class));
  subscriber1.onFailure(mSrc1);
  mInOrder.verify(mSrc1).close();
  DataSubscriber<Object> subscriber2=verifyGetAndSubscribe(mDataSourceSupplier2,mSrc2);
  verifyState(dataSource,null,NOT_CLOSED,NOT_FINISHED,WITHOUT_RESULT,null,NOT_FAILED,null);
  Object val2a=mock(Object.class);
  setState(mSrc2,NOT_CLOSED,NOT_FINISHED,WITH_RESULT,val2a,NOT_FAILED,null);
  subscriber2.onNewResult(mSrc2);
  verifySubscriber(dataSource,mSrc2,ON_NEW_RESULT);
  verifyState(dataSource,mSrc2,NOT_CLOSED,NOT_FINISHED,WITH_RESULT,val2a,NOT_FAILED,null);
  Object val2b=mock(Object.class);
  setState(mSrc2,NOT_CLOSED,NOT_FINISHED,WITH_RESULT,val2b,NOT_FAILED,null);
  subscriber2.onNewResult(mSrc2);
  verifySubscriber(dataSource,mSrc2,ON_NEW_RESULT);
  verifyState(dataSource,mSrc2,NOT_CLOSED,NOT_FINISHED,WITH_RESULT,val2b,NOT_FAILED,null);
  setState(mSrc2,NOT_CLOSED,FINISHED,WITH_RESULT,val2b,FAILED,mock(Throwable.class));
  subscriber2.onFailure(mSrc2);
  DataSubscriber<Object> subscriber3=verifyGetAndSubscribe(mDataSourceSupplier3,mSrc3);
  verifyState(dataSource,mSrc2,NOT_CLOSED,NOT_FINISHED,WITH_RESULT,val2b,NOT_FAILED,null);
  Throwable throwable=mock(Throwable.class);
  setState(mSrc3,NOT_CLOSED,FINISHED,WITHOUT_RESULT,null,FAILED,throwable);
  subscriber3.onFailure(mSrc3);
  mInOrder.verify(mSrc3).close();
  verifySubscriber(dataSource,mSrc3,ON_FAILURE);
  verifyState(dataSource,mSrc2,NOT_CLOSED,FINISHED,WITH_RESULT,val2b,FAILED,throwable);
  testClose(dataSource,mSrc2);
  verifyState(dataSource,null,CLOSED,FINISHED,WITHOUT_RESULT,null,FAILED,throwable);
}
