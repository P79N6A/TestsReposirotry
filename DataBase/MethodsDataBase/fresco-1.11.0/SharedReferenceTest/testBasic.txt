/** 
 * Tests out the basic operations (isn't everything a basic operation?)
 */
@Test public void testBasic(){
  SharedReference<Thing> tRef=new SharedReference<Thing>(new Thing("abc"),THING_RELEASER);
  Assert.assertTrue(SharedReference.isValid(tRef));
  Assert.assertEquals(1,tRef.getRefCountTestOnly());
  Thing t=tRef.get();
  Assert.assertEquals("abc",t.get());
  tRef.addReference();
  Assert.assertTrue(SharedReference.isValid(tRef));
  Assert.assertEquals(2,tRef.getRefCountTestOnly());
  Assert.assertEquals(t,tRef.get());
  Assert.assertEquals("abc",t.get());
  tRef.deleteReference();
  Assert.assertTrue(SharedReference.isValid(tRef));
  Assert.assertEquals(1,tRef.getRefCountTestOnly());
  Assert.assertEquals(t,tRef.get());
  Assert.assertEquals("abc",t.get());
  tRef.deleteReference();
  Assert.assertFalse(SharedReference.isValid(tRef));
  Assert.assertEquals(0,tRef.getRefCountTestOnly());
  try {
    tRef.addReference();
    Assert.fail();
  }
 catch (  SharedReference.NullReferenceException e) {
  }
  try {
    tRef.deleteReference();
    Assert.fail();
  }
 catch (  SharedReference.NullReferenceException e) {
  }
  Assert.assertFalse(SharedReference.isValid(null));
  SharedReference<Thing> t2Ref=new SharedReference<Thing>(new Thing2("abc"),THING_RELEASER);
  t2Ref.deleteReference();
}
