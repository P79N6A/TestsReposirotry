@Test public void testSchedule_TooSoon(){
  EncodedImage encodedImage1=fakeEncodedImage();
  mJobScheduler.updateJob(encodedImage1,Consumer.NO_FLAGS);
  mJobScheduler.scheduleJob();
  mFakeClockForTime.incrementBy(1234);
  mFakeClockForWorker.incrementBy(1234);
  mFakeClockForScheduled.incrementBy(1234);
  EncodedImage encodedImage2=fakeEncodedImage();
  mJobScheduler.updateJob(encodedImage2,Consumer.IS_LAST);
  mFakeClockForTime.incrementBy(INTERVAL - 5);
  mFakeClockForWorker.incrementBy(INTERVAL - 5);
  mFakeClockForScheduled.incrementBy(INTERVAL - 5);
  mJobScheduler.scheduleJob();
  mFakeClockForTime.incrementBy(0);
  mFakeClockForWorker.incrementBy(0);
  mFakeClockForScheduled.incrementBy(0);
  assertEquals(1,mTestScheduledExecutorService.getPendingCount());
  assertEquals(5,mTestScheduledExecutorService.getScheduledQueue().getNextPendingCommandDelay());
  assertEquals(0,mTestExecutorService.getPendingCount());
  assertEquals(1,mTestJobRunnable.jobs.size());
  mFakeClockForTime.incrementBy(5);
  mFakeClockForWorker.incrementBy(5);
  mFakeClockForScheduled.incrementBy(5);
  assertEquals(0,mTestScheduledExecutorService.getPendingCount());
  assertEquals(1,mTestExecutorService.getPendingCount());
  assertEquals(1,mTestJobRunnable.jobs.size());
  mFakeClockForTime.incrementBy(0);
  mFakeClockForWorker.incrementBy(0);
  mFakeClockForScheduled.incrementBy(0);
  assertEquals(0,mTestScheduledExecutorService.getPendingCount());
  assertEquals(0,mTestExecutorService.getPendingCount());
  assertEquals(2,mTestJobRunnable.jobs.size());
  assertJobsEqual(mTestJobRunnable.jobs.get(1),encodedImage2,Consumer.IS_LAST);
}
