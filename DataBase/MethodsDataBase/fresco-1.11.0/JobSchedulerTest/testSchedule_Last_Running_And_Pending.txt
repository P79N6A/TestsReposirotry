@Test public void testSchedule_Last_Running_And_Pending(){
  EncodedImage encodedImage1=fakeEncodedImage();
  mJobScheduler.updateJob(encodedImage1,Consumer.IS_LAST);
  assertTrue(mJobScheduler.scheduleJob());
  final EncodedImage encodedImage2=fakeEncodedImage();
  final EncodedImage encodedImage3=fakeEncodedImage();
  Executors.newFixedThreadPool(1).execute(new Runnable(){
    @Override public void run(){
      waitForCondition(mTestJobRunnable.running,true);
      assertEquals(0,mTestScheduledExecutorService.getPendingCount());
      assertEquals(0,mTestExecutorService.getPendingCount());
      assertEquals(0,mTestJobRunnable.jobs.size());
      mJobScheduler.updateJob(encodedImage2,Consumer.IS_LAST);
      assertEquals(JobScheduler.JobState.RUNNING,mJobScheduler.mJobState);
      assertTrue(mJobScheduler.scheduleJob());
      assertEquals(JobScheduler.JobState.RUNNING_AND_PENDING,mJobScheduler.mJobState);
      mJobScheduler.updateJob(encodedImage3,Consumer.IS_LAST);
      assertEquals(JobScheduler.JobState.RUNNING_AND_PENDING,mJobScheduler.mJobState);
      assertTrue(mJobScheduler.scheduleJob());
      assertEquals(JobScheduler.JobState.RUNNING_AND_PENDING,mJobScheduler.mJobState);
      mTestJobRunnable.wait.set(false);
    }
  }
);
  mTestJobRunnable.wait.set(true);
  mFakeClockForTime.incrementBy(0);
  mFakeClockForScheduled.incrementBy(0);
  mFakeClockForWorker.incrementBy(0);
  assertEquals(JobScheduler.JobState.QUEUED,mJobScheduler.mJobState);
  assertEquals(1,mTestScheduledExecutorService.getPendingCount());
  assertEquals(0,mTestExecutorService.getPendingCount());
  assertEquals(1,mTestJobRunnable.jobs.size());
  assertJobsEqual(mTestJobRunnable.jobs.get(0),encodedImage1,Consumer.IS_LAST);
  mFakeClockForTime.incrementBy(INTERVAL);
  mFakeClockForScheduled.incrementBy(INTERVAL);
  mFakeClockForWorker.incrementBy(INTERVAL);
  assertEquals(JobScheduler.JobState.IDLE,mJobScheduler.mJobState);
  assertEquals(0,mTestScheduledExecutorService.getPendingCount());
  assertEquals(0,mTestExecutorService.getPendingCount());
  assertEquals(2,mTestJobRunnable.jobs.size());
  assertJobsEqual(mTestJobRunnable.jobs.get(1),encodedImage3,Consumer.IS_LAST);
}
