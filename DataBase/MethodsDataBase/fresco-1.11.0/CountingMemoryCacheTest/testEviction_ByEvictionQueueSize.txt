@Test public void testEviction_ByEvictionQueueSize(){
  CloseableReference<Integer> originalRef1=newReference(200);
  CloseableReference<Integer> valueRef1=mCache.cache(KEYS[1],originalRef1);
  originalRef1.close();
  valueRef1.close();
  CloseableReference<Integer> originalRef2=newReference(300);
  CloseableReference<Integer> valueRef2=mCache.cache(KEYS[2],originalRef2);
  originalRef2.close();
  valueRef2.close();
  CloseableReference<Integer> originalRef3=newReference(700);
  CloseableReference<Integer> valueRef3=mCache.cache(KEYS[3],originalRef3);
  originalRef3.close();
  assertTotalSize(3,1200);
  assertExclusivelyOwnedSize(2,500);
  assertExclusivelyOwned(KEYS[1],200);
  assertExclusivelyOwned(KEYS[2],300);
  assertSharedWithCount(KEYS[3],700,1);
  verify(mReleaser,never()).release(anyInt());
  valueRef3.close();
  assertTotalSize(2,1000);
  assertExclusivelyOwnedSize(2,1000);
  assertNotCached(KEYS[1],200);
  assertExclusivelyOwned(KEYS[2],300);
  assertExclusivelyOwned(KEYS[3],700);
  verify(mReleaser).release(200);
}
