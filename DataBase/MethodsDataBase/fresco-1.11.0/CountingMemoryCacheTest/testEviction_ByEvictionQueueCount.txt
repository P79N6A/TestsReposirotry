@Test public void testEviction_ByEvictionQueueCount(){
  CloseableReference<Integer> originalRef1=newReference(110);
  CloseableReference<Integer> valueRef1=mCache.cache(KEYS[1],originalRef1);
  originalRef1.close();
  valueRef1.close();
  CloseableReference<Integer> originalRef2=newReference(120);
  CloseableReference<Integer> valueRef2=mCache.cache(KEYS[2],originalRef2);
  originalRef2.close();
  valueRef2.close();
  CloseableReference<Integer> originalRef3=newReference(130);
  CloseableReference<Integer> valueRef3=mCache.cache(KEYS[3],originalRef3);
  originalRef3.close();
  valueRef3.close();
  CloseableReference<Integer> originalRef4=newReference(140);
  CloseableReference<Integer> valueRef4=mCache.cache(KEYS[4],originalRef4);
  originalRef4.close();
  assertTotalSize(4,500);
  assertExclusivelyOwnedSize(3,360);
  assertExclusivelyOwned(KEYS[1],110);
  assertExclusivelyOwned(KEYS[2],120);
  assertExclusivelyOwned(KEYS[3],130);
  assertSharedWithCount(KEYS[4],140,1);
  verify(mReleaser,never()).release(anyInt());
  valueRef4.close();
  assertTotalSize(3,390);
  assertExclusivelyOwnedSize(3,390);
  assertNotCached(KEYS[1],110);
  assertExclusivelyOwned(KEYS[2],120);
  assertExclusivelyOwned(KEYS[3],130);
  assertExclusivelyOwned(KEYS[4],140);
  verify(mReleaser).release(110);
}
