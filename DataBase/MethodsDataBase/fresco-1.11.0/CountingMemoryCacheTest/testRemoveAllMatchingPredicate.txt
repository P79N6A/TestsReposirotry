@Test public void testRemoveAllMatchingPredicate(){
  CloseableReference<Integer> originalRef1=newReference(110);
  CloseableReference<Integer> valueRef1=mCache.cache(KEYS[1],originalRef1);
  originalRef1.close();
  valueRef1.close();
  CloseableReference<Integer> originalRef2=newReference(120);
  CloseableReference<Integer> valueRef2=mCache.cache(KEYS[2],originalRef2);
  originalRef2.close();
  valueRef2.close();
  CloseableReference<Integer> originalRef3=newReference(130);
  CloseableReference<Integer> valueRef3=mCache.cache(KEYS[3],originalRef3);
  originalRef3.close();
  CountingMemoryCache.Entry<String,Integer> entry3=mCache.mCachedEntries.get(KEYS[3]);
  CloseableReference<Integer> originalRef4=newReference(150);
  CloseableReference<Integer> valueRef4=mCache.cache(KEYS[4],originalRef4);
  originalRef4.close();
  int numEvictedEntries=mCache.removeAll(new Predicate<String>(){
    @Override public boolean apply(    String key){
      return key.equals(KEYS[2]) || key.equals(KEYS[3]);
    }
  }
);
  assertEquals(2,numEvictedEntries);
  assertTotalSize(2,260);
  assertExclusivelyOwnedSize(1,110);
  assertExclusivelyOwned(KEYS[1],110);
  assertNotCached(KEYS[2],120);
  assertOrphanWithCount(entry3,1);
  assertSharedWithCount(KEYS[4],150,1);
  verify(mReleaser).release(120);
  verify(mReleaser,never()).release(130);
  valueRef3.close();
  verify(mReleaser).release(130);
}
