@Test public void testEviction_ByTotalSize(){
  CloseableReference<Integer> originalRef1=newReference(400);
  CloseableReference<Integer> valueRef1=mCache.cache(KEYS[1],originalRef1);
  originalRef1.close();
  CloseableReference<Integer> originalRef2=newReference(500);
  CloseableReference<Integer> valueRef2=mCache.cache(KEYS[2],originalRef2);
  originalRef2.close();
  CloseableReference<Integer> originalRef3=newReference(100);
  CloseableReference<Integer> valueRef3=mCache.cache(KEYS[3],originalRef3);
  originalRef3.close();
  CloseableReference<Integer> originalRef4=newReference(700);
  CloseableReference<Integer> valueRef4=mCache.cache(KEYS[4],originalRef4);
  originalRef4.close();
  assertTotalSize(3,1000);
  assertExclusivelyOwnedSize(0,0);
  assertSharedWithCount(KEYS[1],400,1);
  assertSharedWithCount(KEYS[2],500,1);
  assertSharedWithCount(KEYS[3],100,1);
  assertNotCached(KEYS[4],700);
  assertNull(valueRef4);
  valueRef1.close();
  valueRef2.close();
  valueRef3.close();
  assertTotalSize(3,1000);
  assertExclusivelyOwnedSize(3,1000);
  valueRef4=mCache.cache(KEYS[4],newReference(700));
  assertTotalSize(2,800);
  assertExclusivelyOwnedSize(1,100);
  assertNotCached(KEYS[1],400);
  assertNotCached(KEYS[2],500);
  assertExclusivelyOwned(KEYS[3],100);
  assertSharedWithCount(KEYS[4],700,1);
  verify(mReleaser).release(400);
  verify(mReleaser).release(500);
}
