@Test public void testEviction_ByTotalCount(){
  CloseableReference<Integer> originalRef1=newReference(110);
  CloseableReference<Integer> valueRef1=mCache.cache(KEYS[1],originalRef1);
  originalRef1.close();
  CloseableReference<Integer> originalRef2=newReference(120);
  CloseableReference<Integer> valueRef2=mCache.cache(KEYS[2],originalRef2);
  originalRef2.close();
  CloseableReference<Integer> originalRef3=newReference(130);
  CloseableReference<Integer> valueRef3=mCache.cache(KEYS[3],originalRef3);
  originalRef3.close();
  CloseableReference<Integer> originalRef4=newReference(140);
  CloseableReference<Integer> valueRef4=mCache.cache(KEYS[4],originalRef4);
  originalRef4.close();
  CloseableReference<Integer> originalRef5=newReference(150);
  CloseableReference<Integer> valueRef5=mCache.cache(KEYS[5],originalRef5);
  originalRef5.close();
  assertTotalSize(4,500);
  assertExclusivelyOwnedSize(0,0);
  assertSharedWithCount(KEYS[1],110,1);
  assertSharedWithCount(KEYS[2],120,1);
  assertSharedWithCount(KEYS[3],130,1);
  assertSharedWithCount(KEYS[4],140,1);
  assertNotCached(KEYS[5],150);
  assertNull(valueRef5);
  valueRef1.close();
  valueRef2.close();
  valueRef3.close();
  assertTotalSize(4,500);
  assertExclusivelyOwnedSize(3,360);
  valueRef4=mCache.cache(KEYS[5],newReference(150));
  assertTotalSize(4,540);
  assertExclusivelyOwnedSize(2,250);
  assertNotCached(KEYS[1],110);
  assertExclusivelyOwned(KEYS[2],120);
  assertExclusivelyOwned(KEYS[3],130);
  assertSharedWithCount(KEYS[4],140,1);
  assertSharedWithCount(KEYS[5],150,1);
  verify(mReleaser).release(110);
}
