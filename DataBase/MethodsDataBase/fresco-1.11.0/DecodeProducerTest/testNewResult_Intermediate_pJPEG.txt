@Test public void testNewResult_Intermediate_pJPEG(){
  setupNetworkUri();
  Consumer<EncodedImage> consumer=produceResults();
  InOrder inOrder=inOrder(mJobScheduler,mProgressiveJpegParser);
  ArgumentCaptor<EncodedImage> argumentCaptor=ArgumentCaptor.forClass(EncodedImage.class);
  when(mJobScheduler.updateJob(mEncodedImage,Consumer.NO_FLAGS)).thenReturn(true);
  when(mProgressiveJpegParser.parseMoreData(any(EncodedImage.class))).thenReturn(true);
  when(mProgressiveJpegParser.getBestScanNumber()).thenReturn(PREVIEW_SCAN);
  consumer.onNewResult(mEncodedImage,Consumer.NO_FLAGS);
  inOrder.verify(mJobScheduler).updateJob(mEncodedImage,Consumer.NO_FLAGS);
  inOrder.verify(mProgressiveJpegParser).parseMoreData(argumentCaptor.capture());
  inOrder.verify(mJobScheduler).scheduleJob();
  assertSame(((EncodedImage)argumentCaptor.getValue()).getUnderlyingReferenceTestOnly(),mByteBufferRef.getUnderlyingReferenceTestOnly());
  PooledByteBuffer pooledByteBuffer2=mockPooledByteBuffer(210);
  CloseableReference<PooledByteBuffer> ref2=CloseableReference.of(pooledByteBuffer2);
  EncodedImage encodedImage2=mockEncodedJpeg(ref2);
  when(mJobScheduler.updateJob(encodedImage2,Consumer.NO_FLAGS)).thenReturn(true);
  when(mProgressiveJpegParser.parseMoreData(encodedImage2)).thenReturn(false);
  when(mProgressiveJpegParser.getBestScanNumber()).thenReturn(PREVIEW_SCAN);
  consumer.onNewResult(encodedImage2,Consumer.NO_FLAGS);
  inOrder.verify(mJobScheduler).updateJob(encodedImage2,Consumer.NO_FLAGS);
  inOrder.verify(mProgressiveJpegParser).parseMoreData(argumentCaptor.capture());
  inOrder.verify(mJobScheduler,never()).scheduleJob();
  assertSame(((EncodedImage)argumentCaptor.getValue()).getUnderlyingReferenceTestOnly(),ref2.getUnderlyingReferenceTestOnly());
  PooledByteBuffer pooledByteBuffer3=mockPooledByteBuffer(220);
  CloseableReference<PooledByteBuffer> ref3=CloseableReference.of(pooledByteBuffer3);
  EncodedImage encodedImage3=mockEncodedJpeg(ref3);
  when(mJobScheduler.updateJob(encodedImage3,Consumer.NO_FLAGS)).thenReturn(true);
  when(mProgressiveJpegParser.parseMoreData(encodedImage3)).thenReturn(true);
  when(mProgressiveJpegParser.getBestScanNumber()).thenReturn(PREVIEW_SCAN);
  consumer.onNewResult(encodedImage3,Consumer.NO_FLAGS);
  inOrder.verify(mJobScheduler).updateJob(encodedImage3,Consumer.NO_FLAGS);
  inOrder.verify(mProgressiveJpegParser).parseMoreData(argumentCaptor.capture());
  inOrder.verify(mJobScheduler,never()).scheduleJob();
  assertSame(((EncodedImage)argumentCaptor.getValue()).getUnderlyingReferenceTestOnly(),ref3.getUnderlyingReferenceTestOnly());
  PooledByteBuffer pooledByteBuffer4=mockPooledByteBuffer(300);
  CloseableReference<PooledByteBuffer> ref4=CloseableReference.of(pooledByteBuffer4);
  EncodedImage encodedImage4=mockEncodedJpeg(ref4);
  when(mJobScheduler.updateJob(encodedImage4,Consumer.NO_FLAGS)).thenReturn(true);
  when(mProgressiveJpegParser.parseMoreData(encodedImage4)).thenReturn(true);
  when(mProgressiveJpegParser.getBestScanNumber()).thenReturn(IGNORED_SCAN);
  consumer.onNewResult(encodedImage4,Consumer.NO_FLAGS);
  inOrder.verify(mJobScheduler).updateJob(encodedImage4,Consumer.NO_FLAGS);
  inOrder.verify(mProgressiveJpegParser).parseMoreData(argumentCaptor.capture());
  inOrder.verify(mJobScheduler,never()).scheduleJob();
  assertSame(((EncodedImage)argumentCaptor.getValue()).getUnderlyingReferenceTestOnly(),ref4.getUnderlyingReferenceTestOnly());
  PooledByteBuffer pooledByteBuffer5=mockPooledByteBuffer(500);
  CloseableReference<PooledByteBuffer> ref5=CloseableReference.of(pooledByteBuffer5);
  EncodedImage encodedImage5=mockEncodedJpeg(ref5);
  when(mJobScheduler.updateJob(encodedImage5,Consumer.NO_FLAGS)).thenReturn(true);
  when(mProgressiveJpegParser.parseMoreData(encodedImage5)).thenReturn(true);
  when(mProgressiveJpegParser.getBestScanNumber()).thenReturn(GOOD_ENOUGH_SCAN);
  consumer.onNewResult(encodedImage5,Consumer.NO_FLAGS);
  inOrder.verify(mJobScheduler).updateJob(encodedImage5,Consumer.NO_FLAGS);
  inOrder.verify(mProgressiveJpegParser).parseMoreData(argumentCaptor.capture());
  inOrder.verify(mJobScheduler).scheduleJob();
  assertSame(((EncodedImage)argumentCaptor.getValue()).getUnderlyingReferenceTestOnly(),ref5.getUnderlyingReferenceTestOnly());
}
