@Test public void testWaitForFinalResult_whenFailed_thenThrow() throws Throwable {
  final Exception expectedException=new IOException("failure failure");
  when(mDataSource.getFailureCause()).thenReturn(expectedException);
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      final Object[] args=invocation.getArguments();
      DataSubscriber dataSubscriber=(DataSubscriber)args[0];
      dataSubscriber.onFailure(mDataSource);
      return null;
    }
  }
).when(mDataSource).subscribe(any(DataSubscriber.class),any(Executor.class));
  try {
    DataSources.waitForFinalResult(mDataSource);
    fail("expected exception");
  }
 catch (  Exception exception) {
    assertEquals(expectedException,exception);
  }
  verify(mCountDownLatch,times(1)).await();
  verify(mCountDownLatch,times(1)).countDown();
}
