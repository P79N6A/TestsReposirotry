/** 
 * Ignore callbacks after closed.
 */
@Test public void testLifecycle_I2_C_S1(){
  DataSource<Object> dataSource=getAndSubscribe();
  DataSubscriber<Object> subscriber1=verifyGetAndSubscribeM(mDataSourceSupplier1,mSrc1);
  DataSubscriber<Object> subscriber2=verifyGetAndSubscribeM(mDataSourceSupplier2,mSrc2);
  DataSubscriber<Object> subscriber3=verifyGetAndSubscribe(mDataSourceSupplier3,mSrc3);
  Object val2a=mock(Object.class);
  setState(mSrc2,NOT_CLOSED,NOT_FINISHED,WITH_RESULT,val2a,NOT_FAILED,null);
  subscriber2.onNewResult(mSrc2);
  mInOrder.verify(mSrc3).close();
  verifySubscriber(dataSource,mSrc2,ON_NEW_RESULT);
  verifyState(dataSource,mSrc2,NOT_CLOSED,NOT_FINISHED,WITH_RESULT,val2a,NOT_FAILED,null);
  testClose(dataSource,mSrc1,mSrc2);
  verifySubscriber(dataSource,null,ON_CANCELLATION);
  verifyState(dataSource,null,CLOSED,NOT_FINISHED,WITHOUT_RESULT,null,NOT_FAILED,null);
  Object val=mock(Object.class);
  setState(mSrc2,NOT_CLOSED,FINISHED,WITH_RESULT,val,NOT_FAILED,null);
  subscriber2.onNewResult(mSrc2);
  verifySubscriber(dataSource,mSrc2,NO_INTERACTIONS);
  verifyState(dataSource,null,CLOSED,NOT_FINISHED,WITHOUT_RESULT,null,NOT_FAILED,null);
}
