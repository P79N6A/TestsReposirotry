@Test public void testTwoIdenticalRequestAndOneDifferent(){
  mMultiplexProducer.produceResults(mConsumer1,mProducerContext1);
  mMultiplexProducer.produceResults(mConsumer2,mProducerContext2);
  mForwardingConsumer1.onNewResult(mIntermediateImageReference1,Consumer.NO_FLAGS);
  mMultiplexProducer.produceResults(mConsumer3,mProducerContext3);
  verify(mConsumer3,never()).onNewResult(mIntermediateImageReference1,Consumer.NO_FLAGS);
  mForwardingConsumer2.onNewResult(mIntermediateImageReference2,Consumer.NO_FLAGS);
  verify(mConsumer3).onNewResult(mIntermediateImageReference2,Consumer.NO_FLAGS);
  verify(mConsumer1,never()).onNewResult(mIntermediateImageReference2,Consumer.NO_FLAGS);
  verify(mConsumer2,never()).onNewResult(mIntermediateImageReference2,Consumer.NO_FLAGS);
  assertTrue(mMultiplexProducer.mMultiplexers.size() == 2);
  mForwardingConsumer1.onNewResult(mFinalImageReference1,Consumer.IS_LAST);
  verify(mConsumer1).onNewResult(mFinalImageReference1,Consumer.IS_LAST);
  verify(mConsumer2).onNewResult(mFinalImageReference1,Consumer.IS_LAST);
  verify(mConsumer3,never()).onNewResult(mFinalImageReference1,Consumer.IS_LAST);
  assertTrue(mMultiplexProducer.mMultiplexers.size() == 1);
  mForwardingConsumer2.onNewResult(mFinalImageReference2,Consumer.IS_LAST);
  verify(mConsumer3).onNewResult(mFinalImageReference2,Consumer.IS_LAST);
  verify(mConsumer1,never()).onNewResult(mFinalImageReference2,Consumer.IS_LAST);
  verify(mConsumer2,never()).onNewResult(mFinalImageReference2,Consumer.IS_LAST);
  assertTrue(mMultiplexProducer.mMultiplexers.isEmpty());
}
