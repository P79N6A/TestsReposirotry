/** 
 * Tests size based file eviction of cache files. Also tests that unexpected files (which are not in the format expected by the cache) do not count towards the cache size, and are also evicted during both evictions (LRU and Old).
 * @throws Exception
 */
@Test public void testCacheFile() throws Exception {
  if (!mCacheDirectory.exists() && !mCacheDirectory.mkdirs()) {
    throw new RuntimeException("Cannot create cache dir");
  }
  File unexpected1=new File(mCacheDirectory,"unexpected1");
  RandomAccessFile rf1=new RandomAccessFile(unexpected1,"rw");
  rf1.setLength(110);
  when(mClock.now()).thenReturn(TimeUnit.HOURS.toMillis(1));
  assertTrue(unexpected1.setLastModified(mClock.now()));
  CacheKey key1=new SimpleCacheKey("foo");
  byte[] value1=new byte[101];
  value1[80]='c';
  mCache.insert(key1,WriterCallbacks.from(value1));
  assertArrayEquals(value1,getContents(getResource(key1)));
  when(mClock.now()).thenReturn(TimeUnit.HOURS.toMillis(2));
  assertTrue(mCache.probe(key1));
  assertTrue(mCache.getSize() == 101);
  File unexpected2=new File(mCacheDirectory,"unexpected2");
  RandomAccessFile rf2=new RandomAccessFile(unexpected2,"rw");
  rf2.setLength(120);
  when(mClock.now()).thenReturn(TimeUnit.HOURS.toMillis(3));
  assertTrue(unexpected2.setLastModified(mClock.now()));
  CacheKey key2=new SimpleCacheKey("bar");
  byte[] value2=new byte[102];
  value2[80]='d';
  mCache.insert(key2,WriterCallbacks.from(value2));
  when(mClock.now()).thenReturn(TimeUnit.HOURS.toMillis(4));
  assertTrue(mCache.probe(key2));
  assertTrue(mCache.getSize() == 203);
  CacheKey key3=new SimpleCacheKey("foobar");
  byte[] value3=new byte[103];
  value3[80]='e';
  mCache.insert(key3,WriterCallbacks.from(value3));
  assertNull(getResource(key1));
  assertFalse(unexpected1.exists());
  assertFalse(unexpected2.exists());
  assertArrayEquals(value2,getContents(getResource(key2)));
  assertArrayEquals(value3,getContents(getResource(key3)));
  assertTrue(String.format(Locale.US,"Expected cache size of %d but is %d",205,mCache.getSize()),mCache.getSize() == 205);
  File unexpected3=new File(mCacheDirectory,"unexpected3");
  RandomAccessFile rf3=new RandomAccessFile(unexpected3,"rw");
  rf3.setLength(120);
  assertTrue(unexpected3.exists());
  mCache.clearAll();
  assertEquals(-1,mCache.getSize());
  assertFalse(unexpected3.exists());
  assertNull(getResource(key2));
  assertNull(getResource(key3));
}
