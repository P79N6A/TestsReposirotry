@Test public void testLocalVideoMicroThumbnailSuccess() throws Exception {
  when(mImageRequest.getSourceUri()).thenReturn(LOCAL_VIDEO_URI);
  when(mProducerListener.requiresExtraMap(mRequestId)).thenReturn(true);
  when(android.media.ThumbnailUtils.createVideoThumbnail(mFile.getPath(),MediaStore.Images.Thumbnails.MICRO_KIND)).thenReturn(mBitmap);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      mCloseableReference=((CloseableReference)invocation.getArguments()[0]).clone();
      return null;
    }
  }
).when(mConsumer).onNewResult(any(CloseableReference.class),eq(Consumer.IS_LAST));
  mLocalVideoThumbnailProducer.produceResults(mConsumer,mProducerContext);
  mExecutor.runUntilIdle();
  assertEquals(1,mCloseableReference.getUnderlyingReferenceTestOnly().getRefCountTestOnly());
  assertEquals(mBitmap,mCloseableReference.getUnderlyingReferenceTestOnly().get().getUnderlyingBitmap());
  verify(mProducerListener).onProducerStart(mRequestId,PRODUCER_NAME);
  Map<String,String> thumbnailFoundMap=ImmutableMap.of(LocalVideoThumbnailProducer.CREATED_THUMBNAIL,"true");
  verify(mProducerListener).onProducerFinishWithSuccess(mRequestId,PRODUCER_NAME,thumbnailFoundMap);
  verify(mProducerListener).onUltimateProducerReached(mRequestId,PRODUCER_NAME,true);
}
