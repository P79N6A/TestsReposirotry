/** 
 * Test that instancesMap in Application and shuffleVirtualHostNameMap in Applications are correctly updated when the last instance is removed from an application and shuffleInstances has been run.
 */
@Test public void shuffleRemoteRegistryTest() throws Exception {
  AmazonInfo ai1=AmazonInfo.Builder.newBuilder().addMetadata(MetaDataKey.availabilityZone,"us-east-1a").build();
  InstanceInfo instanceInfo1=InstanceInfo.Builder.newBuilder().setAppName("test").setVIPAddress("test.testname:1").setSecureVIPAddress("securetest.testname:7102").setDataCenterInfo(ai1).setAppName("TestApp").setHostName("test.east.hostname").build();
  AmazonInfo ai2=AmazonInfo.Builder.newBuilder().addMetadata(MetaDataKey.availabilityZone,"us-west-2a").build();
  InstanceInfo instanceInfo2=InstanceInfo.Builder.newBuilder().setAppName("test").setVIPAddress("test.testname:1").setSecureVIPAddress("securetest.testname:7102").setDataCenterInfo(ai2).setAppName("TestApp").setHostName("test.west.hostname").build();
  Application application=new Application("TestApp");
  application.addInstance(instanceInfo1);
  application.addInstance(instanceInfo2);
  Applications applications=new Applications();
  assertEquals(0,applications.size());
  applications.addApplication(application);
  assertEquals(2,applications.size());
  EurekaClientConfig clientConfig=Mockito.mock(EurekaClientConfig.class);
  Mockito.when(clientConfig.getAvailabilityZones("us-east-1")).thenReturn(new String[]{"us-east-1a","us-east-1b","us-east-1c","us-east-1d","us-east-1e","us-east-1f"});
  Mockito.when(clientConfig.getAvailabilityZones("us-west-2")).thenReturn(new String[]{"us-west-2a","us-west-2b","us-west-2c"});
  Mockito.when(clientConfig.getRegion()).thenReturn("us-east-1");
  Constructor<?> ctor=InstanceRegionChecker.class.getDeclaredConstructor(AzToRegionMapper.class,String.class);
  ctor.setAccessible(true);
  PropertyBasedAzToRegionMapper azToRegionMapper=new PropertyBasedAzToRegionMapper(clientConfig);
  azToRegionMapper.setRegionsToFetch(new String[]{"us-east-1","us-west-2"});
  InstanceRegionChecker instanceRegionChecker=(InstanceRegionChecker)ctor.newInstance(azToRegionMapper,"us-west-2");
  Map<String,Applications> remoteRegionsRegistry=new HashMap<>();
  remoteRegionsRegistry.put("us-east-1",new Applications());
  applications.shuffleAndIndexInstances(remoteRegionsRegistry,clientConfig,instanceRegionChecker);
  assertNotNull(remoteRegionsRegistry.get("us-east-1").getRegisteredApplications("TestApp").getByInstanceId("test.east.hostname"));
  assertNull(applications.getRegisteredApplications("TestApp").getByInstanceId("test.east.hostname"));
  assertNull(remoteRegionsRegistry.get("us-east-1").getRegisteredApplications("TestApp").getByInstanceId("test.west.hostname"));
  assertNotNull(applications.getRegisteredApplications("TestApp").getByInstanceId("test.west.hostname"));
}
