@Test public void testBackupRegistryInjection() throws Exception {
  final BackupRegistry backupRegistry=mock(BackupRegistry.class);
  when(backupRegistry.fetchRegistry()).thenReturn(APPLICATIONS);
  Injector injector=LifecycleInjector.builder().withModules(new AbstractModule(){
    @Override protected void configure(){
      bind(EurekaInstanceConfig.class).to(LocalEurekaInstanceConfig.class);
      bind(EurekaClientConfig.class).to(BadServerEurekaClientConfig1.class);
      bind(BackupRegistry.class).toInstance(backupRegistry);
      bind(AbstractDiscoveryClientOptionalArgs.class).to(Jersey1DiscoveryClientOptionalArgs.class).in(Scopes.SINGLETON);
    }
  }
).build().createInjector();
  LifecycleManager lifecycleManager=injector.getInstance(LifecycleManager.class);
  lifecycleManager.start();
  EurekaClient client=injector.getInstance(EurekaClient.class);
  verify(backupRegistry,atLeast(1)).fetchRegistry();
  assertThat(countInstances(client.getApplications()),is(equalTo(1)));
}
