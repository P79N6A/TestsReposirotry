@Test public void testEurekaClientLifecycle() throws Exception {
  Injector injector=LifecycleInjector.builder().withModules(new AbstractModule(){
    @Override protected void configure(){
      bind(EurekaInstanceConfig.class).to(LocalEurekaInstanceConfig.class);
      bind(EurekaClientConfig.class).to(LocalEurekaClientConfig.class);
      bind(AbstractDiscoveryClientOptionalArgs.class).to(Jersey1DiscoveryClientOptionalArgs.class).in(Scopes.SINGLETON);
    }
  }
).build().createInjector();
  LifecycleManager lifecycleManager=injector.getInstance(LifecycleManager.class);
  lifecycleManager.start();
  EurekaClient client=injector.getInstance(EurekaClient.class);
  verify(requestHandler,timeout(TIMEOUT_MS).atLeast(1)).register(any(InstanceInfo.class));
  verify(requestHandler,timeout(TIMEOUT_MS).times(1)).getApplications();
  verify(requestHandler,timeout(TIMEOUT_MS).atLeast(1)).getDelta();
  assertThat(countInstances(client.getApplications()),is(equalTo(1)));
  lifecycleManager.close();
  verify(requestHandler,times(1)).cancel(MY_APPLICATION_NAME,MY_INSTANCE_ID);
}
