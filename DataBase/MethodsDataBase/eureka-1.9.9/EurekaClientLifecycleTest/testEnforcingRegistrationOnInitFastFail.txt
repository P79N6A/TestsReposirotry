@Test(expected=ProvisionException.class) public void testEnforcingRegistrationOnInitFastFail(){
  Injector injector=LifecycleInjector.builder().withModules(new AbstractModule(){
    @Override protected void configure(){
      bind(EurekaInstanceConfig.class).to(LocalEurekaInstanceConfig.class);
      bind(EurekaClientConfig.class).to(BadServerEurekaClientConfig2.class);
      bind(AbstractDiscoveryClientOptionalArgs.class).to(Jersey1DiscoveryClientOptionalArgs.class).in(Scopes.SINGLETON);
    }
  }
).build().createInjector();
  LifecycleManager lifecycleManager=injector.getInstance(LifecycleManager.class);
  try {
    lifecycleManager.start();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  EurekaClient client=injector.getInstance(EurekaClient.class);
}
