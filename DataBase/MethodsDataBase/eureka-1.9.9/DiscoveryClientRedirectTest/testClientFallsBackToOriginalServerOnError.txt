@Test public void testClientFallsBackToOriginalServerOnError() throws Exception {
  Applications fullFetchApps1=dataGenerator.takeDelta(1);
  String fullFetchJson1=toJson(fullFetchApps1);
  Applications fullFetchApps2=EurekaEntityFunctions.mergeApplications(fullFetchApps1,dataGenerator.takeDelta(1));
  String fullFetchJson2=toJson(fullFetchApps2);
  redirectServerMockClient.when(request().withMethod("GET").withPath("/eureka/v2/apps/")).respond(response().withStatusCode(302).withHeader(new Header("Location",targetServerBaseUri + "/eureka/v2/apps/")));
  targetServerMockClient.client.when(request().withMethod("GET").withPath("/eureka/v2/apps/"),Times.exactly(1)).respond(response().withStatusCode(200).withHeader(new Header("Content-Type","application/json")).withBody(fullFetchJson1));
  targetServerMockClient.client.when(request().withMethod("GET").withPath("/eureka/v2/apps/delta"),Times.exactly(1)).respond(response().withStatusCode(500));
  redirectServerMockClient.when(request().withMethod("GET").withPath("/eureka/v2/apps/delta")).respond(response().withStatusCode(200).withHeader(new Header("Content-Type","application/json")).withBody(fullFetchJson2));
  final EurekaClient client=registryFetchClientRule.getClient();
  await(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      List<Application> applicationList=client.getApplications().getRegisteredApplications();
      return !applicationList.isEmpty() && applicationList.get(0).getInstances().size() == 2;
    }
  }
,1,TimeUnit.MINUTES);
  redirectServerMockClient.verify(request().withMethod("GET").withPath("/eureka/v2/apps/"),exactly(1));
  redirectServerMockClient.verify(request().withMethod("GET").withPath("/eureka/v2/apps/delta"),exactly(1));
  targetServerMockClient.client.verify(request().withMethod("GET").withPath("/eureka/v2/apps/"),exactly(1));
  targetServerMockClient.client.verify(request().withMethod("GET").withPath("/eureka/v2/apps/delta"),exactly(1));
}
