@Test public void testClientQueryFollowsRedirectsAndPinsToTargetServer() throws Exception {
  Applications fullFetchApps=dataGenerator.takeDelta(1);
  String fullFetchJson=toJson(fullFetchApps);
  Applications deltaFetchApps=dataGenerator.takeDelta(1);
  String deltaFetchJson=toJson(deltaFetchApps);
  redirectServerMockClient.when(request().withMethod("GET").withPath("/eureka/v2/apps/")).respond(response().withStatusCode(302).withHeader(new Header("Location",targetServerBaseUri + "/eureka/v2/apps/")));
  targetServerMockClient.client.when(request().withMethod("GET").withPath("/eureka/v2/apps/")).respond(response().withStatusCode(200).withHeader(new Header("Content-Type","application/json")).withBody(fullFetchJson));
  targetServerMockClient.client.when(request().withMethod("GET").withPath("/eureka/v2/apps/delta")).respond(response().withStatusCode(200).withHeader(new Header("Content-Type","application/json")).withBody(deltaFetchJson));
  final EurekaClient client=registryFetchClientRule.getClient();
  await(new Callable<Boolean>(){
    @Override public Boolean call() throws Exception {
      List<Application> applicationList=client.getApplications().getRegisteredApplications();
      return !applicationList.isEmpty() && applicationList.get(0).getInstances().size() == 2;
    }
  }
,1,TimeUnit.MINUTES);
  redirectServerMockClient.verify(request().withMethod("GET").withPath("/eureka/v2/apps/"),exactly(1));
  redirectServerMockClient.verify(request().withMethod("GET").withPath("/eureka/v2/apps/delta"),exactly(0));
  targetServerMockClient.client.verify(request().withMethod("GET").withPath("/eureka/v2/apps/"),exactly(1));
  targetServerMockClient.client.verify(request().withMethod("GET").withPath("/eureka/v2/apps/delta"),atLeast(1));
}
