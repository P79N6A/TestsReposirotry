@Test public void testComponentStateReachesStableStateWithTerminatingComponents() throws Exception {
  final String serviceName="testComponentStateUpdatesWithTerminatingComponents";
  Service testService=ServiceTestUtils.createTerminatingJobExample(serviceName);
  TestServiceManager.createDef(serviceName,testService);
  ServiceContext context=new MockRunningServiceContext(rule,testService);
  for (  Component comp : context.scheduler.getAllComponents().values()) {
    Iterator<ComponentInstance> instanceIter=comp.getAllComponentInstances().iterator();
    ComponentInstance componentInstance=instanceIter.next();
    Container instanceContainer=componentInstance.getContainer();
    Assert.assertEquals(0,comp.getNumSucceededInstances());
    Assert.assertEquals(0,comp.getNumFailedInstances());
    Assert.assertEquals(2,comp.getNumRunningInstances());
    Assert.assertEquals(2,comp.getNumReadyInstances());
    Assert.assertEquals(0,comp.getPendingInstances().size());
    ContainerStatus containerStatus=ContainerStatus.newInstance(instanceContainer.getId(),org.apache.hadoop.yarn.api.records.ContainerState.COMPLETE,"successful",0);
    comp.handle(new ComponentEvent(comp.getName(),ComponentEventType.CONTAINER_COMPLETED).setStatus(containerStatus).setContainerId(instanceContainer.getId()));
    componentInstance.handle(new ComponentInstanceEvent(componentInstance.getContainer().getId(),ComponentInstanceEventType.STOP).setStatus(containerStatus));
    Assert.assertEquals(1,comp.getNumSucceededInstances());
    Assert.assertEquals(0,comp.getNumFailedInstances());
    Assert.assertEquals(1,comp.getNumRunningInstances());
    Assert.assertEquals(1,comp.getNumReadyInstances());
    Assert.assertEquals(0,comp.getPendingInstances().size());
    org.apache.hadoop.yarn.service.component.ComponentState componentState=Component.checkIfStable(comp);
    Assert.assertEquals(org.apache.hadoop.yarn.service.component.ComponentState.STABLE,componentState);
  }
}
