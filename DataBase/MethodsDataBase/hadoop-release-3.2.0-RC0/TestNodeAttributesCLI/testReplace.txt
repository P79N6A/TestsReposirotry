@Test public void testReplace() throws Exception {
  String[] args=new String[]{"-replace","x("};
  assertTrue("It should have failed as no node is specified",0 != runTool(args));
  assertFailureMessageContains(NodeAttributesCLI.INVALID_MAPPING_ERR_MSG);
  args=new String[]{"-replace","x:(=abc"};
  assertTrue("It should have failed as no closing parenthesis is not specified",0 != runTool(args));
  assertFailureMessageContains("Attribute for node x is not properly configured : (=abc");
  args=new String[]{"-replace","x:()=abc"};
  assertTrue("It should have failed as no type specified inside parenthesis",0 != runTool(args));
  assertFailureMessageContains("Attribute for node x is not properly configured : ()=abc");
  args=new String[]{"-replace",":x(string)"};
  assertTrue("It should have failed as no node is specified",0 != runTool(args));
  assertFailureMessageContains("Node name cannot be empty");
  args=new String[]{"-replace","x:(key=value)"};
  assertTrue(0 != runTool(args));
  assertFailureMessageContains("Attribute for node x is not properly configured : (key=value)");
  args=new String[]{"-replace"};
  assertTrue("Should fail as no attribute mappings specified",0 != runTool(args));
  assertFailureMessageContains(NodeAttributesCLI.MISSING_ARGUMENT);
  args=new String[]{"-replace","-failOnUnknownNodes","x:key(string)=value,key2=val2"};
  assertTrue("Should fail as no attribute mappings specified for replace",0 != runTool(args));
  assertFailureMessageContains(NodeAttributesCLI.MISSING_ARGUMENT);
  args=new String[]{"-replace"," "};
  assertTrue(0 != runTool(args));
  assertFailureMessageContains(NodeAttributesCLI.NO_MAPPING_ERR_MSG);
  args=new String[]{"-replace",", "};
  assertTrue(0 != runTool(args));
  assertFailureMessageContains(NodeAttributesCLI.INVALID_MAPPING_ERR_MSG);
  args=new String[]{"-replace","x:key(string)=value,key2=val2 y:key2=val23,key3 z:key4"};
  assertTrue("Should not fail as attribute has been properly mapped",0 == runTool(args));
  List<NodeToAttributes> nodeAttributesList=new ArrayList<>();
  List<NodeAttribute> attributes=new ArrayList<>();
  attributes.add(NodeAttribute.newInstance("key",NodeAttributeType.STRING,"value"));
  attributes.add(NodeAttribute.newInstance("key2",NodeAttributeType.STRING,"val2"));
  nodeAttributesList.add(NodeToAttributes.newInstance("x",attributes));
  attributes=new ArrayList<>();
  attributes.add(NodeAttribute.newInstance("key2",NodeAttributeType.STRING,"val23"));
  attributes.add(NodeAttribute.newInstance("key3",NodeAttributeType.STRING,""));
  nodeAttributesList.add(NodeToAttributes.newInstance("y",attributes));
  attributes=new ArrayList<>();
  attributes.add(NodeAttribute.newInstance("key2",NodeAttributeType.STRING,"val23"));
  attributes.add(NodeAttribute.newInstance("key3",NodeAttributeType.STRING,""));
  nodeAttributesList.add(NodeToAttributes.newInstance("y",attributes));
  attributes=new ArrayList<>();
  attributes.add(NodeAttribute.newInstance("key4",NodeAttributeType.STRING,""));
  nodeAttributesList.add(NodeToAttributes.newInstance("z",attributes));
  NodesToAttributesMappingRequest expected=NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.REPLACE,nodeAttributesList,false);
  assertTrue(nodeToAttrRequest.equals(expected));
}
