@Test public void testAttributesToNodes() throws Exception {
  when(client.getAttributesToNodes(any(GetAttributesToNodesRequest.class))).thenAnswer(new Answer<GetAttributesToNodesResponse>(){
    @Override public GetAttributesToNodesResponse answer(    InvocationOnMock invocation) throws Throwable {
      GetAttributesToNodesRequest attrToNodes=(GetAttributesToNodesRequest)invocation.getArguments()[0];
      return GetAttributesToNodesResponse.newInstance(ImmutableMap.<NodeAttributeKey,List<NodeToAttributeValue>>builder().put(NodeAttributeKey.newInstance("GPU"),ImmutableList.of(NodeToAttributeValue.newInstance("host1","ARM"))).build());
    }
  }
);
  String[] args=new String[]{"-attributestonodes"};
  assertTrue("It should be success since it list all attributes",0 == runTool(args));
  assertSysOutContains("Hostname\tAttribute-value","rm.yarn.io/GPU :","host1\t            ARM");
  args=new String[]{"-attributestonodes","-attributes"};
  assertTrue("It should not success since attributes for filter are not specified",0 != runTool(args));
  assertErrorContains(NodeAttributesCLI.MISSING_ARGUMENT);
  args=new String[]{"-attributestonodes","-attributes","fail/da/fail"};
  assertTrue("It should not success since attributes format is not correct",0 != runTool(args));
  assertErrorContains("Attribute format not correct. Should be <[prefix]/[name]> " + ":fail/da/fail");
}
