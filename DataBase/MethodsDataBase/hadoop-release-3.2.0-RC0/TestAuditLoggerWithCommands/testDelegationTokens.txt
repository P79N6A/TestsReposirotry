@Test public void testDelegationTokens() throws Exception {
  Token dt=fs.getDelegationToken("foo");
  final String getDT=".*src=HDFS_DELEGATION_TOKEN token 1.*with renewer foo.*";
  verifyAuditLogs(true,".*cmd=getDelegationToken" + getDT);
  final UserGroupInformation foo=UserGroupInformation.createUserForTesting("foo",new String[]{});
  foo.doAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      dt.renew(conf);
      return null;
    }
  }
);
  verifyAuditLogs(true,".*cmd=renewDelegationToken" + getDT);
  try {
    dt.renew(conf);
    fail("Renewing a token with non-renewer should fail");
  }
 catch (  AccessControlException expected) {
  }
  verifyAuditLogs(false,".*cmd=renewDelegationToken" + getDT);
  final UserGroupInformation bar=UserGroupInformation.createUserForTesting("bar",new String[]{});
  try {
    bar.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        dt.cancel(conf);
        return null;
      }
    }
);
    fail("Canceling a token with non-renewer should fail");
  }
 catch (  AccessControlException expected) {
  }
  verifyAuditLogs(false,".*cmd=cancelDelegationToken" + getDT);
  dt.cancel(conf);
  verifyAuditLogs(true,".*cmd=cancelDelegationToken" + getDT);
}
