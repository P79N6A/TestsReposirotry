/** 
 * Allocate and release three containers requested by two apps in two rounds.
 */
@Test public void testMultiplePreemptionEvents(){
  RMNode node=createNode();
  FSSchedulerNode schedulerNode=new FSSchedulerNode(node,false);
  saturateCluster(schedulerNode);
  assertEquals("Container should be allocated",Resources.multiply(containers.get(0).getContainer().getResource(),containers.size()),schedulerNode.getAllocatedResource());
  FSAppAttempt starvingApp1=createStarvingApp(schedulerNode,Resource.newInstance(2048,2));
  FSAppAttempt starvingApp2=createStarvingApp(schedulerNode,Resource.newInstance(1024,1));
  schedulerNode.addContainersForPreemption(Collections.singletonList(containers.get(0)),starvingApp1);
  schedulerNode.addContainersForPreemption(Collections.singletonList(containers.get(1)),starvingApp1);
  schedulerNode.addContainersForPreemption(Collections.singletonList(containers.get(2)),starvingApp2);
  schedulerNode.releaseContainer(containers.get(1).getContainerId(),true);
  allocateContainers(schedulerNode);
  schedulerNode.releaseContainer(containers.get(2).getContainerId(),true);
  schedulerNode.releaseContainer(containers.get(0).getContainerId(),true);
  allocateContainers(schedulerNode);
  assertEquals("Container should be allocated",schedulerNode.getTotalResource(),schedulerNode.getAllocatedResource());
  for (int i=3; i < containers.size(); ++i) {
    schedulerNode.releaseContainer(containers.get(i).getContainerId(),true);
  }
  finalValidation(schedulerNode);
}
