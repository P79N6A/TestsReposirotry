/** 
 * Verify that the file/dir listing contains correct date/time information.
 */
@Test public void testListFilesTime() throws Exception {
  Long beforeCreatingTime=Time.now();
  MountTable addEntry=MountTable.newInstance("/testdir",Collections.singletonMap("ns0","/testdir"));
  assertTrue(addMountTable(addEntry));
  addEntry=MountTable.newInstance("/testdir2",Collections.singletonMap("ns0","/testdir2"));
  assertTrue(addMountTable(addEntry));
  addEntry=MountTable.newInstance("/testdir/subdir",Collections.singletonMap("ns0","/testdir/subdir"));
  assertTrue(addMountTable(addEntry));
  addEntry=MountTable.newInstance("/testdir3/subdir1",Collections.singletonMap("ns0","/testdir3"));
  assertTrue(addMountTable(addEntry));
  addEntry=MountTable.newInstance("/testA/testB/testC/testD",Collections.singletonMap("ns0","/test"));
  assertTrue(addMountTable(addEntry));
  final FileSystem nnFs=nnContext.getFileSystem();
  assertTrue(nnFs.mkdirs(new Path("/newdir")));
  Map<String,Long> pathModTime=new TreeMap<>();
  for (  String mount : mountTable.getMountPoints("/")) {
    if (mountTable.getMountPoint("/" + mount) != null) {
      pathModTime.put(mount,mountTable.getMountPoint("/" + mount).getDateModified());
    }
 else {
      List<MountTable> entries=mountTable.getMounts("/" + mount);
      for (      MountTable entry : entries) {
        if (pathModTime.get(mount) == null || pathModTime.get(mount) < entry.getDateModified()) {
          pathModTime.put(mount,entry.getDateModified());
        }
      }
    }
  }
  FileStatus[] iterator=nnFs.listStatus(new Path("/"));
  for (  FileStatus file : iterator) {
    pathModTime.put(file.getPath().getName(),file.getModificationTime());
  }
  DirectoryListing listing=routerProtocol.getListing("/",HdfsFileStatus.EMPTY_NAME,false);
  Iterator<String> pathModTimeIterator=pathModTime.keySet().iterator();
  for (  HdfsFileStatus f : listing.getPartialListing()) {
    String fileName=pathModTimeIterator.next();
    String currentFile=f.getFullPath(new Path("/")).getName();
    Long currentTime=f.getModificationTime();
    Long expectedTime=pathModTime.get(currentFile);
    assertEquals(currentFile,fileName);
    assertTrue(currentTime > beforeCreatingTime);
    assertEquals(currentTime,expectedTime);
  }
  assertEquals(pathModTime.size(),listing.getPartialListing().length);
}
