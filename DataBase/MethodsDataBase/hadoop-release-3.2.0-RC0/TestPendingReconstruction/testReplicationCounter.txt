/** 
 * Test the metric counters of the re-replication process.
 * @throws IOException
 * @throws InterruptedException
 * @throws TimeoutException
 */
@Test(timeout=300000) public void testReplicationCounter() throws IOException, InterruptedException, TimeoutException {
  HdfsConfiguration conf=new HdfsConfiguration();
  conf.setInt(DFS_NAMENODE_REDUNDANCY_INTERVAL_SECONDS_KEY,1);
  conf.setInt(DFS_NAMENODE_RECONSTRUCTION_PENDING_TIMEOUT_SEC_KEY,1);
  MiniDFSCluster tmpCluster=new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_COUNT).build();
  tmpCluster.waitActive();
  FSNamesystem fsn=tmpCluster.getNamesystem(0);
  fsn.writeLock();
  try {
    BlockManager bm=fsn.getBlockManager();
    BlocksMap blocksMap=bm.blocksMap;
    BlockCollection bc0=Mockito.mock(BlockCollection.class);
    BlockInfo blockInfo0=new BlockInfoContiguous((short)3);
    blockInfo0.setBlockId(0);
    BlockCollection bc1=Mockito.mock(BlockCollection.class);
    BlockInfo blockInfo1=new BlockInfoContiguous((short)3);
    blockInfo1.setBlockId(1);
    BlockCollection bc2=Mockito.mock(BlockCollection.class);
    BlockInfo blockInfo2=new BlockInfoContiguous((short)3);
    blockInfo2.setBlockId(2);
    blocksMap.addBlockCollection(blockInfo0,bc0);
    blocksMap.addBlockCollection(blockInfo1,bc1);
    blocksMap.addBlockCollection(blockInfo2,bc2);
    PendingReconstructionBlocks pending=bm.pendingReconstruction;
    MetricsRecordBuilder rb=getMetrics("NameNodeActivity");
    assertCounter("SuccessfulReReplications",0L,rb);
    assertCounter("NumTimesReReplicationNotScheduled",0L,rb);
    assertCounter("TimeoutReReplications",0L,rb);
    pending.increment(blockInfo0);
    pending.increment(blockInfo1);
    DatanodeStorageInfo[] storageInfos=DFSTestUtil.createDatanodeStorageInfos(1);
    bm.addBlock(storageInfos[0],blockInfo0,null);
    bm.scheduleReconstruction(blockInfo2,0);
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        MetricsRecordBuilder rb=getMetrics("NameNodeActivity");
        return getLongCounter("SuccessfulReReplications",rb) == 1 && getLongCounter("NumTimesReReplicationNotScheduled",rb) == 1 && getLongCounter("TimeoutReReplications",rb) == 1;
      }
    }
,100,60000);
  }
  finally {
    tmpCluster.shutdown();
    fsn.writeUnlock();
  }
}
