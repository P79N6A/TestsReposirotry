/** 
 * Test various scheduling combinations to ensure scheduling and throttling behave as expected.
 */
@Test(timeout=60000) public void testScheduler() throws Exception {
  final NoOpCheckable target1=new NoOpCheckable();
  final NoOpCheckable target2=new NoOpCheckable();
  final FakeTimer timer=new FakeTimer();
  ThrottledAsyncChecker<Boolean,Boolean> checker=new ThrottledAsyncChecker<>(timer,MIN_ERROR_CHECK_GAP,0,getExecutorService());
  assertTrue(checker.schedule(target1,true).isPresent());
  waitTestCheckableCheckCount(target1,1L);
  assertFalse(checker.schedule(target1,true).isPresent());
  waitTestCheckableCheckCount(target1,1L);
  assertTrue(checker.schedule(target2,true).isPresent());
  waitTestCheckableCheckCount(target2,1L);
  timer.advance(MIN_ERROR_CHECK_GAP - 1);
  assertFalse(checker.schedule(target1,true).isPresent());
  waitTestCheckableCheckCount(target1,1L);
  assertFalse(checker.schedule(target2,true).isPresent());
  waitTestCheckableCheckCount(target2,1L);
  timer.advance(MIN_ERROR_CHECK_GAP);
  assertTrue(checker.schedule(target1,true).isPresent());
  waitTestCheckableCheckCount(target1,2L);
  assertTrue(checker.schedule(target2,true).isPresent());
  waitTestCheckableCheckCount(target2,2L);
}
