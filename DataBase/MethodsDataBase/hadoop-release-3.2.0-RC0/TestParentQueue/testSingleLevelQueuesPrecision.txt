@Test public void testSingleLevelQueuesPrecision() throws Exception {
  setupSingleLevelQueues(csConf);
  final String Q_A=CapacitySchedulerConfiguration.ROOT + "." + "a";
  csConf.setCapacity(Q_A,30);
  final String Q_B=CapacitySchedulerConfiguration.ROOT + "." + "b";
  csConf.setCapacity(Q_B,70.5F);
  Map<String,CSQueue> queues=new HashMap<String,CSQueue>();
  boolean exceptionOccurred=false;
  try {
    CapacitySchedulerQueueManager.parseQueue(csContext,csConf,null,CapacitySchedulerConfiguration.ROOT,queues,queues,TestUtils.spyHook);
  }
 catch (  IllegalArgumentException ie) {
    exceptionOccurred=true;
  }
  if (!exceptionOccurred) {
    Assert.fail("Capacity is more then 100% so should be failed.");
  }
  csConf.setCapacity(Q_A,30);
  csConf.setCapacity(Q_B,70);
  exceptionOccurred=false;
  queues.clear();
  try {
    CapacitySchedulerQueueManager.parseQueue(csContext,csConf,null,CapacitySchedulerConfiguration.ROOT,queues,queues,TestUtils.spyHook);
  }
 catch (  IllegalArgumentException ie) {
    exceptionOccurred=true;
  }
  if (exceptionOccurred) {
    Assert.fail("Capacity is 100% so should not be failed.");
  }
  csConf.setCapacity(Q_A,30);
  csConf.setCapacity(Q_B,70.005F);
  exceptionOccurred=false;
  queues.clear();
  try {
    CapacitySchedulerQueueManager.parseQueue(csContext,csConf,null,CapacitySchedulerConfiguration.ROOT,queues,queues,TestUtils.spyHook);
  }
 catch (  IllegalArgumentException ie) {
    exceptionOccurred=true;
  }
  if (exceptionOccurred) {
    Assert.fail("Capacity is under PRECISION which is .05% so should not be failed.");
  }
}
