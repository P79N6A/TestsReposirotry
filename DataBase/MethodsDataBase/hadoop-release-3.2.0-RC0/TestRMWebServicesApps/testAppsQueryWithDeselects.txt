@Test public void testAppsQueryWithDeselects() throws JSONException, Exception {
  rm.start();
  MockNM amNodeManager=rm.registerNode("127.0.0.1:1234",2048);
  rm.submitApp(CONTAINER_MB);
  amNodeManager.nodeHeartbeat(true);
  WebResource r=resource();
  MultivaluedMapImpl params=new MultivaluedMapImpl();
  params.add("deSelects",DeSelectFields.DeSelectType.RESOURCE_REQUESTS.toString());
  ClientResponse response=r.path("ws").path("v1").path("cluster").path("apps").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
  JSONObject json=response.getEntity(JSONObject.class);
  assertEquals("incorrect number of elements",1,json.length());
  JSONObject apps=json.getJSONObject("apps");
  assertEquals("incorrect number of elements",1,apps.length());
  JSONArray array=apps.getJSONArray("app");
  assertEquals("incorrect number of elements",1,array.length());
  JSONObject app=array.getJSONObject(0);
  assertTrue("resource requests shouldn't exist",!app.has("resourceRequests"));
  params.clear();
  params.add("deSelects",DeSelectFields.DeSelectType.AM_NODE_LABEL_EXPRESSION.toString());
  response=r.path("ws").path("v1").path("cluster").path("apps").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
  json=response.getEntity(JSONObject.class);
  assertEquals("incorrect number of elements",1,json.length());
  apps=json.getJSONObject("apps");
  assertEquals("incorrect number of elements",1,apps.length());
  array=apps.getJSONArray("app");
  assertEquals("incorrect number of elements",1,array.length());
  app=array.getJSONObject(0);
  assertTrue("AMNodeLabelExpression shouldn't exist",!app.has("amNodeLabelExpression"));
  params.clear();
  params.add("deSelects",DeSelectFields.DeSelectType.TIMEOUTS.toString());
  response=r.path("ws").path("v1").path("cluster").path("apps").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
  json=response.getEntity(JSONObject.class);
  assertEquals("incorrect number of elements",1,json.length());
  apps=json.getJSONObject("apps");
  assertEquals("incorrect number of elements",1,apps.length());
  array=apps.getJSONArray("app");
  assertEquals("incorrect number of elements",1,array.length());
  app=array.getJSONObject(0);
  assertTrue("Timeouts shouldn't exist",!app.has("timeouts"));
  rm.stop();
  params.clear();
  params.add("deSelects",DeSelectFields.DeSelectType.APP_NODE_LABEL_EXPRESSION.toString());
  response=r.path("ws").path("v1").path("cluster").path("apps").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
  json=response.getEntity(JSONObject.class);
  assertEquals("incorrect number of elements",1,json.length());
  apps=json.getJSONObject("apps");
  assertEquals("incorrect number of elements",1,apps.length());
  array=apps.getJSONArray("app");
  assertEquals("incorrect number of elements",1,array.length());
  app=array.getJSONObject(0);
  assertTrue("AppNodeLabelExpression shouldn't exist",!app.has("appNodeLabelExpression"));
  rm.stop();
  params.clear();
  params.add("deSelects",DeSelectFields.DeSelectType.RESOURCE_INFO.toString());
  response=r.path("ws").path("v1").path("cluster").path("apps").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE + "; " + JettyUtils.UTF_8,response.getType().toString());
  json=response.getEntity(JSONObject.class);
  assertEquals("incorrect number of elements",1,json.length());
  apps=json.getJSONObject("apps");
  assertEquals("incorrect number of elements",1,apps.length());
  array=apps.getJSONArray("app");
  assertEquals("incorrect number of elements",1,array.length());
  app=array.getJSONObject(0);
  assertTrue("Resource info shouldn't exist",!app.has("resourceInfo"));
  rm.stop();
}
