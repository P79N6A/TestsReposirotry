@Test(timeout=12000) public void testDatanodeReRegistration() throws Exception {
  final DistributedFileSystem dfs=cluster.getFileSystem();
  final Path path=new Path("/testRR");
  short totalReplicas=NUM_OF_DATANODES;
  DFSTestUtil.createFile(dfs,path,dfs.getDefaultBlockSize(),totalReplicas,0xED0ED0);
  DFSTestUtil.waitForReplication(dfs,path,(short)NUM_OF_DATANODES,12000);
  for (  DataNode dn : cluster.getDataNodes()) {
    dn.shutdown();
  }
  dfs.delete(path,false);
  dfs.delete(ecFile,false);
  namesystem.writeLock();
  InvalidateBlocks invalidateBlocks;
  int totalStripedDataBlocks=totalBlockGroups * (ecPolicy.getNumDataUnits() + ecPolicy.getNumParityUnits());
  int expected=totalReplicas + totalStripedDataBlocks;
  try {
    invalidateBlocks=(InvalidateBlocks)Whitebox.getInternalState(cluster.getNamesystem().getBlockManager(),"invalidateBlocks");
    assertEquals("Invalidate blocks should include both Replicas and " + "Striped BlockGroups!",(long)expected,invalidateBlocks.numBlocks());
    assertEquals("Unexpected invalidate count for replicas!",totalReplicas,invalidateBlocks.getBlocks());
    assertEquals("Unexpected invalidate count for striped block groups!",totalStripedDataBlocks,invalidateBlocks.getECBlocks());
  }
  finally {
    namesystem.writeUnlock();
  }
  int totalBlockGroupsPerDataNode=totalBlockGroups;
  int totalReplicasPerDataNode=totalReplicas / NUM_OF_DATANODES;
  for (  DataNode dn : cluster.getDataNodes()) {
    DatanodeID did=dn.getDatanodeId();
    DatanodeRegistration reg=new DatanodeRegistration(new DatanodeID(UUID.randomUUID().toString(),did),new StorageInfo(HdfsServerConstants.NodeType.DATA_NODE),new ExportedBlockKeys(),VersionInfo.getVersion());
    namesystem.writeLock();
    try {
      bm.getDatanodeManager().registerDatanode(reg);
      expected-=(totalReplicasPerDataNode + totalBlockGroupsPerDataNode);
      assertEquals("Expected number of invalidate blocks to decrease",(long)expected,invalidateBlocks.numBlocks());
    }
  finally {
      namesystem.writeUnlock();
    }
  }
}
