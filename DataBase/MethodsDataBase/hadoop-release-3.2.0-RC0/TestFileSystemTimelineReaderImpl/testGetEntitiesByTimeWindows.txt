@Test public void testGetEntitiesByTimeWindows() throws Exception {
  Set<TimelineEntity> result=reader.getEntities(new TimelineReaderContext("cluster1","user1","flow1",1L,"app1","app",null),new TimelineEntityFilters.Builder().createdTimeBegin(1425016502030L).createTimeEnd(1425016502060L).build(),new TimelineDataToRetrieve());
  Assert.assertEquals(1,result.size());
  for (  TimelineEntity entity : result) {
    if (!entity.getId().equals("id_4")) {
      Assert.fail("Incorrect filtering based on created time range");
    }
  }
  result=reader.getEntities(new TimelineReaderContext("cluster1","user1","flow1",1L,"app1","app",null),new TimelineEntityFilters.Builder().createTimeEnd(1425016502010L).build(),new TimelineDataToRetrieve());
  Assert.assertEquals(3,result.size());
  for (  TimelineEntity entity : result) {
    if (entity.getId().equals("id_4")) {
      Assert.fail("Incorrect filtering based on created time range");
    }
  }
  result=reader.getEntities(new TimelineReaderContext("cluster1","user1","flow1",1L,"app1","app",null),new TimelineEntityFilters.Builder().createdTimeBegin(1425016502010L).build(),new TimelineDataToRetrieve());
  Assert.assertEquals(1,result.size());
  for (  TimelineEntity entity : result) {
    if (!entity.getId().equals("id_4")) {
      Assert.fail("Incorrect filtering based on created time range");
    }
  }
}
