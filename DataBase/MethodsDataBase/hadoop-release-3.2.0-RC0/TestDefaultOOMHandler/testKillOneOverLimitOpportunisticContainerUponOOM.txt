/** 
 * We have two OPPORTUNISTIC containers and one GUARANTEED container. One of the OPPORTUNISTIC container is out of limit. OOM is resolved after killing the OPPORTUNISTIC container that exceeded its limit even though it is launched earlier than the other OPPORTUNISTIC container.
 */
@Test public void testKillOneOverLimitOpportunisticContainerUponOOM() throws Exception {
  ConcurrentHashMap<ContainerId,Container> containers=new ConcurrentHashMap<>();
  int currentContainerId=0;
  Container c1=createContainer(currentContainerId++,false,2);
  containers.put(c1.getContainerId(),c1);
  Container c2=createContainer(currentContainerId++,false,1);
  containers.put(c2.getContainerId(),c2);
  Container c3=createContainer(currentContainerId++,true,1);
  containers.put(c3.getContainerId(),c3);
  ContainerExecutor ex=createContainerExecutor(containers);
  Context context=mock(Context.class);
  when(context.getContainers()).thenReturn(containers);
  when(context.getContainerExecutor()).thenReturn(ex);
  CGroupsHandler cGroupsHandler=mock(CGroupsHandler.class);
  when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,"",CGROUP_PARAM_MEMORY_OOM_CONTROL)).thenReturn("under_oom 1").thenReturn("under_oom 0");
  when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,c1.getContainerId().toString(),CGROUP_FILE_TASKS)).thenReturn("1234").thenReturn("");
  when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,c1.getContainerId().toString(),CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));
  when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,c1.getContainerId().toString(),CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));
  when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,c2.getContainerId().toString(),CGROUP_FILE_TASKS)).thenReturn("1235").thenReturn("");
  when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,c2.getContainerId().toString(),CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(11));
  when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,c2.getContainerId().toString(),CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(11));
  when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,c3.getContainerId().toString(),CGROUP_FILE_TASKS)).thenReturn("1236").thenReturn("");
  when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,c3.getContainerId().toString(),CGROUP_PARAM_MEMORY_USAGE_BYTES)).thenReturn(getMB(9));
  when(cGroupsHandler.getCGroupParam(CGroupsHandler.CGroupController.MEMORY,c3.getContainerId().toString(),CGROUP_PARAM_MEMORY_MEMSW_USAGE_BYTES)).thenReturn(getMB(9));
  DefaultOOMHandler handler=new DefaultOOMHandler(context,false){
    @Override protected CGroupsHandler getCGroupsHandler(){
      return cGroupsHandler;
    }
  }
;
  handler.run();
  verify(ex,times(1)).signalContainer(new ContainerSignalContext.Builder().setPid("1235").setContainer(c2).setSignal(ContainerExecutor.Signal.KILL).build());
  verify(ex,times(1)).signalContainer(any());
}
