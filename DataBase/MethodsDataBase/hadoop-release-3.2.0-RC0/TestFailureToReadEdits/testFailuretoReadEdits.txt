/** 
 * Test that the standby NN won't double-replay earlier edits if it encounters a failure to read a later edit.
 */
@Test public void testFailuretoReadEdits() throws Exception {
  assertTrue(fs.mkdirs(new Path(TEST_DIR1)));
  HATestUtil.waitForStandbyToCatchUp(nn0,nn1);
  fs.setOwner(new Path(TEST_DIR1),"foo","bar");
  assertTrue(fs.delete(new Path(TEST_DIR1),true));
  assertTrue(fs.mkdirs(new Path(TEST_DIR2)));
  assertTrue(fs.mkdirs(new Path(TEST_DIR3)));
  LimitedEditLogAnswer answer=causeFailureOnEditLogRead();
  try {
    HATestUtil.waitForStandbyToCatchUp(nn0,nn1);
    fail("Standby fully caught up, but should not have been able to");
  }
 catch (  HATestUtil.CouldNotCatchUpException e) {
  }
  assertNull(NameNodeAdapter.getFileInfo(nn1,TEST_DIR1,false,false,false));
  assertTrue(NameNodeAdapter.getFileInfo(nn1,TEST_DIR2,false,false,false).isDirectory());
  assertNull(NameNodeAdapter.getFileInfo(nn1,TEST_DIR3,false,false,false));
  answer.setThrowExceptionOnRead(false);
  HATestUtil.waitForStandbyToCatchUp(nn0,nn1);
  assertNull(NameNodeAdapter.getFileInfo(nn1,TEST_DIR1,false,false,false));
  assertTrue(NameNodeAdapter.getFileInfo(nn1,TEST_DIR2,false,false,false).isDirectory());
  assertTrue(NameNodeAdapter.getFileInfo(nn1,TEST_DIR3,false,false,false).isDirectory());
}
