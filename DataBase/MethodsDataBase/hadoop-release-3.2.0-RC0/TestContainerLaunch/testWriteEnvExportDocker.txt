@Test(timeout=20000) public void testWriteEnvExportDocker() throws Exception {
  assumeNotWindows();
  File shellFile=Shell.appendScriptExtension(tmpDir,"hello");
  Map<String,String> env=new HashMap<String,String>();
  env.put("HADOOP_COMMON_HOME","/opt/hadoopcommon");
  env.put("HADOOP_MAPRED_HOME","/opt/hadoopbuild");
  Map<Path,List<String>> resources=new HashMap<Path,List<String>>();
  FileOutputStream fos=new FileOutputStream(shellFile);
  List<String> commands=new ArrayList<String>();
  final Map<String,String> nmEnv=new HashMap<>();
  nmEnv.put("HADOOP_COMMON_HOME","nodemanager_common_home");
  nmEnv.put("HADOOP_HDFS_HOME","nodemanager_hdfs_home");
  nmEnv.put("HADOOP_YARN_HOME","nodemanager_yarn_home");
  nmEnv.put("HADOOP_MAPRED_HOME","nodemanager_mapred_home");
  DockerLinuxContainerRuntime dockerRuntime=new DockerLinuxContainerRuntime(mock(PrivilegedOperationExecutor.class));
  LinuxContainerExecutor lce=new LinuxContainerExecutor(dockerRuntime){
    @Override protected String getNMEnvVar(    String varname){
      return nmEnv.get(varname);
    }
  }
;
  YarnConfiguration conf=new YarnConfiguration();
  conf.set(YarnConfiguration.NM_ENV_WHITELIST,"HADOOP_MAPRED_HOME,HADOOP_YARN_HOME");
  lce.setConf(conf);
  LinkedHashSet<String> nmVars=new LinkedHashSet<>();
  lce.writeLaunchEnv(fos,env,resources,commands,new Path(localLogDir.getAbsolutePath()),"user",nmVars);
  String shellContent=new String(Files.readAllBytes(Paths.get(shellFile.getAbsolutePath())),StandardCharsets.UTF_8);
  Assert.assertTrue(shellContent.contains("export HADOOP_COMMON_HOME=\"/opt/hadoopcommon\""));
  Assert.assertTrue(shellContent.contains("export HADOOP_MAPRED_HOME=\"/opt/hadoopbuild\""));
  Assert.assertFalse(shellContent.contains("HADOOP_HDFS_HOME"));
  Assert.assertTrue(shellContent.contains("export HADOOP_YARN_HOME=${HADOOP_YARN_HOME:-\"nodemanager_yarn_home\"}"));
  fos.flush();
  fos.close();
}
