@Test public void testDistributedCacheDirs() throws Exception {
  Container container=mock(Container.class);
  ApplicationId appId=ApplicationId.newInstance(System.currentTimeMillis(),1);
  ContainerId containerId=ContainerId.newContainerId(ApplicationAttemptId.newInstance(appId,1),1);
  when(container.getContainerId()).thenReturn(containerId);
  when(container.getUser()).thenReturn("test");
  when(container.getLocalizedResources()).thenReturn(Collections.<Path,List<String>>emptyMap());
  Dispatcher dispatcher=mock(Dispatcher.class);
  ContainerLaunchContext clc=mock(ContainerLaunchContext.class);
  when(clc.getCommands()).thenReturn(Collections.<String>emptyList());
  when(container.getLaunchContext()).thenReturn(clc);
  @SuppressWarnings("rawtypes") ContainerExitHandler eventHandler=mock(ContainerExitHandler.class);
  when(dispatcher.getEventHandler()).thenReturn(eventHandler);
  Application app=mock(Application.class);
  when(app.getAppId()).thenReturn(appId);
  when(app.getUser()).thenReturn("test");
  Credentials creds=mock(Credentials.class);
  when(container.getCredentials()).thenReturn(creds);
  ((NMContext)context).setNodeId(NodeId.newInstance("127.0.0.1",HTTP_PORT));
  ContainerExecutor mockExecutor=mock(ContainerExecutor.class);
  LocalDirsHandlerService mockDirsHandler=mock(LocalDirsHandlerService.class);
  List<String> localDirsForRead=new ArrayList<String>();
  String localDir1=new File("target",this.getClass().getSimpleName() + "-localDir1").getAbsoluteFile().toString();
  String localDir2=new File("target",this.getClass().getSimpleName() + "-localDir2").getAbsoluteFile().toString();
  localDirsForRead.add(localDir1);
  localDirsForRead.add(localDir2);
  List<String> localDirs=new ArrayList();
  localDirs.add(localDir1);
  Path logPathForWrite=new Path(localDirs.get(0));
  when(mockDirsHandler.areDisksHealthy()).thenReturn(true);
  when(mockDirsHandler.getLocalDirsForRead()).thenReturn(localDirsForRead);
  when(mockDirsHandler.getLocalDirs()).thenReturn(localDirs);
  when(mockDirsHandler.getLogDirs()).thenReturn(localDirs);
  when(mockDirsHandler.getLogPathForWrite(anyString(),anyBoolean())).thenReturn(logPathForWrite);
  when(mockDirsHandler.getLocalPathForWrite(anyString())).thenReturn(logPathForWrite);
  when(mockDirsHandler.getLocalPathForWrite(anyString(),anyLong(),anyBoolean())).thenReturn(logPathForWrite);
  ContainerLaunch launch=new ContainerLaunch(context,conf,dispatcher,mockExecutor,app,container,mockDirsHandler,containerManager);
  launch.call();
  ArgumentCaptor<ContainerStartContext> ctxCaptor=ArgumentCaptor.forClass(ContainerStartContext.class);
  verify(mockExecutor,times(1)).launchContainer(ctxCaptor.capture());
  ContainerStartContext ctx=ctxCaptor.getValue();
  Assert.assertEquals(StringUtils.join(",",launch.getNMFilecacheDirs(localDirsForRead)),StringUtils.join(",",ctx.getFilecacheDirs()));
  Assert.assertEquals(StringUtils.join(",",launch.getUserFilecacheDirs(localDirsForRead)),StringUtils.join(",",ctx.getUserFilecacheDirs()));
}
