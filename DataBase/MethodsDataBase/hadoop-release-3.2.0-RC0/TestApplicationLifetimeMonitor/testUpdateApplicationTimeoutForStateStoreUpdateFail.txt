@Test(timeout=60000) public void testUpdateApplicationTimeoutForStateStoreUpdateFail() throws Exception {
  MockRM rm1=null;
  try {
    MemoryRMStateStore memStore=new MemoryRMStateStore(){
      private int count=0;
      @Override public synchronized void updateApplicationStateInternal(      ApplicationId appId,      ApplicationStateData appState) throws Exception {
        if (count++ == 0) {
          throw new Exception("State-store update failed");
        }
        super.updateApplicationStateInternal(appId,appState);
      }
    }
;
    memStore.init(conf);
    rm1=new MockRM(conf,memStore);
    rm1.start();
    MockNM nm1=new MockNM("127.0.0.1:1234",8192,rm1.getResourceTrackerService());
    nm1.registerNode();
    nm1.nodeHeartbeat(true);
    long appLifetime=30L;
    Map<ApplicationTimeoutType,Long> timeouts=new HashMap<ApplicationTimeoutType,Long>();
    timeouts.put(ApplicationTimeoutType.LIFETIME,appLifetime);
    RMApp app1=rm1.submitApp(200,Priority.newInstance(0),timeouts);
    Map<ApplicationTimeoutType,String> updateTimeout=new HashMap<ApplicationTimeoutType,String>();
    long newLifetime=10L;
    updateTimeout.put(ApplicationTimeoutType.LIFETIME,Times.formatISO8601(System.currentTimeMillis() + newLifetime * 1000));
    UpdateApplicationTimeoutsRequest request=UpdateApplicationTimeoutsRequest.newInstance(app1.getApplicationId(),updateTimeout);
    Map<ApplicationTimeoutType,Long> applicationTimeouts=app1.getApplicationTimeouts();
    long beforeUpdate=applicationTimeouts.get(ApplicationTimeoutType.LIFETIME);
    try {
      rm1.getRMContext().getClientRMService().updateApplicationTimeouts(request);
      fail("Update application should fail.");
    }
 catch (    YarnException e) {
      assertTrue("State-store exception does not containe appId",e.getMessage().contains(app1.getApplicationId().toString()));
    }
    applicationTimeouts=app1.getApplicationTimeouts();
    long afterUpdate=applicationTimeouts.get(ApplicationTimeoutType.LIFETIME);
    Assert.assertEquals("Application timeout is updated",beforeUpdate,afterUpdate);
    rm1.waitForState(app1.getApplicationId(),RMAppState.KILLED);
    Assert.assertTrue("Application killed before lifetime value",app1.getFinishTime() > afterUpdate);
  }
  finally {
    stopRM(rm1);
  }
}
