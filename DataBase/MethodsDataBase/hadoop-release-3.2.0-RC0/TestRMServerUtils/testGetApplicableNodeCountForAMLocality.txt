@Test public void testGetApplicableNodeCountForAMLocality() throws Exception {
  List<NodeId> rack1Nodes=new ArrayList<>();
  for (int i=0; i < 29; i++) {
    rack1Nodes.add(NodeId.newInstance("host" + i,1234));
  }
  NodeId node1=NodeId.newInstance("node1",1234);
  NodeId node2=NodeId.newInstance("node2",1234);
  rack1Nodes.add(node2);
  YarnConfiguration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,false);
  ResourceScheduler scheduler=Mockito.mock(ResourceScheduler.class);
  Mockito.when(scheduler.getNumClusterNodes()).thenReturn(100);
  Mockito.when(scheduler.getNodeIds("/rack1")).thenReturn(rack1Nodes);
  Mockito.when(scheduler.getNodeIds("node1")).thenReturn(Collections.singletonList(node1));
  Mockito.when(scheduler.getNodeIds("node2")).thenReturn(Collections.singletonList(node2));
  RMContext rmContext=Mockito.mock(RMContext.class);
  Mockito.when(rmContext.getScheduler()).thenReturn(scheduler);
  ResourceRequest anyReq=createResourceRequest(ResourceRequest.ANY,true,null);
  List<ResourceRequest> reqs=new ArrayList<>();
  reqs.add(anyReq);
  Assert.assertEquals(100,RMServerUtils.getApplicableNodeCountForAM(rmContext,conf,reqs));
  ResourceRequest rackReq=createResourceRequest("/rack1",true,null);
  reqs.add(rackReq);
  Assert.assertEquals(30,RMServerUtils.getApplicableNodeCountForAM(rmContext,conf,reqs));
  anyReq.setRelaxLocality(false);
  Assert.assertEquals(30,RMServerUtils.getApplicableNodeCountForAM(rmContext,conf,reqs));
  rackReq.setRelaxLocality(false);
  Assert.assertEquals(100,RMServerUtils.getApplicableNodeCountForAM(rmContext,conf,reqs));
  ResourceRequest node1Req=createResourceRequest("node1",false,null);
  reqs.add(node1Req);
  Assert.assertEquals(100,RMServerUtils.getApplicableNodeCountForAM(rmContext,conf,reqs));
  node1Req.setRelaxLocality(true);
  Assert.assertEquals(1,RMServerUtils.getApplicableNodeCountForAM(rmContext,conf,reqs));
  rackReq.setRelaxLocality(true);
  Assert.assertEquals(31,RMServerUtils.getApplicableNodeCountForAM(rmContext,conf,reqs));
  ResourceRequest node2Req=createResourceRequest("node2",false,null);
  reqs.add(node2Req);
  Assert.assertEquals(31,RMServerUtils.getApplicableNodeCountForAM(rmContext,conf,reqs));
  node2Req.setRelaxLocality(true);
  Assert.assertEquals(31,RMServerUtils.getApplicableNodeCountForAM(rmContext,conf,reqs));
  rackReq.setRelaxLocality(false);
  Assert.assertEquals(2,RMServerUtils.getApplicableNodeCountForAM(rmContext,conf,reqs));
  node1Req.setRelaxLocality(false);
  Assert.assertEquals(1,RMServerUtils.getApplicableNodeCountForAM(rmContext,conf,reqs));
  node2Req.setRelaxLocality(false);
  Assert.assertEquals(100,RMServerUtils.getApplicableNodeCountForAM(rmContext,conf,reqs));
}
