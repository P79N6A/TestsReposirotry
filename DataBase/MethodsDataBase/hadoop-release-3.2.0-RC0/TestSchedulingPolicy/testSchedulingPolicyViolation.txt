@Test public void testSchedulingPolicyViolation() throws IOException {
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"root\">");
  out.println("<schedulingPolicy>fair</schedulingPolicy>");
  out.println("    <queue name=\"child1\">");
  out.println("    <schedulingPolicy>drf</schedulingPolicy>");
  out.println("    </queue>");
  out.println("    <queue name=\"child2\">");
  out.println("    <schedulingPolicy>fair</schedulingPolicy>");
  out.println("    </queue>");
  out.println("</queue>");
  out.println("<defaultQueueSchedulingPolicy>drf" + "</defaultQueueSchedulingPolicy>");
  out.println("</allocations>");
  out.close();
  scheduler.init(conf);
  FSQueue child1=scheduler.getQueueManager().getQueue("child1");
  assertNull("Queue 'child1' should be null since its policy isn't allowed to" + " be 'drf' if its parent policy is 'fair'.",child1);
  FSQueue dynamicQueue=scheduler.getQueueManager().getLeafQueue("dynamicQueue",true);
  assertNull("Dynamic queue should be null since it isn't allowed to be 'drf'" + " policy if its parent policy is 'fair'.",dynamicQueue);
  out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"root\">");
  out.println("<schedulingPolicy>fair</schedulingPolicy>");
  out.println("    <queue name=\"child1\">");
  out.println("    <schedulingPolicy>fair</schedulingPolicy>");
  out.println("    </queue>");
  out.println("    <queue name=\"child2\">");
  out.println("    <schedulingPolicy>drf</schedulingPolicy>");
  out.println("    </queue>");
  out.println("</queue>");
  out.println("<defaultQueueSchedulingPolicy>drf" + "</defaultQueueSchedulingPolicy>");
  out.println("</allocations>");
  out.close();
  scheduler.reinitialize(conf,null);
  child1=scheduler.getQueueManager().getQueue("child1");
  assertNotNull("Queue 'child1' should be not null since its policy is " + "allowed to be 'fair' if its parent policy is 'fair'.",child1);
  FSQueue child2=scheduler.getQueueManager().getQueue("child2");
  assertTrue("Queue 'child2' should be 'fair' since its new policy 'drf' " + "is not allowed.",child2.getPolicy() instanceof FairSharePolicy);
}
