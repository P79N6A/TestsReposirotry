@Test(timeout=120000) public void testDecommissioningNodes() throws Exception {
  Configuration conf=new Configuration();
  conf.setInt(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,30);
  MiniDFSCluster cluster=null;
  HostsFileWriter hostsFileWriter=new HostsFileWriter();
  hostsFileWriter.initialize(conf,"temp/TestNameNodeMXBean");
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
    cluster.waitActive();
    FSNamesystem fsn=cluster.getNameNode().namesystem;
    MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
    ObjectName mxbeanName=new ObjectName("Hadoop:service=NameNode,name=NameNodeInfo");
    List<String> hosts=new ArrayList<>();
    for (    DataNode dn : cluster.getDataNodes()) {
      hosts.add(dn.getDisplayName());
    }
    hostsFileWriter.initIncludeHosts(hosts.toArray(new String[hosts.size()]));
    fsn.getBlockManager().getDatanodeManager().refreshNodes(conf);
    String liveNodesInfo=(String)(mbs.getAttribute(mxbeanName,"LiveNodes"));
    Map<String,Map<String,Object>> liveNodes=(Map<String,Map<String,Object>>)JSON.parse(liveNodesInfo);
    assertEquals(fsn.getLiveNodes(),liveNodesInfo);
    assertEquals(fsn.getNumLiveDataNodes(),liveNodes.size());
    for (    Map<String,Object> liveNode : liveNodes.values()) {
      assertTrue(liveNode.containsKey("lastContact"));
      assertTrue(liveNode.containsKey("xferaddr"));
    }
    hostsFileWriter.initExcludeHost(cluster.getDataNodes().get(0).getDisplayName());
    fsn.getBlockManager().getDatanodeManager().refreshNodes(conf);
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        try {
          String decomNodesInfo=(String)(mbs.getAttribute(mxbeanName,"DecomNodes"));
          Map<String,Map<String,Object>> decomNodes=(Map<String,Map<String,Object>>)JSON.parse(decomNodesInfo);
          if (decomNodes.size() > 0) {
            return true;
          }
        }
 catch (        Exception e) {
          return false;
        }
        return false;
      }
    }
,1000,60000);
    String decomNodesInfo=(String)(mbs.getAttribute(mxbeanName,"DecomNodes"));
    Map<String,Map<String,Object>> decomNodes=(Map<String,Map<String,Object>>)JSON.parse(decomNodesInfo);
    assertEquals(fsn.getDecomNodes(),decomNodesInfo);
    assertEquals(fsn.getNumDecommissioningDataNodes(),decomNodes.size());
    assertEquals(0,fsn.getNumDecomLiveDataNodes());
    assertEquals(0,fsn.getNumDecomDeadDataNodes());
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        if (fsn.getNumDecomLiveDataNodes() == 1) {
          return true;
        }
        return false;
      }
    }
,1000,60000);
    decomNodesInfo=(String)(mbs.getAttribute(mxbeanName,"DecomNodes"));
    decomNodes=(Map<String,Map<String,Object>>)JSON.parse(decomNodesInfo);
    assertEquals(0,decomNodes.size());
    assertEquals(fsn.getDecomNodes(),decomNodesInfo);
    assertEquals(1,fsn.getNumDecomLiveDataNodes());
    assertEquals(0,fsn.getNumDecomDeadDataNodes());
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
    hostsFileWriter.cleanup();
  }
}
