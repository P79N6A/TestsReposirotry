@Test public void testDFSDataOutputStreamBuilderForCreation() throws Exception {
  Configuration conf=getTestConfiguration();
  String testFile="/testDFSDataOutputStreamBuilder";
  Path testFilePath=new Path(testFile);
  try (MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build()){
    DistributedFileSystem fs=cluster.getFileSystem();
    HdfsDataOutputStreamBuilder builder=fs.createFile(testFilePath).blockSize(4096).replication((short)1);
    assertFalse(fs.exists(testFilePath));
    try (FSDataOutputStream out=fs.createFile(testFilePath).build()){
      LOG.info("Test create an empty file");
    }
     String content="This is a test!";
    try (FSDataOutputStream out1=fs.createFile(testFilePath).bufferSize(4096).replication((short)1).blockSize(4096).build()){
      byte[] contentOrigin=content.getBytes("UTF8");
      out1.write(contentOrigin);
    }
     ContractTestUtils.verifyFileContents(fs,testFilePath,content.getBytes());
    try (FSDataOutputStream out=fs.createFile(testFilePath).overwrite(false).build()){
      fail("it should fail to overwrite an existing file");
    }
 catch (    FileAlreadyExistsException e) {
    }
    Path nonParentFile=new Path("/parent/test");
    try (FSDataOutputStream out=fs.createFile(nonParentFile).build()){
      fail("parent directory not exist");
    }
 catch (    FileNotFoundException e) {
    }
    assertFalse("parent directory should not be created",fs.exists(new Path("/parent")));
    try (FSDataOutputStream out=fs.createFile(nonParentFile).recursive().build()){
      out.write(1);
    }
     assertTrue("parent directory has not been created",fs.exists(new Path("/parent")));
  }
 }
