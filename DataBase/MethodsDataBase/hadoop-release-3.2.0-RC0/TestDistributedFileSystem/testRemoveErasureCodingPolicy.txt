@Test public void testRemoveErasureCodingPolicy() throws Exception {
  Configuration conf=getTestConfiguration();
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    DistributedFileSystem fs=cluster.getFileSystem();
    ECSchema toAddSchema=new ECSchema("rs",3,2);
    ErasureCodingPolicy toAddPolicy=new ErasureCodingPolicy(toAddSchema,128 * 1024,(byte)254);
    String policyName=toAddPolicy.getName();
    ErasureCodingPolicy[] policies=new ErasureCodingPolicy[]{toAddPolicy};
    fs.addErasureCodingPolicies(policies);
    assertEquals(policyName,ErasureCodingPolicyManager.getInstance().getByName(policyName).getName());
    fs.removeErasureCodingPolicy(policyName);
    assertEquals(policyName,ErasureCodingPolicyManager.getInstance().getRemovedPolicies().get(0).getName());
    UserGroupInformation fakeUGI=UserGroupInformation.createUserForTesting("ProbablyNotARealUserName",new String[]{"ShangriLa"});
    final MiniDFSCluster finalCluster=cluster;
    fakeUGI.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        DistributedFileSystem fs=finalCluster.getFileSystem();
        try {
          fs.removeErasureCodingPolicy(policyName);
          fail();
        }
 catch (        AccessControlException ace) {
          GenericTestUtils.assertExceptionContains("Access denied for user " + "ProbablyNotARealUserName. Superuser privilege is required",ace);
        }
        return null;
      }
    }
);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
