@Test public void testSnapRootDescendantDiffReportWithRename() throws Exception {
  Assume.assumeTrue(conf.getBoolean(DFSConfigKeys.DFS_NAMENODE_SNAPSHOT_DIFF_ALLOW_SNAP_ROOT_DESCENDANT,DFSConfigKeys.DFS_NAMENODE_SNAPSHOT_DIFF_ALLOW_SNAP_ROOT_DESCENDANT_DEFAULT));
  Path subSub=new Path(sub1,"subsub1");
  Path subSubSub=new Path(subSub,"subsubsub1");
  Path nonSnapDir=new Path(dir,"non_snap");
  hdfs.mkdirs(subSubSub);
  hdfs.mkdirs(nonSnapDir);
  hdfs.allowSnapshot(sub1);
  hdfs.createSnapshot(sub1,genSnapshotName(sub1));
  Path file20=new Path(subSubSub,"file20");
  DFSTestUtil.createFile(hdfs,file20,BLOCKSIZE,REPLICATION_1,SEED);
  hdfs.createSnapshot(sub1,genSnapshotName(sub1));
  hdfs.rename(file20,new Path(subSub,file20.getName()));
  hdfs.createSnapshot(sub1,genSnapshotName(sub1));
  verifyDiffReport(sub1,"s1","s2",new DiffReportEntry(DiffType.MODIFY,DFSUtil.string2Bytes("subsub1")),new DiffReportEntry(DiffType.MODIFY,DFSUtil.string2Bytes("subsub1/subsubsub1")),new DiffReportEntry(DiffType.RENAME,DFSUtil.string2Bytes("subsub1/subsubsub1/file20"),DFSUtil.string2Bytes("subsub1/file20")));
  verifyDiffReport(subSub,"s1","s2",new DiffReportEntry(DiffType.MODIFY,DFSUtil.string2Bytes("")),new DiffReportEntry(DiffType.MODIFY,DFSUtil.string2Bytes("subsubsub1")),new DiffReportEntry(DiffType.RENAME,DFSUtil.string2Bytes("subsubsub1/file20"),DFSUtil.string2Bytes("file20")));
  verifyDiffReport(subSubSub,"s1","s2",new DiffReportEntry(DiffType.MODIFY,DFSUtil.string2Bytes("")),new DiffReportEntry(DiffType.DELETE,DFSUtil.string2Bytes("file20")));
  hdfs.rename(new Path(subSub,file20.getName()),new Path(dir,file20.getName()));
  hdfs.createSnapshot(sub1,genSnapshotName(sub1));
  verifyDiffReport(sub1,"s2","s3",new DiffReportEntry(DiffType.MODIFY,DFSUtil.string2Bytes("subsub1")),new DiffReportEntry(DiffType.DELETE,DFSUtil.string2Bytes("subsub1/file20")));
  verifyDiffReport(subSub,"s2","s3",new DiffReportEntry(DiffType.MODIFY,DFSUtil.string2Bytes("")),new DiffReportEntry(DiffType.DELETE,DFSUtil.string2Bytes("file20")));
  verifyDiffReport(subSubSub,"s2","s3",new DiffReportEntry[]{});
  hdfs.rename(new Path(dir,file20.getName()),new Path(sub1,file20.getName()));
  hdfs.createSnapshot(sub1,genSnapshotName(sub1));
  verifyDiffReport(sub1,"s3","s4",new DiffReportEntry(DiffType.MODIFY,DFSUtil.string2Bytes("")),new DiffReportEntry(DiffType.CREATE,DFSUtil.string2Bytes("file20")));
  verifyDiffReport(subSub,"s3","s4",new DiffReportEntry[]{});
  verifyDiffReport(subSubSub,"s3","s4",new DiffReportEntry[]{});
  hdfs.rename(new Path(sub1,file20.getName()),new Path(subSub,file20.getName()));
  hdfs.createSnapshot(sub1,genSnapshotName(sub1));
  verifyDiffReport(sub1,"s4","s5",new DiffReportEntry(DiffType.MODIFY,DFSUtil.string2Bytes("")),new DiffReportEntry(DiffType.RENAME,DFSUtil.string2Bytes("file20"),DFSUtil.string2Bytes("subsub1/file20")),new DiffReportEntry(DiffType.MODIFY,DFSUtil.string2Bytes("subsub1")));
  verifyDiffReport(subSub,"s4","s5",new DiffReportEntry(DiffType.MODIFY,DFSUtil.string2Bytes("")),new DiffReportEntry(DiffType.CREATE,DFSUtil.string2Bytes("file20")));
  verifyDiffReport(subSubSub,"s4","s5",new DiffReportEntry[]{});
  Path subSubSub2=new Path(subSub,"subsubsub2");
  hdfs.mkdirs(subSubSub2);
  Path file30=new Path(subSubSub2,"file30");
  DFSTestUtil.createFile(hdfs,file30,BLOCKSIZE,REPLICATION_1,SEED);
  hdfs.createFile(file30);
  hdfs.createSnapshot(sub1,genSnapshotName(sub1));
  verifyDiffReport(sub1,"s5","s6",new DiffReportEntry(DiffType.MODIFY,DFSUtil.string2Bytes("subsub1")),new DiffReportEntry(DiffType.CREATE,DFSUtil.string2Bytes("subsub1/subsubsub2")));
  verifyDiffReport(subSubSub2,"s5","s6",new DiffReportEntry[]{});
  verifyDiffReport(subSubSub2,"s1","s2",new DiffReportEntry[]{});
}
