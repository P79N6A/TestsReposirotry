/** 
 * Check to see access time is not captured in snapshot when applicable. When DFS_NAMENODE_SNAPSHOT_SKIP_CAPTURE_ACCESSTIME_ONLY_CHANGE is set to true, and if a file's access time changed between two snapshots but has no other modification, then the access time is not captured in snapshot.
 */
@Test public void testDontCaptureAccessTimeOnlyChangeReport() throws Exception {
  final Path froot=new Path("/");
  final Path root=new Path(froot,"/testSdiffCalc");
  final Path filePreSS=new Path(root,"fParent/filePreSS");
  final Path dirPreSS=new Path(root,"dirPreSS");
  final Path dirPreSSChild=new Path(dirPreSS,"dirPreSSChild");
  final Path filePostSS=new Path(root,"fParent/filePostSS");
  final Path dirPostSS=new Path(root,"dirPostSS");
  final Path dirPostSSChild=new Path(dirPostSS,"dirPostSSChild");
  DFSTestUtil.createFile(hdfs,filePreSS,BLOCKSIZE,REPLICATION,SEED);
  DFSTestUtil.createFile(hdfs,dirPreSSChild,BLOCKSIZE,REPLICATION,SEED);
  SnapshotTestHelper.createSnapshot(hdfs,root,"s0");
  printAtime(filePreSS,root,"s0");
  printAtime(dirPreSS,root,"s0");
  DFSTestUtil.createFile(hdfs,filePostSS,BLOCKSIZE,REPLICATION,SEED);
  DFSTestUtil.createFile(hdfs,dirPostSSChild,BLOCKSIZE,REPLICATION,SEED);
  Thread.sleep(3000);
  long now=Time.now();
  hdfs.setTimes(filePreSS,-1,now);
  hdfs.setTimes(filePostSS,-1,now);
  hdfs.setTimes(dirPreSS,-1,now);
  hdfs.setTimes(dirPostSS,-1,now);
  SnapshotTestHelper.createSnapshot(hdfs,root,"s1");
  printAtime(filePreSS,root,"s1");
  printAtime(dirPreSS,root,"s1");
  printAtime(filePostSS,root,"s1");
  printAtime(dirPostSS,root,"s1");
  Thread.sleep(3000);
  now=Time.now();
  hdfs.setTimes(filePreSS,-1,now);
  hdfs.setTimes(filePostSS,-1,now);
  hdfs.setTimes(dirPreSS,-1,now);
  hdfs.setTimes(dirPostSS,-1,now);
  SnapshotTestHelper.createSnapshot(hdfs,root,"s2");
  printAtime(filePreSS,root,"s2");
  printAtime(dirPreSS,root,"s2");
  printAtime(filePostSS,root,"s2");
  printAtime(dirPostSS,root,"s2");
  Thread.sleep(3000);
  now=Time.now();
  hdfs.setReplication(filePostSS,(short)(REPLICATION - 1));
  hdfs.setTimes(filePostSS,-1,now);
  SnapshotTestHelper.createSnapshot(hdfs,root,"s3");
  LOG.info("\nsnapshotDiff s0 -> s1:");
  LOG.info(hdfs.getSnapshotDiffReport(root,"s0","s1").toString());
  LOG.info("\nsnapshotDiff s1 -> s2:");
  LOG.info(hdfs.getSnapshotDiffReport(root,"s1","s2").toString());
  assertAtimeEquals(filePreSS,root,"s0","s1");
  assertAtimeEquals(dirPreSS,root,"s0","s1");
  assertAtimeEquals(filePreSS,root,"s1","s2");
  assertAtimeEquals(dirPreSS,root,"s1","s2");
  assertAtimeEquals(filePostSS,root,"s1","s2");
  assertAtimeEquals(dirPostSS,root,"s1","s2");
  assertAtimeNotEquals(filePostSS,root,"s2","s3");
  cluster.restartNameNodes();
  cluster.waitActive();
  assertAtimeEquals(filePreSS,root,"s0","s1");
  assertAtimeEquals(dirPreSS,root,"s0","s1");
  assertAtimeEquals(filePreSS,root,"s1","s2");
  assertAtimeEquals(dirPreSS,root,"s1","s2");
  assertAtimeEquals(filePostSS,root,"s1","s2");
  assertAtimeEquals(dirPostSS,root,"s1","s2");
  assertAtimeNotEquals(filePostSS,root,"s2","s3");
}
