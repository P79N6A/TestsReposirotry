@Test(timeout=60000) public void testSnapRootDescendantDiffReport() throws Exception {
  Assume.assumeTrue(conf.getBoolean(DFSConfigKeys.DFS_NAMENODE_SNAPSHOT_DIFF_ALLOW_SNAP_ROOT_DESCENDANT,DFSConfigKeys.DFS_NAMENODE_SNAPSHOT_DIFF_ALLOW_SNAP_ROOT_DESCENDANT_DEFAULT));
  Path subSub=new Path(sub1,"subsub1");
  Path subSubSub=new Path(subSub,"subsubsub1");
  Path nonSnapDir=new Path(dir,"non_snap");
  hdfs.mkdirs(subSubSub);
  hdfs.mkdirs(nonSnapDir);
  modifyAndCreateSnapshot(sub1,new Path[]{sub1});
  modifyAndCreateSnapshot(subSub,new Path[]{sub1});
  modifyAndCreateSnapshot(subSubSub,new Path[]{sub1});
  try {
    hdfs.getSnapshotDiffReport(subSub,"s1","s2");
    hdfs.getSnapshotDiffReport(subSubSub,"s1","s2");
  }
 catch (  IOException e) {
    fail("Unexpected exception when getting snapshot diff report " + subSub + ": "+ e);
  }
  try {
    hdfs.getSnapshotDiffReport(nonSnapDir,"s1","s2");
    fail("Snapshot diff report on a non snapshot directory '" + nonSnapDir.getName() + "'should fail!");
  }
 catch (  SnapshotException e) {
    GenericTestUtils.assertExceptionContains("Directory is neither snapshottable nor under a snap root!",e);
  }
  final String invalidName="invalid";
  try {
    hdfs.getSnapshotDiffReport(subSub,invalidName,invalidName);
    fail("Expect exception when providing invalid snapshot name " + "for diff report");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("Cannot find the snapshot of directory " + sub1 + " with name "+ invalidName,e);
  }
  SnapshotDiffReport report=hdfs.getSnapshotDiffReport(subSub,"s0","s0");
  assertEquals(0,report.getDiffList().size());
  report=hdfs.getSnapshotDiffReport(subSub,"","");
  assertEquals(0,report.getDiffList().size());
  report=hdfs.getSnapshotDiffReport(subSubSub,"s0","s2");
  assertEquals(0,report.getDiffList().size());
  report=hdfs.getSnapshotDiffReport(hdfs.makeQualified(subSubSub),"s0","s2");
  assertEquals(0,report.getDiffList().size());
  verifyDescendantDiffReports(sub1,subSub,subSubSub);
}
