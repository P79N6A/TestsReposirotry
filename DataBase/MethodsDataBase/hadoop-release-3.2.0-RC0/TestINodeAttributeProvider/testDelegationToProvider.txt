@Test public void testDelegationToProvider() throws Exception {
  Assert.assertTrue(CALLED.contains("start"));
  FileSystem fs=FileSystem.get(miniDFS.getConfiguration(0));
  final Path tmpPath=new Path("/tmp");
  final Path fooPath=new Path("/tmp/foo");
  fs.mkdirs(tmpPath);
  fs.setPermission(tmpPath,new FsPermission(HDFS_PERMISSION));
  UserGroupInformation ugi=UserGroupInformation.createUserForTesting("u1",new String[]{"g1"});
  ugi.doAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      FileSystem fs=FileSystem.get(miniDFS.getConfiguration(0));
      CALLED.clear();
      fs.mkdirs(fooPath);
      Assert.assertTrue(CALLED.contains("getAttributes"));
      Assert.assertTrue(CALLED.contains("checkPermission|null|null|null"));
      Assert.assertTrue(CALLED.contains("checkPermission|WRITE|null|null"));
      CALLED.clear();
      fs.listStatus(fooPath);
      Assert.assertTrue(CALLED.contains("getAttributes"));
      Assert.assertTrue(CALLED.contains("checkPermission|null|null|READ_EXECUTE"));
      CALLED.clear();
      fs.getAclStatus(fooPath);
      Assert.assertTrue(CALLED.contains("getAttributes"));
      Assert.assertTrue(CALLED.contains("checkPermission|null|null|null"));
      return null;
    }
  }
);
}
