@Test(timeout=30000) public void testReaderExceptions() throws Exception {
  Server server=null;
  TestRpcService proxy=null;
  IOException expectedIOE=new TestReaderException("testing123");
  @SuppressWarnings("serial") IOException rseError=new RpcServerException("keepalive",expectedIOE){
    @Override public RpcStatusProto getRpcStatusProto(){
      return RpcStatusProto.ERROR;
    }
  }
;
  @SuppressWarnings("serial") IOException rseFatal=new RpcServerException("disconnect",expectedIOE){
    @Override public RpcStatusProto getRpcStatusProto(){
      return RpcStatusProto.FATAL;
    }
  }
;
  try {
    RPC.Builder builder=newServerBuilder(conf).setQueueSizePerHandler(1).setNumHandlers(1).setVerbose(true);
    server=setupTestServer(builder);
    Whitebox.setInternalState(server,"rpcRequestClass",FakeRequestClass.class);
    MutableCounterLong authMetric=(MutableCounterLong)Whitebox.getInternalState(server.getRpcMetrics(),"rpcAuthorizationSuccesses");
    proxy=getClient(addr,conf);
    boolean isDisconnected=true;
    Connection lastConn=null;
    long expectedAuths=0;
    for (int i=0; i < 128; i++) {
      String reqName="request[" + i + "]";
      int r=ThreadLocalRandom.current().nextInt();
      final boolean doDisconnect=r % 4 == 0;
      LOG.info("TestDisconnect request[" + i + "] "+ " shouldConnect="+ isDisconnected+ " willDisconnect="+ doDisconnect);
      if (isDisconnected) {
        expectedAuths++;
      }
      try {
        FakeRequestClass.exception=doDisconnect ? rseFatal : rseError;
        proxy.ping(null,newEmptyRequest());
        fail(reqName + " didn't fail");
      }
 catch (      ServiceException e) {
        RemoteException re=(RemoteException)e.getCause();
        assertEquals(reqName,expectedIOE,re.unwrapRemoteException());
      }
      assertEquals(reqName,expectedAuths,authMetric.value());
      if (!doDisconnect) {
        Connection[] conns=server.getConnections();
        assertEquals(reqName,1,conns.length);
        if (isDisconnected) {
          assertNotSame(reqName,lastConn,conns[0]);
        }
 else {
          assertSame(reqName,lastConn,conns[0]);
        }
        lastConn=conns[0];
      }
 else       if (lastConn != null) {
        assertTrue(reqName,lastConn.shouldClose());
      }
      isDisconnected=doDisconnect;
    }
  }
  finally {
    stop(server,proxy);
  }
}
