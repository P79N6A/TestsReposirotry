@Test public void testPlaceApplicationWithPlacementRuleChain() throws Exception {
  CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
  setupQueueConfiguration(conf);
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  mockRM=new MockRM(conf);
  CapacityScheduler cs=(CapacityScheduler)mockRM.getResourceScheduler();
  mockRM.start();
  cs.start();
  PlacementManager pm=cs.getRMContext().getQueuePlacementManager();
  List<PlacementRule> queuePlacementRules=new ArrayList<>();
  UserGroupMappingPlacementRule.QueueMapping userQueueMapping=new UserGroupMappingPlacementRule.QueueMapping(UserGroupMappingPlacementRule.QueueMapping.MappingType.USER,USER1,getQueueMapping(PARENT_QUEUE,USER1));
  UserGroupMappingPlacementRule ugRule=new UserGroupMappingPlacementRule(false,Arrays.asList(userQueueMapping),null);
  queuePlacementRules.add(ugRule);
  pm.updateRules(queuePlacementRules);
  ApplicationSubmissionContext asc=Records.newRecord(ApplicationSubmissionContext.class);
  asc.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);
  asc.setApplicationName(APP_NAME);
  Assert.assertNull("Placement should be null",pm.placeApplication(asc,USER2));
  QueueMappingEntity queueMappingEntity=new QueueMappingEntity(APP_NAME,USER1,PARENT_QUEUE);
  AppNameMappingPlacementRule anRule=new AppNameMappingPlacementRule(false,Arrays.asList(queueMappingEntity));
  queuePlacementRules.add(anRule);
  pm.updateRules(queuePlacementRules);
  try {
    ApplicationPlacementContext pc=pm.placeApplication(asc,USER2);
    Assert.assertNotNull(pc);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.fail("Exception not expected");
  }
}
