@Test public final void testParse() throws SkylineStoreException, IOException, ParseException, ResourceEstimatorException, DataFieldNotFoundException {
  final String logFile="src/test/resources/trace/rmLog.txt";
  parseFile(logFile);
  final RecurrenceId recurrenceId=new RecurrenceId("FraudDetection","1");
  final Map<RecurrenceId,List<ResourceSkyline>> jobSkylineLists=skylineStore.getHistory(recurrenceId);
  Assert.assertEquals(1,jobSkylineLists.size());
  final List<ResourceSkyline> jobHistory=jobSkylineLists.get(recurrenceId);
  Assert.assertEquals(1,jobHistory.size());
  final ResourceSkyline resourceSkyline=jobHistory.get(0);
  Assert.assertEquals(0,resourceSkyline.getJobInputDataSize(),0);
  Assert.assertEquals("application_1497832133857_0330",resourceSkyline.getJobId());
  Assert.assertEquals(logParserUtil.stringToUnixTimestamp("06/21/2017 16:10:13"),resourceSkyline.getJobSubmissionTime());
  Assert.assertEquals(logParserUtil.stringToUnixTimestamp("06/21/2017 16:18:35"),resourceSkyline.getJobFinishTime());
  final Resource resource=Resource.newInstance(1800,1);
  Assert.assertEquals(resource.getMemorySize(),resourceSkyline.getContainerSpec().getMemorySize());
  Assert.assertEquals(resource.getVirtualCores(),resourceSkyline.getContainerSpec().getVirtualCores());
  final RLESparseResourceAllocation skylineLists=resourceSkyline.getSkylineList();
  int k;
  for (k=0; k < 142; k++) {
    Assert.assertEquals(1,skylineLists.getCapacityAtTime(k).getMemorySize() / resource.getMemorySize());
  }
  for (k=142; k < 345; k++) {
    Assert.assertEquals(2,skylineLists.getCapacityAtTime(k).getMemorySize() / resource.getMemorySize());
  }
  for (k=345; k < 502; k++) {
    Assert.assertEquals(1,skylineLists.getCapacityAtTime(k).getMemorySize() / resource.getMemorySize());
  }
}
