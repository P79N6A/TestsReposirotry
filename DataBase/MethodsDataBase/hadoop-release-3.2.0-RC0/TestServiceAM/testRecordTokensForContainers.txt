@Test public void testRecordTokensForContainers() throws Exception {
  ApplicationId applicationId=ApplicationId.newInstance(123456,1);
  Service exampleApp=new Service();
  exampleApp.setId(applicationId.toString());
  exampleApp.setName("testContainerCompleted");
  exampleApp.addComponent(createComponent("compa",1,"pwd"));
  String json="{\"auths\": " + "{\"https://index.docker.io/v1/\": " + "{\"auth\": \"foobarbaz\"},"+ "\"registry.example.com\": "+ "{\"auth\": \"bazbarfoo\"}}}";
  File dockerTmpDir=new File("target","docker-tmp");
  FileUtils.deleteQuietly(dockerTmpDir);
  dockerTmpDir.mkdirs();
  String dockerConfig=dockerTmpDir + "/config.json";
  BufferedWriter bw=new BufferedWriter(new FileWriter(dockerConfig));
  bw.write(json);
  bw.close();
  Credentials dockerCred=DockerClientConfigHandler.readCredentialsFromConfigFile(new Path(dockerConfig),conf,applicationId.toString());
  MockServiceAM am=new MockServiceAM(exampleApp,dockerCred);
  ByteBuffer amCredBuffer=am.recordTokensForContainers();
  Credentials amCreds=DockerClientConfigHandler.getCredentialsFromTokensByteBuffer(amCredBuffer);
  assertEquals(2,amCreds.numberOfTokens());
  for (  Token<? extends TokenIdentifier> tk : amCreds.getAllTokens()) {
    Assert.assertTrue(tk.getKind().equals(DockerCredentialTokenIdentifier.KIND));
  }
  am.stop();
}
