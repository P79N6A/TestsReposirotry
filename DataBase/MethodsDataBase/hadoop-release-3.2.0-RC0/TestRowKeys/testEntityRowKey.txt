@Test public void testEntityRowKey(){
  TimelineEntity entity=new TimelineEntity();
  entity.setId("!ent!ity!!id!");
  entity.setType("entity!Type");
  entity.setIdPrefix(54321);
  byte[] byteRowKey=new EntityRowKey(CLUSTER,USER,FLOW_NAME,FLOW_RUN_ID,APPLICATION_ID,entity.getType(),entity.getIdPrefix(),entity.getId()).getRowKey();
  EntityRowKey rowKey=EntityRowKey.parseRowKey(byteRowKey);
  assertEquals(CLUSTER,rowKey.getClusterId());
  assertEquals(USER,rowKey.getUserId());
  assertEquals(FLOW_NAME,rowKey.getFlowName());
  assertEquals(FLOW_RUN_ID,rowKey.getFlowRunId());
  assertEquals(APPLICATION_ID,rowKey.getAppId());
  assertEquals(entity.getType(),rowKey.getEntityType());
  assertEquals(entity.getIdPrefix(),rowKey.getEntityIdPrefix().longValue());
  assertEquals(entity.getId(),rowKey.getEntityId());
  byte[] byteRowKeyPrefix=new EntityRowKeyPrefix(CLUSTER,USER,FLOW_NAME,FLOW_RUN_ID,APPLICATION_ID,entity.getType(),null,null).getRowKeyPrefix();
  byte[][] splits=Separator.QUALIFIERS.split(byteRowKeyPrefix,new int[]{Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Bytes.SIZEOF_LONG,AppIdKeyConverter.getKeySize(),Separator.VARIABLE_SIZE,Bytes.SIZEOF_LONG,Separator.VARIABLE_SIZE});
  assertEquals(7,splits.length);
  assertEquals(APPLICATION_ID,new AppIdKeyConverter().decode(splits[4]));
  assertEquals(entity.getType(),Separator.QUALIFIERS.decode(Bytes.toString(splits[5])));
  verifyRowPrefixBytes(byteRowKeyPrefix);
  byteRowKeyPrefix=new EntityRowKeyPrefix(CLUSTER,USER,FLOW_NAME,FLOW_RUN_ID,APPLICATION_ID).getRowKeyPrefix();
  splits=Separator.QUALIFIERS.split(byteRowKeyPrefix,new int[]{Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Bytes.SIZEOF_LONG,AppIdKeyConverter.getKeySize(),Separator.VARIABLE_SIZE});
  assertEquals(6,splits.length);
  assertEquals(0,splits[5].length);
  AppIdKeyConverter appIdKeyConverter=new AppIdKeyConverter();
  assertEquals(APPLICATION_ID,appIdKeyConverter.decode(splits[4]));
  verifyRowPrefixBytes(byteRowKeyPrefix);
}
