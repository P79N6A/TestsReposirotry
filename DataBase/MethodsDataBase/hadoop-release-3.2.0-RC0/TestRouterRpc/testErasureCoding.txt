@Test public void testErasureCoding() throws IOException {
  LOG.info("List the available erasurce coding policies");
  ErasureCodingPolicyInfo[] policies=checkErasureCodingPolicies();
  for (  ErasureCodingPolicyInfo policy : policies) {
    LOG.info("  {}",policy);
  }
  LOG.info("List the erasure coding codecs");
  Map<String,String> codecsRouter=routerProtocol.getErasureCodingCodecs();
  Map<String,String> codecsNamenode=nnProtocol.getErasureCodingCodecs();
  assertTrue(Maps.difference(codecsRouter,codecsNamenode).areEqual());
  for (  Entry<String,String> entry : codecsRouter.entrySet()) {
    LOG.info("  {}: {}",entry.getKey(),entry.getValue());
  }
  LOG.info("Create a testing directory via the router at the root level");
  String dirPath="/testec";
  String filePath1=dirPath + "/testfile1";
  FsPermission permission=new FsPermission("755");
  routerProtocol.mkdirs(dirPath,permission,false);
  createFile(routerFS,filePath1,32);
  assertTrue(verifyFileExists(routerFS,filePath1));
  DFSClient file1Protocol=getFileDFSClient(filePath1);
  LOG.info("The policy for the new file should not be set");
  assertNull(routerProtocol.getErasureCodingPolicy(filePath1));
  assertNull(file1Protocol.getErasureCodingPolicy(filePath1));
  String policyName="RS-6-3-1024k";
  LOG.info("Set policy \"{}\" for \"{}\"",policyName,dirPath);
  routerProtocol.setErasureCodingPolicy(dirPath,policyName);
  String filePath2=dirPath + "/testfile2";
  LOG.info("Create {} in the path with the new EC policy",filePath2);
  createFile(routerFS,filePath2,32);
  assertTrue(verifyFileExists(routerFS,filePath2));
  DFSClient file2Protocol=getFileDFSClient(filePath2);
  LOG.info("Check that the policy is set for {}",filePath2);
  ErasureCodingPolicy policyRouter1=routerProtocol.getErasureCodingPolicy(filePath2);
  ErasureCodingPolicy policyNamenode1=file2Protocol.getErasureCodingPolicy(filePath2);
  assertNotNull(policyRouter1);
  assertEquals(policyName,policyRouter1.getName());
  assertEquals(policyName,policyNamenode1.getName());
  LOG.info("Create a new erasure coding policy");
  String newPolicyName="RS-6-3-128k";
  ECSchema ecSchema=new ECSchema(ErasureCodeConstants.RS_CODEC_NAME,6,3);
  ErasureCodingPolicy ecPolicy=new ErasureCodingPolicy(newPolicyName,ecSchema,128 * 1024,(byte)-1);
  ErasureCodingPolicy[] newPolicies=new ErasureCodingPolicy[]{ecPolicy};
  AddErasureCodingPolicyResponse[] responses=routerProtocol.addErasureCodingPolicies(newPolicies);
  assertEquals(1,responses.length);
  assertTrue(responses[0].isSucceed());
  routerProtocol.disableErasureCodingPolicy(newPolicyName);
  LOG.info("The new policy should be there and disabled");
  policies=checkErasureCodingPolicies();
  boolean found=false;
  for (  ErasureCodingPolicyInfo policy : policies) {
    LOG.info("  {}" + policy);
    if (policy.getPolicy().getName().equals(newPolicyName)) {
      found=true;
      assertEquals(ErasureCodingPolicyState.DISABLED,policy.getState());
      break;
    }
  }
  assertTrue(found);
  LOG.info("Set the test folder to use the new policy");
  routerProtocol.enableErasureCodingPolicy(newPolicyName);
  routerProtocol.setErasureCodingPolicy(dirPath,newPolicyName);
  LOG.info("Create a file in the path with the new EC policy");
  String filePath3=dirPath + "/testfile3";
  createFile(routerFS,filePath3,32);
  assertTrue(verifyFileExists(routerFS,filePath3));
  DFSClient file3Protocol=getFileDFSClient(filePath3);
  ErasureCodingPolicy policyRouterFile3=routerProtocol.getErasureCodingPolicy(filePath3);
  assertEquals(newPolicyName,policyRouterFile3.getName());
  ErasureCodingPolicy policyNamenodeFile3=file3Protocol.getErasureCodingPolicy(filePath3);
  assertEquals(newPolicyName,policyNamenodeFile3.getName());
  LOG.info("Remove the policy and check the one for the test folder");
  routerProtocol.removeErasureCodingPolicy(newPolicyName);
  ErasureCodingPolicy policyRouter3=routerProtocol.getErasureCodingPolicy(filePath3);
  assertEquals(newPolicyName,policyRouter3.getName());
  ErasureCodingPolicy policyNamenode3=file3Protocol.getErasureCodingPolicy(filePath3);
  assertEquals(newPolicyName,policyNamenode3.getName());
  LOG.info("Check the stats");
  ECBlockGroupStats statsRouter=routerProtocol.getECBlockGroupStats();
  ECBlockGroupStats statsNamenode=nnProtocol.getECBlockGroupStats();
  assertEquals(statsNamenode.toString(),statsRouter.toString());
}
