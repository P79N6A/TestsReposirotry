@Test public void testUpdatePipeLineAfterDNReg() throws Exception {
  Configuration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
    cluster.waitActive();
    FileSystem fileSys=cluster.getFileSystem();
    Path file=new Path("/testUpdatePipeLineAfterDNReg");
    FSDataOutputStream out=fileSys.create(file);
    out.write(1);
    out.hflush();
    DataNode dn1=cluster.getDataNodes().get(0);
    dn1.setHeartbeatsDisabledForTests(true);
    DatanodeDescriptor dn1Desc=cluster.getNamesystem(0).getBlockManager().getDatanodeManager().getDatanode(dn1.getDatanodeId());
    cluster.setDataNodeDead(dn1Desc);
    DatanodeProtocolClientSideTranslatorPB dnp=new DatanodeProtocolClientSideTranslatorPB(cluster.getNameNode().getNameNodeAddress(),conf);
    dnp.registerDatanode(dn1.getDNRegistrationForBP(cluster.getNamesystem().getBlockPoolId()));
    DFSOutputStream dfsO=(DFSOutputStream)out.getWrappedStream();
    String clientName=((DistributedFileSystem)fileSys).getClient().getClientName();
    NamenodeProtocols namenode=cluster.getNameNodeRpc();
    LocatedBlock newBlock=namenode.updateBlockForPipeline(dfsO.getBlock(),clientName);
    dfsO.getStreamer().updatePipeline(newBlock.getBlock().getGenerationStamp());
    newBlock=namenode.updateBlockForPipeline(dfsO.getBlock(),clientName);
    dfsO.getStreamer().updatePipeline(newBlock.getBlock().getGenerationStamp());
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
