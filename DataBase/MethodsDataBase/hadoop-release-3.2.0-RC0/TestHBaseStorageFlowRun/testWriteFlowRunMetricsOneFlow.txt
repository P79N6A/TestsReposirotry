/** 
 * Writes two application entities of the same flow run. Each application has two metrics: slot millis and hdfs bytes read. Each metric has values at two timestamps. Checks the metric values of the flow in the flow run table. Flow metric values should be the sum of individual metric values that belong to the latest timestamp for that metric
 */
@Test public void testWriteFlowRunMetricsOneFlow() throws Exception {
  String cluster="testWriteFlowRunMetricsOneFlow_cluster1";
  String user="testWriteFlowRunMetricsOneFlow_user1";
  String flow="testing_flowRun_metrics_flow_name";
  String flowVersion="CF7022C10F1354";
  long runid=1002345678919L;
  TimelineEntities te=new TimelineEntities();
  TimelineEntity entityApp1=TestFlowDataGenerator.getEntityMetricsApp1(System.currentTimeMillis());
  te.addEntity(entityApp1);
  HBaseTimelineWriterImpl hbi=null;
  Configuration c1=util.getConfiguration();
  try {
    hbi=new HBaseTimelineWriterImpl();
    hbi.init(c1);
    UserGroupInformation remoteUser=UserGroupInformation.createRemoteUser(user);
    String appName="application_11111111111111_1111";
    hbi.write(new TimelineCollectorContext(cluster,user,flow,flowVersion,runid,appName),te,remoteUser);
    te=new TimelineEntities();
    TimelineEntity entityApp2=TestFlowDataGenerator.getEntityMetricsApp2(System.currentTimeMillis());
    te.addEntity(entityApp2);
    appName="application_11111111111111_2222";
    hbi.write(new TimelineCollectorContext(cluster,user,flow,flowVersion,runid,appName),te,remoteUser);
    hbi.flush();
  }
  finally {
    if (hbi != null) {
      hbi.close();
    }
  }
  checkFlowRunTable(cluster,user,flow,runid,c1);
  checkFlowRunTableBatchLimit(cluster,user,flow,runid,c1);
  HBaseTimelineReaderImpl hbr=null;
  try {
    hbr=new HBaseTimelineReaderImpl();
    hbr.init(c1);
    hbr.start();
    TimelineEntity entity=hbr.getEntity(new TimelineReaderContext(cluster,user,flow,runid,null,TimelineEntityType.YARN_FLOW_RUN.toString(),null),new TimelineDataToRetrieve());
    assertTrue(TimelineEntityType.YARN_FLOW_RUN.matches(entity.getType()));
    Set<TimelineMetric> metrics=entity.getMetrics();
    assertEquals(2,metrics.size());
    for (    TimelineMetric metric : metrics) {
      String id=metric.getId();
      Map<Long,Number> values=metric.getValues();
      assertEquals(1,values.size());
      Number value=null;
      for (      Number n : values.values()) {
        value=n;
      }
switch (id) {
case METRIC1:
        assertEquals(141L,value);
      break;
case METRIC2:
    assertEquals(57L,value);
  break;
default :
fail("unrecognized metric: " + id);
}
}
}
  finally {
if (hbr != null) {
hbr.close();
}
}
}
