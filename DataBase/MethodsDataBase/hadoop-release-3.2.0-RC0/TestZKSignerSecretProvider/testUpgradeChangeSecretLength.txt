@Test public void testUpgradeChangeSecretLength() throws Exception {
  long seed=System.currentTimeMillis();
  Random rand=new Random(seed);
  byte[] secret2=Long.toString(rand.nextLong()).getBytes(Charset.forName("UTF-8"));
  byte[] secret1=Long.toString(rand.nextLong()).getBytes(Charset.forName("UTF-8"));
  byte[] secret3=Long.toString(rand.nextLong()).getBytes(Charset.forName("UTF-8"));
  rand=new Random(seed);
  byte[] secret4=generateNewSecret(rand);
  byte[] secret5=generateNewSecret(rand);
  byte[] secret6=generateNewSecret(rand);
  byte[] secret7=generateNewSecret(rand);
  MockZKSignerSecretProvider oldSecretProvider=spy(new OldMockZKSignerSecretProvider(seed));
  Properties config=new Properties();
  config.setProperty(ZKSignerSecretProvider.ZOOKEEPER_CONNECTION_STRING,zkServer.getConnectString());
  config.setProperty(ZKSignerSecretProvider.ZOOKEEPER_PATH,"/secret");
  try {
    oldSecretProvider.init(config,getDummyServletContext(),rolloverFrequency);
    byte[] currentSecret=oldSecretProvider.getCurrentSecret();
    byte[][] allSecrets=oldSecretProvider.getAllSecrets();
    Assert.assertArrayEquals(secret1,currentSecret);
    Assert.assertEquals(2,allSecrets.length);
    Assert.assertArrayEquals(secret1,allSecrets[0]);
    Assert.assertNull(allSecrets[1]);
    oldSecretProvider.realRollSecret();
    currentSecret=oldSecretProvider.getCurrentSecret();
    allSecrets=oldSecretProvider.getAllSecrets();
    Assert.assertArrayEquals(secret2,currentSecret);
    Assert.assertEquals(2,allSecrets.length);
    Assert.assertArrayEquals(secret2,allSecrets[0]);
    Assert.assertArrayEquals(secret1,allSecrets[1]);
  }
  finally {
    oldSecretProvider.destroy();
  }
  MockZKSignerSecretProvider newSecretProvider=spy(new MockZKSignerSecretProvider(seed));
  try {
    newSecretProvider.init(config,getDummyServletContext(),rolloverFrequency);
    byte[] currentSecret=newSecretProvider.getCurrentSecret();
    byte[][] allSecrets=newSecretProvider.getAllSecrets();
    Assert.assertArrayEquals(secret2,currentSecret);
    Assert.assertEquals(2,allSecrets.length);
    Assert.assertArrayEquals(secret2,allSecrets[0]);
    Assert.assertArrayEquals(secret1,allSecrets[1]);
    newSecretProvider.realRollSecret();
    currentSecret=newSecretProvider.getCurrentSecret();
    allSecrets=newSecretProvider.getAllSecrets();
    Assert.assertArrayEquals(secret3,currentSecret);
    Assert.assertEquals(2,allSecrets.length);
    Assert.assertArrayEquals(secret3,allSecrets[0]);
    Assert.assertArrayEquals(secret2,allSecrets[1]);
    newSecretProvider.realRollSecret();
    currentSecret=newSecretProvider.getCurrentSecret();
    allSecrets=newSecretProvider.getAllSecrets();
    Assert.assertArrayEquals(secret6,currentSecret);
    Assert.assertEquals(2,allSecrets.length);
    Assert.assertArrayEquals(secret6,allSecrets[0]);
    Assert.assertArrayEquals(secret3,allSecrets[1]);
    newSecretProvider.realRollSecret();
    currentSecret=newSecretProvider.getCurrentSecret();
    allSecrets=newSecretProvider.getAllSecrets();
    Assert.assertArrayEquals(secret7,currentSecret);
    Assert.assertEquals(2,allSecrets.length);
    Assert.assertArrayEquals(secret7,allSecrets[0]);
    Assert.assertArrayEquals(secret6,allSecrets[1]);
  }
  finally {
    newSecretProvider.destroy();
  }
}
