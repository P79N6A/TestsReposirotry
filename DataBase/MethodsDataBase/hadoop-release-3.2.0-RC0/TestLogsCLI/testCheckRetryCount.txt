@Test public void testCheckRetryCount() throws Exception {
  UserGroupInformation ugi=UserGroupInformation.getCurrentUser();
  NodeId nodeId=NodeId.newInstance("localhost",1234);
  ApplicationId appId=ApplicationId.newInstance(0,1);
  ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,1);
  ApplicationAttemptReport mockAttemptReport=mock(ApplicationAttemptReport.class);
  doReturn(appAttemptId).when(mockAttemptReport).getApplicationAttemptId();
  List<ApplicationAttemptReport> attemptReports=Arrays.asList(mockAttemptReport);
  ContainerId containerId1=ContainerId.newContainerId(appAttemptId,1);
  ContainerReport mockContainerReport1=mock(ContainerReport.class);
  doReturn(containerId1).when(mockContainerReport1).getContainerId();
  doReturn(nodeId).when(mockContainerReport1).getAssignedNode();
  doReturn("http://localhost:2345").when(mockContainerReport1).getNodeHttpAddress();
  doReturn(ContainerState.RUNNING).when(mockContainerReport1).getContainerState();
  List<ContainerReport> containerReports=Arrays.asList(mockContainerReport1);
  YarnClient mockYarnClient=createMockYarnClient(YarnApplicationState.RUNNING,ugi.getShortUserName(),true,attemptReports,containerReports);
  doReturn(mockContainerReport1).when(mockYarnClient).getContainerReport(any(ContainerId.class));
  LogsCLI cli=new LogsCLIForTest(mockYarnClient);
  cli.setConf(new YarnConfiguration());
  try {
    cli.run(new String[]{"-containerId",containerId1.toString(),"-client_max_retries","5"});
    Assert.fail("Exception expected! " + "NodeManager should be off to run this test. ");
  }
 catch (  RuntimeException ce) {
    Assert.assertTrue("Handler exception for reason other than retry: " + ce.getMessage(),ce.getMessage().contains("Connection retries limit exceeded"));
    Assert.assertTrue("Retry filter didn't perform any retries! ",cli.connectionRetry.getRetired());
  }
}
