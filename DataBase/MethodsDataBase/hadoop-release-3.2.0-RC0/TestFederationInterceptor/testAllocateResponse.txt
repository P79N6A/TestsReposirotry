@Test public void testAllocateResponse() throws Exception {
  interceptor.registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(null,0,null));
  AllocateRequest allocateRequest=Records.newRecord(AllocateRequest.class);
  Map<SubClusterId,List<AllocateResponse>> asyncResponseSink=interceptor.getAsyncResponseSink();
  ContainerId cid=ContainerId.newContainerId(attemptId,0);
  ContainerStatus cStatus=Records.newRecord(ContainerStatus.class);
  cStatus.setContainerId(cid);
  Container container=Container.newInstance(cid,null,null,null,null,null);
  AllocateResponse response=Records.newRecord(AllocateResponse.class);
  response.setAllocatedContainers(Collections.singletonList(container));
  response.setCompletedContainersStatuses(Collections.singletonList(cStatus));
  response.setUpdatedNodes(Collections.singletonList(Records.newRecord(NodeReport.class)));
  response.setNMTokens(Collections.singletonList(Records.newRecord(NMToken.class)));
  response.setUpdatedContainers(Collections.singletonList(Records.newRecord(UpdatedContainer.class)));
  response.setUpdateErrors(Collections.singletonList(Records.newRecord(UpdateContainerError.class)));
  response.setAvailableResources(Records.newRecord(Resource.class));
  response.setPreemptionMessage(Records.newRecord(PreemptionMessage.class));
  List<AllocateResponse> list=new ArrayList<>();
  list.add(response);
  asyncResponseSink.put(SubClusterId.newInstance("SC-1"),list);
  response=interceptor.allocate(allocateRequest);
  Assert.assertEquals(1,response.getAllocatedContainers().size());
  Assert.assertNotNull(response.getAvailableResources());
  Assert.assertEquals(1,response.getCompletedContainersStatuses().size());
  Assert.assertEquals(1,response.getUpdatedNodes().size());
  Assert.assertNotNull(response.getPreemptionMessage());
  Assert.assertEquals(1,response.getNMTokens().size());
  Assert.assertEquals(1,response.getUpdatedContainers().size());
  Assert.assertEquals(1,response.getUpdateErrors().size());
}
