@Test public void testSecondAttempt() throws Exception {
  final RegisterApplicationMasterRequest registerReq=Records.newRecord(RegisterApplicationMasterRequest.class);
  registerReq.setHost(Integer.toString(testAppId));
  registerReq.setRpcPort(testAppId);
  registerReq.setTrackingUrl("");
  UserGroupInformation ugi=interceptor.getUGIWithToken(interceptor.getAttemptId());
  ugi.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      RegisterApplicationMasterResponse registerResponse=interceptor.registerApplicationMaster(registerReq);
      Assert.assertNotNull(registerResponse);
      lastResponseId=0;
      Assert.assertEquals(0,interceptor.getUnmanagedAMPoolSize());
      registerSubCluster(SubClusterId.newInstance("SC-1"));
      registerSubCluster(SubClusterId.newInstance(HOME_SC_ID));
      int numberOfContainers=3;
      List<Container> containers=getContainersAndAssert(numberOfContainers,numberOfContainers * 2);
      for (      Container c : containers) {
        LOG.info("Allocated container " + c.getId());
      }
      Assert.assertEquals(1,interceptor.getUnmanagedAMPoolSize());
      interceptor.drainAllAsyncQueue(true);
      ConcurrentHashMap<String,MockResourceManagerFacade> secondaries=interceptor.getSecondaryRMs();
      attemptId=ApplicationAttemptId.newInstance(attemptId.getApplicationId(),attemptId.getAttemptId() + 1);
      interceptor=new TestableFederationInterceptor(null,secondaries);
      interceptor.init(new AMRMProxyApplicationContextImpl(nmContext,getConf(),attemptId,"test-user",null,null,null,registry));
      return null;
    }
  }
);
  ugi=interceptor.getUGIWithToken(interceptor.getAttemptId());
  ugi.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      RegisterApplicationMasterResponse registerResponse=interceptor.registerApplicationMaster(registerReq);
      lastResponseId=0;
      int numberOfContainers=3;
      Assert.assertEquals(1,interceptor.getUnmanagedAMPoolSize());
      Assert.assertEquals(numberOfContainers,registerResponse.getContainersFromPreviousAttempts().size());
      releaseContainersAndAssert(registerResponse.getContainersFromPreviousAttempts());
      FinishApplicationMasterRequest finishReq=Records.newRecord(FinishApplicationMasterRequest.class);
      finishReq.setDiagnostics("");
      finishReq.setTrackingUrl("");
      finishReq.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);
      FinishApplicationMasterResponse finshResponse=interceptor.finishApplicationMaster(finishReq);
      Assert.assertNotNull(finshResponse);
      Assert.assertEquals(true,finshResponse.getIsUnregistered());
      if (interceptor.getRegistryClient() != null) {
        Assert.assertEquals(0,interceptor.getRegistryClient().getAllApplications().size());
      }
      return null;
    }
  }
);
}
