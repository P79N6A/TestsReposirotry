@Test public void testMultipleSubClusters() throws Exception {
  UserGroupInformation ugi=interceptor.getUGIWithToken(interceptor.getAttemptId());
  ugi.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      RegisterApplicationMasterRequest registerReq=Records.newRecord(RegisterApplicationMasterRequest.class);
      registerReq.setHost(Integer.toString(testAppId));
      registerReq.setRpcPort(0);
      registerReq.setTrackingUrl("");
      RegisterApplicationMasterResponse registerResponse=interceptor.registerApplicationMaster(registerReq);
      Assert.assertNotNull(registerResponse);
      lastResponseId=0;
      Assert.assertEquals(0,interceptor.getUnmanagedAMPoolSize());
      registerSubCluster(SubClusterId.newInstance("SC-1"));
      registerSubCluster(SubClusterId.newInstance("SC-2"));
      int numberOfContainers=3;
      List<Container> containers=getContainersAndAssert(numberOfContainers,numberOfContainers * 2);
      Assert.assertEquals(2,interceptor.getUnmanagedAMPoolSize());
      deRegisterSubCluster(SubClusterId.newInstance("SC-2"));
      registerSubCluster(SubClusterId.newInstance("SC-3"));
      numberOfContainers=1;
      containers.addAll(getContainersAndAssert(numberOfContainers,numberOfContainers * 2));
      Assert.assertEquals(3,interceptor.getUnmanagedAMPoolSize());
      deRegisterSubCluster(SubClusterId.newInstance("SC-1"));
      deRegisterSubCluster(SubClusterId.newInstance("SC-3"));
      registerSubCluster(SubClusterId.newInstance(HOME_SC_ID));
      numberOfContainers=2;
      containers.addAll(getContainersAndAssert(numberOfContainers,numberOfContainers * 1));
      Assert.assertEquals(3,interceptor.getUnmanagedAMPoolSize());
      releaseContainersAndAssert(containers);
      FinishApplicationMasterRequest finishReq=Records.newRecord(FinishApplicationMasterRequest.class);
      finishReq.setDiagnostics("");
      finishReq.setTrackingUrl("");
      finishReq.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);
      FinishApplicationMasterResponse finshResponse=interceptor.finishApplicationMaster(finishReq);
      Assert.assertNotNull(finshResponse);
      Assert.assertEquals(true,finshResponse.getIsUnregistered());
      return null;
    }
  }
);
}
