@Test(timeout=30000) public void testHistoryParsingForKilledAndFailedAttempts() throws Exception {
  MRApp app=null;
  JobHistory jobHistory=null;
  LOG.info("STARTING testHistoryParsingForKilledAndFailedAttempts");
  try {
    Configuration conf=new Configuration();
    conf.setClass(NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,MyResolver.class,DNSToSwitchMapping.class);
    conf.set(JHAdminConfig.MR_HS_JHIST_FORMAT,"json");
    conf.setInt(MRJobConfig.MAP_FAILURES_MAX_PERCENT,50);
    conf.setInt(MRJobConfig.REDUCE_FAILURES_MAXPERCENT,50);
    RackResolver.init(conf);
    app=new MRAppWithHistoryWithFailedAndKilledTask(3,3,true,this.getClass().getName(),true);
    app.submit(conf);
    Job job=app.getContext().getAllJobs().values().iterator().next();
    JobId jobId=job.getID();
    app.waitForState(job,JobState.SUCCEEDED);
    app.waitForState(Service.STATE.STOPPED);
    jobHistory=new JobHistory();
    jobHistory.init(conf);
    HistoryFileInfo fileInfo=jobHistory.getJobFileInfo(jobId);
    JobHistoryParser parser;
    JobInfo jobInfo;
synchronized (fileInfo) {
      Path historyFilePath=fileInfo.getHistoryFile();
      FSDataInputStream in=null;
      FileContext fc=null;
      try {
        fc=FileContext.getFileContext(conf);
        in=fc.open(fc.makeQualified(historyFilePath));
      }
 catch (      IOException ioe) {
        LOG.info("Can not open history file: " + historyFilePath,ioe);
        throw (new Exception("Can not open History File"));
      }
      parser=new JobHistoryParser(in);
      jobInfo=parser.parse();
    }
    Exception parseException=parser.getParseException();
    Assert.assertNull("Caught an expected exception " + parseException,parseException);
    assertEquals("FailedMaps",1,jobInfo.getFailedMaps());
    assertEquals("KilledMaps",1,jobInfo.getKilledMaps());
    assertEquals("FailedReduces",1,jobInfo.getFailedReduces());
    assertEquals("KilledReduces",1,jobInfo.getKilledReduces());
  }
  finally {
    LOG.info("FINISHED testHistoryParsingForKilledAndFailedAttempts");
    if (app != null) {
      app.close();
    }
    if (jobHistory != null) {
      jobHistory.close();
    }
  }
}
