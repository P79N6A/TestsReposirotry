/** 
 * The test set the configuration parameters for a large block size and restarts initiated single-node cluster. Then it writes a file > block_size and closes it. The second datanode is started in the cluster. As soon as the replication process is started and at least one TEMPORARY replica is found test forces BlockReport process and checks if the TEMPORARY replica isn't reported on it. Eventually, the configuration is being restored into the original state.
 * @throws IOException in case of an error
 */
@Test(timeout=300000) public void blockReport_08() throws IOException {
  final String METHOD_NAME=GenericTestUtils.getMethodName();
  Path filePath=new Path("/" + METHOD_NAME + ".dat");
  final int DN_N1=DN_N0 + 1;
  final int bytesChkSum=1024 * 1000;
  conf.setInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,bytesChkSum);
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,6 * bytesChkSum);
  shutDownCluster();
  startUpCluster();
  try {
    ArrayList<Block> blocks=writeFile(METHOD_NAME,12 * bytesChkSum,filePath);
    Block bl=findBlock(filePath,12 * bytesChkSum);
    BlockChecker bc=new BlockChecker(filePath);
    bc.start();
    waitForTempReplica(bl,DN_N1);
    DataNode dn=cluster.getDataNodes().get(DN_N1);
    String poolId=cluster.getNamesystem().getBlockPoolId();
    DatanodeRegistration dnR=dn.getDNRegistrationForBP(poolId);
    StorageBlockReport[] reports=getBlockReports(dn,poolId,false,false);
    sendBlockReports(dnR,poolId,reports);
    printStats();
    assertEquals("Wrong number of PendingReplication blocks",blocks.size(),cluster.getNamesystem().getPendingReplicationBlocks());
    try {
      bc.join();
    }
 catch (    InterruptedException e) {
    }
  }
  finally {
    resetConfiguration();
  }
}
