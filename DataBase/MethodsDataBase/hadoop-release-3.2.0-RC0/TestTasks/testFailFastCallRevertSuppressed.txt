@Test public void testFailFastCallRevertSuppressed() throws Throwable {
  assertFailed(builder().stopOnFailure().revertWith(reverter).abortWith(aborter).suppressExceptions().onFailure(failures),failingTask);
  failingTask.assertInvokedAtLeast("success",FAILPOINT);
  if (!isParallel()) {
    aborter.assertInvokedAtLeast("abort",1);
    items.stream().filter(i -> !i.committed).filter(i -> !i.failed).forEach(Item::assertAborted);
  }
  items.stream().filter(i -> i.committed && !i.failed).forEach(Item::assertReverted);
  items.stream().filter(i -> i.reverted).forEach(Item::assertCommitted);
  failures.assertInvoked("failure event",1);
}
