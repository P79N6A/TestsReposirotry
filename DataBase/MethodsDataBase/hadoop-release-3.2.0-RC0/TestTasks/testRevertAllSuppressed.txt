/** 
 * Fail the last one committed, all the rest will be reverted. The actual ID of the last task has to be picke dup from the failure callback, as in the pool it may be one of any.
 */
@Test public void testRevertAllSuppressed() throws Throwable {
  CounterTask failLast=new CounterTask("task",ITEM_COUNT,Item::commit);
  assertFailed(builder().suppressExceptions().stopOnFailure().revertWith(reverter).abortWith(aborter).onFailure(failures),failLast);
  failLast.assertInvoked("success",ITEM_COUNT);
  int abCount=aborter.getCount();
  int revCount=reverter.getCount();
  assertEquals(ITEM_COUNT,1 + abCount + revCount);
  int failing=failures.getItem().id;
  items.stream().filter(i -> i.id != failing).filter(i -> i.committed).forEach(Item::assertReverted);
  items.stream().filter(i -> i.id != failing).filter(i -> !i.committed).forEach(Item::assertAborted);
  items.stream().filter(i -> i.reverted).forEach(Item::assertCommitted);
  failures.assertInvoked("failure event",1);
}
