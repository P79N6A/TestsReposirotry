@Test public void testQuotaSynchronization() throws IOException {
  long updateNsQuota=3;
  long updateSsQuota=4;
  FileSystem nnFs=nnContext1.getFileSystem();
  nnFs.mkdirs(new Path("/testsync"));
  MountTable mountTable=MountTable.newInstance("/quotaSync",Collections.singletonMap("ns0","/testsync"),Time.now(),Time.now());
  mountTable.setQuota(new RouterQuotaUsage.Builder().quota(1).spaceQuota(2).build());
  addMountTable(mountTable);
  QuotaUsage realQuota=nnContext1.getFileSystem().getQuotaUsage(new Path("/testsync"));
  assertNotEquals(updateNsQuota,realQuota.getQuota());
  assertNotEquals(updateSsQuota,realQuota.getSpaceQuota());
  RouterQuotaUpdateService updateService=routerContext.getRouter().getQuotaCacheUpdateService();
  updateService.periodicInvoke();
  mountTable.setQuota(new RouterQuotaUsage.Builder().quota(updateNsQuota).spaceQuota(updateSsQuota).build());
  UpdateMountTableEntryRequest updateRequest=UpdateMountTableEntryRequest.newInstance(mountTable);
  RouterClient client=routerContext.getAdminClient();
  MountTableManager mountTableManager=client.getMountTableManager();
  mountTableManager.updateMountTableEntry(updateRequest);
  realQuota=nnContext1.getFileSystem().getQuotaUsage(new Path("/testsync"));
  assertEquals(updateNsQuota,realQuota.getQuota());
  assertEquals(updateSsQuota,realQuota.getSpaceQuota());
  mountTable.setQuota(new RouterQuotaUsage.Builder().quota(HdfsConstants.QUOTA_RESET).spaceQuota(HdfsConstants.QUOTA_RESET).build());
  updateRequest=UpdateMountTableEntryRequest.newInstance(mountTable);
  client=routerContext.getAdminClient();
  mountTableManager=client.getMountTableManager();
  mountTableManager.updateMountTableEntry(updateRequest);
  realQuota=nnContext1.getFileSystem().getQuotaUsage(new Path("/testsync"));
  assertEquals(HdfsConstants.QUOTA_RESET,realQuota.getQuota());
  assertEquals(HdfsConstants.QUOTA_RESET,realQuota.getSpaceQuota());
}
