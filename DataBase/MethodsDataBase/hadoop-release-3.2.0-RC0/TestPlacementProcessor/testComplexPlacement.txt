@Test(timeout=300000) public void testComplexPlacement() throws Exception {
  HashMap<NodeId,MockNM> nodes=new HashMap<>();
  MockNM nm1=new MockNM("h1:1234",4096,rm.getResourceTrackerService());
  nodes.put(nm1.getNodeId(),nm1);
  MockNM nm2=new MockNM("h2:1234",4096,rm.getResourceTrackerService());
  nodes.put(nm2.getNodeId(),nm2);
  MockNM nm3=new MockNM("h3:1234",4096,rm.getResourceTrackerService());
  nodes.put(nm3.getNodeId(),nm3);
  MockNM nm4=new MockNM("h4:1234",4096,rm.getResourceTrackerService());
  nodes.put(nm4.getNodeId(),nm4);
  nm1.registerNode();
  nm2.registerNode();
  nm3.registerNode();
  nm4.registerNode();
  RMApp app1=rm.submitApp(1 * GB,"app","user",null,"default");
  Map<Set<String>,PlacementConstraint> constraintMap=new HashMap<>();
  constraintMap.put(Collections.singleton("bar"),PlacementConstraints.build(targetNotIn(NODE,allocationTag("bar"))));
  constraintMap.put(Collections.singleton("foo"),PlacementConstraints.build(targetIn(NODE,allocationTag("bar"))));
  constraintMap.put(Collections.singleton("foo"),PlacementConstraints.build(targetCardinality(NODE,0,1,allocationTag("foo"))));
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm2,constraintMap);
  am1.addSchedulingRequest(Arrays.asList(schedulingRequest(1,1,1,512,"bar"),schedulingRequest(1,2,1,512,"bar"),schedulingRequest(1,3,1,512,"foo"),schedulingRequest(1,4,1,512,"foo"),schedulingRequest(1,5,1,512,"foo"),schedulingRequest(1,6,1,512,"foo")));
  AllocateResponse allocResponse=am1.schedule();
  List<Container> allocatedContainers=new ArrayList<>();
  allocatedContainers.addAll(allocResponse.getAllocatedContainers());
  waitForContainerAllocation(nodes.values(),am1,allocatedContainers,new ArrayList<>(),6);
  Assert.assertEquals(6,allocatedContainers.size());
  Map<NodeId,Long> nodeIdContainerIdMap=allocatedContainers.stream().collect(Collectors.groupingBy(c -> c.getNodeId(),Collectors.counting()));
  for (  NodeId n : nodeIdContainerIdMap.keySet()) {
    Assert.assertTrue(nodeIdContainerIdMap.get(n) < 4);
  }
  QueueMetrics metrics=rm.getResourceScheduler().getRootQueueMetrics();
  verifyMetrics(metrics,9216,9,7168,7,7);
}
