@Test(timeout=15000) public void testFetchApplictionLogsHar() throws Exception {
  List<String> newLogTypes=new ArrayList<>();
  newLogTypes.add("syslog");
  newLogTypes.add("stdout");
  newLogTypes.add("stderr");
  newLogTypes.add("test1");
  newLogTypes.add("test2");
  URL harUrl=ClassLoader.getSystemClassLoader().getResource("application_123456_0001.har");
  assertNotNull(harUrl);
  Path path=new Path(remoteLogDir + "/" + USER_UGI.getShortUserName()+ "/logs/application_123456_0001");
  if (fs.exists(path)) {
    fs.delete(path,true);
  }
  assertTrue(fs.mkdirs(path));
  Path harPath=new Path(path,"application_123456_0001.har");
  fs.copyFromLocalFile(false,new Path(harUrl.toURI()),harPath);
  assertTrue(fs.exists(harPath));
  LogAggregationIndexedFileController fileFormat=new LogAggregationIndexedFileController();
  fileFormat.initialize(conf,"Indexed");
  ContainerLogsRequest logRequest=new ContainerLogsRequest();
  logRequest.setAppId(appId);
  logRequest.setNodeId(nodeId.toString());
  logRequest.setAppOwner(USER_UGI.getShortUserName());
  logRequest.setContainerId(containerId.toString());
  logRequest.setBytes(Long.MAX_VALUE);
  List<ContainerLogMeta> meta=fileFormat.readAggregatedLogsMeta(logRequest);
  Assert.assertEquals(meta.size(),3);
  List<String> fileNames=new ArrayList<>();
  for (  ContainerLogMeta log : meta) {
    Assert.assertTrue(log.getContainerId().equals(containerId.toString()));
    Assert.assertTrue(log.getNodeId().equals(nodeId.toString()));
    for (    ContainerLogFileInfo file : log.getContainerLogMeta()) {
      fileNames.add(file.getFileName());
    }
  }
  fileNames.removeAll(newLogTypes);
  Assert.assertTrue(fileNames.isEmpty());
  boolean foundLogs=fileFormat.readAggregatedLogs(logRequest,System.out);
  Assert.assertTrue(foundLogs);
  for (  String logType : newLogTypes) {
    Assert.assertTrue(sysOutStream.toString().contains(logMessage(containerId,logType)));
  }
  sysOutStream.reset();
}
