@Test public void testPread() throws Exception {
  final int numBlocks=2;
  DFSTestUtil.createStripedFile(cluster,filePath,null,numBlocks,stripesPerBlock,false,ecPolicy);
  LocatedBlocks lbs=fs.getClient().namenode.getBlockLocations(filePath.toString(),0,blockGroupSize * numBlocks);
  int fileLen=blockGroupSize * numBlocks;
  byte[] expected=new byte[fileLen];
  assertEquals(numBlocks,lbs.getLocatedBlocks().size());
  for (int bgIdx=0; bgIdx < numBlocks; bgIdx++) {
    LocatedStripedBlock bg=(LocatedStripedBlock)(lbs.get(bgIdx));
    for (int i=0; i < dataBlocks; i++) {
      Block blk=new Block(bg.getBlock().getBlockId() + i,stripesPerBlock * cellSize,bg.getBlock().getGenerationStamp());
      blk.setGenerationStamp(bg.getBlock().getGenerationStamp());
      cluster.injectBlocks(i,Arrays.asList(blk),bg.getBlock().getBlockPoolId());
    }
    for (int i=0; i < stripesPerBlock; i++) {
      for (int j=0; j < dataBlocks; j++) {
        for (int k=0; k < cellSize; k++) {
          int posInBlk=i * cellSize + k;
          int posInFile=i * cellSize * dataBlocks + j * cellSize + k;
          expected[bgIdx * blockGroupSize + posInFile]=SimulatedFSDataset.simulatedByte(new Block(bg.getBlock().getBlockId() + j),posInBlk);
        }
      }
    }
  }
  DFSStripedInputStream in=new DFSStripedInputStream(fs.getClient(),filePath.toString(),false,ecPolicy,null);
  int[] startOffsets={0,1,cellSize - 102,cellSize,cellSize + 102,cellSize * dataBlocks,cellSize * dataBlocks + 102,blockGroupSize - 102,blockGroupSize,blockGroupSize + 102,fileLen - 1};
  for (  int startOffset : startOffsets) {
    startOffset=Math.max(0,Math.min(startOffset,fileLen - 1));
    int remaining=fileLen - startOffset;
    byte[] buf=new byte[fileLen];
    int ret=in.read(startOffset,buf,0,fileLen);
    assertEquals(remaining,ret);
    for (int i=0; i < remaining; i++) {
      Assert.assertEquals("Byte at " + (startOffset + i) + " should be the "+ "same",expected[startOffset + i],buf[i]);
    }
  }
  in.close();
}
