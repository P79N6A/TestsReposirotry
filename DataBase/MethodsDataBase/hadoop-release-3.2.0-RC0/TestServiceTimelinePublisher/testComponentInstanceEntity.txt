@Test public void testComponentInstanceEntity(){
  Container container=new Container();
  container.id(CONTAINER_ID).ip(CONTAINER_IP).bareHost(CONTAINER_BAREHOST).hostname(CONTAINER_HOSTNAME).state(ContainerState.RUNNING_BUT_UNREADY).launchTime(new Date());
  ComponentInstanceId id=new ComponentInstanceId(0,COMPONENT_NAME);
  ComponentInstance instance=mock(ComponentInstance.class);
  when(instance.getCompName()).thenReturn(COMPONENT_NAME);
  when(instance.getCompInstanceName()).thenReturn("comp_instance_name");
  serviceTimelinePublisher.componentInstanceStarted(container,instance);
  Collection<TimelineEntity> lastPublishedEntities=((DummyTimelineClient)timelineClient).getLastPublishedEntities();
  assertEquals(1,lastPublishedEntities.size());
  TimelineEntity entity=lastPublishedEntities.iterator().next();
  assertEquals(1,entity.getEvents().size());
  assertEquals(CONTAINER_ID,entity.getId());
  assertEquals(CONTAINER_BAREHOST,entity.getInfo().get(ServiceTimelineMetricsConstants.BARE_HOST));
  assertEquals(COMPONENT_NAME,entity.getInfo().get(ServiceTimelineMetricsConstants.COMPONENT_NAME));
  assertEquals(ContainerState.RUNNING_BUT_UNREADY.toString(),entity.getInfo().get(ServiceTimelineMetricsConstants.STATE));
  container.setState(ContainerState.READY);
  serviceTimelinePublisher.componentInstanceIPHostUpdated(container);
  lastPublishedEntities=((DummyTimelineClient)timelineClient).getLastPublishedEntities();
  assertEquals(1,lastPublishedEntities.size());
  entity=lastPublishedEntities.iterator().next();
  assertEquals(2,entity.getEvents().size());
  assertEquals(ContainerState.READY.toString(),entity.getInfo().get(ServiceTimelineMetricsConstants.STATE));
}
