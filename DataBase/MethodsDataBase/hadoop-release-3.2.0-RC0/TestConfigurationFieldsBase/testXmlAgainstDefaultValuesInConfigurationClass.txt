/** 
 * For each property in the XML file, verify that the value matches up to the default if one exists.
 */
@Test public void testXmlAgainstDefaultValuesInConfigurationClass(){
  assertNotNull(xmlFilename);
  assertNotNull(configurationMemberVariables);
  assertNotNull(configurationDefaultVariables);
  TreeSet<String> xmlPropertiesWithEmptyValue=new TreeSet<>();
  TreeSet<String> configPropertiesWithNoDefaultConfig=new TreeSet<>();
  HashMap<String,String> xmlPropertiesMatchingConfigDefault=new HashMap<>();
  HashMap<HashMap<String,String>,HashMap<String,String>> mismatchingXmlConfig=new HashMap<>();
  for (  Map.Entry<String,String> xEntry : xmlKeyValueMap.entrySet()) {
    String xmlProperty=xEntry.getKey();
    String xmlDefaultValue=xEntry.getValue();
    String configProperty=configurationMemberVariables.get(xmlProperty);
    if (configProperty != null) {
      String defaultConfigName=null;
      String defaultConfigValue=null;
      String defaultNameCheck1="DEFAULT_" + configProperty;
      String defaultValueCheck1=configurationDefaultVariables.get(defaultNameCheck1);
      String defaultNameCheck2=null;
      if (configProperty.endsWith("_KEY")) {
        defaultNameCheck2=configProperty.substring(0,configProperty.length() - 4) + "_DEFAULT";
      }
      String defaultValueCheck2=configurationDefaultVariables.get(defaultNameCheck2);
      String defaultNameCheck3=configProperty + "_DEFAULT";
      String defaultValueCheck3=configurationDefaultVariables.get(defaultNameCheck3);
      if (defaultValueCheck1 != null) {
        defaultConfigName=defaultNameCheck1;
        defaultConfigValue=defaultValueCheck1;
      }
 else       if (defaultValueCheck2 != null) {
        defaultConfigName=defaultNameCheck2;
        defaultConfigValue=defaultValueCheck2;
      }
 else       if (defaultValueCheck3 != null) {
        defaultConfigName=defaultNameCheck3;
        defaultConfigValue=defaultValueCheck3;
      }
      if (defaultConfigValue != null) {
        if (xmlDefaultValue == null) {
          xmlPropertiesWithEmptyValue.add(xmlProperty);
        }
 else         if (!xmlDefaultValue.equals(defaultConfigValue)) {
          HashMap<String,String> xmlEntry=new HashMap<>();
          xmlEntry.put(xmlProperty,xmlDefaultValue);
          HashMap<String,String> configEntry=new HashMap<>();
          configEntry.put(defaultConfigName,defaultConfigValue);
          mismatchingXmlConfig.put(xmlEntry,configEntry);
        }
 else {
          xmlPropertiesMatchingConfigDefault.put(xmlProperty,defaultConfigName);
        }
      }
 else {
        configPropertiesWithNoDefaultConfig.add(configProperty);
      }
    }
  }
  LOG.info("{} has {} properties that do not match the default Config value",xmlFilename,mismatchingXmlConfig.size());
  if (mismatchingXmlConfig.isEmpty()) {
    LOG.info("  (None)");
  }
 else {
    for (    Map.Entry<HashMap<String,String>,HashMap<String,String>> xcEntry : mismatchingXmlConfig.entrySet()) {
      xcEntry.getKey().forEach((key,value) -> {
        LOG.info("XML Property: {}",key);
        LOG.info("XML Value:    {}",value);
      }
);
      xcEntry.getValue().forEach((key,value) -> {
        LOG.info("Config Name:  {}",key);
        LOG.info("Config Value: {}",value);
      }
);
      LOG.info("");
    }
  }
  LOG.info("\n");
  LOG.info("Configuration(s) have {} " + " properties with no corresponding default member variable.  These" + " will need to be verified manually.",configPropertiesWithNoDefaultConfig.size());
  if (configPropertiesWithNoDefaultConfig.isEmpty()) {
    LOG.info("  (None)");
  }
 else {
    configPropertiesWithNoDefaultConfig.forEach(c -> LOG.info(" {}",c));
  }
  LOG.info("\n");
  LOG.info("{} has {} properties with empty values",xmlFilename,xmlPropertiesWithEmptyValue.size());
  if (xmlPropertiesWithEmptyValue.isEmpty()) {
    LOG.info("  (None)");
  }
 else {
    xmlPropertiesWithEmptyValue.forEach(p -> LOG.info("  {}",p));
  }
  LOG.info("\n");
  LOG.info("{} has {} properties which match a corresponding Config variable",xmlFilename,xmlPropertiesMatchingConfigDefault.size());
  if (xmlPropertiesMatchingConfigDefault.isEmpty()) {
    LOG.info("  (None)");
  }
 else {
    xmlPropertiesMatchingConfigDefault.forEach((key,value) -> LOG.info("  {} / {}",key,value));
  }
  LOG.info("\n=====\n");
}
