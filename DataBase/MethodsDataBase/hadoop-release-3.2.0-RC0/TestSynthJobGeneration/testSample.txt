@Test public void testSample() throws IOException {
  ObjectMapper mapper=new ObjectMapper();
  mapper.configure(INTERN_FIELD_NAMES,true);
  mapper.configure(FAIL_ON_UNKNOWN_PROPERTIES,false);
  JDKRandomGenerator rand=new JDKRandomGenerator();
  rand.setSeed(0);
  String valJson="{\"val\" : 5 }";
  SynthTraceJobProducer.Sample valSample=mapper.readValue(valJson,SynthTraceJobProducer.Sample.class);
  valSample.init(rand);
  int val=valSample.getInt();
  Assert.assertEquals(5,val);
  String distJson="{\"val\" : 5, \"std\" : 1 }";
  SynthTraceJobProducer.Sample distSample=mapper.readValue(distJson,SynthTraceJobProducer.Sample.class);
  distSample.init(rand);
  double dist=distSample.getDouble();
  Assert.assertTrue(dist > 2 && dist < 8);
  String normdistJson="{\"val\" : 5, \"std\" : 1, \"dist\": \"NORM\" }";
  SynthTraceJobProducer.Sample normdistSample=mapper.readValue(normdistJson,SynthTraceJobProducer.Sample.class);
  normdistSample.init(rand);
  double normdist=normdistSample.getDouble();
  Assert.assertTrue(normdist > 2 && normdist < 8);
  String discreteJson="{\"discrete\" : [2, 4, 6, 8]}";
  SynthTraceJobProducer.Sample discreteSample=mapper.readValue(discreteJson,SynthTraceJobProducer.Sample.class);
  discreteSample.init(rand);
  int discrete=discreteSample.getInt();
  Assert.assertTrue(Arrays.asList(new Integer[]{2,4,6,8}).contains(discrete));
  String discreteWeightsJson="{\"discrete\" : [2, 4, 6, 8], " + "\"weights\": [0, 0, 0, 1]}";
  SynthTraceJobProducer.Sample discreteWeightsSample=mapper.readValue(discreteWeightsJson,SynthTraceJobProducer.Sample.class);
  discreteWeightsSample.init(rand);
  int discreteWeights=discreteWeightsSample.getInt();
  Assert.assertEquals(8,discreteWeights);
  String invalidJson="{\"val\" : 5, \"discrete\" : [2, 4, 6, 8], " + "\"weights\": [0, 0, 0, 1]}";
  try {
    mapper.readValue(invalidJson,SynthTraceJobProducer.Sample.class);
    Assert.fail();
  }
 catch (  JsonMappingException e) {
    Assert.assertTrue(e.getMessage().startsWith("Instantiation of"));
  }
  String invalidDistJson="{\"val\" : 5, \"std\" : 1, " + "\"dist\": \"INVALID\" }";
  try {
    mapper.readValue(invalidDistJson,SynthTraceJobProducer.Sample.class);
    Assert.fail();
  }
 catch (  JsonMappingException e) {
    Assert.assertTrue(e.getMessage().startsWith("Instantiation of"));
  }
}
