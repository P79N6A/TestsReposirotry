@Test public void testTargetConstraint(){
  AbstractConstraint sConstraintExpr=targetIn(NODE,allocationTag("hbase-m"));
  Assert.assertTrue(sConstraintExpr instanceof SingleConstraint);
  PlacementConstraint sConstraint=PlacementConstraints.build(sConstraintExpr);
  SpecializedConstraintTransformer specTransformer=new SpecializedConstraintTransformer(sConstraint);
  PlacementConstraint tConstraint=specTransformer.transform();
  AbstractConstraint tConstraintExpr=tConstraint.getConstraintExpr();
  Assert.assertTrue(tConstraintExpr instanceof TargetConstraint);
  SingleConstraint single=(SingleConstraint)sConstraintExpr;
  TargetConstraint target=(TargetConstraint)tConstraintExpr;
  Assert.assertEquals(single.toString(),target.toString());
  Assert.assertEquals(single.getScope(),target.getScope());
  Assert.assertEquals(TargetOperator.IN,target.getOp());
  Assert.assertEquals(single.getTargetExpressions(),target.getTargetExpressions());
  SingleConstraintTransformer singleTransformer=new SingleConstraintTransformer(tConstraint);
  sConstraint=singleTransformer.transform();
  sConstraintExpr=sConstraint.getConstraintExpr();
  Assert.assertTrue(sConstraintExpr instanceof SingleConstraint);
  single=(SingleConstraint)sConstraintExpr;
  Assert.assertEquals(target.getScope(),single.getScope());
  Assert.assertEquals(1,single.getMinCardinality());
  Assert.assertEquals(Integer.MAX_VALUE,single.getMaxCardinality());
  Assert.assertEquals(single.getTargetExpressions(),target.getTargetExpressions());
}
