@Test(timeout=100000) public void testShouldNotCountFailureToMaxAttemptRetry() throws Exception {
  getConf().setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
  getConf().setBoolean(YarnConfiguration.RECOVERY_ENABLED,true);
  getConf().set(YarnConfiguration.RM_STORE,MemoryRMStateStore.class.getName());
  MockRM rm1=new MockRM(getConf());
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",8000,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app1=rm1.submitApp(200);
  RMAppAttempt attempt1=app1.getCurrentAppAttempt();
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  AbstractYarnScheduler scheduler=(AbstractYarnScheduler)rm1.getResourceScheduler();
  ContainerId amContainer=ContainerId.newContainerId(am1.getApplicationAttemptId(),1);
  scheduler.killContainer(scheduler.getRMContainer(amContainer));
  rm1.waitForState(am1.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  TestSchedulerUtils.waitSchedulerApplicationAttemptStopped(scheduler,am1.getApplicationAttemptId());
  Assert.assertTrue(!attempt1.shouldCountTowardsMaxAttemptRetry());
  rm1.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  ApplicationStateData appState=((MemoryRMStateStore)rm1.getRMStateStore()).getState().getApplicationState().get(app1.getApplicationId());
  MockAM am2=rm1.waitForNewAMToLaunchAndRegister(app1.getApplicationId(),2,nm1);
  RMAppAttempt attempt2=app1.getCurrentAppAttempt();
  ContainerId amContainer2=ContainerId.newContainerId(am2.getApplicationAttemptId(),1);
  scheduler.killContainer(scheduler.getRMContainer(amContainer2));
  rm1.waitForState(am2.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  TestSchedulerUtils.waitSchedulerApplicationAttemptStopped(scheduler,am2.getApplicationAttemptId());
  Assert.assertTrue(!attempt2.shouldCountTowardsMaxAttemptRetry());
  rm1.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  MockAM am3=rm1.waitForNewAMToLaunchAndRegister(app1.getApplicationId(),3,nm1);
  RMAppAttempt attempt3=app1.getCurrentAppAttempt();
  ContainerStatus containerStatus=Records.newRecord(ContainerStatus.class);
  containerStatus.setContainerId(attempt3.getMasterContainer().getId());
  containerStatus.setDiagnostics("mimic NM disk_failure");
  containerStatus.setState(ContainerState.COMPLETE);
  containerStatus.setExitStatus(ContainerExitStatus.DISKS_FAILED);
  Map<ApplicationId,List<ContainerStatus>> conts=new HashMap<ApplicationId,List<ContainerStatus>>();
  conts.put(app1.getApplicationId(),Collections.singletonList(containerStatus));
  nm1.nodeHeartbeat(conts,true);
  rm1.waitForState(am3.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  TestSchedulerUtils.waitSchedulerApplicationAttemptStopped(scheduler,am3.getApplicationAttemptId());
  Assert.assertTrue(!attempt3.shouldCountTowardsMaxAttemptRetry());
  Assert.assertEquals(ContainerExitStatus.DISKS_FAILED,appState.getAttempt(am3.getApplicationAttemptId()).getAMContainerExitStatus());
  rm1.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  MockAM am4=rm1.waitForNewAMToLaunchAndRegister(app1.getApplicationId(),4,nm1);
  RMAppAttempt attempt4=app1.getCurrentAppAttempt();
  MockNM nm2=new MockNM("127.0.0.1:2234",8000,rm1.getResourceTrackerService());
  nm2.registerNode();
  nm1.nodeHeartbeat(false);
  rm1.waitForState(am4.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  TestSchedulerUtils.waitSchedulerApplicationAttemptStopped(scheduler,am4.getApplicationAttemptId());
  Assert.assertFalse(attempt4.shouldCountTowardsMaxAttemptRetry());
  Assert.assertEquals(ContainerExitStatus.ABORTED,appState.getAttempt(am4.getApplicationAttemptId()).getAMContainerExitStatus());
  MockAM am5=rm1.waitForNewAMToLaunchAndRegister(app1.getApplicationId(),5,nm2);
  RMAppAttempt attempt5=app1.getCurrentAppAttempt();
  nm2.nodeHeartbeat(am5.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  rm1.waitForState(am5.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  TestSchedulerUtils.waitSchedulerApplicationAttemptStopped(scheduler,am5.getApplicationAttemptId());
  Assert.assertTrue(attempt5.shouldCountTowardsMaxAttemptRetry());
  MockAM am6=rm1.waitForNewAMToLaunchAndRegister(app1.getApplicationId(),6,nm2);
  RMAppAttempt attempt6=app1.getCurrentAppAttempt();
  nm2.nodeHeartbeat(am6.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  rm1.waitForState(am6.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  TestSchedulerUtils.waitSchedulerApplicationAttemptStopped(scheduler,am6.getApplicationAttemptId());
  Assert.assertTrue(attempt6.shouldCountTowardsMaxAttemptRetry());
  rm1.waitForState(app1.getApplicationId(),RMAppState.FAILED);
  Assert.assertEquals(6,app1.getAppAttempts().size());
  rm1.stop();
}
