@Test public void testNodesBlockRenderForOpportunisticContainers(){
  final RMContext mockRMContext=TestRMWebApp.mockRMContext(3,numberOfRacks,numberOfNodesPerRack,8 * TestRMWebApp.GiB);
  mockRMContext.getYarnConfiguration().setBoolean(YarnConfiguration.OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED,true);
  injector=WebAppTests.createMockInjector(RMContext.class,mockRMContext,new Module(){
    @Override public void configure(    Binder binder){
      try {
        binder.bind(ResourceManager.class).toInstance(TestRMWebApp.mockRm(mockRMContext));
      }
 catch (      IOException e) {
        throw new IllegalStateException(e);
      }
    }
  }
);
  injector.getInstance(NodesBlock.class).render();
  PrintWriter writer=injector.getInstance(PrintWriter.class);
  WebAppTests.flushOutput(injector);
  Mockito.verify(writer,Mockito.times(numberOfActualTableHeaders + numberOfThInMetricsTable + numberOfThForOpportunisticContainers)).print("<th");
  Mockito.verify(writer,Mockito.times(numberOfThInMetricsTable)).print("<td");
}
