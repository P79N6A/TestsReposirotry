@Test public void testDistributedScheduler() throws Exception {
  Configuration conf=new Configuration();
  DistributedScheduler distributedScheduler=new DistributedScheduler();
  RequestInterceptor finalReqIntcptr=setup(conf,distributedScheduler);
  registerAM(distributedScheduler,finalReqIntcptr,Arrays.asList(RemoteNode.newInstance(NodeId.newInstance("a",1),"http://a:1"),RemoteNode.newInstance(NodeId.newInstance("b",2),"http://b:2"),RemoteNode.newInstance(NodeId.newInstance("c",3),"http://c:3"),RemoteNode.newInstance(NodeId.newInstance("d",4),"http://d:4")));
  final AtomicBoolean flipFlag=new AtomicBoolean(true);
  Mockito.when(finalReqIntcptr.allocateForDistributedScheduling(Mockito.any(DistributedSchedulingAllocateRequest.class))).thenAnswer(new Answer<DistributedSchedulingAllocateResponse>(){
    @Override public DistributedSchedulingAllocateResponse answer(    InvocationOnMock invocationOnMock) throws Throwable {
      flipFlag.set(!flipFlag.get());
      if (flipFlag.get()) {
        return createAllocateResponse(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance("c",3),"http://c:3"),RemoteNode.newInstance(NodeId.newInstance("d",4),"http://d:4"),RemoteNode.newInstance(NodeId.newInstance("e",5),"http://e:5"),RemoteNode.newInstance(NodeId.newInstance("f",6),"http://f:6")));
      }
 else {
        return createAllocateResponse(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance("f",6),"http://f:6"),RemoteNode.newInstance(NodeId.newInstance("e",5),"http://e:5"),RemoteNode.newInstance(NodeId.newInstance("d",4),"http://d:4"),RemoteNode.newInstance(NodeId.newInstance("c",3),"http://c:3")));
      }
    }
  }
);
  AllocateRequest allocateRequest=Records.newRecord(AllocateRequest.class);
  ResourceRequest guaranteedReq=createResourceRequest(ExecutionType.GUARANTEED,5,"*");
  ResourceRequest opportunisticReq=createResourceRequest(ExecutionType.OPPORTUNISTIC,4,"*");
  allocateRequest.setAskList(Arrays.asList(guaranteedReq,opportunisticReq));
  AllocateResponse allocateResponse=distributedScheduler.allocate(allocateRequest);
  Assert.assertEquals(4,allocateResponse.getAllocatedContainers().size());
  Map<NodeId,List<ContainerId>> allocs=mapAllocs(allocateResponse,4);
  Assert.assertEquals(1,allocs.get(NodeId.newInstance("a",1)).size());
  Assert.assertEquals(1,allocs.get(NodeId.newInstance("b",2)).size());
  Assert.assertEquals(1,allocs.get(NodeId.newInstance("c",3)).size());
  Assert.assertEquals(1,allocs.get(NodeId.newInstance("d",4)).size());
  Assert.assertNull(allocs.get(NodeId.newInstance("e",5)));
  Assert.assertNull(allocs.get(NodeId.newInstance("f",6)));
  allocateRequest=Records.newRecord(AllocateRequest.class);
  opportunisticReq=createResourceRequest(ExecutionType.OPPORTUNISTIC,4,"*");
  allocateRequest.setAskList(Arrays.asList(guaranteedReq,opportunisticReq));
  allocateResponse=distributedScheduler.allocate(allocateRequest);
  Assert.assertEquals(4,allocateResponse.getAllocatedContainers().size());
  allocs=mapAllocs(allocateResponse,4);
  Assert.assertEquals(1,allocs.get(NodeId.newInstance("c",3)).size());
  Assert.assertEquals(1,allocs.get(NodeId.newInstance("d",4)).size());
  Assert.assertEquals(1,allocs.get(NodeId.newInstance("e",5)).size());
  Assert.assertEquals(1,allocs.get(NodeId.newInstance("f",6)).size());
  Assert.assertNull(allocs.get(NodeId.newInstance("a",1)));
  Assert.assertNull(allocs.get(NodeId.newInstance("b",2)));
  allocateRequest=Records.newRecord(AllocateRequest.class);
  opportunisticReq=createResourceRequest(ExecutionType.OPPORTUNISTIC,1,"*");
  allocateRequest.setAskList(Arrays.asList(guaranteedReq,opportunisticReq));
  allocateResponse=distributedScheduler.allocate(allocateRequest);
  allocs=mapAllocs(allocateResponse,1);
  Assert.assertEquals(1,allocs.get(NodeId.newInstance("c",3)).size());
  allocateRequest=Records.newRecord(AllocateRequest.class);
  opportunisticReq=createResourceRequest(ExecutionType.OPPORTUNISTIC,1,"*");
  allocateRequest.setAskList(Arrays.asList(guaranteedReq,opportunisticReq));
  allocateResponse=distributedScheduler.allocate(allocateRequest);
  allocs=mapAllocs(allocateResponse,1);
  Assert.assertEquals(1,allocs.get(NodeId.newInstance("f",6)).size());
  allocateRequest=Records.newRecord(AllocateRequest.class);
  opportunisticReq=createResourceRequest(ExecutionType.OPPORTUNISTIC,1,"*");
  allocateRequest.setAskList(Arrays.asList(guaranteedReq,opportunisticReq));
  allocateResponse=distributedScheduler.allocate(allocateRequest);
  allocs=mapAllocs(allocateResponse,1);
  Assert.assertEquals(1,allocs.get(NodeId.newInstance("c",3)).size());
}
