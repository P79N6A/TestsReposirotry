/** 
 * Corrupt a block and ensure metrics reflects it 
 */
@Test public void testCorruptBlock() throws Exception {
  final Path file=getTestPath("testCorruptBlock");
  final short replicaCount=2;
  createFile(file,100,replicaCount);
  DFSTestUtil.waitForReplication(fs,file,replicaCount,15000);
  for (  DataNode dn : cluster.getDataNodes()) {
    DataNodeTestUtils.setHeartbeatsDisabledForTests(dn,true);
  }
  verifyZeroMetrics();
  verifyAggregatedMetricsTally();
  LocatedBlock block=NameNodeAdapter.getBlockLocations(cluster.getNameNode(),file.toString(),0,1).get(0);
  cluster.getNamesystem().writeLock();
  try {
    bm.findAndMarkBlockAsCorrupt(block.getBlock(),block.getLocations()[0],"STORAGE_ID","TEST");
  }
  finally {
    cluster.getNamesystem().writeUnlock();
  }
  BlockManagerTestUtil.updateState(bm);
  MetricsRecordBuilder rb=waitForDnMetricValue(NS_METRICS,"CorruptBlocks",1L,500);
  assertGauge("LowRedundancyBlocks",1L,rb);
  assertGauge("PendingReplicationBlocks",0L,rb);
  assertGauge("PendingReconstructionBlocks",0L,rb);
  assertGauge("LowRedundancyReplicatedBlocks",1L,rb);
  assertGauge("CorruptReplicatedBlocks",1L,rb);
  assertGauge("HighestPriorityLowRedundancyReplicatedBlocks",1L,rb);
  assertGauge("LowRedundancyECBlockGroups",0L,rb);
  assertGauge("CorruptECBlockGroups",0L,rb);
  assertGauge("HighestPriorityLowRedundancyECBlocks",0L,rb);
  verifyAggregatedMetricsTally();
  for (  DataNode dn : cluster.getDataNodes()) {
    DataNodeTestUtils.setHeartbeatsDisabledForTests(dn,false);
  }
  BlockManagerTestUtil.getComputedDatanodeWork(bm);
  BlockManagerTestUtil.updateState(bm);
  DFSTestUtil.waitForReplication(fs,file,replicaCount,30000);
  rb=waitForDnMetricValue(NS_METRICS,"CorruptBlocks",0L,500);
  assertGauge("LowRedundancyBlocks",0L,rb);
  assertGauge("CorruptBlocks",0L,rb);
  assertGauge("PendingReplicationBlocks",0L,rb);
  assertGauge("PendingReconstructionBlocks",0L,rb);
  assertGauge("LowRedundancyReplicatedBlocks",0L,rb);
  assertGauge("CorruptReplicatedBlocks",0L,rb);
  assertGauge("HighestPriorityLowRedundancyReplicatedBlocks",0L,rb);
  assertGauge("LowRedundancyECBlockGroups",0L,rb);
  assertGauge("CorruptECBlockGroups",0L,rb);
  assertGauge("HighestPriorityLowRedundancyECBlocks",0L,rb);
  verifyAggregatedMetricsTally();
  fs.delete(file,true);
  BlockManagerTestUtil.getComputedDatanodeWork(bm);
  BlockManagerTestUtil.updateState(bm);
  waitForDnMetricValue(NS_METRICS,"CorruptBlocks",0L,500);
  verifyZeroMetrics();
  verifyAggregatedMetricsTally();
}
