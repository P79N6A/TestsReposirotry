@Test public void testStaticFileLocalization() throws IOException {
  ContainerLaunchService.ComponentLaunchContext compLaunchCtx=mock(ContainerLaunchService.ComponentLaunchContext.class);
  AbstractLauncher launcher=mock(AbstractLauncher.class);
  SliderFileSystem sfs=mock(SliderFileSystem.class);
  FileSystem fs=mock(FileSystem.class);
  when(fs.getFileStatus(any(Path.class))).thenAnswer(invocationOnMock -> new FileStatus(1L,false,1,1L,1L,(Path)invocationOnMock.getArguments()[0]));
  when(fs.exists(any(Path.class))).thenReturn(true);
  when(sfs.getFileSystem()).thenReturn(fs);
  Configuration conf=mock(Configuration.class);
  List<ConfigFile> configFileList=new ArrayList<>();
  when(conf.getFiles()).thenReturn(configFileList);
  when(compLaunchCtx.getConfiguration()).thenReturn(conf);
  when(sfs.createAmResource(any(Path.class),any(LocalResourceType.class))).thenAnswer(invocationOnMock -> new LocalResource(){
    @Override public URL getResource(){
      return URL.fromPath(((Path)invocationOnMock.getArguments()[0]));
    }
    @Override public void setResource(    URL resource){
    }
    @Override public long getSize(){
      return 0;
    }
    @Override public void setSize(    long size){
    }
    @Override public long getTimestamp(){
      return 0;
    }
    @Override public void setTimestamp(    long timestamp){
    }
    @Override public LocalResourceType getType(){
      return (LocalResourceType)invocationOnMock.getArguments()[1];
    }
    @Override public void setType(    LocalResourceType type){
    }
    @Override public LocalResourceVisibility getVisibility(){
      return null;
    }
    @Override public void setVisibility(    LocalResourceVisibility visibility){
    }
    @Override public String getPattern(){
      return null;
    }
    @Override public void setPattern(    String pattern){
    }
    @Override public boolean getShouldBeUploadedToSharedCache(){
      return false;
    }
    @Override public void setShouldBeUploadedToSharedCache(    boolean shouldBeUploadedToSharedCache){
    }
  }
);
  configFileList.add(new ConfigFile().srcFile("hdfs://default/sourceFile1").destFile("destFile1").type(ConfigFile.TypeEnum.ARCHIVE));
  configFileList.add(new ConfigFile().srcFile("hdfs://default/sourceFile2").destFile("folder/destFile_2").type(ConfigFile.TypeEnum.STATIC));
  configFileList.add(new ConfigFile().srcFile("hdfs://default/sourceFile3").destFile("destFile3").type(ConfigFile.TypeEnum.JSON));
  configFileList.add(new ConfigFile().srcFile("hdfs://default/sourceFile4").type(ConfigFile.TypeEnum.STATIC));
  ProviderUtils.handleStaticFilesForLocalization(launcher,sfs,compLaunchCtx);
  Mockito.verify(launcher).addLocalResource(Mockito.eq("destFile1"),any(LocalResource.class));
  Mockito.verify(launcher).addLocalResource(Mockito.eq("destFile_2"),any(LocalResource.class));
  Mockito.verify(launcher).addLocalResource(Mockito.eq("sourceFile4"),any(LocalResource.class));
}
