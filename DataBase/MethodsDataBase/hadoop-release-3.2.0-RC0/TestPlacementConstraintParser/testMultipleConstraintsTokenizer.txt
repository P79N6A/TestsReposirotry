@Test public void testMultipleConstraintsTokenizer() throws PlacementConstraintParseException {
  MultipleConstraintsTokenizer ct;
  SourceTagsTokenizer st;
  TokenizerTester mp;
  ct=new MultipleConstraintsTokenizer("foo=1,A1,A2,A3:bar=2,B1,B2:moo=3,C1,C2");
  mp=new TokenizerTester(ct,"foo=1,A1,A2,A3","bar=2,B1,B2","moo=3,C1,C2");
  mp.verify();
  ct=new MultipleConstraintsTokenizer("foo=1,AND(A2:A3):bar=2,OR(B1:AND(B2:B3)):moo=3,C1,C2");
  mp=new TokenizerTester(ct,"foo=1,AND(A2:A3)","bar=2,OR(B1:AND(B2:B3))","moo=3,C1,C2");
  mp.verify();
  ct=new MultipleConstraintsTokenizer("A:B:C");
  mp=new TokenizerTester(ct,"A","B","C");
  mp.verify();
  ct=new MultipleConstraintsTokenizer("A:AND(B:C):D");
  mp=new TokenizerTester(ct,"A","AND(B:C)","D");
  mp.verify();
  ct=new MultipleConstraintsTokenizer("A:AND(B:OR(C:D)):E");
  mp=new TokenizerTester(ct,"A","AND(B:OR(C:D))","E");
  mp.verify();
  ct=new MultipleConstraintsTokenizer("A:AND(B:OR(C:D)):E");
  mp=new TokenizerTester(ct,"A","AND(B:OR(C:D))","E");
  mp.verify();
  st=new SourceTagsTokenizer("A=4");
  mp=new TokenizerTester(st,"A","4");
  mp.verify();
  try {
    st=new SourceTagsTokenizer("A=B");
    mp=new TokenizerTester(st,"A","B");
    mp.verify();
    Assert.fail("Expecting a parsing failure");
  }
 catch (  PlacementConstraintParseException e) {
    Assert.assertTrue(e.getMessage().contains("Value of the expression must be an integer"));
  }
}
