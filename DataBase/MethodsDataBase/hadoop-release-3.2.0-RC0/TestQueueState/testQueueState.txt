@Test(timeout=15000) public void testQueueState() throws IOException {
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  csConf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{Q1});
  csConf.setQueues(Q1_PATH,new String[]{Q2});
  csConf.setCapacity(Q1_PATH,100);
  csConf.setCapacity(Q2_PATH,100);
  conf=new YarnConfiguration(csConf);
  cs=new CapacityScheduler();
  RMContext rmContext=TestUtils.getMockRMContext();
  cs.setConf(conf);
  cs.setRMContext(rmContext);
  cs.init(conf);
  Assert.assertEquals(QueueState.RUNNING,cs.getQueue(Q1).getState());
  Assert.assertEquals(QueueState.RUNNING,cs.getQueue(Q2).getState());
  csConf.setState(Q1_PATH,QueueState.STOPPED);
  conf=new YarnConfiguration(csConf);
  cs.reinitialize(conf,rmContext);
  Assert.assertEquals(QueueState.STOPPED,cs.getQueue(Q1).getState());
  Assert.assertEquals(QueueState.STOPPED,cs.getQueue(Q2).getState());
  csConf.setState(Q1_PATH,QueueState.RUNNING);
  csConf.setState(Q2_PATH,QueueState.STOPPED);
  conf=new YarnConfiguration(csConf);
  cs.reinitialize(conf,rmContext);
  Assert.assertEquals(QueueState.RUNNING,cs.getQueue(Q1).getState());
  Assert.assertEquals(QueueState.STOPPED,cs.getQueue(Q2).getState());
  csConf.setState(Q1_PATH,QueueState.STOPPED);
  csConf.setState(Q2_PATH,QueueState.RUNNING);
  conf=new YarnConfiguration(csConf);
  try {
    cs.reinitialize(conf,rmContext);
    Assert.fail("Should throw an Exception.");
  }
 catch (  Exception ex) {
    Assert.assertTrue(ex.getCause().getMessage().contains("The parent queue:q1 state is STOPPED, " + "child queue:q2 state cannot be RUNNING."));
  }
}
