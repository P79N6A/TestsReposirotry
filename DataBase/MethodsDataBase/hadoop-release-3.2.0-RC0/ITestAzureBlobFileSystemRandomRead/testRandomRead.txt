/** 
 * Validates the implementation of random read in ABFS
 * @throws IOException
 */
@Test public void testRandomRead() throws Exception {
  assumeHugeFileExists();
  try (FSDataInputStream inputStreamV1=this.getFileSystem().open(TEST_FILE_PATH);FSDataInputStream inputStreamV2=this.getWasbFileSystem().open(TEST_FILE_PATH)){
    final int bufferSize=4 * KILOBYTE;
    byte[] bufferV1=new byte[bufferSize];
    byte[] bufferV2=new byte[bufferV1.length];
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    inputStreamV1.seek(0);
    inputStreamV2.seek(0);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    inputStreamV1.seek(SEEK_POSITION_ONE);
    inputStreamV2.seek(SEEK_POSITION_ONE);
    inputStreamV1.seek(0);
    inputStreamV2.seek(0);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    inputStreamV1.seek(SEEK_POSITION_TWO);
    inputStreamV2.seek(SEEK_POSITION_TWO);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    inputStreamV1.seek(SEEK_POSITION_THREE);
    inputStreamV2.seek(SEEK_POSITION_THREE);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    inputStreamV1.seek(SEEK_POSITION_FOUR);
    inputStreamV2.seek(SEEK_POSITION_FOUR);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
  }
 }
