/** 
 * Test open files under snapshot directories are getting captured in snapshots as a truly immutable copy. Verify open files outside of snapshot directory not getting affected. \- level_0_A \- level_1_C +- appA.log         (open file, not under snap root) \- level_2_E        (Snapshottable Dir) \- level_3_G +- flume.log    (open file, under snap root) \- level_0_B +- appB.log         (open file, not under snap root) \- level_2_D        (Snapshottable Dir) +- hbase.log      (open file, under snap root)
 */
@Test(timeout=120000) public void testPointInTimeSnapshotCopiesForOpenFiles() throws Exception {
  final Path level0A=new Path("/level_0_A");
  final Path level0B=new Path("/level_0_B");
  final Path level1C=new Path(level0A,"level_1_C");
  final Path level1D=new Path(level0B,"level_1_D");
  final Path level2E=new Path(level1C,"level_2_E");
  final Path level3G=new Path(level2E,"level_3_G");
  Set<Path> dirPaths=new HashSet<>(Arrays.asList(level0A,level0B,level1C,level1D,level2E,level3G));
  for (  Path dirPath : dirPaths) {
    fs.mkdirs(dirPath);
  }
  final Path flumeSnapRootDir=level2E;
  final Path hbaseSnapRootDir=level1D;
  final String flumeFileName="flume.log";
  final String hbaseFileName="hbase.log";
  final String appAFileName="appA.log";
  final String appBFileName="appB.log";
  final String flumeSnap1Name="flume_snap_s1";
  final String flumeSnap2Name="flume_snap_s2";
  final String flumeSnap3Name="flume_snap_s3";
  final String hbaseSnap1Name="hbase_snap_s1";
  final String hbaseSnap2Name="hbase_snap_s2";
  final String hbaseSnap3Name="hbase_snap_s3";
  final String flumeRelPathFromSnapDir="level_3_G/" + flumeFileName;
  final Path flumeFile=new Path(level3G,flumeFileName);
  createFile(flumeFile);
  FSDataOutputStream flumeOutputStream=fs.append(flumeFile);
  final Path hbaseFile=new Path(level1D,hbaseFileName);
  createFile(hbaseFile);
  FSDataOutputStream hbaseOutputStream=fs.append(hbaseFile);
  final Path appAFile=new Path(level1C,appAFileName);
  createFile(appAFile);
  FSDataOutputStream appAOutputStream=fs.append(appAFile);
  final Path appBFile=new Path(level0B,appBFileName);
  createFile(appBFile);
  FSDataOutputStream appBOutputStream=fs.append(appBFile);
  final long appAFileInitialLength=fs.getFileStatus(appAFile).getLen();
  final long appBFileInitialLength=fs.getFileStatus(appBFile).getLen();
  final Path flumeS1Dir=SnapshotTestHelper.createSnapshot(fs,flumeSnapRootDir,flumeSnap1Name);
  final Path flumeS1Path=new Path(flumeS1Dir,flumeRelPathFromSnapDir);
  final Path hbaseS1Dir=SnapshotTestHelper.createSnapshot(fs,hbaseSnapRootDir,hbaseSnap1Name);
  final Path hbaseS1Path=new Path(hbaseS1Dir,hbaseFileName);
  final long flumeFileLengthAfterS1=fs.getFileStatus(flumeFile).getLen();
  final long hbaseFileLengthAfterS1=fs.getFileStatus(hbaseFile).getLen();
  Assert.assertEquals(flumeFileLengthAfterS1,fs.getFileStatus(flumeS1Path).getLen());
  Assert.assertEquals(hbaseFileLengthAfterS1,fs.getFileStatus(hbaseS1Path).getLen());
  Assert.assertEquals(appAFileInitialLength,fs.getFileStatus(appAFile).getLen());
  Assert.assertEquals(appBFileInitialLength,fs.getFileStatus(appBFile).getLen());
  long flumeFileWrittenDataLength=flumeFileLengthAfterS1;
  long hbaseFileWrittenDataLength=hbaseFileLengthAfterS1;
  long appAFileWrittenDataLength=appAFileInitialLength;
  int newWriteLength=(int)(BLOCKSIZE * 1.5);
  byte[] buf=new byte[newWriteLength];
  Random random=new Random();
  random.nextBytes(buf);
  flumeFileWrittenDataLength+=writeToStream(flumeOutputStream,buf);
  hbaseFileWrittenDataLength+=writeToStream(hbaseOutputStream,buf);
  final Path flumeS2Dir=SnapshotTestHelper.createSnapshot(fs,flumeSnapRootDir,flumeSnap2Name);
  final Path flumeS2Path=new Path(flumeS2Dir,flumeRelPathFromSnapDir);
  final Path hbaseS2Dir=SnapshotTestHelper.createSnapshot(fs,hbaseSnapRootDir,hbaseSnap2Name);
  final Path hbaseS2Path=new Path(hbaseS2Dir,hbaseFileName);
  final long flumeFileLengthAfterS2=fs.getFileStatus(flumeFile).getLen();
  final long hbaseFileLengthAfterS2=fs.getFileStatus(hbaseFile).getLen();
  Assert.assertEquals(flumeFileWrittenDataLength,flumeFileLengthAfterS2);
  Assert.assertEquals(hbaseFileWrittenDataLength,hbaseFileLengthAfterS2);
  Assert.assertEquals(flumeFileLengthAfterS2,fs.getFileStatus(flumeS2Path).getLen());
  Assert.assertEquals(hbaseFileLengthAfterS2,fs.getFileStatus(hbaseS2Path).getLen());
  Assert.assertEquals(appAFileInitialLength,fs.getFileStatus(appAFile).getLen());
  Assert.assertEquals(appBFileInitialLength,fs.getFileStatus(appBFile).getLen());
  newWriteLength=(int)(BLOCKSIZE * 2.5);
  buf=new byte[newWriteLength];
  random.nextBytes(buf);
  appAFileWrittenDataLength+=writeToStream(appAOutputStream,buf);
  Assert.assertEquals(flumeFileLengthAfterS2,fs.getFileStatus(flumeS2Path).getLen());
  Assert.assertEquals(appAFileWrittenDataLength,fs.getFileStatus(appAFile).getLen());
  newWriteLength=(int)(BLOCKSIZE * 2.5);
  buf=new byte[newWriteLength];
  random.nextBytes(buf);
  flumeFileWrittenDataLength+=writeToStream(flumeOutputStream,buf);
  final Path flumeS3Dir=SnapshotTestHelper.createSnapshot(fs,flumeSnapRootDir,flumeSnap3Name);
  final Path flumeS3Path=new Path(flumeS3Dir,flumeRelPathFromSnapDir);
  final Path hbaseS3Dir=SnapshotTestHelper.createSnapshot(fs,hbaseSnapRootDir,hbaseSnap3Name);
  final Path hbaseS3Path=new Path(hbaseS3Dir,hbaseFileName);
  final long flumeFileLengthAfterS3=fs.getFileStatus(flumeFile).getLen();
  final long hbaseFileLengthAfterS3=fs.getFileStatus(hbaseFile).getLen();
  Assert.assertEquals(flumeFileWrittenDataLength,flumeFileLengthAfterS3);
  Assert.assertEquals(hbaseFileWrittenDataLength,hbaseFileLengthAfterS3);
  Assert.assertEquals(flumeFileLengthAfterS3,fs.getFileStatus(flumeS3Path).getLen());
  Assert.assertEquals(hbaseFileLengthAfterS3,fs.getFileStatus(hbaseS3Path).getLen());
  Assert.assertEquals(appAFileWrittenDataLength,fs.getFileStatus(appAFile).getLen());
  Assert.assertEquals(appBFileInitialLength,fs.getFileStatus(appBFile).getLen());
  Assert.assertEquals(flumeFileLengthAfterS1,fs.getFileStatus(flumeS1Path).getLen());
  Assert.assertEquals(flumeFileLengthAfterS2,fs.getFileStatus(flumeS2Path).getLen());
  Assert.assertEquals(flumeFileLengthAfterS3,fs.getFileStatus(flumeS3Path).getLen());
  Assert.assertEquals(hbaseFileLengthAfterS1,fs.getFileStatus(hbaseS1Path).getLen());
  Assert.assertEquals(hbaseFileLengthAfterS2,fs.getFileStatus(hbaseS2Path).getLen());
  Assert.assertEquals(hbaseFileLengthAfterS3,fs.getFileStatus(hbaseS3Path).getLen());
  flumeOutputStream.close();
  hbaseOutputStream.close();
  appAOutputStream.close();
  appBOutputStream.close();
}
