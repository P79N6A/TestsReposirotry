/** 
 * Test snapshot capturing open files when an open file with active lease is deleted by the client.
 */
@Test(timeout=120000) public void testSnapshotsForOpenFilesAndDeletion() throws Exception {
  final Path snapRootDir=new Path("/level_0_A");
  final String flumeFileName="flume.log";
  final String hbaseFileName="hbase.log";
  final String snap1Name="snap_1";
  final String snap2Name="snap_2";
  final String snap3Name="snap_3";
  final Path flumeFile=new Path(snapRootDir,flumeFileName);
  createFile(flumeFile);
  final Path hbaseFile=new Path(snapRootDir,hbaseFileName);
  createFile(hbaseFile);
  FSDataOutputStream flumeOutputStream=fs.append(flumeFile);
  FSDataOutputStream hbaseOutputStream=fs.append(hbaseFile);
  final Path snap1Dir=SnapshotTestHelper.createSnapshot(fs,snapRootDir,snap1Name);
  final Path flumeS1Path=new Path(snap1Dir,flumeFileName);
  final long flumeFileLengthAfterS1=fs.getFileStatus(flumeFile).getLen();
  final Path hbaseS1Path=new Path(snap1Dir,hbaseFileName);
  final long hbaseFileLengthAfterS1=fs.getFileStatus(hbaseFile).getLen();
  Assert.assertEquals(flumeFileLengthAfterS1,fs.getFileStatus(flumeS1Path).getLen());
  Assert.assertEquals(hbaseFileLengthAfterS1,fs.getFileStatus(hbaseS1Path).getLen());
  long flumeFileWrittenDataLength=flumeFileLengthAfterS1;
  long hbaseFileWrittenDataLength=hbaseFileLengthAfterS1;
  int newWriteLength=(int)(BLOCKSIZE * 1.5);
  byte[] buf=new byte[newWriteLength];
  Random random=new Random();
  random.nextBytes(buf);
  flumeFileWrittenDataLength+=writeToStream(flumeOutputStream,buf);
  hbaseFileWrittenDataLength+=writeToStream(hbaseOutputStream,buf);
  final Path snap2Dir=SnapshotTestHelper.createSnapshot(fs,snapRootDir,snap2Name);
  final Path flumeS2Path=new Path(snap2Dir,flumeFileName);
  final Path hbaseS2Path=new Path(snap2Dir,hbaseFileName);
  final long flumeFileLengthAfterS2=fs.getFileStatus(flumeFile).getLen();
  Assert.assertEquals(flumeFileWrittenDataLength,flumeFileLengthAfterS2);
  final long hbaseFileLengthAfterS2=fs.getFileStatus(hbaseFile).getLen();
  Assert.assertEquals(hbaseFileWrittenDataLength,hbaseFileLengthAfterS2);
  Assert.assertEquals(flumeFileLengthAfterS2,fs.getFileStatus(flumeS2Path).getLen());
  Assert.assertEquals(hbaseFileLengthAfterS2,fs.getFileStatus(hbaseS2Path).getLen());
  writeToStream(flumeOutputStream,buf);
  hbaseFileWrittenDataLength+=writeToStream(hbaseOutputStream,buf);
  Assert.assertEquals(flumeFileLengthAfterS1,fs.getFileStatus(flumeS1Path).getLen());
  Assert.assertEquals(flumeFileLengthAfterS2,fs.getFileStatus(flumeS2Path).getLen());
  Assert.assertEquals(hbaseFileLengthAfterS1,fs.getFileStatus(hbaseS1Path).getLen());
  Assert.assertEquals(hbaseFileLengthAfterS2,fs.getFileStatus(hbaseS2Path).getLen());
  boolean flumeFileDeleted=fs.delete(flumeFile,true);
  Assert.assertTrue(flumeFileDeleted);
  Assert.assertFalse(fs.exists(flumeFile));
  Assert.assertTrue(fs.exists(flumeS1Path));
  Assert.assertTrue(fs.exists(flumeS2Path));
  SnapshotTestHelper.createSnapshot(fs,snapRootDir,"tmp_snap");
  fs.deleteSnapshot(snapRootDir,"tmp_snap");
  fs.deleteSnapshot(snapRootDir,snap2Name);
  Assert.assertFalse(fs.exists(flumeS2Path));
  Assert.assertTrue(fs.exists(flumeS1Path));
  fs.deleteSnapshot(snapRootDir,snap1Name);
  Assert.assertFalse(fs.exists(flumeS2Path));
  Assert.assertFalse(fs.exists(flumeS1Path));
  final Path snap3Dir=SnapshotTestHelper.createSnapshot(fs,snapRootDir,snap3Name);
  final Path hbaseS3Path=new Path(snap3Dir,hbaseFileName);
  final long hbaseFileLengthAfterS3=fs.getFileStatus(hbaseFile).getLen();
  Assert.assertEquals(hbaseFileWrittenDataLength,hbaseFileLengthAfterS3);
  hbaseFileWrittenDataLength+=writeToStream(hbaseOutputStream,buf);
  Assert.assertEquals(hbaseFileLengthAfterS3,fs.getFileStatus(hbaseS3Path).getLen());
  Assert.assertEquals(hbaseFileWrittenDataLength,fs.getFileStatus(hbaseFile).getLen());
  hbaseOutputStream.close();
}
