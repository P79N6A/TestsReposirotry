@Test public void testNodeHeartbeatWithNodeAttributes() throws Exception {
  writeToHostsFile("host2");
  Configuration conf=new Configuration();
  conf.set(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,hostFile.getAbsolutePath());
  conf.setClass(YarnConfiguration.FS_NODE_ATTRIBUTE_STORE_IMPL_CLASS,FileSystemNodeAttributeStore.class,NodeAttributeStore.class);
  File tempDir=File.createTempFile("nattr",".tmp");
  tempDir.delete();
  tempDir.mkdirs();
  tempDir.deleteOnExit();
  conf.set(YarnConfiguration.FS_NODE_ATTRIBUTE_STORE_ROOT_DIR,tempDir.getAbsolutePath());
  rm=new MockRM(conf);
  rm.start();
  ResourceTrackerService resourceTrackerService=rm.getResourceTrackerService();
  RegisterNodeManagerRequest registerReq=Records.newRecord(RegisterNodeManagerRequest.class);
  NodeId nodeId=NodeId.newInstance("host2",1234);
  Resource capability=BuilderUtils.newResource(1024,1);
  registerReq.setResource(capability);
  registerReq.setNodeId(nodeId);
  registerReq.setHttpPort(1234);
  registerReq.setNMVersion(YarnVersionInfo.getVersion());
  RegisterNodeManagerResponse registerResponse=resourceTrackerService.registerNodeManager(registerReq);
  Set<NodeAttribute> nodeAttributes=new HashSet<>();
  nodeAttributes.add(NodeAttribute.newInstance(NodeAttribute.PREFIX_DISTRIBUTED,"host",NodeAttributeType.STRING,"host2"));
  NodeHeartbeatRequest heartbeatReq=Records.newRecord(NodeHeartbeatRequest.class);
  NodeStatus nodeStatusObject=getNodeStatusObject(nodeId);
  int responseId=nodeStatusObject.getResponseId();
  heartbeatReq.setNodeStatus(nodeStatusObject);
  heartbeatReq.setLastKnownNMTokenMasterKey(registerResponse.getNMTokenMasterKey());
  heartbeatReq.setLastKnownContainerTokenMasterKey(registerResponse.getContainerTokenMasterKey());
  heartbeatReq.setNodeAttributes(nodeAttributes);
  resourceTrackerService.nodeHeartbeat(heartbeatReq);
  NodeAttributesManager attributeManager=rm.getRMContext().getNodeAttributesManager();
  Map<NodeAttribute,AttributeValue> attrs=attributeManager.getAttributesForNode(nodeId.getHost());
  Assert.assertEquals(1,attrs.size());
  NodeAttribute na=attrs.keySet().iterator().next();
  Assert.assertEquals("host",na.getAttributeKey().getAttributeName());
  Assert.assertEquals("host2",na.getAttributeValue());
  Assert.assertEquals(NodeAttributeType.STRING,na.getAttributeType());
  nodeAttributes.clear();
  nodeAttributes.add(NodeAttribute.newInstance(NodeAttribute.PREFIX_DISTRIBUTED,"host",NodeAttributeType.STRING,"host3"));
  nodeStatusObject=getNodeStatusObject(nodeId);
  nodeStatusObject.setResponseId(++responseId);
  heartbeatReq.setNodeStatus(nodeStatusObject);
  heartbeatReq.setNodeAttributes(nodeAttributes);
  resourceTrackerService.nodeHeartbeat(heartbeatReq);
  attrs=attributeManager.getAttributesForNode(nodeId.getHost());
  Assert.assertEquals(1,attrs.size());
  na=attrs.keySet().iterator().next();
  Assert.assertEquals("host",na.getAttributeKey().getAttributeName());
  Assert.assertEquals("host3",na.getAttributeValue());
  Assert.assertEquals(NodeAttributeType.STRING,na.getAttributeType());
}
