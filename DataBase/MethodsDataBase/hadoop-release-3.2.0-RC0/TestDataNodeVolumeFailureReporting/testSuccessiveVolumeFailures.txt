/** 
 * Test that individual volume failures do not cause DNs to fail, that all volumes failed on a single datanode do cause it to fail, and that the capacities and liveliness is adjusted correctly in the NN.
 */
@Test public void testSuccessiveVolumeFailures() throws Exception {
  cluster.startDataNodes(conf,2,true,null,null);
  cluster.waitActive();
  Thread.sleep(WAIT_FOR_HEARTBEATS);
  final DatanodeManager dm=cluster.getNamesystem().getBlockManager().getDatanodeManager();
  final long origCapacity=DFSTestUtil.getLiveDatanodeCapacity(dm);
  long dnCapacity=DFSTestUtil.getDatanodeCapacity(dm,0);
  File dn1Vol1=cluster.getInstanceStorageDir(0,0);
  File dn2Vol1=cluster.getInstanceStorageDir(1,0);
  File dn3Vol1=cluster.getInstanceStorageDir(2,0);
  File dn3Vol2=cluster.getInstanceStorageDir(2,1);
  DataNodeTestUtils.injectDataDirFailure(dn1Vol1,dn2Vol1);
  Path file1=new Path("/test1");
  DFSTestUtil.createFile(fs,file1,1024,(short)3,1L);
  DFSTestUtil.waitReplication(fs,file1,(short)3);
  ArrayList<DataNode> dns=cluster.getDataNodes();
  assertTrue("DN1 should be up",dns.get(0).isDatanodeUp());
  assertTrue("DN2 should be up",dns.get(1).isDatanodeUp());
  assertTrue("DN3 should be up",dns.get(2).isDatanodeUp());
  checkFailuresAtDataNode(dns.get(0),1,true,dn1Vol1.getAbsolutePath());
  checkFailuresAtDataNode(dns.get(1),1,true,dn2Vol1.getAbsolutePath());
  checkFailuresAtDataNode(dns.get(2),0,true);
  assert (WAIT_FOR_HEARTBEATS * 10) > WAIT_FOR_DEATH;
  DFSTestUtil.waitForDatanodeStatus(dm,3,0,2,origCapacity - (1 * dnCapacity),WAIT_FOR_HEARTBEATS);
  checkAggregateFailuresAtNameNode(true,2);
  checkFailuresAtNameNode(dm,dns.get(0),true,dn1Vol1.getAbsolutePath());
  checkFailuresAtNameNode(dm,dns.get(1),true,dn2Vol1.getAbsolutePath());
  checkFailuresAtNameNode(dm,dns.get(2),true);
  DataNodeTestUtils.injectDataDirFailure(dn3Vol1);
  Path file2=new Path("/test2");
  DFSTestUtil.createFile(fs,file2,1024,(short)3,1L);
  DFSTestUtil.waitReplication(fs,file2,(short)3);
  assertTrue("DN3 should still be up",dns.get(2).isDatanodeUp());
  checkFailuresAtDataNode(dns.get(2),1,true,dn3Vol1.getAbsolutePath());
  DataNodeTestUtils.triggerHeartbeat(dns.get(2));
  checkFailuresAtNameNode(dm,dns.get(2),true,dn3Vol1.getAbsolutePath());
  dnCapacity=DFSTestUtil.getDatanodeCapacity(dm,0);
  DFSTestUtil.waitForDatanodeStatus(dm,3,0,3,origCapacity - (3 * dnCapacity),WAIT_FOR_HEARTBEATS);
  checkAggregateFailuresAtNameNode(true,3);
  checkFailuresAtNameNode(dm,dns.get(0),true,dn1Vol1.getAbsolutePath());
  checkFailuresAtNameNode(dm,dns.get(1),true,dn2Vol1.getAbsolutePath());
  checkFailuresAtNameNode(dm,dns.get(2),true,dn3Vol1.getAbsolutePath());
  DataNodeTestUtils.injectDataDirFailure(dn3Vol2);
  Path file3=new Path("/test3");
  DFSTestUtil.createFile(fs,file3,1024,(short)3,1L);
  DFSTestUtil.waitReplication(fs,file3,(short)2);
  checkFailuresAtDataNode(dns.get(2),2,true,dn3Vol1.getAbsolutePath(),dn3Vol2.getAbsolutePath());
  DFSTestUtil.waitForDatanodeDeath(dns.get(2));
  DFSTestUtil.waitForDatanodeStatus(dm,2,1,2,origCapacity - (4 * dnCapacity),WAIT_FOR_HEARTBEATS);
  checkAggregateFailuresAtNameNode(true,2);
  checkFailuresAtNameNode(dm,dns.get(0),true,dn1Vol1.getAbsolutePath());
  checkFailuresAtNameNode(dm,dns.get(1),true,dn2Vol1.getAbsolutePath());
  DataNodeTestUtils.restoreDataDirFromFailure(dn1Vol1,dn2Vol1,dn3Vol1,dn3Vol2);
  cluster.restartDataNodes();
  cluster.waitActive();
  Path file4=new Path("/test4");
  DFSTestUtil.createFile(fs,file4,1024,(short)3,1L);
  DFSTestUtil.waitReplication(fs,file4,(short)3);
  DFSTestUtil.waitForDatanodeStatus(dm,3,0,0,origCapacity,WAIT_FOR_HEARTBEATS);
  checkAggregateFailuresAtNameNode(true,0);
  dns=cluster.getDataNodes();
  checkFailuresAtNameNode(dm,dns.get(0),true);
  checkFailuresAtNameNode(dm,dns.get(1),true);
  checkFailuresAtNameNode(dm,dns.get(2),true);
}
