/** 
 * Verify DataNode NumFailedVolumes and FailedStorageLocations after hot swap out of failed volume.
 */
@Test public void testHotSwapOutFailedVolumeAndReporting() throws Exception {
  final File dn0Vol1=cluster.getInstanceStorageDir(0,0);
  final File dn0Vol2=cluster.getInstanceStorageDir(0,1);
  final DataNode dn0=cluster.getDataNodes().get(0);
  final String oldDataDirs=dn0.getConf().get(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY);
  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
  ObjectName mxbeanName=new ObjectName("Hadoop:service=DataNode,name=FSDatasetState-" + dn0.getDatanodeUuid());
  int numFailedVolumes=(int)mbs.getAttribute(mxbeanName,"NumFailedVolumes");
  Assert.assertEquals(dn0.getFSDataset().getNumFailedVolumes(),numFailedVolumes);
  checkFailuresAtDataNode(dn0,0,false,new String[]{});
  DataNodeTestUtils.injectDataDirFailure(dn0Vol1);
  DataNodeTestUtils.waitForDiskError(dn0,DataNodeTestUtils.getVolume(dn0,dn0Vol1));
  numFailedVolumes=(int)mbs.getAttribute(mxbeanName,"NumFailedVolumes");
  Assert.assertEquals(1,numFailedVolumes);
  Assert.assertEquals(dn0.getFSDataset().getNumFailedVolumes(),numFailedVolumes);
  checkFailuresAtDataNode(dn0,1,true,new String[]{dn0Vol1.getAbsolutePath()});
  try {
    dn0.reconfigurePropertyImpl(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY,oldDataDirs);
    fail("Reconfigure with failed disk should throw exception.");
  }
 catch (  ReconfigurationException e) {
    Assert.assertTrue("Reconfigure exception doesn't have expected path!",e.getCause().getMessage().contains(dn0Vol1.getAbsolutePath()));
  }
  numFailedVolumes=(int)mbs.getAttribute(mxbeanName,"NumFailedVolumes");
  Assert.assertEquals(1,numFailedVolumes);
  Assert.assertEquals(dn0.getFSDataset().getNumFailedVolumes(),numFailedVolumes);
  checkFailuresAtDataNode(dn0,1,true,new String[]{dn0Vol1.getAbsolutePath()});
  String dataDirs=dn0Vol2.getPath();
  dn0.reconfigurePropertyImpl(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY,dataDirs);
  numFailedVolumes=(int)mbs.getAttribute(mxbeanName,"NumFailedVolumes");
  Assert.assertEquals(0,numFailedVolumes);
  Assert.assertEquals(dn0.getFSDataset().getNumFailedVolumes(),numFailedVolumes);
  checkFailuresAtDataNode(dn0,0,true,new String[]{});
  DataNodeTestUtils.restoreDataDirFromFailure(dn0Vol1);
  dn0.reconfigurePropertyImpl(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY,oldDataDirs);
  numFailedVolumes=(int)mbs.getAttribute(mxbeanName,"NumFailedVolumes");
  Assert.assertEquals(0,numFailedVolumes);
  Assert.assertEquals(dn0.getFSDataset().getNumFailedVolumes(),numFailedVolumes);
  checkFailuresAtDataNode(dn0,0,true,new String[]{});
  DataNodeTestUtils.injectDataDirFailure(dn0Vol2);
  DataNodeTestUtils.waitForDiskError(dn0,DataNodeTestUtils.getVolume(dn0,dn0Vol2));
  numFailedVolumes=(int)mbs.getAttribute(mxbeanName,"NumFailedVolumes");
  Assert.assertEquals(1,numFailedVolumes);
  Assert.assertEquals(dn0.getFSDataset().getNumFailedVolumes(),numFailedVolumes);
  checkFailuresAtDataNode(dn0,1,true,new String[]{dn0Vol2.getAbsolutePath()});
  assertTrue(dn0.shouldRun());
}
