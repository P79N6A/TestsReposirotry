@Test public void testRefreshProxyUser() throws Exception {
  Path dirPath=new Path("/testdir1");
  Path subDirPath=new Path("/testdir1/subdir1");
  UserGroupInformation loginUserUgi=UserGroupInformation.getLoginUser();
  String proxyUser="fakeuser";
  String realUser=loginUserUgi.getShortUserName();
  UserGroupInformation proxyUgi=UserGroupInformation.createProxyUserForTesting(proxyUser,loginUserUgi,loginUserUgi.getGroupNames());
  loginUserUgi.doAs(new PrivilegedExceptionAction<Integer>(){
    @Override public Integer run() throws Exception {
      cluster.getFileSystem().mkdirs(dirPath);
      cluster.getFileSystem().setOwner(dirPath,proxyUser,proxyUgi.getPrimaryGroupName());
      return 0;
    }
  }
);
  try {
    proxyUgi.doAs(new PrivilegedExceptionAction<Integer>(){
      @Override public Integer run() throws Exception {
        cluster.getFileSystem().mkdirs(subDirPath);
        return 0;
      }
    }
);
  }
 catch (  RemoteException re) {
    Assert.assertTrue(re.unwrapRemoteException() instanceof AccessControlException);
    Assert.assertTrue(re.unwrapRemoteException().getMessage().equals("User: " + realUser + " is not allowed to impersonate "+ proxyUser));
  }
  String userKeyGroups=DefaultImpersonationProvider.getTestProvider().getProxySuperuserGroupConfKey(realUser);
  String userKeyHosts=DefaultImpersonationProvider.getTestProvider().getProxySuperuserIpConfKey(realUser);
  String rsrc="testGroupMappingRefresh_rsrc.xml";
  tempResource=TestRefreshUserMappings.addNewConfigResource(rsrc,userKeyGroups,"*",userKeyHosts,"*");
  String[] args=new String[]{"-refreshSuperUserGroupsConfiguration"};
  admin.run(args);
  proxyUgi.doAs(new PrivilegedExceptionAction<Integer>(){
    @Override public Integer run() throws Exception {
      cluster.getFileSystem().mkdirs(dirPath);
      return 0;
    }
  }
);
}
