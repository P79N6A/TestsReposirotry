/** 
 * Test leased files counts from {@link LeaseManager#getINodeWithLeases()}, {@link LeaseManager#getINodeIdWithLeases()} and{@link LeaseManager#getINodeWithLeases(INodeDirectory)}.
 */
@Test(timeout=60000) public void testInodeWithLeases() throws Exception {
  FSNamesystem fsNamesystem=makeMockFsNameSystem();
  when(fsNamesystem.getMaxListOpenFilesResponses()).thenReturn(1024);
  FSDirectory fsDirectory=fsNamesystem.getFSDirectory();
  LeaseManager lm=new LeaseManager(fsNamesystem);
  Set<Long> iNodeIds=new HashSet<>(Arrays.asList(INodeId.ROOT_INODE_ID + 1,INodeId.ROOT_INODE_ID + 2,INodeId.ROOT_INODE_ID + 3,INodeId.ROOT_INODE_ID + 4));
  final PermissionStatus perm=PermissionStatus.createImmutable("user","group",FsPermission.createImmutable((short)0755));
  INodeDirectory rootInodeDirectory=new INodeDirectory(HdfsConstants.GRANDFATHER_INODE_ID,DFSUtil.string2Bytes(""),perm,0L);
  when(fsDirectory.getRoot()).thenReturn(rootInodeDirectory);
  verifyINodeLeaseCounts(fsNamesystem,lm,rootInodeDirectory,0,0,0);
  for (  Long iNodeId : iNodeIds) {
    INodeFile iNodeFile=stubInodeFile(iNodeId);
    iNodeFile.toUnderConstruction("hbase","gce-100");
    iNodeFile.setParent(rootInodeDirectory);
    when(fsDirectory.getInode(iNodeId)).thenReturn(iNodeFile);
    lm.addLease("holder_" + iNodeId,iNodeId);
  }
  verifyINodeLeaseCounts(fsNamesystem,lm,rootInodeDirectory,iNodeIds.size(),iNodeIds.size(),iNodeIds.size());
  for (  Long iNodeId : iNodeIds) {
    lm.removeLease(iNodeId);
  }
  verifyINodeLeaseCounts(fsNamesystem,lm,rootInodeDirectory,0,0,0);
}
