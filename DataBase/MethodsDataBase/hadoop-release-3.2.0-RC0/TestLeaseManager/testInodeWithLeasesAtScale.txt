/** 
 * Test leased files counts at various scale from {@link LeaseManager#getINodeWithLeases()}, {@link LeaseManager#getINodeIdWithLeases()} and{@link LeaseManager#getINodeWithLeases(INodeDirectory)}.
 */
@Test(timeout=240000) public void testInodeWithLeasesAtScale() throws Exception {
  FSNamesystem fsNamesystem=makeMockFsNameSystem();
  when(fsNamesystem.getMaxListOpenFilesResponses()).thenReturn(4096);
  FSDirectory fsDirectory=fsNamesystem.getFSDirectory();
  LeaseManager lm=new LeaseManager(fsNamesystem);
  final PermissionStatus perm=PermissionStatus.createImmutable("user","group",FsPermission.createImmutable((short)0755));
  INodeDirectory rootInodeDirectory=new INodeDirectory(HdfsConstants.GRANDFATHER_INODE_ID,DFSUtil.string2Bytes(""),perm,0L);
  when(fsDirectory.getRoot()).thenReturn(rootInodeDirectory);
  int scale=0;
  testInodeWithLeasesAtScaleImpl(fsNamesystem,lm,fsDirectory,rootInodeDirectory,scale);
  for (int workerCount=1; workerCount <= LeaseManager.INODE_FILTER_WORKER_COUNT_MAX / 2; workerCount++) {
    scale=workerCount * LeaseManager.INODE_FILTER_WORKER_TASK_MIN / 2;
    testInodeWithLeasesAtScaleImpl(fsNamesystem,lm,fsDirectory,rootInodeDirectory,scale);
    scale=workerCount * LeaseManager.INODE_FILTER_WORKER_TASK_MIN - 1;
    testInodeWithLeasesAtScaleImpl(fsNamesystem,lm,fsDirectory,rootInodeDirectory,scale);
    scale=workerCount * LeaseManager.INODE_FILTER_WORKER_TASK_MIN;
    testInodeWithLeasesAtScaleImpl(fsNamesystem,lm,fsDirectory,rootInodeDirectory,scale);
    scale=workerCount * LeaseManager.INODE_FILTER_WORKER_TASK_MIN + 1;
    testInodeWithLeasesAtScaleImpl(fsNamesystem,lm,fsDirectory,rootInodeDirectory,scale);
  }
  scale=1279;
  testInodeWithLeasesAtScaleImpl(fsNamesystem,lm,fsDirectory,rootInodeDirectory,scale);
}
