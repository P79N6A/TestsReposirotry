/** 
 * Test that node manager can exit listening. This is done by running a long running listener for 10000 seconds. Then we wait for 2 seconds and stop listening. We do not use a script this time to avoid leaking the child process.
 * @throws Exception exception occurred
 */
@Test(timeout=20000) public void testNormalExit() throws Exception {
  conf.set(YarnConfiguration.NM_ELASTIC_MEMORY_CONTROL_OOM_LISTENER_PATH,"sleep");
  ExecutorService service=Executors.newFixedThreadPool(1);
  try {
    CGroupsHandler cgroups=mock(CGroupsHandler.class);
    when(cgroups.getPathForCGroup(any(),any())).thenReturn("10000");
    when(cgroups.getCGroupParam(any(),any(),any())).thenReturn("under_oom 0");
    Runnable handler=mock(Runnable.class);
    doNothing().when(handler).run();
    CGroupElasticMemoryController controller=new CGroupElasticMemoryController(conf,null,cgroups,true,false,10000,handler);
    long start=System.currentTimeMillis();
    service.submit(() -> {
      try {
        Thread.sleep(2000);
      }
 catch (      InterruptedException ex) {
        assertTrue("Wait interrupted.",false);
      }
      LOG.info(String.format("Calling process destroy in %d ms",System.currentTimeMillis() - start));
      controller.stopListening();
      LOG.info("Called process destroy.");
    }
);
    controller.run();
  }
  finally {
    service.shutdown();
  }
}
