@Test public void testBlobDataContributor() throws Exception {
  String clientId=this.getConfiguration().get(TestConfigurationKeys.FS_AZURE_BLOB_DATA_CONTRIBUTOR_CLIENT_ID);
  Assume.assumeTrue("Contributor client id not provided",clientId != null);
  String secret=this.getConfiguration().get(TestConfigurationKeys.FS_AZURE_BLOB_DATA_CONTRIBUTOR_CLIENT_SECRET);
  Assume.assumeTrue("Contributor client secret not provided",secret != null);
  prepareFiles();
  final AzureBlobFileSystem fs=getBlobConributor();
  try (FSDataOutputStream stream=fs.create(FILE_PATH)){
    stream.write(0);
  }
   assertTrue(fs.exists(FILE_PATH));
  FileStatus fileStatus=fs.getFileStatus(FILE_PATH);
  assertEquals(1,fileStatus.getLen());
  assertTrue(fs.delete(FILE_PATH,true));
  assertFalse(fs.exists(FILE_PATH));
  assertTrue(fs.exists(EXISTED_FOLDER_PATH));
  fs.delete(EXISTED_FOLDER_PATH,true);
  assertFalse(fs.exists(EXISTED_FOLDER_PATH));
  try (FSDataInputStream stream=fs.open(EXISTED_FILE_PATH)){
    assertTrue(stream.read() != 0);
  }
   assertEquals(0,fs.getFileStatus(EXISTED_FILE_PATH).getLen());
  try (FSDataOutputStream stream=fs.append(EXISTED_FILE_PATH)){
    stream.write(0);
  }
   assertEquals(1,fs.getFileStatus(EXISTED_FILE_PATH).getLen());
  fs.delete(EXISTED_FILE_PATH,true);
  assertFalse(fs.exists(EXISTED_FILE_PATH));
}
