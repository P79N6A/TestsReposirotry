@Test public void testParallelJobsToAdjacentPaths() throws Throwable {
  describe("Run two jobs in parallel, assert they both complete");
  JobData jobData=startJob(true);
  Job job1=jobData.job;
  AbstractS3ACommitter committer1=jobData.committer;
  JobContext jContext1=jobData.jContext;
  TaskAttemptContext tContext1=jobData.tContext;
  String jobId2=randomJobId();
  String attempt20="attempt_" + jobId2 + "_m_000000_0";
  TaskAttemptID taskAttempt20=TaskAttemptID.forName(attempt20);
  String attempt21="attempt_" + jobId2 + "_m_000001_0";
  TaskAttemptID taskAttempt21=TaskAttemptID.forName(attempt21);
  Path job1Dest=outDir;
  Path job2Dest=new Path(getOutDir().getParent(),getMethodName() + "job2Dest");
  assertNotEquals(job1Dest,job2Dest);
  Job job2=newJob(job2Dest,new JobConf(getConfiguration()),attempt20);
  Configuration conf2=job2.getConfiguration();
  conf2.setInt(MRJobConfig.APPLICATION_ATTEMPT_ID,1);
  try {
    JobContext jContext2=new JobContextImpl(conf2,taskAttempt20.getJobID());
    TaskAttemptContext tContext2=new TaskAttemptContextImpl(conf2,taskAttempt20);
    AbstractS3ACommitter committer2=createCommitter(job2Dest,tContext2);
    JobData jobData2=new JobData(job2,jContext2,tContext2,committer2);
    setup(jobData2);
    abortInTeardown(jobData2);
    assertEquals(job2Dest,committer2.getOutputPath());
    writeTextOutput(tContext2);
    committer2.commitTask(tContext2);
    committer1.commitTask(tContext1);
    assertMultipartUploadsPending(job1Dest);
    assertMultipartUploadsPending(job2Dest);
    committer1.commitJob(jContext1);
    assertNoMultipartUploadsPending(job1Dest);
    getPart0000(job1Dest);
    assertMultipartUploadsPending(job2Dest);
    committer2.commitJob(jContext2);
    getPart0000(job2Dest);
    assertNoMultipartUploadsPending(job2Dest);
  }
  finally {
    abortMultipartUploadsUnderPath(job2Dest);
  }
}
