@Test public void testMapFileOutputCommitter() throws Exception {
  describe("Test that the committer generates map output into a directory\n" + "starting with the prefix part-");
  JobData jobData=startJob(false);
  JobContext jContext=jobData.jContext;
  TaskAttemptContext tContext=jobData.tContext;
  AbstractS3ACommitter committer=jobData.committer;
  Configuration conf=jobData.conf;
  writeMapFileOutput(new MapFileOutputFormat().getRecordWriter(tContext),tContext);
  commit(committer,jContext,tContext);
  S3AFileSystem fs=getFileSystem();
  waitForConsistency();
  lsR(fs,outDir,true);
  String ls=ls(outDir);
  describe("\nvalidating");
  verifySuccessMarker(outDir);
  describe("validate output of %s",outDir);
  validateMapFileOutputContent(fs,outDir);
  describe("listing");
  FileStatus[] filtered=fs.listStatus(outDir,HIDDEN_FILE_FILTER);
  assertEquals("listed children under " + ls,1,filtered.length);
  FileStatus fileStatus=filtered[0];
  assertTrue("Not the part file: " + fileStatus,fileStatus.getPath().getName().startsWith(PART_00000));
  describe("getReaders()");
  assertEquals("Number of MapFile.Reader entries with shared FS " + outDir + " : "+ ls,1,getReaders(fs,outDir,conf).length);
  describe("getReaders(new FS)");
  FileSystem fs2=FileSystem.get(outDir.toUri(),conf);
  assertEquals("Number of MapFile.Reader entries with shared FS2 " + outDir + " : "+ ls,1,getReaders(fs2,outDir,conf).length);
  describe("MapFileOutputFormat.getReaders");
  assertEquals("Number of MapFile.Reader entries with new FS in " + outDir + " : "+ ls,1,MapFileOutputFormat.getReaders(outDir,conf).length);
}
