@Test public void testFailedDisksBecomingGoodAgain() throws Exception {
  String dirA=new File(testDir,"dirA").getPath();
  String[] dirs={dirA};
  DirectoryCollection dc=new DirectoryCollection(dirs,0.0F);
  dc.checkDirs();
  Assert.assertEquals(0,dc.getGoodDirs().size());
  Assert.assertEquals(1,dc.getFailedDirs().size());
  Assert.assertEquals(1,dc.getFullDirs().size());
  Assert.assertEquals(0,dc.getErroredDirs().size());
  Assert.assertNotNull(dc.getDirectoryErrorInfo(dirA));
  Assert.assertEquals(DirectoryCollection.DiskErrorCause.DISK_FULL,dc.getDirectoryErrorInfo(dirA).cause);
  dc.setDiskUtilizationPercentageCutoff(100.0F,100.0F);
  dc.checkDirs();
  Assert.assertEquals(1,dc.getGoodDirs().size());
  Assert.assertEquals(0,dc.getFailedDirs().size());
  Assert.assertEquals(0,dc.getFullDirs().size());
  Assert.assertEquals(0,dc.getErroredDirs().size());
  Assert.assertNull(dc.getDirectoryErrorInfo(dirA));
  conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,"077");
  String dirB=new File(testDir,"dirB").getPath();
  Path pathB=new Path(dirB);
  FsPermission permDirB=new FsPermission((short)0400);
  localFs.mkdir(pathB,null,true);
  localFs.setPermission(pathB,permDirB);
  String[] dirs2={dirB};
  dc=new DirectoryCollection(dirs2,100.0F);
  dc.checkDirs();
  Assert.assertEquals(0,dc.getGoodDirs().size());
  Assert.assertEquals(1,dc.getFailedDirs().size());
  Assert.assertEquals(0,dc.getFullDirs().size());
  Assert.assertEquals(1,dc.getErroredDirs().size());
  Assert.assertNotNull(dc.getDirectoryErrorInfo(dirB));
  Assert.assertEquals(DirectoryCollection.DiskErrorCause.OTHER,dc.getDirectoryErrorInfo(dirB).cause);
  permDirB=new FsPermission((short)0700);
  localFs.setPermission(pathB,permDirB);
  dc.checkDirs();
  Assert.assertEquals(1,dc.getGoodDirs().size());
  Assert.assertEquals(0,dc.getFailedDirs().size());
  Assert.assertEquals(0,dc.getFullDirs().size());
  Assert.assertEquals(0,dc.getErroredDirs().size());
  Assert.assertNull(dc.getDirectoryErrorInfo(dirA));
}
