@Test public void testRequestFileDescriptorsWhenULimit() throws Exception {
  TemporarySocketDirectory sockDir=new TemporarySocketDirectory();
  Configuration conf=createShortCircuitConf("testRequestFileDescriptorsWhenULimit",sockDir);
  final short replicas=1;
  final int fileSize=3;
  final String testFile="/testfile";
  try (MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(replicas).build()){
    cluster.waitActive();
    DistributedFileSystem fs=cluster.getFileSystem();
    DFSTestUtil.createFile(fs,new Path(testFile),fileSize,replicas,0L);
    LocatedBlock blk=new DFSClient(DFSUtilClient.getNNAddress(conf),conf).getLocatedBlocks(testFile,0,fileSize).get(0);
    ClientContext clientContext=Mockito.mock(ClientContext.class);
    Mockito.when(clientContext.getPeerCache()).thenAnswer((Answer<PeerCache>)peerCacheCall -> {
      PeerCache peerCache=new PeerCache(10,Long.MAX_VALUE);
      DomainPeer peer=Mockito.spy(getDomainPeerToDn(conf));
      peerCache.put(blk.getLocations()[0],peer);
      Mockito.when(peer.getDomainSocket()).thenAnswer((Answer<DomainSocket>)domainSocketCall -> {
        DomainSocket domainSocket=Mockito.mock(DomainSocket.class);
        Mockito.when(domainSocket.recvFileInputStreams(Mockito.any(FileInputStream[].class),Mockito.any(byte[].class),Mockito.anyInt(),Mockito.anyInt())).thenAnswer((Answer<Void>)recvFileInputStreamsCall -> null);
        return domainSocket;
      }
);
      return peerCache;
    }
);
    Mockito.when(clientContext.getShortCircuitCache()).thenAnswer((Answer<ShortCircuitCache>)shortCircuitCacheCall -> {
      ShortCircuitCache cache=Mockito.mock(ShortCircuitCache.class);
      Mockito.when(cache.allocShmSlot(Mockito.any(DatanodeInfo.class),Mockito.any(DomainPeer.class),Mockito.any(MutableBoolean.class),Mockito.any(ExtendedBlockId.class),Mockito.anyString())).thenAnswer((Answer<Slot>)call -> null);
      return cache;
    }
);
    DatanodeInfo[] nodes=blk.getLocations();
    try {
      Assert.assertNull(new BlockReaderFactory(new DfsClientConf(conf)).setInetSocketAddress(NetUtils.createSocketAddr(nodes[0].getXferAddr())).setClientCacheContext(clientContext).setDatanodeInfo(blk.getLocations()[0]).setBlock(blk.getBlock()).setBlockToken(new Token()).createShortCircuitReplicaInfo());
    }
 catch (    NullPointerException ex) {
      Assert.fail("Should not throw NPE when the native library is unable " + "to create new files!");
    }
  }
 }
