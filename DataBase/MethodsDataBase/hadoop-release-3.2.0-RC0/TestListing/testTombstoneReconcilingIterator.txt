@Test public void testTombstoneReconcilingIterator() throws Exception {
  Path parent=new Path("/parent");
  Path liveChild=new Path(parent,"/liveChild");
  Path deletedChild=new Path(parent,"/deletedChild");
  Path[] allFiles={parent,liveChild,deletedChild};
  Path[] liveFiles={parent,liveChild};
  Listing listing=new Listing(fs);
  Collection<FileStatus> statuses=new ArrayList<>();
  statuses.add(blankFileStatus(parent));
  statuses.add(blankFileStatus(liveChild));
  statuses.add(blankFileStatus(deletedChild));
  Set<Path> tombstones=new HashSet<>();
  tombstones.add(deletedChild);
  RemoteIterator<FileStatus> sourceIterator=new MockRemoteIterator(statuses);
  RemoteIterator<LocatedFileStatus> locatedIterator=listing.createLocatedFileStatusIterator(sourceIterator);
  RemoteIterator<LocatedFileStatus> reconcilingIterator=listing.createTombstoneReconcilingIterator(locatedIterator,tombstones);
  Set<Path> expectedPaths=new HashSet<>();
  expectedPaths.add(parent);
  expectedPaths.add(liveChild);
  Set<Path> actualPaths=new HashSet<>();
  while (reconcilingIterator.hasNext()) {
    actualPaths.add(reconcilingIterator.next().getPath());
  }
  Assert.assertTrue(actualPaths.equals(expectedPaths));
}
