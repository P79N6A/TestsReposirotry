/** 
 * Test the correctness of storage type info when nodes are added and removed.
 * @throws Exception
 */
@Test public void testAddAndRemoveTopology() throws Exception {
  String[] newRack={"/l1/d1/r1","/l1/d1/r3","/l1/d3/r3","/l1/d3/r3"};
  String[] newHost={"nhost1","nhost2","nhost3","nhost4"};
  String[] newips={"30.30.30.30","31.31.31.31","32.32.32.32","33.33.33.33"};
  StorageType[] newTypes={StorageType.DISK,StorageType.SSD,StorageType.SSD,StorageType.SSD};
  DatanodeDescriptor[] newDD=new DatanodeDescriptor[4];
  for (int i=0; i < 4; i++) {
    DatanodeStorageInfo dsi=DFSTestUtil.createDatanodeStorageInfo("s" + newHost[i],newips[i],newRack[i],newHost[i],newTypes[i],null);
    newDD[i]=dsi.getDatanodeDescriptor();
    CLUSTER.add(newDD[i]);
  }
  DFSTopologyNodeImpl d1=(DFSTopologyNodeImpl)CLUSTER.getNode("/l1/d1");
  HashMap<String,EnumMap<StorageType,Integer>> d1info=d1.getChildrenStorageInfo();
  assertEquals(3,d1info.keySet().size());
  assertTrue(d1info.get("r1").size() == 2 && d1info.get("r2").size() == 2 && d1info.get("r3").size() == 1);
  assertEquals(2,(int)d1info.get("r1").get(StorageType.DISK));
  assertEquals(1,(int)d1info.get("r1").get(StorageType.ARCHIVE));
  assertEquals(2,(int)d1info.get("r2").get(StorageType.DISK));
  assertEquals(1,(int)d1info.get("r2").get(StorageType.ARCHIVE));
  assertEquals(1,(int)d1info.get("r3").get(StorageType.SSD));
  DFSTopologyNodeImpl d3=(DFSTopologyNodeImpl)CLUSTER.getNode("/l1/d3");
  HashMap<String,EnumMap<StorageType,Integer>> d3info=d3.getChildrenStorageInfo();
  assertEquals(1,d3info.keySet().size());
  assertTrue(d3info.get("r3").size() == 1);
  assertEquals(2,(int)d3info.get("r3").get(StorageType.SSD));
  DFSTopologyNodeImpl l1=(DFSTopologyNodeImpl)CLUSTER.getNode("/l1");
  HashMap<String,EnumMap<StorageType,Integer>> l1info=l1.getChildrenStorageInfo();
  assertEquals(3,l1info.keySet().size());
  assertTrue(l1info.get("d1").size() == 3 && l1info.get("d2").size() == 3 && l1info.get("d3").size() == 1);
  assertEquals(4,(int)l1info.get("d1").get(StorageType.DISK));
  assertEquals(2,(int)l1info.get("d1").get(StorageType.ARCHIVE));
  assertEquals(1,(int)l1info.get("d1").get(StorageType.SSD));
  assertEquals(1,(int)l1info.get("d2").get(StorageType.SSD));
  assertEquals(1,(int)l1info.get("d2").get(StorageType.RAM_DISK));
  assertEquals(1,(int)l1info.get("d2").get(StorageType.DISK));
  assertEquals(2,(int)l1info.get("d3").get(StorageType.SSD));
  for (int i=0; i < 4; i++) {
    CLUSTER.remove(newDD[i]);
  }
  DFSTopologyNodeImpl nd1=(DFSTopologyNodeImpl)CLUSTER.getNode("/l1/d1");
  HashMap<String,EnumMap<StorageType,Integer>> nd1info=nd1.getChildrenStorageInfo();
  assertEquals(2,nd1info.keySet().size());
  assertTrue(nd1info.get("r1").size() == 2 && nd1info.get("r2").size() == 2);
  assertEquals(1,(int)nd1info.get("r1").get(StorageType.DISK));
  assertEquals(1,(int)nd1info.get("r1").get(StorageType.ARCHIVE));
  assertEquals(2,(int)nd1info.get("r2").get(StorageType.DISK));
  assertEquals(1,(int)nd1info.get("r2").get(StorageType.ARCHIVE));
  DFSTopologyNodeImpl nl1=(DFSTopologyNodeImpl)CLUSTER.getNode("/l1");
  HashMap<String,EnumMap<StorageType,Integer>> nl1info=nl1.getChildrenStorageInfo();
  assertEquals(2,nl1info.keySet().size());
  assertTrue(l1info.get("d1").size() == 2 && l1info.get("d2").size() == 3);
  assertEquals(2,(int)nl1info.get("d1").get(StorageType.ARCHIVE));
  assertEquals(3,(int)nl1info.get("d1").get(StorageType.DISK));
  assertEquals(1,(int)l1info.get("d2").get(StorageType.DISK));
  assertEquals(1,(int)l1info.get("d2").get(StorageType.RAM_DISK));
  assertEquals(1,(int)l1info.get("d2").get(StorageType.SSD));
  assertNull(CLUSTER.getNode("/l1/d3"));
}
