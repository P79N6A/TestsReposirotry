/** 
 * Tests getting subtree storage counts, and see whether it is correct when we update subtree.
 * @throws Exception
 */
@Test public void testGetSubtreeStorageCount() throws Exception {
  Node l2=CLUSTER.getNode("/l2");
  Node l2d3=CLUSTER.getNode("/l2/d3");
  Node l2d3r1=CLUSTER.getNode("/l2/d3/r1");
  Node l2d3r3=CLUSTER.getNode("/l2/d3/r3");
  assertTrue(l2 instanceof DFSTopologyNodeImpl);
  assertTrue(l2d3 instanceof DFSTopologyNodeImpl);
  assertTrue(l2d3r1 instanceof DFSTopologyNodeImpl);
  assertTrue(l2d3r3 instanceof DFSTopologyNodeImpl);
  DFSTopologyNodeImpl innerl2=(DFSTopologyNodeImpl)l2;
  DFSTopologyNodeImpl innerl2d3=(DFSTopologyNodeImpl)l2d3;
  DFSTopologyNodeImpl innerl2d3r1=(DFSTopologyNodeImpl)l2d3r1;
  DFSTopologyNodeImpl innerl2d3r3=(DFSTopologyNodeImpl)l2d3r3;
  assertEquals(4,innerl2.getSubtreeStorageCount(StorageType.DISK));
  assertEquals(2,innerl2d3.getSubtreeStorageCount(StorageType.DISK));
  assertEquals(1,innerl2d3r1.getSubtreeStorageCount(StorageType.DISK));
  assertEquals(1,innerl2d3r3.getSubtreeStorageCount(StorageType.DISK));
  DatanodeStorageInfo storageInfo=DFSTestUtil.createDatanodeStorageInfo("StorageID","1.2.3.4","/l2/d3/r1","newhost");
  DatanodeDescriptor newNode=storageInfo.getDatanodeDescriptor();
  CLUSTER.add(newNode);
  assertEquals(5,innerl2.getSubtreeStorageCount(StorageType.DISK));
  assertEquals(3,innerl2d3.getSubtreeStorageCount(StorageType.DISK));
  assertEquals(2,innerl2d3r1.getSubtreeStorageCount(StorageType.DISK));
  assertEquals(1,innerl2d3r3.getSubtreeStorageCount(StorageType.DISK));
  CLUSTER.remove(newNode);
  assertEquals(4,innerl2.getSubtreeStorageCount(StorageType.DISK));
  assertEquals(2,innerl2d3.getSubtreeStorageCount(StorageType.DISK));
  assertEquals(1,innerl2d3r1.getSubtreeStorageCount(StorageType.DISK));
  assertEquals(1,innerl2d3r3.getSubtreeStorageCount(StorageType.DISK));
}
