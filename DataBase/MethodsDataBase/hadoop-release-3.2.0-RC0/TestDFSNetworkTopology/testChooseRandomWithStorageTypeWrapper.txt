/** 
 * This test tests the wrapper method. The wrapper method only takes one scope where if it starts with a ~, it is an excluded scope, and searching always from root. Otherwise it is a scope.
 * @throws Exception throws exception.
 */
@Test public void testChooseRandomWithStorageTypeWrapper() throws Exception {
  Node n;
  DatanodeDescriptor dd;
  n=CLUSTER.chooseRandomWithStorageType("/l2/d3/r4",null,null,StorageType.ARCHIVE);
  HashSet<Node> excluded=new HashSet<>();
  excluded.add(n);
  for (int i=0; i < 10; i++) {
    n=CLUSTER.chooseRandomWithStorageType("/l2/d3",null,StorageType.ARCHIVE);
    assertTrue(n instanceof DatanodeDescriptor);
    dd=(DatanodeDescriptor)n;
    assertTrue(dd.getHostName().equals("host12") || dd.getHostName().equals("host13"));
  }
  for (int i=0; i < 10; i++) {
    n=CLUSTER.chooseRandomWithStorageType("/l2/d3",excluded,StorageType.ARCHIVE);
    assertTrue(n instanceof DatanodeDescriptor);
    dd=(DatanodeDescriptor)n;
    assertTrue(dd.getHostName().equals("host13"));
  }
  for (int i=0; i < 10; i++) {
    n=CLUSTER.chooseRandomWithStorageType("~/l2/d4",null,StorageType.RAM_DISK);
    assertTrue(n instanceof DatanodeDescriptor);
    dd=(DatanodeDescriptor)n;
    assertTrue(dd.getHostName().equals("host7") || dd.getHostName().equals("host10"));
  }
  n=CLUSTER.chooseRandomWithStorageType("/l2/d3/r2",null,null,StorageType.RAM_DISK);
  excluded.add(n);
  for (int i=0; i < 10; i++) {
    n=CLUSTER.chooseRandomWithStorageType("~/l2/d4",excluded,StorageType.RAM_DISK);
    assertTrue(n instanceof DatanodeDescriptor);
    dd=(DatanodeDescriptor)n;
    assertTrue(dd.getHostName().equals("host7"));
  }
}
