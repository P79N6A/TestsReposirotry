/** 
 * In listStatus(), when S3Guard is enabled, the full listing for a directory is "written back" to the MetadataStore before the listing is returned.  Currently this "write back" behavior occurs when fs.s3a.metadatastore.authoritative is true.  This test validates this behavior.
 * @throws Exception on failure
 */
@Test public void testListStatusWriteBack() throws Exception {
  Assume.assumeTrue(getFileSystem().hasMetadataStore());
  Path directory=path("ListStatusWriteBack");
  S3AFileSystem noS3Guard=createTestFS(directory.toUri(),true,false);
  S3AFileSystem noWriteBack=createTestFS(directory.toUri(),false,false);
  S3AFileSystem yesWriteBack=createTestFS(directory.toUri(),false,true);
  noS3Guard.delete(directory,true);
  Path onS3=new Path(directory,"OnS3");
  noS3Guard.mkdirs(onS3);
  Path onS3AndMS=new Path(directory,"OnS3AndMS");
  ContractTestUtils.assertPathDoesNotExist(noWriteBack,"path",onS3AndMS);
  noWriteBack.mkdirs(onS3AndMS);
  FileStatus[] fsResults;
  DirListingMetadata mdResults;
  fsResults=noWriteBack.listStatus(directory);
  assertEquals("Filesystem enabled S3Guard without write back should have " + "both /OnS3 and /OnS3AndMS: " + Arrays.toString(fsResults),2,fsResults.length);
  mdResults=noWriteBack.getMetadataStore().listChildren(directory);
  assertNotNull("No results from noWriteBack listChildren " + directory,mdResults);
  assertEquals("Metadata store without write back should still only know " + "about /OnS3AndMS, but it has: " + mdResults,1,mdResults.numEntries());
  fsResults=yesWriteBack.listStatus(directory);
  assertEquals("Filesystem enabled S3Guard with write back should have" + " both /OnS3 and /OnS3AndMS: " + Arrays.toString(fsResults),2,fsResults.length);
  mdResults=yesWriteBack.getMetadataStore().listChildren(directory);
  assertEquals("Unexpected number of results from metadata store. " + "Should have /OnS3 and /OnS3AndMS: " + mdResults,2,mdResults.numEntries());
  getFileSystem().getMetadataStore().forgetMetadata(onS3);
}
