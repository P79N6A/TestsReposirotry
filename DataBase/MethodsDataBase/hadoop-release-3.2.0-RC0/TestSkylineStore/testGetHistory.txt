@Test public final void testGetHistory() throws SkylineStoreException {
  final RecurrenceId recurrenceId1=new RecurrenceId("FraudDetection","17/06/20 00:00:00");
  final ResourceSkyline resourceSkyline1=getSkyline(1);
  addToStore(recurrenceId1,resourceSkyline1);
  final ResourceSkyline resourceSkyline2=getSkyline(2);
  addToStore(recurrenceId1,resourceSkyline2);
  final RecurrenceId recurrenceId2=new RecurrenceId("FraudDetection","17/06/21 00:00:00");
  final ResourceSkyline resourceSkyline3=getSkyline(3);
  addToStore(recurrenceId2,resourceSkyline3);
  final ResourceSkyline resourceSkyline4=getSkyline(4);
  addToStore(recurrenceId2,resourceSkyline4);
  final RecurrenceId recurrenceId3=new RecurrenceId("Random","17/06/20 00:00:00");
  addToStore(recurrenceId3,resourceSkyline1);
  addToStore(recurrenceId3,resourceSkyline2);
  Map<RecurrenceId,List<ResourceSkyline>> jobHistory=skylineStore.getHistory(recurrenceId1);
  Assert.assertEquals(1,jobHistory.size());
  for (  final Map.Entry<RecurrenceId,List<ResourceSkyline>> entry : jobHistory.entrySet()) {
    Assert.assertEquals(recurrenceId1,entry.getKey());
    final List<ResourceSkyline> getSkylines=entry.getValue();
    Assert.assertEquals(2,getSkylines.size());
    compare(resourceSkyline1,getSkylines.get(0));
    compare(resourceSkyline2,getSkylines.get(1));
  }
  RecurrenceId recurrenceIdTest=new RecurrenceId("FraudDetection","*");
  jobHistory=skylineStore.getHistory(recurrenceIdTest);
  Assert.assertEquals(2,jobHistory.size());
  for (  final Map.Entry<RecurrenceId,List<ResourceSkyline>> entry : jobHistory.entrySet()) {
    Assert.assertEquals(recurrenceId1.getPipelineId(),entry.getKey().getPipelineId());
    final List<ResourceSkyline> getSkylines=entry.getValue();
    if (entry.getKey().getRunId().equals("17/06/20 00:00:00")) {
      Assert.assertEquals(2,getSkylines.size());
      compare(resourceSkyline1,getSkylines.get(0));
      compare(resourceSkyline2,getSkylines.get(1));
    }
 else {
      Assert.assertEquals(entry.getKey().getRunId(),"17/06/21 00:00:00");
      Assert.assertEquals(2,getSkylines.size());
      compare(resourceSkyline3,getSkylines.get(0));
      compare(resourceSkyline4,getSkylines.get(1));
    }
  }
  recurrenceIdTest=new RecurrenceId("*","some random runId");
  jobHistory=skylineStore.getHistory(recurrenceIdTest);
  Assert.assertEquals(3,jobHistory.size());
  for (  final Map.Entry<RecurrenceId,List<ResourceSkyline>> entry : jobHistory.entrySet()) {
    if (entry.getKey().getPipelineId().equals("FraudDetection")) {
      final List<ResourceSkyline> getSkylines=entry.getValue();
      if (entry.getKey().getRunId().equals("17/06/20 00:00:00")) {
        Assert.assertEquals(2,getSkylines.size());
        compare(resourceSkyline1,getSkylines.get(0));
        compare(resourceSkyline2,getSkylines.get(1));
      }
 else {
        Assert.assertEquals(entry.getKey().getRunId(),"17/06/21 00:00:00");
        Assert.assertEquals(2,getSkylines.size());
        compare(resourceSkyline3,getSkylines.get(0));
        compare(resourceSkyline4,getSkylines.get(1));
      }
    }
 else {
      Assert.assertEquals("Random",entry.getKey().getPipelineId());
      Assert.assertEquals(entry.getKey().getRunId(),"17/06/20 00:00:00");
      final List<ResourceSkyline> getSkylines=entry.getValue();
      Assert.assertEquals(2,getSkylines.size());
      compare(resourceSkyline1,getSkylines.get(0));
      compare(resourceSkyline2,getSkylines.get(1));
    }
  }
  recurrenceIdTest=new RecurrenceId("some random pipelineId","some random runId");
  Assert.assertNull(skylineStore.getHistory(recurrenceIdTest));
}
