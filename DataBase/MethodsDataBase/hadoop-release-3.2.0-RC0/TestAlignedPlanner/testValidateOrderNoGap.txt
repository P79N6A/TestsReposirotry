@Test public void testValidateOrderNoGap(){
  RLESparseResourceAllocation allocation=new RLESparseResourceAllocation(res);
  allocation.addInterval(new ReservationInterval(10 * step,13 * step),Resource.newInstance(1024,1));
  Map<ReservationInterval,Resource> curAlloc=new HashMap<ReservationInterval,Resource>();
  curAlloc.clear();
  curAlloc.put(new ReservationInterval(9 * step,10 * step),Resource.newInstance(1024,1));
  assertTrue("validateOrderNoFap() should have succeeded",IterativePlanner.validateOrderNoGap(allocation,curAlloc,false));
  curAlloc.put(new ReservationInterval(7 * step,8 * step),Resource.newInstance(1024,1));
  assertFalse("validateOrderNoGap() failed to identify a gap in curAlloc",IterativePlanner.validateOrderNoGap(allocation,curAlloc,false));
  curAlloc.clear();
  curAlloc.put(new ReservationInterval(8 * step,9 * step),Resource.newInstance(1024,1));
  assertFalse("validateOrderNoGap() failed to identify a gap between " + "allocations and curAlloc",IterativePlanner.validateOrderNoGap(allocation,curAlloc,false));
  curAlloc.clear();
  curAlloc.put(new ReservationInterval(13 * step,14 * step),Resource.newInstance(1024,1));
  assertTrue("validateOrderNoFap() should have succeeded",IterativePlanner.validateOrderNoGap(allocation,curAlloc,true));
  curAlloc.put(new ReservationInterval(15 * step,16 * step),Resource.newInstance(1024,1));
  assertFalse("validateOrderNoGap() failed to identify a gap in curAlloc",IterativePlanner.validateOrderNoGap(allocation,curAlloc,true));
  curAlloc.clear();
  curAlloc.put(new ReservationInterval(14 * step,15 * step),Resource.newInstance(1024,1));
  assertFalse("validateOrderNoGap() failed to identify a gap between " + "allocations and curAlloc",IterativePlanner.validateOrderNoGap(allocation,curAlloc,true));
}
