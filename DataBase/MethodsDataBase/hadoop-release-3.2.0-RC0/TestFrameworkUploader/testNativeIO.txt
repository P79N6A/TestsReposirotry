/** 
 * Test native IO.
 */
@Test public void testNativeIO() throws IOException {
  FrameworkUploader uploader=new FrameworkUploader();
  File parent=new File(testDir);
  try {
    parent.deleteOnExit();
    Assert.assertTrue(parent.mkdirs());
    File targetFile=new File(parent,"a.txt");
    try (FileOutputStream os=new FileOutputStream(targetFile)){
      IOUtils.writeLines(Lists.newArrayList("a","b"),null,os);
    }
     Assert.assertFalse(uploader.checkSymlink(targetFile));
    File symlinkToTarget=new File(parent,"symlinkToTarget.txt");
    try {
      Files.createSymbolicLink(Paths.get(symlinkToTarget.getAbsolutePath()),Paths.get(targetFile.getAbsolutePath()));
    }
 catch (    UnsupportedOperationException e) {
      Assume.assumeTrue(false);
    }
    Assert.assertTrue(uploader.checkSymlink(symlinkToTarget));
    symlinkToTarget=new File(parent.getAbsolutePath() + "/./symlinkToTarget2.txt");
    try {
      Files.createSymbolicLink(Paths.get(symlinkToTarget.getAbsolutePath()),Paths.get(targetFile.getAbsolutePath()));
    }
 catch (    UnsupportedOperationException e) {
      Assume.assumeTrue(false);
    }
    Assert.assertTrue(uploader.checkSymlink(symlinkToTarget));
    File symlinkOutside=new File(parent,"symlinkToParent.txt");
    try {
      Files.createSymbolicLink(Paths.get(symlinkOutside.getAbsolutePath()),Paths.get(parent.getAbsolutePath()));
    }
 catch (    UnsupportedOperationException e) {
      Assume.assumeTrue(false);
    }
    Assert.assertFalse(uploader.checkSymlink(symlinkOutside));
  }
  finally {
    FileUtils.deleteDirectory(parent);
  }
}
