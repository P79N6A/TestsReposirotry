@Test public void testReencryptCommandsQueuedOrdering() throws Exception {
  final Path zoneParent=new Path("/zones");
  final String zoneBaseName=zoneParent.toString() + "/zone";
  final int numZones=10;
  for (int i=0; i < numZones; ++i) {
    final Path zone=new Path(zoneBaseName + i);
    fsWrapper.mkdir(zone,FsPermission.getDirDefault(),true);
    dfsAdmin.createEncryptionZone(zone,TEST_KEY,NO_TRASH);
  }
  getEzManager().pauseReencryptForTesting();
  for (int i=0; i < numZones; ++i) {
    dfsAdmin.reencryptEncryptionZone(new Path(zoneBaseName + i),ReencryptAction.START);
  }
  waitForQueuedZones(numZones);
  ReencryptionStatus rzs=new ReencryptionStatus(getReencryptionStatus());
  for (int i=0; i < numZones; ++i) {
    Long zoneId=fsn.getFSDirectory().getINode(zoneBaseName + i).getId();
    assertEquals(zoneId,rzs.getNextUnprocessedZone());
    rzs.removeZone(zoneId);
  }
  Set<Integer> cancelled=new HashSet<>(Arrays.asList(0,3,4));
  for (  int cancel : cancelled) {
    dfsAdmin.reencryptEncryptionZone(new Path(zoneBaseName + cancel),ReencryptAction.CANCEL);
  }
  restartClusterDisableReencrypt();
  waitForQueuedZones(numZones - cancelled.size());
  rzs=new ReencryptionStatus(getReencryptionStatus());
  for (int i=0; i < numZones; ++i) {
    if (cancelled.contains(i)) {
      continue;
    }
    Long zoneId=fsn.getFSDirectory().getINode(zoneBaseName + i).getId();
    assertEquals(zoneId,rzs.getNextUnprocessedZone());
    rzs.removeZone(zoneId);
  }
  fs.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
  fs.saveNamespace();
  fs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE);
  restartClusterDisableReencrypt();
  waitForQueuedZones(numZones - cancelled.size());
  rzs=new ReencryptionStatus(getReencryptionStatus());
  for (int i=0; i < 10; ++i) {
    if (cancelled.contains(i)) {
      continue;
    }
    Long zoneId=fsn.getFSDirectory().getINode(zoneBaseName + i).getId();
    assertEquals(zoneId,rzs.getNextUnprocessedZone());
    rzs.removeZone(zoneId);
  }
}
