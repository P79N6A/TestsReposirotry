@Test public void testReencryptSnapshots() throws Exception {
  final int len=8196;
  final Path zoneParent=new Path("/zones");
  final Path zone=new Path(zoneParent,"zone");
  fsWrapper.mkdir(zone,FsPermission.getDirDefault(),true);
  dfsAdmin.allowSnapshot(zone);
  dfsAdmin.createEncryptionZone(zone,TEST_KEY,NO_TRASH);
  for (int i=0; i < 10; ++i) {
    DFSTestUtil.createFile(fs,new Path(zone,Integer.toString(i)),len,(short)1,0xFEED);
  }
  final Path subdir=new Path("/dir");
  fsWrapper.mkdir(subdir,FsPermission.getDirDefault(),true);
  DFSTestUtil.createFile(fs,new Path(subdir,"f"),len,(short)1,0xFEED);
  final Path zoneSnap=fs.createSnapshot(zone);
  fsWrapper.rename(new Path(zone,"5"),new Path(zone,"5new"));
  fsWrapper.rename(new Path(zone,"6"),new Path(zone,"6new"));
  fsWrapper.delete(new Path(zone,"6new"),true);
  final Path encFile1=new Path(zone,"0");
  final FileEncryptionInfo fei0=getFileEncryptionInfo(encFile1);
  rollKey(TEST_KEY);
  try {
    dfsAdmin.reencryptEncryptionZone(zoneSnap,ReencryptAction.START);
    fail("Reencrypt command on snapshot path should fail.");
  }
 catch (  RemoteException expected) {
    LOG.info("Expected exception",expected);
    assertTrue(expected.unwrapRemoteException() instanceof SnapshotAccessControlException);
  }
  dfsAdmin.reencryptEncryptionZone(zone,ReencryptAction.START);
  waitForReencryptedZones(1);
  waitForReencryptedFiles(zone.toString(),9);
  assertKeyVersionChanged(encFile1,fei0);
}
