@Test public void testReencryptionWithoutProvider() throws Exception {
  final int len=8196;
  final Path zoneParent=new Path("/zones");
  final Path zone=new Path(zoneParent,"zone");
  fsWrapper.mkdir(zone,FsPermission.getDirDefault(),true);
  dfsAdmin.createEncryptionZone(zone,TEST_KEY,NO_TRASH);
  for (int i=0; i < 10; ++i) {
    DFSTestUtil.createFile(fs,new Path(zone,Integer.toString(i)),len,(short)1,0xFEED);
  }
  rollKey(TEST_KEY);
  dfsAdmin.reencryptEncryptionZone(zone,ReencryptAction.START);
  waitForReencryptedZones(1);
  cluster.getConfiguration(0).unset(CommonConfigurationKeysPublic.HADOOP_SECURITY_KEY_PROVIDER_PATH);
  cluster.restartNameNodes();
  cluster.waitClusterUp();
  try {
    dfsAdmin.reencryptEncryptionZone(zone,ReencryptAction.START);
    fail("should not be able to re-encrypt");
  }
 catch (  RemoteException expected) {
    assertExceptionContains("rejected",expected.unwrapRemoteException());
  }
  try {
    dfsAdmin.reencryptEncryptionZone(zone,ReencryptAction.CANCEL);
    fail("should not be able to cancel re-encrypt");
  }
 catch (  RemoteException expected) {
    assertExceptionContains("rejected",expected.unwrapRemoteException());
  }
  RemoteIterator<ZoneReencryptionStatus> it=dfsAdmin.listReencryptionStatus();
  assertTrue(it.hasNext());
  ZoneReencryptionStatus zs=it.next();
  assertEquals(zone.toString(),zs.getZoneName());
  assertEquals(ZoneReencryptionStatus.State.Completed,zs.getState());
  verifyZoneCompletionTime(zs);
  assertEquals(10,zs.getFilesReencrypted());
}
