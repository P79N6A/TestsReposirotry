@Test public void testReencryptNestedZones() throws Exception {
  final int len=8196;
  final Path zoneRoot=new Path("/");
  final Path zoneL1=new Path(zoneRoot,"level1");
  final Path zoneL2=new Path(zoneL1,"level2");
  final Path nonzoneDir=new Path(zoneRoot,"dir");
  dfsAdmin.createEncryptionZone(zoneRoot,TEST_KEY,NO_TRASH);
  DFSTestUtil.createFile(fs,new Path(zoneRoot,"file"),len,(short)1,0xFEED);
  DFSTestUtil.createFile(fs,new Path(nonzoneDir,"dfile"),len,(short)1,0xFEED);
  fsWrapper.mkdir(zoneL1,FsPermission.getDirDefault(),true);
  dfsAdmin.createEncryptionZone(zoneL1,TEST_KEY,NO_TRASH);
  for (int i=0; i < 3; ++i) {
    DFSTestUtil.createFile(fs,new Path(zoneL1,"fileL1-" + i),len,(short)1,0xFEED);
  }
  fsWrapper.mkdir(zoneL2,FsPermission.getDirDefault(),true);
  dfsAdmin.createEncryptionZone(zoneL2,TEST_KEY,NO_TRASH);
  for (int i=0; i < 4; ++i) {
    DFSTestUtil.createFile(fs,new Path(zoneL2,"fileL2-" + i),len,(short)1,0xFEED);
  }
  rollKey(TEST_KEY);
  getEzManager().pauseReencryptForTesting();
  dfsAdmin.reencryptEncryptionZone(zoneRoot,ReencryptAction.START);
  waitForQueuedZones(1);
  ReencryptionStatus rzs=getReencryptionStatus();
  assertEquals((Long)fsn.getFSDirectory().getINode(zoneRoot.toString()).getId(),rzs.getNextUnprocessedZone());
  getEzManager().resumeReencryptForTesting();
  waitForZoneCompletes(zoneRoot.toString());
  assertEquals(2,getZoneStatus(zoneRoot.toString()).getFilesReencrypted());
  getEzManager().resetMetricsForTesting();
  getEzManager().pauseReencryptForTesting();
  dfsAdmin.reencryptEncryptionZone(zoneL1,ReencryptAction.START);
  waitForQueuedZones(1);
  rzs=getReencryptionStatus();
  assertEquals((Long)fsn.getFSDirectory().getINode(zoneL1.toString()).getId(),rzs.getNextUnprocessedZone());
  getEzManager().resumeReencryptForTesting();
  waitForZoneCompletes(zoneL1.toString());
  assertEquals(3,getZoneStatus(zoneL1.toString()).getFilesReencrypted());
}
