@Test public void testStateStoreAppLimitLessThanMemoryAppLimit(){
  long now=System.currentTimeMillis();
  final int allApps=10;
  RMContext rmContext=mockRMContext(allApps,now - 20000);
  Configuration conf=new YarnConfiguration();
  int maxAppsInMemory=8;
  int maxAppsInStateStore=4;
  conf.setInt(YarnConfiguration.RM_MAX_COMPLETED_APPLICATIONS,maxAppsInMemory);
  conf.setInt(YarnConfiguration.RM_STATE_STORE_MAX_COMPLETED_APPLICATIONS,maxAppsInStateStore);
  TestRMAppManager appMonitor=new TestRMAppManager(rmContext,conf);
  addToCompletedApps(appMonitor,rmContext);
  Assert.assertEquals("Number of completed apps incorrect",allApps,appMonitor.getCompletedAppsListSize());
  int numRemoveAppsFromStateStore=allApps - maxAppsInStateStore;
  Set<ApplicationId> appsShouldBeRemovedFromStateStore=appMonitor.getFirstNCompletedApps(numRemoveAppsFromStateStore);
  appMonitor.checkAppNumCompletedLimit();
  Set<ApplicationId> removedAppsFromStateStore=appMonitor.getRemovedAppsFromStateStore(numRemoveAppsFromStateStore);
  Assert.assertEquals("Number of apps incorrect after # completed check",maxAppsInMemory,rmContext.getRMApps().size());
  Assert.assertEquals("Number of completed apps incorrect after check",maxAppsInMemory,appMonitor.getCompletedAppsListSize());
  verify(rmContext.getStateStore(),times(numRemoveAppsFromStateStore)).removeApplication(isA(RMApp.class));
  Assert.assertEquals(maxAppsInStateStore,appMonitor.getNumberOfCompletedAppsInStateStore());
  List<ApplicationId> completedApps=appMonitor.getCompletedApps();
  Assert.assertEquals(maxAppsInMemory,completedApps.size());
  Assert.assertEquals(numRemoveAppsFromStateStore,removedAppsFromStateStore.size());
  Assert.assertEquals(numRemoveAppsFromStateStore,Sets.intersection(appsShouldBeRemovedFromStateStore,removedAppsFromStateStore).size());
}
