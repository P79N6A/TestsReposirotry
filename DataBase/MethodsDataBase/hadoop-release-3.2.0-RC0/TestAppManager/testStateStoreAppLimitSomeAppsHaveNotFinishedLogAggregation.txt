@Test public void testStateStoreAppLimitSomeAppsHaveNotFinishedLogAggregation(){
  long now=System.currentTimeMillis();
  final int allApps=10;
  RMContext rmContext=mockRMContextWithMixedLogAggregationStatus(allApps,now - 20000);
  Configuration conf=new YarnConfiguration();
  int maxAppsInMemory=2;
  conf.setInt(YarnConfiguration.RM_MAX_COMPLETED_APPLICATIONS,maxAppsInMemory);
  conf.setInt(YarnConfiguration.RM_STATE_STORE_MAX_COMPLETED_APPLICATIONS,1000);
  TestRMAppManager appMonitor=new TestRMAppManager(rmContext,conf);
  addToCompletedApps(appMonitor,rmContext);
  Assert.assertEquals("Number of completed apps incorrect",allApps,appMonitor.getCompletedAppsListSize());
  int numRemoveApps=allApps - maxAppsInMemory;
  int effectiveNumRemoveApps=numRemoveApps / 2;
  int expectedNumberOfAppsInMemory=maxAppsInMemory + effectiveNumRemoveApps;
  Set<ApplicationId> appsShouldBeRemoved=appMonitor.getCompletedAppsWithEvenIdsInRange(numRemoveApps);
  appMonitor.checkAppNumCompletedLimit();
  Assert.assertEquals("Number of apps incorrect after # completed check",expectedNumberOfAppsInMemory,rmContext.getRMApps().size());
  Assert.assertEquals("Number of completed apps incorrect after check",expectedNumberOfAppsInMemory,appMonitor.getCompletedAppsListSize());
  verify(rmContext.getStateStore(),times(effectiveNumRemoveApps)).removeApplication(isA(RMApp.class));
  Assert.assertEquals(expectedNumberOfAppsInMemory,appMonitor.getNumberOfCompletedAppsInStateStore());
  List<ApplicationId> completedApps=appMonitor.getCompletedApps();
  Assert.assertEquals(expectedNumberOfAppsInMemory,completedApps.size());
  Assert.assertEquals(effectiveNumRemoveApps,appsShouldBeRemoved.size());
  assertTrue(Collections.disjoint(completedApps,appsShouldBeRemoved));
}
