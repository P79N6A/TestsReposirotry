@Test public void testRMAppSubmitAMContainerResourceRequestsDisagree() throws Exception {
  asContext.setResource(null);
  List<ResourceRequest> reqs=new ArrayList<>();
  when(mockDefaultQueueInfo.getAccessibleNodeLabels()).thenReturn(new HashSet<String>(){
{
      add("label1");
      add("");
    }
  }
);
  ResourceRequest anyReq=ResourceRequest.newInstance(Priority.newInstance(1),ResourceRequest.ANY,Resources.createResource(1024),1,false,"label1",ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));
  reqs.add(anyReq);
  reqs.add(ResourceRequest.newInstance(Priority.newInstance(2),"/rack",Resources.createResource(1025),2,false,"",ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC)));
  reqs.add(ResourceRequest.newInstance(Priority.newInstance(3),"/rack/node",Resources.createResource(1026),3,true,"",ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC)));
  asContext.setAMContainerResourceRequests(cloneResourceRequests(reqs));
  RMApp app=testRMAppSubmit();
  for (  ResourceRequest req : reqs) {
    req.setCapability(anyReq.getCapability());
    req.setExecutionTypeRequest(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));
    req.setNumContainers(1);
    req.setPriority(Priority.newInstance(0));
  }
  Assert.assertEquals(reqs,app.getAMResourceRequests());
}
