@Test(timeout=300000) public void testCustomizedUserAndGroupNames() throws Exception {
  final Configuration conf=WebHdfsTestUtil.createConf();
  conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY,true);
  conf.set(HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,"^[A-Za-z0-9_][A-Za-z0-9" + "._-]*[$]?$");
  conf.set(HdfsClientConfigKeys.DFS_WEBHDFS_ACL_PERMISSION_PATTERN_KEY,"^(default:)?(user|group|mask|other):" + "[[0-9A-Za-z_][@A-Za-z0-9._-]]*:([rwx-]{3})?(,(default:)?" + "(user|group|mask|other):[[0-9A-Za-z_][@A-Za-z0-9._-]]*:([rwx-]{3})?)*$");
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  try {
    cluster.waitActive();
    WebHdfsTestUtil.getWebHdfsFileSystem(conf,WebHdfsConstants.WEBHDFS_SCHEME).setPermission(new Path("/"),new FsPermission(FsAction.ALL,FsAction.ALL,FsAction.ALL));
    UserGroupInformation.createUserForTesting("123",new String[]{"my-group"}).doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws IOException, URISyntaxException {
        FileSystem fs=WebHdfsTestUtil.getWebHdfsFileSystem(conf,WebHdfsConstants.WEBHDFS_SCHEME);
        Path d=new Path("/my-dir");
        Assert.assertTrue(fs.mkdirs(d));
        fs.modifyAclEntries(d,ImmutableList.of(new AclEntry.Builder().setPermission(FsAction.READ).setScope(AclEntryScope.DEFAULT).setType(AclEntryType.USER).setName("11010").build(),new AclEntry.Builder().setPermission(FsAction.READ_WRITE).setType(AclEntryType.GROUP).setName("foo@bar").build()));
        return null;
      }
    }
);
  }
  finally {
    cluster.shutdown();
  }
}
