/** 
 * Validates the implementation of InputStream.skip, Seekable.getPos, and InputStream.available.
 * @throws IOException
 */
@Test public void test_0313_SkipAndAvailableAndPosition() throws IOException {
  assumeHugeFileExists();
  try (FSDataInputStream inputStream=fs.open(TEST_FILE_PATH)){
    byte[] expected1={0,1,2};
    byte[] expected2={3,4,5};
    byte[] expected3={1,2,3};
    byte[] expected4={6,7,8};
    assertEquals(testFileLength,inputStream.available());
    assertEquals(0,inputStream.getPos());
    int n=3;
    long skipped=inputStream.skip(n);
    assertEquals(skipped,inputStream.getPos());
    assertEquals(testFileLength - inputStream.getPos(),inputStream.available());
    assertEquals(skipped,n);
    byte[] buffer=new byte[3];
    int bytesRead=inputStream.read(buffer);
    assertEquals(buffer.length,bytesRead);
    assertArrayEquals(expected2,buffer);
    assertEquals(buffer.length + skipped,inputStream.getPos());
    assertEquals(testFileLength - inputStream.getPos(),inputStream.available());
    int seekPos=1;
    inputStream.seek(seekPos);
    bytesRead=inputStream.read(buffer);
    assertEquals(buffer.length,bytesRead);
    assertArrayEquals(expected3,buffer);
    assertEquals(buffer.length + seekPos,inputStream.getPos());
    assertEquals(testFileLength - inputStream.getPos(),inputStream.available());
    long currentPosition=inputStream.getPos();
    n=2;
    skipped=inputStream.skip(n);
    assertEquals(currentPosition + skipped,inputStream.getPos());
    assertEquals(testFileLength - inputStream.getPos(),inputStream.available());
    assertEquals(skipped,n);
    bytesRead=inputStream.read(buffer);
    assertEquals(buffer.length,bytesRead);
    assertArrayEquals(expected4,buffer);
    assertEquals(buffer.length + skipped + currentPosition,inputStream.getPos());
    assertEquals(testFileLength - inputStream.getPos(),inputStream.available());
  }
 }
