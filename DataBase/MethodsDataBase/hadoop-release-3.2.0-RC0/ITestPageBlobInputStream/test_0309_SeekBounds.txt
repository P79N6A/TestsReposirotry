/** 
 * Validates the implementation of Seekable.seek and ensures there is no network I/O for forward seek.
 * @throws Exception
 */
@Test public void test_0309_SeekBounds() throws Exception {
  assumeHugeFileExists();
  try (FSDataInputStream inputStream=fs.open(TEST_FILE_PATH)){
    inputStream.seek(0);
    assertEquals(0,inputStream.getPos());
    intercept(EOFException.class,FSExceptionMessages.NEGATIVE_SEEK,new Callable<FSDataInputStream>(){
      @Override public FSDataInputStream call() throws Exception {
        inputStream.seek(-1);
        return inputStream;
      }
    }
);
    assertTrue("Test file length only " + testFileLength,testFileLength > 0);
    inputStream.seek(testFileLength);
    assertEquals(testFileLength,inputStream.getPos());
    intercept(EOFException.class,FSExceptionMessages.CANNOT_SEEK_PAST_EOF,new Callable<FSDataInputStream>(){
      @Override public FSDataInputStream call() throws Exception {
        inputStream.seek(testFileLength + 1);
        return inputStream;
      }
    }
);
  }
 }
