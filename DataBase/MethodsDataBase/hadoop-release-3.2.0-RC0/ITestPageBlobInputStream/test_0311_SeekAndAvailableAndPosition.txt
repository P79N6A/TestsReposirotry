/** 
 * Validates the implementation of Seekable.seek, Seekable.getPos, and InputStream.available.
 * @throws Exception
 */
@Test public void test_0311_SeekAndAvailableAndPosition() throws Exception {
  assumeHugeFileExists();
  try (FSDataInputStream inputStream=fs.open(TEST_FILE_PATH)){
    byte[] expected1={0,1,2};
    byte[] expected2={3,4,5};
    byte[] expected3={1,2,3};
    byte[] expected4={6,7,8};
    byte[] buffer=new byte[3];
    int bytesRead=inputStream.read(buffer);
    assertEquals(buffer.length,bytesRead);
    assertArrayEquals(expected1,buffer);
    assertEquals(buffer.length,inputStream.getPos());
    assertEquals(testFileLength - inputStream.getPos(),inputStream.available());
    bytesRead=inputStream.read(buffer);
    assertEquals(buffer.length,bytesRead);
    assertArrayEquals(expected2,buffer);
    assertEquals(2 * buffer.length,inputStream.getPos());
    assertEquals(testFileLength - inputStream.getPos(),inputStream.available());
    int seekPos=0;
    inputStream.seek(seekPos);
    bytesRead=inputStream.read(buffer);
    assertEquals(buffer.length,bytesRead);
    assertArrayEquals(expected1,buffer);
    assertEquals(buffer.length + seekPos,inputStream.getPos());
    assertEquals(testFileLength - inputStream.getPos(),inputStream.available());
    seekPos=1;
    inputStream.seek(seekPos);
    bytesRead=inputStream.read(buffer);
    assertEquals(buffer.length,bytesRead);
    assertArrayEquals(expected3,buffer);
    assertEquals(buffer.length + seekPos,inputStream.getPos());
    assertEquals(testFileLength - inputStream.getPos(),inputStream.available());
    seekPos=6;
    inputStream.seek(seekPos);
    bytesRead=inputStream.read(buffer);
    assertEquals(buffer.length,bytesRead);
    assertArrayEquals(expected4,buffer);
    assertEquals(buffer.length + seekPos,inputStream.getPos());
    assertEquals(testFileLength - inputStream.getPos(),inputStream.available());
  }
 }
