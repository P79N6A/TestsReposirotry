/** 
 * Test to verify sorting with decommissioned datanodes exists in storage list but the corresponding new target datanode doesn't exists. We have storage list, marked decommissioned internal blocks with a ' d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11 mapping to indices 0', 1', 2', 3, 4', 5', 6, 7, 8, 0, 2, 4 Decommissioned node indices: 0', 1', 2', 4', 5' 1 and 5 nodes doesn't exists in the target list. This can happen, the target node block corrupted or lost after the successful decommissioning. So in the original list nodes corresponding to the decommissioned block index 1 and 5 doesn't have any target entries. After sorting the expected block indices list should be, 0, 2, 3, 4, 6, 7, 8, 0', 1', 2', 4', 5' After sorting the expected storage list will be, d9, d10, d3, d11, d6, d7, d8, d0, d1, d2, d4, d5. Note: after sorting block indices will not be in ascending order.
 */
@Test(timeout=10000) public void testTargetDecommnDatanodeDoesntExists(){
  LOG.info("Starting test testTargetDecommnDatanodeDoesntExists");
  int lbsCount=2;
  List<Integer> decommnNodeIndices=new ArrayList<>();
  decommnNodeIndices.add(0);
  decommnNodeIndices.add(1);
  decommnNodeIndices.add(2);
  decommnNodeIndices.add(4);
  decommnNodeIndices.add(5);
  List<Integer> targetNodeIndices=new ArrayList<>();
  targetNodeIndices.add(0);
  targetNodeIndices.add(2);
  targetNodeIndices.add(4);
  HashMap<Integer,List<String>> decommissionedNodes=new HashMap<>(lbsCount * decommnNodeIndices.size());
  List<LocatedBlock> lbs=createLocatedStripedBlocks(lbsCount,dataBlocks,parityBlocks,decommnNodeIndices,targetNodeIndices,decommissionedNodes);
  List<HashMap<DatanodeInfo,Byte>> locToIndexList=new ArrayList<>();
  List<HashMap<DatanodeInfo,Token<BlockTokenIdentifier>>> locToTokenList=new ArrayList<>();
  prepareBlockIndexAndTokenList(lbs,locToIndexList,locToTokenList);
  dm.sortLocatedBlocks(null,lbs);
  int blkGrpWidth=dataBlocks + parityBlocks - 2;
  assertDecommnNodePosition(blkGrpWidth,decommissionedNodes,lbs);
  assertBlockIndexAndTokenPosition(lbs,locToIndexList,locToTokenList);
}
