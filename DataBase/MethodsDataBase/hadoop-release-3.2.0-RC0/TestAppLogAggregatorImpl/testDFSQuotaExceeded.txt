@Test public void testDFSQuotaExceeded() throws Exception {
  DeletionService deletionServiceWithExpectedFiles=createDeletionServiceWithExpectedFile2Delete(Collections.emptySet());
  final YarnConfiguration config=new YarnConfiguration();
  ApplicationId appId=ApplicationId.newInstance(1357543L,1);
  LogAggregationTFileController format=Mockito.mock(LogAggregationTFileController.class);
  Mockito.doThrow(new LogAggregationDFSException()).when(format).closeWriter();
  NodeManager.NMContext context=(NMContext)createContext(config);
  context.setNMLogAggregationStatusTracker(Mockito.mock(NMLogAggregationStatusTracker.class));
  final AppLogAggregatorInTest appLogAggregator=createAppLogAggregator(appId,LOCAL_LOG_DIR.getAbsolutePath(),config,context,1000L,deletionServiceWithExpectedFiles,format);
  appLogAggregator.startContainerLogAggregation(new ContainerLogContext(ContainerId.newContainerId(ApplicationAttemptId.newInstance(appId,0),0),ContainerType.TASK,0));
  appLogAggregator.finishLogAggregation();
  appLogAggregator.run();
  ArgumentCaptor<LogValue> logValCaptor=ArgumentCaptor.forClass(LogValue.class);
  verify(appLogAggregator.getLogAggregationFileController()).write(any(LogKey.class),logValCaptor.capture());
  Set<String> filesUploaded=new HashSet<>();
  LogValue logValue=logValCaptor.getValue();
  for (  File file : logValue.getPendingLogFilesToUploadForThisContainer()) {
    filesUploaded.add(file.getAbsolutePath());
  }
  verifyFilesUploaded(filesUploaded,Collections.emptySet());
}
