@Test public void testDeleteTrash() throws Exception {
  Configuration testConf=new Configuration(conf);
  testConf.set(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY,"10");
  Path user1Tmp=new Path(TEST_ROOT,"test-del-u1");
  Path user2Tmp=new Path(TEST_ROOT,"test-del-u2");
  fs=DFSTestUtil.login(fs,testConf,user1);
  fs.mkdirs(user1Tmp);
  Trash u1Trash=getPerUserTrash(user1,fs,testConf);
  Path u1t=u1Trash.getCurrentTrashDir(user1Tmp);
  assertTrue(String.format("Failed to move %s to trash",user1Tmp),u1Trash.moveToTrash(user1Tmp));
  assertTrue(String.format("%s should be allowed to remove its own trash directory %s",user1.getUserName(),u1t),fs.delete(u1t,true));
  assertFalse(fs.exists(u1t));
  fs=DFSTestUtil.login(fs,testConf,user2);
  fs.mkdirs(user2Tmp);
  Trash u2Trash=getPerUserTrash(user2,fs,testConf);
  u2Trash.moveToTrash(user2Tmp);
  Path u2t=u2Trash.getCurrentTrashDir(user2Tmp);
  try {
    fs=DFSTestUtil.login(fs,testConf,user1);
    fs.delete(u2t,true);
    fail(String.format("%s should not be able to remove %s trash directory",USER1_NAME,USER2_NAME));
  }
 catch (  AccessControlException e) {
    assertTrue(e instanceof AccessControlException);
    assertTrue("Permission denied messages must carry the username",e.getMessage().contains(USER1_NAME));
  }
}
