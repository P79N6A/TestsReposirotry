@Test(timeout=60000) public void testAllocationCannotBeBlockedWhenFormerQueueReachedItsLimit() throws Exception {
  CapacitySchedulerConfiguration newConf=(CapacitySchedulerConfiguration)TestUtils.getConfigurationWithMultipleQueues(conf);
  newConf.setQueues(CapacitySchedulerConfiguration.ROOT + ".c",new String[]{"c1","c2"});
  newConf.setCapacity(CapacitySchedulerConfiguration.ROOT + ".c.c1",10);
  newConf.setMaximumCapacity(CapacitySchedulerConfiguration.ROOT + ".c.c1",10);
  newConf.setCapacity(CapacitySchedulerConfiguration.ROOT + ".c.c2",90);
  newConf.setClass(CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,DominantResourceCalculator.class,ResourceCalculator.class);
  MockRM rm1=new MockRM(newConf);
  RMNodeLabelsManager nodeLabelsManager=new NullRMNodeLabelsManager();
  nodeLabelsManager.init(newConf);
  rm1.getRMContext().setNodeLabelManager(nodeLabelsManager);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",10 * GB);
  MockNM nm2=rm1.registerNode("h2:1234",10 * GB);
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"c1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  RMApp app2=rm1.submitApp(1 * GB,"app","user",null,"b");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm1,nm1);
  am1.allocate("*",2 * GB,1,new ArrayList<ContainerId>());
  am2.allocate("*",2 * GB,1,new ArrayList<ContainerId>());
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  FiCaSchedulerApp schedulerApp1=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  FiCaSchedulerApp schedulerApp2=cs.getApplicationAttempt(am2.getApplicationAttemptId());
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  rm1.drainEvents();
  Assert.assertEquals(1,schedulerApp1.getLiveContainers().size());
  Assert.assertEquals(2,schedulerApp2.getLiveContainers().size());
  rm1.close();
}
