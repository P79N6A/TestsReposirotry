@Test(timeout=60000) public void testUserLimitAllocationMultipleContainers() throws Exception {
  CapacitySchedulerConfiguration newConf=(CapacitySchedulerConfiguration)TestUtils.getConfigurationWithMultipleQueues(conf);
  newConf.setUserLimit("root.c",50);
  MockRM rm1=new MockRM(newConf);
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",1000 * GB);
  RMApp app1=rm1.submitApp(2 * GB,"app","user1",null,"c");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  RMApp app2=rm1.submitApp(2 * GB,"app","user2",null,"c");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm1,nm1);
  am1.allocate("*",5 * GB,1000,null);
  am1.allocate("h1",5 * GB,1000,null);
  am1.allocate(NetworkTopology.DEFAULT_RACK,5 * GB,1000,null);
  am2.allocate("*",5 * GB,1000,null);
  am2.allocate("h1",5 * GB,1000,null);
  am2.allocate(NetworkTopology.DEFAULT_RACK,5 * GB,1000,null);
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  FiCaSchedulerApp schedulerApp1=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  FiCaSchedulerApp schedulerApp2=cs.getApplicationAttempt(am2.getApplicationAttemptId());
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  Assert.assertEquals(101,schedulerApp1.getLiveContainers().size());
  Assert.assertEquals(100,schedulerApp2.getLiveContainers().size());
  rm1.close();
}
