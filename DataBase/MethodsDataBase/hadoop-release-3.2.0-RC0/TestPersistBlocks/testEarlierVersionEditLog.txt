/** 
 * Earlier versions of HDFS didn't persist block allocation to the edit log. This makes sure that we can still load an edit log when the OP_CLOSE is the opcode which adds all of the blocks. This is a regression test for HDFS-2773. This test uses a tarred pseudo-distributed cluster from Hadoop 1.0 which has a multi-block file. This is similar to the tests in {@link TestDFSUpgradeFromImage} but none of those images includea multi-block file.
 */
@Test public void testEarlierVersionEditLog() throws Exception {
  final Configuration conf=new HdfsConfiguration();
  String tarFile=System.getProperty("test.cache.data","build/test/cache") + "/" + HADOOP_1_0_MULTIBLOCK_TGZ;
  String testDir=PathUtils.getTestDirName(getClass());
  File dfsDir=new File(testDir,"image-1.0");
  if (dfsDir.exists() && !FileUtil.fullyDelete(dfsDir)) {
    throw new IOException("Could not delete dfs directory '" + dfsDir + "'");
  }
  FileUtil.unTar(new File(tarFile),new File(testDir));
  File nameDir=new File(dfsDir,"name");
  GenericTestUtils.assertExists(nameDir);
  File dataDir=new File(dfsDir,"data");
  GenericTestUtils.assertExists(dataDir);
  conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nameDir.getAbsolutePath());
  conf.set(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY,dataDir.getAbsolutePath());
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).manageDataDfsDirs(false).manageNameDfsDirs(false).numDataNodes(1).startupOption(StartupOption.UPGRADE).build();
  try {
    FileSystem fs=cluster.getFileSystem();
    Path testPath=new Path("/user/todd/4blocks");
    DFSTestUtil.readFile(fs,testPath);
    FSDataOutputStream stm=fs.append(testPath);
    try {
      stm.write(1);
    }
  finally {
      IOUtils.closeStream(stm);
    }
  }
  finally {
    cluster.shutdown();
  }
}
