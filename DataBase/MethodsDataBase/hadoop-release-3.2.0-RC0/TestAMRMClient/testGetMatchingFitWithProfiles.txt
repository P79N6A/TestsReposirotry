@Test(timeout=60000) public void testGetMatchingFitWithProfiles() throws Exception {
  teardown();
  conf.setBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,true);
  createClusterAndStartApplication(conf);
  AMRMClient<ContainerRequest> amClient=null;
  try {
    amClient=AMRMClient.<ContainerRequest>createAMRMClient();
    amClient.init(conf);
    amClient.start();
    amClient.registerApplicationMaster("Host",10000,"");
    ContainerRequest storedContainer1=new ContainerRequest(Resource.newInstance(0,0),nodes,racks,priority,"minimum");
    ContainerRequest storedContainer2=new ContainerRequest(Resource.newInstance(0,0),nodes,racks,priority,"default");
    ContainerRequest storedContainer3=new ContainerRequest(Resource.newInstance(0,0),nodes,racks,priority,"maximum");
    ContainerRequest storedContainer4=new ContainerRequest(Resource.newInstance(2048,1),nodes,racks,priority,"minimum");
    ContainerRequest storedContainer5=new ContainerRequest(Resource.newInstance(2048,1),nodes,racks,priority2,"default");
    ContainerRequest storedContainer6=new ContainerRequest(Resource.newInstance(2048,1),nodes,racks,priority,"default");
    ContainerRequest storedContainer7=new ContainerRequest(Resource.newInstance(0,0),nodes,racks,priority,"http");
    amClient.addContainerRequest(storedContainer1);
    amClient.addContainerRequest(storedContainer2);
    amClient.addContainerRequest(storedContainer3);
    amClient.addContainerRequest(storedContainer4);
    amClient.addContainerRequest(storedContainer5);
    amClient.addContainerRequest(storedContainer6);
    amClient.addContainerRequest(storedContainer7);
    List<? extends Collection<ContainerRequest>> matches;
    ContainerRequest storedRequest;
    matches=amClient.getMatchingRequests(priority,node,ExecutionType.GUARANTEED,Resource.newInstance(0,0),"minimum");
    verifyMatches(matches,1);
    storedRequest=matches.get(0).iterator().next();
    assertEquals(storedContainer1,storedRequest);
    amClient.removeContainerRequest(storedContainer1);
    matches=amClient.getMatchingRequests(priority,node,ExecutionType.GUARANTEED,Resource.newInstance(0,0),"default");
    verifyMatches(matches,2);
    int i=0;
    for (    ContainerRequest storedRequest1 : matches.get(0)) {
switch (i) {
case 0:
        assertEquals(storedContainer2,storedRequest1);
      break;
case 1:
    assertEquals(storedContainer7,storedRequest1);
  break;
}
i++;
}
amClient.removeContainerRequest(storedContainer5);
Resource testCapability3=Resource.newInstance(8192,8);
matches=amClient.getMatchingRequests(priority,node,testCapability3);
assertEquals(3,matches.size());
Resource testCapability4=Resource.newInstance(2048,1);
matches=amClient.getMatchingRequests(priority,node,testCapability4);
assertEquals(1,matches.size());
}
  finally {
if (amClient != null && amClient.getServiceState() == STATE.STARTED) {
amClient.stop();
}
}
}
