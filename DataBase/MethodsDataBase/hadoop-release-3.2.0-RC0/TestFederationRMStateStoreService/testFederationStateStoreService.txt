@Test public void testFederationStateStoreService() throws Exception {
  conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED,true);
  conf.set(YarnConfiguration.RM_CLUSTER_ID,subClusterId.getId());
  final MockRM rm=new MockRM(conf);
  rm.init(conf);
  stateStore=rm.getFederationStateStoreService().getStateStoreClient();
  GetSubClusterInfoResponse response=stateStore.getSubCluster(request);
  Assert.assertNull(response);
  rm.start();
  String capability=checkSubClusterInfo(SubClusterState.SC_NEW);
  Assert.assertTrue(capability.isEmpty());
  FederationStateStoreHeartbeat storeHeartbeat=rm.getFederationStateStoreService().getStateStoreHeartbeatThread();
  storeHeartbeat.run();
  capability=checkSubClusterInfo(SubClusterState.SC_RUNNING);
  checkClusterMetricsInfo(capability,0);
  rm.registerNode("127.0.0.1:1234",4 * 1024);
  storeHeartbeat.run();
  capability=checkSubClusterInfo(SubClusterState.SC_RUNNING);
  checkClusterMetricsInfo(capability,1);
  rm.getFederationStateStoreService().deregisterSubCluster(SubClusterDeregisterRequest.newInstance(subClusterId,SubClusterState.SC_UNREGISTERED));
  checkSubClusterInfo(SubClusterState.SC_UNREGISTERED);
  explicitFailover(rm);
  capability=checkSubClusterInfo(SubClusterState.SC_NEW);
  Assert.assertTrue(capability.isEmpty());
  storeHeartbeat=rm.getFederationStateStoreService().getStateStoreHeartbeatThread();
  storeHeartbeat.run();
  capability=checkSubClusterInfo(SubClusterState.SC_RUNNING);
  checkClusterMetricsInfo(capability,0);
  rm.registerNode("127.0.0.1:1234",4 * 1024);
  storeHeartbeat.run();
  capability=checkSubClusterInfo(SubClusterState.SC_RUNNING);
  checkClusterMetricsInfo(capability,1);
  rm.stop();
}
