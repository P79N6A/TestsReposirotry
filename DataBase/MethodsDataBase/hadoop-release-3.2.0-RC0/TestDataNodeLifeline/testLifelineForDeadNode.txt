@Test public void testLifelineForDeadNode() throws Exception {
  long initialCapacity=cluster.getNamesystem(0).getCapacityTotal();
  assertTrue(initialCapacity > 0);
  dn.setHeartbeatsDisabledForTests(true);
  cluster.setDataNodesDead();
  assertEquals("Capacity should be 0 after all DNs dead",0,cluster.getNamesystem(0).getCapacityTotal());
  bpsa.sendLifelineForTests();
  assertEquals("Lifeline should be ignored for dead node",0,cluster.getNamesystem(0).getCapacityTotal());
  dn.setHeartbeatsDisabledForTests(false);
  final DatanodeDescriptor dnDesc=cluster.getNamesystem(0).getBlockManager().getDatanodeManager().getDatanodes().iterator().next();
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      return dnDesc.isAlive() && dnDesc.isHeartbeatedSinceRegistration();
    }
  }
,100,5000);
  assertEquals("Capacity should include only live capacity",initialCapacity,cluster.getNamesystem(0).getCapacityTotal());
}
