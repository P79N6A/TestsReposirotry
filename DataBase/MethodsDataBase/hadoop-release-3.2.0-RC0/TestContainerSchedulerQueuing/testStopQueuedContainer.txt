/** 
 * Start running one GUARANTEED container and queue two OPPORTUNISTIC ones. Try killing one of the two queued containers.
 * @throws Exception
 */
@Test public void testStopQueuedContainer() throws Exception {
  containerManager.start();
  List<StartContainerRequest> list=new ArrayList<>();
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(0),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(2048,1),context.getContainerTokenSecretManager(),null,ExecutionType.GUARANTEED)));
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(1),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(2),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  Thread.sleep(2000);
  int runningContainersNo=0;
  int queuedContainersNo=0;
  List<ContainerId> statList=new ArrayList<ContainerId>();
  for (int i=0; i < 3; i++) {
    statList.add(createContainerId(i));
  }
  GetContainerStatusesRequest statRequest=GetContainerStatusesRequest.newInstance(statList);
  List<ContainerStatus> containerStatuses=containerManager.getContainerStatuses(statRequest).getContainerStatuses();
  for (  ContainerStatus status : containerStatuses) {
    if (ContainerSubState.RUNNING == status.getContainerSubState()) {
      runningContainersNo++;
    }
 else     if (ContainerSubState.SCHEDULED == status.getContainerSubState()) {
      queuedContainersNo++;
    }
    System.out.println("\nStatus : [" + status + "]\n");
  }
  Assert.assertEquals(1,runningContainersNo);
  Assert.assertEquals(2,queuedContainersNo);
  StopContainersRequest stopRequest=StopContainersRequest.newInstance(Arrays.asList(createContainerId(1)));
  containerManager.stopContainers(stopRequest);
  Thread.sleep(2000);
  statList.clear();
  for (int i=0; i < 3; i++) {
    statList.add(createContainerId(i));
  }
  statRequest=GetContainerStatusesRequest.newInstance(statList);
  HashMap<ContainerSubState,ContainerStatus> map=new HashMap<>();
  for (int i=0; i < 10; i++) {
    containerStatuses=containerManager.getContainerStatuses(statRequest).getContainerStatuses();
    for (    ContainerStatus status : containerStatuses) {
      System.out.println("\nStatus : [" + status + "]\n");
      map.put(status.getContainerSubState(),status);
      if (map.containsKey(ContainerSubState.RUNNING) && map.containsKey(ContainerSubState.SCHEDULED) && map.containsKey(ContainerSubState.DONE)) {
        break;
      }
      Thread.sleep(1000);
    }
  }
  Assert.assertEquals(createContainerId(0),map.get(ContainerSubState.RUNNING).getContainerId());
  Assert.assertEquals(createContainerId(1),map.get(ContainerSubState.DONE).getContainerId());
  Assert.assertEquals(createContainerId(2),map.get(ContainerSubState.SCHEDULED).getContainerId());
}
