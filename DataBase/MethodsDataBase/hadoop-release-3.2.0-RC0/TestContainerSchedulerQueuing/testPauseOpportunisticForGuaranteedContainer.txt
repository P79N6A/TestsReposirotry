/** 
 * Submit two OPPORTUNISTIC and one GUARANTEED containers. The resources requests by each container as such that only one can run in parallel. Thus, the OPPORTUNISTIC container that started running, will be paused for the GUARANTEED container to start. Once the GUARANTEED container finishes its execution, the remaining OPPORTUNISTIC container will be executed.
 * @throws Exception
 */
@Test public void testPauseOpportunisticForGuaranteedContainer() throws Exception {
  containerManager.start();
  containerManager.getContainerScheduler().setUsePauseEventForPreemption(true);
  Listener listener=new Listener();
  ((NodeManager.DefaultContainerStateListener)containerManager.getContext().getContainerStateTransitionListener()).addListener(listener);
  List<StartContainerRequest> list=new ArrayList<>();
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(0),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(2048,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  BaseContainerManagerTest.waitForNMContainerState(containerManager,createContainerId(0),ContainerState.RUNNING,40);
  list=new ArrayList<>();
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(1),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(2048,1),context.getContainerTokenSecretManager(),null,ExecutionType.GUARANTEED)));
  allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  BaseContainerManagerTest.waitForNMContainerState(containerManager,createContainerId(1),ContainerState.RUNNING,40);
  List<ContainerId> statList=new ArrayList<ContainerId>();
  for (int i=0; i < 2; i++) {
    statList.add(createContainerId(i));
  }
  GetContainerStatusesRequest statRequest=GetContainerStatusesRequest.newInstance(statList);
  List<ContainerStatus> containerStatuses=containerManager.getContainerStatuses(statRequest).getContainerStatuses();
  for (  ContainerStatus status : containerStatuses) {
    if (status.getContainerId().equals(createContainerId(0))) {
      Assert.assertTrue(status.getDiagnostics().contains("Container Paused to make room for Guaranteed Container"));
    }
 else     if (status.getContainerId().equals(createContainerId(1))) {
      Assert.assertEquals(org.apache.hadoop.yarn.api.records.ContainerState.RUNNING,status.getState());
    }
    System.out.println("\nStatus : [" + status + "]\n");
  }
  BaseContainerManagerTest.waitForNMContainerState(containerManager,createContainerId(1),ContainerState.DONE,40);
  BaseContainerManagerTest.waitForNMContainerState(containerManager,createContainerId(0),ContainerState.DONE,40);
  List<org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState> containerStates=listener.states.get(createContainerId(0));
  Assert.assertEquals(Arrays.asList(org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.NEW,org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.SCHEDULED,org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING,org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.PAUSING,org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.PAUSED,org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RESUMING,org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING,org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.EXITED_WITH_SUCCESS,org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.DONE),containerStates);
  List<ContainerEventType> containerEventTypes=listener.events.get(createContainerId(0));
  Assert.assertEquals(Arrays.asList(ContainerEventType.INIT_CONTAINER,ContainerEventType.CONTAINER_LAUNCHED,ContainerEventType.PAUSE_CONTAINER,ContainerEventType.CONTAINER_PAUSED,ContainerEventType.RESUME_CONTAINER,ContainerEventType.CONTAINER_RESUMED,ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS,ContainerEventType.CONTAINER_RESOURCES_CLEANEDUP),containerEventTypes);
}
