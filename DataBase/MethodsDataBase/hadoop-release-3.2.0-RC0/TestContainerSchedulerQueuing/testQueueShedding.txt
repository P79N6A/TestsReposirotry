/** 
 * 1. Submit a long running GUARANTEED container to hog all NM resources. 2. Submit 6 OPPORTUNISTIC containers, all of which will be queued. 3. Update the Queue Limit to 2. 4. Ensure only 2 containers remain in the Queue, and 4 are de-Queued.
 * @throws Exception
 */
@Test public void testQueueShedding() throws Exception {
  containerManager.start();
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  containerLaunchContext.setCommands(Arrays.asList("sleep 100"));
  List<StartContainerRequest> list=new ArrayList<>();
  list.add(StartContainerRequest.newInstance(containerLaunchContext,createContainerToken(createContainerId(0),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(2048,1),context.getContainerTokenSecretManager(),null,ExecutionType.GUARANTEED)));
  StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  list=new ArrayList<>();
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(1),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(2),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(3),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(4),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(5),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  list.add(StartContainerRequest.newInstance(recordFactory.newRecordInstance(ContainerLaunchContext.class),createContainerToken(createContainerId(6),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(512,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  ContainerScheduler containerScheduler=containerManager.getContainerScheduler();
  int numTries=30;
  while ((containerScheduler.getNumQueuedContainers() < 6) && (numTries-- > 0)) {
    Thread.sleep(100);
  }
  Assert.assertEquals(6,containerScheduler.getNumQueuedContainers());
  ContainerQueuingLimit containerQueuingLimit=ContainerQueuingLimit.newInstance();
  containerQueuingLimit.setMaxQueueLength(2);
  containerScheduler.updateQueuingLimit(containerQueuingLimit);
  numTries=30;
  while ((containerScheduler.getNumQueuedContainers() > 2) && (numTries-- > 0)) {
    Thread.sleep(100);
  }
  Assert.assertEquals(2,containerScheduler.getNumQueuedContainers());
  List<ContainerId> statList=new ArrayList<ContainerId>();
  for (int i=1; i < 7; i++) {
    statList.add(createContainerId(i));
  }
  GetContainerStatusesRequest statRequest=GetContainerStatusesRequest.newInstance(statList);
  List<ContainerStatus> containerStatuses=containerManager.getContainerStatuses(statRequest).getContainerStatuses();
  int deQueuedContainers=0;
  int numQueuedOppContainers=0;
  for (  ContainerStatus status : containerStatuses) {
    if (status.getExecutionType() == ExecutionType.OPPORTUNISTIC) {
      if (status.getDiagnostics().contains("Container De-queued to meet NM queuing limits")) {
        deQueuedContainers++;
      }
      if (ContainerSubState.SCHEDULED == status.getContainerSubState()) {
        numQueuedOppContainers++;
      }
    }
  }
  Assert.assertEquals(4,deQueuedContainers);
  Assert.assertEquals(2,numQueuedOppContainers);
}
