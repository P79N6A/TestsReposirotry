@Test public void testContainerLaunchEnvironment() throws IOException, ConfigurationException, PrivilegedOperationException {
  String appSubmitter="nobody";
  String appId="APP_ID";
  String containerId="CONTAINER_ID";
  Container container=mock(Container.class);
  ContainerId cId=mock(ContainerId.class);
  ContainerLaunchContext context=mock(ContainerLaunchContext.class);
  HashMap<String,String> env=new HashMap<String,String>();
  env.put("FROM_CLIENT","1");
  when(container.getContainerId()).thenReturn(cId);
  when(container.getLaunchContext()).thenReturn(context);
  when(cId.toString()).thenReturn(containerId);
  when(context.getEnvironment()).thenReturn(env);
  Path scriptPath=new Path("file:///bin/echo");
  Path tokensPath=new Path("file:///dev/null");
  Path workDir=new Path("/tmp");
  Path pidFile=new Path(workDir,"pid.txt");
  mockExecMockRuntime.activateContainer(cId,pidFile);
  mockExecMockRuntime.launchContainer(new ContainerStartContext.Builder().setContainer(container).setNmPrivateContainerScriptPath(scriptPath).setNmPrivateTokensPath(tokensPath).setUser(appSubmitter).setAppId(appId).setContainerWorkDir(workDir).setLocalDirs(dirsHandler.getLocalDirs()).setLogDirs(dirsHandler.getLogDirs()).setFilecacheDirs(new ArrayList<>()).setUserLocalDirs(new ArrayList<>()).setContainerLocalDirs(new ArrayList<>()).setContainerLogDirs(new ArrayList<>()).setUserFilecacheDirs(new ArrayList<>()).setApplicationLocalDirs(new ArrayList<>()).build());
  ArgumentCaptor<PrivilegedOperation> opCaptor=ArgumentCaptor.forClass(PrivilegedOperation.class);
  verify(mockPrivilegedExec,times(1)).executePrivilegedOperation(anyListOf(String.class),opCaptor.capture(),any(File.class),eq(null),eq(false),eq(false));
}
