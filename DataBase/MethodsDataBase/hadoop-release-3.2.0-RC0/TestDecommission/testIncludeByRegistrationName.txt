/** 
 * Test using a "registration name" in a host include file. Registration names are DataNode names specified in the configuration by dfs.datanode.hostname.  The DataNode will send this name to the NameNode as part of its registration.  Registration names are helpful when you want to override the normal first result of DNS resolution on the NameNode.  For example, a given datanode IP may map to two hostnames, and you may want to choose which hostname is used internally in the cluster. It is not recommended to use a registration name which is not also a valid DNS hostname for the DataNode.  See HDFS-5237 for background.
 */
@Ignore @Test(timeout=360000) public void testIncludeByRegistrationName() throws Exception {
  final String registrationName="127.0.0.100";
  final String nonExistentDn="127.0.0.10";
  getConf().set(DFSConfigKeys.DFS_DATANODE_HOST_NAME_KEY,registrationName);
  startCluster(1,1,false,null,true);
  initIncludeHost(nonExistentDn);
  refreshNodes(0);
  LOG.info("Waiting for DN to be marked as dead.");
  final DFSClient client=getDfsClient(0);
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      BlockManagerTestUtil.checkHeartbeat(getCluster().getNamesystem().getBlockManager());
      try {
        DatanodeInfo info[]=client.datanodeReport(DatanodeReportType.DEAD);
        return info.length == 1;
      }
 catch (      IOException e) {
        LOG.warn("Failed to check dead DNs",e);
        return false;
      }
    }
  }
,500,5000);
  int dnPort=getCluster().getDataNodes().get(0).getXferPort();
  initIncludeHost(registrationName + ":" + dnPort);
  refreshNodes(0);
  getCluster().restartDataNode(0);
  getCluster().triggerHeartbeats();
  LOG.info("Waiting for DN to come back.");
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      BlockManagerTestUtil.checkHeartbeat(getCluster().getNamesystem().getBlockManager());
      try {
        DatanodeInfo info[]=client.datanodeReport(DatanodeReportType.LIVE);
        if (info.length == 1) {
          Assert.assertFalse(info[0].isDecommissioned());
          Assert.assertFalse(info[0].isDecommissionInProgress());
          assertEquals(registrationName,info[0].getHostName());
          return true;
        }
      }
 catch (      IOException e) {
        LOG.warn("Failed to check dead DNs",e);
      }
      return false;
    }
  }
,500,5000);
}
