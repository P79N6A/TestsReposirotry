@Test public void testNotifyStoreOperationFailed() throws Exception {
  RMStateStore store=new MemoryRMStateStore(){
    @Override public synchronized void removeRMDelegationTokenState(    RMDelegationTokenIdentifier rmDTIdentifier) throws Exception {
      throw new Exception("testNotifyStoreOperationFailed");
    }
  }
;
  Configuration conf=new Configuration();
  conf.setBoolean(YarnConfiguration.RM_HA_ENABLED,true);
  store.init(conf);
  ResourceManager mockRM=mock(ResourceManager.class);
  store.setResourceManager(mockRM);
  store.setRMDispatcher(new RMStateStoreTestBase.TestDispatcher());
  RMDelegationTokenIdentifier mockTokenId=mock(RMDelegationTokenIdentifier.class);
  store.removeRMDelegationToken(mockTokenId);
  assertTrue("RMStateStore should have been in fenced state",store.isFencedState());
  store=new MemoryRMStateStore(){
    @Override public synchronized void removeRMDelegationToken(    RMDelegationTokenIdentifier rmDTIdentifier){
      notifyStoreOperationFailed(new Exception("testNotifyStoreOperationFailed"));
    }
  }
;
  store.init(conf);
  store.setResourceManager(mockRM);
  store.setRMDispatcher(new RMStateStoreTestBase.TestDispatcher());
  store.removeRMDelegationToken(mockTokenId);
  assertTrue("RMStateStore should have been in fenced state",store.isFencedState());
}
