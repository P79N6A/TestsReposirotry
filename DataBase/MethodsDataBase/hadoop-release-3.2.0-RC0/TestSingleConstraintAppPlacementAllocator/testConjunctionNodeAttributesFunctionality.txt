@Test public void testConjunctionNodeAttributesFunctionality(){
  SchedulingRequest schedulingRequest1=SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.and(PlacementConstraints.targetNodeAttribute(PlacementConstraints.NODE,NodeAttributeOpCode.NE,PlacementConstraints.PlacementTargets.nodeAttribute("python","3")),PlacementConstraints.targetNodeAttribute(PlacementConstraints.NODE,NodeAttributeOpCode.EQ,PlacementConstraints.PlacementTargets.nodeAttribute("java","1.8"))).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build();
  allocator=new SingleConstraintAppPlacementAllocator();
  allocator.initialize(appSchedulingInfo,schedulerRequestKey,rmContext);
  allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest1,false);
  Set<NodeAttribute> attributes=new HashSet<>();
  attributes.add(NodeAttribute.newInstance("python",NodeAttributeType.STRING,"3"));
  attributes.add(NodeAttribute.newInstance("java",NodeAttributeType.STRING,"1.8"));
  boolean result=allocator.canAllocate(NodeType.NODE_LOCAL,TestUtils.getMockNodeWithAttributes("host1","/rack1",123,1024,attributes));
  Assert.assertFalse("Allocation should fail as python=3 exists in node",result);
  allocator=new SingleConstraintAppPlacementAllocator();
  allocator.initialize(appSchedulingInfo,schedulerRequestKey,rmContext);
  allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest1,false);
  attributes=new HashSet<>();
  attributes.add(NodeAttribute.newInstance("python",NodeAttributeType.STRING,"2"));
  attributes.add(NodeAttribute.newInstance("java",NodeAttributeType.STRING,"1.8"));
  result=allocator.canAllocate(NodeType.NODE_LOCAL,TestUtils.getMockNodeWithAttributes("host1","/rack1",123,1024,attributes));
  Assert.assertTrue("Allocation should be success as python=2 exists in node",result);
  SchedulingRequest schedulingRequest2=SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.or(PlacementConstraints.targetNodeAttribute(PlacementConstraints.NODE,NodeAttributeOpCode.NE,PlacementConstraints.PlacementTargets.nodeAttribute("python","3")),PlacementConstraints.targetNodeAttribute(PlacementConstraints.NODE,NodeAttributeOpCode.EQ,PlacementConstraints.PlacementTargets.nodeAttribute("java","1.8"))).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build();
  allocator=new SingleConstraintAppPlacementAllocator();
  allocator.initialize(appSchedulingInfo,schedulerRequestKey,rmContext);
  allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest2,false);
  attributes=new HashSet<>();
  attributes.add(NodeAttribute.newInstance("python",NodeAttributeType.STRING,"3"));
  attributes.add(NodeAttribute.newInstance("java",NodeAttributeType.STRING,"1.8"));
  result=allocator.canAllocate(NodeType.NODE_LOCAL,TestUtils.getMockNodeWithAttributes("host1","/rack1",123,1024,attributes));
  Assert.assertTrue("Allocation should be success as java=1.8 exists in node",result);
  allocator=new SingleConstraintAppPlacementAllocator();
  allocator.initialize(appSchedulingInfo,schedulerRequestKey,rmContext);
  allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest2,false);
  attributes=new HashSet<>();
  attributes.add(NodeAttribute.newInstance("python",NodeAttributeType.STRING,"3"));
  attributes.add(NodeAttribute.newInstance("java",NodeAttributeType.STRING,"1.7"));
  result=allocator.canAllocate(NodeType.NODE_LOCAL,TestUtils.getMockNodeWithAttributes("host1","/rack1",123,1024,attributes));
  Assert.assertFalse("Allocation should fail as java=1.8 doesnt exist in node",result);
}
