@Test public void testSchedulingRequestUpdate(){
  SchedulingRequest schedulingRequest=SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build();
  allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,false);
  allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,false);
  schedulingRequest.getResourceSizing().setNumAllocations(10);
  allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,false);
  schedulingRequest.getResourceSizing().setResources(Resource.newInstance(2048,1));
  assertInvalidSchedulingRequest(schedulingRequest,false);
  schedulingRequest=SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetCardinality(PlacementConstraints.NODE,0,1,PlacementConstraints.PlacementTargets.allocationTag("mapper"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build();
  assertInvalidSchedulingRequest(schedulingRequest,false);
  int existingNumAllocations=allocator.getSchedulingRequest().getResourceSizing().getNumAllocations();
  schedulingRequest=SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build();
  allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,true);
  Assert.assertEquals(existingNumAllocations + 1,allocator.getSchedulingRequest().getResourceSizing().getNumAllocations());
}
