@Test public void testSchedulingRequestValidation(){
  assertValidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build());
  Assert.assertEquals("",allocator.getTargetNodePartition());
  assertValidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("x")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build());
  Assert.assertEquals("x",allocator.getTargetNodePartition());
  assertValidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build());
  Assert.assertEquals("",allocator.getTargetNodePartition());
  assertValidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build());
  Assert.assertEquals("",allocator.getTargetNodePartition());
  assertInvalidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer")).build()).build(),true);
  assertInvalidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE).build()).build(),true);
  assertInvalidSchedulingRequest(SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build(),true);
}
