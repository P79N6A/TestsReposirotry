@Test public void testFunctionality() throws InvalidAllocationTagsQueryException {
  SchedulingRequest schedulingRequest=SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build();
  allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,false);
  allocator.canAllocate(NodeType.NODE_LOCAL,TestUtils.getMockNode("host1","/rack1",123,1024));
  verify(spyAllocationTagsManager,Mockito.times(1)).getNodeCardinalityByOp(eq(NodeId.fromString("host1:123")),any(AllocationTags.class),any(LongBinaryOperator.class));
  allocator=new SingleConstraintAppPlacementAllocator();
  allocator.initialize(appSchedulingInfo,schedulerRequestKey,rmContext);
  schedulingRequest=SchedulingRequest.newBuilder().executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED)).allocationRequestId(10L).priority(Priority.newInstance(1)).placementConstraintExpression(PlacementConstraints.targetNotIn(PlacementConstraints.NODE,PlacementConstraints.PlacementTargets.allocationTag("mapper","reducer"),PlacementConstraints.PlacementTargets.nodePartition("x")).build()).resourceSizing(ResourceSizing.newInstance(1,Resource.newInstance(1024,1))).build();
  allocator.updatePendingAsk(schedulerRequestKey,schedulingRequest,false);
  allocator.canAllocate(NodeType.NODE_LOCAL,TestUtils.getMockNode("host1","/rack1",123,1024));
  verify(spyAllocationTagsManager,Mockito.atLeast(1)).getNodeCardinalityByOp(eq(NodeId.fromString("host1:123")),any(AllocationTags.class),any(LongBinaryOperator.class));
  SchedulerNode node1=mock(SchedulerNode.class);
  when(node1.getPartition()).thenReturn("x");
  when(node1.getNodeID()).thenReturn(NodeId.fromString("host1:123"));
  Assert.assertTrue(allocator.precheckNode(node1,SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));
  SchedulerNode node2=mock(SchedulerNode.class);
  when(node1.getPartition()).thenReturn("");
  when(node1.getNodeID()).thenReturn(NodeId.fromString("host2:123"));
  Assert.assertFalse(allocator.precheckNode(node2,SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));
}
