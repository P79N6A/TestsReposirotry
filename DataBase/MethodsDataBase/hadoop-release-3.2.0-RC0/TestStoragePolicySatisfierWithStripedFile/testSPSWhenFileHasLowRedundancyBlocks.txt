/** 
 * Test SPS for low redundant file blocks. 1. Create cluster with 10 datanode. 1. Create one striped file with default EC Policy. 2. Set policy and call satisfyStoragePolicy for file. 3. Stop NameNode and Datanodes. 4. Start NameNode with 5 datanode and wait for block movement. 5. Start remaining 5 datanode. 6. All replica  should be moved in proper storage based on policy.
 */
@Test(timeout=300000) public void testSPSWhenFileHasLowRedundancyBlocks() throws Exception {
  int numOfDatanodes=9;
  int storagesPerDatanode=2;
  long capacity=20 * defaultStripeBlockSize;
  long[][] capacities=new long[numOfDatanodes][storagesPerDatanode];
  for (int i=0; i < numOfDatanodes; i++) {
    for (int j=0; j < storagesPerDatanode; j++) {
      capacities[i][j]=capacity;
    }
  }
  conf.set(DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_KEY,"3000");
  conf.set(DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_SELF_RETRY_TIMEOUT_MILLIS_KEY,"5000");
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numOfDatanodes).storagesPerDatanode(storagesPerDatanode).storageTypes(new StorageType[][]{{StorageType.DISK,StorageType.ARCHIVE},{StorageType.DISK,StorageType.ARCHIVE},{StorageType.DISK,StorageType.ARCHIVE},{StorageType.DISK,StorageType.ARCHIVE},{StorageType.DISK,StorageType.ARCHIVE},{StorageType.DISK,StorageType.ARCHIVE},{StorageType.DISK,StorageType.ARCHIVE},{StorageType.DISK,StorageType.ARCHIVE},{StorageType.DISK,StorageType.ARCHIVE}}).storageCapacities(capacities).build();
  try {
    cluster.waitActive();
    startSPS();
    DistributedFileSystem fs=cluster.getFileSystem();
    fs.enableErasureCodingPolicy(StripedFileTestUtil.getDefaultECPolicy().getName());
    Path barDir=new Path("/bar");
    fs.mkdirs(barDir);
    fs.setErasureCodingPolicy(barDir,StripedFileTestUtil.getDefaultECPolicy().getName());
    final Path fooFile=new Path("/bar/foo");
    long fileLen=cellSize * dataBlocks;
    DFSTestUtil.createFile(cluster.getFileSystem(),fooFile,fileLen,(short)3,0);
    fs.setStoragePolicy(barDir,"COLD");
    List<DataNodeProperties> list=new ArrayList<>(numOfDatanodes);
    for (int i=0; i < numOfDatanodes; i++) {
      list.add(cluster.stopDataNode(0));
    }
    cluster.restartNameNodes();
    for (int i=0; i < 5; i++) {
      cluster.restartDataNode(list.get(i),false);
    }
    cluster.waitActive();
    fs.satisfyStoragePolicy(fooFile);
    DFSTestUtil.waitExpectedStorageType(fooFile.toString(),StorageType.ARCHIVE,5,30000,cluster.getFileSystem());
    for (int i=numOfDatanodes - 1; i >= 5; i--) {
      cluster.restartDataNode(list.get(i),false);
    }
    cluster.waitActive();
    waitExpectedStorageType(cluster,fooFile.toString(),fileLen,StorageType.ARCHIVE,9,9,60000);
  }
  finally {
    cluster.shutdown();
    sps.stopGracefully();
  }
}
