/** 
 * Tests to verify that for the given path, no blocks under the given path will be scheduled for block movement as there are no available datanode with required storage type. For example, there are two block for a file: File1 => blk_1[locations=A(DISK),B(DISK),C(DISK)], blk_2[locations=A(DISK),B(DISK),C(DISK)]. Now, set storage policy to COLD. No datanode is available with storage type ARCHIVE. SPS won't schedule any block movement for this path.
 */
@Test(timeout=300000) public void testWhenNoTargetDatanodeToSatisfyStoragePolicy() throws Exception {
  int numOfDatanodes=10;
  int storagesPerDatanode=2;
  long capacity=20 * defaultStripeBlockSize;
  long[][] capacities=new long[numOfDatanodes][storagesPerDatanode];
  for (int i=0; i < numOfDatanodes; i++) {
    for (int j=0; j < storagesPerDatanode; j++) {
      capacities[i][j]=capacity;
    }
  }
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numOfDatanodes).storagesPerDatanode(storagesPerDatanode).storageTypes(new StorageType[][]{{StorageType.DISK,StorageType.DISK},{StorageType.DISK,StorageType.DISK},{StorageType.DISK,StorageType.DISK},{StorageType.DISK,StorageType.DISK},{StorageType.DISK,StorageType.DISK},{StorageType.DISK,StorageType.DISK},{StorageType.DISK,StorageType.DISK},{StorageType.DISK,StorageType.DISK},{StorageType.DISK,StorageType.DISK},{StorageType.DISK,StorageType.DISK}}).storageCapacities(capacities).build();
  HdfsAdmin hdfsAdmin=new HdfsAdmin(FileSystem.getDefaultUri(conf),conf);
  try {
    cluster.waitActive();
    startSPS();
    DistributedFileSystem dfs=cluster.getFileSystem();
    dfs.enableErasureCodingPolicy(StripedFileTestUtil.getDefaultECPolicy().getName());
    ClientProtocol client=NameNodeProxies.createProxy(conf,cluster.getFileSystem(0).getUri(),ClientProtocol.class).getProxy();
    String barDir="/bar";
    client.mkdirs(barDir,new FsPermission((short)777),true);
    client.setStoragePolicy(barDir,HdfsConstants.HOT_STORAGE_POLICY_NAME);
    client.setErasureCodingPolicy(barDir,StripedFileTestUtil.getDefaultECPolicy().getName());
    final String fooFile="/bar/foo";
    long fileLen=cellSize * dataBlocks;
    DFSTestUtil.createFile(cluster.getFileSystem(),new Path(fooFile),fileLen,(short)3,0);
    LocatedBlocks locatedBlocks=client.getBlockLocations(fooFile,0,fileLen);
    for (    LocatedBlock lb : locatedBlocks.getLocatedBlocks()) {
      for (      StorageType type : lb.getStorageTypes()) {
        Assert.assertEquals(StorageType.DISK,type);
      }
    }
    StripedFileTestUtil.verifyLocatedStripedBlocks(locatedBlocks,dataBlocks + parityBlocks);
    client.setStoragePolicy(barDir,"COLD");
    hdfsAdmin.satisfyStoragePolicy(new Path(fooFile));
    LOG.info("Sets storage policy to COLD and invoked satisfyStoragePolicy");
    cluster.triggerHeartbeats();
    waitForAttemptedItems(1,30000);
    waitExpectedStorageType(cluster,fooFile,fileLen,StorageType.DISK,9,9,60000);
    waitForAttemptedItems(1,30000);
  }
  finally {
    cluster.shutdown();
    sps.stopGracefully();
  }
}
