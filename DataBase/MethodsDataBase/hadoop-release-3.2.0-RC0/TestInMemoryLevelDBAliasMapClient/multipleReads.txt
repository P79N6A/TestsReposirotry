@Test public void multipleReads() throws IOException {
  levelDBAliasMapServer.setConf(conf);
  levelDBAliasMapServer.start();
  inMemoryLevelDBAliasMapClient.setConf(conf);
  Random r=new Random();
  List<FileRegion> expectedFileRegions=r.ints(0,200).limit(50).boxed().map(i -> generateRandomFileRegion(i)).collect(Collectors.toList());
  BlockAliasMap.Reader<FileRegion> reader=inMemoryLevelDBAliasMapClient.getReader(null,BPID);
  BlockAliasMap.Writer<FileRegion> writer=inMemoryLevelDBAliasMapClient.getWriter(null,BPID);
  ExecutorService executor=Executors.newCachedThreadPool();
  List<ReadThread> readThreads=expectedFileRegions.stream().map(fileRegion -> new ReadThread(fileRegion.getBlock(),reader,4000)).collect(Collectors.toList());
  List<? extends Future<?>> readFutures=readThreads.stream().map(readThread -> executor.submit(readThread)).collect(Collectors.toList());
  List<? extends Future<?>> writeFutures=expectedFileRegions.stream().map(fileRegion -> new WriteThread(fileRegion.getBlock(),fileRegion.getProvidedStorageLocation(),writer,1000)).map(writeThread -> executor.submit(writeThread)).collect(Collectors.toList());
  readFutures.stream().map(readFuture -> {
    try {
      return readFuture.get();
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(e);
    }
catch (    ExecutionException e) {
      throw new RuntimeException(e);
    }
  }
).collect(Collectors.toList());
  List<FileRegion> actualFileRegions=readThreads.stream().map(readThread -> readThread.getFileRegion().get()).collect(Collectors.toList());
  assertThat(actualFileRegions).containsExactlyInAnyOrder(expectedFileRegions.toArray(new FileRegion[0]));
}
