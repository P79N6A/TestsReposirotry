/** 
 * Reserve at a lower priority and verify the lower priority request gets allocated
 */
@Test(timeout=5000) public void testReservationWithMultiplePriorities() throws IOException {
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(2048,2));
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
  FSAppAttempt app1=scheduler.getSchedulerApp(createSchedulingRequest(1024,1,"queue","user",1));
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Basic allocation failed",1,app1.getLiveContainers().size());
  ApplicationAttemptId attId=createSchedulingRequest(2048,2,"queue1","user1",1,2);
  FSAppAttempt app2=scheduler.getSchedulerApp(attId);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Reservation at lower priority failed",1,app2.getReservedContainers().size());
  createSchedulingRequestExistingApplication(2048,2,1,attId);
  ContainerId containerId=app1.getLiveContainers().iterator().next().getContainerId();
  scheduler.allocate(app1.getApplicationAttemptId(),new ArrayList<>(),null,Arrays.asList(containerId),null,null,NULL_UPDATE_REQUESTS);
  scheduler.handle(updateEvent);
  Collection<RMContainer> liveContainers=app2.getLiveContainers();
  assertEquals("Allocation post completion failed",1,liveContainers.size());
  assertEquals("High prio container allocated against low prio reservation",2,liveContainers.iterator().next().getContainer().getPriority().getPriority());
}
