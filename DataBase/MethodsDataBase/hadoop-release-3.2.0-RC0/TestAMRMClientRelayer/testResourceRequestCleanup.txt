/** 
 * Test the proper handling of removal/cancel of resource requests.
 */
@Test public void testResourceRequestCleanup() throws YarnException, IOException {
  this.asks.add(createResourceRequest(0,"node",2048,1,1,ExecutionType.GUARANTEED,1));
  this.asks.add(createResourceRequest(0,"rack",2048,1,1,ExecutionType.GUARANTEED,1));
  this.asks.add(createResourceRequest(0,ResourceRequest.ANY,2048,1,1,ExecutionType.GUARANTEED,2));
  this.relayer.allocate(getAllocateRequest());
  assertAsksAndReleases(3,0);
  Assert.assertEquals(1,this.relayer.getRemotePendingAsks().size());
  ResourceRequestSet set=this.relayer.getRemotePendingAsks().values().iterator().next();
  Assert.assertEquals(3,set.getAsks().size());
  clearAllocateRequestLists();
  this.asks.add(createResourceRequest(0,"node",2048,1,1,ExecutionType.GUARANTEED,0));
  this.asks.add(createResourceRequest(0,ResourceRequest.ANY,2048,1,1,ExecutionType.GUARANTEED,1));
  this.relayer.allocate(getAllocateRequest());
  assertAsksAndReleases(2,0);
  Assert.assertEquals(1,relayer.getRemotePendingAsks().size());
  set=this.relayer.getRemotePendingAsks().values().iterator().next();
  Assert.assertEquals(2,set.getAsks().size());
  clearAllocateRequestLists();
  this.asks.add(createResourceRequest(0,ResourceRequest.ANY,2048,1,1,ExecutionType.GUARANTEED,0));
  this.relayer.allocate(AllocateRequest.newInstance(0,0,asks,null,null));
  assertAsksAndReleases(1,0);
  Assert.assertEquals(0,this.relayer.getRemotePendingAsks().size());
}
