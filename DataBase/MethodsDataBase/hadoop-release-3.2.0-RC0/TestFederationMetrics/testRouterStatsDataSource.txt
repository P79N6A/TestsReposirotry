@Test public void testRouterStatsDataSource() throws IOException, JSONException {
  FederationMetrics metrics=getRouter().getMetrics();
  String jsonString=metrics.getRouters();
  JSONObject jsonObject=new JSONObject(jsonString);
  Iterator<?> keys=jsonObject.keys();
  int routersFound=0;
  while (keys.hasNext()) {
    JSONObject json=jsonObject.getJSONObject((String)keys.next());
    String address=json.getString("address");
    assertNotNullAndNotEmpty(address);
    RouterState router=findMockRouter(address);
    assertNotNull(router);
    assertEquals(router.getStatus().toString(),json.getString("status"));
    assertEquals(router.getCompileInfo(),json.getString("compileInfo"));
    assertEquals(router.getVersion(),json.getString("version"));
    assertEquals(router.getDateStarted(),json.getLong("dateStarted"));
    assertEquals(router.getDateCreated(),json.getLong("dateCreated"));
    assertEquals(router.getDateModified(),json.getLong("dateModified"));
    StateStoreVersion version=router.getStateStoreVersion();
    assertEquals(FederationMetrics.getDateString(version.getMembershipVersion()),json.get("lastMembershipUpdate"));
    assertEquals(FederationMetrics.getDateString(version.getMountTableVersion()),json.get("lastMountTableUpdate"));
    assertEquals(version.getMembershipVersion(),json.get("membershipVersion"));
    assertEquals(version.getMountTableVersion(),json.get("mountTableVersion"));
    routersFound++;
  }
  assertEquals(getMockRouters().size(),routersFound);
}
