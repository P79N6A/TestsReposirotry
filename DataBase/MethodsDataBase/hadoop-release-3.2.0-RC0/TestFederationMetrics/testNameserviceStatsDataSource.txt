@Test public void testNameserviceStatsDataSource() throws IOException, JSONException {
  FederationMetrics metrics=getRouter().getMetrics();
  String jsonString=metrics.getNameservices();
  JSONObject jsonObject=new JSONObject(jsonString);
  Iterator<?> keys=jsonObject.keys();
  int nameservicesFound=0;
  while (keys.hasNext()) {
    JSONObject json=jsonObject.getJSONObject((String)keys.next());
    String nameserviceId=json.getString("nameserviceId");
    String namenodeId=json.getString("namenodeId");
    MembershipState mockEntry=this.findMockNamenode(nameserviceId,namenodeId);
    assertNotNull(mockEntry);
    assertEquals(mockEntry.getState().toString(),json.getString("state"));
    assertEquals("ACTIVE",json.getString("state"));
    MembershipStats stats=mockEntry.getStats();
    assertEquals(stats.getNumOfFiles(),json.getLong("numOfFiles"));
    assertEquals(stats.getTotalSpace(),json.getLong("totalSpace"));
    assertEquals(stats.getAvailableSpace(),json.getLong("availableSpace"));
    assertEquals(stats.getNumOfBlocksMissing(),json.getLong("numOfBlocksMissing"));
    assertEquals(stats.getNumOfActiveDatanodes(),json.getLong("numOfActiveDatanodes"));
    assertEquals(stats.getNumOfDeadDatanodes(),json.getLong("numOfDeadDatanodes"));
    assertEquals(stats.getNumOfDecommissioningDatanodes(),json.getLong("numOfDecommissioningDatanodes"));
    assertEquals(stats.getNumOfDecomActiveDatanodes(),json.getLong("numOfDecomActiveDatanodes"));
    assertEquals(stats.getNumOfDecomDeadDatanodes(),json.getLong("numOfDecomDeadDatanodes"));
    assertEquals(stats.getProvidedSpace(),json.getLong("providedSpace"));
    nameservicesFound++;
  }
  assertEquals(getNameservices().size(),nameservicesFound);
}
