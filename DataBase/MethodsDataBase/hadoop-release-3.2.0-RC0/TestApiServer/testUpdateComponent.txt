@Test public void testUpdateComponent(){
  Response actual=apiServer.updateComponent(request,"jenkins","jenkins-master",null);
  ServiceStatus serviceStatus=(ServiceStatus)actual.getEntity();
  assertEquals("Update component should have failed with 400 bad request",Response.status(Status.BAD_REQUEST).build().getStatus(),actual.getStatus());
  assertEquals("Update component should have failed with no data error","No component data provided",serviceStatus.getDiagnostics());
  Component comp=new Component();
  actual=apiServer.updateComponent(request,"jenkins","jenkins-master",comp);
  serviceStatus=(ServiceStatus)actual.getEntity();
  assertEquals("Update component should have failed with 400 bad request",Response.status(Status.BAD_REQUEST).build().getStatus(),actual.getStatus());
  assertEquals("Update component should have failed with no count error","No container count provided",serviceStatus.getDiagnostics());
  comp.setNumberOfContainers(-1L);
  actual=apiServer.updateComponent(request,"jenkins","jenkins-master",comp);
  serviceStatus=(ServiceStatus)actual.getEntity();
  assertEquals("Update component should have failed with 400 bad request",Response.status(Status.BAD_REQUEST).build().getStatus(),actual.getStatus());
  assertEquals("Update component should have failed with no count error","Invalid number of containers specified -1",serviceStatus.getDiagnostics());
  comp.setName("jenkins-slave");
  comp.setNumberOfContainers(1L);
  actual=apiServer.updateComponent(request,"jenkins","jenkins-master",comp);
  serviceStatus=(ServiceStatus)actual.getEntity();
  assertEquals("Update component should have failed with 400 bad request",Response.status(Status.BAD_REQUEST).build().getStatus(),actual.getStatus());
  assertEquals("Update component should have failed with component name mismatch " + "error","Component name in the request object (jenkins-slave) does not match " + "that in the URI path (jenkins-master)",serviceStatus.getDiagnostics());
}
