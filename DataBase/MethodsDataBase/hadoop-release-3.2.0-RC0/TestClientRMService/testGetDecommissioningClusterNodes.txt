@Test public void testGetDecommissioningClusterNodes() throws Exception {
  MockRM rm=new MockRM(){
    protected ClientRMService createClientRMService(){
      return new ClientRMService(this.rmContext,scheduler,this.rmAppManager,this.applicationACLsManager,this.queueACLsManager,this.getRMContext().getRMDelegationTokenSecretManager());
    }
  }
;
  rm.start();
  int nodeMemory=1024;
  MockNM nm1=rm.registerNode("host1:1234",nodeMemory);
  rm.sendNodeStarted(nm1);
  nm1.nodeHeartbeat(true);
  rm.waitForState(nm1.getNodeId(),NodeState.RUNNING);
  Integer decommissioningTimeout=600;
  rm.sendNodeGracefulDecommission(nm1,decommissioningTimeout);
  rm.waitForState(nm1.getNodeId(),NodeState.DECOMMISSIONING);
  Configuration conf=new Configuration();
  YarnRPC rpc=YarnRPC.create(conf);
  InetSocketAddress rmAddress=rm.getClientRMService().getBindAddress();
  LOG.info("Connecting to ResourceManager at " + rmAddress);
  ApplicationClientProtocol client=(ApplicationClientProtocol)rpc.getProxy(ApplicationClientProtocol.class,rmAddress,conf);
  List<NodeReport> nodeReports=client.getClusterNodes(GetClusterNodesRequest.newInstance(EnumSet.of(NodeState.DECOMMISSIONING))).getNodeReports();
  Assert.assertEquals(1,nodeReports.size());
  NodeReport nr=nodeReports.iterator().next();
  Assert.assertEquals(decommissioningTimeout,nr.getDecommissioningTimeout());
  Assert.assertNull(nr.getNodeUpdateType());
  rpc.stopProxy(client,conf);
  rm.close();
}
