@Test public void testGetApplicationsWithPerUserApps() throws IOException, YarnException {
  ResourceScheduler scheduler=mockResourceScheduler();
  RMContext rmContext=mock(RMContext.class);
  mockRMContext(scheduler,rmContext);
  RMStateStore stateStore=mock(RMStateStore.class);
  when(rmContext.getStateStore()).thenReturn(stateStore);
  doReturn(mock(RMTimelineCollectorManager.class)).when(rmContext).getRMTimelineCollectorManager();
  RMAppManager appManager=new RMAppManager(rmContext,scheduler,null,mock(ApplicationACLsManager.class),new Configuration());
  when(rmContext.getDispatcher().getEventHandler()).thenReturn(new EventHandler<Event>(){
    public void handle(    Event event){
    }
  }
);
  QueueACLsManager queueAclsManager=mock(QueueACLsManager.class);
  when(queueAclsManager.checkAccess(any(UserGroupInformation.class),any(QueueACL.class),any(RMApp.class),any(String.class),anyListOf(String.class))).thenReturn(false);
  ApplicationACLsManager appAclsManager=mock(ApplicationACLsManager.class);
  when(appAclsManager.checkAccess(eq(UserGroupInformation.getCurrentUser()),any(ApplicationAccessType.class),any(String.class),any(ApplicationId.class))).thenReturn(false);
  ClientRMService rmService=new ClientRMService(rmContext,scheduler,appManager,appAclsManager,queueAclsManager,null);
  rmService.init(new Configuration());
  String[] queues={QUEUE_1,QUEUE_2};
  String[] appNames={MockApps.newAppName(),MockApps.newAppName(),MockApps.newAppName()};
  ApplicationId[] appIds={getApplicationId(101),getApplicationId(102),getApplicationId(103)};
  List<String> tags=Arrays.asList("Tag1","Tag2","Tag3");
  long[] submitTimeMillis=new long[3];
  for (int i=0; i < appIds.length; i++) {
    ApplicationId appId=appIds[i];
    SubmitApplicationRequest submitRequest=mockSubmitAppRequest(appId,appNames[i],queues[i % queues.length],new HashSet<String>(tags.subList(0,i + 1)));
    rmService.submitApplication(submitRequest);
    submitTimeMillis[i]=System.currentTimeMillis();
  }
  GetApplicationsRequest request=GetApplicationsRequest.newInstance();
  assertEquals("Incorrect total number of apps",6,rmService.getApplications(request).getApplicationList().size());
  rmService.setDisplayPerUserApps(true);
  assertEquals("Incorrect number of applications for user",0,rmService.getApplications(request).getApplicationList().size());
  rmService.setDisplayPerUserApps(false);
}
