@Test public void testRegisterNMWithDiffUnits() throws Exception {
  ResourceUtils.resetResourceTypes();
  Configuration yarnConf=new YarnConfiguration();
  String resourceTypesFileName="resource-types-4.xml";
  InputStream source=yarnConf.getClassLoader().getResourceAsStream(resourceTypesFileName);
  resourceTypesFile=new File(yarnConf.getClassLoader().getResource(".").getPath(),"resource-types.xml");
  FileUtils.copyInputStreamToFile(source,resourceTypesFile);
  ResourceUtils.getResourceTypes();
  yarnConf.setClass(CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,DominantResourceCalculator.class,ResourceCalculator.class);
  MockRM rm=new MockRM(yarnConf){
    protected ClientRMService createClientRMService(){
      return new ClientRMService(this.rmContext,scheduler,this.rmAppManager,this.applicationACLsManager,this.queueACLsManager,this.getRMContext().getRMDelegationTokenSecretManager());
    }
  }
;
  rm.start();
  Resource resource=BuilderUtils.newResource(1024,1);
  resource.setResourceInformation("memory-mb",ResourceInformation.newInstance("memory-mb","G",1024));
  resource.setResourceInformation("resource1",ResourceInformation.newInstance("resource1","T",1));
  resource.setResourceInformation("resource2",ResourceInformation.newInstance("resource2","M",1));
  MockNM node=rm.registerNode("host1:1234",resource);
  node.nodeHeartbeat(true);
  Configuration conf=new Configuration();
  YarnRPC rpc=YarnRPC.create(conf);
  InetSocketAddress rmAddress=rm.getClientRMService().getBindAddress();
  LOG.info("Connecting to ResourceManager at " + rmAddress);
  ApplicationClientProtocol client=(ApplicationClientProtocol)rpc.getProxy(ApplicationClientProtocol.class,rmAddress,conf);
  GetClusterNodesRequest request=GetClusterNodesRequest.newInstance(EnumSet.of(NodeState.RUNNING));
  List<NodeReport> nodeReports=client.getClusterNodes(request).getNodeReports();
  Assert.assertEquals(1,nodeReports.size());
  Assert.assertNotSame("Node is expected to be healthy!",NodeState.UNHEALTHY,nodeReports.get(0).getNodeState());
  Assert.assertEquals(1,nodeReports.size());
  Assert.assertEquals("G",nodeReports.get(0).getCapability().getResourceInformation("resource1").getUnits());
  Assert.assertEquals(1000,nodeReports.get(0).getCapability().getResourceInformation("resource1").getValue());
  Assert.assertEquals("m",nodeReports.get(0).getCapability().getResourceInformation("resource2").getUnits());
  Assert.assertEquals(1000000000,nodeReports.get(0).getCapability().getResourceInformation("resource2").getValue());
  Assert.assertEquals("Mi",nodeReports.get(0).getCapability().getResourceInformation("memory-mb").getUnits());
  Assert.assertEquals(976562,nodeReports.get(0).getCapability().getResourceInformation("memory-mb").getValue());
  rpc.stopProxy(client,conf);
  rm.close();
}
