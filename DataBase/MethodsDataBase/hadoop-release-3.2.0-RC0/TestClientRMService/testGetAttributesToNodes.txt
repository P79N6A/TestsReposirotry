@Test(timeout=120000) public void testGetAttributesToNodes() throws IOException, YarnException {
  Configuration newConf=NodeAttributeTestUtils.getRandomDirConf(null);
  MockRM rm=new MockRM(newConf){
    protected ClientRMService createClientRMService(){
      return new ClientRMService(this.rmContext,scheduler,this.rmAppManager,this.applicationACLsManager,this.queueACLsManager,this.getRMContext().getRMDelegationTokenSecretManager());
    }
  }
;
  rm.start();
  NodeAttributesManager mgr=rm.getRMContext().getNodeAttributesManager();
  String node1="host1";
  String node2="host2";
  NodeAttribute gpu=NodeAttribute.newInstance(NodeAttribute.PREFIX_CENTRALIZED,"GPU",NodeAttributeType.STRING,"nvidia");
  NodeAttribute os=NodeAttribute.newInstance(NodeAttribute.PREFIX_CENTRALIZED,"OS",NodeAttributeType.STRING,"windows64");
  NodeAttribute docker=NodeAttribute.newInstance(NodeAttribute.PREFIX_DISTRIBUTED,"DOCKER",NodeAttributeType.STRING,"docker0");
  NodeAttribute dist=NodeAttribute.newInstance(NodeAttribute.PREFIX_DISTRIBUTED,"VERSION",NodeAttributeType.STRING,"3_0_2");
  Map<String,Set<NodeAttribute>> nodes=new HashMap<>();
  nodes.put(node1,ImmutableSet.of(gpu,os,dist));
  nodes.put(node2,ImmutableSet.of(docker,dist));
  mgr.addNodeAttributes(nodes);
  Configuration conf=new Configuration();
  YarnRPC rpc=YarnRPC.create(conf);
  InetSocketAddress rmAddress=rm.getClientRMService().getBindAddress();
  LOG.info("Connecting to ResourceManager at " + rmAddress);
  ApplicationClientProtocol client=(ApplicationClientProtocol)rpc.getProxy(ApplicationClientProtocol.class,rmAddress,conf);
  GetAttributesToNodesRequest request=GetAttributesToNodesRequest.newInstance();
  GetAttributesToNodesResponse response=client.getAttributesToNodes(request);
  Map<NodeAttributeKey,List<NodeToAttributeValue>> attrs=response.getAttributesToNodes();
  Assert.assertEquals(response.getAttributesToNodes().size(),4);
  Assert.assertEquals(attrs.get(dist.getAttributeKey()).size(),2);
  Assert.assertEquals(attrs.get(os.getAttributeKey()).size(),1);
  Assert.assertEquals(attrs.get(gpu.getAttributeKey()).size(),1);
  Assert.assertTrue(findHostnameAndValInMapping(node1,"3_0_2",attrs.get(dist.getAttributeKey())));
  Assert.assertTrue(findHostnameAndValInMapping(node2,"3_0_2",attrs.get(dist.getAttributeKey())));
  Assert.assertTrue(findHostnameAndValInMapping(node2,"docker0",attrs.get(docker.getAttributeKey())));
  GetAttributesToNodesRequest request2=GetAttributesToNodesRequest.newInstance(ImmutableSet.of(docker.getAttributeKey()));
  GetAttributesToNodesResponse response2=client.getAttributesToNodes(request2);
  Map<NodeAttributeKey,List<NodeToAttributeValue>> attrs2=response2.getAttributesToNodes();
  Assert.assertEquals(attrs2.size(),1);
  Assert.assertTrue(findHostnameAndValInMapping(node2,"docker0",attrs2.get(docker.getAttributeKey())));
  GetAttributesToNodesRequest request3=GetAttributesToNodesRequest.newInstance(ImmutableSet.of(docker.getAttributeKey(),os.getAttributeKey()));
  GetAttributesToNodesResponse response3=client.getAttributesToNodes(request3);
  Map<NodeAttributeKey,List<NodeToAttributeValue>> attrs3=response3.getAttributesToNodes();
  Assert.assertEquals(attrs3.size(),2);
  Assert.assertTrue(findHostnameAndValInMapping(node1,"windows64",attrs3.get(os.getAttributeKey())));
  Assert.assertTrue(findHostnameAndValInMapping(node2,"docker0",attrs3.get(docker.getAttributeKey())));
  rpc.stopProxy(client,conf);
  rm.close();
}
