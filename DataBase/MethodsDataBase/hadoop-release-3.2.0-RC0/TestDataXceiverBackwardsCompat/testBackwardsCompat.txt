@Test public void testBackwardsCompat() throws Exception {
  Peer peer=mock(Peer.class);
  doReturn("").when(peer).getRemoteAddressString();
  Configuration conf=new Configuration();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  int port=ServerSocketUtil.getPort(1234,10);
  DataNode dataNode=new NullDataNode(conf,out,port);
  DataXceiverServer server=new DataXceiverServer(mock(PeerServer.class),conf,dataNode);
  DataXceiver xceiver=spy(DataXceiver.create(peer,dataNode,server));
  BlockReceiver mockBlockReceiver=mock(BlockReceiver.class);
  doReturn(mock(Replica.class)).when(mockBlockReceiver).getReplica();
  DatanodeInfo[] targets={mock(DatanodeInfo.class)};
  doReturn("localhost:" + port).when(targets[0]).getXferAddr(true);
  doReturn("127.0.0.1:" + port).when(targets[0]).getXferAddr(false);
  StorageType[] storageTypes={StorageType.RAM_DISK};
  doReturn(mockBlockReceiver).when(xceiver).getBlockReceiver(any(ExtendedBlock.class),any(StorageType.class),any(DataInputStream.class),anyString(),anyString(),any(BlockConstructionStage.class),anyLong(),anyLong(),anyLong(),anyString(),any(DatanodeInfo.class),any(DataNode.class),any(DataChecksum.class),any(CachingStrategy.class),ArgumentCaptor.forClass(Boolean.class).capture(),anyBoolean(),any(String.class));
  Token<BlockTokenIdentifier> token=(Token<BlockTokenIdentifier>)mock(Token.class);
  doReturn("".getBytes()).when(token).getIdentifier();
  doReturn("".getBytes()).when(token).getPassword();
  doReturn(new Text("")).when(token).getKind();
  doReturn(new Text("")).when(token).getService();
  DataChecksum checksum=mock(DataChecksum.class);
  doReturn(DataChecksum.Type.NULL).when(checksum).getChecksumType();
  DatanodeInfo datanodeInfo=mock(DatanodeInfo.class);
  doReturn("localhost").when(datanodeInfo).getHostName();
  doReturn(ByteString.copyFromUtf8("localhost")).when(datanodeInfo).getHostNameBytes();
  doReturn("127.0.0.1").when(datanodeInfo).getIpAddr();
  doReturn(ByteString.copyFromUtf8("127.0.0.1")).when(datanodeInfo).getIpAddrBytes();
  doReturn(DatanodeInfo.AdminStates.NORMAL).when(datanodeInfo).getAdminState();
  final String uuid=UUID.randomUUID().toString();
  doReturn(uuid).when(datanodeInfo).getDatanodeUuid();
  doReturn(ByteString.copyFromUtf8(uuid)).when(datanodeInfo).getDatanodeUuidBytes();
  Exception storedException=null;
  try {
    xceiver.writeBlock(new ExtendedBlock("Dummy-pool",0L),StorageType.RAM_DISK,token,"Dummy-Client",targets,storageTypes,datanodeInfo,BlockConstructionStage.PIPELINE_SETUP_CREATE,0,0,0,0,checksum,CachingStrategy.newDefaultStrategy(),false,false,new boolean[0],null,new String[0]);
  }
 catch (  Exception e) {
    storedException=e;
  }
  byte[] output=out.toByteArray();
  if (output.length == 0) {
    if (storedException == null) {
      failWithException("No output written, but no exception either (this " + "shouldn't happen",storedException);
    }
 else {
      failWithException("Exception occurred before anything was written",storedException);
    }
  }
}
