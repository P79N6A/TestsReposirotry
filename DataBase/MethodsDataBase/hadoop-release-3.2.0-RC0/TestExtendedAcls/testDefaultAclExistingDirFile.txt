/** 
 * Set default ACL to a directory and make sure existing sub dirs/files does not have default acl.
 * @throws IOException
 */
@Test public void testDefaultAclExistingDirFile() throws Exception {
  Path parent=new Path("/testDefaultAclExistingDirFile");
  hdfs.mkdirs(parent);
  List<AclEntry> acls1=Lists.newArrayList(aclEntry(DEFAULT,USER,"foo",ALL));
  List<AclEntry> acls2=Lists.newArrayList(aclEntry(DEFAULT,USER,"foo",READ_EXECUTE));
  hdfs.setAcl(parent,acls1);
  Path childDir=new Path(parent,"childDir");
  hdfs.mkdirs(childDir);
  AclEntry[] childDirExpectedAcl=new AclEntry[]{aclEntry(ACCESS,USER,"foo",ALL),aclEntry(ACCESS,GROUP,READ_EXECUTE),aclEntry(DEFAULT,USER,ALL),aclEntry(DEFAULT,USER,"foo",ALL),aclEntry(DEFAULT,GROUP,READ_EXECUTE),aclEntry(DEFAULT,MASK,ALL),aclEntry(DEFAULT,OTHER,READ_EXECUTE)};
  AclStatus childDirAcl=hdfs.getAclStatus(childDir);
  assertArrayEquals(childDirExpectedAcl,childDirAcl.getEntries().toArray());
  Path childFile=new Path(childDir,"childFile");
  hdfs.create(childFile).close();
  AclEntry[] childFileExpectedAcl=new AclEntry[]{aclEntry(ACCESS,USER,"foo",ALL),aclEntry(ACCESS,GROUP,READ_EXECUTE)};
  AclStatus childFileAcl=hdfs.getAclStatus(childFile);
  assertArrayEquals(childFileExpectedAcl,childFileAcl.getEntries().toArray());
  hdfs.setAcl(parent,acls2);
  childDirAcl=hdfs.getAclStatus(childDir);
  assertArrayEquals(childDirExpectedAcl,childDirAcl.getEntries().toArray());
  childFileAcl=hdfs.getAclStatus(childFile);
  assertArrayEquals(childFileExpectedAcl,childFileAcl.getEntries().toArray());
  hdfs.removeAcl(parent);
  childDirAcl=hdfs.getAclStatus(childDir);
  assertArrayEquals(childDirExpectedAcl,childDirAcl.getEntries().toArray());
  childFileAcl=hdfs.getAclStatus(childFile);
  assertArrayEquals(childFileExpectedAcl,childFileAcl.getEntries().toArray());
  hdfs.setPermission(childFile,new FsPermission((short)0640));
  boolean canAccess=tryAccess(childFile,"other",new String[]{"other"},READ);
  assertFalse(canAccess);
  hdfs.delete(parent,true);
}
