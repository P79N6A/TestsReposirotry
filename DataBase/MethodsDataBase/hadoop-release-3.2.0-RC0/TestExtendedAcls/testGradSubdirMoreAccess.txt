/** 
 * Create a parent dir and set default acl to allow foo read/write access. Create a sub dir and set default acl to allow bar group read/write access. parent dir/file can not be viewed/appended by bar group. parent dir/child dir/file can be viewed/appended by bar group.
 * @throws Exception
 */
@Test public void testGradSubdirMoreAccess() throws Exception {
  Path parent=new Path("/testGradSubdirMoreAccess");
  hdfs.mkdirs(parent);
  List<AclEntry> aclsParent=Lists.newArrayList(aclEntry(DEFAULT,USER,"foo",READ_EXECUTE));
  List<AclEntry> aclsChild=Lists.newArrayList(aclEntry(DEFAULT,GROUP,"bar",READ_WRITE));
  hdfs.setAcl(parent,aclsParent);
  AclEntry[] parentDirExpectedAcl=new AclEntry[]{aclEntry(DEFAULT,USER,ALL),aclEntry(DEFAULT,USER,"foo",READ_EXECUTE),aclEntry(DEFAULT,GROUP,READ_EXECUTE),aclEntry(DEFAULT,MASK,READ_EXECUTE),aclEntry(DEFAULT,OTHER,READ_EXECUTE)};
  AclStatus parentAcl=hdfs.getAclStatus(parent);
  assertArrayEquals(parentDirExpectedAcl,parentAcl.getEntries().toArray());
  Path childDir=new Path(parent,"childDir");
  hdfs.mkdirs(childDir);
  hdfs.modifyAclEntries(childDir,aclsChild);
  AclEntry[] childDirExpectedAcl=new AclEntry[]{aclEntry(ACCESS,USER,"foo",READ_EXECUTE),aclEntry(ACCESS,GROUP,READ_EXECUTE),aclEntry(DEFAULT,USER,ALL),aclEntry(DEFAULT,USER,"foo",READ_EXECUTE),aclEntry(DEFAULT,GROUP,READ_EXECUTE),aclEntry(DEFAULT,GROUP,"bar",READ_WRITE),aclEntry(DEFAULT,MASK,ALL),aclEntry(DEFAULT,OTHER,READ_EXECUTE)};
  AclStatus childDirAcl=hdfs.getAclStatus(childDir);
  assertArrayEquals(childDirExpectedAcl,childDirAcl.getEntries().toArray());
  Path parentFile=new Path(parent,"parentFile");
  hdfs.create(parentFile).close();
  hdfs.setPermission(parentFile,new FsPermission((short)0640));
  AclEntry[] parentFileExpectedAcl=new AclEntry[]{aclEntry(ACCESS,USER,"foo",READ_EXECUTE),aclEntry(ACCESS,GROUP,READ_EXECUTE)};
  AclStatus parentFileAcl=hdfs.getAclStatus(parentFile);
  assertArrayEquals(parentFileExpectedAcl,parentFileAcl.getEntries().toArray());
  Path childFile=new Path(childDir,"childFile");
  hdfs.create(childFile).close();
  hdfs.setPermission(childFile,new FsPermission((short)0640));
  AclEntry[] childFileExpectedAcl=new AclEntry[]{aclEntry(ACCESS,USER,"foo",READ_EXECUTE),aclEntry(ACCESS,GROUP,READ_EXECUTE),aclEntry(ACCESS,GROUP,"bar",READ_WRITE)};
  AclStatus childFileAcl=hdfs.getAclStatus(childFile);
  assertArrayEquals(childFileExpectedAcl,childFileAcl.getEntries().toArray());
  assertFalse(tryAccess(parentFile,"barUser",new String[]{"bar"},READ));
  assertTrue(tryAccess(childFile,"barUser",new String[]{"bar"},READ));
  assertTrue(tryAccess(parentFile,"foo",new String[]{"fooGroup"},READ));
  assertTrue(tryAccess(childFile,"foo",new String[]{"fooGroup"},READ));
  hdfs.delete(parent,true);
}
