/** 
 * Verify that access acl does not get inherited on newly created subdir/file.
 * @throws IOException
 */
@Test public void testAccessAclNotInherited() throws IOException {
  Path parent=new Path("/testAccessAclNotInherited");
  hdfs.mkdirs(parent);
  List<AclEntry> acls=Lists.newArrayList(aclEntry(DEFAULT,USER,"foo",READ_EXECUTE),aclEntry(ACCESS,USER,READ_WRITE),aclEntry(ACCESS,GROUP,READ),aclEntry(ACCESS,OTHER,READ),aclEntry(ACCESS,USER,"bar",ALL));
  hdfs.setAcl(parent,acls);
  Path childDir=new Path(parent,"childDir");
  hdfs.mkdirs(childDir);
  AclEntry[] childDirExpectedAcl=new AclEntry[]{aclEntry(ACCESS,USER,"foo",READ_EXECUTE),aclEntry(ACCESS,GROUP,READ),aclEntry(DEFAULT,USER,READ_WRITE),aclEntry(DEFAULT,USER,"foo",READ_EXECUTE),aclEntry(DEFAULT,GROUP,READ),aclEntry(DEFAULT,MASK,READ_EXECUTE),aclEntry(DEFAULT,OTHER,READ)};
  AclStatus childDirAcl=hdfs.getAclStatus(childDir);
  assertArrayEquals(childDirExpectedAcl,childDirAcl.getEntries().toArray());
  Path childFile=new Path(parent,"childFile");
  hdfs.create(childFile).close();
  AclEntry[] childFileExpectedAcl=new AclEntry[]{aclEntry(ACCESS,USER,"foo",READ_EXECUTE),aclEntry(ACCESS,GROUP,READ)};
  AclStatus childFileAcl=hdfs.getAclStatus(childFile);
  assertArrayEquals(childFileExpectedAcl,childFileAcl.getEntries().toArray());
  hdfs.delete(parent,true);
}
