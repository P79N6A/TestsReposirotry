@Test public void testSetDeleteMissing(){
  final DistCpOptions.Builder builder=new DistCpOptions.Builder(Collections.singletonList(new Path("hdfs://localhost:8020/source")),new Path("hdfs://localhost:8020/target/"));
  Assert.assertFalse(builder.build().shouldDeleteMissing());
  DistCpOptions options=builder.withSyncFolder(true).withDeleteMissing(true).build();
  Assert.assertTrue(options.shouldSyncFolder());
  Assert.assertTrue(options.shouldDeleteMissing());
  options=new DistCpOptions.Builder(Collections.singletonList(new Path("hdfs://localhost:8020/source")),new Path("hdfs://localhost:8020/target/")).withOverwrite(true).withDeleteMissing(true).build();
  Assert.assertTrue(options.shouldOverwrite());
  Assert.assertTrue(options.shouldDeleteMissing());
  try {
    new DistCpOptions.Builder(Collections.singletonList(new Path("hdfs://localhost:8020/source")),new Path("hdfs://localhost:8020/target/")).withDeleteMissing(true).build();
    fail("Delete missing should fail without update or overwrite options");
  }
 catch (  IllegalArgumentException e) {
    assertExceptionContains("Delete missing is applicable only with update " + "or overwrite options",e);
  }
  try {
    new DistCpOptions.Builder(new Path("hdfs://localhost:8020/source/first"),new Path("hdfs://localhost:8020/target/")).withSyncFolder(true).withDeleteMissing(true).withUseDiff("s1","s2").build();
    fail("Should have failed as -delete and -diff are mutually exclusive.");
  }
 catch (  IllegalArgumentException e) {
    assertExceptionContains("-delete and -diff/-rdiff are mutually exclusive.",e);
  }
}
