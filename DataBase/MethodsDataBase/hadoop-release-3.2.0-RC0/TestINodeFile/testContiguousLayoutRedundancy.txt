@Test public void testContiguousLayoutRedundancy(){
  INodeFile inodeFile;
  try {
    new INodeFile(HdfsConstants.GRANDFATHER_INODE_ID,null,perm,0L,0L,null,new Short((short)3),StripedFileTestUtil.getDefaultECPolicy().getId(),preferredBlockSize,HdfsConstants.WARM_STORAGE_POLICY_ID,CONTIGUOUS);
    fail("INodeFile construction should fail when both replication and " + "ECPolicy requested!");
  }
 catch (  IllegalArgumentException iae) {
    LOG.info("Expected exception: ",iae);
  }
  try {
    new INodeFile(HdfsConstants.GRANDFATHER_INODE_ID,null,perm,0L,0L,null,null,null,preferredBlockSize,HdfsConstants.WARM_STORAGE_POLICY_ID,CONTIGUOUS);
    fail("INodeFile construction should fail when replication param not " + "provided for contiguous layout!");
  }
 catch (  IllegalArgumentException iae) {
    LOG.info("Expected exception: ",iae);
  }
  try {
    new INodeFile(HdfsConstants.GRANDFATHER_INODE_ID,null,perm,0L,0L,null,Short.MAX_VALUE,null,preferredBlockSize,HdfsConstants.WARM_STORAGE_POLICY_ID,CONTIGUOUS);
    fail("INodeFile construction should fail when replication param is " + "beyond the range supported!");
  }
 catch (  IllegalArgumentException iae) {
    LOG.info("Expected exception: ",iae);
  }
  final Short replication=new Short((short)3);
  try {
    new INodeFile(HdfsConstants.GRANDFATHER_INODE_ID,null,perm,0L,0L,null,replication,null,preferredBlockSize,HdfsConstants.WARM_STORAGE_POLICY_ID,STRIPED);
    fail("INodeFile construction should fail when replication param is " + "provided for striped layout!");
  }
 catch (  IllegalArgumentException iae) {
    LOG.info("Expected exception: ",iae);
  }
  inodeFile=new INodeFile(HdfsConstants.GRANDFATHER_INODE_ID,null,perm,0L,0L,null,replication,null,preferredBlockSize,HdfsConstants.WARM_STORAGE_POLICY_ID,CONTIGUOUS);
  Assert.assertTrue(!inodeFile.isStriped());
  Assert.assertEquals(replication.shortValue(),inodeFile.getFileReplication());
}
