@Test(timeout=30000) public void testMapAttributesToNodes() throws Exception, YarnException {
  Configuration newConf=NodeAttributeTestUtils.getRandomDirConf(null);
  rm=new MockRM(newConf);
  NodeAttributesManager spiedAttributesManager=Mockito.spy(rm.getRMContext().getNodeAttributesManager());
  rm.getRMContext().setNodeAttributesManager(spiedAttributesManager);
  ((RMContextImpl)rm.getRMContext()).setHAServiceState(HAServiceState.ACTIVE);
  setActiveAndInactiveNodes(rm);
  NodesToAttributesMappingRequest request=NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.ADD,ImmutableList.of(NodeToAttributes.newInstance("host1",ImmutableList.of(NodeAttribute.newInstance(NodeAttribute.PREFIX_CENTRALIZED,"x",NodeAttributeType.STRING,"dfasdf")))),true);
  try {
    rm.adminService.mapAttributesToNodes(request);
  }
 catch (  Exception ex) {
    fail("should not fail on known node in active state" + ex.getMessage());
  }
  Mockito.verify(spiedAttributesManager,Mockito.times(1)).addNodeAttributes(Mockito.anyMap());
  request=NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.REMOVE,ImmutableList.of(NodeToAttributes.newInstance("host4",ImmutableList.of(NodeAttribute.newInstance(NodeAttribute.PREFIX_CENTRALIZED,"x",NodeAttributeType.STRING,"dfasdf")))),true);
  try {
    rm.adminService.mapAttributesToNodes(request);
  }
 catch (  Exception ex) {
    fail("should not fail on known node in inactive state" + ex.getMessage());
  }
  Mockito.verify(spiedAttributesManager,Mockito.times(1)).removeNodeAttributes(Mockito.anyMap());
  request=NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.ADD,ImmutableList.of(NodeToAttributes.newInstance("host5",ImmutableList.of(NodeAttribute.newInstance(NodeAttribute.PREFIX_CENTRALIZED,"x",NodeAttributeType.STRING,"dfasdf")))),true);
  try {
    rm.adminService.mapAttributesToNodes(request);
    fail("host5 is not a valid node, It should have failed");
  }
 catch (  YarnException ex) {
    Assert.assertEquals("Exception Message is not as desired"," Following nodes does not exist : [host5]",ex.getCause().getMessage());
  }
  request=NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.ADD,ImmutableList.of(NodeToAttributes.newInstance("host4:8889",ImmutableList.of(NodeAttribute.newInstance(NodeAttribute.PREFIX_CENTRALIZED,"x",NodeAttributeType.STRING,"dfasdf"))),NodeToAttributes.newInstance("host2:8889",ImmutableList.of(NodeAttribute.newInstance(NodeAttribute.PREFIX_CENTRALIZED,"x",NodeAttributeType.STRING,"dfasdf")))),true);
  try {
    rm.adminService.mapAttributesToNodes(request);
    fail("host with the port should fail as only hostnames are validated");
  }
 catch (  YarnException ex) {
    Assert.assertEquals("Exception Message is not as desired"," Following nodes does not exist : [host4:8889, host2:8889]",ex.getCause().getMessage());
  }
  request=NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.REPLACE,ImmutableList.of(NodeToAttributes.newInstance("host5",ImmutableList.of(NodeAttribute.newInstance(NodeAttribute.PREFIX_CENTRALIZED,"x",NodeAttributeType.STRING,"dfasdf")))),false);
  try {
    rm.adminService.mapAttributesToNodes(request);
  }
 catch (  Exception ex) {
    fail("This operation should not fail as failOnUnknownNodes is false : " + ex.getMessage());
  }
  Mockito.verify(spiedAttributesManager,Mockito.times(1)).replaceNodeAttributes(Mockito.eq(NodeAttribute.PREFIX_CENTRALIZED),Mockito.anyMap());
  request=NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.ADD,ImmutableList.of(NodeToAttributes.newInstance("host5",ImmutableList.of(NodeAttribute.newInstance(NodeAttribute.PREFIX_DISTRIBUTED,"x",NodeAttributeType.STRING,"dfasdf")))),false);
  try {
    rm.adminService.mapAttributesToNodes(request);
    fail("This operation should fail as prefix should be \"nm.yarn.io\".");
  }
 catch (  YarnException ex) {
    Assert.assertEquals("Exception Message is not as desired","Invalid Attribute Mapping for the node host5. Prefix should be " + "rm.yarn.io",ex.getCause().getMessage());
  }
  rm.close();
}
