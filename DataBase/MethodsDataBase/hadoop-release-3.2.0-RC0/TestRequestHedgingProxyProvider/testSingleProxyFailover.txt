@Test public void testSingleProxyFailover() throws Exception {
  String singleNS="mycluster-" + Time.monotonicNow();
  URI singleNNUri=new URI("hdfs://" + singleNS);
  Configuration singleConf=new Configuration();
  singleConf.set(HdfsClientConfigKeys.DFS_NAMESERVICES,singleNS);
  singleConf.set(HdfsClientConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX + "." + singleNS,"nn1");
  singleConf.set(HdfsClientConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY + "." + singleNS+ ".nn1",RandomStringUtils.randomAlphabetic(8) + ".foo.bar:9820");
  ClientProtocol active=Mockito.mock(ClientProtocol.class);
  Mockito.when(active.getBlockLocations(Matchers.anyString(),Matchers.anyLong(),Matchers.anyLong())).thenThrow(new RemoteException("java.io.FileNotFoundException","File does not exist!"));
  RequestHedgingProxyProvider<ClientProtocol> provider=new RequestHedgingProxyProvider<>(singleConf,singleNNUri,ClientProtocol.class,createFactory(active));
  try {
    provider.getProxy().proxy.getBlockLocations("/tmp/test.file",0L,20L);
    Assert.fail("Should fail since the active namenode throws" + " FileNotFoundException!");
  }
 catch (  RemoteException ex) {
    Exception rEx=ex.unwrapRemoteException();
    Assert.assertTrue(rEx instanceof FileNotFoundException);
  }
  provider.performFailover(active);
  try {
    provider.getProxy().proxy.getBlockLocations("/tmp/test.file",0L,20L);
    Assert.fail("Should fail since the active namenode throws" + " FileNotFoundException!");
  }
 catch (  RemoteException ex) {
    Exception rEx=ex.unwrapRemoteException();
    Assert.assertTrue(rEx instanceof IOException);
    Assert.assertTrue(rEx.getMessage().equals("No valid proxies left." + " All NameNode proxies have failed over."));
  }
}
