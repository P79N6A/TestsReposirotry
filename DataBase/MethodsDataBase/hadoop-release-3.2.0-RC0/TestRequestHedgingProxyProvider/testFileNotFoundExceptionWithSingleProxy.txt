@Test public void testFileNotFoundExceptionWithSingleProxy() throws Exception {
  ClientProtocol active=Mockito.mock(ClientProtocol.class);
  Mockito.when(active.getBlockLocations(Matchers.anyString(),Matchers.anyLong(),Matchers.anyLong())).thenThrow(new RemoteException("java.io.FileNotFoundException","File does not exist!"));
  ClientProtocol standby=Mockito.mock(ClientProtocol.class);
  Mockito.when(standby.getBlockLocations(Matchers.anyString(),Matchers.anyLong(),Matchers.anyLong())).thenThrow(new RemoteException("org.apache.hadoop.ipc.StandbyException","Standby NameNode"));
  RequestHedgingProxyProvider<ClientProtocol> provider=new RequestHedgingProxyProvider<>(conf,nnUri,ClientProtocol.class,createFactory(standby,active));
  try {
    provider.getProxy().proxy.getBlockLocations("/tmp/test.file",0L,20L);
    Assert.fail("Should fail since the active namenode throws" + " FileNotFoundException!");
  }
 catch (  MultiException me) {
    for (    Exception ex : me.getExceptions().values()) {
      Exception rEx=((RemoteException)ex).unwrapRemoteException();
      if (rEx instanceof StandbyException) {
        continue;
      }
      Assert.assertTrue(rEx instanceof FileNotFoundException);
    }
  }
  provider.performFailover(active);
  try {
    provider.getProxy().proxy.getBlockLocations("/tmp/test.file",0L,20L);
    Assert.fail("Should fail since the active namenode throws" + " FileNotFoundException!");
  }
 catch (  RemoteException ex) {
    Exception rEx=ex.unwrapRemoteException();
    if (rEx instanceof StandbyException) {
      Mockito.verify(active).getBlockLocations(Matchers.anyString(),Matchers.anyLong(),Matchers.anyLong());
      Mockito.verify(standby,Mockito.times(2)).getBlockLocations(Matchers.anyString(),Matchers.anyLong(),Matchers.anyLong());
    }
 else {
      Assert.assertTrue(rEx instanceof FileNotFoundException);
      Mockito.verify(active,Mockito.times(2)).getBlockLocations(Matchers.anyString(),Matchers.anyLong(),Matchers.anyLong());
      Mockito.verify(standby).getBlockLocations(Matchers.anyString(),Matchers.anyLong(),Matchers.anyLong());
    }
  }
}
