@Test(timeout=30000) public void testGetNextVolumeWithClosedVolume() throws IOException {
  FsVolumeList volumeList=new FsVolumeList(Collections.<VolumeFailureInfo>emptyList(),blockScanner,blockChooser);
  final List<FsVolumeImpl> volumes=new ArrayList<>();
  for (int i=0; i < 3; i++) {
    File curDir=new File(baseDir,"nextvolume-" + i);
    curDir.mkdirs();
    FsVolumeImpl volume=new FsVolumeImplBuilder().setConf(conf).setDataset(dataset).setStorageID("storage-id").setStorageDirectory(new StorageDirectory(StorageLocation.parse(curDir.getPath()))).build();
    volume.setCapacityForTesting(1024 * 1024 * 1024);
    volumes.add(volume);
    volumeList.addVolume(volume.obtainReference());
  }
  volumes.get(1).setClosed();
  try {
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return volumes.get(1).checkClosed();
      }
    }
,100,3000);
  }
 catch (  TimeoutException e) {
    fail("timed out while waiting for volume to be removed.");
  }
catch (  InterruptedException ie) {
    Thread.currentThread().interrupt();
  }
  for (int i=0; i < 10; i++) {
    try (FsVolumeReference ref=volumeList.getNextVolume(StorageType.DEFAULT,null,128)){
      assertNotEquals(ref.getVolume(),volumes.get(1));
    }
   }
}
