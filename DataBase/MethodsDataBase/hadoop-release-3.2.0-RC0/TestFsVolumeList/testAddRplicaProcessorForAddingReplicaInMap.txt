@Test(timeout=60000) public void testAddRplicaProcessorForAddingReplicaInMap() throws Exception {
  Configuration cnf=new Configuration();
  int poolSize=5;
  cnf.setInt(DFSConfigKeys.DFS_REPLICATION_KEY,1);
  cnf.setInt(DFSConfigKeys.DFS_DATANODE_VOLUMES_REPLICA_ADD_THREADPOOL_SIZE_KEY,poolSize);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(cnf).numDataNodes(1).storagesPerDatanode(1).build();
  DistributedFileSystem fs=cluster.getFileSystem();
  ExecutorService pool=Executors.newFixedThreadPool(10);
  List<Future<?>> futureList=new ArrayList<>();
  for (int i=0; i < 100; i++) {
    Thread thread=new Thread(){
      @Override public void run(){
        for (int j=0; j < 10; j++) {
          try {
            DFSTestUtil.createFile(fs,new Path("File_" + getName() + j),10,(short)1,0);
          }
 catch (          IllegalArgumentException|IOException e) {
            e.printStackTrace();
          }
        }
      }
    }
;
    thread.setName("FileWriter" + i);
    futureList.add(pool.submit(thread));
  }
  for (  Future<?> f : futureList) {
    f.get();
  }
  fs.close();
  FsDatasetImpl fsDataset=(FsDatasetImpl)cluster.getDataNodes().get(0).getFSDataset();
  ReplicaMap volumeMap=new ReplicaMap(new AutoCloseableLock());
  RamDiskReplicaTracker ramDiskReplicaMap=RamDiskReplicaTracker.getInstance(conf,fsDataset);
  FsVolumeImpl vol=(FsVolumeImpl)fsDataset.getFsVolumeReferences().get(0);
  String bpid=cluster.getNamesystem().getBlockPoolId();
  vol.getVolumeMap(bpid,volumeMap,ramDiskReplicaMap);
  assertTrue("Failed to add all the replica to map",volumeMap.replicas(bpid).size() == 1000);
  assertTrue("Fork pool size should be " + poolSize,BlockPoolSlice.getAddReplicaForkPoolSize() == poolSize);
}
