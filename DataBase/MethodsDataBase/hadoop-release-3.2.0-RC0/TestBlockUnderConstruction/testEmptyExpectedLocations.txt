/** 
 * A storage ID can be invalid if the storage failed or the node reregisters. When the node heart-beats, the storage report in it causes storage volumes to be added back. An invalid storage ID should not cause an NPE.
 */
@Test public void testEmptyExpectedLocations() throws Exception {
  final NamenodeProtocols namenode=cluster.getNameNodeRpc();
  final FSNamesystem fsn=cluster.getNamesystem();
  final BlockManager bm=fsn.getBlockManager();
  final Path p=new Path(BASE_DIR,"file2.dat");
  final String src=p.toString();
  final FSDataOutputStream out=TestFileCreation.createFile(hdfs,p,1);
  writeFile(p,out,256);
  out.hflush();
  LocatedBlocks lbs=namenode.getBlockLocations(src,0,256);
  LocatedBlock lastLB=lbs.getLocatedBlocks().get(0);
  final Block b=lastLB.getBlock().getLocalBlock();
  long blockRecoveryId=bm.nextGenerationStamp(false);
  BlockUnderConstructionFeature uc=bm.getStoredBlock(b).getUnderConstructionFeature();
  uc.initializeBlockRecovery(null,blockRecoveryId,false);
  try {
    String[] storages={"invalid-storage-id1"};
    fsn.commitBlockSynchronization(lastLB.getBlock(),blockRecoveryId,256L,true,false,lastLB.getLocations(),storages);
  }
 catch (  java.lang.IllegalStateException ise) {
  }
  lbs=namenode.getBlockLocations(src,0,256);
}
