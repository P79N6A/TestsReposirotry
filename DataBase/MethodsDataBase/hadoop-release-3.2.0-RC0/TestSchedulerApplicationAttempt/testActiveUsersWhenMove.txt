@Test public void testActiveUsersWhenMove(){
  final String user="user1";
  Queue parentQueue=createQueue("parent",null);
  Queue queue1=createQueue("queue1",parentQueue);
  Queue queue2=createQueue("queue2",parentQueue);
  Queue queue3=createQueue("queue3",parentQueue);
  ApplicationAttemptId appAttId=createAppAttemptId(0,0);
  RMContext rmContext=mock(RMContext.class);
  when(rmContext.getEpoch()).thenReturn(3L);
  SchedulerApplicationAttempt app=new SchedulerApplicationAttempt(appAttId,user,queue1,queue1.getAbstractUsersManager(),rmContext);
  Resource requestedResource=Resource.newInstance(1536,2);
  Priority requestedPriority=Priority.newInstance(2);
  ResourceRequest request=ResourceRequest.newInstance(requestedPriority,ResourceRequest.ANY,requestedResource,1);
  app.updateResourceRequests(Arrays.asList(request));
  assertEquals(1,queue1.getAbstractUsersManager().getNumActiveUsers());
  app.move(queue2);
  assertEquals(0,queue1.getAbstractUsersManager().getNumActiveUsers());
  assertEquals(1,queue2.getAbstractUsersManager().getNumActiveUsers());
  RMContainer container1=createRMContainer(appAttId,1,requestedResource);
  app.liveContainers.put(container1.getContainerId(),container1);
  SchedulerNode node=createNode();
  app.appSchedulingInfo.allocate(NodeType.OFF_SWITCH,node,toSchedulerKey(requestedPriority),container1.getContainer());
  assertEquals(0,queue2.getAbstractUsersManager().getNumActiveUsers());
  app.move(queue3);
  assertEquals(0,queue3.getAbstractUsersManager().getNumActiveUsers());
}
