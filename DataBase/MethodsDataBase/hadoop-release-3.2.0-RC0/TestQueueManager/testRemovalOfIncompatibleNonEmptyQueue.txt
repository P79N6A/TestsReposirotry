@Test public void testRemovalOfIncompatibleNonEmptyQueue() throws Exception {
  AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
  allocConf.configuredQueues.get(FSQueueType.LEAF).add("root.a");
  scheduler.allocConf=allocConf;
  queueManager.updateAllocationConfiguration(allocConf);
  FSLeafQueue q=queueManager.getLeafQueue("root.a",true);
  assertNotNull("root.a does not exist",q);
  assertTrue("root.a is not empty",queueManager.isEmpty(q));
  notEmptyQueues.add(q);
  q=queueManager.getLeafQueue("root.a",false);
  assertNotNull("root.a does not exist",q);
  assertFalse("root.a is empty",queueManager.isEmpty(q));
  queueManager.removePendingIncompatibleQueues();
  queueManager.removeEmptyDynamicQueues();
  q=queueManager.getLeafQueue("root.a",false);
  assertNotNull("root.a does not exist",q);
  allocConf.configuredQueues.get(FSQueueType.LEAF).remove("root.a");
  allocConf.configuredQueues.get(FSQueueType.PARENT).add("root.a");
  allocConf.configuredQueues.get(FSQueueType.LEAF).add("root.a.b");
  queueManager.updateAllocationConfiguration(allocConf);
  q=queueManager.getLeafQueue("root.a",false);
  assertNotNull("root.a has been removed",q);
  assertFalse("root.a is empty",queueManager.isEmpty(q));
  queueManager.removePendingIncompatibleQueues();
  q=queueManager.getLeafQueue("root.a",false);
  assertNotNull("root.a has been removed",q);
  assertFalse("root.a is empty",queueManager.isEmpty(q));
  notEmptyQueues.clear();
  queueManager.removePendingIncompatibleQueues();
  queueManager.removeEmptyDynamicQueues();
  FSParentQueue p=queueManager.getParentQueue("root.a",false);
  assertNotNull("root.a does not exist",p);
}
