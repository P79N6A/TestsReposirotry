@Test public void testApplicationAssignmentPreventsRemovalOfDynamicQueue() throws Exception {
  AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
  queueManager=new QueueManager(scheduler);
  queueManager.initialize(conf);
  queueManager.updateAllocationConfiguration(allocConf);
  FSLeafQueue q=queueManager.getLeafQueue("root.leaf1",true);
  assertNotNull("root.leaf1 does not exist",q);
  assertTrue("root.leaf1 is not empty",queueManager.isEmpty(q));
  ApplicationId applicationId=ApplicationId.newInstance(1L,0);
  q.addAssignedApp(applicationId);
  q=queueManager.getLeafQueue("root.leaf1",false);
  assertFalse("root.leaf1 is empty",queueManager.isEmpty(q));
  queueManager.removePendingIncompatibleQueues();
  queueManager.removeEmptyDynamicQueues();
  q=queueManager.getLeafQueue("root.leaf1",false);
  assertNotNull("root.leaf1 has been removed",q);
  assertFalse("root.leaf1 is empty",queueManager.isEmpty(q));
  ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.newInstance(applicationId,0);
  ActiveUsersManager activeUsersManager=Mockito.mock(ActiveUsersManager.class);
  RMContext rmContext=Mockito.mock(RMContext.class);
  FSAppAttempt appAttempt=new FSAppAttempt(scheduler,applicationAttemptId,"a_user",q,activeUsersManager,rmContext);
  q.addApp(appAttempt,true);
  queueManager.removeEmptyDynamicQueues();
  q=queueManager.getLeafQueue("root.leaf1",false);
  assertNotNull("root.leaf1 has been removed",q);
  assertFalse("root.leaf1 is empty",queueManager.isEmpty(q));
  q.removeApp(appAttempt);
  q=queueManager.getLeafQueue("root.leaf1",false);
  assertTrue("root.leaf1 is not empty",queueManager.isEmpty(q));
  queueManager.removePendingIncompatibleQueues();
  queueManager.removeEmptyDynamicQueues();
  q=queueManager.getLeafQueue("root.leaf1",false);
  assertNull("root.leaf1 has not been removed",q);
}
