/** 
 * Test creation of leaf and parent child queues when the parent queue has child defaults set. In this test we rely on the root.test, root.test.childA and root.test.childB queues that are created in the {@link #setUp()} method.
 */
@Test public void testCreateQueueWithChildDefaults(){
  AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
  queueManager.updateAllocationConfiguration(allocConf);
  queueManager.getQueue("root.test").setMaxChildQueueResource(new ConfigurableResource(Resources.createResource(8192,256)));
  FSQueue q1=queueManager.createQueue("root.test.childC",FSQueueType.LEAF);
  assertNotNull("Leaf queue root.test.childC was not created",queueManager.getLeafQueue("root.test.childC",false));
  assertEquals("createQueue() returned wrong queue","root.test.childC",q1.getName());
  assertEquals("Max resources for root.queue1 were not inherited from " + "parent's max child resources",Resources.createResource(8192,256),q1.getMaxShare());
  FSQueue q2=queueManager.createQueue("root.test.childD",FSQueueType.PARENT);
  assertNotNull("Leaf queue root.test.childD was not created",queueManager.getParentQueue("root.test.childD",false));
  assertEquals("createQueue() returned wrong queue","root.test.childD",q2.getName());
  assertEquals("Max resources for root.test.childD were not inherited " + "from parent's max child resources",Resources.createResource(8192,256),q2.getMaxShare());
  assertNotNull("Leaf queue root.test.childA was not created during setup",queueManager.getLeafQueue("root.test.childA",false));
  assertEquals("Max resources for root.test.childA were inherited from " + "parent's max child resources",Resources.unbounded(),queueManager.getLeafQueue("root.test.childA",false).getMaxShare());
  assertNotNull("Leaf queue root.test.childB was not created during setup",queueManager.getParentQueue("root.test.childB",false));
  assertEquals("Max resources for root.test.childB were inherited from " + "parent's max child resources",Resources.unbounded(),queueManager.getParentQueue("root.test.childB",false).getMaxShare());
}
