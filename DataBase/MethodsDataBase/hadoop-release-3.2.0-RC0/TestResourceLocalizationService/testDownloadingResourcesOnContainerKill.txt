@Test(timeout=20000) public void testDownloadingResourcesOnContainerKill() throws Exception {
  List<Path> localDirs=new ArrayList<Path>();
  String[] sDirs=new String[1];
  localDirs.add(lfs.makeQualified(new Path(basedir,0 + "")));
  sDirs[0]=localDirs.get(0).toString();
  conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS,sDirs);
  DummyExecutor exec=new DummyExecutor();
  LocalDirsHandlerService dirsHandler=new LocalDirsHandlerService();
  dirsHandler.init(conf);
  DeletionService delServiceReal=new DeletionService(exec);
  DeletionService delService=spy(delServiceReal);
  delService.init(new Configuration());
  delService.start();
  DrainDispatcher dispatcher=getDispatcher(conf);
  ResourceLocalizationService rawService=new ResourceLocalizationService(dispatcher,exec,delService,dirsHandler,nmContext,metrics);
  ResourceLocalizationService spyService=spy(rawService);
  doReturn(mockServer).when(spyService).createServer();
  doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));
  FsPermission defaultPermission=FsPermission.getDirDefault().applyUMask(lfs.getUMask());
  FsPermission nmPermission=ResourceLocalizationService.NM_PRIVATE_PERM.applyUMask(lfs.getUMask());
  final Path userDir=new Path(sDirs[0].substring("file:".length()),ContainerLocalizer.USERCACHE);
  final Path fileDir=new Path(sDirs[0].substring("file:".length()),ContainerLocalizer.FILECACHE);
  final Path sysDir=new Path(sDirs[0].substring("file:".length()),ResourceLocalizationService.NM_PRIVATE_DIR);
  final FileStatus fs=new FileStatus(0,true,1,0,System.currentTimeMillis(),0,defaultPermission,"","",new Path(sDirs[0]));
  final FileStatus nmFs=new FileStatus(0,true,1,0,System.currentTimeMillis(),0,nmPermission,"","",sysDir);
  doAnswer(new Answer<FileStatus>(){
    @Override public FileStatus answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      if (args.length > 0) {
        if (args[0].equals(userDir) || args[0].equals(fileDir)) {
          return fs;
        }
      }
      return nmFs;
    }
  }
).when(spylfs).getFileStatus(isA(Path.class));
  try {
    spyService.init(conf);
    spyService.start();
    doLocalization(spyService,dispatcher,exec,delService);
  }
  finally {
    spyService.stop();
    dispatcher.stop();
    delService.stop();
  }
}
