@Test @SuppressWarnings("unchecked") public void testPublicCacheDirPermission() throws Exception {
  NMStateStoreService spyStateStore=spy(nmContext.getNMStateStore());
  when(spyStateStore.canRecover()).thenReturn(true);
  NMContext spyContext=spy(nmContext);
  when(spyContext.getNMStateStore()).thenReturn(spyStateStore);
  Path localDir=new Path("target","testPublicCacheDirPermission");
  String sDir=lfs.makeQualified(localDir).toString();
  conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS,sDir);
  conf.setInt(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY,38);
  DrainDispatcher dispatcher=new DrainDispatcher();
  EventHandler<ApplicationEvent> applicationBus=mock(EventHandler.class);
  dispatcher.register(ApplicationEventType.class,applicationBus);
  EventHandler<ContainerEvent> containerBus=mock(EventHandler.class);
  dispatcher.register(ContainerEventType.class,containerBus);
  ContainerExecutor exec=mock(ContainerExecutor.class);
  DeletionService delService=mock(DeletionService.class);
  LocalDirsHandlerService dirsHandler=new LocalDirsHandlerService();
  dirsHandler.init(conf);
  dispatcher.init(conf);
  dispatcher.start();
  try {
    ResourceLocalizationService rawService=new ResourceLocalizationService(dispatcher,exec,delService,dirsHandler,spyContext,null);
    ResourceLocalizationService spyService=spy(rawService);
    doReturn(mockServer).when(spyService).createServer();
    doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));
    spyService.init(conf);
    spyService.start();
    final FsPermission expectedPerm=new FsPermission((short)0755);
    Path publicCache=new Path(localDir,ContainerLocalizer.FILECACHE);
    FsPermission wrongPerm=new FsPermission((short)0700);
    Path overflowFolder=new Path(publicCache,"0");
    lfs.mkdir(overflowFolder,wrongPerm,false);
    spyService.lfs.setUMask(new FsPermission((short)0777));
    final String user="user0";
    final Application app=mock(Application.class);
    final ApplicationId appId=BuilderUtils.newApplicationId(314159265358979L,3);
    when(app.getUser()).thenReturn(user);
    when(app.getAppId()).thenReturn(appId);
    spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES,app));
    dispatcher.await();
    final Container c=getMockContainer(appId,42,user);
    Random r=new Random();
    long seed=r.nextLong();
    System.out.println("SEED: " + seed);
    r.setSeed(seed);
    Set<LocalResourceRequest> pubRsrcs=new HashSet<LocalResourceRequest>();
    for (int i=0; i < 3; i++) {
      LocalResource pubResource=getPublicMockedResource(r,true,conf,sDir);
      LocalResourceRequest pubReq=new LocalResourceRequest(pubResource);
      pubRsrcs.add(pubReq);
    }
    Map<LocalResourceVisibility,Collection<LocalResourceRequest>> req=new HashMap<LocalResourceVisibility,Collection<LocalResourceRequest>>();
    req.put(LocalResourceVisibility.PUBLIC,pubRsrcs);
    spyService.handle(new ContainerLocalizationRequestEvent(c,req));
    dispatcher.await();
    Assert.assertEquals("Cache directory permissions filecache/0 is incorrect",expectedPerm,lfs.getFileStatus(overflowFolder).getPermission());
  }
  finally {
    dispatcher.stop();
  }
}
