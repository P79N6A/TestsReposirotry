@Test public void testAllocationFileParsing() throws Exception {
  Configuration conf=new YarnConfiguration();
  TestResourceUtils.addNewTypesToResources(A_CUSTOM_RESOURCE);
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  AllocationFileLoaderService allocLoader=new AllocationFileLoaderService();
  AllocationFileWriter.create().queue("queueA").minResources("1024mb,0vcores").maxResources("2048mb,10vcores").buildQueue().queue("queueB").minResources("2048mb,0vcores").maxResources("5120mb,110vcores").aclAdministerApps("alice,bob admins").schedulingPolicy("fair").buildQueue().queue("queueC").minResources("5120mb,0vcores").aclSubmitApps("alice,bob admins").buildQueue().queue("queueD").maxRunningApps(3).maxAMShare(0.4).buildQueue().queue("queueE").minSharePreemptionTimeout(60).buildQueue().queue("queueF").parent(true).maxChildResources("2048mb,64vcores").buildQueue().queue("queueG").maxChildResources("2048mb,64vcores").fairSharePreemptionTimeout(120).minSharePreemptionTimeout(50).fairSharePreemptionThreshold(0.6).maxContainerAllocation("vcores=16, memory-mb=512, " + A_CUSTOM_RESOURCE + "=10").subQueue("queueH").fairSharePreemptionTimeout(180).minSharePreemptionTimeout(40).fairSharePreemptionThreshold(0.7).maxContainerAllocation("1024mb,8vcores").buildSubQueue().buildQueue().queueMaxAppsDefault(15).queueMaxResourcesDefault("4096mb,100vcores").userMaxAppsDefault(5).queueMaxAMShareDefault(0.5).defaultMinSharePreemptionTimeout(120).defaultFairSharePreemptionTimeout(300).defaultFairSharePreemptionThreshold(0.4).defaultQueueSchedulingPolicy("drf").userSettings("user1").maxRunningApps(10).build().writeToFile(ALLOC_FILE);
  allocLoader.init(conf);
  ReloadListener confHolder=new ReloadListener();
  allocLoader.setReloadListener(confHolder);
  allocLoader.reloadAllocations();
  AllocationConfiguration queueConf=confHolder.allocConf;
  assertEquals(6,queueConf.getConfiguredQueues().get(FSQueueType.LEAF).size());
  assertEquals(Resources.createResource(0),queueConf.getMinResources("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(Resources.createResource(2048,10),queueConf.getMaxResources("root.queueA").getResource());
  assertEquals(Resources.createResource(5120,110),queueConf.getMaxResources("root.queueB").getResource());
  assertEquals(Resources.createResource(4096,100),queueConf.getMaxResources("root.queueC").getResource());
  assertEquals(Resources.createResource(4096,100),queueConf.getMaxResources("root.queueD").getResource());
  assertEquals(Resources.createResource(4096,100),queueConf.getMaxResources("root.queueE").getResource());
  assertEquals(Resources.createResource(4096,100),queueConf.getMaxResources("root.queueF").getResource());
  assertEquals(Resources.createResource(4096,100),queueConf.getMaxResources("root.queueG").getResource());
  assertEquals(Resources.createResource(4096,100),queueConf.getMaxResources("root.queueG.queueH").getResource());
  assertEquals(Resources.createResource(1024,0),queueConf.getMinResources("root.queueA"));
  assertEquals(Resources.createResource(2048,0),queueConf.getMinResources("root.queueB"));
  assertEquals(Resources.createResource(5120,0),queueConf.getMinResources("root.queueC"));
  assertEquals(Resources.createResource(0),queueConf.getMinResources("root.queueD"));
  assertEquals(Resources.createResource(0),queueConf.getMinResources("root.queueE"));
  assertEquals(Resources.createResource(0),queueConf.getMinResources("root.queueF"));
  assertEquals(Resources.createResource(0),queueConf.getMinResources("root.queueG"));
  assertEquals(Resources.createResource(0),queueConf.getMinResources("root.queueG.queueH"));
  assertNull("Max child resources unexpectedly set for queue root.queueA",queueConf.getMaxChildResources("root.queueA"));
  assertNull("Max child resources unexpectedly set for queue root.queueB",queueConf.getMaxChildResources("root.queueB"));
  assertNull("Max child resources unexpectedly set for queue root.queueC",queueConf.getMaxChildResources("root.queueC"));
  assertNull("Max child resources unexpectedly set for queue root.queueD",queueConf.getMaxChildResources("root.queueD"));
  assertNull("Max child resources unexpectedly set for queue root.queueE",queueConf.getMaxChildResources("root.queueE"));
  assertEquals(Resources.createResource(2048,64),queueConf.getMaxChildResources("root.queueF").getResource());
  assertEquals(Resources.createResource(2048,64),queueConf.getMaxChildResources("root.queueG").getResource());
  assertNull("Max child resources unexpectedly set for " + "queue root.queueG.queueH",queueConf.getMaxChildResources("root.queueG.queueH"));
  assertEquals(15,queueConf.getQueueMaxApps("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(15,queueConf.getQueueMaxApps("root.queueA"));
  assertEquals(15,queueConf.getQueueMaxApps("root.queueB"));
  assertEquals(15,queueConf.getQueueMaxApps("root.queueC"));
  assertEquals(3,queueConf.getQueueMaxApps("root.queueD"));
  assertEquals(15,queueConf.getQueueMaxApps("root.queueE"));
  assertEquals(10,queueConf.getUserMaxApps("user1"));
  assertEquals(5,queueConf.getUserMaxApps("user2"));
  assertEquals(.5f,queueConf.getQueueMaxAMShare("root." + YarnConfiguration.DEFAULT_QUEUE_NAME),0.01);
  assertEquals(.5f,queueConf.getQueueMaxAMShare("root.queueA"),0.01);
  assertEquals(.5f,queueConf.getQueueMaxAMShare("root.queueB"),0.01);
  assertEquals(.5f,queueConf.getQueueMaxAMShare("root.queueC"),0.01);
  assertEquals(.4f,queueConf.getQueueMaxAMShare("root.queueD"),0.01);
  assertEquals(.5f,queueConf.getQueueMaxAMShare("root.queueE"),0.01);
  Resource expectedResourceWithCustomType=Resources.createResource(512,16);
  expectedResourceWithCustomType.setResourceValue(A_CUSTOM_RESOURCE,10);
  assertEquals(Resources.unbounded(),queueConf.getQueueMaxContainerAllocation("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(Resources.unbounded(),queueConf.getQueueMaxContainerAllocation("root.queueA"));
  assertEquals(Resources.unbounded(),queueConf.getQueueMaxContainerAllocation("root.queueB"));
  assertEquals(Resources.unbounded(),queueConf.getQueueMaxContainerAllocation("root.queueC"));
  assertEquals(Resources.unbounded(),queueConf.getQueueMaxContainerAllocation("root.queueD"));
  assertEquals(Resources.unbounded(),queueConf.getQueueMaxContainerAllocation("root.queueE"));
  assertEquals(Resources.unbounded(),queueConf.getQueueMaxContainerAllocation("root.queueF"));
  assertEquals(expectedResourceWithCustomType,queueConf.getQueueMaxContainerAllocation("root.queueG"));
  assertEquals(Resources.createResource(1024,8),queueConf.getQueueMaxContainerAllocation("root.queueG.queueH"));
  assertEquals(120000,queueConf.getMinSharePreemptionTimeout("root"));
  assertEquals(-1,queueConf.getMinSharePreemptionTimeout("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(-1,queueConf.getMinSharePreemptionTimeout("root.queueA"));
  assertEquals(-1,queueConf.getMinSharePreemptionTimeout("root.queueB"));
  assertEquals(-1,queueConf.getMinSharePreemptionTimeout("root.queueC"));
  assertEquals(-1,queueConf.getMinSharePreemptionTimeout("root.queueD"));
  assertEquals(60000,queueConf.getMinSharePreemptionTimeout("root.queueE"));
  assertEquals(-1,queueConf.getMinSharePreemptionTimeout("root.queueF"));
  assertEquals(50000,queueConf.getMinSharePreemptionTimeout("root.queueG"));
  assertEquals(40000,queueConf.getMinSharePreemptionTimeout("root.queueG.queueH"));
  assertEquals(300000,queueConf.getFairSharePreemptionTimeout("root"));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root.queueA"));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root.queueB"));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root.queueC"));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root.queueD"));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root.queueE"));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root.queueF"));
  assertEquals(120000,queueConf.getFairSharePreemptionTimeout("root.queueG"));
  assertEquals(180000,queueConf.getFairSharePreemptionTimeout("root.queueG.queueH"));
  assertEquals(.4f,queueConf.getFairSharePreemptionThreshold("root"),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root." + YarnConfiguration.DEFAULT_QUEUE_NAME),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root.queueA"),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root.queueB"),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root.queueC"),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root.queueD"),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root.queueE"),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root.queueF"),0.01);
  assertEquals(.6f,queueConf.getFairSharePreemptionThreshold("root.queueG"),0.01);
  assertEquals(.7f,queueConf.getFairSharePreemptionThreshold("root.queueG.queueH"),0.01);
  assertTrue(queueConf.getConfiguredQueues().get(FSQueueType.PARENT).contains("root.queueF"));
  assertTrue(queueConf.getConfiguredQueues().get(FSQueueType.PARENT).contains("root.queueG"));
  assertTrue(queueConf.getConfiguredQueues().get(FSQueueType.LEAF).contains("root.queueG.queueH"));
  assertEquals(DominantResourceFairnessPolicy.NAME,queueConf.getSchedulingPolicy("root").getName());
  assertEquals(DominantResourceFairnessPolicy.NAME,queueConf.getSchedulingPolicy("root.queueA").getName());
  assertEquals(FairSharePolicy.NAME,queueConf.getSchedulingPolicy("root.queueB").getName());
  assertEquals(DominantResourceFairnessPolicy.NAME,queueConf.getSchedulingPolicy("root.newqueue").getName());
}
