/** 
 * This test ensures the appropriate response (successful or failure) from  a Datanode when the system is started with differing version combinations.  <pre> For each 3-tuple in the cross product ({oldLayoutVersion,currentLayoutVersion,futureLayoutVersion}, {currentNamespaceId,incorrectNamespaceId}, {pastFsscTime,currentFsscTime,futureFsscTime}) 1. Startup Namenode with version file containing  (currentLayoutVersion,currentNamespaceId,currentFsscTime) 2. Attempt to startup Datanode with version file containing  this iterations version 3-tuple </pre>
 */
@Test(timeout=300000) public void testVersions() throws Exception {
  UpgradeUtilities.initialize();
  Configuration conf=UpgradeUtilities.initializeStorageStateConf(1,new HdfsConfiguration());
  StorageData[] versions=initializeVersions();
  UpgradeUtilities.createNameNodeStorageDirs(conf.getStrings(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY),"current");
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).manageDataDfsDirs(false).manageNameDfsDirs(false).startupOption(StartupOption.REGULAR).build();
  StorageData nameNodeVersion=new StorageData(HdfsServerConstants.NAMENODE_LAYOUT_VERSION,UpgradeUtilities.getCurrentNamespaceID(cluster),UpgradeUtilities.getCurrentClusterID(cluster),UpgradeUtilities.getCurrentFsscTime(cluster),UpgradeUtilities.getCurrentBlockPoolID(cluster));
  log("NameNode version info",NAME_NODE,null,nameNodeVersion);
  String bpid=UpgradeUtilities.getCurrentBlockPoolID(cluster);
  for (int i=0; i < versions.length; i++) {
    File[] storage=UpgradeUtilities.createDataNodeStorageDirs(conf.getStrings(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY),"current");
    log("DataNode version info",DATA_NODE,i,versions[i]);
    UpgradeUtilities.createDataNodeVersionFile(storage,versions[i].storageInfo,bpid,versions[i].blockPoolId,conf);
    try {
      cluster.startDataNodes(conf,1,false,StartupOption.REGULAR,null);
    }
 catch (    Exception ignore) {
    }
    assertTrue(cluster.getNameNode() != null);
    assertEquals(isVersionCompatible(nameNodeVersion,versions[i]),cluster.isDataNodeUp());
    cluster.shutdownDataNodes();
  }
}
