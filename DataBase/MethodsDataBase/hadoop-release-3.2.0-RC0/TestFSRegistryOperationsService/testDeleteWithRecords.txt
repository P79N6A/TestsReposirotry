@Test public void testDeleteWithRecords() throws IOException {
  System.out.println("pre-create test path with children and mocked records");
  fs.mkdirs(new Path("test/registryTestNode"));
  fs.mkdirs(new Path("test/registryTestNode/child1"));
  fs.mkdirs(new Path("test/registryTestNode/child2"));
  fs.create(new Path("test/registryTestNode/_record")).close();
  fs.create(new Path("test/registryTestNode/child1/_record")).close();
  System.out.println("Delete dir with child nodes and record file");
  try {
    registry.delete("test/registryTestNode",false);
    Assert.fail("Nonrecursive delete of non-empty dir");
  }
 catch (  PathIsNotEmptyDirectoryException e) {
  }
  Assert.assertTrue(fs.exists(new Path("test/registryTestNode/_record")));
  Assert.assertTrue(fs.exists(new Path("test/registryTestNode/child1/_record")));
  Assert.assertTrue(fs.exists(new Path("test/registryTestNode/child2")));
  System.out.println("Delete dir with record file and no child dirs");
  registry.delete("test/registryTestNode/child1",false);
  Assert.assertFalse(fs.exists(new Path("test/registryTestNode/child1")));
  Assert.assertTrue(fs.exists(new Path("test/registryTestNode/child2")));
  System.out.println("Delete dir with child dir and no record file");
  try {
    registry.delete("test/registryTestNode",false);
    Assert.fail("Nonrecursive delete of non-empty dir");
  }
 catch (  PathIsNotEmptyDirectoryException e) {
  }
  Assert.assertTrue(fs.exists(new Path("test/registryTestNode/child2")));
}
