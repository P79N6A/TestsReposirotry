/** 
 * Test Mover Cli by specifying a list of files/directories using option "-p". There is only one namenode (and hence name service) specified in the conf.
 */
@Test public void testMoverCli() throws Exception {
  final Configuration clusterConf=new HdfsConfiguration();
  clusterConf.set(DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,StoragePolicySatisfierMode.NONE.toString());
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(clusterConf).numDataNodes(0).build();
  try {
    final Configuration conf=cluster.getConfiguration(0);
    try {
      Mover.Cli.getNameNodePathsToMove(conf,"-p","/foo","bar");
      Assert.fail("Expected exception for illegal path bar");
    }
 catch (    IllegalArgumentException e) {
      GenericTestUtils.assertExceptionContains("bar is not absolute",e);
    }
    Map<URI,List<Path>> movePaths=Mover.Cli.getNameNodePathsToMove(conf);
    Collection<URI> namenodes=DFSUtil.getInternalNsRpcUris(conf);
    Assert.assertEquals(1,namenodes.size());
    Assert.assertEquals(1,movePaths.size());
    URI nn=namenodes.iterator().next();
    Assert.assertTrue(movePaths.containsKey(nn));
    Assert.assertNull(movePaths.get(nn));
    movePaths=Mover.Cli.getNameNodePathsToMove(conf,"-p","/foo","/bar");
    namenodes=DFSUtil.getInternalNsRpcUris(conf);
    Assert.assertEquals(1,movePaths.size());
    nn=namenodes.iterator().next();
    Assert.assertTrue(movePaths.containsKey(nn));
    checkMovePaths(movePaths.get(nn),new Path("/foo"),new Path("/bar"));
  }
  finally {
    cluster.shutdown();
  }
}
