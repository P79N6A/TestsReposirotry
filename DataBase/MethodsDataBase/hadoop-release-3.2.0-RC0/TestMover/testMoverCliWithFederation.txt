@Test public void testMoverCliWithFederation() throws Exception {
  final Configuration clusterConf=new HdfsConfiguration();
  clusterConf.set(DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,StoragePolicySatisfierMode.NONE.toString());
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(clusterConf).nnTopology(MiniDFSNNTopology.simpleFederatedTopology(3)).numDataNodes(0).build();
  final Configuration conf=new HdfsConfiguration();
  clusterConf.set(DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_MODE_KEY,StoragePolicySatisfierMode.NONE.toString());
  DFSTestUtil.setFederatedConfiguration(cluster,conf);
  try {
    Collection<URI> namenodes=DFSUtil.getInternalNsRpcUris(conf);
    Assert.assertEquals(3,namenodes.size());
    try {
      Mover.Cli.getNameNodePathsToMove(conf,"-p","/foo");
      Assert.fail("Expect exception for missing authority information");
    }
 catch (    IllegalArgumentException e) {
      GenericTestUtils.assertExceptionContains("does not contain scheme and authority",e);
    }
    try {
      Mover.Cli.getNameNodePathsToMove(conf,"-p","hdfs:///foo");
      Assert.fail("Expect exception for missing authority information");
    }
 catch (    IllegalArgumentException e) {
      GenericTestUtils.assertExceptionContains("does not contain scheme and authority",e);
    }
    try {
      Mover.Cli.getNameNodePathsToMove(conf,"-p","wrong-hdfs://ns1/foo");
      Assert.fail("Expect exception for wrong scheme");
    }
 catch (    IllegalArgumentException e) {
      GenericTestUtils.assertExceptionContains("Cannot resolve the path",e);
    }
    Iterator<URI> iter=namenodes.iterator();
    URI nn1=iter.next();
    URI nn2=iter.next();
    Map<URI,List<Path>> movePaths=Mover.Cli.getNameNodePathsToMove(conf,"-p",nn1 + "/foo",nn1 + "/bar",nn2 + "/foo/bar");
    Assert.assertEquals(2,movePaths.size());
    checkMovePaths(movePaths.get(nn1),new Path("/foo"),new Path("/bar"));
    checkMovePaths(movePaths.get(nn2),new Path("/foo/bar"));
  }
  finally {
    cluster.shutdown();
  }
}
