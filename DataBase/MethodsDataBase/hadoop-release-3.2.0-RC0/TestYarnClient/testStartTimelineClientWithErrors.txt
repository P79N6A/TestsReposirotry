@Test public void testStartTimelineClientWithErrors() throws Exception {
  testCreateTimelineClientWithError(1.5f,true,false,new NoClassDefFoundError("Mock a NoClassDefFoundError"),new CreateTimelineClientErrorVerifier(1){
    @Override public void verifyError(    Throwable e){
      Assert.assertTrue(e instanceof NoClassDefFoundError);
      Assert.assertTrue(e.getMessage() != null && e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_ENABLED));
    }
  }
);
  testCreateTimelineClientWithError(1.5f,false,false,new NoClassDefFoundError("Mock a NoClassDefFoundError"),new CreateTimelineClientErrorVerifier(0){
    @Override public void verifyError(    Throwable e){
      Assert.fail("NoClassDefFoundError while creating timeline client" + "should be tolerated when timeline service is disabled.");
    }
  }
);
  testCreateTimelineClientWithError(1.5f,true,true,new NoClassDefFoundError("Mock a NoClassDefFoundError"),new CreateTimelineClientErrorVerifier(1){
    @Override public void verifyError(    Throwable e){
      Assert.assertTrue(e instanceof NoClassDefFoundError);
      Assert.assertTrue(e.getMessage() != null && e.getMessage().contains(YarnConfiguration.TIMELINE_SERVICE_ENABLED));
    }
  }
);
  testCreateTimelineClientWithError(1.5f,true,false,new IOException("ATS v1.5 client initialization failed."),new CreateTimelineClientErrorVerifier(1){
    @Override public void verifyError(    Throwable e){
      Assert.assertTrue(e instanceof IOException);
    }
  }
);
  testCreateTimelineClientWithError(1.5f,true,true,new IOException("ATS v1.5 client initialization failed."),new CreateTimelineClientErrorVerifier(0){
    @Override public void verifyError(    Throwable e){
      Assert.fail("IOException while creating timeline client" + "should be tolerated when best effort is true");
    }
  }
);
}
