@Test public void testNamespaceParse() throws InvalidAllocationTagsQueryException {
  TargetApplicationsNamespace namespace;
  String namespaceStr="self";
  namespace=TargetApplicationsNamespace.parse(namespaceStr);
  Assert.assertEquals(AllocationTagNamespaceType.SELF,namespace.getNamespaceType());
  namespaceStr="not-self";
  namespace=TargetApplicationsNamespace.parse(namespaceStr);
  Assert.assertEquals(AllocationTagNamespaceType.NOT_SELF,namespace.getNamespaceType());
  namespaceStr="all";
  namespace=TargetApplicationsNamespace.parse(namespaceStr);
  Assert.assertEquals(AllocationTagNamespaceType.ALL,namespace.getNamespaceType());
  namespaceStr="app-tag/spark-jobs";
  namespace=TargetApplicationsNamespace.parse(namespaceStr);
  Assert.assertEquals(AllocationTagNamespaceType.APP_TAG,namespace.getNamespaceType());
  try {
    namespaceStr="app-tag/tag123/tag234";
    TargetApplicationsNamespace.parse(namespaceStr);
    Assert.fail("Parsing should fail as the given namespace is invalid");
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.assertTrue(e instanceof InvalidAllocationTagsQueryException);
    Assert.assertTrue(e.getMessage().startsWith("Invalid namespace string"));
  }
  ApplicationId applicationId=ApplicationId.newInstance(12345,1);
  namespaceStr="app-id/" + applicationId.toString();
  namespace=TargetApplicationsNamespace.parse(namespaceStr);
  Assert.assertEquals(AllocationTagNamespaceType.APP_ID,namespace.getNamespaceType());
  try {
    namespaceStr="app-id/apppppp_12345_99999";
    TargetApplicationsNamespace.parse(namespaceStr);
    Assert.fail("Parsing should fail as the given app ID is invalid");
  }
 catch (  Exception e) {
    Assert.assertTrue(e instanceof InvalidAllocationTagsQueryException);
    Assert.assertTrue(e.getMessage().startsWith("Invalid application ID for app-id"));
  }
  try {
    namespaceStr="app-id";
    TargetApplicationsNamespace.parse(namespaceStr);
    Assert.fail("Parsing should fail as the given namespace" + " is missing application ID");
  }
 catch (  Exception e) {
    Assert.assertTrue(e instanceof InvalidAllocationTagsQueryException);
    Assert.assertTrue(e.getMessage().startsWith("Missing the application ID in the namespace string"));
  }
  try {
    namespaceStr="non_exist_ns";
    TargetApplicationsNamespace.parse(namespaceStr);
    Assert.fail("Parsing should fail as the giving type is not supported.");
  }
 catch (  Exception e) {
    Assert.assertTrue(e instanceof InvalidAllocationTagsQueryException);
    Assert.assertTrue(e.getMessage().startsWith("Invalid namespace prefix"));
  }
}
