@Test public void testNamespaceEvaluation() throws InvalidAllocationTagsQueryException {
  TargetApplicationsNamespace namespace;
  TargetApplications targetApplications;
  ApplicationId app1=ApplicationId.newInstance(10000,1);
  ApplicationId app2=ApplicationId.newInstance(10000,2);
  ApplicationId app3=ApplicationId.newInstance(10000,3);
  ApplicationId app4=ApplicationId.newInstance(10000,4);
  ApplicationId app5=ApplicationId.newInstance(10000,5);
  String namespaceStr="self";
  namespace=TargetApplicationsNamespace.parse(namespaceStr);
  try {
    namespace.getNamespaceScope();
    Assert.fail("Call getNamespaceScope before evaluate is not allowed.");
  }
 catch (  Exception e) {
    Assert.assertTrue(e instanceof IllegalStateException);
    Assert.assertTrue(e.getMessage().contains("Evaluate must be called before a namespace can be consumed."));
  }
  namespaceStr="self";
  namespace=TargetApplicationsNamespace.parse(namespaceStr);
  targetApplications=new TargetApplications(app1,ImmutableSet.of(app1));
  namespace.evaluate(targetApplications);
  Assert.assertEquals(1,namespace.getNamespaceScope().size());
  Assert.assertEquals(app1,namespace.getNamespaceScope().iterator().next());
  namespaceStr="not-self";
  namespace=TargetApplicationsNamespace.parse(namespaceStr);
  targetApplications=new TargetApplications(app1,ImmutableSet.of(app1));
  namespace.evaluate(targetApplications);
  Assert.assertEquals(0,namespace.getNamespaceScope().size());
  targetApplications=new TargetApplications(app1,ImmutableSet.of(app1,app2,app3));
  namespace.evaluate(targetApplications);
  Assert.assertEquals(2,namespace.getNamespaceScope().size());
  Assert.assertFalse(namespace.getNamespaceScope().contains(app1));
  namespaceStr="all";
  namespace=TargetApplicationsNamespace.parse(namespaceStr);
  Assert.assertEquals(AllocationTagNamespaceType.ALL,namespace.getNamespaceType());
  namespaceStr="app-id/" + app2.toString();
  namespace=TargetApplicationsNamespace.parse(namespaceStr);
  targetApplications=new TargetApplications(app1,ImmutableSet.of(app1,app2,app3,app4,app5));
  namespace.evaluate(targetApplications);
  Assert.assertEquals(1,namespace.getNamespaceScope().size());
  Assert.assertEquals(app2,namespace.getNamespaceScope().iterator().next());
  Map<ApplicationId,Set<String>> appsWithTags=new HashMap<>();
  appsWithTags.put(app1,ImmutableSet.of("A","B"));
  appsWithTags.put(app2,ImmutableSet.of("A"));
  appsWithTags.put(app3,ImmutableSet.of());
  appsWithTags.put(app4,ImmutableSet.of("C"));
  appsWithTags.put(app5,ImmutableSet.of("A","B","C"));
  namespaceStr="app-tag/A";
  namespace=TargetApplicationsNamespace.parse(namespaceStr);
  targetApplications=new TargetApplications(app1,appsWithTags);
  namespace.evaluate(targetApplications);
  Assert.assertEquals(3,namespace.getNamespaceScope().size());
  Assert.assertTrue(Sets.difference(namespace.getNamespaceScope(),ImmutableSet.of(app1,app2,app5)).isEmpty());
  namespaceStr="app-tag/B";
  namespace=TargetApplicationsNamespace.parse(namespaceStr);
  namespace.evaluate(targetApplications);
  Assert.assertEquals(2,namespace.getNamespaceScope().size());
  Assert.assertTrue(Sets.difference(namespace.getNamespaceScope(),ImmutableSet.of(app1,app5)).isEmpty());
  namespaceStr="app-tag/xyz";
  namespace=TargetApplicationsNamespace.parse(namespaceStr);
  namespace.evaluate(targetApplications);
  Assert.assertEquals(0,namespace.getNamespaceScope().size());
}
