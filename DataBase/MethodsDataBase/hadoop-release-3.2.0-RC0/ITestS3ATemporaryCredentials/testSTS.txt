/** 
 * Test use of STS for requesting temporary credentials. The property test.sts.endpoint can be set to point this at different STS endpoints. This test will use the AWS credentials (if provided) for S3A tests to request temporary credentials, then attempt to use those credentials instead.
 * @throws IOException failure
 */
@Test public void testSTS() throws IOException {
  Configuration conf=getContract().getConf();
  if (!conf.getBoolean(TEST_STS_ENABLED,true)) {
    skip("STS functional tests disabled");
  }
  S3AFileSystem testFS=getFileSystem();
  credentials=testFS.shareCredentials("testSTS");
  String bucket=testFS.getBucket();
  AWSSecurityTokenServiceClientBuilder builder=STSClientFactory.builder(conf,bucket,credentials,conf.getTrimmed(TEST_STS_ENDPOINT,""),"");
  AWSSecurityTokenService stsClient=builder.build();
  if (!conf.getTrimmed(TEST_STS_ENDPOINT,"").isEmpty()) {
    LOG.debug("STS Endpoint ={}",conf.getTrimmed(TEST_STS_ENDPOINT,""));
    stsClient.setEndpoint(conf.getTrimmed(TEST_STS_ENDPOINT,""));
  }
  GetSessionTokenRequest sessionTokenRequest=new GetSessionTokenRequest();
  sessionTokenRequest.setDurationSeconds(900);
  GetSessionTokenResult sessionTokenResult;
  sessionTokenResult=stsClient.getSessionToken(sessionTokenRequest);
  Credentials sessionCreds=sessionTokenResult.getCredentials();
  Configuration conf2=new Configuration(conf);
  S3AUtils.clearBucketOption(conf2,bucket,AWS_CREDENTIALS_PROVIDER);
  S3AUtils.clearBucketOption(conf2,bucket,ACCESS_KEY);
  S3AUtils.clearBucketOption(conf2,bucket,SECRET_KEY);
  S3AUtils.clearBucketOption(conf2,bucket,SESSION_TOKEN);
  conf2.set(ACCESS_KEY,sessionCreds.getAccessKeyId());
  conf2.set(SECRET_KEY,sessionCreds.getSecretAccessKey());
  conf2.set(SESSION_TOKEN,sessionCreds.getSessionToken());
  conf2.set(AWS_CREDENTIALS_PROVIDER,PROVIDER_CLASS);
  try (S3AFileSystem fs=S3ATestUtils.createTestFileSystem(conf2)){
    createAndVerifyFile(fs,path("testSTS"),TEST_FILE_SIZE);
  }
   conf2.set(SESSION_TOKEN,"invalid-" + sessionCreds.getSessionToken());
  try (S3AFileSystem fs=S3ATestUtils.createTestFileSystem(conf2)){
    createAndVerifyFile(fs,path("testSTSInvalidToken"),TEST_FILE_SIZE);
    fail("Expected an access exception, but file access to " + fs.getUri() + " was allowed: "+ fs);
  }
 catch (  AWSS3IOException|AWSBadRequestException ex) {
    LOG.info("Expected Exception: {}",ex.toString());
    LOG.debug("Expected Exception: {}",ex,ex);
  }
}
