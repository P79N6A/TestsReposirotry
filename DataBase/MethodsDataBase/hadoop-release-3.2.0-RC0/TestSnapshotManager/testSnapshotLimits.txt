/** 
 * Test that the global limit on snapshots is honored.
 */
@Test(timeout=10000) public void testSnapshotLimits() throws Exception {
  LeaseManager leaseManager=mock(LeaseManager.class);
  INodeDirectory ids=mock(INodeDirectory.class);
  FSDirectory fsdir=mock(FSDirectory.class);
  INodesInPath iip=mock(INodesInPath.class);
  SnapshotManager sm=spy(new SnapshotManager(new Configuration(),fsdir));
  doReturn(ids).when(sm).getSnapshottableRoot((INodesInPath)anyObject());
  doReturn(testMaxSnapshotLimit).when(sm).getMaxSnapshotID();
  for (Integer i=0; i < testMaxSnapshotLimit; ++i) {
    sm.createSnapshot(leaseManager,iip,"dummy",i.toString());
  }
  try {
    sm.createSnapshot(leaseManager,iip,"dummy","shouldFailSnapshot");
    Assert.fail("Expected SnapshotException not thrown");
  }
 catch (  SnapshotException se) {
    Assert.assertTrue(StringUtils.toLowerCase(se.getMessage()).contains("rollover"));
  }
  sm.deleteSnapshot(iip,"",mock(INode.ReclaimContext.class));
  try {
    sm.createSnapshot(leaseManager,iip,"dummy","shouldFailSnapshot2");
    Assert.fail("Expected SnapshotException not thrown");
  }
 catch (  SnapshotException se) {
    Assert.assertTrue(StringUtils.toLowerCase(se.getMessage()).contains("rollover"));
  }
}
