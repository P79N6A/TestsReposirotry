@Test(timeout=20000) public void testRMRestartAfterPriorityChangesInAllocatedResponse() throws Exception {
  conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  UserGroupInformation.setConfiguration(conf);
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  conf.setInt(YarnConfiguration.MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY,10);
  conf.setBoolean(YarnConfiguration.RECOVERY_ENABLED,true);
  conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,false);
  conf.set(YarnConfiguration.RM_STORE,MemoryRMStateStore.class.getName());
  MockRM rm=new TestSecurityMockRM(conf);
  rm.start();
  MemoryRMStateStore memStore=(MemoryRMStateStore)rm.getRMStateStore();
  MockNM nm1=rm.registerNode("127.0.0.1:1234",6 * 1024);
  Priority appPriority1=Priority.newInstance(5);
  RMApp app1=rm.submitApp(2048,appPriority1,getCreds(),getTokensConf());
  nm1.nodeHeartbeat(true);
  RMAppAttempt attempt1=app1.getCurrentAppAttempt();
  MockAM am1=rm.sendAMLaunched(attempt1.getAppAttemptId());
  am1.registerAppAttempt();
  AllocateRequestPBImpl allocateRequest=new AllocateRequestPBImpl();
  List<ContainerId> release=new ArrayList<ContainerId>();
  List<ResourceRequest> ask=new ArrayList<ResourceRequest>();
  allocateRequest.setReleaseList(release);
  allocateRequest.setAskList(ask);
  AllocateResponse response1=am1.allocate(allocateRequest);
  Assert.assertEquals(appPriority1,response1.getApplicationPriority());
  Priority appPriority2=Priority.newInstance(8);
  UserGroupInformation ugi=UserGroupInformation.createRemoteUser(app1.getUser());
  rm.getRMAppManager().updateApplicationPriority(ugi,app1.getApplicationId(),appPriority2);
  AllocateResponse response2=am1.allocate(allocateRequest);
  Assert.assertEquals(appPriority2,response2.getApplicationPriority());
  Map<ApplicationId,ApplicationStateData> rmAppState=memStore.getState().getApplicationState();
  ApplicationStateData appState=rmAppState.get(app1.getApplicationId());
  Assert.assertEquals(getTokensConf(),appState.getApplicationSubmissionContext().getAMContainerSpec().getTokensConf());
  MockRM rm2=new TestSecurityMockRM(conf,memStore);
  rm2.start();
  AllocateResponse response3=am1.allocate(allocateRequest);
  Assert.assertEquals(appPriority2,response3.getApplicationPriority());
  Map<ApplicationId,ApplicationStateData> rmAppStateNew=memStore.getState().getApplicationState();
  ApplicationStateData appStateNew=rmAppStateNew.get(app1.getApplicationId());
  Assert.assertEquals(getTokensConf(),appStateNew.getApplicationSubmissionContext().getAMContainerSpec().getTokensConf());
  rm.stop();
  rm2.stop();
}
