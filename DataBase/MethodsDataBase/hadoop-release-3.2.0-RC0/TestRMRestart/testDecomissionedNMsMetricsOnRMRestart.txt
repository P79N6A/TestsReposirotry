@Test(timeout=60000) public void testDecomissionedNMsMetricsOnRMRestart() throws Exception {
  conf.set(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,hostFile.getAbsolutePath());
  writeToHostsFile("");
  MockRM rm1=null, rm2=null;
  try {
    rm1=new MockRM(conf);
    rm1.start();
    MockNM nm1=rm1.registerNode("localhost:1234",8000);
    MockNM nm2=rm1.registerNode("host2:1234",8000);
    Resource expectedCapability=Resource.newInstance(nm1.getMemory(),nm1.getvCores());
    String expectedVersion=nm1.getVersion();
    Assert.assertEquals(0,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
    String ip=NetUtils.normalizeHostName("localhost");
    writeToHostsFile("host2",ip);
    rm1.getNodesListManager().refreshNodes(conf);
    NodeHeartbeatResponse nodeHeartbeat=nm1.nodeHeartbeat(true);
    Assert.assertTrue(NodeAction.SHUTDOWN.equals(nodeHeartbeat.getNodeAction()));
    nodeHeartbeat=nm2.nodeHeartbeat(true);
    Assert.assertTrue("The decommisioned metrics are not updated",NodeAction.SHUTDOWN.equals(nodeHeartbeat.getNodeAction()));
    rm1.drainEvents();
    Assert.assertEquals(2,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
    verifyNodesAfterDecom(rm1,2,expectedCapability,expectedVersion);
    rm1.stop();
    rm1=null;
    Assert.assertEquals(0,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
    rm2=new MockRM(conf);
    rm2.start();
    rm2.drainEvents();
    Assert.assertEquals(2,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
    verifyNodesAfterDecom(rm2,2,Resource.newInstance(0,0),"unknown");
  }
  finally {
    if (rm1 != null) {
      rm1.stop();
    }
    if (rm2 != null) {
      rm2.stop();
    }
  }
}
