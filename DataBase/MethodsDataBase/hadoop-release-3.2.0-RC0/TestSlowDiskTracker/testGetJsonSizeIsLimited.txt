@Test public void testGetJsonSizeIsLimited() throws Exception {
  addSlowDiskForTesting("dn1","disk1",ImmutableMap.of(DiskOp.READ,1.1));
  addSlowDiskForTesting("dn1","disk2",ImmutableMap.of(DiskOp.READ,1.2));
  addSlowDiskForTesting("dn1","disk3",ImmutableMap.of(DiskOp.READ,1.3));
  addSlowDiskForTesting("dn2","disk1",ImmutableMap.of(DiskOp.READ,1.4));
  addSlowDiskForTesting("dn2","disk2",ImmutableMap.of(DiskOp.READ,1.5));
  addSlowDiskForTesting("dn3","disk1",ImmutableMap.of(DiskOp.WRITE,1.6));
  addSlowDiskForTesting("dn3","disk2",ImmutableMap.of(DiskOp.READ,1.7));
  addSlowDiskForTesting("dn3","disk3",ImmutableMap.of(DiskOp.READ,1.2));
  tracker.updateSlowDiskReportAsync(timer.monotonicNow());
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      return tracker.getSlowDiskReportAsJsonString() != null;
    }
  }
,500,5000);
  ArrayList<DiskLatency> jsonReport=getAndDeserializeJson(tracker.getSlowDiskReportAsJsonString());
  assertThat(jsonReport.size(),is(5));
  assertTrue(isDiskInReports(jsonReport,"dn3","disk2",DiskOp.READ,1.7));
  assertTrue(isDiskInReports(jsonReport,"dn3","disk1",DiskOp.WRITE,1.6));
  assertTrue(isDiskInReports(jsonReport,"dn2","disk2",DiskOp.READ,1.5));
  assertTrue(isDiskInReports(jsonReport,"dn2","disk1",DiskOp.READ,1.4));
  assertTrue(isDiskInReports(jsonReport,"dn1","disk3",DiskOp.READ,1.3));
  assertFalse(isDiskInReports(jsonReport,"dn1","disk1",DiskOp.READ,1.1));
  assertFalse(isDiskInReports(jsonReport,"dn1","disk2",DiskOp.READ,1.2));
  assertFalse(isDiskInReports(jsonReport,"dn3","disk3",DiskOp.READ,1.2));
}
