/** 
 * Test that when all reports are expired, we get back nothing.
 */
@Test public void testAllReportsAreExpired() throws Exception {
  addSlowDiskForTesting("dn1","disk1",ImmutableMap.of(DiskOp.METADATA,1.1,DiskOp.READ,1.8));
  addSlowDiskForTesting("dn1","disk2",ImmutableMap.of(DiskOp.READ,1.3));
  addSlowDiskForTesting("dn2","disk2",ImmutableMap.of(DiskOp.WRITE,1.1));
  timer.advance(1);
  tracker.updateSlowDiskReportAsync(timer.monotonicNow());
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      return !tracker.getSlowDisksReport().isEmpty();
    }
  }
,500,5000);
  Map<String,DiskLatency> reports=getSlowDisksReportForTesting(tracker);
  assertThat(reports.size(),is(3));
  assertTrue(Math.abs(reports.get("dn1:disk1").getLatency(DiskOp.METADATA) - 1.1) < 0.0000001);
  assertTrue(Math.abs(reports.get("dn1:disk1").getLatency(DiskOp.READ) - 1.8) < 0.0000001);
  assertTrue(Math.abs(reports.get("dn1:disk2").getLatency(DiskOp.READ) - 1.3) < 0.0000001);
  assertTrue(Math.abs(reports.get("dn2:disk2").getLatency(DiskOp.WRITE) - 1.1) < 0.0000001);
  timer.advance(reportValidityMs);
  tracker.updateSlowDiskReportAsync(timer.monotonicNow());
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      return tracker.getSlowDisksReport().isEmpty();
    }
  }
,500,3000);
  reports=getSlowDisksReportForTesting(tracker);
  assertThat(reports.size(),is(0));
}
