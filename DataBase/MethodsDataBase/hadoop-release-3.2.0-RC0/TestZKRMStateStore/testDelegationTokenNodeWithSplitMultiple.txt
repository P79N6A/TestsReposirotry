@Test public void testDelegationTokenNodeWithSplitMultiple() throws Exception {
  TestZKRMStateStoreTester zkTester=new TestZKRMStateStoreTester();
  Configuration conf=createConfForDelegationTokenNodeSplit(1);
  RMStateStore store=zkTester.getRMStateStore(conf);
  Map<RMDelegationTokenIdentifier,Long> tokensWithRenewal=new HashMap<>();
  Map<RMDelegationTokenIdentifier,Integer> tokensWithIndex=new HashMap<>();
  Set<RMDelegationTokenIdentifier> tokensToDelete=new HashSet<>();
  int sequenceNumber=0;
  for (int i=0; i <= 12; i++) {
    RMDelegationTokenIdentifier token=new RMDelegationTokenIdentifier(new Text("owner" + i),new Text("renewer" + i),new Text("realuser" + i));
    sequenceNumber=i;
    token.setSequenceNumber(sequenceNumber);
    assertFalse("Token should not exist but was found in ZooKeeper",zkTester.delegationTokenExists(token,1));
    Long renewDate=System.currentTimeMillis();
    store.storeRMDelegationToken(token,renewDate);
    modifyRMDelegationTokenState();
    tokensWithRenewal.put(token,renewDate);
    tokensWithIndex.put(token,1);
switch (i) {
case 0:
case 3:
case 6:
case 11:
      tokensToDelete.add(token);
    break;
default :
  break;
}
}
verifyDelegationTokensStateStore(zkTester,tokensWithRenewal,tokensWithIndex,sequenceNumber);
for (RMDelegationTokenIdentifier tokenToDelete : tokensToDelete) {
store.removeRMDelegationToken(tokenToDelete);
tokensWithRenewal.remove(tokenToDelete);
tokensWithIndex.remove(tokenToDelete);
}
for (int i=13; i <= 22; i++) {
RMDelegationTokenIdentifier token=new RMDelegationTokenIdentifier(new Text("owner" + i),new Text("renewer" + i),new Text("realuser" + i));
sequenceNumber=i;
token.setSequenceNumber(sequenceNumber);
Long renewDate=System.currentTimeMillis();
store.storeRMDelegationToken(token,renewDate);
modifyRMDelegationTokenState();
tokensWithRenewal.put(token,renewDate);
tokensWithIndex.put(token,1);
}
verifyDelegationTokensStateStore(zkTester,tokensWithRenewal,tokensWithIndex,sequenceNumber);
for (RMDelegationTokenIdentifier token : tokensToDelete) {
assertFalse("Token " + token + " should not exist but was found in ZooKeeper",zkTester.delegationTokenExists(token,1));
}
store.close();
}
