@Test public void testSetReplicationWhenBatchIBR() throws Exception {
  Configuration conf=new HdfsConfiguration();
  conf.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,100);
  conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INCREMENTAL_INTERVAL_MSEC_KEY,30000);
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,1024);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_FILE_CLOSE_NUM_COMMITTED_ALLOWED_KEY,1);
  DistributedFileSystem dfs;
  try (MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build()){
    final int bufferSize=1024;
    byte[] outBuffer=new byte[bufferSize];
    dfs=cluster.getFileSystem();
    String fileName="/testSetRep1";
    Path filePath=new Path(fileName);
    FSDataOutputStream out=dfs.create(filePath);
    out.write(outBuffer,0,bufferSize);
    out.close();
    cluster.triggerBlockReports();
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        try {
          cluster.triggerBlockReports();
          if (cluster.getNamesystem().getBlocksTotal() == 1) {
            return true;
          }
        }
 catch (        Exception e) {
        }
        return false;
      }
    }
,10,3000);
    fileName="/testSetRep2";
    filePath=new Path(fileName);
    out=dfs.create(filePath);
    out.write(outBuffer,0,bufferSize);
    out.close();
    dfs.setReplication(filePath,(short)10);
    cluster.triggerBlockReports();
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        try {
          return cluster.getNamesystem().getBlockManager().getLowRedundancyBlocksCount() == 1;
        }
 catch (        Exception e) {
          e.printStackTrace();
          return false;
        }
      }
    }
,10,3000);
    assertEquals(0,cluster.getNamesystem().getBlockManager().getMissingBlocksCount());
  }
 }
