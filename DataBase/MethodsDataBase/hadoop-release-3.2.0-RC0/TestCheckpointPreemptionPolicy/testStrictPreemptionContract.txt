@Test public void testStrictPreemptionContract(){
  final Map<ContainerId,TaskAttemptId> containers=assignedContainers;
  AMPreemptionPolicy.Context mPctxt=new AMPreemptionPolicy.Context(){
    @Override public TaskAttemptId getTaskAttempt(    ContainerId cId){
      return containers.get(cId);
    }
    @Override public List<Container> getContainers(    TaskType t){
      List<Container> p=new ArrayList<Container>();
      for (      Map.Entry<ContainerId,TaskAttemptId> ent : assignedContainers.entrySet()) {
        if (ent.getValue().getTaskId().getTaskType().equals(t)) {
          p.add(Container.newInstance(ent.getKey(),null,null,contToResourceMap.get(ent.getKey()),Priority.newInstance(0),null));
        }
      }
      return p;
    }
  }
;
  PreemptionMessage pM=generatePreemptionMessage(preemptedContainers,contToResourceMap,Resource.newInstance(1024,1),true);
  CheckpointAMPreemptionPolicy policy=new CheckpointAMPreemptionPolicy();
  policy.init(mActxt);
  policy.preempt(mPctxt,pM);
  for (  ContainerId c : preemptedContainers) {
    TaskAttemptId t=assignedContainers.get(c);
    if (TaskType.MAP.equals(t.getTaskId().getTaskType())) {
      assert policy.isPreempted(t) == false;
    }
 else {
      assert policy.isPreempted(t);
    }
  }
}
