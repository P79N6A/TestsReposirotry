@Test public void testPreemptionContract(){
  final Map<ContainerId,TaskAttemptId> containers=assignedContainers;
  AMPreemptionPolicy.Context mPctxt=new AMPreemptionPolicy.Context(){
    @Override public TaskAttemptId getTaskAttempt(    ContainerId cId){
      return containers.get(cId);
    }
    @Override public List<Container> getContainers(    TaskType t){
      List<Container> p=new ArrayList<Container>();
      for (      Map.Entry<ContainerId,TaskAttemptId> ent : assignedContainers.entrySet()) {
        if (ent.getValue().getTaskId().getTaskType().equals(t)) {
          p.add(Container.newInstance(ent.getKey(),null,null,contToResourceMap.get(ent.getKey()),Priority.newInstance(0),null));
        }
      }
      return p;
    }
  }
;
  PreemptionMessage pM=generatePreemptionMessage(preemptedContainers,contToResourceMap,Resource.newInstance(minAlloc,1),false);
  CheckpointAMPreemptionPolicy policy=new CheckpointAMPreemptionPolicy();
  policy.init(mActxt);
  int supposedMemPreemption=(int)pM.getContract().getResourceRequest().get(0).getResourceRequest().getCapability().getMemorySize() * pM.getContract().getResourceRequest().get(0).getResourceRequest().getNumContainers();
  policy.preempt(mPctxt,pM);
  List<TaskAttemptId> preempting=validatePreemption(pM,policy,supposedMemPreemption);
  policy.preempt(mPctxt,pM);
  List<TaskAttemptId> preempting2=validatePreemption(pM,policy,supposedMemPreemption);
  assert preempting2.equals(preempting);
  policy.handleCompletedContainer(preempting.get(0));
  policy.handleCompletedContainer(preempting.get(1));
  Iterator<Map.Entry<ContainerId,TaskAttemptId>> it=assignedContainers.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<ContainerId,TaskAttemptId> ent=it.next();
    if (ent.getValue().equals(preempting.get(0)) || ent.getValue().equals(preempting.get(1)))     it.remove();
  }
  policy.preempt(mPctxt,pM);
  List<TaskAttemptId> preempting3=validatePreemption(pM,policy,supposedMemPreemption);
  assert preempting3.equals(preempting2) == false;
}
