/** 
 * This test tries to replicate the issue with the previous version of {@ref LocalDistributedCacheManager} when the resulting timestamp isidentical as that in another process.  Unfortunately, it is difficult to mimic such behavior in a single process unit test.  And mocking the unique id (timestamp previously, UUID otherwise) won't prove the validity of one approach over the other.
 */
@Test public void testMultipleCacheSetup() throws Exception {
  JobID jobId=new JobID();
  JobConf conf=new JobConf();
  LocalDistributedCacheManager manager=new LocalDistributedCacheManager();
  final int threadCount=10;
  final CyclicBarrier barrier=new CyclicBarrier(threadCount);
  ArrayList<Callable<Void>> setupCallable=new ArrayList<>();
  for (int i=0; i < threadCount; ++i) {
    setupCallable.add(() -> {
      barrier.await();
      manager.setup(conf,jobId);
      return null;
    }
);
  }
  ExecutorService ePool=Executors.newFixedThreadPool(threadCount);
  try {
    for (    Future<Void> future : ePool.invokeAll(setupCallable)) {
      future.get();
    }
  }
  finally {
    ePool.shutdown();
    manager.close();
  }
}
