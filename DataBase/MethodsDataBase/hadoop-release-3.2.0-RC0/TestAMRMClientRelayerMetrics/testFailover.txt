@Test public void testFailover() throws YarnException, IOException {
  this.asks.add(createResourceRequest(0,"node",2048,1,1,ExecutionType.GUARANTEED,1));
  this.asks.add(createResourceRequest(0,"rack",2048,1,1,ExecutionType.GUARANTEED,1));
  this.asks.add(createResourceRequest(0,ResourceRequest.ANY,2048,1,1,ExecutionType.GUARANTEED,2));
  long previousSuccess=AMRMClientRelayerMetrics.getInstance().getHeartbeatSuccessMetric(homeID).value();
  long previousFailover=AMRMClientRelayerMetrics.getInstance().getRMMasterSlaveSwitchMetric(homeID).value();
  mockAMS.failover=true;
  this.homeRelayer.allocate(getAllocateRequest());
  Assert.assertEquals(++previousFailover,AMRMClientRelayerMetrics.getInstance().getRMMasterSlaveSwitchMetric(homeID).value());
  Assert.assertEquals(++previousSuccess,AMRMClientRelayerMetrics.getInstance().getHeartbeatSuccessMetric(homeID).value());
  Assert.assertEquals(2,AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID,RequestType.Guaranteed).value());
  Assert.assertEquals(0,AMRMClientRelayerMetrics.getInstance().getPendingMetric(uamID,RequestType.Guaranteed).value());
  this.uamRelayer.allocate(getAllocateRequest());
  Assert.assertEquals(2,AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID,RequestType.Guaranteed).value());
  Assert.assertEquals(2,AMRMClientRelayerMetrics.getInstance().getPendingMetric(uamID,RequestType.Guaranteed).value());
  this.asks.get(2).setNumContainers(3);
  mockAMS.failover=true;
  this.homeRelayer.allocate(getAllocateRequest());
  Assert.assertEquals(++previousFailover,AMRMClientRelayerMetrics.getInstance().getRMMasterSlaveSwitchMetric(homeID).value());
  Assert.assertEquals(++previousSuccess,AMRMClientRelayerMetrics.getInstance().getHeartbeatSuccessMetric(homeID).value());
  Assert.assertEquals(3,AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID,RequestType.Guaranteed).value());
  Assert.assertEquals(2,AMRMClientRelayerMetrics.getInstance().getPendingMetric(uamID,RequestType.Guaranteed).value());
  this.asks.get(2).setNumContainers(2);
  mockAMS.failover=true;
  this.homeRelayer.allocate(getAllocateRequest());
  Assert.assertEquals(++previousFailover,AMRMClientRelayerMetrics.getInstance().getRMMasterSlaveSwitchMetric(homeID).value());
  Assert.assertEquals(++previousSuccess,AMRMClientRelayerMetrics.getInstance().getHeartbeatSuccessMetric(homeID).value());
  Assert.assertEquals(2,AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID,RequestType.Guaranteed).value());
  Assert.assertEquals(2,AMRMClientRelayerMetrics.getInstance().getPendingMetric(uamID,RequestType.Guaranteed).value());
  long previousFailure=AMRMClientRelayerMetrics.getInstance().getHeartbeatFailureMetric(homeID).value();
  mockAMS.exception=true;
  try {
    this.homeRelayer.allocate(getAllocateRequest());
    Assert.fail();
  }
 catch (  YarnException e) {
  }
  Assert.assertEquals(previousFailover,AMRMClientRelayerMetrics.getInstance().getRMMasterSlaveSwitchMetric(homeID).value());
  Assert.assertEquals(previousSuccess,AMRMClientRelayerMetrics.getInstance().getHeartbeatSuccessMetric(homeID).value());
  Assert.assertEquals(++previousFailure,AMRMClientRelayerMetrics.getInstance().getHeartbeatFailureMetric(homeID).value());
  mockAMS.failover=true;
  mockAMS.exception=true;
  try {
    this.homeRelayer.allocate(getAllocateRequest());
    Assert.fail();
  }
 catch (  YarnException e) {
  }
  Assert.assertEquals(++previousFailover,AMRMClientRelayerMetrics.getInstance().getRMMasterSlaveSwitchMetric(homeID).value());
  Assert.assertEquals(previousSuccess,AMRMClientRelayerMetrics.getInstance().getHeartbeatSuccessMetric(homeID).value());
  Assert.assertEquals(++previousFailure,AMRMClientRelayerMetrics.getInstance().getHeartbeatFailureMetric(homeID).value());
}
