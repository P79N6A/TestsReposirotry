@Test public void testPromotePending() throws YarnException, IOException {
  this.updates.add(createPromote(1));
  this.updates.add(createPromote(2));
  this.updates.add(createPromote(3));
  this.homeRelayer.allocate(getAllocateRequest());
  Assert.assertEquals(3,AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID,RequestType.Promote).value());
  this.updates.remove(createPromote(3));
  this.updates.add(createDemote(3));
  this.updates.add(createDemote(4));
  this.homeRelayer.allocate(getAllocateRequest());
  Assert.assertEquals(2,AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID,RequestType.Promote).value());
  List<UpdatedContainer> updated=new ArrayList<>();
  updated.add(UpdatedContainer.newInstance(ContainerUpdateType.PROMOTE_EXECUTION_TYPE,Container.newInstance(createContainerId(2),null,null,null,null,null)));
  updated.add(UpdatedContainer.newInstance(ContainerUpdateType.PROMOTE_EXECUTION_TYPE,Container.newInstance(createContainerId(5),null,null,null,null,null)));
  this.mockAMS.response.setUpdatedContainers(updated);
  this.homeRelayer.allocate(getAllocateRequest());
  Assert.assertEquals(1,AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID,RequestType.Promote).value());
  this.mockAMS.response.getUpdatedContainers().clear();
  this.updates.remove(createPromote(2));
  List<ContainerStatus> completed=new ArrayList<>();
  completed.add(ContainerStatus.newInstance(createContainerId(1),null,"",0));
  completed.add(ContainerStatus.newInstance(createContainerId(6),null,"",0));
  this.mockAMS.response.setCompletedContainersStatuses(completed);
  this.homeRelayer.allocate(getAllocateRequest());
  Assert.assertEquals(0,AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID,RequestType.Promote).value());
}
