/** 
 * Extended bzip2 test, similar to BuiltInGzipDecompressor test above.
 */
@Test public void testMoreBzip2() throws IOException {
  JobConf jobConf=new JobConf(defaultConf);
  CompressionCodec bzip2=new BZip2Codec();
  ReflectionUtils.setConf(bzip2,jobConf);
  localFs.delete(workDir,true);
  System.out.println(COLOR_BR_MAGENTA + "testMoreBzip2() using non-native CBZip2InputStream (presumably)" + COLOR_NORMAL);
  String fn1="testConcatThenCompress.txt" + bzip2.getDefaultExtension();
  Path fnLocal1=new Path(System.getProperty("test.concat.data",DEFAULT_WORK_DIR),fn1);
  Path fnHDFS1=new Path(workDir,fn1);
  localFs.copyFromLocalFile(fnLocal1,fnHDFS1);
  String fn2="testCompressThenConcat.txt" + bzip2.getDefaultExtension();
  Path fnLocal2=new Path(System.getProperty("test.concat.data",DEFAULT_WORK_DIR),fn2);
  Path fnHDFS2=new Path(workDir,fn2);
  localFs.copyFromLocalFile(fnLocal2,fnHDFS2);
  FileInputFormat.setInputPaths(jobConf,workDir);
  final FileInputStream in1=new FileInputStream(fnLocal1.toString());
  final FileInputStream in2=new FileInputStream(fnLocal2.toString());
  assertEquals("concat bytes available",2567,in1.available());
  assertEquals("concat bytes available",3056,in2.available());
  CompressionInputStream cin2=bzip2.createInputStream(in2);
  LineReader in=new LineReader(cin2);
  Text out=new Text();
  int numBytes, totalBytes=0, lineNum=0;
  while ((numBytes=in.readLine(out)) > 0) {
    ++lineNum;
    totalBytes+=numBytes;
  }
  in.close();
  assertEquals("total uncompressed bytes in concatenated test file",5346,totalBytes);
  assertEquals("total uncompressed lines in concatenated test file",84,lineNum);
  doMultipleBzip2BufferSizes(jobConf);
}
