@Test public void testNodePartitionPendingResourceUpdate() throws Exception {
  Configuration conf=TestUtils.getConfigurationWithQueueLabels(new Configuration(false));
  conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
  conf.set(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_HANDLER,YarnConfiguration.SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER);
  final RMNodeLabelsManager mgr=new NullRMNodeLabelsManager();
  mgr.init(conf);
  mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y"));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
  MockRM rm=new MockRM(conf){
    protected RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm.start();
  MockNM nm1=new MockNM("h1:1234",200 * GB,rm.getResourceTrackerService());
  nm1.registerNode();
  MockNM nm2=new MockNM("h2:1234",200 * GB,rm.getResourceTrackerService());
  nm2.registerNode();
  RMApp app1=rm.submitApp(1 * GB,"app","user",null,"a1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm2);
  RMApp app2=rm.submitApp(8 * GB,"app","user",null,"b1");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm,nm2);
  am1.allocateIntraAppAntiAffinity("x",ResourceSizing.newInstance(8,Resource.newInstance(1 * GB,1)),Priority.newInstance(1),0,"mapper","reducer");
  checkPendingResource(rm,"a1",8 * GB,"x");
  checkPendingResource(rm,"a",8 * GB,"x");
  checkPendingResource(rm,"root",8 * GB,"x");
  am2.allocateIntraAppAntiAffinity("x",ResourceSizing.newInstance(8,Resource.newInstance(1 * GB,1)),Priority.newInstance(1),0,"mapper","reducer");
  checkPendingResource(rm,"a1",8 * GB,"x");
  checkPendingResource(rm,"a",8 * GB,"x");
  checkPendingResource(rm,"b1",8 * GB,"x");
  checkPendingResource(rm,"b",8 * GB,"x");
  checkPendingResource(rm,"root",16 * GB,"x");
  am1.allocateIntraAppAntiAffinity("x",ResourceSizing.newInstance(6,Resource.newInstance(1 * GB,1)),Priority.newInstance(2),0,"mapper","reducer");
  checkPendingResource(rm,"a1",14 * GB,"x");
  checkPendingResource(rm,"a",14 * GB,"x");
  checkPendingResource(rm,"b1",8 * GB,"x");
  checkPendingResource(rm,"b",8 * GB,"x");
  checkPendingResource(rm,"root",22 * GB,"x");
  am1.allocateIntraAppAntiAffinity("x",ResourceSizing.newInstance(4,Resource.newInstance(1 * GB,1)),Priority.newInstance(1),0,"mapper","reducer");
  checkPendingResource(rm,"a1",10 * GB,"x");
  checkPendingResource(rm,"a",10 * GB,"x");
  checkPendingResource(rm,"b1",8 * GB,"x");
  checkPendingResource(rm,"b",8 * GB,"x");
  checkPendingResource(rm,"root",18 * GB,"x");
  AppAttemptRemovedSchedulerEvent appRemovedEvent=new AppAttemptRemovedSchedulerEvent(am2.getApplicationAttemptId(),RMAppAttemptState.FINISHED,false);
  rm.getResourceScheduler().handle(appRemovedEvent);
  appRemovedEvent=new AppAttemptRemovedSchedulerEvent(am1.getApplicationAttemptId(),RMAppAttemptState.FINISHED,false);
  rm.getResourceScheduler().handle(appRemovedEvent);
  checkPendingResource(rm,"a1",0 * GB,null);
  checkPendingResource(rm,"a",0 * GB,null);
  checkPendingResource(rm,"a1",0 * GB,"x");
  checkPendingResource(rm,"a",0 * GB,"x");
  checkPendingResource(rm,"b1",0 * GB,null);
  checkPendingResource(rm,"b",0 * GB,null);
  checkPendingResource(rm,"root",0 * GB,null);
  checkPendingResource(rm,"root",0 * GB,"x");
}
