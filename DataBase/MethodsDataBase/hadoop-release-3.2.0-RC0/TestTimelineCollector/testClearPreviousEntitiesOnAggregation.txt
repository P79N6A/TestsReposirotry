@Test public void testClearPreviousEntitiesOnAggregation() throws Exception {
  final long ts=System.currentTimeMillis();
  TimelineCollector collector=new TimelineCollector(""){
    @Override public TimelineCollectorContext getTimelineEntityContext(){
      return new TimelineCollectorContext("cluster","user","flow","1",1L,ApplicationId.newInstance(ts,1).toString());
    }
  }
;
  collector.init(new Configuration());
  collector.setWriter(mock(TimelineWriter.class));
  TimelineEntities entities=new TimelineEntities();
  for (int i=1; i <= 5; i++) {
    TimelineEntity entity=createEntity("e" + i,"type");
    entity.addMetric(createDummyMetric(ts + i,Long.valueOf(i * 50)));
    entities.addEntity(entity);
  }
  collector.putEntities(entities,UserGroupInformation.getCurrentUser());
  TimelineCollectorContext currContext=collector.getTimelineEntityContext();
  Map<String,AggregationStatusTable> aggregationGroups=collector.getAggregationGroups();
  assertEquals(Sets.newHashSet("type"),aggregationGroups.keySet());
  TimelineEntity aggregatedEntity=TimelineCollector.aggregateWithoutGroupId(aggregationGroups,currContext.getAppId(),TimelineEntityType.YARN_APPLICATION.toString());
  TimelineMetric aggregatedMetric=aggregatedEntity.getMetrics().iterator().next();
  assertEquals(750L,aggregatedMetric.getValues().values().iterator().next());
  assertEquals(TimelineMetricOperation.SUM,aggregatedMetric.getRealtimeAggregationOp());
  aggregatedEntity=TimelineCollector.aggregateWithoutGroupId(aggregationGroups,currContext.getAppId(),TimelineEntityType.YARN_APPLICATION.toString());
  aggregatedMetric=aggregatedEntity.getMetrics().iterator().next();
  assertTrue(aggregatedMetric.getValues().isEmpty());
  assertEquals(TimelineMetricOperation.NOP,aggregatedMetric.getRealtimeAggregationOp());
  entities=new TimelineEntities();
  for (int i=1; i <= 3; i++) {
    TimelineEntity entity=createEntity("e" + i,"type");
    entity.addMetric(createDummyMetric(System.currentTimeMillis() + i,50L));
    entities.addEntity(entity);
  }
  aggregationGroups=collector.getAggregationGroups();
  collector.putEntities(entities,UserGroupInformation.getCurrentUser());
  aggregatedEntity=TimelineCollector.aggregateWithoutGroupId(aggregationGroups,currContext.getAppId(),TimelineEntityType.YARN_APPLICATION.toString());
  aggregatedMetric=aggregatedEntity.getMetrics().iterator().next();
  assertEquals(150L,aggregatedMetric.getValues().values().iterator().next());
  assertEquals(TimelineMetricOperation.SUM,aggregatedMetric.getRealtimeAggregationOp());
  collector.close();
}
