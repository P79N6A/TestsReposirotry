@Test(timeout=60000) public void testNodeRemovalDuringAllocate() throws Exception {
  MockNM nm1=new MockNM("h1:1234",4096,rm.getResourceTrackerService());
  MockNM nm2=new MockNM("h2:1234",4096,rm.getResourceTrackerService());
  nm1.registerNode();
  nm2.registerNode();
  OpportunisticContainerAllocatorAMService amservice=(OpportunisticContainerAllocatorAMService)rm.getApplicationMasterService();
  RMApp app1=rm.submitApp(1 * GB,"app","user",null,"default");
  ApplicationAttemptId attemptId=app1.getCurrentAppAttempt().getAppAttemptId();
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm2);
  ResourceScheduler scheduler=rm.getResourceScheduler();
  RMNode rmNode1=rm.getRMContext().getRMNodes().get(nm1.getNodeId());
  RMNode rmNode2=rm.getRMContext().getRMNodes().get(nm2.getNodeId());
  nm1.nodeHeartbeat(true);
  nm2.nodeHeartbeat(true);
  ((RMNodeImpl)rmNode1).setOpportunisticContainersStatus(getOppurtunisticStatus(-1,100));
  ((RMNodeImpl)rmNode2).setOpportunisticContainersStatus(getOppurtunisticStatus(-1,100));
  OpportunisticContainerContext ctxt=((CapacityScheduler)scheduler).getApplicationAttempt(attemptId).getOpportunisticContainerContext();
  amservice.handle(new NodeAddedSchedulerEvent(rmNode1));
  amservice.handle(new NodeAddedSchedulerEvent(rmNode2));
  amservice.handle(new NodeUpdateSchedulerEvent(rmNode1));
  amservice.handle(new NodeUpdateSchedulerEvent(rmNode2));
  for (int i=0; i < 10; i++) {
    am1.allocate(Arrays.asList(ResourceRequest.newInstance(Priority.newInstance(1),"*",Resources.createResource(1 * GB),2)),null);
    if (ctxt.getNodeMap().size() == 2) {
      break;
    }
    Thread.sleep(50);
  }
  Assert.assertEquals(2,ctxt.getNodeMap().size());
  scheduler.handle(new NodeRemovedSchedulerEvent(rmNode1));
  for (int i=0; i < 10; i++) {
    try {
      am1.allocate(Arrays.asList(ResourceRequest.newInstance(Priority.newInstance(1),"*",Resources.createResource(1 * GB),2)),null);
    }
 catch (    Exception e) {
      Assert.fail("Allocate request should be handled on node removal");
    }
    if (ctxt.getNodeMap().size() == 1) {
      break;
    }
    Thread.sleep(50);
  }
  Assert.assertEquals(1,ctxt.getNodeMap().size());
}
