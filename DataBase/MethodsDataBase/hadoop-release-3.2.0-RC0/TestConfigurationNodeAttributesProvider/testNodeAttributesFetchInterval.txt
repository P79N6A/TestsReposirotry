@Test(timeout=30000L) public void testNodeAttributesFetchInterval() throws IOException, InterruptedException {
  Set<NodeAttribute> expectedAttributes1=new HashSet<>();
  expectedAttributes1.add(NodeAttribute.newInstance("test.io","host",NodeAttributeType.STRING,"host1"));
  Configuration conf=new Configuration();
  conf.setLong(YarnConfiguration.NM_NODE_ATTRIBUTES_PROVIDER_FETCH_INTERVAL_MS,1000);
  ConfigurationNodeAttributesProvider spyProvider=Mockito.spy(nodeAttributesProvider);
  Mockito.when(spyProvider.parseAttributes(Mockito.anyString())).thenReturn(expectedAttributes1);
  spyProvider.init(conf);
  spyProvider.start();
  Assert.assertEquals(expectedAttributes1,spyProvider.getDescriptors());
  Set<NodeAttribute> expectedAttributes2=new HashSet<>();
  expectedAttributes2.add(NodeAttribute.newInstance("test.io","os",NodeAttributeType.STRING,"windows"));
  Mockito.when(spyProvider.parseAttributes(Mockito.anyString())).thenReturn(expectedAttributes2);
  ArrayList<String> keysMet=new ArrayList<>();
  int numOfOldValue=0;
  int numOfNewValue=0;
  int times=5;
  while (times > 0) {
    Set<NodeAttribute> current=spyProvider.getDescriptors();
    Assert.assertEquals(1,current.size());
    String attributeName=current.iterator().next().getAttributeKey().getAttributeName();
    if ("host".equals(attributeName)) {
      numOfOldValue++;
    }
 else     if ("os".equals(attributeName)) {
      numOfNewValue++;
    }
    Thread.sleep(500);
    times--;
  }
  Assert.assertEquals(5,numOfNewValue + numOfOldValue);
  Assert.assertTrue(numOfOldValue > 0);
  Assert.assertTrue(numOfNewValue > 0);
}
