@Test(timeout=60000) public void testAsyncScheduleThreadStateAfterRMHATransit() throws Exception {
  startRMs();
  MockNM nm=rm1.registerNode("192.1.1.1:1234",8192,8);
  RMApp app1=submitAppAndCheckLaunched(rm1);
  keepNMHeartbeat(Arrays.asList(nm),1000);
  explicitFailover();
  checkAsyncSchedulerThreads(Thread.currentThread());
  pauseNMHeartbeat();
  nm=rm2.registerNode("192.1.1.1:1234",8192,8);
  keepNMHeartbeat(Arrays.asList(nm),1000);
  rm2.waitForState(app1.getCurrentAppAttempt().getAppAttemptId(),RMAppAttemptState.LAUNCHED);
  rm2.killApp(app1.getApplicationId());
  RMApp app2=submitAppAndCheckLaunched(rm2);
  pauseNMHeartbeat();
  HAServiceProtocol.StateChangeRequestInfo requestInfo=new HAServiceProtocol.StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
  rm2.adminService.transitionToStandby(requestInfo);
  rm1.adminService.transitionToActive(requestInfo);
  Assert.assertTrue(rm2.getRMContext().getHAServiceState() == HAServiceProtocol.HAServiceState.STANDBY);
  Assert.assertTrue(rm1.getRMContext().getHAServiceState() == HAServiceProtocol.HAServiceState.ACTIVE);
  checkAsyncSchedulerThreads(Thread.currentThread());
  nm=rm1.registerNode("192.1.1.1:1234",8192,8);
  keepNMHeartbeat(Arrays.asList(nm),1000);
  rm1.waitForState(app2.getCurrentAppAttempt().getAppAttemptId(),RMAppAttemptState.LAUNCHED);
  rm1.killApp(app2.getApplicationId());
  submitAppAndCheckLaunched(rm1);
  pauseNMHeartbeat();
  rm1.stop();
  rm2.stop();
}
