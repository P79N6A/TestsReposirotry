@Test public void testTokensConfExceedLimit() throws Exception {
  conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  UserGroupInformation.setConfiguration(conf);
  conf.setInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,100);
  MockRM rm=new TestSecurityMockRM(conf,null);
  rm.start();
  final MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm.getResourceTrackerService());
  nm1.registerNode();
  Text userText1=new Text("user1");
  DelegationTokenIdentifier dtId1=new DelegationTokenIdentifier(userText1,new Text("renewer1"),userText1);
  final Token<DelegationTokenIdentifier> token1=new Token<DelegationTokenIdentifier>(dtId1.getBytes(),"password1".getBytes(),dtId1.getKind(),new Text("service1"));
  Credentials credentials=new Credentials();
  credentials.addToken(userText1,token1);
  Configuration appConf=new Configuration(false);
  appConf.clear();
  appConf.set("dfs.nameservices","mycluster1,mycluster2");
  appConf.set("dfs.namenode.rpc-address.mycluster2.nn1","123.0.0.1");
  appConf.set("dfs.namenode.rpc-address.mycluster3.nn2","123.0.0.2");
  DataOutputBuffer dob=new DataOutputBuffer();
  appConf.write(dob);
  ByteBuffer tokenConf=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
  try {
    rm.submitApp(credentials,tokenConf);
    Assert.fail();
  }
 catch (  Exception e) {
    e.printStackTrace();
    Assert.assertTrue(e.getCause().getMessage().contains(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE));
  }
}
