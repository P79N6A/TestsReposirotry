@Test public void testQueueSubmitWithHighQueueContainerSize() throws YarnException {
  ApplicationId appId=MockApps.newAppID(1);
  RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
  Resource resource=Resources.createResource(YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);
  ApplicationSubmissionContext asContext=recordFactory.newRecordInstance(ApplicationSubmissionContext.class);
  asContext.setApplicationId(appId);
  asContext.setResource(resource);
  asContext.setPriority(Priority.newInstance(0));
  asContext.setAMContainerSpec(mockContainerLaunchContext(recordFactory));
  asContext.setQueue("queueA");
  QueueInfo mockDefaultQueueInfo=mock(QueueInfo.class);
  PlacementManager placementMgr=mock(PlacementManager.class);
  doAnswer(new Answer<ApplicationPlacementContext>(){
    @Override public ApplicationPlacementContext answer(    InvocationOnMock invocation) throws Throwable {
      return new ApplicationPlacementContext("queueA");
    }
  }
).when(placementMgr).placeApplication(any(ApplicationSubmissionContext.class),matches("test1"));
  doAnswer(new Answer<ApplicationPlacementContext>(){
    @Override public ApplicationPlacementContext answer(    InvocationOnMock invocation) throws Throwable {
      return new ApplicationPlacementContext("queueB");
    }
  }
).when(placementMgr).placeApplication(any(ApplicationSubmissionContext.class),matches("test2"));
  MockRM newMockRM=new MockRM(conf);
  RMContext newMockRMContext=newMockRM.getRMContext();
  newMockRMContext.setQueuePlacementManager(placementMgr);
  ApplicationMasterService masterService=new ApplicationMasterService(newMockRMContext,newMockRMContext.getScheduler());
  TestRMAppManager newAppMonitor=new TestRMAppManager(newMockRMContext,new ClientToAMTokenSecretManagerInRM(),newMockRMContext.getScheduler(),masterService,new ApplicationACLsManager(conf),conf);
  try {
    newAppMonitor.submitApplication(asContext,"test1");
    Assert.fail("Test should fail on too high allocation!");
  }
 catch (  InvalidResourceRequestException e) {
    Assert.assertEquals(GREATER_THEN_MAX_ALLOCATION,e.getInvalidResourceType());
  }
  newAppMonitor.submitApplication(asContext,"test2");
}
