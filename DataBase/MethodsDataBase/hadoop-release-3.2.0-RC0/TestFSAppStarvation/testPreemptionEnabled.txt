@Test public void testPreemptionEnabled() throws Exception {
  setupClusterAndSubmitJobs();
  for (int i=0; i < 6000; ++i) {
    if (preemptionThread.uniqueAppsAdded() >= 3) {
      break;
    }
    Thread.sleep(10);
  }
  assertNotNull("FSContext does not have an FSStarvedApps instance",scheduler.getContext().getStarvedApps());
  assertEquals("Expecting 3 starved applications, one each for the " + "minshare and fairshare queues",3,preemptionThread.uniqueAppsAdded());
  clock.tickSec(1);
  scheduler.update();
  assertEquals("Apps re-added even before starvation delay passed",preemptionThread.totalAppsAdded(),preemptionThread.uniqueAppsAdded());
  verifyLeafQueueStarvation();
  clock.tickMsec(FairSchedulerWithMockPreemption.DELAY_FOR_NEXT_STARVATION_CHECK_MS);
  scheduler.update();
  for (int i=0; i < 6000; ++i) {
    if (preemptionThread.totalAppsAdded() >= preemptionThread.uniqueAppsAdded() * 2) {
      break;
    }
    Thread.sleep(10);
  }
  assertEquals("Each app should be marked as starved once" + " at each scheduler update above",preemptionThread.totalAppsAdded(),preemptionThread.uniqueAppsAdded() * 2);
}
