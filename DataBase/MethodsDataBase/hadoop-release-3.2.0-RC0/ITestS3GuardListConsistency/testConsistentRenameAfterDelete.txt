/** 
 * Tests that rename immediately after files in the source directory are deleted results in exactly the correct set of destination files and none of the source files.
 * @throws Exception
 */
@Test public void testConsistentRenameAfterDelete() throws Exception {
  S3AFileSystem fs=getFileSystem();
  Assume.assumeTrue(fs.hasMetadataStore());
  Path inconsistentPath=path("a/b/dir3-" + DEFAULT_DELAY_KEY_SUBSTRING);
  Path[] testDirs={path("a/b/dir1"),path("a/b/dir2"),inconsistentPath};
  for (  Path path : testDirs) {
    assertTrue(fs.mkdirs(path));
  }
  clearInconsistency(fs);
  assertTrue(fs.delete(testDirs[1],false));
  assertTrue(fs.delete(testDirs[2],false));
  fs.rename(path("a"),path("a3"));
  FileStatus[] paths=fs.listStatus(path("a3/b"));
  List<Path> list=new ArrayList<>();
  for (  FileStatus fileState : paths) {
    list.add(fileState.getPath());
  }
  assertTrue(list.contains(path("a3/b/dir1")));
  assertFalse(list.contains(path("a3/b/dir2")));
  assertFalse(list.contains(path("a3/b/dir3-" + DEFAULT_DELAY_KEY_SUBSTRING)));
  try {
    RemoteIterator<LocatedFileStatus> old=fs.listFilesAndEmptyDirectories(path("a"),true);
    fail("Recently renamed dir should not be visible");
  }
 catch (  FileNotFoundException e) {
  }
}
