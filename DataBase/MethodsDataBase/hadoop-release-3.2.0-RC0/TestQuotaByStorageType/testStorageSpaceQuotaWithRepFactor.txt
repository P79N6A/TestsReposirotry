/** 
 * Tests if changing replication factor results in copying file as quota doesn't exceed.
 */
@Test(timeout=30000) public void testStorageSpaceQuotaWithRepFactor() throws IOException {
  final Path testDir=new Path(dir,GenericTestUtils.getMethodName());
  assertTrue(dfs.mkdirs(testDir));
  final long storageSpaceQuota=BLOCKSIZE * 2;
  dfs.setStoragePolicy(testDir,HdfsConstants.HOT_STORAGE_POLICY_NAME);
  dfs.setQuota(testDir,HdfsConstants.QUOTA_DONT_SET,storageSpaceQuota);
  Path createdFile=null;
  final long fileLen=BLOCKSIZE;
  try {
    createdFile=new Path(testDir,"file1.data");
    DFSTestUtil.createFile(dfs,createdFile,BLOCKSIZE / 16,fileLen,BLOCKSIZE,REPLICATION,seed);
    fail("should fail on DSQuotaExceededException");
  }
 catch (  DSQuotaExceededException e) {
    LOG.info("Got expected exception ",e);
    assertThat(e.toString(),is(allOf(containsString("DiskSpace quota"),containsString(testDir.toString()))));
  }
  createdFile=new Path(testDir,"file2.data");
  DFSTestUtil.createFile(dfs,createdFile,BLOCKSIZE / 16,fileLen,BLOCKSIZE,(short)2,seed);
  assertTrue(dfs.exists(createdFile));
  assertTrue(dfs.isFile(createdFile));
}
