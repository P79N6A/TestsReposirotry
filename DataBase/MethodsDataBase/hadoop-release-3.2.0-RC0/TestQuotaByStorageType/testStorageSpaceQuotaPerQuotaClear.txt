/** 
 * Tests if clearing quota per heterogeneous storage doesn't result in clearing quota for another storage.
 * @throws IOException
 */
@Test(timeout=30000) public void testStorageSpaceQuotaPerQuotaClear() throws IOException {
  final Path testDir=new Path(dir,GenericTestUtils.getMethodName());
  assertTrue(dfs.mkdirs(testDir));
  final long diskSpaceQuota=BLOCKSIZE * 1;
  final long ssdSpaceQuota=BLOCKSIZE * 2;
  dfs.setQuotaByStorageType(testDir,StorageType.DISK,diskSpaceQuota);
  dfs.setQuotaByStorageType(testDir,StorageType.SSD,ssdSpaceQuota);
  final INode testDirNode=fsdir.getINode4Write(testDir.toString());
  assertTrue(testDirNode.isDirectory());
  assertTrue(testDirNode.isQuotaSet());
  assertEquals(diskSpaceQuota,testDirNode.asDirectory().getDirectoryWithQuotaFeature().getQuota().getTypeSpace(StorageType.DISK));
  assertEquals(ssdSpaceQuota,testDirNode.asDirectory().getDirectoryWithQuotaFeature().getQuota().getTypeSpace(StorageType.SSD));
  dfs.setQuotaByStorageType(testDir,StorageType.DISK,HdfsConstants.QUOTA_RESET);
  assertEquals(-1,testDirNode.asDirectory().getDirectoryWithQuotaFeature().getQuota().getTypeSpace(StorageType.DISK));
  assertEquals(ssdSpaceQuota,testDirNode.asDirectory().getDirectoryWithQuotaFeature().getQuota().getTypeSpace(StorageType.SSD));
}
