/** 
 * Tests space quota for storage policy = WARM.
 */
@Test public void testStorageSpaceQuotaWithWarmPolicy() throws IOException {
  final Path testDir=new Path(dir,GenericTestUtils.getMethodName());
  assertTrue(dfs.mkdirs(testDir));
  dfs.setStoragePolicy(testDir,HdfsConstants.HOT_STORAGE_POLICY_NAME);
  final long storageSpaceQuota=BLOCKSIZE * 6;
  final long storageTypeSpaceQuota=BLOCKSIZE * 1;
  dfs.setQuota(testDir,HdfsConstants.QUOTA_DONT_SET,storageSpaceQuota);
  Path createdFile;
  final long fileLen=BLOCKSIZE;
  createdFile=new Path(testDir,"file1.data");
  DFSTestUtil.createFile(dfs,createdFile,BLOCKSIZE / 16,fileLen,BLOCKSIZE,REPLICATION,seed);
  assertTrue(dfs.exists(createdFile));
  assertTrue(dfs.isFile(createdFile));
  dfs.setQuotaByStorageType(testDir,StorageType.DISK,storageTypeSpaceQuota);
  dfs.setStoragePolicy(testDir,HdfsConstants.WARM_STORAGE_POLICY_NAME);
  try {
    createdFile=new Path(testDir,"file2.data");
    DFSTestUtil.createFile(dfs,createdFile,BLOCKSIZE / 16,fileLen,BLOCKSIZE,REPLICATION,seed);
    fail("should fail on QuotaByStorageTypeExceededException");
  }
 catch (  QuotaByStorageTypeExceededException e) {
    LOG.info("Got expected exception ",e);
    assertThat(e.toString(),is(allOf(containsString("Quota by storage type"),containsString("DISK on path"),containsString(testDir.toString()))));
  }
}
