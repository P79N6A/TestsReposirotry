@Test public void testOpportunisticAllocatorAfterFailover() throws Exception {
  configuration.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED,false);
  configuration.setBoolean(YarnConfiguration.RECOVERY_ENABLED,true);
  Configuration conf=new YarnConfiguration(configuration);
  conf.set(YarnConfiguration.RM_STORE,MemoryRMStateStore.class.getName());
  conf.setBoolean(YarnConfiguration.OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED,true);
  rm=new MockRM(conf);
  rm.init(conf);
  rm.start();
  StateChangeRequestInfo requestInfo=new StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
  rm.adminService.transitionToActive(requestInfo);
  rm.adminService.transitionToStandby(requestInfo);
  rm.adminService.transitionToActive(requestInfo);
  MockNM nm1=rm.registerNode("h1:1234",8 * 1024);
  RMNode rmNode1=rm.getRMContext().getRMNodes().get(nm1.getNodeId());
  rmNode1.getRMContext().getDispatcher().getEventHandler().handle(new NodeUpdateSchedulerEvent(rmNode1));
  OpportunisticContainerAllocatorAMService appMaster=(OpportunisticContainerAllocatorAMService)rm.getRMContext().getApplicationMasterService();
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      return appMaster.getLeastLoadedNodes().size() == 1;
    }
  }
,100,3000);
  rm.stop();
  Assert.assertEquals(1,appMaster.getLeastLoadedNodes().size());
}
