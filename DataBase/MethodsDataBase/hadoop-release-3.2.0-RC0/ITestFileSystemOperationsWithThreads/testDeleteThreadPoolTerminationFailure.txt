@Test public void testDeleteThreadPoolTerminationFailure() throws Exception {
  NativeAzureFileSystem mockFs=Mockito.spy((NativeAzureFileSystem)fs);
  String path=mockFs.pathToKey(mockFs.makeAbsolute(new Path("root")));
  AzureFileSystemThreadPoolExecutor mockThreadPoolExecutor=Mockito.spy(((NativeAzureFileSystem)fs).getThreadPoolExecutor(deleteThreads,"AzureBlobDeleteThread","Delete",path,NativeAzureFileSystem.AZURE_DELETE_THREADS));
  ThreadPoolExecutor mockThreadExecutor=Mockito.mock(ThreadPoolExecutor.class);
  Mockito.doNothing().when(mockThreadExecutor).execute(Mockito.any(Runnable.class));
  Mockito.when(mockThreadExecutor.awaitTermination(Long.MAX_VALUE,TimeUnit.DAYS)).thenThrow(new InterruptedException());
  Mockito.when(mockThreadPoolExecutor.getThreadPool(7)).thenReturn(mockThreadExecutor);
  Mockito.when(mockFs.getThreadPoolExecutor(deleteThreads,"AzureBlobDeleteThread","Delete",path,NativeAzureFileSystem.AZURE_DELETE_THREADS)).thenReturn(mockThreadPoolExecutor);
  createFolder(mockFs,"root");
  Path sourceFolder=new Path("root");
  boolean exception=false;
  try {
    mockFs.delete(sourceFolder,true);
  }
 catch (  IOException e) {
    exception=true;
  }
  assertTrue(exception);
  assertTrue(mockFs.exists(sourceFolder));
  String content=logs.getOutput();
  assertInLog(content,"Using thread pool for Delete operation with threads");
  assertInLog(content,"Threads got interrupted Delete blob operation");
  assertInLog(content,"Delete failed as operation on subfolders and files failed.");
}
