@Test(timeout=300_000) public void testSlowShortCircuitReadsAverageLatencyValue() throws IOException, InterruptedException, TimeoutException {
  BlockReaderLocalMetrics metrics=BlockReaderLocalMetrics.create();
  final MutableRollingAverages shortCircuitReadRollingAverages=metrics.getShortCircuitReadRollingAverages();
  MetricsTestHelper.replaceRollingAveragesScheduler(shortCircuitReadRollingAverages,ROLLING_AVERAGE_NUM_WINDOWS,ROLLING_AVERAGES_WINDOW_LENGTH_MS,TimeUnit.MILLISECONDS);
  Random random=new Random();
  FileChannel[] dataIns=new FileChannel[5];
  long totalDelay=0;
  for (int i=0; i < 5; i++) {
    dataIns[i]=Mockito.mock(FileChannel.class);
    long delay=SLOW_READ_DELAY * random.nextInt(5);
    Mockito.when(dataIns[i].read(any(ByteBuffer.class),anyLong())).thenAnswer(new Answer<Object>(){
      @Override public Object answer(      InvocationOnMock invocation) throws Throwable {
        TIMER.advance(delay);
        return 0;
      }
    }
);
    totalDelay+=delay;
  }
  long expectedAvgLatency=totalDelay / 5;
  BlockReaderIoProvider blockReaderIoProvider=new BlockReaderIoProvider(clientConf.getShortCircuitConf(),metrics,TIMER);
  for (int i=0; i < 5; i++) {
    blockReaderIoProvider.read(dataIns[i],any(ByteBuffer.class),anyLong());
  }
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      metrics.collectThreadLocalStates();
      return shortCircuitReadRollingAverages.getStats(0).size() > 0;
    }
  }
,500,10000);
  MetricsRecordBuilder rb=getMetrics(SHORT_CIRCUIT_READ_METRIC_REGISTERED_NAME);
  double averageLatency=getDoubleGauge(SHORT_CIRCUIT_LOCAL_READS_METRIC_VALUE_FULL_NAME,rb);
  assertTrue("Average Latency of Short Circuit Reads lower than expected",averageLatency >= expectedAvgLatency);
}
