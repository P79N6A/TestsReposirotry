@Test public void testSimpleValidateAbsoluteResourceConfig() throws Exception {
  CapacitySchedulerConfiguration csConf=setupSimpleQueueConfiguration(false);
  setupMinMaxResourceConfiguration(csConf);
  csConf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  @SuppressWarnings("resource") MockRM rm=new MockRM(csConf);
  rm.start();
  rm.registerNode("127.0.0.1:1234",250 * GB,40);
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  CapacitySchedulerConfiguration csConf1=setupSimpleQueueConfiguration(true);
  setupMinMaxResourceConfiguration(csConf1);
  try {
    cs.reinitialize(csConf1,rm.getRMContext());
  }
 catch (  IOException e) {
    Assert.fail();
  }
  rm.stop();
  CapacitySchedulerConfiguration csConf2=setupComplexQueueConfiguration(false);
  setupComplexMinMaxResourceConfig(csConf2);
  rm=new MockRM(csConf2);
  rm.start();
  rm.registerNode("127.0.0.1:1234",250 * GB,40);
  cs=(CapacityScheduler)rm.getResourceScheduler();
  LeafQueue qA1=(LeafQueue)cs.getQueue(QUEUEA1);
  Assert.assertEquals("Effective Min resource for QUEUEA1 is not correct",QUEUE_A1_MINRES,qA1.queueResourceQuotas.getEffectiveMinResource());
  Assert.assertEquals("Effective Max resource for QUEUEA1 is not correct",QUEUE_A_MAXRES,qA1.queueResourceQuotas.getEffectiveMaxResource());
  LeafQueue qA2=(LeafQueue)cs.getQueue(QUEUEA2);
  Assert.assertEquals("Effective Min resource for QUEUEA2 is not correct",QUEUE_A2_MINRES,qA2.queueResourceQuotas.getEffectiveMinResource());
  Assert.assertEquals("Effective Max resource for QUEUEA2 is not correct",QUEUE_A_MAXRES,qA2.queueResourceQuotas.getEffectiveMaxResource());
  LeafQueue qB1=(LeafQueue)cs.getQueue(QUEUEB1);
  Assert.assertNotNull(qB1);
  Assert.assertEquals("Min resource configured for QUEUEB1 is not correct",QUEUE_B1_MINRES,qB1.queueResourceQuotas.getConfiguredMinResource());
  Assert.assertEquals("Max resource configured for QUEUEB1 is not correct",QUEUE_B_MAXRES,qB1.queueResourceQuotas.getConfiguredMaxResource());
  Assert.assertEquals("Effective Min resource for QUEUEB1 is not correct",QUEUE_B1_MINRES,qB1.queueResourceQuotas.getEffectiveMinResource());
  Assert.assertEquals("Effective Max resource for QUEUEB1 is not correct",QUEUE_B_MAXRES,qB1.queueResourceQuotas.getEffectiveMaxResource());
  LeafQueue qC=(LeafQueue)cs.getQueue(QUEUEC);
  Assert.assertNotNull(qC);
  Assert.assertEquals("Min resource configured for QUEUEC is not correct",QUEUE_C_MINRES,qC.queueResourceQuotas.getConfiguredMinResource());
  Assert.assertEquals("Max resource configured for QUEUEC is not correct",QUEUE_C_MAXRES,qC.queueResourceQuotas.getConfiguredMaxResource());
  Assert.assertEquals("Effective Min resource for QUEUEC is not correct",QUEUE_C_MINRES,qC.queueResourceQuotas.getEffectiveMinResource());
  Assert.assertEquals("Effective Max resource for QUEUEC is not correct",QUEUE_C_MAXRES,qC.queueResourceQuotas.getEffectiveMaxResource());
  CapacitySchedulerConfiguration csConf3=setupComplexQueueConfiguration(false);
  setupComplexMinMaxResourceConfig(csConf3);
  csConf3.setMinimumResourceRequirement("",QUEUEB1_FULL,QUEUE_B_MAXRES);
  csConf3.setMaximumResourceRequirement("",QUEUEB1_FULL,QUEUE_B1_MINRES);
  try {
    cs.reinitialize(csConf3,rm.getRMContext());
    Assert.fail();
  }
 catch (  IOException e) {
    Assert.assertTrue(e instanceof IOException);
    Assert.assertEquals("Failed to re-init queues : Min resource configuration " + "<memory:153600, vCores:30> is greater than its " + "max value:<memory:40960, vCores:10> in queue:queueB1",e.getMessage());
  }
  CapacitySchedulerConfiguration csConf4=setupComplexQueueConfiguration(false);
  setupComplexMinMaxResourceConfig(csConf4);
  csConf4.setMaximumResourceRequirement("",QUEUEB1_FULL,QUEUE_A_MAXRES);
  try {
    cs.reinitialize(csConf4,rm.getRMContext());
    Assert.fail();
  }
 catch (  IOException e) {
    Assert.assertTrue(e instanceof IOException);
    Assert.assertEquals("Failed to re-init queues : Max resource configuration " + "<memory:204800, vCores:30> is greater than parents max value:" + "<memory:153600, vCores:30> in queue:queueB1",e.getMessage());
  }
  rm.stop();
}
