@Test public void testMountTableScalability() throws IOException {
  List<MountTable> emptyList=new ArrayList<>();
  mountTable.refreshEntries(emptyList);
  for (int i=0; i < 100000; i++) {
    Map<String,String> map=getMountTableEntry("1","/" + i);
    MountTable record=MountTable.newInstance("/" + i,map);
    mountTable.addEntry(record);
    if (i % 10000 == 0) {
      LOG.info("Adding flat mount record {}: {}",i,record);
    }
  }
  assertEquals(100000,mountTable.getMountPoints("/").size());
  assertEquals(100000,mountTable.getMounts("/").size());
  mountTable.refreshEntries(emptyList);
  String parent="/";
  for (int i=0; i < 1000; i++) {
    final int index=i;
    Map<String,String> map=getMountTableEntry("1","/" + index);
    if (i > 0) {
      parent=parent + "/";
    }
    parent=parent + i;
    MountTable record=MountTable.newInstance(parent,map);
    mountTable.addEntry(record);
  }
  assertEquals(1,mountTable.getMountPoints("/").size());
  assertEquals(1000,mountTable.getMounts("/").size());
  mountTable.refreshEntries(emptyList);
  Random rand=new Random();
  parent="/" + Integer.toString(rand.nextInt());
  int numRootTrees=1;
  for (int i=0; i < 100000; i++) {
    final int index=i;
    Map<String,String> map=getMountTableEntry("1","/" + index);
    parent=parent + "/" + i;
    if (parent.length() > 2000) {
      parent="/" + Integer.toString(rand.nextInt());
      numRootTrees++;
    }
    MountTable record=MountTable.newInstance(parent,map);
    mountTable.addEntry(record);
  }
  assertEquals(numRootTrees,mountTable.getMountPoints("/").size());
  assertEquals(100000,mountTable.getMounts("/").size());
}
