/** 
 * In this test, all the node types are uniformly distributed. i.e. a node has equal of being DISK, RAM_DISK, SSD and ARCHIVE. This test did two tests first test runs the old chooseRandom approach, the second test runs the new chooseRandom approach.
 * @throws Exception
 */
@Test public void testUniformStorageType() throws Exception {
  EnumSet<StorageType> missingTypes=EnumSet.allOf(StorageType.class);
  for (int i=0; i < NODE_NUM; i++) {
    types[i]=getRandType();
    missingTypes.remove(types);
  }
  if (missingTypes.size() != 0) {
    Set<Integer> usedIdx=new HashSet<>();
    int idx;
    for (    StorageType type : missingTypes) {
      do {
        idx=RANDOM.nextInt(NODE_NUM);
      }
 while (usedIdx.contains(idx));
      usedIdx.add(idx);
      types[idx]=type;
    }
  }
  addNodeByTypes(types);
  Thread.sleep(1000);
  printMemUsage("before test1");
  totalStart=System.nanoTime();
  totalTrials=0;
  for (int i=0; i < OP_NUM; i++) {
    StorageType type=StorageType.values()[i % StorageType.values().length];
    localStart=System.nanoTime();
    do {
      totalTrials+=1;
      node=cluster.chooseRandom("",excluded);
      assertNotNull(node);
      if (isType(node,type)) {
        break;
      }
      excluded.add(node);
    }
 while (true);
    excluded.clear();
    localEnd=System.nanoTime();
    records[i]=localEnd - localStart;
  }
  totalEnd=System.nanoTime();
  totalMs=(totalEnd - totalStart) / NS_TO_MS;
  LOG.info("total time: {} avg time: {} avg trials: {}",totalMs,totalMs / OP_NUM,(float)totalTrials / OP_NUM);
  Thread.sleep(1000);
  printMemUsage("after test1 before test2");
  totalStart=System.nanoTime();
  for (int i=0; i < OP_NUM; i++) {
    StorageType type=StorageType.values()[i % StorageType.values().length];
    localStart=System.nanoTime();
    node=dfscluster.chooseRandomWithStorageType("",excluded,type);
    assertNotNull(node);
    assertTrue(isType(node,type));
    localEnd=System.nanoTime();
    records[i]=localEnd - localStart;
  }
  totalEnd=System.nanoTime();
  totalMs=(totalEnd - totalStart) / NS_TO_MS;
  LOG.info("total time: {} avg time: {}",totalMs,totalMs / OP_NUM);
  printMemUsage("after test2");
}
