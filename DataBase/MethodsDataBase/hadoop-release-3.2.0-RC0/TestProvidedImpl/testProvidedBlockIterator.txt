@Test public void testProvidedBlockIterator() throws IOException {
  for (int i=0; i < providedVolumes.size(); i++) {
    FsVolumeImpl vol=providedVolumes.get(i);
    BlockIterator iter=vol.newBlockIterator(BLOCK_POOL_IDS[CHOSEN_BP_ID],"temp");
    Set<Long> blockIdsUsed=new HashSet<Long>();
    assertEquals(BLOCK_POOL_IDS[CHOSEN_BP_ID],iter.getBlockPoolId());
    while (!iter.atEnd()) {
      ExtendedBlock eb=iter.nextBlock();
      long blkId=eb.getBlockId();
      assertTrue(blkId >= MIN_BLK_ID && blkId < NUM_PROVIDED_BLKS);
      assertTrue(!blockIdsUsed.contains(blkId));
      blockIdsUsed.add(blkId);
    }
    assertEquals(NUM_PROVIDED_BLKS,blockIdsUsed.size());
    iter.rewind();
    while (!iter.atEnd()) {
      ExtendedBlock eb=iter.nextBlock();
      long blkId=eb.getBlockId();
      assertTrue(blockIdsUsed.contains(blkId));
      blockIdsUsed.remove(blkId);
    }
    assertEquals(0,blockIdsUsed.size());
    BlockIterator nonProvidedBpIter=vol.newBlockIterator(BLOCK_POOL_IDS[1 - CHOSEN_BP_ID],"temp");
    assertEquals(null,nonProvidedBpIter.nextBlock());
  }
}
