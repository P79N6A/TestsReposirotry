@Test public void testSchedulingRequestDisabledByDefault() throws Exception {
  Configuration csConf=TestUtils.getConfigurationWithMultipleQueues(new Configuration());
  MockRM rm1=new MockRM(csConf){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM[] nms=new MockNM[4];
  RMNode[] rmNodes=new RMNode[4];
  for (int i=0; i < 4; i++) {
    nms[i]=rm1.registerNode("192.168.0." + i + ":1234",10 * GB);
    rmNodes[i]=rm1.getRMContext().getRMNodes().get(nms[i].getNodeId());
  }
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"c");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nms[0]);
  boolean caughtException=false;
  try {
    am1.allocateIntraAppAntiAffinity(ResourceSizing.newInstance(2,Resource.newInstance(1024,1)),Priority.newInstance(1),1L,ImmutableSet.of("tag_1_1","tag_1_2"),"tag_1_1","tag_1_2");
  }
 catch (  Exception e) {
    caughtException=true;
  }
  Assert.assertTrue(caughtException);
  rm1.close();
}
