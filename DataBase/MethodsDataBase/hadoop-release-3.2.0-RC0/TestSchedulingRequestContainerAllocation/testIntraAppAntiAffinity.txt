@Test public void testIntraAppAntiAffinity() throws Exception {
  Configuration csConf=TestUtils.getConfigurationWithMultipleQueues(new Configuration());
  csConf.set(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_HANDLER,YarnConfiguration.SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER);
  MockRM rm1=new MockRM(csConf){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM[] nms=new MockNM[4];
  RMNode[] rmNodes=new RMNode[4];
  for (int i=0; i < 4; i++) {
    nms[i]=rm1.registerNode("192.168.0." + i + ":1234",10 * GB);
    rmNodes[i]=rm1.getRMContext().getRMNodes().get(nms[i].getNodeId());
  }
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"c");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nms[0]);
  am1.allocateIntraAppAntiAffinity(ResourceSizing.newInstance(10,Resource.newInstance(1024,1)),Priority.newInstance(1),1L,ImmutableSet.of("mapper"),"mapper");
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  for (int i=0; i < 3; i++) {
    for (int j=0; j < 4; j++) {
      cs.handle(new NodeUpdateSchedulerEvent(rmNodes[j]));
    }
  }
  FiCaSchedulerApp schedulerApp=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  Assert.assertEquals(5,schedulerApp.getLiveContainers().size());
  am1.allocateIntraAppAntiAffinity(ResourceSizing.newInstance(10,Resource.newInstance(2048,1)),Priority.newInstance(2),1L,ImmutableSet.of("reducer"),"reducer");
  for (int i=0; i < 3; i++) {
    for (int j=0; j < 4; j++) {
      cs.handle(new NodeUpdateSchedulerEvent(rmNodes[j]));
    }
  }
  Assert.assertEquals(9,schedulerApp.getLiveContainers().size());
  am1.allocateIntraAppAntiAffinity(ResourceSizing.newInstance(10,Resource.newInstance(2048,1)),Priority.newInstance(3),1L,ImmutableSet.of("reducer2"),"mapper");
  for (int i=0; i < 3; i++) {
    for (int j=0; j < 4; j++) {
      cs.handle(new NodeUpdateSchedulerEvent(rmNodes[j]));
    }
  }
  Assert.assertEquals(9,schedulerApp.getLiveContainers().size());
  rm1.close();
}
