@Test public void testFsckOpenECFiles() throws Exception {
  DFSTestUtil util=new DFSTestUtil.Builder().setName("TestFsckECFile").setNumFiles(4).build();
  conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,10000L);
  ErasureCodingPolicy ecPolicy=StripedFileTestUtil.getDefaultECPolicy();
  final int dataBlocks=ecPolicy.getNumDataUnits();
  final int cellSize=ecPolicy.getCellSize();
  final int numAllUnits=dataBlocks + ecPolicy.getNumParityUnits();
  int blockSize=2 * cellSize;
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,blockSize);
  File builderBaseDir=new File(GenericTestUtils.getRandomizedTempPath());
  cluster=new MiniDFSCluster.Builder(conf,builderBaseDir).numDataNodes(numAllUnits + 1).build();
  String topDir="/myDir";
  cluster.waitActive();
  DistributedFileSystem fs=cluster.getFileSystem();
  fs.enableErasureCodingPolicy(ecPolicy.getName());
  util.createFiles(fs,topDir);
  cluster.getFileSystem().getClient().setErasureCodingPolicy(topDir,ecPolicy.getName());
  DFSTestUtil.createFile(fs,new Path(topDir,"ecFile"),1024,(short)1,0L);
  Path openFile=new Path(topDir + "/openECFile");
  FSDataOutputStream out=fs.create(openFile);
  int blockGroupSize=dataBlocks * blockSize;
  byte[] randomBytes=new byte[2 * blockGroupSize - cellSize];
  int seed=42;
  new Random(seed).nextBytes(randomBytes);
  out.write(randomBytes);
  runFsck(conf,0,true,topDir,"-files","-blocks","-openforwrite");
  String outStr=runFsck(conf,0,true,openFile.toString(),"-files","-blocks","-openforwrite");
  assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
  assertTrue(outStr.contains("OPENFORWRITE"));
  assertTrue(outStr.contains("Live_repl=" + numAllUnits));
  assertTrue(outStr.contains("Expected_repl=" + numAllUnits));
  outStr=runFsck(conf,0,true,openFile.toString(),"-files","-blocks","-locations","-openforwrite","-replicaDetails");
  assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
  assertTrue(outStr.contains("OPENFORWRITE"));
  assertTrue(outStr.contains("Live_repl=" + numAllUnits));
  assertTrue(outStr.contains("Expected_repl=" + numAllUnits));
  assertTrue(outStr.contains("Under Construction Block:"));
  LocatedStripedBlock lsb=(LocatedStripedBlock)fs.getClient().getLocatedBlocks(openFile.toString(),0,cellSize * dataBlocks).get(0);
  long groupId=lsb.getBlock().getBlockId();
  byte[] indices=lsb.getBlockIndices();
  DatanodeInfo[] locs=lsb.getLocations();
  long blockId;
  for (int i=0; i < indices.length; i++) {
    blockId=groupId + indices[i];
    String str="blk_" + blockId + ":"+ locs[i];
    assertTrue(outStr.contains(str));
  }
  String regex=".*Expected_repl=" + numAllUnits + "(.*)\nStatus:.*";
  Pattern p=Pattern.compile(regex,Pattern.DOTALL);
  Matcher m=p.matcher(outStr);
  assertTrue(m.find());
  String ucBlockOutput=m.group(1);
  assertFalse(ucBlockOutput.contains("blk_"));
  out.close();
  outStr=runFsck(conf,0,true,openFile.toString(),"-files","-blocks","-locations","-racks","-replicaDetails");
  assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
  assertFalse(outStr.contains("OPENFORWRITE"));
  assertFalse(outStr.contains("Under Construction Block:"));
  assertFalse(outStr.contains("Expected_repl=" + numAllUnits));
  assertTrue(outStr.contains("Live_repl=" + numAllUnits));
  util.cleanup(fs,topDir);
}
