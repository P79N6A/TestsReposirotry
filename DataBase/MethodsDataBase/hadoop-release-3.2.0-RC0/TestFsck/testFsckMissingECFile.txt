@Test(timeout=300000) public void testFsckMissingECFile() throws Exception {
  DistributedFileSystem fs=null;
  int dataBlocks=StripedFileTestUtil.getDefaultECPolicy().getNumDataUnits();
  int parityBlocks=StripedFileTestUtil.getDefaultECPolicy().getNumParityUnits();
  int cellSize=StripedFileTestUtil.getDefaultECPolicy().getCellSize();
  int totalSize=dataBlocks + parityBlocks;
  File builderBaseDir=new File(GenericTestUtils.getRandomizedTempPath());
  cluster=new MiniDFSCluster.Builder(conf,builderBaseDir).numDataNodes(totalSize).build();
  fs=cluster.getFileSystem();
  fs.enableErasureCodingPolicy(StripedFileTestUtil.getDefaultECPolicy().getName());
  Path ecDirPath=new Path("/striped");
  fs.mkdir(ecDirPath,FsPermission.getDirDefault());
  fs.getClient().setErasureCodingPolicy(ecDirPath.toString(),StripedFileTestUtil.getDefaultECPolicy().getName());
  Path file=new Path(ecDirPath,"missing");
  final int length=cellSize * dataBlocks;
  final byte[] bytes=StripedFileTestUtil.generateBytes(length);
  DFSTestUtil.writeFile(fs,file,bytes);
  ArrayList<DataNode> dns=cluster.getDataNodes();
  DatanodeID dnId;
  for (int i=0; i < parityBlocks + 1; i++) {
    dnId=dns.get(i).getDatanodeId();
    cluster.stopDataNode(dnId.getXferAddr());
    cluster.setDataNodeDead(dnId);
  }
  waitForUnrecoverableBlockGroup(conf);
  String outStr=runFsck(conf,1,true,"/","-files","-blocks","-locations");
  assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS));
  assertTrue(outStr.contains("Live_repl=" + (dataBlocks - 1)));
  assertTrue(outStr.contains("Under-erasure-coded block groups:\t0"));
  outStr=runFsck(conf,-1,true,"/","-list-corruptfileblocks");
  assertTrue(outStr.contains("has 1 CORRUPT files"));
}
