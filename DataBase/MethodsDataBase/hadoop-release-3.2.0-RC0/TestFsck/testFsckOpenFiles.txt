@Test public void testFsckOpenFiles() throws Exception {
  DFSTestUtil util=new DFSTestUtil.Builder().setName("TestFsck").setNumFiles(4).build();
  FileSystem fs=null;
  conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,10000L);
  File builderBaseDir=new File(GenericTestUtils.getRandomizedTempPath());
  cluster=new MiniDFSCluster.Builder(conf,builderBaseDir).numDataNodes(4).build();
  String topDir="/srcdat";
  String randomString="HADOOP  ";
  fs=cluster.getFileSystem();
  cluster.waitActive();
  util.createFiles(fs,topDir);
  util.waitReplication(fs,topDir,(short)3);
  String outStr=runFsck(conf,0,true,"/");
  assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
  Path openFile=new Path(topDir + "/openFile");
  FSDataOutputStream out=fs.create(openFile);
  int writeCount=0;
  while (writeCount != 100) {
    out.write(randomString.getBytes());
    writeCount++;
  }
  ((DFSOutputStream)out.getWrappedStream()).hflush();
  outStr=runFsck(conf,0,true,topDir);
  System.out.println(outStr);
  assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
  assertFalse(outStr.contains("OPENFORWRITE"));
  outStr=runFsck(conf,0,true,topDir,"-files","-blocks","-locations","-openforwrite");
  System.out.println(outStr);
  assertTrue(outStr.contains("OPENFORWRITE"));
  assertTrue(outStr.contains("Under Construction Block:"));
  assertTrue(outStr.contains("openFile"));
  out.close();
  outStr=runFsck(conf,0,true,topDir);
  System.out.println(outStr);
  assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
  assertFalse(outStr.contains("OPENFORWRITE"));
  assertFalse(outStr.contains("Under Construction Block:"));
  util.cleanup(fs,topDir);
}
