/** 
 * do fsck. 
 */
@Test public void testFsck() throws Exception {
  DFSTestUtil util=new DFSTestUtil.Builder().setName("TestFsck").setNumFiles(20).build();
  FileSystem fs=null;
  final long precision=1L;
  conf.setLong(DFSConfigKeys.DFS_NAMENODE_ACCESSTIME_PRECISION_KEY,precision);
  conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,10000L);
  File builderBaseDir=new File(GenericTestUtils.getRandomizedTempPath());
  cluster=new MiniDFSCluster.Builder(conf,builderBaseDir).numDataNodes(4).build();
  fs=cluster.getFileSystem();
  final String fileName="/srcdat";
  util.createFiles(fs,fileName);
  util.waitReplication(fs,fileName,(short)3);
  final Path file=new Path(fileName);
  long aTime=fs.getFileStatus(file).getAccessTime();
  Thread.sleep(precision);
  setupAuditLogs();
  String outStr=runFsck(conf,0,true,"/");
  verifyAuditLogs();
  assertEquals(aTime,fs.getFileStatus(file).getAccessTime());
  System.out.println(outStr);
  assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
  shutdownCluster();
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).build();
  outStr=runFsck(conf,1,true,"/");
  assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS));
  System.out.println(outStr);
  cluster.startDataNodes(conf,4,true,null,null);
  cluster.waitActive();
  cluster.waitClusterUp();
  fs=cluster.getFileSystem();
  util.cleanup(fs,"/srcdat");
}
