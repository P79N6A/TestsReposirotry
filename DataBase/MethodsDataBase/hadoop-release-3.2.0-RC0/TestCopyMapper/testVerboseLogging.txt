@Test public void testVerboseLogging() throws Exception {
  deleteState();
  createSourceData();
  FileSystem fs=cluster.getFileSystem();
  CopyMapper copyMapper=new CopyMapper();
  StubContext stubContext=new StubContext(getConfiguration(),null,0);
  Mapper<Text,CopyListingFileStatus,Text,Text>.Context context=stubContext.getContext();
  copyMapper.setup(context);
  int numFiles=0;
  for (  Path path : pathList) {
    if (fs.getFileStatus(path).isFile()) {
      numFiles++;
    }
    copyMapper.map(new Text(DistCpUtils.getRelativePath(new Path(SOURCE_PATH),path)),new CopyListingFileStatus(fs.getFileStatus(path)),context);
  }
  Assert.assertEquals(numFiles,stubContext.getReporter().getCounter(CopyMapper.Counter.COPY).getValue());
  testCopyingExistingFiles(fs,copyMapper,context);
  for (  Text value : stubContext.getWriter().values()) {
    Assert.assertTrue(!value.toString().startsWith("FILE_COPIED:"));
    Assert.assertTrue(!value.toString().startsWith("FILE_SKIPPED:"));
  }
  deleteState();
  createSourceData();
  stubContext=new StubContext(getConfiguration(),null,0);
  context=stubContext.getContext();
  copyMapper.setup(context);
  context.getConfiguration().setBoolean(DistCpOptionSwitch.VERBOSE_LOG.getConfigLabel(),true);
  copyMapper.setup(context);
  for (  Path path : pathList) {
    copyMapper.map(new Text(DistCpUtils.getRelativePath(new Path(SOURCE_PATH),path)),new CopyListingFileStatus(fs.getFileStatus(path)),context);
  }
  Assert.assertEquals(numFiles,stubContext.getReporter().getCounter(CopyMapper.Counter.COPY).getValue());
  int numFileCopied=0;
  for (  Text value : stubContext.getWriter().values()) {
    if (value.toString().startsWith("FILE_COPIED:")) {
      numFileCopied++;
    }
  }
  Assert.assertEquals(numFiles,numFileCopied);
  int numFileSkipped=0;
  testCopyingExistingFiles(fs,copyMapper,context);
  for (  Text value : stubContext.getWriter().values()) {
    if (value.toString().startsWith("FILE_SKIPPED:")) {
      numFileSkipped++;
    }
  }
  Assert.assertEquals(numFiles,numFileSkipped);
}
