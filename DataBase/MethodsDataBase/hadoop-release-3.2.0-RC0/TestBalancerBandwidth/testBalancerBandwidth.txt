@Test public void testBalancerBandwidth() throws Exception {
  conf.setLong(DFSConfigKeys.DFS_DATANODE_BALANCE_BANDWIDTHPERSEC_KEY,DEFAULT_BANDWIDTH);
  try (MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_OF_DATANODES).build()){
    cluster.waitActive();
    DistributedFileSystem fs=cluster.getFileSystem();
    ArrayList<DataNode> datanodes=cluster.getDataNodes();
    assertEquals(DEFAULT_BANDWIDTH,(long)datanodes.get(0).getBalancerBandwidth());
    assertEquals(DEFAULT_BANDWIDTH,(long)datanodes.get(1).getBalancerBandwidth());
    DFSAdmin admin=new DFSAdmin(conf);
    String dn1Address=datanodes.get(0).ipcServer.getListenerAddress().getHostName() + ":" + datanodes.get(0).getIpcPort();
    String dn2Address=datanodes.get(1).ipcServer.getListenerAddress().getHostName() + ":" + datanodes.get(1).getIpcPort();
    String[] args=new String[]{"-getBalancerBandwidth",dn1Address};
    runGetBalancerBandwidthCmd(admin,args,DEFAULT_BANDWIDTH);
    args=new String[]{"-getBalancerBandwidth",dn2Address};
    runGetBalancerBandwidthCmd(admin,args,DEFAULT_BANDWIDTH);
    long newBandwidth=12 * DEFAULT_BANDWIDTH;
    fs.setBalancerBandwidth(newBandwidth);
    verifyBalancerBandwidth(datanodes,newBandwidth);
    args=new String[]{"-getBalancerBandwidth",dn1Address};
    runGetBalancerBandwidthCmd(admin,args,newBandwidth);
    args=new String[]{"-getBalancerBandwidth",dn2Address};
    runGetBalancerBandwidthCmd(admin,args,newBandwidth);
    fs.setBalancerBandwidth(0);
    verifyBalancerBandwidth(datanodes,newBandwidth);
    args=new String[]{"-getBalancerBandwidth",dn1Address};
    runGetBalancerBandwidthCmd(admin,args,newBandwidth);
    args=new String[]{"-getBalancerBandwidth",dn2Address};
    runGetBalancerBandwidthCmd(admin,args,newBandwidth);
  }
 }
