/** 
 * Test AMRMProxy restart with recovery.
 */
@Test public void testRecovery() throws YarnException, Exception {
  Configuration conf=createConfiguration();
  conf.set(YarnConfiguration.AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE,MockRequestInterceptorAcrossRestart.class.getName());
  mockRM=new MockResourceManagerFacade(new YarnConfiguration(conf),0);
  createAndStartAMRMProxyService(conf);
  int testAppId1=1;
  RegisterApplicationMasterResponse registerResponse=registerApplicationMaster(testAppId1);
  Assert.assertNotNull(registerResponse);
  Assert.assertEquals(Integer.toString(testAppId1),registerResponse.getQueue());
  int testAppId2=2;
  registerResponse=registerApplicationMaster(testAppId2);
  Assert.assertNotNull(registerResponse);
  Assert.assertEquals(Integer.toString(testAppId2),registerResponse.getQueue());
  AllocateResponse allocateResponse=allocate(testAppId2);
  Assert.assertNotNull(allocateResponse);
  createAndStartAMRMProxyService(conf);
  Assert.assertTrue(getAMRMProxyService().getPipelines().size() == 2);
  allocateResponse=allocate(testAppId1);
  Assert.assertNotNull(allocateResponse);
  FinishApplicationMasterResponse finshResponse=finishApplicationMaster(testAppId1,FinalApplicationStatus.SUCCEEDED);
  Assert.assertNotNull(finshResponse);
  Assert.assertEquals(true,finshResponse.getIsUnregistered());
  allocateResponse=allocate(testAppId2);
  Assert.assertNotNull(allocateResponse);
  finshResponse=finishApplicationMaster(testAppId2,FinalApplicationStatus.SUCCEEDED);
  Assert.assertNotNull(finshResponse);
  Assert.assertEquals(true,finshResponse.getIsUnregistered());
  int testAppId3=3;
  try {
    finishApplicationMaster(testAppId3,FinalApplicationStatus.SUCCEEDED);
    Assert.fail("The Mock RM should complain about not knowing the third app");
  }
 catch (  Throwable ex) {
  }
  mockRM=null;
}
