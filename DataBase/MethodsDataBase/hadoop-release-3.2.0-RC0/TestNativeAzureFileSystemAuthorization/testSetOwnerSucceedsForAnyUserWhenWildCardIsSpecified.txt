/** 
 * Test for setOwner when Authorization is enabled and the userlist is specified as '*'.
 */
@Test public void testSetOwnerSucceedsForAnyUserWhenWildCardIsSpecified() throws Throwable {
  fs.updateChownAllowedUsers(Collections.singletonList("*"));
  final Path testPath=new Path("/testSetOwnerPositiveWildcard");
  Configuration conf=fs.getConf();
  authorizer.init(conf);
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  fs.updateWasbAuthorizer(authorizer);
  final String newOwner="newowner";
  final String newGroup="newgroup";
  UserGroupInformation user=UserGroupInformation.createUserForTesting("anyuser",new String[]{"group1"});
  try {
    fs.mkdirs(testPath);
    ContractTestUtils.assertPathExists(fs,"test path does not exist",testPath);
    String owner=fs.getFileStatus(testPath).getOwner();
    Assume.assumeTrue("changing owner requires original and new owner to be different",!StringUtils.equalsIgnoreCase(owner,newOwner));
    user.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        fs.setOwner(testPath,newOwner,newGroup);
        assertOwnerEquals(testPath,newOwner);
        assertEquals(newGroup,fs.getFileStatus(testPath).getGroup());
        return null;
      }
    }
);
  }
  finally {
    fs.delete(testPath,false);
  }
}
