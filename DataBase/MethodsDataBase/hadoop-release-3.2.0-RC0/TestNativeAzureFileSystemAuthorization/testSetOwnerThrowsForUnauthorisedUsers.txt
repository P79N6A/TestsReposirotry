/** 
 * Negative test for setOwner when Authorization is enabled.
 */
@Test public void testSetOwnerThrowsForUnauthorisedUsers() throws Throwable {
  Path testPath=new Path("/testSetOwnerNegative");
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  fs.updateWasbAuthorizer(authorizer);
  final String owner;
  UserGroupInformation unauthorisedUser=UserGroupInformation.createUserForTesting("unauthoriseduser",new String[]{"group1"});
  try {
    fs.mkdirs(testPath);
    ContractTestUtils.assertPathExists(fs,"test path does not exist",testPath);
    owner=fs.getFileStatus(testPath).getOwner();
    unauthorisedUser.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try {
          fs.setOwner(testPath,"newowner",null);
          fail("Failing test because setOwner call was expected to throw");
        }
 catch (        WasbAuthorizationException wex) {
          assertOwnerEquals(testPath,owner);
        }
        return null;
      }
    }
);
  }
  finally {
    fs.delete(testPath,false);
  }
}
