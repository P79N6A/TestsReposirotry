/** 
 * Negative test to verify file delete fails when sticky bit is set on parent and non-owner user performs delete
 * @throws Throwable
 */
@Test public void testSingleFileDeleteWithStickyBitNegative() throws Throwable {
  Path parentDir=new Path("/testSingleFileDeleteWithStickyBitNegative");
  Path testPath=new Path(parentDir,"test.dat");
  expectedEx.expect(WasbAuthorizationException.class);
  expectedEx.expectMessage(String.format("%s has sticky bit set. File %s cannot be deleted.",parentDir.toString(),testPath.toString()));
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner(parentDir.toString(),WRITE,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    fs.create(testPath);
    ContractTestUtils.assertPathExists(fs,"testPath was not created",testPath);
    fs.setPermission(parentDir,new FsPermission(STICKYBIT_PERMISSION_CONSTANT));
    UserGroupInformation dummyUser=UserGroupInformation.createUserForTesting("dummyUser",new String[]{"dummygroup"});
    dummyUser.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try {
          authorizer.addAuthRule(parentDir.toString(),WRITE,getCurrentUserShortName(),true);
          fs.delete(testPath,true);
          return null;
        }
 catch (        WasbAuthorizationException wae) {
          ContractTestUtils.assertPathExists(fs,"testPath should not be deleted!",testPath);
          throw wae;
        }
      }
    }
);
  }
  finally {
    allowRecursiveDelete(fs,parentDir.toString());
    fs.delete(parentDir,true);
  }
}
