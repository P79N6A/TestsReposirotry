/** 
 * Test to verify access check failure leaves intermediate folders undeleted.
 * @throws Throwable
 */
@Test public void testDeleteAuthCheckFailureLeavesFilesUndeleted() throws Throwable {
  Path parentDir=new Path("/testDeleteAuthCheckFailureLeavesFilesUndeleted");
  Path childPath1=new Path(parentDir,"child1");
  Path childPath2=new Path(parentDir,"child2");
  Path testPath1=new Path(childPath1,"test.dat");
  Path testPath2=new Path(childPath2,"test.dat");
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner("/testDeleteAuthCheckFailureLeavesFilesUndeleted*",WRITE,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    fs.create(testPath1);
    fs.create(testPath2);
    ContractTestUtils.assertPathExists(fs,"testPath1 was not created",testPath1);
    ContractTestUtils.assertPathExists(fs,"testPath2 was not created",testPath2);
    authorizer.deleteAllAuthRules();
    authorizer.addAuthRuleForOwner("/",WRITE,true);
    authorizer.addAuthRuleForOwner(parentDir.toString(),WRITE,true);
    authorizer.addAuthRuleForOwner(childPath2.toString(),WRITE,true);
    authorizer.addAuthRuleForOwner(childPath1.toString(),WRITE,false);
    assertFalse(fs.delete(parentDir,true));
    ContractTestUtils.assertPathExists(fs,"child1 is deleted!",testPath1);
    ContractTestUtils.assertPathDoesNotExist(fs,"child2 exists after deletion!",testPath2);
    ContractTestUtils.assertPathDoesNotExist(fs,"child2 exists after deletion!",childPath2);
    ContractTestUtils.assertPathExists(fs,"parentDir is deleted!",parentDir);
  }
  finally {
    allowRecursiveDelete(fs,parentDir.toString());
    fs.delete(parentDir,true);
  }
}
