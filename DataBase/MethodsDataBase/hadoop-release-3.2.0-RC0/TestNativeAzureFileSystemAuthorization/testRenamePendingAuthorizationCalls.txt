/** 
 * Test to ensure that the internal RenamePending mechanism does not make authorization calls.
 */
@Test public void testRenamePendingAuthorizationCalls() throws Throwable {
  Path testPath=new Path("/testRenamePendingAuthorizationCalls");
  Path srcPath=new Path(testPath,"srcPath");
  Path dstPath=new Path(testPath,"dstPath");
  Path srcFilePath=new Path(srcPath,"file.txt");
  Path dstFilePath=new Path(dstPath,"file.txt");
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner(testPath.toString(),WRITE,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    fs.create(srcFilePath);
    String srcKey=fs.pathToKey(srcPath);
    String dstKey=fs.pathToKey(dstPath);
    NativeAzureFileSystem.FolderRenamePending renamePending=new NativeAzureFileSystem.FolderRenamePending(srcKey,dstKey,null,fs);
    renamePending.writeFile(fs);
    fs.getFileStatus(srcPath);
  }
 catch (  FileNotFoundException fnfe) {
    GenericTestUtils.assertExceptionContains(srcPath.toString() + ": No such file or directory.",fnfe);
    ContractTestUtils.assertPathExists(fs,"dstFilePath does not exist -- pending rename failed",dstFilePath);
  }
 finally {
    allowRecursiveDelete(fs,testPath.toString());
    fs.delete(testPath,true);
  }
}
