/** 
 * Positive test to check rename succeeds for hierarchy of files and folders under a src directory when destination folder already exists.
 */
@Test public void testRenamePositiveWhenDestinationFolderExists() throws Throwable {
  Path parentSrcDir=new Path("/testRenamePositiveForFolderSrc");
  Path srcFilePath=new Path(parentSrcDir,"test1.dat");
  Path srcFolderPath=new Path(parentSrcDir,"testFolder");
  Path dstDir=new Path("/testRenamePositiveForFolderDst");
  Path finalDstDir=new Path(dstDir,"testRenamePositiveForFolderSrc");
  Path dstFilePath=new Path(finalDstDir,"test1.dat");
  Path dstFolderPath=new Path(finalDstDir,"testFolder");
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner(parentSrcDir.toString(),WRITE,true);
  authorizer.addAuthRuleForOwner(dstDir.toString(),WRITE,true);
  authorizer.addAuthRuleForOwner("/",READ,true);
  authorizer.addAuthRuleForOwner(parentSrcDir.toString(),READ,true);
  authorizer.addAuthRuleForOwner(finalDstDir.toString(),READ,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    touch(fs,srcFilePath);
    assertPathExists(fs,"srcFilePath does not exist",srcFilePath);
    fs.mkdirs(srcFolderPath);
    assertIsDirectory(fs,srcFolderPath);
    fs.mkdirs(dstDir);
    assertIsDirectory(fs,dstDir);
    assertRenameOutcome(fs,parentSrcDir,dstDir,true);
    assertPathDoesNotExist(fs,"parentSrcDir exists",parentSrcDir);
    assertPathDoesNotExist(fs,"srcFilePath exists",srcFilePath);
    assertPathDoesNotExist(fs,"srcFolderPath exists",srcFolderPath);
    assertPathExists(fs,"destPath does not exist",dstDir);
    assertPathExists(fs,"dstFilePath does not exist",dstFilePath);
    assertPathExists(fs,"dstFolderPath does not exist",dstFolderPath);
  }
  finally {
    recursiveDelete(parentSrcDir);
    recursiveDelete(dstDir);
  }
}
