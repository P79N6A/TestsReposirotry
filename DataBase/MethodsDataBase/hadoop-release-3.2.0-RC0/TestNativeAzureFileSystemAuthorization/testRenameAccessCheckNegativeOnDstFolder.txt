/** 
 * Negative test to verify rename access check - the dstFolder disallows rename.
 * @throws Throwable
 */
@Test public void testRenameAccessCheckNegativeOnDstFolder() throws Throwable {
  Path parentSrcDir=new Path("/testRenameAccessCheckNegativeSrc");
  Path srcPath=new Path(parentSrcDir,"test1.dat");
  Path parentDstDir=new Path("/testRenameAccessCheckNegativeDst");
  Path dstPath=new Path(parentDstDir,"test2.dat");
  setExpectedFailureMessage("rename",dstPath);
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner(parentSrcDir.toString(),WRITE,true);
  authorizer.addAuthRuleForOwner(parentDstDir.toString(),WRITE,false);
  fs.updateWasbAuthorizer(authorizer);
  try {
    touch(fs,srcPath);
    ContractTestUtils.assertPathExists(fs,"sourcePath does not exist",srcPath);
    fs.mkdirs(parentDstDir);
    fs.rename(srcPath,dstPath);
    ContractTestUtils.assertPathDoesNotExist(fs,"destPath does not exist",dstPath);
  }
  finally {
    ContractTestUtils.assertPathExists(fs,"sourcePath does not exist after rename !",srcPath);
    recursiveDelete(parentSrcDir);
  }
}
