/** 
 * Test to verify delete of root succeeds with proper permissions and leaves root after delete.
 * @throws Throwable
 */
@Test public void testDeleteScenarioForRoot() throws Throwable {
  Path rootPath=new Path("/");
  Path parentDir=new Path("/testDeleteScenarioForRoot");
  Path childPath1=new Path(parentDir,"child1");
  Path childPath2=new Path(parentDir,"child2");
  Path testPath1=new Path(childPath1,"test.dat");
  Path testPath2=new Path(childPath2,"testFolder");
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner("/testDeleteScenarioForRoot*",WRITE,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    fs.create(testPath1);
    fs.create(testPath2);
    ContractTestUtils.assertPathExists(fs,"testPath1 was not created",testPath1);
    ContractTestUtils.assertPathExists(fs,"testPath2 was not created",testPath2);
    assertFalse(fs.delete(rootPath,true));
    ContractTestUtils.assertPathDoesNotExist(fs,"file exists after deletion!",testPath1);
    ContractTestUtils.assertPathDoesNotExist(fs,"folder exists after deletion!",testPath2);
    ContractTestUtils.assertPathDoesNotExist(fs,"parentDir exists after deletion!",parentDir);
    ContractTestUtils.assertPathExists(fs,"Root should not have been deleted!",rootPath);
  }
  finally {
    allowRecursiveDelete(fs,parentDir.toString());
    fs.delete(parentDir,true);
  }
}
