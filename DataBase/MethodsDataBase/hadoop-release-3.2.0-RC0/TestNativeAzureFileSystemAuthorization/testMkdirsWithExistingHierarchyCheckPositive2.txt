@Test public void testMkdirsWithExistingHierarchyCheckPositive2() throws Throwable {
  Path testPath=new Path("/testMkdirsWithExistingHierarchyCheckPositive2");
  Path childPath1=new Path(testPath,"1");
  Path childPath2=new Path(childPath1,"2");
  Path childPath3=new Path(childPath2,"3");
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner(childPath1.toString(),WRITE,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    fs.mkdirs(childPath1);
    ContractTestUtils.assertIsDirectory(fs,childPath1);
    fs.mkdirs(testPath);
    ContractTestUtils.assertIsDirectory(fs,testPath);
    fs.mkdirs(childPath1);
    ContractTestUtils.assertIsDirectory(fs,childPath1);
    fs.mkdirs(childPath3);
    ContractTestUtils.assertIsDirectory(fs,childPath3);
  }
  finally {
    allowRecursiveDelete(fs,testPath.toString());
    fs.delete(testPath,true);
  }
}
