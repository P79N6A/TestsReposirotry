/** 
 * Test delete scenario where sticky bit check leaves files/folders not owned by a specific user intact and the files owned by him/her are deleted
 * @throws Throwable
 */
@Test public void testDeleteSucceedsForOnlyFilesOwnedByUserWithStickybitSet() throws Throwable {
  Path parentDir=new Path("/testDeleteSucceedsForOnlyFilesOwnedByUserWithStickybitSet");
  Path testFilePath=new Path(parentDir,"test.dat");
  Path testFolderPath=new Path(parentDir,"testDirectory");
  authorizer.addAuthRuleForOwner("/",WRITE,true);
  authorizer.addAuthRuleForOwner("/testDeleteSucceedsForOnlyFilesOwnedByUserWithStickybitSet*",WRITE,true);
  fs.updateWasbAuthorizer(authorizer);
  try {
    fs.create(testFilePath);
    ContractTestUtils.assertPathExists(fs,"file was not created",testFilePath);
    fs.setPermission(parentDir,new FsPermission(STICKYBIT_PERMISSION_CONSTANT));
    UserGroupInformation dummyUser=UserGroupInformation.createUserForTesting("dummyuser",new String[]{"dummygroup"});
    dummyUser.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        authorizer.addAuthRule("/",WRITE,getCurrentUserShortName(),true);
        authorizer.addAuthRule("/testDeleteSucceedsForOnlyFilesOwnedByUserWithStickybitSet*",WRITE,getCurrentUserShortName(),true);
        fs.create(testFolderPath);
        ContractTestUtils.assertPathExists(fs,"folder was not created",testFolderPath);
        assertFalse(fs.delete(parentDir,true));
        ContractTestUtils.assertPathDoesNotExist(fs,"folder should have been deleted!",testFolderPath);
        ContractTestUtils.assertPathExists(fs,"parentDir is deleted!",parentDir);
        ContractTestUtils.assertPathExists(fs,"file is deleted!",testFilePath);
        return null;
      }
    }
);
  }
  finally {
    allowRecursiveDelete(fs,parentDir.toString());
    fs.delete(parentDir,true);
  }
}
