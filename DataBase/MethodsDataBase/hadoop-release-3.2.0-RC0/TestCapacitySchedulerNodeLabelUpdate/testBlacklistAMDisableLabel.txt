@Test(timeout=30000) public void testBlacklistAMDisableLabel() throws Exception {
  conf.setBoolean(YarnConfiguration.AM_SCHEDULING_NODE_BLACKLISTING_ENABLED,true);
  conf.setFloat(YarnConfiguration.AM_SCHEDULING_NODE_BLACKLISTING_DISABLE_THRESHOLD,0.5f);
  mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y"));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h2",0),toSet("x"),NodeId.newInstance("h3",0),toSet("x"),NodeId.newInstance("h6",0),toSet("x")));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h4",0),toSet("y"),NodeId.newInstance("h5",0),toSet("y"),NodeId.newInstance("h7",0),toSet("y")));
  MockRM rm=new MockRM(getConfigurationWithQueueLabels(conf)){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm.getRMContext().setNodeLabelManager(mgr);
  rm.start();
  MockNM nm1=rm.registerNode("h1:1234",2048);
  MockNM nm2=rm.registerNode("h2:1234",2048);
  rm.registerNode("h3:1234",2048);
  rm.registerNode("h4:1234",2048);
  rm.registerNode("h5:1234",2048);
  rm.registerNode("h6:1234",2048);
  rm.registerNode("h7:1234",2048);
  rm.registerNode("h8:1234",2048);
  rm.registerNode("h9:1234",2048);
  RMApp app=rm.submitApp(GB,"app","user",null,"a");
  MockRM.launchAndRegisterAM(app,rm,nm1);
  RMAppAttempt appAttempt=app.getCurrentAppAttempt();
  appAttempt.getAMBlacklistManager().addNode("h1");
  ResourceBlacklistRequest blacklistUpdates=appAttempt.getAMBlacklistManager().getBlacklistUpdates();
  Assert.assertEquals(1,blacklistUpdates.getBlacklistAdditions().size());
  Assert.assertEquals(0,blacklistUpdates.getBlacklistRemovals().size());
  appAttempt.getAMBlacklistManager().addNode("h8");
  blacklistUpdates=appAttempt.getAMBlacklistManager().getBlacklistUpdates();
  Assert.assertEquals(0,blacklistUpdates.getBlacklistAdditions().size());
  Assert.assertEquals(2,blacklistUpdates.getBlacklistRemovals().size());
  RMApp applabel=rm.submitApp(GB,"app","user",null,"a","x");
  MockRM.launchAndRegisterAM(applabel,rm,nm2);
  RMAppAttempt appAttemptlabelx=applabel.getCurrentAppAttempt();
  appAttemptlabelx.getAMBlacklistManager().addNode("h2");
  ResourceBlacklistRequest blacklistUpdatesOnx=appAttemptlabelx.getAMBlacklistManager().getBlacklistUpdates();
  Assert.assertEquals(1,blacklistUpdatesOnx.getBlacklistAdditions().size());
  Assert.assertEquals(0,blacklistUpdatesOnx.getBlacklistRemovals().size());
  appAttemptlabelx.getAMBlacklistManager().addNode("h3");
  blacklistUpdatesOnx=appAttempt.getAMBlacklistManager().getBlacklistUpdates();
  Assert.assertEquals(0,blacklistUpdatesOnx.getBlacklistAdditions().size());
  Assert.assertEquals(2,blacklistUpdatesOnx.getBlacklistRemovals().size());
  rm.close();
}
