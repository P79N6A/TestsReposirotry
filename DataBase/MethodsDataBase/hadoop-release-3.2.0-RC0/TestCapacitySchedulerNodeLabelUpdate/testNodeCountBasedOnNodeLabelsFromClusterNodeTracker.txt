@Test public void testNodeCountBasedOnNodeLabelsFromClusterNodeTracker() throws Exception {
  mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y","z"));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",1234),toSet("x")));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h2",1234),toSet("x")));
  MockRM rm=new MockRM(getConfigurationWithQueueLabels(conf)){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm.getRMContext().setNodeLabelManager(mgr);
  rm.start();
  MockNM nm1=rm.registerNode("h1:1234",8000);
  rm.registerNode("h2:1234",8000);
  rm.registerNode("h3:1234",8000);
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  Assert.assertEquals(2,cs.getNodeTracker().getNodesPerPartition("x").size());
  Assert.assertEquals(1,cs.getNodeTracker().getNodesPerPartition("").size());
  rm.unRegisterNode(nm1);
  rm.registerNode("h4:1234",8000);
  Assert.assertEquals(1,cs.getNodeTracker().getNodesPerPartition("x").size());
  Assert.assertEquals(2,cs.getNodeTracker().getNodesPerPartition("").size());
  mgr.replaceLabelsOnNode(ImmutableMap.of(NodeId.newInstance("h2",1234),toSet("")));
  Assert.assertEquals(0,waitForNodeLabelSchedulerEventUpdate(rm,"x",0,3000L));
}
