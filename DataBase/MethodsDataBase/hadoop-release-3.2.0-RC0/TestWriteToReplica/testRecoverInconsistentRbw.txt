/** 
 * Test that we can successfully recover a  {@link ReplicaBeingWritten}which has inconsistent metadata (bytes were written to disk but bytesOnDisk was not updated) but that recovery fails when the block is actually corrupt (bytes are not present on disk).
 */
@Test public void testRecoverInconsistentRbw() throws IOException {
  Configuration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf,new File(GenericTestUtils.getRandomizedTempPath())).build();
  cluster.waitActive();
  DataNode dn=cluster.getDataNodes().get(0);
  FsDatasetImpl fsDataset=(FsDatasetImpl)DataNodeTestUtils.getFSDataset(dn);
  String bpid=cluster.getNamesystem().getBlockPoolId();
  ExtendedBlock[] blocks=setup(bpid,cluster.getFsDatasetTestUtils(dn));
  ReplicaBeingWritten rbw=(ReplicaBeingWritten)fsDataset.getReplicaInfo(bpid,blocks[RBW].getBlockId());
  long bytesOnDisk=rbw.getBytesOnDisk();
  rbw.setLastChecksumAndDataLen(bytesOnDisk - 1,null);
  fsDataset.recoverRbw(blocks[RBW],blocks[RBW].getGenerationStamp(),0L,rbw.getNumBytes());
  Assert.assertTrue(rbw.getBytesOnDisk() == rbw.getBytesAcked());
  rbw.setLastChecksumAndDataLen(bytesOnDisk - 1,null);
  try (RandomAccessFile blockRAF=rbw.getFileIoProvider().getRandomAccessFile(rbw.getVolume(),rbw.getBlockFile(),"rw")){
    blockRAF.setLength(bytesOnDisk - 1);
    fsDataset.recoverRbw(blocks[RBW],blocks[RBW].getGenerationStamp(),0L,rbw.getNumBytes());
    fail("recovery should have failed");
  }
 catch (  ReplicaNotFoundException rnfe) {
    GenericTestUtils.assertExceptionContains("Found fewer bytesOnDisk than " + "bytesAcked for replica",rnfe);
  }
}
