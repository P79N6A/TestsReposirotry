@Test public void testMaxAMResourcePerQueuePercentAfterQueueRefresh() throws Exception {
  Map<String,CSQueue> queues=new HashMap<String,CSQueue>();
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  final String newRootName="root" + System.currentTimeMillis();
  setupQueueConfiguration(csConf,newRootName);
  Resource clusterResource=Resources.createResource(100 * 16 * GB,100 * 32);
  CapacitySchedulerContext csContext=mockCSContext(csConf,clusterResource);
  when(csContext.getRMContext()).thenReturn(rmContext);
  csConf.setFloat(CapacitySchedulerConfiguration.MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT,0.1f);
  CSQueue root;
  root=CapacitySchedulerQueueManager.parseQueue(csContext,csConf,null,CapacitySchedulerConfiguration.ROOT,queues,queues,TestUtils.spyHook);
  root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
  LeafQueue b=stubLeafQueue((LeafQueue)queues.get(B));
  assertEquals(0.1f,b.getMaxAMResourcePerQueuePercent(),1e-3f);
  assertEquals(b.calculateAndGetAMResourceLimit(),Resources.createResource(159 * GB,1));
  csConf.setFloat(CapacitySchedulerConfiguration.MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT,0.2f);
  clusterResource=Resources.createResource(100 * 20 * GB,100 * 32);
  Map<String,CSQueue> newQueues=new HashMap<String,CSQueue>();
  CSQueue newRoot=CapacitySchedulerQueueManager.parseQueue(csContext,csConf,null,CapacitySchedulerConfiguration.ROOT,newQueues,queues,TestUtils.spyHook);
  root.reinitialize(newRoot,clusterResource);
  b=stubLeafQueue((LeafQueue)newQueues.get(B));
  assertEquals(b.calculateAndGetAMResourceLimit(),Resources.createResource(320 * GB,1));
}
