@Test public void testUserSpecificUserLimits() throws Exception {
  LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
  csConf.setUserLimit(a.getQueuePath(),50);
  csConf.setFloat("yarn.scheduler.capacity." + a.getQueuePath() + ".user-settings.user_0."+ CapacitySchedulerConfiguration.USER_WEIGHT,1.5f);
  when(csContext.getClusterResource()).thenReturn(Resources.createResource(16 * GB,32));
  Assert.assertNull(a.getUserWeights().get("user_0"));
  a.reinitialize(a,csContext.getClusterResource());
  assertEquals(1.5,a.getUserWeights().get("user_0").floatValue(),0.0);
  a.setMaxCapacity(1.0f);
  a.setUserLimit(50);
  a.setUserLimitFactor(2);
  final String user_0="user_0";
  final String user_1="user_1";
  a.getUsersManager().getUserAndAddIfAbsent(user_0).setWeight(1.5f);
  final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,a.getAbstractUsersManager(),spyRMContext);
  a.submitApplicationAttempt(app_0,user_0);
  final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
  FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_1,a,a.getAbstractUsersManager(),spyRMContext);
  a.submitApplicationAttempt(app_1,user_1);
  String host_0="127.0.0.1";
  FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,8 * GB);
  String host_1="127.0.0.2";
  FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,DEFAULT_RACK,0,8 * GB);
  final int numNodes=2;
  Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
  Priority priority=TestUtils.createMockPriority(1);
  app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,4 * GB,3,true,priority,recordFactory)));
  app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
  Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app_0.getApplicationAttemptId(),app_0,app_1.getApplicationAttemptId(),app_1);
  Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node_0.getNodeID(),node_0,node_1.getNodeID(),node_1);
  assertEquals(2,a.getAbstractUsersManager().getNumActiveUsers());
  applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
  assertEquals(4 * GB,a.getUsedResources().getMemorySize());
  assertEquals(4 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
  applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
  assertEquals(8 * GB,a.getUsedResources().getMemorySize());
  assertEquals(8 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
  applyCSAssignment(clusterResource,a.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY),a,nodes,apps);
  assertEquals(9 * GB,a.getUsedResources().getMemorySize());
  assertEquals(8 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(4 * GB,app_0.getTotalPendingRequestsPerPartition().get("").getMemorySize());
  assertEquals(1 * GB,app_1.getTotalPendingRequestsPerPartition().get("").getMemorySize());
}
