@Test public void testDRFUserLimits() throws Exception {
  setUpWithDominantResourceCalculator();
  LeafQueue b=stubLeafQueue((LeafQueue)queues.get(B));
  b.setMaxCapacity(1.0f);
  final String user0="user_0";
  final String user1="user_1";
  final ApplicationAttemptId appAttemptId0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app0=new FiCaSchedulerApp(appAttemptId0,user0,b,b.getAbstractUsersManager(),spyRMContext);
  b.submitApplicationAttempt(app0,user0);
  final ApplicationAttemptId appAttemptId2=TestUtils.getMockApplicationAttemptId(2,0);
  FiCaSchedulerApp app2=new FiCaSchedulerApp(appAttemptId2,user1,b,b.getAbstractUsersManager(),spyRMContext);
  b.submitApplicationAttempt(app2,user1);
  String host0="127.0.0.1";
  FiCaSchedulerNode node0=TestUtils.getMockNode(host0,DEFAULT_RACK,0,8 * GB,100);
  String host1="127.0.0.2";
  FiCaSchedulerNode node1=TestUtils.getMockNode(host1,DEFAULT_RACK,0,8 * GB,100);
  Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node0.getNodeID(),node0,node1.getNodeID(),node1);
  Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app0.getApplicationAttemptId(),app0,app2.getApplicationAttemptId(),app2);
  int numNodes=2;
  Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 100);
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  when(csContext.getClusterResource()).thenReturn(clusterResource);
  root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
  Priority priority=TestUtils.createMockPriority(1);
  app0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,40,10,true,priority,recordFactory,NO_LABEL)));
  app2.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,10,10,true,priority,recordFactory,NO_LABEL)));
  b.setUserLimit(50);
  b.setUserLimitFactor(2);
  User queueUser0=b.getUser(user0);
  User queueUser1=b.getUser(user1);
  assertEquals("There should 2 active users!",2,b.getAbstractUsersManager().getNumActiveUsers());
  CSAssignment assign;
  do {
    assign=b.assignContainers(clusterResource,node0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    LOG.info(assign.toString());
    applyCSAssignment(clusterResource,assign,b,nodes,apps);
  }
 while (assign.getResource().getMemorySize() > 0 && assign.getAssignmentInformation().getNumReservations() == 0);
  do {
    assign=b.assignContainers(clusterResource,node1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    applyCSAssignment(clusterResource,assign,b,nodes,apps);
  }
 while (assign.getResource().getMemorySize() > 0 && assign.getAssignmentInformation().getNumReservations() == 0);
  assertTrue("Verify user_0 got resources ",queueUser0.getUsed().getMemorySize() > 0);
  assertTrue("Verify user_1 got resources ",queueUser1.getUsed().getMemorySize() > 0);
  assertTrue("Expected AbsoluteUsedCapacity > 0.95, got: " + b.getAbsoluteUsedCapacity(),b.getAbsoluteUsedCapacity() > 0.95);
  float expectedRatio=queueUser0.getUsed().getVirtualCores() / (numNodes * 100.0f) + queueUser1.getUsed().getMemorySize() / (numNodes * 8.0f * GB);
  assertEquals(expectedRatio,b.getUsersManager().getUsageRatio(""),0.001);
  numNodes=3;
  clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 100);
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
  expectedRatio=queueUser0.getUsed().getVirtualCores() / (numNodes * 100.0f) + queueUser1.getUsed().getMemorySize() / (numNodes * 8.0f * GB);
  assertEquals(expectedRatio,b.getUsersManager().getUsageRatio(""),0.001);
}
