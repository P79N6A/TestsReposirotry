@Test public void testRackLocalityDelayScheduling() throws Exception {
  csConf.setInt(CapacitySchedulerConfiguration.NODE_LOCALITY_DELAY,2);
  csConf.setInt(CapacitySchedulerConfiguration.RACK_LOCALITY_ADDITIONAL_DELAY,1);
  Map<String,CSQueue> newQueues=new HashMap<String,CSQueue>();
  CSQueue newRoot=CapacitySchedulerQueueManager.parseQueue(csContext,csConf,null,ROOT,newQueues,queues,TestUtils.spyHook);
  root.reinitialize(newRoot,cs.getClusterResource());
  LeafQueue a=stubLeafQueue((LeafQueue)newQueues.get(B));
  assertEquals(2,a.getNodeLocalityDelay());
  assertEquals(1,a.getRackLocalityAdditionalDelay());
  String user1="user_1";
  final ApplicationAttemptId appAttemptId1=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app1=new FiCaSchedulerApp(appAttemptId1,user1,a,mock(ActiveUsersManager.class),spyRMContext);
  a.submitApplicationAttempt(app1,user1);
  String host1="127.0.0.1";
  String host2="127.0.0.2";
  String host3="127.0.0.3";
  String host4="127.0.0.4";
  String rack1="rack_1";
  String rack2="rack_2";
  String rack3="rack_3";
  FiCaSchedulerNode node2=TestUtils.getMockNode(host3,rack2,0,8 * GB);
  FiCaSchedulerNode node3=TestUtils.getMockNode(host4,rack3,0,8 * GB);
  Map<ApplicationAttemptId,FiCaSchedulerApp> apps=ImmutableMap.of(app1.getApplicationAttemptId(),app1);
  Map<NodeId,FiCaSchedulerNode> nodes=ImmutableMap.of(node2.getNodeID(),node2,node3.getNodeID(),node3);
  final int numNodes=5;
  Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
  when(spyRMContext.getScheduler().getNumClusterNodes()).thenReturn(numNodes);
  newRoot.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
  Priority priority=TestUtils.createMockPriority(1);
  List<ResourceRequest> app1Requests1=new ArrayList<ResourceRequest>();
  app1Requests1.add(TestUtils.createResourceRequest(host1,1 * GB,1,true,priority,recordFactory));
  app1Requests1.add(TestUtils.createResourceRequest(rack1,1 * GB,1,true,priority,recordFactory));
  app1Requests1.add(TestUtils.createResourceRequest(host2,1 * GB,1,true,priority,recordFactory));
  app1Requests1.add(TestUtils.createResourceRequest(rack2,1 * GB,1,true,priority,recordFactory));
  app1Requests1.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,3,true,priority,recordFactory));
  app1.updateResourceRequests(app1Requests1);
  CSAssignment assignment=null;
  SchedulerRequestKey schedulerKey=toSchedulerKey(priority);
  assertEquals(3,app1.getOutstandingAsksCount(schedulerKey));
  assignment=a.assignContainers(clusterResource,node2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  applyCSAssignment(clusterResource,assignment,a,nodes,apps);
  verifyNoContainerAllocated(assignment);
  assertEquals(1,app1.getSchedulingOpportunities(schedulerKey));
  assertEquals(3,app1.getOutstandingAsksCount(schedulerKey));
  assertEquals(NodeType.NODE_LOCAL,assignment.getType());
  assignment=a.assignContainers(clusterResource,node2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  applyCSAssignment(clusterResource,assignment,a,nodes,apps);
  assertEquals(2,app1.getSchedulingOpportunities(schedulerKey));
  assertEquals(3,app1.getOutstandingAsksCount(schedulerKey));
  assertEquals(NodeType.NODE_LOCAL,assignment.getType());
  assignment=a.assignContainers(clusterResource,node2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  applyCSAssignment(clusterResource,assignment,a,nodes,apps);
  assertEquals(0,app1.getSchedulingOpportunities(schedulerKey));
  assertEquals(2,app1.getOutstandingAsksCount(schedulerKey));
  assertEquals(NodeType.RACK_LOCAL,assignment.getType());
  a.assignContainers(clusterResource,node3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  applyCSAssignment(clusterResource,assignment,a,nodes,apps);
  a.assignContainers(clusterResource,node3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  applyCSAssignment(clusterResource,assignment,a,nodes,apps);
  assignment=a.assignContainers(clusterResource,node3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  applyCSAssignment(clusterResource,assignment,a,nodes,apps);
  assertEquals(3,app1.getSchedulingOpportunities(schedulerKey));
  assertEquals(2,app1.getOutstandingAsksCount(schedulerKey));
  assertEquals(NodeType.NODE_LOCAL,assignment.getType());
  assignment=a.assignContainers(clusterResource,node3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  applyCSAssignment(clusterResource,assignment,a,nodes,apps);
  assertEquals(4,app1.getSchedulingOpportunities(schedulerKey));
  assertEquals(1,app1.getOutstandingAsksCount(schedulerKey));
  assertEquals(NodeType.OFF_SWITCH,assignment.getType());
  doReturn(10).when(a).getRackLocalityAdditionalDelay();
  assignment=a.assignContainers(clusterResource,node3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  applyCSAssignment(clusterResource,assignment,a,nodes,apps);
  assertEquals(5,app1.getSchedulingOpportunities(schedulerKey));
  assertEquals(1,app1.getOutstandingAsksCount(schedulerKey));
  assertEquals(NodeType.NODE_LOCAL,assignment.getType());
  assignment=a.assignContainers(clusterResource,node3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  applyCSAssignment(clusterResource,assignment,a,nodes,apps);
  assertEquals(6,app1.getSchedulingOpportunities(schedulerKey));
  assertEquals(0,app1.getOutstandingAsksCount(schedulerKey));
  assertEquals(NodeType.OFF_SWITCH,assignment.getType());
}
