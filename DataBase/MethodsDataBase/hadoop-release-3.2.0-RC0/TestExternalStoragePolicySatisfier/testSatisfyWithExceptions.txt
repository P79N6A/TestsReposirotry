/** 
 * Tests to verify hdfsAdmin.satisfyStoragePolicy exceptions.
 * @throws Exception
 */
@Test(timeout=300000) public void testSatisfyWithExceptions() throws Exception {
  try {
    createCluster();
    final String nonExistingFile="/noneExistingFile";
    hdfsCluster.getConfiguration(0).setBoolean(DFSConfigKeys.DFS_STORAGE_POLICY_ENABLED_KEY,false);
    restartNamenode();
    HdfsAdmin hdfsAdmin=new HdfsAdmin(FileSystem.getDefaultUri(config),config);
    try {
      hdfsAdmin.satisfyStoragePolicy(new Path(FILE));
      Assert.fail(String.format("Should failed to satisfy storage policy " + "for %s since %s is set to false.",FILE,DFS_STORAGE_POLICY_ENABLED_KEY));
    }
 catch (    IOException e) {
      GenericTestUtils.assertExceptionContains(String.format("Failed to satisfy storage policy since %s is set to false.",DFS_STORAGE_POLICY_ENABLED_KEY),e);
    }
    hdfsCluster.getConfiguration(0).setBoolean(DFSConfigKeys.DFS_STORAGE_POLICY_ENABLED_KEY,true);
    restartNamenode();
    hdfsAdmin=new HdfsAdmin(FileSystem.getDefaultUri(config),config);
    try {
      hdfsAdmin.satisfyStoragePolicy(new Path(nonExistingFile));
      Assert.fail("Should throw FileNotFoundException for " + nonExistingFile);
    }
 catch (    FileNotFoundException e) {
    }
    try {
      hdfsAdmin.satisfyStoragePolicy(new Path(FILE));
      hdfsAdmin.satisfyStoragePolicy(new Path(FILE));
    }
 catch (    Exception e) {
      Assert.fail(String.format("Allow to invoke mutlipe times " + "#satisfyStoragePolicy() api for a path %s , internally just " + "skipping addtion to satisfy movement queue.",FILE));
    }
  }
  finally {
    shutdownCluster();
  }
}
