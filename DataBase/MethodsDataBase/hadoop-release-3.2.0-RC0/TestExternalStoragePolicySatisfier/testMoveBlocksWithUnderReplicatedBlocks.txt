/** 
 * Test storage move blocks while under replication block tasks exists in the system. So, both will share the max transfer streams. 1. Create cluster with 3 datanode. 2. Create 20 files with 2 replica. 3. Start 2 more DNs with DISK & SSD types 4. SetReplication factor for the 1st 10 files to 4 to trigger replica task 5. Set policy to SSD to the 2nd set of files from 11-20 6. Call SPS for 11-20 files to trigger move block tasks to new DNs 7. Wait for the under replica and SPS tasks completion
 */
@Test(timeout=300000) public void testMoveBlocksWithUnderReplicatedBlocks() throws Exception {
  try {
    config.setInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY,3);
    config.setLong("dfs.block.size",DEFAULT_BLOCK_SIZE);
    config.set(DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_RECHECK_TIMEOUT_MILLIS_KEY,"3000");
    config.set(DFSConfigKeys.DFS_STORAGE_POLICY_SATISFIER_SELF_RETRY_TIMEOUT_MILLIS_KEY,"5000");
    StorageType[][] storagetypes=new StorageType[][]{{StorageType.ARCHIVE,StorageType.DISK},{StorageType.ARCHIVE,StorageType.DISK}};
    hdfsCluster=startCluster(config,storagetypes,2,2,CAPACITY);
    hdfsCluster.waitActive();
    dfs=hdfsCluster.getFileSystem();
    for (int i=1; i <= 20; i++) {
      Path filePath=new Path("/file" + i);
      DFSTestUtil.createFile(dfs,filePath,DEFAULT_BLOCK_SIZE * 5,(short)2,0);
    }
    StorageType[][] newtypes=new StorageType[][]{{StorageType.DISK,StorageType.SSD},{StorageType.DISK,StorageType.SSD}};
    startAdditionalDNs(config,2,NUM_OF_DATANODES,newtypes,STORAGES_PER_DATANODE,CAPACITY,hdfsCluster);
    for (int i=1; i <= 10; i++) {
      Path filePath=new Path("/file" + i);
      dfs.setReplication(filePath,(short)4);
    }
    for (int i=11; i <= 20; i++) {
      Path filePath=new Path("/file" + i);
      dfs.setStoragePolicy(filePath,"ALL_SSD");
      dfs.satisfyStoragePolicy(filePath);
    }
    for (int i=1; i <= 10; i++) {
      Path filePath=new Path("/file" + i);
      DFSTestUtil.waitExpectedStorageType(filePath.toString(),StorageType.DISK,4,60000,hdfsCluster.getFileSystem());
    }
    for (int i=11; i <= 20; i++) {
      Path filePath=new Path("/file" + i);
      DFSTestUtil.waitExpectedStorageType(filePath.toString(),StorageType.SSD,2,30000,hdfsCluster.getFileSystem());
    }
  }
  finally {
    shutdownCluster();
  }
}
