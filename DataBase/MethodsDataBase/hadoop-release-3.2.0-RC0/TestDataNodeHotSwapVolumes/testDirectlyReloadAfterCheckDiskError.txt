/** 
 * Verify that  {@link DataNode#checkDiskError()} removes all metadata inDataNode upon a volume failure. Thus we can run reconfig on the same configuration to reload the new volume on the same directory as the failed one.
 */
@Test(timeout=60000) public void testDirectlyReloadAfterCheckDiskError() throws Exception {
  assumeNotWindows();
  startDFSCluster(1,2);
  createFile(new Path("/test"),32,(short)2);
  DataNode dn=cluster.getDataNodes().get(0);
  final String oldDataDir=dn.getConf().get(DFS_DATANODE_DATA_DIR_KEY);
  File dirToFail=cluster.getInstanceStorageDir(0,0);
  FsVolumeImpl failedVolume=DataNodeTestUtils.getVolume(dn,dirToFail);
  assertTrue("No FsVolume was found for " + dirToFail,failedVolume != null);
  long used=failedVolume.getDfsUsed();
  DataNodeTestUtils.injectDataDirFailure(dirToFail);
  DataNodeTestUtils.waitForDiskError(dn,failedVolume);
  createFile(new Path("/test1"),32,(short)2);
  assertEquals(used,failedVolume.getDfsUsed());
  DataNodeTestUtils.restoreDataDirFromFailure(dirToFail);
  LOG.info("reconfiguring DN ");
  assertThat("DN did not update its own config",dn.reconfigurePropertyImpl(DFS_DATANODE_DATA_DIR_KEY,oldDataDir),is(dn.getConf().get(DFS_DATANODE_DATA_DIR_KEY)));
  createFile(new Path("/test2"),32,(short)2);
  FsVolumeImpl restoredVolume=DataNodeTestUtils.getVolume(dn,dirToFail);
  assertTrue(restoredVolume != null);
  assertTrue(restoredVolume != failedVolume);
  assertTrue(restoredVolume.getDfsUsed() > used);
}
