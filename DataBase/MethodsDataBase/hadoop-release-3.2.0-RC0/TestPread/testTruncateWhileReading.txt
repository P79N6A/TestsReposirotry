@Test public void testTruncateWhileReading() throws Exception {
  Path path=new Path("/testfile");
  final int blockSize=512;
  Configuration conf=new Configuration();
  conf.setLong(HdfsClientConfigKeys.Read.PREFETCH_SIZE_KEY,blockSize);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  try {
    DistributedFileSystem fs=cluster.getFileSystem();
    FSDataOutputStream dos=fs.create(path,true,blockSize,(short)1,blockSize);
    dos.write(new byte[blockSize * 3]);
    dos.close();
    final FSDataInputStream dis=fs.open(path);
    while (!fs.truncate(path,10)) {
      Thread.sleep(10);
    }
    ExecutorService executor=Executors.newFixedThreadPool(1);
    Future<?> future=executor.submit(new Callable<Void>(){
      @Override public Void call() throws IOException {
        dis.readFully(blockSize,new byte[4]);
        return null;
      }
    }
);
    try {
      future.get(4,TimeUnit.SECONDS);
      Assert.fail();
    }
 catch (    ExecutionException ee) {
      assertTrue(ee.toString(),ee.getCause() instanceof EOFException);
    }
 finally {
      future.cancel(true);
      executor.shutdown();
    }
  }
  finally {
    cluster.shutdown();
  }
}
