@Test public void testComponentRestartPolicy(){
  Map<String,Component> allComponents=new HashMap<>();
  Service mockService=mock(Service.class);
  ServiceContext serviceContext=mock(ServiceContext.class);
  when(serviceContext.getService()).thenReturn(mockService);
  ServiceScheduler serviceSchedulerInstance=new ServiceScheduler(serviceContext);
  ServiceScheduler serviceScheduler=spy(serviceSchedulerInstance);
  when(serviceScheduler.getAllComponents()).thenReturn(allComponents);
  Mockito.doNothing().when(serviceScheduler).setGracefulStop(any(FinalApplicationStatus.class));
  final String containerDiag="Container succeeded";
  ComponentInstanceEvent componentInstanceEvent=mock(ComponentInstanceEvent.class);
  ContainerId containerId=ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1234L,1),1),1);
  ContainerStatus containerStatus=ContainerStatus.newInstance(containerId,org.apache.hadoop.yarn.api.records.ContainerState.COMPLETE,containerDiag,0);
  when(componentInstanceEvent.getStatus()).thenReturn(containerStatus);
  Component comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ALWAYS,1,0,1,0);
  ComponentInstance componentInstance=comp.getAllComponentInstances().iterator().next();
  ComponentInstance.handleComponentInstanceRelaunch(componentInstance,componentInstanceEvent,false,containerDiag);
  verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
  verify(comp,never()).markAsFailed(any(ComponentInstance.class));
  verify(comp,times(1)).reInsertPendingInstance(any(ComponentInstance.class));
  verify(serviceScheduler.getTerminationHandler(),never()).terminate(anyInt());
  comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ALWAYS,0,1,1,0);
  componentInstance=comp.getAllComponentInstances().iterator().next();
  containerStatus.setExitStatus(1);
  ComponentInstance.handleComponentInstanceRelaunch(componentInstance,componentInstanceEvent,false,containerDiag);
  verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
  verify(comp,never()).markAsFailed(any(ComponentInstance.class));
  verify(comp,times(1)).reInsertPendingInstance(any(ComponentInstance.class));
  verify(serviceScheduler.getTerminationHandler(),never()).terminate(anyInt());
  comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,1,0,1,0);
  componentInstance=comp.getAllComponentInstances().iterator().next();
  containerStatus.setExitStatus(0);
  Map<String,ComponentInstance> succeededInstances=new HashMap<>();
  succeededInstances.put(componentInstance.getCompInstanceName(),componentInstance);
  when(comp.getSucceededInstances()).thenReturn(succeededInstances.values());
  when(comp.getNumSucceededInstances()).thenReturn(new Long(1));
  ComponentInstance.handleComponentInstanceRelaunch(componentInstance,componentInstanceEvent,false,containerDiag);
  verify(comp,times(1)).markAsSucceeded(any(ComponentInstance.class));
  verify(comp,never()).markAsFailed(any(ComponentInstance.class));
  verify(comp,times(0)).reInsertPendingInstance(any(ComponentInstance.class));
  verify(serviceScheduler.getTerminationHandler(),times(1)).terminate(eq(0));
  comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,0,1,1,0);
  componentInstance=comp.getAllComponentInstances().iterator().next();
  containerStatus.setExitStatus(-1);
  when(comp.getNumFailedInstances()).thenReturn(new Long(1));
  ComponentInstance.handleComponentInstanceRelaunch(componentInstance,componentInstanceEvent,false,containerDiag);
  verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
  verify(comp,times(1)).markAsFailed(any(ComponentInstance.class));
  verify(comp,times(0)).reInsertPendingInstance(any(ComponentInstance.class));
  verify(serviceScheduler.getTerminationHandler(),times(1)).terminate(eq(-1));
  comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ON_FAILURE,0,1,1,0);
  componentInstance=comp.getAllComponentInstances().iterator().next();
  containerStatus.setExitStatus(1);
  ComponentInstance.handleComponentInstanceRelaunch(componentInstance,componentInstanceEvent,false,containerDiag);
  verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
  verify(comp,never()).markAsFailed(any(ComponentInstance.class));
  verify(comp,times(1)).reInsertPendingInstance(any(ComponentInstance.class));
  verify(serviceScheduler.getTerminationHandler(),times(0)).terminate(anyInt());
  comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,0,1,3,0);
  componentInstance=comp.getAllComponentInstances().iterator().next();
  containerStatus.setExitStatus(1);
  ComponentInstance.handleComponentInstanceRelaunch(componentInstance,componentInstanceEvent,false,containerDiag);
  verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
  verify(comp,times(1)).markAsFailed(any(ComponentInstance.class));
  verify(comp,times(0)).reInsertPendingInstance(any(ComponentInstance.class));
  verify(serviceScheduler.getTerminationHandler(),times(0)).terminate(anyInt());
  comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ON_FAILURE,0,1,3,0);
  Iterator<ComponentInstance> iter=comp.getAllComponentInstances().iterator();
  containerStatus.setExitStatus(1);
  ComponentInstance commponentInstance=iter.next();
  ComponentInstance.handleComponentInstanceRelaunch(commponentInstance,componentInstanceEvent,false,containerDiag);
  verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
  verify(comp,never()).markAsFailed(any(ComponentInstance.class));
  verify(comp,times(1)).reInsertPendingInstance(any(ComponentInstance.class));
  verify(serviceScheduler.getTerminationHandler(),times(0)).terminate(anyInt());
  comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,2,0);
  Collection<ComponentInstance> component1Instances=comp.getAllComponentInstances();
  containerStatus.setExitStatus(-1);
  Component comp2=createComponent(componentInstance.getComponent().getScheduler(),org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,2,1);
  Collection<ComponentInstance> component2Instances=comp2.getAllComponentInstances();
  Map<String,ComponentInstance> failed2Instances=new HashMap<>();
  for (  ComponentInstance component2Instance : component2Instances) {
    failed2Instances.put(component2Instance.getCompInstanceName(),component2Instance);
    when(component2Instance.getComponent().getFailedInstances()).thenReturn(failed2Instances.values());
    when(component2Instance.getComponent().getNumFailedInstances()).thenReturn(new Long(failed2Instances.size()));
    ComponentInstance.handleComponentInstanceRelaunch(component2Instance,componentInstanceEvent,false,containerDiag);
  }
  Map<String,ComponentInstance> failed1Instances=new HashMap<>();
  for (  ComponentInstance component1Instance : component1Instances) {
    failed1Instances.put(component1Instance.getCompInstanceName(),component1Instance);
    when(component1Instance.getComponent().getFailedInstances()).thenReturn(failed1Instances.values());
    when(component1Instance.getComponent().getNumFailedInstances()).thenReturn(new Long(failed1Instances.size()));
    ComponentInstance.handleComponentInstanceRelaunch(component1Instance,componentInstanceEvent,false,containerDiag);
  }
  verify(comp,never()).markAsSucceeded(any(ComponentInstance.class));
  verify(comp,times(2)).markAsFailed(any(ComponentInstance.class));
  verify(comp,times(0)).reInsertPendingInstance(any(ComponentInstance.class));
  verify(serviceScheduler.getTerminationHandler(),times(1)).terminate(eq(-1));
  containerStatus.setExitStatus(0);
  comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ON_FAILURE,2,0);
  component1Instances=comp.getAllComponentInstances();
  comp2=createComponent(componentInstance.getComponent().getScheduler(),org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ON_FAILURE,2,1);
  component2Instances=comp2.getAllComponentInstances();
  Map<String,ComponentInstance> succeeded2Instances=new HashMap<>();
  for (  ComponentInstance component2Instance : component2Instances) {
    succeeded2Instances.put(component2Instance.getCompInstanceName(),component2Instance);
    when(component2Instance.getComponent().getSucceededInstances()).thenReturn(succeeded2Instances.values());
    when(component2Instance.getComponent().getNumSucceededInstances()).thenReturn(new Long(succeeded2Instances.size()));
    ComponentInstance.handleComponentInstanceRelaunch(component2Instance,componentInstanceEvent,false,containerDiag);
  }
  Map<String,ComponentInstance> succeeded1Instances=new HashMap<>();
  for (  ComponentInstance component1Instance : component1Instances) {
    succeeded1Instances.put(component1Instance.getCompInstanceName(),component1Instance);
    when(component1Instance.getComponent().getSucceededInstances()).thenReturn(succeeded1Instances.values());
    when(component1Instance.getComponent().getNumSucceededInstances()).thenReturn(new Long(succeeded1Instances.size()));
    ComponentInstance.handleComponentInstanceRelaunch(component1Instance,componentInstanceEvent,false,containerDiag);
  }
  verify(comp,times(2)).markAsSucceeded(any(ComponentInstance.class));
  verify(comp,never()).markAsFailed(any(ComponentInstance.class));
  verify(componentInstance.getComponent(),times(0)).reInsertPendingInstance(any(ComponentInstance.class));
  verify(serviceScheduler.getTerminationHandler(),times(1)).terminate(eq(0));
  comp=createComponent(serviceScheduler,org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,2,0);
  component1Instances=comp.getAllComponentInstances();
  comp2=createComponent(componentInstance.getComponent().getScheduler(),org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER,2,1);
  component2Instances=comp2.getAllComponentInstances();
  for (  ComponentInstance component2Instance : component2Instances) {
    ComponentInstance.handleComponentInstanceRelaunch(component2Instance,componentInstanceEvent,false,containerDiag);
  }
  succeeded1Instances=new HashMap<>();
  for (  ComponentInstance component1Instance : component1Instances) {
    succeeded1Instances.put(component1Instance.getCompInstanceName(),component1Instance);
    when(component1Instance.getComponent().getSucceededInstances()).thenReturn(succeeded1Instances.values());
    ComponentInstance.handleComponentInstanceRelaunch(component1Instance,componentInstanceEvent,false,containerDiag);
  }
  verify(comp,times(2)).markAsSucceeded(any(ComponentInstance.class));
  verify(comp,never()).markAsFailed(any(ComponentInstance.class));
  verify(componentInstance.getComponent(),times(0)).reInsertPendingInstance(any(ComponentInstance.class));
  verify(serviceScheduler.getTerminationHandler(),never()).terminate(eq(0));
}
