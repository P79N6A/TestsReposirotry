@Test public void testSubClusterHeartbeatRequest(){
  try {
    SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterId,lastHeartBeat,stateLost,capability);
    FederationMembershipStateStoreInputValidator.validate(request);
  }
 catch (  FederationStateStoreInvalidInputException e) {
    Assert.fail(e.getMessage());
  }
  try {
    SubClusterHeartbeatRequest request=null;
    FederationMembershipStateStoreInputValidator.validate(request);
    Assert.fail();
  }
 catch (  FederationStateStoreInvalidInputException e) {
    LOG.info(e.getMessage());
    Assert.assertTrue(e.getMessage().startsWith("Missing SubClusterHeartbeat Request."));
  }
  try {
    SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterIdNull,lastHeartBeat,stateLost,capability);
    FederationMembershipStateStoreInputValidator.validate(request);
    Assert.fail();
  }
 catch (  FederationStateStoreInvalidInputException e) {
    LOG.info(e.getMessage());
    Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster Id information."));
  }
  try {
    SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterIdInvalid,lastHeartBeat,stateLost,capability);
    FederationMembershipStateStoreInputValidator.validate(request);
    Assert.fail();
  }
 catch (  FederationStateStoreInvalidInputException e) {
    LOG.info(e.getMessage());
    Assert.assertTrue(e.getMessage().startsWith("Invalid SubCluster Id information."));
  }
  try {
    SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterId,lastHeartBeat,stateNull,capability);
    FederationMembershipStateStoreInputValidator.validate(request);
    Assert.fail();
  }
 catch (  FederationStateStoreInvalidInputException e) {
    LOG.info(e.getMessage());
    Assert.assertTrue(e.getMessage().startsWith("Missing SubCluster State information."));
  }
  try {
    SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterId,lastHeartBeatNegative,stateLost,capability);
    FederationMembershipStateStoreInputValidator.validate(request);
    Assert.fail();
  }
 catch (  FederationStateStoreInvalidInputException e) {
    LOG.info(e.getMessage());
    Assert.assertTrue(e.getMessage().startsWith("Invalid timestamp information."));
  }
  try {
    SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterId,lastHeartBeat,stateLost,capabilityNull);
    FederationMembershipStateStoreInputValidator.validate(request);
    Assert.fail();
  }
 catch (  FederationStateStoreInvalidInputException e) {
    LOG.info(e.getMessage());
    Assert.assertTrue(e.getMessage().startsWith("Invalid capability information."));
  }
  try {
    SubClusterHeartbeatRequest request=SubClusterHeartbeatRequest.newInstance(subClusterId,lastHeartBeat,stateLost,capabilityEmpty);
    FederationMembershipStateStoreInputValidator.validate(request);
    Assert.fail();
  }
 catch (  FederationStateStoreInvalidInputException e) {
    LOG.info(e.getMessage());
    Assert.assertTrue(e.getMessage().startsWith("Invalid capability information."));
  }
}
