@Test(timeout=30000) public void testReducerRampdownDiagnostics() throws Exception {
  LOG.info("Running tesReducerRampdownDiagnostics");
  final Configuration conf=new Configuration();
  conf.setFloat(MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART,0.0f);
  final MyResourceManager rm=new MyResourceManager(conf);
  rm.start();
  final RMApp app=rm.submitApp(1024);
  rm.drainEvents();
  final String host="host1";
  final MockNM nm=rm.registerNode(String.format("%s:1234",host),2048);
  nm.nodeHeartbeat(true);
  rm.drainEvents();
  final ApplicationAttemptId appAttemptId=app.getCurrentAppAttempt().getAppAttemptId();
  rm.sendAMLaunched(appAttemptId);
  rm.drainEvents();
  final JobId jobId=MRBuilderUtils.newJobId(appAttemptId.getApplicationId(),0);
  final Job mockJob=mock(Job.class);
  when(mockJob.getReport()).thenReturn(MRBuilderUtils.newJobReport(jobId,"job","user",JobState.RUNNING,0,0,0,0,0,0,0,"jobfile",null,false,""));
  final MyContainerAllocator allocator=new MyContainerAllocator(rm,conf,appAttemptId,mockJob,SystemClock.getInstance());
  rm.drainEvents();
  final String[] locations=new String[]{host};
  allocator.sendRequest(createRequest(jobId,0,Resource.newInstance(1024,1),locations,false,true));
  for (int i=0; i < 1; ) {
    rm.drainEvents();
    i+=allocator.schedule().size();
    nm.nodeHeartbeat(true);
  }
  allocator.sendRequest(createRequest(jobId,0,Resource.newInstance(1024,1),locations,true,false));
  while (allocator.getTaskAttemptKillEvents().size() == 0) {
    rm.drainEvents();
    allocator.schedule().size();
    nm.nodeHeartbeat(true);
  }
  final String killEventMessage=allocator.getTaskAttemptKillEvents().get(0).getMessage();
  Assert.assertTrue("No reducer rampDown preemption message",killEventMessage.contains(RMContainerAllocator.RAMPDOWN_DIAGNOSTIC));
}
