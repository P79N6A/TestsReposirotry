@Test public void testDeletionTaskStorage() throws IOException {
  RecoveredDeletionServiceState state=stateStore.loadDeletionServiceState();
  List<DeletionServiceDeleteTaskProto> deleteTaskProtos=loadDeletionTaskProtos(state.getIterator());
  assertTrue(deleteTaskProtos.isEmpty());
  DeletionServiceDeleteTaskProto proto=DeletionServiceDeleteTaskProto.newBuilder().setId(7).setUser("someuser").setSubdir("some/subdir").addBasedirs("some/dir/path").addBasedirs("some/other/dir/path").setDeletionTime(123456L).addSuccessorIds(8).addSuccessorIds(9).build();
  stateStore.storeDeletionTask(proto.getId(),proto);
  restartStateStore();
  state=stateStore.loadDeletionServiceState();
  deleteTaskProtos=loadDeletionTaskProtos(state.getIterator());
  assertEquals(1,deleteTaskProtos.size());
  assertEquals(proto,deleteTaskProtos.get(0));
  DeletionServiceDeleteTaskProto proto2=DeletionServiceDeleteTaskProto.newBuilder().setId(8).setUser("user2").setSubdir("subdir2").setDeletionTime(789L).build();
  stateStore.storeDeletionTask(proto2.getId(),proto2);
  restartStateStore();
  state=stateStore.loadDeletionServiceState();
  deleteTaskProtos=loadDeletionTaskProtos(state.getIterator());
  assertEquals(2,deleteTaskProtos.size());
  assertTrue(deleteTaskProtos.contains(proto));
  assertTrue(deleteTaskProtos.contains(proto2));
  stateStore.removeDeletionTask(proto2.getId());
  restartStateStore();
  state=stateStore.loadDeletionServiceState();
  deleteTaskProtos=loadDeletionTaskProtos(state.getIterator());
  assertEquals(1,deleteTaskProtos.size());
  assertEquals(proto,deleteTaskProtos.get(0));
  stateStore.removeDeletionTask(proto.getId());
  restartStateStore();
  state=stateStore.loadDeletionServiceState();
  deleteTaskProtos=loadDeletionTaskProtos(state.getIterator());
  assertTrue(deleteTaskProtos.isEmpty());
}
