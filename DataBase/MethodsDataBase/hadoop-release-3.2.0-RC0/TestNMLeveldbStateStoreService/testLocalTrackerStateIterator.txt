@Test public void testLocalTrackerStateIterator() throws IOException {
  String user1="somebody";
  ApplicationId appId1=ApplicationId.newInstance(1,1);
  ApplicationId appId2=ApplicationId.newInstance(2,2);
  String user2="someone";
  ApplicationId appId3=ApplicationId.newInstance(3,3);
  Path appRsrcPath1=new Path("hdfs://some/app/resource1");
  LocalResourcePBImpl rsrcPb1=(LocalResourcePBImpl)LocalResource.newInstance(URL.fromPath(appRsrcPath1),LocalResourceType.ARCHIVE,LocalResourceVisibility.APPLICATION,123L,456L);
  LocalResourceProto appRsrcProto1=rsrcPb1.getProto();
  Path appRsrcLocalPath1=new Path("/some/local/dir/for/apprsrc1");
  Path appRsrcPath2=new Path("hdfs://some/app/resource2");
  LocalResourcePBImpl rsrcPb2=(LocalResourcePBImpl)LocalResource.newInstance(URL.fromPath(appRsrcPath2),LocalResourceType.ARCHIVE,LocalResourceVisibility.APPLICATION,123L,456L);
  LocalResourceProto appRsrcProto2=rsrcPb2.getProto();
  Path appRsrcLocalPath2=new Path("/some/local/dir/for/apprsrc2");
  Path appRsrcPath3=new Path("hdfs://some/app/resource3");
  LocalResourcePBImpl rsrcPb3=(LocalResourcePBImpl)LocalResource.newInstance(URL.fromPath(appRsrcPath3),LocalResourceType.ARCHIVE,LocalResourceVisibility.APPLICATION,123L,456L);
  LocalResourceProto appRsrcProto3=rsrcPb3.getProto();
  Path appRsrcLocalPath3=new Path("/some/local/dir/for/apprsrc2");
  stateStore.startResourceLocalization(user1,appId1,appRsrcProto1,appRsrcLocalPath1);
  stateStore.startResourceLocalization(user1,appId2,appRsrcProto2,appRsrcLocalPath2);
  stateStore.startResourceLocalization(user2,appId3,appRsrcProto3,appRsrcLocalPath3);
  LocalizedResourceProto appLocalizedProto1=LocalizedResourceProto.newBuilder().setResource(appRsrcProto1).setLocalPath(appRsrcLocalPath1.toString()).setSize(1234567L).build();
  LocalizedResourceProto appLocalizedProto2=LocalizedResourceProto.newBuilder().setResource(appRsrcProto2).setLocalPath(appRsrcLocalPath2.toString()).setSize(1234567L).build();
  LocalizedResourceProto appLocalizedProto3=LocalizedResourceProto.newBuilder().setResource(appRsrcProto3).setLocalPath(appRsrcLocalPath3.toString()).setSize(1234567L).build();
  stateStore.finishResourceLocalization(user1,appId1,appLocalizedProto1);
  stateStore.finishResourceLocalization(user1,appId2,appLocalizedProto2);
  stateStore.finishResourceLocalization(user2,appId3,appLocalizedProto3);
  List<LocalizedResourceProto> completedResources=new ArrayList<LocalizedResourceProto>();
  Map<LocalResourceProto,Path> startedResources=new HashMap<LocalResourceProto,Path>();
  restartStateStore();
  RecoveredLocalizationState state=stateStore.loadLocalizationState();
  Map<String,RecoveredUserResources> userResources=loadUserResources(state.getIterator());
  assertEquals(2,userResources.size());
  RecoveredUserResources uResource=userResources.get(user1);
  assertEquals(2,uResource.getAppTrackerStates().size());
  LocalResourceTrackerState app1ts=uResource.getAppTrackerStates().get(appId1);
  assertNotNull(app1ts);
  completedResources=loadCompletedResources(app1ts.getCompletedResourcesIterator());
  startedResources=loadStartedResources(app1ts.getStartedResourcesIterator());
  assertTrue(startedResources.isEmpty());
  assertEquals(1,completedResources.size());
  assertEquals(appLocalizedProto1,completedResources.iterator().next());
  LocalResourceTrackerState app2ts=uResource.getAppTrackerStates().get(appId2);
  assertNotNull(app2ts);
  completedResources=loadCompletedResources(app2ts.getCompletedResourcesIterator());
  startedResources=loadStartedResources(app2ts.getStartedResourcesIterator());
  assertTrue(startedResources.isEmpty());
  assertEquals(1,completedResources.size());
  assertEquals(appLocalizedProto2,completedResources.iterator().next());
}
