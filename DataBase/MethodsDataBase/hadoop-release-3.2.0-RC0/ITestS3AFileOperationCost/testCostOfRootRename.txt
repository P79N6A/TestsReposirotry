@Test public void testCostOfRootRename() throws Throwable {
  describe("assert that a root directory rename doesn't" + " do much in terms of parent dir operations");
  S3AFileSystem fs=getFileSystem();
  String uuid=UUID.randomUUID().toString();
  Path src=new Path("/src-" + uuid);
  Path dest=new Path("/dest-" + uuid);
  try {
    MetricDiff deleteRequests=new MetricDiff(fs,Statistic.OBJECT_DELETE_REQUESTS);
    MetricDiff directoriesDeleted=new MetricDiff(fs,Statistic.DIRECTORIES_DELETED);
    MetricDiff fakeDirectoriesDeleted=new MetricDiff(fs,Statistic.FAKE_DIRECTORIES_DELETED);
    MetricDiff directoriesCreated=new MetricDiff(fs,Statistic.DIRECTORIES_CREATED);
    touch(fs,src);
    fs.rename(src,dest);
    Object summary=new Object(){
      @Override public String toString(){
        return String.format("[%s, %s, %s, %s]",directoriesCreated,directoriesDeleted,deleteRequests,fakeDirectoriesDeleted);
      }
    }
;
    String state=String.format("after touch(%s) %s",src,summary);
    touch(fs,src);
    fs.rename(src,dest);
    directoriesCreated.assertDiffEquals(state,0);
    state=String.format("after rename(%s, %s) %s",src,dest,summary);
    directoriesCreated.assertDiffEquals(state,0);
    deleteRequests.assertDiffEquals(state,1);
    directoriesDeleted.assertDiffEquals(state,0);
    fakeDirectoriesDeleted.assertDiffEquals(state,0);
    reset(deleteRequests,directoriesCreated,directoriesDeleted,fakeDirectoriesDeleted);
    fs.delete(dest,false);
    directoriesCreated.assertDiffEquals(state,0);
    deleteRequests.assertDiffEquals(state,1);
    directoriesDeleted.assertDiffEquals(state,0);
    fakeDirectoriesDeleted.assertDiffEquals(state,0);
  }
  finally {
    fs.delete(src,false);
    fs.delete(dest,false);
  }
}
