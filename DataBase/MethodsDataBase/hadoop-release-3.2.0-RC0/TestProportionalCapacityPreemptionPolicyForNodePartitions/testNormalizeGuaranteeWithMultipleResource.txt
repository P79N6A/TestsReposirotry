@Test public void testNormalizeGuaranteeWithMultipleResource() throws IOException {
  Map<String,ResourceInformation> riMap=new HashMap<>();
  String RESOURCE_1="res1";
  ResourceInformation memory=ResourceInformation.newInstance(ResourceInformation.MEMORY_MB.getName(),ResourceInformation.MEMORY_MB.getUnits(),YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB,YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);
  ResourceInformation vcores=ResourceInformation.newInstance(ResourceInformation.VCORES.getName(),ResourceInformation.VCORES.getUnits(),YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);
  riMap.put(ResourceInformation.MEMORY_URI,memory);
  riMap.put(ResourceInformation.VCORES_URI,vcores);
  riMap.put(RESOURCE_1,ResourceInformation.newInstance(RESOURCE_1,"",0,ResourceTypes.COUNTABLE,0,Integer.MAX_VALUE));
  ResourceUtils.initializeResourcesFromResourceInformationMap(riMap);
  String labelsConfig="=100,true;";
  String nodesConfig="n1=;";
  String queuesConfig="root(=[100:100:10 100:100:10 100:100:10 100:100:10]);" + "-a(=[50:80:4 100:100:10 80:90:10 30:20:4]);" + "--a1(=[25:30:2 100:50:10 80:90:10 0]);"+ "--a2(=[25:50:2 100:50:10 0 30:20:4]);"+ "-b(=[50:20:6 100:100:10 20:10 40:50:8]);"+ "--b1(=[25:5:4 100:20:10 0 20:10:4]);"+ "--b2(=[25:15:2 100:20:10 20:10 20:10:4])";
  String appsConfig="a1\t" + "(1,8:9:1,n1,,10,false);" + "b2\t"+ "(1,2:1,n1,,10,false)";
  buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
  policy.editSchedule();
  verify(mDisp,times(7)).handle(argThat(new IsPreemptionRequestFor(getAppAttemptId(1))));
  riMap.remove(RESOURCE_1);
  ResourceUtils.initializeResourcesFromResourceInformationMap(riMap);
}
