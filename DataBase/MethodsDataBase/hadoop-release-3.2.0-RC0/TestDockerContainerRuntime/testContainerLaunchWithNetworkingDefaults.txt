@Test @SuppressWarnings("unchecked") public void testContainerLaunchWithNetworkingDefaults() throws ContainerExecutionException, IOException, PrivilegedOperationException {
  DockerLinuxContainerRuntime runtime=new DockerLinuxContainerRuntime(mockExecutor,mockCGroupsHandler);
  runtime.initialize(conf,nmContext);
  Random randEngine=new Random();
  String disallowedNetwork="sdn" + Integer.toString(randEngine.nextInt());
  try {
    env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_NETWORK,disallowedNetwork);
    runtime.launchContainer(builder.build());
    Assert.fail("Network was expected to be disallowed: " + disallowedNetwork);
  }
 catch (  ContainerExecutionException e) {
    LOG.info("Caught expected exception: " + e);
  }
  String allowedNetwork="bridge";
  env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_NETWORK,allowedNetwork);
  String expectedHostname="test.hostname";
  env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_HOSTNAME,expectedHostname);
  runtime.launchContainer(builder.build());
  PrivilegedOperation op=capturePrivilegedOperationAndVerifyArgs();
  List<String> args=op.getArguments();
  String dockerCommandFile=args.get(11);
  List<String> dockerCommands=Files.readAllLines(Paths.get(dockerCommandFile),Charset.forName("UTF-8"));
  int expected=14;
  int counter=0;
  Assert.assertEquals(expected,dockerCommands.size());
  Assert.assertEquals("[docker-command-execution]",dockerCommands.get(counter++));
  Assert.assertEquals("  cap-add=SYS_CHROOT,NET_BIND_SERVICE",dockerCommands.get(counter++));
  Assert.assertEquals("  cap-drop=ALL",dockerCommands.get(counter++));
  Assert.assertEquals("  detach=true",dockerCommands.get(counter++));
  Assert.assertEquals("  docker-command=run",dockerCommands.get(counter++));
  Assert.assertEquals("  group-add=" + String.join(",",groups),dockerCommands.get(counter++));
  Assert.assertEquals("  hostname=test.hostname",dockerCommands.get(counter++));
  Assert.assertEquals("  image=busybox:latest",dockerCommands.get(counter++));
  Assert.assertEquals("  launch-command=bash,/test_container_work_dir/launch_container.sh",dockerCommands.get(counter++));
  Assert.assertEquals("  mounts=" + "/test_container_log_dir:/test_container_log_dir:rw," + "/test_application_local_dir:/test_application_local_dir:rw,"+ "/test_filecache_dir:/test_filecache_dir:ro,"+ "/test_user_filecache_dir:/test_user_filecache_dir:ro",dockerCommands.get(counter++));
  Assert.assertEquals("  name=container_e11_1518975676334_14532816_01_000001",dockerCommands.get(counter++));
  Assert.assertEquals("  net=" + allowedNetwork,dockerCommands.get(counter++));
  Assert.assertEquals("  user=" + uidGidPair,dockerCommands.get(counter++));
  Assert.assertEquals("  workdir=/test_container_work_dir",dockerCommands.get(counter));
}
