/** 
 * Test for block recovery timeout. All recovery attempts will be delayed and the first attempt will be lost to trigger recovery timeout and retry.
 */
@Test(timeout=300000L) public void testRecoveryTimeout() throws Exception {
  tearDown();
  final Random r=new Random();
  SleepAnswer delayer=new SleepAnswer(3000){
    private final AtomicBoolean callRealMethod=new AtomicBoolean();
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      boolean interrupted=false;
      try {
        Thread.sleep(r.nextInt(3000) + 6000);
      }
 catch (      InterruptedException ie) {
        interrupted=true;
      }
      try {
        if (callRealMethod.get()) {
          return invocation.callRealMethod();
        }
        callRealMethod.set(true);
        return null;
      }
  finally {
        if (interrupted) {
          Thread.currentThread().interrupt();
        }
      }
    }
  }
;
  testRecoveryWithDatanodeDelayed(delayer);
}
