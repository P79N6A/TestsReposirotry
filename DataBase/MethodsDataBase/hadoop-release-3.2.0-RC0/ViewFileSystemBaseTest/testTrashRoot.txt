@Test public void testTrashRoot() throws IOException {
  Path mountDataRootPath=new Path("/data");
  Path fsTargetFilePath=new Path("debug.log");
  Path mountDataFilePath=new Path(mountDataRootPath,fsTargetFilePath);
  Path mountDataNonExistingFilePath=new Path(mountDataRootPath,"no.log");
  fileSystemTestHelper.createFile(fsTarget,fsTargetFilePath);
  Path mountDataRootTrashPath=fsView.getTrashRoot(mountDataRootPath);
  Path mountDataFileTrashPath=fsView.getTrashRoot(mountDataFilePath);
  Path fsTargetRootTrashRoot=fsTarget.getTrashRoot(mountDataRootPath);
  Path fsTargetFileTrashPath=fsTarget.getTrashRoot(mountDataFilePath);
  assertEquals(mountDataRootTrashPath.toUri().getPath(),fsTargetRootTrashRoot.toUri().getPath());
  assertEquals(mountDataFileTrashPath.toUri().getPath(),fsTargetFileTrashPath.toUri().getPath());
  assertEquals(mountDataRootTrashPath.toUri().getPath(),mountDataFileTrashPath.toUri().getPath());
  Path trashRoot=fsView.getTrashRoot(mountDataNonExistingFilePath);
  assertEquals(mountDataRootTrashPath.toUri().getPath(),trashRoot.toUri().getPath());
  Path invalidMountRootPath=new Path("/invalid_mount");
  Path invalidMountFilePath=new Path(invalidMountRootPath,"debug.log");
  try {
    fsView.getTrashRoot(invalidMountRootPath);
    fail("ViewFileSystem getTashRoot should fail for non-mountpoint paths.");
  }
 catch (  NotInMountpointException e) {
  }
  try {
    fsView.getTrashRoot(invalidMountFilePath);
    fail("ViewFileSystem getTashRoot should fail for non-mountpoint paths.");
  }
 catch (  NotInMountpointException e) {
  }
  try {
    fsView.getTrashRoot(null);
    fail("ViewFileSystem getTashRoot should fail for empty paths.");
  }
 catch (  NotInMountpointException e) {
  }
  FileStatus fileStatus=fsTarget.getFileStatus(fsTargetFilePath);
  Configuration newConf=new Configuration(conf);
  newConf.setLong("fs.trash.interval",1000);
  Trash lTrash=new Trash(fsTarget,newConf);
  boolean trashed=lTrash.moveToTrash(fsTargetFilePath);
  Assert.assertTrue("File " + fileStatus + " move to "+ "trash failed.",trashed);
  Assert.assertTrue("",fsView.getTrashRoots(true).size() > 0);
}
