@Test public void testWhenServiceInstancesAreDown() throws Throwable {
  HttpClient mockHttpClient=Mockito.mock(HttpClient.class);
  HttpEntity mockHttpEntity=Mockito.mock(HttpEntity.class);
  HttpResponse mockHttpResponseService1=Mockito.mock(HttpResponse.class);
  Mockito.when(mockHttpResponseService1.getStatusLine()).thenReturn(newStatusLine(HttpStatus.SC_INTERNAL_SERVER_ERROR));
  Mockito.when(mockHttpResponseService1.getFirstHeader("Content-Type")).thenReturn(newHeader("Content-Type","application/json"));
  Mockito.when(mockHttpResponseService1.getFirstHeader("Content-Length")).thenReturn(newHeader("Content-Length","1024"));
  Mockito.when(mockHttpResponseService1.getEntity()).thenReturn(mockHttpEntity);
  HttpResponse mockHttpResponseService2=Mockito.mock(HttpResponse.class);
  Mockito.when(mockHttpResponseService2.getStatusLine()).thenReturn(newStatusLine(HttpStatus.SC_INTERNAL_SERVER_ERROR));
  Mockito.when(mockHttpResponseService2.getFirstHeader("Content-Type")).thenReturn(newHeader("Content-Type","application/json"));
  Mockito.when(mockHttpResponseService2.getFirstHeader("Content-Length")).thenReturn(newHeader("Content-Length","1024"));
  Mockito.when(mockHttpResponseService2.getEntity()).thenReturn(mockHttpEntity);
  HttpResponse mockHttpResponseService3=Mockito.mock(HttpResponse.class);
  Mockito.when(mockHttpResponseService3.getStatusLine()).thenReturn(newStatusLine(HttpStatus.SC_INTERNAL_SERVER_ERROR));
  Mockito.when(mockHttpResponseService3.getFirstHeader("Content-Type")).thenReturn(newHeader("Content-Type","application/json"));
  Mockito.when(mockHttpResponseService3.getFirstHeader("Content-Length")).thenReturn(newHeader("Content-Length","1024"));
  Mockito.when(mockHttpResponseService3.getEntity()).thenReturn(mockHttpEntity);
class HttpGetForService1 extends ArgumentMatcher<HttpGet> {
    @Override public boolean matches(    Object o){
      return checkHttpGetMatchHost((HttpGet)o,"localhost1");
    }
  }
class HttpGetForService2 extends ArgumentMatcher<HttpGet> {
    @Override public boolean matches(    Object o){
      return checkHttpGetMatchHost((HttpGet)o,"localhost2");
    }
  }
class HttpGetForService3 extends ArgumentMatcher<HttpGet> {
    @Override public boolean matches(    Object o){
      try {
        return checkHttpGetMatchHost((HttpGet)o,InetAddress.getLocalHost().getCanonicalHostName());
      }
 catch (      UnknownHostException e) {
        return checkHttpGetMatchHost((HttpGet)o,"localhost");
      }
    }
  }
  Mockito.when(mockHttpClient.execute(argThat(new HttpGetForService1()))).thenReturn(mockHttpResponseService1);
  Mockito.when(mockHttpClient.execute(argThat(new HttpGetForService2()))).thenReturn(mockHttpResponseService2);
  Mockito.when(mockHttpClient.execute(argThat(new HttpGetForService3()))).thenReturn(mockHttpResponseService3);
  Mockito.when(mockHttpEntity.getContent()).thenReturn(new ByteArrayInputStream(validJsonResponse().getBytes(StandardCharsets.UTF_8))).thenReturn(new ByteArrayInputStream(validJsonResponse().getBytes(StandardCharsets.UTF_8))).thenReturn(new ByteArrayInputStream(validJsonResponse().getBytes(StandardCharsets.UTF_8)));
  try {
    performop(mockHttpClient);
  }
 catch (  WasbAuthorizationException e) {
    e.printStackTrace();
    Mockito.verify(mockHttpClient,atLeast(2)).execute(argThat(new HttpGetForService1()));
    Mockito.verify(mockHttpClient,atLeast(2)).execute(argThat(new HttpGetForService2()));
    Mockito.verify(mockHttpClient,atLeast(3)).execute(argThat(new HttpGetForService3()));
    Mockito.verify(mockHttpClient,times(7)).execute(Mockito.<HttpGet>any());
  }
}
