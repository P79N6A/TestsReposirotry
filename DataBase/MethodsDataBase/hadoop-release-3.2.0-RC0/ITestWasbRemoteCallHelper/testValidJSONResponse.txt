/** 
 * Test valid JSON response.
 * @throws Throwable
 */
@Test public void testValidJSONResponse() throws Throwable {
  HttpClient mockHttpClient=Mockito.mock(HttpClient.class);
  HttpResponse mockHttpResponse=Mockito.mock(HttpResponse.class);
  HttpEntity mockHttpEntity=Mockito.mock(HttpEntity.class);
  Mockito.when(mockHttpClient.execute(Mockito.<HttpGet>any())).thenReturn(mockHttpResponse);
  Mockito.when(mockHttpResponse.getStatusLine()).thenReturn(newStatusLine(HttpStatus.SC_OK));
  Mockito.when(mockHttpResponse.getFirstHeader("Content-Type")).thenReturn(newHeader("Content-Type","application/json"));
  Mockito.when(mockHttpResponse.getFirstHeader("Content-Length")).thenReturn(newHeader("Content-Length","1024"));
  Mockito.when(mockHttpResponse.getEntity()).thenReturn(mockHttpEntity);
  Mockito.when(mockHttpEntity.getContent()).thenReturn(new ByteArrayInputStream(validJsonResponse().getBytes(StandardCharsets.UTF_8))).thenReturn(new ByteArrayInputStream(validJsonResponse().getBytes(StandardCharsets.UTF_8))).thenReturn(new ByteArrayInputStream(validJsonResponse().getBytes(StandardCharsets.UTF_8)));
  performop(mockHttpClient);
}
