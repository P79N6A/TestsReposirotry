@Test public void testWhenOneInstanceIsDown() throws Throwable {
  boolean isAuthorizationCachingEnabled=fs.getConf().getBoolean(CachingAuthorizer.KEY_AUTH_SERVICE_CACHING_ENABLE,false);
  HttpClient mockHttpClient=Mockito.mock(HttpClient.class);
  HttpEntity mockHttpEntity=Mockito.mock(HttpEntity.class);
  HttpResponse mockHttpResponseService1=Mockito.mock(HttpResponse.class);
  Mockito.when(mockHttpResponseService1.getStatusLine()).thenReturn(newStatusLine(HttpStatus.SC_INTERNAL_SERVER_ERROR));
  Mockito.when(mockHttpResponseService1.getFirstHeader("Content-Type")).thenReturn(newHeader("Content-Type","application/json"));
  Mockito.when(mockHttpResponseService1.getFirstHeader("Content-Length")).thenReturn(newHeader("Content-Length","1024"));
  Mockito.when(mockHttpResponseService1.getEntity()).thenReturn(mockHttpEntity);
  HttpResponse mockHttpResponseService2=Mockito.mock(HttpResponse.class);
  Mockito.when(mockHttpResponseService2.getStatusLine()).thenReturn(newStatusLine(HttpStatus.SC_OK));
  Mockito.when(mockHttpResponseService2.getFirstHeader("Content-Type")).thenReturn(newHeader("Content-Type","application/json"));
  Mockito.when(mockHttpResponseService2.getFirstHeader("Content-Length")).thenReturn(newHeader("Content-Length","1024"));
  Mockito.when(mockHttpResponseService2.getEntity()).thenReturn(mockHttpEntity);
  HttpResponse mockHttpResponseServiceLocal=Mockito.mock(HttpResponse.class);
  Mockito.when(mockHttpResponseServiceLocal.getStatusLine()).thenReturn(newStatusLine(HttpStatus.SC_INTERNAL_SERVER_ERROR));
  Mockito.when(mockHttpResponseServiceLocal.getFirstHeader("Content-Type")).thenReturn(newHeader("Content-Type","application/json"));
  Mockito.when(mockHttpResponseServiceLocal.getFirstHeader("Content-Length")).thenReturn(newHeader("Content-Length","1024"));
  Mockito.when(mockHttpResponseServiceLocal.getEntity()).thenReturn(mockHttpEntity);
class HttpGetForService1 extends ArgumentMatcher<HttpGet> {
    @Override public boolean matches(    Object o){
      return checkHttpGetMatchHost((HttpGet)o,"localhost1");
    }
  }
class HttpGetForService2 extends ArgumentMatcher<HttpGet> {
    @Override public boolean matches(    Object o){
      return checkHttpGetMatchHost((HttpGet)o,"localhost2");
    }
  }
class HttpGetForServiceLocal extends ArgumentMatcher<HttpGet> {
    @Override public boolean matches(    Object o){
      try {
        return checkHttpGetMatchHost((HttpGet)o,InetAddress.getLocalHost().getCanonicalHostName());
      }
 catch (      UnknownHostException e) {
        return checkHttpGetMatchHost((HttpGet)o,"localhost");
      }
    }
  }
  Mockito.when(mockHttpClient.execute(argThat(new HttpGetForService1()))).thenReturn(mockHttpResponseService1);
  Mockito.when(mockHttpClient.execute(argThat(new HttpGetForService2()))).thenReturn(mockHttpResponseService2);
  Mockito.when(mockHttpClient.execute(argThat(new HttpGetForServiceLocal()))).thenReturn(mockHttpResponseServiceLocal);
  Mockito.when(mockHttpEntity.getContent()).thenReturn(new ByteArrayInputStream(validJsonResponse().getBytes(StandardCharsets.UTF_8))).thenReturn(new ByteArrayInputStream(validJsonResponse().getBytes(StandardCharsets.UTF_8))).thenReturn(new ByteArrayInputStream(validJsonResponse().getBytes(StandardCharsets.UTF_8)));
  performop(mockHttpClient);
  int expectedNumberOfInvocations=isAuthorizationCachingEnabled ? 2 : 3;
  Mockito.verify(mockHttpClient,times(expectedNumberOfInvocations)).execute(Mockito.argThat(new HttpGetForServiceLocal()));
  Mockito.verify(mockHttpClient,times(expectedNumberOfInvocations)).execute(Mockito.argThat(new HttpGetForService2()));
}
