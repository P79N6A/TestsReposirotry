@Test public void testNodeAllocationTagsAggregation() throws InvalidAllocationTagsQueryException {
  RMContext mockContext=Mockito.spy(rmContext);
  ApplicationId app1=TestUtils.getMockApplicationId(1);
  ApplicationId app2=TestUtils.getMockApplicationId(2);
  ApplicationId app3=TestUtils.getMockApplicationId(3);
  NodeId host1=NodeId.fromString("host1:123");
  NodeId host2=NodeId.fromString("host2:123");
  NodeId host3=NodeId.fromString("host3:123");
  ConcurrentMap<ApplicationId,RMApp> allApps=new ConcurrentHashMap<>();
  allApps.put(app1,new MockRMApp(123,1000,RMAppState.NEW,"userA",ImmutableSet.of("")));
  allApps.put(app2,new MockRMApp(124,1001,RMAppState.NEW,"userA",ImmutableSet.of("")));
  allApps.put(app3,new MockRMApp(125,1002,RMAppState.NEW,"userA",ImmutableSet.of("")));
  Mockito.when(mockContext.getRMApps()).thenReturn(allApps);
  AllocationTagsManager atm=new AllocationTagsManager(mockContext);
  atm.addContainer(host1,TestUtils.getMockContainerId(1,1),ImmutableSet.of("A","B"));
  atm.addContainer(host1,TestUtils.getMockContainerId(1,2),ImmutableSet.of("A"));
  atm.addContainer(host1,TestUtils.getMockContainerId(2,1),ImmutableSet.of("A"));
  atm.addContainer(host1,TestUtils.getMockContainerId(2,2),ImmutableSet.of("A"));
  atm.addContainer(host1,TestUtils.getMockContainerId(2,3),ImmutableSet.of("A"));
  atm.addContainer(host1,TestUtils.getMockContainerId(3,1),ImmutableSet.of("A"));
  atm.addContainer(host2,TestUtils.getMockContainerId(1,3),ImmutableSet.of("C"));
  atm.addContainer(host2,TestUtils.getMockContainerId(2,4),ImmutableSet.of("A"));
  atm.addContainer(host2,TestUtils.getMockContainerId(2,5),ImmutableSet.of("B"));
  atm.addContainer(host2,TestUtils.getMockContainerId(2,6),ImmutableSet.of("B"));
  atm.addContainer(host2,TestUtils.getMockContainerId(3,2),ImmutableSet.of("B"));
  atm.addContainer(host3,TestUtils.getMockContainerId(2,7),ImmutableSet.of("D"));
  atm.addContainer(host3,TestUtils.getMockContainerId(3,3),ImmutableSet.of("D"));
  TargetApplications ta=new TargetApplications(app1,ImmutableSet.of(app1,app2,app3));
  AllocationTags tags=AllocationTags.createSingleAppAllocationTags(app1,ImmutableSet.of("A","C"));
  Assert.assertEquals(2,atm.getNodeCardinalityByOp(host1,tags,Long::max));
  Assert.assertEquals(0,atm.getNodeCardinalityByOp(host1,tags,Long::min));
  Assert.assertEquals(1,atm.getNodeCardinalityByOp(host2,tags,Long::max));
  Assert.assertEquals(0,atm.getNodeCardinalityByOp(host2,tags,Long::min));
  Assert.assertEquals(0,atm.getNodeCardinalityByOp(host3,tags,Long::max));
  Assert.assertEquals(0,atm.getNodeCardinalityByOp(host3,tags,Long::min));
  tags=AllocationTags.createOtherAppAllocationTags(app1,ImmutableSet.of("A","B"));
  Assert.assertEquals(4,atm.getNodeCardinalityByOp(host1,tags,Long::max));
  Assert.assertEquals(0,atm.getNodeCardinalityByOp(host1,tags,Long::min));
  Assert.assertEquals(4,atm.getNodeCardinalityByOp(host1,tags,Long::sum));
  tags=AllocationTags.createSingleAppAllocationTags(app2,ImmutableSet.of("A","B"));
  Assert.assertEquals(3,atm.getNodeCardinalityByOp(host1,tags,Long::max));
  Assert.assertEquals(0,atm.getNodeCardinalityByOp(host1,tags,Long::min));
  Assert.assertEquals(2,atm.getNodeCardinalityByOp(host2,tags,Long::max));
  Assert.assertEquals(1,atm.getNodeCardinalityByOp(host2,tags,Long::min));
  Assert.assertEquals(3,atm.getNodeCardinalityByOp(host2,tags,Long::sum));
  tags=AllocationTags.createGlobalAllocationTags(ImmutableSet.of("A"));
  Assert.assertEquals(6,atm.getNodeCardinalityByOp(host1,tags,Long::sum));
  Assert.assertEquals(1,atm.getNodeCardinalityByOp(host2,tags,Long::sum));
  Assert.assertEquals(0,atm.getNodeCardinalityByOp(host3,tags,Long::sum));
  tags=AllocationTags.createGlobalAllocationTags(ImmutableSet.of("A","B"));
  Assert.assertEquals(7,atm.getNodeCardinalityByOp(host1,tags,Long::sum));
  Assert.assertEquals(4,atm.getNodeCardinalityByOp(host2,tags,Long::sum));
  Assert.assertEquals(0,atm.getNodeCardinalityByOp(host3,tags,Long::sum));
  Assert.assertEquals(6,atm.getNodeCardinalityByOp(host1,tags,Long::max));
  Assert.assertEquals(3,atm.getNodeCardinalityByOp(host2,tags,Long::max));
  Assert.assertEquals(0,atm.getNodeCardinalityByOp(host3,tags,Long::max));
  Assert.assertEquals(1,atm.getNodeCardinalityByOp(host1,tags,Long::min));
  Assert.assertEquals(1,atm.getNodeCardinalityByOp(host2,tags,Long::min));
  Assert.assertEquals(0,atm.getNodeCardinalityByOp(host3,tags,Long::min));
}
