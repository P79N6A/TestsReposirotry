/** 
 * This testcase tests re-replication,  when dataNodes[0] and dataNodes[3] are already chosen. So the 1st replica should be placed on the rack that the writer resides.  the rest replicas can be placed randomly,
 * @throws Exception
 */
@Test public void testRereplicate3() throws Exception {
  updateHeartbeatWithUsage();
  List<DatanodeStorageInfo> chosenNodes=new ArrayList<>();
  chosenNodes.add(storages[0]);
  chosenNodes.add(storages[3]);
  DatanodeStorageInfo[] targets;
  targets=chooseTarget(0,chosenNodes);
  assertEquals(targets.length,0);
  targets=chooseTarget(1,chosenNodes);
  assertEquals(targets.length,1);
  assertTrue(isOnSameRack(dataNodes[0],targets[0]));
  assertFalse(isOnSameRack(dataNodes[3],targets[0]));
  targets=chooseTarget(1,dataNodes[3],chosenNodes);
  assertEquals(targets.length,1);
  assertTrue(isOnSameRack(dataNodes[3],targets[0]));
  assertFalse(isOnSameNodeGroup(dataNodes[3],targets[0]));
  assertFalse(isOnSameRack(dataNodes[0],targets[0]));
  targets=chooseTarget(2,chosenNodes);
  assertEquals(targets.length,2);
  assertTrue(isOnSameRack(dataNodes[0],targets[0]));
  assertFalse(isOnSameNodeGroup(dataNodes[0],targets[0]));
  targets=chooseTarget(2,dataNodes[3],chosenNodes);
  assertEquals(targets.length,2);
  assertTrue(isOnSameRack(dataNodes[3],targets[0]));
}
