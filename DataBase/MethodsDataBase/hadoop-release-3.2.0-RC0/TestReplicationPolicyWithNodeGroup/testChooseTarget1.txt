/** 
 * In this testcase, client is dataNodes[0]. So the 1st replica should be placed on dataNodes[0], the 2nd replica should be placed on  different rack and third should be placed on different node (and node group) of rack chosen for 2nd node. The only excpetion is when the <i>numOfReplicas</i> is 2,  the 1st is on dataNodes[0] and the 2nd is on a different rack.
 * @throws Exception
 */
@Test public void testChooseTarget1() throws Exception {
  updateHeartbeatWithUsage(dataNodes[0],2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,0L,0L,4,0);
  DatanodeStorageInfo[] targets;
  targets=chooseTarget(0);
  assertEquals(targets.length,0);
  targets=chooseTarget(1);
  assertEquals(targets.length,1);
  assertEquals(storages[0],targets[0]);
  targets=chooseTarget(2);
  assertEquals(targets.length,2);
  assertEquals(storages[0],targets[0]);
  assertFalse(isOnSameRack(targets[0],targets[1]));
  targets=chooseTarget(3);
  assertEquals(targets.length,3);
  assertEquals(storages[0],targets[0]);
  assertFalse(isOnSameRack(targets[0],targets[1]));
  assertTrue(isOnSameRack(targets[1],targets[2]));
  assertFalse(isOnSameNodeGroup(targets[1],targets[2]));
  targets=chooseTarget(4);
  assertEquals(targets.length,4);
  assertEquals(storages[0],targets[0]);
  assertTrue(isOnSameRack(targets[1],targets[2]) || isOnSameRack(targets[2],targets[3]));
  assertFalse(isOnSameRack(targets[0],targets[2]));
  verifyNoTwoTargetsOnSameNodeGroup(targets);
  updateHeartbeatWithUsage(dataNodes[0],2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,0L,0L,0,0);
}
