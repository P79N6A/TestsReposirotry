@Test(timeout=300000) public void testValidateRequestCapacityAgainstMinMaxAllocationFor3rdResourceTypes() throws Exception {
  Map<String,ResourceInformation> riMap=new HashMap<>();
  ResourceInformation memory=ResourceInformation.newInstance(ResourceInformation.MEMORY_MB.getName(),ResourceInformation.MEMORY_MB.getUnits(),YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB,DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB);
  ResourceInformation vcores=ResourceInformation.newInstance(ResourceInformation.VCORES.getName(),ResourceInformation.VCORES.getUnits(),YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);
  ResourceInformation res1=ResourceInformation.newInstance("res_1",ResourceInformation.VCORES.getUnits(),0,4);
  riMap.put(ResourceInformation.MEMORY_URI,memory);
  riMap.put(ResourceInformation.VCORES_URI,vcores);
  riMap.put("res_1",res1);
  ResourceUtils.initializeResourcesFromResourceInformationMap(riMap);
  CapacitySchedulerConfiguration csconf=new CapacitySchedulerConfiguration();
  csconf.setResourceComparator(DominantResourceCalculator.class);
  YarnConfiguration yarnConf=new YarnConfiguration(csconf);
  yarnConf.setBoolean(TestResourceProfiles.TEST_CONF_RESET_RESOURCE_TYPES,false);
  yarnConf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  yarnConf.setBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,false);
  MockRM rm=new MockRM(yarnConf);
  rm.start();
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  LeafQueue leafQueue=(LeafQueue)cs.getQueue("default");
  MockNM nm1=rm.registerNode("199.99.99.1:1234",TestUtils.createResource(DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,ImmutableMap.of("res_1",4)));
  RMApp app1=rm.submitApp(GB,"app","user",null,"default");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm1);
  Assert.assertEquals(Resource.newInstance(GB,1),leafQueue.getUsedResources());
  boolean exception=false;
  try {
    am1.allocate(Collections.singletonList(ResourceRequest.newBuilder().capability(TestUtils.createResource(9 * GB,1,ImmutableMap.of("res_1",1))).numContainers(1).resourceName("*").build()),null);
  }
 catch (  InvalidResourceRequestException e) {
    exception=true;
  }
  Assert.assertTrue(exception);
  exception=false;
  try {
    am1.allocate(Collections.singletonList(ResourceRequest.newBuilder().capability(TestUtils.createResource(8 * GB,18,ImmutableMap.of("res_1",1))).numContainers(1).resourceName("*").build()),null);
  }
 catch (  InvalidResourceRequestException e) {
    exception=true;
  }
  Assert.assertTrue(exception);
  exception=false;
  try {
    am1.allocate(Collections.singletonList(ResourceRequest.newBuilder().capability(TestUtils.createResource(8 * GB,1,ImmutableMap.of("res_1",100))).numContainers(1).resourceName("*").build()),null);
  }
 catch (  InvalidResourceRequestException e) {
    exception=true;
  }
  Assert.assertTrue(exception);
  rm.close();
}
