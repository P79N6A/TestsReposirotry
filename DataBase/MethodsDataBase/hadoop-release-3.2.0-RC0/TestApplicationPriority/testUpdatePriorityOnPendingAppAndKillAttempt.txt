@Test(timeout=120000) public void testUpdatePriorityOnPendingAppAndKillAttempt() throws Exception {
  int maxPriority=10;
  int appPriority=5;
  YarnConfiguration conf=new YarnConfiguration();
  conf.setInt(YarnConfiguration.MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY,maxPriority);
  MockRM rm=new MockRM(conf);
  rm.init(conf);
  rm.start();
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  CSQueue defaultQueue=(LeafQueue)cs.getQueue("default");
  RMApp app1=rm.submitApp(1024,Priority.newInstance(appPriority));
  Collection<FiCaSchedulerApp> appsPending=((LeafQueue)defaultQueue).getPendingApplications();
  Collection<FiCaSchedulerApp> activeApps=((LeafQueue)defaultQueue).getOrderingPolicy().getSchedulableEntities();
  Assert.assertEquals("Pending apps should be 1",1,appsPending.size());
  Assert.assertEquals("Active apps should be 0",0,activeApps.size());
  killAppAndVerifyOrderingPolicy(rm,defaultQueue,0,0,app1);
  MockNM nm1=new MockNM("127.0.0.1:1234",8096,rm.getResourceTrackerService());
  nm1.registerNode();
  RMApp app2=rm.submitApp(1024,Priority.newInstance(appPriority));
  Assert.assertEquals("Pending apps should be 0",0,appsPending.size());
  Assert.assertEquals("Active apps should be 1",1,activeApps.size());
  RMApp app3=rm.submitApp(1024,Priority.newInstance(appPriority));
  RMApp app4=rm.submitApp(1024,Priority.newInstance(appPriority));
  Assert.assertEquals("Pending apps should be 2",2,appsPending.size());
  Assert.assertEquals("Active apps should be 1",1,activeApps.size());
  killAppAndVerifyOrderingPolicy(rm,defaultQueue,1,1,app3);
  killAppAndVerifyOrderingPolicy(rm,defaultQueue,0,1,app2);
  killAppAndVerifyOrderingPolicy(rm,defaultQueue,0,0,app4);
  rm.stop();
}
