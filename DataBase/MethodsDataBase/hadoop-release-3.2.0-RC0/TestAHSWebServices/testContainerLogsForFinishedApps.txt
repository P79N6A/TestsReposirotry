@Test(timeout=10000) public void testContainerLogsForFinishedApps() throws Exception {
  String fileName="syslog";
  String user="user1";
  NodeId nodeId=NodeId.newInstance("test host",100);
  NodeId nodeId2=NodeId.newInstance("host2",1234);
  ApplicationId appId=ApplicationId.newInstance(0,1);
  ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,1);
  ContainerId containerId1=ContainerId.newContainerId(appAttemptId,1);
  ContainerId containerId100=ContainerId.newContainerId(appAttemptId,100);
  TestContainerLogsUtils.createContainerLogFileInRemoteFS(conf,fs,rootLogDir,containerId1,nodeId,fileName,user,("Hello." + containerId1),true);
  TestContainerLogsUtils.createContainerLogFileInRemoteFS(conf,fs,rootLogDir,containerId100,nodeId2,fileName,user,("Hello." + containerId100),false);
  WebResource r=resource();
  ClientResponse response=r.path("ws").path("v1").path("applicationhistory").path("containerlogs").path(containerId1.toString()).path(fileName).queryParam("user.name",user).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
  String responseText=response.getEntity(String.class);
  assertTrue(responseText.contains("Hello." + containerId1));
  r=resource();
  response=r.path("ws").path("v1").path("applicationhistory").path("containers").path(containerId1.toString()).path("logs").path(fileName).queryParam("user.name",user).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
  responseText=response.getEntity(String.class);
  assertTrue(responseText.contains("Hello." + containerId1));
  r=resource();
  response=r.path("ws").path("v1").path("applicationhistory").path("containerlogs").path(containerId100.toString()).path(fileName).queryParam("user.name",user).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
  responseText=response.getEntity(String.class);
  assertTrue(responseText.contains("Hello." + containerId100));
  r=resource();
  response=r.path("ws").path("v1").path("applicationhistory").path("containers").path(containerId100.toString()).path("logs").path(fileName).queryParam("user.name",user).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
  responseText=response.getEntity(String.class);
  assertTrue(responseText.contains("Hello." + containerId100));
  ApplicationId appId100=ApplicationId.newInstance(0,100);
  ApplicationAttemptId appAttemptId100=ApplicationAttemptId.newInstance(appId100,1);
  ContainerId containerId1ForApp100=ContainerId.newContainerId(appAttemptId100,1);
  TestContainerLogsUtils.createContainerLogFileInRemoteFS(conf,fs,rootLogDir,containerId1ForApp100,nodeId,fileName,user,("Hello." + containerId1ForApp100),true);
  r=resource();
  response=r.path("ws").path("v1").path("applicationhistory").path("containerlogs").path(containerId1ForApp100.toString()).path(fileName).queryParam("user.name",user).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
  responseText=response.getEntity(String.class);
  assertTrue(responseText.contains("Hello." + containerId1ForApp100));
  int fullTextSize=responseText.getBytes().length;
  String tailEndSeparator=StringUtils.repeat("*","End of LogType:syslog".length() + 50) + "\n\n";
  int tailTextSize="\nEnd of LogType:syslog\n".getBytes().length + tailEndSeparator.getBytes().length;
  String logMessage="Hello." + containerId1ForApp100;
  int fileContentSize=logMessage.getBytes().length;
  r=resource();
  response=r.path("ws").path("v1").path("applicationhistory").path("containerlogs").path(containerId1ForApp100.toString()).path(fileName).queryParam("user.name",user).queryParam("size","5").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
  responseText=response.getEntity(String.class);
  assertEquals(responseText.getBytes().length,(fullTextSize - fileContentSize) + 5);
  assertTrue(fullTextSize >= responseText.getBytes().length);
  assertEquals(new String(responseText.getBytes(),(fullTextSize - fileContentSize - tailTextSize),5),new String(logMessage.getBytes(),0,5));
  r=resource();
  response=r.path("ws").path("v1").path("applicationhistory").path("containerlogs").path(containerId1ForApp100.toString()).path(fileName).queryParam("user.name",user).queryParam("size","-5").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
  responseText=response.getEntity(String.class);
  assertEquals(responseText.getBytes().length,(fullTextSize - fileContentSize) + 5);
  assertTrue(fullTextSize >= responseText.getBytes().length);
  assertEquals(new String(responseText.getBytes(),(fullTextSize - fileContentSize - tailTextSize),5),new String(logMessage.getBytes(),fileContentSize - 5,5));
  r=resource();
  response=r.path("ws").path("v1").path("applicationhistory").path("containerlogs").path(containerId1ForApp100.toString()).path(fileName).queryParam("user.name",user).queryParam("size","10000").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
  responseText=response.getEntity(String.class);
  assertEquals(responseText.getBytes().length,fullTextSize);
  r=resource();
  response=r.path("ws").path("v1").path("applicationhistory").path("containerlogs").path(containerId1ForApp100.toString()).path(fileName).queryParam("user.name",user).queryParam("size","-10000").accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
  responseText=response.getEntity(String.class);
  assertEquals(responseText.getBytes().length,fullTextSize);
}
