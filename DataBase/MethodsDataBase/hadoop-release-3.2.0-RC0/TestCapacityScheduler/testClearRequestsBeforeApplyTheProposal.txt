@Test(timeout=60000) public void testClearRequestsBeforeApplyTheProposal() throws Exception {
  final MockRM rm=new MockRM(new CapacitySchedulerConfiguration());
  rm.start();
  final MockNM nm=rm.registerNode("h1:1234",200 * GB);
  final RMApp app=rm.submitApp(200,"app","user");
  MockRM.launchAndRegisterAM(app,rm,nm);
  final Priority priority=Priority.newInstance(1);
  final CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  final CapacityScheduler spyCs=Mockito.spy(cs);
  Mockito.doAnswer(new Answer<Object>(){
    public Object answer(    InvocationOnMock invocation) throws Exception {
      spyCs.allocate(app.getCurrentAppAttempt().getAppAttemptId(),Arrays.asList(ResourceRequest.newInstance(priority,"*",Resources.createResource(1 * GB),0)),null,Collections.<ContainerId>emptyList(),null,null,NULL_UPDATE_REQUESTS);
      try {
        FiCaSchedulerApp schedulerApp=cs.getApplicationAttempt(app.getCurrentAppAttempt().getAppAttemptId());
        schedulerApp.apply((Resource)invocation.getArguments()[0],(ResourceCommitRequest)invocation.getArguments()[1],(Boolean)invocation.getArguments()[2]);
        Assert.assertEquals(1,schedulerApp.getLiveContainers().size());
      }
 catch (      Throwable e) {
        Assert.fail();
      }
      return null;
    }
  }
).when(spyCs).tryCommit(Mockito.any(Resource.class),Mockito.any(ResourceCommitRequest.class),Mockito.anyBoolean());
  spyCs.allocate(app.getCurrentAppAttempt().getAppAttemptId(),Arrays.asList(ResourceRequest.newInstance(priority,"*",Resources.createResource(1 * GB),1)),null,Collections.<ContainerId>emptyList(),null,null,NULL_UPDATE_REQUESTS);
  spyCs.handle(new NodeUpdateSchedulerEvent(spyCs.getNode(nm.getNodeId()).getRMNode()));
}
