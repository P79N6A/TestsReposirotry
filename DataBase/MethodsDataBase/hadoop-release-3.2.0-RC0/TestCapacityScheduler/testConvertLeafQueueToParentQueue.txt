/** 
 * Test if we can convert a leaf queue to a parent queue
 * @throws Exception
 */
@Test(timeout=10000) public void testConvertLeafQueueToParentQueue() throws Exception {
  CapacityScheduler cs=new CapacityScheduler();
  CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
  RMContextImpl rmContext=new RMContextImpl(null,null,null,null,null,null,new RMContainerTokenSecretManager(conf),new NMTokenSecretManagerInRM(conf),new ClientToAMTokenSecretManagerInRM(),null);
  setupQueueConfiguration(conf);
  cs.setConf(new YarnConfiguration());
  cs.setRMContext(resourceManager.getRMContext());
  cs.init(conf);
  cs.start();
  cs.reinitialize(conf,rmContext);
  checkQueueCapacities(cs,A_CAPACITY,B_CAPACITY);
  String targetQueue="b1";
  CSQueue b1=cs.getQueue(targetQueue);
  Assert.assertEquals(QueueState.RUNNING,b1.getState());
  conf=new CapacitySchedulerConfiguration();
  setupQueueConfigurationWithB1AsParentQueue(conf);
  try {
    cs.reinitialize(conf,mockContext);
    fail("Expected to throw exception when refresh queue tries to convert" + " a child queue to a parent queue.");
  }
 catch (  IOException e) {
  }
  conf=new CapacitySchedulerConfiguration();
  setupQueueConfiguration(conf);
  conf.set("yarn.scheduler.capacity.root.b.b1.state","STOPPED");
  cs.reinitialize(conf,mockContext);
  Assert.assertEquals(QueueState.STOPPED,b1.getState());
  conf=new CapacitySchedulerConfiguration();
  setupQueueConfigurationWithB1AsParentQueue(conf);
  try {
    cs.reinitialize(conf,mockContext);
  }
 catch (  IOException e) {
    fail("Expected to NOT throw exception when refresh queue tries" + " to convert a leaf queue WITHOUT running apps");
  }
  b1=cs.getQueue(targetQueue);
  Assert.assertTrue(b1 instanceof ParentQueue);
  Assert.assertEquals(QueueState.RUNNING,b1.getState());
  Assert.assertTrue(!b1.getChildQueues().isEmpty());
}
