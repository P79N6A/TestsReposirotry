@Test public void testAssignMultiple() throws Exception {
  LOG.info("--- START: testAssignMultiple ---");
  ResourceManager rm=new ResourceManager(){
    @Override protected RMNodeLabelsManager createNodeLabelManager(){
      RMNodeLabelsManager mgr=new NullRMNodeLabelsManager();
      mgr.init(getConfig());
      return mgr;
    }
  }
;
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  csConf.setBoolean(CapacitySchedulerConfiguration.ASSIGN_MULTIPLE_ENABLED,true);
  csConf.setInt(CapacitySchedulerConfiguration.MAX_ASSIGN_PER_HEARTBEAT,2);
  setupQueueConfiguration(csConf);
  YarnConfiguration conf=new YarnConfiguration(csConf);
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  rm.init(conf);
  rm.getRMContext().getContainerTokenSecretManager().rollMasterKey();
  rm.getRMContext().getNMTokenSecretManager().rollMasterKey();
  ((AsyncDispatcher)rm.getRMContext().getDispatcher()).start();
  RMContext mC=mock(RMContext.class);
  when(mC.getConfigurationProvider()).thenReturn(new LocalConfigurationProvider());
  String host0="host_0";
  NodeManager nm0=registerNode(rm,host0,1234,2345,NetworkTopology.DEFAULT_RACK,Resources.createResource(10 * GB,10));
  Priority priority0=Priority.newInstance(0);
  Priority priority1=Priority.newInstance(1);
  Application application0=new Application("user_0","a1",rm);
  application0.submit();
  application0.addNodeManager(host0,1234,nm0);
  Resource capability00=Resources.createResource(1 * GB,1);
  application0.addResourceRequestSpec(priority0,capability00);
  Resource capability01=Resources.createResource(2 * GB,1);
  application0.addResourceRequestSpec(priority1,capability01);
  Task task00=new Task(application0,priority0,new String[]{host0});
  Task task01=new Task(application0,priority1,new String[]{host0});
  application0.addTask(task00);
  application0.addTask(task01);
  Application application1=new Application("user_1","b2",rm);
  application1.submit();
  application1.addNodeManager(host0,1234,nm0);
  Resource capability10=Resources.createResource(3 * GB,1);
  application1.addResourceRequestSpec(priority0,capability10);
  Resource capability11=Resources.createResource(4 * GB,1);
  application1.addResourceRequestSpec(priority1,capability11);
  Task task10=new Task(application1,priority0,new String[]{host0});
  Task task11=new Task(application1,priority1,new String[]{host0});
  application1.addTask(task10);
  application1.addTask(task11);
  application0.schedule();
  application1.schedule();
  LOG.info("Kick!");
  nodeUpdate(rm,nm0);
  application0.schedule();
  application1.schedule();
  checkNodeResourceUsage(4 * GB,nm0);
  checkApplicationResourceUsage(1 * GB,application0);
  checkApplicationResourceUsage(3 * GB,application1);
  nodeUpdate(rm,nm0);
  application0.schedule();
  checkApplicationResourceUsage(3 * GB,application0);
  application1.schedule();
  checkApplicationResourceUsage(7 * GB,application1);
  checkNodeResourceUsage(10 * GB,nm0);
  LOG.info("--- START: testAssignMultiple ---");
}
