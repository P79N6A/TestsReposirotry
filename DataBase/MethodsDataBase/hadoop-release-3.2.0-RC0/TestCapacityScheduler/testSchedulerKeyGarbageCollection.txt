@Test public void testSchedulerKeyGarbageCollection() throws Exception {
  YarnConfiguration conf=new YarnConfiguration(new CapacitySchedulerConfiguration());
  conf.setBoolean(CapacitySchedulerConfiguration.ENABLE_USER_METRICS,true);
  MockRM rm=new MockRM(conf);
  rm.start();
  HashMap<NodeId,MockNM> nodes=new HashMap<>();
  MockNM nm1=new MockNM("h1:1234",4096,rm.getResourceTrackerService());
  nodes.put(nm1.getNodeId(),nm1);
  MockNM nm2=new MockNM("h2:1234",4096,rm.getResourceTrackerService());
  nodes.put(nm2.getNodeId(),nm2);
  MockNM nm3=new MockNM("h3:1234",4096,rm.getResourceTrackerService());
  nodes.put(nm3.getNodeId(),nm3);
  MockNM nm4=new MockNM("h4:1234",4096,rm.getResourceTrackerService());
  nodes.put(nm4.getNodeId(),nm4);
  nm1.registerNode();
  nm2.registerNode();
  nm3.registerNode();
  nm4.registerNode();
  RMApp app1=rm.submitApp(1 * GB,"app","user",null,"default");
  ApplicationAttemptId attemptId=app1.getCurrentAppAttempt().getAppAttemptId();
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm2);
  ResourceScheduler scheduler=rm.getResourceScheduler();
  nm1.nodeHeartbeat(true);
  nm2.nodeHeartbeat(true);
  nm3.nodeHeartbeat(true);
  nm4.nodeHeartbeat(true);
  Thread.sleep(1000);
  AllocateResponse allocateResponse=am1.allocate(Arrays.asList(newResourceRequest(1,1,ResourceRequest.ANY,Resources.createResource(3 * GB),1,true,ExecutionType.GUARANTEED),newResourceRequest(2,2,ResourceRequest.ANY,Resources.createResource(3 * GB),1,true,ExecutionType.GUARANTEED),newResourceRequest(3,3,ResourceRequest.ANY,Resources.createResource(3 * GB),1,true,ExecutionType.GUARANTEED),newResourceRequest(4,4,ResourceRequest.ANY,Resources.createResource(3 * GB),1,true,ExecutionType.GUARANTEED)),null);
  List<Container> allocatedContainers=allocateResponse.getAllocatedContainers();
  Assert.assertEquals(0,allocatedContainers.size());
  Collection<SchedulerRequestKey> schedulerKeys=((CapacityScheduler)scheduler).getApplicationAttempt(attemptId).getAppSchedulingInfo().getSchedulerKeys();
  Assert.assertEquals(4,schedulerKeys.size());
  nm1.nodeHeartbeat(true);
  Thread.sleep(200);
  allocateResponse=am1.allocate(new ArrayList<>(),new ArrayList<>());
  allocatedContainers=allocateResponse.getAllocatedContainers();
  Assert.assertEquals(1,allocatedContainers.size());
  Assert.assertEquals(3,schedulerKeys.size());
  List<ResourceRequest> resReqs=((CapacityScheduler)scheduler).getApplicationAttempt(attemptId).getAppSchedulingInfo().getAllResourceRequests();
  Assert.assertEquals(3,resReqs.size());
  nm2.nodeHeartbeat(true);
  Thread.sleep(200);
  allocateResponse=am1.allocate(Arrays.asList(newResourceRequest(1,allocatedContainers.get(0).getAllocationRequestId(),ResourceRequest.ANY,Resources.createResource(3 * GB),0,true,ExecutionType.GUARANTEED)),new ArrayList<>());
  allocatedContainers=allocateResponse.getAllocatedContainers();
  Assert.assertEquals(1,allocatedContainers.size());
  Assert.assertEquals(2,schedulerKeys.size());
  resReqs=((CapacityScheduler)scheduler).getApplicationAttempt(attemptId).getAppSchedulingInfo().getAllResourceRequests();
  Assert.assertEquals(2,resReqs.size());
  SchedulerRequestKey sk=schedulerKeys.iterator().next();
  am1.allocate(Arrays.asList(newResourceRequest(sk.getPriority().getPriority(),sk.getAllocationRequestId(),ResourceRequest.ANY,Resources.createResource(3 * GB),0,true,ExecutionType.GUARANTEED)),null);
  schedulerKeys=((CapacityScheduler)scheduler).getApplicationAttempt(attemptId).getAppSchedulingInfo().getSchedulerKeys();
  Thread.sleep(200);
  Assert.assertEquals(1,schedulerKeys.size());
  nm3.nodeHeartbeat(true);
  Thread.sleep(200);
  allocateResponse=am1.allocate(new ArrayList<>(),new ArrayList<>());
  allocatedContainers=allocateResponse.getAllocatedContainers();
  Assert.assertEquals(1,allocatedContainers.size());
  Assert.assertEquals(0,schedulerKeys.size());
  resReqs=((CapacityScheduler)scheduler).getApplicationAttempt(attemptId).getAppSchedulingInfo().getAllResourceRequests();
  Assert.assertEquals(0,resReqs.size());
}
