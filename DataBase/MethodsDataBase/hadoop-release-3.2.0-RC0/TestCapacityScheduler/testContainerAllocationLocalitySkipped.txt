@Test public void testContainerAllocationLocalitySkipped() throws Exception {
  Assert.assertEquals(AllocationState.APP_SKIPPED,ContainerAllocation.APP_SKIPPED.getAllocationState());
  Assert.assertEquals(AllocationState.LOCALITY_SKIPPED,ContainerAllocation.LOCALITY_SKIPPED.getAllocationState());
  Assert.assertEquals(AllocationState.PRIORITY_SKIPPED,ContainerAllocation.PRIORITY_SKIPPED.getAllocationState());
  Assert.assertEquals(AllocationState.QUEUE_SKIPPED,ContainerAllocation.QUEUE_SKIPPED.getAllocationState());
  final MockRM rm=new MockRM(new CapacitySchedulerConfiguration());
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  rm.start();
  final MockNM nm1=rm.registerNode("h1:1234",4 * GB);
  final MockNM nm2=rm.registerNode("h2:1234",6 * GB);
  final RMApp app=rm.submitApp(1 * GB,"app","user");
  final MockAM am=MockRM.launchAndRegisterAM(app,rm,nm1);
  am.addRequests(new String[]{"*"},5 * GB,1,1,2);
  am.schedule();
  RMNode node1=rm.getRMContext().getRMNodes().get(nm1.getNodeId());
  cs.handle(new NodeUpdateSchedulerEvent(node1));
  ContainerId cid=ContainerId.newContainerId(am.getApplicationAttemptId(),1l);
  Assert.assertEquals(cs.getRMContainer(cid).getState(),RMContainerState.ACQUIRED);
  cid=ContainerId.newContainerId(am.getApplicationAttemptId(),2l);
  Assert.assertNull(cs.getRMContainer(cid));
  Assert.assertEquals(AllocationState.APP_SKIPPED,ContainerAllocation.APP_SKIPPED.getAllocationState());
  Assert.assertEquals(AllocationState.LOCALITY_SKIPPED,ContainerAllocation.LOCALITY_SKIPPED.getAllocationState());
  Assert.assertEquals(AllocationState.PRIORITY_SKIPPED,ContainerAllocation.PRIORITY_SKIPPED.getAllocationState());
  Assert.assertEquals(AllocationState.QUEUE_SKIPPED,ContainerAllocation.QUEUE_SKIPPED.getAllocationState());
}
