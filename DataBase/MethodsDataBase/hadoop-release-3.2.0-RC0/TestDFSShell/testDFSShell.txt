/** 
 * Tests various options of DFSShell.
 */
@Test(timeout=120000) public void testDFSShell() throws Exception {
  FsShell shell=new FsShell(dfs.getConf());
  Path myPath=new Path("/testDFSShell/mkdirs");
  assertTrue(dfs.mkdirs(myPath));
  assertTrue(dfs.exists(myPath));
  assertTrue(dfs.mkdirs(myPath));
  Path myFile=new Path("/testDFSShell/mkdirs/myFile");
  writeFile(dfs,myFile);
  assertTrue(dfs.exists(myFile));
  Path myFile2=new Path("/testDFSShell/mkdirs/myFile2");
  writeFile(dfs,myFile2);
  assertTrue(dfs.exists(myFile2));
{
    String[] args=new String[2];
    args[0]="-rm";
    args[1]="/testDFSShell/mkdirs/myFile*";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
    assertFalse(dfs.exists(myFile));
    assertFalse(dfs.exists(myFile2));
    writeFile(dfs,myFile);
    assertTrue(dfs.exists(myFile));
    writeFile(dfs,myFile2);
    assertTrue(dfs.exists(myFile2));
  }
{
    String[] args=new String[3];
    args[0]="-cat";
    args[1]="/testDFSShell/mkdirs/myFile";
    args[2]="/testDFSShell/mkdirs/myFile2";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run: " + StringUtils.stringifyException(e));
    }
    assertTrue(val == 0);
  }
  dfs.delete(myFile2,true);
{
    String[] args=new String[2];
    args[0]="-cat";
    args[1]="/testDFSShell/mkdirs/myFile1";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertTrue(val != 0);
  }
{
    String[] args=new String[2];
    args[0]="-rm";
    args[1]="/testDFSShell/mkdirs/myFile1";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertTrue(val != 0);
  }
{
    String[] args=new String[2];
    args[0]="-rm";
    args[1]="/testDFSShell/mkdirs/myFile";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
  }
{
    String[] args;
    int val;
    args=new String[3];
    args[0]="-test";
    args[1]="-e";
    args[2]="/testDFSShell/mkdirs/noFileHere";
    val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(1,val);
    args[1]="-z";
    val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(1,val);
    args=new String[2];
    args[0]="-touchz";
    args[1]="/testDFSShell/mkdirs/isFileHere";
    val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,val);
    args=new String[2];
    args[0]="-touchz";
    args[1]="/testDFSShell/mkdirs/thisDirNotExists/isFileHere";
    val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(1,val);
    args=new String[3];
    args[0]="-test";
    args[1]="-e";
    args[2]="/testDFSShell/mkdirs/isFileHere";
    val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,val);
    args[1]="-d";
    val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(1,val);
    args[1]="-z";
    val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,val);
  }
{
    String[] args=new String[2];
    args[0]="-mkdir";
    args[1]="/testDFSShell/dir1";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,val);
    String[] args1=new String[3];
    args1[0]="-cp";
    args1[1]="/testDFSShell/dir1";
    args1[2]="/testDFSShell/dir1/dir2";
    val=0;
    try {
      val=shell.run(args1);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(1,val);
    args1[0]="-cp";
    args1[1]="/testDFSShell/dir1";
    args1[2]="/testDFSShell/dir1foo";
    val=-1;
    try {
      val=shell.run(args1);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,val);
    args1[0]="-cp";
    args1[1]="/";
    args1[2]="/test";
    val=0;
    try {
      val=shell.run(args1);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(1,val);
  }
{
    String[] args=new String[3];
    args[0]="-test";
    args[1]="-f";
    args[2]="/testDFSShell/mkdirs/noFileHere";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(1,val);
  }
{
    String[] args=new String[3];
    args[0]="-test";
    args[1]="-f";
    args[2]="/testDFSShell/mkdirs";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(1,val);
  }
{
    writeFile(dfs,myFile);
    assertTrue(dfs.exists(myFile));
    String[] args=new String[3];
    args[0]="-test";
    args[1]="-f";
    args[2]=myFile.toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,val);
  }
{
    String[] args=new String[3];
    args[0]="-test";
    args[1]="-s";
    args[2]="/testDFSShell/mkdirs/noFileHere";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(1,val);
  }
{
    String[] args=new String[3];
    args[0]="-test";
    args[1]="-s";
    args[2]="/testDFSShell/mkdirs/isFileHere";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(1,val);
  }
{
    String[] args=new String[3];
    args[0]="-test";
    args[1]="-s";
    args[2]=myFile.toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,val);
  }
{
    Path permDir=new Path("/testDFSShell/permDir");
    Path permFile=new Path("/testDFSShell/permDir/permFile");
    mkdir(dfs,permDir);
    writeFile(dfs,permFile);
    final String[] wargs=new String[3];
    wargs[0]="-test";
    wargs[1]="-w";
    wargs[2]=permDir.toString();
    int val=-1;
    try {
      val=shell.run(wargs);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,val);
    final String[] rargs=new String[3];
    rargs[0]="-test";
    rargs[1]="-r";
    rargs[2]=permFile.toString();
    try {
      val=shell.run(rargs);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,val);
    runCmd(shell,"-chmod","600",permFile.toString());
    UserGroupInformation smokeUser=UserGroupInformation.createUserForTesting("smokeUser",new String[]{"hadoop"});
    smokeUser.doAs(new PrivilegedExceptionAction<String>(){
      @Override public String run() throws Exception {
        FsShell shell=new FsShell(dfs.getConf());
        int exitCode=shell.run(rargs);
        assertEquals(1,exitCode);
        return null;
      }
    }
);
    runCmd(shell,"-chown","-R","not_allowed",permDir.toString());
    runCmd(shell,"-chmod","-R","700",permDir.toString());
    smokeUser.doAs(new PrivilegedExceptionAction<String>(){
      @Override public String run() throws Exception {
        FsShell shell=new FsShell(dfs.getConf());
        int exitCode=shell.run(wargs);
        assertEquals(1,exitCode);
        return null;
      }
    }
);
    dfs.delete(permDir,true);
  }
}
