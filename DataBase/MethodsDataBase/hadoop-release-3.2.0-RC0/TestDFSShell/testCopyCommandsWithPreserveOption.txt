@Test(timeout=120000) public void testCopyCommandsWithPreserveOption() throws Exception {
  FsShell shell=null;
  final String testdir="/tmp/TestDFSShell-testCopyCommandsWithPreserveOption-" + counter.getAndIncrement();
  final Path hdfsTestDir=new Path(testdir);
  try {
    dfs.mkdirs(hdfsTestDir);
    Path src=new Path(hdfsTestDir,"srcfile");
    dfs.create(src).close();
    dfs.setAcl(src,Lists.newArrayList(aclEntry(ACCESS,USER,ALL),aclEntry(ACCESS,USER,"foo",ALL),aclEntry(ACCESS,GROUP,READ_EXECUTE),aclEntry(ACCESS,GROUP,"bar",READ_EXECUTE),aclEntry(ACCESS,OTHER,EXECUTE)));
    FileStatus status=dfs.getFileStatus(src);
    final long mtime=status.getModificationTime();
    final long atime=status.getAccessTime();
    final String owner=status.getOwner();
    final String group=status.getGroup();
    final FsPermission perm=status.getPermission();
    dfs.setXAttr(src,USER_A1,USER_A1_VALUE);
    dfs.setXAttr(src,TRUSTED_A1,TRUSTED_A1_VALUE);
    shell=new FsShell(dfs.getConf());
    Path target1=new Path(hdfsTestDir,"targetfile1");
    String[] argv=new String[]{"-cp","-p",src.toUri().toString(),target1.toUri().toString()};
    int ret=ToolRunner.run(shell,argv);
    assertEquals("cp -p is not working",SUCCESS,ret);
    FileStatus targetStatus=dfs.getFileStatus(target1);
    assertEquals(mtime,targetStatus.getModificationTime());
    assertEquals(atime,targetStatus.getAccessTime());
    assertEquals(owner,targetStatus.getOwner());
    assertEquals(group,targetStatus.getGroup());
    FsPermission targetPerm=targetStatus.getPermission();
    assertTrue(perm.equals(targetPerm));
    Map<String,byte[]> xattrs=dfs.getXAttrs(target1);
    assertTrue(xattrs.isEmpty());
    List<AclEntry> acls=dfs.getAclStatus(target1).getEntries();
    assertTrue(acls.isEmpty());
    assertFalse(targetStatus.hasAcl());
    Path target2=new Path(hdfsTestDir,"targetfile2");
    argv=new String[]{"-cp","-ptop",src.toUri().toString(),target2.toUri().toString()};
    ret=ToolRunner.run(shell,argv);
    assertEquals("cp -ptop is not working",SUCCESS,ret);
    targetStatus=dfs.getFileStatus(target2);
    assertEquals(mtime,targetStatus.getModificationTime());
    assertEquals(atime,targetStatus.getAccessTime());
    assertEquals(owner,targetStatus.getOwner());
    assertEquals(group,targetStatus.getGroup());
    targetPerm=targetStatus.getPermission();
    assertTrue(perm.equals(targetPerm));
    xattrs=dfs.getXAttrs(target2);
    assertTrue(xattrs.isEmpty());
    acls=dfs.getAclStatus(target2).getEntries();
    assertTrue(acls.isEmpty());
    assertFalse(targetStatus.hasAcl());
    Path target3=new Path(hdfsTestDir,"targetfile3");
    argv=new String[]{"-cp","-ptopx",src.toUri().toString(),target3.toUri().toString()};
    ret=ToolRunner.run(shell,argv);
    assertEquals("cp -ptopx is not working",SUCCESS,ret);
    targetStatus=dfs.getFileStatus(target3);
    assertEquals(mtime,targetStatus.getModificationTime());
    assertEquals(atime,targetStatus.getAccessTime());
    assertEquals(owner,targetStatus.getOwner());
    assertEquals(group,targetStatus.getGroup());
    targetPerm=targetStatus.getPermission();
    assertTrue(perm.equals(targetPerm));
    xattrs=dfs.getXAttrs(target3);
    assertEquals(xattrs.size(),2);
    assertArrayEquals(USER_A1_VALUE,xattrs.get(USER_A1));
    assertArrayEquals(TRUSTED_A1_VALUE,xattrs.get(TRUSTED_A1));
    acls=dfs.getAclStatus(target3).getEntries();
    assertTrue(acls.isEmpty());
    assertFalse(targetStatus.hasAcl());
    Path target4=new Path(hdfsTestDir,"targetfile4");
    argv=new String[]{"-cp","-ptopa",src.toUri().toString(),target4.toUri().toString()};
    ret=ToolRunner.run(shell,argv);
    assertEquals("cp -ptopa is not working",SUCCESS,ret);
    targetStatus=dfs.getFileStatus(target4);
    assertEquals(mtime,targetStatus.getModificationTime());
    assertEquals(atime,targetStatus.getAccessTime());
    assertEquals(owner,targetStatus.getOwner());
    assertEquals(group,targetStatus.getGroup());
    targetPerm=targetStatus.getPermission();
    assertTrue(perm.equals(targetPerm));
    xattrs=dfs.getXAttrs(target4);
    assertTrue(xattrs.isEmpty());
    acls=dfs.getAclStatus(target4).getEntries();
    assertFalse(acls.isEmpty());
    assertTrue(targetStatus.hasAcl());
    assertEquals(dfs.getAclStatus(src),dfs.getAclStatus(target4));
    Path target5=new Path(hdfsTestDir,"targetfile5");
    argv=new String[]{"-cp","-ptoa",src.toUri().toString(),target5.toUri().toString()};
    ret=ToolRunner.run(shell,argv);
    assertEquals("cp -ptoa is not working",SUCCESS,ret);
    targetStatus=dfs.getFileStatus(target5);
    assertEquals(mtime,targetStatus.getModificationTime());
    assertEquals(atime,targetStatus.getAccessTime());
    assertEquals(owner,targetStatus.getOwner());
    assertEquals(group,targetStatus.getGroup());
    targetPerm=targetStatus.getPermission();
    assertTrue(perm.equals(targetPerm));
    xattrs=dfs.getXAttrs(target5);
    assertTrue(xattrs.isEmpty());
    acls=dfs.getAclStatus(target5).getEntries();
    assertFalse(acls.isEmpty());
    assertTrue(targetStatus.hasAcl());
    assertEquals(dfs.getAclStatus(src),dfs.getAclStatus(target5));
  }
  finally {
    if (null != shell) {
      shell.close();
    }
  }
}
