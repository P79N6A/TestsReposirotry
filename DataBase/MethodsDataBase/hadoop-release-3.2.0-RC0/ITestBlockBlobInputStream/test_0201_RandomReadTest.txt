@Test public void test_0201_RandomReadTest() throws Exception {
  assumeHugeFileExists();
  try (FSDataInputStream inputStreamV1=accountUsingInputStreamV1.getFileSystem().open(TEST_FILE_PATH);FSDataInputStream inputStreamV2=accountUsingInputStreamV2.getFileSystem().open(TEST_FILE_PATH)){
    final int bufferSize=4 * KILOBYTE;
    byte[] bufferV1=new byte[bufferSize];
    byte[] bufferV2=new byte[bufferV1.length];
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    inputStreamV1.seek(0);
    inputStreamV2.seek(0);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    int seekPosition=2 * KILOBYTE;
    inputStreamV1.seek(seekPosition);
    inputStreamV2.seek(seekPosition);
    inputStreamV1.seek(0);
    inputStreamV2.seek(0);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    seekPosition=5 * KILOBYTE;
    inputStreamV1.seek(seekPosition);
    inputStreamV2.seek(seekPosition);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    seekPosition=10 * KILOBYTE;
    inputStreamV1.seek(seekPosition);
    inputStreamV2.seek(seekPosition);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
    seekPosition=4100 * KILOBYTE;
    inputStreamV1.seek(seekPosition);
    inputStreamV2.seek(seekPosition);
    verifyConsistentReads(inputStreamV1,inputStreamV2,bufferV1,bufferV2);
  }
 }
