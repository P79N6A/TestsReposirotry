/** 
 * Test the case where one of the loggers misses a finalizeLogSegment() call, and then misses the next startLogSegment() call before coming back to life. Previously, this caused it to keep on writing to the old log segment, such that one logger had eg edits_1-10 while the others had edits_1-5 and edits_6-10. This caused recovery to fail in certain cases.
 */
@Test public void testMissFinalizeAndNextStart() throws Exception {
  futureThrows(new IOException("injected")).when(spies.get(0)).finalizeLogSegment(Mockito.eq(1L),Mockito.eq(3L));
  futureThrows(new IOException("injected")).when(spies.get(0)).startLogSegment(Mockito.eq(4L),Mockito.eq(NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION));
  failLoggerAtTxn(spies.get(1),4L);
  writeSegment(cluster,qjm,1,3,true);
  EditLogOutputStream stm=qjm.startLogSegment(4,NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION);
  try {
    writeTxns(stm,4,1);
    fail("Did not fail to write");
  }
 catch (  QuorumException qe) {
    GenericTestUtils.assertExceptionContains("Writer out of sync",qe);
  }
 finally {
    stm.abort();
    qjm.close();
  }
  cluster.getJournalNode(2).stopAndJoin(0);
  qjm=createSpyingQJM();
  long recovered=QJMTestUtil.recoverAndReturnLastTxn(qjm);
  assertEquals(3L,recovered);
}
