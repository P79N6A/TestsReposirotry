@Test public void testSpaceQuotaExceptionOnFlush() throws Exception {
  GenericTestUtils.setLogLevel(DFSOutputStream.LOG,Level.TRACE);
  GenericTestUtils.setLogLevel(DataStreamer.LOG,Level.TRACE);
  GenericTestUtils.setLogLevel(DFSClient.LOG,Level.TRACE);
  final DFSAdmin dfsAdmin=new DFSAdmin(conf);
  final Path dir=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
  assertTrue(dfs.mkdirs(dir));
  final String[] args=new String[]{"-setSpaceQuota","1",dir.toString()};
  assertEquals(0,ToolRunner.run(dfsAdmin,args));
  Path testFile=new Path(dir,"file");
  FSDataOutputStream stream=dfs.create(testFile);
  final LeaseRenewer leaseRenewer=dfs.getClient().getLeaseRenewer();
  stream.write("whatever".getBytes());
  try {
    stream.hflush();
    fail("flush should fail");
  }
 catch (  DSQuotaExceededException expected) {
  }
  try {
    stream.close();
    fail("close should fail too");
  }
 catch (  DSQuotaExceededException expected) {
  }
  GenericTestUtils.setLogLevel(LeaseRenewer.LOG,Level.TRACE);
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      LOG.info("LeaseRenewer: {}",leaseRenewer);
      return leaseRenewer.isEmpty();
    }
  }
,100,10000);
  assertEquals(0,cluster.getNamesystem().getNumFilesUnderConstruction());
}
