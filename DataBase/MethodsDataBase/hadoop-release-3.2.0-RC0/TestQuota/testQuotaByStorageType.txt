/** 
 * Test quota by storage type.
 */
@Test public void testQuotaByStorageType() throws Exception {
  final Path parent=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
  assertTrue(dfs.mkdirs(parent));
  int fileLen=1024;
  short replication=3;
  int fileSpace=fileLen * replication;
  final Path quotaDir20=new Path(parent,"nqdir0/qdir1/qdir20");
  assertTrue(dfs.mkdirs(quotaDir20));
  dfs.setQuota(quotaDir20,HdfsConstants.QUOTA_DONT_SET,6 * fileSpace);
  Path file=new Path(quotaDir20,"fileDir/file1");
  DFSTestUtil.createFile(dfs,file,fileLen * 3,replication,0);
  dfs.delete(file,false);
  dfs.setStoragePolicy(quotaDir20,HdfsConstants.HOT_STORAGE_POLICY_NAME);
  dfs.setQuotaByStorageType(quotaDir20,StorageType.DEFAULT,2 * fileSpace);
  boolean hasException=false;
  try {
    DFSTestUtil.createFile(dfs,file,fileLen * 3,replication,0);
  }
 catch (  QuotaByStorageTypeExceededException e) {
    hasException=true;
  }
  assertTrue(hasException);
  dfs.delete(file,false);
  dfs.setQuotaByStorageType(quotaDir20,StorageType.DEFAULT,6 * fileSpace);
}
