/** 
 * Test quota related commands:  setQuota, clrQuota, setSpaceQuota, clrSpaceQuota, and count 
 */
@Test public void testQuotaCommands() throws Exception {
  DFSAdmin admin=new DFSAdmin(conf);
  final Path dir=new Path(PathUtils.getTestDir(getClass()).getPath(),GenericTestUtils.getMethodName());
  assertTrue(dfs.mkdirs(dir));
  final int fileLen=1024;
  final short replication=5;
  final long spaceQuota=fileLen * replication * 15 / 8;
  final Path parent=new Path(dir,"test");
  assertTrue(dfs.mkdirs(parent));
  String[] args;
  args=new String[]{"-setQuota","3K",parent.toString()};
  runCommand(admin,args,false);
  args=new String[]{"-setQuota","3m",parent.toString()};
  runCommand(admin,args,false);
  args=new String[]{"-setQuota","3",parent.toString()};
  runCommand(admin,args,false);
  runCommand(admin,false,"-setSpaceQuota","2t",parent.toString());
  assertEquals(2L << 40,dfs.getContentSummary(parent).getSpaceQuota());
  runCommand(admin,false,"-setSpaceQuota",Long.toString(spaceQuota),parent.toString());
  final Path childDir0=new Path(parent,"data0");
  assertTrue(dfs.mkdirs(childDir0));
  final Path childFile0=new Path(parent,"datafile0");
  DFSTestUtil.createFile(dfs,childFile0,fileLen,replication,0);
  ContentSummary c=dfs.getContentSummary(parent);
  compareQuotaUsage(c,dfs,parent);
  assertEquals(c.getFileCount() + c.getDirectoryCount(),3);
  assertEquals(c.getQuota(),3);
  assertEquals(c.getSpaceConsumed(),fileLen * replication);
  assertEquals(c.getSpaceQuota(),spaceQuota);
  c=dfs.getContentSummary(childDir0);
  compareQuotaUsage(c,dfs,childDir0);
  assertEquals(c.getFileCount() + c.getDirectoryCount(),1);
  assertEquals(c.getQuota(),-1);
  c=dfs.getContentSummary(parent);
  compareQuotaUsage(c,dfs,parent);
  assertEquals(c.getSpaceConsumed(),fileLen * replication);
  final Path childDir1=new Path(parent,"data1");
  boolean hasException=false;
  try {
    assertFalse(dfs.mkdirs(childDir1));
  }
 catch (  QuotaExceededException e) {
    hasException=true;
  }
  assertTrue(hasException);
  OutputStream fout;
  final Path childFile1=new Path(parent,"datafile1");
  hasException=false;
  try {
    fout=dfs.create(childFile1);
  }
 catch (  QuotaExceededException e) {
    hasException=true;
  }
  assertTrue(hasException);
  runCommand(admin,new String[]{"-clrQuota",parent.toString()},false);
  c=dfs.getContentSummary(parent);
  compareQuotaUsage(c,dfs,parent);
  assertEquals(c.getQuota(),-1);
  assertEquals(c.getSpaceQuota(),spaceQuota);
  runCommand(admin,new String[]{"-clrQuota",childDir0.toString()},false);
  c=dfs.getContentSummary(childDir0);
  compareQuotaUsage(c,dfs,childDir0);
  assertEquals(c.getQuota(),-1);
  fout=dfs.create(childFile1,replication);
  try {
    fout.write(new byte[fileLen]);
    fout.close();
    Assert.fail();
  }
 catch (  QuotaExceededException e) {
    IOUtils.closeStream(fout);
  }
  dfs.delete(childFile1,false);
  runCommand(admin,false,"-clrSpaceQuota",parent.toString());
  c=dfs.getContentSummary(parent);
  compareQuotaUsage(c,dfs,parent);
  assertEquals(c.getQuota(),-1);
  assertEquals(c.getSpaceQuota(),-1);
  DFSTestUtil.createFile(dfs,childFile1,fileLen,replication,0);
  args=new String[]{"-setQuota","1",parent.toString()};
  runCommand(admin,args,false);
  runCommand(admin,false,"-setSpaceQuota",Integer.toString(fileLen),args[2]);
  args=new String[]{"-setQuota","1",childDir0.toString()};
  runCommand(admin,args,false);
  hasException=false;
  try {
    assertFalse(dfs.mkdirs(new Path(childDir0,"in")));
  }
 catch (  QuotaExceededException e) {
    hasException=true;
  }
  assertTrue(hasException);
  c=dfs.getContentSummary(childDir0);
  compareQuotaUsage(c,dfs,childDir0);
  assertEquals(c.getDirectoryCount() + c.getFileCount(),1);
  assertEquals(c.getQuota(),1);
  Path nonExistentPath=new Path(dir,"test1");
  assertFalse(dfs.exists(nonExistentPath));
  args=new String[]{"-setQuota","1",nonExistentPath.toString()};
  runCommand(admin,args,true);
  runCommand(admin,true,"-setSpaceQuota","1g",nonExistentPath.toString());
  assertTrue(dfs.isFile(childFile0));
  args[1]=childFile0.toString();
  runCommand(admin,args,true);
  runCommand(admin,true,"-setSpaceQuota","1t",args[1]);
  args[0]="-clrQuota";
  runCommand(admin,args,true);
  runCommand(admin,true,"-clrSpaceQuota",args[1]);
  args[1]=nonExistentPath.toString();
  runCommand(admin,args,true);
  runCommand(admin,true,"-clrSpaceQuota",args[1]);
  args=new String[]{"-setQuota","0",parent.toString()};
  runCommand(admin,args,true);
  runCommand(admin,false,"-setSpaceQuota","0",args[2]);
  args[1]="-1";
  runCommand(admin,args,true);
  runCommand(admin,true,"-setSpaceQuota",args[1],args[2]);
  args[1]=String.valueOf(Long.MAX_VALUE + 1L);
  runCommand(admin,args,true);
  runCommand(admin,true,"-setSpaceQuota",args[1],args[2]);
  args[1]="33aa1.5";
  runCommand(admin,args,true);
  runCommand(admin,true,"-setSpaceQuota",args[1],args[2]);
  runCommand(admin,true,"-setSpaceQuota",(Long.MAX_VALUE / 1024 / 1024 + 1024) + "m",args[2]);
  final String username="userxx";
  UserGroupInformation ugi=UserGroupInformation.createUserForTesting(username,new String[]{"groupyy"});
  final String[] args2=args.clone();
  ugi.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      assertEquals("Not running as new user",username,UserGroupInformation.getCurrentUser().getShortUserName());
      DFSAdmin userAdmin=new DFSAdmin(conf);
      args2[1]="100";
      runCommand(userAdmin,args2,true);
      runCommand(userAdmin,true,"-setSpaceQuota","1g",args2[2]);
      String[] args3=new String[]{"-clrQuota",parent.toString()};
      runCommand(userAdmin,args3,true);
      runCommand(userAdmin,true,"-clrSpaceQuota",args3[1]);
      return null;
    }
  }
);
  runCommand(admin,true,"-clrQuota","/");
  runCommand(admin,false,"-setQuota","1000000","/");
  runCommand(admin,true,"-clrQuota","/");
  runCommand(admin,false,"-clrSpaceQuota","/");
  runCommand(admin,new String[]{"-clrQuota",parent.toString()},false);
  runCommand(admin,false,"-clrSpaceQuota",parent.toString());
  final Path childDir2=new Path(parent,"data2");
  assertTrue(dfs.mkdirs(childDir2));
  final Path childFile2=new Path(childDir2,"datafile2");
  final Path childFile3=new Path(childDir2,"datafile3");
  final long spaceQuota2=DEFAULT_BLOCK_SIZE * replication;
  final long fileLen2=DEFAULT_BLOCK_SIZE;
  runCommand(admin,false,"-setSpaceQuota",Long.toString(spaceQuota2),childDir2.toString());
  runCommand(admin,false,"-clrSpaceQuota",childDir2.toString());
  DFSTestUtil.createFile(dfs,childFile2,fileLen2,replication,0);
  runCommand(admin,false,"-setSpaceQuota",Long.toString(spaceQuota2),childDir2.toString());
  hasException=false;
  try {
    DFSTestUtil.createFile(dfs,childFile3,fileLen2,replication,0);
  }
 catch (  DSQuotaExceededException e) {
    hasException=true;
  }
  assertTrue(hasException);
  final Path childFile4=new Path(dir,"datafile2");
  final Path childFile5=new Path(dir,"datafile3");
  runCommand(admin,true,"-clrQuota","/");
  runCommand(admin,false,"-clrSpaceQuota","/");
  runCommand(admin,false,"-setSpaceQuota",Long.toString(spaceQuota2),"/");
  runCommand(admin,false,"-clrSpaceQuota","/");
  DFSTestUtil.createFile(dfs,childFile4,fileLen2,replication,0);
  runCommand(admin,false,"-setSpaceQuota",Long.toString(spaceQuota2),"/");
  hasException=false;
  try {
    DFSTestUtil.createFile(dfs,childFile5,fileLen2,replication,0);
  }
 catch (  DSQuotaExceededException e) {
    hasException=true;
  }
  assertTrue(hasException);
  assertEquals(5,cluster.getNamesystem().getFSDirectory().getYieldCount());
  runCommand(admin,false,"-clrSpaceQuota","/");
}
