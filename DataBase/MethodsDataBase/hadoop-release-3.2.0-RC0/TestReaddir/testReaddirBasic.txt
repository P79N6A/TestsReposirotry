@Test public void testReaddirBasic() throws IOException {
  HdfsFileStatus status=nn.getRpcServer().getFileInfo(testdir);
  long dirId=status.getFileId();
  int namenodeId=Nfs3Utils.getNamenodeId(config);
  XDR xdr_req=new XDR();
  FileHandle handle=new FileHandle(dirId,namenodeId);
  handle.serialize(xdr_req);
  xdr_req.writeLongAsHyper(0);
  xdr_req.writeLongAsHyper(0);
  xdr_req.writeInt(100);
  READDIR3Response response=nfsd.readdir(xdr_req.asReadOnlyWrap(),securityHandler,new InetSocketAddress("localhost",1234));
  List<Entry3> dirents=response.getDirList().getEntries();
  assertTrue(dirents.size() == 5);
  status=nn.getRpcServer().getFileInfo(testdir + "/f2");
  long f2Id=status.getFileId();
  xdr_req=new XDR();
  handle=new FileHandle(dirId,namenodeId);
  handle.serialize(xdr_req);
  xdr_req.writeLongAsHyper(f2Id);
  xdr_req.writeLongAsHyper(0);
  xdr_req.writeInt(100);
  response=nfsd.readdir(xdr_req.asReadOnlyWrap(),securityHandler,new InetSocketAddress("localhost",1234));
  dirents=response.getDirList().getEntries();
  assertTrue(dirents.size() == 1);
  Entry3 entry=dirents.get(0);
  assertTrue(entry.getName().equals("f3"));
  hdfs.delete(new Path(testdir + "/f2"),false);
  response=nfsd.readdir(xdr_req.asReadOnlyWrap(),securityHandler,new InetSocketAddress("localhost",1234));
  dirents=response.getDirList().getEntries();
  assertTrue(dirents.size() == 2);
}
