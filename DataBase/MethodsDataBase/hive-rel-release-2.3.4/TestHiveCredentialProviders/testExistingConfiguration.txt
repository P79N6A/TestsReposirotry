@Test public void testExistingConfiguration() throws Exception {
  jobConf.set(JobConf.MAPRED_MAP_TASK_ENV,"k1=v1, k2=v2, HADOOP_CREDSTORE_PASSWORD=test");
  setupConfigs(false,true,false,true);
  HiveConfUtil.updateJobCredentialProviders(jobConf);
  assertEquals("v1",getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),"k1"));
  assertEquals("v2",getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),"k2"));
  resetConfig();
  jobConf.set(JobConf.MAPRED_MAP_TASK_ENV,"k1=v1, HADOOP_CREDSTORE_PASSWORD=test, k2=v2");
  setupConfigs(false,true,false,true);
  HiveConfUtil.updateJobCredentialProviders(jobConf);
  assertEquals("v1",getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),"k1"));
  assertEquals("v2",getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),"k2"));
  resetConfig();
  jobConf.set(JobConf.MAPRED_MAP_TASK_ENV,"HADOOP_CREDSTORE_PASSWORD=test, k1=v1, k2=v2");
  setupConfigs(false,true,false,true);
  HiveConfUtil.updateJobCredentialProviders(jobConf);
  assertEquals("v1",getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),"k1"));
  assertEquals("v2",getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),"k2"));
}
