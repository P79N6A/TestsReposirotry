@Test public void testRecyclePartTable() throws Exception {
  String dbName="db1";
  client.dropDatabase(dbName,true,true);
  Database db=new Database();
  db.setName(dbName);
  client.createDatabase(db);
  String tblName="t1";
  List<FieldSchema> columns=new ArrayList<FieldSchema>();
  columns.add(new FieldSchema("foo","string",""));
  columns.add(new FieldSchema("bar","string",""));
  List<FieldSchema> partColumns=new ArrayList<FieldSchema>();
  partColumns.add(new FieldSchema("dt","string",""));
  SerDeInfo serdeInfo=new SerDeInfo("LBCSerDe",LazyBinaryColumnarSerDe.class.getCanonicalName(),new HashMap<String,String>());
  StorageDescriptor sd=new StorageDescriptor(columns,null,"org.apache.hadoop.hive.ql.io.orc.OrcInputFormat","org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat",false,0,serdeInfo,null,null,null);
  Map<String,String> tableParameters=new HashMap<String,String>();
  Table tbl=new Table(tblName,dbName,"",0,0,0,sd,partColumns,tableParameters,"","","");
  client.createTable(tbl);
  List<String> values=Arrays.asList("20160101");
  Partition part1=createPartition(dbName,tblName,columns,values,serdeInfo);
  client.add_partition(part1);
  values=Arrays.asList("20160102");
  Partition part2=createPartition(dbName,tblName,columns,values,serdeInfo);
  client.add_partition(part2);
  values=Arrays.asList("20160103");
  Partition part3=createPartition(dbName,tblName,columns,values,serdeInfo);
  client.add_partition(part3);
  Path part1Path=new Path(warehouse.getDefaultPartitionPath(db,tblName,ImmutableMap.of("dt","20160101")),"part");
  createFile(part1Path,"p1");
  String path1Chksum=ReplChangeManager.getChksumString(part1Path,fs);
  Path part2Path=new Path(warehouse.getDefaultPartitionPath(db,tblName,ImmutableMap.of("dt","20160102")),"part");
  createFile(part2Path,"p2");
  String path2Chksum=ReplChangeManager.getChksumString(part2Path,fs);
  Path part3Path=new Path(warehouse.getDefaultPartitionPath(db,tblName,ImmutableMap.of("dt","20160103")),"part");
  createFile(part3Path,"p3");
  String path3Chksum=ReplChangeManager.getChksumString(part3Path,fs);
  Assert.assertTrue(part1Path.getFileSystem(hiveConf).exists(part1Path));
  Assert.assertTrue(part2Path.getFileSystem(hiveConf).exists(part2Path));
  Assert.assertTrue(part3Path.getFileSystem(hiveConf).exists(part3Path));
  ReplChangeManager cm=ReplChangeManager.getInstance(hiveConf);
  int ret=cm.recycle(part1Path,false);
  Assert.assertEquals(ret,1);
  Path cmPart1Path=ReplChangeManager.getCMPath(part1Path,hiveConf,path1Chksum);
  Assert.assertTrue(cmPart1Path.getFileSystem(hiveConf).exists(cmPart1Path));
  client.dropPartition(dbName,tblName,Arrays.asList("20160102"));
  Assert.assertFalse(part2Path.getFileSystem(hiveConf).exists(part2Path));
  Path cmPart2Path=ReplChangeManager.getCMPath(part2Path,hiveConf,path2Chksum);
  Assert.assertTrue(cmPart2Path.getFileSystem(hiveConf).exists(cmPart2Path));
  client.dropTable(dbName,tblName);
  Assert.assertFalse(part3Path.getFileSystem(hiveConf).exists(part3Path));
  Path cmPart3Path=ReplChangeManager.getCMPath(part3Path,hiveConf,path3Chksum);
  Assert.assertTrue(cmPart3Path.getFileSystem(hiveConf).exists(cmPart3Path));
  client.dropDatabase(dbName,true,true);
}
