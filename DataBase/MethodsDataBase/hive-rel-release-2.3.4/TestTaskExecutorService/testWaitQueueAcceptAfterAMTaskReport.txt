@Test(timeout=10000) public void testWaitQueueAcceptAfterAMTaskReport() throws InterruptedException {
  TaskExecutorServiceForTest taskExecutorService=new TaskExecutorServiceForTest(1,2,ShortestJobFirstComparator.class.getName(),true);
  MockRequest r1=createMockRequest(1,1,100,200,true,20000l);
  MockRequest r2=createMockRequest(2,1,1,200,2000,true,20000l);
  MockRequest r3=createMockRequest(3,1,2,300,420,true,20000l);
  MockRequest r4=createMockRequest(4,1,3,400,510,false,20000l);
  taskExecutorService.init(new Configuration());
  taskExecutorService.start();
  try {
    Scheduler.SubmissionState submissionState;
    submissionState=taskExecutorService.schedule(r1);
    assertEquals(Scheduler.SubmissionState.ACCEPTED,submissionState);
    r1.awaitStart();
    submissionState=taskExecutorService.schedule(r2);
    assertEquals(Scheduler.SubmissionState.ACCEPTED,submissionState);
    submissionState=taskExecutorService.schedule(r3);
    assertEquals(Scheduler.SubmissionState.ACCEPTED,submissionState);
    submissionState=taskExecutorService.schedule(r4);
    assertEquals(Scheduler.SubmissionState.REJECTED,submissionState);
    taskExecutorService.fragmentCompleting(r1.getRequestId(),SchedulerFragmentCompletingListener.State.SUCCESS);
    submissionState=taskExecutorService.schedule(r4);
    assertEquals(Scheduler.SubmissionState.ACCEPTED,submissionState);
    assertEquals(3,taskExecutorService.waitQueue.size());
    assertEquals(1,taskExecutorService.completingFragmentMap.size());
    r1.complete();
    r1.awaitEnd();
    awaitStartAndSchedulerRun(r2,taskExecutorService);
    assertEquals(0,taskExecutorService.completingFragmentMap.size());
  }
  finally {
    taskExecutorService.shutDown(false);
  }
}
