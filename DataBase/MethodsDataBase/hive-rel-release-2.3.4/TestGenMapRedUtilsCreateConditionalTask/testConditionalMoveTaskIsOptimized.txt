@Test public void testConditionalMoveTaskIsOptimized() throws SemanticException {
  hiveConf.set(HiveConf.ConfVars.HIVE_BLOBSTORE_OPTIMIZATIONS_ENABLED.varname,"true");
  Path sinkDirName=new Path("s3a://bucket/scratch/-ext-10002");
  FileSinkOperator fileSinkOperator=createFileSinkOperator(sinkDirName);
  Path finalDirName=new Path("s3a://bucket/scratch/-ext-10000");
  Path tableLocation=new Path("s3a://bucket/warehouse/table");
  Task<MoveWork> moveTask=createMoveTask(finalDirName,tableLocation);
  List<Task<MoveWork>> moveTaskList=Arrays.asList(moveTask);
  GenMapRedUtils.createMRWorkForMergingFiles(fileSinkOperator,finalDirName,null,moveTaskList,hiveConf,dummyMRTask);
  ConditionalTask conditionalTask=(ConditionalTask)dummyMRTask.getChildTasks().get(0);
  Task<? extends Serializable> moveOnlyTask=conditionalTask.getListTasks().get(0);
  Task<? extends Serializable> mergeOnlyTask=conditionalTask.getListTasks().get(1);
  Task<? extends Serializable> mergeAndMoveTask=conditionalTask.getListTasks().get(2);
  assertNull(moveOnlyTask.getChildTasks());
  verifyMoveTask(moveOnlyTask,sinkDirName,tableLocation);
  assertEquals(1,mergeOnlyTask.getChildTasks().size());
  verifyMoveTask(mergeOnlyTask.getChildTasks().get(0),finalDirName,tableLocation);
  assertEquals(1,mergeAndMoveTask.getChildTasks().size());
  assertEquals(1,mergeAndMoveTask.getChildTasks().get(0).getChildTasks().size());
  verifyMoveTask(mergeAndMoveTask.getChildTasks().get(0),sinkDirName,finalDirName);
  verifyMoveTask(mergeAndMoveTask.getChildTasks().get(0).getChildTasks().get(0),finalDirName,tableLocation);
}
