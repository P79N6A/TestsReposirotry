@Test(expected=UnsupportedOperationException.class) public void testHadoopFileStatusAclEntries() throws IOException {
  FileSystem mockDfs=Mockito.mock(DistributedFileSystem.class);
  Path mockPath=Mockito.mock(Path.class);
  List<AclEntry> aclEntries=Lists.newArrayList();
  aclEntries.add(newAclEntry(AclEntryScope.ACCESS,AclEntryType.USER,FsAction.ALL));
  aclEntries.add(newAclEntry(AclEntryScope.ACCESS,AclEntryType.GROUP,FsAction.READ_EXECUTE));
  aclEntries.add(newAclEntry(AclEntryScope.ACCESS,AclEntryType.OTHER,FsAction.NONE));
  AclStatus aclStatus=new AclStatus.Builder().owner("dummyOwner").group("dummyGroup").stickyBit(true).addEntries(aclEntries).build();
  FileStatus mockFileStatus=Mockito.mock(FileStatus.class);
  Mockito.when(mockDfs.getAclStatus(mockPath)).thenReturn(aclStatus);
  Mockito.when(mockDfs.getFileStatus(mockPath)).thenReturn(mockFileStatus);
  sourceStatus=new HadoopFileStatus(hiveConf,mockDfs,mockPath);
  Assert.assertNotNull(sourceStatus.getAclEntries());
  Assert.assertTrue(sourceStatus.getAclEntries().size() == 3);
  Iterables.removeIf(sourceStatus.getAclEntries(),new Predicate<AclEntry>(){
    @Override public boolean apply(    AclEntry input){
      if (input.getName() == null) {
        return true;
      }
      return false;
    }
  }
);
}
