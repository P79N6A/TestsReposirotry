@Test public void testSelectOperator() throws HiveException {
  List<String> columns=new ArrayList<String>();
  columns.add("a");
  columns.add("b");
  columns.add("c");
  VectorizationContext vc=new VectorizationContext("name",columns);
  SelectDesc selDesc=new SelectDesc(false);
  List<ExprNodeDesc> colList=new ArrayList<ExprNodeDesc>();
  ExprNodeColumnDesc colDesc1=new ExprNodeColumnDesc(Long.class,"a","table",false);
  ExprNodeColumnDesc colDesc2=new ExprNodeColumnDesc(Long.class,"b","table",false);
  ExprNodeColumnDesc colDesc3=new ExprNodeColumnDesc(Long.class,"c","table",false);
  ExprNodeGenericFuncDesc plusDesc=new ExprNodeGenericFuncDesc();
  GenericUDF gudf=new GenericUDFOPPlus();
  plusDesc.setGenericUDF(gudf);
  List<ExprNodeDesc> children=new ArrayList<ExprNodeDesc>();
  children.add(colDesc1);
  children.add(colDesc2);
  plusDesc.setChildren(children);
  plusDesc.setTypeInfo(TypeInfoFactory.longTypeInfo);
  colList.add(plusDesc);
  colList.add(colDesc3);
  selDesc.setColList(colList);
  List<String> outputColNames=new ArrayList<String>();
  outputColNames.add("_col0");
  outputColNames.add("_col1");
  selDesc.setOutputColumnNames(outputColNames);
  VectorSelectDesc vectorSelectDesc=new VectorSelectDesc();
  selDesc.setVectorDesc(vectorSelectDesc);
  List<ExprNodeDesc> selectColList=selDesc.getColList();
  VectorExpression[] vectorSelectExprs=new VectorExpression[selectColList.size()];
  for (int i=0; i < selectColList.size(); i++) {
    ExprNodeDesc expr=selectColList.get(i);
    VectorExpression ve=vc.getVectorExpression(expr);
    vectorSelectExprs[i]=ve;
  }
  vectorSelectDesc.setSelectExpressions(vectorSelectExprs);
  vectorSelectDesc.setProjectedOutputColumns(new int[]{3,2});
  ValidatorVectorSelectOperator vso=new ValidatorVectorSelectOperator(new CompilationOpContext(),vc,selDesc);
  VectorizedRowBatch vrg=VectorizedRowGroupGenUtil.getVectorizedRowBatch(VectorizedRowBatch.DEFAULT_SIZE,4,17);
  vso.process(vrg,0);
}
