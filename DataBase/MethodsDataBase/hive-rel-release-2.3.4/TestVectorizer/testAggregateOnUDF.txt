@Test public void testAggregateOnUDF() throws HiveException {
  ExprNodeColumnDesc colExprA=new ExprNodeColumnDesc(Integer.class,"col1","T",false);
  ExprNodeColumnDesc colExprB=new ExprNodeColumnDesc(Integer.class,"col2","T",false);
  List<ExprNodeDesc> children=new ArrayList<ExprNodeDesc>();
  children.add(colExprA);
  ExprNodeGenericFuncDesc exprNodeDesc=new ExprNodeGenericFuncDesc(TypeInfoFactory.intTypeInfo,new GenericUDFAbs(),children);
  ArrayList<ExprNodeDesc> params=new ArrayList<ExprNodeDesc>();
  params.add(exprNodeDesc);
  List<ObjectInspector> paramOIs=new ArrayList<ObjectInspector>();
  paramOIs.add(exprNodeDesc.getWritableObjectInspector());
  AggregationDesc aggDesc=new AggregationDesc("sum",FunctionRegistry.getGenericUDAFEvaluator("sum",paramOIs,false,false),params,false,GenericUDAFEvaluator.Mode.PARTIAL1);
  ArrayList<String> outputColumnNames=new ArrayList<String>();
  outputColumnNames.add("_col0");
  GroupByDesc desc=new GroupByDesc();
  desc.setVectorDesc(new VectorGroupByDesc());
  desc.setOutputColumnNames(outputColumnNames);
  ArrayList<AggregationDesc> aggDescList=new ArrayList<AggregationDesc>();
  aggDescList.add(aggDesc);
  desc.setAggregators(aggDescList);
  ArrayList<ExprNodeDesc> grpByKeys=new ArrayList<ExprNodeDesc>();
  grpByKeys.add(colExprB);
  desc.setKeys(grpByKeys);
  Operator<? extends OperatorDesc> gbyOp=OperatorFactory.get(new CompilationOpContext(),desc);
  desc.setMode(GroupByDesc.Mode.HASH);
  Vectorizer v=new Vectorizer();
  v.testSetCurrentBaseWork(new MapWork());
  Assert.assertTrue(v.validateMapWorkOperator(gbyOp,null,false));
  VectorGroupByOperator vectorOp=(VectorGroupByOperator)v.vectorizeOperator(gbyOp,vContext,false,null);
  Assert.assertEquals(VectorUDAFSumLong.class,vectorOp.getAggregators()[0].getClass());
  VectorUDAFSumLong udaf=(VectorUDAFSumLong)vectorOp.getAggregators()[0];
  Assert.assertEquals(FuncAbsLongToLong.class,udaf.getInputExpression().getClass());
}
