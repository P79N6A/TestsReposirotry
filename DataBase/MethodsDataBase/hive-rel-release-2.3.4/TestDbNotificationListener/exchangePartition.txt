@Test public void exchangePartition() throws Exception {
  String dbName="default";
  List<FieldSchema> cols=new ArrayList<FieldSchema>();
  cols.add(new FieldSchema("col1","int","nocomment"));
  List<FieldSchema> partCols=new ArrayList<FieldSchema>();
  partCols.add(new FieldSchema("part","int",""));
  SerDeInfo serde=new SerDeInfo("serde","seriallib",null);
  StorageDescriptor sd1=new StorageDescriptor(cols,"file:/tmp/1","input","output",false,0,serde,null,null,emptyParameters);
  Table tab1=new Table("tab1",dbName,"me",startTime,startTime,0,sd1,partCols,emptyParameters,null,null,null);
  msClient.createTable(tab1);
  NotificationEventResponse rsp=msClient.getNextNotification(firstEventId,0,null);
  assertEquals(1,rsp.getEventsSize());
  StorageDescriptor sd2=new StorageDescriptor(cols,"file:/tmp/2","input","output",false,0,serde,null,null,emptyParameters);
  Table tab2=new Table("tab2",dbName,"me",startTime,startTime,0,sd2,partCols,emptyParameters,null,null,null);
  msClient.createTable(tab2);
  rsp=msClient.getNextNotification(firstEventId + 1,0,null);
  assertEquals(1,rsp.getEventsSize());
  StorageDescriptor sd1part=new StorageDescriptor(cols,"file:/tmp/1/part=1","input","output",false,0,serde,null,null,emptyParameters);
  StorageDescriptor sd2part=new StorageDescriptor(cols,"file:/tmp/1/part=2","input","output",false,0,serde,null,null,emptyParameters);
  StorageDescriptor sd3part=new StorageDescriptor(cols,"file:/tmp/1/part=3","input","output",false,0,serde,null,null,emptyParameters);
  Partition part1=new Partition(Arrays.asList("1"),"default",tab1.getTableName(),startTime,startTime,sd1part,emptyParameters);
  Partition part2=new Partition(Arrays.asList("2"),"default",tab1.getTableName(),startTime,startTime,sd2part,emptyParameters);
  Partition part3=new Partition(Arrays.asList("3"),"default",tab1.getTableName(),startTime,startTime,sd3part,emptyParameters);
  msClient.add_partitions(Arrays.asList(part1,part2,part3));
  rsp=msClient.getNextNotification(firstEventId + 2,0,null);
  assertEquals(1,rsp.getEventsSize());
  msClient.exchange_partition(ImmutableMap.of("part","1"),dbName,tab1.getTableName(),dbName,tab2.getTableName());
  rsp=msClient.getNextNotification(firstEventId + 3,0,null);
  assertEquals(2,rsp.getEventsSize());
  NotificationEvent event=rsp.getEvents().get(0);
  assertEquals(firstEventId + 4,event.getEventId());
  assertTrue(event.getEventTime() >= startTime);
  assertEquals(EventType.ADD_PARTITION.toString(),event.getEventType());
  assertEquals(dbName,event.getDbName());
  assertEquals(tab2.getTableName(),event.getTableName());
  AddPartitionMessage addPtnMsg=md.getAddPartitionMessage(event.getMessage());
  assertEquals(dbName,addPtnMsg.getDB());
  assertEquals(tab2.getTableName(),addPtnMsg.getTable());
  Iterator<Partition> ptnIter=addPtnMsg.getPartitionObjs().iterator();
  assertTrue(ptnIter.hasNext());
  Partition msgPart=ptnIter.next();
  assertEquals(part1.getValues(),msgPart.getValues());
  assertEquals(dbName,msgPart.getDbName());
  assertEquals(tab2.getTableName(),msgPart.getTableName());
  event=rsp.getEvents().get(1);
  assertEquals(firstEventId + 5,event.getEventId());
  assertTrue(event.getEventTime() >= startTime);
  assertEquals(EventType.DROP_PARTITION.toString(),event.getEventType());
  assertEquals(dbName,event.getDbName());
  assertEquals(tab1.getTableName(),event.getTableName());
  DropPartitionMessage dropPtnMsg=md.getDropPartitionMessage(event.getMessage());
  assertEquals(dbName,dropPtnMsg.getDB());
  assertEquals(tab1.getTableName(),dropPtnMsg.getTable());
  Iterator<Map<String,String>> parts=dropPtnMsg.getPartitions().iterator();
  assertTrue(parts.hasNext());
  assertEquals(part1.getValues(),Lists.newArrayList(parts.next().values()));
  MockMetaStoreEventListener.popAndVerifyLastEventId(EventType.DROP_PARTITION,firstEventId + 5);
  MockMetaStoreEventListener.popAndVerifyLastEventId(EventType.ADD_PARTITION,firstEventId + 4);
  MockMetaStoreEventListener.popAndVerifyLastEventId(EventType.ADD_PARTITION,firstEventId + 3);
  MockMetaStoreEventListener.popAndVerifyLastEventId(EventType.CREATE_TABLE,firstEventId + 2);
  MockMetaStoreEventListener.popAndVerifyLastEventId(EventType.CREATE_TABLE,firstEventId + 1);
}
