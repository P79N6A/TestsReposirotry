@Test public void testIsPathWithinSubtree() throws IOException {
  Path splitPath=new Path("file:///user/hive/warehouse/src/data.txt");
  Path splitPathWithNoSchema=Path.getPathWithoutSchemeAndAuthority(splitPath);
  Set<Path> parents=new HashSet<>();
  FileUtils.populateParentPaths(parents,splitPath);
  FileUtils.populateParentPaths(parents,splitPathWithNoSchema);
  Path key=new Path("/user/hive/warehouse/src");
  verifyIsPathWithInSubTree(splitPath,key,false);
  verifyIsPathWithInSubTree(splitPathWithNoSchema,key,true);
  verifyIfParentsContainPath(key,parents,true);
  key=new Path("/user/hive/warehouse/src_2");
  verifyIsPathWithInSubTree(splitPath,key,false);
  verifyIsPathWithInSubTree(splitPathWithNoSchema,key,false);
  verifyIfParentsContainPath(key,parents,false);
  key=new Path("/user/hive/warehouse/src/data.txt");
  verifyIsPathWithInSubTree(splitPath,key,false);
  verifyIsPathWithInSubTree(splitPathWithNoSchema,key,true);
  verifyIfParentsContainPath(key,parents,true);
  key=new Path("file:///user/hive/warehouse/src");
  verifyIsPathWithInSubTree(splitPath,key,true);
  verifyIsPathWithInSubTree(splitPathWithNoSchema,key,false);
  verifyIfParentsContainPath(key,parents,true);
  key=new Path("file:///user/hive/warehouse/src_2");
  verifyIsPathWithInSubTree(splitPath,key,false);
  verifyIsPathWithInSubTree(splitPathWithNoSchema,key,false);
  verifyIfParentsContainPath(key,parents,false);
  key=new Path("file:///user/hive/warehouse/src/data.txt");
  verifyIsPathWithInSubTree(splitPath,key,true);
  verifyIsPathWithInSubTree(splitPathWithNoSchema,key,false);
  verifyIfParentsContainPath(key,parents,true);
}
