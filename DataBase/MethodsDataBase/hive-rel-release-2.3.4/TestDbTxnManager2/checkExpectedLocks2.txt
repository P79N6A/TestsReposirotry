/** 
 * Check to make sure we acquire proper locks for queries involving acid and non-acid tables
 */
@Test public void checkExpectedLocks2() throws Exception {
  dropTable(new String[]{"tab_acid","tab_not_acid"});
  checkCmdOnDriver(driver.run("create table if not exists tab_acid (a int, b int) partitioned by (p string) " + "clustered by (a) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='true')"));
  checkCmdOnDriver(driver.run("create table if not exists tab_not_acid (na int, nb int) partitioned by (np string) " + "clustered by (na) into 2  buckets stored as orc TBLPROPERTIES ('transactional'='false')"));
  checkCmdOnDriver(driver.run("insert into tab_acid partition(p) (a,b,p) values(1,2,'foo'),(3,4,'bar')"));
  checkCmdOnDriver(driver.run("insert into tab_not_acid partition(np) (na,nb,np) values(1,2,'blah'),(3,4,'doh')"));
  txnMgr.openTxn(ctx,"T1");
  checkCmdOnDriver(driver.compileAndRespond("select * from tab_acid inner join tab_not_acid on a = na"));
  txnMgr.acquireLocks(driver.getPlan(),ctx,"T1");
  List<ShowLocksResponseElement> locks=getLocks(txnMgr);
  Assert.assertEquals("Unexpected lock count",6,locks.size());
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_acid",null,locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_acid","p=bar",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_acid","p=foo",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_not_acid",null,locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_not_acid","np=blah",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_not_acid","np=doh",locks);
  HiveTxnManager txnMgr2=TxnManagerFactory.getTxnManagerFactory().getTxnManager(conf);
  txnMgr2.openTxn(ctx,"T2");
  checkCmdOnDriver(driver.compileAndRespond("insert into tab_not_acid partition(np='doh') values(5,6)"));
  LockState ls=((DbTxnManager)txnMgr2).acquireLocks(driver.getPlan(),ctx,"T2",false);
  locks=getLocks(txnMgr2);
  Assert.assertEquals("Unexpected lock count",7,locks.size());
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_acid",null,locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_acid","p=bar",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_acid","p=foo",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_not_acid",null,locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_not_acid","np=blah",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_not_acid","np=doh",locks);
  checkLock(LockType.EXCLUSIVE,LockState.WAITING,"default","tab_not_acid","np=doh",locks);
  conf.setBoolVar(HiveConf.ConfVars.HIVE_TXN_STRICT_LOCKING_MODE,false);
  HiveTxnManager txnMgr3=TxnManagerFactory.getTxnManagerFactory().getTxnManager(conf);
  txnMgr3.openTxn(ctx,"T3");
  checkCmdOnDriver(driver.compileAndRespond("insert into tab_not_acid partition(np='blah') values(7,8)"));
  ((DbTxnManager)txnMgr3).acquireLocks(driver.getPlan(),ctx,"T3",false);
  locks=getLocks(txnMgr3);
  Assert.assertEquals("Unexpected lock count",8,locks.size());
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_acid",null,locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_acid","p=bar",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_acid","p=foo",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_not_acid",null,locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_not_acid","np=blah",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_not_acid","np=doh",locks);
  checkLock(LockType.EXCLUSIVE,LockState.WAITING,"default","tab_not_acid","np=doh",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default","tab_not_acid","np=blah",locks);
  conf.setBoolVar(HiveConf.ConfVars.HIVE_TXN_STRICT_LOCKING_MODE,true);
}
