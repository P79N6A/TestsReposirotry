@Test public void testShowTablesLock() throws Exception {
  dropTable(new String[]{"T, T2"});
  CommandProcessorResponse cpr=driver.run("create table if not exists T (a int, b int)");
  checkCmdOnDriver(cpr);
  long txnid1=txnMgr.openTxn(ctx,"Fifer");
  checkCmdOnDriver(driver.compileAndRespond("insert into T values(1,3)"));
  txnMgr.acquireLocks(driver.getPlan(),ctx,"Fifer");
  List<ShowLocksResponseElement> locks=getLocks();
  Assert.assertEquals("Unexpected lock count",1,locks.size());
  checkLock(LockType.EXCLUSIVE,LockState.ACQUIRED,"default","t",null,locks);
  DbTxnManager txnMgr2=(DbTxnManager)TxnManagerFactory.getTxnManagerFactory().getTxnManager(conf);
  checkCmdOnDriver(driver.compileAndRespond("show tables"));
  txnMgr2.acquireLocks(driver.getPlan(),ctx,"Fidler");
  locks=getLocks();
  Assert.assertEquals("Unexpected lock count",2,locks.size());
  checkLock(LockType.EXCLUSIVE,LockState.ACQUIRED,"default","t",null,locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default",null,null,locks);
  txnMgr.commitTxn();
  txnMgr2.releaseLocks(txnMgr2.getLockManager().getLocks(false,false));
  Assert.assertEquals("Lock remained",0,getLocks().size());
  Assert.assertEquals("Lock remained",0,getLocks(txnMgr2).size());
  cpr=driver.run("create table if not exists T2 (a int, b int) partitioned by (p int) clustered by (a) " + "into 2  buckets stored as orc TBLPROPERTIES ('transactional'='false')");
  checkCmdOnDriver(cpr);
  txnid1=txnMgr.openTxn(ctx,"Fifer");
  checkCmdOnDriver(driver.compileAndRespond("insert into T2 partition(p=1) values(1,3)"));
  txnMgr.acquireLocks(driver.getPlan(),ctx,"Fifer");
  locks=getLocks();
  Assert.assertEquals("Unexpected lock count",1,locks.size());
  checkLock(LockType.EXCLUSIVE,LockState.ACQUIRED,"default","t2","p=1",locks);
  txnMgr2=(DbTxnManager)TxnManagerFactory.getTxnManagerFactory().getTxnManager(conf);
  checkCmdOnDriver(driver.compileAndRespond("show tables"));
  ((DbTxnManager)txnMgr2).acquireLocks(driver.getPlan(),ctx,"Fidler",false);
  locks=getLocks();
  Assert.assertEquals("Unexpected lock count",2,locks.size());
  checkLock(LockType.EXCLUSIVE,LockState.ACQUIRED,"default","t2","p=1",locks);
  checkLock(LockType.SHARED_READ,LockState.ACQUIRED,"default",null,null,locks);
  txnMgr.commitTxn();
  txnMgr2.releaseLocks(txnMgr2.getLockManager().getLocks(false,false));
  Assert.assertEquals("Lock remained",0,getLocks().size());
  Assert.assertEquals("Lock remained",0,getLocks(txnMgr2).size());
}
