@Test(timeout=10000) public void testHostPreferenceUnknownAndNotSpecified() throws IOException, InterruptedException {
  Priority priority1=Priority.newInstance(1);
  String[] hostsKnown=new String[]{HOST1,HOST2};
  String[] hostsUnknown=new String[]{HOST3};
  String[] noHosts=new String[]{};
  TestTaskSchedulerServiceWrapper tsWrapper=new TestTaskSchedulerServiceWrapper(2000,hostsKnown,1,1,-1l);
  try {
    Object task1="task1";
    Object clientCookie1="cookie1";
    Object task2="task2";
    Object clientCookie2="cookie2";
    Object task3="task3";
    Object clientCookie3="cookie3";
    Object task4="task4";
    Object clientCookie4="cookie4";
    tsWrapper.controlScheduler(true);
    tsWrapper.allocateTask(task1,hostsKnown,priority1,clientCookie1);
    tsWrapper.allocateTask(task2,hostsKnown,priority1,clientCookie2);
    tsWrapper.allocateTask(task3,hostsUnknown,priority1,clientCookie3);
    tsWrapper.allocateTask(task4,noHosts,priority1,clientCookie4);
    while (true) {
      tsWrapper.signalSchedulerRun();
      tsWrapper.awaitSchedulerRun();
      if (tsWrapper.ts.dagStats.numTotalAllocations == 4) {
        break;
      }
    }
    ArgumentCaptor<Object> argumentCaptor=ArgumentCaptor.forClass(Object.class);
    ArgumentCaptor<Container> argumentCaptor2=ArgumentCaptor.forClass(Container.class);
    verify(tsWrapper.mockAppCallback,times(4)).taskAllocated(argumentCaptor.capture(),any(Object.class),argumentCaptor2.capture());
    assertEquals(4,argumentCaptor.getAllValues().size());
    assertEquals(task1,argumentCaptor.getAllValues().get(0));
    assertEquals(task2,argumentCaptor.getAllValues().get(1));
    assertEquals(task3,argumentCaptor.getAllValues().get(2));
    assertEquals(task4,argumentCaptor.getAllValues().get(3));
    assertEquals(HOST1,argumentCaptor2.getAllValues().get(0).getNodeId().getHost());
    assertEquals(HOST1,argumentCaptor2.getAllValues().get(1).getNodeId().getHost());
    assertEquals(HOST2,argumentCaptor2.getAllValues().get(2).getNodeId().getHost());
    assertEquals(HOST2,argumentCaptor2.getAllValues().get(3).getNodeId().getHost());
    assertEquals(1,tsWrapper.ts.dagStats.numAllocationsNoLocalityRequest);
    assertEquals(2,tsWrapper.ts.dagStats.numLocalAllocations);
    assertEquals(1,tsWrapper.ts.dagStats.numNonLocalAllocations);
  }
  finally {
    tsWrapper.shutdown();
  }
}
