@Test public void testVariousCases(){
  HiveDecimalV1 oldDec;
  HiveDecimalV1 resultOldDec;
  HiveDecimal dec;
  HiveDecimal resultDec;
  BigDecimal bigDecimal=new BigDecimal("-99999999999999999999999999999999999999.99999999999999999");
  oldDec=HiveDecimalV1.create(bigDecimal);
  Assert.assertEquals("-100000000000000000000000000000000000000",oldDec.toString());
  dec=HiveDecimal.create(bigDecimal);
  Assert.assertTrue(dec == null);
  bigDecimal=new BigDecimal("-9999999999999999999999999999999999999.99999999999999999");
  oldDec=HiveDecimalV1.create(bigDecimal);
  Assert.assertEquals("-10000000000000000000000000000000000000",oldDec.toString());
  dec=HiveDecimal.create(bigDecimal);
  Assert.assertEquals("-10000000000000000000000000000000000000",dec.toString());
  oldDec=HiveDecimalV1.create("101");
  resultOldDec=HiveDecimalV1.enforcePrecisionScale(oldDec,10,0);
  Assert.assertEquals("101",resultOldDec.toString());
  dec=HiveDecimal.create("101");
  resultDec=HiveDecimal.enforcePrecisionScale(dec,10,0);
  Assert.assertEquals("101",resultDec.toString());
  oldDec=HiveDecimalV1.create("1");
  resultOldDec=oldDec.scaleByPowerOfTen(-99);
  Assert.assertEquals("0",resultOldDec.toString());
  dec=HiveDecimal.create("1");
  resultDec=dec.scaleByPowerOfTen(-99);
  Assert.assertEquals("0",resultDec.toString());
}
