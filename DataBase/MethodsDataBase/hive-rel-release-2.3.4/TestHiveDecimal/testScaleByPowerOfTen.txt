@Test public void testScaleByPowerOfTen(){
  HiveDecimalV1 oldDec;
  HiveDecimal dec;
  HiveDecimalV1 oldResultDec;
  HiveDecimal resultDec;
  oldDec=HiveDecimalV1.create("1");
  Assert.assertEquals(0,oldDec.scale());
  oldResultDec=oldDec.scaleByPowerOfTen(2);
  Assert.assertEquals("100",oldResultDec.toString());
  dec=HiveDecimal.create("1");
  Assert.assertEquals(0,dec.scale());
  oldDec=HiveDecimalV1.create("0.00000000000000000000000000000000000001");
  Assert.assertEquals(38,oldDec.scale());
  oldResultDec=oldDec.scaleByPowerOfTen(2);
  Assert.assertEquals("0.000000000000000000000000000000000001",oldResultDec.toString());
  dec=HiveDecimal.create("0.00000000000000000000000000000000000001");
  Assert.assertEquals(38,dec.scale());
  resultDec=dec.scaleByPowerOfTen(2);
  Assert.assertEquals("0.000000000000000000000000000000000001",resultDec.toString());
  oldDec=HiveDecimalV1.create("0.00000000000000000000000000000000000001");
  Assert.assertEquals(38,oldDec.scale());
  oldResultDec=oldDec.scaleByPowerOfTen(38);
  Assert.assertEquals("1",oldResultDec.toString());
  dec=HiveDecimal.create("0.00000000000000000000000000000000000001");
  Assert.assertEquals(38,dec.scale());
  resultDec=dec.scaleByPowerOfTen(38);
  Assert.assertEquals("1",resultDec.toString());
  oldDec=HiveDecimalV1.create("0.00000000000000000000000000000000000001");
  Assert.assertEquals(38,oldDec.scale());
  oldResultDec=oldDec.scaleByPowerOfTen(2 * 38 - 1);
  Assert.assertEquals("10000000000000000000000000000000000000",oldResultDec.toString());
  Assert.assertEquals(0,oldResultDec.scale());
  dec=HiveDecimal.create("0.00000000000000000000000000000000000001");
  Assert.assertEquals(38,dec.scale());
  resultDec=dec.scaleByPowerOfTen(2 * 38 - 1);
  Assert.assertEquals("10000000000000000000000000000000000000",resultDec.toString());
  Assert.assertEquals(0,resultDec.scale());
  oldDec=HiveDecimalV1.create("0.00000000000000000000000000000000000001");
  Assert.assertEquals(38,oldDec.scale());
  oldResultDec=oldDec.scaleByPowerOfTen(2 * 38);
  Assert.assertTrue(oldResultDec == null);
  dec=HiveDecimal.create("0.00000000000000000000000000000000000001");
  Assert.assertEquals(38,dec.scale());
  resultDec=dec.scaleByPowerOfTen(2 * 38);
  Assert.assertTrue(resultDec == null);
  oldDec=HiveDecimalV1.create("0.00000000000000000000000000000000000022");
  Assert.assertEquals(38,oldDec.scale());
  oldResultDec=oldDec.scaleByPowerOfTen(38);
  Assert.assertEquals("22",oldResultDec.toString());
  Assert.assertEquals(0,oldResultDec.scale());
  dec=HiveDecimal.create("0.00000000000000000000000000000000000022");
  Assert.assertEquals(38,dec.scale());
  resultDec=dec.scaleByPowerOfTen(38);
  Assert.assertEquals("22",resultDec.toString());
  Assert.assertEquals(0,resultDec.scale());
  oldDec=HiveDecimalV1.create("3.00001415926");
  Assert.assertEquals(11,oldDec.scale());
  oldResultDec=oldDec.scaleByPowerOfTen(2);
  Assert.assertEquals("300.001415926",oldResultDec.toString());
  Assert.assertEquals(9,oldResultDec.scale());
  oldResultDec=oldDec.scaleByPowerOfTen(5);
  Assert.assertEquals("300001.415926",oldResultDec.toString());
  Assert.assertEquals(6,oldResultDec.scale());
  oldResultDec=oldDec.scaleByPowerOfTen(18);
  Assert.assertEquals("3000014159260000000",oldResultDec.toString());
  Assert.assertEquals(0,oldResultDec.scale());
  oldResultDec=oldDec.scaleByPowerOfTen(35);
  Assert.assertEquals("300001415926000000000000000000000000",oldResultDec.toString());
  Assert.assertEquals(0,oldResultDec.scale());
  oldResultDec=oldDec.scaleByPowerOfTen(37);
  Assert.assertEquals("30000141592600000000000000000000000000",oldResultDec.toString());
  Assert.assertEquals(0,oldResultDec.scale());
  dec=HiveDecimal.create("3.00001415926");
  Assert.assertEquals(11,dec.scale());
  Assert.assertEquals(1,dec.integerDigitCount());
  resultDec=dec.scaleByPowerOfTen(2);
  Assert.assertEquals("300.001415926",resultDec.toString());
  Assert.assertEquals(9,resultDec.scale());
  Assert.assertEquals(3,resultDec.integerDigitCount());
  resultDec=dec.scaleByPowerOfTen(5);
  Assert.assertEquals("300001.415926",resultDec.toString());
  Assert.assertEquals(6,resultDec.scale());
  Assert.assertEquals(6,resultDec.integerDigitCount());
  resultDec=dec.scaleByPowerOfTen(18);
  Assert.assertEquals("3000014159260000000",resultDec.toString());
  Assert.assertEquals(0,resultDec.scale());
  Assert.assertEquals(19,resultDec.integerDigitCount());
  resultDec=dec.scaleByPowerOfTen(35);
  Assert.assertEquals("300001415926000000000000000000000000",resultDec.toString());
  Assert.assertEquals(0,resultDec.scale());
  Assert.assertEquals(36,resultDec.integerDigitCount());
  resultDec=dec.scaleByPowerOfTen(37);
  Assert.assertEquals("30000141592600000000000000000000000000",resultDec.toString());
  Assert.assertEquals(0,resultDec.scale());
  Assert.assertEquals(38,resultDec.integerDigitCount());
}
