/** 
 * Test UDF whitelist - verify default value - verify udf allowed with default whitelist - verify udf allowed with specific whitelist - verify udf disallowed when not in whitelist
 * @throws Exception
 */
@Test public void testUdfWhiteBlackList() throws Exception {
  HiveConf testConf=new HiveConf();
  assertTrue(testConf.getVar(ConfVars.HIVE_SERVER2_BUILTIN_UDF_WHITELIST).isEmpty());
  Statement stmt=conDefault.createStatement();
  stmt.executeQuery("SELECT substr('foobar', 4) ");
  stmt.close();
  stopMiniHS2();
  Set<String> funcNames=FunctionRegistry.getFunctionNames();
  funcNames.remove("reflect");
  String funcNameStr="";
  for (  String funcName : funcNames) {
    funcNameStr+="," + funcName;
  }
  funcNameStr=funcNameStr.substring(1);
  testConf.setVar(ConfVars.HIVE_SERVER2_BUILTIN_UDF_WHITELIST,funcNameStr);
  startMiniHS2(testConf);
  Connection conn=getConnection(miniHS2.getJdbcURL(testDbName),System.getProperty("user.name"),"bar");
  stmt=conn.createStatement();
  stmt.executeQuery("SELECT substr('foobar', 3) ");
  try {
    stmt.executeQuery("SELECT reflect('java.lang.String', 'valueOf', 1) ");
    fail("reflect() udf invocation should fail");
  }
 catch (  SQLException e) {
  }
  conn.close();
  restoreMiniHS2AndConnections();
}
