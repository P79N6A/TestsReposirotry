/** 
 * Tests ADD JAR uses Hives ReflectionUtil.CONSTRUCTOR_CACHE
 * @throws Exception
 */
@Test public void testAddJarConstructorUnCaching() throws Exception {
  setReflectionUtilCache();
  Path jarFilePath=getHiveContribJarPath();
  long cacheBeforeAddJar, cacheAfterClose;
  invalidateReflectionUtlCache();
  cacheBeforeAddJar=getReflectionUtilCacheSize();
  System.out.println("CONSTRUCTOR_CACHE size before add jar: " + cacheBeforeAddJar);
  System.out.println("CONSTRUCTOR_CACHE as map before add jar:" + getReflectionUtilCache().asMap());
  Assert.assertTrue("FAILED: CONSTRUCTOR_CACHE size before add jar: " + cacheBeforeAddJar,cacheBeforeAddJar == 0);
  Statement stmt=conTestDb.createStatement();
  stmt.execute("ADD JAR " + jarFilePath.toString());
  stmt.execute("CREATE TEMPORARY FUNCTION add_func AS '" + testUdfClassName + "'");
  ResultSet res=stmt.executeQuery("SELECT add_func(int_col, 1) from " + tableName + " limit 1");
  assertTrue(res.next());
  TimeUnit.SECONDS.sleep(7);
  cleanUpReflectionUtlCache();
  cacheAfterClose=getReflectionUtilCacheSize();
  System.out.println("CONSTRUCTOR_CACHE size after connection close: " + cacheAfterClose);
  Assert.assertTrue("FAILED: CONSTRUCTOR_CACHE size after connection close: " + cacheAfterClose,cacheAfterClose == 0);
  stmt.execute("DROP TEMPORARY FUNCTION IF EXISTS add_func");
  stmt.close();
}
