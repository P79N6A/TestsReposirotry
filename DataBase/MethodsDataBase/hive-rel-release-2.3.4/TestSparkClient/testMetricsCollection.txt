@Test public void testMetricsCollection() throws Exception {
  runTest(true,new TestFunction(){
    @Override public void call(    SparkClient client) throws Exception {
      JobHandle.Listener<Integer> listener=newListener();
      List<JobHandle.Listener<Integer>> listeners=Lists.newArrayList(listener);
      JobHandle<Integer> future=client.submit(new AsyncSparkJob(),listeners);
      future.get(TIMEOUT,TimeUnit.SECONDS);
      MetricsCollection metrics=future.getMetrics();
      assertEquals(1,metrics.getJobIds().size());
      assertTrue(metrics.getAllMetrics().executorRunTime >= 0L);
      verify(listener).onSparkJobStarted(same(future),eq(metrics.getJobIds().iterator().next()));
      JobHandle.Listener<Integer> listener2=newListener();
      List<JobHandle.Listener<Integer>> listeners2=Lists.newArrayList(listener2);
      JobHandle<Integer> future2=client.submit(new AsyncSparkJob(),listeners2);
      future2.get(TIMEOUT,TimeUnit.SECONDS);
      MetricsCollection metrics2=future2.getMetrics();
      assertEquals(1,metrics2.getJobIds().size());
      assertFalse(Objects.equal(metrics.getJobIds(),metrics2.getJobIds()));
      assertTrue(metrics2.getAllMetrics().executorRunTime >= 0L);
      verify(listener2).onSparkJobStarted(same(future2),eq(metrics2.getJobIds().iterator().next()));
    }
  }
);
}
