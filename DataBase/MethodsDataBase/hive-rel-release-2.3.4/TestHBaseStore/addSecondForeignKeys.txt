@Test public void addSecondForeignKeys() throws Exception {
  String tableName="mcfktable";
  String pkTable="pktable";
  String pkTable2="pktable2";
  String pkName="test_pk";
  String pkName2="test_pk2";
  String fkName="test_fk";
  String fkName2="test_fk2";
  String fkColNames[]={"col0","col1","col2"};
  String pkColNames[]={"pcol0","pcol1"};
  String pkColNames2[]={"p2col0"};
  Table table=createMultiColumnTable(tableName,"int","double","timestamp");
  List<SQLForeignKey> fk=Arrays.asList(new SQLForeignKey(DB,pkTable,pkColNames[0],DB,tableName,fkColNames[1],0,1,2,fkName,pkName,true,false,true),new SQLForeignKey(DB,pkTable,pkColNames[1],DB,tableName,fkColNames[2],1,1,2,fkName,pkName,true,false,true));
  store.createTable(table);
  store.addForeignKeys(fk);
  fk=Arrays.asList(new SQLForeignKey(DB,pkTable2,pkColNames2[0],DB,tableName,fkColNames[0],0,1,2,fkName2,pkName2,true,false,true));
  store.addForeignKeys(fk);
  fk=store.getForeignKeys(DB,pkTable,DB,tableName);
  Assert.assertNotNull(fk);
  Assert.assertEquals(2,fk.size());
  SQLForeignKey[] sorted=fk.toArray(new SQLForeignKey[2]);
  Arrays.sort(sorted,new Comparator<SQLForeignKey>(){
    @Override public int compare(    SQLForeignKey o1,    SQLForeignKey o2){
      if (o1.getFk_name().equals(o2.getFk_name())) {
        return o1.getFkcolumn_name().compareTo(o2.getFkcolumn_name());
      }
 else {
        return o1.getFk_name().compareTo(o2.getFk_name());
      }
    }
  }
);
  for (int i=0; i < 2; i++) {
    Assert.assertEquals(DB,sorted[i].getPktable_db());
    Assert.assertEquals(pkTable,sorted[i].getPktable_name());
    Assert.assertEquals(pkColNames[i],sorted[i].getPkcolumn_name());
    Assert.assertEquals(DB,sorted[i].getFktable_db());
    Assert.assertEquals(tableName,sorted[i].getFktable_name());
    Assert.assertEquals(fkColNames[i + 1],sorted[i].getFkcolumn_name());
    Assert.assertEquals(i,sorted[i].getKey_seq());
    Assert.assertEquals(1,sorted[i].getUpdate_rule());
    Assert.assertEquals(2,sorted[i].getDelete_rule());
    Assert.assertEquals(fkName,sorted[i].getFk_name());
    Assert.assertEquals(pkName,sorted[i].getPk_name());
    Assert.assertTrue(sorted[i].isEnable_cstr());
    Assert.assertFalse(sorted[i].isValidate_cstr());
    Assert.assertTrue(sorted[i].isRely_cstr());
  }
  fk=store.getForeignKeys(DB,pkTable2,DB,tableName);
  Assert.assertNotNull(fk);
  Assert.assertEquals(1,fk.size());
  Assert.assertEquals(DB,fk.get(0).getPktable_db());
  Assert.assertEquals(pkTable2,fk.get(0).getPktable_name());
  Assert.assertEquals(pkColNames2[0],fk.get(0).getPkcolumn_name());
  Assert.assertEquals(DB,fk.get(0).getFktable_db());
  Assert.assertEquals(tableName,fk.get(0).getFktable_name());
  Assert.assertEquals(fkColNames[0],fk.get(0).getFkcolumn_name());
  Assert.assertEquals(0,fk.get(0).getKey_seq());
  Assert.assertEquals(1,fk.get(0).getUpdate_rule());
  Assert.assertEquals(2,fk.get(0).getDelete_rule());
  Assert.assertEquals(fkName2,fk.get(0).getFk_name());
  Assert.assertEquals(pkName2,fk.get(0).getPk_name());
  Assert.assertTrue(fk.get(0).isEnable_cstr());
  Assert.assertFalse(fk.get(0).isValidate_cstr());
  Assert.assertTrue(fk.get(0).isRely_cstr());
  fk=store.getForeignKeys(null,null,DB,tableName);
  Assert.assertNotNull(fk);
  Assert.assertEquals(3,fk.size());
  store.dropConstraint(DB,tableName,fkName);
  fk=store.getForeignKeys(DB,pkTable2,DB,tableName);
  Assert.assertNotNull(fk);
  Assert.assertEquals(1,fk.size());
  Assert.assertEquals(DB,fk.get(0).getPktable_db());
  Assert.assertEquals(pkTable2,fk.get(0).getPktable_name());
  Assert.assertEquals(pkColNames2[0],fk.get(0).getPkcolumn_name());
  Assert.assertEquals(DB,fk.get(0).getFktable_db());
  Assert.assertEquals(tableName,fk.get(0).getFktable_name());
  Assert.assertEquals(fkColNames[0],fk.get(0).getFkcolumn_name());
  Assert.assertEquals(0,fk.get(0).getKey_seq());
  Assert.assertEquals(1,fk.get(0).getUpdate_rule());
  Assert.assertEquals(2,fk.get(0).getDelete_rule());
  Assert.assertEquals(fkName2,fk.get(0).getFk_name());
  Assert.assertEquals(pkName2,fk.get(0).getPk_name());
  Assert.assertTrue(fk.get(0).isEnable_cstr());
  Assert.assertFalse(fk.get(0).isValidate_cstr());
  Assert.assertTrue(fk.get(0).isRely_cstr());
  store.dropConstraint(DB,tableName,fkName2);
  fk=store.getForeignKeys(DB,pkTable2,DB,tableName);
  Assert.assertNull(fk);
}
