@Test public void testGetSelectNestedColPathsFromChildren7(){
  ColumnPrunerProcCtx ctx=new ColumnPrunerProcCtx(null);
  ExprNodeDesc colDesc=new ExprNodeColumnDesc(col3Type,"root","test",false);
  ExprNodeDesc col1=new ExprNodeFieldDesc(col1Type,colDesc,"col1",false);
  ExprNodeDesc fieldDesc1=new ExprNodeFieldDesc(TypeInfoFactory.doubleTypeInfo,col1,"b",false);
  colDesc=new ExprNodeColumnDesc(col3Type,"root","test",false);
  ExprNodeDesc col2=new ExprNodeFieldDesc(col2Type,colDesc,"col2",false);
  final List<FieldNode> paths=Arrays.asList(new FieldNode("_col0"));
  GenericUDF udf=mock(GenericUDFPower.class);
  List<ExprNodeDesc> list=new ArrayList<>();
  list.add(fieldDesc1);
  list.add(col2);
  ExprNodeDesc funcDesc=new ExprNodeGenericFuncDesc(TypeInfoFactory.doubleTypeInfo,udf,"pow",list);
  SelectOperator selectOperator=buildSelectOperator(Arrays.asList(funcDesc),paths);
  List<FieldNode> groups=ctx.getSelectColsFromChildren(selectOperator,paths);
  compareTestResults(groups,"root.col1.b","root.col2");
}
