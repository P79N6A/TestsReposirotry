@Test public void testEventFilters(){
  String dbname="testfilter_db";
  String tblname="testfilter_tbl";
  IMetaStoreClient.NotificationFilter dbTblFilter=EventUtils.getDbTblNotificationFilter(dbname,tblname);
  IMetaStoreClient.NotificationFilter dbFilter=EventUtils.getDbTblNotificationFilter(dbname,null);
  assertFalse(dbTblFilter.accept(null));
  assertTrue(dbTblFilter.accept(createDummyEvent(dbname,tblname,0)));
  assertFalse(dbTblFilter.accept(createDummyEvent(dbname,tblname + "extra",0)));
  assertFalse(dbTblFilter.accept(createDummyEvent(dbname + "extra",tblname,0)));
  assertFalse(dbFilter.accept(null));
  assertTrue(dbFilter.accept(createDummyEvent(dbname,tblname,0)));
  assertTrue(dbFilter.accept(createDummyEvent(dbname,tblname + "extra",0)));
  assertFalse(dbFilter.accept(createDummyEvent(dbname + "extra",tblname,0)));
  long evBegin=50;
  long evEnd=75;
  IMetaStoreClient.NotificationFilter evRangeFilter=EventUtils.getEventBoundaryFilter(evBegin,evEnd);
  assertTrue(evBegin < evEnd);
  assertFalse(evRangeFilter.accept(null));
  assertFalse(evRangeFilter.accept(createDummyEvent(dbname,tblname,evBegin - 1)));
  assertTrue(evRangeFilter.accept(createDummyEvent(dbname,tblname,evBegin)));
  assertTrue(evRangeFilter.accept(createDummyEvent(dbname,tblname,evBegin + 1)));
  assertTrue(evRangeFilter.accept(createDummyEvent(dbname,tblname,evEnd - 1)));
  assertTrue(evRangeFilter.accept(createDummyEvent(dbname,tblname,evEnd)));
  assertFalse(evRangeFilter.accept(createDummyEvent(dbname,tblname,evEnd + 1)));
  IMetaStoreClient.NotificationFilter restrictByDefaultMessageFormat=EventUtils.restrictByMessageFormat(MessageFactory.getInstance().getMessageFormat());
  IMetaStoreClient.NotificationFilter restrictByArbitraryMessageFormat=EventUtils.restrictByMessageFormat(MessageFactory.getInstance().getMessageFormat() + "_bogus");
  NotificationEvent dummyEvent=createDummyEvent(dbname,tblname,0);
  assertEquals(MessageFactory.getInstance().getMessageFormat(),dummyEvent.getMessageFormat());
  assertFalse(restrictByDefaultMessageFormat.accept(null));
  assertTrue(restrictByDefaultMessageFormat.accept(dummyEvent));
  assertFalse(restrictByArbitraryMessageFormat.accept(dummyEvent));
  IMetaStoreClient.NotificationFilter yes=new IMetaStoreClient.NotificationFilter(){
    @Override public boolean accept(    NotificationEvent notificationEvent){
      return true;
    }
  }
;
  IMetaStoreClient.NotificationFilter no=new IMetaStoreClient.NotificationFilter(){
    @Override public boolean accept(    NotificationEvent notificationEvent){
      return false;
    }
  }
;
  assertTrue(EventUtils.andFilter(yes,yes).accept(dummyEvent));
  assertFalse(EventUtils.andFilter(yes,no).accept(dummyEvent));
  assertFalse(EventUtils.andFilter(no,yes).accept(dummyEvent));
  assertFalse(EventUtils.andFilter(no,no).accept(dummyEvent));
  assertTrue(EventUtils.andFilter(yes,yes,yes).accept(dummyEvent));
  assertFalse(EventUtils.andFilter(yes,yes,no).accept(dummyEvent));
  assertFalse(EventUtils.andFilter(yes,no,yes).accept(dummyEvent));
  assertFalse(EventUtils.andFilter(yes,no,no).accept(dummyEvent));
  assertFalse(EventUtils.andFilter(no,yes,yes).accept(dummyEvent));
  assertFalse(EventUtils.andFilter(no,yes,no).accept(dummyEvent));
  assertFalse(EventUtils.andFilter(no,no,yes).accept(dummyEvent));
  assertFalse(EventUtils.andFilter(no,no,no).accept(dummyEvent));
}
