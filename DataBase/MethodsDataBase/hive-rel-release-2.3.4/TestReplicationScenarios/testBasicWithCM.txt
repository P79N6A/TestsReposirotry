@Test public void testBasicWithCM() throws Exception {
  String testName="basic_with_cm";
  LOG.info("Testing " + testName);
  String dbName=testName + "_" + tid;
  run("CREATE DATABASE " + dbName);
  run("CREATE TABLE " + dbName + ".unptned(a string) STORED AS TEXTFILE");
  run("CREATE TABLE " + dbName + ".ptned(a string) partitioned by (b int) STORED AS TEXTFILE");
  run("CREATE TABLE " + dbName + ".unptned_empty(a string) STORED AS TEXTFILE");
  run("CREATE TABLE " + dbName + ".ptned_empty(a string) partitioned by (b int) STORED AS TEXTFILE");
  String[] unptn_data=new String[]{"eleven","twelve"};
  String[] ptn_data_1=new String[]{"thirteen","fourteen","fifteen"};
  String[] ptn_data_2=new String[]{"fifteen","sixteen","seventeen"};
  String[] ptn_data_2_later=new String[]{"eighteen","nineteen","twenty"};
  String[] empty=new String[]{};
  String unptn_locn=new Path(TEST_PATH,testName + "_unptn").toUri().getPath();
  String ptn_locn_1=new Path(TEST_PATH,testName + "_ptn1").toUri().getPath();
  String ptn_locn_2=new Path(TEST_PATH,testName + "_ptn2").toUri().getPath();
  String ptn_locn_2_later=new Path(TEST_PATH,testName + "_ptn2_later").toUri().getPath();
  createTestDataFile(unptn_locn,unptn_data);
  createTestDataFile(ptn_locn_1,ptn_data_1);
  createTestDataFile(ptn_locn_2,ptn_data_2);
  createTestDataFile(ptn_locn_2_later,ptn_data_2_later);
  run("LOAD DATA LOCAL INPATH '" + unptn_locn + "' OVERWRITE INTO TABLE "+ dbName+ ".unptned");
  run("SELECT * from " + dbName + ".unptned");
  verifyResults(unptn_data);
  run("LOAD DATA LOCAL INPATH '" + ptn_locn_1 + "' OVERWRITE INTO TABLE "+ dbName+ ".ptned PARTITION(b=1)");
  run("SELECT a from " + dbName + ".ptned WHERE b=1");
  verifyResults(ptn_data_1);
  run("LOAD DATA LOCAL INPATH '" + ptn_locn_2 + "' OVERWRITE INTO TABLE "+ dbName+ ".ptned PARTITION(b=2)");
  run("SELECT a from " + dbName + ".ptned WHERE b=2");
  verifyResults(ptn_data_2);
  run("SELECT a from " + dbName + ".ptned_empty");
  verifyResults(empty);
  run("SELECT * from " + dbName + ".unptned_empty");
  verifyResults(empty);
  advanceDumpDir();
  run("REPL DUMP " + dbName);
  String replDumpLocn=getResult(0,0);
  String replDumpId=getResult(0,1,true);
  run("DROP TABLE " + dbName + ".unptned");
  run("ALTER TABLE " + dbName + ".ptned "+ "DROP PARTITION(b=1)");
  Partition p=metaStoreClient.getPartition(dbName,"ptned","b=2");
  Path loc=new Path(p.getSd().getLocation());
  FileSystem fs=loc.getFileSystem(hconf);
  Path file=fs.listStatus(loc)[0].getPath();
  fs.delete(file,false);
  fs.copyFromLocalFile(new Path(ptn_locn_2_later),file);
  run("EXPLAIN REPL LOAD " + dbName + "_dupe FROM '"+ replDumpLocn+ "'");
  printOutput();
  run("REPL LOAD " + dbName + "_dupe FROM '"+ replDumpLocn+ "'");
  run("REPL STATUS " + dbName + "_dupe");
  verifyResults(new String[]{replDumpId});
  run("SELECT * from " + dbName + "_dupe.unptned");
  verifyResults(unptn_data);
  run("SELECT a from " + dbName + "_dupe.ptned WHERE b=1");
  verifyResults(ptn_data_1);
  run("SELECT a from " + dbName + "_dupe.ptned WHERE b=2");
  verifyResults(empty);
  run("SELECT a from " + dbName + ".ptned_empty");
  verifyResults(empty);
  run("SELECT * from " + dbName + ".unptned_empty");
  verifyResults(empty);
}
