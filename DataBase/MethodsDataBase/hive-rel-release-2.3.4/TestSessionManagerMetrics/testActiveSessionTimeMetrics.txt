@Test public void testActiveSessionTimeMetrics() throws Exception {
  final CyclicBarrier ready=new CyclicBarrier(2);
  CyclicBarrier completed=new CyclicBarrier(2);
  String json=metrics.dumpJson();
  MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.GAUGE,MetricsConstant.HS2_AVG_ACTIVE_SESSION_TIME,"NaN");
  SessionHandle handle=sm.openSession(TProtocolVersion.HIVE_CLI_SERVICE_PROTOCOL_V9,"user","passw","127.0.0.1",new HashMap<String,String>());
  final HiveSession session=sm.getSession(handle);
  OperationManager operationManager=mock(OperationManager.class);
  when(operationManager.newGetTablesOperation(session,"catalog","schema","table",null)).thenReturn(new BlockingOperation(session,OperationType.GET_TABLES,ready,completed));
  session.setOperationManager(operationManager);
  long sessionActivateTime=System.currentTimeMillis();
  new Thread(new Runnable(){
    @Override public void run(){
      try {
        OperationHandle handle=session.getTables("catalog","schema","table",null);
        session.closeOperation(handle);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
 finally {
        try {
          ready.await();
        }
 catch (        InterruptedException|BrokenBarrierException e) {
        }
      }
    }
  }
).start();
  ready.await(2,TimeUnit.SECONDS);
  ready.reset();
  json=metrics.dumpJson();
  MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.GAUGE,MetricsConstant.HS2_AVG_ACTIVE_SESSION_TIME,(double)System.currentTimeMillis() - sessionActivateTime,100d);
  completed.await(2,TimeUnit.SECONDS);
  ready.await(2,TimeUnit.SECONDS);
  json=metrics.dumpJson();
  MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.GAUGE,MetricsConstant.HS2_AVG_ACTIVE_SESSION_TIME,"NaN");
}
