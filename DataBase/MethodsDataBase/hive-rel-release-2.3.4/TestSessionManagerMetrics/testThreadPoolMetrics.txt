/** 
 * Tests metrics regarding async thread pool. The test does the following steps: - Submit four tasks - Wait with the metrics verification, until the first two tasks are running. If, for some reason, the tasks are not started within a timeout period, make the test fail. - Make the tasks wait until the metrics are checked. - Verify the metrics. Both the EXEC_ASYNC_POOL_SIZE and EXEC_ASYNC_QUEUE_SIZE should be 2. - Let the first two tasks complete, so the remaining two tasks can be removed from the queue and started. - Wait until the remaining tasks are running. Do the metrics check only if they are started to avoid the failures when the queue size was not 0. If, for some reason, the tasks are not started within a timeout period, make the test fail. - Verify the metrics. The EXEC_ASYNC_POOL_SIZE should be 2 and the EXEC_ASYNC_QUEUE_SIZE should be 0. - Let the remaining tasks complete.
 */
@Test public void testThreadPoolMetrics() throws Exception {
  String errorMessage=null;
  CyclicBarrier ready=new CyclicBarrier(3);
  CyclicBarrier completed=new CyclicBarrier(3);
  try {
    sm.submitBackgroundOperation(new BarrierRunnable(ready,completed));
    sm.submitBackgroundOperation(new BarrierRunnable(ready,completed));
    sm.submitBackgroundOperation(new BarrierRunnable(ready,completed));
    sm.submitBackgroundOperation(new BarrierRunnable(ready,completed));
    errorMessage=String.format(FAIL_TO_START_MSG,"first");
    ready.await(BARRIER_AWAIT_TIMEOUT,TimeUnit.SECONDS);
    ready.reset();
    String json=metrics.dumpJson();
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.GAUGE,MetricsConstant.EXEC_ASYNC_POOL_SIZE,2);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.GAUGE,MetricsConstant.EXEC_ASYNC_QUEUE_SIZE,2);
    errorMessage=String.format(FAIL_TO_COMPLETE_MSG,"first");
    completed.await(BARRIER_AWAIT_TIMEOUT,TimeUnit.SECONDS);
    completed.reset();
    errorMessage=String.format(FAIL_TO_START_MSG,"second");
    ready.await(BARRIER_AWAIT_TIMEOUT,TimeUnit.SECONDS);
    json=metrics.dumpJson();
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.GAUGE,MetricsConstant.EXEC_ASYNC_POOL_SIZE,2);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.GAUGE,MetricsConstant.EXEC_ASYNC_QUEUE_SIZE,0);
    errorMessage=String.format(FAIL_TO_COMPLETE_MSG,"second");
    completed.await(BARRIER_AWAIT_TIMEOUT,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    Assert.fail(errorMessage);
  }
}
