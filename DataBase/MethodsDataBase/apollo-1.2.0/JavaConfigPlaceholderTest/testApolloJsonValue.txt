@Test public void testApolloJsonValue(){
  String someJson="[{\"a\":\"astring\", \"b\":10},{\"a\":\"astring2\", \"b\":20}]";
  String otherJson="[{\"a\":\"otherString\", \"b\":10},{\"a\":\"astring2\", \"b\":20}]";
  Config config=mock(Config.class);
  when(config.getProperty(eq(JSON_PROPERTY),anyString())).thenReturn(someJson);
  when(config.getProperty(eq(OTHER_JSON_PROPERTY),anyString())).thenReturn(otherJson);
  when(config.getProperty(eq("a"),anyString())).thenReturn(JSON_PROPERTY);
  mockConfig(ConfigConsts.NAMESPACE_APPLICATION,config);
  AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(AppConfig8.class);
  TestJsonPropertyBean testJsonPropertyBean=context.getBean(TestJsonPropertyBean.class);
  assertEquals(2,testJsonPropertyBean.getJsonBeanList().size());
  assertEquals("astring",testJsonPropertyBean.getJsonBeanList().get(0).getA());
  assertEquals(10,testJsonPropertyBean.getJsonBeanList().get(0).getB());
  assertEquals("astring2",testJsonPropertyBean.getJsonBeanList().get(1).getA());
  assertEquals(20,testJsonPropertyBean.getJsonBeanList().get(1).getB());
  assertEquals(testJsonPropertyBean.getJsonBeanList(),testJsonPropertyBean.getEmbeddedJsonBeanList());
  assertEquals("otherString",testJsonPropertyBean.getOtherJsonBeanList().get(0).getA());
  assertEquals(10,testJsonPropertyBean.getOtherJsonBeanList().get(0).getB());
  assertEquals("astring2",testJsonPropertyBean.getOtherJsonBeanList().get(1).getA());
  assertEquals(20,testJsonPropertyBean.getOtherJsonBeanList().get(1).getB());
}
