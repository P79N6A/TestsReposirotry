@Test public void testSubmitLongPollNamespaceWith304Response() throws Exception {
  RemoteConfigRepository someRepository=mock(RemoteConfigRepository.class);
  final String someNamespace="someNamespace";
  when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);
  final SettableFuture<Boolean> longPollFinished=SettableFuture.create();
  doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>(){
    @Override public HttpResponse<List<ApolloConfigNotification>> answer(    InvocationOnMock invocation) throws Throwable {
      try {
        TimeUnit.MILLISECONDS.sleep(50);
      }
 catch (      InterruptedException e) {
      }
      HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);
      assertTrue(request.getUrl().contains(someServerUrl + "/notifications/v2?"));
      assertTrue(request.getUrl().contains("appId=" + someAppId));
      assertTrue(request.getUrl().contains("cluster=" + someCluster));
      assertTrue(request.getUrl().contains("notifications="));
      assertTrue(request.getUrl().contains(someNamespace));
      longPollFinished.set(true);
      return pollResponse;
    }
  }
).when(httpUtil).doGet(any(HttpRequest.class),eq(responseType));
  remoteConfigLongPollService.submit(someNamespace,someRepository);
  longPollFinished.get(5000,TimeUnit.MILLISECONDS);
  remoteConfigLongPollService.stopLongPollingRefresh();
  verify(someRepository,never()).onLongPollNotified(any(ServiceDTO.class),any(ApolloNotificationMessages.class));
}
