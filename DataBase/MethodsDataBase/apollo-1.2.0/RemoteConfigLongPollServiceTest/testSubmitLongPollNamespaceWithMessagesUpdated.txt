@Test public void testSubmitLongPollNamespaceWithMessagesUpdated() throws Exception {
  RemoteConfigRepository someRepository=mock(RemoteConfigRepository.class);
  final String someNamespace="someNamespace";
  ApolloNotificationMessages notificationMessages=new ApolloNotificationMessages();
  String someKey="someKey";
  long someNotificationId=1;
  notificationMessages.put(someKey,someNotificationId);
  ApolloConfigNotification someNotification=mock(ApolloConfigNotification.class);
  when(someNotification.getNamespaceName()).thenReturn(someNamespace);
  when(someNotification.getMessages()).thenReturn(notificationMessages);
  when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);
  when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));
  doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>(){
    @Override public HttpResponse<List<ApolloConfigNotification>> answer(    InvocationOnMock invocation) throws Throwable {
      try {
        TimeUnit.MILLISECONDS.sleep(50);
      }
 catch (      InterruptedException e) {
      }
      return pollResponse;
    }
  }
).when(httpUtil).doGet(any(HttpRequest.class),eq(responseType));
  final SettableFuture<Boolean> onNotified=SettableFuture.create();
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      onNotified.set(true);
      return null;
    }
  }
).when(someRepository).onLongPollNotified(any(ServiceDTO.class),any(ApolloNotificationMessages.class));
  remoteConfigLongPollService.submit(someNamespace,someRepository);
  onNotified.get(5000,TimeUnit.MILLISECONDS);
  when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);
  final ArgumentCaptor<ApolloNotificationMessages> captor=ArgumentCaptor.forClass(ApolloNotificationMessages.class);
  verify(someRepository,times(1)).onLongPollNotified(any(ServiceDTO.class),captor.capture());
  ApolloNotificationMessages captured=captor.getValue();
  assertEquals(1,captured.getDetails().size());
  assertEquals(someNotificationId,captured.get(someKey).longValue());
  final SettableFuture<Boolean> anotherOnNotified=SettableFuture.create();
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      anotherOnNotified.set(true);
      return null;
    }
  }
).when(someRepository).onLongPollNotified(any(ServiceDTO.class),any(ApolloNotificationMessages.class));
  String anotherKey="anotherKey";
  long anotherNotificationId=2;
  notificationMessages.put(anotherKey,anotherNotificationId);
  when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);
  anotherOnNotified.get(5000,TimeUnit.MILLISECONDS);
  remoteConfigLongPollService.stopLongPollingRefresh();
  verify(someRepository,times(2)).onLongPollNotified(any(ServiceDTO.class),captor.capture());
  captured=captor.getValue();
  assertEquals(2,captured.getDetails().size());
  assertEquals(someNotificationId,captured.get(someKey).longValue());
  assertEquals(anotherNotificationId,captured.get(anotherKey).longValue());
}
