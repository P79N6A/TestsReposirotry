@Test public void testSubmitLongPollMultipleNamespacesWithMultipleNotificationsReturned() throws Exception {
  RemoteConfigRepository someRepository=mock(RemoteConfigRepository.class);
  RemoteConfigRepository anotherRepository=mock(RemoteConfigRepository.class);
  final String someNamespace="someNamespace";
  final String anotherNamespace="anotherNamespace";
  ApolloNotificationMessages notificationMessages=new ApolloNotificationMessages();
  String someKey="someKey";
  long someNotificationId=1;
  notificationMessages.put(someKey,someNotificationId);
  ApolloNotificationMessages anotherNotificationMessages=new ApolloNotificationMessages();
  String anotherKey="anotherKey";
  long anotherNotificationId=2;
  anotherNotificationMessages.put(anotherKey,anotherNotificationId);
  final ApolloConfigNotification someNotification=mock(ApolloConfigNotification.class);
  when(someNotification.getNamespaceName()).thenReturn(someNamespace);
  when(someNotification.getMessages()).thenReturn(notificationMessages);
  final ApolloConfigNotification anotherNotification=mock(ApolloConfigNotification.class);
  when(anotherNotification.getNamespaceName()).thenReturn(anotherNamespace);
  when(anotherNotification.getMessages()).thenReturn(anotherNotificationMessages);
  when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);
  when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification,anotherNotification));
  doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>(){
    @Override public HttpResponse<List<ApolloConfigNotification>> answer(    InvocationOnMock invocation) throws Throwable {
      try {
        TimeUnit.MILLISECONDS.sleep(50);
      }
 catch (      InterruptedException e) {
      }
      return pollResponse;
    }
  }
).when(httpUtil).doGet(any(HttpRequest.class),eq(responseType));
  final SettableFuture<Boolean> someRepositoryNotified=SettableFuture.create();
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      someRepositoryNotified.set(true);
      return null;
    }
  }
).when(someRepository).onLongPollNotified(any(ServiceDTO.class),any(ApolloNotificationMessages.class));
  final SettableFuture<Boolean> anotherRepositoryNotified=SettableFuture.create();
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      anotherRepositoryNotified.set(true);
      return null;
    }
  }
).when(anotherRepository).onLongPollNotified(any(ServiceDTO.class),any(ApolloNotificationMessages.class));
  remoteConfigLongPollService.submit(someNamespace,someRepository);
  remoteConfigLongPollService.submit(anotherNamespace,anotherRepository);
  someRepositoryNotified.get(5000,TimeUnit.MILLISECONDS);
  anotherRepositoryNotified.get(5000,TimeUnit.MILLISECONDS);
  remoteConfigLongPollService.stopLongPollingRefresh();
  final ArgumentCaptor<ApolloNotificationMessages> captor=ArgumentCaptor.forClass(ApolloNotificationMessages.class);
  final ArgumentCaptor<ApolloNotificationMessages> anotherCaptor=ArgumentCaptor.forClass(ApolloNotificationMessages.class);
  verify(someRepository,times(1)).onLongPollNotified(any(ServiceDTO.class),captor.capture());
  verify(anotherRepository,times(1)).onLongPollNotified(any(ServiceDTO.class),anotherCaptor.capture());
  ApolloNotificationMessages result=captor.getValue();
  assertEquals(1,result.getDetails().size());
  assertEquals(someNotificationId,result.get(someKey).longValue());
  ApolloNotificationMessages anotherResult=anotherCaptor.getValue();
  assertEquals(1,anotherResult.getDetails().size());
  assertEquals(anotherNotificationId,anotherResult.get(anotherKey).longValue());
}
