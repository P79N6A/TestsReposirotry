@Test public void testSubmitLongPollMultipleNamespaces() throws Exception {
  RemoteConfigRepository someRepository=mock(RemoteConfigRepository.class);
  RemoteConfigRepository anotherRepository=mock(RemoteConfigRepository.class);
  final String someNamespace="someNamespace";
  final String anotherNamespace="anotherNamespace";
  final ApolloConfigNotification someNotification=mock(ApolloConfigNotification.class);
  when(someNotification.getNamespaceName()).thenReturn(someNamespace);
  final ApolloConfigNotification anotherNotification=mock(ApolloConfigNotification.class);
  when(anotherNotification.getNamespaceName()).thenReturn(anotherNamespace);
  final SettableFuture<Boolean> submitAnotherNamespaceStart=SettableFuture.create();
  final SettableFuture<Boolean> submitAnotherNamespaceFinish=SettableFuture.create();
  doAnswer(new Answer<HttpResponse<List<ApolloConfigNotification>>>(){
    final AtomicInteger counter=new AtomicInteger();
    @Override public HttpResponse<List<ApolloConfigNotification>> answer(    InvocationOnMock invocation) throws Throwable {
      try {
        TimeUnit.MILLISECONDS.sleep(50);
      }
 catch (      InterruptedException e) {
      }
      if (counter.incrementAndGet() == 1) {
        HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);
        assertTrue(request.getUrl().contains("notifications="));
        assertTrue(request.getUrl().contains(someNamespace));
        submitAnotherNamespaceStart.set(true);
        when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);
        when(pollResponse.getBody()).thenReturn(Lists.newArrayList(someNotification));
      }
 else       if (submitAnotherNamespaceFinish.get()) {
        HttpRequest request=invocation.getArgumentAt(0,HttpRequest.class);
        assertTrue(request.getUrl().contains("notifications="));
        assertTrue(request.getUrl().contains(someNamespace));
        assertTrue(request.getUrl().contains(anotherNamespace));
        when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_OK);
        when(pollResponse.getBody()).thenReturn(Lists.newArrayList(anotherNotification));
      }
 else {
        when(pollResponse.getStatusCode()).thenReturn(HttpServletResponse.SC_NOT_MODIFIED);
        when(pollResponse.getBody()).thenReturn(null);
      }
      return pollResponse;
    }
  }
).when(httpUtil).doGet(any(HttpRequest.class),eq(responseType));
  final SettableFuture<Boolean> onAnotherRepositoryNotified=SettableFuture.create();
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      onAnotherRepositoryNotified.set(true);
      return null;
    }
  }
).when(anotherRepository).onLongPollNotified(any(ServiceDTO.class),any(ApolloNotificationMessages.class));
  remoteConfigLongPollService.submit(someNamespace,someRepository);
  submitAnotherNamespaceStart.get(5000,TimeUnit.MILLISECONDS);
  remoteConfigLongPollService.submit(anotherNamespace,anotherRepository);
  submitAnotherNamespaceFinish.set(true);
  onAnotherRepositoryNotified.get(5000,TimeUnit.MILLISECONDS);
  remoteConfigLongPollService.stopLongPollingRefresh();
  verify(someRepository,times(1)).onLongPollNotified(any(ServiceDTO.class),any(ApolloNotificationMessages.class));
  verify(anotherRepository,times(1)).onLongPollNotified(any(ServiceDTO.class),any(ApolloNotificationMessages.class));
}
