@Test @Sql(scripts="/sql/permission/insert-test-roles.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/sql/permission/insert-test-permissions.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/sql/permission/insert-test-consumerroles.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/sql/permission/insert-test-rolepermissions.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/sql/cleanup.sql",executionPhase=Sql.ExecutionPhase.AFTER_TEST_METHOD) public void testConsumerHasPermission() throws Exception {
  String someTargetId="someTargetId";
  String anotherTargetId="anotherTargetId";
  String somePermissionType="somePermissionType";
  String anotherPermissionType="anotherPermissionType";
  long someConsumerId=1;
  long anotherConsumerId=2;
  long someConsumerWithNoPermission=3;
  assertTrue(consumerRolePermissionService.consumerHasPermission(someConsumerId,somePermissionType,someTargetId));
  assertTrue(consumerRolePermissionService.consumerHasPermission(someConsumerId,anotherPermissionType,anotherTargetId));
  assertTrue(consumerRolePermissionService.consumerHasPermission(anotherConsumerId,somePermissionType,someTargetId));
  assertTrue(consumerRolePermissionService.consumerHasPermission(anotherConsumerId,anotherPermissionType,anotherTargetId));
  assertFalse(consumerRolePermissionService.consumerHasPermission(someConsumerWithNoPermission,somePermissionType,someTargetId));
  assertFalse(consumerRolePermissionService.consumerHasPermission(someConsumerWithNoPermission,anotherPermissionType,anotherTargetId));
}
