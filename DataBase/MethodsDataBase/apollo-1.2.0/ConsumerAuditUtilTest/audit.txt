@Test public void audit() throws Exception {
  long someConsumerId=1;
  String someUri="someUri";
  String someQuery="someQuery";
  String someMethod="someMethod";
  when(request.getRequestURI()).thenReturn(someUri);
  when(request.getQueryString()).thenReturn(someQuery);
  when(request.getMethod()).thenReturn(someMethod);
  SettableFuture<List<ConsumerAudit>> result=SettableFuture.create();
  doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      result.set((List<ConsumerAudit>)args[0]);
      return null;
    }
  }
).when(consumerService).createConsumerAudits(anyCollectionOf(ConsumerAudit.class));
  consumerAuditUtil.audit(request,someConsumerId);
  List<ConsumerAudit> audits=result.get(batchTimeout * 5,batchTimeUnit);
  assertEquals(1,audits.size());
  ConsumerAudit audit=audits.get(0);
  assertEquals(String.format("%s?%s",someUri,someQuery),audit.getUri());
  assertEquals(someMethod,audit.getMethod());
  assertEquals(someConsumerId,audit.getConsumerId());
}
