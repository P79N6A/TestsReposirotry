@Test public void testPollNotificationWithMultipleNamespaces() throws Exception {
  String defaultNamespaceAsFile=defaultNamespace + ".properties";
  String somePublicNamespaceAsFile=somePublicNamespace + ".xml";
  when(namespaceUtil.filterNamespaceName(defaultNamespaceAsFile)).thenReturn(defaultNamespace);
  when(namespaceUtil.filterNamespaceName(somePublicNamespaceAsFile)).thenReturn(somePublicNamespaceAsFile);
  when(namespaceUtil.normalizeNamespace(someAppId,somePublicNamespaceAsFile)).thenReturn(somePublicNamespaceAsFile);
  String someWatchKey="someKey";
  String anotherWatchKey="anotherKey";
  String somePublicWatchKey="somePublicWatchKey";
  String somePublicFileWatchKey="somePublicFileWatchKey";
  Multimap<String,String> watchKeysMap=assembleMultiMap(defaultNamespace,Lists.newArrayList(someWatchKey,anotherWatchKey));
  watchKeysMap.putAll(assembleMultiMap(somePublicNamespace,Lists.newArrayList(somePublicWatchKey)));
  watchKeysMap.putAll(assembleMultiMap(somePublicNamespaceAsFile,Lists.newArrayList(somePublicFileWatchKey)));
  String notificationAsString=transformApolloConfigNotificationsToString(defaultNamespaceAsFile,someNotificationId,somePublicNamespace,someNotificationId,somePublicNamespaceAsFile,someNotificationId);
  when(watchKeysUtil.assembleAllWatchKeys(someAppId,someCluster,Sets.newHashSet(defaultNamespace,somePublicNamespace,somePublicNamespaceAsFile),someDataCenter)).thenReturn(watchKeysMap);
  DeferredResult<ResponseEntity<List<ApolloConfigNotification>>> deferredResult=controller.pollNotification(someAppId,someCluster,notificationAsString,someDataCenter,someClientIp);
  assertEquals(watchKeysMap.size(),deferredResults.size());
  assertWatchKeys(watchKeysMap,deferredResult);
  verify(watchKeysUtil,times(1)).assembleAllWatchKeys(someAppId,someCluster,Sets.newHashSet(defaultNamespace,somePublicNamespace,somePublicNamespaceAsFile),someDataCenter);
}
