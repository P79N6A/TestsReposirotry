@Test public void testPollNotificationWithHandleMessageInBatch() throws Exception {
  String someWatchKey=Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR).join(someAppId,someCluster,defaultNamespace);
  int someBatch=1;
  int someBatchInterval=10;
  Multimap<String,String> watchKeysMap=assembleMultiMap(defaultNamespace,Lists.newArrayList(someWatchKey));
  String notificationAsString=transformApolloConfigNotificationsToString(defaultNamespace,someNotificationId);
  when(watchKeysUtil.assembleAllWatchKeys(someAppId,someCluster,Sets.newHashSet(defaultNamespace),someDataCenter)).thenReturn(watchKeysMap);
  when(bizConfig.releaseMessageNotificationBatch()).thenReturn(someBatch);
  when(bizConfig.releaseMessageNotificationBatchIntervalInMilli()).thenReturn(someBatchInterval);
  DeferredResult<ResponseEntity<List<ApolloConfigNotification>>> deferredResult=controller.pollNotification(someAppId,someCluster,notificationAsString,someDataCenter,someClientIp);
  DeferredResult<ResponseEntity<List<ApolloConfigNotification>>> anotherDeferredResult=controller.pollNotification(someAppId,someCluster,notificationAsString,someDataCenter,someClientIp);
  long someId=1;
  ReleaseMessage someReleaseMessage=new ReleaseMessage(someWatchKey);
  someReleaseMessage.setId(someId);
  controller.handleMessage(someReleaseMessage,Topics.APOLLO_RELEASE_TOPIC);
  assertFalse(deferredResult.hasResult() && anotherDeferredResult.hasResult());
  TimeUnit.MILLISECONDS.sleep(someBatchInterval * 10);
  assertTrue(deferredResult.hasResult() && anotherDeferredResult.hasResult());
}
