@Test public void testPollNotificationWithMultipleNamespaceWithNotificationIdOutDated() throws Exception {
  String someWatchKey="someKey";
  String anotherWatchKey=Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR).join(someAppId,someCluster,somePublicNamespace);
  String yetAnotherWatchKey=Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR).join(someAppId,defaultCluster,somePublicNamespace);
  long notificationId=someNotificationId + 1;
  long yetAnotherNotificationId=someNotificationId;
  Multimap<String,String> watchKeysMap=assembleMultiMap(defaultNamespace,Lists.newArrayList(someWatchKey));
  watchKeysMap.putAll(assembleMultiMap(somePublicNamespace,Lists.newArrayList(anotherWatchKey,yetAnotherWatchKey)));
  when(watchKeysUtil.assembleAllWatchKeys(someAppId,someCluster,Sets.newHashSet(defaultNamespace,somePublicNamespace),someDataCenter)).thenReturn(watchKeysMap);
  ReleaseMessage someReleaseMessage=mock(ReleaseMessage.class);
  when(someReleaseMessage.getId()).thenReturn(notificationId);
  when(someReleaseMessage.getMessage()).thenReturn(anotherWatchKey);
  ReleaseMessage yetAnotherReleaseMessage=mock(ReleaseMessage.class);
  when(yetAnotherReleaseMessage.getId()).thenReturn(yetAnotherNotificationId);
  when(yetAnotherReleaseMessage.getMessage()).thenReturn(yetAnotherWatchKey);
  when(releaseMessageService.findLatestReleaseMessagesGroupByMessages(Sets.newHashSet(watchKeysMap.values()))).thenReturn(Lists.newArrayList(someReleaseMessage,yetAnotherReleaseMessage));
  String notificationAsString=transformApolloConfigNotificationsToString(defaultNamespace,someNotificationId,somePublicNamespace,someNotificationId);
  DeferredResult<ResponseEntity<List<ApolloConfigNotification>>> deferredResult=controller.pollNotification(someAppId,someCluster,notificationAsString,someDataCenter,someClientIp);
  ResponseEntity<List<ApolloConfigNotification>> result=(ResponseEntity<List<ApolloConfigNotification>>)deferredResult.getResult();
  assertEquals(HttpStatus.OK,result.getStatusCode());
  assertEquals(1,result.getBody().size());
  assertEquals(somePublicNamespace,result.getBody().get(0).getNamespaceName());
  assertEquals(notificationId,result.getBody().get(0).getNotificationId());
  ApolloNotificationMessages notificationMessages=result.getBody().get(0).getMessages();
  assertEquals(2,notificationMessages.getDetails().size());
  assertEquals(notificationId,notificationMessages.get(anotherWatchKey).longValue());
  assertEquals(yetAnotherNotificationId,notificationMessages.get(yetAnotherWatchKey).longValue());
}
