@Test public void testPollNotificationWithMultipleNamespacesAndHandleMessage() throws Exception {
  String someWatchKey="someKey";
  String anotherWatchKey=Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR).join(someAppId,someCluster,somePublicNamespace);
  Multimap<String,String> watchKeysMap=assembleMultiMap(defaultNamespace,Lists.newArrayList(someWatchKey));
  watchKeysMap.putAll(assembleMultiMap(somePublicNamespace,Lists.newArrayList(anotherWatchKey)));
  when(watchKeysUtil.assembleAllWatchKeys(someAppId,someCluster,Sets.newHashSet(defaultNamespace,somePublicNamespace),someDataCenter)).thenReturn(watchKeysMap);
  String notificationAsString=transformApolloConfigNotificationsToString(defaultNamespace,someNotificationId,somePublicNamespace,someNotificationId);
  DeferredResult<ResponseEntity<List<ApolloConfigNotification>>> deferredResult=controller.pollNotification(someAppId,someCluster,notificationAsString,someDataCenter,someClientIp);
  assertEquals(watchKeysMap.size(),deferredResults.size());
  long someId=1;
  ReleaseMessage someReleaseMessage=new ReleaseMessage(anotherWatchKey);
  someReleaseMessage.setId(someId);
  controller.handleMessage(someReleaseMessage,Topics.APOLLO_RELEASE_TOPIC);
  ResponseEntity<List<ApolloConfigNotification>> response=(ResponseEntity<List<ApolloConfigNotification>>)deferredResult.getResult();
  assertEquals(1,response.getBody().size());
  ApolloConfigNotification notification=response.getBody().get(0);
  assertEquals(HttpStatus.OK,response.getStatusCode());
  assertEquals(somePublicNamespace,notification.getNamespaceName());
  assertEquals(someId,notification.getNotificationId());
  ApolloNotificationMessages notificationMessages=response.getBody().get(0).getMessages();
  assertEquals(1,notificationMessages.getDetails().size());
  assertEquals(someId,notificationMessages.get(anotherWatchKey).longValue());
}
