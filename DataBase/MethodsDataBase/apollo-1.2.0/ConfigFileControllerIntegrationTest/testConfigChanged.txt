@Test @Sql(scripts="/integration-test/test-release.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/integration-test/cleanup.sql",executionPhase=Sql.ExecutionPhase.AFTER_TEST_METHOD) public void testConfigChanged() throws Exception {
  ResponseEntity<String> response=restTemplate.getForEntity("http://{baseurl}/configfiles/{appId}/{clusterName}/{namespace}",String.class,getHostUrl(),someAppId,someCluster,someNamespace);
  String result=response.getBody();
  assertEquals(HttpStatus.OK,response.getStatusCode());
  assertTrue(result.contains("k2=v2"));
  String someReleaseName="someReleaseName";
  String someReleaseComment="someReleaseComment";
  Namespace namespace=new Namespace();
  namespace.setAppId(someAppId);
  namespace.setClusterName(someCluster);
  namespace.setNamespaceName(someNamespace);
  String someOwner="someOwner";
  Map<String,String> newConfigurations=ImmutableMap.of("k1","v1-changed","k2","v2-changed");
  buildRelease(someReleaseName,someReleaseComment,namespace,newConfigurations,someOwner);
  ResponseEntity<String> anotherResponse=restTemplate.getForEntity("http://{baseurl}/configfiles/{appId}/{clusterName}/{namespace}",String.class,getHostUrl(),someAppId,someCluster,someNamespace);
  assertEquals(response.getBody(),anotherResponse.getBody());
  List<String> keys=Lists.newArrayList(someAppId,someCluster,someNamespace);
  String message=Strings.join(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR,keys.iterator());
  sendReleaseMessage(message);
  TimeUnit.MILLISECONDS.sleep(500);
  ResponseEntity<String> newResponse=restTemplate.getForEntity("http://{baseurl}/configfiles/{appId}/{clusterName}/{namespace}",String.class,getHostUrl(),someAppId,someCluster,someNamespace);
  result=newResponse.getBody();
  assertEquals(HttpStatus.OK,response.getStatusCode());
  assertTrue(result.contains("k1=v1-changed"));
  assertTrue(result.contains("k2=v2-changed"));
}
