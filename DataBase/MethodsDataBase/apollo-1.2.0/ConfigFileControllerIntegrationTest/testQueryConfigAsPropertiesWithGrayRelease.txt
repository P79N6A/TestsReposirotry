@Test @Sql(scripts="/integration-test/test-release.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/integration-test/test-gray-release.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/integration-test/cleanup.sql",executionPhase=Sql.ExecutionPhase.AFTER_TEST_METHOD) public void testQueryConfigAsPropertiesWithGrayRelease() throws Exception {
  AtomicBoolean stop=new AtomicBoolean();
  periodicSendMessage(executorService,assembleKey(someAppId,ConfigConsts.CLUSTER_NAME_DEFAULT,ConfigConsts.NAMESPACE_APPLICATION),stop);
  TimeUnit.MILLISECONDS.sleep(500);
  stop.set(true);
  ResponseEntity<String> response=restTemplate.getForEntity("http://{baseurl}/configfiles/{appId}/{clusterName}/{namespace}?ip={clientIp}",String.class,getHostUrl(),someAppId,someDefaultCluster,ConfigConsts.NAMESPACE_APPLICATION,grayClientIp);
  ResponseEntity<String> anotherResponse=restTemplate.getForEntity("http://{baseurl}/configfiles/{appId}/{clusterName}/{namespace}?ip={clientIp}",String.class,getHostUrl(),someAppId,someDefaultCluster,ConfigConsts.NAMESPACE_APPLICATION,nonGrayClientIp);
  String result=response.getBody();
  String anotherResult=anotherResponse.getBody();
  assertEquals(HttpStatus.OK,response.getStatusCode());
  assertTrue(result.contains("k1=v1-gray"));
  assertEquals(HttpStatus.OK,anotherResponse.getStatusCode());
  assertFalse(anotherResult.contains("k1=v1-gray"));
  assertTrue(anotherResult.contains("k1=v1"));
}
