@Test @Sql(scripts="/integration-test/test-release.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/integration-test/test-release-public-default-override.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/integration-test/test-gray-release.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/integration-test/cleanup.sql",executionPhase=Sql.ExecutionPhase.AFTER_TEST_METHOD) public void testQueryPublicConfigAsJsonWithGrayRelease() throws Exception {
  AtomicBoolean stop=new AtomicBoolean();
  periodicSendMessage(executorService,assembleKey(somePublicAppId,ConfigConsts.CLUSTER_NAME_DEFAULT,somePublicNamespace),stop);
  TimeUnit.MILLISECONDS.sleep(500);
  stop.set(true);
  ResponseEntity<String> response=restTemplate.getForEntity("http://{baseurl}/configfiles/json/{appId}/{clusterName}/{namespace}?ip={clientIp}",String.class,getHostUrl(),someAppId,someDefaultCluster,somePublicNamespace,grayClientIp);
  ResponseEntity<String> anotherResponse=restTemplate.getForEntity("http://{baseurl}/configfiles/json/{appId}/{clusterName}/{namespace}?ip={clientIp}",String.class,getHostUrl(),someAppId,someDefaultCluster,somePublicNamespace,nonGrayClientIp);
  Map<String,String> configs=gson.fromJson(response.getBody(),mapResponseType);
  Map<String,String> anotherConfigs=gson.fromJson(anotherResponse.getBody(),mapResponseType);
  assertEquals(HttpStatus.OK,response.getStatusCode());
  assertEquals(HttpStatus.OK,anotherResponse.getStatusCode());
  assertEquals("override-v1",configs.get("k1"));
  assertEquals("gray-v2",configs.get("k2"));
  assertEquals("override-v1",anotherConfigs.get("k1"));
  assertEquals("default-v2",anotherConfigs.get("k2"));
}
