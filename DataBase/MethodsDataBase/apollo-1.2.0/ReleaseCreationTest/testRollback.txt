/** 
 * Master     |      Branch ------------------------------                                      Master   |    Branch Rollback Release      k1=v1     |      k1=v1-2                                    ---------------------------- k2=v2     |      k2=v2                                        k1=v1-1    |    k1=v1-2 |      k3=v3                                        k2=v2-1    |    k2=v2-1 rollback                     k3=v3      |    k3=v3 ------------------------------     ===========>>   New Release New  Release           k1=v1-1   | k2=v2-1   | k3=v3     |
 */
@Test @Sql(scripts="/sql/release-creation-test.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/sql/clean.sql",executionPhase=Sql.ExecutionPhase.AFTER_TEST_METHOD) public void testRollback(){
  String parentClusterName="default6";
  String childClusterName="child-cluster6";
  String operator="apollo";
  Release parentNamespaceLatestRelease=releaseService.findLatestActiveRelease(testApp,parentClusterName,testNamespace);
  releaseService.rollback(parentNamespaceLatestRelease.getId(),operator);
  Release parentNamespaceNewLatestRelease=releaseService.findLatestActiveRelease(testApp,parentClusterName,testNamespace);
  Map<String,String> parentNamespaceConfiguration=parseConfiguration(parentNamespaceNewLatestRelease.getConfigurations());
  Assert.assertEquals(3,parentNamespaceConfiguration.size());
  Assert.assertEquals("v1-1",parentNamespaceConfiguration.get("k1"));
  Assert.assertEquals("v2-1",parentNamespaceConfiguration.get("k2"));
  Assert.assertEquals("v3",parentNamespaceConfiguration.get("k3"));
  Release childNamespaceNewLatestRelease=releaseService.findLatestActiveRelease(testApp,childClusterName,testNamespace);
  Map<String,String> childNamespaceConfiguration=parseConfiguration(childNamespaceNewLatestRelease.getConfigurations());
  Assert.assertEquals(3,childNamespaceConfiguration.size());
  Assert.assertEquals("v1-2",childNamespaceConfiguration.get("k1"));
  Assert.assertEquals("v2-1",childNamespaceConfiguration.get("k2"));
  Assert.assertEquals("v3",childNamespaceConfiguration.get("k3"));
  Page<ReleaseHistory> releaseHistories=releaseHistoryService.findReleaseHistoriesByNamespace(testApp,parentClusterName,testNamespace,pageable);
  ReleaseHistory masterReleaseHistory=releaseHistories.getContent().get(1);
  ReleaseHistory branchReleaseHistory=releaseHistories.getContent().get(0);
  Assert.assertEquals(2,releaseHistories.getTotalElements());
  Assert.assertEquals(ReleaseOperation.ROLLBACK,masterReleaseHistory.getOperation());
  Assert.assertEquals(6,masterReleaseHistory.getReleaseId());
  Assert.assertEquals(7,masterReleaseHistory.getPreviousReleaseId());
  Assert.assertEquals(ReleaseOperation.MATER_ROLLBACK_MERGE_TO_GRAY,branchReleaseHistory.getOperation());
  Assert.assertEquals(childNamespaceNewLatestRelease.getId(),branchReleaseHistory.getReleaseId());
  Assert.assertEquals(8,branchReleaseHistory.getPreviousReleaseId());
  Assert.assertTrue(branchReleaseHistory.getOperationContext().contains(String.format("\"baseReleaseId\":%d",parentNamespaceNewLatestRelease.getId())));
}
