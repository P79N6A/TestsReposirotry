/** 
 * Master     |      Branch ------------------------------                                      Master    |    Branch Items      k1=v1     |      k1=v1-2                                    ---------------------------- k2=v2-2    |      k4=v4           publish branch                 k1=v1    |    k1=v1-2 ------------------------------        ===========>>      Result      k2=v2    |    k2=v2 Release     k1=v1     |                                                     k3=v3    |    k3=v3 k2=v2     |                                                              |    k4=v4 k3=v3     |
 */
@Test @Sql(scripts="/sql/release-creation-test.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/sql/clean.sql",executionPhase=Sql.ExecutionPhase.AFTER_TEST_METHOD) public void testPublishBranchAtFirstTime(){
  long parentNamespaceId=107;
  String parentClusterName="default4";
  long childNamespaceId=108;
  String childClusterName="child-cluster4";
  Namespace childNamespace=instanceNamespace(childNamespaceId,childClusterName);
  releaseService.publish(childNamespace,"","",operator,false);
  Release latestChildNamespaceRelease=releaseService.findLatestActiveRelease(childNamespace);
  Assert.assertNotNull(latestChildNamespaceRelease);
  Map<String,String> childNamespaceConfiguration=parseConfiguration(latestChildNamespaceRelease.getConfigurations());
  Assert.assertEquals(4,childNamespaceConfiguration.size());
  Assert.assertEquals("v1-2",childNamespaceConfiguration.get("k1"));
  Assert.assertEquals("v2",childNamespaceConfiguration.get("k2"));
  Assert.assertEquals("v3",childNamespaceConfiguration.get("k3"));
  Assert.assertEquals("v4",childNamespaceConfiguration.get("k4"));
  Namespace parentNamespace=instanceNamespace(parentNamespaceId,parentClusterName);
  Release latestParentNamespaceRelease=releaseService.findLatestActiveRelease(parentNamespace);
  Assert.assertNotNull(latestParentNamespaceRelease);
  Map<String,String> parentNamespaceConfiguration=parseConfiguration(latestParentNamespaceRelease.getConfigurations());
  Assert.assertEquals(3,parentNamespaceConfiguration.size());
  Assert.assertEquals("v1",parentNamespaceConfiguration.get("k1"));
  Assert.assertEquals("v2",parentNamespaceConfiguration.get("k2"));
  Assert.assertEquals("v3",parentNamespaceConfiguration.get("k3"));
  GrayReleaseRule rule=namespaceBranchService.findBranchGrayRules(testApp,parentClusterName,testNamespace,childClusterName);
  Assert.assertNotNull(rule);
  Assert.assertEquals(1,rule.getBranchStatus());
  Assert.assertEquals(Long.valueOf(latestChildNamespaceRelease.getId()),rule.getReleaseId());
  Page<ReleaseHistory> releaseHistories=releaseHistoryService.findReleaseHistoriesByNamespace(testApp,parentClusterName,testNamespace,pageable);
  ReleaseHistory branchReleaseHistory=releaseHistories.getContent().get(0);
  Assert.assertEquals(1,releaseHistories.getTotalElements());
  Assert.assertEquals(ReleaseOperation.GRAY_RELEASE,branchReleaseHistory.getOperation());
  Assert.assertEquals(latestChildNamespaceRelease.getId(),branchReleaseHistory.getReleaseId());
  Assert.assertEquals(0,branchReleaseHistory.getPreviousReleaseId());
  Assert.assertTrue(branchReleaseHistory.getOperationContext().contains("\"baseReleaseId\":3"));
  Assert.assertTrue(branchReleaseHistory.getOperationContext().contains(rule.getRules()));
}
