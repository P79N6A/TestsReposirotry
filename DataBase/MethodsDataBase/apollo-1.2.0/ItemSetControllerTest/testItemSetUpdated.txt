@Test @Sql(scripts="/controller/test-itemset.sql",executionPhase=ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/controller/cleanup.sql",executionPhase=ExecutionPhase.AFTER_TEST_METHOD) public void testItemSetUpdated(){
  String appId="someAppId";
  AppDTO app=restTemplate.getForObject("http://localhost:" + port + "/apps/"+ appId,AppDTO.class);
  ClusterDTO cluster=restTemplate.getForObject("http://localhost:" + port + "/apps/"+ app.getAppId()+ "/clusters/default",ClusterDTO.class);
  NamespaceDTO namespace=restTemplate.getForObject("http://localhost:" + port + "/apps/"+ app.getAppId()+ "/clusters/"+ cluster.getName()+ "/namespaces/application",NamespaceDTO.class);
  Assert.assertEquals("someAppId",app.getAppId());
  Assert.assertEquals("default",cluster.getName());
  Assert.assertEquals("application",namespace.getNamespaceName());
  ItemChangeSets createChangeSet=new ItemChangeSets();
  createChangeSet.setDataChangeLastModifiedBy("created");
  RestTemplate createdRestTemplate=(new TestRestTemplate()).getRestTemplate();
  createdRestTemplate.setMessageConverters(restTemplate.getMessageConverters());
  int createdSize=3;
  for (int i=0; i < createdSize; i++) {
    ItemDTO item=new ItemDTO();
    item.setNamespaceId(namespace.getId());
    item.setKey("key_" + i);
    item.setValue("created_value_" + i);
    createChangeSet.addCreateItem(item);
  }
  ResponseEntity<Void> response=createdRestTemplate.postForEntity("http://localhost:" + port + "/apps/"+ app.getAppId()+ "/clusters/"+ cluster.getName()+ "/namespaces/"+ namespace.getNamespaceName()+ "/itemset",createChangeSet,Void.class);
  Assert.assertEquals(HttpStatus.OK,response.getStatusCode());
  ItemDTO[] items=createdRestTemplate.getForObject("http://localhost:" + port + "/apps/"+ app.getAppId()+ "/clusters/"+ cluster.getName()+ "/namespaces/"+ namespace.getNamespaceName()+ "/items",ItemDTO[].class);
  ItemChangeSets updateChangeSet=new ItemChangeSets();
  updateChangeSet.setDataChangeLastModifiedBy("updated");
  RestTemplate updatedRestTemplate=(new TestRestTemplate()).getRestTemplate();
  updatedRestTemplate.setMessageConverters(restTemplate.getMessageConverters());
  int updatedSize=2;
  for (int i=0; i < updatedSize; i++) {
    items[i].setValue("updated_value_" + i);
    updateChangeSet.addUpdateItem(items[i]);
  }
  response=updatedRestTemplate.postForEntity("http://localhost:" + port + "/apps/"+ app.getAppId()+ "/clusters/"+ cluster.getName()+ "/namespaces/"+ namespace.getNamespaceName()+ "/itemset",updateChangeSet,Void.class);
  Assert.assertEquals(HttpStatus.OK,response.getStatusCode());
  List<Item> savedItems=itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());
  Assert.assertEquals(createdSize,savedItems.size());
  Item item0=savedItems.get(0);
  Assert.assertEquals("key_0",item0.getKey());
  Assert.assertEquals("updated_value_0",item0.getValue());
  Assert.assertEquals("created",item0.getDataChangeCreatedBy());
  Assert.assertEquals("updated",item0.getDataChangeLastModifiedBy());
  Assert.assertNotNull(item0.getDataChangeCreatedTime());
  Assert.assertNotNull(item0.getDataChangeLastModifiedTime());
}
