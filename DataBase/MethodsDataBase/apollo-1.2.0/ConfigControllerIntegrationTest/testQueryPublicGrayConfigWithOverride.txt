@Test @Sql(scripts="/integration-test/test-release.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/integration-test/test-release-public-default-override.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/integration-test/test-gray-release.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/integration-test/cleanup.sql",executionPhase=Sql.ExecutionPhase.AFTER_TEST_METHOD) public void testQueryPublicGrayConfigWithOverride() throws Exception {
  AtomicBoolean stop=new AtomicBoolean();
  periodicSendMessage(executorService,assembleKey(somePublicAppId,ConfigConsts.CLUSTER_NAME_DEFAULT,somePublicNamespace),stop);
  TimeUnit.MILLISECONDS.sleep(500);
  stop.set(true);
  ResponseEntity<ApolloConfig> response=restTemplate.getForEntity("http://{baseurl}/configs/{appId}/{clusterName}/{namespace}?ip={clientIp}",ApolloConfig.class,getHostUrl(),someAppId,someDefaultCluster,somePublicNamespace,someClientIp);
  ApolloConfig result=response.getBody();
  assertEquals(HttpStatus.OK,response.getStatusCode());
  assertEquals("TEST-RELEASE-KEY5" + ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR + "TEST-GRAY-RELEASE-KEY2",result.getReleaseKey());
  assertEquals("override-v1",result.getConfigurations().get("k1"));
  assertEquals("gray-v2",result.getConfigurations().get("k2"));
}
