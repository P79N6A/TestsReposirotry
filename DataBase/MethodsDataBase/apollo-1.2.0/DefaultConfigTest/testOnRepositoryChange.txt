@Test public void testOnRepositoryChange() throws Exception {
  String someKey="someKey";
  String someSystemPropertyValue="system-property-value";
  String anotherKey="anotherKey";
  String someLocalFileValue="local-file-value";
  String keyToBeDeleted="keyToBeDeleted";
  String keyToBeDeletedValue="keyToBeDeletedValue";
  String yetAnotherKey="yetAnotherKey";
  String yetAnotherValue="yetAnotherValue";
  String yetAnotherResourceValue="yetAnotherResourceValue";
  System.setProperty(someKey,someSystemPropertyValue);
  someProperties=new Properties();
  someProperties.putAll(ImmutableMap.of(someKey,someLocalFileValue,anotherKey,someLocalFileValue,keyToBeDeleted,keyToBeDeletedValue,yetAnotherKey,yetAnotherValue));
  when(configRepository.getConfig()).thenReturn(someProperties);
  someSourceType=ConfigSourceType.LOCAL;
  when(configRepository.getSourceType()).thenReturn(someSourceType);
  File resourceFile=new File(someResourceDir,someNamespace + ".properties");
  Files.append(yetAnotherKey + "=" + yetAnotherResourceValue,resourceFile,Charsets.UTF_8);
  DefaultConfig defaultConfig=new DefaultConfig(someNamespace,configRepository);
  assertEquals(someSourceType,defaultConfig.getSourceType());
  final SettableFuture<ConfigChangeEvent> configChangeFuture=SettableFuture.create();
  ConfigChangeListener someListener=new ConfigChangeListener(){
    @Override public void onChange(    ConfigChangeEvent changeEvent){
      configChangeFuture.set(changeEvent);
    }
  }
;
  defaultConfig.addChangeListener(someListener);
  Properties newProperties=new Properties();
  String someKeyNewValue="new-some-value";
  String anotherKeyNewValue="another-new-value";
  String newKey="newKey";
  String newValue="newValue";
  newProperties.putAll(ImmutableMap.of(someKey,someKeyNewValue,anotherKey,anotherKeyNewValue,newKey,newValue));
  ConfigSourceType anotherSourceType=ConfigSourceType.REMOTE;
  when(configRepository.getSourceType()).thenReturn(anotherSourceType);
  defaultConfig.onRepositoryChange(someNamespace,newProperties);
  ConfigChangeEvent changeEvent=configChangeFuture.get(500,TimeUnit.MILLISECONDS);
  System.clearProperty(someKey);
  assertEquals(someNamespace,changeEvent.getNamespace());
  assertEquals(4,changeEvent.changedKeys().size());
  ConfigChange anotherKeyChange=changeEvent.getChange(anotherKey);
  assertEquals(someLocalFileValue,anotherKeyChange.getOldValue());
  assertEquals(anotherKeyNewValue,anotherKeyChange.getNewValue());
  assertEquals(PropertyChangeType.MODIFIED,anotherKeyChange.getChangeType());
  ConfigChange yetAnotherKeyChange=changeEvent.getChange(yetAnotherKey);
  assertEquals(yetAnotherValue,yetAnotherKeyChange.getOldValue());
  assertEquals(yetAnotherResourceValue,yetAnotherKeyChange.getNewValue());
  assertEquals(PropertyChangeType.MODIFIED,yetAnotherKeyChange.getChangeType());
  ConfigChange keyToBeDeletedChange=changeEvent.getChange(keyToBeDeleted);
  assertEquals(keyToBeDeletedValue,keyToBeDeletedChange.getOldValue());
  assertEquals(null,keyToBeDeletedChange.getNewValue());
  assertEquals(PropertyChangeType.DELETED,keyToBeDeletedChange.getChangeType());
  ConfigChange newKeyChange=changeEvent.getChange(newKey);
  assertEquals(null,newKeyChange.getOldValue());
  assertEquals(newValue,newKeyChange.getNewValue());
  assertEquals(PropertyChangeType.ADDED,newKeyChange.getChangeType());
  assertEquals(anotherSourceType,defaultConfig.getSourceType());
}
