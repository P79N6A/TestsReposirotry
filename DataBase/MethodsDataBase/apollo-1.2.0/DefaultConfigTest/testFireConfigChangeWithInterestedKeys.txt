@Test public void testFireConfigChangeWithInterestedKeys() throws Exception {
  String someKeyChanged="someKeyChanged";
  String anotherKeyChanged="anotherKeyChanged";
  String someKeyNotChanged="someKeyNotChanged";
  String someNamespace="someNamespace";
  Map<String,ConfigChange> changes=Maps.newHashMap();
  changes.put(someKeyChanged,mock(ConfigChange.class));
  changes.put(anotherKeyChanged,mock(ConfigChange.class));
  ConfigChangeEvent someChangeEvent=new ConfigChangeEvent(someNamespace,changes);
  final SettableFuture<ConfigChangeEvent> interestedInAllKeysFuture=SettableFuture.create();
  ConfigChangeListener interestedInAllKeys=new ConfigChangeListener(){
    @Override public void onChange(    ConfigChangeEvent changeEvent){
      interestedInAllKeysFuture.set(changeEvent);
    }
  }
;
  final SettableFuture<ConfigChangeEvent> interestedInSomeKeyFuture=SettableFuture.create();
  ConfigChangeListener interestedInSomeKey=new ConfigChangeListener(){
    @Override public void onChange(    ConfigChangeEvent changeEvent){
      interestedInSomeKeyFuture.set(changeEvent);
    }
  }
;
  final SettableFuture<ConfigChangeEvent> interestedInSomeKeyNotChangedFuture=SettableFuture.create();
  ConfigChangeListener interestedInSomeKeyNotChanged=new ConfigChangeListener(){
    @Override public void onChange(    ConfigChangeEvent changeEvent){
      interestedInSomeKeyNotChangedFuture.set(changeEvent);
    }
  }
;
  DefaultConfig config=new DefaultConfig(someNamespace,mock(ConfigRepository.class));
  config.addChangeListener(interestedInAllKeys);
  config.addChangeListener(interestedInSomeKey,Sets.newHashSet(someKeyChanged));
  config.addChangeListener(interestedInSomeKeyNotChanged,Sets.newHashSet(someKeyNotChanged));
  config.fireConfigChange(someChangeEvent);
  ConfigChangeEvent changeEvent=interestedInAllKeysFuture.get(500,TimeUnit.MILLISECONDS);
  assertEquals(someChangeEvent,changeEvent);
  assertEquals(someChangeEvent,interestedInSomeKeyFuture.get(500,TimeUnit.MILLISECONDS));
  assertFalse(interestedInSomeKeyNotChangedFuture.isDone());
}
