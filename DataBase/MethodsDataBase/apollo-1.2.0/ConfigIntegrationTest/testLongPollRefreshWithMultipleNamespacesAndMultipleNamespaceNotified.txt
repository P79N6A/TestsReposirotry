@Test public void testLongPollRefreshWithMultipleNamespacesAndMultipleNamespaceNotified() throws Exception {
  final String someKey="someKey";
  final String someValue="someValue";
  final String anotherValue="anotherValue";
  long someNotificationId=1;
  long pollTimeoutInMS=50;
  Map<String,String> configurations=Maps.newHashMap();
  configurations.put(someKey,someValue);
  ApolloConfig apolloConfig=assembleApolloConfig(configurations);
  ContextHandler configHandler=mockConfigServerHandler(HttpServletResponse.SC_OK,apolloConfig);
  ContextHandler pollHandler=mockPollNotificationHandler(pollTimeoutInMS,HttpServletResponse.SC_OK,Lists.newArrayList(new ApolloConfigNotification(apolloConfig.getNamespaceName(),someNotificationId),new ApolloConfigNotification(someOtherNamespace,someNotificationId)),false);
  startServerWithHandlers(configHandler,pollHandler);
  Config config=ConfigService.getAppConfig();
  Config someOtherConfig=ConfigService.getConfig(someOtherNamespace);
  assertEquals(someValue,config.getProperty(someKey,null));
  assertEquals(someValue,someOtherConfig.getProperty(someKey,null));
  final SettableFuture<Boolean> longPollFinished=SettableFuture.create();
  final SettableFuture<Boolean> someOtherNamespacelongPollFinished=SettableFuture.create();
  config.addChangeListener(new ConfigChangeListener(){
    @Override public void onChange(    ConfigChangeEvent changeEvent){
      longPollFinished.set(true);
    }
  }
);
  someOtherConfig.addChangeListener(new ConfigChangeListener(){
    @Override public void onChange(    ConfigChangeEvent changeEvent){
      someOtherNamespacelongPollFinished.set(true);
    }
  }
);
  apolloConfig.getConfigurations().put(someKey,anotherValue);
  longPollFinished.get(5000,TimeUnit.MILLISECONDS);
  someOtherNamespacelongPollFinished.get(5000,TimeUnit.MILLISECONDS);
  assertEquals(anotherValue,config.getProperty(someKey,null));
  assertEquals(anotherValue,someOtherConfig.getProperty(someKey,null));
}
