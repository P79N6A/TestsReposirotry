@Test public void testFindActiveOneWithMultipleIdMultipleTimes() throws Exception {
  long someId=1;
  long anotherId=2;
  Release anotherRelease=mock(Release.class);
  when(releaseService.findActiveOne(someId)).thenReturn(someRelease);
  when(releaseService.findActiveOne(anotherId)).thenReturn(anotherRelease);
  assertEquals(someRelease,configServiceWithCache.findActiveOne(someId,someNotificationMessages));
  assertEquals(someRelease,configServiceWithCache.findActiveOne(someId,someNotificationMessages));
  assertEquals(anotherRelease,configServiceWithCache.findActiveOne(anotherId,someNotificationMessages));
  assertEquals(anotherRelease,configServiceWithCache.findActiveOne(anotherId,someNotificationMessages));
  verify(releaseService,times(1)).findActiveOne(someId);
  verify(releaseService,times(1)).findActiveOne(anotherId);
}
