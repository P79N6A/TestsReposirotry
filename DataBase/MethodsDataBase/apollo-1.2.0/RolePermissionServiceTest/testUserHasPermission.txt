@Test @Sql(scripts="/sql/permission/insert-test-roles.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/sql/permission/insert-test-permissions.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/sql/permission/insert-test-userroles.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/sql/permission/insert-test-rolepermissions.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/sql/cleanup.sql",executionPhase=Sql.ExecutionPhase.AFTER_TEST_METHOD) public void testUserHasPermission() throws Exception {
  String someTargetId="someTargetId";
  String anotherTargetId="anotherTargetId";
  String somePermissionType="somePermissionType";
  String anotherPermissionType="anotherPermissionType";
  String someUser="someUser";
  String anotherUser="anotherUser";
  String someUserWithNoPermission="someUserWithNoPermission";
  assertTrue(rolePermissionService.userHasPermission(someUser,somePermissionType,someTargetId));
  assertTrue(rolePermissionService.userHasPermission(someUser,anotherPermissionType,anotherTargetId));
  assertTrue(rolePermissionService.userHasPermission(anotherUser,somePermissionType,someTargetId));
  assertTrue(rolePermissionService.userHasPermission(anotherUser,anotherPermissionType,anotherTargetId));
  assertFalse(rolePermissionService.userHasPermission(someUserWithNoPermission,somePermissionType,someTargetId));
  assertFalse(rolePermissionService.userHasPermission(someUserWithNoPermission,anotherPermissionType,anotherTargetId));
}
