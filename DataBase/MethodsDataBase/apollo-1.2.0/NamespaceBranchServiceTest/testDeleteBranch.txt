@Test @Sql(scripts="/sql/namespace-branch-test.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/sql/clean.sql",executionPhase=Sql.ExecutionPhase.AFTER_TEST_METHOD) public void testDeleteBranch(){
  GrayReleaseRule rule=instanceGrayReleaseRule();
  namespaceBranchService.updateBranchGrayRules(testApp,testCluster,testNamespace,testBranchName,rule);
  namespaceBranchService.deleteBranch(testApp,testCluster,testNamespace,testBranchName,NamespaceBranchStatus.DELETED,operator);
  Namespace branch=namespaceBranchService.findBranch(testApp,testCluster,testNamespace);
  Assert.assertNull(branch);
  GrayReleaseRule latestRule=namespaceBranchService.findBranchGrayRules(testApp,testCluster,testNamespace,testBranchName);
  Assert.assertNotNull(latestRule);
  Assert.assertEquals(NamespaceBranchStatus.DELETED,latestRule.getBranchStatus());
  Assert.assertEquals("[]",latestRule.getRules());
  Page<ReleaseHistory> releaseHistories=releaseHistoryService.findReleaseHistoriesByNamespace(testApp,testCluster,testNamespace,pageable);
  ReleaseHistory firstReleaseHistory=releaseHistories.getContent().get(1);
  ReleaseHistory secondReleaseHistory=releaseHistories.getContent().get(0);
  Assert.assertEquals(2,releaseHistories.getTotalElements());
  Assert.assertEquals(ReleaseOperation.APPLY_GRAY_RULES,firstReleaseHistory.getOperation());
  Assert.assertEquals(ReleaseOperation.ABANDON_GRAY_RELEASE,secondReleaseHistory.getOperation());
}
