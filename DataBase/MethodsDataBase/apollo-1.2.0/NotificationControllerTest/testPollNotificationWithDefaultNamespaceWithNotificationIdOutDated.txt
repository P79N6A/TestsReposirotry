@Test public void testPollNotificationWithDefaultNamespaceWithNotificationIdOutDated() throws Exception {
  long notificationId=someNotificationId + 1;
  String releaseMessage=Joiner.on(ConfigConsts.CLUSTER_NAMESPACE_SEPARATOR).join(someAppId,someCluster,defaultNamespace);
  ReleaseMessage someReleaseMessage=mock(ReleaseMessage.class);
  String someWatchKey="someKey";
  Set<String> watchKeys=Sets.newHashSet(someWatchKey);
  when(watchKeysUtil.assembleAllWatchKeys(someAppId,someCluster,defaultNamespace,someDataCenter)).thenReturn(watchKeys);
  when(someReleaseMessage.getId()).thenReturn(notificationId);
  when(someReleaseMessage.getMessage()).thenReturn(releaseMessage);
  when(releaseMessageService.findLatestReleaseMessageForMessages(watchKeys)).thenReturn(someReleaseMessage);
  DeferredResult<ResponseEntity<ApolloConfigNotification>> deferredResult=controller.pollNotification(someAppId,someCluster,defaultNamespace,someDataCenter,someNotificationId,someClientIp);
  ResponseEntity<ApolloConfigNotification> result=(ResponseEntity<ApolloConfigNotification>)deferredResult.getResult();
  assertEquals(HttpStatus.OK,result.getStatusCode());
  assertEquals(defaultNamespace,result.getBody().getNamespaceName());
  assertEquals(notificationId,result.getBody().getNotificationId());
}
