@Test(timeout=5000L) @Sql(scripts="/integration-test/test-release.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/integration-test/cleanup.sql",executionPhase=Sql.ExecutionPhase.AFTER_TEST_METHOD) public void testPollNotificationWthMultipleNamespacesAndMultipleNamespacesChanged() throws Exception {
  String publicAppId="somePublicAppId";
  String someDC="someDC";
  AtomicBoolean stop=new AtomicBoolean();
  String key=assembleKey(publicAppId,someDC,somePublicNamespace);
  periodicSendMessage(executorService,key,stop);
  ResponseEntity<List<ApolloConfigNotification>> result=restTemplate.exchange("http://{baseurl}/notifications/v2?appId={appId}&cluster={clusterName}&notifications={notifications}&dataCenter={dataCenter}",HttpMethod.GET,null,typeReference,getHostUrl(),someAppId,someCluster,transformApolloConfigNotificationsToString(defaultNamespace,ConfigConsts.NOTIFICATION_ID_PLACEHOLDER,somePublicNamespace,ConfigConsts.NOTIFICATION_ID_PLACEHOLDER),someDC);
  stop.set(true);
  List<ApolloConfigNotification> notifications=result.getBody();
  assertEquals(HttpStatus.OK,result.getStatusCode());
  assertEquals(1,notifications.size());
  assertEquals(somePublicNamespace,notifications.get(0).getNamespaceName());
  assertNotEquals(0,notifications.get(0).getNotificationId());
  ApolloNotificationMessages messages=result.getBody().get(0).getMessages();
  assertEquals(1,messages.getDetails().size());
  assertTrue(messages.has(key));
  assertNotEquals(ConfigConsts.NOTIFICATION_ID_PLACEHOLDER,messages.get(key).longValue());
}
