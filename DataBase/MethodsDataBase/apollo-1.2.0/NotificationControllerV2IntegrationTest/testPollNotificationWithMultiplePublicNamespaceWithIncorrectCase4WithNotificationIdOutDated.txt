@Test(timeout=5000L) @Sql(scripts="/integration-test/test-release.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/integration-test/test-release-message.sql",executionPhase=Sql.ExecutionPhase.BEFORE_TEST_METHOD) @Sql(scripts="/integration-test/cleanup.sql",executionPhase=Sql.ExecutionPhase.AFTER_TEST_METHOD) public void testPollNotificationWithMultiplePublicNamespaceWithIncorrectCase4WithNotificationIdOutDated() throws Exception {
  String publicAppId="somePublicAppId";
  long someOutDatedNotificationId=1;
  long newNotificationId=20;
  String somePublicNameWithIncorrectCase=somePublicNamespace.toUpperCase();
  ResponseEntity<List<ApolloConfigNotification>> result=restTemplate.exchange("http://{baseurl}/notifications/v2?appId={appId}&cluster={clusterName}&notifications={notifications}",HttpMethod.GET,null,typeReference,getHostUrl(),someAppId,someCluster,transformApolloConfigNotificationsToString(somePublicNamespace,someOutDatedNotificationId,somePublicNameWithIncorrectCase,newNotificationId));
  List<ApolloConfigNotification> notifications=result.getBody();
  assertEquals(HttpStatus.OK,result.getStatusCode());
  assertEquals(1,notifications.size());
  assertEquals(somePublicNamespace,notifications.get(0).getNamespaceName());
  assertEquals(newNotificationId,notifications.get(0).getNotificationId());
  String key=assembleKey(publicAppId,ConfigConsts.CLUSTER_NAME_DEFAULT,somePublicNamespace);
  ApolloNotificationMessages messages=result.getBody().get(0).getMessages();
  assertEquals(1,messages.getDetails().size());
  assertTrue(messages.has(key));
  assertEquals(newNotificationId,messages.get(key).longValue());
}
