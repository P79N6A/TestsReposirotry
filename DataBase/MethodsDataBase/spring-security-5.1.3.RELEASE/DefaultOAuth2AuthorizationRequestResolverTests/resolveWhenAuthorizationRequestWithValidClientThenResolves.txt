@Test public void resolveWhenAuthorizationRequestWithValidClientThenResolves(){
  ClientRegistration clientRegistration=this.registration1;
  String requestUri=this.authorizationRequestBaseUri + "/" + clientRegistration.getRegistrationId();
  MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
  request.setServletPath(requestUri);
  OAuth2AuthorizationRequest authorizationRequest=this.resolver.resolve(request);
  assertThat(authorizationRequest).isNotNull();
  assertThat(authorizationRequest.getAuthorizationUri()).isEqualTo(clientRegistration.getProviderDetails().getAuthorizationUri());
  assertThat(authorizationRequest.getGrantType()).isEqualTo(AuthorizationGrantType.AUTHORIZATION_CODE);
  assertThat(authorizationRequest.getResponseType()).isEqualTo(OAuth2AuthorizationResponseType.CODE);
  assertThat(authorizationRequest.getClientId()).isEqualTo(clientRegistration.getClientId());
  assertThat(authorizationRequest.getRedirectUri()).isEqualTo("http://localhost/login/oauth2/code/" + clientRegistration.getRegistrationId());
  assertThat(authorizationRequest.getScopes()).isEqualTo(clientRegistration.getScopes());
  assertThat(authorizationRequest.getState()).isNotNull();
  assertThat(authorizationRequest.getAdditionalParameters()).containsExactly(entry(OAuth2ParameterNames.REGISTRATION_ID,clientRegistration.getRegistrationId()));
  assertThat(authorizationRequest.getAuthorizationRequestUri()).matches("https://example.com/login/oauth/authorize\\?response_type=code&client_id=client-id&scope=read%3Auser&state=.{15,}&redirect_uri=http%3A%2F%2Flocalhost%2Flogin%2Foauth2%2Fcode%2Fregistration-id");
}
