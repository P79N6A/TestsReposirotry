@Test public void onUnsuccessfulLoginIsCalledWhenProviderRejectsAuth() throws Exception {
  final Authentication failedAuth=new TestingAuthenticationToken("failed","");
  AuthenticationManager am=mock(AuthenticationManager.class);
  when(am.authenticate(any(Authentication.class))).thenThrow(new BadCredentialsException(""));
  RememberMeAuthenticationFilter filter=new RememberMeAuthenticationFilter(am,new MockRememberMeServices(remembered)){
    protected void onUnsuccessfulAuthentication(    HttpServletRequest request,    HttpServletResponse response,    AuthenticationException failed){
      super.onUnsuccessfulAuthentication(request,response,failed);
      SecurityContextHolder.getContext().setAuthentication(failedAuth);
    }
  }
;
  filter.setApplicationEventPublisher(mock(ApplicationEventPublisher.class));
  filter.afterPropertiesSet();
  MockHttpServletRequest request=new MockHttpServletRequest();
  FilterChain fc=mock(FilterChain.class);
  request.setRequestURI("x");
  filter.doFilter(request,new MockHttpServletResponse(),fc);
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isSameAs(failedAuth);
  verify(fc).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
}
