@Test public void requestAuthorizeGitHubClientWhenLinkClickedThenStatusRedirectForAuthorization() throws Exception {
  HtmlPage page=this.webClient.getPage("/");
  ClientRegistration clientRegistration=this.clientRegistrationRepository.findByRegistrationId("github");
  HtmlAnchor clientAnchorElement=this.getClientAnchorElement(page,clientRegistration);
  assertThat(clientAnchorElement).isNotNull();
  WebResponse response=this.followLinkDisableRedirects(clientAnchorElement);
  assertThat(response.getStatusCode()).isEqualTo(HttpStatus.MOVED_PERMANENTLY.value());
  String authorizeRedirectUri=response.getResponseHeaderValue("Location");
  assertThat(authorizeRedirectUri).isNotNull();
  UriComponents uriComponents=UriComponentsBuilder.fromUri(URI.create(authorizeRedirectUri)).build();
  String requestUri=uriComponents.getScheme() + "://" + uriComponents.getHost()+ uriComponents.getPath();
  assertThat(requestUri).isEqualTo(clientRegistration.getProviderDetails().getAuthorizationUri());
  Map<String,String> params=uriComponents.getQueryParams().toSingleValueMap();
  assertThat(params.get(OAuth2ParameterNames.RESPONSE_TYPE)).isEqualTo(OAuth2AuthorizationResponseType.CODE.getValue());
  assertThat(params.get(OAuth2ParameterNames.CLIENT_ID)).isEqualTo(clientRegistration.getClientId());
  String redirectUri=AUTHORIZE_BASE_URL + "/" + clientRegistration.getRegistrationId();
  assertThat(URLDecoder.decode(params.get(OAuth2ParameterNames.REDIRECT_URI),"UTF-8")).isEqualTo(redirectUri);
  assertThat(URLDecoder.decode(params.get(OAuth2ParameterNames.SCOPE),"UTF-8")).isEqualTo(clientRegistration.getScopes().stream().collect(Collectors.joining(" ")));
  assertThat(params.get(OAuth2ParameterNames.STATE)).isNotNull();
}
