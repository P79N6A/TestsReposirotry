@Test public void loadUserWhenUserInfoSuccessResponseThenReturnUser(){
  String userInfoResponse="{\n" + "	\"sub\": \"subject1\",\n" + "   \"name\": \"first last\",\n"+ "   \"given_name\": \"first\",\n"+ "   \"family_name\": \"last\",\n"+ "   \"preferred_username\": \"user1\",\n"+ "   \"email\": \"user1@example.com\"\n"+ "}\n";
  this.server.enqueue(jsonResponse(userInfoResponse));
  String userInfoUri=this.server.url("/user").toString();
  when(this.userInfoEndpoint.getUri()).thenReturn(userInfoUri);
  when(this.accessToken.getTokenValue()).thenReturn("access-token");
  OidcUser user=this.userService.loadUser(new OidcUserRequest(this.clientRegistration,this.accessToken,this.idToken));
  assertThat(user.getIdToken()).isNotNull();
  assertThat(user.getUserInfo()).isNotNull();
  assertThat(user.getUserInfo().getClaims().size()).isEqualTo(6);
  assertThat(user.getIdToken()).isEqualTo(this.idToken);
  assertThat(user.getName()).isEqualTo("subject1");
  assertThat(user.getUserInfo().getSubject()).isEqualTo("subject1");
  assertThat(user.getUserInfo().getFullName()).isEqualTo("first last");
  assertThat(user.getUserInfo().getGivenName()).isEqualTo("first");
  assertThat(user.getUserInfo().getFamilyName()).isEqualTo("last");
  assertThat(user.getUserInfo().getPreferredUsername()).isEqualTo("user1");
  assertThat(user.getUserInfo().getEmail()).isEqualTo("user1@example.com");
  assertThat(user.getAuthorities().size()).isEqualTo(1);
  assertThat(user.getAuthorities().iterator().next()).isInstanceOf(OidcUserAuthority.class);
  OidcUserAuthority userAuthority=(OidcUserAuthority)user.getAuthorities().iterator().next();
  assertThat(userAuthority.getAuthority()).isEqualTo("ROLE_USER");
  assertThat(userAuthority.getIdToken()).isEqualTo(user.getIdToken());
  assertThat(userAuthority.getUserInfo()).isEqualTo(user.getUserInfo());
}
