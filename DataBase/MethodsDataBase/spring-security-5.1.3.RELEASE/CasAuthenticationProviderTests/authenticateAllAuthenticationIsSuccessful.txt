@Test public void authenticateAllAuthenticationIsSuccessful() throws Exception {
  String serviceUrl="https://service/context";
  ServiceAuthenticationDetails details=mock(ServiceAuthenticationDetails.class);
  when(details.getServiceUrl()).thenReturn(serviceUrl);
  TicketValidator validator=mock(TicketValidator.class);
  when(validator.validate(any(String.class),any(String.class))).thenReturn(new AssertionImpl("rod"));
  ServiceProperties serviceProperties=makeServiceProperties();
  serviceProperties.setAuthenticateAllArtifacts(true);
  CasAuthenticationProvider cap=new CasAuthenticationProvider();
  cap.setAuthenticationUserDetailsService(new MockAuthoritiesPopulator());
  cap.setKey("qwerty");
  cap.setTicketValidator(validator);
  cap.setServiceProperties(serviceProperties);
  cap.afterPropertiesSet();
  String ticket="ST-456";
  UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken(CasAuthenticationFilter.CAS_STATELESS_IDENTIFIER,ticket);
  Authentication result=cap.authenticate(token);
  verify(validator).validate(ticket,serviceProperties.getService());
  serviceProperties.setAuthenticateAllArtifacts(true);
  result=cap.authenticate(token);
  verify(validator,times(2)).validate(ticket,serviceProperties.getService());
  token.setDetails(details);
  result=cap.authenticate(token);
  verify(validator).validate(ticket,serviceUrl);
  serviceProperties.setAuthenticateAllArtifacts(false);
  serviceProperties.setService(null);
  cap.setServiceProperties(serviceProperties);
  cap.afterPropertiesSet();
  result=cap.authenticate(token);
  verify(validator,times(2)).validate(ticket,serviceUrl);
  token.setDetails(new WebAuthenticationDetails(new MockHttpServletRequest()));
  try {
    cap.authenticate(token);
    fail("Expected Exception");
  }
 catch (  IllegalStateException success) {
  }
  cap.setServiceProperties(null);
  cap.afterPropertiesSet();
  try {
    cap.authenticate(token);
    fail("Expected Exception");
  }
 catch (  IllegalStateException success) {
  }
}
