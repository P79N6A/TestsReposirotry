@Test public void statefulAuthenticationIsSuccessful() throws Exception {
  CasAuthenticationProvider cap=new CasAuthenticationProvider();
  cap.setAuthenticationUserDetailsService(new MockAuthoritiesPopulator());
  cap.setKey("qwerty");
  StatelessTicketCache cache=new MockStatelessTicketCache();
  cap.setStatelessTicketCache(cache);
  cap.setServiceProperties(makeServiceProperties());
  cap.setTicketValidator(new MockTicketValidator(true));
  cap.afterPropertiesSet();
  UsernamePasswordAuthenticationToken token=new UsernamePasswordAuthenticationToken(CasAuthenticationFilter.CAS_STATEFUL_IDENTIFIER,"ST-123");
  token.setDetails("details");
  Authentication result=cap.authenticate(token);
  assertThat(cache.getByTicketId("ST-456") == null).isTrue();
  if (!(result instanceof CasAuthenticationToken)) {
    fail("Should have returned a CasAuthenticationToken");
  }
  CasAuthenticationToken casResult=(CasAuthenticationToken)result;
  assertThat(casResult.getPrincipal()).isEqualTo(makeUserDetailsFromAuthoritiesPopulator());
  assertThat(casResult.getCredentials()).isEqualTo("ST-123");
  assertThat(casResult.getAuthorities()).contains(new SimpleGrantedAuthority("ROLE_A"));
  assertThat(casResult.getAuthorities()).contains(new SimpleGrantedAuthority("ROLE_B"));
  assertThat(casResult.getKeyHash()).isEqualTo(cap.getKey().hashCode());
  assertThat(casResult.getDetails()).isEqualTo("details");
  cap.setTicketValidator(new MockTicketValidator(false));
  Authentication laterResult=cap.authenticate(result);
  assertThat(laterResult).isEqualTo(result);
}
