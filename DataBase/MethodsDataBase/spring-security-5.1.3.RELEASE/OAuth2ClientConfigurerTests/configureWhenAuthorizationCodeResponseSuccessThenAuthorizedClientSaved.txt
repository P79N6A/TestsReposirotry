@Test public void configureWhenAuthorizationCodeResponseSuccessThenAuthorizedClientSaved() throws Exception {
  this.spring.register(OAuth2ClientConfig.class).autowire();
  Map<String,Object> additionalParameters=new HashMap<>();
  additionalParameters.put(OAuth2ParameterNames.REGISTRATION_ID,this.registration1.getRegistrationId());
  OAuth2AuthorizationRequest authorizationRequest=OAuth2AuthorizationRequest.authorizationCode().authorizationUri(this.registration1.getProviderDetails().getAuthorizationUri()).clientId(this.registration1.getClientId()).redirectUri("http://localhost/client-1").state("state").additionalParameters(additionalParameters).build();
  AuthorizationRequestRepository<OAuth2AuthorizationRequest> authorizationRequestRepository=new HttpSessionOAuth2AuthorizationRequestRepository();
  MockHttpServletRequest request=new MockHttpServletRequest("GET","");
  MockHttpServletResponse response=new MockHttpServletResponse();
  authorizationRequestRepository.saveAuthorizationRequest(authorizationRequest,request,response);
  MockHttpSession session=(MockHttpSession)request.getSession();
  String principalName="user1";
  TestingAuthenticationToken authentication=new TestingAuthenticationToken(principalName,"password");
  this.mockMvc.perform(get("/client-1").param(OAuth2ParameterNames.CODE,"code").param(OAuth2ParameterNames.STATE,"state").with(authentication(authentication)).session(session)).andExpect(status().is3xxRedirection()).andExpect(redirectedUrl("http://localhost/client-1"));
  OAuth2AuthorizedClient authorizedClient=authorizedClientRepository.loadAuthorizedClient(this.registration1.getRegistrationId(),authentication,request);
  assertThat(authorizedClient).isNotNull();
}
