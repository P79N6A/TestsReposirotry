@Test @Transactional public void testLifecycle(){
  SecurityContextHolder.getContext().setAuthentication(auth);
  MutableAcl topParent=jdbcMutableAclService.createAcl(getTopParentOid());
  MutableAcl middleParent=jdbcMutableAclService.createAcl(getMiddleParentOid());
  MutableAcl child=jdbcMutableAclService.createAcl(getChildOid());
  middleParent.setParent(topParent);
  child.setParent(middleParent);
  topParent.insertAce(0,BasePermission.READ,new PrincipalSid(auth),true);
  topParent.insertAce(1,BasePermission.WRITE,new PrincipalSid(auth),false);
  middleParent.insertAce(0,BasePermission.DELETE,new PrincipalSid(auth),true);
  child.insertAce(0,BasePermission.DELETE,new PrincipalSid(auth),false);
  jdbcMutableAclService.updateAcl(topParent);
  jdbcMutableAclService.updateAcl(middleParent);
  jdbcMutableAclService.updateAcl(child);
  Map<ObjectIdentity,Acl> map=jdbcMutableAclService.readAclsById(Arrays.asList(getTopParentOid(),getMiddleParentOid(),getChildOid()));
  assertThat(map).hasSize(3);
  topParent=(MutableAcl)map.get(getTopParentOid());
  middleParent=(MutableAcl)map.get(getMiddleParentOid());
  child=(MutableAcl)map.get(getChildOid());
  assertThat(topParent.getId()).isNotNull();
  assertThat(middleParent.getId()).isNotNull();
  assertThat(child.getId()).isNotNull();
  assertThat(topParent.getParentAcl()).isNull();
  assertThat(middleParent.getParentAcl().getObjectIdentity()).isEqualTo(getTopParentOid());
  assertThat(child.getParentAcl().getObjectIdentity()).isEqualTo(getMiddleParentOid());
  assertThat(topParent.getEntries()).hasSize(2);
  assertThat(middleParent.getEntries()).hasSize(1);
  assertThat(child.getEntries()).hasSize(1);
  List<Permission> read=Arrays.asList(BasePermission.READ);
  List<Permission> write=Arrays.asList(BasePermission.WRITE);
  List<Permission> delete=Arrays.asList(BasePermission.DELETE);
  List<Sid> pSid=Arrays.asList((Sid)new PrincipalSid(auth));
  assertThat(topParent.isGranted(read,pSid,false)).isTrue();
  assertThat(topParent.isGranted(write,pSid,false)).isFalse();
  assertThat(middleParent.isGranted(delete,pSid,false)).isTrue();
  assertThat(child.isGranted(delete,pSid,false)).isFalse();
  try {
    child.isGranted(Arrays.asList(BasePermission.ADMINISTRATION),pSid,false);
    fail("Should have thrown NotFoundException");
  }
 catch (  NotFoundException expected) {
  }
  assertThat(child.isGranted(read,pSid,false)).isTrue();
  assertThat(child.isGranted(write,pSid,false)).isFalse();
  assertThat(child.isGranted(delete,pSid,false)).isFalse();
  child.setEntriesInheriting(false);
  jdbcMutableAclService.updateAcl(child);
  child=(MutableAcl)jdbcMutableAclService.readAclById(getChildOid());
  assertThat(child.isEntriesInheriting()).isFalse();
  assertThat(child.isGranted(delete,pSid,true)).isFalse();
  try {
    child.isGranted(read,pSid,true);
    fail("Should have thrown NotFoundException");
  }
 catch (  NotFoundException expected) {
  }
  try {
    child.isGranted(write,pSid,true);
    fail("Should have thrown NotFoundException");
  }
 catch (  NotFoundException expected) {
  }
  child.insertAce(1,BasePermission.DELETE,new PrincipalSid(auth),true);
  child.insertAce(2,BasePermission.CREATE,new PrincipalSid(auth),true);
  jdbcMutableAclService.updateAcl(child);
  child=(MutableAcl)jdbcMutableAclService.readAclById(getChildOid());
  assertThat(child.getEntries()).hasSize(3);
  for (int i=0; i < child.getEntries().size(); i++) {
    System.out.println(child.getEntries().get(i));
  }
  assertThat(child.isGranted(delete,pSid,true)).isFalse();
  assertThat(child.isGranted(Arrays.asList(BasePermission.CREATE),pSid,true)).isTrue();
  AccessControlEntry entry=child.getEntries().get(0);
  assertThat(entry.getPermission().getMask()).isEqualTo(BasePermission.DELETE.getMask());
  assertThat(entry.getSid()).isEqualTo(new PrincipalSid(auth));
  assertThat(entry.isGranting()).isFalse();
  assertThat(entry.getId()).isNotNull();
  child.deleteAce(0);
  child=jdbcMutableAclService.updateAcl(child);
  assertThat(child.getEntries()).hasSize(2);
  assertThat(child.isGranted(delete,pSid,false)).isTrue();
  SecurityContextHolder.clearContext();
}
