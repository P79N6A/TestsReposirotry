/** 
 * SEC-655
 */
@Test @Transactional public void childrenAreClearedFromCacheWhenParentisUpdated2() throws Exception {
  Authentication auth=new TestingAuthenticationToken("system","secret","ROLE_IGNORED");
  SecurityContextHolder.getContext().setAuthentication(auth);
  ObjectIdentityImpl rootObject=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(1));
  MutableAcl parent=jdbcMutableAclService.createAcl(rootObject);
  MutableAcl child=jdbcMutableAclService.createAcl(new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(2)));
  child.setParent(parent);
  jdbcMutableAclService.updateAcl(child);
  parent.insertAce(0,BasePermission.ADMINISTRATION,new GrantedAuthoritySid("ROLE_ADMINISTRATOR"),true);
  jdbcMutableAclService.updateAcl(parent);
  parent.insertAce(1,BasePermission.DELETE,new PrincipalSid("terry"),true);
  jdbcMutableAclService.updateAcl(parent);
  child=(MutableAcl)jdbcMutableAclService.readAclById(new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(2)));
  parent=(MutableAcl)child.getParentAcl();
  assertThat(parent.getEntries()).hasSize(2);
  assertThat(parent.getEntries().get(0).getPermission().getMask()).isEqualTo(16);
  assertThat(parent.getEntries().get(0).getSid()).isEqualTo(new GrantedAuthoritySid("ROLE_ADMINISTRATOR"));
  assertThat(parent.getEntries().get(1).getPermission().getMask()).isEqualTo(8);
  assertThat(parent.getEntries().get(1).getSid()).isEqualTo(new PrincipalSid("terry"));
}
