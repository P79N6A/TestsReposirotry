/** 
 * SEC-655
 */
@Test @Transactional public void childrenAreClearedFromCacheWhenParentIsUpdated() throws Exception {
  Authentication auth=new TestingAuthenticationToken("ben","ignored","ROLE_ADMINISTRATOR");
  auth.setAuthenticated(true);
  SecurityContextHolder.getContext().setAuthentication(auth);
  ObjectIdentity parentOid=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(104));
  ObjectIdentity childOid=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(105));
  MutableAcl parent=jdbcMutableAclService.createAcl(parentOid);
  MutableAcl child=jdbcMutableAclService.createAcl(childOid);
  child.setParent(parent);
  jdbcMutableAclService.updateAcl(child);
  parent=(AclImpl)jdbcMutableAclService.readAclById(parentOid);
  parent.insertAce(0,BasePermission.READ,new PrincipalSid("ben"),true);
  jdbcMutableAclService.updateAcl(parent);
  parent=(AclImpl)jdbcMutableAclService.readAclById(parentOid);
  parent.insertAce(1,BasePermission.READ,new PrincipalSid("scott"),true);
  jdbcMutableAclService.updateAcl(parent);
  child=(MutableAcl)jdbcMutableAclService.readAclById(childOid);
  parent=(MutableAcl)child.getParentAcl();
  assertThat(parent.getEntries()).hasSize(2).withFailMessage("Fails because child has a stale reference to its parent");
  assertThat(parent.getEntries().get(0).getPermission().getMask()).isEqualTo(1);
  assertThat(parent.getEntries().get(0).getSid()).isEqualTo(new PrincipalSid("ben"));
  assertThat(parent.getEntries().get(1).getPermission().getMask()).isEqualTo(1);
  assertThat(parent.getEntries().get(1).getSid()).isEqualTo(new PrincipalSid("scott"));
}
