/** 
 * This test ensures that any element that has children or parents contains a section that has links pointing to that documentation.
 * @return
 */
@Test public void countLinksWhenReviewingDocumentationThenParentsAndChildrenAreCorrectlyLinked() throws IOException {
  Map<String,List<String>> docAttrNameToChildren=new HashMap<>();
  Map<String,List<String>> docAttrNameToParents=new HashMap<>();
  String docAttrName=null;
  Map<String,List<String>> currentDocAttrNameToElmt=null;
  List<String> lines=Files.readAllLines(Paths.get(this.referenceLocation));
  for (  String line : lines) {
    if (line.matches("^\\[\\[.*\\]\\]$")) {
      String id=line.substring(2,line.length() - 2);
      if (id.endsWith("-children")) {
        docAttrName=id.substring(0,id.length() - 9);
        currentDocAttrNameToElmt=docAttrNameToChildren;
      }
 else       if (id.endsWith("-parents")) {
        docAttrName=id.substring(0,id.length() - 8);
        currentDocAttrNameToElmt=docAttrNameToParents;
      }
 else       if (docAttrName != null && !id.startsWith(docAttrName)) {
        currentDocAttrNameToElmt=null;
        docAttrName=null;
      }
    }
    if (docAttrName != null && currentDocAttrNameToElmt != null) {
      String expression="^\\* <<(nsa-.*),.*>>$";
      if (line.matches(expression)) {
        String elmtId=line.replaceAll(expression,"$1");
        currentDocAttrNameToElmt.computeIfAbsent(docAttrName,key -> new ArrayList<>()).add(elmtId);
      }
    }
  }
  Map<String,Element> elementNameToElement=this.xml.elementsByElementName(this.schemaDocumentLocation);
  Map<String,List<String>> schemaAttrNameToChildren=new HashMap<>();
  Map<String,List<String>> schemaAttrNameToParents=new HashMap<>();
  elementNameToElement.entrySet().stream().forEach(entry -> {
    String key="nsa-" + entry.getKey();
    if (this.ignoredIds.contains(key)) {
      return;
    }
    List<String> parentIds=entry.getValue().getAllParentElmts().values().stream().filter(element -> !this.ignoredIds.contains(element.getId())).map(element -> element.getId()).sorted().collect(Collectors.toList());
    if (!parentIds.isEmpty()) {
      schemaAttrNameToParents.put(key,parentIds);
    }
    List<String> childIds=entry.getValue().getAllChildElmts().values().stream().filter(element -> !this.ignoredIds.contains(element.getId())).map(element -> element.getId()).sorted().collect(Collectors.toList());
    if (!childIds.isEmpty()) {
      schemaAttrNameToChildren.put(key,childIds);
    }
  }
);
  assertThat(docAttrNameToChildren).isEqualTo(schemaAttrNameToChildren);
  assertThat(docAttrNameToParents).isEqualTo(schemaAttrNameToParents);
}
