@Test public void validateWhenConfiguredWithClockSkewThenValidatesUsingThatSkew(){
  Duration oneDayOff=Duration.ofDays(1);
  JwtTimestampValidator jwtValidator=new JwtTimestampValidator(oneDayOff);
  Instant now=Instant.now();
  Instant almostOneDayAgo=now.minus(oneDayOff).plusSeconds(10);
  Instant almostOneDayFromNow=now.plus(oneDayOff).minusSeconds(10);
  Instant justOverOneDayAgo=now.minus(oneDayOff).minusSeconds(10);
  Instant justOverOneDayFromNow=now.plus(oneDayOff).plusSeconds(10);
  Jwt jwt=new Jwt(MOCK_TOKEN_VALUE,MOCK_ISSUED_AT,almostOneDayAgo,MOCK_HEADER,Collections.singletonMap(JwtClaimNames.NBF,almostOneDayFromNow));
  assertThat(jwtValidator.validate(jwt).hasErrors()).isFalse();
  jwt=new Jwt(MOCK_TOKEN_VALUE,MOCK_ISSUED_AT,justOverOneDayAgo,MOCK_HEADER,MOCK_CLAIM_SET);
  OAuth2TokenValidatorResult result=jwtValidator.validate(jwt);
  Collection<String> messages=result.getErrors().stream().map(OAuth2Error::getDescription).collect(Collectors.toList());
  assertThat(result.hasErrors()).isTrue();
  assertThat(messages).contains("Jwt expired at " + justOverOneDayAgo);
  jwt=new Jwt(MOCK_TOKEN_VALUE,MOCK_ISSUED_AT,null,MOCK_HEADER,Collections.singletonMap(JwtClaimNames.NBF,justOverOneDayFromNow));
  result=jwtValidator.validate(jwt);
  messages=result.getErrors().stream().map(OAuth2Error::getDescription).collect(Collectors.toList());
  assertThat(result.hasErrors()).isTrue();
  assertThat(messages).contains("Jwt used before " + justOverOneDayFromNow);
}
