@Test public void validateWhenMultipleValidatorsFailThenReturnsFailureResultContainingAllDetails(){
  OAuth2TokenValidator<AbstractOAuth2Token> firstFailure=mock(OAuth2TokenValidator.class);
  OAuth2TokenValidator<AbstractOAuth2Token> secondFailure=mock(OAuth2TokenValidator.class);
  OAuth2Error otherDetail=new OAuth2Error("another-error");
  when(firstFailure.validate(any(AbstractOAuth2Token.class))).thenReturn(OAuth2TokenValidatorResult.failure(DETAIL));
  when(secondFailure.validate(any(AbstractOAuth2Token.class))).thenReturn(OAuth2TokenValidatorResult.failure(otherDetail));
  DelegatingOAuth2TokenValidator<AbstractOAuth2Token> tokenValidator=new DelegatingOAuth2TokenValidator<>(firstFailure,secondFailure);
  AbstractOAuth2Token token=mock(AbstractOAuth2Token.class);
  OAuth2TokenValidatorResult result=tokenValidator.validate(token);
  assertThat(result.hasErrors()).isTrue();
  assertThat(result.getErrors()).containsExactly(DETAIL,otherDetail);
}
