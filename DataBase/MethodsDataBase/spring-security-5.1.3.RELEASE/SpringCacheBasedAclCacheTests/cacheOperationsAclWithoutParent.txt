@SuppressWarnings("rawtypes") @Test public void cacheOperationsAclWithoutParent() throws Exception {
  Cache cache=getCache();
  Map realCache=(Map)cache.getNativeCache();
  ObjectIdentity identity=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(100));
  AclAuthorizationStrategy aclAuthorizationStrategy=new AclAuthorizationStrategyImpl(new SimpleGrantedAuthority("ROLE_OWNERSHIP"),new SimpleGrantedAuthority("ROLE_AUDITING"),new SimpleGrantedAuthority("ROLE_GENERAL"));
  AuditLogger auditLogger=new ConsoleAuditLogger();
  PermissionGrantingStrategy permissionGrantingStrategy=new DefaultPermissionGrantingStrategy(auditLogger);
  SpringCacheBasedAclCache myCache=new SpringCacheBasedAclCache(cache,permissionGrantingStrategy,aclAuthorizationStrategy);
  MutableAcl acl=new AclImpl(identity,Long.valueOf(1),aclAuthorizationStrategy,auditLogger);
  assertThat(realCache).isEmpty();
  myCache.putInCache(acl);
  assertThat(acl).isEqualTo(myCache.getFromCache(Long.valueOf(1)));
  assertThat(acl).isEqualTo(myCache.getFromCache(identity));
  ObjectIdentity identity2=new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(101));
  MutableAcl acl2=new AclImpl(identity2,Long.valueOf(2),aclAuthorizationStrategy,new ConsoleAuditLogger());
  myCache.putInCache(acl2);
  myCache.evictFromCache(Long.valueOf(3));
  myCache.evictFromCache(new ObjectIdentityImpl(TARGET_CLASS,Long.valueOf(102)));
  assertThat(realCache).hasSize(4);
  myCache.evictFromCache(Long.valueOf(1));
  assertThat(realCache).hasSize(2);
  assertThat(acl2).isEqualTo(myCache.getFromCache(Long.valueOf(2)));
  assertThat(acl2).isEqualTo(myCache.getFromCache(identity2));
  myCache.evictFromCache(identity2);
  assertThat(realCache).isEmpty();
}
