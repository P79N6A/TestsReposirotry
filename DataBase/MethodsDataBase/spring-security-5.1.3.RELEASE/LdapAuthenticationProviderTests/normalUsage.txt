@Test public void normalUsage(){
  MockAuthoritiesPopulator populator=new MockAuthoritiesPopulator();
  LdapAuthenticationProvider ldapProvider=new LdapAuthenticationProvider(new MockAuthenticator(),populator);
  LdapUserDetailsMapper userMapper=new LdapUserDetailsMapper();
  userMapper.setRoleAttributes(new String[]{"ou"});
  ldapProvider.setUserDetailsContextMapper(userMapper);
  assertThat(ldapProvider.getAuthoritiesPopulator()).isNotNull();
  UsernamePasswordAuthenticationToken authRequest=new UsernamePasswordAuthenticationToken("ben","benspassword");
  Object authDetails=new Object();
  authRequest.setDetails(authDetails);
  Authentication authResult=ldapProvider.authenticate(authRequest);
  assertThat(authResult.getCredentials()).isEqualTo("benspassword");
  assertThat(authResult.getDetails()).isSameAs(authDetails);
  UserDetails user=(UserDetails)authResult.getPrincipal();
  assertThat(user.getAuthorities()).hasSize(2);
  assertThat(user.getPassword()).isEqualTo("{SHA}nFCebWjxfaLbHHG1Qk5UU4trbvQ=");
  assertThat(user.getUsername()).isEqualTo("ben");
  assertThat(populator.getRequestedUsername()).isEqualTo("ben");
  assertThat(AuthorityUtils.authorityListToSet(user.getAuthorities())).contains("ROLE_FROM_ENTRY");
  assertThat(AuthorityUtils.authorityListToSet(user.getAuthorities())).contains("ROLE_FROM_POPULATOR");
}
