@Test public void testSuccessLoginThenFailureLoginResultsInSessionLosingToken() throws Exception {
  String token="rod:koala";
  MockHttpServletRequest request=new MockHttpServletRequest();
  request.addHeader("Authorization","Basic " + new String(Base64.encodeBase64(token.getBytes())));
  request.setServletPath("/some_file.html");
  final MockHttpServletResponse response1=new MockHttpServletResponse();
  FilterChain chain=mock(FilterChain.class);
  filter.doFilter(request,response1,chain);
  verify(chain).doFilter(any(ServletRequest.class),any(ServletResponse.class));
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isNotNull();
  assertThat(SecurityContextHolder.getContext().getAuthentication().getName()).isEqualTo("rod");
  token="otherUser:WRONG_PASSWORD";
  request=new MockHttpServletRequest();
  request.addHeader("Authorization","Basic " + new String(Base64.encodeBase64(token.getBytes())));
  final MockHttpServletResponse response2=new MockHttpServletResponse();
  chain=mock(FilterChain.class);
  filter.doFilter(request,response2,chain);
  verify(chain,never()).doFilter(any(ServletRequest.class),any(ServletResponse.class));
  request.setServletPath("/some_file.html");
  MockHttpServletResponse response=response2;
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();
  assertThat(response.getStatus()).isEqualTo(401);
}
