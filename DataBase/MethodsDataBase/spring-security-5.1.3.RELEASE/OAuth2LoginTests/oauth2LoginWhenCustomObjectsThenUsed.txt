@Test public void oauth2LoginWhenCustomObjectsThenUsed(){
  this.spring.register(OAuth2LoginWithSingleClientRegistrations.class,OAuth2LoginMockAuthenticationManagerConfig.class).autowire();
  WebTestClient webTestClient=WebTestClientBuilder.bindToWebFilters(this.springSecurity).build();
  OAuth2LoginMockAuthenticationManagerConfig config=this.spring.getContext().getBean(OAuth2LoginMockAuthenticationManagerConfig.class);
  ServerAuthenticationConverter converter=config.authenticationConverter;
  ReactiveAuthenticationManager manager=config.manager;
  OAuth2AuthorizationExchange exchange=TestOAuth2AuthorizationExchanges.success();
  OAuth2User user=TestOAuth2Users.create();
  OAuth2AccessToken accessToken=TestOAuth2AccessTokens.noScopes();
  OAuth2LoginAuthenticationToken result=new OAuth2LoginAuthenticationToken(github,exchange,user,user.getAuthorities(),accessToken);
  when(converter.convert(any())).thenReturn(Mono.just(new TestingAuthenticationToken("a","b","c")));
  when(manager.authenticate(any())).thenReturn(Mono.just(result));
  webTestClient.get().uri("/login/oauth2/code/github").exchange().expectStatus().is3xxRedirection();
  verify(converter).convert(any());
  verify(manager).authenticate(any());
}
