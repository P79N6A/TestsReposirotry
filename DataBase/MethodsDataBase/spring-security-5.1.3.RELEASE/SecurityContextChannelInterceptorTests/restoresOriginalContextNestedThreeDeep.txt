/** 
 * If a user sends a websocket when processing another websocket
 * @throws Exception
 */
@Test public void restoresOriginalContextNestedThreeDeep() throws Exception {
  AnonymousAuthenticationToken anonymous=new AnonymousAuthenticationToken("key","anonymous",AuthorityUtils.createAuthorityList("ROLE_USER"));
  TestingAuthenticationToken origional=new TestingAuthenticationToken("original","origional","ROLE_USER");
  SecurityContextHolder.getContext().setAuthentication(origional);
  messageBuilder.setHeader(SimpMessageHeaderAccessor.USER_HEADER,authentication);
  interceptor.beforeHandle(messageBuilder.build(),channel,handler);
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isSameAs(authentication);
  messageBuilder.setHeader(SimpMessageHeaderAccessor.USER_HEADER,null);
  interceptor.beforeHandle(messageBuilder.build(),channel,handler);
  assertThat(SecurityContextHolder.getContext().getAuthentication().getName()).isEqualTo(anonymous.getName());
  interceptor.afterMessageHandled(messageBuilder.build(),channel,handler,null);
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isSameAs(authentication);
  interceptor.afterMessageHandled(messageBuilder.build(),channel,handler,null);
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isSameAs(origional);
}
