@Test public void doFilterWhenAuthorizationResponseHasDefaultPort80ThenRedirectUriMatchingExcludesPort() throws Exception {
  String requestUri="/login/oauth2/code/" + this.registration2.getRegistrationId();
  String state="state";
  MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
  request.setScheme("http");
  request.setServerName("example.com");
  request.setServerPort(80);
  request.setServletPath(requestUri);
  request.addParameter(OAuth2ParameterNames.CODE,"code");
  request.addParameter(OAuth2ParameterNames.STATE,"state");
  MockHttpServletResponse response=new MockHttpServletResponse();
  FilterChain filterChain=mock(FilterChain.class);
  this.setUpAuthorizationRequest(request,response,this.registration2,state);
  this.setUpAuthenticationResult(this.registration2);
  this.filter.doFilter(request,response,filterChain);
  ArgumentCaptor<Authentication> authenticationArgCaptor=ArgumentCaptor.forClass(Authentication.class);
  verify(this.authenticationManager).authenticate(authenticationArgCaptor.capture());
  OAuth2LoginAuthenticationToken authentication=(OAuth2LoginAuthenticationToken)authenticationArgCaptor.getValue();
  OAuth2AuthorizationRequest authorizationRequest=authentication.getAuthorizationExchange().getAuthorizationRequest();
  OAuth2AuthorizationResponse authorizationResponse=authentication.getAuthorizationExchange().getAuthorizationResponse();
  String expectedRedirectUri="http://example.com/login/oauth2/code/registration-id-2";
  assertThat(authorizationRequest.getRedirectUri()).isEqualTo(expectedRedirectUri);
  assertThat(authorizationResponse.getRedirectUri()).isEqualTo(expectedRedirectUri);
}
