@Test public void doFilterWhenAuthorizationResponseValidThenAuthorizedClientSaved() throws Exception {
  String requestUri="/login/oauth2/code/" + this.registration1.getRegistrationId();
  String state="state";
  MockHttpServletRequest request=new MockHttpServletRequest("GET",requestUri);
  request.setServletPath(requestUri);
  request.addParameter(OAuth2ParameterNames.CODE,"code");
  request.addParameter(OAuth2ParameterNames.STATE,state);
  MockHttpServletResponse response=new MockHttpServletResponse();
  FilterChain filterChain=mock(FilterChain.class);
  this.setUpAuthorizationRequest(request,response,this.registration1,state);
  this.setUpAuthenticationResult(this.registration1);
  this.filter.doFilter(request,response,filterChain);
  OAuth2AuthorizedClient authorizedClient=this.authorizedClientRepository.loadAuthorizedClient(this.registration1.getRegistrationId(),this.loginAuthentication,request);
  assertThat(authorizedClient).isNotNull();
  assertThat(authorizedClient.getClientRegistration()).isEqualTo(this.registration1);
  assertThat(authorizedClient.getPrincipalName()).isEqualTo(this.principalName1);
  assertThat(authorizedClient.getAccessToken()).isNotNull();
  assertThat(authorizedClient.getRefreshToken()).isNotNull();
}
