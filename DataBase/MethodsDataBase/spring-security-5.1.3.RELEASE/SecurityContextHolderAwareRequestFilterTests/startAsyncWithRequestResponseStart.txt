@Test public void startAsyncWithRequestResponseStart() throws Exception {
  ArgumentCaptor<Runnable> runnableCaptor=ArgumentCaptor.forClass(Runnable.class);
  SecurityContext context=SecurityContextHolder.createEmptyContext();
  TestingAuthenticationToken expectedAuth=new TestingAuthenticationToken("user","password","ROLE_USER");
  context.setAuthentication(expectedAuth);
  SecurityContextHolder.setContext(context);
  AsyncContext asyncContext=mock(AsyncContext.class);
  when(this.request.startAsync(this.request,this.response)).thenReturn(asyncContext);
  Runnable runnable=new Runnable(){
    @Override public void run(){
    }
  }
;
  wrappedRequest().startAsync(this.request,this.response).start(runnable);
  verifyZeroInteractions(this.authenticationManager,this.logoutHandler);
  verify(asyncContext).start(runnableCaptor.capture());
  DelegatingSecurityContextRunnable wrappedRunnable=(DelegatingSecurityContextRunnable)runnableCaptor.getValue();
  assertThat(ReflectionTestUtils.getField(wrappedRunnable,"delegateSecurityContext")).isEqualTo(context);
  assertThat(ReflectionTestUtils.getField(wrappedRunnable,"delegate"));
}
