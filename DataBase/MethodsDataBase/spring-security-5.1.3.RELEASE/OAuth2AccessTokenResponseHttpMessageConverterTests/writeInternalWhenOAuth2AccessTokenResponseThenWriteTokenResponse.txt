@Test public void writeInternalWhenOAuth2AccessTokenResponseThenWriteTokenResponse() throws Exception {
  Instant expiresAt=Instant.now().plusSeconds(3600);
  Set<String> scopes=new LinkedHashSet<>(Arrays.asList("read","write"));
  Map<String,Object> additionalParameters=new HashMap<>();
  additionalParameters.put("custom_parameter_1","custom-value-1");
  additionalParameters.put("custom_parameter_2","custom-value-2");
  OAuth2AccessTokenResponse accessTokenResponse=OAuth2AccessTokenResponse.withToken("access-token-1234").tokenType(OAuth2AccessToken.TokenType.BEARER).expiresIn(expiresAt.toEpochMilli()).scopes(scopes).refreshToken("refresh-token-1234").additionalParameters(additionalParameters).build();
  MockHttpOutputMessage outputMessage=new MockHttpOutputMessage();
  this.messageConverter.writeInternal(accessTokenResponse,outputMessage);
  String tokenResponse=outputMessage.getBodyAsString();
  assertThat(tokenResponse).contains("\"access_token\":\"access-token-1234\"");
  assertThat(tokenResponse).contains("\"token_type\":\"Bearer\"");
  assertThat(tokenResponse).contains("\"expires_in\"");
  assertThat(tokenResponse).contains("\"scope\":\"read write\"");
  assertThat(tokenResponse).contains("\"refresh_token\":\"refresh-token-1234\"");
  assertThat(tokenResponse).contains("\"custom_parameter_1\":\"custom-value-1\"");
  assertThat(tokenResponse).contains("\"custom_parameter_2\":\"custom-value-2\"");
}
