@Test public void mvcMatcherServletPath() throws Exception {
  loadConfig(MvcMatcherServletPathConfig.class);
  this.request.setServletPath("/spring");
  this.request.setRequestURI("/spring/path");
  this.springSecurityFilterChain.doFilter(this.request,this.response,this.chain);
  assertThat(this.response.getStatus()).isEqualTo(HttpServletResponse.SC_UNAUTHORIZED);
  setup();
  this.request.setServletPath("/spring");
  this.request.setRequestURI("/spring/path.html");
  this.springSecurityFilterChain.doFilter(this.request,this.response,this.chain);
  assertThat(this.response.getStatus()).isEqualTo(HttpServletResponse.SC_UNAUTHORIZED);
  setup();
  this.request.setServletPath("/spring");
  this.request.setRequestURI("/spring/path/");
  this.springSecurityFilterChain.doFilter(this.request,this.response,this.chain);
  assertThat(this.response.getStatus()).isEqualTo(HttpServletResponse.SC_UNAUTHORIZED);
  setup();
  this.request.setServletPath("/foo");
  this.request.setRequestURI("/foo/path");
  this.springSecurityFilterChain.doFilter(this.request,this.response,this.chain);
  assertThat(this.response.getStatus()).isEqualTo(HttpServletResponse.SC_OK);
  setup();
  this.request.setServletPath("/");
  this.request.setRequestURI("/path");
  this.springSecurityFilterChain.doFilter(this.request,this.response,this.chain);
  assertThat(this.response.getStatus()).isEqualTo(HttpServletResponse.SC_OK);
}
