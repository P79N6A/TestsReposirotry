@Test public void testCorrectOperation() throws Exception {
  AfterInvocationProviderManager manager=new AfterInvocationProviderManager();
  List list=new Vector();
  list.add(new MockAfterInvocationProvider("swap1",MethodInvocation.class,new SecurityConfig("GIVE_ME_SWAP1")));
  list.add(new MockAfterInvocationProvider("swap2",MethodInvocation.class,new SecurityConfig("GIVE_ME_SWAP2")));
  list.add(new MockAfterInvocationProvider("swap3",MethodInvocation.class,new SecurityConfig("GIVE_ME_SWAP3")));
  manager.setProviders(list);
  assertThat(manager.getProviders()).isEqualTo(list);
  manager.afterPropertiesSet();
  List<ConfigAttribute> attr1=SecurityConfig.createList(new String[]{"GIVE_ME_SWAP1"});
  List<ConfigAttribute> attr2=SecurityConfig.createList(new String[]{"GIVE_ME_SWAP2"});
  List<ConfigAttribute> attr3=SecurityConfig.createList(new String[]{"GIVE_ME_SWAP3"});
  List<ConfigAttribute> attr2and3=SecurityConfig.createList(new String[]{"GIVE_ME_SWAP2","GIVE_ME_SWAP3"});
  List<ConfigAttribute> attr4=SecurityConfig.createList(new String[]{"NEVER_CAUSES_SWAP"});
  assertThat(manager.decide(null,new SimpleMethodInvocation(),attr1,"content-before-swapping")).isEqualTo("swap1");
  assertThat(manager.decide(null,new SimpleMethodInvocation(),attr2,"content-before-swapping")).isEqualTo("swap2");
  assertThat(manager.decide(null,new SimpleMethodInvocation(),attr3,"content-before-swapping")).isEqualTo("swap3");
  assertThat(manager.decide(null,new SimpleMethodInvocation(),attr4,"content-before-swapping")).isEqualTo("content-before-swapping");
  assertThat(manager.decide(null,new SimpleMethodInvocation(),attr2and3,"content-before-swapping")).isEqualTo("swap3");
}
