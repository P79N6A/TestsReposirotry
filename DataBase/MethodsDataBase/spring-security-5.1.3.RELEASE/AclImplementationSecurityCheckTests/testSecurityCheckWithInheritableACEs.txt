@Test public void testSecurityCheckWithInheritableACEs() throws Exception {
  Authentication auth=new TestingAuthenticationToken("user","password","ROLE_GENERAL");
  auth.setAuthenticated(true);
  SecurityContextHolder.getContext().setAuthentication(auth);
  ObjectIdentity identity=new ObjectIdentityImpl(TARGET_CLASS,100);
  AclAuthorizationStrategy aclAuthorizationStrategy=new AclAuthorizationStrategyImpl(new SimpleGrantedAuthority("ROLE_ONE"),new SimpleGrantedAuthority("ROLE_TWO"),new SimpleGrantedAuthority("ROLE_GENERAL"));
  MutableAcl parentAcl=new AclImpl(identity,1,aclAuthorizationStrategy,new ConsoleAuditLogger());
  parentAcl.insertAce(0,BasePermission.ADMINISTRATION,new PrincipalSid(auth),true);
  MutableAcl childAcl=new AclImpl(identity,2,aclAuthorizationStrategy,new ConsoleAuditLogger());
  try {
    aclAuthorizationStrategy.securityCheck(childAcl,AclAuthorizationStrategy.CHANGE_OWNERSHIP);
    fail("It should have thrown NotFoundException");
  }
 catch (  NotFoundException expected) {
  }
  childAcl.setParent(parentAcl);
  childAcl.setEntriesInheriting(true);
  try {
    aclAuthorizationStrategy.securityCheck(childAcl,AclAuthorizationStrategy.CHANGE_OWNERSHIP);
  }
 catch (  NotFoundException expected) {
    fail("It shouldn't have thrown NotFoundException");
  }
  MutableAcl rootParentAcl=new AclImpl(identity,1,aclAuthorizationStrategy,new ConsoleAuditLogger());
  parentAcl=new AclImpl(identity,1,aclAuthorizationStrategy,new ConsoleAuditLogger());
  rootParentAcl.insertAce(0,BasePermission.ADMINISTRATION,new PrincipalSid(auth),true);
  parentAcl.setEntriesInheriting(true);
  parentAcl.setParent(rootParentAcl);
  childAcl.setParent(parentAcl);
  try {
    aclAuthorizationStrategy.securityCheck(childAcl,AclAuthorizationStrategy.CHANGE_OWNERSHIP);
  }
 catch (  NotFoundException expected) {
    fail("It shouldn't have thrown NotFoundException");
  }
}
