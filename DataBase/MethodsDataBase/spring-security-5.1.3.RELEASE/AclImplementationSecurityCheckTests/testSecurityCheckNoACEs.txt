@Test public void testSecurityCheckNoACEs() throws Exception {
  Authentication auth=new TestingAuthenticationToken("user","password","ROLE_GENERAL","ROLE_AUDITING","ROLE_OWNERSHIP");
  auth.setAuthenticated(true);
  SecurityContextHolder.getContext().setAuthentication(auth);
  ObjectIdentity identity=new ObjectIdentityImpl(TARGET_CLASS,new Long(100));
  AclAuthorizationStrategy aclAuthorizationStrategy=new AclAuthorizationStrategyImpl(new SimpleGrantedAuthority("ROLE_OWNERSHIP"),new SimpleGrantedAuthority("ROLE_AUDITING"),new SimpleGrantedAuthority("ROLE_GENERAL"));
  Acl acl=new AclImpl(identity,new Long(1),aclAuthorizationStrategy,new ConsoleAuditLogger());
  aclAuthorizationStrategy.securityCheck(acl,AclAuthorizationStrategy.CHANGE_GENERAL);
  aclAuthorizationStrategy.securityCheck(acl,AclAuthorizationStrategy.CHANGE_AUDITING);
  aclAuthorizationStrategy.securityCheck(acl,AclAuthorizationStrategy.CHANGE_OWNERSHIP);
  AclAuthorizationStrategy aclAuthorizationStrategy2=new AclAuthorizationStrategyImpl(new SimpleGrantedAuthority("ROLE_ONE"),new SimpleGrantedAuthority("ROLE_TWO"),new SimpleGrantedAuthority("ROLE_THREE"));
  Acl acl2=new AclImpl(identity,new Long(1),aclAuthorizationStrategy2,new ConsoleAuditLogger());
  try {
    aclAuthorizationStrategy2.securityCheck(acl2,AclAuthorizationStrategy.CHANGE_GENERAL);
    fail("It should have thrown NotFoundException");
  }
 catch (  NotFoundException expected) {
  }
  try {
    aclAuthorizationStrategy2.securityCheck(acl2,AclAuthorizationStrategy.CHANGE_AUDITING);
    fail("It should have thrown NotFoundException");
  }
 catch (  NotFoundException expected) {
  }
  try {
    aclAuthorizationStrategy2.securityCheck(acl2,AclAuthorizationStrategy.CHANGE_OWNERSHIP);
    fail("It should have thrown NotFoundException");
  }
 catch (  NotFoundException expected) {
  }
}
