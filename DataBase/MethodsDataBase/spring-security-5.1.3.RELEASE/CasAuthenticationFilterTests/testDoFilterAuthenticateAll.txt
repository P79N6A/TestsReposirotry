@Test public void testDoFilterAuthenticateAll() throws Exception {
  AuthenticationSuccessHandler successHandler=mock(AuthenticationSuccessHandler.class);
  AuthenticationManager manager=mock(AuthenticationManager.class);
  Authentication authentication=new TestingAuthenticationToken("un","pwd","ROLE_USER");
  when(manager.authenticate(any(Authentication.class))).thenReturn(authentication);
  ServiceProperties serviceProperties=new ServiceProperties();
  serviceProperties.setAuthenticateAllArtifacts(true);
  MockHttpServletRequest request=new MockHttpServletRequest();
  request.setParameter("ticket","ST-1-123");
  request.setServletPath("/authenticate");
  MockHttpServletResponse response=new MockHttpServletResponse();
  FilterChain chain=mock(FilterChain.class);
  CasAuthenticationFilter filter=new CasAuthenticationFilter();
  filter.setServiceProperties(serviceProperties);
  filter.setAuthenticationSuccessHandler(successHandler);
  filter.setProxyGrantingTicketStorage(mock(ProxyGrantingTicketStorage.class));
  filter.setAuthenticationManager(manager);
  filter.afterPropertiesSet();
  filter.doFilter(request,response,chain);
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isNotNull().withFailMessage("Authentication should not be null");
  verify(chain).doFilter(request,response);
  verifyZeroInteractions(successHandler);
  filter.setFilterProcessesUrl(request.getServletPath());
  SecurityContextHolder.clearContext();
  filter.doFilter(request,response,chain);
  verifyNoMoreInteractions(chain);
  verify(successHandler).onAuthenticationSuccess(request,response,authentication);
}
