@Test public void callLogoutHandlersThrowException(){
  LogoutHandler firstLogoutHandler=mock(LogoutHandler.class);
  LogoutHandler secondLogoutHandler=mock(LogoutHandler.class);
  doThrow(new IllegalArgumentException()).when(firstLogoutHandler).logout(any(HttpServletRequest.class),any(HttpServletResponse.class),any(Authentication.class));
  List<LogoutHandler> logoutHandlers=Arrays.asList(firstLogoutHandler,secondLogoutHandler);
  LogoutHandler handler=new CompositeLogoutHandler(logoutHandlers);
  try {
    handler.logout(mock(HttpServletRequest.class),mock(HttpServletResponse.class),mock(Authentication.class));
    fail("Expected Exception");
  }
 catch (  IllegalArgumentException success) {
  }
  InOrder logoutHandlersInOrder=inOrder(firstLogoutHandler,secondLogoutHandler);
  logoutHandlersInOrder.verify(firstLogoutHandler,times(1)).logout(any(HttpServletRequest.class),any(HttpServletResponse.class),any(Authentication.class));
  logoutHandlersInOrder.verify(secondLogoutHandler,never()).logout(any(HttpServletRequest.class),any(HttpServletResponse.class),any(Authentication.class));
}
