@Test @SuppressWarnings("deprecation") public void sessionDisableUrlRewritingPreventsSessionIdBeingWrittenToUrl() throws Exception {
  HttpSessionSecurityContextRepository repo=new HttpSessionSecurityContextRepository();
  MockHttpServletRequest request=new MockHttpServletRequest();
  final String sessionId=";jsessionid=id";
  MockHttpServletResponse response=new MockHttpServletResponse(){
    @Override public String encodeRedirectUrl(    String url){
      return url + sessionId;
    }
    @Override public String encodeRedirectURL(    String url){
      return url + sessionId;
    }
    @Override public String encodeUrl(    String url){
      return url + sessionId;
    }
    @Override public String encodeURL(    String url){
      return url + sessionId;
    }
  }
;
  HttpRequestResponseHolder holder=new HttpRequestResponseHolder(request,response);
  repo.loadContext(holder);
  String url="/aUrl";
  assertThat(holder.getResponse().encodeRedirectUrl(url)).isEqualTo(url + sessionId);
  assertThat(holder.getResponse().encodeRedirectURL(url)).isEqualTo(url + sessionId);
  assertThat(holder.getResponse().encodeUrl(url)).isEqualTo(url + sessionId);
  assertThat(holder.getResponse().encodeURL(url)).isEqualTo(url + sessionId);
  repo.setDisableUrlRewriting(true);
  holder=new HttpRequestResponseHolder(request,response);
  repo.loadContext(holder);
  assertThat(holder.getResponse().encodeRedirectUrl(url)).isEqualTo(url);
  assertThat(holder.getResponse().encodeRedirectURL(url)).isEqualTo(url);
  assertThat(holder.getResponse().encodeUrl(url)).isEqualTo(url);
  assertThat(holder.getResponse().encodeURL(url)).isEqualTo(url);
}
