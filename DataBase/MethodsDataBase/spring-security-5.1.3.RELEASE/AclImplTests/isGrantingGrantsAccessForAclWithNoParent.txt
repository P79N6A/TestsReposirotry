@Test public void isGrantingGrantsAccessForAclWithNoParent() throws Exception {
  Authentication auth=new TestingAuthenticationToken("ben","ignored","ROLE_GENERAL","ROLE_GUEST");
  auth.setAuthenticated(true);
  SecurityContextHolder.getContext().setAuthentication(auth);
  ObjectIdentity rootOid=new ObjectIdentityImpl(TARGET_CLASS,100);
  MutableAcl rootAcl=new AclImpl(rootOid,1,authzStrategy,pgs,null,null,false,new PrincipalSid("joe"));
  rootAcl.insertAce(0,BasePermission.READ,new PrincipalSid("ben"),false);
  rootAcl.insertAce(1,BasePermission.WRITE,new PrincipalSid("scott"),true);
  rootAcl.insertAce(2,BasePermission.WRITE,new PrincipalSid("rod"),false);
  rootAcl.insertAce(3,BasePermission.WRITE,new GrantedAuthoritySid("WRITE_ACCESS_ROLE"),true);
  List<Permission> permissions=Arrays.asList(BasePermission.READ,BasePermission.CREATE);
  List<Sid> sids=Arrays.asList(new PrincipalSid("ben"),new GrantedAuthoritySid("ROLE_GUEST"));
  assertThat(rootAcl.isGranted(permissions,sids,false)).isFalse();
  try {
    rootAcl.isGranted(permissions,SCOTT,false);
    fail("It should have thrown NotFoundException");
  }
 catch (  NotFoundException expected) {
  }
  assertThat(rootAcl.isGranted(WRITE,SCOTT,false)).isTrue();
  assertThat(rootAcl.isGranted(WRITE,Arrays.asList(new PrincipalSid("rod"),new GrantedAuthoritySid("WRITE_ACCESS_ROLE")),false)).isFalse();
  assertThat(rootAcl.isGranted(WRITE,Arrays.asList(new GrantedAuthoritySid("WRITE_ACCESS_ROLE"),new PrincipalSid("rod")),false)).isTrue();
  try {
    rootAcl.isGranted(WRITE,Arrays.asList(new GrantedAuthoritySid("rod"),new PrincipalSid("WRITE_ACCESS_ROLE")),false);
    fail("It should have thrown NotFoundException");
  }
 catch (  NotFoundException expected) {
  }
}
