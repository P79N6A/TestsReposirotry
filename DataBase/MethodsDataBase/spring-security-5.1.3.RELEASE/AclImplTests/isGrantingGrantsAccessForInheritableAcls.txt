@Test public void isGrantingGrantsAccessForInheritableAcls() throws Exception {
  Authentication auth=new TestingAuthenticationToken("ben","ignored","ROLE_GENERAL");
  auth.setAuthenticated(true);
  SecurityContextHolder.getContext().setAuthentication(auth);
  ObjectIdentity grandParentOid=new ObjectIdentityImpl(TARGET_CLASS,100);
  ObjectIdentity parentOid1=new ObjectIdentityImpl(TARGET_CLASS,101);
  ObjectIdentity parentOid2=new ObjectIdentityImpl(TARGET_CLASS,102);
  ObjectIdentity childOid1=new ObjectIdentityImpl(TARGET_CLASS,103);
  ObjectIdentity childOid2=new ObjectIdentityImpl(TARGET_CLASS,104);
  PrincipalSid joe=new PrincipalSid("joe");
  MutableAcl grandParentAcl=new AclImpl(grandParentOid,1,authzStrategy,pgs,null,null,false,joe);
  MutableAcl parentAcl1=new AclImpl(parentOid1,2,authzStrategy,pgs,null,null,true,joe);
  MutableAcl parentAcl2=new AclImpl(parentOid2,3,authzStrategy,pgs,null,null,true,joe);
  MutableAcl childAcl1=new AclImpl(childOid1,4,authzStrategy,pgs,null,null,true,joe);
  MutableAcl childAcl2=new AclImpl(childOid2,4,authzStrategy,pgs,null,null,false,joe);
  childAcl2.setParent(childAcl1);
  childAcl1.setParent(parentAcl1);
  parentAcl2.setParent(grandParentAcl);
  parentAcl1.setParent(grandParentAcl);
  grandParentAcl.insertAce(0,BasePermission.READ,new GrantedAuthoritySid("ROLE_USER_READ"),true);
  grandParentAcl.insertAce(1,BasePermission.WRITE,new PrincipalSid("ben"),true);
  grandParentAcl.insertAce(2,BasePermission.DELETE,new PrincipalSid("ben"),false);
  grandParentAcl.insertAce(3,BasePermission.DELETE,new PrincipalSid("scott"),true);
  parentAcl1.insertAce(0,BasePermission.READ,new PrincipalSid("scott"),true);
  parentAcl1.insertAce(1,BasePermission.DELETE,new PrincipalSid("scott"),false);
  parentAcl2.insertAce(0,BasePermission.CREATE,new PrincipalSid("ben"),true);
  childAcl1.insertAce(0,BasePermission.CREATE,new PrincipalSid("scott"),true);
  assertThat(parentAcl1.isGranted(READ,SCOTT,false)).isTrue();
  assertThat(parentAcl1.isGranted(READ,Arrays.asList((Sid)new GrantedAuthoritySid("ROLE_USER_READ")),false)).isTrue();
  assertThat(parentAcl1.isGranted(WRITE,BEN,false)).isTrue();
  assertThat(parentAcl1.isGranted(DELETE,BEN,false)).isFalse();
  assertThat(parentAcl1.isGranted(DELETE,SCOTT,false)).isFalse();
  assertThat(parentAcl2.isGranted(CREATE,BEN,false)).isTrue();
  assertThat(parentAcl2.isGranted(WRITE,BEN,false)).isTrue();
  assertThat(parentAcl2.isGranted(DELETE,BEN,false)).isFalse();
  assertThat(childAcl1.isGranted(CREATE,SCOTT,false)).isTrue();
  assertThat(childAcl1.isGranted(READ,Arrays.asList((Sid)new GrantedAuthoritySid("ROLE_USER_READ")),false)).isTrue();
  assertThat(childAcl1.isGranted(DELETE,BEN,false)).isFalse();
  try {
    assertThat(childAcl2.isGranted(CREATE,SCOTT,false)).isTrue();
    fail("It should have thrown NotFoundException");
  }
 catch (  NotFoundException expected) {
  }
  try {
    childAcl2.isGranted(CREATE,Arrays.asList((Sid)new PrincipalSid("joe")),false);
    fail("It should have thrown NotFoundException");
  }
 catch (  NotFoundException expected) {
  }
}
