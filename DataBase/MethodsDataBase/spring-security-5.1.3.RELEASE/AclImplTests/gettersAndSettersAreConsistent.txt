@Test public void gettersAndSettersAreConsistent() throws Exception {
  Authentication auth=new TestingAuthenticationToken("ben","ignored","ROLE_GENERAL");
  auth.setAuthenticated(true);
  SecurityContextHolder.getContext().setAuthentication(auth);
  ObjectIdentity identity=new ObjectIdentityImpl(TARGET_CLASS,(100));
  ObjectIdentity identity2=new ObjectIdentityImpl(TARGET_CLASS,(101));
  MutableAcl acl=new AclImpl(identity,1,authzStrategy,pgs,null,null,true,new PrincipalSid("joe"));
  MutableAcl parentAcl=new AclImpl(identity2,2,authzStrategy,pgs,null,null,true,new PrincipalSid("joe"));
  MockAclService service=new MockAclService();
  acl.insertAce(0,BasePermission.READ,new GrantedAuthoritySid("ROLE_USER_READ"),true);
  acl.insertAce(1,BasePermission.WRITE,new GrantedAuthoritySid("ROLE_USER_READ"),true);
  service.updateAcl(acl);
  assertThat(1).isEqualTo(acl.getId());
  assertThat(identity).isEqualTo(acl.getObjectIdentity());
  assertThat(new PrincipalSid("joe")).isEqualTo(acl.getOwner());
  assertThat(acl.getParentAcl()).isNull();
  assertThat(acl.isEntriesInheriting()).isTrue();
  assertThat(acl.getEntries()).hasSize(2);
  acl.setParent(parentAcl);
  assertThat(parentAcl).isEqualTo(acl.getParentAcl());
  acl.setEntriesInheriting(false);
  assertThat(acl.isEntriesInheriting()).isFalse();
  acl.setOwner(new PrincipalSid("ben"));
  assertThat(new PrincipalSid("ben")).isEqualTo(acl.getOwner());
}
