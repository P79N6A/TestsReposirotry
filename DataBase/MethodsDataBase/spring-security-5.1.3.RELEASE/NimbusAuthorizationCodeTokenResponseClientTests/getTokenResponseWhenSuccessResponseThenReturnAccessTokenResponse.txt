@Test public void getTokenResponseWhenSuccessResponseThenReturnAccessTokenResponse() throws Exception {
  MockWebServer server=new MockWebServer();
  String accessTokenSuccessResponse="{\n" + "	\"access_token\": \"access-token-1234\",\n" + "   \"token_type\": \"bearer\",\n"+ "   \"expires_in\": \"3600\",\n"+ "   \"scope\": \"openid profile\",\n"+ "	\"refresh_token\": \"refresh-token-1234\",\n"+ "   \"custom_parameter_1\": \"custom-value-1\",\n"+ "   \"custom_parameter_2\": \"custom-value-2\"\n"+ "}\n";
  server.enqueue(new MockResponse().setHeader(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON_VALUE).setBody(accessTokenSuccessResponse));
  server.start();
  String tokenUri=server.url("/oauth2/token").toString();
  when(this.providerDetails.getTokenUri()).thenReturn(tokenUri);
  Instant expiresAtBefore=Instant.now().plusSeconds(3600);
  OAuth2AccessTokenResponse accessTokenResponse=this.tokenResponseClient.getTokenResponse(new OAuth2AuthorizationCodeGrantRequest(this.clientRegistration,this.authorizationExchange));
  Instant expiresAtAfter=Instant.now().plusSeconds(3600);
  server.shutdown();
  assertThat(accessTokenResponse.getAccessToken().getTokenValue()).isEqualTo("access-token-1234");
  assertThat(accessTokenResponse.getAccessToken().getTokenType()).isEqualTo(OAuth2AccessToken.TokenType.BEARER);
  assertThat(accessTokenResponse.getAccessToken().getExpiresAt()).isBetween(expiresAtBefore,expiresAtAfter);
  assertThat(accessTokenResponse.getAccessToken().getScopes()).containsExactly("openid","profile");
  assertThat(accessTokenResponse.getRefreshToken().getTokenValue()).isEqualTo("refresh-token-1234");
  assertThat(accessTokenResponse.getAdditionalParameters().size()).isEqualTo(2);
  assertThat(accessTokenResponse.getAdditionalParameters()).containsEntry("custom_parameter_1","custom-value-1");
  assertThat(accessTokenResponse.getAdditionalParameters()).containsEntry("custom_parameter_2","custom-value-2");
}
