@Test public void authenticateWhenAuthorizationSuccessResponseThenExchangedForAccessToken(){
  OAuth2AccessToken accessToken=mock(OAuth2AccessToken.class);
  OAuth2RefreshToken refreshToken=mock(OAuth2RefreshToken.class);
  OAuth2AccessTokenResponse accessTokenResponse=mock(OAuth2AccessTokenResponse.class);
  when(accessTokenResponse.getAccessToken()).thenReturn(accessToken);
  when(accessTokenResponse.getRefreshToken()).thenReturn(refreshToken);
  when(this.accessTokenResponseClient.getTokenResponse(any())).thenReturn(accessTokenResponse);
  OAuth2AuthorizationCodeAuthenticationToken authenticationResult=(OAuth2AuthorizationCodeAuthenticationToken)this.authenticationProvider.authenticate(new OAuth2AuthorizationCodeAuthenticationToken(this.clientRegistration,this.authorizationExchange));
  assertThat(authenticationResult.isAuthenticated()).isTrue();
  assertThat(authenticationResult.getPrincipal()).isEqualTo(this.clientRegistration.getClientId());
  assertThat(authenticationResult.getCredentials()).isEqualTo(accessToken.getTokenValue());
  assertThat(authenticationResult.getAuthorities()).isEqualTo(Collections.emptyList());
  assertThat(authenticationResult.getClientRegistration()).isEqualTo(this.clientRegistration);
  assertThat(authenticationResult.getAuthorizationExchange()).isEqualTo(this.authorizationExchange);
  assertThat(authenticationResult.getAccessToken()).isEqualTo(accessToken);
  assertThat(authenticationResult.getRefreshToken()).isEqualTo(refreshToken);
}
