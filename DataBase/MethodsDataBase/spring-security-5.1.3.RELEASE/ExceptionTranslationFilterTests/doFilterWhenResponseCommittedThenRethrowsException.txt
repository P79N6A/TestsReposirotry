@Test public void doFilterWhenResponseCommittedThenRethrowsException() throws Exception {
  this.mockEntryPoint=mock(AuthenticationEntryPoint.class);
  FilterChain chain=(request,response) -> {
    HttpServletResponse httpResponse=(HttpServletResponse)response;
    httpResponse.sendError(HttpServletResponse.SC_BAD_REQUEST);
    throw new AccessDeniedException("Denied");
  }
;
  MockHttpServletRequest request=new MockHttpServletRequest();
  MockHttpServletResponse response=new MockHttpServletResponse();
  ExceptionTranslationFilter filter=new ExceptionTranslationFilter(mockEntryPoint);
  assertThatThrownBy(() -> filter.doFilter(request,response,chain)).isInstanceOf(ServletException.class).hasCauseInstanceOf(AccessDeniedException.class);
  verifyZeroInteractions(mockEntryPoint);
}
