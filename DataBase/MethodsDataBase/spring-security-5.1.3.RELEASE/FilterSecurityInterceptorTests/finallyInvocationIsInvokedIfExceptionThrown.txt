@Test @SuppressWarnings("unchecked") public void finallyInvocationIsInvokedIfExceptionThrown() throws Exception {
  SecurityContext ctx=SecurityContextHolder.getContext();
  Authentication token=new TestingAuthenticationToken("Test","Password","NOT_USED");
  token.setAuthenticated(true);
  ctx.setAuthentication(token);
  RunAsManager runAsManager=mock(RunAsManager.class);
  when(runAsManager.buildRunAs(eq(token),any(),anyCollection())).thenReturn(new RunAsUserToken("key","someone","creds",token.getAuthorities(),token.getClass()));
  interceptor.setRunAsManager(runAsManager);
  FilterInvocation fi=createinvocation();
  FilterChain chain=fi.getChain();
  doThrow(new RuntimeException()).when(chain).doFilter(any(HttpServletRequest.class),any(HttpServletResponse.class));
  when(ods.getAttributes(fi)).thenReturn(SecurityConfig.createList("MOCK_OK"));
  AfterInvocationManager aim=mock(AfterInvocationManager.class);
  interceptor.setAfterInvocationManager(aim);
  try {
    interceptor.invoke(fi);
    fail("Expected exception");
  }
 catch (  RuntimeException expected) {
  }
  assertThat(SecurityContextHolder.getContext()).isSameAs(ctx);
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isSameAs(token);
}
