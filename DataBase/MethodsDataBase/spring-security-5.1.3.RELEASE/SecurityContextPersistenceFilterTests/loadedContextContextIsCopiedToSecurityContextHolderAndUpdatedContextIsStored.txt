@Test public void loadedContextContextIsCopiedToSecurityContextHolderAndUpdatedContextIsStored() throws Exception {
  final MockHttpServletRequest request=new MockHttpServletRequest();
  final MockHttpServletResponse response=new MockHttpServletResponse();
  final TestingAuthenticationToken beforeAuth=new TestingAuthenticationToken("someoneelse","passwd","ROLE_B");
  final SecurityContext scBefore=new SecurityContextImpl();
  final SecurityContext scExpectedAfter=new SecurityContextImpl();
  scExpectedAfter.setAuthentication(testToken);
  scBefore.setAuthentication(beforeAuth);
  final SecurityContextRepository repo=mock(SecurityContextRepository.class);
  SecurityContextPersistenceFilter filter=new SecurityContextPersistenceFilter(repo);
  when(repo.loadContext(any(HttpRequestResponseHolder.class))).thenReturn(scBefore);
  final FilterChain chain=new FilterChain(){
    public void doFilter(    ServletRequest request,    ServletResponse response) throws IOException, ServletException {
      assertThat(SecurityContextHolder.getContext().getAuthentication()).isEqualTo(beforeAuth);
      SecurityContextHolder.setContext(scExpectedAfter);
    }
  }
;
  filter.doFilter(request,response,chain);
  verify(repo).saveContext(scExpectedAfter,request,response);
}
