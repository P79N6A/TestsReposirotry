@Test public void switchToLockedAccountCausesRedirectToSwitchFailureUrl() throws Exception {
  MockHttpServletRequest request=new MockHttpServletRequest();
  request.setRequestURI("/login/impersonate");
  request.addParameter(SwitchUserFilter.SPRING_SECURITY_SWITCH_USERNAME_KEY,"mcgarrett");
  MockHttpServletResponse response=new MockHttpServletResponse();
  SwitchUserFilter filter=new SwitchUserFilter();
  filter.setTargetUrl("/target");
  filter.setUserDetailsService(new MockUserDetailsService());
  filter.afterPropertiesSet();
  FilterChain chain=mock(FilterChain.class);
  filter.doFilter(request,response,chain);
  verify(chain,never()).doFilter(request,response);
  assertThat(response.getErrorMessage()).isNotNull();
  request.setContextPath("/mywebapp");
  request.setRequestURI("/mywebapp/login/impersonate");
  filter=new SwitchUserFilter();
  filter.setTargetUrl("/target");
  filter.setUserDetailsService(new MockUserDetailsService());
  filter.setSwitchFailureUrl("/switchfailed");
  filter.afterPropertiesSet();
  response=new MockHttpServletResponse();
  chain=mock(FilterChain.class);
  filter.doFilter(request,response,chain);
  verify(chain,never()).doFilter(request,response);
  assertThat(response.getRedirectedUrl()).isEqualTo("/mywebapp/switchfailed");
  assertThat(FieldUtils.getFieldValue(filter,"switchFailureUrl")).isEqualTo("/switchfailed");
}
