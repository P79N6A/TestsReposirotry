@Test public void exitUserJackLordToDanoSucceeds() throws Exception {
  UsernamePasswordAuthenticationToken source=new UsernamePasswordAuthenticationToken("dano","hawaii50",ROLES_12);
  List<GrantedAuthority> adminAuths=new ArrayList<>();
  adminAuths.addAll(ROLES_12);
  adminAuths.add(new SwitchUserGrantedAuthority("PREVIOUS_ADMINISTRATOR",source));
  UsernamePasswordAuthenticationToken admin=new UsernamePasswordAuthenticationToken("jacklord","hawaii50",adminAuths);
  SecurityContextHolder.getContext().setAuthentication(admin);
  MockHttpServletRequest request=createMockSwitchRequest();
  request.setRequestURI("/logout/impersonate");
  SwitchUserFilter filter=new SwitchUserFilter();
  filter.setUserDetailsService(new MockUserDetailsService());
  filter.setExitUserUrl("/logout/impersonate");
  filter.setSuccessHandler(new SimpleUrlAuthenticationSuccessHandler("/webapp/someOtherUrl"));
  FilterChain chain=mock(FilterChain.class);
  MockHttpServletResponse response=new MockHttpServletResponse();
  filter.doFilter(request,response,chain);
  verify(chain,never()).doFilter(request,response);
  Authentication targetAuth=SecurityContextHolder.getContext().getAuthentication();
  assertThat(targetAuth).isNotNull();
  assertThat(targetAuth.getPrincipal()).isEqualTo("dano");
}
