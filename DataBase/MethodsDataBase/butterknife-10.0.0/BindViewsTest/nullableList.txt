@Test public void nullableList(){
  JavaFileObject source=JavaFileObjects.forSourceString("test.Test","" + "package test;\n" + "import android.view.View;\n"+ "import butterknife.BindViews;\n"+ "import java.util.List;\n"+ "public class Test {\n"+ "    @interface Nullable {}\n"+ "    @Nullable @BindViews({1, 2, 3}) List<View> thing;\n"+ "}");
  JavaFileObject bindingSource=JavaFileObjects.forSourceString("test/Test_ViewBinding","" + "package test;\n" + "import android.view.View;\n"+ "import androidx.annotation.CallSuper;\n"+ "import androidx.annotation.UiThread;\n"+ "import butterknife.Unbinder;\n"+ "import butterknife.internal.Utils;\n"+ "import java.lang.IllegalStateException;\n"+ "import java.lang.Override;\n"+ "public class Test_ViewBinding implements Unbinder {\n"+ "  private Test target;\n"+ "  @UiThread\n"+ "  public Test_ViewBinding(Test target, View source) {\n"+ "    this.target = target;\n"+ "    target.thing = Utils.listFilteringNull(\n"+ "        source.findViewById(1), \n"+ "        source.findViewById(2), \n"+ "        source.findViewById(3));\n"+ "  }\n"+ "  @Override\n"+ "  @CallSuper\n"+ "  public void unbind() {\n"+ "    Test target = this.target;\n"+ "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"+ "    this.target = null;\n"+ "    target.thing = null;\n"+ "  }\n"+ "}");
  assertAbout(javaSource()).that(source).withCompilerOptions("-Xlint:-processing").processedWith(new ButterKnifeProcessor()).compilesWithoutWarnings().and().generatesSources(bindingSource);
}
