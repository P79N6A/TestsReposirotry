@Test public void unbindingThroughAbstractChild(){
  JavaFileObject source1=JavaFileObjects.forSourceString("test.Test","" + "package test;\n" + "import butterknife.OnClick;\n"+ "public class Test {\n"+ "  @OnClick(1) void doStuff1() { }\n"+ "}");
  JavaFileObject source2=JavaFileObjects.forSourceString("test.TestOne","" + "package test;\n" + "public abstract class TestOne extends Test {\n"+ "}");
  JavaFileObject source3=JavaFileObjects.forSourceString("test.TestTwo","" + "package test;\n" + "import butterknife.OnClick;\n"+ "class TestTwo extends TestOne {\n"+ "  @OnClick(1) void doStuff2() { }\n"+ "}");
  JavaFileObject binding1Source=JavaFileObjects.forSourceString("test/Test_ViewBinding","" + "package test;\n" + "import android.view.View;\n"+ "import androidx.annotation.CallSuper;\n"+ "import androidx.annotation.UiThread;\n"+ "import butterknife.Unbinder;\n"+ "import butterknife.internal.DebouncingOnClickListener;\n"+ "import butterknife.internal.Utils;\n"+ "import java.lang.IllegalStateException;\n"+ "import java.lang.Override;\n"+ "public class Test_ViewBinding implements Unbinder {\n"+ "  private Test target;\n"+ "  private View view1;\n"+ "  @UiThread\n"+ "  public Test_ViewBinding(final Test target, View source) {\n"+ "    this.target = target;\n"+ "    View view;\n"+ "    view = Utils.findRequiredView(source, 1, \"method 'doStuff1'\");\n"+ "    view1 = view;\n"+ "    view.setOnClickListener(new DebouncingOnClickListener() {\n"+ "      @Override\n"+ "      public void doClick(View p0) {\n"+ "        target.doStuff1();\n"+ "      }\n"+ "    });\n"+ "  }\n"+ "  @Override\n"+ "  @CallSuper\n"+ "  public void unbind() {\n"+ "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"+ "    target = null;\n"+ "    view1.setOnClickListener(null);\n"+ "    view1 = null;\n"+ "  }\n"+ "}");
  JavaFileObject binding2Source=JavaFileObjects.forSourceString("test/TestTwo_ViewBinding","" + "package test;\n" + "import android.view.View;\n"+ "import androidx.annotation.UiThread;\n"+ "import butterknife.internal.DebouncingOnClickListener;\n"+ "import butterknife.internal.Utils;\n"+ "import java.lang.IllegalStateException;\n"+ "import java.lang.Override;\n"+ "public class TestTwo_ViewBinding extends Test_ViewBinding {\n"+ "  private TestTwo target;\n"+ "  private View view1;\n"+ "  @UiThread\n"+ "  public TestTwo_ViewBinding(final TestTwo target, View source) {\n"+ "    super(target, source);\n"+ "    this.target = target;\n"+ "    View view;\n"+ "    view = Utils.findRequiredView(source, 1, \"method 'doStuff2'\");\n"+ "    view1 = view;\n"+ "    view.setOnClickListener(new DebouncingOnClickListener() {\n"+ "      @Override\n"+ "      public void doClick(View p0) {\n"+ "        target.doStuff2();\n"+ "      }\n"+ "    });\n"+ "  }\n"+ "  @Override\n"+ "  public void unbind() {\n"+ "    if (target == null) throw new IllegalStateException(\"Bindings already cleared.\");\n"+ "    target = null;\n"+ "    view1.setOnClickListener(null);\n"+ "    view1 = null;\n"+ "    super.unbind();\n"+ "  }\n"+ "}");
  assertAbout(javaSources()).that(asList(source1,source2,source3)).withCompilerOptions("-Xlint:-processing").processedWith(new ButterKnifeProcessor()).compilesWithoutWarnings().and().generatesSources(binding1Source,binding2Source);
}
