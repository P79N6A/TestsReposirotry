@Test public void testRoundRobinLoadBalanceWithWeightShouldRecycle(){
{
    Field recycleTimeField=null;
    try {
      recycleTimeField=RoundRobinLoadBalance.class.getDeclaredField("RECYCLE_PERIOD");
      recycleTimeField.setAccessible(true);
      recycleTimeField.setInt(RoundRobinLoadBalance.class,10);
    }
 catch (    NoSuchFieldException e) {
      Assert.assertTrue("getField failed",true);
    }
catch (    SecurityException e) {
      Assert.assertTrue("getField failed",true);
    }
catch (    IllegalArgumentException e) {
      Assert.assertTrue("getField failed",true);
    }
catch (    IllegalAccessException e) {
      Assert.assertTrue("getField failed",true);
    }
  }
  int runs=10000;
  weightInvokers.add(weightInvokerTmp);
  try {
    Map<Invoker,InvokeResult> resultMap=getWeightedInvokeResult(runs,RoundRobinLoadBalance.NAME);
    assertStrictWRRResult(runs,resultMap);
    RoundRobinLoadBalance lb=(RoundRobinLoadBalance)getLoadBalance(RoundRobinLoadBalance.NAME);
    Assert.assertEquals(weightInvokers.size(),lb.getInvokerAddrList(weightInvokers,weightTestInvocation).size());
    weightInvokers.remove(weightInvokerTmp);
    resultMap=getWeightedInvokeResult(runs,RoundRobinLoadBalance.NAME);
    assertStrictWRRResult(runs,resultMap);
    Assert.assertEquals(weightInvokers.size(),lb.getInvokerAddrList(weightInvokers,weightTestInvocation).size());
  }
  finally {
    weightInvokers.remove(weightInvokerTmp);
  }
}
