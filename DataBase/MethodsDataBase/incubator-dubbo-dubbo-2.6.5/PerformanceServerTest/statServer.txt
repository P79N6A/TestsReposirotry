private static ExchangeServer statServer() throws Exception {
  final int port=PerformanceUtils.getIntProperty("port",9911);
  final String transporter=PerformanceUtils.getProperty(Constants.TRANSPORTER_KEY,Constants.DEFAULT_TRANSPORTER);
  final String serialization=PerformanceUtils.getProperty(Constants.SERIALIZATION_KEY,Constants.DEFAULT_REMOTING_SERIALIZATION);
  final String threadpool=PerformanceUtils.getProperty(Constants.THREADPOOL_KEY,Constants.DEFAULT_THREADPOOL);
  final int threads=PerformanceUtils.getIntProperty(Constants.THREADS_KEY,Constants.DEFAULT_THREADS);
  final int iothreads=PerformanceUtils.getIntProperty(Constants.IO_THREADS_KEY,Constants.DEFAULT_IO_THREADS);
  final int buffer=PerformanceUtils.getIntProperty(Constants.BUFFER_KEY,Constants.DEFAULT_BUFFER_SIZE);
  final String channelHandler=PerformanceUtils.getProperty(Constants.DISPATCHER_KEY,ExecutionDispatcher.NAME);
  ExchangeServer server=Exchangers.bind("exchange://0.0.0.0:" + port + "?transporter="+ transporter+ "&serialization="+ serialization+ "&threadpool="+ threadpool+ "&threads="+ threads+ "&iothreads="+ iothreads+ "&buffer="+ buffer+ "&channel.handler="+ channelHandler,new ExchangeHandlerAdapter(){
    public String telnet(    Channel channel,    String message) throws RemotingException {
      return "echo: " + message + "\r\ntelnet> ";
    }
    public Object reply(    ExchangeChannel channel,    Object request) throws RemotingException {
      if ("environment".equals(request)) {
        return PerformanceUtils.getEnvironment();
      }
      if ("scene".equals(request)) {
        List<String> scene=new ArrayList<String>();
        scene.add("Transporter: " + transporter);
        scene.add("Service Threads: " + threads);
        return scene;
      }
      return request;
    }
  }
);
  return server;
}
