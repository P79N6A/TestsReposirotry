private static ExchangeServer statTelnetServer(int port) throws Exception {
  ExchangeServer telnetserver=Exchangers.bind("exchange://0.0.0.0:" + port,new ExchangeHandlerAdapter(){
    public String telnet(    Channel channel,    String message) throws RemotingException {
      if (message.equals("help")) {
        return "support cmd: \r\n\tstart \r\n\tstop \r\n\tshutdown \r\n\trestart times [alive] [sleep] \r\ntelnet>";
      }
 else       if (message.equals("stop")) {
        logger.info("server closed:" + server);
        server.close();
        return "stop server\r\ntelnet>";
      }
 else       if (message.startsWith("start")) {
        try {
          restartServer(0,0,0);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        return "start server\r\ntelnet>";
      }
 else       if (message.startsWith("shutdown")) {
        System.exit(0);
        return "start server\r\ntelnet>";
      }
 else       if (message.startsWith("channels")) {
        return "server.getExchangeChannels():" + server.getExchangeChannels().size() + "\r\ntelnet>";
      }
 else       if (message.startsWith("restart ")) {
        String[] args=message.split(" ");
        int times=Integer.parseInt(args[1]);
        int alive=args.length > 2 ? Integer.parseInt(args[2]) : 0;
        int sleep=args.length > 3 ? Integer.parseInt(args[3]) : 100;
        try {
          restartServer(times,alive,sleep);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
        return "restart server,times:" + times + " stop alive time: "+ alive+ ",sleep time: "+ sleep+ " usage:r times [alive] [sleep] \r\ntelnet>";
      }
 else {
        return "echo: " + message + "\r\ntelnet> ";
      }
    }
  }
);
  return telnetserver;
}
