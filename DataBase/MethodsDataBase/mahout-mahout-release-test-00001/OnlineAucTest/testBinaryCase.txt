@Test public void testBinaryCase(){
  Random gen=RandomUtils.getRandom();
  OnlineSummarizer[] stats=new OnlineSummarizer[4];
  for (int i=0; i < 4; i++) {
    stats[i]=new OnlineSummarizer();
  }
  for (int i=0; i < 100; i++) {
    OnlineAuc a1=new GlobalOnlineAuc();
    a1.setPolicy(GlobalOnlineAuc.ReplacementPolicy.FAIR);
    OnlineAuc a2=new GlobalOnlineAuc();
    a2.setPolicy(GlobalOnlineAuc.ReplacementPolicy.FIFO);
    OnlineAuc a3=new GlobalOnlineAuc();
    a3.setPolicy(GlobalOnlineAuc.ReplacementPolicy.RANDOM);
    Auc a4=new Auc();
    for (int j=0; j < 10000; j++) {
      double x=gen.nextGaussian();
      a1.addSample(0,x);
      a2.addSample(0,x);
      a3.addSample(0,x);
      a4.add(0,x);
      x=gen.nextGaussian() + 1;
      a1.addSample(1,x);
      a2.addSample(1,x);
      a3.addSample(1,x);
      a4.add(1,x);
    }
    stats[0].add(a1.auc());
    stats[1].add(a2.auc());
    stats[2].add(a3.auc());
    stats[3].add(a4.auc());
  }
  int i=0;
  for (  GlobalOnlineAuc.ReplacementPolicy policy : new GlobalOnlineAuc.ReplacementPolicy[]{GlobalOnlineAuc.ReplacementPolicy.FAIR,GlobalOnlineAuc.ReplacementPolicy.FIFO,GlobalOnlineAuc.ReplacementPolicy.RANDOM,null}) {
    OnlineSummarizer summary=stats[i++];
    System.out.printf("%s,%.4f (min = %.4f, 25%%-ile=%.4f, 75%%-ile=%.4f, max=%.4f)\n",policy,summary.getMean(),summary.getQuartile(0),summary.getQuartile(1),summary.getQuartile(2),summary.getQuartile(3));
  }
  assertEquals(0.7603,stats[0].getMean(),0.03);
  assertEquals(0.7603,stats[0].getQuartile(1),0.03);
  assertEquals(0.7603,stats[0].getQuartile(3),0.03);
  assertEquals(0.7603,stats[1].getMean(),0.001);
  assertEquals(0.7603,stats[1].getQuartile(1),0.006);
  assertEquals(0.7603,stats[1].getQuartile(3),0.006);
  assertEquals(0.7603,stats[2].getMean(),0.001);
  assertEquals(0.7603,stats[2].getQuartile(1),0.006);
  assertEquals(0.7603,stats[2].getQuartile(1),0.006);
}
