@Test public void testNormalize(){
  Vector vec1=new RandomAccessSparseVector(3);
  vec1.setQuick(0,1);
  vec1.setQuick(1,2);
  vec1.setQuick(2,3);
  Vector norm=vec1.normalize();
  assertNotNull("norm1 is null and it shouldn't be",norm);
  Vector vec2=new SequentialAccessSparseVector(3);
  vec2.setQuick(0,1);
  vec2.setQuick(1,2);
  vec2.setQuick(2,3);
  Vector norm2=vec2.normalize();
  assertNotNull("norm1 is null and it shouldn't be",norm2);
  Vector expected=new RandomAccessSparseVector(3);
  expected.setQuick(0,0.2672612419124244);
  expected.setQuick(1,0.5345224838248488);
  expected.setQuick(2,0.8017837257372732);
  assertEquals(expected,norm);
  norm=vec1.normalize(2);
  assertEquals(expected,norm);
  norm2=vec2.normalize(2);
  assertEquals(expected,norm2);
  norm=vec1.normalize(1);
  norm2=vec2.normalize(1);
  expected.setQuick(0,1.0 / 6);
  expected.setQuick(1,2.0 / 6);
  expected.setQuick(2,3.0 / 6);
  assertEquals(expected,norm);
  assertEquals(expected,norm2);
  norm=vec1.normalize(3);
  double cube=Math.pow(36,1.0 / 3);
  expected=vec1.divide(cube);
  assertEquals(norm,expected);
  norm=vec1.normalize(Double.POSITIVE_INFINITY);
  norm2=vec2.normalize(Double.POSITIVE_INFINITY);
  expected.setQuick(0,1.0 / 3);
  expected.setQuick(1,2.0 / 3);
  expected.setQuick(2,3.0 / 3);
  assertEquals(norm,expected);
  assertEquals(norm2,expected);
  norm=vec1.normalize(0);
  expected.setQuick(0,1.0 / 3);
  expected.setQuick(1,2.0 / 3);
  expected.setQuick(2,3.0 / 3);
  assertEquals(norm,expected);
  try {
    vec1.normalize(-1);
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    vec2.normalize(-1);
    fail();
  }
 catch (  IllegalArgumentException e) {
  }
}
