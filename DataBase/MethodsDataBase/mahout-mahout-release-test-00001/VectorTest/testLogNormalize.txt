@Test public void testLogNormalize(){
  Vector vec1=new RandomAccessSparseVector(3);
  vec1.setQuick(0,1);
  vec1.setQuick(1,2);
  vec1.setQuick(2,3);
  Vector norm=vec1.logNormalize();
  assertNotNull("norm1 is null and it shouldn't be",norm);
  Vector vec2=new SequentialAccessSparseVector(3);
  vec2.setQuick(0,1);
  vec2.setQuick(1,2);
  vec2.setQuick(2,3);
  Vector norm2=vec2.logNormalize();
  assertNotNull("norm1 is null and it shouldn't be",norm2);
  Vector expected=new DenseVector(new double[]{0.2672612419124244,0.4235990463273581,0.5345224838248488});
  assertVectorEquals(expected,norm,1.0e-15);
  assertVectorEquals(expected,norm2,1.0e-15);
  norm=vec1.logNormalize(2);
  assertVectorEquals(expected,norm,1.0e-15);
  norm2=vec2.logNormalize(2);
  assertVectorEquals(expected,norm2,1.0e-15);
  try {
    vec1.logNormalize(1);
    fail("Should fail with power == 1");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    vec1.logNormalize(-1);
    fail("Should fail with negative power");
  }
 catch (  IllegalArgumentException e) {
  }
  try {
    vec2.logNormalize(Double.POSITIVE_INFINITY);
    fail("Should fail with positive infinity norm");
  }
 catch (  IllegalArgumentException e) {
  }
}
