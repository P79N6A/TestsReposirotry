@Test public void testHashCodeEquivalence(){
  Vector sparseLeft=new RandomAccessSparseVector(3);
  Vector denseRight=new DenseVector(3);
  sparseLeft.setQuick(0,1);
  sparseLeft.setQuick(1,2);
  sparseLeft.setQuick(2,3);
  denseRight.setQuick(0,1);
  denseRight.setQuick(1,2);
  denseRight.setQuick(2,3);
  assertEquals(sparseLeft,denseRight);
  assertEquals(sparseLeft.hashCode(),denseRight.hashCode());
  sparseLeft=new SequentialAccessSparseVector(3);
  sparseLeft.setQuick(0,1);
  sparseLeft.setQuick(1,2);
  sparseLeft.setQuick(2,3);
  assertEquals(sparseLeft,denseRight);
  assertEquals(sparseLeft.hashCode(),denseRight.hashCode());
  Vector denseLeft=new DenseVector(3);
  denseLeft.setQuick(0,1);
  denseLeft.setQuick(1,2);
  denseLeft.setQuick(2,3);
  assertEquals(denseLeft,denseRight);
  assertEquals(denseLeft.hashCode(),denseRight.hashCode());
  Vector sparseRight=new SequentialAccessSparseVector(3);
  sparseRight.setQuick(0,1);
  sparseRight.setQuick(1,2);
  sparseRight.setQuick(2,3);
  assertEquals(sparseLeft,sparseRight);
  assertEquals(sparseLeft.hashCode(),sparseRight.hashCode());
  DenseVector emptyLeft=new DenseVector(0);
  Vector emptyRight=new SequentialAccessSparseVector(0);
  assertEquals(emptyLeft,emptyRight);
  assertEquals(emptyLeft.hashCode(),emptyRight.hashCode());
  emptyRight=new RandomAccessSparseVector(0);
  assertEquals(emptyLeft,emptyRight);
  assertEquals(emptyLeft.hashCode(),emptyRight.hashCode());
}
