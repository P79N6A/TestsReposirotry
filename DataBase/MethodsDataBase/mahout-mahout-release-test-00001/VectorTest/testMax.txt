@Test public void testMax(){
  Vector vec1=new RandomAccessSparseVector(3);
  vec1.setQuick(0,-1);
  vec1.setQuick(1,-3);
  vec1.setQuick(2,-2);
  double max=vec1.maxValue();
  assertEquals(-1.0,max,0.0);
  int idx=vec1.maxValueIndex();
  assertEquals(0,idx);
  vec1=new RandomAccessSparseVector(3);
  vec1.setQuick(0,-1);
  vec1.setQuick(2,-2);
  max=vec1.maxValue();
  assertEquals(0.0,max,0.0);
  idx=vec1.maxValueIndex();
  assertEquals(1,idx);
  vec1=new SequentialAccessSparseVector(3);
  vec1.setQuick(0,-1);
  vec1.setQuick(2,-2);
  max=vec1.maxValue();
  assertEquals(0.0,max,0.0);
  idx=vec1.maxValueIndex();
  assertEquals(1,idx);
  vec1=new DenseVector(3);
  vec1.setQuick(0,-1);
  vec1.setQuick(2,-2);
  max=vec1.maxValue();
  assertEquals(0.0,max,0.0);
  idx=vec1.maxValueIndex();
  assertEquals(1,idx);
  vec1=new RandomAccessSparseVector(3);
  max=vec1.maxValue();
  assertEquals(0.0,max,EPSILON);
  vec1=new DenseVector(3);
  max=vec1.maxValue();
  assertEquals(0.0,max,EPSILON);
  vec1=new SequentialAccessSparseVector(3);
  max=vec1.maxValue();
  assertEquals(0.0,max,EPSILON);
  vec1=new RandomAccessSparseVector(0);
  max=vec1.maxValue();
  assertEquals(Double.NEGATIVE_INFINITY,max,EPSILON);
  vec1=new DenseVector(0);
  max=vec1.maxValue();
  assertEquals(Double.NEGATIVE_INFINITY,max,EPSILON);
  vec1=new SequentialAccessSparseVector(0);
  max=vec1.maxValue();
  assertEquals(Double.NEGATIVE_INFINITY,max,EPSILON);
}
