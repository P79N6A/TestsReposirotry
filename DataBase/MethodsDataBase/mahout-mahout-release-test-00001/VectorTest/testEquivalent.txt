@Test public void testEquivalent(){
  RandomAccessSparseVector randomAccessLeft=new RandomAccessSparseVector(3);
  Vector sequentialAccessLeft=new SequentialAccessSparseVector(3);
  Vector right=new DenseVector(3);
  randomAccessLeft.setQuick(0,1);
  randomAccessLeft.setQuick(1,2);
  randomAccessLeft.setQuick(2,3);
  sequentialAccessLeft.setQuick(0,1);
  sequentialAccessLeft.setQuick(1,2);
  sequentialAccessLeft.setQuick(2,3);
  right.setQuick(0,1);
  right.setQuick(1,2);
  right.setQuick(2,3);
  assertEquals(randomAccessLeft,right);
  assertEquals(sequentialAccessLeft,right);
  assertEquals(sequentialAccessLeft,randomAccessLeft);
  Vector leftBar=new DenseVector(3);
  leftBar.setQuick(0,1);
  leftBar.setQuick(1,2);
  leftBar.setQuick(2,3);
  assertEquals(leftBar,right);
  assertEquals(randomAccessLeft,right);
  assertEquals(sequentialAccessLeft,right);
  Vector rightBar=new RandomAccessSparseVector(3);
  rightBar.setQuick(0,1);
  rightBar.setQuick(1,2);
  rightBar.setQuick(2,3);
  assertEquals(randomAccessLeft,rightBar);
  right.setQuick(2,4);
  assertFalse(randomAccessLeft.equals(right));
  right=new DenseVector(4);
  right.setQuick(0,1);
  right.setQuick(1,2);
  right.setQuick(2,3);
  right.setQuick(3,3);
  assertFalse(randomAccessLeft.equals(right));
  randomAccessLeft=new RandomAccessSparseVector(2);
  randomAccessLeft.setQuick(0,1);
  randomAccessLeft.setQuick(1,2);
  assertFalse(randomAccessLeft.equals(right));
  Vector dense=new DenseVector(3);
  right=new DenseVector(3);
  right.setQuick(0,1);
  right.setQuick(1,2);
  right.setQuick(2,3);
  dense.setQuick(0,1);
  dense.setQuick(1,2);
  dense.setQuick(2,3);
  assertEquals(dense,right);
  RandomAccessSparseVector sparse=new RandomAccessSparseVector(3);
  randomAccessLeft=new RandomAccessSparseVector(3);
  sparse.setQuick(0,1);
  sparse.setQuick(1,2);
  sparse.setQuick(2,3);
  randomAccessLeft.setQuick(0,1);
  randomAccessLeft.setQuick(1,2);
  randomAccessLeft.setQuick(2,3);
  assertEquals(randomAccessLeft,sparse);
  Vector v1=new VectorView(randomAccessLeft,0,2);
  Vector v2=new VectorView(right,0,2);
  assertEquals(v1,v2);
  sparse=new RandomAccessSparseVector(2);
  sparse.setQuick(0,1);
  sparse.setQuick(1,2);
  assertEquals(v1,sparse);
}
