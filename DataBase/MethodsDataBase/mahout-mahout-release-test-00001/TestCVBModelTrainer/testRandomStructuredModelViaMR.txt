@Test public void testRandomStructuredModelViaMR() throws Exception {
  int numGeneratingTopics=3;
  int numTerms=9;
  Matrix matrix=ClusteringTestUtils.randomStructuredModel(numGeneratingTopics,numTerms,new DoubleFunction(){
    @Override public double apply(    double d){
      return 1.0 / Math.pow(d + 1.0,3);
    }
  }
);
  int numDocs=500;
  int numSamples=10;
  int numTopicsPerDoc=1;
  Matrix sampledCorpus=ClusteringTestUtils.sampledCorpus(matrix,RandomUtils.getRandom(1234),numDocs,numSamples,numTopicsPerDoc);
  Path sampleCorpusPath=getTestTempDirPath("corpus");
  Configuration configuration=getConfiguration();
  MatrixUtils.write(sampleCorpusPath,configuration,sampledCorpus);
  int numIterations=5;
  List<Double> perplexities=Lists.newArrayList();
  int startTopic=numGeneratingTopics - 1;
  int numTestTopics=startTopic;
  while (numTestTopics < numGeneratingTopics + 2) {
    Path topicModelStateTempPath=getTestTempDirPath("topicTemp" + numTestTopics);
    Configuration conf=getConfiguration();
    CVB0Driver cvb0Driver=new CVB0Driver();
    cvb0Driver.run(conf,sampleCorpusPath,null,numTestTopics,numTerms,ALPHA,ETA,numIterations,1,0,null,null,topicModelStateTempPath,1234,0.2f,2,1,3,1,false);
    perplexities.add(lowestPerplexity(conf,topicModelStateTempPath));
    numTestTopics++;
  }
  int bestTopic=-1;
  double lowestPerplexity=Double.MAX_VALUE;
  for (int t=0; t < perplexities.size(); t++) {
    if (perplexities.get(t) < lowestPerplexity) {
      lowestPerplexity=perplexities.get(t);
      bestTopic=t + startTopic;
    }
  }
  assertEquals("The optimal number of topics is not that of the generating distribution",4,bestTopic);
  System.out.println("Perplexities: " + Joiner.on(", ").join(perplexities));
}
