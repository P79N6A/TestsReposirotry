@Test public void testOptions() throws Exception {
  final Map<String,List<String>> testMap=Maps.newHashMap();
  AbstractJobFactory fact=new AbstractJobFactory(){
    @Override public AbstractJob getJob(){
      return new AbstractJob(){
        @Override public int run(        String[] args) throws IOException {
          this.addOption(DefaultOptionCreator.overwriteOption().create());
          this.addOption("option","o","option");
          this.addOption("required","r","required",true);
          this.addOption("notRequired","nr","not required",false);
          this.addOption("hasDefault","hd","option w/ default","defaultValue");
          Map<String,List<String>> argMap=parseArguments(args);
          if (argMap == null) {
            return -1;
          }
          testMap.clear();
          testMap.putAll(argMap);
          return 0;
        }
      }
;
    }
  }
;
  int ret=ToolRunner.run(fact.getJob(),new String[0]);
  assertEquals("-1 for missing required options",-1,ret);
  ret=ToolRunner.run(fact.getJob(),new String[]{"--required","requiredArg"});
  assertEquals("0 for no missing required options",0,ret);
  assertEquals(Collections.singletonList("requiredArg"),testMap.get("--required"));
  assertEquals(Collections.singletonList("defaultValue"),testMap.get("--hasDefault"));
  assertNull(testMap.get("--option"));
  assertNull(testMap.get("--notRequired"));
  assertFalse(testMap.containsKey("--overwrite"));
  ret=ToolRunner.run(fact.getJob(),new String[]{"--required","requiredArg","--unknownArg"});
  assertEquals("-1 for including unknown options",-1,ret);
  ret=ToolRunner.run(fact.getJob(),new String[]{"--required","requiredArg","--required","requiredArg2"});
  assertEquals("-1 for including duplicate options",-1,ret);
  ret=ToolRunner.run(fact.getJob(),new String[]{"--required","requiredArg","--overwrite","--hasDefault","nonDefault","--option","optionValue","--notRequired","notRequired"});
  assertEquals("0 for no missing required options",0,ret);
  assertEquals(Collections.singletonList("requiredArg"),testMap.get("--required"));
  assertEquals(Collections.singletonList("nonDefault"),testMap.get("--hasDefault"));
  assertEquals(Collections.singletonList("optionValue"),testMap.get("--option"));
  assertEquals(Collections.singletonList("notRequired"),testMap.get("--notRequired"));
  assertTrue(testMap.containsKey("--overwrite"));
  ret=ToolRunner.run(fact.getJob(),new String[]{"-r","requiredArg","-ow","-hd","nonDefault","-o","optionValue","-nr","notRequired"});
  assertEquals("0 for no missing required options",0,ret);
  assertEquals(Collections.singletonList("requiredArg"),testMap.get("--required"));
  assertEquals(Collections.singletonList("nonDefault"),testMap.get("--hasDefault"));
  assertEquals(Collections.singletonList("optionValue"),testMap.get("--option"));
  assertEquals(Collections.singletonList("notRequired"),testMap.get("--notRequired"));
  assertTrue(testMap.containsKey("--overwrite"));
}
