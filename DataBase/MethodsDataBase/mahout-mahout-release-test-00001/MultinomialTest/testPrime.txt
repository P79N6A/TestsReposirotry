@Test public void testPrime(){
  List<String> data=Lists.newArrayList();
  for (int i=0; i < 17; i++) {
    String s="0";
    if ((i & 1) != 0) {
      s="1";
    }
    if ((i & 2) != 0) {
      s="2";
    }
    if ((i & 4) != 0) {
      s="3";
    }
    if ((i & 8) != 0) {
      s="4";
    }
    data.add(s);
  }
  Multiset<String> stuff=HashMultiset.create();
  for (  String x : data) {
    stuff.add(x);
  }
  Multinomial<String> s0=new Multinomial<>(stuff);
  Multinomial<String> s1=new Multinomial<>(stuff);
  Multinomial<String> s2=new Multinomial<>(stuff);
  double EPSILON=1.0e-15;
  Multiset<String> cnt=HashMultiset.create();
  for (int i=0; i < 50; i++) {
    double p0=i * 0.02;
    double p1=(i + 1) * 0.02;
    cnt.add(s0.sample(p0));
    cnt.add(s0.sample(p0 + EPSILON));
    cnt.add(s0.sample(p1 - EPSILON));
    assertEquals(s0.sample(p0),s1.sample(p0));
    assertEquals(s0.sample(p0 + EPSILON),s1.sample(p0 + EPSILON));
    assertEquals(s0.sample(p1 - EPSILON),s1.sample(p1 - EPSILON));
    assertEquals(s0.sample(p0),s2.sample(p0));
    assertEquals(s0.sample(p0 + EPSILON),s2.sample(p0 + EPSILON));
    assertEquals(s0.sample(p1 - EPSILON),s2.sample(p1 - EPSILON));
  }
  assertEquals(s0.sample(0),s1.sample(0));
  assertEquals(s0.sample(0 + EPSILON),s1.sample(0 + EPSILON));
  assertEquals(s0.sample(1 - EPSILON),s1.sample(1 - EPSILON));
  assertEquals(s0.sample(1),s1.sample(1));
  assertEquals(s0.sample(0),s2.sample(0));
  assertEquals(s0.sample(0 + EPSILON),s2.sample(0 + EPSILON));
  assertEquals(s0.sample(1 - EPSILON),s2.sample(1 - EPSILON));
  assertEquals(s0.sample(1),s2.sample(1));
  assertEquals(5,cnt.elementSet().size());
  Map<String,Integer> ref=ImmutableMap.of("3",35,"2",18,"1",9,"0",16,"4",72);
  for (  String v : cnt.elementSet()) {
    assertTrue(Math.abs(ref.get(v) - cnt.count(v)) <= 2);
  }
  assertTrue(cnt.contains(s0.sample(1)));
  assertEquals(s0.sample(1 - EPSILON),s0.sample(1));
}
