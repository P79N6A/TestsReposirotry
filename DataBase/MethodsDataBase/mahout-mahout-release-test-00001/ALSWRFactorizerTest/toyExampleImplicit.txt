@Test public void toyExampleImplicit() throws Exception {
  Matrix observations=new SparseRowMatrix(4,4,new Vector[]{new DenseVector(new double[]{5.0,5.0,2.0,0}),new DenseVector(new double[]{2.0,0,3.0,5.0}),new DenseVector(new double[]{0,5.0,0,3.0}),new DenseVector(new double[]{3.0,0,0,5.0})});
  Matrix preferences=new SparseRowMatrix(4,4,new Vector[]{new DenseVector(new double[]{1.0,1.0,1.0,0}),new DenseVector(new double[]{1.0,0,1.0,1.0}),new DenseVector(new double[]{0,1.0,0,1.0}),new DenseVector(new double[]{1.0,0,0,1.0})});
  double alpha=20;
  ALSWRFactorizer factorizer=new ALSWRFactorizer(dataModel,3,0.065,5,true,alpha);
  SVDRecommender svdRecommender=new SVDRecommender(dataModel,factorizer);
  RunningAverage avg=new FullRunningAverage();
  Iterator<MatrixSlice> sliceIterator=preferences.iterateAll();
  while (sliceIterator.hasNext()) {
    MatrixSlice slice=sliceIterator.next();
    for (    Vector.Element e : slice.vector().all()) {
      long userID=slice.index() + 1;
      long itemID=e.index() + 1;
      if (!Double.isNaN(e.get())) {
        double pref=e.get();
        double estimate=svdRecommender.estimatePreference(userID,itemID);
        double confidence=1 + alpha * observations.getQuick(slice.index(),e.index());
        double err=confidence * (pref - estimate) * (pref - estimate);
        avg.addDatum(err);
        log.info("Comparing preference of user [{}] towards item [{}], was [{}] with confidence [{}] " + "estimate is [{}]",slice.index(),e.index(),pref,confidence,estimate);
      }
    }
  }
  double rmse=Math.sqrt(avg.getAverage());
  log.info("RMSE: {}",rmse);
  assertTrue(rmse < 0.4);
}
