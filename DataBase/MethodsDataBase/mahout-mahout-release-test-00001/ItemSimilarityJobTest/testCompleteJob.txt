/** 
 * Integration test with a tiny data set <pre> user-item-matrix Game   Mouse   PC    Disk Jane    -       1      2      - Paul    1       -      1      - Fred    -       -      -      1 </pre>
 */
@Test public void testCompleteJob() throws Exception {
  File inputFile=getTestTempFile("prefs.txt");
  File outputDir=getTestTempDir("output");
  outputDir.delete();
  File tmpDir=getTestTempDir("tmp");
  writeLines(inputFile,"2,1,1","1,2,1","3,4,1","1,3,2","2,3,1");
  ItemSimilarityJob similarityJob=new ItemSimilarityJob();
  Configuration conf=getConfiguration();
  conf.set("mapred.input.dir",inputFile.getAbsolutePath());
  conf.set("mapred.output.dir",outputDir.getAbsolutePath());
  conf.setBoolean("mapred.output.compress",false);
  similarityJob.setConf(conf);
  similarityJob.run(new String[]{"--tempDir",tmpDir.getAbsolutePath(),"--similarityClassname",CosineSimilarity.class.getName()});
  File outPart=outputDir.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File dir,    String name){
      return name.startsWith("part-");
    }
  }
)[0];
  BufferedReader reader=Files.newReader(outPart,Charsets.UTF_8);
  String line;
  int currentLine=1;
  while ((line=reader.readLine()) != null) {
    String[] tokens=TAB.split(line);
    long itemAID=Long.parseLong(tokens[0]);
    long itemBID=Long.parseLong(tokens[1]);
    double similarity=Double.parseDouble(tokens[2]);
    if (currentLine == 1) {
      assertEquals(1L,itemAID);
      assertEquals(3L,itemBID);
      assertEquals(0.45,similarity,0.01);
    }
    if (currentLine == 2) {
      assertEquals(2L,itemAID);
      assertEquals(3L,itemBID);
      assertEquals(0.89,similarity,0.01);
    }
    currentLine++;
  }
  int linesWritten=currentLine - 1;
  assertEquals(2,linesWritten);
}
