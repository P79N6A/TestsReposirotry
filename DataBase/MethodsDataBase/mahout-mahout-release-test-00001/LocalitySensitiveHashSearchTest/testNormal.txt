@Test public void testNormal(){
  Matrix testData=new DenseMatrix(100000,10);
  final Normal gen=new Normal();
  testData.assign(gen);
  final EuclideanDistanceMeasure distance=new EuclideanDistanceMeasure();
  BruteSearch ref=new BruteSearch(distance);
  ref.addAllMatrixSlicesAsWeightedVectors(testData);
  LocalitySensitiveHashSearch cut=new LocalitySensitiveHashSearch(distance,10);
  cut.addAllMatrixSlicesAsWeightedVectors(testData);
  cut.setSearchSize(200);
  cut.resetEvaluationCount();
  System.out.printf("speedup,q1,q2,q3\n");
  for (int i=0; i < 12; i++) {
    double strategy=(i - 1.0) / 10.0;
    cut.setRaiseHashLimitStrategy(strategy);
    OnlineSummarizer t1=evaluateStrategy(testData,ref,cut);
    int evals=cut.resetEvaluationCount();
    final double speedup=10.0e6 / evals;
    System.out.printf("%.1f,%.2f,%.2f,%.2f\n",speedup,t1.getQuartile(1),t1.getQuartile(2),t1.getQuartile(3));
    assertTrue(t1.getQuartile(2) > 0.45);
    assertTrue(speedup > 4 || t1.getQuartile(2) > 0.9);
    assertTrue(speedup > 15 || t1.getQuartile(2) > 0.8);
  }
}
