@Test public void testTimesSquaredVectorTempDirDeletion() throws Exception {
  Configuration conf=getConfiguration();
  Vector v=new RandomAccessSparseVector(50);
  v.assign(1.0);
  DistributedRowMatrix dm=randomDistributedMatrix(100,90,50,20,1.0,false);
  dm.setConf(getConfiguration());
  Path outputPath=dm.getOutputTempPath();
  FileSystem fs=outputPath.getFileSystem(conf);
  deleteContentsOfPath(conf,outputPath);
  assertEquals(0,HadoopUtil.listStatus(fs,outputPath).length);
  Vector result1=dm.timesSquared(v);
  assertEquals(0,HadoopUtil.listStatus(fs,outputPath).length);
  deleteContentsOfPath(conf,outputPath);
  assertEquals(0,HadoopUtil.listStatus(fs,outputPath).length);
  conf.setBoolean(DistributedRowMatrix.KEEP_TEMP_FILES,true);
  dm.setConf(conf);
  Vector result2=dm.timesSquared(v);
  FileStatus[] outputStatuses=fs.listStatus(outputPath);
  assertEquals(1,outputStatuses.length);
  Path outputTempPath=outputStatuses[0].getPath();
  Path inputVectorPath=new Path(outputTempPath,TimesSquaredJob.INPUT_VECTOR);
  Path outputVectorPath=new Path(outputTempPath,TimesSquaredJob.OUTPUT_VECTOR_FILENAME);
  assertEquals(1,fs.listStatus(inputVectorPath,PathFilters.logsCRCFilter()).length);
  assertEquals(1,fs.listStatus(outputVectorPath,PathFilters.logsCRCFilter()).length);
  assertEquals(0.0,result1.getDistanceSquared(result2),EPSILON);
}
