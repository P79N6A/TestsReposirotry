@Test public void testClustering(){
  searcher.clear();
  int numStreamingClusters=(int)Math.log(syntheticData.getFirst().size()) * (1 << NUM_DIMENSIONS);
  System.out.printf("k log n = %d\n",numStreamingClusters);
  double estimatedCutoff=ClusteringUtils.estimateDistanceCutoff(syntheticData.getFirst(),searcher.getDistanceMeasure(),100);
  StreamingKMeans clusterer=new StreamingKMeans(searcher,numStreamingClusters,estimatedCutoff);
  long startTime=System.currentTimeMillis();
  if (allAtOnce) {
    clusterer.cluster(syntheticData.getFirst());
  }
 else {
    for (    Centroid datapoint : syntheticData.getFirst()) {
      clusterer.cluster(datapoint);
    }
  }
  long endTime=System.currentTimeMillis();
  System.out.printf("%s %s\n",searcher.getClass().getName(),searcher.getDistanceMeasure().getClass().getName());
  System.out.printf("Total number of clusters %d\n",clusterer.getNumClusters());
  System.out.printf("Weights: %f %f\n",ClusteringUtils.totalWeight(syntheticData.getFirst()),ClusteringUtils.totalWeight(clusterer));
  assertEquals("Total weight not preserved",ClusteringUtils.totalWeight(syntheticData.getFirst()),ClusteringUtils.totalWeight(clusterer),1.0e-9);
  double maxWeight=0;
  for (  Vector mean : syntheticData.getSecond()) {
    WeightedThing<Vector> v=searcher.search(mean,1).get(0);
    maxWeight=Math.max(v.getWeight(),maxWeight);
  }
  assertTrue("Maximum weight too large " + maxWeight,maxWeight < 0.05);
  double clusterTime=(endTime - startTime) / 1000.0;
  System.out.printf("%s\n%.2f for clustering\n%.1f us per row\n\n",searcher.getClass().getName(),clusterTime,clusterTime / syntheticData.getFirst().size() * 1.0e6);
  double[] cornerWeights=new double[1 << NUM_DIMENSIONS];
  Searcher trueFinder=new BruteSearch(new EuclideanDistanceMeasure());
  for (  Vector trueCluster : syntheticData.getSecond()) {
    trueFinder.add(trueCluster);
  }
  for (  Centroid centroid : clusterer) {
    WeightedThing<Vector> closest=trueFinder.search(centroid,1).get(0);
    cornerWeights[((Centroid)closest.getValue()).getIndex()]+=centroid.getWeight();
  }
  int expectedNumPoints=NUM_DATA_POINTS / (1 << NUM_DIMENSIONS);
  for (  double v : cornerWeights) {
    System.out.printf("%f ",v);
  }
  System.out.println();
  for (  double v : cornerWeights) {
    assertEquals(expectedNumPoints,v,0);
  }
}
