/** 
 * tests  {@link UserVectorSplitterMapper} in the special case that some userIDs shall be excluded
 */
@Test public void testUserVectorSplitterMapperUserExclusion() throws Exception {
  Mapper<VarLongWritable,VectorWritable,VarIntWritable,VectorOrPrefWritable>.Context context=EasyMock.createMock(Mapper.Context.class);
  context.write(EasyMock.eq(new VarIntWritable(34)),prefOfVectorOrPrefWritableMatches(123L,0.5f));
  context.write(EasyMock.eq(new VarIntWritable(56)),prefOfVectorOrPrefWritableMatches(123L,0.7f));
  EasyMock.replay(context);
  FastIDSet usersToRecommendFor=new FastIDSet();
  usersToRecommendFor.add(123L);
  UserVectorSplitterMapper mapper=new UserVectorSplitterMapper();
  setField(mapper,"maxPrefsPerUserConsidered",10);
  setField(mapper,"usersToRecommendFor",usersToRecommendFor);
  RandomAccessSparseVector vector=new RandomAccessSparseVector(Integer.MAX_VALUE,100);
  vector.set(34,0.5);
  vector.set(56,0.7);
  mapper.map(new VarLongWritable(123L),new VectorWritable(vector),context);
  mapper.map(new VarLongWritable(456L),new VectorWritable(vector),context);
  EasyMock.verify(context);
}
