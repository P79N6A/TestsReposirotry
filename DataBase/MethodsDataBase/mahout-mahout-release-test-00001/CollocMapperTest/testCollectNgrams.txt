@Test public void testCollectNgrams() throws Exception {
  Text key=new Text();
  key.set("dummy-key");
  String[] input={"the","best","of","times","the","worst","of","times"};
  StringTuple inputTuple=new StringTuple();
  for (  String i : input) {
    inputTuple.add(i);
  }
  String[][] values={{"h_the","the best"},{"t_best","the best"},{"h_of","of times"},{"t_times","of times"},{"h_best","best of"},{"t_of","best of"},{"h_the","the worst"},{"t_worst","the worst"},{"h_times","times the"},{"t_the","times the"},{"h_worst","worst of"},{"t_of","worst of"}};
  Configuration conf=getConfiguration();
  conf.set(CollocMapper.MAX_SHINGLE_SIZE,"2");
  EasyMock.expect(context.getConfiguration()).andReturn(conf);
  for (  String[] v : values) {
    Type p=v[0].startsWith("h") ? Gram.Type.HEAD : Gram.Type.TAIL;
    int frequency=1;
    if ("of times".equals(v[1])) {
      frequency=2;
    }
    Gram subgram=new Gram(v[0].substring(2),frequency,p);
    Gram ngram=new Gram(v[1],frequency,Gram.Type.NGRAM);
    GramKey subgramKey=new GramKey(subgram,new byte[0]);
    GramKey subgramNgramKey=new GramKey(subgram,ngram.getBytes());
    context.write(subgramKey,subgram);
    context.write(subgramNgramKey,ngram);
  }
  EasyMock.expect(context.getCounter(CollocMapper.Count.NGRAM_TOTAL)).andReturn(counter);
  counter.increment(7);
  EasyMock.replay(context,counter);
  CollocMapper c=new CollocMapper();
  c.setup(context);
  c.map(key,inputTuple,context);
  EasyMock.verify(context);
}
