@Test public void testMeasure(){
  DistanceMeasure minkowskiDistanceMeasure=new MinkowskiDistanceMeasure(1.5);
  DistanceMeasure manhattanDistanceMeasure=new ManhattanDistanceMeasure();
  DistanceMeasure euclideanDistanceMeasure=new EuclideanDistanceMeasure();
  Vector[] vectors={new DenseVector(new double[]{1,0,0,0,0,0}),new DenseVector(new double[]{1,1,1,0,0,0}),new DenseVector(new double[]{1,1,1,1,1,1})};
  double[][] minkowskiDistanceMatrix=new double[3][3];
  double[][] manhattanDistanceMatrix=new double[3][3];
  double[][] euclideanDistanceMatrix=new double[3][3];
  for (int a=0; a < 3; a++) {
    for (int b=0; b < 3; b++) {
      minkowskiDistanceMatrix[a][b]=minkowskiDistanceMeasure.distance(vectors[a],vectors[b]);
      manhattanDistanceMatrix[a][b]=manhattanDistanceMeasure.distance(vectors[a],vectors[b]);
      euclideanDistanceMatrix[a][b]=euclideanDistanceMeasure.distance(vectors[a],vectors[b]);
    }
  }
  for (int a=0; a < 3; a++) {
    for (int b=0; b < 3; b++) {
      assertTrue(minkowskiDistanceMatrix[a][b] <= manhattanDistanceMatrix[a][b]);
      assertTrue(minkowskiDistanceMatrix[a][b] >= euclideanDistanceMatrix[a][b]);
    }
  }
  assertEquals(0.0,minkowskiDistanceMatrix[0][0],EPSILON);
  assertTrue(minkowskiDistanceMatrix[0][0] < minkowskiDistanceMatrix[0][1]);
  assertTrue(minkowskiDistanceMatrix[0][1] < minkowskiDistanceMatrix[0][2]);
}
