@Test public void testAffinitymatrixInputReducer() throws Exception {
  AffinityMatrixInputMapper mapper=new AffinityMatrixInputMapper();
  Configuration conf=getConfiguration();
  conf.setInt(Keys.AFFINITY_DIMENSIONS,RAW_DIMENSIONS);
  DummyRecordWriter<IntWritable,MatrixEntryWritable> mapWriter=new DummyRecordWriter<>();
  Mapper<LongWritable,Text,IntWritable,MatrixEntryWritable>.Context mapContext=DummyRecordWriter.build(mapper,conf,mapWriter);
  for (  String s : RAW) {
    mapper.map(new LongWritable(),new Text(s),mapContext);
  }
  Map<IntWritable,List<MatrixEntryWritable>> map=mapWriter.getData();
  AffinityMatrixInputReducer reducer=new AffinityMatrixInputReducer();
  DummyRecordWriter<IntWritable,VectorWritable> redWriter=new DummyRecordWriter<>();
  Reducer<IntWritable,MatrixEntryWritable,IntWritable,VectorWritable>.Context redContext=DummyRecordWriter.build(reducer,conf,redWriter,IntWritable.class,MatrixEntryWritable.class);
  for (  IntWritable key : mapWriter.getKeys()) {
    reducer.reduce(key,mapWriter.getValue(key),redContext);
  }
  assertEquals("Number of reduce results",RAW_DIMENSIONS,redWriter.getData().size());
  for (  IntWritable row : redWriter.getKeys()) {
    List<VectorWritable> list=redWriter.getValue(row);
    assertEquals("Should only be one vector",1,list.size());
    Vector v=list.get(0).get();
    for (    Vector.Element e : v.all()) {
      MatrixEntryWritable toCompare=new MatrixEntryWritable();
      toCompare.setRow(-1);
      toCompare.setCol(e.index());
      toCompare.setVal(e.get());
      assertTrue("This entry was correctly placed in its row",map.get(row).contains(toCompare));
    }
  }
}
