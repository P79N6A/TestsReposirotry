/** 
 * Test for Serialization/DeSerialization
 */
@Test public void testSerializationAndDeSerialization() throws Exception {
  OnlineLogisticRegression lr=new OnlineLogisticRegression(2,8,new L1()).lambda(1 * 1.0e-3).stepOffset(11).alpha(0.01).learningRate(50).decayExponent(-0.02);
  lr.close();
  byte[] output;
  try (ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();DataOutputStream dataOutputStream=new DataOutputStream(byteArrayOutputStream)){
    PolymorphicWritable.write(dataOutputStream,lr);
    output=byteArrayOutputStream.toByteArray();
  }
   OnlineLogisticRegression read;
  try (ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(output);DataInputStream dataInputStream=new DataInputStream(byteArrayInputStream)){
    read=PolymorphicWritable.read(dataInputStream,OnlineLogisticRegression.class);
  }
   Assert.assertEquals((1.0e-3),read.getLambda(),1.0e-7);
  Field stepOffset=lr.getClass().getDeclaredField("stepOffset");
  stepOffset.setAccessible(true);
  int stepOffsetVal=(Integer)stepOffset.get(lr);
  Assert.assertEquals(11,stepOffsetVal);
  Field decayFactor=lr.getClass().getDeclaredField("decayFactor");
  decayFactor.setAccessible(true);
  double decayFactorVal=(Double)decayFactor.get(lr);
  Assert.assertEquals(0.01,decayFactorVal,1.0e-7);
  Field mu0=lr.getClass().getDeclaredField("mu0");
  mu0.setAccessible(true);
  double mu0Val=(Double)mu0.get(lr);
  Assert.assertEquals(50,mu0Val,1.0e-7);
  Field forgettingExponent=lr.getClass().getDeclaredField("forgettingExponent");
  forgettingExponent.setAccessible(true);
  double forgettingExponentVal=(Double)forgettingExponent.get(lr);
  Assert.assertEquals(-0.02,forgettingExponentVal,1.0e-7);
}
