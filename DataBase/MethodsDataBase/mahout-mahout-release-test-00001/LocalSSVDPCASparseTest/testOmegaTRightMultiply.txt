@Test public void testOmegaTRightMultiply(){
  final Random rnd=RandomUtils.getRandom();
  final long seed=rnd.nextLong();
  final int n=2000;
  final int kp=100;
  final Omega omega=new Omega(seed,kp);
  final Matrix materializedOmega=new DenseMatrix(n,kp);
  for (int i=0; i < n; i++)   for (int j=0; j < kp; j++)   materializedOmega.setQuick(i,j,omega.getQuick(i,j));
  Vector xi=new DenseVector(n);
  xi.assign(new DoubleFunction(){
    @Override public double apply(    double x){
      return rnd.nextDouble() * 100;
    }
  }
);
  Vector s_o=omega.mutlithreadedTRightMultiply(xi);
  Matrix xiVector=new DenseMatrix(n,1);
  xiVector.assignColumn(0,xi);
  Vector s_o_control=materializedOmega.transpose().times(xiVector).viewColumn(0);
  assertEquals(0,s_o.minus(s_o_control).aggregate(Functions.PLUS,Functions.ABS),1e-10);
  System.out.printf("s_omega=\n%s\n",s_o);
  System.out.printf("s_omega_control=\n%s\n",s_o_control);
}
