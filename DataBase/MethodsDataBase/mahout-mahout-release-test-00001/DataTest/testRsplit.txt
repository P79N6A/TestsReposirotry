/** 
 * Test method for {@link org.apache.mahout.classifier.df.data.Data#rsplit(java.util.Random,int)}.
 */
@Test public void testRsplit(){
  Data source=classifierData.clone();
  Data subset=source.rsplit(rng,0);
  assertTrue("subset should be empty",subset.isEmpty());
  assertEquals("source.size is incorrect",DATA_SIZE,source.size());
  source=classifierData.clone();
  subset=source.rsplit(rng,DATA_SIZE);
  assertEquals("subset.size is incorrect",DATA_SIZE,subset.size());
  assertTrue("source should be empty",source.isEmpty());
  int subsize=rng.nextInt(DATA_SIZE);
  source=classifierData.clone();
  subset=source.rsplit(rng,subsize);
  assertEquals("subset.size is incorrect",subsize,subset.size());
  assertEquals("source.size is incorrect",DATA_SIZE - subsize,source.size());
  source=regressionData.clone();
  subset=source.rsplit(rng,0);
  assertTrue("subset should be empty",subset.isEmpty());
  assertEquals("source.size is incorrect",DATA_SIZE,source.size());
  source=regressionData.clone();
  subset=source.rsplit(rng,DATA_SIZE);
  assertEquals("subset.size is incorrect",DATA_SIZE,subset.size());
  assertTrue("source should be empty",source.isEmpty());
  subsize=rng.nextInt(DATA_SIZE);
  source=regressionData.clone();
  subset=source.rsplit(rng,subsize);
  assertEquals("subset.size is incorrect",subsize,subset.size());
  assertEquals("source.size is incorrect",DATA_SIZE - subsize,source.size());
}
