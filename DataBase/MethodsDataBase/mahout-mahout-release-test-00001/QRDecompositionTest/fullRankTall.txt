@Test public void fullRankTall(){
  Matrix x=matrix();
  QRDecomposition qr=new QRDecomposition(x);
  assertTrue(qr.hasFullRank());
  Matrix rRef=reshape(new double[]{-2.99129686445138,0,0,0,0,-0.0282260628674372,-2.38850244769059,0,0,0,0.733739310355871,1.48042000631646,2.29051263117895,0,0,-0.0394082168269326,0.282829484207801,-0.00438521041803086,-2.90823198084203,0,0.923669647838536,1.76679276072492,0.637690104222683,-0.225890909498753,-1.35732293800944},5,5);
  Matrix r=qr.getR();
  assertEquals(0,r.clone().assign(Functions.ABS).minus(rRef.clone().assign(Functions.ABS)).aggregate(Functions.PLUS,Functions.IDENTITY),1.0e-12);
  Matrix qRef=reshape(new double[]{-0.165178287646573,0.0510035857637869,0.13985915987379,-0.120173729496501,-0.453198314345324,0.644400679630493,-0.503117990820608,0.24968739845381,0.323968339146224,-0.465266080134262,0.276508948773268,-0.687909700644343,0.0544048888907195,-0.0166677718378263,0.171309755790717,0.310339001630029,0.674790532821663,0.0058166082200493,-0.381707516461884,0.300504956413142,-0.105751091334003,0.410450870871096,0.31113446615821,0.179338172684956,0.361951807617901,0.763921725548796,0.380327892605634,-0.287274944594054,0.0311604042556675,0.0386096858143961,0.0387156960650472,-0.232975755728917,0.0358178276684149,0.173105775703199,0.327321867815603,0.328671945345279,-0.36015879836344,-0.444261660176044,0.09438499563253,0.646216148583769},8,5);
  printMatrix("qRef",qRef);
  Matrix q=qr.getQ();
  printMatrix("q",q);
  assertEquals(0,q.clone().assign(Functions.ABS).minus(qRef.clone().assign(Functions.ABS)).aggregate(Functions.PLUS,Functions.IDENTITY),1.0e-12);
  Matrix x1=qr.solve(reshape(new double[]{-0.0178247686747641,0.68631714634098,-0.335464858468858,1.50249941751569,-0.669901640772149,-0.977025038942455,-1.18857546169856,-1.24792900492054},8,1));
  Matrix xref=reshape(new double[]{-0.0127440093664874,0.655825940180799,-0.100755415991702,-0.0349559562697406,-0.190744297762028},5,1);
  printMatrix("x1",x1);
  printMatrix("xref",xref);
  assertEquals(xref,x1,1.0e-8);
}
