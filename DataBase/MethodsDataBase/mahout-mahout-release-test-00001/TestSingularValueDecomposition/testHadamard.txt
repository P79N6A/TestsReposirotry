/** 
 * Test based on a dimension 4 Hadamard matrix. 
 */
@Test public void testHadamard(){
  Matrix matrix=new DenseMatrix(new double[][]{{15.0 / 2.0,5.0 / 2.0,9.0 / 2.0,3.0 / 2.0},{5.0 / 2.0,15.0 / 2.0,3.0 / 2.0,9.0 / 2.0},{9.0 / 2.0,3.0 / 2.0,15.0 / 2.0,5.0 / 2.0},{3.0 / 2.0,9.0 / 2.0,5.0 / 2.0,15.0 / 2.0}});
  SingularValueDecomposition svd=new SingularValueDecomposition(matrix);
  assertEquals(16.0,svd.getSingularValues()[0],1.0e-14);
  assertEquals(8.0,svd.getSingularValues()[1],1.0e-14);
  assertEquals(4.0,svd.getSingularValues()[2],1.0e-14);
  assertEquals(2.0,svd.getSingularValues()[3],1.0e-14);
  Matrix fullCovariance=new DenseMatrix(new double[][]{{85.0 / 1024,-51.0 / 1024,-75.0 / 1024,45.0 / 1024},{-51.0 / 1024,85.0 / 1024,45.0 / 1024,-75.0 / 1024},{-75.0 / 1024,45.0 / 1024,85.0 / 1024,-51.0 / 1024},{45.0 / 1024,-75.0 / 1024,-51.0 / 1024,85.0 / 1024}});
  assertEquals(0.0,Algebra.getNorm(fullCovariance.minus(svd.getCovariance(0.0))),1.0e-14);
  Matrix halfCovariance=new DenseMatrix(new double[][]{{5.0 / 1024,-3.0 / 1024,5.0 / 1024,-3.0 / 1024},{-3.0 / 1024,5.0 / 1024,-3.0 / 1024,5.0 / 1024},{5.0 / 1024,-3.0 / 1024,5.0 / 1024,-3.0 / 1024},{-3.0 / 1024,5.0 / 1024,-3.0 / 1024,5.0 / 1024}});
  assertEquals(0.0,Algebra.getNorm(halfCovariance.minus(svd.getCovariance(6.0))),1.0e-14);
}
