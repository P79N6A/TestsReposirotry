/** 
 * Story: User wishes to run kmeans job on reference data 
 */
@Test public void testKMeansMRJob() throws Exception {
  DistanceMeasure measure=new EuclideanDistanceMeasure();
  List<VectorWritable> points=getPointsWritable(REFERENCE);
  Path pointsPath=getTestTempDirPath("points");
  Path clustersPath=getTestTempDirPath("clusters");
  Configuration conf=getConfiguration();
  ClusteringTestUtils.writePointsToFile(points,true,new Path(pointsPath,"file1"),fs,conf);
  ClusteringTestUtils.writePointsToFile(points,true,new Path(pointsPath,"file2"),fs,conf);
  for (int k=1; k < points.size(); k+=3) {
    System.out.println("testKMeansMRJob k= " + k);
    Path path=new Path(clustersPath,"part-00000");
    FileSystem fs=FileSystem.get(path.toUri(),conf);
    SequenceFile.Writer writer=new SequenceFile.Writer(fs,conf,path,Text.class,Kluster.class);
    try {
      for (int i=0; i < k + 1; i++) {
        Vector vec=points.get(i).get();
        Kluster cluster=new Kluster(vec,i,measure);
        cluster.observe(cluster.getCenter(),1);
        writer.append(new Text(cluster.getIdentifier()),cluster);
      }
    }
  finally {
      Closeables.close(writer,false);
    }
    Path outputPath=getTestTempDirPath("output" + k);
    String[] args={optKey(DefaultOptionCreator.INPUT_OPTION),pointsPath.toString(),optKey(DefaultOptionCreator.CLUSTERS_IN_OPTION),clustersPath.toString(),optKey(DefaultOptionCreator.OUTPUT_OPTION),outputPath.toString(),optKey(DefaultOptionCreator.DISTANCE_MEASURE_OPTION),EuclideanDistanceMeasure.class.getName(),optKey(DefaultOptionCreator.CONVERGENCE_DELTA_OPTION),"0.001",optKey(DefaultOptionCreator.MAX_ITERATIONS_OPTION),"2",optKey(DefaultOptionCreator.CLUSTERING_OPTION),optKey(DefaultOptionCreator.OVERWRITE_OPTION)};
    ToolRunner.run(getConfiguration(),new KMeansDriver(),args);
    Path clusteredPointsPath=new Path(outputPath,"clusteredPoints");
    int[] expect=EXPECTED_NUM_POINTS[k];
    DummyOutputCollector<IntWritable,WeightedPropertyVectorWritable> collector=new DummyOutputCollector<>();
    for (    Pair<IntWritable,WeightedPropertyVectorWritable> record : new SequenceFileIterable<IntWritable,WeightedPropertyVectorWritable>(new Path(clusteredPointsPath,"part-m-00000"),conf)) {
      collector.collect(record.getFirst(),record.getSecond());
    }
    assertEquals("clusters[" + k + ']',expect.length,collector.getKeys().size());
  }
}
