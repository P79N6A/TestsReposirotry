/** 
 * Story: User can cluster points using a EuclideanDistanceMeasure and a reference implementation
 */
@Test public void testReferenceEuclidean() throws Exception {
  printCanopies(referenceEuclidean);
  assertEquals("number of canopies",3,referenceEuclidean.size());
  int[] expectedNumPoints={5,5,3};
  double[][] expectedCentroids={{1.8,1.8},{4.2,4.2},{4.666666666666667,4.666666666666667}};
  for (int canopyIx=0; canopyIx < referenceEuclidean.size(); canopyIx++) {
    Canopy testCanopy=referenceEuclidean.get(canopyIx);
    assertEquals("canopy points " + canopyIx,testCanopy.getNumObservations(),expectedNumPoints[canopyIx]);
    double[] refCentroid=expectedCentroids[canopyIx];
    Vector testCentroid=testCanopy.computeCentroid();
    for (int pointIx=0; pointIx < refCentroid.length; pointIx++) {
      assertEquals("canopy centroid " + canopyIx + '['+ pointIx+ ']',refCentroid[pointIx],testCentroid.get(pointIx),EPSILON);
    }
  }
}
