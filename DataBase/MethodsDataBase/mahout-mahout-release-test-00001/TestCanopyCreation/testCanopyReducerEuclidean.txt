/** 
 * Story: User can produce final canopy centers using a EuclideanDistanceMeasure and a CanopyReducer which clusters input centroid points to produce an output set of final canopy centroid points.
 */
@Test public void testCanopyReducerEuclidean() throws Exception {
  CanopyReducer reducer=new CanopyReducer();
  Configuration conf=getConfiguration();
  conf.set(CanopyConfigKeys.DISTANCE_MEASURE_KEY,"org.apache.mahout.common.distance.EuclideanDistanceMeasure");
  conf.set(CanopyConfigKeys.T1_KEY,String.valueOf(3.1));
  conf.set(CanopyConfigKeys.T2_KEY,String.valueOf(2.1));
  conf.set(CanopyConfigKeys.CF_KEY,"0");
  DummyRecordWriter<Text,ClusterWritable> writer=new DummyRecordWriter<>();
  Reducer<Text,VectorWritable,Text,ClusterWritable>.Context context=DummyRecordWriter.build(reducer,conf,writer,Text.class,VectorWritable.class);
  reducer.setup(context);
  List<VectorWritable> points=getPointsWritable();
  reducer.reduce(new Text("centroid"),points,context);
  Iterable<Text> keys=writer.getKeysInInsertionOrder();
  assertEquals("Number of centroids",3,Iterables.size(keys));
  int i=0;
  for (  Text key : keys) {
    List<ClusterWritable> data=writer.getValue(key);
    ClusterWritable clusterWritable=data.get(0);
    Canopy canopy=(Canopy)clusterWritable.getValue();
    assertEquals(euclideanCentroids.get(i).asFormatString() + " is not equal to " + canopy.computeCentroid().asFormatString(),euclideanCentroids.get(i),canopy.computeCentroid());
    i++;
  }
}
