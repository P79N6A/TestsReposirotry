@Test public void test1(){
  final Random rand=RandomUtils.getRandom();
  Matrix z=new DenseMatrix(100,100);
  z.assign(new DoubleFunction(){
    @Override public double apply(    double arg1){
      return rand.nextDouble();
    }
  }
);
  Matrix A=z.times(z.transpose());
  for (boolean type=false; !type; type=true) {
    CholeskyDecomposition cd=new CholeskyDecomposition(A,type);
    Matrix L=cd.getL();
    Matrix Abar=L.times(L.transpose());
    double error=A.minus(Abar).aggregate(Functions.MAX,Functions.ABS);
    Assert.assertEquals("type = " + type,0,error,1.0e-10);
    Matrix q=cd.solveLeft(z);
    Matrix id=q.times(q.transpose());
    for (int i=0; i < id.columnSize(); i++) {
      Assert.assertEquals("type = " + type,1,id.get(i,i),1.0e-9);
      Assert.assertEquals("type = " + type,1,id.viewRow(i).norm(1),1.0e-9);
    }
    q=cd.solveRight(z.transpose());
    id=q.transpose().times(q);
    for (int i=0; i < id.columnSize(); i++) {
      Assert.assertEquals("type = " + type,1,id.get(i,i),1.0e-9);
      Assert.assertEquals("type = " + type,1,id.viewRow(i).norm(1),1.0e-9);
    }
  }
}
