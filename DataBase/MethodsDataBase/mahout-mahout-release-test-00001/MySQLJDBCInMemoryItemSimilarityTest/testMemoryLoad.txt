@Test public void testMemoryLoad() throws Exception {
  DataSource dataSource=EasyMock.createMock(DataSource.class);
  Connection connection=EasyMock.createMock(Connection.class);
  PreparedStatement statement=EasyMock.createMock(PreparedStatement.class);
  ResultSet resultSet=EasyMock.createMock(ResultSet.class);
  EasyMock.expect(dataSource.getConnection()).andReturn(connection);
  EasyMock.expect(connection.prepareStatement(MySQLJDBCInMemoryItemSimilarity.DEFAULT_GET_ALL_ITEMSIMILARITIES_SQL,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY)).andReturn(statement);
  statement.setFetchDirection(ResultSet.FETCH_FORWARD);
  EasyMock.expect(statement.executeQuery()).andReturn(resultSet);
  EasyMock.expect(resultSet.next()).andReturn(true);
  EasyMock.expect(resultSet.getLong(1)).andReturn(1L);
  EasyMock.expect(resultSet.getLong(2)).andReturn(2L);
  EasyMock.expect(resultSet.getDouble(3)).andReturn(0.5);
  EasyMock.expect(resultSet.next()).andReturn(true);
  EasyMock.expect(resultSet.getLong(1)).andReturn(1L);
  EasyMock.expect(resultSet.getLong(2)).andReturn(3L);
  EasyMock.expect(resultSet.getDouble(3)).andReturn(0.4);
  EasyMock.expect(resultSet.next()).andReturn(true);
  EasyMock.expect(resultSet.getLong(1)).andReturn(3L);
  EasyMock.expect(resultSet.getLong(2)).andReturn(4L);
  EasyMock.expect(resultSet.getDouble(3)).andReturn(0.1);
  EasyMock.expect(resultSet.next()).andReturn(false);
  resultSet.close();
  statement.close();
  connection.close();
  EasyMock.replay(dataSource,connection,statement,resultSet);
  ItemSimilarity similarity=new MySQLJDBCInMemoryItemSimilarity(dataSource);
  assertEquals(0.5,similarity.itemSimilarity(1L,2L),EPSILON);
  assertEquals(0.4,similarity.itemSimilarity(1L,3L),EPSILON);
  assertEquals(0.1,similarity.itemSimilarity(3L,4L),EPSILON);
  assertTrue(Double.isNaN(similarity.itemSimilarity(1L,4L)));
  EasyMock.verify(dataSource,connection,statement,resultSet);
}
