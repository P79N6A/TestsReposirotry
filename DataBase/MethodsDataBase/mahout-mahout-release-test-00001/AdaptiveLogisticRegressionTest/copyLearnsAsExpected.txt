@Test public void copyLearnsAsExpected(){
  Random gen=RandomUtils.getRandom();
  Exponential exp=new Exponential(0.5,gen);
  Vector beta=new DenseVector(200);
  for (  Vector.Element element : beta.all()) {
    int sign=1;
    if (gen.nextDouble() < 0.5) {
      sign=-1;
    }
    element.set(sign * exp.nextDouble());
  }
  AdaptiveLogisticRegression.Wrapper w=new AdaptiveLogisticRegression.Wrapper(2,200,new L1());
  for (int i=0; i < 3000; i++) {
    AdaptiveLogisticRegression.TrainingExample r=getExample(i,gen,beta);
    w.train(r);
    if (i % 1000 == 0) {
      System.out.printf("%10d %.3f\n",i,w.getLearner().auc());
    }
  }
  System.out.printf("%10d %.3f\n",3000,w.getLearner().auc());
  double auc1=w.getLearner().auc();
  AdaptiveLogisticRegression.Wrapper w2=w.copy();
  for (int i=0; i < 5000; i++) {
    if (i % 1000 == 0) {
      if (i == 0) {
        assertEquals("Should have started with no data",0.5,w2.getLearner().auc(),0.0001);
      }
      if (i == 1000) {
        double auc2=w2.getLearner().auc();
        assertTrue("Should have had head-start",Math.abs(auc2 - 0.5) > 0.1);
        assertTrue("AUC should improve quickly on copy",auc1 < auc2);
      }
      System.out.printf("%10d %.3f\n",i,w2.getLearner().auc());
    }
    AdaptiveLogisticRegression.TrainingExample r=getExample(i,gen,beta);
    w2.train(r);
  }
  assertEquals("Original should not change after copy is updated",auc1,w.getLearner().auc(),1.0e-5);
  assertTrue("AUC should improve significantly on copy",auc1 < w2.getLearner().auc() - 0.05);
  assertEquals(auc1,w.getLearner().auc(),0);
}
