@Test public void testSingularValues() throws IOException {
  Matrix A=lowRankMatrix(tmpDir,"A",200,970,1020);
  List<File> partsOfA=Arrays.asList(tmpDir.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File file,    String fileName){
      return fileName.matches("A-.*");
    }
  }
));
  partsOfA=Lists.reverse(partsOfA);
  SequentialOutOfCoreSvd s=new SequentialOutOfCoreSvd(partsOfA,tmpDir,100,210);
  SequentialBigSvd svd=new SequentialBigSvd(A,100);
  Vector reference=new DenseVector(svd.getSingularValues()).viewPart(0,6);
  Vector actual=s.getSingularValues().viewPart(0,6);
  assertEquals(0,reference.minus(actual).maxValue(),1.0e-9);
  s.computeU(partsOfA,tmpDir);
  Matrix u=readBlockMatrix(Arrays.asList(tmpDir.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File file,    String fileName){
      return fileName.matches("U-.*");
    }
  }
)));
  s.computeV(tmpDir,A.columnSize());
  Matrix v=readBlockMatrix(Arrays.asList(tmpDir.listFiles(new FilenameFilter(){
    @Override public boolean accept(    File file,    String fileName){
      return fileName.matches("V-.*");
    }
  }
)));
  assertEquals(0,A.minus(u.times(new DiagonalMatrix(s.getSingularValues())).times(v.transpose())).aggregate(Functions.PLUS,Functions.ABS),1.0e-7);
}
