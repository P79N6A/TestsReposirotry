@Test public void testInitialization(){
  List<? extends WeightedVector> data=cubishTestData(0.01);
  BallKMeans r=new BallKMeans(new BruteSearch(new SquaredEuclideanDistanceMeasure()),6,20);
  r.cluster(data);
  Matrix x=new DenseMatrix(6,5);
  int row=0;
  for (  Centroid c : r) {
    x.viewRow(row).assign(c.viewPart(0,5));
    row++;
  }
  final Vector columnNorms=x.aggregateColumns(new VectorFunction(){
    @Override public double apply(    Vector f){
      return Math.abs(f.minValue()) + Math.abs(f.maxValue() - 6) + Math.abs(f.norm(1) - 6);
    }
  }
);
  assertEquals(0,columnNorms.norm(1) / columnNorms.size(),0.1);
  SingularValueDecomposition svd=new SingularValueDecomposition(x);
  Vector s=svd.getS().viewDiagonal().assign(Functions.div(6));
  assertEquals(5,s.getLengthSquared(),0.05);
  assertEquals(5,s.norm(1),0.05);
}
