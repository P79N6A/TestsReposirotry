@Test public void testFuzzyKMeansSeqJob() throws Exception {
  List<VectorWritable> points=TestKmeansClustering.getPointsWritable(TestKmeansClustering.REFERENCE);
  Path pointsPath=getTestTempDirPath("points");
  Path clustersPath=getTestTempDirPath("clusters");
  Configuration conf=getConfiguration();
  ClusteringTestUtils.writePointsToFile(points,new Path(pointsPath,"file1"),fs,conf);
  for (int k=0; k < points.size(); k++) {
    System.out.println("testKFuzzyKMeansMRJob k= " + k);
    SequenceFile.Writer writer=new SequenceFile.Writer(fs,conf,new Path(clustersPath,"part-00000"),Text.class,SoftCluster.class);
    try {
      for (int i=0; i < k + 1; i++) {
        Vector vec=tweakValue(points.get(i).get());
        SoftCluster cluster=new SoftCluster(vec,i,measure);
        cluster.observe(cluster.getCenter(),1);
        writer.append(new Text(cluster.getIdentifier()),cluster);
      }
    }
  finally {
      Closeables.close(writer,false);
    }
    Path output=getTestTempDirPath("output" + k);
    String[] args={optKey(DefaultOptionCreator.INPUT_OPTION),pointsPath.toString(),optKey(DefaultOptionCreator.CLUSTERS_IN_OPTION),clustersPath.toString(),optKey(DefaultOptionCreator.OUTPUT_OPTION),output.toString(),optKey(DefaultOptionCreator.DISTANCE_MEASURE_OPTION),EuclideanDistanceMeasure.class.getName(),optKey(DefaultOptionCreator.CONVERGENCE_DELTA_OPTION),"0.001",optKey(DefaultOptionCreator.MAX_ITERATIONS_OPTION),"2",optKey(FuzzyKMeansDriver.M_OPTION),"2.0",optKey(DefaultOptionCreator.CLUSTERING_OPTION),optKey(DefaultOptionCreator.EMIT_MOST_LIKELY_OPTION),optKey(DefaultOptionCreator.OVERWRITE_OPTION),optKey(DefaultOptionCreator.METHOD_OPTION),DefaultOptionCreator.SEQUENTIAL_METHOD};
    FuzzyKMeansDriver.main(args);
    long count=HadoopUtil.countRecords(new Path(output,"clusteredPoints/part-m-0"),conf);
    assertTrue(count > 0);
  }
}
