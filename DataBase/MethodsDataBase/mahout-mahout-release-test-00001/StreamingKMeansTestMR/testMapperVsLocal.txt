@Test public void testMapperVsLocal() throws IOException {
  MapDriver<Writable,VectorWritable,IntWritable,CentroidWritable> mapDriver=MapDriver.newMapDriver(new StreamingKMeansMapper());
  Configuration configuration=mapDriver.getConfiguration();
  configure(configuration);
  System.out.printf("%s mapper vs local test\n",mapDriver.getConfiguration().get(StreamingKMeansDriver.SEARCHER_CLASS_OPTION));
  for (  Centroid datapoint : syntheticData.getFirst()) {
    mapDriver.addInput(new IntWritable(0),new VectorWritable(datapoint));
  }
  List<Centroid> mapperCentroids=Lists.newArrayList();
  for (  org.apache.hadoop.mrunit.types.Pair<IntWritable,CentroidWritable> pair : mapDriver.run()) {
    mapperCentroids.add(pair.getSecond().getCentroid());
  }
  StreamingKMeans batchClusterer=new StreamingKMeans(StreamingKMeansUtilsMR.searcherFromConfiguration(configuration),mapDriver.getConfiguration().getInt("estimatedNumMapClusters",-1),DISTANCE_CUTOFF);
  batchClusterer.cluster(syntheticData.getFirst());
  List<Centroid> batchCentroids=Lists.newArrayList();
  for (  Vector v : batchClusterer) {
    batchCentroids.add((Centroid)v);
  }
  StreamingKMeans perPointClusterer=new StreamingKMeans(StreamingKMeansUtilsMR.searcherFromConfiguration(configuration),(1 << NUM_DIMENSIONS) * (int)Math.log(NUM_DATA_POINTS),DISTANCE_CUTOFF);
  for (  Centroid datapoint : syntheticData.getFirst()) {
    perPointClusterer.cluster(datapoint);
  }
  List<Centroid> perPointCentroids=Lists.newArrayList();
  for (  Vector v : perPointClusterer) {
    perPointCentroids.add((Centroid)v);
  }
  double mapperCost=ClusteringUtils.totalClusterCost(syntheticData.getFirst(),mapperCentroids);
  double localCost=ClusteringUtils.totalClusterCost(syntheticData.getFirst(),batchCentroids);
  double perPointCost=ClusteringUtils.totalClusterCost(syntheticData.getFirst(),perPointCentroids);
  System.out.printf("[Total cost] Mapper %f [%d] Local %f [%d] Perpoint local %f [%d];" + "[ratio m-vs-l %f] [ratio pp-vs-l %f]\n",mapperCost,mapperCentroids.size(),localCost,batchCentroids.size(),perPointCost,perPointCentroids.size(),mapperCost / localCost,perPointCost / localCost);
  assertEquals("Mapper StreamingKMeans / Batch local StreamingKMeans total cost ratio too far from 1",1.0,mapperCost / localCost,0.8);
  assertEquals("One by one local StreamingKMeans / Batch local StreamingKMeans total cost ratio too high",1.0,perPointCost / localCost,0.8);
}
