@Test public void testGenericMatchingWithFullTypeDifferentiation(){
  DefaultListableBeanFactory bf=new DefaultListableBeanFactory();
  bf.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);
  bf.setAutowireCandidateResolver(new GenericTypeAwareAutowireCandidateResolver());
  RootBeanDefinition bd1=new RootBeanDefinition(NumberStoreFactory.class);
  bd1.setFactoryMethodName("newDoubleStore");
  bf.registerBeanDefinition("store1",bd1);
  RootBeanDefinition bd2=new RootBeanDefinition(NumberStoreFactory.class);
  bd2.setFactoryMethodName("newFloatStore");
  bf.registerBeanDefinition("store2",bd2);
  bf.registerBeanDefinition("numberBean",new RootBeanDefinition(NumberBean.class,RootBeanDefinition.AUTOWIRE_CONSTRUCTOR,false));
  NumberBean nb=bf.getBean(NumberBean.class);
  assertSame(bf.getBean("store1"),nb.getDoubleStore());
  assertSame(bf.getBean("store2"),nb.getFloatStore());
  String[] numberStoreNames=bf.getBeanNamesForType(ResolvableType.forClass(NumberStore.class));
  String[] doubleStoreNames=bf.getBeanNamesForType(ResolvableType.forClassWithGenerics(NumberStore.class,Double.class));
  String[] floatStoreNames=bf.getBeanNamesForType(ResolvableType.forClassWithGenerics(NumberStore.class,Float.class));
  assertEquals(2,numberStoreNames.length);
  assertEquals("store1",numberStoreNames[0]);
  assertEquals("store2",numberStoreNames[1]);
  assertEquals(1,doubleStoreNames.length);
  assertEquals("store1",doubleStoreNames[0]);
  assertEquals(1,floatStoreNames.length);
  assertEquals("store2",floatStoreNames[0]);
  ObjectProvider<NumberStore<?>> numberStoreProvider=bf.getBeanProvider(ResolvableType.forClass(NumberStore.class));
  ObjectProvider<NumberStore<Double>> doubleStoreProvider=bf.getBeanProvider(ResolvableType.forClassWithGenerics(NumberStore.class,Double.class));
  ObjectProvider<NumberStore<Float>> floatStoreProvider=bf.getBeanProvider(ResolvableType.forClassWithGenerics(NumberStore.class,Float.class));
  try {
    numberStoreProvider.getObject();
    fail("Should have thrown NoUniqueBeanDefinitionException");
  }
 catch (  NoUniqueBeanDefinitionException ex) {
  }
  try {
    numberStoreProvider.getIfAvailable();
    fail("Should have thrown NoUniqueBeanDefinitionException");
  }
 catch (  NoUniqueBeanDefinitionException ex) {
  }
  assertNull(numberStoreProvider.getIfUnique());
  assertSame(bf.getBean("store1"),doubleStoreProvider.getObject());
  assertSame(bf.getBean("store1"),doubleStoreProvider.getIfAvailable());
  assertSame(bf.getBean("store1"),doubleStoreProvider.getIfUnique());
  assertSame(bf.getBean("store2"),floatStoreProvider.getObject());
  assertSame(bf.getBean("store2"),floatStoreProvider.getIfAvailable());
  assertSame(bf.getBean("store2"),floatStoreProvider.getIfUnique());
  List<NumberStore<?>> resolved=new ArrayList<>();
  for (  NumberStore<?> instance : numberStoreProvider) {
    resolved.add(instance);
  }
  assertEquals(2,resolved.size());
  assertSame(bf.getBean("store1"),resolved.get(0));
  assertSame(bf.getBean("store2"),resolved.get(1));
  resolved=numberStoreProvider.stream().collect(Collectors.toList());
  assertEquals(2,resolved.size());
  assertSame(bf.getBean("store1"),resolved.get(0));
  assertSame(bf.getBean("store2"),resolved.get(1));
  resolved=numberStoreProvider.orderedStream().collect(Collectors.toList());
  assertEquals(2,resolved.size());
  assertSame(bf.getBean("store2"),resolved.get(0));
  assertSame(bf.getBean("store1"),resolved.get(1));
  resolved=new ArrayList<>();
  for (  NumberStore<Double> instance : doubleStoreProvider) {
    resolved.add(instance);
  }
  assertEquals(1,resolved.size());
  assertTrue(resolved.contains(bf.getBean("store1")));
  resolved=doubleStoreProvider.stream().collect(Collectors.toList());
  assertEquals(1,resolved.size());
  assertTrue(resolved.contains(bf.getBean("store1")));
  resolved=doubleStoreProvider.orderedStream().collect(Collectors.toList());
  assertEquals(1,resolved.size());
  assertTrue(resolved.contains(bf.getBean("store1")));
  resolved=new ArrayList<>();
  for (  NumberStore<Float> instance : floatStoreProvider) {
    resolved.add(instance);
  }
  assertEquals(1,resolved.size());
  assertTrue(resolved.contains(bf.getBean("store2")));
  resolved=floatStoreProvider.stream().collect(Collectors.toList());
  assertEquals(1,resolved.size());
  assertTrue(resolved.contains(bf.getBean("store2")));
  resolved=floatStoreProvider.orderedStream().collect(Collectors.toList());
  assertEquals(1,resolved.size());
  assertTrue(resolved.contains(bf.getBean("store2")));
}
