@Test public void decodeSplitChunks(){
  Flux<DataBuffer> input=Flux.just(this.testMsg1,this.testMsg2).flatMap(msg -> Mono.defer(() -> {
    DataBuffer buffer=this.bufferFactory.allocateBuffer();
    try {
      msg.writeDelimitedTo(buffer.asOutputStream());
      return Mono.just(buffer);
    }
 catch (    IOException e) {
      release(buffer);
      return Mono.error(e);
    }
  }
)).flatMap(buffer -> {
    int len=buffer.readableByteCount() / 2;
    Flux<DataBuffer> result=Flux.just(DataBufferUtils.retain(buffer.slice(0,len)),DataBufferUtils.retain(buffer.slice(len,buffer.readableByteCount() - len)));
    release(buffer);
    return result;
  }
);
  testDecode(input,Msg.class,step -> step.expectNext(this.testMsg1).expectNext(this.testMsg2).verifyComplete());
}
