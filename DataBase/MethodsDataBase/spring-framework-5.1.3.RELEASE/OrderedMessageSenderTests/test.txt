@Test public void test() throws InterruptedException {
  int start=1;
  int end=1000;
  AtomicInteger index=new AtomicInteger(start);
  AtomicReference<Object> result=new AtomicReference<>();
  CountDownLatch latch=new CountDownLatch(1);
  this.channel.subscribe(message -> {
    int expected=index.getAndIncrement();
    Integer actual=(Integer)message.getHeaders().getOrDefault("seq",-1);
    if (actual != expected) {
      result.set("Expected: " + expected + ", but was: "+ actual);
      latch.countDown();
      return;
    }
    if (actual == 100 || actual == 200) {
      try {
        Thread.sleep(200);
      }
 catch (      InterruptedException ex) {
        result.set(ex.toString());
        latch.countDown();
      }
    }
    if (actual == end) {
      result.set("Done");
      latch.countDown();
    }
  }
);
  for (int i=start; i <= end; i++) {
    SimpMessageHeaderAccessor accessor=SimpMessageHeaderAccessor.create(SimpMessageType.MESSAGE);
    accessor.setHeader("seq",i);
    accessor.setLeaveMutable(true);
    this.sender.send(MessageBuilder.createMessage("payload",accessor.getMessageHeaders()));
  }
  latch.await(10,TimeUnit.SECONDS);
  assertEquals("Done",result.get());
}
