@Test public void supportsParameter(){
  resolver=new RequestParamMethodArgumentResolver(null,true);
  MethodParameter param=this.testMethod.annot(requestParam().notRequired("bar")).arg(String.class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annotPresent(RequestParam.class).arg(String[].class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annot(requestParam().name("name")).arg(Map.class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annotPresent(RequestParam.class).arg(MultipartFile.class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annotPresent(RequestParam.class).arg(List.class,MultipartFile.class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annotPresent(RequestParam.class).arg(MultipartFile[].class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annotPresent(RequestParam.class).arg(Part.class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annotPresent(RequestParam.class).arg(List.class,Part.class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annotPresent(RequestParam.class).arg(Part[].class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annot(requestParam().noName()).arg(Map.class);
  assertFalse(resolver.supportsParameter(param));
  param=this.testMethod.annotNotPresent(RequestParam.class).arg(String.class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annotNotPresent().arg(MultipartFile.class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annotNotPresent(RequestParam.class).arg(List.class,MultipartFile.class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annotNotPresent(RequestParam.class).arg(Part.class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annot(requestPart()).arg(MultipartFile.class);
  assertFalse(resolver.supportsParameter(param));
  param=this.testMethod.annot(requestParam()).arg(String.class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annot(requestParam().notRequired()).arg(String.class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annotPresent(RequestParam.class).arg(Optional.class,Integer.class);
  assertTrue(resolver.supportsParameter(param));
  param=this.testMethod.annotPresent(RequestParam.class).arg(Optional.class,MultipartFile.class);
  assertTrue(resolver.supportsParameter(param));
  resolver=new RequestParamMethodArgumentResolver(null,false);
  param=this.testMethod.annotNotPresent(RequestParam.class).arg(String.class);
  assertFalse(resolver.supportsParameter(param));
  param=this.testMethod.annotPresent(RequestPart.class).arg(MultipartFile.class);
  assertFalse(resolver.supportsParameter(param));
}
