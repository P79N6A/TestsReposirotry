@Test public void regexPathElementPatterns(){
  checkError("/{var:[^/]*}",8,PatternMessage.MISSING_CLOSE_CAPTURE);
  checkError("/{var:abc",8,PatternMessage.MISSING_CLOSE_CAPTURE);
  checkError("/{var:a{{1,2}}}",6,PatternMessage.REGEX_PATTERN_SYNTAX_EXCEPTION);
  pathPattern=checkStructure("/{var:\\\\}");
  PathElement next=pathPattern.getHeadSection().next;
  assertEquals(CaptureVariablePathElement.class.getName(),next.getClass().getName());
  assertMatches(pathPattern,"/\\");
  pathPattern=checkStructure("/{var:\\/}");
  next=pathPattern.getHeadSection().next;
  assertEquals(CaptureVariablePathElement.class.getName(),next.getClass().getName());
  assertNoMatch(pathPattern,"/aaa");
  pathPattern=checkStructure("/{var:a{1,2}}");
  next=pathPattern.getHeadSection().next;
  assertEquals(CaptureVariablePathElement.class.getName(),next.getClass().getName());
  pathPattern=checkStructure("/{var:[^\\/]*}");
  next=pathPattern.getHeadSection().next;
  assertEquals(CaptureVariablePathElement.class.getName(),next.getClass().getName());
  PathPattern.PathMatchInfo result=matchAndExtract(pathPattern,"/foo");
  assertEquals("foo",result.getUriVariables().get("var"));
  pathPattern=checkStructure("/{var:\\[*}");
  next=pathPattern.getHeadSection().next;
  assertEquals(CaptureVariablePathElement.class.getName(),next.getClass().getName());
  result=matchAndExtract(pathPattern,"/[[[");
  assertEquals("[[[",result.getUriVariables().get("var"));
  pathPattern=checkStructure("/{var:[\\{]*}");
  next=pathPattern.getHeadSection().next;
  assertEquals(CaptureVariablePathElement.class.getName(),next.getClass().getName());
  result=matchAndExtract(pathPattern,"/{{{");
  assertEquals("{{{",result.getUriVariables().get("var"));
  pathPattern=checkStructure("/{var:[\\}]*}");
  next=pathPattern.getHeadSection().next;
  assertEquals(CaptureVariablePathElement.class.getName(),next.getClass().getName());
  result=matchAndExtract(pathPattern,"/}}}");
  assertEquals("}}}",result.getUriVariables().get("var"));
  pathPattern=checkStructure("*");
  assertEquals(WildcardPathElement.class.getName(),pathPattern.getHeadSection().getClass().getName());
  checkStructure("/*");
  checkStructure("/*/");
  checkStructure("*/");
  checkStructure("/*/");
  pathPattern=checkStructure("/*a*/");
  next=pathPattern.getHeadSection().next;
  assertEquals(RegexPathElement.class.getName(),next.getClass().getName());
  pathPattern=checkStructure("*/");
  assertEquals(WildcardPathElement.class.getName(),pathPattern.getHeadSection().getClass().getName());
  checkError("{foo}_{foo}",0,PatternMessage.ILLEGAL_DOUBLE_CAPTURE,"foo");
  checkError("/{bar}/{bar}",7,PatternMessage.ILLEGAL_DOUBLE_CAPTURE,"bar");
  checkError("/{bar}/{bar}_{foo}",7,PatternMessage.ILLEGAL_DOUBLE_CAPTURE,"bar");
  pathPattern=checkStructure("{symbolicName:[\\p{L}\\.]+}-sources-{version:[\\p{N}\\.]+}.jar");
  assertEquals(RegexPathElement.class.getName(),pathPattern.getHeadSection().getClass().getName());
}
