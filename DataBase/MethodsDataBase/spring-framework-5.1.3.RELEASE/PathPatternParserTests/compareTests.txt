@Test public void compareTests(){
  PathPattern p1, p2, p3;
  p1=parse("{a}");
  p2=parse("{a}/{b}");
  p3=parse("{a}/{b}/{c}");
  assertEquals(-1,p1.compareTo(p2));
  List<PathPattern> patterns=new ArrayList<>();
  patterns.add(p2);
  patterns.add(p3);
  patterns.add(p1);
  Collections.sort(patterns);
  assertEquals(p1,patterns.get(0));
  p1=parse("/a/b/c");
  p2=parse("/a/boo/c/doo");
  p3=parse("/asdjflaksjdfjasdf");
  assertEquals(1,p1.compareTo(p2));
  patterns=new ArrayList<>();
  patterns.add(p2);
  patterns.add(p3);
  patterns.add(p1);
  Collections.sort(patterns);
  assertEquals(p3,patterns.get(0));
  p1=parse("/*");
  p2=parse("/*/*");
  p3=parse("/*/*/*_*");
  assertEquals(-1,p1.compareTo(p2));
  patterns=new ArrayList<>();
  patterns.add(p2);
  patterns.add(p3);
  patterns.add(p1);
  Collections.sort(patterns);
  assertEquals(p1,patterns.get(0));
  p1=parse("{*foobar}");
  p2=parse("{*goo}");
  assertTrue(p1.compareTo(p2) != 0);
  p1=parse("/{*foobar}");
  p2=parse("/abc/{*ww}");
  assertEquals(+1,p1.compareTo(p2));
  assertEquals(-1,p2.compareTo(p1));
  p3=parse("/this/that/theother");
  assertTrue(p1.isCatchAll());
  assertTrue(p2.isCatchAll());
  assertFalse(p3.isCatchAll());
  patterns=new ArrayList<>();
  patterns.add(p2);
  patterns.add(p3);
  patterns.add(p1);
  Collections.sort(patterns);
  assertEquals(p3,patterns.get(0));
  assertEquals(p2,patterns.get(1));
}
