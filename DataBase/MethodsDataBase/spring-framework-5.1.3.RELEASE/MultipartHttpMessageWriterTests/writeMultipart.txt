@Test public void writeMultipart() throws Exception {
  Resource logo=new ClassPathResource("/org/springframework/http/converter/logo.jpg");
  Resource utf8=new ClassPathResource("/org/springframework/http/converter/logo.jpg"){
    @Override public String getFilename(){
      return "Hall\u00F6le.jpg";
    }
  }
;
  Publisher<String> publisher=Flux.just("foo","bar","baz");
  MultipartBodyBuilder bodyBuilder=new MultipartBodyBuilder();
  bodyBuilder.part("name 1","value 1");
  bodyBuilder.part("name 2","value 2+1");
  bodyBuilder.part("name 2","value 2+2");
  bodyBuilder.part("logo",logo);
  bodyBuilder.part("utf8",utf8);
  bodyBuilder.part("json",new Foo("bar"),MediaType.APPLICATION_JSON_UTF8);
  bodyBuilder.asyncPart("publisher",publisher,String.class);
  Mono<MultiValueMap<String,HttpEntity<?>>> result=Mono.just(bodyBuilder.build());
  Map<String,Object> hints=Collections.emptyMap();
  this.writer.write(result,null,MediaType.MULTIPART_FORM_DATA,this.response,hints).block(Duration.ofSeconds(5));
  MultiValueMap<String,Part> requestParts=parse(hints);
  assertEquals(6,requestParts.size());
  Part part=requestParts.getFirst("name 1");
  assertTrue(part instanceof FormFieldPart);
  assertEquals("name 1",part.name());
  assertEquals("value 1",((FormFieldPart)part).value());
  List<Part> parts2=requestParts.get("name 2");
  assertEquals(2,parts2.size());
  part=parts2.get(0);
  assertTrue(part instanceof FormFieldPart);
  assertEquals("name 2",part.name());
  assertEquals("value 2+1",((FormFieldPart)part).value());
  part=parts2.get(1);
  assertTrue(part instanceof FormFieldPart);
  assertEquals("name 2",part.name());
  assertEquals("value 2+2",((FormFieldPart)part).value());
  part=requestParts.getFirst("logo");
  assertTrue(part instanceof FilePart);
  assertEquals("logo",part.name());
  assertEquals("logo.jpg",((FilePart)part).filename());
  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());
  assertEquals(logo.getFile().length(),part.headers().getContentLength());
  part=requestParts.getFirst("utf8");
  assertTrue(part instanceof FilePart);
  assertEquals("utf8",part.name());
  assertEquals("Hall\u00F6le.jpg",((FilePart)part).filename());
  assertEquals(MediaType.IMAGE_JPEG,part.headers().getContentType());
  assertEquals(utf8.getFile().length(),part.headers().getContentLength());
  part=requestParts.getFirst("json");
  assertEquals("json",part.name());
  assertEquals(MediaType.APPLICATION_JSON_UTF8,part.headers().getContentType());
  String value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);
  assertEquals("{\"bar\":\"bar\"}",value);
  part=requestParts.getFirst("publisher");
  assertEquals("publisher",part.name());
  value=StringDecoder.textPlainOnly(false).decodeToMono(part.content(),ResolvableType.forClass(String.class),MediaType.TEXT_PLAIN,Collections.emptyMap()).block(Duration.ZERO);
  assertEquals("foobarbaz",value);
}
