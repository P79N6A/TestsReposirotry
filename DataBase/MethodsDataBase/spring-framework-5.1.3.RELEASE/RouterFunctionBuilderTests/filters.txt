@Test public void filters(){
  AtomicInteger filterCount=new AtomicInteger();
  RouterFunction<?> route=RouterFunctions.route().GET("/foo",request -> ServerResponse.ok().build()).GET("/bar",request -> Mono.error(new IllegalStateException())).before(request -> {
    int count=filterCount.getAndIncrement();
    assertEquals(0,count);
    return request;
  }
).after((request,response) -> {
    int count=filterCount.getAndIncrement();
    assertEquals(3,count);
    return response;
  }
).filter((request,next) -> {
    int count=filterCount.getAndIncrement();
    assertEquals(1,count);
    Mono<ServerResponse> responseMono=next.handle(request);
    count=filterCount.getAndIncrement();
    assertEquals(2,count);
    return responseMono;
  }
).onError(IllegalStateException.class,(e,request) -> ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR).build()).build();
  MockServerRequest fooRequest=MockServerRequest.builder().method(HttpMethod.GET).uri(URI.create("http://localhost/foo")).build();
  Mono<ServerResponse> fooResponseMono=route.route(fooRequest).flatMap(handlerFunction -> handlerFunction.handle(fooRequest));
  StepVerifier.create(fooResponseMono).consumeNextWith(serverResponse -> {
    assertEquals(4,filterCount.get());
  }
).verifyComplete();
  filterCount.set(0);
  MockServerRequest barRequest=MockServerRequest.builder().method(HttpMethod.GET).uri(URI.create("http://localhost/bar")).build();
  Mono<Integer> barResponseMono=route.route(barRequest).flatMap(handlerFunction -> handlerFunction.handle(barRequest)).map(ServerResponse::statusCode).map(HttpStatus::value);
  StepVerifier.create(barResponseMono).expectNext(500).verifyComplete();
}
