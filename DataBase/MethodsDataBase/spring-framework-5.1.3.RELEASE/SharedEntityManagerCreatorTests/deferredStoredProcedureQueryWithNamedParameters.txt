@Test public void deferredStoredProcedureQueryWithNamedParameters(){
  EntityManagerFactory emf=mock(EntityManagerFactory.class);
  EntityManager targetEm=mock(EntityManager.class);
  StoredProcedureQuery query=mock(StoredProcedureQuery.class);
  given(emf.createEntityManager()).willReturn(targetEm);
  given(targetEm.createStoredProcedureQuery("x")).willReturn(query);
  willReturn("y").given(query).getOutputParameterValue("a");
  willReturn("z").given(query).getOutputParameterValue("c");
  given(targetEm.isOpen()).willReturn(true);
  EntityManager em=SharedEntityManagerCreator.createSharedEntityManager(emf);
  StoredProcedureQuery spq=em.createStoredProcedureQuery("x");
  spq.registerStoredProcedureParameter("a",String.class,ParameterMode.OUT);
  spq.registerStoredProcedureParameter("b",Number.class,ParameterMode.IN);
  spq.registerStoredProcedureParameter("c",Object.class,ParameterMode.INOUT);
  spq.execute();
  assertEquals("y",spq.getOutputParameterValue("a"));
  try {
    spq.getOutputParameterValue("b");
    fail("Should have thrown IllegalArgumentException");
  }
 catch (  IllegalArgumentException ex) {
  }
  assertEquals("z",spq.getOutputParameterValue("c"));
  verify(query).registerStoredProcedureParameter("a",String.class,ParameterMode.OUT);
  verify(query).registerStoredProcedureParameter("b",Number.class,ParameterMode.IN);
  verify(query).registerStoredProcedureParameter("c",Object.class,ParameterMode.INOUT);
  verify(query).execute();
  verify(targetEm).close();
  verifyNoMoreInteractions(query);
  verifyNoMoreInteractions(targetEm);
}
