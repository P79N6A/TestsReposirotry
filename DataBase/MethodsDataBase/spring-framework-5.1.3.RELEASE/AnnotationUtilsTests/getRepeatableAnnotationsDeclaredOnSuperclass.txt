@Test public void getRepeatableAnnotationsDeclaredOnSuperclass(){
  final Class<?> clazz=SubMyRepeatableClass.class;
  final List<String> expectedValuesJava=asList("A","B","C");
  final List<String> expectedValuesSpring=asList("A","B","C","meta1");
  MyRepeatable[] array=clazz.getAnnotationsByType(MyRepeatable.class);
  assertNotNull(array);
  List<String> values=stream(array).map(MyRepeatable::value).collect(toList());
  assertThat(values,is(expectedValuesJava));
  Set<MyRepeatable> set=getRepeatableAnnotations(clazz,MyRepeatable.class,MyRepeatableContainer.class);
  assertNotNull(set);
  values=set.stream().map(MyRepeatable::value).collect(toList());
  assertThat(values,is(expectedValuesSpring));
  set=getRepeatableAnnotations(clazz,MyRepeatable.class);
  assertNotNull(set);
  values=set.stream().map(MyRepeatable::value).collect(toList());
  assertThat(values,is(expectedValuesSpring));
}
