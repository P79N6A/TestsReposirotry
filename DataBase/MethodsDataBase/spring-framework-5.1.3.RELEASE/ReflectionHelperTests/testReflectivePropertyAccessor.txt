@Test public void testReflectivePropertyAccessor() throws Exception {
  ReflectivePropertyAccessor rpa=new ReflectivePropertyAccessor();
  Tester t=new Tester();
  t.setProperty("hello");
  EvaluationContext ctx=new StandardEvaluationContext(t);
  assertTrue(rpa.canRead(ctx,t,"property"));
  assertEquals("hello",rpa.read(ctx,t,"property").getValue());
  assertEquals("hello",rpa.read(ctx,t,"property").getValue());
  assertTrue(rpa.canRead(ctx,t,"field"));
  assertEquals(3,rpa.read(ctx,t,"field").getValue());
  assertEquals(3,rpa.read(ctx,t,"field").getValue());
  assertTrue(rpa.canWrite(ctx,t,"property"));
  rpa.write(ctx,t,"property","goodbye");
  rpa.write(ctx,t,"property","goodbye");
  assertTrue(rpa.canWrite(ctx,t,"field"));
  rpa.write(ctx,t,"field",12);
  rpa.write(ctx,t,"field",12);
  rpa.write(ctx,t,"field2",3);
  rpa.write(ctx,t,"property2","doodoo");
  assertEquals(3,rpa.read(ctx,t,"field2").getValue());
  assertEquals(0,rpa.read(ctx,t,"field3").getValue());
  assertEquals("doodoo",rpa.read(ctx,t,"property3").getValue());
  assertEquals(0,rpa.read(ctx,t,"field3").getValue());
  assertEquals(false,rpa.read(ctx,t,"property4").getValue());
  assertTrue(rpa.canRead(ctx,t,"property4"));
  assertEquals("iD",rpa.read(ctx,t,"iD").getValue());
  assertTrue(rpa.canRead(ctx,t,"iD"));
  assertEquals("id",rpa.read(ctx,t,"id").getValue());
  assertTrue(rpa.canRead(ctx,t,"id"));
  assertEquals("ID",rpa.read(ctx,t,"ID").getValue());
  assertTrue(rpa.canRead(ctx,t,"ID"));
  assertEquals("id",rpa.read(ctx,t,"Id").getValue());
  assertTrue(rpa.canRead(ctx,t,"Id"));
  assertEquals("xyZ",rpa.read(ctx,t,"xyZ").getValue());
  assertTrue(rpa.canRead(ctx,t,"xyZ"));
  assertEquals("xY",rpa.read(ctx,t,"xY").getValue());
  assertTrue(rpa.canRead(ctx,t,"xY"));
  rpa.write(ctx,t,"pEBS","Test String");
  assertEquals("Test String",rpa.read(ctx,t,"pEBS").getValue());
}
