@Test public void completeSetup() throws JsonMappingException {
  NopAnnotationIntrospector annotationIntrospector=NopAnnotationIntrospector.instance;
  Map<Class<?>,JsonDeserializer<?>> deserializerMap=new HashMap<>();
  JsonDeserializer<Date> deserializer=new DateDeserializers.DateDeserializer();
  deserializerMap.put(Date.class,deserializer);
  JsonSerializer<Class<?>> serializer1=new ClassSerializer();
  JsonSerializer<Number> serializer2=new NumberSerializer(Integer.class);
  Jackson2ObjectMapperBuilder builder=Jackson2ObjectMapperBuilder.json().modules(new ArrayList<>()).serializers(serializer1).serializersByType(Collections.singletonMap(Boolean.class,serializer2)).deserializersByType(deserializerMap).annotationIntrospector(annotationIntrospector).featuresToEnable(SerializationFeature.FAIL_ON_EMPTY_BEANS,DeserializationFeature.UNWRAP_ROOT_VALUE,JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER,JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS).featuresToDisable(MapperFeature.AUTO_DETECT_GETTERS,MapperFeature.AUTO_DETECT_FIELDS,JsonParser.Feature.AUTO_CLOSE_SOURCE,JsonGenerator.Feature.QUOTE_FIELD_NAMES).serializationInclusion(JsonInclude.Include.NON_NULL);
  ObjectMapper mapper=new ObjectMapper();
  builder.configure(mapper);
  assertTrue(getSerializerFactoryConfig(mapper).hasSerializers());
  assertTrue(getDeserializerFactoryConfig(mapper).hasDeserializers());
  Serializers serializers=getSerializerFactoryConfig(mapper).serializers().iterator().next();
  assertSame(serializer1,serializers.findSerializer(null,SimpleType.construct(Class.class),null));
  assertSame(serializer2,serializers.findSerializer(null,SimpleType.construct(Boolean.class),null));
  assertNull(serializers.findSerializer(null,SimpleType.construct(Number.class),null));
  Deserializers deserializers=getDeserializerFactoryConfig(mapper).deserializers().iterator().next();
  assertSame(deserializer,deserializers.findBeanDeserializer(SimpleType.construct(Date.class),null,null));
  assertSame(annotationIntrospector,mapper.getSerializationConfig().getAnnotationIntrospector());
  assertSame(annotationIntrospector,mapper.getDeserializationConfig().getAnnotationIntrospector());
  assertTrue(mapper.getSerializationConfig().isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS));
  assertTrue(mapper.getDeserializationConfig().isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE));
  assertTrue(mapper.getFactory().isEnabled(JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER));
  assertTrue(mapper.getFactory().isEnabled(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));
  assertFalse(mapper.getSerializationConfig().isEnabled(MapperFeature.AUTO_DETECT_GETTERS));
  assertFalse(mapper.getDeserializationConfig().isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION));
  assertFalse(mapper.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));
  assertFalse(mapper.getDeserializationConfig().isEnabled(MapperFeature.AUTO_DETECT_FIELDS));
  assertFalse(mapper.getFactory().isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));
  assertFalse(mapper.getFactory().isEnabled(JsonGenerator.Feature.QUOTE_FIELD_NAMES));
  assertSame(JsonInclude.Include.NON_NULL,mapper.getSerializationConfig().getSerializationInclusion());
}
