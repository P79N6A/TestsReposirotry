@Test public void multipartData(){
  String data="--12345\r\n" + "Content-Disposition: form-data; name=\"foo\"\r\n" + "\r\n"+ "bar\r\n"+ "--12345\r\n"+ "Content-Disposition: form-data; name=\"baz\"\r\n"+ "\r\n"+ "qux\r\n"+ "--12345--\r\n";
  DefaultDataBufferFactory factory=new DefaultDataBufferFactory();
  DefaultDataBuffer dataBuffer=factory.wrap(ByteBuffer.wrap(data.getBytes(StandardCharsets.UTF_8)));
  Flux<DataBuffer> body=Flux.just(dataBuffer);
  HttpHeaders httpHeaders=new HttpHeaders();
  httpHeaders.set(HttpHeaders.CONTENT_TYPE,"multipart/form-data; boundary=12345");
  MockServerHttpRequest mockRequest=MockServerHttpRequest.method(HttpMethod.GET,"http://example.com").headers(httpHeaders).body(body);
  DefaultServerRequest request=new DefaultServerRequest(MockServerWebExchange.from(mockRequest),Collections.emptyList());
  Mono<MultiValueMap<String,Part>> resultData=request.multipartData();
  StepVerifier.create(resultData).consumeNextWith(formData -> {
    assertEquals(2,formData.size());
    Part part=formData.getFirst("foo");
    assertTrue(part instanceof FormFieldPart);
    FormFieldPart formFieldPart=(FormFieldPart)part;
    assertEquals("bar",formFieldPart.value());
    part=formData.getFirst("baz");
    assertTrue(part instanceof FormFieldPart);
    formFieldPart=(FormFieldPart)part;
    assertEquals("qux",formFieldPart.value());
  }
).verifyComplete();
}
