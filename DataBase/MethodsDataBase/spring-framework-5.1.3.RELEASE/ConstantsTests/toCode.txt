@Test public void toCode(){
  Constants c=new Constants(A.class);
  assertEquals("DOG",c.toCode(Integer.valueOf(0),""));
  assertEquals("DOG",c.toCode(Integer.valueOf(0),"D"));
  assertEquals("DOG",c.toCode(Integer.valueOf(0),"DO"));
  assertEquals("DOG",c.toCode(Integer.valueOf(0),"DoG"));
  assertEquals("DOG",c.toCode(Integer.valueOf(0),null));
  assertEquals("CAT",c.toCode(Integer.valueOf(66),""));
  assertEquals("CAT",c.toCode(Integer.valueOf(66),"C"));
  assertEquals("CAT",c.toCode(Integer.valueOf(66),"ca"));
  assertEquals("CAT",c.toCode(Integer.valueOf(66),"cAt"));
  assertEquals("CAT",c.toCode(Integer.valueOf(66),null));
  assertEquals("S1",c.toCode("",""));
  assertEquals("S1",c.toCode("","s"));
  assertEquals("S1",c.toCode("","s1"));
  assertEquals("S1",c.toCode("",null));
  try {
    c.toCode("bogus","bogus");
    fail("Should have thrown ConstantException");
  }
 catch (  Constants.ConstantException expected) {
  }
  try {
    c.toCode("bogus",null);
    fail("Should have thrown ConstantException");
  }
 catch (  Constants.ConstantException expected) {
  }
  assertEquals("MY_PROPERTY_NO",c.toCodeForProperty(Integer.valueOf(1),"myProperty"));
  assertEquals("MY_PROPERTY_YES",c.toCodeForProperty(Integer.valueOf(2),"myProperty"));
  try {
    c.toCodeForProperty("bogus","bogus");
    fail("Should have thrown ConstantException");
  }
 catch (  Constants.ConstantException expected) {
  }
  assertEquals("DOG",c.toCodeForSuffix(Integer.valueOf(0),""));
  assertEquals("DOG",c.toCodeForSuffix(Integer.valueOf(0),"G"));
  assertEquals("DOG",c.toCodeForSuffix(Integer.valueOf(0),"OG"));
  assertEquals("DOG",c.toCodeForSuffix(Integer.valueOf(0),"DoG"));
  assertEquals("DOG",c.toCodeForSuffix(Integer.valueOf(0),null));
  assertEquals("CAT",c.toCodeForSuffix(Integer.valueOf(66),""));
  assertEquals("CAT",c.toCodeForSuffix(Integer.valueOf(66),"T"));
  assertEquals("CAT",c.toCodeForSuffix(Integer.valueOf(66),"at"));
  assertEquals("CAT",c.toCodeForSuffix(Integer.valueOf(66),"cAt"));
  assertEquals("CAT",c.toCodeForSuffix(Integer.valueOf(66),null));
  assertEquals("S1",c.toCodeForSuffix("",""));
  assertEquals("S1",c.toCodeForSuffix("","1"));
  assertEquals("S1",c.toCodeForSuffix("","s1"));
  assertEquals("S1",c.toCodeForSuffix("",null));
  try {
    c.toCodeForSuffix("bogus","bogus");
    fail("Should have thrown ConstantException");
  }
 catch (  Constants.ConstantException expected) {
  }
  try {
    c.toCodeForSuffix("bogus",null);
    fail("Should have thrown ConstantException");
  }
 catch (  Constants.ConstantException expected) {
  }
}
