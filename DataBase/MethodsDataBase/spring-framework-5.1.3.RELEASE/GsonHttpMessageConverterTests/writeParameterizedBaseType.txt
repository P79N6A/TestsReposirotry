@Test @SuppressWarnings("unchecked") public void writeParameterizedBaseType() throws Exception {
  ParameterizedTypeReference<List<MyBean>> beansList=new ParameterizedTypeReference<List<MyBean>>(){
  }
;
  ParameterizedTypeReference<List<MyBase>> baseList=new ParameterizedTypeReference<List<MyBase>>(){
  }
;
  String body="[{\"bytes\":[1,2],\"array\":[\"Foo\",\"Bar\"]," + "\"number\":42,\"string\":\"Foo\",\"bool\":true,\"fraction\":42.0}]";
  MockHttpInputMessage inputMessage=new MockHttpInputMessage(body.getBytes(StandardCharsets.UTF_8));
  inputMessage.getHeaders().setContentType(new MediaType("application","json"));
  List<MyBean> results=(List<MyBean>)converter.read(beansList.getType(),null,inputMessage);
  assertEquals(1,results.size());
  MyBean result=results.get(0);
  assertEquals("Foo",result.getString());
  assertEquals(42,result.getNumber());
  assertEquals(42F,result.getFraction(),0F);
  assertArrayEquals(new String[]{"Foo","Bar"},result.getArray());
  assertTrue(result.isBool());
  assertArrayEquals(new byte[]{0x1,0x2},result.getBytes());
  MockHttpOutputMessage outputMessage=new MockHttpOutputMessage();
  converter.write(results,baseList.getType(),new MediaType("application","json"),outputMessage);
  JSONAssert.assertEquals(body,outputMessage.getBodyAsString(StandardCharsets.UTF_8),true);
}
