@Test public void ternaryOperator_SPR15192(){
  SpelParserConfiguration configuration=new SpelParserConfiguration(SpelCompilerMode.IMMEDIATE,null);
  Expression exp;
  StandardEvaluationContext context=new StandardEvaluationContext();
  context.setVariable("map",Collections.singletonMap("foo","qux"));
  exp=new SpelExpressionParser(configuration).parseExpression("bar(#map['foo'] != null ? #map['foo'] : 'qux')");
  assertEquals("QUX",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("QUX",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("3==3?3:'foo'");
  assertEquals("3",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("3",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("3!=3?3:'foo'");
  assertEquals("foo",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("foo",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("3==3?3L:'foo'");
  assertEquals("3",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("3",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("3!=3?3L:'foo'");
  assertEquals("foo",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("foo",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("''==''?'abc':4L");
  assertEquals("abc",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("abc",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("3==3?null:4L");
  assertEquals(null,exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals(null,exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("#x==#x?50:'foo'");
  context.setVariable("x",50);
  assertEquals("50",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("50",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("#x!=#x?50:'foo'");
  context.setVariable("x",null);
  assertEquals("foo",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("foo",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("#x==#x?'1,2,3':'foo'");
  context.setVariable("x",new int[]{1,2,3});
  assertEquals("1,2,3",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("1,2,3",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
}
