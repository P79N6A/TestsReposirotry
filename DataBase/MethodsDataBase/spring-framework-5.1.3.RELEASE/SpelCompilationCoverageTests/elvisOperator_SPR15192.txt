@Test public void elvisOperator_SPR15192(){
  SpelParserConfiguration configuration=new SpelParserConfiguration(SpelCompilerMode.IMMEDIATE,null);
  Expression exp;
  exp=new SpelExpressionParser(configuration).parseExpression("bar()");
  assertEquals("BAR",exp.getValue(new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("BAR",exp.getValue(new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("bar('baz')");
  assertEquals("BAZ",exp.getValue(new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("BAZ",exp.getValue(new Foo(),String.class));
  assertIsCompiled(exp);
  StandardEvaluationContext context=new StandardEvaluationContext();
  context.setVariable("map",Collections.singletonMap("foo","qux"));
  exp=new SpelExpressionParser(configuration).parseExpression("bar(#map['foo'])");
  assertEquals("QUX",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("QUX",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("bar(#map['foo'] ?: 'qux')");
  assertEquals("QUX",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("QUX",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("3?:'foo'");
  assertEquals("3",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("3",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("3L?:'foo'");
  assertEquals("3",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("3",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("''?:4L");
  assertEquals("4",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("4",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("null?:4L");
  assertEquals("4",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("4",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("#x?:'foo'");
  context.setVariable("x",50);
  assertEquals("50",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("50",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("#x?:'foo'");
  context.setVariable("x",null);
  assertEquals("foo",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("foo",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
  exp=new SpelExpressionParser(configuration).parseExpression("#x?:'foo'");
  context.setVariable("x",new int[]{1,2,3});
  assertEquals("1,2,3",exp.getValue(context,new Foo(),String.class));
  assertCanCompile(exp);
  assertEquals("1,2,3",exp.getValue(context,new Foo(),String.class));
  assertIsCompiled(exp);
}
