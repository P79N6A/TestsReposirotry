@Test public void testGetBeanByTypeInstanceWithPrimary(){
  DefaultListableBeanFactory lbf=new DefaultListableBeanFactory();
  RootBeanDefinition bd1=createConstructorDependencyBeanDefinition(99);
  RootBeanDefinition bd2=createConstructorDependencyBeanDefinition(43);
  bd2.setPrimary(true);
  lbf.registerBeanDefinition("bd1",bd1);
  lbf.registerBeanDefinition("bd2",bd2);
  ConstructorDependency bean=lbf.getBean(ConstructorDependency.class);
  assertThat(bean.beanName,equalTo("bd2"));
  assertThat(bean.spouseAge,equalTo(43));
  bean=lbf.getBean(ConstructorDependency.class,42);
  assertThat(bean.beanName,equalTo("bd2"));
  assertThat(bean.spouseAge,equalTo(42));
  ObjectProvider<ConstructorDependency> provider=lbf.getBeanProvider(ConstructorDependency.class);
  bean=provider.getObject();
  assertThat(bean.beanName,equalTo("bd2"));
  assertThat(bean.spouseAge,equalTo(43));
  bean=provider.getObject(42);
  assertThat(bean.beanName,equalTo("bd2"));
  assertThat(bean.spouseAge,equalTo(42));
  bean=provider.getIfAvailable();
  assertThat(bean.beanName,equalTo("bd2"));
  assertThat(bean.spouseAge,equalTo(43));
  bean=provider.getIfUnique();
  assertThat(bean.beanName,equalTo("bd2"));
  assertThat(bean.spouseAge,equalTo(43));
  Set<Object> resolved=new HashSet<>();
  for (  ConstructorDependency instance : provider) {
    resolved.add(instance);
  }
  assertEquals(2,resolved.size());
  assertTrue(resolved.contains(lbf.getBean("bd1")));
  assertTrue(resolved.contains(lbf.getBean("bd2")));
  resolved=new HashSet<>();
  provider.forEach(resolved::add);
  assertEquals(2,resolved.size());
  assertTrue(resolved.contains(lbf.getBean("bd1")));
  assertTrue(resolved.contains(lbf.getBean("bd2")));
  resolved=provider.stream().collect(Collectors.toSet());
  assertEquals(2,resolved.size());
  assertTrue(resolved.contains(lbf.getBean("bd1")));
  assertTrue(resolved.contains(lbf.getBean("bd2")));
}
