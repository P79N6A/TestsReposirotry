@Test public void testGetBeanByTypeInstanceWithAmbiguity(){
  DefaultListableBeanFactory lbf=new DefaultListableBeanFactory();
  RootBeanDefinition bd1=createConstructorDependencyBeanDefinition(99);
  RootBeanDefinition bd2=new RootBeanDefinition(ConstructorDependency.class);
  bd2.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);
  bd2.getConstructorArgumentValues().addGenericArgumentValue("43");
  lbf.registerBeanDefinition("bd1",bd1);
  lbf.registerBeanDefinition("bd2",bd2);
  try {
    lbf.getBean(ConstructorDependency.class);
    fail("Should have thrown NoUniqueBeanDefinitionException");
  }
 catch (  NoUniqueBeanDefinitionException ex) {
  }
  try {
    lbf.getBean(ConstructorDependency.class,42);
    fail("Should have thrown NoUniqueBeanDefinitionException");
  }
 catch (  NoUniqueBeanDefinitionException ex) {
  }
  ObjectProvider<ConstructorDependency> provider=lbf.getBeanProvider(ConstructorDependency.class);
  try {
    provider.getObject();
    fail("Should have thrown NoUniqueBeanDefinitionException");
  }
 catch (  NoUniqueBeanDefinitionException ex) {
  }
  try {
    provider.getObject(42);
    fail("Should have thrown NoUniqueBeanDefinitionException");
  }
 catch (  NoUniqueBeanDefinitionException ex) {
  }
  try {
    provider.getIfAvailable();
    fail("Should have thrown NoUniqueBeanDefinitionException");
  }
 catch (  NoUniqueBeanDefinitionException ex) {
  }
  assertNull(provider.getIfUnique());
  Set<Object> resolved=new HashSet<>();
  for (  ConstructorDependency instance : provider) {
    resolved.add(instance);
  }
  assertEquals(2,resolved.size());
  assertTrue(resolved.contains(lbf.getBean("bd1")));
  assertTrue(resolved.contains(lbf.getBean("bd2")));
  resolved=new HashSet<>();
  provider.forEach(resolved::add);
  assertEquals(2,resolved.size());
  assertTrue(resolved.contains(lbf.getBean("bd1")));
  assertTrue(resolved.contains(lbf.getBean("bd2")));
  resolved=provider.stream().collect(Collectors.toSet());
  assertEquals(2,resolved.size());
  assertTrue(resolved.contains(lbf.getBean("bd1")));
  assertTrue(resolved.contains(lbf.getBean("bd2")));
}
