@Test public void testObjectProviderInjectionWithPrototype(){
  bf.registerBeanDefinition("annotatedBean",new RootBeanDefinition(ObjectProviderInjectionBean.class));
  RootBeanDefinition tbd=new RootBeanDefinition(TestBean.class);
  tbd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE);
  bf.registerBeanDefinition("testBean",tbd);
  ObjectProviderInjectionBean bean=(ObjectProviderInjectionBean)bf.getBean("annotatedBean");
  assertEquals(bf.getBean("testBean"),bean.getTestBean());
  assertEquals(bf.getBean("testBean","myName"),bean.getTestBean("myName"));
  assertEquals(bf.getBean("testBean"),bean.getOptionalTestBean());
  assertEquals(bf.getBean("testBean"),bean.getOptionalTestBeanWithDefault());
  assertEquals(bf.getBean("testBean"),bean.consumeOptionalTestBean());
  assertEquals(bf.getBean("testBean"),bean.getUniqueTestBean());
  assertEquals(bf.getBean("testBean"),bean.getUniqueTestBeanWithDefault());
  assertEquals(bf.getBean("testBean"),bean.consumeUniqueTestBean());
  List<?> testBeans=bean.iterateTestBeans();
  assertEquals(1,testBeans.size());
  assertTrue(testBeans.contains(bf.getBean("testBean")));
  testBeans=bean.forEachTestBeans();
  assertEquals(1,testBeans.size());
  assertTrue(testBeans.contains(bf.getBean("testBean")));
  testBeans=bean.streamTestBeans();
  assertEquals(1,testBeans.size());
  assertTrue(testBeans.contains(bf.getBean("testBean")));
  testBeans=bean.sortedTestBeans();
  assertEquals(1,testBeans.size());
  assertTrue(testBeans.contains(bf.getBean("testBean")));
}
