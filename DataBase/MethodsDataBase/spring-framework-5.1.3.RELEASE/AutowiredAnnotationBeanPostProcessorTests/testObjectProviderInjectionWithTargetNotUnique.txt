@Test public void testObjectProviderInjectionWithTargetNotUnique(){
  bf.registerBeanDefinition("annotatedBean",new RootBeanDefinition(ObjectProviderInjectionBean.class));
  bf.registerBeanDefinition("testBean1",new RootBeanDefinition(TestBean.class));
  bf.registerBeanDefinition("testBean2",new RootBeanDefinition(TestBean.class));
  ObjectProviderInjectionBean bean=(ObjectProviderInjectionBean)bf.getBean("annotatedBean");
  try {
    bean.getTestBean();
    fail("Should have thrown NoUniqueBeanDefinitionException");
  }
 catch (  NoUniqueBeanDefinitionException ex) {
  }
  try {
    bean.getOptionalTestBean();
    fail("Should have thrown NoUniqueBeanDefinitionException");
  }
 catch (  NoUniqueBeanDefinitionException ex) {
  }
  try {
    bean.consumeOptionalTestBean();
    fail("Should have thrown NoUniqueBeanDefinitionException");
  }
 catch (  NoUniqueBeanDefinitionException ex) {
  }
  assertNull(bean.getUniqueTestBean());
  assertNull(bean.consumeUniqueTestBean());
  List<?> testBeans=bean.iterateTestBeans();
  assertEquals(2,testBeans.size());
  assertSame(bf.getBean("testBean1"),testBeans.get(0));
  assertSame(bf.getBean("testBean2"),testBeans.get(1));
  testBeans=bean.forEachTestBeans();
  assertEquals(2,testBeans.size());
  assertSame(bf.getBean("testBean1"),testBeans.get(0));
  assertSame(bf.getBean("testBean2"),testBeans.get(1));
  testBeans=bean.streamTestBeans();
  assertEquals(2,testBeans.size());
  assertSame(bf.getBean("testBean1"),testBeans.get(0));
  assertSame(bf.getBean("testBean2"),testBeans.get(1));
  testBeans=bean.sortedTestBeans();
  assertEquals(2,testBeans.size());
  assertSame(bf.getBean("testBean1"),testBeans.get(0));
  assertSame(bf.getBean("testBean2"),testBeans.get(1));
}
