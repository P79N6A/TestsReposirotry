@Test public void testObjectProviderInjectionWithTargetPrimary(){
  bf.registerBeanDefinition("annotatedBean",new RootBeanDefinition(ObjectProviderInjectionBean.class));
  RootBeanDefinition tb1=new RootBeanDefinition(TestBeanFactory.class);
  tb1.setFactoryMethodName("newTestBean1");
  tb1.setPrimary(true);
  bf.registerBeanDefinition("testBean1",tb1);
  RootBeanDefinition tb2=new RootBeanDefinition(TestBeanFactory.class);
  tb2.setFactoryMethodName("newTestBean2");
  tb2.setLazyInit(true);
  bf.registerBeanDefinition("testBean2",tb2);
  ObjectProviderInjectionBean bean=(ObjectProviderInjectionBean)bf.getBean("annotatedBean");
  assertSame(bf.getBean("testBean1"),bean.getTestBean());
  assertSame(bf.getBean("testBean1"),bean.getOptionalTestBean());
  assertSame(bf.getBean("testBean1"),bean.consumeOptionalTestBean());
  assertSame(bf.getBean("testBean1"),bean.getUniqueTestBean());
  assertSame(bf.getBean("testBean1"),bean.consumeUniqueTestBean());
  assertFalse(bf.containsSingleton("testBean2"));
  List<?> testBeans=bean.iterateTestBeans();
  assertEquals(2,testBeans.size());
  assertSame(bf.getBean("testBean1"),testBeans.get(0));
  assertSame(bf.getBean("testBean2"),testBeans.get(1));
  testBeans=bean.forEachTestBeans();
  assertEquals(2,testBeans.size());
  assertSame(bf.getBean("testBean1"),testBeans.get(0));
  assertSame(bf.getBean("testBean2"),testBeans.get(1));
  testBeans=bean.streamTestBeans();
  assertEquals(2,testBeans.size());
  assertSame(bf.getBean("testBean1"),testBeans.get(0));
  assertSame(bf.getBean("testBean2"),testBeans.get(1));
  testBeans=bean.sortedTestBeans();
  assertEquals(2,testBeans.size());
  assertSame(bf.getBean("testBean2"),testBeans.get(0));
  assertSame(bf.getBean("testBean1"),testBeans.get(1));
}
