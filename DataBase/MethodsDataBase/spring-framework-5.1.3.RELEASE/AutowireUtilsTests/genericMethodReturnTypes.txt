@Test public void genericMethodReturnTypes(){
  Method notParameterized=ReflectionUtils.findMethod(MyTypeWithMethods.class,"notParameterized");
  assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterized,new Object[]{},getClass().getClassLoader()));
  Method notParameterizedWithArguments=ReflectionUtils.findMethod(MyTypeWithMethods.class,"notParameterizedWithArguments",Integer.class,Boolean.class);
  assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterizedWithArguments,new Object[]{99,true},getClass().getClassLoader()));
  Method createProxy=ReflectionUtils.findMethod(MyTypeWithMethods.class,"createProxy",Object.class);
  assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createProxy,new Object[]{"foo"},getClass().getClassLoader()));
  Method createNamedProxyWithDifferentTypes=ReflectionUtils.findMethod(MyTypeWithMethods.class,"createNamedProxy",String.class,Object.class);
  assertEquals(Long.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDifferentTypes,new Object[]{"enigma",99L},getClass().getClassLoader()));
  Method createNamedProxyWithDuplicateTypes=ReflectionUtils.findMethod(MyTypeWithMethods.class,"createNamedProxy",String.class,Object.class);
  assertEquals(String.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDuplicateTypes,new Object[]{"enigma","foo"},getClass().getClassLoader()));
  Method createMock=ReflectionUtils.findMethod(MyTypeWithMethods.class,"createMock",Class.class);
  assertEquals(Runnable.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createMock,new Object[]{Runnable.class},getClass().getClassLoader()));
  assertEquals(Runnable.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createMock,new Object[]{Runnable.class.getName()},getClass().getClassLoader()));
  Method createNamedMock=ReflectionUtils.findMethod(MyTypeWithMethods.class,"createNamedMock",String.class,Class.class);
  assertEquals(Runnable.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedMock,new Object[]{"foo",Runnable.class},getClass().getClassLoader()));
  Method createVMock=ReflectionUtils.findMethod(MyTypeWithMethods.class,"createVMock",Object.class,Class.class);
  assertEquals(Runnable.class,AutowireUtils.resolveReturnTypeForFactoryMethod(createVMock,new Object[]{"foo",Runnable.class},getClass().getClassLoader()));
  Method extractValueFrom=ReflectionUtils.findMethod(MyTypeWithMethods.class,"extractValueFrom",MyInterfaceType.class);
  assertEquals(Object.class,AutowireUtils.resolveReturnTypeForFactoryMethod(extractValueFrom,new Object[]{new MySimpleInterfaceType()},getClass().getClassLoader()));
  Map<Integer,Boolean> map=new HashMap<>();
  map.put(0,false);
  map.put(1,true);
  Method extractMagicValue=ReflectionUtils.findMethod(MyTypeWithMethods.class,"extractMagicValue",Map.class);
  assertEquals(Object.class,AutowireUtils.resolveReturnTypeForFactoryMethod(extractMagicValue,new Object[]{map},getClass().getClassLoader()));
}
