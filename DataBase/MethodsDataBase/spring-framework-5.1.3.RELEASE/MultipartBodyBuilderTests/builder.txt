@Test public void builder(){
  MultipartBodyBuilder builder=new MultipartBodyBuilder();
  MultiValueMap<String,String> multipartData=new LinkedMultiValueMap<>();
  multipartData.add("form field","form value");
  builder.part("key",multipartData).header("foo","bar");
  Resource logo=new ClassPathResource("/org/springframework/http/converter/logo.jpg");
  builder.part("logo",logo).header("baz","qux");
  HttpHeaders entityHeaders=new HttpHeaders();
  entityHeaders.add("foo","bar");
  HttpEntity<String> entity=new HttpEntity<>("body",entityHeaders);
  builder.part("entity",entity).header("baz","qux");
  Publisher<String> publisher=Flux.just("foo","bar","baz");
  builder.asyncPart("publisherClass",publisher,String.class).header("baz","qux");
  builder.asyncPart("publisherPtr",publisher,new ParameterizedTypeReference<String>(){
  }
).header("baz","qux");
  MultiValueMap<String,HttpEntity<?>> result=builder.build();
  assertEquals(5,result.size());
  HttpEntity<?> resultEntity=result.getFirst("key");
  assertNotNull(resultEntity);
  assertEquals(multipartData,resultEntity.getBody());
  assertEquals("bar",resultEntity.getHeaders().getFirst("foo"));
  resultEntity=result.getFirst("logo");
  assertNotNull(resultEntity);
  assertEquals(logo,resultEntity.getBody());
  assertEquals("qux",resultEntity.getHeaders().getFirst("baz"));
  resultEntity=result.getFirst("entity");
  assertNotNull(resultEntity);
  assertEquals("body",resultEntity.getBody());
  assertEquals("bar",resultEntity.getHeaders().getFirst("foo"));
  assertEquals("qux",resultEntity.getHeaders().getFirst("baz"));
  resultEntity=result.getFirst("publisherClass");
  assertNotNull(resultEntity);
  assertEquals(publisher,resultEntity.getBody());
  assertEquals(ResolvableType.forClass(String.class),((PublisherEntity<?,?>)resultEntity).getResolvableType());
  assertEquals("qux",resultEntity.getHeaders().getFirst("baz"));
  resultEntity=result.getFirst("publisherPtr");
  assertNotNull(resultEntity);
  assertEquals(publisher,resultEntity.getBody());
  assertEquals(ResolvableType.forClass(String.class),((PublisherEntity<?,?>)resultEntity).getResolvableType());
  assertEquals("qux",resultEntity.getHeaders().getFirst("baz"));
}
