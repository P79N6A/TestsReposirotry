@Test public void testIsCacheSafe(){
  ClassLoader childLoader1=new ClassLoader(classLoader){
  }
;
  ClassLoader childLoader2=new ClassLoader(classLoader){
  }
;
  ClassLoader childLoader3=new ClassLoader(classLoader){
    @Override public Class<?> loadClass(    String name) throws ClassNotFoundException {
      return childLoader1.loadClass(name);
    }
  }
;
  Class<?> composite=ClassUtils.createCompositeInterface(new Class<?>[]{Serializable.class,Externalizable.class},childLoader1);
  assertTrue(ClassUtils.isCacheSafe(String.class,null));
  assertTrue(ClassUtils.isCacheSafe(String.class,classLoader));
  assertTrue(ClassUtils.isCacheSafe(String.class,childLoader1));
  assertTrue(ClassUtils.isCacheSafe(String.class,childLoader2));
  assertTrue(ClassUtils.isCacheSafe(String.class,childLoader3));
  assertFalse(ClassUtils.isCacheSafe(InnerClass.class,null));
  assertTrue(ClassUtils.isCacheSafe(InnerClass.class,classLoader));
  assertTrue(ClassUtils.isCacheSafe(InnerClass.class,childLoader1));
  assertTrue(ClassUtils.isCacheSafe(InnerClass.class,childLoader2));
  assertTrue(ClassUtils.isCacheSafe(InnerClass.class,childLoader3));
  assertFalse(ClassUtils.isCacheSafe(composite,null));
  assertFalse(ClassUtils.isCacheSafe(composite,classLoader));
  assertTrue(ClassUtils.isCacheSafe(composite,childLoader1));
  assertFalse(ClassUtils.isCacheSafe(composite,childLoader2));
  assertTrue(ClassUtils.isCacheSafe(composite,childLoader3));
}
