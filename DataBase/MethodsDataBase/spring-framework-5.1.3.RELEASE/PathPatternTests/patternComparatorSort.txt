@Test public void patternComparatorSort(){
  Comparator<PathPattern> comparator=PathPattern.SPECIFICITY_COMPARATOR;
  List<PathPattern> paths=new ArrayList<>(3);
  PathPatternParser pp=new PathPatternParser();
  paths.add(null);
  paths.add(null);
  paths.sort(comparator);
  assertNull(paths.get(0));
  assertNull(paths.get(1));
  paths.clear();
  paths.add(null);
  paths.add(pp.parse("/hotels/new"));
  paths.sort(comparator);
  assertEquals("/hotels/new",paths.get(0).getPatternString());
  assertNull(paths.get(1));
  paths.clear();
  paths.add(pp.parse("/hotels/*"));
  paths.add(pp.parse("/hotels/new"));
  paths.sort(comparator);
  assertEquals("/hotels/new",paths.get(0).getPatternString());
  assertEquals("/hotels/*",paths.get(1).getPatternString());
  paths.clear();
  paths.add(pp.parse("/hotels/new"));
  paths.add(pp.parse("/hotels/*"));
  paths.sort(comparator);
  assertEquals("/hotels/new",paths.get(0).getPatternString());
  assertEquals("/hotels/*",paths.get(1).getPatternString());
  paths.clear();
  paths.add(pp.parse("/hotels/**"));
  paths.add(pp.parse("/hotels/*"));
  paths.sort(comparator);
  assertEquals("/hotels/*",paths.get(0).getPatternString());
  assertEquals("/hotels/**",paths.get(1).getPatternString());
  paths.clear();
  paths.add(pp.parse("/hotels/*"));
  paths.add(pp.parse("/hotels/**"));
  paths.sort(comparator);
  assertEquals("/hotels/*",paths.get(0).getPatternString());
  assertEquals("/hotels/**",paths.get(1).getPatternString());
  paths.clear();
  paths.add(pp.parse("/hotels/{hotel}"));
  paths.add(pp.parse("/hotels/new"));
  paths.sort(comparator);
  assertEquals("/hotels/new",paths.get(0).getPatternString());
  assertEquals("/hotels/{hotel}",paths.get(1).getPatternString());
  paths.clear();
  paths.add(pp.parse("/hotels/new"));
  paths.add(pp.parse("/hotels/{hotel}"));
  paths.sort(comparator);
  assertEquals("/hotels/new",paths.get(0).getPatternString());
  assertEquals("/hotels/{hotel}",paths.get(1).getPatternString());
  paths.clear();
  paths.add(pp.parse("/hotels/*"));
  paths.add(pp.parse("/hotels/{hotel}"));
  paths.add(pp.parse("/hotels/new"));
  paths.sort(comparator);
  assertEquals("/hotels/new",paths.get(0).getPatternString());
  assertEquals("/hotels/{hotel}",paths.get(1).getPatternString());
  assertEquals("/hotels/*",paths.get(2).getPatternString());
  paths.clear();
  paths.add(pp.parse("/hotels/ne*"));
  paths.add(pp.parse("/hotels/n*"));
  Collections.shuffle(paths);
  paths.sort(comparator);
  assertEquals("/hotels/ne*",paths.get(0).getPatternString());
  assertEquals("/hotels/n*",paths.get(1).getPatternString());
  paths.clear();
  comparator=(p1,p2) -> {
    int index=p1.compareTo(p2);
    return (index != 0 ? index : p1.getPatternString().compareTo(p2.getPatternString()));
  }
;
  paths.add(pp.parse("/*/login.*"));
  paths.add(pp.parse("/*/endUser/action/login.*"));
  paths.sort(comparator);
  assertEquals("/*/endUser/action/login.*",paths.get(0).getPatternString());
  assertEquals("/*/login.*",paths.get(1).getPatternString());
  paths.clear();
}
