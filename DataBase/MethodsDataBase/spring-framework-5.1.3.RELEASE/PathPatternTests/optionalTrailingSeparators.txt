@Test public void optionalTrailingSeparators(){
  PathPattern pp;
  pp=parse("/resource");
  assertMatches(pp,"/resource");
  assertMatches(pp,"/resource");
  assertMatches(pp,"/resource/");
  assertNoMatch(pp,"/resource//");
  pp=parse("/resource/");
  assertNoMatch(pp,"/resource");
  assertMatches(pp,"/resource/");
  assertNoMatch(pp,"/resource//");
  pp=parse("res?urce");
  assertNoMatch(pp,"resource//");
  pp=parse("/res?urce");
  assertMatches(pp,"/resource");
  assertMatches(pp,"/resource/");
  assertNoMatch(pp,"/resource//");
  pp=parse("/res?urce/");
  assertNoMatch(pp,"/resource");
  assertMatches(pp,"/resource/");
  assertNoMatch(pp,"/resource//");
  pp=parse("/{var}");
  assertMatches(pp,"/resource");
  assertEquals("resource",pp.matchAndExtract(toPathContainer("/resource")).getUriVariables().get("var"));
  assertMatches(pp,"/resource/");
  assertEquals("resource",pp.matchAndExtract(toPathContainer("/resource/")).getUriVariables().get("var"));
  assertNoMatch(pp,"/resource//");
  pp=parse("/{var}/");
  assertNoMatch(pp,"/resource");
  assertMatches(pp,"/resource/");
  assertEquals("resource",pp.matchAndExtract(toPathContainer("/resource/")).getUriVariables().get("var"));
  assertNoMatch(pp,"/resource//");
  pp=parse("/{*var}");
  assertMatches(pp,"/resource");
  assertEquals("/resource",pp.matchAndExtract(toPathContainer("/resource")).getUriVariables().get("var"));
  assertMatches(pp,"/resource/");
  assertEquals("/resource/",pp.matchAndExtract(toPathContainer("/resource/")).getUriVariables().get("var"));
  assertMatches(pp,"/resource//");
  assertEquals("/resource//",pp.matchAndExtract(toPathContainer("/resource//")).getUriVariables().get("var"));
  assertMatches(pp,"//resource//");
  assertEquals("//resource//",pp.matchAndExtract(toPathContainer("//resource//")).getUriVariables().get("var"));
  pp=parse("/**");
  assertMatches(pp,"/resource");
  assertMatches(pp,"/resource/");
  assertMatches(pp,"/resource//");
  assertMatches(pp,"//resource//");
  pp=parse("/*");
  assertMatches(pp,"/resource");
  assertMatches(pp,"/resource/");
  assertNoMatch(pp,"/resource//");
  pp=parse("/*/");
  assertNoMatch(pp,"/resource");
  assertMatches(pp,"/resource/");
  assertNoMatch(pp,"/resource//");
  pp=parse("/{var1}_{var2}");
  assertMatches(pp,"/res1_res2");
  assertEquals("res1",pp.matchAndExtract(toPathContainer("/res1_res2")).getUriVariables().get("var1"));
  assertEquals("res2",pp.matchAndExtract(toPathContainer("/res1_res2")).getUriVariables().get("var2"));
  assertMatches(pp,"/res1_res2/");
  assertEquals("res1",pp.matchAndExtract(toPathContainer("/res1_res2/")).getUriVariables().get("var1"));
  assertEquals("res2",pp.matchAndExtract(toPathContainer("/res1_res2/")).getUriVariables().get("var2"));
  assertNoMatch(pp,"/res1_res2//");
  pp=parse("/{var1}_{var2}/");
  assertNoMatch(pp,"/res1_res2");
  assertMatches(pp,"/res1_res2/");
  assertEquals("res1",pp.matchAndExtract(toPathContainer("/res1_res2/")).getUriVariables().get("var1"));
  assertEquals("res2",pp.matchAndExtract(toPathContainer("/res1_res2/")).getUriVariables().get("var2"));
  assertNoMatch(pp,"/res1_res2//");
  pp=parse("/{var1}*");
  assertMatches(pp,"/a");
  assertMatches(pp,"/a/");
  assertNoMatch(pp,"/");
  assertNoMatch(pp,"//");
  PathPatternParser parser=new PathPatternParser();
  parser.setMatchOptionalTrailingSeparator(false);
  pp=parser.parse("/resource");
  assertMatches(pp,"/resource");
  assertNoMatch(pp,"/resource/");
  assertNoMatch(pp,"/resource//");
  pp=parser.parse("/resource/");
  assertNoMatch(pp,"/resource");
  assertMatches(pp,"/resource/");
  assertNoMatch(pp,"/resource//");
  pp=parser.parse("/res?urce");
  assertMatches(pp,"/resource");
  assertNoMatch(pp,"/resource/");
  assertNoMatch(pp,"/resource//");
  pp=parser.parse("/res?urce/");
  assertNoMatch(pp,"/resource");
  assertMatches(pp,"/resource/");
  assertNoMatch(pp,"/resource//");
  pp=parser.parse("/{var}");
  assertMatches(pp,"/resource");
  assertEquals("resource",pp.matchAndExtract(toPathContainer("/resource")).getUriVariables().get("var"));
  assertNoMatch(pp,"/resource/");
  assertNoMatch(pp,"/resource//");
  pp=parser.parse("/{var}/");
  assertNoMatch(pp,"/resource");
  assertMatches(pp,"/resource/");
  assertEquals("resource",pp.matchAndExtract(toPathContainer("/resource/")).getUriVariables().get("var"));
  assertNoMatch(pp,"/resource//");
  pp=parser.parse("/{*var}");
  assertMatches(pp,"/resource");
  assertEquals("/resource",pp.matchAndExtract(toPathContainer("/resource")).getUriVariables().get("var"));
  assertMatches(pp,"/resource/");
  assertEquals("/resource/",pp.matchAndExtract(toPathContainer("/resource/")).getUriVariables().get("var"));
  assertMatches(pp,"/resource//");
  assertEquals("/resource//",pp.matchAndExtract(toPathContainer("/resource//")).getUriVariables().get("var"));
  assertMatches(pp,"//resource//");
  assertEquals("//resource//",pp.matchAndExtract(toPathContainer("//resource//")).getUriVariables().get("var"));
  pp=parser.parse("/**");
  assertMatches(pp,"/resource");
  assertMatches(pp,"/resource/");
  assertMatches(pp,"/resource//");
  assertMatches(pp,"//resource//");
  pp=parser.parse("/*");
  assertMatches(pp,"/resource");
  assertNoMatch(pp,"/resource/");
  assertNoMatch(pp,"/resource//");
  pp=parser.parse("/*/");
  assertNoMatch(pp,"/resource");
  assertMatches(pp,"/resource/");
  assertNoMatch(pp,"/resource//");
  pp=parser.parse("/{var1}_{var2}");
  assertMatches(pp,"/res1_res2");
  assertEquals("res1",pp.matchAndExtract(toPathContainer("/res1_res2")).getUriVariables().get("var1"));
  assertEquals("res2",pp.matchAndExtract(toPathContainer("/res1_res2")).getUriVariables().get("var2"));
  assertNoMatch(pp,"/res1_res2/");
  assertNoMatch(pp,"/res1_res2//");
  pp=parser.parse("/{var1}_{var2}/");
  assertNoMatch(pp,"/res1_res2");
  assertMatches(pp,"/res1_res2/");
  assertEquals("res1",pp.matchAndExtract(toPathContainer("/res1_res2/")).getUriVariables().get("var1"));
  assertEquals("res2",pp.matchAndExtract(toPathContainer("/res1_res2/")).getUriVariables().get("var2"));
  assertNoMatch(pp,"/res1_res2//");
  pp=parser.parse("/{var1}*");
  assertMatches(pp,"/a");
  assertNoMatch(pp,"/a/");
  assertNoMatch(pp,"/");
  assertNoMatch(pp,"//");
}
