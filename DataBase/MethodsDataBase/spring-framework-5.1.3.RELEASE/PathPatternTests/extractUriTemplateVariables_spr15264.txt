@Test public void extractUriTemplateVariables_spr15264(){
  PathPattern pp;
  pp=new PathPatternParser().parse("/{foo}");
  assertMatches(pp,"/abc");
  assertNoMatch(pp,"/");
  assertNoMatch(pp,"//");
  checkCapture("/{foo}","/abc","foo","abc");
  pp=new PathPatternParser().parse("/{foo}/{bar}");
  assertMatches(pp,"/abc/def");
  assertNoMatch(pp,"/def");
  assertNoMatch(pp,"/");
  assertNoMatch(pp,"//def");
  assertNoMatch(pp,"//");
  pp=parse("/{foo}/boo");
  assertMatches(pp,"/abc/boo");
  assertMatches(pp,"/a/boo");
  assertNoMatch(pp,"/boo");
  assertNoMatch(pp,"//boo");
  pp=parse("/{foo}*");
  assertMatches(pp,"/abc");
  assertNoMatch(pp,"/");
  checkCapture("/{word:[a-z]*}","/abc","word","abc");
  pp=parse("/{word:[a-z]*}");
  assertNoMatch(pp,"/1");
  assertMatches(pp,"/a");
  assertNoMatch(pp,"/");
  pp=new PathPatternParser().parse("/{foo}{bar}");
  assertMatches(pp,"/abcdef");
  assertNoMatch(pp,"/");
  assertNoMatch(pp,"//");
  checkCapture("/{foo:[a-z][a-z]}{bar:[a-z]}","/abc","foo","ab","bar","c");
  PathPatternParser ppp=new PathPatternParser();
  ppp.setMatchOptionalTrailingSeparator(true);
  pp=ppp.parse("/****");
  assertMatches(pp,"/abcdef");
  assertMatches(pp,"/");
  assertMatches(pp,"/");
  assertMatches(pp,"//");
  assertFalse(new AntPathMatcher().match("/{foo}","/"));
  assertTrue(new AntPathMatcher().match("/{foo}","/a"));
  assertTrue(new AntPathMatcher().match("/{foo}{bar}","/a"));
  assertFalse(new AntPathMatcher().match("/{foo}*","/"));
  assertTrue(new AntPathMatcher().match("/*","/"));
  assertFalse(new AntPathMatcher().match("/*{foo}","/"));
  Map<String,String> vars=new AntPathMatcher().extractUriTemplateVariables("/{foo}{bar}","/a");
  assertEquals("a",vars.get("foo"));
  assertEquals("",vars.get("bar"));
}
