@Test public void caseSensitivity(){
  PathPatternParser pp=new PathPatternParser();
  pp.setCaseSensitive(false);
  PathPattern p=pp.parse("abc");
  assertMatches(p,"AbC");
  assertNoMatch(p,"def");
  p=pp.parse("fOo");
  assertMatches(p,"FoO");
  p=pp.parse("/fOo/bAr");
  assertMatches(p,"/FoO/BaR");
  pp=new PathPatternParser();
  pp.setCaseSensitive(true);
  p=pp.parse("abc");
  assertNoMatch(p,"AbC");
  p=pp.parse("fOo");
  assertNoMatch(p,"FoO");
  p=pp.parse("/fOo/bAr");
  assertNoMatch(p,"/FoO/BaR");
  p=pp.parse("/fOO/bAr");
  assertMatches(p,"/fOO/bAr");
  pp=new PathPatternParser();
  pp.setCaseSensitive(false);
  p=pp.parse("{foo:[A-Z]*}");
  assertMatches(p,"abc");
  assertMatches(p,"ABC");
  pp=new PathPatternParser();
  pp.setCaseSensitive(true);
  p=pp.parse("{foo:[A-Z]*}");
  assertNoMatch(p,"abc");
  assertMatches(p,"ABC");
  pp=new PathPatternParser();
  pp.setCaseSensitive(false);
  p=pp.parse("ab?");
  assertMatches(p,"AbC");
  p=pp.parse("fO?");
  assertMatches(p,"FoO");
  p=pp.parse("/fO?/bA?");
  assertMatches(p,"/FoO/BaR");
  assertNoMatch(p,"/bAr/fOo");
  pp=new PathPatternParser();
  pp.setCaseSensitive(true);
  p=pp.parse("ab?");
  assertNoMatch(p,"AbC");
  p=pp.parse("fO?");
  assertNoMatch(p,"FoO");
  p=pp.parse("/fO?/bA?");
  assertNoMatch(p,"/FoO/BaR");
  p=pp.parse("/fO?/bA?");
  assertMatches(p,"/fOO/bAr");
  pp=new PathPatternParser();
  pp.setCaseSensitive(false);
  p=pp.parse("{abc:[A-Z]*}_{def:[A-Z]*}");
  assertMatches(p,"abc_abc");
  assertMatches(p,"ABC_aBc");
  pp=new PathPatternParser();
  pp.setCaseSensitive(true);
  p=pp.parse("{abc:[A-Z]*}_{def:[A-Z]*}");
  assertNoMatch(p,"abc_abc");
  assertMatches(p,"ABC_ABC");
  pp=new PathPatternParser();
  pp.setCaseSensitive(false);
  p=pp.parse("*?a?*");
  assertMatches(p,"bab");
  assertMatches(p,"bAb");
  pp=new PathPatternParser();
  pp.setCaseSensitive(true);
  p=pp.parse("*?A?*");
  assertNoMatch(p,"bab");
  assertMatches(p,"bAb");
}
