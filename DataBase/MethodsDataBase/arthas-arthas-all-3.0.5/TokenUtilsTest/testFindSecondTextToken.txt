@Test public void testFindSecondTextToken(){
  CliToken textCliToken=new CliTokenImpl(true,"textCliToken");
  CliToken nonTextCliToken=new CliTokenImpl(false,"nonTextCliToken");
  Assert.assertEquals(null,TokenUtils.findSecondTokenText(null));
  Assert.assertEquals(null,TokenUtils.findSecondTokenText(new ArrayList<CliToken>()));
  Assert.assertEquals(null,TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null})));
  Assert.assertEquals(null,TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null,textCliToken})));
  Assert.assertEquals(null,TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null,nonTextCliToken,textCliToken})));
  Assert.assertEquals(textCliToken.value(),TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null,nonTextCliToken,textCliToken,textCliToken})));
  Assert.assertEquals(null,TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{textCliToken})));
  Assert.assertEquals(null,TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{nonTextCliToken})));
  Assert.assertEquals(null,TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{nonTextCliToken,textCliToken})));
  Assert.assertEquals(textCliToken.value(),TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{textCliToken,nonTextCliToken,textCliToken})));
}
