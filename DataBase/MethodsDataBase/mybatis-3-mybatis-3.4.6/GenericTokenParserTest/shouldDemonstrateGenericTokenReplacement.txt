@Test public void shouldDemonstrateGenericTokenReplacement(){
  GenericTokenParser parser=new GenericTokenParser("${","}",new VariableTokenHandler(new HashMap<String,String>(){
{
      put("first_name","James");
      put("initial","T");
      put("last_name","Kirk");
      put("var{with}brace","Hiya");
      put("","");
    }
  }
));
  assertEquals("James T Kirk reporting.",parser.parse("${first_name} ${initial} ${last_name} reporting."));
  assertEquals("Hello captain James T Kirk",parser.parse("Hello captain ${first_name} ${initial} ${last_name}"));
  assertEquals("James T Kirk",parser.parse("${first_name} ${initial} ${last_name}"));
  assertEquals("JamesTKirk",parser.parse("${first_name}${initial}${last_name}"));
  assertEquals("{}JamesTKirk",parser.parse("{}${first_name}${initial}${last_name}"));
  assertEquals("}JamesTKirk",parser.parse("}${first_name}${initial}${last_name}"));
  assertEquals("}James{{T}}Kirk",parser.parse("}${first_name}{{${initial}}}${last_name}"));
  assertEquals("}James}T{Kirk",parser.parse("}${first_name}}${initial}{${last_name}"));
  assertEquals("}James}T{Kirk",parser.parse("}${first_name}}${initial}{${last_name}"));
  assertEquals("}James}T{Kirk{{}}",parser.parse("}${first_name}}${initial}{${last_name}{{}}"));
  assertEquals("}James}T{Kirk{{}}",parser.parse("}${first_name}}${initial}{${last_name}{{}}${}"));
  assertEquals("{$$something}JamesTKirk",parser.parse("{$$something}${first_name}${initial}${last_name}"));
  assertEquals("${",parser.parse("${"));
  assertEquals("${\\}",parser.parse("${\\}"));
  assertEquals("Hiya",parser.parse("${var{with\\}brace}"));
  assertEquals("",parser.parse("${}"));
  assertEquals("}",parser.parse("}"));
  assertEquals("Hello ${ this is a test.",parser.parse("Hello ${ this is a test."));
  assertEquals("Hello } this is a test.",parser.parse("Hello } this is a test."));
  assertEquals("Hello } ${ this is a test.",parser.parse("Hello } ${ this is a test."));
}
