@Test public void shouldThrowExceptionWithColumnName() throws Exception {
  final MappedStatement ms=getMappedStatement();
  final RowBounds rowBounds=new RowBounds(0,100);
  final DefaultResultSetHandler defaultResultSetHandler=new DefaultResultSetHandler(null,ms,null,null,null,rowBounds);
  final ResultSetWrapper rsw=mock(ResultSetWrapper.class);
  when(rsw.getResultSet()).thenReturn(mock(ResultSet.class));
  final ResultMapping resultMapping=mock(ResultMapping.class);
  final TypeHandler typeHandler=mock(TypeHandler.class);
  when(resultMapping.getColumn()).thenReturn("column");
  when(resultMapping.getTypeHandler()).thenReturn(typeHandler);
  when(typeHandler.getResult(any(ResultSet.class),any(String.class))).thenThrow(new SQLException("exception"));
  List<ResultMapping> constructorMappings=Collections.singletonList(resultMapping);
  try {
    defaultResultSetHandler.createParameterizedResultObject(rsw,null,constructorMappings,null,null,null);
    Assert.fail("Should have thrown ExecutorException");
  }
 catch (  Exception e) {
    Assert.assertTrue("Expected ExecutorException",e instanceof ExecutorException);
    Assert.assertTrue("",e.getMessage().contains("mapping: " + resultMapping.toString()));
  }
}
