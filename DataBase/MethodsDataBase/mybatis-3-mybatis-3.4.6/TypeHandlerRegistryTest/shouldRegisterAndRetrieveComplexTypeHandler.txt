@Test public void shouldRegisterAndRetrieveComplexTypeHandler(){
  TypeHandler<List<URI>> fakeHandler=new TypeHandler<List<URI>>(){
    @Override public void setParameter(    PreparedStatement ps,    int i,    List<URI> parameter,    JdbcType jdbcType) throws SQLException {
    }
    @Override public List<URI> getResult(    CallableStatement cs,    int columnIndex) throws SQLException {
      return null;
    }
    @Override public List<URI> getResult(    ResultSet rs,    int columnIndex) throws SQLException {
      return null;
    }
    @Override public List<URI> getResult(    ResultSet rs,    String columnName) throws SQLException {
      return null;
    }
  }
;
  TypeReference<List<URI>> type=new TypeReference<List<URI>>(){
  }
;
  typeHandlerRegistry.register(type,fakeHandler);
  assertSame(fakeHandler,typeHandlerRegistry.getTypeHandler(type));
}
