private void doTestExistsThrowsSecurityException() throws IOException, URISyntaxException {
  File file=null;
  final PermissionCollection readClassPathFiles=new FilePermission("","read").newPermissionCollection();
  for (  URL url : ClassPath.Scanner.parseJavaClassPath()) {
    if (url.getProtocol().equalsIgnoreCase("file")) {
      file=new File(url.toURI());
      readClassPathFiles.add(new FilePermission(file.getAbsolutePath(),"read"));
    }
  }
  assertThat(file).isNotNull();
  SecurityManager disallowFilesSecurityManager=new SecurityManager(){
    @Override public void checkPermission(    Permission p){
      if (readClassPathFiles.implies(p)) {
        throw new SecurityException("Disallowed: " + p);
      }
    }
  }
;
  System.setSecurityManager(disallowFilesSecurityManager);
  try {
    file.exists();
    fail("Did not get expected SecurityException");
  }
 catch (  SecurityException expected) {
  }
  ClassPath classPath=ClassPath.from(getClass().getClassLoader());
  for (  ResourceInfo resource : classPath.getResources()) {
    assertThat(resource.getResourceName()).doesNotContain("com/google/common/reflect/");
  }
}
