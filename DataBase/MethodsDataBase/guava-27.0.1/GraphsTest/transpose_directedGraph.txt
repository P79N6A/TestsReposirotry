@Test public void transpose_directedGraph(){
  MutableGraph<Integer> directedGraph=GraphBuilder.directed().allowsSelfLoops(true).build();
  directedGraph.putEdge(N1,N3);
  directedGraph.putEdge(N3,N1);
  directedGraph.putEdge(N1,N2);
  directedGraph.putEdge(N1,N1);
  directedGraph.putEdge(N3,N4);
  MutableGraph<Integer> expectedTranspose=GraphBuilder.directed().allowsSelfLoops(true).build();
  expectedTranspose.putEdge(N3,N1);
  expectedTranspose.putEdge(N1,N3);
  expectedTranspose.putEdge(N2,N1);
  expectedTranspose.putEdge(N1,N1);
  expectedTranspose.putEdge(N4,N3);
  Graph<Integer> transpose=transpose(directedGraph);
  assertThat(transpose).isEqualTo(expectedTranspose);
  assertThat(transpose(transpose)).isSameAs(directedGraph);
  AbstractGraphTest.validateGraph(transpose);
  for (  Integer node : directedGraph.nodes()) {
    assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));
    assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));
  }
  assertThat(transpose.successors(N1)).doesNotContain(N2);
  directedGraph.putEdge(N2,N1);
  assertThat(transpose.successors(N1)).contains(N2);
  AbstractGraphTest.validateGraph(transpose);
}
