@Test public void transpose_directedNetwork(){
  MutableNetwork<Integer,String> directedGraph=NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();
  directedGraph.addEdge(N1,N3,E13);
  directedGraph.addEdge(N3,N1,E31);
  directedGraph.addEdge(N1,N2,E12);
  directedGraph.addEdge(N1,N2,E12_A);
  directedGraph.addEdge(N1,N1,E11);
  directedGraph.addEdge(N3,N4,E34);
  MutableNetwork<Integer,String> expectedTranspose=NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();
  expectedTranspose.addEdge(N3,N1,E13);
  expectedTranspose.addEdge(N1,N3,E31);
  expectedTranspose.addEdge(N2,N1,E12);
  expectedTranspose.addEdge(N2,N1,E12_A);
  expectedTranspose.addEdge(N1,N1,E11);
  expectedTranspose.addEdge(N4,N3,E34);
  Network<Integer,String> transpose=transpose(directedGraph);
  assertThat(transpose).isEqualTo(expectedTranspose);
  assertThat(transpose(transpose)).isSameAs(directedGraph);
  AbstractNetworkTest.validateNetwork(transpose);
  assertThat(transpose.edgesConnecting(N1,N2)).isEmpty();
  assertThat(transpose.edgeConnectingOrNull(N1,N2)).isNull();
  for (  Integer node : directedGraph.nodes()) {
    assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));
    assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));
  }
  directedGraph.addEdge(N2,N1,E21);
  assertThat(transpose.edgesConnecting(N1,N2)).containsExactly(E21);
  assertThat(transpose.edgeConnectingOrNull(N1,N2)).isEqualTo(E21);
  AbstractNetworkTest.validateNetwork(transpose);
}
