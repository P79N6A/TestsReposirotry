@Test public void transpose_directedValueGraph(){
  MutableValueGraph<Integer,String> directedGraph=ValueGraphBuilder.directed().allowsSelfLoops(true).build();
  directedGraph.putEdgeValue(N1,N3,E13);
  directedGraph.putEdgeValue(N3,N1,E31);
  directedGraph.putEdgeValue(N1,N2,E12);
  directedGraph.putEdgeValue(N1,N1,E11);
  directedGraph.putEdgeValue(N3,N4,E34);
  MutableValueGraph<Integer,String> expectedTranspose=ValueGraphBuilder.directed().allowsSelfLoops(true).build();
  expectedTranspose.putEdgeValue(N3,N1,E13);
  expectedTranspose.putEdgeValue(N1,N3,E31);
  expectedTranspose.putEdgeValue(N2,N1,E12);
  expectedTranspose.putEdgeValue(N1,N1,E11);
  expectedTranspose.putEdgeValue(N4,N3,E34);
  ValueGraph<Integer,String> transpose=transpose(directedGraph);
  assertThat(transpose).isEqualTo(expectedTranspose);
  assertThat(transpose(transpose)).isSameAs(directedGraph);
  AbstractGraphTest.validateGraph(transpose.asGraph());
  assertThat(transpose.edgeValueOrDefault(N1,N2,null)).isNull();
  for (  Integer node : directedGraph.nodes()) {
    assertThat(directedGraph.inDegree(node)).isSameAs(transpose.outDegree(node));
    assertThat(directedGraph.outDegree(node)).isSameAs(transpose.inDegree(node));
  }
  directedGraph.putEdgeValue(N2,N1,E21);
  assertThat(transpose.edgeValueOrDefault(N1,N2,null)).isEqualTo(E21);
  AbstractGraphTest.validateGraph(transpose.asGraph());
}
