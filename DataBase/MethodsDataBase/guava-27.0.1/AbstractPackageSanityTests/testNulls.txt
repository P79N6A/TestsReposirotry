/** 
 * Performs  {@link NullPointerTester} checks for all top-level classes in the package. For a class{@code C}<ul> <li>All visible static methods are checked such that passing null for any parameter that's not annotated nullable (according to the rules of  {@link NullPointerTester}) should throw {@link NullPointerException}. <li>If there is any visible constructor or visible static factory method declared by the class, all visible instance methods will be checked too using the instance created by invoking the constructor or static factory method. <li>If the constructor or factory method used to construct instance takes a parameter that {@link AbstractPackageSanityTests} doesn't know how to construct, the test will fail.<li>If there is no visible constructor or visible static factory method declared by  {@code C}, instance methods are skipped for nulls test. <li>Nulls test is not performed on method return values unless the method is a visible static factory method whose return type is  {@code C} or {@code C}'s subtype. </ul> <p>In all cases, if  {@code C} needs custom logic for testing nulls, you can add an explicit{@code testNulls()} test in the corresponding {@code CTest} class, and {@code C} will beexcluded from the automated null tests performed by this method.
 */
@Test public void testNulls() throws Exception {
  for (  Class<?> classToTest : findClassesToTest(loadClassesInPackage(),NULL_TEST_METHOD_NAMES)) {
    try {
      tester.doTestNulls(classToTest,visibility);
    }
 catch (    Throwable e) {
      throw sanityError(classToTest,NULL_TEST_METHOD_NAMES,"nulls test",e);
    }
  }
}
