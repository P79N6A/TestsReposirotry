/** 
 * Tests all top-level  {@link Serializable} classes in the package. For a serializable Class{@code C}: <ul> <li>If  {@code C} explicitly implements {@link Object#equals}, the deserialized instance will be checked to be equal to the instance before serialization. <li>If  {@code C} doesn't explicitly implement {@code equals} but instead inherits it from asuperclass, no equality check is done on the deserialized instance because it's not clear whether the author intended for the class to be a value type. <li>If a constructor or factory method takes a parameter whose type is interface, a dynamic proxy will be passed to the method. It's possible that the method body expects an instance method of the passed-in proxy to be of a certain value yet the proxy isn't aware of the assumption, in which case the equality check before and after serialization will fail. <li>If the constructor or factory method takes a parameter that  {@link AbstractPackageSanityTests} doesn't know how to construct, the test will fail.<li>If there is no visible constructor or visible static factory method declared by  {@code C},  {@code C} is skipped for serialization test, even if it implements {@link Serializable}. <li>Serialization test is not performed on method return values unless the method is a visible static factory method whose return type is  {@code C} or {@code C}'s subtype. </ul> <p>In all cases, if  {@code C} needs custom logic for testing serialization, you can add anexplicit  {@code testSerializable()} test in the corresponding {@code CTest} class, and {@code C} will be excluded from automated serialization test performed by this method.
 */
@Test public void testSerializable() throws Exception {
  for (  Class<?> classToTest : findClassesToTest(loadClassesInPackage(),SERIALIZABLE_TEST_METHOD_NAMES)) {
    if (Serializable.class.isAssignableFrom(classToTest)) {
      try {
        Object instance=tester.instantiate(classToTest);
        if (instance != null) {
          if (isEqualsDefined(classToTest)) {
            SerializableTester.reserializeAndAssert(instance);
          }
 else {
            SerializableTester.reserialize(instance);
          }
        }
      }
 catch (      Throwable e) {
        throw sanityError(classToTest,SERIALIZABLE_TEST_METHOD_NAMES,"serializable test",e);
      }
    }
  }
}
