@Test public void ensureThreadPoolInstanceIsTheOneRegisteredWithMetricsPublisherAndThreadPoolCache() throws IllegalAccessException, NoSuchFieldException {
  HystrixPlugins.getInstance().registerMetricsPublisher(new HystrixMetricsPublisher(){
    @Override public HystrixMetricsPublisherThreadPool getMetricsPublisherForThreadPool(    HystrixThreadPoolKey threadPoolKey,    HystrixThreadPoolMetrics metrics,    HystrixThreadPoolProperties properties){
      return new HystrixMetricsPublisherThreadPoolContainer(metrics);
    }
  }
);
  HystrixThreadPoolKey threadPoolKey=HystrixThreadPoolKey.Factory.asKey("threadPoolFactoryConcurrencyTest");
  HystrixThreadPool poolOne=new HystrixThreadPool.HystrixThreadPoolDefault(threadPoolKey,HystrixThreadPoolPropertiesTest.getUnitTestPropertiesBuilder());
  HystrixThreadPool poolTwo=new HystrixThreadPool.HystrixThreadPoolDefault(threadPoolKey,HystrixThreadPoolPropertiesTest.getUnitTestPropertiesBuilder());
  assertThat(poolOne.getExecutor(),is(poolTwo.getExecutor()));
  HystrixMetricsPublisherThreadPoolContainer hystrixMetricsPublisherThreadPool=(HystrixMetricsPublisherThreadPoolContainer)HystrixMetricsPublisherFactory.createOrRetrievePublisherForThreadPool(threadPoolKey,null,null);
  ThreadPoolExecutor threadPoolExecutor=hystrixMetricsPublisherThreadPool.getHystrixThreadPoolMetrics().getThreadPool();
  assertTrue(threadPoolExecutor.equals(poolOne.getExecutor()) && threadPoolExecutor.equals(poolTwo.getExecutor()));
  assertFalse(threadPoolExecutor.isShutdown());
}
