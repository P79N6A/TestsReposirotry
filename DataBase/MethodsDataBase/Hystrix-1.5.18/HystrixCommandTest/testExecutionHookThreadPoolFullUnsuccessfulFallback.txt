/** 
 * Short-circuit? : NO Thread/semaphore: THREAD Thread Pool full? : YES Thread Pool Queue full?: N/A Fallback: synchronous HystrixRuntimeException
 */
@Test public void testExecutionHookThreadPoolFullUnsuccessfulFallback(){
  assertHooksOnFailFast(new Func0<TestHystrixCommand<Integer>>(){
    @Override public TestHystrixCommand<Integer> call(){
      HystrixCircuitBreakerTest.TestCircuitBreaker circuitBreaker=new HystrixCircuitBreakerTest.TestCircuitBreaker();
      HystrixThreadPool pool=new SingleThreadedPoolWithNoQueue();
      try {
        getLatentCommand(ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.ExecutionResult.SUCCESS,500,AbstractTestHystrixCommand.FallbackResult.FAILURE,circuitBreaker,pool,600).observe();
      }
 catch (      Exception e) {
      }
      return getLatentCommand(ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.ExecutionResult.SUCCESS,500,AbstractTestHystrixCommand.FallbackResult.FAILURE,circuitBreaker,pool,600);
    }
  }
,new Action1<TestHystrixCommand<Integer>>(){
    @Override public void call(    TestHystrixCommand<Integer> command){
      TestableExecutionHook hook=command.getBuilder().executionHook;
      assertTrue(hook.commandEmissionsMatch(0,1,0));
      assertTrue(hook.executionEventsMatch(0,0,0));
      assertTrue(hook.fallbackEventsMatch(0,1,0));
      assertEquals(RejectedExecutionException.class,hook.getCommandException().getClass());
      assertEquals(RuntimeException.class,hook.getFallbackException().getClass());
      assertEquals("onStart - onFallbackStart - onFallbackError - onError - ",hook.executionSequence.toString());
    }
  }
);
}
