/** 
 * Test that we can reject a thread using isQueueSpaceAvailable() instead of just when the pool rejects. <p> For example, we have queue size set to 100 but want to reject when we hit 10. <p> This allows us to use FastProperties to control our rejection point whereas we can't resize a queue after it's created.
 */
@Test public void testRejectedThreadUsingQueueSize(){
  HystrixCommandKey key=HystrixCommandKey.Factory.asKey("Rejection-B");
  TestCircuitBreaker circuitBreaker=new TestCircuitBreaker();
  SingleThreadedPoolWithQueue pool=new SingleThreadedPoolWithQueue(10,1);
  pool.queue.add(new Runnable(){
    @Override public void run(){
      System.out.println("**** queue filler1 ****");
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
);
  TestCommandRejection command=new TestCommandRejection(key,circuitBreaker,pool,500,600,TestCommandRejection.FALLBACK_NOT_IMPLEMENTED);
  try {
    command.queue();
    fail("we shouldn't get here");
  }
 catch (  Exception e) {
    e.printStackTrace();
    assertTrue(command.isResponseRejected());
    assertFalse(command.isResponseShortCircuited());
    assertFalse(command.isResponseTimedOut());
    assertNotNull(command.getExecutionException());
    if (e instanceof HystrixRuntimeException && e.getCause() instanceof RejectedExecutionException) {
      HystrixRuntimeException de=(HystrixRuntimeException)e;
      assertNotNull(de.getFallbackException());
      assertTrue(de.getFallbackException() instanceof UnsupportedOperationException);
      assertNotNull(de.getImplementingClass());
      assertNotNull(de.getCause());
      assertTrue(de.getCause() instanceof RejectedExecutionException);
    }
 else {
      fail("the exception should be HystrixRuntimeException with cause as RejectedExecutionException");
    }
  }
  assertCommandExecutionEvents(command,HystrixEventType.THREAD_POOL_REJECTED,HystrixEventType.FALLBACK_MISSING);
  assertEquals(0,circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(1);
}
