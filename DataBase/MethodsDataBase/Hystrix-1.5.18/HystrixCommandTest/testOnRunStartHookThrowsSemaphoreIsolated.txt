@Test public void testOnRunStartHookThrowsSemaphoreIsolated(){
  final AtomicBoolean exceptionEncountered=new AtomicBoolean(false);
  final AtomicBoolean onThreadStartInvoked=new AtomicBoolean(false);
  final AtomicBoolean onThreadCompleteInvoked=new AtomicBoolean(false);
  final AtomicBoolean executionAttempted=new AtomicBoolean(false);
class FailureInjectionHook extends HystrixCommandExecutionHook {
    @Override public <T>void onExecutionStart(    HystrixInvokable<T> commandInstance){
      throw new HystrixRuntimeException(HystrixRuntimeException.FailureType.COMMAND_EXCEPTION,commandInstance.getClass(),"Injected Failure",null,null);
    }
    @Override public <T>void onThreadStart(    HystrixInvokable<T> commandInstance){
      onThreadStartInvoked.set(true);
      super.onThreadStart(commandInstance);
    }
    @Override public <T>void onThreadComplete(    HystrixInvokable<T> commandInstance){
      onThreadCompleteInvoked.set(true);
      super.onThreadComplete(commandInstance);
    }
  }
  final FailureInjectionHook failureInjectionHook=new FailureInjectionHook();
class FailureInjectedCommand extends TestHystrixCommand<Integer> {
    public FailureInjectedCommand(    ExecutionIsolationStrategy isolationStrategy){
      super(testPropsBuilder().setCommandPropertiesDefaults(HystrixCommandPropertiesTest.getUnitTestPropertiesSetter().withExecutionIsolationStrategy(isolationStrategy)),failureInjectionHook);
    }
    @Override protected Integer run() throws Exception {
      executionAttempted.set(true);
      return 3;
    }
  }
  TestHystrixCommand<Integer> semaphoreCmd=new FailureInjectedCommand(ExecutionIsolationStrategy.SEMAPHORE);
  try {
    int result=semaphoreCmd.execute();
    System.out.println("RESULT : " + result);
  }
 catch (  Throwable ex) {
    ex.printStackTrace();
    exceptionEncountered.set(true);
  }
  assertTrue(exceptionEncountered.get());
  assertFalse(onThreadStartInvoked.get());
  assertFalse(onThreadCompleteInvoked.get());
  assertFalse(executionAttempted.get());
  assertEquals(0,semaphoreCmd.metrics.getCurrentConcurrentExecutionCount());
}
