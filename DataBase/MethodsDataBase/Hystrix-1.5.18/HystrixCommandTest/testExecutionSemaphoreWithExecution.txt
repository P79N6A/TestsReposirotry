@Test public void testExecutionSemaphoreWithExecution() throws Exception {
  final TestCircuitBreaker circuitBreaker=new TestCircuitBreaker();
  TestSemaphoreCommand command1=new TestSemaphoreCommand(circuitBreaker,1,200,TestSemaphoreCommand.RESULT_SUCCESS,TestSemaphoreCommand.FALLBACK_NOT_IMPLEMENTED);
  boolean result=command1.execute();
  assertFalse(command1.isExecutedInThread());
  assertTrue(result);
  final ArrayBlockingQueue<Boolean> results=new ArrayBlockingQueue<Boolean>(2);
  final AtomicBoolean exceptionReceived=new AtomicBoolean();
  final TryableSemaphore semaphore=new TryableSemaphoreActual(HystrixProperty.Factory.asProperty(1));
  final TestSemaphoreCommand command2=new TestSemaphoreCommand(circuitBreaker,semaphore,200,TestSemaphoreCommand.RESULT_SUCCESS,TestSemaphoreCommand.FALLBACK_NOT_IMPLEMENTED);
  Runnable r2=new HystrixContextRunnable(HystrixPlugins.getInstance().getConcurrencyStrategy(),new Runnable(){
    @Override public void run(){
      try {
        results.add(command2.execute());
      }
 catch (      Exception e) {
        e.printStackTrace();
        exceptionReceived.set(true);
      }
    }
  }
);
  final TestSemaphoreCommand command3=new TestSemaphoreCommand(circuitBreaker,semaphore,200,TestSemaphoreCommand.RESULT_SUCCESS,TestSemaphoreCommand.FALLBACK_NOT_IMPLEMENTED);
  Runnable r3=new HystrixContextRunnable(HystrixPlugins.getInstance().getConcurrencyStrategy(),new Runnable(){
    @Override public void run(){
      try {
        results.add(command3.execute());
      }
 catch (      Exception e) {
        e.printStackTrace();
        exceptionReceived.set(true);
      }
    }
  }
);
  Thread t2=new Thread(r2);
  Thread t3=new Thread(r3);
  t2.start();
  Thread.sleep(50);
  t3.start();
  t2.join();
  t3.join();
  if (!exceptionReceived.get()) {
    fail("We expected an exception on the 2nd get");
  }
  assertEquals(1,results.size());
  assertTrue(results.contains(Boolean.TRUE));
  assertFalse(results.contains(Boolean.FALSE));
  assertCommandExecutionEvents(command1,HystrixEventType.SUCCESS);
  assertCommandExecutionEvents(command2,HystrixEventType.SUCCESS);
  assertCommandExecutionEvents(command3,HystrixEventType.SEMAPHORE_REJECTED,HystrixEventType.FALLBACK_MISSING);
  assertEquals(0,circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(3);
}
