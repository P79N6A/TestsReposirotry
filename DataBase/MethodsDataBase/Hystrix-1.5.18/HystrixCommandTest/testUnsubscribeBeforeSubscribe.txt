@Test public void testUnsubscribeBeforeSubscribe() throws Exception {
  Observable<String> error=Observable.error(new RuntimeException("foo"));
  HystrixCommand<Integer> cmd=getCommand(ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.ExecutionResult.SUCCESS,100);
  Observable<Integer> cmdResult=cmd.toObservable().doOnNext(new Action1<Integer>(){
    @Override public void call(    Integer integer){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " : OnNext : "+ integer);
    }
  }
).doOnError(new Action1<Throwable>(){
    @Override public void call(    Throwable ex){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " : OnError : "+ ex);
    }
  }
).doOnCompleted(new Action0(){
    @Override public void call(){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " : OnCompleted");
    }
  }
).doOnSubscribe(new Action0(){
    @Override public void call(){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " : OnSubscribe");
    }
  }
).doOnUnsubscribe(new Action0(){
    @Override public void call(){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " : OnUnsubscribe");
    }
  }
);
  Observable<String> zipped=Observable.zip(error,cmdResult,new Func2<String,Integer,String>(){
    @Override public String call(    String s,    Integer integer){
      return s + integer;
    }
  }
);
  final CountDownLatch latch=new CountDownLatch(1);
  zipped.subscribe(new Subscriber<String>(){
    @Override public void onCompleted(){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " OnCompleted");
      latch.countDown();
    }
    @Override public void onError(    Throwable e){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " OnError : "+ e);
      latch.countDown();
    }
    @Override public void onNext(    String s){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " OnNext : "+ s);
    }
  }
);
  latch.await(1000,TimeUnit.MILLISECONDS);
  System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
}
