/** 
 * Test a recoverable java.lang.Error being thrown with no fallback
 */
@Test public void testRecoverableErrorWithNoFallbackThrowsError(){
  TestHystrixCommand<Integer> command=getRecoverableErrorCommand(ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.FallbackResult.UNIMPLEMENTED);
  try {
    command.execute();
    fail("we expect to receive a " + Error.class.getSimpleName());
  }
 catch (  Exception e) {
    assertEquals("Execution ERROR for TestHystrixCommand",e.getCause().getCause().getMessage());
  }
  assertEquals("Execution ERROR for TestHystrixCommand",command.getFailedExecutionException().getCause().getMessage());
  assertTrue(command.getExecutionTimeInMilliseconds() > -1);
  assertTrue(command.isFailedExecution());
  assertCommandExecutionEvents(command,HystrixEventType.FAILURE,HystrixEventType.FALLBACK_MISSING);
  assertNotNull(command.getExecutionException());
  assertEquals(0,command.metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(1);
}
