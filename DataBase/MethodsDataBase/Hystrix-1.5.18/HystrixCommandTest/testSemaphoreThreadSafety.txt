@Test @Ignore("Flaky test") public void testSemaphoreThreadSafety(){
  final int NUM_PERMITS=1;
  final TryableSemaphoreActual s=new TryableSemaphoreActual(HystrixProperty.Factory.asProperty(NUM_PERMITS));
  final int NUM_THREADS=10;
  ExecutorService threadPool=Executors.newFixedThreadPool(NUM_THREADS);
  final int NUM_TRIALS=100;
  for (int t=0; t < NUM_TRIALS; t++) {
    System.out.println("TRIAL : " + t);
    final AtomicInteger numAcquired=new AtomicInteger(0);
    final CountDownLatch latch=new CountDownLatch(NUM_THREADS);
    for (int i=0; i < NUM_THREADS; i++) {
      threadPool.submit(new Runnable(){
        @Override public void run(){
          boolean acquired=s.tryAcquire();
          if (acquired) {
            try {
              numAcquired.incrementAndGet();
              Thread.sleep(100);
            }
 catch (            InterruptedException ex) {
              ex.printStackTrace();
            }
 finally {
              s.release();
            }
          }
          latch.countDown();
        }
      }
);
    }
    try {
      assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
    }
 catch (    InterruptedException ex) {
      fail(ex.getMessage());
    }
    assertEquals("Number acquired should be equal to the number of permits",NUM_PERMITS,numAcquired.get());
    assertEquals("Semaphore should always get released back to 0",0,s.getNumberOfPermitsUsed());
  }
}
