/** 
 * Test that the circuit-breaker is shared across HystrixCommand objects with the same CommandKey. <p> This will test HystrixCommand objects with a single circuit-breaker (as if each injected with same CommandKey) <p> Multiple HystrixCommand objects with the same dependency use the same circuit-breaker.
 */
@Test public void testCircuitBreakerAcrossMultipleCommandsButSameCircuitBreaker() throws InterruptedException {
  HystrixCommandKey key=HystrixCommandKey.Factory.asKey("SharedCircuitBreaker");
  TestCircuitBreaker circuitBreaker=new TestCircuitBreaker(key);
  TestHystrixCommand<Integer> attempt1=getSharedCircuitBreakerCommand(key,ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.FallbackResult.SUCCESS,circuitBreaker);
  System.out.println("COMMAND KEY (from cmd): " + attempt1.commandKey.name());
  attempt1.execute();
  Thread.sleep(100);
  assertTrue(attempt1.isResponseFromFallback());
  assertFalse(attempt1.isCircuitBreakerOpen());
  assertFalse(attempt1.isResponseShortCircuited());
  TestHystrixCommand<Integer> attempt2=getSharedCircuitBreakerCommand(key,ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.FallbackResult.SUCCESS,circuitBreaker);
  attempt2.execute();
  Thread.sleep(100);
  assertTrue(attempt2.isFailedExecution());
  assertTrue(attempt2.isResponseFromFallback());
  assertFalse(attempt2.isCircuitBreakerOpen());
  assertFalse(attempt2.isResponseShortCircuited());
  TestHystrixCommand<Integer> attempt3=getSharedCircuitBreakerCommand(key,ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.FallbackResult.SUCCESS,circuitBreaker);
  attempt3.execute();
  Thread.sleep(100);
  assertTrue(attempt3.isFailedExecution());
  assertTrue(attempt3.isResponseFromFallback());
  assertFalse(attempt3.isResponseShortCircuited());
  assertTrue(attempt3.isCircuitBreakerOpen());
  TestHystrixCommand<Integer> attempt4=getSharedCircuitBreakerCommand(key,ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.FallbackResult.SUCCESS,circuitBreaker);
  attempt4.execute();
  Thread.sleep(100);
  assertTrue(attempt4.isResponseFromFallback());
  assertTrue(attempt4.isResponseShortCircuited());
  assertTrue(attempt4.isCircuitBreakerOpen());
  assertSaneHystrixRequestLog(4);
  assertCommandExecutionEvents(attempt1,HystrixEventType.FAILURE,HystrixEventType.FALLBACK_SUCCESS);
  assertCommandExecutionEvents(attempt2,HystrixEventType.FAILURE,HystrixEventType.FALLBACK_SUCCESS);
  assertCommandExecutionEvents(attempt3,HystrixEventType.FAILURE,HystrixEventType.FALLBACK_SUCCESS);
  assertCommandExecutionEvents(attempt4,HystrixEventType.SHORT_CIRCUITED,HystrixEventType.FALLBACK_SUCCESS);
}
