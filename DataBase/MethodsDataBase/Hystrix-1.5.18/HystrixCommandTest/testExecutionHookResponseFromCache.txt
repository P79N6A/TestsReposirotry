/** 
 * Short-circuit? : NO Request-cache? : YES
 */
@Test public void testExecutionHookResponseFromCache(){
  final HystrixCommandKey key=HystrixCommandKey.Factory.asKey("Hook-Cache");
  getCommand(key,ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.ExecutionResult.SUCCESS,0,AbstractTestHystrixCommand.FallbackResult.UNIMPLEMENTED,0,new HystrixCircuitBreakerTest.TestCircuitBreaker(),null,100,AbstractTestHystrixCommand.CacheEnabled.YES,42,10,10).observe();
  assertHooksOnSuccess(new Func0<TestHystrixCommand<Integer>>(){
    @Override public TestHystrixCommand<Integer> call(){
      return getCommand(key,ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.ExecutionResult.SUCCESS,0,AbstractTestHystrixCommand.FallbackResult.UNIMPLEMENTED,0,new HystrixCircuitBreakerTest.TestCircuitBreaker(),null,100,AbstractTestHystrixCommand.CacheEnabled.YES,42,10,10);
    }
  }
,new Action1<TestHystrixCommand<Integer>>(){
    @Override public void call(    TestHystrixCommand<Integer> command){
      TestableExecutionHook hook=command.getBuilder().executionHook;
      assertTrue(hook.commandEmissionsMatch(0,0,0));
      assertTrue(hook.executionEventsMatch(0,0,0));
      assertTrue(hook.fallbackEventsMatch(0,0,0));
      assertEquals("onCacheHit - ",hook.executionSequence.toString());
    }
  }
);
}
