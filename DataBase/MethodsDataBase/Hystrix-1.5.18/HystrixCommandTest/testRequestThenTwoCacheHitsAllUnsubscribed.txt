@Test public void testRequestThenTwoCacheHitsAllUnsubscribed(){
  AsyncCacheableCommand original=new AsyncCacheableCommand("foo");
  AsyncCacheableCommand fromCache1=new AsyncCacheableCommand("foo");
  AsyncCacheableCommand fromCache2=new AsyncCacheableCommand("foo");
  final CountDownLatch originalLatch=new CountDownLatch(1);
  final CountDownLatch fromCache1Latch=new CountDownLatch(1);
  final CountDownLatch fromCache2Latch=new CountDownLatch(1);
  Observable<Boolean> originalObservable=original.toObservable();
  Observable<Boolean> fromCache1Observable=fromCache1.toObservable();
  Observable<Boolean> fromCache2Observable=fromCache2.toObservable();
  Subscription originalSubscription=originalObservable.doOnUnsubscribe(new Action0(){
    @Override public void call(){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Test.Original Unsubscribe");
      originalLatch.countDown();
    }
  }
).subscribe(new Subscriber<Boolean>(){
    @Override public void onCompleted(){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Test.Original OnCompleted");
      originalLatch.countDown();
    }
    @Override public void onError(    Throwable e){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Test.Original OnError : "+ e);
      originalLatch.countDown();
    }
    @Override public void onNext(    Boolean b){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Test.Original OnNext : "+ b);
    }
  }
);
  Subscription fromCache1Subscription=fromCache1Observable.doOnUnsubscribe(new Action0(){
    @Override public void call(){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Test.FromCache1 Unsubscribe");
      fromCache1Latch.countDown();
    }
  }
).subscribe(new Subscriber<Boolean>(){
    @Override public void onCompleted(){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Test.FromCache1 OnCompleted");
      fromCache1Latch.countDown();
    }
    @Override public void onError(    Throwable e){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Test.FromCache1 OnError : "+ e);
      fromCache1Latch.countDown();
    }
    @Override public void onNext(    Boolean b){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Test.FromCache1 OnNext : "+ b);
    }
  }
);
  Subscription fromCache2Subscription=fromCache2Observable.doOnUnsubscribe(new Action0(){
    @Override public void call(){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Test.FromCache2 Unsubscribe");
      fromCache2Latch.countDown();
    }
  }
).subscribe(new Subscriber<Boolean>(){
    @Override public void onCompleted(){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Test.FromCache2 OnCompleted");
      fromCache2Latch.countDown();
    }
    @Override public void onError(    Throwable e){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Test.FromCache2 OnError : "+ e);
      fromCache2Latch.countDown();
    }
    @Override public void onNext(    Boolean b){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Test.FromCache2 OnNext : "+ b);
    }
  }
);
  try {
    Thread.sleep(10);
    originalSubscription.unsubscribe();
    fromCache1Subscription.unsubscribe();
    fromCache2Subscription.unsubscribe();
    assertTrue(originalLatch.await(200,TimeUnit.MILLISECONDS));
    assertTrue(fromCache1Latch.await(200,TimeUnit.MILLISECONDS));
    assertTrue(fromCache2Latch.await(200,TimeUnit.MILLISECONDS));
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    assertEquals("Number of execution semaphores in use (original)",0,original.getExecutionSemaphore().getNumberOfPermitsUsed());
    assertEquals("Number of fallback semaphores in use (original)",0,original.getFallbackSemaphore().getNumberOfPermitsUsed());
    assertFalse(original.isExecutionComplete());
    assertTrue(original.isExecutedInThread());
    System.out.println("FEE : " + original.getFailedExecutionException());
    if (original.getFailedExecutionException() != null) {
      original.getFailedExecutionException().printStackTrace();
    }
    assertNull(original.getFailedExecutionException());
    assertNull(original.getExecutionException());
    assertTrue(original.getExecutionTimeInMilliseconds() > -1);
    assertFalse(original.isSuccessfulExecution());
    assertCommandExecutionEvents(original,HystrixEventType.CANCELLED);
    assertEquals(0,original.metrics.getCurrentConcurrentExecutionCount());
    assertEquals("Number of execution semaphores in use (fromCache1)",0,fromCache1.getExecutionSemaphore().getNumberOfPermitsUsed());
    assertEquals("Number of fallback semaphores in use (fromCache1)",0,fromCache1.getFallbackSemaphore().getNumberOfPermitsUsed());
    assertFalse(fromCache1.isExecutionComplete());
    assertFalse(fromCache1.isExecutedInThread());
    assertEquals(null,fromCache1.getFailedExecutionException());
    assertNull(fromCache1.getExecutionException());
    assertCommandExecutionEvents(fromCache1,HystrixEventType.RESPONSE_FROM_CACHE,HystrixEventType.CANCELLED);
    assertTrue(fromCache1.getExecutionTimeInMilliseconds() == -1);
    assertFalse(fromCache1.isSuccessfulExecution());
    assertEquals(0,fromCache1.metrics.getCurrentConcurrentExecutionCount());
    assertEquals("Number of execution semaphores in use (fromCache2)",0,fromCache2.getExecutionSemaphore().getNumberOfPermitsUsed());
    assertEquals("Number of fallback semaphores in use (fromCache2)",0,fromCache2.getFallbackSemaphore().getNumberOfPermitsUsed());
    assertFalse(fromCache2.isExecutionComplete());
    assertFalse(fromCache2.isExecutedInThread());
    assertEquals(null,fromCache2.getFailedExecutionException());
    assertNull(fromCache2.getExecutionException());
    assertCommandExecutionEvents(fromCache2,HystrixEventType.RESPONSE_FROM_CACHE,HystrixEventType.CANCELLED);
    assertTrue(fromCache2.getExecutionTimeInMilliseconds() == -1);
    assertFalse(fromCache2.isSuccessfulExecution());
    assertEquals(0,fromCache2.metrics.getCurrentConcurrentExecutionCount());
    assertSaneHystrixRequestLog(3);
  }
 catch (  InterruptedException ex) {
    ex.printStackTrace();
  }
}
