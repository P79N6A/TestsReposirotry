@Test public void testRequestCacheOnThreadRejectionThrowsException() throws Exception {
  TestCircuitBreaker circuitBreaker=new TestCircuitBreaker();
  CountDownLatch completionLatch=new CountDownLatch(1);
  RequestCacheThreadRejectionWithoutFallback r1=new RequestCacheThreadRejectionWithoutFallback(circuitBreaker,completionLatch);
  try {
    System.out.println("r1: " + r1.execute());
    fail("expected a rejection");
  }
 catch (  HystrixRuntimeException e) {
    assertTrue(r1.isResponseRejected());
  }
  RequestCacheThreadRejectionWithoutFallback r2=new RequestCacheThreadRejectionWithoutFallback(circuitBreaker,completionLatch);
  try {
    System.out.println("r2: " + r2.execute());
    fail("expected a rejection");
  }
 catch (  HystrixRuntimeException e) {
    assertTrue(r2.isResponseRejected());
  }
  RequestCacheThreadRejectionWithoutFallback r3=new RequestCacheThreadRejectionWithoutFallback(circuitBreaker,completionLatch);
  try {
    System.out.println("f3: " + r3.queue().get());
    fail("expected a rejection");
  }
 catch (  HystrixRuntimeException e) {
    assertTrue(r3.isResponseRejected());
  }
  completionLatch.countDown();
  RequestCacheThreadRejectionWithoutFallback r4=new RequestCacheThreadRejectionWithoutFallback(circuitBreaker,completionLatch);
  try {
    System.out.println("r4: " + r4.execute());
    fail("expected a rejection");
  }
 catch (  HystrixRuntimeException e) {
    assertTrue(r4.isResponseRejected());
    assertFalse(r4.isResponseFromFallback());
  }
  assertCommandExecutionEvents(r1,HystrixEventType.THREAD_POOL_REJECTED,HystrixEventType.FALLBACK_MISSING);
  assertCommandExecutionEvents(r2,HystrixEventType.THREAD_POOL_REJECTED,HystrixEventType.FALLBACK_MISSING,HystrixEventType.RESPONSE_FROM_CACHE);
  assertCommandExecutionEvents(r3,HystrixEventType.THREAD_POOL_REJECTED,HystrixEventType.FALLBACK_MISSING,HystrixEventType.RESPONSE_FROM_CACHE);
  assertCommandExecutionEvents(r4,HystrixEventType.THREAD_POOL_REJECTED,HystrixEventType.FALLBACK_MISSING,HystrixEventType.RESPONSE_FROM_CACHE);
  assertEquals(0,circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(4);
}
