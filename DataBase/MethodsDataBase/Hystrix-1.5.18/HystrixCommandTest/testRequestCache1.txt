/** 
 * Test Request scoped caching of commands so that a 2nd duplicate call doesn't execute but returns the previous Future
 */
@Test public void testRequestCache1() throws Exception {
  TestCircuitBreaker circuitBreaker=new TestCircuitBreaker();
  SuccessfulCacheableCommand<String> command1=new SuccessfulCacheableCommand<String>(circuitBreaker,true,"A");
  SuccessfulCacheableCommand<String> command2=new SuccessfulCacheableCommand<String>(circuitBreaker,true,"A");
  assertTrue(command1.isCommandRunningInThread());
  Future<String> f1=command1.queue();
  Future<String> f2=command2.queue();
  assertEquals("A",f1.get());
  assertEquals("A",f2.get());
  assertTrue(command1.executed);
  assertFalse(command2.executed);
  assertTrue(command1.getExecutionTimeInMilliseconds() > -1);
  assertFalse(command1.isResponseFromCache());
  assertTrue(command2.isResponseFromCache());
  assertCommandExecutionEvents(command1,HystrixEventType.SUCCESS);
  assertCommandExecutionEvents(command2,HystrixEventType.SUCCESS,HystrixEventType.RESPONSE_FROM_CACHE);
  assertEquals(0,circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(2);
}
