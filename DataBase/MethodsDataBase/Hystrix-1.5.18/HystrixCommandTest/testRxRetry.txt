@Test public void testRxRetry() throws Exception {
  HystrixCommand<Integer> cmd=getLatentCommand(ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.ExecutionResult.FAILURE,300,AbstractTestHystrixCommand.FallbackResult.UNIMPLEMENTED,100);
  final CountDownLatch latch=new CountDownLatch(1);
  System.out.println(System.currentTimeMillis() + " : Starting");
  Observable<Integer> o=cmd.toObservable().retry(2);
  System.out.println(System.currentTimeMillis() + " Created retried command : " + o);
  o.subscribe(new Subscriber<Integer>(){
    @Override public void onCompleted(){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " : OnCompleted");
      latch.countDown();
    }
    @Override public void onError(    Throwable e){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " : OnError : "+ e);
      latch.countDown();
    }
    @Override public void onNext(    Integer integer){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " : OnNext : "+ integer);
    }
  }
);
  latch.await(1000,TimeUnit.MILLISECONDS);
  System.out.println(System.currentTimeMillis() + " ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
}
