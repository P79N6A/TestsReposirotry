/** 
 * Short-circuit? : NO Thread/semaphore: THREAD Thread Pool full? : NO Thread Pool Queue full?: NO Timeout: YES Execution Result: SUCCESS (but timeout prior) Fallback: SUCCESS
 */
@Test public void testExecutionHookThreadTimeoutSuccessfulFallbackRunSuccess(){
  assertHooksOnSuccess(new Func0<TestHystrixCommand<Integer>>(){
    @Override public TestHystrixCommand<Integer> call(){
      return getCommand(ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.ExecutionResult.SUCCESS,500,AbstractTestHystrixCommand.FallbackResult.SUCCESS,200);
    }
  }
,new Action1<TestHystrixCommand<Integer>>(){
    @Override public void call(    TestHystrixCommand<Integer> command){
      TestableExecutionHook hook=command.getBuilder().executionHook;
      assertTrue(hook.commandEmissionsMatch(1,0,1));
      assertTrue(hook.executionEventsMatch(0,0,0));
      assertTrue(hook.fallbackEventsMatch(1,0,1));
      System.out.println("RequestLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
      assertEquals("onStart - onThreadStart - !onRunStart - onExecutionStart - onThreadComplete - onFallbackStart - onFallbackEmit - !onFallbackSuccess - !onComplete - onEmit - onFallbackSuccess - onSuccess - ",hook.executionSequence.toString());
    }
  }
);
}
