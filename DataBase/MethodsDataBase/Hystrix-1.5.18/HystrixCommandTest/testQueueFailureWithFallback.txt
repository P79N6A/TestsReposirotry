/** 
 * Test a command execution (asynchronously) that fails but has a fallback.
 */
@Test public void testQueueFailureWithFallback(){
  TestHystrixCommand<Integer> command=getCommand(ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.ExecutionResult.FAILURE,AbstractTestHystrixCommand.FallbackResult.SUCCESS);
  try {
    Future<Integer> future=command.queue();
    assertEquals(FlexibleTestHystrixCommand.FALLBACK_VALUE,future.get());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("We should have received a response from the fallback.");
  }
  assertTrue(command.getExecutionTimeInMilliseconds() > -1);
  assertTrue(command.isFailedExecution());
  assertCommandExecutionEvents(command,HystrixEventType.FAILURE,HystrixEventType.FALLBACK_SUCCESS);
  assertNotNull(command.getExecutionException());
  assertEquals(0,command.getBuilder().metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(1);
}
