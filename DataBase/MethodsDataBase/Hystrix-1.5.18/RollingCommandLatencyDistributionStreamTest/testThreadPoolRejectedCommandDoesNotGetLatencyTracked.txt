@Test public void testThreadPoolRejectedCommandDoesNotGetLatencyTracked(){
  HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-Latency-E");
  stream=RollingCommandLatencyDistributionStream.getInstance(key,10,100);
  stream.startCachingStreamValuesIfUnstarted();
  List<Command> commands=new ArrayList<Command>();
  for (int i=0; i < 10; i++) {
    commands.add(Command.from(groupKey,key,HystrixEventType.SUCCESS,200));
  }
  final CountDownLatch latch=new CountDownLatch(1);
  stream.observe().take(10).subscribe(new Subscriber<CachedValuesHistogram>(){
    @Override public void onCompleted(){
      latch.countDown();
    }
    @Override public void onError(    Throwable e){
      fail(e.getMessage());
    }
    @Override public void onNext(    CachedValuesHistogram distribution){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Received distribution with count : "+ distribution.getTotalCount()+ " and mean : "+ distribution.getMean());
    }
  }
);
  for (  Command cmd : commands) {
    cmd.observe();
  }
  Command threadPoolRejected=Command.from(groupKey,key,HystrixEventType.SUCCESS);
  try {
    Thread.sleep(40);
    threadPoolRejected.observe();
  }
 catch (  InterruptedException ie) {
    fail(ie.getMessage());
  }
  try {
    assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
  }
 catch (  InterruptedException ex) {
    fail("Interrupted ex");
  }
  assertEquals(10,stream.getLatest().getTotalCount());
  assertBetween(200,250,stream.getLatestMean());
  System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
  assertTrue(threadPoolRejected.isResponseThreadPoolRejected());
}
