@Test public void testSingleBucketGetsStored(){
  HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-Latency-B");
  stream=RollingCommandLatencyDistributionStream.getInstance(key,10,100);
  stream.startCachingStreamValuesIfUnstarted();
  final CountDownLatch latch=new CountDownLatch(1);
  stream.observe().take(10).subscribe(new Subscriber<CachedValuesHistogram>(){
    @Override public void onCompleted(){
      latch.countDown();
    }
    @Override public void onError(    Throwable e){
      fail(e.getMessage());
    }
    @Override public void onNext(    CachedValuesHistogram distribution){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " Received distribution with count : "+ distribution.getTotalCount()+ " and mean : "+ distribution.getMean());
      if (distribution.getTotalCount() == 1) {
        assertBetween(10,50,(int)distribution.getMean());
      }
 else       if (distribution.getTotalCount() == 2) {
        assertBetween(300,400,(int)distribution.getMean());
      }
    }
  }
);
  Command cmd1=Command.from(groupKey,key,HystrixEventType.SUCCESS,10);
  Command cmd2=Command.from(groupKey,key,HystrixEventType.TIMEOUT);
  cmd1.observe();
  cmd2.observe();
  try {
    assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
  }
 catch (  InterruptedException ex) {
    fail("Interrupted ex");
  }
  assertBetween(150,400,stream.getLatestMean());
  assertBetween(10,50,stream.getLatestPercentile(0.0));
  assertBetween(300,800,stream.getLatestPercentile(100.0));
}
