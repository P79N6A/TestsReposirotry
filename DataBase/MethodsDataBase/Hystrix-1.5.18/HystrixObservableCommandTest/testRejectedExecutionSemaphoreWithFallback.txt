@Test public void testRejectedExecutionSemaphoreWithFallback(){
  final TestCircuitBreaker circuitBreaker=new TestCircuitBreaker();
  final ArrayBlockingQueue<Boolean> results=new ArrayBlockingQueue<Boolean>(2);
  final AtomicBoolean exceptionReceived=new AtomicBoolean();
  final TestSemaphoreCommandWithFallback command1=new TestSemaphoreCommandWithFallback(circuitBreaker,1,200,false);
  Runnable r1=new HystrixContextRunnable(HystrixPlugins.getInstance().getConcurrencyStrategy(),new Runnable(){
    @Override public void run(){
      try {
        results.add(command1.observe().toBlocking().single());
      }
 catch (      Exception e) {
        e.printStackTrace();
        exceptionReceived.set(true);
      }
    }
  }
);
  final TestSemaphoreCommandWithFallback command2=new TestSemaphoreCommandWithFallback(circuitBreaker,1,200,false);
  Runnable r2=new HystrixContextRunnable(HystrixPlugins.getInstance().getConcurrencyStrategy(),new Runnable(){
    @Override public void run(){
      try {
        results.add(command2.observe().toBlocking().single());
      }
 catch (      Exception e) {
        e.printStackTrace();
        exceptionReceived.set(true);
      }
    }
  }
);
  Thread t1=new Thread(r1);
  Thread t2=new Thread(r2);
  t1.start();
  try {
    Thread.sleep(50);
  }
 catch (  InterruptedException ex) {
    fail(ex.getMessage());
  }
  t2.start();
  try {
    t1.join();
    t2.join();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("failed waiting on threads");
  }
  if (exceptionReceived.get()) {
    fail("We should have received a fallback response");
  }
  assertEquals(2,results.size());
  assertTrue(results.contains(Boolean.TRUE));
  assertTrue(results.contains(Boolean.FALSE));
  assertCommandExecutionEvents(command1,HystrixEventType.EMIT,HystrixEventType.SUCCESS);
  assertCommandExecutionEvents(command2,HystrixEventType.SEMAPHORE_REJECTED,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_SUCCESS);
  assertEquals(0,command1.metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(2);
}
