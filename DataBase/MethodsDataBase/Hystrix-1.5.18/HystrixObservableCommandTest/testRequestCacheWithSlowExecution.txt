/** 
 * Test Request scoped caching of commands so that a 2nd duplicate call doesn't execute but returns the previous Future
 */
@Test public void testRequestCacheWithSlowExecution(){
  TestCircuitBreaker circuitBreaker=new TestCircuitBreaker();
  SlowCacheableCommand command1=new SlowCacheableCommand(circuitBreaker,"A",200);
  SlowCacheableCommand command2=new SlowCacheableCommand(circuitBreaker,"A",100);
  SlowCacheableCommand command3=new SlowCacheableCommand(circuitBreaker,"A",100);
  SlowCacheableCommand command4=new SlowCacheableCommand(circuitBreaker,"A",100);
  Future<String> f1=command1.observe().toBlocking().toFuture();
  Future<String> f2=command2.observe().toBlocking().toFuture();
  Future<String> f3=command3.observe().toBlocking().toFuture();
  Future<String> f4=command4.observe().toBlocking().toFuture();
  try {
    assertEquals("A",f2.get());
    assertEquals("A",f3.get());
    assertEquals("A",f4.get());
    assertEquals("A",f1.get());
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  assertTrue(command1.executed);
  assertFalse(command2.executed);
  assertFalse(command3.executed);
  assertFalse(command4.executed);
  assertCommandExecutionEvents(command1,HystrixEventType.EMIT,HystrixEventType.SUCCESS);
  assertTrue(command1.getExecutionTimeInMilliseconds() > -1);
  assertFalse(command1.isResponseFromCache());
  assertCommandExecutionEvents(command2,HystrixEventType.EMIT,HystrixEventType.SUCCESS,HystrixEventType.RESPONSE_FROM_CACHE);
  assertTrue(command2.getExecutionTimeInMilliseconds() == -1);
  assertTrue(command2.isResponseFromCache());
  assertCommandExecutionEvents(command3,HystrixEventType.EMIT,HystrixEventType.SUCCESS,HystrixEventType.RESPONSE_FROM_CACHE);
  assertTrue(command3.isResponseFromCache());
  assertTrue(command3.getExecutionTimeInMilliseconds() == -1);
  assertCommandExecutionEvents(command4,HystrixEventType.EMIT,HystrixEventType.SUCCESS,HystrixEventType.RESPONSE_FROM_CACHE);
  assertTrue(command4.isResponseFromCache());
  assertTrue(command4.getExecutionTimeInMilliseconds() == -1);
  assertSaneHystrixRequestLog(4);
  assertFalse(command1.isExecutedInThread());
  assertFalse(command2.isExecutedInThread());
  assertFalse(command3.isExecutedInThread());
  assertFalse(command4.isExecutedInThread());
}
