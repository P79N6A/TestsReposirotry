/** 
 * Test Request scoped caching with a mixture of commands
 */
@Test public void testNoRequestCache3UsingThreadIsolation(){
  TestCircuitBreaker circuitBreaker=new TestCircuitBreaker();
  SuccessfulCacheableCommand<String> command1=new SuccessfulCacheableCommand<String>(circuitBreaker,false,"A");
  SuccessfulCacheableCommand<String> command2=new SuccessfulCacheableCommand<String>(circuitBreaker,false,"B");
  SuccessfulCacheableCommand<String> command3=new SuccessfulCacheableCommand<String>(circuitBreaker,false,"A");
  assertTrue(command1.isCommandRunningInThread());
  Future<String> f1=command1.observe().toBlocking().toFuture();
  Future<String> f2=command2.observe().toBlocking().toFuture();
  Future<String> f3=command3.observe().toBlocking().toFuture();
  try {
    assertEquals("A",f1.get());
    assertEquals("B",f2.get());
    assertEquals("A",f3.get());
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  assertTrue(command1.executed);
  assertTrue(command2.executed);
  assertTrue(command3.executed);
  assertCommandExecutionEvents(command1,HystrixEventType.EMIT,HystrixEventType.SUCCESS);
  assertCommandExecutionEvents(command2,HystrixEventType.EMIT,HystrixEventType.SUCCESS);
  assertCommandExecutionEvents(command3,HystrixEventType.EMIT,HystrixEventType.SUCCESS);
  assertEquals(0,circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(3);
  assertTrue(command1.isExecutedInThread());
  assertTrue(command2.isExecutedInThread());
  assertTrue(command3.isExecutedInThread());
}
