@Test public void testRequestCacheOnTimeoutCausesNullPointerException() throws Exception {
  TestCircuitBreaker circuitBreaker=new TestCircuitBreaker();
  RequestCacheNullPointerExceptionCase command1=new RequestCacheNullPointerExceptionCase(circuitBreaker);
  RequestCacheNullPointerExceptionCase command2=new RequestCacheNullPointerExceptionCase(circuitBreaker);
  RequestCacheNullPointerExceptionCase command3=new RequestCacheNullPointerExceptionCase(circuitBreaker);
  RequestCacheNullPointerExceptionCase command4=new RequestCacheNullPointerExceptionCase(circuitBreaker);
  RequestCacheNullPointerExceptionCase command5=new RequestCacheNullPointerExceptionCase(circuitBreaker);
  assertFalse(command1.observe().toBlocking().single());
  assertFalse(command2.observe().toBlocking().single());
  assertFalse(command3.observe().toBlocking().single());
  Thread.sleep(500);
  Boolean value=command4.observe().toBlocking().single();
  assertFalse(value);
  Future<Boolean> f=command5.observe().toBlocking().toFuture();
  assertNotNull(f);
  assertFalse(f.get());
  assertTrue(command5.isResponseFromFallback());
  assertTrue(command5.isResponseTimedOut());
  assertFalse(command5.isFailedExecution());
  assertFalse(command5.isResponseShortCircuited());
  assertNotNull(command5.getExecutionException());
  assertCommandExecutionEvents(command1,HystrixEventType.TIMEOUT,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_SUCCESS);
  assertCommandExecutionEvents(command2,HystrixEventType.TIMEOUT,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_SUCCESS,HystrixEventType.RESPONSE_FROM_CACHE);
  assertCommandExecutionEvents(command3,HystrixEventType.TIMEOUT,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_SUCCESS,HystrixEventType.RESPONSE_FROM_CACHE);
  assertCommandExecutionEvents(command4,HystrixEventType.TIMEOUT,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_SUCCESS,HystrixEventType.RESPONSE_FROM_CACHE);
  assertCommandExecutionEvents(command5,HystrixEventType.TIMEOUT,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_SUCCESS,HystrixEventType.RESPONSE_FROM_CACHE);
  assertEquals(0,circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(5);
}
