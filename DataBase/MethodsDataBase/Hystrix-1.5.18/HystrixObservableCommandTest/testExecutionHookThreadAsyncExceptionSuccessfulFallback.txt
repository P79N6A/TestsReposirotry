/** 
 * Short-circuitInteger : NO Thread/semaphore: THREAD Thread Pool fullInteger : NO Thread Pool Queue fullInteger: NO Timeout: NO Execution Result: async HystrixRuntimeException Fallback: SUCCESS
 */
@Test public void testExecutionHookThreadAsyncExceptionSuccessfulFallback(){
  assertHooksOnSuccess(new Func0<TestHystrixObservableCommand<Integer>>(){
    @Override public TestHystrixObservableCommand<Integer> call(){
      return getCommand(ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.ExecutionResult.ASYNC_FAILURE,AbstractTestHystrixCommand.FallbackResult.SUCCESS);
    }
  }
,new Action1<TestHystrixObservableCommand<Integer>>(){
    @Override public void call(    TestHystrixObservableCommand<Integer> command){
      TestableExecutionHook hook=command.getBuilder().executionHook;
      assertTrue(hook.commandEmissionsMatch(1,0,1));
      assertTrue(hook.executionEventsMatch(0,1,0));
      assertTrue(hook.fallbackEventsMatch(1,0,1));
      assertEquals(RuntimeException.class,hook.getExecutionException().getClass());
      assertEquals("onStart - onThreadStart - !onRunStart - onExecutionStart - onExecutionError - !onRunError - onThreadComplete - onFallbackStart - onFallbackEmit - !onFallbackSuccess - !onComplete - onEmit - onFallbackSuccess - onSuccess - ",command.getBuilder().executionHook.executionSequence.toString());
    }
  }
);
}
