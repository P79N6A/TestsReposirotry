/** 
 * Test behavior when some onNext are received and then a failure.
 */
@Test public void testExecutionPartialSuccess(){
  try {
    TestPartialSuccess command=new TestPartialSuccess();
    TestSubscriber<Integer> ts=new TestSubscriber<Integer>();
    command.toObservable().subscribe(ts);
    ts.awaitTerminalEvent();
    ts.assertReceivedOnNext(Arrays.asList(1,2,3));
    assertEquals(1,ts.getOnErrorEvents().size());
    assertFalse(command.isSuccessfulExecution());
    assertTrue(command.isFailedExecution());
    assertNotNull(command.getFailedExecutionException());
    assertTrue(command.getExecutionTimeInMilliseconds() > -1);
    assertCommandExecutionEvents(command,HystrixEventType.EMIT,HystrixEventType.EMIT,HystrixEventType.EMIT,HystrixEventType.FAILURE,HystrixEventType.FALLBACK_MISSING);
    assertSaneHystrixRequestLog(1);
    assertEquals(0,command.metrics.getCurrentConcurrentExecutionCount());
    assertFalse(command.isExecutedInThread());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("We received an exception.");
  }
}
