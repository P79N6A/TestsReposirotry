/** 
 * Async Observable and semaphore isolation WITH functioning RequestContext Use HystrixContextScheduler to make the user provided scheduler capture context.
 */
@Test public void testTimeoutWithFallbackRequestContextWithSemaphoreIsolatedAsynchronousObservableAndCapturedContextScheduler(){
  RequestContextTestResults results=testRequestContextOnTimeoutWithFallback(ExecutionIsolationStrategy.SEMAPHORE,new HystrixContextScheduler(Schedulers.newThread()));
  assertTrue(results.isContextInitialized.get());
  assertTrue(results.originThread.get().getName().startsWith("RxNewThread"));
  assertTrue(results.isContextInitializedObserveOn.get());
  assertTrue(results.observeOnThread.get().getName().startsWith("RxNewThread"));
  assertFalse(results.command.isExecutedInThread());
  HystrixCircuitBreaker.Factory.reset();
}
