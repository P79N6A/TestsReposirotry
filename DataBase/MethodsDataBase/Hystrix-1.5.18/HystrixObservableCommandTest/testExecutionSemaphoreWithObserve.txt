@Test public void testExecutionSemaphoreWithObserve(){
  final TestCircuitBreaker circuitBreaker=new TestCircuitBreaker();
  TestSemaphoreCommand command1=new TestSemaphoreCommand(circuitBreaker,1,200,TestSemaphoreCommand.RESULT_SUCCESS,TestSemaphoreCommand.FALLBACK_NOT_IMPLEMENTED);
  try {
    boolean result=command1.observe().toBlocking().toFuture().get();
    assertTrue(result);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  final AtomicBoolean exceptionReceived=new AtomicBoolean();
  final TryableSemaphoreActual semaphore=new TryableSemaphoreActual(HystrixProperty.Factory.asProperty(1));
  final TestSemaphoreCommand command2=new TestSemaphoreCommand(circuitBreaker,semaphore,200,TestSemaphoreCommand.RESULT_SUCCESS,TestSemaphoreCommand.FALLBACK_NOT_IMPLEMENTED);
  Runnable r2=new HystrixContextRunnable(HystrixPlugins.getInstance().getConcurrencyStrategy(),new Runnable(){
    @Override public void run(){
      try {
        command2.observe().toBlocking().toFuture().get();
      }
 catch (      Exception e) {
        e.printStackTrace();
        exceptionReceived.set(true);
      }
    }
  }
);
  final TestSemaphoreCommand command3=new TestSemaphoreCommand(circuitBreaker,semaphore,200,TestSemaphoreCommand.RESULT_SUCCESS,TestSemaphoreCommand.FALLBACK_NOT_IMPLEMENTED);
  Runnable r3=new HystrixContextRunnable(HystrixPlugins.getInstance().getConcurrencyStrategy(),new Runnable(){
    @Override public void run(){
      try {
        command3.observe().toBlocking().toFuture().get();
      }
 catch (      Exception e) {
        e.printStackTrace();
        exceptionReceived.set(true);
      }
    }
  }
);
  Thread t2=new Thread(r2);
  Thread t3=new Thread(r3);
  t2.start();
  try {
    Thread.sleep(100);
  }
 catch (  Throwable ex) {
    fail(ex.getMessage());
  }
  t3.start();
  try {
    t2.join();
    t3.join();
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("failed waiting on threads");
  }
  if (!exceptionReceived.get()) {
    fail("We expected an exception on the 2nd get");
  }
  System.out.println("CMD1 : " + command1.getExecutionEvents());
  System.out.println("CMD2 : " + command2.getExecutionEvents());
  System.out.println("CMD3 : " + command3.getExecutionEvents());
  assertCommandExecutionEvents(command1,HystrixEventType.EMIT,HystrixEventType.SUCCESS);
  assertCommandExecutionEvents(command2,HystrixEventType.EMIT,HystrixEventType.SUCCESS);
  assertCommandExecutionEvents(command3,HystrixEventType.SEMAPHORE_REJECTED,HystrixEventType.FALLBACK_MISSING);
  assertEquals(0,circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(3);
}
