/** 
 * Test a command execution timeout where the command implemented getFallback.
 */
@Test public void testExecutionTimeoutWithFallbackUsingSemaphoreIsolation(){
  TestHystrixObservableCommand<Integer> command=getCommand(ExecutionIsolationStrategy.SEMAPHORE,AbstractTestHystrixCommand.ExecutionResult.SUCCESS,200,AbstractTestHystrixCommand.FallbackResult.SUCCESS,50);
  try {
    assertEquals(FlexibleTestHystrixObservableCommand.FALLBACK_VALUE,command.observe().toBlocking().single());
    assertTrue("Execution Time is: " + command.getExecutionTimeInMilliseconds(),command.getExecutionTimeInMilliseconds() >= 50);
    assertTrue(command.isResponseTimedOut());
    assertTrue(command.isResponseFromFallback());
    assertNotNull(command.getExecutionException());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("We should have received a response from the fallback.");
  }
  assertCommandExecutionEvents(command,HystrixEventType.TIMEOUT,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_SUCCESS);
  assertEquals(0,command.metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(1);
  assertFalse(command.isExecutedInThread());
}
