@Test public void testRequestCacheOnTimeoutThrowsException() throws Exception {
  TestCircuitBreaker circuitBreaker=new TestCircuitBreaker();
  RequestCacheTimeoutWithoutFallback r1=new RequestCacheTimeoutWithoutFallback(circuitBreaker);
  try {
    System.out.println("r1 value: " + r1.observe().toBlocking().single());
    fail("expected a timeout");
  }
 catch (  HystrixRuntimeException e) {
    assertTrue(r1.isResponseTimedOut());
    assertNotNull(r1.getExecutionException());
  }
  RequestCacheTimeoutWithoutFallback r2=new RequestCacheTimeoutWithoutFallback(circuitBreaker);
  try {
    r2.observe().toBlocking().single();
    fail("expected a timeout");
  }
 catch (  HystrixRuntimeException e) {
    assertTrue(r2.isResponseTimedOut());
    assertNotNull(r2.getExecutionException());
  }
  RequestCacheTimeoutWithoutFallback r3=new RequestCacheTimeoutWithoutFallback(circuitBreaker);
  Future<Boolean> f3=r3.observe().toBlocking().toFuture();
  try {
    f3.get();
    fail("expected a timeout");
  }
 catch (  ExecutionException e) {
    e.printStackTrace();
    assertTrue(r3.isResponseTimedOut());
    assertNotNull(r3.getExecutionException());
  }
  Thread.sleep(500);
  RequestCacheTimeoutWithoutFallback r4=new RequestCacheTimeoutWithoutFallback(circuitBreaker);
  try {
    r4.observe().toBlocking().single();
    fail("expected a timeout");
  }
 catch (  HystrixRuntimeException e) {
    assertTrue(r4.isResponseTimedOut());
    assertFalse(r4.isResponseFromFallback());
    assertNotNull(r4.getExecutionException());
  }
  assertCommandExecutionEvents(r1,HystrixEventType.TIMEOUT,HystrixEventType.FALLBACK_MISSING);
  assertCommandExecutionEvents(r2,HystrixEventType.TIMEOUT,HystrixEventType.FALLBACK_MISSING,HystrixEventType.RESPONSE_FROM_CACHE);
  assertCommandExecutionEvents(r3,HystrixEventType.TIMEOUT,HystrixEventType.FALLBACK_MISSING,HystrixEventType.RESPONSE_FROM_CACHE);
  assertCommandExecutionEvents(r4,HystrixEventType.TIMEOUT,HystrixEventType.FALLBACK_MISSING,HystrixEventType.RESPONSE_FROM_CACHE);
  assertEquals(0,circuitBreaker.metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(4);
}
