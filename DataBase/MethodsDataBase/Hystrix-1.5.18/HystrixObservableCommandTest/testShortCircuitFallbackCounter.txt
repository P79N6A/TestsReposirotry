/** 
 * Test that the circuit-breaker counts a command execution timeout as a 'timeout' and not just failure.
 */
@Test public void testShortCircuitFallbackCounter(){
  TestCircuitBreaker circuitBreaker=new TestCircuitBreaker().setForceShortCircuit(true);
  KnownFailureTestCommandWithFallback command1=new KnownFailureTestCommandWithFallback(circuitBreaker,ExecutionIsolationStrategy.SEMAPHORE,true);
  KnownFailureTestCommandWithFallback command2=new KnownFailureTestCommandWithFallback(circuitBreaker,ExecutionIsolationStrategy.SEMAPHORE,true);
  try {
    command1.observe().toBlocking().single();
    command2.observe().toBlocking().single();
    assertEquals(-1,command2.getExecutionTimeInMilliseconds());
    assertTrue(command2.isResponseShortCircuited());
    assertFalse(command2.isResponseTimedOut());
    assertNotNull(command2.getExecutionException());
    assertFalse(command2.isExecutedInThread());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("We should have received a response from the fallback.");
  }
  assertCommandExecutionEvents(command1,HystrixEventType.SHORT_CIRCUITED,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_SUCCESS);
  assertCommandExecutionEvents(command2,HystrixEventType.SHORT_CIRCUITED,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_SUCCESS);
  assertSaneHystrixRequestLog(2);
}
