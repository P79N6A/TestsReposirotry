/** 
 * Short-circuitInteger : NO Thread/semaphore: THREAD Thread Pool fullInteger : NO Thread Pool Queue fullInteger: NO Timeout: NO Execution Result: EMITx4, FAILURE, FALLBACK_EMITx4, FALLBACK_SUCCESS
 */
@Test public void testExecutionHookThreadMultipleEmitsThenErrorThenMultipleFallbackEmitsAndThenFallbackSuccess(){
  assertHooksOnSuccess(new Func0<TestHystrixObservableCommand<Integer>>(){
    @Override public TestHystrixObservableCommand<Integer> call(){
      return getCommand(ExecutionIsolationStrategy.THREAD,AbstractTestHystrixCommand.ExecutionResult.MULTIPLE_EMITS_THEN_FAILURE,0,AbstractTestHystrixCommand.FallbackResult.MULTIPLE_EMITS_THEN_SUCCESS);
    }
  }
,new Action1<TestHystrixObservableCommand<Integer>>(){
    @Override public void call(    TestHystrixObservableCommand<Integer> command){
      TestableExecutionHook hook=command.getBuilder().executionHook;
      assertTrue(hook.commandEmissionsMatch(8,0,1));
      assertTrue(hook.executionEventsMatch(4,1,0));
      assertTrue(hook.fallbackEventsMatch(4,0,1));
      assertEquals(RuntimeException.class,hook.getExecutionException().getClass());
      assertEquals("onStart - onThreadStart - !onRunStart - onExecutionStart - " + "onExecutionEmit - !onRunSuccess - !onComplete - onEmit - " + "onExecutionEmit - !onRunSuccess - !onComplete - onEmit - "+ "onExecutionEmit - !onRunSuccess - !onComplete - onEmit - "+ "onExecutionEmit - !onRunSuccess - !onComplete - onEmit - "+ "onExecutionError - !onRunError - onThreadComplete - onFallbackStart - "+ "onFallbackEmit - !onFallbackSuccess - !onComplete - onEmit - "+ "onFallbackEmit - !onFallbackSuccess - !onComplete - onEmit - "+ "onFallbackEmit - !onFallbackSuccess - !onComplete - onEmit - "+ "onFallbackEmit - !onFallbackSuccess - !onComplete - onEmit - "+ "onFallbackSuccess - onSuccess - ",command.getBuilder().executionHook.executionSequence.toString());
    }
  }
);
}
