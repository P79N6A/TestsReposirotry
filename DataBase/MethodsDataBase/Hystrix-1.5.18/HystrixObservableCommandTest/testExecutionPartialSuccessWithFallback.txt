/** 
 * Test behavior when some onNext are received and then a failure.
 */
@Test public void testExecutionPartialSuccessWithFallback(){
  try {
    TestPartialSuccessWithFallback command=new TestPartialSuccessWithFallback();
    TestSubscriber<Boolean> ts=new TestSubscriber<Boolean>();
    command.toObservable().subscribe(ts);
    ts.awaitTerminalEvent();
    ts.assertReceivedOnNext(Arrays.asList(false,true,false,true,false,true,false));
    ts.assertNoErrors();
    assertFalse(command.isSuccessfulExecution());
    assertTrue(command.isFailedExecution());
    assertNotNull(command.getFailedExecutionException());
    assertTrue(command.getExecutionTimeInMilliseconds() > -1);
    assertCommandExecutionEvents(command,HystrixEventType.EMIT,HystrixEventType.EMIT,HystrixEventType.EMIT,HystrixEventType.FAILURE,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_SUCCESS);
    assertEquals(0,command.metrics.getCurrentConcurrentExecutionCount());
    assertSaneHystrixRequestLog(1);
    assertFalse(command.isExecutedInThread());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("We received an exception.");
  }
}
