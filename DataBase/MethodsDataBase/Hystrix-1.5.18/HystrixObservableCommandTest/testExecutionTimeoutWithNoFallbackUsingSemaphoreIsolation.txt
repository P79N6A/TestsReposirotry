/** 
 * Test a command execution timeout where the command didn't implement getFallback.
 */
@Test public void testExecutionTimeoutWithNoFallbackUsingSemaphoreIsolation(){
  TestHystrixObservableCommand<Integer> command=getCommand(ExecutionIsolationStrategy.SEMAPHORE,AbstractTestHystrixCommand.ExecutionResult.SUCCESS,200,AbstractTestHystrixCommand.FallbackResult.UNIMPLEMENTED,100);
  try {
    command.observe().toBlocking().single();
    fail("we shouldn't get here");
  }
 catch (  Exception e) {
    e.printStackTrace();
    if (e instanceof HystrixRuntimeException) {
      HystrixRuntimeException de=(HystrixRuntimeException)e;
      assertNotNull(de.getFallbackException());
      assertTrue(de.getFallbackException() instanceof UnsupportedOperationException);
      assertNotNull(de.getImplementingClass());
      assertNotNull(de.getCause());
      assertTrue(de.getCause() instanceof TimeoutException);
    }
 else {
      fail("the exception should be HystrixRuntimeException");
    }
  }
  assertTrue("Execution Time is: " + command.getExecutionTimeInMilliseconds(),command.getExecutionTimeInMilliseconds() >= 50);
  assertTrue(command.isResponseTimedOut());
  assertFalse(command.isResponseFromFallback());
  assertFalse(command.isResponseRejected());
  assertNotNull(command.getExecutionException());
  assertCommandExecutionEvents(command,HystrixEventType.TIMEOUT,HystrixEventType.FALLBACK_MISSING);
  assertEquals(0,command.metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(1);
  assertFalse(command.isExecutedInThread());
}
