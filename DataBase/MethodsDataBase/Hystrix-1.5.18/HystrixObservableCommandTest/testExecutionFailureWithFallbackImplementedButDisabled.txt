/** 
 * Test a command execution that fails but has a fallback.
 */
@Test public void testExecutionFailureWithFallbackImplementedButDisabled(){
  TestHystrixObservableCommand<Boolean> commandEnabled=new KnownFailureTestCommandWithFallback(new TestCircuitBreaker(),true,true);
  try {
    assertEquals(false,commandEnabled.observe().toBlocking().single());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("We should have received a response from the fallback.");
  }
  TestHystrixObservableCommand<Boolean> commandDisabled=new KnownFailureTestCommandWithFallback(new TestCircuitBreaker(),false,true);
  try {
    assertEquals(false,commandDisabled.observe().toBlocking().single());
    fail("expect exception thrown");
  }
 catch (  Exception e) {
  }
  assertEquals("we failed with a simulated issue",commandDisabled.getFailedExecutionException().getMessage());
  assertTrue(commandDisabled.isFailedExecution());
  assertNotNull(commandDisabled.getExecutionException());
  assertCommandExecutionEvents(commandEnabled,HystrixEventType.FAILURE,HystrixEventType.FALLBACK_EMIT,HystrixEventType.FALLBACK_SUCCESS);
  assertCommandExecutionEvents(commandDisabled,HystrixEventType.FAILURE);
  assertEquals(0,commandDisabled.metrics.getCurrentConcurrentExecutionCount());
  assertSaneHystrixRequestLog(2);
}
