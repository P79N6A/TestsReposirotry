@Test public void testConcurrencyStreamProperlyFiltersOutThreadPoolRejections() throws InterruptedException {
  HystrixCommandGroupKey groupKey=HystrixCommandGroupKey.Factory.asKey("ThreadPool-Concurrency-J");
  HystrixThreadPoolKey threadPoolKey=HystrixThreadPoolKey.Factory.asKey("ThreadPool-Concurrency-J");
  HystrixCommandKey key=HystrixCommandKey.Factory.asKey("RollingConcurrency-J");
  stream=RollingThreadPoolMaxConcurrencyStream.getInstance(threadPoolKey,10,100);
  stream.startCachingStreamValuesIfUnstarted();
  final CountDownLatch latch=new CountDownLatch(1);
  stream.observe().take(10).subscribe(getSubscriber(latch));
  List<Command> saturators=new ArrayList<Command>();
  for (int i=0; i < 10; i++) {
    saturators.add(Command.from(groupKey,key,HystrixEventType.SUCCESS,400));
  }
  final List<Command> rejected=new ArrayList<Command>();
  for (int i=0; i < 10; i++) {
    rejected.add(Command.from(groupKey,key,HystrixEventType.SUCCESS,100));
  }
  for (  final Command saturatingCmd : saturators) {
    saturatingCmd.observe();
  }
  Thread.sleep(30);
  for (  final Command rejectedCmd : rejected) {
    rejectedCmd.observe();
  }
  assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
  System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
  for (  Command rejectedCmd : rejected) {
    assertTrue(rejectedCmd.isResponseThreadPoolRejected());
  }
  assertEquals(10,stream.getLatestRollingMax());
}
