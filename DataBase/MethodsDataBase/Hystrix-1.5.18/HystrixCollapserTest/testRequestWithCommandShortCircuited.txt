/** 
 * Test how the collapser behaves when the circuit is short-circuited
 */
@Test public void testRequestWithCommandShortCircuited() throws Exception {
  TestCollapserTimer timer=new TestCollapserTimer();
  HystrixCollapser<List<String>,String,String> collapser1=new TestRequestCollapserWithShortCircuitedCommand(timer,"1");
  Observable<String> response1=collapser1.observe();
  Observable<String> response2=new TestRequestCollapserWithShortCircuitedCommand(timer,"2").observe();
  timer.incrementTime(10);
  try {
    response1.toBlocking().first();
    fail("we should have received an exception");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    response2.toBlocking().first();
    fail("we should have received an exception");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  assertEquals(1,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());
  Iterator<HystrixInvokableInfo<?>> cmdIterator=HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().iterator();
  assertEquals(2,cmdIterator.next().getNumberCollapsed());
}
