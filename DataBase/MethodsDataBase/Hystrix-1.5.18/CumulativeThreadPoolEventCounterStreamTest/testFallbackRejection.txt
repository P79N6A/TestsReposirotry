@Test public void testFallbackRejection(){
  HystrixCommandGroupKey groupKey=HystrixCommandGroupKey.Factory.asKey("Cumulative-ThreadPool-L");
  HystrixThreadPoolKey threadPoolKey=HystrixThreadPoolKey.Factory.asKey("Cumulative-ThreadPool-L");
  HystrixCommandKey key=HystrixCommandKey.Factory.asKey("Cumulative-Counter-L");
  stream=CumulativeThreadPoolEventCounterStream.getInstance(threadPoolKey,10,100);
  stream.startCachingStreamValuesIfUnstarted();
  final CountDownLatch latch=new CountDownLatch(1);
  stream.observe().take(10).subscribe(getSubscriber(latch));
  List<CommandStreamTest.Command> fallbackSaturators=new ArrayList<CommandStreamTest.Command>();
  for (int i=0; i < 5; i++) {
    fallbackSaturators.add(CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20,HystrixEventType.FALLBACK_SUCCESS,400));
  }
  CommandStreamTest.Command rejection1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20,HystrixEventType.FALLBACK_SUCCESS,0);
  CommandStreamTest.Command rejection2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20,HystrixEventType.FALLBACK_SUCCESS,0);
  for (  CommandStreamTest.Command saturator : fallbackSaturators) {
    saturator.observe();
  }
  try {
    Thread.sleep(70);
  }
 catch (  InterruptedException ex) {
    fail(ex.getMessage());
  }
  rejection1.observe();
  rejection2.observe();
  try {
    assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
  }
 catch (  InterruptedException ex) {
    fail("Interrupted ex");
  }
  assertEquals(2,stream.getLatest().length);
  assertEquals(7,stream.getLatestCount(HystrixEventType.ThreadPool.EXECUTED));
  assertEquals(0,stream.getLatestCount(HystrixEventType.ThreadPool.REJECTED));
}
