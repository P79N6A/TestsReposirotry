@Test public void testCumulativeCounters() throws Exception {
  HystrixCommandKey key=HystrixCommandKey.Factory.asKey("ServoCOMMAND-A");
  HystrixCircuitBreaker circuitBreaker=HystrixCircuitBreaker.Factory.getInstance(key);
  HystrixCommandProperties properties=new HystrixPropertiesCommandDefault(key,propertiesSetter);
  HystrixCommandMetrics metrics=HystrixCommandMetrics.getInstance(key,groupKey,properties);
  HystrixServoMetricsPublisherCommand servoPublisher=new HystrixServoMetricsPublisherCommand(key,groupKey,metrics,circuitBreaker,properties);
  servoPublisher.initialize();
  final int NUM_SECONDS=5;
  for (int i=0; i < NUM_SECONDS; i++) {
    new SuccessCommand(key).execute();
    new SuccessCommand(key).execute();
    new SuccessCommand(key).execute();
    Thread.sleep(10);
    new TimeoutCommand(key).execute();
    new SuccessCommand(key).execute();
    new FailureCommand(key).execute();
    new SuccessCommand(key).execute();
    new SuccessCommand(key).execute();
    new SuccessCommand(key).execute();
    Thread.sleep(10);
    new SuccessCommand(key).execute();
  }
  Thread.sleep(500);
  assertEquals(40L,servoPublisher.getCumulativeMonitor("success",HystrixEventType.SUCCESS).getValue());
  assertEquals(5L,servoPublisher.getCumulativeMonitor("timeout",HystrixEventType.TIMEOUT).getValue());
  assertEquals(5L,servoPublisher.getCumulativeMonitor("failure",HystrixEventType.FAILURE).getValue());
  assertEquals(10L,servoPublisher.getCumulativeMonitor("fallback_success",HystrixEventType.FALLBACK_SUCCESS).getValue());
}
