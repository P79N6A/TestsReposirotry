@Test public void testRollingCounters() throws Exception {
  HystrixCommandKey key=HystrixCommandKey.Factory.asKey("ServoCOMMAND-B");
  HystrixCircuitBreaker circuitBreaker=HystrixCircuitBreaker.Factory.getInstance(key);
  HystrixCommandProperties properties=new HystrixPropertiesCommandDefault(key,propertiesSetter);
  HystrixCommandMetrics metrics=HystrixCommandMetrics.getInstance(key,groupKey,properties);
  HystrixServoMetricsPublisherCommand servoPublisher=new HystrixServoMetricsPublisherCommand(key,groupKey,metrics,circuitBreaker,properties);
  servoPublisher.initialize();
  new SuccessCommand(key).execute();
  new SuccessCommand(key).execute();
  new SuccessCommand(key).execute();
  new TimeoutCommand(key).execute();
  new SuccessCommand(key).execute();
  new FailureCommand(key).execute();
  new SuccessCommand(key).execute();
  new SuccessCommand(key).execute();
  new SuccessCommand(key).execute();
  new SuccessCommand(key).execute();
  Thread.sleep(2000);
  new SuccessCommand(key).execute();
  new SuccessCommand(key).execute();
  new SuccessCommand(key).execute();
  new TimeoutCommand(key).execute();
  new SuccessCommand(key).execute();
  new FailureCommand(key).execute();
  new TimeoutCommand(key).execute();
  new TimeoutCommand(key).execute();
  new TimeoutCommand(key).execute();
  new TimeoutCommand(key).execute();
  Thread.sleep(100);
  assertEquals(4L,servoPublisher.getRollingMonitor("success",HystrixEventType.SUCCESS).getValue());
  assertEquals(5L,servoPublisher.getRollingMonitor("timeout",HystrixEventType.TIMEOUT).getValue());
  assertEquals(1L,servoPublisher.getRollingMonitor("failure",HystrixEventType.FAILURE).getValue());
  assertEquals(6L,servoPublisher.getRollingMonitor("falback_success",HystrixEventType.FALLBACK_SUCCESS).getValue());
}
