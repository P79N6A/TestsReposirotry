@Test public void testThreadNestedInsideHystrixSemaphore(){
  HystrixCommand<Boolean> command=new HystrixCommand<Boolean>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("TestUtil")).andCommandKey(HystrixCommandKey.Factory.asKey("OuterSemaphoreCommand")).andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE))){
    @Override protected Boolean run(){
      assertEquals("OuterSemaphoreCommand",Hystrix.getCurrentThreadExecutingCommand().name());
      System.out.println("Outer Semaphore Thread : " + Thread.currentThread().getName());
      assertEquals(1,Hystrix.getCommandCount());
      if (Hystrix.getCurrentThreadExecutingCommand() == null) {
        throw new RuntimeException("BEFORE expected it to run inside a semaphore");
      }
      HystrixCommand<Boolean> command2=new HystrixCommand<Boolean>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("TestUtil")).andCommandKey(HystrixCommandKey.Factory.asKey("InnerCommand"))){
        @Override protected Boolean run(){
          assertEquals("InnerCommand",Hystrix.getCurrentThreadExecutingCommand().name());
          System.out.println("Inner Thread : " + Thread.currentThread().getName());
          assertEquals(1,Hystrix.getCommandCount());
          return Hystrix.getCurrentThreadExecutingCommand() != null;
        }
      }
;
      if (Hystrix.getCurrentThreadExecutingCommand() == null) {
        throw new RuntimeException("AFTER expected it to run inside a semaphore");
      }
      return command2.execute();
    }
  }
;
  assertTrue(command.execute());
  assertNull(Hystrix.getCurrentThreadExecutingCommand());
}
