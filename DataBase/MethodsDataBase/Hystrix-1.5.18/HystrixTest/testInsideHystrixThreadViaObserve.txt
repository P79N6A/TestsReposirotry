@Test public void testInsideHystrixThreadViaObserve(){
  assertNull(Hystrix.getCurrentThreadExecutingCommand());
  HystrixCommand<Boolean> command=new HystrixCommand<Boolean>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("TestUtil")).andCommandKey(HystrixCommandKey.Factory.asKey("CommandName"))){
    @Override protected Boolean run(){
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException ex) {
        return false;
      }
      assertEquals("CommandName",Hystrix.getCurrentThreadExecutingCommand().name());
      assertEquals(1,Hystrix.getCommandCount());
      return Hystrix.getCurrentThreadExecutingCommand() != null;
    }
  }
;
  final CountDownLatch latch=new CountDownLatch(1);
  command.observe().subscribe(new Subscriber<Boolean>(){
    @Override public void onCompleted(){
      latch.countDown();
    }
    @Override public void onError(    Throwable e){
      fail(e.getMessage());
      latch.countDown();
    }
    @Override public void onNext(    Boolean value){
      System.out.println("OnNext : " + value);
      assertTrue(value);
      assertEquals("CommandName",Hystrix.getCurrentThreadExecutingCommand().name());
      assertEquals(1,Hystrix.getCommandCount());
    }
  }
);
  try {
    assertNull(Hystrix.getCurrentThreadExecutingCommand());
    assertEquals(0,Hystrix.getCommandCount());
    latch.await();
  }
 catch (  InterruptedException ex) {
    fail(ex.getMessage());
  }
  assertNull(Hystrix.getCurrentThreadExecutingCommand());
  assertEquals(0,Hystrix.getCommandCount());
}
