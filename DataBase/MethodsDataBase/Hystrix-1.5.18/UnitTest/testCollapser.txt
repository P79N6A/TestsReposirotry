@Test public void testCollapser() throws Exception {
  HystrixRequestContext context=HystrixRequestContext.initializeContext();
  try {
    Future<String> f1=new CommandCollapserGetValueForKey(1).queue();
    Future<String> f2=new CommandCollapserGetValueForKey(2).queue();
    Future<String> f3=new CommandCollapserGetValueForKey(3).queue();
    Future<String> f4=new CommandCollapserGetValueForKey(4).queue();
    assertEquals("ValueForKey: 1",f1.get());
    assertEquals("ValueForKey: 2",f2.get());
    assertEquals("ValueForKey: 3",f3.get());
    assertEquals("ValueForKey: 4",f4.get());
    int numExecuted=HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size();
    System.err.println("num executed: " + numExecuted);
    if (numExecuted > 2) {
      fail("some of the commands should have been collapsed");
    }
    System.err.println("HystrixRequestLog.getCurrentRequest().getAllExecutedCommands(): " + HystrixRequestLog.getCurrentRequest().getAllExecutedCommands());
    int numLogs=0;
    for (    HystrixInvokableInfo<?> command : HystrixRequestLog.getCurrentRequest().getAllExecutedCommands()) {
      numLogs++;
      assertEquals("GetValueForKey",command.getCommandKey().name());
      System.err.println(command.getCommandKey().name() + " => command.getExecutionEvents(): " + command.getExecutionEvents());
      assertTrue(command.getExecutionEvents().contains(HystrixEventType.COLLAPSED));
      assertTrue(command.getExecutionEvents().contains(HystrixEventType.SUCCESS));
    }
    assertEquals(numExecuted,numLogs);
  }
  finally {
    context.shutdown();
  }
}
