@Test public void testShortCircuited(){
  HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-RollingCounter-G");
  stream=RollingCommandEventCounterStream.getInstance(key,10,100);
  stream.startCachingStreamValuesIfUnstarted();
  final CountDownLatch latch=new CountDownLatch(1);
  stream.observe().take(10).subscribe(getSubscriber(latch));
  CommandStreamTest.Command failure1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20);
  CommandStreamTest.Command failure2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20);
  CommandStreamTest.Command failure3=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20);
  CommandStreamTest.Command shortCircuit1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS);
  CommandStreamTest.Command shortCircuit2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS);
  failure1.observe();
  failure2.observe();
  failure3.observe();
  try {
    Thread.sleep(100);
  }
 catch (  InterruptedException ie) {
    fail(ie.getMessage());
  }
  shortCircuit1.observe();
  shortCircuit2.observe();
  try {
    assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
  }
 catch (  InterruptedException ex) {
    fail("Interrupted ex");
  }
  System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
  assertTrue(shortCircuit1.isResponseShortCircuited());
  assertTrue(shortCircuit2.isResponseShortCircuited());
  assertEquals(HystrixEventType.values().length,stream.getLatest().length);
  long[] expected=new long[HystrixEventType.values().length];
  expected[HystrixEventType.FAILURE.ordinal()]=3;
  expected[HystrixEventType.SHORT_CIRCUITED.ordinal()]=2;
  expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()]=5;
  System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
  assertArrayEquals(expected,stream.getLatest());
}
