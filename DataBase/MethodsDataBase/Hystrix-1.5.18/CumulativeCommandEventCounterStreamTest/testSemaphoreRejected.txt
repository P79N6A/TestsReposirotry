@Test public void testSemaphoreRejected(){
  HystrixCommandKey key=HystrixCommandKey.Factory.asKey("CMD-CumulativeCounter-H");
  stream=CumulativeCommandEventCounterStream.getInstance(key,10,500);
  stream.startCachingStreamValuesIfUnstarted();
  final CountDownLatch latch=new CountDownLatch(1);
  stream.observe().take(5).subscribe(getSubscriber(latch));
  List<Command> saturators=new ArrayList<Command>();
  for (int i=0; i < 10; i++) {
    saturators.add(Command.from(groupKey,key,HystrixEventType.SUCCESS,500,HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE));
  }
  Command rejected1=Command.from(groupKey,key,HystrixEventType.SUCCESS,0,HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE);
  Command rejected2=Command.from(groupKey,key,HystrixEventType.SUCCESS,0,HystrixCommandProperties.ExecutionIsolationStrategy.SEMAPHORE);
  for (  final Command saturator : saturators) {
    new Thread(new HystrixContextRunnable(new Runnable(){
      @Override public void run(){
        saturator.observe();
      }
    }
)).start();
  }
  try {
    Thread.sleep(100);
  }
 catch (  InterruptedException ie) {
    fail(ie.getMessage());
  }
  rejected1.observe();
  rejected2.observe();
  try {
    assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
  }
 catch (  InterruptedException ex) {
    fail("Interrupted ex");
  }
  System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
  assertTrue(rejected1.isResponseSemaphoreRejected());
  assertTrue(rejected2.isResponseSemaphoreRejected());
  assertEquals(HystrixEventType.values().length,stream.getLatest().length);
  long[] expected=new long[HystrixEventType.values().length];
  expected[HystrixEventType.SUCCESS.ordinal()]=10;
  expected[HystrixEventType.SEMAPHORE_REJECTED.ordinal()]=2;
  expected[HystrixEventType.FALLBACK_SUCCESS.ordinal()]=2;
  assertArrayEquals(expected,stream.getLatest());
}
