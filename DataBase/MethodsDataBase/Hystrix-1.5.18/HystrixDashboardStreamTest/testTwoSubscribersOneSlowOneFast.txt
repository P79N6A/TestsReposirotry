@Test public void testTwoSubscribersOneSlowOneFast() throws Exception {
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicBoolean foundError=new AtomicBoolean(false);
  Observable<HystrixDashboardStream.DashboardData> fast=stream.observe().observeOn(Schedulers.newThread());
  Observable<HystrixDashboardStream.DashboardData> slow=stream.observe().observeOn(Schedulers.newThread()).map(new Func1<HystrixDashboardStream.DashboardData,HystrixDashboardStream.DashboardData>(){
    @Override public HystrixDashboardStream.DashboardData call(    HystrixDashboardStream.DashboardData n){
      try {
        Thread.sleep(100);
        return n;
      }
 catch (      InterruptedException ex) {
        return n;
      }
    }
  }
);
  Observable<Boolean> checkZippedEqual=Observable.zip(fast,slow,new Func2<HystrixDashboardStream.DashboardData,HystrixDashboardStream.DashboardData,Boolean>(){
    @Override public Boolean call(    HystrixDashboardStream.DashboardData payload,    HystrixDashboardStream.DashboardData payload2){
      return payload == payload2;
    }
  }
);
  Subscription s1=checkZippedEqual.take(10000).subscribe(new Subscriber<Boolean>(){
    @Override public void onCompleted(){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " : OnCompleted");
      latch.countDown();
    }
    @Override public void onError(    Throwable e){
      System.out.println(System.currentTimeMillis() + " : " + Thread.currentThread().getName()+ " : OnError : "+ e);
      e.printStackTrace();
      foundError.set(true);
      latch.countDown();
    }
    @Override public void onNext(    Boolean b){
    }
  }
);
  for (int i=0; i < 50; i++) {
    HystrixCommand<Integer> cmd=Command.from(groupKey,commandKey,HystrixEventType.SUCCESS,50);
    cmd.execute();
  }
  latch.await(10000,TimeUnit.MILLISECONDS);
  assertFalse(foundError.get());
}
