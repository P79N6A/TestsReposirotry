/** 
 * Test that if the % of failures is higher than the threshold that the circuit trips.
 */
@Test public void testCircuitDoesNotTripOnFailuresBelowThreshold(){
  String key="cmd-C";
  try {
    HystrixCommand<Boolean> cmd1=new SuccessCommand(key,60);
    HystrixCircuitBreaker cb=cmd1.circuitBreaker;
    assertTrue(cb.allowRequest());
    assertFalse(cb.isOpen());
    cmd1.execute();
    HystrixCommand<Boolean> cmd2=new SuccessCommand(key,1);
    cmd2.execute();
    HystrixCommand<Boolean> cmd3=new FailureCommand(key,1);
    cmd3.execute();
    HystrixCommand<Boolean> cmd4=new SuccessCommand(key,1);
    cmd4.execute();
    HystrixCommand<Boolean> cmd5=new SuccessCommand(key,1);
    cmd5.execute();
    HystrixCommand<Boolean> cmd6=new FailureCommand(key,1);
    cmd6.execute();
    HystrixCommand<Boolean> cmd7=new SuccessCommand(key,1);
    cmd7.execute();
    HystrixCommand<Boolean> cmd8=new FailureCommand(key,1);
    cmd8.execute();
    Thread.sleep(100);
    System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
    System.out.println("Current CircuitBreaker Status : " + cmd1.getMetrics().getHealthCounts());
    assertTrue(cb.allowRequest());
    assertFalse(cb.isOpen());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Error occurred: " + e.getMessage());
  }
}
