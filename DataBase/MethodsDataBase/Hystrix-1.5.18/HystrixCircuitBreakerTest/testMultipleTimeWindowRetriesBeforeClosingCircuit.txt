/** 
 * Over a period of several 'windows' a single attempt will be made and fail and then finally succeed and close the circuit. <p> Ensure the circuit is kept open through the entire testing period and that only the single attempt in each window is made.
 */
@Test public void testMultipleTimeWindowRetriesBeforeClosingCircuit(){
  String key="cmd-H";
  try {
    int sleepWindow=200;
    HystrixCommand<Boolean> cmd1=new FailureCommand(key,60);
    HystrixCircuitBreaker cb=cmd1.circuitBreaker;
    assertTrue(cb.allowRequest());
    assertFalse(cb.isOpen());
    cmd1.execute();
    HystrixCommand<Boolean> cmd2=new FailureCommand(key,1);
    cmd2.execute();
    HystrixCommand<Boolean> cmd3=new FailureCommand(key,1);
    cmd3.execute();
    HystrixCommand<Boolean> cmd4=new TimeoutCommand(key);
    cmd4.execute();
    System.out.println("!!!! 1 4 failures, circuit will open on recalc");
    Thread.sleep(100);
    assertFalse(cb.allowRequest());
    assertTrue(cb.isOpen());
    System.out.println("!!!! 2 Sleep window starting where all commands fail-fast");
    Thread.sleep(sleepWindow + 50);
    System.out.println("!!!! 3 Sleep window over, should allow singleTest()");
    assertTrue(cb.isOpen());
    HystrixCommand<Boolean> cmd5=new FailureCommand(key,60);
    Observable<Boolean> asyncResult5=cmd5.observe();
    System.out.println("!!!! Kicked off the single-test");
    assertFalse(cb.allowRequest());
    System.out.println("!!!! Confirmed that no other requests go out during single-test");
    asyncResult5.toBlocking().single();
    System.out.println("!!!! SingleTest just completed");
    assertFalse(cb.allowRequest());
    assertFalse(cb.allowRequest());
    assertFalse(cb.allowRequest());
    System.out.println("!!!! 2nd sleep window START");
    Thread.sleep(sleepWindow + 50);
    System.out.println("!!!! 2nd sleep window over");
    HystrixCommand<Boolean> cmd6=new FailureCommand(key,60);
    Observable<Boolean> asyncResult6=cmd6.observe();
    System.out.println("2nd singleTest just kicked off");
    assertFalse(cb.allowRequest());
    System.out.println("confirmed that 2nd singletest only happened once");
    asyncResult6.toBlocking().single();
    System.out.println("2nd singleTest now over");
    assertFalse(cb.allowRequest());
    assertFalse(cb.allowRequest());
    assertFalse(cb.allowRequest());
    Thread.sleep(sleepWindow + 50);
    assertTrue(cb.isOpen());
    HystrixCommand<Boolean> cmd7=new SuccessCommand(key,60);
    Observable<Boolean> asyncResult7=cmd7.observe();
    assertFalse(cb.allowRequest());
    asyncResult7.toBlocking().single();
    assertTrue(cb.allowRequest());
    assertTrue(cb.allowRequest());
    assertTrue(cb.allowRequest());
    assertFalse(cb.isOpen());
    assertFalse(cb.isOpen());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Error occurred: " + e.getMessage());
  }
}
