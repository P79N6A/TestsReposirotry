/** 
 * Test that if all 'marks' are successes during the test window that it does NOT trip the circuit. Test that if all 'marks' are failures during the test window that it trips the circuit.
 */
@Test public void testTripCircuit(){
  String key="cmd-A";
  try {
    HystrixCommand<Boolean> cmd1=new SuccessCommand(key,1);
    HystrixCommand<Boolean> cmd2=new SuccessCommand(key,1);
    HystrixCommand<Boolean> cmd3=new SuccessCommand(key,1);
    HystrixCommand<Boolean> cmd4=new SuccessCommand(key,1);
    HystrixCircuitBreaker cb=cmd1.circuitBreaker;
    cmd1.execute();
    cmd2.execute();
    cmd3.execute();
    cmd4.execute();
    Thread.sleep(100);
    assertTrue(cb.allowRequest());
    assertFalse(cb.isOpen());
    HystrixCommand<Boolean> cmd5=new FailureCommand(key,1);
    HystrixCommand<Boolean> cmd6=new FailureCommand(key,1);
    HystrixCommand<Boolean> cmd7=new FailureCommand(key,1);
    HystrixCommand<Boolean> cmd8=new FailureCommand(key,1);
    cmd5.execute();
    cmd6.execute();
    cmd7.execute();
    cmd8.execute();
    Thread.sleep(100);
    assertFalse(cb.allowRequest());
    assertTrue(cb.isOpen());
  }
 catch (  Exception e) {
    e.printStackTrace();
    fail("Error occurred: " + e.getMessage());
  }
}
