@Test public void testReactive() throws Exception {
  final Observable<User> u1=userService.getUserByIdReactive("1");
  final Observable<User> u2=userService.getUserByIdReactive("2");
  final Observable<User> u3=userService.getUserByIdReactive("3");
  final Observable<User> u4=userService.getUserByIdReactive("4");
  final Observable<User> u5=userService.getUserByIdReactive("5");
  final Iterable<User> users=Observable.merge(u1,u2,u3,u4,u5).toBlocking().toIterable();
  Set<String> expectedIds=Sets.newHashSet("1","2","3","4","5");
  for (  User cUser : users) {
    assertEquals(expectedIds.remove(cUser.getId()),true);
  }
  assertEquals(expectedIds.isEmpty(),true);
  assertEquals(1,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());
  HystrixInvokableInfo<?> command=HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().iterator().next();
  assertEquals("getUserByIds",command.getCommandKey().name());
  assertTrue(command.getExecutionEvents().contains(HystrixEventType.COLLAPSED));
  assertTrue(command.getExecutionEvents().contains(HystrixEventType.SUCCESS));
}
