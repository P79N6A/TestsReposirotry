@Test public void testGetUserByIdWithFallbackWithThrowableParam() throws ExecutionException, InterruptedException {
  Future<User> f1=userService.getUserByIdWithFallbackWithThrowableParam("1");
  Future<User> f2=userService.getUserByIdWithFallbackWithThrowableParam("2");
  Future<User> f3=userService.getUserByIdWithFallbackWithThrowableParam("3");
  Future<User> f4=userService.getUserByIdWithFallbackWithThrowableParam("4");
  Future<User> f5=userService.getUserByIdWithFallbackWithThrowableParam("5");
  assertEquals("name: 1",f1.get().getName());
  assertEquals("name: 2",f2.get().getName());
  assertEquals("name: 3",f3.get().getName());
  assertEquals("name: 4",f4.get().getName());
  assertEquals("name: 5",f5.get().getName());
  assertEquals(4,HystrixRequestLog.getCurrentRequest().getAllExecutedCommands().size());
  HystrixInvokableInfo<?> batchCommand=getHystrixCommandByKey("getUserByIdsThrowsException");
  com.netflix.hystrix.HystrixInvokableInfo fallback1=getHystrixCommandByKey("getUserByIdsFallbackWithThrowableParam1");
  com.netflix.hystrix.HystrixInvokableInfo fallback2=getHystrixCommandByKey("getUserByIdsFallbackWithThrowableParam2");
  com.netflix.hystrix.HystrixInvokableInfo fallback3=getHystrixCommandByKey("getUserByIdsFallbackWithThrowableParam3");
  assertTrue(batchCommand.getExecutionEvents().contains(HystrixEventType.FAILURE));
  assertTrue(fallback1.getExecutionEvents().contains(HystrixEventType.FAILURE));
  assertTrue(fallback2.getExecutionEvents().contains(HystrixEventType.FAILURE));
  assertTrue(fallback2.getExecutionEvents().contains(HystrixEventType.FALLBACK_SUCCESS));
  assertTrue(fallback3.getExecutionEvents().contains(HystrixEventType.SUCCESS));
}
