/** 
 * Get-Set-Get with Request Cache Invalidation Test. <p/> given: command to get user by id, see  {@link UserService#getUserById(String)}command to update user, see  {@link UserService#update(com.netflix.hystrix.contrib.javanica.test.common.domain.User)}<p/> when: 1. call  {@link UserService#getUserById(String)}2. call  {@link UserService#getUserById(String)}3. call  {@link UserService#update(com.netflix.hystrix.contrib.javanica.test.common.domain.User)}4. call  {@link UserService#getUserById(String)}<p/> then: at the first time "getUserById" command shouldn't retrieve value from cache at the second time "getUserById" command should retrieve value from cache "update" method should update an user and flush cache related to "getUserById" command after "update" method execution "getUserById" command shouldn't retrieve value from cache
 */
@Test public void testGetSetGetUserCache_givenTwoCommands(){
  User user=userService.getUserById("1");
  HystrixInvokableInfo<?> getUserByIdCommand=getLastExecutedCommand();
  assertFalse(getUserByIdCommand.isResponseFromCache());
  assertEquals("1",user.getId());
  assertEquals("name",user.getName());
  user=userService.getUserById("1");
  assertEquals("1",user.getId());
  getUserByIdCommand=getLastExecutedCommand();
  assertTrue(getUserByIdCommand.isResponseFromCache());
  assertEquals("name",user.getName());
  user=new User("1","new_name");
  userService.update(user);
  user=userService.getUserById("1");
  getUserByIdCommand=getLastExecutedCommand();
  assertFalse(getUserByIdCommand.isResponseFromCache());
  assertEquals("1",user.getId());
  assertEquals("new_name",user.getName());
  resetContext();
  user=userService.getUserById("1");
  getUserByIdCommand=getLastExecutedCommand();
  assertEquals("1",user.getId());
  assertFalse(getUserByIdCommand.isResponseFromCache());
}
