@Test @Ignore("Flaky test") public void testThreadPoolRejected(){
  HystrixCommandGroupKey groupKey=HystrixCommandGroupKey.Factory.asKey("ThreadPool-I");
  HystrixThreadPoolKey threadPoolKey=HystrixThreadPoolKey.Factory.asKey("ThreadPool-I");
  HystrixCommandKey key=HystrixCommandKey.Factory.asKey("RollingCounter-I");
  stream=RollingThreadPoolEventCounterStream.getInstance(threadPoolKey,10,500);
  stream.startCachingStreamValuesIfUnstarted();
  final CountDownLatch latch=new CountDownLatch(1);
  stream.observe().take(5).subscribe(getSubscriber(latch));
  List<CommandStreamTest.Command> saturators=new ArrayList<CommandStreamTest.Command>();
  for (int i=0; i < 10; i++) {
    saturators.add(CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,200));
  }
  CommandStreamTest.Command rejected1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,0);
  CommandStreamTest.Command rejected2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,0);
  for (  final CommandStreamTest.Command saturator : saturators) {
    saturator.observe();
  }
  try {
    Thread.sleep(100);
  }
 catch (  InterruptedException ie) {
    fail(ie.getMessage());
  }
  rejected1.observe();
  rejected2.observe();
  try {
    assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
  }
 catch (  InterruptedException ex) {
    fail("Interrupted ex");
  }
  System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
  assertTrue(rejected1.isResponseThreadPoolRejected());
  assertTrue(rejected2.isResponseThreadPoolRejected());
  assertEquals(2,stream.getLatest().length);
  assertEquals(10,stream.getLatestCount(HystrixEventType.ThreadPool.EXECUTED));
  assertEquals(2,stream.getLatestCount(HystrixEventType.ThreadPool.REJECTED));
}
