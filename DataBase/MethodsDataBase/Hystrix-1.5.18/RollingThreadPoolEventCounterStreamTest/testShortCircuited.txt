@Test @Ignore("Flaky test") public void testShortCircuited(){
  HystrixCommandGroupKey groupKey=HystrixCommandGroupKey.Factory.asKey("ThreadPool-G");
  HystrixThreadPoolKey threadPoolKey=HystrixThreadPoolKey.Factory.asKey("ThreadPool-G");
  HystrixCommandKey key=HystrixCommandKey.Factory.asKey("RollingCounter-G");
  stream=RollingThreadPoolEventCounterStream.getInstance(threadPoolKey,10,500);
  stream.startCachingStreamValuesIfUnstarted();
  final CountDownLatch latch=new CountDownLatch(1);
  stream.observe().take(5).subscribe(getSubscriber(latch));
  CommandStreamTest.Command failure1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20);
  CommandStreamTest.Command failure2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20);
  CommandStreamTest.Command failure3=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.FAILURE,20);
  CommandStreamTest.Command shortCircuit1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS);
  CommandStreamTest.Command shortCircuit2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS);
  failure1.observe();
  failure2.observe();
  failure3.observe();
  try {
    Thread.sleep(100);
  }
 catch (  InterruptedException ie) {
    fail(ie.getMessage());
  }
  shortCircuit1.observe();
  shortCircuit2.observe();
  try {
    assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
  }
 catch (  InterruptedException ex) {
    fail("Interrupted ex");
  }
  System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
  assertTrue(shortCircuit1.isResponseShortCircuited());
  assertTrue(shortCircuit2.isResponseShortCircuited());
  assertEquals(2,stream.getLatest().length);
  assertEquals(3,stream.getLatestCount(HystrixEventType.ThreadPool.EXECUTED));
  assertEquals(0,stream.getLatestCount(HystrixEventType.ThreadPool.REJECTED));
}
