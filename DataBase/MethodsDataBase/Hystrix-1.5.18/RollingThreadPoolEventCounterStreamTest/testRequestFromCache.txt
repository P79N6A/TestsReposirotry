@Test public void testRequestFromCache(){
  HystrixCommandGroupKey groupKey=HystrixCommandGroupKey.Factory.asKey("ThreadPool-F");
  HystrixThreadPoolKey threadPoolKey=HystrixThreadPoolKey.Factory.asKey("ThreadPool-F");
  HystrixCommandKey key=HystrixCommandKey.Factory.asKey("RollingCounter-F");
  stream=RollingThreadPoolEventCounterStream.getInstance(threadPoolKey,10,500);
  stream.startCachingStreamValuesIfUnstarted();
  final CountDownLatch latch=new CountDownLatch(1);
  stream.observe().take(5).subscribe(getSubscriber(latch));
  CommandStreamTest.Command cmd1=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.SUCCESS,20);
  CommandStreamTest.Command cmd2=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.RESPONSE_FROM_CACHE);
  CommandStreamTest.Command cmd3=CommandStreamTest.Command.from(groupKey,key,HystrixEventType.RESPONSE_FROM_CACHE);
  cmd1.observe();
  cmd2.observe();
  cmd3.observe();
  try {
    assertTrue(latch.await(10000,TimeUnit.MILLISECONDS));
  }
 catch (  InterruptedException ex) {
    fail("Interrupted ex");
  }
  System.out.println("ReqLog : " + HystrixRequestLog.getCurrentRequest().getExecutedCommandsAsString());
  assertEquals(2,stream.getLatest().length);
  assertEquals(1,stream.getLatestCount(HystrixEventType.ThreadPool.EXECUTED));
  assertEquals(0,stream.getLatestCount(HystrixEventType.ThreadPool.REJECTED));
}
