@Test public void createScaleAndDeleteDeployment() throws Exception {
  server.expect().withPath("/apis/extensions/v1beta1/namespaces/test/deployments/de1").andReturn(200,new DeploymentBuilder().withNewMetadata().withName("de1").withResourceVersion("1").endMetadata().withNewSpec().withReplicas(5).endSpec().withNewStatus().withReplicas(1).endStatus().build()).once();
  server.expect().withPath("/apis/extensions/v1beta1/namespaces/test/deployments/de1").andReturn(200,new DeploymentBuilder().withNewMetadata().withName("de1").withResourceVersion("1").endMetadata().withNewSpec().withReplicas(5).endSpec().withNewStatus().withReplicas(5).endStatus().build()).always();
  Exchange ex=template.request("direct:scaleDeployment",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME,"test");
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_NAME,"de1");
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_DEPLOYMENT_REPLICAS,1);
    }
  }
);
  int replicas=ex.getOut().getBody(Integer.class);
  assertEquals(5,replicas);
}
