@Test public void testScheme() throws Exception {
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      transformer().scheme("xml").withDataFormat(new MyDataFormatDefinition());
      from("direct:a").inputType("xml").outputType("xml").to("mock:a").to("direct:b").to("mock:a2");
      from("direct:b").inputType("java").outputType("java").to("mock:b").process(ex -> {
        ex.getIn().setBody(new B());
      }
);
    }
  }
);
  context.start();
  MockEndpoint mocka=context.getEndpoint("mock:a",MockEndpoint.class);
  MockEndpoint mocka2=context.getEndpoint("mock:a2",MockEndpoint.class);
  MockEndpoint mockb=context.getEndpoint("mock:b",MockEndpoint.class);
  mocka.setExpectedCount(1);
  mocka2.setExpectedCount(1);
  mockb.setExpectedCount(1);
  Exchange answer=template.send("direct:a",ex -> {
    DataTypeAware message=(DataTypeAware)ex.getIn();
    message.setBody("<foo/>",new DataType("xml"));
  }
);
  mocka.assertIsSatisfied();
  mocka2.assertIsSatisfied();
  mockb.assertIsSatisfied();
  Exchange exa=mocka.getExchanges().get(0);
  Exchange exa2=mocka2.getExchanges().get(0);
  Exchange exb=mockb.getExchanges().get(0);
  assertEquals("<foo/>",exa.getIn().getBody());
  assertEquals(A.class,exb.getIn().getBody().getClass());
  assertEquals(B.class,exa2.getIn().getBody().getClass());
  assertEquals("<fooResponse/>",new String((byte[])answer.getIn().getBody()));
}
