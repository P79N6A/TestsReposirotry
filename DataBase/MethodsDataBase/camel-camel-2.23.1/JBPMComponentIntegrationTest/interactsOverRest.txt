@SuppressWarnings("unchecked") @Test public void interactsOverRest() throws Exception {
  getMockEndpoint("mock:result").expectedMessageCount(1);
  Map<String,Object> params=new HashMap<>();
  params.put("employee","wbadmin");
  params.put("reason","Camel asks for it");
  Map<String,Object> headers=new HashMap<>();
  headers.put(JBPMConstants.PROCESS_ID,"evaluation");
  headers.put(JBPMConstants.PARAMETERS,params);
  template.sendBodyAndHeaders("direct:start",null,headers);
  assertMockEndpointsSatisfied();
  Long processInstanceId=(Long)getMockEndpoint("mock:result").getExchanges().get(0).getIn().getBody();
  assertNotNull(processInstanceId);
  headers=new HashMap<>();
  headers.put(JBPMConstants.OPERATION,JBPMConstants.OPERATION + Operation.getTasksOwned);
  template.sendBodyAndHeaders("direct:start",null,headers);
  getMockEndpoint("mock:result").expectedMessageCount(2);
  assertMockEndpointsSatisfied();
  List<TaskSummary> tasks=(List<TaskSummary>)getMockEndpoint("mock:result").getExchanges().get(1).getIn().getBody();
  assertEquals(1,tasks.size());
  headers=new HashMap<>();
  headers.put(JBPMConstants.TASK_ID,tasks.get(0).getId());
  headers.put(JBPMConstants.OPERATION,JBPMConstants.OPERATION + Operation.completeTask);
  template.sendBodyAndHeaders("direct:start",null,headers);
  getMockEndpoint("mock:result").expectedMessageCount(3);
  assertMockEndpointsSatisfied();
  headers=new HashMap<>();
  headers.put(JBPMConstants.PROCESS_INSTANCE_ID,processInstanceId);
  headers.put(JBPMConstants.OPERATION,JBPMConstants.OPERATION + Operation.abortProcessInstance);
  template.sendBodyAndHeaders("direct:start",null,headers);
  getMockEndpoint("mock:result").expectedMessageCount(4);
  assertMockEndpointsSatisfied();
}
