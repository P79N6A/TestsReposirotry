@Test public void asynchronousMdnMessageTest() throws Exception {
  AS2AsynchronousMDNManager mdnManager=new AS2AsynchronousMDNManager(AS2_VERSION,USER_AGENT,CLIENT_FQDN,certList.toArray(new X509Certificate[0]),signingKP.getPrivate());
  ApplicationEDIEntity ediEntity=EntityUtils.createEDIEntity(EDI_MESSAGE,ContentType.create(AS2MediaType.APPLICATION_EDIFACT,AS2Charset.US_ASCII),null,false);
  HttpEntityEnclosingRequest request=new BasicHttpEntityEnclosingRequest("POST",REQUEST_URI);
  HttpMessageUtils.setHeaderValue(request,AS2Header.SUBJECT,SUBJECT);
  String httpdate=DATE_GENERATOR.getCurrentDate();
  HttpMessageUtils.setHeaderValue(request,AS2Header.DATE,httpdate);
  HttpMessageUtils.setHeaderValue(request,AS2Header.AS2_TO,AS2_NAME);
  HttpMessageUtils.setHeaderValue(request,AS2Header.AS2_FROM,AS2_NAME);
  String originalMessageId=AS2Utils.createMessageId(SERVER_FQDN);
  HttpMessageUtils.setHeaderValue(request,AS2Header.MESSAGE_ID,originalMessageId);
  HttpMessageUtils.setHeaderValue(request,AS2Header.DISPOSITION_NOTIFICATION_OPTIONS,DISPOSITION_NOTIFICATION_OPTIONS);
  EntityUtils.setMessageEntity(request,ediEntity);
  HttpResponse response=new BasicHttpResponse(HttpVersion.HTTP_1_1,200,"OK");
  httpdate=DATE_GENERATOR.getCurrentDate();
  response.setHeader(AS2Header.DATE,httpdate);
  response.setHeader(AS2Header.SERVER,REPORTING_UA);
  Map<String,String> extensionFields=new HashMap<>();
  extensionFields.put("Original-Recipient","rfc822;" + AS2_NAME);
  AS2DispositionModifier dispositionModifier=AS2DispositionModifier.createWarning("AS2 is cool!");
  String[] failureFields=new String[]{"failure-field-1"};
  String[] errorFields=new String[]{"error-field-1"};
  String[] warningFields=new String[]{"warning-field-1"};
  DispositionNotificationMultipartReportEntity mdn=new DispositionNotificationMultipartReportEntity(request,response,DispositionMode.AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY,AS2DispositionType.PROCESSED,dispositionModifier,failureFields,errorFields,warningFields,extensionFields,null,"boundary",true);
  HttpCoreContext httpContext=mdnManager.send(mdn,RECIPIENT_DELIVERY_ADDRESS);
  HttpRequest mndRequest=httpContext.getRequest();
  DispositionNotificationMultipartReportEntity reportEntity=HttpMessageUtils.getEntity(mndRequest,DispositionNotificationMultipartReportEntity.class);
  assertNotNull("Request does not contain resport",reportEntity);
  assertEquals("Report entity contains invalid number of parts",2,reportEntity.getPartCount());
  assertTrue("Report first part is not text entity",reportEntity.getPart(0) instanceof TextPlainEntity);
  assertTrue("Report second part is not MDN entity",reportEntity.getPart(1) instanceof AS2MessageDispositionNotificationEntity);
  AS2MessageDispositionNotificationEntity mdnEntity=(AS2MessageDispositionNotificationEntity)reportEntity.getPart(1);
  assertEquals("Unexpected value for Reporting UA",REPORTING_UA,mdnEntity.getReportingUA());
  assertEquals("Unexpected value for Final Recipient",AS2_NAME,mdnEntity.getFinalRecipient());
  assertEquals("Unexpected value for Original Message ID",originalMessageId,mdnEntity.getOriginalMessageId());
  assertEquals("Unexpected value for Disposition Mode",DispositionMode.AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY,mdnEntity.getDispositionMode());
  assertEquals("Unexpected value for Disposition Type",AS2DispositionType.PROCESSED,mdnEntity.getDispositionType());
  assertEquals("Unexpected value for Disposition Modifier",dispositionModifier,mdnEntity.getDispositionModifier());
  assertArrayEquals("Unexpected value for Failure Fields",failureFields,mdnEntity.getFailureFields());
  assertArrayEquals("Unexpected value for Error Fields",errorFields,mdnEntity.getErrorFields());
  assertArrayEquals("Unexpected value for Warning Fields",warningFields,mdnEntity.getWarningFields());
  assertEquals("Unexpected value for Extension Fields",extensionFields,mdnEntity.getExtensionFields());
  ReceivedContentMic expectedMic=MicUtils.createReceivedContentMic(request);
  ReceivedContentMic mdnMic=mdnEntity.getReceivedContentMic();
  assertEquals("Unexpected value for Recieved Content Mic",expectedMic.getEncodedMessageDigest(),mdnMic.getEncodedMessageDigest());
  LOG.debug("\r\n" + AS2Utils.printMessage(mndRequest));
}
