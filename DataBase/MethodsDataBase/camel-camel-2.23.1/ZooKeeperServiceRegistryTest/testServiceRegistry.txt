@Test public void testServiceRegistry() throws Exception {
  final int zkPort=AvailablePortFinder.getNextAvailable();
  final File zkDir=temporaryFolder.newFolder();
  final TestingServer zkServer=new TestingServer(zkPort,zkDir);
  zkServer.start();
  final ZooKeeperTestClient zkClient=new ZooKeeperTestClient("localhost:" + zkPort);
  zkClient.start();
  try {
    new ApplicationContextRunner().withUserConfiguration(TestConfiguration.class).withPropertyValues("debug=false","spring.main.banner-mode=OFF","spring.application.name=" + UUID.randomUUID().toString(),"camel.component.zookeeper.service-registry.enabled=true","camel.component.zookeeper.service-registry.nodes=localhost:" + zkPort,"camel.component.zookeeper.service-registry.id=" + UUID.randomUUID().toString(),"camel.component.zookeeper.service-registry.base-path=" + SERVICE_PATH,"camel.component.zookeeper.service-registry.service-host=localhost").run(context -> {
      assertThat(context).hasSingleBean(CamelContext.class);
      assertThat(context).hasSingleBean(ServiceRegistry.class);
      final CamelContext camelContext=context.getBean(CamelContext.class);
      final ServiceRegistry serviceRegistry=camelContext.hasService(ServiceRegistry.class);
      assertThat(serviceRegistry).isNotNull();
      serviceRegistry.register(DefaultServiceDefinition.builder().withHost(SERVICE_HOST).withPort(SERVICE_PORT).withName(SERVICE_NAME).withId(SERVICE_ID).build());
      final Collection<ServiceInstance<ZooKeeperServiceRegistry.MetaData>> services=zkClient.discovery().queryForInstances(SERVICE_NAME);
      assertThat(services).hasSize(1);
      assertThat(services).first().hasFieldOrPropertyWithValue("id",SERVICE_ID);
      assertThat(services).first().hasFieldOrPropertyWithValue("name",SERVICE_NAME);
      assertThat(services).first().hasFieldOrPropertyWithValue("address",SERVICE_HOST);
      assertThat(services).first().hasFieldOrPropertyWithValue("port",SERVICE_PORT);
    }
);
  }
  finally {
    zkClient.stop();
    zkServer.stop();
  }
}
