@Test public void createScaleAndDeleteReplicationController() throws Exception {
  server.expect().withPath("/api/v1/namespaces/test/replicationcontrollers/repl1").andReturn(200,new ReplicationControllerBuilder().withNewMetadata().withName("repl1").withResourceVersion("1").endMetadata().withNewSpec().withReplicas(5).endSpec().withNewStatus().withReplicas(1).endStatus().build()).once();
  server.expect().withPath("/api/v1/namespaces/test/replicationcontrollers/repl1").andReturn(200,new ReplicationControllerBuilder().withNewMetadata().withName("repl1").withResourceVersion("1").endMetadata().withNewSpec().withReplicas(5).endSpec().withNewStatus().withReplicas(5).endStatus().build()).always();
  Exchange ex=template.request("direct:scaleReplicationController",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME,"test");
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_NAME,"repl1");
      exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_REPLICATION_CONTROLLER_REPLICAS,1);
    }
  }
);
  Thread.sleep(3000);
  int replicas=ex.getOut().getBody(Integer.class);
  assertEquals(5,replicas);
}
