@Test public void testLeadershipLoss() throws Exception {
  LeaderRecorder mypod1=addMember("mypod1");
  LeaderRecorder mypod2=addMember("mypod2");
  context.start();
  mypod1.waitForAnyLeader(2,TimeUnit.SECONDS);
  mypod2.waitForAnyLeader(2,TimeUnit.SECONDS);
  String firstLeader=mypod1.getCurrentLeader();
  LeaderRecorder formerLeaderRecorder=firstLeader.equals("mypod1") ? mypod1 : mypod2;
  LeaderRecorder formerLoserRecorder=firstLeader.equals("mypod1") ? mypod2 : mypod1;
  refuseRequestsFromPod(firstLeader);
  disconnectPod(firstLeader);
  formerLeaderRecorder.waitForALeaderChange(7,TimeUnit.SECONDS);
  formerLoserRecorder.waitForANewLeader(firstLeader,7,TimeUnit.SECONDS);
  String secondLeader=formerLoserRecorder.getCurrentLeader();
  assertNotEquals("The firstLeader should be different from the new one",firstLeader,secondLeader);
  Long lossTimestamp=formerLeaderRecorder.getLastTimeOf(l -> l == null);
  Long gainTimestamp=formerLoserRecorder.getLastTimeOf(secondLeader::equals);
  assertTrue("At least half distance must elapse from leadership loss and regain (see renewDeadlineSeconds)",gainTimestamp >= lossTimestamp + (LEASE_TIME_MILLIS - RENEW_DEADLINE_MILLIS) / 2);
  checkLeadershipChangeDistance((LEASE_TIME_MILLIS - RENEW_DEADLINE_MILLIS) / 2,TimeUnit.MILLISECONDS,mypod1,mypod2);
}
