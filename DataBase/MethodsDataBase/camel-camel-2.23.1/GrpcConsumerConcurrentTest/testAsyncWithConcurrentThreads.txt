@Test public void testAsyncWithConcurrentThreads() throws Exception {
  RunnableAssert ra=new RunnableAssert("foo"){
    @Override public void run(){
      final CountDownLatch latch=new CountDownLatch(1);
      ManagedChannel asyncRequestChannel=NettyChannelBuilder.forAddress("localhost",GRPC_ASYNC_REQUEST_TEST_PORT).usePlaintext().build();
      PingPongGrpc.PingPongStub asyncNonBlockingStub=PingPongGrpc.newStub(asyncRequestChannel);
      PongResponseStreamObserver responseObserver=new PongResponseStreamObserver(latch);
      int instanceId=createId();
      final PingRequest pingRequest=PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE).setPingId(instanceId).build();
      StreamObserver<PingRequest> requestObserver=asyncNonBlockingStub.pingAsyncAsync(responseObserver);
      requestObserver.onNext(pingRequest);
      requestObserver.onNext(pingRequest);
      requestObserver.onCompleted();
      try {
        latch.await(5,TimeUnit.SECONDS);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      PongResponse pongResponse=responseObserver.getPongResponse();
      assertNotNull("instanceId = " + instanceId,pongResponse);
      assertEquals(instanceId,pongResponse.getPongId());
      assertEquals(GRPC_TEST_PING_VALUE + GRPC_TEST_PONG_VALUE,pongResponse.getPongName());
      asyncRequestChannel.shutdown().shutdownNow();
    }
  }
;
  new MultithreadingTester().add(ra).numThreads(CONCURRENT_THREAD_COUNT).numRoundsPerThread(ROUNDS_PER_THREAD_COUNT).run();
}
