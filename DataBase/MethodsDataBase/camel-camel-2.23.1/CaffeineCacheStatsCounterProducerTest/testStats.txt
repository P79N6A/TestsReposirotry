@Test public void testStats() throws Exception {
  final Map<String,String> map=generateRandomMapOfString(3);
  final Set<String> keys=map.keySet().stream().limit(2).collect(Collectors.toSet());
  fluentTemplate().withHeader(CaffeineConstants.ACTION,CaffeineConstants.ACTION_PUT_ALL).withBody(map).to("direct://start").send();
  MockEndpoint mock1=getMockEndpoint("mock:result");
  mock1.expectedMinimumMessageCount(1);
  mock1.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,false);
  mock1.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED,true);
  final Map<String,String> elements=getTestStatsCounterCache().getAllPresent(keys);
  keys.forEach(k -> {
    assertTrue(elements.containsKey(k));
    assertEquals(map.get(k),elements.get(k));
  }
);
  assertEquals(2,getMetricRegistry().counter("camelcache.hits").getCount());
}
