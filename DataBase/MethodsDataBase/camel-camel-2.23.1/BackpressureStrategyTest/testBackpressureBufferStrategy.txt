@Test public void testBackpressureBufferStrategy() throws Exception {
  new RouteBuilder(){
    @Override public void configure() throws Exception {
      from("timer:gen?period=20&repeatCount=20").setBody().header(Exchange.TIMER_COUNTER).to("reactive-streams:integers");
    }
  }
.addRoutesToCamelContext(context);
  Flowable<Integer> integers=Flowable.fromPublisher(CamelReactiveStreams.get(context).fromStream("integers",Integer.class));
  ConcurrentLinkedQueue<Integer> queue=new ConcurrentLinkedQueue<>();
  CountDownLatch latch=new CountDownLatch(1);
  Flowable.interval(0,50,TimeUnit.MILLISECONDS).zipWith(integers,(l,i) -> i).timeout(2000,TimeUnit.MILLISECONDS,Flowable.empty()).doOnComplete(latch::countDown).subscribe(queue::add);
  context().start();
  assertTrue(latch.await(5,TimeUnit.SECONDS));
  assertEquals(20,queue.size());
  int num=1;
  for (  int i : queue) {
    assertEquals(num++,i);
  }
}
