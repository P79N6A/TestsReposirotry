@Test public void testEvents() throws Exception {
  String val1=context().getUuidGenerator().generateUuid();
  String val2=context().getUuidGenerator().generateUuid();
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedMessageCount(4);
  mock.message(0).body().isEqualTo(val1);
  mock.message(0).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedQueue.Events.ADD);
  mock.message(1).body().isEqualTo(val2);
  mock.message(1).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedQueue.Events.ADD);
  mock.message(2).body().isEqualTo(val2);
  mock.message(2).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedQueue.Events.REMOVE);
  mock.message(3).body().isEqualTo(val1);
  mock.message(3).header(AtomixClientConstants.EVENT_TYPE).isEqualTo(DistributedMap.Events.REMOVE);
  queue.add(val1).join();
  queue.add(val2).join();
  queue.remove(val2).join();
  queue.remove(val1).join();
  mock.assertIsSatisfied();
}
