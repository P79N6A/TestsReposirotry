@Test public void shouldProvideSalesforceObjectTypes() throws IOException {
  final Optional<MetaData> maybeMeta;
  try (InputStream stream=resource("/globalObjects.json")){
    doAnswer(provideStreamToCallback(stream)).when(restClient).getGlobalObjects(any(HEADERS_TYPE),any(ResponseCallback.class));
    maybeMeta=metadata.meta(Collections.emptyMap());
  }
   assertThat(maybeMeta).isPresent();
  final MetaData meta=maybeMeta.get();
  assertThat(meta.getAttribute(MetaDataExtension.MetaData.JAVA_TYPE)).isEqualTo(JsonNode.class);
  assertThat(meta.getAttribute(MetaDataExtension.MetaData.CONTENT_TYPE)).isEqualTo("application/schema+json");
  final ObjectSchema payload=meta.getPayload(ObjectSchema.class);
  assertThat(payload).isNotNull();
  @SuppressWarnings({"unchecked","rawtypes"}) final Set<JsonSchema> oneOf=(Set)payload.getOneOf();
  assertThat(oneOf).hasSize(4);
  assertThat(schemaFor(payload,"AcceptedEventRelation")).isPresent().hasValueSatisfying(schema -> assertThat(schema.getTitle()).isEqualTo("Accepted Event Relation"));
  assertThat(schemaFor(payload,"Account")).isPresent().hasValueSatisfying(schema -> assertThat(schema.getTitle()).isEqualTo("Account"));
  assertThat(schemaFor(payload,"AccountCleanInfo")).isPresent().hasValueSatisfying(schema -> assertThat(schema.getTitle()).isEqualTo("Account Clean Info"));
  assertThat(schemaFor(payload,"AccountContactRole")).isPresent().hasValueSatisfying(schema -> assertThat(schema.getTitle()).isEqualTo("Account Contact Role"));
}
