/** 
 * Description of test.
 * @throws Exception in the event of a test error.
 */
@Test public void testBytesToPrintFriendlyStringBuilderWithStartAndEndPositions() throws Exception {
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder((byte[])null,0,1000).toString());
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder((byte[])null,200,1000).toString());
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder((byte[])null,-200,1000).toString());
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder((byte[])null,0,0).toString());
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder((byte[])null,200,0).toString());
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder((byte[])null,-200,0).toString());
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder((byte[])null,0,-1000).toString());
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder((byte[])null,200,-1000).toString());
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder((byte[])null,-200,-1000).toString());
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0],0,1000).toString());
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0],200,1000).toString());
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0],-200,1000).toString());
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0],0,0).toString());
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0],200,0).toString());
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0],-200,0).toString());
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0],0,-1000).toString());
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0],200,-1000).toString());
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,Hl7Util.bytesToPrintFriendlyStringBuilder(new byte[0],-200,-1000).toString());
  assertEquals(EXPECTED_MESSAGE,Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES,0,TEST_MESSAGE_BYTES.length).toString());
  assertEquals("",Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES,0,0).toString());
  assertEquals(EXPECTED_MESSAGE,Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES,-14,TEST_MESSAGE_BYTES.length).toString());
  assertEquals("",Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES,-14,0).toString());
  assertEquals("",Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES,-14,-14).toString());
  assertEquals(EXPECTED_MESSAGE,Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES,-14,1000000).toString());
  assertEquals("",Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES,0,-14).toString());
  assertEquals(EXPECTED_MESSAGE,Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES,0,1000000).toString());
  assertEquals("",Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES,1000000,TEST_MESSAGE_BYTES.length).toString());
  assertEquals("",Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES,1000000,0).toString());
  assertEquals("",Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES,1000000,-14).toString());
  assertEquals("",Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES,1000000,1000000).toString());
  assertEquals("ADT^A08|00001|D|2.3^^|||||||<0x0D CR>EVN|A08|2015010716144",Hl7Util.bytesToPrintFriendlyStringBuilder(TEST_MESSAGE_BYTES,50,100).toString());
}
