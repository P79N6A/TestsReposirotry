/** 
 * Description of test.
 * @throws Exception in the event of a test error.
 */
@Test public void testAppendBytesAsPrintFriendlyStringWithStartAndEndPositions() throws Exception {
  StringBuilder builder=null;
  try {
    Hl7Util.appendBytesAsPrintFriendlyString(builder,null);
    fail("Exception should be raised with null StringBuilder argument");
  }
 catch (  IllegalArgumentException ignoredEx) {
  }
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,null,0,1000);
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,null,200,1000);
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,null,-200,1000);
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,null,0,0);
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,null,200,0);
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,null,-200,0);
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,null,0,-1000);
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,null,200,-1000);
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,null,-200,-1000);
  assertEquals(Hl7Util.NULL_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,new byte[0],0,1000);
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,new byte[0],200,1000);
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,new byte[0],-200,1000);
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,new byte[0],0,0);
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,new byte[0],200,0);
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,new byte[0],-200,0);
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,new byte[0],0,-1000);
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,new byte[0],200,-1000);
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,new byte[0],-200,-1000);
  assertEquals(Hl7Util.EMPTY_REPLACEMENT_VALUE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,TEST_MESSAGE_BYTES,0,TEST_MESSAGE_BYTES.length);
  assertEquals(EXPECTED_MESSAGE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,TEST_MESSAGE_BYTES,0,0);
  assertEquals("",builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,TEST_MESSAGE_BYTES,-14,TEST_MESSAGE_BYTES.length);
  assertEquals(EXPECTED_MESSAGE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,TEST_MESSAGE_BYTES,-14,0);
  assertEquals("",builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,TEST_MESSAGE_BYTES,-14,-14);
  assertEquals("",builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,TEST_MESSAGE_BYTES,-14,1000000);
  assertEquals(EXPECTED_MESSAGE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,TEST_MESSAGE_BYTES,0,-14);
  assertEquals("",builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,TEST_MESSAGE_BYTES,0,1000000);
  assertEquals(EXPECTED_MESSAGE,builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,TEST_MESSAGE_BYTES,1000000,TEST_MESSAGE_BYTES.length);
  assertEquals("",builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,TEST_MESSAGE_BYTES,1000000,0);
  assertEquals("",builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,TEST_MESSAGE_BYTES,1000000,-14);
  assertEquals("",builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,TEST_MESSAGE_BYTES,1000000,1000000);
  assertEquals("",builder.toString());
  builder=new StringBuilder();
  Hl7Util.appendBytesAsPrintFriendlyString(builder,TEST_MESSAGE_BYTES,50,100);
  assertEquals("ADT^A08|00001|D|2.3^^|||||||<0x0D CR>EVN|A08|2015010716144",builder.toString());
}
