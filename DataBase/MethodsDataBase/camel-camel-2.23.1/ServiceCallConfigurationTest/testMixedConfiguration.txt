@Test public void testMixedConfiguration() throws Exception {
  StaticServiceDiscovery defaultServiceDiscovery=new StaticServiceDiscovery();
  defaultServiceDiscovery.addServer("service@127.0.0.1:8080");
  defaultServiceDiscovery.addServer("service@127.0.0.1:8081");
  defaultServiceDiscovery.addServer("service@127.0.0.1:8082");
  BlacklistServiceFilter defaultServiceFilter=new BlacklistServiceFilter();
  defaultServiceFilter.addServer("*@127.0.0.1:8080");
  ServiceCallConfigurationDefinition defaultConfiguration=new ServiceCallConfigurationDefinition();
  defaultConfiguration.setServiceDiscovery(defaultServiceDiscovery);
  defaultConfiguration.serviceFilter(defaultServiceFilter);
  BlacklistServiceFilter namedServiceFilter=new BlacklistServiceFilter();
  namedServiceFilter.addServer("*@127.0.0.1:8081");
  ServiceCallConfigurationDefinition namedConfiguration=new ServiceCallConfigurationDefinition();
  namedConfiguration.serviceFilter(namedServiceFilter);
  StaticServiceDiscovery localServiceDiscovery=new StaticServiceDiscovery();
  localServiceDiscovery.addServer("service@127.0.0.1:8080");
  localServiceDiscovery.addServer("service@127.0.0.1:8081");
  localServiceDiscovery.addServer("service@127.0.0.1:8082");
  localServiceDiscovery.addServer("service@127.0.0.1:8084");
  CamelContext context=new DefaultCamelContext();
  context.setServiceCallConfiguration(defaultConfiguration);
  context.addServiceCallConfiguration("named",namedConfiguration);
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      from("direct:default").id("default").serviceCall().name("default-scall").component("file").end();
      from("direct:named").id("named").serviceCall().serviceCallConfiguration("named").name("named-scall").component("file").end();
      from("direct:local").id("local").serviceCall().serviceCallConfiguration("named").name("local-scall").component("file").serviceDiscovery(localServiceDiscovery).end();
    }
  }
);
  context.start();
{
    DefaultServiceCallProcessor proc=findServiceCallProcessor(context.getRoute("default"));
    Assert.assertNotNull(proc);
    Assert.assertTrue(proc.getLoadBalancer() instanceof DefaultServiceLoadBalancer);
    DefaultServiceLoadBalancer loadBalancer=(DefaultServiceLoadBalancer)proc.getLoadBalancer();
    Assert.assertEquals(defaultServiceDiscovery,loadBalancer.getServiceDiscovery());
    Assert.assertEquals(defaultServiceFilter,loadBalancer.getServiceFilter());
  }
{
    DefaultServiceCallProcessor proc=findServiceCallProcessor(context.getRoute("named"));
    Assert.assertNotNull(proc);
    Assert.assertTrue(proc.getLoadBalancer() instanceof DefaultServiceLoadBalancer);
    DefaultServiceLoadBalancer loadBalancer=(DefaultServiceLoadBalancer)proc.getLoadBalancer();
    Assert.assertEquals(defaultServiceDiscovery,loadBalancer.getServiceDiscovery());
    Assert.assertEquals(namedServiceFilter,loadBalancer.getServiceFilter());
  }
{
    DefaultServiceCallProcessor proc=findServiceCallProcessor(context.getRoute("local"));
    Assert.assertNotNull(proc);
    Assert.assertTrue(proc.getLoadBalancer() instanceof DefaultServiceLoadBalancer);
    DefaultServiceLoadBalancer loadBalancer=(DefaultServiceLoadBalancer)proc.getLoadBalancer();
    Assert.assertEquals(localServiceDiscovery,loadBalancer.getServiceDiscovery());
    Assert.assertEquals(namedServiceFilter,loadBalancer.getServiceFilter());
  }
  context.stop();
}
