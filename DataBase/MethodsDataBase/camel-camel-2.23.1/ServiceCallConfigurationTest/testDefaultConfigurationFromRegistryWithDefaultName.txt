@Test public void testDefaultConfigurationFromRegistryWithDefaultName() throws Exception {
  StaticServiceDiscovery sd=new StaticServiceDiscovery();
  sd.addServer("service@127.0.0.1:8080");
  sd.addServer("service@127.0.0.1:8081");
  BlacklistServiceFilter sf=new BlacklistServiceFilter();
  sf.addServer("*@127.0.0.1:8080");
  ServiceCallConfigurationDefinition conf=new ServiceCallConfigurationDefinition();
  conf.setServiceDiscovery(sd);
  conf.serviceFilter(sf);
  SimpleRegistry reg=new SimpleRegistry();
  reg.put(ServiceCallDefinitionConstants.DEFAULT_SERVICE_CALL_CONFIG_ID,conf);
  CamelContext context=new DefaultCamelContext(reg);
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      from("direct:start").routeId("default").serviceCall().name("scall").component("file").end();
    }
  }
);
  context.start();
  DefaultServiceCallProcessor proc=findServiceCallProcessor(context.getRoute("default"));
  Assert.assertNotNull(proc);
  Assert.assertTrue(proc.getLoadBalancer() instanceof DefaultServiceLoadBalancer);
  DefaultServiceLoadBalancer loadBalancer=(DefaultServiceLoadBalancer)proc.getLoadBalancer();
  Assert.assertEquals(sd,loadBalancer.getServiceDiscovery());
  Assert.assertEquals(sf,loadBalancer.getServiceFilter());
  context.stop();
}
