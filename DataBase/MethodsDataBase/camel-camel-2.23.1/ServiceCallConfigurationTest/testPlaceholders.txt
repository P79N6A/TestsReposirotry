@Test public void testPlaceholders() throws Exception {
  CamelContext context=null;
  try {
    System.setProperty("scall.name","service-name");
    System.setProperty("scall.scheme","file");
    System.setProperty("scall.servers1","hello-service@localhost:8081,hello-service@localhost:8082");
    System.setProperty("scall.servers2","hello-svc@localhost:8083,hello-svc@localhost:8084");
    System.setProperty("scall.filter","hello-svc@localhost:8083");
    ServiceCallConfigurationDefinition global=new ServiceCallConfigurationDefinition();
    global.blacklistFilter().servers("{{scall.filter}}");
    context=new DefaultCamelContext();
    context.setServiceCallConfiguration(global);
    context.addRoutes(new RouteBuilder(){
      @Override public void configure() throws Exception {
        from("direct:start").routeId("default").serviceCall().name("{{scall.name}}").component("{{scall.scheme}}").uri("direct:{{scall.name}}").staticServiceDiscovery().servers("{{scall.servers1}}").servers("{{scall.servers2}}").end().end();
      }
    }
);
    context.start();
    DefaultServiceCallProcessor proc=findServiceCallProcessor(context.getRoute("default"));
    Assert.assertNotNull(proc);
    Assert.assertTrue(proc.getLoadBalancer() instanceof DefaultServiceLoadBalancer);
    Assert.assertEquals("service-name",proc.getName());
    Assert.assertEquals("file",proc.getScheme());
    Assert.assertEquals("direct:service-name",proc.getUri());
    DefaultServiceLoadBalancer lb=(DefaultServiceLoadBalancer)proc.getLoadBalancer();
    Assert.assertTrue(lb.getServiceFilter() instanceof BlacklistServiceFilter);
    BlacklistServiceFilter filter=(BlacklistServiceFilter)lb.getServiceFilter();
    List<ServiceDefinition> blacklist=filter.getBlacklistedServices();
    Assert.assertEquals(1,blacklist.size());
    Assert.assertTrue(lb.getServiceDiscovery() instanceof StaticServiceDiscovery);
    List<ServiceDefinition> services1=lb.getServiceDiscovery().getServices("hello-service");
    Assert.assertEquals(2,filter.apply(services1).size());
    List<ServiceDefinition> services2=lb.getServiceDiscovery().getServices("hello-svc");
    Assert.assertEquals(1,filter.apply(services2).size());
  }
  finally {
    if (context != null) {
      context.stop();
    }
    System.clearProperty("scall.name");
    System.clearProperty("scall.scheme");
    System.clearProperty("scall.servers1");
    System.clearProperty("scall.servers2");
    System.clearProperty("scall.filter");
  }
  context.stop();
}
