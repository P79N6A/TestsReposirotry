@Test public void testCircuitOpen() throws Exception {
  LOG.info("testCircuitOpen start");
  route.throwException=true;
  for (int i=0; i < 2 * REQUEST_VOLUME_THRESHOLD; i++) {
    try {
      template.asyncRequestBody("direct:start","Request Body");
    }
 catch (    CamelExecutionException e) {
      LOG.info(e.toString());
    }
  }
  Thread.sleep(1500);
  resetMocks();
  getMockEndpoint("mock:result").expectedPropertyReceived(HYSTRIX_RESPONSE_SHORT_CIRCUITED,true);
  route.throwException=false;
  try {
    template.requestBody("direct:start","Request Body");
    LOG.info("Instead circuit open expected");
  }
 catch (  CamelExecutionException e) {
    LOG.info("Circuit open expected ",e);
  }
  assertMockEndpointsSatisfied();
  Thread.sleep(500);
  for (int i=0; i < 2 * REQUEST_VOLUME_THRESHOLD; i++) {
    try {
      template.requestBody("direct:start","Request Body");
      LOG.info("Circuit has closed");
    }
 catch (    CamelExecutionException e) {
      Thread.sleep(i * 100);
      LOG.info("Circuit will be closed soon " + e.toString());
    }
  }
  resetMocks();
  getMockEndpoint("mock:result").expectedPropertyReceived(HYSTRIX_RESPONSE_SHORT_CIRCUITED,false);
  getMockEndpoint("mock:result").expectedPropertyReceived(HYSTRIX_RESPONSE_SUCCESSFUL_EXECUTION,true);
  template.requestBody("direct:start","Request Body");
  assertMockEndpointsSatisfied();
}
