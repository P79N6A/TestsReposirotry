@Test public void testCorsGet() throws Exception {
  getMockEndpoint("mock:inputGet").expectedMessageCount(0);
  Exchange out=template.request("http://localhost:" + getPort() + "/users/123/basic",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(Exchange.HTTP_METHOD,"OPTIONS");
    }
  }
);
  assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_ORIGIN,out.getOut().getHeader("Access-Control-Allow-Origin"));
  assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_METHODS,out.getOut().getHeader("Access-Control-Allow-Methods"));
  assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_ALLOW_HEADERS,out.getOut().getHeader("Access-Control-Allow-Headers"));
  assertEquals(RestConfiguration.CORS_ACCESS_CONTROL_MAX_AGE,out.getOut().getHeader("Access-Control-Max-Age"));
  assertMockEndpointsSatisfied();
  resetMocks();
  getMockEndpoint("mock:inputGet").expectedMessageCount(1);
  String out2=fluentTemplate.to("http://localhost:" + getPort() + "/users/123/basic").withHeader(Exchange.HTTP_METHOD,"GET").request(String.class);
  assertEquals("123;Donald Duck",out2);
  assertMockEndpointsSatisfied();
}
