@SuppressWarnings("unchecked") @Test public void testBacklogDebuggerStepCurrentNode() throws Exception {
  if (isPlatform("aix")) {
    return;
  }
  MBeanServer mbeanServer=getMBeanServer();
  ObjectName on=new ObjectName("org.apache.camel:context=camel-1,type=tracer,name=BacklogDebugger");
  assertNotNull(on);
  mbeanServer.isRegistered(on);
  Boolean enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
  assertEquals("Should not be enabled",Boolean.FALSE,enabled);
  mbeanServer.invoke(on,"enableDebugger",null,null);
  enabled=(Boolean)mbeanServer.getAttribute(on,"Enabled");
  assertEquals("Should be enabled",Boolean.TRUE,enabled);
  mbeanServer.invoke(on,"addBreakpoint",new Object[]{"foo"},new String[]{"java.lang.String"});
  MockEndpoint mock=getMockEndpoint("mock:result");
  mock.expectedMessageCount(0);
  mock.setSleepForEmptyTest(100);
  template.sendBody("seda:start","Hello World");
  assertMockEndpointsSatisfied();
  Set<String> nodes=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
  assertNotNull(nodes);
  assertEquals(1,nodes.size());
  assertEquals("foo",nodes.iterator().next());
  Boolean stepMode=(Boolean)mbeanServer.getAttribute(on,"SingleStepMode");
  assertEquals("Should not be in step mode",Boolean.FALSE,stepMode);
  mbeanServer.invoke(on,"stepBreakpoint",new Object[]{"foo"},new String[]{"java.lang.String"});
  await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
    Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(suspended);
    assertEquals(1,suspended.size());
    assertEquals("bar",suspended.iterator().next());
  }
);
  mbeanServer.invoke(on,"stepBreakpoint",new Object[]{"bar"},new String[]{"java.lang.String"});
  await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
    Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(suspended);
    assertEquals(1,suspended.size());
    assertEquals("transform",suspended.iterator().next());
  }
);
  mbeanServer.invoke(on,"stepBreakpoint",new Object[]{"transform"},new String[]{"java.lang.String"});
  await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
    Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(suspended);
    assertEquals(1,suspended.size());
    assertEquals("cheese",suspended.iterator().next());
  }
);
  mbeanServer.invoke(on,"stepBreakpoint",new Object[]{"cheese"},new String[]{"java.lang.String"});
  await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
    Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(suspended);
    assertEquals(1,suspended.size());
    assertEquals("result",suspended.iterator().next());
  }
);
  mbeanServer.invoke(on,"stepBreakpoint",new Object[]{"result"},new String[]{"java.lang.String"});
  await().atMost(1,TimeUnit.SECONDS).untilAsserted(() -> {
    Set<String> suspended=(Set<String>)mbeanServer.invoke(on,"getSuspendedBreakpointNodeIds",null,null);
    assertNotNull(suspended);
    assertEquals(0,suspended.size());
  }
);
  stepMode=(Boolean)mbeanServer.getAttribute(on,"SingleStepMode");
  assertEquals("Should not be in step mode",Boolean.FALSE,stepMode);
}
