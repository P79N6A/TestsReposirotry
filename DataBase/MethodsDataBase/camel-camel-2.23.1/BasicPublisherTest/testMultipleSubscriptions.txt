@Test public void testMultipleSubscriptions() throws Exception {
  new RouteBuilder(){
    @Override public void configure() throws Exception {
      from("timer:tick?period=50").setBody().header(Exchange.TIMER_COUNTER).to("reactive-streams:unbounded");
    }
  }
.addRoutesToCamelContext(context);
  CountDownLatch latch1=new CountDownLatch(5);
  Disposable disp1=Observable.fromPublisher(CamelReactiveStreams.get(context).fromStream("unbounded",Integer.class)).subscribe(n -> latch1.countDown());
  context.start();
  CountDownLatch latch2=new CountDownLatch(5);
  Disposable disp2=Observable.fromPublisher(CamelReactiveStreams.get(context).fromStream("unbounded",Integer.class)).subscribe(n -> latch2.countDown());
  assertTrue(latch1.await(5,TimeUnit.SECONDS));
  assertTrue(latch2.await(5,TimeUnit.SECONDS));
  disp1.dispose();
  disp2.dispose();
  Thread.sleep(60);
  CountDownLatch latch3=new CountDownLatch(5);
  Disposable disp3=Observable.fromPublisher(CamelReactiveStreams.get(context).fromStream("unbounded",Integer.class)).subscribe(n -> latch3.countDown());
  assertTrue(latch3.await(5,TimeUnit.SECONDS));
  disp3.dispose();
}
