@Test public void testConsumptionBadSession() throws Exception {
  final int messageCount=5;
  final int consumerCount=1;
  SjmsBatchComponent sb=(SjmsBatchComponent)context.getComponent("sjms-batch");
  MockConnectionFactory cf=(MockConnectionFactory)sb.getConnectionFactory();
  cf.returnBadSessionNTimes(2);
  final String queueName=getQueueName();
  context.addRoutes(new TransactedSendHarness(queueName));
  context.addRoutes(new RouteBuilder(){
    public void configure() throws Exception {
      int completionTimeout=1000;
      int completionSize=200;
      fromF("sjms-batch:%s?completionTimeout=%s&completionSize=%s&consumerCount=%s&aggregationStrategy=#testStrategy&keepAliveDelay=300",queueName,completionTimeout,completionSize,consumerCount).routeId("batchConsumer").startupOrder(10).autoStartup(false).split(body()).to("mock:split");
    }
  }
);
  context.start();
  MockEndpoint mockBefore=getMockEndpoint("mock:before");
  mockBefore.setExpectedMessageCount(messageCount);
  MockEndpoint mockSplit=getMockEndpoint("mock:split");
  mockSplit.setExpectedMessageCount(messageCount);
  LOG.info("Sending messages");
  template.sendBody("direct:in",generateStrings(messageCount));
  LOG.info("Send complete");
  StopWatch stopWatch=new StopWatch();
  context.startRoute("batchConsumer");
  assertMockEndpointsSatisfied();
  stopWatch.stop();
}
