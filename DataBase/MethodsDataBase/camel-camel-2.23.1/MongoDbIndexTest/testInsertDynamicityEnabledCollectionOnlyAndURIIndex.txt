@Test public void testInsertDynamicityEnabledCollectionOnlyAndURIIndex(){
  assertEquals(0,testCollection.count());
  mongo.getDatabase("otherDB").drop();
  db.getCollection("otherCollection").drop();
  assertFalse("The otherDB database should not exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
  String body="{\"_id\": \"testInsertDynamicityEnabledCollectionOnlyAndURIIndex\", \"a\" : 1, \"b\" : 2}";
  Map<String,Object> headers=new HashMap<>();
  headers.put(MongoDbConstants.COLLECTION,"otherCollection");
  Object result=template.requestBodyAndHeaders("direct:dynamicityEnabledWithIndexUri",body,headers);
  assertEquals("Response isn't of type WriteResult",BasicDBObject.class,result.getClass());
  MongoCollection<BasicDBObject> dynamicCollection=db.getCollection("otherCollection",BasicDBObject.class);
  MongoCursor<Document> indexInfos=dynamicCollection.listIndexes().iterator();
  Document key1=(Document)indexInfos.next().get("key");
  assertFalse("No index on the field a",key1.containsKey("a") && "-1".equals(key1.getString("a")));
  DBObject b=dynamicCollection.find(new BasicDBObject("_id","testInsertDynamicityEnabledCollectionOnlyAndURIIndex")).first();
  assertNotNull("No record with 'testInsertDynamicityEnabledCollectionOnlyAndURIIndex' _id",b);
  b=testCollection.find(new BasicDBObject("_id","testInsertDynamicityEnabledCollectionOnlyAndURIIndex")).first();
  assertNull("There is a record with 'testInsertDynamicityEnabledCollectionOnlyAndURIIndex' _id in the test collection",b);
  assertFalse("The otherDB database should not exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
}
