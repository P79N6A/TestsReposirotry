@Test public void testInsertDynamicityEnabledDBAndCollectionAndIndex(){
  assertEquals(0,testCollection.count());
  mongo.getDatabase("otherDB").drop();
  db.getCollection("otherCollection").drop();
  assertFalse("The otherDB database should not exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
  String body="{\"_id\": \"testInsertDynamicityEnabledDBAndCollection\", \"a\" : 1, \"b\" : 2}";
  Map<String,Object> headers=new HashMap<>();
  headers.put(MongoDbConstants.DATABASE,"otherDB");
  headers.put(MongoDbConstants.COLLECTION,"otherCollection");
  List<DBObject> objIndex=new ArrayList<>();
  DBObject index1=new BasicDBObject();
  index1.put("a",1);
  DBObject index2=new BasicDBObject();
  index2.put("b",-1);
  objIndex.add(index1);
  objIndex.add(index2);
  headers.put(MongoDbConstants.COLLECTION_INDEX,objIndex);
  Object result=template.requestBodyAndHeaders("direct:dynamicityEnabled",body,headers);
  assertEquals("Response isn't of type WriteResult",BasicDBObject.class,result.getClass());
  MongoCollection<BasicDBObject> dynamicCollection=mongo.getDatabase("otherDB").getCollection("otherCollection",BasicDBObject.class);
  ListIndexesIterable<DBObject> indexInfos=dynamicCollection.listIndexes(DBObject.class);
  MongoCursor<DBObject> iterator=indexInfos.iterator();
  iterator.next();
  BasicDBObject key1=(BasicDBObject)iterator.next().get("key");
  BasicDBObject key2=(BasicDBObject)iterator.next().get("key");
  assertTrue("No index on the field a",key1.containsField("a") && "1".equals(key1.getString("a")));
  assertTrue("No index on the field b",key2.containsField("b") && "-1".equals(key2.getString("b")));
  DBObject b=dynamicCollection.find(new BasicDBObject("_id","testInsertDynamicityEnabledDBAndCollection")).first();
  assertNotNull("No record with 'testInsertDynamicityEnabledDBAndCollection' _id",b);
  b=testCollection.find(new BasicDBObject("_id","testInsertDynamicityEnabledDBOnly")).first();
  assertNull("There is a record with 'testInsertDynamicityEnabledDBAndCollection' _id in the test collection",b);
  assertTrue("The otherDB database should exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
}
