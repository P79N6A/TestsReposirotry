@Ignore @Test public void testInsertAutoCreateCollectionAndURIIndex(){
  assertEquals(0,testCollection.count());
  db.getCollection("otherCollection").deleteOne(new BasicDBObject());
  String body="{\"_id\": \"testInsertAutoCreateCollectionAndURIIndex\", \"a\" : 1, \"b\" : 2}";
  Map<String,Object> headers=new HashMap<>();
  Object result=template.requestBodyAndHeaders("direct:dynamicityDisabled",body,headers);
  assertEquals("Response isn't of type WriteResult",WriteResult.class,result.getClass());
  MongoCollection<BasicDBObject> collection=db.getCollection("otherCollection",BasicDBObject.class);
  MongoCursor<Document> indexInfos=collection.listIndexes().iterator();
  BasicDBObject key1=(BasicDBObject)indexInfos.next().get("key");
  BasicDBObject key2=(BasicDBObject)indexInfos.next().get("key");
  assertTrue("No index on the field b",key1.containsField("b") && "-1".equals(key1.getString("b")));
  assertTrue("No index on the field a",key2.containsField("a") && "1".equals(key2.getString("a")));
  DBObject b=collection.find(new BasicDBObject("_id","testInsertAutoCreateCollectionAndURIIndex")).first();
  assertNotNull("No record with 'testInsertAutoCreateCollectionAndURIIndex' _id",b);
  b=testCollection.find(new BasicDBObject("_id","testInsertAutoCreateCollectionAndURIIndex")).first();
  assertNull("There is a record with 'testInsertAutoCreateCollectionAndURIIndex' _id in the test collection",b);
  assertFalse("The otherDB database should not exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
}
