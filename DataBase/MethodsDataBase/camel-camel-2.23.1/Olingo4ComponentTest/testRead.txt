@Test public void testRead() throws Exception {
  final Map<String,Object> headers=new HashMap<>();
  final Edm metadata=(Edm)requestBodyAndHeaders("direct:readmetadata",null,headers);
  assertNotNull(metadata);
  assertEquals(1,metadata.getSchemas().size());
  final ClientServiceDocument document=(ClientServiceDocument)requestBodyAndHeaders("direct:readdocument",null,headers);
  assertNotNull(document);
  assertTrue(document.getEntitySets().size() > 1);
  LOG.info("Service document has {} entity sets",document.getEntitySets().size());
  final ClientEntitySet entities=(ClientEntitySet)requestBodyAndHeaders("direct:readentities",null,headers);
  assertNotNull(entities);
  assertEquals(5,entities.getEntities().size());
  final Long count=(Long)requestBodyAndHeaders("direct:readcount",null,headers);
  assertEquals(20,count.intValue());
  final ClientPrimitiveValue value=(ClientPrimitiveValue)requestBodyAndHeaders("direct:readvalue",null,headers);
  LOG.info("Client value \"{}\" has type {}",value,value.getTypeName());
  assertEquals("Male",value.asPrimitive().toString());
  final ClientPrimitiveValue singleProperty=(ClientPrimitiveValue)requestBodyAndHeaders("direct:readsingleprop",null,headers);
  assertTrue(singleProperty.isPrimitive());
  assertEquals("San Francisco International Airport",singleProperty.toString());
  final ClientComplexValue complexProperty=(ClientComplexValue)requestBodyAndHeaders("direct:readcomplexprop",null,headers);
  assertTrue(complexProperty.isComplex());
  assertEquals("San Francisco",complexProperty.get("City").getComplexValue().get("Name").getValue().toString());
  final ClientEntity entity=(ClientEntity)requestBodyAndHeaders("direct:readentitybyid",null,headers);
  assertNotNull(entity);
  assertEquals("Russell",entity.getProperty("FirstName").getValue().toString());
  final ClientEntity unbFuncReturn=(ClientEntity)requestBodyAndHeaders("direct:callunboundfunction",null,headers);
  assertNotNull(unbFuncReturn);
}
