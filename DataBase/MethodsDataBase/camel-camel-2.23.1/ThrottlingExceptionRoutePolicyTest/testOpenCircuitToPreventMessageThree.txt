@Test public void testOpenCircuitToPreventMessageThree() throws Exception {
  result.reset();
  result.expectedMessageCount(2);
  List<String> bodies=Arrays.asList("Message One","Message Two");
  result.expectedBodiesReceivedInAnyOrder(bodies);
  result.whenAnyExchangeReceived(new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      String msg=exchange.getIn().getBody(String.class);
      exchange.setException(new ThrottlingException(msg));
    }
  }
);
  template.sendBody(url,"Message One");
  template.sendBody(url,"Message Two");
  final ServiceSupport consumer=(ServiceSupport)context.getRoute("foo").getConsumer();
  await().atMost(2,TimeUnit.SECONDS).until(consumer::isSuspended);
  log.debug("sending message three");
  template.sendBody(url,"Message Three");
  result.setResultMinimumWaitTime(500);
  assertMockEndpointsSatisfied();
}
