/** 
 * You get three keys with the UserId "keyflag", a primary key and its two sub-keys. The sub-key with KeyFlag  {@link KeyFlags#SIGN_DATA} should beused for signing and the sub-key with KeyFlag {@link KeyFlags#ENCRYPT_COMMS} or {@link KeyFlags#ENCRYPT_COMMS} or{@link KeyFlags#ENCRYPT_STORAGE} should be used for decryption.
 * @throws Exception
 */
@Test public void testKeyFlagSelectsCorrectKey() throws Exception {
  MockEndpoint mockKeyFlag=getMockEndpoint("mock:encrypted_keyflag");
  mockKeyFlag.setExpectedMessageCount(1);
  template.sendBody("direct:keyflag","Test Message");
  assertMockEndpointsSatisfied();
  List<Exchange> exchanges=mockKeyFlag.getExchanges();
  assertEquals(1,exchanges.size());
  Exchange exchange=exchanges.get(0);
  Message inMess=exchange.getIn();
  assertNotNull(inMess);
  assertEquals(1,inMess.getHeader(PGPKeyAccessDataFormat.NUMBER_OF_ENCRYPTION_KEYS));
  assertEquals(1,inMess.getHeader(PGPKeyAccessDataFormat.NUMBER_OF_SIGNING_KEYS));
}
