@Test public void sendMessageHeadersShouldOverrideDefaultConfiguration() throws Exception {
  mockGmond.setMinimumExpectedMessageCount(0);
  mockGmond.setAssertPeriod(100L);
  mockGmond.whenAnyExchangeReceived(new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      Ganglia_message gangliaMessage=exchange.getIn().getBody(Ganglia_message.class);
      assertNotNull("The gmond mock should only receive a non-null ganglia message",gangliaMessage);
      assertEquals("depth",gangliaMessage.gmetric.name);
      assertEquals("float",gangliaMessage.gmetric.type);
      assertEquals(2,gangliaMessage.gmetric.slope);
      assertEquals("cm",gangliaMessage.gmetric.units);
      assertEquals(100,gangliaMessage.gmetric.tmax);
      assertEquals(10,gangliaMessage.gmetric.dmax);
      assertEquals("-3.0",gangliaMessage.gmetric.value);
    }
  }
);
  Map<String,Object> headers=new HashMap<>();
  headers.put(GROUP_NAME,"sea-mesure");
  headers.put(METRIC_NAME,"depth");
  headers.put(METRIC_TYPE,FLOAT);
  headers.put(METRIC_SLOPE,NEGATIVE);
  headers.put(METRIC_UNITS,"cm");
  headers.put(METRIC_TMAX,100);
  headers.put(METRIC_DMAX,10);
  template.sendBodyAndHeaders(getTestUri(),-3.0f,headers);
  mockGmond.assertIsSatisfied();
}
