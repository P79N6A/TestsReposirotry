@Test public void parseEnvelopedBodyTest() throws Exception {
  Security.addProvider(new BouncyCastleProvider());
  KeyPairGenerator kpg=KeyPairGenerator.getInstance("RSA","BC");
  kpg.initialize(1024,new SecureRandom());
  String issueDN="O=Punkhorn Software, C=US";
  KeyPair issueKP=kpg.generateKeyPair();
  X509Certificate issuerCertificate=makeCertificate(issueKP,issueDN,issueKP,issueDN);
  String encryptDN="CN=William J. Collins, E=punkhornsw@gmail.com, O=Punkhorn Software, C=US";
  KeyPair encryptKP=kpg.generateKeyPair();
  X509Certificate encryptionCertificate=makeCertificate(encryptKP,encryptDN,issueKP,issueDN);
  List<X509Certificate> certList=new ArrayList<>();
  certList.add(encryptionCertificate);
  certList.add(issuerCertificate);
  CMSEnvelopedDataGenerator cmsEnvelopeDataGenerator=new CMSEnvelopedDataGenerator();
  JceKeyTransRecipientInfoGenerator recipientInfoGenerator=new JceKeyTransRecipientInfoGenerator(encryptionCertificate);
  cmsEnvelopeDataGenerator.addRecipientInfoGenerator(recipientInfoGenerator);
  OutputEncryptor contentEncryptor=new JceCMSContentEncryptorBuilder(CMSAlgorithm.AES128_CCM).build();
  TextPlainEntity textEntity=new TextPlainEntity("This is a super secret messatge!","US-ASCII","7bit",false);
  ApplicationPkcs7MimeEntity applicationPkcs7MimeEntity=new ApplicationPkcs7MimeEntity(textEntity,cmsEnvelopeDataGenerator,contentEncryptor,"binary",true);
  MimeEntity decryptedMimeEntity=applicationPkcs7MimeEntity.getEncryptedEntity(encryptKP.getPrivate());
  assertEquals("Decrypted entity has unexpected content type","text/plain; charset=US-ASCII",decryptedMimeEntity.getContentTypeValue());
  assertEquals("Decrypted entity has unexpected content","This is a super secret messatge!",((TextPlainEntity)decryptedMimeEntity).getText());
}
