@Test public void errorTest() throws Exception {
  mockResult.expectedMessageCount(0);
  mockError.expectedMinimumMessageCount(1);
  Mockito.when(mockWeb3j.pendingTransactionObservable()).thenReturn(observable);
  Mockito.when(observable.subscribe(any(),any(),any())).thenAnswer(new Answer(){
    public Subscription answer(    InvocationOnMock invocation){
      Object[] args=invocation.getArguments();
      ((Action1<Throwable>)args[1]).call(new RuntimeException("Error"));
      return subscription;
    }
  }
);
  context.start();
  mockError.assertIsSatisfied();
  mockResult.assertIsSatisfied();
}
