@Test public void testJSON() throws Exception {
  mockCsv.whenAnyExchangeReceived(new Processor(){
    public void process(    Exchange exchange){
      Object mockBody=exchange.getIn().getBody();
      assertEquals(Order.class,mockBody.getClass());
      Order mockOrder=(Order)mockBody;
      assertEquals("Order-JSON-0001",mockOrder.getOrderId());
      assertEquals("MIZUYO-KAN",mockOrder.getItemId());
      assertEquals(16350,mockOrder.getQuantity());
    }
  }
);
  mockCsv.setExpectedMessageCount(1);
  String order="{\"orderId\":\"Order-JSON-0001\", \"itemId\":\"MIZUYO-KAN\", \"quantity\":\"16350\"}";
  OrderResponse expected=new OrderResponse().setAccepted(true).setOrderId("Order-JSON-0001").setDescription("Order accepted:[item='MIZUYO-KAN' quantity='16350']");
  ObjectMapper jsonMapper=new ObjectMapper();
  String expectedJson=jsonMapper.writeValueAsString(expected);
  Exchange answer=jsonProducer.send("direct:json",ex -> {
    ((DataTypeAware)ex.getIn()).setBody(order,new DataType("json"));
  }
);
  assertEquals(expectedJson,answer.getOut().getBody(String.class));
  mockCsv.assertIsSatisfied();
}
