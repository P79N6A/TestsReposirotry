@Test public void mqCreateBrokerTest() throws Exception {
  mock.expectedMessageCount(1);
  Exchange exchange=template.request("direct:createBroker",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(MQConstants.OPERATION,MQOperations.createBroker);
      exchange.getIn().setHeader(MQConstants.BROKER_NAME,"test");
      exchange.getIn().setHeader(MQConstants.BROKER_DEPLOYMENT_MODE,DeploymentMode.SINGLE_INSTANCE);
      exchange.getIn().setHeader(MQConstants.BROKER_INSTANCE_TYPE,"mq.t2.micro");
      exchange.getIn().setHeader(MQConstants.BROKER_ENGINE,EngineType.ACTIVEMQ.name());
      exchange.getIn().setHeader(MQConstants.BROKER_ENGINE_VERSION,"5.15.6");
      exchange.getIn().setHeader(MQConstants.BROKER_PUBLICLY_ACCESSIBLE,false);
      List<User> users=new ArrayList<>();
      User user=new User();
      user.setUsername("camel");
      user.setPassword("camelcamel12");
      users.add(user);
      exchange.getIn().setHeader(MQConstants.BROKER_USERS,users);
    }
  }
);
  assertMockEndpointsSatisfied();
  CreateBrokerResult resultGet=(CreateBrokerResult)exchange.getIn().getBody();
  assertEquals(resultGet.getBrokerId(),"1");
  assertEquals(resultGet.getBrokerArn(),"test");
}
