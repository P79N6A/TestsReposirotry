@Test public void sendMessageHeadersShouldOverrideDefaultConfiguration() throws Exception {
  mockGmond.setMinimumExpectedMessageCount(0);
  mockGmond.setAssertPeriod(100L);
  mockGmond.whenAnyExchangeReceived(new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      Ganglia_metadata_msg metadataMessage=exchange.getIn().getBody(Ganglia_metadata_msg.class);
      if (metadataMessage != null) {
        assertEquals("depth",metadataMessage.gfull.metric.name);
        assertEquals(FLOAT.getGangliaType(),metadataMessage.gfull.metric.type);
        assertEquals(NEGATIVE.getGangliaSlope(),metadataMessage.gfull.metric.slope);
        assertEquals("cm",metadataMessage.gfull.metric.units);
        assertEquals(100,metadataMessage.gfull.metric.tmax);
        assertEquals(10,metadataMessage.gfull.metric.dmax);
      }
 else {
        Ganglia_value_msg valueMessage=exchange.getIn().getBody(Ganglia_value_msg.class);
        if (valueMessage != null) {
          assertEquals("-3.0",valueMessage.gstr.str);
          assertEquals("%s",valueMessage.gstr.fmt);
        }
 else {
          fail("The gmond mock should only receive non-null metadata or value messages");
        }
      }
    }
  }
);
  Map<String,Object> headers=new HashMap<>();
  headers.put(GROUP_NAME,"sea-mesure");
  headers.put(METRIC_NAME,"depth");
  headers.put(METRIC_TYPE,FLOAT);
  headers.put(METRIC_SLOPE,NEGATIVE);
  headers.put(METRIC_UNITS,"cm");
  headers.put(METRIC_TMAX,100);
  headers.put(METRIC_DMAX,10);
  template.sendBodyAndHeaders(getTestUri(),-3.0f,headers);
  mockGmond.assertIsSatisfied();
}
