@Test public void testPutWithTTL() throws Exception {
  final String key1=context().getUuidGenerator().generateUuid();
  final String key2=context().getUuidGenerator().generateUuid();
  final String val=context().getUuidGenerator().generateUuid();
  Message result;
  result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMap.Action.PUT).withHeader(AtomixClientConstants.RESOURCE_KEY,key1).withHeader(AtomixClientConstants.RESOURCE_TTL,"1s").withBody(val).request(Message.class);
  assertFalse(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
  assertEquals(val,result.getBody());
  assertEquals(val,map.get(key1).join());
  result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMap.Action.PUT).withHeader(AtomixClientConstants.RESOURCE_KEY,key2).withHeader(AtomixClientConstants.RESOURCE_TTL,"250").withBody(val).request(Message.class);
  assertFalse(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
  assertEquals(val,result.getBody());
  assertEquals(val,map.get(key2).join());
  CountDownLatch latch=new CountDownLatch(2);
  map.onRemove(key1,e -> latch.countDown());
  map.onRemove(key2,e -> latch.countDown());
  latch.await();
  assertFalse(map.containsKey(key1).join());
  assertFalse(map.containsKey(key2).join());
}
