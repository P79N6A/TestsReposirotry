@Test public void testUnmarshallCsvRecordFieldStartingWithSeparatorChar() throws Exception {
  mockEndPoint.expectedMessageCount(4);
  template.sendBody("direct:start","'val1',',val2',1");
  template.sendBody("direct:start","',',',val2',2");
  template.sendBody("direct:start","',','val2,',3");
  template.sendBody("direct:start","'',',val2,',4");
  mockEndPoint.assertIsSatisfied();
  BindyCsvRowFormat row=mockEndPoint.getExchanges().get(0).getIn().getBody(BindyCsvRowFormat.class);
  assertEquals("val1",row.getFirstField());
  assertEquals(",val2",row.getSecondField());
  assertEquals(BigDecimal.valueOf(1),row.getNumber());
  row=mockEndPoint.getExchanges().get(1).getIn().getBody(BindyCsvRowFormat.class);
  assertEquals(",",row.getFirstField());
  assertEquals(",val2",row.getSecondField());
  assertEquals(BigDecimal.valueOf(2),row.getNumber());
  row=mockEndPoint.getExchanges().get(2).getIn().getBody(BindyCsvRowFormat.class);
  assertEquals(",",row.getFirstField());
  assertEquals("val2,",row.getSecondField());
  assertEquals(BigDecimal.valueOf(3),row.getNumber());
  row=mockEndPoint.getExchanges().get(3).getIn().getBody(BindyCsvRowFormat.class);
  assertEquals("",row.getFirstField());
  assertEquals(",val2,",row.getSecondField());
  assertEquals(BigDecimal.valueOf(4),row.getNumber());
}
