@Test public void testUndertowPojoTypePutUsers() throws Exception {
  UserPojo user1=new UserPojo();
  user1.setId(1);
  user1.setName("Scott");
  UserPojo user2=new UserPojo();
  user2.setId(2);
  user2.setName("Claus");
  final UserPojo[] users=new UserPojo[]{user1,user2};
  MockEndpoint mock=getMockEndpoint("mock:putUsers");
  mock.expectedMessageCount(1);
  mock.message(0).body(UserPojo[].class);
  Exchange outExchange=template.request("undertow:http://localhost:{{port}}/users",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(Exchange.HTTP_METHOD,"PUT");
      exchange.getIn().setHeader(Exchange.ACCEPT_CONTENT_TYPE,"application/json");
      exchange.getIn().setHeader(Exchange.CONTENT_TYPE,"application/json");
      String body=mapper.writeValueAsString(users);
      exchange.getIn().setBody(body);
    }
  }
);
  assertNotNull(outExchange);
  assertEquals(200,outExchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE));
  assertMockEndpointsSatisfied();
  Exchange exchange=mock.assertExchangeReceived(0);
  UserPojo[] receivedUsers=exchange.getIn().getBody(UserPojo[].class);
  assertEquals(2,receivedUsers.length);
  assertEquals(user1.getName(),receivedUsers[0].getName());
  assertEquals(user2.getName(),receivedUsers[1].getName());
}
