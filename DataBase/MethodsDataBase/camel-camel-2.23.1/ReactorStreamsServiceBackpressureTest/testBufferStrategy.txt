@Test public void testBufferStrategy() throws Exception {
  getReactiveStreamsComponent().setBackpressureStrategy(ReactiveStreamsBackpressureStrategy.BUFFER);
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      from("timer:gen?period=20&repeatCount=20").setBody().header(Exchange.TIMER_COUNTER).to("reactive-streams:integers");
    }
  }
);
  Flux<Integer> integers=Flux.from(crs.fromStream("integers",Integer.class));
  ConcurrentLinkedQueue<Integer> queue=new ConcurrentLinkedQueue<>();
  CountDownLatch latch=new CountDownLatch(1);
  Flux.range(0,50).zipWith(integers,(l,i) -> i).timeout(Duration.ofMillis(2000),Flux.empty()).doOnComplete(latch::countDown).subscribe(queue::add);
  context.start();
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
  Assert.assertEquals(20,queue.size());
  int num=1;
  for (  int i : queue) {
    Assert.assertEquals(num++,i);
  }
}
