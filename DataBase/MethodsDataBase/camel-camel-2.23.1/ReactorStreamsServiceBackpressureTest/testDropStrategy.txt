@Test public void testDropStrategy() throws Exception {
  getReactiveStreamsComponent().setBackpressureStrategy(ReactiveStreamsBackpressureStrategy.OLDEST);
  context.addRoutes(new RouteBuilder(){
    @Override public void configure() throws Exception {
      from("timer:gen?period=20&repeatCount=20").setBody().header(Exchange.TIMER_COUNTER).to("reactive-streams:integers");
    }
  }
);
  final ConcurrentLinkedQueue<Integer> queue=new ConcurrentLinkedQueue<>();
  final CountDownLatch latch=new CountDownLatch(1);
  final CountDownLatch latch2=new CountDownLatch(2);
  TestSubscriber<Integer> subscriber=new TestSubscriber<Integer>(){
    @Override public void onNext(    Integer o){
      queue.add(o);
      latch.countDown();
      latch2.countDown();
    }
  }
;
  subscriber.setInitiallyRequested(1);
  crs.fromStream("integers",Integer.class).subscribe(subscriber);
  context.start();
  Assert.assertTrue(latch.await(5,TimeUnit.SECONDS));
  Thread.sleep(1000);
  subscriber.request(19);
  Assert.assertTrue(latch2.await(1,TimeUnit.SECONDS));
  Thread.sleep(200);
  Assert.assertEquals(2,queue.size());
  int sum=queue.stream().reduce((i,j) -> i + j).get();
  Assert.assertEquals(3,sum);
  subscriber.cancel();
}
