@Test public void logBranchTest() throws Exception {
  Git git=getGitTestRepository();
  File fileToAdd=new File(gitLocalRepo,filenameToAdd);
  fileToAdd.createNewFile();
  git.add().addFilepattern(filenameToAdd).call();
  File gitDir=new File(gitLocalRepo,".git");
  assertEquals(gitDir.exists(),true);
  Status status=git.status().call();
  assertTrue(status.getAdded().contains(filenameToAdd));
  git.commit().setMessage(commitMessage).call();
  git.branchCreate().setName(branchTest).call();
  List<Ref> ref=git.branchList().call();
  boolean branchCreated=false;
  for (  Ref refInternal : ref) {
    if (refInternal.getName().equals("refs/heads/" + branchTest)) {
      branchCreated=true;
    }
  }
  assertEquals(branchCreated,true);
  File fileToAddDifferent=new File(gitLocalRepo,filenameBranchToAdd);
  fileToAddDifferent.createNewFile();
  git.add().addFilepattern(filenameBranchToAdd).call();
  git.commit().setMessage(commitMessageAll).call();
  Iterable<RevCommit> revCommits=template.requestBody("direct:log-branch","",Iterable.class);
  Iterator<RevCommit> gitLogs=git.log().call().iterator();
  for (  RevCommit rev : revCommits) {
    RevCommit gitRevCommit=gitLogs.next();
    assertEquals(gitRevCommit.getName(),rev.getName());
    assertEquals(gitRevCommit.getShortMessage(),rev.getShortMessage());
  }
  git.close();
}
