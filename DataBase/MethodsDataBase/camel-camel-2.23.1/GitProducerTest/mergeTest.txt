@Test public void mergeTest() throws Exception {
  Git git=getGitTestRepository();
  File gitDir=new File(gitLocalRepo,".git");
  assertEquals(gitDir.exists(),true);
  File fileToAdd=new File(gitLocalRepo,filenameToAdd);
  fileToAdd.createNewFile();
  git.add().addFilepattern(filenameToAdd).call();
  Status status=git.status().call();
  assertTrue(status.getAdded().contains(filenameToAdd));
  git.commit().setMessage(commitMessage).call();
  validateGitLogs(git,commitMessage);
  git.checkout().setCreateBranch(true).setName(branchTest).setUpstreamMode(SetupUpstreamMode.SET_UPSTREAM).call();
  template.send("direct:commit-branch",new Processor(){
    @Override public void process(    Exchange exchange) throws Exception {
      exchange.getIn().setHeader(GitConstants.GIT_COMMIT_MESSAGE,commitMessageBranch);
    }
  }
);
  validateGitLogs(git,commitMessageBranch,commitMessage);
  MergeResult result=template.requestBody("direct:merge","",MergeResult.class);
  assertEquals(result.getMergeStatus().toString(),"Fast-forward");
  git.close();
}
