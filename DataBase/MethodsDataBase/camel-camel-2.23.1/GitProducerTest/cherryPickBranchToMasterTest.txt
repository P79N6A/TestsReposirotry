@Test public void cherryPickBranchToMasterTest() throws Exception {
  Git git=getGitTestRepository();
  File fileToAdd=new File(gitLocalRepo,filenameToAdd);
  fileToAdd.createNewFile();
  git.add().addFilepattern(filenameToAdd).call();
  File gitDir=new File(gitLocalRepo,".git");
  assertEquals(gitDir.exists(),true);
  Status status=git.status().call();
  assertTrue(status.getAdded().contains(filenameToAdd));
  git.commit().setMessage(commitMessage).call();
  git.branchCreate().setName(branchTest).call();
  List<Ref> branches=git.branchList().call();
  Boolean branchExists=false;
  for (  Ref reference : branches) {
    if (("refs/heads/" + branchTest).equals(reference.getName())) {
      branchExists=true;
    }
  }
  assertTrue(branchExists);
  String fileToAdd1Name="filetest1test.txt";
  File fileToAdd1=new File(gitLocalRepo,fileToAdd1Name);
  fileToAdd1.createNewFile();
  git.add().addFilepattern(fileToAdd1Name).call();
  status=git.status().call();
  assertTrue(status.getAdded().contains(fileToAdd1Name));
  git.commit().setMessage("Test second commit").call();
  Iterable<RevCommit> logs=git.log().call();
  validateGitLogs(git,"Test second commit",commitMessage);
  String id=logs.iterator().next().getName();
  template.sendBodyAndHeader("direct:cherrypick-master","",GitConstants.GIT_COMMIT_ID,id);
  git.checkout().setCreateBranch(false).setName("refs/heads/master").call();
  validateGitLogs(git,"Test second commit",commitMessage);
  git.close();
}
