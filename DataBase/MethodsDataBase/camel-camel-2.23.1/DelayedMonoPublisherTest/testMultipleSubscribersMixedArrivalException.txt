@Test public void testMultipleSubscribersMixedArrivalException() throws Exception {
  DelayedMonoPublisher<Integer> pub=new DelayedMonoPublisher<>(service);
  Exception ex=new RuntimeException("An exception");
  ConcurrentLinkedDeque<Throwable> exceptions=new ConcurrentLinkedDeque<>();
  CountDownLatch latch=new CountDownLatch(2);
  Flowable.fromPublisher(pub).subscribe(item -> {
  }
,e -> {
    exceptions.add(e);
    latch.countDown();
  }
);
  Thread.sleep(200);
  pub.setException(ex);
  Flowable.fromPublisher(pub).subscribe(item -> {
  }
,e -> {
    exceptions.add(e);
    latch.countDown();
  }
);
  assertTrue(latch.await(1,TimeUnit.SECONDS));
  assertEquals(2,exceptions.size());
  for (  Throwable t : exceptions) {
    assertEquals(ex,t);
  }
}
