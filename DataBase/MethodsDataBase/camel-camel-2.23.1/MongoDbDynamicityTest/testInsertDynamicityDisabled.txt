@Test public void testInsertDynamicityDisabled(){
  assertEquals(0,testCollection.count());
  mongo.getDatabase("otherDB").drop();
  db.getCollection("otherCollection").drop();
  assertFalse("The otherDB database should not exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
  String body="{\"_id\": \"testInsertDynamicityDisabled\", \"a\" : \"1\"}";
  Map<String,Object> headers=new HashMap<>();
  headers.put(MongoDbConstants.DATABASE,"otherDB");
  headers.put(MongoDbConstants.COLLECTION,"otherCollection");
  template.requestBodyAndHeaders("direct:noDynamicity",body,headers);
  DBObject b=testCollection.find(new BasicDBObject("_id","testInsertDynamicityDisabled")).first();
  assertNotNull("No record with 'testInsertDynamicityDisabled' _id",b);
  body="{\"_id\": \"testInsertDynamicityDisabledExplicitly\", \"a\" : \"1\"}";
  template.requestBodyAndHeaders("direct:noDynamicityExplicit",body,headers);
  b=testCollection.find(new BasicDBObject("_id","testInsertDynamicityDisabledExplicitly")).first();
  assertNotNull("No record with 'testInsertDynamicityDisabledExplicitly' _id",b);
  assertFalse("The otherDB database should not exist",StreamSupport.stream(mongo.listDatabaseNames().spliterator(),false).anyMatch("otherDB"::equals));
}
