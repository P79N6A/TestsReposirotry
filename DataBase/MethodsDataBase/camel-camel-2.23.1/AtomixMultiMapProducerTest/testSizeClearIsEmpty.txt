@Test public void testSizeClearIsEmpty() throws Exception {
  final String key1=context().getUuidGenerator().generateUuid();
  final String key2=context().getUuidGenerator().generateUuid();
  Message result;
  result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.SIZE).request(Message.class);
  assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
  assertEquals(0,result.getBody(Integer.class).intValue());
  assertEquals(map.size().join(),result.getBody(Integer.class));
  map.put(key1,context().getUuidGenerator().generateUuid()).join();
  map.put(key1,context().getUuidGenerator().generateUuid()).join();
  map.put(key2,context().getUuidGenerator().generateUuid()).join();
  result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.SIZE).request(Message.class);
  assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
  assertEquals(map.size().join(),result.getBody(Integer.class));
  result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.SIZE).withHeader(AtomixClientConstants.RESOURCE_KEY,key1).request(Message.class);
  assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
  assertEquals(map.size(key1).join(),result.getBody(Integer.class));
  result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.IS_EMPTY).request(Message.class);
  assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
  assertFalse(result.getBody(Boolean.class));
  assertFalse(map.isEmpty().join());
  result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.CLEAR).request(Message.class);
  assertFalse(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
  assertEquals(0,map.size().join().intValue());
  result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.IS_EMPTY).request(Message.class);
  assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
  assertTrue(result.getBody(Boolean.class));
  assertTrue(map.isEmpty().join());
}
