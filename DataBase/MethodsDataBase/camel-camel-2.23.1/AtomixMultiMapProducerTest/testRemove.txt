@Test public void testRemove() throws Exception {
  final String key=context().getUuidGenerator().generateUuid();
  final String val1=context().getUuidGenerator().generateUuid();
  final String val2=context().getUuidGenerator().generateUuid();
  final String val3=context().getUuidGenerator().generateUuid();
  map.put(key,val1).join();
  map.put(key,val2).join();
  map.put(key,val3).join();
  Message result;
  result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.REMOVE).withHeader(AtomixClientConstants.RESOURCE_KEY,key).withHeader(AtomixClientConstants.RESOURCE_VALUE,val1).request(Message.class);
  assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
  assertEquals(Arrays.asList(val2,val3),map.get(key).join());
  result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.REMOVE_VALUE).withHeader(AtomixClientConstants.RESOURCE_VALUE,val2).request(Message.class);
  assertFalse(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
  assertEquals(Arrays.asList(val3),map.get(key).join());
  assertTrue(map.containsKey(key).join());
  result=fluent.clearAll().withHeader(AtomixClientConstants.RESOURCE_ACTION,AtomixMultiMap.Action.REMOVE).withHeader(AtomixClientConstants.RESOURCE_KEY,key).request(Message.class);
  assertTrue(result.getHeader(AtomixClientConstants.RESOURCE_ACTION_HAS_RESULT,Boolean.class));
  assertFalse(map.containsKey(key).join());
}
