@Test public void testMix() throws Exception {
  DefaultCamelContext context=null;
  try {
    String instanceName=UUID.randomUUID().toString();
    Config namedConfig=new Config();
    namedConfig.setInstanceName("named-" + instanceName);
    namedConfig.getNetworkConfig().setPort(9001);
    namedConfig.getNetworkConfig().getJoin().getAwsConfig().setEnabled(false);
    namedConfig.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(true);
    namedConfig.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(false);
    Config customConfig=new Config();
    customConfig.setInstanceName("custom-" + instanceName);
    customConfig.getNetworkConfig().setPort(9002);
    customConfig.getNetworkConfig().getJoin().getAwsConfig().setEnabled(false);
    customConfig.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(true);
    customConfig.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(false);
    Config sharedConfig=new Config();
    sharedConfig.setInstanceName("custom-" + instanceName);
    sharedConfig.getNetworkConfig().setPort(9003);
    sharedConfig.getNetworkConfig().getJoin().getAwsConfig().setEnabled(false);
    sharedConfig.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(true);
    sharedConfig.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(false);
    Config componentConfig=new Config();
    sharedConfig.setInstanceName("component-" + instanceName);
    sharedConfig.getNetworkConfig().setPort(9004);
    sharedConfig.getNetworkConfig().getJoin().getAwsConfig().setEnabled(false);
    sharedConfig.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(true);
    sharedConfig.getNetworkConfig().getJoin().getTcpIpConfig().setEnabled(false);
    HazelcastInstance hzNamed=Hazelcast.newHazelcastInstance(namedConfig);
    HazelcastInstance hzShared=Hazelcast.newHazelcastInstance(sharedConfig);
    HazelcastInstance hzComponent=Hazelcast.newHazelcastInstance(componentConfig);
    SimpleRegistry reg=new SimpleRegistry();
    reg.put(customConfig.getInstanceName(),customConfig);
    reg.put(sharedConfig.getInstanceName(),hzShared);
    HazelcastMapComponent component=new HazelcastMapComponent();
    component.setHazelcastInstance(hzComponent);
    context=new DefaultCamelContext(reg);
    context.addComponent("hazelcast-map",component);
    context.start();
    HazelcastDefaultEndpoint endpoint1=getHzEndpoint(context,"hazelcast-map:my-cache-1?hazelcastInstanceName=" + namedConfig.getInstanceName());
    HazelcastDefaultEndpoint endpoint2=getHzEndpoint(context,"hazelcast-map:my-cache-2?hazelcastConfig=#" + customConfig.getInstanceName());
    HazelcastDefaultEndpoint endpoint3=getHzEndpoint(context,"hazelcast-map:my-cache-2?hazelcastInstance=#" + sharedConfig.getInstanceName());
    HazelcastDefaultEndpoint endpoint4=getHzEndpoint(context,"hazelcast-map:my-cache-4");
    Assert.assertNotNull(endpoint1.getHazelcastInstance());
    Assert.assertNotNull(endpoint2.getHazelcastInstance());
    Assert.assertNotNull(endpoint3.getHazelcastInstance());
    Assert.assertNotNull(endpoint4.getHazelcastInstance());
    Assert.assertEquals(4,Hazelcast.getAllHazelcastInstances().size());
    Assert.assertTrue(hzNamed == endpoint1.getHazelcastInstance());
    Assert.assertTrue(Hazelcast.getHazelcastInstanceByName(customConfig.getInstanceName()) == endpoint2.getHazelcastInstance());
    Assert.assertTrue(hzShared == endpoint3.getHazelcastInstance());
    Assert.assertTrue(hzComponent == endpoint4.getHazelcastInstance());
    Assert.assertNotNull(component.getHazelcastInstance());
    Assert.assertTrue(hzComponent == component.getHazelcastInstance());
    context.stop();
    Assert.assertEquals(3,Hazelcast.getAllHazelcastInstances().size());
  }
  finally {
    if (context != null && context.isStarted()) {
      context.stop();
    }
  }
}
