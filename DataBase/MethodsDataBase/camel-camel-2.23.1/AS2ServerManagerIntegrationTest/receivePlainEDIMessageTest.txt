@Test public void receivePlainEDIMessageTest() throws Exception {
  AS2ClientConnection clientConnection=new AS2ClientConnection(AS2_VERSION,USER_AGENT,CLIENT_FQDN,TARGET_HOST,TARGET_PORT);
  AS2ClientManager clientManager=new AS2ClientManager(clientConnection);
  clientManager.send(EDI_MESSAGE,REQUEST_URI,SUBJECT,FROM,AS2_NAME,AS2_NAME,AS2MessageStructure.PLAIN,ContentType.create(AS2MediaType.APPLICATION_EDIFACT,AS2Charset.US_ASCII),null,null,null,null,DISPOSITION_NOTIFICATION_TO,SIGNED_RECEIPT_MIC_ALGORITHMS,null,null,null);
  MockEndpoint mockEndpoint=getMockEndpoint("mock:as2RcvMsgs");
  mockEndpoint.expectedMinimumMessageCount(1);
  mockEndpoint.setResultWaitTime(TimeUnit.MILLISECONDS.convert(30,TimeUnit.SECONDS));
  mockEndpoint.assertIsSatisfied();
  final List<Exchange> exchanges=mockEndpoint.getExchanges();
  assertNotNull("listen result",exchanges);
  assertFalse("listen result",exchanges.isEmpty());
  LOG.debug("poll result: " + exchanges);
  Exchange exchange=exchanges.get(0);
  Message message=exchange.getIn();
  assertNotNull("exchange message",message);
  BasicHttpContext context=message.getBody(BasicHttpContext.class);
  assertNotNull("context",context);
  HttpCoreContext coreContext=HttpCoreContext.adapt(context);
  HttpRequest request=coreContext.getRequest();
  assertNotNull("request",request);
  assertEquals("Unexpected method value",METHOD,request.getRequestLine().getMethod());
  assertEquals("Unexpected request URI value",REQUEST_URI,request.getRequestLine().getUri());
  assertEquals("Unexpected HTTP version value",HttpVersion.HTTP_1_1,request.getRequestLine().getProtocolVersion());
  assertEquals("Unexpected subject value",SUBJECT,request.getFirstHeader(AS2Header.SUBJECT).getValue());
  assertEquals("Unexpected from value",FROM,request.getFirstHeader(AS2Header.FROM).getValue());
  assertEquals("Unexpected AS2 version value",AS2_VERSION,request.getFirstHeader(AS2Header.AS2_VERSION).getValue());
  assertEquals("Unexpected AS2 from value",AS2_NAME,request.getFirstHeader(AS2Header.AS2_FROM).getValue());
  assertEquals("Unexpected AS2 to value",AS2_NAME,request.getFirstHeader(AS2Header.AS2_TO).getValue());
  assertTrue("Unexpected message id value",request.getFirstHeader(AS2Header.MESSAGE_ID).getValue().endsWith(CLIENT_FQDN + ">"));
  assertEquals("Unexpected target host value",TARGET_HOST + ":" + TARGET_PORT,request.getFirstHeader(AS2Header.TARGET_HOST).getValue());
  assertEquals("Unexpected user agent value",USER_AGENT,request.getFirstHeader(AS2Header.USER_AGENT).getValue());
  assertNotNull("Date value missing",request.getFirstHeader(AS2Header.DATE));
  assertNotNull("Content length value missing",request.getFirstHeader(AS2Header.CONTENT_LENGTH));
  assertTrue("Unexpected content type for message",request.getFirstHeader(AS2Header.CONTENT_TYPE).getValue().startsWith(AS2MediaType.APPLICATION_EDIFACT));
  assertTrue("Request does not contain entity",request instanceof BasicHttpEntityEnclosingRequest);
  HttpEntity entity=((BasicHttpEntityEnclosingRequest)request).getEntity();
  assertNotNull("Request does not contain entity",entity);
  assertTrue("Unexpected request entity type",entity instanceof ApplicationEDIFACTEntity);
  ApplicationEDIFACTEntity ediEntity=(ApplicationEDIFACTEntity)entity;
  assertTrue("Unexpected content type for entity",ediEntity.getContentType().getValue().startsWith(AS2MediaType.APPLICATION_EDIFACT));
  assertTrue("Entity not set as main body of request",ediEntity.isMainBody());
  String rcvdMessage=ediEntity.getEdiMessage().replaceAll("\r","");
  assertEquals("EDI message does not match",EDI_MESSAGE,rcvdMessage);
}
