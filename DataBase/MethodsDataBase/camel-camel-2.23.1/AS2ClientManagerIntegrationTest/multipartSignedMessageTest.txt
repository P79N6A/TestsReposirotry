@Test public void multipartSignedMessageTest() throws Exception {
  final Map<String,Object> headers=new HashMap<>();
  headers.put("CamelAS2.requestUri",REQUEST_URI);
  headers.put("CamelAS2.subject",SUBJECT);
  headers.put("CamelAS2.from",FROM);
  headers.put("CamelAS2.as2From",AS2_NAME);
  headers.put("CamelAS2.as2To",AS2_NAME);
  headers.put("CamelAS2.as2MessageStructure",AS2MessageStructure.SIGNED);
  headers.put("CamelAS2.ediMessageContentType",ContentType.create(AS2MediaType.APPLICATION_EDIFACT,AS2Charset.US_ASCII));
  headers.put("CamelAS2.ediMessageTransferEncoding",EDI_MESSAGE_CONTENT_TRANSFER_ENCODING);
  headers.put("CamelAS2.signingCertificateChain",certList.toArray(new Certificate[0]));
  headers.put("CamelAS2.signingPrivateKey",signingKP.getPrivate());
  headers.put("CamelAS2.dispositionNotificationTo","mrAS2@example.com");
  headers.put("CamelAS2.signedReceiptMicAlgorithms",SIGNED_RECEIPT_MIC_ALGORITHMS);
  headers.put("CamelAS2.encryptingAlgorithm",null);
  headers.put("CamelAS2.encryptingCertificateChain",null);
  headers.put("CamelAS2.encryptingPrivateKey",null);
  final org.apache.http.protocol.HttpCoreContext result=requestBodyAndHeaders("direct://SEND",EDI_MESSAGE,headers);
  assertNotNull("send result",result);
  LOG.debug("send: " + result);
  HttpRequest request=result.getRequest();
  assertNotNull("Request",request);
  assertTrue("Request does not contain body",request instanceof HttpEntityEnclosingRequest);
  HttpEntity entity=((HttpEntityEnclosingRequest)request).getEntity();
  assertNotNull("Request body",entity);
  assertTrue("Request body does not contain EDI entity",entity instanceof MultipartSignedEntity);
  MimeEntity signedEntity=((MultipartSignedEntity)entity).getSignedDataEntity();
  assertTrue("Signed entity wrong type",signedEntity instanceof ApplicationEDIEntity);
  ApplicationEDIEntity ediMessageEntity=(ApplicationEDIEntity)signedEntity;
  String ediMessage=ediMessageEntity.getEdiMessage();
  assertEquals("EDI message is different",EDI_MESSAGE,ediMessage);
  HttpResponse response=result.getResponse();
  assertNotNull("Response",response);
  String contentTypeHeaderValue=HttpMessageUtils.getHeaderValue(response,AS2Header.CONTENT_TYPE);
  ContentType responseContentType=ContentType.parse(contentTypeHeaderValue);
  assertEquals("Unexpected response type",AS2MimeType.MULTIPART_SIGNED,responseContentType.getMimeType());
  assertEquals("Unexpected mime version",AS2Constants.MIME_VERSION,HttpMessageUtils.getHeaderValue(response,AS2Header.MIME_VERSION));
  assertEquals("Unexpected AS2 version",EXPECTED_AS2_VERSION,HttpMessageUtils.getHeaderValue(response,AS2Header.AS2_VERSION));
  assertEquals("Unexpected MDN subject",EXPECTED_MDN_SUBJECT,HttpMessageUtils.getHeaderValue(response,AS2Header.SUBJECT));
  assertEquals("Unexpected MDN from",MDN_FROM,HttpMessageUtils.getHeaderValue(response,AS2Header.FROM));
  assertEquals("Unexpected AS2 from",AS2_NAME,HttpMessageUtils.getHeaderValue(response,AS2Header.AS2_FROM));
  assertEquals("Unexpected AS2 to",AS2_NAME,HttpMessageUtils.getHeaderValue(response,AS2Header.AS2_TO));
  assertNotNull("Missing message id",HttpMessageUtils.getHeaderValue(response,AS2Header.MESSAGE_ID));
  HttpEntity responseEntity=response.getEntity();
  assertNotNull("Response entity",responseEntity);
  assertTrue("Unexpected response entity type",responseEntity instanceof MultipartSignedEntity);
  MultipartSignedEntity responseSignedEntity=(MultipartSignedEntity)responseEntity;
  assertTrue("Signature for response entity is invalid",responseSignedEntity.isValid());
  MimeEntity responseSignedDataEntity=responseSignedEntity.getSignedDataEntity();
  assertTrue("Signed entity wrong type",responseSignedDataEntity instanceof DispositionNotificationMultipartReportEntity);
  DispositionNotificationMultipartReportEntity reportEntity=(DispositionNotificationMultipartReportEntity)responseSignedDataEntity;
  assertEquals("Unexpected number of body parts in report",2,reportEntity.getPartCount());
  MimeEntity firstPart=reportEntity.getPart(0);
  assertEquals("Unexpected content type in first body part of report",ContentType.create(AS2MimeType.TEXT_PLAIN,AS2Charset.US_ASCII).toString(),firstPart.getContentTypeValue());
  MimeEntity secondPart=reportEntity.getPart(1);
  assertEquals("Unexpected content type in second body part of report",ContentType.create(AS2MimeType.MESSAGE_DISPOSITION_NOTIFICATION,AS2Charset.US_ASCII).toString(),secondPart.getContentTypeValue());
  ApplicationPkcs7SignatureEntity signatureEntity=responseSignedEntity.getSignatureEntity();
  assertNotNull("Signature Entity",signatureEntity);
  assertTrue("",secondPart instanceof AS2MessageDispositionNotificationEntity);
  AS2MessageDispositionNotificationEntity messageDispositionNotificationEntity=(AS2MessageDispositionNotificationEntity)secondPart;
  assertEquals("Unexpected value for reporting UA",ORIGIN_SERVER_NAME,messageDispositionNotificationEntity.getReportingUA());
  assertEquals("Unexpected value for final recipient",AS2_NAME,messageDispositionNotificationEntity.getFinalRecipient());
  assertEquals("Unexpected value for original message ID",HttpMessageUtils.getHeaderValue(request,AS2Header.MESSAGE_ID),messageDispositionNotificationEntity.getOriginalMessageId());
  assertEquals("Unexpected value for disposition mode",DispositionMode.AUTOMATIC_ACTION_MDN_SENT_AUTOMATICALLY,messageDispositionNotificationEntity.getDispositionMode());
  assertEquals("Unexpected value for disposition type",AS2DispositionType.PROCESSED,messageDispositionNotificationEntity.getDispositionType());
  ReceivedContentMic receivedContentMic=messageDispositionNotificationEntity.getReceivedContentMic();
  ReceivedContentMic computedContentMic=MicUtils.createReceivedContentMic((HttpEntityEnclosingRequest)request);
  assertEquals("Received content MIC does not match computed",computedContentMic.getEncodedMessageDigest(),receivedContentMic.getEncodedMessageDigest());
}
