@Test public void testCacheGet() throws Exception {
  final String key="1";
  final String val="1";
  fluentTemplate().withHeader(CaffeineConstants.ACTION,CaffeineConstants.ACTION_PUT).withHeader(CaffeineConstants.KEY,key).withBody(val).to("direct://start").send();
  MockEndpoint mock1=getMockEndpoint("mock:result-get");
  mock1.expectedMinimumMessageCount(1);
  mock1.expectedBodiesReceived(val);
  mock1.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,true);
  mock1.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED,true);
  fluentTemplate().withHeader(CaffeineConstants.ACTION,CaffeineConstants.ACTION_GET).withHeader(CaffeineConstants.KEY,key).withBody(val).to("direct://get").send();
  fluentTemplate().withHeader(CaffeineConstants.ACTION,CaffeineConstants.ACTION_PUT).withHeader(CaffeineConstants.KEY,key).withBody(val).to("direct://start-1").send();
  MockEndpoint mock2=getMockEndpoint("mock:result-get-1");
  mock2.expectedMinimumMessageCount(1);
  mock2.expectedBodiesReceived(val);
  mock2.expectedHeaderReceived(CaffeineConstants.ACTION_HAS_RESULT,true);
  mock2.expectedHeaderReceived(CaffeineConstants.ACTION_SUCCEEDED,true);
  fluentTemplate().withHeader(CaffeineConstants.ACTION,CaffeineConstants.ACTION_GET).withHeader(CaffeineConstants.KEY,key).withBody(val).to("direct://get-1").send();
  assertMockEndpointsSatisfied();
}
