@Test public void testServiceRegistrationWithRouteProperties() throws Exception {
  final String serviceName=UUID.randomUUID().toString();
  final String serviceId=UUID.randomUUID().toString();
  final int port=9090;
  context.addRouteDefinition(new RouteDefinition().from("direct:start").routeProperty(ServiceDefinition.SERVICE_META_NAME,serviceName).routeProperty(ServiceDefinition.SERVICE_META_ID,serviceId).routeProperty(ServiceDefinition.SERVICE_META_HOST,"localhost").routeProperty(ServiceDefinition.SERVICE_META_PORT,"" + port).routeProperty("service.meta1","meta1").routeProperty("meta2","meta2").routePolicy(new ServiceRegistrationRoutePolicy()).to("mock:end"));
  InMemoryServiceRegistry sr=new InMemoryServiceRegistry();
  context.addService(sr);
  context.start();
  final Map<String,ServiceDefinition> defs=sr.getDefinitions();
  Assertions.assertThat(defs).hasSize(1);
  Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("name",serviceName);
  Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("id",serviceId);
  Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("host","localhost");
  Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("port",port);
  Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_NAME,serviceName);
  Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_ID,serviceId);
  Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_HOST,"localhost");
  Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_PORT,"" + port);
  Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry("service.meta1","meta1");
  Assertions.assertThat(defs.get(serviceId).getMetadata()).doesNotContainKeys("meta2");
}
