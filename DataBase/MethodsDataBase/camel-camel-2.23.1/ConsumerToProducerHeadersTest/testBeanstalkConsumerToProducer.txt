@Test public void testBeanstalkConsumerToProducer() throws Exception {
  final long jobId=111;
  final byte[] payload=Helper.stringToBytes(testMessage);
  final Job jobMock=mock(Job.class);
  Map<String,String> stats=new HashMap<>();
  stats.put("tube","A");
  stats.put("state","Test");
  stats.put("age","0");
  stats.put("time-left","0");
  stats.put("timeouts","0");
  stats.put("releases","0");
  stats.put("buries","0");
  stats.put("kicks","0");
  when(jobMock.getJobId()).thenReturn(jobId);
  when(jobMock.getData()).thenReturn(payload);
  when(client.reserve(anyInt())).thenReturn(jobMock).thenReturn(null);
  when(client.statsJob(anyLong())).thenReturn(stats);
  when(client.put(BeanstalkComponent.DEFAULT_PRIORITY,BeanstalkComponent.DEFAULT_DELAY,BeanstalkComponent.DEFAULT_TIME_TO_RUN,payload)).thenReturn(jobId);
  MockEndpoint result=getMockEndpoint("mock:result");
  result.expectedMinimumMessageCount(1);
  result.expectedBodiesReceived(testMessage);
  result.expectedHeaderReceived(Headers.JOB_ID,jobId);
  result.message(0).header(Headers.JOB_ID).isEqualTo(jobId);
  context.startRoute("foo");
  result.assertIsSatisfied();
  verify(client,atLeastOnce()).reserve(anyInt());
  verify(client,atLeastOnce()).statsJob(anyLong());
  assertEquals(((TestExchangeCopyProcessor)a).getExchangeCopy().getIn().getHeaders(),((TestExchangeCopyProcessor)b).getExchangeCopy().getIn().getHeaders());
}
