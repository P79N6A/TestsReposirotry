@Test public void shouldParseOk(){
  Template template=parser.parseTemplate("addnumbers(INTEGER ${header.header1},VARCHAR ${property.property1}," + "BIGINT ${header.header2},INOUT INTEGER ${header.header3} inout1,OUT INTEGER out1)");
  Assert.assertEquals("addnumbers",template.getProcedureName());
  Assert.assertEquals(5,template.getParameterList().size());
  Exchange exchange=createExchangeWithBody(null);
  exchange.getIn().setHeader("header1",1);
  exchange.setProperty("property1","constant string");
  exchange.getIn().setHeader("header2",BigInteger.valueOf(2));
  exchange.getIn().setHeader("header3",BigInteger.valueOf(3));
  InParameter param1=(InParameter)template.getParameterList().get(0);
  Assert.assertEquals("_0",param1.getName());
  Assert.assertEquals(Types.INTEGER,param1.getSqlType());
  Assert.assertEquals(1,param1.getValueExtractor().eval(exchange,null));
  InParameter param2=(InParameter)template.getParameterList().get(1);
  Assert.assertEquals("_1",param2.getName());
  Assert.assertEquals(Types.VARCHAR,param2.getSqlType());
  Assert.assertEquals("constant string",param2.getValueExtractor().eval(exchange,null));
  InParameter param3=(InParameter)template.getParameterList().get(2);
  Assert.assertEquals("_2",param3.getName());
  Assert.assertEquals(Types.BIGINT,param3.getSqlType());
  Assert.assertEquals(BigInteger.valueOf(2L),param3.getValueExtractor().eval(exchange,null));
  InOutParameter inOutNode=(InOutParameter)template.getParameterList().get(3);
  Assert.assertEquals(Types.INTEGER,inOutNode.getSqlType());
  Assert.assertEquals("inout1",inOutNode.getOutValueMapKey());
  Assert.assertEquals(BigInteger.valueOf(3L),inOutNode.getValueExtractor().eval(exchange,null));
  OutParameter outNode=(OutParameter)template.getParameterList().get(4);
  Assert.assertEquals(Types.INTEGER,outNode.getSqlType());
  Assert.assertEquals("out1",outNode.getOutValueMapKey());
}
