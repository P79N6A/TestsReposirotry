@Test public void testAsyncRequest() throws Exception {
  MockEndpoint mock=getMockEndpoint("mock:async");
  mock.expectedMessageCount(2);
  mock.expectedHeaderValuesReceivedInAnyOrder("action","action-1","action-2");
  mock.expectedBodiesReceivedInAnyOrder("body-1","body-2");
  FluentProducerTemplate fluent=context.createFluentProducerTemplate();
  Future<String> future1=fluent.to("direct:async").withHeader("action","action-1").withBody("body-1").asyncRequest(String.class);
  Future<String> future2=fluent.to("direct:async").withHeader("action","action-2").withBody("body-2").asyncRequest(String.class);
  String result1=future1.get();
  String result2=future2.get();
  mock.assertIsSatisfied();
  assertEquals("body-1",result1);
  assertEquals("body-2",result2);
  String action=mock.getExchanges().get(0).getIn().getHeader("action",String.class);
  if (action.equals("action-1")) {
    assertEquals("body-1",mock.getExchanges().get(0).getIn().getBody(String.class));
  }
  if (action.equals("action-2")) {
    assertEquals("body-2",mock.getExchanges().get(0).getIn().getBody(String.class));
  }
}
