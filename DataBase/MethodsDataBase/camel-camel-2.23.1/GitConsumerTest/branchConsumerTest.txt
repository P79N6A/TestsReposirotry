@Test public void branchConsumerTest() throws Exception {
  MockEndpoint mockResultBranch=getMockEndpoint("mock:result-branch");
  mockResultBranch.expectedMessageCount(2);
  Git git=getGitTestRepository();
  File fileToAdd=new File(gitLocalRepo,filenameToAdd);
  fileToAdd.createNewFile();
  git.add().addFilepattern(filenameToAdd).call();
  File gitDir=new File(gitLocalRepo,".git");
  assertEquals(gitDir.exists(),true);
  Status status=git.status().call();
  assertTrue(status.getAdded().contains(filenameToAdd));
  git.commit().setMessage(commitMessage).call();
  git.branchCreate().setName(branchTest).call();
  List<Ref> ref=git.branchList().call();
  boolean branchCreated=false;
  for (  Ref refInternal : ref) {
    if (refInternal.getName().equals("refs/heads/" + branchTest)) {
      branchCreated=true;
    }
  }
  assertEquals(branchCreated,true);
  mockResultBranch.assertIsSatisfied();
  List<Exchange> exchanges=mockResultBranch.getExchanges();
  assertEquals("refs/heads/master",exchanges.get(0).getOut().getBody(ObjectIdRef.Unpeeled.class).getName());
  assertEquals("refs/heads/" + branchTest,exchanges.get(1).getOut().getBody(ObjectIdRef.Unpeeled.class).getName());
  git.close();
}
