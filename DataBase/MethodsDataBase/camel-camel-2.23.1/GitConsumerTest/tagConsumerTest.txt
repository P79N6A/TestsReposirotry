@Test public void tagConsumerTest() throws Exception {
  MockEndpoint mockResultTag=getMockEndpoint("mock:result-tag");
  mockResultTag.expectedMessageCount(1);
  Git git=getGitTestRepository();
  File fileToAdd=new File(gitLocalRepo,filenameToAdd);
  fileToAdd.createNewFile();
  git.add().addFilepattern(filenameToAdd).call();
  File gitDir=new File(gitLocalRepo,".git");
  assertEquals(gitDir.exists(),true);
  Status status=git.status().call();
  assertTrue(status.getAdded().contains(filenameToAdd));
  git.commit().setMessage(commitMessage).call();
  git.tag().setName(tagTest).call();
  List<Ref> ref=git.tagList().call();
  boolean tagCreated=false;
  for (  Ref refInternal : ref) {
    if (refInternal.getName().equals("refs/tags/" + tagTest)) {
      tagCreated=true;
    }
  }
  assertEquals(tagCreated,true);
  mockResultTag.assertIsSatisfied();
  Exchange exchange=mockResultTag.getExchanges().get(0);
  assertEquals("refs/tags/" + tagTest,exchange.getOut().getBody(ObjectIdRef.Unpeeled.class).getName());
  git.close();
}
