@Test public void commitConsumerTest() throws Exception {
  MockEndpoint mockResultCommit=getMockEndpoint("mock:result-commit");
  mockResultCommit.expectedMessageCount(2);
  Git git=getGitTestRepository();
  File gitDir=new File(gitLocalRepo,".git");
  assertEquals(gitDir.exists(),true);
  File fileToAdd=new File(gitLocalRepo,filenameToAdd);
  fileToAdd.createNewFile();
  git.add().addFilepattern(filenameToAdd).call();
  Status status=git.status().call();
  assertTrue(status.getAdded().contains(filenameToAdd));
  git.commit().setMessage(commitMessage).call();
  File fileToAdd1=new File(gitLocalRepo,filenameBranchToAdd);
  fileToAdd1.createNewFile();
  git.add().addFilepattern(filenameBranchToAdd).call();
  status=git.status().call();
  assertTrue(status.getAdded().contains(filenameBranchToAdd));
  git.commit().setMessage("Test test Commit").call();
  validateGitLogs(git,"Test test Commit",commitMessage);
  mockResultCommit.assertIsSatisfied();
  Exchange ex1=mockResultCommit.getExchanges().get(0);
  Exchange ex2=mockResultCommit.getExchanges().get(1);
  assertEquals(commitMessage,ex2.getOut().getBody(RevCommit.class).getShortMessage());
  assertEquals("Test test Commit",ex1.getOut().getBody(RevCommit.class).getShortMessage());
  git.close();
}
