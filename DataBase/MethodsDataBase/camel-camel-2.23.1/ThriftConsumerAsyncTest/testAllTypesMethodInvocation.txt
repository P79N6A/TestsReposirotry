@Test public void testAllTypesMethodInvocation() throws Exception {
  LOG.info("Thrift method with all possile types async test start");
  final CountDownLatch latch=new CountDownLatch(1);
  thriftClient.alltypes(true,(byte)THRIFT_TEST_NUM1,(short)THRIFT_TEST_NUM1,THRIFT_TEST_NUM1,THRIFT_TEST_NUM1,THRIFT_TEST_NUM1,"empty",ByteBuffer.allocate(10),new Work(THRIFT_TEST_NUM1,THRIFT_TEST_NUM2,Operation.MULTIPLY),new ArrayList<Integer>(),new HashSet<String>(),new HashMap<String,Long>(),new AsyncMethodCallback<Integer>(){
    @Override public void onComplete(    Integer response){
      allTypesResult=response;
      latch.countDown();
    }
    @Override public void onError(    Exception exception){
      LOG.info("Exception",exception);
      latch.countDown();
    }
  }
);
  latch.await(5,TimeUnit.SECONDS);
  MockEndpoint mockEndpoint=getMockEndpoint("mock:thrift-service");
  mockEndpoint.expectedMessageCount(1);
  mockEndpoint.expectedHeaderValuesReceivedInAnyOrder(ThriftConstants.THRIFT_METHOD_NAME_HEADER,"alltypes");
  mockEndpoint.assertIsSatisfied();
  assertEquals(THRIFT_TEST_NUM1,allTypesResult);
}
