@Test public void testInitialMessageReadTimeout() throws Exception {
  expectedCompleteCount=1;
  setExpectedCounts();
  mllpClient.setSendEndOfBlock(false);
  mllpClient.setSendEndOfData(false);
  log.info("Sending first message");
  mllpClient.sendFramedData(Hl7TestMessageGenerator.generateMessage(10001));
  Thread.sleep(RECEIVE_TIMEOUT * 5);
  mllpClient.setSendEndOfBlock(true);
  mllpClient.setSendEndOfData(true);
  try {
    log.info("Attempting to send second message");
    String acknowledgement=mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(10002));
    assertEquals("If the send doesn't throw an exception, the acknowledgement should be empty","",acknowledgement);
  }
 catch (  MllpJUnitResourceException expected) {
    assertThat("If the send throws an exception, the cause should be a SocketException",expected.getCause(),instanceOf(SocketException.class));
  }
  mllpClient.disconnect();
  mllpClient.connect();
  log.info("Sending third message");
  mllpClient.sendMessageAndWaitForAcknowledgement(Hl7TestMessageGenerator.generateMessage(10003));
}
