@Test public void shouldDeserializeXmlFromSalesforceExample() throws Exception {
  final String xml="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<Result>\n" + "    <hasErrors>false</hasErrors>\n"+ "    <results>\n"+ "        <id>001D000000K0fXOIAZ</id>\n"+ "        <referenceId>ref1</referenceId>\n"+ "    </results>\n"+ "    <results>\n"+ "        <id>001D000000K0fXPIAZ</id>\n"+ "        <referenceId>ref4</referenceId>\n"+ "    </results>\n"+ "    <results>\n"+ "        <id>003D000000QV9n2IAD</id>\n"+ "        <referenceId>ref2</referenceId>\n"+ "    </results>\n"+ "    <results>\n"+ "        <id>003D000000QV9n3IAD</id>\n"+ "        <referenceId>ref3</referenceId>\n"+ "    </results>\n"+ "</Result>";
  final XStream xStream=XStreamUtils.createXStream(SObjectTreeResponse.class);
  final SObjectTreeResponse response=(SObjectTreeResponse)xStream.fromXML(xml);
  assertNotNull("Response should be parsed",response);
  assertFalse("`hasErrors` flag should be false",response.hasErrors());
  assertEquals("Should read 4 references",4,response.getResults().size());
  assertThat("4 references should be read as expected",response.getResults(),hasItems(new ReferenceId("ref1","001D000000K0fXOIAZ",Collections.emptyList()),new ReferenceId("ref4","001D000000K0fXPIAZ",Collections.emptyList()),new ReferenceId("ref2","003D000000QV9n2IAD",Collections.emptyList()),new ReferenceId("ref3","003D000000QV9n3IAD",Collections.emptyList())));
}
