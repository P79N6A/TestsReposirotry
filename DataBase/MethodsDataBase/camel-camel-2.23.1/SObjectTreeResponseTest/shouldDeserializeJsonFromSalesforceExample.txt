@Test public void shouldDeserializeJsonFromSalesforceExample() throws Exception {
  final String json="{\n" + "    \"hasErrors\" : false,\n" + "    \"results\" : [{\n"+ "     \"referenceId\" : \"ref1\",\n"+ "     \"id\" : \"001D000000K0fXOIAZ\"\n"+ "     },{\n"+ "     \"referenceId\" : \"ref4\",\n"+ "     \"id\" : \"001D000000K0fXPIAZ\"\n"+ "     },{\n"+ "     \"referenceId\" : \"ref2\",\n"+ "     \"id\" : \"003D000000QV9n2IAD\"\n"+ "     },{\n"+ "     \"referenceId\" : \"ref3\",\n"+ "     \"id\" : \"003D000000QV9n3IAD\"\n"+ "     }]\n"+ "}";
  final ObjectMapper mapper=JsonUtils.createObjectMapper();
  final ObjectReader reader=mapper.readerFor(SObjectTreeResponse.class);
  final SObjectTreeResponse response=reader.readValue(json);
  assertNotNull("Response should be parsed",response);
  assertFalse("`hasErrors` flag should be false",response.hasErrors());
  assertEquals("Should read 4 references",4,response.getResults().size());
  assertThat("4 references should be read as expected",response.getResults(),hasItems(new ReferenceId("ref1","001D000000K0fXOIAZ",Collections.emptyList()),new ReferenceId("ref4","001D000000K0fXPIAZ",Collections.emptyList()),new ReferenceId("ref2","003D000000QV9n2IAD",Collections.emptyList()),new ReferenceId("ref3","003D000000QV9n3IAD",Collections.emptyList())));
}
