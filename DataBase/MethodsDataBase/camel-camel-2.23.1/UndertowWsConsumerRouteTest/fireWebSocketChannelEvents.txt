@Test public void fireWebSocketChannelEvents() throws Exception {
  MockEndpoint result=getMockEndpoint("mock:result5");
  result.expectedMessageCount(6);
  TestClient wsclient1=new TestClient("ws://localhost:" + getPort() + "/app5",2);
  TestClient wsclient2=new TestClient("ws://localhost:" + getPort() + "/app5",2);
  wsclient1.connect();
  wsclient2.connect();
  wsclient1.sendTextMessage("Gambas");
  wsclient2.sendTextMessage("Calamares");
  wsclient1.close();
  wsclient2.close();
  result.await(60,TimeUnit.SECONDS);
  final List<Exchange> exchanges=result.getReceivedExchanges();
  final Map<String,List<String>> connections=new HashMap<>();
  for (  Exchange exchange : exchanges) {
    final Message in=exchange.getIn();
    final String key=(String)in.getHeader(UndertowConstants.CONNECTION_KEY);
    Assert.assertNotNull(key);
    List<String> messages=connections.get(key);
    if (messages == null) {
      messages=new ArrayList<>();
      connections.put(key,messages);
    }
    String body=in.getBody(String.class);
    if (body != null) {
      messages.add(body);
    }
 else {
      messages.add(in.getHeader(UndertowConstants.EVENT_TYPE_ENUM,EventType.class).name());
    }
  }
  final List<String> expected1=Arrays.asList(EventType.ONOPEN.name(),"Gambas",EventType.ONCLOSE.name());
  final List<String> expected2=Arrays.asList(EventType.ONOPEN.name(),"Calamares",EventType.ONCLOSE.name());
  Assert.assertEquals(2,connections.size());
  final Iterator<List<String>> it=connections.values().iterator();
  final List<String> actual1=it.next();
  Assert.assertTrue("actual " + actual1,actual1.equals(expected1) || actual1.equals(expected2));
  final List<String> actual2=it.next();
  Assert.assertTrue("actual " + actual2,actual2.equals(expected1) || actual2.equals(expected2));
}
