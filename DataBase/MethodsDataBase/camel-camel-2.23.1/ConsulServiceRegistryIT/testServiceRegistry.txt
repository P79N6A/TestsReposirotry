@Test public void testServiceRegistry(){
  final String consulUrl=String.format("http://%s:%d",container.getContainerIpAddress(),container.getMappedPort(Consul.DEFAULT_HTTP_PORT));
  new ApplicationContextRunner().withUserConfiguration(TestConfiguration.class).withPropertyValues("debug=false","spring.main.banner-mode=OFF","spring.application.name=" + UUID.randomUUID().toString(),"camel.component.consul.service-registry.enabled=true","camel.component.consul.service-registry.url=" + consulUrl,"camel.component.consul.service-registry.id=" + UUID.randomUUID().toString(),"camel.component.consul.service-registry.service-host=localhost").run(context -> {
    assertThat(context).hasSingleBean(CamelContext.class);
    assertThat(context).hasSingleBean(ServiceRegistry.class);
    final CamelContext camelContext=context.getBean(CamelContext.class);
    final ServiceRegistry serviceRegistry=camelContext.hasService(ServiceRegistry.class);
    assertThat(serviceRegistry).isNotNull();
    serviceRegistry.register(DefaultServiceDefinition.builder().withHost(SERVICE_HOST).withPort(SERVICE_PORT).withName(SERVICE_NAME).withId(SERVICE_ID).build());
    final Consul client=Consul.builder().withUrl(consulUrl).build();
    final List<CatalogService> services=client.catalogClient().getService(SERVICE_NAME).getResponse();
    assertThat(services).hasSize(1);
    assertThat(services).first().hasFieldOrPropertyWithValue("serviceId",SERVICE_ID);
    assertThat(services).first().hasFieldOrPropertyWithValue("serviceName",SERVICE_NAME);
    assertThat(services).first().hasFieldOrPropertyWithValue("serviceAddress",SERVICE_HOST);
    assertThat(services).first().hasFieldOrPropertyWithValue("servicePort",SERVICE_PORT);
  }
);
}
