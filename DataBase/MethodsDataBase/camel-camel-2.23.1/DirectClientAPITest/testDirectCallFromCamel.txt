@Test public void testDirectCallFromCamel() throws Exception {
  new RouteBuilder(){
    @Override public void configure() throws Exception {
      from("direct:source").to("direct:stream").setBody().simple("after stream: ${body}").to("mock:dest");
    }
  }
.addRoutesToCamelContext(context);
  context.start();
  camel.process("direct:stream",p -> Flowable.fromPublisher(p).map(exchange -> {
    int val=exchange.getIn().getBody(Integer.class);
    exchange.getOut().setBody(-val);
    return exchange;
  }
));
  for (int i=1; i <= 3; i++) {
    template.sendBody("direct:source",i);
  }
  MockEndpoint mock=getMockEndpoint("mock:dest");
  mock.expectedMessageCount(3);
  mock.assertIsSatisfied();
  int id=1;
  for (  Exchange ex : mock.getExchanges()) {
    String content=ex.getIn().getBody(String.class);
    assertEquals("after stream: " + (-id++),content);
  }
}
