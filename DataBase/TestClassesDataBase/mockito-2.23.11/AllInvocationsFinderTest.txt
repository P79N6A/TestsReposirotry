public class AllInvocationsFinderTest extends TestBase {
  private IMethods mockTwo;
  private IMethods mockOne;
  @Before public void setup(){
    mockOne=mock(IMethods.class);
    mockTwo=mock(IMethods.class);
  }
  @Test public void no_interactions() throws Exception {
    assertTrue(find(asList(mockOne,mockTwo)).isEmpty());
    assertTrue(findStubbings(asList(mockOne,mockTwo)).isEmpty());
  }
  @Test public void provides_invocations_in_order() throws Exception {
    mockOne.simpleMethod(100);
    mockTwo.simpleMethod(200);
    mockOne.simpleMethod(300);
    List<Invocation> invocations=find(asList(mockOne,mockTwo));
    assertEquals(3,invocations.size());
    assertArgumentEquals(100,invocations.get(0));
    assertArgumentEquals(200,invocations.get(1));
    assertArgumentEquals(300,invocations.get(2));
  }
  @Test public void deduplicates_interactions_from_the_same_mock() throws Exception {
    mockOne.simpleMethod(100);
    List<Invocation> invocations=find(asList(mockOne,mockOne,mockOne));
    assertEquals(1,invocations.size());
  }
  @Test public void provides_stubbings_in_order() throws Exception {
    mockOne.simpleMethod(50);
    when(mockOne.simpleMethod(100)).thenReturn("100");
    when(mockOne.simpleMethod(200)).thenReturn("200");
    when(mockTwo.simpleMethod(300)).thenReturn("300");
    List<Stubbing> stubbings=new ArrayList<Stubbing>(findStubbings(asList(mockOne,mockOne,mockTwo)));
    assertEquals(3,stubbings.size());
    assertArgumentEquals(100,stubbings.get(0).getInvocation());
    assertArgumentEquals(200,stubbings.get(1).getInvocation());
    assertArgumentEquals(300,stubbings.get(2).getInvocation());
  }
  private void assertArgumentEquals(  Object argumentValue,  Invocation invocation){
    assertEquals(argumentValue,invocation.getArgument(0));
  }
}
