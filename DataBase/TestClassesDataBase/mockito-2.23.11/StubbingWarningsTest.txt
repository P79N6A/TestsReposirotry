public class StubbingWarningsTest {
  private static final String TEST_NAME="test.name";
  @Mock IMethods mock;
  SimpleMockitoLogger logger=new SimpleMockitoLogger();
  MockitoSession mockito=new DefaultMockitoSession(singletonList((Object)this),TEST_NAME,Strictness.WARN,logger);
  @After public void after(){
    StateMaster stateMaster=new StateMaster();
    stateMaster.reset();
    stateMaster.clearMockitoListeners();
  }
  @Test public void few_interactions() throws Throwable {
    mock.simpleMethod(100);
    mock.otherMethod();
    mockito.finishMocking();
    logger.assertEmpty();
  }
  @Test public void stubbing_used() throws Throwable {
    given(mock.simpleMethod(100)).willReturn("100");
    mock.simpleMethod(100);
    mockito.finishMocking();
    logger.assertEmpty();
  }
  @Test public void unused_stubbed_is_not_implicitly_verified() throws Throwable {
    given(mock.simpleMethod(100)).willReturn("100");
    mock.simpleMethod(100);
    mock.simpleMethod(200);
    mockito.finishMocking();
    logger.assertEmpty();
  }
  @Test public void stubbing_argument_mismatch() throws Throwable {
    given(mock.simpleMethod(100)).willReturn("100");
    mock.simpleMethod(200);
    mockito.finishMocking();
    assertEquals(filterLineNo("[MockitoHint] " + TEST_NAME + " (see javadoc for MockitoHint):\n"+ "[MockitoHint] 1. Unused -> at org.mockitousage.stubbing.StubbingWarningsTest.stubbing_argument_mismatch(StubbingWarningsTest.java:0)\n"),filterLineNo(logger.getLoggedInfo()));
  }
  @Test public void unused_stubbing() throws Throwable {
    given(mock.simpleMethod(100)).willReturn("100");
    mockito.finishMocking();
    assertEquals(filterLineNo("[MockitoHint] " + TEST_NAME + " (see javadoc for MockitoHint):\n"+ "[MockitoHint] 1. Unused -> at org.mockitousage.stubbing.StubbingWarningsTest.unused_stubbing(StubbingWarningsTest.java:0)\n"),filterLineNo(logger.getLoggedInfo()));
  }
  @SuppressWarnings({"MockitoUsage","CheckReturnValue"}) @Test(expected=MockitoException.class) public void unfinished_verification_without_throwable() throws Throwable {
    verify(mock);
    mockito.finishMocking();
  }
  @SuppressWarnings({"MockitoUsage","CheckReturnValue"}) @Test public void unfinished_verification_with_throwable() throws Throwable {
    verify(mock);
    mockito.finishMocking(new AssertionError());
    logger.assertEmpty();
  }
}
