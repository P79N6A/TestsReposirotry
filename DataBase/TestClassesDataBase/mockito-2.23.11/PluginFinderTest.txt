public class PluginFinderTest extends TestBase {
  @Mock PluginSwitch switcher;
  @InjectMocks PluginFinder finder;
  public @Rule TemporaryFolder tmp=new TemporaryFolder();
  @Test public void empty_resources(){
    assertNull(finder.findPluginClass(Collections.<URL>emptyList()));
  }
  @Test public void no_valid_impl() throws Exception {
    File f=tmp.newFile();
    IOUtil.writeText("  \n  ",f);
    assertNull(finder.findPluginClass(asList(f.toURI().toURL())));
  }
  @Test public void single_implementation() throws Exception {
    File f=tmp.newFile();
    when(switcher.isEnabled("foo.Foo")).thenReturn(true);
    IOUtil.writeText("  foo.Foo  ",f);
    assertEquals("foo.Foo",finder.findPluginClass(asList(f.toURI().toURL())));
  }
  @Test public void single_implementation_disabled() throws Exception {
    File f=tmp.newFile();
    when(switcher.isEnabled("foo.Foo")).thenReturn(false);
    IOUtil.writeText("  foo.Foo  ",f);
    assertEquals(null,finder.findPluginClass(asList(f.toURI().toURL())));
  }
  @Test public void multiple_implementations_only_one_enabled() throws Exception {
    File f1=tmp.newFile();
    File f2=tmp.newFile();
    when(switcher.isEnabled("Bar")).thenReturn(true);
    IOUtil.writeText("Foo",f1);
    IOUtil.writeText("Bar",f2);
    assertEquals("Bar",finder.findPluginClass(asList(f1.toURI().toURL(),f2.toURI().toURL())));
  }
  @Test public void multiple_implementations_only_one_useful() throws Exception {
    File f1=tmp.newFile();
    File f2=tmp.newFile();
    when(switcher.isEnabled(anyString())).thenReturn(true);
    IOUtil.writeText("   ",f1);
    IOUtil.writeText("X",f2);
    assertEquals("X",finder.findPluginClass(asList(f1.toURI().toURL(),f2.toURI().toURL())));
  }
  @Test public void multiple_empty_implementations() throws Exception {
    File f1=tmp.newFile();
    File f2=tmp.newFile();
    when(switcher.isEnabled(anyString())).thenReturn(true);
    IOUtil.writeText("   ",f1);
    IOUtil.writeText("\n",f2);
    assertEquals(null,finder.findPluginClass(asList(f1.toURI().toURL(),f2.toURI().toURL())));
  }
  @Test public void problems_loading_impl() throws Exception {
    when(switcher.isEnabled(anyString())).thenThrow(new RuntimeException("Boo!"));
    try {
      finder.findPluginClass(asList(new File("xxx").toURI().toURL()));
      fail();
    }
 catch (    Exception e) {
      assertThat(e).hasMessageContaining("xxx");
      e.getCause().getMessage().equals("Boo!");
    }
  }
}
