@SuppressWarnings("unchecked") public class CaptorAnnotationBasicTest extends TestBase {
public class Person {
    private final String name;
    private final String surname;
    public Person(    String name,    String surname){
      this.name=name;
      this.surname=surname;
    }
    public String getName(){
      return name;
    }
    public String getSurname(){
      return surname;
    }
  }
public interface PeopleRepository {
    void save(    Person capture);
  }
  @Mock PeopleRepository peopleRepository;
  private void createPerson(  String name,  String surname){
    peopleRepository.save(new Person(name,surname));
  }
  @Test public void shouldUseCaptorInOrdinaryWay(){
    createPerson("Wes","Williams");
    ArgumentCaptor<Person> captor=ArgumentCaptor.forClass(Person.class);
    verify(peopleRepository).save(captor.capture());
    assertEquals("Wes",captor.getValue().getName());
    assertEquals("Williams",captor.getValue().getSurname());
  }
  @Captor ArgumentCaptor<Person> captor;
  @Test public void shouldUseAnnotatedCaptor(){
    createPerson("Wes","Williams");
    verify(peopleRepository).save(captor.capture());
    assertEquals("Wes",captor.getValue().getName());
    assertEquals("Williams",captor.getValue().getSurname());
  }
  @SuppressWarnings("rawtypes") @Captor ArgumentCaptor genericLessCaptor;
  @Test public void shouldUseGenericlessAnnotatedCaptor(){
    createPerson("Wes","Williams");
    verify(peopleRepository).save((Person)genericLessCaptor.capture());
    assertEquals("Wes",((Person)genericLessCaptor.getValue()).getName());
    assertEquals("Williams",((Person)genericLessCaptor.getValue()).getSurname());
  }
  @Captor ArgumentCaptor<List<String>> genericListCaptor;
  @Mock IMethods mock;
  @Test public void shouldCaptureGenericList(){
    List<String> list=new LinkedList<String>();
    mock.listArgMethod(list);
    verify(mock).listArgMethod(genericListCaptor.capture());
    assertSame(list,genericListCaptor.getValue());
  }
}
