public class StrictRunner implements InternalRunner {
  private final Class<?> testClass;
  private final InternalRunner runner;
  private boolean filterRequested;
  /** 
 * @param runner - the runner to wrap around
 * @param testClass - for reporting purposes
 */
  public StrictRunner(  InternalRunner runner,  Class<?> testClass){
    this.runner=runner;
    this.testClass=testClass;
  }
  public void run(  RunNotifier notifier){
    UnnecessaryStubbingsReporter reporter=new UnnecessaryStubbingsReporter();
    FailureDetector listener=new FailureDetector();
    Mockito.framework().addListener(reporter);
    try {
      notifier.addListener(listener);
      runner.run(notifier);
    }
  finally {
      Mockito.framework().removeListener(reporter);
    }
    if (!filterRequested && listener.isSuccessful()) {
      reporter.validateUnusedStubs(testClass,notifier);
    }
  }
  public Description getDescription(){
    return runner.getDescription();
  }
  public void filter(  Filter filter) throws NoTestsRemainException {
    filterRequested=true;
    runner.filter(filter);
  }
}
