@RunWith(VerboseMockitoJUnitRunner.class) public class VerboseMockitoRunnerTest extends TestBase {
  @Mock private IMethods mock;
public static class NoWarnings {
    @Test @Ignore public void test(){
      IMethods mock=mock(IMethods.class);
      mock.simpleMethod(1);
      mock.otherMethod();
      verify(mock).simpleMethod(1);
      throw new RuntimeException("boo");
    }
  }
public static class ContainsWarnings extends TestCase {
    public ContainsWarnings(){
      super("test");
    }
    public void testIgnored(){
    }
    public void _test(){
      IMethods mock=mock(IMethods.class);
      when(mock.simpleMethod(1)).thenReturn("foo");
      when(mock.otherMethod()).thenReturn("foo");
      when(mock.booleanObjectReturningMethod()).thenReturn(false);
      String ret=mock.simpleMethod(2);
      assertEquals("foo",ret);
    }
  }
  public void cleanStackTraces(){
    makeStackTracesClean();
  }
  @Test @Ignore public void shouldContainWarnings() throws Exception {
    Result result=new JUnitCore().run(new ContainsWarnings());
    assertEquals(1,result.getFailures().size());
    Throwable exception=result.getFailures().get(0).getException();
    assertTrue(exception instanceof ExceptionIncludingMockitoWarnings);
  }
  @Test @Ignore public void shouldNotContainWarnings() throws Exception {
    Result result=new JUnitCore().run(NoWarnings.class);
    assertEquals(1,result.getFailures().size());
    assertEquals("boo",result.getFailures().get(0).getException().getMessage());
  }
}
