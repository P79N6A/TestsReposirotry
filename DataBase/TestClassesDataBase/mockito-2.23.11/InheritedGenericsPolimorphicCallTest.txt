@SuppressWarnings("unchecked") public class InheritedGenericsPolimorphicCallTest extends TestBase {
protected interface MyIterable<T> extends Iterable<T> {
    MyIterator<T> iterator();
  }
protected interface MyIterator<T> extends Iterator<T> {
  }
  MyIterator<String> myIterator=Mockito.mock(MyIterator.class);
  MyIterable<String> iterable=Mockito.mock(MyIterable.class);
  @Test public void shouldStubbingWork(){
    Mockito.when(iterable.iterator()).thenReturn(myIterator);
    assertNotNull(((Iterable<String>)iterable).iterator());
    assertNotNull(iterable.iterator());
  }
  @Test public void shouldVerificationWorks(){
    iterable.iterator();
    verify(iterable).iterator();
    verify((Iterable<String>)iterable).iterator();
  }
  @Test public void shouldWorkExactlyAsJavaProxyWould(){
    final List<Method> methods=new LinkedList<Method>();
    InvocationHandler handler=new InvocationHandler(){
      public Object invoke(      Object proxy,      Method method,      Object[] args) throws Throwable {
        methods.add(method);
        return null;
      }
    }
;
    iterable=(MyIterable<String>)Proxy.newProxyInstance(this.getClass().getClassLoader(),new Class<?>[]{MyIterable.class},handler);
    iterable.iterator();
    ((Iterable<String>)iterable).iterator();
    assertEquals(2,methods.size());
    assertEquals(methods.get(0),methods.get(1));
  }
}
