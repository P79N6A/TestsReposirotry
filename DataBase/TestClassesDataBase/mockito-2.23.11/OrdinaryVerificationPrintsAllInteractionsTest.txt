public class OrdinaryVerificationPrintsAllInteractionsTest extends TestBase {
  @Mock private IMethods mock;
  @Mock private IMethods mockTwo;
  @Test public void shouldShowAllInteractionsOnMockWhenOrdinaryVerificationFail() throws Exception {
    firstInteraction();
    secondInteraction();
    verify(mock).otherMethod();
    try {
      verify(mock).simpleMethod();
      fail();
    }
 catch (    WantedButNotInvoked e) {
      assertThat(e).hasMessageContaining("However, there were exactly 2 interactions with this mock").hasMessageContaining("firstInteraction(").hasMessageContaining("secondInteraction(");
    }
  }
  @Test public void shouldNotShowAllInteractionsOnDifferentMock() throws Exception {
    differentMockInteraction();
    firstInteraction();
    try {
      verify(mock).simpleMethod();
      fail();
    }
 catch (    WantedButNotInvoked e) {
      assertThat(e.getMessage()).contains("firstInteraction(").doesNotContain("differentMockInteraction(");
    }
  }
  @Test public void shouldNotShowAllInteractionsHeaderWhenNoOtherInteractions() throws Exception {
    try {
      verify(mock).simpleMethod();
      fail();
    }
 catch (    WantedButNotInvoked e) {
      assertThat(e).hasMessageContaining("there were zero interactions with this mock.");
    }
  }
  private void differentMockInteraction(){
    mockTwo.simpleMethod();
  }
  private void secondInteraction(){
    mock.booleanReturningMethod();
  }
  private void firstInteraction(){
    mock.otherMethod();
  }
}
