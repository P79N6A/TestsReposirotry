public class DefaultMockitoSessionBuilderTest {
  @After public void after(){
    new StateMaster().clearMockitoListeners();
  }
  @Test public void creates_sessions(){
    new DefaultMockitoSessionBuilder().startMocking().finishMocking();
    new DefaultMockitoSessionBuilder().initMocks((Object)null).startMocking().finishMocking();
    new DefaultMockitoSessionBuilder().initMocks((Object[])null).startMocking().finishMocking();
    new DefaultMockitoSessionBuilder().initMocks(null,null).strictness(null).startMocking().finishMocking();
    new DefaultMockitoSessionBuilder().strictness(null).startMocking().finishMocking();
    new DefaultMockitoSessionBuilder().initMocks(this).startMocking().finishMocking();
    new DefaultMockitoSessionBuilder().initMocks(new Object()).startMocking().finishMocking();
    new DefaultMockitoSessionBuilder().strictness(Strictness.LENIENT).startMocking().finishMocking();
  }
  @Test public void creates_sessions_for_multiple_test_class_instances_for_repeated_calls(){
    TestClass testClass=new TestClass();
    TestClass.NestedTestClass nestedTestClass=testClass.new NestedTestClass();
    new DefaultMockitoSessionBuilder().initMocks(testClass).initMocks(nestedTestClass).startMocking().finishMocking();
    assertNotNull(testClass.set);
    assertNotNull(nestedTestClass.list);
  }
  @Test public void creates_sessions_for_multiple_test_class_instances_for_varargs_call(){
    TestClass testClass=new TestClass();
    TestClass.NestedTestClass nestedTestClass=testClass.new NestedTestClass();
    new DefaultMockitoSessionBuilder().initMocks(testClass,nestedTestClass).startMocking().finishMocking();
    assertNotNull(testClass.set);
    assertNotNull(nestedTestClass.list);
  }
  @Test public void uses_logger_and_strictness(){
    TestClass testClass=new TestClass();
    final List<String> hints=new ArrayList<String>();
    MockitoSession session=new DefaultMockitoSessionBuilder().initMocks(testClass).strictness(WARN).logger(new MockitoSessionLogger(){
      @Override public void log(      String hint){
        hints.add(hint);
      }
    }
).startMocking();
    when(testClass.set.add(1)).thenReturn(true);
    session.finishMocking();
    assertFalse(hints.isEmpty());
  }
  @Test public void requires_finish_mocking(){
    new DefaultMockitoSessionBuilder().startMocking();
    ThrowableAssert.assertThat(new Runnable(){
      public void run(){
        new DefaultMockitoSessionBuilder().startMocking();
      }
    }
).throwsException(UnfinishedMockingSessionException.class);
  }
  @Test public void auto_cleans_dirty_listeners(){
    new DefaultMockitoSessionBuilder().startMocking();
    ThrowableAssert.assertThat(new Runnable(){
      public void run(){
        new DefaultMockitoSessionBuilder().startMocking();
      }
    }
).throwsException(UnfinishedMockingSessionException.class);
  }
class TestClass {
    @Mock public Set<Object> set;
class NestedTestClass {
      @Mock public List<Object> list;
    }
  }
}
