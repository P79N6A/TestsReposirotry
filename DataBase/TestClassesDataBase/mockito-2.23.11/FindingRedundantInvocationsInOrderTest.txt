public class FindingRedundantInvocationsInOrderTest extends TestBase {
  @Mock private IMethods mock;
  @Mock private IMethods mock2;
  @Test public void shouldWorkFineIfNoInvocations() throws Exception {
    InOrder inOrder=inOrder(mock);
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void shouldSayNoInteractionsWanted() throws Exception {
    mock.simpleMethod();
    InOrder inOrder=inOrder(mock);
    try {
      inOrder.verifyNoMoreInteractions();
      fail();
    }
 catch (    VerificationInOrderFailure e) {
      assertThat(e).hasMessageContaining("No interactions wanted");
    }
  }
  @Test public void shouldVerifyNoMoreInteractionsInOrder() throws Exception {
    mock.simpleMethod();
    mock.simpleMethod(10);
    mock.otherMethod();
    InOrder inOrder=inOrder(mock);
    inOrder.verify(mock).simpleMethod(10);
    inOrder.verify(mock).otherMethod();
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void shouldVerifyNoMoreInteractionsInOrderWithMultipleMocks() throws Exception {
    mock.simpleMethod();
    mock2.simpleMethod();
    mock.otherMethod();
    InOrder inOrder=inOrder(mock,mock2);
    inOrder.verify(mock2).simpleMethod();
    inOrder.verify(mock).otherMethod();
    inOrder.verifyNoMoreInteractions();
  }
  @Test public void shouldFailToVerifyNoMoreInteractionsInOrder() throws Exception {
    mock.simpleMethod();
    mock.simpleMethod(10);
    mock.otherMethod();
    InOrder inOrder=inOrder(mock);
    inOrder.verify(mock).simpleMethod(10);
    try {
      inOrder.verifyNoMoreInteractions();
      fail();
    }
 catch (    VerificationInOrderFailure e) {
    }
  }
  @Test public void shouldFailToVerifyNoMoreInteractionsInOrderWithMultipleMocks() throws Exception {
    mock.simpleMethod();
    mock2.simpleMethod();
    mock.otherMethod();
    InOrder inOrder=inOrder(mock,mock2);
    inOrder.verify(mock2).simpleMethod();
    try {
      inOrder.verifyNoMoreInteractions();
      fail();
    }
 catch (    VerificationInOrderFailure e) {
    }
  }
  @SuppressWarnings({"MockitoUsage","CheckReturnValue"}) @Test public void shouldValidateState() throws Exception {
    InOrder inOrder=inOrder(mock);
    verify(mock);
    try {
      inOrder.verifyNoMoreInteractions();
      fail();
    }
 catch (    UnfinishedVerificationException e) {
    }
  }
}
