public class ArgMismatchFinderTest extends TestBase {
  ArgMismatchFinder finder=new ArgMismatchFinder();
  @Mock IMethods mock1;
  @Mock IMethods mock2;
  @Test public void no_interactions() throws Exception {
    StubbingArgMismatches mismatches=finder.getStubbingArgMismatches(asList(mock1,mock2));
    assertEquals(0,mismatches.size());
  }
  @Test public void no_mismatch_when_mock_different() throws Exception {
    when(mock1.simpleMethod(1)).thenReturn("1");
    mock2.simpleMethod(2);
    StubbingArgMismatches mismatches=finder.getStubbingArgMismatches(asList(mock1,mock2));
    assertEquals(0,mismatches.size());
  }
  @Test public void no_mismatch_when_method_different() throws Exception {
    when(mock1.simpleMethod(1)).thenReturn("1");
    mock1.otherMethod();
    StubbingArgMismatches mismatches=finder.getStubbingArgMismatches(asList(mock1,mock2));
    assertEquals(0,mismatches.size());
  }
  @Test public void no_mismatch_when_stubbing_used() throws Exception {
    when(mock1.simpleMethod(1)).thenReturn("1");
    mock1.simpleMethod(1);
    mock1.simpleMethod(2);
    StubbingArgMismatches mismatches=finder.getStubbingArgMismatches(asList(mock1,mock2));
    assertEquals(0,mismatches.size());
  }
  @Test public void stubbing_mismatch() throws Exception {
    when(mock1.simpleMethod(1)).thenReturn("1");
    mock1.simpleMethod(2);
    StubbingArgMismatches mismatches=finder.getStubbingArgMismatches(asList(mock1,mock2));
    assertEquals(1,mismatches.size());
  }
  @Test public void single_mismatch_with_multiple_invocations() throws Exception {
    when(mock1.simpleMethod(1)).thenReturn("1");
    mock1.simpleMethod(2);
    mock1.simpleMethod(3);
    StubbingArgMismatches mismatches=finder.getStubbingArgMismatches(asList(mock1,mock2));
    assertEquals(1,mismatches.size());
    assertEquals("{mock1.simpleMethod(1);=[mock1.simpleMethod(2);, mock1.simpleMethod(3);]}",mismatches.toString());
  }
  @Test public void single_invocation_with_multiple_stubs() throws Exception {
    when(mock1.simpleMethod(1)).thenReturn("1");
    when(mock1.simpleMethod(2)).thenReturn("2");
    mock1.simpleMethod(3);
    StubbingArgMismatches mismatches=finder.getStubbingArgMismatches(asList(mock1,mock2));
    assertEquals(2,mismatches.size());
    assertEquals("{mock1.simpleMethod(1);=[mock1.simpleMethod(3);], mock1.simpleMethod(2);=[mock1.simpleMethod(3);]}",mismatches.toString());
  }
  @Test public void mismatch_reports_only_unstubbed_invocations() throws Exception {
    when(mock1.simpleMethod(1)).thenReturn("1");
    when(mock1.simpleMethod(2)).thenReturn("2");
    mock1.simpleMethod(2);
    mock1.simpleMethod(3);
    StubbingArgMismatches mismatches=finder.getStubbingArgMismatches(asList(mock1,mock2));
    assertEquals("{mock1.simpleMethod(1);=[mock1.simpleMethod(3);]}",mismatches.toString());
  }
}
