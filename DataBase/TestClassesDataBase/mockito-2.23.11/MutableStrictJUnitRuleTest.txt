public class MutableStrictJUnitRuleTest {
  JUnitCore runner=new JUnitCore();
  @Test public void rule_can_be_changed_to_strict() throws Throwable {
    Result result=runner.run(LenientByDefault.class);
    JUnitResultAssert.assertThat(result).succeeds(1).fails(1,RuntimeException.class);
  }
  @Test public void rule_can_be_changed_to_lenient() throws Throwable {
    Result result=runner.run(StrictByDefault.class);
    JUnitResultAssert.assertThat(result).succeeds(1).fails(1,RuntimeException.class);
  }
public static class LenientByDefault {
    @Rule public MockitoRule mockito=MockitoJUnit.rule().strictness(Strictness.LENIENT);
    @Mock IMethods mock;
    @Test public void unused_stub() throws Throwable {
      when(mock.simpleMethod()).thenReturn("1");
    }
    @Test public void unused_stub_with_strictness() throws Throwable {
      mockito.strictness(Strictness.STRICT_STUBS);
      when(mock.simpleMethod()).thenReturn("1");
    }
  }
public static class StrictByDefault {
    @Rule public MockitoRule mockito=MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);
    @Mock IMethods mock;
    @Test public void unused_stub() throws Throwable {
      when(mock.simpleMethod()).thenReturn("1");
    }
    @Test public void unused_stub_with_lenient() throws Throwable {
      mockito.strictness(Strictness.LENIENT);
      when(mock.simpleMethod()).thenReturn("1");
    }
  }
}
