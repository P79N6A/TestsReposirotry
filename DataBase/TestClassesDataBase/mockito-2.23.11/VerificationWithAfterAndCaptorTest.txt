public class VerificationWithAfterAndCaptorTest {
  @Rule public MockitoRule mockito=rule();
  @Mock private IMethods mock;
  @Captor private ArgumentCaptor<Character> captor;
  private Stopwatch watch=createNotStarted();
  /** 
 * Test for issue #345.
 */
  @Test public void shouldReturnListOfArgumentsWithSameSizeAsGivenInAtMostVerification(){
    int n=3;
    exerciseMockNTimes(n);
    watch.start();
    verify(mock,after(200).atMost(n)).oneArg((char)captor.capture());
    watch.assertElapsedTimeIsMoreThan(200,MILLISECONDS);
    assertThat(captor.getAllValues()).containsExactly('0','1','2');
  }
  @Test @Ignore("TODO review after #936") public void shouldReturnListOfArgumentsWithSameSizeAsGivenInTimesVerification(){
    int n=3;
    exerciseMockNTimes(n);
    verify(mock,after(200).times(n)).oneArg((char)captor.capture());
    assertEquals(n,captor.getAllValues().size());
    assertEquals('0',(char)captor.getAllValues().get(0));
    assertEquals('1',(char)captor.getAllValues().get(1));
    assertEquals('2',(char)captor.getAllValues().get(2));
  }
  @Test @Ignore("TODO review after #936") public void shouldReturnListOfArgumentsWithSameSizeAsGivenInAtLeastVerification(){
    int n=3;
    exerciseMockNTimes(n);
    verify(mock,after(200).atLeast(n)).oneArg((char)captor.capture());
    assertEquals(n,captor.getAllValues().size());
    assertEquals('0',(char)captor.getAllValues().get(0));
    assertEquals('1',(char)captor.getAllValues().get(1));
    assertEquals('2',(char)captor.getAllValues().get(2));
  }
  private void exerciseMockNTimes(  int n){
    for (int i=0; i < n; i++) {
      mock.oneArg((char)('0' + i));
    }
  }
}
