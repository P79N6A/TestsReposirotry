public class JUnitRuleTest {
  @Rule public SafeJUnitRule rule=new SafeJUnitRule(MockitoJUnit.rule());
  @Mock IMethods mock;
  @Test public void injects_into_test_case() throws Throwable {
    assertTrue(mockingDetails(mock).isMock());
  }
  @Test public void rethrows_exception() throws Throwable {
    rule.expectFailure(RuntimeException.class,"foo");
    throw new RuntimeException("foo");
  }
  @SuppressWarnings({"CheckReturnValue","MockitoUsage"}) @Test public void detects_invalid_mockito_usage_on_success() throws Throwable {
    rule.expectFailure(UnfinishedStubbingException.class);
    when(mock.simpleMethod());
  }
  @SuppressWarnings({"CheckReturnValue","MockitoUsage"}) @Test public void does_not_check_invalid_mockito_usage_on_failure() throws Throwable {
    rule.expectFailure(RuntimeException.class,"foo");
    Mockito.when(mock.simpleMethod());
    throw new RuntimeException("foo");
  }
}
