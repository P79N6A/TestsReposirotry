public class DescriptiveMessagesOnMisuseTest extends TestBase {
  @Mock private IMethods mock;
class Foo {
    public final String finalMethod(){
      return null;
    }
  }
  @SuppressWarnings("all") @Test public void tryDescriptiveMessagesOnMisuse(){
    Foo foo=mock(Foo.class);
  }
  @SuppressWarnings({"MockitoUsage","CheckReturnValue"}) @Test(expected=NotAMockException.class) public void shouldScreamWhenWholeMethodPassedToVerify(){
    verify(mock.booleanReturningMethod());
  }
  @Test(expected=NotAMockException.class) public void shouldScreamWhenWholeMethodPassedToVerifyNoMoreInteractions(){
    verifyNoMoreInteractions(mock.byteReturningMethod());
  }
  @SuppressWarnings({"CheckReturnValue","MockitoUsage"}) @Test(expected=NotAMockException.class) public void shouldScreamWhenInOrderCreatedWithDodgyMock(){
    inOrder("not a mock");
  }
  @SuppressWarnings({"CheckReturnValue","MockitoUsage"}) @Test(expected=NullInsteadOfMockException.class) public void shouldScreamWhenInOrderCreatedWithNulls(){
    inOrder(mock,null);
  }
  @SuppressWarnings({"MockitoUsage","CheckReturnValue"}) @Test(expected=NullInsteadOfMockException.class) public void shouldScreamNullPassedToVerify(){
    verify(null);
  }
  @Test(expected=NullInsteadOfMockException.class) public void shouldScreamWhenNotMockPassedToVerifyNoMoreInteractions(){
    verifyNoMoreInteractions(null,"blah");
  }
  @SuppressWarnings("all") @Test(expected=MockitoException.class) public void shouldScreamWhenNullPassedToVerifyNoMoreInteractions(){
    verifyNoMoreInteractions((Object[])null);
  }
}
