@Ignore public class MultithreadedStubbingHalfManualTest {
  /** 
 * Class with two methods, one of them is repeatedly mocked while another is repeatedly called.
 */
public interface ToMock {
    Integer getValue(    Integer param);
    List<Integer> getValues(    Integer param);
  }
  /** 
 * Thread pool for concurrent invocations.
 */
  private Executor executor;
  private List<Exception> exceptions=synchronizedList(new LinkedList<Exception>());
  @Before public void setUp(){
    this.executor=Executors.newSingleThreadExecutor();
  }
  /** 
 * The returned runnable simply calls ToMock.getValues(int).
 * @param toMock The mocked object
 * @return The runnable.
 */
  private Runnable getConflictingRunnable(  final ToMock toMock){
    return new Runnable(){
      public void run(){
        while (true) {
          try {
            Thread.sleep((long)(Math.random() * 10));
          }
 catch (          InterruptedException e) {
          }
          if (!toMock.getValues(0).isEmpty()) {
            fail("Shouldn't happen, were just making sure it wasn't optimized away...");
          }
        }
      }
    }
;
  }
  @Test public void tryToRevealTheProblem(){
    ToMock toMock=mock(ToMock.class);
    for (int i=0; i < 100; i++) {
      int j=i % 11;
      when(toMock.getValue(i)).thenReturn(j);
      while (true) {
        try {
          this.executor.execute(getConflictingRunnable(toMock));
          break;
        }
 catch (        RejectedExecutionException ex) {
          fail();
        }
      }
      try {
        Thread.sleep(10 / ((i % 10) + 1));
      }
 catch (      InterruptedException e) {
      }
    }
  }
}
