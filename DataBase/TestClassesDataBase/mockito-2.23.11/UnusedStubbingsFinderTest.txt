/** 
 * This unit test lives in 'org.mockitousage' package for a reason. It makes it easy to write tests that depend on the stack trace filtering logic. Long term, it would be nice to have more configurability in TestBase to make it easy to write such unit tests in 'org.mockito.*' packages.
 */
public class UnusedStubbingsFinderTest extends TestBase {
  UnusedStubbingsFinder finder=new UnusedStubbingsFinder();
  @Mock IMethods mock1;
  @Mock IMethods mock2;
  @Test public void no_interactions() throws Exception {
    assertEquals(0,finder.getUnusedStubbings((List)asList(mock1,mock2)).size());
    assertEquals(0,finder.getUnusedStubbingsByLocation((List)asList(mock1,mock2)).size());
  }
  @Test public void no_stubbings() throws Exception {
    mock1.simpleMethod();
    assertEquals(0,finder.getUnusedStubbings((List)asList(mock1,mock2)).size());
    assertEquals(0,finder.getUnusedStubbingsByLocation((List)asList(mock1,mock2)).size());
  }
  @Test public void no_unused_stubbings() throws Exception {
    when(mock1.simpleMethod()).thenReturn("1");
    mock1.simpleMethod();
    assertEquals(0,finder.getUnusedStubbings((List)asList(mock1,mock2)).size());
    assertEquals(0,finder.getUnusedStubbingsByLocation((List)asList(mock1,mock2)).size());
  }
  @Test public void unused_stubbings() throws Exception {
    when(mock1.simpleMethod()).thenReturn("1");
    assertEquals(1,finder.getUnusedStubbings((List)asList(mock1,mock2)).size());
    assertEquals(1,finder.getUnusedStubbingsByLocation((List)asList(mock1,mock2)).size());
  }
  @Test public void some_unused_stubbings() throws Exception {
    when(mock1.simpleMethod(1)).thenReturn("1");
    when(mock2.simpleMethod(2)).thenReturn("2");
    when(mock2.simpleMethod(3)).thenReturn("3");
    mock2.simpleMethod(2);
    UnusedStubbings stubbings=finder.getUnusedStubbings((List)asList(mock1,mock2));
    assertEquals(2,stubbings.size());
    assertEquals("[mock1.simpleMethod(1); stubbed with: [Returns: 1], mock2.simpleMethod(3); stubbed with: [Returns: 3]]",stubbings.toString());
  }
  @Test public void unused_and_lenient_stubbings() throws Exception {
    when(mock1.simpleMethod(1)).thenReturn("1");
    when(mock1.simpleMethod(2)).thenReturn("2");
    lenient().when(mock2.simpleMethod(3)).thenReturn("3");
    mock1.simpleMethod(1);
    UnusedStubbings stubbings=finder.getUnusedStubbings((List)asList(mock1,mock2));
    assertEquals(1,stubbings.size());
    assertEquals("[mock1.simpleMethod(2); stubbed with: [Returns: 2]]",stubbings.toString());
  }
  @Test public void some_unused_stubbings_by_location() throws Exception {
    when(mock1.simpleMethod(1)).thenReturn("1");
    when(mock2.simpleMethod(2)).thenReturn("2");
    when(mock2.simpleMethod(3)).thenReturn("3");
    lenient().when(mock2.differentMethod()).thenReturn("4");
    mock2.simpleMethod(2);
    Collection stubbings=finder.getUnusedStubbingsByLocation((List)asList(mock1,mock2));
    assertEquals(2,stubbings.size());
    assertEquals("[mock1.simpleMethod(1);, mock2.simpleMethod(3);]",stubbings.toString());
  }
  @Test public void stubbing_used_by_location() throws Exception {
    when(mock1.simpleMethod(1)).thenReturn("1");
    when(mock2.simpleMethod(1)).thenReturn("1");
    mock1.simpleMethod(1);
    assertEquals(1,finder.getUnusedStubbings((List)asList(mock1,mock2)).size());
    assertEquals(0,finder.getUnusedStubbingsByLocation((List)asList(mock1,mock2)).size());
  }
  @Test public void deduplicates_stubbings_by_location() throws Exception {
    when(mock1.simpleMethod(1)).thenReturn("1");
    when(mock2.simpleMethod(1)).thenReturn("1");
    Collection stubbings=finder.getUnusedStubbingsByLocation((List)asList(mock1,mock2));
    assertEquals(1,stubbings.size());
  }
}
