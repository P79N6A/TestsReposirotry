public class StrictStubbingTest {
  @Mock IMethods mock;
  MockitoSession mockito=Mockito.mockitoSession().initMocks(this).strictness(Strictness.STRICT_STUBS).startMocking();
  @After public void after(){
    mockito.finishMocking();
  }
  @Test public void no_interactions() throws Throwable {
    mockito.finishMocking();
  }
  @Test public void few_interactions() throws Throwable {
    mock.simpleMethod(100);
    mock.otherMethod();
  }
  @Test public void few_verified_interactions() throws Throwable {
    mock.simpleMethod(100);
    mock.otherMethod();
    verify(mock).simpleMethod(100);
    verify(mock).otherMethod();
    verifyNoMoreInteractions(mock);
  }
  @Test public void stubbed_method_is_implicitly_verified() throws Throwable {
    given(mock.simpleMethod(100)).willReturn("100");
    mock.simpleMethod(100);
    verifyNoMoreInteractions(mock);
  }
  @Test public void unused_stubbed_is_not_implicitly_verified() throws Throwable {
    given(mock.simpleMethod(100)).willReturn("100");
    mock.simpleMethod(100);
    mock.simpleMethod(200);
    assertThat(new Runnable(){
      public void run(){
        verifyNoMoreInteractions(mock);
      }
    }
).throwsException(NoInteractionsWanted.class);
  }
  @Test public void stubbing_argument_mismatch() throws Throwable {
    given(mock.simpleMethod(100)).willReturn("100");
    assertThat(new Runnable(){
      public void run(){
        ProductionCode.simpleMethod(mock,200);
      }
    }
).throwsException(PotentialStubbingProblem.class);
  }
  @Test public void unused_stubbing() throws Throwable {
    given(mock.simpleMethod(100)).willReturn("100");
    assertThat(new Runnable(){
      public void run(){
        mockito.finishMocking();
      }
    }
).throwsException(UnnecessaryStubbingException.class);
  }
}
