public class PlatformTest {
  @Test public void const_are_initialized_from_system_properties(){
    System.out.println(Platform.describe());
    assertThat(Platform.JVM_VERSION).isEqualTo(System.getProperty("java.runtime.version"));
    assertThat(Platform.JVM_INFO).isEqualTo(System.getProperty("java.vm.info"));
    assertThat(Platform.JVM_NAME).isEqualTo(System.getProperty("java.vm.name"));
    assertThat(Platform.JVM_VENDOR).isEqualTo(System.getProperty("java.vm.vendor"));
    assertThat(Platform.JVM_VENDOR_VERSION).isEqualTo(System.getProperty("java.vm.version"));
  }
  @Test public void should_warn_for_jvm() throws Exception {
    assertThat(Platform.warnForVM("Java HotSpot(TM) 64-Bit Server VM","HotSpot","hotspot warning","IBM","ibm warning")).isEqualTo("hotspot warning");
    assertThat(Platform.warnForVM("IBM J9 VM","HotSpot","hotspot warning","IBM","ibm warning")).isEqualTo("ibm warning");
    assertThat(Platform.warnForVM("whatever",null,"should not be returned",null,"should not be returned")).isEqualTo("");
  }
  @Test public void should_parse_open_jdk_string_and_report_wether_below_or_nut_update_45(){
    Map<String,Boolean> versions=new HashMap<String,Boolean>(){
{
        put("1.8.0_92-b14",false);
        put("1.8.0-b24",true);
        put("1.8.0_5",true);
        put("1.8.0b5_u44",true);
        put("1.8.0b5_u92",false);
        put("1.7.0_4",false);
        put("1.4.0_03-b04",false);
        put("1.4.0_03-ea-b01",false);
        put("pxi3270_27sr4-20160303_03 (SR4)",false);
        put("pwi3260sr11-20120412_01 (SR11)",false);
        put("pwa6480sr1fp10-20150711_01 (SR1 FP10)",false);
        put("null",false);
      }
    }
;
    assertPlatformParsesCorrectlyVariousVersionScheme(versions);
  }
  @Test public void should_parse_open_jdk9_string(){
    Map<String,Boolean> versions=new HashMap<String,Boolean>(){
{
        put("9-ea+73",false);
        put("9+100",false);
        put("9.1.2+62",false);
        put("9.0.1+20",false);
      }
    }
;
    assertPlatformParsesCorrectlyVariousVersionScheme(versions);
  }
  private void assertPlatformParsesCorrectlyVariousVersionScheme(  Map<String,Boolean> versions){
    for (    Map.Entry<String,Boolean> version : versions.entrySet()) {
      assertThat(Platform.isJava8BelowUpdate45(version.getKey())).describedAs(version.getKey()).isEqualTo(version.getValue());
    }
  }
}
