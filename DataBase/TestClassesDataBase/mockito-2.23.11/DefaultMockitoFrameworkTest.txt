public class DefaultMockitoFrameworkTest extends TestBase {
  private DefaultMockitoFramework framework=new DefaultMockitoFramework();
  @After public void clearListeners(){
    new StateMaster().clearMockitoListeners();
  }
  @Test(expected=IllegalArgumentException.class) public void prevents_adding_null_listener(){
    framework.addListener(null);
  }
  @Test(expected=IllegalArgumentException.class) public void prevents_removing_null_listener(){
    framework.removeListener(null);
  }
  @Test public void ok_to_remove_unknown_listener(){
    framework.removeListener(new MockitoListener(){
    }
);
  }
  @Test public void ok_to_remove_listener_multiple_times(){
    MockitoListener listener=new MockitoListener(){
    }
;
    framework.addListener(listener);
    framework.removeListener(listener);
    framework.removeListener(listener);
  }
  @Test public void adds_creation_listener(){
    MockCreationListener listener=mock(MockCreationListener.class);
    framework.addListener(listener);
    MockSettings settings=withSettings().name("my list");
    List mock=mock(List.class,settings);
    Set mock2=mock(Set.class);
    verify(listener).onMockCreated(eq(mock),any(MockCreationSettings.class));
    verify(listener).onMockCreated(eq(mock2),any(MockCreationSettings.class));
    verifyNoMoreInteractions(listener);
  }
  @SuppressWarnings({"CheckReturnValue","MockitoUsage"}) @Test public void removes_creation_listener(){
    MockCreationListener listener=mock(MockCreationListener.class);
    framework.addListener(listener);
    mock(List.class);
    verify(listener).onMockCreated(ArgumentMatchers.any(),any(MockCreationSettings.class));
    framework.removeListener(listener);
    mock(Set.class);
    verifyNoMoreInteractions(listener);
  }
  @Test public void prevents_duplicate_listeners_of_the_same_type(){
    framework.addListener(new MyListener());
    assertThat(new Runnable(){
      @Override public void run(){
        framework.addListener(new MyListener());
      }
    }
).throwsException(RedundantListenerException.class).throwsMessage("\n" + "Problems adding Mockito listener.\n" + "Listener of type 'MyListener' has already been added and not removed.\n"+ "It indicates that previous listener was not removed according to the API.\n"+ "When you add a listener, don't forget to remove the listener afterwards:\n"+ "  Mockito.framework().removeListener(myListener);\n"+ "For more information, see the javadoc for RedundantListenerException class.");
  }
private static class MyListener implements MockitoListener {
  }
}
