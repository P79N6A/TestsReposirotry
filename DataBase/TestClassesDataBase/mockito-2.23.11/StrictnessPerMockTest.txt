public class StrictnessPerMockTest {
  MockitoSession mockito;
  @Mock IMethods strictStubsMock;
  IMethods lenientMock;
  @Before public void before(){
    mockito=Mockito.mockitoSession().initMocks(this).strictness(Strictness.STRICT_STUBS).startMocking();
    assertNull(lenientMock);
    lenientMock=mock(IMethods.class,withSettings().lenient());
  }
  @Test public void knows_if_mock_is_lenient(){
    assertTrue(mockingDetails(lenientMock).getMockCreationSettings().isLenient());
    assertFalse(mockingDetails(strictStubsMock).getMockCreationSettings().isLenient());
  }
  @Test public void potential_stubbing_problem(){
    given(lenientMock.simpleMethod(100)).willReturn("100");
    given(strictStubsMock.simpleMethod(100)).willReturn("100");
    lenientMock.simpleMethod(200);
    Assertions.assertThatThrownBy(new ThrowableAssert.ThrowingCallable(){
      public void call() throws Throwable {
        ProductionCode.simpleMethod(strictStubsMock,200);
      }
    }
).isInstanceOf(PotentialStubbingProblem.class);
  }
  @Test public void unnecessary_stubbing(){
    given(lenientMock.simpleMethod(100)).willReturn("100");
    given(strictStubsMock.simpleMethod(100)).willReturn("100");
    Assertions.assertThatThrownBy(new ThrowableAssert.ThrowingCallable(){
      @Override public void call() throws Throwable {
        mockito.finishMocking();
      }
    }
).isInstanceOf(UnnecessaryStubbingException.class).hasMessageContaining("1. -> ").isNot(TestBase.hasMessageContaining("2. ->"));
  }
  @Test public void verify_no_more_invocations(){
    given(lenientMock.simpleMethod(100)).willReturn("100");
    given(strictStubsMock.simpleMethod(100)).willReturn("100");
    strictStubsMock.simpleMethod(100);
    lenientMock.simpleMethod(100);
    Assertions.assertThatThrownBy(new ThrowableAssert.ThrowingCallable(){
      @Override public void call() throws Throwable {
        verifyNoMoreInteractions(strictStubsMock,lenientMock);
      }
    }
).isInstanceOf(NoInteractionsWanted.class).hasMessageContaining("But found this interaction on mock 'iMethods'").hasMessageContaining("Actually, above is the only interaction with this mock");
  }
  @After public void after(){
    mockito.finishMocking();
  }
}
