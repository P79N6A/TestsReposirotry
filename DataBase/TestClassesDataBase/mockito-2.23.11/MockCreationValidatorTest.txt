@SuppressWarnings("unchecked") public class MockCreationValidatorTest {
  MockCreationValidator validator=new MockCreationValidator();
  @Test public void should_not_allow_extra_interface_that_is_the_same_as_the_mocked_type() throws Exception {
    try {
      validator.validateExtraInterfaces(IMethods.class,(Collection)asList(IMethods.class));
      fail();
    }
 catch (    MockitoException e) {
      assertThat(e.getMessage()).contains("You mocked following type: IMethods");
    }
  }
  @Test(expected=MockitoException.class) public void should_not_allow_inconsistent_types() throws Exception {
    validator.validateMockedType(List.class,new ArrayList());
  }
  @Test public void should_allow_only_consistent_types() throws Exception {
    validator.validateMockedType(ArrayList.class,new ArrayList());
  }
  @Test public void should_validation_be_safe_when_nulls_passed() throws Exception {
    validator.validateMockedType(null,new ArrayList());
    validator.validateMockedType(ArrayList.class,null);
  }
  @Test public void should_fail_when_type_not_mockable() throws Exception {
    try {
      validator.validateType(long.class);
    }
 catch (    MockitoException ex) {
      assertThat(ex.getMessage()).contains("primitive");
    }
  }
}
