public class CapturingMatcherTest extends TestBase {
  @Test public void should_capture_arguments() throws Exception {
    CapturingMatcher<String> m=new CapturingMatcher<String>();
    m.captureFrom("foo");
    m.captureFrom("bar");
    assertThat(m.getAllValues()).containsSequence("foo","bar");
  }
  @Test public void should_know_last_captured_value() throws Exception {
    CapturingMatcher<String> m=new CapturingMatcher<String>();
    m.captureFrom("foo");
    m.captureFrom("bar");
    assertEquals("bar",m.getLastValue());
  }
  @Test public void should_scream_when_nothing_yet_captured() throws Exception {
    CapturingMatcher<String> m=new CapturingMatcher<String>();
    try {
      m.getLastValue();
      fail();
    }
 catch (    MockitoException e) {
    }
  }
  @Test public void should_not_fail_when_used_in_concurrent_tests() throws Exception {
    final CapturingMatcher<String> m=new CapturingMatcher<String>();
    m.captureFrom("concurrent access");
    Iterator<String> iterator=m.getAllValues().iterator();
    m.captureFrom("concurrent access");
    assertThat(iterator.hasNext()).isTrue();
    assertThat(iterator.next()).isEqualTo("concurrent access");
  }
}
