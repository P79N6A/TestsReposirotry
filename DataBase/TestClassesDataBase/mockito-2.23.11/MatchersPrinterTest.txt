@SuppressWarnings("unchecked") public class MatchersPrinterTest extends TestBase {
  private final MatchersPrinter printer=new MatchersPrinter();
  @Test public void shouldGetArgumentsLine(){
    String line=printer.getArgumentsLine((List)Arrays.asList(new Equals(1),new Equals(2)),new PrintSettings());
    assertEquals("(1, 2);",line);
  }
  @Test public void shouldGetArgumentsBlock(){
    String line=printer.getArgumentsBlock((List)Arrays.asList(new Equals(1),new Equals(2)),new PrintSettings());
    assertEquals("(\n    1,\n    2\n);",line);
  }
  @Test public void shouldDescribeTypeInfoOnlyMarkedMatchers(){
    String line=printer.getArgumentsLine((List)Arrays.asList(new Equals(1L),new Equals(2)),PrintSettings.verboseMatchers(1));
    assertEquals("(1L, (Integer) 2);",line);
  }
  @Test public void shouldDescribeStringMatcher(){
    String line=printer.getArgumentsLine((List)Arrays.asList(new Equals(1L),new Equals("x")),PrintSettings.verboseMatchers(1));
    assertEquals("(1L, (String) \"x\");",line);
  }
  @Test public void shouldGetVerboseArgumentsInBlock(){
    String line=printer.getArgumentsBlock((List)Arrays.asList(new Equals(1L),new Equals(2)),PrintSettings.verboseMatchers(0,1));
    assertEquals("(\n    (Long) 1L,\n    (Integer) 2\n);",line);
  }
  @Test public void shouldGetVerboseArgumentsEvenIfSomeMatchersAreNotVerbose(){
    String line=printer.getArgumentsLine((List)Arrays.asList(new Equals(1L),NotNull.NOT_NULL),PrintSettings.verboseMatchers(0));
    assertEquals("((Long) 1L, notNull());",line);
  }
}
