public class CustomVerificationTest extends TestBase {
  @Mock IMethods mock;
  @Test public void custom_verification_with_old_api(){
    mock.simpleMethod("a",10);
    verify(mock,ignoreParametersUsingOldApi()).simpleMethod();
    try {
      verify(mock,ignoreParametersUsingOldApi()).otherMethod();
      fail();
    }
 catch (    MockitoAssertionError e) {
    }
  }
  private VerificationMode ignoreParametersUsingOldApi(){
    return new VerificationMode(){
      public void verify(      VerificationData data){
        InvocationMatcher target=data.getWanted();
        if (data.getTarget() != target) {
          throw new RuntimeException("Sanity check");
        }
        for (        Invocation invocation : data.getAllInvocations()) {
          if (target.getInvocation().getMethod().getName().equals(invocation.getMethod().getName())) {
            return;
          }
        }
        throw new MockitoAssertionError("Expected method with name: " + target + " not found in:\n"+ data.getAllInvocations());
      }
      public VerificationMode description(      String description){
        return this;
      }
    }
;
  }
}
