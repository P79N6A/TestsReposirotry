public class DefaultInternalRunner implements InternalRunner {
  private final BlockJUnit4ClassRunner runner;
  public DefaultInternalRunner(  Class<?> testClass,  final Supplier<MockitoTestListener> listenerSupplier) throws InitializationError {
    runner=new BlockJUnit4ClassRunner(testClass){
      public Object target;
      private MockitoTestListener mockitoTestListener;
      protected Statement withBefores(      FrameworkMethod method,      Object target,      Statement statement){
        this.target=target;
        mockitoTestListener=listenerSupplier.get();
        Mockito.framework().addListener(mockitoTestListener);
        MockitoAnnotations.initMocks(target);
        return super.withBefores(method,target,statement);
      }
      public void run(      final RunNotifier notifier){
        RunListener listener=new RunListener(){
          private boolean started;
          Throwable failure;
          @Override public void testStarted(          Description description) throws Exception {
            started=true;
          }
          @Override public void testFailure(          Failure failure) throws Exception {
            this.failure=failure.getException();
            if (!started && mockitoTestListener != null) {
              Mockito.framework().removeListener(mockitoTestListener);
            }
          }
          @Override public void testFinished(          Description description) throws Exception {
            try {
              if (mockitoTestListener != null) {
                Mockito.framework().removeListener(mockitoTestListener);
                mockitoTestListener.testFinished(new DefaultTestFinishedEvent(target,description.getMethodName(),failure));
              }
              Mockito.validateMockitoUsage();
            }
 catch (            Throwable t) {
              notifier.fireTestFailure(new Failure(description,t));
            }
          }
        }
;
        notifier.addListener(listener);
        super.run(notifier);
      }
    }
;
  }
  public void run(  final RunNotifier notifier){
    runner.run(notifier);
  }
  public Description getDescription(){
    return runner.getDescription();
  }
  public void filter(  Filter filter) throws NoTestsRemainException {
    runner.filter(filter);
  }
}
