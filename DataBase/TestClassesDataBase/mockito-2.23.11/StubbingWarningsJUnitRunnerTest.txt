public class StubbingWarningsJUnitRunnerTest extends TestBase {
  JUnitCore runner=new JUnitCore();
  SimpleMockitoLogger logger=TestableJUnitRunner.refreshedLogger();
  @Test public void no_arg_mismatch_warnings(){
    runner.run(PassingArgMismatch.class,FailingWithMatchingArgs.class,MismatchButStubAlreadyUsed.class);
    assertEquals("",filterLineNo(logger.getLoggedInfo()));
  }
  @Test public void shows_arg_mismatch_warnings_when_test_fails(){
    runner.run(FailingWithArgMismatch.class);
    assertEquals("[MockitoHint] FailingWithArgMismatch.test (see javadoc for MockitoHint):\n" + "[MockitoHint] 1. Unused... -> at org.mockitousage.junitrunner.StubbingWarningsJUnitRunnerTest$FailingWithArgMismatch.test(StubbingWarningsJUnitRunnerTest.java:0)\n" + "[MockitoHint]  ...args ok? -> at org.mockitousage.junitrunner.StubbingWarningsJUnitRunnerTest$FailingWithArgMismatch.test(StubbingWarningsJUnitRunnerTest.java:0)\n",filterLineNo(logger.getLoggedInfo()));
  }
  @Test public void shows_arg_mismatch_warnings_only_for_mismatches(){
    runner.run(FailingWithSomeStubMismatches.class);
    assertEquals("[MockitoHint] FailingWithSomeStubMismatches.test (see javadoc for MockitoHint):\n" + "[MockitoHint] 1. Unused... -> at org.mockitousage.junitrunner.StubbingWarningsJUnitRunnerTest$FailingWithSomeStubMismatches.test(StubbingWarningsJUnitRunnerTest.java:0)\n" + "[MockitoHint]  ...args ok? -> at org.mockitousage.junitrunner.StubbingWarningsJUnitRunnerTest$FailingWithSomeStubMismatches.test(StubbingWarningsJUnitRunnerTest.java:0)\n",filterLineNo(logger.getLoggedInfo()));
  }
  @Test public void validates_mockito_usage(){
    Result result=runner.run(InvalidMockitoUsage.class);
    assertThat(result).fails(1,UnfinishedStubbingException.class);
  }
@RunWith(TestableJUnitRunner.class) public static class PassingArgMismatch {
    IMethods mock=mock(IMethods.class);
    @Test public void test() throws Exception {
      when(mock.simpleMethod(1)).thenReturn("1");
      mock.simpleMethod(2);
    }
  }
@RunWith(TestableJUnitRunner.class) public static class FailingWithArgMismatch {
    @Mock IMethods mock;
    @Test public void test() throws Exception {
      when(mock.simpleMethod(1)).thenReturn("1");
      mock.simpleMethod(2);
      throw new RuntimeException("x");
    }
  }
@RunWith(TestableJUnitRunner.class) public static class FailingWithMatchingArgs {
    @Mock IMethods mock;
    @Test public void test() throws Exception {
      when(mock.simpleMethod(1)).thenReturn("1");
      mock.simpleMethod(1);
      throw new RuntimeException("x");
    }
  }
@RunWith(TestableJUnitRunner.class) public static class FailingWithSomeStubMismatches {
    @Mock IMethods mock;
    @Test public void test() throws Exception {
      when(mock.simpleMethod(1)).thenReturn("1");
      when(mock.simpleMethod(2)).thenReturn("2");
      mock.simpleMethod(1);
      mock.simpleMethod(3);
      throw new RuntimeException("x");
    }
  }
@RunWith(TestableJUnitRunner.class) public static class MismatchButStubAlreadyUsed {
    @Mock IMethods mock;
    @Test public void test() throws Exception {
      when(mock.simpleMethod(1)).thenReturn("1");
      mock.simpleMethod(1);
      mock.simpleMethod(2);
      throw new RuntimeException("x");
    }
  }
@RunWith(TestableJUnitRunner.class) public static class InvalidMockitoUsage {
    @Mock IMethods mock;
    @SuppressWarnings({"MockitoUsage","CheckReturnValue"}) @Test public void test() throws Exception {
      when(mock.simpleMethod());
    }
  }
}
