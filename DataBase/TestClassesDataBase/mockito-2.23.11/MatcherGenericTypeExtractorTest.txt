public class MatcherGenericTypeExtractorTest extends TestBase {
private class IntMatcher extends BaseMatcher<Integer> {
    public boolean matches(    Object o){
      return true;
    }
    public void describeTo(    Description description){
    }
  }
private static class StaticIntMatcher extends BaseMatcher<Integer> {
    public boolean matches(    Object o){
      return true;
    }
    public void describeTo(    Description description){
    }
  }
private static class StaticIntMatcherSubclass extends StaticIntMatcher {
    public boolean matches(    Object o){
      return true;
    }
    public void describeTo(    Description description){
    }
  }
@SuppressWarnings("rawtypes") private static class NonGenericMatcher extends BaseMatcher {
    public boolean matches(    Object o){
      return true;
    }
    public void describeTo(    Description description){
    }
  }
private class IntMatcherFromInterface extends BaseMatcher<Integer> {
    public boolean matches(    Object o){
      return true;
    }
    public void describeMismatch(    Object item,    Description mismatchDescription){
    }
    public void describeTo(    Description description){
    }
  }
private static class StaticIntMatcherFromInterface extends BaseMatcher<Integer> {
    public boolean matches(    Object o){
      return true;
    }
    public void describeMismatch(    Object item,    Description mismatchDescription){
    }
    public void describeTo(    Description description){
    }
  }
@SuppressWarnings("rawtypes") private static class NonGenericMatcherFromInterface extends BaseMatcher {
    public boolean matches(    Object o){
      return true;
    }
    public void describeMismatch(    Object item,    Description mismatchDescription){
    }
    public void describeTo(    Description description){
    }
  }
private interface IMatcher extends Matcher<Integer> {
  }
private static class SubclassGenericMatcherFromInterface extends BaseMatcher<Integer> implements Serializable, Cloneable, IMatcher {
    public boolean matches(    Object o){
      return true;
    }
    public void describeMismatch(    Object item,    Description mismatchDescription){
    }
    public void describeTo(    Description description){
    }
  }
private static class InsaneEdgeCase extends SubclassGenericMatcherFromInterface {
  }
  @Test public void findsGenericType(){
    assertEquals(Integer.class,genericTypeOfMatcher(IntMatcher.class));
    assertEquals(Integer.class,genericTypeOfMatcher(StaticIntMatcher.class));
    assertEquals(Integer.class,genericTypeOfMatcher(IntMatcherFromInterface.class));
    assertEquals(Integer.class,genericTypeOfMatcher(StaticIntMatcherSubclass.class));
    assertEquals(Integer.class,genericTypeOfMatcher(IntMatcherFromInterface.class));
    assertEquals(Integer.class,genericTypeOfMatcher(StaticIntMatcherFromInterface.class));
    assertEquals(Integer.class,genericTypeOfMatcher(SubclassGenericMatcherFromInterface.class));
    assertEquals(Integer.class,genericTypeOfMatcher(InsaneEdgeCase.class));
    assertEquals(Integer.class,genericTypeOfMatcher(new BaseMatcher<Integer>(){
      public void describeTo(      Description description){
      }
      public boolean matches(      Object o){
        return false;
      }
    }
.getClass()));
    assertEquals(Integer.class,genericTypeOfMatcher(new BaseMatcher<Integer>(){
      public void describeTo(      Description description){
      }
      public boolean matches(      Object o){
        return false;
      }
      public void describeMismatch(      Object item,      Description mismatchDescription){
      }
    }
.getClass()));
    assertEquals(Object.class,genericTypeOfMatcher(Object.class));
    assertEquals(Object.class,genericTypeOfMatcher(String.class));
    assertEquals(Object.class,genericTypeOfMatcher(HashMap.class));
    assertEquals(Object.class,genericTypeOfMatcher(new HashMap<String,String>(){
    }
.getClass()));
    assertEquals(Object.class,genericTypeOfMatcher(NonGenericMatcher.class));
    assertEquals(Object.class,genericTypeOfMatcher(NonGenericMatcherFromInterface.class));
  }
}
