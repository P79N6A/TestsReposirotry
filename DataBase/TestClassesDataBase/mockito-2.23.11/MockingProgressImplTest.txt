public class MockingProgressImplTest extends TestBase {
  private MockingProgress mockingProgress;
  @Before public void setup(){
    mockingProgress=new MockingProgressImpl();
  }
  @Test public void shouldStartVerificationAndPullVerificationMode() throws Exception {
    assertNull(mockingProgress.pullVerificationMode());
    VerificationMode mode=VerificationModeFactory.times(19);
    mockingProgress.verificationStarted(mode);
    assertSame(mode,mockingProgress.pullVerificationMode());
    assertNull(mockingProgress.pullVerificationMode());
  }
  @Test public void shouldCheckIfVerificationWasFinished() throws Exception {
    mockingProgress.verificationStarted(VerificationModeFactory.atLeastOnce());
    try {
      mockingProgress.verificationStarted(VerificationModeFactory.atLeastOnce());
      fail();
    }
 catch (    MockitoException e) {
    }
  }
  @Test public void shouldNotifyListenerSafely() throws Exception {
    mockingProgress.addListener(null);
    mockingProgress.mockingStarted(null,null);
  }
  @Test public void should_not_allow_redundant_listeners(){
    MockitoListener listener1=mock(MockitoListener.class);
    final MockitoListener listener2=mock(MockitoListener.class);
    final Set<MockitoListener> listeners=new LinkedHashSet<MockitoListener>();
    MockingProgressImpl.addListener(listener1,listeners);
    Assertions.assertThatThrownBy(new ThrowableAssert.ThrowingCallable(){
      public void call(){
        MockingProgressImpl.addListener(listener2,listeners);
      }
    }
).isInstanceOf(RedundantListenerException.class);
  }
  @Test public void should_clean_up_listeners_automatically(){
    MockitoListener someListener=mock(MockitoListener.class);
    MyListener cleanListener=mock(MyListener.class);
    MyListener dirtyListener=when(mock(MyListener.class).isListenerDirty()).thenReturn(true).getMock();
    Set<MockitoListener> listeners=new LinkedHashSet<MockitoListener>();
    MockingProgressImpl.addListener(someListener,listeners);
    MockingProgressImpl.addListener(dirtyListener,listeners);
    Assertions.assertThat(listeners).containsExactlyInAnyOrder(someListener,dirtyListener);
    MockingProgressImpl.addListener(cleanListener,listeners);
    Assertions.assertThat(listeners).containsExactlyInAnyOrder(someListener,cleanListener);
  }
interface MyListener extends MockitoListener, AutoCleanableListener {
  }
}
