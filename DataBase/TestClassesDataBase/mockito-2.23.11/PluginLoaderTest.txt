public class PluginLoaderTest {
  @Rule public MockitoRule rule=MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);
  @Mock PluginInitializer initializer;
  @Mock DefaultMockitoPlugins plugins;
  @InjectMocks PluginLoader loader;
  @Test public void loads_plugin(){
    when(initializer.loadImpl(FooPlugin.class)).thenReturn(new FooPlugin());
    FooPlugin plugin=loader.loadPlugin(FooPlugin.class);
    assertNotNull(plugin);
  }
  @Test public void loads_alternative_plugin(){
    willReturn(null).given(initializer).loadImpl(FooPlugin.class);
    BarPlugin expected=new BarPlugin();
    willReturn(expected).given(initializer).loadImpl(BarPlugin.class);
    Object plugin=loader.loadPlugin(FooPlugin.class,BarPlugin.class);
    assertSame(plugin,expected);
  }
  @Test public void loads_default_plugin(){
    willReturn(null).given(initializer).loadImpl(FooPlugin.class);
    willReturn(null).given(initializer).loadImpl(BarPlugin.class);
    FooPlugin expected=new FooPlugin();
    willReturn(expected).given(plugins).getDefaultPlugin(FooPlugin.class);
    Object plugin=loader.loadPlugin(FooPlugin.class,BarPlugin.class);
    assertSame(plugin,expected);
  }
  @Test public void fails_to_load_plugin(){
    RuntimeException cause=new RuntimeException("Boo!");
    when(initializer.loadImpl(Foo.class)).thenThrow(cause);
    final Foo plugin=loader.loadPlugin(Foo.class);
    Assertions.assertThatThrownBy(new ThrowableAssert.ThrowingCallable(){
      @Override public void call() throws Throwable {
        plugin.toString();
      }
    }
).isInstanceOf(IllegalStateException.class).hasMessage("Could not initialize plugin: interface org.mockito.internal.configuration.plugins.PluginLoaderTest$Foo (alternate: null)").hasCause(cause);
  }
static class FooPlugin {
  }
static class BarPlugin {
  }
static interface Foo {
  }
}
