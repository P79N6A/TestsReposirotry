/** 
 * @see <a href="https://github.com/mockito/mockito/issues/1279">Issue #1279</a>
 */
public class MockitoStubbedCallInAnswerTest extends TestBase {
  @Mock Foo foo;
  @Mock Bar bar;
  @Test public void stubbing_the_right_mock() throws Exception {
    when(bar.doInt()).thenReturn(0);
    when(foo.doInt()).thenAnswer(new Answer<Integer>(){
      @Override public Integer answer(      InvocationOnMock invocation) throws Throwable {
        return bar.doInt();
      }
    }
);
    assertEquals(0,foo.doInt());
    assertEquals(0,bar.doInt());
    when(foo.doInt()).thenReturn(1);
    assertEquals(1,foo.doInt());
    assertEquals(0,bar.doInt());
  }
  @Test public void return_type_validation() throws Exception {
    when(foo.doString()).thenAnswer(new Answer<String>(){
      public String answer(      InvocationOnMock invocation) throws Throwable {
        return String.valueOf(bar.doInt());
      }
    }
);
    assertEquals("0",foo.doString());
    when(foo.doString()).thenReturn("");
    assertEquals("",foo.doString());
  }
  @Test public void prevents_stack_overflow() throws Exception {
    when(foo.doInt()).thenAnswer(new Answer<Integer>(){
      public Integer answer(      InvocationOnMock invocation) throws Throwable {
        return bar.doInt();
      }
    }
);
    assertEquals(0,foo.doInt());
    when(foo.doInt()).thenAnswer(new Answer<Integer>(){
      public Integer answer(      InvocationOnMock invocation) throws Throwable {
        return bar.doInt() + 1;
      }
    }
);
    assertEquals(1,foo.doInt());
  }
  @Test public void overriding_stubbing() throws Exception {
    when(bar.doInt()).thenReturn(10);
    when(foo.doInt()).thenAnswer(new Answer<Integer>(){
      public Integer answer(      InvocationOnMock invocation) throws Throwable {
        return bar.doInt() + 1;
      }
    }
);
    assertEquals(11,foo.doInt());
    when(foo.doInt()).thenReturn(100);
    assertEquals(100,foo.doInt());
  }
interface Foo {
    String doString();
    int doInt();
  }
interface Bar {
    int doInt();
  }
}
