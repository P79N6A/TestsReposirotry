@SuppressWarnings("unchecked") public class MockitoTest {
  @Test public void shouldRemoveStubbableFromProgressAfterStubbing(){
    List mock=Mockito.mock(List.class);
    Mockito.when(mock.add("test")).thenReturn(true);
    assertThat(mockingProgress().pullOngoingStubbing()).isNull();
  }
  @SuppressWarnings({"CheckReturnValue","MockitoUsage"}) @Test(expected=NotAMockException.class) public void shouldValidateMockWhenVerifying(){
    Mockito.verify("notMock");
  }
  @SuppressWarnings({"CheckReturnValue","MockitoUsage"}) @Test(expected=NotAMockException.class) public void shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations(){
    Mockito.verify("notMock",times(19));
  }
  @Test(expected=NotAMockException.class) public void shouldValidateMockWhenVerifyingNoMoreInteractions(){
    Mockito.verifyNoMoreInteractions("notMock");
  }
  @Test(expected=NotAMockException.class) public void shouldValidateMockWhenVerifyingZeroInteractions(){
    Mockito.verifyZeroInteractions("notMock");
  }
  @SuppressWarnings({"CheckReturnValue","MockitoUsage"}) @Test(expected=NotAMockException.class) public void shouldValidateMockWhenCreatingInOrderObject(){
    Mockito.inOrder("notMock");
  }
  @Test public void shouldStartingMockSettingsContainDefaultBehavior(){
    MockSettingsImpl<?> settings=(MockSettingsImpl<?>)Mockito.withSettings();
    assertThat(Mockito.RETURNS_DEFAULTS).isEqualTo(settings.getDefaultAnswer());
  }
}
