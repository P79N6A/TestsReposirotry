public class MockitoSessionTest extends TestBase {
  private JUnitCore junit=new JUnitCore();
  @Test public void session_without_any_configuration(){
    Result result=junit.run(MockitoSessionTest.SessionWithoutAnyConfiguration.class);
    JUnitResultAssert.assertThat(result).succeeds(1);
  }
  @Test public void session_without_init_mocks_configured(){
    Result result=junit.run(MockitoSessionTest.SessionWithoutInitMocksConfigured.class);
    JUnitResultAssert.assertThat(result).succeeds(1);
  }
  @Test public void session_without_strictness_configured(){
    Result result=junit.run(MockitoSessionTest.SessionWithoutStrictnessConfigured.class);
    JUnitResultAssert.assertThat(result).succeeds(1);
  }
  @Test public void session_with_incorrect_mockito_usage(){
    Result result=junit.run(MockitoSessionTest.SessionWithIncorrectMockitoUsage.class);
    JUnitResultAssert.assertThat(result).fails(1,UnfinishedStubbingException.class);
  }
  @Test public void reports_other_failure_and_incorrect_mockito_usage(){
    Result result=junit.run(MockitoSessionTest.SessionWithTestFailureAndIncorrectMockitoUsage.class);
    JUnitResultAssert.assertThat(result).failsExactly(AssertionError.class,UnfinishedStubbingException.class);
  }
  @Test public void allows_initializing_mocks_manually(){
    Result result=junit.run(MockitoSessionTest.SessionWithManuallyInitializedMock.class);
    JUnitResultAssert.assertThat(result).succeeds(1);
  }
  @Test public void allows_updating_strictness(){
    Result result=junit.run(MockitoSessionTest.SessionWithUpdatedStrictness.class);
    JUnitResultAssert.assertThat(result).succeeds(1);
  }
  @Test public void allows_overriding_failure(){
    Result result=junit.run(MockitoSessionTest.SessionWithOverriddenFailure.class);
    JUnitResultAssert.assertThat(result).isSuccessful();
    resetState();
  }
  @Test public void cleans_up_state_when_init_fails(){
    Result result=junit.run(MockitoSessionTest.SessionWithInitMocksFailure.class);
    JUnitResultAssert.assertThat(result).fails(2,InjectMocksException.class);
  }
public static class SessionWithoutAnyConfiguration {
    @Mock IMethods mock;
    MockitoSession mockito=Mockito.mockitoSession().startMocking();
    @After public void after(){
      mockito.finishMocking();
    }
    @Test public void some_test(){
      assertNull(mock);
    }
  }
public static class SessionWithoutInitMocksConfigured {
    @Mock IMethods mock;
    MockitoSession mockito=Mockito.mockitoSession().strictness(Strictness.LENIENT).startMocking();
    @After public void after(){
      mockito.finishMocking();
    }
    @Test public void some_test(){
      assertNull(mock);
    }
  }
public static class SessionWithoutStrictnessConfigured {
    @Mock IMethods mock;
    MockitoSession mockito=Mockito.mockitoSession().initMocks(this).startMocking();
    @After public void after(){
      mockito.finishMocking();
    }
    @Test public void some_test(){
      assertNotNull(mock);
    }
  }
public static class SessionWithIncorrectMockitoUsage {
    @Mock IMethods mock;
    MockitoSession mockito=Mockito.mockitoSession().initMocks(this).startMocking();
    @After public void after(){
      mockito.finishMocking();
    }
    @SuppressWarnings({"MockitoUsage","CheckReturnValue"}) @Test public void unfinished_stubbing(){
      when(mock.simpleMethod());
    }
  }
public static class SessionWithTestFailureAndIncorrectMockitoUsage {
    @Mock IMethods mock;
    MockitoSession mockito=Mockito.mockitoSession().initMocks(this).startMocking();
    @After public void after(){
      mockito.finishMocking();
    }
    @SuppressWarnings({"MockitoUsage","CheckReturnValue"}) @Test public void unfinished_stubbing_with_other_failure(){
      when(mock.simpleMethod());
      assertTrue(false);
    }
  }
public static class SessionWithManuallyInitializedMock {
    @Mock IMethods mock;
    IMethods mock2=Mockito.mock(IMethods.class,"manual mock");
    MockitoSession mockito=Mockito.mockitoSession().initMocks(this).startMocking();
    @After public void after(){
      mockito.finishMocking();
    }
    @Test public void manual_mock_preserves_its_settings(){
      assertEquals("mock",mockingDetails(mock).getMockCreationSettings().getMockName().toString());
      assertEquals("manual mock",mockingDetails(mock2).getMockCreationSettings().getMockName().toString());
    }
  }
public static class SessionWithUpdatedStrictness {
    @Mock IMethods mock;
    MockitoSession mockito=Mockito.mockitoSession().initMocks(this).strictness(Strictness.STRICT_STUBS).startMocking();
    @After public void after(){
      mockito.finishMocking();
    }
    @Test public void manual_mock_preserves_its_settings(){
      when(mock.simpleMethod(1)).thenReturn("foo");
      mockito.setStrictness(Strictness.LENIENT);
      mock.simpleMethod(2);
    }
  }
public static class SessionWithOverriddenFailure {
    @Mock IMethods mock;
    MockitoSession mockito=Mockito.mockitoSession().initMocks(this).startMocking();
    @After public void after(){
      mockito.finishMocking(new RuntimeException("Boo!"));
    }
    @SuppressWarnings({"MockitoUsage","CheckReturnValue"}) @Test public void invalid_mockito_usage(){
      verify(mock);
    }
  }
public static class SessionWithInitMocksFailure {
    @InjectMocks private ConstructorFail sut;
    MockitoSession mockito;
    @Before public void before(){
      mockito=Mockito.mockitoSession().initMocks(this).startMocking();
    }
    @After public void after(){
      if (mockito != null) {
        mockito.finishMocking();
      }
    }
    @Test public void test1(){
    }
    @Test public void test2(){
    }
static class ConstructorFail {
      ConstructorFail(){
        throw new RuntimeException("Boo!");
      }
    }
  }
}
