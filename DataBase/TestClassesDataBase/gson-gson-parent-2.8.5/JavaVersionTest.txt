/** 
 * Unit and functional tests for  {@link JavaVersion}
 * @author Inderjeet Singh
 */
public class JavaVersionTest {
  @Test public void testGetMajorJavaVersion(){
    JavaVersion.getMajorJavaVersion();
  }
  @Test public void testJava6(){
    assertEquals(6,JavaVersion.getMajorJavaVersion("1.6.0"));
  }
  @Test public void testJava7(){
    assertEquals(7,JavaVersion.getMajorJavaVersion("1.7.0"));
  }
  @Test public void testJava8(){
    assertEquals(8,JavaVersion.getMajorJavaVersion("1.8"));
    assertEquals(8,JavaVersion.getMajorJavaVersion("1.8.0"));
    assertEquals(8,JavaVersion.getMajorJavaVersion("1.8.0_131"));
    assertEquals(8,JavaVersion.getMajorJavaVersion("1.8.0_60-ea"));
    assertEquals(8,JavaVersion.getMajorJavaVersion("1.8.0_111-internal"));
    assertEquals(8,JavaVersion.getMajorJavaVersion("1.8.0-internal"));
    assertEquals(8,JavaVersion.getMajorJavaVersion("1.8.0_131-adoptopenjdk"));
  }
  @Test public void testJava9(){
    assertEquals(9,JavaVersion.getMajorJavaVersion("9.0.4"));
    assertEquals(9,JavaVersion.getMajorJavaVersion("9-Debian"));
    assertEquals(9,JavaVersion.getMajorJavaVersion("9-ea+19"));
    assertEquals(9,JavaVersion.getMajorJavaVersion("9+100"));
    assertEquals(9,JavaVersion.getMajorJavaVersion("9.0.1+20"));
    assertEquals(9,JavaVersion.getMajorJavaVersion("9.1.1+20"));
  }
  @Test public void testJava10(){
    assertEquals(10,JavaVersion.getMajorJavaVersion("10.0.1"));
  }
  @Test public void testUnknownVersionFormat(){
    assertEquals(6,JavaVersion.getMajorJavaVersion("Java9"));
  }
}
