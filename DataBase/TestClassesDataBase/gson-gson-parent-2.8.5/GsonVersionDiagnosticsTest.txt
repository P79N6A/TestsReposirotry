/** 
 * Functional tests to validate printing of Gson version on AssertionErrors
 * @author Inderjeet Singh
 */
public class GsonVersionDiagnosticsTest extends TestCase {
  private static final Pattern GSON_VERSION_PATTERN=Pattern.compile("(\\(GSON \\d\\.\\d\\.\\d)(?:[-.][A-Z]+)?\\)$");
  private Gson gson;
  @Before public void setUp(){
    gson=new GsonBuilder().registerTypeAdapter(TestType.class,new TypeAdapter<TestType>(){
      @Override public void write(      JsonWriter out,      TestType value){
        throw new AssertionError("Expected during serialization");
      }
      @Override public TestType read(      JsonReader in) throws IOException {
        throw new AssertionError("Expected during deserialization");
      }
    }
).create();
  }
  @Test public void testVersionPattern(){
    assertTrue(GSON_VERSION_PATTERN.matcher("(GSON 2.8.5)").matches());
    assertTrue(GSON_VERSION_PATTERN.matcher("(GSON 2.8.5-SNAPSHOT)").matches());
  }
  @Test public void testAssertionErrorInSerializationPrintsVersion(){
    try {
      gson.toJson(new TestType());
      fail();
    }
 catch (    AssertionError expected) {
      ensureAssertionErrorPrintsGsonVersion(expected);
    }
  }
  @Test public void testAssertionErrorInDeserializationPrintsVersion(){
    try {
      gson.fromJson("{'a':'abc'}",TestType.class);
      fail();
    }
 catch (    AssertionError expected) {
      ensureAssertionErrorPrintsGsonVersion(expected);
    }
  }
  private void ensureAssertionErrorPrintsGsonVersion(  AssertionError expected){
    String msg=expected.getMessage();
    int start=msg.indexOf("(GSON");
    assertTrue(start > 0);
    int end=msg.indexOf("):") + 1;
    assertTrue(end > 0 && end > start + 6);
    String version=msg.substring(start,end);
    assertTrue(GSON_VERSION_PATTERN.matcher(version).matches());
  }
private static final class TestType {
    @SuppressWarnings("unused") String a;
  }
}
