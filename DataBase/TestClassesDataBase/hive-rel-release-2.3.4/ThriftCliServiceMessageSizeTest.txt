public class ThriftCliServiceMessageSizeTest {
  protected static int port;
  protected static String host="localhost";
  protected static HiveServer2 hiveServer2;
  protected static ThriftCLIServiceClient client;
  protected static HiveConf hiveConf;
  protected static String USERNAME="anonymous";
  protected static String PASSWORD="anonymous";
  /** 
 * @throws java.lang.Exception
 */
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    port=MetaStoreUtils.findFreePort();
    hiveServer2=new HiveServer2();
    hiveConf=new HiveConf();
  }
  /** 
 * @throws java.lang.Exception
 */
  @AfterClass public static void tearDownAfterClass() throws Exception {
  }
  protected static void startHiveServer2WithConf(  HiveServer2 hiveServer2,  HiveConf hiveConf) throws Exception {
    hiveServer2.init(hiveConf);
    try {
      hiveServer2.start();
    }
 catch (    Throwable t) {
      t.printStackTrace();
      fail();
    }
    Thread.sleep(2000);
    System.out.println("HiveServer2 started on port " + port);
  }
  protected static void stopHiveServer2(  HiveServer2 hiveServer2) throws Exception {
    if (hiveServer2 != null) {
      hiveServer2.stop();
    }
  }
  /** 
 * @throws java.lang.Exception
 */
  @Before public void setUp() throws Exception {
  }
  /** 
 * @throws java.lang.Exception
 */
  @After public void tearDown() throws Exception {
  }
  @Test public void testMessageSize() throws Exception {
    String transportMode="binary";
    hiveConf.setBoolVar(ConfVars.HIVE_SERVER2_ENABLE_DOAS,false);
    hiveConf.setVar(ConfVars.HIVE_SERVER2_THRIFT_BIND_HOST,host);
    hiveConf.setIntVar(ConfVars.HIVE_SERVER2_THRIFT_PORT,port);
    hiveConf.setVar(ConfVars.HIVE_SERVER2_AUTHENTICATION,AuthTypes.NONE.toString());
    hiveConf.setVar(ConfVars.HIVE_SERVER2_TRANSPORT_MODE,transportMode);
    HiveServer2 hiveServer2=new HiveServer2();
    String url="jdbc:hive2://localhost:" + port + "/default";
    Class.forName("org.apache.hive.jdbc.HiveDriver");
    try {
      hiveConf.setIntVar(ConfVars.HIVE_SERVER2_THRIFT_MAX_MESSAGE_SIZE,100 * 1024 * 1024);
      startHiveServer2WithConf(hiveServer2,hiveConf);
      System.out.println("Started Thrift CLI service with message size limit " + hiveConf.getIntVar(ConfVars.HIVE_SERVER2_THRIFT_MAX_MESSAGE_SIZE));
      Connection connection=DriverManager.getConnection(url,"hiveuser","hive");
      Statement stmt=connection.createStatement();
      assertNotNull("Statement is null",stmt);
      stmt.execute("set hive.support.concurrency = false");
      connection.close();
      stopHiveServer2(hiveServer2);
      hiveConf.setIntVar(ConfVars.HIVE_SERVER2_THRIFT_MAX_MESSAGE_SIZE,1);
      hiveServer2=new HiveServer2();
      startHiveServer2WithConf(hiveServer2,hiveConf);
      System.out.println("Started Thrift CLI service with message size limit " + hiveConf.getIntVar(ConfVars.HIVE_SERVER2_THRIFT_MAX_MESSAGE_SIZE));
      Exception caughtException=null;
      try {
        connection=DriverManager.getConnection(url,"hiveuser","hive");
      }
 catch (      Exception err) {
        caughtException=err;
      }
      assertNotNull(caughtException);
    }
  finally {
      stopHiveServer2(hiveServer2);
      hiveServer2=null;
    }
  }
}
