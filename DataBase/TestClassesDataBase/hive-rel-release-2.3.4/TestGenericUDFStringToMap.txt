public class TestGenericUDFStringToMap {
  @Test public void testStringToMapWithCustomDelimiters() throws HiveException {
    GenericUDFStringToMap udf=new GenericUDFStringToMap();
    initGenericUDF(udf);
    Map<String,String> expResult=new LinkedHashMap<String,String>();
    expResult.put("key1","value1");
    expResult.put("key2","value2");
    expResult.put("key3","value3");
    runAndVerify("key1=value1;key2=value2;key3=value3",";","=",expResult,udf);
  }
  @Test public void testStringToMapWithDefaultDelimiters() throws HiveException {
    GenericUDFStringToMap udf=new GenericUDFStringToMap();
    initGenericUDFWithNoDelimiters(udf);
    Map<String,String> expResult=new LinkedHashMap<String,String>();
    expResult.put("key1","value1");
    expResult.put("key2","value2");
    expResult.put("key3","value3");
    runAndVerify("key1:value1,key2:value2,key3:value3",expResult,udf);
  }
  @Test public void testStringToMapWithNullDelimiters() throws HiveException {
    GenericUDFStringToMap udf=new GenericUDFStringToMap();
    initGenericUDF(udf);
    Map<String,String> expResult=new LinkedHashMap<String,String>();
    expResult.put("key1","value1");
    expResult.put("key2","value2");
    expResult.put("key3","value3");
    runAndVerify("key1:value1,key2:value2,key3:value3",null,null,expResult,udf);
  }
  @Test public void testStringToMapWithNullText() throws HiveException {
    GenericUDFStringToMap udf=new GenericUDFStringToMap();
    initGenericUDFWithNoDelimiters(udf);
    Map<String,String> expResult=new LinkedHashMap<String,String>();
    runAndVerify(null,expResult,udf);
  }
  @Test public void testStringToMapWithEmptyText() throws HiveException {
    GenericUDFStringToMap udf=new GenericUDFStringToMap();
    initGenericUDFWithNoDelimiters(udf);
    Map<String,String> expResult=new LinkedHashMap<String,String>();
    expResult.put("",null);
    runAndVerify("",expResult,udf);
  }
  @Test public void testStringToMapNoKey() throws HiveException {
    GenericUDFStringToMap udf=new GenericUDFStringToMap();
    initGenericUDFWithNoDelimiters(udf);
    Map<String,String> expResult=new LinkedHashMap<String,String>();
    expResult.put("","value");
    runAndVerify(":value",expResult,udf);
  }
  @Test public void testStringToMapNoValue() throws HiveException {
    GenericUDFStringToMap udf=new GenericUDFStringToMap();
    initGenericUDFWithNoDelimiters(udf);
    Map<String,String> expResult=new LinkedHashMap<String,String>();
    expResult.put("key","");
    runAndVerify("key:",expResult,udf);
  }
  @Test public void testStringToMapNotMatchingDelimiter() throws HiveException {
    GenericUDFStringToMap udf=new GenericUDFStringToMap();
    initGenericUDFWithNoDelimiters(udf);
    Map<String,String> expResult=new LinkedHashMap<String,String>();
    expResult.put("key=value",null);
    runAndVerify("key=value",expResult,udf);
  }
  private void initGenericUDF(  GenericUDFStringToMap udf) throws UDFArgumentException {
    ObjectInspector valueOI0=PrimitiveObjectInspectorFactory.javaStringObjectInspector;
    ObjectInspector valueOI1=PrimitiveObjectInspectorFactory.javaStringObjectInspector;
    ObjectInspector valueOI2=PrimitiveObjectInspectorFactory.javaStringObjectInspector;
    ObjectInspector[] arguments={valueOI0,valueOI1,valueOI2};
    udf.initialize(arguments);
  }
  private void initGenericUDFWithNoDelimiters(  GenericUDFStringToMap udf) throws UDFArgumentException {
    ObjectInspector valueOI0=PrimitiveObjectInspectorFactory.javaStringObjectInspector;
    ObjectInspector[] arguments={valueOI0};
    udf.initialize(arguments);
  }
  private void runAndVerify(  String text,  String delimiter1,  String delimiter2,  Map<String,String> expResult,  GenericUDF udf) throws HiveException {
    DeferredObject valueObj0=new DeferredJavaObject(text);
    DeferredObject valueObj1=new DeferredJavaObject(delimiter1);
    DeferredObject valueObj2=new DeferredJavaObject(delimiter2);
    DeferredObject[] args={valueObj0,valueObj1,valueObj2};
    @SuppressWarnings("unchecked") LinkedHashMap<Object,Object> output=(LinkedHashMap<Object,Object>)udf.evaluate(args);
    assertTrue("str_to_map() test",expResult.equals(output));
  }
  private void runAndVerify(  String text,  Map<String,String> expResult,  GenericUDF udf) throws HiveException {
    DeferredObject valueObj0=new DeferredJavaObject(text);
    DeferredObject[] args={valueObj0};
    @SuppressWarnings("unchecked") LinkedHashMap<Object,Object> output=(LinkedHashMap<Object,Object>)udf.evaluate(args);
    assertTrue("str_to_map() test",expResult.equals(output));
  }
}
