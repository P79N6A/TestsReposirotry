/** 
 * Test utilities for selectively disabling specific test methods for given storage formats.
 */
public class TestUtil {
  private static final Map<String,Set<String>> SAMPLE_DISABLED_TESTS_MAP=new HashMap<String,Set<String>>(){
{
      put("test",new HashSet<String>(){
{
          add("testShouldSkip");
        }
      }
);
    }
  }
;
  /** 
 * Determine whether the caller test method is in a set of disabled test methods for a given storage format.
 * @param storageFormat The name of the storage format used in a STORED AS clause.
 * @param disabledTestsMap Map of storage format name to set of test method names that indicatewhich test methods should not run against the given storage format.
 * @return True if the caller test method should be skipped for the given storage format.
 */
  public static boolean shouldSkip(  String storageFormat,  Map<String,Set<String>> disabledTestsMap){
    final StackTraceElement[] elements=Thread.currentThread().getStackTrace();
    String methodName=elements[2].getMethodName();
    if (!disabledTestsMap.containsKey(storageFormat)) {
      return false;
    }
    Set<String> disabledMethods=disabledTestsMap.get(storageFormat);
    return disabledMethods.contains(methodName);
  }
  @Test public void testShouldSkip(){
    assertTrue(TestUtil.shouldSkip("test",SAMPLE_DISABLED_TESTS_MAP));
  }
  @Test public void testShouldNotSkip(){
    assertFalse(TestUtil.shouldSkip("test",SAMPLE_DISABLED_TESTS_MAP));
    assertFalse(TestUtil.shouldSkip("foo",SAMPLE_DISABLED_TESTS_MAP));
  }
}
