public class TestNoSaslAuth {
  private static MiniHS2 miniHS2=null;
  private static String sessionUserName="";
public static class NoSaslSessionHook implements HiveSessionHook {
    public static boolean checkUser=false;
    @Override public void run(    HiveSessionHookContext sessionHookContext) throws HiveSQLException {
      if (checkUser) {
        Assert.assertEquals(sessionHookContext.getSessionUser(),sessionUserName);
      }
    }
  }
  private Connection hs2Conn=null;
  @BeforeClass public static void beforeTest() throws Exception {
    Class.forName(MiniHS2.getJdbcDriverName());
    HiveConf conf=new HiveConf();
    conf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
    conf.setBoolVar(ConfVars.HIVE_SERVER2_ENABLE_DOAS,false);
    conf.setVar(ConfVars.HIVE_SERVER2_SESSION_HOOK,NoSaslSessionHook.class.getName());
    conf.setVar(ConfVars.HIVE_SERVER2_AUTHENTICATION,"NOSASL");
    miniHS2=new MiniHS2(conf);
    Map<String,String> overlayProps=new HashMap<String,String>();
    miniHS2.start(overlayProps);
  }
  @Before public void setUp() throws Exception {
    NoSaslSessionHook.checkUser=true;
  }
  @After public void tearDown() throws Exception {
    hs2Conn.close();
    NoSaslSessionHook.checkUser=false;
  }
  @AfterClass public static void afterTest() throws Exception {
    if (miniHS2.isStarted())     miniHS2.stop();
  }
  /** 
 * Initiate a non-sasl connection. The session hook will verfiy the user name set correctly
 * @throws Exception
 */
  @Test public void testConnection() throws Exception {
    sessionUserName="user1";
    hs2Conn=DriverManager.getConnection(miniHS2.getJdbcURL() + ";auth=noSasl",sessionUserName,"foo");
  }
}
