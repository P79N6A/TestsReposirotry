public class TestVectorUDFAdaptor {
  static byte[] blue=null;
  static byte[] red=null;
static {
    try {
      blue="blue".getBytes("UTF-8");
      red="red".getBytes("UTF-8");
    }
 catch (    Exception e) {
      ;
    }
  }
  @Test public void testLongUDF(){
    ExprNodeGenericFuncDesc funcDesc;
    TypeInfo typeInfo=TypeInfoFactory.longTypeInfo;
    GenericUDFBridge genericUDFBridge=new GenericUDFBridge("longudf",false,LongUDF.class.getName());
    List<ExprNodeDesc> children=new ArrayList<ExprNodeDesc>();
    ExprNodeColumnDesc colDesc=new ExprNodeColumnDesc(typeInfo,"col0","tablename",false);
    children.add(colDesc);
    VectorUDFArgDesc[] argDescs=new VectorUDFArgDesc[1];
    argDescs[0]=new VectorUDFArgDesc();
    argDescs[0].setVariable(0);
    funcDesc=new ExprNodeGenericFuncDesc(typeInfo,genericUDFBridge,genericUDFBridge.getUdfName(),children);
    VectorUDFAdaptor vudf=null;
    try {
      vudf=new VectorUDFAdaptor(funcDesc,1,"Long",argDescs);
    }
 catch (    HiveException e) {
      assertTrue(false);
    }
    VectorizedRowBatch b=getBatchLongInLongOut();
    vudf.evaluate(b);
    LongColumnVector out=(LongColumnVector)b.cols[1];
    assertEquals(1000,out.vector[0]);
    assertEquals(1001,out.vector[1]);
    assertEquals(1002,out.vector[2]);
    assertTrue(out.noNulls);
    assertFalse(out.isRepeating);
    b=getBatchLongInLongOut();
    out=(LongColumnVector)b.cols[1];
    b.cols[0].noNulls=false;
    vudf.evaluate(b);
    assertFalse(out.noNulls);
    assertEquals(1000,out.vector[0]);
    assertEquals(1001,out.vector[1]);
    assertTrue(out.isNull[2]);
    assertFalse(out.isRepeating);
    b=getBatchLongInLongOut();
    out=(LongColumnVector)b.cols[1];
    b.cols[0].isRepeating=true;
    vudf.evaluate(b);
    assertTrue(b.cols[1].isRepeating && out.vector[0] == 1000 || !b.cols[1].isRepeating && out.vector[2] == 1000);
    assertEquals(3,b.size);
  }
  @Test public void testMultiArgumentUDF(){
    ExprNodeGenericFuncDesc funcDesc;
    TypeInfo typeInfoStr=TypeInfoFactory.stringTypeInfo;
    TypeInfo typeInfoLong=TypeInfoFactory.longTypeInfo;
    TypeInfo typeInfoDbl=TypeInfoFactory.doubleTypeInfo;
    GenericUDFBridge genericUDFBridge=new GenericUDFBridge("testudf",false,ConcatTextLongDoubleUDF.class.getName());
    List<ExprNodeDesc> children=new ArrayList<ExprNodeDesc>();
    children.add(new ExprNodeColumnDesc(typeInfoStr,"col0","tablename",false));
    children.add(new ExprNodeColumnDesc(typeInfoLong,"col1","tablename",false));
    children.add(new ExprNodeColumnDesc(typeInfoDbl,"col2","tablename",false));
    VectorUDFArgDesc[] argDescs=new VectorUDFArgDesc[3];
    for (int i=0; i < 3; i++) {
      argDescs[i]=new VectorUDFArgDesc();
      argDescs[i].setVariable(i);
    }
    funcDesc=new ExprNodeGenericFuncDesc(typeInfoStr,genericUDFBridge,genericUDFBridge.getUdfName(),children);
    VectorUDFAdaptor vudf=null;
    try {
      vudf=new VectorUDFAdaptor(funcDesc,3,"String",argDescs);
    }
 catch (    HiveException e) {
      assertTrue(false);
      throw new RuntimeException(e);
    }
    VectorizedRowBatch b=getBatchStrDblLongWithStrOut();
    vudf.evaluate(b);
    byte[] result=null;
    byte[] result2=null;
    try {
      result="red:1:1.0".getBytes("UTF-8");
      result2="blue:0:0.0".getBytes("UTF-8");
    }
 catch (    Exception e) {
      ;
    }
    BytesColumnVector out=(BytesColumnVector)b.cols[3];
    int cmp=StringExpr.compare(result,0,result.length,out.vector[1],out.start[1],out.length[1]);
    assertEquals(0,cmp);
    assertTrue(out.noNulls);
    b=getBatchStrDblLongWithStrOut();
    b.cols[1].noNulls=false;
    vudf.evaluate(b);
    out=(BytesColumnVector)b.cols[3];
    assertFalse(out.noNulls);
    assertTrue(out.isNull[1]);
    b=getBatchStrDblLongWithStrOut();
    b.cols[0].isRepeating=true;
    b.cols[1].isRepeating=true;
    b.cols[2].isRepeating=true;
    vudf.evaluate(b);
    out=(BytesColumnVector)b.cols[3];
    assertTrue(out.isRepeating);
    cmp=StringExpr.compare(result2,0,result2.length,out.vector[0],out.start[0],out.length[0]);
    assertEquals(0,cmp);
    assertTrue(out.noNulls);
  }
  private VectorizedRowBatch getBatchLongInLongOut(){
    VectorizedRowBatch b=new VectorizedRowBatch(2);
    LongColumnVector in=new LongColumnVector();
    LongColumnVector out=new LongColumnVector();
    b.cols[0]=in;
    b.cols[1]=out;
    in.vector[0]=0;
    in.vector[1]=1;
    in.vector[2]=2;
    in.isNull[2]=true;
    in.noNulls=true;
    b.size=3;
    return b;
  }
  private VectorizedRowBatch getBatchStrDblLongWithStrOut(){
    VectorizedRowBatch b=new VectorizedRowBatch(4);
    BytesColumnVector strCol=new BytesColumnVector();
    LongColumnVector longCol=new LongColumnVector();
    DoubleColumnVector dblCol=new DoubleColumnVector();
    BytesColumnVector outCol=new BytesColumnVector();
    b.cols[0]=strCol;
    b.cols[1]=longCol;
    b.cols[2]=dblCol;
    b.cols[3]=outCol;
    strCol.initBuffer();
    strCol.setVal(0,blue,0,blue.length);
    strCol.setVal(1,red,0,red.length);
    longCol.vector[0]=0;
    longCol.vector[1]=1;
    dblCol.vector[0]=0.0;
    dblCol.vector[1]=1.0;
    longCol.isNull[1]=true;
    longCol.noNulls=true;
    strCol.noNulls=true;
    dblCol.noNulls=true;
    outCol.initBuffer();
    b.size=2;
    return b;
  }
  @Test public void testGenericUDF(){
    ExprNodeGenericFuncDesc funcDesc;
    GenericUDF genericUDF=new GenericUDFIsNull();
    TypeInfo typeInfoStr=TypeInfoFactory.stringTypeInfo;
    List<ExprNodeDesc> children=new ArrayList<ExprNodeDesc>();
    children.add(new ExprNodeColumnDesc(typeInfoStr,"col0","tablename",false));
    children.add(new ExprNodeConstantDesc(typeInfoStr,"UNKNOWN"));
    VectorUDFArgDesc[] argDescs=new VectorUDFArgDesc[2];
    for (int i=0; i < 2; i++) {
      argDescs[i]=new VectorUDFArgDesc();
    }
    argDescs[0].setVariable(0);
    argDescs[1].setConstant((ExprNodeConstantDesc)children.get(1));
    funcDesc=new ExprNodeGenericFuncDesc(typeInfoStr,genericUDF,"myisnull",children);
    VectorUDFAdaptor vudf=null;
    try {
      vudf=new VectorUDFAdaptor(funcDesc,3,"String",argDescs);
    }
 catch (    HiveException e) {
      assertTrue(false);
    }
    VectorizedRowBatch b;
    byte[] red=null;
    byte[] unknown=null;
    try {
      red="red".getBytes("UTF-8");
      unknown="UNKNOWN".getBytes("UTF-8");
    }
 catch (    Exception e) {
      ;
    }
    BytesColumnVector out;
    b=getBatchStrDblLongWithStrOut();
    b.cols[0].noNulls=false;
    b.cols[0].isNull[0]=true;
    vudf.evaluate(b);
    out=(BytesColumnVector)b.cols[3];
    int cmp=StringExpr.compare(red,0,red.length,out.vector[1],out.start[1],out.length[1]);
    assertEquals(0,cmp);
    cmp=StringExpr.compare(unknown,0,unknown.length,out.vector[0],out.start[0],out.length[0]);
    assertEquals(0,cmp);
    assertTrue(out.noNulls || !out.isNull[0]);
  }
}
