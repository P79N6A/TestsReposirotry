public class TestSetProcessor {
  private static final String TEST_SYSTEM_PROPERTY="testSystemPropertyPassword";
  private static final String TEST_SYSTEM_PROPERTY_VALUE="testSystemPropertyValue";
  private static final String TEST_ENV_VAR_PASSWORD_VALUE="testEnvPasswordValue";
  private static final String TEST_ENV_VAR_PASSWORD="testEnvPassword";
  private ByteArrayOutputStream baos;
  private static SessionState state;
  private SetProcessor processor;
  @BeforeClass public static void before() throws Exception {
    Map<String,String> env=new HashMap<>();
    env.put(TEST_ENV_VAR_PASSWORD,TEST_ENV_VAR_PASSWORD_VALUE);
    setEnv(env);
    System.setProperty(TEST_SYSTEM_PROPERTY,TEST_SYSTEM_PROPERTY_VALUE);
    HiveConf conf=new HiveConf();
    SessionState.start(conf);
    state=SessionState.get();
  }
  @Before public void setupTest(){
    baos=new ByteArrayOutputStream();
    state.out=new PrintStream(baos);
    processor=new SetProcessor();
  }
  @Test public void testHiddenConfig() throws Exception {
    runSetProcessor("");
    String output=baos.toString();
    Assert.assertFalse(output.contains(HiveConf.ConfVars.METASTOREPWD.varname + "="));
    Assert.assertFalse(output.contains(HiveConf.ConfVars.HIVE_SERVER2_SSL_KEYSTORE_PASSWORD.varname + "="));
  }
  @Test public void testHiddenConfigSetVarName(){
    runSetProcessor(HiveConf.ConfVars.METASTOREPWD.varname);
    String output=baos.toString();
    Assert.assertTrue(output.contains("hidden"));
  }
  @Test public void testEnvPasswordMask() throws Exception {
    runSetProcessor("");
    String output=baos.toString();
    Assert.assertFalse(output.contains(TEST_ENV_VAR_PASSWORD + "="));
  }
  @Test public void testEnvPasswordMaskIndividual() throws Exception {
    runSetProcessor(SystemVariables.ENV_PREFIX + TEST_ENV_VAR_PASSWORD);
    String output=baos.toString();
    Assert.assertFalse(output.contains(TEST_ENV_VAR_PASSWORD_VALUE));
    Assert.assertTrue(output.contains("hidden"));
  }
  @Test public void testSystemProperty() throws Exception {
    runSetProcessor("");
    String output=baos.toString();
    Assert.assertFalse(output.contains(TEST_SYSTEM_PROPERTY + "="));
  }
  @Test public void testSystemPropertyIndividual() throws Exception {
    runSetProcessor(SystemVariables.SYSTEM_PREFIX + TEST_SYSTEM_PROPERTY);
    String output=baos.toString();
    Assert.assertFalse(output.contains(TEST_SYSTEM_PROPERTY_VALUE));
    Assert.assertTrue(output.contains("hidden"));
  }
  private void runSetProcessor(  String command){
    processor.run(command);
    state.out.flush();
  }
  private final static void setEnv(  Map<String,String> newenv) throws Exception {
    Class[] classes=Collections.class.getDeclaredClasses();
    Map<String,String> env=System.getenv();
    for (    Class cl : classes) {
      if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) {
        Field field=cl.getDeclaredField("m");
        field.setAccessible(true);
        Object obj=field.get(env);
        Map<String,String> map=(Map<String,String>)obj;
        map.clear();
        map.putAll(newenv);
      }
    }
  }
}
