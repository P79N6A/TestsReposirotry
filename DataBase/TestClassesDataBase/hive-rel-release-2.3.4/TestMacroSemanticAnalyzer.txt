public class TestMacroSemanticAnalyzer {
  private MacroSemanticAnalyzer analyzer;
  private QueryState queryState;
  private HiveConf conf;
  private Context context;
  @Before public void setup() throws Exception {
    queryState=new QueryState(null);
    conf=queryState.getConf();
    SessionState.start(conf);
    context=new Context(conf);
    analyzer=new MacroSemanticAnalyzer(queryState);
  }
  private ASTNode parse(  String command) throws Exception {
    return ParseUtils.parse(command);
  }
  private void analyze(  ASTNode ast) throws Exception {
    analyzer.analyze(ast,context);
    List<Task<? extends Serializable>> rootTasks=analyzer.getRootTasks();
    Assert.assertEquals(1,rootTasks.size());
    for (    Task<? extends Serializable> task : rootTasks) {
      Assert.assertEquals(0,task.executeTask());
    }
  }
  @Test public void testDropMacroDoesNotExist() throws Exception {
    analyze(parse("DROP TEMPORARY MACRO SOME_MACRO"));
  }
  @Test public void testDropMacroExistsDoNotIgnoreErrors() throws Exception {
    conf.setBoolVar(ConfVars.DROPIGNORESNONEXISTENT,false);
    FunctionRegistry.registerTemporaryUDF("SOME_MACRO",GenericUDFMacro.class);
    analyze(parse("DROP TEMPORARY MACRO SOME_MACRO"));
  }
  @Test public void testDropMacro() throws Exception {
    FunctionRegistry.registerTemporaryUDF("SOME_MACRO",GenericUDFMacro.class);
    analyze(parse("DROP TEMPORARY MACRO SOME_MACRO"));
  }
  @Test(expected=SemanticException.class) public void testDropMacroNonExistent() throws Exception {
    conf.setBoolVar(ConfVars.DROPIGNORESNONEXISTENT,false);
    analyze(parse("DROP TEMPORARY MACRO SOME_MACRO"));
  }
  @Test public void testDropMacroNonExistentWithIfExists() throws Exception {
    analyze(parse("DROP TEMPORARY MACRO IF EXISTS SOME_MACRO"));
  }
  @Test public void testDropMacroNonExistentWithIfExistsDoNotIgnoreNonExistent() throws Exception {
    conf.setBoolVar(ConfVars.DROPIGNORESNONEXISTENT,false);
    analyze(parse("DROP TEMPORARY MACRO IF EXISTS SOME_MACRO"));
  }
  @Test public void testZeroInputParamters() throws Exception {
    analyze(parse("CREATE TEMPORARY MACRO FIXED_NUMBER() 1"));
  }
  @Test public void testOneInputParamters() throws Exception {
    analyze(parse("CREATE TEMPORARY MACRO SIGMOID (x DOUBLE) 1.0 / (1.0 + EXP(-x))"));
  }
  @Test public void testTwoInputParamters() throws Exception {
    analyze(parse("CREATE TEMPORARY MACRO DUMB_ADD (x INT, y INT) x + y"));
  }
  @Test public void testThreeInputParamters() throws Exception {
    analyze(parse("CREATE TEMPORARY MACRO DUMB_ADD (x INT, y INT, z INT) x + y + z"));
  }
  @Test(expected=ParseException.class) public void testCannotUseReservedWordAsName() throws Exception {
    parse("CREATE TEMPORARY MACRO DOUBLE (x DOUBLE) 1.0 / (1.0 + EXP(-x))");
  }
  @Test(expected=ParseException.class) public void testNoBody() throws Exception {
    parse("CREATE TEMPORARY MACRO DUMB_MACRO()");
  }
  @Test(expected=SemanticException.class) public void testUnknownInputParameter() throws Exception {
    analyze(parse("CREATE TEMPORARY MACRO BAD_MACRO (x INT, y INT) x + y + z"));
  }
  @Test(expected=SemanticException.class) public void testOneUnusedParameterName() throws Exception {
    analyze(parse("CREATE TEMPORARY MACRO BAD_MACRO (x INT, y INT) x"));
  }
  @Test(expected=SemanticException.class) public void testTwoUnusedParameterNames() throws Exception {
    analyze(parse("CREATE TEMPORARY MACRO BAD_MACRO (x INT, y INT, z INT) x"));
  }
  @Test(expected=SemanticException.class) public void testTwoDuplicateParameterNames() throws Exception {
    analyze(parse("CREATE TEMPORARY MACRO BAD_MACRO (x INT, x INT) x + x"));
  }
  @Test(expected=SemanticException.class) public void testThreeDuplicateParameters() throws Exception {
    analyze(parse("CREATE TEMPORARY MACRO BAD_MACRO (x INT, x INT, x INT) x + x + x"));
  }
}
