public class TestBlockedUdf {
  @Before public void setUp() throws Exception {
  }
  @After public void tearDown() throws Exception {
    FunctionRegistry.setupPermissionsForBuiltinUDFs("","");
  }
  /** 
 * Verify that UDF in the whitelist can be access
 * @throws Exception
 */
  @Test public void testDefaultWhiteList() throws Exception {
    assertEquals("",new HiveConf().getVar(ConfVars.HIVE_SERVER2_BUILTIN_UDF_WHITELIST));
    assertEquals("",new HiveConf().getVar(ConfVars.HIVE_SERVER2_BUILTIN_UDF_BLACKLIST));
    FunctionRegistry.setupPermissionsForBuiltinUDFs("","");
    assertEquals("substr",FunctionRegistry.getFunctionInfo("substr").getDisplayName());
  }
  /** 
 * Verify that UDF in the whitelist can be access
 * @throws Exception
 */
  @Test public void testUdfInWhiteList() throws Exception {
    Set<String> funcNames=FunctionRegistry.getFunctionNames();
    funcNames.remove("reflect");
    FunctionRegistry.setupPermissionsForBuiltinUDFs(funcNames.toString(),"");
    assertEquals("substr",FunctionRegistry.getFunctionInfo("substr").getDisplayName());
  }
  /** 
 * Verify that UDF not in whitelist can't be accessed
 * @throws Exception
 */
  @Test(expected=SemanticException.class) public void testUdfNotInWhiteList() throws Exception {
    Set<String> funcNames=FunctionRegistry.getFunctionNames();
    funcNames.remove("reflect");
    FunctionRegistry.setupPermissionsForBuiltinUDFs(funcNames.toString(),"");
    assertEquals("reflect",FunctionRegistry.getFunctionInfo("reflect").getDisplayName());
  }
  /** 
 * Verify that UDF in blacklist can't be accessed
 * @throws Exception
 */
  @Test(expected=SemanticException.class) public void testUdfInBlackList() throws Exception {
    FunctionRegistry.setupPermissionsForBuiltinUDFs("","reflect");
    assertEquals("reflect",FunctionRegistry.getFunctionInfo("reflect").getDisplayName());
  }
  /** 
 * Verify that UDF in whitelist and blacklist can't be accessed
 * @throws Exception
 */
  @Test(expected=SemanticException.class) public void testUdfInBlackAndWhiteList() throws Exception {
    FunctionRegistry.setupPermissionsForBuiltinUDFs("reflect","reflect");
    assertEquals("reflect",FunctionRegistry.getFunctionInfo("reflect").getDisplayName());
  }
  /** 
 * Test malformatted udf  list setting
 */
  @Test(expected=SemanticException.class) public void testMalformattedListProperty() throws Exception {
    FunctionRegistry.setupPermissionsForBuiltinUDFs(",,"," ,reflect,");
    assertEquals("reflect",FunctionRegistry.getFunctionInfo("reflect").getDisplayName());
  }
}
