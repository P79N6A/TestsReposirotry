static class RegrIntermediate {
  public double sum_x2, sum_y2;
  public double sum_x, sum_y;
  public double sum_xy;
  public double n;
  public void add(  Double y,  Double x){
    if (x == null || y == null) {
      return;
    }
    sum_x2+=x * x;
    sum_y2+=y * y;
    sum_x+=x;
    sum_y+=y;
    sum_xy+=x * y;
    n++;
  }
  public Double intercept(){
    double xx=n * sum_x2 - sum_x * sum_x;
    if (n == 0 || xx == 0.0d)     return null;
    return (sum_y * sum_x2 - sum_x * sum_xy) / xx;
  }
  public Double sxy(){
    if (n == 0)     return null;
    return sum_xy - sum_x * sum_y / n;
  }
  public Double covar_pop(){
    if (n == 0)     return null;
    return (sum_xy - sum_x * sum_y / n) / n;
  }
  public Double covar_samp(){
    if (n <= 1)     return null;
    return (sum_xy - sum_x * sum_y / n) / (n - 1);
  }
  public Double corr(){
    double xx=n * sum_x2 - sum_x * sum_x;
    double yy=n * sum_y2 - sum_y * sum_y;
    if (n == 0 || xx == 0.0d || yy == 0.0d)     return null;
    double c=n * sum_xy - sum_x * sum_y;
    return Math.sqrt(c * c / xx / yy);
  }
  public Double r2(){
    double xx=n * sum_x2 - sum_x * sum_x;
    double yy=n * sum_y2 - sum_y * sum_y;
    if (n == 0 || xx == 0.0d)     return null;
    if (yy == 0.0d)     return 1.0d;
    double c=n * sum_xy - sum_x * sum_y;
    return c * c / xx / yy;
  }
  public Double slope(){
    if (n == 0 || n * sum_x2 == sum_x * sum_x)     return null;
    return (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x * sum_x);
  }
  public Double avgx(){
    if (n == 0)     return null;
    return sum_x / n;
  }
  public Double avgy(){
    if (n == 0)     return null;
    return sum_y / n;
  }
  public Double count(){
    return n;
  }
  public Double sxx(){
    if (n == 0)     return null;
    return sum_x2 - sum_x * sum_x / n;
  }
  public Double syy(){
    if (n == 0)     return null;
    return sum_y2 - sum_y * sum_y / n;
  }
  public static RegrIntermediate computeFor(  List<Object[]> rows){
    RegrIntermediate ri=new RegrIntermediate();
    for (    Object[] objects : rows) {
      ri.add((Double)objects[0],(Double)objects[1]);
    }
    return ri;
  }
}
