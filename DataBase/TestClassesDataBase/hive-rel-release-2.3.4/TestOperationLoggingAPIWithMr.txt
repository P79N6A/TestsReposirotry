/** 
 * TestOperationLoggingAPIWithMr Test the FetchResults of TFetchType.LOG in thrift level in MR mode.
 */
public class TestOperationLoggingAPIWithMr extends OperationLoggingAPITestBase {
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    tableName="testOperationLoggingAPIWithMr_table";
    expectedLogsVerbose=new String[]{"Starting Semantic Analysis"};
    expectedLogsExecution=new String[]{"Compiling command","Completed compiling command","Total jobs","Executing command","Completed executing command","Semantic Analysis Completed","Number of reduce tasks determined at compile time","number of splits","Submitting tokens for job","Ended Job"};
    expectedLogsPerformance=new String[]{"<PERFLOG method=compile from=org.apache.hadoop.hive.ql.Driver>","<PERFLOG method=parse from=org.apache.hadoop.hive.ql.Driver>","<PERFLOG method=Driver.run from=org.apache.hadoop.hive.ql.Driver>","<PERFLOG method=runTasks from=org.apache.hadoop.hive.ql.Driver>"};
    hiveConf=new HiveConf();
    hiveConf.set(ConfVars.HIVE_SERVER2_LOGGING_OPERATION_LEVEL.varname,"verbose");
    miniHS2=new MiniHS2(hiveConf);
    confOverlay=new HashMap<String,String>();
    confOverlay.put(ConfVars.HIVE_SUPPORT_CONCURRENCY.varname,"false");
    miniHS2.start(confOverlay);
  }
  @Test public void testFetchResultsOfLog() throws Exception {
    OperationHandle operationHandle=client.executeStatement(sessionHandle,sql,null);
    RowSet rowSetLog=client.fetchResults(operationHandle,FetchOrientation.FETCH_FIRST,1000,FetchType.LOG);
    verifyFetchedLog(rowSetLog,expectedLogsVerbose);
  }
  @Test public void testFetchResultsOfLogAsync() throws Exception {
    OperationHandle operationHandle=client.executeStatementAsync(sessionHandle,sql,null);
    boolean isQueryRunning=true;
    long pollTimeout=System.currentTimeMillis() + 100000;
    OperationStatus opStatus;
    OperationState state=null;
    RowSet rowSetAccumulated=null;
    StringBuilder logs=new StringBuilder();
    while (isQueryRunning) {
      if (System.currentTimeMillis() > pollTimeout) {
        break;
      }
      opStatus=client.getOperationStatus(operationHandle,false);
      Assert.assertNotNull(opStatus);
      state=opStatus.getState();
      rowSetAccumulated=client.fetchResults(operationHandle,FetchOrientation.FETCH_NEXT,2000,FetchType.LOG);
      for (      Object[] row : rowSetAccumulated) {
        logs.append(row[0]);
      }
      if (state == OperationState.CANCELED || state == OperationState.CLOSED || state == OperationState.FINISHED || state == OperationState.ERROR) {
        isQueryRunning=false;
      }
      Thread.sleep(10);
    }
    Assert.assertEquals("Query should be finished",OperationState.FINISHED,state);
    verifyFetchedLogPost(logs.toString(),expectedLogsVerbose,true);
    RowSet rowSet=client.fetchResults(operationHandle,FetchOrientation.FETCH_FIRST,2000,FetchType.LOG);
    verifyFetchedLog(rowSet,expectedLogsVerbose);
  }
  @Test public void testFetchResultsOfLogWithOrientation() throws Exception {
    OperationHandle operationHandle=client.executeStatement(sessionHandle,sql,null);
    RowSet rowSetLog=client.fetchResults(operationHandle,FetchOrientation.FETCH_FIRST,1000,FetchType.LOG);
    int expectedLogLength=rowSetLog.numRows();
    OperationHandle operationHandleWithOrientation=client.executeStatement(sessionHandle,sql,null);
    RowSet rowSetLogWithOrientation;
    int logLength=0;
    int maxRows=calculateProperMaxRows(expectedLogLength);
    do {
      rowSetLogWithOrientation=client.fetchResults(operationHandleWithOrientation,FetchOrientation.FETCH_NEXT,maxRows,FetchType.LOG);
      logLength+=rowSetLogWithOrientation.numRows();
    }
 while (rowSetLogWithOrientation.numRows() == maxRows);
    Assert.assertEquals(expectedLogLength,logLength);
    rowSetLogWithOrientation=client.fetchResults(operationHandleWithOrientation,FetchOrientation.FETCH_FIRST,1000,FetchType.LOG);
    verifyFetchedLog(rowSetLogWithOrientation,expectedLogsVerbose);
  }
  private int calculateProperMaxRows(  int len){
    if (len < 10) {
      return 1;
    }
 else     if (len < 100) {
      return 10;
    }
 else {
      return 100;
    }
  }
}
