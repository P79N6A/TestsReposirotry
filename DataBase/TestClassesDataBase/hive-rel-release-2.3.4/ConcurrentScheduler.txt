/** 
 * Originally taken from com.google.code.tempusfugit.concurrency.ConcurrentScheduler
 */
public class ConcurrentScheduler implements RunnerScheduler {
  private final ExecutorService executor;
  private final OutputStream outputStream;
  public ConcurrentScheduler(  ExecutorService executor){
    this(executor,System.err);
  }
  public ConcurrentScheduler(  ExecutorService executor,  OutputStream outputStream){
    this.executor=executor;
    this.outputStream=outputStream;
  }
  public void schedule(  Runnable childStatement){
    executor.submit(childStatement);
  }
  public void finished(){
    if (!successful(shutdown(executor).waitingForCompletion(days(365)))) {
      writeln(outputStream,"scheduler shutdown timed out before tests completed, " + "you may have executors hanging around...");
    }
  }
  private Boolean successful(  Boolean completed){
    return TRUE.equals(completed);
  }
  private void writeln(  OutputStream stream,  String string){
    try {
      stream.write(string.getBytes());
      stream.write(System.getProperty("line.separator").getBytes());
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}
