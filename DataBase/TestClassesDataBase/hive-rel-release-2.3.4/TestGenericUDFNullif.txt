public class TestGenericUDFNullif {
  @Test public void testByteTypeEq() throws HiveException {
    GenericUDFNullif udf=new GenericUDFNullif();
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableByteObjectInspector,PrimitiveObjectInspectorFactory.writableByteObjectInspector};
    DeferredObject[] args={new DeferredJavaObject(new ByteWritable((byte)4)),new DeferredJavaObject(new ByteWritable((byte)4))};
    PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
    Assert.assertEquals(TypeInfoFactory.byteTypeInfo,oi.getTypeInfo());
    ByteWritable res=(ByteWritable)udf.evaluate(args);
    Assert.assertEquals(null,res);
  }
  @Test public void testByteNeq() throws HiveException {
    GenericUDFNullif udf=new GenericUDFNullif();
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableByteObjectInspector,PrimitiveObjectInspectorFactory.writableByteObjectInspector};
    DeferredObject[] args={new DeferredJavaObject(new ByteWritable((byte)4)),new DeferredJavaObject(new ByteWritable((byte)1))};
    PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
    Assert.assertEquals(TypeInfoFactory.byteTypeInfo,oi.getTypeInfo());
    ByteWritable res=(ByteWritable)udf.evaluate(args);
    Assert.assertEquals(4,res.get());
  }
  @Test(expected=UDFArgumentException.class) public void testConversionIsPrevented1() throws HiveException {
    GenericUDFNullif udf=new GenericUDFNullif();
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableStringObjectInspector,PrimitiveObjectInspectorFactory.writableByteObjectInspector};
    DeferredObject[] args={new DeferredJavaObject(new Text("4")),new DeferredJavaObject(new ByteWritable((byte)4))};
    PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
  }
  @Test public void testConversionInSameGroup() throws HiveException {
    GenericUDFNullif udf=new GenericUDFNullif();
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableDoubleObjectInspector,PrimitiveObjectInspectorFactory.writableByteObjectInspector};
    DeferredObject[] args={new DeferredJavaObject(new DoubleWritable(4.0)),new DeferredJavaObject(new ByteWritable((byte)4))};
    PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
  }
  @Test(expected=UDFArgumentException.class) public void testConversionIsPrevented2() throws HiveException {
    GenericUDFNullif udf=new GenericUDFNullif();
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableByteObjectInspector,PrimitiveObjectInspectorFactory.writableStringObjectInspector};
    DeferredObject[] args={new DeferredJavaObject(new ByteWritable((byte)4)),new DeferredJavaObject(new Text("4"))};
    PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
  }
  @Test(expected=UDFArgumentException.class) public void testNotSupportedArgumentMix() throws HiveException {
    GenericUDFNullif udf=new GenericUDFNullif();
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableDateObjectInspector,PrimitiveObjectInspectorFactory.writableByteObjectInspector};
    DeferredObject[] args={new DeferredJavaObject(new DateWritable(4)),new DeferredJavaObject(new ByteWritable((byte)4))};
    udf.initialize(inputOIs);
  }
  @Test public void testDateCompareEq() throws HiveException {
    GenericUDFNullif udf=new GenericUDFNullif();
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableDateObjectInspector,PrimitiveObjectInspectorFactory.writableDateObjectInspector};
    DeferredObject[] args={new DeferredJavaObject(new DateWritable(4)),new DeferredJavaObject(new DateWritable(4))};
    PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
    Assert.assertEquals(TypeInfoFactory.dateTypeInfo,oi.getTypeInfo());
    Assert.assertEquals(null,udf.evaluate(args));
  }
}
