public static class RowSetGenerator {
public static interface FieldGenerator {
    public Object apply(    int rowIndex);
  }
public static class ConstantSequence implements FieldGenerator {
    private Object constant;
    public ConstantSequence(    Object constant){
      this.constant=constant;
    }
    @Override public Object apply(    int rowIndex){
      return constant;
    }
  }
public static class DoubleSequence implements FieldGenerator {
    private int offset;
    public DoubleSequence(    int offset){
      this.offset=offset;
    }
    @Override public Object apply(    int rowIndex){
      double d=rowIndex + offset;
      return d;
    }
  }
  public static List<Object[]> generate(  int numRows,  FieldGenerator... generators){
    ArrayList<Object[]> ret=new ArrayList<>(numRows);
    for (int rowIdx=0; rowIdx < numRows; rowIdx++) {
      ArrayList<Object> row=new ArrayList<>();
      for (      FieldGenerator g : generators) {
        row.add(g.apply(rowIdx));
      }
      ret.add(row.toArray());
    }
    return ret;
  }
}
