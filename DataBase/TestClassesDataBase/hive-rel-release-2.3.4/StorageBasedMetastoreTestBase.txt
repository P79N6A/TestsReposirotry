/** 
 * Base class for some storage based authorization test classes
 */
public class StorageBasedMetastoreTestBase {
  protected HiveConf clientHiveConf;
  protected HiveMetaStoreClient msc;
  protected Driver driver;
  protected UserGroupInformation ugi;
  private static int objNum=0;
  protected String getAuthorizationProvider(){
    return StorageBasedAuthorizationProvider.class.getName();
  }
  protected HiveConf createHiveConf() throws Exception {
    HiveConf conf=new HiveConf(this.getClass());
    return conf;
  }
  @Before public void setUp() throws Exception {
    int port=MetaStoreUtils.findFreePort();
    System.setProperty(HiveConf.ConfVars.METASTORE_PRE_EVENT_LISTENERS.varname,AuthorizationPreEventListener.class.getName());
    System.setProperty(HiveConf.ConfVars.HIVE_METASTORE_AUTHORIZATION_MANAGER.varname,getAuthorizationProvider());
    System.setProperty(HiveConf.ConfVars.HIVE_METASTORE_AUTHENTICATOR_MANAGER.varname,InjectableDummyAuthenticator.class.getName());
    clientHiveConf=createHiveConf();
    MetaStoreUtils.startMetaStore(port,ShimLoader.getHadoopThriftAuthBridge(),clientHiveConf);
    clientHiveConf.setBoolVar(HiveConf.ConfVars.HIVE_AUTHORIZATION_ENABLED,false);
    clientHiveConf.setVar(HiveConf.ConfVars.METASTOREURIS,"thrift://localhost:" + port);
    clientHiveConf.setIntVar(HiveConf.ConfVars.METASTORETHRIFTCONNECTIONRETRIES,3);
    clientHiveConf.set(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY.varname,"false");
    clientHiveConf.set(HiveConf.ConfVars.PREEXECHOOKS.varname,"");
    clientHiveConf.set(HiveConf.ConfVars.POSTEXECHOOKS.varname,"");
    ugi=Utils.getUGI();
    SessionState.start(new CliSessionState(clientHiveConf));
    msc=new HiveMetaStoreClient(clientHiveConf);
    driver=new Driver(clientHiveConf);
    setupFakeUser();
    InjectableDummyAuthenticator.injectMode(false);
  }
  protected void setupFakeUser(){
    String fakeUser="mal";
    List<String> fakeGroupNames=new ArrayList<String>();
    fakeGroupNames.add("groupygroup");
    InjectableDummyAuthenticator.injectUserName(fakeUser);
    InjectableDummyAuthenticator.injectGroupNames(fakeGroupNames);
  }
  protected String setupUser(){
    return ugi.getUserName();
  }
  protected String getTestTableName(){
    return this.getClass().getSimpleName() + "tab" + ++objNum;
  }
  protected String getTestDbName(){
    return this.getClass().getSimpleName() + "db" + ++objNum;
  }
  @After public void tearDown() throws Exception {
    InjectableDummyAuthenticator.injectMode(false);
  }
  protected void setPermissions(  String locn,  String permissions) throws Exception {
    FileSystem fs=FileSystem.get(new URI(locn),clientHiveConf);
    fs.setPermission(new Path(locn),FsPermission.valueOf(permissions));
  }
  protected void validateCreateDb(  Database expectedDb,  String dbName){
    Assert.assertEquals(expectedDb.getName().toLowerCase(),dbName.toLowerCase());
  }
}
