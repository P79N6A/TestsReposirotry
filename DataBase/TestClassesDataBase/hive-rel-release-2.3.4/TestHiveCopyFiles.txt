@RunWith(Parameterized.class) public class TestHiveCopyFiles {
  private static boolean LOCAL_SOURCE=true;
  private static boolean NO_ACID=false;
  private static HiveConf hiveConf;
  private boolean isSourceLocal;
  @Rule public TemporaryFolder sourceFolder=new TemporaryFolder();
  @Rule public TemporaryFolder targetFolder=new TemporaryFolder();
  @Parameterized.Parameters(name="{0}") public static List<Object[]> getParameters() throws Exception {
    return Arrays.asList(new Object[][]{{0,LOCAL_SOURCE},{15,LOCAL_SOURCE},{0,!LOCAL_SOURCE},{15,!LOCAL_SOURCE}});
  }
  @BeforeClass public static void setUp(){
    hiveConf=new HiveConf(TestHiveCopyFiles.class);
    SessionState.start(hiveConf);
  }
  public TestHiveCopyFiles(  int threadCount,  boolean isSourceLocal){
    hiveConf.setIntVar(HiveConf.ConfVars.HIVE_MOVE_FILES_THREAD_COUNT,threadCount);
    this.isSourceLocal=isSourceLocal;
  }
  @Test public void testRenameNewFilesOnSameFileSystem() throws IOException {
    Path sourcePath=new Path(sourceFolder.getRoot().getAbsolutePath());
    sourceFolder.newFile("000000_0");
    sourceFolder.newFile("000001_0");
    sourceFolder.newFile("000000_0.gz");
    sourceFolder.newFile("000001_0.gz");
    Path targetPath=new Path(targetFolder.getRoot().getAbsolutePath());
    FileSystem targetFs=targetPath.getFileSystem(hiveConf);
    try {
      Hive.copyFiles(hiveConf,sourcePath,targetPath,targetFs,isSourceLocal,NO_ACID,null);
    }
 catch (    HiveException e) {
      e.printStackTrace();
      assertTrue("Hive.copyFiles() threw an unexpected exception.",false);
    }
    assertTrue(targetFs.exists(new Path(targetPath,"000000_0")));
    assertTrue(targetFs.exists(new Path(targetPath,"000001_0")));
    assertTrue(targetFs.exists(new Path(targetPath,"000000_0.gz")));
    assertTrue(targetFs.exists(new Path(targetPath,"000001_0.gz")));
  }
  @Test public void testRenameExistingFilesOnSameFileSystem() throws IOException {
    Path sourcePath=new Path(sourceFolder.getRoot().getAbsolutePath());
    sourceFolder.newFile("000000_0");
    sourceFolder.newFile("000001_0");
    sourceFolder.newFile("000000_0.gz");
    sourceFolder.newFile("000001_0.gz");
    Path targetPath=new Path(targetFolder.getRoot().getAbsolutePath());
    FileSystem targetFs=targetPath.getFileSystem(hiveConf);
    try {
      Hive.copyFiles(hiveConf,sourcePath,targetPath,targetFs,isSourceLocal,NO_ACID,null);
    }
 catch (    HiveException e) {
      e.printStackTrace();
      assertTrue("Hive.copyFiles() threw an unexpected exception.",false);
    }
    if (isSourceLocal) {
      sourceFolder.delete();
      sourceFolder.create();
      sourcePath=new Path(sourceFolder.getRoot().getAbsolutePath());
    }
    sourceFolder.newFile("000000_0");
    sourceFolder.newFile("000001_0");
    sourceFolder.newFile("000000_0.gz");
    sourceFolder.newFile("000001_0.gz");
    try {
      Hive.copyFiles(hiveConf,sourcePath,targetPath,targetFs,isSourceLocal,NO_ACID,null);
    }
 catch (    HiveException e) {
      e.printStackTrace();
      assertTrue("Hive.copyFiles() threw an unexpected exception.",false);
    }
    assertTrue(targetFs.exists(new Path(targetPath,"000000_0")));
    assertTrue(targetFs.exists(new Path(targetPath,"000001_0")));
    assertTrue(targetFs.exists(new Path(targetPath,"000000_0.gz")));
    assertTrue(targetFs.exists(new Path(targetPath,"000001_0.gz")));
    assertTrue(targetFs.exists(new Path(targetPath,"000000_0_copy_1")));
    assertTrue(targetFs.exists(new Path(targetPath,"000001_0_copy_1")));
    assertTrue(targetFs.exists(new Path(targetPath,"000000_0_copy_1.gz")));
    assertTrue(targetFs.exists(new Path(targetPath,"000001_0_copy_1.gz")));
  }
  @Test public void testCopyNewFilesOnDifferentFileSystem() throws IOException {
    Path sourcePath=new Path(sourceFolder.getRoot().getAbsolutePath());
    sourceFolder.newFile("000000_0");
    sourceFolder.newFile("000001_0");
    sourceFolder.newFile("000000_0.gz");
    sourceFolder.newFile("000001_0.gz");
    Path targetPath=new Path(targetFolder.getRoot().getAbsolutePath());
    FileSystem spyTargetFs=Mockito.spy(targetPath.getFileSystem(hiveConf));
    Mockito.when(spyTargetFs.getUri()).thenReturn(URI.create("hdfs://" + targetPath.toUri().getPath()));
    try {
      Hive.copyFiles(hiveConf,sourcePath,targetPath,spyTargetFs,isSourceLocal,NO_ACID,null);
    }
 catch (    HiveException e) {
      e.printStackTrace();
      assertTrue("Hive.copyFiles() threw an unexpected exception.",false);
    }
    assertTrue(spyTargetFs.exists(new Path(targetPath,"000000_0")));
    assertTrue(spyTargetFs.exists(new Path(targetPath,"000001_0")));
    assertTrue(spyTargetFs.exists(new Path(targetPath,"000000_0.gz")));
    assertTrue(spyTargetFs.exists(new Path(targetPath,"000001_0.gz")));
  }
  @Test public void testCopyExistingFilesOnDifferentFileSystem() throws IOException {
    Path sourcePath=new Path(sourceFolder.getRoot().getAbsolutePath());
    sourceFolder.newFile("000000_0");
    sourceFolder.newFile("000001_0");
    sourceFolder.newFile("000000_0.gz");
    sourceFolder.newFile("000001_0.gz");
    Path targetPath=new Path(targetFolder.getRoot().getAbsolutePath());
    FileSystem spyTargetFs=Mockito.spy(targetPath.getFileSystem(hiveConf));
    Mockito.when(spyTargetFs.getUri()).thenReturn(URI.create("hdfs://" + targetPath.toUri().getPath()));
    try {
      Hive.copyFiles(hiveConf,sourcePath,targetPath,spyTargetFs,isSourceLocal,NO_ACID,null);
    }
 catch (    HiveException e) {
      e.printStackTrace();
      assertTrue("Hive.copyFiles() threw an unexpected exception.",false);
    }
    if (isSourceLocal) {
      sourceFolder.delete();
      sourceFolder.create();
      sourcePath=new Path(sourceFolder.getRoot().getAbsolutePath());
    }
    sourceFolder.newFile("000000_0");
    sourceFolder.newFile("000001_0");
    sourceFolder.newFile("000000_0.gz");
    sourceFolder.newFile("000001_0.gz");
    try {
      Hive.copyFiles(hiveConf,sourcePath,targetPath,spyTargetFs,isSourceLocal,NO_ACID,null);
    }
 catch (    HiveException e) {
      e.printStackTrace();
      assertTrue("Hive.copyFiles() threw an unexpected exception.",false);
    }
    assertTrue(spyTargetFs.exists(new Path(targetPath,"000000_0")));
    assertTrue(spyTargetFs.exists(new Path(targetPath,"000001_0")));
    assertTrue(spyTargetFs.exists(new Path(targetPath,"000000_0.gz")));
    assertTrue(spyTargetFs.exists(new Path(targetPath,"000001_0.gz")));
    assertTrue(spyTargetFs.exists(new Path(targetPath,"000000_0_copy_1")));
    assertTrue(spyTargetFs.exists(new Path(targetPath,"000001_0_copy_1")));
    assertTrue(spyTargetFs.exists(new Path(targetPath,"000000_0_copy_1.gz")));
    assertTrue(spyTargetFs.exists(new Path(targetPath,"000001_0_copy_1.gz")));
  }
}
