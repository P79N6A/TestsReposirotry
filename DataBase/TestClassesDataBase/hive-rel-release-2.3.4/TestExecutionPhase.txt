@UseReporter(JunitReporter.class) public class TestExecutionPhase extends AbstractTestPhase {
  private static final String DRIVER="driver";
  private static final String QFILENAME="sometest";
  private ExecutionPhase phase;
  private File testDir;
  private Set<String> executedTests;
  private Set<String> failedTests;
  private List<TestBatch> testBatches;
  private TestBatch testBatch;
  @Before public void setup() throws Exception {
    initialize(getClass().getSimpleName());
    executedTests=Sets.newHashSet();
    failedTests=Sets.newHashSet();
  }
  private ExecutionPhase getPhase() throws IOException {
    createHostExecutor();
    phase=new ExecutionPhase(hostExecutors,executionContext,hostExecutorBuilder,localCommandFactory,templateDefaults,succeededLogDir,failedLogDir,Suppliers.ofInstance(testBatches),executedTests,failedTests,logger);
    return phase;
  }
  private void setupQFile(  boolean isParallel) throws Exception {
    testDir=Dirs.create(new File(baseDir,"test"));
    Assert.assertTrue(new File(testDir,QFILENAME).createNewFile());
    testBatch=new QFileTestBatch(new AtomicInteger(1),"testcase",DRIVER,"qfile",Sets.newHashSet(QFILENAME),isParallel,"testModule");
    testBatches=Collections.singletonList(testBatch);
  }
  private void setupUnitTest() throws Exception {
    testBatch=new UnitTestBatch(new AtomicInteger(1),"testcase",Arrays.asList(DRIVER),"fakemodule",false);
    testBatches=Collections.singletonList(testBatch);
  }
  private void setupUnitTest(  int nTests) throws Exception {
    List<String> testList=new ArrayList<>();
    for (int i=0; i < nTests; i++) {
      testList.add("TestClass-" + i);
    }
    testBatch=new UnitTestBatch(new AtomicInteger(1),"testcase",testList,"fakemodule",false);
    testBatches=Collections.singletonList(testBatch);
  }
  private void copyTestOutput(  String resource,  File directory,  String name) throws Exception {
    String junitOutput=Templates.readResource(resource);
    File junitOutputFile=new File(Dirs.create(new File(directory,name)),"TEST-SomeTest.xml");
    Files.write(junitOutput.getBytes(Charsets.UTF_8),junitOutputFile);
  }
  private void copyTestOutput(  String resource,  File directory,  String batchName,  String outputName) throws Exception {
    String junitOutput=Templates.readResource(resource);
    File junitOutputFile=new File(Dirs.create(new File(directory,batchName)),outputName);
    Files.write(junitOutput.getBytes(Charsets.UTF_8),junitOutputFile);
  }
  @After public void teardown(){
    FileUtils.deleteQuietly(baseDir);
  }
  @Test public void testPassingQFileTest() throws Throwable {
    setupQFile(true);
    copyTestOutput("SomeTest-success.xml",succeededLogDir,testBatch.getName());
    getPhase().execute();
    Approvals.verify(getExecutedCommands());
    Assert.assertEquals(Sets.newHashSet("SomeTest." + QFILENAME),executedTests);
    Assert.assertEquals(Sets.newHashSet(),failedTests);
  }
  @Test public void testFailingQFile() throws Throwable {
    setupQFile(true);
    sshCommandExecutor.putFailure("bash " + LOCAL_DIR + "/"+ HOST+ "-"+ USER+ "-0/scratch/hiveptest-"+ "1-"+ DRIVER+ "-"+ QFILENAME+ ".sh",1);
    copyTestOutput("SomeTest-failure.xml",failedLogDir,testBatch.getName());
    getPhase().execute();
    Assert.assertEquals(1,sshCommandExecutor.getMatchCount());
    Approvals.verify(getExecutedCommands());
    Assert.assertEquals(Sets.newHashSet("SomeTest." + QFILENAME),executedTests);
    Assert.assertEquals(Sets.newHashSet("SomeTest." + QFILENAME + " (batchId=1)"),failedTests);
  }
  @Test public void testPassingUnitTest() throws Throwable {
    setupUnitTest();
    copyTestOutput("SomeTest-success.xml",succeededLogDir,testBatch.getName());
    getPhase().execute();
    Approvals.verify(getExecutedCommands());
    Assert.assertEquals(Sets.newHashSet("SomeTest." + QFILENAME),executedTests);
    Assert.assertEquals(Sets.newHashSet(),failedTests);
  }
  @Test public void testFailingUnitTest() throws Throwable {
    setupUnitTest();
    sshCommandExecutor.putFailure("bash " + LOCAL_DIR + "/"+ HOST+ "-"+ USER+ "-0/scratch/hiveptest-"+ testBatch.getBatchId()+ "_"+ DRIVER+ ".sh",1);
    copyTestOutput("SomeTest-failure.xml",failedLogDir,testBatch.getName());
    getPhase().execute();
    Assert.assertEquals(1,sshCommandExecutor.getMatchCount());
    Approvals.verify(getExecutedCommands());
    Assert.assertEquals(Sets.newHashSet("SomeTest." + QFILENAME),executedTests);
    Assert.assertEquals(Sets.newHashSet("SomeTest." + QFILENAME + " (batchId=1)"),failedTests);
  }
  @Test(timeout=20000) public void testTimedOutUnitTest() throws Throwable {
    setupUnitTest(3);
    copyTestOutput("SomeTest-success.xml",succeededLogDir,testBatch.getName(),"TEST-TestClass-0.xml");
    copyTestOutput("SomeTest-success.xml",succeededLogDir,testBatch.getName(),"TEST-TestClass-1.xml");
    getPhase().execute();
    Approvals.verify(getExecutedCommands());
    Assert.assertEquals(1,failedTests.size());
    Assert.assertEquals("TestClass-2 - did not produce a TEST-*.xml file (likely timed out) (batchId=1)",failedTests.iterator().next());
  }
}
