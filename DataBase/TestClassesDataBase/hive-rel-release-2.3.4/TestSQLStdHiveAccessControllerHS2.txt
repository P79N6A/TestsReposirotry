/** 
 * Test SQLStdHiveAccessController
 */
public class TestSQLStdHiveAccessControllerHS2 {
  /** 
 * Test if SQLStdHiveAccessController is applying configuration security policy on hiveconf correctly
 * @throws HiveAuthzPluginException
 * @throws IllegalAccessException
 * @throws NoSuchFieldException
 * @throws IllegalArgumentException
 * @throws SecurityException
 */
  @Test public void testConfigProcessing() throws HiveAuthzPluginException, SecurityException, IllegalArgumentException, NoSuchFieldException, IllegalAccessException {
    HiveConf processedConf=newAuthEnabledConf();
    SQLStdHiveAccessController accessController=new SQLStdHiveAccessController(null,processedConf,new HadoopDefaultAuthenticator(),getHS2SessionCtx());
    accessController.applyAuthorizationConfigPolicy(processedConf);
    assertTrue("Check for transform query disabling hook",processedConf.getVar(ConfVars.PREEXECHOOKS).contains(DisallowTransformHook.class.getName()));
    List<String> settableParams=getSettableParams();
    verifyParamSettability(settableParams,processedConf);
  }
  private HiveConf newAuthEnabledConf(){
    HiveConf conf=new HiveConf();
    conf.setBoolVar(ConfVars.HIVE_AUTHORIZATION_ENABLED,true);
    return conf;
  }
  /** 
 * @return list of parameters that should be possible to set
 */
  private List<String> getSettableParams() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
    Field varNameField=HiveConf.class.getDeclaredField("sqlStdAuthSafeVarNames");
    varNameField.setAccessible(true);
    List<String> confVarList=Arrays.asList((String[])varNameField.get(null));
    List<String> confVarRegexList=Arrays.asList("hive.convert.join.bucket.mapjoin.tez","hive.optimize.index.filter.compact.maxsize","hive.tez.dummy","tez.task.dummy","hive.exec.dynamic.partition","hive.exec.dynamic.partition.mode","hive.exec.max.dynamic.partitions","hive.exec.max.dynamic.partitions.pernode","oozie.HadoopAccessorService.created","tez.queue.name");
    List<String> varList=new ArrayList<String>();
    varList.addAll(confVarList);
    varList.addAll(confVarRegexList);
    return varList;
  }
  private HiveAuthzSessionContext getHS2SessionCtx(){
    Builder ctxBuilder=new HiveAuthzSessionContext.Builder();
    ctxBuilder.setClientType(CLIENT_TYPE.HIVESERVER2);
    return ctxBuilder.build();
  }
  /** 
 * Verify that params in settableParams can be modified, and other random ones can't be modified
 * @param settableParams
 * @param processedConf
 */
  private void verifyParamSettability(  List<String> settableParams,  HiveConf processedConf){
    for (    String param : settableParams) {
      try {
        processedConf.verifyAndSet(param,"dummy");
      }
 catch (      IllegalArgumentException e) {
        fail("Unable to set value for parameter in whitelist " + param + " "+ e);
      }
    }
    assertConfModificationException(processedConf,"dummy.param");
    for (    ConfVars metaVar : HiveConf.metaVars) {
      assertConfModificationException(processedConf,metaVar.varname);
    }
  }
  /** 
 * Test that setting HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST_APPEND config works
 * @throws HiveAuthzPluginException
 */
  @Test public void testConfigProcessingCustomSetWhitelistAppend() throws HiveAuthzPluginException {
    List<String> paramRegexes=Arrays.asList("hive.ctest.param","hive.abc..*");
    List<String> settableParams=Arrays.asList("hive.ctest.param","hive.abc.def");
    verifySettability(paramRegexes,settableParams,ConfVars.HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST_APPEND);
  }
  /** 
 * Test that setting HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST config works
 * @throws HiveAuthzPluginException
 */
  @Test public void testConfigProcessingCustomSetWhitelist() throws HiveAuthzPluginException {
    List<String> paramRegexes=Arrays.asList("hive.ctest.param","hive.abc..*");
    List<String> settableParams=Arrays.asList("hive.ctest.param","hive.abc.def");
    verifySettability(paramRegexes,settableParams,ConfVars.HIVE_AUTHORIZATION_SQL_STD_AUTH_CONFIG_WHITELIST);
  }
  private void verifySettability(  List<String> paramRegexes,  List<String> settableParams,  ConfVars whiteListParam) throws HiveAuthzPluginException {
    HiveConf processedConf=newAuthEnabledConf();
    processedConf.setVar(whiteListParam,Joiner.on("|").join(paramRegexes));
    SQLStdHiveAccessController accessController=new SQLStdHiveAccessController(null,processedConf,new HadoopDefaultAuthenticator(),getHS2SessionCtx());
    accessController.applyAuthorizationConfigPolicy(processedConf);
    verifyParamSettability(settableParams,processedConf);
  }
  private void assertConfModificationException(  HiveConf processedConf,  String param){
    boolean caughtEx=false;
    try {
      processedConf.verifyAndSet(param,"dummy");
    }
 catch (    IllegalArgumentException e) {
      caughtEx=true;
    }
    assertTrue("Exception should be thrown while modifying the param " + param,caughtEx);
  }
}
