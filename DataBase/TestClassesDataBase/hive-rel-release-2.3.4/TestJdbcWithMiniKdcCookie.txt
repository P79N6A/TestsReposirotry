public class TestJdbcWithMiniKdcCookie {
  private static MiniHS2 miniHS2=null;
  private static MiniHiveKdc miniHiveKdc=null;
  private Connection hs2Conn;
  File dataFile;
  protected static HiveConf hiveConf=new HiveConf();
  private static String HIVE_NON_EXISTENT_USER="hive_no_exist";
  @BeforeClass public static void beforeTest() throws Exception {
    hiveConf.setVar(ConfVars.HIVE_SERVER2_TRANSPORT_MODE,MiniHS2.HS2_HTTP_MODE);
    System.err.println("Testing using HS2 mode : " + hiveConf.getVar(ConfVars.HIVE_SERVER2_TRANSPORT_MODE));
    hiveConf.setBoolVar(ConfVars.HIVE_SERVER2_THRIFT_HTTP_COOKIE_AUTH_ENABLED,true);
    hiveConf.setTimeVar(ConfVars.HIVE_SERVER2_THRIFT_HTTP_COOKIE_MAX_AGE,1,TimeUnit.SECONDS);
    hiveConf.setBoolVar(ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
    miniHiveKdc=MiniHiveKdc.getMiniHiveKdc(hiveConf);
    miniHS2=MiniHiveKdc.getMiniHS2WithKerb(miniHiveKdc,hiveConf);
    miniHS2.start(new HashMap<String,String>());
  }
  @Before public void setUp() throws Exception {
  }
  @After public void tearDown() throws Exception {
    if (hs2Conn != null) {
      try {
        hs2Conn.close();
      }
 catch (      Exception e) {
      }
    }
  }
  @AfterClass public static void afterTest() throws Exception {
    miniHS2.stop();
  }
  @Test public void testCookie() throws Exception {
    String tableName="test_cookie";
    dataFile=new File(hiveConf.get("test.data.files"),"kv1.txt");
    Connection hs2Conn=getConnection(MiniHiveKdc.HIVE_TEST_USER_1);
    Statement stmt=hs2Conn.createStatement();
    stmt.execute("create table " + tableName + "(key int, value string) ");
    stmt.execute("load data local inpath '" + dataFile + "' into table "+ tableName);
    for (int i=0; i < 10; i++) {
      stmt.execute("select * from " + tableName);
    }
    stmt.execute("drop table " + tableName);
    stmt.close();
  }
  @Test public void testCookieNegative() throws Exception {
    try {
      getConnection(HIVE_NON_EXISTENT_USER);
    }
 catch (    IOException e) {
      Assert.assertTrue(e.getMessage().contains("Login failure"));
    }
  }
  private Connection getConnection(  String userName) throws Exception {
    miniHiveKdc.loginUser(userName);
    return new HiveConnection(miniHS2.getJdbcURL(),new Properties());
  }
}
