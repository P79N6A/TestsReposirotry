public class TestAggregateStatsCache {
  static String DB_NAME="db";
  static String TAB_PREFIX="tab";
  static String PART_PREFIX="part";
  static String COL_PREFIX="col";
  static int NUM_TABS=2;
  static int NUM_PARTS=20;
  static int NUM_COLS=5;
  static int MAX_CACHE_NODES=10;
  static int MAX_PARTITIONS_PER_CACHE_NODE=10;
  static String TIME_TO_LIVE="20s";
  static String MAX_WRITER_WAIT="1s";
  static String MAX_READER_WAIT="1s";
  static float FALSE_POSITIVE_PROBABILITY=(float)0.01;
  static float MAX_VARIANCE=(float)0.5;
  static AggregateStatsCache cache;
  static List<String> tables=new ArrayList<String>();
  static List<String> tabParts=new ArrayList<String>();
  static List<String> tabCols=new ArrayList<String>();
  @BeforeClass public static void beforeTest(){
    initializeTables();
    initializePartitions();
    initializeColumns();
  }
  private static void initializeTables(){
    for (int i=1; i <= NUM_TABS; i++) {
      tables.add(TAB_PREFIX + i);
    }
  }
  private static void initializePartitions(){
    for (int i=1; i <= NUM_PARTS; i++) {
      tabParts.add(PART_PREFIX + i);
    }
  }
  private static void initializeColumns(){
    for (int i=1; i <= NUM_COLS; i++) {
      tabCols.add(COL_PREFIX + i);
    }
  }
  @AfterClass public static void afterTest(){
  }
  @Before public void setUp(){
    HiveConf hiveConf=new HiveConf();
    hiveConf.setIntVar(HiveConf.ConfVars.METASTORE_AGGREGATE_STATS_CACHE_SIZE,MAX_CACHE_NODES);
    hiveConf.setIntVar(HiveConf.ConfVars.METASTORE_AGGREGATE_STATS_CACHE_MAX_PARTITIONS,MAX_PARTITIONS_PER_CACHE_NODE);
    hiveConf.setFloatVar(HiveConf.ConfVars.METASTORE_AGGREGATE_STATS_CACHE_FPP,FALSE_POSITIVE_PROBABILITY);
    hiveConf.setFloatVar(HiveConf.ConfVars.METASTORE_AGGREGATE_STATS_CACHE_MAX_VARIANCE,MAX_VARIANCE);
    hiveConf.setVar(HiveConf.ConfVars.METASTORE_AGGREGATE_STATS_CACHE_TTL,TIME_TO_LIVE);
    hiveConf.setVar(HiveConf.ConfVars.METASTORE_AGGREGATE_STATS_CACHE_MAX_WRITER_WAIT,MAX_WRITER_WAIT);
    hiveConf.setVar(HiveConf.ConfVars.METASTORE_AGGREGATE_STATS_CACHE_MAX_READER_WAIT,MAX_READER_WAIT);
    cache=AggregateStatsCache.getInstance(hiveConf);
  }
  @After public void tearDown(){
  }
  @Test public void testCacheKey(){
    Key k1=new Key("db","tbl1","col");
    Key k2=new Key("db","tbl1","col");
    Assert.assertEquals(k1,k2);
    Key k3=new Key("db","tbl2","col");
    Assert.assertNotEquals(k1,k3);
  }
  @Test public void testBasicAddAndGet() throws Exception {
    List<String> partNames=preparePartNames(tables.get(0),1,9);
    BloomFilter bloomFilter=prepareBloomFilter(partNames);
    String tblName=tables.get(0);
    String colName=tabCols.get(0);
    int highVal=100, lowVal=10, numDVs=50, numNulls=5;
    ColumnStatisticsObj aggrColStats=getDummyLongColStat(colName,highVal,lowVal,numDVs,numNulls);
    cache.add(DB_NAME,tblName,colName,10,aggrColStats,bloomFilter);
    AggrColStats aggrStatsCached=cache.get(DB_NAME,tblName,colName,partNames);
    Assert.assertNotNull(aggrStatsCached);
    ColumnStatisticsObj aggrColStatsCached=aggrStatsCached.getColStats();
    Assert.assertEquals(aggrColStats,aggrColStatsCached);
    aggrStatsCached=cache.get("dbNotThere",tblName,colName,partNames);
    Assert.assertNull(aggrStatsCached);
  }
  @Test public void testAddGetWithVariance() throws Exception {
    List<String> partNames=preparePartNames(tables.get(0),1,9);
    BloomFilter bloomFilter=prepareBloomFilter(partNames);
    String tblName=tables.get(0);
    String colName=tabCols.get(0);
    int highVal=100, lowVal=10, numDVs=50, numNulls=5;
    ColumnStatisticsObj aggrColStats=getDummyLongColStat(colName,highVal,lowVal,numDVs,numNulls);
    cache.add(DB_NAME,tblName,colName,10,aggrColStats,bloomFilter);
    partNames=preparePartNames(tables.get(0),1,5);
    AggrColStats aggrStatsCached=cache.get(DB_NAME,tblName,colName,partNames);
    Assert.assertNull(aggrStatsCached);
    partNames=preparePartNames(tables.get(0),11,20);
    aggrStatsCached=cache.get(DB_NAME,tblName,colName,partNames);
    Assert.assertNull(aggrStatsCached);
    partNames=preparePartNames(tables.get(0),1,8);
    aggrStatsCached=cache.get(DB_NAME,tblName,colName,partNames);
    Assert.assertNotNull(aggrStatsCached);
    ColumnStatisticsObj aggrColStatsCached=aggrStatsCached.getColStats();
    Assert.assertEquals(aggrColStats,aggrColStatsCached);
  }
  @Test public void testTimeToLive() throws Exception {
    List<String> partNames=preparePartNames(tables.get(0),1,9);
    BloomFilter bloomFilter=prepareBloomFilter(partNames);
    String tblName=tables.get(0);
    String colName=tabCols.get(0);
    int highVal=100, lowVal=10, numDVs=50, numNulls=5;
    ColumnStatisticsObj aggrColStats=getDummyLongColStat(colName,highVal,lowVal,numDVs,numNulls);
    cache.add(DB_NAME,tblName,colName,10,aggrColStats,bloomFilter);
    Thread.sleep(30000);
    AggrColStats aggrStatsCached=cache.get(DB_NAME,tblName,colName,partNames);
    Assert.assertNull(aggrStatsCached);
  }
  /** 
 * Prepares an array of partition names by getting partitions from minPart ... maxPart and prepending with table name Example: [tab1part1, tab1part2 ...]
 * @param tabName
 * @param minPart
 * @param maxPart
 * @return
 * @throws Exception
 */
  private List<String> preparePartNames(  String tabName,  int minPart,  int maxPart) throws Exception {
    if ((minPart < 1) || (maxPart > NUM_PARTS)) {
      throw new Exception("tabParts does not have these partition numbers");
    }
    List<String> partNames=new ArrayList<String>();
    for (int i=minPart; i <= maxPart; i++) {
      String partName=tabParts.get(i - 1);
      partNames.add(tabName + partName);
    }
    return partNames;
  }
  /** 
 * Prepares a bloom filter from the list of partition names
 * @param partNames
 * @return
 */
  private BloomFilter prepareBloomFilter(  List<String> partNames){
    BloomFilter bloomFilter=new BloomFilter(MAX_PARTITIONS_PER_CACHE_NODE,FALSE_POSITIVE_PROBABILITY);
    for (    String partName : partNames) {
      bloomFilter.add(partName.getBytes());
    }
    return bloomFilter;
  }
  private ColumnStatisticsObj getDummyLongColStat(  String colName,  int highVal,  int lowVal,  int numDVs,  int numNulls){
    ColumnStatisticsObj aggrColStats=new ColumnStatisticsObj();
    aggrColStats.setColName(colName);
    aggrColStats.setColType("long");
    LongColumnStatsData longStatsData=new LongColumnStatsData();
    longStatsData.setHighValue(highVal);
    longStatsData.setLowValue(lowVal);
    longStatsData.setNumDVs(numDVs);
    longStatsData.setNumNulls(numNulls);
    ColumnStatisticsData aggrColStatsData=new ColumnStatisticsData();
    aggrColStatsData.setLongStats(longStatsData);
    aggrColStats.setStatsData(aggrColStatsData);
    return aggrColStats;
  }
}
