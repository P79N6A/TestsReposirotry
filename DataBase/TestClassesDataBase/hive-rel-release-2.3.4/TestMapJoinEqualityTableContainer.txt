public class TestMapJoinEqualityTableContainer {
  private static final MapJoinKeyObject KEY1=new MapJoinKeyObject(new Object[]{new Text("key1")});
  private static final MapJoinKeyObject KEY2=new MapJoinKeyObject(new Object[]{new Text("key2")});
  private static final MapJoinKeyObject KEY3=new MapJoinKeyObject(new Object[]{new Text("key3")});
  private static final MapJoinKeyObject KEY4=new MapJoinKeyObject(new Object[]{new Text("key4")});
  private static final Object[] VALUE=new Object[]{new Text("value")};
  private HashMapWrapper container;
  private MapJoinRowContainer rowContainer;
  @Before public void setup() throws Exception {
    rowContainer=new MapJoinEagerRowContainer();
    rowContainer.addRow(VALUE);
    container=new HashMapWrapper();
  }
  @Test public void testContainerBasics() throws Exception {
    container.put(KEY1,rowContainer);
    container.put(KEY2,rowContainer);
    container.put(KEY3,rowContainer);
    container.put(KEY4,rowContainer);
    Assert.assertEquals(4,container.size());
    Map<MapJoinKey,MapJoinRowContainer> localContainer=new HashMap<MapJoinKey,MapJoinRowContainer>();
    for (    Entry<MapJoinKey,MapJoinRowContainer> entry : container.entrySet()) {
      localContainer.put(entry.getKey(),entry.getValue());
    }
    Utilities.testEquality(container.get(KEY1),localContainer.get(KEY1));
    Utilities.testEquality(container.get(KEY2),localContainer.get(KEY2));
    Utilities.testEquality(container.get(KEY3),localContainer.get(KEY3));
    Utilities.testEquality(container.get(KEY4),localContainer.get(KEY4));
    container.clear();
    Assert.assertEquals(0,container.size());
    Assert.assertTrue(container.entrySet().isEmpty());
  }
}
