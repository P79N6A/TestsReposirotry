public static class VerifyFastBytesHashMap {
  private int count;
  private FastBytesHashMapElement[] array;
  private TreeMap<BytesWritable,Integer> keyValueMap;
  public VerifyFastBytesHashMap(){
    count=0;
    array=new FastBytesHashMapElement[50];
    keyValueMap=new TreeMap<BytesWritable,Integer>();
  }
  public int getCount(){
    return count;
  }
  public boolean contains(  byte[] key){
    BytesWritable keyBytesWritable=new BytesWritable(key,key.length);
    return keyValueMap.containsKey(keyBytesWritable);
  }
  public void add(  byte[] key,  byte[] value){
    BytesWritable keyBytesWritable=new BytesWritable(key,key.length);
    if (keyValueMap.containsKey(keyBytesWritable)) {
      int index=keyValueMap.get(keyBytesWritable);
      array[index].addValue(value);
    }
 else {
      if (count >= array.length) {
        FastBytesHashMapElement[] newArray=new FastBytesHashMapElement[array.length * 2];
        System.arraycopy(array,0,newArray,0,count);
        array=newArray;
      }
      array[count]=new FastBytesHashMapElement(key,value);
      keyValueMap.put(keyBytesWritable,count);
      count++;
    }
  }
  public byte[] addRandomExisting(  byte[] value,  Random r){
    Preconditions.checkState(count > 0);
    int index=r.nextInt(count);
    array[index].addValue(value);
    return array[index].getKey();
  }
  public byte[] getKey(  int index){
    return array[index].getKey();
  }
  public List<byte[]> getValues(  int index){
    return array[index].getValues();
  }
  public void verify(  VectorMapJoinFastBytesHashMap map){
    int mapSize=map.size();
    if (mapSize != count) {
      TestCase.fail("map.size() does not match expected count");
    }
    for (int index=0; index < count; index++) {
      FastBytesHashMapElement element=array[index];
      byte[] key=element.getKey();
      List<byte[]> values=element.getValues();
      VectorMapJoinHashMapResult hashMapResult=map.createHashMapResult();
      JoinUtil.JoinResult joinResult=map.lookup(key,0,key.length,hashMapResult);
      if (joinResult != JoinUtil.JoinResult.MATCH) {
        assertTrue(false);
      }
      verifyHashMapValues(hashMapResult,values);
    }
  }
}
