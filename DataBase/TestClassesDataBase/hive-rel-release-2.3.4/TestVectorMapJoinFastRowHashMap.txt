public class TestVectorMapJoinFastRowHashMap extends CommonFastHashTable {
  private void addAndVerifyRows(  VectorRandomRowSource valueSource,  Object[][] rows,  VectorMapJoinFastHashTable map,  HashTableKeyType hashTableKeyType,  VerifyFastRowHashMap verifyTable,  String[] keyTypeNames,  boolean doClipping,  boolean useExactBytes) throws HiveException, IOException, SerDeException {
    final int keyCount=keyTypeNames.length;
    PrimitiveTypeInfo[] keyPrimitiveTypeInfos=new PrimitiveTypeInfo[keyCount];
    PrimitiveCategory[] keyPrimitiveCategories=new PrimitiveCategory[keyCount];
    ArrayList<ObjectInspector> keyPrimitiveObjectInspectorList=new ArrayList<ObjectInspector>(keyCount);
    for (int i=0; i < keyCount; i++) {
      PrimitiveTypeInfo primitiveTypeInfo=(PrimitiveTypeInfo)TypeInfoUtils.getTypeInfoFromTypeString(keyTypeNames[i]);
      keyPrimitiveTypeInfos[i]=primitiveTypeInfo;
      PrimitiveCategory primitiveCategory=primitiveTypeInfo.getPrimitiveCategory();
      keyPrimitiveCategories[i]=primitiveCategory;
      keyPrimitiveObjectInspectorList.add(PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(primitiveTypeInfo));
    }
    boolean[] keyColumnSortOrderIsDesc=new boolean[keyCount];
    Arrays.fill(keyColumnSortOrderIsDesc,false);
    byte[] keyColumnNullMarker=new byte[keyCount];
    Arrays.fill(keyColumnNullMarker,BinarySortableSerDe.ZERO);
    byte[] keyColumnNotNullMarker=new byte[keyCount];
    Arrays.fill(keyColumnNotNullMarker,BinarySortableSerDe.ONE);
    BinarySortableSerializeWrite keySerializeWrite=new BinarySortableSerializeWrite(keyColumnSortOrderIsDesc,keyColumnNullMarker,keyColumnNotNullMarker);
    PrimitiveTypeInfo[] valuePrimitiveTypeInfos=valueSource.primitiveTypeInfos();
    final int columnCount=valuePrimitiveTypeInfos.length;
    SerializeWrite valueSerializeWrite=new LazyBinarySerializeWrite(columnCount);
    final int count=rows.length;
    for (int i=0; i < count; i++) {
      Object[] valueRow=rows[i];
      Output valueOutput=new Output();
      ((LazyBinarySerializeWrite)valueSerializeWrite).set(valueOutput);
      for (int index=0; index < columnCount; index++) {
        Writable writable=(Writable)valueRow[index];
        VerifyFastRow.serializeWrite(valueSerializeWrite,valuePrimitiveTypeInfos[index],writable);
      }
      byte[] value=Arrays.copyOf(valueOutput.getData(),valueOutput.getLength());
      byte[] key;
      if (random.nextBoolean() || verifyTable.getCount() == 0) {
        Object[] keyRow=VectorRandomRowSource.randomRow(keyCount,random,keyPrimitiveObjectInspectorList,keyPrimitiveCategories,keyPrimitiveTypeInfos);
        Output keyOutput=new Output();
        keySerializeWrite.set(keyOutput);
        for (int index=0; index < keyCount; index++) {
          Writable writable=(Writable)keyRow[index];
          VerifyFastRow.serializeWrite(keySerializeWrite,keyPrimitiveTypeInfos[index],writable);
        }
        key=Arrays.copyOf(keyOutput.getData(),keyOutput.getLength());
        verifyTable.add(key,keyRow,value,valueRow);
      }
 else {
        key=verifyTable.addRandomExisting(value,valueRow,random);
      }
      BytesWritable keyWritable=new BytesWritable(key);
      BytesWritable valueWritable=new BytesWritable(value);
      map.putRow(keyWritable,valueWritable);
    }
    verifyTable.verify(map,hashTableKeyType,valuePrimitiveTypeInfos,doClipping,useExactBytes,random);
  }
  @Test public void testBigIntRows() throws Exception {
    random=new Random(927337);
    VectorMapJoinFastLongHashMap map=new VectorMapJoinFastLongHashMap(false,false,HashTableKeyType.LONG,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.LONG,verifyTable,new String[]{"bigint"},false,false);
  }
  @Test public void testIntRows() throws Exception {
    random=new Random(927337);
    VectorMapJoinFastLongHashMap map=new VectorMapJoinFastLongHashMap(false,false,HashTableKeyType.INT,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.INT,verifyTable,new String[]{"int"},false,false);
  }
  @Test public void testStringRows() throws Exception {
    random=new Random(927337);
    VectorMapJoinFastStringHashMap map=new VectorMapJoinFastStringHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.STRING,verifyTable,new String[]{"string"},false,false);
  }
  @Test public void testMultiKeyRows1() throws Exception {
    random=new Random(833);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.MULTI_KEY,verifyTable,new String[]{"int","int"},false,false);
  }
  @Test public void testMultiKeyRows2() throws Exception {
    random=new Random(833099);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.MULTI_KEY,verifyTable,new String[]{"string","string"},false,false);
  }
  @Test public void testMultiKeyRows3() throws Exception {
    random=new Random(833099);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.MULTI_KEY,verifyTable,new String[]{"bigint","timestamp","double"},false,false);
  }
  @Test public void testBigIntRowsClipped() throws Exception {
    random=new Random(326232);
    VectorMapJoinFastLongHashMap map=new VectorMapJoinFastLongHashMap(false,false,HashTableKeyType.LONG,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.LONG,verifyTable,new String[]{"bigint"},true,false);
  }
  @Test public void testIntRowsClipped() throws Exception {
    random=new Random(326232);
    VectorMapJoinFastLongHashMap map=new VectorMapJoinFastLongHashMap(false,false,HashTableKeyType.INT,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.INT,verifyTable,new String[]{"int"},true,false);
  }
  @Test public void testStringRowsClipped() throws Exception {
    random=new Random(326232);
    VectorMapJoinFastStringHashMap map=new VectorMapJoinFastStringHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.STRING,verifyTable,new String[]{"string"},true,false);
  }
  @Test public void testMultiKeyRowsClipped1() throws Exception {
    random=new Random(2331);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.MULTI_KEY,verifyTable,new String[]{"varchar(20)","date","interval_day_time"},true,false);
  }
  @Test public void testMultiKeyRowsClipped2() throws Exception {
    random=new Random(7403);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.MULTI_KEY,verifyTable,new String[]{"varchar(20)","varchar(40)"},true,false);
  }
  @Test public void testMultiKeyRowsClipped3() throws Exception {
    random=new Random(99);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.MULTI_KEY,verifyTable,new String[]{"float","tinyint"},true,false);
  }
  @Test public void testBigIntRowsExact() throws Exception {
    random=new Random(27722);
    VectorMapJoinFastLongHashMap map=new VectorMapJoinFastLongHashMap(false,false,HashTableKeyType.LONG,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.LONG,verifyTable,new String[]{"bigint"},false,true);
  }
  @Test public void testIntRowsExact() throws Exception {
    random=new Random(8238383);
    VectorMapJoinFastLongHashMap map=new VectorMapJoinFastLongHashMap(false,false,HashTableKeyType.INT,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.INT,verifyTable,new String[]{"int"},false,true);
  }
  @Test public void testStringRowsExact() throws Exception {
    random=new Random(8235);
    VectorMapJoinFastStringHashMap map=new VectorMapJoinFastStringHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.STRING,verifyTable,new String[]{"string"},false,true);
  }
  @Test public void testMultiKeyRowsExact1() throws Exception {
    random=new Random(8235);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.MULTI_KEY,verifyTable,new String[]{"string","string","string","string"},false,true);
  }
  @Test public void testMultiKeyRowsExact2() throws Exception {
    random=new Random(8235);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.MULTI_KEY,verifyTable,new String[]{"smallint"},false,true);
  }
  @Test public void testMultiKeyRowsExact3() throws Exception {
    random=new Random(8235);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.MULTI_KEY,verifyTable,new String[]{"int","binary"},false,true);
  }
  @Test public void testBigIntRowsClippedExact() throws Exception {
    random=new Random(2122);
    VectorMapJoinFastLongHashMap map=new VectorMapJoinFastLongHashMap(false,false,HashTableKeyType.LONG,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.LONG,verifyTable,new String[]{"bigint"},true,true);
  }
  @Test public void testIntRowsClippedExact() throws Exception {
    random=new Random(7520);
    VectorMapJoinFastLongHashMap map=new VectorMapJoinFastLongHashMap(false,false,HashTableKeyType.INT,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.INT,verifyTable,new String[]{"int"},true,true);
  }
  @Test public void testStringRowsClippedExact() throws Exception {
    random=new Random(7539);
    VectorMapJoinFastStringHashMap map=new VectorMapJoinFastStringHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.STRING,verifyTable,new String[]{"string"},true,true);
  }
  @Test public void testMultiKeyRowsClippedExact1() throws Exception {
    random=new Random(13);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.MULTI_KEY,verifyTable,new String[]{"interval_year_month","decimal(12,8)"},true,true);
  }
  @Test public void testMultiKeyRowsClippedExact2() throws Exception {
    random=new Random(12);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.MULTI_KEY,verifyTable,new String[]{"bigint","string","int"},true,true);
  }
  @Test public void testMultiKeyRowsClippedExact3() throws Exception {
    random=new Random(7);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastRowHashMap verifyTable=new VerifyFastRowHashMap();
    VectorRandomRowSource valueSource=new VectorRandomRowSource();
    valueSource.init(random);
    int rowCount=10000;
    Object[][] rows=valueSource.randomRows(rowCount);
    addAndVerifyRows(valueSource,rows,map,HashTableKeyType.MULTI_KEY,verifyTable,new String[]{"bigint","string","varchar(5000)"},true,true);
  }
}
