public class CoreHBaseCliDriver extends CliAdapter {
  private HBaseQTestUtil qt;
  private HBaseTestSetup setup=new HBaseTestSetup();
  public CoreHBaseCliDriver(  AbstractCliConfig testCliConfig){
    super(testCliConfig);
  }
  @Override @BeforeClass public void beforeClass(){
    MiniClusterType miniMR=cliConfig.getClusterType();
    String initScript=cliConfig.getInitScript();
    String cleanupScript=cliConfig.getCleanupScript();
    try {
      qt=new HBaseQTestUtil(cliConfig.getResultsDir(),cliConfig.getLogDir(),miniMR,setup,initScript,cleanupScript);
      qt.cleanUp(null);
      qt.createSources(null);
    }
 catch (    Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      fail("Unexpected exception in static initialization: " + e.getMessage());
    }
  }
  @Override @Before public void setUp(){
    try {
      qt.clearTestSideEffects();
    }
 catch (    Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      fail("Unexpected exception in setup");
    }
  }
  @Override @After public void tearDown(){
    try {
      qt.clearPostTestEffects();
    }
 catch (    Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      fail("Unexpected exception in tearDown");
    }
  }
  @Override @AfterClass public void shutdown() throws Exception {
    try {
      qt.shutdown();
      setup.tearDown();
    }
 catch (    Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      fail("Unexpected exception in shutdown");
    }
  }
  @Override public void runTest(  String tname,  String fname,  String fpath) throws Exception {
    long startTime=System.currentTimeMillis();
    try {
      System.err.println("Begin query: " + fname);
      qt.addFile(fpath);
      if (qt.shouldBeSkipped(fname)) {
        System.err.println("Test " + fname + " skipped");
        return;
      }
      qt.cliInit(fname,false);
      int ecode=qt.executeClient(fname);
      if (ecode != 0) {
        qt.failed(ecode,fname,null);
      }
      ecode=qt.checkCliDriverResults(fname);
      if (ecode != 0) {
        qt.failedDiff(ecode,fname,null);
      }
    }
 catch (    Throwable e) {
      qt.failed(e,fname,null);
    }
    long elapsedTime=System.currentTimeMillis() - startTime;
    System.err.println("Done query: " + fname + " elapsedTime="+ elapsedTime / 1000 + "s");
    assertTrue("Test passed",true);
  }
}
