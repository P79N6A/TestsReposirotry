public class TestGenericUDFChr {
  @Test public void testChr() throws HiveException {
    UDFChr udf=new UDFChr();
    double d=48.0d;
    float f=48.0f;
    long l=48L;
    int i=48;
    short s=48;
    runAndVerify(d,udf,"0");
    runAndVerify(f,udf,"0");
    runAndVerify(l,udf,"0");
    runAndVerify(i,udf,"0");
    runAndVerify(s,udf,"0");
    d=65.123d;
    f=65.123f;
    l=65L;
    i=65;
    s=65;
    runAndVerify(d,udf,"A");
    runAndVerify(f,udf,"A");
    runAndVerify(l,udf,"A");
    runAndVerify(i,udf,"A");
    runAndVerify(s,udf,"A");
    d=-65.123d;
    f=-65.123f;
    l=-65L;
    i=-65;
    s=-65;
    runAndVerify(d,udf,"");
    runAndVerify(f,udf,"");
    runAndVerify(l,udf,"");
    runAndVerify(i,udf,"");
    runAndVerify(s,udf,"");
    d=0.9d;
    f=0.9f;
    l=0L;
    i=0;
    s=0;
    char nul='\u0000';
    String nulString=String.valueOf(nul);
    runAndVerify(d,udf,nulString);
    runAndVerify(f,udf,nulString);
    runAndVerify(l,udf,nulString);
    runAndVerify(i,udf,nulString);
    runAndVerify(s,udf,nulString);
    d=256.9d;
    f=256.9f;
    l=256L;
    i=256;
    s=256;
    runAndVerify(d,udf,nulString);
    runAndVerify(f,udf,nulString);
    runAndVerify(l,udf,nulString);
    runAndVerify(i,udf,nulString);
    runAndVerify(s,udf,nulString);
    d=321.9d;
    f=321.9f;
    l=321L;
    i=321;
    s=321;
    runAndVerify(d,udf,"A");
    runAndVerify(f,udf,"A");
    runAndVerify(l,udf,"A");
    runAndVerify(i,udf,"A");
    runAndVerify(s,udf,"A");
    d=Double.MAX_VALUE;
    f=Float.MAX_VALUE;
    l=Long.MAX_VALUE;
    i=Integer.MAX_VALUE;
    s=Short.MAX_VALUE;
    runAndVerify(d,udf,"");
    runAndVerify(f,udf,"");
    runAndVerify(l,udf,"");
    runAndVerify(i,udf,"");
    runAndVerify(s,udf,"Ã¿");
  }
  private void runAndVerify(  long v,  UDFChr udf,  String expV) throws HiveException {
    Text output=(Text)udf.evaluate(new LongWritable(v));
    verifyOutput(output,expV);
  }
  private void runAndVerify(  int v,  UDFChr udf,  String expV) throws HiveException {
    Text output=(Text)udf.evaluate(new LongWritable(v));
    verifyOutput(output,expV);
  }
  private void runAndVerify(  short v,  UDFChr udf,  String expV) throws HiveException {
    Text output=(Text)udf.evaluate(new LongWritable(v));
    verifyOutput(output,expV);
  }
  private void runAndVerify(  double v,  UDFChr udf,  String expV) throws HiveException {
    Text output=(Text)udf.evaluate(new DoubleWritable(v));
    verifyOutput(output,expV);
  }
  private void runAndVerify(  float v,  UDFChr udf,  String expV) throws HiveException {
    Text output=(Text)udf.evaluate(new DoubleWritable(v));
    verifyOutput(output,expV);
  }
  private void verifyOutput(  Text output,  String expV){
    if (expV == null) {
      Assert.assertNull(output);
    }
 else {
      Assert.assertNotNull(output);
      Assert.assertEquals("chr() test ",expV,output.toString());
    }
  }
}
