public class TestHooks {
  @BeforeClass public static void onetimeSetup() throws Exception {
    HiveConf conf=new HiveConf(TestHooks.class);
    conf.setVar(HiveConf.ConfVars.HIVE_AUTHORIZATION_MANAGER,"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory");
    Driver driver=createDriver(conf);
    int ret=driver.run("create table t1(i int)").getResponseCode();
    assertEquals("Checking command success",0,ret);
  }
  @AfterClass public static void onetimeTeardown() throws Exception {
    HiveConf conf=new HiveConf(TestHooks.class);
    Driver driver=createDriver(conf);
    driver.run("drop table t1");
  }
  @Before public void setup(){
  }
  @Test public void testRedactLogString() throws Exception {
    HiveConf conf=new HiveConf(TestHooks.class);
    String str;
    HiveConf.setVar(conf,HiveConf.ConfVars.QUERYREDACTORHOOKS,SimpleQueryRedactor.class.getName());
    str=HookUtils.redactLogString(null,null);
    assertEquals(str,null);
    str=HookUtils.redactLogString(conf,null);
    assertEquals(str,null);
    str=HookUtils.redactLogString(conf,"select 'XXX' from t1");
    assertEquals(str,"select 'AAA' from t1");
  }
  @Test public void testQueryRedactor() throws Exception {
    HiveConf conf=new HiveConf(TestHooks.class);
    HiveConf.setVar(conf,HiveConf.ConfVars.QUERYREDACTORHOOKS,SimpleQueryRedactor.class.getName());
    conf.setVar(HiveConf.ConfVars.HIVE_AUTHORIZATION_MANAGER,"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory");
    Driver driver=createDriver(conf);
    int ret=driver.compile("select 'XXX' from t1");
    assertEquals("Checking command success",0,ret);
    assertEquals("select 'AAA' from t1",conf.getQueryString());
  }
public static class SimpleQueryRedactor extends Redactor {
    public String redactQuery(    String query){
      return query.replaceAll("XXX","AAA");
    }
  }
  private static Driver createDriver(  HiveConf conf){
    HiveConf.setBoolVar(conf,HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
    SessionState.start(conf);
    Driver driver=new Driver(conf);
    driver.init();
    return driver;
  }
}
