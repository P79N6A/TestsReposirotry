public static class GenericUDAFExecutor {
  private GenericUDAFResolver2 evaluatorFactory;
  private GenericUDAFParameterInfo info;
  private ObjectInspector[] partialOIs;
  public GenericUDAFExecutor(  GenericUDAFResolver2 evaluatorFactory,  GenericUDAFParameterInfo info) throws Exception {
    this.evaluatorFactory=evaluatorFactory;
    this.info=info;
    GenericUDAFEvaluator eval0=evaluatorFactory.getEvaluator(info);
    partialOIs=new ObjectInspector[]{eval0.init(GenericUDAFEvaluator.Mode.PARTIAL1,info.getParameterObjectInspectors())};
  }
  List<Object> run(  List<Object[]> values) throws Exception {
    Object r1=runComplete(values);
    Object r2=runPartialFinal(values);
    Object r3=runPartial2Final(values);
    return Lists.newArrayList(r1,r2,r3);
  }
  private Object runComplete(  List<Object[]> values) throws SemanticException, HiveException {
    GenericUDAFEvaluator eval=evaluatorFactory.getEvaluator(info);
    eval.init(GenericUDAFEvaluator.Mode.COMPLETE,info.getParameterObjectInspectors());
    AggregationBuffer agg=eval.getNewAggregationBuffer();
    for (    Object[] parameters : values) {
      eval.iterate(agg,parameters);
    }
    return eval.terminate(agg);
  }
  private Object runPartialFinal(  List<Object[]> values) throws Exception {
    GenericUDAFEvaluator eval=evaluatorFactory.getEvaluator(info);
    eval.init(GenericUDAFEvaluator.Mode.FINAL,partialOIs);
    AggregationBuffer buf=eval.getNewAggregationBuffer();
    for (    Object partialResult : runPartial1(values)) {
      eval.merge(buf,partialResult);
    }
    return eval.terminate(buf);
  }
  private Object runPartial2Final(  List<Object[]> values) throws Exception {
    GenericUDAFEvaluator eval=evaluatorFactory.getEvaluator(info);
    eval.init(GenericUDAFEvaluator.Mode.FINAL,partialOIs);
    AggregationBuffer buf=eval.getNewAggregationBuffer();
    for (    Object partialResult : runPartial2(runPartial1(values))) {
      eval.merge(buf,partialResult);
    }
    return eval.terminate(buf);
  }
  private List<Object> runPartial1(  List<Object[]> values) throws Exception {
    List<Object> ret=new ArrayList<>();
    int batchSize=1;
    Iterator<Object[]> iter=values.iterator();
    do {
      GenericUDAFEvaluator eval=evaluatorFactory.getEvaluator(info);
      eval.init(GenericUDAFEvaluator.Mode.PARTIAL1,info.getParameterObjectInspectors());
      AggregationBuffer buf=eval.getNewAggregationBuffer();
      for (int i=0; i < batchSize - 1 && iter.hasNext(); i++) {
        eval.iterate(buf,iter.next());
      }
      batchSize<<=1;
      ret.add(eval.terminatePartial(buf));
    }
 while (iter.hasNext());
    return ret;
  }
  private List<Object> runPartial2(  List<Object> values) throws Exception {
    List<Object> ret=new ArrayList<>();
    int batchSize=1;
    Iterator<Object> iter=values.iterator();
    do {
      GenericUDAFEvaluator eval=evaluatorFactory.getEvaluator(info);
      eval.init(GenericUDAFEvaluator.Mode.PARTIAL2,partialOIs);
      AggregationBuffer buf=eval.getNewAggregationBuffer();
      for (int i=0; i < batchSize - 1 && iter.hasNext(); i++) {
        eval.merge(buf,iter.next());
      }
      batchSize<<=1;
      ret.add(eval.terminatePartial(buf));
    }
 while (iter.hasNext());
    return ret;
  }
}
