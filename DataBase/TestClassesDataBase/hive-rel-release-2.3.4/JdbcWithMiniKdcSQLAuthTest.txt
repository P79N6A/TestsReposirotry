public abstract class JdbcWithMiniKdcSQLAuthTest {
  private static MiniHS2 miniHS2=null;
  private static MiniHiveKdc miniHiveKdc=null;
  private Connection hs2Conn;
  protected static HiveConf hiveConf=new HiveConf();
  public static void beforeTestBase() throws Exception {
    System.err.println("Testing using HS2 mode:" + hiveConf.getVar(ConfVars.HIVE_SERVER2_TRANSPORT_MODE));
    Class.forName(MiniHS2.getJdbcDriverName());
    hiveConf.setVar(ConfVars.HIVE_AUTHORIZATION_MANAGER,SQLStdHiveAuthorizerFactory.class.getName());
    hiveConf.setVar(ConfVars.HIVE_AUTHENTICATOR_MANAGER,SessionStateUserAuthenticator.class.getName());
    hiveConf.setBoolVar(ConfVars.HIVE_AUTHORIZATION_ENABLED,true);
    hiveConf.setBoolVar(ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
    hiveConf.setBoolVar(ConfVars.HIVE_SERVER2_ENABLE_DOAS,false);
    miniHiveKdc=MiniHiveKdc.getMiniHiveKdc(hiveConf);
    miniHS2=MiniHiveKdc.getMiniHS2WithKerb(miniHiveKdc,hiveConf);
    miniHS2.start(new HashMap<String,String>());
  }
  @Before public void setUp() throws Exception {
  }
  @After public void tearDown() throws Exception {
    if (hs2Conn != null) {
      try {
        hs2Conn.close();
      }
 catch (      Exception e) {
      }
    }
  }
  @AfterClass public static void afterTest() throws Exception {
    miniHS2.stop();
  }
  @Test public void testAuthorization1() throws Exception {
    String tableName1="test_jdbc_sql_auth1";
    String tableName2="test_jdbc_sql_auth2";
{
      Connection hs2Conn=getConnection(MiniHiveKdc.HIVE_TEST_USER_1);
      Statement stmt=hs2Conn.createStatement();
      stmt.execute("drop table if exists " + tableName1);
      stmt.execute("drop table if exists " + tableName2);
      stmt.execute("create table " + tableName1 + "(i int) ");
      stmt.execute("create table " + tableName2 + "(i int) ");
      stmt.execute("grant select on table " + tableName2 + " to user "+ MiniHiveKdc.HIVE_TEST_USER_2);
      stmt.close();
      hs2Conn.close();
    }
{
      Connection hs2Conn=getConnection((MiniHiveKdc.HIVE_TEST_USER_1));
      Statement stmt=hs2Conn.createStatement();
      stmt.execute("drop table " + tableName1);
    }
{
      Connection hs2Conn=getConnection((MiniHiveKdc.HIVE_TEST_USER_2));
      try {
        Statement stmt=hs2Conn.createStatement();
        stmt.execute("drop table " + tableName2);
        fail("Exception due to authorization failure is expected");
      }
 catch (      SQLException e) {
        String msg=e.getMessage();
        System.err.println("Got SQLException with message " + msg);
        assertTrue("Checking permission denied error",msg.contains("user2"));
        assertTrue("Checking permission denied error",msg.contains(tableName2));
        assertTrue("Checking permission denied error",msg.contains("OBJECT OWNERSHIP"));
      }
    }
{
      Connection hs2Conn=getConnection((MiniHiveKdc.HIVE_TEST_USER_2));
      Statement stmt=hs2Conn.createStatement();
      stmt.execute(" desc " + tableName2);
    }
  }
  private Connection getConnection(  String userName) throws Exception {
    miniHiveKdc.loginUser(userName);
    return DriverManager.getConnection(miniHS2.getJdbcURL());
  }
}
