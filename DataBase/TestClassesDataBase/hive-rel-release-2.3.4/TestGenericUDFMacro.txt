public class TestGenericUDFMacro {
  private String name;
  private GenericUDFMacro udf;
  private List<String> colNames;
  private List<TypeInfo> colTypes;
  private ObjectInspector[] inspectors;
  private DeferredObject[] arguments;
  private IntWritable x;
  private IntWritable y;
  private ExprNodeConstantDesc bodyDesc;
  private int expected;
  @Before public void setup() throws Exception {
    name="fixed_number";
    colNames=new ArrayList<String>();
    colTypes=new ArrayList<TypeInfo>();
    colNames.add("x");
    colTypes.add(TypeInfoFactory.intTypeInfo);
    colNames.add("y");
    colTypes.add(TypeInfoFactory.intTypeInfo);
    x=new IntWritable(1);
    y=new IntWritable(2);
    expected=x.get() + y.get();
    bodyDesc=new ExprNodeConstantDesc(expected);
    inspectors=new ObjectInspector[]{PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(TypeInfoFactory.intTypeInfo,x),PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(TypeInfoFactory.intTypeInfo,y)};
    arguments=new DeferredObject[]{new DeferredJavaObject(x),new DeferredJavaObject(y)};
  }
  @Test public void testUDF() throws Exception {
    udf=new GenericUDFMacro(name,bodyDesc,colNames,colTypes);
    udf.initialize(inspectors);
    Object actual=udf.evaluate(arguments);
    Assert.assertEquals(bodyDesc.getValue(),((IntWritable)actual).get());
    Assert.assertTrue(udf.isDeterministic());
    Assert.assertFalse(udf.isStateful());
    Assert.assertEquals(name,udf.getMacroName());
    Assert.assertEquals(bodyDesc,udf.getBody());
    Assert.assertEquals(colNames,udf.getColNames());
    Assert.assertEquals(colTypes,udf.getColTypes());
    Assert.assertEquals(name + "(x, y)",udf.getDisplayString(new String[]{"x","y"}));
  }
  @Test public void testNoArgsContructor() throws Exception {
    udf=new GenericUDFMacro();
    Assert.assertTrue(udf.isDeterministic());
    Assert.assertFalse(udf.isStateful());
  }
}
