public class TestHiveDecimalOrcSerializationUtils extends HiveDecimalTestBase {
  @Test @Concurrent(count=4) public void testSerializationUtilsWriteRead(){
    testSerializationUtilsWriteRead("0.00");
    testSerializationUtilsWriteRead("1");
    testSerializationUtilsWriteRead("234.79");
    testSerializationUtilsWriteRead("-12.25");
    testSerializationUtilsWriteRead("99999999999999999999999999999999");
    testSerializationUtilsWriteRead("-99999999999999999999999999999999");
    testSerializationUtilsWriteRead("99999999999999999999999999999999999999");
    testSerializationUtilsWriteRead("-99999999999999999999999999999999999999");
    testSerializationUtilsWriteRead("999999999999.99999999999999999999");
    testSerializationUtilsWriteRead("-999999.99999999999999999999999999");
    testSerializationUtilsWriteRead("9999999999999999999999.9999999999999999");
    testSerializationUtilsWriteRead("-9999999999999999999999999999999.9999999");
    testSerializationUtilsWriteRead("4611686018427387903");
    testSerializationUtilsWriteRead("-4611686018427387903");
    testSerializationUtilsWriteRead("4611686018427387904");
    testSerializationUtilsWriteRead("-4611686018427387904");
    testSerializationUtilsWriteRead("42535295865117307932921825928971026431");
    testSerializationUtilsWriteRead("-42535295865117307932921825928971026431");
    testSerializationUtilsWriteRead("42535295865117307932921825928971026432");
    testSerializationUtilsWriteRead("-42535295865117307932921825928971026432");
    testSerializationUtilsWriteRead("54216721532321902598.70");
    testSerializationUtilsWriteRead("-906.62545207002374150309544832320");
  }
  private void testSerializationUtilsWriteRead(  String string){
    HiveDecimal dec=HiveDecimal.create(string);
    assertTrue(dec != null);
    BigInteger bigInteger=dec.unscaledValue();
    int scale=dec.scale();
    HiveDecimalV1 oldDec=HiveDecimalV1.create(string);
    assertTrue(oldDec != null);
    BigInteger oldBigInteger=oldDec.unscaledValue();
    int oldScale=oldDec.scale();
    long[] scratchLongs=new long[HiveDecimal.SCRATCH_LONGS_LEN];
    int which=0;
    try {
      ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
      if (!dec.serializationUtilsWrite(outputStream,scratchLongs)) {
        fail();
      }
      byte[] bytes=outputStream.toByteArray();
      ByteArrayOutputStream outputStreamExpected=new ByteArrayOutputStream();
      SerializationUtils.writeBigInteger(outputStreamExpected,bigInteger);
      byte[] bytesExpected=outputStreamExpected.toByteArray();
      if (!StringExpr.equal(bytes,0,bytes.length,bytesExpected,0,bytesExpected.length)) {
      }
      which=1;
      ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);
      BigInteger deserializedBigInteger=SerializationUtils.readBigInteger(byteArrayInputStream);
      which=2;
      ByteArrayInputStream byteArrayInputStreamExpected=new ByteArrayInputStream(bytesExpected);
      BigInteger deserializedBigIntegerExpected=SerializationUtils.readBigInteger(byteArrayInputStreamExpected);
      if (!deserializedBigInteger.equals(deserializedBigIntegerExpected)) {
        fail();
      }
      which=3;
      ByteArrayInputStream byteArrayInputStreamRead=new ByteArrayInputStream(bytes);
      byte[] scratchBytes=new byte[HiveDecimal.SCRATCH_BUFFER_LEN_SERIALIZATION_UTILS_READ];
      HiveDecimal readHiveDecimal=HiveDecimal.serializationUtilsRead(byteArrayInputStreamRead,scale,scratchBytes);
      assertTrue(readHiveDecimal != null);
      assertEquals(readHiveDecimal.toString(),dec.toString());
      assertEquals(readHiveDecimal,dec);
    }
 catch (    IOException e) {
      fail();
    }
  }
  @Test public void testRandomSerializationUtilsRead() throws IOException {
    doTestRandomSerializationUtilsRead(standardAlphabet);
  }
  @Test public void testRandomSerializationUtilsReadSparse() throws IOException {
    for (    String digitAlphabet : sparseAlphabets) {
      doTestRandomSerializationUtilsRead(digitAlphabet);
    }
  }
  private void doTestRandomSerializationUtilsRead(  String digitAlphabet) throws IOException {
    Random r=new Random(2389);
    for (int i=0; i < POUND_FACTOR; i++) {
      BigInteger bigInteger=randHiveBigInteger(r,digitAlphabet);
      doTestSerializationUtilsRead(r,bigInteger);
    }
  }
  @Test public void testSerializationUtilsReadSpecial() throws IOException {
    Random r=new Random(9923);
    for (    BigDecimal bigDecimal : specialBigDecimals) {
      doTestSerializationUtilsRead(r,bigDecimal.unscaledValue());
    }
  }
  private void doTestSerializationUtilsRead(  Random r,  BigInteger bigInteger) throws IOException {
    HiveDecimalV1 oldDec=HiveDecimalV1.create(bigInteger);
    if (oldDec != null && isTenPowerBug(oldDec.toString())) {
      return;
    }
    HiveDecimal dec=HiveDecimal.create(bigInteger);
    if (oldDec == null) {
      assertTrue(dec == null);
      return;
    }
    assertTrue(dec != null);
    dec.validate();
    Assert.assertEquals(bigInteger,oldDec.unscaledValue());
    Assert.assertEquals(bigInteger,dec.unscaledValue());
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    SerializationUtils.writeBigInteger(outputStream,bigInteger);
    byte[] bytes=outputStream.toByteArray();
    ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);
    BigInteger deserializedBigInteger=SerializationUtils.readBigInteger(byteArrayInputStream);
    Assert.assertEquals(bigInteger,deserializedBigInteger);
    byte[] scratchBytes=new byte[HiveDecimal.SCRATCH_BUFFER_LEN_SERIALIZATION_UTILS_READ];
    byteArrayInputStream=new ByteArrayInputStream(bytes);
    HiveDecimal resultDec=dec.serializationUtilsRead(byteArrayInputStream,dec.scale(),scratchBytes);
    assertTrue(resultDec != null);
    resultDec.validate();
    Assert.assertEquals(dec.toString(),resultDec.toString());
    int scale=0 + r.nextInt(38 + 1);
    BigDecimal bigDecimal=new BigDecimal(bigInteger,scale);
    oldDec=HiveDecimalV1.create(bigDecimal);
    dec=HiveDecimal.create(bigDecimal);
    if (oldDec == null) {
      assertTrue(dec == null);
      return;
    }
    assertTrue(dec != null);
    dec.validate();
    outputStream=new ByteArrayOutputStream();
    SerializationUtils.writeBigInteger(outputStream,dec.unscaledValue());
    bytes=outputStream.toByteArray();
    byteArrayInputStream=new ByteArrayInputStream(bytes);
    resultDec=dec.serializationUtilsRead(byteArrayInputStream,dec.scale(),scratchBytes);
    assertTrue(resultDec != null);
    resultDec.validate();
    Assert.assertEquals(dec.toString(),resultDec.toString());
  }
  @Test public void testRandomSerializationUtilsWrite() throws IOException {
    doTestRandomSerializationUtilsWrite(standardAlphabet,false);
  }
  @Test public void testRandomSerializationUtilsWriteFractionsOnly() throws IOException {
    doTestRandomSerializationUtilsWrite(standardAlphabet,true);
  }
  @Test public void testRandomSerializationUtilsWriteSparse() throws IOException {
    for (    String digitAlphabet : sparseAlphabets) {
      doTestRandomSerializationUtilsWrite(digitAlphabet,false);
    }
  }
  private void doTestRandomSerializationUtilsWrite(  String digitAlphabet,  boolean fractionsOnly) throws IOException {
    Random r=new Random(823);
    for (int i=0; i < POUND_FACTOR; i++) {
      BigInteger bigInteger=randHiveBigInteger(r,digitAlphabet);
      doTestSerializationUtilsWrite(r,bigInteger);
    }
  }
  @Test public void testSerializationUtilsWriteSpecial() throws IOException {
    Random r=new Random(998737);
    for (    BigDecimal bigDecimal : specialBigDecimals) {
      doTestSerializationUtilsWrite(r,bigDecimal.unscaledValue());
    }
  }
  private void doTestSerializationUtilsWrite(  Random r,  BigInteger bigInteger) throws IOException {
    HiveDecimalV1 oldDec=HiveDecimalV1.create(bigInteger);
    if (oldDec != null && isTenPowerBug(oldDec.toString())) {
      return;
    }
    HiveDecimal dec=HiveDecimal.create(bigInteger);
    if (oldDec == null) {
      assertTrue(dec == null);
      return;
    }
    assertTrue(dec != null);
    dec.validate();
    Assert.assertEquals(bigInteger,oldDec.unscaledValue());
    Assert.assertEquals(bigInteger,dec.unscaledValue());
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    SerializationUtils.writeBigInteger(outputStream,bigInteger);
    byte[] bytes=outputStream.toByteArray();
    ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);
    BigInteger deserializedBigInteger=SerializationUtils.readBigInteger(byteArrayInputStream);
    Assert.assertEquals(bigInteger,deserializedBigInteger);
    ByteArrayOutputStream decOutputStream=new ByteArrayOutputStream();
    long[] scratchLongs=new long[HiveDecimal.SCRATCH_LONGS_LEN];
    boolean successful=dec.serializationUtilsWrite(decOutputStream,scratchLongs);
    Assert.assertTrue(successful);
    byte[] decBytes=decOutputStream.toByteArray();
    if (!StringExpr.equal(bytes,0,bytes.length,decBytes,0,decBytes.length)) {
    }
    ByteArrayInputStream decByteArrayInputStream=new ByteArrayInputStream(decBytes);
    BigInteger decDeserializedBigInteger=SerializationUtils.readBigInteger(decByteArrayInputStream);
    Assert.assertEquals(bigInteger,decDeserializedBigInteger);
  }
}
