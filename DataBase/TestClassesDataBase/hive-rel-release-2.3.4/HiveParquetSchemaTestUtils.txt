public class HiveParquetSchemaTestUtils {
  public static List<String> createHiveColumnsFrom(  final String columnNamesStr){
    List<String> columnNames;
    if (columnNamesStr.length() == 0) {
      columnNames=new ArrayList<String>();
    }
 else {
      columnNames=Arrays.asList(columnNamesStr.split(","));
    }
    return columnNames;
  }
  public static List<TypeInfo> createHiveTypeInfoFrom(  final String columnsTypeStr){
    List<TypeInfo> columnTypes;
    if (columnsTypeStr.length() == 0) {
      columnTypes=new ArrayList<TypeInfo>();
    }
 else {
      columnTypes=TypeInfoUtils.getTypeInfosFromTypeString(columnsTypeStr);
    }
    return columnTypes;
  }
  public static void testConversion(  final String columnNamesStr,  final String columnsTypeStr,  final String actualSchema) throws Exception {
    final List<String> columnNames=createHiveColumnsFrom(columnNamesStr);
    final List<TypeInfo> columnTypes=createHiveTypeInfoFrom(columnsTypeStr);
    final MessageType messageTypeFound=HiveSchemaConverter.convert(columnNames,columnTypes);
    final MessageType expectedMT=MessageTypeParser.parseMessageType(actualSchema);
    assertEquals("converting " + columnNamesStr + ": "+ columnsTypeStr+ " to "+ actualSchema,expectedMT,messageTypeFound);
    List<Type> expectedFields=expectedMT.getFields();
    List<Type> actualFields=messageTypeFound.getFields();
    for (int i=0, n=expectedFields.size(); i < n; ++i) {
      OriginalType exp=expectedFields.get(i).getOriginalType();
      OriginalType act=actualFields.get(i).getOriginalType();
      assertEquals("Original types of the field do not match",exp,act);
    }
  }
}
