/** 
 * Test CLI service with a retrying client. All tests should pass. This is to validate that calls are transferred successfully.
 */
public class TestRetryingThriftCLIServiceClient {
  protected static ThriftCLIService service;
  private HiveConf hiveConf;
  private HiveServer2 server;
  @Before public void init(){
    hiveConf=new HiveConf();
    hiveConf.setVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_BIND_HOST,"localhost");
    hiveConf.setIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_PORT,15000);
    hiveConf.setBoolVar(HiveConf.ConfVars.HIVE_SERVER2_ENABLE_DOAS,false);
    hiveConf.setVar(HiveConf.ConfVars.HIVE_SERVER2_AUTHENTICATION,HiveAuthFactory.AuthTypes.NONE.toString());
    hiveConf.setVar(HiveConf.ConfVars.HIVE_SERVER2_TRANSPORT_MODE,"binary");
    hiveConf.setIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_CLIENT_RETRY_LIMIT,3);
    hiveConf.setIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_CLIENT_CONNECTION_RETRY_LIMIT,3);
    hiveConf.setIntVar(HiveConf.ConfVars.HIVE_SERVER2_ASYNC_EXEC_THREADS,10);
    hiveConf.setVar(HiveConf.ConfVars.HIVE_SERVER2_ASYNC_EXEC_SHUTDOWN_TIMEOUT,"1s");
    hiveConf.setVar(HiveConf.ConfVars.HIVE_AUTHORIZATION_MANAGER,"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory");
  }
  private void startHiveServer() throws InterruptedException {
    server=new HiveServer2();
    server.init(hiveConf);
    server.start();
    Thread.sleep(5000);
    System.out.println("## HiveServer started");
  }
  private void stopHiveServer(){
    if (server != null) {
      server.stop();
    }
  }
static class RetryingThriftCLIServiceClientTest extends RetryingThriftCLIServiceClient {
    int callCount=0;
    int connectCount=0;
    static RetryingThriftCLIServiceClientTest handlerInst;
    protected RetryingThriftCLIServiceClientTest(    HiveConf conf){
      super(conf);
    }
    public static CLIServiceClientWrapper newRetryingCLIServiceClient(    HiveConf conf) throws HiveSQLException {
      handlerInst=new RetryingThriftCLIServiceClientTest(conf);
      TTransport tTransport=handlerInst.connectWithRetry(conf.getIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_CLIENT_RETRY_LIMIT));
      ICLIService cliService=(ICLIService)Proxy.newProxyInstance(RetryingThriftCLIServiceClientTest.class.getClassLoader(),CLIServiceClient.class.getInterfaces(),handlerInst);
      return new CLIServiceClientWrapper(cliService,tTransport,conf);
    }
    @Override protected InvocationResult invokeInternal(    Method method,    Object[] args) throws Throwable {
      System.out.println("## Calling: " + method.getName() + ", "+ callCount+ "/"+ getRetryLimit());
      callCount++;
      return super.invokeInternal(method,args);
    }
    @Override protected synchronized TTransport connect(    HiveConf conf) throws HiveSQLException, TTransportException {
      connectCount++;
      return super.connect(conf);
    }
  }
  @Test public void testRetryBehaviour() throws Exception {
    startHiveServer();
    hiveConf.setIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_PORT,17000);
    try {
      RetryingThriftCLIServiceClientTest.newRetryingCLIServiceClient(hiveConf);
      fail("Expected to throw exception for invalid port");
    }
 catch (    HiveSQLException sqlExc) {
      assertTrue(sqlExc.getCause() instanceof TTransportException);
      assertTrue(sqlExc.getMessage().contains("3"));
    }
    hiveConf.setIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_PORT,15000);
    RetryingThriftCLIServiceClient.CLIServiceClientWrapper cliServiceClient=RetryingThriftCLIServiceClientTest.newRetryingCLIServiceClient(hiveConf);
    System.out.println("## Created client");
    stopHiveServer();
    Thread.sleep(5000);
    try {
      RetryingThriftCLIServiceClientTest.handlerInst.callCount=0;
      RetryingThriftCLIServiceClientTest.handlerInst.connectCount=0;
      cliServiceClient.openSession("anonymous","anonymous");
    }
 catch (    HiveSQLException exc) {
      exc.printStackTrace();
      assertTrue(exc.getCause() instanceof TException);
      assertEquals(1,RetryingThriftCLIServiceClientTest.handlerInst.callCount);
      assertEquals(3,RetryingThriftCLIServiceClientTest.handlerInst.connectCount);
    }
 finally {
      cliServiceClient.closeTransport();
    }
  }
  @Test public void testTransportClose() throws InterruptedException, HiveSQLException {
    hiveConf.setIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_CLIENT_CONNECTION_RETRY_LIMIT,0);
    try {
      startHiveServer();
      RetryingThriftCLIServiceClient.CLIServiceClientWrapper client=RetryingThriftCLIServiceClientTest.newRetryingCLIServiceClient(hiveConf);
      client.closeTransport();
      try {
        client.openSession("anonymous","anonymous");
        fail("Shouldn't be able to open session when transport is closed.");
      }
 catch (      HiveSQLException ignored) {
      }
    }
  finally {
      hiveConf.setIntVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_CLIENT_CONNECTION_RETRY_LIMIT,3);
      stopHiveServer();
    }
  }
  @Test public void testSessionLifeAfterTransportClose() throws InterruptedException, HiveSQLException {
    try {
      startHiveServer();
      CLIService service=null;
      for (      Service s : server.getServices()) {
        if (s instanceof CLIService) {
          service=(CLIService)s;
        }
      }
      if (service == null) {
        service=new CLIService(server);
      }
      RetryingThriftCLIServiceClient.CLIServiceClientWrapper client=RetryingThriftCLIServiceClientTest.newRetryingCLIServiceClient(hiveConf);
      Map<String,String> conf=new HashMap<>();
      conf.put(HiveConf.ConfVars.HIVE_SERVER2_CLOSE_SESSION_ON_DISCONNECT.varname,"false");
      SessionHandle sessionHandle=client.openSession("anonymous","anonymous",conf);
      assertNotNull(sessionHandle);
      HiveSession session=service.getSessionManager().getSession(sessionHandle);
      OperationHandle op1=session.executeStatementAsync("show databases",null);
      assertNotNull(op1);
      client.closeTransport();
      assertEquals(session,service.getSessionManager().getSession(sessionHandle));
      OperationHandle op2=session.executeStatementAsync("show databases",null);
      assertNotNull(op2);
      client=RetryingThriftCLIServiceClientTest.newRetryingCLIServiceClient(hiveConf);
      client.closeSession(sessionHandle);
      for (      OperationHandle op : new OperationHandle[]{op1,op2}) {
        try {
          client.getOperationStatus(op,false);
          fail("Should have failed.");
        }
 catch (        HiveSQLException ignored) {
        }
      }
    }
  finally {
      stopHiveServer();
    }
  }
}
