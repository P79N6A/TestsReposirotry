/** 
 */
public class TestAccumuloSerDeParameters {
  @Test public void testParseColumnVisibility() throws SerDeException {
    Properties properties=new Properties();
    Configuration conf=new Configuration();
    properties.setProperty(AccumuloSerDeParameters.COLUMN_MAPPINGS,":rowid,cf:f2,cf:f3");
    properties.setProperty(serdeConstants.LIST_COLUMNS,"field1,field2,field3");
    properties.setProperty(serdeConstants.LIST_TYPE_NAME,"string,string,string");
    properties.setProperty(AccumuloSerDeParameters.VISIBILITY_LABEL_KEY,"foo&bar");
    AccumuloSerDeParameters params=new AccumuloSerDeParameters(conf,properties,AccumuloSerDe.class.getName());
    ColumnVisibility cv=params.getTableVisibilityLabel();
    Assert.assertEquals(new ColumnVisibility("foo&bar"),cv);
  }
  @Test public void testParseAuthorizationsFromConf() throws SerDeException {
    Configuration conf=new Configuration(false);
    conf.set(AccumuloSerDeParameters.AUTHORIZATIONS_KEY,"foo,bar");
    Authorizations auths=AccumuloSerDeParameters.getAuthorizationsFromConf(conf);
    Assert.assertEquals(new Authorizations("foo,bar"),auths);
  }
  @Test public void testParseAuthorizationsFromnProperties() throws SerDeException {
    Configuration conf=new Configuration();
    Properties properties=new Properties();
    properties.setProperty(AccumuloSerDeParameters.COLUMN_MAPPINGS,":rowid,cf:f2,cf:f3");
    properties.setProperty(serdeConstants.LIST_COLUMNS,"field1,field2,field3");
    properties.setProperty(serdeConstants.LIST_COLUMN_TYPES,"string,string,string");
    properties.setProperty(AccumuloSerDeParameters.AUTHORIZATIONS_KEY,"foo,bar");
    AccumuloSerDeParameters params=new AccumuloSerDeParameters(conf,properties,AccumuloSerDe.class.getName());
    Authorizations auths=params.getAuthorizations();
    Assert.assertEquals(new Authorizations("foo,bar"),auths);
  }
  @Test public void testNullAuthsFromProperties() throws SerDeException {
    Configuration conf=new Configuration();
    Properties properties=new Properties();
    properties.setProperty(AccumuloSerDeParameters.COLUMN_MAPPINGS,":rowid,cf:f2,cf:f3");
    properties.setProperty(serdeConstants.LIST_COLUMNS,"field1,field2,field3");
    properties.setProperty(serdeConstants.LIST_COLUMN_TYPES,"string,string,string");
    AccumuloSerDeParameters params=new AccumuloSerDeParameters(conf,properties,AccumuloSerDe.class.getName());
    Authorizations auths=params.getAuthorizations();
    Assert.assertNull(auths);
  }
  @Test public void testNullAuthsFromConf() throws SerDeException {
    Configuration conf=new Configuration(false);
    Authorizations auths=AccumuloSerDeParameters.getAuthorizationsFromConf(conf);
    Assert.assertNull(auths);
  }
}
