private static class RowWithRecID implements Row {
  private RecordIdentifier recId;
  private Text partVal;
  public RowWithRecID(){
  }
  public RowWithRecID(  RecordIdentifier recId,  Text partVal){
    super();
    this.recId=recId;
    this.partVal=partVal;
  }
  @Override public Row clone() throws CloneNotSupportedException {
    return new RowWithRecID(this.recId,this.partVal);
  }
  @Override public void write(  DataOutput dataOutput) throws IOException {
    if (partVal == null) {
      dataOutput.writeBoolean(false);
    }
 else {
      dataOutput.writeBoolean(true);
      partVal.write(dataOutput);
    }
    if (recId == null) {
      dataOutput.writeBoolean(false);
    }
 else {
      dataOutput.writeBoolean(true);
      recId.write(dataOutput);
    }
  }
  @Override public void readFields(  DataInput dataInput) throws IOException {
    boolean notNull=dataInput.readBoolean();
    if (notNull) {
      partVal=new Text();
      partVal.readFields(dataInput);
    }
    notNull=dataInput.readBoolean();
    if (notNull) {
      recId=new RecordIdentifier();
      recId.readFields(dataInput);
    }
  }
  @Override public int compareTo(  Row row){
    RowWithRecID other=(RowWithRecID)row;
    if (recId == null && other.recId == null) {
      return comparePartVal(other);
    }
 else     if (recId == null) {
      return -1;
    }
 else {
      int rc=recId.compareTo(other.recId);
      if (rc == 0)       return comparePartVal(other);
 else       return rc;
    }
  }
  private int comparePartVal(  RowWithRecID other){
    return partVal.compareTo(other.partVal);
  }
  @Override public boolean equals(  Object obj){
    return compareTo((RowWithRecID)obj) == 0;
  }
}
