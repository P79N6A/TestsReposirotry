/** 
 * Unit tests for vectorized arithmetic expressions.
 */
public class TestVectorArithmeticExpressions {
  @Test public void testLongColAddLongScalarNoNulls(){
    VectorizedRowBatch vrg=getVectorizedRowBatchSingleLongVector(VectorizedRowBatch.DEFAULT_SIZE);
    LongColAddLongScalar expr=new LongColAddLongScalar(0,23,1);
    expr.evaluate(vrg);
    for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; i++) {
      Assert.assertEquals(i * 37 + 23,((LongColumnVector)vrg.cols[1]).vector[i]);
    }
    Assert.assertTrue(((LongColumnVector)vrg.cols[1]).noNulls);
    Assert.assertFalse(((LongColumnVector)vrg.cols[1]).isRepeating);
  }
  private VectorizedRowBatch getVectorizedRowBatchSingleLongVector(  int size){
    VectorizedRowBatch vrg=new VectorizedRowBatch(2,size);
    LongColumnVector lcv=new LongColumnVector(size);
    for (int i=0; i < size; i++) {
      lcv.vector[i]=i * 37;
    }
    vrg.cols[0]=lcv;
    vrg.cols[1]=new LongColumnVector(size);
    vrg.size=size;
    return vrg;
  }
  public static VectorizedRowBatch getVectorizedRowBatch2LongInDoubleOut(){
    VectorizedRowBatch batch=new VectorizedRowBatch(3);
    LongColumnVector lcv, lcv2;
    lcv=new LongColumnVector();
    for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; i++) {
      lcv.vector[i]=i * 37;
    }
    batch.cols[0]=lcv;
    lcv2=new LongColumnVector();
    batch.cols[1]=lcv2;
    for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; i++) {
      lcv2.vector[i]=i * 37;
    }
    batch.cols[2]=new DoubleColumnVector();
    batch.size=VectorizedRowBatch.DEFAULT_SIZE;
    return batch;
  }
  @Test public void testLongColAddLongScalarWithNulls(){
    VectorizedRowBatch batch=getVectorizedRowBatchSingleLongVector(VectorizedRowBatch.DEFAULT_SIZE);
    LongColumnVector lcv=(LongColumnVector)batch.cols[0];
    LongColumnVector lcvOut=(LongColumnVector)batch.cols[1];
    TestVectorizedRowBatch.addRandomNulls(lcv);
    LongColAddLongScalar expr=new LongColAddLongScalar(0,23,1);
    expr.evaluate(batch);
    for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; i++) {
      if (!lcv.isNull[i]) {
        Assert.assertEquals(i * 37 + 23,lcvOut.vector[i]);
      }
 else {
        Assert.assertTrue(lcvOut.isNull[i]);
      }
    }
    Assert.assertFalse(lcvOut.noNulls);
    Assert.assertFalse(lcvOut.isRepeating);
    verifyLongNullDataVectorEntries(lcvOut,batch.selected,batch.selectedInUse,batch.size);
  }
  @Test public void testLongColAddLongScalarWithRepeating(){
    LongColumnVector in, out;
    VectorizedRowBatch batch;
    LongColAddLongScalar expr;
    batch=getVectorizedRowBatchSingleLongVector(VectorizedRowBatch.DEFAULT_SIZE);
    in=(LongColumnVector)batch.cols[0];
    in.isRepeating=true;
    out=(LongColumnVector)batch.cols[1];
    out.isRepeating=false;
    expr=new LongColAddLongScalar(0,23,1);
    expr.evaluate(batch);
    Assert.assertTrue(out.isRepeating);
    Assert.assertTrue(out.noNulls);
    Assert.assertEquals(out.vector[0],0 * 37 + 23);
    batch=getVectorizedRowBatchSingleLongVector(VectorizedRowBatch.DEFAULT_SIZE);
    in=(LongColumnVector)batch.cols[0];
    in.isRepeating=true;
    in.noNulls=false;
    in.isNull[0]=true;
    out=(LongColumnVector)batch.cols[1];
    out.isRepeating=false;
    out.isNull[0]=false;
    out.noNulls=true;
    expr=new LongColAddLongScalar(0,23,1);
    expr.evaluate(batch);
    Assert.assertTrue(out.isRepeating);
    Assert.assertFalse(out.noNulls);
    Assert.assertEquals(true,out.isNull[0]);
    verifyLongNullDataVectorEntries(out,batch.selected,batch.selectedInUse,batch.size);
  }
  public static void verifyLongNullDataVectorEntries(  LongColumnVector v,  int[] sel,  boolean selectedInUse,  int n){
    if (n == 0 || v.noNulls) {
      return;
    }
 else     if (v.isRepeating) {
      if (v.isNull[0]) {
        assertEquals(LongColumnVector.NULL_VALUE,v.vector[0]);
      }
    }
 else     if (selectedInUse) {
      for (int j=0; j != n; j++) {
        int i=sel[j];
        if (v.isNull[i]) {
          assertEquals(LongColumnVector.NULL_VALUE,v.vector[i]);
        }
      }
    }
 else {
      for (int i=0; i != n; i++) {
        if (v.isNull[i]) {
          assertEquals(LongColumnVector.NULL_VALUE,v.vector[i]);
        }
      }
    }
  }
  @Test public void testLongColAddLongColumn(){
    int seed=17;
    VectorizedRowBatch vrg=VectorizedRowGroupGenUtil.getVectorizedRowBatch(VectorizedRowBatch.DEFAULT_SIZE,6,seed);
    LongColumnVector lcv0=(LongColumnVector)vrg.cols[0];
    LongColumnVector lcv1=(LongColumnVector)vrg.cols[1];
    LongColumnVector lcv2=(LongColumnVector)vrg.cols[2];
    LongColumnVector lcv3=(LongColumnVector)vrg.cols[3];
    LongColumnVector lcv4=(LongColumnVector)vrg.cols[4];
    LongColumnVector lcv5=(LongColumnVector)vrg.cols[5];
    LongColAddLongColumn expr=new LongColAddLongColumn(0,1,2);
    expr.evaluate(vrg);
    for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; i++) {
      assertEquals((i + 1) * seed * 3,lcv2.vector[i]);
    }
    assertTrue(lcv2.noNulls);
    lcv1.noNulls=false;
    lcv1.isNull[1]=true;
    lcv2.isRepeating=true;
    lcv2.noNulls=true;
    expr.evaluate(vrg);
    assertTrue(lcv2.isNull[1]);
    assertFalse(lcv2.noNulls);
    assertFalse(lcv2.isRepeating);
    verifyLongNullDataVectorEntries(lcv2,vrg.selected,vrg.selectedInUse,vrg.size);
    lcv0.noNulls=false;
    lcv0.isNull[1]=true;
    lcv0.isNull[3]=true;
    expr.evaluate(vrg);
    assertTrue(lcv2.isNull[1]);
    assertTrue(lcv2.isNull[3]);
    assertFalse(lcv2.noNulls);
    verifyLongNullDataVectorEntries(lcv2,vrg.selected,vrg.selectedInUse,vrg.size);
    lcv3.isRepeating=true;
    LongColAddLongColumn expr2=new LongColAddLongColumn(3,4,5);
    expr2.evaluate(vrg);
    for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; i++) {
      assertEquals(seed * (4 + 5 * (i + 1)),lcv5.vector[i]);
    }
    lcv4.noNulls=false;
    lcv4.isNull[0]=true;
    expr2.evaluate(vrg);
    assertTrue(lcv5.isNull[0]);
    assertFalse(lcv5.noNulls);
    verifyLongNullDataVectorEntries(lcv5,vrg.selected,vrg.selectedInUse,vrg.size);
    lcv3.isRepeating=true;
    lcv3.noNulls=false;
    lcv3.isNull[0]=true;
    expr2.evaluate(vrg);
    assertFalse(lcv5.noNulls);
    assertTrue(lcv5.isRepeating);
    assertTrue(lcv5.isNull[0]);
    verifyLongNullDataVectorEntries(lcv5,vrg.selected,vrg.selectedInUse,vrg.size);
    vrg.selectedInUse=false;
    lcv0.noNulls=true;
    lcv1.noNulls=true;
    lcv0.isRepeating=false;
    lcv1.isRepeating=false;
    lcv2.noNulls=false;
    lcv2.isRepeating=true;
    expr.evaluate(vrg);
    assertTrue(lcv2.noNulls);
    assertFalse(lcv2.isRepeating);
  }
  @Test public void testLongColDivideLongColumn(){
    final double eps=1e-7d;
    VectorizedRowBatch batch=getVectorizedRowBatch2LongInDoubleOut();
    LongColDivideLongColumn expr=new LongColDivideLongColumn(0,1,2);
    batch.cols[0].isNull[1]=true;
    batch.cols[0].noNulls=false;
    batch.cols[1].noNulls=false;
    DoubleColumnVector out=(DoubleColumnVector)batch.cols[2];
    out.noNulls=true;
    out.isRepeating=true;
    expr.evaluate(batch);
    assertFalse(out.noNulls);
    assertTrue(out.isNull[0]);
    assertTrue(Double.isNaN(out.vector[0]));
    assertTrue(out.isNull[1]);
    assertTrue(Double.isNaN(out.vector[1]));
    for (int i=2; i != batch.size; i++) {
      assertTrue(out.vector[i] > 1.0d - eps && out.vector[i] < 1.0d + eps);
    }
    assertFalse(out.noNulls);
    assertFalse(out.isRepeating);
  }
  @Test public void testDecimalColAddDecimalColumn(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    VectorExpression expr=new DecimalColAddDecimalColumn(0,1,2);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    expr.evaluate(b);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("2.20")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-2.30")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("1.00")));
    b=getVectorizedRowBatch3DecimalCols();
    DecimalColumnVector c0=(DecimalColumnVector)b.cols[0];
    c0.noNulls=false;
    c0.isNull[0]=true;
    r=(DecimalColumnVector)b.cols[2];
    expr.evaluate(b);
    assertTrue(!r.noNulls && r.isNull[0]);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("0.01")));
    b=getVectorizedRowBatch3DecimalCols();
    c0=(DecimalColumnVector)b.cols[0];
    c0.vector[0].set(HiveDecimal.create("9999999999999999.99"));
    r=(DecimalColumnVector)b.cols[2];
    expr.evaluate(b);
    assertTrue(!r.noNulls && r.isNull[0]);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("0.01")));
    b=getVectorizedRowBatch3DecimalCols();
    c0=(DecimalColumnVector)b.cols[0];
    c0.isRepeating=true;
    r=(DecimalColumnVector)b.cols[2];
    expr.evaluate(b);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("2.20")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("2.20")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("2.20")));
    DecimalColumnVector c1=(DecimalColumnVector)b.cols[1];
    c1.isRepeating=true;
    expr.evaluate(b);
    assertTrue(r.isRepeating);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("2.20")));
    b=getVectorizedRowBatch3DecimalCols();
    c1=(DecimalColumnVector)b.cols[1];
    c1.isRepeating=true;
    c1.vector[0].set(HiveDecimal.create("2.00"));
    r=(DecimalColumnVector)b.cols[2];
    expr.evaluate(b);
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("2.00")));
  }
  @Test public void testDecimalColSubtractDecimalColumn(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    VectorExpression expr=new DecimalColSubtractDecimalColumn(0,1,2);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    expr.evaluate(b);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("0.20")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-4.30")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("-1.00")));
    b=getVectorizedRowBatch3DecimalCols();
    DecimalColumnVector c0=(DecimalColumnVector)b.cols[0];
    c0.vector[0].set(HiveDecimal.create("-9999999999999999.99"));
    r=(DecimalColumnVector)b.cols[2];
    expr.evaluate(b);
    assertTrue(!r.noNulls && r.isNull[0]);
  }
  @Test public void testDecimalColMultiplyDecimalColumn(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    VectorExpression expr=new DecimalColMultiplyDecimalColumn(0,1,2);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    expr.evaluate(b);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("1.20")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-3.30")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("0.00")));
    b=getVectorizedRowBatch3DecimalCols();
    DecimalColumnVector c0=(DecimalColumnVector)b.cols[0];
    c0.vector[0].set(HiveDecimal.create("9999999999999999.99"));
    DecimalColumnVector c1=(DecimalColumnVector)b.cols[1];
    c1.vector[0].set(HiveDecimal.create("2.00"));
    r=(DecimalColumnVector)b.cols[2];
    expr.evaluate(b);
    assertTrue(!r.noNulls && r.isNull[0]);
  }
  @Test public void testDecimalColAddDecimalScalar(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    HiveDecimal d=HiveDecimal.create(1);
    VectorExpression expr=new DecimalColAddDecimalScalar(0,d,2);
    expr.evaluate(b);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("2.20")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-2.30")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("1")));
    b=getVectorizedRowBatch3DecimalCols();
    DecimalColumnVector in=(DecimalColumnVector)b.cols[0];
    r=(DecimalColumnVector)b.cols[2];
    in.noNulls=false;
    in.isNull[0]=true;
    expr.evaluate(b);
    assertTrue(!r.noNulls);
    assertTrue(r.isNull[0]);
    b=getVectorizedRowBatch3DecimalCols();
    in=(DecimalColumnVector)b.cols[0];
    in.isRepeating=true;
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.isRepeating);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("2.20")));
    b=getVectorizedRowBatch3DecimalCols();
    in=(DecimalColumnVector)b.cols[0];
    in.isRepeating=true;
    in.isNull[0]=true;
    in.noNulls=false;
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.isRepeating);
    assertTrue(!r.noNulls);
    assertTrue(r.isNull[0]);
    b=getVectorizedRowBatch3DecimalCols();
    in=(DecimalColumnVector)b.cols[0];
    in.vector[0].set(HiveDecimal.create("9999999999999999.99"));
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertFalse(r.noNulls);
    assertTrue(r.isNull[0]);
  }
  @Test public void testDecimalColDivideDecimalScalar(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    HiveDecimal d=HiveDecimal.create("2.00");
    VectorExpression expr=new DecimalColDivideDecimalScalar(0,d,2);
    expr.evaluate(b);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("0.6")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-1.65")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("0")));
    b=getVectorizedRowBatch3DecimalCols();
    DecimalColumnVector in=(DecimalColumnVector)b.cols[0];
    r=(DecimalColumnVector)b.cols[2];
    in.noNulls=false;
    in.isNull[0]=true;
    expr.evaluate(b);
    assertTrue(!r.noNulls);
    assertTrue(r.isNull[0]);
    b=getVectorizedRowBatch3DecimalCols();
    in=(DecimalColumnVector)b.cols[0];
    in.isRepeating=true;
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.isRepeating);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("0.6")));
    b=getVectorizedRowBatch3DecimalCols();
    in=(DecimalColumnVector)b.cols[0];
    in.isRepeating=true;
    in.isNull[0]=true;
    in.noNulls=false;
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.isRepeating);
    assertTrue(!r.noNulls);
    assertTrue(r.isNull[0]);
    b=getVectorizedRowBatch3DecimalCols();
    in=(DecimalColumnVector)b.cols[0];
    expr=new DecimalColDivideDecimalScalar(0,HiveDecimal.create("0"),2);
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertFalse(r.noNulls);
    assertTrue(r.isNull[0]);
    assertTrue(r.isRepeating);
  }
  @Test public void testDecimalScalarDivideDecimalColumn(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    HiveDecimal d=HiveDecimal.create("3.96");
    VectorExpression expr=new DecimalScalarDivideDecimalColumn(d,0,2);
    expr.evaluate(b);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("3.3")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-1.2")));
    assertFalse(r.noNulls);
    assertTrue(r.isNull[2]);
    b=getVectorizedRowBatch3DecimalCols();
    DecimalColumnVector in=(DecimalColumnVector)b.cols[0];
    r=(DecimalColumnVector)b.cols[2];
    in.noNulls=false;
    in.isNull[0]=true;
    expr.evaluate(b);
    assertTrue(!r.noNulls);
    assertTrue(r.isNull[0]);
    b=getVectorizedRowBatch3DecimalCols();
    in=(DecimalColumnVector)b.cols[0];
    in.isRepeating=true;
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.isRepeating);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("3.3")));
    b=getVectorizedRowBatch3DecimalCols();
    in=(DecimalColumnVector)b.cols[0];
    in.isRepeating=true;
    in.isNull[0]=true;
    in.noNulls=false;
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.isRepeating);
    assertTrue(!r.noNulls);
    assertTrue(r.isNull[0]);
  }
  @Test public void testDecimalColModuloDecimalScalar(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    HiveDecimal d=HiveDecimal.create("2.00");
    VectorExpression expr=new DecimalColModuloDecimalScalar(0,d,2);
    expr.evaluate(b);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("1.20")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-1.30")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("0")));
    DecimalColumnVector in=(DecimalColumnVector)b.cols[0];
    in.vector[0].set(HiveDecimal.create("15.40"));
    in.vector[1].set(HiveDecimal.create("-17.20"));
    in.vector[2].set(HiveDecimal.create("70.00"));
    d=HiveDecimal.create("4.75");
    expr=new DecimalColModuloDecimalScalar(0,d,2);
    expr.evaluate(b);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("1.15")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-2.95")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("3.50")));
    d=HiveDecimal.create("0.00");
    expr=new DecimalColModuloDecimalScalar(0,d,2);
    expr.evaluate(b);
    assertFalse(r.noNulls);
    assertTrue(r.isNull[0]);
    assertTrue(r.isRepeating);
  }
  @Test public void testDecimalScalarModuloDecimalColumn(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    HiveDecimal d=HiveDecimal.create("2.00");
    VectorExpression expr=new DecimalScalarModuloDecimalColumn(d,0,2);
    expr.evaluate(b);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("0.80")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("2.00")));
    assertFalse(r.noNulls);
    assertTrue(r.isNull[2]);
    DecimalColumnVector in=(DecimalColumnVector)b.cols[0];
    expr=new DecimalScalarModuloDecimalColumn(d,0,2);
    in.vector[0].set(HiveDecimal.create("0.50"));
    in.vector[1].set(HiveDecimal.create("0.80"));
    in.vector[2].set(HiveDecimal.create("0.70"));
    expr.evaluate(b);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("0.00")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("0.40")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("0.60")));
  }
  @Test public void testDecimalColDivideDecimalColumn(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    DecimalColumnVector in1=(DecimalColumnVector)b.cols[1];
    for (int i=0; i < 3; i++) {
      in1.vector[i].set(HiveDecimal.create("0.50"));
    }
    VectorExpression expr=new DecimalColDivideDecimalColumn(0,1,2);
    expr.evaluate(b);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("2.4")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-6.6")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("0")));
    b.cols[0].noNulls=false;
    b.cols[0].isNull[0]=true;
    expr.evaluate(b);
    assertFalse(r.noNulls);
    assertTrue(r.isNull[0]);
    b=getVectorizedRowBatch3DecimalCols();
    b.cols[1].noNulls=false;
    b.cols[1].isNull[0]=true;
    r=(DecimalColumnVector)b.cols[2];
    expr.evaluate(b);
    assertFalse(r.noNulls);
    assertTrue(r.isNull[0]);
    b=getVectorizedRowBatch3DecimalCols();
    b.cols[0].noNulls=false;
    b.cols[0].isNull[0]=true;
    b.cols[1].noNulls=false;
    b.cols[1].isNull[0]=true;
    expr.evaluate(b);
    assertFalse(r.noNulls);
    assertTrue(r.isNull[0]);
    assertFalse(r.isNull[1]);
    assertFalse(r.isNull[2]);
    b=getVectorizedRowBatch3DecimalCols();
    b.cols[0].isRepeating=true;
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("1.2")));
    b=getVectorizedRowBatch3DecimalCols();
    b.cols[1].isRepeating=true;
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("0")));
    b=getVectorizedRowBatch3DecimalCols();
    b.cols[0].isRepeating=true;
    b.cols[1].isRepeating=true;
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.isRepeating);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("1.2")));
    b=getVectorizedRowBatch3DecimalCols();
    ((DecimalColumnVector)b.cols[1]).vector[0].set(HiveDecimal.create("0"));
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertFalse(r.noNulls);
    assertTrue(r.isNull[0]);
  }
  @Test public void testDecimalColModuloDecimalColumn(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    DecimalColumnVector in1=(DecimalColumnVector)b.cols[1];
    for (int i=0; i < 3; i++) {
      in1.vector[i].set(HiveDecimal.create("0.50"));
    }
    VectorExpression expr=new DecimalColModuloDecimalColumn(0,1,2);
    expr.evaluate(b);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("0.20")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-0.30")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("0")));
  }
  @Test public void testDecimalColSubtractDecimalScalar(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    HiveDecimal d=HiveDecimal.create(1);
    VectorExpression expr=new DecimalColSubtractDecimalScalar(0,d,2);
    expr.evaluate(b);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("0.20")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-4.30")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("-1")));
    b=getVectorizedRowBatch3DecimalCols();
    DecimalColumnVector in=(DecimalColumnVector)b.cols[0];
    in.vector[0].set(HiveDecimal.create("-9999999999999999.99"));
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertFalse(r.noNulls);
    assertTrue(r.isNull[0]);
  }
  @Test public void testDecimalColMultiplyDecimalScalar(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    HiveDecimal d=HiveDecimal.create(2);
    VectorExpression expr=new DecimalColMultiplyDecimalScalar(0,d,2);
    expr.evaluate(b);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("2.40")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-6.60")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("0")));
    b=getVectorizedRowBatch3DecimalCols();
    DecimalColumnVector in=(DecimalColumnVector)b.cols[0];
    in.vector[0].set(HiveDecimal.create("9999999999999999.99"));
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertFalse(r.noNulls);
    assertTrue(r.isNull[0]);
  }
  @Test public void testDecimalScalarAddDecimalColumn(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    HiveDecimal d=HiveDecimal.create(1);
    VectorExpression expr=new DecimalScalarAddDecimalColumn(d,0,2);
    expr.evaluate(b);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("2.20")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-2.30")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("1")));
    b=getVectorizedRowBatch3DecimalCols();
    DecimalColumnVector in=(DecimalColumnVector)b.cols[0];
    r=(DecimalColumnVector)b.cols[2];
    in.noNulls=false;
    in.isNull[0]=true;
    expr.evaluate(b);
    assertTrue(!r.noNulls);
    assertTrue(r.isNull[0]);
    b=getVectorizedRowBatch3DecimalCols();
    in=(DecimalColumnVector)b.cols[0];
    in.isRepeating=true;
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.isRepeating);
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("2.20")));
    b=getVectorizedRowBatch3DecimalCols();
    in=(DecimalColumnVector)b.cols[0];
    in.isRepeating=true;
    in.isNull[0]=true;
    in.noNulls=false;
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.isRepeating);
    assertTrue(!r.noNulls);
    assertTrue(r.isNull[0]);
    b=getVectorizedRowBatch3DecimalCols();
    in=(DecimalColumnVector)b.cols[0];
    in.vector[0].set(HiveDecimal.create("9999999999999999.99"));
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertFalse(r.noNulls);
    assertTrue(r.isNull[0]);
  }
  @Test public void testDecimalScalarSubtractDecimalColumn(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    HiveDecimal d=HiveDecimal.create(1);
    VectorExpression expr=new DecimalScalarSubtractDecimalColumn(d,0,2);
    expr.evaluate(b);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("-0.20")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("4.30")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("1")));
    b=getVectorizedRowBatch3DecimalCols();
    DecimalColumnVector in=(DecimalColumnVector)b.cols[0];
    in.vector[0].set(HiveDecimal.create("-9999999999999999.99"));
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertFalse(r.noNulls);
    assertTrue(r.isNull[0]);
  }
  @Test public void testDecimalScalarMultiplyDecimalColumn(){
    VectorizedRowBatch b=getVectorizedRowBatch3DecimalCols();
    HiveDecimal d=HiveDecimal.create(2);
    VectorExpression expr=new DecimalScalarMultiplyDecimalColumn(d,0,2);
    expr.evaluate(b);
    DecimalColumnVector r=(DecimalColumnVector)b.cols[2];
    assertTrue(r.vector[0].getHiveDecimal().equals(HiveDecimal.create("2.40")));
    assertTrue(r.vector[1].getHiveDecimal().equals(HiveDecimal.create("-6.60")));
    assertTrue(r.vector[2].getHiveDecimal().equals(HiveDecimal.create("0")));
    b=getVectorizedRowBatch3DecimalCols();
    DecimalColumnVector in=(DecimalColumnVector)b.cols[0];
    in.vector[0].set(HiveDecimal.create("9999999999999999.99"));
    expr.evaluate(b);
    r=(DecimalColumnVector)b.cols[2];
    assertFalse(r.noNulls);
    assertTrue(r.isNull[0]);
  }
  private VectorizedRowBatch getVectorizedRowBatch3DecimalCols(){
    VectorizedRowBatch b=new VectorizedRowBatch(3);
    DecimalColumnVector v0, v1;
    b.cols[0]=v0=new DecimalColumnVector(18,2);
    b.cols[1]=v1=new DecimalColumnVector(18,2);
    b.cols[2]=new DecimalColumnVector(18,2);
    v0.vector[0].set(HiveDecimal.create("1.20"));
    v0.vector[1].set(HiveDecimal.create("-3.30"));
    v0.vector[2].set(HiveDecimal.create("0"));
    v1.vector[0].set(HiveDecimal.create("1.00"));
    v1.vector[1].set(HiveDecimal.create("1.00"));
    v1.vector[2].set(HiveDecimal.create("1.00"));
    b.size=3;
    return b;
  }
}
