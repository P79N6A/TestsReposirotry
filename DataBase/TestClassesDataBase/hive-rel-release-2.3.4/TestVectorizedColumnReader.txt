public class TestVectorizedColumnReader extends VectorizedColumnReaderTestBase {
  static boolean isDictionaryEncoding=false;
  @BeforeClass public static void setup() throws IOException {
    removeFile();
    writeData(initWriterFromFile(),isDictionaryEncoding);
  }
  @AfterClass public static void cleanup() throws IOException {
    removeFile();
  }
  @Test public void testIntRead() throws Exception {
    intRead(isDictionaryEncoding);
  }
  @Test public void testLongRead() throws Exception {
    longRead(isDictionaryEncoding);
  }
  @Test public void testDoubleRead() throws Exception {
    doubleRead(isDictionaryEncoding);
  }
  @Test public void testFloatRead() throws Exception {
    floatRead(isDictionaryEncoding);
  }
  @Test public void testBooleanRead() throws Exception {
    booleanRead();
  }
  @Test public void testBinaryRead() throws Exception {
    binaryRead(isDictionaryEncoding);
  }
  @Test public void testStructRead() throws Exception {
    structRead(isDictionaryEncoding);
  }
  @Test public void testNestedStructRead() throws Exception {
    nestedStructRead0(isDictionaryEncoding);
    nestedStructRead1(isDictionaryEncoding);
  }
  @Test public void structReadSomeNull() throws Exception {
    structReadSomeNull(isDictionaryEncoding);
  }
  @Test public void decimalRead() throws Exception {
    decimalRead(isDictionaryEncoding);
  }
  @Test public void testNullSplitForParquetReader() throws Exception {
    Configuration conf=new Configuration();
    conf.set(IOConstants.COLUMNS,"int32_field");
    conf.set(IOConstants.COLUMNS_TYPES,"int");
    HiveConf.setBoolVar(conf,HiveConf.ConfVars.HIVE_VECTORIZATION_ENABLED,true);
    HiveConf.setVar(conf,HiveConf.ConfVars.PLAN,"//tmp");
    initialVectorizedRowBatchCtx(conf);
    VectorizedParquetRecordReader reader=new VectorizedParquetRecordReader((InputSplit)null,new JobConf(conf));
    assertFalse(reader.next(reader.createKey(),reader.createValue()));
  }
}
