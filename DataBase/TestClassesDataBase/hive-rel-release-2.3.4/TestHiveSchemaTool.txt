@RunWith(PowerMockRunner.class) @PowerMockIgnore("javax.management.*") @PrepareForTest({HiveSchemaHelper.class,HiveSchemaTool.CommandBuilder.class}) public class TestHiveSchemaTool {
  String scriptFile=System.getProperty("java.io.tmpdir") + File.separator + "someScript.sql";
  @Mock private HiveConf hiveConf;
  private HiveSchemaTool.CommandBuilder builder;
  private String pasword="reallySimplePassword";
  @Before public void setup() throws IOException {
    mockStatic(HiveSchemaHelper.class);
    when(HiveSchemaHelper.getValidConfVar(eq(HiveConf.ConfVars.METASTORECONNECTURLKEY),same(hiveConf))).thenReturn("someURL");
    when(HiveSchemaHelper.getValidConfVar(eq(HiveConf.ConfVars.METASTORE_CONNECTION_DRIVER),same(hiveConf))).thenReturn("someDriver");
    File file=new File(scriptFile);
    if (!file.exists()) {
      file.createNewFile();
    }
    builder=new HiveSchemaTool.CommandBuilder(hiveConf,"testUser",pasword,scriptFile);
  }
  @After public void globalAssert() throws IOException {
    verifyStatic();
    HiveSchemaHelper.getValidConfVar(eq(HiveConf.ConfVars.METASTORECONNECTURLKEY),same(hiveConf));
    HiveSchemaHelper.getValidConfVar(eq(HiveConf.ConfVars.METASTORE_CONNECTION_DRIVER),same(hiveConf));
    new File(scriptFile).delete();
  }
  @Test public void shouldReturnStrippedPassword() throws IOException {
    assertFalse(builder.buildToLog().contains(pasword));
  }
  @Test public void shouldReturnActualPassword() throws IOException {
    String[] strings=builder.buildToRun();
    assertTrue(Arrays.asList(strings).contains(pasword));
  }
}
