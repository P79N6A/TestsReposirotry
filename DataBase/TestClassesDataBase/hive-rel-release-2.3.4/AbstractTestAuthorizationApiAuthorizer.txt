/** 
 * Test case for  {@link MetaStoreAuthzAPIAuthorizerEmbedOnly} The authorizer issupposed to allow api calls for metastore in embedded mode while disallowing them in remote metastore mode. Note that this is an abstract class, the subclasses that set the mode and the tests here get run as part of their testing.
 */
public abstract class AbstractTestAuthorizationApiAuthorizer {
  protected static boolean isRemoteMetastoreMode;
  private static HiveConf hiveConf;
  private static HiveMetaStoreClient msc;
  protected static void setup() throws Exception {
    System.err.println("Running with remoteMode = " + isRemoteMetastoreMode);
    System.setProperty("hive.metastore.pre.event.listeners",AuthorizationPreEventListener.class.getName());
    System.setProperty("hive.security.metastore.authorization.manager",MetaStoreAuthzAPIAuthorizerEmbedOnly.class.getName());
    hiveConf=new HiveConf();
    if (isRemoteMetastoreMode) {
      int port=MetaStoreUtils.findFreePort();
      MetaStoreUtils.startMetaStore(port,ShimLoader.getHadoopThriftAuthBridge());
      hiveConf.setVar(HiveConf.ConfVars.METASTOREURIS,"thrift://localhost:" + port);
    }
    hiveConf.setIntVar(HiveConf.ConfVars.METASTORETHRIFTCONNECTIONRETRIES,3);
    hiveConf.set(HiveConf.ConfVars.PREEXECHOOKS.varname,"");
    hiveConf.set(HiveConf.ConfVars.POSTEXECHOOKS.varname,"");
    hiveConf.set(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY.varname,"false");
    msc=new HiveMetaStoreClient(hiveConf);
  }
interface FunctionInvoker {
    public void invoke() throws Exception ;
  }
  /** 
 * Test the if authorization failed/passed for FunctionInvoker that invokes a metastore client api call
 * @param mscFunctionInvoker
 * @throws Exception
 */
  private void testFunction(  FunctionInvoker mscFunctionInvoker) throws Exception {
    boolean caughtEx=false;
    try {
      try {
        mscFunctionInvoker.invoke();
      }
 catch (      RuntimeException e) {
        String exStackString=ExceptionUtils.getStackTrace(e);
        assertTrue("Verifying this exception came after authorization check",exStackString.contains("org.apache.hadoop.hive.metastore.ObjectStore"));
      }
      assertFalse("Authz Exception should have been thrown in remote mode",isRemoteMetastoreMode);
      System.err.println("No auth exception thrown");
    }
 catch (    MetaException e) {
      System.err.println("Caught exception");
      caughtEx=true;
      assertTrue(e.getMessage().contains(MetaStoreAuthzAPIAuthorizerEmbedOnly.errMsg));
    }
    if (!isRemoteMetastoreMode) {
      assertFalse("No exception should be thrown in embedded mode",caughtEx);
    }
  }
  @Test public void testGrantPriv() throws Exception {
    FunctionInvoker invoker=new FunctionInvoker(){
      @Override public void invoke() throws Exception {
        msc.grant_privileges(new PrivilegeBag(new ArrayList<HiveObjectPrivilege>()));
      }
    }
;
    testFunction(invoker);
  }
  @Test public void testRevokePriv() throws Exception {
    FunctionInvoker invoker=new FunctionInvoker(){
      @Override public void invoke() throws Exception {
        msc.revoke_privileges(new PrivilegeBag(new ArrayList<HiveObjectPrivilege>()),false);
      }
    }
;
    testFunction(invoker);
  }
  @Test public void testGrantRole() throws Exception {
    FunctionInvoker invoker=new FunctionInvoker(){
      @Override public void invoke() throws Exception {
        msc.grant_role(null,null,null,null,null,true);
      }
    }
;
    testFunction(invoker);
  }
  @Test public void testRevokeRole() throws Exception {
    FunctionInvoker invoker=new FunctionInvoker(){
      @Override public void invoke() throws Exception {
        msc.revoke_role(null,null,null,false);
      }
    }
;
    testFunction(invoker);
  }
  @Test public void testCreateRole() throws Exception {
    FunctionInvoker invoker=new FunctionInvoker(){
      @Override public void invoke() throws Exception {
        msc.create_role(new Role("role1",0,"owner"));
      }
    }
;
    testFunction(invoker);
  }
  @Test public void testDropRole() throws Exception {
    FunctionInvoker invoker=new FunctionInvoker(){
      @Override public void invoke() throws Exception {
        msc.drop_role(null);
      }
    }
;
    testFunction(invoker);
  }
  @Test public void testListRoles() throws Exception {
    FunctionInvoker invoker=new FunctionInvoker(){
      @Override public void invoke() throws Exception {
        msc.list_roles(null,null);
      }
    }
;
    testFunction(invoker);
  }
  @Test public void testGetPrivSet() throws Exception {
    FunctionInvoker invoker=new FunctionInvoker(){
      @Override public void invoke() throws Exception {
        msc.get_privilege_set(new HiveObjectRef(),null,new ArrayList<String>());
      }
    }
;
    testFunction(invoker);
  }
  @Test public void testListPriv() throws Exception {
    FunctionInvoker invoker=new FunctionInvoker(){
      @Override public void invoke() throws Exception {
        msc.list_privileges(null,PrincipalType.USER,new HiveObjectRef());
      }
    }
;
    testFunction(invoker);
  }
}
