private static class PruneRunnable implements Runnable {
  final DynamicPartitionPruner pruner;
  final ReentrantLock lock=new ReentrantLock();
  final Condition endCondition=lock.newCondition();
  final Condition startCondition=lock.newCondition();
  final AtomicBoolean started=new AtomicBoolean(false);
  final AtomicBoolean ended=new AtomicBoolean(false);
  final AtomicBoolean inError=new AtomicBoolean(false);
  private PruneRunnable(  DynamicPartitionPruner pruner){
    this.pruner=pruner;
  }
  void start(){
    started.set(true);
    lock.lock();
    try {
      startCondition.signal();
    }
  finally {
      lock.unlock();
    }
  }
  void awaitEnd() throws InterruptedException {
    lock.lock();
    try {
      while (!ended.get()) {
        endCondition.await();
      }
    }
  finally {
      lock.unlock();
    }
  }
  @Override public void run(){
    try {
      lock.lock();
      try {
        while (!started.get()) {
          startCondition.await();
        }
      }
  finally {
        lock.unlock();
      }
      pruner.prune();
      lock.lock();
      try {
        ended.set(true);
        endCondition.signal();
      }
  finally {
        lock.unlock();
      }
    }
 catch (    SerDeException|IOException|InterruptedException|HiveException e) {
      inError.set(true);
    }
  }
}
