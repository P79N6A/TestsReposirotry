public class DerbyConnectorTestUtility extends DerbyConnector {
  private final String jdbcUri;
  public DerbyConnectorTestUtility(  Supplier<MetadataStorageConnectorConfig> config,  Supplier<MetadataStorageTablesConfig> dbTables){
    this(config,dbTables,"jdbc:derby:memory:druidTest" + dbSafeUUID());
  }
  protected DerbyConnectorTestUtility(  Supplier<MetadataStorageConnectorConfig> config,  Supplier<MetadataStorageTablesConfig> dbTables,  String jdbcUri){
    super(config,dbTables,new DBI(jdbcUri + ";create=true"));
    this.jdbcUri=jdbcUri;
  }
  public void tearDown(){
    try {
      new DBI(jdbcUri + ";drop=true").open().close();
    }
 catch (    UnableToObtainConnectionException e) {
      SQLException cause=(SQLException)e.getCause();
      Assert.assertEquals(String.format("Derby not shutdown: [%s]",cause.toString()),"08006",cause.getSQLState());
    }
  }
  public static String dbSafeUUID(){
    return UUID.randomUUID().toString().replace("-","");
  }
  public String getJdbcUri(){
    return jdbcUri;
  }
public static class DerbyConnectorRule extends ExternalResource {
    private DerbyConnectorTestUtility connector;
    private final Supplier<MetadataStorageTablesConfig> dbTables;
    private final MetadataStorageConnectorConfig connectorConfig;
    public DerbyConnectorRule(){
      this("druidTest" + dbSafeUUID());
    }
    private DerbyConnectorRule(    final String defaultBase){
      this(Suppliers.ofInstance(MetadataStorageTablesConfig.fromBase(defaultBase)));
    }
    public DerbyConnectorRule(    Supplier<MetadataStorageTablesConfig> dbTables){
      this.dbTables=dbTables;
      this.connectorConfig=new MetadataStorageConnectorConfig(){
        @Override public String getConnectURI(){
          return connector.getJdbcUri();
        }
      }
;
    }
    @Override protected void before() throws Throwable {
      connector=new DerbyConnectorTestUtility(Suppliers.ofInstance(connectorConfig),dbTables);
      connector.getDBI().open().close();
    }
    @Override protected void after(){
      connector.tearDown();
    }
    public DerbyConnectorTestUtility getConnector(){
      return connector;
    }
    public MetadataStorageConnectorConfig getMetadataConnectorConfig(){
      return connectorConfig;
    }
    public Supplier<MetadataStorageTablesConfig> metadataTablesConfigSupplier(){
      return dbTables;
    }
  }
}
