public class TestSSHCommandExecutor {
  private static final Logger LOG=LoggerFactory.getLogger(TestSSHCommandExecutor.class);
  private MockLocalCommandFactory localCommandFactory;
  @Before public void setup() throws Exception {
    localCommandFactory=new MockLocalCommandFactory(LOG);
  }
  @Test public void testShutdownBeforeWaitFor() throws Exception {
    LocalCommand localCommand=mock(LocalCommand.class);
    localCommandFactory.setInstance(localCommand);
    SSHCommandExecutor executor=new SSHCommandExecutor(LOG,localCommandFactory,"-o StrictHostKeyChecking=no");
    Assert.assertFalse(executor.isShutdown());
    executor.shutdownNow();
    SSHCommand command=new SSHCommand(executor,"privateKey","user","host",1,"whoami",true);
    executor.execute(command);
    Assert.assertTrue(executor.isShutdown());
    Assert.assertEquals(Constants.EXIT_CODE_UNKNOWN,command.getExitCode());
    if (command.getException() != null) {
      throw new Exception("Unexpected exception during execution",command.getException());
    }
    verify(localCommand,times(1)).kill();
  }
  @Test public void testShutdownDuringWaitFor() throws Exception {
    LocalCommand localCommand=mock(LocalCommand.class);
    localCommandFactory.setInstance(localCommand);
    final SSHCommandExecutor executor=new SSHCommandExecutor(LOG,localCommandFactory,"-o StrictHostKeyChecking=no");
    Assert.assertFalse(executor.isShutdown());
    when(localCommand.getExitCode()).thenAnswer(new Answer<Integer>(){
      @Override public Integer answer(      InvocationOnMock invocation) throws Throwable {
        executor.shutdownNow();
        return Constants.EXIT_CODE_UNKNOWN;
      }
    }
);
    SSHCommand command=new SSHCommand(executor,"privateKey","user","host",1,"whoami",true);
    executor.execute(command);
    Assert.assertTrue(executor.isShutdown());
    Assert.assertEquals(Constants.EXIT_CODE_UNKNOWN,command.getExitCode());
    if (command.getException() != null) {
      throw new Exception("Unexpected exception during execution",command.getException());
    }
    verify(localCommand,never()).kill();
  }
}
