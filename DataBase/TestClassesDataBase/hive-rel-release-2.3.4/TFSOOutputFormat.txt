public static class TFSOOutputFormat extends FileOutputFormat<NullWritable,Row> implements AcidOutputFormat<NullWritable,Row> {
  List<Row> records=new ArrayList<>();
  long numRecordsAdded=0;
  FSDataOutputStream out=null;
  @Override public RecordUpdater getRecordUpdater(  final Path path,  final Options options) throws IOException {
    return new RecordUpdater(){
      @Override public void insert(      long currentTransaction,      Object row) throws IOException {
        addRow(row);
        numRecordsAdded++;
      }
      @Override public void update(      long currentTransaction,      Object row) throws IOException {
        addRow(row);
      }
      @Override public void delete(      long currentTransaction,      Object row) throws IOException {
        addRow(row);
        numRecordsAdded--;
      }
      private void addRow(      Object row){
        assert row instanceof Row : "Expected Row but got " + row.getClass().getName();
        records.add((Row)row);
      }
      @Override public void flush() throws IOException {
        if (out == null) {
          FileSystem fs=path.getFileSystem(options.getConfiguration());
          out=fs.create(path);
        }
        for (        Writable r : records)         r.write(out);
        records.clear();
        out.flush();
      }
      @Override public void close(      boolean abort) throws IOException {
        flush();
        out.close();
      }
      @Override public SerDeStats getStats(){
        SerDeStats stats=new SerDeStats();
        stats.setRowCount(numRecordsAdded);
        return stats;
      }
    }
;
  }
  @Override public FileSinkOperator.RecordWriter getRawRecordWriter(  Path path,  Options options) throws IOException {
    return null;
  }
  @Override public FileSinkOperator.RecordWriter getHiveRecordWriter(  final JobConf jc,  final Path finalOutPath,  Class<? extends Writable> valueClass,  boolean isCompressed,  Properties tableProperties,  Progressable progress) throws IOException {
    return new FileSinkOperator.RecordWriter(){
      @Override public void write(      Writable w) throws IOException {
        Assert.assertTrue(w instanceof Row);
        records.add((Row)w);
      }
      @Override public void close(      boolean abort) throws IOException {
        if (out == null) {
          FileSystem fs=finalOutPath.getFileSystem(jc);
          out=fs.create(finalOutPath);
        }
        for (        Writable r : records)         r.write(out);
        records.clear();
        out.flush();
        out.close();
      }
    }
;
  }
  @Override public RecordWriter<NullWritable,Row> getRecordWriter(  FileSystem fileSystem,  JobConf entries,  String s,  Progressable progressable) throws IOException {
    return null;
  }
  @Override public void checkOutputSpecs(  FileSystem fileSystem,  JobConf entries) throws IOException {
  }
}
