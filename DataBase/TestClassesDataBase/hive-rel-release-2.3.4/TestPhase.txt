@UseReporter(JunitReporter.class) public class TestPhase extends AbstractTestPhase {
  private Phase phase;
  @Before public void setup() throws Exception {
    initialize(getClass().getSimpleName());
    createHostExecutor();
  }
  @Test(expected=NonZeroExitCodeException.class) public void testExecLocallyFails() throws Throwable {
    phase=new Phase(hostExecutors,localCommandFactory,templateDefaults,logger){
      @Override public void execute() throws Exception {
        execLocally("local");
      }
    }
;
    when(localCommand.getExitCode()).thenReturn(1);
    phase.execute();
  }
  @Test public void testExecLocallySucceeds() throws Throwable {
    phase=new Phase(hostExecutors,localCommandFactory,templateDefaults,logger){
      @Override public void execute() throws Exception {
        execLocally("local");
      }
    }
;
    phase.execute();
    List<String> commands=localCommandFactory.getCommands();
    Assert.assertEquals(1,commands.size());
    Assert.assertEquals("local",commands.get(0));
  }
  @Test public void testExecInstancesWithFailure() throws Throwable {
    sshCommandExecutor.putFailure("echo",Constants.EXIT_CODE_UNKNOWN);
    phase=new Phase(hostExecutors,localCommandFactory,templateDefaults,logger){
      @Override public void execute() throws Exception {
        execInstances("echo");
      }
    }
;
    phase.execute();
    Approvals.verify(getExecutedCommands());
    Assert.assertEquals(1,hostExecutor.remainingDrones());
  }
  @Test public void testExecHostsWithFailure() throws Throwable {
    sshCommandExecutor.putFailure("echo",Constants.EXIT_CODE_UNKNOWN);
    phase=new Phase(hostExecutors,localCommandFactory,templateDefaults,logger){
      @Override public void execute() throws Exception {
        execHosts("echo");
      }
    }
;
    phase.execute();
    Approvals.verify(getExecutedCommands());
    Assert.assertEquals(1,hostExecutor.remainingDrones());
  }
  @Test public void testRsyncFromLocalToRemoteInstancesWithFailureUnknown() throws Throwable {
    rsyncCommandExecutor.putFailure("local remote",Constants.EXIT_CODE_UNKNOWN);
    phase=new Phase(hostExecutors,localCommandFactory,templateDefaults,logger){
      @Override public void execute() throws Exception {
        rsyncFromLocalToRemoteInstances("local","remote");
      }
    }
;
    phase.execute();
    Approvals.verify(getExecutedCommands());
    Assert.assertEquals(1,hostExecutor.remainingDrones());
  }
  @Test public void testRsyncFromLocalToRemoteInstancesWithFailureOne() throws Throwable {
    rsyncCommandExecutor.putFailure("local remote",1);
    phase=new Phase(hostExecutors,localCommandFactory,templateDefaults,logger){
      @Override public void execute() throws Exception {
        rsyncFromLocalToRemoteInstances("local","remote");
      }
    }
;
    phase.execute();
    Approvals.verify(getExecutedCommands());
    Assert.assertEquals(1,hostExecutor.remainingDrones());
  }
}
