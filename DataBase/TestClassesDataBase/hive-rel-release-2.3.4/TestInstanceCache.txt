public class TestInstanceCache {
private static class Foo {
    private int value=42;
    @Override public boolean equals(    Object o){
      if (this == o)       return true;
      if (o == null || getClass() != o.getClass())       return false;
      Foo foo=(Foo)o;
      return value == foo.value;
    }
    @Override public int hashCode(){
      return value;
    }
  }
private static class Wrapper<T> {
    public final T wrapped;
    private Wrapper(    T wrapped){
      this.wrapped=wrapped;
    }
  }
  @Test public void instanceCachesOnlyCreateOneInstance() throws AvroSerdeException {
    InstanceCache<Foo,Wrapper<Foo>> ic=new InstanceCache<Foo,Wrapper<Foo>>(){
      @Override protected Wrapper makeInstance(      Foo hv,      Set<Foo> seenSchemas){
        return new Wrapper(hv);
      }
    }
;
    Foo f1=new Foo();
    Wrapper fc=ic.retrieve(f1,null);
    assertSame(f1,fc.wrapped);
    Foo f2=new Foo();
    Wrapper fc2=ic.retrieve(f2,null);
    assertSame(fc2,fc);
    assertSame(fc2.wrapped,f1);
  }
  @Test public void instanceCacheReturnsCorrectInstances() throws AvroSerdeException {
    InstanceCache<String,Wrapper<String>> ic=new InstanceCache<String,Wrapper<String>>(){
      @Override protected Wrapper<String> makeInstance(      String hv,      Set<String> seenSchemas){
        return new Wrapper<String>(hv);
      }
    }
;
    Wrapper<String> one=ic.retrieve("one",null);
    Wrapper<String> two=ic.retrieve("two",null);
    Wrapper<String> anotherOne=ic.retrieve("one",null);
    assertSame(one,anotherOne);
    Wrapper<String> anotherTwo=ic.retrieve("two",null);
    assertSame(two,anotherTwo);
  }
}
