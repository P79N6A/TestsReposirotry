private static class WriterThd extends Thread {
  private final StreamingConnection conn;
  private final DelimitedInputWriter writer;
  private final String data;
  private Throwable error;
  WriterThd(  HiveEndPoint ep,  String data) throws Exception {
    super("Writer_" + data);
    writer=new DelimitedInputWriter(fieldNames,",",ep);
    conn=ep.newConnection(false,"UT_" + Thread.currentThread().getName());
    this.data=data;
    setUncaughtExceptionHandler(new UncaughtExceptionHandler(){
      @Override public void uncaughtException(      Thread thread,      Throwable throwable){
        error=throwable;
        LOG.error("Thread " + thread.getName() + " died: "+ throwable.getMessage(),throwable);
      }
    }
);
  }
  @Override public void run(){
    TransactionBatch txnBatch=null;
    try {
      txnBatch=conn.fetchTransactionBatch(10,writer);
      while (txnBatch.remainingTransactions() > 0) {
        txnBatch.beginNextTransaction();
        txnBatch.write(data.getBytes());
        txnBatch.write(data.getBytes());
        txnBatch.commit();
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
 finally {
      if (txnBatch != null) {
        try {
          txnBatch.close();
        }
 catch (        Exception e) {
          LOG.error("txnBatch.close() failed: " + e.getMessage(),e);
          conn.close();
        }
      }
      try {
        conn.close();
      }
 catch (      Exception e) {
        LOG.error("conn.close() failed: " + e.getMessage(),e);
      }
    }
  }
}
