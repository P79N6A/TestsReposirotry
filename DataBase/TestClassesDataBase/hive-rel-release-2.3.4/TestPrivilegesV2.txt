public class TestPrivilegesV2 extends PrivilegesTestBase {
  private QueryState queryState;
  private Hive db;
  private Table table;
  private Partition partition;
  @Before public void setup() throws Exception {
    queryState=new QueryState(null);
    HiveConf conf=queryState.getConf();
    conf.setVar(HiveConf.ConfVars.HIVE_AUTHORIZATION_MANAGER,SQLStdHiveAuthorizerFactory.class.getName());
    db=Mockito.mock(Hive.class);
    table=new Table(DB,TABLE);
    SessionState.start(conf);
    Mockito.when(db.getTable(DB,TABLE,false)).thenReturn(table);
    Mockito.when(db.getTable(TABLE_QNAME,false)).thenReturn(table);
    Mockito.when(db.getPartition(table,new HashMap<String,String>(),false)).thenReturn(partition);
  }
  /** 
 * Check acceptable privileges in grant statement
 * @return
 * @throws Exception
 */
  @Test public void testPrivInGrant() throws Exception {
    grantUserTable("select",PrivilegeType.SELECT);
    grantUserTable("insert",PrivilegeType.INSERT);
    grantUserTable("delete",PrivilegeType.DELETE);
    grantUserTable("update",PrivilegeType.ALTER_DATA);
    grantUserTable("all",PrivilegeType.ALL);
  }
  private void grantUserTable(  String privName,  PrivilegeType privType) throws Exception {
    grantUserTable(privName,privType,queryState,db);
  }
}
