/** 
 * This is test-only wrapper around the real RecordWriter. It can simulate faults from lower levels to test error handling logic.
 */
private static final class FaultyWriter implements RecordWriter {
  private final RecordWriter delegate;
  private boolean shouldThrow=false;
  private FaultyWriter(  RecordWriter delegate){
    assert delegate != null;
    this.delegate=delegate;
  }
  @Override public void write(  long transactionId,  byte[] record) throws StreamingException {
    delegate.write(transactionId,record);
    produceFault();
  }
  @Override public void flush() throws StreamingException {
    delegate.flush();
    produceFault();
  }
  @Override public void clear() throws StreamingException {
    delegate.clear();
  }
  @Override public void newBatch(  Long minTxnId,  Long maxTxnID) throws StreamingException {
    delegate.newBatch(minTxnId,maxTxnID);
  }
  @Override public void closeBatch() throws StreamingException {
    delegate.closeBatch();
  }
  /** 
 * allows testing of "unexpected" errors
 * @throws StreamingIOFailure
 */
  private void produceFault() throws StreamingIOFailure {
    if (shouldThrow) {
      throw new StreamingIOFailure("Simulated fault occurred");
    }
  }
  void enableErrors(){
    shouldThrow=true;
  }
  void disableErrors(){
    shouldThrow=false;
  }
}
