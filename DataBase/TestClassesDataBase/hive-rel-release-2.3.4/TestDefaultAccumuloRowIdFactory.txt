/** 
 */
public class TestDefaultAccumuloRowIdFactory {
  @Test public void testCorrectPrimitiveInspectors() throws SerDeException {
    AccumuloSerDe accumuloSerDe=new AccumuloSerDe();
    Properties properties=new Properties();
    Configuration conf=new Configuration();
    properties.setProperty(AccumuloSerDeParameters.COLUMN_MAPPINGS,":rowID,cf:cq");
    properties.setProperty(serdeConstants.LIST_COLUMNS,"row,col");
    properties.setProperty(serdeConstants.LIST_COLUMN_TYPES,"string,int");
    accumuloSerDe.initialize(conf,properties);
    AccumuloRowIdFactory factory=accumuloSerDe.getParams().getRowIdFactory();
    List<TypeInfo> columnTypes=accumuloSerDe.getParams().getHiveColumnTypes();
    ColumnMapper mapper=accumuloSerDe.getParams().getColumnMapper();
    LazySerDeParameters serDeParams=accumuloSerDe.getParams().getSerDeParameters();
    List<ObjectInspector> OIs=accumuloSerDe.getColumnObjectInspectors(columnTypes,serDeParams,mapper.getColumnMappings(),factory);
    Assert.assertEquals(2,OIs.size());
    Assert.assertEquals(LazyStringObjectInspector.class,OIs.get(0).getClass());
    Assert.assertEquals(LazyIntObjectInspector.class,OIs.get(1).getClass());
  }
  @Test public void testCorrectComplexInspectors() throws SerDeException {
    AccumuloSerDe accumuloSerDe=new AccumuloSerDe();
    Properties properties=new Properties();
    Configuration conf=new Configuration();
    properties.setProperty(AccumuloSerDeParameters.COLUMN_MAPPINGS,":rowID,cf:cq");
    properties.setProperty(serdeConstants.LIST_COLUMNS,"row,col");
    properties.setProperty(serdeConstants.LIST_COLUMN_TYPES,"struct<col1:int,col2:int>,map<string,string>");
    accumuloSerDe.initialize(conf,properties);
    AccumuloRowIdFactory factory=accumuloSerDe.getParams().getRowIdFactory();
    List<TypeInfo> columnTypes=accumuloSerDe.getParams().getHiveColumnTypes();
    ColumnMapper mapper=accumuloSerDe.getParams().getColumnMapper();
    LazySerDeParameters serDeParams=accumuloSerDe.getParams().getSerDeParameters();
    List<ObjectInspector> OIs=accumuloSerDe.getColumnObjectInspectors(columnTypes,serDeParams,mapper.getColumnMappings(),factory);
    Assert.assertEquals(2,OIs.size());
    Assert.assertEquals(LazySimpleStructObjectInspector.class,OIs.get(0).getClass());
    Assert.assertEquals(LazyMapObjectInspector.class,OIs.get(1).getClass());
    LazySimpleStructObjectInspector structOI=(LazySimpleStructObjectInspector)OIs.get(0);
    Assert.assertEquals(2,(int)structOI.getSeparator());
    LazyMapObjectInspector mapOI=(LazyMapObjectInspector)OIs.get(1);
    Assert.assertEquals(2,(int)mapOI.getItemSeparator());
    Assert.assertEquals(3,(int)mapOI.getKeyValueSeparator());
  }
  @Test public void testBinaryStringRowId() throws SerDeException {
    AccumuloSerDe accumuloSerDe=new AccumuloSerDe();
    Properties properties=new Properties();
    Configuration conf=new Configuration();
    properties.setProperty(AccumuloSerDeParameters.COLUMN_MAPPINGS,":rowID,cf:cq");
    properties.setProperty(serdeConstants.LIST_COLUMNS,"row,col");
    properties.setProperty(serdeConstants.LIST_COLUMN_TYPES,"string,string");
    properties.setProperty(AccumuloSerDeParameters.DEFAULT_STORAGE_TYPE,ColumnEncoding.BINARY.getName());
    accumuloSerDe.initialize(conf,properties);
    DefaultAccumuloRowIdFactory rowIdFactory=new DefaultAccumuloRowIdFactory();
    rowIdFactory.init(accumuloSerDe.getParams(),properties);
    LazyStringObjectInspector oi=LazyPrimitiveObjectInspectorFactory.getLazyStringObjectInspector(false,(byte)'\\');
    LazyObjectBase lazyObj=rowIdFactory.createRowId(oi);
    Assert.assertNotNull(lazyObj);
    Assert.assertTrue(LazyString.class.isAssignableFrom(lazyObj.getClass()));
  }
}
