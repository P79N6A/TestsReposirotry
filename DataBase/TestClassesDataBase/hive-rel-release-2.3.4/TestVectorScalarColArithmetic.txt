/** 
 * Test vectorized expression handling for the case where there is a scalar on the left and a column vector on the right.
 */
public class TestVectorScalarColArithmetic {
  private final double EPS=1e-7d;
  private VectorizedRowBatch getVectorizedRowBatchSingleLongVector(  int size){
    VectorizedRowBatch batch=new VectorizedRowBatch(2,size);
    LongColumnVector lcv=new LongColumnVector(size);
    for (int i=0; i < size; i++) {
      lcv.vector[i]=i * 37;
    }
    batch.cols[0]=lcv;
    batch.cols[1]=new LongColumnVector(size);
    batch.size=size;
    return batch;
  }
  private VectorizedRowBatch getBatchSingleLongVectorPositiveNonZero(){
    VectorizedRowBatch batch=new VectorizedRowBatch(2);
    final int size=VectorizedRowBatch.DEFAULT_SIZE;
    LongColumnVector lcv=new LongColumnVector();
    for (int i=0; i < size; i++) {
      lcv.vector[i]=(i + 1) * 37;
    }
    batch.cols[0]=lcv;
    batch.cols[1]=new LongColumnVector();
    batch.size=size;
    return batch;
  }
  @Test public void testLongScalarModuloLongColNoNulls(){
    VectorizedRowBatch batch=getBatchSingleLongVectorPositiveNonZero();
    LongScalarModuloLongColumn expr=new LongScalarModuloLongColumn(100,0,1);
    expr.evaluate(batch);
    for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; i++) {
      Assert.assertEquals(100 % ((i + 1) * 37),((LongColumnVector)batch.cols[1]).vector[i]);
    }
    Assert.assertTrue(((LongColumnVector)batch.cols[1]).noNulls);
    Assert.assertFalse(((LongColumnVector)batch.cols[1]).isRepeating);
  }
  @Test public void testLongScalarSubtractLongColNoNulls(){
    VectorizedRowBatch batch=getVectorizedRowBatchSingleLongVector(VectorizedRowBatch.DEFAULT_SIZE);
    LongScalarSubtractLongColumn expr=new LongScalarSubtractLongColumn(100,0,1);
    expr.evaluate(batch);
    for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; i++) {
      Assert.assertEquals(100 - i * 37,((LongColumnVector)batch.cols[1]).vector[i]);
    }
    Assert.assertTrue(((LongColumnVector)batch.cols[1]).noNulls);
    Assert.assertFalse(((LongColumnVector)batch.cols[1]).isRepeating);
  }
  @Test public void testLongScalarSubtractLongColWithNulls(){
    VectorizedRowBatch batch=getVectorizedRowBatchSingleLongVector(VectorizedRowBatch.DEFAULT_SIZE);
    LongColumnVector lcv=(LongColumnVector)batch.cols[0];
    TestVectorizedRowBatch.addRandomNulls(lcv);
    LongScalarSubtractLongColumn expr=new LongScalarSubtractLongColumn(100,0,1);
    expr.evaluate(batch);
    for (int i=0; i < VectorizedRowBatch.DEFAULT_SIZE; i++) {
      if (!lcv.isNull[i]) {
        Assert.assertEquals(100 - i * 37,((LongColumnVector)batch.cols[1]).vector[i]);
      }
 else {
        Assert.assertTrue(((LongColumnVector)batch.cols[1]).isNull[i]);
      }
    }
    Assert.assertFalse(((LongColumnVector)batch.cols[1]).noNulls);
    Assert.assertFalse(((LongColumnVector)batch.cols[1]).isRepeating);
    TestVectorArithmeticExpressions.verifyLongNullDataVectorEntries((LongColumnVector)batch.cols[1],batch.selected,batch.selectedInUse,batch.size);
  }
  @Test public void testLongScalarSubtractLongColWithRepeating(){
    LongColumnVector in, out;
    VectorizedRowBatch batch;
    LongScalarSubtractLongColumn expr;
    batch=getVectorizedRowBatchSingleLongVector(VectorizedRowBatch.DEFAULT_SIZE);
    in=(LongColumnVector)batch.cols[0];
    in.isRepeating=true;
    out=(LongColumnVector)batch.cols[1];
    out.isRepeating=false;
    expr=new LongScalarSubtractLongColumn(100,0,1);
    expr.evaluate(batch);
    Assert.assertTrue(out.isRepeating);
    Assert.assertTrue(out.noNulls);
    Assert.assertEquals(out.vector[0],100 - 0 * 37);
    batch=getVectorizedRowBatchSingleLongVector(VectorizedRowBatch.DEFAULT_SIZE);
    in=(LongColumnVector)batch.cols[0];
    in.isRepeating=true;
    in.noNulls=false;
    in.isNull[0]=true;
    out=(LongColumnVector)batch.cols[1];
    out.isRepeating=false;
    out.isNull[0]=false;
    out.noNulls=true;
    expr=new LongScalarSubtractLongColumn(100,0,1);
    expr.evaluate(batch);
    Assert.assertTrue(out.isRepeating);
    Assert.assertFalse(out.noNulls);
    Assert.assertEquals(true,out.isNull[0]);
    TestVectorArithmeticExpressions.verifyLongNullDataVectorEntries(out,batch.selected,batch.selectedInUse,batch.size);
  }
  private boolean equalsWithinTolerance(  double a,  double b){
    return Math.abs(a - b) < EPS;
  }
  @Test public void testLongScalarDivide(){
    VectorizedRowBatch batch=TestVectorArithmeticExpressions.getVectorizedRowBatch2LongInDoubleOut();
    LongColDivideLongScalar expr=new LongColDivideLongScalar(0,100,2);
    batch.cols[0].isNull[0]=true;
    batch.cols[0].noNulls=false;
    DoubleColumnVector out=(DoubleColumnVector)batch.cols[2];
    out.noNulls=true;
    out.isRepeating=true;
    expr.evaluate(batch);
    assertFalse(out.noNulls);
    assertTrue(out.isNull[0]);
    assertTrue(Double.isNaN(out.vector[0]));
    for (int i=1; i != batch.size; i++) {
      assertTrue(equalsWithinTolerance((i * 37) / 100d,out.vector[i]));
    }
    assertFalse(out.isRepeating);
  }
  @Test public void testScalarLongDivide(){
    VectorizedRowBatch batch=TestVectorArithmeticExpressions.getVectorizedRowBatch2LongInDoubleOut();
    LongScalarDivideLongColumn expr=new LongScalarDivideLongColumn(100,0,2);
    batch.cols[0].isNull[1]=true;
    batch.cols[0].noNulls=false;
    DoubleColumnVector out=(DoubleColumnVector)batch.cols[2];
    out.noNulls=true;
    out.isRepeating=true;
    expr.evaluate(batch);
    assertTrue(out.isNull[0]);
    assertTrue(Double.isNaN(out.vector[0]));
    assertTrue(out.isNull[1]);
    assertTrue(Double.isNaN(out.vector[1]));
    for (int i=2; i != batch.size; i++) {
      assertTrue(equalsWithinTolerance(100d / (i * 37),out.vector[i]));
    }
    assertFalse(out.noNulls);
    assertFalse(out.isRepeating);
  }
  @Test public void testBooleanValuedLongIn(){
    VectorizedRowBatch batch=getBatch();
    long[] a=new long[2];
    a[0]=20;
    a[1]=1000;
    batch.size=2;
    VectorExpression expr=(new LongColumnInList(0,1));
    ((LongColumnInList)expr).setInListValues(a);
    expr.evaluate(batch);
    LongColumnVector out=(LongColumnVector)batch.cols[1];
    Assert.assertEquals(0,out.vector[0]);
    Assert.assertEquals(1,out.vector[1]);
  }
  private VectorizedRowBatch getBatch(){
    VectorizedRowBatch b=new VectorizedRowBatch(2);
    LongColumnVector v=new LongColumnVector();
    v.vector[0]=10;
    v.vector[1]=20;
    b.cols[0]=v;
    b.cols[1]=new LongColumnVector();
    return b;
  }
}
