public class JdbcStorageConfigManagerTest {
  @Test public void testWithAllRequiredSettingsDefined(){
    Properties props=new Properties();
    props.put(JdbcStorageConfig.DATABASE_TYPE.getPropertyName(),DatabaseType.MYSQL.toString());
    props.put(JdbcStorageConfig.JDBC_URL.getPropertyName(),"jdbc://localhost:3306/hive");
    props.put(JdbcStorageConfig.QUERY.getPropertyName(),"SELECT col1,col2,col3 FROM sometable");
    props.put(JdbcStorageConfig.JDBC_DRIVER_CLASS.getPropertyName(),"com.mysql.jdbc.Driver");
    Map<String,String> jobMap=new HashMap<String,String>();
    JdbcStorageConfigManager.copyConfigurationToJob(props,jobMap);
    assertThat(jobMap,is(notNullValue()));
    assertThat(jobMap.size(),is(equalTo(4)));
    assertThat(jobMap.get(JdbcStorageConfig.DATABASE_TYPE.getPropertyName()),is(equalTo("MYSQL")));
    assertThat(jobMap.get(JdbcStorageConfig.JDBC_URL.getPropertyName()),is(equalTo("jdbc://localhost:3306/hive")));
    assertThat(jobMap.get(JdbcStorageConfig.QUERY.getPropertyName()),is(equalTo("SELECT col1,col2,col3 FROM sometable")));
  }
  @Test(expected=IllegalArgumentException.class) public void testWithJdbcUrlMissing(){
    Properties props=new Properties();
    props.put(JdbcStorageConfig.DATABASE_TYPE.getPropertyName(),DatabaseType.MYSQL.toString());
    props.put(JdbcStorageConfig.QUERY.getPropertyName(),"SELECT col1,col2,col3 FROM sometable");
    Map<String,String> jobMap=new HashMap<String,String>();
    JdbcStorageConfigManager.copyConfigurationToJob(props,jobMap);
  }
  @Test(expected=IllegalArgumentException.class) public void testWithDatabaseTypeMissing(){
    Properties props=new Properties();
    props.put(JdbcStorageConfig.JDBC_URL.getPropertyName(),"jdbc://localhost:3306/hive");
    props.put(JdbcStorageConfig.QUERY.getPropertyName(),"SELECT col1,col2,col3 FROM sometable");
    Map<String,String> jobMap=new HashMap<String,String>();
    JdbcStorageConfigManager.copyConfigurationToJob(props,jobMap);
  }
  @Test(expected=IllegalArgumentException.class) public void testWithUnknownDatabaseType(){
    Properties props=new Properties();
    props.put(JdbcStorageConfig.DATABASE_TYPE.getPropertyName(),"Postgres");
    props.put(JdbcStorageConfig.JDBC_URL.getPropertyName(),"jdbc://localhost:3306/hive");
    props.put(JdbcStorageConfig.QUERY.getPropertyName(),"SELECT col1,col2,col3 FROM sometable");
    Map<String,String> jobMap=new HashMap<String,String>();
    JdbcStorageConfigManager.copyConfigurationToJob(props,jobMap);
  }
}
