public class TestReplicationTask extends TestCase {
  private static MessageFactory msgFactory=MessageFactory.getInstance();
public static class NoopFactory implements ReplicationTask.Factory {
    @Override public ReplicationTask create(    HCatClient client,    HCatNotificationEvent event){
      String eventType=event.getEventType();
      if (eventType.equals(HCatConstants.HCAT_CREATE_DATABASE_EVENT)) {
        return new NoopReplicationTask(event);
      }
 else       if (eventType.equals(HCatConstants.HCAT_DROP_DATABASE_EVENT)) {
        return new NoopReplicationTask(event);
      }
 else       if (eventType.equals(HCatConstants.HCAT_CREATE_TABLE_EVENT)) {
        return new NoopReplicationTask(event);
      }
 else       if (eventType.equals(HCatConstants.HCAT_DROP_TABLE_EVENT)) {
        return new NoopReplicationTask(event);
      }
 else       if (eventType.equals(HCatConstants.HCAT_ADD_PARTITION_EVENT)) {
        return new NoopReplicationTask(event);
      }
 else       if (eventType.equals(HCatConstants.HCAT_DROP_PARTITION_EVENT)) {
        return new NoopReplicationTask(event);
      }
 else       if (eventType.equals(HCatConstants.HCAT_ALTER_TABLE_EVENT)) {
        return new NoopReplicationTask(event);
      }
 else       if (eventType.equals(HCatConstants.HCAT_ALTER_PARTITION_EVENT)) {
        return new NoopReplicationTask(event);
      }
 else       if (eventType.equals(HCatConstants.HCAT_INSERT_EVENT)) {
        return new NoopReplicationTask(event);
      }
 else {
        throw new IllegalStateException("Unrecognized Event type, no replication task available");
      }
    }
  }
  @Test public static void testCreate() throws HCatException {
    Table t=new Table();
    t.setDbName("testdb");
    t.setTableName("testtable");
    NotificationEvent event=new NotificationEvent(0,(int)System.currentTimeMillis(),HCatConstants.HCAT_CREATE_TABLE_EVENT,msgFactory.buildCreateTableMessage(t).toString());
    event.setDbName(t.getDbName());
    event.setTableName(t.getTableName());
    ReplicationTask.resetFactory(null);
    ReplicationTask rtask=ReplicationTask.create(HCatClient.create(new HiveConf()),new HCatNotificationEvent(event));
    assertTrue("Provided factory instantiation should yield CreateTableReplicationTask",rtask instanceof CreateTableReplicationTask);
    ReplicationTask.resetFactory(NoopFactory.class);
    rtask=ReplicationTask.create(HCatClient.create(new HiveConf()),new HCatNotificationEvent(event));
    assertTrue("Provided factory instantiation should yield NoopReplicationTask",rtask instanceof NoopReplicationTask);
    ReplicationTask.resetFactory(null);
  }
}
