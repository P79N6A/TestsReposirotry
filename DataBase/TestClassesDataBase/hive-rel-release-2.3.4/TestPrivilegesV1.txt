public class TestPrivilegesV1 extends PrivilegesTestBase {
  private QueryState queryState;
  private Hive db;
  private Table table;
  private Partition partition;
  @Before public void setup() throws Exception {
    queryState=new QueryState(null);
    db=Mockito.mock(Hive.class);
    table=new Table(DB,TABLE);
    partition=new Partition(table);
    HiveConf hiveConf=queryState.getConf();
    hiveConf.setVar(HiveConf.ConfVars.HIVE_AUTHORIZATION_MANAGER,"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory");
    SessionState.start(hiveConf);
    Mockito.when(db.getTable(DB,TABLE,false)).thenReturn(table);
    Mockito.when(db.getTable(TABLE_QNAME,false)).thenReturn(table);
    Mockito.when(db.getPartition(table,new HashMap<String,String>(),false)).thenReturn(partition);
  }
  /** 
 * Check acceptable privileges in grant statement
 * @return
 * @throws Exception
 */
  @Test public void testPrivInGrant() throws Exception {
    grantUserTable("all",PrivilegeType.ALL);
    grantUserTable("update",PrivilegeType.ALTER_DATA);
    grantUserTable("alter",PrivilegeType.ALTER_METADATA);
    grantUserTable("create",PrivilegeType.CREATE);
    grantUserTable("drop",PrivilegeType.DROP);
    grantUserTable("index",PrivilegeType.INDEX);
    grantUserTable("lock",PrivilegeType.LOCK);
    grantUserTable("select",PrivilegeType.SELECT);
    grantUserTable("show_database",PrivilegeType.SHOW_DATABASE);
  }
  /** 
 * Check acceptable privileges in grant statement
 * @return
 * @throws Exception
 */
  @Test public void testPrivInGrantNotAccepted() throws Exception {
    grantUserTable("insert",PrivilegeType.INSERT);
    grantUserTable("delete",PrivilegeType.DELETE);
  }
  private void grantUserTable(  String privName,  PrivilegeType privType) throws Exception {
    grantUserTable(privName,privType,queryState,db);
  }
}
