public class TestPartitionNameWhitelistValidation {
  private static final String partitionValidationPattern="[\\x20-\\x7E&&[^,]]*";
  private static HiveConf hiveConf;
  private static HiveMetaStoreClient msc;
  @BeforeClass public static void setupBeforeClass() throws Exception {
    System.setProperty(HiveConf.ConfVars.METASTORE_PARTITION_NAME_WHITELIST_PATTERN.varname,partitionValidationPattern);
    hiveConf=new HiveConf();
    SessionState.start(new CliSessionState(hiveConf));
    msc=new HiveMetaStoreClient(hiveConf);
  }
  private boolean runValidation(  List<String> partVals){
    try {
      msc.validatePartitionNameCharacters(partVals);
    }
 catch (    Exception e) {
      return false;
    }
    return true;
  }
  private List<String> getPartValsWithUnicode(){
    List<String> partVals=new ArrayList<String>();
    partVals.add("klâwen");
    partVals.add("tägelîch");
    return partVals;
  }
  private List<String> getPartValsWithCommas(){
    List<String> partVals=new ArrayList<String>();
    partVals.add("a,b");
    partVals.add("c,d,e,f");
    return partVals;
  }
  private List<String> getPartValsWithValidCharacters(){
    List<String> partVals=new ArrayList<String>();
    partVals.add("part1");
    partVals.add("part2");
    return partVals;
  }
  @Test public void testAddPartitionWithCommas(){
    assertFalse("Add a partition with commas in name",runValidation(getPartValsWithCommas()));
  }
  @Test public void testAddPartitionWithUnicode(){
    assertFalse("Add a partition with unicode characters in name",runValidation(getPartValsWithUnicode()));
  }
  @Test public void testAddPartitionWithValidPartVal(){
    assertTrue("Add a partition with unicode characters in name",runValidation(getPartValsWithValidCharacters()));
  }
  @Test public void testAppendPartitionWithUnicode(){
    assertFalse("Append a partition with unicode characters in name",runValidation(getPartValsWithUnicode()));
  }
  @Test public void testAppendPartitionWithCommas(){
    assertFalse("Append a partition with unicode characters in name",runValidation(getPartValsWithCommas()));
  }
  @Test public void testAppendPartitionWithValidCharacters(){
    assertTrue("Append a partition with no unicode characters in name",runValidation(getPartValsWithValidCharacters()));
  }
}
