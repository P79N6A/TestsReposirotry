/** 
 * Test if ReadEntity isDirect flag is set correctly to indicate if the entity represents a direct or indirect dependency. See documentation of flag in ReadEntity.
 */
public class TestReadEntityDirect {
  @BeforeClass public static void onetimeSetup() throws CommandNeedRetryException {
    Driver driver=createDriver();
    int ret=driver.run("create table t1(i int)").getResponseCode();
    assertEquals("Checking command success",0,ret);
    ret=driver.run("create view v1 as select * from t1").getResponseCode();
    assertEquals("Checking command success",0,ret);
  }
  @AfterClass public static void onetimeTeardown() throws Exception {
    Driver driver=createDriver();
    driver.run("drop table t1");
    driver.run("drop view v1");
  }
  @Before public void setup(){
    CheckInputReadEntityDirect.readEntities=null;
  }
  /** 
 * No views in the query so it should be a direct entity
 * @throws ParseException
 */
  @Test public void testSelectEntityDirect() throws ParseException {
    Driver driver=createDriver();
    int ret=driver.compile("select * from t1");
    assertEquals("Checking command success",0,ret);
    assertEquals(1,CheckInputReadEntityDirect.readEntities.size());
    assertTrue("isDirect",CheckInputReadEntityDirect.readEntities.iterator().next().isDirect());
  }
  /** 
 * Underlying table of view should be marked as indirect
 * @throws ParseException
 */
  @Test public void testSelectEntityInDirect() throws ParseException {
    Driver driver=createDriver();
    int ret=driver.compile("select * from v1");
    assertEquals("Checking command success",0,ret);
    assertEquals(2,CheckInputReadEntityDirect.readEntities.size());
    for (    ReadEntity readEntity : CheckInputReadEntityDirect.readEntities) {
      if (readEntity.getName().equals("default@t1")) {
        assertFalse("not direct",readEntity.isDirect());
      }
 else       if (readEntity.getName().equals("default@v1")) {
        assertTrue("direct",readEntity.isDirect());
      }
 else {
        fail("unexpected entity name " + readEntity.getName());
      }
    }
  }
  /** 
 * Underlying table of view should be marked as direct, as it is also accessed directly in the join query
 * @throws ParseException
 */
  @Test public void testSelectEntityViewDirectJoin() throws ParseException {
    Driver driver=createDriver();
    int ret=driver.compile("select * from v1 join t1 on (v1.i = t1.i)");
    assertEquals("Checking command success",0,ret);
    assertEquals(2,CheckInputReadEntityDirect.readEntities.size());
    for (    ReadEntity readEntity : CheckInputReadEntityDirect.readEntities) {
      if (readEntity.getName().equals("default@t1")) {
        assertTrue("direct",readEntity.isDirect());
      }
 else       if (readEntity.getName().equals("default@v1")) {
        assertTrue("direct",readEntity.isDirect());
      }
 else {
        fail("unexpected entity name " + readEntity.getName());
      }
    }
  }
  /** 
 * Underlying table of view should be marked as direct, as it is also accessed directly in the union-all query
 * @throws ParseException
 */
  @Test public void testSelectEntityViewDirectUnion() throws ParseException {
    Driver driver=createDriver();
    int ret=driver.compile("select * from ( select * from v1 union all select * from t1) uv1t1");
    assertEquals("Checking command success",0,ret);
    assertEquals(2,CheckInputReadEntityDirect.readEntities.size());
    for (    ReadEntity readEntity : CheckInputReadEntityDirect.readEntities) {
      if (readEntity.getName().equals("default@t1")) {
        assertTrue("direct",readEntity.isDirect());
      }
 else       if (readEntity.getName().equals("default@v1")) {
        assertTrue("direct",readEntity.isDirect());
      }
 else {
        fail("unexpected entity name " + readEntity.getName());
      }
    }
  }
  /** 
 * Underlying table of view should be marked as indirect. Query with join of views and aliases
 * @throws ParseException
 */
  @Test public void testSelectEntityInDirectJoinAlias() throws ParseException {
    Driver driver=createDriver();
    int ret=driver.compile("select * from v1 as a join v1 as b on (a.i = b.i)");
    assertEquals("Checking command success",0,ret);
    assertEquals(2,CheckInputReadEntityDirect.readEntities.size());
    for (    ReadEntity readEntity : CheckInputReadEntityDirect.readEntities) {
      if (readEntity.getName().equals("default@t1")) {
        assertFalse("not direct",readEntity.isDirect());
      }
 else       if (readEntity.getName().equals("default@v1")) {
        assertTrue("direct",readEntity.isDirect());
      }
 else {
        fail("unexpected entity name " + readEntity.getName());
      }
    }
  }
  /** 
 * Create driver with the test hook set in config
 */
  private static Driver createDriver(){
    HiveConf conf=new HiveConf(Driver.class);
    conf.setVar(HiveConf.ConfVars.HIVE_AUTHORIZATION_MANAGER,"org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory");
    conf.setVar(HiveConf.ConfVars.SEMANTIC_ANALYZER_HOOK,CheckInputReadEntityDirect.class.getName());
    HiveConf.setBoolVar(conf,HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
    SessionState.start(conf);
    Driver driver=new Driver(conf);
    driver.init();
    return driver;
  }
  /** 
 * Hook used in the test to capture the set of ReadEntities
 */
public static class CheckInputReadEntityDirect extends AbstractSemanticAnalyzerHook {
    public static Set<ReadEntity> readEntities;
    @Override public void postAnalyze(    HiveSemanticAnalyzerHookContext context,    List<Task<? extends Serializable>> rootTasks) throws SemanticException {
      readEntities=context.getInputs();
    }
  }
}
