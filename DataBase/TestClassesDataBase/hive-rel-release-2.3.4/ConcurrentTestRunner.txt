/** 
 * Originally taken from com.google.code.tempusfugit.concurrency.ConcurrentTestRunner
 */
public class ConcurrentTestRunner extends BlockJUnit4ClassRunner {
  private int numThreads=1;
  public ConcurrentTestRunner(  Class<?> type) throws InitializationError {
    super(type);
    String numThreadsProp=System.getProperty("test.concurrency.num.threads");
    if (numThreadsProp != null) {
      numThreads=Integer.parseInt(numThreadsProp);
    }
    setScheduler(new ConcurrentScheduler(newFixedThreadPool(numThreads,new ConcurrentTestRunnerThreadFactory())));
    System.err.println(">>> ConcurrenTestRunner initialize with " + numThreads + " threads");
    System.err.flush();
  }
private static class ConcurrentTestRunnerThreadFactory implements ThreadFactory {
    private final AtomicLong count=new AtomicLong();
    public Thread newThread(    Runnable runnable){
      String threadName=ConcurrentTestRunner.class.getSimpleName() + "-Thread-" + count.getAndIncrement();
      System.err.println(">>> ConcurrentTestRunner.newThread " + threadName);
      System.err.flush();
      return new Thread(runnable,threadName);
    }
  }
}
