public class TestServiceDiscoveryWithMiniHS2 {
  private MiniHS2 miniHS2=null;
  private static HiveConf hiveConf;
  private static TestingServer zkServer;
  private static String zkRootNamespace="hs2test";
  private static String dataFileDir;
  private static Path kvDataFilePath;
  private Connection hs2Conn=null;
  @BeforeClass public static void beforeTest() throws Exception {
    MiniHS2.cleanupLocalDir();
    zkServer=new TestingServer();
    Class.forName(MiniHS2.getJdbcDriverName());
    hiveConf=new HiveConf();
    hiveConf.setBoolVar(ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
    enableZKServiceDiscoveryConfigs(hiveConf);
    dataFileDir=hiveConf.get("test.data.files").replace('\\','/').replace("c:","");
    kvDataFilePath=new Path(dataFileDir,"kv1.txt");
  }
  @AfterClass public static void afterTest() throws Exception {
    if (zkServer != null) {
      zkServer.close();
      zkServer=null;
    }
    MiniHS2.cleanupLocalDir();
  }
  @Before public void setUp() throws Exception {
    miniHS2=new MiniHS2.Builder().withConf(hiveConf).cleanupLocalDirOnStartup(false).build();
  }
  @After public void tearDown() throws Exception {
    if (hs2Conn != null) {
      hs2Conn.close();
    }
    if ((miniHS2 != null) && miniHS2.isStarted()) {
      miniHS2.stop();
    }
  }
  @Test public void testConnectionWithConfigsPublished() throws Exception {
    Map<String,String> confOverlay=new HashMap<String,String>();
    confOverlay.put("hive.server2.zookeeper.publish.configs","true");
    miniHS2.start(confOverlay);
    openConnectionAndRunQuery();
  }
  @Test public void testConnectionWithoutConfigsPublished() throws Exception {
    Map<String,String> confOverlay=new HashMap<String,String>();
    confOverlay.put("hive.server2.zookeeper.publish.configs","false");
    miniHS2.start(confOverlay);
    openConnectionAndRunQuery();
  }
  private static void enableZKServiceDiscoveryConfigs(  HiveConf conf){
    conf.setBoolVar(ConfVars.HIVE_SERVER2_SUPPORT_DYNAMIC_SERVICE_DISCOVERY,true);
    conf.setVar(ConfVars.HIVE_ZOOKEEPER_QUORUM,zkServer.getConnectString());
    conf.setVar(ConfVars.HIVE_SERVER2_ZOOKEEPER_NAMESPACE,zkRootNamespace);
  }
  private Connection getConnection(  String jdbcURL,  String user,  String pwd) throws SQLException {
    Connection conn=DriverManager.getConnection(jdbcURL,user,pwd);
    return conn;
  }
  private void openConnectionAndRunQuery() throws Exception {
    hs2Conn=getConnection(miniHS2.getJdbcURL(),System.getProperty("user.name"),"bar");
    String tableName="testTab1";
    Statement stmt=hs2Conn.createStatement();
    stmt.execute("DROP TABLE IF EXISTS " + tableName);
    stmt.execute("CREATE TABLE " + tableName + " (under_col INT COMMENT 'the under column', value STRING) COMMENT ' test table'");
    stmt.execute("load data local inpath '" + kvDataFilePath.toString() + "' into table "+ tableName);
    ResultSet res=stmt.executeQuery("SELECT * FROM " + tableName);
    assertTrue(res.next());
    assertEquals("val_238",res.getString(2));
    res.close();
    stmt.close();
  }
}
