public class CoreCompareCliDriver extends CliAdapter {
  private static QTestUtil qt;
  public CoreCompareCliDriver(  AbstractCliConfig testCliConfig){
    super(testCliConfig);
  }
  @Override @BeforeClass public void beforeClass(){
    MiniClusterType miniMR=cliConfig.getClusterType();
    String hiveConfDir=cliConfig.getHiveConfDir();
    String initScript=cliConfig.getInitScript();
    String cleanupScript=cliConfig.getCleanupScript();
    try {
      String hadoopVer=cliConfig.getHadoopVersion();
      qt=new QTestUtil(cliConfig.getResultsDir(),cliConfig.getLogDir(),miniMR,hiveConfDir,hadoopVer,initScript,cleanupScript,false,false);
      qt.cleanUp();
      qt.createSources();
    }
 catch (    Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      fail("Unexpected exception in static initialization");
    }
  }
  @Override @Before public void setUp(){
    try {
      qt.clearTestSideEffects();
    }
 catch (    Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      fail("Unexpected exception in setup");
    }
  }
  @Override @After public void tearDown(){
    try {
      qt.clearPostTestEffects();
    }
 catch (    Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      fail("Unexpected exception in tearDown");
    }
  }
  @Override @AfterClass public void shutdown() throws Exception {
    try {
      qt.shutdown();
    }
 catch (    Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      fail("Unexpected exception in shutdown");
    }
  }
  private Map<String,List<String>> versionFiles=new HashMap<>();
  static String debugHint="\nSee ./ql/target/tmp/log/hive.log or ./itests/qtest/target/tmp/log/hive.log, " + "or check ./ql/target/surefire-reports or ./itests/qtest/target/surefire-reports/ for specific test cases logs.";
  @Override public void runTest(  String tname,  String fname,  String fpath) throws Exception {
    final String queryDirectory=cliConfig.getQueryDirectory();
    long startTime=System.currentTimeMillis();
    try {
      System.err.println("Begin query: " + fname);
      List<String> versionFiles=QTestUtil.getVersionFiles(queryDirectory,tname);
      if (versionFiles.size() < 2) {
        fail("Cannot run " + tname + " with only "+ versionFiles.size()+ " versions");
      }
      qt.addFile(fpath);
      for (      String versionFile : versionFiles) {
        qt.addFile(new File(queryDirectory,versionFile),true);
      }
      if (qt.shouldBeSkipped(fname)) {
        return;
      }
      int ecode=0;
      List<String> outputs=new ArrayList<>(versionFiles.size());
      for (      String versionFile : versionFiles) {
        String versionStr=versionFile.substring(tname.length() + 1,versionFile.length() - 3);
        outputs.add(qt.cliInit(tname + "." + versionStr,false));
        ecode=qt.executeClient(versionFile,fname);
        if (ecode != 0) {
          qt.failed(ecode,fname,debugHint);
        }
      }
      ecode=qt.checkCompareCliDriverResults(fname,outputs);
      if (ecode != 0) {
        qt.failedDiff(ecode,fname,debugHint);
      }
    }
 catch (    Throwable e) {
      qt.failed(e,fname,debugHint);
    }
    long elapsedTime=System.currentTimeMillis() - startTime;
    System.err.println("Done query: " + fname + " elapsedTime="+ elapsedTime / 1000 + "s");
  }
}
