public class TestHiveVarchar {
  @Rule public ConcurrentRule concurrentRule=new ConcurrentRule();
  @Rule public RepeatingRule repeatingRule=new RepeatingRule();
  public TestHiveVarchar(){
    super();
  }
  static Random rnd=new Random();
  public static int getRandomSupplementaryChar(){
    int lowSurrogate=0xDC00 + rnd.nextInt(1024);
    int highSurrogate=0xD800;
    return Character.toCodePoint((char)highSurrogate,(char)lowSurrogate);
  }
  public static int getRandomCodePoint(){
    int codePoint;
    if (rnd.nextDouble() < 0.50) {
      codePoint=32 + rnd.nextInt(90);
    }
 else {
      codePoint=getRandomSupplementaryChar();
    }
    if (!Character.isValidCodePoint(codePoint)) {
      System.out.println(Integer.toHexString(codePoint) + " is not a valid code point");
    }
    return codePoint;
  }
  public static int getRandomCodePoint(  int excludeChar){
    while (true) {
      int codePoint=getRandomCodePoint();
      if (codePoint != excludeChar) {
        return codePoint;
      }
    }
  }
  @Test @Concurrent(count=4) @Repeating(repetition=100) public void testStringLength() throws Exception {
    int strLen=20;
    int[] lengths={15,20,25};
    for (int idx1=0; idx1 < lengths.length; ++idx1) {
      StringBuilder sb=new StringBuilder();
      int curLen=lengths[idx1];
      for (int idx2=0; idx2 < curLen; ++idx2) {
        sb.appendCodePoint(getRandomCodePoint(' '));
      }
      String testString=sb.toString();
      assertEquals(curLen,testString.codePointCount(0,testString.length()));
      String enforcedString=HiveBaseChar.enforceMaxLength(testString,strLen);
      if (curLen <= strLen) {
        assertEquals(testString,enforcedString);
      }
 else {
        assertEquals(strLen,enforcedString.codePointCount(0,enforcedString.length()));
      }
    }
    String[] testStrings={"abcdefg","abcdefghijklmnopqrst","abcdefghijklmnopqrstuvwxyz"};
    for (    String testString : testStrings) {
      int curLen=testString.length();
      assertEquals(curLen,testString.codePointCount(0,testString.length()));
      String enforcedString=HiveBaseChar.enforceMaxLength(testString,strLen);
      if (curLen <= strLen) {
        assertEquals(testString,enforcedString);
      }
 else {
        assertEquals(strLen,enforcedString.codePointCount(0,enforcedString.length()));
      }
    }
    HiveVarchar vc1=new HiveVarchar("0123456789",10);
    assertEquals(10,vc1.getCharacterLength());
    vc1.setValue("012345678901234");
    assertEquals(15,vc1.getCharacterLength());
    vc1.setValue("01234",-1);
    assertEquals(5,vc1.getCharacterLength());
    vc1.setValue(new HiveVarchar("0123456789",-1));
    assertEquals(10,vc1.getCharacterLength());
    vc1.setValue(new HiveVarchar("01234",-1),-1);
    assertEquals(5,vc1.getCharacterLength());
  }
  @Test @Concurrent(count=4) @Repeating(repetition=100) public void testComparison() throws Exception {
    HiveVarchar hc1=new HiveVarchar("abcd",20);
    HiveVarchar hc2=new HiveVarchar("abcd",20);
    assertTrue(hc1.equals(hc2));
    assertTrue(hc2.equals(hc1));
    assertEquals(0,hc1.compareTo(hc2));
    assertEquals(0,hc2.compareTo(hc1));
    hc2=new HiveVarchar("abcde",20);
    assertFalse(hc1.equals(hc2));
    assertFalse(hc2.equals(hc1));
    assertFalse(0 == hc1.compareTo(hc2));
    assertFalse(0 == hc2.compareTo(hc1));
    hc2=new HiveVarchar("abcd  ",30);
    assertFalse(hc1.equals(hc2));
    assertFalse(hc2.equals(hc1));
    assertFalse(0 == hc1.compareTo(hc2));
    assertFalse(0 == hc2.compareTo(hc1));
    hc2=new HiveVarchar("  abcd",20);
    assertFalse(hc1.equals(hc2));
    assertFalse(hc2.equals(hc1));
    assertFalse(0 == hc1.compareTo(hc2));
    assertFalse(0 == hc2.compareTo(hc1));
  }
}
