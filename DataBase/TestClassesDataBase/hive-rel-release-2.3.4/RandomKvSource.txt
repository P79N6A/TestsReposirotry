private static class RandomKvSource implements BytesBytesMultiHashMap.KvSource {
  private int minLength, maxLength;
  private final Random rdm=new Random(43);
  public List<byte[]> keys=new ArrayList<byte[]>(), values=new ArrayList<byte[]>();
  public RandomKvSource(  int minLength,  int maxLength){
    this.minLength=minLength;
    this.maxLength=maxLength;
  }
  public byte[] getLastValue(){
    return values.get(values.size() - 1);
  }
  public byte[] getLastKey(){
    return keys.get(keys.size() - 1);
  }
  @Override public void writeKey(  RandomAccessOutput dest) throws SerDeException {
    keys.add(write(dest));
  }
  @Override public void writeValue(  RandomAccessOutput dest) throws SerDeException {
    values.add(write(dest));
  }
  protected byte[] write(  RandomAccessOutput dest){
    byte[] bytes=new byte[minLength + rdm.nextInt(maxLength - minLength + 1)];
    rdm.nextBytes(bytes);
    try {
      dest.write(bytes);
    }
 catch (    IOException e) {
      e.printStackTrace();
      fail("Thrown " + e.getMessage());
    }
    return bytes;
  }
  @Override public byte updateStateByte(  Byte previousValue){
    return (byte)(previousValue == null ? 1 : previousValue + 1);
  }
}
