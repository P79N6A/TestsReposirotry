/** 
 * Test HCatAuthUtil
 */
public class TestHCatAuthUtil {
public static class DummyV2AuthorizerFactory implements HiveAuthorizerFactory {
    @Override public HiveAuthorizer createHiveAuthorizer(    HiveMetastoreClientFactory metastoreClientFactory,    HiveConf conf,    HiveAuthenticationProvider hiveAuthenticator,    HiveAuthzSessionContext ctx) throws HiveAuthzPluginException {
      return Mockito.mock(HiveAuthorizer.class);
    }
  }
  /** 
 * Test with auth enabled and StorageBasedAuthorizationProvider
 */
  @Test public void authEnabledV1Auth() throws Exception {
    HiveConf hcatConf=new HiveConf(this.getClass());
    hcatConf.setBoolVar(ConfVars.HIVE_AUTHORIZATION_ENABLED,true);
    hcatConf.setVar(ConfVars.HIVE_AUTHORIZATION_MANAGER,StorageBasedAuthorizationProvider.class.getName());
    SessionState.start(hcatConf);
    assertTrue("hcat auth should be enabled",HCatAuthUtil.isAuthorizationEnabled(hcatConf));
  }
  /** 
 * Test with auth enabled and v2 auth
 */
  @Test public void authEnabledV2Auth() throws Exception {
    HiveConf hcatConf=new HiveConf(this.getClass());
    hcatConf.setBoolVar(ConfVars.HIVE_AUTHORIZATION_ENABLED,true);
    hcatConf.setVar(ConfVars.HIVE_AUTHORIZATION_MANAGER,DummyV2AuthorizerFactory.class.getName());
    SessionState.start(hcatConf);
    assertFalse("hcat auth should be disabled",HCatAuthUtil.isAuthorizationEnabled(hcatConf));
  }
  /** 
 * Test with auth disabled
 */
  @Test public void authDisabled() throws Exception {
    HiveConf hcatConf=new HiveConf(this.getClass());
    hcatConf.setBoolVar(ConfVars.HIVE_AUTHORIZATION_ENABLED,false);
    SessionState.start(hcatConf);
    assertFalse("hcat auth should be disabled",HCatAuthUtil.isAuthorizationEnabled(hcatConf));
  }
}
