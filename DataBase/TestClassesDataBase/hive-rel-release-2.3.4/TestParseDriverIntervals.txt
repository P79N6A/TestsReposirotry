@RunWith(Parameterized.class) public class TestParseDriverIntervals {
  private String query;
  private ParseDriver parseDriver;
  @Parameters(name="{0}") public static List<Object[]> getParameters(){
    List<Object[]> ret=new ArrayList<>();
    ret.add(new Object[]{"select 1 days"});
    ret.add(new Object[]{"select (1) days"});
    ret.add(new Object[]{"select (1) day"});
    ret.add(new Object[]{"select interval (1+1) days"});
    ret.add(new Object[]{"select interval 1 days"});
    ret.add(new Object[]{"select interval '1' days"});
    ret.add(new Object[]{"select interval (x) days"});
    ret.add(new Object[]{"select interval (x+1) days"});
    ret.add(new Object[]{"select interval (1+x) days"});
    ret.add(new Object[]{"select interval (1+1) days"});
    ret.add(new Object[]{"select interval (x+1) days"});
    return ret;
  }
  public TestParseDriverIntervals(  String query){
    parseDriver=new ParseDriver();
    this.query=query;
  }
  @Test public void parseInterval() throws Exception {
    ASTNode root=parseDriver.parse(query);
    assertNotNull("failed: " + query,findFunctionNode(root));
    System.out.println(root.dump());
  }
  private ASTNode findFunctionNode(  ASTNode n){
    if (n.getType() == HiveParser.TOK_FUNCTION) {
      if ("internal_interval".equals(n.getChild(0).getText())) {
        return n;
      }
    }
    ArrayList<Node> children=n.getChildren();
    if (children != null) {
      for (      Node c : children) {
        ASTNode r=findFunctionNode((ASTNode)c);
        if (r != null)         return r;
      }
    }
    return null;
  }
}
