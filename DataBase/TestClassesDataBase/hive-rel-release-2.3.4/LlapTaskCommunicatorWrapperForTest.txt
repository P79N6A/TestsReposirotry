/** 
 * Wrapper class which is responsible for setting up various mocks required for different tests.
 */
private static class LlapTaskCommunicatorWrapperForTest {
  static final String[] HOSTS=new String[]{"host1","host2","host3"};
  static final int RPC_PORT=15002;
  static final String DAG_NAME="dagName";
  static final String VERTEX_NAME1="vertexName1";
  static final String VERTEX_NAME2="vertexName2";
  final TaskCommunicatorContext taskCommunicatorContext=mock(TaskCommunicatorContext.class);
  final ApplicationId appId=ApplicationId.newInstance(1000,1);
  final ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,100);
  final TezDAGID dagid=TezDAGID.getInstance(appId,200);
  final TezVertexID vertexId1=TezVertexID.getInstance(dagid,300);
  final TezVertexID vertexId2=TezVertexID.getInstance(dagid,301);
  final Configuration conf=new Configuration(false);
  final UserPayload userPayload;
  final LlapTaskCommunicatorForTest taskCommunicator;
  public LlapTaskCommunicatorWrapperForTest(  LlapProtocolClientProxy llapProxy) throws Exception {
    HiveConf.setVar(conf,HiveConf.ConfVars.LLAP_DAEMON_SERVICE_HOSTS,"fake-non-zk-cluster");
    userPayload=TezUtils.createUserPayloadFromConf(conf);
    doReturn(appAttemptId).when(taskCommunicatorContext).getApplicationAttemptId();
    doReturn(new Credentials()).when(taskCommunicatorContext).getAMCredentials();
    doReturn(userPayload).when(taskCommunicatorContext).getInitialUserPayload();
    doReturn(appId.toString()).when(taskCommunicatorContext).getCurrentAppIdentifier();
    DagInfo dagInfo=mock(DagInfo.class);
    doReturn(dagInfo).when(taskCommunicatorContext).getCurrentDagInfo();
    doReturn(DAG_NAME).when(dagInfo).getName();
    doReturn(new Credentials()).when(dagInfo).getCredentials();
    doReturn(new LinkedList<String>()).when(taskCommunicatorContext).getInputVertexNames(any(String.class));
    this.taskCommunicator=new LlapTaskCommunicatorForTest(taskCommunicatorContext,llapProxy);
    this.taskCommunicator.initialize();
    this.taskCommunicator.start();
  }
  void shutdown(){
    this.taskCommunicator.shutdown();
  }
  TaskCommunicatorContext getTaskCommunicatorContext(){
    return taskCommunicatorContext;
  }
  LlapTaskCommunicatorForTest getTaskCommunicator(){
    return taskCommunicator;
  }
  ContainerId registerContainer(  int containerIdx,  int hostIdx){
    ContainerId containerId=ContainerId.newInstance(appAttemptId,containerIdx);
    taskCommunicator.registerRunningContainer(containerId,HOSTS[hostIdx],RPC_PORT);
    return containerId;
  }
  TaskSpec registerRunningTaskAttemptWithSourceVertex(  ContainerId containerId,  int taskIdx){
    TaskSpec taskSpec=createBaseTaskSpec(VERTEX_NAME2,vertexId2,taskIdx);
    InputSpec inputSpec=new InputSpec(VERTEX_NAME1,InputDescriptor.create("fakeInputClassName"),3);
    List<InputSpec> inputs=Lists.newArrayList(inputSpec);
    doReturn(inputs).when(taskSpec).getInputs();
    taskCommunicator.registerRunningTaskAttempt(containerId,taskSpec,new HashMap<String,LocalResource>(),new Credentials(),false,2);
    return taskSpec;
  }
  TaskSpec registerRunningTaskAttempt(  ContainerId containerId,  int taskIdx){
    TaskSpec taskSpec=createBaseTaskSpec(VERTEX_NAME1,vertexId1,taskIdx);
    taskCommunicator.registerRunningTaskAttempt(containerId,taskSpec,new HashMap<String,LocalResource>(),new Credentials(),false,2);
    return taskSpec;
  }
  private TaskSpec createBaseTaskSpec(  String vertexName,  TezVertexID vertexId,  int taskIdx){
    TaskSpec taskSpec=mock(TaskSpec.class);
    Configuration conf=new Configuration(false);
    HiveConf.setVar(conf,HiveConf.ConfVars.HIVEQUERYID,"fakeQueryId");
    UserPayload userPayload;
    try {
      userPayload=TezUtils.createUserPayloadFromConf(conf);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    TezTaskAttemptID taskAttemptId=TezTaskAttemptID.getInstance(TezTaskID.getInstance(vertexId,taskIdx),0);
    doReturn(taskAttemptId).when(taskSpec).getTaskAttemptID();
    doReturn(DAG_NAME).when(taskSpec).getDAGName();
    doReturn(vertexName).when(taskSpec).getVertexName();
    ProcessorDescriptor processorDescriptor=ProcessorDescriptor.create("fakeClassName").setUserPayload(userPayload);
    doReturn(processorDescriptor).when(taskSpec).getProcessorDescriptor();
    return taskSpec;
  }
}
