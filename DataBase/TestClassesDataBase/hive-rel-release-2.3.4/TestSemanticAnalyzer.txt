public class TestSemanticAnalyzer {
  @Test public void testNormalizeColSpec() throws Exception {
    checkNormalization("date","2010-01-01","2010-01-01",Date.valueOf("2010-01-01"));
    checkNormalization("date","2010-1-01","2010-01-01",Date.valueOf("2010-01-01"));
    checkNormalization("date","2010-1-1","2010-01-01",Date.valueOf("2010-01-01"));
    checkNormalization("string","2010-1-1","2010-1-1","2010-1-1");
    try {
      checkNormalization("date","foo","","foo");
      fail("should throw");
    }
 catch (    SemanticException ex) {
    }
    try {
      checkNormalization("date","2010-01-01","2010-01-01","2010-01-01");
      fail("should throw");
    }
 catch (    SemanticException ex) {
    }
  }
  public void checkNormalization(  String colType,  String originalColSpec,  String result,  Object colValue) throws SemanticException {
    final String colName="col";
    Map<String,String> partSpec=new HashMap<String,String>();
    partSpec.put(colName,originalColSpec);
    BaseSemanticAnalyzer.normalizeColSpec(partSpec,colName,colType,originalColSpec,colValue);
    assertEquals(result,partSpec.get(colName));
    if (colValue instanceof Date) {
      DateWritable dw=new DateWritable((Date)colValue);
      BaseSemanticAnalyzer.normalizeColSpec(partSpec,colName,colType,originalColSpec,dw);
      assertEquals(result,partSpec.get(colName));
    }
  }
  @Test public void testUnescapeSQLString(){
    assertEquals("abcdefg",BaseSemanticAnalyzer.unescapeSQLString("\"abcdefg\""));
    assertEquals("C0FFEE",BaseSemanticAnalyzer.unescapeSQLString("\'C0FFEE\'"));
    assertEquals("\u0000",BaseSemanticAnalyzer.unescapeSQLString("'\\0'"));
    assertEquals("\'",BaseSemanticAnalyzer.unescapeSQLString("\"\\'\""));
    assertEquals("\"",BaseSemanticAnalyzer.unescapeSQLString("'\\\"'"));
    assertEquals("\b",BaseSemanticAnalyzer.unescapeSQLString("\"\\b\""));
    assertEquals("\n",BaseSemanticAnalyzer.unescapeSQLString("'\\n'"));
    assertEquals("\r",BaseSemanticAnalyzer.unescapeSQLString("\"\\r\""));
    assertEquals("\t",BaseSemanticAnalyzer.unescapeSQLString("'\\t'"));
    assertEquals("\u001A",BaseSemanticAnalyzer.unescapeSQLString("\"\\Z\""));
    assertEquals("\\",BaseSemanticAnalyzer.unescapeSQLString("'\\\\'"));
    assertEquals("\\%",BaseSemanticAnalyzer.unescapeSQLString("\"\\%\""));
    assertEquals("\\_",BaseSemanticAnalyzer.unescapeSQLString("'\\_'"));
    assertEquals("3 + 5 = \u0038",BaseSemanticAnalyzer.unescapeSQLString("'3 + 5 = \\070'"));
    assertEquals("\u0000",BaseSemanticAnalyzer.unescapeSQLString("\"\\000\""));
    assertEquals("256",BaseSemanticAnalyzer.unescapeSQLString("\"\\256\""));
    assertEquals("How cute \u732B are",BaseSemanticAnalyzer.unescapeSQLString("\"How cute \\u732B are\""));
    assertEquals("\uD867\uDE3D is a fish",BaseSemanticAnalyzer.unescapeSQLString("\"\\uD867\uDE3D is a fish\""));
  }
}
