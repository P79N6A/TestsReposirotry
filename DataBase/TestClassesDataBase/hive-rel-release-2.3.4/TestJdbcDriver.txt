@RunWith(Parameterized.class) public class TestJdbcDriver {
  private static File file=null;
  private String input;
  private String expected;
  public TestJdbcDriver(  String input,  String expected) throws Exception {
    this.input=input;
    this.expected=expected;
  }
  @Parameters public static Collection<Object[]> data(){
    return Arrays.asList(new Object[][]{{"show databases;show tables;","show databases,show tables"},{" show\n\r  tables;","show tables"},{"show databases; show\ntables;","show databases,show tables"},{"show    tables;","show    tables"},{"show tables ;","show tables"},{"show tables",","},{"show tables show tables;","show tables show tables"},{"show tab les;","show tab les"},{"#show tables; show\n tables;","tables"},{"show tab les;show tables;","show tab les,show tables"}});
  }
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    file=new File(System.getProperty("user.dir") + File.separator + "Init.sql");
    if (!file.exists()) {
      file.createNewFile();
    }
  }
  @AfterClass public static void cleanUpAfterClass() throws Exception {
    if (file != null) {
      file.delete();
    }
  }
  @Test public void testParseInitFile() throws IOException {
    BufferedWriter bw=null;
    try {
      bw=new BufferedWriter(new FileWriter(file));
      bw.write(input);
      bw.flush();
      assertEquals(Arrays.asList(expected.split(",")),HiveConnection.parseInitFile(file.toString()));
    }
 catch (    Exception e) {
      Assert.fail("Test was failed due to " + e);
    }
 finally {
      if (bw != null) {
        bw.close();
      }
    }
  }
}
