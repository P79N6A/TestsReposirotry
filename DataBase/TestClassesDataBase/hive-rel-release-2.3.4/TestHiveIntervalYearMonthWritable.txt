public class TestHiveIntervalYearMonthWritable {
  @Rule public ConcurrentRule concurrentRule=new ConcurrentRule();
  @Rule public RepeatingRule repeatingRule=new RepeatingRule();
  @Test @Concurrent(count=4) @Repeating(repetition=100) public void testConstructor() throws Exception {
    HiveIntervalYearMonth hi1=HiveIntervalYearMonth.valueOf("1-2");
    HiveIntervalYearMonthWritable hiw1=new HiveIntervalYearMonthWritable(hi1);
    HiveIntervalYearMonthWritable hiw2=new HiveIntervalYearMonthWritable(hiw1);
    assertEquals(hiw1,hiw2);
  }
  @Test @Concurrent(count=4) @Repeating(repetition=100) public void testComparison() throws Exception {
    HiveIntervalYearMonthWritable hiw0=new HiveIntervalYearMonthWritable(HiveIntervalYearMonth.valueOf("2-2"));
    HiveIntervalYearMonthWritable hiw1=new HiveIntervalYearMonthWritable(HiveIntervalYearMonth.valueOf("2-2"));
    HiveIntervalYearMonthWritable hiw2=new HiveIntervalYearMonthWritable(HiveIntervalYearMonth.valueOf("3-2"));
    assertTrue(hiw1 + " equals " + hiw1,hiw1.equals(hiw1));
    assertTrue(hiw1 + " equals " + hiw0,hiw1.equals(hiw0));
    assertFalse(hiw1 + " equals " + hiw2,hiw1.equals(hiw2));
    assertTrue(hiw1 + " compare " + hiw1,0 == hiw1.compareTo(hiw1));
    assertTrue(hiw1 + " compare " + hiw0,0 == hiw1.compareTo(hiw0));
    assertTrue(hiw1 + " compare " + hiw2,0 > hiw1.compareTo(hiw2));
    hiw2=new HiveIntervalYearMonthWritable(HiveIntervalYearMonth.valueOf("1-2"));
    assertTrue(hiw1 + " compare " + hiw2,0 < hiw1.compareTo(hiw2));
    hiw2=new HiveIntervalYearMonthWritable(HiveIntervalYearMonth.valueOf("2-3"));
    assertTrue(hiw1 + " compare " + hiw2,0 > hiw1.compareTo(hiw2));
    hiw2=new HiveIntervalYearMonthWritable(HiveIntervalYearMonth.valueOf("2-1"));
    assertTrue(hiw1 + " compare " + hiw2,0 < hiw1.compareTo(hiw2));
    assertEquals(hiw0.hashCode(),hiw1.hashCode());
  }
  @Test @Concurrent(count=4) @Repeating(repetition=100) public void testGettersSetters() throws Exception {
    HiveIntervalYearMonthWritable hiw1=new HiveIntervalYearMonthWritable();
    hiw1.set(1,2);
    HiveIntervalYearMonth hi1=hiw1.getHiveIntervalYearMonth();
    assertEquals(1,hi1.getYears());
    assertEquals(2,hi1.getMonths());
    hiw1.set(new HiveIntervalYearMonth(3,4));
    hi1=hiw1.getHiveIntervalYearMonth();
    assertEquals(3,hi1.getYears());
    assertEquals(4,hi1.getMonths());
    hiw1.set(new HiveIntervalYearMonthWritable(new HiveIntervalYearMonth(5,6)));
    hi1=hiw1.getHiveIntervalYearMonth();
    assertEquals(5,hi1.getYears());
    assertEquals(6,hi1.getMonths());
  }
  @Test @Concurrent(count=4) @Repeating(repetition=100) public void testWritableMethods() throws Exception {
    HiveIntervalYearMonthWritable hiw1=new HiveIntervalYearMonthWritable();
    HiveIntervalYearMonthWritable hiw2=new HiveIntervalYearMonthWritable();
    hiw1.set(1,2);
    hiw2.set(7,6);
    assertFalse(hiw1.equals(hiw2));
    ByteArrayOutputStream byteStream=new ByteArrayOutputStream();
    DataOutput out=new DataOutputStream(byteStream);
    hiw1.write(out);
    hiw2.readFields(new DataInputStream(new ByteArrayInputStream(byteStream.toByteArray())));
    assertEquals(hiw1,hiw2);
  }
}
