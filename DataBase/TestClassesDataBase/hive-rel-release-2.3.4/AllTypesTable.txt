/** 
 * basic tests that cover each scalar type https://issues.apache.org/jira/browse/HIVE-5814
 */
protected static final class AllTypesTable {
  private static final String ALL_TYPES_FILE_NAME=TEST_DATA_DIR + "/alltypes.input.data";
  private static final String ALL_PRIMITIVE_TYPES_TABLE="junit_unparted_alltypes";
  private static final String ALL_TYPES_SCHEMA="( c_boolean boolean, " + "c_tinyint tinyint, " + "c_smallint smallint, "+ "c_int int, "+ "c_bigint bigint, "+ "c_float float, "+ "c_double double, "+ "c_decimal decimal(5,2), "+ "c_string string, "+ "c_char char(10), "+ "c_varchar varchar(20), "+ "c_binary binary, "+ "c_date date, "+ "c_timestamp timestamp)";
  /** 
 * raw data for #ALL_PRIMITIVE_TYPES_TABLE All the values are within range of target data type (column)
 */
  private static final Object[][] primitiveRows=new Object[][]{{Boolean.TRUE,Byte.MAX_VALUE,Short.MAX_VALUE,Integer.MAX_VALUE,Long.MAX_VALUE,Float.MAX_VALUE,Double.MAX_VALUE,555.22,"Kyiv","char(10)xx","varchar(20)","blah".getBytes(),Date.valueOf("2014-01-13"),Timestamp.valueOf("2014-01-13 19:26:25.0123")},{Boolean.FALSE,Byte.MIN_VALUE,Short.MIN_VALUE,Integer.MIN_VALUE,Long.MIN_VALUE,Float.MIN_VALUE,Double.MIN_VALUE,-555.22,"Saint Petersburg","char(xx)00","varchar(yy)","doh".getBytes(),Date.valueOf("2014-01-14"),Timestamp.valueOf("2014-01-14 19:26:25.0123")}};
  /** 
 * Test that we properly translate data types in Hive/HCat table schema into Pig schema
 */
  static void testSchemaLoadPrimitiveTypes() throws IOException {
    PigServer server=createPigServer(false);
    server.registerQuery("X = load '" + ALL_PRIMITIVE_TYPES_TABLE + "' using "+ HCatLoader.class.getName()+ "();");
    Schema dumpedXSchema=server.dumpSchema("X");
    List<FieldSchema> Xfields=dumpedXSchema.getFields();
    assertEquals("Expected " + HCatFieldSchema.Type.numPrimitiveTypes() + " fields, found "+ Xfields.size(),HCatFieldSchema.Type.numPrimitiveTypes(),Xfields.size());
    checkProjection(Xfields.get(0),"c_boolean",DataType.BOOLEAN);
    checkProjection(Xfields.get(1),"c_tinyint",DataType.INTEGER);
    checkProjection(Xfields.get(2),"c_smallint",DataType.INTEGER);
    checkProjection(Xfields.get(3),"c_int",DataType.INTEGER);
    checkProjection(Xfields.get(4),"c_bigint",DataType.LONG);
    checkProjection(Xfields.get(5),"c_float",DataType.FLOAT);
    checkProjection(Xfields.get(6),"c_double",DataType.DOUBLE);
    checkProjection(Xfields.get(7),"c_decimal",DataType.BIGDECIMAL);
    checkProjection(Xfields.get(8),"c_string",DataType.CHARARRAY);
    checkProjection(Xfields.get(9),"c_char",DataType.CHARARRAY);
    checkProjection(Xfields.get(10),"c_varchar",DataType.CHARARRAY);
    checkProjection(Xfields.get(11),"c_binary",DataType.BYTEARRAY);
    checkProjection(Xfields.get(12),"c_date",DataType.DATETIME);
    checkProjection(Xfields.get(13),"c_timestamp",DataType.DATETIME);
  }
  /** 
 * Test that value from Hive table are read properly in Pig
 */
  private static void testReadDataPrimitiveTypes() throws Exception {
    Properties properties=new Properties();
    properties.setProperty(HCatConstants.HCAT_DATA_CONVERT_BOOLEAN_TO_INTEGER,"false");
    PigServer server=new PigServer(ExecType.LOCAL,properties);
    server.registerQuery("X = load '" + ALL_PRIMITIVE_TYPES_TABLE + "' using "+ HCatLoader.class.getName()+ "();");
    Iterator<Tuple> XIter=server.openIterator("X");
    int numTuplesRead=0;
    while (XIter.hasNext()) {
      Tuple t=XIter.next();
      assertEquals(HCatFieldSchema.Type.numPrimitiveTypes(),t.size());
      int colPos=0;
      for (      Object referenceData : primitiveRows[numTuplesRead]) {
        if (referenceData == null) {
          assertTrue("rowNum=" + numTuplesRead + " colNum="+ colPos+ " Reference data is null; actual "+ t.get(colPos),t.get(colPos) == null);
        }
 else         if (referenceData instanceof java.util.Date) {
          assertTrue("rowNum=" + numTuplesRead + " colNum="+ colPos+ " Reference data="+ ((java.util.Date)referenceData).getTime()+ " actual="+ ((DateTime)t.get(colPos)).getMillis()+ "; types=("+ referenceData.getClass()+ ","+ t.get(colPos).getClass()+ ")",((java.util.Date)referenceData).getTime() == ((DateTime)t.get(colPos)).getMillis());
        }
 else {
          assertTrue("rowNum=" + numTuplesRead + " colNum="+ colPos+ " Reference data="+ referenceData+ " actual="+ t.get(colPos)+ "; types=("+ referenceData.getClass()+ ","+ t.get(colPos).getClass()+ ") ",referenceData.toString().equals(t.get(colPos).toString()));
        }
        colPos++;
      }
      numTuplesRead++;
    }
    assertTrue("Expected " + primitiveRows.length + "; found "+ numTuplesRead,numTuplesRead == primitiveRows.length);
  }
  private static void setupAllTypesTable(  Driver driver) throws Exception {
    String[] primitiveData=new String[primitiveRows.length];
    for (int i=0; i < primitiveRows.length; i++) {
      Object[] rowData=primitiveRows[i];
      StringBuilder row=new StringBuilder();
      for (      Object cell : rowData) {
        row.append(row.length() == 0 ? "" : "\t").append(cell == null ? null : cell);
      }
      primitiveData[i]=row.toString();
    }
    HcatTestUtils.createTestDataFile(ALL_TYPES_FILE_NAME,primitiveData);
    String cmd="create table " + ALL_PRIMITIVE_TYPES_TABLE + ALL_TYPES_SCHEMA+ "ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'"+ " STORED AS TEXTFILE";
    executeStatementOnDriver(cmd,driver);
    cmd="load data local inpath '" + HCatUtil.makePathASafeFileName(ALL_TYPES_FILE_NAME) + "' into table "+ ALL_PRIMITIVE_TYPES_TABLE;
    executeStatementOnDriver(cmd,driver);
  }
}
