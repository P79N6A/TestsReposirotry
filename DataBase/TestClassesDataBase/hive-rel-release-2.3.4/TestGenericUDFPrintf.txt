public class TestGenericUDFPrintf {
  @Test public void testCharVarcharArgs() throws HiveException {
    GenericUDFPrintf udf=new GenericUDFPrintf();
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableStringObjectInspector,PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getCharTypeInfo(5)),PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getVarcharTypeInfo(7))};
    HiveCharWritable argChar=new HiveCharWritable();
    argChar.set("hello");
    HiveVarcharWritable argVarchar=new HiveVarcharWritable();
    argVarchar.set("world");
    DeferredObject[] args={new DeferredJavaObject(new Text("1st: %s, 2nd: %s")),new DeferredJavaObject(argChar),new DeferredJavaObject(argVarchar)};
    PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
    Assert.assertEquals(PrimitiveObjectInspectorFactory.writableStringObjectInspector,oi);
    Text res=(Text)udf.evaluate(args);
    Assert.assertEquals("1st: hello, 2nd: world",res.toString());
  }
  @Test public void testCharFormat() throws HiveException {
    GenericUDFPrintf udf=new GenericUDFPrintf();
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getCharTypeInfo(10)),PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getVarcharTypeInfo(7))};
    HiveCharWritable formatChar=new HiveCharWritable();
    formatChar.set("arg1=%s");
    HiveVarcharWritable argVarchar=new HiveVarcharWritable();
    argVarchar.set("world");
    DeferredObject[] args={new DeferredJavaObject(formatChar),new DeferredJavaObject(argVarchar)};
    PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
    Assert.assertEquals(PrimitiveObjectInspectorFactory.writableStringObjectInspector,oi);
    Text res=(Text)udf.evaluate(args);
    Assert.assertEquals("arg1=world",res.toString());
  }
  @Test public void testVarcharFormat() throws HiveException {
    GenericUDFPrintf udf=new GenericUDFPrintf();
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getVarcharTypeInfo(7)),PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getCharTypeInfo(5))};
    HiveCharWritable argChar=new HiveCharWritable();
    argChar.set("hello");
    HiveVarcharWritable formatVarchar=new HiveVarcharWritable();
    formatVarchar.set("arg1=%s");
    DeferredObject[] args={new DeferredJavaObject(formatVarchar),new DeferredJavaObject(argChar)};
    PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
    Assert.assertEquals(PrimitiveObjectInspectorFactory.writableStringObjectInspector,oi);
    Text res=(Text)udf.evaluate(args);
    Assert.assertEquals("arg1=hello",res.toString());
  }
  @Test public void testDecimalArgs() throws HiveException {
    GenericUDFPrintf udf=new GenericUDFPrintf();
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableStringObjectInspector,PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getDecimalTypeInfo(5,2)),PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getDecimalTypeInfo(3,2))};
    HiveDecimalWritable argDec1=new HiveDecimalWritable();
    argDec1.set(HiveDecimal.create("234.789"));
    HiveDecimalWritable argDec2=new HiveDecimalWritable();
    argDec2.set(HiveDecimal.create("3.5"));
    DeferredObject[] args={new DeferredJavaObject(new Text("1st: %s, 2nd: %s")),new DeferredJavaObject(argDec1),new DeferredJavaObject(argDec2)};
    PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
    Assert.assertEquals(PrimitiveObjectInspectorFactory.writableStringObjectInspector,oi);
    Text res=(Text)udf.evaluate(args);
    Assert.assertEquals("1st: 234.79, 2nd: 3.5",res.toString());
  }
}
