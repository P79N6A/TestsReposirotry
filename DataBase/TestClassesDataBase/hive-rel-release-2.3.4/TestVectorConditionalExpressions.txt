/** 
 * Test vectorized conditional expression handling.
 */
public class TestVectorConditionalExpressions {
  private VectorizedRowBatch getBatch4LongVectors(){
    VectorizedRowBatch batch=new VectorizedRowBatch(4);
    LongColumnVector v=new LongColumnVector();
    v.vector[0]=0;
    v.vector[1]=0;
    v.vector[2]=1;
    v.vector[3]=1;
    batch.cols[0]=v;
    v=new LongColumnVector();
    v.vector[0]=-1;
    v.vector[1]=-2;
    v.vector[2]=-3;
    v.vector[3]=-4;
    batch.cols[1]=v;
    v=new LongColumnVector();
    v.vector[0]=1;
    v.vector[1]=2;
    v.vector[2]=3;
    v.vector[3]=4;
    batch.cols[2]=v;
    batch.cols[3]=new LongColumnVector();
    batch.size=4;
    return batch;
  }
  private VectorizedRowBatch getBatch1Long3DoubleVectors(){
    VectorizedRowBatch batch=new VectorizedRowBatch(4);
    LongColumnVector lv=new LongColumnVector();
    lv.vector[0]=0;
    lv.vector[1]=0;
    lv.vector[2]=1;
    lv.vector[3]=1;
    batch.cols[0]=lv;
    DoubleColumnVector v=new DoubleColumnVector();
    v.vector[0]=-1;
    v.vector[1]=-2;
    v.vector[2]=-3;
    v.vector[3]=-4;
    batch.cols[1]=v;
    v=new DoubleColumnVector();
    v.vector[0]=1;
    v.vector[1]=2;
    v.vector[2]=3;
    v.vector[3]=4;
    batch.cols[2]=v;
    batch.cols[3]=new DoubleColumnVector();
    batch.size=4;
    return batch;
  }
  private VectorizedRowBatch getBatch1Long3BytesVectors(){
    VectorizedRowBatch batch=new VectorizedRowBatch(4);
    LongColumnVector lv=new LongColumnVector();
    lv.vector[0]=0;
    lv.vector[1]=0;
    lv.vector[2]=1;
    lv.vector[3]=1;
    batch.cols[0]=lv;
    BytesColumnVector v=new BytesColumnVector();
    v.initBuffer();
    setString(v,0,"arg2_0");
    setString(v,1,"arg2_1");
    setString(v,2,"arg2_2");
    setString(v,3,"arg2_3");
    batch.cols[1]=v;
    v=new BytesColumnVector();
    v.initBuffer();
    setString(v,0,"arg3_0");
    setString(v,1,"arg3_1");
    setString(v,2,"arg3_2");
    setString(v,3,"arg3_3");
    batch.cols[2]=v;
    v=new BytesColumnVector();
    v.initBuffer();
    batch.cols[3]=v;
    batch.size=4;
    return batch;
  }
  private void setString(  BytesColumnVector v,  int i,  String s){
    byte[] b=getUTF8Bytes(s);
    v.setVal(i,b,0,b.length);
  }
  private byte[] getUTF8Bytes(  String s){
    byte[] b=null;
    try {
      b=s.getBytes("UTF-8");
    }
 catch (    Exception e) {
      ;
    }
    return b;
  }
  private String getString(  BytesColumnVector v,  int i){
    String s=null;
    try {
      s=new String(v.vector[i],v.start[i],v.length[i],"UTF-8");
    }
 catch (    Exception e) {
      ;
    }
    return s;
  }
  @Test public void testLongColumnColumnIfExpr(){
    VectorizedRowBatch batch=getBatch4LongVectors();
    VectorExpression expr=new IfExprLongColumnLongColumn(0,1,2,3);
    expr.evaluate(batch);
    LongColumnVector r=(LongColumnVector)batch.cols[3];
    assertEquals(1,r.vector[0]);
    assertEquals(2,r.vector[1]);
    assertEquals(-3,r.vector[2]);
    assertEquals(-4,r.vector[3]);
    assertEquals(true,r.noNulls);
    assertEquals(false,r.isRepeating);
    batch=getBatch4LongVectors();
    r=(LongColumnVector)batch.cols[3];
    batch.cols[0].isRepeating=true;
    expr.evaluate(batch);
    assertEquals(1,r.vector[0]);
    assertEquals(4,r.vector[3]);
    batch=getBatch4LongVectors();
    r=(LongColumnVector)batch.cols[3];
    batch.cols[1].isRepeating=true;
    expr.evaluate(batch);
    assertEquals(1,r.vector[0]);
    assertEquals(2,r.vector[1]);
    assertEquals(-1,r.vector[2]);
    assertEquals(-1,r.vector[3]);
    batch=getBatch4LongVectors();
    r=(LongColumnVector)batch.cols[3];
    batch.cols[2].isRepeating=true;
    expr.evaluate(batch);
    assertEquals(1,r.vector[0]);
    assertEquals(1,r.vector[1]);
    assertEquals(-3,r.vector[2]);
    assertEquals(-4,r.vector[3]);
    batch=getBatch4LongVectors();
    r=(LongColumnVector)batch.cols[3];
    batch.cols[0].noNulls=false;
    batch.cols[0].isNull[1]=true;
    batch.cols[0].isNull[2]=true;
    expr.evaluate(batch);
    assertEquals(1,r.vector[0]);
    assertEquals(2,r.vector[1]);
    assertEquals(3,r.vector[2]);
    assertEquals(-4,r.vector[3]);
    assertEquals(true,r.noNulls);
    assertEquals(false,r.isRepeating);
    batch=getBatch4LongVectors();
    r=(LongColumnVector)batch.cols[3];
    batch.cols[1].noNulls=false;
    batch.cols[1].isNull[1]=true;
    batch.cols[1].isNull[2]=true;
    expr.evaluate(batch);
    assertEquals(1,r.vector[0]);
    assertEquals(2,r.vector[1]);
    assertEquals(true,r.isNull[2]);
    assertEquals(-4,r.vector[3]);
    assertEquals(false,r.noNulls);
    assertEquals(false,r.isRepeating);
    batch=getBatch4LongVectors();
    r=(LongColumnVector)batch.cols[3];
    batch.cols[2].noNulls=false;
    batch.cols[2].isNull[1]=true;
    batch.cols[2].isNull[2]=true;
    expr.evaluate(batch);
    assertEquals(1,r.vector[0]);
    assertEquals(true,r.isNull[1]);
    assertEquals(-3,r.vector[2]);
    assertEquals(-4,r.vector[3]);
    assertEquals(false,r.noNulls);
    assertEquals(false,r.isRepeating);
    batch=getBatch4LongVectors();
    r=(LongColumnVector)batch.cols[3];
    batch.cols[1].noNulls=false;
    batch.cols[1].isNull[0]=true;
    batch.cols[1].isRepeating=true;
    expr.evaluate(batch);
    assertEquals(1,r.vector[0]);
    assertEquals(2,r.vector[1]);
    assertEquals(true,r.isNull[2]);
    assertEquals(true,r.isNull[3]);
    assertEquals(false,r.noNulls);
    assertEquals(false,r.isRepeating);
    batch=getBatch4LongVectors();
    r=(LongColumnVector)batch.cols[3];
    batch.cols[2].noNulls=false;
    batch.cols[2].isNull[0]=true;
    batch.cols[2].isRepeating=true;
    expr.evaluate(batch);
    assertEquals(true,r.isNull[0]);
    assertEquals(true,r.isNull[1]);
    assertEquals(-3,r.vector[2]);
    assertEquals(-4,r.vector[3]);
    assertEquals(false,r.noNulls);
    assertEquals(false,r.isRepeating);
  }
  @Test public void testDoubleColumnColumnIfExpr(){
    VectorizedRowBatch batch=getBatch1Long3DoubleVectors();
    VectorExpression expr=new IfExprDoubleColumnDoubleColumn(0,1,2,3);
    expr.evaluate(batch);
    DoubleColumnVector r=(DoubleColumnVector)batch.cols[3];
    assertEquals(true,1d == r.vector[0]);
    assertEquals(true,2d == r.vector[1]);
    assertEquals(true,-3d == r.vector[2]);
    assertEquals(true,-4d == r.vector[3]);
    assertEquals(true,r.noNulls);
    assertEquals(false,r.isRepeating);
  }
  @Test public void testLongColumnScalarIfExpr(){
    VectorizedRowBatch batch=getBatch4LongVectors();
    VectorExpression expr=new IfExprLongColumnLongScalar(0,1,100,3);
    LongColumnVector r=(LongColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertEquals(100,r.vector[0]);
    assertEquals(100,r.vector[1]);
    assertEquals(-3,r.vector[2]);
    assertEquals(-4,r.vector[3]);
  }
  @Test public void testLongScalarColumnIfExpr(){
    VectorizedRowBatch batch=getBatch4LongVectors();
    VectorExpression expr=new IfExprLongScalarLongColumn(0,100,2,3);
    LongColumnVector r=(LongColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertEquals(1,r.vector[0]);
    assertEquals(2,r.vector[1]);
    assertEquals(100,r.vector[2]);
    assertEquals(100,r.vector[3]);
  }
  @Test public void testLongScalarScalarIfExpr(){
    VectorizedRowBatch batch=getBatch4LongVectors();
    VectorExpression expr=new IfExprLongScalarLongScalar(0,100,200,3);
    LongColumnVector r=(LongColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertEquals(200,r.vector[0]);
    assertEquals(200,r.vector[1]);
    assertEquals(100,r.vector[2]);
    assertEquals(100,r.vector[3]);
  }
  @Test public void testDoubleScalarScalarIfExpr(){
    VectorizedRowBatch batch=getBatch1Long3DoubleVectors();
    VectorExpression expr=new IfExprDoubleScalarDoubleScalar(0,100.0d,200.0d,3);
    DoubleColumnVector r=(DoubleColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertEquals(true,200d == r.vector[0]);
    assertEquals(true,200d == r.vector[1]);
    assertEquals(true,100d == r.vector[2]);
    assertEquals(true,100d == r.vector[3]);
  }
  @Test public void testDoubleScalarColumnIfExpr(){
    VectorizedRowBatch batch=getBatch1Long3DoubleVectors();
    VectorExpression expr=new IfExprDoubleScalarDoubleColumn(0,100.0d,2,3);
    DoubleColumnVector r=(DoubleColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertEquals(true,1d == r.vector[0]);
    assertEquals(true,2d == r.vector[1]);
    assertEquals(true,100d == r.vector[2]);
    assertEquals(true,100d == r.vector[3]);
  }
  @Test public void testDoubleColumnScalarIfExpr(){
    VectorizedRowBatch batch=getBatch1Long3DoubleVectors();
    VectorExpression expr=new IfExprDoubleColumnDoubleScalar(0,1,200d,3);
    DoubleColumnVector r=(DoubleColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertEquals(true,200d == r.vector[0]);
    assertEquals(true,200d == r.vector[1]);
    assertEquals(true,-3d == r.vector[2]);
    assertEquals(true,-4d == r.vector[3]);
  }
  @Test public void testIfExprStringColumnStringColumn(){
    VectorizedRowBatch batch=getBatch1Long3BytesVectors();
    VectorExpression expr=new IfExprStringGroupColumnStringGroupColumn(0,1,2,3);
    BytesColumnVector r=(BytesColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertTrue(getString(r,0).equals("arg3_0"));
    assertTrue(getString(r,1).equals("arg3_1"));
    assertTrue(getString(r,2).equals("arg2_2"));
    assertTrue(getString(r,3).equals("arg2_3"));
    batch=getBatch1Long3BytesVectors();
    batch.cols[0].isRepeating=true;
    r=(BytesColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertTrue(getString(r,0).equals("arg3_0"));
    assertTrue(getString(r,1).equals("arg3_1"));
    assertTrue(getString(r,2).equals("arg3_2"));
    assertTrue(getString(r,3).equals("arg3_3"));
    batch=getBatch1Long3BytesVectors();
    batch.cols[1].isRepeating=true;
    r=(BytesColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertTrue(getString(r,0).equals("arg3_0"));
    assertTrue(getString(r,1).equals("arg3_1"));
    assertTrue(getString(r,2).equals("arg2_0"));
    assertTrue(getString(r,3).equals("arg2_0"));
    batch=getBatch1Long3BytesVectors();
    batch.cols[2].isRepeating=true;
    r=(BytesColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertTrue(getString(r,0).equals("arg3_0"));
    assertTrue(getString(r,1).equals("arg3_0"));
    assertTrue(getString(r,2).equals("arg2_2"));
    assertTrue(getString(r,3).equals("arg2_3"));
    batch=getBatch1Long3BytesVectors();
    batch.cols[1].noNulls=false;
    batch.cols[1].isNull[2]=true;
    ((BytesColumnVector)batch.cols[1]).vector[2]=null;
    r=(BytesColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertTrue(getString(r,0).equals("arg3_0"));
    assertTrue(getString(r,1).equals("arg3_1"));
    assertTrue(!r.noNulls && r.isNull[2]);
    assertTrue(getString(r,3).equals("arg2_3"));
    assertFalse(r.isNull[0] || r.isNull[1] || r.isNull[3]);
    batch=getBatch1Long3BytesVectors();
    batch.cols[2].noNulls=false;
    batch.cols[2].isNull[0]=true;
    ((BytesColumnVector)batch.cols[2]).vector[0]=null;
    r=(BytesColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertTrue(!r.noNulls && r.isNull[0]);
    assertTrue(getString(r,1).equals("arg3_1"));
    assertTrue(getString(r,2).equals("arg2_2"));
    assertTrue(getString(r,3).equals("arg2_3"));
    assertFalse(r.isNull[1] || r.isNull[2] || r.isNull[3]);
    batch=getBatch1Long3BytesVectors();
    batch.cols[1].noNulls=false;
    batch.cols[1].isNull[0]=true;
    batch.cols[1].isRepeating=true;
    r=(BytesColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertTrue(getString(r,0).equals("arg3_0"));
    assertTrue(getString(r,1).equals("arg3_1"));
    assertTrue(!r.noNulls && r.isNull[2]);
    assertTrue(!r.noNulls && r.isNull[3]);
    assertFalse(r.isNull[0] || r.isNull[1]);
  }
  @Test public void testIfExprStringColumnStringScalar(){
    VectorizedRowBatch batch=getBatch1Long3BytesVectors();
    byte[] scalar=getUTF8Bytes("scalar");
    VectorExpression expr=new IfExprStringGroupColumnStringScalar(0,1,scalar,3);
    BytesColumnVector r=(BytesColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertTrue(getString(r,0).equals("scalar"));
    assertTrue(getString(r,1).equals("scalar"));
    assertTrue(getString(r,2).equals("arg2_2"));
    assertTrue(getString(r,3).equals("arg2_3"));
    assertTrue(r.noNulls);
    batch=getBatch1Long3BytesVectors();
    BytesColumnVector arg2=(BytesColumnVector)batch.cols[1];
    arg2.noNulls=false;
    arg2.isNull[2]=true;
    arg2.vector[2]=null;
    expr.evaluate(batch);
    r=(BytesColumnVector)batch.cols[3];
    assertTrue(!r.noNulls && r.isNull[2]);
  }
  @Test public void testIfExprStringScalarStringColumn(){
    VectorizedRowBatch batch=getBatch1Long3BytesVectors();
    byte[] scalar=getUTF8Bytes("scalar");
    VectorExpression expr=new IfExprStringScalarStringGroupColumn(0,scalar,2,3);
    BytesColumnVector r=(BytesColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertTrue(getString(r,0).equals("arg3_0"));
    assertTrue(getString(r,1).equals("arg3_1"));
    assertTrue(getString(r,2).equals("scalar"));
    assertTrue(getString(r,3).equals("scalar"));
    assertTrue(r.noNulls);
    batch=getBatch1Long3BytesVectors();
    BytesColumnVector arg3=(BytesColumnVector)batch.cols[2];
    arg3.noNulls=false;
    arg3.isNull[1]=true;
    arg3.vector[1]=null;
    expr.evaluate(batch);
    r=(BytesColumnVector)batch.cols[3];
    assertTrue(!r.noNulls && r.isNull[1]);
  }
  @Test public void testIfExprStringScalarStringScalar(){
    VectorizedRowBatch batch=getBatch1Long3BytesVectors();
    byte[] scalar1=getUTF8Bytes("scalar1");
    byte[] scalar2=getUTF8Bytes("scalar2");
    VectorExpression expr=new IfExprStringScalarStringScalar(0,scalar1,scalar2,3);
    BytesColumnVector r=(BytesColumnVector)batch.cols[3];
    expr.evaluate(batch);
    assertTrue(getString(r,0).equals("scalar2"));
    assertTrue(getString(r,1).equals("scalar2"));
    assertTrue(getString(r,2).equals("scalar1"));
    assertTrue(getString(r,3).equals("scalar1"));
    assertFalse(r.isRepeating);
    batch=getBatch1Long3BytesVectors();
    batch.cols[0].isRepeating=true;
    expr.evaluate(batch);
    r=(BytesColumnVector)batch.cols[3];
    assertTrue(r.isRepeating);
    assertTrue(getString(r,0).equals("scalar2"));
  }
}
