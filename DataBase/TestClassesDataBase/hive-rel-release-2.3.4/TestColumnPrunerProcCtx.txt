public class TestColumnPrunerProcCtx {
  private static TypeInfo col1Type;
  private static TypeInfo col2Type;
  private static TypeInfo col3Type;
  @BeforeClass public static void setup(){
    List<String> ns=new ArrayList<>();
    ns.add("a");
    ns.add("b");
    List<TypeInfo> tis=new ArrayList<>();
    TypeInfo aType=TypeInfoFactory.booleanTypeInfo;
    TypeInfo bType=TypeInfoFactory.doubleTypeInfo;
    tis.add(aType);
    tis.add(bType);
    col1Type=TypeInfoFactory.getStructTypeInfo(ns,tis);
    col2Type=TypeInfoFactory.doubleTypeInfo;
    List<String> names=new ArrayList<>();
    names.add("col1");
    names.add("col2");
    List<TypeInfo> typeInfos=new ArrayList<>();
    typeInfos.add(col1Type);
    typeInfos.add(col2Type);
    col3Type=TypeInfoFactory.getStructTypeInfo(names,typeInfos);
  }
  @Test public void testGetSelectNestedColPathsFromChildren1(){
    ColumnPrunerProcCtx ctx=new ColumnPrunerProcCtx(null);
    ExprNodeDesc colDesc=new ExprNodeColumnDesc(col3Type,"root","test",false);
    ExprNodeDesc col1=new ExprNodeFieldDesc(col1Type,colDesc,"col1",false);
    ExprNodeDesc fieldDesc=new ExprNodeFieldDesc(TypeInfoFactory.booleanTypeInfo,col1,"a",false);
    final List<FieldNode> paths=Arrays.asList(new FieldNode("_col0"));
    SelectOperator selectOperator=buildSelectOperator(Arrays.asList(fieldDesc),paths);
    List<FieldNode> groups=ctx.getSelectColsFromChildren(selectOperator,paths);
    compareTestResults(groups,"root.col1.a");
  }
  @Test public void testGetSelectNestedColPathsFromChildren2(){
    ColumnPrunerProcCtx ctx=new ColumnPrunerProcCtx(null);
    ExprNodeDesc colDesc=new ExprNodeColumnDesc(col3Type,"root","test",false);
    ExprNodeDesc fieldDesc=new ExprNodeFieldDesc(col1Type,colDesc,"col1",false);
    final List<FieldNode> paths=Arrays.asList(new FieldNode("_col0"));
    SelectOperator selectOperator=buildSelectOperator(Arrays.asList(fieldDesc),paths);
    List<FieldNode> groups=ctx.getSelectColsFromChildren(selectOperator,paths);
    compareTestResults(groups,"root.col1");
  }
  @Test public void testGetSelectNestedColPathsFromChildren3(){
    ColumnPrunerProcCtx ctx=new ColumnPrunerProcCtx(null);
    ExprNodeDesc colDesc=new ExprNodeColumnDesc(col3Type,"root","test",false);
    ExprNodeDesc fieldDesc=new ExprNodeFieldDesc(col1Type,colDesc,"col2",false);
    final List<FieldNode> paths=Arrays.asList(new FieldNode("_col0"));
    SelectOperator selectOperator=buildSelectOperator(Arrays.asList(fieldDesc),paths);
    List<FieldNode> groups=ctx.getSelectColsFromChildren(selectOperator,paths);
    compareTestResults(groups,"root.col2");
  }
  @Test public void testGetSelectNestedColPathsFromChildren4(){
    ColumnPrunerProcCtx ctx=new ColumnPrunerProcCtx(null);
    ExprNodeDesc colDesc=new ExprNodeColumnDesc(col3Type,"root","test",false);
    final List<FieldNode> paths=Arrays.asList(new FieldNode("_col0"));
    SelectOperator selectOperator=buildSelectOperator(Arrays.asList(colDesc),paths);
    List<FieldNode> groups=ctx.getSelectColsFromChildren(selectOperator,paths);
    compareTestResults(groups,"root");
  }
  @Test public void testGetSelectNestedColPathsFromChildren5(){
    ColumnPrunerProcCtx ctx=new ColumnPrunerProcCtx(null);
    ExprNodeConstantDesc constADesc=new ExprNodeConstantDesc(TypeInfoFactory.booleanTypeInfo,"a");
    ExprNodeConstantDesc constBDesc=new ExprNodeConstantDesc(TypeInfoFactory.doubleTypeInfo,"b");
    List<ExprNodeDesc> list=new ArrayList<>();
    list.add(constADesc);
    list.add(constBDesc);
    GenericUDF udf=mock(GenericUDF.class);
    ExprNodeDesc funcDesc=new ExprNodeGenericFuncDesc(col1Type,udf,"named_struct",list);
    ExprNodeDesc fieldDesc=new ExprNodeFieldDesc(TypeInfoFactory.doubleTypeInfo,funcDesc,"foo",false);
    final List<FieldNode> paths=Arrays.asList(new FieldNode("_col0"));
    SelectOperator selectOperator=buildSelectOperator(Arrays.asList(fieldDesc),paths);
    List<FieldNode> groups=ctx.getSelectColsFromChildren(selectOperator,paths);
    assertEquals(0,groups.size());
  }
  @Test public void testGetSelectNestedColPathsFromChildren6(){
    ColumnPrunerProcCtx ctx=new ColumnPrunerProcCtx(null);
    ExprNodeDesc colDesc=new ExprNodeColumnDesc(col3Type,"root","test",false);
    ExprNodeDesc col1=new ExprNodeFieldDesc(col1Type,colDesc,"col1",false);
    ExprNodeDesc fieldDesc=new ExprNodeFieldDesc(TypeInfoFactory.doubleTypeInfo,col1,"b",false);
    final List<FieldNode> paths=Arrays.asList(new FieldNode("_col0"));
    GenericUDF udf=mock(GenericUDFBridge.class);
    List<ExprNodeDesc> list=new ArrayList<>();
    list.add(fieldDesc);
    ExprNodeDesc funcDesc=new ExprNodeGenericFuncDesc(TypeInfoFactory.binaryTypeInfo,udf,"abs",list);
    SelectOperator selectOperator=buildSelectOperator(Arrays.asList(funcDesc),paths);
    List<FieldNode> groups=ctx.getSelectColsFromChildren(selectOperator,paths);
    compareTestResults(groups,"root.col1.b");
  }
  @Test public void testGetSelectNestedColPathsFromChildren7(){
    ColumnPrunerProcCtx ctx=new ColumnPrunerProcCtx(null);
    ExprNodeDesc colDesc=new ExprNodeColumnDesc(col3Type,"root","test",false);
    ExprNodeDesc col1=new ExprNodeFieldDesc(col1Type,colDesc,"col1",false);
    ExprNodeDesc fieldDesc1=new ExprNodeFieldDesc(TypeInfoFactory.doubleTypeInfo,col1,"b",false);
    colDesc=new ExprNodeColumnDesc(col3Type,"root","test",false);
    ExprNodeDesc col2=new ExprNodeFieldDesc(col2Type,colDesc,"col2",false);
    final List<FieldNode> paths=Arrays.asList(new FieldNode("_col0"));
    GenericUDF udf=mock(GenericUDFPower.class);
    List<ExprNodeDesc> list=new ArrayList<>();
    list.add(fieldDesc1);
    list.add(col2);
    ExprNodeDesc funcDesc=new ExprNodeGenericFuncDesc(TypeInfoFactory.doubleTypeInfo,udf,"pow",list);
    SelectOperator selectOperator=buildSelectOperator(Arrays.asList(funcDesc),paths);
    List<FieldNode> groups=ctx.getSelectColsFromChildren(selectOperator,paths);
    compareTestResults(groups,"root.col1.b","root.col2");
  }
  @Test public void testFieldNodeFromString(){
    FieldNode fn=FieldNode.fromPath("s.a.b");
    assertEquals("s",fn.getFieldName());
    assertEquals(1,fn.getNodes().size());
    FieldNode childFn=fn.getNodes().get(0);
    assertEquals("a",childFn.getFieldName());
    assertEquals(1,childFn.getNodes().size());
    assertEquals("b",childFn.getNodes().get(0).getFieldName());
  }
  @Test public void testMergeFieldNode(){
    FieldNode fn1=FieldNode.fromPath("s.a.b");
    FieldNode fn2=FieldNode.fromPath("s.a");
    assertEquals(fn2,FieldNode.mergeFieldNode(fn1,fn2));
    assertEquals(fn2,FieldNode.mergeFieldNode(fn2,fn1));
    fn1=FieldNode.fromPath("s.a");
    fn2=FieldNode.fromPath("p.b");
    assertNull(FieldNode.mergeFieldNode(fn1,fn2));
    fn1=FieldNode.fromPath("s.a.b");
    fn2=FieldNode.fromPath("s.a.c");
    FieldNode fn=FieldNode.mergeFieldNode(fn1,fn2);
    assertEquals("s",fn.getFieldName());
    FieldNode childFn=fn.getNodes().get(0);
    assertEquals("a",childFn.getFieldName());
    assertEquals(2,childFn.getNodes().size());
    assertEquals("b",childFn.getNodes().get(0).getFieldName());
    assertEquals("c",childFn.getNodes().get(1).getFieldName());
  }
  private void compareTestResults(  List<FieldNode> fieldNodes,  String... paths){
    List<String> expectedPaths=new ArrayList<>();
    for (    FieldNode fn : fieldNodes) {
      expectedPaths.addAll(fn.toPaths());
    }
    assertEquals("Expected paths to have length " + expectedPaths + ", but got "+ paths.length,expectedPaths.size(),paths.length);
    for (int i=0; i < expectedPaths.size(); ++i) {
      assertEquals("Element at index " + i + " doesn't match",expectedPaths.get(i),paths[i]);
    }
  }
  private SelectOperator buildSelectOperator(  List<ExprNodeDesc> colList,  List<FieldNode> outputCols){
    SelectOperator selectOperator=mock(SelectOperator.class);
    SelectDesc selectDesc=new SelectDesc(colList,ColumnPrunerProcCtx.toColumnNames(outputCols));
    selectDesc.setSelStarNoCompute(false);
    when(selectOperator.getConf()).thenReturn(selectDesc);
    return selectOperator;
  }
}
