public class TestReusableStringReader {
  private static final String fox="Quick brown fox jumps over the lazy dog.";
  /** 
 * Test empty  {@link ReusableStringReader} 
 */
  @Test public void testEmpty() throws IOException {
    Reader reader=new ReusableStringReader();
    try {
      int ch=reader.read();
      fail("IOException expected.");
    }
 catch (    IOException ioe) {
    }
    try {
      boolean ready=reader.ready();
      fail("IOException expected.");
    }
 catch (    IOException ioe) {
    }
    reader.close();
  }
  @Test public void testMarkReset() throws IOException {
    Reader reader=new ReusableStringReader();
    if (reader.markSupported()) {
      ((ReusableStringReader)reader).set(fox);
      assertTrue(reader.ready());
      char[] cc=new char[6];
      int read;
      read=reader.read(cc);
      assertEquals(6,read);
      assertEquals("Quick ",new String(cc));
      reader.mark(100);
      read=reader.read(cc);
      assertEquals(6,read);
      assertEquals("brown ",new String(cc));
      reader.reset();
      read=reader.read(cc);
      assertEquals(6,read);
      assertEquals("brown ",new String(cc));
    }
    reader.close();
  }
  @Test public void testSkip() throws IOException {
    Reader reader=new ReusableStringReader();
    ((ReusableStringReader)reader).set(fox);
    long skipped=reader.skip(fox.length() + 1);
    assertEquals(fox.length(),skipped);
    assertEquals(-1,reader.read());
    ((ReusableStringReader)reader).set(fox);
    char[] cc=new char[6];
    int read;
    read=reader.read(cc);
    assertEquals(6,read);
    assertEquals("Quick ",new String(cc));
    skipped=reader.skip(30);
    assertEquals(30,skipped);
    read=reader.read(cc);
    assertEquals(4,read);
    assertEquals("dog.",new String(cc,0,read));
    skipped=reader.skip(300);
    assertEquals(0,skipped);
    assertEquals(-1,reader.read());
    reader.close();
  }
}
