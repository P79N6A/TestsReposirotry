/** 
 * Tests that are specific to HTTP transport mode, that need use of underlying classes instead of jdbc.
 */
public class TestThriftHttpCLIServiceFeatures {
  private static String transportMode="http";
  private static String thriftHttpPath="cliservice";
  static HiveAuthorizer mockedAuthorizer;
  /** 
 * HttpBasicAuthInterceptorWithLogging This adds httpRequestHeaders to the BasicAuthInterceptor
 */
public class HttpBasicAuthInterceptorWithLogging extends HttpBasicAuthInterceptor {
    ArrayList<String> requestHeaders;
    public HttpBasicAuthInterceptorWithLogging(    String username,    String password,    CookieStore cookieStore,    String cn,    boolean isSSL,    Map<String,String> additionalHeaders){
      super(username,password,cookieStore,cn,isSSL,additionalHeaders);
      requestHeaders=new ArrayList<String>();
    }
    @Override public void process(    HttpRequest httpRequest,    HttpContext httpContext) throws HttpException, IOException {
      super.process(httpRequest,httpContext);
      String currHeaders="";
      for (      org.apache.http.Header h : httpRequest.getAllHeaders()) {
        currHeaders+=h.getName() + ":" + h.getValue()+ " ";
      }
      requestHeaders.add(currHeaders);
    }
    public ArrayList<String> getRequestHeaders(){
      return requestHeaders;
    }
  }
  /** 
 * @throws java.lang.Exception
 */
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    ThriftCLIServiceTest.setUpBeforeClass();
    assertNotNull(ThriftCLIServiceTest.port);
    assertNotNull(ThriftCLIServiceTest.hiveServer2);
    assertNotNull(ThriftCLIServiceTest.hiveConf);
    HiveConf hiveConf=ThriftCLIServiceTest.hiveConf;
    hiveConf.setBoolVar(ConfVars.HIVE_SERVER2_ENABLE_DOAS,false);
    hiveConf.setVar(ConfVars.HIVE_SERVER2_THRIFT_BIND_HOST,ThriftCLIServiceTest.host);
    hiveConf.setIntVar(ConfVars.HIVE_SERVER2_THRIFT_HTTP_PORT,ThriftCLIServiceTest.port);
    hiveConf.setVar(ConfVars.HIVE_SERVER2_AUTHENTICATION,AuthTypes.NOSASL.toString());
    hiveConf.setVar(ConfVars.HIVE_SERVER2_TRANSPORT_MODE,transportMode);
    hiveConf.setVar(ConfVars.HIVE_SERVER2_THRIFT_HTTP_PATH,thriftHttpPath);
    hiveConf.setBoolVar(ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
    hiveConf.setVar(ConfVars.HIVE_AUTHORIZATION_MANAGER,MockedHiveAuthorizerFactory.class.getName());
    hiveConf.setVar(ConfVars.HIVE_AUTHENTICATOR_MANAGER,SessionStateUserAuthenticator.class.getName());
    hiveConf.setBoolVar(ConfVars.HIVE_AUTHORIZATION_ENABLED,true);
    ThriftCLIServiceTest.startHiveServer2WithConf(hiveConf);
    ThriftCLIServiceTest.client=ThriftCLIServiceTest.getServiceClientInternal();
  }
  /** 
 * @throws java.lang.Exception
 */
  @AfterClass public static void tearDownAfterClass() throws Exception {
    ThriftCLIServiceTest.tearDownAfterClass();
  }
  @Test public void testBinaryClientHttpServer() throws Exception {
    TTransport transport=getRawBinaryTransport();
    TCLIService.Client rawBinaryClient=getClient(transport);
    testOpenSessionExpectedException(rawBinaryClient);
  }
  /** 
 * Configure a wrong service endpoint for the client transport, and test for error.
 * @throws Exception
 */
  @Test public void testIncorrectHttpPath() throws Exception {
    thriftHttpPath="wrongPath";
    TTransport transport=getHttpTransport();
    TCLIService.Client httpClient=getClient(transport);
    testOpenSessionExpectedException(httpClient);
    thriftHttpPath="cliservice";
  }
  private void testOpenSessionExpectedException(  TCLIService.Client client){
    boolean caughtEx=false;
    TOpenSessionReq openReq=new TOpenSessionReq();
    try {
      client.OpenSession(openReq).getSessionHandle();
    }
 catch (    Exception e) {
      caughtEx=true;
      System.out.println("Exception expected: " + e.toString());
    }
    assertTrue("Exception expected",caughtEx);
  }
  private TCLIService.Client getClient(  TTransport transport) throws Exception {
    TProtocol protocol=new TBinaryProtocol(transport);
    return new TCLIService.Client(protocol);
  }
  private TTransport getRawBinaryTransport() throws Exception {
    return HiveAuthUtils.getSocketTransport(ThriftCLIServiceTest.host,ThriftCLIServiceTest.port,0);
  }
  private static TTransport getHttpTransport() throws Exception {
    DefaultHttpClient httpClient=new DefaultHttpClient();
    String httpUrl=getHttpUrl();
    httpClient.addRequestInterceptor(new HttpBasicAuthInterceptor(ThriftCLIServiceTest.USERNAME,ThriftCLIServiceTest.PASSWORD,null,null,false,null));
    return new THttpClient(httpUrl,httpClient);
  }
  private static String getHttpUrl(){
    return transportMode + "://" + ThriftCLIServiceTest.host+ ":"+ ThriftCLIServiceTest.port+ "/"+ thriftHttpPath+ "/";
  }
  /** 
 * Test additional http headers passed to request interceptor.
 * @throws Exception
 */
  @Test public void testAdditionalHttpHeaders() throws Exception {
    TTransport transport;
    DefaultHttpClient hClient=new DefaultHttpClient();
    String httpUrl=getHttpUrl();
    Map<String,String> additionalHeaders=new HashMap<String,String>();
    additionalHeaders.put("key1","value1");
    additionalHeaders.put("key2","value2");
    HttpBasicAuthInterceptorWithLogging authInt=new HttpBasicAuthInterceptorWithLogging(ThriftCLIServiceTest.USERNAME,ThriftCLIServiceTest.PASSWORD,null,null,false,additionalHeaders);
    hClient.addRequestInterceptor(authInt);
    transport=new THttpClient(httpUrl,hClient);
    TCLIService.Client httpClient=getClient(transport);
    TOpenSessionReq openReq=new TOpenSessionReq();
    httpClient.OpenSession(openReq).getSessionHandle();
    ArrayList<String> headers=authInt.getRequestHeaders();
    for (    String h : headers) {
      assertTrue(h.contains("key1:value1"));
      assertTrue(h.contains("key2:value2"));
    }
  }
  /** 
 * This factory creates a mocked HiveAuthorizer class. Use the mocked class to capture the argument passed to it in the test case.
 */
static class MockedHiveAuthorizerFactory implements HiveAuthorizerFactory {
    @Override public HiveAuthorizer createHiveAuthorizer(    HiveMetastoreClientFactory metastoreClientFactory,    HiveConf conf,    HiveAuthenticationProvider authenticator,    HiveAuthzSessionContext ctx){
      mockedAuthorizer=Mockito.mock(HiveAuthorizer.class);
      return mockedAuthorizer;
    }
  }
  /** 
 * Test if addresses in X-Forwarded-For are passed to HiveAuthorizer calls
 * @throws Exception
 */
  @Test public void testForwardedHeaders() throws Exception {
    verifyForwardedHeaders(new ArrayList<String>(Arrays.asList("127.0.0.1","202.101.101.101")),"show tables");
    verifyForwardedHeaders(new ArrayList<String>(Arrays.asList("202.101.101.101")),"fs -ls /");
    verifyForwardedHeaders(new ArrayList<String>(),"show databases");
  }
  private void verifyForwardedHeaders(  ArrayList<String> headerIPs,  String cmd) throws Exception {
    TTransport transport;
    DefaultHttpClient hClient=new DefaultHttpClient();
    String httpUrl=getHttpUrl();
    if (!headerIPs.isEmpty()) {
      Header xForwardHeader=new BasicHeader("X-Forwarded-For",Joiner.on(",").join(headerIPs));
      RequestDefaultHeaders headerInterceptor=new RequestDefaultHeaders(Arrays.asList(xForwardHeader));
      hClient.addRequestInterceptor(headerInterceptor);
    }
    HttpBasicAuthInterceptor authInt=new HttpBasicAuthInterceptor(ThriftCLIServiceTest.USERNAME,ThriftCLIServiceTest.PASSWORD,null,null,false,null);
    hClient.addRequestInterceptor(authInt);
    transport=new THttpClient(httpUrl,hClient);
    TCLIService.Client httpClient=getClient(transport);
    TOpenSessionReq openReq=new TOpenSessionReq();
    TOpenSessionResp openResp=httpClient.OpenSession(openReq);
    TExecuteStatementReq execReq=new TExecuteStatementReq(openResp.getSessionHandle(),"show tables");
    httpClient.ExecuteStatement(execReq);
    ArgumentCaptor<HiveAuthzContext> contextCapturer=ArgumentCaptor.forClass(HiveAuthzContext.class);
    verify(mockedAuthorizer).checkPrivileges(any(HiveOperationType.class),Matchers.anyListOf(HivePrivilegeObject.class),Matchers.anyListOf(HivePrivilegeObject.class),contextCapturer.capture());
    HiveAuthzContext context=contextCapturer.getValue();
    System.err.println("Forwarded IP Addresses " + context.getForwardedAddresses());
    List<String> auditIPAddresses=new ArrayList<String>(context.getForwardedAddresses());
    Collections.sort(auditIPAddresses);
    Collections.sort(headerIPs);
    Assert.assertEquals("Checking forwarded IP Address",headerIPs,auditIPAddresses);
  }
}
