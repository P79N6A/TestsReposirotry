public class TestObjectStoreInitRetry {
  private static boolean noisy=true;
  private static int injectConnectFailure=0;
  public static void setInjectConnectFailure(  int x){
    injectConnectFailure=x;
  }
  public static int getInjectConnectFailure(){
    return injectConnectFailure;
  }
  public static void decrementInjectConnectFailure(){
    injectConnectFailure--;
  }
  @BeforeClass public static void oneTimeSetup() throws SQLException {
    DriverManager.registerDriver(new FakeDerby());
  }
  @AfterClass public static void oneTimeTearDown() throws SQLException {
    DriverManager.deregisterDriver(new FakeDerby());
  }
  public static void misbehave() throws RuntimeException {
    TestObjectStoreInitRetry.debugTrace();
    if (TestObjectStoreInitRetry.getInjectConnectFailure() > 0) {
      TestObjectStoreInitRetry.decrementInjectConnectFailure();
      RuntimeException re=new JDOCanRetryException();
      if (noisy) {
        System.err.println("MISBEHAVE:" + TestObjectStoreInitRetry.getInjectConnectFailure());
        re.printStackTrace(System.err);
      }
      throw re;
    }
  }
  public static void debugTrace(){
    if (noisy) {
      Exception e=new Exception();
      System.err.println("." + e.getStackTrace()[1].getLineNumber() + ":"+ TestObjectStoreInitRetry.getInjectConnectFailure());
    }
  }
  protected static HiveConf hiveConf;
  @Test public void testObjStoreRetry() throws Exception {
    hiveConf=new HiveConf(this.getClass());
    hiveConf.setIntVar(ConfVars.HMSHANDLERATTEMPTS,4);
    hiveConf.setVar(ConfVars.HMSHANDLERINTERVAL,"1s");
    hiveConf.setVar(ConfVars.METASTORE_CONNECTION_DRIVER,FakeDerby.class.getName());
    hiveConf.setBoolVar(ConfVars.METASTORE_TRY_DIRECT_SQL,true);
    String jdbcUrl=hiveConf.get(ConfVars.METASTORECONNECTURLKEY.varname);
    jdbcUrl=jdbcUrl.replace("derby","fderby");
    hiveConf.setVar(ConfVars.METASTORECONNECTURLKEY,jdbcUrl);
    ObjectStore objStore=new ObjectStore();
    Exception savE=null;
    try {
      setInjectConnectFailure(5);
      objStore.setConf(hiveConf);
    }
 catch (    Exception e) {
      e.printStackTrace(System.err);
      savE=e;
    }
    assertEquals(1,getInjectConnectFailure());
    assertNotNull(savE);
    setInjectConnectFailure(0);
    objStore.setConf(hiveConf);
    assertEquals(0,getInjectConnectFailure());
  }
}
