public class TestRow {
  @Test public void testUsage(){
    Schema schema=createTestSchema();
    Row row=new Row(schema);
    Random rand=new Random();
    int iterations=100;
    Text col0=new Text();
    IntWritable col1=new IntWritable();
    for (int idx=0; idx < iterations; ++idx) {
      boolean isNullCol0=(rand.nextDouble() <= 0.25);
      col0.set(RandomStringUtils.random(10));
      row.setValue(0,isNullCol0 ? null : col0);
      boolean isNullCol1=(rand.nextDouble() <= 0.25);
      col1.set(rand.nextInt());
      row.setValue(1,isNullCol1 ? null : col1);
      if (isNullCol0) {
        assertTrue(row.getValue(0) == null);
        assertTrue(row.getValue("col0") == null);
      }
 else {
        assertTrue(row.getValue(0) != null);
        assertTrue(col0 != row.getValue(0));
        assertEquals(col0,row.getValue(0));
        assertEquals(col0,row.getValue("col0"));
      }
      if (isNullCol1) {
        assertTrue(row.getValue(1) == null);
        assertTrue(row.getValue("col1") == null);
      }
 else {
        assertTrue(row.getValue(1) != null);
        assertTrue(col1 != row.getValue(1));
        assertEquals(col1,row.getValue(1));
        assertEquals(col1,row.getValue("col1"));
      }
    }
  }
  private Schema createTestSchema(){
    List<FieldDesc> colDescs=new ArrayList<FieldDesc>();
    colDescs.add(new FieldDesc("col0",new TypeDesc(TypeDesc.Type.STRING)));
    colDescs.add(new FieldDesc("col1",new TypeDesc(TypeDesc.Type.INT)));
    Schema schema=new Schema(colDescs);
    return schema;
  }
}
