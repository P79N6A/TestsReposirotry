/** 
 * Test context information that gets passed to authorization factory
 */
public class TestCLIAuthzSessionContext {
  private static HiveAuthzSessionContext sessionCtx;
  private static CliDriver driver;
  /** 
 * This factory captures the HiveAuthzSessionContext argument and returns mocked HiveAuthorizer class
 */
static class MockedHiveAuthorizerFactory implements HiveAuthorizerFactory {
    @Override public HiveAuthorizer createHiveAuthorizer(    HiveMetastoreClientFactory metastoreClientFactory,    HiveConf conf,    HiveAuthenticationProvider authenticator,    HiveAuthzSessionContext ctx){
      TestCLIAuthzSessionContext.sessionCtx=ctx;
      HiveAuthorizer mockedAuthorizer=Mockito.mock(HiveAuthorizer.class);
      return mockedAuthorizer;
    }
  }
  @BeforeClass public static void beforeTest() throws Exception {
    HiveConf conf=new HiveConf();
    conf.setVar(ConfVars.HIVE_AUTHORIZATION_MANAGER,MockedHiveAuthorizerFactory.class.getName());
    conf.setVar(ConfVars.HIVE_AUTHENTICATOR_MANAGER,SessionStateUserAuthenticator.class.getName());
    conf.setBoolVar(ConfVars.HIVE_AUTHORIZATION_ENABLED,true);
    conf.setBoolVar(ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
    CliSessionState ss=new CliSessionState(conf);
    ss.err=System.err;
    ss.out=System.out;
    SessionState.start(ss);
    TestCLIAuthzSessionContext.driver=new CliDriver();
  }
  @AfterClass public static void afterTest() throws Exception {
  }
  @Test public void testAuthzSessionContextContents() throws Exception {
    driver.processCmd("show tables");
    assertTrue("session string size check",sessionCtx.getSessionString().length() > 10);
    assertEquals("Client type ",HiveAuthzSessionContext.CLIENT_TYPE.HIVECLI,sessionCtx.getClientType());
  }
}
