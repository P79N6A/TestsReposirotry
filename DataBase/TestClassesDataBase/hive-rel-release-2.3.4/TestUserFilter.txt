@RunWith(MockitoJUnitRunner.class) public class TestUserFilter {
  private FilterFactory factory;
  private HiveConf conf;
  @Mock private DirSearch search;
  @Before public void setup(){
    conf=new HiveConf();
    factory=new UserFilterFactory();
  }
  @Test public void testFactory(){
    conf.unset(HiveConf.ConfVars.HIVE_SERVER2_PLAIN_LDAP_USERFILTER.varname);
    assertNull(factory.getInstance(conf));
    conf.setVar(HiveConf.ConfVars.HIVE_SERVER2_PLAIN_LDAP_USERFILTER,"User1");
    assertNotNull(factory.getInstance(conf));
  }
  @Test public void testApplyPositive() throws AuthenticationException, NamingException, IOException {
    conf.setVar(HiveConf.ConfVars.HIVE_SERVER2_PLAIN_LDAP_USERFILTER,"User1,User2,uSeR3");
    Filter filter=factory.getInstance(conf);
    filter.apply(search,"User1");
    filter.apply(search,"uid=user2,ou=People,dc=example,dc=com");
    filter.apply(search,"User3@mydomain.com");
  }
  @Test(expected=AuthenticationException.class) public void testApplyNegative() throws AuthenticationException, NamingException, IOException {
    conf.setVar(HiveConf.ConfVars.HIVE_SERVER2_PLAIN_LDAP_USERFILTER,"User1,User2");
    Filter filter=factory.getInstance(conf);
    filter.apply(search,"User3");
  }
}
