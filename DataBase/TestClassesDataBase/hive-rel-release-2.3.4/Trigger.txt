private static final class Trigger implements Watcher {
  private final Event.EventType type;
  private final CountDownLatch latch;
  public Trigger(  Event.EventType type){
    assertNotNull(type);
    this.type=type;
    this.latch=new CountDownLatch(1);
  }
  @Override public void process(  WatchedEvent event){
    if (type == event.getType()) {
      latch.countDown();
    }
  }
  public boolean firedWithin(  long duration,  TimeUnit unit){
    try {
      return latch.await(duration,unit);
    }
 catch (    InterruptedException e) {
      throw Throwables.propagate(e);
    }
  }
  private static Trigger created(){
    return new Trigger(Event.EventType.NodeCreated);
  }
  private static Trigger deleted(){
    return new Trigger(Event.EventType.NodeDeleted);
  }
}
