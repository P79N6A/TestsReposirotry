public class TestShortestJobFirstComparator {
  @Test(timeout=60000) public void testWaitQueueComparator() throws InterruptedException {
    TaskWrapper r1=createTaskWrapper(createSubmitWorkRequestProto(1,2,100,200,"q1"),false,100000);
    TaskWrapper r2=createTaskWrapper(createSubmitWorkRequestProto(2,4,200,300,"q2"),false,100000);
    TaskWrapper r3=createTaskWrapper(createSubmitWorkRequestProto(3,6,300,400,"q3"),false,1000000);
    TaskWrapper r4=createTaskWrapper(createSubmitWorkRequestProto(4,8,400,500,"q4"),false,1000000);
    TaskWrapper r5=createTaskWrapper(createSubmitWorkRequestProto(5,10,500,600,"q5"),false,1000000);
    EvictingPriorityBlockingQueue<TaskWrapper> queue=new EvictingPriorityBlockingQueue<>(new ShortestJobFirstComparator(),4);
    assertNull(queue.offer(r1,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r2,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r3,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r4,0));
    assertEquals(r1,queue.peek());
    assertEquals(r5,queue.offer(r5,0));
    assertEquals(r1,queue.take());
    assertEquals(r2,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r4,queue.take());
    r1=createTaskWrapper(createSubmitWorkRequestProto(1,2,100,200,"q1"),true,100000);
    r2=createTaskWrapper(createSubmitWorkRequestProto(2,4,200,300,"q2"),true,100000);
    r3=createTaskWrapper(createSubmitWorkRequestProto(3,6,300,400,"q3"),true,1000000);
    r4=createTaskWrapper(createSubmitWorkRequestProto(4,8,400,500,"q4"),true,1000000);
    r5=createTaskWrapper(createSubmitWorkRequestProto(5,10,500,600,"q5"),true,1000000);
    queue=new EvictingPriorityBlockingQueue<TaskWrapper>(new ShortestJobFirstComparator(),4);
    assertNull(queue.offer(r1,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r2,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r3,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r4,0));
    assertEquals(r1,queue.peek());
    assertEquals(r5,queue.offer(r5,0));
    assertEquals(r1,queue.take());
    assertEquals(r2,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r4,queue.take());
    r1=createTaskWrapper(createSubmitWorkRequestProto(1,1,100,1000,"q1"),true,100000);
    r2=createTaskWrapper(createSubmitWorkRequestProto(2,1,200,900,"q2"),false,100000);
    r3=createTaskWrapper(createSubmitWorkRequestProto(3,1,300,800,"q3"),true,1000000);
    r4=createTaskWrapper(createSubmitWorkRequestProto(4,1,400,700,"q4"),false,1000000);
    r5=createTaskWrapper(createSubmitWorkRequestProto(5,10,500,600,"q5"),true,1000000);
    queue=new EvictingPriorityBlockingQueue<TaskWrapper>(new ShortestJobFirstComparator(),4);
    assertNull(queue.offer(r1,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r2,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r3,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r4,0));
    assertEquals(r1,queue.peek());
    assertEquals(r4,queue.offer(r5,0));
    assertEquals(r1,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r5,queue.take());
    assertEquals(r2,queue.take());
    r1=createTaskWrapper(createSubmitWorkRequestProto(1,2,100,200,"q1"),true,100000);
    r2=createTaskWrapper(createSubmitWorkRequestProto(2,4,200,300,"q2"),false,100000);
    r3=createTaskWrapper(createSubmitWorkRequestProto(3,6,300,400,"q3"),true,1000000);
    r4=createTaskWrapper(createSubmitWorkRequestProto(4,8,400,500,"q4"),false,1000000);
    r5=createTaskWrapper(createSubmitWorkRequestProto(5,10,500,600,"q5"),true,1000000);
    queue=new EvictingPriorityBlockingQueue<TaskWrapper>(new ShortestJobFirstComparator(),4);
    assertNull(queue.offer(r1,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r2,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r3,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r4,0));
    assertEquals(r1,queue.peek());
    assertEquals(r4,queue.offer(r5,0));
    assertEquals(r1,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r5,queue.take());
    assertEquals(r2,queue.take());
    r1=createTaskWrapper(createSubmitWorkRequestProto(1,2,100,200,"q1"),true,100000);
    r2=createTaskWrapper(createSubmitWorkRequestProto(2,4,200,300,"q2"),false,100000);
    r3=createTaskWrapper(createSubmitWorkRequestProto(3,6,300,400,"q3"),false,1000000);
    r4=createTaskWrapper(createSubmitWorkRequestProto(4,8,400,500,"q4"),false,1000000);
    r5=createTaskWrapper(createSubmitWorkRequestProto(5,10,500,600,"q5"),true,1000000);
    queue=new EvictingPriorityBlockingQueue<TaskWrapper>(new ShortestJobFirstComparator(),4);
    assertNull(queue.offer(r1,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r2,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r3,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r4,0));
    assertEquals(r1,queue.peek());
    assertEquals(r4,queue.offer(r5,0));
    assertEquals(r1,queue.take());
    assertEquals(r5,queue.take());
    assertEquals(r2,queue.take());
    assertEquals(r3,queue.take());
    r1=createTaskWrapper(createSubmitWorkRequestProto(1,2,100,200,"q1"),false,100000);
    r2=createTaskWrapper(createSubmitWorkRequestProto(2,4,200,300,"q2"),true,100000);
    r3=createTaskWrapper(createSubmitWorkRequestProto(3,6,300,400,"q3"),true,1000000);
    r4=createTaskWrapper(createSubmitWorkRequestProto(4,8,400,500,"q4"),true,1000000);
    r5=createTaskWrapper(createSubmitWorkRequestProto(5,10,500,600,"q5"),true,1000000);
    queue=new EvictingPriorityBlockingQueue<TaskWrapper>(new ShortestJobFirstComparator(),4);
    assertNull(queue.offer(r1,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r2,0));
    assertEquals(r2,queue.peek());
    assertNull(queue.offer(r3,0));
    assertEquals(r2,queue.peek());
    assertNull(queue.offer(r4,0));
    assertEquals(r2,queue.peek());
    assertEquals(r1,queue.offer(r5,0));
    assertEquals(r2,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r4,queue.take());
    assertEquals(r5,queue.take());
  }
  @Test(timeout=60000) public void testWaitQueueComparatorWithinDagPriority() throws InterruptedException {
    TaskWrapper r1=createTaskWrapper(createSubmitWorkRequestProto(1,1,0,10,100,10),false,100000);
    TaskWrapper r2=createTaskWrapper(createSubmitWorkRequestProto(2,1,0,10,100,1),false,100000);
    TaskWrapper r3=createTaskWrapper(createSubmitWorkRequestProto(3,1,0,10,100,5),false,100000);
    EvictingPriorityBlockingQueue<TaskWrapper> queue=new EvictingPriorityBlockingQueue<>(new ShortestJobFirstComparator(),4);
    assertNull(queue.offer(r1,0));
    assertNull(queue.offer(r2,0));
    assertNull(queue.offer(r3,0));
    assertEquals(r2,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r1,queue.take());
  }
  @Test(timeout=60000) public void testWaitQueueComparatorCanFinish() throws InterruptedException {
    TaskWrapper r1=createTaskWrapper(createSubmitWorkRequestProto(1,1,0,10,100,2),true,false,100000);
    TaskWrapper r2=createTaskWrapper(createSubmitWorkRequestProto(2,1,0,10,100,1),false,true,100000);
    TaskWrapper r3=createTaskWrapper(createSubmitWorkRequestProto(3,1,0,10,100,5),true,true,100000);
    EvictingPriorityBlockingQueue<TaskWrapper> queue=new EvictingPriorityBlockingQueue<>(new ShortestJobFirstComparator(),4);
    assertNull(queue.offer(r1,0));
    assertNull(queue.offer(r2,0));
    assertNull(queue.offer(r3,0));
    assertEquals(r2,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r1,queue.take());
  }
  @Test(timeout=60000) public void testWaitQueueComparatorWithinSameDagPriority() throws InterruptedException {
    TaskWrapper r1=createTaskWrapper(createSubmitWorkRequestProto(1,1,0,10,100,10),true,100000);
    TaskWrapper r2=createTaskWrapper(createSubmitWorkRequestProto(2,1,0,10,100,10),true,100000);
    TaskWrapper r3=createTaskWrapper(createSubmitWorkRequestProto(3,1,0,10,100,10),true,100000);
    EvictingPriorityBlockingQueue<TaskWrapper> queue=new EvictingPriorityBlockingQueue<>(new ShortestJobFirstComparator(),3);
    assertNull(queue.offer(r1,0));
    assertNull(queue.offer(r2,0));
    assertNull(queue.offer(r3,0));
    TaskWrapper r4=createTaskWrapper(createSubmitWorkRequestProto(4,1,0,10,100,10),true,100000);
    assertEquals(r4,queue.offer(r4,0));
  }
  @Test(timeout=60000) public void testWaitQueueComparatorParallelism() throws InterruptedException {
    TaskWrapper r1=createTaskWrapper(createSubmitWorkRequestProto(1,10,3,10,100,1,"q1"),false,100000);
    TaskWrapper r2=createTaskWrapper(createSubmitWorkRequestProto(2,10,7,10,100,1,"q2"),false,100000);
    TaskWrapper r3=createTaskWrapper(createSubmitWorkRequestProto(3,10,5,10,100,1,"q3"),false,100000);
    EvictingPriorityBlockingQueue<TaskWrapper> queue=new EvictingPriorityBlockingQueue<>(new ShortestJobFirstComparator(),4);
    assertNull(queue.offer(r1,0));
    assertNull(queue.offer(r2,0));
    assertNull(queue.offer(r3,0));
    assertEquals(r2,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r1,queue.take());
  }
  @Test(timeout=60000) public void testWaitQueueComparatorAging() throws InterruptedException {
    TaskWrapper r1=createTaskWrapper(createSubmitWorkRequestProto(1,10,100,200,"q1"),true,100000);
    TaskWrapper r2=createTaskWrapper(createSubmitWorkRequestProto(2,20,100,200,"q2"),true,100000);
    TaskWrapper r3=createTaskWrapper(createSubmitWorkRequestProto(3,30,100,200,"q3"),true,100000);
    EvictingPriorityBlockingQueue<TaskWrapper> queue=new EvictingPriorityBlockingQueue<>(new ShortestJobFirstComparator(),4);
    assertNull(queue.offer(r1,0));
    assertNull(queue.offer(r2,0));
    assertNull(queue.offer(r3,0));
    assertEquals(r1,queue.take());
    assertEquals(r2,queue.take());
    assertEquals(r3,queue.take());
    r1=createTaskWrapper(createSubmitWorkRequestProto(1,10,100,200,"q1"),true,100000);
    r2=createTaskWrapper(createSubmitWorkRequestProto(2,20,100,3000,"q2"),true,100000);
    r3=createTaskWrapper(createSubmitWorkRequestProto(3,30,100,4000,"q3"),true,100000);
    queue=new EvictingPriorityBlockingQueue<>(new ShortestJobFirstComparator(),4);
    assertNull(queue.offer(r1,0));
    assertNull(queue.offer(r2,0));
    assertNull(queue.offer(r3,0));
    assertEquals(r2,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r1,queue.take());
  }
}
