/** 
 */
public class TestColumnMappingFactory {
  @Test(expected=NullPointerException.class) public void testNullArgumentsFailFast(){
    ColumnMappingFactory.get(null,null,null,null);
  }
  @Test public void testRowIdCreatesRowIdMapping(){
    ColumnMapping mapping=ColumnMappingFactory.get(AccumuloHiveConstants.ROWID,ColumnEncoding.STRING,"row",TypeInfoFactory.stringTypeInfo);
    Assert.assertEquals(HiveAccumuloRowIdColumnMapping.class,mapping.getClass());
    Assert.assertEquals("row",mapping.getColumnName());
    Assert.assertEquals(TypeInfoFactory.stringTypeInfo.toString(),mapping.getColumnType());
  }
  @Test public void testColumnMappingCreatesAccumuloColumnMapping(){
    ColumnMapping mapping=ColumnMappingFactory.get("cf:cq",ColumnEncoding.STRING,"col",TypeInfoFactory.stringTypeInfo);
    Assert.assertEquals(HiveAccumuloColumnMapping.class,mapping.getClass());
    Assert.assertEquals("col",mapping.getColumnName());
    Assert.assertEquals(TypeInfoFactory.stringTypeInfo.toString(),mapping.getColumnType());
  }
  @Test(expected=InvalidColumnMappingException.class) public void testColumnMappingRequiresCfAndCq(){
    ColumnMappingFactory.parseMapping("cf");
  }
  @Test public void testColumnMappingWithMultipleColons(){
    String cf="cf", cq="cq1:cq2";
    Entry<String,String> pair=ColumnMappingFactory.parseMapping(cf + ":" + cq);
    Assert.assertEquals(cf,pair.getKey());
    Assert.assertEquals(cq,pair.getValue());
  }
  @Test public void testEscapedColumnFamily(){
    String cf="c" + '\\' + ":f", cq="cq1:cq2";
    Entry<String,String> pair=ColumnMappingFactory.parseMapping(cf + ":" + cq);
    Assert.assertEquals("c:f",pair.getKey());
    Assert.assertEquals(cq,pair.getValue());
  }
  @Test public void testEscapedColumnFamilyAndQualifier(){
    String cf="c" + '\\' + ":f", cq="cq1\\:cq2";
    Entry<String,String> pair=ColumnMappingFactory.parseMapping(cf + ":" + cq);
    Assert.assertEquals("c:f",pair.getKey());
    Assert.assertEquals("cq1:cq2",pair.getValue());
  }
  @Test public void testGetMap(){
    String mappingStr="cf:*";
    ColumnMapping mapping=ColumnMappingFactory.get(mappingStr,ColumnEncoding.getDefault(),"col",TypeInfoFactory.getMapTypeInfo(TypeInfoFactory.stringTypeInfo,TypeInfoFactory.stringTypeInfo));
    Assert.assertEquals(HiveAccumuloMapColumnMapping.class,mapping.getClass());
    HiveAccumuloMapColumnMapping mapMapping=(HiveAccumuloMapColumnMapping)mapping;
    Assert.assertEquals("cf",mapMapping.getColumnFamily());
    Assert.assertEquals("",mapMapping.getColumnQualifierPrefix());
    Assert.assertEquals(ColumnEncoding.getDefault(),mapMapping.getKeyEncoding());
    Assert.assertEquals(ColumnEncoding.getDefault(),mapMapping.getValueEncoding());
  }
  @Test public void testGetMapWithPrefix(){
    String mappingStr="cf:foo*";
    ColumnMapping mapping=ColumnMappingFactory.get(mappingStr,ColumnEncoding.getDefault(),"col",TypeInfoFactory.getMapTypeInfo(TypeInfoFactory.stringTypeInfo,TypeInfoFactory.stringTypeInfo));
    Assert.assertEquals(HiveAccumuloMapColumnMapping.class,mapping.getClass());
    HiveAccumuloMapColumnMapping mapMapping=(HiveAccumuloMapColumnMapping)mapping;
    Assert.assertEquals("cf",mapMapping.getColumnFamily());
    Assert.assertEquals("foo",mapMapping.getColumnQualifierPrefix());
    Assert.assertEquals(ColumnEncoding.getDefault(),mapMapping.getKeyEncoding());
    Assert.assertEquals(ColumnEncoding.getDefault(),mapMapping.getValueEncoding());
  }
  @Test public void testEscapedAsterisk(){
    String mappingStr="cf:\\*";
    ColumnMapping mapping=ColumnMappingFactory.get(mappingStr,ColumnEncoding.getDefault(),"col",TypeInfoFactory.stringTypeInfo);
    Assert.assertEquals(HiveAccumuloColumnMapping.class,mapping.getClass());
    HiveAccumuloColumnMapping colMapping=(HiveAccumuloColumnMapping)mapping;
    Assert.assertEquals("cf",colMapping.getColumnFamily());
    Assert.assertEquals("*",colMapping.getColumnQualifier());
    Assert.assertEquals(ColumnEncoding.getDefault(),colMapping.getEncoding());
  }
  @Test public void testPrefixWithEscape(){
    String mappingStr="cf:foo\\*bar*";
    ColumnMapping mapping=ColumnMappingFactory.get(mappingStr,ColumnEncoding.getDefault(),"col",TypeInfoFactory.getMapTypeInfo(TypeInfoFactory.stringTypeInfo,TypeInfoFactory.stringTypeInfo));
    Assert.assertEquals(HiveAccumuloMapColumnMapping.class,mapping.getClass());
    HiveAccumuloMapColumnMapping mapMapping=(HiveAccumuloMapColumnMapping)mapping;
    Assert.assertEquals("cf",mapMapping.getColumnFamily());
    Assert.assertEquals("foo*bar",mapMapping.getColumnQualifierPrefix());
    Assert.assertEquals(ColumnEncoding.getDefault(),mapMapping.getKeyEncoding());
    Assert.assertEquals(ColumnEncoding.getDefault(),mapMapping.getValueEncoding());
  }
  @Test public void testInlineEncodingOverridesDefault(){
    String mappingStr="cf:foo#s";
    ColumnMapping mapping=ColumnMappingFactory.get(mappingStr,ColumnEncoding.BINARY,"col",TypeInfoFactory.stringTypeInfo);
    Assert.assertEquals(HiveAccumuloColumnMapping.class,mapping.getClass());
    HiveAccumuloColumnMapping colMapping=(HiveAccumuloColumnMapping)mapping;
    Assert.assertEquals("cf",colMapping.getColumnFamily());
    Assert.assertEquals("foo",colMapping.getColumnQualifier());
    Assert.assertEquals(ColumnEncoding.STRING,colMapping.getEncoding());
  }
  @Test public void testCaseInsensitiveRowId(){
    String mappingStr=":rowid";
    ColumnMapping mapping=ColumnMappingFactory.get(mappingStr,ColumnEncoding.getDefault(),"col",TypeInfoFactory.stringTypeInfo);
    Assert.assertEquals(HiveAccumuloRowIdColumnMapping.class,mapping.getClass());
    mappingStr=":rowid#b";
    mapping=ColumnMappingFactory.get(mappingStr,ColumnEncoding.getDefault(),"col",TypeInfoFactory.stringTypeInfo);
    Assert.assertEquals(HiveAccumuloRowIdColumnMapping.class,mapping.getClass());
  }
}
