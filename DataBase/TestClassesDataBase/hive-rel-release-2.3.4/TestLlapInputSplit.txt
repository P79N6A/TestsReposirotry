public class TestLlapInputSplit {
  @Test public void testWritable() throws Exception {
    int splitNum=88;
    byte[] planBytes="0123456789987654321".getBytes();
    byte[] fragmentBytes="abcdefghijklmnopqrstuvwxyz".getBytes();
    SplitLocationInfo[] locations={new SplitLocationInfo("location1",false),new SplitLocationInfo("location2",false)};
    ArrayList<FieldDesc> colDescs=new ArrayList<FieldDesc>();
    colDescs.add(new FieldDesc("col1",new TypeDesc(TypeDesc.Type.STRING)));
    colDescs.add(new FieldDesc("col2",new TypeDesc(TypeDesc.Type.INT)));
    Schema schema=new Schema(colDescs);
    byte[] tokenBytes=new byte[]{1};
    LlapInputSplit split1=new LlapInputSplit(splitNum,planBytes,fragmentBytes,null,locations,schema,"hive",tokenBytes);
    ByteArrayOutputStream byteOutStream=new ByteArrayOutputStream();
    DataOutputStream dataOut=new DataOutputStream(byteOutStream);
    split1.write(dataOut);
    ByteArrayInputStream byteInStream=new ByteArrayInputStream(byteOutStream.toByteArray());
    DataInputStream dataIn=new DataInputStream(byteInStream);
    LlapInputSplit split2=new LlapInputSplit();
    split2.readFields(dataIn);
    assertEquals(0,byteInStream.available());
    checkLlapSplits(split1,split2);
  }
  static void checkLlapSplits(  LlapInputSplit split1,  LlapInputSplit split2) throws Exception {
    assertEquals(split1.getSplitNum(),split2.getSplitNum());
    assertArrayEquals(split1.getPlanBytes(),split2.getPlanBytes());
    assertArrayEquals(split1.getFragmentBytes(),split2.getFragmentBytes());
    assertArrayEquals(split1.getTokenBytes(),split2.getTokenBytes());
    SplitLocationInfo[] locationInfo1=split1.getLocationInfo();
    SplitLocationInfo[] locationInfo2=split2.getLocationInfo();
    for (int idx=0; idx < locationInfo1.length; ++idx) {
      assertEquals(locationInfo1[idx].getLocation(),locationInfo2[idx].getLocation());
      assertEquals(locationInfo1[idx].isInMemory(),locationInfo2[idx].isInMemory());
      assertEquals(locationInfo1[idx].isOnDisk(),locationInfo2[idx].isOnDisk());
    }
    assertArrayEquals(split1.getLocations(),split2.getLocations());
    assertEquals(split1.getSchema().toString(),split2.getSchema().toString());
    assertEquals(split1.getLlapUser(),split2.getLlapUser());
  }
}
