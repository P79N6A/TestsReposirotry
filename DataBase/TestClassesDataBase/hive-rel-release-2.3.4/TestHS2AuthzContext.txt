/** 
 * Test context information that gets passed to authorization api
 */
public class TestHS2AuthzContext {
  private static MiniHS2 miniHS2=null;
  static HiveAuthorizer mockedAuthorizer;
  static HiveAuthenticationProvider authenticator;
  /** 
 * This factory creates a mocked HiveAuthorizer class. Use the mocked class to capture the argument passed to it in the test case.
 */
static class MockedHiveAuthorizerFactory implements HiveAuthorizerFactory {
    @Override public HiveAuthorizer createHiveAuthorizer(    HiveMetastoreClientFactory metastoreClientFactory,    HiveConf conf,    HiveAuthenticationProvider authenticator,    HiveAuthzSessionContext ctx){
      TestHS2AuthzContext.mockedAuthorizer=Mockito.mock(HiveAuthorizer.class);
      TestHS2AuthzContext.authenticator=authenticator;
      return TestHS2AuthzContext.mockedAuthorizer;
    }
  }
  @BeforeClass public static void beforeTest() throws Exception {
    Class.forName(MiniHS2.getJdbcDriverName());
    HiveConf conf=new HiveConf();
    conf.setVar(ConfVars.HIVE_AUTHORIZATION_MANAGER,MockedHiveAuthorizerFactory.class.getName());
    conf.setVar(ConfVars.HIVE_AUTHENTICATOR_MANAGER,SessionStateUserAuthenticator.class.getName());
    conf.setBoolVar(ConfVars.HIVE_AUTHORIZATION_ENABLED,true);
    conf.setBoolVar(ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
    conf.setBoolVar(ConfVars.HIVE_SERVER2_ENABLE_DOAS,false);
    miniHS2=new MiniHS2(conf);
    miniHS2.start(new HashMap<String,String>());
  }
  @AfterClass public static void afterTest() throws Exception {
    if (miniHS2.isStarted()) {
      miniHS2.stop();
    }
  }
  @Test public void testAuthzContextContentsDriverCmd() throws Exception {
    String cmd="show tables";
    verifyContextContents(cmd,cmd);
  }
  @Test public void testAuthzContextContentsCmdProcessorCmd() throws Exception {
    verifyContextContents("dfs -ls /","-ls /");
  }
  private void verifyContextContents(  final String cmd,  String ctxCmd) throws Exception, HiveAuthzPluginException, HiveAccessControlException {
    Connection hs2Conn=getConnection("user1");
    Statement stmt=hs2Conn.createStatement();
    stmt.execute(cmd);
    stmt.close();
    hs2Conn.close();
    ArgumentCaptor<HiveAuthzContext> contextCapturer=ArgumentCaptor.forClass(HiveAuthzContext.class);
    verify(mockedAuthorizer).checkPrivileges(any(HiveOperationType.class),Matchers.anyListOf(HivePrivilegeObject.class),Matchers.anyListOf(HivePrivilegeObject.class),contextCapturer.capture());
    HiveAuthzContext context=contextCapturer.getValue();
    assertEquals("Command ",ctxCmd,context.getCommandString());
    assertTrue("ip address pattern check",context.getIpAddress().matches("[.:a-fA-F0-9]+"));
    assertTrue("ip address size check",context.getIpAddress().length() > 7);
  }
  private Connection getConnection(  String userName) throws Exception {
    return DriverManager.getConnection(miniHS2.getJdbcURL(),userName,"bar");
  }
}
