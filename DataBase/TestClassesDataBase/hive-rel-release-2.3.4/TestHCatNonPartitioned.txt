public class TestHCatNonPartitioned extends HCatMapReduceTest {
  private static List<HCatRecord> writeRecords;
  static List<HCatFieldSchema> partitionColumns;
  public TestHCatNonPartitioned(  String formatName,  String serdeClass,  String inputFormatClass,  String outputFormatClass) throws Exception {
    super(formatName,serdeClass,inputFormatClass,outputFormatClass);
    dbName=null;
    tableName="testHCatNonPartitionedTable_" + formatName;
    writeRecords=new ArrayList<HCatRecord>();
    for (int i=0; i < 20; i++) {
      List<Object> objList=new ArrayList<Object>();
      objList.add(i);
      objList.add("strvalue" + i);
      writeRecords.add(new DefaultHCatRecord(objList));
    }
    partitionColumns=new ArrayList<HCatFieldSchema>();
    partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("c1",serdeConstants.INT_TYPE_NAME,"")));
    partitionColumns.add(HCatSchemaUtils.getHCatFieldSchema(new FieldSchema("c2",serdeConstants.STRING_TYPE_NAME,"")));
  }
  @Override protected List<FieldSchema> getPartitionKeys(){
    List<FieldSchema> fields=new ArrayList<FieldSchema>();
    return fields;
  }
  @Override protected List<FieldSchema> getTableColumns(){
    List<FieldSchema> fields=new ArrayList<FieldSchema>();
    fields.add(new FieldSchema("c1",serdeConstants.INT_TYPE_NAME,""));
    fields.add(new FieldSchema("c2",serdeConstants.STRING_TYPE_NAME,""));
    return fields;
  }
  @Test public void testHCatNonPartitionedTable() throws Exception {
    Map<String,String> partitionMap=new HashMap<String,String>();
    runMRCreate(null,partitionColumns,writeRecords,10,true);
    IOException exc=null;
    try {
      Job j=runMRCreate(null,partitionColumns,writeRecords,20,true);
      assertEquals(!isTableImmutable(),j.isSuccessful());
    }
 catch (    IOException e) {
      exc=e;
      assertTrue(exc instanceof HCatException);
      assertEquals(ErrorType.ERROR_NON_EMPTY_TABLE,((HCatException)exc).getErrorType());
    }
    if (!isTableImmutable()) {
      assertNull(exc);
    }
    exc=null;
    partitionMap.clear();
    partitionMap.put("px","p1value2");
    try {
      Job j=runMRCreate(partitionMap,partitionColumns,writeRecords,20,true);
      assertFalse(j.isSuccessful());
    }
 catch (    IOException e) {
      exc=e;
      assertTrue(exc != null);
      assertTrue(exc instanceof HCatException);
      assertEquals(ErrorType.ERROR_INVALID_PARTITION_VALUES,((HCatException)exc).getErrorType());
    }
    if (isTableImmutable()) {
      runMRRead(10);
    }
 else {
      runMRRead(30);
    }
    hiveReadTest();
  }
  private void hiveReadTest() throws Exception {
    String query="select * from " + tableName;
    int retCode=driver.run(query).getResponseCode();
    if (retCode != 0) {
      throw new Exception("Error " + retCode + " running query "+ query);
    }
    ArrayList<String> res=new ArrayList<String>();
    driver.getResults(res);
    if (isTableImmutable()) {
      assertEquals(10,res.size());
    }
 else {
      assertEquals(30,res.size());
    }
    query="select count(*) from " + tableName;
    retCode=driver.run(query).getResponseCode();
    if (retCode != 0) {
      throw new Exception("Error " + retCode + " running query "+ query);
    }
    res=new ArrayList<String>();
    driver.getResults(res);
    if (isTableImmutable()) {
      assertEquals(1,res.size());
      assertEquals("10",res.get(0));
    }
 else {
      assertEquals(1,res.size());
      assertEquals("30",res.get(0));
    }
  }
}
