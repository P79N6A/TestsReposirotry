private static class RowWithPartNRecID implements Row {
  private RecordIdentifier recId;
  private Text data;
  private Text partVal;
  RowWithPartNRecID(){
    this(null,null,null);
  }
  RowWithPartNRecID(  Text t,  Text pv,  RecordIdentifier ri){
    data=t;
    partVal=pv;
    recId=ri;
  }
  @Override public RowWithPartNRecID clone() throws CloneNotSupportedException {
    return new RowWithPartNRecID(this.data,this.partVal,this.recId);
  }
  @Override public void write(  DataOutput dataOutput) throws IOException {
    data.write(dataOutput);
    if (partVal == null) {
      dataOutput.writeBoolean(false);
    }
 else {
      dataOutput.writeBoolean(true);
      partVal.write(dataOutput);
    }
    if (recId == null) {
      dataOutput.writeBoolean(false);
    }
 else {
      dataOutput.writeBoolean(true);
      recId.write(dataOutput);
    }
  }
  @Override public void readFields(  DataInput dataInput) throws IOException {
    data=new Text();
    data.readFields(dataInput);
    boolean notNull=dataInput.readBoolean();
    if (notNull) {
      partVal=new Text();
      partVal.readFields(dataInput);
    }
    notNull=dataInput.readBoolean();
    if (notNull) {
      recId=new RecordIdentifier();
      recId.readFields(dataInput);
    }
  }
  @Override public boolean equals(  Object obj){
    if (obj instanceof RowWithPartNRecID) {
      RowWithPartNRecID other=(RowWithPartNRecID)obj;
      if (data == null && other.data == null)       return checkPartVal(other);
 else       if (data == null)       return false;
 else       if (data.equals(other.data))       return checkPartVal(other);
 else       return false;
    }
 else {
      return false;
    }
  }
  private boolean checkPartVal(  RowWithPartNRecID other){
    if (partVal == null && other.partVal == null)     return checkRecId(other);
 else     if (partVal == null)     return false;
 else     if (partVal.equals(other.partVal))     return checkRecId(other);
 else     return false;
  }
  private boolean checkRecId(  RowWithPartNRecID other){
    if (recId == null && other.recId == null)     return true;
 else     if (recId == null)     return false;
 else     return recId.equals(other.recId);
  }
  @Override public int compareTo(  Row row){
    RowWithPartNRecID other=(RowWithPartNRecID)row;
    if (recId == null && other.recId == null) {
      return comparePartVal(other);
    }
 else     if (recId == null) {
      return -1;
    }
 else {
      int rc=recId.compareTo(other.recId);
      if (rc == 0)       return comparePartVal(other);
 else       return rc;
    }
  }
  private int comparePartVal(  RowWithPartNRecID other){
    if (partVal == null && other.partVal == null) {
      return compareData(other);
    }
 else     if (partVal == null) {
      return -1;
    }
 else {
      int rc=partVal.compareTo(other.partVal);
      if (rc == 0)       return compareData(other);
 else       return rc;
    }
  }
  private int compareData(  RowWithPartNRecID other){
    if (data == null && other.data == null)     return 0;
 else     if (data == null)     return -1;
 else     return data.compareTo(other.data);
  }
}
