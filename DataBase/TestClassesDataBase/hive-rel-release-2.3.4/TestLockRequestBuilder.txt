/** 
 * Tests for LockRequestBuilder.
 */
public class TestLockRequestBuilder {
  @Test public void noUser(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp);
    boolean caughtException=false;
    try {
      LockRequest req=bldr.build();
    }
 catch (    RuntimeException e) {
      Assert.assertEquals("Cannot build a lock without giving a user",e.getMessage());
      caughtException=true;
    }
    Assert.assertTrue(caughtException);
  }
  @Test public void testDbTable() throws Exception {
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp).setUser("fred");
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp);
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(2,locks.size());
    Assert.assertEquals("fred",req.getUser());
    Assert.assertEquals(InetAddress.getLocalHost().getHostName(),req.getHostname());
  }
  @Test public void testTablePartition(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp).setUser(null);
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypartition");
    bldr.addLockComponent(comp);
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(2,locks.size());
    Assert.assertEquals("unknown",req.getUser());
  }
  @Test public void testTwoSeparateDbs(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp).setUser("fred");
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"yourdb");
    bldr.addLockComponent(comp);
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(2,locks.size());
  }
  @Test public void testExExDb(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
  }
  @Test public void testExSWDb(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp).setUser("fred");
    comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp);
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.EXCLUSIVE,locks.get(0).getType());
  }
  @Test public void testExSRDb(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp).setUser("fred");
    comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp);
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.EXCLUSIVE,locks.get(0).getType());
  }
  @Test public void testSWExDb(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.EXCLUSIVE,locks.get(0).getType());
  }
  @Test public void testSWSWDb(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.SHARED_WRITE,locks.get(0).getType());
  }
  @Test public void testSWSRDb(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.SHARED_WRITE,locks.get(0).getType());
  }
  @Test public void testSRExDb(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.EXCLUSIVE,locks.get(0).getType());
  }
  @Test public void testSRSWDb(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.SHARED_WRITE,locks.get(0).getType());
  }
  @Test public void testSRSRDb(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.SHARED_READ,locks.get(0).getType());
  }
  @Test public void testTwoSeparateTables(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("yourtable");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(2,locks.size());
  }
  @Test public void testExExTable(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
  }
  @Test public void testExSWTable(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.EXCLUSIVE,locks.get(0).getType());
  }
  @Test public void testExSRTable(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.EXCLUSIVE,locks.get(0).getType());
  }
  @Test public void testSWExTable(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.EXCLUSIVE,locks.get(0).getType());
  }
  @Test public void testSWSWTable(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.SHARED_WRITE,locks.get(0).getType());
  }
  @Test public void testSWSRTable(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.SHARED_WRITE,locks.get(0).getType());
  }
  @Test public void testSRExTable(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.EXCLUSIVE,locks.get(0).getType());
  }
  @Test public void testSRSWTable(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.SHARED_WRITE,locks.get(0).getType());
  }
  @Test public void testSRSRTable(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.SHARED_READ,locks.get(0).getType());
  }
  @Test public void testTwoSeparatePartitions(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("yourpart");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(2,locks.size());
  }
  @Test public void testExExPart(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
  }
  @Test public void testExSWPart(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.EXCLUSIVE,locks.get(0).getType());
  }
  @Test public void testExSRPart(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.EXCLUSIVE,locks.get(0).getType());
  }
  @Test public void testSWExPart(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.EXCLUSIVE,locks.get(0).getType());
  }
  @Test public void testSWSWPart(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.SHARED_WRITE,locks.get(0).getType());
  }
  @Test public void testSWSRPart(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.SHARED_WRITE,locks.get(0).getType());
  }
  @Test public void testSRExPart(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.EXCLUSIVE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.EXCLUSIVE,locks.get(0).getType());
  }
  @Test public void testSRSWPart(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_WRITE,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.SHARED_WRITE,locks.get(0).getType());
  }
  @Test public void testSRSRPart(){
    LockRequestBuilder bldr=new LockRequestBuilder();
    LockComponent comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp);
    comp=new LockComponent(LockType.SHARED_READ,LockLevel.DB,"mydb");
    comp.setTablename("mytable");
    comp.setPartitionname("mypart");
    bldr.addLockComponent(comp).setUser("fred");
    LockRequest req=bldr.build();
    List<LockComponent> locks=req.getComponent();
    Assert.assertEquals(1,locks.size());
    Assert.assertEquals(LockType.SHARED_READ,locks.get(0).getType());
  }
}
