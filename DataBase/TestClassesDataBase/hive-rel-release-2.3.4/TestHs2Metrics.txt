/** 
 * Tests HiveServer2 metrics.
 */
public class TestHs2Metrics {
  private static MiniHS2 miniHS2;
  private static Map<String,String> confOverlay;
public static class MetricCheckingHook implements HiveSemanticAnalyzerHook {
    @Override public ASTNode preAnalyze(    HiveSemanticAnalyzerHookContext context,    ASTNode ast) throws SemanticException {
      try {
        CodahaleMetrics metrics=(CodahaleMetrics)MetricsFactory.getInstance();
        String json=metrics.dumpJson();
        MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.COUNTER,"active_calls_api_semanticAnalyze",1);
        MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.COUNTER,"active_calls_api_compile",1);
        MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.COUNTER,"active_calls_api_hs2_operation_RUNNING",1);
        MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.COUNTER,"active_calls_api_hs2_sql_operation_RUNNING",1);
      }
 catch (      Exception e) {
        throw new SemanticException("metrics verification failed",e);
      }
      return ast;
    }
    @Override public void postAnalyze(    HiveSemanticAnalyzerHookContext context,    List<Task<? extends Serializable>> rootTasks) throws SemanticException {
    }
  }
  @BeforeClass public static void setup() throws Exception {
    miniHS2=new MiniHS2(new HiveConf());
    confOverlay=new HashMap<String,String>();
    confOverlay.put(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY.varname,"false");
    confOverlay.put(HiveConf.ConfVars.SEMANTIC_ANALYZER_HOOK.varname,MetricCheckingHook.class.getName());
    confOverlay.put(HiveConf.ConfVars.HIVE_SERVER2_METRICS_ENABLED.varname,"true");
    confOverlay.put(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY.varname,"false");
    miniHS2.start(confOverlay);
  }
  @Before public void before() throws Exception {
    HiveConf conf=new HiveConf();
    MetricsFactory.close();
    MetricsFactory.init(conf);
  }
  @Test public void testMetrics() throws Exception {
    String tableName="testMetrics";
    CLIServiceClient serviceClient=miniHS2.getServiceClient();
    SessionHandle sessHandle=serviceClient.openSession("foo","bar");
    serviceClient.executeStatement(sessHandle,"CREATE TABLE " + tableName + " (id INT)",confOverlay);
    CodahaleMetrics metrics=(CodahaleMetrics)MetricsFactory.getInstance();
    String json=metrics.dumpJson();
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.TIMER,"api_hs2_operation_INITIALIZED",1);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.TIMER,"api_hs2_operation_PENDING",1);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.TIMER,"api_hs2_operation_RUNNING",1);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.COUNTER,"hs2_completed_operation_FINISHED",1);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.TIMER,"api_hs2_sql_operation_PENDING",1);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.TIMER,"api_hs2_sql_operation_RUNNING",1);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.COUNTER,"hs2_completed_sql_operation_FINISHED",1);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.TIMER,"api_Driver.run",1);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.COUNTER,"active_calls_api_semanticAnalyze",0);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.COUNTER,"active_calls_api_compile",0);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.COUNTER,"active_calls_api_hs2_operation_RUNNING",0);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.COUNTER,"active_calls_api_hs2_sql_operation_RUNNING",0);
    serviceClient.closeSession(sessHandle);
  }
  @Test public void testClosedScopes() throws Exception {
    CLIServiceClient serviceClient=miniHS2.getServiceClient();
    SessionHandle sessHandle=serviceClient.openSession("foo","bar");
    Exception expectedException=null;
    try {
      serviceClient.executeStatement(sessHandle,"select aaa",confOverlay);
    }
 catch (    Exception e) {
      expectedException=e;
    }
    Assert.assertNotNull("Expected semantic exception",expectedException);
    CodahaleMetrics metrics=(CodahaleMetrics)MetricsFactory.getInstance();
    String json=metrics.dumpJson();
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.TIMER,"api_parse",1);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.TIMER,"api_semanticAnalyze",1);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.COUNTER,"active_calls_api_parse",0);
    MetricsTestUtils.verifyMetricsJson(json,MetricsTestUtils.COUNTER,"active_calls_api_semanticAnalyze",0);
    serviceClient.closeSession(sessHandle);
  }
}
