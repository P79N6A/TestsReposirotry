/** 
 * ThriftCLIServiceTestWithCookie.
 */
public class ThriftCliServiceTestWithCookie {
  protected static int port;
  protected static String host="localhost";
  protected static HiveServer2 hiveServer2;
  protected static ThriftCLIServiceClient client;
  protected static HiveConf hiveConf;
  protected static String USERNAME="anonymous";
  protected static String PASSWORD="anonymous";
  /** 
 * @throws java.lang.Exception
 */
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    port=MetaStoreUtils.findFreePort();
    hiveServer2=new HiveServer2();
    hiveConf=new HiveConf();
    hiveConf.setBoolVar(ConfVars.HIVE_SERVER2_THRIFT_HTTP_COOKIE_AUTH_ENABLED,true);
    hiveConf.setTimeVar(ConfVars.HIVE_SERVER2_THRIFT_HTTP_COOKIE_MAX_AGE,1,TimeUnit.SECONDS);
    hiveConf.setVar(ConfVars.HIVE_SERVER2_TRANSPORT_MODE,"http");
    hiveConf.setVar(ConfVars.HIVE_SERVER2_THRIFT_HTTP_PATH,"cliservice");
    assertNotNull(port);
    assertNotNull(hiveServer2);
    assertNotNull(hiveConf);
    hiveConf.setBoolVar(ConfVars.HIVE_SERVER2_ENABLE_DOAS,false);
    hiveConf.setVar(ConfVars.HIVE_SERVER2_THRIFT_BIND_HOST,host);
    hiveConf.setIntVar(ConfVars.HIVE_SERVER2_THRIFT_HTTP_PORT,port);
    hiveConf.setVar(ConfVars.HIVE_SERVER2_AUTHENTICATION,AuthTypes.NOSASL.toString());
    startHiveServer2WithConf(hiveConf);
    client=getServiceClientInternal();
  }
  /** 
 * @throws java.lang.Exception
 */
  @AfterClass public static void tearDownAfterClass() throws Exception {
    stopHiveServer2();
  }
  protected static void startHiveServer2WithConf(  HiveConf hiveConf) throws Exception {
    hiveServer2.init(hiveConf);
    try {
      hiveServer2.start();
    }
 catch (    Throwable t) {
      t.printStackTrace();
      fail();
    }
    Thread.sleep(2000);
    System.out.println("HiveServer2 started on port " + port);
  }
  protected static void stopHiveServer2() throws Exception {
    if (hiveServer2 != null) {
      hiveServer2.stop();
    }
  }
  protected static ThriftCLIServiceClient getServiceClientInternal(){
    for (    Service service : hiveServer2.getServices()) {
      if (service instanceof ThriftBinaryCLIService) {
        return new ThriftCLIServiceClient((ThriftBinaryCLIService)service);
      }
      if (service instanceof ThriftHttpCLIService) {
        return new ThriftCLIServiceClient((ThriftHttpCLIService)service);
      }
    }
    throw new IllegalStateException("HiveServer2 not running Thrift service");
  }
  /** 
 * @throws java.lang.Exception
 */
  @Before public void setUp() throws Exception {
  }
  /** 
 * @throws java.lang.Exception
 */
  @After public void tearDown() throws Exception {
  }
  @Test public void testOpenSession() throws Exception {
    SessionHandle sessHandle=client.openSession(USERNAME,PASSWORD,new HashMap<String,String>());
    assertNotNull("Session handle should not be null",sessHandle);
    client.closeSession(sessHandle);
  }
  @Test public void testGetFunctions() throws Exception {
    SessionHandle sessHandle=client.openSession(USERNAME,PASSWORD,new HashMap<String,String>());
    assertNotNull("Session handle should not be null",sessHandle);
    String catalogName=null;
    String schemaName=null;
    String functionName="*";
    OperationHandle opHandle=client.getFunctions(sessHandle,catalogName,schemaName,functionName);
    assertNotNull("Operation handle should not be null",opHandle);
    client.closeSession(sessHandle);
  }
  /** 
 * Test synchronous query execution
 * @throws Exception
 */
  @Test public void testExecuteStatement() throws Exception {
    Map<String,String> opConf=new HashMap<String,String>();
    SessionHandle sessHandle=client.openSession(USERNAME,PASSWORD,opConf);
    assertNotNull("Session handle should not be null",sessHandle);
    String queryString="SET hive.lock.manager=" + "org.apache.hadoop.hive.ql.lockmgr.EmbeddedLockManager";
    client.executeStatement(sessHandle,queryString,opConf);
    queryString="DROP TABLE IF EXISTS TEST_EXEC_THRIFT";
    client.executeStatement(sessHandle,queryString,opConf);
    queryString="CREATE TABLE TEST_EXEC_THRIFT(ID STRING)";
    client.executeStatement(sessHandle,queryString,opConf);
    queryString="SELECT ID+1 FROM TEST_EXEC_THRIFT";
    OperationHandle opHandle=client.executeStatement(sessHandle,queryString,opConf);
    assertNotNull(opHandle);
    OperationStatus opStatus=client.getOperationStatus(opHandle,false);
    assertNotNull(opStatus);
    OperationState state=opStatus.getState();
    assertEquals("Query should be finished",OperationState.FINISHED,state);
    queryString="DROP TABLE TEST_EXEC_THRIFT";
    client.executeStatement(sessHandle,queryString,opConf);
    client.closeSession(sessHandle);
  }
}
