public class TestReplicationSemanticAnalyzer {
  static QueryState queryState;
  static HiveConf conf;
  static String defaultDB="default";
  static String tblName="testReplSA";
  static ArrayList<String> cols=new ArrayList<String>(Arrays.asList("col1","col2"));
  ParseDriver pd;
  SemanticAnalyzer sA;
  @BeforeClass public static void initialize() throws HiveException {
    queryState=new QueryState(new HiveConf(SemanticAnalyzer.class));
    conf=queryState.getConf();
    conf.set("hive.security.authorization.manager","");
    SessionState.start(conf);
    Hive hiveDb=Hive.get(conf);
    hiveDb.createTable(defaultDB + "." + tblName,cols,null,OrcInputFormat.class,OrcOutputFormat.class);
    Table t=hiveDb.getTable(tblName);
  }
  @AfterClass public static void teardown() throws HiveException {
  }
  @Test public void testReplDumpParse() throws Exception {
    ParseDriver pd=new ParseDriver();
    String fromEventId="100";
    String toEventId="200";
    String maxEventLimit="50";
    ASTNode root;
    ASTNode child;
    String query="repl dump " + defaultDB;
    root=(ASTNode)pd.parse(query).getChild(0);
    assertEquals(root.getText(),"TOK_REPL_DUMP");
    assertEquals(root.getChildCount(),1);
    child=(ASTNode)root.getChild(0);
    assertEquals(child.getText(),defaultDB);
    assertEquals(child.getChildCount(),0);
    query="repl dump " + defaultDB + "."+ tblName;
    root=(ASTNode)pd.parse(query).getChild(0);
    assertEquals(root.getChildCount(),2);
    child=(ASTNode)root.getChild(0);
    assertEquals(child.getText(),defaultDB);
    assertEquals(child.getChildCount(),0);
    child=(ASTNode)root.getChild(1);
    assertEquals(child.getText(),tblName);
    assertEquals(child.getChildCount(),0);
    query="repl dump " + defaultDB + "."+ tblName+ " from "+ fromEventId;
    root=(ASTNode)pd.parse(query).getChild(0);
    assertEquals(root.getChildCount(),3);
    child=(ASTNode)root.getChild(0);
    assertEquals(child.getText(),defaultDB);
    assertEquals(child.getChildCount(),0);
    child=(ASTNode)root.getChild(1);
    assertEquals(child.getText(),tblName);
    assertEquals(child.getChildCount(),0);
    root=(ASTNode)root.getChild(2);
    assertEquals(root.getText(),"TOK_FROM");
    assertEquals(root.getChildCount(),1);
    child=(ASTNode)root.getChild(0);
    assertEquals(child.getText(),fromEventId);
    assertEquals(child.getChildCount(),0);
    query="repl dump " + defaultDB + "."+ tblName+ " from "+ fromEventId+ " to "+ toEventId;
    root=(ASTNode)pd.parse(query).getChild(0);
    assertEquals(root.getChildCount(),3);
    child=(ASTNode)root.getChild(0);
    assertEquals(child.getText(),defaultDB);
    assertEquals(child.getChildCount(),0);
    child=(ASTNode)root.getChild(1);
    assertEquals(child.getText(),tblName);
    assertEquals(child.getChildCount(),0);
    root=(ASTNode)root.getChild(2);
    assertEquals(root.getText(),"TOK_FROM");
    assertEquals(root.getChildCount(),3);
    child=(ASTNode)root.getChild(0);
    assertEquals(child.getText(),fromEventId);
    assertEquals(child.getChildCount(),0);
    child=(ASTNode)root.getChild(1);
    assertEquals(child.getText(),"TOK_TO");
    assertEquals(child.getChildCount(),0);
    child=(ASTNode)root.getChild(2);
    assertEquals(child.getText(),toEventId);
    assertEquals(child.getChildCount(),0);
    query="repl dump " + defaultDB + "."+ tblName+ " from "+ fromEventId+ " to "+ toEventId+ " limit "+ maxEventLimit;
    root=(ASTNode)pd.parse(query).getChild(0);
    assertEquals(root.getChildCount(),3);
    child=(ASTNode)root.getChild(0);
    assertEquals(child.getText(),defaultDB);
    assertEquals(child.getChildCount(),0);
    child=(ASTNode)root.getChild(1);
    assertEquals(child.getText(),tblName);
    assertEquals(child.getChildCount(),0);
    root=(ASTNode)root.getChild(2);
    assertEquals(root.getText(),"TOK_FROM");
    assertEquals(root.getChildCount(),5);
    child=(ASTNode)root.getChild(0);
    assertEquals(child.getText(),fromEventId);
    assertEquals(child.getChildCount(),0);
    child=(ASTNode)root.getChild(1);
    assertEquals(child.getText(),"TOK_TO");
    assertEquals(child.getChildCount(),0);
    child=(ASTNode)root.getChild(2);
    assertEquals(child.getText(),toEventId);
    assertEquals(child.getChildCount(),0);
    child=(ASTNode)root.getChild(3);
    assertEquals(child.getText(),"TOK_LIMIT");
    assertEquals(child.getChildCount(),0);
    child=(ASTNode)root.getChild(4);
    assertEquals(child.getText(),maxEventLimit);
    assertEquals(child.getChildCount(),0);
  }
  @Test public void testReplLoadParse() throws Exception {
    ParseDriver pd=new ParseDriver();
    ASTNode root;
    ASTNode child;
    String replRoot=conf.getVar(HiveConf.ConfVars.REPLDIR);
    Path dumpRoot=new Path(replRoot,"next");
    System.out.println(replRoot);
    System.out.println(dumpRoot);
    String newDB="default_bak";
    String query="repl load  from '" + dumpRoot.toString() + "'";
    root=(ASTNode)pd.parse(query).getChild(0);
    assertEquals(root.getText(),"TOK_REPL_LOAD");
    assertEquals(root.getChildCount(),1);
    child=(ASTNode)root.getChild(0);
    assertEquals(child.getText(),"'" + dumpRoot.toString() + "'");
    assertEquals(child.getChildCount(),0);
    query="repl load " + newDB + " from '"+ dumpRoot.toString()+ "'";
    root=(ASTNode)pd.parse(query).getChild(0);
    assertEquals(root.getText(),"TOK_REPL_LOAD");
    assertEquals(root.getChildCount(),2);
    child=(ASTNode)root.getChild(0);
    assertEquals(child.getText(),"'" + dumpRoot.toString() + "'");
    assertEquals(child.getChildCount(),0);
    child=(ASTNode)root.getChild(1);
    assertEquals(child.getText(),newDB);
    assertEquals(child.getChildCount(),0);
  }
  public void testReplDumpAnalyze() throws Exception {
  }
  public void testReplLoadAnalyze() throws Exception {
    ParseDriver pd=new ParseDriver();
    ASTNode root;
    String replRoot=conf.getVar(HiveConf.ConfVars.REPLDIR);
    FileSystem fs=FileSystem.get(conf);
    Path dumpRoot=new Path(replRoot,"next");
    System.out.println(replRoot);
    System.out.println(dumpRoot);
    String newDB="default_bak";
    String query="repl dump " + defaultDB;
    root=(ASTNode)pd.parse(query).getChild(0);
    ReplicationSemanticAnalyzer rs=(ReplicationSemanticAnalyzer)SemanticAnalyzerFactory.get(queryState,root);
    rs.analyze(root,new Context(conf));
    query="repl load  from '" + dumpRoot.toString() + "'";
    root=(ASTNode)pd.parse(query).getChild(0);
    rs=(ReplicationSemanticAnalyzer)SemanticAnalyzerFactory.get(queryState,root);
    rs.analyze(root,new Context(conf));
    List<Task<? extends Serializable>> roots=rs.getRootTasks();
    assertEquals(1,roots.size());
    query="repl load " + newDB + " from '"+ dumpRoot.toString()+ "'";
    root=(ASTNode)pd.parse(query).getChild(0);
    rs=(ReplicationSemanticAnalyzer)SemanticAnalyzerFactory.get(queryState,root);
    rs.analyze(root,new Context(conf));
    roots=rs.getRootTasks();
    assertEquals(1,roots.size());
  }
  @Test public void testReplStatusAnalyze() throws Exception {
    ParseDriver pd=new ParseDriver();
    ASTNode root;
    String query="repl status " + defaultDB;
    root=(ASTNode)pd.parse(query).getChild(0);
    ReplicationSemanticAnalyzer rs=(ReplicationSemanticAnalyzer)SemanticAnalyzerFactory.get(queryState,root);
    rs.analyze(root,new Context(conf));
    FetchTask fetchTask=rs.getFetchTask();
    assertNotNull(fetchTask);
  }
}
