public class TestHiveMetaStoreGetMetaConf {
  @Rule public ExpectedException thrown=ExpectedException.none();
  private static final Logger LOG=LoggerFactory.getLogger(TestHiveMetaStoreGetMetaConf.class);
  private static HiveConf hiveConf;
  private static SecurityManager securityManager;
  private HiveMetaStoreClient hmsc;
public static class NoExitSecurityManager extends SecurityManager {
    @Override public void checkPermission(    Permission perm){
    }
    @Override public void checkPermission(    Permission perm,    Object context){
    }
    @Override public void checkExit(    int status){
      super.checkExit(status);
      throw new RuntimeException("System.exit() was called. Raising exception.");
    }
  }
  @AfterClass public static void tearDown() throws Exception {
    LOG.info("Shutting down metastore.");
    System.setSecurityManager(securityManager);
  }
  @BeforeClass public static void startMetaStoreServer() throws Exception {
    securityManager=System.getSecurityManager();
    System.setSecurityManager(new NoExitSecurityManager());
    HiveConf metastoreConf=new HiveConf();
    metastoreConf.setClass(HiveConf.ConfVars.METASTORE_EXPRESSION_PROXY_CLASS.varname,MockPartitionExpressionForMetastore.class,PartitionExpressionProxy.class);
    metastoreConf.setBoolVar(HiveConf.ConfVars.METASTORE_TRY_DIRECT_SQL_DDL,false);
    int msPort=MetaStoreUtils.startMetaStore(metastoreConf);
    hiveConf=new HiveConf(TestHiveMetaStoreGetMetaConf.class);
    hiveConf.setVar(HiveConf.ConfVars.METASTOREURIS,"thrift://localhost:" + msPort);
    hiveConf.setVar(HiveConf.ConfVars.PREEXECHOOKS,"");
    hiveConf.setVar(HiveConf.ConfVars.POSTEXECHOOKS,"");
    hiveConf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
    hiveConf.setIntVar(HiveConf.ConfVars.METASTORETHRIFTCONNECTIONRETRIES,10);
    System.setProperty(HiveConf.ConfVars.PREEXECHOOKS.varname," ");
    System.setProperty(HiveConf.ConfVars.POSTEXECHOOKS.varname," ");
  }
  @Before public void setup() throws MetaException {
    hmsc=new HiveMetaStoreClient(hiveConf);
  }
  @After public void closeClient(){
    if (hmsc != null) {
      hmsc.close();
    }
  }
  @Test public void testGetMetaConfDefault() throws MetaException, TException {
    HiveConf.ConfVars metaConfVar=HiveConf.ConfVars.METASTORE_TRY_DIRECT_SQL;
    String expected=metaConfVar.getDefaultValue();
    String actual=hmsc.getMetaConf(metaConfVar.toString());
    assertEquals(expected,actual);
  }
  @Test public void testGetMetaConfDefaultEmptyString() throws MetaException, TException {
    HiveConf.ConfVars metaConfVar=HiveConf.ConfVars.METASTORE_PARTITION_NAME_WHITELIST_PATTERN;
    String expected="";
    String actual=hmsc.getMetaConf(metaConfVar.toString());
    assertEquals(expected,actual);
  }
  @Test public void testGetMetaConfOverridden() throws MetaException, TException {
    HiveConf.ConfVars metaConfVar=HiveConf.ConfVars.METASTORE_TRY_DIRECT_SQL_DDL;
    String expected="false";
    String actual=hmsc.getMetaConf(metaConfVar.toString());
    assertEquals(expected,actual);
  }
  @Test public void testGetMetaConfUnknownPreperty() throws MetaException, TException {
    String unknownPropertyName="hive.meta.foo.bar";
    thrown.expect(MetaException.class);
    thrown.expectMessage("Invalid configuration key " + unknownPropertyName);
    hmsc.getMetaConf(unknownPropertyName);
  }
}
