@RunWith(MockitoJUnitRunner.class) public class TestChainFilter {
  private FilterFactory factory;
  private HiveConf conf;
  @Mock public Filter filter1;
  @Mock public Filter filter2;
  @Mock public Filter filter3;
  @Mock public FilterFactory factory1;
  @Mock public FilterFactory factory2;
  @Mock public FilterFactory factory3;
  @Mock private DirSearch search;
  @Before public void setup(){
    conf=new HiveConf();
    factory=new ChainFilterFactory(factory1,factory2,factory3);
  }
  @Test public void testFactoryAllNull(){
    assertNull(factory.getInstance(conf));
  }
  @Test public void testFactoryAllEmpty(){
    FilterFactory emptyFactory=new ChainFilterFactory();
    assertNull(emptyFactory.getInstance(conf));
  }
  @Test public void testFactory() throws AuthenticationException {
    when(factory1.getInstance(any(HiveConf.class))).thenReturn(filter1);
    when(factory2.getInstance(any(HiveConf.class))).thenReturn(filter2);
    when(factory3.getInstance(any(HiveConf.class))).thenReturn(filter3);
    Filter filter=factory.getInstance(conf);
    filter.apply(search,"User");
    verify(filter1,times(1)).apply(search,"User");
    verify(filter2,times(1)).apply(search,"User");
    verify(filter3,times(1)).apply(search,"User");
  }
  @Test(expected=AuthenticationException.class) public void testApplyNegative() throws AuthenticationException, NamingException, IOException {
    doThrow(AuthenticationException.class).when(filter3).apply((DirSearch)anyObject(),anyString());
    when(factory1.getInstance(any(HiveConf.class))).thenReturn(filter1);
    when(factory3.getInstance(any(HiveConf.class))).thenReturn(filter3);
    Filter filter=factory.getInstance(conf);
    filter.apply(search,"User");
  }
}
