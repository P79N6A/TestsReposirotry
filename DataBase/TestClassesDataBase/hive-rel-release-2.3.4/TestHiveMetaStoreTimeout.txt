/** 
 * Test long running request timeout functionality in MetaStore Server HiveMetaStore.HMSHandler.create_database() is used to simulate a long running method.
 */
public class TestHiveMetaStoreTimeout {
  protected static HiveMetaStoreClient client;
  protected static HiveConf hiveConf;
  protected static Warehouse warehouse;
  @BeforeClass public static void setUp() throws Exception {
    HiveMetaStore.TEST_TIMEOUT_ENABLED=true;
    hiveConf=new HiveConf(TestHiveMetaStoreTimeout.class);
    hiveConf.setBoolean(HiveConf.ConfVars.HIVE_WAREHOUSE_SUBDIR_INHERIT_PERMS.varname,true);
    hiveConf.set(HiveConf.ConfVars.METASTORE_EXPRESSION_PROXY_CLASS.varname,MockPartitionExpressionForMetastore.class.getCanonicalName());
    hiveConf.setTimeVar(HiveConf.ConfVars.METASTORE_CLIENT_SOCKET_TIMEOUT,10 * 1000,TimeUnit.MILLISECONDS);
    warehouse=new Warehouse(hiveConf);
    try {
      client=new HiveMetaStoreClient(hiveConf);
    }
 catch (    Throwable e) {
      System.err.println("Unable to open the metastore");
      System.err.println(StringUtils.stringifyException(e));
      throw e;
    }
  }
  @AfterClass public static void tearDown() throws Exception {
    HiveMetaStore.TEST_TIMEOUT_ENABLED=false;
    try {
      client.close();
    }
 catch (    Throwable e) {
      System.err.println("Unable to close metastore");
      System.err.println(StringUtils.stringifyException(e));
      throw e;
    }
  }
  @Test public void testNoTimeout() throws Exception {
    HiveMetaStore.TEST_TIMEOUT_VALUE=5 * 1000;
    String dbName="db";
    client.dropDatabase(dbName,true,true);
    Database db=new Database();
    db.setName(dbName);
    try {
      client.createDatabase(db);
    }
 catch (    MetaException e) {
      Assert.fail("should not throw timeout exception: " + e.getMessage());
    }
    client.dropDatabase(dbName,true,true);
  }
  @Test public void testTimeout() throws Exception {
    HiveMetaStore.TEST_TIMEOUT_VALUE=15 * 1000;
    String dbName="db";
    client.dropDatabase(dbName,true,true);
    Database db=new Database();
    db.setName(dbName);
    try {
      client.createDatabase(db);
      Assert.fail("should throw timeout exception.");
    }
 catch (    MetaException e) {
      Assert.assertTrue("unexpected MetaException",e.getMessage().contains("Timeout when " + "executing method: create_database"));
    }
    HiveMetaStore.TEST_TIMEOUT_VALUE=5 * 1000;
  }
  @Test public void testResetTimeout() throws Exception {
    HiveMetaStore.TEST_TIMEOUT_VALUE=5 * 1000;
    String dbName="db";
    client.dropDatabase(dbName,true,true);
    Database db=new Database();
    db.setName(dbName);
    try {
      client.createDatabase(db);
    }
 catch (    MetaException e) {
      Assert.fail("should not throw timeout exception: " + e.getMessage());
    }
    client.dropDatabase(dbName,true,true);
    client.setMetaConf(HiveConf.ConfVars.METASTORE_CLIENT_SOCKET_TIMEOUT.varname,"3s");
    try {
      client.createDatabase(db);
      Assert.fail("should throw timeout exception.");
    }
 catch (    MetaException e) {
      Assert.assertTrue("unexpected MetaException",e.getMessage().contains("Timeout when " + "executing method: create_database"));
    }
    client.dropDatabase(dbName,true,true);
    client.setMetaConf(HiveConf.ConfVars.METASTORE_CLIENT_SOCKET_TIMEOUT.varname,"10s");
  }
}
