public class TestAvroSerde {
  static final String originalSchemaString="{\n" + "    \"namespace\": \"org.apache.hadoop.hive\",\n" + "    \"name\": \"previous\",\n"+ "    \"type\": \"record\",\n"+ "    \"fields\": [\n"+ "        {\n"+ "            \"name\":\"text\",\n"+ "            \"type\":\"string\"\n"+ "        }\n"+ "    ]\n"+ "}";
  static final String newSchemaString="{\n" + "    \"namespace\": \"org.apache.hadoop.hive\",\n" + "    \"name\": \"new\",\n"+ "    \"type\": \"record\",\n"+ "    \"fields\": [\n"+ "        {\n"+ "            \"name\":\"text\",\n"+ "            \"type\":\"string\"\n"+ "        }\n"+ "    ]\n"+ "}";
  static final Schema originalSchema=AvroSerdeUtils.getSchemaFor(originalSchemaString);
  static final Schema newSchema=AvroSerdeUtils.getSchemaFor(newSchemaString);
  @Test public void initializeDoesNotReuseSchemasFromConf() throws SerDeException {
    Configuration conf=new Configuration();
    conf.set(AvroTableProperties.AVRO_SERDE_SCHEMA.getPropName(),originalSchema.toString(false));
    Properties props=new Properties();
    props.put(AvroTableProperties.SCHEMA_LITERAL.getPropName(),newSchemaString);
    AvroSerDe asd=new AvroSerDe();
    SerDeUtils.initializeSerDe(asd,conf,props,null);
    assertEquals(newSchema,AvroSerdeUtils.getSchemaFor(conf.get(AvroTableProperties.AVRO_SERDE_SCHEMA.getPropName())));
  }
  @Test public void noSchemaProvidedThrowsException(){
    Properties props=new Properties();
    verifyExpectedException(props);
  }
  @Test public void gibberishSchemaProvidedReturnsErrorSchema(){
    Properties props=new Properties();
    props.put(AvroTableProperties.SCHEMA_LITERAL.getPropName(),"blahblahblah");
    verifyExpectedException(props);
  }
  @Test public void emptySchemaProvidedThrowsException(){
    Properties props=new Properties();
    props.put(AvroTableProperties.SCHEMA_LITERAL.getPropName(),"");
    verifyExpectedException(props);
  }
  @Test public void badSchemaURLProvidedThrowsException(){
    Properties props=new Properties();
    props.put(AvroTableProperties.SCHEMA_URL.getPropName(),"not://a/url");
    verifyExpectedException(props);
  }
  @Test public void emptySchemaURLProvidedThrowsException(){
    Properties props=new Properties();
    props.put(AvroTableProperties.SCHEMA_URL.getPropName(),"");
    verifyExpectedException(props);
  }
  @Test public void bothPropertiesSetToNoneThrowsException(){
    Properties props=new Properties();
    props.put(AvroTableProperties.SCHEMA_URL.getPropName(),AvroSerdeUtils.SCHEMA_NONE);
    props.put(AvroTableProperties.SCHEMA_LITERAL.getPropName(),AvroSerdeUtils.SCHEMA_NONE);
    verifyExpectedException(props);
  }
  private void verifyExpectedException(  Properties props){
    AvroSerDe asd=new AvroSerDe();
    try {
      SerDeUtils.initializeSerDe(asd,new Configuration(),props,null);
      fail("Expected Exception did not be thrown");
    }
 catch (    SerDeException e) {
    }
  }
  @Test public void getSerializedClassReturnsCorrectType(){
    AvroSerDe asd=new AvroSerDe();
    assertEquals(AvroGenericRecordWritable.class,asd.getSerializedClass());
  }
}
