/** 
 * Unit test for the vectorized LIMIT operator.
 */
public class TestVectorLimitOperator {
  @Test public void testLimitLessThanBatchSize() throws HiveException {
    validateVectorLimitOperator(2,5,2);
  }
  @Test public void testLimitGreaterThanBatchSize() throws HiveException {
    validateVectorLimitOperator(100,3,3);
  }
  @Test public void testLimitWithZeroBatchSize() throws HiveException {
    validateVectorLimitOperator(5,0,0);
  }
  private void validateVectorLimitOperator(  int limit,  int batchSize,  int expectedBatchSize) throws HiveException {
    @SuppressWarnings("unchecked") FakeVectorRowBatchFromObjectIterables frboi=new FakeVectorRowBatchFromObjectIterables(batchSize,new String[]{"tinyint","double"},Arrays.asList(new Object[]{1,2,3,4}),Arrays.asList(new Object[]{323.0,34.5,null,89.3}));
    VectorizedRowBatch vrb=frboi.produceNextBatch();
    LimitDesc ld=new LimitDesc(limit);
    VectorLimitOperator lo=new VectorLimitOperator(new CompilationOpContext(),null,ld);
    lo.initialize(new Configuration(),null);
    lo.process(vrb,0);
    Assert.assertEquals(vrb.size,expectedBatchSize);
  }
}
