@RunWith(MockitoJUnitRunner.class) public class TestHeartbeatTimerTask {
  private static final long TRANSACTION_ID=10L;
  private static final long LOCK_ID=1L;
  private static final List<Table> TABLES=createTable();
  @Mock private IMetaStoreClient mockMetaStoreClient;
  @Mock private LockFailureListener mockListener;
  private HeartbeatTimerTask task;
  @Before public void create() throws Exception {
    task=new HeartbeatTimerTask(mockMetaStoreClient,mockListener,TRANSACTION_ID,TABLES,LOCK_ID);
  }
  @Test public void testRun() throws Exception {
    task.run();
    verify(mockMetaStoreClient).heartbeat(TRANSACTION_ID,LOCK_ID);
  }
  @Test public void testRunNullTransactionId() throws Exception {
    task=new HeartbeatTimerTask(mockMetaStoreClient,mockListener,null,TABLES,LOCK_ID);
    task.run();
    verify(mockMetaStoreClient).heartbeat(0,LOCK_ID);
  }
  @Test public void testRunHeartbeatFailsNoSuchLockException() throws Exception {
    NoSuchLockException exception=new NoSuchLockException();
    doThrow(exception).when(mockMetaStoreClient).heartbeat(TRANSACTION_ID,LOCK_ID);
    task.run();
    verify(mockListener).lockFailed(LOCK_ID,TRANSACTION_ID,Arrays.asList("DB.TABLE"),exception);
  }
  @Test public void testRunHeartbeatFailsNoSuchTxnException() throws Exception {
    NoSuchTxnException exception=new NoSuchTxnException();
    doThrow(exception).when(mockMetaStoreClient).heartbeat(TRANSACTION_ID,LOCK_ID);
    task.run();
    verify(mockListener).lockFailed(LOCK_ID,TRANSACTION_ID,Arrays.asList("DB.TABLE"),exception);
  }
  @Test public void testRunHeartbeatFailsTxnAbortedException() throws Exception {
    TxnAbortedException exception=new TxnAbortedException();
    doThrow(exception).when(mockMetaStoreClient).heartbeat(TRANSACTION_ID,LOCK_ID);
    task.run();
    verify(mockListener).lockFailed(LOCK_ID,TRANSACTION_ID,Arrays.asList("DB.TABLE"),exception);
  }
  @Test public void testRunHeartbeatFailsTException() throws Exception {
    TException exception=new TException();
    doThrow(exception).when(mockMetaStoreClient).heartbeat(TRANSACTION_ID,LOCK_ID);
    task.run();
  }
  private static List<Table> createTable(){
    Table table=new Table();
    table.setDbName("DB");
    table.setTableName("TABLE");
    return Arrays.asList(table);
  }
}
