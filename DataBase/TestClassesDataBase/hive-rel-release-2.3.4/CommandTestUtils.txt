/** 
 * Class which provides several useful methods to test commands, but is itself not a test.
 */
public class CommandTestUtils {
  private static Logger LOG=LoggerFactory.getLogger(CommandTestUtils.class.getName());
  public static void compareCommands(  Command expected,  Command actual,  boolean ignoreSortOrder){
    assertEquals(expected.getClass(),actual.getClass());
    assertEquals(expected.getEventId(),actual.getEventId());
    assertEquals(expected.isUndoable(),actual.isUndoable());
    assertEquals(expected.isRetriable(),actual.isRetriable());
    assertEquals(expected.get().size(),actual.get().size());
    Iterator<String> actualIter=actual.get().iterator();
    for (    String s : expected.get()) {
      if (ignoreSortOrder) {
        assertSortedEquals(s,actualIter.next());
      }
 else {
        assertEquals(s,actualIter.next());
      }
    }
    if (expected.isUndoable()) {
      Iterator<String> actualUndoIter=actual.getUndo().iterator();
      for (      String s : expected.getUndo()) {
        if (ignoreSortOrder) {
          assertSortedEquals(s,actualUndoIter.next());
        }
 else {
          assertEquals(s,actualIter.next());
        }
      }
    }
  }
  private static void assertSortedEquals(  String expected,  String actual){
    char[] expectedChars=expected.toCharArray();
    Arrays.sort(expectedChars);
    char[] actualChars=actual.toCharArray();
    Arrays.sort(actualChars);
    assertEquals(String.valueOf(expectedChars),String.valueOf(actualChars));
  }
  public static void testCommandSerialization(  Command cmd){
    String serializedCmd=null;
    try {
      serializedCmd=ReplicationUtils.serializeCommand(cmd);
    }
 catch (    IOException e) {
      LOG.error("Serialization error",e);
      assertNull(e);
    }
    Command cmd2=null;
    try {
      cmd2=ReplicationUtils.deserializeCommand(serializedCmd);
    }
 catch (    IOException e) {
      LOG.error("Serialization error",e);
      assertNull(e);
    }
    assertEquals(cmd.getClass(),cmd2.getClass());
    assertEquals(cmd.getEventId(),cmd2.getEventId());
    assertEquals(cmd.get(),cmd2.get());
    assertEquals(cmd.isUndoable(),cmd2.isUndoable());
    if (cmd.isUndoable()) {
      assertEquals(cmd.getUndo(),cmd2.getUndo());
    }
    assertEquals(cmd.isRetriable(),cmd2.isRetriable());
  }
}
