@RunWith(Parameterized.class) public class TestHiveInputSplitComparator {
  @Parameter(0) public HiveInputSplit split1;
  @Parameter(1) public HiveInputSplit split2;
  @Parameter(2) public Integer expected;
  @Parameters(name="{index}: {0}<=>{1} ") public static Iterable<Object[]> data(){
    return Arrays.asList(new Object[][]{{createMockSplit("A",0,100),createMockSplit("A",1000,100),-1},{createMockSplit("A",1000,100),createMockSplit("A",100,100),1},{createMockSplit("A",0,100),createMockSplit("A",0,100),0},{createMockSplit("A",0,100),createMockSplit("B",0,100),-1},{createMockSplit("A",100,100),createMockSplit("B",0,100),-1},{createMockSplit("A",100,100),createMockSplit("B",0,100),-1}});
  }
  @Test public void testCompare(){
    HiveInputSplitComparator cmp=new HiveInputSplitComparator();
    int actual=cmp.compare(split1,split2);
    assertCompareResult(expected,actual);
  }
  private void assertCompareResult(  int expected,  int actual){
    assertEquals(expected,(int)Math.signum(actual));
  }
}
