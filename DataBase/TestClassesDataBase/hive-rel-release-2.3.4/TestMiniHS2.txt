public class TestMiniHS2 {
  private MiniHS2 miniHS2;
  @BeforeClass public static void beforeTest() throws Exception {
    Class.forName(MiniHS2.getJdbcDriverName());
  }
  @After public void tearDown() throws Exception {
    miniHS2.stop();
  }
  /** 
 * Test if the MiniHS2 configuration gets passed down to the session configuration
 * @throws Exception
 */
  @Test public void testConfInSession() throws Exception {
    HiveConf hiveConf=new HiveConf();
    final String DUMMY_CONF_KEY="hive.test.minihs2.dummy.config";
    final String DUMMY_CONF_VAL="dummy.val";
    hiveConf.set(DUMMY_CONF_KEY,DUMMY_CONF_VAL);
    final String ZK_TIMEOUT_KEY=ConfVars.HIVE_ZOOKEEPER_SESSION_TIMEOUT.varname;
    final String ZK_TIMEOUT="2562";
    hiveConf.set(ZK_TIMEOUT_KEY,ZK_TIMEOUT);
    hiveConf.setBoolVar(ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
    miniHS2=new MiniHS2(hiveConf);
    miniHS2.start(new HashMap<String,String>());
    Connection hs2Conn=DriverManager.getConnection(miniHS2.getJdbcURL(),System.getProperty("user.name"),"bar");
    Statement stmt=hs2Conn.createStatement();
    checkConfVal(DUMMY_CONF_KEY,DUMMY_CONF_KEY + "=" + DUMMY_CONF_VAL,stmt);
    checkConfVal(ZK_TIMEOUT_KEY,ZK_TIMEOUT_KEY + "=" + ZK_TIMEOUT,stmt);
    checkConfVal(ConfVars.HIVE_SUPPORT_CONCURRENCY.varname,ConfVars.HIVE_SUPPORT_CONCURRENCY.varname + "=" + "false",stmt);
    stmt.close();
    hs2Conn.close();
  }
  private void checkConfVal(  String confKey,  String confResult,  Statement stmt) throws SQLException {
    ResultSet res=stmt.executeQuery("set " + confKey);
    assertTrue(res.next());
    assertEquals("Expected config result",confResult,res.getString(1));
    res.close();
  }
}
