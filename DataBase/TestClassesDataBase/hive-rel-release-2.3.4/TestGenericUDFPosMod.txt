public class TestGenericUDFPosMod extends AbstractTestGenericUDFOPNumeric {
  @Test public void testPosModByZero1() throws HiveException {
    GenericUDFPosMod udf=new GenericUDFPosMod();
    ByteWritable b1=new ByteWritable((byte)4);
    ByteWritable b2=new ByteWritable((byte)0);
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableByteObjectInspector,PrimitiveObjectInspectorFactory.writableByteObjectInspector};
    DeferredObject[] args={new DeferredJavaObject(b1),new DeferredJavaObject(b2)};
    udf.initialize(inputOIs);
    ByteWritable b3=(ByteWritable)udf.evaluate(args);
    Assert.assertNull(b3);
  }
  @Test public void testPosModByZero2() throws HiveException {
    GenericUDFPosMod udf=new GenericUDFPosMod();
    ShortWritable s1=new ShortWritable((short)4);
    ShortWritable s2=new ShortWritable((short)0);
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableShortObjectInspector,PrimitiveObjectInspectorFactory.writableShortObjectInspector};
    DeferredObject[] args={new DeferredJavaObject(s1),new DeferredJavaObject(s2)};
    udf.initialize(inputOIs);
    ShortWritable s3=(ShortWritable)udf.evaluate(args);
    Assert.assertNull(s3);
  }
  @Test public void testPosModByZero3() throws HiveException {
    GenericUDFPosMod udf=new GenericUDFPosMod();
    IntWritable i1=new IntWritable(4);
    IntWritable i2=new IntWritable(0);
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableIntObjectInspector,PrimitiveObjectInspectorFactory.writableIntObjectInspector};
    DeferredObject[] args={new DeferredJavaObject(i1),new DeferredJavaObject(i2)};
    udf.initialize(inputOIs);
    IntWritable i3=(IntWritable)udf.evaluate(args);
    Assert.assertNull(i3);
  }
  @Test public void testPosModByZero4() throws HiveException {
    GenericUDFPosMod udf=new GenericUDFPosMod();
    LongWritable l1=new LongWritable(4);
    LongWritable l2=new LongWritable(0L);
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableLongObjectInspector,PrimitiveObjectInspectorFactory.writableLongObjectInspector};
    DeferredObject[] args={new DeferredJavaObject(l1),new DeferredJavaObject(l2)};
    udf.initialize(inputOIs);
    LongWritable l3=(LongWritable)udf.evaluate(args);
    Assert.assertNull(l3);
  }
  @Test public void testPosModByZero5() throws HiveException {
    GenericUDFPosMod udf=new GenericUDFPosMod();
    FloatWritable f1=new FloatWritable(4.5f);
    FloatWritable f2=new FloatWritable(0.0f);
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableFloatObjectInspector,PrimitiveObjectInspectorFactory.writableFloatObjectInspector};
    DeferredObject[] args={new DeferredJavaObject(f1),new DeferredJavaObject(f2)};
    udf.initialize(inputOIs);
    FloatWritable f3=(FloatWritable)udf.evaluate(args);
    Assert.assertNull(f3);
  }
  @Test public void testPosModByZero6() throws HiveException {
    GenericUDFPosMod udf=new GenericUDFPosMod();
    DoubleWritable d1=new DoubleWritable(4.5);
    DoubleWritable d2=new DoubleWritable(0.0);
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.writableDoubleObjectInspector,PrimitiveObjectInspectorFactory.writableDoubleObjectInspector};
    DeferredObject[] args={new DeferredJavaObject(d1),new DeferredJavaObject(d2)};
    udf.initialize(inputOIs);
    DoubleWritable d3=(DoubleWritable)udf.evaluate(args);
    Assert.assertNull(d3);
  }
  @Test public void testPosModByZero8() throws HiveException {
    GenericUDFPosMod udf=new GenericUDFPosMod();
    HiveDecimalWritable dec1=new HiveDecimalWritable(HiveDecimal.create("4.5"));
    HiveDecimalWritable dec2=new HiveDecimalWritable(HiveDecimal.create("0"));
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getDecimalTypeInfo(2,1)),PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getDecimalTypeInfo(1,0))};
    DeferredObject[] args={new DeferredJavaObject(dec1),new DeferredJavaObject(dec2)};
    udf.initialize(inputOIs);
    HiveDecimalWritable dec3=(HiveDecimalWritable)udf.evaluate(args);
    Assert.assertNull(dec3);
  }
  @Test public void testDecimalPosModDecimal() throws HiveException {
    GenericUDFPosMod udf=new GenericUDFPosMod();
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getDecimalTypeInfo(3,1)),PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getDecimalTypeInfo(5,2))};
    PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
    Assert.assertEquals(TypeInfoFactory.getDecimalTypeInfo(5,2),oi.getTypeInfo());
  }
  @Test public void testDecimalPosModDecimalSameParams() throws HiveException {
    GenericUDFPosMod udf=new GenericUDFPosMod();
    ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getDecimalTypeInfo(5,2)),PrimitiveObjectInspectorFactory.getPrimitiveWritableObjectInspector(TypeInfoFactory.getDecimalTypeInfo(5,2))};
    PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
    Assert.assertEquals(TypeInfoFactory.getDecimalTypeInfo(5,2),oi.getTypeInfo());
  }
}
