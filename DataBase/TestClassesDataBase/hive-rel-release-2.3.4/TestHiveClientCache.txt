public class TestHiveClientCache {
  private static final Logger LOG=LoggerFactory.getLogger(TestHiveClientCache.class);
  final HiveConf hiveConf=new HiveConf();
  @BeforeClass public static void setUp() throws Exception {
  }
  @AfterClass public static void tearDown() throws Exception {
  }
  @Test public void testCacheHit() throws IOException, MetaException, LoginException {
    HiveClientCache cache=new HiveClientCache(1000);
    HiveClientCache.ICacheableMetaStoreClient client=(HiveClientCache.ICacheableMetaStoreClient)cache.get(hiveConf);
    assertNotNull(client);
    client.close();
    hiveConf.setIntVar(HiveConf.ConfVars.DYNAMICPARTITIONMAXPARTS,10);
    HiveClientCache.ICacheableMetaStoreClient client2=(HiveClientCache.ICacheableMetaStoreClient)cache.get(hiveConf);
    assertNotNull(client2);
    assertSame(client,client2);
    assertEquals(client.getUsers(),client2.getUsers());
    client2.close();
  }
  @Test public void testCacheMiss() throws IOException, MetaException, LoginException {
    HiveClientCache cache=new HiveClientCache(1000);
    IMetaStoreClient client=cache.get(hiveConf);
    assertNotNull(client);
    hiveConf.setVar(HiveConf.ConfVars.METASTOREURIS," ");
    IMetaStoreClient client2=cache.get(hiveConf);
    assertNotNull(client2);
    assertNotSame(client,client2);
  }
  /** 
 * Check that a new client is returned for the same configuration after the expiry time. Also verify that the expiry time configuration is honoured
 */
  @Test public void testCacheExpiry() throws IOException, MetaException, LoginException, InterruptedException {
    HiveClientCache cache=new HiveClientCache(1);
    HiveClientCache.ICacheableMetaStoreClient client=(HiveClientCache.ICacheableMetaStoreClient)cache.get(hiveConf);
    assertNotNull(client);
    Thread.sleep(2500);
    HiveClientCache.ICacheableMetaStoreClient client2=(HiveClientCache.ICacheableMetaStoreClient)cache.get(hiveConf);
    client.close();
    assertTrue(client.isClosed());
    assertNotNull(client2);
    assertNotSame(client,client2);
  }
  /** 
 * Check that a *new* client is created if asked from different threads even with the same hive configuration
 * @throws ExecutionException
 * @throws InterruptedException
 */
  @Test public void testMultipleThreadAccess() throws ExecutionException, InterruptedException {
    final HiveClientCache cache=new HiveClientCache(1000);
class GetHiveClient implements Callable<IMetaStoreClient> {
      @Override public IMetaStoreClient call() throws IOException, MetaException, LoginException {
        return cache.get(hiveConf);
      }
    }
    ExecutorService executor=Executors.newFixedThreadPool(2);
    Callable<IMetaStoreClient> worker1=new GetHiveClient();
    Callable<IMetaStoreClient> worker2=new GetHiveClient();
    Future<IMetaStoreClient> clientFuture1=executor.submit(worker1);
    Future<IMetaStoreClient> clientFuture2=executor.submit(worker2);
    IMetaStoreClient client1=clientFuture1.get();
    IMetaStoreClient client2=clientFuture2.get();
    assertNotNull(client1);
    assertNotNull(client2);
    assertNotSame(client1,client2);
  }
  @Test public void testCloseAllClients() throws IOException, MetaException, LoginException {
    final HiveClientCache cache=new HiveClientCache(1000);
    HiveClientCache.ICacheableMetaStoreClient client1=(HiveClientCache.ICacheableMetaStoreClient)cache.get(hiveConf);
    hiveConf.setVar(HiveConf.ConfVars.METASTOREURIS," ");
    HiveClientCache.ICacheableMetaStoreClient client2=(HiveClientCache.ICacheableMetaStoreClient)cache.get(hiveConf);
    cache.closeAllClientsQuietly();
    assertTrue(client1.isClosed());
    assertTrue(client2.isClosed());
  }
  /** 
 * Test that a long table name actually breaks the HMSC. Subsequently check that isOpen() reflects and tells if the client is broken
 */
  @Ignore("hangs indefinitely") @Test public void testHMSCBreakability() throws IOException, MetaException, LoginException, TException, AlreadyExistsException, InvalidObjectException, NoSuchObjectException, InterruptedException {
    LocalMetaServer metaServer=new LocalMetaServer();
    metaServer.start();
    final HiveClientCache cache=new HiveClientCache(1000);
    HiveClientCache.CacheableHiveMetaStoreClient client=(HiveClientCache.CacheableHiveMetaStoreClient)cache.get(metaServer.getHiveConf());
    assertTrue(client.isOpen());
    final String DB_NAME="test_db";
    final String LONG_TABLE_NAME="long_table_name_" + new BigInteger(200,new Random()).toString(2);
    try {
      client.dropTable(DB_NAME,LONG_TABLE_NAME);
    }
 catch (    Exception e) {
    }
    try {
      client.dropDatabase(DB_NAME);
    }
 catch (    Exception e) {
    }
    client.createDatabase(new Database(DB_NAME,"",null,null));
    List<FieldSchema> fields=new ArrayList<FieldSchema>();
    fields.add(new FieldSchema("colname",serdeConstants.STRING_TYPE_NAME,""));
    Table tbl=new Table();
    tbl.setDbName(DB_NAME);
    tbl.setTableName(LONG_TABLE_NAME);
    StorageDescriptor sd=new StorageDescriptor();
    sd.setCols(fields);
    tbl.setSd(sd);
    sd.setSerdeInfo(new SerDeInfo());
    try {
      client.createTable(tbl);
      fail("Exception was expected while creating table with long name");
    }
 catch (    Exception e) {
    }
    assertFalse(client.isOpen());
    metaServer.shutDown();
  }
private static class LocalMetaServer implements Runnable {
    public final int MS_PORT=20101;
    private final HiveConf hiveConf;
    private final SecurityManager securityManager;
    public final static int WAIT_TIME_FOR_BOOTUP=30000;
    public LocalMetaServer(){
      securityManager=System.getSecurityManager();
      System.setSecurityManager(new NoExitSecurityManager());
      hiveConf=new HiveConf(TestHiveClientCache.class);
      hiveConf.setVar(HiveConf.ConfVars.METASTOREURIS,"thrift://localhost:" + MS_PORT);
      hiveConf.setIntVar(HiveConf.ConfVars.METASTORETHRIFTCONNECTIONRETRIES,3);
      hiveConf.setIntVar(HiveConf.ConfVars.METASTORETHRIFTFAILURERETRIES,3);
      hiveConf.set(HiveConf.ConfVars.SEMANTIC_ANALYZER_HOOK.varname,HCatSemanticAnalyzer.class.getName());
      hiveConf.set(HiveConf.ConfVars.PREEXECHOOKS.varname,"");
      hiveConf.set(HiveConf.ConfVars.POSTEXECHOOKS.varname,"");
      hiveConf.set(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY.varname,"false");
      System.setProperty(HiveConf.ConfVars.PREEXECHOOKS.varname," ");
      System.setProperty(HiveConf.ConfVars.POSTEXECHOOKS.varname," ");
    }
    public void start() throws InterruptedException {
      Thread thread=new Thread(this);
      thread.start();
      Thread.sleep(WAIT_TIME_FOR_BOOTUP);
    }
    @Override public void run(){
      try {
        HiveMetaStore.main(new String[]{"-v","-p",String.valueOf(MS_PORT)});
      }
 catch (      Throwable t) {
        LOG.error("Exiting. Got exception from metastore: ",t);
      }
    }
    public HiveConf getHiveConf(){
      return hiveConf;
    }
    public void shutDown(){
      System.setSecurityManager(securityManager);
    }
  }
}
