public class TestGenericUDFExtractUnionObjectInspectorConverter {
  private final ObjectInspector unionObjectInspector=ObjectInspectorFactory.getStandardUnionObjectInspector(Arrays.<ObjectInspector>asList(PrimitiveObjectInspectorFactory.javaStringObjectInspector,PrimitiveObjectInspectorFactory.javaIntObjectInspector));
  private final ObjectInspector structObjectInspector=ObjectInspectorFactory.getStandardStructObjectInspector(Arrays.asList("tag_0","tag_1"),Arrays.<ObjectInspector>asList(PrimitiveObjectInspectorFactory.javaStringObjectInspector,PrimitiveObjectInspectorFactory.javaIntObjectInspector));
  private final ObjectInspectorConverter underTest=new ObjectInspectorConverter();
  @Test(expected=IllegalArgumentException.class) public void convertValue_NoUnionFound(){
    ObjectInspector inspector=PrimitiveObjectInspectorFactory.javaStringObjectInspector;
    underTest.convert(inspector);
  }
  @Test public void convertList(){
    ObjectInspector inspector=ObjectInspectorFactory.getStandardListObjectInspector(unionObjectInspector);
    ObjectInspector result=underTest.convert(inspector);
    assertThat(result.getTypeName(),is(ObjectInspectorFactory.getStandardListObjectInspector(structObjectInspector).getTypeName()));
  }
  @Test public void convertMap(){
    ObjectInspector inspector=ObjectInspectorFactory.getStandardMapObjectInspector(PrimitiveObjectInspectorFactory.javaStringObjectInspector,unionObjectInspector);
    ObjectInspector result=underTest.convert(inspector);
    assertThat(result.getTypeName(),is(ObjectInspectorFactory.getStandardMapObjectInspector(PrimitiveObjectInspectorFactory.javaStringObjectInspector,structObjectInspector).getTypeName()));
  }
  @Test public void convertStruct(){
    List<String> names=Arrays.asList("foo");
    ObjectInspector inspector=ObjectInspectorFactory.getStandardStructObjectInspector(names,Arrays.<ObjectInspector>asList(unionObjectInspector));
    ObjectInspector result=underTest.convert(inspector);
    assertThat(result.getTypeName(),is(ObjectInspectorFactory.getStandardStructObjectInspector(names,Arrays.<ObjectInspector>asList(structObjectInspector)).getTypeName()));
  }
  @Test public void convertUnion(){
    ObjectInspector result=underTest.convert(unionObjectInspector);
    assertThat(result,is(structObjectInspector));
    assertThat(result.getTypeName(),is(structObjectInspector.getTypeName()));
  }
  @Test(expected=IllegalArgumentException.class) public void noChildUnions(){
    underTest.convert(PrimitiveObjectInspectorFactory.javaStringObjectInspector);
  }
}
