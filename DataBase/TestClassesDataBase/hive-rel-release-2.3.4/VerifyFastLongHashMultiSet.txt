public static class VerifyFastLongHashMultiSet {
  private int count;
  private FastLongHashMultiSetElement[] array;
  private HashMap<Long,Integer> keyValueMap;
  public VerifyFastLongHashMultiSet(){
    count=0;
    array=new FastLongHashMultiSetElement[50];
    keyValueMap=new HashMap<Long,Integer>();
  }
  public int getCount(){
    return count;
  }
  public boolean contains(  long key){
    return keyValueMap.containsKey(key);
  }
  public void add(  long key){
    if (keyValueMap.containsKey(key)) {
      int index=keyValueMap.get(key);
      array[index].incrementMultiSetCount();
    }
 else {
      if (count >= array.length) {
        FastLongHashMultiSetElement[] newArray=new FastLongHashMultiSetElement[array.length * 2];
        System.arraycopy(array,0,newArray,0,count);
        array=newArray;
      }
      array[count]=new FastLongHashMultiSetElement(key);
      keyValueMap.put(key,count);
      count++;
    }
  }
  public long addRandomExisting(  byte[] value,  Random r){
    Preconditions.checkState(count > 0);
    int index=r.nextInt(count);
    array[index].incrementMultiSetCount();
    return array[index].getKey();
  }
  public long getKey(  int index){
    return array[index].getKey();
  }
  public int getMultiSetCount(  int index){
    return array[index].getMultiSetCount();
  }
  public void verify(  VectorMapJoinFastLongHashMultiSet map){
    int mapSize=map.size();
    if (mapSize != count) {
      TestCase.fail("map.size() does not match expected count");
    }
    for (int index=0; index < count; index++) {
      FastLongHashMultiSetElement element=array[index];
      long key=element.getKey();
      int multiSetCount=element.getMultiSetCount();
      VectorMapJoinHashMultiSetResult hashMultiSetResult=map.createHashMultiSetResult();
      JoinUtil.JoinResult joinResult=map.contains(key,hashMultiSetResult);
      if (joinResult != JoinUtil.JoinResult.MATCH) {
        assertTrue(false);
      }
      assertEquals(hashMultiSetResult.count(),multiSetCount);
    }
  }
}
