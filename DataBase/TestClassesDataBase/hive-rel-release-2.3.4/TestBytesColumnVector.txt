public class TestBytesColumnVector {
  @Test public void testSmallBufferReuse(){
    BytesColumnVector col=new BytesColumnVector();
    int smallWriteSize=1024;
    int largeWriteSize=1024 * 1024 * 2;
    int rowIdx=0;
    int bytesWrittenToBytes1=0;
    col.reset();
    byte[] bytes1=writeToBytesColumnVector(rowIdx,col,smallWriteSize,(byte)1);
    bytesWrittenToBytes1+=smallWriteSize;
    rowIdx++;
    byte[] bytes2=writeToBytesColumnVector(rowIdx,col,largeWriteSize,(byte)2);
    assertFalse(bytes1 == bytes2);
    rowIdx++;
    byte[] bytes3=writeToBytesColumnVector(rowIdx,col,smallWriteSize,(byte)1);
    bytesWrittenToBytes1+=smallWriteSize;
    assertTrue(bytes1 == bytes3);
    rowIdx++;
    byte[] bytes4=writeToBytesColumnVector(rowIdx,col,largeWriteSize,(byte)3);
    assertFalse(bytes1 == bytes4);
    assertFalse(bytes2 == bytes4);
    boolean gotNewBuffer=false;
    for (int i=0; i < 1024; ++i) {
      rowIdx++;
      byte[] currBytes=writeToBytesColumnVector(rowIdx,col,smallWriteSize,(byte)1);
      if (currBytes == bytes1) {
        bytesWrittenToBytes1+=smallWriteSize;
      }
 else {
        gotNewBuffer=true;
        break;
      }
    }
    assertTrue(gotNewBuffer);
    for (int i=0; i < bytesWrittenToBytes1; ++i) {
      assertEquals((byte)1,bytes1[i]);
    }
  }
  private static byte[] writeToBytesColumnVector(  int rowIdx,  BytesColumnVector col,  int writeSize,  byte val){
    col.ensureValPreallocated(writeSize);
    byte[] bytes=col.getValPreallocatedBytes();
    int startIdx=col.getValPreallocatedStart();
    Arrays.fill(bytes,startIdx,startIdx + writeSize,val);
    col.setValPreallocated(rowIdx,writeSize);
    return bytes;
  }
}
