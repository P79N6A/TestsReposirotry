@RunWith(MockitoJUnitRunner.class) public class TestJobHandle {
  @Mock private SparkClientImpl client;
  @Mock private Promise<Serializable> promise;
  @Mock private JobHandle.Listener<Serializable> listener;
  @Mock private JobHandle.Listener<Serializable> listener2;
  @Test public void testStateChanges() throws Exception {
    JobHandleImpl<Serializable> handle=new JobHandleImpl<Serializable>(client,promise,"job",Lists.newArrayList(listener));
    assertTrue(handle.changeState(JobHandle.State.QUEUED));
    verify(listener).onJobQueued(handle);
    assertTrue(handle.changeState(JobHandle.State.STARTED));
    verify(listener).onJobStarted(handle);
    handle.addSparkJobId(1);
    verify(listener).onSparkJobStarted(same(handle),eq(1));
    assertTrue(handle.changeState(JobHandle.State.CANCELLED));
    verify(listener).onJobCancelled(handle);
    assertFalse(handle.changeState(JobHandle.State.STARTED));
    assertFalse(handle.changeState(JobHandle.State.FAILED));
    assertFalse(handle.changeState(JobHandle.State.SUCCEEDED));
  }
  @Test public void testFailedJob() throws Exception {
    JobHandleImpl<Serializable> handle=new JobHandleImpl<Serializable>(client,promise,"job",Lists.newArrayList(listener));
    Throwable cause=new Exception();
    when(promise.cause()).thenReturn(cause);
    assertTrue(handle.changeState(JobHandle.State.FAILED));
    verify(promise).cause();
    verify(listener).onJobFailed(handle,cause);
  }
  @Test public void testSucceededJob() throws Exception {
    JobHandleImpl<Serializable> handle=new JobHandleImpl<Serializable>(client,promise,"job",Lists.newArrayList(listener));
    Serializable result=new Exception();
    when(promise.get()).thenReturn(result);
    assertTrue(handle.changeState(JobHandle.State.SUCCEEDED));
    verify(promise).get();
    verify(listener).onJobSucceeded(handle,result);
  }
  @Test public void testImmediateCallback() throws Exception {
    JobHandleImpl<Serializable> handle=new JobHandleImpl<Serializable>(client,promise,"job",Lists.newArrayList(listener,listener2));
    assertTrue(handle.changeState(JobHandle.State.QUEUED));
    verify(listener).onJobQueued(handle);
    handle.changeState(JobHandle.State.STARTED);
    handle.addSparkJobId(1);
    handle.changeState(JobHandle.State.CANCELLED);
    InOrder inOrder=inOrder(listener2);
    inOrder.verify(listener2).onSparkJobStarted(same(handle),eq(1));
    inOrder.verify(listener2).onJobCancelled(same(handle));
  }
}
