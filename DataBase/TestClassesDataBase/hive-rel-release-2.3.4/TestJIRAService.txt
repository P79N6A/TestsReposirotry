@UseReporter(JunitReporter.class) public class TestJIRAService extends AbstractTestPhase {
  TestConfiguration conf;
  JIRAService jiraService;
  @Before public void setup() throws Exception {
    initialize(getClass().getSimpleName());
    conf=TestConfiguration.fromInputStream(Resources.getResource("test-configuration.properties").openStream(),logger);
    conf.setPatch("https://HIVE-10000.patch");
    jiraService=new JIRAService(logger,conf,"tag-10");
  }
  @Test public void testFormatBuildTagPositive() throws Throwable {
    BuildInfo buildInfo=JIRAService.formatBuildTag("abc-123");
    Assert.assertEquals("abc/123",buildInfo.getFormattedBuildTag());
    Assert.assertEquals("abc",buildInfo.getBuildName());
    buildInfo=JIRAService.formatBuildTag("PreCommit-HIVE-TRUNK-Build-1115");
    Assert.assertEquals("PreCommit-HIVE-TRUNK-Build/1115",buildInfo.getFormattedBuildTag());
    Assert.assertEquals("PreCommit-HIVE-TRUNK-Build",buildInfo.getBuildName());
  }
  @Test(expected=IllegalArgumentException.class) public void testFormatBuildTagNoDashSlash() throws Throwable {
    JIRAService.formatBuildTag("abc/123");
  }
  @Test(expected=IllegalArgumentException.class) public void testFormatBuildTagNoDashSpace() throws Throwable {
    JIRAService.formatBuildTag("abc 123");
  }
  @Test(expected=IllegalArgumentException.class) public void testFormatBuildTagNoDashNone() throws Throwable {
    JIRAService.formatBuildTag("abc123");
  }
  @Test public void testTrimMesssagesBoundry(){
    List<String> messages=Lists.newArrayList();
    Assert.assertEquals(messages,JIRAService.trimMessages(messages));
    messages.clear();
    for (int i=0; i < JIRAService.MAX_MESSAGES; i++) {
      messages.add(String.valueOf(i));
    }
    Assert.assertEquals(messages,JIRAService.trimMessages(messages));
  }
  @Test public void testTrimMesssagesNotTrimmed(){
    List<String> messages=Lists.newArrayList("a","b","c");
    Assert.assertEquals(messages,JIRAService.trimMessages(messages));
  }
  @Test public void testTrimMesssagesTrimmed(){
    List<String> messages=Lists.newArrayList();
    for (int i=0; i < JIRAService.MAX_MESSAGES + 1; i++) {
      messages.add(String.valueOf(i));
    }
    List<String> expected=Lists.newArrayList(messages);
    expected.remove(0);
    expected.add(0,JIRAService.TRIMMED_MESSAGE);
    Assert.assertEquals(expected,JIRAService.trimMessages(messages));
  }
  @Test public void testErrorWithMessages() throws Exception {
    SortedSet<String> failedTests=new TreeSet<String>();
    List<String> messages=new ArrayList<String>();
    messages.add("Error message 1");
    messages.add("Error message 2");
    Set<String> addedTests=new HashSet<String>();
    Approvals.verify(jiraService.generateComments(true,0,failedTests,messages,addedTests));
  }
  @Test public void testErrorWithoutMessages() throws Exception {
    SortedSet<String> failedTests=new TreeSet<String>();
    List<String> messages=new ArrayList<String>();
    Set<String> addedTests=new HashSet<String>();
    Approvals.verify(jiraService.generateComments(true,0,failedTests,messages,addedTests));
  }
  @Test public void testFailNoAdd() throws Exception {
    SortedSet<String> failedTests=new TreeSet<String>();
    failedTests.add("FailedTest1");
    failedTests.add("FailedTest2");
    List<String> messages=new ArrayList<String>();
    Set<String> addedTests=new HashSet<String>();
    Approvals.verify(jiraService.generateComments(false,5,failedTests,messages,addedTests));
  }
  @Test public void testFailAdd() throws Exception {
    SortedSet<String> failedTests=new TreeSet<String>();
    failedTests.add("FailedTest1");
    failedTests.add("FailedTest2");
    List<String> messages=new ArrayList<String>();
    Set<String> addedTests=new HashSet<String>();
    addedTests.add("AddedTest1");
    addedTests.add("AddedTest2");
    Approvals.verify(jiraService.generateComments(false,5,failedTests,messages,addedTests));
  }
  @Test public void testSuccessNoAdd() throws Exception {
    SortedSet<String> failedTests=new TreeSet<String>();
    List<String> messages=new ArrayList<String>();
    Set<String> addedTests=new HashSet<String>();
    Approvals.verify(jiraService.generateComments(false,5,failedTests,messages,addedTests));
  }
  @Test public void testSuccessAdd() throws Exception {
    SortedSet<String> failedTests=new TreeSet<String>();
    List<String> messages=new ArrayList<String>();
    Set<String> addedTests=new HashSet<String>();
    addedTests.add("AddedTest1");
    addedTests.add("AddedTest2");
    Approvals.verify(jiraService.generateComments(false,5,failedTests,messages,addedTests));
  }
}
