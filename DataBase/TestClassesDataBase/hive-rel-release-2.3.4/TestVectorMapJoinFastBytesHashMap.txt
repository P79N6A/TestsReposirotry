public class TestVectorMapJoinFastBytesHashMap extends CommonFastHashTable {
  @Test public void testOneKey() throws Exception {
    random=new Random(82733);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,CAPACITY,LOAD_FACTOR,WB_SIZE,-1);
    VerifyFastBytesHashMap verifyTable=new VerifyFastBytesHashMap();
    byte[] key=new byte[random.nextInt(MAX_KEY_LENGTH)];
    random.nextBytes(key);
    byte[] value=new byte[random.nextInt(MAX_VALUE_LENGTH)];
    random.nextBytes(value);
    map.testPutRow(key,value);
    verifyTable.add(key,value);
    verifyTable.verify(map);
    value=new byte[random.nextInt(MAX_VALUE_LENGTH)];
    random.nextBytes(value);
    map.testPutRow(key,value);
    verifyTable.add(key,value);
    verifyTable.verify(map);
    value=new byte[random.nextInt(MAX_VALUE_LENGTH)];
    random.nextBytes(value);
    map.testPutRow(key,value);
    verifyTable.add(key,value);
    verifyTable.verify(map);
  }
  @Test public void testMultipleKeysSingleValue() throws Exception {
    random=new Random(29383);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,CAPACITY,LOAD_FACTOR,WB_SIZE,-1);
    VerifyFastBytesHashMap verifyTable=new VerifyFastBytesHashMap();
    int keyCount=100 + random.nextInt(1000);
    for (int i=0; i < keyCount; i++) {
      byte[] key=new byte[random.nextInt(MAX_KEY_LENGTH)];
      random.nextBytes(key);
      if (!verifyTable.contains(key)) {
        break;
      }
      byte[] value=new byte[random.nextInt(MAX_VALUE_LENGTH)];
      random.nextBytes(value);
      map.testPutRow(key,value);
      verifyTable.add(key,value);
      verifyTable.verify(map);
    }
  }
  @Test public void testGetNonExistent() throws Exception {
    random=new Random(1002);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,CAPACITY,LOAD_FACTOR,WB_SIZE,-1);
    VerifyFastBytesHashMap verifyTable=new VerifyFastBytesHashMap();
    byte[] key1=new byte[random.nextInt(MAX_KEY_LENGTH)];
    random.nextBytes(key1);
    byte[] value=new byte[random.nextInt(MAX_VALUE_LENGTH)];
    random.nextBytes(value);
    map.testPutRow(key1,value);
    verifyTable.add(key1,value);
    verifyTable.verify(map);
    byte[] key2=new byte[random.nextInt(MAX_KEY_LENGTH)];
    random.nextBytes(key2);
    VectorMapJoinHashMapResult hashMapResult=map.createHashMapResult();
    JoinUtil.JoinResult joinResult=map.lookup(key2,0,key2.length,hashMapResult);
    assertTrue(joinResult == JoinUtil.JoinResult.NOMATCH);
    assertTrue(!hashMapResult.hasRows());
    map.testPutRow(key2,value);
    verifyTable.add(key2,value);
    verifyTable.verify(map);
    byte[] key3=new byte[random.nextInt(MAX_KEY_LENGTH)];
    random.nextBytes(key3);
    hashMapResult=map.createHashMapResult();
    joinResult=map.lookup(key3,0,key3.length,hashMapResult);
    assertTrue(joinResult == JoinUtil.JoinResult.NOMATCH);
    assertTrue(!hashMapResult.hasRows());
  }
  @Test public void testFullMap() throws Exception {
    random=new Random(200001);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,CAPACITY,1f,WB_SIZE,-1);
    VerifyFastBytesHashMap verifyTable=new VerifyFastBytesHashMap();
    for (int i=0; i < CAPACITY; i++) {
      byte[] key;
      while (true) {
        key=new byte[random.nextInt(MAX_KEY_LENGTH)];
        random.nextBytes(key);
        if (!verifyTable.contains(key)) {
          break;
        }
      }
      byte[] value=new byte[random.nextInt(MAX_VALUE_LENGTH)];
      random.nextBytes(value);
      map.testPutRow(key,value);
      verifyTable.add(key,value);
    }
    verifyTable.verify(map);
    byte[] anotherKey;
    while (true) {
      anotherKey=new byte[random.nextInt(MAX_KEY_LENGTH)];
      random.nextBytes(anotherKey);
      if (!verifyTable.contains(anotherKey)) {
        break;
      }
    }
    VectorMapJoinHashMapResult hashMapResult=map.createHashMapResult();
    JoinUtil.JoinResult joinResult=map.lookup(anotherKey,0,anotherKey.length,hashMapResult);
    assertTrue(joinResult == JoinUtil.JoinResult.NOMATCH);
  }
  @Test public void testExpand() throws Exception {
    random=new Random(99221);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,1,0.0000001f,WB_SIZE,-1);
    VerifyFastBytesHashMap verifyTable=new VerifyFastBytesHashMap();
    for (int i=0; i < 18; ++i) {
      byte[] key;
      while (true) {
        key=new byte[random.nextInt(MAX_KEY_LENGTH)];
        random.nextBytes(key);
        if (!verifyTable.contains(key)) {
          break;
        }
      }
      byte[] value=new byte[random.nextInt(MAX_VALUE_LENGTH)];
      random.nextBytes(value);
      map.testPutRow(key,value);
      verifyTable.add(key,value);
    }
    verifyTable.verify(map);
  }
  public void addAndVerifyMultipleKeyMultipleValue(  int keyCount,  VectorMapJoinFastMultiKeyHashMap map,  VerifyFastBytesHashMap verifyTable) throws HiveException, IOException {
    addAndVerifyMultipleKeyMultipleValue(keyCount,map,verifyTable,MAX_KEY_LENGTH,-1);
  }
  public void addAndVerifyMultipleKeyMultipleValue(  int keyCount,  VectorMapJoinFastMultiKeyHashMap map,  VerifyFastBytesHashMap verifyTable,  int maxKeyLength,  int fixedValueLength) throws HiveException, IOException {
    for (int i=0; i < keyCount; i++) {
      byte[] value;
      if (fixedValueLength == -1) {
        value=new byte[generateLargeCount() - 1];
      }
 else {
        value=new byte[fixedValueLength];
      }
      random.nextBytes(value);
      if (random.nextBoolean() || verifyTable.getCount() == 0) {
        byte[] key;
        while (true) {
          key=new byte[random.nextInt(maxKeyLength)];
          random.nextBytes(key);
          if (!verifyTable.contains(key)) {
            break;
          }
        }
        map.testPutRow(key,value);
        verifyTable.add(key,value);
      }
 else {
        byte[] randomExistingKey=verifyTable.addRandomExisting(value,random);
        map.testPutRow(randomExistingKey,value);
      }
    }
    verifyTable.verify(map);
  }
  @Test public void testMultipleKeysMultipleValue() throws Exception {
    random=new Random(9332);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastBytesHashMap verifyTable=new VerifyFastBytesHashMap();
    int keyCount=1000;
    addAndVerifyMultipleKeyMultipleValue(keyCount,map,verifyTable);
  }
  @Test public void testLargeAndExpand() throws Exception {
    random=new Random(21111);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,MODERATE_CAPACITY,LOAD_FACTOR,MODERATE_WB_SIZE,-1);
    VerifyFastBytesHashMap verifyTable=new VerifyFastBytesHashMap();
    int keyCount=1000;
    addAndVerifyMultipleKeyMultipleValue(keyCount,map,verifyTable);
  }
  @Test public void testReallyBig() throws Exception {
    random=new Random(42662);
    VectorMapJoinFastMultiKeyHashMap map=new VectorMapJoinFastMultiKeyHashMap(false,LARGE_CAPACITY,LOAD_FACTOR,MODERATE_WB_SIZE,-1);
    VerifyFastBytesHashMap verifyTable=new VerifyFastBytesHashMap();
    int keyCount=1000000;
    addAndVerifyMultipleKeyMultipleValue(keyCount,map,verifyTable);
  }
}
