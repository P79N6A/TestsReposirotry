/** 
 * TestMiniHS2StateWithNoZookeeper. This tests HS2 shutdown is not triggered by CloseSession operation  while HS2 has never been registered with ZooKeeper.
 */
public class TestMiniHS2StateWithNoZookeeper {
  private static final Logger LOG=LoggerFactory.getLogger(TestMiniHS2StateWithNoZookeeper.class);
  private static MiniHS2 miniHS2=null;
  private static HiveConf hiveConf=null;
  @BeforeClass public static void beforeTest() throws Exception {
    hiveConf=new HiveConf();
    hiveConf.setBoolVar(ConfVars.HIVE_SERVER2_SUPPORT_DYNAMIC_SERVICE_DISCOVERY,true);
    hiveConf.setIntVar(ConfVars.HIVE_ZOOKEEPER_CONNECTION_MAX_RETRIES,0);
    hiveConf.setTimeVar(ConfVars.HIVE_ZOOKEEPER_CONNECTION_BASESLEEPTIME,0,TimeUnit.MILLISECONDS);
    miniHS2=new MiniHS2(hiveConf);
    Map<String,String> confOverlay=new HashMap<String,String>();
    try {
      miniHS2.start(confOverlay);
    }
 catch (    Exception ex) {
      LOG.warn("Zookeeper is not set up intentionally, so the error is expected (unless it's not related to ZK): " + ex);
      miniHS2.setStarted(true);
    }
  }
  @AfterClass public static void afterTest() throws Exception {
    miniHS2.stop();
  }
  @Test public void openSessionAndClose() throws Exception {
    CLIServiceClient client=miniHS2.getServiceClient();
    SessionHandle sessionHandle=client.openSession(null,null,null);
    client.closeSession(sessionHandle);
    Thread.sleep(100);
    Assert.assertEquals(Service.STATE.STARTED,miniHS2.getState());
  }
}
