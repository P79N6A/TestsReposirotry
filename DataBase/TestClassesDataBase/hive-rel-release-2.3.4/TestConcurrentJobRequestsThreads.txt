public class TestConcurrentJobRequestsThreads extends ConcurrentJobRequestsTestBase {
  private static AppConfig config;
  private static QueueStatusBean statusBean;
  @Rule public ExpectedException exception=ExpectedException.none();
  @BeforeClass public static void setUp(){
    final String[] args=new String[]{};
    Main main=new Main(args);
    config=main.getAppConfigInstance();
    config.setInt(AppConfig.JOB_STATUS_MAX_THREADS,5);
    config.setInt(AppConfig.JOB_LIST_MAX_THREADS,5);
    config.setInt(AppConfig.JOB_SUBMIT_MAX_THREADS,5);
    statusBean=new QueueStatusBean("job_1000","Job not found");
  }
  @Test public void ConcurrentJobsStatusTooManyRequestsException(){
    try {
      JobRunnable jobRunnable=ConcurrentJobsStatus(6,config,false,false,statusJobHelper.getDelayedResonseAnswer(4,statusBean));
      assertTrue(jobRunnable.exception != null);
      assertTrue(jobRunnable.exception instanceof TooManyRequestsException);
      TooManyRequestsException ex=(TooManyRequestsException)jobRunnable.exception;
      assertTrue(ex.httpCode == TooManyRequestsException.TOO_MANY_REQUESTS_429);
      String expectedMessage="Unable to service the status job request as templeton service is busy " + "with too many status job requests. Please wait for some time before " + "retrying the operation. Please refer to the config "+ "templeton.parallellism.job.status to configure concurrent requests.";
      assertTrue(jobRunnable.exception.getMessage().contains(expectedMessage));
      jobRunnable=ConcurrentJobsStatus(5,config,false,false,statusJobHelper.getDelayedResonseAnswer(4,statusBean));
      assertTrue(jobRunnable.exception == null);
    }
 catch (    Exception e) {
      assertTrue(false);
    }
  }
  @Test public void ConcurrentListJobsTooManyRequestsException(){
    try {
      JobRunnable jobRunnable=ConcurrentListJobs(6,config,false,false,listJobHelper.getDelayedResonseAnswer(4,new ArrayList<JobItemBean>()));
      assertTrue(jobRunnable.exception != null);
      assertTrue(jobRunnable.exception instanceof TooManyRequestsException);
      TooManyRequestsException ex=(TooManyRequestsException)jobRunnable.exception;
      assertTrue(ex.httpCode == TooManyRequestsException.TOO_MANY_REQUESTS_429);
      String expectedMessage="Unable to service the list job request as templeton service is busy " + "with too many list job requests. Please wait for some time before " + "retrying the operation. Please refer to the config "+ "templeton.parallellism.job.list to configure concurrent requests.";
      assertTrue(jobRunnable.exception.getMessage().contains(expectedMessage));
      jobRunnable=ConcurrentListJobs(5,config,false,false,listJobHelper.getDelayedResonseAnswer(4,new ArrayList<JobItemBean>()));
      assertTrue(jobRunnable.exception == null);
    }
 catch (    Exception e) {
      assertTrue(false);
    }
  }
  @Test public void ConcurrentSubmitJobsTooManyRequestsException(){
    try {
      JobRunnable jobRunnable=SubmitConcurrentJobs(6,config,false,false,submitJobHelper.getDelayedResonseAnswer(4,0),killJobHelper.getDelayedResonseAnswer(0,statusBean),"job_1000");
      assertTrue(jobRunnable.exception != null);
      assertTrue(jobRunnable.exception instanceof TooManyRequestsException);
      TooManyRequestsException ex=(TooManyRequestsException)jobRunnable.exception;
      assertTrue(ex.httpCode == TooManyRequestsException.TOO_MANY_REQUESTS_429);
      String expectedMessage="Unable to service the submit job request as templeton service is busy " + "with too many submit job requests. Please wait for some time before " + "retrying the operation. Please refer to the config "+ "templeton.parallellism.job.submit to configure concurrent requests.";
      assertTrue(jobRunnable.exception.getMessage().contains(expectedMessage));
      jobRunnable=SubmitConcurrentJobs(5,config,false,false,submitJobHelper.getDelayedResonseAnswer(4,0),killJobHelper.getDelayedResonseAnswer(0,statusBean),"job_1000");
      assertTrue(jobRunnable.exception == null);
    }
 catch (    Exception e) {
      assertTrue(false);
    }
  }
}
