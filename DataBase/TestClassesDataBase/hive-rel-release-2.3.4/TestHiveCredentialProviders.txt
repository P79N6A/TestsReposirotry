public class TestHiveCredentialProviders {
  private static final String HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL="testhadoopCredStorePassword";
  private static final String HIVE_JOB_CREDSTORE_PASSWORD_ENVVAR_VAL="testhiveJobCredPassword";
  private static final String JOB_CREDSTORE_LOCATION="jceks://hdfs/user/hive/creds.jceks";
  private static final String HADOOP_CREDSTORE_LOCATION="localjceks://file/user/hive/localcreds.jceks";
  private Configuration jobConf;
  private final static void setEnv(  Map<String,String> newenv) throws Exception {
    Class[] classes=Collections.class.getDeclaredClasses();
    Map<String,String> env=System.getenv();
    for (    Class cl : classes) {
      if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) {
        Field field=cl.getDeclaredField("m");
        field.setAccessible(true);
        Object obj=field.get(env);
        Map<String,String> map=(Map<String,String>)obj;
        map.clear();
        map.putAll(newenv);
      }
    }
  }
  @Before public void resetConfig(){
    jobConf=new JobConf();
  }
  @Test public void testJobCredentialProvider() throws Exception {
    setupConfigs(true,true,true,true);
    HiveConfUtil.updateJobCredentialProviders(jobConf);
    Assert.assertEquals(JOB_CREDSTORE_LOCATION,jobConf.get(HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG));
    Assert.assertEquals(HIVE_JOB_CREDSTORE_PASSWORD_ENVVAR_VAL,getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),HADOOP_CREDENTIAL_PASSWORD_ENVVAR));
    Assert.assertEquals(HIVE_JOB_CREDSTORE_PASSWORD_ENVVAR_VAL,getValueFromJobConf(jobConf.get(JobConf.MAPRED_REDUCE_TASK_ENV),HADOOP_CREDENTIAL_PASSWORD_ENVVAR));
  }
  @Test public void testHadoopCredentialProvider() throws Exception {
    setupConfigs(true,true,true,false);
    HiveConfUtil.updateJobCredentialProviders(jobConf);
    Assert.assertEquals(HADOOP_CREDSTORE_LOCATION,jobConf.get(HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG));
    Assert.assertEquals(HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL,getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),HADOOP_CREDENTIAL_PASSWORD_ENVVAR));
    Assert.assertEquals(HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL,getValueFromJobConf(jobConf.get(JobConf.MAPRED_REDUCE_TASK_ENV),HADOOP_CREDENTIAL_PASSWORD_ENVVAR));
  }
  @Test public void testNoCredentialProviderWithPassword() throws Exception {
    setupConfigs(false,false,true,false);
    Assert.assertTrue(StringUtils.isBlank(jobConf.get(HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG)));
    Assert.assertNull(getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),HADOOP_CREDENTIAL_PASSWORD_ENVVAR));
    Assert.assertNull(getValueFromJobConf(jobConf.get(JobConf.MAPRED_REDUCE_TASK_ENV),HADOOP_CREDENTIAL_PASSWORD_ENVVAR));
  }
  @Test public void testJobCredentialProviderWithDefaultPassword() throws Exception {
    setupConfigs(false,true,false,true);
    HiveConfUtil.updateJobCredentialProviders(jobConf);
    Assert.assertEquals(JOB_CREDSTORE_LOCATION,jobConf.get(HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG));
    Assert.assertEquals(HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL,getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),HADOOP_CREDENTIAL_PASSWORD_ENVVAR));
    Assert.assertEquals(HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL,getValueFromJobConf(jobConf.get(JobConf.MAPRED_REDUCE_TASK_ENV),HADOOP_CREDENTIAL_PASSWORD_ENVVAR));
  }
  @Test public void testCredentialProviderWithNoPasswords() throws Exception {
    setupConfigs(true,false,false,true);
    HiveConfUtil.updateJobCredentialProviders(jobConf);
    Assert.assertEquals(JOB_CREDSTORE_LOCATION,jobConf.get(HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG));
    Assert.assertNull(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV));
    Assert.assertNull(jobConf.get(JobConf.MAPRED_REDUCE_TASK_ENV));
    resetConfig();
    setupConfigs(true,false,false,false);
    HiveConfUtil.updateJobCredentialProviders(jobConf);
    Assert.assertEquals(HADOOP_CREDSTORE_LOCATION,jobConf.get(HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG));
    Assert.assertNull(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV));
    Assert.assertNull(jobConf.get(JobConf.MAPRED_REDUCE_TASK_ENV));
  }
  @Test public void testJobCredentialProviderUnset() throws Exception {
    setupConfigs(true,true,false,false);
    HiveConfUtil.updateJobCredentialProviders(jobConf);
    assertEquals(HADOOP_CREDSTORE_LOCATION,jobConf.get(HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG));
    assertEquals(HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL,getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),HADOOP_CREDENTIAL_PASSWORD_ENVVAR));
    assertEquals(HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL,getValueFromJobConf(jobConf.get(JobConf.MAPRED_REDUCE_TASK_ENV),HADOOP_CREDENTIAL_PASSWORD_ENVVAR));
  }
  @Test public void testNoCredentialProvider() throws Exception {
    setupConfigs(false,false,false,false);
    assertTrue(StringUtils.isBlank(jobConf.get(HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG)));
    assertNull(getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),HADOOP_CREDENTIAL_PASSWORD_ENVVAR));
    assertNull(getValueFromJobConf(jobConf.get(JobConf.MAPRED_REDUCE_TASK_ENV),HADOOP_CREDENTIAL_PASSWORD_ENVVAR));
  }
  @Test public void testExistingConfiguration() throws Exception {
    jobConf.set(JobConf.MAPRED_MAP_TASK_ENV,"k1=v1, k2=v2, HADOOP_CREDSTORE_PASSWORD=test");
    setupConfigs(false,true,false,true);
    HiveConfUtil.updateJobCredentialProviders(jobConf);
    assertEquals("v1",getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),"k1"));
    assertEquals("v2",getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),"k2"));
    resetConfig();
    jobConf.set(JobConf.MAPRED_MAP_TASK_ENV,"k1=v1, HADOOP_CREDSTORE_PASSWORD=test, k2=v2");
    setupConfigs(false,true,false,true);
    HiveConfUtil.updateJobCredentialProviders(jobConf);
    assertEquals("v1",getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),"k1"));
    assertEquals("v2",getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),"k2"));
    resetConfig();
    jobConf.set(JobConf.MAPRED_MAP_TASK_ENV,"HADOOP_CREDSTORE_PASSWORD=test, k1=v1, k2=v2");
    setupConfigs(false,true,false,true);
    HiveConfUtil.updateJobCredentialProviders(jobConf);
    assertEquals("v1",getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),"k1"));
    assertEquals("v2",getValueFromJobConf(jobConf.get(JobConf.MAPRED_MAP_TASK_ENV),"k2"));
  }
  /** 
 * Sets up the environment and configurations
 * @param setHadoopCredProvider set hadoop credstore provider path
 * @param setHadoopCredstorePassword set HADOOP_CREDSTORE_PASSWORD env variable
 * @param setHiveCredPassword set HIVE_JOB_CREDSTORE_PASSWORD env variable
 * @param setHiveProviderPath set HiveConf.ConfVars.HIVE_SERVER2_JOB_CREDSTORE_LOCATION in thehive config
 * @throws Exception
 */
  private void setupConfigs(  boolean setHadoopCredProvider,  boolean setHadoopCredstorePassword,  boolean setHiveCredPassword,  boolean setHiveProviderPath) throws Exception {
    Map<String,String> mockEnv=new HashMap<>();
    if (setHadoopCredProvider) {
      jobConf.set(HADOOP_CREDENTIAL_PROVIDER_PATH_CONFIG,HADOOP_CREDSTORE_LOCATION);
    }
    if (setHadoopCredstorePassword) {
      mockEnv.put(HADOOP_CREDENTIAL_PASSWORD_ENVVAR,HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL);
    }
    if (setHiveCredPassword) {
      mockEnv.put(HIVE_SERVER2_JOB_CREDSTORE_PASSWORD_ENVVAR,HIVE_JOB_CREDSTORE_PASSWORD_ENVVAR_VAL);
    }
    TestHiveCredentialProviders.setEnv(mockEnv);
    if (setHiveProviderPath) {
      jobConf.set(HiveConf.ConfVars.HIVE_SERVER2_JOB_CREDENTIAL_PROVIDER_PATH.varname,JOB_CREDSTORE_LOCATION);
    }
    jobConf.set(HiveConf.ConfVars.HIVE_EXECUTION_ENGINE.varname,"mr");
  }
  private String getValueFromJobConf(  String keyValuePairs,  String key){
    if (keyValuePairs == null) {
      return null;
    }
    String[] keyValues=keyValuePairs.split(",");
    for (    String kv : keyValues) {
      String[] parts=kv.split("=");
      if (key.equals(parts[0].trim())) {
        return parts[1].trim();
      }
    }
    return null;
  }
  @Test public void testEnv() throws Exception {
    Map<String,String> mockEnv=new HashMap<>();
    mockEnv.put(HADOOP_CREDENTIAL_PASSWORD_ENVVAR,HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL);
    mockEnv.put(HIVE_SERVER2_JOB_CREDSTORE_PASSWORD_ENVVAR,HIVE_JOB_CREDSTORE_PASSWORD_ENVVAR_VAL);
    TestHiveCredentialProviders.setEnv(mockEnv);
    assertEquals(HADOOP_CREDSTORE_PASSWORD_ENVVAR_VAL,System.getenv(HADOOP_CREDENTIAL_PASSWORD_ENVVAR));
    assertEquals(HIVE_JOB_CREDSTORE_PASSWORD_ENVVAR_VAL,System.getenv(HIVE_SERVER2_JOB_CREDSTORE_PASSWORD_ENVVAR));
  }
}
