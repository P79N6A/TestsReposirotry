public final class SplitFilterTestCase {
  public static final long DEFAULT_SPLIT_SIZE=1024 * 1024;
  public static final long SMALL_SPLIT_SIZE=500;
  private final Set<HiveInputSplit> allSplits;
  private final Set<HiveInputSplit> selectedSplits;
  private final Set<HiveInputSplit> expectedSplits;
  private final long maxInputSize;
  private SplitFilterTestCase(  Iterable<HiveInputSplit> allSplits,  Iterable<HiveInputSplit> selectedSplits,  Iterable<HiveInputSplit> expectedSplits,  long maxInputSize){
    this.allSplits=ImmutableSet.copyOf(allSplits);
    this.selectedSplits=ImmutableSet.copyOf(selectedSplits);
    this.expectedSplits=ImmutableSet.copyOf(expectedSplits);
    this.maxInputSize=maxInputSize;
  }
  private HiveInputSplit[] toArray(  Collection<HiveInputSplit> splits){
    return splits.toArray(new HiveInputSplit[splits.size()]);
  }
  public void executeAndValidate() throws IOException {
    SplitFilter filter=new SplitFilter(new MockIndexResult(selectedSplits),maxInputSize);
    List<HiveInputSplit> actualSplits=filter.filter(toArray(allSplits));
    assertSplits(expectedSplits,actualSplits);
  }
  private void assertSplits(  Collection<HiveInputSplit> expectedSplits,  Collection<HiveInputSplit> actualSplits){
    SplitFilter.HiveInputSplitComparator hiveInputSplitComparator=new SplitFilter.HiveInputSplitComparator();
    List<HiveInputSplit> sortedExpectedSplits=new ArrayList<>(expectedSplits);
    Collections.sort(sortedExpectedSplits,hiveInputSplitComparator);
    List<HiveInputSplit> sortedActualSplits=new ArrayList<>(actualSplits);
    Collections.sort(sortedActualSplits,hiveInputSplitComparator);
    assertEquals("Number of selected splits.",sortedExpectedSplits.size(),sortedActualSplits.size());
    for (int i=0; i < sortedExpectedSplits.size(); i++) {
      HiveInputSplit expectedSplit=sortedExpectedSplits.get(i);
      HiveInputSplit actualSplit=sortedActualSplits.get(i);
      String splitName="Split #" + i;
      assertEquals(splitName + " path.",expectedSplit.getPath(),actualSplit.getPath());
      assertEquals(splitName + " start.",expectedSplit.getStart(),actualSplit.getStart());
      assertEquals(splitName + " length.",expectedSplit.getLength(),actualSplit.getLength());
    }
  }
  public static MaxInputSizeStep builder(){
    return new SplitFilterTestCaseBuilder();
  }
public static interface MaxInputSizeStep extends InputFilesStep {
    InputFilesStep maxInputSize(    long maxInputSize);
  }
public static interface InputFilesStep {
    ExpectedSplitsStep inputFiles(    MockInputFile... inputFiles);
  }
public static interface ExpectedSplitsStep {
    BuildStep expectedSplits(    HiveInputSplit... expectedSplits);
  }
public static interface BuildStep {
    SplitFilterTestCase build();
  }
private static final class SplitFilterTestCaseBuilder implements MaxInputSizeStep, InputFilesStep, ExpectedSplitsStep, BuildStep {
    private long maxInputSize=Long.MAX_VALUE;
    private List<MockInputFile> inputFiles;
    private List<HiveInputSplit> expectedSplits;
    @Override public InputFilesStep maxInputSize(    long maxInputSize){
      this.maxInputSize=maxInputSize;
      return this;
    }
    @Override public ExpectedSplitsStep inputFiles(    MockInputFile... inputFiles){
      this.inputFiles=Arrays.asList(inputFiles);
      return this;
    }
    @Override public BuildStep expectedSplits(    HiveInputSplit... expectedSplits){
      this.expectedSplits=Arrays.asList(expectedSplits);
      return this;
    }
    @Override public SplitFilterTestCase build(){
      List<HiveInputSplit> allSplits=new ArrayList<>();
      List<HiveInputSplit> selectedSplits=new ArrayList<>();
      Set<String> seenPaths=new HashSet<String>();
      for (      MockInputFile inputFile : inputFiles) {
        if (seenPaths.add(inputFile.getPath())) {
          allSplits.addAll(inputFile.getSplits());
          selectedSplits.addAll(inputFile.getSelectedSplits());
        }
 else {
          fail(String.format("Cannot add 2 input files with the same path to a test case. " + "The duplicated path is '%s'.",inputFile.getPath()));
        }
      }
      return new SplitFilterTestCase(allSplits,selectedSplits,expectedSplits,maxInputSize);
    }
  }
}
