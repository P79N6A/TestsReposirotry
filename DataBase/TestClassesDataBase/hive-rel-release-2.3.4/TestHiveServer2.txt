public class TestHiveServer2 {
  private static MiniHS2 miniHS2=null;
  private static Map<String,String> confOverlay;
  @BeforeClass public static void beforeTest() throws Exception {
    miniHS2=new MiniHS2(new HiveConf());
    confOverlay=new HashMap<String,String>();
    confOverlay.put(ConfVars.HIVE_SUPPORT_CONCURRENCY.varname,"false");
    miniHS2.start(confOverlay);
  }
  @AfterClass public static void afterTest() throws Exception {
    miniHS2.stop();
  }
  @Before public void setUp() throws Exception {
  }
  @After public void tearDown() throws Exception {
  }
  /** 
 * Open a new session and run a test query
 * @throws Exception
 */
  @Test public void testConnection() throws Exception {
    String tableName="TestHiveServer2TestConnection";
    CLIServiceClient serviceClient=miniHS2.getServiceClient();
    SessionHandle sessHandle=serviceClient.openSession("foo","bar");
    serviceClient.executeStatement(sessHandle,"DROP TABLE IF EXISTS " + tableName,confOverlay);
    serviceClient.executeStatement(sessHandle,"CREATE TABLE " + tableName + " (id INT)",confOverlay);
    OperationHandle opHandle=serviceClient.executeStatement(sessHandle,"SHOW TABLES",confOverlay);
    RowSet rowSet=serviceClient.fetchResults(opHandle);
    assertFalse(rowSet.numRows() == 0);
    serviceClient.executeStatement(sessHandle,"DROP TABLE IF EXISTS " + tableName,confOverlay);
    serviceClient.closeSession(sessHandle);
  }
  /** 
 * Open a new session and execute a set command
 * @throws Exception
 */
  @Test public void testGetVariableValue() throws Exception {
    CLIServiceClient serviceClient=miniHS2.getServiceClient();
    SessionHandle sessHandle=serviceClient.openSession("foo","bar");
    OperationHandle opHandle=serviceClient.executeStatement(sessHandle,"set system:os.name",confOverlay);
    RowSet rowSet=serviceClient.fetchResults(opHandle);
    assertEquals(1,rowSet.numRows());
    serviceClient.closeSession(sessHandle);
  }
}
