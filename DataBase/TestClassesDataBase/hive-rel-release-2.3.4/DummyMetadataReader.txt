private static class DummyMetadataReader implements DataReader {
  public boolean doStreamStep=false;
  public boolean isEmpty;
  @Override public void open() throws IOException {
  }
  @Override public OrcIndex readRowIndex(  StripeInformation stripe,  TypeDescription fileSchema,  OrcProto.StripeFooter footer,  boolean ignoreNonUtf8BloomFilter,  boolean[] included,  OrcProto.RowIndex[] indexes,  boolean[] sargColumns,  OrcFile.WriterVersion version,  OrcProto.Stream.Kind[] bloomFilterKinds,  OrcProto.BloomFilterIndex[] bloomFilterIndices) throws IOException {
    if (isEmpty) {
      return new OrcIndex(new OrcProto.RowIndex[]{},bloomFilterKinds,new OrcProto.BloomFilterIndex[]{});
    }
    OrcProto.ColumnStatistics cs=OrcProto.ColumnStatistics.newBuilder().setBucketStatistics(OrcProto.BucketStatistics.newBuilder().addCount(0)).setStringStatistics(OrcProto.StringStatistics.newBuilder().setMaximum("zzz").setMinimum("aaa")).setBinaryStatistics(OrcProto.BinaryStatistics.newBuilder().setSum(5)).setDateStatistics(OrcProto.DateStatistics.newBuilder().setMinimum(4545).setMaximum(6656)).setDecimalStatistics(OrcProto.DecimalStatistics.newBuilder().setMaximum("zzz").setMinimum("aaa")).setDoubleStatistics(OrcProto.DoubleStatistics.newBuilder().setMinimum(0.5).setMaximum(1.5)).setIntStatistics(OrcProto.IntegerStatistics.newBuilder().setMaximum(10).setMinimum(5)).setTimestampStatistics(OrcProto.TimestampStatistics.newBuilder().setMaximum(10)).build();
    OrcProto.RowIndex ri=OrcProto.RowIndex.newBuilder().addEntry(OrcProto.RowIndexEntry.newBuilder().addPositions(1)).addEntry(OrcProto.RowIndexEntry.newBuilder().addPositions(0).addPositions(2).setStatistics(cs)).build();
    OrcProto.RowIndex ri2=OrcProto.RowIndex.newBuilder().addEntry(OrcProto.RowIndexEntry.newBuilder().addPositions(3)).build();
    OrcProto.BloomFilterIndex bfi=OrcProto.BloomFilterIndex.newBuilder().addBloomFilter(OrcProto.BloomFilter.newBuilder().addBitset(0).addBitset(1)).build();
    if (doStreamStep) {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      CodedOutputStream cos=CodedOutputStream.newInstance(baos);
      ri.writeTo(cos);
      cos.flush();
      ri=OrcProto.RowIndex.newBuilder().mergeFrom(baos.toByteArray()).build();
      baos=new ByteArrayOutputStream();
      cos=CodedOutputStream.newInstance(baos);
      ri2.writeTo(cos);
      cos.flush();
      ri2=OrcProto.RowIndex.newBuilder().mergeFrom(baos.toByteArray()).build();
      baos=new ByteArrayOutputStream();
      cos=CodedOutputStream.newInstance(baos);
      bfi.writeTo(cos);
      cos.flush();
      bfi=OrcProto.BloomFilterIndex.newBuilder().mergeFrom(baos.toByteArray()).build();
    }
    return new OrcIndex(new OrcProto.RowIndex[]{ri,ri2},bloomFilterKinds,new OrcProto.BloomFilterIndex[]{bfi});
  }
  @Override public OrcProto.StripeFooter readStripeFooter(  StripeInformation stripe) throws IOException {
    OrcProto.StripeFooter.Builder fb=OrcProto.StripeFooter.newBuilder();
    if (!isEmpty) {
      fb.addStreams(OrcProto.Stream.newBuilder().setColumn(0).setLength(20).setKind(OrcProto.Stream.Kind.LENGTH)).addStreams(OrcProto.Stream.newBuilder().setColumn(0).setLength(40).setKind(OrcProto.Stream.Kind.DATA)).addColumns(OrcProto.ColumnEncoding.newBuilder().setDictionarySize(10).setKind(OrcProto.ColumnEncoding.Kind.DIRECT_V2));
    }
    OrcProto.StripeFooter footer=fb.build();
    if (doStreamStep) {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      CodedOutputStream cos=CodedOutputStream.newInstance(baos);
      footer.writeTo(cos);
      cos.flush();
      footer=OrcProto.StripeFooter.newBuilder().mergeFrom(baos.toByteArray()).build();
    }
    return footer;
  }
  @Override public DiskRangeList readFileData(  DiskRangeList range,  long baseOffset,  boolean doForceDirect) throws IOException {
    return null;
  }
  @Override public boolean isTrackingDiskRanges(){
    return false;
  }
  @Override public void releaseBuffer(  ByteBuffer toRelease){
  }
  @Override public DataReader clone(){
    return null;
  }
  @Override public void close() throws IOException {
  }
}
