public class TestRecordIdentifier {
  @Test public void TestOrdering() throws Exception {
    RecordIdentifier left=new RecordIdentifier(100,200,1200);
    RecordIdentifier right=new RecordIdentifier();
    right.setValues(100L,200,1000L);
    assertTrue(right.compareTo(left) < 0);
    assertTrue(left.compareTo(right) > 0);
    left.set(right);
    assertTrue(right.compareTo(left) == 0);
    right.setRowId(2000);
    assertTrue(right.compareTo(left) > 0);
    left.setValues(1,2,3);
    right.setValues(100,2,3);
    assertTrue(left.compareTo(right) < 0);
    assertTrue(right.compareTo(left) > 0);
    left.setValues(1,2,3);
    right.setValues(1,100,3);
    assertTrue(left.compareTo(right) < 0);
    assertTrue(right.compareTo(left) > 0);
  }
  @Test public void testHashEquals() throws Exception {
    long origTxn=ThreadLocalRandom.current().nextLong(1,10000000000L);
    int bucketId=ThreadLocalRandom.current().nextInt(1,512);
    long rowId=ThreadLocalRandom.current().nextLong(1,10000000000L);
    long currTxn=origTxn + ThreadLocalRandom.current().nextLong(0,10000000000L);
    int stmtId=ThreadLocalRandom.current().nextInt(1,512);
    RecordIdentifier left=new RecordIdentifier(origTxn,bucketId,rowId);
    RecordIdentifier right=new RecordIdentifier(origTxn,bucketId,rowId);
    OrcRawRecordMerger.ReaderKey rkLeft=new OrcRawRecordMerger.ReaderKey(origTxn,bucketId,rowId,currTxn,stmtId);
    OrcRawRecordMerger.ReaderKey rkRight=new OrcRawRecordMerger.ReaderKey(origTxn,bucketId,rowId,currTxn,stmtId);
    assertEquals("RecordIdentifier.equals",left,right);
    assertEquals("RecordIdentifier.hashCode",left.hashCode(),right.hashCode());
    assertEquals("ReaderKey",rkLeft,rkLeft);
    assertEquals("ReaderKey.hashCode",rkLeft.hashCode(),rkRight.hashCode());
    assertNotEquals("RecordIdentifier <> ReaderKey",left,rkRight);
  }
}
