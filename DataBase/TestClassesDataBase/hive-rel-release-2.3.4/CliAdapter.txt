/** 
 * This class adapts old vm test-executors to be executed in multiple instances
 */
public abstract class CliAdapter {
  protected final AbstractCliConfig cliConfig;
  public CliAdapter(  AbstractCliConfig cliConfig){
    this.cliConfig=cliConfig;
  }
  public final List<Object[]> getParameters() throws Exception {
    Set<File> f=cliConfig.getQueryFiles();
    List<Object[]> ret=new ArrayList<>();
    for (    File file : f) {
      String label=file.getName().replaceAll("\\.[^\\.]+$","");
      ret.add(new Object[]{label,file});
    }
    return ret;
  }
  abstract public void beforeClass() throws Exception ;
  abstract public void setUp();
  abstract public void tearDown();
  abstract public void shutdown() throws Exception ;
  abstract public void runTest(  String name,  String name2,  String absolutePath) throws Exception ;
  public final TestRule buildClassRule(){
    return new TestRule(){
      @Override public Statement apply(      final Statement base,      Description description){
        return new Statement(){
          @Override public void evaluate() throws Throwable {
            CliAdapter.this.beforeClass();
            try {
              base.evaluate();
            }
  finally {
              CliAdapter.this.shutdown();
            }
          }
        }
;
      }
    }
;
  }
  public final TestRule buildTestRule(){
    return new TestRule(){
      @Override public Statement apply(      final Statement base,      Description description){
        return new Statement(){
          @Override public void evaluate() throws Throwable {
            CliAdapter.this.setUp();
            try {
              base.evaluate();
            }
  finally {
              CliAdapter.this.tearDown();
            }
          }
        }
;
      }
    }
;
  }
  public final void runTest(  String name,  File qfile) throws Exception {
    runTest(name,qfile.getName(),qfile.getAbsolutePath());
  }
}
