private static final class SplitFilterTestCaseBuilder implements MaxInputSizeStep, InputFilesStep, ExpectedSplitsStep, BuildStep {
  private long maxInputSize=Long.MAX_VALUE;
  private List<MockInputFile> inputFiles;
  private List<HiveInputSplit> expectedSplits;
  @Override public InputFilesStep maxInputSize(  long maxInputSize){
    this.maxInputSize=maxInputSize;
    return this;
  }
  @Override public ExpectedSplitsStep inputFiles(  MockInputFile... inputFiles){
    this.inputFiles=Arrays.asList(inputFiles);
    return this;
  }
  @Override public BuildStep expectedSplits(  HiveInputSplit... expectedSplits){
    this.expectedSplits=Arrays.asList(expectedSplits);
    return this;
  }
  @Override public SplitFilterTestCase build(){
    List<HiveInputSplit> allSplits=new ArrayList<>();
    List<HiveInputSplit> selectedSplits=new ArrayList<>();
    Set<String> seenPaths=new HashSet<String>();
    for (    MockInputFile inputFile : inputFiles) {
      if (seenPaths.add(inputFile.getPath())) {
        allSplits.addAll(inputFile.getSplits());
        selectedSplits.addAll(inputFile.getSelectedSplits());
      }
 else {
        fail(String.format("Cannot add 2 input files with the same path to a test case. " + "The duplicated path is '%s'.",inputFile.getPath()));
      }
    }
    return new SplitFilterTestCase(allSplits,selectedSplits,expectedSplits,maxInputSize);
  }
}
