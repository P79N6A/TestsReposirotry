public class TestBlobStorageUtils {
  private static final Configuration conf=new Configuration();
  @Before public void setUp(){
    conf.set(HiveConf.ConfVars.HIVE_BLOBSTORE_SUPPORTED_SCHEMES.varname,"s3a,swift");
    conf.setBoolean(HiveConf.ConfVars.HIVE_BLOBSTORE_USE_BLOBSTORE_AS_SCRATCHDIR.varname,false);
  }
  @Test public void testValidAndInvalidPaths() throws IOException {
    assertTrue(isBlobStoragePath(conf,new Path("s3a://bucket/path")));
    assertTrue(isBlobStoragePath(conf,new Path("swift://bucket/path")));
    assertFalse(isBlobStoragePath(conf,new Path("/tmp/a-path")));
    assertFalse(isBlobStoragePath(conf,new Path("s3fs://tmp/file")));
    assertFalse(isBlobStoragePath(conf,null));
    assertFalse(isBlobStorageFileSystem(conf,null));
    assertFalse(isBlobStoragePath(conf,new Path(URI.create(""))));
  }
  @Test public void testValidAndInvalidFileSystems(){
    FileSystem fs=mock(FileSystem.class);
    doReturn("s3a").when(fs).getScheme();
    assertTrue(isBlobStorageFileSystem(conf,fs));
    doReturn("swift").when(fs).getScheme();
    assertTrue(isBlobStorageFileSystem(conf,fs));
    doReturn("hdfs").when(fs).getScheme();
    assertFalse(isBlobStorageFileSystem(conf,fs));
    doReturn("").when(fs).getScheme();
    assertFalse(isBlobStorageFileSystem(conf,fs));
    assertFalse(isBlobStorageFileSystem(conf,null));
  }
  @Test public void testValidAndInvalidSchemes(){
    assertTrue(isBlobStorageScheme(conf,"s3a"));
    assertTrue(isBlobStorageScheme(conf,"swift"));
    assertFalse(isBlobStorageScheme(conf,"hdfs"));
    assertFalse(isBlobStorageScheme(conf,""));
    assertFalse(isBlobStorageScheme(conf,null));
  }
}
