public class TestVectorMapJoinFastLongHashMultiSet extends CommonFastHashTable {
  @Test public void testOneKey() throws Exception {
    random=new Random(458);
    VectorMapJoinFastLongHashMultiSet map=new VectorMapJoinFastLongHashMultiSet(false,false,HashTableKeyType.LONG,CAPACITY,LOAD_FACTOR,WB_SIZE,-1);
    VerifyFastLongHashMultiSet verifyTable=new VerifyFastLongHashMultiSet();
    long key=random.nextLong();
    map.testPutRow(key);
    verifyTable.add(key);
    verifyTable.verify(map);
    map.testPutRow(key);
    verifyTable.add(key);
    verifyTable.verify(map);
    map.testPutRow(key);
    verifyTable.add(key);
    verifyTable.verify(map);
  }
  @Test public void testMultipleKeysSingleValue() throws Exception {
    random=new Random(8000);
    VectorMapJoinFastLongHashMultiSet map=new VectorMapJoinFastLongHashMultiSet(false,false,HashTableKeyType.LONG,CAPACITY,LOAD_FACTOR,WB_SIZE,-1);
    VerifyFastLongHashMultiSet verifyTable=new VerifyFastLongHashMultiSet();
    int keyCount=100 + random.nextInt(1000);
    for (int i=0; i < keyCount; i++) {
      long key;
      while (true) {
        key=random.nextLong();
        if (!verifyTable.contains(key)) {
          break;
        }
      }
      map.testPutRow(key);
      verifyTable.add(key);
    }
    verifyTable.verify(map);
  }
  @Test public void testGetNonExistent() throws Exception {
    random=new Random(4000);
    VectorMapJoinFastLongHashMultiSet map=new VectorMapJoinFastLongHashMultiSet(false,false,HashTableKeyType.LONG,CAPACITY,LOAD_FACTOR,WB_SIZE,-1);
    VerifyFastLongHashMultiSet verifyTable=new VerifyFastLongHashMultiSet();
    long key1=random.nextLong();
    map.testPutRow(key1);
    verifyTable.add(key1);
    verifyTable.verify(map);
    long key2=key1+=1;
    VectorMapJoinHashMultiSetResult hashMultiSetResult=map.createHashMultiSetResult();
    JoinUtil.JoinResult joinResult=map.contains(key2,hashMultiSetResult);
    assertTrue(joinResult == JoinUtil.JoinResult.NOMATCH);
    assertEquals(hashMultiSetResult.count(),0);
    map.testPutRow(key2);
    verifyTable.add(key2);
    verifyTable.verify(map);
    long key3=key2+=1;
    hashMultiSetResult=map.createHashMultiSetResult();
    joinResult=map.contains(key3,hashMultiSetResult);
    assertTrue(joinResult == JoinUtil.JoinResult.NOMATCH);
    assertEquals(hashMultiSetResult.count(),0);
  }
  @Test public void testFullMap() throws Exception {
    random=new Random(25000);
    VectorMapJoinFastLongHashMultiSet map=new VectorMapJoinFastLongHashMultiSet(false,false,HashTableKeyType.LONG,CAPACITY,1f,WB_SIZE,-1);
    VerifyFastLongHashMultiSet verifyTable=new VerifyFastLongHashMultiSet();
    for (int i=0; i < CAPACITY; i++) {
      long key;
      while (true) {
        key=random.nextLong();
        if (!verifyTable.contains(key)) {
          break;
        }
      }
      map.testPutRow(key);
      verifyTable.add(key);
    }
    verifyTable.verify(map);
    long anotherKey;
    while (true) {
      anotherKey=random.nextLong();
      if (!verifyTable.contains(anotherKey)) {
        break;
      }
    }
    VectorMapJoinHashMultiSetResult hashMultiSetResult=map.createHashMultiSetResult();
    JoinUtil.JoinResult joinResult=map.contains(anotherKey,hashMultiSetResult);
    assertTrue(joinResult == JoinUtil.JoinResult.NOMATCH);
  }
  @Test public void testExpand() throws Exception {
    random=new Random(30000);
    VectorMapJoinFastLongHashMultiSet map=new VectorMapJoinFastLongHashMultiSet(false,false,HashTableKeyType.LONG,1,0.0000001f,WB_SIZE,-1);
    VerifyFastLongHashMultiSet verifyTable=new VerifyFastLongHashMultiSet();
    for (int i=0; i < 18; ++i) {
      long key;
      while (true) {
        key=random.nextLong();
        if (!verifyTable.contains(key)) {
          break;
        }
      }
      map.testPutRow(key);
      verifyTable.add(key);
    }
    verifyTable.verify(map);
  }
  public void addAndVerifyMultipleKeyMultipleValue(  int keyCount,  VectorMapJoinFastLongHashMultiSet map,  VerifyFastLongHashMultiSet verifyTable) throws HiveException, IOException {
    for (int i=0; i < keyCount; i++) {
      byte[] value=new byte[generateLargeCount() - 1];
      random.nextBytes(value);
      if (random.nextBoolean() || verifyTable.getCount() == 0) {
        long key;
        while (true) {
          key=random.nextLong();
          if (!verifyTable.contains(key)) {
            break;
          }
        }
        map.testPutRow(key);
        verifyTable.add(key);
        verifyTable.verify(map);
      }
 else {
        long randomExistingKey=verifyTable.addRandomExisting(value,random);
        map.testPutRow(randomExistingKey);
      }
      verifyTable.verify(map);
    }
  }
  @Test public void testMultipleKeysMultipleValue() throws Exception {
    random=new Random(333);
    VectorMapJoinFastLongHashMultiSet map=new VectorMapJoinFastLongHashMultiSet(false,false,HashTableKeyType.LONG,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastLongHashMultiSet verifyTable=new VerifyFastLongHashMultiSet();
    int keyCount=1000;
    addAndVerifyMultipleKeyMultipleValue(keyCount,map,verifyTable);
  }
  @Test public void testLargeAndExpand() throws Exception {
    random=new Random(790);
    VectorMapJoinFastLongHashMultiSet map=new VectorMapJoinFastLongHashMultiSet(false,false,HashTableKeyType.LONG,MODERATE_CAPACITY,LOAD_FACTOR,MODERATE_WB_SIZE,-1);
    VerifyFastLongHashMultiSet verifyTable=new VerifyFastLongHashMultiSet();
    int keyCount=1000;
    addAndVerifyMultipleKeyMultipleValue(keyCount,map,verifyTable);
  }
}
