@RunWith(MockitoJUnitRunner.class) public class TestUserSearchFilter {
  private FilterFactory factory;
  private HiveConf conf;
  @Mock private DirSearch search;
  @Before public void setup(){
    conf=new HiveConf();
    factory=new UserSearchFilterFactory();
  }
  @Test public void testFactoryWhenNoGroupOrUserFilters(){
    assertNull(factory.getInstance(conf));
  }
  @Test public void testFactoryWhenGroupFilter(){
    conf.setVar(HiveConf.ConfVars.HIVE_SERVER2_PLAIN_LDAP_GROUPFILTER,"Grp1,Grp2");
    assertNotNull(factory.getInstance(conf));
  }
  @Test public void testFactoryWhenUserFilter(){
    conf.setVar(HiveConf.ConfVars.HIVE_SERVER2_PLAIN_LDAP_USERFILTER,"User1,User2");
    assertNotNull(factory.getInstance(conf));
  }
  @Test public void testApplyPositive() throws AuthenticationException, NamingException, IOException {
    conf.setVar(HiveConf.ConfVars.HIVE_SERVER2_PLAIN_LDAP_USERFILTER,"User1");
    Filter filter=factory.getInstance(conf);
    when(search.findUserDn(anyString())).thenReturn("cn=User1,ou=People,dc=example,dc=com");
    filter.apply(search,"User1");
  }
  @Test(expected=AuthenticationException.class) public void testApplyWhenNamingException() throws AuthenticationException, NamingException, IOException {
    conf.setVar(HiveConf.ConfVars.HIVE_SERVER2_PLAIN_LDAP_USERFILTER,"User1");
    Filter filter=factory.getInstance(conf);
    when(search.findUserDn(anyString())).thenThrow(NamingException.class);
    filter.apply(search,"User3");
  }
  @Test(expected=AuthenticationException.class) public void testApplyWhenNotFound() throws AuthenticationException, NamingException, IOException {
    conf.setVar(HiveConf.ConfVars.HIVE_SERVER2_PLAIN_LDAP_USERFILTER,"User1");
    Filter filter=factory.getInstance(conf);
    when(search.findUserDn(anyString())).thenReturn(null);
    filter.apply(search,"User3");
  }
}
