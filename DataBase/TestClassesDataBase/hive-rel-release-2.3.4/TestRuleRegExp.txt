public class TestRuleRegExp {
public class TestNode implements Node {
    private String name;
    TestNode(    String name){
      this.name=name;
    }
    @Override public List<? extends Node> getChildren(){
      return null;
    }
    @Override public String getName(){
      return name;
    }
  }
  @Test public void testPatternWithoutWildCardChar(){
    String patternStr=ReduceSinkOperator.getOperatorName() + "%" + SelectOperator.getOperatorName()+ "%"+ FileSinkOperator.getOperatorName()+ "%";
    RuleRegExp rule1=new RuleRegExp("R1",patternStr);
    assertEquals(rule1.rulePatternIsValidWithoutWildCardChar(),true);
    assertEquals(rule1.rulePatternIsValidWithWildCardChar(),false);
    Stack<Node> ns1=new Stack<Node>();
    ns1.push(new TestNode(ReduceSinkOperator.getOperatorName()));
    ns1.push(new TestNode(SelectOperator.getOperatorName()));
    ns1.push(new TestNode(FileSinkOperator.getOperatorName()));
    try {
      assertEquals(rule1.cost(ns1),patternStr.length());
    }
 catch (    SemanticException e) {
      fail(e.getMessage());
    }
    Stack<Node> ns2=new Stack<Node>();
    ns2.push(new TestNode(ReduceSinkOperator.getOperatorName()));
    ns1.push(new TestNode(TableScanOperator.getOperatorName()));
    ns1.push(new TestNode(FileSinkOperator.getOperatorName()));
    try {
      assertEquals(rule1.cost(ns2),-1);
    }
 catch (    SemanticException e) {
      fail(e.getMessage());
    }
  }
  @Test public void testPatternWithWildCardChar(){
    RuleRegExp rule1=new RuleRegExp("R1","(" + TableScanOperator.getOperatorName() + "%"+ FilterOperator.getOperatorName()+ "%)|("+ TableScanOperator.getOperatorName()+ "%"+ FileSinkOperator.getOperatorName()+ "%)");
    assertEquals(rule1.rulePatternIsValidWithoutWildCardChar(),false);
    assertEquals(rule1.rulePatternIsValidWithWildCardChar(),true);
    Stack<Node> ns1=new Stack<Node>();
    ns1.push(new TestNode(TableScanOperator.getOperatorName()));
    ns1.push(new TestNode(FilterOperator.getOperatorName()));
    Stack<Node> ns2=new Stack<Node>();
    ns2.push(new TestNode(TableScanOperator.getOperatorName()));
    ns2.push(new TestNode(FileSinkOperator.getOperatorName()));
    try {
      assertNotEquals(rule1.cost(ns1),-1);
      assertNotEquals(rule1.cost(ns2),-1);
    }
 catch (    SemanticException e) {
      fail(e.getMessage());
    }
    Stack<Node> ns3=new Stack<Node>();
    ns3.push(new TestNode(ReduceSinkOperator.getOperatorName()));
    ns3.push(new TestNode(ReduceSinkOperator.getOperatorName()));
    ns3.push(new TestNode(FileSinkOperator.getOperatorName()));
    try {
      assertEquals(rule1.cost(ns3),-1);
    }
 catch (    SemanticException e) {
      fail(e.getMessage());
    }
  }
}
