public class TestHBaseAggregateStatsCache {
  private static final Logger LOG=LoggerFactory.getLogger(TestHBaseAggregateStatsCache.class.getName());
  @Mock HTableInterface htable;
  private HBaseStore store;
  SortedMap<String,Cell> rows=new TreeMap<>();
  @Before public void before() throws IOException {
    MockitoAnnotations.initMocks(this);
    HiveConf conf=new HiveConf();
    conf.setBoolean(HBaseReadWrite.NO_CACHE_CONF,true);
    store=MockUtils.init(conf,htable,rows);
    store.backdoor().getStatsCache().resetCounters();
  }
private static interface Checker {
    void checkStats(    AggrStats aggrStats) throws Exception ;
  }
  @Test public void allWithStats() throws Exception {
    String dbName="default";
    String tableName="hit";
    List<String> partVals1=Arrays.asList("today");
    List<String> partVals2=Arrays.asList("yesterday");
    long now=System.currentTimeMillis();
    List<FieldSchema> cols=new ArrayList<>();
    cols.add(new FieldSchema("col1","boolean","nocomment"));
    SerDeInfo serde=new SerDeInfo("serde","seriallib",null);
    StorageDescriptor sd=new StorageDescriptor(cols,"file:/tmp","input","output",false,0,serde,null,null,Collections.<String,String>emptyMap());
    List<FieldSchema> partCols=new ArrayList<>();
    partCols.add(new FieldSchema("ds","string",""));
    Table table=new Table(tableName,dbName,"me",(int)now,(int)now,0,sd,partCols,Collections.<String,String>emptyMap(),null,null,null);
    store.createTable(table);
    for (    List<String> partVals : Arrays.asList(partVals1,partVals2)) {
      StorageDescriptor psd=new StorageDescriptor(sd);
      psd.setLocation("file:/tmp/default/hit/ds=" + partVals.get(0));
      Partition part=new Partition(partVals,dbName,tableName,(int)now,(int)now,psd,Collections.<String,String>emptyMap());
      store.addPartition(part);
      ColumnStatistics cs=new ColumnStatistics();
      ColumnStatisticsDesc desc=new ColumnStatisticsDesc(false,dbName,tableName);
      desc.setLastAnalyzed(now);
      desc.setPartName("ds=" + partVals.get(0));
      cs.setStatsDesc(desc);
      ColumnStatisticsObj obj=new ColumnStatisticsObj();
      obj.setColName("col1");
      obj.setColType("boolean");
      ColumnStatisticsData data=new ColumnStatisticsData();
      BooleanColumnStatsData bcsd=new BooleanColumnStatsData();
      bcsd.setNumFalses(10);
      bcsd.setNumTrues(20);
      bcsd.setNumNulls(30);
      data.setBooleanStats(bcsd);
      obj.setStatsData(data);
      cs.addToStatsObj(obj);
      store.updatePartitionColumnStatistics(cs,partVals);
    }
    Checker statChecker=new Checker(){
      @Override public void checkStats(      AggrStats aggrStats) throws Exception {
        Assert.assertEquals(2,aggrStats.getPartsFound());
        Assert.assertEquals(1,aggrStats.getColStatsSize());
        ColumnStatisticsObj cso=aggrStats.getColStats().get(0);
        Assert.assertEquals("col1",cso.getColName());
        Assert.assertEquals("boolean",cso.getColType());
        BooleanColumnStatsData bcsd=cso.getStatsData().getBooleanStats();
        Assert.assertEquals(20,bcsd.getNumFalses());
        Assert.assertEquals(40,bcsd.getNumTrues());
        Assert.assertEquals(60,bcsd.getNumNulls());
      }
    }
;
    AggrStats aggrStats=store.get_aggr_stats_for(dbName,tableName,Arrays.asList("ds=today","ds=yesterday"),Arrays.asList("col1"));
    statChecker.checkStats(aggrStats);
    Assert.assertEquals(0,store.backdoor().getStatsCache().hbaseHits.getCnt());
    Assert.assertEquals(1,store.backdoor().getStatsCache().totalGets.getCnt());
    Assert.assertEquals(1,store.backdoor().getStatsCache().misses.getCnt());
    aggrStats=store.get_aggr_stats_for(dbName,tableName,Arrays.asList("ds=yesterday","ds=today"),Arrays.asList("col1"));
    statChecker.checkStats(aggrStats);
    Assert.assertEquals(0,store.backdoor().getStatsCache().hbaseHits.getCnt());
    Assert.assertEquals(2,store.backdoor().getStatsCache().totalGets.getCnt());
    Assert.assertEquals(1,store.backdoor().getStatsCache().misses.getCnt());
  }
  @Test public void noneWithStats() throws Exception {
    String dbName="default";
    String tableName="nws";
    List<String> partVals1=Arrays.asList("today");
    List<String> partVals2=Arrays.asList("yesterday");
    long now=System.currentTimeMillis();
    List<FieldSchema> cols=new ArrayList<>();
    cols.add(new FieldSchema("col1","boolean","nocomment"));
    SerDeInfo serde=new SerDeInfo("serde","seriallib",null);
    StorageDescriptor sd=new StorageDescriptor(cols,"file:/tmp","input","output",false,0,serde,null,null,Collections.<String,String>emptyMap());
    List<FieldSchema> partCols=new ArrayList<>();
    partCols.add(new FieldSchema("ds","string",""));
    Table table=new Table(tableName,dbName,"me",(int)now,(int)now,0,sd,partCols,Collections.<String,String>emptyMap(),null,null,null);
    store.createTable(table);
    for (    List<String> partVals : Arrays.asList(partVals1,partVals2)) {
      StorageDescriptor psd=new StorageDescriptor(sd);
      psd.setLocation("file:/tmp/default/nws/ds=" + partVals.get(0));
      Partition part=new Partition(partVals,dbName,tableName,(int)now,(int)now,psd,Collections.<String,String>emptyMap());
      store.addPartition(part);
    }
    Checker statChecker=new Checker(){
      @Override public void checkStats(      AggrStats aggrStats) throws Exception {
        Assert.assertEquals(0,aggrStats.getPartsFound());
      }
    }
;
    AggrStats aggrStats=store.get_aggr_stats_for(dbName,tableName,Arrays.asList("ds=today","ds=yesterday"),Arrays.asList("col1"));
    statChecker.checkStats(aggrStats);
  }
  @Test public void someNonexistentPartitions() throws Exception {
    String dbName="default";
    String tableName="snp";
    List<String> partVals1=Arrays.asList("today");
    List<String> partVals2=Arrays.asList("yesterday");
    long now=System.currentTimeMillis();
    List<FieldSchema> cols=new ArrayList<>();
    cols.add(new FieldSchema("col1","boolean","nocomment"));
    SerDeInfo serde=new SerDeInfo("serde","seriallib",null);
    StorageDescriptor sd=new StorageDescriptor(cols,"file:/tmp","input","output",false,0,serde,null,null,Collections.<String,String>emptyMap());
    List<FieldSchema> partCols=new ArrayList<>();
    partCols.add(new FieldSchema("ds","string",""));
    Table table=new Table(tableName,dbName,"me",(int)now,(int)now,0,sd,partCols,Collections.<String,String>emptyMap(),null,null,null);
    store.createTable(table);
    StorageDescriptor psd=new StorageDescriptor(sd);
    psd.setLocation("file:/tmp/default/hit/ds=" + partVals1.get(0));
    Partition part=new Partition(partVals1,dbName,tableName,(int)now,(int)now,psd,Collections.<String,String>emptyMap());
    store.addPartition(part);
    ColumnStatistics cs=new ColumnStatistics();
    ColumnStatisticsDesc desc=new ColumnStatisticsDesc(false,dbName,tableName);
    desc.setLastAnalyzed(now);
    desc.setPartName("ds=" + partVals1.get(0));
    cs.setStatsDesc(desc);
    ColumnStatisticsObj obj=new ColumnStatisticsObj();
    obj.setColName("col1");
    obj.setColType("double");
    ColumnStatisticsData data=new ColumnStatisticsData();
    DoubleColumnStatsData dcsd=new DoubleColumnStatsData();
    dcsd.setHighValue(1000.2342343);
    dcsd.setLowValue(-20.1234213423);
    dcsd.setNumNulls(30);
    dcsd.setNumDVs(12342);
    data.setDoubleStats(dcsd);
    obj.setStatsData(data);
    cs.addToStatsObj(obj);
    store.updatePartitionColumnStatistics(cs,partVals1);
    Checker statChecker=new Checker(){
      @Override public void checkStats(      AggrStats aggrStats) throws Exception {
        Assert.assertEquals(1,aggrStats.getPartsFound());
        Assert.assertEquals(1,aggrStats.getColStatsSize());
        ColumnStatisticsObj cso=aggrStats.getColStats().get(0);
        Assert.assertEquals("col1",cso.getColName());
        Assert.assertEquals("double",cso.getColType());
        DoubleColumnStatsData dcsd=cso.getStatsData().getDoubleStats();
        Assert.assertEquals(1000.23,dcsd.getHighValue(),0.01);
        Assert.assertEquals(-20.12,dcsd.getLowValue(),0.01);
        Assert.assertEquals(30,dcsd.getNumNulls());
        Assert.assertEquals(12342,dcsd.getNumDVs());
      }
    }
;
    AggrStats aggrStats=store.get_aggr_stats_for(dbName,tableName,Arrays.asList("ds=today","ds=yesterday"),Arrays.asList("col1"));
    statChecker.checkStats(aggrStats);
    Assert.assertEquals(0,store.backdoor().getStatsCache().hbaseHits.getCnt());
    Assert.assertEquals(1,store.backdoor().getStatsCache().totalGets.getCnt());
    Assert.assertEquals(1,store.backdoor().getStatsCache().misses.getCnt());
    aggrStats=store.get_aggr_stats_for(dbName,tableName,Arrays.asList("ds=yesterday","ds=today"),Arrays.asList("col1"));
    statChecker.checkStats(aggrStats);
    Assert.assertEquals(0,store.backdoor().getStatsCache().hbaseHits.getCnt());
    Assert.assertEquals(2,store.backdoor().getStatsCache().totalGets.getCnt());
    Assert.assertEquals(1,store.backdoor().getStatsCache().misses.getCnt());
  }
  @Test public void nonexistentPartitions() throws Exception {
    String dbName="default";
    String tableName="nep";
    List<String> partVals1=Arrays.asList("today");
    List<String> partVals2=Arrays.asList("yesterday");
    long now=System.currentTimeMillis();
    List<FieldSchema> cols=new ArrayList<>();
    cols.add(new FieldSchema("col1","boolean","nocomment"));
    SerDeInfo serde=new SerDeInfo("serde","seriallib",null);
    StorageDescriptor sd=new StorageDescriptor(cols,"file:/tmp","input","output",false,0,serde,null,null,Collections.<String,String>emptyMap());
    List<FieldSchema> partCols=new ArrayList<>();
    partCols.add(new FieldSchema("ds","string",""));
    Table table=new Table(tableName,dbName,"me",(int)now,(int)now,0,sd,partCols,Collections.<String,String>emptyMap(),null,null,null);
    store.createTable(table);
    Checker statChecker=new Checker(){
      @Override public void checkStats(      AggrStats aggrStats) throws Exception {
        Assert.assertEquals(0,aggrStats.getPartsFound());
      }
    }
;
    AggrStats aggrStats=store.get_aggr_stats_for(dbName,tableName,Arrays.asList("ds=today","ds=yesterday"),Arrays.asList("col1"));
    statChecker.checkStats(aggrStats);
    Assert.assertEquals(0,store.backdoor().getStatsCache().hbaseHits.getCnt());
    Assert.assertEquals(1,store.backdoor().getStatsCache().totalGets.getCnt());
    Assert.assertEquals(1,store.backdoor().getStatsCache().misses.getCnt());
  }
}
