public class TestCustomAuthentication {
  private static HiveServer2 hiveserver2;
  private static HiveConf hiveConf;
  private static byte[] hiveConfBackup;
  @BeforeClass public static void setUp() throws Exception {
    hiveConf=new HiveConf();
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    hiveConf.writeXml(baos);
    baos.close();
    hiveConfBackup=baos.toByteArray();
    hiveConf.set("hive.server2.authentication","CUSTOM");
    hiveConf.set("hive.server2.custom.authentication.class","org.apache.hive.service.auth.TestCustomAuthentication$SimpleAuthenticationProviderImpl");
    FileOutputStream fos=new FileOutputStream(new File(hiveConf.getHiveSiteLocation().toURI()));
    hiveConf.writeXml(fos);
    fos.close();
    hiveserver2=new HiveServer2();
    hiveserver2.init(hiveConf);
    hiveserver2.start();
    Thread.sleep(1000);
    System.out.println("hiveServer2 start ......");
  }
  @AfterClass public static void tearDown() throws Exception {
    if (hiveConf != null && hiveConfBackup != null) {
      FileOutputStream fos=new FileOutputStream(new File(hiveConf.getHiveSiteLocation().toURI()));
      fos.write(hiveConfBackup);
      fos.close();
    }
    if (hiveserver2 != null) {
      hiveserver2.stop();
      hiveserver2=null;
    }
    Thread.sleep(1000);
    System.out.println("hiveServer2 stop ......");
  }
  @Test public void testCustomAuthentication() throws Exception {
    String url="jdbc:hive2://localhost:10000/default";
    Class.forName("org.apache.hive.jdbc.HiveDriver");
    try {
      DriverManager.getConnection(url,"wronguser","pwd");
      Assert.fail("Expected Exception");
    }
 catch (    SQLException e) {
      Assert.assertNotNull(e.getMessage());
      Assert.assertTrue(e.getMessage(),e.getMessage().contains("Peer indicated failure: Error validating the login"));
    }
    Connection connection=DriverManager.getConnection(url,"hiveuser","hive");
    connection.close();
    System.out.println(">>> PASSED testCustomAuthentication");
  }
public static class SimpleAuthenticationProviderImpl implements PasswdAuthenticationProvider {
    private Map<String,String> userMap=new HashMap<String,String>();
    public SimpleAuthenticationProviderImpl(){
      init();
    }
    private void init(){
      userMap.put("hiveuser","hive");
    }
    @Override public void Authenticate(    String user,    String password) throws AuthenticationException {
      if (!userMap.containsKey(user)) {
        throw new AuthenticationException("Invalid user : " + user);
      }
      if (!userMap.get(user).equals(password)) {
        throw new AuthenticationException("Invalid passwd : " + password);
      }
    }
  }
}
