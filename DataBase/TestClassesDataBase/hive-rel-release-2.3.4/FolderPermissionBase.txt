/** 
 * This test the flag 'hive.warehouse.subdir.inherit.perms'.
 */
public abstract class FolderPermissionBase {
  protected static HiveConf conf;
  protected static Driver driver;
  protected static String dataFileDir;
  protected static Path dataFilePath;
  protected static FileSystem fs;
  protected static Path warehouseDir;
  protected static Path baseDfsDir;
  protected static final PathFilter hiddenFileFilter=new PathFilter(){
    public boolean accept(    Path p){
      String name=p.getName();
      return !name.startsWith("_") && !name.startsWith(".");
    }
  }
;
  public abstract void setPermission(  String locn,  int permIndex) throws Exception ;
  public abstract void verifyPermission(  String locn,  int permIndex) throws Exception ;
  public void setPermission(  String locn) throws Exception {
    setPermission(locn,0);
  }
  public void verifyPermission(  String locn) throws Exception {
    verifyPermission(locn,0);
  }
  public static void baseSetup() throws Exception {
    MiniDFSShim dfs=ShimLoader.getHadoopShims().getMiniDfs(conf,4,true,null);
    fs=dfs.getFileSystem();
    baseDfsDir=new Path(new Path(fs.getUri()),"/base");
    fs.mkdirs(baseDfsDir);
    warehouseDir=new Path(baseDfsDir,"warehouse");
    fs.mkdirs(warehouseDir);
    conf.setVar(ConfVars.METASTOREWAREHOUSE,warehouseDir.toString());
    dataFileDir=conf.get("test.data.files").replace('\\','/').replace("c:","").replace("C:","").replace("D:","").replace("d:","");
    dataFilePath=new Path(dataFileDir,"kv1.txt");
    Path scratchDir=new Path(baseDfsDir,"scratchdir");
    conf.setVar(HiveConf.ConfVars.SCRATCHDIR,scratchDir.toString());
    conf.setBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
    conf.setBoolVar(HiveConf.ConfVars.HIVE_WAREHOUSE_SUBDIR_INHERIT_PERMS,true);
    conf.setVar(HiveConf.ConfVars.DYNAMICPARTITIONINGMODE,"nonstrict");
    int port=MetaStoreUtils.findFreePort();
    MetaStoreUtils.startMetaStore(port,ShimLoader.getHadoopThriftAuthBridge());
    SessionState.start(new CliSessionState(conf));
    driver=new Driver(conf);
    setupDataTable();
  }
  private static void setupDataTable() throws Exception {
    CommandProcessorResponse ret=driver.run("DROP TABLE IF EXISTS mysrc");
    Assert.assertEquals(0,ret.getResponseCode());
    ret=driver.run("CREATE TABLE mysrc (key STRING, value STRING) PARTITIONED BY (part1 string, part2 string) STORED AS TEXTFILE");
    Assert.assertEquals(0,ret.getResponseCode());
    ret=driver.run("LOAD DATA LOCAL INPATH '" + dataFilePath + "' INTO TABLE mysrc PARTITION (part1='1',part2='1')");
    Assert.assertEquals(0,ret.getResponseCode());
    ret=driver.run("LOAD DATA LOCAL INPATH '" + dataFilePath + "' INTO TABLE mysrc PARTITION (part1='2',part2='2')");
    Assert.assertEquals(0,ret.getResponseCode());
  }
  @Before public void setupBeforeTest() throws Exception {
    driver.run("USE default");
  }
  @Test public void testCreateDb() throws Exception {
    String testDb="mydb";
    String tableName="createtable";
    setPermission(warehouseDir.toString());
    verifyPermission(warehouseDir.toString());
    CommandProcessorResponse ret=driver.run("CREATE DATABASE " + testDb);
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + testDb+ ".db");
    verifyPermission(warehouseDir + "/" + testDb+ ".db");
    ret=driver.run("USE " + testDb);
    Assert.assertEquals(0,ret.getResponseCode());
    ret=driver.run("CREATE TABLE " + tableName + " (key string, value string)");
    Assert.assertEquals(0,ret.getResponseCode());
    verifyPermission(warehouseDir + "/" + testDb+ ".db/"+ tableName);
    ret=driver.run("insert into table " + tableName + " select key,value from default.mysrc");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + testDb+ ".db/"+ tableName);
    verifyPermission(warehouseDir + "/" + testDb+ ".db/"+ tableName);
    Assert.assertTrue(listStatus(warehouseDir + "/" + testDb+ ".db/"+ tableName).size() > 0);
    for (    String child : listStatus(warehouseDir + "/" + testDb+ ".db/"+ tableName)) {
      verifyPermission(child);
    }
    ret=driver.run("USE default");
    Assert.assertEquals(0,ret.getResponseCode());
    fs.delete(warehouseDir,true);
    fs.mkdirs(warehouseDir);
    Assert.assertEquals(listStatus(warehouseDir.toString()).size(),0);
    setupDataTable();
  }
  @Test public void testCreateTable() throws Exception {
    String testDb="mydb2";
    String tableName="createtable";
    CommandProcessorResponse ret=driver.run("CREATE DATABASE " + testDb);
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + testDb+ ".db");
    setPermission(warehouseDir + "/" + testDb+ ".db");
    verifyPermission(warehouseDir + "/" + testDb+ ".db");
    ret=driver.run("USE " + testDb);
    Assert.assertEquals(0,ret.getResponseCode());
    ret=driver.run("CREATE TABLE " + tableName + " (key string, value string)");
    Assert.assertEquals(0,ret.getResponseCode());
    verifyPermission(warehouseDir + "/" + testDb+ ".db/"+ tableName);
    ret=driver.run("insert into table " + tableName + " select key,value from default.mysrc");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + testDb+ ".db/"+ tableName);
    verifyPermission(warehouseDir + "/" + testDb+ ".db/"+ tableName);
    Assert.assertTrue(listStatus(warehouseDir + "/" + testDb+ ".db/"+ tableName).size() > 0);
    for (    String child : listStatus(warehouseDir + "/" + testDb+ ".db/"+ tableName)) {
      verifyPermission(child);
    }
    ret=driver.run("USE default");
    Assert.assertEquals(0,ret.getResponseCode());
  }
  @Test public void testInsertNonPartTable() throws Exception {
    String tableName="nonpart";
    CommandProcessorResponse ret=driver.run("CREATE TABLE " + tableName + " (key string, value string)");
    Assert.assertEquals(0,ret.getResponseCode());
    String tableLoc=warehouseDir + "/" + tableName;
    assertExistence(warehouseDir + "/" + tableName);
    setPermission(warehouseDir + "/" + tableName);
    ret=driver.run("insert into table " + tableName + " select key,value from mysrc");
    Assert.assertEquals(0,ret.getResponseCode());
    verifyPermission(warehouseDir + "/" + tableName);
    Assert.assertTrue(listStatus(tableLoc).size() > 0);
    for (    String child : listStatus(tableLoc)) {
      verifyPermission(child);
    }
    setPermission(warehouseDir + "/" + tableName,1);
    ret=driver.run("insert overwrite table " + tableName + " select key,value from mysrc");
    Assert.assertEquals(0,ret.getResponseCode());
    verifyPermission(warehouseDir + "/" + tableName,1);
    Assert.assertTrue(listStatus(tableLoc).size() > 0);
    for (    String child : listStatus(tableLoc)) {
      verifyPermission(child,1);
    }
  }
  @Test public void testInsertStaticSinglePartition() throws Exception {
    String tableName="singlestaticpart";
    CommandProcessorResponse ret=driver.run("CREATE TABLE " + tableName + " (key string, value string) partitioned by (part1 string)");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + tableName);
    setPermission(warehouseDir + "/" + tableName);
    ret=driver.run("insert into table " + tableName + " partition(part1='1') select key,value from mysrc where part1='1' and part2='1'");
    Assert.assertEquals(0,ret.getResponseCode());
    verifyPermission(warehouseDir + "/" + tableName);
    verifyPermission(warehouseDir + "/" + tableName+ "/part1=1");
    Assert.assertTrue(listStatus(warehouseDir + "/" + tableName+ "/part1=1").size() > 0);
    for (    String child : listStatus(warehouseDir + "/" + tableName+ "/part1=1")) {
      verifyPermission(child);
    }
    setPermission(warehouseDir + "/" + tableName,1);
    setPermission(warehouseDir + "/" + tableName+ "/part1=1",1);
    ret=driver.run("insert overwrite table " + tableName + " partition(part1='1') select key,value from mysrc where part1='1' and part2='1'");
    Assert.assertEquals(0,ret.getResponseCode());
    verifyPermission(warehouseDir + "/" + tableName,1);
    verifyPermission(warehouseDir + "/" + tableName+ "/part1=1",1);
    Assert.assertTrue(listStatus(warehouseDir + "/" + tableName+ "/part1=1").size() > 0);
    for (    String child : listStatus(warehouseDir + "/" + tableName+ "/part1=1")) {
      verifyPermission(child,1);
    }
  }
  @Test public void testInsertStaticDualPartition() throws Exception {
    String tableName="dualstaticpart";
    CommandProcessorResponse ret=driver.run("CREATE TABLE " + tableName + " (key string, value string) partitioned by (part1 string, part2 string)");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + tableName);
    setPermission(warehouseDir + "/" + tableName);
    ret=driver.run("insert into table " + tableName + " partition(part1='1', part2='1') select key,value from mysrc where part1='1' and part2='1'");
    Assert.assertEquals(0,ret.getResponseCode());
    verifyPermission(warehouseDir + "/" + tableName);
    verifyPermission(warehouseDir + "/" + tableName+ "/part1=1");
    verifyPermission(warehouseDir + "/" + tableName+ "/part1=1/part2=1");
    Assert.assertTrue(listStatus(warehouseDir + "/" + tableName+ "/part1=1/part2=1").size() > 0);
    for (    String child : listStatus(warehouseDir + "/" + tableName+ "/part1=1/part2=1")) {
      verifyPermission(child);
    }
    setPermission(warehouseDir + "/" + tableName,1);
    setPermission(warehouseDir + "/" + tableName+ "/part1=1",1);
    setPermission(warehouseDir + "/" + tableName+ "/part1=1/part2=1",1);
    ret=driver.run("insert overwrite table " + tableName + " partition(part1='1', part2='1') select key,value from mysrc where part1='1' and part2='1'");
    Assert.assertEquals(0,ret.getResponseCode());
    verifyPermission(warehouseDir + "/" + tableName,1);
    verifyPermission(warehouseDir + "/" + tableName+ "/part1=1",1);
    verifyPermission(warehouseDir + "/" + tableName+ "/part1=1/part2=1",1);
    Assert.assertTrue(listStatus(warehouseDir + "/" + tableName+ "/part1=1/part2=1").size() > 0);
    for (    String child : listStatus(warehouseDir + "/" + tableName+ "/part1=1/part2=1")) {
      verifyPermission(child,1);
    }
  }
  @Test public void testInsertDualDynamicPartitions() throws Exception {
    String tableName="dualdynamicpart";
    CommandProcessorResponse ret=driver.run("CREATE TABLE " + tableName + " (key string, value string) partitioned by (part1 string, part2 string)");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + tableName);
    setPermission(warehouseDir + "/" + tableName,0);
    ret=driver.run("insert into table " + tableName + " partition (part1,part2) select key,value,part1,part2 from mysrc");
    Assert.assertEquals(0,ret.getResponseCode());
    verifyDualPartitionTable(warehouseDir + "/" + tableName,0);
    setDualPartitionTable(warehouseDir + "/" + tableName,1);
    ret=driver.run("insert overwrite table " + tableName + " partition (part1,part2) select key,value,part1,part2 from mysrc");
    Assert.assertEquals(0,ret.getResponseCode());
    verifyDualPartitionTable(warehouseDir + "/" + tableName,1);
  }
  @Test public void testInsertSingleDynamicPartition() throws Exception {
    String tableName="singledynamicpart";
    CommandProcessorResponse ret=driver.run("CREATE TABLE " + tableName + " (key string, value string) partitioned by (part1 string)");
    Assert.assertEquals(0,ret.getResponseCode());
    String tableLoc=warehouseDir + "/" + tableName;
    assertExistence(tableLoc);
    setPermission(tableLoc,0);
    ret=driver.run("insert into table " + tableName + " partition (part1) select key,value,part1 from mysrc");
    Assert.assertEquals(0,ret.getResponseCode());
    verifySinglePartition(tableLoc,0);
    setSinglePartition(tableLoc,1);
    ret=driver.run("insert overwrite table " + tableName + " partition (part1) select key,value,part1 from mysrc");
    Assert.assertEquals(0,ret.getResponseCode());
    verifySinglePartition(tableLoc,1);
    ret=driver.run("DROP TABLE " + tableName);
    Assert.assertEquals(0,ret.getResponseCode());
    ret=driver.run("CREATE TABLE " + tableName + " (key string, value string) partitioned by (part1 string)");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + tableName);
    setPermission(warehouseDir + "/" + tableName);
    ret=driver.run("insert overwrite table " + tableName + " partition (part1) select key,value,part1 from mysrc");
    Assert.assertEquals(0,ret.getResponseCode());
    verifySinglePartition(tableLoc,0);
  }
  @Test public void testPartition() throws Exception {
    String tableName="alterpart";
    CommandProcessorResponse ret=driver.run("CREATE TABLE " + tableName + " (key string, value string) partitioned by (part1 int, part2 int, part3 int)");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + tableName);
    setPermission(warehouseDir + "/" + tableName);
    ret=driver.run("insert into table " + tableName + " partition(part1='1',part2='1',part3='1') select key,value from mysrc");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + tableName);
    setPermission(warehouseDir + "/" + tableName,1);
    ret=driver.run("alter table " + tableName + " partition (part1='1',part2='1',part3='1') rename to partition (part1='2',part2='2',part3='2')");
    Assert.assertEquals(0,ret.getResponseCode());
    verifyPermission(warehouseDir + "/" + tableName+ "/part1=2",1);
    verifyPermission(warehouseDir + "/" + tableName+ "/part1=2/part2=2",1);
    verifyPermission(warehouseDir + "/" + tableName+ "/part1=2/part2=2/part3=2",1);
    Assert.assertTrue(listStatus(warehouseDir + "/" + tableName+ "/part1=2/part2=2/part3=2").size() > 0);
    for (    String child : listStatus(warehouseDir + "/" + tableName+ "/part1=2/part2=2/part3=2")) {
      verifyPermission(child,1);
    }
    String tableName2="alterpart2";
    ret=driver.run("CREATE TABLE " + tableName2 + " (key string, value string) partitioned by (part1 int, part2 int, part3 int)");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + tableName2);
    setPermission(warehouseDir + "/" + tableName2);
    ret=driver.run("alter table " + tableName2 + " exchange partition (part1='2',part2='2',part3='2') with table "+ tableName);
    Assert.assertEquals(0,ret.getResponseCode());
    verifyPermission(warehouseDir + "/" + tableName2+ "/part1=2",0);
    verifyPermission(warehouseDir + "/" + tableName2+ "/part1=2/part2=2",0);
    verifyPermission(warehouseDir + "/" + tableName2+ "/part1=2/part2=2/part3=2",1);
  }
  @Test public void testExternalTable() throws Exception {
    String tableName="externaltable";
    String myLocation=warehouseDir + "/myfolder";
    FileSystem fs=FileSystem.get(new URI(myLocation),conf);
    fs.mkdirs(new Path(myLocation));
    setPermission(myLocation);
    CommandProcessorResponse ret=driver.run("CREATE TABLE " + tableName + " (key string, value string) LOCATION '"+ myLocation+ "'");
    Assert.assertEquals(0,ret.getResponseCode());
    ret=driver.run("insert into table " + tableName + " select key,value from mysrc");
    Assert.assertEquals(0,ret.getResponseCode());
    Assert.assertTrue(listStatus(myLocation).size() > 0);
    for (    String child : listStatus(myLocation)) {
      verifyPermission(child);
    }
  }
  @Test public void testLoadLocal() throws Exception {
    String tableName="loadlocal";
    CommandProcessorResponse ret=driver.run("CREATE TABLE " + tableName + " (key string, value string)");
    Assert.assertEquals(0,ret.getResponseCode());
    String tableLoc=warehouseDir + "/" + tableName;
    assertExistence(warehouseDir + "/" + tableName);
    setPermission(warehouseDir + "/" + tableName);
    ret=driver.run("load data local inpath '" + dataFilePath + "' into table "+ tableName);
    Assert.assertEquals(0,ret.getResponseCode());
    Assert.assertTrue(listStatus(tableLoc).size() > 0);
    for (    String child : listStatus(tableLoc)) {
      verifyPermission(child);
    }
    setPermission(warehouseDir + "/" + tableName,1);
    for (    String child : listStatus(tableLoc)) {
      setPermission(child,1);
    }
    ret=driver.run("load data local inpath '" + dataFilePath + "' overwrite into table "+ tableName);
    Assert.assertEquals(0,ret.getResponseCode());
    Assert.assertTrue(listStatus(tableLoc).size() > 0);
    for (    String child : listStatus(tableLoc)) {
      verifyPermission(child,1);
    }
    tableName="loadlocalpartition";
    ret=driver.run("CREATE TABLE " + tableName + " (key string, value string) partitioned by (part1 int, part2 int)");
    Assert.assertEquals(0,ret.getResponseCode());
    tableLoc=warehouseDir + "/" + tableName;
    assertExistence(tableLoc);
    setPermission(tableLoc);
    ret=driver.run("LOAD DATA LOCAL INPATH '" + dataFilePath + "' INTO TABLE "+ tableName+ " PARTITION (part1='1',part2='1')");
    Assert.assertEquals(0,ret.getResponseCode());
    String partLoc=warehouseDir + "/" + tableName+ "/part1=1/part2=1";
    Assert.assertTrue(listStatus(partLoc).size() > 0);
    for (    String child : listStatus(partLoc)) {
      verifyPermission(child);
    }
    setPermission(tableLoc,1);
    setPermission(partLoc,1);
    for (    String child : listStatus(partLoc)) {
      setPermission(child,1);
    }
    ret=driver.run("LOAD DATA LOCAL INPATH '" + dataFilePath + "' OVERWRITE INTO TABLE "+ tableName+ " PARTITION (part1='1',part2='1')");
    Assert.assertEquals(0,ret.getResponseCode());
    Assert.assertTrue(listStatus(tableLoc).size() > 0);
    for (    String child : listStatus(partLoc)) {
      verifyPermission(child,1);
    }
  }
  @Test public void testLoad() throws Exception {
    String tableName="load";
    String location="/hdfsPath";
    fs.copyFromLocalFile(dataFilePath,new Path(location));
    CommandProcessorResponse ret=driver.run("CREATE TABLE " + tableName + " (key string, value string)");
    Assert.assertEquals(0,ret.getResponseCode());
    String tableLoc=warehouseDir + "/" + tableName;
    assertExistence(warehouseDir + "/" + tableName);
    setPermission(warehouseDir + "/" + tableName);
    ret=driver.run("load data inpath '" + location + "' into table "+ tableName);
    Assert.assertEquals(0,ret.getResponseCode());
    Assert.assertTrue(listStatus(tableLoc).size() > 0);
    for (    String child : listStatus(tableLoc)) {
      verifyPermission(child);
    }
    setPermission(warehouseDir + "/" + tableName,1);
    for (    String child : listStatus(tableLoc)) {
      setPermission(child,1);
    }
    fs.copyFromLocalFile(dataFilePath,new Path(location));
    ret=driver.run("load data inpath '" + location + "' overwrite into table "+ tableName);
    Assert.assertEquals(0,ret.getResponseCode());
    Assert.assertTrue(listStatus(tableLoc).size() > 0);
    for (    String child : listStatus(tableLoc)) {
      verifyPermission(child,1);
    }
    tableName="loadpartition";
    ret=driver.run("CREATE TABLE " + tableName + " (key string, value string) partitioned by (part1 int, part2 int)");
    Assert.assertEquals(0,ret.getResponseCode());
    tableLoc=warehouseDir + "/" + tableName;
    assertExistence(tableLoc);
    setPermission(tableLoc);
    fs.copyFromLocalFile(dataFilePath,new Path(location));
    ret=driver.run("LOAD DATA INPATH '" + location + "' INTO TABLE "+ tableName+ " PARTITION (part1='1',part2='1')");
    Assert.assertEquals(0,ret.getResponseCode());
    String partLoc=warehouseDir + "/" + tableName+ "/part1=1/part2=1";
    Assert.assertTrue(listStatus(partLoc).size() > 0);
    for (    String child : listStatus(partLoc)) {
      verifyPermission(child);
    }
    setPermission(tableLoc,1);
    setPermission(partLoc,1);
    Assert.assertTrue(listStatus(partLoc).size() > 0);
    for (    String child : listStatus(partLoc)) {
      setPermission(child,1);
    }
    fs.copyFromLocalFile(dataFilePath,new Path(location));
    ret=driver.run("LOAD DATA INPATH '" + location + "' OVERWRITE INTO TABLE "+ tableName+ " PARTITION (part1='1',part2='1')");
    Assert.assertEquals(0,ret.getResponseCode());
    Assert.assertTrue(listStatus(tableLoc).size() > 0);
    for (    String child : listStatus(partLoc)) {
      verifyPermission(child,1);
    }
  }
  @Test public void testCtas() throws Exception {
    String testDb="ctasdb";
    String tableName="createtable";
    CommandProcessorResponse ret=driver.run("CREATE DATABASE " + testDb);
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + testDb+ ".db");
    setPermission(warehouseDir + "/" + testDb+ ".db");
    verifyPermission(warehouseDir + "/" + testDb+ ".db");
    ret=driver.run("USE " + testDb);
    Assert.assertEquals(0,ret.getResponseCode());
    ret=driver.run("create table " + tableName + " as select key,value from default.mysrc");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + testDb+ ".db/"+ tableName);
    verifyPermission(warehouseDir + "/" + testDb+ ".db/"+ tableName);
    Assert.assertTrue(listStatus(warehouseDir + "/" + testDb+ ".db/"+ tableName).size() > 0);
    for (    String child : listStatus(warehouseDir + "/" + testDb+ ".db/"+ tableName)) {
      verifyPermission(child);
    }
    ret=driver.run("USE default");
    Assert.assertEquals(0,ret.getResponseCode());
  }
  @Test public void testExim() throws Exception {
    String myLocation=warehouseDir + "/exim";
    FileSystem fs=FileSystem.get(new URI(myLocation),conf);
    fs.mkdirs(new Path(myLocation));
    setPermission(myLocation);
    myLocation=myLocation + "/temp";
    CommandProcessorResponse ret=driver.run("export table mysrc to '" + myLocation + "'");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(myLocation);
    verifyPermission(myLocation);
    assertExistence(myLocation + "/part1=1/part2=1");
    verifyPermission(myLocation + "/part1=1/part2=1");
    Assert.assertTrue(listStatus(myLocation + "/part1=1/part2=1").size() > 0);
    for (    String child : listStatus(myLocation + "/part1=1/part2=1")) {
      verifyPermission(child);
    }
    assertExistence(myLocation + "/part1=2/part2=2");
    verifyPermission(myLocation + "/part1=2/part2=2");
    Assert.assertTrue(listStatus(myLocation + "/part1=2/part2=2").size() > 0);
    for (    String child : listStatus(myLocation + "/part1=2/part2=2")) {
      verifyPermission(child);
    }
    String testDb="eximdb";
    ret=driver.run("CREATE DATABASE " + testDb);
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + testDb+ ".db");
    setPermission(warehouseDir + "/" + testDb+ ".db",1);
    ret=driver.run("USE " + testDb);
    Assert.assertEquals(0,ret.getResponseCode());
    ret=driver.run("import from '" + myLocation + "'");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + testDb+ ".db/mysrc");
    verifyPermission(warehouseDir + "/" + testDb+ ".db/mysrc",1);
    myLocation=warehouseDir + "/" + testDb+ ".db/mysrc";
    assertExistence(myLocation);
    verifyPermission(myLocation,1);
    assertExistence(myLocation + "/part1=1/part2=1");
    verifyPermission(myLocation + "/part1=1/part2=1",1);
    Assert.assertTrue(listStatus(myLocation + "/part1=1/part2=1").size() > 0);
    for (    String child : listStatus(myLocation + "/part1=1/part2=1")) {
      verifyPermission(child,1);
    }
    assertExistence(myLocation + "/part1=2/part2=2");
    verifyPermission(myLocation + "/part1=2/part2=2",1);
    Assert.assertTrue(listStatus(myLocation + "/part1=2/part2=2").size() > 0);
    for (    String child : listStatus(myLocation + "/part1=2/part2=2")) {
      verifyPermission(child,1);
    }
  }
  /** 
 * Tests the permission to the table doesn't change after the truncation
 * @throws Exception
 */
  @Test public void testTruncateTable() throws Exception {
    String tableName="truncatetable";
    String partition=warehouseDir + "/" + tableName+ "/part1=1";
    CommandProcessorResponse ret=driver.run("CREATE TABLE " + tableName + " (key STRING, value STRING) PARTITIONED BY (part1 INT)");
    Assert.assertEquals(0,ret.getResponseCode());
    setPermission(warehouseDir + "/" + tableName);
    ret=driver.run("insert into table " + tableName + " partition(part1='1') select key,value from mysrc where part1='1' and part2='1'");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + tableName);
    verifyPermission(warehouseDir + "/" + tableName);
    verifyPermission(partition);
    ret=driver.run("TRUNCATE TABLE " + tableName);
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(warehouseDir + "/" + tableName);
    verifyPermission(warehouseDir + "/" + tableName);
    ret=driver.run("insert into table " + tableName + " partition(part1='1') select key,value from mysrc where part1='1' and part2='1'");
    Assert.assertEquals(0,ret.getResponseCode());
    verifyPermission(warehouseDir + "/" + tableName);
    assertExistence(partition);
    verifyPermission(partition);
    ret=driver.run("TRUNCATE TABLE " + tableName + " partition(part1='1')");
    Assert.assertEquals(0,ret.getResponseCode());
    assertExistence(partition);
    verifyPermission(partition);
  }
  private void setSinglePartition(  String tableLoc,  int index) throws Exception {
    setPermission(tableLoc + "/part1=1",index);
    setPermission(tableLoc + "/part1=2",index);
  }
  private void verifySinglePartition(  String tableLoc,  int index) throws Exception {
    verifyPermission(tableLoc + "/part1=1",index);
    verifyPermission(tableLoc + "/part1=2",index);
    Assert.assertTrue(listStatus(tableLoc + "/part1=1").size() > 0);
    for (    String child : listStatus(tableLoc + "/part1=1")) {
      verifyPermission(child,index);
    }
    Assert.assertTrue(listStatus(tableLoc + "/part1=2").size() > 0);
    for (    String child : listStatus(tableLoc + "/part1=2")) {
      verifyPermission(child,index);
    }
  }
  private void setDualPartitionTable(  String baseTablePath,  int index) throws Exception {
    setPermission(baseTablePath,index);
    setPermission(baseTablePath + "/part1=1",index);
    setPermission(baseTablePath + "/part1=1/part2=1",index);
    setPermission(baseTablePath + "/part1=2",index);
    setPermission(baseTablePath + "/part1=2/part2=2",index);
  }
  private void verifyDualPartitionTable(  String baseTablePath,  int index) throws Exception {
    verifyPermission(baseTablePath,index);
    verifyPermission(baseTablePath + "/part1=1",index);
    verifyPermission(baseTablePath + "/part1=1/part2=1",index);
    verifyPermission(baseTablePath + "/part1=2",index);
    verifyPermission(baseTablePath + "/part1=2/part2=2",index);
    Assert.assertTrue(listStatus(baseTablePath + "/part1=1/part2=1").size() > 0);
    for (    String child : listStatus(baseTablePath + "/part1=1/part2=1")) {
      verifyPermission(child,index);
    }
    Assert.assertTrue(listStatus(baseTablePath + "/part1=2/part2=2").size() > 0);
    for (    String child : listStatus(baseTablePath + "/part1=2/part2=2")) {
      verifyPermission(child,index);
    }
  }
  private void assertExistence(  String locn) throws Exception {
    Assert.assertTrue(fs.exists(new Path(locn)));
  }
  private List<String> listStatus(  String locn) throws Exception {
    List<String> results=new ArrayList<String>();
    FileStatus[] listStatus=fs.listStatus(new Path(locn),hiddenFileFilter);
    for (    FileStatus status : listStatus) {
      results.add(status.getPath().toString());
    }
    return results;
  }
}
