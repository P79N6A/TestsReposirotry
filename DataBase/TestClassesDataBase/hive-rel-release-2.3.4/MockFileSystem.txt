public static class MockFileSystem extends FileSystem {
  final List<MockFile> files=new ArrayList<MockFile>();
  final Map<MockFile,FileStatus> fileStatusMap=new HashMap<>();
  Path workingDir=new Path("/");
  private static String blockedUgi=null;
  private final static List<MockFile> globalFiles=new ArrayList<MockFile>();
  protected Statistics statistics;
  public MockFileSystem(){
  }
  @Override public void initialize(  URI uri,  Configuration conf){
    setConf(conf);
    statistics=getStatistics("mock",getClass());
  }
  public MockFileSystem(  Configuration conf,  MockFile... files){
    setConf(conf);
    this.files.addAll(Arrays.asList(files));
    statistics=getStatistics("mock",getClass());
  }
  public static void setBlockedUgi(  String s){
    blockedUgi=s;
  }
  void clear(){
    files.clear();
  }
  @Override public URI getUri(){
    try {
      return new URI("mock:///");
    }
 catch (    URISyntaxException err) {
      throw new IllegalArgumentException("huh?",err);
    }
  }
  public void touch(  MockFile file){
    if (fileStatusMap.containsKey(file)) {
      FileStatus fileStatus=fileStatusMap.get(file);
      FileStatus fileStatusNew=new FileStatus(fileStatus.getLen(),fileStatus.isDirectory(),fileStatus.getReplication(),fileStatus.getBlockSize(),fileStatus.getModificationTime() + 1,fileStatus.getAccessTime(),fileStatus.getPermission(),fileStatus.getOwner(),fileStatus.getGroup(),fileStatus.getPath());
      fileStatusMap.put(file,fileStatusNew);
    }
  }
@SuppressWarnings("serial") public static class MockAccessDenied extends IOException {
  }
  @Override public FSDataInputStream open(  Path path,  int i) throws IOException {
    statistics.incrementReadOps(1);
    checkAccess();
    MockFile file=findFile(path);
    if (file != null)     return new FSDataInputStream(new MockInputStream(file));
    throw new IOException("File not found: " + path);
  }
  private MockFile findFile(  Path path){
    for (    MockFile file : files) {
      if (file.path.equals(path)) {
        return file;
      }
    }
    for (    MockFile file : globalFiles) {
      if (file.path.equals(path)) {
        return file;
      }
    }
    return null;
  }
  private void checkAccess() throws IOException {
    if (blockedUgi == null)     return;
    if (!blockedUgi.equals(UserGroupInformation.getCurrentUser().getShortUserName()))     return;
    throw new MockAccessDenied();
  }
  @Override public FSDataOutputStream create(  Path path,  FsPermission fsPermission,  boolean overwrite,  int bufferSize,  short replication,  long blockSize,  Progressable progressable) throws IOException {
    statistics.incrementWriteOps(1);
    checkAccess();
    MockFile file=findFile(path);
    if (file == null) {
      file=new MockFile(path.toString(),(int)blockSize,new byte[0]);
      files.add(file);
    }
    return new MockOutputStream(file);
  }
  @Override public FSDataOutputStream append(  Path path,  int bufferSize,  Progressable progressable) throws IOException {
    statistics.incrementWriteOps(1);
    checkAccess();
    return create(path,FsPermission.getDefault(),true,bufferSize,(short)3,256 * 1024,progressable);
  }
  @Override public boolean rename(  Path path,  Path path2) throws IOException {
    statistics.incrementWriteOps(1);
    checkAccess();
    return false;
  }
  @Override public boolean delete(  Path path) throws IOException {
    statistics.incrementWriteOps(1);
    checkAccess();
    return false;
  }
  @Override public boolean delete(  Path path,  boolean b) throws IOException {
    statistics.incrementWriteOps(1);
    checkAccess();
    return false;
  }
  @Override public RemoteIterator<LocatedFileStatus> listLocatedStatus(  final Path f) throws IOException {
    return new RemoteIterator<LocatedFileStatus>(){
      private Iterator<LocatedFileStatus> iterator=listLocatedFileStatuses(f).iterator();
      @Override public boolean hasNext() throws IOException {
        return iterator.hasNext();
      }
      @Override public LocatedFileStatus next() throws IOException {
        return iterator.next();
      }
    }
;
  }
  private List<LocatedFileStatus> listLocatedFileStatuses(  Path path) throws IOException {
    statistics.incrementReadOps(1);
    checkAccess();
    path=path.makeQualified(this);
    List<LocatedFileStatus> result=new ArrayList<>();
    String pathname=path.toString();
    String pathnameAsDir=pathname + "/";
    Set<String> dirs=new TreeSet<String>();
    MockFile file=findFile(path);
    if (file != null) {
      result.add(createLocatedStatus(file));
      return result;
    }
    findMatchingLocatedFiles(files,pathnameAsDir,dirs,result);
    findMatchingLocatedFiles(globalFiles,pathnameAsDir,dirs,result);
    for (    String dir : dirs) {
      result.add(createLocatedDirectory(new MockPath(this,pathnameAsDir + dir)));
    }
    return result;
  }
  @Override public FileStatus[] listStatus(  Path path) throws IOException {
    statistics.incrementReadOps(1);
    checkAccess();
    path=path.makeQualified(this);
    List<FileStatus> result=new ArrayList<FileStatus>();
    String pathname=path.toString();
    String pathnameAsDir=pathname + "/";
    Set<String> dirs=new TreeSet<String>();
    MockFile file=findFile(path);
    if (file != null) {
      return new FileStatus[]{createStatus(file)};
    }
    findMatchingFiles(files,pathnameAsDir,dirs,result);
    findMatchingFiles(globalFiles,pathnameAsDir,dirs,result);
    for (    String dir : dirs) {
      result.add(createDirectory(new MockPath(this,pathnameAsDir + dir)));
    }
    return result.toArray(new FileStatus[result.size()]);
  }
  private void findMatchingFiles(  List<MockFile> files,  String pathnameAsDir,  Set<String> dirs,  List<FileStatus> result){
    for (    MockFile file : files) {
      String filename=file.path.toString();
      if (filename.startsWith(pathnameAsDir)) {
        String tail=filename.substring(pathnameAsDir.length());
        int nextSlash=tail.indexOf('/');
        if (nextSlash > 0) {
          dirs.add(tail.substring(0,nextSlash));
        }
 else {
          result.add(createStatus(file));
        }
      }
    }
  }
  private void findMatchingLocatedFiles(  List<MockFile> files,  String pathnameAsDir,  Set<String> dirs,  List<LocatedFileStatus> result) throws IOException {
    for (    MockFile file : files) {
      String filename=file.path.toString();
      if (filename.startsWith(pathnameAsDir)) {
        String tail=filename.substring(pathnameAsDir.length());
        int nextSlash=tail.indexOf('/');
        if (nextSlash > 0) {
          dirs.add(tail.substring(0,nextSlash));
        }
 else {
          result.add(createLocatedStatus(file));
        }
      }
    }
  }
  @Override public void setWorkingDirectory(  Path path){
    workingDir=path;
  }
  @Override public Path getWorkingDirectory(){
    return workingDir;
  }
  @Override public boolean mkdirs(  Path path,  FsPermission fsPermission){
    statistics.incrementWriteOps(1);
    return false;
  }
  private FileStatus createStatus(  MockFile file){
    if (fileStatusMap.containsKey(file)) {
      return fileStatusMap.get(file);
    }
    FileStatus fileStatus=new FileStatus(file.length,false,1,file.blockSize,0,0,FsPermission.createImmutable((short)644),"owen","group",file.path);
    fileStatusMap.put(file,fileStatus);
    return fileStatus;
  }
  private FileStatus createDirectory(  Path dir){
    return new FileStatus(0,true,0,0,0,0,FsPermission.createImmutable((short)755),"owen","group",dir);
  }
  private LocatedFileStatus createLocatedStatus(  MockFile file) throws IOException {
    FileStatus fileStatus=createStatus(file);
    return new LocatedFileStatus(fileStatus,getFileBlockLocationsImpl(fileStatus,0,fileStatus.getLen(),false));
  }
  private LocatedFileStatus createLocatedDirectory(  Path dir) throws IOException {
    FileStatus fileStatus=createDirectory(dir);
    return new LocatedFileStatus(fileStatus,getFileBlockLocationsImpl(fileStatus,0,fileStatus.getLen(),false));
  }
  @Override public FileStatus getFileStatus(  Path path) throws IOException {
    statistics.incrementReadOps(1);
    checkAccess();
    path=path.makeQualified(this);
    String pathnameAsDir=path.toString() + "/";
    MockFile file=findFile(path);
    if (file != null)     return createStatus(file);
    for (    MockFile dir : files) {
      if (dir.path.toString().startsWith(pathnameAsDir)) {
        return createDirectory(path);
      }
    }
    for (    MockFile dir : globalFiles) {
      if (dir.path.toString().startsWith(pathnameAsDir)) {
        return createDirectory(path);
      }
    }
    throw new FileNotFoundException("File " + path + " does not exist");
  }
  @Override public BlockLocation[] getFileBlockLocations(  FileStatus stat,  long start,  long len) throws IOException {
    return getFileBlockLocationsImpl(stat,start,len,true);
  }
  private BlockLocation[] getFileBlockLocationsImpl(  final FileStatus stat,  final long start,  final long len,  final boolean updateStats) throws IOException {
    if (updateStats) {
      statistics.incrementReadOps(1);
    }
    checkAccess();
    List<BlockLocation> result=new ArrayList<BlockLocation>();
    MockFile file=findFile(stat.getPath());
    if (file != null) {
      for (      MockBlock block : file.blocks) {
        if (OrcInputFormat.SplitGenerator.getOverlap(block.offset,block.length,start,len) > 0) {
          String[] topology=new String[block.hosts.length];
          for (int i=0; i < topology.length; ++i) {
            topology[i]="/rack/ " + block.hosts[i];
          }
          result.add(new BlockLocation(block.hosts,block.hosts,topology,block.offset,block.length));
        }
      }
      return result.toArray(new BlockLocation[result.size()]);
    }
    return new BlockLocation[0];
  }
  @Override public String toString(){
    StringBuilder buffer=new StringBuilder();
    buffer.append("mockFs{files:[");
    for (int i=0; i < files.size(); ++i) {
      if (i != 0) {
        buffer.append(", ");
      }
      buffer.append(files.get(i));
    }
    buffer.append("]}");
    return buffer.toString();
  }
  public static void addGlobalFile(  MockFile mockFile){
    globalFiles.add(mockFile);
  }
  public static void clearGlobalFiles(){
    globalFiles.clear();
  }
}
