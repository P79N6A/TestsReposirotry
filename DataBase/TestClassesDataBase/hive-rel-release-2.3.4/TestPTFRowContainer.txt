@SuppressWarnings("deprecation") public class TestPTFRowContainer {
  private static final String COL_NAMES="x,y,z,a,b,v";
  private static final String COL_TYPES="int,string,double,int,string,string";
  static AbstractSerDe serDe;
  static Configuration cfg;
  @BeforeClass public static void setupClass() throws SerDeException {
    cfg=new Configuration();
    serDe=new LazyBinarySerDe();
    Properties p=new Properties();
    p.setProperty(org.apache.hadoop.hive.serde.serdeConstants.LIST_COLUMNS,COL_NAMES);
    p.setProperty(org.apache.hadoop.hive.serde.serdeConstants.LIST_COLUMN_TYPES,COL_TYPES);
    SerDeUtils.initializeSerDe(serDe,cfg,p,null);
  }
  private PTFRowContainer<List<Object>> rowContainer(  int blockSize) throws SerDeException, HiveException {
    PTFRowContainer<List<Object>> rc=new PTFRowContainer<List<Object>>(blockSize,cfg,null);
    rc.setSerDe(serDe,ObjectInspectorUtils.getStandardObjectInspector(serDe.getObjectInspector()));
    rc.setTableDesc(PTFRowContainer.createTableDesc((StructObjectInspector)serDe.getObjectInspector()));
    return rc;
  }
  private void runTest(  int sz,  int blockSize,  String value) throws SerDeException, HiveException {
    List<Object> row;
    PTFRowContainer<List<Object>> rc=rowContainer(blockSize);
    int i;
    for (i=0; i < sz; i++) {
      row=new ArrayList<Object>();
      row.add(new IntWritable(i));
      row.add(new Text("abc " + i));
      row.add(new DoubleWritable(i));
      row.add(new IntWritable(i));
      row.add(new Text("def " + i));
      row.add(new Text(value));
      rc.addRow(row);
    }
    assertEquals(sz,rc.rowCount());
    i=0;
    row=new ArrayList<Object>();
    row=rc.first();
    while (row != null) {
      assertEquals("abc " + i,row.get(1).toString());
      i++;
      row=rc.next();
    }
    row=rc.first();
    for (i=sz - 1; i >= 0; i--) {
      row=rc.getAt(i);
      assertEquals("abc " + i,row.get(1).toString());
    }
    Random r=new Random(1000L);
    for (i=0; i < 100; i++) {
      int j=r.nextInt(sz);
      row=rc.getAt(j);
      assertEquals("abc " + j,row.get(1).toString());
    }
    for (i=0; i < 100; i++) {
      int j=r.nextInt(sz);
      row=rc.getAt(j);
      assertEquals("abc " + j,row.get(1).toString());
      for (int k=j + 1; k < j + (blockSize / 4) && k < sz; k++) {
        row=rc.next();
        assertEquals("def " + k,row.get(4).toString());
      }
    }
  }
  private void runTest(  int sz,  int blockSize) throws SerDeException, HiveException {
    runTest(sz,blockSize,"");
  }
  @Test public void testLargeBlockSize() throws SerDeException, HiveException {
    runTest(100 * 1000,25 * 1000);
  }
  @Test public void testSmallBlockSize() throws SerDeException, HiveException {
    runTest(10 * 1000,5);
  }
  @Test public void testBlocksLargerThanSplit() throws SerDeException, HiveException, IOException {
    runTest(5,2,new String(new char[(int)FileSystem.getLocal(cfg).getDefaultBlockSize()]));
  }
}
