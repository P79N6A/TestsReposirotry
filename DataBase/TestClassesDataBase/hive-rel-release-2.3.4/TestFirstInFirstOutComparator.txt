public class TestFirstInFirstOutComparator {
  private SubmitWorkRequestProto createRequest(  int fragmentNumber,  int numSelfAndUpstreamTasks,  int dagStartTime,  int attemptStartTime){
    return createRequest(fragmentNumber,numSelfAndUpstreamTasks,0,dagStartTime,attemptStartTime,1);
  }
  private SubmitWorkRequestProto createRequest(  int fragmentNumber,  int numSelfAndUpstreamTasks,  int numSelfAndUpstreamComplete,  int dagStartTime,  int attemptStartTime,  int withinDagPriority){
    return createRequest(fragmentNumber,numSelfAndUpstreamTasks,numSelfAndUpstreamComplete,dagStartTime,attemptStartTime,withinDagPriority,"MockDag");
  }
  private SubmitWorkRequestProto createRequest(  int fragmentNumber,  int numSelfAndUpstreamTasks,  int numSelfAndUpstreamComplete,  int dagStartTime,  int attemptStartTime,  int withinDagPriority,  String dagName){
    ApplicationId appId=ApplicationId.newInstance(9999,72);
    TezDAGID dagId=TezDAGID.getInstance(appId,1);
    TezVertexID vId=TezVertexID.getInstance(dagId,35);
    return SubmitWorkRequestProto.newBuilder().setAttemptNumber(0).setFragmentNumber(fragmentNumber).setWorkSpec(VertexOrBinary.newBuilder().setVertex(SignableVertexSpec.newBuilder().setQueryIdentifier(QueryIdentifierProto.newBuilder().setApplicationIdString(appId.toString()).setAppAttemptNumber(0).setDagIndex(dagId.getId()).build()).setVertexIndex(vId.getId()).setDagName(dagName).setHiveQueryId(dagName).setVertexName("MockVertex").setUser("MockUser").setTokenIdentifier("MockToken_1").setProcessorDescriptor(EntityDescriptorProto.newBuilder().setClassName("MockProcessor").build()).build()).build()).setAmHost("localhost").setAmPort(12345).setContainerIdString("MockContainer_1").setFragmentRuntimeInfo(LlapDaemonProtocolProtos.FragmentRuntimeInfo.newBuilder().setDagStartTime(dagStartTime).setFirstAttemptStartTime(attemptStartTime).setNumSelfAndUpstreamTasks(numSelfAndUpstreamTasks).setNumSelfAndUpstreamCompletedTasks(numSelfAndUpstreamComplete).setWithinDagPriority(withinDagPriority).build()).build();
  }
  @Test(timeout=60000) public void testWaitQueueComparator() throws InterruptedException {
    TaskWrapper r1=createTaskWrapper(createRequest(1,2,5,100),false,100000);
    TaskWrapper r2=createTaskWrapper(createRequest(2,4,4,200),false,100000);
    TaskWrapper r3=createTaskWrapper(createRequest(3,6,3,300),false,1000000);
    TaskWrapper r4=createTaskWrapper(createRequest(4,8,2,400),false,1000000);
    TaskWrapper r5=createTaskWrapper(createRequest(5,10,1,500),false,1000000);
    EvictingPriorityBlockingQueue<TaskWrapper> queue=new EvictingPriorityBlockingQueue<>(new FirstInFirstOutComparator(),4);
    assertNull(queue.offer(r1,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r2,0));
    assertEquals(r2,queue.peek());
    assertNull(queue.offer(r3,0));
    assertEquals(r3,queue.peek());
    assertNull(queue.offer(r4,0));
    assertEquals(r4,queue.peek());
    assertEquals(r1,queue.offer(r5,0));
    assertEquals(r5,queue.take());
    assertEquals(r4,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r2,queue.take());
    r1=createTaskWrapper(createRequest(1,2,5,100),true,100000);
    r2=createTaskWrapper(createRequest(2,4,4,200),true,100000);
    r3=createTaskWrapper(createRequest(3,6,3,300),true,1000000);
    r4=createTaskWrapper(createRequest(4,8,2,400),true,1000000);
    r5=createTaskWrapper(createRequest(5,10,1,500),true,1000000);
    queue=new EvictingPriorityBlockingQueue<TaskWrapper>(new FirstInFirstOutComparator(),4);
    assertNull(queue.offer(r1,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r2,0));
    assertEquals(r2,queue.peek());
    assertNull(queue.offer(r3,0));
    assertEquals(r3,queue.peek());
    assertNull(queue.offer(r4,0));
    assertEquals(r4,queue.peek());
    assertEquals(r1,queue.offer(r5,0));
    assertEquals(r5,queue.take());
    assertEquals(r4,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r2,queue.take());
    r1=createTaskWrapper(createRequest(1,1,5,100),true,100000);
    r2=createTaskWrapper(createRequest(2,1,4,200),false,100000);
    r3=createTaskWrapper(createRequest(3,1,3,300),true,1000000);
    r4=createTaskWrapper(createRequest(4,1,2,400),false,1000000);
    r5=createTaskWrapper(createRequest(5,10,1,500),true,1000000);
    queue=new EvictingPriorityBlockingQueue<TaskWrapper>(new FirstInFirstOutComparator(),4);
    assertNull(queue.offer(r1,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r2,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r3,0));
    assertEquals(r3,queue.peek());
    assertNull(queue.offer(r4,0));
    assertEquals(r3,queue.peek());
    assertEquals(r2,queue.offer(r5,0));
    assertEquals(r5,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r1,queue.take());
    assertEquals(r4,queue.take());
    r1=createTaskWrapper(createRequest(1,2,5,100),true,100000);
    r2=createTaskWrapper(createRequest(2,4,4,200),false,100000);
    r3=createTaskWrapper(createRequest(3,6,3,300),true,1000000);
    r4=createTaskWrapper(createRequest(4,8,2,400),false,1000000);
    r5=createTaskWrapper(createRequest(5,10,1,500),true,1000000);
    queue=new EvictingPriorityBlockingQueue<TaskWrapper>(new FirstInFirstOutComparator(),4);
    assertNull(queue.offer(r1,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r2,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r3,0));
    assertEquals(r3,queue.peek());
    assertNull(queue.offer(r4,0));
    assertEquals(r3,queue.peek());
    assertEquals(r2,queue.offer(r5,0));
    assertEquals(r5,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r1,queue.take());
    assertEquals(r4,queue.take());
    r1=createTaskWrapper(createRequest(1,2,5,100),true,100000);
    r2=createTaskWrapper(createRequest(2,4,4,200),false,100000);
    r3=createTaskWrapper(createRequest(3,6,3,300),false,1000000);
    r4=createTaskWrapper(createRequest(4,8,2,400),false,1000000);
    r5=createTaskWrapper(createRequest(5,10,1,500),true,1000000);
    queue=new EvictingPriorityBlockingQueue<TaskWrapper>(new FirstInFirstOutComparator(),4);
    assertNull(queue.offer(r1,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r2,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r3,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r4,0));
    assertEquals(r1,queue.peek());
    assertEquals(r2,queue.offer(r5,0));
    assertEquals(r5,queue.take());
    assertEquals(r1,queue.take());
    assertEquals(r4,queue.take());
    assertEquals(r3,queue.take());
    r1=createTaskWrapper(createRequest(1,2,5,100),false,100000);
    r2=createTaskWrapper(createRequest(2,4,4,200),true,100000);
    r3=createTaskWrapper(createRequest(3,6,3,300),true,1000000);
    r4=createTaskWrapper(createRequest(4,8,2,400),true,1000000);
    r5=createTaskWrapper(createRequest(5,10,1,500),true,1000000);
    queue=new EvictingPriorityBlockingQueue<TaskWrapper>(new FirstInFirstOutComparator(),4);
    assertNull(queue.offer(r1,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r2,0));
    assertEquals(r2,queue.peek());
    assertNull(queue.offer(r3,0));
    assertEquals(r3,queue.peek());
    assertNull(queue.offer(r4,0));
    assertEquals(r4,queue.peek());
    assertEquals(r1,queue.offer(r5,0));
    assertEquals(r5,queue.take());
    assertEquals(r4,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r2,queue.take());
    r1=createTaskWrapper(createRequest(1,2,5,100),false,100000);
    r2=createTaskWrapper(createRequest(2,4,4,200),true,100000);
    r3=createTaskWrapper(createRequest(3,6,3,300),true,1000000);
    r4=createTaskWrapper(createRequest(4,8,2,400),true,1000000);
    r5=createTaskWrapper(createRequest(5,10,2,500),true,1000000);
    queue=new EvictingPriorityBlockingQueue<TaskWrapper>(new FirstInFirstOutComparator(),4);
    assertNull(queue.offer(r1,0));
    assertEquals(r1,queue.peek());
    assertNull(queue.offer(r2,0));
    assertEquals(r2,queue.peek());
    assertNull(queue.offer(r3,0));
    assertEquals(r3,queue.peek());
    assertNull(queue.offer(r4,0));
    assertEquals(r4,queue.peek());
    assertEquals(r1,queue.offer(r5,0));
    assertEquals(r5,queue.take());
    assertEquals(r4,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r2,queue.take());
  }
  @Test(timeout=60000) public void testWaitQueueComparatorCanFinish() throws InterruptedException {
    TaskWrapper r1=createTaskWrapper(createSubmitWorkRequestProto(1,1,0,10,100,2),true,false,100000);
    TaskWrapper r2=createTaskWrapper(createSubmitWorkRequestProto(2,1,0,10,100,1),false,true,100000);
    TaskWrapper r3=createTaskWrapper(createSubmitWorkRequestProto(3,1,0,10,100,5),true,true,100000);
    EvictingPriorityBlockingQueue<TaskWrapper> queue=new EvictingPriorityBlockingQueue<TaskWrapper>(new FirstInFirstOutComparator(),4);
    assertNull(queue.offer(r1,0));
    assertNull(queue.offer(r2,0));
    assertNull(queue.offer(r3,0));
    assertEquals(r2,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r1,queue.take());
  }
  @Test(timeout=60000) public void testWaitQueueComparatorWithinDagPriority() throws InterruptedException {
    TaskWrapper r1=createTaskWrapper(createRequest(1,1,0,100,100,10),false,100000);
    TaskWrapper r2=createTaskWrapper(createRequest(2,1,0,100,100,1),false,100000);
    TaskWrapper r3=createTaskWrapper(createRequest(3,1,0,100,100,5),false,100000);
    EvictingPriorityBlockingQueue<TaskWrapper> queue=new EvictingPriorityBlockingQueue<>(new FirstInFirstOutComparator(),4);
    assertNull(queue.offer(r1,0));
    assertNull(queue.offer(r2,0));
    assertNull(queue.offer(r3,0));
    assertEquals(r2,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r1,queue.take());
  }
  @Test(timeout=60000) public void testWaitQueueComparatorWithinSameDagPriority() throws InterruptedException {
    TaskWrapper r1=createTaskWrapper(createRequest(1,1,0,10,100,10),true,100000);
    TaskWrapper r2=createTaskWrapper(createRequest(2,1,0,10,100,10),true,100000);
    TaskWrapper r3=createTaskWrapper(createRequest(3,1,0,10,100,10),true,100000);
    EvictingPriorityBlockingQueue<TaskWrapper> queue=new EvictingPriorityBlockingQueue<>(new ShortestJobFirstComparator(),3);
    assertNull(queue.offer(r1,0));
    assertNull(queue.offer(r2,0));
    assertNull(queue.offer(r3,0));
    TaskWrapper r4=createTaskWrapper(createRequest(4,1,0,10,100,10),true,100000);
    assertEquals(r4,queue.offer(r4,0));
  }
  @Test(timeout=60000) public void testWaitQueueComparatorParallelism() throws InterruptedException {
    TaskWrapper r1=createTaskWrapper(createRequest(1,10,3,100,100,1,"q1"),false,100000);
    TaskWrapper r2=createTaskWrapper(createRequest(2,10,7,100,100,1,"q2"),false,100000);
    TaskWrapper r3=createTaskWrapper(createRequest(3,10,5,100,100,1,"q3"),false,100000);
    EvictingPriorityBlockingQueue<TaskWrapper> queue=new EvictingPriorityBlockingQueue<>(new FirstInFirstOutComparator(),4);
    assertNull(queue.offer(r1,0));
    assertNull(queue.offer(r2,0));
    assertNull(queue.offer(r3,0));
    assertEquals(r2,queue.take());
    assertEquals(r3,queue.take());
    assertEquals(r1,queue.take());
  }
}
