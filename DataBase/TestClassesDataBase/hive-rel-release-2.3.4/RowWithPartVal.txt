private static class RowWithPartVal implements Row {
  public RowWithPartVal(  Text data,  Text partVal){
    super();
    this.data=data;
    this.partVal=partVal;
  }
  public RowWithPartVal(){
  }
  private Text data;
  private Text partVal;
  @Override public Row clone() throws CloneNotSupportedException {
    return new RowWithPartVal(this.data,this.partVal);
  }
  @Override public void write(  DataOutput dataOutput) throws IOException {
    data.write(dataOutput);
    if (partVal == null) {
      dataOutput.writeBoolean(false);
    }
 else {
      dataOutput.writeBoolean(true);
      partVal.write(dataOutput);
    }
  }
  @Override public void readFields(  DataInput dataInput) throws IOException {
    data=new Text();
    data.readFields(dataInput);
    boolean notNull=dataInput.readBoolean();
    if (notNull) {
      partVal=new Text();
      partVal.readFields(dataInput);
    }
  }
  @Override public int compareTo(  Row row){
    RowWithPartVal other=(RowWithPartVal)row;
    if (partVal == null && other.partVal == null) {
      return compareData(other);
    }
 else     if (partVal == null) {
      return -1;
    }
 else {
      int rc=partVal.compareTo(other.partVal);
      if (rc == 0)       return compareData(other);
 else       return rc;
    }
  }
  private int compareData(  RowWithPartVal other){
    if (data == null && other.data == null)     return 0;
 else     if (data == null)     return -1;
 else     return data.compareTo(other.data);
  }
  @Override public boolean equals(  Object obj){
    if (obj instanceof RowWithPartVal) {
      RowWithPartVal other=(RowWithPartVal)obj;
      return compareTo(other) == 0;
    }
 else {
      return false;
    }
  }
}
