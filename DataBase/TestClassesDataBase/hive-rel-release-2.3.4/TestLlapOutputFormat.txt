public class TestLlapOutputFormat {
  private static final Logger LOG=LoggerFactory.getLogger(TestLlapOutputFormat.class);
  private static LlapOutputFormatService service;
  @BeforeClass public static void setUp() throws Exception {
    LOG.debug("Setting up output service");
    Configuration conf=new Configuration();
    HiveConf.setIntVar(conf,HiveConf.ConfVars.LLAP_DAEMON_OUTPUT_SERVICE_PORT,0);
    LlapOutputFormatService.initializeAndStart(conf,null);
    service=LlapOutputFormatService.get();
    LlapProxy.setDaemon(true);
    LOG.debug("Output service up");
  }
  @AfterClass public static void tearDown() throws IOException, InterruptedException {
    LOG.debug("Tearing down service");
    service.stop();
    LOG.debug("Tearing down complete");
  }
  @Test public void testValues() throws Exception {
    JobConf job=new JobConf();
    for (int k=0; k < 5; ++k) {
      String id="foobar" + k;
      job.set(LlapOutputFormat.LLAP_OF_ID_KEY,id);
      LlapOutputFormat format=new LlapOutputFormat();
      HiveConf conf=new HiveConf();
      Socket socket=new Socket("localhost",service.getPort());
      LOG.debug("Socket connected");
      OutputStream socketStream=socket.getOutputStream();
      LlapOutputSocketInitMessage.newBuilder().setFragmentId(id).build().writeDelimitedTo(socketStream);
      socketStream.flush();
      Thread.sleep(3000);
      LOG.debug("Data written");
      RecordWriter<NullWritable,Text> writer=format.getRecordWriter(null,job,null,null);
      Text text=new Text();
      LOG.debug("Have record writer");
      for (int i=0; i < 10; ++i) {
        text.set("" + i);
        writer.write(NullWritable.get(),text);
      }
      writer.close(null);
      InputStream in=socket.getInputStream();
      LlapBaseRecordReader reader=new LlapBaseRecordReader(in,null,Text.class,job,null,null);
      LOG.debug("Have record reader");
      reader.handleEvent(ReaderEvent.doneEvent());
      int count=0;
      while (reader.next(NullWritable.get(),text)) {
        LOG.debug(text.toString());
        count++;
      }
      reader.close();
      Assert.assertEquals(10,count);
    }
  }
  @Test public void testBadClientMessage() throws Exception {
    JobConf job=new JobConf();
    String id="foobar";
    job.set(LlapOutputFormat.LLAP_OF_ID_KEY,id);
    LlapOutputFormat format=new LlapOutputFormat();
    Socket socket=new Socket("localhost",service.getPort());
    LOG.debug("Socket connected");
    OutputStream socketStream=socket.getOutputStream();
    LlapOutputSocketInitMessage.newBuilder().setFragmentId(id).build().writeDelimitedTo(socketStream);
    LlapOutputSocketInitMessage.newBuilder().setFragmentId(id).build().writeDelimitedTo(socketStream);
    socketStream.flush();
    Thread.sleep(3000);
    LOG.debug("Data written");
    try {
      format.getRecordWriter(null,job,null,null);
      Assert.fail("Didn't throw");
    }
 catch (    IOException ex) {
    }
  }
}
