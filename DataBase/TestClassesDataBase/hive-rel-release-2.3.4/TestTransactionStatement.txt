/** 
 * Basic parser tests for multi-statement transactions
 */
public class TestTransactionStatement {
  private static SessionState sessionState;
  private ParseDriver pd;
  @BeforeClass public static void initialize(){
    HiveConf conf=new HiveConf(SemanticAnalyzer.class);
    sessionState=SessionState.start(conf);
  }
  @AfterClass public static void cleanUp() throws IOException {
    if (sessionState != null) {
      sessionState.close();
    }
  }
  @Before public void setup() throws SemanticException {
    pd=new ParseDriver();
  }
  ASTNode parse(  String query) throws ParseException {
    ASTNode nd=pd.parse(query);
    return (ASTNode)nd.getChild(0);
  }
  @Test public void testTxnStart() throws ParseException {
    ASTNode ast=parse("START TRANSACTION");
    Assert.assertEquals("AST doesn't match","tok_start_transaction",ast.toStringTree());
    ast=parse("START TRANSACTION ISOLATION LEVEL SNAPSHOT");
    Assert.assertEquals("AST doesn't match","(tok_start_transaction (tok_isolation_level tok_isolation_snapshot))",ast.toStringTree());
    ast=parse("START TRANSACTION READ ONLY");
    Assert.assertEquals("AST doesn't match","(tok_start_transaction (tok_txn_access_mode tok_txn_read_only))",ast.toStringTree());
    ast=parse("START TRANSACTION READ WRITE, ISOLATION LEVEL SNAPSHOT");
    Assert.assertEquals("AST doesn't match","(tok_start_transaction (tok_txn_access_mode tok_txn_read_write) (tok_isolation_level tok_isolation_snapshot))",ast.toStringTree());
  }
  @Test public void testTxnCommitRollback() throws ParseException {
    ASTNode ast=parse("COMMIT");
    Assert.assertEquals("AST doesn't match","tok_commit",ast.toStringTree());
    ast=parse("COMMIT WORK");
    Assert.assertEquals("AST doesn't match","tok_commit",ast.toStringTree());
    ast=parse("ROLLBACK");
    Assert.assertEquals("AST doesn't match","tok_rollback",ast.toStringTree());
    ast=parse("ROLLBACK WORK");
    Assert.assertEquals("AST doesn't match","tok_rollback",ast.toStringTree());
  }
  @Test public void testAutoCommit() throws ParseException {
    ASTNode ast=parse("SET AUTOCOMMIT TRUE");
    Assert.assertEquals("AST doesn't match","(tok_set_autocommit tok_true)",ast.toStringTree());
    ast=parse("SET AUTOCOMMIT FALSE");
    Assert.assertEquals("AST doesn't match","(tok_set_autocommit tok_false)",ast.toStringTree());
  }
}
