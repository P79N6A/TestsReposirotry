public class TestOpenCSVSerde {
  private final OpenCSVSerde csv=new OpenCSVSerde();
  private final Properties props=new Properties();
  @Before public void setup() throws Exception {
    props.setProperty(serdeConstants.LIST_COLUMNS,"a,b,c");
    props.setProperty(serdeConstants.LIST_COLUMN_TYPES,"string,string,string");
  }
  @Test public void testDeserialize() throws Exception {
    csv.initialize(null,props);
    final Text in=new Text("hello,\"yes, okay\",1");
    final List<String> row=(List<String>)csv.deserialize(in);
    assertEquals("hello",row.get(0));
    assertEquals("yes, okay",row.get(1));
    assertEquals("1",row.get(2));
  }
  @Test public void testDeserializeCustomSeparators() throws Exception {
    props.setProperty(OpenCSVSerde.SEPARATORCHAR,"\t");
    props.setProperty(OpenCSVSerde.QUOTECHAR,"'");
    csv.initialize(null,props);
    final Text in=new Text("hello\t'yes\tokay'\t1");
    final List<String> row=(List<String>)csv.deserialize(in);
    assertEquals("hello",row.get(0));
    assertEquals("yes\tokay",row.get(1));
    assertEquals("1",row.get(2));
  }
  @Test public void testDeserializeCustomEscape() throws Exception {
    props.setProperty(OpenCSVSerde.QUOTECHAR,"'");
    props.setProperty(OpenCSVSerde.ESCAPECHAR,"\\");
    csv.initialize(null,props);
    final Text in=new Text("hello,'yes\\'okay',1");
    final List<String> row=(List<String>)csv.deserialize(in);
    assertEquals("hello",row.get(0));
    assertEquals("yes'okay",row.get(1));
    assertEquals("1",row.get(2));
  }
}
