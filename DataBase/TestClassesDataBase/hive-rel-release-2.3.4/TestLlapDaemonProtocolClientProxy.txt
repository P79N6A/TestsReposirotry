public class TestLlapDaemonProtocolClientProxy {
  @Test(timeout=5000) public void testMultipleNodes(){
    RequestManagerForTest requestManager=new RequestManagerForTest(1);
    LlapNodeId nodeId1=LlapNodeId.getInstance("host1",1025);
    LlapNodeId nodeId2=LlapNodeId.getInstance("host2",1025);
    Message mockMessage=mock(Message.class);
    LlapProtocolClientProxy.ExecuteRequestCallback mockExecuteRequestCallback=mock(LlapProtocolClientProxy.ExecuteRequestCallback.class);
    requestManager.queueRequest(new CallableRequestForTest(nodeId1,mockMessage,mockExecuteRequestCallback));
    requestManager.queueRequest(new CallableRequestForTest(nodeId2,mockMessage,mockExecuteRequestCallback));
    requestManager.process();
    assertEquals(2,requestManager.numSubmissionsCounters);
    assertNotNull(requestManager.numInvocationsPerNode.get(nodeId1));
    assertNotNull(requestManager.numInvocationsPerNode.get(nodeId2));
    Assert.assertEquals(1,requestManager.numInvocationsPerNode.get(nodeId1).getValue().intValue());
    Assert.assertEquals(1,requestManager.numInvocationsPerNode.get(nodeId2).getValue().intValue());
    assertEquals(0,requestManager.currentLoopSkippedRequests.size());
    assertEquals(0,requestManager.currentLoopSkippedRequests.size());
    assertEquals(0,requestManager.currentLoopDisabledNodes.size());
  }
  @Test(timeout=5000) public void testSingleInvocationPerNode(){
    RequestManagerForTest requestManager=new RequestManagerForTest(1);
    LlapNodeId nodeId1=LlapNodeId.getInstance("host1",1025);
    Message mockMessage=mock(Message.class);
    LlapProtocolClientProxy.ExecuteRequestCallback mockExecuteRequestCallback=mock(LlapProtocolClientProxy.ExecuteRequestCallback.class);
    requestManager.queueRequest(new CallableRequestForTest(nodeId1,mockMessage,mockExecuteRequestCallback));
    requestManager.process();
    assertEquals(1,requestManager.numSubmissionsCounters);
    assertNotNull(requestManager.numInvocationsPerNode.get(nodeId1));
    Assert.assertEquals(1,requestManager.numInvocationsPerNode.get(nodeId1).getValue().intValue());
    assertEquals(0,requestManager.currentLoopSkippedRequests.size());
    requestManager.queueRequest(new CallableRequestForTest(nodeId1,mockMessage,mockExecuteRequestCallback));
    requestManager.process();
    assertEquals(1,requestManager.numSubmissionsCounters);
    assertNotNull(requestManager.numInvocationsPerNode.get(nodeId1));
    Assert.assertEquals(1,requestManager.numInvocationsPerNode.get(nodeId1).getValue().intValue());
    assertEquals(1,requestManager.currentLoopSkippedRequests.size());
    assertEquals(1,requestManager.currentLoopDisabledNodes.size());
    assertTrue(requestManager.currentLoopDisabledNodes.contains(nodeId1));
    requestManager.requestFinished(nodeId1);
    requestManager.process();
    assertEquals(2,requestManager.numSubmissionsCounters);
    assertNotNull(requestManager.numInvocationsPerNode.get(nodeId1));
    Assert.assertEquals(2,requestManager.numInvocationsPerNode.get(nodeId1).getValue().intValue());
    assertEquals(0,requestManager.currentLoopSkippedRequests.size());
    assertEquals(0,requestManager.currentLoopDisabledNodes.size());
    assertFalse(requestManager.currentLoopDisabledNodes.contains(nodeId1));
  }
static class RequestManagerForTest extends LlapProtocolClientProxy.RequestManager {
    int numSubmissionsCounters=0;
    private Map<LlapNodeId,MutableInt> numInvocationsPerNode=new HashMap<>();
    public RequestManagerForTest(    int numThreads){
      super(numThreads);
    }
    protected void submitToExecutor(    LlapProtocolClientProxy.CallableRequest request,    LlapNodeId nodeId){
      numSubmissionsCounters++;
      MutableInt nodeCount=numInvocationsPerNode.get(nodeId);
      if (nodeCount == null) {
        nodeCount=new MutableInt(0);
        numInvocationsPerNode.put(nodeId,nodeCount);
      }
      nodeCount.increment();
    }
    void reset(){
      numSubmissionsCounters=0;
      numInvocationsPerNode.clear();
    }
  }
static class CallableRequestForTest extends LlapProtocolClientProxy.CallableRequest<Message,Message> {
    protected CallableRequestForTest(    LlapNodeId nodeId,    Message message,    LlapProtocolClientProxy.ExecuteRequestCallback<Message> callback){
      super(nodeId,message,callback);
    }
    @Override public Message call() throws Exception {
      return null;
    }
  }
}
