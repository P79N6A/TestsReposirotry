public class StreamingAssert {
public static class Factory {
    private IMetaStoreClient metaStoreClient;
    private final HiveConf conf;
    public Factory(    IMetaStoreClient metaStoreClient,    HiveConf conf){
      this.metaStoreClient=metaStoreClient;
      this.conf=conf;
    }
    public StreamingAssert newStreamingAssert(    Table table) throws Exception {
      return newStreamingAssert(table,Collections.<String>emptyList());
    }
    public StreamingAssert newStreamingAssert(    Table table,    List<String> partition) throws Exception {
      return new StreamingAssert(metaStoreClient,conf,table,partition);
    }
  }
  private Table table;
  private List<String> partition;
  private IMetaStoreClient metaStoreClient;
  private Directory dir;
  private ValidTxnList txns;
  private List<AcidUtils.ParsedDelta> currentDeltas;
  private long min;
  private long max;
  private Path partitionLocation;
  StreamingAssert(  IMetaStoreClient metaStoreClient,  HiveConf conf,  Table table,  List<String> partition) throws Exception {
    this.metaStoreClient=metaStoreClient;
    this.table=table;
    this.partition=partition;
    txns=metaStoreClient.getValidTxns();
    partitionLocation=getPartitionLocation();
    dir=AcidUtils.getAcidState(partitionLocation,conf,txns);
    assertEquals(0,dir.getObsolete().size());
    assertEquals(0,dir.getOriginalFiles().size());
    currentDeltas=dir.getCurrentDirectories();
    min=Long.MAX_VALUE;
    max=Long.MIN_VALUE;
    System.out.println("Files found: ");
    for (    AcidUtils.ParsedDelta parsedDelta : currentDeltas) {
      System.out.println(parsedDelta.getPath().toString());
      max=Math.max(parsedDelta.getMaxTransaction(),max);
      min=Math.min(parsedDelta.getMinTransaction(),min);
    }
  }
  public void assertExpectedFileCount(  int expectedFileCount){
    assertEquals(expectedFileCount,currentDeltas.size());
  }
  public void assertNothingWritten(){
    assertExpectedFileCount(0);
  }
  public void assertMinTransactionId(  long expectedMinTransactionId){
    if (currentDeltas.isEmpty()) {
      throw new AssertionError("No data");
    }
    assertEquals(expectedMinTransactionId,min);
  }
  public void assertMaxTransactionId(  long expectedMaxTransactionId){
    if (currentDeltas.isEmpty()) {
      throw new AssertionError("No data");
    }
    assertEquals(expectedMaxTransactionId,max);
  }
  List<Record> readRecords() throws Exception {
    if (currentDeltas.isEmpty()) {
      throw new AssertionError("No data");
    }
    InputFormat<NullWritable,OrcStruct> inputFormat=new OrcInputFormat();
    JobConf job=new JobConf();
    job.set("mapred.input.dir",partitionLocation.toString());
    job.set("bucket_count",Integer.toString(table.getSd().getNumBuckets()));
    job.set(IOConstants.SCHEMA_EVOLUTION_COLUMNS,"id,msg");
    job.set(IOConstants.SCHEMA_EVOLUTION_COLUMNS_TYPES,"bigint:string");
    job.set(ConfVars.HIVE_TRANSACTIONAL_TABLE_SCAN.varname,"true");
    job.set(ValidTxnList.VALID_TXNS_KEY,txns.toString());
    InputSplit[] splits=inputFormat.getSplits(job,1);
    assertEquals(1,splits.length);
    final AcidRecordReader<NullWritable,OrcStruct> recordReader=(AcidRecordReader<NullWritable,OrcStruct>)inputFormat.getRecordReader(splits[0],job,Reporter.NULL);
    NullWritable key=recordReader.createKey();
    OrcStruct value=recordReader.createValue();
    List<Record> records=new ArrayList<>();
    while (recordReader.next(key,value)) {
      RecordIdentifier recordIdentifier=recordReader.getRecordIdentifier();
      Record record=new Record(new RecordIdentifier(recordIdentifier.getTransactionId(),recordIdentifier.getBucketId(),recordIdentifier.getRowId()),value.toString());
      System.out.println(record);
      records.add(record);
    }
    recordReader.close();
    return records;
  }
  private Path getPartitionLocation() throws NoSuchObjectException, MetaException, TException {
    Path partitionLocacation;
    if (partition.isEmpty()) {
      partitionLocacation=new Path(table.getSd().getLocation());
    }
 else {
      List<Partition> partitionEntries=metaStoreClient.listPartitions(table.getDbName(),table.getTableName(),partition,(short)1);
      partitionLocacation=new Path(partitionEntries.get(0).getSd().getLocation());
    }
    return partitionLocacation;
  }
public static class Record {
    private RecordIdentifier recordIdentifier;
    private String row;
    Record(    RecordIdentifier recordIdentifier,    String row){
      this.recordIdentifier=recordIdentifier;
      this.row=row;
    }
    public RecordIdentifier getRecordIdentifier(){
      return recordIdentifier;
    }
    public String getRow(){
      return row;
    }
    @Override public String toString(){
      return "Record [recordIdentifier=" + recordIdentifier + ", row="+ row+ "]";
    }
  }
}
