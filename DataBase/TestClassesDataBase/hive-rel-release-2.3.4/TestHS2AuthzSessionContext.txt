/** 
 * Test context information that gets passed to authorization factory
 */
public class TestHS2AuthzSessionContext {
  private static MiniHS2 miniHS2=null;
  private static HiveAuthzSessionContext sessionCtx;
  /** 
 * This factory captures the HiveAuthzSessionContext argument and returns mocked HiveAuthorizer class
 */
static class MockedHiveAuthorizerFactory implements HiveAuthorizerFactory {
    @Override public HiveAuthorizer createHiveAuthorizer(    HiveMetastoreClientFactory metastoreClientFactory,    HiveConf conf,    HiveAuthenticationProvider authenticator,    HiveAuthzSessionContext ctx){
      TestHS2AuthzSessionContext.sessionCtx=ctx;
      HiveAuthorizer mockedAuthorizer=Mockito.mock(HiveAuthorizer.class);
      return mockedAuthorizer;
    }
  }
  @BeforeClass public static void beforeTest() throws Exception {
    Class.forName(MiniHS2.getJdbcDriverName());
    HiveConf conf=new HiveConf();
    conf.setVar(ConfVars.HIVE_AUTHORIZATION_MANAGER,MockedHiveAuthorizerFactory.class.getName());
    conf.setVar(ConfVars.HIVE_AUTHENTICATOR_MANAGER,SessionStateUserAuthenticator.class.getName());
    conf.setBoolVar(ConfVars.HIVE_AUTHORIZATION_ENABLED,true);
    conf.setBoolVar(ConfVars.HIVE_SUPPORT_CONCURRENCY,false);
    conf.setBoolVar(ConfVars.HIVE_SERVER2_ENABLE_DOAS,false);
    miniHS2=new MiniHS2(conf);
    miniHS2.start(new HashMap<String,String>());
  }
  @AfterClass public static void afterTest() throws Exception {
    if (miniHS2.isStarted()) {
      miniHS2.stop();
    }
  }
  @Test public void testAuthzSessionContextContents() throws Exception {
    assertTrue("session string size check",sessionCtx.getSessionString().length() > 10);
    assertEquals("Client type ",HiveAuthzSessionContext.CLIENT_TYPE.HIVESERVER2,sessionCtx.getClientType());
  }
}
