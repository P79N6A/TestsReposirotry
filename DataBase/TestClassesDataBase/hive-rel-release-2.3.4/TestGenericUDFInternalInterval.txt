public class TestGenericUDFInternalInterval {
  @Test public void testDayInterval() throws Exception {
    try (GenericUDFInternalInterval udf=new GenericUDFInternalInterval()){
      ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(TypeInfoFactory.intTypeInfo,new IntWritable(HiveParser.TOK_INTERVAL_DAY_LITERAL)),PrimitiveObjectInspectorFactory.writableStringObjectInspector};
      DeferredObject[] args={new DeferredJavaObject(new ByteWritable((byte)4)),new DeferredJavaObject(new Text("8"))};
      PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
      Assert.assertEquals(TypeInfoFactory.intervalDayTimeTypeInfo,oi.getTypeInfo());
      HiveIntervalDayTimeWritable res=(HiveIntervalDayTimeWritable)udf.evaluate(args);
      Assert.assertEquals(8,res.getHiveIntervalDayTime().getDays());
    }
   }
  @Test public void testDayIntervalConstant() throws Exception {
    try (GenericUDFInternalInterval udf=new GenericUDFInternalInterval()){
      ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(TypeInfoFactory.intTypeInfo,new IntWritable(HiveParser.TOK_INTERVAL_DAY_LITERAL)),PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(TypeInfoFactory.intTypeInfo,new IntWritable(3))};
      PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
      Assert.assertEquals(TypeInfoFactory.intervalDayTimeTypeInfo,oi.getTypeInfo());
      ConstantObjectInspector coi=(ConstantObjectInspector)oi;
      HiveIntervalDayTimeWritable res=(HiveIntervalDayTimeWritable)coi.getWritableConstantValue();
      Assert.assertEquals(3,res.getHiveIntervalDayTime().getDays());
    }
   }
  @Test(expected=UDFArgumentException.class) public void testDoubleArgumentIsNotSupported() throws Exception {
    try (GenericUDFInternalInterval udf=new GenericUDFInternalInterval()){
      ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(TypeInfoFactory.intTypeInfo,new IntWritable(HiveParser.TOK_INTERVAL_DAY_LITERAL)),PrimitiveObjectInspectorFactory.writableDoubleObjectInspector};
      udf.initialize(inputOIs);
    }
   }
  @Test(expected=UDFArgumentException.class) public void testInvalidString() throws Exception {
    try (GenericUDFInternalInterval udf=new GenericUDFInternalInterval()){
      ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(TypeInfoFactory.intTypeInfo,new IntWritable(HiveParser.TOK_INTERVAL_DAY_LITERAL)),PrimitiveObjectInspectorFactory.writableStringObjectInspector};
      DeferredObject[] args={new DeferredJavaObject(new ByteWritable((byte)4)),new DeferredJavaObject(new Text("invalid"))};
      PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
      Assert.assertEquals(TypeInfoFactory.intervalDayTimeTypeInfo,oi.getTypeInfo());
      udf.evaluate(args);
    }
   }
  @Test public void testNullBypass() throws Exception {
    try (GenericUDFInternalInterval udf=new GenericUDFInternalInterval()){
      ObjectInspector[] inputOIs={PrimitiveObjectInspectorFactory.getPrimitiveWritableConstantObjectInspector(TypeInfoFactory.intTypeInfo,new IntWritable(HiveParser.TOK_INTERVAL_DAY_LITERAL)),PrimitiveObjectInspectorFactory.writableStringObjectInspector};
      DeferredObject[] args={new DeferredJavaObject(new ByteWritable((byte)4)),new DeferredJavaObject(null)};
      PrimitiveObjectInspector oi=(PrimitiveObjectInspector)udf.initialize(inputOIs);
      Assert.assertEquals(TypeInfoFactory.intervalDayTimeTypeInfo,oi.getTypeInfo());
      HiveIntervalDayTimeWritable res=(HiveIntervalDayTimeWritable)udf.evaluate(args);
      Assert.assertEquals(null,res);
    }
   }
}
