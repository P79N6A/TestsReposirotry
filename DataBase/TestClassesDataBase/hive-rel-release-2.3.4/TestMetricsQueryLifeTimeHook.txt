public class TestMetricsQueryLifeTimeHook {
  private MetricsQueryLifeTimeHook hook;
  private QueryLifeTimeHookContext ctx;
  private MetricRegistry metricRegistry;
  @Before public void before() throws Exception {
    HiveConf conf=new HiveConf();
    conf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,"local");
    conf.setVar(HiveConf.ConfVars.HIVE_METRICS_CLASS,CodahaleMetrics.class.getCanonicalName());
    conf.setVar(HiveConf.ConfVars.HIVE_METRICS_REPORTER,MetricsReporting.JSON_FILE.name() + "," + MetricsReporting.JMX.name());
    conf.setVar(HiveConf.ConfVars.HIVE_METRICS_JSON_FILE_INTERVAL,"100000s");
    MetricsFactory.init(conf);
    metricRegistry=((CodahaleMetrics)MetricsFactory.getInstance()).getMetricRegistry();
    hook=new MetricsQueryLifeTimeHook();
    ctx=new QueryLifeTimeHookContextImpl();
  }
  @Test public void testCompilationQueryMetric(){
    Timer timer=metricRegistry.getTimers().get(MetricsConstant.HS2_COMPILING_QUERIES);
    Counter counter=metricRegistry.getCounters().get(MetricsConstant.ACTIVE_CALLS + MetricsConstant.HS2_COMPILING_QUERIES);
    assertThat(timer,nullValue());
    assertThat(counter,nullValue());
    hook.beforeCompile(ctx);
    timer=metricRegistry.getTimers().get(MetricsConstant.HS2_COMPILING_QUERIES);
    counter=metricRegistry.getCounters().get(MetricsConstant.ACTIVE_CALLS + MetricsConstant.HS2_COMPILING_QUERIES);
    assertThat(timer.getCount(),equalTo(0l));
    assertThat(counter.getCount(),equalTo(1l));
    hook.afterCompile(ctx,false);
    timer=metricRegistry.getTimers().get(MetricsConstant.HS2_COMPILING_QUERIES);
    counter=metricRegistry.getCounters().get(MetricsConstant.ACTIVE_CALLS + MetricsConstant.HS2_COMPILING_QUERIES);
    assertThat(timer.getCount(),equalTo(1l));
    assertThat(counter.getCount(),equalTo(0l));
  }
  @Test public void testExecutionQueryMetric(){
    Timer timer=metricRegistry.getTimers().get(MetricsConstant.HS2_EXECUTING_QUERIES);
    Counter counter=metricRegistry.getCounters().get(MetricsConstant.ACTIVE_CALLS + MetricsConstant.HS2_EXECUTING_QUERIES);
    assertThat(timer,nullValue());
    assertThat(counter,nullValue());
    hook.beforeExecution(ctx);
    timer=metricRegistry.getTimers().get(MetricsConstant.HS2_EXECUTING_QUERIES);
    counter=metricRegistry.getCounters().get(MetricsConstant.ACTIVE_CALLS + MetricsConstant.HS2_EXECUTING_QUERIES);
    assertThat(timer.getCount(),equalTo(0l));
    assertThat(counter.getCount(),equalTo(1l));
    hook.afterExecution(ctx,false);
    timer=metricRegistry.getTimers().get(MetricsConstant.HS2_EXECUTING_QUERIES);
    counter=metricRegistry.getCounters().get(MetricsConstant.ACTIVE_CALLS + MetricsConstant.HS2_EXECUTING_QUERIES);
    assertThat(timer.getCount(),equalTo(1l));
    assertThat(counter.getCount(),equalTo(0l));
  }
  @Test public void testNoErrorOnDisabledMetrics() throws Exception {
    MetricsFactory.close();
    MetricsQueryLifeTimeHook emptyhook=new MetricsQueryLifeTimeHook();
    assertThat(MetricsFactory.getInstance(),nullValue());
    emptyhook.beforeCompile(ctx);
    emptyhook.afterCompile(ctx,false);
    emptyhook.beforeExecution(ctx);
    emptyhook.afterExecution(ctx,false);
  }
}
