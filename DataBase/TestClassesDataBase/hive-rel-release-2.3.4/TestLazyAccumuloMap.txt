/** 
 */
public class TestLazyAccumuloMap {
  protected byte[] toBytes(  int i) throws IOException {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    DataOutputStream out=new DataOutputStream(baos);
    out.writeInt(i);
    out.close();
    return baos.toByteArray();
  }
  @Test public void testStringMapWithProjection() throws SerDeException {
    AccumuloHiveRow row=new AccumuloHiveRow("row");
    row.add("cf1","foo","bar".getBytes());
    row.add("cf1","bar","foo".getBytes());
    row.add("cf2","foo1","bar1".getBytes());
    row.add("cf3","bar1","foo1".getBytes());
    HiveAccumuloMapColumnMapping mapping=new HiveAccumuloMapColumnMapping("cf1",null,ColumnEncoding.STRING,ColumnEncoding.STRING,"column",TypeInfoFactory.getMapTypeInfo(TypeInfoFactory.stringTypeInfo,TypeInfoFactory.stringTypeInfo).toString());
    Text nullSequence=new Text("\\N");
    ObjectInspector oi=LazyFactory.createLazyObjectInspector(TypeInfoUtils.getTypeInfosFromTypeString("map<string,string>").get(0),new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
    LazyAccumuloMap map=new LazyAccumuloMap((LazyMapObjectInspector)oi);
    map.init(row,mapping);
    Assert.assertEquals(2,map.getMapSize());
    Object o=map.getMapValueElement(new Text("foo"));
    Assert.assertNotNull(o);
    Assert.assertEquals(new Text("bar"),((LazyString)o).getWritableObject());
    o=map.getMapValueElement(new Text("bar"));
    Assert.assertNotNull(o);
    Assert.assertEquals(new Text("foo"),((LazyString)o).getWritableObject());
  }
  @Test public void testIntMap() throws SerDeException, IOException {
    AccumuloHiveRow row=new AccumuloHiveRow("row");
    row.add(new Text("cf1"),new Text("1"),"2".getBytes());
    row.add(new Text("cf1"),new Text("2"),"4".getBytes());
    row.add(new Text("cf1"),new Text("3"),"6".getBytes());
    HiveAccumuloMapColumnMapping mapping=new HiveAccumuloMapColumnMapping("cf1",null,ColumnEncoding.STRING,ColumnEncoding.STRING,"column",TypeInfoFactory.getMapTypeInfo(TypeInfoFactory.intTypeInfo,TypeInfoFactory.intTypeInfo).toString());
    Text nullSequence=new Text("\\N");
    ObjectInspector oi=LazyFactory.createLazyObjectInspector(TypeInfoUtils.getTypeInfosFromTypeString("map<int,int>").get(0),new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
    LazyAccumuloMap map=new LazyAccumuloMap((LazyMapObjectInspector)oi);
    map.init(row,mapping);
    Assert.assertEquals(3,map.getMapSize());
    Object o=map.getMapValueElement(new IntWritable(1));
    Assert.assertNotNull(o);
    Assert.assertEquals(new IntWritable(2),((LazyInteger)o).getWritableObject());
    o=map.getMapValueElement(new IntWritable(2));
    Assert.assertNotNull(o);
    Assert.assertEquals(new IntWritable(4),((LazyInteger)o).getWritableObject());
    o=map.getMapValueElement(new IntWritable(3));
    Assert.assertNotNull(o);
    Assert.assertEquals(new IntWritable(6),((LazyInteger)o).getWritableObject());
  }
  @Test public void testBinaryIntMap() throws SerDeException, IOException {
    AccumuloHiveRow row=new AccumuloHiveRow("row");
    row.add(new Text("cf1"),new Text(toBytes(1)),toBytes(2));
    row.add(new Text("cf1"),new Text(toBytes(2)),toBytes(4));
    row.add(new Text("cf1"),new Text(toBytes(3)),toBytes(6));
    HiveAccumuloMapColumnMapping mapping=new HiveAccumuloMapColumnMapping("cf1",null,ColumnEncoding.BINARY,ColumnEncoding.BINARY,"column",TypeInfoFactory.getMapTypeInfo(TypeInfoFactory.intTypeInfo,TypeInfoFactory.intTypeInfo).toString());
    Text nullSequence=new Text("\\N");
    ObjectInspector oi=LazyFactory.createLazyObjectInspector(TypeInfoUtils.getTypeInfosFromTypeString("map<int,int>").get(0),new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
    LazyAccumuloMap map=new LazyAccumuloMap((LazyMapObjectInspector)oi);
    map.init(row,mapping);
    Assert.assertEquals(3,map.getMapSize());
    Object o=map.getMapValueElement(new IntWritable(1));
    Assert.assertNotNull(o);
    Assert.assertEquals(new IntWritable(2),((LazyInteger)o).getWritableObject());
    o=map.getMapValueElement(new IntWritable(2));
    Assert.assertNotNull(o);
    Assert.assertEquals(new IntWritable(4),((LazyInteger)o).getWritableObject());
    o=map.getMapValueElement(new IntWritable(3));
    Assert.assertNotNull(o);
    Assert.assertEquals(new IntWritable(6),((LazyInteger)o).getWritableObject());
  }
  @Test public void testMixedSerializationMap() throws SerDeException, IOException {
    AccumuloHiveRow row=new AccumuloHiveRow("row");
    row.add(new Text("cf1"),new Text(toBytes(1)),"2".getBytes());
    row.add(new Text("cf1"),new Text(toBytes(2)),"4".getBytes());
    row.add(new Text("cf1"),new Text(toBytes(3)),"6".getBytes());
    HiveAccumuloMapColumnMapping mapping=new HiveAccumuloMapColumnMapping("cf1",null,ColumnEncoding.BINARY,ColumnEncoding.STRING,"column",TypeInfoFactory.getMapTypeInfo(TypeInfoFactory.intTypeInfo,TypeInfoFactory.intTypeInfo).toString());
    Text nullSequence=new Text("\\N");
    ObjectInspector oi=LazyFactory.createLazyObjectInspector(TypeInfoUtils.getTypeInfosFromTypeString("map<int,int>").get(0),new byte[]{(byte)1,(byte)2},0,nullSequence,false,(byte)0);
    LazyAccumuloMap map=new LazyAccumuloMap((LazyMapObjectInspector)oi);
    map.init(row,mapping);
    Assert.assertEquals(3,map.getMapSize());
    Object o=map.getMapValueElement(new IntWritable(1));
    Assert.assertNotNull(o);
    Assert.assertEquals(new IntWritable(2),((LazyInteger)o).getWritableObject());
    o=map.getMapValueElement(new IntWritable(2));
    Assert.assertNotNull(o);
    Assert.assertEquals(new IntWritable(4),((LazyInteger)o).getWritableObject());
    o=map.getMapValueElement(new IntWritable(3));
    Assert.assertNotNull(o);
    Assert.assertEquals(new IntWritable(6),((LazyInteger)o).getWritableObject());
  }
}
