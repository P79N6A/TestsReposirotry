private static class TestSignable implements Signable {
  public int masterKeyId;
  public byte index;
  public TestSignable(  byte i){
    index=i;
  }
  public TestSignable(  int keyId,  byte b){
    masterKeyId=keyId;
    index=b;
  }
  @Override public void setSignInfo(  int masterKeyId){
    this.masterKeyId=masterKeyId;
  }
  @Override public byte[] serialize() throws IOException {
    DataOutputBuffer dob=new DataOutputBuffer(5);
    dob.writeInt(masterKeyId);
    dob.write(index);
    byte[] b=dob.getData();
    dob.close();
    return b;
  }
  public static TestSignable deserialize(  byte[] bytes) throws IOException {
    DataInputBuffer db=new DataInputBuffer();
    db.reset(bytes,bytes.length);
    int keyId=db.readInt();
    byte b=db.readByte();
    db.close();
    return new TestSignable(keyId,b);
  }
  @Override public int hashCode(){
    return 31 * index + masterKeyId;
  }
  @Override public boolean equals(  Object obj){
    if (this == obj)     return true;
    if (!(obj instanceof TestSignable))     return false;
    TestSignable other=(TestSignable)obj;
    return (index == other.index) && (masterKeyId == other.masterKeyId);
  }
}
