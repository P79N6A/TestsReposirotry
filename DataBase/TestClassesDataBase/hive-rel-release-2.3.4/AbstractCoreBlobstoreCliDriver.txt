public abstract class AbstractCoreBlobstoreCliDriver extends CliAdapter {
  protected static QTestUtil qt;
  private static final String HCONF_TEST_BLOBSTORE_PATH="test.blobstore.path";
  private static final String HCONF_TEST_BLOBSTORE_PATH_UNIQUE=HCONF_TEST_BLOBSTORE_PATH + ".unique";
  private static String testBlobstorePathUnique;
  public AbstractCoreBlobstoreCliDriver(  AbstractCliConfig testCliConfig){
    super(testCliConfig);
  }
  @Override @BeforeClass public void beforeClass(){
    MiniClusterType miniMR=cliConfig.getClusterType();
    String hiveConfDir=cliConfig.getHiveConfDir();
    String initScript=cliConfig.getInitScript();
    String cleanupScript=cliConfig.getCleanupScript();
    boolean useHBaseMetastore=cliConfig.getMetastoreType() == MetastoreType.hbase;
    try {
      String hadoopVer=cliConfig.getHadoopVersion();
      qt=new QTestUtil((cliConfig.getResultsDir()),(cliConfig.getLogDir()),miniMR,hiveConfDir,hadoopVer,initScript,cleanupScript,useHBaseMetastore,true);
      if (Strings.isNullOrEmpty(qt.getConf().get(HCONF_TEST_BLOBSTORE_PATH))) {
        fail(String.format("%s must be set. Try setting in blobstore-conf.xml",HCONF_TEST_BLOBSTORE_PATH));
      }
      setupUniqueTestPath();
      qt.cleanUp();
      qt.createSources();
    }
 catch (    Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      throw new RuntimeException("Unexpected exception in static initialization",e);
    }
  }
  @Override @Before public void setUp(){
    try {
      qt.clearTestSideEffects();
    }
 catch (    Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      fail("Unexpected exception in setup");
    }
  }
  @Override @After public void tearDown(){
    try {
      qt.clearPostTestEffects();
    }
 catch (    Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      fail("Unexpected exception in tearDown");
    }
  }
  @Override @AfterClass public void shutdown() throws Exception {
    try {
      qt.shutdown();
      if (System.getenv(QTestUtil.QTEST_LEAVE_FILES) == null) {
        String rmUniquePathCommand=String.format("dfs -rmdir ${hiveconf:%s};",HCONF_TEST_BLOBSTORE_PATH_UNIQUE);
        qt.executeAdhocCommand(rmUniquePathCommand);
      }
    }
 catch (    Exception e) {
      System.err.println("Exception: " + e.getMessage());
      e.printStackTrace();
      System.err.flush();
      fail("Unexpected exception in shutdown");
    }
  }
  static String debugHint="\nSee ./itests/hive-blobstore/target/tmp/log/hive.log, " + "or check ./itests/hive-blobstore/target/surefire-reports/ for specific test cases logs.";
  protected void runTestHelper(  String tname,  String fname,  String fpath,  boolean expectSuccess) throws Exception {
    long startTime=System.currentTimeMillis();
    qt.getConf().set(HCONF_TEST_BLOBSTORE_PATH_UNIQUE,testBlobstorePathUnique);
    try {
      System.err.println("Begin query: " + fname);
      qt.addFile(fpath);
      if (qt.shouldBeSkipped(fname)) {
        System.err.println("Test " + fname + " skipped");
        return;
      }
      qt.cliInit(fname,false);
      int ecode=qt.executeClient(fname);
      if ((ecode == 0) ^ expectSuccess) {
        qt.failed(ecode,fname,debugHint);
      }
      ecode=qt.checkCliDriverResults(fname);
      if (ecode != 0) {
        qt.failedDiff(ecode,fname,debugHint);
      }
    }
 catch (    Throwable e) {
      qt.failed(e,fname,debugHint);
    }
    long elapsedTime=System.currentTimeMillis() - startTime;
    System.err.println("Done query: " + fname + " elapsedTime="+ elapsedTime / 1000 + "s");
    assertTrue("Test passed",true);
  }
  /** 
 * Generates a unique test path for this particular CliDriver in the following form: ${test.blobstore.path}/CoreBlobstore[Negative]CliDriver/20160101.053046.332-{random number 000-999} 20160101.053046.332 represents the current datetime: {year}{month}{day}.{hour}{minute}{second}.{millisecond} Random integer 000-999 included to avoid collisions when two test runs are started at the same millisecond with the same ${test.blobstore.path} (possible if test runs are controlled by an automated system)
 */
  private void setupUniqueTestPath(){
    String testBlobstorePath=new VariableSubstitution(new HiveVariableSource(){
      @Override public Map<String,String> getHiveVariable(){
        return null;
      }
    }
).substitute(new HiveConf(),qt.getConf().get(HCONF_TEST_BLOBSTORE_PATH));
    testBlobstorePath=QTestUtil.ensurePathEndsInSlash(testBlobstorePath);
    testBlobstorePath+=QTestUtil.ensurePathEndsInSlash(this.getClass().getSimpleName());
    String uid=new SimpleDateFormat("yyyyMMdd.HHmmss.SSS").format(Calendar.getInstance().getTime()) + "-" + String.format("%03d",(int)(Math.random() * 999));
    testBlobstorePathUnique=testBlobstorePath + uid;
    qt.addPatternWithMaskComment(testBlobstorePathUnique,String.format("### %s ###",HCONF_TEST_BLOBSTORE_PATH));
  }
}
