public class TestVectorMapJoinFastBytesHashMultiSet extends CommonFastHashTable {
  @Test public void testOneKey() throws Exception {
    random=new Random(5255);
    VectorMapJoinFastMultiKeyHashMultiSet map=new VectorMapJoinFastMultiKeyHashMultiSet(false,CAPACITY,LOAD_FACTOR,WB_SIZE,-1);
    VerifyFastBytesHashMultiSet verifyTable=new VerifyFastBytesHashMultiSet();
    byte[] key=new byte[random.nextInt(MAX_KEY_LENGTH)];
    random.nextBytes(key);
    map.testPutRow(key);
    verifyTable.add(key);
    verifyTable.verify(map);
    map.testPutRow(key);
    verifyTable.add(key);
    verifyTable.verify(map);
    map.testPutRow(key);
    verifyTable.add(key);
    verifyTable.verify(map);
  }
  @Test public void testMultipleKeysSingleValue() throws Exception {
    random=new Random(2374);
    VectorMapJoinFastMultiKeyHashMultiSet map=new VectorMapJoinFastMultiKeyHashMultiSet(false,CAPACITY,LOAD_FACTOR,WB_SIZE,-1);
    VerifyFastBytesHashMultiSet verifyTable=new VerifyFastBytesHashMultiSet();
    int keyCount=100 + random.nextInt(1000);
    for (int i=0; i < keyCount; i++) {
      byte[] key=new byte[random.nextInt(MAX_KEY_LENGTH)];
      random.nextBytes(key);
      if (!verifyTable.contains(key)) {
        break;
      }
      map.testPutRow(key);
      verifyTable.add(key);
    }
    verifyTable.verify(map);
  }
  @Test public void testGetNonExistent() throws Exception {
    random=new Random(98222);
    VectorMapJoinFastMultiKeyHashMultiSet map=new VectorMapJoinFastMultiKeyHashMultiSet(false,CAPACITY,LOAD_FACTOR,WB_SIZE,-1);
    VerifyFastBytesHashMultiSet verifyTable=new VerifyFastBytesHashMultiSet();
    byte[] key1=new byte[random.nextInt(MAX_KEY_LENGTH)];
    random.nextBytes(key1);
    map.testPutRow(key1);
    verifyTable.add(key1);
    verifyTable.verify(map);
    byte[] key2=new byte[random.nextInt(MAX_KEY_LENGTH)];
    random.nextBytes(key2);
    VectorMapJoinHashMultiSetResult hashMultiSetResult=map.createHashMultiSetResult();
    JoinUtil.JoinResult joinResult=map.contains(key2,0,key2.length,hashMultiSetResult);
    assertTrue(joinResult == JoinUtil.JoinResult.NOMATCH);
    map.testPutRow(key2);
    verifyTable.add(key2);
    verifyTable.verify(map);
    byte[] key3=new byte[random.nextInt(MAX_KEY_LENGTH)];
    random.nextBytes(key3);
    hashMultiSetResult=map.createHashMultiSetResult();
    joinResult=map.contains(key3,0,key3.length,hashMultiSetResult);
    assertTrue(joinResult == JoinUtil.JoinResult.NOMATCH);
    assertEquals(hashMultiSetResult.count(),0);
  }
  @Test public void testFullMap() throws Exception {
    random=new Random(9024);
    VectorMapJoinFastMultiKeyHashMultiSet map=new VectorMapJoinFastMultiKeyHashMultiSet(false,CAPACITY,1f,WB_SIZE,-1);
    VerifyFastBytesHashMultiSet verifyTable=new VerifyFastBytesHashMultiSet();
    for (int i=0; i < CAPACITY; i++) {
      byte[] key;
      while (true) {
        key=new byte[random.nextInt(MAX_KEY_LENGTH)];
        random.nextBytes(key);
        if (!verifyTable.contains(key)) {
          break;
        }
      }
      map.testPutRow(key);
      verifyTable.add(key);
    }
    verifyTable.verify(map);
    byte[] anotherKey;
    while (true) {
      anotherKey=new byte[random.nextInt(MAX_KEY_LENGTH)];
      random.nextBytes(anotherKey);
      if (!verifyTable.contains(anotherKey)) {
        break;
      }
    }
    VectorMapJoinHashMultiSetResult hashMultiSetResult=map.createHashMultiSetResult();
    JoinUtil.JoinResult joinResult=map.contains(anotherKey,0,anotherKey.length,hashMultiSetResult);
    assertTrue(joinResult == JoinUtil.JoinResult.NOMATCH);
  }
  @Test public void testExpand() throws Exception {
    random=new Random(2933);
    VectorMapJoinFastMultiKeyHashMultiSet map=new VectorMapJoinFastMultiKeyHashMultiSet(false,1,0.0000001f,WB_SIZE,-1);
    VerifyFastBytesHashMultiSet verifyTable=new VerifyFastBytesHashMultiSet();
    for (int i=0; i < 18; ++i) {
      byte[] key;
      while (true) {
        key=new byte[random.nextInt(MAX_KEY_LENGTH)];
        random.nextBytes(key);
        if (!verifyTable.contains(key)) {
          break;
        }
      }
      map.testPutRow(key);
      verifyTable.add(key);
    }
    verifyTable.verify(map);
  }
  public void addAndVerifyMultipleKeyMultipleValue(  int keyCount,  VectorMapJoinFastMultiKeyHashMultiSet map,  VerifyFastBytesHashMultiSet verifyTable) throws HiveException, IOException {
    for (int i=0; i < keyCount; i++) {
      byte[] value=new byte[generateLargeCount() - 1];
      random.nextBytes(value);
      if (random.nextBoolean() || verifyTable.getCount() == 0) {
        byte[] key;
        while (true) {
          key=new byte[random.nextInt(MAX_KEY_LENGTH)];
          random.nextBytes(key);
          if (!verifyTable.contains(key)) {
            break;
          }
        }
        map.testPutRow(key);
        verifyTable.add(key);
      }
 else {
        byte[] randomExistingKey=verifyTable.addRandomExisting(value,random);
        map.testPutRow(randomExistingKey);
      }
    }
    verifyTable.verify(map);
  }
  @Test public void testMultipleKeysMultipleValue() throws Exception {
    random=new Random(5445);
    VectorMapJoinFastMultiKeyHashMultiSet map=new VectorMapJoinFastMultiKeyHashMultiSet(false,LARGE_CAPACITY,LOAD_FACTOR,LARGE_WB_SIZE,-1);
    VerifyFastBytesHashMultiSet verifyTable=new VerifyFastBytesHashMultiSet();
    int keyCount=1000;
    addAndVerifyMultipleKeyMultipleValue(keyCount,map,verifyTable);
  }
  @Test public void testLargeAndExpand() throws Exception {
    random=new Random(5637);
    VectorMapJoinFastMultiKeyHashMultiSet map=new VectorMapJoinFastMultiKeyHashMultiSet(false,MODERATE_CAPACITY,LOAD_FACTOR,MODERATE_WB_SIZE,-1);
    VerifyFastBytesHashMultiSet verifyTable=new VerifyFastBytesHashMultiSet();
    int keyCount=1000;
    addAndVerifyMultipleKeyMultipleValue(keyCount,map,verifyTable);
  }
}
