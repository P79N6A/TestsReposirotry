public class TestColumnProjectionUtils {
  private Configuration conf;
  @Before public void setUp() throws Exception {
    conf=new Configuration();
  }
  @Test public void testReadAllColumns(){
    assertTrue(ColumnProjectionUtils.isReadAllColumns(conf));
    ColumnProjectionUtils.appendReadColumns(conf,Arrays.asList(new Integer[]{0,1,2}));
    ColumnProjectionUtils.setReadAllColumns(conf);
    assertEquals(Collections.EMPTY_LIST,ColumnProjectionUtils.getReadColumnIDs(conf));
    assertTrue(ColumnProjectionUtils.isReadAllColumns(conf));
  }
  @Test public void testReadColumnIds(){
    List<Integer> columnIds=new ArrayList<Integer>();
    List<Integer> actual;
    assertEquals(Collections.EMPTY_LIST,ColumnProjectionUtils.getReadColumnIDs(conf));
    actual=ColumnProjectionUtils.getReadColumnIDs(conf);
    assertEquals(Collections.EMPTY_LIST,actual);
    ColumnProjectionUtils.appendReadColumns(conf,columnIds);
    actual=ColumnProjectionUtils.getReadColumnIDs(conf);
    assertEquals(Collections.EMPTY_LIST,actual);
    assertFalse(ColumnProjectionUtils.isReadAllColumns(conf));
    columnIds.add(1);
    ColumnProjectionUtils.appendReadColumns(conf,Collections.singletonList(1));
    assertEquals(columnIds,ColumnProjectionUtils.getReadColumnIDs(conf));
    columnIds.add(2);
    ColumnProjectionUtils.appendReadColumns(conf,Collections.singletonList(2));
    actual=ColumnProjectionUtils.getReadColumnIDs(conf);
    Collections.sort(actual);
    assertEquals(columnIds,actual);
    columnIds.add(3);
    ColumnProjectionUtils.appendReadColumns(conf,Collections.singletonList(3));
    actual=ColumnProjectionUtils.getReadColumnIDs(conf);
    Collections.sort(actual);
    assertEquals(columnIds,actual);
    assertFalse(ColumnProjectionUtils.isReadAllColumns(conf));
  }
  @Test public void testDeprecatedMethods(){
    List<Integer> columnIds=new ArrayList<Integer>();
    List<Integer> actual;
    assertEquals(Collections.EMPTY_LIST,ColumnProjectionUtils.getReadColumnIDs(conf));
    actual=ColumnProjectionUtils.getReadColumnIDs(conf);
    assertEquals(Collections.EMPTY_LIST,actual);
    ColumnProjectionUtils.setReadColumnIDs(conf,columnIds);
    actual=ColumnProjectionUtils.getReadColumnIDs(conf);
    assertEquals(Collections.EMPTY_LIST,actual);
    columnIds.add(1);
    ColumnProjectionUtils.setReadColumnIDs(conf,Collections.singletonList(1));
    actual=ColumnProjectionUtils.getReadColumnIDs(conf);
    Collections.sort(actual);
    assertEquals(columnIds,actual);
    columnIds.add(2);
    ColumnProjectionUtils.appendReadColumnIDs(conf,Collections.singletonList(2));
    actual=ColumnProjectionUtils.getReadColumnIDs(conf);
    Collections.sort(actual);
    assertEquals(columnIds,actual);
    assertFalse(ColumnProjectionUtils.isReadAllColumns(conf));
    ColumnProjectionUtils.setFullyReadColumns(conf);
    assertTrue(ColumnProjectionUtils.isReadAllColumns(conf));
  }
}
