public static class MockFile {
  final Path path;
  int blockSize;
  int length;
  MockBlock[] blocks;
  byte[] content;
  public MockFile(  String path,  int blockSize,  byte[] content,  MockBlock... blocks){
    this.path=new Path(path);
    this.blockSize=blockSize;
    this.blocks=blocks;
    this.content=content;
    this.length=content.length;
    int offset=0;
    for (    MockBlock block : blocks) {
      block.offset=offset;
      block.length=Math.min(length - offset,blockSize);
      offset+=block.length;
    }
  }
  @Override public int hashCode(){
    return path.hashCode() + 31 * length;
  }
  @Override public boolean equals(  final Object obj){
    if (!(obj instanceof MockFile)) {
      return false;
    }
    return ((MockFile)obj).path.equals(this.path) && ((MockFile)obj).length == this.length;
  }
  @Override public String toString(){
    StringBuilder buffer=new StringBuilder();
    buffer.append("mockFile{path: ");
    buffer.append(path.toString());
    buffer.append(", blkSize: ");
    buffer.append(blockSize);
    buffer.append(", len: ");
    buffer.append(length);
    buffer.append(", blocks: [");
    for (int i=0; i < blocks.length; i++) {
      if (i != 0) {
        buffer.append(", ");
      }
      buffer.append(blocks[i]);
    }
    buffer.append("]}");
    return buffer.toString();
  }
}
