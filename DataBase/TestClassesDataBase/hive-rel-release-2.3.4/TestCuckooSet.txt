public class TestCuckooSet {
  private static int MAX_SIZE=65437;
  @Test public void testSetLong(){
    Long[] values={1L,2L,3L,1000L,2000L,3000L,8L,8L,9L,13L,17L,22L,23L,24L,25L,-26L,27L,28L,29L,30L,111111111111111L,-444444444444444L,Long.MIN_VALUE};
    Long[] negatives={0L,4L,4000L,-2L,19L,222222222222222L,-333333333333333L};
    CuckooSetLong s=new CuckooSetLong(values.length);
    for (    Long v : values) {
      s.insert(v);
    }
    for (    Long v : values) {
      assertTrue(s.lookup(v));
    }
    for (    Long v : negatives) {
      assertFalse(s.lookup(v));
    }
    Long[] values2={1L,2L,3L,1000L,2000L,3000L,8L,8L,9L,13L,17L,22L,23L,24L,25L,-26L,27L,28L,29L,30L,111111111111111L,-444444444444444L};
    Long[] negatives2={0L,4L,4000L,-2L,19L,222222222222222L,-333333333333333L,Long.MIN_VALUE};
    s=new CuckooSetLong(values2.length);
    for (    Long v : values2) {
      s.insert(v);
    }
    for (    Long v : values2) {
      assertTrue(s.lookup(v));
    }
    for (    Long v : negatives2) {
      assertFalse(s.lookup(v));
    }
  }
  @Test public void testSetLongRandom(){
    long[] values;
    Random gen=new Random(98763537);
    for (int i=0; i < 200; ) {
      int size=gen.nextInt() % MAX_SIZE;
      if (size <= 0) {
        continue;
      }
      i++;
      values=new long[size];
      loadRandom(values,gen);
      CuckooSetLong s=new CuckooSetLong(size);
      loadSet(s,values);
      for (int j=0; j != size; j++) {
        assertTrue(s.lookup(values[j]));
      }
    }
  }
  @Test public void testSetDouble(){
    Double[] values={7021.0D,5780.0D,0D,-1D,1.999e50D};
    Double[] negatives={7000.0D,-2D,1.9999e50D};
    CuckooSetDouble s=new CuckooSetDouble(values.length);
    for (    Double v : values) {
      s.insert(v);
    }
    for (    Double v : values) {
      assertTrue(s.lookup(v));
    }
    for (    Double v : negatives) {
      assertFalse(s.lookup(v));
    }
  }
  @Test public void testSetBytes(){
    String[] strings={"foo","bar","baz","a","","x1341","Z"};
    String[] negativeStrings={"not","in","the","set","foobar"};
    byte[][] values=getByteArrays(strings);
    byte[][] negatives=getByteArrays(negativeStrings);
    CuckooSetBytes s=new CuckooSetBytes(strings.length);
    for (    byte[] v : values) {
      s.insert(v);
    }
    for (    byte[] v : values) {
      assertTrue(s.lookup(v,0,v.length));
    }
    for (    byte[] v : negatives) {
      assertFalse(s.lookup(v,0,v.length));
    }
    byte[] buf=getUTF8Bytes("thewordfooisinhere");
    assertTrue(s.lookup(buf,7,3));
  }
  @Test public void testSetBytesLargeRandom(){
    byte[][] values;
    Random gen=new Random(98763537);
    for (int i=0; i < 200; ) {
      int size=gen.nextInt() % MAX_SIZE;
      if (size <= 0) {
        continue;
      }
      i++;
      values=new byte[size][];
      loadRandomBytes(values,gen);
      CuckooSetBytes s=new CuckooSetBytes(size);
      loadSet(s,values);
      for (int j=0; j != size; j++) {
        assertTrue(s.lookup(values[j],0,values[j].length));
      }
    }
  }
  public void loadRandomBytes(  byte[][] values,  Random gen){
    for (int i=0; i != values.length; i++) {
      values[i]=getUTF8Bytes(Integer.toString(gen.nextInt()));
    }
  }
  private byte[] getUTF8Bytes(  String s){
    byte[] v=null;
    try {
      v=s.getBytes("UTF-8");
    }
 catch (    Exception e) {
      ;
    }
    return v;
  }
  private byte[][] getByteArrays(  String[] strings){
    byte[][] values=new byte[strings.length][];
    for (int i=0; i != strings.length; i++) {
      try {
        values[i]=strings[i].getBytes("UTF-8");
      }
 catch (      Exception e) {
        ;
      }
    }
    return values;
  }
  private void loadSet(  CuckooSetLong s,  long[] values){
    for (    Long v : values) {
      s.insert(v);
    }
  }
  private void loadSet(  CuckooSetBytes s,  byte[][] values){
    for (    byte[] v : values) {
      s.insert(v);
    }
  }
  private void loadRandom(  long[] a,  Random gen){
    int size=a.length;
    for (int i=0; i != size; i++) {
      a[i]=gen.nextLong();
    }
  }
}
