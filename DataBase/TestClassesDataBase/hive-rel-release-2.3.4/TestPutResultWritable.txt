public class TestPutResultWritable {
  @Test public void testResult() throws Exception {
    KeyValue[] kvs=new KeyValue[]{new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfa"),Bytes.toBytes("col1"),Bytes.toBytes("cfacol1")),new KeyValue(Bytes.toBytes("test-row"),Bytes.toBytes("cfa"),Bytes.toBytes("col2"),Bytes.toBytes("cfacol2"))};
    Result expected=new Result(kvs);
    ResultWritable actual=copy(new ResultWritable(expected),new ResultWritable());
    Assert.assertArrayEquals(expected.raw(),actual.getResult().raw());
  }
  @Test public void testPut() throws Exception {
    byte[] row=Bytes.toBytes("test-row");
    KeyValue[] kvs=new KeyValue[]{new KeyValue(row,Bytes.toBytes("cfa"),Bytes.toBytes("col1"),Bytes.toBytes("cfacol1")),new KeyValue(row,Bytes.toBytes("cfa"),Bytes.toBytes("col2"),Bytes.toBytes("cfacol2"))};
    Put expected=new Put(row);
    for (int i=0; i < kvs.length; i++) {
      expected.add(kvs[i]);
    }
    PutWritable actual=copy(new PutWritable(expected),new PutWritable());
    Assert.assertArrayEquals(expected.getRow(),actual.getPut().getRow());
    Assert.assertEquals(expected.getFamilyMap(),actual.getPut().getFamilyMap());
  }
  private <T extends Writable>T copy(  T oldWritable,  T newWritable) throws IOException {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    DataOutputStream out=new DataOutputStream(baos);
    oldWritable.write(out);
    ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());
    DataInputStream in=new DataInputStream(bais);
    newWritable.readFields(in);
    return newWritable;
  }
}
