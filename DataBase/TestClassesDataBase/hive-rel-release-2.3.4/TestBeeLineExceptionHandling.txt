public class TestBeeLineExceptionHandling {
public class TestBeeline extends BeeLine {
    private String expectedLoc;
    private int logCount;
    public TestBeeline(    String expectedLoc){
      this.expectedLoc=expectedLoc;
      this.logCount=0;
    }
    @Override boolean error(    String log){
      if (logCount == 0) {
        Assert.assertEquals(loc(expectedLoc),log);
      }
 else {
        Assert.assertEquals("Error: org.apache.thrift.transport.TTransportException " + "(state=,code=0)",log);
      }
      logCount++;
      return false;
    }
  }
  @Test public void testHandleSQLExceptionLog() throws Exception {
    checkException(TTransportException.ALREADY_OPEN,"hs2-connection-already-open");
    checkException(TTransportException.END_OF_FILE,"hs2-unexpected-end-of-file");
    checkException(TTransportException.NOT_OPEN,"hs2-could-not-open-connection");
    checkException(TTransportException.TIMED_OUT,"hs2-connection-timed-out");
    checkException(TTransportException.UNKNOWN,"hs2-unknown-connection-problem");
    checkException(-1,"hs2-unexpected-error");
  }
  private void checkException(  int type,  String loc){
    BeeLine testBeeLine=new TestBeeline(loc);
    TTransportException tTransportException=new TTransportException(type);
    SQLException sqlException=new SQLException(tTransportException);
    testBeeLine.handleSQLException(sqlException);
  }
}
