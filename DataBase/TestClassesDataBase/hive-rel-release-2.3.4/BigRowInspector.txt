public static class BigRowInspector extends StructObjectInspector {
  static final List<BigRowField> FIELDS=new ArrayList<BigRowField>();
static {
    FIELDS.add(new BigRowField(0,"booleanValue",PrimitiveObjectInspectorFactory.javaBooleanObjectInspector));
    FIELDS.add(new BigRowField(1,"byteValue",PrimitiveObjectInspectorFactory.javaByteObjectInspector));
    FIELDS.add(new BigRowField(2,"shortValue",PrimitiveObjectInspectorFactory.javaShortObjectInspector));
    FIELDS.add(new BigRowField(3,"intValue",PrimitiveObjectInspectorFactory.javaIntObjectInspector));
    FIELDS.add(new BigRowField(4,"longValue",PrimitiveObjectInspectorFactory.javaLongObjectInspector));
    FIELDS.add(new BigRowField(5,"floatValue",PrimitiveObjectInspectorFactory.javaFloatObjectInspector));
    FIELDS.add(new BigRowField(6,"doubleValue",PrimitiveObjectInspectorFactory.javaDoubleObjectInspector));
    FIELDS.add(new BigRowField(7,"stringValue",PrimitiveObjectInspectorFactory.javaStringObjectInspector));
    FIELDS.add(new BigRowField(8,"decimalValue",PrimitiveObjectInspectorFactory.javaHiveDecimalObjectInspector));
    FIELDS.add(new BigRowField(9,"dateValue",PrimitiveObjectInspectorFactory.javaDateObjectInspector));
    FIELDS.add(new BigRowField(10,"timestampValue",PrimitiveObjectInspectorFactory.javaTimestampObjectInspector));
  }
  @Override public List<? extends StructField> getAllStructFieldRefs(){
    return FIELDS;
  }
  @Override public StructField getStructFieldRef(  String fieldName){
    for (    StructField field : FIELDS) {
      if (field.getFieldName().equals(fieldName)) {
        return field;
      }
    }
    throw new IllegalArgumentException("Can't find field " + fieldName);
  }
  @Override public Object getStructFieldData(  Object data,  StructField fieldRef){
    BigRow obj=(BigRow)data;
switch (((BigRowField)fieldRef).id) {
case 0:
      return obj.booleanValue;
case 1:
    return obj.byteValue;
case 2:
  return obj.shortValue;
case 3:
return obj.intValue;
case 4:
return obj.longValue;
case 5:
return obj.floatValue;
case 6:
return obj.doubleValue;
case 7:
return obj.stringValue;
case 8:
return obj.decimalValue;
case 9:
return obj.dateValue;
case 10:
return obj.timestampValue;
}
throw new IllegalArgumentException("No such field " + fieldRef);
}
@Override public List<Object> getStructFieldsDataAsList(Object data){
BigRow obj=(BigRow)data;
List<Object> result=new ArrayList<Object>(11);
result.add(obj.booleanValue);
result.add(obj.byteValue);
result.add(obj.shortValue);
result.add(obj.intValue);
result.add(obj.longValue);
result.add(obj.floatValue);
result.add(obj.doubleValue);
result.add(obj.stringValue);
result.add(obj.decimalValue);
result.add(obj.dateValue);
result.add(obj.timestampValue);
return result;
}
@Override public String getTypeName(){
return "struct<booleanValue:boolean,byteValue:tinyint," + "shortValue:smallint,intValue:int,longValue:bigint," + "floatValue:float,doubleValue:double,stringValue:string,"+ "decimalValue:decimal>";
}
@Override public Category getCategory(){
return Category.STRUCT;
}
}
