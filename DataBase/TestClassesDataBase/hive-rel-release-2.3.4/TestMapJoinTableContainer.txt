public class TestMapJoinTableContainer {
  private static final Object[] KEY=new Object[]{new Text("key")};
  private static final Object[] VALUE=new Object[]{new Text("value")};
  private ByteArrayOutputStream baos;
  private ObjectOutputStream out;
  private ObjectInputStream in;
  private MapJoinPersistableTableContainer container;
  private MapJoinTableContainerSerDe containerSerde;
  private MapJoinKeyObject key;
  private MapJoinRowContainer rowContainer;
  @Before public void setup() throws Exception {
    key=new MapJoinKeyObject(KEY);
    rowContainer=new MapJoinEagerRowContainer();
    rowContainer.addRow(VALUE);
    baos=new ByteArrayOutputStream();
    out=new ObjectOutputStream(baos);
    LazyBinarySerDe keySerde=new LazyBinarySerDe();
    Properties keyProps=new Properties();
    keyProps.put(serdeConstants.LIST_COLUMNS,"v1");
    keyProps.put(serdeConstants.LIST_COLUMN_TYPES,"string");
    SerDeUtils.initializeSerDe(keySerde,null,keyProps,null);
    LazyBinarySerDe valueSerde=new LazyBinarySerDe();
    Properties valueProps=new Properties();
    valueProps.put(serdeConstants.LIST_COLUMNS,"v1");
    valueProps.put(serdeConstants.LIST_COLUMN_TYPES,"string");
    SerDeUtils.initializeSerDe(valueSerde,null,keyProps,null);
    containerSerde=new MapJoinTableContainerSerDe(new MapJoinObjectSerDeContext(keySerde,false),new MapJoinObjectSerDeContext(valueSerde,false));
    container=new HashMapWrapper();
  }
  @Test public void testSerialization() throws Exception {
    container.put(key,rowContainer);
    containerSerde.persist(out,container);
    out.close();
    in=new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));
    container=containerSerde.load(in);
    Utilities.testEquality(rowContainer,container.get(key));
  }
  @Test public void testDummyContainer() throws Exception {
    MapJoinTableContainerSerDe.persistDummyTable(out);
    out.close();
    in=new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));
    container=containerSerde.load(in);
    Assert.assertEquals(0,container.size());
    Assert.assertTrue(container.entrySet().isEmpty());
  }
}
