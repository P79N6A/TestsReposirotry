public static class DummyRule extends RelOptRule {
  public static final DummyRule INSTANCE=new DummyRule();
  public int numberMatches;
  public int numberOnMatch;
  private DummyRule(){
    super(operand(RelNode.class,any()));
    numberMatches=0;
    numberOnMatch=0;
  }
  @Override public boolean matches(  RelOptRuleCall call){
    final RelNode node=call.rel(0);
    numberMatches++;
    HiveRulesRegistry registry=call.getPlanner().getContext().unwrap(HiveRulesRegistry.class);
    if (registry != null && registry.getVisited(this).contains(node)) {
      return false;
    }
    return true;
  }
  @Override public void onMatch(  RelOptRuleCall call){
    final RelNode node=call.rel(0);
    numberOnMatch++;
    if (numberOnMatch > 1) {
      return;
    }
    HiveRulesRegistry registry=call.getPlanner().getContext().unwrap(HiveRulesRegistry.class);
    if (registry != null) {
      registry.registerVisited(this,node);
    }
    final RelNode newNode=new DummyNode(node.getCluster(),node.getTraitSet());
    if (registry != null) {
      registry.registerVisited(this,newNode);
    }
    call.transformTo(newNode);
  }
}
