/** 
 * Tests to verify operation logging layout for different modes.
 */
public class TestOperationLoggingLayout {
  protected static HiveConf hiveConf;
  protected static String tableName;
  private File dataFile;
  protected CLIServiceClient client;
  protected static MiniHS2 miniHS2=null;
  protected static Map<String,String> confOverlay;
  protected SessionHandle sessionHandle;
  protected final String sql="select * from " + tableName;
  private final String sqlCntStar="select count(*) from " + tableName;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    tableName="TestOperationLoggingLayout_table";
    hiveConf=new HiveConf();
    hiveConf.set(HiveConf.ConfVars.HIVE_SERVER2_LOGGING_OPERATION_LEVEL.varname,"execution");
    miniHS2=new MiniHS2(hiveConf);
    confOverlay=new HashMap<String,String>();
    confOverlay.put(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY.varname,"false");
    miniHS2.start(confOverlay);
  }
  /** 
 * Open a session, and create a table for cases usage
 * @throws Exception
 */
  @Before public void setUp() throws Exception {
    dataFile=new File(hiveConf.get("test.data.files"),"kv1.txt");
    client=miniHS2.getServiceClient();
    sessionHandle=setupSession();
  }
  @After public void tearDown() throws Exception {
    String queryString="DROP TABLE " + tableName;
    client.executeStatement(sessionHandle,queryString,null);
    client.closeSession(sessionHandle);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    miniHS2.stop();
  }
  @Test public void testSwitchLogLayout() throws Exception {
    OperationHandle operationHandle=client.executeStatement(sessionHandle,sqlCntStar,null);
    RowSet rowSetLog=client.fetchResults(operationHandle,FetchOrientation.FETCH_FIRST,1000,FetchType.LOG);
    Iterator<Object[]> iter=rowSetLog.iterator();
    while (iter.hasNext()) {
      String row=iter.next()[0].toString();
      Assert.assertEquals(true,row.matches("^.*(FATAL|ERROR|WARN|INFO|DEBUG|TRACE).*$"));
    }
    String queryString="set hive.server2.logging.operation.level=verbose";
    client.executeStatement(sessionHandle,queryString,null);
    operationHandle=client.executeStatement(sessionHandle,sqlCntStar,null);
    rowSetLog=client.fetchResults(operationHandle,FetchOrientation.FETCH_FIRST,10,FetchType.LOG);
    iter=rowSetLog.iterator();
    while (iter.hasNext()) {
      String row=iter.next()[0].toString();
      Assert.assertEquals(true,row.matches("^\\d{2}[/](0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01]).*$"));
    }
  }
  private SessionHandle setupSession() throws Exception {
    SessionHandle sessionHandle=client.openSession(null,null,null);
    String queryString="SET hive.lock.manager=" + "org.apache.hadoop.hive.ql.lockmgr.EmbeddedLockManager";
    client.executeStatement(sessionHandle,queryString,null);
    queryString="DROP TABLE IF EXISTS " + tableName;
    client.executeStatement(sessionHandle,queryString,null);
    queryString="create table " + tableName + " (key int, value string)";
    client.executeStatement(sessionHandle,queryString,null);
    queryString="load data local inpath '" + dataFile + "' into table "+ tableName;
    client.executeStatement(sessionHandle,queryString,null);
    OperationHandle operationHandle=client.executeStatement(sessionHandle,sql,null);
    RowSet rowSetResult=client.fetchResults(operationHandle);
    Assert.assertEquals(500,rowSetResult.numRows());
    Assert.assertEquals(238,rowSetResult.iterator().next()[0]);
    Assert.assertEquals("val_238",rowSetResult.iterator().next()[1]);
    return sessionHandle;
  }
}
