public class FlushStatementNpeTest {
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void initDatabase() throws Exception {
    Connection conn=null;
    try {
      Class.forName("org.hsqldb.jdbcDriver");
      conn=DriverManager.getConnection("jdbc:hsqldb:mem:flush_statement_npe","sa","");
      Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/flush_statement_npe/CreateDB.sql");
      ScriptRunner runner=new ScriptRunner(conn);
      runner.setLogWriter(null);
      runner.setErrorLogWriter(null);
      runner.runScript(reader);
      conn.commit();
      reader.close();
      reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/flush_statement_npe/ibatisConfig.xml");
      sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
      reader.close();
    }
  finally {
      if (conn != null) {
        conn.close();
      }
    }
  }
  @Test public void testSameUpdateAfterCommitSimple(){
    SqlSession sqlSession=sqlSessionFactory.openSession(ExecutorType.SIMPLE);
    try {
      PersonMapper personMapper=sqlSession.getMapper(PersonMapper.class);
      Person person=personMapper.selectById(1);
      person.setFirstName("Simone");
      personMapper.update(person);
      sqlSession.commit();
      personMapper.update(person);
      sqlSession.commit();
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testSameUpdateAfterCommitReuse(){
    SqlSession sqlSession=sqlSessionFactory.openSession(ExecutorType.REUSE);
    try {
      PersonMapper personMapper=sqlSession.getMapper(PersonMapper.class);
      Person person=personMapper.selectById(1);
      person.setFirstName("Simone");
      personMapper.update(person);
      sqlSession.commit();
      personMapper.update(person);
      sqlSession.commit();
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testSameUpdateAfterCommitBatch(){
    SqlSession sqlSession=sqlSessionFactory.openSession(ExecutorType.BATCH);
    try {
      PersonMapper personMapper=sqlSession.getMapper(PersonMapper.class);
      Person person=personMapper.selectById(1);
      person.setFirstName("Simone");
      personMapper.update(person);
      sqlSession.commit();
      personMapper.update(person);
      sqlSession.commit();
    }
  finally {
      sqlSession.close();
    }
  }
}
