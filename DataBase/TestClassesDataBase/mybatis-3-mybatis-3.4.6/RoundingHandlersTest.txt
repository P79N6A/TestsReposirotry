public class RoundingHandlersTest {
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/rounding/mybatis-config.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    SqlSession session=sqlSessionFactory.openSession();
    Connection conn=session.getConnection();
    reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/rounding/CreateDB.sql");
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.runScript(reader);
    conn.close();
    reader.close();
    session.close();
  }
  @Test public void shouldGetAUser(){
    SqlSession session=sqlSessionFactory.openSession();
    try {
      Mapper mapper=session.getMapper(Mapper.class);
      User user=mapper.getUser(1);
      Assert.assertEquals("User1",user.getName());
      Assert.assertEquals(RoundingMode.UP,user.getRoundingMode());
      user=mapper.getUser2(1);
      Assert.assertEquals("User1",user.getName());
      Assert.assertEquals(RoundingMode.UP,user.getRoundingMode());
    }
  finally {
      session.close();
    }
  }
  @Test public void shouldInsertUser2(){
    SqlSession session=sqlSessionFactory.openSession();
    try {
      Mapper mapper=session.getMapper(Mapper.class);
      User user=new User();
      user.setId(2);
      user.setName("User2");
      user.setFunkyNumber(BigDecimal.ZERO);
      user.setRoundingMode(RoundingMode.UNNECESSARY);
      mapper.insert(user);
      mapper.insert2(user);
    }
  finally {
      session.close();
    }
  }
}
