public class ComponentTest {
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setup() throws Exception {
    setupSqlSessionFactory();
    runDBScript();
  }
  @Test public void shouldInsertNestedPasswordFieldOfComplexType() throws Exception {
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      User user=new User();
      user.setId(500000L);
      user.setPassword(new EncryptedString("secret"));
      user.setUsername("johnny" + Calendar.getInstance().getTimeInMillis());
      user.setAdministrator(true);
      sqlSession.insert("User.insert",user);
      user=(User)sqlSession.selectOne("User.find",user.getId());
      assertNotNull(user.getId());
      sqlSession.rollback();
    }
  finally {
      sqlSession.close();
    }
  }
  private static void runDBScript() throws SQLException, IOException {
    Connection conn=sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.setErrorLogWriter(null);
    String resource="org/apache/ibatis/submitted/complex_property/db.sql";
    Reader reader=Resources.getResourceAsReader(resource);
    runner.runScript(reader);
    conn.close();
  }
  private static void setupSqlSessionFactory() throws IOException {
    String resource="org/apache/ibatis/submitted/complex_property/Configuration.xml";
    Reader reader=Resources.getResourceAsReader(resource);
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
  }
}
