/** 
 * Just a test case. Not a real Velocity implementation.
 */
public class LanguageTest {
  protected static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    Connection conn=null;
    try {
      Class.forName("org.hsqldb.jdbcDriver");
      conn=DriverManager.getConnection("jdbc:hsqldb:mem:language","sa","");
      Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/language/CreateDB.sql");
      ScriptRunner runner=new ScriptRunner(conn);
      runner.setLogWriter(null);
      runner.setErrorLogWriter(null);
      runner.runScript(reader);
      conn.commit();
      reader.close();
      reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/language/MapperConfig.xml");
      sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
      reader.close();
    }
  finally {
      if (conn != null) {
        conn.close();
      }
    }
  }
  @Test public void testDynamicSelectWithPropertyParams(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Parameter p=new Parameter(true,"Fli%");
      List<Name> answer=sqlSession.selectList("selectNames",p);
      assertEquals(3,answer.size());
      for (      Name n : answer) {
        assertEquals("Flintstone",n.getLastName());
      }
      p=new Parameter(false,"Fli%");
      answer=sqlSession.selectList("selectNames",p);
      assertEquals(3,answer.size());
      for (      Name n : answer) {
        assertTrue(n.getLastName() == null);
      }
      p=new Parameter(false,"Rub%");
      answer=sqlSession.selectList("selectNames",p);
      assertEquals(2,answer.size());
      for (      Name n : answer) {
        assertTrue(n.getLastName() == null);
      }
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testDynamicSelectWithExpressionParams(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Parameter p=new Parameter(true,"Fli");
      List<Name> answer=sqlSession.selectList("selectNamesWithExpressions",p);
      assertEquals(3,answer.size());
      for (      Name n : answer) {
        assertEquals("Flintstone",n.getLastName());
      }
      p=new Parameter(false,"Fli");
      answer=sqlSession.selectList("selectNamesWithExpressions",p);
      assertEquals(3,answer.size());
      for (      Name n : answer) {
        assertTrue(n.getLastName() == null);
      }
      p=new Parameter(false,"Rub");
      answer=sqlSession.selectList("selectNamesWithExpressions",p);
      assertEquals(2,answer.size());
      for (      Name n : answer) {
        assertTrue(n.getLastName() == null);
      }
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testDynamicSelectWithIteration(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      int[] ids={2,4,5};
      Map<String,Object> param=new HashMap<String,Object>();
      param.put("ids",ids);
      List<Name> answer=sqlSession.selectList("selectNamesWithIteration",param);
      assertEquals(3,answer.size());
      for (int i=0; i < ids.length; i++) {
        assertEquals(ids[i],answer.get(i).getId());
      }
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testLangRaw(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Parameter p=new Parameter(true,"Fli%");
      List<Name> answer=sqlSession.selectList("selectRaw",p);
      assertEquals(3,answer.size());
      for (      Name n : answer) {
        assertEquals("Flintstone",n.getLastName());
      }
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testLangRawWithInclude(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Parameter p=new Parameter(true,"Fli%");
      List<Name> answer=sqlSession.selectList("selectRawWithInclude",p);
      assertEquals(3,answer.size());
      for (      Name n : answer) {
        assertEquals("Flintstone",n.getLastName());
      }
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testLangRawWithIncludeAndCData(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Parameter p=new Parameter(true,"Fli%");
      List<Name> answer=sqlSession.selectList("selectRawWithIncludeAndCData",p);
      assertEquals(3,answer.size());
      for (      Name n : answer) {
        assertEquals("Flintstone",n.getLastName());
      }
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testLangXmlTags(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Parameter p=new Parameter(true,"Fli%");
      List<Name> answer=sqlSession.selectList("selectXml",p);
      assertEquals(3,answer.size());
      for (      Name n : answer) {
        assertEquals("Flintstone",n.getLastName());
      }
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testLangRawWithMapper(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Parameter p=new Parameter(true,"Fli%");
      Mapper m=sqlSession.getMapper(Mapper.class);
      List<Name> answer=m.selectRawWithMapper(p);
      assertEquals(3,answer.size());
      for (      Name n : answer) {
        assertEquals("Flintstone",n.getLastName());
      }
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testLangVelocityWithMapper(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Parameter p=new Parameter(true,"Fli%");
      Mapper m=sqlSession.getMapper(Mapper.class);
      List<Name> answer=m.selectVelocityWithMapper(p);
      assertEquals(3,answer.size());
      for (      Name n : answer) {
        assertEquals("Flintstone",n.getLastName());
      }
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testLangXmlWithMapper(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Parameter p=new Parameter(true,"Fli%");
      Mapper m=sqlSession.getMapper(Mapper.class);
      List<Name> answer=m.selectXmlWithMapper(p);
      assertEquals(3,answer.size());
      for (      Name n : answer) {
        assertEquals("Flintstone",n.getLastName());
      }
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testLangXmlWithMapperAndSqlSymbols(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Parameter p=new Parameter(true,"Fli%");
      Mapper m=sqlSession.getMapper(Mapper.class);
      List<Name> answer=m.selectXmlWithMapperAndSqlSymbols(p);
      assertEquals(3,answer.size());
      for (      Name n : answer) {
        assertEquals("Flintstone",n.getLastName());
      }
    }
  finally {
      sqlSession.close();
    }
  }
}
