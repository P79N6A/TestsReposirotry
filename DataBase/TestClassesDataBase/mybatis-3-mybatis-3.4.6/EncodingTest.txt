public class EncodingTest {
  protected static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    Connection conn=null;
    Charset charset=Resources.getCharset();
    try {
      Class.forName("org.hsqldb.jdbcDriver");
      conn=DriverManager.getConnection("jdbc:hsqldb:mem:encoding","sa","");
      Resources.setCharset(Charset.forName("utf-8"));
      Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/encoding/CreateDB.sql");
      ScriptRunner runner=new ScriptRunner(conn);
      runner.setLogWriter(null);
      runner.setErrorLogWriter(null);
      runner.runScript(reader);
      conn.commit();
      reader.close();
      reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/encoding/EncodingConfig.xml");
      sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
      reader.close();
    }
  finally {
      Resources.setCharset(charset);
      if (conn != null) {
        conn.close();
      }
    }
  }
  @Test public void testEncoding1(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      EncodingMapper mapper=sqlSession.getMapper(EncodingMapper.class);
      String answer=mapper.select1();
      assertEquals("Mara\u00f1\u00f3n",answer);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testEncoding2(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      EncodingMapper mapper=sqlSession.getMapper(EncodingMapper.class);
      String answer=mapper.select2();
      assertEquals("Mara\u00f1\u00f3n",answer);
    }
  finally {
      sqlSession.close();
    }
  }
}
