/** 
 * @author Bj√∂rn Raupach
 */
public class YearMonthTypeHandlerTest extends BaseTypeHandlerTest {
  private static final TypeHandler<YearMonth> TYPE_HANDLER=new YearMonthTypeHandler();
  private static final YearMonth INSTANT=YearMonth.now();
  @Override @Test public void shouldSetParameter() throws Exception {
    TYPE_HANDLER.setParameter(ps,1,INSTANT,null);
    verify(ps).setString(1,INSTANT.toString());
  }
  @Override @Test public void shouldGetResultFromResultSetByName() throws Exception {
    when(rs.getString("column")).thenReturn(INSTANT.toString());
    assertEquals(INSTANT,TYPE_HANDLER.getResult(rs,"column"));
  }
  @Override @Test public void shouldGetResultNullFromResultSetByName() throws Exception {
    when(rs.wasNull()).thenReturn(true);
    assertNull(TYPE_HANDLER.getResult(rs,"column"));
  }
  @Override @Test public void shouldGetResultFromResultSetByPosition() throws Exception {
    when(rs.getString(1)).thenReturn(INSTANT.toString());
    assertEquals(INSTANT,TYPE_HANDLER.getResult(rs,1));
  }
  @Override @Test public void shouldGetResultNullFromResultSetByPosition() throws Exception {
    when(rs.wasNull()).thenReturn(true);
    assertNull(TYPE_HANDLER.getResult(rs,1));
  }
  @Override @Test public void shouldGetResultFromCallableStatement() throws Exception {
    when(cs.getString(1)).thenReturn(INSTANT.toString());
    assertEquals(INSTANT,TYPE_HANDLER.getResult(cs,1));
  }
  @Override @Test public void shouldGetResultNullFromCallableStatement() throws Exception {
    when(cs.wasNull()).thenReturn(true);
    assertNull(TYPE_HANDLER.getResult(cs,1));
  }
}
