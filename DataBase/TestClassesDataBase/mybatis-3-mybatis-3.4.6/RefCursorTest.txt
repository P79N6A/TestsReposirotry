/** 
 * @author Jeff Butler
 */
@Category(EmbeddedPostgresqlTests.class) public class RefCursorTest {
  private static final EmbeddedPostgres postgres=new EmbeddedPostgres();
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    String url=postgres.start(EmbeddedPostgres.cachedRuntimeConfig(Paths.get(System.getProperty("java.io.tmpdir"),"pgembed")),"localhost",SocketUtil.findFreePort(),"refcursor","postgres","root",Collections.emptyList());
    Configuration configuration=new Configuration();
    Environment environment=new Environment("development",new JdbcTransactionFactory(),new UnpooledDataSource("org.postgresql.Driver",url,null));
    configuration.setEnvironment(environment);
    configuration.addMapper(OrdersMapper.class);
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(configuration);
    try (SqlSession session=sqlSessionFactory.openSession();Connection conn=session.getConnection();Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/usesjava8/refcursor/CreateDB.sql")){
      ScriptRunner runner=new ScriptRunner(conn);
      runner.setLogWriter(null);
      runner.runScript(reader);
    }
   }
  @AfterClass public static void tearDown(){
    postgres.stop();
  }
  @Test public void testRefCursor1() throws IOException {
    try (SqlSession sqlSession=sqlSessionFactory.openSession()){
      OrdersMapper mapper=sqlSession.getMapper(OrdersMapper.class);
      Map<String,Object> parameter=new HashMap<String,Object>();
      parameter.put("orderId",1);
      mapper.getOrder1(parameter);
      assertNotNull(parameter.get("order"));
      @SuppressWarnings("unchecked") List<Order> orders=(List<Order>)parameter.get("order");
      assertEquals(1,orders.size());
      Order order=orders.get(0);
      assertEquals(3,order.getDetailLines().size());
    }
   }
  @Test public void testRefCursor2() throws IOException {
    try (SqlSession sqlSession=sqlSessionFactory.openSession()){
      OrdersMapper mapper=sqlSession.getMapper(OrdersMapper.class);
      Map<String,Object> parameter=new HashMap<String,Object>();
      parameter.put("orderId",1);
      mapper.getOrder2(parameter);
      assertNotNull(parameter.get("order"));
      @SuppressWarnings("unchecked") List<Order> orders=(List<Order>)parameter.get("order");
      assertEquals(1,orders.size());
      Order order=orders.get(0);
      assertEquals(3,order.getDetailLines().size());
    }
   }
  @Test public void shouldUseResultHandlerOnOutputParam() throws IOException {
class OrderResultHandler implements ResultHandler<Order> {
      private List<Order> orders=new ArrayList<Order>();
      @Override public void handleResult(      ResultContext<? extends Order> resultContext){
        Order order=resultContext.getResultObject();
        order.setCustomerName("Anonymous");
        orders.add(order);
      }
      List<Order> getResult(){
        return orders;
      }
    }
    try (SqlSession sqlSession=sqlSessionFactory.openSession()){
      OrdersMapper mapper=sqlSession.getMapper(OrdersMapper.class);
      OrderResultHandler handler=new OrderResultHandler();
      Map<String,Object> parameter=new HashMap<String,Object>();
      parameter.put("orderId",1);
      mapper.getOrder3(parameter,handler);
      assertNull(parameter.get("order"));
      assertEquals(Integer.valueOf(3),parameter.get("detailCount"));
      assertEquals("Anonymous",handler.getResult().get(0).getCustomerName());
    }
   }
  @Test public void shouldNullResultSetNotCauseNpe() throws IOException {
    try (SqlSession sqlSession=sqlSessionFactory.openSession()){
      OrdersMapper mapper=sqlSession.getMapper(OrdersMapper.class);
      Map<String,Object> parameter=new HashMap<String,Object>();
      parameter.put("orderId",99);
      mapper.getOrder3(parameter,new ResultHandler<Order>(){
        @Override public void handleResult(        ResultContext<? extends Order> resultContext){
        }
      }
);
      assertEquals(Integer.valueOf(0),parameter.get("detailCount"));
    }
   }
}
