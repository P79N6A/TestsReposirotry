public class ReturnInstanceForEmptyRowTest {
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/empty_row/mybatis-config.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    SqlSession session=sqlSessionFactory.openSession();
    Connection conn=session.getConnection();
    reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/empty_row/CreateDB.sql");
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.runScript(reader);
    conn.close();
    reader.close();
    session.close();
  }
  @Before public void resetCallSettersOnNulls(){
    sqlSessionFactory.getConfiguration().setCallSettersOnNulls(false);
  }
  @Test public void shouldSimpleTypeBeNull(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      String result=mapper.getString();
      assertNull(result);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldObjectTypeNotBeNull(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Parent parent=mapper.getBean(1);
      assertNotNull(parent);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldMapBeEmpty(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Map<String,String> map=mapper.getMap(1);
      assertNotNull(map);
      assertTrue(map.isEmpty());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldMapHaveColumnNamesIfCallSettersOnNullsEnabled(){
    sqlSessionFactory.getConfiguration().setCallSettersOnNulls(true);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Map<String,String> map=mapper.getMap(1);
      assertEquals(2,map.size());
      assertTrue(map.containsKey("COL1"));
      assertTrue(map.containsKey("COL2"));
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldAssociationNotBeNull(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Parent parent=mapper.getAssociation(1);
      assertNotNull(parent.getChild());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldAssociationBeNullIfNotNullColumnSpecified(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Parent parent=mapper.getAssociationWithNotNullColumn(1);
      assertNotNull(parent);
      assertNull(parent.getChild());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldNestedAssociationNotBeNull(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Parent parent=mapper.getNestedAssociation();
      assertNotNull(parent.getChild().getGrandchild());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testCollection(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Parent parent=mapper.getCollection(1);
      assertEquals(1,parent.getChildren().size());
      assertNotNull(parent.getChildren().get(0));
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldSquashMultipleEmptyResults(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Parent parent=mapper.getTwoCollections(2);
      assertEquals(1,parent.getPets().size());
      assertNotNull(parent.getPets().get(0));
    }
  finally {
      sqlSession.close();
    }
  }
}
