public class SqlSessionManagerTest extends BaseDataTest {
  private static SqlSessionManager manager;
  @BeforeClass public static void setup() throws Exception {
    createBlogDataSource();
    final String resource="org/apache/ibatis/builder/MapperConfig.xml";
    final Reader reader=Resources.getResourceAsReader(resource);
    manager=SqlSessionManager.newInstance(reader);
  }
  @Test public void shouldThrowExceptionIfMappedStatementDoesNotExistAndSqlSessionIsOpen() throws Exception {
    try {
      manager.startManagedSession();
      manager.selectList("ThisStatementDoesNotExist");
      fail("Expected exception to be thrown due to statement that does not exist.");
    }
 catch (    PersistenceException e) {
      assertTrue(e.getMessage().contains("does not contain value for ThisStatementDoesNotExist"));
    }
 finally {
      manager.close();
    }
  }
  @Test public void shouldCommitInsertedAuthor() throws Exception {
    try {
      manager.startManagedSession();
      AuthorMapper mapper=manager.getMapper(AuthorMapper.class);
      Author expected=new Author(500,"cbegin","******","cbegin@somewhere.com","Something...",null);
      mapper.insertAuthor(expected);
      manager.commit();
      Author actual=mapper.selectAuthor(500);
      assertNotNull(actual);
    }
  finally {
      manager.close();
    }
  }
  @Test public void shouldRollbackInsertedAuthor() throws Exception {
    try {
      manager.startManagedSession();
      AuthorMapper mapper=manager.getMapper(AuthorMapper.class);
      Author expected=new Author(501,"lmeadors","******","lmeadors@somewhere.com","Something...",null);
      mapper.insertAuthor(expected);
      manager.rollback();
      Author actual=mapper.selectAuthor(501);
      assertNull(actual);
    }
  finally {
      manager.close();
    }
  }
  @Test public void shouldImplicitlyRollbackInsertedAuthor() throws Exception {
    manager.startManagedSession();
    AuthorMapper mapper=manager.getMapper(AuthorMapper.class);
    Author expected=new Author(502,"emacarron","******","emacarron@somewhere.com","Something...",null);
    mapper.insertAuthor(expected);
    manager.close();
    Author actual=mapper.selectAuthor(502);
    assertNull(actual);
  }
}
