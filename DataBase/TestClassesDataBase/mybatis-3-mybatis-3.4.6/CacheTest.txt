public class CacheTest {
  private static SqlSessionFactory sqlSessionFactory;
  @Before public void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/cache/mybatis-config.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    SqlSession session=sqlSessionFactory.openSession();
    Connection conn=session.getConnection();
    reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/cache/CreateDB.sql");
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.runScript(reader);
    conn.close();
    reader.close();
    session.close();
  }
  @Test public void testplan1(){
    SqlSession sqlSession1=sqlSessionFactory.openSession(false);
    try {
      PersonMapper pm=sqlSession1.getMapper(PersonMapper.class);
      Assert.assertEquals(2,pm.findAll().size());
    }
  finally {
      sqlSession1.close();
    }
    SqlSession sqlSession2=sqlSessionFactory.openSession(false);
    try {
      PersonMapper pm=sqlSession2.getMapper(PersonMapper.class);
      pm.delete(1);
      Assert.assertEquals(1,pm.findAll().size());
    }
  finally {
      sqlSession2.commit();
      sqlSession2.close();
    }
  }
  @Test public void testplan2(){
    SqlSession sqlSession1=sqlSessionFactory.openSession(false);
    try {
      PersonMapper pm=sqlSession1.getMapper(PersonMapper.class);
      Assert.assertEquals(2,pm.findAll().size());
    }
  finally {
      sqlSession1.close();
    }
    SqlSession sqlSession2=sqlSessionFactory.openSession(false);
    try {
      PersonMapper pm=sqlSession2.getMapper(PersonMapper.class);
      pm.delete(1);
    }
  finally {
      sqlSession2.rollback();
      sqlSession2.close();
    }
    SqlSession sqlSession3=sqlSessionFactory.openSession(false);
    try {
      PersonMapper pm=sqlSession3.getMapper(PersonMapper.class);
      Assert.assertEquals(2,pm.findAll().size());
    }
  finally {
      sqlSession3.close();
    }
  }
  @Test public void testplan3(){
    SqlSession sqlSession1=sqlSessionFactory.openSession(true);
    try {
      PersonMapper pm=sqlSession1.getMapper(PersonMapper.class);
      Assert.assertEquals(2,pm.findAll().size());
    }
  finally {
      sqlSession1.close();
    }
    SqlSession sqlSession2=sqlSessionFactory.openSession(true);
    try {
      PersonMapper pm=sqlSession2.getMapper(PersonMapper.class);
      pm.delete(1);
    }
  finally {
      sqlSession2.close();
    }
    SqlSession sqlSession3=sqlSessionFactory.openSession(true);
    try {
      PersonMapper pm=sqlSession3.getMapper(PersonMapper.class);
      Assert.assertEquals(1,pm.findAll().size());
    }
  finally {
      sqlSession3.close();
    }
  }
  @Test public void shouldInsertWithOptionsFlushesCache(){
    SqlSession sqlSession1=sqlSessionFactory.openSession(true);
    try {
      PersonMapper pm=sqlSession1.getMapper(PersonMapper.class);
      Assert.assertEquals(2,pm.findAll().size());
    }
  finally {
      sqlSession1.close();
    }
    SqlSession sqlSession2=sqlSessionFactory.openSession(true);
    try {
      PersonMapper pm=sqlSession2.getMapper(PersonMapper.class);
      Person p=new Person(3,"hello","world");
      pm.createWithOptions(p);
    }
  finally {
      sqlSession2.close();
    }
    SqlSession sqlSession3=sqlSessionFactory.openSession(true);
    try {
      PersonMapper pm=sqlSession3.getMapper(PersonMapper.class);
      Assert.assertEquals(3,pm.findAll().size());
    }
  finally {
      sqlSession3.close();
    }
  }
  @Test public void shouldApplyFlushCacheOptions(){
    SqlSession sqlSession1=sqlSessionFactory.openSession(true);
    try {
      PersonMapper pm=sqlSession1.getMapper(PersonMapper.class);
      Assert.assertEquals(2,pm.findAll().size());
    }
  finally {
      sqlSession1.close();
    }
    SqlSession sqlSession2=sqlSessionFactory.openSession(true);
    try {
      PersonMapper pm=sqlSession2.getMapper(PersonMapper.class);
      Person p=new Person(3,"hello","world");
      pm.createWithoutFlushCache(p);
    }
  finally {
      sqlSession2.close();
    }
    SqlSession sqlSession3=sqlSessionFactory.openSession(true);
    try {
      PersonMapper pm=sqlSession3.getMapper(PersonMapper.class);
      Assert.assertEquals(2,pm.findAll().size());
    }
  finally {
      sqlSession3.close();
    }
    SqlSession sqlSession4=sqlSessionFactory.openSession(true);
    try {
      PersonMapper pm=sqlSession4.getMapper(PersonMapper.class);
      Assert.assertEquals(3,pm.findWithFlushCache().size());
    }
  finally {
      sqlSession4.close();
    }
  }
  @Test public void shouldApplyCacheNamespaceRef(){
{
      SqlSession sqlSession=sqlSessionFactory.openSession(true);
      try {
        PersonMapper pm=sqlSession.getMapper(PersonMapper.class);
        Assert.assertEquals(2,pm.findAll().size());
        Person p=new Person(3,"hello","world");
        pm.createWithoutFlushCache(p);
      }
  finally {
        sqlSession.close();
      }
    }
{
      SqlSession sqlSession=sqlSessionFactory.openSession(true);
      try {
        PersonMapper pm=sqlSession.getMapper(PersonMapper.class);
        Assert.assertEquals(2,pm.findAll().size());
      }
  finally {
        sqlSession.close();
      }
    }
{
      SqlSession sqlSession=sqlSessionFactory.openSession(true);
      try {
        ImportantPersonMapper pm=sqlSession.getMapper(ImportantPersonMapper.class);
        Assert.assertEquals(3,pm.findWithFlushCache().size());
      }
  finally {
        sqlSession.close();
      }
    }
{
      SqlSession sqlSession=sqlSessionFactory.openSession(true);
      try {
        PersonMapper pm=sqlSession.getMapper(PersonMapper.class);
        Assert.assertEquals(3,pm.findAll().size());
        Person p=new Person(4,"foo","bar");
        pm.createWithoutFlushCache(p);
      }
  finally {
        sqlSession.close();
      }
    }
{
      SqlSession sqlSession=sqlSessionFactory.openSession(true);
      try {
        SpecialPersonMapper pm=sqlSession.getMapper(SpecialPersonMapper.class);
        Assert.assertEquals(4,pm.findWithFlushCache().size());
      }
  finally {
        sqlSession.close();
      }
    }
{
      SqlSession sqlSession=sqlSessionFactory.openSession(true);
      try {
        PersonMapper pm=sqlSession.getMapper(PersonMapper.class);
        Assert.assertEquals(4,pm.findAll().size());
      }
  finally {
        sqlSession.close();
      }
    }
  }
  @Test public void shouldApplyCustomCacheProperties(){
    CustomCache customCache=unwrap(sqlSessionFactory.getConfiguration().getCache(CustomCacheMapper.class.getName()));
    Assert.assertEquals("bar",customCache.getStringValue());
    Assert.assertEquals(1,customCache.getIntegerValue().intValue());
    Assert.assertEquals(2,customCache.getIntValue());
    Assert.assertEquals(3,customCache.getLongWrapperValue().longValue());
    Assert.assertEquals(4,customCache.getLongValue());
    Assert.assertEquals(5,customCache.getShortWrapperValue().shortValue());
    Assert.assertEquals(6,customCache.getShortValue());
    Assert.assertEquals((float)7.1,customCache.getFloatWrapperValue(),0);
    Assert.assertEquals((float)8.1,customCache.getFloatValue(),0);
    Assert.assertEquals(9.01,customCache.getDoubleWrapperValue(),0);
    Assert.assertEquals(10.01,customCache.getDoubleValue(),0);
    Assert.assertEquals((byte)11,customCache.getByteWrapperValue().byteValue());
    Assert.assertEquals((byte)12,customCache.getByteValue());
    Assert.assertEquals(true,customCache.getBooleanWrapperValue());
    Assert.assertEquals(true,customCache.isBooleanValue());
  }
  @Test public void shouldErrorUnsupportedProperties(){
    when(sqlSessionFactory.getConfiguration()).addMapper(CustomCacheUnsupportedPropertyMapper.class);
    then(caughtException()).isInstanceOf(CacheException.class).hasMessage("Unsupported property type for cache: 'date' of type class java.util.Date");
  }
  @Test public void shouldErrorInvalidCacheNamespaceRefAttributesSpecifyBoth(){
    when(sqlSessionFactory.getConfiguration().getMapperRegistry()).addMapper(InvalidCacheNamespaceRefBothMapper.class);
    then(caughtException()).isInstanceOf(BuilderException.class).hasMessage("Cannot use both value() and name() attribute in the @CacheNamespaceRef");
  }
  @Test public void shouldErrorInvalidCacheNamespaceRefAttributesIsEmpty(){
    when(sqlSessionFactory.getConfiguration().getMapperRegistry()).addMapper(InvalidCacheNamespaceRefEmptyMapper.class);
    then(caughtException()).isInstanceOf(BuilderException.class).hasMessage("Should be specified either value() or name() attribute in the @CacheNamespaceRef");
  }
  private CustomCache unwrap(  Cache cache){
    Field field;
    try {
      field=cache.getClass().getDeclaredField("delegate");
    }
 catch (    NoSuchFieldException e) {
      throw new IllegalStateException(e);
    }
    try {
      field.setAccessible(true);
      return (CustomCache)field.get(cache);
    }
 catch (    IllegalAccessException e) {
      throw new IllegalStateException(e);
    }
 finally {
      field.setAccessible(false);
    }
  }
@CacheNamespace(implementation=CustomCache.class,properties={@Property(name="date",value="2016/11/21")}) private interface CustomCacheUnsupportedPropertyMapper {
  }
@CacheNamespaceRef(value=PersonMapper.class,name="org.apache.ibatis.submitted.cache.PersonMapper") private interface InvalidCacheNamespaceRefBothMapper {
  }
@CacheNamespaceRef private interface InvalidCacheNamespaceRefEmptyMapper {
  }
}
