@RunWith(MockitoJUnitRunner.class) public class ResultExtractorTest {
  private ResultExtractor resultExtractor;
  @Mock private Configuration configuration;
  @Mock private ObjectFactory objectFactory;
  @Before public void setUp() throws Exception {
    resultExtractor=new ResultExtractor(configuration,objectFactory);
  }
  @Test public void shouldExtractNullForNullTargetType(){
    final Object result=resultExtractor.extractObjectFromList(null,null);
    assertThat(result).isNull();
  }
  @Test public void shouldExtractList(){
    final List list=Arrays.asList(1,2,3);
    final Object result=resultExtractor.extractObjectFromList(list,List.class);
    assertThat(result).isInstanceOf(List.class);
    final List resultList=(List)result;
    assertThat(resultList).isEqualTo(list);
  }
  @Test public void shouldExtractArray(){
    final List list=Arrays.asList(1,2,3);
    final Object result=resultExtractor.extractObjectFromList(list,Integer[].class);
    assertThat(result).isInstanceOf(Integer[].class);
    final Integer[] resultArray=(Integer[])result;
    assertThat(resultArray).isEqualTo(new Integer[]{1,2,3});
  }
  @Test public void shouldExtractSet(){
    final List list=Arrays.asList(1,2,3);
    final Class<Set> targetType=Set.class;
    final Set set=new HashSet();
    final MetaObject metaObject=mock(MetaObject.class);
    when(objectFactory.isCollection(targetType)).thenReturn(true);
    when(objectFactory.create(targetType)).thenReturn(set);
    when(configuration.newMetaObject(set)).thenReturn(metaObject);
    final Set result=(Set)resultExtractor.extractObjectFromList(list,targetType);
    assertThat(result).isSameAs(set);
    verify(metaObject).addAll(list);
  }
  @Test public void shouldExtractSingleObject(){
    final List list=Collections.singletonList("single object");
    assertThat((String)resultExtractor.extractObjectFromList(list,String.class)).isEqualTo("single object");
    assertThat((String)resultExtractor.extractObjectFromList(list,null)).isEqualTo("single object");
    assertThat((String)resultExtractor.extractObjectFromList(list,Integer.class)).isEqualTo("single object");
  }
  @Test(expected=ExecutorException.class) public void shouldFailWhenMutipleItemsInList(){
    final List list=Arrays.asList("first object","second object");
    assertThat((String)resultExtractor.extractObjectFromList(list,String.class)).isEqualTo("single object");
  }
}
