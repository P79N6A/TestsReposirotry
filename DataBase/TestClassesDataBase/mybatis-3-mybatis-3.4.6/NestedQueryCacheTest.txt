public class NestedQueryCacheTest extends BaseDataTest {
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/nested_query_cache/MapperConfig.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    createBlogDataSource();
  }
  @Test public void testThatNestedQueryItemsAreRetrievedFromCache() throws Exception {
    SqlSession sqlSession=sqlSessionFactory.openSession();
    final Author author;
    try {
      final AuthorMapper authorMapper=sqlSession.getMapper(AuthorMapper.class);
      author=authorMapper.selectAuthor(101);
      final Author cachedAuthor=authorMapper.selectAuthor(101);
      assertThat(author).isSameAs(cachedAuthor);
    }
  finally {
      sqlSession.close();
    }
    sqlSession=sqlSessionFactory.openSession();
    try {
      final BlogMapper blogMapper=sqlSession.getMapper(BlogMapper.class);
      assertThat(blogMapper.selectBlog(1).getAuthor()).isSameAs(author);
      assertThat(blogMapper.selectBlogUsingConstructor(1).getAuthor()).isSameAs(author);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testThatNestedQueryItemsAreRetrievedIfNotInCache() throws Exception {
    SqlSession sqlSession=sqlSessionFactory.openSession();
    Author author=null;
    try {
      final BlogMapper blogMapper=sqlSession.getMapper(BlogMapper.class);
      author=blogMapper.selectBlog(1).getAuthor();
      assertNotNull("blog author",blogMapper.selectBlog(1).getAuthor());
      assertNotNull("blog author",blogMapper.selectBlogUsingConstructor(1).getAuthor());
    }
  finally {
      sqlSession.close();
    }
    sqlSession=sqlSessionFactory.openSession();
    try {
      final AuthorMapper authorMapper=sqlSession.getMapper(AuthorMapper.class);
      Author cachedAuthor=authorMapper.selectAuthor(101);
      assertThat(cachedAuthor).isSameAs(author);
    }
  finally {
      sqlSession.close();
    }
  }
}
