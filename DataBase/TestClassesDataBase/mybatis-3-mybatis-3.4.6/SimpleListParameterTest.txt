public class SimpleListParameterTest {
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/simplelistparameter/mybatis-config.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    SqlSession session=sqlSessionFactory.openSession();
    Connection conn=session.getConnection();
    reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/simplelistparameter/CreateDB.sql");
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.runScript(reader);
    conn.close();
    reader.close();
    session.close();
  }
  @Test public void shouldGetACar() throws Exception {
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      CarMapper carMapper=sqlSession.getMapper(CarMapper.class);
      Car car=new Car();
      car.setDoors(Arrays.asList(new String[]{"2","4"}));
      List<Car> cars=carMapper.getCar(car);
      Assert.assertNotNull(cars);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldResolveGenericFieldGetterType() throws Exception {
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      CarMapper carMapper=sqlSession.getMapper(CarMapper.class);
      Rv rv=new Rv();
      rv.doors1=Arrays.asList(new String[]{"2","4"});
      List<Rv> rvs=carMapper.getRv1(rv);
      Assert.assertNotNull(rvs);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldResolveGenericMethodGetterType() throws Exception {
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      CarMapper carMapper=sqlSession.getMapper(CarMapper.class);
      Rv rv=new Rv();
      rv.setDoors2(Arrays.asList(new String[]{"2","4"}));
      List<Rv> rvs=carMapper.getRv2(rv);
      Assert.assertNotNull(rvs);
    }
  finally {
      sqlSession.close();
    }
  }
}
