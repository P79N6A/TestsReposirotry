public class ShortTypeHandlerTest extends BaseTypeHandlerTest {
  private static final TypeHandler<Short> TYPE_HANDLER=new ShortTypeHandler();
  @Override @Test public void shouldSetParameter() throws Exception {
    TYPE_HANDLER.setParameter(ps,1,(short)100,null);
    verify(ps).setShort(1,(short)100);
  }
  @Override @Test public void shouldGetResultFromResultSetByName() throws Exception {
    when(rs.getShort("column")).thenReturn((short)100);
    when(rs.wasNull()).thenReturn(false);
    assertEquals(new Short((short)100),TYPE_HANDLER.getResult(rs,"column"));
  }
  @Override public void shouldGetResultNullFromResultSetByName() throws Exception {
  }
  @Override @Test public void shouldGetResultFromResultSetByPosition() throws Exception {
    when(rs.getShort(1)).thenReturn((short)100);
    when(rs.wasNull()).thenReturn(false);
    assertEquals(new Short((short)100),TYPE_HANDLER.getResult(rs,1));
  }
  @Override public void shouldGetResultNullFromResultSetByPosition() throws Exception {
  }
  @Override @Test public void shouldGetResultFromCallableStatement() throws Exception {
    when(cs.getShort(1)).thenReturn((short)100);
    when(cs.wasNull()).thenReturn(false);
    assertEquals(new Short((short)100),TYPE_HANDLER.getResult(cs,1));
  }
  @Override public void shouldGetResultNullFromCallableStatement() throws Exception {
  }
}
