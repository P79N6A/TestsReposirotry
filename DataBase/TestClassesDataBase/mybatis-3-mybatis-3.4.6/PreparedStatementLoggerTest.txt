@RunWith(MockitoJUnitRunner.class) public class PreparedStatementLoggerTest {
  @Mock Log log;
  @Mock PreparedStatement preparedStatement;
  @Mock ResultSet resultSet;
  PreparedStatement ps;
  @Before public void setUp() throws SQLException {
    when(log.isDebugEnabled()).thenReturn(true);
    when(preparedStatement.executeQuery(anyString())).thenReturn(resultSet);
    when(preparedStatement.execute(anyString())).thenReturn(true);
    ps=PreparedStatementLogger.newInstance(this.preparedStatement,log,1);
  }
  @Test public void shouldPrintParameters() throws SQLException {
    ps.setInt(1,10);
    ResultSet rs=ps.executeQuery("select 1 limit ?");
    verify(log).debug(contains("Parameters: 10(Integer)"));
    Assert.assertNotNull(rs);
    Assert.assertNotSame(resultSet,rs);
  }
  @Test public void shouldPrintNullParameters() throws SQLException {
    ps.setNull(1,JdbcType.VARCHAR.TYPE_CODE);
    boolean result=ps.execute("update name = ? from test");
    verify(log).debug(contains("Parameters: null"));
    Assert.assertTrue(result);
  }
  @Test public void shouldNotPrintLog() throws SQLException {
    ps.getResultSet();
    ps.getParameterMetaData();
    verify(log,times(0)).debug(anyString());
  }
  @Test public void shouldPrintUpdateCount() throws SQLException {
    when(preparedStatement.getUpdateCount()).thenReturn(1);
    ps.getUpdateCount();
    verify(log).debug(contains("Updates: 1"));
  }
}
