public class AutoConstructorTest {
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    final Reader reader=Resources.getResourceAsReader("org/apache/ibatis/autoconstructor/mybatis-config.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    final SqlSession session=sqlSessionFactory.openSession();
    final Connection conn=session.getConnection();
    final Reader dbReader=Resources.getResourceAsReader("org/apache/ibatis/autoconstructor/CreateDB.sql");
    final ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.runScript(dbReader);
    conn.close();
    dbReader.close();
    session.close();
  }
  @Test public void fullyPopulatedSubject(){
    final SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      final AutoConstructorMapper mapper=sqlSession.getMapper(AutoConstructorMapper.class);
      final Object subject=mapper.getSubject(1);
      Assert.assertNotNull(subject);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test(expected=PersistenceException.class) public void primitiveSubjects(){
    final SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      final AutoConstructorMapper mapper=sqlSession.getMapper(AutoConstructorMapper.class);
      mapper.getSubjects();
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void wrapperSubject(){
    final SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      final AutoConstructorMapper mapper=sqlSession.getMapper(AutoConstructorMapper.class);
      verifySubjects(mapper.getWrapperSubjects());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void annotatedSubject(){
    final SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      final AutoConstructorMapper mapper=sqlSession.getMapper(AutoConstructorMapper.class);
      verifySubjects(mapper.getAnnotatedSubjects());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test(expected=PersistenceException.class) public void badSubject(){
    final SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      final AutoConstructorMapper mapper=sqlSession.getMapper(AutoConstructorMapper.class);
      mapper.getBadSubjects();
    }
  finally {
      sqlSession.close();
    }
  }
  private void verifySubjects(  final List<?> subjects){
    Assert.assertNotNull(subjects);
    Assertions.assertThat(subjects.size()).isEqualTo(3);
  }
}
