public class DoubleTypeHandlerTest extends BaseTypeHandlerTest {
  private static final TypeHandler<Double> TYPE_HANDLER=new DoubleTypeHandler();
  @Override @Test public void shouldSetParameter() throws Exception {
    TYPE_HANDLER.setParameter(ps,1,100d,null);
    verify(ps).setDouble(1,100d);
  }
  @Override @Test public void shouldGetResultFromResultSetByName() throws Exception {
    when(rs.getDouble("column")).thenReturn(100d);
    when(rs.wasNull()).thenReturn(false);
    assertEquals(new Double(100d),TYPE_HANDLER.getResult(rs,"column"));
  }
  @Override public void shouldGetResultNullFromResultSetByName() throws Exception {
  }
  @Override @Test public void shouldGetResultFromResultSetByPosition() throws Exception {
    when(rs.getDouble(1)).thenReturn(100d);
    when(rs.wasNull()).thenReturn(false);
    assertEquals(new Double(100d),TYPE_HANDLER.getResult(rs,1));
  }
  @Override public void shouldGetResultNullFromResultSetByPosition() throws Exception {
  }
  @Override @Test public void shouldGetResultFromCallableStatement() throws Exception {
    when(cs.getDouble(1)).thenReturn(100d);
    when(cs.wasNull()).thenReturn(false);
    assertEquals(new Double(100d),TYPE_HANDLER.getResult(cs,1));
  }
  @Override public void shouldGetResultNullFromCallableStatement() throws Exception {
  }
}
