public class CacheBuilderTest {
  @Test public void testInitializing() throws Exception {
    InitializingCache cache=unwrap(new CacheBuilder("test").implementation(InitializingCache.class).build());
    Assertions.assertThat(cache.initialized).isTrue();
  }
  @Test public void testInitializingFailure() throws Exception {
    when(new CacheBuilder("test").implementation(InitializingFailureCache.class)).build();
    then(caughtException()).isInstanceOf(CacheException.class).hasMessage("Failed cache initialization for 'test' on 'org.apache.ibatis.mapping.CacheBuilderTest$InitializingFailureCache'");
  }
  @SuppressWarnings("unchecked") private <T>T unwrap(  Cache cache){
    Field field;
    try {
      field=cache.getClass().getDeclaredField("delegate");
    }
 catch (    NoSuchFieldException e) {
      throw new IllegalStateException(e);
    }
    try {
      field.setAccessible(true);
      return (T)field.get(cache);
    }
 catch (    IllegalAccessException e) {
      throw new IllegalStateException(e);
    }
 finally {
      field.setAccessible(false);
    }
  }
private static class InitializingCache extends PerpetualCache implements InitializingObject {
    private boolean initialized;
    public InitializingCache(    String id){
      super(id);
    }
    @Override public void initialize(){
      this.initialized=true;
    }
  }
private static class InitializingFailureCache extends PerpetualCache implements InitializingObject {
    public InitializingFailureCache(    String id){
      super(id);
    }
    @Override public void initialize() throws Exception {
      throw new IllegalStateException("error");
    }
  }
}
