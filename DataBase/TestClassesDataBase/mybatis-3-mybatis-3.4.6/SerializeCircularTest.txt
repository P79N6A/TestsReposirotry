public class SerializeCircularTest {
  @Test public void serializeAndDeserializeObjectsWithAggressiveLazyLoadingWithoutPreloadingAttribute() throws Exception {
    SqlSession sqlSession=createSessionWithAggressiveLazyLoading();
    try {
      testSerializeWithoutPreloadingAttribute(sqlSession);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void serializeAndDeserializeObjectsWithAggressiveLazyLoadingWithPreloadingAttribute() throws Exception {
    SqlSession sqlSession=createSessionWithAggressiveLazyLoading();
    try {
      testSerializeWithPreloadingAttribute(sqlSession);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void serializeAndDeserializeObjectsWithoutAggressiveLazyLoadingWithoutPreloadingAttribute() throws Exception {
    SqlSession sqlSession=createSessionWithoutAggressiveLazyLoading();
    try {
      testSerializeWithoutPreloadingAttribute(sqlSession);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void serializeAndDeserializeObjectsWithoutAggressiveLazyLoadingWithPreloadingAttribute() throws Exception {
    SqlSession sqlSession=createSessionWithoutAggressiveLazyLoading();
    try {
      testSerializeWithPreloadingAttribute(sqlSession);
    }
  finally {
      sqlSession.close();
    }
  }
  private SqlSession createSessionWithoutAggressiveLazyLoading() throws Exception {
    return createSession(false);
  }
  private SqlSession createSessionWithAggressiveLazyLoading() throws Exception {
    return createSession(true);
  }
  private SqlSession createSession(  boolean anAggressiveLazyLoading) throws Exception {
    String xmlConfig=anAggressiveLazyLoading ? "org/apache/ibatis/submitted/serializecircular/MapperConfigWithAggressiveLazyLoading.xml" : "org/apache/ibatis/submitted/serializecircular/MapperConfigWithoutAggressiveLazyLoading.xml";
    SqlSessionFactory sqlSessionFactory=getSqlSessionFactoryXmlConfig(xmlConfig);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    return sqlSession;
  }
  private void testSerializeWithPreloadingAttribute(  SqlSession sqlSession){
    testSerialize(sqlSession,true);
  }
  private void testSerializeWithoutPreloadingAttribute(  SqlSession sqlSession){
    testSerialize(sqlSession,false);
  }
  private void testSerialize(  SqlSession sqlSession,  boolean aPreloadAttribute){
    DepartmentMapper departmentMapper=sqlSession.getMapper(DepartmentMapper.class);
    Department department=departmentMapper.getById(1);
    if (aPreloadAttribute) {
      department.getAttribute();
    }
    serializeAndDeserializeObject(department);
    department.getPerson();
    serializeAndDeserializeObject(department);
  }
  protected void serializeAndDeserializeObject(  Object anObject){
    UtilityTester.serializeAndDeserializeObject(anObject);
  }
  private SqlSessionFactory getSqlSessionFactoryXmlConfig(  String resource) throws Exception {
    Reader configReader=Resources.getResourceAsReader(resource);
    SqlSessionFactory sqlSessionFactory=new SqlSessionFactoryBuilder().build(configReader);
    configReader.close();
    Connection conn=sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
    initDb(conn);
    conn.close();
    return sqlSessionFactory;
  }
  private static void initDb(  Connection conn) throws IOException, SQLException {
    try {
      Reader scriptReader=Resources.getResourceAsReader("org/apache/ibatis/submitted/serializecircular/CreateDB.sql");
      ScriptRunner runner=new ScriptRunner(conn);
      runner.setLogWriter(null);
      runner.setErrorLogWriter(null);
      runner.runScript(scriptReader);
      conn.commit();
      scriptReader.close();
    }
  finally {
      if (conn != null) {
        conn.close();
      }
    }
  }
}
