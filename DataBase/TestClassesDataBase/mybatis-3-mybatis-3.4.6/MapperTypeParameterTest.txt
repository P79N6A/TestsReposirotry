public class MapperTypeParameterTest {
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/mapper_type_parameter/mybatis-config.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    SqlSession session=sqlSessionFactory.openSession();
    Connection conn=session.getConnection();
    reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/mapper_type_parameter/CreateDB.sql");
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.runScript(reader);
    conn.close();
    reader.close();
    session.close();
  }
  @Test public void shouldResolveReturnType(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      PersonMapper mapper=sqlSession.getMapper(PersonMapper.class);
      Person person=mapper.select(new Person(1));
      assertEquals("Jane",person.getName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldResolveListTypeParam(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      PersonMapper mapper=sqlSession.getMapper(PersonMapper.class);
      List<Person> persons=mapper.selectList(null);
      assertEquals(2,persons.size());
      assertEquals("Jane",persons.get(0).getName());
      assertEquals("John",persons.get(1).getName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldResolveMultipleTypeParam(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      CountryMapper mapper=sqlSession.getMapper(CountryMapper.class);
      Map<Long,Country> results=mapper.selectMap(new Country());
      assertEquals(2,results.size());
      assertEquals("Japan",results.get(1L).getName());
      assertEquals("New Zealand",results.get(2L).getName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldResolveParameterizedReturnType(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      PersonListMapper mapper=sqlSession.getMapper(PersonListMapper.class);
      List<Person> persons=mapper.select(null);
      assertEquals(2,persons.size());
      assertEquals("Jane",persons.get(0).getName());
      assertEquals("John",persons.get(1).getName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldResolveParam(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      CountryMapper mapper=sqlSession.getMapper(CountryMapper.class);
      assertEquals(1,mapper.update(new Country(2L,"Greenland")));
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldResolveListParam(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      PersonMapper mapper=sqlSession.getMapper(PersonMapper.class);
      Person person1=new Person("James");
      assertEquals(1,mapper.insert(Arrays.asList(person1)));
      assertNotNull(person1.getId());
    }
  finally {
      sqlSession.close();
    }
  }
}
