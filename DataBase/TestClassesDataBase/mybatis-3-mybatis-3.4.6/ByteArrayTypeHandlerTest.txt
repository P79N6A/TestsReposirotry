public class ByteArrayTypeHandlerTest extends BaseTypeHandlerTest {
  private static final TypeHandler<byte[]> TYPE_HANDLER=new ByteArrayTypeHandler();
  @Override @Test public void shouldSetParameter() throws Exception {
    TYPE_HANDLER.setParameter(ps,1,new byte[]{1,2,3},null);
    verify(ps).setBytes(1,new byte[]{1,2,3});
  }
  @Override @Test public void shouldGetResultFromResultSetByName() throws Exception {
    when(rs.getBytes("column")).thenReturn(new byte[]{1,2,3});
    when(rs.wasNull()).thenReturn(false);
    assertArrayEquals(new byte[]{1,2,3},TYPE_HANDLER.getResult(rs,"column"));
  }
  @Override public void shouldGetResultNullFromResultSetByName() throws Exception {
  }
  @Override @Test public void shouldGetResultFromResultSetByPosition() throws Exception {
    when(rs.getBytes(1)).thenReturn(new byte[]{1,2,3});
    when(rs.wasNull()).thenReturn(false);
    assertArrayEquals(new byte[]{1,2,3},TYPE_HANDLER.getResult(rs,1));
  }
  @Override public void shouldGetResultNullFromResultSetByPosition() throws Exception {
  }
  @Override @Test public void shouldGetResultFromCallableStatement() throws Exception {
    when(cs.getBytes(1)).thenReturn(new byte[]{1,2,3});
    when(cs.wasNull()).thenReturn(false);
    assertArrayEquals(new byte[]{1,2,3},TYPE_HANDLER.getResult(cs,1));
  }
  @Override public void shouldGetResultNullFromCallableStatement() throws Exception {
  }
}
