public class BigDecimalTypeHandlerTest extends BaseTypeHandlerTest {
  private static final TypeHandler<BigDecimal> TYPE_HANDLER=new BigDecimalTypeHandler();
  @Override @Test public void shouldSetParameter() throws Exception {
    TYPE_HANDLER.setParameter(ps,1,new BigDecimal(1),null);
    verify(ps).setBigDecimal(1,new BigDecimal(1));
  }
  @Override @Test public void shouldGetResultFromResultSetByName() throws Exception {
    when(rs.getBigDecimal("column")).thenReturn(new BigDecimal(1));
    when(rs.wasNull()).thenReturn(false);
    assertEquals(new BigDecimal(1),TYPE_HANDLER.getResult(rs,"column"));
  }
  @Override public void shouldGetResultNullFromResultSetByName() throws Exception {
  }
  @Override @Test public void shouldGetResultFromResultSetByPosition() throws Exception {
    when(rs.getBigDecimal(1)).thenReturn(new BigDecimal(1));
    when(rs.wasNull()).thenReturn(false);
    assertEquals(new BigDecimal(1),TYPE_HANDLER.getResult(rs,1));
  }
  @Override public void shouldGetResultNullFromResultSetByPosition() throws Exception {
  }
  @Override @Test public void shouldGetResultFromCallableStatement() throws Exception {
    when(cs.getBigDecimal(1)).thenReturn(new BigDecimal(1));
    when(cs.wasNull()).thenReturn(false);
    assertEquals(new BigDecimal(1),TYPE_HANDLER.getResult(cs,1));
  }
  @Override public void shouldGetResultNullFromCallableStatement() throws Exception {
  }
}
