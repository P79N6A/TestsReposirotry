public class LazyPropertiesTest {
  private static SqlSessionFactory sqlSessionFactory;
  @Before public void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/lazy_properties/mybatis-config.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    SqlSession session=sqlSessionFactory.openSession();
    Connection conn=session.getConnection();
    reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/lazy_properties/CreateDB.sql");
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.runScript(reader);
    conn.close();
    reader.close();
    session.close();
  }
  @Test public void shouldLoadOnlyTheInvokedLazyProperty(){
    sqlSessionFactory.getConfiguration().setAggressiveLazyLoading(false);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUser(1);
      assertEquals(0,user.setterCounter);
      assertNotNull(user.getLazy1());
      assertEquals("Should NOT load other lazy properties.",1,user.setterCounter);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void verifyAggressiveLazyLoadingBehavior(){
    sqlSessionFactory.getConfiguration().setAggressiveLazyLoading(true);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUser(1);
      assertEquals("Should load all lazy properties.",3,user.setterCounter);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldToStringTriggerLazyLoading(){
    sqlSessionFactory.getConfiguration().setAggressiveLazyLoading(false);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUser(1);
      user.toString();
      assertEquals(3,user.setterCounter);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldHashCodeTriggerLazyLoading(){
    sqlSessionFactory.getConfiguration().setAggressiveLazyLoading(false);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUser(1);
      user.hashCode();
      assertEquals(3,user.setterCounter);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldEqualsTriggerLazyLoading(){
    sqlSessionFactory.getConfiguration().setAggressiveLazyLoading(false);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUser(1);
      user.equals(null);
      assertEquals(3,user.setterCounter);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldCloneTriggerLazyLoading(){
    sqlSessionFactory.getConfiguration().setAggressiveLazyLoading(false);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUser(1);
      user.clone();
      assertEquals(3,user.setterCounter);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void verifyEmptyLazyLoadTriggerMethods(){
    Configuration configuration=sqlSessionFactory.getConfiguration();
    configuration.setAggressiveLazyLoading(false);
    configuration.setLazyLoadTriggerMethods(new HashSet<String>());
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUser(1);
      user.toString();
      user.hashCode();
      user.equals(null);
      user.clone();
      assertEquals(0,user.setterCounter);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void verifyCustomLazyLoadTriggerMethods(){
    Configuration configuration=sqlSessionFactory.getConfiguration();
    configuration.setAggressiveLazyLoading(false);
    configuration.setLazyLoadTriggerMethods(new HashSet<String>(Collections.singleton("trigger")));
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUser(1);
      user.toString();
      user.hashCode();
      user.equals(null);
      user.clone();
      assertEquals(0,user.setterCounter);
      user.trigger();
      assertEquals(3,user.setterCounter);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldInvokingSetterInvalidateLazyLoading_Javassist(){
    shoulInvokingSetterInvalidateLazyLoading(new JavassistProxyFactory());
  }
  @Test public void shouldInvokingSetterInvalidateLazyLoading_Cglib(){
    shoulInvokingSetterInvalidateLazyLoading(new CglibProxyFactory());
  }
  private void shoulInvokingSetterInvalidateLazyLoading(  ProxyFactory proxyFactory){
    Configuration config=sqlSessionFactory.getConfiguration();
    config.setProxyFactory(proxyFactory);
    config.setAggressiveLazyLoading(false);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUser(1);
      User u2=new User();
      u2.setId(99);
      user.setLazy1(u2);
      assertEquals(1,user.setterCounter);
      assertEquals(Integer.valueOf(99),user.getLazy1().getId());
      assertEquals(1,user.setterCounter);
    }
  finally {
      sqlSession.close();
    }
  }
}
