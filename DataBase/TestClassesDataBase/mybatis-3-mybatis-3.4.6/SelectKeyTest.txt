public class SelectKeyTest {
  protected static SqlSessionFactory sqlSessionFactory;
  @Before public void setUp() throws Exception {
    Connection conn=null;
    try {
      Class.forName("org.hsqldb.jdbcDriver");
      conn=DriverManager.getConnection("jdbc:hsqldb:mem:lname","sa","");
      Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/selectkey/CreateDB.sql");
      ScriptRunner runner=new ScriptRunner(conn);
      runner.setLogWriter(null);
      runner.setErrorLogWriter(null);
      runner.runScript(reader);
      conn.commit();
      reader.close();
      reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/selectkey/MapperConfig.xml");
      sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
      reader.close();
      sqlSessionFactory.getConfiguration().addMapper(AnnotatedMapper.class);
    }
  finally {
      if (conn != null) {
        conn.close();
      }
    }
  }
  @Test public void testSelectKey() throws Exception {
    String resource="org/apache/ibatis/submitted/selectkey/MapperConfig.xml";
    Reader reader=Resources.getResourceAsReader(resource);
    SqlSessionFactoryBuilder builder=new SqlSessionFactoryBuilder();
    SqlSessionFactory sqlMapper=builder.build(reader);
    assertNotNull(sqlMapper);
  }
  @Test public void testInsertTable1(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Map<String,String> parms=new HashMap<String,String>();
      parms.put("name","Fred");
      int rows=sqlSession.insert("org.apache.ibatis.submitted.selectkey.Table1.insert",parms);
      assertEquals(1,rows);
      assertEquals(11,parms.get("id"));
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testInsertTable2(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Map<String,String> parms=new HashMap<String,String>();
      parms.put("name","Fred");
      int rows=sqlSession.insert("org.apache.ibatis.submitted.selectkey.Table2.insert",parms);
      assertEquals(1,rows);
      assertEquals(22,parms.get("id"));
    }
  finally {
      sqlSession.close();
    }
  }
  @Test(expected=PersistenceException.class) public void testSeleckKeyReturnsNoData(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Map<String,String> parms=new HashMap<String,String>();
      parms.put("name","Fred");
      int rows=sqlSession.insert("org.apache.ibatis.submitted.selectkey.Table2.insertNoValuesInSelectKey",parms);
      assertEquals(1,rows);
      assertNull(parms.get("id"));
    }
  finally {
      sqlSession.close();
    }
  }
  @Test(expected=PersistenceException.class) public void testSeleckKeyReturnsTooManyData(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Map<String,String> parms=new HashMap<String,String>();
      parms.put("name","Fred");
      sqlSession.insert("org.apache.ibatis.submitted.selectkey.Table2.insertTooManyValuesInSelectKey",parms);
      sqlSession.insert("org.apache.ibatis.submitted.selectkey.Table2.insertTooManyValuesInSelectKey",parms);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testAnnotatedInsertTable2(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable2(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testAnnotatedInsertTable2WithGeneratedKey(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable2WithGeneratedKey(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("barney_fred",name.getGeneratedName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test @Ignore("HSQLDB is not returning the generated column after the update") public void testAnnotatedUpdateTable2WithGeneratedKey(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable2WithGeneratedKey(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("barney_fred",name.getGeneratedName());
      name.setName("Wilma");
      rows=mapper.updateTable2WithGeneratedKey(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("Wilma_fred",name.getGeneratedName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test @Ignore("HSQLDB is not returning the generated column after the update") public void testAnnotatedUpdateTable2WithGeneratedKeyXml(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable2WithGeneratedKeyXml(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("barney_fred",name.getGeneratedName());
      name.setName("Wilma");
      rows=mapper.updateTable2WithGeneratedKeyXml(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("Wilma_fred",name.getGeneratedName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testAnnotatedInsertTable2WithGeneratedKeyXml(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable2WithGeneratedKeyXml(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("barney_fred",name.getGeneratedName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testAnnotatedInsertTable2WithSelectKeyWithKeyMap(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable2WithSelectKeyWithKeyMap(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("barney_fred",name.getGeneratedName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testAnnotatedUpdateTable2WithSelectKeyWithKeyMap(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable2WithSelectKeyWithKeyMap(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("barney_fred",name.getGeneratedName());
      name.setName("Wilma");
      rows=mapper.updateTable2WithSelectKeyWithKeyMap(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("Wilma_fred",name.getGeneratedName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testAnnotatedInsertTable2WithSelectKeyWithKeyMapXml(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable2WithSelectKeyWithKeyMapXml(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("barney_fred",name.getGeneratedName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testAnnotatedUpdateTable2WithSelectKeyWithKeyMapXml(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable2WithSelectKeyWithKeyMapXml(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("barney_fred",name.getGeneratedName());
      name.setName("Wilma");
      rows=mapper.updateTable2WithSelectKeyWithKeyMapXml(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("Wilma_fred",name.getGeneratedName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testAnnotatedInsertTable2WithSelectKeyWithKeyObject(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable2WithSelectKeyWithKeyObject(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("barney_fred",name.getGeneratedName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testAnnotatedUpdateTable2WithSelectKeyWithKeyObject(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable2WithSelectKeyWithKeyObject(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("barney_fred",name.getGeneratedName());
      name.setName("Wilma");
      rows=mapper.updateTable2WithSelectKeyWithKeyObject(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("Wilma_fred",name.getGeneratedName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testAnnotatedUpdateTable2WithSelectKeyWithKeyObjectXml(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable2WithSelectKeyWithKeyObjectXml(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("barney_fred",name.getGeneratedName());
      name.setName("Wilma");
      rows=mapper.updateTable2WithSelectKeyWithKeyObjectXml(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("Wilma_fred",name.getGeneratedName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testAnnotatedInsertTable2WithSelectKeyWithKeyObjectXml(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable2WithSelectKeyWithKeyObjectXml(name);
      assertEquals(1,rows);
      assertEquals(22,name.getNameId());
      assertEquals("barney_fred",name.getGeneratedName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testAnnotatedInsertTable3(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable3(name);
      assertEquals(1,rows);
      assertEquals(33,name.getNameId());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testAnnotatedInsertTable3_2(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("barney");
      AnnotatedMapper mapper=sqlSession.getMapper(AnnotatedMapper.class);
      int rows=mapper.insertTable3_2(name);
      assertEquals(1,rows);
      assertEquals(33,name.getNameId());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test(expected=PersistenceException.class) public void testSeleckKeyWithWrongKeyProperty(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Name name=new Name();
      name.setName("Kyoto");
      sqlSession.insert("org.apache.ibatis.submitted.selectkey.Table2.insertWrongKeyProperty",name);
    }
  finally {
      sqlSession.close();
    }
  }
}
