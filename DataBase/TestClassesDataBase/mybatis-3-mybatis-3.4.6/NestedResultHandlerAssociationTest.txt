public class NestedResultHandlerAssociationTest {
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/nestedresulthandler_association/mybatis-config.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    SqlSession session=sqlSessionFactory.openSession();
    Connection conn=session.getConnection();
    reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/nestedresulthandler_association/CreateDB.sql");
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.runScript(reader);
    conn.close();
    reader.close();
    session.close();
  }
  @Test public void shouldHandleRowBounds() throws Exception {
    SqlSession sqlSession=sqlSessionFactory.openSession();
    final SimpleDateFormat fmt=new SimpleDateFormat("yyyy-MM-dd");
    Date targetMonth=fmt.parse("2014-01-01");
    final List<Account> accounts=new ArrayList<Account>();
    try {
      sqlSession.select("collectPageByBirthMonth",targetMonth,new RowBounds(1,2),new ResultHandler(){
        @Override public void handleResult(        ResultContext context){
          Account account=(Account)context.getResultObject();
          accounts.add(account);
        }
      }
);
    }
  finally {
      sqlSession.close();
    }
    assertEquals(2,accounts.size());
    assertEquals("Bob2",accounts.get(0).getAccountName());
    assertEquals("Bob3",accounts.get(1).getAccountName());
  }
  @Test public void shouldHandleStop() throws Exception {
    SqlSession sqlSession=sqlSessionFactory.openSession();
    final SimpleDateFormat fmt=new SimpleDateFormat("yyyy-MM-dd");
    final List<Account> accounts=new ArrayList<Account>();
    try {
      Date targetMonth=fmt.parse("2014-01-01");
      sqlSession.select("collectPageByBirthMonth",targetMonth,new ResultHandler(){
        @Override public void handleResult(        ResultContext context){
          Account account=(Account)context.getResultObject();
          accounts.add(account);
          if (accounts.size() > 1)           context.stop();
        }
      }
);
    }
  finally {
      sqlSession.close();
    }
    assertEquals(2,accounts.size());
    assertEquals("Bob1",accounts.get(0).getAccountName());
    assertEquals("Bob2",accounts.get(1).getAccountName());
  }
}
