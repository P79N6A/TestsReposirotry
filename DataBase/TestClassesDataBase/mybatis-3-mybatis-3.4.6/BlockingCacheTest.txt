public class BlockingCacheTest {
  private static SqlSessionFactory sqlSessionFactory;
  @Before public void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/blocking_cache/mybatis-config.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    SqlSession session=sqlSessionFactory.openSession();
    Connection conn=session.getConnection();
    reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/blocking_cache/CreateDB.sql");
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.runScript(reader);
    conn.close();
    reader.close();
    session.close();
  }
  @Test public void testBlockingCache(){
    ExecutorService defaultThreadPool=Executors.newFixedThreadPool(2);
    long init=System.currentTimeMillis();
    for (int i=0; i < 2; i++) {
      defaultThreadPool.execute(new Runnable(){
        @Override public void run(){
          accessDB();
        }
      }
);
    }
    defaultThreadPool.shutdown();
    while (!defaultThreadPool.isTerminated()) {
    }
    long totalTime=System.currentTimeMillis() - init;
    Assert.assertTrue(totalTime > 1000);
  }
  private void accessDB(){
    SqlSession sqlSession1=sqlSessionFactory.openSession();
    try {
      PersonMapper pm=sqlSession1.getMapper(PersonMapper.class);
      pm.findAll();
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
        Assert.fail(e.getMessage());
      }
    }
  finally {
      sqlSession1.close();
    }
  }
}
