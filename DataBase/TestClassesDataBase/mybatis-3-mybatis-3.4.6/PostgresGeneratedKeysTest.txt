public class PostgresGeneratedKeysTest {
  private static final EmbeddedPostgres postgres=new EmbeddedPostgres();
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    String url=postgres.start(EmbeddedPostgres.cachedRuntimeConfig(Paths.get(System.getProperty("java.io.tmpdir"),"pgembed")),"localhost",SocketUtil.findFreePort(),"postgres_genkeys","postgres","root",Collections.emptyList());
    Configuration configuration=new Configuration();
    Environment environment=new Environment("development",new JdbcTransactionFactory(),new UnpooledDataSource("org.postgresql.Driver",url,null));
    configuration.setEnvironment(environment);
    configuration.setUseGeneratedKeys(true);
    configuration.addMapper(Mapper.class);
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(configuration);
    try (SqlSession session=sqlSessionFactory.openSession();Connection conn=session.getConnection();Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/usesjava8/postgres_genkeys/CreateDB.sql")){
      ScriptRunner runner=new ScriptRunner(conn);
      runner.setLogWriter(null);
      runner.runScript(reader);
    }
   }
  @AfterClass public static void tearDown(){
    postgres.stop();
  }
  @Test public void testInsertIntoTableWithNoSerialColumn() throws Exception {
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Section section=new Section();
      section.setSectionId(2);
      section.setName("Section 2");
      int result=mapper.insertSection(section);
      assertEquals(1,result);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testUpdateTableWithSerial() throws Exception {
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=new User();
      user.setUserId(1);
      user.setName("Ethan");
      int result=mapper.updateUser(user);
      assertEquals(1,result);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testUnusedGeneratedKey() throws Exception {
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      int result=mapper.insertUser("John");
      assertEquals(1,result);
    }
  finally {
      sqlSession.close();
    }
  }
}
