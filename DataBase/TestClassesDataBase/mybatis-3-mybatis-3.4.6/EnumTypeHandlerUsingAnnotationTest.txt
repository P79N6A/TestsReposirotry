/** 
 * Tests for type handler of enum using annotations.
 * @since #444
 * @author Kazuki Shimizu
 * @see org.apache.ibatis.annotations.Arg
 * @see org.apache.ibatis.annotations.Result
 * @see org.apache.ibatis.annotations.TypeDiscriminator
 */
public class EnumTypeHandlerUsingAnnotationTest {
  private static SqlSessionFactory sqlSessionFactory;
  private SqlSession sqlSession;
  @BeforeClass public static void initDatabase() throws Exception {
    Connection conn=null;
    try {
      Class.forName("org.hsqldb.jdbcDriver");
      conn=DriverManager.getConnection("jdbc:hsqldb:mem:enumtypehandler_on_annotation","sa","");
      Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/enumtypehandler_on_annotation/CreateDB.sql");
      ScriptRunner runner=new ScriptRunner(conn);
      runner.setLogWriter(null);
      runner.setErrorLogWriter(null);
      runner.runScript(reader);
      conn.commit();
      reader.close();
      reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/enumtypehandler_on_annotation/mybatis-config.xml");
      sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
      sqlSessionFactory.getConfiguration().getMapperRegistry().addMapper(PersonMapper.class);
      reader.close();
    }
  finally {
      if (conn != null) {
        conn.close();
      }
    }
  }
  @Before public void openSqlSession(){
    this.sqlSession=sqlSessionFactory.openSession();
  }
  @After public void closeSqlSession(){
    sqlSession.close();
  }
  @Test public void testForArg(){
    PersonMapper personMapper=sqlSession.getMapper(PersonMapper.class);
{
      Person person=personMapper.findOneUsingConstructor(1);
      assertThat(person.getId()).isEqualTo(1);
      assertThat(person.getFirstName()).isEqualTo("John");
      assertThat(person.getLastName()).isEqualTo("Smith");
      assertThat(person.getPersonType()).isEqualTo(Person.PersonType.PERSON);
    }
{
      Person employee=personMapper.findOneUsingConstructor(2);
      assertThat(employee.getId()).isEqualTo(2);
      assertThat(employee.getFirstName()).isEqualTo("Mike");
      assertThat(employee.getLastName()).isEqualTo("Jordan");
      assertThat(employee.getPersonType()).isEqualTo(Person.PersonType.EMPLOYEE);
    }
  }
  @Test public void testForResult(){
    PersonMapper personMapper=sqlSession.getMapper(PersonMapper.class);
{
      Person person=personMapper.findOneUsingSetter(1);
      assertThat(person.getId()).isEqualTo(1);
      assertThat(person.getFirstName()).isEqualTo("John");
      assertThat(person.getLastName()).isEqualTo("Smith");
      assertThat(person.getPersonType()).isEqualTo(Person.PersonType.PERSON);
    }
{
      Person employee=personMapper.findOneUsingSetter(2);
      assertThat(employee.getId()).isEqualTo(2);
      assertThat(employee.getFirstName()).isEqualTo("Mike");
      assertThat(employee.getLastName()).isEqualTo("Jordan");
      assertThat(employee.getPersonType()).isEqualTo(Person.PersonType.EMPLOYEE);
    }
  }
  @Test public void testForTypeDiscriminator(){
    PersonMapper personMapper=sqlSession.getMapper(PersonMapper.class);
{
      Person person=personMapper.findOneUsingTypeDiscriminator(1);
      assertThat(person.getClass()).isEqualTo(Person.class);
      assertThat(person.getId()).isEqualTo(1);
      assertThat(person.getFirstName()).isEqualTo("John");
      assertThat(person.getLastName()).isEqualTo("Smith");
      assertThat(person.getPersonType()).isEqualTo(Person.PersonType.PERSON);
    }
{
      Person employee=personMapper.findOneUsingTypeDiscriminator(2);
      assertThat(employee.getClass()).isEqualTo(Employee.class);
      assertThat(employee.getId()).isEqualTo(2);
      assertThat(employee.getFirstName()).isEqualTo("Mike");
      assertThat(employee.getLastName()).isEqualTo("Jordan");
      assertThat(employee.getPersonType()).isEqualTo(Person.PersonType.EMPLOYEE);
    }
  }
}
