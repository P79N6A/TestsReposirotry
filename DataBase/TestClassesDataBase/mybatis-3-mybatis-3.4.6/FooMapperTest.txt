public class FooMapperTest {
  private final static String SQL_MAP_CONFIG="org/apache/ibatis/submitted/overwritingproperties/sqlmap.xml";
  private static SqlSession session;
  private static Connection conn;
  @BeforeClass public static void setUpBeforeClass(){
    try {
      final SqlSessionFactory factory=new SqlSessionFactoryBuilder().build(Resources.getResourceAsReader(SQL_MAP_CONFIG));
      session=factory.openSession();
      conn=session.getConnection();
      ScriptRunner runner=new ScriptRunner(conn);
      runner.setLogWriter(null);
      runner.setErrorLogWriter(null);
      Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/overwritingproperties/create-schema-mysql.sql");
      runner.runScript(reader);
      reader.close();
    }
 catch (    Exception ex) {
      Assert.fail(ex.getMessage());
    }
  }
  @Before public void setUp(){
    final FooMapper mapper=session.getMapper(FooMapper.class);
    mapper.deleteAllFoo();
    session.commit();
  }
  @Test public void testOverwriteWithDefault(){
    final FooMapper mapper=session.getMapper(FooMapper.class);
    final Bar bar=new Bar(2L);
    final Foo inserted=new Foo(1L,bar,3,4);
    mapper.insertFoo(inserted);
    final Foo selected=mapper.selectFoo();
    Assert.assertEquals(inserted.getField1(),selected.getField1());
    Assert.assertEquals(inserted.getField3(),selected.getField4());
    Assert.assertEquals(inserted.getField4(),selected.getField3());
    Assert.assertEquals(inserted.getField2().getField1(),selected.getField2().getField1());
  }
  @AfterClass public static void tearDownAfterClass(){
    try {
      conn.close();
    }
 catch (    SQLException e) {
      Assert.fail(e.getMessage());
    }
    session.close();
  }
}
