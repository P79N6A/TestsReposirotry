public class GeneralExceptionsTest {
  private static final String EXPECTED_MESSAGE="Test Message";
  private static final Exception EXPECTED_CAUSE=new Exception("Nested Exception");
  @Test public void should(){
    RuntimeException thrown=ExceptionFactory.wrapException(EXPECTED_MESSAGE,EXPECTED_CAUSE);
    assertTrue("Exception should be wrapped in RuntimeSqlException.",thrown instanceof PersistenceException);
    testThrowException(thrown);
  }
  @Test public void shouldInstantiateAndThrowAllCustomExceptions() throws Exception {
    Class<?>[] exceptionTypes={BindingException.class,CacheException.class,DataSourceException.class,ExecutorException.class,LogException.class,ParsingException.class,BuilderException.class,PluginException.class,ReflectionException.class,PersistenceException.class,SqlSessionException.class,TransactionException.class,TypeException.class,ScriptingException.class};
    for (    Class<?> exceptionType : exceptionTypes) {
      testExceptionConstructors(exceptionType);
    }
  }
  private void testExceptionConstructors(  Class<?> exceptionType) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
    Exception e=(Exception)exceptionType.newInstance();
    testThrowException(e);
    e=(Exception)exceptionType.getConstructor(String.class).newInstance(EXPECTED_MESSAGE);
    testThrowException(e);
    e=(Exception)exceptionType.getConstructor(String.class,Throwable.class).newInstance(EXPECTED_MESSAGE,EXPECTED_CAUSE);
    testThrowException(e);
    e=(Exception)exceptionType.getConstructor(Throwable.class).newInstance(EXPECTED_CAUSE);
    testThrowException(e);
  }
  private void testThrowException(  Exception thrown){
    try {
      throw thrown;
    }
 catch (    Exception caught) {
      assertEquals(thrown.getMessage(),caught.getMessage());
      assertEquals(thrown.getCause(),caught.getCause());
    }
  }
}
