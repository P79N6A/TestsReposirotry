@RunWith(MockitoJUnitRunner.class) public class BaseStatementHandlerTest {
  @Spy Configuration configuration;
  @Mock Statement statement;
  MappedStatement.Builder mappedStatementBuilder;
  @Before public void setupMappedStatement(){
    this.mappedStatementBuilder=new MappedStatement.Builder(configuration,"id",new StaticSqlSource(configuration,"sql"),null);
  }
  @After public void resetMocks(){
    reset(configuration,statement);
  }
  @Test public void notSpecifyTimeout() throws SQLException {
    BaseStatementHandler handler=new SimpleStatementHandler(null,mappedStatementBuilder.build(),null,null,null,null);
    handler.setStatementTimeout(statement,null);
    verifyZeroInteractions(statement);
  }
  @Test public void specifyMappedStatementTimeoutOnly() throws SQLException {
    mappedStatementBuilder.timeout(10);
    BaseStatementHandler handler=new SimpleStatementHandler(null,mappedStatementBuilder.build(),null,null,null,null);
    handler.setStatementTimeout(statement,null);
    verify(statement).setQueryTimeout(10);
  }
  @Test public void specifyDefaultTimeoutOnly() throws SQLException {
    doReturn(20).when(configuration).getDefaultStatementTimeout();
    BaseStatementHandler handler=new SimpleStatementHandler(null,mappedStatementBuilder.build(),null,null,null,null);
    handler.setStatementTimeout(statement,null);
    verify(statement).setQueryTimeout(20);
  }
  @Test public void specifyTransactionTimeout() throws SQLException {
    BaseStatementHandler handler=new SimpleStatementHandler(null,mappedStatementBuilder.build(),null,null,null,null);
    handler.setStatementTimeout(statement,5);
    verify(statement).setQueryTimeout(5);
  }
  @Test public void specifyQueryTimeoutZeroAndTransactionTimeout() throws SQLException {
    doReturn(0).when(configuration).getDefaultStatementTimeout();
    BaseStatementHandler handler=new SimpleStatementHandler(null,mappedStatementBuilder.build(),null,null,null,null);
    handler.setStatementTimeout(statement,5);
    verify(statement).setQueryTimeout(5);
  }
  @Test public void specifyMappedStatementTimeoutAndDefaultTimeout() throws SQLException {
    doReturn(20).when(configuration).getDefaultStatementTimeout();
    mappedStatementBuilder.timeout(30);
    BaseStatementHandler handler=new SimpleStatementHandler(null,mappedStatementBuilder.build(),null,null,null,null);
    handler.setStatementTimeout(statement,null);
    verify(statement).setQueryTimeout(30);
    verify(configuration,never()).getDefaultStatementTimeout();
  }
  @Test public void specifyQueryTimeoutAndTransactionTimeoutMinIsQueryTimeout() throws SQLException {
    doReturn(10).when(configuration).getDefaultStatementTimeout();
    BaseStatementHandler handler=new SimpleStatementHandler(null,mappedStatementBuilder.build(),null,null,null,null);
    handler.setStatementTimeout(statement,20);
    verify(statement).setQueryTimeout(10);
  }
  @Test public void specifyQueryTimeoutAndTransactionTimeoutMinIsTransactionTimeout() throws SQLException {
    doReturn(10).when(configuration).getDefaultStatementTimeout();
    BaseStatementHandler handler=new SimpleStatementHandler(null,mappedStatementBuilder.build(),null,null,null,null);
    handler.setStatementTimeout(statement,5);
    verify(statement).setQueryTimeout(10);
    verify(statement).setQueryTimeout(5);
  }
  @Test public void specifyQueryTimeoutAndTransactionTimeoutWithSameValue() throws SQLException {
    doReturn(10).when(configuration).getDefaultStatementTimeout();
    BaseStatementHandler handler=new SimpleStatementHandler(null,mappedStatementBuilder.build(),null,null,null,null);
    handler.setStatementTimeout(statement,10);
    verify(statement).setQueryTimeout(10);
  }
}
