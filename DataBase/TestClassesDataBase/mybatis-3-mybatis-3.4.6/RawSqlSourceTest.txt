public class RawSqlSourceTest {
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/raw_sql_source/mybatis-config.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    SqlSession session=sqlSessionFactory.openSession();
    Connection conn=session.getConnection();
    reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/raw_sql_source/CreateDB.sql");
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.runScript(reader);
    conn.close();
    reader.close();
    session.close();
  }
  @Test public void shouldUseRawSqlSourceForAnStaticStatement(){
    test("getUser1",RawSqlSource.class);
  }
  @Test public void shouldUseDynamicSqlSourceForAnStatementWithInlineArguments(){
    test("getUser2",DynamicSqlSource.class);
  }
  @Test public void shouldUseDynamicSqlSourceForAnStatementWithXmlTags(){
    test("getUser3",DynamicSqlSource.class);
  }
  private void test(  String statement,  Class<? extends SqlSource> sqlSource){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Assert.assertEquals(sqlSource,sqlSession.getConfiguration().getMappedStatement(statement).getSqlSource().getClass());
      String sql=sqlSession.getConfiguration().getMappedStatement(statement).getSqlSource().getBoundSql('?').getSql();
      Assert.assertEquals("select * from users where id = ?",sql);
      User user=sqlSession.selectOne(statement,1);
      Assert.assertEquals("User1",user.getName());
    }
  finally {
      sqlSession.close();
    }
  }
}
