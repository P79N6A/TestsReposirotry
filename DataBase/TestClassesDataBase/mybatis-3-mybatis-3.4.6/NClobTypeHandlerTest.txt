public class NClobTypeHandlerTest extends BaseTypeHandlerTest {
  private static final TypeHandler<String> TYPE_HANDLER=new NClobTypeHandler();
  @Mock protected Clob clob;
  @Override @Test public void shouldSetParameter() throws Exception {
    TYPE_HANDLER.setParameter(ps,1,"Hello",null);
    verify(ps).setCharacterStream(Mockito.eq(1),Mockito.any(Reader.class),Mockito.eq(5));
  }
  @Override @Test public void shouldGetResultFromResultSetByName() throws Exception {
    when(rs.getClob("column")).thenReturn(clob);
    when(rs.wasNull()).thenReturn(false);
    when(clob.length()).thenReturn(3l);
    when(clob.getSubString(1,3)).thenReturn("Hello");
    assertEquals("Hello",TYPE_HANDLER.getResult(rs,"column"));
  }
  @Override @Test public void shouldGetResultNullFromResultSetByName() throws Exception {
    when(rs.getClob("column")).thenReturn(null);
    when(rs.wasNull()).thenReturn(true);
    assertNull(TYPE_HANDLER.getResult(rs,"column"));
  }
  @Override @Test public void shouldGetResultFromResultSetByPosition() throws Exception {
    when(rs.getClob(1)).thenReturn(clob);
    when(rs.wasNull()).thenReturn(false);
    when(clob.length()).thenReturn(3l);
    when(clob.getSubString(1,3)).thenReturn("Hello");
    assertEquals("Hello",TYPE_HANDLER.getResult(rs,1));
  }
  @Override @Test public void shouldGetResultNullFromResultSetByPosition() throws Exception {
    when(rs.getClob(1)).thenReturn(null);
    when(rs.wasNull()).thenReturn(true);
    assertNull(TYPE_HANDLER.getResult(rs,1));
  }
  @Override @Test public void shouldGetResultFromCallableStatement() throws Exception {
    when(cs.getClob(1)).thenReturn(clob);
    when(cs.wasNull()).thenReturn(false);
    when(clob.length()).thenReturn(3l);
    when(clob.getSubString(1,3)).thenReturn("Hello");
    assertEquals("Hello",TYPE_HANDLER.getResult(cs,1));
  }
  @Override @Test public void shouldGetResultNullFromCallableStatement() throws Exception {
    when(cs.getClob(1)).thenReturn(null);
    when(cs.wasNull()).thenReturn(true);
    assertNull(TYPE_HANDLER.getResult(cs,1));
  }
}
