public class DaoTest {
  private Connection conn;
  private Dao dao;
  private SqlSession sqlSession;
  @Before public void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/emptycollection/mybatis-config.xml");
    SqlSessionFactory sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    sqlSession=sqlSessionFactory.openSession();
    conn=sqlSession.getConnection();
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    dao=sqlSession.getMapper(Dao.class);
  }
  @After public void tearDown() throws Exception {
    conn.close();
    sqlSession.close();
  }
  @Test public void testWithEmptyList() throws Exception {
    final List<TodoLists> actual=dao.selectWithEmptyList();
    Assert.assertEquals(1,actual.size());
    final List<TodoItem> todoItems=actual.get(0).getTodoItems();
    Assert.assertEquals("expect " + todoItems + " to be empty",0,todoItems.size());
  }
  @Test public void testWithNonEmptyList() throws Exception {
    final List<TodoLists> actual=dao.selectWithNonEmptyList();
    checkNonEmptyList(actual);
  }
  @Test public void testWithNonEmptyList_noCollectionId() throws Exception {
    final List<TodoLists> actual=dao.selectWithNonEmptyList_noCollectionId();
    checkNonEmptyList(actual);
  }
  private void checkNonEmptyList(  final List<TodoLists> actual){
    Assert.assertEquals(2,actual.size());
    Assert.assertEquals(2,actual.get(0).getTodoItems().size());
    Assert.assertEquals(1,actual.get(0).getTodoItems().get(0).getOrder());
    Assert.assertEquals("a description",actual.get(0).getTodoItems().get(0).getDescription().trim());
    Assert.assertEquals(2,actual.get(0).getTodoItems().get(1).getOrder());
    Assert.assertEquals("a 2nd description",actual.get(0).getTodoItems().get(1).getDescription().trim());
    Assert.assertEquals(1,actual.get(1).getTodoItems().size());
    Assert.assertEquals(1,actual.get(1).getTodoItems().get(0).getOrder());
    Assert.assertEquals("a description",actual.get(0).getTodoItems().get(0).getDescription().trim());
    Assert.assertNotSame(actual.get(0).getTodoItems().get(0),actual.get(1).getTodoItems().get(0));
  }
}
