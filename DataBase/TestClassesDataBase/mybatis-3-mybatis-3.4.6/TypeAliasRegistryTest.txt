public class TypeAliasRegistryTest {
  @Test public void shouldRegisterAndResolveTypeAlias(){
    TypeAliasRegistry typeAliasRegistry=new TypeAliasRegistry();
    typeAliasRegistry.registerAlias("rich","org.apache.ibatis.domain.misc.RichType");
    assertEquals("org.apache.ibatis.domain.misc.RichType",typeAliasRegistry.resolveAlias("rich").getName());
  }
  @Test public void shouldFetchArrayType(){
    TypeAliasRegistry typeAliasRegistry=new TypeAliasRegistry();
    assertEquals(Byte[].class,typeAliasRegistry.resolveAlias("byte[]"));
  }
  @Test public void shouldBeAbleToRegisterSameAliasWithSameTypeAgain(){
    TypeAliasRegistry typeAliasRegistry=new TypeAliasRegistry();
    typeAliasRegistry.registerAlias("String",String.class);
    typeAliasRegistry.registerAlias("string",String.class);
  }
  @Test(expected=TypeException.class) public void shouldNotBeAbleToRegisterSameAliasWithDifferentType(){
    TypeAliasRegistry typeAliasRegistry=new TypeAliasRegistry();
    typeAliasRegistry.registerAlias("string",BigDecimal.class);
  }
  @Test public void shouldBeAbleToRegisterAliasWithNullType(){
    TypeAliasRegistry typeAliasRegistry=new TypeAliasRegistry();
    typeAliasRegistry.registerAlias("foo",(Class<?>)null);
    assertNull(typeAliasRegistry.resolveAlias("foo"));
  }
  @Test public void shouldBeAbleToRegisterNewTypeIfRegisteredTypeIsNull(){
    TypeAliasRegistry typeAliasRegistry=new TypeAliasRegistry();
    typeAliasRegistry.registerAlias("foo",(Class<?>)null);
    typeAliasRegistry.registerAlias("foo",String.class);
  }
}
