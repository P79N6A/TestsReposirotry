public class NestedResultHandlerTest {
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/nestedresulthandler/mybatis-config.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    SqlSession session=sqlSessionFactory.openSession();
    Connection conn=session.getConnection();
    reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/nestedresulthandler/CreateDB.sql");
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.runScript(reader);
    conn.close();
    reader.close();
    session.close();
  }
  @Test public void testGetPerson(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      List<Person> persons=mapper.getPersons();
      Person person=persons.get(0);
      Assert.assertEquals("grandma",person.getName());
      Assert.assertTrue(person.owns("book"));
      Assert.assertTrue(person.owns("tv"));
      Assert.assertEquals(2,person.getItems().size());
      person=persons.get(1);
      Assert.assertEquals("sister",person.getName());
      Assert.assertTrue(person.owns("phone"));
      Assert.assertTrue(person.owns("shoes"));
      Assert.assertEquals(2,person.getItems().size());
      person=persons.get(2);
      Assert.assertEquals("brother",person.getName());
      Assert.assertTrue(person.owns("car"));
      Assert.assertEquals(1,person.getItems().size());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testGetPersonWithHandler(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      sqlSession.select("getPersons",new ResultHandler(){
        public void handleResult(        ResultContext context){
          Person person=(Person)context.getResultObject();
          if ("grandma".equals(person.getName())) {
            Assert.assertEquals(2,person.getItems().size());
          }
        }
      }
);
    }
  finally {
      sqlSession.close();
    }
  }
  @Test(expected=PersistenceException.class) public void testUnorderedGetPersonWithHandler(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      sqlSession.select("getPersonsWithItemsOrdered",new ResultHandler(){
        public void handleResult(        ResultContext context){
          Person person=(Person)context.getResultObject();
          if ("grandma".equals(person.getName())) {
            Assert.assertEquals(2,person.getItems().size());
          }
        }
      }
);
    }
  finally {
      sqlSession.close();
    }
  }
  /** 
 * Fix bug caused by issue #542, see new issue #22 on github If we order by a nested result map attribute we can miss some records and end up with duplicates instead.
 */
  @Test public void testGetPersonOrderedByItem(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      List<Person> persons=mapper.getPersonsWithItemsOrdered();
      Person person=persons.get(0);
      Assert.assertEquals("grandma",person.getName());
      Assert.assertTrue(person.owns("book"));
      Assert.assertTrue(person.owns("tv"));
      Assert.assertEquals(2,person.getItems().size());
      person=persons.get(1);
      Assert.assertEquals("brother",person.getName());
      Assert.assertTrue(person.owns("car"));
      Assert.assertEquals(1,person.getItems().size());
      person=persons.get(2);
      Assert.assertEquals("sister",person.getName());
      Assert.assertTrue(person.owns("phone"));
      Assert.assertTrue(person.owns("shoes"));
      Assert.assertEquals(2,person.getItems().size());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testGetPersonItemPairs(){
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      List<PersonItemPair> pairs=mapper.getPersonItemPairs();
      Assert.assertNotNull(pairs);
      Assert.assertEquals(5,pairs.size());
      Assert.assertNotNull(pairs.get(0).getPerson());
      Assert.assertEquals(pairs.get(0).getPerson().getId(),Integer.valueOf(1));
      Assert.assertNotNull(pairs.get(0).getItem());
      Assert.assertEquals(pairs.get(0).getItem().getId(),Integer.valueOf(1));
    }
  finally {
      sqlSession.close();
    }
  }
}
