public class MultipleReverseIncludeTest {
  @Test public void testMultipleReverseIncludeXmlConfig() throws Exception {
    testMultipleReverseIncludes(getSqlSessionFactoryXmlConfig());
  }
  @Test public void testMultipleReverseIncludeJavaConfig() throws Exception {
    testMultipleReverseIncludes(getSqlSessionFactoryJavaConfig());
  }
  private void testMultipleReverseIncludes(  SqlSessionFactory sqlSessionFactory) throws Exception {
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      MultipleReverseIncludePersonMapper personMapper=sqlSession.getMapper(MultipleReverseIncludePersonMapper.class);
      Person person=personMapper.select(1);
      assertEquals((Integer)1,person.getId());
      assertEquals("John",person.getName());
    }
  finally {
      sqlSession.close();
    }
  }
  private SqlSessionFactory getSqlSessionFactoryXmlConfig() throws Exception {
    Reader configReader=Resources.getResourceAsReader("org/apache/ibatis/submitted/xml_external_ref/MultipleReverseIncludeMapperConfig.xml");
    SqlSessionFactory sqlSessionFactory=new SqlSessionFactoryBuilder().build(configReader);
    configReader.close();
    Connection conn=sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
    initDb(conn);
    conn.close();
    return sqlSessionFactory;
  }
  private SqlSessionFactory getSqlSessionFactoryJavaConfig() throws Exception {
    Class.forName("org.hsqldb.jdbcDriver");
    Connection c=DriverManager.getConnection("jdbc:hsqldb:mem:xmlextref","sa","");
    initDb(c);
    Configuration configuration=new Configuration();
    Environment environment=new Environment("development",new JdbcTransactionFactory(),new UnpooledDataSource("org.hsqldb.jdbcDriver","jdbc:hsqldb:mem:xmlextref",null));
    configuration.setEnvironment(environment);
    configuration.addMapper(MultipleReverseIncludePersonMapper.class);
    c.close();
    return new SqlSessionFactoryBuilder().build(configuration);
  }
  private static void initDb(  Connection conn) throws IOException, SQLException {
    try {
      Reader scriptReader=Resources.getResourceAsReader("org/apache/ibatis/submitted/xml_external_ref/CreateDB.sql");
      ScriptRunner runner=new ScriptRunner(conn);
      runner.setLogWriter(null);
      runner.setErrorLogWriter(null);
      runner.runScript(scriptReader);
      conn.commit();
      scriptReader.close();
    }
  finally {
      if (conn != null) {
        conn.close();
      }
    }
  }
}
