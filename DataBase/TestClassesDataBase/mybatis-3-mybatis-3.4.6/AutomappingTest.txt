public class AutomappingTest {
  private static SqlSessionFactory sqlSessionFactory;
  @BeforeClass public static void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/automapping/mybatis-config.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    SqlSession session=sqlSessionFactory.openSession();
    Connection conn=session.getConnection();
    reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/automapping/CreateDB.sql");
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.runScript(reader);
    conn.close();
    reader.close();
    session.close();
  }
  @Test public void shouldGetAUser(){
    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUser(1);
      Assert.assertEquals("User1",user.getName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldGetAUserWhithPhoneNumber(){
    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUserWithPhoneNumber(1);
      Assert.assertEquals("User1",user.getName());
      Assert.assertEquals(new Long(12345678901L),user.getPhone());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldNotInheritAutoMappingInherited_InlineNestedResultMap(){
    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUserWithPets_Inline(2);
      Assert.assertEquals(Integer.valueOf(2),user.getId());
      Assert.assertEquals("User2",user.getName());
      Assert.assertNull("should not inherit auto-mapping",user.getPets().get(0).getPetName());
      Assert.assertEquals("John",user.getPets().get(0).getBreeder().getBreederName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldNotInheritAutoMappingInherited_ExternalNestedResultMap(){
    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.NONE);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUserWithPets_External(2);
      Assert.assertEquals(Integer.valueOf(2),user.getId());
      Assert.assertEquals("User2",user.getName());
      Assert.assertNull("should not inherit auto-mapping",user.getPets().get(0).getPetName());
      Assert.assertEquals("John",user.getPets().get(0).getBreeder().getBreederName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldIgnorePartialAutoMappingBehavior_InlineNestedResultMap(){
    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.PARTIAL);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUserWithPets_Inline(2);
      Assert.assertEquals(Integer.valueOf(2),user.getId());
      Assert.assertEquals("User2",user.getName());
      Assert.assertNull("should not inherit auto-mapping",user.getPets().get(0).getPetName());
      Assert.assertEquals("John",user.getPets().get(0).getBreeder().getBreederName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldRespectFullAutoMappingBehavior_InlineNestedResultMap(){
    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.FULL);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUserWithPets_Inline(2);
      Assert.assertEquals(Integer.valueOf(2),user.getId());
      Assert.assertEquals("User2",user.getName());
      Assert.assertEquals("Chien",user.getPets().get(0).getPetName());
      Assert.assertEquals("John",user.getPets().get(0).getBreeder().getBreederName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldIgnorePartialAutoMappingBehavior_ExternalNestedResultMap(){
    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.PARTIAL);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUserWithPets_External(2);
      Assert.assertEquals(Integer.valueOf(2),user.getId());
      Assert.assertEquals("User2",user.getName());
      Assert.assertNull("should not inherit auto-mapping",user.getPets().get(0).getPetName());
      Assert.assertEquals("John",user.getPets().get(0).getBreeder().getBreederName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldRespectFullAutoMappingBehavior_ExternalNestedResultMap(){
    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.FULL);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUserWithPets_External(2);
      Assert.assertEquals(Integer.valueOf(2),user.getId());
      Assert.assertEquals("User2",user.getName());
      Assert.assertEquals("Chien",user.getPets().get(0).getPetName());
      Assert.assertEquals("John",user.getPets().get(0).getBreeder().getBreederName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldGetBooks(){
    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.PARTIAL);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      List<Book> books=mapper.getBooks();
      Assert.assertTrue("should return results,no errors throw",!books.isEmpty());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldUpdateFinalField(){
    sqlSessionFactory.getConfiguration().setAutoMappingBehavior(AutoMappingBehavior.PARTIAL);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Article article=mapper.getArticle();
      Assert.assertTrue("should update version in mapping",article.version > 0);
    }
  finally {
      sqlSession.close();
    }
  }
}
