public class TypeHandlerTest {
  private SqlSessionFactory sqlSessionFactory;
  @Before public void setUp() throws Exception {
    Reader reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/typehandler/mybatis-config.xml");
    sqlSessionFactory=new SqlSessionFactoryBuilder().build(reader);
    reader.close();
    sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(StringTrimmingTypeHandler.class);
    SqlSession session=sqlSessionFactory.openSession();
    Connection conn=session.getConnection();
    reader=Resources.getResourceAsReader("org/apache/ibatis/submitted/typehandler/CreateDB.sql");
    ScriptRunner runner=new ScriptRunner(conn);
    runner.setLogWriter(null);
    runner.runScript(reader);
    conn.close();
    reader.close();
    session.close();
  }
  private void addMapper(){
    sqlSessionFactory.getConfiguration().addMapper(Mapper.class);
  }
  @Test public void shouldGetAUser(){
    addMapper();
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      User user=mapper.getUser(1);
      assertEquals("User1",user.getName());
      assertEquals("Carmel",user.getCity());
      assertEquals("IN",user.getState());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldApplyTypeHandlerOnGeneratedKey(){
    addMapper();
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Product product=new Product();
      product.setName("new product");
      mapper.insertProduct(product);
      assertNotNull(product.getId());
      assertNotNull(product.getId().getValue());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldApplyTypeHandlerWithJdbcTypeSpecified() throws Exception {
    addMapper();
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Product product=mapper.getProductByName("iPad");
      assertEquals(Integer.valueOf(2),product.getId().getValue());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldApplyTypeHandlerUsingConstructor() throws Exception {
    addMapper();
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Product product=mapper.getProductByName("iPad");
      assertEquals(Integer.valueOf(2),product.getId().getValue());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldApplyTypeHandlerOnReturnTypeWithJdbcTypeSpecified() throws Exception {
    addMapper();
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      ProductId productId=mapper.getProductIdByName("iPad");
      assertEquals(Integer.valueOf(2),productId.getValue());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldPickSoleTypeHandlerOnXmlResultMap() throws Exception {
    addMapper();
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Product product=mapper.getProductByNameXml("iPad");
      assertEquals(Integer.valueOf(2),product.getId().getValue());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void shouldPickSameTypeHandlerMappedToDifferentJdbcTypes() throws Exception {
    sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(ProductId.class,JdbcType.BIGINT,ProductIdTypeHandler.class);
    addMapper();
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Product product=mapper.getProductByNameXml("iPad");
      assertEquals(Integer.valueOf(2),product.getId().getValue());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test(expected=BuilderException.class) public void shouldFailIfMultipleHandlerMappedToAType() throws Exception {
    sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(ProductId.class,JdbcType.BIGINT,ConstantProductIdTypeHandler.class);
    addMapper();
  }
  @Test public void shouldPickHandlerForNull() throws Exception {
    sqlSessionFactory.getConfiguration().getTypeHandlerRegistry().register(ProductId.class,null,ConstantProductIdTypeHandler.class);
    addMapper();
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Mapper mapper=sqlSession.getMapper(Mapper.class);
      Product product=mapper.getProductByNameXml("iPad");
      assertEquals(Integer.valueOf(999),product.getId().getValue());
    }
  finally {
      sqlSession.close();
    }
  }
}
