public class OffsetTimeTypeHandlerTest extends BaseTypeHandlerTest {
  private static final TypeHandler<OffsetTime> TYPE_HANDLER=new OffsetTimeTypeHandler();
  private static final OffsetTime OFFSET_TIME=OffsetTime.now().withNano(0);
  private static final Time TIME=Time.valueOf(OFFSET_TIME.toLocalTime());
  @Override @Test public void shouldSetParameter() throws Exception {
    TYPE_HANDLER.setParameter(ps,1,OFFSET_TIME,null);
    verify(ps).setTime(1,TIME);
  }
  @Override @Test public void shouldGetResultFromResultSetByName() throws Exception {
    when(rs.getTime("column")).thenReturn(TIME);
    assertEquals(OFFSET_TIME,TYPE_HANDLER.getResult(rs,"column"));
  }
  @Override @Test public void shouldGetResultNullFromResultSetByName() throws Exception {
    when(rs.getTime("column")).thenReturn(null);
    when(rs.wasNull()).thenReturn(true);
    assertNull(TYPE_HANDLER.getResult(rs,"column"));
  }
  @Override @Test public void shouldGetResultFromResultSetByPosition() throws Exception {
    when(rs.getTime(1)).thenReturn(TIME);
    assertEquals(OFFSET_TIME,TYPE_HANDLER.getResult(rs,1));
  }
  @Override @Test public void shouldGetResultNullFromResultSetByPosition() throws Exception {
    when(rs.getTime(1)).thenReturn(null);
    when(rs.wasNull()).thenReturn(true);
    assertNull(TYPE_HANDLER.getResult(rs,1));
  }
  @Override @Test public void shouldGetResultFromCallableStatement() throws Exception {
    when(cs.getTime(1)).thenReturn(TIME);
    assertEquals(OFFSET_TIME,TYPE_HANDLER.getResult(cs,1));
  }
  @Override @Test public void shouldGetResultNullFromCallableStatement() throws Exception {
    when(cs.getTime(1)).thenReturn(null);
    when(cs.wasNull()).thenReturn(true);
    assertNull(TYPE_HANDLER.getResult(cs,1));
  }
}
