public class BigIntegerTypeHandlerTest extends BaseTypeHandlerTest {
  private static final TypeHandler<BigInteger> TYPE_HANDLER=new BigIntegerTypeHandler();
  @Override @Test public void shouldSetParameter() throws Exception {
    TYPE_HANDLER.setParameter(ps,1,new BigInteger("707070656505050302797979792923232303"),null);
    verify(ps).setBigDecimal(1,new BigDecimal("707070656505050302797979792923232303"));
  }
  @Override @Test public void shouldGetResultFromResultSetByName() throws Exception {
    when(rs.getBigDecimal("column")).thenReturn(new BigDecimal("707070656505050302797979792923232303"));
    when(rs.wasNull()).thenReturn(false);
    assertEquals(new BigInteger("707070656505050302797979792923232303"),TYPE_HANDLER.getResult(rs,"column"));
  }
  @Override @Test public void shouldGetResultNullFromResultSetByName() throws Exception {
    when(rs.getBigDecimal("column")).thenReturn(null);
    when(rs.wasNull()).thenReturn(true);
    assertNull(TYPE_HANDLER.getResult(rs,"column"));
  }
  @Override @Test public void shouldGetResultFromResultSetByPosition() throws Exception {
    when(rs.getBigDecimal(1)).thenReturn(new BigDecimal("707070656505050302797979792923232303"));
    when(rs.wasNull()).thenReturn(false);
    assertEquals(new BigInteger("707070656505050302797979792923232303"),TYPE_HANDLER.getResult(rs,1));
  }
  @Override @Test public void shouldGetResultNullFromResultSetByPosition() throws Exception {
    when(rs.getBigDecimal(1)).thenReturn(null);
    when(rs.wasNull()).thenReturn(true);
    assertNull(TYPE_HANDLER.getResult(rs,1));
  }
  @Override @Test public void shouldGetResultFromCallableStatement() throws Exception {
    when(cs.getBigDecimal(1)).thenReturn(new BigDecimal("707070656505050302797979792923232303"));
    when(cs.wasNull()).thenReturn(false);
    assertEquals(new BigInteger("707070656505050302797979792923232303"),TYPE_HANDLER.getResult(cs,1));
  }
  @Override @Test public void shouldGetResultNullFromCallableStatement() throws Exception {
    when(cs.getBigDecimal(1)).thenReturn(null);
    when(cs.wasNull()).thenReturn(true);
    assertNull(TYPE_HANDLER.getResult(cs,1));
  }
}
