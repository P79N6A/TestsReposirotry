public class DefaultResultHandlerTypeTest {
  @Test public void testSelectList() throws Exception {
    String xmlConfig="org/apache/ibatis/submitted/result_handler_type/MapperConfig.xml";
    SqlSessionFactory sqlSessionFactory=getSqlSessionFactoryXmlConfig(xmlConfig);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      List<Person> list=sqlSession.selectList("org.apache.ibatis.submitted.result_handler_type.PersonMapper.doSelect");
      assertEquals(list.size(),2);
      assertEquals("java.util.LinkedList",list.getClass().getCanonicalName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testSelectMap() throws Exception {
    String xmlConfig="org/apache/ibatis/submitted/result_handler_type/MapperConfig.xml";
    SqlSessionFactory sqlSessionFactory=getSqlSessionFactoryXmlConfig(xmlConfig);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      Map<Integer,Person> map=sqlSession.selectMap("org.apache.ibatis.submitted.result_handler_type.PersonMapper.doSelect","id");
      assertEquals(map.size(),2);
      assertEquals("java.util.LinkedHashMap",map.getClass().getCanonicalName());
    }
  finally {
      sqlSession.close();
    }
  }
  @Test public void testSelectMapAnnotation() throws Exception {
    String xmlConfig="org/apache/ibatis/submitted/result_handler_type/MapperConfig.xml";
    SqlSessionFactory sqlSessionFactory=getSqlSessionFactoryXmlConfig(xmlConfig);
    SqlSession sqlSession=sqlSessionFactory.openSession();
    try {
      PersonMapper mapper=sqlSession.getMapper(PersonMapper.class);
      Map<Integer,Person> map=mapper.selectAsMap();
      assertEquals(map.size(),2);
      assertEquals("java.util.LinkedHashMap",map.getClass().getCanonicalName());
    }
  finally {
      sqlSession.close();
    }
  }
  private SqlSessionFactory getSqlSessionFactoryXmlConfig(  String resource) throws Exception {
    Reader configReader=Resources.getResourceAsReader(resource);
    SqlSessionFactory sqlSessionFactory=new SqlSessionFactoryBuilder().build(configReader);
    configReader.close();
    Connection conn=sqlSessionFactory.getConfiguration().getEnvironment().getDataSource().getConnection();
    initDb(conn);
    conn.close();
    return sqlSessionFactory;
  }
  private static void initDb(  Connection conn) throws IOException, SQLException {
    try {
      Reader scriptReader=Resources.getResourceAsReader("org/apache/ibatis/submitted/result_handler_type/CreateDB.sql");
      ScriptRunner runner=new ScriptRunner(conn);
      runner.setLogWriter(null);
      runner.setErrorLogWriter(null);
      runner.runScript(scriptReader);
      conn.commit();
      scriptReader.close();
    }
  finally {
      if (conn != null) {
        conn.close();
      }
    }
  }
}
