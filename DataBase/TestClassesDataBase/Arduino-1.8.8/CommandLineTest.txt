public class CommandLineTest {
  File buildPath;
  File arduinoPath;
  @Before public void findBuildPaths() throws Exception {
    buildPath=new File(System.getProperty("user.dir"));
    while (!new File(buildPath,"build").isDirectory()) {
      buildPath=buildPath.getParentFile();
      if (buildPath == null) {
        throw new Exception("Could not determine build path");
      }
    }
    System.out.println("found buildpath: " + buildPath);
    if (OSUtils.isLinux()) {
      arduinoPath=new File(buildPath,"build/linux/work/arduino");
    }
    if (OSUtils.isWindows()) {
      arduinoPath=new File(buildPath,"build/windows/work/arduino.exe");
    }
    if (OSUtils.isMacOS()) {
      arduinoPath=new File(buildPath,"build/macosx/work/Arduino.app/Contents/MacOS/Arduino");
    }
    if (!arduinoPath.canExecute()) {
      throw new Exception("Could not determine arduino location");
    }
    System.out.println("found arduino: " + arduinoPath);
  }
  @Test public void testCommandLineBuildWithRelativePath() throws Exception {
    Runtime rt=Runtime.getRuntime();
    File wd=new File(buildPath,"build/shared/examples/01.Basics/Blink/");
    Process pr=rt.exec(arduinoPath + " --board arduino:avr:uno --verify Blink.ino",null,wd);
    IOUtils.copy(pr.getInputStream(),System.out);
    pr.waitFor();
    assertEquals(0,pr.exitValue());
  }
  @Test public void testCommandLinePreferencesSave() throws Exception {
    Runtime rt=Runtime.getRuntime();
    File prefFile=File.createTempFile("test_pref",".txt");
    prefFile.deleteOnExit();
    Process pr=rt.exec(new String[]{arduinoPath.getAbsolutePath(),"--save-prefs","--preferences-file",prefFile.getAbsolutePath(),"--get-pref"});
    IOUtils.copy(pr.getInputStream(),System.out);
    IOUtils.copy(pr.getErrorStream(),System.out);
    pr.waitFor();
    assertEquals(0,pr.exitValue());
    pr=rt.exec(new String[]{arduinoPath.getAbsolutePath(),"--pref","test_pref=xxx","--preferences-file",prefFile.getAbsolutePath()});
    IOUtils.copy(pr.getInputStream(),System.out);
    IOUtils.copy(pr.getErrorStream(),System.out);
    pr.waitFor();
    assertEquals(0,pr.exitValue());
    PreferencesMap prefs=new PreferencesMap(prefFile);
    assertNull("preference should not be saved",prefs.get("test_pref"));
    pr=rt.exec(new String[]{arduinoPath.getAbsolutePath(),"--pref","test_pref=xxx","--preferences-file",prefFile.getAbsolutePath(),"--save-prefs"});
    IOUtils.copy(pr.getInputStream(),System.out);
    IOUtils.copy(pr.getErrorStream(),System.out);
    pr.waitFor();
    assertEquals(0,pr.exitValue());
    prefs=new PreferencesMap(prefFile);
    assertEquals("preference should be saved","xxx",prefs.get("test_pref"));
  }
  @Test public void testCommandLineVersion() throws Exception {
    Runtime rt=Runtime.getRuntime();
    Process pr=rt.exec(new String[]{arduinoPath.getAbsolutePath(),"--version"});
    pr.waitFor();
    Assertions.assertThat(pr.exitValue()).as("Process will finish with exit code 0 in --version").isEqualTo(0);
    Assertions.assertThat(new String(IOUtils.toByteArray(pr.getInputStream()))).matches("Arduino: \\d+\\.\\d+\\.\\d+.*\n");
  }
  @Test public void testCommandLineMultipleAction() throws Exception {
    Runtime rt=Runtime.getRuntime();
    Process pr=rt.exec(new String[]{arduinoPath.getAbsolutePath(),"--version","--verify"});
    pr.waitFor();
    Assertions.assertThat(pr.exitValue()).as("Multiple Action will be rejected").isEqualTo(3);
  }
}
