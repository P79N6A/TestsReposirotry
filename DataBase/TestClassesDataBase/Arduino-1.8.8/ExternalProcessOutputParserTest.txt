public class ExternalProcessOutputParserTest {
  @Test public void testParser1() throws Exception {
    Map<String,Object> output=new ExternalProcessOutputParser().parse("===WARNING: Category '{0}' in library {1} is not valid. Setting to '{2}' ||| [ Wire Uncategorized]");
    assertEquals("WARNING: Category '{0}' in library {1} is not valid. Setting to '{2}'",output.get("msg"));
    Object[] args=(Object[])output.get("args");
    assertEquals(3,args.length);
    assertEquals("",args[0]);
    assertEquals("Wire",args[1]);
    assertEquals("Uncategorized",args[2]);
  }
  @Test public void testParser2() throws Exception {
    Map<String,Object> output=new ExternalProcessOutputParser().parse("===Using previously compiled file: {0} ||| [%2Ftmp%2Farduino-sketch-456612873D8321DA02916066CB8B2FE6%2Flibraries%2FBridge%2FBridge.cpp.o]");
    assertEquals("Using previously compiled file: {0}",output.get("msg"));
    Object[] args=(Object[])output.get("args");
    assertEquals(1,args.length);
    assertEquals("/tmp/arduino-sketch-456612873D8321DA02916066CB8B2FE6/libraries/Bridge/Bridge.cpp.o",args[0]);
  }
  @Test public void testParser3() throws Exception {
    Map<String,Object> output=new ExternalProcessOutputParser().parse("===Using library {0} at version {1} in folder: {2} {3} {4} ||| [Stepper 1.1.1 %2Fhome%2Ffederico%2Fmateriale%2Fworks_Arduino%2FArduino%2Fbuild%2Flinux%2Fwork%2Flibraries%2FStepper  ]");
    assertEquals("Using library {0} at version {1} in folder: {2} {3} {4}",output.get("msg"));
    Object[] args=(Object[])output.get("args");
    assertEquals(5,args.length);
    assertEquals("Stepper",args[0]);
    assertEquals("1.1.1",args[1]);
    assertEquals("/home/federico/materiale/works_Arduino/Arduino/build/linux/work/libraries/Stepper",args[2]);
    assertEquals("",args[3]);
    assertEquals("",args[4]);
  }
  @Test public void testParser4() throws Exception {
    Map<String,Object> output=new ExternalProcessOutputParser().parse("==={0} ||| []");
    assertEquals("{0}",output.get("msg"));
    Object[] args=(Object[])output.get("args");
    assertEquals(0,args.length);
  }
  @Test public void testParser5() throws Exception {
    Map<String,Object> output=new ExternalProcessOutputParser().parse("==={0} ||| [ ]");
    assertEquals("{0}",output.get("msg"));
    Object[] args=(Object[])output.get("args");
    assertEquals(1,args.length);
    assertEquals("",args[0]);
  }
  @Test public void testParser6() throws Exception {
    Map<String,Object> output=new ExternalProcessOutputParser().parse("===info ||| Progress {0} ||| [79.31]");
    assertEquals("info",output.get("level"));
    assertEquals("Progress {0}",output.get("msg"));
    Object[] args=(Object[])output.get("args");
    assertEquals(1,args.length);
    assertEquals("79.31",args[0]);
  }
  @Test public void testParser7() throws Exception {
    Map<String,Object> output=new ExternalProcessOutputParser().parse("===info ||| Using library {0} at version {1} in folder: {2} {3} ||| [Bridge 1.6.0 %2Fhome%2Ffederico%2Fmateriale%2Fworks_Arduino%2FArduino%2Fbuild%2Flinux%2Fwork%2Flibraries%2FBridge ]");
    assertEquals("info",output.get("level"));
    assertEquals("Using library {0} at version {1} in folder: {2} {3}",output.get("msg"));
    Object[] args=(Object[])output.get("args");
    assertEquals(4,args.length);
    assertEquals("Bridge",args[0]);
    assertEquals("1.6.0",args[1]);
    assertEquals("/home/federico/materiale/works_Arduino/Arduino/build/linux/work/libraries/Bridge",args[2]);
    assertEquals("",args[3]);
  }
}
