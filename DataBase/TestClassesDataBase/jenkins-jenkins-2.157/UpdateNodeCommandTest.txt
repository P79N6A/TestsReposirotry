public class UpdateNodeCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,new UpdateNodeCommand());
  }
  @Test public void updateNodeShouldFailWithoutComputerConfigurePermission() throws Exception {
    j.createSlave("MySlave",null,null);
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invokeWithArgs("MySlave");
    assertThat(result.stderr(),containsString("ERROR: user is missing the Agent/Configure permission"));
    assertThat(result,failedWith(6));
    assertThat(result,hasNoStandardOutput());
  }
  @Test public void updateNodeShouldModifyNodeConfiguration() throws Exception {
    j.createSlave("MySlave",null,null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.CONFIGURE,Jenkins.READ).withStdin(Computer.class.getResourceAsStream("node.xml")).invokeWithArgs("MySlave");
    assertThat(result,succeededSilently());
    assertThat("A slave with old name should not exist",j.jenkins.getNode("MySlave"),nullValue());
    final Node updatedSlave=j.jenkins.getNode("SlaveFromXML");
    assertThat(updatedSlave.getNodeName(),equalTo("SlaveFromXML"));
    assertThat(updatedSlave.getNumExecutors(),equalTo(42));
  }
  @Test public void updateNodeShouldFailIfNodeDoesNotExist() throws Exception {
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.CONFIGURE,Jenkins.READ).withStdin(Computer.class.getResourceAsStream("node.xml")).invokeWithArgs("MySlave");
    assertThat(result.stderr(),containsString("ERROR: No such node 'MySlave'"));
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
  }
  @Issue("SECURITY-281") @Test public void updateNodeShouldFailForMaster() throws Exception {
    CLICommandInvoker.Result result=command.authorizedTo(Computer.CONFIGURE,Jenkins.READ).withStdin(Computer.class.getResourceAsStream("node.xml")).invokeWithArgs("");
    assertThat(result.stderr(),containsString("No such node ''"));
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    result=command.authorizedTo(Computer.EXTENDED_READ,Jenkins.READ).withStdin(Computer.class.getResourceAsStream("node.xml")).invokeWithArgs("(master)");
    assertThat(result.stderr(),containsString("No such node '(master)'"));
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
  }
}
