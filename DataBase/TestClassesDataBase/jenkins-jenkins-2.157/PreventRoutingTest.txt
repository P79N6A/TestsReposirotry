public class PreventRoutingTest extends StaplerAbstractTest {
@TestExtension public static class TargetNull extends AbstractUnprotectedRootAction implements StaplerProxy {
    @Override public @CheckForNull String getUrlName(){
      return "target-null";
    }
    @Override public Object getTarget(){
      return null;
    }
    public Renderable getLegitRoutable(){
      return new Renderable();
    }
  }
  @Test @Ignore("Does not behave as intended before https://github.com/stapler/stapler/pull/149") public void getTargetNull_isNotRoutable() throws Exception {
    assertNotReachable("target-null/legitRoutable");
  }
@TestExtension public static class TargetNewObject extends AbstractUnprotectedRootAction implements StaplerProxy {
    @Override public @CheckForNull String getUrlName(){
      return "target-new-object";
    }
    @Override public Object getTarget(){
      return new Object();
    }
    public Renderable getLegitRoutable(){
      return new Renderable();
    }
  }
  @Test public void getTargetNewObject_isNotRoutable() throws Exception {
    assertNotReachable("target-new-object/legitRoutable");
  }
@TestExtension public static class NotARequest extends AbstractUnprotectedRootAction {
    @Override public @CheckForNull String getUrlName(){
      return "not-a-request";
    }
    public Renderable getLegitRoutable(){
      notStaplerGetter(this);
      return new Renderable();
    }
    public Renderable getLegitRoutable2(){
      return new Renderable();
    }
  }
  private static void notStaplerGetter(  @Nonnull Object o){
    StaplerRequest req=Stapler.getCurrentRequest();
    if (req != null) {
      List<Ancestor> ancestors=req.getAncestors();
      if (!ancestors.isEmpty() && ancestors.get(ancestors.size() - 1).getObject() == o) {
        throw HttpResponses.notFound();
      }
    }
  }
  @Test public void regularGetter_notARequest() throws Exception {
    assertReachable("not-a-request/legitRoutable2");
    assertNotReachable("not-a-request/legitRoutable");
  }
}
