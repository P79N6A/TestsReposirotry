/** 
 * @author peppelan
 */
@RunWith(PowerMockRunner.class) @PowerMockIgnore({"com.sun.org.apache.xerces.*","javax.xml.*","org.xml.*"}) public class DelegatingComputerLauncherTest {
public static class DummyOne extends DelegatingComputerLauncher {
    public DummyOne(){
      super(null);
    }
public static class DummyOneDescriptor extends DescriptorImpl {
    }
  }
public static class DummyTwo extends DelegatingComputerLauncher {
    public DummyTwo(){
      super(null);
    }
public static class DummyTwoDescriptor extends DescriptorImpl {
    }
  }
  @Test @PrepareForTest(Jenkins.class) public void testRecursionAvoidance(){
    PowerMockito.mockStatic(Jenkins.class);
    Jenkins mockJenkins=mock(Jenkins.class);
    PowerMockito.when(Jenkins.getInstance()).thenReturn(mockJenkins);
    DescriptorExtensionList<ComputerLauncher,Descriptor<ComputerLauncher>> mockList=mock(DescriptorExtensionList.class);
    doReturn(mockList).when(mockJenkins).getDescriptorList(eq(ComputerLauncher.class));
    ArrayList<Descriptor<ComputerLauncher>> returnedList=new ArrayList<>();
    returnedList.add(new DummyOne.DummyOneDescriptor());
    returnedList.add(new DummyTwo.DummyTwoDescriptor());
    when(mockList.iterator()).thenReturn(returnedList.iterator());
    assertTrue("DelegatingComputerLauncher should filter out other DelegatingComputerLauncher instances " + "from its descriptor's getApplicableDescriptors() method",new DummyTwo.DummyTwoDescriptor().applicableDescriptors(null,new DumbSlave.DescriptorImpl()).isEmpty());
  }
}
