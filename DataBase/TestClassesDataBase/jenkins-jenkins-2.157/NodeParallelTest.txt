public class NodeParallelTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  private static final Logger LOGGER=Logger.getLogger(NodeParallelTest.class.getName());
  private final AtomicInteger count=new AtomicInteger();
  @Test @Issue("JENKINS-53401") public void createNodesWithParallelThreads() throws InterruptedException, ExecutionException {
    int n=50;
    List<Callable<Void>> tasks=Collections.nCopies(n,() -> {
      try {
        int i=count.incrementAndGet();
        LOGGER.log(Level.INFO,"Creating slave " + i);
        DumbSlave agent=new DumbSlave("agent-" + i,"/tmp",new JNLPLauncher(true));
        r.jenkins.addNode(agent);
        agent.setNodeProperties(Collections.singletonList(new EnvironmentVariablesNodeProperty(new EnvironmentVariablesNodeProperty.Entry("foo","" + i))));
        return null;
      }
 catch (      Exception e1) {
        throw new RuntimeException(e1);
      }
    }
);
    ExecutorService executorService=Executors.newFixedThreadPool(n);
    List<Future<Void>> futures=executorService.invokeAll(tasks);
    List<Void> resultList=new ArrayList<>(futures.size());
    try {
      for (      Future<Void> future : futures) {
        resultList.add(future.get());
      }
    }
 catch (    RuntimeException e) {
      e.printStackTrace();
      fail(e.getMessage());
    }
  }
}
