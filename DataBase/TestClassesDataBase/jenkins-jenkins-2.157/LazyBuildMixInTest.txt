public class LazyBuildMixInTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @Issue("JENKINS-22395") @Test public void dropLinksAfterGC() throws Exception {
    RunListener.all().clear();
    FreeStyleProject p=r.createFreeStyleProject();
    FreeStyleBuild b1=r.buildAndAssertSuccess(p);
    FreeStyleBuild b2=r.buildAndAssertSuccess(p);
    FreeStyleBuild b3=r.buildAndAssertSuccess(p);
    assertEquals(b2,b1.getNextBuild());
    assertEquals(b3,b2.getNextBuild());
    assertEquals(null,b3.getNextBuild());
    assertEquals(null,b1.getPreviousBuild());
    assertEquals(b1,b2.getPreviousBuild());
    assertEquals(b2,b3.getPreviousBuild());
    b1.getRunMixIn().createReference().clear();
    b2.delete();
    FreeStyleBuild b1a=b2.getPreviousBuild();
    assertNotSame(b1,b1a);
    assertEquals(1,b1a.getNumber());
    assertEquals(b3,b1a.getNextBuild());
  }
  @Issue("JENKINS-22395") @Test public void dropLinksAfterGC2() throws Exception {
    RunListener.all().clear();
    FreeStyleProject p=r.createFreeStyleProject();
    FreeStyleBuild b1=r.buildAndAssertSuccess(p);
    FreeStyleBuild b2=r.buildAndAssertSuccess(p);
    FreeStyleBuild b3=r.buildAndAssertSuccess(p);
    assertEquals(b2,b1.getNextBuild());
    assertEquals(b3,b2.getNextBuild());
    assertEquals(null,b3.getNextBuild());
    assertEquals(null,b1.getPreviousBuild());
    assertEquals(b1,b2.getPreviousBuild());
    assertEquals(b2,b3.getPreviousBuild());
    b2.delete();
    b1.getRunMixIn().createReference().clear();
    FreeStyleBuild b1a=b2.getPreviousBuild();
    assertNotSame(b1,b1a);
    assertEquals(1,b1a.getNumber());
    assertEquals(b3,b1a.getNextBuild());
  }
  @Issue("JENKINS-20662") @Test public void newRunningBuildRelationFromPrevious() throws Exception {
    FreeStyleProject p=r.createFreeStyleProject();
    p.getBuildersList().add(new SleepBuilder(1000));
    FreeStyleBuild b1=p.scheduleBuild2(0).get();
    assertNull(b1.getNextBuild());
    FreeStyleBuild b2=p.scheduleBuild2(0).waitForStart();
    assertSame(b2,b1.getNextBuild());
  }
}
