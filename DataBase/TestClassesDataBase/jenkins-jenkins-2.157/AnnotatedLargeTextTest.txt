@For({AnnotatedLargeText.class,ConsoleNote.class,ConsoleAnnotationOutputStream.class,PlainTextConsoleOutputStream.class}) public class AnnotatedLargeTextTest {
  @ClassRule public static JenkinsRule r=new JenkinsRule();
  @Rule public LoggerRule logging=new LoggerRule().record(ConsoleAnnotationOutputStream.class,Level.FINE).capture(100);
  @Test public void smokes() throws Exception {
    ByteBuffer buf=new ByteBuffer();
    PrintStream ps=new PrintStream(buf,true);
    ps.print("Some text.\n");
    ps.print("Go back to " + TestNote.encodeTo("/root","your home") + ".\n");
    ps.print("More text.\n");
    AnnotatedLargeText<Void> text=new AnnotatedLargeText<>(buf,Charsets.UTF_8,true,null);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    text.writeLogTo(0,baos);
    assertEquals("Some text.\nGo back to your home.\nMore text.\n",baos.toString());
    StringWriter w=new StringWriter();
    text.writeHtmlTo(0,w);
    assertEquals("Some text.\nGo back to <a href='/root'>your home</a>.\nMore text.\n",w.toString());
  }
  @Issue("SECURITY-382") @Test public void oldDeserialization() throws Exception {
    ByteBuffer buf=new ByteBuffer();
    buf.write(("hello" + ConsoleNote.PREAMBLE_STR + "AAAAwR+LCAAAAAAAAP9dzLEOwVAUxvHThtiNprYxsGiMQhiwNSIhMR/tSZXr3Lr3oJPwPt7FM5hM3gFh8i3/5Bt+1yeUrYH6ap9Yza1Ys9WKWuMiR05wqWhEgpmyEy306Jxvwb19ccGNoBJjLplmgWq0xgOGCjkNZ2IyTrsRlFayVTs4gVMYqP3pw28/JnznuABF/rYWyIyeJfLQe1vxZiDQ7NnYZLn0UZGRRjA9MiV+0OyFv3+utadQyH8B+aJxVM4AAAA="+ ConsoleNote.POSTAMBLE_STR+ "there\n").getBytes());
    AnnotatedLargeText<Void> text=new AnnotatedLargeText<>(buf,Charsets.UTF_8,true,null);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    text.writeLogTo(0,baos);
    assertEquals("hellothere\n",baos.toString());
    StringWriter w=new StringWriter();
    text.writeHtmlTo(0,w);
    assertEquals("hellothere\n",w.toString());
    assertThat(logging.getMessages(),hasItem("Failed to resurrect annotation"));
    ConsoleNote.INSECURE=true;
    try {
      w=new StringWriter();
      text.writeHtmlTo(0,w);
      assertThat(w.toString(),containsString("<script>"));
    }
  finally {
      ConsoleNote.INSECURE=false;
    }
  }
  @Issue("SECURITY-382") @Test public void badMac() throws Exception {
    ByteBuffer buf=new ByteBuffer();
    buf.write(("Go back to " + ConsoleNote.PREAMBLE_STR + "////4ByIhqPpAc43AbrEtyDUDc1/UEOXsoY6LeoHSeSlb1d7AAAAlR+LCAAAAAAAAP9b85aBtbiIQS+jNKU4P08vOT+vOD8nVc8xLy+/JLEkNcUnsSg9NSS1oiQktbhEBUT45ZekCpys9xWo8J3KxMDkycCWk5qXXpLhw8BcWpRTwiDkk5VYlqifk5iXrh9cUpSZl25dUcQghWaBM4QGGcYAAYxMDAwVBUAGZwkDq35Rfn4JABmN28qcAAAA"+ ConsoleNote.POSTAMBLE_STR+ "your home.\n").getBytes());
    AnnotatedLargeText<Void> text=new AnnotatedLargeText<>(buf,Charsets.UTF_8,true,null);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    text.writeLogTo(0,baos);
    assertEquals("Go back to your home.\n",baos.toString());
    StringWriter w=new StringWriter();
    text.writeHtmlTo(0,w);
    assertEquals("Go back to your home.\n",w.toString());
    assertThat(logging.getMessages(),hasItem("Failed to resurrect annotation"));
  }
  /** 
 * Simplified version of  {@link HyperlinkNote}. 
 */
static class TestNote extends ConsoleNote<Void> {
    private final String url;
    private final int length;
    TestNote(    String url,    int length){
      this.url=url;
      this.length=length;
    }
    @Override public ConsoleAnnotator<?> annotate(    Void context,    MarkupText text,    int charPos){
      text.addMarkup(charPos,charPos + length,"<a href='" + url + "'"+ ">","</a>");
      return null;
    }
    static String encodeTo(    String url,    String text) throws IOException {
      return new TestNote(url,text.length()).encode() + text;
    }
  }
}
