public class DescribableListTest {
  @Issue("JENKINS-49054") @Test public void exceptionDuringUnmarshalling() throws Exception {
    Data data=new Data();
    data.list.add(new Datum(1));
    data.list.add(new Datum(2));
    data.list.add(new Datum(3));
    XStream2 xs=new XStream2();
    xs.addCriticalField(Data.class,"list");
    String xml=xs.toXML(data);
    data=(Data)xs.fromXML(xml);
    assertEquals("[1, 3]",data.toString());
  }
private static final class Data {
    final DescribableList<Datum,Descriptor<Datum>> list=new DescribableList<>();
    @Override public String toString(){
      return list.toString();
    }
  }
private static final class Datum implements Describable<Datum> {
    final int val;
    Datum(    int val){
      this.val=val;
    }
    @Override public Descriptor<Datum> getDescriptor(){
      return new Descriptor<Datum>(Datum.class){
      }
;
    }
    @Override public String toString(){
      return Integer.toString(val);
    }
public static final class ConverterImpl extends AbstractSingleValueConverter {
      @Override public boolean canConvert(      Class type){
        return type == Datum.class;
      }
      @Override public Object fromString(      String str){
        int val=Integer.parseInt(str);
        if (val == 2) {
          throw new IllegalStateException("oops");
        }
        return new Datum(val);
      }
    }
  }
}
