/** 
 * @author pjanouse
 */
public class ReloadConfigurationCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
    ReloadConfigurationCommand cmd=new ReloadConfigurationCommand();
    cmd.setTransportAuth(User.get("user").impersonate());
    command=new CLICommandInvoker(j,cmd);
    j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().toAuthenticated());
  }
  @Test public void reloadConfigurationShouldFailWithoutAdministerPermission() throws Exception {
    j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().toAuthenticated());
    final CLICommandInvoker.Result result=command.invoke();
    assertThat(result,failedWith(6));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("user is missing the Overall/Administer permission"));
  }
  @Test public void reloadMasterConfig() throws Exception {
    Node node=j.jenkins;
    node.setLabelString("oldLabel");
    modifyNode(node);
    assertThat(node.getLabelString(),equalTo("newLabel"));
  }
  @Test public void reloadSlaveConfig() throws Exception {
    Node node=j.createSlave("a_slave","oldLabel",null);
    modifyNode(node);
    node=j.jenkins.getNode("a_slave");
    assertThat(node.getLabelString(),equalTo("newLabel"));
  }
  private void modifyNode(  Node node) throws Exception {
    replace(node.getNodeName().equals("") ? "config.xml" : String.format("nodes/%s/config.xml",node.getNodeName()),"oldLabel","newLabel");
    assertThat(node.getLabelString(),equalTo("oldLabel"));
    reloadJenkinsConfigurationViaCliAndWait();
  }
  @Test public void reloadUserConfig() throws Exception {
    String originalName="oldName";
    String temporaryName="newName";
{
      User user=User.get("some_user",true,null);
      user.setFullName(originalName);
      user.save();
      assertThat(user.getFullName(),equalTo(originalName));
      user.setFullName(temporaryName);
      assertThat(user.getFullName(),equalTo(temporaryName));
    }
    reloadJenkinsConfigurationViaCliAndWait();
{
      User user=User.getById("some_user",false);
      assertThat(user.getFullName(),equalTo(originalName));
    }
  }
  @Test public void reloadJobConfig() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("a_project");
    project.setDescription("oldDescription");
    replace("jobs/a_project/config.xml","oldDescription","newDescription");
    assertThat(project.getDescription(),equalTo("oldDescription"));
    reloadJenkinsConfigurationViaCliAndWait();
    project=j.jenkins.getItem("a_project",j.jenkins,FreeStyleProject.class);
    assertThat(project.getDescription(),equalTo("newDescription"));
  }
  @Test public void reloadViewConfig() throws Exception {
    ListView view=new ListView("a_view");
    j.jenkins.addView(view);
    view.setIncludeRegex("oldIncludeRegex");
    view.save();
    replace("config.xml","oldIncludeRegex","newIncludeRegex");
    assertThat(view.getIncludeRegex(),equalTo("oldIncludeRegex"));
    reloadJenkinsConfigurationViaCliAndWait();
    view=(ListView)j.jenkins.getView("a_view");
    assertThat(view.getIncludeRegex(),equalTo("newIncludeRegex"));
  }
  @Ignore @Test public void reloadDescriptorConfig() throws Exception {
    Mailer.DescriptorImpl desc=j.jenkins.getExtensionList(Mailer.DescriptorImpl.class).get(0);
    ;
    desc.setDefaultSuffix("@oldSuffix");
    desc.save();
    replace("hudson.tasks.Mailer.xml","@oldSuffix","@newSuffix");
    assertThat(desc.getDefaultSuffix(),equalTo("@oldSuffix"));
    reloadJenkinsConfigurationViaCliAndWait();
    assertThat(desc.getDefaultSuffix(),equalTo("@newSuffix"));
  }
  private void reloadJenkinsConfigurationViaCliAndWait() throws Exception {
    final CLICommandInvoker.Result result=command.invoke();
    assertThat(result,succeededSilently());
  }
  private void replace(  String path,  String search,  String replace){
    File configFile=new File(j.jenkins.getRootDir(),path);
    try {
      String oldConfig=Util.loadFile(configFile);
      String newConfig=oldConfig.replaceAll(search,replace);
      FileWriter fw=new FileWriter(configFile);
      fw.write(newConfig);
      fw.close();
    }
 catch (    IOException ex) {
      throw new AssertionError(ex);
    }
  }
}
