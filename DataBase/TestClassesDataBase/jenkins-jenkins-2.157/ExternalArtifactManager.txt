private static final class ExternalArtifactManager extends ArtifactManager {
  String hash;
  @Override public void archive(  FilePath workspace,  Launcher launcher,  BuildListener listener,  Map<String,String> artifacts) throws IOException, InterruptedException {
    assertEquals(1,artifacts.size());
    Map.Entry<String,String> entry=artifacts.entrySet().iterator().next();
    assertEquals("f",entry.getKey());
    try (InputStream is=workspace.child(entry.getValue()).read()){
      byte[] data=IOUtils.toByteArray(is);
      ExtensionList.lookupSingleton(ContentAddressableStore.class).files.add(data);
      hash=Util.getDigestOf(new ByteArrayInputStream(data));
    }
   }
  @Override public VirtualFile root(){
    final VirtualFile file=new VirtualFile(){
      @Override public String getName(){
        return "f";
      }
      @Override public URI toURI(){
        return URI.create("root:f");
      }
      @Override public VirtualFile getParent(){
        return root();
      }
      @Override public boolean isDirectory() throws IOException {
        return false;
      }
      @Override public boolean isFile() throws IOException {
        return true;
      }
      @Override public boolean exists() throws IOException {
        return true;
      }
      @Override public VirtualFile[] list() throws IOException {
        return new VirtualFile[0];
      }
      @Override public Collection<String> list(      String includes,      String excludes,      boolean useDefaultExcludes) throws IOException {
        return Collections.emptySet();
      }
      @Override public VirtualFile child(      String name){
        throw new UnsupportedOperationException();
      }
      @Override public long length() throws IOException {
        return 0;
      }
      @Override public long lastModified() throws IOException {
        return 0;
      }
      @Override public boolean canRead() throws IOException {
        return true;
      }
      @Override public InputStream open() throws IOException {
        throw new FileNotFoundException("expect to be opened via URL only");
      }
      @Override public URL toExternalURL() throws IOException {
        return new URL(Jenkins.get().getRootUrl() + "files/" + hash);
      }
    }
;
    return new VirtualFile(){
      @Override public String getName(){
        return "";
      }
      @Override public URI toURI(){
        return URI.create("root:");
      }
      @Override public VirtualFile getParent(){
        return this;
      }
      @Override public boolean isDirectory() throws IOException {
        return true;
      }
      @Override public boolean isFile() throws IOException {
        return false;
      }
      @Override public boolean exists() throws IOException {
        return true;
      }
      @Override public VirtualFile[] list() throws IOException {
        return new VirtualFile[]{file};
      }
      @Override public Collection<String> list(      String includes,      String excludes,      boolean useDefaultExcludes) throws IOException {
        throw new UnsupportedOperationException();
      }
      @Override public VirtualFile child(      String name){
        if (name.equals("f")) {
          return file;
        }
 else         if (name.isEmpty()) {
          return this;
        }
 else {
          throw new UnsupportedOperationException("trying to call child on " + name);
        }
      }
      @Override public long length() throws IOException {
        return 0;
      }
      @Override public long lastModified() throws IOException {
        return 0;
      }
      @Override public boolean canRead() throws IOException {
        return true;
      }
      @Override public InputStream open() throws IOException {
        throw new FileNotFoundException();
      }
    }
;
  }
  @Override public void onLoad(  Run<?,?> build){
  }
  @Override public boolean delete() throws IOException, InterruptedException {
    return false;
  }
}
