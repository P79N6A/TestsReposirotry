@TestExtension public static class DummyCloudImpl2 extends Cloud {
  private final transient JenkinsRule caller;
  /** 
 * Configurable delay between the  {@link Cloud#provision(Label,int)} and the actual launch of a slave,to emulate a real cloud that takes some time for provisioning a new system. <p> Number of milliseconds.
 */
  private final int delay;
  public int numProvisioned;
  /** 
 * Only reacts to provisioning for this label.
 */
  public Label label;
  public DummyCloudImpl2(){
    super("test");
    this.delay=0;
    this.caller=null;
  }
  public DummyCloudImpl2(  JenkinsRule caller,  int delay){
    super("test");
    this.caller=caller;
    this.delay=delay;
  }
  @Override public Collection<NodeProvisioner.PlannedNode> provision(  Label label,  int excessWorkload){
    List<NodeProvisioner.PlannedNode> r=new ArrayList<NodeProvisioner.PlannedNode>();
    while (excessWorkload >= 0) {
      System.out.println("Provisioning");
      numProvisioned++;
      Future<Node> f=Computer.threadPoolForRemoting.submit(new ProjectTest.DummyCloudImpl2.Launcher(delay));
      r.add(new NodeProvisioner.PlannedNode(name + " #" + numProvisioned,f,1));
      excessWorkload-=1;
    }
    return r;
  }
  @Override public boolean canProvision(  Label label){
    return true;
  }
private final class Launcher implements Callable<Node> {
    private final long time;
    /** 
 * This is so that we can find out the status of Callable from the debugger.
 */
    private volatile Computer computer;
    private Launcher(    long time){
      this.time=time;
    }
    @Override public Node call() throws Exception {
      Thread.sleep(time);
      System.out.println("launching slave");
      DumbSlave slave=caller.createSlave(label);
      computer=slave.toComputer();
      computer.connect(false).get();
synchronized (ProjectTest.DummyCloudImpl2.this) {
        System.out.println(computer.getName() + " launch" + (computer.isOnline() ? "ed successfully" : " failed"));
        System.out.println(computer.getLog());
      }
      return slave;
    }
  }
  @Override public Descriptor<Cloud> getDescriptor(){
    throw new UnsupportedOperationException();
  }
}
