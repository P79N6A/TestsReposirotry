@Issue("SECURITY-400") @For({StaplerDispatchable.class,StaplerNotDispatchable.class,TypedFilter.class}) public class StaplerRoutableGetterTest extends StaplerAbstractTest {
@TestExtension public static class TestRootAction extends AbstractUnprotectedRootAction {
    @Override public String getUrlName(){
      return "test";
    }
    public Object getFalseWithoutAnnotation(){
      return new Renderable();
    }
    @StaplerDispatchable public Object getFalseWithAnnotation(){
      return new Renderable();
    }
    public Renderable getTrueWithoutAnnotation(){
      return new Renderable();
    }
    @StaplerNotDispatchable public Renderable getTrueWithAnnotation(){
      return new Renderable();
    }
    @StaplerDispatchable @StaplerNotDispatchable public Renderable getPriorityToNegative(){
      return new Renderable();
    }
  }
  @Test public void testForceGetterMethod() throws Exception {
    assertNotReachable("test/falseWithoutAnnotation/");
    assertNotReachable("test/falseWithoutAnnotation/valid/");
    filteredGetMethodTriggered=false;
    assertReachable("test/falseWithAnnotation/");
    assertReachable("test/falseWithAnnotation/valid/");
  }
  @Test public void testForceNotGetterMethod() throws Exception {
    assertReachable("test/trueWithoutAnnotation/");
    assertReachable("test/trueWithoutAnnotation/valid/");
    assertNotReachable("test/trueWithAnnotation/");
    assertNotReachable("test/trueWithAnnotation/valid/");
  }
  @Test public void testPriorityIsNegative() throws Exception {
    assertNotReachable("test/priorityToNegative/");
  }
public static class TestRootActionParent extends AbstractUnprotectedRootAction {
    @StaplerNotDispatchable public Renderable getParentKoButChildOk(){
      return new Renderable();
    }
    @StaplerNotDispatchable public Renderable getParentKoButChildNone(){
      return new Renderable();
    }
    public Renderable getParentNoneButChildOk(){
      return new Renderable();
    }
    public Renderable getParentNoneButChildKo(){
      return new Renderable();
    }
    @StaplerDispatchable public Renderable getParentOkButChildKo(){
      return new Renderable();
    }
    @StaplerDispatchable public Renderable getParentOkButChildNone(){
      return new Renderable();
    }
  }
@TestExtension public static class TestRootActionChild extends TestRootActionParent {
    @Override public String getUrlName(){
      return "test-child";
    }
    @StaplerDispatchable public Renderable getParentKoButChildOk(){
      return new Renderable();
    }
    public Renderable getParentKoButChildNone(){
      return new Renderable();
    }
    @StaplerDispatchable public Renderable getParentNoneButChildOk(){
      return new Renderable();
    }
    @StaplerNotDispatchable public Renderable getParentNoneButChildKo(){
      return new Renderable();
    }
    @StaplerNotDispatchable public Renderable getParentOkButChildKo(){
      return new Renderable();
    }
    public Renderable getParentOkButChildNone(){
      return new Renderable();
    }
  }
  @Test public void testInheritanceOfAnnotation_childHasLastWord() throws Exception {
    assertNotReachable("test-child/parentKoButChildOk/");
    assertNotReachable("test-child/parentKoButChildNone/");
    filteredGetMethodTriggered=false;
    assertReachable("test-child/parentNoneButChildOk/");
    assertNotReachable("test-child/parentNoneButChildKo/");
    assertNotReachable("test-child/parentOkButChildKo/");
    filteredGetMethodTriggered=false;
    assertReachable("test-child/parentOkButChildNone/");
  }
}
