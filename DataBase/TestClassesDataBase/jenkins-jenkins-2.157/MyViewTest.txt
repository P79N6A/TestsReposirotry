/** 
 * @author Lucie Votypkova
 */
public class MyViewTest {
  @Rule public JenkinsRule rule=new JenkinsRule();
  @Rule public LoggerRule logs=new LoggerRule();
  @Before public void setup(){
    rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());
  }
  @Test public void testContains() throws IOException, Exception {
    GlobalMatrixAuthorizationStrategy auth=new GlobalMatrixAuthorizationStrategy();
    rule.jenkins.setAuthorizationStrategy(auth);
    User user=User.get("User1");
    FreeStyleProject job=rule.createFreeStyleProject("job");
    MyView view=new MyView("My",rule.jenkins);
    rule.jenkins.addView(view);
    auth.add(Job.READ,"User1");
    SecurityContextHolder.getContext().setAuthentication(user.impersonate());
    assertFalse("View " + view.getDisplayName() + " should not contain job "+ job.getDisplayName(),view.contains(job));
    auth.add(Job.CONFIGURE,"User1");
    assertTrue("View " + view.getDisplayName() + " contain job "+ job.getDisplayName(),view.contains(job));
  }
  @Test public void testDoCreateItem() throws IOException, Exception {
    logs.record(AbstractItem.class,Level.ALL);
    MyView view=new MyView("My",rule.jenkins);
    rule.jenkins.addView(view);
    HtmlPage newItemPage=rule.createWebClient().goTo("view/" + view.getDisplayName() + "/newJob");
    HtmlForm form=newItemPage.getFormByName("createItem");
    form.getInputByName("name").setValueAttribute("job");
    form.getInputByName("name").blur();
    HtmlElement itemType=newItemPage.getFirstByXPath("//div[@class='category']/ul/li");
    itemType.click();
    rule.submit(form);
    Item item=rule.jenkins.getItem("job");
    assumeThat("TODO sometimes on Windows CI the submission does not seem to be really processed (most log messages are missing)",item,notNullValue());
    assertThat(view.getItems(),contains(equalTo(item)));
  }
  @Test public void testGetItems() throws IOException, InterruptedException {
    User user=User.get("User1");
    GlobalMatrixAuthorizationStrategy auth=new GlobalMatrixAuthorizationStrategy();
    rule.jenkins.setAuthorizationStrategy(auth);
    FreeStyleProject job2=rule.createFreeStyleProject("job2");
    FreeStyleProject job=rule.createFreeStyleProject("job");
    MyView view=new MyView("My",rule.jenkins);
    auth.add(Job.READ,"User1");
    SecurityContextHolder.getContext().setAuthentication(user.impersonate());
    assertFalse("View " + view.getDisplayName() + " should not contains job "+ job.getDisplayName(),view.getItems().contains(job));
    assertFalse("View " + view.getDisplayName() + " should not contains job "+ job2.getDisplayName(),view.getItems().contains(job2));
    auth.add(Job.CONFIGURE,"User1");
    assertTrue("View " + view.getDisplayName() + " should contain job "+ job.getDisplayName(),view.getItems().contains(job));
    assertTrue("View " + view.getDisplayName() + " should contain job "+ job2.getDisplayName(),view.getItems().contains(job2));
  }
}
