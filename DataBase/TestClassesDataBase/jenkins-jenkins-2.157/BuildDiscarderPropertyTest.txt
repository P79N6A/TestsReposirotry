public class BuildDiscarderPropertyTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @Issue("JENKINS-31518") @LocalData @Test public void buildDiscarderField() throws Exception {
    FreeStyleProject p=r.jenkins.getItemByFullName("p",FreeStyleProject.class);
    verifyBuildDiscarder(p);
    r.configRoundtrip(p);
    verifyBuildDiscarder(p);
    String xml=p.getConfigFile().asString();
    assertFalse(xml,xml.contains("<logRotator class="));
    assertTrue(xml,xml.contains("<" + BuildDiscarderProperty.class.getName() + ">"));
  }
  private void verifyBuildDiscarder(  FreeStyleProject p){
    BuildDiscarder bd=p.getBuildDiscarder();
    assertNotNull(bd);
    LogRotator lr=(LogRotator)bd;
    assertEquals(7,lr.getDaysToKeep());
    assertEquals(10,lr.getNumToKeep());
    assertNotNull(p.getProperty(BuildDiscarderProperty.class));
    assertEquals(1,p.getProperties().size());
  }
  @Issue("JENKINS-16979") @LocalData @Test public void logRotatorField() throws Exception {
    AbstractProject<?,?> p=r.jenkins.getItemByFullName("foo",AbstractProject.class);
    verifyLogRotatorSanity(p);
    p.save();
    String xml=p.getConfigFile().asString();
    p.setBuildDiscarder(null);
    p.updateByXml((Source)new StreamSource(new StringReader(xml)));
    verifyLogRotatorSanity(p);
    assertTrue(xml,xml.contains("<logRotator class=\"" + LogRotator.class.getName() + "\">"));
  }
  private static void verifyLogRotatorSanity(  AbstractProject<?,?> p){
    LogRotator d=(LogRotator)p.getBuildDiscarder();
    assertEquals(4,d.getDaysToKeep());
    assertEquals(3,d.getNumToKeep());
    assertEquals(2,d.getArtifactDaysToKeep());
    assertEquals(1,d.getArtifactNumToKeep());
  }
}
