public class AlternativeUiTextProviderTest {
  @Rule public JenkinsRule j=new JenkinsRule();
@TestExtension public static class Impl extends AlternativeUiTextProvider {
    static boolean oldschool;
    @SuppressWarnings("deprecation") @Override public <T>String getText(    Message<T> text,    T context){
      if (oldschool && text == ParameterizedJobMixIn.BUILD_NOW_TEXT) {
        return "oldschool:" + ParameterizedJobMixIn.BUILD_NOW_TEXT.cast(context).getDisplayName();
      }
      if (!oldschool && text == AbstractProject.BUILD_NOW_TEXT) {
        return "newschool:" + AbstractProject.BUILD_NOW_TEXT.cast(context).getDisplayName();
      }
      return null;
    }
  }
  /** 
 * Makes sure that  {@link AlternativeUiTextProvider} actually works at some basic level.
 */
  @Test public void basics() throws Exception {
    Impl.oldschool=false;
    FreeStyleProject p=j.createFreeStyleProject("aaa");
    assertThat(j.createWebClient().getPage(p).asText(),containsString("newschool:aaa"));
    Impl.oldschool=true;
    assertThat(j.createWebClient().getPage(p).asText(),containsString("oldschool:aaa"));
  }
  /** 
 * Makes sure that  {@link AlternativeUiTextProvider} actually works with a parameterized Job.
 */
  @Test @Issue("JENKINS-41757") public void basicsWithParameter() throws Exception {
    Impl.oldschool=false;
    FreeStyleProject p=j.createFreeStyleProject("aaa");
    p.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition("FOO",null)));
    String pageText=j.createWebClient().getPage(p).asText();
    assertThat(pageText,containsString("newschool:aaa"));
    Impl.oldschool=true;
    pageText=j.createWebClient().getPage(p).asText();
    assertThat(pageText,containsString("oldschool:aaa"));
  }
}
