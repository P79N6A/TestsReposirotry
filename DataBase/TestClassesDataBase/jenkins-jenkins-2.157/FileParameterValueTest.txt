public class FileParameterValueTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Rule public TemporaryFolder tmp=new TemporaryFolder();
  @Test @Issue("SECURITY-1074") public void fileParameter_cannotCreateFile_outsideOfBuildFolder() throws Exception {
    FilePath root=j.jenkins.getRootPath();
    FreeStyleProject p=j.createFreeStyleProject();
    p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(new FileParameterDefinition("../../../../../root-level.txt",null))));
    assertThat(root.child("root-level.txt").exists(),equalTo(false));
    String uploadedContent="test-content";
    File uploadedFile=tmp.newFile();
    FileUtils.write(uploadedFile,uploadedContent);
    FreeStyleBuild build=p.scheduleBuild2(0,new Cause.UserIdCause(),new ParametersAction(new FileParameterValue("../../../../../root-level.txt",uploadedFile,"uploaded-file.txt"))).get();
    assertThat(build.getResult(),equalTo(Result.FAILURE));
    assertThat(root.child("root-level.txt").exists(),equalTo(false));
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    checkUrlNot200AndNotContains(wc,build.getUrl() + "parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt",uploadedContent);
    checkUrlNot200AndNotContains(wc,build.getUrl() + "parameters/parameter/%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2Froot-level.txt/uploaded-file.txt",uploadedContent);
    checkUrlNot200AndNotContains(wc,build.getUrl() + "parameters/parameter/%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215root-level.txt/uploaded-file.txt",uploadedContent);
    checkUrlNot200AndNotContains(wc,build.getUrl() + "parameters/parameter/%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252froot-level.txt/uploaded-file.txt",uploadedContent);
    checkUrlNot200AndNotContains(wc,build.getUrl() + "parameters/parameter/%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%afroot-level.txt/uploaded-file.txt",uploadedContent);
  }
  private void checkUrlNot200AndNotContains(  JenkinsRule.WebClient wc,  String url,  String contentNotPresent) throws Exception {
    Page pageForEncoded=wc.goTo(url,null);
    assertThat(pageForEncoded.getWebResponse().getStatusCode(),not(equalTo(200)));
    assertThat(pageForEncoded.getWebResponse().getContentAsString(),not(containsString(contentNotPresent)));
  }
  @Test @Issue("SECURITY-1074") public void fileParameter_cannotCreateFile_outsideOfBuildFolder_backslashEdition() throws Exception {
    Assume.assumeTrue("Backslash are only dangerous on Windows",Functions.isWindows());
    FilePath root=j.jenkins.getRootPath();
    FreeStyleProject p=j.createFreeStyleProject();
    p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(new FileParameterDefinition("..\\..\\..\\..\\..\\root-level.txt",null))));
    assertThat(root.child("root-level.txt").exists(),equalTo(false));
    String uploadedContent="test-content";
    File uploadedFile=tmp.newFile();
    FileUtils.write(uploadedFile,uploadedContent);
    FreeStyleBuild build=p.scheduleBuild2(0,new Cause.UserIdCause(),new ParametersAction(new FileParameterValue("..\\..\\..\\..\\..\\root-level.txt",uploadedFile,"uploaded-file.txt"))).get();
    assertThat(build.getResult(),equalTo(Result.FAILURE));
    assertThat(root.child("root-level.txt").exists(),equalTo(false));
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    checkUrlNot200AndNotContains(wc,build.getUrl() + "parameters/parameter/..\\..\\..\\..\\..\\root-level.txt/uploaded-file.txt",uploadedContent);
    checkUrlNot200AndNotContains(wc,build.getUrl() + "parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt",uploadedContent);
  }
  @Test @Issue("SECURITY-1074") public void fileParameter_withSingleDot() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(new FileParameterDefinition(".",null))));
    String uploadedContent="test-content";
    File uploadedFile=tmp.newFile();
    FileUtils.write(uploadedFile,uploadedContent);
    FreeStyleBuild build=p.scheduleBuild2(0,new Cause.UserIdCause(),new ParametersAction(new FileParameterValue(".",uploadedFile,"uploaded-file.txt"))).get();
    assertThat(build.getResult(),equalTo(Result.FAILURE));
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    checkUrlNot200AndNotContains(wc,build.getUrl() + "parameters/parameter/uploaded-file.txt",uploadedContent);
    checkUrlNot200AndNotContains(wc,build.getUrl() + "parameters/parameter/./uploaded-file.txt",uploadedContent);
  }
  @Test @Issue("SECURITY-1074") public void fileParameter_withDoubleDot() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(new FileParameterDefinition("..",null))));
    String uploadedContent="test-content";
    File uploadedFile=tmp.newFile();
    FileUtils.write(uploadedFile,uploadedContent);
    FreeStyleBuild build=p.scheduleBuild2(0,new Cause.UserIdCause(),new ParametersAction(new FileParameterValue("..",uploadedFile,"uploaded-file.txt"))).get();
    assertThat(build.getResult(),equalTo(Result.FAILURE));
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    checkUrlNot200AndNotContains(wc,build.getUrl() + "parameters/uploaded-file.txt",uploadedContent);
    checkUrlNot200AndNotContains(wc,build.getUrl() + "parameters/parameter/../uploaded-file.txt",uploadedContent);
  }
  @Test @Issue("SECURITY-1074") public void fileParameter_cannotEraseFile_outsideOfBuildFolder() throws Exception {
    FilePath root=j.jenkins.getRootPath();
    FreeStyleProject p=j.createFreeStyleProject();
    p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(new FileParameterDefinition("../../../../../root-level.txt",null))));
    assertThat(root.child("root-level.txt").exists(),equalTo(false));
    String initialContent="do-not-erase-me";
    root.child("root-level.txt").write(initialContent,StandardCharsets.UTF_8.name());
    String uploadedContent="test-content";
    File uploadedFile=tmp.newFile();
    FileUtils.write(uploadedFile,uploadedContent);
    FreeStyleBuild build=p.scheduleBuild2(0,new Cause.UserIdCause(),new ParametersAction(new FileParameterValue("../../../../../root-level.txt",uploadedFile,"uploaded-file.txt"))).get();
    assertThat(build.getResult(),equalTo(Result.FAILURE));
    assertThat(root.child("root-level.txt").readToString(),equalTo(initialContent));
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    checkUrlNot200AndNotContains(wc,build.getUrl() + "parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt",uploadedContent);
  }
  @Test public void fileParameter_canStillUse_internalHierarchy() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    p.addProperty(new ParametersDefinitionProperty(Arrays.asList(new FileParameterDefinition("direct-child1.txt",null),new FileParameterDefinition("parent/child2.txt",null))));
    File uploadedFile1=tmp.newFile();
    FileUtils.write(uploadedFile1,"test1");
    File uploadedFile2=tmp.newFile();
    FileUtils.write(uploadedFile2,"test2");
    FreeStyleBuild build=j.assertBuildStatusSuccess(p.scheduleBuild2(0,new Cause.UserIdCause(),new ParametersAction(new FileParameterValue("direct-child1.txt",uploadedFile1,"uploaded-file-1.txt"),new FileParameterValue("parent/child2.txt",uploadedFile2,"uploaded-file-2.txt"))));
    File directChild=new File(build.getRootDir(),"fileParameters/" + "direct-child1.txt");
    assertTrue(directChild.exists());
    File parentChild=new File(build.getRootDir(),"fileParameters/" + "parent/child2.txt");
    assertTrue(parentChild.exists());
    assertTrue(build.getWorkspace().child("direct-child1.txt").exists());
    assertTrue(build.getWorkspace().child("parent").child("child2.txt").exists());
    JenkinsRule.WebClient wc=j.createWebClient();
    HtmlPage workspacePage=wc.goTo(p.getUrl() + "ws");
    String workspaceContent=workspacePage.getWebResponse().getContentAsString();
    assertThat(workspaceContent,allOf(containsString("direct-child1.txt"),containsString("parent")));
    HtmlPage workspaceParentPage=wc.goTo(p.getUrl() + "ws" + "/parent");
    String workspaceParentContent=workspaceParentPage.getWebResponse().getContentAsString();
    assertThat(workspaceParentContent,containsString("child2.txt"));
  }
}
