/** 
 * {@link BuildCommand} test.
 */
public class BuildCommandTest {
  @ClassRule public static BuildWatcher buildWatcher=new BuildWatcher();
  @Rule public JenkinsRule j=new JenkinsRule();
  /** 
 * Just schedules a build and return.
 */
  @Test public void async() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    OneShotEvent started=new OneShotEvent();
    OneShotEvent completed=new OneShotEvent();
    p.getBuildersList().add(new TestBuilder(){
      @Override public boolean perform(      AbstractBuild<?,?> build,      Launcher launcher,      BuildListener listener) throws InterruptedException, IOException {
        started.signal();
        completed.block();
        return true;
      }
    }
);
    try (CLI cli=new CLI(j.getURL())){
      assertEquals(0,cli.execute("build",p.getName()));
      started.block();
      assertTrue(p.getBuildByNumber(1).isBuilding());
      completed.signal();
    }
   }
  /** 
 * Tests synchronous execution.
 */
  @Test public void sync() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    p.getBuildersList().add(new Shell("sleep 3"));
    try (CLI cli=new CLI(j.getURL())){
      cli.execute("build","-s",p.getName());
      assertFalse(p.getBuildByNumber(1).isBuilding());
    }
   }
  /** 
 * Tests synchronous execution with retried verbose output
 */
  @Test public void syncWOutputStreaming() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    p.getBuildersList().add(new Shell("sleep 3"));
    try (CLI cli=new CLI(j.getURL())){
      cli.execute("build","-s","-v","-r","5",p.getName());
      assertFalse(p.getBuildByNumber(1).isBuilding());
    }
   }
  @Test public void parameters() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    p.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition("key",null)));
    try (CLI cli=new CLI(j.getURL())){
      cli.execute("build","-s","-p","key=foobar",p.getName());
      FreeStyleBuild b=j.assertBuildStatusSuccess(p.getBuildByNumber(1));
      assertEquals("foobar",b.getAction(ParametersAction.class).getParameter("key").getValue());
    }
   }
  @Test public void defaultParameters() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    p.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition("key","default"),new StringParameterDefinition("key2","default2")));
    try (CLI cli=new CLI(j.getURL())){
      cli.execute("build","-s","-p","key=foobar",p.getName());
      FreeStyleBuild b=j.assertBuildStatusSuccess(p.getBuildByNumber(1));
      assertEquals("foobar",b.getAction(ParametersAction.class).getParameter("key").getValue());
      assertEquals("default2",b.getAction(ParametersAction.class).getParameter("key2").getValue());
    }
   }
  @Test public void consoleOutput() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    try (CLI cli=new CLI(j.getURL())){
      ByteArrayOutputStream o=new ByteArrayOutputStream();
      cli.execute(Arrays.asList("build","-s","-v",p.getName()),System.in,new TeeOutputStream(System.out,o),System.err);
      j.assertBuildStatusSuccess(p.getBuildByNumber(1));
      assertThat(o.toString(),allOf(containsString("Started from command line by anonymous"),containsString("Finished: SUCCESS")));
    }
   }
  @Test public void consoleOutputWhenBuildSchedulingRefused() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    try (CLI cli=new CLI(j.getURL())){
      ByteArrayOutputStream o=new ByteArrayOutputStream();
      cli.execute(Arrays.asList("build","-s","-v",p.getName()),System.in,System.out,new TeeOutputStream(System.err,o));
      assertThat(o.toString(),containsString(BuildCommand.BUILD_SCHEDULING_REFUSED));
    }
   }
@TestExtension("consoleOutputWhenBuildSchedulingRefused") public static class UnschedulingVetoer extends QueueDecisionHandler {
    @Override public boolean shouldSchedule(    Task task,    List<Action> actions){
      return false;
    }
  }
  @Test public void refuseToBuildDisabledProject() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("the-project");
    project.disable();
    CLICommandInvoker invoker=new CLICommandInvoker(j,new BuildCommand());
    CLICommandInvoker.Result result=invoker.invokeWithArgs("the-project");
    assertThat(result,failedWith(4));
    assertThat(result.stderr(),containsString("ERROR: Cannot build the-project because it is disabled."));
    assertNull("Project should not be built",project.getBuildByNumber(1));
  }
  @Test public void refuseToBuildNewlyCopiedProject() throws Exception {
    FreeStyleProject original=j.createFreeStyleProject("original");
    FreeStyleProject newOne=(FreeStyleProject)j.jenkins.<TopLevelItem>copy(original,"new-one");
    CLICommandInvoker invoker=new CLICommandInvoker(j,new BuildCommand());
    CLICommandInvoker.Result result=invoker.invokeWithArgs("new-one");
    assertThat(result,failedWith(4));
    assertThat(result.stderr(),containsString("ERROR: Cannot build new-one because its configuration has not been saved."));
    assertNull("Project should not be built",newOne.getBuildByNumber(1));
  }
  @Test public void correctlyParseMapValuesContainingEqualsSign() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("the-project");
    project.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition("expr",null)));
    CLICommandInvoker invoker=new CLICommandInvoker(j,new BuildCommand());
    CLICommandInvoker.Result result=invoker.invokeWithArgs("the-project","-p","expr=a=b","-s");
    assertThat(result,succeeded());
    assertEquals("a=b",project.getBuildByNumber(1).getBuildVariables().get("expr"));
  }
  @Issue("JENKINS-15094") @Test public void executorsAliveOnParameterWithNullDefaultValue() throws Exception {
    DumbSlave slave=j.createSlave();
    FreeStyleProject project=j.createFreeStyleProject("foo");
    project.setAssignedNode(slave);
    NullDefaultValueParameterDefinition nullDefaultDefinition=new NullDefaultValueParameterDefinition();
    ParametersDefinitionProperty pdp=new ParametersDefinitionProperty(new StringParameterDefinition("string","defaultValue","description"),nullDefaultDefinition);
    project.addProperty(pdp);
    CaptureEnvironmentBuilder builder=new CaptureEnvironmentBuilder();
    project.getBuildersList().add(builder);
    j.buildAndAssertSuccess(project);
    for (    Executor exec : slave.toComputer().getExecutors()) {
      assertTrue("Executor has died before the test start: " + exec,exec.isActive());
    }
    CLICommandInvoker invoker=new CLICommandInvoker(j,new BuildCommand());
    CLICommandInvoker.Result result=invoker.invokeWithArgs("foo","-p","string=value");
    assertThat(result,failedWith(2));
    assertThat(result.stderr(),containsString("ERROR: No default value for the parameter \'FOO\'."));
    Thread.sleep(5000);
    assertNull("Build should not be scheduled",j.jenkins.getQueue().getItem(project));
    assertNull("Build should not be scheduled",project.getBuildByNumber(2));
    for (    Executor exec : slave.toComputer().getExecutors()) {
      assertTrue("Executor is dead: " + exec,exec.isActive());
    }
  }
public static final class NullDefaultValueParameterDefinition extends SimpleParameterDefinition {
    NullDefaultValueParameterDefinition(){
      super("FOO","Always null default value");
    }
    @Override public ParameterValue createValue(    String value){
      return new StringParameterValue("FOO","BAR");
    }
    @Override public ParameterValue createValue(    StaplerRequest req,    JSONObject jo){
      return createValue("BAR");
    }
    @Override public ParameterValue getDefaultParameterValue(){
      return null;
    }
@Extension public static class DescriptorImpl extends ParameterDescriptor {
    }
  }
  @Issue("JENKINS-41745") @Test public void fileParameter() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject("myjob");
    p.addProperty(new ParametersDefinitionProperty(new FileParameterDefinition("file",null)));
    p.getBuildersList().add(new TestBuilder(){
      @Override public boolean perform(      AbstractBuild<?,?> build,      Launcher launcher,      BuildListener listener) throws InterruptedException, IOException {
        listener.getLogger().println("Found in my workspace: " + build.getWorkspace().child("file").readToString());
        return true;
      }
    }
);
    assertThat(new CLICommandInvoker(j,"build").withStdin(new ByteArrayInputStream("uploaded content here".getBytes())).invokeWithArgs("-f","-p","file=","myjob"),CLICommandInvoker.Matcher.succeeded());
    FreeStyleBuild b=p.getBuildByNumber(1);
    assertNotNull(b);
    j.assertLogContains("uploaded content here",b);
  }
}
