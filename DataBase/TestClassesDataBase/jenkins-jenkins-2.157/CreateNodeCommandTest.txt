public class CreateNodeCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,new CreateNodeCommand());
  }
  @Test public void createNodeShouldFailWithoutComputerCreatePermission() throws Exception {
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).withStdin(Computer.class.getResourceAsStream("node.xml")).invoke();
    assertThat(result.stderr(),containsString("ERROR: user is missing the Agent/Create permission"));
    assertThat(result,hasNoStandardOutput());
    assertThat(result,failedWith(6));
  }
  @Test public void createNode() throws Exception {
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(Computer.class.getResourceAsStream("node.xml")).invoke();
    assertThat(result,succeededSilently());
    final Slave updatedSlave=(Slave)j.jenkins.getNode("SlaveFromXML");
    assertThat(updatedSlave.getNodeName(),equalTo("SlaveFromXML"));
    assertThat(updatedSlave.getNumExecutors(),equalTo(42));
    assertThat(updatedSlave.getUserId(),equalTo(command.user().getId()));
  }
  @Test public void createNodeSpecifyingNameExplicitly() throws Exception {
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(Computer.class.getResourceAsStream("node.xml")).invokeWithArgs("CustomSlaveName");
    assertThat(result,succeededSilently());
    assertThat("A slave with original name should not exist",j.jenkins.getNode("SlaveFromXml"),nullValue());
    final Slave updatedSlave=(Slave)j.jenkins.getNode("CustomSlaveName");
    assertThat(updatedSlave.getNodeName(),equalTo("CustomSlaveName"));
    assertThat(updatedSlave.getNumExecutors(),equalTo(42));
    assertThat(updatedSlave.getUserId(),equalTo(command.user().getId()));
  }
  @Test public void createNodeSpecifyingDifferentNameExplicitly() throws Exception {
    final Node originalSlave=j.createSlave("SlaveFromXml",null,null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(Computer.class.getResourceAsStream("node.xml")).invokeWithArgs("CustomSlaveName");
    assertThat(result,succeededSilently());
    assertThat("A slave with original name should be left untouched",j.jenkins.getNode("SlaveFromXml"),equalTo(originalSlave));
    final Slave updatedSlave=(Slave)j.jenkins.getNode("CustomSlaveName");
    assertThat(updatedSlave.getNodeName(),equalTo("CustomSlaveName"));
    assertThat(updatedSlave.getNumExecutors(),equalTo(42));
    assertThat(updatedSlave.getUserId(),equalTo(command.user().getId()));
  }
  @Test public void createNodeShouldFailIfNodeAlreadyExist() throws Exception {
    j.createSlave("SlaveFromXML",null,null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(Computer.class.getResourceAsStream("node.xml")).invoke();
    assertThat(result.stderr(),containsString("ERROR: Node 'SlaveFromXML' already exists"));
    assertThat(result,hasNoStandardOutput());
    assertThat(result,failedWith(4));
  }
  @Test public void createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly() throws Exception {
    j.createSlave("ExistingSlave",null,null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.CREATE,Jenkins.READ).withStdin(Computer.class.getResourceAsStream("node.xml")).invokeWithArgs("ExistingSlave");
    assertThat(result.stderr(),containsString("ERROR: Node 'ExistingSlave' already exists"));
    assertThat(result,hasNoStandardOutput());
    assertThat(result,failedWith(4));
  }
}
