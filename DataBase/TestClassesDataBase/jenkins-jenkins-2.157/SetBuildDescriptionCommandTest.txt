/** 
 * @author pjanouse
 */
public class SetBuildDescriptionCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,"set-build-description");
  }
  @Test public void setBuildDescriptionShouldFailWithoutJobReadPermission() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("aProject");
    project.getBuildersList().add(createScriptBuilder("echo 1"));
    assertThat(project.scheduleBuild2(0).get().getLog(),containsString("echo 1"));
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invokeWithArgs("aProject","1","test");
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: No such job 'aProject'"));
  }
  @Test public void setBuildDescriptionShouldFailWithoutRunUpdatePermission1() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("aProject");
    project.getBuildersList().add(createScriptBuilder("echo 1"));
    assertThat(project.scheduleBuild2(0).get().getLog(),containsString("echo 1"));
    final CLICommandInvoker.Result result=command.authorizedTo(Job.READ,Jenkins.READ).invokeWithArgs("aProject","1","test");
    assertThat(result,failedWith(6));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: user is missing the Run/Update permission"));
  }
  @Test public void setBuildDescriptionShouldSucceed() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("aProject");
    project.getBuildersList().add(createScriptBuilder("echo 1"));
    FreeStyleBuild build=project.scheduleBuild2(0).get();
    assertThat(build.getLog(),containsString("echo 1"));
    assertThat(build.getDescription(),equalTo(null));
    CLICommandInvoker.Result result=command.authorizedTo(Run.UPDATE,Job.READ,Jenkins.READ).invokeWithArgs("aProject","1","test");
    assertThat(result,succeededSilently());
    assertThat(build.getDescription(),equalTo("test"));
    result=command.authorizedTo(Run.UPDATE,Job.READ,Jenkins.READ).invokeWithArgs("aProject","1","");
    assertThat(result,succeededSilently());
    assertThat(build.getDescription(),equalTo(""));
    result=command.authorizedTo(Run.UPDATE,Job.READ,Jenkins.READ).invokeWithArgs("aProject","1"," ");
    assertThat(result,succeededSilently());
    assertThat(build.getDescription(),equalTo(" "));
  }
  @Test public void setBuildDescriptionShouldFailIfJobDoesNotExist() throws Exception {
    final CLICommandInvoker.Result result=command.authorizedTo(Run.UPDATE,Job.READ,Jenkins.READ).invokeWithArgs("never_created");
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: No such job 'never_created'"));
  }
  @Test public void setBuildDescriptionShouldFailIfJobDoesNotExistButNearExists() throws Exception {
    j.createFreeStyleProject("never_created");
    final CLICommandInvoker.Result result=command.authorizedTo(Run.UPDATE,Job.READ,Jenkins.READ).invokeWithArgs("never_created1");
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: No such job 'never_created1'; perhaps you meant 'never_created'?"));
  }
  @Test public void setBuildDescriptionShouldFailIfBuildDoesNotExist() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("aProject");
    project.getBuildersList().add(createScriptBuilder("echo 1"));
    assertThat(project.scheduleBuild2(0).get().getLog(),containsString("echo 1"));
    final CLICommandInvoker.Result result=command.authorizedTo(Job.READ,Jenkins.READ).invokeWithArgs("aProject","2","test");
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: No such build #2"));
  }
  /** 
 * Create a script based builder (either Shell or BatchFile) depending on platform
 * @param script the contents of the script to run
 * @return A Builder instance of either Shell or BatchFile
 */
  private Builder createScriptBuilder(  String script){
    return Functions.isWindows() ? new BatchFile(script) : new Shell(script);
  }
}
