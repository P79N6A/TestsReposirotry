private class SpyingJavaScriptEngine extends JavaScriptEngine {
  private List<XMLHttpRequest> storedRequests=new ArrayList<>();
  private String urlToMatch;
  private HttpMethod method;
  SpyingJavaScriptEngine(  JenkinsRule.WebClient wc,  @Nullable String urlToMatch,  @Nullable HttpMethod method){
    super(wc);
    this.urlToMatch=urlToMatch;
    this.method=method;
  }
  @Override public Object callFunction(  InteractivePage page,  Function function,  Scriptable scope,  Scriptable thisObject,  Object[] args){
    if (thisObject instanceof XMLHttpRequest) {
      try {
        WebRequest request=getPrivateWebRequestField((XMLHttpRequest)thisObject);
        boolean correctUrl=urlToMatch == null || request.getUrl().toString().contains(urlToMatch);
        boolean correctMethod=method == null || request.getHttpMethod().equals(method);
        if (correctUrl && correctMethod) {
          if (((XMLHttpRequest)thisObject).getReadyState() == 4) {
            storedRequests.add((XMLHttpRequest)thisObject);
          }
        }
      }
 catch (      NoSuchFieldException|IllegalAccessException e) {
        e.printStackTrace();
      }
    }
    return super.callFunction(page,function,scope,thisObject,args);
  }
  @Nonnull public XMLHttpRequest getLastRequest(){
    if (storedRequests.isEmpty()) {
      fail("There is no available requests for the proposed url/method");
    }
    return storedRequests.get(storedRequests.size() - 1);
  }
}
