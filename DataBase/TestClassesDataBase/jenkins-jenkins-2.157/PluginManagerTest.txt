/** 
 * @author Kohsuke Kawaguchi
 */
public class PluginManagerTest {
  @Rule public JenkinsRule r=PluginManagerUtil.newJenkinsRule();
  @Rule public TemporaryFolder tmp=new TemporaryFolder();
  /** 
 * Manual submission form.
 */
  @Test public void uploadJpi() throws Exception {
    HtmlPage page=r.createWebClient().goTo("pluginManager/advanced");
    HtmlForm f=page.getFormByName("uploadPlugin");
    File dir=tmp.newFolder();
    File plugin=new File(dir,"tasks.jpi");
    FileUtils.copyURLToFile(getClass().getClassLoader().getResource("plugins/tasks.jpi"),plugin);
    f.getInputByName("name").setValueAttribute(plugin.getAbsolutePath());
    r.submit(f);
    assertTrue(new File(r.jenkins.getRootDir(),"plugins/tasks.jpi").exists());
  }
  /** 
 * Manual submission form.
 */
  @Test public void uploadHpi() throws Exception {
    HtmlPage page=r.createWebClient().goTo("pluginManager/advanced");
    HtmlForm f=page.getFormByName("uploadPlugin");
    File dir=tmp.newFolder();
    File plugin=new File(dir,"legacy.hpi");
    FileUtils.copyURLToFile(getClass().getClassLoader().getResource("plugins/legacy.hpi"),plugin);
    f.getInputByName("name").setValueAttribute(plugin.getAbsolutePath());
    r.submit(f);
    assertTrue(new File(r.jenkins.getRootDir(),"plugins/legacy.jpi").exists());
  }
  /** 
 * Tests the effect of  {@link WithPlugin}.
 */
  @WithPlugin("tasks.jpi") @Test public void withRecipeJpi() throws Exception {
    assertNotNull(r.jenkins.getPlugin("tasks"));
  }
  /** 
 * Tests the effect of  {@link WithPlugin}.
 */
  @WithPlugin("legacy.hpi") @Test public void withRecipeHpi() throws Exception {
    assertNotNull(r.jenkins.getPlugin("legacy"));
  }
  /** 
 * Makes sure that plugins can see Maven2 plugin that's refactored out in 1.296.
 */
  @WithPlugin("tasks.jpi") @Test public void optionalMavenDependency() throws Exception {
    PluginWrapper.Dependency m2=null;
    PluginWrapper tasks=r.jenkins.getPluginManager().getPlugin("tasks");
    for (    PluginWrapper.Dependency d : tasks.getOptionalDependencies()) {
      if (d.shortName.equals("maven-plugin")) {
        assertNull(m2);
        m2=d;
      }
    }
    assertNotNull(m2);
    tasks.classLoader.loadClass(hudson.maven.agent.AbortException.class.getName());
  }
  /** 
 * Verifies that by the time  {@link Plugin#start()} is called, uber classloader is fully functioning.This is necessary as plugin start method can engage in XStream loading activities, and they should resolve all the classes in the system (for example, a plugin X can define an extension point other plugins implement, so when X loads its config it better sees all the implementations defined elsewhere)
 */
  @WithPlugin("tasks.jpi") @WithPluginManager(PluginManagerImpl_for_testUberClassLoaderIsAvailableDuringStart.class) @Test public void uberClassLoaderIsAvailableDuringStart(){
    assertTrue(((PluginManagerImpl_for_testUberClassLoaderIsAvailableDuringStart)r.jenkins.pluginManager).tested);
  }
public static class PluginManagerImpl_for_testUberClassLoaderIsAvailableDuringStart extends LocalPluginManager {
    boolean tested;
    public PluginManagerImpl_for_testUberClassLoaderIsAvailableDuringStart(    File rootDir){
      super(rootDir);
    }
    @Override protected PluginStrategy createPluginStrategy(){
      return new ClassicPluginStrategy(this){
        @Override public void startPlugin(        PluginWrapper plugin) throws Exception {
          tested=true;
          assertTrue(!activePlugins.isEmpty());
          uberClassLoader.loadClass("hudson.plugins.tasks.Messages");
          super.startPlugin(plugin);
        }
      }
;
    }
  }
  /** 
 * Makes sure that thread context classloader isn't used by  {@link UberClassLoader}, or else infinite cycle ensues.
 */
  @Url("http://jenkins.361315.n4.nabble.com/channel-example-and-plugin-classes-gives-ClassNotFoundException-td3756092.html") @Test public void uberClassLoaderDoesntUseContextClassLoader() throws Exception {
    Thread t=Thread.currentThread();
    URLClassLoader ucl=new URLClassLoader(new URL[0],r.jenkins.pluginManager.uberClassLoader);
    ClassLoader old=t.getContextClassLoader();
    t.setContextClassLoader(ucl);
    try {
      try {
        ucl.loadClass("No such class");
        fail();
      }
 catch (      ClassNotFoundException e) {
      }
      ucl.loadClass(Hudson.class.getName());
    }
  finally {
      t.setContextClassLoader(old);
    }
  }
  @Test public void installWithoutRestart() throws Exception {
    URL res=getClass().getClassLoader().getResource("plugins/htmlpublisher.jpi");
    File f=new File(r.jenkins.getRootDir(),"plugins/htmlpublisher.jpi");
    FileUtils.copyURLToFile(res,f);
    r.jenkins.pluginManager.dynamicLoad(f);
    Class c=r.jenkins.getPluginManager().uberClassLoader.loadClass("htmlpublisher.HtmlPublisher$DescriptorImpl");
    assertNotNull(r.jenkins.getDescriptorByType(c));
  }
  @Test public void prevalidateConfig() throws Exception {
    assumeFalse("TODO: Implement this test on Windows",Functions.isWindows());
    PersistedList<UpdateSite> sites=r.jenkins.getUpdateCenter().getSites();
    sites.clear();
    URL url=PluginManagerTest.class.getResource("/plugins/tasks-update-center.json");
    UpdateSite site=new UpdateSite(UpdateCenter.ID_DEFAULT,url.toString());
    sites.add(site);
    assertEquals(FormValidation.ok(),site.updateDirectly(false).get());
    assertNotNull(site.getData());
    assertEquals(Collections.emptyList(),r.jenkins.getPluginManager().prevalidateConfig(new StringInputStream("<whatever><runant plugin=\"ant@1.1\"/></whatever>")));
    assertNull(r.jenkins.getPluginManager().getPlugin("tasks"));
    List<Future<UpdateCenterJob>> jobs=r.jenkins.getPluginManager().prevalidateConfig(new StringInputStream("<whatever><tasks plugin=\"tasks@2.23\"/></whatever>"));
    assertEquals(1,jobs.size());
    UpdateCenterJob job=jobs.get(0).get();
    assertEquals("InstallationJob",job.getType());
    UpdateCenter.InstallationJob ijob=(UpdateCenter.InstallationJob)job;
    assertEquals("tasks",ijob.plugin.name);
    assertNotNull(r.jenkins.getPluginManager().getPlugin("tasks"));
  }
  /** 
 * call org.jenkinsci.plugins.dependencytest.depender.Depender.getValue().
 * @return
 * @throws Exception
 */
  private String callDependerValue() throws Exception {
    Class<?> c=r.jenkins.getPluginManager().uberClassLoader.loadClass("org.jenkinsci.plugins.dependencytest.depender.Depender");
    Method m=c.getMethod("getValue");
    return (String)m.invoke(null);
  }
  /** 
 * Load "dependee" and then load "depender". Asserts that "depender" can access to "dependee".
 * @throws Exception
 */
  @Test public void installDependingPluginWithoutRestart() throws Exception {
{
      dynamicLoad("dependee.hpi");
    }
    try {
      callDependerValue();
      fail();
    }
 catch (    ClassNotFoundException ex) {
    }
    assertTrue(r.jenkins.getExtensionList("org.jenkinsci.plugins.dependencytest.dependee.DependeeExtensionPoint").isEmpty());
{
      dynamicLoad("depender.hpi");
    }
    assertEquals("dependee",callDependerValue());
    assertFalse(r.jenkins.getExtensionList("org.jenkinsci.plugins.dependencytest.dependee.DependeeExtensionPoint").isEmpty());
  }
  /** 
 * Load "depender" and then load "dependee". Asserts that "depender" can access to "dependee".
 * @throws Exception
 */
  @Issue("JENKINS-19976") @Test public void installDependedPluginWithoutRestart() throws Exception {
{
      dynamicLoad("depender.hpi");
    }
    assertEquals("depender",callDependerValue());
    try {
      r.jenkins.getExtensionList("org.jenkinsci.plugins.dependencytest.dependee.DependeeExtensionPoint");
      fail();
    }
 catch (    ClassNotFoundException ex) {
    }
{
      dynamicLoad("dependee.hpi");
    }
    assertEquals("dependee",callDependerValue());
    assertFalse(r.jenkins.getExtensionList("org.jenkinsci.plugins.dependencytest.dependee.DependeeExtensionPoint").isEmpty());
  }
  @Issue("JENKINS-21486") @Test public void installPluginWithObsoleteDependencyFails() throws Exception {
{
      dynamicLoad("dependee.hpi");
    }
    try {
      dynamicLoad("mandatory-depender-0.0.2.hpi");
      fail("Should not have worked");
    }
 catch (    IOException e) {
    }
  }
  @Issue("JENKINS-21486") @Test public void installPluginWithDisabledOptionalDependencySucceeds() throws Exception {
{
      dynamicLoadAndDisable("dependee-0.0.2.hpi");
    }
{
      dynamicLoad("depender-0.0.2.hpi");
    }
    try {
      r.jenkins.getExtensionList("org.jenkinsci.plugins.dependencytest.dependee.DependeeExtensionPoint");
      fail();
    }
 catch (    ClassNotFoundException ex) {
    }
  }
  @Issue("JENKINS-21486") @Test public void installPluginWithDisabledDependencyFails() throws Exception {
{
      dynamicLoadAndDisable("dependee-0.0.2.hpi");
    }
    try {
      dynamicLoad("mandatory-depender-0.0.2.hpi");
      fail("Should not have worked");
    }
 catch (    IOException e) {
    }
  }
  @Issue("JENKINS-21486") @Test public void installPluginWithObsoleteOptionalDependencyFails() throws Exception {
{
      dynamicLoad("dependee.hpi");
    }
    try {
      dynamicLoad("depender-0.0.2.hpi");
      fail("Should not have worked");
    }
 catch (    IOException e) {
    }
  }
  @Issue("JENKINS-12753") @WithPlugin("tasks.jpi") @Test public void dynamicLoadRestartRequiredException() throws Exception {
    File jpi=new File(r.jenkins.getRootDir(),"plugins/tasks.jpi");
    assertTrue(jpi.isFile());
    FileUtils.touch(jpi);
    File timestamp=new File(r.jenkins.getRootDir(),"plugins/tasks/.timestamp2");
    assertTrue(timestamp.isFile());
    long lastMod=timestamp.lastModified();
    try {
      r.jenkins.getPluginManager().dynamicLoad(jpi);
      fail("should not have worked");
    }
 catch (    RestartRequiredException x) {
    }
    assertEquals("should not have tried to delete & unpack",lastMod,timestamp.lastModified());
  }
  @WithPlugin("tasks.jpi") @Test public void pluginListJSONApi() throws IOException {
    JSONObject response=r.getJSON("pluginManager/plugins").getJSONObject();
    assertEquals("ok",response.getString("status"));
    JSONArray data=response.getJSONArray("data");
    assertTrue(data.size() > 0);
    JSONObject pluginInfo=data.getJSONObject(0);
    assertTrue(pluginInfo.getString("name") != null);
    assertTrue(pluginInfo.getString("title") != null);
    assertTrue(pluginInfo.getString("dependencies") != null);
  }
  @Issue("JENKINS-41684") @Test public void requireSystemDuringLoad() throws Exception {
    r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
    r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());
    try (ACLContext context=ACL.as(User.get("underprivileged").impersonate())){
      dynamicLoad("require-system-during-load.hpi");
    }
   }
  private void dynamicLoad(  String plugin) throws IOException, InterruptedException, RestartRequiredException {
    PluginManagerUtil.dynamicLoad(plugin,r.jenkins);
  }
  private void dynamicLoadAndDisable(  String plugin) throws IOException, InterruptedException, RestartRequiredException {
    PluginManagerUtil.dynamicLoad(plugin,r.jenkins,true);
  }
  @Test public void uploadDependencyResolution() throws Exception {
    assumeFalse("TODO: Implement this test for Windows",Functions.isWindows());
    PersistedList<UpdateSite> sites=r.jenkins.getUpdateCenter().getSites();
    sites.clear();
    URL url=PluginManagerTest.class.getResource("/plugins/upload-test-update-center.json");
    UpdateSite site=new UpdateSite(UpdateCenter.ID_DEFAULT,url.toString());
    sites.add(site);
    assertEquals(FormValidation.ok(),site.updateDirectly(false).get());
    assertNotNull(site.getData());
    assertNull(r.jenkins.getPluginManager().getPlugin("Parameterized-Remote-Trigger"));
    assertNull(r.jenkins.getPluginManager().getPlugin("token-macro"));
    HtmlPage page=r.createWebClient().goTo("pluginManager/advanced");
    HtmlForm f=page.getFormByName("uploadPlugin");
    File dir=tmp.newFolder();
    File plugin=new File(dir,"Parameterized-Remote-Trigger.hpi");
    FileUtils.copyURLToFile(getClass().getClassLoader().getResource("plugins/Parameterized-Remote-Trigger.hpi"),plugin);
    f.getInputByName("name").setValueAttribute(plugin.getAbsolutePath());
    r.submit(f);
    assertTrue(r.jenkins.getUpdateCenter().getJobs().size() > 0);
    boolean done=true;
    boolean passed=true;
    do {
      Thread.sleep(100);
      done=true;
      for (      UpdateCenterJob job : r.jenkins.getUpdateCenter().getJobs()) {
        if (job instanceof UpdateCenter.DownloadJob) {
          UpdateCenter.DownloadJob j=(UpdateCenter.DownloadJob)job;
          assertFalse(j.status instanceof UpdateCenter.DownloadJob.Failure);
          done&=!(((j.status instanceof UpdateCenter.DownloadJob.Pending) || (j.status instanceof UpdateCenter.DownloadJob.Installing)));
        }
      }
    }
 while (!done);
    assertTrue(new File(r.jenkins.getRootDir(),"plugins/Parameterized-Remote-Trigger.jpi").exists());
    assertTrue(new File(r.jenkins.getRootDir(),"plugins/token-macro.jpi").exists());
    assertNotNull(r.jenkins.getPluginManager().getPlugin("Parameterized-Remote-Trigger"));
    assertNotNull(r.jenkins.getPluginManager().getPlugin("token-macro"));
  }
  @Issue("JENKINS-44898") @WithPlugin("plugin-first.hpi") @Test public void findResourceForPluginFirstClassLoader() throws Exception {
    PluginWrapper w=r.jenkins.getPluginManager().getPlugin("plugin-first");
    assertNotNull(w);
    URL fromPlugin=w.classLoader.getResource("org/jenkinsci/plugins/pluginfirst/HelloWorldBuilder/config.jelly");
    assertNotNull(fromPlugin);
    URL fromToolkit=ClassLoaderReflectionToolkit._findResource(w.classLoader,"org/jenkinsci/plugins/pluginfirst/HelloWorldBuilder/config.jelly");
    assertEquals(fromPlugin,fromToolkit);
  }
  @Issue("JENKINS-50336") @Test public void optionalExtensionCanBeFoundAfterDynamicLoadOfVariant() throws Exception {
    dynamicLoad("variant.hpi");
    assertNotNull(r.jenkins.getPluginManager().getPlugin("variant"));
    dynamicLoad("jenkins-50336.hpi");
    assertTrue(ExtensionList.lookup(GlobalConfiguration.class).stream().anyMatch(gc -> "io.jenkins.plugins.MyGlobalConfiguration".equals(gc.getClass().getName())));
  }
}
