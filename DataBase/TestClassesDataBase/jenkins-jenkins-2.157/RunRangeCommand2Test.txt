/** 
 * @author pjanouse
 */
public class RunRangeCommand2Test {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,new RunRangeCommandTest.DummyRangeCommand());
  }
  @Test public void dummyRangeShouldFailIfJobNameIsEmptyOnEmptyJenkins() throws Exception {
    j.createFreeStyleProject("aProject").scheduleBuild2(0).get();
    assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds().size(),equalTo(1));
    CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs("","1");
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: No such job ''"));
  }
  @Test public void dummyRangeShouldFailIfJobNameIsSpaceOnEmptyJenkins() throws Exception {
    j.createFreeStyleProject("aProject").scheduleBuild2(0).get();
    assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds().size(),equalTo(1));
    CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs(" ","1");
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: No such job ' '"));
  }
  @Test public void dummyRangeShouldSuccessEvenTheBuildIsRunning() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("aProject");
    project.getBuildersList().add(Functions.isWindows() ? new BatchFile("echo 1\r\nping -n 10 127.0.0.1 >nul") : new Shell("echo 1\nsleep 10s"));
    assertThat("Job wasn't scheduled properly",project.scheduleBuild(0),equalTo(true));
    while (!project.isBuilding()) {
      System.out.println("Waiting for build to start and sleep 1s...");
      Thread.sleep(1000);
    }
    if (!project.getBuildByNumber(1).getLog().contains("echo 1")) {
      Thread.sleep(1000);
    }
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs("aProject","1");
    assertThat(result,succeeded());
    assertThat(result.stdout(),containsString("Builds: 1" + System.lineSeparator()));
  }
  @Test public void dummyRangeShouldSuccessEvenTheBuildIsStuckInTheQueue() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("aProject");
    project.getBuildersList().add(new Shell("echo 1\nsleep 10s"));
    project.setAssignedLabel(new LabelAtom("never_created"));
    assertThat("Job wasn't scheduled properly",project.scheduleBuild(0),equalTo(true));
    Thread.sleep(1000);
    assertThat("Job wasn't scheduled properly - it isn't in the queue",project.isInQueue(),equalTo(true));
    assertThat("Job wasn't scheduled properly - it is running on non-exist node",project.isBuilding(),equalTo(false));
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Job.READ).invokeWithArgs("aProject","1");
    assertThat(result,succeeded());
    assertThat(result.stdout(),containsString("Builds: " + System.lineSeparator()));
  }
}
