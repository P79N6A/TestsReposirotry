@Issue("JENKINS-14759") public class TriggerStartTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test public void loadCallsStartFalse() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    MockTrigger t=new MockTrigger();
    p.addTrigger(t);
    p.save();
    p=(FreeStyleProject)Items.load(p.getParent(),p.getRootDir());
    t=p.getTrigger(MockTrigger.class);
    assertNotNull(t);
    assertEquals("[false]",t.calls.toString());
  }
  @Test public void submitCallsStartTrue() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    MockTrigger t=new MockTrigger();
    p.addTrigger(t);
    p.save();
    p=(FreeStyleProject)j.configRoundtrip((Item)p);
    t=p.getTrigger(MockTrigger.class);
    assertNotNull(t);
    assertEquals("[true]",t.calls.toString());
  }
  @Test public void updateByXmlCallsStartTrue() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    String xml=p.getConfigFile().asString();
    xml=xml.replace("  <triggers/>\n",triggersSection());
    Source newXML=new StreamSource(new StringReader(xml));
    p.updateByXml(newXML);
    MockTrigger t=p.getTrigger(MockTrigger.class);
    assertNotNull(t);
    assertEquals("[true]",t.calls.toString());
  }
  @Test public void createProjectFromXmlCallsStartTrue() throws Exception {
    FreeStyleProject p=(FreeStyleProject)j.jenkins.createProjectFromXML("whatever",new ByteArrayInputStream(("<project>\n  <builders/>\n  <publishers/>\n  <buildWrappers/>\n" + triggersSection() + "</project>").getBytes()));
    MockTrigger t=p.getTrigger(MockTrigger.class);
    assertNotNull(t);
    assertEquals("[true]",t.calls.toString());
  }
  @Test public void copyCallsStartTrue() throws Exception {
    AbstractProject<?,?> p=j.createFreeStyleProject();
    MockTrigger t=new MockTrigger();
    p.addTrigger(t);
    p.save();
    p=j.jenkins.copy(p,"nue");
    t=p.getTrigger(MockTrigger.class);
    assertNotNull(t);
    assertEquals("[true]",t.calls.toString());
  }
  private String triggersSection(){
    String tagname=MockTrigger.class.getName().replace("$","_-");
    return "  <triggers class=\"vector\">\n    <" + tagname + ">\n      <spec/>\n    </"+ tagname+ ">\n  </triggers>\n";
  }
public static class MockTrigger extends Trigger<Item> {
    public transient List<Boolean> calls=new ArrayList<Boolean>();
    @DataBoundConstructor public MockTrigger(){
    }
    @Override public void start(    Item project,    boolean newInstance){
      super.start(project,newInstance);
      calls.add(newInstance);
    }
    @Override protected Object readResolve() throws ObjectStreamException {
      calls=new ArrayList<Boolean>();
      return super.readResolve();
    }
@TestExtension public static class DescriptorImpl extends TriggerDescriptor {
      @Override public boolean isApplicable(      Item item){
        return true;
      }
    }
  }
}
