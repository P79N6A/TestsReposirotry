public class Security380Test {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Issue("SECURITY-380") @Test public void testGetItemsWithoutAnonRead() throws Exception {
    FullControlOnceLoggedInAuthorizationStrategy strategy=new FullControlOnceLoggedInAuthorizationStrategy();
    strategy.setAllowAnonymousRead(false);
    Jenkins.getInstance().setAuthorizationStrategy(strategy);
    Jenkins.getInstance().setSecurityRealm(j.createDummySecurityRealm());
    j.createFreeStyleProject();
    ACL.impersonate(Jenkins.ANONYMOUS,new Runnable(){
      @Override public void run(){
        Assert.assertEquals("no items",0,Jenkins.getInstance().getItems().size());
      }
    }
);
  }
  @Issue("SECURITY-380") @Test public void testGetItems() throws Exception {
    FullControlOnceLoggedInAuthorizationStrategy strategy=new FullControlOnceLoggedInAuthorizationStrategy();
    strategy.setAllowAnonymousRead(true);
    Jenkins.getInstance().setAuthorizationStrategy(strategy);
    Jenkins.getInstance().setSecurityRealm(j.createDummySecurityRealm());
    j.createFreeStyleProject();
    ACL.impersonate(Jenkins.ANONYMOUS,new Runnable(){
      @Override public void run(){
        Assert.assertEquals("one item",1,Jenkins.getInstance().getItems().size());
      }
    }
);
  }
  @Issue("SECURITY-380") @Test public void testWithUnprotectedRootAction() throws Exception {
    FullControlOnceLoggedInAuthorizationStrategy strategy=new FullControlOnceLoggedInAuthorizationStrategy();
    strategy.setAllowAnonymousRead(false);
    Jenkins.getInstance().setAuthorizationStrategy(strategy);
    Jenkins.getInstance().setSecurityRealm(j.createDummySecurityRealm());
    j.createFreeStyleProject();
    JenkinsRule.WebClient wc=j.createWebClient();
    Page page=wc.goTo("listJobs","text/plain");
    Assert.assertEquals("expect 0 items","0",page.getWebResponse().getContentAsString().trim());
  }
@TestExtension public static class JobListingUnprotectedRootAction implements UnprotectedRootAction {
    @Override public String getIconFileName(){
      return null;
    }
    @Override public String getDisplayName(){
      return null;
    }
    @Override public String getUrlName(){
      return "listJobs";
    }
    public HttpResponse doIndex() throws Exception {
      return HttpResponses.plainText(Integer.toString(Jenkins.getInstance().getItems().size()));
    }
  }
}
