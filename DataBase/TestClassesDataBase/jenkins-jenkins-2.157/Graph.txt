private class Graph extends ArrayList<Edge> {
  Graph e(  String src,  String dst){
    add(new Edge(src,dst));
    return this;
  }
  Set<String> nodes(){
    Set<String> nodes=new LinkedHashSet<String>();
    for (    Edge e : this) {
      nodes.add(e.src);
      nodes.add(e.dst);
    }
    return nodes;
  }
  Set<String> edges(  String from){
    Set<String> edges=new LinkedHashSet<String>();
    for (    Edge e : this) {
      if (e.src.equals(from))       edges.add(e.dst);
    }
    return edges;
  }
  /** 
 * Performs a cycle check.
 */
  void check() throws Exception {
    new CyclicGraphDetector<String>(){
      protected Set<String> getEdges(      String s){
        return edges(s);
      }
    }
.run(nodes());
  }
  void mustContainCycle(  String... members) throws Exception {
    try {
      check();
      fail("Cycle expected");
    }
 catch (    CycleDetectedException e) {
      String msg="Expected cycle of " + Arrays.asList(members) + " but found "+ e.cycle;
      for (      String s : members)       assertTrue(msg,e.cycle.contains(s));
    }
  }
}
