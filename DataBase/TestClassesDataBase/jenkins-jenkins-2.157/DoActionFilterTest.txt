/** 
 * To check the previous behavior you can use: <pre> {@link org.kohsuke.stapler.MetaClass#LEGACY_WEB_METHOD_MODE} = true;</pre> It will disable the usage of  {@link DoActionFilter}
 */
@Issue("SECURITY-400") public class DoActionFilterTest extends StaplerAbstractTest {
@TestExtension public static class TestAccessModifierUrl extends AbstractUnprotectedRootAction {
    public TestAccessModifier getPublic(){
      return new TestAccessModifier();
    }
    protected TestAccessModifier getProtected(){
      return new TestAccessModifier();
    }
    TestAccessModifier getInternal(){
      return new TestAccessModifier();
    }
    private TestAccessModifier getPrivate(){
      return new TestAccessModifier();
    }
public class TestAccessModifier {
      @GET public String doValue(){
        return "hello";
      }
    }
  }
  @Test public void testProtectedMethodDispatch() throws Exception {
    try {
      wc.goTo("testAccessModifierUrl/public/value",null);
    }
 catch (    FailingHttpStatusCodeException e) {
      fail("should have access to a public method");
    }
    try {
      wc.goTo("testAccessModifierUrl/protected/value",null);
      fail("should not have allowed protected access");
    }
 catch (    FailingHttpStatusCodeException x) {
      assertEquals(HttpServletResponse.SC_NOT_FOUND,x.getStatusCode());
    }
    try {
      wc.goTo("testAccessModifierUrl/internal/value",null);
      fail("should not have allowed internal access");
    }
 catch (    FailingHttpStatusCodeException x) {
      assertEquals(HttpServletResponse.SC_NOT_FOUND,x.getStatusCode());
    }
    try {
      wc.goTo("testAccessModifierUrl/private/value",null);
      fail("should not have allowed private access");
    }
 catch (    FailingHttpStatusCodeException x) {
      assertEquals(HttpServletResponse.SC_NOT_FOUND,x.getStatusCode());
    }
  }
@TestExtension public static class TestNewRulesOk extends AbstractUnprotectedRootAction {
    public static void doStaticWithRequest(    StaplerRequest request){
      replyOk();
    }
    public void doWithRequest(    StaplerRequest request){
      replyOk();
    }
    public void doWithHttpRequest(    HttpServletRequest request){
      replyOk();
    }
    public String doWithRequestAndReturnString(    StaplerRequest request){
      return "ok";
    }
    public void doWithResponse(    StaplerResponse response){
      replyOk();
    }
    public void doWithHttpResponse(    HttpServletResponse response){
      replyOk();
    }
    public void doWithThrowHttpResponseException() throws HttpResponses.HttpResponseException {
      replyOk();
    }
    public void doWithThrowHttpResponseExceptionChild() throws HttpResponseExceptionChild {
      replyOk();
    }
    public void doWithThrowExceptionImplementingOnlyHttpResponse() throws ExceptionImplementingOnlyHttpResponse {
      replyOk();
    }
    public void doWithThrowOtherException() throws IOException {
      replyOk();
    }
    public HttpResponse doWithReturnHttpResponse(){
      return HttpResponses.plainText("ok");
    }
    public HttpResponseChild doWithReturnHttpResponseChild(){
      return new HttpResponseChild();
    }
    @WebMethod(name="webMethodUrl") public void doWebMethod(){
      replyOk();
    }
    @WebMethod(name="webMethodUrl2") public void webMethod(){
      replyOk();
    }
    @GET public void doAnnotatedGet(){
      replyOk();
    }
    @POST public void doAnnotatedPost(){
      replyOk();
    }
    @PUT public void doAnnotatedPut(){
      replyOk();
    }
    @DELETE public void doAnnotatedDelete(){
      replyOk();
    }
    @RequirePOST public void doAnnotatedRequirePost(){
      replyOk();
    }
    @JavaScriptMethod public void annotatedJavascriptScriptMethod(){
      replyOk();
    }
    @RespondSuccess public void doAnnotatedResponseSuccess(){
      replyOk();
    }
    @JsonResponse public Map<String,Object> doAnnotatedJsonResponse(){
      return new HashMap<String,Object>(){
{
          put("a","b");
        }
      }
;
    }
    @LimitedTo("admin") public void doAnnotatedLimitedTo(){
      replyOk();
    }
    public void doAnnotatedParamQueryParameter(    @QueryParameter String value){
      replyOk();
    }
    public void doAnnotatedParamAncestorInPath(    @AncestorInPath DoActionFilterTest parent){
      replyOk();
    }
    public void doAnnotatedParamHeader(    @Header("test-header") String testHeader){
      replyOk();
    }
    public void doAnnotatedParamJsonBody(    @JsonBody Map<String,String> names){
      replyOk();
    }
    public void doAnnotatedParamSubmittedForm(    @SubmittedForm JSONObject form){
      replyOk();
    }
    public void do_CallMeBecauseOfMyUnderscore(    StaplerRequest request){
      replyOk();
    }
    public void do$CallMeBecauseOfMyDollar(    StaplerRequest request){
      replyOk();
    }
  }
public static class HttpResponseChild implements HttpResponse {
    @Override public void generateResponse(    StaplerRequest req,    StaplerResponse rsp,    Object node) throws IOException, ServletException {
      replyOk();
    }
  }
public static abstract class HttpResponseExceptionChild extends HttpResponses.HttpResponseException {
  }
public static class ExceptionImplementingOnlyHttpResponse extends RuntimeException implements HttpResponse {
    @Override public void generateResponse(    StaplerRequest staplerRequest,    StaplerResponse staplerResponse,    Object o) throws IOException, ServletException {
      replyOk();
    }
  }
  @Test public void testMethodSignatureOk_staticWithRequest() throws Exception {
    assertReachable("testNewRulesOk/staticWithRequest/");
  }
  @Test public void testMethodSignatureOk_withRequest() throws Exception {
    assertReachable("testNewRulesOk/withRequest/");
  }
  @Test public void testMethodSignatureOk_withRequestAndReturnString() throws Exception {
    assertReachable("testNewRulesOk/withRequestAndReturnString/");
  }
  @Test public void testMethodSignatureOk_withHttpRequest() throws Exception {
    assertReachable("testNewRulesOk/withHttpRequest/");
  }
  @Test public void testMethodSignatureOk_withHttpResponse() throws Exception {
    assertReachable("testNewRulesOk/withHttpResponse/");
  }
  @Test public void testMethodSignatureOk_withResponse() throws Exception {
    assertReachable("testNewRulesOk/withResponse/");
  }
  @Test public void testMethodSignatureOk_withThrowHttpResponseException() throws Exception {
    assertReachable("testNewRulesOk/withThrowHttpResponseException/");
  }
  @Test public void testMethodSignatureOk_withThrowHttpResponseExceptionChild() throws Exception {
    assertReachable("testNewRulesOk/withThrowHttpResponseExceptionChild/");
  }
  @Test public void testMethodSignatureOk_withThrowExceptionImplementingOnlyHttpResponse() throws Exception {
    assertReachable("testNewRulesOk/withThrowExceptionImplementingOnlyHttpResponse/");
  }
  @Test public void testMethodSignatureOk_withThrowOtherException() throws Exception {
    assertNotReachable("testNewRulesOk/withThrowOtherException/");
  }
  @Test public void testMethodSignatureOk_withReturnHttpResponse() throws Exception {
    assertReachable("testNewRulesOk/withReturnHttpResponse/");
  }
  @Test public void testMethodSignatureOk_withReturnHttpResponseChild() throws Exception {
    assertReachable("testNewRulesOk/withReturnHttpResponseChild/");
  }
  @Test public void testAnnotatedMethodOk_webMethodUrl() throws Exception {
    assertReachable("testNewRulesOk/webMethodUrl/");
  }
  @Test public void testAnnotatedMethodOk_webMethodUrl2() throws Exception {
    assertReachable("testNewRulesOk/webMethodUrl2/");
  }
  @Test public void testAnnotatedMethodOk_annotatedGet() throws Exception {
    assertReachable("testNewRulesOk/annotatedGet/");
  }
  @Test public void testAnnotatedMethodOk_annotatedPost() throws Exception {
    WebRequest settings=new WebRequest(new URL(j.getURL(),"testNewRulesOk/annotatedPost/"));
    settings.setHttpMethod(HttpMethod.POST);
    settings.setRequestBody("");
    assertReachableWithSettings(settings);
  }
  @Test public void testAnnotatedMethodOk_annotatedPut() throws Exception {
    WebRequest settings=new WebRequest(new URL(j.getURL(),"testNewRulesOk/annotatedPut/"));
    settings.setHttpMethod(HttpMethod.PUT);
    settings.setRequestBody("");
    assertReachableWithSettings(settings);
  }
  @Test public void testAnnotatedMethodOk_annotatedDelete() throws Exception {
    assertReachable("testNewRulesOk/annotatedDelete/",HttpMethod.DELETE);
  }
  @Test public void testAnnotatedMethodOk_annotatedRequirePost() throws Exception {
    WebRequest settings=new WebRequest(new URL(j.getURL(),"testNewRulesOk/annotatedRequirePost/"));
    settings.setHttpMethod(HttpMethod.POST);
    settings.setRequestBody("");
    assertReachableWithSettings(settings);
  }
  @Test public void testAnnotatedMethodOk_annotatedJavascriptScriptMethod() throws Exception {
    webApp.setCrumbIssuer(new CrumbIssuer(){
      @Override public String issueCrumb(      StaplerRequest request){
        return "test";
      }
      @Override public void validateCrumb(      StaplerRequest request,      String submittedCrumb){
      }
    }
);
    WebRequest settings=new WebRequest(new URL(j.getURL(),"testNewRulesOk/annotatedJavascriptScriptMethod/"));
    settings.setAdditionalHeader("Content-Type","application/x-stapler-method-invocation");
    settings.setHttpMethod(HttpMethod.POST);
    settings.setRequestBody(JSONArray.fromObject(Arrays.asList()).toString());
    assertReachableWithSettings(settings);
  }
  @Test public void testAnnotatedMethodOk_annotatedResponseSuccess() throws Exception {
    assertReachable("testNewRulesOk/annotatedResponseSuccess/");
  }
  @Test public void testAnnotatedMethodOk_annotatedJsonResponse() throws Exception {
    WebRequest settings=new WebRequest(new URL(j.getURL(),"testNewRulesOk/annotatedJsonResponse/"));
    settings.setHttpMethod(HttpMethod.POST);
    settings.setRequestBody(JSONObject.fromObject(Collections.emptyMap()).toString());
    Page page=wc.getPage(settings);
    assertEquals(200,page.getWebResponse().getStatusCode());
  }
  @Test public void testAnnotatedMethodOk_annotatedLimitedTo() throws Exception {
    try {
      wc.getPage(new URL(j.getURL(),"testNewRulesOk/annotatedLimitedTo/"));
      fail();
    }
 catch (    FailingHttpStatusCodeException e) {
      assertEquals(500,e.getStatusCode());
      assertTrue(e.getResponse().getContentAsString().contains("Needs to be in role"));
    }
  }
  @Test public void testAnnotatedParameterOk_annotatedParamQueryParameter() throws Exception {
    assertReachable("testNewRulesOk/annotatedParamQueryParameter/");
    assertReachable("testNewRulesOk/annotatedParamQueryParameter/?value=test");
  }
  @Test public void testAnnotatedParameterOk_annotatedParamAncestorInPath() throws Exception {
    assertReachable("testNewRulesOk/annotatedParamAncestorInPath/");
  }
  @Test public void testAnnotatedParameterOk_annotatedParamHeader() throws Exception {
    WebRequest settings=new WebRequest(new URL(j.getURL(),"testNewRulesOk/annotatedParamHeader/"));
    settings.setAdditionalHeader("test-header","TestBrowser");
    assertReachableWithSettings(settings);
  }
  @Test public void testAnnotatedParameterOk_annotatedParamJsonBody() throws Exception {
    WebRequest settings=new WebRequest(new URL(j.getURL(),"testNewRulesOk/annotatedParamJsonBody/"));
    settings.setHttpMethod(HttpMethod.POST);
    settings.setAdditionalHeader("Content-Type","application/json");
    settings.setRequestBody(JSONObject.fromObject(new HashMap<String,Object>(){
{
        put("name","Test");
      }
    }
).toString());
    assertReachableWithSettings(settings);
  }
  @Test public void testAnnotatedParameterOk_annotatedParamSubmittedForm() throws Exception {
    WebRequest settings=new WebRequest(new URL(j.getURL(),"testNewRulesOk/annotatedParamSubmittedForm/"));
    settings.setHttpMethod(HttpMethod.POST);
    settings.setRequestParameters(Arrays.asList(new NameValuePair("json",JSONObject.fromObject(new HashMap<String,Object>(){
{
        put("name","Test");
      }
    }
).toString())));
    assertReachableWithSettings(settings);
  }
  @Test public void testOk__CallMeBecauseOfMyUnderscore() throws Exception {
    assertReachable("testNewRulesOk/_CallMeBecauseOfMyUnderscore/");
  }
  @Test public void testOk_$CallMeBecauseOfMyDollar() throws Exception {
    assertReachable("testNewRulesOk/$CallMeBecauseOfMyDollar/");
  }
@TestExtension public static class TestNewRulesOkDynamic extends AbstractUnprotectedRootAction {
    public void doDynamic(){
      replyOk();
    }
  }
@TestExtension public static class TestNewRulesOkIndex extends AbstractUnprotectedRootAction {
    @WebMethod(name="") public void methodWithoutNameEqualIndex(){
      replyOk();
    }
  }
@TestExtension public static class TestNewRulesOkDoIndex extends AbstractUnprotectedRootAction {
    public void doIndex(){
      replyOk();
    }
  }
  @Test public void testSpecialCasesOk() throws Exception {
    assertReachable("testNewRulesOkDynamic/anyString/");
    assertReachable("testNewRulesOkIndex/");
    assertReachable("testNewRulesOkDoIndex/");
  }
@TestExtension public static class TestNewRulesNotOk extends AbstractUnprotectedRootAction {
    public void dontCallMeBecauseOfMyDont(    StaplerRequest request){
      replyOk();
    }
    public void doSomething(){
      replyOk();
    }
    public String doReturnString(){
      return "ok";
    }
    public Object doReturnObject(){
      return "ok";
    }
  }
  @Test public void testNotOk_ntCallMeBecauseOfMyDont() throws Exception {
    assertNotReachable("testNewRulesNotOk/ntCallMeBecauseOfMyDont/");
    assertDoActionRequestWasBlockedAndResetFlag();
  }
  @Test public void testNotOk_something() throws Exception {
    assertNotReachable("testNewRulesNotOk/something/");
    assertDoActionRequestWasBlockedAndResetFlag();
  }
  @Test public void testNotOk_returnString() throws Exception {
    assertNotReachable("testNewRulesNotOk/returnString/");
    assertDoActionRequestWasBlockedAndResetFlag();
  }
  @Test public void testNotOk_returnObject() throws Exception {
    assertNotReachable("testNewRulesNotOk/returnObject/");
    assertDoActionRequestWasBlockedAndResetFlag();
  }
@TestExtension public static class TestNewRulesNotOkSpecialCases extends AbstractUnprotectedRootAction {
    public void doWithServletRequest(    ServletRequest request){
      replyOk();
    }
    public void doWithServletResponse(    ServletResponse response){
      replyOk();
    }
    public void doWithRequestImpl(    RequestImpl request){
      replyOk();
    }
    public void doWithResponseImpl(    ResponseImpl response){
      replyOk();
    }
    public void doWithRequestAndResponse(    RequestAndResponse requestAndResponse){
      replyOk();
    }
    @CapturedParameterNames({"req"}) public void doAnnotatedResponseSuccess(    Object req){
      replyOk();
    }
  }
public static abstract class RequestAndResponse implements StaplerRequest, StaplerResponse {
    @Override public CollectionAndEnumeration getHeaderNames(){
      return null;
    }
    @Override public CollectionAndEnumeration getHeaders(    String name){
      return null;
    }
public static abstract class CollectionAndEnumeration implements Collection, Enumeration {
    }
  }
  @Test public void testNotOkSpecialCases_withServletRequest() throws Exception {
    assertNotReachable("testNewRulesNotOkSpecialCases/withServletRequest/");
    assertDoActionRequestWasBlockedAndResetFlag();
  }
  @Test public void testNotOkSpecialCases_withServletResponse() throws Exception {
    assertNotReachable("testNewRulesNotOkSpecialCases/withServletResponse/");
    assertDoActionRequestWasBlockedAndResetFlag();
  }
  @Test public void testNotOkSpecialCases_withRequestImpl() throws Exception {
    assertNotReachable("testNewRulesNotOkSpecialCases/withRequestImpl/");
    assertDoActionRequestWasBlockedAndResetFlag();
  }
  @Test public void testNotOkSpecialCases_withResponseImpl() throws Exception {
    assertNotReachable("testNewRulesNotOkSpecialCases/withResponseImpl/");
    assertDoActionRequestWasBlockedAndResetFlag();
  }
  @Test public void testNotOkSpecialCases_withRequestAndResponse() throws Exception {
    assertNotReachable("testNewRulesNotOkSpecialCases/withRequestAndResponse/");
    assertDoActionRequestWasBlockedAndResetFlag();
  }
  @Test public void testNotOkSpecialCases_annotatedResponseSuccess() throws Exception {
    assertNotReachable("testNewRulesNotOkSpecialCases/annotatedResponseSuccess/");
    assertDoActionRequestWasBlockedAndResetFlag();
  }
public static class A {
    public void doNotAnnotatedAtAll(){
      replyOk();
    }
    @WebMethod(name="onlyAnnotatedInA") public void doOnlyAnnotatedInA(){
      replyOk();
    }
    public void doOnlyAnnotatedInB(){
      replyOk();
    }
    @WebMethod(name="onlyAnnotatedInA-notOverrided") public void doOnlyAnnotatedInANotOverrided(){
      replyOk();
    }
    @WebMethod(name="annotatedButDifferent1") public void doAnnotatedButDifferent(){
      replyOk();
    }
  }
public static class B extends A {
    @Override public void doNotAnnotatedAtAll(){
      replyOk();
    }
    public void doOnlyAnnotatedInA(){
      replyOk();
    }
    @WebMethod(name="onlyAnnotatedInB") public void doOnlyAnnotatedInB(){
      replyOk();
    }
    @WebMethod(name="annotatedButDifferent2") public void doAnnotatedButDifferent(){
      replyOk();
    }
  }
@TestExtension public static class ABCase extends AbstractUnprotectedRootAction implements StaplerProxy {
    @Override public B getTarget(){
      return new B();
    }
  }
  @Test public void testClassInheritance_notAnnotatedAtAll() throws Exception {
    assertNotReachable("aBCase/notAnnotatedAtAll/");
    assertDoActionRequestWasBlockedAndResetFlag();
  }
  @Test public void testClassInheritance_onlyAnnotatedInA() throws Exception {
    assertReachable("aBCase/onlyAnnotatedInA/");
  }
  @Test public void testClassInheritance_onlyAnnotatedInB() throws Exception {
    assertReachable("aBCase/onlyAnnotatedInB/");
  }
  @Test public void testClassInheritance_onlyAnnotatedInANotOverrided() throws Exception {
    assertNotReachable("aBCase/onlyAnnotatedInANotOverrided/");
  }
  @Test public void testClassInheritance_annotatedButDifferent1() throws Exception {
    assertNotReachable("aBCase/annotatedButDifferent1/");
  }
  @Test public void testClassInheritance_annotatedButDifferent2() throws Exception {
    assertReachable("aBCase/annotatedButDifferent2/");
  }
public interface I {
    void doNotAnnotated();
    @WebMethod(name="annotatedBoth") void doAnnotatedBoth();
    @WebMethod(name="annotatedOnlyI") void doAnnotatedOnlyI();
    void doAnnotatedOnlyJ();
    @WebMethod(name="annotatedButDifferent1") void doAnnotatedButDifferent();
  }
public static class J implements I {
    @Override public void doNotAnnotated(){
      replyOk();
    }
    @Override @WebMethod(name="annotatedBoth") public void doAnnotatedBoth(){
      replyOk();
    }
    @Override public void doAnnotatedOnlyI(){
      replyOk();
    }
    @Override @WebMethod(name="annotatedOnlyJ") public void doAnnotatedOnlyJ(){
      replyOk();
    }
    @Override @WebMethod(name="annotatedButDifferent2") public void doAnnotatedButDifferent(){
      replyOk();
    }
  }
@TestExtension public static class IJCase extends AbstractUnprotectedRootAction implements StaplerProxy {
    @Override public J getTarget(){
      return new J();
    }
  }
  @Test public void testInterfaceImplementation_notAnnotated() throws Exception {
    assertNotReachable("iJCase/notAnnotated/");
    assertDoActionRequestWasBlockedAndResetFlag();
  }
  @Test public void testInterfaceImplementation_annotatedBoth() throws Exception {
    assertReachable("iJCase/annotatedBoth/");
  }
  @Test public void testInterfaceImplementation_annotatedOnlyI() throws Exception {
    assertReachable("iJCase/annotatedOnlyI/");
  }
  @Test public void testInterfaceImplementation_annotatedOnlyJ() throws Exception {
    assertReachable("iJCase/annotatedOnlyJ/");
  }
  @Test public void testInterfaceImplementation_annotatedButDifferent1() throws Exception {
    assertNotReachable("iJCase/annotatedButDifferent1/");
  }
  @Test public void testInterfaceImplementation_annotatedButDifferent2() throws Exception {
    assertReachable("iJCase/annotatedButDifferent2/");
  }
}
