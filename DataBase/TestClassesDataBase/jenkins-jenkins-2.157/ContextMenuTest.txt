@For(ContextMenu.class) public class ContextMenuTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Issue("JENKINS-19173") @Test public void contextMenuVisibility() throws Exception {
    final FreeStyleProject p=j.createFreeStyleProject("p");
    Callable<ContextMenu> doContextMenu=new Callable<ContextMenu>(){
      @Override public ContextMenu call() throws Exception {
        return p.doContextMenu(Stapler.getCurrentRequest(),Stapler.getCurrentResponse());
      }
    }
;
    ActionFactory f=j.jenkins.getExtensionList(TransientProjectActionFactory.class).get(ActionFactory.class);
    f.visible=true;
    ContextMenu menu=j.executeOnServer(doContextMenu);
    Map<String,String> parsed=parse(menu);
    assertEquals(parsed.toString(),"Hello",parsed.get("testing"));
    f.visible=false;
    menu=j.executeOnServer(doContextMenu);
    parsed=parse(menu);
    assertEquals(parsed.toString(),null,parsed.get("testing"));
  }
@TestExtension public static class ActionFactory extends TransientProjectActionFactory {
    boolean visible;
    @SuppressWarnings("rawtypes") @Override public Collection<? extends Action> createFor(    AbstractProject target){
      return Collections.singleton(new ContextMenuVisibility(){
        @Override public boolean isVisible(){
          return visible;
        }
        @Override public String getIconFileName(){
          return "whatever";
        }
        @Override public String getDisplayName(){
          return "Hello";
        }
        @Override public String getUrlName(){
          return "testing";
        }
      }
);
    }
  }
  private static Map<String,String> parse(  ContextMenu menu){
    Map<String,String> r=new TreeMap<String,String>();
    for (    MenuItem mi : menu.items) {
      r.put(mi.url.replaceFirst("^.*/(.)","$1"),mi.displayName);
    }
    return r;
  }
}
