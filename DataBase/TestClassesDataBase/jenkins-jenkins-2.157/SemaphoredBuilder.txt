public static class SemaphoredBuilder extends Builder {
  private static final String START_MESSAGE="job started, will try to acquire one permit";
  private transient Semaphore semaphore;
  private transient AtomicInteger atomicInteger;
  SemaphoredBuilder(  Semaphore semaphore,  AtomicInteger atomicInteger){
    this.semaphore=semaphore;
    this.atomicInteger=atomicInteger;
  }
  @Override public boolean perform(  AbstractBuild<?,?> build,  Launcher launcher,  BuildListener listener) throws InterruptedException, IOException {
    try {
      listener.getLogger().println(START_MESSAGE);
      boolean result=semaphore.tryAcquire(20,TimeUnit.SECONDS);
      if (result) {
        listener.getLogger().println("permit acquired");
        atomicInteger.set(1);
        return true;
      }
 else {
        atomicInteger.set(2);
        return false;
      }
    }
 catch (    InterruptedException e) {
      atomicInteger.set(3);
      return false;
    }
  }
@TestExtension public static class DescriptorImpl extends Descriptor<Builder> {
  }
}
