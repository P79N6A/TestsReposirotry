/** 
 * Roughly analogous to  {@code org.jenkinsci.plugins.compress_artifacts.ZipStorage}. 
 */
private static final class Ram extends VirtualFile {
  private final Set<String> paths;
  private final String path;
  Ram(  Set<String> paths,  String path){
    this.paths=paths;
    this.path=path;
  }
  @Override public String getName(){
    return path.replaceFirst(".*/","");
  }
  @Override public URI toURI(){
    return URI.create("ram:" + path);
  }
  @Override public VirtualFile getParent(){
    return new Ram(paths,path.replaceFirst("/[^/]+$",""));
  }
  @Override public boolean isDirectory() throws IOException {
    return paths.stream().anyMatch(p -> p.startsWith(path + "/"));
  }
  @Override public boolean isFile() throws IOException {
    return paths.contains(path);
  }
  @Override public boolean exists() throws IOException {
    return isFile() || isDirectory();
  }
  @Override public VirtualFile[] list() throws IOException {
    return paths.stream().filter(p -> p.startsWith(path + "/")).map(p -> new Ram(paths,p.replaceFirst("(\\Q" + path + "\\E/[^/]+)/.+","$1"))).toArray(VirtualFile[]::new);
  }
  @Override public VirtualFile child(  String name){
    return new Ram(paths,path + "/" + name);
  }
  @Override public long length() throws IOException {
    return 0;
  }
  @Override public long lastModified() throws IOException {
    return 0;
  }
  @Override public boolean canRead() throws IOException {
    return isFile();
  }
  @Override public InputStream open() throws IOException {
    return new NullInputStream(0);
  }
}
