/** 
 * @author pjanouse
 */
public class AddJobToViewCommandTest extends ViewManipulationTestBase {
  @Override public CLICommandInvoker getCommand(){
    return new CLICommandInvoker(j,"add-job-to-view");
  }
  @Test public void addJobShouldSucceed() throws Exception {
    j.jenkins.addView(new ListView("aView"));
    FreeStyleProject project=j.createFreeStyleProject("aProject");
    assertThat(j.jenkins.getView("aView").getAllItems().size(),equalTo(0));
    assertThat(j.jenkins.getView("aView").contains(project),equalTo(false));
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,View.READ,Job.READ,View.CONFIGURE).invokeWithArgs("aView","aProject");
    assertThat(result,succeededSilently());
    assertThat(j.jenkins.getView("aView").getAllItems().size(),equalTo(1));
    assertThat(j.jenkins.getView("aView").contains(project),equalTo(true));
  }
  @Test public void addJobShouldSucceedEvenAlreadyAdded() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("aProject");
    j.jenkins.addView(new ListView("aView"));
    ((DirectlyModifiableView)j.jenkins.getView("aView")).add(project);
    assertThat(j.jenkins.getView("aView").getAllItems().size(),equalTo(1));
    assertThat(j.jenkins.getView("aView").contains(project),equalTo(true));
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,View.READ,Job.READ,View.CONFIGURE).invokeWithArgs("aView","aProject");
    assertThat(result,succeededSilently());
    assertThat(j.jenkins.getView("aView").getAllItems().size(),equalTo(1));
    assertThat(j.jenkins.getView("aView").contains(project),equalTo(true));
  }
  @Test public void addJobManyShouldSucceed() throws Exception {
    j.jenkins.addView(new ListView("aView"));
    FreeStyleProject project1=j.createFreeStyleProject("aProject1");
    FreeStyleProject project2=j.createFreeStyleProject("aProject2");
    assertThat(j.jenkins.getView("aView").getAllItems().size(),equalTo(0));
    assertThat(j.jenkins.getView("aView").contains(project1),equalTo(false));
    assertThat(j.jenkins.getView("aView").contains(project2),equalTo(false));
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,View.READ,Job.READ,View.CONFIGURE).invokeWithArgs("aView","aProject1","aProject2");
    assertThat(result,succeededSilently());
    assertThat(j.jenkins.getView("aView").getAllItems().size(),equalTo(2));
    assertThat(j.jenkins.getView("aView").contains(project1),equalTo(true));
    assertThat(j.jenkins.getView("aView").contains(project2),equalTo(true));
  }
  @Test public void addJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {
    j.jenkins.addView(new ListView("aView"));
    FreeStyleProject project=j.createFreeStyleProject("aProject");
    assertThat(j.jenkins.getView("aView").getAllItems().size(),equalTo(0));
    assertThat(j.jenkins.getView("aView").contains(project),equalTo(false));
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,View.READ,Job.READ,View.CONFIGURE).invokeWithArgs("aView","aProject","aProject");
    assertThat(result,succeededSilently());
    assertThat(j.jenkins.getView("aView").getAllItems().size(),equalTo(1));
    assertThat(j.jenkins.getView("aView").contains(project),equalTo(true));
  }
}
