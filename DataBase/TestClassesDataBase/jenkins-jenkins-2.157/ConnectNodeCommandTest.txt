public class ConnectNodeCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,"connect-node");
  }
  @Test public void connectNodeShouldFailWithoutComputerConnectPermission() throws Exception {
    j.createSlave("aNode","",null);
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invokeWithArgs("aNode");
    assertThat(result,failedWith(6));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: user is missing the Agent/Connect permission"));
    assertThat(result.stderr(),not(containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT)));
  }
  @Test public void connectNodeShouldFailIfNodeDoesNotExist() throws Exception {
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.CONNECT,Jenkins.READ).invokeWithArgs("never_created");
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: No such agent \"never_created\" exists."));
    assertThat(result.stderr(),not(containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT)));
  }
  @Test public void connectNodeShouldSucceed() throws Exception {
    DumbSlave slave=j.createSlave("aNode","",null);
    CLICommandInvoker.Result result=command.authorizedTo(Computer.CONNECT,Jenkins.READ).invokeWithArgs("aNode");
    assertThat(result,succeededSilently());
    assertThat(slave.toComputer().isOnline(),equalTo(true));
    result=command.authorizedTo(Computer.CONNECT,Jenkins.READ).invokeWithArgs("aNode");
    assertThat(result,succeededSilently());
    assertThat(slave.toComputer().isOnline(),equalTo(true));
    slave.toComputer().disconnect();
    slave.toComputer().waitUntilOffline();
    assertThat(slave.toComputer().isOnline(),equalTo(false));
    assertThat(slave.toComputer().isOffline(),equalTo(true));
    result=command.authorizedTo(Computer.CONNECT,Jenkins.READ).invokeWithArgs("aNode");
    assertThat(result,succeededSilently());
    assertThat(slave.toComputer().isOnline(),equalTo(true));
  }
  @Test public void connectNodeShouldSucceedWithForce() throws Exception {
    DumbSlave slave=j.createSlave("aNode","",null);
    slave.toComputer().connect(false).get();
    CLICommandInvoker.Result result=command.authorizedTo(Computer.CONNECT,Jenkins.READ).invokeWithArgs("-f","aNode");
    assertThat(slave.toComputer().getLog(),result,succeededSilently());
    assertThat(slave.toComputer().getLog(),slave.toComputer().isOnline(),equalTo(true));
    result=command.authorizedTo(Computer.CONNECT,Jenkins.READ).invokeWithArgs("-f","aNode");
    assertThat(result,succeededSilently());
    assertThat(slave.toComputer().isOnline(),equalTo(true));
    slave.toComputer().disconnect();
    slave.toComputer().waitUntilOffline();
    assertThat(slave.toComputer().isOnline(),equalTo(false));
    assertThat(slave.toComputer().isOffline(),equalTo(true));
    result=command.authorizedTo(Computer.CONNECT,Jenkins.READ).invokeWithArgs("-f","aNode");
    assertThat(result,succeededSilently());
    assertThat(slave.toComputer().isOnline(),equalTo(true));
  }
  @Test public void connectNodeManyShouldSucceed() throws Exception {
    DumbSlave slave1=j.createSlave("aNode1","",null);
    DumbSlave slave2=j.createSlave("aNode2","",null);
    DumbSlave slave3=j.createSlave("aNode3","",null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.CONNECT,Jenkins.READ).invokeWithArgs("aNode1","aNode2","aNode3");
    assertThat(result,succeededSilently());
    assertThat(slave1.toComputer().isOnline(),equalTo(true));
    assertThat(slave2.toComputer().isOnline(),equalTo(true));
    assertThat(slave3.toComputer().isOnline(),equalTo(true));
  }
  @Test public void connectNodeManyShouldFailIfANodeDoesNotExist() throws Exception {
    DumbSlave slave1=j.createSlave("aNode1","",null);
    DumbSlave slave2=j.createSlave("aNode2","",null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.CONNECT,Jenkins.READ).invokeWithArgs("aNode1","aNode2","never_created");
    assertThat(result,failedWith(5));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("never_created: No such agent \"never_created\" exists. Did you mean \"aNode1\"?"));
    assertThat(result.stderr(),containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));
    assertThat(slave1.toComputer().isOnline(),equalTo(true));
    assertThat(slave2.toComputer().isOnline(),equalTo(true));
  }
  @Test public void connectNodeManyShouldSucceedEvenANodeIsSpecifiedTwice() throws Exception {
    DumbSlave slave1=j.createSlave("aNode1","",null);
    DumbSlave slave2=j.createSlave("aNode2","",null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.CONNECT,Jenkins.READ).invokeWithArgs("aNode1","aNode2","aNode1");
    assertThat(result,succeededSilently());
    assertThat(slave1.toComputer().isOnline(),equalTo(true));
    assertThat(slave2.toComputer().isOnline(),equalTo(true));
  }
  @Test public void connectNodeShouldSucceedOnMaster() throws Exception {
    final Computer masterComputer=j.jenkins.getActiveInstance().getComputer("");
    CLICommandInvoker.Result result=command.authorizedTo(Computer.CONNECT,Jenkins.READ).invokeWithArgs("");
    assertThat(result,succeededSilently());
    assertThat(masterComputer.isOnline(),equalTo(true));
    result=command.authorizedTo(Computer.CONNECT,Jenkins.READ).invokeWithArgs("");
    assertThat(result,succeededSilently());
    assertThat(masterComputer.isOnline(),equalTo(true));
  }
}
