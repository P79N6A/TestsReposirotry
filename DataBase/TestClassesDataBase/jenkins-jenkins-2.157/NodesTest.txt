public class NodesTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @Test @Issue("JENKINS-50599") public void addNodeShouldFailAtomically() throws Exception {
    InvalidNode node=new InvalidNode("foo","temp",r.createComputerLauncher(null));
    try {
      r.jenkins.addNode(node);
      fail("Adding the node should have thrown an exception during serialization");
    }
 catch (    IOException e) {
      String className=InvalidNode.class.getName();
      assertThat("The exception should be from failing to serialize the node",e.getMessage(),containsString("Failed to serialize " + className + "#cl for class "+ className));
    }
    assertThat("The node should not exist since #addNode threw an exception",r.jenkins.getNode("foo"),nullValue());
  }
  @Test @Issue("JENKINS-50599") public void addNodeShouldFailAtomicallyWhenReplacingNode() throws Exception {
    Node oldNode=r.createSlave("foo","",null);
    r.jenkins.addNode(oldNode);
    InvalidNode newNode=new InvalidNode("foo","temp",r.createComputerLauncher(null));
    try {
      r.jenkins.addNode(newNode);
      fail("Adding the node should have thrown an exception during serialization");
    }
 catch (    IOException e) {
      String className=InvalidNode.class.getName();
      assertThat("The exception should be from failing to serialize the node",e.getMessage(),containsString("Failed to serialize " + className + "#cl for class "+ className));
    }
    assertThat("The old node should still exist since #addNode threw an exception",r.jenkins.getNode("foo"),sameInstance(oldNode));
  }
  @Test public void addNodeShouldReplaceExistingNode() throws Exception {
    Node oldNode=r.createSlave("foo","",null);
    r.jenkins.addNode(oldNode);
    Node newNode=r.createSlave("foo","",null);
    r.jenkins.addNode(newNode);
    assertThat(r.jenkins.getNode("foo"),sameInstance(newNode));
  }
private static class InvalidNode extends Slave {
    private ClassLoader cl=InvalidNode.class.getClassLoader();
    public InvalidNode(    String name,    String remoteFS,    ComputerLauncher launcher) throws Descriptor.FormException, IOException {
      super(name,remoteFS,launcher);
    }
  }
}
