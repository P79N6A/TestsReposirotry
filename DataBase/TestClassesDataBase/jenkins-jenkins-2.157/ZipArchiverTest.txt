public class ZipArchiverTest {
  private static final Logger LOGGER=Logger.getLogger(ZipArchiverTest.class.getName());
  private File tmpDir;
  @Before public void setUp(){
    try {
      tmpDir=File.createTempFile("temp",".dir");
      tmpDir.delete();
      tmpDir.mkdir();
    }
 catch (    IOException e) {
      fail("unable to create temp directory",e);
    }
  }
  @After public void tearDown(){
    deleteDir(tmpDir);
  }
  @Issue("JENKINS-9942") @Test public void backwardsSlashesOnWindows(){
    File tmpFile=null;
    try {
      File baz=new File(new File(new File(tmpDir,"foo"),"bar"),"baz");
      baz.mkdirs();
      tmpFile=new File(baz,"Test.txt");
      tmpFile.createNewFile();
    }
 catch (    IOException e) {
      fail("unable to prepare source directory for zipping",e);
    }
    File zipFile=null;
    ZipArchiver archiver=null;
    try {
      zipFile=File.createTempFile("test",".zip");
      archiver=new ZipArchiver(Files.newOutputStream(zipFile.toPath()));
      archiver.visit(tmpFile,"foo\\bar\\baz\\Test.txt");
    }
 catch (    Exception e) {
      fail("exception driving ZipArchiver",e);
    }
 finally {
      if (archiver != null) {
        try {
          archiver.close();
        }
 catch (        IOException e) {
        }
      }
    }
    String zipEntryName=null;
    ZipFile zipFileVerify=null;
    try {
      zipFileVerify=new ZipFile(zipFile);
      zipEntryName=((ZipEntry)zipFileVerify.entries().nextElement()).getName();
    }
 catch (    Exception e) {
      fail("failure enumerating zip entries",e);
    }
 finally {
      if (zipFileVerify != null) {
        try {
          zipFileVerify.close();
        }
 catch (        IOException e) {
        }
      }
    }
    assertEquals("foo/bar/baz/Test.txt",zipEntryName);
  }
  @Test public void huge64bitFile(){
    File hugeFile=new File(tmpDir,"huge64bitFileTest.txt");
    try {
      RandomAccessFile largeFile=new RandomAccessFile(hugeFile,"rw");
      largeFile.setLength(4 * 1024 * 1024* 1024 + 2);
    }
 catch (    IOException e) {
      LOGGER.log(Level.SEVERE,"Couldn't set up huge file for huge64bitFile test",e);
      return;
    }
    File zipFile=null;
    ZipArchiver archiver=null;
    try {
      zipFile=File.createTempFile("test",".zip");
      archiver=new ZipArchiver(Files.newOutputStream(zipFile.toPath()));
      archiver.visit(hugeFile,"huge64bitFileTest.txt");
    }
 catch (    Exception e) {
      fail("exception driving ZipArchiver",e);
    }
 finally {
      if (archiver != null) {
        try {
          archiver.close();
        }
 catch (        IOException e) {
        }
      }
    }
    String zipEntryName=null;
    ZipFile zipFileVerify=null;
    try {
      zipFileVerify=new ZipFile(zipFile);
      zipEntryName=((ZipEntry)zipFileVerify.entries().nextElement()).getName();
    }
 catch (    Exception e) {
      fail("failure enumerating zip entries",e);
    }
 finally {
      if (zipFileVerify != null) {
        try {
          zipFileVerify.close();
        }
 catch (        IOException e) {
        }
      }
    }
    assertEquals("huge64bitFileTest.txt",zipEntryName);
  }
  /** 
 * Convenience method for failing with a cause.
 * @param msg the failure description
 * @param cause the root cause of the failure
 */
  private final void fail(  final String msg,  final Throwable cause){
    LOGGER.log(Level.SEVERE,msg,cause);
    Assert.fail(msg);
  }
  /** 
 * Recursively deletes a directory and all of its children.
 * @param f the File (ne√©, directory) to delete
 */
  private final void deleteDir(  final File f){
    for (    File c : f.listFiles()) {
      if (c.isDirectory()) {
        deleteDir(c);
      }
 else {
        c.delete();
      }
    }
    f.delete();
  }
}
