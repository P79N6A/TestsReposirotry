public class UpdateViewCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,new UpdateViewCommand());
  }
  @Test public void updateViewShouldFailWithoutViewConfigurePermission() throws Exception {
    j.jenkins.addView(new ListView("aView"));
    final CLICommandInvoker.Result result=command.authorizedTo(View.READ,Jenkins.READ).withStdin(this.getClass().getResourceAsStream("/hudson/cli/view.xml")).invokeWithArgs("aView");
    assertThat(result,failedWith(6));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: user is missing the View/Configure permission"));
  }
  /** 
 * This test shows that updating a view using an XML that will be converted by XStream via an alias will rightfully succeed.
 * @throws Exception
 */
  @Test public void updateViewWithRenamedClass() throws Exception {
    ListView tv=new ListView("tView");
    j.jenkins.addView(tv);
    j.jenkins.XSTREAM2.addCompatibilityAlias("org.acme.old.Foo",ListView.class);
    final CLICommandInvoker.Result result=command.authorizedTo(View.READ,View.CONFIGURE,Jenkins.READ).withStdin(this.getClass().getResourceAsStream("/hudson/cli/testview-foo.xml")).invokeWithArgs("tView");
    assertThat(result,succeededSilently());
  }
  @Test public void updateViewWithWrongViewTypeShouldFail() throws Exception {
    TreeView tv=new TreeView("aView");
    j.jenkins.addView(tv);
    final CLICommandInvoker.Result result=command.authorizedTo(View.READ,View.CONFIGURE,Jenkins.READ).withStdin(this.getClass().getResourceAsStream("/hudson/cli/view.xml")).invokeWithArgs("aView");
    assertThat(result,failedWith(1));
    assertThat(result.stderr(),containsString("Expecting view type: " + tv.getClass() + " but got: class hudson.model.ListView instead."));
  }
  @Test public void updateViewShouldModifyViewConfiguration() throws Exception {
    j.jenkins.addView(new ListView("aView"));
    final CLICommandInvoker.Result result=command.authorizedTo(View.READ,View.CONFIGURE,Jenkins.READ).withStdin(this.getClass().getResourceAsStream("/hudson/cli/view.xml")).invokeWithArgs("aView");
    assertThat(result,succeededSilently());
    assertThat("Update should not modify view name",j.jenkins.getView("ViewFromXML"),nullValue());
    final View updatedView=j.jenkins.getView("aView");
    assertThat(updatedView.getViewName(),equalTo("aView"));
    assertThat(updatedView.isFilterExecutors(),equalTo(true));
    assertThat(updatedView.isFilterQueue(),equalTo(false));
  }
  @Test public void updateViewShouldFailIfViewDoesNotExist(){
    final CLICommandInvoker.Result result=command.authorizedTo(View.READ,View.CONFIGURE,Jenkins.READ).withStdin(this.getClass().getResourceAsStream("/hudson/cli/view.xml")).invokeWithArgs("not_created");
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: No view named not_created inside view Jenkins"));
  }
}
