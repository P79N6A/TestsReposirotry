/** 
 * Test
 * @author <a href="mailto:tom.fennelly@gmail.com">tom.fennelly@gmail.com</a>
 */
public class InstallUtilTest {
  @Rule public JenkinsRule jenkinsRule=new JenkinsRule();
  @Before public void setup(){
    InstallUtil.getLastExecVersionFile().delete();
    Main.isUnitTest=false;
  }
  @After public void tearDown(){
    Main.isUnitTest=true;
  }
  /** 
 * Test jenkins startup sequences and the changes to the startup type..
 */
  @Test public void test_typeTransitions(){
    InstallUtil.getLastExecVersionFile().delete();
    InstallUtil.getConfigFile().delete();
    Assert.assertEquals(InstallState.INITIAL_SECURITY_SETUP,InstallUtil.getNextInstallState(InstallState.UNKNOWN));
    Assert.assertEquals(InstallState.NEW,InstallUtil.getNextInstallState(InstallState.INITIAL_SECURITY_SETUP));
    InstallUtil.saveLastExecVersion();
    Assert.assertEquals(InstallState.RESTART,InstallUtil.getNextInstallState(InstallState.UNKNOWN));
    InstallUtil.saveLastExecVersion("1.584");
    Assert.assertEquals(InstallState.UPGRADE,InstallUtil.getNextInstallState(InstallState.UNKNOWN));
    InstallUtil.saveLastExecVersion("1000.0");
    Assert.assertEquals(InstallState.DOWNGRADE,InstallUtil.getNextInstallState(InstallState.UNKNOWN));
  }
  /** 
 * Test jenkins startup sequences and the changes to the startup type..
 */
  @Test public void test_getLastExecVersion() throws Exception {
    Main.isUnitTest=true;
    InstallUtil.getConfigFile().delete();
    Assert.assertEquals("1.0",InstallUtil.getLastExecVersion());
    setStoredVersion("9.123");
    Assert.assertEquals("9.123",InstallUtil.getLastExecVersion());
  }
  private void setStoredVersion(  String version) throws Exception {
    Jenkins.VERSION=version;
    jenkinsRule.jenkins.save();
    Assert.assertEquals(version,Jenkins.getStoredVersion().toString());
  }
  /** 
 * Validate proper statuses are persisted and install status is cleared when invoking appropriate methods on  {@link InstallUtil}
 */
  @Test public void testSaveAndRestoreInstallingPlugins() throws Exception {
    final List<UpdateCenterJob> updates=new ArrayList<>();
    final Map<String,String> nameMap=new HashMap<>();
    new UpdateCenter(){
{
        new UpdateSite("foo","http://omg.org"){
{
            for (            String name : Arrays.asList("pending-plug:Pending","installing-plug:Installing","failure-plug:Failure","success-plug:Success")) {
              String statusType=name.split(":")[1];
              name=name.split(":")[0];
              InstallationStatus status;
              if ("Success".equals(statusType)) {
                status=Mockito.mock(Success.class);
              }
 else               if ("Failure".equals(statusType)) {
                status=Mockito.mock(Failure.class);
              }
 else               if ("Installing".equals(statusType)) {
                status=Mockito.mock(Installing.class);
              }
 else {
                status=Mockito.mock(Pending.class);
              }
              nameMap.put(statusType,status.getClass().getSimpleName());
              JSONObject json=new JSONObject();
              json.put("name",name);
              json.put("version","1.1");
              json.put("url","http://google.com");
              json.put("dependencies",new JSONArray());
              Plugin p=new Plugin(getId(),json);
              InstallationJob job=new InstallationJob(p,null,null,false);
              job.status=status;
              job.setCorrelationId(UUID.randomUUID());
              updates.add(job);
            }
          }
        }
;
      }
    }
;
    InstallUtil.persistInstallStatus(updates);
    Map<String,String> persisted=InstallUtil.getPersistedInstallStatus();
    Assert.assertEquals(nameMap.get("Pending"),persisted.get("pending-plug"));
    Assert.assertEquals("Pending",persisted.get("installing-plug"));
    Assert.assertEquals(nameMap.get("Failure"),persisted.get("failure-plug"));
    Assert.assertEquals(nameMap.get("Success"),persisted.get("success-plug"));
    InstallUtil.clearInstallStatus();
    persisted=InstallUtil.getPersistedInstallStatus();
    Assert.assertNull(persisted);
  }
}
