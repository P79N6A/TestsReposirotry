public class NodeCanTakeTaskTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @Issue({"JENKINS-6598","JENKINS-38514"}) @Test public void takeBlockedByProperty() throws Exception {
    r.jenkins.setNumExecutors(0);
    Slave slave=r.createSlave();
    FreeStyleProject project=r.createFreeStyleProject();
    Future<FreeStyleBuild> build=project.scheduleBuild2(0);
    r.assertBuildStatus(Result.SUCCESS,build.get(20,TimeUnit.SECONDS));
    slave.getNodeProperties().add(new RejectAllTasksProperty());
    build=project.scheduleBuild2(0);
    try {
      build.get(10,TimeUnit.SECONDS);
      fail("Expected timeout exception");
    }
 catch (    TimeoutException e) {
      List<BuildableItem> buildables=r.jenkins.getQueue().getBuildableItems();
      assertNotNull(buildables);
      assertEquals(1,buildables.size());
      BuildableItem item=buildables.get(0);
      assertEquals(project,item.task);
      assertNotNull(item.getCauseOfBlockage());
      assertEquals("rejecting everything",item.getCauseOfBlockage().getShortDescription());
    }
  }
private static class RejectAllTasksProperty extends NodeProperty<Node> {
    @Override public CauseOfBlockage canTake(    BuildableItem item){
      return new CauseOfBlockage(){
        @Override public String getShortDescription(){
          return "rejecting everything";
        }
      }
;
    }
  }
  @Test public void becauseNodeIsBusy() throws Exception {
    Slave slave=r.createSlave();
    FreeStyleProject project=r.createFreeStyleProject();
    project.setAssignedNode(slave);
    project.setConcurrentBuild(true);
    project.getBuildersList().add(new SleepBuilder(Long.MAX_VALUE));
    project.scheduleBuild2(0).waitForStart();
    project.scheduleBuild2(0);
    Queue.Item item;
    while ((item=r.jenkins.getQueue().getItem(project)) == null || !item.isBuildable()) {
      Thread.sleep(100);
    }
    assertEquals(hudson.model.Messages.Queue_WaitingForNextAvailableExecutorOn(slave.getDisplayName()),item.getWhy());
  }
}
