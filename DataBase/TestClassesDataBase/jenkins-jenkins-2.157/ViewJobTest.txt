public class ViewJobTest {
  @Rule public JenkinsRule rule=new JenkinsRule();
  @Issue("JENKINS-19377") @Test public void removeRun() throws Exception {
    J j=rule.jenkins.createProject(J.class,"j");
    R r1=j.nue();
    R r2=j.nue();
    assertEquals("[2, 1]",j.getBuildsAsMap().keySet().toString());
    j.removeRun(r1);
    assertEquals("[2]",j.getBuildsAsMap().keySet().toString());
  }
@SuppressWarnings({"rawtypes","unchecked","deprecation"}) public static final class J extends ViewJob<J,R> implements TopLevelItem {
    public J(    ItemGroup parent,    String name){
      super(parent,name);
    }
    @Override protected void reload(){
      runs.load(this,new RunMap.Constructor<R>(){
        @Override public R create(        File d) throws IOException {
          return new R(J.this,d);
        }
      }
);
    }
    @Override public TopLevelItemDescriptor getDescriptor(){
      return Jenkins.getInstance().getDescriptorByType(DescriptorImpl.class);
    }
@TestExtension public static final class DescriptorImpl extends TopLevelItemDescriptor {
      @Override public TopLevelItem newInstance(      ItemGroup parent,      String name){
        return new J(parent,name);
      }
    }
    R nue() throws IOException {
      R r=new R(this);
      _getRuns();
      runs.put(r);
      return r;
    }
  }
public static final class R extends Run<J,R> {
    public R(    J j) throws IOException {
      super(j);
    }
    public R(    J j,    File d) throws IOException {
      super(j,d);
    }
  }
}
