public static class WrapperWithLogger extends SimpleBuildWrapper {
  @Override public void setUp(  Context context,  Run<?,?> build,  FilePath workspace,  Launcher launcher,  TaskListener listener,  EnvVars initialEnvironment) throws IOException, InterruptedException {
  }
  @Override public ConsoleLogFilter createLoggerDecorator(  Run<?,?> build){
    return new UpcaseFilter();
  }
private static class UpcaseFilter extends ConsoleLogFilter implements Serializable {
    private static final long serialVersionUID=1;
    @SuppressWarnings("rawtypes") @Override public OutputStream decorateLogger(    AbstractBuild _ignore,    final OutputStream logger) throws IOException, InterruptedException {
      return new LineTransformationOutputStream(){
        @Override protected void eol(        byte[] b,        int len) throws IOException {
          logger.write(new String(b,0,len).toUpperCase(Locale.ROOT).getBytes());
        }
      }
;
    }
  }
@TestExtension("loggerDecorator") public static class DescriptorImpl extends BuildWrapperDescriptor {
    @Override public boolean isApplicable(    AbstractProject<?,?> item){
      return true;
    }
  }
}
