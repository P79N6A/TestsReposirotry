public class CloudTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test @WithoutJenkins @Issue("JENKINS-37616") public void provisionPermissionShouldBeIndependentFromAdminister() throws Exception {
    SidACL acl=new SidACL(){
      @Override protected Boolean hasPermission(      Sid p,      Permission permission){
        return permission == Cloud.PROVISION;
      }
    }
;
    assertTrue(acl.hasPermission(Jenkins.ANONYMOUS,Cloud.PROVISION));
    assertFalse(acl.hasPermission(Jenkins.ANONYMOUS,Jenkins.ADMINISTER));
    assertEquals(Cloud.PROVISION,Computer.PERMISSIONS.find("Provision"));
  }
  @Test @Issue("JENKINS-37616") public void ensureProvisionPermissionIsLoadable() throws Exception {
    Permission p=Permission.fromId("hudson.model.Computer.Provision");
    assertEquals("Provision",p.name);
  }
  @Test public void ui() throws Exception {
    ACloud aCloud=new ACloud("a","0");
    j.jenkins.clouds.add(aCloud);
    assertThat(aCloud.getAllActions(),containsInAnyOrder(instanceOf(TaskCloudAction.class),instanceOf(ReportingCloudAction.class)));
    HtmlPage page=j.createWebClient().goTo(aCloud.getUrl());
    String out=page.getWebResponse().getContentAsString();
    assertThat(out,containsString("Cloud a"));
    assertThat(out,containsString("Top cloud view."));
    assertThat(out,containsString("custom cloud main groovy"));
    assertThat(out,containsString("Task Action"));
    assertThat(out,containsString("Sidepanel action box."));
    assertThat(out,containsString("Report Here"));
    HtmlPage actionPage=page.getAnchorByText("Task Action").click();
    out=actionPage.getWebResponse().getContentAsString();
    assertThat(out,containsString("doIndex called"));
  }
public static final class ACloud extends AbstractCloudImpl {
    protected ACloud(    String name,    String instanceCapStr){
      super(name,instanceCapStr);
    }
    @Override public Collection<NodeProvisioner.PlannedNode> provision(    Label label,    int excessWorkload){
      return Collections.emptyList();
    }
    @Override public boolean canProvision(    Label label){
      return false;
    }
  }
@TestExtension public static final class CloudActionFactory extends TransientActionFactory<Cloud> {
    @Override public Class<Cloud> type(){
      return Cloud.class;
    }
    @Nonnull @Override public Collection<? extends Action> createFor(    @Nonnull Cloud target){
      return Arrays.asList(new TaskCloudAction(),new ReportingCloudAction());
    }
  }
@TestExtension public static final class TaskCloudAction implements Action {
    @Override public String getIconFileName(){
      return "notepad";
    }
    @Override public String getDisplayName(){
      return "Task Action";
    }
    @Override public String getUrlName(){
      return "task";
    }
    public void doIndex(    StaplerResponse rsp) throws IOException {
      rsp.getOutputStream().println("doIndex called");
    }
  }
@TestExtension public static final class ReportingCloudAction implements Action {
    @Override public String getIconFileName(){
      return null;
    }
    @Override public String getDisplayName(){
      return "Reporting Action";
    }
    @Override public String getUrlName(){
      return null;
    }
  }
}
