@RunWith(PowerMockRunner.class) @PrepareForTest({JenkinsLocationConfiguration.class,Stapler.class}) @PowerMockIgnore({"com.sun.org.apache.xerces.*","javax.xml.*","org.xml.*"}) public class JenkinsGetRootUrlTest {
  private Jenkins jenkins;
  private JenkinsLocationConfiguration config;
  @Before public void setUp(){
    jenkins=mock(Jenkins.class,Mockito.CALLS_REAL_METHODS);
    config=mock(JenkinsLocationConfiguration.class);
    mockStatic(JenkinsLocationConfiguration.class);
    when(JenkinsLocationConfiguration.get()).thenReturn(config);
    mockStatic(Stapler.class);
  }
  @Test public void getConfiguredRootUrl(){
    configured("http://configured.host");
    rootUrlIs("http://configured.host/");
  }
  @Test public void getAccessedRootUrl(){
    accessing("https://real.host/jenkins/");
    rootUrlIs("https://real.host/jenkins/");
  }
  @Test public void preferConfiguredOverAccessed(){
    configured("http://configured.host/");
    accessing("http://real.host/");
    rootUrlIs("http://configured.host/");
  }
  @Issue("JENKINS-16368") @Test public void doNotInheritProtocolWhenDispatchingRequest(){
    configured("http://configured.host/");
    accessing("https://real.host/");
    rootUrlIs("http://configured.host/");
  }
  @Issue("JENKINS-16511") @Test public void doNotInheritProtocolWhenDispatchingRequest2(){
    configured("https://ci/jenkins/");
    accessing("http://localhost:8080/");
    rootUrlIs("https://ci/jenkins/");
  }
  @Issue("JENKINS-10675") @Test public void useForwardedProtoWhenPresent(){
    configured("https://ci/jenkins/");
    accessing("http://ci/jenkins/");
    rootUrlFromRequestIs("http://ci/jenkins/");
    accessing("http://ci:8080/jenkins/");
    rootUrlFromRequestIs("http://ci:8080/jenkins/");
    accessing("https://ci/jenkins/");
    withHeader("X-Forwarded-Proto","https");
    rootUrlFromRequestIs("https://ci/jenkins/");
    accessing("http://ci/jenkins/");
    withHeader("X-Forwarded-Proto","http");
    rootUrlFromRequestIs("http://ci/jenkins/");
    accessing("http://ci/jenkins/");
    withHeader("X-Forwarded-Port","443");
    withHeader("X-Forwarded-Proto","https");
    rootUrlFromRequestIs("https://ci/jenkins/");
  }
  private void rootUrlFromRequestIs(  final String expectedRootUrl){
    assertThat(jenkins.getRootUrlFromRequest(),equalTo(expectedRootUrl));
  }
  private void rootUrlIs(  final String expectedRootUrl){
    assertThat(jenkins.getRootUrl(),equalTo(expectedRootUrl));
  }
  private void configured(  final String configuredHost){
    when(config.getUrl()).thenReturn(configuredHost);
  }
  private void withHeader(  String name,  final String value){
    final StaplerRequest req=Stapler.getCurrentRequest();
    when(req.getHeader(name)).thenReturn(value);
  }
  private void accessing(  final String realUrl){
    final URL url=getUrl(realUrl);
    final StaplerRequest req=mock(StaplerRequest.class);
    when(req.getScheme()).thenReturn(url.getProtocol());
    when(req.getServerName()).thenReturn(url.getHost());
    when(req.getServerPort()).thenReturn(url.getPort() == -1 ? ("https".equals(url.getProtocol()) ? 443 : 80) : url.getPort());
    when(req.getContextPath()).thenReturn(url.getPath().replaceAll("/$",""));
    when(req.getIntHeader(anyString())).thenAnswer(new Answer<Integer>(){
      @Override public Integer answer(      InvocationOnMock invocation) throws Throwable {
        String name=(String)invocation.getArguments()[0];
        String value=((StaplerRequest)invocation.getMock()).getHeader(name);
        return value != null ? Integer.parseInt(value) : -1;
      }
    }
);
    when(Stapler.getCurrentRequest()).thenReturn(req);
  }
  private URL getUrl(  final String realUrl){
    try {
      return new URL(realUrl);
    }
 catch (    Exception ex) {
      throw new RuntimeException(ex);
    }
  }
}
