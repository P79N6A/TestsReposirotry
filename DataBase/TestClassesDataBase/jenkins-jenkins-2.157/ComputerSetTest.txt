/** 
 * @author Kohsuke Kawaguchi
 */
public class ComputerSetTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test @Issue("JENKINS-2821") public void pageRendering() throws Exception {
    WebClient client=j.createWebClient();
    j.createSlave();
    client.goTo("computer");
  }
  /** 
 * Tests the basic UI behavior of the node monitoring
 */
  @Test public void configuration() throws Exception {
    WebClient client=j.createWebClient();
    HtmlForm form=client.goTo("computer/configure").getFormByName("config");
    j.submit(form);
  }
  @Test public void nodeOfflineCli() throws Exception {
    DumbSlave s=j.createSlave();
    assertThat(new CLICommandInvoker(j,"wait-node-offline").invokeWithArgs("xxx"),CLICommandInvoker.Matcher.failedWith(3));
    assertThat(new CLICommandInvoker(j,"wait-node-online").invokeWithArgs(s.getNodeName()),CLICommandInvoker.Matcher.succeededSilently());
    s.toComputer().disconnect(null).get();
    assertThat(new CLICommandInvoker(j,"wait-node-offline").invokeWithArgs(s.getNodeName()),CLICommandInvoker.Matcher.succeededSilently());
  }
  @Test public void getComputerNames() throws Exception {
    assertThat(ComputerSet.getComputerNames(),is(empty()));
    j.createSlave("aNode","",null);
    assertThat(ComputerSet.getComputerNames(),contains("aNode"));
    j.createSlave("anAnotherNode","",null);
    assertThat(ComputerSet.getComputerNames(),containsInAnyOrder("aNode","anAnotherNode"));
  }
}
