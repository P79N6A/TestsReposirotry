public class SetBuildDisplayNameCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,new SetBuildDisplayNameCommand());
  }
  @Test public void referencingBuildThatDoesNotExistsShouldFail() throws Exception {
    j.createFreeStyleProject("project");
    final CLICommandInvoker.Result result=command.invokeWithArgs("project","42","DisplayName");
    assertThat(result.stderr(),containsString("ERROR: Build #42 does not exist"));
    assertThat(result,hasNoStandardOutput());
    assertThat(result,failedWith(3));
  }
  @Test public void setDescriptionSuccessfully() throws Exception {
    FreeStyleProject job=j.createFreeStyleProject("project");
    FreeStyleBuild build=job.scheduleBuild2(0).get();
    final CLICommandInvoker.Result result=command.invokeWithArgs("project","1","DisplayName");
    assertThat(result,succeededSilently());
    assertThat(build.getDisplayName(),equalTo("DisplayName"));
  }
}
