/** 
 * Builder for creating a  {@link FakeMap}
 * @author Kohsuke Kawaguchi
 */
public class FakeMapBuilder implements TestRule {
  private File dir;
  protected File getDir(){
    return dir;
  }
  public FakeMapBuilder(){
  }
  public FakeMapBuilder add(  int n) throws IOException {
    File build=new File(dir,Integer.toString(n));
    FileUtils.writeStringToFile(new File(build,"n"),Integer.toString(n));
    build.mkdir();
    return this;
  }
  /** 
 * Adds a build record under the givn ID but make it unloadable, which will cause a failure when a load is attempted on this build ID.
 */
  public FakeMapBuilder addUnloadable(  int n) throws IOException {
    File build=new File(dir,Integer.toString(n));
    build.mkdir();
    return this;
  }
  public FakeMap make(){
    assert dir != null;
    return new FakeMap(dir);
  }
  public Statement apply(  final Statement base,  Description description){
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        dir=File.createTempFile("lazyload","test");
        dir.delete();
        dir.mkdirs();
        try {
          base.evaluate();
        }
  finally {
          FileUtils.deleteDirectory(dir);
        }
      }
    }
;
  }
}
