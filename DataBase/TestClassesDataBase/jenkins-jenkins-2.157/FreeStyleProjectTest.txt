/** 
 * @author Kohsuke Kawaguchi
 */
public class FreeStyleProjectTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  /** 
 * Tests a trivial configuration round-trip. The goal is to catch a P1-level issue that prevents all the form submissions to fail.
 */
  @Test public void configSubmission() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject();
    Shell shell=new Shell("echo hello");
    project.getBuildersList().add(shell);
    WebClient webClient=j.createWebClient();
    HtmlPage page=webClient.getPage(project,"configure");
    HtmlForm form=page.getFormByName("config");
    j.submit(form);
    List<Builder> builders=project.getBuilders();
    assertEquals(1,builders.size());
    assertEquals(Shell.class,builders.get(0).getClass());
    assertEquals("echo hello",((Shell)builders.get(0)).getCommand().trim());
    assertTrue(builders.get(0) != shell);
  }
  /** 
 * Custom workspace and concurrent build had a bad interaction.
 */
  @Test @Issue("JENKINS-4206") public void customWorkspaceAllocation() throws Exception {
    FreeStyleProject f=j.createFreeStyleProject();
    File d=j.createTmpDir();
    f.setCustomWorkspace(d.getPath());
    j.buildAndAssertSuccess(f);
  }
  /** 
 * Custom workspace and variable expansion.
 */
  @Test @Issue("JENKINS-3997") public void customWorkspaceVariableExpansion() throws Exception {
    FreeStyleProject f=j.createFreeStyleProject();
    File d=new File(j.createTmpDir(),"${JOB_NAME}");
    f.setCustomWorkspace(d.getPath());
    FreeStyleBuild b=j.buildAndAssertSuccess(f);
    String path=b.getWorkspace().getRemote();
    System.out.println(path);
    assertFalse(path.contains("${JOB_NAME}"));
    assertEquals(b.getWorkspace().getName(),f.getName());
  }
  @Test @Issue("JENKINS-15817") public void minimalConfigXml() throws Exception {
    FreeStyleProject project=(FreeStyleProject)j.jenkins.createProjectFromXML("stuff",new ByteArrayInputStream("<project/>".getBytes()));
    System.out.println(project.getConfigFile().asString());
    Shell shell=new Shell("echo hello");
    project.getBuildersList().add(shell);
    WebClient webClient=j.createWebClient();
    HtmlPage page=webClient.getPage(project,"configure");
    HtmlForm form=page.getFormByName("config");
    j.submit(form);
    List<Builder> builders=project.getBuilders();
    assertEquals(1,builders.size());
    assertEquals(Shell.class,builders.get(0).getClass());
    assertEquals("echo hello",((Shell)builders.get(0)).getCommand().trim());
    assertTrue(builders.get(0) != shell);
    System.out.println(project.getConfigFile().asString());
  }
  @Test @Issue("JENKINS-36629") public void buildStabilityReports() throws Exception {
    for (int i=0; i <= 32; i++) {
      FreeStyleProject p=j.createFreeStyleProject(String.format("Pattern-%s",Integer.toBinaryString(i)));
      int expectedFails=0;
      for (int j=32; j >= 1; j=j / 2) {
        p.getBuildersList().clear();
        if ((i & j) == j) {
          p.getBuildersList().add(new FailureBuilder());
          if (j <= 16) {
            expectedFails++;
          }
        }
        p.scheduleBuild2(0).get();
      }
      HealthReport health=p.getBuildHealth();
      assertThat(String.format("Pattern %s score",Integer.toBinaryString(i)),health.getScore(),is(100 * (5 - expectedFails) / 5));
    }
  }
}
