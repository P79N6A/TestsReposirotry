/** 
 * Mean to be included in test classes to provide a way to spy on the SecurityListener events
 * @see jenkins.security.BasicHeaderProcessorTest.SpySecurityListenerImpl
 * @see hudson.security.CliAuthenticationTest.SpySecurityListenerImpl
 */
public abstract class SpySecurityListener extends SecurityListener {
  public final EventQueue<UserDetails> authenticatedCalls=new EventQueue<>();
  public final EventQueue<String> failedToAuthenticateCalls=new EventQueue<>();
  public final EventQueue<String> loggedInCalls=new EventQueue<>();
  public final EventQueue<String> failedToLogInCalls=new EventQueue<>();
  public final EventQueue<String> loggedOutCalls=new EventQueue<>();
  public void clearPreviousCalls(){
    this.authenticatedCalls.clear();
    this.failedToAuthenticateCalls.clear();
    this.loggedInCalls.clear();
    this.failedToLogInCalls.clear();
    this.loggedOutCalls.clear();
  }
  @Override protected void authenticated(  @Nonnull UserDetails details){
    this.authenticatedCalls.add(details);
  }
  @Override protected void failedToAuthenticate(  @Nonnull String username){
    this.failedToAuthenticateCalls.add(username);
  }
  @Override protected void loggedIn(  @Nonnull String username){
    this.loggedInCalls.add(username);
  }
  @Override protected void failedToLogIn(  @Nonnull String username){
    this.failedToLogInCalls.add(username);
  }
  @Override protected void loggedOut(  @Nonnull String username){
    this.loggedOutCalls.add(username);
  }
public static class EventQueue<T> {
    private final List<T> eventList=new ArrayList<>();
    private EventQueue add(    T t){
      eventList.add(t);
      return this;
    }
    public void assertLastEventIsAndThenRemoveIt(    T expected){
      assertLastEventIsAndThenRemoveIt(expected::equals);
    }
    public void assertLastEventIsAndThenRemoveIt(    Predicate<T> predicate){
      if (eventList.isEmpty()) {
        fail("event list is empty");
      }
      T t=eventList.remove(eventList.size() - 1);
      assertTrue(predicate.test(t));
      eventList.clear();
    }
    public void assertNoNewEvents(){
      assertEquals("list of event should be empty",eventList.size(),0);
    }
    public void clear(){
      eventList.clear();
    }
  }
}
