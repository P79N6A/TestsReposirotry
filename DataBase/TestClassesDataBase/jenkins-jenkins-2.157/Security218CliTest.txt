@SuppressWarnings("deprecation") public class Security218CliTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-317") public void probeCommonsBeanutils1() throws Exception {
    probe(Payload.CommonsBeanutils1,PayloadCaller.EXIT_CODE_REJECTED);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-218") public void probeCommonsCollections1() throws Exception {
    probe(Payload.CommonsCollections1,1);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-218") public void probeCommonsCollections2() throws Exception {
    probe(Payload.CommonsCollections2,PayloadCaller.EXIT_CODE_REJECTED);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-317") public void probeCommonsCollections3() throws Exception {
    probe(Payload.CommonsCollections3,1);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-317") public void probeCommonsCollections4() throws Exception {
    probe(Payload.CommonsCollections4,PayloadCaller.EXIT_CODE_REJECTED);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-317") public void probeCommonsCollections5() throws Exception {
    probe(Payload.CommonsCollections5,1);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-317") public void probeCommonsCollections6() throws Exception {
    probe(Payload.CommonsCollections6,1);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-317") public void probeFileUpload1() throws Exception {
    probe(Payload.FileUpload1,3);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-218") public void probeGroovy1() throws Exception {
    probe(Payload.Groovy1,PayloadCaller.EXIT_CODE_REJECTED);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-317") public void probeJdk7u21() throws Exception {
    probe(Payload.Jdk7u21,PayloadCaller.EXIT_CODE_REJECTED);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-317") public void probeJRMPClient() throws Exception {
    probe(Payload.JRMPClient,PayloadCaller.EXIT_CODE_REJECTED);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-317") public void probeJRMPListener() throws Exception {
    probe(Payload.JRMPListener,3);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-317") public void probeJSON1() throws Exception {
    probe(Payload.JSON1,PayloadCaller.EXIT_CODE_REJECTED);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-218") public void probeSpring1() throws Exception {
    probe(Payload.Spring1,1);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-317") public void probeSpring2() throws Exception {
    probe(Payload.Spring2,1);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-360") public void ldap() throws Exception {
    probe(Payload.Ldap,PayloadCaller.EXIT_CODE_REJECTED);
  }
  @PresetData(PresetData.DataSet.ANONYMOUS_READONLY) @Test @Issue("SECURITY-429") public void jsonLibSignedObject() throws Exception {
    probe(Payload.JsonLibSignedObject,1);
  }
  private void probe(  Payload payload,  int expectedResultCode) throws Exception {
    File file=File.createTempFile("security-218",payload + "-payload");
    File moved=new File(file.getAbsolutePath() + "-moved");
    try (CLI cli=new CLI(r.getURL())){
      int exitCode=cli.execute("send-payload",payload.toString(),"mv " + file.getAbsolutePath() + " "+ moved.getAbsolutePath());
      assertTrue("Payload should not invoke the move operation " + file,!moved.exists());
      assertEquals("Unexpected result code.",expectedResultCode,exitCode);
      file.delete();
    }
   }
@TestExtension() public static class SendPayloadCommand extends CLICommand {
    @Override public String getShortDescription(){
      return hudson.cli.Messages.ConsoleCommand_ShortDescription();
    }
    @Argument(metaVar="payload",usage="ID of the payload",required=true,index=0) public String payload;
    @Argument(metaVar="command",usage="Command to be launched by the payload",required=true,index=1) public String command;
    @Override protected int run() throws Exception {
      Payload payloadItem=Payload.valueOf(this.payload);
      PayloadCaller callable=new PayloadCaller(payloadItem,command);
      return channel.call(callable);
    }
    @Override protected void printUsageSummary(    PrintStream stderr){
      stderr.println("Sends a payload over the channel");
    }
  }
public static class PayloadCaller implements Callable<Integer,Exception> {
    private final Payload payload;
    private final String command;
    public static final int EXIT_CODE_OK=0;
    public static final int EXIT_CODE_REJECTED=42;
    public static final int EXIT_CODE_ASSIGNMENT_ISSUE=43;
    public PayloadCaller(    Payload payload,    String command){
      this.payload=payload;
      this.command=command;
    }
    @Override public Integer call() throws Exception {
      final Object ysoserial=payload.getPayloadClass().newInstance().getObject(command);
      try {
        getChannelOrFail().call(new Callable<String,Exception>(){
          private static final long serialVersionUID=1L;
          @Override public String call() throws Exception {
            return ysoserial.toString();
          }
          @Override public void checkRoles(          RoleChecker checker) throws SecurityException {
          }
        }
);
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        Throwable cause=ex;
        while (cause.getCause() != null) {
          cause=cause.getCause();
        }
        if (cause instanceof SecurityException) {
          if (cause.getMessage().contains("Rejected")) {
            return PayloadCaller.EXIT_CODE_REJECTED;
          }
 else {
            throw ex;
          }
        }
        final String message=cause.getMessage();
        if (message != null && message.contains("cannot be cast to java.util.Set")) {
          return EXIT_CODE_ASSIGNMENT_ISSUE;
        }
 else {
          throw ex;
        }
      }
      return EXIT_CODE_OK;
    }
    @Override public void checkRoles(    RoleChecker checker) throws SecurityException {
    }
  }
}
