public class ApiCrumbExclusionTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  private WebClient wc;
  @Test @Issue("JENKINS-22474") public void callUsingApiTokenDoesNotRequireCSRFToken() throws Exception {
    ApiTokenTestHelper.enableLegacyBehavior();
    j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
    j.jenkins.setCrumbIssuer(null);
    User foo=User.get("foo");
    wc=j.createWebClient();
    wc.withBasicApiToken(foo);
    makeRequestAndVerify("foo");
    wc=j.createWebClient();
    wc.withBasicCredentials("foo");
    makeRequestAndVerify("foo");
    wc=j.createWebClient();
    wc.login("foo");
    checkWeCanChangeMyDescription(200);
    wc=j.createWebClient();
    j.jenkins.setCrumbIssuer(new DefaultCrumbIssuer(false));
    wc.withBasicApiToken(foo);
    makeRequestAndVerify("foo");
    wc=j.createWebClient();
    wc.withBasicCredentials("foo");
    makeRequestAndFail(403);
    wc=j.createWebClient();
    wc.login("foo");
    checkWeCanChangeMyDescription(200);
  }
  private void makeRequestAndVerify(  String expected) throws IOException, SAXException {
    WebRequest req=new WebRequest(new URL(j.getURL(),"test-post"));
    req.setHttpMethod(HttpMethod.POST);
    req.setEncodingType(null);
    Page p=wc.getPage(req);
    assertEquals(expected,p.getWebResponse().getContentAsString());
  }
  private void makeRequestAndFail(  int expectedCode) throws IOException, SAXException {
    try {
      makeRequestAndVerify("-");
      fail();
    }
 catch (    FailingHttpStatusCodeException e) {
      assertEquals(expectedCode,e.getStatusCode());
    }
  }
  private void checkWeCanChangeMyDescription(  int expectedCode) throws IOException, SAXException {
    HtmlPage page=wc.goTo("me/configure");
    HtmlForm form=page.getFormByName("config");
    form.getTextAreaByName("_.description").setText("random description: " + Math.random());
    Page result=HtmlFormUtil.submit(form);
    assertEquals(expectedCode,result.getWebResponse().getStatusCode());
  }
@TestExtension public static class WhoAmI implements UnprotectedRootAction {
    @Override public String getIconFileName(){
      return null;
    }
    @Override public String getDisplayName(){
      return null;
    }
    @Override public String getUrlName(){
      return "test-post";
    }
    public HttpResponse doIndex(){
      User u=User.current();
      return HttpResponses.text(u != null ? u.getId() : "anonymous");
    }
  }
}
