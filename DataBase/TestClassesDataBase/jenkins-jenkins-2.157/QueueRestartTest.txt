public class QueueRestartTest {
  @Rule public RestartableJenkinsRule j=new RestartableJenkinsRule();
  @Test public void persistQueueOnRestart(){
    j.addStep(new Statement(){
      @Override public void evaluate() throws Throwable {
        Queue.Saver.DELAY_SECONDS=24 * 60 * 60;
        scheduleSomeBuild();
        assertBuildIsScheduled();
      }
    }
);
    j.addStep(new Statement(){
      @Override public void evaluate(){
        assertBuildIsScheduled();
      }
    }
);
  }
  @Test public void persistQueueOnCrash(){
    j.addStepWithDirtyShutdown(new Statement(){
      @Override public void evaluate() throws Throwable {
        Queue.Saver.DELAY_SECONDS=0;
        scheduleSomeBuild();
        assertBuildIsScheduled();
        ExtensionList.lookup(Queue.Saver.class).get(0).getNextSave().get(3,TimeUnit.SECONDS);
        assertTrue("queue.xml does not exist",j.j.jenkins.getQueue().getXMLQueueFile().exists());
      }
    }
);
    j.addStep(new Statement(){
      @Override public void evaluate(){
        assertBuildIsScheduled();
      }
    }
);
  }
  private void assertBuildIsScheduled(){
    assertEquals(1,j.j.jenkins.getQueue().getItems().length);
  }
  private void scheduleSomeBuild() throws IOException {
    FreeStyleProject p=j.j.createFreeStyleProject();
    p.setAssignedLabel(Label.get("waitforit"));
    p.scheduleBuild2(0);
  }
}
