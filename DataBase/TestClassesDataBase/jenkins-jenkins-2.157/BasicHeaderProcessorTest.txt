/** 
 * @author Kohsuke Kawaguchi
 */
public class BasicHeaderProcessorTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  private WebClient wc;
  private SpySecurityListener spySecurityListener;
  @Before public void prepareListeners(){
    this.spySecurityListener=ExtensionList.lookup(SecurityListener.class).get(SpySecurityListenerImpl.class);
  }
  /** 
 * Tests various ways to send the Basic auth.
 */
  @Test public void testVariousWaysToCall() throws Exception {
    ApiTokenTestHelper.enableLegacyBehavior();
    j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
    User foo=User.getById("foo",true);
    User.getById("bar",true);
    wc=j.createWebClient();
    makeRequestAndVerify("anonymous");
    spySecurityListener.authenticatedCalls.assertNoNewEvents();
    spySecurityListener.failedToAuthenticateCalls.assertNoNewEvents();
    wc=j.createWebClient();
    wc.withBasicApiToken("foo");
    makeRequestAndVerify("foo");
    spySecurityListener.authenticatedCalls.assertLastEventIsAndThenRemoveIt(u -> u.getUsername().equals("foo"));
    wc=j.createWebClient();
    wc.withBasicCredentials("foo","abcd" + foo.getProperty(ApiTokenProperty.class).getApiToken());
    makeRequestAndFail();
    spySecurityListener.failedToAuthenticateCalls.assertLastEventIsAndThenRemoveIt("foo");
    wc=j.createWebClient();
    wc.withBasicCredentials("foo");
    makeRequestAndVerify("foo");
    spySecurityListener.authenticatedCalls.assertLastEventIsAndThenRemoveIt(u -> u.getUsername().equals("foo"));
    wc=j.createWebClient();
    wc.withBasicCredentials("foo","bar");
    makeRequestAndFail();
    spySecurityListener.failedToAuthenticateCalls.assertLastEventIsAndThenRemoveIt("foo");
    wc=j.createWebClient();
    wc.login("bar");
    spySecurityListener.authenticatedCalls.assertLastEventIsAndThenRemoveIt(u -> u.getUsername().equals("bar"));
    spySecurityListener.loggedInCalls.assertLastEventIsAndThenRemoveIt("bar");
    makeRequestAndVerify("bar");
    spySecurityListener.authenticatedCalls.assertNoNewEvents();
    spySecurityListener.failedToAuthenticateCalls.assertNoNewEvents();
    wc.withBasicCredentials("bar");
    makeRequestAndVerify("bar");
    spySecurityListener.authenticatedCalls.assertNoNewEvents();
    spySecurityListener.failedToAuthenticateCalls.assertNoNewEvents();
    wc.withBasicCredentials("foo","bar");
    makeRequestAndFail();
    spySecurityListener.failedToAuthenticateCalls.assertLastEventIsAndThenRemoveIt("foo");
  }
  private void makeRequestAndFail() throws IOException, SAXException {
    makeRequestWithAuthCodeAndFail(null);
  }
  private void makeRequestAndVerify(  String expectedLogin) throws IOException, SAXException {
    makeRequestWithAuthCodeAndVerify(null,expectedLogin);
  }
  @Test public void testAuthHeaderCaseInSensitive() throws Exception {
    ApiTokenTestHelper.enableLegacyBehavior();
    j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
    User foo=User.get("foo");
    wc=j.createWebClient();
    String[] basicCandidates={"Basic","BASIC","basic","bASIC"};
    for (    String prefix : basicCandidates) {
      ApiTokenProperty t=foo.getProperty(ApiTokenProperty.class);
      final String token=t.getApiToken();
      String authCode1=encode(prefix,"foo:" + token);
      makeRequestWithAuthCodeAndVerify(authCode1,"foo");
      spySecurityListener.authenticatedCalls.assertLastEventIsAndThenRemoveIt(u -> u.getUsername().equals("foo"));
      String authCode2=encode(prefix,"foo:abcd" + token);
      makeRequestWithAuthCodeAndFail(authCode2);
      spySecurityListener.failedToAuthenticateCalls.assertLastEventIsAndThenRemoveIt("foo");
      String authCode3=encode(prefix,"foo:foo");
      makeRequestWithAuthCodeAndVerify(authCode3,"foo");
      spySecurityListener.authenticatedCalls.assertLastEventIsAndThenRemoveIt(u -> u.getUsername().equals("foo"));
      String authCode4=encode(prefix,"foo:bar");
      makeRequestWithAuthCodeAndFail(authCode4);
      spySecurityListener.failedToAuthenticateCalls.assertLastEventIsAndThenRemoveIt("foo");
    }
  }
  private String encode(  String prefix,  String userAndPass){
    if (userAndPass == null) {
      return null;
    }
    return prefix + " " + Base64.getEncoder().encodeToString(userAndPass.getBytes(StandardCharsets.UTF_8));
  }
  private void makeRequestWithAuthCodeAndVerify(  String authCode,  String expectedLogin) throws IOException, SAXException {
    WebRequest req=new WebRequest(new URL(j.getURL(),"test"));
    req.setEncodingType(null);
    if (authCode != null)     req.setAdditionalHeader("Authorization",authCode);
    Page p=wc.getPage(req);
    assertEquals(expectedLogin,p.getWebResponse().getContentAsString());
  }
  private void makeRequestWithAuthCodeAndFail(  String authCode) throws IOException, SAXException {
    try {
      makeRequestWithAuthCodeAndVerify(authCode,"-");
      fail();
    }
 catch (    FailingHttpStatusCodeException e) {
      assertEquals(401,e.getStatusCode());
    }
  }
@TestExtension public static class WhoAmI implements UnprotectedRootAction {
    @Override public String getIconFileName(){
      return null;
    }
    @Override public String getDisplayName(){
      return null;
    }
    @Override public String getUrlName(){
      return "test";
    }
    public HttpResponse doIndex(){
      User u=User.current();
      return HttpResponses.text(u != null ? u.getId() : "anonymous");
    }
  }
@TestExtension public static class SpySecurityListenerImpl extends SpySecurityListener {
  }
}
