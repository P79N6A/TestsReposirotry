/** 
 * @author Kohsuke Kawaguchi
 */
public class RekeySecretAdminMonitorTest extends HudsonTestCase {
  @Inject RekeySecretAdminMonitor monitor;
  final String plain_regex_match=".*\\{[A-Za-z0-9+/]+={0,2}}.*";
  @Override protected void setUp() throws Exception {
    SecretHelper.set(TEST_KEY);
    super.setUp();
    monitor.setNeeded();
  }
  @Override protected void tearDown() throws Exception {
    SecretHelper.set(null);
    super.tearDown();
  }
  @Override protected void recipe() throws Exception {
    super.recipe();
    recipes.add(new Runner(){
      @Override public void setup(      HudsonTestCase testCase,      Annotation recipe) throws Exception {
      }
      @Override public void decorateHome(      HudsonTestCase testCase,      File home) throws Exception {
        if (getName().endsWith("testScanOnBoot")) {
          File f=new File(home,RekeySecretAdminMonitor.class.getName() + "/scanOnBoot");
          f.getParentFile().mkdirs();
          new FilePath(f).touch(0);
          putSomeOldData(home);
        }
      }
      @Override public void tearDown(      HudsonTestCase testCase,      Annotation recipe) throws Exception {
      }
    }
);
  }
  private void putSomeOldData(  File dir) throws Exception {
    File xml=new File(dir,"foo.xml");
    FileUtils.writeStringToFile(xml,"<foo>" + encryptOld(TEST_KEY) + "</foo>");
  }
  private void verifyRewrite(  File dir) throws Exception {
    File xml=new File(dir,"foo.xml");
    Pattern pattern=Pattern.compile("<foo>" + plain_regex_match + "</foo>");
    assertTrue(pattern.matcher(FileUtils.readFileToString(xml).trim()).matches());
  }
  public void _testBasicWorkflow() throws Exception {
    putSomeOldData(jenkins.getRootDir());
    WebClient wc=createWebClient();
    assertTrue(!monitor.isScanOnBoot());
    HtmlForm form=getRekeyForm(wc);
    submit(form,"schedule");
    assertTrue(monitor.isScanOnBoot());
    form=getRekeyForm(wc);
    assertTrue(getButton(form,1).isDisabled());
    assertTrue(!monitor.getLogFile().exists());
    submit(form,"background");
    assertTrue(monitor.getLogFile().exists());
    HtmlPage manage=wc.goTo("manage");
    assertEquals(0,DomNodeUtil.selectNodes(manage,"//*[class='error']").size());
    assertEquals(0,DomNodeUtil.selectNodes(manage,"//*[class='warning']").size());
    verifyRewrite(jenkins.getRootDir());
    assertTrue(monitor.isDone());
    assertTrue(monitor.isEnabled());
    form=getRekeyForm(wc);
    submit(form,"dismiss");
    assertFalse(monitor.isEnabled());
    try {
      getRekeyForm(wc);
      fail();
    }
 catch (    ElementNotFoundException e) {
    }
  }
  private HtmlForm getRekeyForm(  WebClient wc) throws IOException, SAXException {
    return wc.goTo("manage").getFormByName("rekey");
  }
  private HtmlButton getButton(  HtmlForm form,  int index){
    return form.<HtmlButton>getHtmlElementsByTagName("button").get(index);
  }
  public void testScanOnBoot() throws Exception {
    WebClient wc=createWebClient();
    assertTrue(monitor.getLogFile().exists());
    assertTrue("scan on boot should have turned this off",!monitor.isScanOnBoot());
    verifyRewrite(jenkins.getRootDir());
    HtmlPage manage=wc.goTo("/manage");
    assertEquals(0,DomNodeUtil.selectNodes(manage,"//*[class='error']").size());
    assertEquals(0,DomNodeUtil.selectNodes(manage,"//*[class='warning']").size());
  }
  private String encryptOld(  String str) throws Exception {
    Cipher cipher=Secret.getCipher("AES");
    cipher.init(Cipher.ENCRYPT_MODE,Util.toAes128Key(TEST_KEY));
    return new String(Base64.encode(cipher.doFinal((str + "::::MAGIC::::").getBytes("UTF-8"))));
  }
  private String encryptNew(  String str){
    return Secret.fromString(str).getEncryptedValue();
  }
  private static final String TEST_KEY="superDuperSecretWasNotSoSecretAfterAll";
}
