/** 
 * @author kingfai
 */
public class DisplayNameTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test public void testRenameJobWithNoDisplayName() throws Exception {
    final String projectName="projectName";
    final String newProjectName="newProjectName";
    FreeStyleProject project=j.createFreeStyleProject(projectName);
    assertEquals(projectName,project.getDisplayName());
    project.renameTo(newProjectName);
    assertEquals(newProjectName,project.getDisplayName());
  }
  @Test public void testRenameJobWithDisplayName() throws Exception {
    final String projectName="projectName";
    final String newProjectName="newProjectName";
    final String displayName="displayName";
    FreeStyleProject project=j.createFreeStyleProject(projectName);
    project.setDisplayName(displayName);
    assertEquals(displayName,project.getDisplayName());
    project.renameTo(newProjectName);
    assertEquals(displayName,project.getDisplayName());
  }
  @SuppressWarnings("rawtypes") @Test public void testCopyJobWithNoDisplayName() throws Exception {
    final String projectName="projectName";
    final String newProjectName="newProjectName";
    FreeStyleProject project=j.createFreeStyleProject(projectName);
    assertEquals(projectName,project.getDisplayName());
    AbstractProject newProject=Jenkins.getInstance().copy((AbstractProject)project,newProjectName);
    assertEquals(newProjectName,newProject.getName());
    assertEquals(newProjectName,newProject.getDisplayName());
  }
  @SuppressWarnings("rawtypes") @Test public void testCopyJobWithDisplayName() throws Exception {
    final String projectName="projectName";
    final String newProjectName="newProjectName";
    final String oldDisplayName="oldDisplayName";
    FreeStyleProject project=j.createFreeStyleProject(projectName);
    project.setDisplayName(oldDisplayName);
    assertEquals(oldDisplayName,project.getDisplayName());
    AbstractProject newProject=Jenkins.getInstance().copy((AbstractProject)project,newProjectName);
    assertEquals(newProjectName,newProject.getName());
    assertEquals(newProjectName,newProject.getDisplayName());
  }
  @Issue("JENKINS-18074") @Test public void copyJobWithDisplayNameToDifferentFolder() throws Exception {
    MockFolder d1=j.createFolder("d1");
    FreeStyleProject job=d1.createProject(FreeStyleProject.class,"job");
    job.setDisplayName("My Job");
    MockFolder d2=j.jenkins.copy(d1,"d2");
    FreeStyleProject j2=(FreeStyleProject)d2.getItem("job");
    assertNotNull(j2);
    assertEquals("My Job",j2.getDisplayName());
  }
}
