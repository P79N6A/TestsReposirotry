public class ItemGroupMixInTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @Issue("JENKINS-20951") @LocalData @Test public void xmlFileReadCannotResolveClassException() throws Exception {
    MockFolder d=r.jenkins.getItemByFullName("d",MockFolder.class);
    assertNotNull(d);
    Collection<TopLevelItem> items=d.getItems();
    assertEquals(1,items.size());
    assertEquals("valid",items.iterator().next().getName());
  }
  /** 
 * This test unit makes sure that if part of the config.xml file is deleted it will still load everything else inside the folder. The test unit expects an IOException is thrown, and the one failed job fails to load.
 */
  @Issue("JENKINS-22811") @Test public void xmlFileFailsToLoad() throws Exception {
    MockFolder folder=r.createFolder("folder");
    assertNotNull(folder);
    AbstractProject project=folder.createProject(FreeStyleProject.class,"job1");
    AbstractProject project2=folder.createProject(FreeStyleProject.class,"job2");
    AbstractProject project3=folder.createProject(FreeStyleProject.class,"job3");
    File configFile=project.getConfigFile().getFile();
    List<String> lines=FileUtils.readLines(configFile).subList(0,5);
    configFile.delete();
    FileUtils.writeByteArrayToFile(configFile,lines.toString().getBytes());
    for (int i=lines.size() / 2; i < lines.size(); i++) {
      FileUtils.writeStringToFile(configFile,lines.get(i),true);
    }
    r.jenkins.reload();
    assertNotNull("Folder failed to load.",r.jenkins.getItemByFullName("folder"));
    assertNull("Job should have failed to load.",r.jenkins.getItemByFullName("folder/job1"));
    assertNotNull("Other job in folder should have loaded.",r.jenkins.getItemByFullName("folder/job2"));
    assertNotNull("Other job in folder should have loaded.",r.jenkins.getItemByFullName("folder/job3"));
  }
  /** 
 * This test unit makes sure that jobs that contain bad get*Action methods will continue to load the project.
 */
  @LocalData @Issue("JENKINS-22811") @Test public void xmlFileReadExceptionOnLoad() throws Exception {
    MockFolder d=r.jenkins.getItemByFullName("d",MockFolder.class);
    assertNotNull(d);
    Collection<TopLevelItem> items=d.getItems();
    assertEquals(5,items.size());
  }
@TestExtension public static class MockBuildWrapperThrowsError extends BuildWrapper {
    @Override public Collection<? extends Action> getProjectActions(    AbstractProject project){
      throw new NullPointerException();
    }
@Extension public static class DescriptorImpl extends BuildWrapperDescriptor {
      @Override public boolean isApplicable(      AbstractProject<?,?> item){
        return true;
      }
    }
  }
@TestExtension public static class MockBuilderThrowsError extends Builder {
    @Override public Collection<? extends Action> getProjectActions(    AbstractProject project){
      throw new NullPointerException();
    }
    @Extension public static final Descriptor DESCRIPTOR=new DescriptorImpl();
public static class DescriptorImpl extends BuildStepDescriptor {
      @Override public boolean isApplicable(      Class jobType){
        return false;
      }
    }
  }
@TestExtension public static class MockBuildTriggerThrowsError extends Trigger {
    @Override public Collection<? extends Action> getProjectActions(){
      throw new NullPointerException();
    }
    @Extension public static final Descriptor DESCRIPTOR=new BuildTrigger.DescriptorImpl();
  }
@TestExtension public static class MockPublisherThrowsError extends Publisher {
    @Override public Collection<? extends Action> getProjectActions(    AbstractProject project){
      throw new NullPointerException();
    }
    @Override public BuildStepMonitor getRequiredMonitorService(){
      return null;
    }
    @Extension public static final Descriptor DESCRIPTOR=new DescriptorImpl();
public static class DescriptorImpl extends BuildStepDescriptor {
      @Override public boolean isApplicable(      Class jobType){
        return false;
      }
    }
  }
  @Test public void createProjectFromXMLShouldNoCreateEntities() throws IOException {
    final String xml="<?xml version='1.0' encoding='UTF-8'?>\n" + "<!DOCTYPE project[\n" + "  <!ENTITY foo SYSTEM \"file:///\">\n"+ "]>\n"+ "<project>\n"+ "  <actions/>\n"+ "  <description>&foo;</description>\n"+ "  <keepDependencies>false</keepDependencies>\n"+ "  <properties/>\n"+ "  <scm class=\"hudson.scm.NullSCM\"/>\n"+ "  <canRoam>true</canRoam>\n"+ "  <triggers/>\n"+ "  <builders/>\n"+ "  <publishers/>\n"+ "  <buildWrappers/>\n"+ "</project>";
    Item foo=r.jenkins.createProjectFromXML("foo",new ByteArrayInputStream(xml.getBytes()));
    assertThat(Items.getConfigFile(foo).asString(),containsString("<description/>"));
  }
}
