@Restricted(NoExternalUse.class) public class RedactSecretJsonInErrorMessageSanitizerHtmlTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Rule public LoggerRule logging=new LoggerRule();
  @Test @Issue("SECURITY-765") public void passwordsAreRedacted_andOtherStayTheSame() throws Exception {
    j.jenkins.setCrumbIssuer(null);
    TestPassword testPassword=j.jenkins.getExtensionList(RootAction.class).get(TestPassword.class);
    JenkinsRule.WebClient wc=j.createWebClient();
    HtmlPage page=wc.goTo("test");
    String textSimple="plain-1";
    String pwdSimple="secret-1";
    ((HtmlInput)page.getElementById("text-simple")).setValueAttribute(textSimple);
    ((HtmlInput)page.getElementById("pwd-simple")).setValueAttribute(pwdSimple);
    String textLevelOne="plain-2";
    String pwdLevelOneA="secret-2";
    String pwdLevelOneB="secret-3";
    ((HtmlInput)page.getElementById("text-level-one")).setValueAttribute(textLevelOne);
    ((HtmlInput)page.getElementById("pwd-level-one-a")).setValueAttribute(pwdLevelOneA);
    ((HtmlInput)page.getElementById("pwd-level-one-b")).setValueAttribute(pwdLevelOneB);
    HtmlForm form=page.getFormByName("config");
    Page formSubmitPage=j.submit(form);
    assertThat(formSubmitPage.getWebResponse().getStatusCode(),equalTo(200));
    JSONObject rawJson=testPassword.lastJsonReceived;
    String rawJsonToString=rawJson.toString();
    assertThat(rawJsonToString,containsString(textSimple));
    assertThat(rawJsonToString,containsString(pwdSimple));
    assertThat(rawJsonToString,containsString(textLevelOne));
    assertThat(rawJsonToString,containsString(pwdLevelOneA));
    assertThat(rawJson.getString(RedactSecretJsonInErrorMessageSanitizer.REDACT_KEY),equalTo("pwd-simple"));
    assertThat(rawJson.getJSONObject("sub-one").getJSONArray(RedactSecretJsonInErrorMessageSanitizer.REDACT_KEY),allOf(hasItem("pwd-level-one-a"),hasItem("pwd-level-one-b")));
    JSONObject redactedJson=RedactSecretJsonInErrorMessageSanitizer.INSTANCE.sanitize(rawJson);
    String redactedJsonToString=redactedJson.toString();
    assertThat(redactedJsonToString,containsString(textSimple));
    assertThat(redactedJsonToString,not(containsString(pwdSimple)));
    assertThat(redactedJsonToString,containsString(textLevelOne));
    assertThat(redactedJsonToString,not(containsString(pwdLevelOneA)));
    assertThat(redactedJsonToString,not(containsString(pwdLevelOneB)));
    assertThat(redactedJsonToString,containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE));
  }
@TestExtension("passwordsAreRedacted_andOtherStayTheSame") public static class TestPassword implements RootAction {
    public JSONObject lastJsonReceived;
    public void doSubmitTest(    StaplerRequest req,    StaplerResponse res) throws Exception {
      lastJsonReceived=req.getSubmittedForm();
      res.setStatus(200);
    }
    @Override public String getIconFileName(){
      return null;
    }
    @Override public String getDisplayName(){
      return null;
    }
    @Override public String getUrlName(){
      return "test";
    }
  }
  @Test @Issue("SECURITY-765") public void checkSanitizationIsApplied_inDescriptor() throws Exception {
    logging.record("",Level.WARNING).capture(100);
    j.jenkins.setCrumbIssuer(null);
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    HtmlPage page=wc.goTo("testDescribable");
    String secret="s3cr3t";
    ((HtmlInput)page.getElementById("password")).setValueAttribute(secret);
    HtmlForm form=page.getFormByName("config");
    Page formSubmitPage=j.submit(form);
    assertThat(formSubmitPage.getWebResponse().getContentAsString(),allOf(containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),not(containsString(secret))));
    Throwable thrown=logging.getRecords().stream().filter(r -> r.getMessage().contains("Error while serving")).findAny().get().getThrown();
    assertThat(thrown.getCause().getMessage(),allOf(containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),not(containsString(secret))));
    assertThat(thrown.getCause().getCause().getMessage(),allOf(containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),not(containsString(secret))));
    StringWriter buffer=new StringWriter();
    thrown.printStackTrace(new PrintWriter(buffer));
    String fullStack=buffer.getBuffer().toString();
    assertThat(fullStack,allOf(containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),not(containsString(secret))));
  }
  @Test @Issue("SECURITY-765") public void checkSanitizationIsApplied_inStapler() throws Exception {
    logging.record("",Level.WARNING).capture(100);
    j.jenkins.setCrumbIssuer(null);
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    HtmlPage page=wc.goTo("testStapler");
    String secret="s3cr3t";
    ((HtmlInput)page.getElementById("password")).setValueAttribute(secret);
    HtmlForm form=page.getFormByName("config");
    Page formSubmitPage=j.submit(form);
    assertThat(formSubmitPage.getWebResponse().getContentAsString(),allOf(containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),not(containsString(secret))));
    Throwable thrown=logging.getRecords().stream().filter(r -> r.getMessage().contains("Error while serving")).findAny().get().getThrown();
    assertThat(thrown.getCause().getMessage(),allOf(containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),not(containsString(secret))));
    StringWriter buffer=new StringWriter();
    thrown.printStackTrace(new PrintWriter(buffer));
    String fullStack=buffer.getBuffer().toString();
    assertThat(fullStack,allOf(containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),not(containsString(secret))));
  }
public static class TestDescribable implements Describable<TestDescribable> {
    @DataBoundConstructor public TestDescribable(    Secret password){
      throw new IllegalArgumentException("Try to steal my password");
    }
    public DescriptorImpl getDescriptor(){
      return Jenkins.getInstance().getDescriptorByType(TestDescribable.DescriptorImpl.class);
    }
@TestExtension({"checkSanitizationIsApplied_inStapler","checkSanitizationIsApplied_inDescriptor"}) public static final class DescriptorImpl extends Descriptor<TestDescribable> {
    }
  }
@TestExtension("checkSanitizationIsApplied_inDescriptor") public static class TestDescribablePage implements RootAction {
    public TestDescribable testDescribable;
    @RequirePOST public void doConfigSubmit(    StaplerRequest req,    StaplerResponse rsp) throws Exception {
      Jenkins.getInstance().getDescriptorOrDie(TestDescribable.class).newInstance(req,req.getSubmittedForm());
    }
    @Override public String getIconFileName(){
      return null;
    }
    @Override public String getDisplayName(){
      return null;
    }
    @Override public String getUrlName(){
      return "testDescribable";
    }
  }
@TestExtension("checkSanitizationIsApplied_inStapler") public static class TestStaplerPage implements RootAction {
    public TestDescribable testDescribable;
    @RequirePOST public void doConfigSubmit(    StaplerRequest req,    StaplerResponse rsp) throws Exception {
      req.bindJSON(TestDescribable.class,req.getSubmittedForm());
    }
    @Override public String getIconFileName(){
      return null;
    }
    @Override public String getDisplayName(){
      return null;
    }
    @Override public String getUrlName(){
      return "testStapler";
    }
  }
}
