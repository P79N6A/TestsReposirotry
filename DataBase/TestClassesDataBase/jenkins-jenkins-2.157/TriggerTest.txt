public class TriggerTest {
  @Rule public JenkinsRule jenkinsRule=new JenkinsRule();
  @Issue("JENKINS-36748") @Test public void testNoNPE() throws Exception {
    jenkinsRule.getInstance().createProjectFromXML("whatever",new ByteArrayInputStream(("<project>\n  <builders/>\n  <publishers/>\n  <buildWrappers/>\n" + triggersSection() + "</project>").getBytes()));
    final Calendar cal=new GregorianCalendar();
    Trigger.checkTriggers(cal);
  }
  private String triggersSection(){
    String tagname=MockTrigger.class.getName().replace("$","_-");
    return "<triggers> \n <" + tagname + ">\n </"+ tagname+ ">\n  </triggers>\n";
  }
public static class MockTrigger extends Trigger<Item> {
    @Extension public static final DescriptorImpl DESCRIPTOR=new DescriptorImpl();
    @DataBoundConstructor public MockTrigger(    String cron) throws ANTLRException {
      super(cron);
    }
    @Override public DescriptorImpl getDescriptor(){
      return DESCRIPTOR;
    }
    @Override protected Object readResolve(){
      return this;
    }
public static class DescriptorImpl extends TriggerDescriptor {
      @Override public boolean isApplicable(      Item item){
        return true;
      }
      public DescriptorImpl(){
        load();
        save();
      }
    }
  }
}
