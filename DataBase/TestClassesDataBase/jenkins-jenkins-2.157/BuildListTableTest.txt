public class BuildListTableTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @Issue("JENKINS-19310") @Test public void linksFromFolders() throws Exception {
    MockFolder d=r.createFolder("d");
    ListView v1=new ListView("v1",r.jenkins);
    v1.add(d);
    r.jenkins.addView(v1);
    MockFolder d2=d.createProject(MockFolder.class,"d2");
    FreeStyleProject p=d2.createProject(FreeStyleProject.class,"p");
    r.buildAndAssertSuccess(p);
    ListView v2=new ListView("v2",d);
    v2.setRecurse(true);
    v2.add(p);
    d.addView(v2);
    JenkinsRule.WebClient wc=r.createWebClient();
    HtmlPage page=wc.goTo("view/v1/job/d/view/v2/builds?suppressTimelineControl=true");
    assertEquals(0,wc.waitForBackgroundJavaScript(120000));
    HtmlAnchor anchor=page.getAnchorByText("d » d2 » p");
    String href=anchor.getHrefAttribute();
    URL target=URI.create(page.getUrl().toExternalForm()).resolve(href).toURL();
    wc.getPage(target);
    assertEquals(href,r.getURL() + "view/v1/job/d/view/v2/job/d2/job/p/",target.toString());
    page=wc.goTo("job/d/view/All/builds?suppressTimelineControl=true");
    assertEquals(0,wc.waitForBackgroundJavaScript(120000));
    anchor=page.getAnchorByText("d » d2 » p");
    href=anchor.getHrefAttribute();
    target=URI.create(page.getUrl().toExternalForm()).resolve(href).toURL();
    wc.getPage(target);
    assertEquals(href,r.getURL() + "job/d/job/d2/job/p/",target.toString());
  }
}
