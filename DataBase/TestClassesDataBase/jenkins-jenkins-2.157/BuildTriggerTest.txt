public class BuildTriggerTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @ClassRule public static BuildWatcher buildWatcher=new BuildWatcher();
  @Before public void runMoreQuickly() throws Exception {
    j.jenkins.setQuietPeriod(0);
  }
  private FreeStyleProject createDownstreamProject() throws Exception {
    FreeStyleProject dp=j.createFreeStyleProject("downstream");
    dp.setQuietPeriod(0);
    return dp;
  }
  private void doTriggerTest(  boolean evenWhenUnstable,  Result triggerResult,  Result dontTriggerResult) throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    FreeStyleProject dp=createDownstreamProject();
    p.getPublishersList().add(new BuildTrigger("downstream",evenWhenUnstable));
    p.getBuildersList().add(new MockBuilder(dontTriggerResult));
    j.jenkins.rebuildDependencyGraph();
    FreeStyleBuild b=p.scheduleBuild2(0).get();
    assertNoDownstreamBuild(dp,b);
    p.getBuildersList().replace(new MockBuilder(triggerResult));
    b=p.scheduleBuild2(0).get();
    assertDownstreamBuild(dp,b);
  }
  private void assertNoDownstreamBuild(  FreeStyleProject dp,  Run<?,?> b) throws Exception {
    for (int i=0; i < 3; i++) {
      Thread.sleep(200);
      assertTrue("downstream build should not run!  upstream log: " + b.getLog(),!dp.isInQueue() && !dp.isBuilding() && dp.getLastBuild() == null);
    }
  }
  private FreeStyleBuild assertDownstreamBuild(  FreeStyleProject dp,  Run<?,?> b) throws Exception {
    for (int i=0; dp.getLastBuild() == null && i < 20; i++)     Thread.sleep(100);
    assertNotNull("downstream build didn't run.. upstream log: " + b.getLog(),dp.getLastBuild());
    return dp.getLastBuild();
  }
  @Test public void buildTrigger() throws Exception {
    doTriggerTest(false,Result.SUCCESS,Result.UNSTABLE);
  }
  @Test public void triggerEvenWhenUnstable() throws Exception {
    doTriggerTest(true,Result.UNSTABLE,Result.FAILURE);
  }
  private void doMavenTriggerTest(  boolean evenWhenUnstable) throws Exception {
    File problematic=new File(System.getProperty("user.home"),".m2/repository/org/apache/maven/plugins/maven-surefire-plugin/2.4.3/maven-surefire-plugin-2.4.3.pom");
    if (problematic.isFile()) {
      try {
        new SAXReader().read(problematic);
      }
 catch (      DocumentException x) {
        x.printStackTrace();
        Assume.assumeNoException(x);
      }
    }
    FreeStyleProject dp=createDownstreamProject();
    ToolInstallations.configureMaven3();
    MavenModuleSet m=j.jenkins.createProject(MavenModuleSet.class,"p");
    m.getPublishersList().add(new BuildTrigger("downstream",evenWhenUnstable));
    if (!evenWhenUnstable) {
      m.setGoals("clean test");
      m.setScm(new ExtractResourceSCM(getClass().getResource("maven-test-failure.zip")));
    }
    MavenModuleSetBuild b=m.scheduleBuild2(0).get();
    assertNoDownstreamBuild(dp,b);
    if (evenWhenUnstable) {
      m.setGoals("clean test");
      m.setScm(new ExtractResourceSCM(getClass().getResource("maven-test-failure.zip")));
    }
 else {
      m.setGoals("clean");
      m.setScm(new ExtractResourceSCM(getClass().getResource("maven-empty.zip")));
    }
    b=m.scheduleBuild2(0).get();
    assertDownstreamBuild(dp,b);
  }
  @Test public void mavenBuildTrigger() throws Exception {
    doMavenTriggerTest(false);
  }
  @Test public void mavenTriggerEvenWhenUnstable() throws Exception {
    doMavenTriggerTest(true);
  }
  /** 
 * @see ReverseBuildTriggerTest#upstreamProjectSecurity 
 */
  @Test public void downstreamProjectSecurity() throws Exception {
    j.jenkins.setSecurityRealm(new LegacySecurityRealm());
    ProjectMatrixAuthorizationStrategy auth=new ProjectMatrixAuthorizationStrategy();
    auth.add(Jenkins.READ,"alice");
    auth.add(Computer.BUILD,"alice");
    auth.add(Computer.BUILD,"anonymous");
    j.jenkins.setAuthorizationStrategy(auth);
    final FreeStyleProject upstream=j.createFreeStyleProject("upstream");
    Authentication alice=User.get("alice").impersonate();
    QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(Collections.singletonMap("upstream",alice)));
    Map<Permission,Set<String>> perms=new HashMap<Permission,Set<String>>();
    perms.put(Item.READ,Collections.singleton("alice"));
    perms.put(Item.CONFIGURE,Collections.singleton("alice"));
    upstream.addProperty(new AuthorizationMatrixProperty(perms));
    String downstreamName="d0wnstr3am";
    FreeStyleProject downstream=j.createFreeStyleProject(downstreamName);
    upstream.getPublishersList().add(new BuildTrigger(downstreamName,Result.SUCCESS));
    j.jenkins.rebuildDependencyGraph();
    assertEquals(Collections.singletonList(downstream),upstream.getDownstreamProjects());
    assertDoCheck(alice,Messages.BuildTrigger_NoSuchProject(downstreamName,"upstream"),upstream,downstreamName);
    assertDoCheck(alice,null,null,downstreamName);
    FreeStyleBuild b=j.buildAndAssertSuccess(upstream);
    j.assertLogNotContains(downstreamName,b);
    j.waitUntilNoActivity();
    assertNull(downstream.getLastBuild());
    Map<Permission,Set<String>> grantedPermissions=new HashMap<Permission,Set<String>>();
    grantedPermissions.put(Item.READ,Collections.singleton("alice"));
    AuthorizationMatrixProperty amp=new AuthorizationMatrixProperty(grantedPermissions);
    downstream.addProperty(amp);
    assertDoCheck(alice,Messages.BuildTrigger_you_have_no_permission_to_build_(downstreamName),upstream,downstreamName);
    assertDoCheck(alice,null,null,downstreamName);
    b=j.buildAndAssertSuccess(upstream);
    j.assertLogContains(downstreamName,b);
    j.waitUntilNoActivity();
    assertNull(downstream.getLastBuild());
    grantedPermissions.put(Item.BUILD,Collections.singleton("alice"));
    downstream.removeProperty(amp);
    amp=new AuthorizationMatrixProperty(grantedPermissions);
    downstream.addProperty(amp);
    assertDoCheck(alice,null,upstream,downstreamName);
    assertDoCheck(alice,null,null,downstreamName);
    b=j.buildAndAssertSuccess(upstream);
    j.assertLogContains(downstreamName,b);
    j.waitUntilNoActivity();
    FreeStyleBuild b2=downstream.getLastBuild();
    assertNotNull(b2);
    Cause.UpstreamCause cause=b2.getCause(Cause.UpstreamCause.class);
    assertNotNull(cause);
    assertEquals(b,cause.getUpstreamRun());
    QueueItemAuthenticatorConfiguration.get().getAuthenticators().replace(new MockQueueItemAuthenticator(Collections.singletonMap("upstream",Jenkins.ANONYMOUS)));
    assertDoCheck(alice,Messages.BuildTrigger_you_have_no_permission_to_build_(downstreamName),upstream,downstreamName);
    assertDoCheck(alice,null,null,downstreamName);
    b=j.buildAndAssertSuccess(upstream);
    j.assertLogNotContains(downstreamName,b);
    j.waitUntilNoActivity();
    assertEquals(1,downstream.getLastBuild().number);
    grantedPermissions.put(Item.READ,Collections.singleton("anonymous"));
    grantedPermissions.put(Item.BUILD,Collections.singleton("anonymous"));
    downstream.removeProperty(amp);
    amp=new AuthorizationMatrixProperty(grantedPermissions);
    downstream.addProperty(amp);
    assertDoCheck(alice,null,upstream,downstreamName);
    assertDoCheck(alice,null,null,downstreamName);
    b=j.buildAndAssertSuccess(upstream);
    j.assertLogContains(downstreamName,b);
    j.waitUntilNoActivity();
    assertEquals(2,downstream.getLastBuild().number);
    FreeStyleProject simple=j.createFreeStyleProject("simple");
    FreeStyleBuild b3=j.buildAndAssertSuccess(simple);
    grantedPermissions.clear();
    downstream.removeProperty(amp);
    amp=new AuthorizationMatrixProperty(grantedPermissions);
    downstream.addProperty(amp);
    QueueItemAuthenticatorConfiguration.get().getAuthenticators().clear();
    assertDoCheck(alice,Messages.BuildTrigger_NoSuchProject(downstreamName,"upstream"),upstream,downstreamName);
    assertDoCheck(alice,null,null,downstreamName);
    b=j.buildAndAssertSuccess(upstream);
    j.assertLogContains(downstreamName,b);
    j.waitUntilNoActivity();
    assertEquals(3,downstream.getLastBuild().number);
    b3=j.buildAndAssertSuccess(simple);
  }
  private void assertDoCheck(  Authentication auth,  @CheckForNull String expectedError,  AbstractProject<?,?> project,  String value){
    FormValidation result;
    SecurityContext orig=ACL.impersonate(auth);
    try {
      result=j.jenkins.getDescriptorByType(BuildTrigger.DescriptorImpl.class).doCheck(project,value);
    }
  finally {
      SecurityContextHolder.setContext(orig);
    }
    if (expectedError == null) {
      assertEquals(result.renderHtml(),FormValidation.Kind.OK,result.kind);
    }
 else {
      assertEquals(result.renderHtml(),FormValidation.Kind.ERROR,result.kind);
      assertEquals(result.renderHtml(),expectedError);
    }
  }
  @Test @Issue("JENKINS-20989") public void downstreamProjectShouldObserveCompletedParent() throws Exception {
    j.jenkins.setNumExecutors(2);
    final FreeStyleProject us=j.createFreeStyleProject();
    us.getPublishersList().add(new BuildTrigger("downstream",true));
    FreeStyleProject ds=createDownstreamProject();
    ds.getBuildersList().add(new AssertTriggerBuildCompleted(us,j.createWebClient()));
    j.jenkins.rebuildDependencyGraph();
    j.buildAndAssertSuccess(us);
    j.waitUntilNoActivity();
    final FreeStyleBuild dsb=ds.getBuildByNumber(1);
    assertNotNull(dsb);
    j.waitForCompletion(dsb);
    j.assertBuildStatusSuccess(dsb);
  }
  @Test @Issue("JENKINS-20989") public void allDownstreamProjectsShouldObserveCompletedParent() throws Exception {
    j.jenkins.setNumExecutors(3);
    final FreeStyleProject us=j.createFreeStyleProject();
    us.getPublishersList().add(new SlowTrigger("downstream,downstream2"));
    FreeStyleProject ds=createDownstreamProject();
    ds.getBuildersList().add(new AssertTriggerBuildCompleted(us,j.createWebClient()));
    FreeStyleProject ds2=j.createFreeStyleProject("downstream2");
    ds2.setQuietPeriod(0);
    ds2.getBuildersList().add(new AssertTriggerBuildCompleted(us,j.createWebClient()));
    j.jenkins.rebuildDependencyGraph();
    FreeStyleBuild upstream=j.buildAndAssertSuccess(us);
    FreeStyleBuild dsb=assertDownstreamBuild(ds,upstream);
    j.waitForCompletion(dsb);
    j.assertBuildStatusSuccess(dsb);
    dsb=assertDownstreamBuild(ds2,upstream);
    j.waitForCompletion(dsb);
    j.assertBuildStatusSuccess(dsb);
  }
private static final class SlowTrigger extends BuildTrigger {
private static final class Dep extends Dependency {
      private static boolean block=false;
      private Dep(      AbstractProject upstream,      AbstractProject downstream){
        super(upstream,downstream);
      }
      @Override public boolean shouldTriggerBuild(      AbstractBuild build,      TaskListener listener,      List<Action> actions){
        if (block) {
          try {
            Thread.sleep(5000);
          }
 catch (          InterruptedException ex) {
            throw new AssertionError(ex);
          }
        }
        block=true;
        final boolean should=super.shouldTriggerBuild(build,listener,actions);
        return should;
      }
    }
    public SlowTrigger(    String childProjects){
      super(childProjects,true);
    }
    @Override @SuppressWarnings("rawtypes") public void buildDependencyGraph(    AbstractProject owner,    DependencyGraph graph){
      for (      AbstractProject ch : getChildProjects(owner)) {
        graph.addDependency(new Dep(owner,ch));
      }
    }
  }
private static final class AssertTriggerBuildCompleted extends TestBuilder {
    private final FreeStyleProject us;
    private final WebClient wc;
    private AssertTriggerBuildCompleted(    FreeStyleProject us,    WebClient wc){
      this.us=us;
      this.wc=wc;
    }
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      FreeStyleBuild success=us.getLastSuccessfulBuild();
      FreeStyleBuild last=us.getLastBuild();
      try {
        assertFalse("Upstream build is not completed after downstream started",last.isBuilding());
        assertNotNull("Upstream build permalink not correctly updated",success);
        assertEquals(1,success.getNumber());
      }
 catch (      AssertionError ex) {
        System.err.println("Upstream build log: " + last.getLog());
        throw ex;
      }
      try {
        wc.getPage(us,"lastSuccessfulBuild");
      }
 catch (      SAXException ex) {
        throw new AssertionError(ex);
      }
      return true;
    }
  }
}
