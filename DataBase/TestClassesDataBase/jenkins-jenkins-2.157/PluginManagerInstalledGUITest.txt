/** 
 * @author <a href="mailto:tom.fennelly@gmail.com">tom.fennelly@gmail.com</a>
 */
public class PluginManagerInstalledGUITest {
  @Rule public JenkinsRule jenkinsRule=new JenkinsRule(){
    @Override public PluginManager getPluginManager(){
      try {
        return new TestPluginManager(){
          @Override protected Collection<String> loadBundledPlugins() throws Exception {
            try {
              return super.loadBundledPlugins();
            }
  finally {
              copyBundledPlugin(PluginManagerInstalledGUITest.class.getResource("/WEB-INF/detached-plugins/cvs.hpi"),"cvs.jpi");
              copyBundledPlugin(PluginManagerInstalledGUITest.class.getResource("/plugins/tasks.jpi"),"tasks.jpi");
            }
          }
        }
;
      }
 catch (      IOException e) {
        Assert.fail(e.getMessage());
        return null;
      }
    }
  }
;
  @Test public void test_enable_disable_uninstall() throws IOException, SAXException {
    InstalledPlugins installedPlugins=new InstalledPlugins();
    InstalledPlugin tasksPlugin=installedPlugins.get("tasks");
    InstalledPlugin cvsPlugin=installedPlugins.get("cvs");
    tasksPlugin.assertHasNoDependants();
    cvsPlugin.assertHasDependants();
    tasksPlugin.assertEnabled();
    tasksPlugin.assertEnabledStateChangeable();
    tasksPlugin.assertUninstallable();
    cvsPlugin.assertEnabled();
    cvsPlugin.assertEnabledStateNotChangeable();
    cvsPlugin.assertNotUninstallable();
    tasksPlugin.clickEnabledWidget();
    tasksPlugin.assertNotEnabled();
    tasksPlugin.assertEnabledStateChangeable();
    tasksPlugin.assertUninstallable();
    cvsPlugin.assertEnabled();
    cvsPlugin.assertEnabledStateChangeable();
    cvsPlugin.assertNotUninstallable();
    cvsPlugin.clickEnabledWidget();
    tasksPlugin.assertNotEnabled();
    tasksPlugin.assertEnabledStateNotChangeable();
    tasksPlugin.assertUninstallable();
  }
private class InstalledPlugins {
    private final List<InstalledPlugin> installedPlugins;
    private InstalledPlugins() throws IOException, SAXException {
      JenkinsRule.WebClient webClient=jenkinsRule.createWebClient();
      HtmlPage installedPage=webClient.goTo("pluginManager/installed");
      DomElement pluginsTable=installedPage.getElementById("plugins");
      HtmlElement tbody=pluginsTable.getElementsByTagName("TBODY").get(0);
      installedPlugins=new ArrayList<>();
      for (      DomElement htmlTableRow : tbody.getChildElements()) {
        installedPlugins.add(new InstalledPlugin((HtmlTableRow)htmlTableRow));
      }
    }
    public InstalledPlugin get(    String pluginId){
      for (      InstalledPlugin plugin : installedPlugins) {
        if (plugin.isPlugin(pluginId)) {
          return plugin;
        }
      }
      Assert.fail("Now pluginManager/installed row for plugin " + pluginId);
      return null;
    }
  }
private class InstalledPlugin {
    private final HtmlTableRow pluginRow;
    public InstalledPlugin(    HtmlTableRow pluginRow){
      this.pluginRow=pluginRow;
    }
    public String getId(){
      return pluginRow.getAttribute("data-plugin-id");
    }
    public boolean isPlugin(    String pluginId){
      return pluginId.equals(getId());
    }
    private HtmlInput getEnableWidget(){
      HtmlElement input=pluginRow.getCells().get(0).getElementsByTagName("input").get(0);
      return (HtmlInput)input;
    }
    public void assertEnabled(){
      HtmlInput enableWidget=getEnableWidget();
      Assert.assertTrue("Plugin '" + getId() + "' is expected to be enabled.",enableWidget.isChecked());
    }
    public void assertNotEnabled(){
      HtmlInput enableWidget=getEnableWidget();
      Assert.assertFalse("Plugin '" + getId() + "' is not expected to be enabled.",enableWidget.isChecked());
    }
    public void clickEnabledWidget() throws IOException {
      HtmlInput enableWidget=getEnableWidget();
      HtmlElementUtil.click(enableWidget);
    }
    public void assertEnabledStateChangeable(){
      if (!hasDependants() && !hasDisabledDependency() && !allDependantsDisabled()) {
        return;
      }
      if (allDependantsDisabled() && !hasDisabledDependency()) {
        return;
      }
      Assert.fail("The enable/disable state of plugin '" + getId() + "' cannot be changed.");
    }
    public void assertEnabledStateNotChangeable(){
      if (hasDependants() && !hasDisabledDependency() && !allDependantsDisabled()) {
        return;
      }
      if (!hasDependants() && hasDisabledDependency()) {
        return;
      }
      Assert.fail("The enable/disable state of plugin '" + getId() + "' cannot be changed.");
    }
    public void assertUninstallable(){
      Assert.assertFalse("Plugin '" + getId() + "' cannot be uninstalled.",hasDependants());
    }
    public void assertNotUninstallable(){
      Assert.assertTrue("Plugin '" + getId() + "' can be uninstalled.",hasDependants());
    }
    public void assertHasDependants(){
      Assert.assertTrue(hasDependants());
    }
    public void assertHasNoDependants(){
      Assert.assertFalse(hasDependants());
    }
    private boolean hasClassName(    String className){
      String classAttribute=pluginRow.getAttribute("class");
      Set<String> classes=new HashSet<>(Arrays.asList(classAttribute.split(" ")));
      return classes.contains(className);
    }
    private boolean hasDisabledDependency(){
      return hasClassName("has-disabled-dependency");
    }
    private boolean allDependantsDisabled(){
      return hasClassName("all-dependants-disabled");
    }
    private boolean hasDependants(){
      return hasClassName("has-dependants");
    }
  }
}
