public class ConfirmationLinkTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  private static final String hrefPayload="',document.title='hacked'+'";
  private static final String messagePayload="',document.title='hacked'+'";
  private static final String postPayload="document.title='hacked'";
  @Test public void noInjectionArePossible() throws Exception {
    TestRootAction testParams=j.jenkins.getExtensionList(UnprotectedRootAction.class).get(TestRootAction.class);
    assertNotNull(testParams);
    checkRegularCase(testParams);
    checkRegularCasePost(testParams);
    checkInjectionInHref(testParams);
    checkInjectionInMessage(testParams);
    checkInjectionInPost(testParams);
  }
  private void checkRegularCase(  TestRootAction testParams) throws Exception {
    testParams.paramHref="#";
    testParams.paramMessage="Message to confirm the click";
    testParams.paramClass=null;
    testParams.paramPost=null;
    HtmlPage p=j.createWebClient().goTo("test");
    assertTrue(p.getWebResponse().getContentAsString().contains("Message to confirm the click"));
  }
  private void checkRegularCasePost(  TestRootAction testParams) throws Exception {
    testParams.paramHref="submit";
    testParams.paramMessage="Message to confirm the click";
    testParams.paramClass=null;
    testParams.paramPost=true;
    assertMethodPostAfterClick();
    testParams.paramPost="true";
    assertMethodPostAfterClick();
    testParams.paramPost="TruE";
    assertMethodPostAfterClick();
    testParams.paramPost=false;
    assertMethodGetAfterClick();
    testParams.paramPost="false";
    assertMethodGetAfterClick();
    testParams.paramPost="any other string";
    assertMethodGetAfterClick();
  }
  private void assertMethodGetAfterClick() throws Exception {
    Page pageAfterClick=getPageAfterClick();
    assertTrue(pageAfterClick.getWebResponse().getContentAsString().contains("method:GET"));
  }
  private void assertMethodPostAfterClick() throws Exception {
    Page pageAfterClick=getPageAfterClick();
    assertTrue(pageAfterClick.getWebResponse().getContentAsString().contains("method:POST"));
  }
  private Page getPageAfterClick() throws Exception {
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    HtmlPage p=wc.goTo("test");
    return HtmlElementUtil.click(getClickableLink(p));
  }
  private void checkInjectionInHref(  TestRootAction testParams) throws Exception {
    testParams.paramHref=hrefPayload;
    testParams.paramMessage="Message to confirm the click";
    testParams.paramClass=null;
    testParams.paramPost=null;
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    HtmlPage p=wc.goTo("test");
    Page pageAfterClick=HtmlElementUtil.click(getClickableLink(p));
    assertNotEquals("hacked",p.getTitleText());
    assertTrue(p.getWebResponse().getContentAsString().contains("Message to confirm the click"));
    assertEquals(404,pageAfterClick.getWebResponse().getStatusCode());
  }
  private void checkInjectionInMessage(  TestRootAction testParams) throws Exception {
    testParams.paramHref="#";
    testParams.paramMessage=messagePayload;
    testParams.paramClass=null;
    testParams.paramPost=null;
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    HtmlPage p=wc.goTo("test");
    Page pageAfterClick=HtmlElementUtil.click(getClickableLink(p));
    assertNotEquals("hacked",p.getTitleText());
    assertEquals(200,pageAfterClick.getWebResponse().getStatusCode());
  }
  private void checkInjectionInPost(  TestRootAction testParams) throws Exception {
    testParams.paramHref="#";
    testParams.paramMessage="Message to confirm the click";
    testParams.paramClass=null;
    testParams.paramPost=postPayload;
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    HtmlPage p=wc.goTo("test");
    Page pageAfterClick=HtmlElementUtil.click(getClickableLink(p));
    assertNotEquals("hacked",p.getTitleText());
    assertTrue(p.getWebResponse().getContentAsString().contains("Message to confirm the click"));
    assertEquals(200,pageAfterClick.getWebResponse().getStatusCode());
  }
  private HtmlAnchor getClickableLink(  HtmlPage page){
    DomNodeList<HtmlElement> anchors=page.getElementById("test-panel").getElementsByTagName("a");
    assertEquals(1,anchors.size());
    return (HtmlAnchor)anchors.get(0);
  }
@TestExtension("noInjectionArePossible") public static final class TestRootAction implements UnprotectedRootAction {
    public String paramHref="";
    public String paramMessage="";
    public String paramClass;
    public Object paramPost;
    @Override public @CheckForNull String getIconFileName(){
      return null;
    }
    @Override public @CheckForNull String getDisplayName(){
      return null;
    }
    @Override public String getUrlName(){
      return "test";
    }
    @WebMethod(name="submit") public HttpResponse doSubmit(    StaplerRequest request){
      return HttpResponses.plainText("method:" + request.getMethod());
    }
  }
}
