public class CauseTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Issue("JENKINS-14814") @Test public void deeplyNestedCauses() throws Exception {
    FreeStyleProject a=j.createFreeStyleProject("a");
    FreeStyleProject b=j.createFreeStyleProject("b");
    Run<?,?> early=null;
    Run<?,?> last=null;
    for (int i=1; i <= 15; i++) {
      last=b.scheduleBuild2(0,new Cause.UpstreamCause((Run<?,?>)a.scheduleBuild2(0,last == null ? null : new Cause.UpstreamCause(last)).get())).get();
      if (i == 5) {
        early=last;
      }
    }
    String buildXml=new XmlFile(Run.XSTREAM,new File(early.getRootDir(),"build.xml")).asString();
    assertTrue("keeps full history:\n" + buildXml,buildXml.contains("<upstreamBuild>1</upstreamBuild>"));
    buildXml=new XmlFile(Run.XSTREAM,new File(last.getRootDir(),"build.xml")).asString();
    assertFalse("too big:\n" + buildXml,buildXml.contains("<upstreamBuild>1</upstreamBuild>"));
  }
  @Issue("JENKINS-15747") @Test public void broadlyNestedCauses() throws Exception {
    FreeStyleProject a=j.createFreeStyleProject("a");
    FreeStyleProject b=j.createFreeStyleProject("b");
    FreeStyleProject c=j.createFreeStyleProject("c");
    Run<?,?> last=null;
    for (int i=1; i <= 10; i++) {
      Cause cause=last == null ? null : new Cause.UpstreamCause(last);
      Future<? extends Run<?,?>> next1=a.scheduleBuild2(0,cause);
      a.scheduleBuild2(0,cause);
      cause=new Cause.UpstreamCause(next1.get());
      Future<? extends Run<?,?>> next2=b.scheduleBuild2(0,cause);
      b.scheduleBuild2(0,cause);
      cause=new Cause.UpstreamCause(next2.get());
      Future<? extends Run<?,?>> next3=c.scheduleBuild2(0,cause);
      c.scheduleBuild2(0,cause);
      last=next3.get();
    }
    int count=new XmlFile(Run.XSTREAM,new File(last.getRootDir(),"build.xml")).asString().split(Pattern.quote("<hudson.model.Cause_-UpstreamCause")).length;
    assertFalse("too big at " + count,count > 100);
  }
  @Issue("JENKINS-48467") @Test public void userIdCausePrintTest() throws Exception {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    TaskListener listener=new StreamTaskListener(baos);
    Cause causeA=new Cause.UserIdCause(null);
    causeA.print(listener);
    assertEquals(baos.toString().trim(),"Started by user unknown or anonymous");
    baos.reset();
    Cause causeB=new Cause.UserIdCause();
    causeB.print(listener);
    assertThat(baos.toString(),containsString("SYSTEM"));
    baos.reset();
    Cause causeC=new Cause.UserIdCause("abc123");
    causeC.print(listener);
    assertEquals(baos.toString().trim(),"Started by user unknown or anonymous");
    baos.reset();
    User user=User.getById("foo",true);
    Cause causeD=new Cause.UserIdCause(user.getId());
    causeD.print(listener);
    assertThat(baos.toString(),containsString(user.getDisplayName()));
    baos.reset();
  }
}
