public static class BuildNumberSyncTester implements Runnable {
  private final AbstractProject p;
  private final CountDownLatch start;
  private final CountDownLatch stop;
  private final boolean assign;
  String message;
  boolean passed;
  BuildNumberSyncTester(  AbstractProject p,  CountDownLatch l1,  CountDownLatch l2,  boolean b){
    this.p=p;
    this.start=l1;
    this.stop=l2;
    this.assign=b;
    this.message=null;
    this.passed=false;
  }
  public void run(){
    try {
      start.await();
      for (int i=0; i < 100; i++) {
        int buildNumber=-1, savedBuildNumber=-1;
        TextFile f;
synchronized (p) {
          if (assign) {
            buildNumber=p.assignBuildNumber();
            f=p.getNextBuildNumberFile();
            if (f == null) {
              this.message="Could not get build number file";
              this.passed=false;
              return;
            }
            savedBuildNumber=Integer.parseInt(f.readTrim());
            if (buildNumber != (savedBuildNumber - 1)) {
              this.message="Build numbers don't match (" + buildNumber + ", "+ (savedBuildNumber - 1)+ ")";
              this.passed=false;
              return;
            }
          }
 else {
            buildNumber=p.getNextBuildNumber() + 100;
            p.updateNextBuildNumber(buildNumber);
            f=p.getNextBuildNumberFile();
            if (f == null) {
              this.message="Could not get build number file";
              this.passed=false;
              return;
            }
            savedBuildNumber=Integer.parseInt(f.readTrim());
            if (buildNumber != savedBuildNumber) {
              this.message="Build numbers don't match (" + buildNumber + ", "+ savedBuildNumber+ ")";
              this.passed=false;
              return;
            }
          }
        }
      }
      this.passed=true;
    }
 catch (    InterruptedException e) {
    }
catch (    IOException e) {
      fail("Failed to assign build number");
    }
 finally {
      stop.countDown();
    }
  }
}
