public class ComputerTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test public void discardLogsAfterDeletion() throws Exception {
    DumbSlave delete=j.createOnlineSlave(Jenkins.getInstance().getLabelAtom("delete"));
    DumbSlave keep=j.createOnlineSlave(Jenkins.getInstance().getLabelAtom("keep"));
    File logFile=delete.toComputer().getLogFile();
    assertTrue(logFile.exists());
    Jenkins.getInstance().removeNode(delete);
    assertFalse("Slave log should be deleted",logFile.exists());
    assertFalse("Slave log directory should be deleted",logFile.getParentFile().exists());
    assertTrue("Slave log should be kept",keep.toComputer().getLogFile().exists());
  }
  /** 
 * Verify we can't rename a node over an existing node.
 */
  @Issue("JENKINS-31321") @Test public void testProhibitRenameOverExistingNode() throws Exception {
    final String NOTE="Rename node to name of another node should fail.";
    Node nodeA=j.createSlave("nodeA",null,null);
    Node nodeB=j.createSlave("nodeB",null,null);
    WebClient wc=j.createWebClient();
    HtmlForm form=wc.getPage(nodeB,"configure").getFormByName("config");
    form.getInputByName("_.name").setValueAttribute("nodeA");
    try {
      j.submit(form);
      fail(NOTE);
    }
 catch (    FailingHttpStatusCodeException e) {
      assertThat(NOTE,e.getStatusCode(),equalTo(400));
      assertThat(NOTE,e.getResponse().getContentAsString(),containsString("Agent called ‘nodeA’ already exists"));
    }
  }
  @Test public void doNotShowUserDetailsInOfflineCause() throws Exception {
    DumbSlave slave=j.createOnlineSlave();
    final Computer computer=slave.toComputer();
    computer.setTemporarilyOffline(true,new OfflineCause.UserCause(User.get("username"),"msg"));
    verifyOfflineCause(computer);
  }
  @Test @LocalData public void removeUserDetailsFromOfflineCause() throws Exception {
    Computer computer=j.jenkins.getComputer("deserialized");
    verifyOfflineCause(computer);
  }
  private void verifyOfflineCause(  Computer computer) throws Exception {
    XmlPage page=j.createWebClient().goToXml("computer/" + computer.getName() + "/config.xml");
    String content=page.getWebResponse().getContentAsString("UTF-8");
    assertThat(content,containsString("temporaryOfflineCause"));
    assertThat(content,containsString("<userId>username</userId>"));
    assertThat(content,not(containsString("ApiTokenProperty")));
    assertThat(content,not(containsString("apiToken")));
  }
  @Issue("JENKINS-42969") @Test public void addAction() throws Exception {
    Computer c=j.createSlave().toComputer();
class A extends InvisibleAction {
    }
    assertEquals(0,c.getActions(A.class).size());
    c.addAction(new A());
    assertEquals(1,c.getActions(A.class).size());
    c.addAction(new A());
    assertEquals(2,c.getActions(A.class).size());
  }
}
