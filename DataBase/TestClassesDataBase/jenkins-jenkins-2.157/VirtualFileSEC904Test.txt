public class VirtualFileSEC904Test {
  @Rule public TemporaryFolder tmp=new TemporaryFolder();
  private void prepareFileStructureForIsDescendant() throws Exception {
    File root=tmp.getRoot();
    File a=new File(root,"a");
    File aa=new File(a,"aa");
    File aaa=new File(aa,"aaa");
    aaa.mkdirs();
    File aaTxt=new File(aa,"aa.txt");
    FileUtils.write(aaTxt,"aa");
    File ab=new File(a,"ab");
    ab.mkdirs();
    File abTxt=new File(ab,"ab.txt");
    FileUtils.write(abTxt,"ab");
    File b=new File(root,"b");
    File ba=new File(b,"ba");
    ba.mkdirs();
    File baTxt=new File(ba,"ba.txt");
    FileUtils.write(baTxt,"ba");
    File _a=new File(b,"_a");
    new FilePath(_a).symlinkTo(a.getAbsolutePath(),TaskListener.NULL);
    File _b=new File(a,"_b");
    new FilePath(_b).symlinkTo(b.getAbsolutePath(),TaskListener.NULL);
    File _b2=new File(aaa,"_b2");
    new FilePath(_b2).symlinkTo(b.getAbsolutePath(),TaskListener.NULL);
  }
  @Issue("SECURITY-904") @Test public void forFile_isDescendant() throws Exception {
    this.prepareFileStructureForIsDescendant();
    File root=tmp.getRoot();
    File a=new File(root,"a");
    File aa=new File(a,"aa");
    VirtualFile virtualRoot=VirtualFile.forFile(root);
    VirtualFile virtualRootChildA=virtualRoot.child("a");
    VirtualFile virtualFromA=VirtualFile.forFile(a);
    checkCommonAssertionForIsDescendant(virtualRoot,virtualRootChildA,virtualFromA,aa.getAbsolutePath());
  }
  @Test @Issue("SECURITY-904") public void forFilePath_isDescendant() throws Exception {
    this.prepareFileStructureForIsDescendant();
    File root=tmp.getRoot();
    File a=new File(root,"a");
    File aa=new File(a,"aa");
    VirtualFile virtualRoot=VirtualFile.forFilePath(new FilePath(root));
    VirtualFile virtualRootChildA=virtualRoot.child("a");
    VirtualFile virtualFromA=VirtualFile.forFilePath(new FilePath(a));
    checkCommonAssertionForIsDescendant(virtualRoot,virtualRootChildA,virtualFromA,aa.getAbsolutePath());
  }
  private void checkCommonAssertionForIsDescendant(  VirtualFile virtualRoot,  VirtualFile virtualRootChildA,  VirtualFile virtualFromA,  String absolutePath) throws Exception {
    try {
      virtualRootChildA.isDescendant(absolutePath);
      fail("isDescendant should have refused the absolute path");
    }
 catch (    IllegalArgumentException e) {
    }
    assertTrue(virtualRootChildA.isDescendant("aa"));
    assertTrue(virtualRootChildA.isDescendant("aa/aa.txt"));
    assertTrue(virtualRootChildA.isDescendant("aa\\aa.txt"));
    assertTrue(virtualRootChildA.isDescendant("ab"));
    assertTrue(virtualRootChildA.isDescendant("ab/ab.txt"));
    assertTrue(virtualRootChildA.isDescendant("ab//ab.txt"));
    assertTrue(virtualRootChildA.isDescendant("ab/nonExistingFile.txt"));
    assertTrue(virtualRootChildA.isDescendant("nonExistingFolder"));
    assertTrue(virtualRootChildA.isDescendant("nonExistingFolder/nonExistingFile.txt"));
    assertTrue(virtualRootChildA.isDescendant("_b"));
    assertTrue(virtualRootChildA.isDescendant("_b/ba"));
    assertTrue(virtualRootChildA.isDescendant("_b/ba/ba.txt"));
    assertTrue(virtualRootChildA.isDescendant("aa/aaa/_b2"));
    assertTrue(virtualRootChildA.isDescendant("aa/aaa/_b2/ba"));
    assertTrue(virtualRootChildA.isDescendant("aa/aaa/_b2/ba/ba.txt"));
    assertTrue(virtualRootChildA.isDescendant("_b/ba/ba-unexistingFile.txt"));
    assertTrue(virtualRootChildA.isDescendant("_b/_a"));
    assertTrue(virtualRootChildA.isDescendant("_b/_a/aa"));
    assertTrue(virtualRootChildA.isDescendant("_b/_a/aa/aa.txt"));
    assertTrue(virtualFromA.isDescendant("aa"));
    assertFalse(virtualFromA.isDescendant("_b"));
    assertFalse(virtualFromA.isDescendant("_b/ba/ba-unexistingFile.txt"));
    assertFalse(virtualFromA.isDescendant("_b/_a"));
    assertFalse(virtualFromA.isDescendant("_b/_a/aa"));
    assertFalse(virtualFromA.isDescendant("_b/_a/aa/aa.txt"));
    assertFalse(virtualFromA.isDescendant("aa/aaa/_b2"));
    assertFalse(virtualFromA.isDescendant("aa/aaa/_b2/ba"));
    assertFalse(virtualFromA.isDescendant("aa/aaa/_b2/ba/ba.txt"));
    assertTrue(virtualRoot.isDescendant("aa"));
    assertTrue(virtualRoot.isDescendant("aa/aa.txt"));
    assertTrue(virtualRoot.isDescendant("ab"));
    assertTrue(virtualRoot.isDescendant("ab/ab.txt"));
    assertTrue(virtualRoot.isDescendant("ab/nonExistingFile.txt"));
    assertTrue(virtualRoot.isDescendant("nonExistingFolder"));
    assertTrue(virtualRoot.isDescendant("nonExistingFolder/nonExistingFile.txt"));
    assertTrue(virtualRoot.isDescendant("_b"));
    assertTrue(virtualRoot.isDescendant("_b/ba"));
    assertTrue(virtualRoot.isDescendant("_b/ba/ba.txt"));
    assertTrue(virtualRoot.isDescendant("_b/_a"));
    assertTrue(virtualRoot.isDescendant("_b/_a/aa"));
    assertTrue(virtualRoot.isDescendant("_b/_a/aa/"));
    assertTrue(virtualRoot.isDescendant("_b/_a/aa/../ab/ab.txt"));
    assertTrue(virtualRoot.isDescendant("_b/_a/aa/aa.txt"));
  }
}
