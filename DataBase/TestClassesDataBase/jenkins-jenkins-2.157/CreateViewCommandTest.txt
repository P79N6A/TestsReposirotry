public class CreateViewCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,new CreateViewCommand());
  }
  @Test public void createViewShouldFailWithoutViewCreatePermission(){
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).withStdin(this.getClass().getResourceAsStream("/hudson/cli/view.xml")).invoke();
    assertThat(result,failedWith(6));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: user is missing the View/Create permission"));
  }
  @Test public void createViewShouldSucceed(){
    final CLICommandInvoker.Result result=command.authorizedTo(View.CREATE,Jenkins.READ).withStdin(this.getClass().getResourceAsStream("/hudson/cli/view.xml")).invoke();
    assertThat(result,succeededSilently());
    final View updatedView=j.jenkins.getView("ViewFromXML");
    assertThat(updatedView.getViewName(),equalTo("ViewFromXML"));
    assertThat(updatedView.isFilterExecutors(),equalTo(true));
    assertThat(updatedView.isFilterQueue(),equalTo(false));
  }
  @Test public void createViewSpecifyingNameExplicitlyShouldSucceed(){
    final CLICommandInvoker.Result result=command.authorizedTo(View.CREATE,Jenkins.READ).withStdin(this.getClass().getResourceAsStream("/hudson/cli/view.xml")).invokeWithArgs("CustomViewName");
    assertThat(result,succeededSilently());
    assertThat("A view with original name should not exist",j.jenkins.getView("ViewFromXML"),nullValue());
    final View updatedView=j.jenkins.getView("CustomViewName");
    assertThat(updatedView.getViewName(),equalTo("CustomViewName"));
    assertThat(updatedView.isFilterExecutors(),equalTo(true));
    assertThat(updatedView.isFilterQueue(),equalTo(false));
  }
  @Test public void createViewShouldFailIfViewAlreadyExists() throws IOException {
    j.jenkins.addView(new ListView("ViewFromXML"));
    final CLICommandInvoker.Result result=command.authorizedTo(View.CREATE,Jenkins.READ).withStdin(this.getClass().getResourceAsStream("/hudson/cli/view.xml")).invoke();
    assertThat(result,failedWith(4));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: View 'ViewFromXML' already exists"));
  }
  @Test public void createViewShouldFailUsingInvalidName(){
    final CLICommandInvoker.Result result=command.authorizedTo(View.CREATE,Jenkins.READ).withStdin(this.getClass().getResourceAsStream("/hudson/cli/view.xml")).invokeWithArgs("..");
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: Invalid view name"));
  }
}
