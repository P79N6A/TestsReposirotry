/** 
 * This class tests that environment variables from node properties are applied, and that the priority is maintained: parameters > slave node properties > master node properties
 */
public class ToolLocationNodePropertyTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Rule public TemporaryFolder tmp=new TemporaryFolder();
  private DumbSlave slave;
  private FreeStyleProject project;
  @Test public void formRoundTrip() throws Exception {
    MavenInstallation.DescriptorImpl mavenDescriptor=j.jenkins.getDescriptorByType(MavenInstallation.DescriptorImpl.class);
    mavenDescriptor.setInstallations(new MavenInstallation("maven","XXX",j.NO_PROPERTIES));
    AntInstallation.DescriptorImpl antDescriptor=j.jenkins.getDescriptorByType(AntInstallation.DescriptorImpl.class);
    antDescriptor.setInstallations(new AntInstallation("ant","XXX",j.NO_PROPERTIES));
    JDK.DescriptorImpl jdkDescriptor=j.jenkins.getDescriptorByType(JDK.DescriptorImpl.class);
    jdkDescriptor.setInstallations(new JDK("jdk","XXX"));
    ToolLocationNodeProperty property=new ToolLocationNodeProperty(new ToolLocationNodeProperty.ToolLocation(jdkDescriptor,"jdk","foobar"),new ToolLocationNodeProperty.ToolLocation(mavenDescriptor,"maven","barzot"),new ToolLocationNodeProperty.ToolLocation(antDescriptor,"ant","zotfoo"));
    slave.getNodeProperties().add(property);
    WebClient webClient=j.createWebClient();
    HtmlPage page=webClient.getPage(slave,"configure");
    HtmlForm form=page.getFormByName("config");
    j.submit(form);
    assertEquals(1,slave.getNodeProperties().toList().size());
    ToolLocationNodeProperty prop=slave.getNodeProperties().get(ToolLocationNodeProperty.class);
    assertEquals(3,prop.getLocations().size());
    ToolLocationNodeProperty.ToolLocation location=prop.getLocations().get(0);
    assertEquals(jdkDescriptor,location.getType());
    assertEquals("jdk",location.getName());
    assertEquals("foobar",location.getHome());
    location=prop.getLocations().get(1);
    assertEquals(mavenDescriptor,location.getType());
    assertEquals("maven",location.getName());
    assertEquals("barzot",location.getHome());
    location=prop.getLocations().get(2);
    assertEquals(antDescriptor,location.getType());
    assertEquals("ant",location.getName());
    assertEquals("zotfoo",location.getHome());
  }
  @Test public void maven() throws Exception {
    MavenInstallation maven=ToolInstallations.configureDefaultMaven();
    String mavenPath=maven.getHome();
    Jenkins.getInstance().getDescriptorByType(Maven.DescriptorImpl.class).setInstallations(new MavenInstallation("maven","THIS IS WRONG",j.NO_PROPERTIES));
    project.getBuildersList().add(new Maven("--version","maven"));
    configureDumpEnvBuilder();
    Build build=project.scheduleBuild2(0).get();
    j.assertBuildStatus(Result.FAILURE,build);
    ToolLocationNodeProperty property=new ToolLocationNodeProperty(new ToolLocationNodeProperty.ToolLocation(j.jenkins.getDescriptorByType(MavenInstallation.DescriptorImpl.class),"maven",mavenPath));
    slave.getNodeProperties().add(property);
    build=project.scheduleBuild2(0).get();
    j.assertBuildStatus(Result.SUCCESS,build);
  }
  private void configureDumpEnvBuilder() throws IOException {
    if (Functions.isWindows())     project.getBuildersList().add(new BatchFile("set"));
 else     project.getBuildersList().add(new Shell("export"));
  }
  @Test public void ant() throws Exception {
    Ant.AntInstallation ant=ToolInstallations.configureDefaultAnt(tmp);
    String antPath=ant.getHome();
    Jenkins.getInstance().getDescriptorByType(Ant.DescriptorImpl.class).setInstallations(new AntInstallation("ant","THIS IS WRONG"));
    project.setScm(new SingleFileSCM("build.xml","<project name='foo'/>"));
    project.getBuildersList().add(new Ant("-version","ant",null,null,null));
    configureDumpEnvBuilder();
    Build build=project.scheduleBuild2(0).get();
    j.assertBuildStatus(Result.FAILURE,build);
    ToolLocationNodeProperty property=new ToolLocationNodeProperty(new ToolLocationNodeProperty.ToolLocation(j.jenkins.getDescriptorByType(AntInstallation.DescriptorImpl.class),"ant",antPath));
    slave.getNodeProperties().add(property);
    build=project.scheduleBuild2(0).get();
    System.out.println(build.getLog());
    j.assertBuildStatus(Result.SUCCESS,build);
  }
  @Test public void nativeMaven() throws Exception {
    MavenInstallation maven=ToolInstallations.configureDefaultMaven();
    String mavenPath=maven.getHome();
    Jenkins.getInstance().getDescriptorByType(Maven.DescriptorImpl.class).setInstallations(new MavenInstallation("maven","THIS IS WRONG",j.NO_PROPERTIES));
    MavenModuleSet project=j.jenkins.createProject(MavenModuleSet.class,"p");
    project.setScm(new ExtractResourceSCM(getClass().getResource("/simple-projects.zip")));
    project.setAssignedLabel(slave.getSelfLabel());
    project.setJDK(j.jenkins.getJDK("default"));
    project.setMaven("maven");
    project.setGoals("clean");
    Run build=project.scheduleBuild2(0).get();
    j.assertBuildStatus(Result.FAILURE,build);
    ToolLocationNodeProperty property=new ToolLocationNodeProperty(new ToolLocationNodeProperty.ToolLocation(j.jenkins.getDescriptorByType(MavenInstallation.DescriptorImpl.class),"maven",mavenPath));
    slave.getNodeProperties().add(property);
    build=project.scheduleBuild2(0).get();
    System.out.println(build.getLog());
    j.assertBuildStatus(Result.SUCCESS,build);
  }
  @Before public void setUp() throws Exception {
    EnvVars env=new EnvVars();
    env.put("PATH","/bin:/usr/bin");
    env.put("M2_HOME","empty");
    slave=j.createSlave(new LabelAtom("slave"),env);
    project=j.createFreeStyleProject();
    project.setAssignedLabel(slave.getSelfLabel());
  }
}
