public class RunParameterDefinitionTest {
  private static final Logger LOGGER=Logger.getLogger(Run.class.getName());
  @Rule public JenkinsRule j=new JenkinsRule();
  @Issue("JENKINS-31954") @Test public void configRoundtrip() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    p.addProperty(new ParametersDefinitionProperty(new RunParameterDefinition("build","p","",RunParameterFilter.COMPLETED)));
    j.configRoundtrip(p);
    RunParameterDefinition rpd=(RunParameterDefinition)p.getProperty(ParametersDefinitionProperty.class).getParameterDefinition("build");
    assertEquals("p",rpd.getProjectName());
    assertEquals(RunParameterFilter.COMPLETED,rpd.getFilter());
  }
  @Issue("JENKINS-16462") @Test public void inFolders() throws Exception {
    MockFolder dir=j.createFolder("dir");
    MockFolder subdir=dir.createProject(MockFolder.class,"sub dir");
    FreeStyleProject p=subdir.createProject(FreeStyleProject.class,"some project");
    p.scheduleBuild2(0).get();
    FreeStyleBuild build2=p.scheduleBuild2(0).get();
    p.scheduleBuild2(0).get();
    String id=build2.getExternalizableId();
    assertEquals("dir/sub dir/some project#2",id);
    assertEquals(build2,Run.fromExternalizableId(id));
    RunParameterDefinition def=new RunParameterDefinition("build","dir/sub dir/some project","my build",null);
    assertEquals("dir/sub dir/some project",def.getProjectName());
    assertEquals(p,def.getProject());
    EnvVars env=new EnvVars();
    def.getDefaultParameterValue().buildEnvironment(null,env);
    assertEquals(j.jenkins.getRootUrl() + "job/dir/job/sub%20dir/job/some%20project/3/",env.get("build"));
    RunParameterValue val=def.createValue(id);
    assertEquals(build2,val.getRun());
    assertEquals("dir/sub dir/some project",val.getJobName());
    assertEquals("2",val.getNumber());
    val.buildEnvironment(null,env);
    assertEquals(j.jenkins.getRootUrl() + "job/dir/job/sub%20dir/job/some%20project/2/",env.get("build"));
    assertEquals("dir/sub dir/some project",env.get("build.jobName"));
    assertEquals("dir/sub dir/some project",env.get("build_JOBNAME"));
    assertEquals("2",env.get("build.number"));
    assertEquals("2",env.get("build_NUMBER"));
  }
  @Test public void testNULLFilter() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("project");
    FreeStyleBuild successfulBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.UNSTABLE)));
    FreeStyleBuild unstableBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.FAILURE)));
    FreeStyleBuild failedBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.NOT_BUILT)));
    FreeStyleBuild notBuiltBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.ABORTED)));
    FreeStyleBuild abortedBuild=project.scheduleBuild2(0).get();
    FreeStyleProject paramProject=j.createFreeStyleProject("paramProject");
    ParametersDefinitionProperty pdp=new ParametersDefinitionProperty(new RunParameterDefinition("RUN",project.getName(),"run description",null));
    paramProject.addProperty(pdp);
    FreeStyleBuild build=paramProject.scheduleBuild2(0).get();
    assertEquals(Integer.toString(project.getLastBuild().getNumber()),build.getEnvironment(new LogTaskListener(LOGGER,Level.INFO)).get("RUN_NUMBER"));
  }
  @Test public void testALLFilter() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("project");
    FreeStyleBuild successfulBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.UNSTABLE)));
    FreeStyleBuild unstableBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.FAILURE)));
    FreeStyleBuild failedBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.NOT_BUILT)));
    FreeStyleBuild notBuiltBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.ABORTED)));
    FreeStyleBuild abortedBuild=project.scheduleBuild2(0).get();
    FreeStyleProject paramProject=j.createFreeStyleProject("paramProject");
    ParametersDefinitionProperty pdp=new ParametersDefinitionProperty(new RunParameterDefinition("RUN",project.getName(),"run description",RunParameterFilter.ALL));
    paramProject.addProperty(pdp);
    FreeStyleBuild build=paramProject.scheduleBuild2(0).get();
    assertEquals(Integer.toString(project.getLastBuild().getNumber()),build.getEnvironment(new LogTaskListener(LOGGER,Level.INFO)).get("RUN_NUMBER"));
  }
  @Test public void testCOMPLETEDFilter() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("project");
    FreeStyleBuild successfulBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.UNSTABLE)));
    FreeStyleBuild unstableBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.FAILURE)));
    FreeStyleBuild failedBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.NOT_BUILT)));
    FreeStyleBuild notBuiltBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.ABORTED)));
    FreeStyleBuild abortedBuild=project.scheduleBuild2(0).get();
    FreeStyleProject paramProject=j.createFreeStyleProject("paramProject");
    ParametersDefinitionProperty pdp=new ParametersDefinitionProperty(new RunParameterDefinition("RUN",project.getName(),"run description",RunParameterFilter.COMPLETED));
    paramProject.addProperty(pdp);
    FreeStyleBuild build=paramProject.scheduleBuild2(0).get();
    assertEquals(Integer.toString(abortedBuild.getNumber()),build.getEnvironment(new LogTaskListener(LOGGER,Level.INFO)).get("RUN_NUMBER"));
  }
  @Test public void testSUCCESSFULFilter() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("project");
    FreeStyleBuild successfulBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.UNSTABLE)));
    FreeStyleBuild unstableBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.FAILURE)));
    FreeStyleBuild failedBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.NOT_BUILT)));
    FreeStyleBuild notBuiltBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.ABORTED)));
    FreeStyleBuild abortedBuild=project.scheduleBuild2(0).get();
    FreeStyleProject paramProject=j.createFreeStyleProject("paramProject");
    ParametersDefinitionProperty pdp=new ParametersDefinitionProperty(new RunParameterDefinition("RUN",project.getName(),"run description",RunParameterFilter.SUCCESSFUL));
    paramProject.addProperty(pdp);
    FreeStyleBuild build=paramProject.scheduleBuild2(0).get();
    assertEquals(Integer.toString(unstableBuild.getNumber()),build.getEnvironment(new LogTaskListener(LOGGER,Level.INFO)).get("RUN_NUMBER"));
  }
  @Test public void testSTABLEFilter() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("project");
    FreeStyleBuild successfulBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.UNSTABLE)));
    FreeStyleBuild unstableBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.FAILURE)));
    FreeStyleBuild failedBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.NOT_BUILT)));
    FreeStyleBuild notBuiltBuild=project.scheduleBuild2(0).get();
    project.getPublishersList().replaceBy(Collections.singleton(new ResultPublisher(Result.ABORTED)));
    FreeStyleBuild abortedBuild=project.scheduleBuild2(0).get();
    FreeStyleProject paramProject=j.createFreeStyleProject("paramProject");
    ParametersDefinitionProperty pdp=new ParametersDefinitionProperty(new RunParameterDefinition("RUN",project.getName(),"run description",RunParameterFilter.STABLE));
    paramProject.addProperty(pdp);
    FreeStyleBuild build=paramProject.scheduleBuild2(0).get();
    assertEquals(Integer.toString(successfulBuild.getNumber()),build.getEnvironment(new LogTaskListener(LOGGER,Level.INFO)).get("RUN_NUMBER"));
  }
  @Test public void testLoadEnvironmentVariablesWhenRunParameterJobHasBeenDeleted() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject("project");
    FreeStyleBuild successfulBuild=project.scheduleBuild2(0).get();
    FreeStyleProject paramProject=j.createFreeStyleProject("paramProject");
    ParametersDefinitionProperty pdp=new ParametersDefinitionProperty(new RunParameterDefinition("RUN",project.getName(),"run description",RunParameterFilter.ALL));
    paramProject.addProperty(pdp);
    FreeStyleBuild build=paramProject.scheduleBuild2(0).get();
    assertEquals(Integer.toString(project.getLastBuild().getNumber()),build.getEnvironment(new LogTaskListener(LOGGER,Level.INFO)).get("RUN_NUMBER"));
    successfulBuild.delete();
    assertEquals("paramProject",build.getEnvironment(new LogTaskListener(LOGGER,Level.INFO)).get("JOB_NAME"));
  }
static class ResultPublisher extends Publisher {
    private final Result result;
    public ResultPublisher(    Result result){
      this.result=result;
    }
    public @Override boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener){
      build.setResult(result);
      return true;
    }
    public BuildStepMonitor getRequiredMonitorService(){
      return BuildStepMonitor.NONE;
    }
    public Descriptor<Publisher> getDescriptor(){
      return new Descriptor<Publisher>(ResultPublisher.class){
      }
;
    }
  }
}
