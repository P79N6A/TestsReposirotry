public class BuildExecutionTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @Issue("JENKINS-26698") @Test public void workspaceReliablyReleased() throws Exception {
    FreeStyleProject p=r.createFreeStyleProject();
    p.getPublishersList().add(new BrokenPublisher());
    FreeStyleBuild b=r.assertBuildStatus(Result.FAILURE,p.scheduleBuild2(0).get());
    r.assertLogContains(Messages.Build_post_build_steps_failed(),b);
    FilePath ws=r.jenkins.getWorkspaceFor(p);
    WorkspaceList.Lease lease=r.jenkins.toComputer().getWorkspaceList().allocate(ws);
    try {
      assertEquals(ws,lease.path);
    }
  finally {
      lease.close();
    }
  }
@SuppressWarnings("unchecked") private static class BrokenPublisher extends Notifier {
    @Override public boolean needsToRunAfterFinalized(){
      throw new IllegalStateException("oops");
    }
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      return true;
    }
    @Override public BuildStepMonitor getRequiredMonitorService(){
      return BuildStepMonitor.NONE;
    }
  }
}
