public class QueueSEC891Test {
  @Rule public JenkinsRule r=new NodeProvisionerRule(-1,0,10);
  @Test public void doCancelItem_PermissionIsChecked() throws Exception {
    checkCancelOperationUsingUrl(item -> "queue/cancelItem?id=" + item.getId());
  }
  @Test public void doCancelQueue_PermissionIsChecked() throws Exception {
    checkCancelOperationUsingUrl(item -> "queue/item/" + item.getId() + "/cancelQueue");
  }
  private void checkCancelOperationUsingUrl(  Function<Queue.Item,String> urlProvider) throws Exception {
    Queue q=r.jenkins.getQueue();
    r.jenkins.setCrumbIssuer(null);
    r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
    r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ,Item.CANCEL).everywhere().to("admin").grant(Jenkins.READ).everywhere().to("user"));
    r.jenkins.setNumExecutors(0);
    assertThat(q.getItems().length,equalTo(0));
    FreeStyleProject testProject=r.createFreeStyleProject("test");
    testProject.scheduleBuild(new UserIdCause());
    Queue.Item[] items=q.getItems();
    assertThat(items.length,equalTo(1));
    Queue.Item currentOne=items[0];
    assertFalse(currentOne.getFuture().isCancelled());
    WebRequest request=new WebRequest(new URL(r.getURL() + urlProvider.apply(currentOne)),HttpMethod.POST);
{
      JenkinsRule.WebClient wc=r.createWebClient();
      wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
      wc.getOptions().setRedirectEnabled(false);
      wc.login("user");
      Page p=wc.getPage(request);
      assertThat(p.getWebResponse().getStatusCode(),lessThan(400));
      assertFalse(currentOne.getFuture().isCancelled());
    }
{
      JenkinsRule.WebClient wc=r.createWebClient();
      wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
      wc.getOptions().setRedirectEnabled(false);
      wc.login("admin");
      Page p=wc.getPage(request);
      assertThat(p.getWebResponse().getStatusCode(),lessThan(400));
      assertTrue(currentOne.getFuture().isCancelled());
    }
  }
}
