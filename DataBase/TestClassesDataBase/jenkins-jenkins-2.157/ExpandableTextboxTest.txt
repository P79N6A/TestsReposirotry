/** 
 * @author Kohsuke Kawaguchi
 */
public class ExpandableTextboxTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Issue("JENKINS-2816") @Test public void testMultiline() throws Exception {
    j.jenkins.setSystemMessage("foo\nbar\nzot");
    HtmlPage page=evaluateAsHtml("<l:layout><l:main-panel><table><j:set var='instance' value='${it}'/><f:expandableTextbox field='systemMessage' /></table></l:main-panel></l:layout>");
    NodeList textareas=page.getElementsByTagName("textarea");
    assertEquals(1,textareas.getLength());
    assertEquals(j.jenkins.getSystemMessage(),textareas.item(0).getTextContent());
  }
  /** 
 * Evaluates the literal Jelly script passed as a parameter as HTML and returns the page.
 */
  protected HtmlPage evaluateAsHtml(  String jellyScript) throws Exception {
    JenkinsRule.WebClient wc=j.createWebClient();
    WebRequest req=new WebRequest(wc.createCrumbedUrl("eval"),POST);
    req.setEncodingType(null);
    req.setRequestBody("<j:jelly xmlns:j='jelly:core' xmlns:st='jelly:stapler' xmlns:l='/lib/layout' xmlns:f='/lib/form'>" + jellyScript + "</j:jelly>");
    Page page=wc.getPage(req);
    return (HtmlPage)page;
  }
  @Test public void noInjectionArePossible() throws Exception {
    TestRootAction testParams=j.jenkins.getExtensionList(UnprotectedRootAction.class).get(TestRootAction.class);
    assertNotNull(testParams);
    checkRegularCase(testParams);
    checkInjectionInName(testParams);
  }
  private void checkRegularCase(  TestRootAction testParams) throws Exception {
    testParams.paramName="testName";
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    HtmlPage p=wc.goTo("test");
    HtmlElementUtil.click(getExpandButton(p));
    assertNotEquals("hacked",p.getTitleText());
  }
  private void checkInjectionInName(  TestRootAction testParams) throws Exception {
    testParams.paramName="testName',document.title='hacked'+'";
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    HtmlPage p=wc.goTo("test");
    HtmlElementUtil.click(getExpandButton(p));
    assertNotEquals("hacked",p.getTitleText());
  }
  private HtmlButtonInput getExpandButton(  HtmlPage page){
    DomNodeList<HtmlElement> buttons=page.getElementById("test-panel").getElementsByTagName("input");
    assertEquals(2,buttons.size());
    return (HtmlButtonInput)buttons.get(1);
  }
@TestExtension("noInjectionArePossible") public static final class TestRootAction implements UnprotectedRootAction {
    public String paramName;
    @Override public @CheckForNull String getIconFileName(){
      return null;
    }
    @Override public @CheckForNull String getDisplayName(){
      return null;
    }
    @Override public String getUrlName(){
      return "test";
    }
    @WebMethod(name="submit") public HttpResponse doSubmit(    StaplerRequest request){
      return HttpResponses.plainText("method:" + request.getMethod());
    }
  }
}
