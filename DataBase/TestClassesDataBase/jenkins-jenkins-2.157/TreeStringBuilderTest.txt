/** 
 * Tests the class  {@link TreeStringBuilder}.
 * @author Kohsuke Kawaguchi
 */
@SuppressWarnings({"PMD","all"}) public class TreeStringBuilderTest {
  /** 
 * Tests the simple operations inside the builder.
 */
  @Test public void test(){
    TreeStringBuilder b=new TreeStringBuilder();
    verify("foo",b.intern("foo"));
    TreeString s=b.intern("foo/bar/zot");
    verify("foo/bar/zot",s);
    verify("",b.intern(""));
    verify("foo/bar/xxx",b.intern("foo/bar/xxx"));
    verify("foo/bar/zot",s);
  }
  /** 
 * Pseudo random (but deterministic) test.
 */
  @Test public void testRandom(){
    String[] dict=new String[]{"aa","b","aba","ba"};
    TreeStringBuilder x=new TreeStringBuilder();
    Random r=new Random(0);
    List<String> a=new ArrayList<String>();
    List<TreeString> o=new ArrayList<TreeString>();
    for (int i=0; i < 1000; i++) {
      StringBuilder b=new StringBuilder();
      for (int j=0; j < r.nextInt(10) + 3; j++) {
        b.append(dict[r.nextInt(4)]);
      }
      String s=b.toString();
      a.add(s);
      TreeString p=x.intern(s);
      verify(s,p);
      o.add(p);
    }
    for (int i=0; i < a.size(); i++) {
      verify(a.get(i),o.get(i));
    }
    x.dedup();
    for (int i=0; i < a.size(); i++) {
      verify(a.get(i),o.get(i));
    }
  }
  private void verify(  final String s,  final TreeString t){
    assertEquals(s,t.toString());
  }
}
