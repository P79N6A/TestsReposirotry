public class LegacyApiTokenAdministrativeMonitorTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  private enum SelectFilter {  ALL(0),   ONLY_FRESH(1),   ONLY_RECENT(2);   int index;
  SelectFilter(  int index){
    this.index=index;
  }
}
  @Test public void isActive() throws Exception {
    ApiTokenPropertyConfiguration config=ApiTokenPropertyConfiguration.get();
    config.setCreationOfLegacyTokenEnabled(true);
    config.setTokenGenerationOnCreationEnabled(false);
    User user=User.getById("user",true);
    ApiTokenProperty apiTokenProperty=user.getProperty(ApiTokenProperty.class);
    assertFalse(apiTokenProperty.hasLegacyToken());
    LegacyApiTokenAdministrativeMonitor monitor=j.jenkins.getExtensionList(AdministrativeMonitor.class).get(LegacyApiTokenAdministrativeMonitor.class);
    assertFalse(monitor.isActivated());
    ApiTokenStore.TokenUuidAndPlainValue tokenInfo=apiTokenProperty.getTokenStore().generateNewToken("Not Legacy");
    assertFalse(monitor.isActivated());
    apiTokenProperty.getTokenStore().revokeToken(tokenInfo.tokenUuid);
    assertFalse(monitor.isActivated());
    apiTokenProperty.changeApiToken();
    assertTrue(monitor.isActivated());
  }
  @Test @Issue("JENKINS-52441") public void takeCareOfUserWithIdNull() throws Exception {
    ApiTokenPropertyConfiguration config=ApiTokenPropertyConfiguration.get();
    config.setCreationOfLegacyTokenEnabled(true);
    config.setTokenGenerationOnCreationEnabled(false);
    User user=User.getById("null",true);
    ApiTokenProperty apiTokenProperty=user.getProperty(ApiTokenProperty.class);
    assertFalse(apiTokenProperty.hasLegacyToken());
    LegacyApiTokenAdministrativeMonitor monitor=j.jenkins.getExtensionList(AdministrativeMonitor.class).get(LegacyApiTokenAdministrativeMonitor.class);
    assertFalse(monitor.isActivated());
    apiTokenProperty.changeApiToken();
    assertTrue(monitor.isActivated());
{
      JenkinsRule.WebClient wc=j.createWebClient();
      HtmlPage page=wc.goTo(monitor.getUrl() + "/manage");
{
        HtmlAnchor filterAll=getFilterByIndex(page,SelectFilter.ALL);
        HtmlElementUtil.click(filterAll);
      }
      HtmlButton revokeSelected=getRevokeSelected(page);
      HtmlElementUtil.click(revokeSelected);
    }
    assertFalse(monitor.isActivated());
  }
  @Test public void listOfUserWithLegacyTokenIsCorrect() throws Exception {
    j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
    ApiTokenPropertyConfiguration config=ApiTokenPropertyConfiguration.get();
    config.setCreationOfLegacyTokenEnabled(true);
    config.setTokenGenerationOnCreationEnabled(false);
    LegacyApiTokenAdministrativeMonitor monitor=j.jenkins.getExtensionList(AdministrativeMonitor.class).get(LegacyApiTokenAdministrativeMonitor.class);
    JenkinsRule.WebClient wc=j.createWebClient();
    int numToken=0;
    int numFreshToken=0;
    int numRecentToken=0;
{
      checkUserWithLegacyTokenListIsEmpty(wc,monitor);
    }
{
      User user=User.getById("user",true);
      ApiTokenProperty apiTokenProperty=user.getProperty(ApiTokenProperty.class);
      assertFalse(apiTokenProperty.hasLegacyToken());
      checkUserWithLegacyTokenListIsEmpty(wc,monitor);
    }
{
      User user=User.getById("user",true);
      ApiTokenProperty apiTokenProperty=user.getProperty(ApiTokenProperty.class);
      assertFalse(apiTokenProperty.hasLegacyToken());
      apiTokenProperty.getTokenStore().generateNewToken("Not legacy");
      checkUserWithLegacyTokenListIsEmpty(wc,monitor);
      checkUserWithLegacyTokenListHasSizeOf(wc,monitor,numToken,numFreshToken,numRecentToken);
    }
{
      createUserWithToken(true,false,false);
      numToken++;
      checkUserWithLegacyTokenListHasSizeOf(wc,monitor,numToken,numFreshToken,numRecentToken);
    }
{
      createUserWithToken(true,true,false);
      numToken++;
      numFreshToken++;
      checkUserWithLegacyTokenListHasSizeOf(wc,monitor,numToken,numFreshToken,numRecentToken);
    }
{
      createUserWithToken(true,false,true);
      numToken++;
      numRecentToken++;
      checkUserWithLegacyTokenListHasSizeOf(wc,monitor,numToken,numFreshToken,numRecentToken);
    }
{
      createUserWithToken(true,true,true);
      numToken++;
      numFreshToken++;
      numRecentToken++;
      checkUserWithLegacyTokenListHasSizeOf(wc,monitor,numToken,numFreshToken,numRecentToken);
    }
  }
  @Test public void monitorManagePageFilterAreWorking() throws Exception {
    j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
    ApiTokenPropertyConfiguration config=ApiTokenPropertyConfiguration.get();
    config.setCreationOfLegacyTokenEnabled(true);
    config.setTokenGenerationOnCreationEnabled(false);
    prepareUsersForFilters();
    LegacyApiTokenAdministrativeMonitor monitor=j.jenkins.getExtensionList(AdministrativeMonitor.class).get(LegacyApiTokenAdministrativeMonitor.class);
    JenkinsRule.WebClient wc=j.createWebClient();
    HtmlPage page=wc.goTo(monitor.getUrl() + "/manage");
    checkUserWithLegacyTokenListHasSizeOf(page,1 + 2 + 3+ 4,2 + 4,3 + 4);
    HtmlElement document=page.getDocumentElement();
    HtmlElement filterDiv=document.getOneHtmlElementByAttribute("div","class","selection-panel");
    DomNodeList<HtmlElement> filters=filterDiv.getElementsByTagName("a");
    assertEquals(3,filters.size());
    HtmlAnchor filterAll=(HtmlAnchor)filters.get(0);
    HtmlAnchor filterOnlyFresh=(HtmlAnchor)filters.get(1);
    HtmlAnchor filterOnlyRecent=(HtmlAnchor)filters.get(2);
{
      checkNumberOfSelectedTr(document,0);
      HtmlElementUtil.click(filterAll);
      checkNumberOfSelectedTr(document,1 + 2 + 3+ 4);
      HtmlElementUtil.click(filterAll);
      checkNumberOfSelectedTr(document,0);
    }
{
      HtmlElementUtil.click(filterOnlyFresh);
      checkNumberOfSelectedTr(document,2 + 4);
      HtmlElementUtil.click(filterOnlyFresh);
      checkNumberOfSelectedTr(document,0);
    }
{
      HtmlElementUtil.click(filterOnlyRecent);
      checkNumberOfSelectedTr(document,3 + 4);
      HtmlElementUtil.click(filterOnlyRecent);
      checkNumberOfSelectedTr(document,0);
    }
{
      HtmlElementUtil.click(filterOnlyFresh);
      checkNumberOfSelectedTr(document,2 + 4);
      HtmlElementUtil.click(filterOnlyRecent);
      checkNumberOfSelectedTr(document,3 + 4);
      HtmlElementUtil.click(filterAll);
      checkNumberOfSelectedTr(document,1 + 2 + 3+ 4);
    }
  }
  private void prepareUsersForFilters() throws Exception {
    createUserWithToken(true,false,false);
    createUserWithToken(true,true,false);
    createUserWithToken(true,true,false);
    createUserWithToken(true,false,true);
    createUserWithToken(true,false,true);
    createUserWithToken(true,false,true);
    createUserWithToken(true,true,true);
    createUserWithToken(true,true,true);
    createUserWithToken(true,true,true);
    createUserWithToken(true,true,true);
  }
  private void checkNumberOfSelectedTr(  HtmlElement document,  int expectedCount){
    DomNodeList<HtmlElement> trList=document.getElementsByTagName("tr");
    long amount=trList.stream().filter(htmlElement -> htmlElement.getAttribute("class").contains("selected")).count();
    assertEquals(expectedCount,amount);
  }
  @Test public void monitorManagePageCanRevokeToken() throws Exception {
    j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
    ApiTokenPropertyConfiguration config=ApiTokenPropertyConfiguration.get();
    config.setCreationOfLegacyTokenEnabled(true);
    config.setTokenGenerationOnCreationEnabled(false);
    prepareUsersForFilters();
    LegacyApiTokenAdministrativeMonitor monitor=j.jenkins.getExtensionList(AdministrativeMonitor.class).get(LegacyApiTokenAdministrativeMonitor.class);
    assertTrue(monitor.isActivated());
    JenkinsRule.WebClient wc=j.createWebClient();
    HtmlPage page=wc.goTo(monitor.getUrl() + "/manage");
    checkUserWithLegacyTokenListHasSizeOf(page,1 + 2 + 3+ 4,2 + 4,3 + 4);
{
      HtmlAnchor filterOnlyFresh=getFilterByIndex(page,SelectFilter.ONLY_FRESH);
      HtmlElementUtil.click(filterOnlyFresh);
    }
    HtmlButton revokeSelected=getRevokeSelected(page);
    HtmlElementUtil.click(revokeSelected);
    HtmlPage newPage=checkUserWithLegacyTokenListHasSizeOf(wc,monitor,1 + 3,0,3);
    assertTrue(monitor.isActivated());
{
      HtmlAnchor filterAll=getFilterByIndex(newPage,SelectFilter.ALL);
      HtmlElementUtil.click(filterAll);
    }
    revokeSelected=getRevokeSelected(newPage);
    HtmlElementUtil.click(revokeSelected);
    checkUserWithLegacyTokenListHasSizeOf(wc,monitor,0,0,0);
    assertFalse(monitor.isActivated());
  }
  private HtmlAnchor getFilterByIndex(  HtmlPage page,  SelectFilter selectFilter){
    HtmlElement document=page.getDocumentElement();
    HtmlDivision filterDiv=document.getOneHtmlElementByAttribute("div","class","selection-panel");
    DomNodeList<HtmlElement> filters=filterDiv.getElementsByTagName("a");
    assertEquals(3,filters.size());
    HtmlAnchor filter=(HtmlAnchor)filters.get(selectFilter.index);
    assertNotNull(filter);
    return filter;
  }
  private HtmlButton getRevokeSelected(  HtmlPage page){
    HtmlElement document=page.getDocumentElement();
    HtmlButton revokeSelected=document.getOneHtmlElementByAttribute("button","class","action-revoke-selected");
    assertNotNull(revokeSelected);
    return revokeSelected;
  }
  private void checkUserWithLegacyTokenListIsEmpty(  JenkinsRule.WebClient wc,  LegacyApiTokenAdministrativeMonitor monitor) throws Exception {
    HtmlPage page=wc.goTo(monitor.getUrl() + "/manage");
    String pageContent=page.getWebResponse().getContentAsString();
    assertThat(pageContent,Matchers.containsString("no-token-line"));
  }
  private HtmlPage checkUserWithLegacyTokenListHasSizeOf(  JenkinsRule.WebClient wc,  LegacyApiTokenAdministrativeMonitor monitor,  int countOfToken,  int countOfFreshToken,  int countOfRecentToken) throws Exception {
    HtmlPage page=wc.goTo(monitor.getUrl() + "/manage");
    checkUserWithLegacyTokenListHasSizeOf(page,countOfToken,countOfFreshToken,countOfRecentToken);
    return page;
  }
  private void checkUserWithLegacyTokenListHasSizeOf(  Page page,  int countOfToken,  int countOfFreshToken,  int countOfRecentToken) throws Exception {
    String pageContent=page.getWebResponse().getContentAsString();
    int actualCountOfToken=StringUtils.countMatches(pageContent,"token-to-revoke");
    assertEquals(countOfToken,actualCountOfToken);
    int actualCountOfFreshToken=StringUtils.countMatches(pageContent,"fresh-token");
    assertEquals(countOfFreshToken,actualCountOfFreshToken);
    int actualCountOfRecentToken=StringUtils.countMatches(pageContent,"recent-token");
    assertEquals(countOfRecentToken,actualCountOfRecentToken);
  }
  private void simulateUseOfLegacyToken(  User user) throws Exception {
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.withBasicApiToken(user);
    wc.goTo("whoAmI/api/xml",null);
  }
  private void simulateUseOfToken(  User user,  String tokenPlainValue) throws Exception {
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.withBasicCredentials(user.getId(),tokenPlainValue);
    wc.goTo("whoAmI/api/xml",null);
  }
  private int nextId=0;
  private void createUserWithToken(  boolean legacy,  boolean fresh,  boolean recent) throws Exception {
    User user=User.getById(String.format("user %b %b %b %d",legacy,fresh,recent,nextId++),true);
    if (!legacy) {
      return;
    }
    ApiTokenProperty apiTokenProperty=user.getProperty(ApiTokenProperty.class);
    apiTokenProperty.changeApiToken();
    if (fresh) {
      if (recent) {
        simulateUseOfLegacyToken(user);
        Thread.sleep(1);
        ApiTokenStore.TokenUuidAndPlainValue tokenInfo=apiTokenProperty.getTokenStore().generateNewToken("Fresh and recent token");
        simulateUseOfToken(user,tokenInfo.plainValue);
      }
 else {
        simulateUseOfLegacyToken(user);
        Thread.sleep(1);
        apiTokenProperty.getTokenStore().generateNewToken("Fresh token");
      }
    }
 else {
      if (recent) {
        ApiTokenStore.TokenUuidAndPlainValue tokenInfo=apiTokenProperty.getTokenStore().generateNewToken("Recent token");
        Thread.sleep(1);
        simulateUseOfLegacyToken(user);
        Thread.sleep(1);
        simulateUseOfToken(user,tokenInfo.plainValue);
      }
    }
  }
}
