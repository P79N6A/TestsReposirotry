public class CLIActionTest {
  @Rule public JenkinsRule j=new JenkinsRule();
{
    j.timeout=System.getProperty("maven.surefire.debug") == null ? 300 : 0;
  }
  @Rule public TemporaryFolder tmp=new TemporaryFolder();
  @Rule public LoggerRule logging=new LoggerRule();
  private ExecutorService pool;
  @Before public void setUp(){
    Set<String> agentProtocols=new HashSet<>(j.jenkins.getAgentProtocols());
    agentProtocols.add(ExtensionList.lookupSingleton(CliProtocol2.class).getName());
    j.jenkins.setAgentProtocols(agentProtocols);
  }
  /** 
 * Makes sure that the /cli endpoint is functioning.
 */
  @Test public void testDuplexHttp() throws Exception {
    pool=Executors.newCachedThreadPool();
    try {
      @SuppressWarnings("deprecation") FullDuplexHttpStream con=new FullDuplexHttpStream(new URL(j.getURL(),"cli"),null);
      Channel ch=new ChannelBuilder("test connection",pool).build(con.getInputStream(),con.getOutputStream());
      ch.close();
    }
  finally {
      pool.shutdown();
    }
  }
  @Test public void security218() throws Exception {
    pool=Executors.newCachedThreadPool();
    try {
      FullDuplexHttpStream con=new FullDuplexHttpStream(j.getURL(),"cli",null);
      Channel ch=new ChannelBuilder("test connection",pool).build(con.getInputStream(),con.getOutputStream());
      ch.call(new Security218());
      fail("Expected the call to be rejected");
    }
 catch (    Exception e) {
      assertThat(Functions.printThrowable(e),containsString("Rejected: " + Security218.class.getName()));
    }
 finally {
      pool.shutdown();
    }
  }
  @SuppressWarnings({"unchecked","rawtypes","deprecation"}) @Test public void security218_take2() throws Exception {
    pool=Executors.newCachedThreadPool();
    try (CLI cli=new CLI(j.getURL())){
      List commands=new ArrayList();
      commands.add(new Security218());
      cli.execute(commands);
      fail("Expected the call to be rejected");
    }
 catch (    Exception e) {
      assertThat(Functions.printThrowable(e),containsString("Rejected: " + Security218.class.getName()));
    }
 finally {
      pool.shutdown();
    }
  }
  @Test @PresetData(DataSet.NO_ANONYMOUS_READACCESS) @Issue("SECURITY-192") public void serveCliActionToAnonymousUserWithoutPermissions() throws Exception {
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.assertFails("cli",HttpURLConnection.HTTP_FORBIDDEN);
  }
  @Test public void serveCliActionToAnonymousUserWithAnonymousUserWithPermissions() throws Exception {
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.goTo("cli");
  }
  @Issue({"JENKINS-12543","JENKINS-41745"}) @Test public void authentication() throws Exception {
    ApiTokenTestHelper.enableLegacyBehavior();
    logging.record(PlainCLIProtocol.class,Level.FINE);
    File jar=tmp.newFile("jenkins-cli.jar");
    FileUtils.copyURLToFile(j.jenkins.getJnlpJars("jenkins-cli.jar").getURL(),jar);
    j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
    j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(ADMIN));
    j.createFreeStyleProject("p");
    assertExitCode(6,false,jar,"-remoting","get-job","p");
    assertExitCode(6,false,jar,"get-job","p");
    assertExitCode(6,false,jar,"-remoting","get-job","--username",ADMIN,"--password",ADMIN,"p");
    assertExitCode(6,false,jar,"get-job","--username",ADMIN,"--password",ADMIN,"p");
    assertExitCode(0,false,jar,"-remoting","login","--username",ADMIN,"--password",ADMIN);
    try {
      assertExitCode(6,false,jar,"-remoting","get-job","p");
    }
  finally {
      assertExitCode(0,false,jar,"-remoting","logout");
    }
    assertExitCode(6,true,jar,"-remoting","get-job","p");
    assertExitCode(0,true,jar,"get-job","p");
    assertExitCode(6,false,jar,"-remoting","disable-job","p");
    assertExitCode(6,false,jar,"disable-job","p");
    assertExitCode(0,false,jar,"-remoting","disable-job","--username",ADMIN,"--password",ADMIN,"p");
    assertExitCode(0,false,jar,"disable-job","--username",ADMIN,"--password",ADMIN,"p");
    assertExitCode(0,false,jar,"-remoting","login","--username",ADMIN,"--password",ADMIN);
    try {
      assertExitCode(0,false,jar,"-remoting","disable-job","p");
    }
  finally {
      assertExitCode(0,false,jar,"-remoting","logout");
    }
    assertExitCode(6,true,jar,"-remoting","disable-job","p");
    assertExitCode(0,true,jar,"disable-job","p");
    j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(ADMIN).grant(Jenkins.READ,Item.READ).everywhere().toEveryone());
    assertExitCode(6,false,jar,"-remoting","get-job","p");
    assertExitCode(6,false,jar,"get-job","p");
    assertExitCode(0,false,jar,"-remoting","get-job","--username",ADMIN,"--password",ADMIN,"p");
    assertExitCode(0,false,jar,"get-job","--username",ADMIN,"--password",ADMIN,"p");
    assertExitCode(0,false,jar,"-remoting","login","--username",ADMIN,"--password",ADMIN);
    try {
      assertExitCode(0,false,jar,"-remoting","get-job","p");
    }
  finally {
      assertExitCode(0,false,jar,"-remoting","logout");
    }
    assertExitCode(6,true,jar,"-remoting","get-job","p");
    assertExitCode(0,true,jar,"get-job","p");
    assertExitCode(6,false,jar,"-remoting","disable-job","p");
    assertExitCode(6,false,jar,"disable-job","p");
    assertExitCode(0,false,jar,"-remoting","disable-job","--username",ADMIN,"--password",ADMIN,"p");
    assertExitCode(0,false,jar,"disable-job","--username",ADMIN,"--password",ADMIN,"p");
    assertExitCode(0,false,jar,"-remoting","login","--username",ADMIN,"--password",ADMIN);
    try {
      assertExitCode(0,false,jar,"-remoting","disable-job","p");
    }
  finally {
      assertExitCode(0,false,jar,"-remoting","logout");
    }
    assertExitCode(6,true,jar,"-remoting","disable-job","p");
    assertExitCode(0,true,jar,"disable-job","p");
    j.jenkins.setSlaveAgentPort(-1);
    assertExitCode(0,true,jar,"-remoting","get-job","p");
    assertExitCode(0,true,jar,"-remoting","disable-job","p");
  }
  private static final String ADMIN="admin@mycorp.com";
  private void assertExitCode(  int code,  boolean useApiToken,  File jar,  String... args) throws IOException, InterruptedException {
    List<String> commands=Lists.newArrayList("java","-jar",jar.getAbsolutePath(),"-s",j.getURL().toString(),"-noKeyAuth");
    if (useApiToken) {
      commands.add("-auth");
      commands.add(ADMIN + ":" + User.get(ADMIN).getProperty(ApiTokenProperty.class).getApiToken());
    }
    commands.addAll(Arrays.asList(args));
    final Launcher.LocalLauncher launcher=new Launcher.LocalLauncher(StreamTaskListener.fromStderr());
    final Proc proc=launcher.launch().cmds(commands).stdout(System.out).stderr(System.err).start();
    if (!Functions.isWindows()) {
      Timer.get().schedule(new Runnable(){
        @Override public void run(){
          try {
            if (proc.isAlive()) {
              Field procF=Proc.LocalProc.class.getDeclaredField("proc");
              procF.setAccessible(true);
              ProcessTree.OSProcess osp=ProcessTree.get().get((Process)procF.get(proc));
              if (osp != null) {
                launcher.launch().cmds("kill","-QUIT",Integer.toString(osp.getPid())).stdout(System.out).stderr(System.err).join();
              }
            }
          }
 catch (          Exception x) {
            throw new AssertionError(x);
          }
        }
      }
,1,TimeUnit.MINUTES);
    }
    assertEquals(code,proc.join());
  }
  @Issue("JENKINS-41745") @Test public void encodingAndLocale() throws Exception {
    File jar=tmp.newFile("jenkins-cli.jar");
    FileUtils.copyURLToFile(j.jenkins.getJnlpJars("jenkins-cli.jar").getURL(),jar);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    assertEquals(0,new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds("java","-Dfile.encoding=ISO-8859-2","-Duser.language=cs","-Duser.country=CZ","-jar",jar.getAbsolutePath(),"-s",j.getURL().toString().replaceFirst("/$",""),"-noKeyAuth","test-diagnostic").stdout(baos).stderr(System.err).join());
    assertEquals("encoding=ISO-8859-2 locale=cs_CZ",baos.toString().trim());
  }
  @Issue("JENKINS-41745") @Test public void interleavedStdio() throws Exception {
    logging.record(PlainCLIProtocol.class,Level.FINE).record(FullDuplexHttpService.class,Level.FINE);
    File jar=tmp.newFile("jenkins-cli.jar");
    FileUtils.copyURLToFile(j.jenkins.getJnlpJars("jenkins-cli.jar").getURL(),jar);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    PipedInputStream pis=new PipedInputStream();
    PipedOutputStream pos=new PipedOutputStream(pis);
    PrintWriter pw=new PrintWriter(new TeeOutputStream(pos,System.err),true);
    Proc proc=new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds("java","-jar",jar.getAbsolutePath(),"-s",j.getURL().toString(),"-noKeyAuth","groovysh").stdout(new TeeOutputStream(baos,System.out)).stderr(System.err).stdin(pis).start();
    while (!baos.toString().contains("000")) {
      Thread.sleep(100);
    }
    pw.println("11 * 11");
    while (!baos.toString().contains("121")) {
      Thread.sleep(100);
    }
    Thread.sleep(31_000);
    pw.println("11 * 11 * 11");
    while (!baos.toString().contains("1331")) {
      Thread.sleep(100);
    }
    pw.println(":q");
    assertEquals(0,proc.join());
  }
  @Test @Issue("JENKINS-50324") public void userWithoutReadCanLogout() throws Exception {
    String userWithRead="userWithRead";
    String userWithoutRead="userWithoutRead";
    File jar=tmp.newFile("jenkins-cli.jar");
    FileUtils.copyURLToFile(j.jenkins.getJnlpJars("jenkins-cli.jar").getURL(),jar);
    j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
    j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(ADMIN).grant(Jenkins.READ).everywhere().to(userWithRead));
    checkCanLogout(jar,ADMIN);
    checkCanLogout(jar,userWithRead);
    checkCanLogout(jar,userWithoutRead);
  }
  private void checkCanLogout(  File cliJar,  String userLoginAndPassword) throws Exception {
    assertExitCode(0,false,cliJar,"-remoting","login","--username",userLoginAndPassword,"--password",userLoginAndPassword);
    assertExitCode(0,false,cliJar,"-remoting","who-am-i");
    assertExitCode(0,false,cliJar,"-remoting","logout");
  }
  @Issue("SECURITY-754") @Test public void noPreAuthOptionHandlerInfoLeak() throws Exception {
    File jar=tmp.newFile("jenkins-cli.jar");
    FileUtils.copyURLToFile(j.jenkins.getJnlpJars("jenkins-cli.jar").getURL(),jar);
    j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
    j.jenkins.addView(new AllView("v1"));
    j.jenkins.addNode(j.createSlave("n1",null,null));
    j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(ADMIN));
    assertExitCode(6,false,jar,"get-view","v1");
    assertExitCode(6,false,jar,"get-view","v2");
    assertExitCode(6,false,jar,"get-node","n1");
    assertExitCode(6,false,jar,"get-node","n2");
    assertExitCode(6,false,jar,"-auth","user:user","get-view","v1");
    assertExitCode(6,false,jar,"-auth","user:user","get-view","v2");
    assertExitCode(6,false,jar,"-auth","user:user","get-node","n1");
    assertExitCode(6,false,jar,"-auth","user:user","get-node","n2");
    j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(ADMIN).grant(Jenkins.READ,Item.READ).everywhere().toEveryone());
    assertExitCode(6,false,jar,"get-view","v1");
    assertExitCode(6,false,jar,"get-view","v2");
  }
@TestExtension("encodingAndLocale") public static class TestDiagnosticCommand extends CLICommand {
    @Override public String getShortDescription(){
      return "Print information about the command environment.";
    }
    @Override protected int run() throws Exception {
      stdout.println("encoding=" + getClientCharset() + " locale="+ locale);
      return 0;
    }
  }
}
