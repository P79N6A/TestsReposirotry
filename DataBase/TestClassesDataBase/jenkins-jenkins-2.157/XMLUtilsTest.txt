public class XMLUtilsTest {
  @Issue("SECURITY-167") @Test() public void testSafeTransformDoesNotProcessForeignResources() throws Exception {
    final String xml="<?xml version='1.0' encoding='UTF-8'?>\n" + "<!DOCTYPE project[\n" + "  <!ENTITY foo SYSTEM \"file:///\">\n"+ "]>\n"+ "<project>\n"+ "  <actions/>\n"+ "  <description>&foo;</description>\n"+ "  <keepDependencies>false</keepDependencies>\n"+ "  <properties/>\n"+ "  <scm class=\"hudson.scm.NullSCM\"/>\n"+ "  <canRoam>true</canRoam>\n"+ "  <triggers/>\n"+ "  <builders/>\n"+ "  <publishers/>\n"+ "  <buildWrappers/>\n"+ "</project>";
    StringWriter stringWriter=new StringWriter();
    try {
      XMLUtils.safeTransform(new StreamSource(new StringReader(xml)),new StreamResult(stringWriter));
      assertThat(stringWriter.toString(),containsString("<description/>"));
    }
 catch (    TransformerException ex) {
      assertThat(ex.getMessage(),containsString("Refusing to resolve entity"));
    }
  }
  @Issue("SECURITY-167") @Test() public void testUpdateByXmlIDoesNotFail() throws Exception {
    final String xml="<?xml version='1.0' encoding='UTF-8'?>\n" + "<project>\n" + "  <actions/>\n"+ "  <description>&amp;</description>\n"+ "  <keepDependencies>false</keepDependencies>\n"+ "  <properties/>\n"+ "  <scm class=\"hudson.scm.NullSCM\"/>\n"+ "  <canRoam>true</canRoam>\n"+ "  <triggers/>\n"+ "  <builders/>\n"+ "  <publishers/>\n"+ "  <buildWrappers/>\n"+ "</project>";
    StringWriter stringWriter=new StringWriter();
    XMLUtils.safeTransform(new StreamSource(new StringReader(xml)),new StreamResult(stringWriter));
    assertThat(stringWriter.toString(),containsString("<description>&amp;</description>"));
  }
  /** 
 * Tests getValue() directly. Tests the parse methods too (indirectly - yeah, a purest would have tests for each).
 */
  @Test public void testGetValue() throws XPathExpressionException, SAXException, IOException {
    URL configUrl=getClass().getResource("/jenkins/xml/config.xml");
    File configFile=new File(configUrl.getFile());
    Assert.assertEquals("1.480.1",XMLUtils.getValue("/hudson/version",configFile));
    Assert.assertEquals("",XMLUtils.getValue("/hudson/unknown-element",configFile));
  }
  @Test public void testParse_with_XXE() throws IOException, XPathExpressionException {
    try {
      final String xml="<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<!DOCTYPE foo [\n" + "   <!ELEMENT foo ANY >\n"+ "   <!ENTITY xxe SYSTEM \"http://abc.com/temp/test.jsp\" >]> "+ "<foo>&xxe;</foo>";
      StringReader stringReader=new StringReader(xml);
      XMLUtils.parse(stringReader);
      Assert.fail("Expecting SAXException for XXE.");
    }
 catch (    SAXException e) {
      assertThat(e.getMessage(),containsString("\"http://apache.org/xml/features/disallow-doctype-decl\""));
    }
  }
}
