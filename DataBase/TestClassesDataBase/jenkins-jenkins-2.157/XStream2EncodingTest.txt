/** 
 * In its own suite to minimize the chance of mucking about with other tests.
 */
public class XStream2EncodingTest {
  @Before public void useNonUTF8(){
    clearDefaultEncoding();
    System.setProperty("file.encoding","ISO-8859-1");
    assumeThat(Charset.defaultCharset().name(),is("ISO-8859-1"));
  }
  @After public void clearDefaultEncodingAfter(){
    clearDefaultEncoding();
  }
  private void clearDefaultEncoding(){
    try {
      Field defaultCharset=Charset.class.getDeclaredField("defaultCharset");
      defaultCharset.setAccessible(true);
      defaultCharset.set(null,null);
    }
 catch (    Exception x) {
      assumeNoException(x);
    }
  }
  @SuppressWarnings("deprecation") @Test public void toXMLUnspecifiedEncoding() throws Exception {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    XStream2 xs=new XStream2();
    String msg="k chybě";
    xs.toXML(new Thing(msg),baos);
    byte[] ambiguousXml=baos.toByteArray();
    Thing t=(Thing)xs.fromXML(new ByteArrayInputStream(ambiguousXml));
    assertThat(t.field,not(msg));
    ByteArrayOutputStream baos2=new ByteArrayOutputStream();
    baos2.write("<?xml version='1.0' encoding='UTF-8'?>\n".getBytes("UTF-8"));
    baos2.write(ambiguousXml);
    t=(Thing)xs.fromXML(new ByteArrayInputStream(ambiguousXml));
    assertThat(t.field,not(msg));
  }
  @Test public void toXMLUTF8() throws Exception {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    XStream2 xs=new XStream2();
    String msg="k chybě";
    xs.toXMLUTF8(new Thing(msg),baos);
    byte[] unspecifiedData=baos.toByteArray();
    Thing t=(Thing)xs.fromXML(new ByteArrayInputStream(unspecifiedData));
    assertThat(t.field,is(msg));
  }
public static class Thing {
    public final String field;
    Thing(    String field){
      this.field=field;
    }
  }
}
