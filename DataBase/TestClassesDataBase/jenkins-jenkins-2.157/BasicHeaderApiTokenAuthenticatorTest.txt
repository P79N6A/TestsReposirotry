public class BasicHeaderApiTokenAuthenticatorTest {
  @Rule public RestartableJenkinsRule rr=new RestartableJenkinsRule();
  @Test @Issue("SECURITY-896") public void legacyToken_regularCase(){
    AtomicReference<String> token=new AtomicReference<>();
    rr.addStep(new Statement(){
      @Override public void evaluate() throws Throwable {
        enableLegacyTokenGenerationOnUserCreation();
        configureSecurity();
{
          JenkinsRule.WebClient wc=rr.j.createWebClient();
          wc.login("user1");
          HtmlPage page=wc.goTo("user/user1/configure");
          String tokenValue=((HtmlTextInput)page.getDocumentElement().querySelector("#apiToken")).getText();
          token.set(tokenValue);
        }
      }
    }
);
    rr.addStep(new Statement(){
      @Override public void evaluate() throws Throwable {
        User user=User.getById("user1",false);
        assertNotNull(user);
        JenkinsRule.WebClient wc=rr.j.createWebClient();
        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
{
          WebRequest request=new WebRequest(new URL(rr.j.jenkins.getRootUrl() + "whoAmI/api/xml"));
          request.setAdditionalHeader("Authorization",base64("user1","invalid-token"));
          assertThat(wc.getPage(request).getWebResponse().getStatusCode(),equalTo(401));
        }
{
          WebRequest request=new WebRequest(new URL(rr.j.jenkins.getRootUrl() + "whoAmI/api/xml"));
          request.setAdditionalHeader("Authorization",base64("user-not-valid",token.get()));
          assertThat(wc.getPage(request).getWebResponse().getStatusCode(),equalTo(401));
        }
        assertNull(User.getById("user-not-valid",false));
{
          WebRequest request=new WebRequest(new URL(rr.j.jenkins.getRootUrl() + "whoAmI/api/xml"));
          request.setAdditionalHeader("Authorization",base64("user1",token.get()));
          XmlPage xmlPage=wc.getPage(request);
          assertThat(xmlPage,hasXPath("//name",is("user1")));
        }
      }
    }
);
  }
  @Test @Issue("SECURITY-896") public void legacyToken_withoutLastGrantedAuthorities(){
    AtomicReference<String> token=new AtomicReference<>();
    rr.addStep(new Statement(){
      @Override public void evaluate() throws Throwable {
        enableLegacyTokenGenerationOnUserCreation();
        configureSecurity();
{
          JenkinsRule.WebClient wc=rr.j.createWebClient();
          wc.login("user1");
          HtmlPage page=wc.goTo("user/user1/configure");
          String tokenValue=((HtmlTextInput)page.getDocumentElement().querySelector("#apiToken")).getText();
          token.set(tokenValue);
        }
      }
    }
);
    rr.addStep(new Statement(){
      @Override public void evaluate() throws Throwable {
        User user=User.getById("user1",false);
        assertNull(user);
        JenkinsRule.WebClient wc=rr.j.createWebClient();
        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
{
          WebRequest request=new WebRequest(new URL(rr.j.jenkins.getRootUrl() + "whoAmI/api/xml"));
          request.setAdditionalHeader("Authorization",base64("user1","invalid-token"));
          assertThat(wc.getPage(request).getWebResponse().getStatusCode(),equalTo(401));
        }
{
          WebRequest request=new WebRequest(new URL(rr.j.jenkins.getRootUrl() + "whoAmI/api/xml"));
          request.setAdditionalHeader("Authorization",base64("user-not-valid",token.get()));
          assertThat(wc.getPage(request).getWebResponse().getStatusCode(),equalTo(401));
        }
        assertNull(User.getById("user1",false));
        assertNull(User.getById("user-not-valid",false));
{
          WebRequest request=new WebRequest(new URL(rr.j.jenkins.getRootUrl() + "whoAmI/api/xml"));
          request.setAdditionalHeader("Authorization",base64("user1",token.get()));
          XmlPage xmlPage=wc.getPage(request);
          assertThat(xmlPage,hasXPath("//name",is("user1")));
        }
      }
    }
);
    rr.addStep(new Statement(){
      @Override public void evaluate() throws Throwable {
        User user=User.getById("user1",false);
        assertNull(user);
      }
    }
);
  }
@TestExtension("legacyToken_withoutLastGrantedAuthorities") public static class RemoveDefaultSecurityListener extends ExtensionFilter {
    @Override public <T>boolean allows(    Class<T> type,    ExtensionComponent<T> component){
      return !SecurityListener.class.isAssignableFrom(type);
    }
  }
  private void enableLegacyTokenGenerationOnUserCreation() throws Exception {
    ApiTokenPropertyConfiguration apiTokenConfiguration=GlobalConfiguration.all().getInstance(ApiTokenPropertyConfiguration.class);
    apiTokenConfiguration.setTokenGenerationOnCreationEnabled(true);
  }
  private void configureSecurity() throws Exception {
    rr.j.jenkins.setSecurityRealm(rr.j.createDummySecurityRealm());
    rr.j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().toEveryone());
    rr.j.jenkins.save();
  }
  private String base64(  String login,  String password){
    return "Basic " + Base64.getEncoder().encodeToString((login + ":" + password).getBytes(StandardCharsets.UTF_8));
  }
}
