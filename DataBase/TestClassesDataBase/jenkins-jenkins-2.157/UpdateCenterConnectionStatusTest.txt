/** 
 * @author <a href="mailto:tom.fennelly@gmail.com">tom.fennelly@gmail.com</a>
 */
public class UpdateCenterConnectionStatusTest {
  @Rule public JenkinsRule jenkinsRule=new JenkinsRule();
  @Test public void doConnectionStatus_default_site() throws IOException, SAXException {
    JSONObject response=jenkinsRule.getJSON("updateCenter/connectionStatus").getJSONObject();
    Assert.assertEquals("ok",response.getString("status"));
    JSONObject statusObj=response.getJSONObject("data");
    Assert.assertTrue(statusObj.has("updatesite"));
    Assert.assertTrue(statusObj.has("internet"));
    response=jenkinsRule.getJSON("updateCenter/connectionStatus?siteId=default").getJSONObject();
    Assert.assertEquals("ok",response.getString("status"));
    statusObj=response.getJSONObject("data");
    Assert.assertTrue(statusObj.has("updatesite"));
    Assert.assertTrue(statusObj.has("internet"));
  }
  @Test public void doConnectionStatus_unknown_site() throws IOException, SAXException {
    JSONObject response=jenkinsRule.getJSON("updateCenter/connectionStatus?siteId=blahblah").getJSONObject();
    Assert.assertEquals("error",response.getString("status"));
    Assert.assertEquals("Cannot check connection status of the update site with ID='blahblah'. This update center cannot be resolved",response.getString("message"));
  }
  private UpdateSite updateSite=new UpdateSite(UpdateCenter.ID_DEFAULT,"http://xyz"){
    @Override public String getConnectionCheckUrl(){
      return "http://xyz./";
    }
  }
;
  @Test public void test_states_allok(){
    UpdateCenter updateCenter=new UpdateCenter(new TestConfig());
    UpdateCenter.ConnectionCheckJob job=updateCenter.newConnectionCheckJob(updateSite);
    Assert.assertEquals(ConnectionStatus.PRECHECK,job.connectionStates.get(ConnectionStatus.INTERNET));
    Assert.assertEquals(ConnectionStatus.PRECHECK,job.connectionStates.get(ConnectionStatus.UPDATE_SITE));
    job.run();
    Assert.assertEquals(ConnectionStatus.OK,job.connectionStates.get(ConnectionStatus.INTERNET));
    Assert.assertEquals(ConnectionStatus.OK,job.connectionStates.get(ConnectionStatus.UPDATE_SITE));
  }
  @Test public void test_states_internet_failed(){
    UpdateCenter updateCenter=new UpdateCenter(new TestConfig().failInternet());
    UpdateCenter.ConnectionCheckJob job=updateCenter.newConnectionCheckJob(updateSite);
    job.run();
    Assert.assertEquals(ConnectionStatus.FAILED,job.connectionStates.get(ConnectionStatus.INTERNET));
    Assert.assertEquals(ConnectionStatus.OK,job.connectionStates.get(ConnectionStatus.UPDATE_SITE));
  }
  @Test public void test_states_uc_failed_timeout(){
    UpdateCenter updateCenter=new UpdateCenter(new TestConfig().failUCConnect());
    UpdateCenter.ConnectionCheckJob job=updateCenter.newConnectionCheckJob(updateSite);
    job.run();
    Assert.assertEquals(ConnectionStatus.OK,job.connectionStates.get(ConnectionStatus.INTERNET));
    Assert.assertEquals(ConnectionStatus.FAILED,job.connectionStates.get(ConnectionStatus.UPDATE_SITE));
  }
  @Test public void test_states_uc_failed_UnknownHost(){
    UpdateCenter updateCenter=new UpdateCenter(new TestConfig().failUCResolve());
    UpdateCenter.ConnectionCheckJob job=updateCenter.newConnectionCheckJob(updateSite);
    job.run();
    Assert.assertEquals(ConnectionStatus.OK,job.connectionStates.get(ConnectionStatus.INTERNET));
    Assert.assertEquals(ConnectionStatus.FAILED,job.connectionStates.get(ConnectionStatus.UPDATE_SITE));
  }
private class TestConfig extends UpdateCenter.UpdateCenterConfiguration {
    private IOException checkConnectionException;
    private IOException checkUpdateCenterException;
    private TestConfig failInternet(){
      checkConnectionException=new IOException("Connection timed out");
      return this;
    }
    private TestConfig failUCResolve(){
      checkUpdateCenterException=new UnknownHostException("Unable to resolve UpdateCenter host address.");
      return this;
    }
    private TestConfig failUCConnect(){
      checkUpdateCenterException=new IOException("Connection timed out");
      return this;
    }
    @Override public void checkConnection(    UpdateCenter.ConnectionCheckJob job,    String connectionCheckUrl) throws IOException {
      if (checkConnectionException != null) {
        throw checkConnectionException;
      }
    }
    @Override public void checkUpdateCenter(    UpdateCenter.ConnectionCheckJob job,    String updateCenterUrl) throws IOException {
      if (checkUpdateCenterException != null) {
        throw checkUpdateCenterException;
      }
    }
  }
}
