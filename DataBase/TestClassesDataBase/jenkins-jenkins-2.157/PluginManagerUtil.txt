/** 
 * @author <a href="mailto:tom.fennelly@gmail.com">tom.fennelly@gmail.com</a>
 */
public class PluginManagerUtil {
  public static JenkinsRule newJenkinsRule(){
    return new JenkinsRule(){
      @Override public void before() throws Throwable {
        setPluginManager(null);
        super.before();
      }
    }
;
  }
  public static RestartableJenkinsRule newRestartableJenkinsRule(){
    return new RestartableJenkinsRule(){
      @Override public JenkinsRule createJenkinsRule(      Description description){
        return newJenkinsRule();
      }
    }
;
  }
  public static void dynamicLoad(  String plugin,  Jenkins jenkins) throws IOException, InterruptedException, RestartRequiredException {
    dynamicLoad(plugin,jenkins,false);
  }
  public static void dynamicLoad(  String plugin,  Jenkins jenkins,  boolean disable) throws IOException, InterruptedException, RestartRequiredException {
    URL src=PluginManagerTest.class.getClassLoader().getResource("plugins/" + plugin);
    File dest=new File(jenkins.getRootDir(),"plugins/" + plugin);
    FileUtils.copyURLToFile(src,dest);
    if (disable) {
      new File(dest.getPath() + ".disabled").createNewFile();
    }
    jenkins.pluginManager.dynamicLoad(dest);
  }
}
