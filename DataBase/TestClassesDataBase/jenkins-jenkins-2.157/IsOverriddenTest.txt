/** 
 * Test for  {@link Util.isOverridden} method.
 */
public class IsOverriddenTest {
  /** 
 * Test that a method is found by isOverridden even when it is inherited from an intermediate class.
 */
  @Test public void isOverriddenTest(){
    assertTrue(Util.isOverridden(Base.class,Derived.class,"method"));
    assertTrue(Util.isOverridden(Base.class,Intermediate.class,"method"));
    assertFalse(Util.isOverridden(Base.class,Base.class,"method"));
    assertTrue(Util.isOverridden(Base.class,Intermediate.class,"setX",Object.class));
    assertTrue(Util.isOverridden(Base.class,Intermediate.class,"getX"));
  }
  /** 
 * Negative test. Trying to check for a method which does not exist in the hierarchy,
 */
  @Test(expected=IllegalArgumentException.class) public void isOverriddenNegativeTest(){
    Util.isOverridden(Base.class,Derived.class,"method2");
  }
  /** 
 * Do not inspect private methods.
 */
  @Test(expected=IllegalArgumentException.class) public void avoidPrivateMethodsInspection(){
    Util.isOverridden(Base.class,Intermediate.class,"aPrivateMethod");
  }
public abstract class Base<T> {
    protected abstract void method();
    private void aPrivateMethod(){
    }
    public void setX(    T t){
    }
    public T getX(){
      return null;
    }
  }
public abstract class Intermediate extends Base<Integer> {
    protected void method(){
    }
    private void aPrivateMethod(){
    }
    public void setX(    Integer i){
    }
    public Integer getX(){
      return 0;
    }
  }
public class Derived extends Intermediate {
  }
}
