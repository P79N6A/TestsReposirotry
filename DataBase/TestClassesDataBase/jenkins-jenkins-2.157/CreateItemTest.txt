/** 
 * Tests the /createItem REST API.
 * @author Christopher Simons
 */
public class CreateItemTest {
  private static final int ERROR_PRESET=(-1);
  @Rule public JenkinsRule rule=new JenkinsRule();
  @Before public void setup(){
    rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());
  }
  @Issue("JENKINS-31235") @Test public void testCreateItemFromCopy() throws Exception {
    rule.jenkins.setCrumbIssuer(null);
    String sourceJobName="sourceJob";
    rule.createFreeStyleProject(sourceJobName);
    String newJobName="newJob";
    URL apiURL=new URL(MessageFormat.format("{0}createItem?mode=copy&from={1}&name={2}",rule.getURL().toString(),sourceJobName,newJobName));
    WebRequest request=new WebRequest(apiURL,HttpMethod.POST);
    deleteContentTypeHeader(request);
    int result=ERROR_PRESET;
    try {
      result=rule.createWebClient().getPage(request).getWebResponse().getStatusCode();
    }
 catch (    FailingHttpStatusCodeException e) {
      result=e.getResponse().getStatusCode();
    }
    assertEquals("Creating job from copy should succeed.",200,result);
  }
  @Issue("JENKINS-34691") @Test public void vetoCreateItemFromCopy() throws Exception {
    rule.jenkins.setCrumbIssuer(null);
    String sourceJobName="sourceJob";
    rule.createFreeStyleProject(sourceJobName);
    String newJobName="newJob";
    URL apiURL=new URL(MessageFormat.format("{0}createItem?mode=copy&from={1}&name={2}",rule.getURL().toString(),sourceJobName,newJobName));
    WebRequest request=new WebRequest(apiURL,HttpMethod.POST);
    deleteContentTypeHeader(request);
    int result=ERROR_PRESET;
    try {
      result=rule.createWebClient().getPage(request).getWebResponse().getStatusCode();
    }
 catch (    FailingHttpStatusCodeException e) {
      result=e.getResponse().getStatusCode();
    }
    assertEquals("Creating job from copy should fail.",400,result);
    assertThat(rule.jenkins.getItem("newJob"),nullValue());
  }
  private void deleteContentTypeHeader(  WebRequest request){
    request.setEncodingType(null);
  }
  @Test public void createWithFolderPaths() throws Exception {
    rule.jenkins.setCrumbIssuer(null);
    rule.createFolder("d1").createProject(FreeStyleProject.class,"p");
    MockFolder d2=rule.createFolder("d2");
    rule.createWebClient().getPage(new WebRequest(new URL(d2.getAbsoluteUrl() + "createItem?mode=copy&name=p2&from=../d1/p"),HttpMethod.POST));
    assertNotNull(d2.getItem("p2"));
    rule.createWebClient().getPage(new WebRequest(new URL(d2.getAbsoluteUrl() + "createItem?mode=copy&name=p3&from=/d1/p"),HttpMethod.POST));
    assertNotNull(d2.getItem("p3"));
  }
@TestExtension("vetoCreateItemFromCopy") public static class ItemListenerImpl extends ItemListener {
    @Override public void onCheckCopy(    Item src,    ItemGroup parent) throws Failure {
      if ("sourceJob".equals(src.getName())) {
        throw new Failure("Go away I don't like you");
      }
    }
  }
}
