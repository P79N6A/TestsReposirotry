public class ClassFilterImplTest {
  @ClassRule public static BuildWatcher buildWatcher=new BuildWatcher();
  @Rule public JenkinsRule r=new JenkinsRule();
  @Rule public LoggerRule logging=new LoggerRule().record(ClassFilterImpl.class,Level.FINE);
  @Test public void masterToSlaveBypassesWhitelist() throws Exception {
    assumeThat(ClassFilterImpl.WHITELISTED_CLASSES,not(contains(LinkedListMultimap.class.getName())));
    FreeStyleProject p=r.createFreeStyleProject();
    p.setAssignedNode(r.createSlave());
    p.getBuildersList().add(new M2SBuilder());
    r.assertLogContains("sent {}",r.buildAndAssertSuccess(p));
  }
public static class M2SBuilder extends Builder {
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      listener.getLogger().println("sent " + launcher.getChannel().call(new M2S()));
      return true;
    }
@TestExtension("masterToSlaveBypassesWhitelist") public static class DescriptorImpl extends BuildStepDescriptor<Builder> {
      @SuppressWarnings("rawtypes") @Override public boolean isApplicable(      Class<? extends AbstractProject> jobType){
        return true;
      }
    }
  }
private static class M2S extends MasterToSlaveCallable<String,RuntimeException> {
    private final LinkedListMultimap<?,?> obj=LinkedListMultimap.create();
    @Override public String call() throws RuntimeException {
      return obj.toString();
    }
  }
  @Test public void slaveToMasterRequiresWhitelist() throws Exception {
    assumeThat(ClassFilterImpl.WHITELISTED_CLASSES,not(contains(LinkedListMultimap.class.getName())));
    FreeStyleProject p=r.createFreeStyleProject();
    p.setAssignedNode(r.createSlave());
    p.getBuildersList().add(new S2MBuilder());
    r.assertBuildStatus(Result.FAILURE,p.scheduleBuild2(0));
  }
public static class S2MBuilder extends Builder {
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      listener.getLogger().println("received " + launcher.getChannel().call(new S2M()));
      return true;
    }
@TestExtension("slaveToMasterRequiresWhitelist") public static class DescriptorImpl extends BuildStepDescriptor<Builder> {
      @SuppressWarnings("rawtypes") @Override public boolean isApplicable(      Class<? extends AbstractProject> jobType){
        return true;
      }
    }
  }
private static class S2M extends MasterToSlaveCallable<LinkedListMultimap<?,?>,RuntimeException> {
    @Override public LinkedListMultimap<?,?> call() throws RuntimeException {
      return LinkedListMultimap.create();
    }
  }
  @Test public void xstreamRequiresWhitelist() throws Exception {
    assumeThat(ClassFilterImpl.WHITELISTED_CLASSES,not(contains(LinkedListMultimap.class.getName())));
    Config config=GlobalConfiguration.all().get(Config.class);
    config.save();
    config.obj=LinkedListMultimap.create();
    config.save();
    assertThat(config.getConfigFile().asString(),not(containsString("LinkedListMultimap")));
    config.unrelated="modified";
    FileUtils.write(config.getConfigFile().getFile(),new XStream().toXML(config));
    assertThat(config.getConfigFile().asString(),allOf(containsString("LinkedListMultimap"),containsString("modified")));
    config.obj=null;
    config.unrelated=null;
    config.load();
    assertNull(config.obj);
    assertEquals("modified",config.unrelated);
    Map<Saveable,OldDataMonitor.VersionRange> data=ExtensionList.lookupSingleton(OldDataMonitor.class).getData();
    assertEquals(Collections.singleton(config),data.keySet());
    assertThat(data.values().iterator().next().extra,allOf(containsString("LinkedListMultimap"),containsString("https://jenkins.io/redirect/class-filter/")));
  }
  @Test @Issue("JENKINS-49543") public void moduleClassesShouldBeWhitelisted() throws Exception {
    ClassFilterImpl filter=new ClassFilterImpl();
    filter.check("org.jenkinsci.main.modules.cli.auth.ssh.UserPropertyImpl");
    filter.check("org.jenkinsci.modules.windows_slave_installer.WindowsSlaveInstaller");
    filter.check("org.jenkinsci.main.modules.instance_identity.PageDecoratorImpl");
  }
@TestExtension("xstreamRequiresWhitelist") public static class Config extends GlobalConfiguration {
    LinkedListMultimap<?,?> obj;
    String unrelated;
    @Override protected XmlFile getConfigFile(){
      return super.getConfigFile();
    }
  }
}
