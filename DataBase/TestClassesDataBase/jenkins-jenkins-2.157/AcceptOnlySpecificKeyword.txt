public static class AcceptOnlySpecificKeyword extends AbstractDescribableImpl<AcceptOnlySpecificKeyword> {
  public static final String ACCEPT_KEYWORD="accept";
  private final String keyword;
  @DataBoundConstructor public AcceptOnlySpecificKeyword(  String keyword){
    this.keyword=keyword;
  }
  public String getKeyword(){
    return keyword;
  }
  public boolean isAcceptable(){
    return ACCEPT_KEYWORD.equals(keyword);
  }
  private Object readResolve() throws Exception {
    if (!ACL.SYSTEM.equals(Jenkins.getAuthentication())) {
      if (!isAcceptable()) {
        throw new Exception(String.format("Bad keyword: %s",getKeyword()));
      }
    }
    return this;
  }
@TestExtension public static class DescriptorImpl extends Descriptor<AcceptOnlySpecificKeyword> {
    @Override public String getDisplayName(){
      return "AcceptOnlySpecificKeyword";
    }
    @Override public AcceptOnlySpecificKeyword newInstance(    StaplerRequest req,    JSONObject formData) throws FormException {
      AcceptOnlySpecificKeyword instance=super.newInstance(req,formData);
      if (!instance.isAcceptable()) {
        throw new FormException(String.format("Bad keyword: %s",instance.getKeyword()),"keyword");
      }
      return instance;
    }
  }
}
