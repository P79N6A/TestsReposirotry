/** 
 * Tests for lib/form/option.jelly
 */
public class OptionTest {
  private static final int MODE_JELLY_REGULAR=0;
  private static final int MODE_JELLY_FORCE_RAW=1;
  private static final int MODE_GROOVY_REGULAR=0;
  private static final int MODE_GROOVY_TEXT=1;
  private static final int MODE_XML_ESCAPE=2;
  private static final int MODE_NATIVE_OPTION=3;
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test @Issue("SECURITY-624") public void optionsAreCorrectlyEscaped() throws Exception {
    checkNonDangerousOutputCorrect_simple();
    checkNonDangerousOutputCorrect_advanced();
    checkDangerousOutputNotActive();
  }
  private void checkNonDangerousOutputCorrect_simple() throws Exception {
    String simpleText="Simple text";
    benchOfTest_acceptEscapedCharacters(simpleText,simpleText);
  }
  private void checkNonDangerousOutputCorrect_advanced() throws Exception {
    String advancedText="Markdown -> HTML & XHTML even with \"'_/$\\< characters";
    String escapeForValue=escapeForValue(advancedText);
    String escapeForBody=escapeForBody(advancedText);
    String escapeForBody_alternate=escapeForBody_alternate(advancedText);
    String escapeForBody_uglyButSafe=escapeForBody_uglyButSafe(advancedText);
    String escapeForValue_uglyButSafe=escapeForValue_uglyButSafe(advancedText);
{
      checkJelly(MODE_JELLY_REGULAR,advancedText,advancedText,false);
      checkGroovy(MODE_GROOVY_TEXT,advancedText,advancedText,false);
      checkGroovy(MODE_XML_ESCAPE,advancedText,advancedText,false);
      checkJelly(MODE_NATIVE_OPTION,advancedText,advancedText,advancedText,false,true,false);
      checkGroovy(MODE_NATIVE_OPTION,advancedText,advancedText,advancedText,false,true,false);
      checkJelly(MODE_JELLY_FORCE_RAW,advancedText,advancedText,false);
      checkGroovy(MODE_GROOVY_REGULAR,advancedText,advancedText,false);
      checkJelly(MODE_XML_ESCAPE,advancedText,escapeForBody_alternate,advancedText,false,true,false);
      checkJelly(MODE_XML_ESCAPE,advancedText,escapeForBody_alternate,escapeForBody_alternate,false,false,true);
    }
{
      checkJelly(MODE_JELLY_REGULAR,advancedText,escapeForBody,escapeForValue,true);
      checkGroovy(MODE_GROOVY_TEXT,advancedText,escapeForBody,escapeForValue,true);
      checkJelly(MODE_NATIVE_OPTION,advancedText,escapeForBody,escapeForValue,true,true,false);
      checkGroovy(MODE_XML_ESCAPE,advancedText,escapeForBody,escapeForValue,true);
      checkGroovy(MODE_NATIVE_OPTION,advancedText,escapeForBody_alternate,escapeForValue,true,true,false);
      checkJelly(MODE_JELLY_FORCE_RAW,advancedText,escapeForBody,escapeForValue,true);
      checkGroovy(MODE_GROOVY_REGULAR,advancedText,escapeForBody,escapeForValue,true);
      checkJelly(MODE_XML_ESCAPE,advancedText,escapeForBody_uglyButSafe,escapeForValue,true,true,false);
      checkJelly(MODE_XML_ESCAPE,advancedText,escapeForBody_uglyButSafe,escapeForValue_uglyButSafe,true,false,true);
    }
  }
  private String escapeForBody(  String str){
    return str.replace("&","&amp;").replace("<","&lt;");
  }
  private String escapeForBody_alternate(  String str){
    return str.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;");
  }
  private String escapeForValue(  String str){
    return str.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("\"","&quot;");
  }
  private String escapeForBody_uglyButSafe(  String str){
    return str.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("&","&amp;");
  }
  private String escapeForValue_uglyButSafe(  String str){
    return str.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("&","&amp;").replace("\"","&quot;");
  }
  private void checkDangerousOutputNotActive() throws Exception {
    benchOfTest_strictContains("<script>function hack(){document.writeln('hacked');};document.addEventListener('DOMContentLoaded', hack, false);</script>_FLAG","FLAG");
  }
  private void benchOfTest_strictContains(  String msg,  String containsExpected) throws Exception {
    _benchOfTest(msg,containsExpected,true);
  }
  private void benchOfTest_acceptEscapedCharacters(  String msg,  String containsExpected) throws Exception {
    _benchOfTest(msg,containsExpected,false);
  }
  private void _benchOfTest(  String msg,  String containsExpected,  boolean checkExactCharacters) throws Exception {
    checkJelly(MODE_JELLY_REGULAR,msg,containsExpected,checkExactCharacters);
    checkGroovy(MODE_GROOVY_TEXT,msg,containsExpected,checkExactCharacters);
    checkJelly(MODE_XML_ESCAPE,msg,containsExpected,checkExactCharacters);
    checkJelly(MODE_NATIVE_OPTION,msg,containsExpected,containsExpected,checkExactCharacters,true,false);
    checkGroovy(MODE_XML_ESCAPE,msg,containsExpected,checkExactCharacters);
    checkGroovy(MODE_NATIVE_OPTION,msg,containsExpected,containsExpected,checkExactCharacters,true,false);
    checkJelly(MODE_JELLY_FORCE_RAW,msg,containsExpected,checkExactCharacters);
    checkGroovy(MODE_GROOVY_REGULAR,msg,containsExpected,checkExactCharacters);
  }
  private void checkJelly(  int mode,  String msgToInject,  String bothContainsExpected,  boolean checkExactCharacters) throws Exception {
    checkJelly(mode,msgToInject,bothContainsExpected,bothContainsExpected,checkExactCharacters);
  }
  private void checkJelly(  int mode,  String msgToInject,  String bodyContainsExpected,  String valueContainsExpected,  boolean checkExactCharacters) throws Exception {
    checkJelly(mode,msgToInject,bodyContainsExpected,valueContainsExpected,checkExactCharacters,true,true);
  }
  private void checkJelly(  int mode,  String msgToInject,  String bodyContainsExpected,  String valueContainsExpected,  boolean checkExactCharacters,  boolean withValueTrue,  boolean withValueFalse) throws Exception {
    UsingJellyView view=j.jenkins.getExtensionList(UsingJellyView.class).get(0);
    view.setMode(mode);
    view.setInjection(msgToInject);
    if (withValueTrue) {
      view.setWithValue(true);
      callPageAndCheckIfResultContainsExpected("usingJelly",bodyContainsExpected,valueContainsExpected,checkExactCharacters);
    }
    if (withValueFalse) {
      view.setWithValue(false);
      callPageAndCheckIfResultContainsExpected("usingJelly",bodyContainsExpected,valueContainsExpected,checkExactCharacters);
    }
  }
  private void checkGroovy(  int mode,  String msgToInject,  String bothContainsExpected,  boolean checkExactCharacters) throws Exception {
    checkGroovy(mode,msgToInject,bothContainsExpected,bothContainsExpected,checkExactCharacters);
  }
  private void checkGroovy(  int mode,  String msgToInject,  String bodyContainsExpected,  String valueContainsExpected,  boolean checkExactCharacters) throws Exception {
    checkGroovy(mode,msgToInject,bodyContainsExpected,valueContainsExpected,checkExactCharacters,true,true);
  }
  private void checkGroovy(  int mode,  String msgToInject,  String bodyContainsExpected,  String valueContainsExpected,  boolean checkExactCharacters,  boolean withValueTrue,  boolean withValueFalse) throws Exception {
    UsingGroovyView view=j.jenkins.getExtensionList(UsingGroovyView.class).get(0);
    view.setMode(mode);
    view.setInjection(msgToInject);
    if (withValueTrue) {
      view.setWithValue(true);
      callPageAndCheckIfResultContainsExpected("usingGroovy",bodyContainsExpected,valueContainsExpected,checkExactCharacters);
    }
    if (withValueFalse) {
      view.setWithValue(false);
      callPageAndCheckIfResultContainsExpected("usingGroovy",bodyContainsExpected,valueContainsExpected,checkExactCharacters);
    }
  }
  private void callPageAndCheckIfResultContainsExpected(  String url,  String bodyContainsExpected,  String valueContainsExpected,  boolean checkExactCharacters) throws Exception {
    HtmlPage page=(HtmlPage)j.createWebClient().goTo(url,null);
    String responseContent=page.getWebResponse().getContentAsString();
    if (checkExactCharacters) {
      int indexOfValue=responseContent.indexOf(valueContainsExpected);
      assertTrue(indexOfValue != -1);
      int indexOfBody=responseContent.indexOf(bodyContainsExpected,indexOfValue + 1);
      assertTrue(indexOfBody != -1);
      int indexOfScript=responseContent.indexOf("<script>");
      assertEquals(-1,indexOfScript);
    }
 else {
      HtmlElement document=page.getDocumentElement();
      DomNodeList<HtmlElement> elements=document.getElementsByTagName("option");
      assertEquals(1,elements.size());
      HtmlOption option=(HtmlOption)elements.get(0);
      assertNotEquals(DomElement.ATTRIBUTE_NOT_DEFINED,option.getAttribute("value"));
      assertTrue("Value attribute does not contain the expected value",option.getValueAttribute().contains(valueContainsExpected));
      assertTrue("Body content of the option does not contain the expected value",option.getText().contains(bodyContainsExpected));
    }
  }
@TestExtension("optionsAreCorrectlyEscaped") public static class UsingJellyView implements RootAction {
    private String injection;
    private int mode;
    private boolean withValue;
    public String getInjection(){
      return injection;
    }
    public void setInjection(    String injection){
      this.injection=injection;
    }
    public int getMode(){
      return mode;
    }
    public void setMode(    int mode){
      this.mode=mode;
    }
    public boolean isWithValue(){
      return withValue;
    }
    public void setWithValue(    boolean withValue){
      this.withValue=withValue;
    }
    @Override public String getIconFileName(){
      return null;
    }
    @Override public String getDisplayName(){
      return null;
    }
    @Override public String getUrlName(){
      return "usingJelly";
    }
  }
@TestExtension("optionsAreCorrectlyEscaped") public static class UsingGroovyView implements RootAction {
    private String injection;
    private int mode;
    private boolean withValue;
    public String getInjection(){
      return injection;
    }
    public void setInjection(    String injection){
      this.injection=injection;
    }
    public int getMode(){
      return mode;
    }
    public void setMode(    int mode){
      this.mode=mode;
    }
    public boolean isWithValue(){
      return withValue;
    }
    public void setWithValue(    boolean withValue){
      this.withValue=withValue;
    }
    @Override public String getIconFileName(){
      return null;
    }
    @Override public String getDisplayName(){
      return null;
    }
    @Override public String getUrlName(){
      return "usingGroovy";
    }
  }
}
