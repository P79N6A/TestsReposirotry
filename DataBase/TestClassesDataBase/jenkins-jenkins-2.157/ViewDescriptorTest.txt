public class ViewDescriptorTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  /** 
 * Checks that  {@link ViewDescriptor#doAutoCompleteCopyNewItemFrom} honors {@link DirectlyModifiableTopLevelItemGroup#canAdd}. 
 */
  @Test public void canAdd() throws Exception {
    MockFolder d1=r.createFolder("d1");
    d1.createProject(MockFolder.class,"sub");
    d1.createProject(FreeStyleProject.class,"prj");
    MockFolder d2=r.jenkins.createProject(RestrictiveFolder.class,"d2");
    assertContains(r.jenkins.getDescriptorByType(AllView.DescriptorImpl.class).doAutoCompleteCopyNewItemFrom("../d1/",d2),"../d1/prj");
  }
@SuppressWarnings({"unchecked","rawtypes"}) public static class RestrictiveFolder extends MockFolder {
    public RestrictiveFolder(    ItemGroup parent,    String name){
      super(parent,name);
    }
    @Override public boolean canAdd(    TopLevelItem item){
      return item instanceof FreeStyleProject;
    }
@TestExtension("canAdd") public static class DescriptorImpl extends TopLevelItemDescriptor {
      @Override public TopLevelItem newInstance(      ItemGroup parent,      String name){
        return new RestrictiveFolder(parent,name);
      }
    }
  }
  private void assertContains(  AutoCompletionCandidates c,  String... values){
    assertEquals(new TreeSet<>(Arrays.asList(values)),new TreeSet<>(c.getValues()));
  }
}
