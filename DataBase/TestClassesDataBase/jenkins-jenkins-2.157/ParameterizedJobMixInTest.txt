/** 
 * Tests of  {@link ParameterizedJobMixIn}.
 * @author Oleg Nenashev
 */
public class ParameterizedJobMixInTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test public void doBuild_shouldFailWhenInvokingDisabledProject() throws Exception {
    final FreeStyleProject project=j.createFreeStyleProject();
    project.doDisable();
    final JenkinsRule.WebClient webClient=j.createWebClient();
    webClient.assertFails(project.getUrl() + "build",HttpServletResponse.SC_CONFLICT);
  }
  @Test @Issue("JENKINS-36193") public void doBuildWithParameters_shouldFailWhenInvokingDisabledProject() throws Exception {
    final FreeStyleProject project=j.createFreeStyleProject();
    project.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition("FOO","BAR")));
    project.doDisable();
    final JenkinsRule.WebClient webClient=j.createWebClient();
    webClient.assertFails(project.getUrl() + "buildWithParameters",HttpServletResponse.SC_CONFLICT);
  }
  @Test @Issue("JENKINS-48770") public void doBuildQuietPeriodInSeconds() throws Exception {
    final int projectQuietPeriodInSeconds=50;
    final FreeStyleProject project=j.createFreeStyleProject();
    project.setQuietPeriod(projectQuietPeriodInSeconds);
    final JenkinsRule.WebClient webClient=j.createWebClient();
    webClient.goTo(project.getUrl() + "build","");
    long triggerTime=System.currentTimeMillis();
    Queue.Item item=Jenkins.get().getQueue().getItem(1);
    Assert.assertTrue(item instanceof Queue.WaitingItem);
    Assert.assertTrue(item.task instanceof FreeStyleProject);
    Queue.WaitingItem waitingItem=(Queue.WaitingItem)item;
    Assert.assertTrue((waitingItem.timestamp.getTimeInMillis() - triggerTime) > 45000);
    Jenkins.get().getQueue().doCancelItem(1);
  }
}
