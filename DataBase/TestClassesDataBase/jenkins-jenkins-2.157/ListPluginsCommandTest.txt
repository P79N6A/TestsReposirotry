public class ListPluginsCommandTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test public void listPluginsExpectedUsage() throws Exception {
    assertNull(j.jenkins.getPluginManager().getPlugin("token-macro"));
    CLICommandInvoker.Result result=new CLICommandInvoker(j,new ListPluginsCommand()).invoke();
    assertThat(result,CLICommandInvoker.Matcher.succeeded());
    assertThat(result,CLICommandInvoker.Matcher.hasNoStandardOutput());
    assertThat(result.stdout(),not(containsString("token-macro")));
    assertThat(new CLICommandInvoker(j,new InstallPluginCommand()).withStdin(ListPluginsCommandTest.class.getResourceAsStream("/plugins/token-macro.hpi")).invokeWithArgs("-name","token-macro","-deploy","="),CLICommandInvoker.Matcher.succeeded());
    assertNotNull(j.jenkins.getPluginManager().getPlugin("token-macro"));
    result=new CLICommandInvoker(j,new ListPluginsCommand()).invoke();
    assertThat(result,CLICommandInvoker.Matcher.succeeded());
    assertThat(result.stdout(),containsString("token-macro"));
  }
  @Test @Issue("SECURITY-771") public void onlyAccessibleForAdmin() throws Exception {
    CLICommandInvoker.Result result=new CLICommandInvoker(j,new ListPluginsCommand()).authorizedTo(Jenkins.READ).invoke();
    assertThat(result,CLICommandInvoker.Matcher.failedWith(6));
    result=new CLICommandInvoker(j,new ListPluginsCommand()).authorizedTo(Jenkins.ADMINISTER).invoke();
    assertThat(result,CLICommandInvoker.Matcher.succeeded());
  }
}
