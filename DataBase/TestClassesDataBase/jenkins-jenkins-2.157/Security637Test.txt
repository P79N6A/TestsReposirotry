public class Security637Test {
  @Rule public RestartableJenkinsRule rr=new RestartableJenkinsRule();
  @Test @Issue("SECURITY-637") public void urlSafeDeserialization_handler_inSameJVMRemotingContext(){
    rr.addStep(new Statement(){
      @Override public void evaluate() throws Exception {
        DumbSlave slave=rr.j.createOnlineSlave();
        String unsafeHandlerClassName=slave.getChannel().call(new URLHandlerCallable(new URL("https://www.google.com/")));
        assertThat(unsafeHandlerClassName,containsString("SafeURLStreamHandler"));
        String safeHandlerClassName=slave.getChannel().call(new URLHandlerCallable(new URL("file",null,-1,"",null)));
        assertThat(safeHandlerClassName,not(containsString("SafeURLStreamHandler")));
      }
    }
);
  }
private static class URLHandlerCallable extends MasterToSlaveCallable<String,Exception> {
    private URL url;
    public URLHandlerCallable(    URL url){
      this.url=url;
    }
    @Override public String call() throws Exception {
      Field handlerField=URL.class.getDeclaredField("handler");
      handlerField.setAccessible(true);
      URLStreamHandler handler=(URLStreamHandler)handlerField.get(url);
      return handler.getClass().getName();
    }
  }
  @Test @Issue("SECURITY-637") public void urlDnsEquivalence(){
    rr.addStep(new Statement(){
      @Override public void evaluate() throws Exception {
        assertEquals(new URL("https://jenkins.io"),new URL("https://www.jenkins.io"));
      }
    }
);
  }
  @Test @Issue("SECURITY-637") public void urlSafeDeserialization_urlBuiltInAgent_inSameJVMRemotingContext(){
    rr.addStep(new Statement(){
      @Override public void evaluate() throws Exception {
        DumbSlave slave=rr.j.createOnlineSlave();
        assertThat(slave.getChannel().call(new URLBuilderCallable("https://jenkins.io")),not(equalTo(slave.getChannel().call(new URLBuilderCallable("https://www.jenkins.io")))));
      }
    }
);
  }
private static class URLBuilderCallable extends MasterToSlaveCallable<URL,Exception> {
    private String url;
    public URLBuilderCallable(    String url){
      this.url=url;
    }
    @Override public URL call() throws Exception {
      return new URL(url);
    }
  }
  @Test @Issue("SECURITY-637") public void urlSafeDeserialization_urlBuiltInMaster_inSameJVMRemotingContext(){
    rr.addStep(new Statement(){
      @Override public void evaluate() throws Exception {
        DumbSlave slave=rr.j.createOnlineSlave();
        assertThat(slave.getChannel().call(new URLTransferCallable(new URL("https://jenkins.io"))),not(equalTo(slave.getChannel().call(new URLTransferCallable(new URL("https://www.jenkins.io"))))));
        assertEquals(new URL("https://jenkins.io"),new URL("https://www.jenkins.io"));
      }
    }
);
  }
private static class URLTransferCallable extends MasterToSlaveCallable<URL,Exception> {
    private URL url;
    public URLTransferCallable(    URL url){
      this.url=url;
    }
    @Override public URL call() throws Exception {
      return url;
    }
  }
  @Test @Issue("SECURITY-637") public void urlSafeDeserialization_inXStreamContext(){
    rr.addStep(new Statement(){
      @Override public void evaluate() throws Exception {
        FreeStyleProject project=rr.j.createFreeStyleProject("project-with-url");
        URLJobProperty URLJobProperty=new URLJobProperty(new URL("https://www.google.com/"),new URL("https",null,-1,"",null));
        project.addProperty(URLJobProperty);
        project.save();
      }
    }
);
    rr.addStep(new Statement(){
      @Override public void evaluate() throws Exception {
        FreeStyleProject project=rr.j.jenkins.getItemByFullName("project-with-url",FreeStyleProject.class);
        assertNotNull(project);
        Field handlerField=URL.class.getDeclaredField("handler");
        handlerField.setAccessible(true);
        URLJobProperty urlJobProperty=project.getProperty(URLJobProperty.class);
        for (        URL url : urlJobProperty.urlSet) {
          URLStreamHandler handler=(URLStreamHandler)handlerField.get(url);
          if (StringUtils.isEmpty(url.getHost())) {
            assertThat(handler.getClass().getName(),not(containsString("SafeURLStreamHandler")));
          }
 else {
            assertThat(handler.getClass().getName(),containsString("SafeURLStreamHandler"));
          }
        }
      }
    }
);
  }
public static class URLJobProperty extends JobProperty<FreeStyleProject> {
    private Set<URL> urlSet;
    public URLJobProperty(    URL... urls) throws Exception {
      this.urlSet=new HashSet<>();
      for (      URL url : urls) {
        urlSet.add(url);
      }
    }
    @Override public boolean perform(    AbstractBuild<?,?> build,    Launcher launcher,    BuildListener listener) throws InterruptedException, IOException {
      return true;
    }
@TestExtension("urlSafeDeserialization_inXStreamContext") public static class DescriptorImpl extends JobPropertyDescriptor {
    }
  }
}
