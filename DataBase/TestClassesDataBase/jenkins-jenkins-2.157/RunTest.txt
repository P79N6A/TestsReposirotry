public class RunTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Issue("JENKINS-17935") @Test public void getDynamicInvisibleTransientAction() throws Exception {
    TransientBuildActionFactory.all().add(0,new TransientBuildActionFactory(){
      @Override public Collection<? extends Action> createFor(      Run target){
        return Collections.singleton(new Action(){
          @Override public String getDisplayName(){
            return "Test";
          }
          @Override public String getIconFileName(){
            return null;
          }
          @Override public String getUrlName(){
            return null;
          }
        }
);
      }
    }
);
    j.assertBuildStatusSuccess(j.createFreeStyleProject("stuff").scheduleBuild2(0));
    j.createWebClient().assertFails("job/stuff/1/nonexistent",HttpURLConnection.HTTP_NOT_FOUND);
  }
  @Issue("JENKINS-40281") @Test public void getBadgeActions() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    FreeStyleBuild b=j.buildAndAssertSuccess(p);
    assertEquals(0,b.getBadgeActions().size());
    assertTrue(b.canToggleLogKeep());
    b.keepLog();
    List<BuildBadgeAction> badgeActions=b.getBadgeActions();
    assertEquals(1,badgeActions.size());
    assertEquals(Run.KeepLogBuildBadge.class,badgeActions.get(0).getClass());
  }
  @Issue("JENKINS-51819") @Test public void deleteArtifactsCustom() throws Exception {
    ArtifactManagerConfiguration.get().getArtifactManagerFactories().add(new Mgr.Factory());
    FreeStyleProject p=j.createFreeStyleProject();
    j.jenkins.getWorkspaceFor(p).child("f").write("",null);
    p.getPublishersList().add(new ArtifactArchiver("f"));
    FreeStyleBuild b=j.buildAndAssertSuccess(p);
    b.delete();
    assertTrue(Mgr.deleted.get());
  }
private static final class Mgr extends ArtifactManager {
    static final AtomicBoolean deleted=new AtomicBoolean();
    @Override public boolean delete() throws IOException, InterruptedException {
      return !deleted.getAndSet(true);
    }
    @Override public void onLoad(    Run<?,?> build){
    }
    @Override public void archive(    FilePath workspace,    Launcher launcher,    BuildListener listener,    Map<String,String> artifacts) throws IOException, InterruptedException {
    }
    @Override public VirtualFile root(){
      return VirtualFile.forFile(Jenkins.get().getRootDir());
    }
public static final class Factory extends ArtifactManagerFactory {
      @DataBoundConstructor public Factory(){
      }
      @Override public ArtifactManager managerFor(      Run<?,?> build){
        return new Mgr();
      }
@TestExtension("deleteArtifactsCustom") public static final class DescriptorImpl extends ArtifactManagerFactoryDescriptor {
      }
    }
  }
}
