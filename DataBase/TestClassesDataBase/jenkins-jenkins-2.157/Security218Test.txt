/** 
 * @author Kohsuke Kawaguchi
 */
@Issue("SECURITY-218") public class Security218Test implements Serializable {
  @Rule public transient JenkinsRule j=new JenkinsRule();
  @Rule public TemporaryFolder tmp=new TemporaryFolder();
  @Rule public LoggerRule logging=new LoggerRule().record(ClassFilterImpl.class,Level.FINE);
  /** 
 * JNLP slave.
 */
  private transient Process jnlp;
  /** 
 * Makes sure SECURITY-218 fix also applies to slaves. This test is for regular dumb slave
 */
  @Test public void dumbSlave() throws Exception {
    check(j.createOnlineSlave());
  }
  /** 
 * Makes sure SECURITY-218 fix also applies to slaves. This test is for JNLP slave
 */
  @Test public void jnlpSlave() throws Exception {
    DumbSlave s=createJnlpSlave("test");
    launchJnlpSlave(s);
    check(s);
  }
  /** 
 * The attack scenario here is that a master sends a normal command to a slave and a slave inserts a malicious response.
 */
  @SuppressWarnings("ConstantConditions") private void check(  DumbSlave s) throws Exception {
    try {
      Object o=s.getComputer().getChannel().call(new EvilReturnValue());
      fail("Expected the connection to die: " + o);
    }
 catch (    Exception e) {
      assertThat(e.getMessage(),containsString(MethodClosure.class.getName()));
    }
  }
private static class EvilReturnValue extends MasterToSlaveCallable<Object,RuntimeException> {
    @Override public Object call(){
      return new MethodClosure("oops","trim");
    }
  }
  /** 
 * Creates a new slave that needs to be launched via JNLP.
 * @see #launchJnlpSlave(Slave)
 */
  public DumbSlave createJnlpSlave(  String name) throws Exception {
    DumbSlave s=new DumbSlave(name,"",System.getProperty("java.io.tmpdir") + '/' + name,"2",Mode.NORMAL,"",new JNLPLauncher(true),RetentionStrategy.INSTANCE,Collections.EMPTY_LIST);
    j.jenkins.addNode(s);
    return s;
  }
  /** 
 * Launch a JNLP slave created by  {@link #createJnlpSlave(String)}
 */
  public Channel launchJnlpSlave(  Slave slave) throws Exception {
    j.createWebClient().goTo("computer/" + slave.getNodeName() + "/slave-agent.jnlp?encrypt=true","application/octet-stream");
    String secret=slave.getComputer().getJnlpMac();
    File slaveJar=tmp.newFile();
    FileUtils.copyURLToFile(new Slave.JnlpJar("slave.jar").getURL(),slaveJar);
    ProcessBuilder pb=new ProcessBuilder(JavaEnvUtils.getJreExecutable("java"),"-jar",slaveJar.getAbsolutePath(),"-jnlpUrl",j.getURL() + "computer/" + slave.getNodeName()+ "/slave-agent.jnlp","-secret",secret);
    pb.inheritIO();
    System.err.println("Running: " + pb.command());
    jnlp=pb.start();
    for (int i=0; i < 600; i++) {
      if (slave.getComputer().isOnline()) {
        return slave.getComputer().getChannel();
      }
      Thread.sleep(100);
    }
    throw new AssertionError("JNLP slave agent failed to connect");
  }
  @After public void tearDown(){
    if (jnlp != null)     jnlp.destroy();
  }
}
