public static class PayloadCaller implements Callable<Integer,Exception> {
  private final Payload payload;
  private final String command;
  public static final int EXIT_CODE_OK=0;
  public static final int EXIT_CODE_REJECTED=42;
  public static final int EXIT_CODE_ASSIGNMENT_ISSUE=43;
  public PayloadCaller(  Payload payload,  String command){
    this.payload=payload;
    this.command=command;
  }
  @Override public Integer call() throws Exception {
    final Object ysoserial=payload.getPayloadClass().newInstance().getObject(command);
    try {
      getChannelOrFail().call(new Callable<String,Exception>(){
        private static final long serialVersionUID=1L;
        @Override public String call() throws Exception {
          return ysoserial.toString();
        }
        @Override public void checkRoles(        RoleChecker checker) throws SecurityException {
        }
      }
);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
      Throwable cause=ex;
      while (cause.getCause() != null) {
        cause=cause.getCause();
      }
      if (cause instanceof SecurityException) {
        if (cause.getMessage().contains("Rejected")) {
          return PayloadCaller.EXIT_CODE_REJECTED;
        }
 else {
          throw ex;
        }
      }
      final String message=cause.getMessage();
      if (message != null && message.contains("cannot be cast to java.util.Set")) {
        return EXIT_CODE_ASSIGNMENT_ISSUE;
      }
 else {
        throw ex;
      }
    }
    return EXIT_CODE_OK;
  }
  @Override public void checkRoles(  RoleChecker checker) throws SecurityException {
  }
}
