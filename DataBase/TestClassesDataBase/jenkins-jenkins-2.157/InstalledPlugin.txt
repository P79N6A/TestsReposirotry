private class InstalledPlugin {
  private final HtmlTableRow pluginRow;
  public InstalledPlugin(  HtmlTableRow pluginRow){
    this.pluginRow=pluginRow;
  }
  public String getId(){
    return pluginRow.getAttribute("data-plugin-id");
  }
  public boolean isPlugin(  String pluginId){
    return pluginId.equals(getId());
  }
  private HtmlInput getEnableWidget(){
    HtmlElement input=pluginRow.getCells().get(0).getElementsByTagName("input").get(0);
    return (HtmlInput)input;
  }
  public void assertEnabled(){
    HtmlInput enableWidget=getEnableWidget();
    Assert.assertTrue("Plugin '" + getId() + "' is expected to be enabled.",enableWidget.isChecked());
  }
  public void assertNotEnabled(){
    HtmlInput enableWidget=getEnableWidget();
    Assert.assertFalse("Plugin '" + getId() + "' is not expected to be enabled.",enableWidget.isChecked());
  }
  public void clickEnabledWidget() throws IOException {
    HtmlInput enableWidget=getEnableWidget();
    HtmlElementUtil.click(enableWidget);
  }
  public void assertEnabledStateChangeable(){
    if (!hasDependants() && !hasDisabledDependency() && !allDependantsDisabled()) {
      return;
    }
    if (allDependantsDisabled() && !hasDisabledDependency()) {
      return;
    }
    Assert.fail("The enable/disable state of plugin '" + getId() + "' cannot be changed.");
  }
  public void assertEnabledStateNotChangeable(){
    if (hasDependants() && !hasDisabledDependency() && !allDependantsDisabled()) {
      return;
    }
    if (!hasDependants() && hasDisabledDependency()) {
      return;
    }
    Assert.fail("The enable/disable state of plugin '" + getId() + "' cannot be changed.");
  }
  public void assertUninstallable(){
    Assert.assertFalse("Plugin '" + getId() + "' cannot be uninstalled.",hasDependants());
  }
  public void assertNotUninstallable(){
    Assert.assertTrue("Plugin '" + getId() + "' can be uninstalled.",hasDependants());
  }
  public void assertHasDependants(){
    Assert.assertTrue(hasDependants());
  }
  public void assertHasNoDependants(){
    Assert.assertFalse(hasDependants());
  }
  private boolean hasClassName(  String className){
    String classAttribute=pluginRow.getAttribute("class");
    Set<String> classes=new HashSet<>(Arrays.asList(classAttribute.split(" ")));
    return classes.contains(className);
  }
  private boolean hasDisabledDependency(){
    return hasClassName("has-disabled-dependency");
  }
  private boolean allDependantsDisabled(){
    return hasClassName("all-dependants-disabled");
  }
  private boolean hasDependants(){
    return hasClassName("has-dependants");
  }
}
