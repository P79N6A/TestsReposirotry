public class CLIEnvVarTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @Rule public TemporaryFolder tmp=new TemporaryFolder();
  private File home;
  private File jar;
  @Before public void grabCliJar() throws IOException {
    home=tmp.newFolder();
    jar=tmp.newFile("jenkins-cli.jar");
    FileUtils.copyURLToFile(r.jenkins.getJnlpJars("jenkins-cli.jar").getURL(),jar);
  }
  @Test public void testSOptionWithoutJENKINS_URL() throws Exception {
    assertEquals(0,launch("java","-Duser.home=" + home,"-jar",jar.getAbsolutePath(),"-s",r.getURL().toString(),"who-am-i"));
  }
  @Test public void testWithoutSOptionAndWithoutJENKINS_URL() throws Exception {
    assertNotEquals(0,launch("java","-Duser.home=" + home,"-jar",jar.getAbsolutePath(),"who-am-i"));
  }
  @Test public void testJENKINS_URLWithoutSOption() throws Exception {
    Map<String,String> envars=new HashMap<>();
    envars.put("JENKINS_URL",r.getURL().toString());
    assertEquals(0,launch(envars,"java","-Duser.home=" + home,"-jar",jar.getAbsolutePath(),"who-am-i"));
    envars=new HashMap<>();
    envars.put("JENKINS_URL","http://invalid-url");
    assertNotEquals(0,launch(envars,"java","-Duser.home=" + home,"-jar",jar.getAbsolutePath(),"who-am-i"));
  }
  @Test public void testSOptionOverridesJENKINS_URL() throws Exception {
    Map<String,String> envars=new HashMap<>();
    envars.put("JENKINS_URL","http://invalid-url");
    assertEquals(0,launch(envars,"java","-Duser.home=" + home,"-jar",jar.getAbsolutePath(),"-s",r.getURL().toString(),"who-am-i"));
  }
  @Test public void testAuthOptionWithoutEnvVars() throws Exception {
    String token=getToken();
    try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
      assertEquals(0,launch(Collections.emptyMap(),baos,null,"java","-Duser.home=" + home,"-jar",jar.getAbsolutePath(),"-s",r.getURL().toString(),"-auth",String.format("%s:%s","admin",token),"who-am-i"));
      assertThat(baos.toString(),containsString("Authenticated as: admin"));
    }
   }
  @Test public void testWithoutEnvVarsAndWithoutAuthOption() throws Exception {
    r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
    r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to("admin"));
    try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
      assertEquals(0,launch(Collections.emptyMap(),baos,null,"java","-Duser.home=" + home,"-jar",jar.getAbsolutePath(),"-s",r.getURL().toString(),"who-am-i"));
      assertThat(baos.toString(),containsString("Authenticated as: anonymous"));
    }
   }
  @Test public void testEnvVarsWithoutAuthOption() throws Exception {
    String token=getToken();
    try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
      Map<String,String> envars=new HashMap<>();
      envars.put("JENKINS_USER_ID","admin");
      envars.put("JENKINS_API_TOKEN",token);
      assertEquals(0,launch(envars,baos,null,"java","-Duser.home=" + home,"-jar",jar.getAbsolutePath(),"-s",r.getURL().toString(),"who-am-i"));
      assertThat(baos.toString(),containsString("Authenticated as: admin"));
    }
   }
  @Test public void testOnlyOneEnvVar() throws Exception {
    String token=getToken();
    try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
      Map<String,String> envars=new HashMap<>();
      envars.put("JENKINS_USER_ID","admin");
      assertNotEquals(0,launch(envars,"java","-Duser.home=" + home,"-jar",jar.getAbsolutePath(),"-s",r.getURL().toString(),"who-am-i"));
    }
     try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
      Map<String,String> envars=new HashMap<>();
      envars.put("JENKINS_API_TOKEN",token);
      assertNotEquals(0,launch(envars,"java","-Duser.home=" + home,"-jar",jar.getAbsolutePath(),"-s",r.getURL().toString(),"who-am-i"));
    }
   }
  @Test public void testAuthOptionOverridesEnvVars() throws Exception {
    String token=getToken();
    try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
      Map<String,String> envars=new HashMap<>();
      envars.put("JENKINS_USER_ID","other-user");
      envars.put("JENKINS_API_TOKEN","other-user");
      assertEquals(0,launch(envars,baos,null,"java","-Duser.home=" + home,"-jar",jar.getAbsolutePath(),"-s",r.getURL().toString(),"-auth",String.format("%s:%s","admin",token),"who-am-i"));
      assertThat(baos.toString(),containsString("Authenticated as: admin"));
    }
   }
  private String getToken(){
    ApiTokenTestHelper.enableLegacyBehavior();
    r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
    r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to("admin"));
    return User.get("admin").getProperty(ApiTokenProperty.class).getApiToken();
  }
  private int launch(  String... cmdArgs) throws Exception {
    return launch(Collections.emptyMap(),cmdArgs);
  }
  private int launch(  Map<String,String> envars,  String... cmdArgs) throws Exception {
    return launch(envars,null,null,cmdArgs);
  }
  private int launch(  Map<String,String> envars,  OutputStream out,  OutputStream err,  String... cmdArgs) throws Exception {
    if (out == null) {
      out=System.out;
    }
    if (err == null) {
      err=System.err;
    }
    return new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).decorateByEnv(new EnvVars(envars)).launch().cmds(cmdArgs).stdout(out).stderr(err).join();
  }
}
