/** 
 * @author Patrick McKeown
 */
public class SecurityContextExecutorServiceTest {
  final private int NUM_THREADS=10;
  private ExecutorService wrappedService=null;
  private SecurityContext systemContext=null;
  private SecurityContext userContext=null;
  private SecurityContext nullContext=null;
  private volatile SecurityContext runnableThreadContext;
  @Rule public JenkinsRule j=new JenkinsRule(){
    public void before() throws Throwable {
      setPluginManager(null);
      super.before();
      ScheduledThreadPoolExecutor service=new ScheduledThreadPoolExecutor(NUM_THREADS);
      systemContext=ACL.impersonate(ACL.SYSTEM);
      User u=User.get("bob");
      userContext=new NonSerializableSecurityContext(u.impersonate());
      SecurityContextHolder.clearContext();
      nullContext=SecurityContextHolder.getContext();
      wrappedService=new SecurityContextExecutorService(service);
    }
  }
;
  @Test @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS) public void testRunnableAgainstAllContexts() throws Exception {
    Runnable r=new Runnable(){
      public void run(){
        runnableThreadContext=SecurityContextHolder.getContext();
      }
    }
;
    SecurityContextHolder.setContext(systemContext);
    Future systemResult=wrappedService.submit(r);
    assertNull(systemResult.get());
    assertEquals(systemContext,runnableThreadContext);
    SecurityContextHolder.setContext(userContext);
    Future userResult=wrappedService.submit(r);
    assertNull(userResult.get());
    assertEquals(userContext,runnableThreadContext);
    SecurityContextHolder.setContext(nullContext);
    Future nullResult=wrappedService.submit(r);
    assertNull(nullResult.get());
    assertEquals(nullContext,runnableThreadContext);
  }
  @Test @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS) public void testCallableAgainstAllContexts() throws Exception {
    Callable<SecurityContext> c=new Callable<SecurityContext>(){
      public SecurityContext call() throws Exception {
        return SecurityContextHolder.getContext();
      }
    }
;
    SecurityContextHolder.setContext(systemContext);
    Future<SecurityContext> result=wrappedService.submit(c);
    assertEquals(systemContext,result.get());
    SecurityContextHolder.setContext(userContext);
    result=wrappedService.submit(c);
    assertEquals(userContext,result.get());
    SecurityContextHolder.setContext(nullContext);
    result=wrappedService.submit(c);
    assertEquals(nullContext,result.get());
  }
  @Test @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS) public void testCallableCollectionAgainstAllContexts() throws Exception {
    Collection<Callable<SecurityContext>> callables=new LinkedList<Callable<SecurityContext>>();
    Callable<SecurityContext> c=new Callable<SecurityContext>(){
      public SecurityContext call() throws Exception {
        return SecurityContextHolder.getContext();
      }
    }
;
    callables.add(c);
    callables.add(c);
    callables.add(c);
    SecurityContextHolder.setContext(systemContext);
    Collection<Future<SecurityContext>> results=wrappedService.invokeAll(callables);
    for (    Future<SecurityContext> result : results) {
      SecurityContext value=result.get();
      assertEquals(systemContext,value);
    }
    SecurityContextHolder.setContext(userContext);
    results=wrappedService.invokeAll(callables);
    for (    Future<SecurityContext> result : results) {
      assertEquals(userContext,result.get());
    }
    SecurityContextHolder.setContext(nullContext);
    results=wrappedService.invokeAll(callables);
    for (    Future<SecurityContext> result : results) {
      assertEquals(nullContext,result.get());
    }
  }
  @Test @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS) public void testFailedRunnableResetsContext() throws Exception {
    Runnable r=new Runnable(){
      public void run(){
        SecurityContextHolder.setContext(nullContext);
        throw new RuntimeException("Simulate a failure");
      }
    }
;
    SecurityContextHolder.setContext(systemContext);
    try {
      wrappedService.execute(r);
    }
 catch (    AssertionError expectedException) {
      assertEquals(systemContext,SecurityContextHolder.getContext());
    }
    SecurityContextHolder.setContext(userContext);
    try {
      wrappedService.execute(r);
    }
 catch (    AssertionError expectedException) {
      assertEquals(userContext,SecurityContextHolder.getContext());
    }
  }
}
