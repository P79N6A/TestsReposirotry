@RunWith(PowerMockRunner.class) @PrepareForTest({CLI.class,CLIConnectionFactory.class}) public class PrivateKeyProviderTest {
  @Test public void specifyKeysExplicitly() throws Exception {
    final CLI cli=fakeCLI();
    final File dsaKey=keyFile(".ssh/id_dsa");
    final File rsaKey=keyFile(".ssh/id_rsa");
    run("-remoting","-i",dsaKey.getAbsolutePath(),"-i",rsaKey.getAbsolutePath(),"-s","http://example.com");
    verify(cli).authenticate(withKeyPairs(keyPair(dsaKey),keyPair(rsaKey)));
  }
  @Test public void useDefaultKeyLocations() throws Exception {
    final CLI cli=fakeCLI();
    final File rsaKey=keyFile(".ssh/id_rsa");
    final File dsaKey=keyFile(".ssh/id_dsa");
    fakeHome();
    run("-remoting","-s","http://example.com");
    verify(cli).authenticate(withKeyPairs(keyPair(rsaKey),keyPair(dsaKey)));
  }
  private CLI fakeCLI() throws Exception {
    final CLI cli=mock(CLI.class);
    final CLIConnectionFactory factory=mock(CLIConnectionFactory.class,Mockito.CALLS_REAL_METHODS);
    factory.jenkins=new URL("http://example.com");
    doReturn(cli).when(factory).connect();
    mockStatic(CLIConnectionFactory.class);
    whenNew(CLIConnectionFactory.class).withNoArguments().thenReturn(factory);
    return cli;
  }
  private void fakeHome() throws URISyntaxException {
    final File home=new File(this.getClass().getResource(".ssh").toURI()).getParentFile();
    System.setProperty("user.home",home.getAbsolutePath());
  }
  private int run(  String... args) throws Exception {
    return CLI._main(args);
  }
  private File keyFile(  String name) throws URISyntaxException {
    return new File(this.getClass().getResource(name).toURI());
  }
  private KeyPair keyPair(  File file) throws IOException, GeneralSecurityException {
    return PrivateKeyProvider.loadKey(file,null);
  }
  private Iterable<KeyPair> withKeyPairs(  final KeyPair... expected){
    return Mockito.argThat(new ArgumentMatcher<Iterable<KeyPair>>(){
      @Override public boolean matches(      Iterable<KeyPair> actual){
        int i=0;
        for (        KeyPair akp : actual) {
          if (!eq(expected[i].getPublic(),akp.getPublic()))           return false;
          if (!eq(expected[i].getPrivate(),akp.getPrivate()))           return false;
          i++;
        }
        return i == expected.length;
      }
      private boolean eq(      final Key expected,      final Key actual){
        return Arrays.equals(expected.getEncoded(),actual.getEncoded());
      }
    }
);
  }
}
