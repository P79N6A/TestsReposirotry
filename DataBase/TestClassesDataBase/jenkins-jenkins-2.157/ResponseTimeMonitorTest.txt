/** 
 * @author Andrew Bayer
 */
public class ResponseTimeMonitorTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  /** 
 * Makes sure that it doesn't try to monitor an already-offline agent.
 */
  @Test @Issue("JENKINS-20272") public void skipOfflineAgent() throws Exception {
    DumbSlave s=j.createSlave();
    SlaveComputer c=s.getComputer();
    c.connect(false).get();
    c.setTemporarilyOffline(true,new OfflineCause.UserCause(User.getUnknown(),"Temporarily offline"));
    assertNotNull(ResponseTimeMonitor.DESCRIPTOR.monitor(c));
    c.setTemporarilyOffline(false,null);
    j.disconnectSlave(s);
    assertNull(ResponseTimeMonitor.DESCRIPTOR.monitor(c));
    c.connect(false).get();
    assertNotNull(ResponseTimeMonitor.DESCRIPTOR.monitor(c));
  }
  @Test public void doNotDisconnectBeforeLaunched() throws Exception {
    DumbSlave slave=new DumbSlave("dummy","dummy",j.createTmpDir().getPath(),"1",Node.Mode.NORMAL,"",new JNLPLauncher(),RetentionStrategy.NOOP,Collections.EMPTY_LIST);
    j.jenkins.addNode(slave);
    Computer c=slave.toComputer();
    assertNotNull(c);
    OfflineCause originalOfflineCause=c.getOfflineCause();
    ResponseTimeMonitor rtm=ComputerSet.getMonitors().get(ResponseTimeMonitor.class);
    for (int i=0; i < 10; i++) {
      rtm.triggerUpdate().join();
      System.out.println(rtm.getDescriptor().get(c));
      assertEquals(originalOfflineCause,c.getOfflineCause());
    }
  }
}
