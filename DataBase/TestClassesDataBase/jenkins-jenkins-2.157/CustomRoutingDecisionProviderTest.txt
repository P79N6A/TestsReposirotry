@Issue("SECURITY-400") @For(RoutingDecisionProvider.class) public class CustomRoutingDecisionProviderTest {
  @Rule public JenkinsRule j=new JenkinsRule();
@TestExtension("customRoutingWhitelistProvider") public static class XxxBlacklister extends RoutingDecisionProvider {
    @Override public Decision decide(    @Nonnull String signature){
      if (signature.contains("xxx")) {
        return Decision.REJECTED;
      }
      return Decision.UNKNOWN;
    }
  }
@TestExtension public static class OneMethodIsBlacklisted implements UnprotectedRootAction {
    @Override public @CheckForNull String getUrlName(){
      return "custom";
    }
    @Override public String getDisplayName(){
      return null;
    }
    @Override public String getIconFileName(){
      return null;
    }
    public StaplerAbstractTest.Renderable getLegitGetter(){
      return new StaplerAbstractTest.Renderable();
    }
    public StaplerAbstractTest.Renderable getLegitxxxGetter(){
      return new StaplerAbstractTest.Renderable();
    }
  }
private static class Renderable {
    public void doIndex(){
      replyOk();
    }
    @WebMethod(name="valid") public void valid(){
      replyOk();
    }
  }
  private static void replyOk(){
    StaplerResponse resp=Stapler.getCurrentResponse();
    try {
      resp.getWriter().write("ok");
      resp.flushBuffer();
    }
 catch (    IOException e) {
    }
  }
  @Test public void customRoutingWhitelistProvider() throws Exception {
    Page okPage=j.createWebClient().goTo("custom/legitGetter",null);
    assertThat(okPage.getWebResponse().getStatusCode(),is(200));
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    Page errorPage=wc.goTo("custom/legitxxxGetter",null);
    assertThat(errorPage.getWebResponse().getStatusCode(),is(404));
  }
}
