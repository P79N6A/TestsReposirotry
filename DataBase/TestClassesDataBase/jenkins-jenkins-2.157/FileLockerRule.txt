/** 
 * Helper class for tracking which files are locked. Only useful in Windows environments as POSIX seems to allow locked files to be deleted.
 */
public class FileLockerRule extends ExternalResource {
  private final Map<File,Closeable> locks=new HashMap<>();
  @Override protected void after(){
    List<IOException> exceptions=new ArrayList<>();
    Iterator<Closeable> it=locks.values().iterator();
    while (it.hasNext()) {
      try (Closeable ignored=it.next()){
        it.remove();
      }
 catch (      IOException e) {
        exceptions.add(e);
      }
    }
    if (!exceptions.isEmpty())     throw new CompositeIOException("Could not unlock all files",exceptions).asUncheckedIOException();
  }
  public synchronized void acquireLock(  @Nonnull File file) throws IOException {
    assertTrue(Functions.isWindows());
    assertThat(file + " is already locked.",locks,not(hasKey(file)));
    Closeable lock=new FileInputStream(file);
    locks.put(file,lock);
  }
  public synchronized void releaseLock(  @Nonnull File file) throws Exception {
    assertTrue(Functions.isWindows());
    assertThat(file + " is not locked.",locks,hasKey(file));
    locks.remove(file).close();
  }
}
