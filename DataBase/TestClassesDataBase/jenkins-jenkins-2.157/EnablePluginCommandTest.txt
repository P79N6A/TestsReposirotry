public class EnablePluginCommandTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  private CLICommandInvoker.Result installTestPlugin(  String name){
    return new CLICommandInvoker(j,new InstallPluginCommand()).withStdin(EnablePluginCommandTest.class.getResourceAsStream("/plugins/" + name + ".hpi")).invokeWithArgs("-name",name,"-deploy","=");
  }
  private CLICommandInvoker.Result enablePlugins(  String... names){
    return new CLICommandInvoker(j,new EnablePluginCommand()).invokeWithArgs(names);
  }
  private void assertPluginEnabled(  String name){
    PluginWrapper plugin=j.getPluginManager().getPlugin(name);
    assertThat(plugin,is(notNullValue()));
    assertTrue(plugin.isEnabled());
  }
  private void disablePlugin(  String name) throws IOException {
    PluginWrapper plugin=j.getPluginManager().getPlugin(name);
    assertThat(plugin,is(notNullValue()));
    plugin.disable();
  }
  private void assertPluginDisabled(  String name){
    PluginWrapper plugin=j.getPluginManager().getPlugin(name);
    assertThat(plugin,is(notNullValue()));
    assertFalse(plugin.isEnabled());
  }
  private void assumeNotWindows(){
    Assume.assumeFalse(System.getProperty("os.name").startsWith("Windows"));
  }
  private void assertJenkinsInQuietMode(){
    QuietDownCommandTest.assertJenkinsInQuietMode(j);
  }
  private void assertJenkinsNotInQuietMode(){
    QuietDownCommandTest.assertJenkinsNotInQuietMode(j);
  }
  @Test @Issue("JENKINS-52822") public void enableSinglePlugin() throws IOException {
    String name="token-macro";
    PluginManager m=j.getPluginManager();
    assertThat(m.getPlugin(name),is(nullValue()));
    assertThat(installTestPlugin(name),succeeded());
    assertPluginEnabled(name);
    disablePlugin(name);
    assertPluginDisabled(name);
    assertThat(enablePlugins(name),succeeded());
    assertPluginEnabled(name);
    assertJenkinsNotInQuietMode();
  }
  @Test @Issue("JENKINS-52822") public void enableInvalidPluginFails(){
    assertThat(enablePlugins("foobar"),failedWith(3));
    assertJenkinsNotInQuietMode();
  }
  @Test @Issue("JENKINS-52822") public void enableDependerEnablesDependee() throws IOException {
    installTestPlugin("dependee");
    installTestPlugin("depender");
    disablePlugin("depender");
    disablePlugin("dependee");
    assertThat(enablePlugins("depender"),succeeded());
    assertPluginEnabled("depender");
    assertPluginEnabled("dependee");
    assertJenkinsNotInQuietMode();
  }
  @Ignore("TODO calling restart seems to break Surefire") @Test @Issue("JENKINS-52950") public void enablePluginWithRestart() throws IOException {
    assumeNotWindows();
    String name="credentials";
    assertThat(installTestPlugin(name),succeeded());
    disablePlugin(name);
    assertThat(enablePlugins("-restart",name),succeeded());
    assertJenkinsInQuietMode();
  }
  @Test @Issue("JENKINS-52950") public void enableNoPluginsWithRestartIsNoOp(){
    assumeNotWindows();
    String name="variant";
    assertThat(installTestPlugin(name),succeeded());
    assertThat(enablePlugins("-restart",name),succeeded());
    assertJenkinsNotInQuietMode();
  }
}
