/** 
 * Tests of  {@link SetupWizard}.
 * @author Oleg Nenashev
 */
public class SetupWizardTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Rule public TemporaryFolder tmpdir=new TemporaryFolder();
  @Before public void initSetupWizard() throws IOException, InterruptedException {
    final SetupWizard wizard=j.jenkins.getSetupWizard();
    wizard.init(true);
    final FilePath adminPassFile=wizard.getInitialAdminPasswordFile();
    ByteArrayOutputStream ostream=new ByteArrayOutputStream();
    adminPassFile.copyTo(ostream);
    final String password=ostream.toString();
  }
  @Test public void shouldReturnPluginListsByDefault() throws Exception {
    JenkinsRule.WebClient wc=j.createWebClient();
    j.jenkins.setSecurityRealm(SecurityRealm.NO_AUTHENTICATION);
    j.jenkins.setAuthorizationStrategy(AuthorizationStrategy.UNSECURED);
    String response=jsonRequest(wc,"setupWizard/platformPluginList");
    assertThat("Missing plugin is suggestions ",response,containsString("active-directory"));
    assertThat("Missing category is suggestions ",response,containsString("Pipelines and Continuous Delivery"));
  }
  @Test @Issue("JENKINS-34833") public void shouldReturnUpdateSiteJSONIfSpecified() throws Exception {
    CustomUpdateSite us=new CustomUpdateSite(tmpdir.getRoot());
    us.init();
    j.jenkins.getUpdateCenter().getSites().add(us);
    JenkinsRule.WebClient wc=j.createWebClient();
    j.jenkins.setSecurityRealm(SecurityRealm.NO_AUTHENTICATION);
    j.jenkins.setAuthorizationStrategy(AuthorizationStrategy.UNSECURED);
    String response=jsonRequest(wc,"setupWizard/platformPluginList");
    assertThat("Missing plugin is suggestions ",response,containsString("antisamy-markup-formatter"));
    assertThat("Missing category is suggestions ",response,containsString("Organization and Administration"));
    assertThat("Missing plugin is suggestions ",response,not(containsString("active-directory")));
    assertThat("Missing category is suggestions ",response,not(containsString("Pipelines and Continuous Delivery")));
  }
  @Test public void shouldProhibitAccessToPluginListWithoutAuth() throws Exception {
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.assertFails("setupWizard/platformPluginList",403);
    wc.assertFails("setupWizard/createAdminUser",403);
    wc.assertFails("setupWizard/completeInstall",403);
  }
  @Test @Issue("JENKINS-45841") @Ignore public void shouldDisableUnencryptedProtocolsByDefault() throws Exception {
    AgentProtocolTest.assertProtocols(j.jenkins,true,"Encrypted JNLP4-protocols protocol should be enabled","JNLP4-connect");
    AgentProtocolTest.assertProtocols(j.jenkins,false,"Non-encrypted JNLP protocols should be disabled by default","JNLP-connect","JNLP2-connect","CLI-connect");
    AgentProtocolTest.assertMonitorNotActive(j);
  }
  private String jsonRequest(  JenkinsRule.WebClient wc,  String path) throws Exception {
    final Page res;
    try {
      res=wc.goTo(path,null);
    }
 catch (    Exception ex) {
      ex.getMessage();
      throw new AssertionError("Cannot get a response from " + path,ex);
    }
    final String responseJSON=res.getWebResponse().getContentAsString();
    return responseJSON;
  }
private static final class CustomUpdateSite extends UpdateSite {
    private final File tmpdir;
    CustomUpdateSite(    File tmpdir) throws MalformedURLException {
      super("custom-uc",tmpdir.toURI().toURL().toString() + "update-center.json");
      this.tmpdir=tmpdir;
    }
    public void init() throws IOException {
      File newFile=new File(tmpdir,"platform-plugins.json");
      FileUtils.write(newFile,"[ { " + "\"category\":\"Organization and Administration\", " + "\"plugins\": [ { \"name\": \"dashboard-view\"}, { \"name\": \"antisamy-markup-formatter\" } ]"+ "} ]");
    }
  }
}
