/** 
 * Tests for old Remoting agent versions
 */
public class OldRemotingAgentTest {
  @Rule public JenkinsRule j=new JenkinsRuleWithOldAgent();
  @Rule public TemporaryFolder tmpDir=new TemporaryFolder();
  private File agentJar;
  @Before public void extractAgent() throws Exception {
    agentJar=new File(tmpDir.getRoot(),"old-agent.jar");
    FileUtils.copyURLToFile(OldRemotingAgentTest.class.getResource("/old-remoting/remoting-minimal-supported.jar"),agentJar);
  }
  @Test @Issue("JENKINS-48761") public void shouldBeAbleToConnectAgentWithMinimalSupportedVersion() throws Exception {
    Label agentLabel=new LabelAtom("old-agent");
    Slave agent=j.createOnlineSlave(agentLabel);
    boolean isUnix=agent.getComputer().isUnix();
    assertThat("Received wrong agent version. A minimal supported version is expected",agent.getComputer().getSlaveVersion(),equalTo(RemotingVersionInfo.getMinimumSupportedVersion().toString()));
    FreeStyleProject project=j.createFreeStyleProject("foo");
    project.setAssignedLabel(agentLabel);
    project.getBuildersList().add(isUnix ? new Shell("echo Hello") : new BatchFile("echo 'hello'"));
    j.buildAndAssertSuccess(project);
    NodeMonitorAssert.assertMonitors(NodeMonitor.getAll(),agent.getComputer());
  }
private class JenkinsRuleWithOldAgent extends JenkinsRule {
    @Override public ComputerLauncher createComputerLauncher(    EnvVars env) throws URISyntaxException, IOException {
      int sz=this.jenkins.getNodes().size();
      return new SimpleCommandLauncher(String.format("\"%s/bin/java\" %s -jar \"%s\"",System.getProperty("java.home"),SLAVE_DEBUG_PORT > 0 ? " -Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=" + (SLAVE_DEBUG_PORT + sz) : "",agentJar.getAbsolutePath()));
    }
  }
private static class NodeMonitorAssert extends NodeMonitor {
    static void assertMonitors(    Collection<NodeMonitor> toCheck,    Computer c) throws AssertionError {
      for (      NodeMonitor monitor : toCheck) {
        assertMonitor(monitor,c);
      }
    }
    static void assertMonitor(    NodeMonitor monitor,    Computer c) throws AssertionError {
      AbstractNodeMonitorDescriptor<?> descriptor=monitor.getDescriptor();
      final Method monitorMethod;
      try {
        monitorMethod=AbstractAsyncNodeMonitorDescriptor.class.getDeclaredMethod("monitor",Computer.class);
      }
 catch (      NoSuchMethodException ex) {
        throw new AssertionError("Cannot invoke monitor " + monitor + ", no monitor(Computer.class) method in the Descriptor. It will be ignored. ",ex);
      }
      try {
        monitorMethod.setAccessible(true);
        Object res=monitorMethod.invoke(descriptor,c);
        System.out.println("Successfully executed monitor " + monitor);
      }
 catch (      Exception ex) {
        throw new AssertionError("Failed to run monitor " + monitor + " for computer "+ c,ex);
      }
 finally {
        monitorMethod.setAccessible(false);
      }
    }
  }
}
