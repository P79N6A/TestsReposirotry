/** 
 * Tests  {@link Secret}.
 */
public class SecretCompatTest {
  @Rule public JenkinsRule j=new JenkinsRule(){
    @Override public void before() throws Throwable {
      Secret.resetKeyForTest();
      super.before();
    }
  }
;
  @After public void after(){
    Secret.resetKeyForTest();
  }
  @Test @Issue("SECURITY-304") public void encryptedValueStaysTheSameAfterRoundtrip() throws Exception {
    FreeStyleProject project=j.createFreeStyleProject();
    project.addProperty(new ParametersDefinitionProperty(new PasswordParameterDefinition("p","s3cr37","Keep this a secret")));
    project.getAllActions();
    project=j.configRoundtrip(project);
    String round1=project.getConfigFile().asString();
    project=j.configRoundtrip(project);
    String round2=project.getConfigFile().asString();
    assertEquals(round1,round2);
    project=j.jenkins.getItemByFullName(project.getFullName(),FreeStyleProject.class);
    project.removeProperty(ParametersDefinitionProperty.class);
    project.addProperty(new ParametersDefinitionProperty(new PasswordParameterDefinition("p","s3cr37","Keep this a secret")));
    project=j.configRoundtrip(project);
    String round3=project.getConfigFile().asString();
    assertNotEquals(round2,round3);
    project=j.configRoundtrip(project);
    String round4=project.getConfigFile().asString();
    assertEquals(round3,round4);
  }
  @Test @Issue("SECURITY-304") @LocalData public void canReadPreSec304Secrets() throws Exception {
    FreeStyleProject project=j.jenkins.getItemByFullName("OldSecret",FreeStyleProject.class);
    String oldxml=project.getConfigFile().asString();
    assertThat(oldxml,containsString("<defaultValue>z/Dd3qrHdQ6/C5lR7uEafM/jD3nQDrGprw3XsfZ/0vo=</defaultValue>"));
    ParametersDefinitionProperty property=project.getProperty(ParametersDefinitionProperty.class);
    ParameterDefinition definition=property.getParameterDefinitions().get(0);
    assertTrue(definition instanceof PasswordParameterDefinition);
    Secret secret=((PasswordParameterDefinition)definition).getDefaultValueAsSecret();
    assertEquals("theSecret",secret.getPlainText());
    project=j.configRoundtrip(project);
    String newXml=project.getConfigFile().asString();
    assertNotEquals(oldxml,newXml);
    assertThat(newXml,not(containsString("<defaultValue>z/Dd3qrHdQ6/C5lR7uEafM/jD3nQDrGprw3XsfZ/0vo=</defaultValue>")));
    Pattern p=Pattern.compile("<defaultValue>\\{[A-Za-z0-9+/]+={0,2}}</defaultValue>");
    assertTrue(p.matcher(newXml).find());
    project=j.configRoundtrip(project);
    String round2=project.getConfigFile().asString();
    assertEquals(newXml,round2);
  }
}
