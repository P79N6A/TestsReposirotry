/** 
 * @author suren
 */
public class SlaveComputerTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test public void testGetAbsoluteRemotePath() throws Exception {
    Node nodeA=j.createOnlineSlave();
    String path=((DumbSlave)nodeA).getComputer().getAbsoluteRemotePath();
    Assert.assertNotNull(path);
    Assert.assertEquals(getRemoteFS(nodeA,null),path);
    String userAlice="alice";
    MockAuthorizationStrategy authStrategy=new MockAuthorizationStrategy();
    authStrategy.grant(Computer.CONFIGURE,Jenkins.READ).everywhere().to(userAlice);
    j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
    j.jenkins.setAuthorizationStrategy(authStrategy);
    try (ACLContext context=ACL.as(User.getById(userAlice,true))){
      path=((DumbSlave)nodeA).getComputer().getAbsoluteRemotePath();
      Assert.assertNull(path);
      Assert.assertNull(getRemoteFS(nodeA,userAlice));
    }
     String userBob="bob";
    authStrategy.grant(Computer.CONNECT,Jenkins.READ).everywhere().to(userBob);
    try (ACLContext context=ACL.as(User.getById(userBob,true))){
      path=((DumbSlave)nodeA).getComputer().getAbsoluteRemotePath();
      Assert.assertNotNull(path);
      Assert.assertNotNull(getRemoteFS(nodeA,userBob));
    }
   }
  /** 
 * Get remote path through json api
 * @param node slave node
 * @param user the user for webClient
 * @return remote path
 * @throws IOException in case of communication problem.
 * @throws SAXException in case of config format problem.
 */
  private String getRemoteFS(  Node node,  String user) throws Exception {
    JenkinsRule.WebClient wc=j.createWebClient();
    if (user != null) {
      wc.login(user);
    }
    WebResponse response=wc.goTo("computer/" + node.getNodeName() + "/api/json","application/json").getWebResponse();
    JSONObject json=JSONObject.fromObject(response.getContentAsString());
    Object pathObj=json.get("absoluteRemotePath");
    if (pathObj instanceof JSONNull) {
      return null;
    }
 else {
      return pathObj.toString();
    }
  }
}
