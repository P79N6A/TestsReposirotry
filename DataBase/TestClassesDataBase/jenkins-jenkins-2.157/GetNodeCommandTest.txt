public class GetNodeCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,new GetNodeCommand());
  }
  @Test public void getNodeShouldFailWithoutComputerReadPermission() throws Exception {
    j.createSlave("MySlave",null,null);
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invokeWithArgs("MySlave");
    assertThat(result.stderr(),containsString("ERROR: user is missing the Agent/ExtendedRead permission"));
    assertThat(result,failedWith(6));
    assertThat(result,hasNoStandardOutput());
  }
  @Test public void getNodeShouldYieldConfigXml() throws Exception {
    j.createSlave("MySlave",null,null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.EXTENDED_READ,Jenkins.READ).invokeWithArgs("MySlave");
    assertThat(result.stdout(),startsWith("<?xml version=\"1.1\" encoding=\"UTF-8\"?>"));
    assertThat(result.stdout(),containsString("<name>MySlave</name>"));
    assertThat(result,hasNoErrorOutput());
    assertThat(result,succeeded());
  }
  @Test public void getNodeShouldFailIfNodeDoesNotExist() throws Exception {
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.EXTENDED_READ,Jenkins.READ).invokeWithArgs("MySlave");
    assertThat(result.stderr(),containsString("ERROR: No such node 'MySlave'"));
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
  }
  @Issue("SECURITY-281") @Test public void getNodeShouldFailForMaster() throws Exception {
    CLICommandInvoker.Result result=command.authorizedTo(Computer.EXTENDED_READ,Jenkins.READ).invokeWithArgs("");
    assertThat(result.stderr(),containsString("No such node ''"));
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    result=command.authorizedTo(Computer.EXTENDED_READ,Jenkins.READ).invokeWithArgs("(master)");
    assertThat(result.stderr(),containsString("No such node '(master)'"));
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
  }
}
