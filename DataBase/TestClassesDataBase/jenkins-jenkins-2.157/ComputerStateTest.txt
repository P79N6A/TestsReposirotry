/** 
 * @author ogondza
 */
public class ComputerStateTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test public void connect() throws Exception {
    CLICommandInvoker command=new CLICommandInvoker(j,"connect-node");
    Slave slave=j.createSlave();
    assertTrue(slave.toComputer().isOffline());
    Result result=command.authorizedTo(Jenkins.READ,Computer.CONNECT).invokeWithArgs(slave.getNodeName());
    assertThat(result,succeededSilently());
    slave.toComputer().waitUntilOnline();
    assertTrue(slave.toComputer().isOnline());
  }
  @Test public void online() throws Exception {
    CLICommandInvoker command=new CLICommandInvoker(j,"online-node");
    Slave slave=j.createSlave();
    assertTrue(slave.toComputer().isOffline());
    Result result=command.authorizedTo(Jenkins.READ,Computer.CONNECT).invokeWithArgs(slave.getNodeName());
    assertThat(result,succeededSilently());
    slave.toComputer().waitUntilOnline();
    assertTrue(slave.toComputer().isOnline());
  }
  @Test public void disconnect() throws Exception {
    CLICommandInvoker command=new CLICommandInvoker(j,"disconnect-node");
    Slave slave=j.createOnlineSlave();
    assertTrue(slave.toComputer().isOnline());
    Result result=command.authorizedTo(Jenkins.READ,Computer.DISCONNECT).invokeWithArgs(slave.getNodeName(),"-m","Custom cause message");
    assertThat(result,succeededSilently());
    assertTrue(slave.toComputer().isOffline());
    UserCause cause=(UserCause)slave.toComputer().getOfflineCause();
    assertThat(cause.toString(),endsWith("Custom cause message"));
    assertThat(cause.getUser(),equalTo(command.user()));
  }
  @Test public void offline() throws Exception {
    CLICommandInvoker command=new CLICommandInvoker(j,"offline-node");
    Slave slave=j.createOnlineSlave();
    assertTrue(slave.toComputer().isOnline());
    Result result=command.authorizedTo(Jenkins.READ,Computer.DISCONNECT).invokeWithArgs(slave.getNodeName(),"-m","Custom cause message");
    assertThat(result,succeededSilently());
    assertTrue(slave.toComputer().isOffline());
    UserCause cause=(UserCause)slave.toComputer().getOfflineCause();
    assertThat(cause.toString(),endsWith("Custom cause message"));
    assertThat(cause.getUser(),equalTo(command.user()));
  }
  @Test public void testUiForConnected() throws Exception {
    DumbSlave slave=j.createOnlineSlave();
    Computer computer=slave.toComputer();
    WebClient wc=j.createWebClient();
    assertConnected(wc,slave);
    computer.setTemporarilyOffline(true,null);
    assertTrue(computer.isTemporarilyOffline());
    assertConnected(wc,slave);
    slave.toComputer().disconnect(null);
    HtmlPage page=wc.getPage(slave);
    assertLinkDoesNotExist(page,"Disconnect");
    assertLinkDoesNotExist(page,"Script Console");
    HtmlPage script=wc.getPage(slave,"script");
    assertThat(script.getByXPath("//form[@action='script']"),empty());
    assertLinkDoesNotExist(page,"System Information");
    HtmlPage info=wc.getPage(slave,"systemInfo");
    assertThat(info.asText(),not(containsString("Environment Variables")));
  }
  private void assertConnected(  WebClient wc,  DumbSlave slave) throws Exception {
    HtmlPage main=wc.getPage(slave);
    main.getAnchorByText("Disconnect");
    main.getAnchorByText("Script Console");
    HtmlPage script=wc.getPage(slave,"script");
    assertThat(script.getByXPath("//form[@action='script']"),not(empty()));
    main.getAnchorByText("System Information");
    HtmlPage info=wc.getPage(slave,"systemInfo");
    assertThat(info.asText(),containsString("Environment Variables"));
  }
  private void assertLinkDoesNotExist(  HtmlPage page,  String text){
    try {
      page.getAnchorByText(text);
      fail(text + " link should not exist");
    }
 catch (    ElementNotFoundException ex) {
    }
  }
}
