private static class RemotableBuildListener implements BuildListener {
  private static final long serialVersionUID=1;
  /** 
 * location of log file streamed to by multiple sources 
 */
  private final File logFile;
  /** 
 * records allocation & deserialization history; e.g.,  {@code master → agentName} 
 */
  private final String id;
  private transient PrintStream logger;
  RemotableBuildListener(  File logFile){
    this(logFile,"master");
  }
  private RemotableBuildListener(  File logFile,  String id){
    this.logFile=logFile;
    this.id=id;
  }
  @Override public PrintStream getLogger(){
    if (logger == null) {
      final OutputStream fos;
      try {
        fos=new FileOutputStream(logFile,true);
        logger=new PrintStream(new LineTransformationOutputStream(){
          @Override protected void eol(          byte[] b,          int len) throws IOException {
            fos.write(("[" + id + "] ").getBytes(StandardCharsets.UTF_8));
            fos.write(b,0,len);
          }
        }
,true,"UTF-8");
      }
 catch (      IOException x) {
        throw new AssertionError(x);
      }
    }
    return logger;
  }
  private Object writeReplace(){
    Thread.dumpStack();
    String name=Channel.current().getName();
    return new RemotableBuildListener(logFile,id + " → " + name);
  }
}
