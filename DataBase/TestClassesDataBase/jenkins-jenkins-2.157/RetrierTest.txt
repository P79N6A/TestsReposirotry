public class RetrierTest {
  private static Logger LOG=Logger.getLogger(RetrierTest.class.getName());
  @Test public void performedAtThirdAttemptTest() throws Exception {
    final int SUCCESSFUL_ATTEMPT=3;
    final String ACTION="print";
    RingBufferLogHandler handler=new RingBufferLogHandler(20);
    Logger.getLogger(Retrier.class.getName()).addHandler(handler);
    Retrier<Boolean> r=new Retrier.Builder<>(() -> {
      LOG.info("action performed");
      return true;
    }
,(currentAttempt,result) -> currentAttempt == SUCCESSFUL_ATTEMPT,ACTION).withAttempts(SUCCESSFUL_ATTEMPT + 1).withDelay(100).build();
    Boolean finalResult=r.start();
    Assert.assertTrue(finalResult == null ? false : finalResult);
    String text=Messages.Retrier_Success(ACTION,SUCCESSFUL_ATTEMPT);
    assertTrue(String.format("The log should contain '%s'",text),handler.getView().stream().anyMatch(m -> m.getMessage().contains(text)));
  }
  @Test public void sleepWorksTest() throws Exception {
    final int SUCCESSFUL_ATTEMPT=2;
    final String ACTION="print";
    final int SLEEP=500;
    RingBufferLogHandler handler=new RingBufferLogHandler(20);
    Logger retrierLogger=Logger.getLogger(Retrier.class.getName());
    Level currentLogLevel=retrierLogger.getLevel();
    retrierLogger.setLevel(Level.FINE);
    retrierLogger.addHandler(handler);
    Retrier<Boolean> r=new Retrier.Builder<>(() -> {
      LOG.info("action performed");
      return true;
    }
,(currentAttempt,result) -> currentAttempt == SUCCESSFUL_ATTEMPT,ACTION).withAttempts(SUCCESSFUL_ATTEMPT).withDelay(SLEEP).build();
    Instant start=Instant.now();
    Boolean finalResult=r.start();
    Instant finish=Instant.now();
    long timeElapsed=Duration.between(start,finish).toMillis();
    Assert.assertTrue(timeElapsed >= SLEEP);
    Assert.assertTrue(finalResult == null ? false : finalResult);
    String text=Messages.Retrier_Sleeping(SLEEP,ACTION);
    assertTrue(String.format("The log should contain '%s'",text),handler.getView().stream().anyMatch(m -> m.getMessage().contains(text)));
    retrierLogger.setLevel(currentLogLevel);
  }
  @Test public void failedActionAfterThreeAttemptsTest() throws Exception {
    final int ATTEMPTS=3;
    final String ACTION="print";
    RingBufferLogHandler handler=new RingBufferLogHandler(20);
    Logger.getLogger(Retrier.class.getName()).addHandler(handler);
    Retrier<Boolean> r=new Retrier.Builder<>(() -> {
      LOG.info("action performed");
      return false;
    }
,(currentAttempt,result) -> result,ACTION).withAttempts(ATTEMPTS).withDelay(100).build();
    Boolean finalResult=r.start();
    Assert.assertFalse(finalResult == null ? false : finalResult);
    String text=Messages.Retrier_NoSuccess(ACTION,ATTEMPTS);
    assertTrue(String.format("The log should contain '%s'",text),handler.getView().stream().anyMatch(m -> m.getMessage().contains(text)));
  }
  @Test public void failedActionWithExceptionAfterThreeAttemptsWithoutListenerTest() throws Exception {
    final int ATTEMPTS=3;
    final String ACTION="print";
    RingBufferLogHandler handler=new RingBufferLogHandler(20);
    Logger.getLogger(Retrier.class.getName()).addHandler(handler);
    Retrier<Boolean> r=new Retrier.Builder<>((Callable<Boolean>)() -> {
      throw new IndexOutOfBoundsException("Exception allowed considered as failure");
    }
,(currentAttempt,result) -> result == null ? false : result,ACTION).withAttempts(ATTEMPTS).withDelay(100).withDuringActionExceptions(new Class[]{IndexOutOfBoundsException.class}).build();
    Boolean finalResult=r.start();
    Assert.assertNull(finalResult);
    String textNoSuccess=Messages.Retrier_NoSuccess(ACTION,ATTEMPTS);
    assertTrue(String.format("The log should contain '%s'",textNoSuccess),handler.getView().stream().anyMatch(m -> m.getMessage().contains(textNoSuccess)));
    String testException=Messages.Retrier_ExceptionFailed(ATTEMPTS,ACTION);
    assertTrue(String.format("The log should contain '%s'",testException),handler.getView().stream().anyMatch(m -> m.getMessage().startsWith(testException)));
  }
  @Test public void failedActionWithAllowedExceptionWithListenerChangingResultTest() throws Exception {
    final int ATTEMPTS=1;
    final String ACTION="print";
    RingBufferLogHandler handler=new RingBufferLogHandler(20);
    Logger.getLogger(Retrier.class.getName()).addHandler(handler);
    Retrier<Boolean> r=new Retrier.Builder<>((Callable<Boolean>)() -> {
      throw new IndexOutOfBoundsException("Exception allowed considered as failure");
    }
,(currentAttempt,result) -> result,ACTION).withAttempts(ATTEMPTS).withDuringActionExceptions(new Class[]{IndexOutOfBoundsException.class}).withDuringActionExceptionListener((attempt,exception) -> true).build();
    Boolean finalResult=r.start();
    Assert.assertTrue(finalResult == null ? false : finalResult);
    String textSuccess=Messages.Retrier_Success(ACTION,ATTEMPTS);
    assertTrue(String.format("The log should contain '%s'",textSuccess),handler.getView().stream().anyMatch(m -> m.getMessage().contains(textSuccess)));
    String testException=Messages.Retrier_ExceptionFailed(ATTEMPTS,ACTION);
    assertTrue(String.format("The log should contain '%s'",testException),handler.getView().stream().anyMatch(m -> m.getMessage().startsWith(testException)));
  }
  @Test public void failedActionWithAllowedExceptionByInheritanceTest() throws Exception {
    final int ATTEMPTS=1;
    final String ACTION="print";
    RingBufferLogHandler handler=new RingBufferLogHandler(20);
    Logger.getLogger(Retrier.class.getName()).addHandler(handler);
    Retrier<Boolean> r=new Retrier.Builder<>((Callable<Boolean>)() -> {
      throw new ArrayIndexOutOfBoundsException("Unallowed exception breaks the process");
    }
,(currentAttempt,result) -> result,ACTION).withAttempts(ATTEMPTS).withDuringActionExceptions(new Class[]{IndexOutOfBoundsException.class}).withDuringActionExceptionListener((attempt,exception) -> true).build();
    Boolean finalResult=r.start();
    Assert.assertTrue(finalResult == null ? false : finalResult);
    String textSuccess=Messages.Retrier_Success(ACTION,ATTEMPTS);
    assertTrue(String.format("The log should contain '%s'",textSuccess),handler.getView().stream().anyMatch(m -> m.getMessage().contains(textSuccess)));
    String testException=Messages.Retrier_ExceptionFailed(ATTEMPTS,ACTION);
    assertTrue(String.format("The log should contain '%s'",testException),handler.getView().stream().anyMatch(m -> m.getMessage().startsWith(testException)));
  }
  @Test public void failedActionWithUnAllowedExceptionTest(){
    final int ATTEMPTS=1;
    final String ACTION="print";
    RingBufferLogHandler handler=new RingBufferLogHandler(20);
    Logger.getLogger(Retrier.class.getName()).addHandler(handler);
    Retrier<Boolean> r=new Retrier.Builder<>((Callable<Boolean>)() -> {
      throw new IOException("Unallowed exception breaks the process");
    }
,(currentAttempt,result) -> result,ACTION).withAttempts(ATTEMPTS).withDuringActionExceptions(new Class[]{IndexOutOfBoundsException.class}).build();
    try {
      r.start();
      fail("The process should be exited with an unexpected exception");
    }
 catch (    IOException e) {
      String testFailure=Messages.Retrier_ExceptionThrown(ATTEMPTS,ACTION);
      assertTrue(String.format("The log should contain '%s'",testFailure),handler.getView().stream().anyMatch(m -> m.getMessage().contains(testFailure)));
    }
catch (    Exception e) {
      fail(String.format("Unexpected exception: %s",e));
    }
  }
}
