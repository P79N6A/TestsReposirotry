/** 
 * @author Kohsuke Kawaguchi
 */
public class ValidateButtonTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test public void testValidateIsCalled() throws Exception {
    TestValidateIsCalled.DescriptorImpl d=j.jenkins.getDescriptorByType(TestValidateIsCalled.DescriptorImpl.class);
    assertNotNull(d);
    d.test1Outcome=new Exception();
    HtmlPage p=j.createWebClient().goTo("test");
    HtmlButton button=HtmlFormUtil.getButtonByCaption(p.getFormByName("config"),"test");
    HtmlElementUtil.click(button);
    if (d.test1Outcome != null)     throw d.test1Outcome;
  }
@TestExtension("testValidateIsCalled") public static final class TestValidateIsCalled implements Describable<TestValidateIsCalled>, UnprotectedRootAction {
    @Override public @CheckForNull String getIconFileName(){
      return null;
    }
    @Override public @CheckForNull String getDisplayName(){
      return null;
    }
    @Override public String getUrlName(){
      return "test";
    }
    public DescriptorImpl getDescriptor(){
      return Jenkins.getInstance().getDescriptorByType(DescriptorImpl.class);
    }
@Extension public static final class DescriptorImpl extends Descriptor<TestValidateIsCalled> {
      private Exception test1Outcome;
      public void doValidateTest1(      @QueryParameter("a") String a,      @QueryParameter("b") boolean b,      @QueryParameter("c") boolean c,      @QueryParameter("d") String d,      @QueryParameter("e") String e){
        try {
          assertEquals("avalue",a);
          assertTrue(b);
          assertFalse(c);
          assertEquals("dvalue",d);
          assertEquals("e2",e);
          test1Outcome=null;
        }
 catch (        Exception t) {
          test1Outcome=t;
        }
      }
    }
  }
  @Test public void noInjectionArePossible() throws Exception {
    NoInjectionArePossible.DescriptorImpl d=j.jenkins.getDescriptorByType(NoInjectionArePossible.DescriptorImpl.class);
    assertNotNull(d);
    checkRegularCase(d);
    checkInjectionInMethod(d);
    checkInjectionInWith(d);
  }
  private void checkRegularCase(  NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {
    descriptor.paramMethod="validateInjection";
    descriptor.paramWith="a,b";
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    HtmlPage p=wc.goTo("test");
    descriptor.wasCalled=false;
    HtmlElementUtil.click(getValidateButton(p));
    assertNotEquals("hacked",p.getTitleText());
    assertTrue(descriptor.wasCalled);
  }
  private void checkInjectionInMethod(  NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {
    descriptor.paramMethod="validateInjection',document.title='hacked'+'";
    descriptor.paramWith="a,b";
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    HtmlPage p=wc.goTo("test");
    HtmlElementUtil.click(getValidateButton(p));
    assertNotEquals("hacked",p.getTitleText());
  }
  private void checkInjectionInWith(  NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {
    descriptor.paramMethod="validateInjection";
    descriptor.paramWith="a,b',document.title='hacked'+'";
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    HtmlPage p=wc.goTo("test");
    descriptor.wasCalled=false;
    HtmlElementUtil.click(getValidateButton(p));
    assertNotEquals("hacked",p.getTitleText());
    assertTrue(descriptor.wasCalled);
  }
  private HtmlButton getValidateButton(  HtmlPage page){
    DomNodeList<HtmlElement> buttons=page.getElementById("test-panel").getElementsByTagName("button");
    assertEquals(1,buttons.size());
    return (HtmlButton)buttons.get(0);
  }
@TestExtension("noInjectionArePossible") public static final class NoInjectionArePossible implements Describable<NoInjectionArePossible>, UnprotectedRootAction {
    @Override public @CheckForNull String getIconFileName(){
      return null;
    }
    @Override public @CheckForNull String getDisplayName(){
      return null;
    }
    @Override public String getUrlName(){
      return "test";
    }
    public DescriptorImpl getDescriptor(){
      return Jenkins.getInstance().getDescriptorByType(DescriptorImpl.class);
    }
@Extension public static final class DescriptorImpl extends Descriptor<NoInjectionArePossible> {
      private boolean wasCalled=false;
      public String paramMethod="validateInjection";
      public String paramWith=null;
      public void doValidateInjection(      StaplerRequest request){
        wasCalled=true;
      }
    }
  }
}
