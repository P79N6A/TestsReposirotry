public static class ParametersCheckBuilder extends Builder {
  private final boolean expectLegacyBehavior;
  public ParametersCheckBuilder(  boolean expectLegacyBehavior){
    this.expectLegacyBehavior=expectLegacyBehavior;
  }
  @Override public boolean perform(  AbstractBuild<?,?> build,  Launcher launcher,  BuildListener listener) throws InterruptedException, IOException {
    ParametersAction pa=build.getAction(ParametersAction.class);
    assertEquals("foo value expected changed","baz",pa.getParameter("foo").getValue());
    if (expectLegacyBehavior) {
      assertTrue("undef parameter is listed in getParameters",hasParameterWithName(pa.getParameters(),"undef"));
      assertTrue("undef parameter is listed in iterator",hasParameterWithName(pa,"undef"));
      assertTrue("undef in environment",build.getEnvironment(listener).keySet().contains("undef"));
      assertTrue("UNDEF in environment",build.getEnvironment(listener).keySet().contains("UNDEF"));
    }
 else {
      assertFalse("undef parameter is not listed in getParameters",hasParameterWithName(pa.getParameters(),"undef"));
      assertFalse("undef parameter is not listed in iterator",hasParameterWithName(pa,"undef"));
      assertFalse("undef not in environment",build.getEnvironment(listener).keySet().contains("undef"));
      assertFalse("UNDEF not in environment",build.getEnvironment(listener).keySet().contains("UNDEF"));
    }
    assertTrue("undef parameter is listed in getAllParameters",hasParameterWithName(pa.getAllParameters(),"undef"));
    assertEquals("undef parameter direct access expected to work","undef",pa.getParameter("undef").getValue());
    return true;
  }
}
