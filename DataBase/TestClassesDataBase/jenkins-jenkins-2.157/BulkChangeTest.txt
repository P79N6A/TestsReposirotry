/** 
 * Tests  {@link BulkChange}.
 * @author Kohsuke Kawaguchi
 */
public class BulkChangeTest {
private class Point implements Saveable {
    /** 
 * Don't actually do any save, but just remember how many the actual I/O would have happened.
 */
    int saveCount=0;
    @SuppressWarnings("unused") int x, y;
    public void setX(    int x) throws IOException {
      this.x=x;
      save();
    }
    public void setY(    int y) throws IOException {
      this.y=y;
      save();
    }
    public void set(    int x,    int y) throws IOException {
      setX(x);
      setY(y);
    }
    public void save() throws IOException {
      if (BulkChange.contains(this))       return;
      saveCount++;
    }
  }
  /** 
 * If there is no BulkChange, we should see two saves.
 */
  @Test public void noBulkChange() throws Exception {
    Point pt=new Point();
    pt.set(0,0);
    assertEquals(2,pt.saveCount);
  }
  /** 
 * With a  {@link BulkChange}, this will become just one save.
 */
  @Test public void bulkChange() throws Exception {
    Point pt=new Point();
    BulkChange bc=new BulkChange(pt);
    try {
      pt.set(0,0);
    }
  finally {
      bc.commit();
    }
    assertEquals(1,pt.saveCount);
  }
  /** 
 * {@link BulkChange}s can be nested.
 */
  @Test public void nestedBulkChange() throws Exception {
    Point pt=new Point();
    Point pt2=new Point();
    BulkChange bc1=new BulkChange(pt);
    try {
      BulkChange bc2=new BulkChange(pt2);
      try {
        BulkChange bc3=new BulkChange(pt);
        try {
          pt.set(0,0);
        }
  finally {
          bc3.commit();
        }
      }
  finally {
        bc2.commit();
      }
      pt.set(0,0);
    }
  finally {
      bc1.commit();
    }
    assertEquals(1,pt.saveCount);
  }
}
