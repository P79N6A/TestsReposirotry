public class LoadDetachedPluginsTest {
  @Rule public RestartableJenkinsRule rr=PluginManagerUtil.newRestartableJenkinsRule();
  @Issue("JENKINS-48365") @Test @LocalData public void upgradeFromJenkins1() throws IOException {
    VersionNumber since=new VersionNumber("1.550");
    rr.then(r -> {
      List<DetachedPlugin> detachedPlugins=ClassicPluginStrategy.getDetachedPlugins(since);
      assertThat("Plugins have been detached since the pre-upgrade version",detachedPlugins.size(),greaterThan(4));
      assertThat("Plugins detached between the pre-upgrade version and the current version should be installed",getInstalledDetachedPlugins(r,detachedPlugins).size(),equalTo(detachedPlugins.size()));
      assertNoFailedPlugins(r);
    }
);
  }
  @Issue("JENKINS-48365") @Test @LocalData public void upgradeFromJenkins2(){
    VersionNumber since=new VersionNumber("2.0");
    rr.then(r -> {
      List<DetachedPlugin> detachedPlugins=ClassicPluginStrategy.getDetachedPlugins(since);
      assertThat("Plugins have been detached since the pre-upgrade version",detachedPlugins.size(),greaterThan(1));
      assertThat("Plugins detached between the pre-upgrade version and the current version should be installed",getInstalledDetachedPlugins(r,detachedPlugins).size(),equalTo(detachedPlugins.size()));
      assertNoFailedPlugins(r);
    }
);
  }
  @Issue("JENKINS-48604") @Test @LocalData public void upgradeFromJenkins2WithNewerDependency(){
    VersionNumber since=new VersionNumber("2.0");
    rr.then(r -> {
      List<DetachedPlugin> detachedPlugins=ClassicPluginStrategy.getDetachedPlugins(since);
      assertThat("Plugins have been detached since the pre-upgrade version",detachedPlugins.size(),greaterThan(1));
      assertThat("Plugins detached between the pre-upgrade version and the current version should be installed",getInstalledDetachedPlugins(r,detachedPlugins).size(),equalTo(detachedPlugins.size()));
      Plugin scriptSecurity=r.jenkins.getPlugin("script-security");
      assertThat("Script-security should be installed",scriptSecurity,notNullValue());
      assertThat("Dependencies of detached plugins should not be downgraded",scriptSecurity.getWrapper().getVersionNumber(),equalTo(new VersionNumber("1.34")));
      assertNoFailedPlugins(r);
    }
);
  }
  @Test @LocalData public void upgradeFromJenkins2WithOlderDependency(){
    VersionNumber since=new VersionNumber("2.0");
    rr.then(r -> {
      List<DetachedPlugin> detachedPlugins=ClassicPluginStrategy.getDetachedPlugins(since);
      assertThat("Plugins have been detached since the pre-upgrade version",detachedPlugins.size(),greaterThan(1));
      assertThat("Plugins detached between the pre-upgrade version and the current version should be installed",getInstalledDetachedPlugins(r,detachedPlugins).size(),equalTo(detachedPlugins.size()));
      Plugin scriptSecurity=r.jenkins.getPlugin("script-security");
      assertThat("Script-security should be installed",scriptSecurity,notNullValue());
      assertThat("Dependencies of detached plugins should be upgraded to the required version",scriptSecurity.getWrapper().getVersionNumber(),equalTo(new VersionNumber("1.18.1")));
      assertNoFailedPlugins(r);
    }
);
  }
  @Issue("JENKINS-48899") @Test @LocalData public void upgradeFromJenkins2WithNewerPlugin(){
    VersionNumber since=new VersionNumber("2.0");
    rr.then(r -> {
      List<DetachedPlugin> detachedPlugins=ClassicPluginStrategy.getDetachedPlugins(since);
      assertThat("Plugins have been detached since the pre-upgrade version",detachedPlugins.size(),greaterThan(1));
      assertThat("Plugins detached between the pre-upgrade version and the current version should be installed",getInstalledDetachedPlugins(r,detachedPlugins).size(),equalTo(detachedPlugins.size()));
      Plugin commandLauncher=r.jenkins.getPlugin("command-launcher");
      assertThat("Installed detached plugins should not be overwritten by older versions",commandLauncher.getWrapper().getVersionNumber(),equalTo(new VersionNumber("1.2")));
      assertNoFailedPlugins(r);
    }
);
  }
  @Test public void newInstallation(){
    rr.then(r -> {
      List<DetachedPlugin> detachedPlugins=ClassicPluginStrategy.getDetachedPlugins();
      assertThat("Detached plugins should exist",detachedPlugins,not(empty()));
      assertThat("Detached plugins should not be installed on a new instance",getInstalledDetachedPlugins(r,detachedPlugins),empty());
      assertNoFailedPlugins(r);
    }
);
    rr.then(r -> {
      List<DetachedPlugin> detachedPlugins=ClassicPluginStrategy.getDetachedPlugins();
      assertThat("Detached plugins should exist",detachedPlugins,not(empty()));
      assertThat("Detached plugins should not be installed after restarting",getInstalledDetachedPlugins(r,detachedPlugins),empty());
      assertNoFailedPlugins(r);
    }
);
  }
  private List<PluginWrapper> getInstalledDetachedPlugins(  JenkinsRule r,  List<DetachedPlugin> detachedPlugins){
    PluginManager pluginManager=r.jenkins.getPluginManager();
    List<PluginWrapper> installedPlugins=new ArrayList<>();
    for (    DetachedPlugin plugin : detachedPlugins) {
      PluginWrapper wrapper=pluginManager.getPlugin(plugin.getShortName());
      if (wrapper != null) {
        installedPlugins.add(wrapper);
        assertTrue("Detached plugins should be active if installed",wrapper.isActive());
        assertThat("Detached plugins should not have dependency errors",wrapper.getDependencyErrors(),empty());
      }
    }
    return installedPlugins;
  }
  private void assertNoFailedPlugins(  JenkinsRule r){
    assertThat("Detached plugins and their dependencies should not fail to install",r.jenkins.getPluginManager().getFailedPlugins(),empty());
  }
}
