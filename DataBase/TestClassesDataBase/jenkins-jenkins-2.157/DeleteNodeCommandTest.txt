public class DeleteNodeCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,"delete-node");
  }
  @Test public void deleteNodeShouldFailWithoutNodeDeletePermission() throws Exception {
    j.createSlave("aNode","",null);
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invokeWithArgs("aNode");
    assertThat(result,failedWith(6));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: user is missing the Agent/Delete permission"));
  }
  @Test public void deleteNodeShouldSucceed() throws Exception {
    j.createSlave("aNode","",null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.DELETE,Jenkins.READ).invokeWithArgs("aNode");
    assertThat(result,succeededSilently());
    assertThat(j.jenkins.getNode("aNode"),nullValue());
  }
  @Test public void deleteNodeShouldFailIfNodeDoesNotExist(){
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.DELETE,Jenkins.READ).invokeWithArgs("never_created");
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: No such node 'never_created'"));
  }
  @Test public void deleteNodeManyShouldSucceed() throws Exception {
    j.createSlave("aNode1","",null);
    j.createSlave("aNode2","",null);
    j.createSlave("aNode3","",null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.DELETE,Jenkins.READ).invokeWithArgs("aNode1","aNode2","aNode3");
    assertThat(result,succeededSilently());
    assertThat(j.jenkins.getView("aNode1"),nullValue());
    assertThat(j.jenkins.getView("aNode2"),nullValue());
    assertThat(j.jenkins.getView("aNode3"),nullValue());
  }
  @Test public void deleteNodeManyShouldFailIfFirstNodeDoesNotExist() throws Exception {
    j.createSlave("aNode1","",null);
    j.createSlave("aNode2","",null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.DELETE,Jenkins.READ).invokeWithArgs("never_created","aNode1","aNode2");
    assertThat(result,failedWith(5));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("never_created: No such node 'never_created'"));
    assertThat(result.stderr(),containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));
    assertThat(j.jenkins.getView("aNode1"),nullValue());
    assertThat(j.jenkins.getView("aNode2"),nullValue());
    assertThat(j.jenkins.getView("never_created"),nullValue());
  }
  @Test public void deleteNodeManyShouldFailIfMiddleNodeDoesNotExist() throws Exception {
    j.createSlave("aNode1","",null);
    j.createSlave("aNode2","",null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.DELETE,Jenkins.READ).invokeWithArgs("aNode1","never_created","aNode2");
    assertThat(result,failedWith(5));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("never_created: No such node 'never_created'"));
    assertThat(result.stderr(),containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));
    assertThat(j.jenkins.getView("aNode1"),nullValue());
    assertThat(j.jenkins.getView("aNode2"),nullValue());
    assertThat(j.jenkins.getView("never_created"),nullValue());
  }
  @Test public void deleteNodeManyShouldFailIfLastNodeDoesNotExist() throws Exception {
    j.createSlave("aNode1","",null);
    j.createSlave("aNode2","",null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.DELETE,Jenkins.READ).invokeWithArgs("aNode1","aNode2","never_created");
    assertThat(result,failedWith(5));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("never_created: No such node 'never_created'"));
    assertThat(result.stderr(),containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));
    assertThat(j.jenkins.getView("aNode1"),nullValue());
    assertThat(j.jenkins.getView("aNode2"),nullValue());
    assertThat(j.jenkins.getView("never_created"),nullValue());
  }
  @Test public void deleteNodeManyShouldFailIfMoreNodesDoNotExist() throws Exception {
    j.createSlave("aNode1","",null);
    j.createSlave("aNode2","",null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.DELETE,Jenkins.READ).invokeWithArgs("aNode1","never_created1","never_created2","aNode2");
    assertThat(result,failedWith(5));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("never_created1: No such node 'never_created1'"));
    assertThat(result.stderr(),containsString("never_created2: No such node 'never_created2'"));
    assertThat(result.stderr(),containsString("ERROR: " + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));
    assertThat(j.jenkins.getView("aNode1"),nullValue());
    assertThat(j.jenkins.getView("aNode2"),nullValue());
    assertThat(j.jenkins.getView("never_created1"),nullValue());
    assertThat(j.jenkins.getView("never_created2"),nullValue());
  }
  @Test public void deleteNodeManyShouldSucceedEvenANodeIsSpecifiedTwice() throws Exception {
    j.createSlave("aNode1","",null);
    j.createSlave("aNode2","",null);
    final CLICommandInvoker.Result result=command.authorizedTo(Computer.DELETE,Jenkins.READ).invokeWithArgs("aNode1","aNode2","aNode1");
    assertThat(result,succeededSilently());
    assertThat(j.jenkins.getView("aNode1"),nullValue());
    assertThat(j.jenkins.getView("aNode2"),nullValue());
  }
}
