public class JobPropertyTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Rule public LoggerRule logs=new LoggerRule();
  @Test @Issue("JENKINS-2398") public void jobPropertySummaryIsShownInMavenModuleSetIndexPage() throws Exception {
    assertJobPropertySummaryIsShownInIndexPage(MavenModuleSet.class);
  }
  @Test @Issue("JENKINS-2398") public void jobPropertySummaryIsShownInMatrixProjectIndexPage() throws Exception {
    assertJobPropertySummaryIsShownInIndexPage(MatrixProject.class);
  }
  @Test @Issue("JENKINS-2398") public void jobPropertySummaryIsShownInFreeStyleProjectIndexPage() throws Exception {
    assertJobPropertySummaryIsShownInIndexPage(FreeStyleProject.class);
  }
  private void assertJobPropertySummaryIsShownInIndexPage(  Class<? extends TopLevelItem> type) throws Exception {
    JobPropertyImpl jp=new JobPropertyImpl("NeedleInPage");
    Job<?,?> project=(Job<?,?>)j.jenkins.createProject(type,"job-test-case");
    project.addProperty(jp);
    HtmlPage page=j.createWebClient().goTo("job/job-test-case");
    WebAssert.assertTextPresent(page,"NeedleInPage");
  }
public static class JobPropertyImpl extends JobProperty<Job<?,?>> {
    private final String propertyString;
    public JobPropertyImpl(    String propertyString){
      this.propertyString=propertyString;
    }
    public String getPropertyString(){
      return propertyString;
    }
@TestExtension public static class DescriptorImpl extends JobPropertyDescriptor {
      @SuppressWarnings("rawtypes") @Override public boolean isApplicable(      Class<? extends Job> jobType){
        return false;
      }
    }
  }
  /** 
 * Make sure that the UI rendering works as designed.
 */
  @Test public void configRoundtrip() throws Exception {
    logs.record(Descriptor.class,Level.ALL);
    FreeStyleProject p=j.createFreeStyleProject();
    JobPropertyWithConfigImpl before=new JobPropertyWithConfigImpl("Duke");
    p.addProperty(before);
    j.configRoundtrip((Item)p);
    JobPropertyWithConfigImpl after=p.getProperty(JobPropertyWithConfigImpl.class);
    assertNotSame(after,before);
    j.assertEqualDataBoundBeans(before,after);
    p.removeProperty(after);
    JobPropertyWithConfigImpl empty=new JobPropertyWithConfigImpl("");
    p.addProperty(empty);
    j.configRoundtrip((Item)p);
    assertNull(p.getProperty(JobPropertyWithConfigImpl.class));
  }
public static class JobPropertyWithConfigImpl extends JobProperty<Job<?,?>> {
    public String name;
    @DataBoundConstructor public JobPropertyWithConfigImpl(    String name){
      this.name=name;
    }
@TestExtension("configRoundtrip") public static class DescriptorImpl extends JobPropertyDescriptor {
      @Override public JobProperty<?> newInstance(      StaplerRequest req,      JSONObject formData) throws FormException {
        JobPropertyWithConfigImpl prop=(JobPropertyWithConfigImpl)super.newInstance(req,formData);
        return prop.name.isEmpty() ? null : prop;
      }
    }
  }
  @Test public void invisibleProperty() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    InvisibleImpl before=new InvisibleImpl();
    p.addProperty(before);
    j.configRoundtrip((Item)p);
    InvisibleImpl after=p.getProperty(InvisibleImpl.class);
    assertSame(after,before);
  }
public static class InvisibleImpl extends JobProperty<Job<?,?>> {
    public String name;
    InvisibleImpl(){
    }
    @Override public JobProperty<?> reconfigure(    StaplerRequest req,    JSONObject form) throws FormException {
      return this;
    }
@TestExtension("invisibleProperty") public static class DescriptorImpl extends JobPropertyDescriptor {
    }
  }
}
