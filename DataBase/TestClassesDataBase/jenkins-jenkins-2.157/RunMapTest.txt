public class RunMapTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  /** 
 * Makes sure that reloading the project while a build is in progress won't clobber that in-progress build.
 */
  @Issue("JENKNS-12318") @Test public void reloadWhileBuildIsInProgress() throws Exception {
    FreeStyleProject p=r.createFreeStyleProject();
    FreeStyleBuild b1=r.assertBuildStatusSuccess(p.scheduleBuild2(0));
    p.getBuildersList().add(new SleepBuilder(9999999));
    FreeStyleBuild b2=p.scheduleBuild2(0).waitForStart();
    assertEquals(2,b2.number);
    p.updateByXml((Source)new StreamSource(p.getConfigFile().getFile()));
    assertSame(p.getBuildByNumber(b2.number),b2);
    assertNotSame(b1,p.getBuildByNumber(1));
    b1=p.getBuildByNumber(1);
    assertSame(b1.getNextBuild(),b2);
    assertSame(b2.getPreviousBuild(),b1);
  }
  @Issue("JENKINS-27530") @Test public void reloadWhileBuildIsInQueue() throws Exception {
    FreeStyleProject p=r.createFreeStyleProject("p");
    p.getBuildersList().add(new SleepBuilder(9999999));
    r.jenkins.setNumExecutors(1);
    assertEquals(1,p.scheduleBuild2(0).waitForStart().number);
    p.scheduleBuild2(0);
    r.jenkins.reload();
    p=r.jenkins.getItemByFullName("p",FreeStyleProject.class);
    FreeStyleBuild b1=p.getLastBuild();
    assertEquals(1,b1.getNumber());
    Queue.Item[] items=Queue.getInstance().getItems();
    assertEquals(1,items.length);
    assertEquals(p,items[0].task);
    QueueTaskFuture<Queue.Executable> b2f=items[0].getFuture();
    b1.getExecutor().interrupt();
    r.assertBuildStatus(Result.ABORTED,r.waitForCompletion(b1));
    FreeStyleBuild b2=(FreeStyleBuild)b2f.waitForStart();
    assertEquals(2,b2.getNumber());
    assertEquals(p,b2.getParent());
    b2.getExecutor().interrupt();
    r.assertBuildStatus(Result.ABORTED,r.waitForCompletion(b2));
    FreeStyleBuild b3=p.scheduleBuild2(0).waitForStart();
    assertEquals(3,b3.getNumber());
    assertEquals(p,b3.getParent());
    b3.getExecutor().interrupt();
    r.assertBuildStatus(Result.ABORTED,r.waitForCompletion(b3));
  }
  /** 
 * Testing if the lazy loading can gracefully tolerate a RuntimeException during unmarshalling.
 */
  @Issue("JENKINS-15533") @Test public void runtimeExceptionInUnmarshalling() throws Exception {
    FreeStyleProject p=r.createFreeStyleProject();
    FreeStyleBuild b=r.assertBuildStatusSuccess(p.scheduleBuild2(0));
    b.addAction(new BombAction());
    b.save();
    p._getRuns().purgeCache();
    b=p.getBuildByNumber(b.number);
    assertNotNull(b);
    assertNull(b.getAction(BombAction.class));
    assertTrue(bombed);
  }
public static class BombAction extends InvisibleAction {
    private Object readResolve(){
      bombed=true;
      throw new NullPointerException();
    }
  }
  private static boolean bombed;
  @Issue("JENKINS-25788") @Test public void remove() throws Exception {
    FreeStyleProject p=r.createFreeStyleProject();
    FreeStyleBuild b1=r.buildAndAssertSuccess(p);
    FreeStyleBuild b2=r.buildAndAssertSuccess(p);
    RunMap<FreeStyleBuild> runs=p._getRuns();
    assertEquals(2,runs.size());
    assertTrue(runs.remove(b1));
    assertEquals(1,runs.size());
    assertFalse(runs.remove(b1));
    assertEquals(1,runs.size());
    assertTrue(runs.remove(b2));
    assertEquals(0,runs.size());
    assertFalse(runs.remove(b2));
    assertEquals(0,runs.size());
  }
}
