/** 
 * Due to the fact we are using a @ClassRule for the other tests to improve performance,  we cannot use @LocalData to test the loading of the whitelist as that annotation seem to not work with @ClassRule.
 */
@Issue("SECURITY-400") @For(StaticRoutingDecisionProvider.class) public class StaticRoutingDecisionProvider2Test {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test @LocalData("whitelist_empty") public void userControlledWhitelist_empty_Loading() throws Exception {
    StaticRoutingDecisionProvider wl=new StaticRoutingDecisionProvider();
    assertThat(wl.decide("public java.lang.Object jenkins.security.stapler.StaticRoutingDecisionProviderTest$ContentProvider.getObjectCustom()"),is(RoutingDecisionProvider.Decision.UNKNOWN));
    assertThat(wl.decide("blabla"),is(RoutingDecisionProvider.Decision.UNKNOWN));
  }
  @Test @LocalData("whitelist_monoline") public void userControlledWhitelist_monoline_Loading() throws Exception {
    StaticRoutingDecisionProvider wl=new StaticRoutingDecisionProvider();
    assertThat(wl.decide("method jenkins.security.stapler.StaticRoutingDecisionProviderTest$ContentProvider getObjectCustom"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide("blabla"),is(RoutingDecisionProvider.Decision.UNKNOWN));
  }
  @Test @LocalData("whitelist_multiline") public void userControlledWhitelist_multiline_Loading() throws Exception {
    StaticRoutingDecisionProvider wl=new StaticRoutingDecisionProvider();
    assertThat(wl.decide("method jenkins.security.stapler.StaticRoutingDecisionProviderTest$ContentProvider getObjectCustom"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide("method jenkins.security.stapler.StaticRoutingDecisionProviderTest$ContentProvider getObjectCustom2"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide("blabla"),is(RoutingDecisionProvider.Decision.UNKNOWN));
  }
  @Test @LocalData("comment_ignored") public void userControlledWhitelist_commentsAreIgnored() throws Exception {
    StaticRoutingDecisionProvider wl=new StaticRoutingDecisionProvider();
    assertThat(wl.decide("this line is not read"),is(RoutingDecisionProvider.Decision.UNKNOWN));
    assertThat(wl.decide("not-this-one"),is(RoutingDecisionProvider.Decision.UNKNOWN));
    assertThat(wl.decide("neither"),is(RoutingDecisionProvider.Decision.UNKNOWN));
    assertThat(wl.decide("finally-not"),is(RoutingDecisionProvider.Decision.UNKNOWN));
    assertThat(wl.decide("this-one-is"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide("this-one-also"),is(RoutingDecisionProvider.Decision.ACCEPTED));
  }
  @Test @LocalData("whitelist_emptyline") public void userControlledWhitelist_emptyLinesAreIgnored() throws Exception {
    StaticRoutingDecisionProvider wl=new StaticRoutingDecisionProvider();
    assertThat(wl.decide("signature-1"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide("signature-2"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide("signature-3"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide(""),is(RoutingDecisionProvider.Decision.UNKNOWN));
  }
  @Test @LocalData("greylist_multiline") public void userControlledWhitelist_whiteAndBlack() throws Exception {
    StaticRoutingDecisionProvider wl=new StaticRoutingDecisionProvider();
    assertThat(wl.decide("signature-1-ok"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide("signature-3-ok"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide("signature-2-not-ok"),is(RoutingDecisionProvider.Decision.REJECTED));
    assertThat(wl.decide("signature-4-not-ok"),is(RoutingDecisionProvider.Decision.REJECTED));
    assertThat(wl.decide("!signature-2-not-ok"),is(RoutingDecisionProvider.Decision.UNKNOWN));
  }
  @Test public void defaultList() throws Exception {
    StaticRoutingDecisionProvider wl=new StaticRoutingDecisionProvider();
    assertThat(wl.decide("method io.jenkins.blueocean.service.embedded.rest.AbstractRunImpl getLog"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide("method io.jenkins.blueocean.rest.impl.pipeline.PipelineNodeImpl getLog"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide("method io.jenkins.blueocean.rest.impl.pipeline.PipelineStepImpl getLog"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide("method jenkins.security.stapler.StaticRoutingDecisionProviderTest$ContentProvider getObjectCustom"),is(RoutingDecisionProvider.Decision.UNKNOWN));
    assertThat(wl.decide("blabla"),is(RoutingDecisionProvider.Decision.UNKNOWN));
  }
  @Test public void userControlledWhitelist_savedCorrectly() throws Exception {
    File whitelistUserControlledList=new File(j.jenkins.getRootDir(),"stapler-whitelist.txt");
    assertFalse(whitelistUserControlledList.exists());
    StaticRoutingDecisionProvider wl=new StaticRoutingDecisionProvider();
    assertFalse(whitelistUserControlledList.exists());
    assertThat(wl.decide("nothing"),is(RoutingDecisionProvider.Decision.UNKNOWN));
    wl.save();
    assertTrue(whitelistUserControlledList.exists());
    assertThat(FileUtils.readFileToString(whitelistUserControlledList),is(""));
    wl.add("white-1");
    assertThat(wl.decide("white-1"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertTrue(whitelistUserControlledList.exists());
    assertThat(FileUtils.readFileToString(whitelistUserControlledList),containsString("white-1"));
{
      StaticRoutingDecisionProvider temp=new StaticRoutingDecisionProvider();
      assertThat(temp.decide("white-1"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    }
    wl.addBlacklistSignature("black-2");
    assertThat(wl.decide("white-1"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide("black-2"),is(RoutingDecisionProvider.Decision.REJECTED));
    assertThat(FileUtils.readFileToString(whitelistUserControlledList),allOf(containsString("white-1"),containsString("!black-2")));
{
      StaticRoutingDecisionProvider temp=new StaticRoutingDecisionProvider();
      assertThat(temp.decide("white-1"),is(RoutingDecisionProvider.Decision.ACCEPTED));
      assertThat(temp.decide("black-2"),is(RoutingDecisionProvider.Decision.REJECTED));
    }
    wl.removeBlacklistSignature("black-2");
    assertThat(wl.decide("white-1"),is(RoutingDecisionProvider.Decision.ACCEPTED));
    assertThat(wl.decide("black-2"),is(RoutingDecisionProvider.Decision.UNKNOWN));
    assertThat(FileUtils.readFileToString(whitelistUserControlledList),allOf(containsString("white-1"),not(containsString("black-2"))));
{
      StaticRoutingDecisionProvider temp=new StaticRoutingDecisionProvider();
      assertThat(temp.decide("white-1"),is(RoutingDecisionProvider.Decision.ACCEPTED));
      assertThat(temp.decide("black-2"),is(RoutingDecisionProvider.Decision.UNKNOWN));
    }
    wl.remove("white-1");
    assertThat(wl.decide("white-1"),is(RoutingDecisionProvider.Decision.UNKNOWN));
    assertThat(wl.decide("black-2"),is(RoutingDecisionProvider.Decision.UNKNOWN));
    assertThat(FileUtils.readFileToString(whitelistUserControlledList),allOf(not(containsString("white-1")),not(containsString("black-2"))));
{
      StaticRoutingDecisionProvider temp=new StaticRoutingDecisionProvider();
      assertThat(temp.decide("white-1"),is(RoutingDecisionProvider.Decision.UNKNOWN));
      assertThat(temp.decide("black-2"),is(RoutingDecisionProvider.Decision.UNKNOWN));
    }
  }
}
