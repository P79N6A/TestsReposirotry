/** 
 * To check the previous behavior you can use: <pre> {@link org.kohsuke.stapler.MetaClass#LEGACY_GETTER_MODE} = true;</pre> It will disable the usage of  {@link TypedFilter}
 */
@Issue("SECURITY-400") @For(TypedFilter.class) public class GetterMethodFilterTest extends StaplerAbstractTest {
@TestExtension public static class TestWithReturnJavaPlatformObject extends AbstractUnprotectedRootAction {
    public static boolean called=false;
    public String getString(){
      return "a";
    }
    public Object getObjectString(){
      return "a";
    }
    public Object getObjectCustom(){
      return new Object(){
        public void doIndex(){
          replyOk();
        }
      }
;
    }
    public Point getPoint(){
      return new Point(1,2);
    }
    public Point getPointCustomChild(){
      return new Point(){
        public void doIndex(){
          replyOk();
        }
      }
;
    }
    public Point getPointWithListener(){
      return new Point(){
        @Override public double getX(){
          called=true;
          return super.getX();
        }
      }
;
    }
  }
  @Test public void testWithReturnJavaPlatformObject_string() throws Exception {
    assertNotReachable("testWithReturnJavaPlatformObject/string/");
  }
  @Test public void testWithReturnJavaPlatformObject_objectString() throws Exception {
    assertNotReachable("testWithReturnJavaPlatformObject/objectString/");
  }
  @Test public void testWithReturnJavaPlatformObject_objectCustom() throws Exception {
    assertNotReachable("testWithReturnJavaPlatformObject/objectCustom/");
  }
  @Test public void testWithReturnJavaPlatformObject_point() throws Exception {
    assertNotReachable("testWithReturnJavaPlatformObject/point/");
  }
  @Test public void testWithReturnJavaPlatformObject_pointCustomChild() throws Exception {
    assertNotReachable("testWithReturnJavaPlatformObject/pointCustomChild/");
  }
  @Test public void testWithReturnJavaPlatformObject_pointWithListener() throws Exception {
    TestWithReturnJavaPlatformObject.called=false;
    assertFalse(TestWithReturnJavaPlatformObject.called);
    assertNotReachable("testWithReturnJavaPlatformObject/pointWithListener/x/");
    assertFalse(TestWithReturnJavaPlatformObject.called);
  }
@TestExtension public static class TestWithReturnMultiple extends AbstractUnprotectedRootAction {
    public List<Renderable> getList(){
      return Arrays.asList(new Renderable(),new Renderable());
    }
    public List<? extends Point> getListOfPoint(){
      return Collections.singletonList(new RenderablePoint());
    }
    public List<List<Renderable>> getListOfList(){
      return Collections.singletonList(Arrays.asList(new Renderable(),new Renderable()));
    }
    public Renderable[] getArray(){
      return new Renderable[]{new Renderable(),new Renderable()};
    }
    public Point[] getArrayOfPoint(){
      return new Point[]{new Point(){
        public void doIndex(){
          replyOk();
        }
      }
};
    }
    public Renderable[][] getArrayOfArray(){
      return new Renderable[][]{new Renderable[]{new Renderable(),new Renderable()}};
    }
    @SuppressWarnings("unchecked") public List<Renderable>[] getArrayOfList(){
      List<Renderable> list=Arrays.asList(new Renderable(),new Renderable());
      return (List<Renderable>[])Collections.singletonList(list).toArray(new List[0]);
    }
    public List<Renderable[]> getListOfArray(){
      return Collections.singletonList(new Renderable[]{new Renderable(),new Renderable()});
    }
    public Map<String,Renderable> getMap(){
      return new HashMap<String,Renderable>(){
{
          put("a",new Renderable());
        }
      }
;
    }
  }
  @Test public void testWithReturnMultiple_list() throws Exception {
    assertNotReachable("testWithReturnMultiple/list/");
    assertNotReachable("testWithReturnMultiple/list/0/");
    assertNotReachable("testWithReturnMultiple/list/1/");
    assertNotReachable("testWithReturnMultiple/list/2/");
  }
  @Test public void testWithReturnMultiple_listOfPoint() throws Exception {
    assertNotReachable("testWithReturnMultiple/listOfPoint/");
    assertNotReachable("testWithReturnMultiple/listOfPoint/0/");
    assertNotReachable("testWithReturnMultiple/listOfPoint/1/");
  }
  @Test public void testWithReturnMultiple_listOfList() throws Exception {
    assertNotReachable("testWithReturnMultiple/listOfList/");
    assertNotReachable("testWithReturnMultiple/listOfList/0/");
    assertNotReachable("testWithReturnMultiple/listOfList/1/");
    assertNotReachable("testWithReturnMultiple/listOfList/0/0/");
    assertNotReachable("testWithReturnMultiple/listOfList/0/1/");
    assertNotReachable("testWithReturnMultiple/listOfList/0/2/");
  }
  @Test public void testWithReturnMultiple_array() throws Exception {
    assertNotReachable("testWithReturnMultiple/array/");
    assertReachable("testWithReturnMultiple/array/0/");
    assertReachable("testWithReturnMultiple/array/1/");
    assertNotReachable("testWithReturnMultiple/array/2/");
  }
  @Test public void testWithReturnMultiple_arrayOfPoint() throws Exception {
    assertNotReachable("testWithReturnMultiple/arrayOfPoint/");
    assertNotReachable("testWithReturnMultiple/arrayOfPoint/0/");
    assertNotReachable("testWithReturnMultiple/arrayOfPoint/1/");
  }
  @Test public void testWithReturnMultiple_arrayOfArray() throws Exception {
    assertNotReachable("testWithReturnMultiple/arrayOfArray/");
    assertNotReachable("testWithReturnMultiple/arrayOfArray/0/");
    assertNotReachable("testWithReturnMultiple/arrayOfArray/1/");
    assertReachable("testWithReturnMultiple/arrayOfArray/0/0/");
    assertReachable("testWithReturnMultiple/arrayOfArray/0/1/");
    assertNotReachable("testWithReturnMultiple/arrayOfArray/0/2/");
  }
  @Test public void testWithReturnMultiple_arrayOfList() throws Exception {
    assertNotReachable("testWithReturnMultiple/arrayOfList/");
    assertNotReachable("testWithReturnMultiple/arrayOfList/0/");
    assertNotReachable("testWithReturnMultiple/arrayOfList/1/");
    assertNotReachable("testWithReturnMultiple/arrayOfList/0/0/");
    assertNotReachable("testWithReturnMultiple/arrayOfList/0/1/");
    assertNotReachable("testWithReturnMultiple/arrayOfList/0/2/");
  }
  @Test public void testWithReturnMultiple_listOfArray() throws Exception {
    assertNotReachable("testWithReturnMultiple/listOfArray/");
    assertNotReachable("testWithReturnMultiple/listOfArray/0/");
    assertNotReachable("testWithReturnMultiple/listOfArray/1/");
    assertNotReachable("testWithReturnMultiple/listOfArray/0/0/");
    assertNotReachable("testWithReturnMultiple/listOfArray/0/1/");
    assertNotReachable("testWithReturnMultiple/listOfArray/0/2/");
  }
  @Test public void testWithReturnMultiple_map() throws Exception {
    assertNotReachable("testWithReturnMultiple/map/");
    assertNotReachable("testWithReturnMultiple/map/a/");
    assertNotReachable("testWithReturnMultiple/map/b/");
  }
@TestExtension public static class TestWithReturnCoreObject extends AbstractUnprotectedRootAction {
    public View.People getPeople(){
      return new View.People(Jenkins.getInstance());
    }
  }
  @Test public void testWithReturnCoreObject_people() throws Exception {
    assertReachableWithoutOk("testWithReturnCoreObject/people/");
  }
  @Test public void testTopLevelItemIsLegal() throws Exception {
    TopLevelItem item=j.createFreeStyleProject();
    assertReachableWithoutOk("job/" + item.getName());
  }
@TestExtension public static class TestWithReturnPluginObject extends AbstractUnprotectedRootAction {
    public Folder getFolder(){
      return new Folder(Jenkins.getInstance(),"testFolder");
    }
  }
  @Test public void testWithReturnPluginObject_folder() throws Exception {
    assertReachableWithoutOk("testWithReturnPluginObject/folder/search/suggest/?query=xxx");
  }
@TestExtension public static class TestWithReturnThirdPartyObject extends AbstractUnprotectedRootAction {
    public org.apache.commons.codec.binary.Base64 getBase64(){
      return new org.apache.commons.codec.binary.Base64();
    }
    public org.apache.commons.codec.Encoder getEncoder(){
      return new org.apache.commons.codec.binary.Base64();
    }
    public org.apache.commons.codec.Encoder getEncoderCustomChild(){
      return new org.apache.commons.codec.Encoder(){
        @Override public Object encode(        Object source) throws org.apache.commons.codec.EncoderException {
          return null;
        }
        public void doIndex(){
          replyOk();
        }
      }
;
    }
  }
  @Test public void testWithReturnThirdPartyObject_base32() throws Exception {
    assertNotReachable("testWithReturnThirdPartyObject/base32/");
  }
  @Test public void testWithReturnThirdPartyObject_encoder() throws Exception {
    assertNotReachable("testWithReturnThirdPartyObject/encoder/");
  }
  @Test public void testWithReturnThirdPartyObject_encoderCustomChild() throws Exception {
    assertNotReachable("testWithReturnThirdPartyObject/encoderCustomChild/");
  }
@TestExtension public static class TestWithReturnPrimitives extends AbstractUnprotectedRootAction {
    public int getInteger(){
      return 1;
    }
    public Integer getIntegerObject(){
      return 1;
    }
    public long getLong(){
      return 1L;
    }
    public Long getLongObject(){
      return 1L;
    }
    public short getShort(){
      return (short)1;
    }
    public Short getShortObject(){
      return 1;
    }
    public byte getByte(){
      return (byte)1;
    }
    public Byte getByteObject(){
      return (byte)1;
    }
    public boolean getBoolean(){
      return true;
    }
    public Boolean getBooleanObject(){
      return Boolean.TRUE;
    }
    public char getChar(){
      return 'a';
    }
    public Character getCharObject(){
      return 'a';
    }
    public float getFloat(){
      return 1.0f;
    }
    public Float getFloatObject(){
      return 1.0f;
    }
    public double getDouble(){
      return 1.0;
    }
    public Double getDoubleObject(){
      return 1.0;
    }
    public void getVoid(){
    }
    public Void getVoidObject(){
      return null;
    }
  }
  @Test public void testTestWithReturnPrimitives_integer() throws Exception {
    assertNotReachable("testWithReturnPrimitives/integer/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_integerObject() throws Exception {
    assertNotReachable("testWithReturnPrimitives/integerObject/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_long() throws Exception {
    assertNotReachable("testWithReturnPrimitives/long/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_longObject() throws Exception {
    assertNotReachable("testWithReturnPrimitives/longObject/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_short() throws Exception {
    assertNotReachable("testWithReturnPrimitives/short/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_shortObject() throws Exception {
    assertNotReachable("testWithReturnPrimitives/shortObject/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_byte() throws Exception {
    assertNotReachable("testWithReturnPrimitives/byte/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_byteObject() throws Exception {
    assertNotReachable("testWithReturnPrimitives/byteObject/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_boolean() throws Exception {
    assertNotReachable("testWithReturnPrimitives/boolean/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_booleanObject() throws Exception {
    assertNotReachable("testWithReturnPrimitives/booleanObject/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_char() throws Exception {
    assertNotReachable("testWithReturnPrimitives/char/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_charObject() throws Exception {
    assertNotReachable("testWithReturnPrimitives/charObject/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_float() throws Exception {
    assertNotReachable("testWithReturnPrimitives/float/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_floatObject() throws Exception {
    assertNotReachable("testWithReturnPrimitives/floatObject/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_double() throws Exception {
    assertNotReachable("testWithReturnPrimitives/double/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_doubleObject() throws Exception {
    assertNotReachable("testWithReturnPrimitives/doubleObject/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_void() throws Exception {
    assertNotReachable("testWithReturnPrimitives/void/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
  @Test public void testTestWithReturnPrimitives_voidObject() throws Exception {
    assertNotReachable("testWithReturnPrimitives/voidObject/");
    assertGetMethodRequestWasBlockedAndResetFlag();
  }
@TestExtension public static class TestWithReturnWithinStaplerScope extends DoActionFilterTest.AbstractUnprotectedRootAction {
    public Renderable getRenderable(){
      return new Renderable();
    }
  }
  @Test public void testWithReturnWithinStaplerScope_renderable() throws Exception {
    assertReachable("testWithReturnWithinStaplerScope/renderable/");
    assertReachable("testWithReturnWithinStaplerScope/renderable/valid/");
  }
}
