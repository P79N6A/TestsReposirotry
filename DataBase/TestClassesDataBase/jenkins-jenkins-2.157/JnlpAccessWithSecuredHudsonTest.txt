/** 
 * Makes sure that the jars that web start needs are readable, even when the anonymous user doesn't have any read access. 
 * @author Kohsuke Kawaguchi
 */
public class JnlpAccessWithSecuredHudsonTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @Rule public TemporaryFolder tmp=new TemporaryFolder();
  /** 
 * Creates a new slave that needs to be launched via JNLP.
 */
  protected Slave createNewJnlpSlave(  String name) throws Exception {
    return new DumbSlave(name,"",System.getProperty("java.io.tmpdir") + '/' + name,"2",Mode.NORMAL,"",new JNLPLauncher(true),RetentionStrategy.INSTANCE,Collections.EMPTY_LIST);
  }
  @PresetData(DataSet.NO_ANONYMOUS_READACCESS) @Email("http://markmail.org/message/on4wkjdaldwi2atx") @Test public void anonymousCanAlwaysLoadJARs() throws Exception {
    ApiTokenTestHelper.enableLegacyBehavior();
    r.jenkins.setNodes(Collections.singletonList(createNewJnlpSlave("test")));
    JenkinsRule.WebClient wc=r.createWebClient();
    HtmlPage p=wc.withBasicApiToken(User.getById("alice",true)).goTo("computer/test/");
    JenkinsRule.WebClient jnlpAgent=r.createWebClient();
    XmlPage jnlp=(XmlPage)wc.goTo("computer/test/slave-agent.jnlp","application/x-java-jnlp-file");
    URL baseUrl=jnlp.getUrl();
    Document dom=new DOMReader().read(jnlp.getXmlDocument());
    for (    Element jar : (List<Element>)dom.selectNodes("//jar")) {
      URL url=new URL(baseUrl,jar.attributeValue("href"));
      System.out.println(url);
      Page jarResource=jnlpAgent.getPage(url);
      assertTrue(jarResource.getWebResponse().getContentType().toLowerCase(Locale.ENGLISH).startsWith("application/"));
    }
  }
  @PresetData(DataSet.ANONYMOUS_READONLY) @Test public void anonymousCannotGetSecrets() throws Exception {
    r.jenkins.setNodes(Collections.singletonList(createNewJnlpSlave("test")));
    r.createWebClient().assertFails("computer/test/slave-agent.jnlp",HttpURLConnection.HTTP_FORBIDDEN);
  }
  @PresetData(DataSet.NO_ANONYMOUS_READACCESS) @SuppressWarnings("SleepWhileInLoop") @Test public void serviceUsingDirectSecret() throws Exception {
    Slave slave=createNewJnlpSlave("test");
    r.jenkins.setNodes(Collections.singletonList(slave));
    r.createWebClient().goTo("computer/test/slave-agent.jnlp?encrypt=true","application/octet-stream");
    String secret=slave.getComputer().getJnlpMac();
    File slaveJar=tmp.newFile();
    FileUtils.copyURLToFile(new Slave.JnlpJar("slave.jar").getURL(),slaveJar);
    Proc p=new hudson.Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().stdout(System.out).stderr(System.err).cmds(JavaEnvUtils.getJreExecutable("java"),"-jar",slaveJar.getAbsolutePath(),"-jnlpUrl",r.getURL() + "computer/test/slave-agent.jnlp","-secret",secret).start();
    try {
      while (!slave.toComputer().isOnline()) {
        Thread.sleep(100);
      }
      Channel channel=slave.getComputer().getChannel();
      assertFalse("SECURITY-206",channel.isRemoteClassLoadingAllowed());
      r.jenkins.getExtensionList(AdminWhitelistRule.class).get(AdminWhitelistRule.class).setMasterKillSwitch(false);
      final File f=new File(r.jenkins.getRootDir(),"config.xml");
      assertTrue(f.exists());
      try {
        fail("SECURITY-206: " + channel.call(new Attack(f.getAbsolutePath())));
      }
 catch (      Exception x) {
        assertThat(Functions.printThrowable(x),containsString("https://jenkins.io/redirect/security-144"));
      }
    }
  finally {
      p.kill();
    }
  }
private static class Attack extends MasterToSlaveCallable<String,Exception> {
    private final String path;
    Attack(    String path){
      this.path=path;
    }
    @Override public String call() throws Exception {
      return getChannelOrFail().call(new ScriptLoader(path));
    }
  }
}
