public class HyperlinkNoteTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @Issue("JENKINS-53016") @Test public void textWithNewlines() throws Exception {
    String url=r.getURL().toString() + "test";
    String noteText="\nthis string\nhas newline\r\ncharacters\n\r";
    String input=HyperlinkNote.encodeTo(url,noteText);
    String noteTextSanitized=input.substring(input.length() - noteText.length());
    String output=annotate(input);
    assertThat(output,allOf(containsString("href='" + url + "'"),containsString(">" + noteTextSanitized + "</a>")));
  }
  @Issue("JENKINS-53016") @Test public void textWithNewlinesModelHyperlinkNote() throws Exception {
    FreeStyleProject p=r.createFreeStyleProject();
    String noteText="\nthis string\nhas newline\r\ncharacters\n\r";
    String input=ModelHyperlinkNote.encodeTo(p,noteText);
    String noteTextSanitized=input.substring(input.length() - noteText.length());
    String output=annotate(input);
    assertThat(output,allOf(containsString("href='" + r.getURL().toString() + p.getUrl()+ "'"),containsString(new ModelHyperlinkNote("",0).extraAttributes()),containsString(">" + noteTextSanitized + "</a>")));
  }
  private static String annotate(  String text) throws IOException {
    StringWriter writer=new StringWriter();
    try (ConsoleAnnotationOutputStream out=new ConsoleAnnotationOutputStream(writer,null,null,StandardCharsets.UTF_8)){
      IOUtils.copy(new StringReader(text),out);
    }
     return writer.toString();
  }
}
