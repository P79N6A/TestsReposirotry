public class CopyJobCommandTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  private CLICommand copyJobCommand;
  private CLICommandInvoker command;
  @Before public void setUp(){
    copyJobCommand=new CopyJobCommand();
    command=new CLICommandInvoker(j,copyJobCommand);
  }
  @Test public void copyBetweenFolders() throws Exception {
    MockFolder dir1=j.createFolder("dir1");
    MockFolder dir2=j.createFolder("dir2");
    FreeStyleProject p=dir1.createProject(FreeStyleProject.class,"p1");
    CLICommandInvoker.Result result=command.invokeWithArgs("dir1/p1","dir2/p2");
    assertThat(result,succeededSilently());
    assertNotNull(j.jenkins.getItemByFullName("dir2/p2"));
  }
  @Issue("JENKINS-22262") @Test public void folderPermissions() throws Exception {
    final MockFolder d1=j.createFolder("d1");
    final FreeStyleProject p=d1.createProject(FreeStyleProject.class,"p");
    final MockFolder d2=j.createFolder("d2");
    j.jenkins.setSecurityRealm(j.createDummySecurityRealm());
    j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().toAuthenticated().grant(Item.READ).onItems(d1,p,d2).to("bob","charlie","debbie").grant(Item.CREATE).onItems(d2).to("charlie","debbie").grant(Item.EXTENDED_READ).onItems(p).to("debbie"));
    copyJobCommand.setTransportAuth(User.get("alice").impersonate());
    assertThat(command.invokeWithArgs("d1/p","d2/p"),failedWith(3));
    copyJobCommand.setTransportAuth(User.get("bob").impersonate());
    assertThat(command.invokeWithArgs("d1/p","d2/p"),failedWith(6));
    copyJobCommand.setTransportAuth(User.get("charlie").impersonate());
    assertThat(command.invokeWithArgs("d1/p","d2/p"),failedWith(6));
    copyJobCommand.setTransportAuth(User.get("debbie").impersonate());
    assertThat(command.invokeWithArgs("d1/p","d2/p"),succeededSilently());
    assertNotNull(d2.getItem("p"));
  }
  @Test public void copiedJobIsBuildable() throws Exception {
    FreeStyleProject p1=j.createFreeStyleProject();
    String copiedProjectName="p2";
    CLICommandInvoker.Result result=command.invokeWithArgs(p1.getName(),copiedProjectName);
    assertThat(result,succeededSilently());
    FreeStyleProject p2=(FreeStyleProject)j.jenkins.getItem(copiedProjectName);
    assertNotNull(p2);
    assertTrue(p2.isBuildable());
  }
}
