/** 
 * Tests of  {@link InstallState}. Effectively the most of the tests do not need the Jenkins instance, but we want to honor Jenkins extension points and hooks, which may influence the behavior.
 * @author Oleg Nenashev
 */
public class InstallStateTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test public void shouldPefromCorrectConversionForAllNames(){
    ExtensionList<InstallState> states=InstallState.all();
    for (    InstallState state : states) {
      InstallState afterRoundtrip=forName(state.name());
      assertThat("State after the roundtrip must be equal to the original state",afterRoundtrip,equalTo(state));
      assertTrue("State " + state + " should return the extension point instance after deserialization",afterRoundtrip == state);
    }
  }
  @Test @Issue("JENKINS-35206") public void shouldNotFailOnNullXMLField(){
    String xml="<jenkins.install.InstallState>\n" + "  <isSetupComplete>true</isSetupComplete>\n" + "</jenkins.install.InstallState>";
    final InstallState state=forXml(xml);
    assertThat(state,equalTo(InstallState.UNKNOWN));
  }
  @Test @Issue("JENKINS-35206") public void shouldNotFailOnEmptyName(){
    final InstallState state=forName("");
    assertThat(state,equalTo(InstallState.UNKNOWN));
  }
  @Test @Issue("JENKINS-35206") public void shouldReturnUnknownStateForUnknownName(){
    final InstallState state=forName("NonExistentStateName");
    assertThat(state,equalTo(InstallState.UNKNOWN));
  }
  private static InstallState forName(  String name) throws AssertionError {
    String xml="<jenkins.install.InstallState>\n" + "  <isSetupComplete>true</isSetupComplete>\n" + "  <name>" + name + "</name>\n"+ "</jenkins.install.InstallState>";
    return forXml(xml);
  }
  private static InstallState forXml(  String xml) throws AssertionError {
    Object read=Jenkins.XSTREAM2.fromXML(xml);
    assertThat(read,instanceOf(InstallState.class));
    InstallState state=(InstallState)read;
    return state;
  }
}
