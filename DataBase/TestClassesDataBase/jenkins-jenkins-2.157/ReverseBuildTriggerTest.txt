public class ReverseBuildTriggerTest {
  @ClassRule public static BuildWatcher buildWatcher=new BuildWatcher();
  @Rule public JenkinsRule r=new JenkinsRule();
  @Before public void runMoreQuickly() throws Exception {
    r.jenkins.setQuietPeriod(0);
  }
  @Test public void configRoundtrip() throws Exception {
    r.createFreeStyleProject("upstream");
    FreeStyleProject downstream=r.createFreeStyleProject("downstream");
    FreeStyleProject wayDownstream=r.createFreeStyleProject("wayDownstream");
    downstream.addTrigger(new ReverseBuildTrigger("upstream",Result.SUCCESS));
    downstream.getPublishersList().add(new BuildTrigger(Collections.singleton(wayDownstream),Result.SUCCESS));
    downstream.save();
    r.configRoundtrip(downstream);
    ReverseBuildTrigger rbt=downstream.getTrigger(ReverseBuildTrigger.class);
    assertNotNull(rbt);
    assertEquals("upstream",rbt.getUpstreamProjects());
    assertEquals(Result.SUCCESS,rbt.getThreshold());
    BuildTrigger bt=downstream.getPublishersList().get(BuildTrigger.class);
    assertNotNull(bt);
    assertEquals(Collections.singletonList(wayDownstream),bt.getChildProjects(downstream));
    assertEquals(Result.SUCCESS,bt.getThreshold());
  }
  /** 
 * @see BuildTriggerTest#testDownstreamProjectSecurity 
 */
  @Test public void upstreamProjectSecurity() throws Exception {
    r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
    MockAuthorizationStrategy auth=new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().to("alice","bob").grant(Computer.BUILD).everywhere().to("alice","bob").grant(Jenkins.ADMINISTER).everywhere().to("admin");
    r.jenkins.setAuthorizationStrategy(auth);
    String upstreamName="upstr3@m";
    final FreeStyleProject upstream=r.createFreeStyleProject(upstreamName);
    String downstreamName="d0wnstr3am";
    FreeStyleProject downstream=r.createFreeStyleProject(downstreamName);
    auth.grant(Item.READ).onItems(downstream).to("alice").grant(Item.READ).onItems(upstream).to("bob");
    @SuppressWarnings("rawtypes") Trigger<Job> t=new ReverseBuildTrigger(upstreamName,Result.SUCCESS);
    downstream.addTrigger(t);
    t.start(downstream,true);
    r.jenkins.rebuildDependencyGraph();
    assertEquals(Collections.singletonList(downstream),upstream.getDownstreamProjects());
    FreeStyleBuild b=r.buildAndAssertSuccess(upstream);
    r.assertLogContains(downstreamName,b);
    r.waitUntilNoActivity();
    assertNotNull(JenkinsRule.getLog(b),downstream.getLastBuild());
    assertEquals(1,downstream.getLastBuild().number);
    QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator(ImmutableMap.of(upstreamName,User.get("admin").impersonate(),downstreamName,Jenkins.ANONYMOUS)));
    b=r.buildAndAssertSuccess(upstream);
    r.assertLogContains(downstreamName,b);
    r.assertLogContains(Messages.ReverseBuildTrigger_running_as_cannot_even_see_for_trigger_f("anonymous",upstreamName,downstreamName),b);
    r.waitUntilNoActivity();
    assertEquals(1,downstream.getLastBuild().number);
    QueueItemAuthenticatorConfiguration.get().getAuthenticators().replace(new MockQueueItemAuthenticator(ImmutableMap.of(upstreamName,User.get("bob").impersonate(),downstreamName,Jenkins.ANONYMOUS)));
    b=r.buildAndAssertSuccess(upstream);
    r.assertLogNotContains(downstreamName,b);
    r.waitUntilNoActivity();
    assertEquals(1,downstream.getLastBuild().number);
    auth.grant(Item.READ).onItems(upstream).to("alice","bob");
    Map<String,Authentication> qiaConfig=new HashMap<String,Authentication>();
    qiaConfig.put(upstreamName,User.get("bob").impersonate());
    qiaConfig.put(downstreamName,User.get("alice").impersonate());
    QueueItemAuthenticatorConfiguration.get().getAuthenticators().replace(new MockQueueItemAuthenticator(qiaConfig));
    b=r.buildAndAssertSuccess(upstream);
    r.assertLogNotContains(downstreamName,b);
    r.waitUntilNoActivity();
    assertEquals(2,downstream.getLastBuild().number);
    assertEquals(new Cause.UpstreamCause((Run)b),downstream.getLastBuild().getCause(Cause.UpstreamCause.class));
    qiaConfig=new HashMap<String,Authentication>();
    qiaConfig.put(upstreamName,User.get("admin").impersonate());
    qiaConfig.put(downstreamName,User.get("alice").impersonate());
    QueueItemAuthenticatorConfiguration.get().getAuthenticators().replace(new MockQueueItemAuthenticator(qiaConfig));
    b=r.buildAndAssertSuccess(upstream);
    r.assertLogContains(downstreamName,b);
    r.waitUntilNoActivity();
    assertEquals(3,downstream.getLastBuild().number);
    assertEquals(new Cause.UpstreamCause((Run)b),downstream.getLastBuild().getCause(Cause.UpstreamCause.class));
    auth=new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().to("alice","bob").grant(Computer.BUILD).everywhere().to("alice","bob").grant(Jenkins.ADMINISTER).everywhere().to("admin").grant(Item.READ).onItems(upstream).to("bob").grant(Item.DISCOVER).onItems(upstream).to("alice");
    r.jenkins.setAuthorizationStrategy(auth);
    auth.grant(Item.READ).onItems(downstream).to("alice");
    qiaConfig=new HashMap<String,Authentication>();
    qiaConfig.put(upstreamName,User.get("bob").impersonate());
    qiaConfig.put(downstreamName,User.get("alice").impersonate());
    QueueItemAuthenticatorConfiguration.get().getAuthenticators().replace(new MockQueueItemAuthenticator(qiaConfig));
    b=r.buildAndAssertSuccess(upstream);
    r.assertLogNotContains(downstreamName,b);
    r.waitUntilNoActivity();
    assertEquals(3,downstream.getLastBuild().number);
    auth.grant(Item.READ).onItems(upstream).to("bob");
    auth.grant(Item.DISCOVER).onItems(upstream).to("anonymous");
    qiaConfig=new HashMap<String,Authentication>();
    qiaConfig.put(upstreamName,User.get("bob").impersonate());
    qiaConfig.put(downstreamName,Jenkins.ANONYMOUS);
    QueueItemAuthenticatorConfiguration.get().getAuthenticators().replace(new MockQueueItemAuthenticator(qiaConfig));
    b=r.buildAndAssertSuccess(upstream);
    r.assertLogNotContains(downstreamName,b);
    r.assertLogNotContains("Please login to access job " + upstreamName,b);
    r.waitUntilNoActivity();
    assertEquals(3,downstream.getLastBuild().number);
  }
  @Issue("JENKINS-29876") @Test public void nullJobInTriggerNotCausesNPE() throws Exception {
    final FreeStyleProject upstreamJob=r.createFreeStyleProject("upstream");
    final FreeStyleProject downstreamJob1=r.createFreeStyleProject("downstream1");
    final ReverseBuildTrigger reverseBuildTrigger=new ReverseBuildTrigger("upstream",Result.SUCCESS);
    downstreamJob1.addTrigger(reverseBuildTrigger);
    downstreamJob1.save();
    final FreeStyleProject downstreamJob2=r.createFreeStyleProject("downstream2");
    final ReverseBuildTrigger reverseBuildTrigger2=new ReverseBuildTrigger("upstream",Result.SUCCESS);
    downstreamJob2.addTrigger(reverseBuildTrigger2);
    downstreamJob2.save();
    r.configRoundtrip(downstreamJob2);
    r.jenkins.rebuildDependencyGraph();
    final FreeStyleBuild build=upstreamJob.scheduleBuild2(0).get();
    r.waitUntilNoActivity();
    r.assertLogNotContains("java.lang.NullPointerException",build);
    assertThat("Build should be not triggered",downstreamJob1.getBuilds(),hasSize(0));
    assertThat("Build should be triggered",downstreamJob2.getBuilds(),not(hasSize(0)));
  }
  @Issue("JENKINS-45909") @Test public void nullUpstreamProjectsNoNPE() throws Exception {
    final FreeStyleProject downstreamJob1=r.createFreeStyleProject("downstream1");
    ReverseBuildTrigger trigger=new ReverseBuildTrigger(null);
    downstreamJob1.addTrigger(trigger);
    downstreamJob1.save();
    r.configRoundtrip(downstreamJob1);
    trigger.buildDependencyGraph(downstreamJob1,Jenkins.getInstance().getDependencyGraph());
  }
  @Issue("JENKINS-46161") @Test public void testGetUpstreamProjectsShouldNullSafe() throws Exception {
    ReverseBuildTrigger trigger1=new ReverseBuildTrigger(null);
    String upstream1=trigger1.getUpstreamProjects();
    assertEquals("",upstream1);
    ReverseBuildTrigger trigger2=new ReverseBuildTrigger("upstream");
    String upstream2=trigger2.getUpstreamProjects();
    assertEquals("upstream",upstream2);
    ReverseBuildTrigger trigger3=new ReverseBuildTrigger("");
    String upstream3=trigger3.getUpstreamProjects();
    assertEquals("",upstream3);
  }
}
