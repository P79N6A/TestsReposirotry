public class GetViewCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,new GetViewCommand());
  }
  @Test public void getViewShouldFailWithoutViewReadPermission() throws IOException {
    j.jenkins.addView(new ListView("aView"));
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invokeWithArgs("aView");
    assertThat(result,failedWith(6));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: user is missing the View/Read permission"));
  }
  @Test public void getViewShouldYieldConfigXml() throws Exception {
    j.jenkins.addView(new ListView("aView"));
    final CLICommandInvoker.Result result=command.authorizedTo(View.READ,Jenkins.READ).invokeWithArgs("aView");
    assertThat(result,succeeded());
    assertThat(result,hasNoErrorOutput());
    assertThat(result.stdout(),startsWith("<?xml version=\"1.1\" encoding=\"UTF-8\"?>"));
    assertThat(result.stdout(),containsString("<name>aView</name>"));
  }
  @Test public void getViewShouldFailIfViewDoesNotExist(){
    final CLICommandInvoker.Result result=command.authorizedTo(View.READ,Jenkins.READ).invokeWithArgs("never_created");
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: No view named never_created inside view Jenkins"));
  }
}
