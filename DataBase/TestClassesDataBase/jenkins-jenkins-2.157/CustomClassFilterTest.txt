public class CustomClassFilterTest {
static {
    System.setProperty("hudson.remoting.ClassFilter","javax.script.SimpleBindings,!jenkins.util.TreeString");
  }
  @Rule public JenkinsRule r=new JenkinsRule();
  @Rule public ErrorCollector errors=new ErrorCollector();
  @Rule public LoggerRule logging=new LoggerRule().record("jenkins.security",Level.FINER);
  @Rule public TemporaryFolder tmp=new TemporaryFolder();
  @WithPlugin("custom-class-filter.jpi") @Test public void smokes() throws Exception {
    assertBlacklisted("enabled via system property",SimpleBindings.class,false);
    assertBlacklisted("enabled via plugin",ScriptException.class,false);
    assertBlacklisted("disabled by ClassFilter.STANDARD",ScriptEngineManager.class,true);
    assertBlacklisted("part of Jenkins core, so why not?",BuildListenerAdapter.class,false);
    assertBlacklisted("disabled via system property",TreeString.class,true);
    assertBlacklisted("disabled via plugin",TreeStringBuilder.class,true);
  }
  @Test public void dynamicLoad() throws Exception {
    assertBlacklisted("not yet enabled via plugin",ScriptException.class,true);
    assertBlacklisted("not yet disabled via plugin",TreeStringBuilder.class,false);
    File jpi=tmp.newFile("custom-class-filter.jpi");
    FileUtils.copyURLToFile(CustomClassFilterTest.class.getResource("/plugins/custom-class-filter.jpi"),jpi);
    r.jenkins.pluginManager.dynamicLoad(jpi);
    assertBlacklisted("enabled via plugin",ScriptException.class,false);
    assertBlacklisted("disabled via plugin",TreeStringBuilder.class,true);
  }
  private void assertBlacklisted(  String message,  Class<?> c,  boolean blacklisted){
    String name=c.getName();
    errors.checkThat(name + ": " + message,ClassFilter.DEFAULT.isBlacklisted(c) || ClassFilter.DEFAULT.isBlacklisted(name),is(blacklisted));
  }
}
