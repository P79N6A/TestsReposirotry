/** 
 * Tests of  {@link JNLPLauncher}.
 * @author Kohsuke Kawaguchi
 */
public class JNLPLauncherTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Rule public TemporaryFolder tmpDir=new TemporaryFolder();
  /** 
 * Starts a JNLP agent and makes sure it successfully connects to Jenkins. 
 */
  @Test public void testLaunch() throws Exception {
    Assume.assumeFalse("Skipping JNLPLauncherTest.testLaunch because we are running headless",GraphicsEnvironment.isHeadless());
    Computer c=addTestSlave(false);
    launchJnlpAndVerify(c,buildJnlpArgs(c));
  }
  /** 
 * Starts a JNLP agent and makes sure it successfully connects to Jenkins. 
 */
  @Test @Issue("JENKINS-39370") public void testLaunchWithWorkDir() throws Exception {
    Assume.assumeFalse("Skipping JNLPLauncherTest.testLaunch because we are running headless",GraphicsEnvironment.isHeadless());
    File workDir=tmpDir.newFolder("workDir");
    Computer c=addTestSlave(false);
    launchJnlpAndVerify(c,buildJnlpArgs(c).add("-workDir",workDir.getAbsolutePath()));
    assertTrue("Remoting work dir should have been created",new File(workDir,"remoting").exists());
  }
  /** 
 * Tests the '-headless' option. (Although this test doesn't really assert that the agent really is running in a headless mdoe.)
 */
  @Test public void testHeadlessLaunch() throws Exception {
    Computer c=addTestSlave(false);
    launchJnlpAndVerify(c,buildJnlpArgs(c).add("-arg","-headless"));
    assertEquals(1,ComputerListener.all().get(ListenerImpl.class).offlined);
  }
  @Test @Issue("JENKINS-44112") public void testHeadlessLaunchWithWorkDir() throws Exception {
    Assume.assumeFalse("Skipping JNLPLauncherTest.testLaunch because we are running headless",GraphicsEnvironment.isHeadless());
    Computer c=addTestSlave(true);
    launchJnlpAndVerify(c,buildJnlpArgs(c).add("-arg","-headless"));
    assertEquals(1,ComputerListener.all().get(ListenerImpl.class).offlined);
  }
  @Test @Issue("JENKINS-39370") public void testHeadlessLaunchWithCustomWorkDir() throws Exception {
    Assume.assumeFalse("Skipping JNLPLauncherTest.testLaunch because we are running headless",GraphicsEnvironment.isHeadless());
    File workDir=tmpDir.newFolder("workDir");
    Computer c=addTestSlave(false);
    launchJnlpAndVerify(c,buildJnlpArgs(c).add("-arg","-headless","-workDir",workDir.getAbsolutePath()));
    assertEquals(1,ComputerListener.all().get(ListenerImpl.class).offlined);
  }
  @Test @LocalData @Issue("JENKINS-44112") public void testNoWorkDirMigration() throws Exception {
    Computer computer=j.jenkins.getComputer("Foo");
    assertThat(computer,instanceOf(SlaveComputer.class));
    SlaveComputer c=(SlaveComputer)computer;
    ComputerLauncher launcher=c.getLauncher();
    assertThat(launcher,instanceOf(JNLPLauncher.class));
    JNLPLauncher jnlpLauncher=(JNLPLauncher)launcher;
    assertNotNull("Work Dir Settings should be defined",jnlpLauncher.getWorkDirSettings());
    assertTrue("Work directory should be disabled for the migrated agent",jnlpLauncher.getWorkDirSettings().isDisabled());
  }
  @Test @Issue("JENKINS-44112") @SuppressWarnings("deprecation") public void testDefaults() throws Exception {
    assertTrue("Work directory should be disabled for agents created via old API",new JNLPLauncher().getWorkDirSettings().isDisabled());
  }
  @Test @Issue("JENKINS-47056") public void testDelegatingComputerLauncher() throws Exception {
    Assume.assumeFalse("Skipping JNLPLauncherTest.testDelegatingComputerLauncher because we are running headless",GraphicsEnvironment.isHeadless());
    File workDir=tmpDir.newFolder("workDir");
    ComputerLauncher launcher=new JNLPLauncher("","",new RemotingWorkDirSettings(false,workDir.getAbsolutePath(),"internalDir",false));
    launcher=new DelegatingComputerLauncherImpl(launcher);
    Computer c=addTestSlave(launcher);
    launchJnlpAndVerify(c,buildJnlpArgs(c));
    assertTrue("Remoting work dir should have been created",new File(workDir,"internalDir").exists());
  }
  @Test @Issue("JENKINS-47056") public void testComputerLauncherFilter() throws Exception {
    Assume.assumeFalse("Skipping JNLPLauncherTest.testComputerLauncherFilter because we are running headless",GraphicsEnvironment.isHeadless());
    File workDir=tmpDir.newFolder("workDir");
    ComputerLauncher launcher=new JNLPLauncher("","",new RemotingWorkDirSettings(false,workDir.getAbsolutePath(),"internalDir",false));
    launcher=new ComputerLauncherFilterImpl(launcher);
    Computer c=addTestSlave(launcher);
    launchJnlpAndVerify(c,buildJnlpArgs(c));
    assertTrue("Remoting work dir should have been created",new File(workDir,"internalDir").exists());
  }
@TestExtension("testHeadlessLaunch") public static class ListenerImpl extends ComputerListener {
    int offlined=0;
    @Override public void onOffline(    Computer c){
      offlined++;
      assertTrue(c.isOffline());
    }
  }
private static class DelegatingComputerLauncherImpl extends DelegatingComputerLauncher {
    public DelegatingComputerLauncherImpl(    ComputerLauncher launcher){
      super(launcher);
    }
  }
private static class ComputerLauncherFilterImpl extends ComputerLauncherFilter {
    public ComputerLauncherFilterImpl(    ComputerLauncher launcher){
      super(launcher);
    }
  }
  private ArgumentListBuilder buildJnlpArgs(  Computer c) throws Exception {
    ArgumentListBuilder args=new ArgumentListBuilder();
    args.add(new File(new File(System.getProperty("java.home")),"bin/java").getPath(),"-jar");
    args.add(Which.jarFile(netx.jnlp.runtime.JNLPRuntime.class).getAbsolutePath());
    args.add("-headless","-basedir");
    args.add(j.createTmpDir());
    args.add("-nosecurity","-jnlp",j.getURL() + "computer/" + c.getName()+ "/slave-agent.jnlp");
    if (c instanceof SlaveComputer) {
      SlaveComputer sc=(SlaveComputer)c;
      ComputerLauncher launcher=sc.getLauncher();
      if (launcher instanceof JNLPLauncher) {
        args.add(((JNLPLauncher)launcher).getWorkDirSettings().toCommandLineArgs(sc));
      }
    }
    return args;
  }
  /** 
 * Launches the JNLP slave agent and asserts its basic operations.
 */
  private void launchJnlpAndVerify(  Computer c,  ArgumentListBuilder args) throws Exception {
    Proc proc=j.createLocalLauncher().launch().cmds(args).stdout(System.out).pwd(".").start();
    try {
      for (int i=0; i < 200; i++) {
        Thread.sleep(100);
        if (!c.isOffline())         break;
      }
      if (c.isOffline()) {
        System.out.println(c.getLog());
        fail("Slave failed to go online");
      }
      System.err.println("Calling task...");
      assertEquals("done",c.getChannel().callAsync(new NoopTask()).get(5 * 60,TimeUnit.SECONDS));
      System.err.println("...done.");
    }
  finally {
      proc.kill();
    }
    Thread.sleep(500);
    assertTrue(c.isOffline());
  }
  /** 
 * Adds a JNLP  {@link Slave} to the system and returns it.
 */
  private Computer addTestSlave(  boolean enableWorkDir) throws Exception {
    return addTestSlave(new JNLPLauncher(enableWorkDir));
  }
  /** 
 * Adds a JNLP  {@link Slave} to the system and returns it.
 */
  private Computer addTestSlave(  ComputerLauncher launcher) throws Exception {
    List<Node> slaves=new ArrayList<Node>(j.jenkins.getNodes());
    File dir=Util.createTempDir();
    slaves.add(new DumbSlave("test","dummy",dir.getAbsolutePath(),"1",Mode.NORMAL,"",launcher,RetentionStrategy.INSTANCE,new ArrayList<NodeProperty<?>>()));
    j.jenkins.setNodes(slaves);
    Computer c=j.jenkins.getComputer("test");
    assertNotNull(c);
    return c;
  }
private static class NoopTask extends SlaveToMasterCallable<String,RuntimeException> {
    public String call(){
      return "done";
    }
    private static final long serialVersionUID=1L;
  }
  @Test public void testConfigRoundtrip() throws Exception {
    DumbSlave s=j.createSlave();
    JNLPLauncher original=new JNLPLauncher("a","b");
    s.setLauncher(original);
    j.assertEqualDataBoundBeans(((JNLPLauncher)s.getLauncher()).getWorkDirSettings(),RemotingWorkDirSettings.getEnabledDefaults());
    RemotingWorkDirSettings custom=new RemotingWorkDirSettings(false,null,"custom",false);
    ((JNLPLauncher)s.getLauncher()).setWorkDirSettings(custom);
    HtmlPage p=j.createWebClient().getPage(s,"configure");
    j.submit(p.getFormByName("config"));
    j.assertEqualBeans(original,s.getLauncher(),"tunnel,vmargs");
    j.assertEqualDataBoundBeans(((JNLPLauncher)s.getLauncher()).getWorkDirSettings(),custom);
  }
}
