public class ClearQueueCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,"clear-queue");
  }
  @Test public void clearQueueShouldFailWithoutAdministerPermission() throws Exception {
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invoke();
    assertThat(result,failedWith(6));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("user is missing the Overall/Administer permission"));
  }
  @Test public void clearQueueShouldSucceedOnEmptyQueue() throws Exception {
    assertThat(j.jenkins.getQueue().isEmpty(),equalTo(true));
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Jenkins.ADMINISTER).invoke();
    assertThat(result,succeededSilently());
    assertThat(j.jenkins.getQueue().isEmpty(),equalTo(true));
  }
  @Test public void clearQueueShouldSucceed() throws Exception {
    assertThat(j.jenkins.getQueue().isEmpty(),equalTo(true));
    FreeStyleProject project=j.createFreeStyleProject("aProject");
    project.setAssignedLabel(new LabelAtom("never_created"));
    project.scheduleBuild2(0);
    assertThat(j.jenkins.getQueue().isEmpty(),equalTo(false));
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Jenkins.ADMINISTER).invoke();
    assertThat(result,succeededSilently());
    assertThat(j.jenkins.getQueue().isEmpty(),equalTo(true));
  }
}
