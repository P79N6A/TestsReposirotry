static class TestTask implements Queue.Task {
  private final AtomicInteger cnt;
  boolean isBlocked;
  TestTask(  AtomicInteger cnt){
    this(cnt,false);
  }
  TestTask(  AtomicInteger cnt,  boolean isBlocked){
    this.cnt=cnt;
    this.isBlocked=isBlocked;
  }
  @Override public boolean equals(  Object o){
    return o instanceof TestTask && cnt == ((TestTask)o).cnt;
  }
  @Override public int hashCode(){
    return cnt.hashCode();
  }
  @Override public CauseOfBlockage getCauseOfBlockage(){
    return isBlocked ? CauseOfBlockage.fromMessage(Messages._Queue_Unknown()) : null;
  }
  @Override public String getName(){
    return "test";
  }
  @Override public String getFullDisplayName(){
    return "Test";
  }
  @Override public void checkAbortPermission(){
  }
  @Override public boolean hasAbortPermission(){
    return true;
  }
  @Override public String getUrl(){
    return "test/";
  }
  @Override public String getDisplayName(){
    return "Test";
  }
  @Override public ResourceList getResourceList(){
    return new ResourceList();
  }
  protected void doRun(){
  }
  @Override public Executable createExecutable() throws IOException {
    return new Executable(){
      @Override public SubTask getParent(){
        return TestTask.this;
      }
      @Override public long getEstimatedDuration(){
        return -1;
      }
      @Override public void run(){
        doRun();
        cnt.incrementAndGet();
      }
    }
;
  }
}
