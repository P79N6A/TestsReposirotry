public class Security867Test {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test @Issue("SECURITY-867") public void folderTraversalPrevented_avoidStealingSecretInView() throws Exception {
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    String publicContent="Test OK";
    String secretContent="s3cr3t";
    assertThat(getContentAndCheck200(wc,"rootAction1/public"),containsString(publicContent));
    assertThat(getContent(wc,"rootAction1/%2fjenkins%2fsecurity%2fstapler%2fSecurity867Test%2fNotRootAction2%2fsecret"),not(containsString(secretContent)));
    assertThat(getContent(wc,"rootAction1/%2fjenkins%5csecurity%5cstapler%5cSecurity867Test%5cNotRootAction2%5csecret"),not(containsString(secretContent)));
    assertThat(getContent(wc,"rootAction1/%2e%2e%2fNotRootAction2%2fsecret"),not(containsString(secretContent)));
    assertThat(getContent(wc,"rootAction1/%2e%2e%5cNotRootAction2%5csecret"),not(containsString(secretContent)));
  }
  private String getContent(  JenkinsRule.WebClient wc,  String url) throws Exception {
    Page page=wc.goTo(url,null);
    return page.getWebResponse().getContentAsString();
  }
  private String getContentAndCheck200(  JenkinsRule.WebClient wc,  String url) throws Exception {
    Page page=wc.goTo(url,null);
    assertThat(page.getWebResponse().getStatusCode(),equalTo(200));
    return page.getWebResponse().getContentAsString();
  }
  @Test @Issue("SECURITY-867") public void folderTraversalPrevented_avoidStealingSecretFromDifferentObject() throws Exception {
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
    String action1Config=j.jenkins.getExtensionList(RootAction.class).get(RootAction1.class).getMyConfig();
    String action3Config=j.jenkins.getExtensionList(RootAction.class).get(RootAction3.class).getMyConfig();
    assertThat(getContentAndCheck200(wc,"rootAction1/public"),not(containsString(action1Config)));
    assertThat(getContentAndCheck200(wc,"rootAction3/showConfig"),allOf(containsString(action3Config),not(containsString(action1Config))));
    assertThat(getContent(wc,"rootAction1/%2e%2e%2fRootAction3%2fshowConfig"),allOf(not(containsString(action1Config)),not(containsString(action3Config))));
  }
@TestExtension public static class RootAction1 implements RootAction {
    public String getMyConfig(){
      return "config-1";
    }
    @Override public @CheckForNull String getIconFileName(){
      return null;
    }
    @Override public @CheckForNull String getDisplayName(){
      return null;
    }
    @Override public @CheckForNull String getUrlName(){
      return "rootAction1";
    }
  }
@TestExtension public static class RootAction3 implements RootAction {
    public String getMyConfig(){
      return "config-3";
    }
    @Override public @CheckForNull String getIconFileName(){
      return null;
    }
    @Override public @CheckForNull String getDisplayName(){
      return null;
    }
    @Override public @CheckForNull String getUrlName(){
      return "rootAction3";
    }
  }
}
