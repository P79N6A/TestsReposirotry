public class CancelQuietDownCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,"cancel-quiet-down");
  }
  @Test public void cancelQuietDownShouldFailWithoutAdministerPermission() throws Exception {
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invoke();
    assertThat(result,failedWith(6));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: user is missing the Overall/Administer permission"));
  }
  @Test public void cancelQuietDownShouldSuccessOnNoQuietDownedJenkins() throws Exception {
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Jenkins.ADMINISTER).invoke();
    assertThat(result,succeededSilently());
    QuietDownCommandTest.assertJenkinsNotInQuietMode(j);
  }
  @Test public void cancelQuietDownShouldSuccessOnQuietDownedJenkins() throws Exception {
    j.jenkins.getActiveInstance().doQuietDown();
    QuietDownCommandTest.assertJenkinsInQuietMode(j);
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Jenkins.ADMINISTER).invoke();
    assertThat(result,succeededSilently());
    QuietDownCommandTest.assertJenkinsNotInQuietMode(j);
  }
  @Test public void cancelQuietDownShouldSuccessOnNoQuietDownedJenkinsAndRunningExecutor() throws Exception {
    final FreeStyleProject project=j.createFreeStyleProject("aProject");
    final OneShotEvent finish=new OneShotEvent();
    Future<FreeStyleBuild> build=OnlineNodeCommandTest.startBlockingAndFinishingBuild(project,finish);
    assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds(),hasSize(1));
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Jenkins.ADMINISTER).invoke();
    assertThat(result,succeededSilently());
    QuietDownCommandTest.assertJenkinsNotInQuietMode(j);
    finish.signal();
    build.get();
    assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds(),hasSize(1));
    assertThat(project.isBuilding(),equalTo(false));
    j.assertBuildStatusSuccess(build);
    QuietDownCommandTest.assertJenkinsNotInQuietMode(j);
    build=OnlineNodeCommandTest.startBlockingAndFinishingBuild(project,finish);
    assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds(),hasSize(2));
    assertThat(project.isBuilding(),equalTo(true));
    finish.signal();
    build.get();
    assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds(),hasSize(2));
    assertThat(project.isBuilding(),equalTo(false));
    j.assertBuildStatusSuccess(build);
    QuietDownCommandTest.assertJenkinsNotInQuietMode(j);
  }
  @Test public void cancelQuietDownShouldSuccessOnQuietDownedJenkinsAndRunningExecutor() throws Exception {
    final FreeStyleProject project=j.createFreeStyleProject("aProject");
    final OneShotEvent finish=new OneShotEvent();
    Future<FreeStyleBuild> build=OnlineNodeCommandTest.startBlockingAndFinishingBuild(project,finish);
    assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds(),hasSize(1));
    assertThat(project.isBuilding(),equalTo(true));
    j.jenkins.getActiveInstance().doQuietDown();
    QuietDownCommandTest.assertJenkinsInQuietMode(j);
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ,Jenkins.ADMINISTER).invoke();
    assertThat(result,succeededSilently());
    QuietDownCommandTest.assertJenkinsNotInQuietMode(j);
    finish.signal();
    build.get();
    assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds(),hasSize(1));
    assertThat(project.isBuilding(),equalTo(false));
    j.assertBuildStatusSuccess(build);
    QuietDownCommandTest.assertJenkinsNotInQuietMode(j);
    build=OnlineNodeCommandTest.startBlockingAndFinishingBuild(project,finish);
    assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds(),hasSize(2));
    assertThat(project.isBuilding(),equalTo(true));
    finish.signal();
    build.get();
    assertThat(((FreeStyleProject)j.jenkins.getItem("aProject")).getBuilds(),hasSize(2));
    assertThat(project.isBuilding(),equalTo(false));
    j.assertBuildStatusSuccess(build);
    QuietDownCommandTest.assertJenkinsNotInQuietMode(j);
  }
}
