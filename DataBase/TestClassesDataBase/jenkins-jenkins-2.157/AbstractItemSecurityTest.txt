public class AbstractItemSecurityTest {
  @Rule public JenkinsRule jenkinsRule=new JenkinsRule();
  @Issue("SECURITY-167") @Test() public void testUpdateByXmlDoesNotProcessForeignResources() throws Exception {
    final String xml="<?xml version='1.0' encoding='UTF-8'?>\n" + "<!DOCTYPE project[\n" + "  <!ENTITY foo SYSTEM \"file:///\">\n"+ "]>\n"+ "<project>\n"+ "  <description>&foo;</description>\n"+ "  <scm class=\"hudson.scm.NullSCM\"/>\n"+ "</project>";
    FreeStyleProject project=jenkinsRule.createFreeStyleProject("security-167");
    project.setDescription("Wibble");
    try {
      project.updateByXml(new StreamSource(new StringReader(xml)));
      assertThat(project.getDescription(),isEmptyOrNullString());
    }
 catch (    IOException ex) {
      assertThat(ex.getCause(),not(nullValue()));
      assertThat(ex.getCause().getMessage(),containsString("Refusing to resolve entity"));
    }
  }
  @Issue("SECURITY-167") @Test() public void testUpdateByXmlDoesNotFail() throws Exception {
    final String xml="<?xml version='1.0' encoding='UTF-8'?>\n" + "<project>\n" + "  <description>&amp;</description>\n"+ "  <scm class=\"hudson.scm.NullSCM\"/>\n"+ "</project>";
    FreeStyleProject project=jenkinsRule.createFreeStyleProject("security-167");
    project.updateByXml((StreamSource)new StreamSource(new StringReader(xml)));
    assertThat(project.getDescription(),is("&"));
  }
}
