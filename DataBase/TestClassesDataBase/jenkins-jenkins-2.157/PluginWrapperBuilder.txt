private final class PluginWrapperBuilder {
  private String name;
  private String version="42";
  private String requiredCoreVersion="1.0";
  private List<PluginWrapper.Dependency> deps=new ArrayList<>();
  private List<PluginWrapper.Dependency> optDeps=new ArrayList<>();
  private PluginWrapperBuilder(  String name){
    this.name=name;
  }
  public PluginWrapperBuilder version(  String version){
    this.version=version;
    return this;
  }
  public PluginWrapperBuilder requiredCoreVersion(  String requiredCoreVersion){
    this.requiredCoreVersion=requiredCoreVersion;
    return this;
  }
  public PluginWrapperBuilder deps(  String... deps){
    for (    String dep : deps) {
      this.deps.add(new PluginWrapper.Dependency(dep));
    }
    return this;
  }
  public PluginWrapperBuilder optDeps(  String... optDeps){
    for (    String dep : optDeps) {
      this.optDeps.add(new PluginWrapper.Dependency(dep));
    }
    return this;
  }
  private PluginWrapper buildLoaded(){
    PluginWrapper pw=build();
    plugins.put(name,pw);
    return pw;
  }
  private PluginWrapper buildFailed(){
    PluginWrapper pw=build();
    PluginWrapper.NOTICE.addPlugin(pw);
    return pw;
  }
  private PluginWrapper build(){
    Manifest manifest=mock(Manifest.class);
    Attributes attributes=new Attributes();
    attributes.put(new Attributes.Name("Short-Name"),name);
    attributes.put(new Attributes.Name("Jenkins-Version"),requiredCoreVersion);
    attributes.put(new Attributes.Name("Plugin-Version"),version);
    when(manifest.getMainAttributes()).thenReturn(attributes);
    return new PluginWrapper(pm,new File("/tmp/" + name + ".jpi"),manifest,null,null,new File("/tmp/" + name + ".jpi.disabled"),deps,optDeps);
  }
}
