public class RobustReflectionConverterTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @Issue("JENKINS-21024") @LocalData @Test public void randomExceptionsReported() throws Exception {
    FreeStyleProject p=r.jenkins.getItemByFullName("j",FreeStyleProject.class);
    assertNotNull(p);
    assertEquals(Collections.emptyMap(),p.getTriggers());
    OldDataMonitor odm=(OldDataMonitor)r.jenkins.getAdministrativeMonitor("OldData");
    Map<Saveable,OldDataMonitor.VersionRange> data=odm.getData();
    assertEquals(Collections.singleton(p),data.keySet());
    String text=data.values().iterator().next().extra;
    assertTrue(text,text.contains("Could not call hudson.triggers.TimerTrigger.readResolve"));
  }
public static class AcceptOnlySpecificKeyword extends AbstractDescribableImpl<AcceptOnlySpecificKeyword> {
    public static final String ACCEPT_KEYWORD="accept";
    private final String keyword;
    @DataBoundConstructor public AcceptOnlySpecificKeyword(    String keyword){
      this.keyword=keyword;
    }
    public String getKeyword(){
      return keyword;
    }
    public boolean isAcceptable(){
      return ACCEPT_KEYWORD.equals(keyword);
    }
    private Object readResolve() throws Exception {
      if (!ACL.SYSTEM.equals(Jenkins.getAuthentication())) {
        if (!isAcceptable()) {
          throw new Exception(String.format("Bad keyword: %s",getKeyword()));
        }
      }
      return this;
    }
@TestExtension public static class DescriptorImpl extends Descriptor<AcceptOnlySpecificKeyword> {
      @Override public String getDisplayName(){
        return "AcceptOnlySpecificKeyword";
      }
      @Override public AcceptOnlySpecificKeyword newInstance(      StaplerRequest req,      JSONObject formData) throws FormException {
        AcceptOnlySpecificKeyword instance=super.newInstance(req,formData);
        if (!instance.isAcceptable()) {
          throw new FormException(String.format("Bad keyword: %s",instance.getKeyword()),"keyword");
        }
        return instance;
      }
    }
  }
public static class KeywordProperty extends JobProperty<Job<?,?>> {
    private final AcceptOnlySpecificKeyword nonCriticalField;
    private final AcceptOnlySpecificKeyword criticalField;
    public KeywordProperty(    AcceptOnlySpecificKeyword nonCriticalField,    AcceptOnlySpecificKeyword criticalField){
      this.nonCriticalField=nonCriticalField;
      this.criticalField=criticalField;
    }
    public AcceptOnlySpecificKeyword getNonCriticalField(){
      return nonCriticalField;
    }
    public AcceptOnlySpecificKeyword getCriticalField(){
      return criticalField;
    }
@TestExtension public static class DescriptorImpl extends JobPropertyDescriptor {
      @Override public String getDisplayName(){
        return "KeywordProperty";
      }
      @Override public JobProperty<?> newInstance(      StaplerRequest req,      JSONObject formData) throws FormException {
        formData=formData.getJSONObject("keywordProperty");
        @SuppressWarnings("unchecked") Descriptor<AcceptOnlySpecificKeyword> d=Jenkins.getInstance().getDescriptor(AcceptOnlySpecificKeyword.class);
        return new KeywordProperty(d.newInstance(req,formData.getJSONObject("nonCriticalField")),d.newInstance(req,formData.getJSONObject("criticalField")));
      }
    }
  }
  private static final String CONFIGURATION_TEMPLATE="<?xml version='1.1' encoding='UTF-8'?>" + "<project>" + "<properties>"+ "<hudson.util.RobustReflectionConverterTest_-KeywordProperty>"+ "<nonCriticalField>"+ "<keyword>%s</keyword>"+ "</nonCriticalField>"+ "<criticalField>"+ "<keyword>%s</keyword>"+ "</criticalField>"+ "</hudson.util.RobustReflectionConverterTest_-KeywordProperty>"+ "</properties>"+ "</project>";
  @Test public void testRestInterfaceFailure() throws Exception {
    ApiTokenTestHelper.enableLegacyBehavior();
    Items.XSTREAM2.addCriticalField(KeywordProperty.class,"criticalField");
    User test=User.getById("test",true);
{
      FreeStyleProject p=r.createFreeStyleProject();
      p.addProperty(new KeywordProperty(new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)));
      p.save();
      r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
      WebClient wc=r.createWebClient();
      wc.withBasicApiToken(test);
      WebRequest req=new WebRequest(new URL(wc.getContextPath() + String.format("%s/config.xml",p.getUrl())),HttpMethod.POST);
      req.setEncodingType(null);
      req.setRequestBody(String.format(CONFIGURATION_TEMPLATE,"badvalue",AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));
      wc.getPage(req);
      assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());
      assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD,p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());
      r.jenkins.reload();
      p=r.jenkins.getItemByFullName(p.getFullName(),FreeStyleProject.class);
      assertEquals("badvalue",p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());
      assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD,p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());
    }
{
      FreeStyleProject p=r.createFreeStyleProject();
      p.addProperty(new KeywordProperty(new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)));
      p.save();
      r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
      WebClient wc=r.createWebClient();
      wc.withBasicApiToken(test);
      WebRequest req=new WebRequest(new URL(wc.getContextPath() + String.format("%s/config.xml",p.getUrl())),HttpMethod.POST);
      req.setEncodingType(null);
      req.setRequestBody(String.format(CONFIGURATION_TEMPLATE,AcceptOnlySpecificKeyword.ACCEPT_KEYWORD,"badvalue"));
      try {
        wc.getPage(req);
        fail("Submitting unacceptable configuration via REST should fail.");
      }
 catch (      FailingHttpStatusCodeException e) {
      }
      assertNotEquals("badvalue",p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());
      r.jenkins.reload();
      p=r.jenkins.getItemByFullName(p.getFullName(),FreeStyleProject.class);
      assertNotEquals("badvalue",p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());
    }
  }
  @Test public void testCliFailure() throws Exception {
    Items.XSTREAM2.addCriticalField(KeywordProperty.class,"criticalField");
{
      FreeStyleProject p=r.createFreeStyleProject();
      p.addProperty(new KeywordProperty(new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)));
      p.save();
      r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
      CLICommandInvoker.Result ret=new CLICommandInvoker(r,"update-job").withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE,"badvalue",AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes())).withArgs(p.getFullName(),"--username","test","--password","test").invoke();
      assertEquals(0,ret.returnCode());
      assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());
      assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD,p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());
      r.jenkins.reload();
      p=r.jenkins.getItemByFullName(p.getFullName(),FreeStyleProject.class);
      assertEquals("badvalue",p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());
    }
{
      FreeStyleProject p=r.createFreeStyleProject();
      p.addProperty(new KeywordProperty(new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)));
      p.save();
      r.jenkins.setSecurityRealm(r.createDummySecurityRealm());
      CLICommandInvoker.Result ret=new CLICommandInvoker(r,"update-job").withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE,AcceptOnlySpecificKeyword.ACCEPT_KEYWORD,"badvalue").getBytes())).withArgs(p.getFullName(),"--username","test","--password","test").invoke();
      assertNotEquals(0,ret.returnCode());
      assertNotEquals("badvalue",p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());
      r.jenkins.reload();
      p=r.jenkins.getItemByFullName(p.getFullName(),FreeStyleProject.class);
      assertNotEquals("badvalue",p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());
    }
  }
}
