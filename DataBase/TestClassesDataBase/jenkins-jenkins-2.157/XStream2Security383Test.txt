public class XStream2Security383Test {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Rule public TemporaryFolder f=new TemporaryFolder();
  @Rule public LoggerRule logging=new LoggerRule().record(ClassFilterImpl.class,Level.FINE);
  @Mock private StaplerRequest req;
  @Mock private StaplerResponse rsp;
  @Before public void setUp() throws Exception {
    MockitoAnnotations.initMocks(this);
  }
  @Test @Issue("SECURITY-383") public void testXmlLoad() throws Exception {
    File exploitFile=f.newFile();
    try {
      if (exploitFile.exists() && !exploitFile.delete()) {
        throw new IllegalStateException("file exists and cannot be deleted");
      }
      File tempJobDir=new File(j.jenkins.getRootDir(),"security383");
      String exploitXml=IOUtils.toString(XStream2Security383Test.class.getResourceAsStream("/hudson/util/XStream2Security383Test/config.xml"),"UTF-8");
      exploitXml=exploitXml.replace("@TOKEN@",exploitFile.getAbsolutePath());
      FileUtils.write(new File(tempJobDir,"config.xml"),exploitXml);
      try {
        Items.load(j.jenkins,tempJobDir);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      assertFalse("no file should be created here",exploitFile.exists());
    }
  finally {
      exploitFile.delete();
    }
  }
  @Test @Issue("SECURITY-383") public void testPostJobXml() throws Exception {
    File exploitFile=f.newFile();
    try {
      if (exploitFile.exists() && !exploitFile.delete()) {
        throw new IllegalStateException("file exists and cannot be deleted");
      }
      File tempJobDir=new File(j.jenkins.getRootDir(),"security383");
      String exploitXml=IOUtils.toString(XStream2Security383Test.class.getResourceAsStream("/hudson/util/XStream2Security383Test/config.xml"),"UTF-8");
      exploitXml=exploitXml.replace("@TOKEN@",exploitFile.getAbsolutePath());
      when(req.getMethod()).thenReturn("POST");
      when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(exploitXml)));
      when(req.getContentType()).thenReturn("application/xml");
      when(req.getParameter("name")).thenReturn("foo");
      try {
        j.jenkins.doCreateItem(req,rsp);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      assertFalse("no file should be created here",exploitFile.exists());
    }
  finally {
      exploitFile.delete();
    }
  }
private static class Stream extends ServletInputStream {
    private final InputStream inner;
    public Stream(    final InputStream inner){
      this.inner=inner;
    }
    @Override public int read() throws IOException {
      return inner.read();
    }
    @Override public boolean isFinished(){
      throw new UnsupportedOperationException();
    }
    @Override public boolean isReady(){
      throw new UnsupportedOperationException();
    }
    @Override public void setReadListener(    ReadListener readListener){
      throw new UnsupportedOperationException();
    }
  }
}
