/** 
 * @author Christoph Thelen
 */
public class DirScannerTest {
  @Rule public TemporaryFolder tmpRule=new TemporaryFolder();
  @Test public void globShouldUseDefaultExcludes() throws Exception {
    FilePath tmp=new FilePath(tmpRule.getRoot());
    try {
      tmp.child(".gitignore").touch(0);
      FilePath git=tmp.child(".git");
      git.mkdirs();
      git.child("HEAD").touch(0);
      DirScanner glob1=new DirScanner.Glob("**/*",null);
      DirScanner glob2=new DirScanner.Glob("**/*",null,true);
      MatchingFileVisitor gitdir=new MatchingFileVisitor("HEAD");
      MatchingFileVisitor gitignore=new MatchingFileVisitor(".gitignore");
      glob1.scan(new File(tmp.getRemote()),gitdir);
      glob2.scan(new File(tmp.getRemote()),gitignore);
      assertFalse(gitdir.found);
      assertFalse(gitignore.found);
    }
  finally {
      tmp.deleteRecursive();
    }
  }
  @Test public void globShouldIgnoreDefaultExcludesByRequest() throws Exception {
    FilePath tmp=new FilePath(tmpRule.getRoot());
    try {
      tmp.child(".gitignore").touch(0);
      FilePath git=tmp.child(".git");
      git.mkdirs();
      git.child("HEAD").touch(0);
      DirScanner glob=new DirScanner.Glob("**/*",null,false);
      MatchingFileVisitor gitdir=new MatchingFileVisitor("HEAD");
      MatchingFileVisitor gitignore=new MatchingFileVisitor(".gitignore");
      glob.scan(new File(tmp.getRemote()),gitdir);
      glob.scan(new File(tmp.getRemote()),gitignore);
      assertTrue(gitdir.found);
      assertTrue(gitignore.found);
    }
  finally {
      tmp.deleteRecursive();
    }
  }
private static class MatchingFileVisitor extends FileVisitor {
    public boolean found=false;
    public final String filename;
    public MatchingFileVisitor(    String filename){
      this.filename=filename;
    }
    public void visit(    File f,    String relativePath) throws IOException {
      if (relativePath.endsWith(filename)) {
        found=true;
      }
    }
  }
}
