/** 
 * Latch synchronization primitive that waits for N thread to pass the checkpoint. <p> This is used to make sure we get a set of builds that run long enough.
 */
static class Latch {
  /** 
 * Initial value 
 */
  public final CountDownLatch counter;
  private final int init;
  Latch(  int n){
    this.init=n;
    this.counter=new CountDownLatch(n);
  }
  void block() throws InterruptedException {
    this.counter.countDown();
    this.counter.await(60,TimeUnit.SECONDS);
  }
  /** 
 * Creates a builder that blocks until the latch opens.
 */
  public Builder createBuilder(){
    return new Builder(){
      public boolean perform(      AbstractBuild<?,?> build,      Launcher launcher,      BuildListener listener) throws InterruptedException, IOException {
        block();
        return true;
      }
    }
;
  }
}
