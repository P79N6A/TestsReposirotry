public class UpdateSiteTest {
  @Rule public JenkinsRule j=new JenkinsRule();
  private final String RELATIVE_BASE="/_relative/";
  private Server server;
  private URL baseUrl;
  private String getResource(  String resourceName) throws IOException {
    try {
      URL url=UpdateSiteTest.class.getResource(resourceName);
      return (url != null) ? FileUtils.readFileToString(new File(url.toURI())) : null;
    }
 catch (    URISyntaxException e) {
      return null;
    }
  }
  /** 
 * Startup a web server to access resources via HTTP.
 * @throws Exception 
 */
  @Before public void setUpWebServer() throws Exception {
    server=new Server();
    ServerConnector connector=new ServerConnector(server);
    server.addConnector(connector);
    server.setHandler(new AbstractHandler(){
      @Override public void handle(      String target,      Request baseRequest,      HttpServletRequest request,      HttpServletResponse response) throws IOException, ServletException {
        if (target.startsWith(RELATIVE_BASE)) {
          target=target.substring(RELATIVE_BASE.length());
        }
        String responseBody=getResource(target);
        if (responseBody != null) {
          baseRequest.setHandled(true);
          response.setContentType("text/plain; charset=utf-8");
          response.setStatus(HttpServletResponse.SC_OK);
          response.getOutputStream().write(responseBody.getBytes());
        }
      }
    }
);
    server.start();
    baseUrl=new URL("http","localhost",connector.getLocalPort(),RELATIVE_BASE);
  }
  @After public void shutdownWebserver() throws Exception {
    server.stop();
  }
  @Test public void relativeURLs() throws Exception {
    PersistedList<UpdateSite> sites=j.jenkins.getUpdateCenter().getSites();
    sites.clear();
    URL url=new URL(baseUrl,"/plugins/tasks-update-center.json");
    UpdateSite site=new UpdateSite(UpdateCenter.ID_DEFAULT,url.toString());
    sites.add(site);
    assertEquals(FormValidation.ok(),site.updateDirectly(false).get());
    Data data=site.getData();
    assertNotNull(data);
    assertEquals(new URL(url,"jenkins.war").toString(),data.core.url);
    assertEquals(new HashSet<String>(Arrays.asList("tasks","dummy")),data.plugins.keySet());
    assertEquals(new URL(url,"tasks.jpi").toString(),data.plugins.get("tasks").url);
    assertEquals("http://nowhere.net/dummy.hpi",data.plugins.get("dummy").url);
    UpdateSite.Plugin tasksPlugin=data.plugins.get("tasks");
    assertEquals("Wrong name of plugin found","Task Scanner Plug-in",tasksPlugin.getDisplayName());
  }
  @Test public void updateDirectlyWithJson() throws Exception {
    UpdateSite us=new UpdateSite("default",new URL(baseUrl,"update-center.json").toExternalForm());
    assertNull(us.getPlugin("AdaptivePlugin"));
    assertEquals(FormValidation.ok(),us.updateDirectly(false).get());
    assertNotNull(us.getPlugin("AdaptivePlugin"));
  }
  @Test public void lackOfDataDoesNotFailWarningsCode() throws Exception {
    assertNull("plugin data is not present",j.jenkins.getUpdateCenter().getSite("default").getData());
    j.jenkins.getExtensionList(UpdateSiteWarningsMonitor.class).get(0).getActivePluginWarningsByPlugin();
    j.jenkins.getExtensionList(UpdateSiteWarningsMonitor.class).get(0).getActiveCoreWarnings();
    j.jenkins.getExtensionList(UpdateSiteWarningsConfiguration.class).get(0).getAllWarnings();
  }
  @Test public void incompleteWarningsJson() throws Exception {
    PersistedList<UpdateSite> sites=j.jenkins.getUpdateCenter().getSites();
    sites.clear();
    URL url=new URL(baseUrl,"/plugins/warnings-update-center-malformed.json");
    UpdateSite site=new UpdateSite(UpdateCenter.ID_DEFAULT,url.toString());
    sites.add(site);
    assertEquals(FormValidation.ok(),site.updateDirectly(false).get());
    assertEquals("number of warnings",7,site.getData().getWarnings().size());
    assertNotEquals("plugin data is present",Collections.emptyMap(),site.getData().plugins);
  }
  @Issue("JENKINS-31448") @Test public void isLegacyDefault() throws Exception {
    assertFalse("isLegacyDefault should be false with null id",new UpdateSite(null,"url").isLegacyDefault());
    assertFalse("isLegacyDefault should be false when id is not default and url is http://hudson-ci.org/",new UpdateSite("dummy","http://hudson-ci.org/").isLegacyDefault());
    assertTrue("isLegacyDefault should be true when id is default and url is http://hudson-ci.org/",new UpdateSite(UpdateCenter.PREDEFINED_UPDATE_SITE_ID,"http://hudson-ci.org/").isLegacyDefault());
    assertTrue("isLegacyDefault should be true when url is http://updates.hudson-labs.org/",new UpdateSite("dummy","http://updates.hudson-labs.org/").isLegacyDefault());
    assertFalse("isLegacyDefault should be false with null url",new UpdateSite(null,null).isLegacyDefault());
  }
}
