public class TransientActionFactoryTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @Test public void addedToAbstractItem() throws Exception {
    assertNotNull(r.createFolder("d").getAction(MyAction.class));
    assertNotNull(r.createFreeStyleProject().getAction(MyAction.class));
  }
@TestExtension("addedToAbstractItem") public static class TestItemFactory extends TransientActionFactory<AbstractItem> {
    @Override public Class<AbstractItem> type(){
      return AbstractItem.class;
    }
    @Override public Class<MyAction> actionType(){
      return MyAction.class;
    }
    @Override public Collection<? extends MyAction> createFor(    AbstractItem i){
      return Collections.singleton(new MyAction());
    }
  }
private static class MyAction implements Action {
    @Override public String getIconFileName(){
      return null;
    }
    @Override public String getDisplayName(){
      return null;
    }
    @Override public String getUrlName(){
      return null;
    }
  }
  @Test public void laziness() throws Exception {
    FreeStyleProject p=r.createFreeStyleProject();
    assertNull(p.getAction(FoldableAction.class));
    assertEquals(0,LazyFactory.count);
    assertNotNull(p.getAction(ProminentProjectAction.class));
    assertEquals(1,LazyFactory.count);
    assertNotNull(p.getAction(MyProminentProjectAction.class));
    assertEquals(2,LazyFactory.count);
    LazyFactory.count=0;
    List<? extends Action> allActions=p.getAllActions();
    assertEquals(1,LazyFactory.count);
    assertThat(Util.filter(allActions,FoldableAction.class),Matchers.<FoldableAction>iterableWithSize(0));
    assertThat(Util.filter(allActions,ProminentProjectAction.class),Matchers.<ProminentProjectAction>iterableWithSize(1));
    assertThat(Util.filter(allActions,MyProminentProjectAction.class),Matchers.<MyProminentProjectAction>iterableWithSize(1));
    LazyFactory.count=0;
    assertThat(p.getActions(FoldableAction.class),Matchers.<FoldableAction>iterableWithSize(0));
    assertEquals(0,LazyFactory.count);
    assertThat(p.getActions(ProminentProjectAction.class),Matchers.<ProminentProjectAction>iterableWithSize(1));
    assertEquals(1,LazyFactory.count);
    assertThat(p.getActions(MyProminentProjectAction.class),Matchers.<MyProminentProjectAction>iterableWithSize(1));
    assertEquals(2,LazyFactory.count);
    LazyFactory.count=0;
    MockFolder d=r.createFolder("d");
    assertNull(d.getAction(FoldableAction.class));
    assertNull(d.getAction(ProminentProjectAction.class));
    allActions=d.getAllActions();
    assertThat(Util.filter(allActions,FoldableAction.class),Matchers.<FoldableAction>iterableWithSize(0));
    assertThat(Util.filter(allActions,ProminentProjectAction.class),Matchers.<ProminentProjectAction>iterableWithSize(0));
    assertThat(d.getActions(FoldableAction.class),Matchers.<FoldableAction>iterableWithSize(0));
    assertThat(d.getActions(ProminentProjectAction.class),Matchers.<ProminentProjectAction>iterableWithSize(0));
    assertEquals(0,LazyFactory.count);
  }
@SuppressWarnings("rawtypes") @TestExtension("laziness") public static class LazyFactory extends TransientActionFactory<AbstractProject> {
    static int count;
    @Override public Class<AbstractProject> type(){
      return AbstractProject.class;
    }
    @Override public Class<? extends Action> actionType(){
      return ProminentProjectAction.class;
    }
    @Override public Collection<? extends Action> createFor(    AbstractProject p){
      count++;
      return Collections.singleton(new MyProminentProjectAction());
    }
  }
  @Test public void compatibility() throws Exception {
    FreeStyleProject p=r.createFreeStyleProject();
    assertNull(p.getAction(FoldableAction.class));
    assertEquals(1,OldFactory.count);
    assertNotNull(p.getAction(ProminentProjectAction.class));
    assertEquals(2,OldFactory.count);
    OldFactory.count=0;
    List<? extends Action> allActions=p.getAllActions();
    assertEquals(1,OldFactory.count);
    assertThat(Util.filter(allActions,FoldableAction.class),Matchers.<FoldableAction>iterableWithSize(0));
    assertThat(Util.filter(allActions,ProminentProjectAction.class),Matchers.<ProminentProjectAction>iterableWithSize(1));
    OldFactory.count=0;
    assertThat(p.getActions(FoldableAction.class),Matchers.<FoldableAction>iterableWithSize(0));
    assertEquals(1,OldFactory.count);
    assertThat(p.getActions(ProminentProjectAction.class),Matchers.<ProminentProjectAction>iterableWithSize(1));
    assertEquals(2,OldFactory.count);
  }
@TestExtension("compatibility") public static class OldFactory extends TransientActionFactory<FreeStyleProject> {
    static int count;
    @Override public Class<FreeStyleProject> type(){
      return FreeStyleProject.class;
    }
    @Override public Collection<? extends Action> createFor(    FreeStyleProject p){
      count++;
      return Collections.singleton(new MyProminentProjectAction());
    }
  }
  @Issue("JENKINS-51584") @Test public void transientActionsAreNotPersistedOnQueueItems() throws Exception {
    FreeStyleProject p=r.createFreeStyleProject();
    FreeStyleBuild build=r.buildAndAssertSuccess(p);
    assertThat(Util.filter(build.getActions(),MyProminentProjectAction.class),is(empty()));
    assertThat(Util.filter(build.getAllActions(),MyProminentProjectAction.class),hasSize(1));
  }
@TestExtension("transientActionsAreNotPersistedOnQueueItems") public static class AllFactory extends TransientActionFactory<Actionable> {
    @Override public Class<Actionable> type(){
      return Actionable.class;
    }
    @Nonnull @Override public Collection<? extends Action> createFor(    @Nonnull Actionable target){
      return Collections.singleton(new MyProminentProjectAction());
    }
  }
private static class MyProminentProjectAction extends InvisibleAction implements ProminentProjectAction {
    private String allocation;
    public MyProminentProjectAction(){
      StringWriter sw=new StringWriter();
      PrintWriter pw=new PrintWriter(sw);
      new Exception("MyProminentProjectAction allocated at: ").printStackTrace(pw);
      allocation=sw.toString();
    }
    public String toString(){
      return allocation;
    }
  }
}
