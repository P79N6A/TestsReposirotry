private static final class SlowTrigger extends BuildTrigger {
private static final class Dep extends Dependency {
    private static boolean block=false;
    private Dep(    AbstractProject upstream,    AbstractProject downstream){
      super(upstream,downstream);
    }
    @Override public boolean shouldTriggerBuild(    AbstractBuild build,    TaskListener listener,    List<Action> actions){
      if (block) {
        try {
          Thread.sleep(5000);
        }
 catch (        InterruptedException ex) {
          throw new AssertionError(ex);
        }
      }
      block=true;
      final boolean should=super.shouldTriggerBuild(build,listener,actions);
      return should;
    }
  }
  public SlowTrigger(  String childProjects){
    super(childProjects,true);
  }
  @Override @SuppressWarnings("rawtypes") public void buildDependencyGraph(  AbstractProject owner,  DependencyGraph graph){
    for (    AbstractProject ch : getChildProjects(owner)) {
      graph.addDependency(new Dep(owner,ch));
    }
  }
}
