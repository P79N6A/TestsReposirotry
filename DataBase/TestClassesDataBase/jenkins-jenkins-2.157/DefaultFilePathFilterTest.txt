public class DefaultFilePathFilterTest {
  @Rule public JenkinsRule r=new JenkinsRule();
  @Inject AdminWhitelistRule rule;
  @Before public void setUp(){
    r.jenkins.getInjector().injectMembers(this);
    rule.setMasterKillSwitch(false);
  }
  @Test public void remotePath() throws Exception {
    Slave s=r.createOnlineSlave();
    FilePath forward=s.getRootPath().child("forward");
    forward.write("hello",null);
    assertEquals("hello",s.getRootPath().act(new LocalCallable(forward)));
    FilePath reverse=new FilePath(new File(r.jenkins.root,"reverse"));
    assertFalse(reverse.exists());
    try {
      s.getChannel().call(new ReverseCallable(reverse));
      fail("should have failed");
    }
 catch (    Exception x) {
      assertThat(Functions.printThrowable(x),containsString(DefaultFilePathFilterTest.class.getName() + ".remotePath"));
    }
    assertFalse(reverse.exists());
    DefaultFilePathFilter.BYPASS=true;
    s.getChannel().call(new ReverseCallable(reverse));
    assertTrue(reverse.exists());
    assertEquals("goodbye",reverse.readToString());
  }
private static class LocalCallable implements Callable<String,Exception> {
    private final FilePath p;
    LocalCallable(    FilePath p){
      this.p=p;
    }
    @Override public String call() throws Exception {
      assertFalse(p.isRemote());
      return p.readToString();
    }
    @Override public void checkRoles(    RoleChecker checker) throws SecurityException {
      throw new NoSuchMethodError();
    }
  }
private static class ReverseCallable implements Callable<Void,Exception> {
    private final FilePath p;
    ReverseCallable(    FilePath p){
      this.p=p;
    }
    @Override public Void call() throws Exception {
      assertTrue(p.isRemote());
      p.write("goodbye",null);
      return null;
    }
    @Override public void checkRoles(    RoleChecker checker) throws SecurityException {
      throw new NoSuchMethodError();
    }
  }
}
