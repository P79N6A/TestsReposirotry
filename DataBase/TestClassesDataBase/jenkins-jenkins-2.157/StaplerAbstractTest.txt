public abstract class StaplerAbstractTest {
  @ClassRule public static JenkinsRule rule=new JenkinsRule();
  protected JenkinsRule j;
  protected JenkinsRule.WebClient wc;
  protected WebApp webApp;
  protected static boolean filteredGetMethodTriggered=false;
  protected static boolean filteredDoActionTriggered=false;
  protected static boolean filteredFieldTriggered=false;
  @Before public void setUp() throws Exception {
    j=rule;
    j.jenkins.setCrumbIssuer(null);
    wc=j.createWebClient();
    this.webApp=(WebApp)j.jenkins.servletContext.getAttribute(WebApp.class.getName());
    webApp.setFilteredGetterTriggerListener((f,req,rst,node,expression) -> {
      filteredGetMethodTriggered=true;
      return false;
    }
);
    webApp.setFilteredDoActionTriggerListener((f,req,rsp,node) -> {
      filteredDoActionTriggered=true;
      return false;
    }
);
    webApp.setFilteredFieldTriggerListener((f,req,rsp,node,expression) -> {
      filteredFieldTriggered=true;
      return false;
    }
);
    filteredGetMethodTriggered=false;
    filteredDoActionTriggered=false;
    filteredFieldTriggered=false;
  }
protected static class AbstractUnprotectedRootAction implements UnprotectedRootAction {
    @Override public @CheckForNull String getIconFileName(){
      return null;
    }
    @Override public @CheckForNull String getDisplayName(){
      return null;
    }
    @Override public @CheckForNull String getUrlName(){
      return StringUtils.uncapitalize(this.getClass().getSimpleName());
    }
  }
  public static final String RENDERABLE_CLASS_SIGNATURE="class jenkins.security.stapler.StaplerAbstractTest.Renderable";
protected static class Renderable {
    public void doIndex(){
      replyOk();
    }
    @WebMethod(name="valid") public void valid(){
      replyOk();
    }
  }
protected static class ParentRenderable {
    public Renderable getRenderable(){
      return new Renderable();
    }
  }
protected static class RenderablePoint extends Point {
    public void doIndex(){
      replyOk();
    }
  }
  protected static void replyOk(){
    StaplerResponse resp=Stapler.getCurrentResponse();
    try {
      resp.getWriter().write("ok");
      resp.flushBuffer();
    }
 catch (    IOException e) {
    }
  }
  protected void assertGetMethodRequestWasBlockedAndResetFlag(){
    assertTrue("No get method request was blocked",filteredGetMethodTriggered);
    filteredGetMethodTriggered=false;
  }
  protected void assertDoActionRequestWasBlockedAndResetFlag(){
    assertTrue("No do action request was blocked",filteredDoActionTriggered);
    filteredDoActionTriggered=false;
  }
  protected void assertFieldRequestWasBlockedAndResetFlag(){
    assertTrue("No field request was blocked",filteredFieldTriggered);
    filteredFieldTriggered=false;
  }
  protected void assertGetMethodActionRequestWasNotBlocked(){
    assertFalse("There was at least one get method request that was blocked",filteredGetMethodTriggered);
  }
  protected void assertDoActionRequestWasNotBlocked(){
    assertFalse("There was at least one do action request that was blocked",filteredDoActionTriggered);
  }
  protected void assertFieldRequestWasNotBlocked(){
    assertFalse("There was at least one field request that was blocked",filteredFieldTriggered);
  }
  protected void assertReachable(  String url,  HttpMethod method) throws IOException {
    try {
      Page page=wc.getPage(new WebRequest(new URL(j.getURL(),url),method));
      assertEquals(200,page.getWebResponse().getStatusCode());
      assertThat(page.getWebResponse().getContentAsString(),startsWith("ok"));
      assertDoActionRequestWasNotBlocked();
      assertGetMethodActionRequestWasNotBlocked();
      assertFieldRequestWasNotBlocked();
    }
 catch (    FailingHttpStatusCodeException e) {
      fail("Url " + url + " should be reachable, received "+ e.getMessage()+ " ("+ e.getStatusCode()+ ") instead.");
    }
  }
  protected void assertReachable(  String url) throws IOException {
    assertReachable(url,HttpMethod.GET);
  }
  protected void assertReachableWithSettings(  WebRequest request) throws IOException {
    Page page=wc.getPage(request);
    assertEquals(200,page.getWebResponse().getStatusCode());
    assertEquals("ok",page.getWebResponse().getContentAsString());
    assertDoActionRequestWasNotBlocked();
  }
  protected void assertReachableWithoutOk(  String url) throws IOException {
    try {
      Page page=wc.getPage(new URL(j.getURL(),url));
      assertEquals(200,page.getWebResponse().getStatusCode());
    }
 catch (    FailingHttpStatusCodeException e) {
      fail("Url " + url + " should be reachable, received "+ e.getMessage()+ " ("+ e.getStatusCode()+ ") instead.");
    }
  }
  protected void assertNotReachable(  String url) throws IOException {
    try {
      wc.getPage(new URL(j.getURL(),url));
      fail("Url " + url + " is reachable but should not be, an not-found error is expected");
    }
 catch (    FailingHttpStatusCodeException e) {
      assertEquals("Url " + url + " returns an error different from 404",404,e.getResponse().getStatusCode());
    }
  }
}
