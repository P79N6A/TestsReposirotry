public class WaitNodeOfflineCommandTest {
  private CLICommandInvoker command;
  @Rule public final JenkinsRule j=new JenkinsRule();
  @Before public void setUp(){
    command=new CLICommandInvoker(j,"wait-node-offline");
  }
  @Test public void waitNodeOfflineShouldFailIfNodeDoesNotExist() throws Exception {
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invokeWithArgs("never_created");
    assertThat(result,failedWith(3));
    assertThat(result,hasNoStandardOutput());
    assertThat(result.stderr(),containsString("ERROR: No such node 'never_created'"));
  }
  @Test public void waitNodeOfflineShouldSucceedOnOfflineNode() throws Exception {
    DumbSlave slave=j.createSlave("aNode","",null);
    slave.toComputer().setTemporarilyOffline(true);
    while (true) {
      if (slave.toComputer().isOffline())       break;
      Thread.sleep(100);
    }
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invokeWithArgs("aNode");
    assertThat(result,succeededSilently());
    assertThat(slave.toComputer().isOffline(),equalTo(true));
  }
  @Test public void waitNodeOfflineShouldSucceedOnGoingOfflineNode() throws Exception {
    DumbSlave slave=j.createSlave("aNode","",null);
    slave.toComputer().setTemporarilyOffline(true);
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invokeWithArgs("aNode");
    assertThat(result,succeededSilently());
    assertThat(slave.toComputer().isOffline(),equalTo(true));
  }
  @Test public void waitNodeOfflineShouldSucceedOnDisconnectedNode() throws Exception {
    DumbSlave slave=j.createSlave("aNode","",null);
    slave.toComputer().disconnect();
    while (true) {
      if (slave.toComputer().isOffline())       break;
      Thread.sleep(100);
    }
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invokeWithArgs("aNode");
    assertThat(result,succeededSilently());
    assertThat(slave.toComputer().isOffline(),equalTo(true));
  }
  @Test public void waitNodeOfflineShouldSucceedOnDisconnectingNode() throws Exception {
    DumbSlave slave=j.createSlave("aNode","",null);
    slave.toComputer().disconnect();
    final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invokeWithArgs("aNode");
    assertThat(result,succeededSilently());
    assertThat(slave.toComputer().isOffline(),equalTo(true));
  }
  @Test public void waitNodeOfflineShouldTimeoutOnOnlineNode() throws Exception {
    DumbSlave slave=j.createSlave("aNode","",null);
    slave.toComputer().waitUntilOnline();
    boolean timeoutOccurred=false;
    FutureTask task=new FutureTask(new Callable(){
      public Object call(){
        final CLICommandInvoker.Result result=command.authorizedTo(Jenkins.READ).invokeWithArgs("aNode");
        fail("Never should return from previous CLI call!");
        return null;
      }
    }
);
    try {
      task.get(30,TimeUnit.SECONDS);
    }
 catch (    TimeoutException e) {
      timeoutOccurred=true;
    }
 finally {
      task.cancel(true);
    }
    if (!timeoutOccurred)     fail("Missing timeout for CLI call");
  }
}
