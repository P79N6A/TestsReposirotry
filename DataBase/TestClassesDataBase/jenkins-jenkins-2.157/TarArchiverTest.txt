public class TarArchiverTest {
  @Rule public TemporaryFolder tmp=new TemporaryFolder();
  /** 
 * Makes sure that permissions are properly stored in the tar file.
 */
  @Issue("JENKINS-9397") @Test public void permission() throws Exception {
    assumeTrue(!Functions.isWindows());
    File tar=File.createTempFile("test","tar");
    File zip=File.createTempFile("test","zip");
    FilePath dir=new FilePath(File.createTempFile("test","dir"));
    try {
      dir.delete();
      dir.child("subdir").mkdirs();
      FilePath f=dir.child("a.txt");
      f.touch(0);
      f.chmod(0755);
      f=dir.child("subdir/b.txt");
      f.touch(0);
      f.chmod(0644);
      int dirMode=dir.child("subdir").mode();
      dir.tar(Files.newOutputStream(tar.toPath()),"**/*");
      dir.zip(Files.newOutputStream(zip.toPath()));
      FilePath e=dir.child("extract");
      e.mkdirs();
      run(e,"tar","xvpf",tar.getAbsolutePath());
      assertEquals(0755,e.child("a.txt").mode());
      assertEquals(dirMode,e.child("subdir").mode());
      assertEquals(0644,e.child("subdir/b.txt").mode());
      e.deleteContents();
      run(e,"unzip",zip.getAbsolutePath());
      e=e.listDirectories().get(0);
      assertEquals(0755,e.child("a.txt").mode());
      assertEquals(dirMode,e.child("subdir").mode());
      assertEquals(0644,e.child("subdir/b.txt").mode());
    }
  finally {
      tar.delete();
      zip.delete();
      dir.deleteRecursive();
    }
  }
  private static void run(  FilePath dir,  String... cmds) throws InterruptedException {
    try {
      assertEquals(0,new LocalLauncher(StreamTaskListener.fromStdout()).launch().cmds(cmds).pwd(dir).join());
    }
 catch (    IOException x) {
      Assume.assumeNoException("failed to run " + Arrays.toString(cmds),x);
    }
  }
  @Issue("JENKINS-14922") @Test public void brokenSymlinks() throws Exception {
    assumeTrue(!Functions.isWindows());
    File dir=tmp.getRoot();
    Util.createSymlink(dir,"nonexistent","link",TaskListener.NULL);
    new FilePath(dir).tar(new NullStream(),"**");
  }
  /** 
 * Test backing up an open file
 */
  @Issue("JENKINS-20187") @Test public void growingFileTar() throws Exception {
    File file=new File(tmp.getRoot(),"growing.file");
    GrowingFileRunnable runnable1=new GrowingFileRunnable(file);
    Thread t1=new Thread(runnable1);
    t1.start();
    new FilePath(tmp.getRoot()).tar(new NullStream(),"**");
    runnable1.doFinish();
    t1.join();
  }
private class GrowingFileRunnable implements Runnable {
    private boolean finish=false;
    private Exception ex=null;
    private File file;
    public GrowingFileRunnable(    File file){
      this.file=file;
    }
    @Override public void run(){
      File openFile=file;
      try {
        openFile.createNewFile();
        try (OutputStream fos=Files.newOutputStream(openFile.toPath())){
          for (int i=0; !finish && i < 5000000; i++) {
            fos.write(0);
          }
        }
       }
 catch (      Exception e) {
        ex=e;
      }
    }
    public void doFinish() throws Exception {
      finish=true;
      if (ex != null) {
        throw ex;
      }
    }
  }
}
