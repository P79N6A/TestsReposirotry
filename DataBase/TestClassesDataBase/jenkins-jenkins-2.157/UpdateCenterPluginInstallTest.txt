/** 
 * @author <a href="mailto:tom.fennelly@gmail.com">tom.fennelly@gmail.com</a>
 */
public class UpdateCenterPluginInstallTest {
  @Rule public JenkinsRule jenkinsRule=new JenkinsRule();
  public void setup() throws IOException {
    jenkinsRule.jenkins.getUpdateCenter().getSite(UpdateCenter.ID_DEFAULT).updateDirectlyNow(false);
    InetSocketAddress address=new InetSocketAddress("updates.jenkins-ci.org",80);
    Assume.assumeFalse("Unable to resolve updates.jenkins-ci.org. Skip test.",address.isUnresolved());
  }
  @Test public void test_installUnknownPlugin() throws IOException, SAXException {
    setup();
    JenkinsRule.JSONWebResponse response=jenkinsRule.postJSON("pluginManager/installPlugins",buildInstallPayload("unknown_plugin_xyz"));
    JSONObject json=response.getJSONObject();
    Assert.assertEquals("error",json.get("status"));
    Assert.assertEquals("No such plugin: unknown_plugin_xyz",json.get("message"));
    Assert.assertEquals("error",json.get("status"));
    Assert.assertEquals("No such plugin: unknown_plugin_xyz",json.get("message"));
  }
  @Test public void test_installKnownPlugins() throws IOException, SAXException {
    setup();
    JenkinsRule.JSONWebResponse installResponse=jenkinsRule.postJSON("pluginManager/installPlugins",buildInstallPayload("changelog-history","git"));
    JSONObject json=installResponse.getJSONObject();
    Assert.assertEquals("ok",json.get("status"));
    JSONObject data=json.getJSONObject("data");
    Assert.assertTrue(data.has("correlationId"));
    String correlationId=data.getString("correlationId");
    JSONObject installStatus=jenkinsRule.getJSON("updateCenter/installStatus?correlationId=" + correlationId).getJSONObject();
    Assert.assertEquals("ok",json.get("status"));
    JSONObject status=installStatus.getJSONObject("data");
    JSONArray states=status.getJSONArray("jobs");
    Assert.assertEquals(2,states.size());
    JSONObject pluginInstallState=states.getJSONObject(0);
    Assert.assertEquals("changelog-history",pluginInstallState.get("name"));
    pluginInstallState=states.getJSONObject(1);
    Assert.assertEquals("git",pluginInstallState.get("name"));
  }
  private JSONObject buildInstallPayload(  String... plugins){
    JSONObject payload=new JSONObject();
    payload.put("dynamicLoad",true);
    payload.put("plugins",JSONArray.fromObject(Arrays.asList(plugins)));
    return payload;
  }
}
