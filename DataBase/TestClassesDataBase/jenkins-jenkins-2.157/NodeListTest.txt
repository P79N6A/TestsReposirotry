/** 
 * @author Kohsuke Kawaguchi
 */
public class NodeListTest {
static class DummyNode extends Node {
    String nodeName=Long.toString(new Random().nextLong());
    public String getNodeName(){
      return nodeName;
    }
    public void setNodeName(    String name){
      throw new UnsupportedOperationException();
    }
    public String getNodeDescription(){
      throw new UnsupportedOperationException();
    }
    public Launcher createLauncher(    TaskListener listener){
      throw new UnsupportedOperationException();
    }
    public int getNumExecutors(){
      throw new UnsupportedOperationException();
    }
    public Mode getMode(){
      throw new UnsupportedOperationException();
    }
    public Computer createComputer(){
      throw new UnsupportedOperationException();
    }
    public Set<LabelAtom> getAssignedLabels(){
      throw new UnsupportedOperationException();
    }
    public String getLabelString(){
      throw new UnsupportedOperationException();
    }
    public void setLabelString(    String labelString) throws IOException {
      throw new UnsupportedOperationException();
    }
    public FilePath getWorkspaceFor(    TopLevelItem item){
      throw new UnsupportedOperationException();
    }
    public FilePath getRootPath(){
      throw new UnsupportedOperationException();
    }
    @Override public Callable<ClockDifference,IOException> getClockDifferenceCallable(){
      throw new UnsupportedOperationException();
    }
    public NodeDescriptor getDescriptor(){
      throw new UnsupportedOperationException();
    }
    @Override public DescribableList<NodeProperty<?>,NodePropertyDescriptor> getNodeProperties(){
      throw new UnsupportedOperationException();
    }
  }
static class EphemeralNode extends DummyNode implements hudson.slaves.EphemeralNode {
    public Node asNode(){
      return this;
    }
  }
  @Test public void serialization() throws Exception {
    NodeList nl=new NodeList(new DummyNode(),new EphemeralNode());
    File tmp=File.createTempFile("test","test");
    try {
      XmlFile x=new XmlFile(Jenkins.XSTREAM,tmp);
      x.write(nl);
      String xml=FileUtils.readFileToString(tmp);
      System.out.println(xml);
      assertEquals(6,xml.split("\n").length);
      NodeList back=(NodeList)x.read();
      assertEquals(1,back.size());
      assertEquals(DummyNode.class,back.get(0).getClass());
    }
  finally {
      tmp.delete();
    }
  }
}
