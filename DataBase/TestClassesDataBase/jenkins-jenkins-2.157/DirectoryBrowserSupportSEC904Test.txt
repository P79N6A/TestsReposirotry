public class DirectoryBrowserSupportSEC904Test {
  @Rule public JenkinsRule j=new JenkinsRule();
  @Test @Issue("SECURITY-904") public void symlink_outsideWorkspace_areNotAllowed() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    File secretsFolder=new File(j.jenkins.getRootDir(),"secrets");
    File secretTarget=new File(secretsFolder,"goal.txt");
    String secretContent="secret";
    FileUtils.write(secretTarget,secretContent);
    if (Functions.isWindows()) {
      String script=loadContentFromResource("outsideWorkspaceStructure.bat");
      p.getBuildersList().add(new BatchFile(script));
    }
 else {
      String script=loadContentFromResource("outsideWorkspaceStructure.sh");
      p.getBuildersList().add(new Shell(script));
    }
    assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
{
      Page page=wc.goTo(p.getUrl() + "ws/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,allOf(containsString("public1.key"),containsString("intermediateFolder"),containsString("to_secrets1"),containsString("to_secrets_goal1"),not(containsString("to_secrets2")),not(containsString("to_secrets_goal2"))));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/to_secrets1/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/to_secrets_goal1/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,allOf(not(containsString("to_secrets1")),not(containsString("to_secrets_goal1")),containsString("to_secrets2"),containsString("to_secrets_goal2")));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_secrets2/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_secrets2/master.key",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_secrets_goal2/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/**/*.key",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,allOf(not(containsString("master.key")),containsString("public1.key"),containsString("public2.key")));
    }
{
      Page zipPage=wc.goTo(p.getUrl() + "ws/*zip*/ws.zip",null);
      assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);
      assertThat(entryNames,containsInAnyOrder(p.getName() + "/intermediateFolder/public2.key",p.getName() + "/public1.key"));
    }
{
      Page zipPage=wc.goTo(p.getUrl() + "ws/intermediateFolder/*zip*/intermediateFolder.zip",null);
      assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);
      assertThat(entryNames,contains("intermediateFolder/public2.key"));
    }
  }
  @Test @Issue("SECURITY-904") public void symlink_avoidLeakingInformation_aboutIllegalFolder() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    File secretsFolder=new File(j.jenkins.getRootDir(),"secrets");
    File secretTarget=new File(secretsFolder,"goal.txt");
    String secretContent="secret";
    FileUtils.write(secretTarget,secretContent);
    FileUtils.write(new File(secretsFolder,"public_fake1.key"),secretContent);
    FileUtils.write(new File(secretsFolder,"public_fake2.key"),secretContent);
    FileUtils.write(new File(secretsFolder,"public_fake3.key"),secretContent);
    if (Functions.isWindows()) {
      String script=loadContentFromResource("outsideWorkspaceStructure.bat");
      p.getBuildersList().add(new BatchFile(script));
    }
 else {
      String script=loadContentFromResource("outsideWorkspaceStructure.sh");
      p.getBuildersList().add(new Shell(script));
    }
    assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
{
      Page page=wc.goTo(p.getUrl() + "ws/**/goal.txt",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,allOf(not(containsString("public1.key")),not(containsString("public2.key")),not(containsString("to_secrets")),not(containsString("to_secrets2")),not(containsString("to_secrets3"))));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/**/public*.key",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,allOf(containsString("public1.key"),containsString("public2.key"),not(containsString("otherFolder")),not(containsString("to_secrets")),not(containsString("to_secrets2")),not(containsString("to_secrets3"))));
    }
  }
  @Test @Issue("SECURITY-904") public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {
    Assume.assumeTrue(Functions.isWindows());
    FreeStyleProject p=j.createFreeStyleProject();
    File secretsFolder=new File(j.jenkins.getRootDir(),"secrets");
    File secretTarget=new File(secretsFolder,"goal.txt");
    String secretContent="secret";
    FileUtils.write(secretTarget,secretContent);
    String script=loadContentFromResource("outsideWorkspaceStructureWithJunctions.bat");
    p.getBuildersList().add(new BatchFile(script));
    assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
{
      Page page=wc.goTo(p.getUrl() + "ws/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,allOf(containsString("public1.key"),containsString("intermediateFolder"),containsString("to_secrets1j"),containsString("to_secrets1s"),containsString("to_secrets_goal1"),not(containsString("to_secrets2")),not(containsString("to_secrets_goal2"))));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/to_secrets1s/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/to_secrets1j/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/to_secrets_goal1/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,allOf(not(containsString("to_secrets1")),not(containsString("to_secrets_goal1")),containsString("to_secrets2s"),containsString("to_secrets2j"),containsString("to_secrets_goal2")));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_secrets2s/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_secrets2j/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_secrets2s/master.key",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_secrets2j/master.key",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_secrets_goal2/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_FORBIDDEN));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/**/*.key",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,allOf(not(containsString("master.key")),containsString("public1.key"),containsString("public2.key"),containsString("intermediateFolder"),not(containsString("otherFolder")),not(containsString("to_secrets3j")),not(containsString("to_secrets3s")),not(containsString("to_secrets2j")),not(containsString("to_secrets2s")),not(containsString("to_secrets1j")),not(containsString("to_secrets1s"))));
    }
{
      Page zipPage=wc.goTo(p.getUrl() + "ws/*zip*/ws.zip",null);
      assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);
      assertThat(entryNames,containsInAnyOrder(p.getName() + "/intermediateFolder/public2.key",p.getName() + "/public1.key"));
    }
{
      Page zipPage=wc.goTo(p.getUrl() + "ws/intermediateFolder/*zip*/intermediateFolder.zip",null);
      assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);
      assertThat(entryNames,contains("intermediateFolder/public2.key"));
    }
  }
  private List<String> getListOfEntriesInDownloadedZip(  UnexpectedPage zipPage) throws Exception {
    List<String> result;
    File zipfile=null;
    ZipFile readzip=null;
    try {
      zipfile=download(zipPage);
      readzip=new ZipFile(zipfile);
      result=readzip.stream().map(ZipEntry::getName).collect(Collectors.toList());
    }
  finally {
      if (readzip != null) {
        readzip.close();
      }
      if (zipfile != null) {
        zipfile.delete();
      }
    }
    return result;
  }
  private File download(  UnexpectedPage page) throws IOException {
    File file=File.createTempFile("DirectoryBrowserSupport","zipDownload");
    file.delete();
    try (InputStream is=page.getInputStream();OutputStream os=Files.newOutputStream(file.toPath())){
      IOUtils.copy(is,os);
    }
     return file;
  }
  @Test @Issue("SECURITY-904") public void directSymlink_forTestingZip() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());
    FilePath ws=p.getSomeWorkspace();
    File secretsFolder=new File(j.jenkins.getRootDir(),"secrets");
    FilePath a1=ws.child("a1");
    a1.mkdirs();
    a1.child("to_secrets1").symlinkTo(secretsFolder.getAbsolutePath(),TaskListener.NULL);
    FilePath b2=ws.child("b1").child("b2");
    b2.mkdirs();
    b2.child("to_secrets2").symlinkTo(secretsFolder.getAbsolutePath(),TaskListener.NULL);
    FilePath c3=ws.child("c1").child("c2").child("c3");
    c3.mkdirs();
    c3.child("to_secrets3").symlinkTo(secretsFolder.getAbsolutePath(),TaskListener.NULL);
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
{
      Page zipPage=wc.goTo(p.getUrl() + "ws/*zip*/ws.zip",null);
      assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);
      assertThat(entryNames,hasSize(0));
    }
{
      Page zipPage=wc.goTo(p.getUrl() + "ws/a1/*zip*/a1.zip",null);
      assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);
      assertThat(entryNames,hasSize(0));
    }
{
      Page zipPage=wc.goTo(p.getUrl() + "ws/b1/b2/*zip*/b2.zip",null);
      assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);
      assertThat(entryNames,hasSize(0));
    }
{
      Page zipPage=wc.goTo(p.getUrl() + "ws/c1/c2/c3/*zip*/c3.zip",null);
      assertThat(zipPage.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      List<String> entryNames=getListOfEntriesInDownloadedZip((UnexpectedPage)zipPage);
      assertThat(entryNames,hasSize(0));
    }
  }
  @Test @Issue("SECURITY-904") public void symlink_insideWorkspace_areStillAllowed() throws Exception {
    FreeStyleProject p=j.createFreeStyleProject();
    assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());
    File jobWorkspaceFolder=new File(new File(j.jenkins.getRootDir(),"workspace"),p.name);
    File folderInsideWorkspace=new File(jobWorkspaceFolder,"asset");
    folderInsideWorkspace.mkdir();
    File fileTarget=new File(folderInsideWorkspace,"goal.txt");
    String publicContent="not-secret";
    FileUtils.write(fileTarget,publicContent);
    if (Functions.isWindows()) {
      String script=loadContentFromResource("insideWorkspaceStructure.bat");
      p.getBuildersList().add(new BatchFile(script));
    }
 else {
      String script=loadContentFromResource("insideWorkspaceStructure.sh");
      p.getBuildersList().add(new Shell(script));
    }
    assertEquals(Result.SUCCESS,p.scheduleBuild2(0).get().getResult());
    JenkinsRule.WebClient wc=j.createWebClient();
    wc.getOptions().setThrowExceptionOnFailingStatusCode(false);
{
      Page page=wc.goTo(p.getUrl() + "ws/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,allOf(containsString("asset"),containsString("to_internal1"),containsString("to_internal_goal1"),containsString("intermediateFolder"),not(containsString("to_internal2")),not(containsString("to_internal_goal2"))));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/to_internal1/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,containsString("goal.txt"));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/to_internal_goal1/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,containsString(publicContent));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_internal2/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,containsString("goal.txt"));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/to_internal_goal2/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,containsString(publicContent));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/asset/goal.txt/",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
      String workspaceContent=page.getWebResponse().getContentAsString();
      assertThat(workspaceContent,containsString(publicContent));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/*zip*/ws.zip",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/intermediateFolder/*zip*/intermediateFolder.zip",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    }
{
      Page page=wc.goTo(p.getUrl() + "ws/asset/*zip*/asset.zip",null);
      assertThat(page.getWebResponse().getStatusCode(),equalTo(HttpURLConnection.HTTP_OK));
    }
  }
  private String loadContentFromResource(  String fileNameInResources) throws IOException, URISyntaxException {
    URL resourceUrl=DirectoryBrowserSupportSEC904Test.class.getResource(DirectoryBrowserSupportSEC904Test.class.getSimpleName() + "/" + fileNameInResources);
    if (resourceUrl == null) {
      fail("The resource with fileName " + fileNameInResources + " is not present in the resources of the test");
    }
    File resourceFile=new File(resourceUrl.toURI());
    return FileUtils.readFileToString(resourceFile);
  }
}
