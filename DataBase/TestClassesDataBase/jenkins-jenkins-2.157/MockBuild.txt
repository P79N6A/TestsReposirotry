private static class MockBuild extends Build<FreeStyleProject,FreeStyleBuild> {
  private final int buildNumber;
  private Map<String,String> buildVariables=Collections.emptyMap();
  private MockBuild(  int buildNumber){
    super(Mockito.mock(FreeStyleProject.class),Mockito.mock(Calendar.class));
    this.buildNumber=buildNumber;
  }
  @Override public int getNumber(){
    return buildNumber;
  }
  @Override public Map<String,String> getBuildVariables(){
    return buildVariables;
  }
  MockBuild withBuildVariables(  Map<String,String> buildVariables){
    this.buildVariables=buildVariables;
    return this;
  }
  MockBuild withBuildParameters(  Map<String,String> buildParametersAsMap) throws IOException {
    addAction(new ParametersAction(buildPropertiesMapToParameterValues(buildParametersAsMap),buildParametersAsMap.keySet()));
    return this;
  }
  private List<ParameterValue> buildPropertiesMapToParameterValues(  Map<String,String> buildParametersAsMap){
    List<ParameterValue> parameterValues=new ArrayList<>();
    for (    Map.Entry<String,String> parameter : buildParametersAsMap.entrySet()) {
      parameterValues.add(new StringParameterValue(parameter.getKey(),parameter.getValue()));
    }
    return parameterValues;
  }
  MockBuild withSensitiveBuildParameters(  String paramName,  String paramValue) throws IOException {
    addAction(new ParametersAction(ImmutableList.<ParameterValue>of(createSensitiveStringParameterValue(paramName,paramValue)),ImmutableList.of(paramName)));
    return this;
  }
  private StringParameterValue createSensitiveStringParameterValue(  final String paramName,  final String paramValue){
    return new StringParameterValue(paramName,paramValue){
      @Override public boolean isSensitive(){
        return true;
      }
    }
;
  }
}
