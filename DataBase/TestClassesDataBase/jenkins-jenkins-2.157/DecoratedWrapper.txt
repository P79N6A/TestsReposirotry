/** 
 * A wrapper, which decorates launchers.
 */
public static class DecoratedWrapper extends BuildWrapper {
  @Override public Launcher decorateLauncher(  AbstractBuild build,  Launcher launcher,  BuildListener listener) throws IOException, InterruptedException, Run.RunnerAbortedException {
    final BuildListener l=listener;
    return new DecoratedLauncher(launcher){
      @Override public Proc launch(      Launcher.ProcStarter starter) throws IOException {
        String[] envs=starter.envs();
        l.getLogger().println("[DecoratedWrapper]: Number of environment variables is " + envs.length);
        return super.launch(starter);
      }
    }
;
  }
  @Override public Environment setUp(  AbstractBuild build,  Launcher launcher,  BuildListener listener) throws IOException, InterruptedException {
    return new Environment(){
    }
;
  }
@Extension public static class DescriptorImpl extends TestWrapperDescriptor {
  }
}
