@Category({MediumTests.class}) public class TestBalancerStatusTagInJMXMetrics extends BalancerTestBase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestBalancerStatusTagInJMXMetrics.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestBalancerStatusTagInJMXMetrics.class);
  private static HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static int connectorPort=61120;
  private static HMaster master;
  private static MiniHBaseCluster cluster;
  private static Configuration conf=null;
  /** 
 * Setup the environment for the test.
 */
  @BeforeClass public static void setupBeforeClass() throws Exception {
    conf=UTIL.getConfiguration();
    Random rand=new Random();
    for (int i=0; i < 10; i++) {
      do {
        int sign=i % 2 == 0 ? 1 : -1;
        connectorPort+=sign * rand.nextInt(100);
      }
 while (!HBaseTestingUtility.available(connectorPort));
      try {
        conf.setInt("regionserver.rmi.registry.port",connectorPort);
        cluster=UTIL.startMiniCluster();
        LOG.info("Waiting for active/ready master");
        cluster.waitForActiveAndReadyMaster();
        master=cluster.getMaster();
        break;
      }
 catch (      Exception e) {
        LOG.debug("Encountered exception when starting mini cluster. Trying port " + connectorPort,e);
        try {
          UTIL.shutdownMiniCluster();
        }
 catch (        Exception ex) {
          LOG.debug("Encountered exception shutting down cluster",ex);
        }
      }
    }
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  /** 
 * Tests the status change using the Default Metrics System
 */
  @Test public void testJmxMetrics() throws Exception {
    assertEquals(getStatus(),"true");
    master.getLoadBalancer().updateBalancerStatus(false);
    assertEquals(getStatus(),"false");
  }
  /** 
 * Gets the balancer status tag from the Metrics registry
 */
  public String getStatus() throws Exception {
    MetricsSource source=DefaultMetricsSystem.instance().getSource(MetricsBalancerSource.METRICS_JMX_CONTEXT);
    if (source instanceof MetricsBalancerSourceImpl) {
      MetricsTag status=((MetricsBalancerSourceImpl)source).getMetricsRegistry().getTag(MetricsBalancerSource.BALANCER_STATUS);
      return status.value();
    }
 else {
      LOG.warn("Balancer JMX Metrics not registered");
      throw new Exception("MetricsBalancer JMX Context not found");
    }
  }
}
