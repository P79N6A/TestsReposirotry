/** 
 * ClassFinder that is pre-configured with filters that will only allow test classes. The name is strange because a logical name would start with "Test" and be confusing.
 */
public class ClassTestFinder extends ClassFinder {
  public ClassTestFinder(){
    super(new TestFileNameFilter(),new TestFileNameFilter(),new TestClassFilter());
  }
  public ClassTestFinder(  Class<?> category){
    super(new TestFileNameFilter(),new TestFileNameFilter(),new TestClassFilter(category));
  }
  public static Class<?>[] getCategoryAnnotations(  Class<?> c){
    Category category=c.getAnnotation(Category.class);
    if (category != null) {
      return category.value();
    }
    return new Class<?>[0];
  }
  /** 
 * Filters both test classes and anything in the hadoop-compat modules 
 */
public static class TestFileNameFilter implements FileNameFilter, ResourcePathFilter {
    private static final Pattern hadoopCompactRe=Pattern.compile("hbase-hadoop\\d?-compat");
    @Override public boolean isCandidateFile(    String fileName,    String absFilePath){
      boolean isTestFile=fileName.startsWith("Test") || fileName.startsWith("IntegrationTest");
      return isTestFile && !hadoopCompactRe.matcher(absFilePath).find();
    }
    @Override public boolean isCandidatePath(    String resourcePath,    boolean isJar){
      return !hadoopCompactRe.matcher(resourcePath).find();
    }
  }
public static class TestClassFilter implements ClassFilter {
    private Class<?> categoryAnnotation=null;
    public TestClassFilter(    Class<?> categoryAnnotation){
      this.categoryAnnotation=categoryAnnotation;
    }
    public TestClassFilter(){
      this(null);
    }
    @Override public boolean isCandidateClass(    Class<?> c){
      return isTestClass(c) && isCategorizedClass(c);
    }
    private boolean isTestClass(    Class<?> c){
      if (Modifier.isAbstract(c.getModifiers())) {
        return false;
      }
      if (c.getAnnotation(Suite.SuiteClasses.class) != null) {
        return true;
      }
      for (      Method met : c.getMethods()) {
        if (met.getAnnotation(Test.class) != null) {
          return true;
        }
      }
      return false;
    }
    private boolean isCategorizedClass(    Class<?> c){
      if (this.categoryAnnotation == null) {
        return true;
      }
      for (      Class<?> cc : getCategoryAnnotations(c)) {
        if (cc.equals(this.categoryAnnotation)) {
          return true;
        }
      }
      return false;
    }
  }
}
