@Category({SecurityTests.class,LargeTests.class}) public class TestWithDisabledAuthorization {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestWithDisabledAuthorization.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final String CONFIDENTIAL="confidential";
  private static final String SECRET="secret";
  private static final String PRIVATE="private";
  private static final byte[] TEST_FAMILY=Bytes.toBytes("test");
  private static final byte[] TEST_QUALIFIER=Bytes.toBytes("q");
  private static final byte[] ZERO=Bytes.toBytes(0L);
  @Rule public final TestName TEST_NAME=new TestName();
  private static User SUPERUSER;
  private static User USER_RW;
  private static Configuration conf;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    conf=TEST_UTIL.getConfiguration();
    conf.setInt(HConstants.REGION_SERVER_HIGH_PRIORITY_HANDLER_COUNT,10);
    SecureTestUtil.configureSuperuser(conf);
    VisibilityTestUtil.enableVisiblityLabels(conf);
    conf.setBoolean(User.HBASE_SECURITY_AUTHORIZATION_CONF_KEY,false);
    TEST_UTIL.startMiniCluster();
    TEST_UTIL.waitUntilAllRegionsAssigned(LABELS_TABLE_NAME);
    SUPERUSER=User.createUserForTesting(conf,"admin",new String[]{"supergroup"});
    USER_RW=User.createUserForTesting(conf,"rwuser",new String[0]);
    SUPERUSER.runAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          VisibilityClient.addLabels(conn,new String[]{SECRET,CONFIDENTIAL,PRIVATE});
          VisibilityClient.setAuths(conn,new String[]{SECRET,CONFIDENTIAL},USER_RW.getShortName());
        }
 catch (        Throwable t) {
          fail("Should not have failed");
        }
        return null;
      }
    }
);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testManageUserAuths() throws Throwable {
    SUPERUSER.runAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          VisibilityClient.setAuths(conn,new String[]{SECRET,CONFIDENTIAL},USER_RW.getShortName());
        }
 catch (        Throwable t) {
          fail("Should not have failed");
        }
        return null;
      }
    }
);
    PrivilegedExceptionAction<List<String>> getAuths=new PrivilegedExceptionAction<List<String>>(){
      @Override public List<String> run() throws Exception {
        GetAuthsResponse authsResponse=null;
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          authsResponse=VisibilityClient.getAuths(conn,USER_RW.getShortName());
        }
 catch (        Throwable t) {
          fail("Should not have failed");
        }
        List<String> authsList=new ArrayList<>(authsResponse.getAuthList().size());
        for (        ByteString authBS : authsResponse.getAuthList()) {
          authsList.add(Bytes.toString(authBS.toByteArray()));
        }
        return authsList;
      }
    }
;
    List<String> authsList=SUPERUSER.runAs(getAuths);
    assertEquals(2,authsList.size());
    assertTrue(authsList.contains(SECRET));
    assertTrue(authsList.contains(CONFIDENTIAL));
    SUPERUSER.runAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          VisibilityClient.clearAuths(conn,new String[]{SECRET},USER_RW.getShortName());
        }
 catch (        Throwable t) {
          fail("Should not have failed");
        }
        return null;
      }
    }
);
    authsList=SUPERUSER.runAs(getAuths);
    assertEquals(1,authsList.size());
    assertTrue(authsList.contains(CONFIDENTIAL));
    SUPERUSER.runAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          VisibilityClient.clearAuths(conn,new String[]{CONFIDENTIAL},USER_RW.getShortName());
        }
 catch (        Throwable t) {
          fail("Should not have failed");
        }
        return null;
      }
    }
);
    authsList=SUPERUSER.runAs(getAuths);
    assertEquals(0,authsList.size());
  }
  @Test public void testPassiveVisibility() throws Exception {
    try (Table t=createTableAndWriteDataWithLabels(TableName.valueOf(TEST_NAME.getMethodName()),SECRET,PRIVATE,SECRET + "|" + CONFIDENTIAL,PRIVATE + "|" + CONFIDENTIAL)){
      Scan s=new Scan();
      s.setAuthorizations(new Authorizations());
      try (ResultScanner scanner=t.getScanner(s)){
        Result[] next=scanner.next(10);
        assertEquals(4,next.length);
      }
       s=new Scan();
      s.setAuthorizations(new Authorizations(SECRET));
      try (ResultScanner scanner=t.getScanner(s)){
        Result[] next=scanner.next(10);
        assertEquals(4,next.length);
      }
       s=new Scan();
      s.setAuthorizations(new Authorizations(SECRET,CONFIDENTIAL));
      try (ResultScanner scanner=t.getScanner(s)){
        Result[] next=scanner.next(10);
        assertEquals(4,next.length);
      }
       s=new Scan();
      s.setAuthorizations(new Authorizations(SECRET,CONFIDENTIAL,PRIVATE));
      try (ResultScanner scanner=t.getScanner(s)){
        Result[] next=scanner.next(10);
        assertEquals(4,next.length);
      }
     }
   }
  static Table createTableAndWriteDataWithLabels(  TableName tableName,  String... labelExps) throws Exception {
    List<Put> puts=new ArrayList<>(labelExps.length + 1);
    for (int i=0; i < labelExps.length; i++) {
      Put put=new Put(Bytes.toBytes("row" + (i + 1)));
      put.addColumn(TEST_FAMILY,TEST_QUALIFIER,HConstants.LATEST_TIMESTAMP,ZERO);
      put.setCellVisibility(new CellVisibility(labelExps[i]));
      puts.add(put);
    }
    Table table=TEST_UTIL.createTable(tableName,TEST_FAMILY);
    table.put(puts);
    return table;
  }
}
