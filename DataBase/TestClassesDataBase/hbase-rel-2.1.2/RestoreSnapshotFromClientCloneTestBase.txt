public class RestoreSnapshotFromClientCloneTestBase extends RestoreSnapshotFromClientTestBase {
  @Test public void testCloneSnapshotOfCloned() throws IOException, InterruptedException {
    TableName clonedTableName=TableName.valueOf(getValidMethodName() + "-" + System.currentTimeMillis());
    admin.cloneSnapshot(snapshotName0,clonedTableName);
    verifyRowCount(TEST_UTIL,clonedTableName,snapshot0Rows);
    SnapshotTestingUtils.verifyReplicasCameOnline(clonedTableName,admin,getNumReplicas());
    admin.disableTable(clonedTableName);
    admin.snapshot(snapshotName2,clonedTableName);
    TEST_UTIL.deleteTable(clonedTableName);
    waitCleanerRun();
    admin.cloneSnapshot(snapshotName2,clonedTableName);
    verifyRowCount(TEST_UTIL,clonedTableName,snapshot0Rows);
    SnapshotTestingUtils.verifyReplicasCameOnline(clonedTableName,admin,getNumReplicas());
    TEST_UTIL.deleteTable(clonedTableName);
  }
  @Test public void testCloneAndRestoreSnapshot() throws IOException, InterruptedException {
    TEST_UTIL.deleteTable(tableName);
    waitCleanerRun();
    admin.cloneSnapshot(snapshotName0,tableName);
    verifyRowCount(TEST_UTIL,tableName,snapshot0Rows);
    SnapshotTestingUtils.verifyReplicasCameOnline(tableName,admin,getNumReplicas());
    waitCleanerRun();
    admin.disableTable(tableName);
    admin.restoreSnapshot(snapshotName0);
    admin.enableTable(tableName);
    verifyRowCount(TEST_UTIL,tableName,snapshot0Rows);
    SnapshotTestingUtils.verifyReplicasCameOnline(tableName,admin,getNumReplicas());
  }
  private void waitCleanerRun() throws InterruptedException {
    TEST_UTIL.getMiniHBaseCluster().getMaster().getHFileCleaner().choreForTesting();
  }
}
