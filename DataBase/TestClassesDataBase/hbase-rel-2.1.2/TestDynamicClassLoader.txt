/** 
 * Test TestDynamicClassLoader
 */
@Category({MiscTests.class,SmallTests.class}) public class TestDynamicClassLoader {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestDynamicClassLoader.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestDynamicClassLoader.class);
  private static final HBaseCommonTestingUtility TEST_UTIL=new HBaseCommonTestingUtility();
  private Configuration conf;
static {
    TEST_UTIL.getConfiguration().set("hbase.dynamic.jars.dir",TEST_UTIL.getDataTestDir().toString());
  }
  @Before public void initializeConfiguration(){
    conf=new Configuration(TEST_UTIL.getConfiguration());
  }
  @Test public void testLoadClassFromLocalPath() throws Exception {
    ClassLoader parent=TestDynamicClassLoader.class.getClassLoader();
    DynamicClassLoader classLoader=new DynamicClassLoader(conf,parent);
    String className="TestLoadClassFromLocalPath";
    deleteClass(className);
    try {
      classLoader.loadClass(className);
      fail("Should not be able to load class " + className);
    }
 catch (    ClassNotFoundException cnfe) {
    }
    try {
      String folder=TEST_UTIL.getDataTestDir().toString();
      ClassLoaderTestHelper.buildJar(folder,className,null,ClassLoaderTestHelper.localDirPath(conf));
      classLoader.loadClass(className);
    }
 catch (    ClassNotFoundException cnfe) {
      LOG.error("Should be able to load class " + className,cnfe);
      fail(cnfe.getMessage());
    }
  }
  @Test public void testLoadClassFromAnotherPath() throws Exception {
    ClassLoader parent=TestDynamicClassLoader.class.getClassLoader();
    DynamicClassLoader classLoader=new DynamicClassLoader(conf,parent);
    String className="TestLoadClassFromAnotherPath";
    deleteClass(className);
    try {
      classLoader.loadClass(className);
      fail("Should not be able to load class " + className);
    }
 catch (    ClassNotFoundException cnfe) {
    }
    try {
      String folder=TEST_UTIL.getDataTestDir().toString();
      ClassLoaderTestHelper.buildJar(folder,className,null);
      classLoader.loadClass(className);
    }
 catch (    ClassNotFoundException cnfe) {
      LOG.error("Should be able to load class " + className,cnfe);
      fail(cnfe.getMessage());
    }
  }
  @Test public void testLoadClassFromLocalPathWithDynamicDirOff() throws Exception {
    conf.setBoolean("hbase.use.dynamic.jars",false);
    ClassLoader parent=TestDynamicClassLoader.class.getClassLoader();
    DynamicClassLoader classLoader=new DynamicClassLoader(conf,parent);
    String className="TestLoadClassFromLocalPath";
    deleteClass(className);
    try {
      String folder=TEST_UTIL.getDataTestDir().toString();
      ClassLoaderTestHelper.buildJar(folder,className,null,ClassLoaderTestHelper.localDirPath(conf));
      classLoader.loadClass(className);
      fail("Should not be able to load class " + className);
    }
 catch (    ClassNotFoundException cnfe) {
    }
  }
  private void deleteClass(  String className) throws Exception {
    String jarFileName=className + ".jar";
    File file=new File(TEST_UTIL.getDataTestDir().toString(),jarFileName);
    file.delete();
    assertFalse("Should be deleted: " + file.getPath(),file.exists());
    file=new File(conf.get("hbase.dynamic.jars.dir"),jarFileName);
    file.delete();
    assertFalse("Should be deleted: " + file.getPath(),file.exists());
    file=new File(ClassLoaderTestHelper.localDirPath(conf),jarFileName);
    file.delete();
    assertFalse("Should be deleted: " + file.getPath(),file.exists());
  }
}
