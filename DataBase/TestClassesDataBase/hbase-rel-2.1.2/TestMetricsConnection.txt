@Category({ClientTests.class,MetricsTests.class,SmallTests.class}) public class TestMetricsConnection {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMetricsConnection.class);
  private static MetricsConnection METRICS;
  private static final ExecutorService BATCH_POOL=Executors.newFixedThreadPool(2);
  @BeforeClass public static void beforeClass(){
    ConnectionImplementation mocked=Mockito.mock(ConnectionImplementation.class);
    Mockito.when(mocked.toString()).thenReturn("mocked-connection");
    Mockito.when(mocked.getCurrentBatchPool()).thenReturn(BATCH_POOL);
    METRICS=new MetricsConnection(mocked);
  }
  @AfterClass public static void afterClass(){
    METRICS.shutdown();
  }
  @Test public void testStaticMetrics() throws IOException {
    final byte[] foo=Bytes.toBytes("foo");
    final RegionSpecifier region=RegionSpecifier.newBuilder().setValue(ByteString.EMPTY).setType(RegionSpecifierType.REGION_NAME).build();
    final int loop=5;
    for (int i=0; i < loop; i++) {
      METRICS.updateRpc(ClientService.getDescriptor().findMethodByName("Get"),GetRequest.getDefaultInstance(),MetricsConnection.newCallStats());
      METRICS.updateRpc(ClientService.getDescriptor().findMethodByName("Scan"),ScanRequest.getDefaultInstance(),MetricsConnection.newCallStats());
      METRICS.updateRpc(ClientService.getDescriptor().findMethodByName("Multi"),MultiRequest.getDefaultInstance(),MetricsConnection.newCallStats());
      METRICS.updateRpc(ClientService.getDescriptor().findMethodByName("Mutate"),MutateRequest.newBuilder().setMutation(ProtobufUtil.toMutation(MutationType.APPEND,new Append(foo))).setRegion(region).build(),MetricsConnection.newCallStats());
      METRICS.updateRpc(ClientService.getDescriptor().findMethodByName("Mutate"),MutateRequest.newBuilder().setMutation(ProtobufUtil.toMutation(MutationType.DELETE,new Delete(foo))).setRegion(region).build(),MetricsConnection.newCallStats());
      METRICS.updateRpc(ClientService.getDescriptor().findMethodByName("Mutate"),MutateRequest.newBuilder().setMutation(ProtobufUtil.toMutation(MutationType.INCREMENT,new Increment(foo))).setRegion(region).build(),MetricsConnection.newCallStats());
      METRICS.updateRpc(ClientService.getDescriptor().findMethodByName("Mutate"),MutateRequest.newBuilder().setMutation(ProtobufUtil.toMutation(MutationType.PUT,new Put(foo))).setRegion(region).build(),MetricsConnection.newCallStats());
    }
    for (    MetricsConnection.CallTracker t : new MetricsConnection.CallTracker[]{METRICS.getTracker,METRICS.scanTracker,METRICS.multiTracker,METRICS.appendTracker,METRICS.deleteTracker,METRICS.incrementTracker,METRICS.putTracker}) {
      assertEquals("Failed to invoke callTimer on " + t,loop,t.callTimer.getCount());
      assertEquals("Failed to invoke reqHist on " + t,loop,t.reqHist.getCount());
      assertEquals("Failed to invoke respHist on " + t,loop,t.respHist.getCount());
    }
    RatioGauge executorMetrics=(RatioGauge)METRICS.getMetricRegistry().getMetrics().get(METRICS.getExecutorPoolName());
    RatioGauge metaMetrics=(RatioGauge)METRICS.getMetricRegistry().getMetrics().get(METRICS.getMetaPoolName());
    assertEquals(Ratio.of(0,3).getValue(),executorMetrics.getValue(),0);
    assertEquals(Double.NaN,metaMetrics.getValue(),0);
  }
}
