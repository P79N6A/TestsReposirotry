@Category(MediumTests.class) public class TestFavoredNodeTableImport {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestFavoredNodeTableImport.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestFavoredNodeTableImport.class);
  private static final int SLAVES=3;
  private static final int REGION_NUM=20;
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static final Configuration conf=UTIL.getConfiguration();
  @After public void stopCluster() throws Exception {
    UTIL.cleanupTestDir();
    UTIL.shutdownMiniCluster();
  }
  @Test public void testTableCreation() throws Exception {
    conf.set(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,StochasticLoadBalancer.class.getName());
    LOG.info("Starting up cluster");
    UTIL.startMiniCluster(SLAVES);
    while (!UTIL.getMiniHBaseCluster().getMaster().isInitialized()) {
      Threads.sleep(1);
    }
    Admin admin=UTIL.getAdmin();
    admin.setBalancerRunning(false,true);
    String tableName="testFNImport";
    HTableDescriptor desc=new HTableDescriptor(TableName.valueOf(tableName));
    desc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
    admin.createTable(desc,Bytes.toBytes("a"),Bytes.toBytes("z"),REGION_NUM);
    UTIL.waitTableAvailable(desc.getTableName());
    LOG.info("Shutting down cluster");
    UTIL.shutdownMiniHBaseCluster();
    Thread.sleep(2000);
    LOG.info("Starting cluster again with FN Balancer");
    UTIL.getConfiguration().set(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,FavoredStochasticBalancer.class.getName());
    UTIL.restartHBaseCluster(SLAVES);
    while (!UTIL.getMiniHBaseCluster().getMaster().isInitialized()) {
      Threads.sleep(1);
    }
    admin=UTIL.getAdmin();
    UTIL.waitTableAvailable(desc.getTableName());
    FavoredNodesManager fnm=UTIL.getHBaseCluster().getMaster().getFavoredNodesManager();
    List<HRegionInfo> regionsOfTable=admin.getTableRegions(TableName.valueOf(tableName));
    for (    HRegionInfo rInfo : regionsOfTable) {
      Set<ServerName> favNodes=Sets.newHashSet(fnm.getFavoredNodes(rInfo));
      assertNotNull(favNodes);
      assertEquals("Required no of favored nodes not found.",FAVORED_NODES_NUM,favNodes.size());
      for (      ServerName fn : favNodes) {
        assertEquals("StartCode invalid for:" + fn,ServerName.NON_STARTCODE,fn.getStartcode());
      }
    }
  }
}
