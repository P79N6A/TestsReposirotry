@Category(MediumTests.class) public class TestCheckAndMutate {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCheckAndMutate.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final byte[] ROWKEY=Bytes.toBytes("12345");
  private static final byte[] FAMILY=Bytes.toBytes("cf");
  @Rule public TestName name=new TestName();
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.startMiniCluster();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  private Table createTable() throws IOException, InterruptedException {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    Table table=TEST_UTIL.createTable(tableName,FAMILY);
    TEST_UTIL.waitTableAvailable(tableName.getName(),5000);
    return table;
  }
  private void putOneRow(  Table table) throws IOException {
    Put put=new Put(ROWKEY);
    put.addColumn(FAMILY,Bytes.toBytes("A"),Bytes.toBytes("a"));
    put.addColumn(FAMILY,Bytes.toBytes("B"),Bytes.toBytes("b"));
    put.addColumn(FAMILY,Bytes.toBytes("C"),Bytes.toBytes("c"));
    table.put(put);
  }
  private void getOneRowAndAssertAllExist(  final Table table) throws IOException {
    Get get=new Get(ROWKEY);
    Result result=table.get(get);
    assertTrue("Column A value should be a",Bytes.toString(result.getValue(FAMILY,Bytes.toBytes("A"))).equals("a"));
    assertTrue("Column B value should be b",Bytes.toString(result.getValue(FAMILY,Bytes.toBytes("B"))).equals("b"));
    assertTrue("Column C value should be c",Bytes.toString(result.getValue(FAMILY,Bytes.toBytes("C"))).equals("c"));
  }
  private void getOneRowAndAssertAllButCExist(  final Table table) throws IOException {
    Get get=new Get(ROWKEY);
    Result result=table.get(get);
    assertTrue("Column A value should be a",Bytes.toString(result.getValue(FAMILY,Bytes.toBytes("A"))).equals("a"));
    assertTrue("Column B value should be b",Bytes.toString(result.getValue(FAMILY,Bytes.toBytes("B"))).equals("b"));
    assertTrue("Column C should not exist",result.getValue(FAMILY,Bytes.toBytes("C")) == null);
  }
  private RowMutations makeRowMutationsWithColumnCDeleted() throws IOException {
    RowMutations rm=new RowMutations(ROWKEY,2);
    Put put=new Put(ROWKEY);
    put.addColumn(FAMILY,Bytes.toBytes("A"),Bytes.toBytes("a"));
    put.addColumn(FAMILY,Bytes.toBytes("B"),Bytes.toBytes("b"));
    rm.add(put);
    Delete del=new Delete(ROWKEY);
    del.addColumn(FAMILY,Bytes.toBytes("C"));
    rm.add(del);
    return rm;
  }
  private RowMutations getBogusRowMutations() throws IOException {
    Put p=new Put(ROWKEY);
    byte[] value=new byte[0];
    p.addColumn(new byte[]{'b','o','g','u','s'},new byte[]{'A'},value);
    RowMutations rm=new RowMutations(ROWKEY);
    rm.add(p);
    return rm;
  }
  @Test public void testCheckAndMutate() throws Throwable {
    try (Table table=createTable()){
      putOneRow(table);
      getOneRowAndAssertAllExist(table);
      RowMutations rm=makeRowMutationsWithColumnCDeleted();
      boolean res=table.checkAndMutate(ROWKEY,FAMILY).qualifier(Bytes.toBytes("A")).ifEquals(Bytes.toBytes("a")).thenMutate(rm);
      assertTrue(res);
      getOneRowAndAssertAllButCExist(table);
      try {
        rm=getBogusRowMutations();
        table.checkAndMutate(ROWKEY,FAMILY).qualifier(Bytes.toBytes("A")).ifEquals(Bytes.toBytes("a")).thenMutate(rm);
        fail("Expected NoSuchColumnFamilyException");
      }
 catch (      RetriesExhaustedWithDetailsException e) {
        try {
          throw e.getCause(0);
        }
 catch (        NoSuchColumnFamilyException e1) {
        }
      }
    }
   }
  @Test public void testCheckAndMutateWithBuilder() throws Throwable {
    try (Table table=createTable()){
      putOneRow(table);
      getOneRowAndAssertAllExist(table);
      RowMutations rm=makeRowMutationsWithColumnCDeleted();
      boolean res=table.checkAndMutate(ROWKEY,FAMILY).qualifier(Bytes.toBytes("A")).ifEquals(Bytes.toBytes("a")).thenMutate(rm);
      assertTrue(res);
      getOneRowAndAssertAllButCExist(table);
      try {
        rm=getBogusRowMutations();
        table.checkAndMutate(ROWKEY,FAMILY).qualifier(Bytes.toBytes("A")).ifEquals(Bytes.toBytes("a")).thenMutate(rm);
        fail("Expected NoSuchColumnFamilyException");
      }
 catch (      RetriesExhaustedWithDetailsException e) {
        try {
          throw e.getCause(0);
        }
 catch (        NoSuchColumnFamilyException e1) {
        }
      }
    }
   }
}
