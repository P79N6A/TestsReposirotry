/** 
 * Fake 'server'. Implements the ClientService responding as though it were a 'server' (presumes a new ClientService.BlockingInterface made per server).
 */
static class FakeServer implements ClientService.BlockingInterface {
  private AtomicInteger multiInvocationsCount=new AtomicInteger(0);
  private final SortedMap<byte[],Pair<HRegionInfo,ServerName>> meta;
  private final AtomicLong sequenceids;
  private final long multiPause;
  private final int tooManyMultiRequests;
  FakeServer(  final Configuration c,  final SortedMap<byte[],Pair<HRegionInfo,ServerName>> meta,  final AtomicLong sequenceids){
    this.meta=meta;
    this.sequenceids=sequenceids;
    this.multiPause=c.getLong("hbase.test.multi.pause.when.done",0);
    this.tooManyMultiRequests=c.getInt("hbase.test.multi.too.many",3);
  }
  @Override public GetResponse get(  RpcController controller,  GetRequest request) throws ServiceException {
    boolean metaRegion=isMetaRegion(request.getRegion().getValue().toByteArray(),request.getRegion().getType());
    if (!metaRegion) {
      return doGetResponse(request);
    }
    return doMetaGetResponse(meta,request);
  }
  private GetResponse doGetResponse(  GetRequest request){
    ClientProtos.Result.Builder resultBuilder=ClientProtos.Result.newBuilder();
    ByteString row=request.getGet().getRow();
    resultBuilder.addCell(getStartCode(row));
    GetResponse.Builder builder=GetResponse.newBuilder();
    builder.setResult(resultBuilder.build());
    return builder.build();
  }
  @Override public MutateResponse mutate(  RpcController controller,  MutateRequest request) throws ServiceException {
    throw new NotImplementedException(HConstants.NOT_IMPLEMENTED);
  }
  @Override public ScanResponse scan(  RpcController controller,  ScanRequest request) throws ServiceException {
    return doMetaScanResponse(meta,sequenceids,request);
  }
  @Override public BulkLoadHFileResponse bulkLoadHFile(  RpcController controller,  BulkLoadHFileRequest request) throws ServiceException {
    throw new NotImplementedException(HConstants.NOT_IMPLEMENTED);
  }
  @Override public CoprocessorServiceResponse execService(  RpcController controller,  CoprocessorServiceRequest request) throws ServiceException {
    throw new NotImplementedException(HConstants.NOT_IMPLEMENTED);
  }
  @Override public MultiResponse multi(  RpcController controller,  MultiRequest request) throws ServiceException {
    int concurrentInvocations=this.multiInvocationsCount.incrementAndGet();
    try {
      if (concurrentInvocations >= tooManyMultiRequests) {
        throw new ServiceException(new RegionTooBusyException("concurrentInvocations=" + concurrentInvocations));
      }
      Threads.sleep(multiPause);
      return doMultiResponse(meta,sequenceids,request);
    }
  finally {
      this.multiInvocationsCount.decrementAndGet();
    }
  }
  @Override public CoprocessorServiceResponse execRegionServerService(  RpcController controller,  CoprocessorServiceRequest request) throws ServiceException {
    throw new NotImplementedException(HConstants.NOT_IMPLEMENTED);
  }
  @Override public PrepareBulkLoadResponse prepareBulkLoad(  RpcController controller,  PrepareBulkLoadRequest request) throws ServiceException {
    throw new NotImplementedException(HConstants.NOT_IMPLEMENTED);
  }
  @Override public CleanupBulkLoadResponse cleanupBulkLoad(  RpcController controller,  CleanupBulkLoadRequest request) throws ServiceException {
    throw new NotImplementedException(HConstants.NOT_IMPLEMENTED);
  }
}
