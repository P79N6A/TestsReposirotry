public static class StuckStateMachineProcedure extends ProcedureTestingUtility.NoopStateMachineProcedure<TestProcEnv,StuckStateMachineState> {
  private AtomicBoolean stop=new AtomicBoolean(false);
  public StuckStateMachineProcedure(){
    super();
  }
  public StuckStateMachineProcedure(  TestProcEnv env,  StuckStateMachineState initialState){
    super(env,initialState);
  }
  @Override protected Flow executeFromState(  TestProcEnv env,  StuckStateMachineState tState) throws ProcedureSuspendedException, ProcedureYieldException, InterruptedException {
switch (tState) {
case START:
      LOG.info("PHASE 1: START");
    setNextState(StuckStateMachineState.THEN);
  return Flow.HAS_MORE_STATE;
case THEN:
if (stop.get()) {
  setNextState(StuckStateMachineState.END);
}
return Flow.HAS_MORE_STATE;
case END:
return Flow.NO_MORE_STATE;
default :
throw new UnsupportedOperationException("unhandled state=" + tState);
}
}
@Override protected StuckStateMachineState getState(int stateId){
return StuckStateMachineState.values()[stateId];
}
@Override protected int getStateId(StuckStateMachineState tState){
return tState.ordinal();
}
}
