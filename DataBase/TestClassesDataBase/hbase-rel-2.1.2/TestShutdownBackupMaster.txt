/** 
 * Test to confirm that we will not hang when stop a backup master which is trying to become the active master. See HBASE-19838
 */
@Category({MasterTests.class,MediumTests.class}) public class TestShutdownBackupMaster {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestShutdownBackupMaster.class);
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static volatile CountDownLatch ARRIVE;
  private static volatile CountDownLatch CONTINUE;
public static final class MockHMaster extends HMaster {
    public MockHMaster(    Configuration conf) throws IOException, KeeperException {
      super(conf);
    }
    @Override protected void initClusterSchemaService() throws IOException, InterruptedException {
      if (ARRIVE != null) {
        ARRIVE.countDown();
        CONTINUE.await();
      }
      super.initClusterSchemaService();
    }
  }
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    UTIL.getConfiguration().setClass(HConstants.MASTER_IMPL,MockHMaster.class,HMaster.class);
    UTIL.startMiniCluster(2,2);
    UTIL.waitUntilAllSystemRegionsAssigned();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  @Test public void testShutdownWhileBecomingActive() throws InterruptedException {
    MiniHBaseCluster cluster=UTIL.getHBaseCluster();
    HMaster activeMaster=null;
    HMaster backupMaster=null;
    for (    MasterThread t : cluster.getMasterThreads()) {
      if (t.getMaster().isActiveMaster()) {
        activeMaster=t.getMaster();
      }
 else {
        backupMaster=t.getMaster();
      }
    }
    assertNotNull(activeMaster);
    assertNotNull(backupMaster);
    ARRIVE=new CountDownLatch(1);
    CONTINUE=new CountDownLatch(1);
    activeMaster.abort("Aborting active master for test");
    ARRIVE.await();
    cluster.getRegionServerThreads().stream().map(t -> t.getRegionServer()).forEachOrdered(rs -> rs.abort("Aborting RS for test"));
    CONTINUE.countDown();
  }
}
