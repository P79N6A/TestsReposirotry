public static class MyCompactingMemStore extends CompactingMemStore {
  private static final AtomicBoolean START_TEST=new AtomicBoolean(false);
  private final CountDownLatch getScannerLatch=new CountDownLatch(1);
  private final CountDownLatch snapshotLatch=new CountDownLatch(1);
  public MyCompactingMemStore(  Configuration conf,  CellComparatorImpl c,  HStore store,  RegionServicesForStores regionServices,  MemoryCompactionPolicy compactionPolicy) throws IOException {
    super(conf,c,store,regionServices,compactionPolicy);
  }
  @Override protected List<KeyValueScanner> createList(  int capacity){
    if (START_TEST.get()) {
      try {
        getScannerLatch.countDown();
        snapshotLatch.await();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    return new ArrayList<>(capacity);
  }
  @Override protected void pushActiveToPipeline(  MutableSegment active){
    if (START_TEST.get()) {
      try {
        getScannerLatch.await();
      }
 catch (      InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    super.pushActiveToPipeline(active);
    if (START_TEST.get()) {
      snapshotLatch.countDown();
    }
  }
}
