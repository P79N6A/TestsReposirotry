public static class ByteArrayCacheable implements Cacheable {
  static final CacheableDeserializer<Cacheable> blockDeserializer=new CacheableDeserializer<Cacheable>(){
    @Override public Cacheable deserialize(    ByteBuff b) throws IOException {
      int len=b.getInt();
      Thread.yield();
      byte buf[]=new byte[len];
      b.get(buf);
      return new ByteArrayCacheable(buf);
    }
    @Override public int getDeserialiserIdentifier(){
      return deserializerIdentifier;
    }
    @Override public Cacheable deserialize(    ByteBuff b,    boolean reuse,    MemoryType memType) throws IOException {
      return deserialize(b);
    }
  }
;
  final byte[] buf;
  public ByteArrayCacheable(  byte[] buf){
    this.buf=buf;
  }
  @Override public long heapSize(){
    return 4L + buf.length;
  }
  @Override public int getSerializedLength(){
    return 4 + buf.length;
  }
  @Override public void serialize(  ByteBuffer destination,  boolean includeNextBlockMetadata){
    destination.putInt(buf.length);
    Thread.yield();
    destination.put(buf);
    destination.rewind();
  }
  @Override public CacheableDeserializer<Cacheable> getDeserializer(){
    return blockDeserializer;
  }
  private static final int deserializerIdentifier;
static {
    deserializerIdentifier=CacheableDeserializerIdManager.registerDeserializer(blockDeserializer);
  }
  @Override public BlockType getBlockType(){
    return BlockType.DATA;
  }
  @Override public MemoryType getMemoryType(){
    return MemoryType.EXCLUSIVE;
  }
}
