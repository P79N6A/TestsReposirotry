@Category(SmallTests.class) public class TestMobFileName {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMobFileName.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private String uuid;
  private Date date;
  private String dateStr;
  private byte[] startKey;
  @Before public void setUp(){
    Random random=new Random();
    uuid=TEST_UTIL.getRandomUUID().toString().replaceAll("-","");
    date=new Date();
    dateStr=MobUtils.formatDate(date);
    startKey=Bytes.toBytes(random.nextInt());
  }
  @Test public void testHashCode(){
    assertEquals(MobFileName.create(startKey,dateStr,uuid).hashCode(),MobFileName.create(startKey,dateStr,uuid).hashCode());
    assertNotSame(MobFileName.create(startKey,dateStr,uuid),MobFileName.create(startKey,dateStr,uuid));
  }
  @Test public void testCreate(){
    MobFileName mobFileName=MobFileName.create(startKey,dateStr,uuid);
    assertEquals(mobFileName,MobFileName.create(mobFileName.getFileName()));
  }
  @Test public void testGet(){
    MobFileName mobFileName=MobFileName.create(startKey,dateStr,uuid);
    assertEquals(MD5Hash.getMD5AsHex(startKey,0,startKey.length),mobFileName.getStartKey());
    assertEquals(dateStr,mobFileName.getDate());
    assertEquals(mobFileName.getFileName(),MD5Hash.getMD5AsHex(startKey,0,startKey.length) + dateStr + uuid);
  }
  @Test public void testEquals(){
    MobFileName mobFileName=MobFileName.create(startKey,dateStr,uuid);
    assertTrue(mobFileName.equals(mobFileName));
    assertFalse(mobFileName.equals(this));
    assertTrue(mobFileName.equals(MobFileName.create(startKey,dateStr,uuid)));
  }
}
