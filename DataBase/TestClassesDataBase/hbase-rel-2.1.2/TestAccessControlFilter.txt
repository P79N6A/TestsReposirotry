@Category({SecurityTests.class,LargeTests.class}) public class TestAccessControlFilter extends SecureTestUtil {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAccessControlFilter.class);
  @Rule public TestName name=new TestName();
  private static HBaseTestingUtility TEST_UTIL;
  private static User READER;
  private static User LIMITED;
  private static User DENIED;
  private static TableName TABLE;
  private static byte[] FAMILY=Bytes.toBytes("f1");
  private static byte[] PRIVATE_COL=Bytes.toBytes("private");
  private static byte[] PUBLIC_COL=Bytes.toBytes("public");
  @Before public void setup(){
    TABLE=TableName.valueOf(name.getMethodName());
  }
  @BeforeClass public static void setupBeforeClass() throws Exception {
    TEST_UTIL=new HBaseTestingUtility();
    Configuration conf=TEST_UTIL.getConfiguration();
    conf.setInt(HConstants.REGION_SERVER_HIGH_PRIORITY_HANDLER_COUNT,10);
    enableSecurity(conf);
    verifyConfiguration(conf);
    conf.setBoolean(AccessControlConstants.CF_ATTRIBUTE_EARLY_OUT,false);
    TEST_UTIL.startMiniCluster();
    TEST_UTIL.waitTableEnabled(AccessControlLists.ACL_TABLE_NAME.getName(),50000);
    READER=User.createUserForTesting(conf,"reader",new String[0]);
    LIMITED=User.createUserForTesting(conf,"limited",new String[0]);
    DENIED=User.createUserForTesting(conf,"denied",new String[0]);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testQualifierAccess() throws Exception {
    final Table table=createTable(TEST_UTIL,TABLE,new byte[][]{FAMILY});
    try {
      doQualifierAccess(table);
    }
  finally {
      table.close();
    }
  }
  private void doQualifierAccess(  final Table table) throws Exception {
    SecureTestUtil.grantOnTable(TEST_UTIL,READER.getShortName(),TABLE,null,null,Permission.Action.READ);
    SecureTestUtil.grantOnTable(TEST_UTIL,LIMITED.getShortName(),TABLE,FAMILY,PUBLIC_COL,Permission.Action.READ);
    List<Put> puts=new ArrayList<>(100);
    for (int i=0; i < 100; i++) {
      Put p=new Put(Bytes.toBytes(i));
      p.addColumn(FAMILY,PRIVATE_COL,Bytes.toBytes("secret " + i));
      p.addColumn(FAMILY,PUBLIC_COL,Bytes.toBytes("info " + i));
      puts.add(p);
    }
    table.put(puts);
    READER.runAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        Configuration conf=new Configuration(TEST_UTIL.getConfiguration());
        conf.set("testkey",TEST_UTIL.getRandomUUID().toString());
        Connection connection=ConnectionFactory.createConnection(conf);
        Table t=connection.getTable(TABLE);
        try {
          ResultScanner rs=t.getScanner(new Scan());
          int rowcnt=0;
          for (          Result r : rs) {
            rowcnt++;
            int rownum=Bytes.toInt(r.getRow());
            assertTrue(r.containsColumn(FAMILY,PRIVATE_COL));
            assertEquals("secret " + rownum,Bytes.toString(r.getValue(FAMILY,PRIVATE_COL)));
            assertTrue(r.containsColumn(FAMILY,PUBLIC_COL));
            assertEquals("info " + rownum,Bytes.toString(r.getValue(FAMILY,PUBLIC_COL)));
          }
          assertEquals("Expected 100 rows returned",100,rowcnt);
          return null;
        }
  finally {
          t.close();
          connection.close();
        }
      }
    }
);
    LIMITED.runAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        Configuration conf=new Configuration(TEST_UTIL.getConfiguration());
        conf.set("testkey",TEST_UTIL.getRandomUUID().toString());
        Connection connection=ConnectionFactory.createConnection(conf);
        Table t=connection.getTable(TABLE);
        try {
          ResultScanner rs=t.getScanner(new Scan());
          int rowcnt=0;
          for (          Result r : rs) {
            rowcnt++;
            int rownum=Bytes.toInt(r.getRow());
            assertFalse(r.containsColumn(FAMILY,PRIVATE_COL));
            assertTrue(r.containsColumn(FAMILY,PUBLIC_COL));
            assertEquals("info " + rownum,Bytes.toString(r.getValue(FAMILY,PUBLIC_COL)));
          }
          assertEquals("Expected 100 rows returned",100,rowcnt);
          return null;
        }
  finally {
          t.close();
          connection.close();
        }
      }
    }
);
    DENIED.runAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        Configuration conf=new Configuration(TEST_UTIL.getConfiguration());
        conf.set("testkey",TEST_UTIL.getRandomUUID().toString());
        Connection connection=ConnectionFactory.createConnection(conf);
        Table t=connection.getTable(TABLE);
        try {
          ResultScanner rs=t.getScanner(new Scan());
          int rowcnt=0;
          for (          Result r : rs) {
            rowcnt++;
            int rownum=Bytes.toInt(r.getRow());
            assertFalse(r.containsColumn(FAMILY,PRIVATE_COL));
            assertTrue(r.containsColumn(FAMILY,PUBLIC_COL));
            assertEquals("info " + rownum,Bytes.toString(r.getValue(FAMILY,PUBLIC_COL)));
          }
          assertEquals("Expected 0 rows returned",0,rowcnt);
          return null;
        }
  finally {
          t.close();
          connection.close();
        }
      }
    }
);
  }
}
