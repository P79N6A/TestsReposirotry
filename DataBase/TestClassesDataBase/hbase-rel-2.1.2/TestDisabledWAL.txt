@Category({RegionServerTests.class,MediumTests.class}) public class TestDisabledWAL {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestDisabledWAL.class);
  @Rule public TestName name=new TestName();
  private static final Logger LOG=LoggerFactory.getLogger(TestDisabledWAL.class);
  static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private Table table;
  private TableName tableName;
  private byte[] fam=Bytes.toBytes("f1");
  @BeforeClass public static void beforeClass() throws Exception {
    Configuration conf=TEST_UTIL.getConfiguration();
    conf.setBoolean("hbase.regionserver.hlog.enabled",false);
    try {
      TEST_UTIL.startMiniCluster();
    }
 catch (    RuntimeException|IOException e) {
      LOG.error("Master failed to start.",e);
      fail("Failed to start cluster. Reason being: " + e.getCause().getMessage());
    }
  }
  @AfterClass public static void afterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Before public void setup() throws Exception {
    tableName=TableName.valueOf(name.getMethodName().replaceAll("[^a-zA-Z0-9]","_"));
    LOG.info("Creating table " + tableName);
    table=TEST_UTIL.createTable(tableName,fam);
  }
  @After public void cleanup() throws Exception {
    LOG.info("Deleting table " + tableName);
    TEST_UTIL.deleteTable(tableName);
  }
  @Test public void testDisabledWAL() throws Exception {
    LOG.info("Writing data to table " + tableName);
    Put p=new Put(Bytes.toBytes("row"));
    p.addColumn(fam,Bytes.toBytes("qual"),Bytes.toBytes("val"));
    table.put(p);
    LOG.info("Flushing table " + tableName);
    TEST_UTIL.flush(tableName);
    LOG.info("Getting data from table " + tableName);
    Get get=new Get(Bytes.toBytes("row"));
    Result result=table.get(get);
    assertNotNull(result.getValue(fam,Bytes.toBytes("qual")));
  }
}
