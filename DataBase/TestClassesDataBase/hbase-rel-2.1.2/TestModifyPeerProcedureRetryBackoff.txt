@Category({MasterTests.class,LargeTests.class}) public class TestModifyPeerProcedureRetryBackoff {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestModifyPeerProcedureRetryBackoff.class);
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static boolean FAIL=true;
public static class TestModifyPeerProcedure extends ModifyPeerProcedure {
    public TestModifyPeerProcedure(){
    }
    public TestModifyPeerProcedure(    String peerId){
      super(peerId);
    }
    @Override public PeerOperationType getPeerOperationType(){
      return PeerOperationType.ADD;
    }
    private void tryFail() throws ReplicationException {
synchronized (TestModifyPeerProcedureRetryBackoff.class) {
        if (FAIL) {
          throw new ReplicationException("Inject error");
        }
        FAIL=true;
      }
    }
    @Override protected <T extends Procedure<MasterProcedureEnv>>void addChildProcedure(    @SuppressWarnings("unchecked") T... subProcedure){
    }
    @Override protected PeerModificationState nextStateAfterRefresh(){
      return PeerModificationState.SERIAL_PEER_REOPEN_REGIONS;
    }
    @Override protected boolean enablePeerBeforeFinish(){
      return true;
    }
    @Override protected void updateLastPushedSequenceIdForSerialPeer(    MasterProcedureEnv env) throws IOException, ReplicationException {
      tryFail();
    }
    @Override protected void reopenRegions(    MasterProcedureEnv env) throws IOException {
      try {
        tryFail();
      }
 catch (      ReplicationException e) {
        throw new IOException(e);
      }
    }
    @Override protected void enablePeer(    MasterProcedureEnv env) throws ReplicationException {
      tryFail();
    }
    @Override protected void prePeerModification(    MasterProcedureEnv env) throws IOException, ReplicationException {
      tryFail();
    }
    @Override protected void updatePeerStorage(    MasterProcedureEnv env) throws ReplicationException {
      tryFail();
    }
    @Override protected void postPeerModification(    MasterProcedureEnv env) throws IOException, ReplicationException {
      tryFail();
    }
  }
  @BeforeClass public static void setUp() throws Exception {
    UTIL.startMiniCluster(1);
  }
  @AfterClass public static void tearDown() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  private void assertBackoffIncrease() throws IOException, InterruptedException {
    ProcedureTestUtil.waitUntilProcedureWaitingTimeout(UTIL,TestModifyPeerProcedure.class,30000);
    ProcedureTestUtil.waitUntilProcedureTimeoutIncrease(UTIL,TestModifyPeerProcedure.class,2);
synchronized (TestModifyPeerProcedureRetryBackoff.class) {
      FAIL=false;
    }
    UTIL.waitFor(30000,() -> FAIL);
  }
  @Test public void test() throws IOException, InterruptedException {
    ProcedureExecutor<MasterProcedureEnv> procExec=UTIL.getMiniHBaseCluster().getMaster().getMasterProcedureExecutor();
    long procId=procExec.submitProcedure(new TestModifyPeerProcedure("1"));
    assertBackoffIncrease();
    assertBackoffIncrease();
    assertBackoffIncrease();
    assertBackoffIncrease();
    assertBackoffIncrease();
    assertBackoffIncrease();
    UTIL.waitFor(30000,() -> procExec.isFinished(procId));
  }
}
