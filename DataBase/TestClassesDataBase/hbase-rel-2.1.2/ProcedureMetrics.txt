public static class ProcedureMetrics extends SequentialProcedure<TestProcEnv> {
  public static long beginCount=0;
  public static long successCount=0;
  public static long failedCount=0;
  private boolean success;
  private boolean yield;
  private int yieldCount;
  private int yieldNum;
  private ProcedureMetrics[] subprocs=null;
  public ProcedureMetrics(){
    this(true);
  }
  public ProcedureMetrics(  boolean success){
    this(success,true);
  }
  public ProcedureMetrics(  boolean success,  boolean yield){
    this(success,yield,1);
  }
  public ProcedureMetrics(  boolean success,  boolean yield,  int yieldCount){
    this(success,yield,yieldCount,null);
  }
  public ProcedureMetrics(  boolean success,  ProcedureMetrics[] subprocs){
    this(success,false,1,subprocs);
  }
  public ProcedureMetrics(  boolean success,  boolean yield,  int yieldCount,  ProcedureMetrics[] subprocs){
    this.success=success;
    this.yield=yield;
    this.yieldCount=yieldCount;
    this.subprocs=subprocs;
    yieldNum=0;
  }
  @Override protected void updateMetricsOnSubmit(  TestProcEnv env){
    beginCount++;
  }
  @Override protected Procedure[] execute(  TestProcEnv env) throws ProcedureYieldException, ProcedureSuspendedException, InterruptedException {
    if (this.yield) {
      if (yieldNum < yieldCount) {
        yieldNum++;
        throw new ProcedureYieldException();
      }
    }
    if (!this.success) {
      setFailure("Failed",new InterruptedException("Failed"));
      return null;
    }
    return subprocs;
  }
  @Override protected void rollback(  TestProcEnv env) throws IOException, InterruptedException {
  }
  @Override protected boolean abort(  TestProcEnv env){
    return false;
  }
  @Override protected void updateMetricsOnFinish(  final TestProcEnv env,  final long time,  boolean success){
    if (success) {
      successCount++;
    }
 else {
      failedCount++;
    }
  }
}
