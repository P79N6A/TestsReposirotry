@Category({CoprocessorTests.class,SmallTests.class}) public class TestRegionObserverStacking extends TestCase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRegionObserverStacking.class);
  private static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  static final Path DIR=TEST_UTIL.getDataTestDir();
public static class ObserverA implements RegionCoprocessor, RegionObserver {
    long id;
    @Override public Optional<RegionObserver> getRegionObserver(){
      return Optional.of(this);
    }
    @Override public void postPut(    final ObserverContext<RegionCoprocessorEnvironment> c,    final Put put,    final WALEdit edit,    final Durability durability) throws IOException {
      id=System.currentTimeMillis();
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
public static class ObserverB implements RegionCoprocessor, RegionObserver {
    long id;
    @Override public Optional<RegionObserver> getRegionObserver(){
      return Optional.of(this);
    }
    @Override public void postPut(    final ObserverContext<RegionCoprocessorEnvironment> c,    final Put put,    final WALEdit edit,    final Durability durability) throws IOException {
      id=System.currentTimeMillis();
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
public static class ObserverC implements RegionCoprocessor, RegionObserver {
    long id;
    @Override public Optional<RegionObserver> getRegionObserver(){
      return Optional.of(this);
    }
    @Override public void postPut(    final ObserverContext<RegionCoprocessorEnvironment> c,    final Put put,    final WALEdit edit,    final Durability durability) throws IOException {
      id=System.currentTimeMillis();
      try {
        Thread.sleep(10);
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  HRegion initHRegion(  byte[] tableName,  String callingMethod,  Configuration conf,  byte[]... families) throws IOException {
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(tableName));
    for (    byte[] family : families) {
      htd.addFamily(new HColumnDescriptor(family));
    }
    ChunkCreator.initialize(MemStoreLABImpl.CHUNK_SIZE_DEFAULT,false,0,0,0,null);
    HRegionInfo info=new HRegionInfo(htd.getTableName(),null,null,false);
    Path path=new Path(DIR + callingMethod);
    HRegion r=HBaseTestingUtility.createRegionAndWAL(info,path,conf,htd);
    RegionCoprocessorHost host=new RegionCoprocessorHost(r,Mockito.mock(RegionServerServices.class),conf);
    r.setCoprocessorHost(host);
    return r;
  }
  public void testRegionObserverStacking() throws Exception {
    byte[] ROW=Bytes.toBytes("testRow");
    byte[] TABLE=Bytes.toBytes(this.getClass().getSimpleName());
    byte[] A=Bytes.toBytes("A");
    byte[][] FAMILIES=new byte[][]{A};
    Configuration conf=TEST_UTIL.getConfiguration();
    HRegion region=initHRegion(TABLE,getClass().getName(),conf,FAMILIES);
    RegionCoprocessorHost h=region.getCoprocessorHost();
    h.load(ObserverA.class,Coprocessor.PRIORITY_HIGHEST,conf);
    h.load(ObserverB.class,Coprocessor.PRIORITY_USER,conf);
    h.load(ObserverC.class,Coprocessor.PRIORITY_LOWEST,conf);
    Put put=new Put(ROW);
    put.addColumn(A,A,A);
    region.put(put);
    Coprocessor c=h.findCoprocessor(ObserverA.class.getName());
    long idA=((ObserverA)c).id;
    c=h.findCoprocessor(ObserverB.class.getName());
    long idB=((ObserverB)c).id;
    c=h.findCoprocessor(ObserverC.class.getName());
    long idC=((ObserverC)c).id;
    assertTrue(idA < idB);
    assertTrue(idB < idC);
    HBaseTestingUtility.closeRegionAndWAL(region);
  }
}
