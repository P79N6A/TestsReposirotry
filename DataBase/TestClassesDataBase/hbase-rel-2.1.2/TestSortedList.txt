@Category({MiscTests.class,SmallTests.class}) public class TestSortedList {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSortedList.class);
static class StringComparator implements Comparator<String> {
    @Override public int compare(    String o1,    String o2){
      return o1.compareTo(o2);
    }
  }
  @Test public void testSorting() throws Exception {
    SortedList<String> list=new SortedList<>(new StringComparator());
    list.add("c");
    list.add("d");
    list.add("a");
    list.add("b");
    assertEquals(4,list.size());
    assertArrayEquals(new String[]{"a","b","c","d"},list.toArray(new String[4]));
    list.add("c");
    assertEquals(5,list.size());
    assertArrayEquals(new String[]{"a","b","c","c","d"},list.toArray(new String[5]));
    list.remove("b");
    assertEquals(4,list.size());
    assertArrayEquals(new String[]{"a","c","c","d"},list.toArray(new String[4]));
    list.remove("c");
    assertEquals(3,list.size());
    assertArrayEquals(new String[]{"a","c","d"},list.toArray(new String[3]));
    list.remove("a");
    assertEquals(2,list.size());
    assertArrayEquals(new String[]{"c","d"},list.toArray(new String[2]));
  }
  @Test public void testReadOnlyIterators() throws Exception {
    SortedList<String> list=new SortedList<>(Lists.newArrayList("a","b","c","d","e"),new StringComparator());
    Iterator<String> i=list.iterator();
    i.next();
    try {
      i.remove();
      fail("Iterator should have thrown an exception");
    }
 catch (    UnsupportedOperationException e) {
    }
    ListIterator<String> li=list.listIterator();
    li.next();
    try {
      li.add("a");
      fail("Iterator should have thrown an exception");
    }
 catch (    UnsupportedOperationException e) {
    }
    try {
      li.set("b");
      fail("Iterator should have thrown an exception");
    }
 catch (    UnsupportedOperationException e) {
    }
    try {
      li.remove();
      fail("Iterator should have thrown an exception");
    }
 catch (    UnsupportedOperationException e) {
    }
  }
  @Test public void testIteratorIsolation() throws Exception {
    SortedList<String> list=new SortedList<>(Lists.newArrayList("a","b","c","d","e"),new StringComparator());
    Iterator<String> iter=list.iterator();
    list.remove("c");
    boolean found=false;
    while (iter.hasNext() && !found) {
      found="c".equals(iter.next());
    }
    assertTrue(found);
    iter=list.iterator();
    found=false;
    while (iter.hasNext() && !found) {
      found="c".equals(iter.next());
    }
    assertFalse(found);
    iter=list.iterator();
    list.add("f");
    found=false;
    while (iter.hasNext() && !found) {
      String next=iter.next();
      found="f".equals(next);
    }
    assertFalse(found);
    iter=list.iterator();
    list.addAll(Lists.newArrayList("g","h","i"));
    found=false;
    while (iter.hasNext() && !found) {
      String next=iter.next();
      found="g".equals(next) || "h".equals(next) || "i".equals(next);
    }
    assertFalse(found);
    iter=list.iterator();
    list.clear();
    assertEquals(0,list.size());
    int size=0;
    while (iter.hasNext()) {
      iter.next();
      size++;
    }
    assertTrue(size > 0);
  }
  @Test public void testRandomAccessIsolation() throws Exception {
    SortedList<String> list=new SortedList<>(Lists.newArrayList("a","b","c"),new StringComparator());
    List<String> innerList=list.get();
    assertEquals("a",innerList.get(0));
    assertEquals("b",innerList.get(1));
    list.clear();
    assertEquals("c",innerList.get(2));
  }
}
