/** 
 * HBASE-19496 noticed that the RegionLoad/ServerLoad may be corrupted if rpc server reuses the bytebuffer backed, so this test call the Admin#getLastMajorCompactionTimestamp() to invoke HMaster to iterate all stored server/region loads.
 */
@RunWith(Parameterized.class) @Category({MediumTests.class,ClientTests.class}) public class TestServerLoadDurability {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestServerLoadDurability.class);
  private static final byte[] FAMILY=Bytes.toBytes("testFamily");
  @Parameterized.Parameter public Configuration conf;
  @Parameterized.Parameters public static final Collection<Object[]> parameters(){
    List<Object[]> configurations=new ArrayList<>();
    configurations.add(new Object[]{createConfigurationForSimpleRpcServer()});
    configurations.add(new Object[]{createConfigurationForNettyRpcServer()});
    return configurations;
  }
  private static Configuration createConfigurationForSimpleRpcServer(){
    Configuration conf=HBaseConfiguration.create();
    conf.set(RpcServerFactory.CUSTOM_RPC_SERVER_IMPL_CONF_KEY,SimpleRpcServer.class.getName());
    conf.setInt(ByteBufferPool.BUFFER_SIZE_KEY,20);
    return conf;
  }
  private static Configuration createConfigurationForNettyRpcServer(){
    Configuration conf=HBaseConfiguration.create();
    conf.set(RpcServerFactory.CUSTOM_RPC_SERVER_IMPL_CONF_KEY,NettyRpcServer.class.getName());
    return conf;
  }
  protected HBaseTestingUtility utility;
  protected Connection conn;
  protected Admin admin;
  @Rule public TestName testName=new TestName();
  protected TableName tableName;
  @Before public void setUp() throws Exception {
    utility=new HBaseTestingUtility(conf);
    utility.startMiniCluster(2);
    conn=ConnectionFactory.createConnection(utility.getConfiguration());
    admin=conn.getAdmin();
    String methodName=testName.getMethodName();
    tableName=TableName.valueOf(methodName.substring(0,methodName.length() - 3));
  }
  @After public void tearDown() throws Exception {
    utility.shutdownMiniCluster();
  }
  @Test public void testCompactionTimestamps() throws Exception {
    createTableWithDefaultConf(tableName);
    try (Table table=conn.getTable(tableName)){
      long ts=admin.getLastMajorCompactionTimestamp(tableName);
    }
   }
  private void createTableWithDefaultConf(  TableName tableName) throws IOException {
    TableDescriptorBuilder builder=TableDescriptorBuilder.newBuilder(tableName);
    builder.setColumnFamily(ColumnFamilyDescriptorBuilder.of(FAMILY));
    admin.createTable(builder.build());
  }
}
