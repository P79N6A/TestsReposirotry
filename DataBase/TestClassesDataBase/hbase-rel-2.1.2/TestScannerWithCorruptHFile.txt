/** 
 * Tests a scanner on a corrupt hfile.
 */
@Category(MediumTests.class) public class TestScannerWithCorruptHFile {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestScannerWithCorruptHFile.class);
  @Rule public TestName name=new TestName();
  private static final byte[] FAMILY_NAME=Bytes.toBytes("f");
  private final static HBaseTestingUtility TEST_UTIL=HBaseTestingUtility.createLocalHTU();
  @BeforeClass public static void setup() throws Exception {
    TEST_UTIL.startMiniCluster(1);
  }
  @AfterClass public static void tearDown() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
public static class CorruptHFileCoprocessor implements RegionCoprocessor, RegionObserver {
    @Override public Optional<RegionObserver> getRegionObserver(){
      return Optional.of(this);
    }
    @Override public boolean preScannerNext(    ObserverContext<RegionCoprocessorEnvironment> e,    InternalScanner s,    List<Result> results,    int limit,    boolean hasMore) throws IOException {
      throw new CorruptHFileException("For test");
    }
  }
  @Test(expected=DoNotRetryIOException.class) public void testScanOnCorruptHFile() throws IOException {
    TableName tableName=TableName.valueOf(name.getMethodName());
    HTableDescriptor htd=new HTableDescriptor(tableName);
    htd.addCoprocessor(CorruptHFileCoprocessor.class.getName());
    htd.addFamily(new HColumnDescriptor(FAMILY_NAME));
    Table table=TEST_UTIL.createTable(htd,null);
    try {
      loadTable(table,1);
      scan(table);
    }
  finally {
      table.close();
    }
  }
  private void loadTable(  Table table,  int numRows) throws IOException {
    for (int i=0; i < numRows; ++i) {
      byte[] row=Bytes.toBytes(i);
      Put put=new Put(row);
      put.setDurability(Durability.SKIP_WAL);
      put.addColumn(FAMILY_NAME,null,row);
      table.put(put);
    }
  }
  private void scan(  Table table) throws IOException {
    Scan scan=new Scan();
    scan.setCaching(1);
    scan.setCacheBlocks(false);
    ResultScanner scanner=table.getScanner(scan);
    try {
      scanner.next();
    }
  finally {
      scanner.close();
    }
  }
}
