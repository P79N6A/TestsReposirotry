/** 
 * Tests the boot order indifference between regionserver and master
 */
@Category({MiscTests.class,MediumTests.class}) public class TestClusterBootOrder {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestClusterBootOrder.class);
  private static final long SLEEP_INTERVAL=1000;
  private static final long SLEEP_TIME=4000;
  private HBaseTestingUtility testUtil;
  private LocalHBaseCluster cluster;
  private RegionServerThread rs;
  private MasterThread master;
  @Before public void setUp() throws Exception {
    testUtil=new HBaseTestingUtility();
    testUtil.startMiniDFSCluster(1);
    testUtil.startMiniZKCluster(1);
    testUtil.createRootDir();
    cluster=new LocalHBaseCluster(testUtil.getConfiguration(),0,0);
  }
  @After public void tearDown() throws Exception {
    cluster.shutdown();
    cluster.join();
    testUtil.shutdownMiniZKCluster();
    testUtil.shutdownMiniDFSCluster();
  }
  private void startRegionServer() throws Exception {
    rs=cluster.addRegionServer();
    rs.start();
    for (int i=0; i * SLEEP_INTERVAL < SLEEP_TIME; i++) {
      Thread.sleep(SLEEP_INTERVAL);
      assertTrue(rs.isAlive());
    }
  }
  private void startMaster() throws Exception {
    master=cluster.addMaster();
    master.start();
    for (int i=0; i * SLEEP_INTERVAL < SLEEP_TIME; i++) {
      Thread.sleep(SLEEP_INTERVAL);
      assertTrue(master.isAlive());
    }
  }
  private void waitForClusterOnline(){
    while (true) {
      if (master.getMaster().isInitialized()) {
        break;
      }
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException ignored) {
      }
    }
    rs.waitForServerOnline();
  }
  /** 
 * Tests launching the cluster by first starting regionserver, and then the master to ensure that it does not matter which is started first.
 */
  @Test public void testBootRegionServerFirst() throws Exception {
    startRegionServer();
    startMaster();
    waitForClusterOnline();
  }
  /** 
 * Tests launching the cluster by first starting master, and then the regionserver to ensure that it does not matter which is started first.
 */
  @Test public void testBootMasterFirst() throws Exception {
    startMaster();
    startRegionServer();
    waitForClusterOnline();
  }
}
