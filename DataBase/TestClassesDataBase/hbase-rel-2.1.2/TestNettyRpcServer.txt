@Category({RPCTests.class,MediumTests.class}) public class TestNettyRpcServer {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestNettyRpcServer.class);
  @Rule public TestName name=new TestName();
  private static HBaseTestingUtility TEST_UTIL;
  private static TableName TABLE;
  private static byte[] FAMILY=Bytes.toBytes("f1");
  private static byte[] PRIVATE_COL=Bytes.toBytes("private");
  private static byte[] PUBLIC_COL=Bytes.toBytes("public");
  @Before public void setup(){
    TABLE=TableName.valueOf(name.getMethodName());
  }
  @BeforeClass public static void setupBeforeClass() throws Exception {
    TEST_UTIL=new HBaseTestingUtility();
    TEST_UTIL.getConfiguration().set(RpcServerFactory.CUSTOM_RPC_SERVER_IMPL_CONF_KEY,NettyRpcServer.class.getName());
    TEST_UTIL.startMiniCluster();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testNettyRpcServer() throws Exception {
    final Table table=TEST_UTIL.createTable(TABLE,FAMILY);
    try {
      List<Put> puts=new ArrayList<Put>(100);
      for (int i=0; i < 100; i++) {
        Put p=new Put(Bytes.toBytes(i));
        p.addColumn(FAMILY,PRIVATE_COL,Bytes.toBytes("secret " + i));
        p.addColumn(FAMILY,PUBLIC_COL,Bytes.toBytes("info " + i));
        puts.add(p);
      }
      table.put(puts);
      Scan scan=new Scan();
      scan.setCaching(16);
      ResultScanner rs=table.getScanner(scan);
      int rowcnt=0;
      for (      Result r : rs) {
        rowcnt++;
        int rownum=Bytes.toInt(r.getRow());
        assertTrue(r.containsColumn(FAMILY,PRIVATE_COL));
        assertEquals("secret " + rownum,Bytes.toString(r.getValue(FAMILY,PRIVATE_COL)));
        assertTrue(r.containsColumn(FAMILY,PUBLIC_COL));
        assertEquals("info " + rownum,Bytes.toString(r.getValue(FAMILY,PUBLIC_COL)));
      }
      assertEquals("Expected 100 rows returned",100,rowcnt);
    }
  finally {
      table.close();
    }
  }
}
