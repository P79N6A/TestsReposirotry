/** 
 * Run Increment tests that use the HBase clients;  {@link HTable}. Test is parameterized to run the slow and fast increment code paths. If fast, in the @before, we do a rolling restart of the single regionserver so that it can pick up the go fast configuration. Doing it this way should be faster than starting/stopping a cluster per test. Test takes a long time because spin up a cluster between each run -- ugh.
 */
@Category(LargeTests.class) public class TestIncrementsFromClientSide {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestIncrementsFromClientSide.class);
  final Logger LOG=LoggerFactory.getLogger(getClass());
  protected final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static byte[] ROW=Bytes.toBytes("testRow");
  private static byte[] FAMILY=Bytes.toBytes("testFamily");
  private static byte[] QUALIFIER=Bytes.toBytes("testQualifier");
  protected static int SLAVES=1;
  @Rule public TestName name=new TestName();
  @BeforeClass public static void beforeClass() throws Exception {
    Configuration conf=TEST_UTIL.getConfiguration();
    conf.setStrings(CoprocessorHost.REGION_COPROCESSOR_CONF_KEY,MultiRowMutationEndpoint.class.getName());
    conf.setBoolean("hbase.table.sanity.checks",true);
    TEST_UTIL.startMiniCluster(SLAVES);
  }
  /** 
 * @throws java.lang.Exception
 */
  @AfterClass public static void afterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  /** 
 * Test increment result when there are duplicate rpc request.
 */
  @Test public void testDuplicateIncrement() throws Exception {
    HTableDescriptor hdt=TEST_UTIL.createTableDescriptor(TableName.valueOf(name.getMethodName()));
    Map<String,String> kvs=new HashMap<>();
    kvs.put(HConnectionTestingUtility.SleepAtFirstRpcCall.SLEEP_TIME_CONF_KEY,"2000");
    hdt.addCoprocessor(HConnectionTestingUtility.SleepAtFirstRpcCall.class.getName(),null,1,kvs);
    TEST_UTIL.createTable(hdt,new byte[][]{ROW}).close();
    Configuration c=new Configuration(TEST_UTIL.getConfiguration());
    c.setInt(HConstants.HBASE_CLIENT_PAUSE,50);
    c.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY,1500);
    Connection connection=ConnectionFactory.createConnection(c);
    Table t=connection.getTable(TableName.valueOf(name.getMethodName()));
    if (t instanceof HTable) {
      HTable table=(HTable)t;
      table.setOperationTimeout(3 * 1000);
      try {
        Increment inc=new Increment(ROW);
        inc.addColumn(TEST_UTIL.fam1,QUALIFIER,1);
        Result result=table.increment(inc);
        Cell[] cells=result.rawCells();
        assertEquals(1,cells.length);
        assertIncrementKey(cells[0],ROW,TEST_UTIL.fam1,QUALIFIER,1);
        Result readResult=table.get(new Get(ROW));
        cells=readResult.rawCells();
        assertEquals(1,cells.length);
        assertIncrementKey(cells[0],ROW,TEST_UTIL.fam1,QUALIFIER,1);
      }
  finally {
        table.close();
        connection.close();
      }
    }
  }
  @Test public void testIncrementWithDeletes() throws Exception {
    LOG.info("Starting " + this.name.getMethodName());
    final TableName TABLENAME=TableName.valueOf(filterStringSoTableNameSafe(this.name.getMethodName()));
    Table ht=TEST_UTIL.createTable(TABLENAME,FAMILY);
    final byte[] COLUMN=Bytes.toBytes("column");
    ht.incrementColumnValue(ROW,FAMILY,COLUMN,5);
    TEST_UTIL.flush(TABLENAME);
    Delete del=new Delete(ROW);
    ht.delete(del);
    ht.incrementColumnValue(ROW,FAMILY,COLUMN,5);
    Get get=new Get(ROW);
    Result r=ht.get(get);
    assertEquals(1,r.size());
    assertEquals(5,Bytes.toLong(r.getValue(FAMILY,COLUMN)));
  }
  @Test public void testIncrementingInvalidValue() throws Exception {
    LOG.info("Starting " + this.name.getMethodName());
    final TableName TABLENAME=TableName.valueOf(filterStringSoTableNameSafe(this.name.getMethodName()));
    Table ht=TEST_UTIL.createTable(TABLENAME,FAMILY);
    final byte[] COLUMN=Bytes.toBytes("column");
    Put p=new Put(ROW);
    p.addColumn(FAMILY,COLUMN,Bytes.toBytes(5));
    ht.put(p);
    try {
      ht.incrementColumnValue(ROW,FAMILY,COLUMN,5);
      fail("Should have thrown DoNotRetryIOException");
    }
 catch (    DoNotRetryIOException iox) {
    }
    Increment inc=new Increment(ROW);
    inc.addColumn(FAMILY,COLUMN,5);
    try {
      ht.increment(inc);
      fail("Should have thrown DoNotRetryIOException");
    }
 catch (    DoNotRetryIOException iox) {
    }
  }
  @Test public void testBatchIncrementsWithReturnResultFalse() throws Exception {
    LOG.info("Starting testBatchIncrementsWithReturnResultFalse");
    final TableName tableName=TableName.valueOf(name.getMethodName());
    Table table=TEST_UTIL.createTable(tableName,FAMILY);
    Increment inc1=new Increment(Bytes.toBytes("row2"));
    inc1.setReturnResults(false);
    inc1.addColumn(FAMILY,Bytes.toBytes("f1"),1);
    Increment inc2=new Increment(Bytes.toBytes("row2"));
    inc2.setReturnResults(false);
    inc2.addColumn(FAMILY,Bytes.toBytes("f1"),1);
    List<Increment> incs=new ArrayList<>();
    incs.add(inc1);
    incs.add(inc2);
    Object[] results=new Object[2];
    table.batch(incs,results);
    assertTrue(results.length == 2);
    for (    Object r : results) {
      Result result=(Result)r;
      assertTrue(result.isEmpty());
    }
    table.close();
  }
  @Test public void testIncrementInvalidArguments() throws Exception {
    LOG.info("Starting " + this.name.getMethodName());
    final TableName TABLENAME=TableName.valueOf(filterStringSoTableNameSafe(this.name.getMethodName()));
    Table ht=TEST_UTIL.createTable(TABLENAME,FAMILY);
    final byte[] COLUMN=Bytes.toBytes("column");
    try {
      ht.incrementColumnValue(null,FAMILY,COLUMN,5);
      fail("Should have thrown IOException");
    }
 catch (    IOException iox) {
    }
    try {
      ht.incrementColumnValue(ROW,null,COLUMN,5);
      fail("Should have thrown IOException");
    }
 catch (    IOException iox) {
    }
    try {
      Increment incNoRow=new Increment((byte[])null);
      incNoRow.addColumn(FAMILY,COLUMN,5);
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException iax) {
    }
catch (    NullPointerException npe) {
    }
    try {
      Increment incNoFamily=new Increment(ROW);
      incNoFamily.addColumn(null,COLUMN,5);
      fail("Should have thrown IllegalArgumentException");
    }
 catch (    IllegalArgumentException iax) {
    }
  }
  @Test public void testIncrementOutOfOrder() throws Exception {
    LOG.info("Starting " + this.name.getMethodName());
    final TableName TABLENAME=TableName.valueOf(filterStringSoTableNameSafe(this.name.getMethodName()));
    Table ht=TEST_UTIL.createTable(TABLENAME,FAMILY);
    byte[][] QUALIFIERS=new byte[][]{Bytes.toBytes("B"),Bytes.toBytes("A"),Bytes.toBytes("C")};
    Increment inc=new Increment(ROW);
    for (int i=0; i < QUALIFIERS.length; i++) {
      inc.addColumn(FAMILY,QUALIFIERS[i],1);
    }
    ht.increment(inc);
    Get get=new Get(ROW);
    Result r=ht.get(get);
    Cell[] kvs=r.rawCells();
    assertEquals(3,kvs.length);
    assertIncrementKey(kvs[0],ROW,FAMILY,QUALIFIERS[1],1);
    assertIncrementKey(kvs[1],ROW,FAMILY,QUALIFIERS[0],1);
    assertIncrementKey(kvs[2],ROW,FAMILY,QUALIFIERS[2],1);
    inc=new Increment(ROW);
    for (int i=0; i < QUALIFIERS.length; i++) {
      inc.addColumn(FAMILY,QUALIFIERS[i],1);
    }
    ht.increment(inc);
    r=ht.get(get);
    kvs=r.rawCells();
    assertEquals(3,kvs.length);
    assertIncrementKey(kvs[0],ROW,FAMILY,QUALIFIERS[1],2);
    assertIncrementKey(kvs[1],ROW,FAMILY,QUALIFIERS[0],2);
    assertIncrementKey(kvs[2],ROW,FAMILY,QUALIFIERS[2],2);
  }
  @Test public void testIncrementOnSameColumn() throws Exception {
    LOG.info("Starting " + this.name.getMethodName());
    final byte[] TABLENAME=Bytes.toBytes(filterStringSoTableNameSafe(this.name.getMethodName()));
    Table ht=TEST_UTIL.createTable(TableName.valueOf(TABLENAME),FAMILY);
    byte[][] QUALIFIERS=new byte[][]{Bytes.toBytes("A"),Bytes.toBytes("B"),Bytes.toBytes("C")};
    Increment inc=new Increment(ROW);
    for (int i=0; i < QUALIFIERS.length; i++) {
      inc.addColumn(FAMILY,QUALIFIERS[i],1);
      inc.addColumn(FAMILY,QUALIFIERS[i],1);
    }
    ht.increment(inc);
    Get get=new Get(ROW);
    Result r=ht.get(get);
    Cell[] kvs=r.rawCells();
    assertEquals(3,kvs.length);
    assertIncrementKey(kvs[0],ROW,FAMILY,QUALIFIERS[0],1);
    assertIncrementKey(kvs[1],ROW,FAMILY,QUALIFIERS[1],1);
    assertIncrementKey(kvs[2],ROW,FAMILY,QUALIFIERS[2],1);
    inc=new Increment(ROW);
    for (int i=0; i < QUALIFIERS.length; i++) {
      inc.addColumn(FAMILY,QUALIFIERS[i],1);
      inc.addColumn(FAMILY,QUALIFIERS[i],1);
    }
    ht.increment(inc);
    r=ht.get(get);
    kvs=r.rawCells();
    assertEquals(3,kvs.length);
    assertIncrementKey(kvs[0],ROW,FAMILY,QUALIFIERS[0],2);
    assertIncrementKey(kvs[1],ROW,FAMILY,QUALIFIERS[1],2);
    assertIncrementKey(kvs[2],ROW,FAMILY,QUALIFIERS[2],2);
    ht.close();
  }
  @Test public void testIncrementIncrZeroAtFirst() throws Exception {
    LOG.info("Starting " + this.name.getMethodName());
    final TableName TABLENAME=TableName.valueOf(filterStringSoTableNameSafe(this.name.getMethodName()));
    Table ht=TEST_UTIL.createTable(TABLENAME,FAMILY);
    byte[] col1=Bytes.toBytes("col1");
    byte[] col2=Bytes.toBytes("col2");
    byte[] col3=Bytes.toBytes("col3");
    Increment inc=new Increment(ROW);
    inc.addColumn(FAMILY,col1,0);
    ht.increment(inc);
    Get get=new Get(ROW);
    Result r=ht.get(get);
    Cell[] kvs=r.rawCells();
    assertEquals(1,kvs.length);
    assertNotNull(kvs[0]);
    assertIncrementKey(kvs[0],ROW,FAMILY,col1,0);
    inc=new Increment(ROW);
    inc.addColumn(FAMILY,col1,1);
    inc.addColumn(FAMILY,col2,0);
    inc.addColumn(FAMILY,col3,2);
    ht.increment(inc);
    get=new Get(ROW);
    r=ht.get(get);
    kvs=r.rawCells();
    assertEquals(3,kvs.length);
    assertNotNull(kvs[0]);
    assertNotNull(kvs[1]);
    assertNotNull(kvs[2]);
    assertIncrementKey(kvs[0],ROW,FAMILY,col1,1);
    assertIncrementKey(kvs[1],ROW,FAMILY,col2,0);
    assertIncrementKey(kvs[2],ROW,FAMILY,col3,2);
  }
  @Test public void testIncrement() throws Exception {
    LOG.info("Starting " + this.name.getMethodName());
    final TableName TABLENAME=TableName.valueOf(filterStringSoTableNameSafe(this.name.getMethodName()));
    Table ht=TEST_UTIL.createTable(TABLENAME,FAMILY);
    byte[][] ROWS=new byte[][]{Bytes.toBytes("a"),Bytes.toBytes("b"),Bytes.toBytes("c"),Bytes.toBytes("d"),Bytes.toBytes("e"),Bytes.toBytes("f"),Bytes.toBytes("g"),Bytes.toBytes("h"),Bytes.toBytes("i")};
    byte[][] QUALIFIERS=new byte[][]{Bytes.toBytes("a"),Bytes.toBytes("b"),Bytes.toBytes("c"),Bytes.toBytes("d"),Bytes.toBytes("e"),Bytes.toBytes("f"),Bytes.toBytes("g"),Bytes.toBytes("h"),Bytes.toBytes("i")};
    ht.incrementColumnValue(ROW,FAMILY,QUALIFIERS[0],1);
    ht.incrementColumnValue(ROW,FAMILY,QUALIFIERS[1],2);
    ht.incrementColumnValue(ROW,FAMILY,QUALIFIERS[2],3);
    ht.incrementColumnValue(ROW,FAMILY,QUALIFIERS[3],4);
    Increment inc=new Increment(ROW);
    inc.addColumn(FAMILY,QUALIFIERS[1],1);
    inc.addColumn(FAMILY,QUALIFIERS[3],1);
    inc.addColumn(FAMILY,QUALIFIERS[4],1);
    ht.increment(inc);
    Get get=new Get(ROW);
    Result r=ht.get(get);
    Cell[] kvs=r.rawCells();
    assertEquals(5,kvs.length);
    assertIncrementKey(kvs[0],ROW,FAMILY,QUALIFIERS[0],1);
    assertIncrementKey(kvs[1],ROW,FAMILY,QUALIFIERS[1],3);
    assertIncrementKey(kvs[2],ROW,FAMILY,QUALIFIERS[2],3);
    assertIncrementKey(kvs[3],ROW,FAMILY,QUALIFIERS[3],5);
    assertIncrementKey(kvs[4],ROW,FAMILY,QUALIFIERS[4],1);
    inc=new Increment(ROWS[0]);
    for (int i=0; i < QUALIFIERS.length; i++) {
      inc.addColumn(FAMILY,QUALIFIERS[i],i + 1);
    }
    ht.increment(inc);
    get=new Get(ROWS[0]);
    r=ht.get(get);
    kvs=r.rawCells();
    assertEquals(QUALIFIERS.length,kvs.length);
    for (int i=0; i < QUALIFIERS.length; i++) {
      assertIncrementKey(kvs[i],ROWS[0],FAMILY,QUALIFIERS[i],i + 1);
    }
    inc=new Increment(ROWS[0]);
    for (int i=0; i < QUALIFIERS.length; i++) {
      inc.addColumn(FAMILY,QUALIFIERS[i],i + 1);
    }
    ht.increment(inc);
    r=ht.get(get);
    kvs=r.rawCells();
    assertEquals(QUALIFIERS.length,kvs.length);
    for (int i=0; i < QUALIFIERS.length; i++) {
      assertIncrementKey(kvs[i],ROWS[0],FAMILY,QUALIFIERS[i],2 * (i + 1));
    }
    inc=new Increment(ROWS[0]);
    for (int i=0; i < QUALIFIERS.length; i++) {
      inc.addColumn(FAMILY,QUALIFIERS[i],0);
    }
    ht.increment(inc);
    r=ht.get(get);
    kvs=r.rawCells();
    assertEquals(QUALIFIERS.length,kvs.length);
    for (int i=0; i < QUALIFIERS.length; i++) {
      assertIncrementKey(kvs[i],ROWS[0],FAMILY,QUALIFIERS[i],2 * (i + 1));
    }
  }
  @Test public void testIncrementWithCustomTimestamp() throws IOException {
    TableName TABLENAME=TableName.valueOf(name.getMethodName());
    Table table=TEST_UTIL.createTable(TABLENAME,FAMILY);
    long timestamp=999;
    Increment increment=new Increment(ROW);
    increment.add(CellUtil.createCell(ROW,FAMILY,QUALIFIER,timestamp,KeyValue.Type.Put.getCode(),Bytes.toBytes(100L)));
    Result r=table.increment(increment);
    assertEquals(1,r.size());
    assertEquals(timestamp,r.rawCells()[0].getTimestamp());
    r=table.get(new Get(ROW));
    assertEquals(1,r.size());
    assertEquals(timestamp,r.rawCells()[0].getTimestamp());
    r=table.increment(increment);
    assertEquals(1,r.size());
    assertNotEquals(timestamp,r.rawCells()[0].getTimestamp());
    r=table.get(new Get(ROW));
    assertEquals(1,r.size());
    assertNotEquals(timestamp,r.rawCells()[0].getTimestamp());
  }
  /** 
 * Call over to the adjacent class's method of same name.
 */
  static void assertIncrementKey(  Cell key,  byte[] row,  byte[] family,  byte[] qualifier,  long value) throws Exception {
    TestFromClientSide.assertIncrementKey(key,row,family,qualifier,value);
  }
  public static String filterStringSoTableNameSafe(  final String str){
    return str.replaceAll("\\[fast\\=(.*)\\]",".FAST.is.$1");
  }
}
