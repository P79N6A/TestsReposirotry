@Category({MiscTests.class,SmallTests.class}) public class TestTerminatedWrapper {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestTerminatedWrapper.class);
  static final String[] VALUES_STRINGS=new String[]{"","1","22","333","4444","55555","666666","7777777","88888888","999999999"};
  static final byte[][] VALUES_BYTES=new byte[VALUES_STRINGS.length][];
static {
    for (int i=0; i < VALUES_STRINGS.length; i++) {
      VALUES_BYTES[i]=Bytes.toBytes(VALUES_STRINGS[i]);
    }
  }
  static final byte[][] TERMINATORS=new byte[][]{new byte[]{-2},Bytes.toBytes("foo")};
  @Test(expected=IllegalArgumentException.class) public void testEmptyDelimiter(){
    new TerminatedWrapper<>(new RawBytes(),"");
  }
  @Test(expected=IllegalArgumentException.class) public void testNullDelimiter(){
    new RawBytesTerminated((byte[])null);
  }
  @Test(expected=IllegalArgumentException.class) public void testEncodedValueContainsTerm(){
    DataType<byte[]> type=new TerminatedWrapper<>(new RawBytes(),"foo");
    PositionedByteRange buff=new SimplePositionedMutableByteRange(16);
    type.encode(buff,Bytes.toBytes("hello foobar!"));
  }
  @Test public void testReadWriteSkippable(){
    PositionedByteRange buff=new SimplePositionedMutableByteRange(14);
    for (    OrderedString t : new OrderedString[]{OrderedString.ASCENDING,OrderedString.DESCENDING}) {
      for (      byte[] term : TERMINATORS) {
        for (        String val : VALUES_STRINGS) {
          buff.setPosition(0);
          DataType<String> type=new TerminatedWrapper<>(t,term);
          assertEquals(val.length() + 2 + term.length,type.encode(buff,val));
          buff.setPosition(0);
          assertEquals(val,type.decode(buff));
          assertEquals(val.length() + 2 + term.length,buff.getPosition());
        }
      }
    }
  }
  @Test public void testReadWriteNonSkippable(){
    PositionedByteRange buff=new SimplePositionedMutableByteRange(12);
    for (    Order ord : new Order[]{Order.ASCENDING,Order.DESCENDING}) {
      for (      byte[] term : TERMINATORS) {
        for (        byte[] val : VALUES_BYTES) {
          buff.setPosition(0);
          DataType<byte[]> type=new TerminatedWrapper<>(new RawBytes(ord),term);
          assertEquals(val.length + term.length,type.encode(buff,val));
          buff.setPosition(0);
          assertArrayEquals(val,type.decode(buff));
          assertEquals(val.length + term.length,buff.getPosition());
        }
      }
    }
  }
  @Test public void testSkipSkippable(){
    PositionedByteRange buff=new SimplePositionedMutableByteRange(14);
    for (    OrderedString t : new OrderedString[]{OrderedString.ASCENDING,OrderedString.DESCENDING}) {
      for (      byte[] term : TERMINATORS) {
        for (        String val : VALUES_STRINGS) {
          buff.setPosition(0);
          DataType<String> type=new TerminatedWrapper<>(t,term);
          int expected=val.length() + 2 + term.length;
          assertEquals(expected,type.encode(buff,val));
          buff.setPosition(0);
          assertEquals(expected,type.skip(buff));
          assertEquals(expected,buff.getPosition());
        }
      }
    }
  }
  @Test public void testSkipNonSkippable(){
    PositionedByteRange buff=new SimplePositionedMutableByteRange(12);
    for (    Order ord : new Order[]{Order.ASCENDING,Order.DESCENDING}) {
      for (      byte[] term : TERMINATORS) {
        for (        byte[] val : VALUES_BYTES) {
          buff.setPosition(0);
          DataType<byte[]> type=new TerminatedWrapper<>(new RawBytes(ord),term);
          int expected=type.encode(buff,val);
          buff.setPosition(0);
          assertEquals(expected,type.skip(buff));
          assertEquals(expected,buff.getPosition());
        }
      }
    }
  }
  @Test(expected=IllegalArgumentException.class) public void testInvalidSkip(){
    PositionedByteRange buff=new SimplePositionedMutableByteRange(Bytes.toBytes("foo"));
    DataType<byte[]> type=new TerminatedWrapper<>(new RawBytes(),new byte[]{0x00});
    type.skip(buff);
  }
}
