/** 
 * Test that the snapshot hfile cleaner finds hfiles referenced in a snapshot
 */
@Category({MasterTests.class,SmallTests.class}) public class TestSnapshotHFileCleaner {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSnapshotHFileCleaner.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestSnapshotFileCache.class);
  private final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final String TABLE_NAME_STR="testSnapshotManifest";
  private static final String SNAPSHOT_NAME_STR="testSnapshotManifest-snapshot";
  private static Path rootDir;
  private static FileSystem fs;
  @Rule public TestName name=new TestName();
  /** 
 * Setup the test environment
 */
  @BeforeClass public static void setup() throws Exception {
    Configuration conf=TEST_UTIL.getConfiguration();
    rootDir=FSUtils.getRootDir(conf);
    fs=FileSystem.get(conf);
  }
  @AfterClass public static void cleanup() throws IOException {
    fs.delete(rootDir,true);
  }
  @Test public void testFindsSnapshotFilesWhenCleaning() throws IOException {
    Configuration conf=TEST_UTIL.getConfiguration();
    FSUtils.setRootDir(conf,TEST_UTIL.getDataTestDir());
    Path rootDir=FSUtils.getRootDir(conf);
    Path archivedHfileDir=new Path(TEST_UTIL.getDataTestDir(),HConstants.HFILE_ARCHIVE_DIRECTORY);
    FileSystem fs=FileSystem.get(conf);
    SnapshotHFileCleaner cleaner=new SnapshotHFileCleaner();
    cleaner.setConf(conf);
    String snapshotName="snapshot";
    byte[] snapshot=Bytes.toBytes(snapshotName);
    final TableName tableName=TableName.valueOf(name.getMethodName());
    Path snapshotDir=SnapshotDescriptionUtils.getCompletedSnapshotDir(snapshotName,rootDir);
    HRegionInfo mockRegion=new HRegionInfo(tableName);
    Path regionSnapshotDir=new Path(snapshotDir,mockRegion.getEncodedName());
    Path familyDir=new Path(regionSnapshotDir,"family");
    String hfile="fd1e73e8a96c486090c5cec07b4894c4";
    Path refFile=new Path(familyDir,hfile);
    fs.create(refFile);
    fs.mkdirs(archivedHfileDir);
    fs.createNewFile(new Path(archivedHfileDir,hfile));
    assertFalse(cleaner.isFileDeletable(fs.getFileStatus(refFile)));
  }
static class SnapshotFiles implements SnapshotFileCache.SnapshotFileInspector {
    @Override public Collection<String> filesUnderSnapshot(    final Path snapshotDir) throws IOException {
      Collection<String> files=new HashSet<>();
      files.addAll(SnapshotReferenceUtil.getHFileNames(TEST_UTIL.getConfiguration(),fs,snapshotDir));
      return files;
    }
  }
  /** 
 * If there is a corrupted region manifest, it should throw out CorruptedSnapshotException, instead of an IOException
 */
  @Test public void testCorruptedRegionManifest() throws IOException {
    SnapshotTestingUtils.SnapshotMock snapshotMock=new SnapshotTestingUtils.SnapshotMock(TEST_UTIL.getConfiguration(),fs,rootDir);
    SnapshotTestingUtils.SnapshotMock.SnapshotBuilder builder=snapshotMock.createSnapshotV2(SNAPSHOT_NAME_STR,TABLE_NAME_STR);
    builder.addRegionV2();
    builder.corruptOneRegionManifest();
    fs.delete(SnapshotDescriptionUtils.getWorkingSnapshotDir(rootDir),true);
  }
  /** 
 * If there is a corrupted data manifest, it should throw out CorruptedSnapshotException, instead of an IOException
 */
  @Test public void testCorruptedDataManifest() throws IOException {
    SnapshotTestingUtils.SnapshotMock snapshotMock=new SnapshotTestingUtils.SnapshotMock(TEST_UTIL.getConfiguration(),fs,rootDir);
    SnapshotTestingUtils.SnapshotMock.SnapshotBuilder builder=snapshotMock.createSnapshotV2(SNAPSHOT_NAME_STR,TABLE_NAME_STR);
    builder.addRegionV2();
    builder.consolidate();
    builder.corruptDataManifest();
    fs.delete(SnapshotDescriptionUtils.getWorkingSnapshotDir(rootDir),true);
  }
}
