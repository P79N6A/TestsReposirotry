/** 
 * Test for MetricsTableSourceImpl
 */
@Category({MetricsTests.class,SmallTests.class}) public class TestMetricsTableSourceImpl {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMetricsTableSourceImpl.class);
  @SuppressWarnings("SelfComparison") @Test public void testCompareToHashCode() throws Exception {
    MetricsRegionServerSourceFactory metricsFact=CompatibilitySingletonFactory.getInstance(MetricsRegionServerSourceFactory.class);
    MetricsTableSource one=metricsFact.createTable("ONETABLE",new TableWrapperStub("ONETABLE"));
    MetricsTableSource oneClone=metricsFact.createTable("ONETABLE",new TableWrapperStub("ONETABLE"));
    MetricsTableSource two=metricsFact.createTable("TWOTABLE",new TableWrapperStub("TWOTABLE"));
    assertEquals(0,one.compareTo(oneClone));
    assertEquals(one.hashCode(),oneClone.hashCode());
    assertNotEquals(one,two);
    assertTrue(one.compareTo(two) != 0);
    assertTrue(two.compareTo(one) != 0);
    assertTrue(two.compareTo(one) != one.compareTo(two));
    assertTrue(two.compareTo(two) == 0);
  }
  @Test(expected=RuntimeException.class) public void testNoGetTableMetricsSourceImpl(){
    CompatibilitySingletonFactory.getInstance(MetricsTableSourceImpl.class);
  }
  @Test public void testGetTableMetrics(){
    MetricsTableSource oneTbl=CompatibilitySingletonFactory.getInstance(MetricsRegionServerSourceFactory.class).createTable("ONETABLE",new TableWrapperStub("ONETABLE"));
    assertEquals("ONETABLE",oneTbl.getTableName());
  }
static class TableWrapperStub implements MetricsTableWrapperAggregate {
    private String tableName;
    public TableWrapperStub(    String tableName){
      this.tableName=tableName;
    }
    @Override public long getReadRequestsCount(    String table){
      return 10;
    }
    @Override public long getWriteRequestsCount(    String table){
      return 20;
    }
    @Override public long getTotalRequestsCount(    String table){
      return 30;
    }
    @Override public long getMemStoresSize(    String table){
      return 1000;
    }
    @Override public long getStoreFilesSize(    String table){
      return 2000;
    }
    @Override public long getTableSize(    String table){
      return 3000;
    }
    public String getTableName(){
      return tableName;
    }
  }
}
