/** 
 * Connection class to use in  {@link #testNonSuccessiveSplitsAreNotMerged}. This class returns mocked  {@link Table},  {@link RegionLocator},  {@link RegionSizeCalculator}, and  {@link Admin}.
 */
private static class ConnectionForMergeTesting implements Connection {
  public static final byte[][] SPLITS=new byte[][]{Bytes.toBytes("a"),Bytes.toBytes("b"),Bytes.toBytes("c"),Bytes.toBytes("d"),Bytes.toBytes("e"),Bytes.toBytes("f"),Bytes.toBytes("g"),Bytes.toBytes("h"),Bytes.toBytes("i"),Bytes.toBytes("j"),Bytes.toBytes("k"),Bytes.toBytes("l"),Bytes.toBytes("m"),Bytes.toBytes("n"),Bytes.toBytes("o"),Bytes.toBytes("p"),Bytes.toBytes("q"),Bytes.toBytes("r"),Bytes.toBytes("s"),Bytes.toBytes("t"),Bytes.toBytes("u"),Bytes.toBytes("v"),Bytes.toBytes("w"),Bytes.toBytes("x"),Bytes.toBytes("y"),Bytes.toBytes("z")};
  public static final byte[][] START_KEYS;
  public static final byte[][] END_KEYS;
static {
    START_KEYS=new byte[SPLITS.length + 1][];
    START_KEYS[0]=HConstants.EMPTY_BYTE_ARRAY;
    for (int i=0; i < SPLITS.length; i++) {
      START_KEYS[i + 1]=SPLITS[i];
    }
    END_KEYS=new byte[SPLITS.length + 1][];
    for (int i=0; i < SPLITS.length; i++) {
      END_KEYS[i]=SPLITS[i];
    }
    END_KEYS[SPLITS.length]=HConstants.EMPTY_BYTE_ARRAY;
  }
  public static final Map<byte[],Long> SIZE_MAP=new TreeMap<>(Bytes.BYTES_COMPARATOR);
static {
    for (    byte[] startKey : START_KEYS) {
      SIZE_MAP.put(startKey,1024L * 1024L * 1024L);
    }
    SIZE_MAP.put(Bytes.toBytes("a"),200L * 1024L * 1024L);
    SIZE_MAP.put(Bytes.toBytes("b"),200L * 1024L * 1024L);
    SIZE_MAP.put(Bytes.toBytes("c"),200L * 1024L * 1024L);
    SIZE_MAP.put(Bytes.toBytes("o"),200L * 1024L * 1024L);
    SIZE_MAP.put(Bytes.toBytes("p"),200L * 1024L * 1024L);
  }
  ConnectionForMergeTesting(  Configuration conf,  ExecutorService pool,  User user) throws IOException {
  }
  @Override public void abort(  String why,  Throwable e){
  }
  @Override public boolean isAborted(){
    return false;
  }
  @Override public Configuration getConfiguration(){
    throw new UnsupportedOperationException();
  }
  @Override public Table getTable(  TableName tableName) throws IOException {
    Table table=mock(Table.class);
    when(table.getName()).thenReturn(tableName);
    return table;
  }
  @Override public Table getTable(  TableName tableName,  ExecutorService pool) throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public BufferedMutator getBufferedMutator(  TableName tableName) throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public BufferedMutator getBufferedMutator(  BufferedMutatorParams params) throws IOException {
    throw new UnsupportedOperationException();
  }
  @Override public RegionLocator getRegionLocator(  TableName tableName) throws IOException {
    final Map<byte[],HRegionLocation> locationMap=new TreeMap<>(Bytes.BYTES_COMPARATOR);
    for (    byte[] startKey : START_KEYS) {
      HRegionLocation hrl=new HRegionLocation(RegionInfoBuilder.newBuilder(tableName).setStartKey(startKey).build(),ServerName.valueOf("localhost",0,0));
      locationMap.put(startKey,hrl);
    }
    RegionLocator locator=mock(RegionLocator.class);
    when(locator.getRegionLocation(any(byte[].class),anyBoolean())).thenAnswer(new Answer<HRegionLocation>(){
      @Override public HRegionLocation answer(      InvocationOnMock invocationOnMock) throws Throwable {
        Object[] args=invocationOnMock.getArguments();
        byte[] key=(byte[])args[0];
        return locationMap.get(key);
      }
    }
);
    when(locator.getStartEndKeys()).thenReturn(new Pair<byte[][],byte[][]>(START_KEYS,END_KEYS));
    return locator;
  }
  public RegionSizeCalculator getRegionSizeCalculator(){
    RegionSizeCalculator sizeCalculator=mock(RegionSizeCalculator.class);
    when(sizeCalculator.getRegionSize(any(byte[].class))).thenAnswer(new Answer<Long>(){
      @Override public Long answer(      InvocationOnMock invocationOnMock) throws Throwable {
        Object[] args=invocationOnMock.getArguments();
        byte[] regionId=(byte[])args[0];
        byte[] startKey=RegionInfo.getStartKey(regionId);
        return SIZE_MAP.get(startKey);
      }
    }
);
    return sizeCalculator;
  }
  @Override public Admin getAdmin() throws IOException {
    Admin admin=mock(Admin.class);
    return admin;
  }
  @Override public void close() throws IOException {
  }
  @Override public boolean isClosed(){
    return false;
  }
  @Override public TableBuilder getTableBuilder(  TableName tableName,  ExecutorService pool){
    throw new UnsupportedOperationException();
  }
}
