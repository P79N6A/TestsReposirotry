@Category({FilterTests.class,SmallTests.class}) public class TestRandomRowFilter {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRandomRowFilter.class);
  protected RandomRowFilter quarterChanceFilter;
  @Before public void setUp() throws Exception {
    quarterChanceFilter=new RandomRowFilter(0.25f);
  }
  /** 
 * Tests basics
 * @throws Exception
 */
  @Test public void testBasics() throws Exception {
    int included=0;
    int max=1000000;
    for (int i=0; i < max; i++) {
      if (!quarterChanceFilter.filterRowKey(KeyValueUtil.createFirstOnRow(Bytes.toBytes("row")))) {
        included++;
      }
    }
    int epsilon=max / 100;
    assertTrue("Roughly 25% should pass the filter",Math.abs(included - max / 4) < epsilon);
  }
  /** 
 * Tests serialization
 * @throws Exception
 */
  @Test public void testSerialization() throws Exception {
    RandomRowFilter newFilter=serializationTest(quarterChanceFilter);
    assertTrue("float should be equal",Math.abs(newFilter.getChance() - quarterChanceFilter.getChance()) < 0.000001f);
  }
  private RandomRowFilter serializationTest(  RandomRowFilter filter) throws Exception {
    byte[] buffer=filter.toByteArray();
    RandomRowFilter newFilter=RandomRowFilter.parseFrom(buffer);
    return newFilter;
  }
}
