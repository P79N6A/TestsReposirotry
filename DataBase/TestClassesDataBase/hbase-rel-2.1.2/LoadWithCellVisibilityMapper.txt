public static class LoadWithCellVisibilityMapper extends LoadMapper {
  private Counter rowsExp1, rowsExp2, rowsExp3, rowsexp4;
  @Override public void setup(  Context context) throws IOException {
    super.setup(context);
    rowsExp1=context.getCounter(Counters.ROWS_VIS_EXP_1);
    rowsExp2=context.getCounter(Counters.ROWS_VIS_EXP_2);
    rowsExp3=context.getCounter(Counters.ROWS_VIS_EXP_3);
    rowsexp4=context.getCounter(Counters.ROWS_VIS_EXP_4);
  }
  @Override protected void map(  NullWritable key,  NullWritable value,  Context context) throws IOException, InterruptedException {
    String suffix="/" + shortTaskId;
    int BLOCK_SIZE=(int)(recordsToWrite / 100);
    for (long i=0; i < recordsToWrite; ) {
      for (long idx=0; idx < BLOCK_SIZE && i < recordsToWrite; idx++, i++) {
        int expIdx=rand.nextInt(BLOCK_SIZE) % VISIBILITY_EXPS_COUNT;
        String exp=VISIBILITY_EXPS[expIdx];
        byte[] row=Bytes.add(Bytes.toBytes(i),Bytes.toBytes(suffix),Bytes.toBytes(exp));
        Put p=new Put(row);
        p.addColumn(TEST_FAMILY,TEST_QUALIFIER,HConstants.EMPTY_BYTE_ARRAY);
        p.setCellVisibility(new CellVisibility(exp));
        getCounter(expIdx).increment(1);
        mutator.mutate(p);
        if (i % 100 == 0) {
          context.setStatus("Written " + i + "/"+ recordsToWrite+ " records");
          context.progress();
        }
      }
      mutator.flush();
    }
  }
  private Counter getCounter(  int idx){
switch (idx) {
case 0:
      return rowsExp1;
case 1:
    return rowsExp2;
case 2:
  return rowsExp3;
case 3:
return rowsexp4;
default :
return null;
}
}
}
