@Category({ReplicationTests.class,MediumTests.class}) public class TestSerialReplicationEndpoint {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSerialReplicationEndpoint.class);
  private static HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static Configuration CONF;
  private static Connection CONN;
  @BeforeClass public static void setUp() throws Exception {
    UTIL.startMiniCluster();
    CONF=UTIL.getConfiguration();
    CONF.setLong(RpcServer.MAX_REQUEST_SIZE,102400);
    CONN=UTIL.getConnection();
  }
  @AfterClass public static void tearDown() throws Exception {
    IOUtils.closeQuietly(CONN);
    UTIL.shutdownMiniCluster();
  }
  private String getZKClusterKey(){
    return String.format("127.0.0.1:%d:%s",UTIL.getZkCluster().getClientPort(),CONF.get(HConstants.ZOOKEEPER_ZNODE_PARENT));
  }
  private void testHBaseReplicationEndpoint(  String tableNameStr,  String peerId,  boolean isSerial) throws IOException {
    TestEndpoint.reset();
    int cellNum=10000;
    TableName tableName=TableName.valueOf(tableNameStr);
    byte[] family=Bytes.toBytes("f");
    byte[] qualifier=Bytes.toBytes("q");
    TableDescriptor td=TableDescriptorBuilder.newBuilder(tableName).setColumnFamily(ColumnFamilyDescriptorBuilder.newBuilder(family).setScope(HConstants.REPLICATION_SCOPE_GLOBAL).build()).build();
    UTIL.createTable(td,null);
    try (Admin admin=CONN.getAdmin()){
      ReplicationPeerConfig peerConfig=ReplicationPeerConfig.newBuilder().setClusterKey(getZKClusterKey()).setReplicationEndpointImpl(TestEndpoint.class.getName()).setReplicateAllUserTables(false).setSerial(isSerial).setTableCFsMap(ImmutableMap.of(tableName,ImmutableList.of())).build();
      admin.addReplicationPeer(peerId,peerConfig);
    }
     try (Table table=CONN.getTable(tableName)){
      for (int i=0; i < cellNum; i++) {
        Put put=new Put(Bytes.toBytes(i)).addColumn(family,qualifier,System.currentTimeMillis(),Bytes.toBytes(i));
        table.put(put);
      }
    }
     Waiter.waitFor(CONF,60000,() -> TestEndpoint.getEntries().size() >= cellNum);
    int index=0;
    Assert.assertEquals(TestEndpoint.getEntries().size(),cellNum);
    if (!isSerial) {
      Collections.sort(TestEndpoint.getEntries(),(a,b) -> {
        long seqA=a.getKey().getSequenceId();
        long seqB=b.getKey().getSequenceId();
        return seqA == seqB ? 0 : (seqA < seqB ? -1 : 1);
      }
);
    }
    for (    Entry entry : TestEndpoint.getEntries()) {
      Assert.assertEquals(entry.getKey().getTableName(),tableName);
      Assert.assertEquals(entry.getEdit().getCells().size(),1);
      Cell cell=entry.getEdit().getCells().get(0);
      Assert.assertArrayEquals(Bytes.copy(cell.getRowArray(),cell.getRowOffset(),cell.getRowLength()),Bytes.toBytes(index));
      index++;
    }
    Assert.assertEquals(index,cellNum);
  }
  @Test public void testSerialReplicate() throws Exception {
    testHBaseReplicationEndpoint("testSerialReplicate","100",true);
  }
  @Test public void testParallelReplicate() throws Exception {
    testHBaseReplicationEndpoint("testParallelReplicate","101",false);
  }
public static class TestEndpoint extends HBaseInterClusterReplicationEndpoint {
    private final static BlockingQueue<Entry> entryQueue=new LinkedBlockingQueue<>();
    public static void reset(){
      entryQueue.clear();
    }
    public static List<Entry> getEntries(){
      return new ArrayList<>(entryQueue);
    }
    @Override public boolean canReplicateToSameCluster(){
      return true;
    }
    @Override protected Callable<Integer> createReplicator(    List<Entry> entries,    int ordinal){
      return () -> {
        entryQueue.addAll(entries);
        return ordinal;
      }
;
    }
    @Override public synchronized List<ServerName> getRegionServers(){
      return new ArrayList<>(ImmutableList.of(ServerName.valueOf("www.example.com",12016,1525245876026L),ServerName.valueOf("www.example2.com",12016,1525245876026L),ServerName.valueOf("www.example3.com",12016,1525245876026L),ServerName.valueOf("www.example4.com",12016,1525245876026L),ServerName.valueOf("www.example4.com",12016,1525245876026L)));
    }
  }
}
