/** 
 * By using this class as the super class of a set of tests you will have a HBase testing cluster available that is very suitable for writing tests for scanning and filtering against.
 */
@Category({FilterTests.class,MediumTests.class}) public class FilterTestingCluster {
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static Admin admin=null;
  private static List<TableName> createdTables=new ArrayList<>();
  protected static void createTable(  TableName tableName,  String columnFamilyName){
    assertNotNull("HBaseAdmin is not initialized successfully.",admin);
    HTableDescriptor desc=new HTableDescriptor(tableName);
    HColumnDescriptor colDef=new HColumnDescriptor(Bytes.toBytes(columnFamilyName));
    desc.addFamily(colDef);
    try {
      admin.createTable(desc);
      createdTables.add(tableName);
      assertTrue("Fail to create the table",admin.tableExists(tableName));
    }
 catch (    IOException e) {
      assertNull("Exception found while creating table",e);
    }
  }
  protected static Table openTable(  TableName tableName) throws IOException {
    Table table=TEST_UTIL.getConnection().getTable(tableName);
    assertTrue("Fail to create the table",admin.tableExists(tableName));
    return table;
  }
  private static void deleteTables(){
    if (admin != null) {
      for (      TableName tableName : createdTables) {
        try {
          if (admin.tableExists(tableName)) {
            admin.disableTable(tableName);
            admin.deleteTable(tableName);
          }
        }
 catch (        IOException e) {
          assertNull("Exception found deleting the table",e);
        }
      }
    }
  }
  private static void initialize(  Configuration conf){
    conf=HBaseConfiguration.create(conf);
    conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,1);
    try {
      admin=TEST_UTIL.getAdmin();
    }
 catch (    MasterNotRunningException e) {
      assertNull("Master is not running",e);
    }
catch (    ZooKeeperConnectionException e) {
      assertNull("Cannot connect to ZooKeeper",e);
    }
catch (    IOException e) {
      assertNull("IOException",e);
    }
  }
  @BeforeClass public static void setUp() throws Exception {
    TEST_UTIL.startMiniCluster(1);
    initialize(TEST_UTIL.getConfiguration());
  }
  @AfterClass public static void tearDown() throws Exception {
    deleteTables();
    TEST_UTIL.shutdownMiniCluster();
  }
}
