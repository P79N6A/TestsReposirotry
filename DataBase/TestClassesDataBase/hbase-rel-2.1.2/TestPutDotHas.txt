@Category({ClientTests.class,SmallTests.class}) public class TestPutDotHas {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestPutDotHas.class);
  public static final byte[] ROW_01=Bytes.toBytes("row-01");
  public static final byte[] QUALIFIER_01=Bytes.toBytes("qualifier-01");
  public static final byte[] VALUE_01=Bytes.toBytes("value-01");
  public static final byte[] FAMILY_01=Bytes.toBytes("family-01");
  public static final long TS=1234567L;
  public Put put=new Put(ROW_01);
  @Before public void setUp(){
    put.addColumn(FAMILY_01,QUALIFIER_01,TS,VALUE_01);
  }
  @Test public void testHasIgnoreValueIgnoreTS(){
    Assert.assertTrue(put.has(FAMILY_01,QUALIFIER_01));
    Assert.assertFalse(put.has(QUALIFIER_01,FAMILY_01));
  }
  @Test public void testHasIgnoreValue(){
    Assert.assertTrue(put.has(FAMILY_01,QUALIFIER_01,TS));
    Assert.assertFalse(put.has(FAMILY_01,QUALIFIER_01,TS + 1));
  }
  @Test public void testHasIgnoreTS(){
    Assert.assertTrue(put.has(FAMILY_01,QUALIFIER_01,VALUE_01));
    Assert.assertFalse(put.has(FAMILY_01,VALUE_01,QUALIFIER_01));
  }
  @Test public void testHas(){
    Assert.assertTrue(put.has(FAMILY_01,QUALIFIER_01,TS,VALUE_01));
    Assert.assertFalse(put.has(FAMILY_01,QUALIFIER_01,TS + 1,VALUE_01));
    Assert.assertFalse(put.has(FAMILY_01,QUALIFIER_01,TS,QUALIFIER_01));
    Assert.assertFalse(put.has(QUALIFIER_01,QUALIFIER_01,TS,VALUE_01));
    Assert.assertFalse(put.has(FAMILY_01,FAMILY_01,TS,VALUE_01));
  }
}
