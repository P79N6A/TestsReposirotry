@Category({MiscTests.class,MediumTests.class}) public class TestMajorCompactor {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMajorCompactor.class);
  public static final byte[] FAMILY=Bytes.toBytes("a");
  private HBaseTestingUtility utility;
  @Before public void setUp() throws Exception {
    utility=new HBaseTestingUtility();
    utility.getConfiguration().setInt("hbase.hfile.compaction.discharger.interval",10);
    utility.startMiniCluster();
  }
  @After public void tearDown() throws Exception {
    utility.shutdownMiniCluster();
  }
  @Test public void testCompactingATable() throws Exception {
    TableName tableName=TableName.valueOf("TestMajorCompactor");
    utility.createMultiRegionTable(tableName,FAMILY,5);
    utility.waitTableAvailable(tableName);
    Connection connection=utility.getConnection();
    Table table=connection.getTable(tableName);
    for (int i=0; i < 5; i++) {
      utility.loadRandomRows(table,FAMILY,50,100);
      utility.flush(tableName);
    }
    table.close();
    int numberOfRegions=utility.getAdmin().getRegions(tableName).size();
    int numHFiles=utility.getNumHFiles(tableName,FAMILY);
    assertTrue(numberOfRegions < numHFiles);
    MajorCompactor compactor=new MajorCompactor(utility.getConfiguration(),tableName,Sets.newHashSet(Bytes.toString(FAMILY)),1,System.currentTimeMillis(),200);
    compactor.initializeWorkQueues();
    compactor.compactAllRegions();
    compactor.shutdown();
    numberOfRegions=utility.getAdmin().getRegions(tableName).size();
    numHFiles=utility.getNumHFiles(tableName,FAMILY);
    assertEquals(numHFiles,numberOfRegions);
  }
}
