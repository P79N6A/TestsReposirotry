@Category(LargeTests.class) public class TestHBaseWalOnEC {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHBaseWalOnEC.class);
  private static final HBaseTestingUtility util=new HBaseTestingUtility();
  private static final String HFLUSH="hflush";
  @BeforeClass public static void setup() throws Exception {
    try {
      MiniDFSCluster cluster=util.startMiniDFSCluster(3);
      DistributedFileSystem fs=cluster.getFileSystem();
      Method enableAllECPolicies=DFSTestUtil.class.getMethod("enableAllECPolicies",DistributedFileSystem.class);
      enableAllECPolicies.invoke(null,fs);
      DFSClient client=fs.getClient();
      Method setErasureCodingPolicy=DFSClient.class.getMethod("setErasureCodingPolicy",String.class,String.class);
      setErasureCodingPolicy.invoke(client,"/","RS-3-2-1024k");
      try (FSDataOutputStream out=fs.create(new Path("/canary"))){
        assertFalse("Did not enable EC!",CommonFSUtils.hasCapability(out,HFLUSH));
      }
     }
 catch (    NoSuchMethodException e) {
      Assume.assumeNoException("Using an older version of hadoop; EC not available.",e);
    }
    util.getConfiguration().setBoolean(CommonFSUtils.UNSAFE_STREAM_CAPABILITY_ENFORCE,true);
    util.startMiniCluster();
  }
  @AfterClass public static void tearDown() throws Exception {
    util.shutdownMiniCluster();
  }
  @Test public void testStreamCreate() throws IOException {
    try (FSDataOutputStream out=CommonFSUtils.createForWal(util.getDFSCluster().getFileSystem(),new Path("/testStreamCreate"),true)){
      assertTrue(CommonFSUtils.hasCapability(out,HFLUSH));
    }
   }
  @Test public void testFlush() throws IOException {
    byte[] row=Bytes.toBytes("row");
    byte[] cf=Bytes.toBytes("cf");
    byte[] cq=Bytes.toBytes("cq");
    byte[] value=Bytes.toBytes("value");
    TableName name=TableName.valueOf(getClass().getSimpleName());
    Table t=util.createTable(name,cf);
    t.put(new Put(row).addColumn(cf,cq,value));
    util.getAdmin().flush(name);
    assertArrayEquals(value,t.get(new Get(row)).getValue(cf,cq));
  }
}
