/** 
 * Verify that the HTableDescriptor is updated after addColumn(), deleteColumn() and modifyTable() operations.
 */
@Category({MasterTests.class,LargeTests.class}) public class TestTableDescriptorModificationFromClient {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestTableDescriptorModificationFromClient.class);
  @Rule public TestName name=new TestName();
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static TableName TABLE_NAME=null;
  private static final byte[] FAMILY_0=Bytes.toBytes("cf0");
  private static final byte[] FAMILY_1=Bytes.toBytes("cf1");
  /** 
 * Start up a mini cluster and put a small table of empty regions into it.
 * @throws Exception
 */
  @BeforeClass public static void beforeAllTests() throws Exception {
    TEST_UTIL.startMiniCluster(1);
  }
  @Before public void setup(){
    TABLE_NAME=TableName.valueOf(name.getMethodName());
  }
  @AfterClass public static void afterAllTests() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testModifyTable() throws IOException {
    Admin admin=TEST_UTIL.getAdmin();
    HTableDescriptor baseHtd=new HTableDescriptor(TABLE_NAME);
    baseHtd.addFamily(new HColumnDescriptor(FAMILY_0));
    admin.createTable(baseHtd);
    admin.disableTable(TABLE_NAME);
    try {
      verifyTableDescriptor(TABLE_NAME,FAMILY_0);
      HTableDescriptor modifiedHtd=new HTableDescriptor(TABLE_NAME);
      modifiedHtd.addFamily(new HColumnDescriptor(FAMILY_0));
      modifiedHtd.addFamily(new HColumnDescriptor(FAMILY_1));
      admin.modifyTable(TABLE_NAME,modifiedHtd);
      verifyTableDescriptor(TABLE_NAME,FAMILY_0,FAMILY_1);
    }
  finally {
      admin.deleteTable(TABLE_NAME);
    }
  }
  @Test public void testAddColumn() throws IOException {
    Admin admin=TEST_UTIL.getAdmin();
    HTableDescriptor baseHtd=new HTableDescriptor(TABLE_NAME);
    baseHtd.addFamily(new HColumnDescriptor(FAMILY_0));
    admin.createTable(baseHtd);
    admin.disableTable(TABLE_NAME);
    try {
      verifyTableDescriptor(TABLE_NAME,FAMILY_0);
      admin.addColumnFamily(TABLE_NAME,new HColumnDescriptor(FAMILY_1));
      verifyTableDescriptor(TABLE_NAME,FAMILY_0,FAMILY_1);
    }
  finally {
      admin.deleteTable(TABLE_NAME);
    }
  }
  @Test public void testAddSameColumnFamilyTwice() throws IOException {
    Admin admin=TEST_UTIL.getAdmin();
    HTableDescriptor baseHtd=new HTableDescriptor(TABLE_NAME);
    baseHtd.addFamily(new HColumnDescriptor(FAMILY_0));
    admin.createTable(baseHtd);
    admin.disableTable(TABLE_NAME);
    try {
      verifyTableDescriptor(TABLE_NAME,FAMILY_0);
      admin.addColumnFamily(TABLE_NAME,new HColumnDescriptor(FAMILY_1));
      verifyTableDescriptor(TABLE_NAME,FAMILY_0,FAMILY_1);
      try {
        admin.addColumnFamily(TABLE_NAME,new HColumnDescriptor(FAMILY_1));
        Assert.fail("Delete a non-exist column family should fail");
      }
 catch (      InvalidFamilyOperationException e) {
      }
    }
  finally {
      admin.deleteTable(TABLE_NAME);
    }
  }
  @Test public void testModifyColumnFamily() throws IOException {
    Admin admin=TEST_UTIL.getAdmin();
    HColumnDescriptor cfDescriptor=new HColumnDescriptor(FAMILY_0);
    int blockSize=cfDescriptor.getBlocksize();
    HTableDescriptor baseHtd=new HTableDescriptor(TABLE_NAME);
    baseHtd.addFamily(cfDescriptor);
    admin.createTable(baseHtd);
    admin.disableTable(TABLE_NAME);
    try {
      verifyTableDescriptor(TABLE_NAME,FAMILY_0);
      int newBlockSize=2 * blockSize;
      cfDescriptor.setBlocksize(newBlockSize);
      admin.modifyColumnFamily(TABLE_NAME,cfDescriptor);
      HTableDescriptor htd=admin.getTableDescriptor(TABLE_NAME);
      HColumnDescriptor hcfd=htd.getFamily(FAMILY_0);
      assertTrue(hcfd.getBlocksize() == newBlockSize);
    }
  finally {
      admin.deleteTable(TABLE_NAME);
    }
  }
  @Test public void testModifyNonExistingColumnFamily() throws IOException {
    Admin admin=TEST_UTIL.getAdmin();
    HColumnDescriptor cfDescriptor=new HColumnDescriptor(FAMILY_1);
    int blockSize=cfDescriptor.getBlocksize();
    HTableDescriptor baseHtd=new HTableDescriptor(TABLE_NAME);
    baseHtd.addFamily(new HColumnDescriptor(FAMILY_0));
    admin.createTable(baseHtd);
    admin.disableTable(TABLE_NAME);
    try {
      verifyTableDescriptor(TABLE_NAME,FAMILY_0);
      int newBlockSize=2 * blockSize;
      cfDescriptor.setBlocksize(newBlockSize);
      try {
        admin.modifyColumnFamily(TABLE_NAME,cfDescriptor);
        Assert.fail("Modify a non-exist column family should fail");
      }
 catch (      InvalidFamilyOperationException e) {
      }
    }
  finally {
      admin.deleteTable(TABLE_NAME);
    }
  }
  @Test public void testDeleteColumn() throws IOException {
    Admin admin=TEST_UTIL.getAdmin();
    HTableDescriptor baseHtd=new HTableDescriptor(TABLE_NAME);
    baseHtd.addFamily(new HColumnDescriptor(FAMILY_0));
    baseHtd.addFamily(new HColumnDescriptor(FAMILY_1));
    admin.createTable(baseHtd);
    admin.disableTable(TABLE_NAME);
    try {
      verifyTableDescriptor(TABLE_NAME,FAMILY_0,FAMILY_1);
      admin.deleteColumnFamily(TABLE_NAME,FAMILY_1);
      verifyTableDescriptor(TABLE_NAME,FAMILY_0);
    }
  finally {
      admin.deleteTable(TABLE_NAME);
    }
  }
  @Test public void testDeleteSameColumnFamilyTwice() throws IOException {
    Admin admin=TEST_UTIL.getAdmin();
    HTableDescriptor baseHtd=new HTableDescriptor(TABLE_NAME);
    baseHtd.addFamily(new HColumnDescriptor(FAMILY_0));
    baseHtd.addFamily(new HColumnDescriptor(FAMILY_1));
    admin.createTable(baseHtd);
    admin.disableTable(TABLE_NAME);
    try {
      verifyTableDescriptor(TABLE_NAME,FAMILY_0,FAMILY_1);
      admin.deleteColumnFamily(TABLE_NAME,FAMILY_1);
      verifyTableDescriptor(TABLE_NAME,FAMILY_0);
      try {
        admin.deleteColumnFamily(TABLE_NAME,FAMILY_1);
        Assert.fail("Delete a non-exist column family should fail");
      }
 catch (      Exception e) {
      }
    }
  finally {
      admin.deleteTable(TABLE_NAME);
    }
  }
  private void verifyTableDescriptor(  final TableName tableName,  final byte[]... families) throws IOException {
    Admin admin=TEST_UTIL.getAdmin();
    HTableDescriptor htd=admin.getTableDescriptor(tableName);
    verifyTableDescriptor(htd,tableName,families);
    MasterFileSystem mfs=TEST_UTIL.getMiniHBaseCluster().getMaster().getMasterFileSystem();
    Path tableDir=FSUtils.getTableDir(mfs.getRootDir(),tableName);
    TableDescriptor td=FSTableDescriptors.getTableDescriptorFromFs(mfs.getFileSystem(),tableDir);
    verifyTableDescriptor(td,tableName,families);
  }
  private void verifyTableDescriptor(  final TableDescriptor htd,  final TableName tableName,  final byte[]... families){
    Set<byte[]> htdFamilies=htd.getColumnFamilyNames();
    assertEquals(tableName,htd.getTableName());
    assertEquals(families.length,htdFamilies.size());
    for (    byte[] familyName : families) {
      assertTrue("Expected family " + Bytes.toString(familyName),htdFamilies.contains(familyName));
    }
  }
}
