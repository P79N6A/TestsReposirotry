@Category({ReplicationTests.class,MediumTests.class}) public class TestReplicationStateZKImpl extends TestReplicationStateBasic {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestReplicationStateZKImpl.class);
  private static Configuration conf;
  private static HBaseZKTestingUtility utility;
  private static ZKWatcher zkw;
  private static String replicationZNode;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    utility=new HBaseZKTestingUtility();
    utility.startMiniZKCluster();
    conf=utility.getConfiguration();
    conf.setBoolean(HConstants.REPLICATION_BULKLOAD_ENABLE_KEY,true);
    zkw=utility.getZooKeeperWatcher();
    String replicationZNodeName=conf.get("zookeeper.znode.replication","replication");
    replicationZNode=ZNodePaths.joinZNode(zkw.getZNodePaths().baseZNode,replicationZNodeName);
    KEY_ONE=initPeerClusterState("/hbase1");
    KEY_TWO=initPeerClusterState("/hbase2");
  }
  private static String initPeerClusterState(  String baseZKNode) throws IOException, KeeperException {
    Configuration testConf=new Configuration(conf);
    testConf.set(HConstants.ZOOKEEPER_ZNODE_PARENT,baseZKNode);
    ZKWatcher zkw1=new ZKWatcher(testConf,"test1",null);
    String fakeRs=ZNodePaths.joinZNode(zkw1.getZNodePaths().rsZNode,"hostname1.example.org:1234");
    ZKUtil.createWithParents(zkw1,fakeRs);
    ZKClusterId.setClusterId(zkw1,new ClusterId());
    return ZKConfig.getZooKeeperClusterKey(testConf);
  }
  @Before public void setUp(){
    zkTimeoutCount=0;
    rqs=ReplicationStorageFactory.getReplicationQueueStorage(zkw,conf);
    rp=ReplicationFactory.getReplicationPeers(zkw,conf);
    OUR_KEY=ZKConfig.getZooKeeperClusterKey(conf);
  }
  @After public void tearDown() throws KeeperException, IOException {
    ZKUtil.deleteNodeRecursively(zkw,replicationZNode);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    utility.shutdownMiniZKCluster();
  }
}
