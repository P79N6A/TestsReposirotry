@Category({MiscTests.class,SmallTests.class}) public class TestFSTableDescriptorForceCreation {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestFSTableDescriptorForceCreation.class);
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  @Rule public TestName name=new TestName();
  @Test public void testShouldCreateNewTableDescriptorIfForcefulCreationIsFalse() throws IOException {
    final String name=this.name.getMethodName();
    FileSystem fs=FileSystem.get(UTIL.getConfiguration());
    Path rootdir=new Path(UTIL.getDataTestDir(),name);
    FSTableDescriptors fstd=new FSTableDescriptors(UTIL.getConfiguration(),fs,rootdir);
    assertTrue("Should create new table descriptor",fstd.createTableDescriptor(TableDescriptorBuilder.newBuilder(TableName.valueOf(name)).build(),false));
  }
  @Test public void testShouldNotCreateTheSameTableDescriptorIfForcefulCreationIsFalse() throws IOException {
    final String name=this.name.getMethodName();
    FileSystem fs=FileSystem.get(UTIL.getConfiguration());
    Path rootdir=new Path(UTIL.getDataTestDir(),name);
    FSTableDescriptors fstd=new FSTableDescriptors(UTIL.getConfiguration(),fs,rootdir);
    TableDescriptor htd=TableDescriptorBuilder.newBuilder(TableName.valueOf(name)).build();
    fstd.add(htd);
    assertFalse("Should not create new table descriptor",fstd.createTableDescriptor(htd,false));
  }
  @Test public void testShouldAllowForcefulCreationOfAlreadyExistingTableDescriptor() throws Exception {
    final String name=this.name.getMethodName();
    FileSystem fs=FileSystem.get(UTIL.getConfiguration());
    Path rootdir=new Path(UTIL.getDataTestDir(),name);
    FSTableDescriptors fstd=new FSTableDescriptors(UTIL.getConfiguration(),fs,rootdir);
    TableDescriptor htd=TableDescriptorBuilder.newBuilder(TableName.valueOf(name)).build();
    fstd.createTableDescriptor(htd,false);
    assertTrue("Should create new table descriptor",fstd.createTableDescriptor(htd,true));
  }
}
