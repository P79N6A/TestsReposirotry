/** 
 * Uses the load tester
 */
@Category({IOTests.class,MediumTests.class}) public class TestLoadAndSwitchEncodeOnDisk extends TestMiniClusterLoadSequential {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestLoadAndSwitchEncodeOnDisk.class);
  /** 
 * We do not alternate the multi-put flag in this test. 
 */
  private static final boolean USE_MULTI_PUT=true;
  /** 
 * Un-parameterize the test 
 */
  @Parameters public static Collection<Object[]> parameters(){
    return Arrays.asList(new Object[][]{new Object[0]});
  }
  public TestLoadAndSwitchEncodeOnDisk(){
    super(USE_MULTI_PUT,DataBlockEncoding.PREFIX);
    conf.setBoolean(CacheConfig.CACHE_BLOCKS_ON_WRITE_KEY,true);
  }
  @Override protected int numKeys(){
    return 3000;
  }
  @Override @Test public void loadTest() throws Exception {
    Admin admin=TEST_UTIL.getAdmin();
    compression=Compression.Algorithm.GZ;
    super.loadTest();
    HColumnDescriptor hcd=getColumnDesc(admin);
    System.err.println("\nDisabling encode-on-disk. Old column descriptor: " + hcd + "\n");
    Table t=TEST_UTIL.getConnection().getTable(TABLE);
    assertAllOnLine(t);
    admin.disableTable(TABLE);
    admin.modifyColumnFamily(TABLE,hcd);
    System.err.println("\nRe-enabling table\n");
    admin.enableTable(TABLE);
    System.err.println("\nNew column descriptor: " + getColumnDesc(admin) + "\n");
    assertAllOnLine(t);
    System.err.println("\nCompacting the table\n");
    admin.majorCompact(TABLE);
    Threads.sleepWithoutInterrupt(5000);
    HRegionServer rs=TEST_UTIL.getMiniHBaseCluster().getRegionServer(0);
    while (rs.compactSplitThread.getCompactionQueueSize() > 0) {
      Threads.sleep(50);
    }
    System.err.println("\nDone with the test, shutting down the cluster\n");
  }
  private void assertAllOnLine(  final Table t) throws IOException {
    List<HRegionLocation> regions;
    try (RegionLocator rl=TEST_UTIL.getConnection().getRegionLocator(t.getName())){
      regions=rl.getAllRegionLocations();
    }
     for (    HRegionLocation e : regions) {
      byte[] startkey=e.getRegionInfo().getStartKey();
      Scan s=new Scan(startkey);
      ResultScanner scanner=t.getScanner(s);
      Result r=scanner.next();
      org.junit.Assert.assertTrue(r != null && r.size() > 0);
      scanner.close();
    }
  }
}
