/** 
 * Used to confirm that it is OK to overwrite a file which is being written currently.
 */
@Category({MiscTests.class,MediumTests.class}) public class TestOverwriteFileUnderConstruction {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestOverwriteFileUnderConstruction.class);
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static FileSystem FS;
  @Rule public final TestName name=new TestName();
  @BeforeClass public static void setUp() throws Exception {
    UTIL.startMiniDFSCluster(3);
    FS=UTIL.getDFSCluster().getFileSystem();
  }
  @AfterClass public static void tearDown() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  @Test public void testNotOverwrite() throws IOException {
    Path file=new Path("/" + name.getMethodName());
    try (FSDataOutputStream out1=FS.create(file)){
      try {
        FS.create(file,false);
        fail("Should fail as there is a file with the same name which is being written");
      }
 catch (      RemoteException e) {
        assertThat(e.unwrapRemoteException(),instanceOf(AlreadyBeingCreatedException.class));
      }
    }
   }
  @Test public void testOverwrite() throws IOException {
    Path file=new Path("/" + name.getMethodName());
    FSDataOutputStream out1=FS.create(file);
    FSDataOutputStream out2=FS.create(file,true);
    out1.write(2);
    out2.write(1);
    try {
      out1.close();
    }
 catch (    FileNotFoundException fnfe) {
    }
catch (    RemoteException e) {
      assertThat(e.unwrapRemoteException(),instanceOf(LeaseExpiredException.class));
    }
    out2.close();
    try (FSDataInputStream in=FS.open(file)){
      assertEquals(1,in.read());
      assertEquals(-1,in.read());
    }
   }
}
