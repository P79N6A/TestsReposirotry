public static class ScanObserver implements RegionCoprocessor, RegionObserver {
  private final ConcurrentMap<TableName,Long> ttls=new ConcurrentHashMap<>();
  private final ConcurrentMap<TableName,Integer> versions=new ConcurrentHashMap<>();
  @Override public Optional<RegionObserver> getRegionObserver(){
    return Optional.of(this);
  }
  @Override public void prePut(  final ObserverContext<RegionCoprocessorEnvironment> c,  final Put put,  final WALEdit edit,  final Durability durability) throws IOException {
    if (put.getAttribute("ttl") != null) {
      Cell cell=put.getFamilyCellMap().values().stream().findFirst().get().get(0);
      ttls.put(TableName.valueOf(Bytes.toString(cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength())),Bytes.toLong(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength()));
      c.bypass();
    }
 else     if (put.getAttribute("versions") != null) {
      Cell cell=put.getFamilyCellMap().values().stream().findFirst().get().get(0);
      versions.put(TableName.valueOf(Bytes.toString(cell.getQualifierArray(),cell.getQualifierOffset(),cell.getQualifierLength())),Bytes.toInt(cell.getValueArray(),cell.getValueOffset(),cell.getValueLength()));
      c.bypass();
    }
  }
  private InternalScanner wrap(  Store store,  InternalScanner scanner){
    Long ttl=this.ttls.get(store.getTableName());
    Integer version=this.versions.get(store.getTableName());
    return new DelegatingInternalScanner(scanner){
      private byte[] row;
      private byte[] qualifier;
      private int count;
      private Predicate<Cell> checkTtl(      long now,      long ttl){
        return c -> now - c.getTimestamp() > ttl;
      }
      private Predicate<Cell> checkVersion(      Cell firstCell,      int version){
        if (version == 0) {
          return c -> true;
        }
 else {
          if (row == null || !CellUtil.matchingRows(firstCell,row)) {
            row=CellUtil.cloneRow(firstCell);
            qualifier=null;
          }
          return c -> {
            if (qualifier != null && CellUtil.matchingQualifier(c,qualifier)) {
              if (count >= version) {
                return true;
              }
              count++;
              return false;
            }
 else {
              qualifier=CellUtil.cloneQualifier(c);
              count=1;
              return false;
            }
          }
;
        }
      }
      @Override public boolean next(      List<Cell> result,      ScannerContext scannerContext) throws IOException {
        boolean moreRows=scanner.next(result,scannerContext);
        if (result.isEmpty()) {
          return moreRows;
        }
        long now=EnvironmentEdgeManager.currentTime();
        Predicate<Cell> predicate=null;
        if (ttl != null) {
          predicate=checkTtl(now,ttl);
        }
        if (version != null) {
          Predicate<Cell> vp=checkVersion(result.get(0),version);
          if (predicate != null) {
            predicate=predicate.and(vp);
          }
 else {
            predicate=vp;
          }
        }
        if (predicate != null) {
          result.removeIf(predicate);
        }
        return moreRows;
      }
    }
;
  }
  @Override public InternalScanner preFlush(  ObserverContext<RegionCoprocessorEnvironment> c,  Store store,  InternalScanner scanner,  FlushLifeCycleTracker tracker) throws IOException {
    return wrap(store,scanner);
  }
  @Override public InternalScanner preCompact(  ObserverContext<RegionCoprocessorEnvironment> c,  Store store,  InternalScanner scanner,  ScanType scanType,  CompactionLifeCycleTracker tracker,  CompactionRequest request) throws IOException {
    return wrap(store,scanner);
  }
  @Override public void preGetOp(  ObserverContext<RegionCoprocessorEnvironment> c,  Get get,  List<Cell> result) throws IOException {
    TableName tableName=c.getEnvironment().getRegion().getTableDescriptor().getTableName();
    Long ttl=this.ttls.get(tableName);
    if (ttl != null) {
      get.setTimeRange(EnvironmentEdgeManager.currentTime() - ttl,get.getTimeRange().getMax());
    }
    Integer version=this.versions.get(tableName);
    if (version != null) {
      get.readVersions(version);
    }
  }
  @Override public void preScannerOpen(  ObserverContext<RegionCoprocessorEnvironment> c,  Scan scan) throws IOException {
    Region region=c.getEnvironment().getRegion();
    TableName tableName=region.getTableDescriptor().getTableName();
    Long ttl=this.ttls.get(tableName);
    if (ttl != null) {
      scan.setTimeRange(EnvironmentEdgeManager.currentTime() - ttl,scan.getTimeRange().getMax());
    }
    Integer version=this.versions.get(tableName);
    if (version != null) {
      scan.readVersions(version);
    }
  }
}
