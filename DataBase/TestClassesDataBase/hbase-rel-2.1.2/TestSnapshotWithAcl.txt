@Category({MediumTests.class,ClientTests.class}) public class TestSnapshotWithAcl extends SecureTestUtil {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSnapshotWithAcl.class);
  public TableName TEST_TABLE=TableName.valueOf(TEST_UTIL.getRandomUUID().toString());
  private static final int ROW_COUNT=30000;
  private static byte[] TEST_FAMILY=Bytes.toBytes("f1");
  private static byte[] TEST_QUALIFIER=Bytes.toBytes("cq");
  private static byte[] TEST_ROW=Bytes.toBytes(0);
  private static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static Configuration conf;
  private static HBaseAdmin admin=null;
  private static User USER_OWNER;
  private static User USER_RW;
  private static User USER_RO;
  private static User USER_NONE;
static class AccessReadAction implements AccessTestAction {
    private TableName tableName;
    public AccessReadAction(    TableName tableName){
      this.tableName=tableName;
    }
    @Override public Object run() throws Exception {
      Get g=new Get(TEST_ROW);
      g.addFamily(TEST_FAMILY);
      try (Connection conn=ConnectionFactory.createConnection(conf)){
        try (Table t=conn.getTable(tableName)){
          t.get(g);
        }
       }
       return null;
    }
  }
static class AccessWriteAction implements AccessTestAction {
    private TableName tableName;
    public AccessWriteAction(    TableName tableName){
      this.tableName=tableName;
    }
    @Override public Object run() throws Exception {
      Put p=new Put(TEST_ROW);
      p.addColumn(TEST_FAMILY,TEST_QUALIFIER,Bytes.toBytes(0));
      try (Connection conn=ConnectionFactory.createConnection(conf)){
        try (Table t=conn.getTable(tableName)){
          t.put(p);
        }
       }
       return null;
    }
  }
  @BeforeClass public static void setupBeforeClass() throws Exception {
    conf=TEST_UTIL.getConfiguration();
    enableSecurity(conf);
    conf.set(CoprocessorHost.REGION_COPROCESSOR_CONF_KEY,AccessController.class.getName());
    verifyConfiguration(conf);
    conf.setBoolean(AccessControlConstants.EXEC_PERMISSION_CHECKS_KEY,true);
    TEST_UTIL.startMiniCluster();
    TEST_UTIL.waitUntilAllRegionsAssigned(AccessControlLists.ACL_TABLE_NAME);
    MasterCoprocessorHost cpHost=TEST_UTIL.getMiniHBaseCluster().getMaster().getMasterCoprocessorHost();
    cpHost.load(AccessController.class,Coprocessor.PRIORITY_HIGHEST,conf);
    USER_OWNER=User.createUserForTesting(conf,"owner",new String[0]);
    USER_RW=User.createUserForTesting(conf,"rwuser",new String[0]);
    USER_RO=User.createUserForTesting(conf,"rouser",new String[0]);
    USER_NONE=User.createUserForTesting(conf,"usernone",new String[0]);
  }
  @Before public void setUp() throws Exception {
    admin=TEST_UTIL.getHBaseAdmin();
    HTableDescriptor htd=new HTableDescriptor(TEST_TABLE);
    HColumnDescriptor hcd=new HColumnDescriptor(TEST_FAMILY);
    hcd.setMaxVersions(100);
    htd.addFamily(hcd);
    htd.setOwner(USER_OWNER);
    admin.createTable(htd,new byte[][]{Bytes.toBytes("s")});
    TEST_UTIL.waitTableEnabled(TEST_TABLE);
    grantOnTable(TEST_UTIL,USER_RW.getShortName(),TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ,Permission.Action.WRITE);
    grantOnTable(TEST_UTIL,USER_RO.getShortName(),TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ);
  }
  private void loadData() throws IOException {
    try (Connection conn=ConnectionFactory.createConnection(conf)){
      try (Table t=conn.getTable(TEST_TABLE)){
        for (int i=0; i < ROW_COUNT; i++) {
          Put put=new Put(Bytes.toBytes(i));
          put.addColumn(TEST_FAMILY,TEST_QUALIFIER,Bytes.toBytes(i));
          t.put(put);
        }
      }
     }
   }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  private void verifyRows(  TableName tableName) throws IOException {
    try (Connection conn=ConnectionFactory.createConnection(conf)){
      try (Table t=conn.getTable(tableName)){
        try (ResultScanner scanner=t.getScanner(new Scan())){
          Result result;
          int rowCount=0;
          while ((result=scanner.next()) != null) {
            byte[] value=result.getValue(TEST_FAMILY,TEST_QUALIFIER);
            Assert.assertArrayEquals(value,Bytes.toBytes(rowCount++));
          }
          Assert.assertEquals(ROW_COUNT,rowCount);
        }
       }
     }
   }
  @Test public void testRestoreSnapshot() throws Exception {
    verifyAllowed(new AccessReadAction(TEST_TABLE),USER_OWNER,USER_RO,USER_RW);
    verifyDenied(new AccessReadAction(TEST_TABLE),USER_NONE);
    verifyAllowed(new AccessWriteAction(TEST_TABLE),USER_OWNER,USER_RW);
    verifyDenied(new AccessWriteAction(TEST_TABLE),USER_RO,USER_NONE);
    loadData();
    verifyRows(TEST_TABLE);
    String snapshotName1=TEST_UTIL.getRandomUUID().toString();
    admin.snapshot(snapshotName1,TEST_TABLE);
    TableName tableName1=TableName.valueOf(TEST_UTIL.getRandomUUID().toString());
    admin.cloneSnapshot(snapshotName1,tableName1,true);
    verifyRows(tableName1);
    verifyAllowed(new AccessReadAction(tableName1),USER_OWNER,USER_RO,USER_RW);
    verifyDenied(new AccessReadAction(tableName1),USER_NONE);
    verifyAllowed(new AccessWriteAction(tableName1),USER_OWNER,USER_RW);
    verifyDenied(new AccessWriteAction(tableName1),USER_RO,USER_NONE);
    TableName tableName2=TableName.valueOf(TEST_UTIL.getRandomUUID().toString());
    admin.cloneSnapshot(snapshotName1,tableName2,false);
    verifyRows(tableName2);
    verifyAllowed(new AccessReadAction(tableName2),USER_OWNER);
    verifyDenied(new AccessReadAction(tableName2),USER_NONE,USER_RO,USER_RW);
    verifyAllowed(new AccessWriteAction(tableName2),USER_OWNER);
    verifyDenied(new AccessWriteAction(tableName2),USER_RO,USER_RW,USER_NONE);
    revokeFromTable(TEST_UTIL,USER_RO.getShortName(),TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ);
    verifyAllowed(new AccessReadAction(TEST_TABLE),USER_OWNER,USER_RW);
    verifyDenied(new AccessReadAction(TEST_TABLE),USER_RO,USER_NONE);
    verifyAllowed(new AccessWriteAction(TEST_TABLE),USER_OWNER,USER_RW);
    verifyDenied(new AccessWriteAction(TEST_TABLE),USER_RO,USER_NONE);
    admin.disableTable(TEST_TABLE);
    admin.restoreSnapshot(snapshotName1,false,false);
    admin.enableTable(TEST_TABLE);
    verifyAllowed(new AccessReadAction(TEST_TABLE),USER_OWNER,USER_RW);
    verifyDenied(new AccessReadAction(TEST_TABLE),USER_RO,USER_NONE);
    verifyAllowed(new AccessWriteAction(TEST_TABLE),USER_OWNER,USER_RW);
    verifyDenied(new AccessWriteAction(TEST_TABLE),USER_RO,USER_NONE);
    admin.disableTable(TEST_TABLE);
    admin.restoreSnapshot(snapshotName1,false,true);
    admin.enableTable(TEST_TABLE);
    verifyAllowed(new AccessReadAction(TEST_TABLE),USER_OWNER,USER_RO,USER_RW);
    verifyDenied(new AccessReadAction(TEST_TABLE),USER_NONE);
    verifyAllowed(new AccessWriteAction(TEST_TABLE),USER_OWNER,USER_RW);
    verifyDenied(new AccessWriteAction(TEST_TABLE),USER_RO,USER_NONE);
  }
}
