@RunWith(Parameterized.class) @Category({SecurityTests.class,MediumTests.class}) public class TestGenerateDelegationToken extends SecureTestCluster {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestGenerateDelegationToken.class);
  @BeforeClass public static void setUp() throws Exception {
    SecureTestCluster.setUp();
    try (Connection conn=ConnectionFactory.createConnection(TEST_UTIL.getConfiguration())){
      Token<? extends TokenIdentifier> token=TokenUtil.obtainToken(conn);
      UserGroupInformation.getCurrentUser().addToken(token);
    }
   }
  @Parameters(name="{index}: rpcClientImpl={0}") public static Collection<Object[]> parameters(){
    return Arrays.asList(new Object[]{BlockingRpcClient.class.getName()},new Object[]{NettyRpcClient.class.getName()});
  }
  @Parameter public String rpcClientImpl;
  @Before public void setUpBeforeMethod(){
    TEST_UTIL.getConfiguration().set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY,rpcClientImpl);
  }
  @Test public void test() throws Exception {
    try (Connection conn=ConnectionFactory.createConnection(TEST_UTIL.getConfiguration());Table table=conn.getTable(TableName.META_TABLE_NAME)){
      CoprocessorRpcChannel rpcChannel=table.coprocessorService(HConstants.EMPTY_START_ROW);
      AuthenticationProtos.AuthenticationService.BlockingInterface service=AuthenticationProtos.AuthenticationService.newBlockingStub(rpcChannel);
      WhoAmIResponse response=service.whoAmI(null,WhoAmIRequest.getDefaultInstance());
      assertEquals(USERNAME,response.getUsername());
      assertEquals(AuthenticationMethod.TOKEN.name(),response.getAuthMethod());
      try {
        service.getAuthenticationToken(null,GetAuthenticationTokenRequest.getDefaultInstance());
      }
 catch (      ServiceException e) {
        IOException ioe=ProtobufUtil.getRemoteException(e);
        assertThat(ioe,instanceOf(AccessDeniedException.class));
        assertThat(ioe.getMessage(),containsString("Token generation only allowed for Kerberos authenticated clients"));
      }
    }
   }
}
