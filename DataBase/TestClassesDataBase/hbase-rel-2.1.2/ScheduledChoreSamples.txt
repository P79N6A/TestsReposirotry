/** 
 * A few ScheduledChore samples that are useful for testing with ChoreService
 */
public static class ScheduledChoreSamples {
  /** 
 * Straight forward stopper implementation that is used by default when one is not provided
 */
public static class SampleStopper implements Stoppable {
    private boolean stopped=false;
    @Override public void stop(    String why){
      stopped=true;
    }
    @Override public boolean isStopped(){
      return stopped;
    }
  }
  /** 
 * Sleeps for longer than the scheduled period. This chore always misses its scheduled periodic executions
 */
public static class SlowChore extends ScheduledChore {
    public SlowChore(    String name,    int period){
      this(name,new SampleStopper(),period);
    }
    public SlowChore(    String name,    Stoppable stopper,    int period){
      super(name,stopper,period);
    }
    @Override protected boolean initialChore(){
      try {
        Thread.sleep(getPeriod() * 2);
      }
 catch (      InterruptedException e) {
        log.warn("",e);
      }
      return true;
    }
    @Override protected void chore(){
      try {
        Thread.sleep(getPeriod() * 2);
      }
 catch (      InterruptedException e) {
        log.warn("",e);
      }
    }
  }
  /** 
 * Lightweight ScheduledChore used primarily to fill the scheduling queue in tests
 */
public static class DoNothingChore extends ScheduledChore {
    public DoNothingChore(    String name,    int period){
      super(name,new SampleStopper(),period);
    }
    public DoNothingChore(    String name,    Stoppable stopper,    int period){
      super(name,stopper,period);
    }
    @Override protected void chore(){
    }
  }
public static class SleepingChore extends ScheduledChore {
    private int sleepTime;
    public SleepingChore(    String name,    int chorePeriod,    int sleepTime){
      this(name,new SampleStopper(),chorePeriod,sleepTime);
    }
    public SleepingChore(    String name,    Stoppable stopper,    int period,    int sleepTime){
      super(name,stopper,period);
      this.sleepTime=sleepTime;
    }
    @Override protected boolean initialChore(){
      try {
        Thread.sleep(sleepTime);
      }
 catch (      InterruptedException e) {
        log.warn("",e);
      }
      return true;
    }
    @Override protected void chore(){
      try {
        Thread.sleep(sleepTime);
      }
 catch (      Exception e) {
        log.warn("",e);
      }
    }
  }
public static class CountingChore extends ScheduledChore {
    private int countOfChoreCalls;
    private boolean outputOnTicks=false;
    public CountingChore(    String name,    int period){
      this(name,new SampleStopper(),period);
    }
    public CountingChore(    String name,    Stoppable stopper,    int period){
      this(name,stopper,period,false);
    }
    public CountingChore(    String name,    Stoppable stopper,    int period,    final boolean outputOnTicks){
      super(name,stopper,period);
      this.countOfChoreCalls=0;
      this.outputOnTicks=outputOnTicks;
    }
    @Override protected boolean initialChore(){
      countOfChoreCalls++;
      if (outputOnTicks) {
        outputTickCount();
      }
      return true;
    }
    @Override protected void chore(){
      countOfChoreCalls++;
      if (outputOnTicks) {
        outputTickCount();
      }
    }
    private void outputTickCount(){
      log.info("Chore: " + getName() + ". Count of chore calls: "+ countOfChoreCalls);
    }
    public int getCountOfChoreCalls(){
      return countOfChoreCalls;
    }
    public boolean isOutputtingOnTicks(){
      return outputOnTicks;
    }
    public void setOutputOnTicks(    boolean o){
      outputOnTicks=o;
    }
  }
  /** 
 * A Chore that will try to execute the initial chore a few times before succeeding. Once the initial chore is complete the chore cancels itself
 */
public static class FailInitialChore extends ScheduledChore {
    private int numberOfFailures;
    private int failureThreshold;
    /** 
 * @param failThreshold Number of times the Chore fails when trying to execute initialChorebefore succeeding.
 */
    public FailInitialChore(    String name,    int period,    int failThreshold){
      this(name,new SampleStopper(),period,failThreshold);
    }
    public FailInitialChore(    String name,    Stoppable stopper,    int period,    int failThreshold){
      super(name,stopper,period);
      numberOfFailures=0;
      failureThreshold=failThreshold;
    }
    @Override protected boolean initialChore(){
      if (numberOfFailures < failureThreshold) {
        numberOfFailures++;
        return false;
      }
 else {
        return true;
      }
    }
    @Override protected void chore(){
      assertTrue(numberOfFailures == failureThreshold);
      cancel(false);
    }
  }
}
