static class VisibilityGenerator extends Generator {
  private static final Logger LOG=LoggerFactory.getLogger(VisibilityGenerator.class);
  @Override protected void createSchema() throws IOException {
    LOG.info("Creating tables");
    boolean acl=AccessControlClient.isAccessControllerRunning(ConnectionFactory.createConnection(getConf()));
    if (!acl) {
      LOG.info("No ACL available.");
    }
    try (Connection conn=ConnectionFactory.createConnection(getConf());Admin admin=conn.getAdmin()){
      for (int i=0; i < DEFAULT_TABLES_COUNT; i++) {
        TableName tableName=IntegrationTestBigLinkedListWithVisibility.getTableName(i);
        createTable(admin,tableName,false,acl);
      }
      TableName tableName=TableName.valueOf(COMMON_TABLE_NAME);
      createTable(admin,tableName,true,acl);
    }
   }
  private void createTable(  Admin admin,  TableName tableName,  boolean setVersion,  boolean acl) throws IOException {
    if (!admin.tableExists(tableName)) {
      HTableDescriptor htd=new HTableDescriptor(tableName);
      HColumnDescriptor family=new HColumnDescriptor(FAMILY_NAME);
      if (setVersion) {
        family.setMaxVersions(DEFAULT_TABLES_COUNT);
      }
      htd.addFamily(family);
      admin.createTable(htd);
      if (acl) {
        LOG.info("Granting permissions for user " + USER.getShortName());
        Permission.Action[] actions={Permission.Action.READ};
        try {
          AccessControlClient.grant(ConnectionFactory.createConnection(getConf()),tableName,USER.getShortName(),null,null,actions);
        }
 catch (        Throwable e) {
          LOG.error(HBaseMarkers.FATAL,"Error in granting permission for the user " + USER.getShortName(),e);
          throw new IOException(e);
        }
      }
    }
  }
  @Override protected void setMapperForGenerator(  Job job){
    job.setMapperClass(VisibilityGeneratorMapper.class);
  }
static class VisibilityGeneratorMapper extends GeneratorMapper {
    BufferedMutator[] tables=new BufferedMutator[DEFAULT_TABLES_COUNT];
    @Override protected void setup(    org.apache.hadoop.mapreduce.Mapper.Context context) throws IOException, InterruptedException {
      super.setup(context);
    }
    @Override protected void instantiateHTable() throws IOException {
      for (int i=0; i < DEFAULT_TABLES_COUNT; i++) {
        BufferedMutatorParams params=new BufferedMutatorParams(getTableName(i));
        params.writeBufferSize(4 * 1024 * 1024);
        BufferedMutator table=connection.getBufferedMutator(params);
        this.tables[i]=table;
      }
    }
    @Override protected void cleanup(    org.apache.hadoop.mapreduce.Mapper.Context context) throws IOException, InterruptedException {
      for (int i=0; i < DEFAULT_TABLES_COUNT; i++) {
        if (tables[i] != null) {
          tables[i].close();
        }
      }
    }
    @Override protected void persist(    org.apache.hadoop.mapreduce.Mapper.Context output,    long count,    byte[][] prev,    byte[][] current,    byte[] id) throws IOException {
      String visibilityExps="";
      String[] split=labels.split(COMMA);
      for (int i=0; i < current.length; i++) {
        for (int j=0; j < DEFAULT_TABLES_COUNT; j++) {
          Put put=new Put(current[i]);
          byte[] value=prev == null ? NO_KEY : prev[i];
          put.addColumn(FAMILY_NAME,COLUMN_PREV,value);
          if (count >= 0) {
            put.addColumn(FAMILY_NAME,COLUMN_COUNT,Bytes.toBytes(count + i));
          }
          if (id != null) {
            put.addColumn(FAMILY_NAME,COLUMN_CLIENT,id);
          }
          visibilityExps=split[j * 2] + OR + split[(j * 2) + 1];
          put.setCellVisibility(new CellVisibility(visibilityExps));
          tables[j].mutate(put);
          try {
            Thread.sleep(1);
          }
 catch (          InterruptedException e) {
            throw new IOException();
          }
        }
        if (i % 1000 == 0) {
          output.progress();
        }
      }
    }
  }
}
