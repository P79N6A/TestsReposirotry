@Category({MasterTests.class,MediumTests.class}) public class TestDeleteTableProcedure extends TestTableDDLProcedureBase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestDeleteTableProcedure.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestDeleteTableProcedure.class);
  @Rule public TestName name=new TestName();
  @Test(expected=TableNotFoundException.class) public void testDeleteNotExistentTable() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    ProcedurePrepareLatch latch=new ProcedurePrepareLatch.CompatibilityLatch();
    long procId=ProcedureTestingUtility.submitAndWait(procExec,new DeleteTableProcedure(procExec.getEnvironment(),tableName,latch));
    latch.await();
  }
  @Test(expected=TableNotDisabledException.class) public void testDeleteNotDisabledTable() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    MasterProcedureTestingUtility.createTable(procExec,tableName,null,"f");
    ProcedurePrepareLatch latch=new ProcedurePrepareLatch.CompatibilityLatch();
    long procId=ProcedureTestingUtility.submitAndWait(procExec,new DeleteTableProcedure(procExec.getEnvironment(),tableName,latch));
    latch.await();
  }
  @Test public void testDeleteDeletedTable() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    RegionInfo[] regions=MasterProcedureTestingUtility.createTable(procExec,tableName,null,"f");
    UTIL.getAdmin().disableTable(tableName);
    long procId1=procExec.submitProcedure(new DeleteTableProcedure(procExec.getEnvironment(),tableName));
    long procId2=procExec.submitProcedure(new DeleteTableProcedure(procExec.getEnvironment(),tableName));
    ProcedureTestingUtility.waitProcedure(procExec,procId1);
    ProcedureTestingUtility.waitProcedure(procExec,procId2);
    ProcedureTestingUtility.assertProcNotFailed(procExec,procId1);
    MasterProcedureTestingUtility.validateTableDeletion(getMaster(),tableName);
    Procedure<?> result=procExec.getResult(procId2);
    assertTrue(result.isFailed());
    LOG.debug("Delete failed with exception: " + result.getException());
    assertTrue(ProcedureTestingUtility.getExceptionCause(result) instanceof TableNotFoundException);
  }
  @Test public void testSimpleDelete() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final byte[][] splitKeys=null;
    testSimpleDelete(tableName,splitKeys);
  }
  @Test public void testSimpleDeleteWithSplits() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final byte[][] splitKeys=new byte[][]{Bytes.toBytes("a"),Bytes.toBytes("b"),Bytes.toBytes("c")};
    testSimpleDelete(tableName,splitKeys);
  }
  private void testSimpleDelete(  final TableName tableName,  byte[][] splitKeys) throws Exception {
    RegionInfo[] regions=MasterProcedureTestingUtility.createTable(getMasterProcedureExecutor(),tableName,splitKeys,"f1","f2");
    UTIL.getAdmin().disableTable(tableName);
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    long procId=ProcedureTestingUtility.submitAndWait(procExec,new DeleteTableProcedure(procExec.getEnvironment(),tableName));
    ProcedureTestingUtility.assertProcNotFailed(procExec,procId);
    MasterProcedureTestingUtility.validateTableDeletion(getMaster(),tableName);
  }
  @Test public void testRecoveryAndDoubleExecution() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    byte[][] splitKeys=null;
    RegionInfo[] regions=MasterProcedureTestingUtility.createTable(getMasterProcedureExecutor(),tableName,splitKeys,"f1","f2");
    UTIL.getAdmin().disableTable(tableName);
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    ProcedureTestingUtility.waitNoProcedureRunning(procExec);
    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec,true);
    long procId=procExec.submitProcedure(new DeleteTableProcedure(procExec.getEnvironment(),tableName));
    MasterProcedureTestingUtility.testRecoveryAndDoubleExecution(procExec,procId);
    MasterProcedureTestingUtility.validateTableDeletion(getMaster(),tableName);
  }
}
