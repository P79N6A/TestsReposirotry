@Category({MediumTests.class,ClientTests.class}) public class TestReplicaWithCluster {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestReplicaWithCluster.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestReplicaWithCluster.class);
  private static final int NB_SERVERS=3;
  private static final byte[] row=TestReplicaWithCluster.class.getName().getBytes();
  private static final HBaseTestingUtility HTU=new HBaseTestingUtility();
  private static HBaseTestingUtility HTU2;
  private static final byte[] f=HConstants.CATALOG_FAMILY;
  private final static int REFRESH_PERIOD=1000;
  private final static int META_SCAN_TIMEOUT_IN_MILLISEC=200;
  /** 
 * This copro is used to synchronize the tests.
 */
public static class SlowMeCopro implements RegionCoprocessor, RegionObserver {
    static final AtomicLong sleepTime=new AtomicLong(0);
    static final AtomicReference<CountDownLatch> cdl=new AtomicReference<>(new CountDownLatch(0));
    public SlowMeCopro(){
    }
    @Override public Optional<RegionObserver> getRegionObserver(){
      return Optional.of(this);
    }
    @Override public void preGetOp(    final ObserverContext<RegionCoprocessorEnvironment> e,    final Get get,    final List<Cell> results) throws IOException {
      if (e.getEnvironment().getRegion().getRegionInfo().getReplicaId() == 0) {
        CountDownLatch latch=cdl.get();
        try {
          if (sleepTime.get() > 0) {
            LOG.info("Sleeping for " + sleepTime.get() + " ms");
            Thread.sleep(sleepTime.get());
          }
 else           if (latch.getCount() > 0) {
            LOG.info("Waiting for the counterCountDownLatch");
            latch.await(2,TimeUnit.MINUTES);
            if (latch.getCount() > 0) {
              throw new RuntimeException("Can't wait more");
            }
          }
        }
 catch (        InterruptedException e1) {
          LOG.error(e1.toString(),e1);
        }
      }
 else {
        LOG.info("We're not the primary replicas.");
      }
    }
  }
  /** 
 * This copro is used to simulate region server down exception for Get and Scan
 */
@CoreCoprocessor public static class RegionServerStoppedCopro implements RegionCoprocessor, RegionObserver {
    public RegionServerStoppedCopro(){
    }
    @Override public Optional<RegionObserver> getRegionObserver(){
      return Optional.of(this);
    }
    @Override public void preGetOp(    final ObserverContext<RegionCoprocessorEnvironment> e,    final Get get,    final List<Cell> results) throws IOException {
      int replicaId=e.getEnvironment().getRegion().getRegionInfo().getReplicaId();
      if (e.getEnvironment().getRegion().getRegionInfo().getReplicaId() <= 1) {
        LOG.info("Throw Region Server Stopped Exceptoin for replica id " + replicaId);
        throw new RegionServerStoppedException("Server " + e.getEnvironment().getServerName() + " not running");
      }
 else {
        LOG.info("We're replica region " + replicaId);
      }
    }
    @Override public void preScannerOpen(    final ObserverContext<RegionCoprocessorEnvironment> e,    final Scan scan) throws IOException {
      int replicaId=e.getEnvironment().getRegion().getRegionInfo().getReplicaId();
      if (e.getEnvironment().getRegion().getRegionInfo().getReplicaId() <= 1) {
        LOG.info("Throw Region Server Stopped Exceptoin for replica id " + replicaId);
        throw new RegionServerStoppedException("Server " + e.getEnvironment().getServerName() + " not running");
      }
 else {
        LOG.info("We're replica region " + replicaId);
      }
    }
  }
  /** 
 * This copro is used to slow down the primary meta region scan a bit
 */
public static class RegionServerHostingPrimayMetaRegionSlowOrStopCopro implements RegionCoprocessor, RegionObserver {
    static boolean slowDownPrimaryMetaScan=false;
    static boolean throwException=false;
    @Override public Optional<RegionObserver> getRegionObserver(){
      return Optional.of(this);
    }
    @Override public void preGetOp(    final ObserverContext<RegionCoprocessorEnvironment> e,    final Get get,    final List<Cell> results) throws IOException {
      int replicaId=e.getEnvironment().getRegion().getRegionInfo().getReplicaId();
      if (throwException) {
        if (!e.getEnvironment().getRegion().getRegionInfo().isMetaRegion() && (replicaId == 0)) {
          LOG.info("Get, throw Region Server Stopped Exceptoin for region " + e.getEnvironment().getRegion().getRegionInfo());
          throw new RegionServerStoppedException("Server " + e.getEnvironment().getServerName() + " not running");
        }
      }
 else {
        LOG.info("Get, We're replica region " + replicaId);
      }
    }
    @Override public void preScannerOpen(    final ObserverContext<RegionCoprocessorEnvironment> e,    final Scan scan) throws IOException {
      int replicaId=e.getEnvironment().getRegion().getRegionInfo().getReplicaId();
      if (e.getEnvironment().getRegion().getRegionInfo().isMetaRegion() && (replicaId == 0)) {
        if (slowDownPrimaryMetaScan) {
          LOG.info("Scan with primary meta region, slow down a bit");
          try {
            Thread.sleep(META_SCAN_TIMEOUT_IN_MILLISEC - 50);
          }
 catch (          InterruptedException ie) {
          }
        }
        if (throwException) {
          LOG.info("Scan, throw Region Server Stopped Exceptoin for replica " + e.getEnvironment().getRegion().getRegionInfo());
          throw new RegionServerStoppedException("Server " + e.getEnvironment().getServerName() + " not running");
        }
 else {
          LOG.info("Scan, We're replica region " + replicaId);
        }
      }
 else {
        LOG.info("Scan, We're replica region " + replicaId);
      }
    }
  }
  @BeforeClass public static void beforeClass() throws Exception {
    HTU.getConfiguration().setInt(StorefileRefresherChore.REGIONSERVER_STOREFILE_REFRESH_PERIOD,REFRESH_PERIOD);
    HTU.getConfiguration().setFloat("hbase.regionserver.logroll.multiplier",0.0001f);
    HTU.getConfiguration().setInt("replication.source.size.capacity",10240);
    HTU.getConfiguration().setLong("replication.source.sleepforretries",100);
    HTU.getConfiguration().setInt("hbase.regionserver.maxlogs",2);
    HTU.getConfiguration().setLong("hbase.master.logcleaner.ttl",10);
    HTU.getConfiguration().setInt("zookeeper.recovery.retry",1);
    HTU.getConfiguration().setInt("zookeeper.recovery.retry.intervalmill",10);
    HTU.getConfiguration().setInt("hbase.client.primaryCallTimeout.get",1000000);
    HTU.getConfiguration().setInt("hbase.client.primaryCallTimeout.scan",1000000);
    HTU.getConfiguration().setInt("hbase.client.retries.number",1);
    HTU.getConfiguration().setInt("hbase.meta.replica.count",2);
    HTU.getConfiguration().set("hbase.balancer.tablesOnMaster","none");
    HTU.getConfiguration().set("hbase.coprocessor.region.classes",RegionServerHostingPrimayMetaRegionSlowOrStopCopro.class.getName());
    HTU.getConfiguration().setInt(HConstants.HBASE_CLIENT_META_REPLICA_SCAN_TIMEOUT,META_SCAN_TIMEOUT_IN_MILLISEC * 1000);
    HTU.startMiniCluster(NB_SERVERS);
    HTU.getHBaseCluster().startMaster();
  }
  @AfterClass public static void afterClass() throws Exception {
    if (HTU2 != null)     HTU2.shutdownMiniCluster();
    HTU.shutdownMiniCluster();
  }
  @Test public void testCreateDeleteTable() throws IOException {
    HTableDescriptor hdt=HTU.createTableDescriptor("testCreateDeleteTable");
    hdt.setRegionReplication(NB_SERVERS);
    hdt.addCoprocessor(SlowMeCopro.class.getName());
    Table table=HTU.createTable(hdt,new byte[][]{f},null);
    Put p=new Put(row);
    p.addColumn(f,row,row);
    table.put(p);
    Get g=new Get(row);
    Result r=table.get(g);
    Assert.assertFalse(r.isStale());
    try {
      SlowMeCopro.cdl.set(new CountDownLatch(1));
      g=new Get(row);
      g.setConsistency(Consistency.TIMELINE);
      r=table.get(g);
      Assert.assertTrue(r.isStale());
      SlowMeCopro.cdl.get().countDown();
    }
  finally {
      SlowMeCopro.cdl.get().countDown();
      SlowMeCopro.sleepTime.set(0);
    }
    HTU.getAdmin().disableTable(hdt.getTableName());
    HTU.deleteTable(hdt.getTableName());
  }
  @Test public void testChangeTable() throws Exception {
    TableDescriptor td=TableDescriptorBuilder.newBuilder(TableName.valueOf("testChangeTable")).setRegionReplication(NB_SERVERS).setCoprocessor(SlowMeCopro.class.getName()).setColumnFamily(ColumnFamilyDescriptorBuilder.of(f)).build();
    HTU.getAdmin().createTable(td);
    Table table=HTU.getConnection().getTable(td.getTableName());
    Put p=new Put(row);
    p.addColumn(f,row,row);
    table.put(p);
    Get g=new Get(row);
    Result r=table.get(g);
    Assert.assertFalse(r.isStale());
    TableDescriptor bHdt=HTU.getAdmin().getDescriptor(td.getTableName());
    td=TableDescriptorBuilder.newBuilder(td).setColumnFamily(ColumnFamilyDescriptorBuilder.of(row)).build();
    HTU.getAdmin().disableTable(td.getTableName());
    HTU.getAdmin().modifyTable(td);
    HTU.getAdmin().enableTable(td.getTableName());
    TableDescriptor nHdt=HTU.getAdmin().getDescriptor(td.getTableName());
    Assert.assertEquals("fams=" + Arrays.toString(nHdt.getColumnFamilies()),bHdt.getColumnFamilyCount() + 1,nHdt.getColumnFamilyCount());
    p=new Put(row);
    p.addColumn(row,row,row);
    table.put(p);
    g=new Get(row);
    r=table.get(g);
    Assert.assertFalse(r.isStale());
    try {
      SlowMeCopro.cdl.set(new CountDownLatch(1));
      g=new Get(row);
      g.setConsistency(Consistency.TIMELINE);
      r=table.get(g);
      Assert.assertTrue(r.isStale());
    }
  finally {
      SlowMeCopro.cdl.get().countDown();
      SlowMeCopro.sleepTime.set(0);
    }
    Admin admin=HTU.getAdmin();
    nHdt=admin.getDescriptor(td.getTableName());
    Assert.assertEquals("fams=" + Arrays.toString(nHdt.getColumnFamilies()),bHdt.getColumnFamilyCount() + 1,nHdt.getColumnFamilyCount());
    admin.disableTable(td.getTableName());
    admin.deleteTable(td.getTableName());
    admin.close();
  }
  @SuppressWarnings("deprecation") @Test public void testReplicaAndReplication() throws Exception {
    HTableDescriptor hdt=HTU.createTableDescriptor("testReplicaAndReplication");
    hdt.setRegionReplication(NB_SERVERS);
    HColumnDescriptor fam=new HColumnDescriptor(row);
    fam.setScope(HConstants.REPLICATION_SCOPE_GLOBAL);
    hdt.addFamily(fam);
    hdt.addCoprocessor(SlowMeCopro.class.getName());
    HTU.getAdmin().createTable(hdt,HBaseTestingUtility.KEYS_FOR_HBA_CREATE_TABLE);
    Configuration conf2=HBaseConfiguration.create(HTU.getConfiguration());
    conf2.set(HConstants.HBASE_CLIENT_INSTANCE_ID,String.valueOf(-1));
    conf2.set(HConstants.ZOOKEEPER_ZNODE_PARENT,"/2");
    MiniZooKeeperCluster miniZK=HTU.getZkCluster();
    HTU2=new HBaseTestingUtility(conf2);
    HTU2.setZkCluster(miniZK);
    HTU2.startMiniCluster(NB_SERVERS);
    LOG.info("Setup second Zk");
    HTU2.getAdmin().createTable(hdt,HBaseTestingUtility.KEYS_FOR_HBA_CREATE_TABLE);
    ReplicationAdmin admin=new ReplicationAdmin(HTU.getConfiguration());
    ReplicationPeerConfig rpc=new ReplicationPeerConfig();
    rpc.setClusterKey(HTU2.getClusterKey());
    admin.addPeer("2",rpc,null);
    admin.close();
    Put p=new Put(row);
    p.addColumn(row,row,row);
    final Table table=HTU.getConnection().getTable(hdt.getTableName());
    table.put(p);
    HTU.getAdmin().flush(table.getName());
    LOG.info("Put & flush done on the first cluster. Now doing a get on the same cluster.");
    Waiter.waitFor(HTU.getConfiguration(),1000,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        try {
          SlowMeCopro.cdl.set(new CountDownLatch(1));
          Get g=new Get(row);
          g.setConsistency(Consistency.TIMELINE);
          Result r=table.get(g);
          Assert.assertTrue(r.isStale());
          return !r.isEmpty();
        }
  finally {
          SlowMeCopro.cdl.get().countDown();
          SlowMeCopro.sleepTime.set(0);
        }
      }
    }
);
    table.close();
    LOG.info("stale get on the first cluster done. Now for the second.");
    final Table table2=HTU.getConnection().getTable(hdt.getTableName());
    Waiter.waitFor(HTU.getConfiguration(),1000,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        try {
          SlowMeCopro.cdl.set(new CountDownLatch(1));
          Get g=new Get(row);
          g.setConsistency(Consistency.TIMELINE);
          Result r=table2.get(g);
          Assert.assertTrue(r.isStale());
          return !r.isEmpty();
        }
  finally {
          SlowMeCopro.cdl.get().countDown();
          SlowMeCopro.sleepTime.set(0);
        }
      }
    }
);
    table2.close();
    HTU.getAdmin().disableTable(hdt.getTableName());
    HTU.deleteTable(hdt.getTableName());
    HTU2.getAdmin().disableTable(hdt.getTableName());
    HTU2.deleteTable(hdt.getTableName());
  }
  @Test public void testBulkLoad() throws IOException {
    LOG.debug("Creating test table");
    HTableDescriptor hdt=HTU.createTableDescriptor("testBulkLoad");
    hdt.setRegionReplication(NB_SERVERS);
    hdt.addCoprocessor(SlowMeCopro.class.getName());
    Table table=HTU.createTable(hdt,new byte[][]{f},null);
    LOG.debug("Creating test data");
    Path dir=HTU.getDataTestDirOnTestFS("testBulkLoad");
    final int numRows=10;
    final byte[] qual=Bytes.toBytes("qual");
    final byte[] val=Bytes.toBytes("val");
    final List<Pair<byte[],String>> famPaths=new ArrayList<>();
    for (    HColumnDescriptor col : hdt.getColumnFamilies()) {
      Path hfile=new Path(dir,col.getNameAsString());
      TestHRegionServerBulkLoad.createHFile(HTU.getTestFileSystem(),hfile,col.getName(),qual,val,numRows);
      famPaths.add(new Pair<>(col.getName(),hfile.toString()));
    }
    LOG.debug("Loading test data");
    final ClusterConnection conn=(ClusterConnection)HTU.getAdmin().getConnection();
    table=conn.getTable(hdt.getTableName());
    final String bulkToken=new SecureBulkLoadClient(HTU.getConfiguration(),table).prepareBulkLoad(conn);
    ClientServiceCallable<Void> callable=new ClientServiceCallable<Void>(conn,hdt.getTableName(),TestHRegionServerBulkLoad.rowkey(0),new RpcControllerFactory(HTU.getConfiguration()).newController(),HConstants.PRIORITY_UNSET){
      @Override protected Void rpcCall() throws Exception {
        LOG.debug("Going to connect to server " + getLocation() + " for row "+ Bytes.toStringBinary(getRow()));
        SecureBulkLoadClient secureClient=null;
        byte[] regionName=getLocation().getRegionInfo().getRegionName();
        try (Table table=conn.getTable(getTableName())){
          secureClient=new SecureBulkLoadClient(HTU.getConfiguration(),table);
          secureClient.secureBulkLoadHFiles(getStub(),famPaths,regionName,true,null,bulkToken);
        }
         return null;
      }
    }
;
    RpcRetryingCallerFactory factory=new RpcRetryingCallerFactory(HTU.getConfiguration());
    RpcRetryingCaller<Void> caller=factory.newCaller();
    caller.callWithRetries(callable,10000);
    LOG.debug("Verifying data load");
    for (int i=0; i < numRows; i++) {
      byte[] row=TestHRegionServerBulkLoad.rowkey(i);
      Get g=new Get(row);
      Result r=table.get(g);
      Assert.assertFalse(r.isStale());
    }
    LOG.debug("Verifying replica queries");
    try {
      SlowMeCopro.cdl.set(new CountDownLatch(1));
      for (int i=0; i < numRows; i++) {
        byte[] row=TestHRegionServerBulkLoad.rowkey(i);
        Get g=new Get(row);
        g.setConsistency(Consistency.TIMELINE);
        Result r=table.get(g);
        Assert.assertTrue(r.isStale());
      }
      SlowMeCopro.cdl.get().countDown();
    }
  finally {
      SlowMeCopro.cdl.get().countDown();
      SlowMeCopro.sleepTime.set(0);
    }
    HTU.getAdmin().disableTable(hdt.getTableName());
    HTU.deleteTable(hdt.getTableName());
  }
  @Test public void testReplicaGetWithPrimaryDown() throws IOException {
    HTableDescriptor hdt=HTU.createTableDescriptor("testCreateDeleteTable");
    hdt.setRegionReplication(NB_SERVERS);
    hdt.addCoprocessor(RegionServerStoppedCopro.class.getName());
    try {
      Table table=HTU.createTable(hdt,new byte[][]{f},null);
      Put p=new Put(row);
      p.addColumn(f,row,row);
      table.put(p);
      HTU.flush(table.getName());
      try {
        Thread.sleep(2 * REFRESH_PERIOD);
      }
 catch (      InterruptedException e1) {
        LOG.error(e1.toString(),e1);
      }
      Get g=new Get(row);
      g.setConsistency(Consistency.TIMELINE);
      Result r=table.get(g);
      Assert.assertTrue(r.isStale());
    }
  finally {
      HTU.getAdmin().disableTable(hdt.getTableName());
      HTU.deleteTable(hdt.getTableName());
    }
  }
  @Test public void testReplicaScanWithPrimaryDown() throws IOException {
    HTableDescriptor hdt=HTU.createTableDescriptor("testCreateDeleteTable");
    hdt.setRegionReplication(NB_SERVERS);
    hdt.addCoprocessor(RegionServerStoppedCopro.class.getName());
    try {
      Table table=HTU.createTable(hdt,new byte[][]{f},null);
      Put p=new Put(row);
      p.addColumn(f,row,row);
      table.put(p);
      HTU.flush(table.getName());
      try {
        Thread.sleep(2 * REFRESH_PERIOD);
      }
 catch (      InterruptedException e1) {
        LOG.error(e1.toString(),e1);
      }
      Scan scan=new Scan();
      scan.addFamily(f);
      scan.setConsistency(Consistency.TIMELINE);
      ResultScanner scanner=table.getScanner(scan);
      Result r=scanner.next();
      Assert.assertTrue(r.isStale());
    }
  finally {
      HTU.getAdmin().disableTable(hdt.getTableName());
      HTU.deleteTable(hdt.getTableName());
    }
  }
  @Test public void testReplicaGetWithRpcClientImpl() throws IOException {
    HTU.getConfiguration().setBoolean("hbase.ipc.client.specificThreadForWriting",true);
    HTU.getConfiguration().set("hbase.rpc.client.impl","org.apache.hadoop.hbase.ipc.RpcClientImpl");
    HTableDescriptor hdt=HTU.createTableDescriptor("testReplicaGetWithRpcClientImpl");
    hdt.setRegionReplication(NB_SERVERS);
    hdt.addCoprocessor(SlowMeCopro.class.getName());
    try {
      Table table=HTU.createTable(hdt,new byte[][]{f},null);
      Put p=new Put(row);
      p.addColumn(f,row,row);
      table.put(p);
      HTU.flush(table.getName());
      try {
        Thread.sleep(2 * REFRESH_PERIOD);
      }
 catch (      InterruptedException e1) {
        LOG.error(e1.toString(),e1);
      }
      try {
        Connection connection=ConnectionFactory.createConnection(HTU.getConfiguration());
        Table t=connection.getTable(hdt.getTableName());
        SlowMeCopro.cdl.set(new CountDownLatch(1));
        Get g=new Get(row);
        g.setConsistency(Consistency.TIMELINE);
        Result r=t.get(g);
        Assert.assertTrue(r.isStale());
        SlowMeCopro.cdl.get().countDown();
      }
  finally {
        SlowMeCopro.cdl.get().countDown();
        SlowMeCopro.sleepTime.set(0);
      }
    }
  finally {
      HTU.getConfiguration().unset("hbase.ipc.client.specificThreadForWriting");
      HTU.getConfiguration().unset("hbase.rpc.client.impl");
      HTU.getAdmin().disableTable(hdt.getTableName());
      HTU.deleteTable(hdt.getTableName());
    }
  }
  @Test public void testGetRegionLocationFromPrimaryMetaRegion() throws IOException, InterruptedException {
    HTU.getAdmin().setBalancerRunning(false,true);
    ((ConnectionImplementation)HTU.getAdmin().getConnection()).setUseMetaReplicas(true);
    HTableDescriptor hdt=HTU.createTableDescriptor("testGetRegionLocationFromPrimaryMetaRegion");
    hdt.setRegionReplication(2);
    try {
      HTU.createTable(hdt,new byte[][]{f},null);
      RegionServerHostingPrimayMetaRegionSlowOrStopCopro.slowDownPrimaryMetaScan=true;
      RegionLocations url=((ClusterConnection)HTU.getConnection()).locateRegion(hdt.getTableName(),row,false,false);
    }
  finally {
      RegionServerHostingPrimayMetaRegionSlowOrStopCopro.slowDownPrimaryMetaScan=false;
      ((ConnectionImplementation)HTU.getAdmin().getConnection()).setUseMetaReplicas(false);
      HTU.getAdmin().setBalancerRunning(true,true);
      HTU.getAdmin().disableTable(hdt.getTableName());
      HTU.deleteTable(hdt.getTableName());
    }
  }
  @Test public void testReplicaGetWithPrimaryAndMetaDown() throws IOException, InterruptedException {
    HTU.getAdmin().setBalancerRunning(false,true);
    ((ConnectionImplementation)HTU.getAdmin().getConnection()).setUseMetaReplicas(true);
    HTableDescriptor hdt=HTU.createTableDescriptor("testReplicaGetWithPrimaryAndMetaDown");
    hdt.setRegionReplication(2);
    try {
      Table table=HTU.createTable(hdt,new byte[][]{f},null);
      RegionLocations mrl=((ClusterConnection)HTU.getConnection()).locateRegion(TableName.META_TABLE_NAME,HConstants.EMPTY_START_ROW,false,false);
      RegionLocations url=((ClusterConnection)HTU.getConnection()).locateRegion(hdt.getTableName(),row,false,false);
      if (!url.getDefaultRegionLocation().getServerName().equals(mrl.getDefaultRegionLocation().getServerName())) {
        HTU.moveRegionAndWait(url.getDefaultRegionLocation().getRegionInfo(),mrl.getDefaultRegionLocation().getServerName());
      }
      if (url.getRegionLocation(1).getServerName().equals(mrl.getDefaultRegionLocation().getServerName())) {
        HTU.moveRegionAndWait(url.getRegionLocation(1).getRegionInfo(),url.getDefaultRegionLocation().getServerName());
      }
      while (true) {
        mrl=((ClusterConnection)HTU.getConnection()).locateRegion(TableName.META_TABLE_NAME,HConstants.EMPTY_START_ROW,false,false);
        url=((ClusterConnection)HTU.getConnection()).locateRegion(hdt.getTableName(),row,false,true);
        LOG.info("meta locations " + mrl);
        LOG.info("table locations " + url);
        ServerName a=url.getDefaultRegionLocation().getServerName();
        ServerName b=mrl.getDefaultRegionLocation().getServerName();
        if (a.equals(b)) {
          break;
        }
 else {
          LOG.info("Waiting for new region info to be updated in meta table");
          Thread.sleep(100);
        }
      }
      Put p=new Put(row);
      p.addColumn(f,row,row);
      table.put(p);
      HTU.flush(table.getName());
      try {
        Thread.sleep(2 * REFRESH_PERIOD);
      }
 catch (      InterruptedException e1) {
        LOG.error(e1.toString(),e1);
      }
      RegionServerHostingPrimayMetaRegionSlowOrStopCopro.throwException=true;
      Get g=new Get(row);
      g.setConsistency(Consistency.TIMELINE);
      Result r=table.get(g);
      Assert.assertTrue(r.isStale());
      r=table.get(g);
      Assert.assertTrue(r.isStale());
    }
  finally {
      ((ConnectionImplementation)HTU.getAdmin().getConnection()).setUseMetaReplicas(false);
      RegionServerHostingPrimayMetaRegionSlowOrStopCopro.throwException=false;
      HTU.getAdmin().setBalancerRunning(true,true);
      HTU.getAdmin().disableTable(hdt.getTableName());
      HTU.deleteTable(hdt.getTableName());
    }
  }
}
