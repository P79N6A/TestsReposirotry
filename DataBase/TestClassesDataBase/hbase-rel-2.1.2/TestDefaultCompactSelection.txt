@Category(SmallTests.class) public class TestDefaultCompactSelection extends TestCompactionPolicy {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestDefaultCompactSelection.class);
  @Override protected void config(){
    super.config();
    this.conf.setLong(HStore.BLOCKING_STOREFILES_KEY,10);
  }
  @Test public void testCompactionRatio() throws IOException {
    TimeOffsetEnvironmentEdge edge=new TimeOffsetEnvironmentEdge();
    EnvironmentEdgeManager.injectEdge(edge);
    long tooBig=maxSize + 1;
    compactEquals(sfCreate(100,50,23,12,12),23,12,12);
    compactEquals(sfCreate(100,50,25,12,12));
    compactEquals(sfCreate(tooBig,tooBig,700,700,700),700,700,700);
    compactEquals(sfCreate(tooBig,tooBig,700,700));
    compactEquals(sfCreate(7,1,1),7,1,1);
    compactEquals(sfCreate(7,6,5,4,3,2,1),5,4,3,2,1);
    compactEquals(sfCreate(50,10,10,10,10),10,10,10,10);
    compactEquals(sfCreate(10,10,10,10,50),10,10,10,10);
    compactEquals(sfCreate(251,253,251,maxSize - 1),251,253,251);
    compactEquals(sfCreate(maxSize - 1,maxSize - 1,maxSize - 1));
    this.conf.setLong("hbase.hstore.compaction.min.size",1);
    store.storeEngine.getCompactionPolicy().setConf(conf);
    compactEquals(sfCreate(512,256,128,64,32,16,8,4,2,1),4,2,1);
    this.conf.setLong("hbase.hstore.compaction.min.size",minSize);
    store.storeEngine.getCompactionPolicy().setConf(conf);
    compactEquals(sfCreate(50,25,12,12),true,50,25,12,12);
    compactEquals(sfCreate(12,12),true,12,12);
    compactEquals(sfCreate(tooBig,12,12),true,tooBig,12,12);
    store.forceMajor=true;
    compactEquals(sfCreate(7,6,5,4,3,2,1),5,4,3,2,1);
    store.forceMajor=false;
    compactEquals(sfCreate(100,50,23,12,12),true,23,12,12);
    conf.setLong(HConstants.MAJOR_COMPACTION_PERIOD,1);
    conf.setFloat("hbase.hregion.majorcompaction.jitter",0);
    store.storeEngine.getCompactionPolicy().setConf(conf);
    try {
      List<HStoreFile> candidates=sfCreate(50,25,12,12);
      edge.increment(2);
      compactEquals(candidates,50,25,12,12);
      candidates=sfCreate(100,50,23,12,12);
      edge.increment(2);
      compactEquals(candidates,23,12,12);
    }
  finally {
      conf.setLong(HConstants.MAJOR_COMPACTION_PERIOD,1000 * 60 * 60* 24);
      conf.setFloat("hbase.hregion.majorcompaction.jitter",0.20F);
    }
    compactEquals(sfCreate(true,100,50,25,12,12),100,50,25,12,12);
    compactEquals(sfCreate(true,tooBig,12,12),tooBig,12,12);
    compactEquals(sfCreate(true,7,6,5,4,3,2,1),7,6,5,4,3);
    compactEquals(new ArrayList<>());
    compactEquals(sfCreate(tooBig,tooBig));
  }
  @Test public void testOffPeakCompactionRatio() throws IOException {
    this.conf.setFloat("hbase.hstore.compaction.ratio.offpeak",5.0F);
    store.storeEngine.getCompactionPolicy().setConf(this.conf);
    compactEquals(sfCreate(999,50,12,12,1),false,true,50,12,12,1);
    compactEquals(sfCreate(999,50,12,12,1),12,12,1);
  }
  @Test public void testStuckStoreCompaction() throws IOException {
    compactEquals(sfCreate(99,99,99,99,99,99,30,30,30,30),30,30,30);
    compactEquals(sfCreate(99,99,99,99,99,30,30,30,30),99,30,30,30,30);
    compactEquals(sfCreate(99,99,99,99,99,99,30,30,30,15),30,30,30,15);
    compactEquals(sfCreate(99,99,99,99,30,26,26,29,25,25),30,26,26);
    compactEquals(sfCreate(99,99,99,99,27,27,27,20,20,20),20,20,20);
  }
  @Test public void testCompactionEmptyHFile() throws IOException {
    ScanInfo oldScanInfo=store.getScanInfo();
    ScanInfo newScanInfo=oldScanInfo.customize(oldScanInfo.getMaxVersions(),600,oldScanInfo.getKeepDeletedCells());
    store.setScanInfo(newScanInfo);
    List<HStoreFile> candidates=sfCreate(0);
    for (    HStoreFile file : candidates) {
      if (file instanceof MockHStoreFile) {
        MockHStoreFile mockFile=(MockHStoreFile)file;
        mockFile.setTimeRangeTracker(TimeRangeTracker.create(TimeRangeTracker.Type.SYNC,-1,-1));
        mockFile.setEntries(0);
      }
    }
    CompactionRequestImpl result=((RatioBasedCompactionPolicy)store.storeEngine.getCompactionPolicy()).selectCompaction(candidates,new ArrayList<>(),false,false,false);
    Assert.assertTrue(result.getFiles().isEmpty());
    store.setScanInfo(oldScanInfo);
  }
}
