static class DummyNodeFailoverWorker extends Thread {
  private Map<String,Set<String>> logZnodesMap;
  Server server;
  private ServerName deadRS;
  ReplicationQueueStorage rq;
  public DummyNodeFailoverWorker(  ServerName deadRS,  Server s) throws Exception {
    this.deadRS=deadRS;
    this.server=s;
    this.rq=ReplicationStorageFactory.getReplicationQueueStorage(server.getZooKeeper(),server.getConfiguration());
  }
  @Override public void run(){
    try {
      logZnodesMap=new HashMap<>();
      List<String> queues=rq.getAllQueues(deadRS);
      for (      String queue : queues) {
        Pair<String,SortedSet<String>> pair=rq.claimQueue(deadRS,queue,server.getServerName());
        if (pair != null) {
          logZnodesMap.put(pair.getFirst(),pair.getSecond());
        }
      }
      server.abort("Done with testing",null);
    }
 catch (    Exception e) {
      LOG.error("Got exception while running NodeFailoverWorker",e);
    }
 finally {
      latch.countDown();
    }
  }
  /** 
 * @return 1 when the map is not empty.
 */
  private int isLogZnodesMapPopulated(){
    Collection<Set<String>> sets=logZnodesMap.values();
    if (sets.size() > 1) {
      throw new RuntimeException("unexpected size of logZnodesMap: " + sets.size());
    }
    if (sets.size() == 1) {
      Set<String> s=sets.iterator().next();
      for (      String file : files) {
        if (!s.contains(file)) {
          return 0;
        }
      }
      return 1;
    }
    return 0;
  }
}
