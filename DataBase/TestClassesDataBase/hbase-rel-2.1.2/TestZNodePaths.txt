@Category({ZKTests.class,SmallTests.class}) public class TestZNodePaths {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestZNodePaths.class);
  @Test public void testIsClientReadable(){
    ZNodePaths znodePaths=new ZNodePaths(HBaseConfiguration.create());
    assertTrue(znodePaths.isClientReadable(znodePaths.baseZNode));
    assertTrue(znodePaths.isClientReadable(znodePaths.getZNodeForReplica(0)));
    assertTrue(znodePaths.isClientReadable(znodePaths.masterAddressZNode));
    assertTrue(znodePaths.isClientReadable(znodePaths.clusterIdZNode));
    assertTrue(znodePaths.isClientReadable(znodePaths.tableZNode));
    assertTrue(znodePaths.isClientReadable(ZNodePaths.joinZNode(znodePaths.tableZNode,"foo")));
    assertTrue(znodePaths.isClientReadable(znodePaths.rsZNode));
    assertFalse(znodePaths.isClientReadable(znodePaths.tableLockZNode));
    assertFalse(znodePaths.isClientReadable(znodePaths.balancerZNode));
    assertFalse(znodePaths.isClientReadable(znodePaths.regionNormalizerZNode));
    assertFalse(znodePaths.isClientReadable(znodePaths.clusterStateZNode));
    assertFalse(znodePaths.isClientReadable(znodePaths.drainingZNode));
    assertFalse(znodePaths.isClientReadable(znodePaths.splitLogZNode));
    assertFalse(znodePaths.isClientReadable(znodePaths.backupMasterAddressesZNode));
  }
}
