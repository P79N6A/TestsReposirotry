@Category({MiscTests.class,SmallTests.class}) public class TestReusablePoolMap extends PoolMapTestBase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestReusablePoolMap.class);
  @Override protected PoolType getPoolType(){
    return PoolType.Reusable;
  }
  @Test public void testSingleThreadedClient() throws InterruptedException, ExecutionException {
    Random rand=ThreadLocalRandom.current();
    String randomKey=String.valueOf(rand.nextInt());
    String randomValue=String.valueOf(rand.nextInt());
    runThread(randomKey,randomValue,randomValue);
    assertEquals(0,poolMap.size(randomKey));
  }
  @Test public void testMultiThreadedClients() throws InterruptedException, ExecutionException {
    Random rand=ThreadLocalRandom.current();
    for (int i=0; i < POOL_SIZE; i++) {
      String randomKey=String.valueOf(rand.nextInt());
      String randomValue=String.valueOf(rand.nextInt());
      runThread(randomKey,randomValue,randomValue);
      assertEquals(0,poolMap.size(randomKey));
    }
    poolMap.clear();
    String randomKey=String.valueOf(rand.nextInt());
    for (int i=0; i < POOL_SIZE - 1; i++) {
      String randomValue=String.valueOf(rand.nextInt());
      runThread(randomKey,randomValue,randomValue);
      assertEquals(0,poolMap.size(randomKey));
    }
    assertEquals(0,poolMap.size(randomKey));
  }
  @Test public void testPoolCap() throws InterruptedException, ExecutionException {
    Random rand=ThreadLocalRandom.current();
    String randomKey=String.valueOf(rand.nextInt());
    List<String> randomValues=new ArrayList<>();
    for (int i=0; i < POOL_SIZE * 2; i++) {
      String randomValue=String.valueOf(rand.nextInt());
      randomValues.add(randomValue);
      runThread(randomKey,randomValue,randomValue);
    }
    assertEquals(0,poolMap.size(randomKey));
  }
}
