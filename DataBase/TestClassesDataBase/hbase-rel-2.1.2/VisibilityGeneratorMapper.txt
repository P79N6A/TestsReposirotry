static class VisibilityGeneratorMapper extends GeneratorMapper {
  BufferedMutator[] tables=new BufferedMutator[DEFAULT_TABLES_COUNT];
  @Override protected void setup(  org.apache.hadoop.mapreduce.Mapper.Context context) throws IOException, InterruptedException {
    super.setup(context);
  }
  @Override protected void instantiateHTable() throws IOException {
    for (int i=0; i < DEFAULT_TABLES_COUNT; i++) {
      BufferedMutatorParams params=new BufferedMutatorParams(getTableName(i));
      params.writeBufferSize(4 * 1024 * 1024);
      BufferedMutator table=connection.getBufferedMutator(params);
      this.tables[i]=table;
    }
  }
  @Override protected void cleanup(  org.apache.hadoop.mapreduce.Mapper.Context context) throws IOException, InterruptedException {
    for (int i=0; i < DEFAULT_TABLES_COUNT; i++) {
      if (tables[i] != null) {
        tables[i].close();
      }
    }
  }
  @Override protected void persist(  org.apache.hadoop.mapreduce.Mapper.Context output,  long count,  byte[][] prev,  byte[][] current,  byte[] id) throws IOException {
    String visibilityExps="";
    String[] split=labels.split(COMMA);
    for (int i=0; i < current.length; i++) {
      for (int j=0; j < DEFAULT_TABLES_COUNT; j++) {
        Put put=new Put(current[i]);
        byte[] value=prev == null ? NO_KEY : prev[i];
        put.addColumn(FAMILY_NAME,COLUMN_PREV,value);
        if (count >= 0) {
          put.addColumn(FAMILY_NAME,COLUMN_COUNT,Bytes.toBytes(count + i));
        }
        if (id != null) {
          put.addColumn(FAMILY_NAME,COLUMN_CLIENT,id);
        }
        visibilityExps=split[j * 2] + OR + split[(j * 2) + 1];
        put.setCellVisibility(new CellVisibility(visibilityExps));
        tables[j].mutate(put);
        try {
          Thread.sleep(1);
        }
 catch (        InterruptedException e) {
          throw new IOException();
        }
      }
      if (i % 1000 == 0) {
        output.progress();
      }
    }
  }
}
