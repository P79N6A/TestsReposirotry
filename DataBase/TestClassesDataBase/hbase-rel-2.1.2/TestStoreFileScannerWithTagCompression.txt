@Category({RegionServerTests.class,SmallTests.class}) public class TestStoreFileScannerWithTagCompression {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestStoreFileScannerWithTagCompression.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static Configuration conf=TEST_UTIL.getConfiguration();
  private static CacheConfig cacheConf=new CacheConfig(TEST_UTIL.getConfiguration());
  private static String ROOT_DIR=TEST_UTIL.getDataTestDir("TestStoreFileScannerWithTagCompression").toString();
  private static FileSystem fs=null;
  @BeforeClass public static void setUp() throws IOException {
    conf.setInt("hfile.format.version",3);
    fs=FileSystem.get(conf);
  }
  @Test public void testReseek() throws Exception {
    Path f=new Path(ROOT_DIR,"testReseek");
    HFileContext meta=new HFileContextBuilder().withBlockSize(8 * 1024).withIncludesTags(true).withCompressTags(true).withDataBlockEncoding(DataBlockEncoding.PREFIX).build();
    StoreFileWriter writer=new StoreFileWriter.Builder(conf,cacheConf,fs).withFilePath(f).withFileContext(meta).build();
    writeStoreFile(writer);
    writer.close();
    StoreFileReader reader=new StoreFileReader(fs,f,cacheConf,true,new AtomicInteger(0),true,conf);
    StoreFileScanner s=reader.getStoreFileScanner(false,false,false,0,0,false);
    try {
      KeyValue k=KeyValueUtil.createFirstOnRow(Bytes.toBytes("k2"));
      s.reseek(k);
      Cell kv=s.next();
      kv=s.next();
      kv=s.next();
      byte[] key5=Bytes.toBytes("k5");
      assertTrue(Bytes.equals(key5,0,key5.length,kv.getRowArray(),kv.getRowOffset(),kv.getRowLength()));
      List<Tag> tags=PrivateCellUtil.getTags(kv);
      assertEquals(1,tags.size());
      assertEquals("tag3",Bytes.toString(Tag.cloneValue(tags.get(0))));
    }
  finally {
      s.close();
    }
  }
  private void writeStoreFile(  final StoreFileWriter writer) throws IOException {
    byte[] fam=Bytes.toBytes("f");
    byte[] qualifier=Bytes.toBytes("q");
    long now=System.currentTimeMillis();
    byte[] b=Bytes.toBytes("k1");
    Tag t1=new ArrayBackedTag((byte)1,"tag1");
    Tag t2=new ArrayBackedTag((byte)2,"tag2");
    Tag t3=new ArrayBackedTag((byte)3,"tag3");
    try {
      writer.append(new KeyValue(b,fam,qualifier,now,b,new Tag[]{t1}));
      b=Bytes.toBytes("k3");
      writer.append(new KeyValue(b,fam,qualifier,now,b,new Tag[]{t2,t1}));
      b=Bytes.toBytes("k4");
      writer.append(new KeyValue(b,fam,qualifier,now,b,new Tag[]{t3}));
      b=Bytes.toBytes("k5");
      writer.append(new KeyValue(b,fam,qualifier,now,b,new Tag[]{t3}));
    }
  finally {
      writer.close();
    }
  }
}
