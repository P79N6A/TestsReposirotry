@Category({RegionServerTests.class,MediumTests.class}) public class TestSCVFWithMiniCluster {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSCVFWithMiniCluster.class);
  private static final TableName HBASE_TABLE_NAME=TableName.valueOf("TestSCVFWithMiniCluster");
  private static final byte[] FAMILY_A=Bytes.toBytes("a");
  private static final byte[] FAMILY_B=Bytes.toBytes("b");
  private static final byte[] QUALIFIER_FOO=Bytes.toBytes("foo");
  private static final byte[] QUALIFIER_BAR=Bytes.toBytes("bar");
  private static Table htable;
  private static Filter scanFilter;
  private int expected=1;
  @BeforeClass public static void setUp() throws Exception {
    HBaseTestingUtility util=new HBaseTestingUtility();
    util.startMiniCluster(1);
    Admin admin=util.getAdmin();
    destroy(admin,HBASE_TABLE_NAME);
    create(admin,HBASE_TABLE_NAME,FAMILY_A,FAMILY_B);
    admin.close();
    htable=util.getConnection().getTable(HBASE_TABLE_NAME);
    List<Put> puts=new ArrayList<>();
    Put put=new Put(Bytes.toBytes("1"));
    put.setDurability(Durability.SKIP_WAL);
    put.addColumn(FAMILY_A,QUALIFIER_FOO,Bytes.toBytes("false"));
    put.addColumn(FAMILY_A,QUALIFIER_BAR,Bytes.toBytes("_flag_"));
    put.addColumn(FAMILY_B,QUALIFIER_FOO,Bytes.toBytes("_flag_"));
    put.addColumn(FAMILY_B,QUALIFIER_BAR,Bytes.toBytes("_flag_"));
    puts.add(put);
    put=new Put(Bytes.toBytes("2"));
    put.setDurability(Durability.SKIP_WAL);
    put.addColumn(FAMILY_A,QUALIFIER_FOO,Bytes.toBytes("true"));
    put.addColumn(FAMILY_A,QUALIFIER_BAR,Bytes.toBytes("_flag_"));
    put.addColumn(FAMILY_B,QUALIFIER_FOO,Bytes.toBytes("_flag_"));
    put.addColumn(FAMILY_B,QUALIFIER_BAR,Bytes.toBytes("_flag_"));
    puts.add(put);
    put=new Put(Bytes.toBytes("3"));
    put.setDurability(Durability.SKIP_WAL);
    put.addColumn(FAMILY_A,QUALIFIER_BAR,Bytes.toBytes("_flag_"));
    put.addColumn(FAMILY_B,QUALIFIER_FOO,Bytes.toBytes("_flag_"));
    put.addColumn(FAMILY_B,QUALIFIER_BAR,Bytes.toBytes("_flag_"));
    puts.add(put);
    htable.put(puts);
    scanFilter=new SingleColumnValueFilter(FAMILY_A,QUALIFIER_FOO,CompareOp.EQUAL,new BinaryComparator(Bytes.toBytes("false")));
    ((SingleColumnValueFilter)scanFilter).setFilterIfMissing(true);
  }
  @AfterClass public static void tearDown() throws Exception {
    htable.close();
  }
  private void verify(  Scan scan) throws IOException {
    ResultScanner scanner=htable.getScanner(scan);
    Iterator<Result> it=scanner.iterator();
    int count=0;
    try {
      while (it.hasNext()) {
        it.next();
        count++;
      }
    }
  finally {
      scanner.close();
    }
    assertEquals(expected,count);
  }
  /** 
 * Test the filter by adding all columns of family A in the scan. (OK)
 */
  @Test public void scanWithAllQualifiersOfFamiliyA() throws IOException {
    Scan scan=new Scan();
    scan.addFamily(FAMILY_A);
    scan.setFilter(scanFilter);
    verify(scan);
  }
  /** 
 * Test the filter by adding all columns of family A and B in the scan. (KO: row '3' without 'a:foo' qualifier is returned)
 */
  @Test public void scanWithAllQualifiersOfBothFamilies() throws IOException {
    Scan scan=new Scan();
    scan.setFilter(scanFilter);
    verify(scan);
  }
  /** 
 * Test the filter by adding 2 columns of family A and 1 column of family B in the scan. (KO: row '3' without 'a:foo' qualifier is returned)
 */
  @Test public void scanWithSpecificQualifiers1() throws IOException {
    Scan scan=new Scan();
    scan.addColumn(FAMILY_A,QUALIFIER_FOO);
    scan.addColumn(FAMILY_A,QUALIFIER_BAR);
    scan.addColumn(FAMILY_B,QUALIFIER_BAR);
    scan.addColumn(FAMILY_B,QUALIFIER_FOO);
    scan.setFilter(scanFilter);
    verify(scan);
  }
  /** 
 * Test the filter by adding 1 column of family A (the one used in the filter) and 1 column of family B in the scan. (OK)
 */
  @Test public void scanWithSpecificQualifiers2() throws IOException {
    Scan scan=new Scan();
    scan.addColumn(FAMILY_A,QUALIFIER_FOO);
    scan.addColumn(FAMILY_B,QUALIFIER_BAR);
    scan.setFilter(scanFilter);
    verify(scan);
  }
  /** 
 * Test the filter by adding 2 columns of family A in the scan. (OK)
 */
  @Test public void scanWithSpecificQualifiers3() throws IOException {
    Scan scan=new Scan();
    scan.addColumn(FAMILY_A,QUALIFIER_FOO);
    scan.addColumn(FAMILY_A,QUALIFIER_BAR);
    scan.setFilter(scanFilter);
    verify(scan);
  }
  private static void create(  Admin admin,  TableName tableName,  byte[]... families) throws IOException {
    HTableDescriptor desc=new HTableDescriptor(tableName);
    for (    byte[] family : families) {
      HColumnDescriptor colDesc=new HColumnDescriptor(family);
      colDesc.setMaxVersions(1);
      colDesc.setCompressionType(Algorithm.GZ);
      desc.addFamily(colDesc);
    }
    try {
      admin.createTable(desc);
    }
 catch (    TableExistsException tee) {
    }
  }
  private static void destroy(  Admin admin,  TableName tableName) throws IOException {
    try {
      admin.disableTable(tableName);
      admin.deleteTable(tableName);
    }
 catch (    TableNotFoundException tnfe) {
    }
  }
}
