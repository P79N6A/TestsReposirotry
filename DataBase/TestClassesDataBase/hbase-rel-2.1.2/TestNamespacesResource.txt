@Category({RestTests.class,MediumTests.class}) public class TestNamespacesResource {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestNamespacesResource.class);
  private static String NAMESPACE1="TestNamespacesInstanceResource1";
  private static String NAMESPACE2="TestNamespacesInstanceResource2";
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final HBaseRESTTestingUtility REST_TEST_UTIL=new HBaseRESTTestingUtility();
  private static Client client;
  private static JAXBContext context;
  private static Configuration conf;
  private static TestNamespacesModel testNamespacesModel;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    conf=TEST_UTIL.getConfiguration();
    TEST_UTIL.startMiniCluster();
    REST_TEST_UTIL.startServletContainer(conf);
    client=new Client(new Cluster().add("localhost",REST_TEST_UTIL.getServletPort()));
    testNamespacesModel=new TestNamespacesModel();
    context=JAXBContext.newInstance(NamespacesModel.class);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    REST_TEST_UTIL.shutdownServletContainer();
    TEST_UTIL.shutdownMiniCluster();
  }
  private static NamespacesModel fromXML(  byte[] content) throws JAXBException {
    return (NamespacesModel)context.createUnmarshaller().unmarshal(new ByteArrayInputStream(content));
  }
  private boolean doesNamespaceExist(  Admin admin,  String namespaceName) throws IOException {
    NamespaceDescriptor[] nd=admin.listNamespaceDescriptors();
    for (int i=0; i < nd.length; i++) {
      if (nd[i].getName().equals(namespaceName)) {
        return true;
      }
    }
    return false;
  }
  private void createNamespaceViaAdmin(  Admin admin,  String name) throws IOException {
    NamespaceDescriptor.Builder builder=NamespaceDescriptor.create(name);
    NamespaceDescriptor nsd=builder.build();
    admin.createNamespace(nsd);
  }
  @Test public void testNamespaceListXMLandJSON() throws IOException, JAXBException {
    String namespacePath="/namespaces/";
    NamespacesModel model;
    Response response;
    Admin admin=TEST_UTIL.getAdmin();
    assertFalse(doesNamespaceExist(admin,NAMESPACE1));
    model=testNamespacesModel.buildTestModel();
    testNamespacesModel.checkModel(model);
    response=client.get(namespacePath,Constants.MIMETYPE_XML);
    assertEquals(200,response.getCode());
    model=fromXML(response.getBody());
    testNamespacesModel.checkModel(model,"hbase","default");
    response=client.get(namespacePath,Constants.MIMETYPE_JSON);
    assertEquals(200,response.getCode());
    model=testNamespacesModel.fromJSON(Bytes.toString(response.getBody()));
    testNamespacesModel.checkModel(model,"hbase","default");
    createNamespaceViaAdmin(admin,NAMESPACE1);
    response=client.get(namespacePath,Constants.MIMETYPE_XML);
    assertEquals(200,response.getCode());
    model=fromXML(response.getBody());
    testNamespacesModel.checkModel(model,NAMESPACE1,"hbase","default");
    response=client.get(namespacePath,Constants.MIMETYPE_JSON);
    assertEquals(200,response.getCode());
    model=testNamespacesModel.fromJSON(Bytes.toString(response.getBody()));
    testNamespacesModel.checkModel(model,NAMESPACE1,"hbase","default");
    createNamespaceViaAdmin(admin,NAMESPACE2);
    response=client.get(namespacePath,Constants.MIMETYPE_XML);
    assertEquals(200,response.getCode());
    model=fromXML(response.getBody());
    testNamespacesModel.checkModel(model,NAMESPACE1,NAMESPACE2,"hbase","default");
    response=client.get(namespacePath,Constants.MIMETYPE_JSON);
    assertEquals(200,response.getCode());
    model=testNamespacesModel.fromJSON(Bytes.toString(response.getBody()));
    testNamespacesModel.checkModel(model,NAMESPACE1,NAMESPACE2,"hbase","default");
    admin.deleteNamespace(NAMESPACE1);
    response=client.get(namespacePath,Constants.MIMETYPE_XML);
    assertEquals(200,response.getCode());
    model=fromXML(response.getBody());
    testNamespacesModel.checkModel(model,NAMESPACE2,"hbase","default");
    response=client.get(namespacePath,Constants.MIMETYPE_JSON);
    assertEquals(200,response.getCode());
    model=testNamespacesModel.fromJSON(Bytes.toString(response.getBody()));
    testNamespacesModel.checkModel(model,NAMESPACE2,"hbase","default");
    admin.deleteNamespace(NAMESPACE2);
  }
  @Test public void testNamespaceListPBandDefault() throws IOException, JAXBException {
    String schemaPath="/namespaces/";
    NamespacesModel model;
    Response response;
    Admin admin=TEST_UTIL.getAdmin();
    assertFalse(doesNamespaceExist(admin,NAMESPACE1));
    model=testNamespacesModel.buildTestModel();
    testNamespacesModel.checkModel(model);
    response=client.get(schemaPath,Constants.MIMETYPE_PROTOBUF);
    assertEquals(200,response.getCode());
    model.getObjectFromMessage(response.getBody());
    testNamespacesModel.checkModel(model,"hbase","default");
    response=client.get(schemaPath);
    assertEquals(200,response.getCode());
    createNamespaceViaAdmin(admin,NAMESPACE1);
    response=client.get(schemaPath,Constants.MIMETYPE_PROTOBUF);
    assertEquals(200,response.getCode());
    model.getObjectFromMessage(response.getBody());
    testNamespacesModel.checkModel(model,NAMESPACE1,"hbase","default");
    response=client.get(schemaPath);
    assertEquals(200,response.getCode());
    createNamespaceViaAdmin(admin,NAMESPACE2);
    response=client.get(schemaPath,Constants.MIMETYPE_PROTOBUF);
    assertEquals(200,response.getCode());
    model.getObjectFromMessage(response.getBody());
    testNamespacesModel.checkModel(model,NAMESPACE1,NAMESPACE2,"hbase","default");
    response=client.get(schemaPath);
    assertEquals(200,response.getCode());
    admin.deleteNamespace(NAMESPACE1);
    response=client.get(schemaPath,Constants.MIMETYPE_PROTOBUF);
    assertEquals(200,response.getCode());
    model.getObjectFromMessage(response.getBody());
    testNamespacesModel.checkModel(model,NAMESPACE2,"hbase","default");
    response=client.get(schemaPath);
    assertEquals(200,response.getCode());
    admin.deleteNamespace(NAMESPACE2);
  }
}
