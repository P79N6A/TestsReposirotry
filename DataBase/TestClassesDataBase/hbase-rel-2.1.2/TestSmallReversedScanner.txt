@Category(MediumTests.class) public class TestSmallReversedScanner {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSmallReversedScanner.class);
  public static final Logger LOG=LoggerFactory.getLogger(TestSmallReversedScanner.class);
  private final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final TableName TABLE_NAME=TableName.valueOf("testReversedSmall");
  private static final byte[] COLUMN_FAMILY=Bytes.toBytes("columnFamily");
  private static Table htable=null;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.startMiniCluster(1);
    byte[] bytes=Bytes.toBytes("bcd");
    byte[][] splitKeys=new byte[bytes.length][];
    for (int i=0; i < bytes.length; i++) {
      splitKeys[i]=new byte[]{bytes[i]};
    }
    htable=TEST_UTIL.createTable(TABLE_NAME,COLUMN_FAMILY,splitKeys);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @After public void tearDown() throws IOException {
    TEST_UTIL.truncateTable(TABLE_NAME);
  }
  /** 
 * all rowKeys are fit in the last region.
 * @throws IOException
 */
  @Test public void testSmallReversedScan01() throws IOException {
    String[][] keysCases=new String[][]{{"d0","d1","d2","d3"},{"a0","a1","a2","a3"},{"a0","b1","c2","d3"}};
    for (int caseIndex=0; caseIndex < keysCases.length; caseIndex++) {
      testSmallReversedScanInternal(keysCases[caseIndex]);
      TEST_UTIL.truncateTable(TABLE_NAME);
    }
  }
  private void testSmallReversedScanInternal(  String[] inputRowKeys) throws IOException {
    int rowCount=inputRowKeys.length;
    for (int i=0; i < rowCount; i++) {
      Put put=new Put(Bytes.toBytes(inputRowKeys[i]));
      put.addColumn(COLUMN_FAMILY,null,Bytes.toBytes(i));
      htable.put(put);
    }
    Scan scan=new Scan();
    scan.setReversed(true);
    scan.setSmall(true);
    ResultScanner scanner=htable.getScanner(scan);
    Result r;
    int value=rowCount;
    while ((r=scanner.next()) != null) {
      Assert.assertArrayEquals(r.getValue(COLUMN_FAMILY,null),Bytes.toBytes(--value));
      Assert.assertArrayEquals(r.getRow(),Bytes.toBytes(inputRowKeys[value]));
    }
    Assert.assertEquals(0,value);
  }
  /** 
 * Corner case: HBase has 4 regions, (-oo,b),[b,c),[c,d),[d,+oo), and only rowKey with byte[]={0x00} locate in region (-oo,b) . test whether reversed small scanner will return infinity results with RowKey={0x00}.
 * @throws IOException
 */
  @Test public void testSmallReversedScan02() throws IOException {
    Put put=new Put(new byte[]{(char)0x00});
    put.addColumn(COLUMN_FAMILY,null,Bytes.toBytes(0));
    htable.put(put);
    Scan scan=new Scan();
    scan.setCaching(1);
    scan.setReversed(true);
    scan.setSmall(true);
    ResultScanner scanner=htable.getScanner(scan);
    Result r;
    int count=1;
    while ((r=scanner.next()) != null) {
      Assert.assertArrayEquals(r.getValue(COLUMN_FAMILY,null),Bytes.toBytes(0));
      Assert.assertArrayEquals(r.getRow(),new byte[]{(char)0x00});
      Assert.assertTrue(--count >= 0);
    }
    Assert.assertEquals(0,count);
  }
}
