public abstract class TestModelBase<T> {
  protected String AS_XML;
  protected String AS_PB;
  protected String AS_JSON;
  protected JAXBContext context;
  protected Class<?> clazz;
  protected ObjectMapper mapper;
  protected TestModelBase(  Class<?> clazz) throws Exception {
    super();
    this.clazz=clazz;
    context=new JAXBContextResolver().getContext(clazz);
    mapper=new JacksonJaxbJsonProvider().locateMapper(clazz,MediaType.APPLICATION_JSON_TYPE);
  }
  protected abstract T buildTestModel();
  @SuppressWarnings("unused") protected String toXML(  T model) throws JAXBException {
    StringWriter writer=new StringWriter();
    context.createMarshaller().marshal(model,writer);
    return writer.toString();
  }
  protected String toJSON(  T model) throws JAXBException, IOException {
    StringWriter writer=new StringWriter();
    mapper.writeValue(writer,model);
    return writer.toString();
  }
  public T fromJSON(  String json) throws JAXBException, IOException {
    return (T)mapper.readValue(json,clazz);
  }
  public T fromXML(  String xml) throws JAXBException {
    return (T)context.createUnmarshaller().unmarshal(new StringReader(xml));
  }
  @SuppressWarnings("unused") protected byte[] toPB(  ProtobufMessageHandler model){
    return model.createProtobufOutput();
  }
  protected T fromPB(  String pb) throws Exception {
    return (T)clazz.getMethod("getObjectFromMessage",byte[].class).invoke(clazz.getDeclaredConstructor().newInstance(),Base64.getDecoder().decode(AS_PB));
  }
  protected abstract void checkModel(  T model);
  @Test public void testBuildModel() throws Exception {
    checkModel(buildTestModel());
  }
  @Test public void testFromPB() throws Exception {
    checkModel(fromPB(AS_PB));
  }
  @Test public void testFromXML() throws Exception {
    checkModel(fromXML(AS_XML));
  }
  @Test public void testToXML() throws Exception {
    checkModel(fromXML(toXML(buildTestModel())));
  }
  @Test public void testToJSON() throws Exception {
    try {
      ObjectNode expObj=mapper.readValue(AS_JSON,ObjectNode.class);
      ObjectNode actObj=mapper.readValue(toJSON(buildTestModel()),ObjectNode.class);
      assertEquals(expObj,actObj);
    }
 catch (    Exception e) {
      assertEquals(AS_JSON,toJSON(buildTestModel()));
    }
  }
  @Test public void testFromJSON() throws Exception {
    checkModel(fromJSON(AS_JSON));
  }
}
