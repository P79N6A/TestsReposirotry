/** 
 * Pass the key and value to reduce.
 */
public static class ScanMapper extends TableMapper<ImmutableBytesWritable,ImmutableBytesWritable> {
  /** 
 * Pass the key and value to reduce.
 * @param key  The key, here "aaa", "aab" etc.
 * @param value  The value is the same as the key.
 * @param context  The task context.
 * @throws IOException When reading the rows fails.
 */
  @Override public void map(  ImmutableBytesWritable key,  Result value,  Context context) throws IOException, InterruptedException {
    if (value.size() != 2) {
      throw new IOException("There should be two input columns");
    }
    Map<byte[],NavigableMap<byte[],NavigableMap<Long,byte[]>>> cfMap=value.getMap();
    if (!cfMap.containsKey(INPUT_FAMILYS[0]) || !cfMap.containsKey(INPUT_FAMILYS[1])) {
      throw new IOException("Wrong input columns. Missing: '" + Bytes.toString(INPUT_FAMILYS[0]) + "' or '"+ Bytes.toString(INPUT_FAMILYS[1])+ "'.");
    }
    String val0=Bytes.toStringBinary(value.getValue(INPUT_FAMILYS[0],null));
    String val1=Bytes.toStringBinary(value.getValue(INPUT_FAMILYS[1],null));
    LOG.info("map: key -> " + Bytes.toStringBinary(key.get()) + ", value -> ("+ val0+ ", "+ val1+ ")");
    context.write(key,key);
  }
}
