@Category(MediumTests.class) public class TestRSGroupsOfflineMode {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRSGroupsOfflineMode.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestRSGroupsOfflineMode.class);
  private static HMaster master;
  private static Admin hbaseAdmin;
  private static HBaseTestingUtility TEST_UTIL;
  private static HBaseCluster cluster;
  private final static long WAIT_TIMEOUT=60000 * 5;
  @Rule public TestName name=new TestName();
  @BeforeClass public static void setUp() throws Exception {
    TEST_UTIL=new HBaseTestingUtility();
    TEST_UTIL.getConfiguration().set(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,RSGroupBasedLoadBalancer.class.getName());
    TEST_UTIL.getConfiguration().set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,RSGroupAdminEndpoint.class.getName());
    TEST_UTIL.getConfiguration().set(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART,"1");
    TEST_UTIL.startMiniCluster(2,3);
    cluster=TEST_UTIL.getHBaseCluster();
    master=((MiniHBaseCluster)cluster).getMaster();
    master.balanceSwitch(false);
    hbaseAdmin=TEST_UTIL.getAdmin();
    TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return master.isInitialized() && ((RSGroupBasedLoadBalancer)master.getLoadBalancer()).isOnline() && master.getServerManager().getOnlineServersList().size() >= 3;
      }
    }
);
  }
  @AfterClass public static void tearDown() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testOffline() throws Exception, InterruptedException {
    final TableName failoverTable=TableName.valueOf(name.getMethodName());
    TEST_UTIL.createTable(failoverTable,Bytes.toBytes("f"));
    final HRegionServer killRS=((MiniHBaseCluster)cluster).getRegionServer(0);
    final HRegionServer groupRS=((MiniHBaseCluster)cluster).getRegionServer(1);
    final HRegionServer failoverRS=((MiniHBaseCluster)cluster).getRegionServer(2);
    String newGroup="my_group";
    RSGroupAdmin groupAdmin=new RSGroupAdminClient(TEST_UTIL.getConnection());
    groupAdmin.addRSGroup(newGroup);
    if (master.getAssignmentManager().getRegionStates().getRegionAssignments().containsValue(failoverRS.getServerName())) {
      for (      HRegionInfo regionInfo : hbaseAdmin.getOnlineRegions(failoverRS.getServerName())) {
        hbaseAdmin.move(regionInfo.getEncodedNameAsBytes(),Bytes.toBytes(failoverRS.getServerName().getServerName()));
      }
      LOG.info("Waiting for region unassignments on failover RS...");
      TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
        @Override public boolean evaluate() throws Exception {
          return !master.getServerManager().getLoad(failoverRS.getServerName()).getRegionMetrics().isEmpty();
        }
      }
);
    }
    groupAdmin.moveServers(Sets.newHashSet(groupRS.getServerName().getAddress()),newGroup);
    TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return groupRS.getNumberOfOnlineRegions() < 1 && master.getAssignmentManager().getRegionStates().getRegionsInTransitionCount() < 1;
      }
    }
);
    groupAdmin.moveTables(Sets.newHashSet(RSGroupInfoManager.RSGROUP_TABLE_NAME),newGroup);
    LOG.info("Waiting for move table...");
    TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return groupRS.getNumberOfOnlineRegions() == 1;
      }
    }
);
    groupRS.stop("die");
    TEST_UTIL.getHBaseCluster().getMaster().stopMaster();
    LOG.info("Waiting for offline mode...");
    TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return TEST_UTIL.getHBaseCluster().getMaster() != null && TEST_UTIL.getHBaseCluster().getMaster().isActiveMaster() && TEST_UTIL.getHBaseCluster().getMaster().isInitialized() && TEST_UTIL.getHBaseCluster().getMaster().getServerManager().getOnlineServers().size() <= 3;
      }
    }
);
    RSGroupInfoManager groupMgr=((MiniHBaseCluster)cluster).getMaster().getMasterCoprocessorHost().findCoprocessor(RSGroupAdminEndpoint.class).getGroupInfoManager();
    assertFalse(groupMgr.isOnline());
    assertEquals(newGroup,groupMgr.getRSGroupOfTable(RSGroupInfoManager.RSGROUP_TABLE_NAME));
    assertEquals(RSGroupInfo.DEFAULT_GROUP,groupMgr.getRSGroupOfTable(failoverTable));
    killRS.stop("die");
    master=TEST_UTIL.getHBaseCluster().getMaster();
    LOG.info("Waiting for new table assignment...");
    TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return failoverRS.getRegions(failoverTable).size() >= 1;
      }
    }
);
    Assert.assertEquals(0,failoverRS.getRegions(RSGroupInfoManager.RSGROUP_TABLE_NAME).size());
    master.stopMaster();
  }
}
