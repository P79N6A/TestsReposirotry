@RunWith(Parameterized.class) @Category({RegionServerTests.class,SmallTests.class}) public class TestDateTieredCompactor {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestDateTieredCompactor.class);
  private static final byte[] NAME_OF_THINGS=Bytes.toBytes("foo");
  private static final TableName TABLE_NAME=TableName.valueOf(NAME_OF_THINGS,NAME_OF_THINGS);
  private static final KeyValue KV_A=new KeyValue(Bytes.toBytes("aaa"),100L);
  private static final KeyValue KV_B=new KeyValue(Bytes.toBytes("bbb"),200L);
  private static final KeyValue KV_C=new KeyValue(Bytes.toBytes("ccc"),300L);
  private static final KeyValue KV_D=new KeyValue(Bytes.toBytes("ddd"),400L);
  @Parameters(name="{index}: usePrivateReaders={0}") public static Iterable<Object[]> data(){
    return Arrays.asList(new Object[]{true},new Object[]{false});
  }
  @Parameter public boolean usePrivateReaders;
  private DateTieredCompactor createCompactor(  StoreFileWritersCapture writers,  final KeyValue[] input,  List<HStoreFile> storefiles) throws Exception {
    Configuration conf=HBaseConfiguration.create();
    conf.setBoolean("hbase.regionserver.compaction.private.readers",usePrivateReaders);
    final Scanner scanner=new Scanner(input);
    HColumnDescriptor col=new HColumnDescriptor(NAME_OF_THINGS);
    ScanInfo si=new ScanInfo(conf,col,Long.MAX_VALUE,0,CellComparatorImpl.COMPARATOR);
    HStore store=mock(HStore.class);
    when(store.getStorefiles()).thenReturn(storefiles);
    when(store.getColumnFamilyDescriptor()).thenReturn(col);
    when(store.getScanInfo()).thenReturn(si);
    when(store.areWritesEnabled()).thenReturn(true);
    when(store.getFileSystem()).thenReturn(mock(FileSystem.class));
    when(store.getRegionInfo()).thenReturn(new HRegionInfo(TABLE_NAME));
    when(store.createWriterInTmp(anyLong(),any(),anyBoolean(),anyBoolean(),anyBoolean(),anyBoolean())).thenAnswer(writers);
    when(store.getComparator()).thenReturn(CellComparatorImpl.COMPARATOR);
    OptionalLong maxSequenceId=StoreUtils.getMaxSequenceIdInList(storefiles);
    when(store.getMaxSequenceId()).thenReturn(maxSequenceId);
    return new DateTieredCompactor(conf,store){
      @Override protected InternalScanner createScanner(      HStore store,      ScanInfo scanInfo,      List<StoreFileScanner> scanners,      long smallestReadPoint,      long earliestPutTs,      byte[] dropDeletesFromRow,      byte[] dropDeletesToRow) throws IOException {
        return scanner;
      }
      @Override protected InternalScanner createScanner(      HStore store,      ScanInfo scanInfo,      List<StoreFileScanner> scanners,      ScanType scanType,      long smallestReadPoint,      long earliestPutTs) throws IOException {
        return scanner;
      }
    }
;
  }
  private void verify(  KeyValue[] input,  List<Long> boundaries,  KeyValue[][] output,  boolean allFiles) throws Exception {
    StoreFileWritersCapture writers=new StoreFileWritersCapture();
    HStoreFile sf1=createDummyStoreFile(1L);
    HStoreFile sf2=createDummyStoreFile(2L);
    DateTieredCompactor dtc=createCompactor(writers,input,Arrays.asList(sf1,sf2));
    List<Path> paths=dtc.compact(new CompactionRequestImpl(Arrays.asList(sf1)),boundaries.subList(0,boundaries.size() - 1),NoLimitThroughputController.INSTANCE,null);
    writers.verifyKvs(output,allFiles,boundaries);
    if (allFiles) {
      assertEquals(output.length,paths.size());
    }
  }
  @SuppressWarnings("unchecked") private static <T>T[] a(  T... a){
    return a;
  }
  @Test public void test() throws Exception {
    verify(a(KV_A,KV_B,KV_C,KV_D),Arrays.asList(100L,200L,300L,400L,500L),a(a(KV_A),a(KV_B),a(KV_C),a(KV_D)),true);
    verify(a(KV_A,KV_B,KV_C,KV_D),Arrays.asList(Long.MIN_VALUE,200L,Long.MAX_VALUE),a(a(KV_A),a(KV_B,KV_C,KV_D)),false);
    verify(a(KV_A,KV_B,KV_C,KV_D),Arrays.asList(Long.MIN_VALUE,Long.MAX_VALUE),new KeyValue[][]{a(KV_A,KV_B,KV_C,KV_D)},false);
  }
  @Test public void testEmptyOutputFile() throws Exception {
    StoreFileWritersCapture writers=new StoreFileWritersCapture();
    CompactionRequestImpl request=createDummyRequest();
    DateTieredCompactor dtc=createCompactor(writers,new KeyValue[0],new ArrayList<>(request.getFiles()));
    List<Path> paths=dtc.compact(request,Arrays.asList(Long.MIN_VALUE,Long.MAX_VALUE),NoLimitThroughputController.INSTANCE,null);
    assertEquals(1,paths.size());
    List<StoreFileWritersCapture.Writer> dummyWriters=writers.getWriters();
    assertEquals(1,dummyWriters.size());
    StoreFileWritersCapture.Writer dummyWriter=dummyWriters.get(0);
    assertTrue(dummyWriter.kvs.isEmpty());
    assertTrue(dummyWriter.hasMetadata);
  }
}
