static class SimpleClient extends Thread {
  AbstractRpcClient<?> rpcClient;
  AtomicBoolean running=new AtomicBoolean(true);
  AtomicBoolean sending=new AtomicBoolean(false);
  AtomicReference<Throwable> exception=new AtomicReference<>(null);
  Cluster cluster;
  String id;
  long numCalls=0;
  Random random=new Random();
  public SimpleClient(  Cluster cluster,  AbstractRpcClient<?> rpcClient,  String id){
    this.cluster=cluster;
    this.rpcClient=rpcClient;
    this.id=id;
    this.setName(id);
  }
  @Override public void run(){
    while (running.get()) {
      boolean isBigPayload=random.nextBoolean();
      String message=isBigPayload ? BIG_PAYLOAD : id + numCalls;
      EchoRequestProto param=EchoRequestProto.newBuilder().setMessage(message).build();
      EchoResponseProto ret;
      RpcServer server=cluster.getRandomServer();
      try {
        sending.set(true);
        BlockingInterface stub=newBlockingStub(rpcClient,server.getListenerAddress());
        ret=stub.echo(null,param);
      }
 catch (      Exception e) {
        LOG.warn(e.toString(),e);
        continue;
      }
      try {
        assertNotNull(ret);
        assertEquals(message,ret.getMessage());
      }
 catch (      Throwable t) {
        exception.compareAndSet(null,t);
      }
      numCalls++;
    }
  }
  void stopRunning(){
    running.set(false);
  }
  boolean isSending(){
    return sending.get();
  }
  void rethrowException() throws Throwable {
    if (exception.get() != null) {
      throw exception.get();
    }
  }
}
