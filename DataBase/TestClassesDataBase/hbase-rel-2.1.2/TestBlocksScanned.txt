@SuppressWarnings("deprecation") @Category({RegionServerTests.class,SmallTests.class}) public class TestBlocksScanned extends HBaseTestCase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestBlocksScanned.class);
  private static byte[] FAMILY=Bytes.toBytes("family");
  private static byte[] COL=Bytes.toBytes("col");
  private static byte[] START_KEY=Bytes.toBytes("aaa");
  private static byte[] END_KEY=Bytes.toBytes("zzz");
  private static int BLOCK_SIZE=70;
  private static HBaseTestingUtility TEST_UTIL=null;
  @Override @Before public void setUp() throws Exception {
    super.setUp();
    TEST_UTIL=new HBaseTestingUtility();
    CacheConfig.instantiateBlockCache(TEST_UTIL.getConfiguration());
  }
  @Test public void testBlocksScanned() throws Exception {
    byte[] tableName=Bytes.toBytes("TestBlocksScanned");
    HTableDescriptor table=new HTableDescriptor(TableName.valueOf(tableName));
    table.addFamily(new HColumnDescriptor(FAMILY).setMaxVersions(10).setBlockCacheEnabled(true).setBlocksize(BLOCK_SIZE).setCompressionType(Compression.Algorithm.NONE));
    _testBlocksScanned(table);
  }
  @Test public void testBlocksScannedWithEncoding() throws Exception {
    byte[] tableName=Bytes.toBytes("TestBlocksScannedWithEncoding");
    HTableDescriptor table=new HTableDescriptor(TableName.valueOf(tableName));
    table.addFamily(new HColumnDescriptor(FAMILY).setMaxVersions(10).setBlockCacheEnabled(true).setDataBlockEncoding(DataBlockEncoding.FAST_DIFF).setBlocksize(BLOCK_SIZE).setCompressionType(Compression.Algorithm.NONE));
    _testBlocksScanned(table);
  }
  private void _testBlocksScanned(  HTableDescriptor table) throws Exception {
    HRegion r=createNewHRegion(table,START_KEY,END_KEY,TEST_UTIL.getConfiguration());
    addContent(r,FAMILY,COL);
    r.flush(true);
    CacheStats stats=new CacheConfig(TEST_UTIL.getConfiguration()).getBlockCache().getStats();
    long before=stats.getHitCount() + stats.getMissCount();
    Scan scan=new Scan().withStartRow(Bytes.toBytes("aaa")).withStopRow(Bytes.toBytes("aaz")).setReadType(Scan.ReadType.PREAD);
    scan.addColumn(FAMILY,COL);
    scan.setMaxVersions(1);
    InternalScanner s=r.getScanner(scan);
    List<Cell> results=new ArrayList<>();
    while (s.next(results))     ;
    s.close();
    int expectResultSize='z' - 'a';
    assertEquals(expectResultSize,results.size());
    int kvPerBlock=(int)Math.ceil(BLOCK_SIZE / (double)KeyValueUtil.ensureKeyValue(results.get(0)).getLength());
    Assert.assertEquals(2,kvPerBlock);
    long expectDataBlockRead=(long)Math.ceil(expectResultSize / (double)kvPerBlock);
    long expectIndexBlockRead=expectDataBlockRead;
    assertEquals(expectIndexBlockRead + expectDataBlockRead,stats.getHitCount() + stats.getMissCount() - before);
  }
}
