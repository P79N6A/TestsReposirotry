@Category({RegionServerTests.class,MediumTests.class}) public class TestWALFiltering {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestWALFiltering.class);
  private static final int NUM_MASTERS=1;
  private static final int NUM_RS=4;
  private static final TableName TABLE_NAME=TableName.valueOf("TestWALFiltering");
  private static final byte[] CF1=Bytes.toBytes("MyCF1");
  private static final byte[] CF2=Bytes.toBytes("MyCF2");
  private static final byte[][] FAMILIES={CF1,CF2};
  private HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  @Before public void setUp() throws Exception {
    TEST_UTIL.startMiniCluster(NUM_MASTERS,NUM_RS);
    fillTable();
  }
  @After public void tearDown() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  private void fillTable() throws IOException, InterruptedException {
    Table table=TEST_UTIL.createTable(TABLE_NAME,FAMILIES,3,Bytes.toBytes("row0"),Bytes.toBytes("row99"),NUM_RS);
    Random rand=new Random(19387129L);
    for (int iStoreFile=0; iStoreFile < 4; ++iStoreFile) {
      for (int iRow=0; iRow < 100; ++iRow) {
        final byte[] row=Bytes.toBytes("row" + iRow);
        Put put=new Put(row);
        Delete del=new Delete(row);
        for (int iCol=0; iCol < 10; ++iCol) {
          final byte[] cf=rand.nextBoolean() ? CF1 : CF2;
          final long ts=Math.abs(rand.nextInt());
          final byte[] qual=Bytes.toBytes("col" + iCol);
          if (rand.nextBoolean()) {
            final byte[] value=Bytes.toBytes("value_for_row_" + iRow + "_cf_"+ Bytes.toStringBinary(cf)+ "_col_"+ iCol+ "_ts_"+ ts+ "_random_"+ rand.nextLong());
            put.addColumn(cf,qual,ts,value);
          }
 else           if (rand.nextDouble() < 0.8) {
            del.addColumn(cf,qual,ts);
          }
 else {
            del.addColumn(cf,qual,ts);
          }
        }
        table.put(put);
        table.delete(del);
      }
    }
    TEST_UTIL.waitUntilAllRegionsAssigned(TABLE_NAME);
  }
  @Test public void testFlushedSequenceIdsSentToHMaster() throws IOException, InterruptedException, org.apache.hbase.thirdparty.com.google.protobuf.ServiceException, ServiceException {
    SortedMap<byte[],Long> allFlushedSequenceIds=new TreeMap<>(Bytes.BYTES_COMPARATOR);
    for (int i=0; i < NUM_RS; ++i) {
      flushAllRegions(i);
    }
    Thread.sleep(10000);
    HMaster master=TEST_UTIL.getMiniHBaseCluster().getMaster();
    for (int i=0; i < NUM_RS; ++i) {
      for (      byte[] regionName : getRegionsByServer(i)) {
        if (allFlushedSequenceIds.containsKey(regionName)) {
          GetLastFlushedSequenceIdRequest req=RequestConverter.buildGetLastFlushedSequenceIdRequest(regionName);
          assertEquals((long)allFlushedSequenceIds.get(regionName),master.getMasterRpcServices().getLastFlushedSequenceId(null,req).getLastFlushedSequenceId());
        }
      }
    }
  }
  private List<byte[]> getRegionsByServer(  int rsId) throws IOException {
    List<byte[]> regionNames=Lists.newArrayList();
    HRegionServer hrs=getRegionServer(rsId);
    for (    Region r : hrs.getRegions(TABLE_NAME)) {
      regionNames.add(r.getRegionInfo().getRegionName());
    }
    return regionNames;
  }
  private HRegionServer getRegionServer(  int rsId){
    return TEST_UTIL.getMiniHBaseCluster().getRegionServer(rsId);
  }
  private void flushAllRegions(  int rsId) throws ServiceException, org.apache.hbase.thirdparty.com.google.protobuf.ServiceException, IOException {
    HRegionServer hrs=getRegionServer(rsId);
    for (    byte[] regionName : getRegionsByServer(rsId)) {
      FlushRegionRequest request=RequestConverter.buildFlushRegionRequest(regionName);
      hrs.getRSRpcServices().flushRegion(null,request);
    }
  }
}
