/** 
 * Quick hack to verify a Mutation with one column.
 */
final private static class SingleCellMutationMatcher<T> implements ArgumentMatcher<T> {
  private final Mutation expected;
  private SingleCellMutationMatcher(  Mutation expected){
    this.expected=expected;
  }
  @Override public boolean matches(  T argument){
    if (!expected.getClass().isAssignableFrom(argument.getClass())) {
      return false;
    }
    Mutation actual=(Mutation)argument;
    if (!Arrays.equals(expected.getRow(),actual.getRow())) {
      return false;
    }
    if (expected.size() != actual.size()) {
      return false;
    }
    NavigableMap<byte[],List<Cell>> expectedCells=expected.getFamilyCellMap();
    NavigableMap<byte[],List<Cell>> actualCells=actual.getFamilyCellMap();
    Entry<byte[],List<Cell>> expectedEntry=expectedCells.entrySet().iterator().next();
    Entry<byte[],List<Cell>> actualEntry=actualCells.entrySet().iterator().next();
    if (!Arrays.equals(expectedEntry.getKey(),actualEntry.getKey())) {
      return false;
    }
    return Objects.equals(expectedEntry.getValue(),actualEntry.getValue());
  }
}
