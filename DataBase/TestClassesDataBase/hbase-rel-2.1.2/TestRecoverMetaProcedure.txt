@Category({MasterTests.class,SmallTests.class}) public class TestRecoverMetaProcedure {
  private static final Logger LOG=LoggerFactory.getLogger(TestRecoverMetaProcedure.class);
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRecoverMetaProcedure.class);
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  /** 
 * Test the new prepare step. Here we test that our Mock is faking out the precedure well-enough for it to progress past the first prepare stage.
 */
  @Test public void testPrepare() throws ProcedureSuspendedException, ProcedureYieldException, InterruptedException, IOException {
    RecoverMetaProcedure rmp=new RecoverMetaProcedure();
    MasterProcedureEnv env=Mockito.mock(MasterProcedureEnv.class);
    MasterServices masterServices=new MockMasterServices(UTIL.getConfiguration(),null);
    Mockito.when(env.getMasterServices()).thenReturn(masterServices);
    assertEquals(StateMachineProcedure.Flow.HAS_MORE_STATE,rmp.executeFromState(env,rmp.getInitialState()));
    int stateId=rmp.getCurrentStateId();
    assertEquals(MasterProcedureProtos.RecoverMetaState.RECOVER_META_SPLIT_LOGS_VALUE,rmp.getCurrentStateId());
  }
  /** 
 * Test the new prepare step. If Master is stopping, procedure should skip the assign by returning NO_MORE_STATE
 */
  @Test public void testPrepareWithMasterStopping() throws ProcedureSuspendedException, ProcedureYieldException, InterruptedException, IOException {
    RecoverMetaProcedure rmp=new RecoverMetaProcedure();
    MasterProcedureEnv env=Mockito.mock(MasterProcedureEnv.class);
    MasterServices masterServices=new MockMasterServices(UTIL.getConfiguration(),null){
      @Override public boolean isStopping(){
        return true;
      }
    }
;
    Mockito.when(env.getMasterServices()).thenReturn(masterServices);
    assertEquals(StateMachineProcedure.Flow.NO_MORE_STATE,rmp.executeFromState(env,rmp.getInitialState()));
  }
  /** 
 * Test the new prepare step. If cluster is down, procedure should skip the assign by returning NO_MORE_STATE
 */
  @Test public void testPrepareWithNoCluster() throws ProcedureSuspendedException, ProcedureYieldException, InterruptedException, IOException {
    RecoverMetaProcedure rmp=new RecoverMetaProcedure();
    MasterProcedureEnv env=Mockito.mock(MasterProcedureEnv.class);
    MasterServices masterServices=new MockMasterServices(UTIL.getConfiguration(),null){
      @Override public boolean isClusterUp(){
        return false;
      }
    }
;
    Mockito.when(env.getMasterServices()).thenReturn(masterServices);
    assertEquals(StateMachineProcedure.Flow.NO_MORE_STATE,rmp.executeFromState(env,rmp.getInitialState()));
  }
}
