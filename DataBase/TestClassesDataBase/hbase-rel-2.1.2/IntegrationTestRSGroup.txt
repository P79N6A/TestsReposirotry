/** 
 * Runs all of the units tests defined in TestGroupBase as an integration test. Requires TestRSGroupBase.NUM_SLAVE_BASE servers to run.
 */
@Category(IntegrationTests.class) public class IntegrationTestRSGroup extends TestRSGroupsBase {
  private final static Logger LOG=LoggerFactory.getLogger(IntegrationTestRSGroup.class);
  private static boolean initialized=false;
  @Before public void beforeMethod() throws Exception {
    if (!initialized) {
      LOG.info("Setting up IntegrationTestRSGroup");
      LOG.info("Initializing cluster with " + NUM_SLAVES_BASE + " servers");
      TEST_UTIL=new IntegrationTestingUtility();
      TEST_UTIL.getConfiguration().set(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,RSGroupBasedLoadBalancer.class.getName());
      TEST_UTIL.getConfiguration().set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,RSGroupAdminEndpoint.class.getName());
      ((IntegrationTestingUtility)TEST_UTIL).initializeCluster(NUM_SLAVES_BASE);
      admin=TEST_UTIL.getAdmin();
      cluster=TEST_UTIL.getHBaseClusterInterface();
      rsGroupAdmin=new VerifyingRSGroupAdminClient(new RSGroupAdminClient(TEST_UTIL.getConnection()),TEST_UTIL.getConfiguration());
      LOG.info("Done initializing cluster");
      initialized=true;
      afterMethod();
    }
  }
  @After public void afterMethod() throws Exception {
    LOG.info("Cleaning up previous test run");
    deleteTableIfNecessary();
    deleteNamespaceIfNecessary();
    deleteGroups();
    admin.setBalancerRunning(true,true);
    LOG.info("Restoring the cluster");
    ((IntegrationTestingUtility)TEST_UTIL).restoreCluster();
    LOG.info("Done restoring the cluster");
    TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        LOG.info("Waiting for cleanup to finish " + rsGroupAdmin.listRSGroups());
        return rsGroupAdmin.getRSGroupInfo(RSGroupInfo.DEFAULT_GROUP).getServers().size() >= NUM_SLAVES_BASE;
      }
    }
);
    TEST_UTIL.waitFor(WAIT_TIMEOUT,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        LOG.info("Waiting for regionservers to be registered " + rsGroupAdmin.listRSGroups());
        return rsGroupAdmin.getRSGroupInfo(RSGroupInfo.DEFAULT_GROUP).getServers().size() == getNumServers();
      }
    }
);
    LOG.info("Done cleaning up previous test run");
  }
}
