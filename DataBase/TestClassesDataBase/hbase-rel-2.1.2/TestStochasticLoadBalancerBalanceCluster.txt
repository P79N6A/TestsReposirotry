@Category({MasterTests.class,LargeTests.class}) public class TestStochasticLoadBalancerBalanceCluster extends BalancerTestBase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestStochasticLoadBalancerBalanceCluster.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestStochasticLoadBalancerBalanceCluster.class);
  /** 
 * Test the load balancing algorithm. <p> Invariant is that all servers should be hosting either floor(average) or ceiling(average)
 */
  @Test public void testBalanceCluster() throws Exception {
    conf.setLong(StochasticLoadBalancer.MAX_STEPS_KEY,2000000L);
    conf.setLong("hbase.master.balancer.stochastic.maxRunningTime",90 * 1000);
    conf.setFloat("hbase.master.balancer.stochastic.maxMovePercent",1.0f);
    loadBalancer.setConf(conf);
    for (    int[] mockCluster : clusterStateMocks) {
      Map<ServerName,List<RegionInfo>> servers=mockClusterServers(mockCluster);
      List<ServerAndLoad> list=convertToList(servers);
      LOG.info("Mock Cluster : " + printMock(list) + " "+ printStats(list));
      List<RegionPlan> plans=loadBalancer.balanceCluster(servers);
      List<ServerAndLoad> balancedCluster=reconcile(list,plans,servers);
      LOG.info("Mock Balance : " + printMock(balancedCluster));
      assertClusterAsBalanced(balancedCluster);
      List<RegionPlan> secondPlans=loadBalancer.balanceCluster(servers);
      assertNull(secondPlans);
      for (      Map.Entry<ServerName,List<RegionInfo>> entry : servers.entrySet()) {
        returnRegions(entry.getValue());
        returnServer(entry.getKey());
      }
    }
  }
}
