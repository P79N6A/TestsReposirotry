@Category({MediumTests.class,ClientTests.class}) public class TestAsyncTableLocatePrefetch {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAsyncTableLocatePrefetch.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static TableName TABLE_NAME=TableName.valueOf("async");
  private static byte[] FAMILY=Bytes.toBytes("cf");
  private static AsyncConnection CONN;
  private static AsyncNonMetaRegionLocator LOCATOR;
  @BeforeClass public static void setUp() throws Exception {
    TEST_UTIL.getConfiguration().setInt(AsyncNonMetaRegionLocator.LOCATE_PREFETCH_LIMIT,100);
    TEST_UTIL.startMiniCluster(3);
    TEST_UTIL.createMultiRegionTable(TABLE_NAME,FAMILY);
    TEST_UTIL.waitTableAvailable(TABLE_NAME);
    CONN=ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();
    LOCATOR=new AsyncNonMetaRegionLocator((AsyncConnectionImpl)CONN);
  }
  @AfterClass public static void tearDown() throws Exception {
    Closeables.close(CONN,true);
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void test() throws InterruptedException, ExecutionException {
    assertNotNull(LOCATOR.getRegionLocation(TABLE_NAME,Bytes.toBytes("zzz"),RegionLocateType.CURRENT,false).get());
    Thread.sleep(1000);
    assertNotNull(LOCATOR.getRegionLocationInCache(TABLE_NAME,Bytes.toBytes("aaa")));
    for (    byte[] row : HBaseTestingUtility.KEYS_FOR_HBA_CREATE_TABLE) {
      assertNotNull(LOCATOR.getRegionLocationInCache(TABLE_NAME,row));
    }
  }
}
