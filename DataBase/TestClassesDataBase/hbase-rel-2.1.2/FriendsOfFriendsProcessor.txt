public static class FriendsOfFriendsProcessor extends BaseRowProcessor<FriendsOfFriendsProcessorRequest,FriendsOfFriendsProcessorResponse> {
  byte[] row=null;
  byte[] person=null;
  final Set<String> result=new HashSet<>();
  /** 
 * Empty constructor for Writable
 */
  FriendsOfFriendsProcessor(){
  }
  FriendsOfFriendsProcessor(  byte[] row,  byte[] person){
    this.row=row;
    this.person=person;
  }
  @Override public Collection<byte[]> getRowsToLock(){
    return Collections.singleton(row);
  }
  @Override public FriendsOfFriendsProcessorResponse getResult(){
    FriendsOfFriendsProcessorResponse.Builder builder=FriendsOfFriendsProcessorResponse.newBuilder();
    builder.addAllResult(result);
    return builder.build();
  }
  @Override public boolean readOnly(){
    return true;
  }
  @Override public void process(  long now,  HRegion region,  List<Mutation> mutations,  WALEdit walEdit) throws IOException {
    List<Cell> kvs=new ArrayList<>();
{
      Scan scan=new Scan(row,row);
      scan.addColumn(FAM,person);
      doScan(region,scan,kvs);
    }
    Scan scan=new Scan(row,row);
    for (    Cell kv : kvs) {
      byte[] friends=CellUtil.cloneValue(kv);
      for (      byte f : friends) {
        scan.addColumn(FAM,new byte[]{f});
      }
    }
    doScan(region,scan,kvs);
    result.clear();
    for (    Cell kv : kvs) {
      for (      byte b : CellUtil.cloneValue(kv)) {
        result.add((char)b + "");
      }
    }
  }
  @Override public FriendsOfFriendsProcessorRequest getRequestData() throws IOException {
    FriendsOfFriendsProcessorRequest.Builder builder=FriendsOfFriendsProcessorRequest.newBuilder();
    builder.setPerson(ByteStringer.wrap(person));
    builder.setRow(ByteStringer.wrap(row));
    builder.addAllResult(result);
    FriendsOfFriendsProcessorRequest f=builder.build();
    return f;
  }
  @Override public void initialize(  FriendsOfFriendsProcessorRequest request) throws IOException {
    this.person=request.getPerson().toByteArray();
    this.row=request.getRow().toByteArray();
    result.clear();
    result.addAll(request.getResultList());
  }
}
