/** 
 * An Answer implementation that simply forwards all calls through to a delegate. This is useful as the default Answer for a mock object, to create something like a spy on an RPC proxy. For example: <code> NamenodeProtocol origNNProxy = secondary.getNameNode(); NamenodeProtocol spyNNProxy = Mockito.mock(NameNodeProtocol.class, new DelegateAnswer(origNNProxy); doThrow(...).when(spyNNProxy).getBlockLocations(...); ... </code>
 */
public static class DelegateAnswer implements Answer<Object> {
  private final Object delegate;
  private final Logger log;
  public DelegateAnswer(  Object delegate){
    this(null,delegate);
  }
  public DelegateAnswer(  Logger log,  Object delegate){
    this.log=log;
    this.delegate=delegate;
  }
  @Override public Object answer(  InvocationOnMock invocation) throws Throwable {
    try {
      if (log != null) {
        log.info("Call to " + invocation + " on "+ delegate,new Exception("TRACE"));
      }
      return invocation.getMethod().invoke(delegate,invocation.getArguments());
    }
 catch (    InvocationTargetException ite) {
      throw ite.getCause();
    }
  }
}
