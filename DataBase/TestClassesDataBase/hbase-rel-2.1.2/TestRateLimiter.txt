/** 
 * Verify the behaviour of the Rate Limiter.
 */
@Category({RegionServerTests.class,SmallTests.class}) public class TestRateLimiter {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRateLimiter.class);
  @Test public void testWaitIntervalTimeUnitSeconds(){
    testWaitInterval(TimeUnit.SECONDS,10,100);
  }
  @Test public void testWaitIntervalTimeUnitMinutes(){
    testWaitInterval(TimeUnit.MINUTES,10,6000);
  }
  @Test public void testWaitIntervalTimeUnitHours(){
    testWaitInterval(TimeUnit.HOURS,10,360000);
  }
  @Test public void testWaitIntervalTimeUnitDays(){
    testWaitInterval(TimeUnit.DAYS,10,8640000);
  }
  private void testWaitInterval(  final TimeUnit timeUnit,  final long limit,  final long expectedWaitInterval){
    RateLimiter limiter=new AverageIntervalRateLimiter();
    limiter.set(limit,timeUnit);
    long nowTs=0;
    for (int i=0; i < (limit - 1); ++i) {
      assertTrue(limiter.canExecute());
      limiter.consume();
      long waitInterval=limiter.waitInterval();
      assertEquals(0,waitInterval);
    }
    for (int i=0; i < (limit * 4); ++i) {
      limiter.setNextRefillTime(limiter.getNextRefillTime() - nowTs);
      assertTrue(limiter.canExecute());
      assertEquals(0,limiter.waitInterval());
      limiter.consume();
      long waitInterval=limiter.waitInterval();
      assertEquals(expectedWaitInterval,waitInterval);
      nowTs=waitInterval;
      long temp=nowTs + 500;
      limiter.setNextRefillTime(limiter.getNextRefillTime() + temp);
      assertFalse(limiter.canExecute());
      limiter.setNextRefillTime(limiter.getNextRefillTime() - temp);
    }
  }
  @Test public void testOverconsumptionAverageIntervalRefillStrategy(){
    RateLimiter limiter=new AverageIntervalRateLimiter();
    limiter.set(10,TimeUnit.SECONDS);
    assertTrue(limiter.canExecute());
    limiter.consume(20);
    assertEquals(100,limiter.waitInterval(1));
    assertEquals(1000,limiter.waitInterval(10));
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 900);
    assertTrue(limiter.canExecute(1));
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 100);
    assertTrue(limiter.canExecute());
    assertEquals(0,limiter.waitInterval());
  }
  @Test public void testOverconsumptionFixedIntervalRefillStrategy() throws InterruptedException {
    RateLimiter limiter=new FixedIntervalRateLimiter();
    limiter.set(10,TimeUnit.SECONDS);
    EnvironmentEdge edge=new EnvironmentEdge(){
      private final long ts=System.currentTimeMillis();
      @Override public long currentTime(){
        return ts;
      }
    }
;
    EnvironmentEdgeManager.injectEdge(edge);
    assertTrue(limiter.canExecute());
    limiter.consume(20);
    assertEquals(1000,limiter.waitInterval(1));
    assertEquals(1000,limiter.waitInterval(10));
    EnvironmentEdgeManager.reset();
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 900);
    assertFalse(limiter.canExecute(1));
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 100);
    assertTrue(limiter.canExecute());
    assertEquals(0,limiter.waitInterval());
  }
  @Test public void testFixedIntervalResourceAvailability() throws Exception {
    RateLimiter limiter=new FixedIntervalRateLimiter();
    limiter.set(10,TimeUnit.SECONDS);
    assertTrue(limiter.canExecute(10));
    limiter.consume(3);
    assertEquals(7,limiter.getAvailable());
    assertFalse(limiter.canExecute(10));
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 1000);
    assertTrue(limiter.canExecute(10));
    assertEquals(10,limiter.getAvailable());
  }
  @Test public void testLimiterBySmallerRate() throws InterruptedException {
    RateLimiter limiter=new FixedIntervalRateLimiter();
    limiter.set(10,TimeUnit.SECONDS);
    int count=0;
    while ((count++) < 10) {
      limiter.setNextRefillTime(limiter.getNextRefillTime() - 500);
      for (int i=0; i < 3; i++) {
        assertEquals(true,limiter.canExecute());
        limiter.consume();
      }
    }
  }
  @Test public void testCanExecuteOfAverageIntervalRateLimiter() throws InterruptedException {
    RateLimiter limiter=new AverageIntervalRateLimiter();
    limiter.set(100,TimeUnit.SECONDS);
    limiter.setNextRefillTime(EnvironmentEdgeManager.currentTime());
    assertEquals(50,testCanExecuteByRate(limiter,50));
    limiter.set(100,TimeUnit.SECONDS);
    limiter.setNextRefillTime(EnvironmentEdgeManager.currentTime());
    assertEquals(100,testCanExecuteByRate(limiter,100));
    limiter.set(100,TimeUnit.SECONDS);
    limiter.setNextRefillTime(EnvironmentEdgeManager.currentTime());
    assertEquals(200,testCanExecuteByRate(limiter,200));
    limiter.set(100,TimeUnit.SECONDS);
    limiter.setNextRefillTime(EnvironmentEdgeManager.currentTime());
    assertEquals(200,testCanExecuteByRate(limiter,500));
  }
  @Test public void testCanExecuteOfFixedIntervalRateLimiter() throws InterruptedException {
    RateLimiter limiter=new FixedIntervalRateLimiter();
    limiter.set(100,TimeUnit.SECONDS);
    limiter.setNextRefillTime(EnvironmentEdgeManager.currentTime());
    assertEquals(50,testCanExecuteByRate(limiter,50));
    limiter.set(100,TimeUnit.SECONDS);
    limiter.setNextRefillTime(EnvironmentEdgeManager.currentTime());
    assertEquals(100,testCanExecuteByRate(limiter,100));
    limiter.set(100,TimeUnit.SECONDS);
    limiter.setNextRefillTime(EnvironmentEdgeManager.currentTime());
    assertEquals(100,testCanExecuteByRate(limiter,200));
  }
  public int testCanExecuteByRate(  RateLimiter limiter,  int rate){
    int request=0;
    int count=0;
    while ((request++) < rate) {
      limiter.setNextRefillTime(limiter.getNextRefillTime() - limiter.getTimeUnitInMillis() / rate);
      if (limiter.canExecute()) {
        count++;
        limiter.consume();
      }
    }
    return count;
  }
  @Test public void testRefillOfAverageIntervalRateLimiter() throws InterruptedException {
    RateLimiter limiter=new AverageIntervalRateLimiter();
    limiter.set(60,TimeUnit.SECONDS);
    assertEquals(60,limiter.getAvailable());
    assertEquals(60,limiter.refill(limiter.getLimit()));
    limiter.consume(30);
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 200);
    assertEquals(12,limiter.refill(limiter.getLimit()));
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 500);
    assertEquals(30,limiter.refill(limiter.getLimit()));
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 1000);
    assertEquals(60,limiter.refill(limiter.getLimit()));
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 3000);
    assertEquals(60,limiter.refill(limiter.getLimit()));
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 5000);
    assertEquals(60,limiter.refill(limiter.getLimit()));
  }
  @Test public void testRefillOfFixedIntervalRateLimiter() throws InterruptedException {
    RateLimiter limiter=new FixedIntervalRateLimiter();
    limiter.set(60,TimeUnit.SECONDS);
    assertEquals(60,limiter.getAvailable());
    assertEquals(60,limiter.refill(limiter.getLimit()));
    limiter.consume(30);
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 200);
    assertEquals(0,limiter.refill(limiter.getLimit()));
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 500);
    assertEquals(0,limiter.refill(limiter.getLimit()));
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 1000);
    assertEquals(60,limiter.refill(limiter.getLimit()));
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 3000);
    assertEquals(60,limiter.refill(limiter.getLimit()));
    limiter.setNextRefillTime(limiter.getNextRefillTime() - 5000);
    assertEquals(60,limiter.refill(limiter.getLimit()));
  }
  @Test public void testUnconfiguredLimiters() throws InterruptedException {
    ManualEnvironmentEdge testEdge=new ManualEnvironmentEdge();
    EnvironmentEdgeManager.injectEdge(testEdge);
    long limit=Long.MAX_VALUE;
    RateLimiter avgLimiter=new AverageIntervalRateLimiter();
    RateLimiter fixLimiter=new FixedIntervalRateLimiter();
    assertEquals(limit,avgLimiter.getAvailable());
    assertEquals(limit,fixLimiter.getAvailable());
    assertTrue(avgLimiter.canExecute(limit));
    avgLimiter.consume(limit);
    assertTrue(fixLimiter.canExecute(limit));
    fixLimiter.consume(limit);
    assertTrue(limit == avgLimiter.getAvailable());
    assertTrue(limit == fixLimiter.getAvailable());
    testEdge.incValue(100);
    assertTrue(avgLimiter.canExecute(limit));
    avgLimiter.consume(limit);
    assertTrue(fixLimiter.canExecute(limit));
    fixLimiter.consume(limit);
    assertTrue(limit == avgLimiter.getAvailable());
    assertTrue(limit == fixLimiter.getAvailable());
    EnvironmentEdgeManager.reset();
  }
  @Test public void testExtremeLimiters() throws InterruptedException {
    ManualEnvironmentEdge testEdge=new ManualEnvironmentEdge();
    EnvironmentEdgeManager.injectEdge(testEdge);
    long limit=Long.MAX_VALUE - 1;
    RateLimiter avgLimiter=new AverageIntervalRateLimiter();
    avgLimiter.set(limit,TimeUnit.SECONDS);
    RateLimiter fixLimiter=new FixedIntervalRateLimiter();
    fixLimiter.set(limit,TimeUnit.SECONDS);
    assertEquals(limit,avgLimiter.getAvailable());
    assertEquals(limit,fixLimiter.getAvailable());
    assertTrue(avgLimiter.canExecute(limit / 2));
    avgLimiter.consume(limit / 2);
    assertTrue(fixLimiter.canExecute(limit / 2));
    fixLimiter.consume(limit / 2);
    assertTrue((limit - (limit / 2)) == avgLimiter.getAvailable());
    assertTrue((limit - (limit / 2)) == fixLimiter.getAvailable());
    testEdge.incValue(100);
    assertFalse(avgLimiter.canExecute(limit));
    assertFalse(fixLimiter.canExecute(limit));
    testEdge.incValue(500);
    assertTrue(avgLimiter.canExecute(limit));
    assertFalse(fixLimiter.canExecute(limit));
    assertTrue(limit == avgLimiter.getAvailable());
    assertTrue((limit - (limit / 2)) == fixLimiter.getAvailable());
    testEdge.incValue(500);
    assertTrue(avgLimiter.canExecute(limit));
    assertTrue(fixLimiter.canExecute(limit));
    assertTrue(limit == avgLimiter.getAvailable());
    assertTrue(limit == fixLimiter.getAvailable());
    EnvironmentEdgeManager.reset();
  }
  @Test public void testLimiterCompensationOverflow() throws InterruptedException {
    long limit=Long.MAX_VALUE - 1;
    long guessNumber=100;
    RateLimiter avgLimiter=new AverageIntervalRateLimiter();
    avgLimiter.set(limit,TimeUnit.SECONDS);
    assertEquals(limit,avgLimiter.getAvailable());
    assertTrue(avgLimiter.canExecute(guessNumber));
    avgLimiter.consume(guessNumber);
    assertTrue((limit - guessNumber) == avgLimiter.getAvailable());
    avgLimiter.consume(-80);
    assertTrue((limit - guessNumber + 80) == avgLimiter.getAvailable());
    avgLimiter.consume(-80);
    assertTrue(limit == avgLimiter.getAvailable());
  }
}
