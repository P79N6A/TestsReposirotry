/** 
 * Verify that the HColumnDescriptor version is set correctly by default, hbase-site.xml, and user input
 */
@Category({MiscTests.class,MediumTests.class}) public class TestHColumnDescriptorDefaultVersions {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHColumnDescriptorDefaultVersions.class);
  @Rule public TestName name=new TestName();
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static TableName TABLE_NAME=null;
  private static final byte[] FAMILY=Bytes.toBytes("cf0");
  /** 
 * Start up a mini cluster and put a small table of empty regions into it.
 * @throws Exception
 */
  @BeforeClass public static void beforeAllTests() throws Exception {
    TEST_UTIL.startMiniCluster(1);
  }
  @Before public void setup(){
    TABLE_NAME=TableName.valueOf(name.getMethodName());
  }
  @AfterClass public static void afterAllTests() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testCreateTableWithDefault() throws IOException {
    Admin admin=TEST_UTIL.getAdmin();
    HTableDescriptor baseHtd=new HTableDescriptor(TABLE_NAME);
    HColumnDescriptor hcd=new HColumnDescriptor(FAMILY);
    baseHtd.addFamily(hcd);
    admin.createTable(baseHtd);
    admin.disableTable(TABLE_NAME);
    try {
      verifyHColumnDescriptor(1,TABLE_NAME,FAMILY);
    }
  finally {
      admin.deleteTable(TABLE_NAME);
    }
  }
  @Test public void testCreateTableWithDefaultFromConf() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
    TEST_UTIL.getConfiguration().setInt("hbase.column.max.version",3);
    TEST_UTIL.startMiniCluster(1);
    Admin admin=TEST_UTIL.getAdmin();
    HTableDescriptor baseHtd=new HTableDescriptor(TABLE_NAME);
    HColumnDescriptor hcd=new HColumnDescriptor(FAMILY);
    hcd.setMaxVersions(TEST_UTIL.getConfiguration().getInt("hbase.column.max.version",1));
    baseHtd.addFamily(hcd);
    admin.createTable(baseHtd);
    admin.disableTable(TABLE_NAME);
    try {
      verifyHColumnDescriptor(3,TABLE_NAME,FAMILY);
    }
  finally {
      admin.deleteTable(TABLE_NAME);
    }
  }
  @Test public void testCreateTableWithSetVersion() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
    TEST_UTIL.getConfiguration().setInt("hbase.column.max.version",3);
    TEST_UTIL.startMiniCluster(1);
    Admin admin=TEST_UTIL.getAdmin();
    HTableDescriptor baseHtd=new HTableDescriptor(TABLE_NAME);
    HColumnDescriptor hcd=new HColumnDescriptor(FAMILY);
    hcd.setMaxVersions(5);
    baseHtd.addFamily(hcd);
    admin.createTable(baseHtd);
    admin.disableTable(TABLE_NAME);
    try {
      verifyHColumnDescriptor(5,TABLE_NAME,FAMILY);
    }
  finally {
      admin.deleteTable(TABLE_NAME);
    }
  }
  @Test public void testHColumnDescriptorCachedMaxVersions() throws Exception {
    HColumnDescriptor hcd=new HColumnDescriptor(FAMILY);
    hcd.setMaxVersions(5);
    assertEquals(5,hcd.getMaxVersions());
    hcd.setValue(Bytes.toBytes(HConstants.VERSIONS),Bytes.toBytes("8"));
    assertEquals(8,hcd.getMaxVersions());
  }
  private void verifyHColumnDescriptor(  int expected,  final TableName tableName,  final byte[]... families) throws IOException {
    Admin admin=TEST_UTIL.getAdmin();
    TableDescriptor htd=admin.getDescriptor(tableName);
    ColumnFamilyDescriptor[] hcds=htd.getColumnFamilies();
    verifyHColumnDescriptor(expected,hcds,tableName,families);
    MasterFileSystem mfs=TEST_UTIL.getMiniHBaseCluster().getMaster().getMasterFileSystem();
    Path tableDir=FSUtils.getTableDir(mfs.getRootDir(),tableName);
    TableDescriptor td=FSTableDescriptors.getTableDescriptorFromFs(mfs.getFileSystem(),tableDir);
    hcds=td.getColumnFamilies();
    verifyHColumnDescriptor(expected,hcds,tableName,families);
  }
  private void verifyHColumnDescriptor(  int expected,  final ColumnFamilyDescriptor[] hcds,  final TableName tableName,  final byte[]... families){
    for (    ColumnFamilyDescriptor hcd : hcds) {
      assertEquals(expected,hcd.getMaxVersions());
    }
  }
}
