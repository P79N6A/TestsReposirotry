@Category({MasterTests.class,MediumTests.class}) public class TestHMasterRPCException {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHMasterRPCException.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestHMasterRPCException.class);
  private final HBaseTestingUtility testUtil=HBaseTestingUtility.createLocalHTU();
  private HMaster master;
  private RpcClient rpcClient;
  @Before public void setUp() throws Exception {
    Configuration conf=testUtil.getConfiguration();
    conf.set(HConstants.MASTER_PORT,"0");
    conf.setInt(HConstants.ZK_SESSION_TIMEOUT,2000);
    testUtil.startMiniZKCluster();
    ZKWatcher watcher=testUtil.getZooKeeperWatcher();
    ZKUtil.createWithParents(watcher,watcher.getZNodePaths().masterAddressZNode,Bytes.toBytes("fake:123"));
    master=new HMaster(conf);
    rpcClient=RpcClientFactory.createClient(conf,HConstants.CLUSTER_ID_DEFAULT);
  }
  @After public void tearDown() throws IOException {
    if (rpcClient != null) {
      rpcClient.close();
    }
    if (master != null) {
      master.stopMaster();
    }
    testUtil.shutdownMiniZKCluster();
  }
  @Test public void testRPCException() throws IOException, InterruptedException, KeeperException {
    ServerName sm=master.getServerName();
    boolean fakeZNodeDelete=false;
    for (int i=0; i < 20; i++) {
      try {
        BlockingRpcChannel channel=rpcClient.createBlockingRpcChannel(sm,User.getCurrent(),0);
        MasterProtos.MasterService.BlockingInterface stub=MasterProtos.MasterService.newBlockingStub(channel);
        assertTrue(stub.isMasterRunning(null,IsMasterRunningRequest.getDefaultInstance()).getIsMasterRunning());
        return;
      }
 catch (      ServiceException ex) {
        IOException ie=ProtobufUtil.handleRemoteException(ex);
        assertTrue(ie.getMessage().startsWith("org.apache.hadoop.hbase.ipc.ServerNotRunningYetException: Server is not running yet"));
        LOG.info("Expected exception: ",ie);
        if (!fakeZNodeDelete) {
          testUtil.getZooKeeperWatcher().getRecoverableZooKeeper().delete(testUtil.getZooKeeperWatcher().getZNodePaths().masterAddressZNode,-1);
          fakeZNodeDelete=true;
        }
      }
      Thread.sleep(1000);
    }
  }
}
