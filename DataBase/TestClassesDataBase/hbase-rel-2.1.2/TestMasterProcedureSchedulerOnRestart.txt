@Category({MasterTests.class,SmallTests.class}) public class TestMasterProcedureSchedulerOnRestart {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMasterProcedureSchedulerOnRestart.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestMasterProcedureSchedulerOnRestart.class);
  private static final int PROCEDURE_EXECUTOR_SLOTS=1;
  private static final TableName tablename=TableName.valueOf("test:TestProcedureScheduler");
  private static RegionInfo regionInfo=RegionInfoBuilder.newBuilder(tablename).build();
  protected static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static WALProcedureStore procStore;
  private static ProcedureExecutor<MasterProcedureEnv> procExecutor;
  private static HBaseCommonTestingUtility htu;
  private static MasterProcedureEnv masterProcedureEnv;
  private static FileSystem fs;
  private static Path testDir;
  private static Path logDir;
  @BeforeClass public static void setUp() throws Exception {
    UTIL.startMiniCluster(1);
    procExecutor=UTIL.getMiniHBaseCluster().getMaster().getMasterProcedureExecutor();
  }
  @Test public void testScheduler() throws Exception {
    long regionProc=procExecutor.submitProcedure(new DummyRegionProcedure(UTIL.getMiniHBaseCluster().getMaster().getMasterProcedureExecutor().getEnvironment(),regionInfo));
    WALProcedureStore walProcedureStore=(WALProcedureStore)procExecutor.getStore();
    walProcedureStore.rollWriterForTesting();
    Thread.sleep(500);
    procExecutor.submitProcedure(new DummyTableProcedure(UTIL.getMiniHBaseCluster().getMaster().getMasterProcedureExecutor().getEnvironment(),tablename));
    ProcedureTestingUtility.restart(procExecutor);
    while (procExecutor.getProcedure(regionProc) == null) {
      Thread.sleep(500);
    }
    DummyRegionProcedure dummyRegionProcedure=(DummyRegionProcedure)procExecutor.getProcedure(regionProc);
    dummyRegionProcedure.resume();
    UTIL.waitFor(5000,() -> dummyRegionProcedure.isFinished());
  }
public static class DummyTableProcedure extends AbstractStateMachineTableProcedure<DummyRegionTableState> {
    private TableName tableName;
    public DummyTableProcedure(){
      super();
    }
    public DummyTableProcedure(    final MasterProcedureEnv env,    TableName tableName){
      super(null,null);
      this.tableName=tableName;
    }
    @Override public TableName getTableName(){
      return tableName;
    }
    @Override public TableOperationType getTableOperationType(){
      return TableOperationType.CREATE;
    }
    @Override protected Flow executeFromState(    MasterProcedureEnv env,    DummyRegionTableState dummyRegionTableState) throws ProcedureSuspendedException, ProcedureYieldException, InterruptedException {
      return null;
    }
    @Override protected void rollbackState(    MasterProcedureEnv env,    DummyRegionTableState dummyRegionTableState) throws IOException, InterruptedException {
    }
    @Override protected DummyRegionTableState getState(    int stateId){
      return DummyRegionTableState.STATE;
    }
    @Override protected int getStateId(    DummyRegionTableState dummyRegionTableState){
      return 0;
    }
    @Override protected DummyRegionTableState getInitialState(){
      return DummyRegionTableState.STATE;
    }
    @Override protected Procedure[] execute(    final MasterProcedureEnv env) throws ProcedureSuspendedException {
      LOG.info("Finished execute");
      return null;
    }
    @Override protected void serializeStateData(    ProcedureStateSerializer serializer) throws IOException {
      super.serializeStateData(serializer);
      serializer.serialize(ProtobufUtil.toProtoTableName(tableName));
    }
    @Override protected void deserializeStateData(    ProcedureStateSerializer serializer) throws IOException {
      super.deserializeStateData(serializer);
      tableName=ProtobufUtil.toTableName(serializer.deserialize(HBaseProtos.TableName.class));
    }
    @Override protected LockState acquireLock(    MasterProcedureEnv env){
      return super.acquireLock(env);
    }
    @Override protected void releaseLock(    MasterProcedureEnv env){
      super.releaseLock(env);
    }
  }
  public enum DummyRegionTableState {  STATE}
}
