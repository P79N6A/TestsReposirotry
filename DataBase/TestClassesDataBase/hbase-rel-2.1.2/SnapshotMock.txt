public static class SnapshotMock {
  protected final static String TEST_FAMILY="cf";
  public final static int TEST_NUM_REGIONS=4;
  private final Configuration conf;
  private final FileSystem fs;
  private final Path rootDir;
static class RegionData {
    public RegionInfo hri;
    public Path tableDir;
    public Path[] files;
    public RegionData(    final Path tableDir,    final RegionInfo hri,    final int nfiles){
      this.tableDir=tableDir;
      this.hri=hri;
      this.files=new Path[nfiles];
    }
  }
public static class SnapshotBuilder {
    private final RegionData[] tableRegions;
    private final SnapshotProtos.SnapshotDescription desc;
    private final TableDescriptor htd;
    private final Configuration conf;
    private final FileSystem fs;
    private final Path rootDir;
    private Path snapshotDir;
    private int snapshotted=0;
    public SnapshotBuilder(    final Configuration conf,    final FileSystem fs,    final Path rootDir,    final TableDescriptor htd,    final SnapshotProtos.SnapshotDescription desc,    final RegionData[] tableRegions) throws IOException {
      this.fs=fs;
      this.conf=conf;
      this.rootDir=rootDir;
      this.htd=htd;
      this.desc=desc;
      this.tableRegions=tableRegions;
      this.snapshotDir=SnapshotDescriptionUtils.getWorkingSnapshotDir(desc,rootDir);
      new FSTableDescriptors(conf).createTableDescriptorForTableDirectory(snapshotDir,htd,false);
    }
    public TableDescriptor getTableDescriptor(){
      return this.htd;
    }
    public SnapshotProtos.SnapshotDescription getSnapshotDescription(){
      return this.desc;
    }
    public Path getSnapshotsDir(){
      return this.snapshotDir;
    }
    public Path[] addRegion() throws IOException {
      return addRegion(desc);
    }
    public Path[] addRegionV1() throws IOException {
      return addRegion(desc.toBuilder().setVersion(SnapshotManifestV1.DESCRIPTOR_VERSION).build());
    }
    public Path[] addRegionV2() throws IOException {
      return addRegion(desc.toBuilder().setVersion(SnapshotManifestV2.DESCRIPTOR_VERSION).build());
    }
    private Path[] addRegion(    final SnapshotProtos.SnapshotDescription desc) throws IOException {
      if (this.snapshotted == tableRegions.length) {
        throw new UnsupportedOperationException("No more regions in the table");
      }
      RegionData regionData=tableRegions[this.snapshotted++];
      ForeignExceptionDispatcher monitor=new ForeignExceptionDispatcher(desc.getName());
      SnapshotManifest manifest=SnapshotManifest.create(conf,fs,snapshotDir,desc,monitor);
      manifest.addRegion(regionData.tableDir,regionData.hri);
      return regionData.files;
    }
    private void corruptFile(    Path p) throws IOException {
      String manifestName=p.getName();
      Path newP=new Path(p.getParent(),manifestName + "1");
      fs.rename(p,newP);
      FSDataOutputStream out=fs.create(p);
      FSDataInputStream input=fs.open(newP);
      byte[] buffer=new byte[25];
      int len=input.read(0,buffer,0,25);
      if (len > 1) {
        out.write(buffer,0,len - 1);
      }
      out.close();
      fs.delete(newP);
    }
    /** 
 * Corrupt one region-manifest file
 * @throws IOException on unexecpted error from the FS
 */
    public void corruptOneRegionManifest() throws IOException {
      FileStatus[] manifestFiles=FSUtils.listStatus(fs,snapshotDir,new PathFilter(){
        @Override public boolean accept(        Path path){
          return path.getName().startsWith(SnapshotManifestV2.SNAPSHOT_MANIFEST_PREFIX);
        }
      }
);
      if (manifestFiles.length == 0)       return;
      Path p=manifestFiles[0].getPath();
      corruptFile(p);
    }
    public void missOneRegionSnapshotFile() throws IOException {
      FileStatus[] manifestFiles=FSUtils.listStatus(fs,snapshotDir);
      for (      FileStatus fileStatus : manifestFiles) {
        String fileName=fileStatus.getPath().getName();
        if (fileName.endsWith(SnapshotDescriptionUtils.SNAPSHOTINFO_FILE) || fileName.endsWith(".tabledesc") || fileName.endsWith(SnapshotDescriptionUtils.SNAPSHOT_TMP_DIR_NAME)) {
          fs.delete(fileStatus.getPath(),true);
        }
      }
    }
    /** 
 * Corrupt data-manifest file
 * @throws IOException on unexecpted error from the FS
 */
    public void corruptDataManifest() throws IOException {
      FileStatus[] manifestFiles=FSUtils.listStatus(fs,snapshotDir,new PathFilter(){
        @Override public boolean accept(        Path path){
          return path.getName().startsWith(SnapshotManifest.DATA_MANIFEST_NAME);
        }
      }
);
      if (manifestFiles.length == 0)       return;
      Path p=manifestFiles[0].getPath();
      corruptFile(p);
    }
    public Path commit() throws IOException {
      ForeignExceptionDispatcher monitor=new ForeignExceptionDispatcher(desc.getName());
      SnapshotManifest manifest=SnapshotManifest.create(conf,fs,snapshotDir,desc,monitor);
      manifest.addTableDescriptor(htd);
      manifest.consolidate();
      SnapshotDescriptionUtils.completeSnapshot(desc,rootDir,snapshotDir,fs);
      snapshotDir=SnapshotDescriptionUtils.getCompletedSnapshotDir(desc,rootDir);
      return snapshotDir;
    }
    public void consolidate() throws IOException {
      ForeignExceptionDispatcher monitor=new ForeignExceptionDispatcher(desc.getName());
      SnapshotManifest manifest=SnapshotManifest.create(conf,fs,snapshotDir,desc,monitor);
      manifest.addTableDescriptor(htd);
      manifest.consolidate();
    }
  }
  public SnapshotMock(  final Configuration conf,  final FileSystem fs,  final Path rootDir){
    this.fs=fs;
    this.conf=conf;
    this.rootDir=rootDir;
  }
  public SnapshotBuilder createSnapshotV1(  final String snapshotName,  final String tableName) throws IOException {
    return createSnapshot(snapshotName,tableName,SnapshotManifestV1.DESCRIPTOR_VERSION);
  }
  public SnapshotBuilder createSnapshotV1(  final String snapshotName,  final String tableName,  final int numRegions) throws IOException {
    return createSnapshot(snapshotName,tableName,numRegions,SnapshotManifestV1.DESCRIPTOR_VERSION);
  }
  public SnapshotBuilder createSnapshotV2(  final String snapshotName,  final String tableName) throws IOException {
    return createSnapshot(snapshotName,tableName,SnapshotManifestV2.DESCRIPTOR_VERSION);
  }
  public SnapshotBuilder createSnapshotV2(  final String snapshotName,  final String tableName,  final int numRegions) throws IOException {
    return createSnapshot(snapshotName,tableName,numRegions,SnapshotManifestV2.DESCRIPTOR_VERSION);
  }
  private SnapshotBuilder createSnapshot(  final String snapshotName,  final String tableName,  final int version) throws IOException {
    return createSnapshot(snapshotName,tableName,TEST_NUM_REGIONS,version);
  }
  private SnapshotBuilder createSnapshot(  final String snapshotName,  final String tableName,  final int numRegions,  final int version) throws IOException {
    TableDescriptor htd=createHtd(tableName);
    RegionData[] regions=createTable(htd,numRegions);
    SnapshotProtos.SnapshotDescription desc=SnapshotProtos.SnapshotDescription.newBuilder().setTable(htd.getTableName().getNameAsString()).setName(snapshotName).setVersion(version).build();
    Path workingDir=SnapshotDescriptionUtils.getWorkingSnapshotDir(desc,rootDir);
    SnapshotDescriptionUtils.writeSnapshotInfo(desc,workingDir,fs);
    return new SnapshotBuilder(conf,fs,rootDir,htd,desc,regions);
  }
  public TableDescriptor createHtd(  final String tableName){
    return TableDescriptorBuilder.newBuilder(TableName.valueOf(tableName)).setColumnFamily(ColumnFamilyDescriptorBuilder.of(TEST_FAMILY)).build();
  }
  private RegionData[] createTable(  final TableDescriptor htd,  final int nregions) throws IOException {
    Path tableDir=FSUtils.getTableDir(rootDir,htd.getTableName());
    new FSTableDescriptors(conf).createTableDescriptorForTableDirectory(tableDir,htd,false);
    assertTrue(nregions % 2 == 0);
    RegionData[] regions=new RegionData[nregions];
    for (int i=0; i < regions.length; i+=2) {
      byte[] startKey=Bytes.toBytes(0 + i * 2);
      byte[] endKey=Bytes.toBytes(1 + i * 2);
      RegionInfo hri=RegionInfoBuilder.newBuilder(htd.getTableName()).setStartKey(startKey).setEndKey(endKey).build();
      HRegionFileSystem rfs=HRegionFileSystem.createRegionOnFileSystem(conf,fs,tableDir,hri);
      regions[i]=new RegionData(tableDir,hri,3);
      for (int j=0; j < regions[i].files.length; ++j) {
        Path storeFile=createStoreFile(rfs.createTempName());
        regions[i].files[j]=rfs.commitStoreFile(TEST_FAMILY,storeFile);
      }
      startKey=Bytes.toBytes(2 + i * 2);
      endKey=Bytes.toBytes(3 + i * 2);
      hri=RegionInfoBuilder.newBuilder(htd.getTableName()).build();
      rfs=HRegionFileSystem.createRegionOnFileSystem(conf,fs,tableDir,hri);
      regions[i + 1]=new RegionData(tableDir,hri,regions[i].files.length);
      for (int j=0; j < regions[i].files.length; ++j) {
        String refName=regions[i].files[j].getName() + '.' + regions[i].hri.getEncodedName();
        Path refFile=createStoreFile(new Path(rootDir,refName));
        regions[i + 1].files[j]=rfs.commitStoreFile(TEST_FAMILY,refFile);
      }
    }
    return regions;
  }
  private Path createStoreFile(  final Path storeFile) throws IOException {
    FSDataOutputStream out=fs.create(storeFile);
    try {
      out.write(Bytes.toBytes(storeFile.toString()));
    }
  finally {
      out.close();
    }
    return storeFile;
  }
}
