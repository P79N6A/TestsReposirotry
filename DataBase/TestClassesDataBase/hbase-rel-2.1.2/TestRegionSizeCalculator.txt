@Category({MiscTests.class,SmallTests.class}) public class TestRegionSizeCalculator {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRegionSizeCalculator.class);
  private Configuration configuration=new Configuration();
  private final long megabyte=1024L * 1024L;
  private final ServerName sn=ServerName.valueOf("local-rs",DEFAULT_REGIONSERVER_PORT,ServerName.NON_STARTCODE);
  @Test public void testSimpleTestCase() throws Exception {
    RegionLocator regionLocator=mockRegionLocator("region1","region2","region3");
    Admin admin=mockAdmin(mockRegion("region1",123),mockRegion("region3",1232),mockRegion("region2",54321));
    RegionSizeCalculator calculator=new RegionSizeCalculator(regionLocator,admin);
    assertEquals(123 * megabyte,calculator.getRegionSize("region1".getBytes()));
    assertEquals(54321 * megabyte,calculator.getRegionSize("region2".getBytes()));
    assertEquals(1232 * megabyte,calculator.getRegionSize("region3".getBytes()));
    assertEquals(0 * megabyte,calculator.getRegionSize("otherTableRegion".getBytes()));
    assertEquals(3,calculator.getRegionSizeMap().size());
  }
  /** 
 * When size of region in megabytes is larger than largest possible integer there could be error caused by lost of precision.
 */
  @Test public void testLargeRegion() throws Exception {
    RegionLocator regionLocator=mockRegionLocator("largeRegion");
    Admin admin=mockAdmin(mockRegion("largeRegion",Integer.MAX_VALUE));
    RegionSizeCalculator calculator=new RegionSizeCalculator(regionLocator,admin);
    assertEquals(((long)Integer.MAX_VALUE) * megabyte,calculator.getRegionSize("largeRegion".getBytes()));
  }
  /** 
 * When calculator is disabled, it should return 0 for each request.
 */
  @Test public void testDisabled() throws Exception {
    String regionName="cz.goout:/index.html";
    RegionLocator table=mockRegionLocator(regionName);
    Admin admin=mockAdmin(mockRegion(regionName,999));
    RegionSizeCalculator calculator=new RegionSizeCalculator(table,admin);
    assertEquals(999 * megabyte,calculator.getRegionSize(regionName.getBytes()));
    configuration.setBoolean(RegionSizeCalculator.ENABLE_REGIONSIZECALCULATOR,false);
    RegionSizeCalculator disabledCalculator=new RegionSizeCalculator(table,admin);
    assertEquals(0 * megabyte,disabledCalculator.getRegionSize(regionName.getBytes()));
    assertEquals(0,disabledCalculator.getRegionSizeMap().size());
  }
  /** 
 * Makes some table with given region names.
 */
  private RegionLocator mockRegionLocator(  String... regionNames) throws IOException {
    RegionLocator mockedTable=Mockito.mock(RegionLocator.class);
    when(mockedTable.getName()).thenReturn(TableName.valueOf("sizeTestTable"));
    List<HRegionLocation> regionLocations=new ArrayList<>(regionNames.length);
    when(mockedTable.getAllRegionLocations()).thenReturn(regionLocations);
    for (    String regionName : regionNames) {
      HRegionInfo info=Mockito.mock(HRegionInfo.class);
      when(info.getRegionName()).thenReturn(regionName.getBytes());
      regionLocations.add(new HRegionLocation(info,sn));
    }
    return mockedTable;
  }
  /** 
 * Creates mock returning RegionLoad info about given servers.
 */
  private Admin mockAdmin(  RegionMetrics... regionLoadArray) throws Exception {
    Admin mockAdmin=Mockito.mock(Admin.class);
    List<RegionMetrics> regionLoads=new ArrayList<>();
    for (    RegionMetrics regionLoad : regionLoadArray) {
      regionLoads.add(regionLoad);
    }
    when(mockAdmin.getConfiguration()).thenReturn(configuration);
    when(mockAdmin.getRegionMetrics(sn,TableName.valueOf("sizeTestTable"))).thenReturn(regionLoads);
    return mockAdmin;
  }
  /** 
 * Creates mock of region with given name and size.
 * @param fileSizeMb number of megabytes occupied by region in file store in megabytes
 */
  private RegionMetrics mockRegion(  String regionName,  int fileSizeMb){
    RegionMetrics region=Mockito.mock(RegionMetrics.class);
    when(region.getRegionName()).thenReturn(regionName.getBytes());
    when(region.getNameAsString()).thenReturn(regionName);
    when(region.getStoreFileSize()).thenReturn(new Size(fileSizeMb,Size.Unit.MEGABYTE));
    return region;
  }
}
