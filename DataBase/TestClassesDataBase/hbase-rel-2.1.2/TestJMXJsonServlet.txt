@Category({MiscTests.class,SmallTests.class}) public class TestJMXJsonServlet extends HttpServerFunctionalTest {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestJMXJsonServlet.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestJMXJsonServlet.class);
  private static HttpServer server;
  private static URL baseUrl;
  @BeforeClass public static void setup() throws Exception {
    System.setProperty(HttpServerFunctionalTest.TEST_BUILD_WEBAPPS,"target/test-classes/webapps");
    server=createTestServer();
    server.start();
    baseUrl=getServerURL(server);
  }
  @AfterClass public static void cleanup() throws Exception {
    server.stop();
  }
  public static void assertReFind(  String re,  String value){
    Pattern p=Pattern.compile(re);
    Matcher m=p.matcher(value);
    assertTrue("'" + p + "' does not match "+ value,m.find());
  }
  @Test public void testQuery() throws Exception {
    String result=readOutput(new URL(baseUrl,"/jmx?qry=java.lang:type=Runtime"));
    LOG.info("/jmx?qry=java.lang:type=Runtime RESULT: " + result);
    assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Runtime\"",result);
    assertReFind("\"modelerType\"",result);
    result=readOutput(new URL(baseUrl,"/jmx?qry=java.lang:type=Memory"));
    LOG.info("/jmx?qry=java.lang:type=Memory RESULT: " + result);
    assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"",result);
    assertReFind("\"modelerType\"",result);
    result=readOutput(new URL(baseUrl,"/jmx"));
    LOG.info("/jmx RESULT: " + result);
    assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"",result);
    result=readOutput(new URL(baseUrl,"/jmx?get=java.lang:type=Memory::HeapMemoryUsage"));
    LOG.info("/jmx RESULT: " + result);
    assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"",result);
    assertReFind("\"committed\"\\s*:",result);
    result=readOutput(new URL(baseUrl,"/jmx?get=java.lang:type=Memory::"));
    LOG.info("/jmx RESULT: " + result);
    assertReFind("\"ERROR\"",result);
    result=readOutput(new URL(baseUrl,"/jmx?qry=java.lang:type=Memory&callback=mycallback1"));
    LOG.info("/jmx?qry=java.lang:type=Memory&callback=mycallback RESULT: " + result);
    assertReFind("^mycallback1\\(\\{",result);
    assertReFind("\\}\\);$",result);
    result=readOutput(new URL(baseUrl,"/jmx?get=java.lang:type=Memory::&callback=mycallback2"));
    LOG.info("/jmx RESULT: " + result);
    assertReFind("^mycallback2\\(\\{",result);
    assertReFind("\"ERROR\"",result);
    assertReFind("\\}\\);$",result);
    result=readOutput(new URL(baseUrl,"/jmx?get=java.lang:type=Memory::HeapMemoryUsage&callback=mycallback3"));
    LOG.info("/jmx RESULT: " + result);
    assertReFind("^mycallback3\\(\\{",result);
    assertReFind("\"name\"\\s*:\\s*\"java.lang:type=Memory\"",result);
    assertReFind("\"committed\"\\s*:",result);
    assertReFind("\\}\\);$",result);
  }
  @Test public void testDisallowedJSONPCallback() throws Exception {
    String callback="function(){alert('bigproblems!')};foo";
    URL url=new URL(baseUrl,"/jmx?qry=java.lang:type=Memory&callback=" + URLEncoder.encode(callback,"UTF-8"));
    HttpURLConnection cnxn=(HttpURLConnection)url.openConnection();
    assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,cnxn.getResponseCode());
  }
  @Test public void testUnderscoresInJSONPCallback() throws Exception {
    String callback="my_function";
    URL url=new URL(baseUrl,"/jmx?qry=java.lang:type=Memory&callback=" + URLEncoder.encode(callback,"UTF-8"));
    HttpURLConnection cnxn=(HttpURLConnection)url.openConnection();
    assertEquals(HttpServletResponse.SC_OK,cnxn.getResponseCode());
  }
}
