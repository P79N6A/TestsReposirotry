@Category({MasterTests.class,MediumTests.class}) public class TestDeleteNamespaceProcedure {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestDeleteNamespaceProcedure.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestDeleteNamespaceProcedure.class);
  protected static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  @Rule public TestName name=new TestName();
  private static void setupConf(  Configuration conf){
    conf.setInt(MasterProcedureConstants.MASTER_PROCEDURE_THREADS,1);
    conf.setInt(MasterProcedureConstants.MASTER_URGENT_PROCEDURE_THREADS,0);
  }
  @BeforeClass public static void setupCluster() throws Exception {
    setupConf(UTIL.getConfiguration());
    UTIL.startMiniCluster(1);
  }
  @AfterClass public static void cleanupTest() throws Exception {
    try {
      UTIL.shutdownMiniCluster();
    }
 catch (    Exception e) {
      LOG.warn("failure shutting down cluster",e);
    }
  }
  @Before public void setup() throws Exception {
    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(getMasterProcedureExecutor(),false);
  }
  @After public void tearDown() throws Exception {
    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(getMasterProcedureExecutor(),false);
    for (    TableDescriptor htd : UTIL.getAdmin().listTableDescriptors()) {
      LOG.info("Tear down, remove table=" + htd.getTableName());
      UTIL.deleteTable(htd.getTableName());
    }
  }
  @Test public void testDeleteNamespace() throws Exception {
    final String namespaceName="testDeleteNamespace";
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    createNamespaceForTesting(namespaceName);
    long procId=procExec.submitProcedure(new DeleteNamespaceProcedure(procExec.getEnvironment(),namespaceName));
    ProcedureTestingUtility.waitProcedure(procExec,procId);
    ProcedureTestingUtility.assertProcNotFailed(procExec,procId);
    validateNamespaceNotExist(namespaceName);
  }
  @Test public void testDeleteNonExistNamespace() throws Exception {
    final String namespaceName="testDeleteNonExistNamespace";
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    validateNamespaceNotExist(namespaceName);
    long procId=procExec.submitProcedure(new DeleteNamespaceProcedure(procExec.getEnvironment(),namespaceName));
    ProcedureTestingUtility.waitProcedure(procExec,procId);
    Procedure<?> result=procExec.getResult(procId);
    assertTrue(result.isFailed());
    LOG.debug("Delete namespace failed with exception: " + result.getException());
    assertTrue(ProcedureTestingUtility.getExceptionCause(result) instanceof NamespaceNotFoundException);
  }
  @Test public void testDeleteSystemNamespace() throws Exception {
    final String namespaceName=NamespaceDescriptor.SYSTEM_NAMESPACE.getName();
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    long procId=procExec.submitProcedure(new DeleteNamespaceProcedure(procExec.getEnvironment(),namespaceName));
    ProcedureTestingUtility.waitProcedure(procExec,procId);
    Procedure<?> result=procExec.getResult(procId);
    assertTrue(result.isFailed());
    LOG.debug("Delete namespace failed with exception: " + result.getException());
    assertTrue(ProcedureTestingUtility.getExceptionCause(result) instanceof ConstraintException);
  }
  @Test public void testDeleteNonEmptyNamespace() throws Exception {
    final String namespaceName="testDeleteNonExistNamespace";
    final TableName tableName=TableName.valueOf("testDeleteNonExistNamespace:" + name.getMethodName());
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    createNamespaceForTesting(namespaceName);
    MasterProcedureTestingUtility.createTable(procExec,tableName,null,"f1");
    long procId=procExec.submitProcedure(new DeleteNamespaceProcedure(procExec.getEnvironment(),namespaceName));
    ProcedureTestingUtility.waitProcedure(procExec,procId);
    Procedure<?> result=procExec.getResult(procId);
    assertTrue(result.isFailed());
    LOG.debug("Delete namespace failed with exception: " + result.getException());
    assertTrue(ProcedureTestingUtility.getExceptionCause(result) instanceof ConstraintException);
  }
  @Test public void testRecoveryAndDoubleExecution() throws Exception {
    final String namespaceName="testRecoveryAndDoubleExecution";
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    createNamespaceForTesting(namespaceName);
    ProcedureTestingUtility.waitNoProcedureRunning(procExec);
    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec,true);
    long procId=procExec.submitProcedure(new DeleteNamespaceProcedure(procExec.getEnvironment(),namespaceName));
    MasterProcedureTestingUtility.testRecoveryAndDoubleExecution(procExec,procId);
    ProcedureTestingUtility.assertProcNotFailed(procExec,procId);
    validateNamespaceNotExist(namespaceName);
  }
  @Test public void testRollbackAndDoubleExecution() throws Exception {
    final String namespaceName="testRollbackAndDoubleExecution";
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    createNamespaceForTesting(namespaceName);
    ProcedureTestingUtility.waitNoProcedureRunning(procExec);
    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec,true);
    long procId=procExec.submitProcedure(new DeleteNamespaceProcedure(procExec.getEnvironment(),namespaceName));
    int lastStep=2;
    MasterProcedureTestingUtility.testRollbackAndDoubleExecution(procExec,procId,lastStep);
    NamespaceDescriptor createdNsDescriptor=UTIL.getAdmin().getNamespaceDescriptor(namespaceName);
    assertNotNull(createdNsDescriptor);
  }
  private ProcedureExecutor<MasterProcedureEnv> getMasterProcedureExecutor(){
    return UTIL.getHBaseCluster().getMaster().getMasterProcedureExecutor();
  }
  private void createNamespaceForTesting(  final String namespaceName) throws Exception {
    final NamespaceDescriptor nsd=NamespaceDescriptor.create(namespaceName).build();
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    long procId=procExec.submitProcedure(new CreateNamespaceProcedure(procExec.getEnvironment(),nsd));
    ProcedureTestingUtility.waitProcedure(procExec,procId);
    ProcedureTestingUtility.assertProcNotFailed(procExec,procId);
  }
  public static void validateNamespaceNotExist(  final String nsName) throws IOException {
    try {
      NamespaceDescriptor nsDescriptor=UTIL.getAdmin().getNamespaceDescriptor(nsName);
      assertNull(nsDescriptor);
    }
 catch (    NamespaceNotFoundException nsnfe) {
    }
  }
}
