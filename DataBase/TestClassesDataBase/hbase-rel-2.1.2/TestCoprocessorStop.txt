/** 
 * Tests for master and regionserver coprocessor stop method
 */
@Category({CoprocessorTests.class,MediumTests.class}) public class TestCoprocessorStop {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCoprocessorStop.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestCoprocessorStop.class);
  private static HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static final String MASTER_FILE="master" + System.currentTimeMillis();
  private static final String REGIONSERVER_FILE="regionserver" + System.currentTimeMillis();
public static class FooCoprocessor implements MasterCoprocessor, RegionServerCoprocessor {
    @Override public void start(    CoprocessorEnvironment env) throws IOException {
      String where=null;
      if (env instanceof MasterCoprocessorEnvironment) {
        where="master";
      }
 else       if (env instanceof RegionServerCoprocessorEnvironment) {
        where="regionserver";
      }
 else       if (env instanceof RegionCoprocessorEnvironment) {
        LOG.error("on RegionCoprocessorEnvironment!!");
      }
      LOG.info("start coprocessor on " + where);
    }
    @Override public void stop(    CoprocessorEnvironment env) throws IOException {
      String fileName=null;
      if (env instanceof MasterCoprocessorEnvironment) {
        fileName=MASTER_FILE;
      }
 else       if (env instanceof RegionServerCoprocessorEnvironment) {
        fileName=REGIONSERVER_FILE;
      }
 else       if (env instanceof RegionCoprocessorEnvironment) {
        LOG.error("on RegionCoprocessorEnvironment!!");
      }
      Configuration conf=UTIL.getConfiguration();
      Path resultFile=new Path(UTIL.getDataTestDirOnTestFS(),fileName);
      FileSystem fs=FileSystem.get(conf);
      boolean result=fs.createNewFile(resultFile);
      LOG.info("create file " + resultFile + " return rc "+ result);
    }
  }
  @BeforeClass public static void setupBeforeClass() throws Exception {
    Configuration conf=UTIL.getConfiguration();
    conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,FooCoprocessor.class.getName());
    conf.set(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY,FooCoprocessor.class.getName());
    UTIL.startMiniCluster();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  @Test public void testStopped() throws Exception {
    MiniHBaseCluster cluster=UTIL.getHBaseCluster();
    LOG.info("shutdown hbase cluster...");
    cluster.shutdown();
    LOG.info("wait for the hbase cluster shutdown...");
    cluster.waitUntilShutDown();
    Configuration conf=UTIL.getConfiguration();
    FileSystem fs=FileSystem.get(conf);
    Path resultFile=new Path(UTIL.getDataTestDirOnTestFS(),MASTER_FILE);
    assertTrue("Master flag file should have been created",fs.exists(resultFile));
    resultFile=new Path(UTIL.getDataTestDirOnTestFS(),REGIONSERVER_FILE);
    assertTrue("RegionServer flag file should have been created",fs.exists(resultFile));
  }
}
