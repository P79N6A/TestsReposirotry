/** 
 * Class to test asynchronous table admin operations
 * @see TestAsyncTableAdminApi This test and it used to be joined it was taking longer than ourten minute timeout so they were split.
 */
@RunWith(Parameterized.class) @Category({LargeTests.class,ClientTests.class}) public class TestAsyncTableAdminApi2 extends TestAsyncAdminBase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAsyncTableAdminApi2.class);
  @Test public void testDisableCatalogTable() throws Exception {
    try {
      this.admin.disableTable(TableName.META_TABLE_NAME).join();
      fail("Expected to throw ConstraintException");
    }
 catch (    Exception e) {
    }
    createTableWithDefaultConf(tableName);
  }
  @Test public void testAddColumnFamily() throws Exception {
    TableDescriptorBuilder builder=TableDescriptorBuilder.newBuilder(tableName);
    builder.setColumnFamily(ColumnFamilyDescriptorBuilder.of(FAMILY_0));
    admin.createTable(builder.build()).join();
    admin.disableTable(tableName).join();
    verifyTableDescriptor(tableName,FAMILY_0);
    admin.addColumnFamily(tableName,ColumnFamilyDescriptorBuilder.of(FAMILY_1)).join();
    verifyTableDescriptor(tableName,FAMILY_0,FAMILY_1);
  }
  @Test public void testAddSameColumnFamilyTwice() throws Exception {
    TableDescriptorBuilder builder=TableDescriptorBuilder.newBuilder(tableName);
    builder.setColumnFamily(ColumnFamilyDescriptorBuilder.of(FAMILY_0));
    admin.createTable(builder.build()).join();
    admin.disableTable(tableName).join();
    verifyTableDescriptor(tableName,FAMILY_0);
    admin.addColumnFamily(tableName,ColumnFamilyDescriptorBuilder.of(FAMILY_1)).join();
    verifyTableDescriptor(tableName,FAMILY_0,FAMILY_1);
    try {
      this.admin.addColumnFamily(tableName,ColumnFamilyDescriptorBuilder.of(FAMILY_1)).join();
      Assert.fail("Delete a non-exist column family should fail");
    }
 catch (    Exception e) {
    }
  }
  @Test public void testModifyColumnFamily() throws Exception {
    TableDescriptorBuilder tdBuilder=TableDescriptorBuilder.newBuilder(tableName);
    ColumnFamilyDescriptor cfd=ColumnFamilyDescriptorBuilder.of(FAMILY_0);
    int blockSize=cfd.getBlocksize();
    admin.createTable(tdBuilder.setColumnFamily(cfd).build()).join();
    admin.disableTable(tableName).join();
    verifyTableDescriptor(tableName,FAMILY_0);
    int newBlockSize=2 * blockSize;
    cfd=ColumnFamilyDescriptorBuilder.newBuilder(FAMILY_0).setBlocksize(newBlockSize).build();
    admin.modifyColumnFamily(tableName,cfd).join();
    TableDescriptor htd=admin.getDescriptor(tableName).get();
    ColumnFamilyDescriptor hcfd=htd.getColumnFamily(FAMILY_0);
    assertTrue(hcfd.getBlocksize() == newBlockSize);
  }
  @Test public void testModifyNonExistingColumnFamily() throws Exception {
    TableDescriptorBuilder tdBuilder=TableDescriptorBuilder.newBuilder(tableName);
    ColumnFamilyDescriptor cfd=ColumnFamilyDescriptorBuilder.of(FAMILY_0);
    int blockSize=cfd.getBlocksize();
    admin.createTable(tdBuilder.setColumnFamily(cfd).build()).join();
    admin.disableTable(tableName).join();
    verifyTableDescriptor(tableName,FAMILY_0);
    int newBlockSize=2 * blockSize;
    cfd=ColumnFamilyDescriptorBuilder.newBuilder(FAMILY_1).setBlocksize(newBlockSize).build();
    try {
      admin.modifyColumnFamily(tableName,cfd).join();
      Assert.fail("Modify a non-exist column family should fail");
    }
 catch (    Exception e) {
    }
  }
  @Test public void testDeleteColumnFamily() throws Exception {
    TableDescriptorBuilder builder=TableDescriptorBuilder.newBuilder(tableName);
    builder.setColumnFamily(ColumnFamilyDescriptorBuilder.of(FAMILY_0)).setColumnFamily(ColumnFamilyDescriptorBuilder.of(FAMILY_1));
    admin.createTable(builder.build()).join();
    admin.disableTable(tableName).join();
    verifyTableDescriptor(tableName,FAMILY_0,FAMILY_1);
    admin.deleteColumnFamily(tableName,FAMILY_1).join();
    verifyTableDescriptor(tableName,FAMILY_0);
  }
  @Test public void testDeleteSameColumnFamilyTwice() throws Exception {
    TableDescriptorBuilder builder=TableDescriptorBuilder.newBuilder(tableName);
    builder.setColumnFamily(ColumnFamilyDescriptorBuilder.of(FAMILY_0)).setColumnFamily(ColumnFamilyDescriptorBuilder.of(FAMILY_1));
    admin.createTable(builder.build()).join();
    admin.disableTable(tableName).join();
    verifyTableDescriptor(tableName,FAMILY_0,FAMILY_1);
    admin.deleteColumnFamily(tableName,FAMILY_1).join();
    verifyTableDescriptor(tableName,FAMILY_0);
    try {
      admin.deleteColumnFamily(tableName,FAMILY_1).join();
      Assert.fail("Delete a non-exist column family should fail");
    }
 catch (    Exception e) {
    }
  }
  private void verifyTableDescriptor(  final TableName tableName,  final byte[]... families) throws Exception {
    TableDescriptor htd=admin.getDescriptor(tableName).get();
    verifyTableDescriptor(htd,tableName,families);
    MasterFileSystem mfs=TEST_UTIL.getMiniHBaseCluster().getMaster().getMasterFileSystem();
    Path tableDir=FSUtils.getTableDir(mfs.getRootDir(),tableName);
    TableDescriptor td=FSTableDescriptors.getTableDescriptorFromFs(mfs.getFileSystem(),tableDir);
    verifyTableDescriptor(td,tableName,families);
  }
  private void verifyTableDescriptor(  final TableDescriptor htd,  final TableName tableName,  final byte[]... families){
    Set<byte[]> htdFamilies=htd.getColumnFamilyNames();
    assertEquals(tableName,htd.getTableName());
    assertEquals(families.length,htdFamilies.size());
    for (    byte[] familyName : families) {
      assertTrue("Expected family " + Bytes.toString(familyName),htdFamilies.contains(familyName));
    }
  }
  @Test public void testTableAvailableWithRandomSplitKeys() throws Exception {
    createTableWithDefaultConf(tableName);
    byte[][] splitKeys=new byte[1][];
    splitKeys=new byte[][]{new byte[]{1,1,1},new byte[]{2,2,2}};
    boolean tableAvailable=admin.isTableAvailable(tableName,splitKeys).get();
    assertFalse("Table should be created with 1 row in META",tableAvailable);
  }
  @Test public void testCompactionTimestamps() throws Exception {
    createTableWithDefaultConf(tableName);
    AsyncTable<?> table=ASYNC_CONN.getTable(tableName);
    Optional<Long> ts=admin.getLastMajorCompactionTimestamp(tableName).get();
    assertFalse(ts.isPresent());
    Put p=new Put(Bytes.toBytes("row1"));
    p.addColumn(FAMILY,Bytes.toBytes("q"),Bytes.toBytes("v"));
    table.put(p).join();
    ts=admin.getLastMajorCompactionTimestamp(tableName).get();
    assertFalse(ts.isPresent());
    admin.flush(tableName).join();
    ts=admin.getLastMajorCompactionTimestamp(tableName).get();
    assertFalse(ts.isPresent());
    byte[] regionName=ASYNC_CONN.getRegionLocator(tableName).getRegionLocation(Bytes.toBytes("row1")).get().getRegion().getRegionName();
    Optional<Long> ts1=admin.getLastMajorCompactionTimestampForRegion(regionName).get();
    assertFalse(ts1.isPresent());
    p=new Put(Bytes.toBytes("row2"));
    p.addColumn(FAMILY,Bytes.toBytes("q"),Bytes.toBytes("v"));
    table.put(p).join();
    admin.flush(tableName).join();
    ts1=admin.getLastMajorCompactionTimestamp(tableName).get();
    assertFalse(ts1.isPresent());
    for (int i=0; i < 3; i++) {
      table.put(p).join();
      admin.flush(tableName).join();
    }
    admin.majorCompact(tableName).join();
    long curt=System.currentTimeMillis();
    long waitTime=10000;
    long endt=curt + waitTime;
    CompactionState state=admin.getCompactionState(tableName).get();
    LOG.info("Current compaction state 1 is " + state);
    while (state == CompactionState.NONE && curt < endt) {
      Thread.sleep(100);
      state=admin.getCompactionState(tableName).get();
      curt=System.currentTimeMillis();
      LOG.info("Current compaction state 2 is " + state);
    }
    if (state == CompactionState.MAJOR) {
      state=admin.getCompactionState(tableName).get();
      LOG.info("Current compaction state 3 is " + state);
      while (state != CompactionState.NONE && curt < endt) {
        Thread.sleep(10);
        state=admin.getCompactionState(tableName).get();
        LOG.info("Current compaction state 4 is " + state);
      }
    }
    Thread.sleep(TEST_UTIL.getConfiguration().getInt("hbase.regionserver.msginterval",3 * 1000) * 2);
    ts=admin.getLastMajorCompactionTimestamp(tableName).get();
    assertTrue(ts.isPresent());
    assertTrue(ts.get() > 0);
    ts1=admin.getLastMajorCompactionTimestampForRegion(regionName).get();
    assertTrue(ts1.isPresent());
    assertEquals(ts.get(),ts1.get());
    table.put(p).join();
    admin.flush(tableName).join();
    ts=admin.getLastMajorCompactionTimestamp(tableName).join();
    assertTrue(ts.isPresent());
    assertEquals(ts.get(),ts1.get());
    ts1=admin.getLastMajorCompactionTimestampForRegion(regionName).get();
    assertTrue(ts1.isPresent());
    assertEquals(ts.get(),ts1.get());
  }
}
