public class AbstractHBaseToolTest {
static final class Options {
    static final Option REQUIRED=new Option(null,"required",true,"");
    static final Option OPTIONAL=new Option(null,"optional",true,"");
    static final Option BOOLEAN=new Option(null,"boolean",false,"");
  }
  /** 
 * Simple tool to test options parsing. 3 options: required, optional, and boolean 2 deprecated options to test backward compatibility: -opt (old version of --optional) and -bool (old version of --boolean).
 */
private static class TestTool extends AbstractHBaseTool {
    String requiredValue;
    String optionalValue;
    boolean booleanValue;
    @Override protected void addOptions(){
      addRequiredOption(Options.REQUIRED);
      addOption(Options.OPTIONAL);
      addOption(Options.BOOLEAN);
    }
    @Override protected void processOptions(    CommandLine cmd){
      requiredValue=cmd.getOptionValue(Options.REQUIRED.getLongOpt());
      if (cmd.hasOption(Options.OPTIONAL.getLongOpt())) {
        optionalValue=cmd.getOptionValue(Options.OPTIONAL.getLongOpt());
      }
      booleanValue=booleanValue || cmd.hasOption(Options.BOOLEAN.getLongOpt());
    }
    @Override protected void processOldArgs(    List<String> args){
      List<String> invalidArgs=new ArrayList<>();
      while (args.size() > 0) {
        String cmd=args.remove(0);
        if (cmd.equals("-opt")) {
          optionalValue=args.remove(0);
        }
 else         if (cmd.equals("-bool")) {
          booleanValue=true;
        }
 else {
          invalidArgs.add(cmd);
        }
      }
      args.addAll(invalidArgs);
    }
    @Override protected int doWork() throws Exception {
      return EXIT_SUCCESS;
    }
  }
  TestTool tool;
  @Before public void setup(){
    tool=new TestTool();
    tool.setConf(HBaseConfiguration.create());
  }
  @Test public void testAllOptionsSet() throws Exception {
    String[] args=new String[]{"--required=foo","--optional=bar","--boolean"};
    int returnValue=tool.run(args);
    assertEquals(EXIT_SUCCESS,returnValue);
    assertEquals("foo",tool.requiredValue);
    assertEquals("bar",tool.optionalValue);
    assertTrue(tool.booleanValue);
  }
  @Test public void testOptionsNotSet() throws Exception {
    String[] args=new String[]{"--required=foo"};
    int returnValue=tool.run(args);
    assertEquals(EXIT_SUCCESS,returnValue);
    assertEquals("foo",tool.requiredValue);
    assertNull(tool.optionalValue);
    assertFalse(tool.booleanValue);
  }
  @Test public void testMissingRequiredOption() throws Exception {
    String[] args=new String[0];
    int returnValue=tool.run(args);
    assertEquals(EXIT_FAILURE,returnValue);
  }
  @Test public void testFailureOnUnrecognizedOption() throws Exception {
    String[] args=new String[]{"--required=foo","-asdfs"};
    int returnValue=tool.run(args);
    assertEquals(EXIT_FAILURE,returnValue);
  }
  @Test public void testOldOptionsWork() throws Exception {
    String[] args=new String[]{"--required=foo","-opt","bar","-bool"};
    int returnValue=tool.run(args);
    assertEquals(EXIT_SUCCESS,returnValue);
    assertEquals("foo",tool.requiredValue);
    assertEquals("bar",tool.optionalValue);
    assertTrue(tool.booleanValue);
  }
  @Test public void testNewOptionOverridesOldOption() throws Exception {
    String[] args=new String[]{"--required=foo","--optional=baz","-opt","bar","-bool"};
    int returnValue=tool.run(args);
    assertEquals(EXIT_SUCCESS,returnValue);
    assertEquals("foo",tool.requiredValue);
    assertEquals("baz",tool.optionalValue);
    assertTrue(tool.booleanValue);
  }
}
