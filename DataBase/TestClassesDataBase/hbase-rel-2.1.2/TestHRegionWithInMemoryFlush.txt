/** 
 * A test similar to TestHRegion, but with in-memory flush families. Also checks wal truncation after in-memory compaction.
 */
@Category({VerySlowRegionServerTests.class,LargeTests.class}) @SuppressWarnings("deprecation") public class TestHRegionWithInMemoryFlush extends TestHRegion {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHRegionWithInMemoryFlush.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestHRegionWithInMemoryFlush.class);
  /** 
 * @return A region on which you must call{@link HBaseTestingUtility#closeRegionAndWAL(HRegion)} when done.
 */
  @Override public HRegion initHRegion(  TableName tableName,  byte[] startKey,  byte[] stopKey,  boolean isReadOnly,  Durability durability,  WAL wal,  byte[]... families) throws IOException {
    boolean[] inMemory=new boolean[families.length];
    for (int i=0; i < inMemory.length; i++) {
      inMemory[i]=true;
    }
    return TEST_UTIL.createLocalHRegionWithInMemoryFlags(tableName,startKey,stopKey,isReadOnly,durability,wal,inMemory,families);
  }
  /** 
 * A test case of HBASE-21041
 * @throws Exception Exception
 */
  @Override @Test public void testFlushAndMemstoreSizeCounting() throws Exception {
    byte[] family=Bytes.toBytes("family");
    this.region=initHRegion(tableName,method,CONF,family);
    final WALFactory wals=new WALFactory(CONF,method);
    int count=0;
    try {
      for (      byte[] row : HBaseTestingUtility.ROWS) {
        Put put=new Put(row);
        put.addColumn(family,family,row);
        region.put(put);
        if (count++ % 1000 == 0) {
          ((CompactingMemStore)(region.getStore(family).memstore)).flushInMemory();
        }
      }
      region.flush(true);
      Assert.assertEquals(0,region.getMemStoreDataSize());
      Assert.assertEquals(MutableSegment.DEEP_OVERHEAD,region.getMemStoreHeapSize());
      Assert.assertEquals(0,region.getMemStoreOffHeapSize());
    }
  finally {
      HBaseTestingUtility.closeRegionAndWAL(this.region);
      this.region=null;
      wals.close();
    }
  }
}
