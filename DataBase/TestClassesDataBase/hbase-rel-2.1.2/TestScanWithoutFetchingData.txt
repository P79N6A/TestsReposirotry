/** 
 * Testcase to make sure that we do not close scanners if ScanRequest.numberOfRows is zero. See HBASE-18042 for more details.
 */
@Category({RegionServerTests.class,MediumTests.class}) public class TestScanWithoutFetchingData {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestScanWithoutFetchingData.class);
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static final TableName TABLE_NAME=TableName.valueOf("test");
  private static final byte[] CF=Bytes.toBytes("cf");
  private static final byte[] CQ=Bytes.toBytes("cq");
  private static final int COUNT=10;
  private static HRegionInfo HRI;
  private static ClientProtos.ClientService.BlockingInterface STUB;
  @BeforeClass public static void setUp() throws Exception {
    UTIL.startMiniCluster(1);
    try (Table table=UTIL.createTable(TABLE_NAME,CF)){
      for (int i=0; i < COUNT; i++) {
        table.put(new Put(Bytes.toBytes(i)).addColumn(CF,CQ,Bytes.toBytes(i)));
      }
    }
     HRI=UTIL.getAdmin().getTableRegions(TABLE_NAME).get(0);
    STUB=((ConnectionImplementation)UTIL.getConnection()).getClient(UTIL.getHBaseCluster().getRegionServer(0).getServerName());
  }
  @AfterClass public static void tearDown() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  private void assertResult(  int row,  Result result){
    assertEquals(row,Bytes.toInt(result.getRow()));
    assertEquals(row,Bytes.toInt(result.getValue(CF,CQ)));
  }
  @Test public void test() throws ServiceException, IOException {
    Scan scan=new Scan();
    ScanRequest req=RequestConverter.buildScanRequest(HRI.getRegionName(),scan,0,false);
    HBaseRpcController hrc=new HBaseRpcControllerImpl();
    ScanResponse resp=STUB.scan(hrc,req);
    assertTrue(resp.getMoreResults());
    assertTrue(resp.getMoreResultsInRegion());
    assertEquals(0,ResponseConverter.getResults(hrc.cellScanner(),resp).length);
    long scannerId=resp.getScannerId();
    int nextCallSeq=0;
    for (int i=0; i < COUNT / 2; i++) {
      req=RequestConverter.buildScanRequest(scannerId,1,false,nextCallSeq++,false,false,-1);
      hrc.reset();
      resp=STUB.scan(hrc,req);
      assertTrue(resp.getMoreResults());
      assertTrue(resp.getMoreResultsInRegion());
      Result[] results=ResponseConverter.getResults(hrc.cellScanner(),resp);
      assertEquals(1,results.length);
      assertResult(i,results[0]);
    }
    req=RequestConverter.buildScanRequest(scannerId,0,false,nextCallSeq++,false,false,-1);
    hrc.reset();
    resp=STUB.scan(hrc,req);
    assertTrue(resp.getMoreResults());
    assertTrue(resp.getMoreResultsInRegion());
    assertEquals(0,ResponseConverter.getResults(hrc.cellScanner(),resp).length);
    for (int i=COUNT / 2; i < COUNT; i++) {
      req=RequestConverter.buildScanRequest(scannerId,1,false,nextCallSeq++,false,false,-1);
      hrc.reset();
      resp=STUB.scan(hrc,req);
      assertTrue(resp.getMoreResults());
      assertEquals(i != COUNT - 1,resp.getMoreResultsInRegion());
      Result[] results=ResponseConverter.getResults(hrc.cellScanner(),resp);
      assertEquals(1,results.length);
      assertResult(i,results[0]);
    }
    req=RequestConverter.buildScanRequest(scannerId,0,true,false);
    resp=STUB.scan(null,req);
  }
}
