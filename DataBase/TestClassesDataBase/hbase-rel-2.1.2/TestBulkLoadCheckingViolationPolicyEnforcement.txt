@Category(SmallTests.class) public class TestBulkLoadCheckingViolationPolicyEnforcement {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestBulkLoadCheckingViolationPolicyEnforcement.class);
  FileSystem fs;
  RegionServerServices rss;
  TableName tableName;
  SpaceViolationPolicyEnforcement policy;
  @Before public void setup(){
    fs=mock(FileSystem.class);
    rss=mock(RegionServerServices.class);
    tableName=TableName.valueOf("foo");
    policy=new DefaultViolationPolicyEnforcement();
  }
  @Test public void testFilesUnderLimit() throws Exception {
    final List<String> paths=new ArrayList<>();
    final List<FileStatus> statuses=new ArrayList<>();
    final long length=100L * 1024L;
    for (int i=0; i < 5; i++) {
      String path="/" + i;
      FileStatus status=mock(FileStatus.class);
      when(fs.getFileStatus(new Path(path))).thenReturn(status);
      when(status.getLen()).thenReturn(length);
      when(status.isFile()).thenReturn(true);
      paths.add(path);
      statuses.add(status);
    }
    SpaceQuotaSnapshot snapshot=new SpaceQuotaSnapshot(SpaceQuotaStatus.notInViolation(),0,length * 6);
    policy.initialize(rss,tableName,snapshot);
    policy.checkBulkLoad(fs,paths);
  }
  @Test(expected=IllegalArgumentException.class) public void testFileIsNotAFile() throws Exception {
    final List<String> paths=new ArrayList<>();
    String path="/1";
    FileStatus status=mock(FileStatus.class);
    when(fs.getFileStatus(new Path(path))).thenReturn(status);
    when(status.getLen()).thenReturn(1000L);
    when(status.isFile()).thenReturn(false);
    paths.add(path);
    SpaceQuotaSnapshot snapshot=new SpaceQuotaSnapshot(SpaceQuotaStatus.notInViolation(),0,Long.MAX_VALUE);
    policy.initialize(rss,tableName,snapshot);
    policy.checkBulkLoad(fs,paths);
  }
  @Test(expected=SpaceLimitingException.class) public void testOneFileInBatchOverLimit() throws Exception {
    final List<String> paths=new ArrayList<>();
    final List<FileStatus> statuses=new ArrayList<>();
    final long length=1000L * 1024L;
    for (int i=0; i < 5; i++) {
      String path="/" + i;
      FileStatus status=mock(FileStatus.class);
      when(fs.getFileStatus(new Path(path))).thenReturn(status);
      when(status.getLen()).thenReturn(length);
      when(status.isFile()).thenReturn(true);
      paths.add(path);
      statuses.add(status);
    }
    SpaceQuotaSnapshot snapshot=new SpaceQuotaSnapshot(SpaceQuotaStatus.notInViolation(),0,1024L);
    policy.initialize(rss,tableName,snapshot);
    policy.checkBulkLoad(fs,paths);
  }
  @Test(expected=SpaceLimitingException.class) public void testSumOfFilesOverLimit() throws Exception {
    final List<String> paths=new ArrayList<>();
    final List<FileStatus> statuses=new ArrayList<>();
    final long length=1024L;
    for (int i=0; i < 5; i++) {
      String path="/" + i;
      FileStatus status=mock(FileStatus.class);
      when(fs.getFileStatus(new Path(path))).thenReturn(status);
      when(status.getLen()).thenReturn(length);
      when(status.isFile()).thenReturn(true);
      paths.add(path);
      statuses.add(status);
    }
    SpaceQuotaSnapshot snapshot=new SpaceQuotaSnapshot(SpaceQuotaStatus.notInViolation(),0,5000L);
    policy.initialize(rss,tableName,snapshot);
    policy.checkBulkLoad(fs,paths);
  }
}
