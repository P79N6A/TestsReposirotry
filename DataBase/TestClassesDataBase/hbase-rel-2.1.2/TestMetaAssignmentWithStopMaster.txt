@Category({LargeTests.class}) public class TestMetaAssignmentWithStopMaster {
  private static final Logger LOG=LoggerFactory.getLogger(TestMetaAssignmentWithStopMaster.class);
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMetaAssignmentWithStopMaster.class);
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static final long WAIT_TIMEOUT=120000;
  @BeforeClass public static void setUp() throws Exception {
    UTIL.startMiniCluster(2,3);
  }
  @Test public void testStopActiveMaster() throws Exception {
    ClusterConnection conn=(ClusterConnection)ConnectionFactory.createConnection(UTIL.getConfiguration());
    ServerName oldMetaServer=conn.locateRegions(TableName.META_TABLE_NAME).get(0).getServerName();
    ServerName oldMaster=UTIL.getMiniHBaseCluster().getMaster().getServerName();
    UTIL.getMiniHBaseCluster().getMaster().stop("Stop master for test");
    long startTime=System.currentTimeMillis();
    while (UTIL.getMiniHBaseCluster().getMaster() == null || UTIL.getMiniHBaseCluster().getMaster().getServerName().equals(oldMaster)) {
      LOG.info("Wait the standby master become active");
      Thread.sleep(3000);
      if (System.currentTimeMillis() - startTime > WAIT_TIMEOUT) {
        fail("Wait too long for standby master become active");
      }
    }
    startTime=System.currentTimeMillis();
    while (!UTIL.getMiniHBaseCluster().getMaster().isInitialized()) {
      LOG.info("Wait the new active master to be initialized");
      Thread.sleep(3000);
      if (System.currentTimeMillis() - startTime > WAIT_TIMEOUT) {
        fail("Wait too long for the new active master to be initialized");
      }
    }
    ServerName newMetaServer=conn.locateRegions(TableName.META_TABLE_NAME).get(0).getServerName();
    assertTrue("The new meta server " + newMetaServer + " should be same with"+ " the old meta server "+ oldMetaServer,newMetaServer.equals(oldMetaServer));
  }
}
