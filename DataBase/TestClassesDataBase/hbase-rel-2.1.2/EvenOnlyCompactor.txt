public static class EvenOnlyCompactor implements RegionCoprocessor, RegionObserver {
  long lastCompaction;
  long lastFlush;
  @Override public Optional<RegionObserver> getRegionObserver(){
    return Optional.of(this);
  }
  @Override public InternalScanner preCompact(  ObserverContext<RegionCoprocessorEnvironment> e,  Store store,  InternalScanner scanner,  ScanType scanType,  CompactionLifeCycleTracker tracker,  CompactionRequest request){
    return new InternalScanner(){
      @Override public boolean next(      List<Cell> results,      ScannerContext scannerContext) throws IOException {
        List<Cell> internalResults=new ArrayList<>();
        boolean hasMore;
        do {
          hasMore=scanner.next(internalResults,scannerContext);
          if (!internalResults.isEmpty()) {
            long row=Bytes.toLong(CellUtil.cloneValue(internalResults.get(0)));
            if (row % 2 == 0) {
              break;
            }
            internalResults.clear();
          }
        }
 while (hasMore);
        if (!internalResults.isEmpty()) {
          results.addAll(internalResults);
        }
        return hasMore;
      }
      @Override public void close() throws IOException {
        scanner.close();
      }
    }
;
  }
  @Override public void postCompact(  ObserverContext<RegionCoprocessorEnvironment> e,  Store store,  StoreFile resultFile,  CompactionLifeCycleTracker tracker,  CompactionRequest request){
    lastCompaction=EnvironmentEdgeManager.currentTime();
  }
  @Override public void postFlush(  ObserverContext<RegionCoprocessorEnvironment> e,  FlushLifeCycleTracker tracker){
    lastFlush=EnvironmentEdgeManager.currentTime();
  }
}
