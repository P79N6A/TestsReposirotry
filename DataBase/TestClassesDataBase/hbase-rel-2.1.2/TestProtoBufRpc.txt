/** 
 * Test for testing protocol buffer based RPC mechanism. This test depends on test.proto definition of types in <code>src/test/protobuf/test.proto</code> and protobuf service definition from <code>src/test/protobuf/test_rpc_service.proto</code>
 */
@RunWith(Parameterized.class) @Category({RPCTests.class,MediumTests.class}) public class TestProtoBufRpc {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestProtoBufRpc.class);
  public final static String ADDRESS="localhost";
  public static int PORT=0;
  private InetSocketAddress isa;
  private Configuration conf;
  private RpcServerInterface server;
  @Parameters(name="{index}: rpcServerImpl={0}") public static Collection<Object[]> parameters(){
    return Arrays.asList(new Object[]{SimpleRpcServer.class.getName()},new Object[]{NettyRpcServer.class.getName()});
  }
  @Parameter(0) public String rpcServerImpl;
  @Before public void setUp() throws IOException {
    this.conf=HBaseConfiguration.create();
    this.conf.set(RpcServerFactory.CUSTOM_RPC_SERVER_IMPL_CONF_KEY,rpcServerImpl);
    Logger log=Logger.getLogger("org.apache.hadoop.ipc.HBaseServer");
    log.setLevel(Level.DEBUG);
    log=Logger.getLogger("org.apache.hadoop.ipc.HBaseServer.trace");
    log.setLevel(Level.TRACE);
    this.server=RpcServerFactory.createRpcServer(null,"testrpc",Lists.newArrayList(new RpcServer.BlockingServiceAndInterface(SERVICE,null)),new InetSocketAddress(ADDRESS,PORT),conf,new FifoRpcScheduler(conf,10));
    InetSocketAddress address=server.getListenerAddress();
    if (address == null) {
      throw new IOException("Listener channel is closed");
    }
    this.isa=address;
    this.server.start();
  }
  @After public void tearDown() throws Exception {
    server.stop();
  }
  @Test(expected=org.apache.hbase.thirdparty.com.google.protobuf.ServiceException.class) public void testProtoBufRpc() throws Exception {
    RpcClient rpcClient=RpcClientFactory.createClient(conf,HConstants.CLUSTER_ID_DEFAULT);
    try {
      BlockingInterface stub=newBlockingStub(rpcClient,this.isa);
      TestProtos.EmptyRequestProto emptyRequest=TestProtos.EmptyRequestProto.newBuilder().build();
      stub.ping(null,emptyRequest);
      EchoRequestProto echoRequest=EchoRequestProto.newBuilder().setMessage("hello").build();
      EchoResponseProto echoResponse=stub.echo(null,echoRequest);
      assertEquals("hello",echoResponse.getMessage());
      stub.error(null,emptyRequest);
      fail("Expected exception is not thrown");
    }
  finally {
      rpcClient.close();
    }
  }
}
