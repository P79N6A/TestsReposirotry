/** 
 * Test that an HBase cluster can run on top of an existing MiniDfsCluster
 */
@Category(MediumTests.class) public class TestHBaseOnOtherDfsCluster {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHBaseOnOtherDfsCluster.class);
  @Rule public TestName name=new TestName();
  @Test public void testOveralyOnOtherCluster() throws Exception {
    HBaseTestingUtility util1=new HBaseTestingUtility();
    MiniDFSCluster dfs=util1.startMiniDFSCluster(1);
    HBaseTestingUtility util2=new HBaseTestingUtility();
    util2.setDFSCluster(dfs,false);
    util2.startMiniCluster();
    FileSystem fs=dfs.getFileSystem();
    FileSystem targetFs=util2.getDFSCluster().getFileSystem();
    assertFsSameUri(fs,targetFs);
    fs=FileSystem.get(util1.getConfiguration());
    targetFs=FileSystem.get(util2.getConfiguration());
    assertFsSameUri(fs,targetFs);
    Path randomFile=new Path("/" + util1.getRandomUUID());
    assertTrue(targetFs.createNewFile(randomFile));
    assertTrue(fs.exists(randomFile));
    byte[] family=Bytes.toBytes("testfamily");
    final TableName tablename=TableName.valueOf(name.getMethodName());
    Table table=util2.createTable(tablename,family);
    Put p=new Put(new byte[]{1,2,3});
    p.addColumn(family,null,new byte[]{1});
    table.put(p);
    util2.shutdownMiniCluster();
    util1.shutdownMiniDFSCluster();
  }
  private void assertFsSameUri(  FileSystem sourceFs,  FileSystem targetFs){
    Path source=new Path(sourceFs.getUri());
    Path target=new Path(targetFs.getUri());
    assertEquals(source,target);
  }
}
