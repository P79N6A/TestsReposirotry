/** 
 * This copro is used to synchronize the tests.
 */
public static class SlowMeCopro implements RegionCoprocessor, RegionObserver {
  static final AtomicLong sleepTime=new AtomicLong(0);
  static final AtomicBoolean slowDownNext=new AtomicBoolean(false);
  static final AtomicInteger countOfNext=new AtomicInteger(0);
  private static final AtomicReference<CountDownLatch> primaryCdl=new AtomicReference<>(new CountDownLatch(0));
  private static final AtomicReference<CountDownLatch> secondaryCdl=new AtomicReference<>(new CountDownLatch(0));
  Random r=new Random();
  public SlowMeCopro(){
  }
  @Override public Optional<RegionObserver> getRegionObserver(){
    return Optional.of(this);
  }
  @Override public void preGetOp(  final ObserverContext<RegionCoprocessorEnvironment> e,  final Get get,  final List<Cell> results) throws IOException {
    slowdownCode(e);
  }
  @Override public void preScannerOpen(  final ObserverContext<RegionCoprocessorEnvironment> e,  final Scan scan) throws IOException {
    slowdownCode(e);
  }
  @Override public boolean preScannerNext(  final ObserverContext<RegionCoprocessorEnvironment> e,  final InternalScanner s,  final List<Result> results,  final int limit,  final boolean hasMore) throws IOException {
    if (slowDownNext.get()) {
      if (countOfNext.incrementAndGet() == 2) {
        sleepTime.set(2000);
        slowdownCode(e);
      }
    }
    return true;
  }
  private void slowdownCode(  final ObserverContext<RegionCoprocessorEnvironment> e){
    if (e.getEnvironment().getRegion().getRegionInfo().getReplicaId() == 0) {
      LOG.info("We're the primary replicas.");
      CountDownLatch latch=getPrimaryCdl().get();
      try {
        if (sleepTime.get() > 0) {
          LOG.info("Sleeping for " + sleepTime.get() + " ms");
          Thread.sleep(sleepTime.get());
        }
 else         if (latch.getCount() > 0) {
          LOG.info("Waiting for the counterCountDownLatch");
          latch.await(2,TimeUnit.MINUTES);
          if (latch.getCount() > 0) {
            throw new RuntimeException("Can't wait more");
          }
        }
      }
 catch (      InterruptedException e1) {
        LOG.error(e1.toString(),e1);
      }
    }
 else {
      LOG.info("We're not the primary replicas.");
      CountDownLatch latch=getSecondaryCdl().get();
      try {
        if (latch.getCount() > 0) {
          LOG.info("Waiting for the secondary counterCountDownLatch");
          latch.await(2,TimeUnit.MINUTES);
          if (latch.getCount() > 0) {
            throw new RuntimeException("Can't wait more");
          }
        }
      }
 catch (      InterruptedException e1) {
        LOG.error(e1.toString(),e1);
      }
    }
  }
  public static AtomicReference<CountDownLatch> getPrimaryCdl(){
    return primaryCdl;
  }
  public static AtomicReference<CountDownLatch> getSecondaryCdl(){
    return secondaryCdl;
  }
}
