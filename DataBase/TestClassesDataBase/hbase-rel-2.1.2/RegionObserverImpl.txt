public static class RegionObserverImpl implements RegionCoprocessor, RegionObserver {
  static final AtomicInteger COUNT=new AtomicInteger(0);
  @Override public Optional<RegionObserver> getRegionObserver(){
    return Optional.of(this);
  }
  @Override public void prePut(  ObserverContext<RegionCoprocessorEnvironment> c,  Put put,  WALEdit edit,  Durability durability) throws IOException {
    put.add(createCustomCell(put));
    COUNT.incrementAndGet();
  }
  @Override public void preDelete(  ObserverContext<RegionCoprocessorEnvironment> c,  Delete delete,  WALEdit edit,  Durability durability) throws IOException {
    delete.add(createCustomCell(delete));
    COUNT.incrementAndGet();
  }
  @Override public boolean preCheckAndPut(  ObserverContext<RegionCoprocessorEnvironment> c,  byte[] row,  byte[] family,  byte[] qualifier,  CompareOperator op,  ByteArrayComparable comparator,  Put put,  boolean result) throws IOException {
    put.add(createCustomCell(put));
    COUNT.incrementAndGet();
    return result;
  }
  @Override public boolean preCheckAndDelete(  ObserverContext<RegionCoprocessorEnvironment> c,  byte[] row,  byte[] family,  byte[] qualifier,  CompareOperator op,  ByteArrayComparable comparator,  Delete delete,  boolean result) throws IOException {
    delete.add(createCustomCell(delete));
    COUNT.incrementAndGet();
    return result;
  }
  @Override public Result preAppend(  ObserverContext<RegionCoprocessorEnvironment> c,  Append append) throws IOException {
    append.add(createCustomCell(append));
    COUNT.incrementAndGet();
    return null;
  }
  @Override public Result preIncrement(  ObserverContext<RegionCoprocessorEnvironment> c,  Increment increment) throws IOException {
    increment.add(createCustomCell(increment));
    COUNT.incrementAndGet();
    return null;
  }
}
