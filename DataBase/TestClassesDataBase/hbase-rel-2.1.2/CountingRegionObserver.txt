public static final class CountingRegionObserver implements RegionCoprocessor, RegionObserver {
  @Override public Optional<RegionObserver> getRegionObserver(){
    return Optional.of(this);
  }
  @Override public boolean preScannerNext(  ObserverContext<RegionCoprocessorEnvironment> c,  InternalScanner s,  List<Result> result,  int limit,  boolean hasNext) throws IOException {
    if (c.getEnvironment().getRegionInfo().isMetaRegion()) {
      int concurrency=CONCURRENCY.incrementAndGet();
      for (; ; ) {
        int max=MAX_CONCURRENCY.get();
        if (concurrency <= max) {
          break;
        }
        if (MAX_CONCURRENCY.compareAndSet(max,concurrency)) {
          break;
        }
      }
      Threads.sleepWithoutInterrupt(10);
    }
    return hasNext;
  }
  @Override public boolean postScannerNext(  ObserverContext<RegionCoprocessorEnvironment> c,  InternalScanner s,  List<Result> result,  int limit,  boolean hasNext) throws IOException {
    if (c.getEnvironment().getRegionInfo().isMetaRegion()) {
      CONCURRENCY.decrementAndGet();
    }
    return hasNext;
  }
}
