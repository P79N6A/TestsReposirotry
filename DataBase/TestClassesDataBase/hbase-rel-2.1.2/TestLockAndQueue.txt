@Category({MasterTests.class,SmallTests.class}) public class TestLockAndQueue {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestLockAndQueue.class);
  @Test public void testHasLockAccess(){
    Map<Long,NoopProcedure<Void>> procMap=new HashMap<>();
    for (long i=1; i <= 10; i++) {
      NoopProcedure<Void> proc=new NoopProcedure<>();
      proc.setProcId(i);
      if (i > 1) {
        proc.setParentProcId(i - 1);
        proc.setRootProcId(1);
      }
      procMap.put(i,proc);
    }
    LockAndQueue laq=new LockAndQueue(procMap::get);
    for (long i=1; i <= 10; i++) {
      assertFalse(laq.hasLockAccess(procMap.get(i)));
    }
    for (long i=1; i <= 10; i++) {
      NoopProcedure<Void> procHasLock=procMap.get(i);
      laq.tryExclusiveLock(procHasLock);
      for (long j=1; j < i; j++) {
        assertFalse(laq.hasLockAccess(procMap.get(j)));
      }
      for (long j=i; j <= 10; j++) {
        assertTrue(laq.hasLockAccess(procMap.get(j)));
      }
      laq.releaseExclusiveLock(procHasLock);
    }
  }
}
