/** 
 * Wraps the invocation of  {@link PerformanceEvaluation} in a {@code Callable}.
 */
static class PerfEvalCallable implements Callable<TimingResult> {
  private final Queue<String> argv=new LinkedList<>();
  private final Admin admin;
  public PerfEvalCallable(  Admin admin,  String argv){
    this.admin=admin;
    this.argv.addAll(Arrays.asList(argv.split(" ")));
    LOG.debug("Created PerformanceEvaluationCallable with args: " + argv);
  }
  @Override public TimingResult call() throws Exception {
    PerformanceEvaluation.TestOptions opts=PerformanceEvaluation.parseOpts(argv);
    PerformanceEvaluation.checkTable(admin,opts);
    PerformanceEvaluation.RunResult results[]=null;
    long numRows=opts.totalRows;
    long elapsedTime=0;
    if (opts.nomapred) {
      results=PerformanceEvaluation.doLocalClients(opts,admin.getConfiguration());
      for (      PerformanceEvaluation.RunResult r : results) {
        elapsedTime=Math.max(elapsedTime,r.duration);
      }
    }
 else {
      Job job=PerformanceEvaluation.doMapReduce(opts,admin.getConfiguration());
      Counters counters=job.getCounters();
      numRows=counters.findCounter(PerformanceEvaluation.Counter.ROWS).getValue();
      elapsedTime=counters.findCounter(PerformanceEvaluation.Counter.ELAPSED_TIME).getValue();
    }
    return new TimingResult(numRows,elapsedTime,results);
  }
}
