@Category({MiscTests.class,SmallTests.class}) public class TestCoprocessorDescriptor {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCoprocessorDescriptor.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestCoprocessorDescriptor.class);
  @Rule public TestName name=new TestName();
  @Test public void testBuild(){
    String className="className";
    String path="path";
    int priority=100;
    String propertyKey="propertyKey";
    String propertyValue="propertyValue";
    CoprocessorDescriptor cp=CoprocessorDescriptorBuilder.newBuilder(className).setJarPath(path).setPriority(priority).setProperty(propertyKey,propertyValue).build();
    assertEquals(className,cp.getClassName());
    assertEquals(path,cp.getJarPath().get());
    assertEquals(priority,cp.getPriority());
    assertEquals(1,cp.getProperties().size());
    assertEquals(propertyValue,cp.getProperties().get(propertyKey));
  }
  @Test public void testSetCoprocessor() throws IOException {
    String propertyKey="propertyKey";
    List<CoprocessorDescriptor> cps=new ArrayList<>();
    for (    String className : Arrays.asList("className0","className1","className2")) {
      String path="path";
      int priority=Math.abs(className.hashCode());
      String propertyValue="propertyValue";
      cps.add(CoprocessorDescriptorBuilder.newBuilder(className).setJarPath(path).setPriority(priority).setProperty(propertyKey,propertyValue).build());
    }
    TableDescriptor tableDescriptor=TableDescriptorBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setCoprocessors(cps).build();
    for (    CoprocessorDescriptor cp : cps) {
      boolean match=false;
      for (      CoprocessorDescriptor that : tableDescriptor.getCoprocessorDescriptors()) {
        if (cp.getClassName().equals(that.getClassName())) {
          assertEquals(cp.getJarPath().get(),that.getJarPath().get());
          assertEquals(cp.getPriority(),that.getPriority());
          assertEquals(cp.getProperties().size(),that.getProperties().size());
          assertEquals(cp.getProperties().get(propertyKey),that.getProperties().get(propertyKey));
          match=true;
          break;
        }
      }
      if (!match) {
        fail("expect:" + cp + ", actual:"+ tableDescriptor.getCoprocessorDescriptors());
      }
    }
  }
}
