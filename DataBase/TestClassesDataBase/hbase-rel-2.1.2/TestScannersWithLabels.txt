@Category({RestTests.class,MediumTests.class}) public class TestScannersWithLabels {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestScannersWithLabels.class);
  private static final TableName TABLE=TableName.valueOf("TestScannersWithLabels");
  private static final String CFA="a";
  private static final String CFB="b";
  private static final String COLUMN_1=CFA + ":1";
  private static final String COLUMN_2=CFB + ":2";
  private final static String TOPSECRET="topsecret";
  private final static String PUBLIC="public";
  private final static String PRIVATE="private";
  private final static String CONFIDENTIAL="confidential";
  private final static String SECRET="secret";
  private static User SUPERUSER;
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final HBaseRESTTestingUtility REST_TEST_UTIL=new HBaseRESTTestingUtility();
  private static Client client;
  private static JAXBContext context;
  private static Marshaller marshaller;
  private static Unmarshaller unmarshaller;
  private static Configuration conf;
  private static int insertData(  TableName tableName,  String column,  double prob) throws IOException {
    byte[] k=new byte[3];
    byte[][] famAndQf=CellUtil.parseColumn(Bytes.toBytes(column));
    List<Put> puts=new ArrayList<>(9);
    for (int i=0; i < 9; i++) {
      Put put=new Put(Bytes.toBytes("row" + i));
      put.setDurability(Durability.SKIP_WAL);
      put.addColumn(famAndQf[0],famAndQf[1],k);
      put.setCellVisibility(new CellVisibility("(" + SECRET + "|"+ CONFIDENTIAL+ ")"+ "&"+ "!"+ TOPSECRET));
      puts.add(put);
    }
    try (Table table=TEST_UTIL.getConnection().getTable(tableName)){
      table.put(puts);
    }
     return puts.size();
  }
  private static int countCellSet(  CellSetModel model){
    int count=0;
    Iterator<RowModel> rows=model.getRows().iterator();
    while (rows.hasNext()) {
      RowModel row=rows.next();
      Iterator<CellModel> cells=row.getCells().iterator();
      while (cells.hasNext()) {
        cells.next();
        count++;
      }
    }
    return count;
  }
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    SUPERUSER=User.createUserForTesting(conf,"admin",new String[]{"supergroup"});
    conf=TEST_UTIL.getConfiguration();
    conf.setClass(VisibilityUtils.VISIBILITY_LABEL_GENERATOR_CLASS,SimpleScanLabelGenerator.class,ScanLabelGenerator.class);
    conf.set("hbase.superuser",SUPERUSER.getShortName());
    VisibilityTestUtil.enableVisiblityLabels(conf);
    TEST_UTIL.startMiniCluster(1);
    TEST_UTIL.waitTableEnabled(VisibilityConstants.LABELS_TABLE_NAME.getName(),50000);
    createLabels();
    setAuths();
    REST_TEST_UTIL.startServletContainer(conf);
    client=new Client(new Cluster().add("localhost",REST_TEST_UTIL.getServletPort()));
    context=JAXBContext.newInstance(CellModel.class,CellSetModel.class,RowModel.class,ScannerModel.class);
    marshaller=context.createMarshaller();
    unmarshaller=context.createUnmarshaller();
    Admin admin=TEST_UTIL.getAdmin();
    if (admin.tableExists(TABLE)) {
      return;
    }
    HTableDescriptor htd=new HTableDescriptor(TABLE);
    htd.addFamily(new HColumnDescriptor(CFA));
    htd.addFamily(new HColumnDescriptor(CFB));
    admin.createTable(htd);
    insertData(TABLE,COLUMN_1,1.0);
    insertData(TABLE,COLUMN_2,0.5);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    REST_TEST_UTIL.shutdownServletContainer();
    TEST_UTIL.shutdownMiniCluster();
  }
  private static void createLabels() throws IOException, InterruptedException {
    PrivilegedExceptionAction<VisibilityLabelsResponse> action=new PrivilegedExceptionAction<VisibilityLabelsResponse>(){
      @Override public VisibilityLabelsResponse run() throws Exception {
        String[] labels={SECRET,CONFIDENTIAL,PRIVATE,PUBLIC,TOPSECRET};
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          VisibilityClient.addLabels(conn,labels);
        }
 catch (        Throwable t) {
          throw new IOException(t);
        }
        return null;
      }
    }
;
    SUPERUSER.runAs(action);
  }
  private static void setAuths() throws Exception {
    String[] labels={SECRET,CONFIDENTIAL,PRIVATE,PUBLIC,TOPSECRET};
    try (Connection conn=ConnectionFactory.createConnection(conf)){
      VisibilityClient.setAuths(conn,labels,User.getCurrent().getShortName());
    }
 catch (    Throwable t) {
      throw new IOException(t);
    }
  }
  @Test public void testSimpleScannerXMLWithLabelsThatReceivesNoData() throws IOException, JAXBException {
    final int BATCH_SIZE=5;
    ScannerModel model=new ScannerModel();
    model.setBatch(BATCH_SIZE);
    model.addColumn(Bytes.toBytes(COLUMN_1));
    model.addLabel(PUBLIC);
    StringWriter writer=new StringWriter();
    marshaller.marshal(model,writer);
    byte[] body=Bytes.toBytes(writer.toString());
    conf.set("hbase.rest.readonly","false");
    Response response=client.put("/" + TABLE + "/scanner",Constants.MIMETYPE_XML,body);
    assertEquals(201,response.getCode());
    String scannerURI=response.getLocation();
    assertNotNull(scannerURI);
    response=client.get(scannerURI,Constants.MIMETYPE_XML);
    assertEquals(204,response.getCode());
  }
  @Test public void testSimpleScannerXMLWithLabelsThatReceivesData() throws IOException, JAXBException {
    ScannerModel model=new ScannerModel();
    model.setBatch(5);
    model.addColumn(Bytes.toBytes(COLUMN_1));
    model.addLabel(SECRET);
    StringWriter writer=new StringWriter();
    marshaller.marshal(model,writer);
    byte[] body=Bytes.toBytes(writer.toString());
    conf.set("hbase.rest.readonly","false");
    Response response=client.put("/" + TABLE + "/scanner",Constants.MIMETYPE_XML,body);
    assertEquals(201,response.getCode());
    String scannerURI=response.getLocation();
    assertNotNull(scannerURI);
    response=client.get(scannerURI,Constants.MIMETYPE_XML);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_XML,response.getHeader("content-type"));
    CellSetModel cellSet=(CellSetModel)unmarshaller.unmarshal(new ByteArrayInputStream(response.getBody()));
    assertEquals(5,countCellSet(cellSet));
  }
}
