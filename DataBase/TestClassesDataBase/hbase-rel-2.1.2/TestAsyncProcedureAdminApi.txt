/** 
 * Class to test asynchronous procedure admin operations.
 */
@RunWith(Parameterized.class) @Category({LargeTests.class,ClientTests.class}) public class TestAsyncProcedureAdminApi extends TestAsyncAdminBase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAsyncProcedureAdminApi.class);
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY,60000);
    TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT,120000);
    TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,2);
    TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY,0);
    TEST_UTIL.getConfiguration().set(ProcedureManagerHost.MASTER_PROCEDURE_CONF_KEY,SimpleMasterProcedureManager.class.getName());
    TEST_UTIL.getConfiguration().set(ProcedureManagerHost.REGIONSERVER_PROCEDURE_CONF_KEY,SimpleRSProcedureManager.class.getName());
    TEST_UTIL.getConfiguration().setBoolean(SnapshotManager.HBASE_SNAPSHOT_ENABLED,true);
    TEST_UTIL.startMiniCluster(2);
    ASYNC_CONN=ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();
  }
  @Test public void testExecProcedure() throws Exception {
    String snapshotString="offlineTableSnapshot";
    try {
      Table table=TEST_UTIL.createTable(tableName,Bytes.toBytes("cf"));
      for (int i=0; i < 100; i++) {
        Put put=new Put(Bytes.toBytes(i)).addColumn(Bytes.toBytes("cf"),null,Bytes.toBytes(i));
        table.put(put);
      }
      Map<String,String> props=new HashMap<>();
      props.put("table",tableName.getNameAsString());
      admin.execProcedure(SnapshotManager.ONLINE_SNAPSHOT_CONTROLLER_DESCRIPTION,snapshotString,props).get();
      LOG.debug("Snapshot completed.");
    }
  finally {
      admin.deleteSnapshot(snapshotString).join();
      TEST_UTIL.deleteTable(tableName);
    }
  }
  @Test public void testExecProcedureWithRet() throws Exception {
    byte[] result=admin.execProcedureWithReturn(SimpleMasterProcedureManager.SIMPLE_SIGNATURE,"myTest2",new HashMap<>()).get();
    assertArrayEquals("Incorrect return data from execProcedure",Bytes.toBytes(SimpleMasterProcedureManager.SIMPLE_DATA),result);
  }
  @Test public void listProcedure() throws Exception {
    String procList=admin.getProcedures().get();
    assertTrue(procList.startsWith("["));
  }
  @Test public void isProcedureFinished() throws Exception {
    boolean failed=false;
    try {
      admin.isProcedureFinished("fake-signature","fake-instance",new HashMap<>()).get();
    }
 catch (    Exception e) {
      failed=true;
    }
    Assert.assertTrue(failed);
  }
  @Test public void abortProcedure() throws Exception {
    Random randomGenerator=new Random();
    long procId=randomGenerator.nextLong();
    boolean abortResult=admin.abortProcedure(procId,true).get();
    assertFalse(abortResult);
  }
}
