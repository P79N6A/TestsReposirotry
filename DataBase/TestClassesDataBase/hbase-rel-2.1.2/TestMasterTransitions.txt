/** 
 * Test transitions of state across the master.  Sets up the cluster once and then runs a couple of tests.
 */
@Category({MasterTests.class,LargeTests.class}) public class TestMasterTransitions {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMasterTransitions.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestMasterTransitions.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final TableName TABLENAME=TableName.valueOf("master_transitions");
  private static final byte[][] FAMILIES=new byte[][]{Bytes.toBytes("a"),Bytes.toBytes("b"),Bytes.toBytes("c")};
  /** 
 * Start up a mini cluster and put a small table of many empty regions into it.
 * @throws Exception
 */
  @BeforeClass public static void beforeAllTests() throws Exception {
    TEST_UTIL.startMiniCluster(2);
    TEST_UTIL.createMultiRegionTable(TABLENAME,FAMILIES);
    Table t=TEST_UTIL.getConnection().getTable(TABLENAME);
    int countOfRegions=-1;
    try (RegionLocator r=TEST_UTIL.getConnection().getRegionLocator(TABLENAME)){
      countOfRegions=r.getStartKeys().length;
    }
     TEST_UTIL.waitUntilAllRegionsAssigned(TABLENAME);
    addToEachStartKey(countOfRegions);
    t.close();
  }
  @AfterClass public static void afterAllTests() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Before public void setup() throws IOException {
    TEST_UTIL.ensureSomeRegionServersAvailable(2);
  }
  /** 
 * In 2428, the meta region has just been set offline and then a close comes in.
 * @see <a href="https://issues.apache.org/jira/browse/HBASE-2428">HBASE-2428</a>
 */
  @Ignore @Test public void testRegionCloseWhenNoMetaHBase2428() throws Exception {
  }
  /** 
 * Test adding in a new server before old one on same host+port is dead. Make the test more onerous by having the server under test carry the meta. If confusion between old and new, purportedly meta never comes back.  Test that meta gets redeployed.
 */
  @Ignore @Test public void testAddingServerBeforeOldIsDead2413() throws IOException {
  }
  /** 
 * In 2482, a RS with an opening region on it dies.  The said region is then stuck in the master's regions-in-transition and never leaves it.  This test works by bringing up a new regionserver, waiting for the load balancer to give it some regions.  Then, we close all on the new server. After sending all the close messages, we send the new regionserver the special blocking message so it can not process any more messages. Meantime reopening of the just-closed regions is backed up on the new server.  Soon as master gets an opening region from the new regionserver, we kill it.  We then wait on all regions to come back on line.  If bug is fixed, this should happen soon as the processing of the killed server is done.
 * @see <a href="https://issues.apache.org/jira/browse/HBASE-2482">HBASE-2482</a>
 */
  @Ignore @Test public void testKillRSWithOpeningRegion2482() throws Exception {
  }
  private static int addToEachStartKey(  final int expected) throws IOException {
    Table t=TEST_UTIL.getConnection().getTable(TABLENAME);
    Table meta=TEST_UTIL.getConnection().getTable(TableName.META_TABLE_NAME);
    int rows=0;
    Scan scan=new Scan();
    scan.addColumn(HConstants.CATALOG_FAMILY,HConstants.REGIONINFO_QUALIFIER);
    ResultScanner s=meta.getScanner(scan);
    for (Result r=null; (r=s.next()) != null; ) {
      RegionInfo hri=MetaTableAccessor.getRegionInfo(r);
      if (hri == null)       break;
      if (!hri.getTable().equals(TABLENAME)) {
        continue;
      }
      if (!hri.getTable().equals(TABLENAME)) {
        continue;
      }
      byte[] row=getStartKey(hri);
      Put p=new Put(row);
      p.setDurability(Durability.SKIP_WAL);
      p.addColumn(getTestFamily(),getTestQualifier(),row);
      t.put(p);
      rows++;
    }
    s.close();
    Assert.assertEquals(expected,rows);
    t.close();
    meta.close();
    return rows;
  }
  private static byte[] getStartKey(  final RegionInfo hri){
    return Bytes.equals(HConstants.EMPTY_START_ROW,hri.getStartKey()) ? Bytes.toBytes("aaa") : hri.getStartKey();
  }
  private static byte[] getTestFamily(){
    return FAMILIES[0];
  }
  private static byte[] getTestQualifier(){
    return getTestFamily();
  }
}
