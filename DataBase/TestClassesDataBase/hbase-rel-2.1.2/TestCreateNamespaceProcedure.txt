@Category({MasterTests.class,MediumTests.class}) public class TestCreateNamespaceProcedure {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCreateNamespaceProcedure.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestCreateNamespaceProcedure.class);
  protected static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static void setupConf(  Configuration conf){
    conf.setInt(MasterProcedureConstants.MASTER_PROCEDURE_THREADS,1);
    conf.setInt(MasterProcedureConstants.MASTER_URGENT_PROCEDURE_THREADS,0);
  }
  @BeforeClass public static void setupCluster() throws Exception {
    setupConf(UTIL.getConfiguration());
    UTIL.startMiniCluster(1);
  }
  @AfterClass public static void cleanupTest() throws Exception {
    try {
      UTIL.shutdownMiniCluster();
    }
 catch (    Exception e) {
      LOG.warn("failure shutting down cluster",e);
    }
  }
  @Before public void setup() throws Exception {
    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(getMasterProcedureExecutor(),false);
  }
  @After public void tearDown() throws Exception {
    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(getMasterProcedureExecutor(),false);
  }
  @Test public void testCreateNamespace() throws Exception {
    final NamespaceDescriptor nsd=NamespaceDescriptor.create("testCreateNamespace").build();
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    long procId=procExec.submitProcedure(new CreateNamespaceProcedure(procExec.getEnvironment(),nsd));
    ProcedureTestingUtility.waitProcedure(procExec,procId);
    ProcedureTestingUtility.assertProcNotFailed(procExec,procId);
    validateNamespaceCreated(nsd);
  }
  @Test public void testCreateSameNamespaceTwice() throws Exception {
    final NamespaceDescriptor nsd=NamespaceDescriptor.create("testCreateSameNamespaceTwice").build();
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    long procId1=procExec.submitProcedure(new CreateNamespaceProcedure(procExec.getEnvironment(),nsd));
    ProcedureTestingUtility.waitProcedure(procExec,procId1);
    ProcedureTestingUtility.assertProcNotFailed(procExec,procId1);
    long procId2=procExec.submitProcedure(new CreateNamespaceProcedure(procExec.getEnvironment(),nsd));
    ProcedureTestingUtility.waitProcedure(procExec,procId2);
    Procedure<?> result=procExec.getResult(procId2);
    assertTrue(result.isFailed());
    LOG.debug("Create namespace failed with exception: " + result.getException());
    assertTrue(ProcedureTestingUtility.getExceptionCause(result) instanceof NamespaceExistException);
  }
  @Test public void testCreateSystemNamespace() throws Exception {
    final NamespaceDescriptor nsd=UTIL.getAdmin().getNamespaceDescriptor(NamespaceDescriptor.SYSTEM_NAMESPACE.getName());
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    long procId=procExec.submitProcedure(new CreateNamespaceProcedure(procExec.getEnvironment(),nsd));
    ProcedureTestingUtility.waitProcedure(procExec,procId);
    Procedure<?> result=procExec.getResult(procId);
    assertTrue(result.isFailed());
    LOG.debug("Create namespace failed with exception: " + result.getException());
    assertTrue(ProcedureTestingUtility.getExceptionCause(result) instanceof NamespaceExistException);
  }
  @Test public void testCreateNamespaceWithInvalidRegionCount() throws Exception {
    final NamespaceDescriptor nsd=NamespaceDescriptor.create("testCreateNamespaceWithInvalidRegionCount").build();
    final String nsKey="hbase.namespace.quota.maxregions";
    final String nsValue="-1";
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    nsd.setConfiguration(nsKey,nsValue);
    long procId=procExec.submitProcedure(new CreateNamespaceProcedure(procExec.getEnvironment(),nsd));
    ProcedureTestingUtility.waitProcedure(procExec,procId);
    Procedure<?> result=procExec.getResult(procId);
    assertTrue(result.isFailed());
    LOG.debug("Create namespace failed with exception: " + result.getException());
    assertTrue(ProcedureTestingUtility.getExceptionCause(result) instanceof ConstraintException);
  }
  @Test public void testCreateNamespaceWithInvalidTableCount() throws Exception {
    final NamespaceDescriptor nsd=NamespaceDescriptor.create("testCreateNamespaceWithInvalidTableCount").build();
    final String nsKey="hbase.namespace.quota.maxtables";
    final String nsValue="-1";
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    nsd.setConfiguration(nsKey,nsValue);
    long procId=procExec.submitProcedure(new CreateNamespaceProcedure(procExec.getEnvironment(),nsd));
    ProcedureTestingUtility.waitProcedure(procExec,procId);
    Procedure<?> result=procExec.getResult(procId);
    assertTrue(result.isFailed());
    LOG.debug("Create namespace failed with exception: " + result.getException());
    assertTrue(ProcedureTestingUtility.getExceptionCause(result) instanceof ConstraintException);
  }
  @Test public void testRecoveryAndDoubleExecution() throws Exception {
    final NamespaceDescriptor nsd=NamespaceDescriptor.create("testRecoveryAndDoubleExecution").build();
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    ProcedureTestingUtility.waitNoProcedureRunning(procExec);
    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec,true);
    long procId=procExec.submitProcedure(new CreateNamespaceProcedure(procExec.getEnvironment(),nsd));
    MasterProcedureTestingUtility.testRecoveryAndDoubleExecution(procExec,procId);
    ProcedureTestingUtility.assertProcNotFailed(procExec,procId);
    validateNamespaceCreated(nsd);
  }
  @Test public void testRollbackAndDoubleExecution() throws Exception {
    final NamespaceDescriptor nsd=NamespaceDescriptor.create("testRollbackAndDoubleExecution").build();
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    ProcedureTestingUtility.waitNoProcedureRunning(procExec);
    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec,true);
    long procId=procExec.submitProcedure(new CreateNamespaceProcedure(procExec.getEnvironment(),nsd));
    int lastStep=2;
    MasterProcedureTestingUtility.testRollbackAndDoubleExecution(procExec,procId,lastStep);
    try {
      NamespaceDescriptor nsDescriptor=UTIL.getAdmin().getNamespaceDescriptor(nsd.getName());
      assertNull(nsDescriptor);
    }
 catch (    NamespaceNotFoundException nsnfe) {
      LOG.info("The namespace " + nsd.getName() + " is not created.");
    }
  }
  private ProcedureExecutor<MasterProcedureEnv> getMasterProcedureExecutor(){
    return UTIL.getHBaseCluster().getMaster().getMasterProcedureExecutor();
  }
  private void validateNamespaceCreated(  NamespaceDescriptor nsd) throws IOException {
    NamespaceDescriptor createdNsDescriptor=UTIL.getAdmin().getNamespaceDescriptor(nsd.getName());
    assertNotNull(createdNsDescriptor);
  }
}
