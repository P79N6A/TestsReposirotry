/** 
 * A custom data type implementation specialized for  {@link Pojo2}.
 */
private static class SpecializedPojo2Type1 implements DataType<Pojo2> {
  private static RawBytesTerminated byteField1=new RawBytesTerminated("/");
  private static RawBytesTerminated byteField2=new RawBytesTerminated(Order.DESCENDING,"/");
  private static RawStringTerminated stringField=new RawStringTerminated(Order.DESCENDING,new byte[]{0x00});
  private static RawBytes byteField3=RawBytes.DESCENDING;
  /** 
 * The  {@link Struct} equivalent of this type.
 */
  public static Struct GENERIC=new StructBuilder().add(byteField1).add(byteField2).add(stringField).add(byteField3).toStruct();
  @Override public boolean isOrderPreserving(){
    return true;
  }
  @Override public Order getOrder(){
    return null;
  }
  @Override public boolean isNullable(){
    return false;
  }
  @Override public boolean isSkippable(){
    return true;
  }
  @Override public int encodedLength(  Pojo2 val){
    return byteField1.encodedLength(val.byteField1Asc) + byteField2.encodedLength(val.byteField2Dsc) + stringField.encodedLength(val.stringFieldDsc)+ byteField3.encodedLength(val.byteField3Dsc);
  }
  @Override public Class<Pojo2> encodedClass(){
    return Pojo2.class;
  }
  @Override public int skip(  PositionedByteRange src){
    int skipped=byteField1.skip(src);
    skipped+=byteField2.skip(src);
    skipped+=stringField.skip(src);
    skipped+=byteField3.skip(src);
    return skipped;
  }
  @Override public Pojo2 decode(  PositionedByteRange src){
    Object[] ret=new Object[4];
    ret[0]=byteField1.decode(src);
    ret[1]=byteField2.decode(src);
    ret[2]=stringField.decode(src);
    ret[3]=byteField3.decode(src);
    return new Pojo2(ret);
  }
  @Override public int encode(  PositionedByteRange dst,  Pojo2 val){
    int written=byteField1.encode(dst,val.byteField1Asc);
    written+=byteField2.encode(dst,val.byteField2Dsc);
    written+=stringField.encode(dst,val.stringFieldDsc);
    written+=byteField3.encode(dst,val.byteField3Dsc);
    return written;
  }
}
