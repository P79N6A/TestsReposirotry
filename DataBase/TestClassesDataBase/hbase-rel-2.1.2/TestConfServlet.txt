/** 
 * Basic test case that the ConfServlet can write configuration to its output in XML and JSON format.
 */
@Category({MiscTests.class,SmallTests.class}) public class TestConfServlet extends TestCase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestConfServlet.class);
  private static final String TEST_KEY="testconfservlet.key";
  private static final String TEST_VAL="testval";
  private Configuration getTestConf(){
    Configuration testConf=new Configuration();
    testConf.set(TEST_KEY,TEST_VAL);
    return testConf;
  }
  @Test @SuppressWarnings("unchecked") public void testWriteJson() throws Exception {
    StringWriter sw=new StringWriter();
    ConfServlet.writeResponse(getTestConf(),sw,"json");
    String json=sw.toString();
    boolean foundSetting=false;
    Set<String> programSet=new HashSet<>();
    programSet.add("programatically");
    programSet.add("programmatically");
    Object parsed=JSON.parse(json);
    Object[] properties=((Map<String,Object[]>)parsed).get("properties");
    for (    Object o : properties) {
      Map<String,Object> propertyInfo=(Map<String,Object>)o;
      String key=(String)propertyInfo.get("key");
      String val=(String)propertyInfo.get("value");
      String resource=(String)propertyInfo.get("resource");
      System.err.println("k: " + key + " v: "+ val+ " r: "+ resource);
      if (TEST_KEY.equals(key) && TEST_VAL.equals(val) && programSet.contains(resource)) {
        foundSetting=true;
      }
    }
    assertTrue(foundSetting);
  }
  @Test public void testWriteXml() throws Exception {
    StringWriter sw=new StringWriter();
    ConfServlet.writeResponse(getTestConf(),sw,"xml");
    String xml=sw.toString();
    DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();
    DocumentBuilder builder=docBuilderFactory.newDocumentBuilder();
    Document doc=builder.parse(new InputSource(new StringReader(xml)));
    NodeList nameNodes=doc.getElementsByTagName("name");
    boolean foundSetting=false;
    for (int i=0; i < nameNodes.getLength(); i++) {
      Node nameNode=nameNodes.item(i);
      String key=nameNode.getTextContent();
      System.err.println("xml key: " + key);
      if (TEST_KEY.equals(key)) {
        foundSetting=true;
        Element propertyElem=(Element)nameNode.getParentNode();
        String val=propertyElem.getElementsByTagName("value").item(0).getTextContent();
        assertEquals(TEST_VAL,val);
      }
    }
    assertTrue(foundSetting);
  }
  @Test public void testBadFormat() throws Exception {
    StringWriter sw=new StringWriter();
    try {
      ConfServlet.writeResponse(getTestConf(),sw,"not a format");
      fail("writeResponse with bad format didn't throw!");
    }
 catch (    ConfServlet.BadFormatException bfe) {
    }
    assertEquals("",sw.toString());
  }
}
