/** 
 * Tests bulk loading of HFiles with old secure Endpoint client for backward compatibility. Will be removed when old non-secure client for backward compatibility is not supported.
 */
@RunWith(Parameterized.class) @Category({RegionServerTests.class,LargeTests.class}) @Ignore public class TestHRegionServerBulkLoadWithOldSecureEndpoint extends TestHRegionServerBulkLoad {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHRegionServerBulkLoadWithOldSecureEndpoint.class);
  public TestHRegionServerBulkLoadWithOldSecureEndpoint(  int duration){
    super(duration);
  }
  private static final Logger LOG=LoggerFactory.getLogger(TestHRegionServerBulkLoadWithOldSecureEndpoint.class);
  @BeforeClass public static void setUpBeforeClass() throws IOException {
    conf.setInt("hbase.rpc.timeout",10 * 1000);
    conf.set(CoprocessorHost.REGION_COPROCESSOR_CONF_KEY,"org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint");
  }
public static class AtomicHFileLoader extends RepeatingTestThread {
    final AtomicLong numBulkLoads=new AtomicLong();
    final AtomicLong numCompactions=new AtomicLong();
    private TableName tableName;
    public AtomicHFileLoader(    TableName tableName,    TestContext ctx,    byte[][] targetFamilies) throws IOException {
      super(ctx);
      this.tableName=tableName;
    }
    public void doAnAction() throws Exception {
      long iteration=numBulkLoads.getAndIncrement();
      Path dir=UTIL.getDataTestDirOnTestFS(String.format("bulkLoad_%08d",iteration));
      FileSystem fs=UTIL.getTestFileSystem();
      byte[] val=Bytes.toBytes(String.format("%010d",iteration));
      final List<Pair<byte[],String>> famPaths=new ArrayList<>(NUM_CFS);
      for (int i=0; i < NUM_CFS; i++) {
        Path hfile=new Path(dir,family(i));
        byte[] fam=Bytes.toBytes(family(i));
        createHFile(fs,hfile,fam,QUAL,val,1000);
        famPaths.add(new Pair<>(fam,hfile.toString()));
      }
      final ClusterConnection conn=(ClusterConnection)UTIL.getAdmin().getConnection();
      Table table=conn.getTable(tableName);
      final String bulkToken=new SecureBulkLoadEndpointClient(table).prepareBulkLoad(tableName);
      RpcControllerFactory rpcControllerFactory=new RpcControllerFactory(UTIL.getConfiguration());
      ClientServiceCallable<Void> callable=new ClientServiceCallable<Void>(conn,tableName,Bytes.toBytes("aaa"),rpcControllerFactory.newController(),HConstants.PRIORITY_UNSET){
        @Override protected Void rpcCall() throws Exception {
          LOG.debug("Going to connect to server " + getLocation() + " for row "+ Bytes.toStringBinary(getRow()));
          try (Table table=conn.getTable(getTableName())){
            boolean loaded=new SecureBulkLoadEndpointClient(table).bulkLoadHFiles(famPaths,null,bulkToken,getLocation().getRegionInfo().getStartKey());
          }
           return null;
        }
      }
;
      RpcRetryingCallerFactory factory=new RpcRetryingCallerFactory(conf);
      RpcRetryingCaller<Void> caller=factory.<Void>newCaller();
      caller.callWithRetries(callable,Integer.MAX_VALUE);
      if (numBulkLoads.get() % 5 == 0) {
        callable=new ClientServiceCallable<Void>(conn,tableName,Bytes.toBytes("aaa"),rpcControllerFactory.newController(),HConstants.PRIORITY_UNSET){
          @Override protected Void rpcCall() throws Exception {
            LOG.debug("compacting " + getLocation() + " for row "+ Bytes.toStringBinary(getRow()));
            AdminProtos.AdminService.BlockingInterface server=conn.getAdmin(getLocation().getServerName());
            CompactRegionRequest request=RequestConverter.buildCompactRegionRequest(getLocation().getRegionInfo().getRegionName(),true,null);
            server.compactRegion(null,request);
            numCompactions.incrementAndGet();
            return null;
          }
        }
;
        caller.callWithRetries(callable,Integer.MAX_VALUE);
      }
    }
  }
  void runAtomicBulkloadTest(  TableName tableName,  int millisToRun,  int numScanners) throws Exception {
    setupTable(tableName,10);
    TestContext ctx=new TestContext(UTIL.getConfiguration());
    AtomicHFileLoader loader=new AtomicHFileLoader(tableName,ctx,null);
    ctx.addThread(loader);
    List<AtomicScanReader> scanners=Lists.newArrayList();
    for (int i=0; i < numScanners; i++) {
      AtomicScanReader scanner=new AtomicScanReader(tableName,ctx,families);
      scanners.add(scanner);
      ctx.addThread(scanner);
    }
    ctx.startThreads();
    ctx.waitFor(millisToRun);
    ctx.stop();
    LOG.info("Loaders:");
    LOG.info("  loaded " + loader.numBulkLoads.get());
    LOG.info("  compations " + loader.numCompactions.get());
    LOG.info("Scanners:");
    for (    AtomicScanReader scanner : scanners) {
      LOG.info("  scanned " + scanner.numScans.get());
      LOG.info("  verified " + scanner.numRowsScanned.get() + " rows");
    }
  }
}
