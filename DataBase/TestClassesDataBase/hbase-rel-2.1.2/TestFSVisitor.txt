/** 
 * Test  {@link FSUtils}.
 */
@Category({MiscTests.class,MediumTests.class}) public class TestFSVisitor {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestFSVisitor.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestFSVisitor.class);
  private final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private final String TABLE_NAME="testtb";
  private Set<String> tableFamilies;
  private Set<String> tableRegions;
  private Set<String> tableHFiles;
  private FileSystem fs;
  private Path tableDir;
  private Path rootDir;
  @Before public void setUp() throws Exception {
    fs=FileSystem.get(TEST_UTIL.getConfiguration());
    rootDir=TEST_UTIL.getDataTestDir("hbase");
    tableFamilies=new HashSet<>();
    tableRegions=new HashSet<>();
    tableHFiles=new HashSet<>();
    tableDir=createTableFiles(rootDir,TABLE_NAME,tableRegions,tableFamilies,tableHFiles);
    FSUtils.logFileSystemState(fs,rootDir,LOG);
  }
  @After public void tearDown() throws Exception {
    fs.delete(rootDir,true);
  }
  @Test public void testVisitStoreFiles() throws IOException {
    final Set<String> regions=new HashSet<>();
    final Set<String> families=new HashSet<>();
    final Set<String> hfiles=new HashSet<>();
    FSVisitor.visitTableStoreFiles(fs,tableDir,new FSVisitor.StoreFileVisitor(){
      @Override public void storeFile(      final String region,      final String family,      final String hfileName) throws IOException {
        regions.add(region);
        families.add(family);
        hfiles.add(hfileName);
      }
    }
);
    assertEquals(regions,tableRegions);
    assertEquals(families,tableFamilies);
    assertEquals(hfiles,tableHFiles);
  }
  private Path createTableFiles(  final Path rootDir,  final String tableName,  final Set<String> tableRegions,  final Set<String> tableFamilies,  final Set<String> tableHFiles) throws IOException {
    Path tableDir=new Path(rootDir,tableName);
    for (int r=0; r < 10; ++r) {
      String regionName=MD5Hash.getMD5AsHex(Bytes.toBytes(r));
      tableRegions.add(regionName);
      Path regionDir=new Path(tableDir,regionName);
      for (int f=0; f < 3; ++f) {
        String familyName="f" + f;
        tableFamilies.add(familyName);
        Path familyDir=new Path(regionDir,familyName);
        fs.mkdirs(familyDir);
        for (int h=0; h < 5; ++h) {
          String hfileName=TEST_UTIL.getRandomUUID().toString().replaceAll("-","");
          tableHFiles.add(hfileName);
          fs.createNewFile(new Path(familyDir,hfileName));
        }
      }
    }
    return tableDir;
  }
}
