public static class DummyTableProcedure extends AbstractStateMachineTableProcedure<DummyRegionTableState> {
  private TableName tableName;
  public DummyTableProcedure(){
    super();
  }
  public DummyTableProcedure(  final MasterProcedureEnv env,  TableName tableName){
    super(null,null);
    this.tableName=tableName;
  }
  @Override public TableName getTableName(){
    return tableName;
  }
  @Override public TableOperationType getTableOperationType(){
    return TableOperationType.CREATE;
  }
  @Override protected Flow executeFromState(  MasterProcedureEnv env,  DummyRegionTableState dummyRegionTableState) throws ProcedureSuspendedException, ProcedureYieldException, InterruptedException {
    return null;
  }
  @Override protected void rollbackState(  MasterProcedureEnv env,  DummyRegionTableState dummyRegionTableState) throws IOException, InterruptedException {
  }
  @Override protected DummyRegionTableState getState(  int stateId){
    return DummyRegionTableState.STATE;
  }
  @Override protected int getStateId(  DummyRegionTableState dummyRegionTableState){
    return 0;
  }
  @Override protected DummyRegionTableState getInitialState(){
    return DummyRegionTableState.STATE;
  }
  @Override protected Procedure[] execute(  final MasterProcedureEnv env) throws ProcedureSuspendedException {
    LOG.info("Finished execute");
    return null;
  }
  @Override protected void serializeStateData(  ProcedureStateSerializer serializer) throws IOException {
    super.serializeStateData(serializer);
    serializer.serialize(ProtobufUtil.toProtoTableName(tableName));
  }
  @Override protected void deserializeStateData(  ProcedureStateSerializer serializer) throws IOException {
    super.deserializeStateData(serializer);
    tableName=ProtobufUtil.toTableName(serializer.deserialize(HBaseProtos.TableName.class));
  }
  @Override protected LockState acquireLock(  MasterProcedureEnv env){
    return super.acquireLock(env);
  }
  @Override protected void releaseLock(  MasterProcedureEnv env){
    super.releaseLock(env);
  }
}
