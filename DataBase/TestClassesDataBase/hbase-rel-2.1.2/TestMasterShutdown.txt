@Category({MasterTests.class,LargeTests.class}) public class TestMasterShutdown {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMasterShutdown.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestMasterShutdown.class);
  /** 
 * Simple test of shutdown. <p> Starts with three masters.  Tells the active master to shutdown the cluster. Verifies that all masters are properly shutdown.
 */
  @Test public void testMasterShutdown() throws Exception {
    final int NUM_MASTERS=3;
    final int NUM_RS=3;
    Configuration conf=HBaseConfiguration.create();
    HBaseTestingUtility htu=new HBaseTestingUtility(conf);
    htu.startMiniCluster(NUM_MASTERS,NUM_RS);
    MiniHBaseCluster cluster=htu.getHBaseCluster();
    List<MasterThread> masterThreads=cluster.getMasterThreads();
    for (    MasterThread mt : masterThreads) {
      assertTrue(mt.isAlive());
    }
    HMaster active=null;
    for (int i=0; i < masterThreads.size(); i++) {
      if (masterThreads.get(i).getMaster().isActiveMaster()) {
        active=masterThreads.get(i).getMaster();
        break;
      }
    }
    assertNotNull(active);
    ClusterMetrics status=active.getClusterMetrics();
    assertEquals(2,status.getBackupMasterNames().size());
    active.shutdown();
    for (int i=NUM_MASTERS - 1; i >= 0; --i) {
      cluster.waitOnMaster(i);
    }
    assertEquals(0,masterThreads.size());
    htu.shutdownMiniCluster();
  }
  @Test public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {
    final int NUM_MASTERS=1;
    final int NUM_RS=0;
    Configuration conf=HBaseConfiguration.create();
    conf.setInt("hbase.ipc.client.failed.servers.expiry",200);
    conf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART,1);
    final HBaseTestingUtility util=new HBaseTestingUtility(conf);
    util.startMiniDFSCluster(3);
    util.startMiniZKCluster();
    util.createRootDir();
    final LocalHBaseCluster cluster=new LocalHBaseCluster(conf,NUM_MASTERS,NUM_RS,HMaster.class,MiniHBaseCluster.MiniHBaseClusterRegionServer.class);
    final int MASTER_INDEX=0;
    final MasterThread master=cluster.getMasters().get(MASTER_INDEX);
    master.start();
    LOG.info("Called master start on " + master.getName());
    Thread shutdownThread=new Thread("Shutdown-Thread"){
      @Override public void run(){
        LOG.info("Before call to shutdown master");
        try {
          try (Connection connection=ConnectionFactory.createConnection(util.getConfiguration())){
            try (Admin admin=connection.getAdmin()){
              admin.shutdown();
            }
           }
         }
 catch (        Exception e) {
          LOG.info("Error while calling Admin.shutdown, which is expected: " + e.getMessage());
        }
        LOG.info("After call to shutdown master");
        cluster.waitOnMaster(MASTER_INDEX);
      }
    }
;
    shutdownThread.start();
    LOG.info("Called master join on " + master.getName());
    master.join();
    shutdownThread.join();
    List<MasterThread> masterThreads=cluster.getMasters();
    assertEquals(0,masterThreads.size());
    util.shutdownMiniZKCluster();
    util.shutdownMiniDFSCluster();
    util.cleanupTestDir();
  }
}
