@Category({MiscTests.class,SmallTests.class}) public class TestLoadTestKVGenerator {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestLoadTestKVGenerator.class);
  private static final int MIN_LEN=10;
  private static final int MAX_LEN=20;
  private Random rand=new Random(28937293L);
  private LoadTestKVGenerator gen=new LoadTestKVGenerator(MIN_LEN,MAX_LEN);
  @Test public void testValueLength(){
    for (int i=0; i < 1000; ++i) {
      byte[] v=gen.generateRandomSizeValue(Bytes.toBytes(Integer.toString(i)),Bytes.toBytes(String.valueOf(rand.nextInt())));
      assertTrue(MIN_LEN <= v.length);
      assertTrue(v.length <= MAX_LEN);
    }
  }
  @Test public void testVerification(){
    for (int i=0; i < 1000; ++i) {
      for (int qualIndex=0; qualIndex < 20; ++qualIndex) {
        byte[] qual=Bytes.toBytes(String.valueOf(qualIndex));
        byte[] rowKey=Bytes.toBytes(LoadTestKVGenerator.md5PrefixedKey(i));
        byte[] v=gen.generateRandomSizeValue(rowKey,qual);
        assertTrue(LoadTestKVGenerator.verify(v,rowKey,qual));
        v[0]++;
        assertFalse(LoadTestKVGenerator.verify(v,rowKey,qual));
      }
    }
  }
  @Test public void testCorrectAndUniqueKeys(){
    Set<String> keys=new HashSet<>();
    for (int i=0; i < 1000; ++i) {
      String k=LoadTestKVGenerator.md5PrefixedKey(i);
      assertFalse(keys.contains(k));
      assertTrue(k.endsWith("-" + i));
      keys.add(k);
    }
  }
}
