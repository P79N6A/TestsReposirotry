public class AbstractTestDateTieredCompactionPolicy extends TestCompactionPolicy {
  protected ArrayList<HStoreFile> sfCreate(  long[] minTimestamps,  long[] maxTimestamps,  long[] sizes) throws IOException {
    ManualEnvironmentEdge timeMachine=new ManualEnvironmentEdge();
    EnvironmentEdgeManager.injectEdge(timeMachine);
    timeMachine.setValue(1);
    ArrayList<Long> ageInDisk=new ArrayList<>();
    for (int i=0; i < sizes.length; i++) {
      ageInDisk.add(0L);
    }
    ArrayList<HStoreFile> ret=Lists.newArrayList();
    for (int i=0; i < sizes.length; i++) {
      MockHStoreFile msf=new MockHStoreFile(TEST_UTIL,TEST_FILE,sizes[i],ageInDisk.get(i),false,i);
      msf.setTimeRangeTracker(TimeRangeTracker.create(TimeRangeTracker.Type.SYNC,minTimestamps[i],maxTimestamps[i]));
      ret.add(msf);
    }
    return ret;
  }
  protected void compactEquals(  long now,  ArrayList<HStoreFile> candidates,  long[] expectedFileSizes,  long[] expectedBoundaries,  boolean isMajor,  boolean toCompact) throws IOException {
    ManualEnvironmentEdge timeMachine=new ManualEnvironmentEdge();
    EnvironmentEdgeManager.injectEdge(timeMachine);
    timeMachine.setValue(now);
    DateTieredCompactionRequest request;
    DateTieredCompactionPolicy policy=(DateTieredCompactionPolicy)store.storeEngine.getCompactionPolicy();
    if (isMajor) {
      for (      HStoreFile file : candidates) {
        ((MockHStoreFile)file).setIsMajor(true);
      }
      assertEquals(toCompact,policy.shouldPerformMajorCompaction(candidates));
      request=(DateTieredCompactionRequest)policy.selectMajorCompaction(candidates);
    }
 else {
      assertEquals(toCompact,policy.needsCompaction(candidates,ImmutableList.of()));
      request=(DateTieredCompactionRequest)policy.selectMinorCompaction(candidates,false,false);
    }
    List<HStoreFile> actual=Lists.newArrayList(request.getFiles());
    assertEquals(Arrays.toString(expectedFileSizes),Arrays.toString(getSizes(actual)));
    assertEquals(Arrays.toString(expectedBoundaries),Arrays.toString(request.getBoundaries().toArray()));
  }
}
