@Category({MediumTests.class,ClientTests.class}) public class TestAsyncTableScanRenewLease {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAsyncTableScanRenewLease.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static TableName TABLE_NAME=TableName.valueOf("async");
  private static byte[] FAMILY=Bytes.toBytes("cf");
  private static byte[] CQ=Bytes.toBytes("cq");
  private static AsyncConnection CONN;
  private static AsyncTable<AdvancedScanResultConsumer> TABLE;
  private static int SCANNER_LEASE_TIMEOUT_PERIOD_MS=5000;
  @BeforeClass public static void setUp() throws Exception {
    TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD,SCANNER_LEASE_TIMEOUT_PERIOD_MS);
    TEST_UTIL.startMiniCluster(1);
    TEST_UTIL.createTable(TABLE_NAME,FAMILY);
    CONN=ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();
    TABLE=CONN.getTable(TABLE_NAME);
    TABLE.putAll(IntStream.range(0,10).mapToObj(i -> new Put(Bytes.toBytes(String.format("%02d",i))).addColumn(FAMILY,CQ,Bytes.toBytes(i))).collect(Collectors.toList())).get();
  }
  @AfterClass public static void tearDown() throws Exception {
    CONN.close();
    TEST_UTIL.shutdownMiniCluster();
  }
private static final class RenewLeaseConsumer implements AdvancedScanResultConsumer {
    private final List<Result> results=new ArrayList<>();
    private Throwable error;
    private boolean finished=false;
    private boolean suspended=false;
    @Override public synchronized void onNext(    Result[] results,    ScanController controller){
      for (      Result result : results) {
        this.results.add(result);
      }
      if (!suspended) {
        ScanResumer resumer=controller.suspend();
        new Thread(() -> {
          Threads.sleep(2 * SCANNER_LEASE_TIMEOUT_PERIOD_MS);
          try {
            TABLE.put(new Put(Bytes.toBytes(String.format("%02d",10))).addColumn(FAMILY,CQ,Bytes.toBytes(10))).get();
          }
 catch (          Exception e) {
            onError(e);
          }
          resumer.resume();
        }
).start();
      }
    }
    @Override public synchronized void onError(    Throwable error){
      this.finished=true;
      this.error=error;
      notifyAll();
    }
    @Override public synchronized void onComplete(){
      this.finished=true;
      notifyAll();
    }
    public synchronized List<Result> get() throws Throwable {
      while (!finished) {
        wait();
      }
      if (error != null) {
        throw error;
      }
      return results;
    }
  }
  @Test public void test() throws Throwable {
    RenewLeaseConsumer consumer=new RenewLeaseConsumer();
    TABLE.scan(new Scan(),consumer);
    List<Result> results=consumer.get();
    assertEquals(10,results.size());
    IntStream.range(0,10).forEach(i -> {
      Result result=results.get(i);
      assertEquals(String.format("%02d",i),Bytes.toString(result.getRow()));
      assertEquals(i,Bytes.toInt(result.getValue(FAMILY,CQ)));
    }
);
    List<Result> results2=TABLE.scanAll(new Scan()).get();
    assertEquals(11,results2.size());
    IntStream.range(0,11).forEach(i -> {
      Result result=results2.get(i);
      assertEquals(String.format("%02d",i),Bytes.toString(result.getRow()));
      assertEquals(i,Bytes.toInt(result.getValue(FAMILY,CQ)));
    }
);
  }
}
