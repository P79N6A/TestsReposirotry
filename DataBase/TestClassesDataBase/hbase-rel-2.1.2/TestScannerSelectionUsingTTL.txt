/** 
 * Test the optimization that does not scan files where all timestamps are expired.
 */
@RunWith(Parameterized.class) @Category({IOTests.class,MediumTests.class}) public class TestScannerSelectionUsingTTL {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestScannerSelectionUsingTTL.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestScannerSelectionUsingTTL.class);
  private static final HBaseTestingUtility TEST_UTIL=HBaseTestingUtility.createLocalHTU();
  private static TableName TABLE=TableName.valueOf("myTable");
  private static String FAMILY="myCF";
  private static byte[] FAMILY_BYTES=Bytes.toBytes(FAMILY);
  private static final int TTL_SECONDS=10;
  private static final int TTL_MS=TTL_SECONDS * 1000;
  private static final int NUM_EXPIRED_FILES=2;
  private static final int NUM_ROWS=8;
  private static final int NUM_COLS_PER_ROW=5;
  public final int numFreshFiles, totalNumFiles;
  /** 
 * Whether we are specifying the exact files to compact 
 */
  private final boolean explicitCompaction;
  @Parameters public static Collection<Object[]> parameters(){
    List<Object[]> params=new ArrayList<>();
    for (int numFreshFiles=1; numFreshFiles <= 3; ++numFreshFiles) {
      for (      boolean explicitCompaction : new boolean[]{false,true}) {
        params.add(new Object[]{numFreshFiles,explicitCompaction});
      }
    }
    return params;
  }
  public TestScannerSelectionUsingTTL(  int numFreshFiles,  boolean explicitCompaction){
    this.numFreshFiles=numFreshFiles;
    this.totalNumFiles=numFreshFiles + NUM_EXPIRED_FILES;
    this.explicitCompaction=explicitCompaction;
  }
  @Test public void testScannerSelection() throws IOException {
    Configuration conf=TEST_UTIL.getConfiguration();
    CacheConfig.instantiateBlockCache(conf);
    conf.setBoolean("hbase.store.delete.expired.storefile",false);
    HColumnDescriptor hcd=new HColumnDescriptor(FAMILY_BYTES).setMaxVersions(Integer.MAX_VALUE).setTimeToLive(TTL_SECONDS);
    HTableDescriptor htd=new HTableDescriptor(TABLE);
    htd.addFamily(hcd);
    HRegionInfo info=new HRegionInfo(TABLE);
    HRegion region=HBaseTestingUtility.createRegionAndWAL(info,TEST_UTIL.getDataTestDir(info.getEncodedName()),conf,htd);
    long ts=EnvironmentEdgeManager.currentTime();
    long version=0;
    for (int iFile=0; iFile < totalNumFiles; ++iFile) {
      if (iFile == NUM_EXPIRED_FILES) {
        Threads.sleepWithoutInterrupt(TTL_MS);
        version+=TTL_MS;
      }
      for (int iRow=0; iRow < NUM_ROWS; ++iRow) {
        Put put=new Put(Bytes.toBytes("row" + iRow));
        for (int iCol=0; iCol < NUM_COLS_PER_ROW; ++iCol) {
          put.addColumn(FAMILY_BYTES,Bytes.toBytes("col" + iCol),ts + version,Bytes.toBytes("value" + iFile + "_"+ iRow+ "_"+ iCol));
        }
        region.put(put);
      }
      region.flush(true);
      version++;
    }
    Scan scan=new Scan();
    scan.setMaxVersions(Integer.MAX_VALUE);
    CacheConfig cacheConf=new CacheConfig(conf);
    LruBlockCache cache=(LruBlockCache)cacheConf.getBlockCache();
    cache.clearCache();
    InternalScanner scanner=region.getScanner(scan);
    List<Cell> results=new ArrayList<>();
    final int expectedKVsPerRow=numFreshFiles * NUM_COLS_PER_ROW;
    int numReturnedRows=0;
    LOG.info("Scanning the entire table");
    while (scanner.next(results) || results.size() > 0) {
      assertEquals(expectedKVsPerRow,results.size());
      ++numReturnedRows;
      results.clear();
    }
    assertEquals(NUM_ROWS,numReturnedRows);
    Set<String> accessedFiles=cache.getCachedFileNamesForTest();
    LOG.debug("Files accessed during scan: " + accessedFiles);
    if (explicitCompaction) {
      HStore store=region.getStore(FAMILY_BYTES);
      store.compactRecentForTestingAssumingDefaultPolicy(totalNumFiles);
    }
 else {
      region.compact(false);
    }
    HBaseTestingUtility.closeRegionAndWAL(region);
  }
}
