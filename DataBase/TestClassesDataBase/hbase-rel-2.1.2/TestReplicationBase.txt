/** 
 * This class is only a base for other integration-level replication tests. Do not add tests here. TestReplicationSmallTests is where tests that don't require bring machines up/down should go All other tests should have their own classes and extend this one
 */
public class TestReplicationBase {
  private static final Logger LOG=LoggerFactory.getLogger(TestReplicationBase.class);
  protected static Configuration conf1=HBaseConfiguration.create();
  protected static Configuration conf2;
  protected static Configuration CONF_WITH_LOCALFS;
  protected static ZKWatcher zkw1;
  protected static ZKWatcher zkw2;
  protected static ReplicationAdmin admin;
  protected static Admin hbaseAdmin;
  protected static Table htable1;
  protected static Table htable2;
  protected static NavigableMap<byte[],Integer> scopes;
  protected static HBaseTestingUtility utility1;
  protected static HBaseTestingUtility utility2;
  protected static final int NB_ROWS_IN_BATCH=100;
  protected static final int NB_ROWS_IN_BIG_BATCH=NB_ROWS_IN_BATCH * 10;
  protected static final long SLEEP_TIME=500;
  protected static final int NB_RETRIES=50;
  protected static final TableName tableName=TableName.valueOf("test");
  protected static final byte[] famName=Bytes.toBytes("f");
  protected static final byte[] row=Bytes.toBytes("row");
  protected static final byte[] noRepfamName=Bytes.toBytes("norep");
  protected static final String PEER_ID2="2";
  protected boolean isSerialPeer(){
    return false;
  }
  protected final void cleanUp() throws IOException, InterruptedException {
    for (    JVMClusterUtil.RegionServerThread r : utility1.getHBaseCluster().getRegionServerThreads()) {
      utility1.getAdmin().rollWALWriter(r.getRegionServer().getServerName());
    }
    int rowCount=utility1.countRows(tableName);
    utility1.deleteTableData(tableName);
    Scan scan=new Scan();
    int lastCount=0;
    for (int i=0; i < NB_RETRIES; i++) {
      if (i == NB_RETRIES - 1) {
        fail("Waited too much time for truncate");
      }
      ResultScanner scanner=htable2.getScanner(scan);
      Result[] res=scanner.next(rowCount);
      scanner.close();
      if (res.length != 0) {
        if (res.length < lastCount) {
          i--;
        }
        lastCount=res.length;
        LOG.info("Still got " + res.length + " rows");
        Thread.sleep(SLEEP_TIME);
      }
 else {
        break;
      }
    }
  }
  protected static void waitForReplication(  int expectedRows,  int retries) throws IOException, InterruptedException {
    Scan scan;
    for (int i=0; i < retries; i++) {
      scan=new Scan();
      if (i == retries - 1) {
        fail("Waited too much time for normal batch replication");
      }
      ResultScanner scanner=htable2.getScanner(scan);
      Result[] res=scanner.next(expectedRows);
      scanner.close();
      if (res.length != expectedRows) {
        LOG.info("Only got " + res.length + " rows");
        Thread.sleep(SLEEP_TIME);
      }
 else {
        break;
      }
    }
  }
  protected static void loadData(  String prefix,  byte[] row) throws IOException {
    List<Put> puts=new ArrayList<>(NB_ROWS_IN_BATCH);
    for (int i=0; i < NB_ROWS_IN_BATCH; i++) {
      Put put=new Put(Bytes.toBytes(prefix + Integer.toString(i)));
      put.addColumn(famName,row,row);
      puts.add(put);
    }
    htable1.put(puts);
  }
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    conf1.set(HConstants.ZOOKEEPER_ZNODE_PARENT,"/1");
    conf1.setInt("replication.source.size.capacity",102400);
    conf1.setLong("replication.source.sleepforretries",100);
    conf1.setInt("hbase.regionserver.maxlogs",10);
    conf1.setLong("hbase.master.logcleaner.ttl",10);
    conf1.setInt("zookeeper.recovery.retry",1);
    conf1.setInt("zookeeper.recovery.retry.intervalmill",10);
    conf1.setLong(HConstants.THREAD_WAKE_FREQUENCY,100);
    conf1.setInt("replication.stats.thread.period.seconds",5);
    conf1.setBoolean("hbase.tests.use.shortcircuit.reads",false);
    conf1.setLong("replication.sleep.before.failover",2000);
    conf1.setInt("replication.source.maxretriesmultiplier",10);
    conf1.setFloat("replication.source.ratio",1.0f);
    conf1.setBoolean("replication.source.eof.autorecovery",true);
    conf1.setLong("hbase.serial.replication.waiting.ms",100);
    utility1=new HBaseTestingUtility(conf1);
    utility1.startMiniZKCluster();
    MiniZooKeeperCluster miniZK=utility1.getZkCluster();
    conf1=utility1.getConfiguration();
    zkw1=new ZKWatcher(conf1,"cluster1",null,true);
    admin=new ReplicationAdmin(conf1);
    LOG.info("Setup first Zk");
    conf2=HBaseConfiguration.create(conf1);
    conf2.set(HConstants.ZOOKEEPER_ZNODE_PARENT,"/2");
    conf2.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,6);
    conf2.setBoolean("hbase.tests.use.shortcircuit.reads",false);
    utility2=new HBaseTestingUtility(conf2);
    utility2.setZkCluster(miniZK);
    zkw2=new ZKWatcher(conf2,"cluster2",null,true);
    LOG.info("Setup second Zk");
    CONF_WITH_LOCALFS=HBaseConfiguration.create(conf1);
    utility1.startMiniCluster(2);
    utility2.startMiniCluster(4);
    hbaseAdmin=ConnectionFactory.createConnection(conf1).getAdmin();
    TableDescriptor table=TableDescriptorBuilder.newBuilder(tableName).setColumnFamily(ColumnFamilyDescriptorBuilder.newBuilder(famName).setMaxVersions(100).setScope(HConstants.REPLICATION_SCOPE_GLOBAL).build()).setColumnFamily(ColumnFamilyDescriptorBuilder.of(noRepfamName)).build();
    scopes=new TreeMap<>(Bytes.BYTES_COMPARATOR);
    for (    ColumnFamilyDescriptor f : table.getColumnFamilies()) {
      scopes.put(f.getName(),f.getScope());
    }
    Connection connection1=ConnectionFactory.createConnection(conf1);
    Connection connection2=ConnectionFactory.createConnection(conf2);
    try (Admin admin1=connection1.getAdmin()){
      admin1.createTable(table,HBaseTestingUtility.KEYS_FOR_HBA_CREATE_TABLE);
    }
     try (Admin admin2=connection2.getAdmin()){
      admin2.createTable(table,HBaseTestingUtility.KEYS_FOR_HBA_CREATE_TABLE);
    }
     utility1.waitUntilAllRegionsAssigned(tableName);
    utility2.waitUntilAllRegionsAssigned(tableName);
    htable1=connection1.getTable(tableName);
    htable2=connection2.getTable(tableName);
  }
  private boolean peerExist(  String peerId) throws IOException {
    return hbaseAdmin.listReplicationPeers().stream().anyMatch(p -> peerId.equals(p.getPeerId()));
  }
  @Before public void setUpBase() throws Exception {
    if (!peerExist(PEER_ID2)) {
      ReplicationPeerConfig rpc=ReplicationPeerConfig.newBuilder().setClusterKey(utility2.getClusterKey()).setSerial(isSerialPeer()).build();
      hbaseAdmin.addReplicationPeer(PEER_ID2,rpc);
    }
  }
  @After public void tearDownBase() throws Exception {
    if (peerExist(PEER_ID2)) {
      hbaseAdmin.removeReplicationPeer(PEER_ID2);
    }
  }
  protected static void runSimplePutDeleteTest() throws IOException, InterruptedException {
    Put put=new Put(row);
    put.addColumn(famName,row,row);
    htable1=utility1.getConnection().getTable(tableName);
    htable1.put(put);
    Get get=new Get(row);
    for (int i=0; i < NB_RETRIES; i++) {
      if (i == NB_RETRIES - 1) {
        fail("Waited too much time for put replication");
      }
      Result res=htable2.get(get);
      if (res.isEmpty()) {
        LOG.info("Row not available");
        Thread.sleep(SLEEP_TIME);
      }
 else {
        assertArrayEquals(row,res.value());
        break;
      }
    }
    Delete del=new Delete(row);
    htable1.delete(del);
    get=new Get(row);
    for (int i=0; i < NB_RETRIES; i++) {
      if (i == NB_RETRIES - 1) {
        fail("Waited too much time for del replication");
      }
      Result res=htable2.get(get);
      if (res.size() >= 1) {
        LOG.info("Row not deleted");
        Thread.sleep(SLEEP_TIME);
      }
 else {
        break;
      }
    }
  }
  protected static void runSmallBatchTest() throws IOException, InterruptedException {
    loadData("",row);
    Scan scan=new Scan();
    ResultScanner scanner1=htable1.getScanner(scan);
    Result[] res1=scanner1.next(NB_ROWS_IN_BATCH);
    scanner1.close();
    assertEquals(NB_ROWS_IN_BATCH,res1.length);
    waitForReplication(NB_ROWS_IN_BATCH,NB_RETRIES);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    htable2.close();
    htable1.close();
    admin.close();
    utility2.shutdownMiniCluster();
    utility1.shutdownMiniCluster();
  }
}
