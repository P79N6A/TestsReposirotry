/** 
 * Test class for  {@link RegionServerSpaceQuotaManager}.
 */
@Category(SmallTests.class) public class TestRegionServerSpaceQuotaManager {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRegionServerSpaceQuotaManager.class);
  private RegionServerSpaceQuotaManager quotaManager;
  private RegionServerServices rss;
  @Before public void setup() throws Exception {
    quotaManager=mock(RegionServerSpaceQuotaManager.class);
    rss=mock(RegionServerServices.class);
  }
  @Test public void testSpacePoliciesFromEnforcements(){
    final Map<TableName,SpaceViolationPolicyEnforcement> enforcements=new HashMap<>();
    final Map<TableName,SpaceQuotaSnapshot> expectedPolicies=new HashMap<>();
    when(quotaManager.copyActiveEnforcements()).thenReturn(enforcements);
    when(quotaManager.getActivePoliciesAsMap()).thenCallRealMethod();
    NoInsertsViolationPolicyEnforcement noInsertsPolicy=new NoInsertsViolationPolicyEnforcement();
    SpaceQuotaSnapshot noInsertsSnapshot=new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.NO_INSERTS),256L,1024L);
    noInsertsPolicy.initialize(rss,TableName.valueOf("no_inserts"),noInsertsSnapshot);
    enforcements.put(noInsertsPolicy.getTableName(),noInsertsPolicy);
    expectedPolicies.put(noInsertsPolicy.getTableName(),noInsertsSnapshot);
    NoWritesViolationPolicyEnforcement noWritesPolicy=new NoWritesViolationPolicyEnforcement();
    SpaceQuotaSnapshot noWritesSnapshot=new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.NO_WRITES),512L,2048L);
    noWritesPolicy.initialize(rss,TableName.valueOf("no_writes"),noWritesSnapshot);
    enforcements.put(noWritesPolicy.getTableName(),noWritesPolicy);
    expectedPolicies.put(noWritesPolicy.getTableName(),noWritesSnapshot);
    NoWritesCompactionsViolationPolicyEnforcement noWritesCompactionsPolicy=new NoWritesCompactionsViolationPolicyEnforcement();
    SpaceQuotaSnapshot noWritesCompactionsSnapshot=new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.NO_WRITES_COMPACTIONS),1024L,4096L);
    noWritesCompactionsPolicy.initialize(rss,TableName.valueOf("no_writes_compactions"),noWritesCompactionsSnapshot);
    enforcements.put(noWritesCompactionsPolicy.getTableName(),noWritesCompactionsPolicy);
    expectedPolicies.put(noWritesCompactionsPolicy.getTableName(),noWritesCompactionsSnapshot);
    DisableTableViolationPolicyEnforcement disablePolicy=new DisableTableViolationPolicyEnforcement();
    SpaceQuotaSnapshot disableSnapshot=new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.DISABLE),2048L,8192L);
    disablePolicy.initialize(rss,TableName.valueOf("disable"),disableSnapshot);
    enforcements.put(disablePolicy.getTableName(),disablePolicy);
    expectedPolicies.put(disablePolicy.getTableName(),disableSnapshot);
    enforcements.put(TableName.valueOf("no_policy"),new DefaultViolationPolicyEnforcement());
    Map<TableName,SpaceQuotaSnapshot> actualPolicies=quotaManager.getActivePoliciesAsMap();
    assertEquals(expectedPolicies,actualPolicies);
  }
  @Test public void testExceptionOnPolicyEnforcementEnable() throws Exception {
    final TableName tableName=TableName.valueOf("foo");
    final SpaceQuotaSnapshot snapshot=new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.DISABLE),1024L,2048L);
    RegionServerServices rss=mock(RegionServerServices.class);
    SpaceViolationPolicyEnforcementFactory factory=mock(SpaceViolationPolicyEnforcementFactory.class);
    SpaceViolationPolicyEnforcement enforcement=mock(SpaceViolationPolicyEnforcement.class);
    RegionServerSpaceQuotaManager realManager=new RegionServerSpaceQuotaManager(rss,factory);
    when(factory.create(rss,tableName,snapshot)).thenReturn(enforcement);
    doThrow(new IOException("Failed for test!")).when(enforcement).enable();
    realManager.enforceViolationPolicy(tableName,snapshot);
    Map<TableName,SpaceViolationPolicyEnforcement> enforcements=realManager.copyActiveEnforcements();
    assertTrue("Expected active enforcements to be empty, but were " + enforcements,enforcements.isEmpty());
  }
  @Test public void testExceptionOnPolicyEnforcementDisable() throws Exception {
    final TableName tableName=TableName.valueOf("foo");
    final SpaceQuotaSnapshot snapshot=new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.DISABLE),1024L,2048L);
    RegionServerServices rss=mock(RegionServerServices.class);
    SpaceViolationPolicyEnforcementFactory factory=mock(SpaceViolationPolicyEnforcementFactory.class);
    SpaceViolationPolicyEnforcement enforcement=mock(SpaceViolationPolicyEnforcement.class);
    RegionServerSpaceQuotaManager realManager=new RegionServerSpaceQuotaManager(rss,factory);
    when(factory.create(rss,tableName,snapshot)).thenReturn(enforcement);
    doNothing().when(enforcement).enable();
    doThrow(new IOException("Failed for test!")).when(enforcement).disable();
    realManager.enforceViolationPolicy(tableName,snapshot);
    Map<TableName,SpaceViolationPolicyEnforcement> enforcements=realManager.copyActiveEnforcements();
    assertEquals(1,enforcements.size());
    realManager.disableViolationPolicyEnforcement(tableName);
    enforcements=realManager.copyActiveEnforcements();
    assertEquals(1,enforcements.size());
  }
}
