@Category({RestTests.class,SmallTests.class}) public class TestRowModel extends TestModelBase<RowModel> {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRowModel.class);
  private static final byte[] ROW1=Bytes.toBytes("testrow1");
  private static final byte[] COLUMN1=Bytes.toBytes("testcolumn1");
  private static final byte[] VALUE1=Bytes.toBytes("testvalue1");
  private static final long TIMESTAMP1=1245219839331L;
  public TestRowModel() throws Exception {
    super(RowModel.class);
    AS_XML="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><Row key=\"dGVzdHJvdzE=\">" + "<Cell column=\"dGVzdGNvbHVtbjE=\" timestamp=\"1245219839331\">dGVzdHZhbHVlMQ==</Cell></Row>";
    AS_JSON="{\"key\":\"dGVzdHJvdzE=\",\"Cell\":[{\"column\":\"dGVzdGNvbHVtbjE=\"," + "\"timestamp\":1245219839331,\"$\":\"dGVzdHZhbHVlMQ==\"}]}";
  }
  @Override protected RowModel buildTestModel(){
    RowModel model=new RowModel();
    model.setKey(ROW1);
    model.addCell(new CellModel(COLUMN1,TIMESTAMP1,VALUE1));
    return model;
  }
  @Override protected void checkModel(  RowModel model){
    assertTrue(Bytes.equals(ROW1,model.getKey()));
    Iterator<CellModel> cells=model.getCells().iterator();
    CellModel cell=cells.next();
    assertTrue(Bytes.equals(COLUMN1,cell.getColumn()));
    assertTrue(Bytes.equals(VALUE1,cell.getValue()));
    assertTrue(cell.hasUserTimestamp());
    assertEquals(TIMESTAMP1,cell.getTimestamp());
    assertFalse(cells.hasNext());
  }
  @Override public void testFromPB() throws Exception {
  }
  @Test public void testEquals() throws Exception {
    RowModel rowModel1=buildTestModel();
    RowModel rowModel2=buildTestModel();
    assertEquals(rowModel1,rowModel2);
    RowModel rowModel3=new RowModel();
    assertFalse(rowModel1.equals(rowModel3));
  }
  @Test public void testToString() throws Exception {
    String expectedRowKey=ToStringBuilder.reflectionToString(ROW1,ToStringStyle.SIMPLE_STYLE);
    RowModel rowModel=buildTestModel();
    System.out.println(rowModel);
    assertTrue(StringUtils.contains(rowModel.toString(),expectedRowKey));
  }
}
