/** 
 * Provides AsyncFSWAL test cases.
 */
@Category({RegionServerTests.class,MediumTests.class}) public class TestAsyncFSWAL extends AbstractTestFSWAL {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAsyncFSWAL.class);
  private static EventLoopGroup GROUP;
  private static Class<? extends Channel> CHANNEL_CLASS;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    GROUP=new NioEventLoopGroup(1,Threads.newDaemonThreadFactory("TestAsyncFSWAL"));
    CHANNEL_CLASS=NioSocketChannel.class;
    AbstractTestFSWAL.setUpBeforeClass();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    AbstractTestFSWAL.tearDownAfterClass();
    GROUP.shutdownGracefully();
  }
  @Override protected AbstractFSWAL<?> newWAL(  FileSystem fs,  Path rootDir,  String logDir,  String archiveDir,  Configuration conf,  List<WALActionsListener> listeners,  boolean failIfWALExists,  String prefix,  String suffix) throws IOException {
    return new AsyncFSWAL(fs,rootDir,logDir,archiveDir,conf,listeners,failIfWALExists,prefix,suffix,GROUP,CHANNEL_CLASS);
  }
  @Override protected AbstractFSWAL<?> newSlowWAL(  FileSystem fs,  Path rootDir,  String logDir,  String archiveDir,  Configuration conf,  List<WALActionsListener> listeners,  boolean failIfWALExists,  String prefix,  String suffix,  final Runnable action) throws IOException {
    return new AsyncFSWAL(fs,rootDir,logDir,archiveDir,conf,listeners,failIfWALExists,prefix,suffix,GROUP,CHANNEL_CLASS){
      @Override void atHeadOfRingBufferEventHandlerAppend(){
        action.run();
        super.atHeadOfRingBufferEventHandlerAppend();
      }
    }
;
  }
}
