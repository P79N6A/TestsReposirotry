/** 
 * Test create/using/deleting snapshots from the client <p> This is an end-to-end test for the snapshot utility
 */
@Category({LargeTests.class,ClientTests.class}) public class TestSnapshotFromClient {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSnapshotFromClient.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestSnapshotFromClient.class);
  protected static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  protected static final int NUM_RS=2;
  protected static final String STRING_TABLE_NAME="test";
  protected static final byte[] TEST_FAM=Bytes.toBytes("fam");
  protected static final TableName TABLE_NAME=TableName.valueOf(STRING_TABLE_NAME);
  private static final Pattern MATCH_ALL=Pattern.compile(".*");
  @Rule public TestName name=new TestName();
  /** 
 * Setup the config for the cluster
 * @throws Exception on failure
 */
  @BeforeClass public static void setupCluster() throws Exception {
    setupConf(UTIL.getConfiguration());
    UTIL.startMiniCluster(NUM_RS);
  }
  protected static void setupConf(  Configuration conf){
    conf.setInt("hbase.regionsever.info.port",-1);
    conf.setInt("hbase.hregion.memstore.flush.size",25000);
    conf.setInt("hbase.hstore.compaction.min",10);
    conf.setInt("hbase.hstore.compactionThreshold",10);
    conf.setInt("hbase.hstore.blockingStoreFiles",12);
    conf.setBoolean(SnapshotManager.HBASE_SNAPSHOT_ENABLED,true);
    conf.set(HConstants.HBASE_REGION_SPLIT_POLICY_KEY,ConstantSizeRegionSplitPolicy.class.getName());
  }
  @Before public void setup() throws Exception {
    createTable();
  }
  protected void createTable() throws Exception {
    HTableDescriptor htd=new HTableDescriptor(TABLE_NAME);
    htd.setRegionReplication(getNumReplicas());
    UTIL.createTable(htd,new byte[][]{TEST_FAM},null);
  }
  protected int getNumReplicas(){
    return 1;
  }
  @After public void tearDown() throws Exception {
    UTIL.deleteTable(TABLE_NAME);
    SnapshotTestingUtils.deleteAllSnapshots(UTIL.getAdmin());
    SnapshotTestingUtils.deleteArchiveDirectory(UTIL);
  }
  @AfterClass public static void cleanupTest() throws Exception {
    try {
      UTIL.shutdownMiniCluster();
    }
 catch (    Exception e) {
      LOG.warn("failure shutting down cluster",e);
    }
  }
  /** 
 * Test snapshotting not allowed hbase:meta and -ROOT-
 * @throws Exception
 */
  @Test public void testMetaTablesSnapshot() throws Exception {
    Admin admin=UTIL.getAdmin();
    byte[] snapshotName=Bytes.toBytes("metaSnapshot");
    try {
      admin.snapshot(snapshotName,TableName.META_TABLE_NAME);
      fail("taking a snapshot of hbase:meta should not be allowed");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  /** 
 * Test HBaseAdmin#deleteSnapshots(String) which deletes snapshots whose names match the parameter
 * @throws Exception
 */
  @Test public void testSnapshotDeletionWithRegex() throws Exception {
    Admin admin=UTIL.getAdmin();
    SnapshotTestingUtils.assertNoSnapshots(admin);
    Table table=UTIL.getConnection().getTable(TABLE_NAME);
    UTIL.loadTable(table,TEST_FAM);
    table.close();
    byte[] snapshot1=Bytes.toBytes("TableSnapshot1");
    admin.snapshot(snapshot1,TABLE_NAME);
    LOG.debug("Snapshot1 completed.");
    byte[] snapshot2=Bytes.toBytes("TableSnapshot2");
    admin.snapshot(snapshot2,TABLE_NAME);
    LOG.debug("Snapshot2 completed.");
    String snapshot3="3rdTableSnapshot";
    admin.snapshot(Bytes.toBytes(snapshot3),TABLE_NAME);
    LOG.debug(snapshot3 + " completed.");
    admin.deleteSnapshots(Pattern.compile("TableSnapshot.*"));
    List<SnapshotDescription> snapshots=admin.listSnapshots();
    assertEquals(1,snapshots.size());
    assertEquals(snapshot3,snapshots.get(0).getName());
    admin.deleteSnapshot(snapshot3);
    admin.close();
  }
  /** 
 * Test snapshotting a table that is offline
 * @throws Exception
 */
  @Test public void testOfflineTableSnapshot() throws Exception {
    Admin admin=UTIL.getAdmin();
    SnapshotTestingUtils.assertNoSnapshots(admin);
    Table table=UTIL.getConnection().getTable(TABLE_NAME);
    UTIL.loadTable(table,TEST_FAM,false);
    LOG.debug("FS state before disable:");
    FSUtils.logFileSystemState(UTIL.getTestFileSystem(),FSUtils.getRootDir(UTIL.getConfiguration()),LOG);
    admin.disableTable(TABLE_NAME);
    LOG.debug("FS state before snapshot:");
    FSUtils.logFileSystemState(UTIL.getTestFileSystem(),FSUtils.getRootDir(UTIL.getConfiguration()),LOG);
    final String SNAPSHOT_NAME="offlineTableSnapshot";
    byte[] snapshot=Bytes.toBytes(SNAPSHOT_NAME);
    admin.snapshot(new SnapshotDescription(SNAPSHOT_NAME,TABLE_NAME,SnapshotType.DISABLED,null,-1,SnapshotManifestV1.DESCRIPTOR_VERSION));
    LOG.debug("Snapshot completed.");
    List<SnapshotDescription> snapshots=SnapshotTestingUtils.assertOneSnapshotThatMatches(admin,snapshot,TABLE_NAME);
    FileSystem fs=UTIL.getHBaseCluster().getMaster().getMasterFileSystem().getFileSystem();
    Path rootDir=UTIL.getHBaseCluster().getMaster().getMasterFileSystem().getRootDir();
    LOG.debug("FS state after snapshot:");
    FSUtils.logFileSystemState(UTIL.getTestFileSystem(),FSUtils.getRootDir(UTIL.getConfiguration()),LOG);
    SnapshotTestingUtils.confirmSnapshotValid(ProtobufUtil.createHBaseProtosSnapshotDesc(snapshots.get(0)),TABLE_NAME,TEST_FAM,rootDir,admin,fs);
    admin.deleteSnapshot(snapshot);
    snapshots=admin.listSnapshots();
    SnapshotTestingUtils.assertNoSnapshots(admin);
  }
  @Test public void testSnapshotFailsOnNonExistantTable() throws Exception {
    Admin admin=UTIL.getAdmin();
    SnapshotTestingUtils.assertNoSnapshots(admin);
    String tableName="_not_a_table";
    boolean fail=false;
    do {
      try {
        admin.getTableDescriptor(TableName.valueOf(tableName));
        fail=true;
        LOG.error("Table:" + tableName + " already exists, checking a new name");
        tableName=tableName + "!";
      }
 catch (      TableNotFoundException e) {
        fail=false;
      }
    }
 while (fail);
    try {
      admin.snapshot("fail",TableName.valueOf(tableName));
      fail("Snapshot succeeded even though there is not table.");
    }
 catch (    SnapshotCreationException e) {
      LOG.info("Correctly failed to snapshot a non-existant table:" + e.getMessage());
    }
  }
  @Test public void testOfflineTableSnapshotWithEmptyRegions() throws Exception {
    Admin admin=UTIL.getAdmin();
    SnapshotTestingUtils.assertNoSnapshots(admin);
    LOG.debug("FS state before disable:");
    FSUtils.logFileSystemState(UTIL.getTestFileSystem(),FSUtils.getRootDir(UTIL.getConfiguration()),LOG);
    admin.disableTable(TABLE_NAME);
    LOG.debug("FS state before snapshot:");
    FSUtils.logFileSystemState(UTIL.getTestFileSystem(),FSUtils.getRootDir(UTIL.getConfiguration()),LOG);
    byte[] snapshot=Bytes.toBytes("testOfflineTableSnapshotWithEmptyRegions");
    admin.snapshot(snapshot,TABLE_NAME);
    LOG.debug("Snapshot completed.");
    List<SnapshotDescription> snapshots=SnapshotTestingUtils.assertOneSnapshotThatMatches(admin,snapshot,TABLE_NAME);
    FileSystem fs=UTIL.getHBaseCluster().getMaster().getMasterFileSystem().getFileSystem();
    Path rootDir=UTIL.getHBaseCluster().getMaster().getMasterFileSystem().getRootDir();
    LOG.debug("FS state after snapshot:");
    FSUtils.logFileSystemState(UTIL.getTestFileSystem(),FSUtils.getRootDir(UTIL.getConfiguration()),LOG);
    List<byte[]> emptyCfs=Lists.newArrayList(TEST_FAM);
    List<byte[]> nonEmptyCfs=Lists.newArrayList();
    SnapshotTestingUtils.confirmSnapshotValid(ProtobufUtil.createHBaseProtosSnapshotDesc(snapshots.get(0)),TABLE_NAME,nonEmptyCfs,emptyCfs,rootDir,admin,fs);
    admin.deleteSnapshot(snapshot);
    snapshots=admin.listSnapshots();
    SnapshotTestingUtils.assertNoSnapshots(admin);
  }
  @Test public void testListTableSnapshots() throws Exception {
    Admin admin=null;
    final TableName tableName=TableName.valueOf(name.getMethodName());
    try {
      admin=UTIL.getAdmin();
      HTableDescriptor htd=new HTableDescriptor(tableName);
      UTIL.createTable(htd,new byte[][]{TEST_FAM},UTIL.getConfiguration());
      String table1Snapshot1="Table1Snapshot1";
      admin.snapshot(table1Snapshot1,TABLE_NAME);
      LOG.debug("Snapshot1 completed.");
      String table1Snapshot2="Table1Snapshot2";
      admin.snapshot(table1Snapshot2,TABLE_NAME);
      LOG.debug("Snapshot2 completed.");
      String table2Snapshot1="Table2Snapshot1";
      admin.snapshot(Bytes.toBytes(table2Snapshot1),tableName);
      LOG.debug(table2Snapshot1 + " completed.");
      List<SnapshotDescription> listTableSnapshots=admin.listTableSnapshots(Pattern.compile("test.*"),MATCH_ALL);
      List<String> listTableSnapshotNames=new ArrayList<>();
      assertEquals(3,listTableSnapshots.size());
      for (      SnapshotDescription s : listTableSnapshots) {
        listTableSnapshotNames.add(s.getName());
      }
      assertTrue(listTableSnapshotNames.contains(table1Snapshot1));
      assertTrue(listTableSnapshotNames.contains(table1Snapshot2));
      assertTrue(listTableSnapshotNames.contains(table2Snapshot1));
    }
  finally {
      if (admin != null) {
        try {
          admin.deleteSnapshots(Pattern.compile("Table.*"));
        }
 catch (        SnapshotDoesNotExistException ignore) {
        }
        if (admin.tableExists(tableName)) {
          UTIL.deleteTable(tableName);
        }
        admin.close();
      }
    }
  }
  @Test public void testListTableSnapshotsWithRegex() throws Exception {
    Admin admin=null;
    try {
      admin=UTIL.getAdmin();
      String table1Snapshot1="Table1Snapshot1";
      admin.snapshot(table1Snapshot1,TABLE_NAME);
      LOG.debug("Snapshot1 completed.");
      String table1Snapshot2="Table1Snapshot2";
      admin.snapshot(table1Snapshot2,TABLE_NAME);
      LOG.debug("Snapshot2 completed.");
      String table2Snapshot1="Table2Snapshot1";
      admin.snapshot(Bytes.toBytes(table2Snapshot1),TABLE_NAME);
      LOG.debug(table2Snapshot1 + " completed.");
      List<SnapshotDescription> listTableSnapshots=admin.listTableSnapshots(Pattern.compile("test.*"),Pattern.compile("Table1.*"));
      List<String> listTableSnapshotNames=new ArrayList<>();
      assertEquals(2,listTableSnapshots.size());
      for (      SnapshotDescription s : listTableSnapshots) {
        listTableSnapshotNames.add(s.getName());
      }
      assertTrue(listTableSnapshotNames.contains(table1Snapshot1));
      assertTrue(listTableSnapshotNames.contains(table1Snapshot2));
      assertFalse(listTableSnapshotNames.contains(table2Snapshot1));
    }
  finally {
      if (admin != null) {
        try {
          admin.deleteSnapshots(Pattern.compile("Table.*"));
        }
 catch (        SnapshotDoesNotExistException ignore) {
        }
        admin.close();
      }
    }
  }
  @Test public void testDeleteTableSnapshots() throws Exception {
    Admin admin=null;
    final TableName tableName=TableName.valueOf(name.getMethodName());
    try {
      admin=UTIL.getAdmin();
      HTableDescriptor htd=new HTableDescriptor(tableName);
      UTIL.createTable(htd,new byte[][]{TEST_FAM},UTIL.getConfiguration());
      String table1Snapshot1="Table1Snapshot1";
      admin.snapshot(table1Snapshot1,TABLE_NAME);
      LOG.debug("Snapshot1 completed.");
      String table1Snapshot2="Table1Snapshot2";
      admin.snapshot(table1Snapshot2,TABLE_NAME);
      LOG.debug("Snapshot2 completed.");
      String table2Snapshot1="Table2Snapshot1";
      admin.snapshot(Bytes.toBytes(table2Snapshot1),tableName);
      LOG.debug(table2Snapshot1 + " completed.");
      Pattern tableNamePattern=Pattern.compile("test.*");
      admin.deleteTableSnapshots(tableNamePattern,MATCH_ALL);
      assertEquals(0,admin.listTableSnapshots(tableNamePattern,MATCH_ALL).size());
    }
  finally {
      if (admin != null) {
        if (admin.tableExists(tableName)) {
          UTIL.deleteTable(tableName);
        }
        admin.close();
      }
    }
  }
  @Test public void testDeleteTableSnapshotsWithRegex() throws Exception {
    Admin admin=null;
    Pattern tableNamePattern=Pattern.compile("test.*");
    try {
      admin=UTIL.getAdmin();
      String table1Snapshot1="Table1Snapshot1";
      admin.snapshot(table1Snapshot1,TABLE_NAME);
      LOG.debug("Snapshot1 completed.");
      String table1Snapshot2="Table1Snapshot2";
      admin.snapshot(table1Snapshot2,TABLE_NAME);
      LOG.debug("Snapshot2 completed.");
      String table2Snapshot1="Table2Snapshot1";
      admin.snapshot(Bytes.toBytes(table2Snapshot1),TABLE_NAME);
      LOG.debug(table2Snapshot1 + " completed.");
      admin.deleteTableSnapshots(tableNamePattern,Pattern.compile("Table1.*"));
      assertEquals(1,admin.listTableSnapshots(tableNamePattern,MATCH_ALL).size());
    }
  finally {
      if (admin != null) {
        try {
          admin.deleteTableSnapshots(tableNamePattern,MATCH_ALL);
        }
 catch (        SnapshotDoesNotExistException ignore) {
        }
        admin.close();
      }
    }
  }
}
