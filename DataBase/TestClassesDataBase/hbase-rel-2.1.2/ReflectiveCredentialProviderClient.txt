private static class ReflectiveCredentialProviderClient {
  public static final String HADOOP_CRED_PROVIDER_FACTORY_CLASS_NAME="org.apache.hadoop.security.alias.JavaKeyStoreProvider$Factory";
  public static final String HADOOP_CRED_PROVIDER_FACTORY_GET_PROVIDERS_METHOD_NAME="getProviders";
  public static final String HADOOP_CRED_PROVIDER_CLASS_NAME="org.apache.hadoop.security.alias.CredentialProvider";
  public static final String HADOOP_CRED_PROVIDER_GET_CREDENTIAL_ENTRY_METHOD_NAME="getCredentialEntry";
  public static final String HADOOP_CRED_PROVIDER_GET_ALIASES_METHOD_NAME="getAliases";
  public static final String HADOOP_CRED_PROVIDER_CREATE_CREDENTIAL_ENTRY_METHOD_NAME="createCredentialEntry";
  public static final String HADOOP_CRED_PROVIDER_FLUSH_METHOD_NAME="flush";
  public static final String HADOOP_CRED_ENTRY_CLASS_NAME="org.apache.hadoop.security.alias.CredentialProvider$CredentialEntry";
  public static final String HADOOP_CRED_ENTRY_GET_CREDENTIAL_METHOD_NAME="getCredential";
  public static final String CREDENTIAL_PROVIDER_PATH="hadoop.security.credential.provider.path";
  private static Object hadoopCredProviderFactory=null;
  private static Method getProvidersMethod=null;
  private static Method getAliasesMethod=null;
  private static Method getCredentialEntryMethod=null;
  private static Method getCredentialMethod=null;
  private static Method createCredentialEntryMethod=null;
  private static Method flushMethod=null;
  private static Boolean hadoopClassesAvailable=null;
  /** 
 * Determine if we can load the necessary CredentialProvider classes. Only loaded the first time, so subsequent invocations of this method should return fast.
 * @return True if the CredentialProvider classes/methods are available,false otherwise.
 */
  private boolean isHadoopCredentialProviderAvailable(){
    if (null != hadoopClassesAvailable) {
      if (hadoopClassesAvailable && null != getProvidersMethod && null != hadoopCredProviderFactory && null != getCredentialEntryMethod && null != getCredentialMethod) {
        return true;
      }
 else {
        return false;
      }
    }
    hadoopClassesAvailable=false;
    Class<?> hadoopCredProviderFactoryClz=null;
    try {
      hadoopCredProviderFactoryClz=Class.forName(HADOOP_CRED_PROVIDER_FACTORY_CLASS_NAME);
    }
 catch (    ClassNotFoundException e) {
      return false;
    }
    try {
      hadoopCredProviderFactory=hadoopCredProviderFactoryClz.getDeclaredConstructor().newInstance();
    }
 catch (    Exception e) {
      return false;
    }
    try {
      getProvidersMethod=loadMethod(hadoopCredProviderFactoryClz,HADOOP_CRED_PROVIDER_FACTORY_GET_PROVIDERS_METHOD_NAME,Configuration.class);
      Class<?> hadoopCredProviderClz=null;
      hadoopCredProviderClz=Class.forName(HADOOP_CRED_PROVIDER_CLASS_NAME);
      getCredentialEntryMethod=loadMethod(hadoopCredProviderClz,HADOOP_CRED_PROVIDER_GET_CREDENTIAL_ENTRY_METHOD_NAME,String.class);
      getAliasesMethod=loadMethod(hadoopCredProviderClz,HADOOP_CRED_PROVIDER_GET_ALIASES_METHOD_NAME);
      createCredentialEntryMethod=loadMethod(hadoopCredProviderClz,HADOOP_CRED_PROVIDER_CREATE_CREDENTIAL_ENTRY_METHOD_NAME,String.class,char[].class);
      flushMethod=loadMethod(hadoopCredProviderClz,HADOOP_CRED_PROVIDER_FLUSH_METHOD_NAME);
      Class<?> hadoopCredentialEntryClz=null;
      try {
        hadoopCredentialEntryClz=Class.forName(HADOOP_CRED_ENTRY_CLASS_NAME);
      }
 catch (      ClassNotFoundException e) {
        LOG.error("Failed to load class:" + e);
        return false;
      }
      getCredentialMethod=loadMethod(hadoopCredentialEntryClz,HADOOP_CRED_ENTRY_GET_CREDENTIAL_METHOD_NAME);
    }
 catch (    Exception e1) {
      return false;
    }
    hadoopClassesAvailable=true;
    LOG.info("Credential provider classes have been" + " loaded and initialized successfully through reflection.");
    return true;
  }
  private Method loadMethod(  Class<?> clz,  String name,  Class<?>... classes) throws Exception {
    Method method=null;
    try {
      method=clz.getMethod(name,classes);
    }
 catch (    SecurityException e) {
      fail("security exception caught for: " + name + " in "+ clz.getCanonicalName());
      throw e;
    }
catch (    NoSuchMethodException e) {
      LOG.error("Failed to load the " + name + ": "+ e);
      fail("no such method: " + name + " in "+ clz.getCanonicalName());
      throw e;
    }
    return method;
  }
  /** 
 * Wrapper to fetch the configured  {@code List<CredentialProvider>}s.
 * @param conf Configuration with GENERAL_SECURITY_CREDENTIAL_PROVIDER_PATHS defined
 * @return List of CredentialProviders, or null if they could not be loaded
 */
  @SuppressWarnings("unchecked") protected List<Object> getCredentialProviders(  Configuration conf){
    Object providersObj=null;
    try {
      providersObj=getProvidersMethod.invoke(hadoopCredProviderFactory,conf);
    }
 catch (    IllegalArgumentException e) {
      LOG.error("Failed to invoke: " + getProvidersMethod.getName() + ": "+ e);
      return null;
    }
catch (    IllegalAccessException e) {
      LOG.error("Failed to invoke: " + getProvidersMethod.getName() + ": "+ e);
      return null;
    }
catch (    InvocationTargetException e) {
      LOG.error("Failed to invoke: " + getProvidersMethod.getName() + ": "+ e);
      return null;
    }
    try {
      return (List<Object>)providersObj;
    }
 catch (    ClassCastException e) {
      return null;
    }
  }
  /** 
 * Create a CredentialEntry using the configured Providers. If multiple CredentialProviders are configured, the first will be used.
 * @param conf Configuration for the CredentialProvider
 * @param name CredentialEntry name (alias)
 * @param credential The credential
 */
  public void createEntry(  Configuration conf,  String name,  char[] credential) throws Exception {
    if (!isHadoopCredentialProviderAvailable()) {
      return;
    }
    List<Object> providers=getCredentialProviders(conf);
    if (null == providers) {
      throw new IOException("Could not fetch any CredentialProviders, " + "is the implementation available?");
    }
    Object provider=providers.get(0);
    createEntryInProvider(provider,name,credential);
  }
  /** 
 * Create a CredentialEntry with the give name and credential in the credentialProvider. The credentialProvider argument must be an instance of Hadoop CredentialProvider.
 * @param credentialProvider Instance of CredentialProvider
 * @param name CredentialEntry name (alias)
 * @param credential The credential to store
 */
  private void createEntryInProvider(  Object credentialProvider,  String name,  char[] credential) throws Exception {
    if (!isHadoopCredentialProviderAvailable()) {
      return;
    }
    try {
      createCredentialEntryMethod.invoke(credentialProvider,name,credential);
    }
 catch (    IllegalArgumentException e) {
      return;
    }
catch (    IllegalAccessException e) {
      return;
    }
catch (    InvocationTargetException e) {
      return;
    }
    try {
      flushMethod.invoke(credentialProvider);
    }
 catch (    IllegalArgumentException e) {
      throw e;
    }
catch (    IllegalAccessException e) {
      throw e;
    }
catch (    InvocationTargetException e) {
      throw e;
    }
  }
}
