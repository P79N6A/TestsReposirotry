public static class BaseTestStepProcedure extends SequentialProcedure<TestProcEnv> {
  private AtomicBoolean abort=new AtomicBoolean(false);
  private int step=0;
  @Override protected Procedure[] execute(  TestProcEnv env) throws InterruptedException {
    env.waitOnLatch();
    LOG.debug("execute procedure " + this + " step="+ step);
    ProcedureTestingUtility.toggleKillBeforeStoreUpdate(procExecutor);
    step++;
    Threads.sleepWithoutInterrupt(procSleepInterval);
    if (isAborted()) {
      setFailure(new RemoteProcedureException(getClass().getName(),new ProcedureAbortedException("got an abort at " + getClass().getName() + " step="+ step)));
      return null;
    }
    return null;
  }
  @Override protected void rollback(  TestProcEnv env){
    LOG.debug("rollback procedure " + this + " step="+ step);
    ProcedureTestingUtility.toggleKillBeforeStoreUpdate(procExecutor);
    step++;
  }
  @Override protected boolean abort(  TestProcEnv env){
    abort.set(true);
    return true;
  }
  private boolean isAborted(){
    boolean aborted=abort.get();
    BaseTestStepProcedure proc=this;
    while (proc.hasParent() && !aborted) {
      proc=(BaseTestStepProcedure)procExecutor.getProcedure(proc.getParentProcId());
      aborted=proc.isAborted();
    }
    return aborted;
  }
}
