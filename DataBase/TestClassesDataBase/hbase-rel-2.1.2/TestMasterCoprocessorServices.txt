/** 
 * Tests that the MasterRpcServices is correctly searching for implementations of the Coprocessor Service and not just the "default" implementations of those services.
 */
@Category({SmallTests.class}) public class TestMasterCoprocessorServices {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMasterCoprocessorServices.class);
private static class MockAccessController implements AccessControlService.Interface, MasterCoprocessor, RegionCoprocessor, MasterObserver, RegionObserver {
    @Override public void grant(    RpcController controller,    GrantRequest request,    RpcCallback<GrantResponse> done){
    }
    @Override public void revoke(    RpcController controller,    RevokeRequest request,    RpcCallback<RevokeResponse> done){
    }
    @Override public void getUserPermissions(    RpcController controller,    GetUserPermissionsRequest request,    RpcCallback<GetUserPermissionsResponse> done){
    }
    @Override public void checkPermissions(    RpcController controller,    CheckPermissionsRequest request,    RpcCallback<CheckPermissionsResponse> done){
    }
  }
private static class MockVisibilityController implements VisibilityLabelsService.Interface, MasterCoprocessor, RegionCoprocessor, MasterObserver, RegionObserver {
    @Override public void addLabels(    RpcController controller,    VisibilityLabelsRequest request,    RpcCallback<VisibilityLabelsResponse> done){
    }
    @Override public void setAuths(    RpcController controller,    SetAuthsRequest request,    RpcCallback<VisibilityLabelsResponse> done){
    }
    @Override public void clearAuths(    RpcController controller,    SetAuthsRequest request,    RpcCallback<VisibilityLabelsResponse> done){
    }
    @Override public void getAuths(    RpcController controller,    GetAuthsRequest request,    RpcCallback<GetAuthsResponse> done){
    }
    @Override public void listLabels(    RpcController controller,    ListLabelsRequest request,    RpcCallback<ListLabelsResponse> done){
    }
  }
  private MasterRpcServices masterServices;
  @SuppressWarnings("unchecked") @Before public void setup(){
    masterServices=mock(MasterRpcServices.class);
    when(masterServices.hasAccessControlServiceCoprocessor(any(MasterCoprocessorHost.class))).thenCallRealMethod();
    when(masterServices.hasVisibilityLabelsServiceCoprocessor(any(MasterCoprocessorHost.class))).thenCallRealMethod();
    when(masterServices.checkCoprocessorWithService(any(List.class),any(Class.class))).thenCallRealMethod();
  }
  @Test public void testAccessControlServices(){
    MasterCoprocessor defaultImpl=new AccessController();
    MasterCoprocessor customImpl=new MockAccessController();
    MasterCoprocessor unrelatedImpl=new JMXListener();
    assertTrue(masterServices.checkCoprocessorWithService(Collections.singletonList(defaultImpl),AccessControlService.Interface.class));
    assertTrue(masterServices.checkCoprocessorWithService(Collections.singletonList(customImpl),AccessControlService.Interface.class));
    assertFalse(masterServices.checkCoprocessorWithService(Collections.emptyList(),AccessControlService.Interface.class));
    assertFalse(masterServices.checkCoprocessorWithService(null,AccessControlService.Interface.class));
    assertFalse(masterServices.checkCoprocessorWithService(Collections.singletonList(unrelatedImpl),AccessControlService.Interface.class));
    assertTrue(masterServices.checkCoprocessorWithService(Arrays.asList(unrelatedImpl,customImpl),AccessControlService.Interface.class));
    assertTrue(masterServices.checkCoprocessorWithService(Arrays.asList(unrelatedImpl,defaultImpl),AccessControlService.Interface.class));
  }
  @Test public void testVisibilityLabelServices(){
    MasterCoprocessor defaultImpl=new VisibilityController();
    MasterCoprocessor customImpl=new MockVisibilityController();
    MasterCoprocessor unrelatedImpl=new JMXListener();
    assertTrue(masterServices.checkCoprocessorWithService(Collections.singletonList(defaultImpl),VisibilityLabelsService.Interface.class));
    assertTrue(masterServices.checkCoprocessorWithService(Collections.singletonList(customImpl),VisibilityLabelsService.Interface.class));
    assertFalse(masterServices.checkCoprocessorWithService(Collections.emptyList(),VisibilityLabelsService.Interface.class));
    assertFalse(masterServices.checkCoprocessorWithService(null,VisibilityLabelsService.Interface.class));
    assertFalse(masterServices.checkCoprocessorWithService(Collections.singletonList(unrelatedImpl),VisibilityLabelsService.Interface.class));
    assertTrue(masterServices.checkCoprocessorWithService(Arrays.asList(unrelatedImpl,customImpl),VisibilityLabelsService.Interface.class));
    assertTrue(masterServices.checkCoprocessorWithService(Arrays.asList(unrelatedImpl,defaultImpl),VisibilityLabelsService.Interface.class));
  }
}
