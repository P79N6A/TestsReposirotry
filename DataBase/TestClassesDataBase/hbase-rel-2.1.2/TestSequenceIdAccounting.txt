@Category(SmallTests.class) public class TestSequenceIdAccounting {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSequenceIdAccounting.class);
  private static final byte[] ENCODED_REGION_NAME=Bytes.toBytes("r");
  private static final byte[] FAMILY_NAME=Bytes.toBytes("cf");
  private static final Set<byte[]> FAMILIES;
static {
    FAMILIES=new HashSet<>();
    FAMILIES.add(FAMILY_NAME);
  }
  @Test public void testStartCacheFlush(){
    SequenceIdAccounting sida=new SequenceIdAccounting();
    sida.getOrCreateLowestSequenceIds(ENCODED_REGION_NAME);
    Map<byte[],Long> m=new HashMap<>();
    m.put(ENCODED_REGION_NAME,HConstants.NO_SEQNUM);
    assertEquals(HConstants.NO_SEQNUM,(long)sida.startCacheFlush(ENCODED_REGION_NAME,FAMILIES));
    sida.completeCacheFlush(ENCODED_REGION_NAME);
    long sequenceid=1;
    sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid,true);
    assertEquals(HConstants.NO_SEQNUM,(long)sida.startCacheFlush(ENCODED_REGION_NAME,FAMILIES));
    sida.completeCacheFlush(ENCODED_REGION_NAME);
    long currentSequenceId=sequenceid;
    sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid,true);
    final Set<byte[]> otherFamily=new HashSet<>(1);
    otherFamily.add(Bytes.toBytes("otherCf"));
    sida.update(ENCODED_REGION_NAME,FAMILIES,++sequenceid,true);
    assertEquals(currentSequenceId,(long)sida.startCacheFlush(ENCODED_REGION_NAME,otherFamily));
    sida.completeCacheFlush(ENCODED_REGION_NAME);
  }
  @Test public void testAreAllLower(){
    SequenceIdAccounting sida=new SequenceIdAccounting();
    sida.getOrCreateLowestSequenceIds(ENCODED_REGION_NAME);
    Map<byte[],Long> m=new HashMap<>();
    m.put(ENCODED_REGION_NAME,HConstants.NO_SEQNUM);
    assertTrue(sida.areAllLower(m));
    long sequenceid=1;
    sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid,true);
    sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid++,true);
    sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid++,true);
    assertTrue(sida.areAllLower(m));
    m.put(ENCODED_REGION_NAME,sequenceid);
    assertFalse(sida.areAllLower(m));
    long lowest=sida.getLowestSequenceId(ENCODED_REGION_NAME);
    assertEquals("Lowest should be first sequence id inserted",1,lowest);
    m.put(ENCODED_REGION_NAME,lowest);
    assertFalse(sida.areAllLower(m));
    sida.startCacheFlush(ENCODED_REGION_NAME,FAMILIES);
    assertFalse(sida.areAllLower(m));
    m.put(ENCODED_REGION_NAME,HConstants.NO_SEQNUM);
    assertTrue(sida.areAllLower(m));
    sida.completeCacheFlush(ENCODED_REGION_NAME);
    m.put(ENCODED_REGION_NAME,sequenceid);
    assertTrue(sida.areAllLower(m));
    sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid++,true);
    sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid++,true);
    sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid++,true);
    lowest=sida.getLowestSequenceId(ENCODED_REGION_NAME);
    m.put(ENCODED_REGION_NAME,lowest);
    assertFalse(sida.areAllLower(m));
    sida.startCacheFlush(ENCODED_REGION_NAME,FAMILIES);
    assertEquals(HConstants.NO_SEQNUM,sida.getLowestSequenceId(ENCODED_REGION_NAME));
    sida.completeCacheFlush(ENCODED_REGION_NAME);
    assertEquals(HConstants.NO_SEQNUM,sida.getLowestSequenceId(ENCODED_REGION_NAME));
    m.put(ENCODED_REGION_NAME,sequenceid);
    sida.update(ENCODED_REGION_NAME,FAMILIES,++sequenceid,true);
    sida.update(ENCODED_REGION_NAME,FAMILIES,++sequenceid,true);
    sida.update(ENCODED_REGION_NAME,FAMILIES,++sequenceid,true);
    assertTrue(sida.areAllLower(m));
  }
  @Test public void testFindLower(){
    SequenceIdAccounting sida=new SequenceIdAccounting();
    sida.getOrCreateLowestSequenceIds(ENCODED_REGION_NAME);
    Map<byte[],Long> m=new HashMap<>();
    m.put(ENCODED_REGION_NAME,HConstants.NO_SEQNUM);
    long sequenceid=1;
    sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid,true);
    sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid++,true);
    sida.update(ENCODED_REGION_NAME,FAMILIES,sequenceid++,true);
    assertTrue(sida.findLower(m) == null);
    m.put(ENCODED_REGION_NAME,sida.getLowestSequenceId(ENCODED_REGION_NAME));
    assertTrue(sida.findLower(m).length == 1);
    m.put(ENCODED_REGION_NAME,sida.getLowestSequenceId(ENCODED_REGION_NAME) - 1);
    assertTrue(sida.findLower(m) == null);
  }
}
