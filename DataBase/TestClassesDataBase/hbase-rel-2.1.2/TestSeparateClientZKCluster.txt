@Category(MediumTests.class) public class TestSeparateClientZKCluster {
  private static final Logger LOG=LoggerFactory.getLogger(TestSeparateClientZKCluster.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final File clientZkDir=new File("/tmp/TestSeparateClientZKCluster");
  private static final int ZK_SESSION_TIMEOUT=5000;
  private static MiniZooKeeperCluster clientZkCluster;
  private final byte[] family=Bytes.toBytes("cf");
  private final byte[] qualifier=Bytes.toBytes("c1");
  private final byte[] row=Bytes.toBytes("row");
  private final byte[] value=Bytes.toBytes("v1");
  private final byte[] newVal=Bytes.toBytes("v2");
  @Rule public TestName name=new TestName();
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSeparateClientZKCluster.class);
  @BeforeClass public static void beforeAllTests() throws Exception {
    int clientZkPort=21828;
    clientZkCluster=new MiniZooKeeperCluster(TEST_UTIL.getConfiguration());
    clientZkCluster.setDefaultClientPort(clientZkPort);
    clientZkCluster.startup(clientZkDir);
    TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,2);
    TEST_UTIL.getConfiguration().setInt("hbase.client.start.log.errors.counter",-1);
    TEST_UTIL.getConfiguration().setInt("zookeeper.recovery.retry",1);
    TEST_UTIL.getConfiguration().set(HConstants.CLIENT_ZOOKEEPER_QUORUM,HConstants.LOCALHOST);
    TEST_UTIL.getConfiguration().setInt(HConstants.CLIENT_ZOOKEEPER_CLIENT_PORT,clientZkPort);
    TEST_UTIL.getConfiguration().setInt(HConstants.ZK_SESSION_TIMEOUT,ZK_SESSION_TIMEOUT);
    TEST_UTIL.startMiniCluster(2,3);
  }
  @AfterClass public static void afterAllTests() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
    clientZkCluster.shutdown();
    FileUtils.deleteDirectory(clientZkDir);
  }
  @Test public void testBasicOperation() throws Exception {
    TableName tn=TableName.valueOf(name.getMethodName());
    Connection conn=TEST_UTIL.getConnection();
    Admin admin=conn.getAdmin();
    HTable table=(HTable)conn.getTable(tn);
    try {
      ColumnFamilyDescriptorBuilder cfDescBuilder=ColumnFamilyDescriptorBuilder.newBuilder(family);
      TableDescriptorBuilder tableDescBuilder=TableDescriptorBuilder.newBuilder(tn).setColumnFamily(cfDescBuilder.build());
      admin.createTable(tableDescBuilder.build());
      Put put=new Put(row);
      put.addColumn(family,qualifier,value);
      table.put(put);
      Get get=new Get(row);
      Result result=table.get(get);
      LOG.debug("Result: " + Bytes.toString(result.getValue(family,qualifier)));
      Assert.assertArrayEquals(value,result.getValue(family,qualifier));
    }
  finally {
      admin.close();
      table.close();
    }
  }
  @Test public void testMasterSwitch() throws Exception {
    Connection conn=TEST_UTIL.getConnection();
    Admin admin=conn.getAdmin();
    LOG.debug("Tables: " + admin.listTableDescriptors());
    try {
      MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
      HMaster master=cluster.getMaster();
      master.stopMaster();
      while (!master.isShutDown()) {
        Thread.sleep(200);
      }
      while (cluster.getMaster() == null || !cluster.getMaster().isInitialized()) {
        Thread.sleep(200);
      }
      Assert.assertTrue(admin.balance(false));
    }
  finally {
      admin.close();
    }
  }
  @Test public void testMetaRegionMove() throws Exception {
    TableName tn=TableName.valueOf(name.getMethodName());
    Connection conn=TEST_UTIL.getConnection();
    Admin admin=conn.getAdmin();
    HTable table=(HTable)conn.getTable(tn);
    try {
      MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
      ColumnFamilyDescriptorBuilder cfDescBuilder=ColumnFamilyDescriptorBuilder.newBuilder(family);
      TableDescriptorBuilder tableDescBuilder=TableDescriptorBuilder.newBuilder(tn).setColumnFamily(cfDescBuilder.build());
      admin.createTable(tableDescBuilder.build());
      Put put=new Put(row);
      put.addColumn(family,qualifier,value);
      table.put(put);
      Get get=new Get(row);
      Result result=table.get(get);
      byte[] destServerName=null;
      for (      RegionServerThread rst : cluster.getLiveRegionServerThreads()) {
        ServerName name=rst.getRegionServer().getServerName();
        if (!name.equals(cluster.getServerHoldingMeta())) {
          destServerName=Bytes.toBytes(name.getServerName());
          break;
        }
      }
      admin.move(RegionInfoBuilder.FIRST_META_REGIONINFO.getEncodedNameAsBytes(),destServerName);
      LOG.debug("Finished moving meta");
      RegionInfo region=table.getRegionLocator().getRegionLocation(row).getRegion();
      ServerName currentServer=cluster.getServerHoldingRegion(tn,region.getRegionName());
      for (      RegionServerThread rst : cluster.getLiveRegionServerThreads()) {
        ServerName name=rst.getRegionServer().getServerName();
        if (!name.equals(currentServer)) {
          destServerName=Bytes.toBytes(name.getServerName());
          break;
        }
      }
      admin.move(region.getEncodedNameAsBytes(),destServerName);
      LOG.debug("Finished moving user region");
      put=new Put(row);
      put.addColumn(family,qualifier,newVal);
      table.put(put);
      result=table.get(get);
      LOG.debug("Result: " + Bytes.toString(result.getValue(family,qualifier)));
      Assert.assertArrayEquals(newVal,result.getValue(family,qualifier));
    }
  finally {
      admin.close();
      table.close();
    }
  }
  @Test public void testMetaMoveDuringClientZkClusterRestart() throws Exception {
    TableName tn=TableName.valueOf(name.getMethodName());
    ClusterConnection conn=(ClusterConnection)TEST_UTIL.getConnection();
    Admin admin=conn.getAdmin();
    HTable table=(HTable)conn.getTable(tn);
    try {
      ColumnFamilyDescriptorBuilder cfDescBuilder=ColumnFamilyDescriptorBuilder.newBuilder(family);
      TableDescriptorBuilder tableDescBuilder=TableDescriptorBuilder.newBuilder(tn).setColumnFamily(cfDescBuilder.build());
      admin.createTable(tableDescBuilder.build());
      Put put=new Put(row);
      put.addColumn(family,qualifier,value);
      table.put(put);
      conn.clearRegionCache();
      clientZkCluster.shutdown();
      MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
      int metaServerId=cluster.getServerWithMeta();
      HRegionServer metaServer=cluster.getRegionServer(metaServerId);
      metaServer.stop("Stop current RS holding meta region");
      while (!metaServer.isShutDown()) {
        Thread.sleep(200);
      }
      AssignmentTestingUtil.waitForAssignment(cluster.getMaster().getAssignmentManager(),RegionInfoBuilder.FIRST_META_REGIONINFO);
      Thread.sleep(10000);
      clientZkCluster.startup(clientZkDir);
      Get get=new Get(row);
      Result result=table.get(get);
      LOG.debug("Result: " + Bytes.toString(result.getValue(family,qualifier)));
      Assert.assertArrayEquals(value,result.getValue(family,qualifier));
    }
  finally {
      admin.close();
      table.close();
    }
  }
  @Test public void testAsyncTable() throws Exception {
    TableName tn=TableName.valueOf(name.getMethodName());
    ColumnFamilyDescriptorBuilder cfDescBuilder=ColumnFamilyDescriptorBuilder.newBuilder(family);
    TableDescriptorBuilder tableDescBuilder=TableDescriptorBuilder.newBuilder(tn).setColumnFamily(cfDescBuilder.build());
    try (AsyncConnection ASYNC_CONN=ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get()){
      ASYNC_CONN.getAdmin().createTable(tableDescBuilder.build()).get();
      AsyncTable<?> table=ASYNC_CONN.getTable(tn);
      Put put=new Put(row);
      put.addColumn(family,qualifier,value);
      table.put(put).get();
      Get get=new Get(row);
      Result result=table.get(get).get();
      LOG.debug("Result: " + Bytes.toString(result.getValue(family,qualifier)));
      Assert.assertArrayEquals(value,result.getValue(family,qualifier));
    }
   }
}
