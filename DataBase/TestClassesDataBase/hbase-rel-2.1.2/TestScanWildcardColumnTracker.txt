@Category({RegionServerTests.class,SmallTests.class}) public class TestScanWildcardColumnTracker {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestScanWildcardColumnTracker.class);
  final static int VERSIONS=2;
  @Test public void testCheckColumnOk() throws IOException {
    ScanWildcardColumnTracker tracker=new ScanWildcardColumnTracker(0,VERSIONS,Long.MIN_VALUE,CellComparatorImpl.COMPARATOR);
    List<byte[]> qualifiers=new ArrayList<>(4);
    qualifiers.add(Bytes.toBytes("qualifier1"));
    qualifiers.add(Bytes.toBytes("qualifier2"));
    qualifiers.add(Bytes.toBytes("qualifier3"));
    qualifiers.add(Bytes.toBytes("qualifier4"));
    List<MatchCode> expected=new ArrayList<>(4);
    expected.add(ScanQueryMatcher.MatchCode.INCLUDE);
    expected.add(ScanQueryMatcher.MatchCode.INCLUDE);
    expected.add(ScanQueryMatcher.MatchCode.INCLUDE);
    expected.add(ScanQueryMatcher.MatchCode.INCLUDE);
    List<ScanQueryMatcher.MatchCode> actual=new ArrayList<>(qualifiers.size());
    for (    byte[] qualifier : qualifiers) {
      ScanQueryMatcher.MatchCode mc=ScanQueryMatcher.checkColumn(tracker,qualifier,0,qualifier.length,1,KeyValue.Type.Put.getCode(),false);
      actual.add(mc);
    }
    for (int i=0; i < expected.size(); i++) {
      assertEquals(expected.get(i),actual.get(i));
    }
  }
  @Test public void testCheckColumnEnforceVersions() throws IOException {
    ScanWildcardColumnTracker tracker=new ScanWildcardColumnTracker(0,VERSIONS,Long.MIN_VALUE,CellComparatorImpl.COMPARATOR);
    List<byte[]> qualifiers=new ArrayList<>(4);
    qualifiers.add(Bytes.toBytes("qualifier1"));
    qualifiers.add(Bytes.toBytes("qualifier1"));
    qualifiers.add(Bytes.toBytes("qualifier1"));
    qualifiers.add(Bytes.toBytes("qualifier2"));
    List<ScanQueryMatcher.MatchCode> expected=new ArrayList<>(4);
    expected.add(ScanQueryMatcher.MatchCode.INCLUDE);
    expected.add(ScanQueryMatcher.MatchCode.INCLUDE);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_COL);
    expected.add(ScanQueryMatcher.MatchCode.INCLUDE);
    List<MatchCode> actual=new ArrayList<>(qualifiers.size());
    long timestamp=0;
    for (    byte[] qualifier : qualifiers) {
      MatchCode mc=ScanQueryMatcher.checkColumn(tracker,qualifier,0,qualifier.length,++timestamp,KeyValue.Type.Put.getCode(),false);
      actual.add(mc);
    }
    for (int i=0; i < expected.size(); i++) {
      assertEquals(expected.get(i),actual.get(i));
    }
  }
  @Test public void DisabledTestCheckColumnWrongOrder(){
    ScanWildcardColumnTracker tracker=new ScanWildcardColumnTracker(0,VERSIONS,Long.MIN_VALUE,CellComparatorImpl.COMPARATOR);
    List<byte[]> qualifiers=new ArrayList<>(2);
    qualifiers.add(Bytes.toBytes("qualifier2"));
    qualifiers.add(Bytes.toBytes("qualifier1"));
    try {
      for (      byte[] qualifier : qualifiers) {
        ScanQueryMatcher.checkColumn(tracker,qualifier,0,qualifier.length,1,KeyValue.Type.Put.getCode(),false);
      }
      fail();
    }
 catch (    IOException e) {
    }
  }
}
