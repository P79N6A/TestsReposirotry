/** 
 * Abstraction to simplify the case where a test needs to verify a certain state on a  {@code SpaceQuotaSnapshot}. This class fails-fast when there is no such snapshot obtained from the Master. As such, it is not useful to verify the lack of a snapshot.
 */
static abstract class SpaceQuotaSnapshotPredicate implements Predicate<Exception> {
  private final Connection conn;
  private final TableName tn;
  private final String ns;
  SpaceQuotaSnapshotPredicate(  Connection conn,  TableName tn){
    this(Objects.requireNonNull(conn),Objects.requireNonNull(tn),null);
  }
  SpaceQuotaSnapshotPredicate(  Connection conn,  String ns){
    this(Objects.requireNonNull(conn),null,Objects.requireNonNull(ns));
  }
  SpaceQuotaSnapshotPredicate(  Connection conn,  TableName tn,  String ns){
    if ((null != tn && null != ns) || (null == tn && null == ns)) {
      throw new IllegalArgumentException("One of TableName and Namespace must be non-null, and the other null");
    }
    this.conn=conn;
    this.tn=tn;
    this.ns=ns;
  }
  @Override public boolean evaluate() throws Exception {
    SpaceQuotaSnapshot snapshot;
    if (null == ns) {
      snapshot=QuotaTableUtil.getCurrentSnapshot(conn,tn);
    }
 else {
      snapshot=QuotaTableUtil.getCurrentSnapshot(conn,ns);
    }
    LOG.debug("Saw quota snapshot for " + (null == tn ? ns : tn) + ": "+ snapshot);
    if (null == snapshot) {
      return false;
    }
    return evaluate(snapshot);
  }
  /** 
 * Must determine if the given  {@code SpaceQuotaSnapshot} meets some criteria.
 * @param snapshot a non-null snapshot obtained from the HBase Master
 * @return true if the criteria is met, false otherwise
 */
  abstract boolean evaluate(  SpaceQuotaSnapshot snapshot) throws Exception ;
}
