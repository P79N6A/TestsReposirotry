@Category({MiscTests.class,SmallTests.class}) public class TestConcatenatedLists {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestConcatenatedLists.class);
  @Test public void testUnsupportedOps(){
    ConcatenatedLists<Long> c=new ConcatenatedLists<>();
    c.addSublist(Arrays.asList(0L,1L));
    try {
      c.add(2L);
      fail("Should throw");
    }
 catch (    UnsupportedOperationException ex) {
    }
    try {
      c.addAll(Arrays.asList(2L,3L));
      fail("Should throw");
    }
 catch (    UnsupportedOperationException ex) {
    }
    try {
      c.remove(0L);
      fail("Should throw");
    }
 catch (    UnsupportedOperationException ex) {
    }
    try {
      c.removeAll(Arrays.asList(0L,1L));
      fail("Should throw");
    }
 catch (    UnsupportedOperationException ex) {
    }
    try {
      c.clear();
      fail("Should throw");
    }
 catch (    UnsupportedOperationException ex) {
    }
    try {
      c.retainAll(Arrays.asList(0L,2L));
      fail("Should throw");
    }
 catch (    UnsupportedOperationException ex) {
    }
    Iterator<Long> iter=c.iterator();
    iter.next();
    try {
      iter.remove();
      fail("Should throw");
    }
 catch (    UnsupportedOperationException ex) {
    }
  }
  @Test public void testEmpty(){
    verify(new ConcatenatedLists<>(),-1);
  }
  @Test public void testOneOne(){
    ConcatenatedLists<Long> c=new ConcatenatedLists<>();
    c.addSublist(Arrays.asList(0L));
    verify(c,0);
  }
  @Test public void testOneMany(){
    ConcatenatedLists<Long> c=new ConcatenatedLists<>();
    c.addSublist(Arrays.asList(0L,1L,2L));
    verify(c,2);
  }
  @Test @SuppressWarnings("unchecked") public void testManyOne(){
    ConcatenatedLists<Long> c=new ConcatenatedLists<>();
    c.addSublist(Arrays.asList(0L));
    c.addAllSublists(Arrays.asList(Arrays.asList(1L),Arrays.asList(2L)));
    verify(c,2);
  }
  @Test @SuppressWarnings("unchecked") public void testManyMany(){
    ConcatenatedLists<Long> c=new ConcatenatedLists<>();
    c.addAllSublists(Arrays.asList(Arrays.asList(0L,1L)));
    c.addSublist(Arrays.asList(2L,3L,4L));
    c.addAllSublists(Arrays.asList(Arrays.asList(5L),Arrays.asList(6L,7L)));
    verify(c,7);
  }
  @SuppressWarnings("ModifyingCollectionWithItself") @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="DMI_VACUOUS_SELF_COLLECTION_CALL",justification="Intended vacuous containsAll call on 'c'") private void verify(  ConcatenatedLists<Long> c,  int last){
    assertEquals((last == -1),c.isEmpty());
    assertEquals(last + 1,c.size());
    assertTrue(c.containsAll(c));
    Long[] array=c.toArray(new Long[c.size()]);
    List<Long> all=new ArrayList<>();
    Iterator<Long> iter=c.iterator();
    for (Long i=0L; i <= last; ++i) {
      assertTrue(iter.hasNext());
      assertEquals(i,iter.next());
      assertEquals(i,array[i.intValue()]);
      assertTrue(c.contains(i));
      assertTrue(c.containsAll(Arrays.asList(i)));
      all.add(i);
    }
    assertTrue(c.containsAll(all));
    assertFalse(iter.hasNext());
    try {
      iter.next();
      fail("Should have thrown");
    }
 catch (    NoSuchElementException nsee) {
    }
  }
}
