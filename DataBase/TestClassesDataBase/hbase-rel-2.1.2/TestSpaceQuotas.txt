/** 
 * End-to-end test class for filesystem space quotas.
 */
@Category(LargeTests.class) public class TestSpaceQuotas {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSpaceQuotas.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestSpaceQuotas.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final AtomicLong COUNTER=new AtomicLong(0);
  private static final int NUM_RETRIES=10;
  @Rule public TestName testName=new TestName();
  private SpaceQuotaHelperForTests helper;
  private final TableName NON_EXISTENT_TABLE=TableName.valueOf("NON_EXISTENT_TABLE");
  @BeforeClass public static void setUp() throws Exception {
    Configuration conf=TEST_UTIL.getConfiguration();
    SpaceQuotaHelperForTests.updateConfigForQuotas(conf);
    TEST_UTIL.startMiniCluster(1);
  }
  @AfterClass public static void tearDown() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Before public void removeAllQuotas() throws Exception {
    final Connection conn=TEST_UTIL.getConnection();
    if (helper == null) {
      helper=new SpaceQuotaHelperForTests(TEST_UTIL,testName,COUNTER);
    }
    if (!conn.getAdmin().tableExists(QuotaUtil.QUOTA_TABLE_NAME)) {
      helper.waitForQuotaTable(conn);
    }
 else {
      helper.removeAllQuotas(conn);
      assertEquals(0,helper.listNumDefinedQuotas(conn));
    }
  }
  @Test public void testNoInsertsWithPut() throws Exception {
    Put p=new Put(Bytes.toBytes("to_reject"));
    p.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("to"),Bytes.toBytes("reject"));
    writeUntilViolationAndVerifyViolation(SpaceViolationPolicy.NO_INSERTS,p);
  }
  @Test public void testNoInsertsWithAppend() throws Exception {
    Append a=new Append(Bytes.toBytes("to_reject"));
    a.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("to"),Bytes.toBytes("reject"));
    writeUntilViolationAndVerifyViolation(SpaceViolationPolicy.NO_INSERTS,a);
  }
  @Test public void testNoInsertsWithIncrement() throws Exception {
    Increment i=new Increment(Bytes.toBytes("to_reject"));
    i.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("count"),0);
    writeUntilViolationAndVerifyViolation(SpaceViolationPolicy.NO_INSERTS,i);
  }
  @Test public void testDeletesAfterNoInserts() throws Exception {
    final TableName tn=writeUntilViolation(SpaceViolationPolicy.NO_INSERTS);
    Delete d=new Delete(Bytes.toBytes("should_not_be_rejected"));
    for (int i=0; i < NUM_RETRIES; i++) {
      try (Table t=TEST_UTIL.getConnection().getTable(tn)){
        t.delete(d);
      }
     }
  }
  @Test public void testNoWritesWithPut() throws Exception {
    Put p=new Put(Bytes.toBytes("to_reject"));
    p.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("to"),Bytes.toBytes("reject"));
    writeUntilViolationAndVerifyViolation(SpaceViolationPolicy.NO_WRITES,p);
  }
  @Test public void testNoWritesWithAppend() throws Exception {
    Append a=new Append(Bytes.toBytes("to_reject"));
    a.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("to"),Bytes.toBytes("reject"));
    writeUntilViolationAndVerifyViolation(SpaceViolationPolicy.NO_WRITES,a);
  }
  @Test public void testNoWritesWithIncrement() throws Exception {
    Increment i=new Increment(Bytes.toBytes("to_reject"));
    i.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("count"),0);
    writeUntilViolationAndVerifyViolation(SpaceViolationPolicy.NO_WRITES,i);
  }
  @Test public void testNoWritesWithDelete() throws Exception {
    Delete d=new Delete(Bytes.toBytes("to_reject"));
    writeUntilViolationAndVerifyViolation(SpaceViolationPolicy.NO_WRITES,d);
  }
  @Test public void testNoCompactions() throws Exception {
    Put p=new Put(Bytes.toBytes("to_reject"));
    p.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("to"),Bytes.toBytes("reject"));
    final TableName tn=writeUntilViolationAndVerifyViolation(SpaceViolationPolicy.NO_WRITES_COMPACTIONS,p);
    try {
      TEST_UTIL.getAdmin().majorCompact(tn);
      fail("Expected that invoking the compaction should throw an Exception");
    }
 catch (    DoNotRetryIOException e) {
    }
    try {
      TEST_UTIL.getAdmin().compact(tn);
      fail("Expected that invoking the compaction should throw an Exception");
    }
 catch (    DoNotRetryIOException e) {
    }
  }
  @Test public void testNoEnableAfterDisablePolicy() throws Exception {
    Put p=new Put(Bytes.toBytes("to_reject"));
    p.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("to"),Bytes.toBytes("reject"));
    final TableName tn=writeUntilViolation(SpaceViolationPolicy.DISABLE);
    final Admin admin=TEST_UTIL.getAdmin();
    for (int i=0; i < NUM_RETRIES * 2; i++) {
      if (admin.isTableEnabled(tn)) {
        LOG.info(tn + " is still enabled, expecting it to be disabled. Will wait and re-check.");
        Thread.sleep(2000);
      }
    }
    assertFalse(tn + " is still enabled but it should be disabled",admin.isTableEnabled(tn));
    try {
      admin.enableTable(tn);
    }
 catch (    AccessDeniedException e) {
      String exceptionContents=StringUtils.stringifyException(e);
      final String expectedText="violated space quota";
      assertTrue("Expected the exception to contain " + expectedText + ", but was: "+ exceptionContents,exceptionContents.contains(expectedText));
    }
  }
  @Test public void testNoBulkLoadsWithNoWrites() throws Exception {
    Put p=new Put(Bytes.toBytes("to_reject"));
    p.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("to"),Bytes.toBytes("reject"));
    TableName tableName=writeUntilViolationAndVerifyViolation(SpaceViolationPolicy.NO_WRITES,p);
    ClientServiceCallable<Void> callable=generateFileToLoad(tableName,1,50);
    RpcRetryingCallerFactory factory=new RpcRetryingCallerFactory(TEST_UTIL.getConfiguration());
    RpcRetryingCaller<Void> caller=factory.<Void>newCaller();
    try {
      caller.callWithRetries(callable,Integer.MAX_VALUE);
      fail("Expected the bulk load call to fail!");
    }
 catch (    SpaceLimitingException e) {
      LOG.trace("Caught expected exception",e);
    }
  }
  @Test public void testAtomicBulkLoadUnderQuota() throws Exception {
    TableName tn=helper.createTableWithRegions(10);
    final long sizeLimit=50L * SpaceQuotaHelperForTests.ONE_KILOBYTE;
    QuotaSettings settings=QuotaSettingsFactory.limitTableSpace(tn,sizeLimit,SpaceViolationPolicy.NO_INSERTS);
    TEST_UTIL.getAdmin().setQuota(settings);
    HRegionServer rs=TEST_UTIL.getMiniHBaseCluster().getRegionServer(0);
    RegionServerSpaceQuotaManager spaceQuotaManager=rs.getRegionServerSpaceQuotaManager();
    Map<TableName,SpaceQuotaSnapshot> snapshots=spaceQuotaManager.copyQuotaSnapshots();
    Map<RegionInfo,Long> regionSizes=getReportedSizesForTable(tn);
    while (true) {
      SpaceQuotaSnapshot snapshot=snapshots.get(tn);
      if (snapshot != null && snapshot.getLimit() > 0) {
        break;
      }
      LOG.debug("Snapshot does not yet realize quota limit: " + snapshots + ", regionsizes: "+ regionSizes);
      Thread.sleep(3000);
      snapshots=spaceQuotaManager.copyQuotaSnapshots();
      regionSizes=getReportedSizesForTable(tn);
    }
    SpaceQuotaSnapshot snapshot=snapshots.get(tn);
    assertEquals(0L,snapshot.getUsage());
    assertEquals(sizeLimit,snapshot.getLimit());
    ActivePolicyEnforcement activePolicies=spaceQuotaManager.getActiveEnforcements();
    SpaceViolationPolicyEnforcement enforcement=activePolicies.getPolicyEnforcement(tn);
    assertTrue("Expected to find Noop policy, but got " + enforcement.getClass().getSimpleName(),enforcement instanceof DefaultViolationPolicyEnforcement);
    ClientServiceCallable<Void> callable=generateFileToLoad(tn,2,500);
    FileSystem fs=TEST_UTIL.getTestFileSystem();
    FileStatus[] files=fs.listStatus(new Path(fs.getHomeDirectory(),testName.getMethodName() + "_files"));
    for (    FileStatus file : files) {
      assertTrue("Expected the file, " + file.getPath() + ",  length to be larger than 25KB, but was "+ file.getLen(),file.getLen() > 25 * SpaceQuotaHelperForTests.ONE_KILOBYTE);
      LOG.debug(file.getPath() + " -> " + file.getLen()+ "B");
    }
    RpcRetryingCallerFactory factory=new RpcRetryingCallerFactory(TEST_UTIL.getConfiguration());
    RpcRetryingCaller<Void> caller=factory.<Void>newCaller();
    try {
      caller.callWithRetries(callable,Integer.MAX_VALUE);
      fail("Expected the bulk load call to fail!");
    }
 catch (    SpaceLimitingException e) {
      LOG.trace("Caught expected exception",e);
    }
    Table table=TEST_UTIL.getConnection().getTable(tn);
    ResultScanner scanner=table.getScanner(new Scan());
    try {
      assertNull("Expected no results",scanner.next());
    }
  finally {
      scanner.close();
    }
  }
  @Test public void testTableQuotaOverridesNamespaceQuota() throws Exception {
    final SpaceViolationPolicy policy=SpaceViolationPolicy.NO_INSERTS;
    final TableName tn=helper.createTableWithRegions(10);
    final long tableLimit=2L * SpaceQuotaHelperForTests.ONE_MEGABYTE;
    final long namespaceLimit=1024L * SpaceQuotaHelperForTests.ONE_MEGABYTE;
    TEST_UTIL.getAdmin().setQuota(QuotaSettingsFactory.limitTableSpace(tn,tableLimit,policy));
    TEST_UTIL.getAdmin().setQuota(QuotaSettingsFactory.limitNamespaceSpace(tn.getNamespaceAsString(),namespaceLimit,policy));
    helper.writeData(tn,3L * SpaceQuotaHelperForTests.ONE_MEGABYTE);
    Thread.sleep(5000);
    Put p=new Put(Bytes.toBytes("to_reject"));
    p.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("to"),Bytes.toBytes("reject"));
    verifyViolation(policy,tn,p);
  }
  @Test public void testSetQuotaAndThenRemoveWithNoInserts() throws Exception {
    setQuotaAndThenRemove(SpaceViolationPolicy.NO_INSERTS);
  }
  @Test public void testSetQuotaAndThenRemoveWithNoWrite() throws Exception {
    setQuotaAndThenRemove(SpaceViolationPolicy.NO_WRITES);
  }
  @Test public void testSetQuotaAndThenRemoveWithNoWritesCompactions() throws Exception {
    setQuotaAndThenRemove(SpaceViolationPolicy.NO_WRITES_COMPACTIONS);
  }
  @Test public void testSetQuotaAndThenRemoveWithDisable() throws Exception {
    setQuotaAndThenRemove(SpaceViolationPolicy.DISABLE);
  }
  @Test public void testSetQuotaAndThenDropTableWithNoInserts() throws Exception {
    setQuotaAndThenDropTable(SpaceViolationPolicy.NO_INSERTS);
  }
  @Test public void testSetQuotaAndThenDropTableWithNoWrite() throws Exception {
    setQuotaAndThenDropTable(SpaceViolationPolicy.NO_WRITES);
  }
  @Test public void testSetQuotaAndThenDropTableeWithNoWritesCompactions() throws Exception {
    setQuotaAndThenDropTable(SpaceViolationPolicy.NO_WRITES_COMPACTIONS);
  }
  @Test public void testSetQuotaAndThenDropTableWithDisable() throws Exception {
    setQuotaAndThenDropTable(SpaceViolationPolicy.DISABLE);
  }
  @Test public void testSetQuotaAndThenIncreaseQuotaWithNoInserts() throws Exception {
    setQuotaAndThenIncreaseQuota(SpaceViolationPolicy.NO_INSERTS);
  }
  @Test public void testSetQuotaAndThenIncreaseQuotaWithNoWrite() throws Exception {
    setQuotaAndThenIncreaseQuota(SpaceViolationPolicy.NO_WRITES);
  }
  @Test public void testSetQuotaAndThenIncreaseQuotaWithNoWritesCompactions() throws Exception {
    setQuotaAndThenIncreaseQuota(SpaceViolationPolicy.NO_WRITES_COMPACTIONS);
  }
  @Test public void testSetQuotaAndThenRemoveInOneWithNoInserts() throws Exception {
    setQuotaAndThenRemoveInOneAmongTwoTables(SpaceViolationPolicy.NO_INSERTS);
  }
  @Test public void testSetQuotaAndThenRemoveInOneWithNoWrite() throws Exception {
    setQuotaAndThenRemoveInOneAmongTwoTables(SpaceViolationPolicy.NO_WRITES);
  }
  @Test public void testSetQuotaAndThenRemoveInOneWithNoWritesCompaction() throws Exception {
    setQuotaAndThenRemoveInOneAmongTwoTables(SpaceViolationPolicy.NO_WRITES_COMPACTIONS);
  }
  @Test public void testSetQuotaAndThenRemoveInOneWithDisable() throws Exception {
    setQuotaAndThenRemoveInOneAmongTwoTables(SpaceViolationPolicy.DISABLE);
  }
  @Test public void testSetQuotaOnNonExistingTableWithNoInserts() throws Exception {
    setQuotaLimit(NON_EXISTENT_TABLE,SpaceViolationPolicy.NO_INSERTS,2L);
  }
  @Test public void testSetQuotaOnNonExistingTableWithNoWrites() throws Exception {
    setQuotaLimit(NON_EXISTENT_TABLE,SpaceViolationPolicy.NO_WRITES,2L);
  }
  @Test public void testSetQuotaOnNonExistingTableWithNoWritesCompaction() throws Exception {
    setQuotaLimit(NON_EXISTENT_TABLE,SpaceViolationPolicy.NO_WRITES_COMPACTIONS,2L);
  }
  @Test public void testSetQuotaOnNonExistingTableWithDisable() throws Exception {
    setQuotaLimit(NON_EXISTENT_TABLE,SpaceViolationPolicy.DISABLE,2L);
  }
  private void setQuotaAndThenRemove(  SpaceViolationPolicy policy) throws Exception {
    Put put=new Put(Bytes.toBytes("to_reject"));
    put.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("to"),Bytes.toBytes("reject"));
    final TableName tn=writeUntilViolationAndVerifyViolation(policy,put);
    removeQuotaFromtable(tn);
    verifyNoViolation(policy,tn,put);
  }
  private void setQuotaAndThenDropTable(  SpaceViolationPolicy policy) throws Exception {
    Put put=new Put(Bytes.toBytes("to_reject"));
    put.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("to"),Bytes.toBytes("reject"));
    final TableName tn=writeUntilViolationAndVerifyViolation(policy,put);
    TEST_UTIL.deleteTable(tn);
    LOG.debug("Successfully deleted table ",tn);
    TEST_UTIL.createTable(tn,Bytes.toBytes(SpaceQuotaHelperForTests.F1));
    LOG.debug("Successfully re-created table ",tn);
    verifyNoViolation(policy,tn,put);
  }
  private void setQuotaAndThenIncreaseQuota(  SpaceViolationPolicy policy) throws Exception {
    Put put=new Put(Bytes.toBytes("to_reject"));
    put.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("to"),Bytes.toBytes("reject"));
    final TableName tn=writeUntilViolationAndVerifyViolation(policy,put);
    setQuotaLimit(tn,policy,4L);
    verifyNoViolation(policy,tn,put);
  }
  public void setQuotaAndThenRemoveInOneAmongTwoTables(  SpaceViolationPolicy policy) throws Exception {
    Put put=new Put(Bytes.toBytes("to_reject"));
    put.addColumn(Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("to"),Bytes.toBytes("reject"));
    final TableName tn1=writeUntilViolationAndVerifyViolation(policy,put);
    final TableName tn2=writeUntilViolationAndVerifyViolation(policy,put);
    removeQuotaFromtable(tn1);
    verifyNoViolation(policy,tn1,put);
    verifyViolation(policy,tn2,put);
  }
  private void removeQuotaFromtable(  final TableName tn) throws Exception {
    QuotaSettings removeQuota=QuotaSettingsFactory.removeTableSpaceLimit(tn);
    TEST_UTIL.getAdmin().setQuota(removeQuota);
    LOG.debug("Space quota settings removed from the table ",tn);
  }
  private void setQuotaLimit(  final TableName tn,  SpaceViolationPolicy policy,  long sizeInMBs) throws Exception {
    final long sizeLimit=sizeInMBs * SpaceQuotaHelperForTests.ONE_MEGABYTE;
    QuotaSettings settings=QuotaSettingsFactory.limitTableSpace(tn,sizeLimit,policy);
    TEST_UTIL.getAdmin().setQuota(settings);
    LOG.debug("Quota limit set for table = {}, limit = {}",tn,sizeLimit);
  }
  private Map<RegionInfo,Long> getReportedSizesForTable(  TableName tn){
    HMaster master=TEST_UTIL.getMiniHBaseCluster().getMaster();
    MasterQuotaManager quotaManager=master.getMasterQuotaManager();
    Map<RegionInfo,Long> filteredRegionSizes=new HashMap<>();
    for (    Entry<RegionInfo,Long> entry : quotaManager.snapshotRegionSizes().entrySet()) {
      if (entry.getKey().getTable().equals(tn)) {
        filteredRegionSizes.put(entry.getKey(),entry.getValue());
      }
    }
    return filteredRegionSizes;
  }
  private TableName writeUntilViolation(  SpaceViolationPolicy policyToViolate) throws Exception {
    TableName tn=helper.createTableWithRegions(10);
    setQuotaLimit(tn,policyToViolate,2L);
    helper.writeData(tn,3L * SpaceQuotaHelperForTests.ONE_MEGABYTE);
    Thread.sleep(5000);
    return tn;
  }
  private TableName writeUntilViolationAndVerifyViolation(  SpaceViolationPolicy policyToViolate,  Mutation m) throws Exception {
    final TableName tn=writeUntilViolation(policyToViolate);
    verifyViolation(policyToViolate,tn,m);
    return tn;
  }
  private void verifyViolation(  SpaceViolationPolicy policyToViolate,  TableName tn,  Mutation m) throws Exception {
    boolean sawError=false;
    for (int i=0; i < NUM_RETRIES && !sawError; i++) {
      try (Table table=TEST_UTIL.getConnection().getTable(tn)){
        if (m instanceof Put) {
          table.put((Put)m);
        }
 else         if (m instanceof Delete) {
          table.delete((Delete)m);
        }
 else         if (m instanceof Append) {
          table.append((Append)m);
        }
 else         if (m instanceof Increment) {
          table.increment((Increment)m);
        }
 else {
          fail("Failed to apply " + m.getClass().getSimpleName() + " to the table. Programming error");
        }
        LOG.info("Did not reject the " + m.getClass().getSimpleName() + ", will sleep and retry");
        Thread.sleep(2000);
      }
 catch (      Exception e) {
        String msg=StringUtils.stringifyException(e);
        if (policyToViolate.equals(SpaceViolationPolicy.DISABLE)) {
          assertTrue(e instanceof TableNotEnabledException);
        }
 else {
          assertTrue("Expected exception message to contain the word '" + policyToViolate.name() + "', but was "+ msg,msg.contains(policyToViolate.name()));
        }
        sawError=true;
      }
    }
    if (!sawError) {
      try (Table quotaTable=TEST_UTIL.getConnection().getTable(QuotaUtil.QUOTA_TABLE_NAME)){
        ResultScanner scanner=quotaTable.getScanner(new Scan());
        Result result=null;
        LOG.info("Dumping contents of hbase:quota table");
        while ((result=scanner.next()) != null) {
          LOG.info(Bytes.toString(result.getRow()) + " => " + result.toString());
        }
        scanner.close();
      }
     }
    assertTrue("Expected to see an exception writing data to a table exceeding its quota",sawError);
  }
  private ClientServiceCallable<Void> generateFileToLoad(  TableName tn,  int numFiles,  int numRowsPerFile) throws Exception {
    Connection conn=TEST_UTIL.getConnection();
    FileSystem fs=TEST_UTIL.getTestFileSystem();
    Configuration conf=TEST_UTIL.getConfiguration();
    Path baseDir=new Path(fs.getHomeDirectory(),testName.getMethodName() + "_files");
    fs.mkdirs(baseDir);
    final List<Pair<byte[],String>> famPaths=new ArrayList<Pair<byte[],String>>();
    for (int i=1; i <= numFiles; i++) {
      Path hfile=new Path(baseDir,"file" + i);
      TestHRegionServerBulkLoad.createHFile(fs,hfile,Bytes.toBytes(SpaceQuotaHelperForTests.F1),Bytes.toBytes("to"),Bytes.toBytes("reject"),numRowsPerFile);
      famPaths.add(new Pair<>(Bytes.toBytes(SpaceQuotaHelperForTests.F1),hfile.toString()));
    }
    Table table=conn.getTable(tn);
    final String bulkToken=new SecureBulkLoadClient(conf,table).prepareBulkLoad(conn);
    return new ClientServiceCallable<Void>(conn,tn,Bytes.toBytes("row"),new RpcControllerFactory(conf).newController(),HConstants.PRIORITY_UNSET){
      @Override public Void rpcCall() throws Exception {
        SecureBulkLoadClient secureClient=null;
        byte[] regionName=getLocation().getRegionInfo().getRegionName();
        try (Table table=conn.getTable(getTableName())){
          secureClient=new SecureBulkLoadClient(conf,table);
          secureClient.secureBulkLoadHFiles(getStub(),famPaths,regionName,true,null,bulkToken);
        }
         return null;
      }
    }
;
  }
  private void verifyNoViolation(  SpaceViolationPolicy policyToViolate,  TableName tn,  Mutation m) throws Exception {
    boolean sawSuccess=false;
    for (int i=0; i < NUM_RETRIES && !sawSuccess; i++) {
      try (Table table=TEST_UTIL.getConnection().getTable(tn)){
        if (m instanceof Put) {
          table.put((Put)m);
        }
 else         if (m instanceof Delete) {
          table.delete((Delete)m);
        }
 else         if (m instanceof Append) {
          table.append((Append)m);
        }
 else         if (m instanceof Increment) {
          table.increment((Increment)m);
        }
 else {
          fail("Failed to apply " + m.getClass().getSimpleName() + " to the table. Programming error");
        }
        sawSuccess=true;
      }
 catch (      Exception e) {
        LOG.info("Rejected the " + m.getClass().getSimpleName() + ", will sleep and retry");
        Thread.sleep(2000);
      }
    }
    if (!sawSuccess) {
      try (Table quotaTable=TEST_UTIL.getConnection().getTable(QuotaUtil.QUOTA_TABLE_NAME)){
        ResultScanner scanner=quotaTable.getScanner(new Scan());
        Result result=null;
        LOG.info("Dumping contents of hbase:quota table");
        while ((result=scanner.next()) != null) {
          LOG.info(Bytes.toString(result.getRow()) + " => " + result.toString());
        }
        scanner.close();
      }
     }
    assertTrue("Expected to succeed in writing data to a table not having quota ",sawSuccess);
  }
}
