/** 
 * Tests  {@link RemoteAdmin} retries.
 */
@Category({RestTests.class,SmallTests.class}) public class TestRemoteAdminRetries {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRemoteAdminRetries.class);
  private static final int SLEEP_TIME=50;
  private static final int RETRIES=3;
  private static final long MAX_TIME=SLEEP_TIME * (RETRIES - 1);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private RemoteAdmin remoteAdmin;
  private Client client;
  @Before public void setup() throws Exception {
    client=mock(Client.class);
    Response response=new Response(509);
    when(client.get(anyString(),anyString())).thenReturn(response);
    when(client.delete(anyString())).thenReturn(response);
    when(client.put(anyString(),anyString(),any())).thenReturn(response);
    when(client.post(anyString(),anyString(),any())).thenReturn(response);
    Configuration configuration=TEST_UTIL.getConfiguration();
    configuration.setInt("hbase.rest.client.max.retries",RETRIES);
    configuration.setInt("hbase.rest.client.sleep",SLEEP_TIME);
    remoteAdmin=new RemoteAdmin(client,TEST_UTIL.getConfiguration(),"MyTable");
  }
  @Test public void testFailingGetRestVersion() throws Exception {
    testTimedOutGetCall(new CallExecutor(){
      @Override public void run() throws Exception {
        remoteAdmin.getRestVersion();
      }
    }
);
  }
  @Test public void testFailingGetClusterStatus() throws Exception {
    testTimedOutGetCall(new CallExecutor(){
      @Override public void run() throws Exception {
        remoteAdmin.getClusterStatus();
      }
    }
);
  }
  @Test public void testFailingGetClusterVersion() throws Exception {
    testTimedOutGetCall(new CallExecutor(){
      @Override public void run() throws Exception {
        remoteAdmin.getClusterVersion();
      }
    }
);
  }
  @Test public void testFailingGetTableAvailable() throws Exception {
    testTimedOutCall(new CallExecutor(){
      @Override public void run() throws Exception {
        remoteAdmin.isTableAvailable(Bytes.toBytes("TestTable"));
      }
    }
);
  }
  @Test @SuppressWarnings("deprecation") public void testFailingCreateTable() throws Exception {
    testTimedOutCall(new CallExecutor(){
      @Override public void run() throws Exception {
        remoteAdmin.createTable(new HTableDescriptor(TableName.valueOf("TestTable")));
      }
    }
);
    verify(client,times(RETRIES)).put(anyString(),anyString(),any());
  }
  @Test public void testFailingDeleteTable() throws Exception {
    testTimedOutCall(new CallExecutor(){
      @Override public void run() throws Exception {
        remoteAdmin.deleteTable("TestTable");
      }
    }
);
    verify(client,times(RETRIES)).delete(anyString());
  }
  @Test public void testFailingGetTableList() throws Exception {
    testTimedOutGetCall(new CallExecutor(){
      @Override public void run() throws Exception {
        remoteAdmin.getTableList();
      }
    }
);
  }
  private void testTimedOutGetCall(  CallExecutor callExecutor) throws Exception {
    testTimedOutCall(callExecutor);
    verify(client,times(RETRIES)).get(anyString(),anyString());
  }
  private void testTimedOutCall(  CallExecutor callExecutor) throws Exception {
    long start=System.currentTimeMillis();
    try {
      callExecutor.run();
      fail("should be timeout exception!");
    }
 catch (    IOException e) {
      assertTrue(Pattern.matches(".*MyTable.*timed out",e.toString()));
    }
    assertTrue((System.currentTimeMillis() - start) > MAX_TIME);
  }
private static interface CallExecutor {
    void run() throws Exception ;
  }
}
