/** 
 * Tests RegionReplicaReplicationEndpoint. Unlike TestRegionReplicaReplicationEndpoint this class contains lower level tests using callables.
 */
@Category({ReplicationTests.class,MediumTests.class}) public class TestRegionReplicaReplicationEndpointNoMaster {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRegionReplicaReplicationEndpointNoMaster.class);
  private static final int NB_SERVERS=2;
  private static TableName tableName=TableName.valueOf(TestRegionReplicaReplicationEndpointNoMaster.class.getSimpleName());
  private static Table table;
  private static final byte[] row="TestRegionReplicaReplicator".getBytes();
  private static HRegionServer rs0;
  private static HRegionServer rs1;
  private static HRegionInfo hriPrimary;
  private static HRegionInfo hriSecondary;
  private static final HBaseTestingUtility HTU=new HBaseTestingUtility();
  private static final byte[] f=HConstants.CATALOG_FAMILY;
  @BeforeClass public static void beforeClass() throws Exception {
    Configuration conf=HTU.getConfiguration();
    conf.setBoolean(ServerRegionReplicaUtil.REGION_REPLICA_REPLICATION_CONF_KEY,true);
    conf.setBoolean(ServerRegionReplicaUtil.REGION_REPLICA_WAIT_FOR_PRIMARY_FLUSH_CONF_KEY,false);
    String walCoprocs=HTU.getConfiguration().get(CoprocessorHost.WAL_COPROCESSOR_CONF_KEY);
    if (walCoprocs == null) {
      walCoprocs=WALEditCopro.class.getName();
    }
 else {
      walCoprocs+="," + WALEditCopro.class.getName();
    }
    HTU.getConfiguration().set(CoprocessorHost.WAL_COPROCESSOR_CONF_KEY,walCoprocs);
    HTU.startMiniCluster(NB_SERVERS);
    HTableDescriptor htd=HTU.createTableDescriptor(tableName.getNameAsString());
    table=HTU.createTable(htd,new byte[][]{f},null);
    try (RegionLocator locator=HTU.getConnection().getRegionLocator(tableName)){
      hriPrimary=locator.getRegionLocation(row,false).getRegionInfo();
    }
     hriSecondary=new HRegionInfo(hriPrimary.getTable(),hriPrimary.getStartKey(),hriPrimary.getEndKey(),hriPrimary.isSplit(),hriPrimary.getRegionId(),1);
    TestRegionServerNoMaster.stopMasterAndAssignMeta(HTU);
    rs0=HTU.getMiniHBaseCluster().getRegionServer(0);
    rs1=HTU.getMiniHBaseCluster().getRegionServer(1);
  }
  @AfterClass public static void afterClass() throws Exception {
    table.close();
    HTU.shutdownMiniCluster();
  }
  @Before public void before() throws Exception {
    entries.clear();
  }
  @After public void after() throws Exception {
  }
  static ConcurrentLinkedQueue<Entry> entries=new ConcurrentLinkedQueue<>();
public static class WALEditCopro implements WALCoprocessor, WALObserver {
    public WALEditCopro(){
      entries.clear();
    }
    @Override public Optional<WALObserver> getWALObserver(){
      return Optional.of(this);
    }
    @Override public void postWALWrite(    ObserverContext<? extends WALCoprocessorEnvironment> ctx,    RegionInfo info,    WALKey logKey,    WALEdit logEdit) throws IOException {
      if (logKey.getTableName().equals(tableName) && info.getReplicaId() == 0) {
        entries.add(new Entry((WALKeyImpl)logKey,logEdit));
      }
    }
  }
  @Test public void testReplayCallable() throws Exception {
    openRegion(HTU,rs0,hriSecondary);
    ClusterConnection connection=(ClusterConnection)ConnectionFactory.createConnection(HTU.getConfiguration());
    HTU.loadNumericRows(table,f,0,1000);
    Assert.assertEquals(1000,entries.size());
    replicateUsingCallable(connection,entries);
    Region region=rs0.getRegion(hriSecondary.getEncodedName());
    HTU.verifyNumericRows(region,f,0,1000);
    HTU.deleteNumericRows(table,f,0,1000);
    closeRegion(HTU,rs0,hriSecondary);
    connection.close();
  }
  private void replicateUsingCallable(  ClusterConnection connection,  Queue<Entry> entries) throws IOException, RuntimeException {
    Entry entry;
    while ((entry=entries.poll()) != null) {
      byte[] row=CellUtil.cloneRow(entry.getEdit().getCells().get(0));
      RegionLocations locations=connection.locateRegion(tableName,row,true,true);
      RegionReplicaReplayCallable callable=new RegionReplicaReplayCallable(connection,RpcControllerFactory.instantiate(connection.getConfiguration()),table.getName(),locations.getRegionLocation(1),locations.getRegionLocation(1).getRegionInfo(),row,Lists.newArrayList(entry),new AtomicLong());
      RpcRetryingCallerFactory factory=RpcRetryingCallerFactory.instantiate(connection.getConfiguration());
      factory.<ReplicateWALEntryResponse>newCaller().callWithRetries(callable,10000);
    }
  }
  @Test public void testReplayCallableWithRegionMove() throws Exception {
    openRegion(HTU,rs0,hriSecondary);
    ClusterConnection connection=(ClusterConnection)ConnectionFactory.createConnection(HTU.getConfiguration());
    HTU.loadNumericRows(table,f,0,1000);
    Assert.assertEquals(1000,entries.size());
    replicateUsingCallable(connection,entries);
    Region region=rs0.getRegion(hriSecondary.getEncodedName());
    HTU.verifyNumericRows(region,f,0,1000);
    HTU.loadNumericRows(table,f,1000,2000);
    closeRegion(HTU,rs0,hriSecondary);
    openRegion(HTU,rs1,hriSecondary);
    replicateUsingCallable(connection,entries);
    region=rs1.getRegion(hriSecondary.getEncodedName());
    HTU.verifyNumericRows(region,f,1000,2000);
    HTU.deleteNumericRows(table,f,0,2000);
    closeRegion(HTU,rs1,hriSecondary);
    connection.close();
  }
  @Test public void testRegionReplicaReplicationEndpointReplicate() throws Exception {
    openRegion(HTU,rs0,hriSecondary);
    ClusterConnection connection=(ClusterConnection)ConnectionFactory.createConnection(HTU.getConfiguration());
    RegionReplicaReplicationEndpoint replicator=new RegionReplicaReplicationEndpoint();
    ReplicationEndpoint.Context context=mock(ReplicationEndpoint.Context.class);
    when(context.getConfiguration()).thenReturn(HTU.getConfiguration());
    when(context.getMetrics()).thenReturn(mock(MetricsSource.class));
    replicator.init(context);
    replicator.startAsync();
    HTU.loadNumericRows(table,f,0,1000);
    Assert.assertEquals(1000,entries.size());
    final String fakeWalGroupId="fakeWALGroup";
    replicator.replicate(new ReplicateContext().setEntries(Lists.newArrayList(entries)).setWalGroupId(fakeWalGroupId));
    Region region=rs0.getRegion(hriSecondary.getEncodedName());
    HTU.verifyNumericRows(region,f,0,1000);
    HTU.deleteNumericRows(table,f,0,1000);
    closeRegion(HTU,rs0,hriSecondary);
    connection.close();
  }
}
