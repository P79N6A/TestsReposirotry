private class BlockReaderThread implements Callable<Boolean> {
  private final String clientId;
  private final HFileBlock.FSReader hbr;
  private final List<Long> offsets;
  private final List<BlockType> types;
  private final long fileSize;
  public BlockReaderThread(  String clientId,  HFileBlock.FSReader hbr,  List<Long> offsets,  List<BlockType> types,  long fileSize){
    this.clientId=clientId;
    this.offsets=offsets;
    this.hbr=hbr;
    this.types=types;
    this.fileSize=fileSize;
  }
  @Override public Boolean call() throws Exception {
    Random rand=new Random(clientId.hashCode());
    long endTime=System.currentTimeMillis() + 10000;
    int numBlocksRead=0;
    int numPositionalRead=0;
    int numWithOnDiskSize=0;
    while (System.currentTimeMillis() < endTime) {
      int blockId=rand.nextInt(NUM_TEST_BLOCKS);
      long offset=offsets.get(blockId);
      boolean pread=true;
      boolean withOnDiskSize=rand.nextBoolean();
      long expectedSize=(blockId == NUM_TEST_BLOCKS - 1 ? fileSize : offsets.get(blockId + 1)) - offset;
      HFileBlock b;
      try {
        long onDiskSizeArg=withOnDiskSize ? expectedSize : -1;
        b=hbr.readBlockData(offset,onDiskSizeArg,pread,false);
      }
 catch (      IOException ex) {
        LOG.error("Error in client " + clientId + " trying to read block at "+ offset+ ", pread="+ pread+ ", withOnDiskSize="+ withOnDiskSize,ex);
        return false;
      }
      assertEquals(types.get(blockId),b.getBlockType());
      assertEquals(expectedSize,b.getOnDiskSizeWithHeader());
      assertEquals(offset,b.getOffset());
      ++numBlocksRead;
      if (pread)       ++numPositionalRead;
      if (withOnDiskSize)       ++numWithOnDiskSize;
    }
    LOG.info("Client " + clientId + " successfully read "+ numBlocksRead+ " blocks (with pread: "+ numPositionalRead+ ", with onDiskSize "+ "specified: "+ numWithOnDiskSize+ ")");
    return true;
  }
}
