/** 
 * Test Minimum Versions feature (HBASE-4071).
 */
@Category({RegionServerTests.class,SmallTests.class}) public class TestMinVersions {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMinVersions.class);
  HBaseTestingUtility hbu=HBaseTestingUtility.createLocalHTU();
  private final byte[] T0=Bytes.toBytes("0");
  private final byte[] T1=Bytes.toBytes("1");
  private final byte[] T2=Bytes.toBytes("2");
  private final byte[] T3=Bytes.toBytes("3");
  private final byte[] T4=Bytes.toBytes("4");
  private final byte[] T5=Bytes.toBytes("5");
  private final byte[] c0=COLUMNS[0];
  @Rule public TestName name=new TestName();
  /** 
 * Verify behavior of getClosestBefore(...)
 */
  @Test public void testGetClosestBefore() throws Exception {
    HTableDescriptor htd=hbu.createTableDescriptor(name.getMethodName(),1,1000,1,KeepDeletedCells.FALSE);
    HRegion region=hbu.createLocalHRegion(htd,null,null);
    try {
      long ts=EnvironmentEdgeManager.currentTime() - 2000;
      Put p=new Put(T1,ts);
      p.addColumn(c0,c0,T1);
      region.put(p);
      p=new Put(T1,ts + 1);
      p.addColumn(c0,c0,T4);
      region.put(p);
      p=new Put(T3,ts);
      p.addColumn(c0,c0,T3);
      region.put(p);
      Result r=hbu.getClosestRowBefore(region,T1,c0);
      checkResult(r,c0,T4);
      r=hbu.getClosestRowBefore(region,T2,c0);
      checkResult(r,c0,T4);
      region.flush(true);
      region.compact(true);
      r=hbu.getClosestRowBefore(region,T1,c0);
      checkResult(r,c0,T4);
      r=hbu.getClosestRowBefore(region,T2,c0);
      checkResult(r,c0,T4);
    }
  finally {
      HBaseTestingUtility.closeRegionAndWAL(region);
    }
  }
  /** 
 * Test mixed memstore and storefile scanning with minimum versions.
 */
  @Test public void testStoreMemStore() throws Exception {
    HTableDescriptor htd=hbu.createTableDescriptor(name.getMethodName(),3,1000,1,KeepDeletedCells.FALSE);
    HRegion region=hbu.createLocalHRegion(htd,null,null);
    long ts=EnvironmentEdgeManager.currentTime() - 2000;
    try {
      Put p=new Put(T1,ts - 1);
      p.addColumn(c0,c0,T2);
      region.put(p);
      p=new Put(T1,ts - 3);
      p.addColumn(c0,c0,T0);
      region.put(p);
      region.flush(true);
      region.compact(true);
      p=new Put(T1,ts);
      p.addColumn(c0,c0,T3);
      region.put(p);
      p=new Put(T1,ts - 2);
      p.addColumn(c0,c0,T1);
      region.put(p);
      p=new Put(T1,ts - 3);
      p.addColumn(c0,c0,T0);
      region.put(p);
      Get g=new Get(T1);
      g.setMaxVersions();
      Result r=region.get(g);
      checkResult(r,c0,T3,T2,T1);
      g=new Get(T1);
      g.setMaxVersions();
      g.addColumn(c0,c0);
      r=region.get(g);
      checkResult(r,c0,T3,T2,T1);
    }
  finally {
      HBaseTestingUtility.closeRegionAndWAL(region);
    }
  }
  /** 
 * Make sure the Deletes behave as expected with minimum versions
 */
  @Test public void testDelete() throws Exception {
    HTableDescriptor htd=hbu.createTableDescriptor(name.getMethodName(),3,1000,1,KeepDeletedCells.FALSE);
    HRegion region=hbu.createLocalHRegion(htd,null,null);
    long ts=EnvironmentEdgeManager.currentTime() - 2000;
    try {
      Put p=new Put(T1,ts - 2);
      p.addColumn(c0,c0,T1);
      region.put(p);
      p=new Put(T1,ts - 1);
      p.addColumn(c0,c0,T2);
      region.put(p);
      p=new Put(T1,ts);
      p.addColumn(c0,c0,T3);
      region.put(p);
      Delete d=new Delete(T1,ts - 1);
      region.delete(d);
      Get g=new Get(T1);
      g.setMaxVersions();
      Result r=region.get(g);
      checkResult(r,c0,T3);
      g=new Get(T1);
      g.setMaxVersions();
      g.addColumn(c0,c0);
      r=region.get(g);
      checkResult(r,c0,T3);
      region.flush(true);
      region.compact(true);
      g=new Get(T1);
      g.setMaxVersions();
      r=region.get(g);
      checkResult(r,c0,T3);
      g=new Get(T1);
      g.setMaxVersions();
      g.addColumn(c0,c0);
      r=region.get(g);
      checkResult(r,c0,T3);
    }
  finally {
      HBaseTestingUtility.closeRegionAndWAL(region);
    }
  }
  /** 
 * Make sure the memstor behaves correctly with minimum versions
 */
  @Test public void testMemStore() throws Exception {
    HTableDescriptor htd=hbu.createTableDescriptor(name.getMethodName(),2,1000,1,KeepDeletedCells.FALSE);
    HRegion region=hbu.createLocalHRegion(htd,null,null);
    long ts=EnvironmentEdgeManager.currentTime() - 2000;
    try {
      Put p=new Put(T1,ts - 2);
      p.addColumn(c0,c0,T2);
      region.put(p);
      p=new Put(T1,ts - 1);
      p.addColumn(c0,c0,T3);
      region.put(p);
      p=new Put(T1,ts);
      p.addColumn(c0,c0,T4);
      region.put(p);
      region.flush(true);
      region.compact(true);
      p=new Put(T1,ts - 3);
      p.addColumn(c0,c0,T1);
      region.put(p);
      Result r=region.get(new Get(T1));
      checkResult(r,c0,T4);
      Get g=new Get(T1);
      g.setMaxVersions();
      r=region.get(g);
      checkResult(r,c0,T4,T3);
      g=new Get(T1);
      g.setMaxVersions();
      g.addColumn(c0,c0);
      r=region.get(g);
      checkResult(r,c0,T4,T3);
      p=new Put(T1,ts + 1);
      p.addColumn(c0,c0,T5);
      region.put(p);
      g=new Get(T1);
      g.setMaxVersions();
      r=region.get(g);
      checkResult(r,c0,T5,T4);
      g=new Get(T1);
      g.setMaxVersions();
      g.addColumn(c0,c0);
      r=region.get(g);
      checkResult(r,c0,T5,T4);
    }
  finally {
      HBaseTestingUtility.closeRegionAndWAL(region);
    }
  }
  /** 
 * Verify basic minimum versions functionality
 */
  @Test public void testBaseCase() throws Exception {
    HTableDescriptor htd=hbu.createTableDescriptor(name.getMethodName(),2,1000,1,KeepDeletedCells.FALSE);
    HRegion region=hbu.createLocalHRegion(htd,null,null);
    try {
      long ts=EnvironmentEdgeManager.currentTime() - 2000;
      Put p=new Put(T1,ts - 3);
      p.addColumn(c0,c0,T1);
      region.put(p);
      p=new Put(T1,ts - 2);
      p.addColumn(c0,c0,T2);
      region.put(p);
      p=new Put(T1,ts - 1);
      p.addColumn(c0,c0,T3);
      region.put(p);
      p=new Put(T1,ts);
      p.addColumn(c0,c0,T4);
      region.put(p);
      Result r=region.get(new Get(T1));
      checkResult(r,c0,T4);
      Get g=new Get(T1);
      g.setTimeRange(0L,ts + 1);
      r=region.get(g);
      checkResult(r,c0,T4);
      g.setTimeRange(0L,ts - 2);
      r=region.get(g);
      checkResult(r,c0,T1);
      g=new Get(T1);
      g.setMaxVersions();
      r=region.get(g);
      checkResult(r,c0,T4,T3);
      g=new Get(T1);
      g.setMaxVersions();
      g.addColumn(c0,c0);
      r=region.get(g);
      checkResult(r,c0,T4,T3);
      region.flush(true);
      g=new Get(T1);
      g.setTimeRange(0L,ts - 2);
      r=region.get(g);
      assertTrue(r.isEmpty());
      region.compact(true);
      g=new Get(T1);
      g.setTimeRange(0L,ts + 1);
      r=region.get(g);
      checkResult(r,c0,T4);
      g.setTimeRange(0L,ts);
      r=region.get(g);
      checkResult(r,c0,T3);
      g.setTimeRange(0L,ts - 1);
      r=region.get(g);
      assertTrue(r.isEmpty());
    }
  finally {
      HBaseTestingUtility.closeRegionAndWAL(region);
    }
  }
  /** 
 * Verify that basic filters still behave correctly with minimum versions enabled.
 */
  @Test public void testFilters() throws Exception {
    HTableDescriptor htd=hbu.createTableDescriptor(name.getMethodName(),2,1000,1,KeepDeletedCells.FALSE);
    HRegion region=hbu.createLocalHRegion(htd,null,null);
    final byte[] c1=COLUMNS[1];
    long ts=EnvironmentEdgeManager.currentTime() - 2000;
    try {
      Put p=new Put(T1,ts - 3);
      p.addColumn(c0,c0,T0);
      p.addColumn(c1,c1,T0);
      region.put(p);
      p=new Put(T1,ts - 2);
      p.addColumn(c0,c0,T1);
      p.addColumn(c1,c1,T1);
      region.put(p);
      p=new Put(T1,ts - 1);
      p.addColumn(c0,c0,T2);
      p.addColumn(c1,c1,T2);
      region.put(p);
      p=new Put(T1,ts);
      p.addColumn(c0,c0,T3);
      p.addColumn(c1,c1,T3);
      region.put(p);
      List<Long> tss=new ArrayList<>();
      tss.add(ts - 1);
      tss.add(ts - 2);
      Get g=new Get(T1);
      g.addColumn(c1,c1);
      g.setFilter(new TimestampsFilter(tss));
      g.setMaxVersions();
      Result r=region.get(g);
      checkResult(r,c1,T2);
      g=new Get(T1);
      g.addColumn(c0,c0);
      g.setFilter(new TimestampsFilter(tss));
      g.setMaxVersions();
      r=region.get(g);
      checkResult(r,c0,T2);
      region.flush(true);
      region.compact(true);
      g=new Get(T1);
      g.addColumn(c1,c1);
      g.setFilter(new TimestampsFilter(tss));
      g.setMaxVersions();
      r=region.get(g);
      checkResult(r,c1,T2);
      g=new Get(T1);
      g.addColumn(c0,c0);
      g.setFilter(new TimestampsFilter(tss));
      g.setMaxVersions();
      r=region.get(g);
      checkResult(r,c0,T2);
    }
  finally {
      HBaseTestingUtility.closeRegionAndWAL(region);
    }
  }
  private void checkResult(  Result r,  byte[] col,  byte[]... vals){
    assertEquals(r.size(),vals.length);
    List<Cell> kvs=r.getColumnCells(col,col);
    assertEquals(kvs.size(),vals.length);
    for (int i=0; i < vals.length; i++) {
      assertTrue(CellUtil.matchingValue(kvs.get(i),vals[i]));
    }
  }
}
