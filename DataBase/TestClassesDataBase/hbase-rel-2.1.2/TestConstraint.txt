/** 
 * Do the complex testing of constraints against a minicluster
 */
@Category({MiscTests.class,MediumTests.class}) public class TestConstraint {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestConstraint.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestConstraint.class);
  private static HBaseTestingUtility util;
  private static final TableName tableName=TableName.valueOf("test");
  private static final byte[] dummy=Bytes.toBytes("dummy");
  private static final byte[] row1=Bytes.toBytes("r1");
  private static final byte[] test=Bytes.toBytes("test");
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    util=new HBaseTestingUtility();
    util.getConfiguration().setBoolean(CoprocessorHost.ABORT_ON_ERROR_KEY,false);
    util.startMiniCluster();
  }
  /** 
 * Test that we run a passing constraint
 * @throws Exception
 */
  @SuppressWarnings("unchecked") @Test public void testConstraintPasses() throws Exception {
    HTableDescriptor desc=new HTableDescriptor(tableName);
    for (    byte[] family : new byte[][]{dummy,test}) {
      desc.addFamily(new HColumnDescriptor(family));
    }
    Constraints.add(desc,CheckWasRunConstraint.class);
    util.getAdmin().createTable(desc);
    Table table=util.getConnection().getTable(tableName);
    try {
      Put put=new Put(row1);
      byte[] value=Bytes.toBytes(Integer.toString(10));
      byte[] qualifier=new byte[0];
      put.addColumn(dummy,qualifier,value);
      table.put(put);
    }
  finally {
      table.close();
    }
    assertTrue(CheckWasRunConstraint.wasRun);
  }
  /** 
 * Test that constraints will fail properly
 * @throws Exception
 */
  @SuppressWarnings("unchecked") @Test public void testConstraintFails() throws Exception {
    HTableDescriptor desc=new HTableDescriptor(tableName);
    for (    byte[] family : new byte[][]{dummy,test}) {
      desc.addFamily(new HColumnDescriptor(family));
    }
    Constraints.add(desc,AllFailConstraint.class);
    util.getAdmin().createTable(desc);
    Table table=util.getConnection().getTable(tableName);
    Put put=new Put(row1);
    byte[] qualifier=new byte[0];
    put.addColumn(dummy,qualifier,Bytes.toBytes("fail"));
    LOG.warn("Doing put in table");
    try {
      table.put(put);
      fail("This put should not have suceeded - AllFailConstraint was not run!");
    }
 catch (    ConstraintException e) {
    }
    table.close();
  }
  /** 
 * Check that if we just disable one constraint, then
 * @throws Throwable
 */
  @SuppressWarnings("unchecked") @Test public void testDisableConstraint() throws Throwable {
    HTableDescriptor desc=new HTableDescriptor(tableName);
    for (    byte[] family : new byte[][]{dummy,test}) {
      desc.addFamily(new HColumnDescriptor(family));
    }
    Constraints.add(desc,CheckWasRunConstraint.class);
    Constraints.add(desc,AllFailConstraint.class);
    Constraints.disableConstraint(desc,AllFailConstraint.class);
    util.getAdmin().createTable(desc);
    Table table=util.getConnection().getTable(tableName);
    try {
      Put put=new Put(row1);
      byte[] qualifier=new byte[0];
      put.addColumn(dummy,qualifier,Bytes.toBytes("pass"));
      table.put(put);
    }
  finally {
      table.close();
    }
    assertTrue(CheckWasRunConstraint.wasRun);
  }
  /** 
 * Test that if we disable all constraints, then nothing gets run
 * @throws Throwable
 */
  @SuppressWarnings("unchecked") @Test public void testDisableConstraints() throws Throwable {
    HTableDescriptor desc=new HTableDescriptor(tableName);
    for (    byte[] family : new byte[][]{dummy,test}) {
      desc.addFamily(new HColumnDescriptor(family));
    }
    Constraints.add(desc,CheckWasRunConstraint.class);
    Constraints.disable(desc);
    util.getAdmin().createTable(desc);
    Table table=util.getConnection().getTable(tableName);
    try {
      Put put=new Put(row1);
      byte[] qualifier=new byte[0];
      put.addColumn(dummy,qualifier,Bytes.toBytes("pass"));
      LOG.warn("Doing put in table");
      table.put(put);
    }
  finally {
      table.close();
    }
    assertFalse(CheckWasRunConstraint.wasRun);
  }
  /** 
 * Check to make sure a constraint is unloaded when it fails
 * @throws Exception
 */
  @Test public void testIsUnloaded() throws Exception {
    HTableDescriptor desc=new HTableDescriptor(tableName);
    for (    byte[] family : new byte[][]{dummy,test}) {
      desc.addFamily(new HColumnDescriptor(family));
    }
    Constraints.add(desc,RuntimeFailConstraint.class);
    Constraints.add(desc,CheckWasRunConstraint.class);
    CheckWasRunConstraint.wasRun=false;
    util.getAdmin().createTable(desc);
    Table table=util.getConnection().getTable(tableName);
    Put put=new Put(row1);
    byte[] qualifier=new byte[0];
    put.addColumn(dummy,qualifier,Bytes.toBytes("pass"));
    try {
      table.put(put);
      fail("RuntimeFailConstraint wasn't triggered - this put shouldn't work!");
    }
 catch (    Exception e) {
    }
    table.put(put);
    assertFalse(CheckWasRunConstraint.wasRun);
    table.close();
  }
  @After public void cleanup() throws Exception {
    CheckWasRunConstraint.wasRun=false;
    util.getAdmin().disableTable(tableName);
    util.getAdmin().deleteTable(tableName);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    util.shutdownMiniCluster();
  }
  /** 
 * Constraint to check that it was actually run (or not)
 */
public static class CheckWasRunConstraint extends BaseConstraint {
    public static boolean wasRun=false;
    @Override public void check(    Put p){
      wasRun=true;
    }
  }
}
