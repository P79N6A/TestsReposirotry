@Category({SecurityTests.class,MediumTests.class}) public class TestVisibilityLabelsWithDefaultVisLabelService extends TestVisibilityLabels {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestVisibilityLabelsWithDefaultVisLabelService.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestVisibilityLabelsWithDefaultVisLabelService.class);
  @BeforeClass public static void setupBeforeClass() throws Exception {
    conf=TEST_UTIL.getConfiguration();
    VisibilityTestUtil.enableVisiblityLabels(conf);
    conf.setClass(VisibilityUtils.VISIBILITY_LABEL_GENERATOR_CLASS,SimpleScanLabelGenerator.class,ScanLabelGenerator.class);
    conf.set("hbase.superuser","admin");
    TEST_UTIL.startMiniCluster(2);
    SUPERUSER=User.createUserForTesting(conf,"admin",new String[]{"supergroup"});
    USER1=User.createUserForTesting(conf,"user1",new String[]{});
    TEST_UTIL.waitTableEnabled(LABELS_TABLE_NAME.getName(),50000);
    addLabels();
  }
  @Test public void testAddLabels() throws Throwable {
    PrivilegedExceptionAction<VisibilityLabelsResponse> action=new PrivilegedExceptionAction<VisibilityLabelsResponse>(){
      @Override public VisibilityLabelsResponse run() throws Exception {
        String[] labels={"L1",SECRET,"L2","invalid~","L3"};
        VisibilityLabelsResponse response=null;
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          response=VisibilityClient.addLabels(conn,labels);
        }
 catch (        Throwable e) {
          fail("Should not have thrown exception");
        }
        List<RegionActionResult> resultList=response.getResultList();
        assertEquals(5,resultList.size());
        assertTrue(resultList.get(0).getException().getValue().isEmpty());
        assertEquals("org.apache.hadoop.hbase.DoNotRetryIOException",resultList.get(1).getException().getName());
        assertTrue(Bytes.toString(resultList.get(1).getException().getValue().toByteArray()).contains("org.apache.hadoop.hbase.security.visibility.LabelAlreadyExistsException: " + "Label 'secret' already exists"));
        assertTrue(resultList.get(2).getException().getValue().isEmpty());
        assertTrue(resultList.get(3).getException().getValue().isEmpty());
        assertTrue(resultList.get(4).getException().getValue().isEmpty());
        return null;
      }
    }
;
    SUPERUSER.runAs(action);
  }
  @Test public void testAddVisibilityLabelsOnRSRestart() throws Exception {
    List<RegionServerThread> regionServerThreads=TEST_UTIL.getHBaseCluster().getRegionServerThreads();
    for (    RegionServerThread rsThread : regionServerThreads) {
      rsThread.getRegionServer().abort("Aborting ");
    }
    RegionServerThread rs=TEST_UTIL.getHBaseCluster().startRegionServer();
    waitForLabelsRegionAvailability(rs.getRegionServer());
    final AtomicBoolean vcInitialized=new AtomicBoolean(true);
    do {
      PrivilegedExceptionAction<VisibilityLabelsResponse> action=new PrivilegedExceptionAction<VisibilityLabelsResponse>(){
        @Override public VisibilityLabelsResponse run() throws Exception {
          String[] labels={SECRET,CONFIDENTIAL,PRIVATE,"ABC","XYZ"};
          try (Connection conn=ConnectionFactory.createConnection(conf)){
            VisibilityLabelsResponse resp=VisibilityClient.addLabels(conn,labels);
            List<RegionActionResult> results=resp.getResultList();
            if (results.get(0).hasException()) {
              NameBytesPair pair=results.get(0).getException();
              Throwable t=ProtobufUtil.toException(pair);
              LOG.debug("Got exception writing labels",t);
              if (t instanceof VisibilityControllerNotReadyException) {
                vcInitialized.set(false);
                LOG.warn("VisibilityController was not yet initialized");
                Threads.sleep(10);
              }
 else {
                vcInitialized.set(true);
              }
            }
 else             LOG.debug("new labels added: " + resp);
          }
 catch (          Throwable t) {
            throw new IOException(t);
          }
          return null;
        }
      }
;
      SUPERUSER.runAs(action);
    }
 while (!vcInitialized.get());
    Scan s=new Scan();
    s.setAuthorizations(new Authorizations(VisibilityUtils.SYSTEM_LABEL));
    int i=0;
    try (Table ht=TEST_UTIL.getConnection().getTable(LABELS_TABLE_NAME);ResultScanner scanner=ht.getScanner(s)){
      while (true) {
        Result next=scanner.next();
        if (next == null) {
          break;
        }
        i++;
      }
    }
     Assert.assertEquals("The count should be 13",13,i);
  }
  @Test public void testListLabels() throws Throwable {
    PrivilegedExceptionAction<ListLabelsResponse> action=new PrivilegedExceptionAction<ListLabelsResponse>(){
      @Override public ListLabelsResponse run() throws Exception {
        ListLabelsResponse response=null;
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          response=VisibilityClient.listLabels(conn,null);
        }
 catch (        Throwable e) {
          fail("Should not have thrown exception");
        }
        List<ByteString> labels=response.getLabelList();
        assertEquals(12,labels.size());
        assertTrue(labels.contains(ByteString.copyFrom(SECRET.getBytes())));
        assertTrue(labels.contains(ByteString.copyFrom(TOPSECRET.getBytes())));
        assertTrue(labels.contains(ByteString.copyFrom(CONFIDENTIAL.getBytes())));
        assertTrue(labels.contains(ByteString.copyFrom("ABC".getBytes())));
        assertTrue(labels.contains(ByteString.copyFrom("XYZ".getBytes())));
        assertFalse(labels.contains(ByteString.copyFrom(SYSTEM_LABEL.getBytes())));
        return null;
      }
    }
;
    SUPERUSER.runAs(action);
  }
  @Test public void testListLabelsWithRegEx() throws Throwable {
    PrivilegedExceptionAction<ListLabelsResponse> action=new PrivilegedExceptionAction<ListLabelsResponse>(){
      @Override public ListLabelsResponse run() throws Exception {
        ListLabelsResponse response=null;
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          response=VisibilityClient.listLabels(conn,".*secret");
        }
 catch (        Throwable e) {
          fail("Should not have thrown exception");
        }
        List<ByteString> labels=response.getLabelList();
        assertEquals(2,labels.size());
        assertTrue(labels.contains(ByteString.copyFrom(SECRET.getBytes())));
        assertTrue(labels.contains(ByteString.copyFrom(TOPSECRET.getBytes())));
        return null;
      }
    }
;
    SUPERUSER.runAs(action);
  }
  @Test public void testVisibilityLabelsOnWALReplay() throws Exception {
    final TableName tableName=TableName.valueOf(TEST_NAME.getMethodName());
    try (Table table=createTableAndWriteDataWithLabels(tableName,"(" + SECRET + "|"+ CONFIDENTIAL+ ")",PRIVATE)){
      List<RegionServerThread> regionServerThreads=TEST_UTIL.getHBaseCluster().getRegionServerThreads();
      for (      RegionServerThread rsThread : regionServerThreads) {
        rsThread.getRegionServer().abort("Aborting ");
      }
      RegionServerThread rs=TEST_UTIL.getHBaseCluster().startRegionServer();
      waitForLabelsRegionAvailability(rs.getRegionServer());
      Scan s=new Scan();
      s.setAuthorizations(new Authorizations(SECRET));
      ResultScanner scanner=table.getScanner(s);
      Result[] next=scanner.next(3);
      assertTrue(next.length == 1);
    }
   }
}
