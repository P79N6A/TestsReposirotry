@Category({MapReduceTests.class,SmallTests.class}) public class TestGroupingTableMapper {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestGroupingTableMapper.class);
  /** 
 * Test GroupingTableMapper class
 */
  @Test public void testGroupingTableMapper() throws Exception {
    GroupingTableMapper mapper=new GroupingTableMapper();
    Configuration configuration=new Configuration();
    configuration.set(GroupingTableMapper.GROUP_COLUMNS,"family1:clm family2:clm");
    mapper.setConf(configuration);
    Result result=mock(Result.class);
    @SuppressWarnings("unchecked") Mapper<ImmutableBytesWritable,Result,ImmutableBytesWritable,Result>.Context context=mock(Mapper.Context.class);
    context.write(any(),any());
    List<Cell> keyValue=new ArrayList<>();
    byte[] row={};
    keyValue.add(new KeyValue(row,Bytes.toBytes("family2"),Bytes.toBytes("clm"),Bytes.toBytes("value1")));
    keyValue.add(new KeyValue(row,Bytes.toBytes("family1"),Bytes.toBytes("clm"),Bytes.toBytes("value2")));
    when(result.listCells()).thenReturn(keyValue);
    mapper.map(null,result,context);
    byte[][] data={Bytes.toBytes("value1"),Bytes.toBytes("value2")};
    ImmutableBytesWritable ibw=mapper.createGroupKey(data);
    verify(context).write(ibw,result);
  }
}
