@Category(SmallTests.class) public class TestMetricRegistryImpl {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMetricRegistryImpl.class);
  private MetricRegistryInfo info;
  private MetricRegistryImpl registry;
  @Before public void setUp(){
    info=new MetricRegistryInfo("foo","bar","baz","foobar",false);
    registry=new MetricRegistryImpl(info);
  }
  @Test public void testCounter(){
    Counter counter=registry.counter("mycounter");
    assertNotNull(counter);
    counter.increment(42L);
    Optional<Metric> metric=registry.get("mycounter");
    assertTrue(metric.isPresent());
    assertEquals(42L,(long)((Counter)metric.get()).getCount());
  }
  @Test public void testRegisterGauge(){
    registry.register("mygauge",new Gauge<Long>(){
      @Override public Long getValue(){
        return 42L;
      }
    }
);
    Optional<Metric> metric=registry.get("mygauge");
    assertTrue(metric.isPresent());
    assertEquals(42L,(long)((Gauge<Long>)metric.get()).getValue());
  }
  @Test public void testRegisterGaugeLambda(){
    registry.register("gaugeLambda",() -> 42L);
    Optional<Metric> metric=registry.get("gaugeLambda");
    assertTrue(metric.isPresent());
    assertEquals(42L,(long)((Gauge<Long>)metric.get()).getValue());
  }
  @Test public void testTimer(){
    Timer timer=registry.timer("mytimer");
    assertNotNull(timer);
    timer.updateNanos(100);
  }
  @Test public void testMeter(){
    Meter meter=registry.meter("mymeter");
    assertNotNull(meter);
    meter.mark();
  }
  @Test public void testRegister(){
    CounterImpl counter=new CounterImpl();
    registry.register("mycounter",counter);
    counter.increment(42L);
    Optional<Metric> metric=registry.get("mycounter");
    assertTrue(metric.isPresent());
    assertEquals(42L,(long)((Counter)metric.get()).getCount());
  }
  @Test public void testDoubleRegister(){
    Gauge g1=registry.register("mygauge",() -> 42L);
    Gauge g2=registry.register("mygauge",() -> 52L);
    assertEquals(g1,g2);
    Optional<Metric> metric=registry.get("mygauge");
    assertTrue(metric.isPresent());
    assertEquals(42L,(long)((Gauge<Long>)metric.get()).getValue());
    Counter c1=registry.counter("mycounter");
    Counter c2=registry.counter("mycounter");
    assertEquals(c1,c2);
  }
  @Test public void testGetMetrics(){
    CounterImpl counter=new CounterImpl();
    registry.register("mycounter",counter);
    Gauge gauge=registry.register("mygauge",() -> 42L);
    Timer timer=registry.timer("mytimer");
    Map<String,Metric> metrics=registry.getMetrics();
    assertEquals(3,metrics.size());
    assertEquals(counter,metrics.get("mycounter"));
    assertEquals(gauge,metrics.get("mygauge"));
    assertEquals(timer,metrics.get("mytimer"));
  }
}
