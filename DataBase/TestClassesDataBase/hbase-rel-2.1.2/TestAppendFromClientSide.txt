/** 
 * Run Append tests that use the HBase clients;
 */
@Category(LargeTests.class) public class TestAppendFromClientSide {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAppendFromClientSide.class);
  protected final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static byte[] ROW=Bytes.toBytes("testRow");
  private static byte[] FAMILY=Bytes.toBytes("testFamily");
  private static byte[] QUALIFIER=Bytes.toBytes("testQualifier");
  @Rule public TestName name=new TestName();
  @BeforeClass public static void beforeClass() throws Exception {
    Configuration conf=TEST_UTIL.getConfiguration();
    TEST_UTIL.startMiniCluster(3);
  }
  /** 
 * @throws java.lang.Exception
 */
  @AfterClass public static void afterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testAppendWithCustomTimestamp() throws IOException {
    TableName TABLENAME=TableName.valueOf(name.getMethodName());
    Table table=TEST_UTIL.createTable(TABLENAME,FAMILY);
    long timestamp=999;
    Append append=new Append(ROW);
    append.add(CellUtil.createCell(ROW,FAMILY,QUALIFIER,timestamp,KeyValue.Type.Put.getCode(),Bytes.toBytes(100L)));
    Result r=table.append(append);
    assertEquals(1,r.size());
    assertEquals(timestamp,r.rawCells()[0].getTimestamp());
    r=table.get(new Get(ROW));
    assertEquals(1,r.size());
    assertEquals(timestamp,r.rawCells()[0].getTimestamp());
    r=table.append(append);
    assertEquals(1,r.size());
    assertNotEquals(timestamp,r.rawCells()[0].getTimestamp());
    r=table.get(new Get(ROW));
    assertEquals(1,r.size());
    assertNotEquals(timestamp,r.rawCells()[0].getTimestamp());
  }
}
