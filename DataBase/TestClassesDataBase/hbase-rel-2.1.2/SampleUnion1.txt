/** 
 * An example <code>Union</code>
 */
private static class SampleUnion1 extends Union2<Integer,String> {
  private static final byte IS_INTEGER=0x00;
  private static final byte IS_STRING=0x01;
  public SampleUnion1(){
    super(new RawInteger(),new RawStringTerminated(Order.DESCENDING,"."));
  }
  @Override public int skip(  PositionedByteRange src){
switch (src.get()) {
case IS_INTEGER:
      return 1 + typeA.skip(src);
case IS_STRING:
    return 1 + typeB.skip(src);
default :
  throw new IllegalArgumentException("Unrecognized encoding format.");
}
}
@Override public Object decode(PositionedByteRange src){
switch (src.get()) {
case IS_INTEGER:
return typeA.decode(src);
case IS_STRING:
return typeB.decode(src);
default :
throw new IllegalArgumentException("Unrecognized encoding format.");
}
}
@Override public int encodedLength(Object val){
Integer i=null;
String s=null;
try {
i=(Integer)val;
}
 catch (ClassCastException e) {
}
try {
s=(String)val;
}
 catch (ClassCastException e) {
}
if (null != i) return 1 + typeA.encodedLength(i);
if (null != s) return 1 + typeB.encodedLength(s);
throw new IllegalArgumentException("val is not a valid member of this union.");
}
@Override public int encode(PositionedByteRange dst,Object val){
Integer i=null;
String s=null;
try {
i=(Integer)val;
}
 catch (ClassCastException e) {
}
try {
s=(String)val;
}
 catch (ClassCastException e) {
}
if (null != i) {
dst.put(IS_INTEGER);
return 1 + typeA.encode(dst,i);
}
 else if (null != s) {
dst.put(IS_STRING);
return 1 + typeB.encode(dst,s);
}
 else throw new IllegalArgumentException("val is not of a supported type.");
}
}
