@Category({ClientTests.class,SmallTests.class}) public class TestImmutableHTableDescriptor {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestImmutableHTableDescriptor.class);
  @Rule public TestName name=new TestName();
  private static final List<Consumer<ImmutableHTableDescriptor>> TEST_FUNCTION=Arrays.asList(htd -> htd.setValue("a","a"),htd -> htd.setValue(Bytes.toBytes("a"),Bytes.toBytes("a")),htd -> htd.setValue(new Bytes(Bytes.toBytes("a")),new Bytes(Bytes.toBytes("a"))),htd -> htd.setCompactionEnabled(false),htd -> htd.setConfiguration("aaa","ccc"),htd -> htd.setDurability(Durability.USE_DEFAULT),htd -> htd.setFlushPolicyClassName("class"),htd -> htd.setMaxFileSize(123),htd -> htd.setMemStoreFlushSize(123123123),htd -> htd.setNormalizationEnabled(false),htd -> htd.setPriority(123),htd -> htd.setReadOnly(true),htd -> htd.setRegionMemstoreReplication(true),htd -> htd.setRegionReplication(123),htd -> htd.setRegionSplitPolicyClassName("class"),htd -> htd.addFamily(new HColumnDescriptor(Bytes.toBytes("fm"))),htd -> htd.remove(new Bytes(Bytes.toBytes("aaa"))),htd -> htd.remove("aaa"),htd -> htd.remove(Bytes.toBytes("aaa")),htd -> htd.removeConfiguration("xxx"),htd -> htd.removeFamily(Bytes.toBytes("fm")),htd -> {
    try {
      htd.addCoprocessor("xxx");
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
);
  @Test public void testImmutable(){
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    ImmutableHTableDescriptor immutableHtd=new ImmutableHTableDescriptor(htd);
    TEST_FUNCTION.forEach(f -> {
      try {
        f.accept(immutableHtd);
        fail("ImmutableHTableDescriptor can't be modified!!!");
      }
 catch (      UnsupportedOperationException e) {
      }
    }
);
  }
  @Test public void testImmutableHColumnDescriptor(){
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    htd.addFamily(new HColumnDescriptor(Bytes.toBytes("family")));
    ImmutableHTableDescriptor immutableHtd=new ImmutableHTableDescriptor(htd);
    for (    HColumnDescriptor hcd : immutableHtd.getColumnFamilies()) {
      assertReadOnly(hcd);
    }
    for (    HColumnDescriptor hcd : immutableHtd.getFamilies()) {
      assertReadOnly(hcd);
    }
  }
  private void assertReadOnly(  HColumnDescriptor hcd){
    try {
      hcd.setBlocksize(10);
      fail("ImmutableHColumnDescriptor can't be modified!!!");
    }
 catch (    UnsupportedOperationException e) {
    }
  }
  @Test public void testClassMethodsAreBuilderStyle(){
    BuilderStyleTest.assertClassesAreBuilderStyle(ImmutableHTableDescriptor.class);
  }
}
