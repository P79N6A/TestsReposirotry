@Category({MediumTests.class,RegionServerTests.class}) public class TestRegionOpen {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRegionOpen.class);
  @SuppressWarnings("unused") private static final Logger LOG=LoggerFactory.getLogger(TestRegionOpen.class);
  private static final int NB_SERVERS=1;
  private static final HBaseTestingUtility HTU=new HBaseTestingUtility();
  @Rule public TestName name=new TestName();
  @BeforeClass public static void before() throws Exception {
    HTU.startMiniCluster(NB_SERVERS);
  }
  @AfterClass public static void afterClass() throws Exception {
    HTU.shutdownMiniCluster();
  }
  private static HRegionServer getRS(){
    return HTU.getHBaseCluster().getLiveRegionServerThreads().get(0).getRegionServer();
  }
  @Test public void testPriorityRegionIsOpenedWithSeparateThreadPool() throws Exception {
    final TableName tableName=TableName.valueOf(TestRegionOpen.class.getSimpleName());
    ThreadPoolExecutor exec=getRS().getExecutorService().getExecutorThreadPool(ExecutorType.RS_OPEN_PRIORITY_REGION);
    long completed=exec.getCompletedTaskCount();
    HTableDescriptor htd=new HTableDescriptor(tableName);
    htd.setPriority(HConstants.HIGH_QOS);
    htd.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
    try (Connection connection=ConnectionFactory.createConnection(HTU.getConfiguration());Admin admin=connection.getAdmin()){
      admin.createTable(htd);
    }
     assertEquals(completed + 1,exec.getCompletedTaskCount());
  }
  @Test public void testNonExistentRegionReplica() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final byte[] FAMILYNAME=Bytes.toBytes("fam");
    FileSystem fs=HTU.getTestFileSystem();
    Admin admin=HTU.getAdmin();
    Configuration conf=HTU.getConfiguration();
    Path rootDir=HTU.getDataTestDirOnTestFS();
    HTableDescriptor htd=new HTableDescriptor(tableName);
    htd.addFamily(new HColumnDescriptor(FAMILYNAME));
    admin.createTable(htd);
    HTU.waitUntilNoRegionsInTransition(60000);
    HRegionInfo hri=new HRegionInfo(htd.getTableName(),Bytes.toBytes("A"),Bytes.toBytes("B"),false,System.currentTimeMillis(),2);
    HRegionFileSystem regionFs=HRegionFileSystem.createRegionOnFileSystem(conf,fs,FSUtils.getTableDir(rootDir,hri.getTable()),hri);
    Path regionDir=regionFs.getRegionDir();
    try {
      HRegionFileSystem.loadRegionInfoFileContent(fs,regionDir);
    }
 catch (    IOException e) {
      LOG.info("Caught expected IOE due missing .regioninfo file, due: " + e.getMessage() + " skipping region open.");
      List<HRegionInfo> regions=admin.getTableRegions(tableName);
      LOG.info("Regions: " + regions);
      if (regions.size() != 1) {
        fail("Table " + tableName + " should have only one region, but got more: "+ regions);
      }
      return;
    }
    fail("Should have thrown IOE when attempting to open a non-existing region.");
  }
}
