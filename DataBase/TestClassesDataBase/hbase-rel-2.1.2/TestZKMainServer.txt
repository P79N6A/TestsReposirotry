@Category({ZKTests.class,SmallTests.class}) public class TestZKMainServer {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestZKMainServer.class);
protected static class ExitException extends SecurityException {
    private static final long serialVersionUID=1L;
    private final int status;
    public ExitException(    int status){
      super("There is no escape!");
      this.status=status;
    }
  }
private static class NoExitSecurityManager extends SecurityManager {
    @Override public void checkPermission(    Permission perm){
    }
    @Override public void checkPermission(    Permission perm,    Object context){
    }
    @Override public void checkExit(    int status){
      super.checkExit(status);
      throw new ExitException(status);
    }
  }
  /** 
 * We need delete of a znode to work at least.
 */
  @Test public void testCommandLineWorks() throws Exception {
    System.setSecurityManager(new NoExitSecurityManager());
    HBaseZKTestingUtility htu=new HBaseZKTestingUtility();
    htu.getConfiguration().setInt(HConstants.ZK_SESSION_TIMEOUT,30000);
    htu.startMiniZKCluster();
    try {
      ZKWatcher zkw=htu.getZooKeeperWatcher();
      String znode="/testCommandLineWorks";
      ZKUtil.createWithParents(zkw,znode,HConstants.EMPTY_BYTE_ARRAY);
      ZKUtil.checkExists(zkw,znode);
      boolean exception=false;
      try {
        ZKMainServer.main(new String[]{"-server","localhost:" + htu.getZkCluster().getClientPort(),"delete",znode});
      }
 catch (      ExitException ee) {
        exception=true;
      }
      assertTrue(exception);
      assertEquals(-1,ZKUtil.checkExists(zkw,znode));
    }
  finally {
      htu.shutdownMiniZKCluster();
      System.setSecurityManager(null);
    }
  }
  @Test public void testHostPortParse(){
    ZKMainServer parser=new ZKMainServer();
    Configuration c=HBaseConfiguration.create();
    assertEquals("localhost:" + c.get(HConstants.ZOOKEEPER_CLIENT_PORT),parser.parse(c));
    final String port="1234";
    c.set(HConstants.ZOOKEEPER_CLIENT_PORT,port);
    c.set("hbase.zookeeper.quorum","example.com");
    assertEquals("example.com:" + port,parser.parse(c));
    c.set("hbase.zookeeper.quorum","example1.com,example2.com,example3.com");
    String ensemble=parser.parse(c);
    assertTrue(port,ensemble.matches("(example[1-3]\\.com:1234,){2}example[1-3]\\.com:" + port));
    c.set("hbase.zookeeper.quorum","example1.com:5678,example2.com:9012,example3.com:3456");
    ensemble=parser.parse(c);
    assertEquals(ensemble,"example1.com:5678,example2.com:9012,example3.com:3456");
    c.set("hbase.zookeeper.quorum","example1.com:5678,example2.com:9012,example3.com");
    ensemble=parser.parse(c);
    assertEquals(ensemble,"example1.com:5678,example2.com:9012,example3.com:" + port);
  }
}
