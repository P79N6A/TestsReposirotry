/** 
 * Test case for the MemoryBoundedLogMessageBuffer utility. Ensures that it uses no more memory than it's supposed to, and that it properly deals with multibyte encodings.
 */
@Category({MiscTests.class,SmallTests.class}) public class TestMemoryBoundedLogMessageBuffer {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMemoryBoundedLogMessageBuffer.class);
  private static final long TEN_KB=10 * 1024;
  private static final String JP_TEXT="こんにちは";
  @Test public void testBuffer(){
    MemoryBoundedLogMessageBuffer buf=new MemoryBoundedLogMessageBuffer(TEN_KB);
    for (int i=0; i < 1000; i++) {
      buf.add("hello " + i);
    }
    assertTrue("Usage too big: " + buf.estimateHeapUsage(),buf.estimateHeapUsage() < TEN_KB);
    assertTrue("Too many retained: " + buf.getMessages().size(),buf.getMessages().size() < 100);
    StringWriter sw=new StringWriter();
    buf.dumpTo(new PrintWriter(sw));
    String dump=sw.toString();
    String eol=System.getProperty("line.separator");
    assertFalse("The early log messages should be evicted",dump.contains("hello 1" + eol));
    assertTrue("The late log messages should be retained",dump.contains("hello 999" + eol));
  }
  @Test public void testNonAsciiEncoding(){
    MemoryBoundedLogMessageBuffer buf=new MemoryBoundedLogMessageBuffer(TEN_KB);
    buf.add(JP_TEXT);
    StringWriter sw=new StringWriter();
    buf.dumpTo(new PrintWriter(sw));
    String dump=sw.toString();
    assertTrue(dump.contains(JP_TEXT));
  }
}
