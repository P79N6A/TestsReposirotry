/** 
 * Performs authorization checks for rsgroup operations, according to different levels of authorized users.
 */
@Category({SecurityTests.class,MediumTests.class}) public class TestRSGroupsWithACL extends SecureTestUtil {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRSGroupsWithACL.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestRSGroupsWithACL.class);
  private static TableName TEST_TABLE=TableName.valueOf("testtable1");
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static Configuration conf;
  private static Connection systemUserConnection;
  private static User SUPERUSER;
  private static User USER_ADMIN;
  private static User USER_RW;
  private static User USER_RO;
  private static User USER_OWNER;
  private static User USER_CREATE;
  private static User USER_NONE;
  private static final String GROUP_ADMIN="group_admin";
  private static final String GROUP_CREATE="group_create";
  private static final String GROUP_READ="group_read";
  private static final String GROUP_WRITE="group_write";
  private static User USER_GROUP_ADMIN;
  private static User USER_GROUP_CREATE;
  private static User USER_GROUP_READ;
  private static User USER_GROUP_WRITE;
  private static byte[] TEST_FAMILY=Bytes.toBytes("f1");
  private static RSGroupAdminEndpoint rsGroupAdminEndpoint;
  @BeforeClass public static void setupBeforeClass() throws Exception {
    conf=TEST_UTIL.getConfiguration();
    conf.set(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,RSGroupBasedLoadBalancer.class.getName());
    enableSecurity(conf);
    verifyConfiguration(conf);
    configureRSGroupAdminEndpoint(conf);
    TEST_UTIL.startMiniCluster();
    rsGroupAdminEndpoint=(RSGroupAdminEndpoint)TEST_UTIL.getMiniHBaseCluster().getMaster().getMasterCoprocessorHost().findCoprocessor(RSGroupAdminEndpoint.class.getName());
    TEST_UTIL.waitUntilAllRegionsAssigned(AccessControlLists.ACL_TABLE_NAME);
    SUPERUSER=User.createUserForTesting(conf,"admin",new String[]{"supergroup"});
    USER_ADMIN=User.createUserForTesting(conf,"admin2",new String[0]);
    USER_RW=User.createUserForTesting(conf,"rwuser",new String[0]);
    USER_RO=User.createUserForTesting(conf,"rouser",new String[0]);
    USER_OWNER=User.createUserForTesting(conf,"owner",new String[0]);
    USER_CREATE=User.createUserForTesting(conf,"tbl_create",new String[0]);
    USER_NONE=User.createUserForTesting(conf,"nouser",new String[0]);
    USER_GROUP_ADMIN=User.createUserForTesting(conf,"user_group_admin",new String[]{GROUP_ADMIN});
    USER_GROUP_CREATE=User.createUserForTesting(conf,"user_group_create",new String[]{GROUP_CREATE});
    USER_GROUP_READ=User.createUserForTesting(conf,"user_group_read",new String[]{GROUP_READ});
    USER_GROUP_WRITE=User.createUserForTesting(conf,"user_group_write",new String[]{GROUP_WRITE});
    systemUserConnection=TEST_UTIL.getConnection();
    setUpTableAndUserPermissions();
  }
  private static void setUpTableAndUserPermissions() throws Exception {
    TableDescriptorBuilder tableBuilder=TableDescriptorBuilder.newBuilder(TEST_TABLE);
    ColumnFamilyDescriptorBuilder cfd=ColumnFamilyDescriptorBuilder.newBuilder(TEST_FAMILY);
    cfd.setMaxVersions(100);
    tableBuilder.setColumnFamily(cfd.build());
    tableBuilder.setValue(TableDescriptorBuilder.OWNER,USER_OWNER.getShortName());
    createTable(TEST_UTIL,tableBuilder.build(),new byte[][]{Bytes.toBytes("s")});
    grantGlobal(TEST_UTIL,USER_ADMIN.getShortName(),Permission.Action.ADMIN,Permission.Action.CREATE,Permission.Action.READ,Permission.Action.WRITE);
    grantOnTable(TEST_UTIL,USER_RW.getShortName(),TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ,Permission.Action.WRITE);
    grantOnTable(TEST_UTIL,USER_CREATE.getShortName(),TEST_TABLE,null,null,Permission.Action.CREATE,Permission.Action.READ,Permission.Action.WRITE);
    grantOnTable(TEST_UTIL,USER_RO.getShortName(),TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ);
    grantGlobal(TEST_UTIL,toGroupEntry(GROUP_ADMIN),Permission.Action.ADMIN);
    grantGlobal(TEST_UTIL,toGroupEntry(GROUP_CREATE),Permission.Action.CREATE);
    grantGlobal(TEST_UTIL,toGroupEntry(GROUP_READ),Permission.Action.READ);
    grantGlobal(TEST_UTIL,toGroupEntry(GROUP_WRITE),Permission.Action.WRITE);
    assertEquals(4,AccessControlLists.getTablePermissions(conf,TEST_TABLE).size());
    try {
      assertEquals(4,AccessControlClient.getUserPermissions(systemUserConnection,TEST_TABLE.toString()).size());
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.getUserPermissions. ",e);
      fail("error during call of AccessControlClient.getUserPermissions.");
    }
  }
  private static void cleanUp() throws Exception {
    try {
      deleteTable(TEST_UTIL,TEST_TABLE);
    }
 catch (    TableNotFoundException ex) {
      LOG.info("Test deleted table " + TEST_TABLE);
    }
    assertEquals(0,AccessControlLists.getTablePermissions(conf,TEST_TABLE).size());
    assertEquals(0,AccessControlLists.getNamespacePermissions(conf,TEST_TABLE.getNamespaceAsString()).size());
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    cleanUp();
    TEST_UTIL.shutdownMiniCluster();
    int total=TableAuthManager.getTotalRefCount();
    assertTrue("Unexpected reference count: " + total,total == 0);
  }
  private static void configureRSGroupAdminEndpoint(  Configuration conf){
    String currentCoprocessors=conf.get(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY);
    String coprocessors=RSGroupAdminEndpoint.class.getName();
    if (currentCoprocessors != null) {
      coprocessors+="," + currentCoprocessors;
    }
    conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,coprocessors);
    conf.set(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,RSGroupBasedLoadBalancer.class.getName());
  }
  @Test public void testGetRSGroupInfo() throws Exception {
    AccessTestAction action=() -> {
      rsGroupAdminEndpoint.checkPermission("getRSGroupInfo");
      return null;
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testGetRSGroupInfoOfTable() throws Exception {
    AccessTestAction action=() -> {
      rsGroupAdminEndpoint.checkPermission("getRSGroupInfoOfTable");
      return null;
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testMoveServers() throws Exception {
    AccessTestAction action=() -> {
      rsGroupAdminEndpoint.checkPermission("moveServers");
      return null;
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testMoveTables() throws Exception {
    AccessTestAction action=() -> {
      rsGroupAdminEndpoint.checkPermission("moveTables");
      return null;
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testAddRSGroup() throws Exception {
    AccessTestAction action=() -> {
      rsGroupAdminEndpoint.checkPermission("addRSGroup");
      return null;
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testRemoveRSGroup() throws Exception {
    AccessTestAction action=() -> {
      rsGroupAdminEndpoint.checkPermission("removeRSGroup");
      return null;
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testBalanceRSGroup() throws Exception {
    AccessTestAction action=() -> {
      rsGroupAdminEndpoint.checkPermission("balanceRSGroup");
      return null;
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testListRSGroup() throws Exception {
    AccessTestAction action=() -> {
      rsGroupAdminEndpoint.checkPermission("listRSGroup");
      return null;
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testGetRSGroupInfoOfServer() throws Exception {
    AccessTestAction action=() -> {
      rsGroupAdminEndpoint.checkPermission("getRSGroupInfoOfServer");
      return null;
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testMoveServersAndTables() throws Exception {
    AccessTestAction action=() -> {
      rsGroupAdminEndpoint.checkPermission("moveServersAndTables");
      return null;
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
}
