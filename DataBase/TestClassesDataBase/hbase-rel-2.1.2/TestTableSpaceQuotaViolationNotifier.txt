/** 
 * Test case for  {@link TableSpaceQuotaSnapshotNotifier}.
 */
@Category(SmallTests.class) public class TestTableSpaceQuotaViolationNotifier {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestTableSpaceQuotaViolationNotifier.class);
  private TableSpaceQuotaSnapshotNotifier notifier;
  private Connection conn;
  @Before public void setup() throws Exception {
    notifier=new TableSpaceQuotaSnapshotNotifier();
    conn=mock(Connection.class);
    notifier.initialize(conn);
  }
  @Test public void testToViolation() throws Exception {
    final TableName tn=TableName.valueOf("inviolation");
    final SpaceQuotaSnapshot snapshot=new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.NO_INSERTS),1024L,512L);
    final Table quotaTable=mock(Table.class);
    when(conn.getTable(QuotaTableUtil.QUOTA_TABLE_NAME)).thenReturn(quotaTable);
    final Put expectedPut=new Put(Bytes.toBytes("t." + tn.getNameAsString()));
    final QuotaProtos.SpaceQuotaSnapshot protoQuota=QuotaProtos.SpaceQuotaSnapshot.newBuilder().setQuotaStatus(QuotaProtos.SpaceQuotaStatus.newBuilder().setInViolation(true).setViolationPolicy(QuotaProtos.SpaceViolationPolicy.NO_INSERTS)).setQuotaLimit(512L).setQuotaUsage(1024L).build();
    expectedPut.addColumn(Bytes.toBytes("u"),Bytes.toBytes("p"),protoQuota.toByteArray());
    notifier.transitionTable(tn,snapshot);
    verify(quotaTable).put(argThat(new SingleCellMutationMatcher<Put>(expectedPut)));
  }
  /** 
 * Quick hack to verify a Mutation with one column.
 */
final private static class SingleCellMutationMatcher<T> implements ArgumentMatcher<T> {
    private final Mutation expected;
    private SingleCellMutationMatcher(    Mutation expected){
      this.expected=expected;
    }
    @Override public boolean matches(    T argument){
      if (!expected.getClass().isAssignableFrom(argument.getClass())) {
        return false;
      }
      Mutation actual=(Mutation)argument;
      if (!Arrays.equals(expected.getRow(),actual.getRow())) {
        return false;
      }
      if (expected.size() != actual.size()) {
        return false;
      }
      NavigableMap<byte[],List<Cell>> expectedCells=expected.getFamilyCellMap();
      NavigableMap<byte[],List<Cell>> actualCells=actual.getFamilyCellMap();
      Entry<byte[],List<Cell>> expectedEntry=expectedCells.entrySet().iterator().next();
      Entry<byte[],List<Cell>> actualEntry=actualCells.entrySet().iterator().next();
      if (!Arrays.equals(expectedEntry.getKey(),actualEntry.getKey())) {
        return false;
      }
      return Objects.equals(expectedEntry.getValue(),actualEntry.getValue());
    }
  }
}
