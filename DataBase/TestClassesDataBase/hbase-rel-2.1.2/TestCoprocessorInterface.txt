@Category({CoprocessorTests.class,SmallTests.class}) public class TestCoprocessorInterface {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCoprocessorInterface.class);
  @Rule public TestName name=new TestName();
  private static final Logger LOG=LoggerFactory.getLogger(TestCoprocessorInterface.class);
  private static final HBaseTestingUtility TEST_UTIL=HBaseTestingUtility.createLocalHTU();
  static final Path DIR=TEST_UTIL.getDataTestDir();
private static class CustomScanner implements RegionScanner {
    private RegionScanner delegate;
    public CustomScanner(    RegionScanner delegate){
      this.delegate=delegate;
    }
    @Override public boolean next(    List<Cell> results) throws IOException {
      return delegate.next(results);
    }
    @Override public boolean next(    List<Cell> result,    ScannerContext scannerContext) throws IOException {
      return delegate.next(result,scannerContext);
    }
    @Override public boolean nextRaw(    List<Cell> result) throws IOException {
      return delegate.nextRaw(result);
    }
    @Override public boolean nextRaw(    List<Cell> result,    ScannerContext context) throws IOException {
      return delegate.nextRaw(result,context);
    }
    @Override public void close() throws IOException {
      delegate.close();
    }
    @Override public RegionInfo getRegionInfo(){
      return delegate.getRegionInfo();
    }
    @Override public boolean isFilterDone() throws IOException {
      return delegate.isFilterDone();
    }
    @Override public boolean reseek(    byte[] row) throws IOException {
      return false;
    }
    @Override public long getMaxResultSize(){
      return delegate.getMaxResultSize();
    }
    @Override public long getMvccReadPoint(){
      return delegate.getMvccReadPoint();
    }
    @Override public int getBatch(){
      return delegate.getBatch();
    }
  }
public static class CoprocessorImpl implements RegionCoprocessor, RegionObserver {
    private boolean startCalled;
    private boolean stopCalled;
    private boolean preOpenCalled;
    private boolean postOpenCalled;
    private boolean preCloseCalled;
    private boolean postCloseCalled;
    private boolean preCompactCalled;
    private boolean postCompactCalled;
    private boolean preFlushCalled;
    private boolean postFlushCalled;
    private ConcurrentMap<String,Object> sharedData;
    @Override public void start(    CoprocessorEnvironment e){
      sharedData=((RegionCoprocessorEnvironment)e).getSharedData();
      sharedData.putIfAbsent("test1",new Object());
      startCalled=true;
    }
    @Override public void stop(    CoprocessorEnvironment e){
      sharedData=null;
      stopCalled=true;
    }
    @Override public Optional<RegionObserver> getRegionObserver(){
      return Optional.of(this);
    }
    @Override public void preOpen(    ObserverContext<RegionCoprocessorEnvironment> e){
      preOpenCalled=true;
    }
    @Override public void postOpen(    ObserverContext<RegionCoprocessorEnvironment> e){
      postOpenCalled=true;
    }
    @Override public void preClose(    ObserverContext<RegionCoprocessorEnvironment> e,    boolean abortRequested){
      preCloseCalled=true;
    }
    @Override public void postClose(    ObserverContext<RegionCoprocessorEnvironment> e,    boolean abortRequested){
      postCloseCalled=true;
    }
    @Override public InternalScanner preCompact(    ObserverContext<RegionCoprocessorEnvironment> e,    Store store,    InternalScanner scanner,    ScanType scanType,    CompactionLifeCycleTracker tracker,    CompactionRequest request){
      preCompactCalled=true;
      return scanner;
    }
    @Override public void postCompact(    ObserverContext<RegionCoprocessorEnvironment> e,    Store store,    StoreFile resultFile,    CompactionLifeCycleTracker tracker,    CompactionRequest request){
      postCompactCalled=true;
    }
    @Override public void preFlush(    ObserverContext<RegionCoprocessorEnvironment> e,    FlushLifeCycleTracker tracker){
      preFlushCalled=true;
    }
    @Override public void postFlush(    ObserverContext<RegionCoprocessorEnvironment> e,    FlushLifeCycleTracker tracker){
      postFlushCalled=true;
    }
    @Override public RegionScanner postScannerOpen(    final ObserverContext<RegionCoprocessorEnvironment> e,    final Scan scan,    final RegionScanner s) throws IOException {
      return new CustomScanner(s);
    }
    boolean wasStarted(){
      return startCalled;
    }
    boolean wasStopped(){
      return stopCalled;
    }
    boolean wasOpened(){
      return (preOpenCalled && postOpenCalled);
    }
    boolean wasClosed(){
      return (preCloseCalled && postCloseCalled);
    }
    boolean wasFlushed(){
      return (preFlushCalled && postFlushCalled);
    }
    boolean wasCompacted(){
      return (preCompactCalled && postCompactCalled);
    }
    Map<String,Object> getSharedData(){
      return sharedData;
    }
  }
public static class CoprocessorII implements RegionCoprocessor {
    private ConcurrentMap<String,Object> sharedData;
    @Override public void start(    CoprocessorEnvironment e){
      sharedData=((RegionCoprocessorEnvironment)e).getSharedData();
      sharedData.putIfAbsent("test2",new Object());
    }
    @Override public void stop(    CoprocessorEnvironment e){
      sharedData=null;
    }
    @Override public Optional<RegionObserver> getRegionObserver(){
      return Optional.of(new RegionObserver(){
        @Override public void preGetOp(        final ObserverContext<RegionCoprocessorEnvironment> e,        final Get get,        final List<Cell> results) throws IOException {
          throw new RuntimeException();
        }
      }
);
    }
    Map<String,Object> getSharedData(){
      return sharedData;
    }
  }
  @Test public void testSharedData() throws IOException {
    TableName tableName=TableName.valueOf(name.getMethodName());
    byte[][] families={fam1,fam2,fam3};
    Configuration hc=initConfig();
    HRegion region=initHRegion(tableName,name.getMethodName(),hc,new Class<?>[]{},families);
    for (int i=0; i < 3; i++) {
      HBaseTestCase.addContent(region,fam3);
      region.flush(true);
    }
    region.compact(false);
    region=reopenRegion(region,CoprocessorImpl.class,CoprocessorII.class);
    Coprocessor c=region.getCoprocessorHost().findCoprocessor(CoprocessorImpl.class);
    Coprocessor c2=region.getCoprocessorHost().findCoprocessor(CoprocessorII.class);
    Object o=((CoprocessorImpl)c).getSharedData().get("test1");
    Object o2=((CoprocessorII)c2).getSharedData().get("test2");
    assertNotNull(o);
    assertNotNull(o2);
    assertFalse(((CoprocessorImpl)c).getSharedData() == ((CoprocessorII)c2).getSharedData());
    c=region.getCoprocessorHost().findCoprocessor(CoprocessorImpl.class);
    c2=region.getCoprocessorHost().findCoprocessor(CoprocessorII.class);
    assertTrue(((CoprocessorImpl)c).getSharedData().get("test1") == o);
    assertTrue(((CoprocessorII)c2).getSharedData().get("test2") == o2);
    try {
      byte[] r=region.getRegionInfo().getStartKey();
      if (r == null || r.length <= 0) {
        r=new byte[]{0};
      }
      Get g=new Get(r);
      region.get(g);
      fail();
    }
 catch (    org.apache.hadoop.hbase.DoNotRetryIOException xc) {
    }
    assertNull(region.getCoprocessorHost().findCoprocessor(CoprocessorII.class));
    c=region.getCoprocessorHost().findCoprocessor(CoprocessorImpl.class);
    assertTrue(((CoprocessorImpl)c).getSharedData().get("test1") == o);
    c=c2=null;
    System.gc();
    region=reopenRegion(region,CoprocessorImpl.class,CoprocessorII.class);
    c=region.getCoprocessorHost().findCoprocessor(CoprocessorImpl.class);
    assertTrue(((CoprocessorImpl)c).getSharedData().get("test1") == o);
    c2=region.getCoprocessorHost().findCoprocessor(CoprocessorII.class);
    Object o3=((CoprocessorII)c2).getSharedData().get("test2");
    assertFalse(o3 == o2);
    HBaseTestingUtility.closeRegionAndWAL(region);
  }
  @Test public void testCoprocessorInterface() throws IOException {
    TableName tableName=TableName.valueOf(name.getMethodName());
    byte[][] families={fam1,fam2,fam3};
    Configuration hc=initConfig();
    HRegion region=initHRegion(tableName,name.getMethodName(),hc,new Class<?>[]{CoprocessorImpl.class},families);
    for (int i=0; i < 3; i++) {
      HBaseTestCase.addContent(region,fam3);
      region.flush(true);
    }
    region.compact(false);
    Scan s=new Scan();
    RegionScanner scanner=region.getCoprocessorHost().postScannerOpen(s,region.getScanner(s));
    assertTrue(scanner instanceof CustomScanner);
    scanner.next(new ArrayList<>());
    HBaseTestingUtility.closeRegionAndWAL(region);
    Coprocessor c=region.getCoprocessorHost().findCoprocessor(CoprocessorImpl.class);
    assertTrue("Coprocessor not started",((CoprocessorImpl)c).wasStarted());
    assertTrue("Coprocessor not stopped",((CoprocessorImpl)c).wasStopped());
    assertTrue(((CoprocessorImpl)c).wasOpened());
    assertTrue(((CoprocessorImpl)c).wasClosed());
    assertTrue(((CoprocessorImpl)c).wasFlushed());
    assertTrue(((CoprocessorImpl)c).wasCompacted());
  }
  HRegion reopenRegion(  final HRegion closedRegion,  Class<?>... implClasses) throws IOException {
    HRegion r=HRegion.openHRegion(closedRegion,null);
    Configuration conf=TEST_UTIL.getConfiguration();
    RegionCoprocessorHost host=new RegionCoprocessorHost(r,Mockito.mock(RegionServerServices.class),conf);
    r.setCoprocessorHost(host);
    for (    Class<?> implClass : implClasses) {
      host.load((Class<? extends RegionCoprocessor>)implClass,Coprocessor.PRIORITY_USER,conf);
    }
    host.preOpen();
    host.postOpen();
    return r;
  }
  HRegion initHRegion(  TableName tableName,  String callingMethod,  Configuration conf,  Class<?>[] implClasses,  byte[][] families) throws IOException {
    HTableDescriptor htd=new HTableDescriptor(tableName);
    for (    byte[] family : families) {
      htd.addFamily(new HColumnDescriptor(family));
    }
    ChunkCreator.initialize(MemStoreLABImpl.CHUNK_SIZE_DEFAULT,false,0,0,0,null);
    RegionInfo info=RegionInfoBuilder.newBuilder(tableName).setStartKey(null).setEndKey(null).setSplit(false).build();
    Path path=new Path(DIR + callingMethod);
    HRegion r=HBaseTestingUtility.createRegionAndWAL(info,path,conf,htd);
    RegionCoprocessorHost host=new RegionCoprocessorHost(r,Mockito.mock(RegionServerServices.class),conf);
    r.setCoprocessorHost(host);
    for (    Class<?> implClass : implClasses) {
      host.load((Class<? extends RegionCoprocessor>)implClass,Coprocessor.PRIORITY_USER,conf);
      Coprocessor c=host.findCoprocessor(implClass.getName());
      assertNotNull(c);
    }
    host.preOpen();
    host.postOpen();
    return r;
  }
  private Configuration initConfig(){
    TEST_UTIL.getConfiguration().setInt("hbase.hstore.compactionThreshold",2);
    TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD,10 * 1000);
    TEST_UTIL.getConfiguration().setLong("hbase.client.pause",15 * 1000);
    TEST_UTIL.getConfiguration().setLong(HConstants.HREGION_MAX_FILESIZE,1024 * 128);
    TEST_UTIL.getConfiguration().setBoolean("hbase.testing.nocluster",true);
    TEST_UTIL.getConfiguration().setBoolean(CoprocessorHost.ABORT_ON_ERROR_KEY,false);
    return TEST_UTIL.getConfiguration();
  }
}
