@Category({MasterTests.class,SmallTests.class}) public class TestProcedureInMemoryChore {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestProcedureInMemoryChore.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestProcedureInMemoryChore.class);
  private static final int PROCEDURE_EXECUTOR_SLOTS=1;
  private TestProcEnv procEnv;
  private NoopProcedureStore procStore;
  private ProcedureExecutor<TestProcEnv> procExecutor;
  private HBaseCommonTestingUtility htu;
  @Before public void setUp() throws IOException {
    htu=new HBaseCommonTestingUtility();
    procEnv=new TestProcEnv();
    procStore=new NoopProcedureStore();
    procExecutor=new ProcedureExecutor<>(htu.getConfiguration(),procEnv,procStore);
    procExecutor.testing=new ProcedureExecutor.Testing();
    procStore.start(PROCEDURE_EXECUTOR_SLOTS);
    ProcedureTestingUtility.initAndStartWorkers(procExecutor,PROCEDURE_EXECUTOR_SLOTS,true);
  }
  @After public void tearDown() throws IOException {
    procExecutor.stop();
    procStore.stop(false);
  }
  @Test public void testChoreAddAndRemove() throws Exception {
    final int timeoutMSec=50;
    final int nCountDown=5;
    CountDownLatch latch=new CountDownLatch(nCountDown);
    TestLatchChore chore=new TestLatchChore(timeoutMSec,latch);
    procExecutor.addChore(chore);
    assertTrue(chore.isWaiting());
    latch.await();
    assertTrue(chore.isWaiting());
    procExecutor.removeChore(chore);
    latch=new CountDownLatch(nCountDown);
    chore.setLatch(latch);
    latch.await(timeoutMSec * nCountDown,TimeUnit.MILLISECONDS);
    LOG.info("chore latch count=" + latch.getCount());
    assertFalse(chore.isWaiting());
    assertTrue("latchCount=" + latch.getCount(),latch.getCount() > 0);
  }
public static class TestLatchChore extends ProcedureInMemoryChore<TestProcEnv> {
    private CountDownLatch latch;
    public TestLatchChore(    final int timeoutMSec,    final CountDownLatch latch){
      super(timeoutMSec);
      setLatch(latch);
    }
    public void setLatch(    final CountDownLatch latch){
      this.latch=latch;
    }
    @Override protected void periodicExecute(    final TestProcEnv env){
      LOG.info("periodic execute " + this);
      latch.countDown();
    }
  }
private static class TestProcEnv {
  }
}
