public abstract class PoolMapTestBase {
  protected PoolMap<String,String> poolMap;
  protected static final int POOL_SIZE=3;
  @Before public void setUp() throws Exception {
    this.poolMap=new PoolMap<>(getPoolType(),POOL_SIZE);
  }
  @After public void tearDown() throws Exception {
    this.poolMap.clear();
  }
  protected abstract PoolType getPoolType();
  protected void runThread(  final String randomKey,  final String randomValue,  final String expectedValue) throws InterruptedException {
    final AtomicBoolean matchFound=new AtomicBoolean(false);
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        poolMap.put(randomKey,randomValue);
        String actualValue=poolMap.get(randomKey);
        matchFound.set(expectedValue == null ? actualValue == null : expectedValue.equals(actualValue));
      }
    }
);
    thread.start();
    thread.join();
    assertTrue(matchFound.get());
  }
}
