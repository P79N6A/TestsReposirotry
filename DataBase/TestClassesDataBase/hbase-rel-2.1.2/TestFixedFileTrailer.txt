@RunWith(Parameterized.class) @Category({IOTests.class,SmallTests.class}) public class TestFixedFileTrailer {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestFixedFileTrailer.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestFixedFileTrailer.class);
  private static final int MAX_COMPARATOR_NAME_LENGTH=128;
  /** 
 * The number of used fields by version. Indexed by version minus two. Min version that we support is V2
 */
  private static final int[] NUM_FIELDS_BY_VERSION=new int[]{14,15};
  private HBaseTestingUtility util=new HBaseTestingUtility();
  private FileSystem fs;
  private ByteArrayOutputStream baos=new ByteArrayOutputStream();
  private int version;
static {
    assert NUM_FIELDS_BY_VERSION.length == HFile.MAX_FORMAT_VERSION - HFile.MIN_FORMAT_VERSION + 1;
  }
  public TestFixedFileTrailer(  int version){
    this.version=version;
  }
  @Rule public ExpectedException expectedEx=ExpectedException.none();
  @Parameters public static Collection<Object[]> getParameters(){
    List<Object[]> versionsToTest=new ArrayList<>();
    for (int v=HFile.MIN_FORMAT_VERSION; v <= HFile.MAX_FORMAT_VERSION; ++v)     versionsToTest.add(new Integer[]{v});
    return versionsToTest;
  }
  @Before public void setUp() throws IOException {
    fs=FileSystem.get(util.getConfiguration());
  }
  @Test public void testComparatorIsHBase1Compatible(){
    FixedFileTrailer t=new FixedFileTrailer(version,HFileReaderImpl.PBUF_TRAILER_MINOR_VERSION);
    t.setComparatorClass(CellComparatorImpl.COMPARATOR.getClass());
    assertEquals(CellComparatorImpl.COMPARATOR.getClass().getName(),t.getComparatorClassName());
    HFileProtos.FileTrailerProto pb=t.toProtobuf();
    assertEquals(KeyValue.COMPARATOR.getClass().getName(),pb.getComparatorClassName());
    t.setComparatorClass(CellComparatorImpl.MetaCellComparator.META_COMPARATOR.getClass());
    pb=t.toProtobuf();
    assertEquals(KeyValue.META_COMPARATOR.getClass().getName(),pb.getComparatorClassName());
  }
  @Test public void testCreateComparator() throws IOException {
    FixedFileTrailer t=new FixedFileTrailer(version,HFileReaderImpl.PBUF_TRAILER_MINOR_VERSION);
    try {
      assertEquals(CellComparatorImpl.class,t.createComparator(KeyValue.COMPARATOR.getLegacyKeyComparatorName()).getClass());
      assertEquals(CellComparatorImpl.class,t.createComparator(KeyValue.COMPARATOR.getClass().getName()).getClass());
      assertEquals(CellComparatorImpl.class,t.createComparator(CellComparator.class.getName()).getClass());
      assertEquals(CellComparatorImpl.MetaCellComparator.class,t.createComparator(KeyValue.META_COMPARATOR.getLegacyKeyComparatorName()).getClass());
      assertEquals(CellComparatorImpl.MetaCellComparator.class,t.createComparator(KeyValue.META_COMPARATOR.getClass().getName()).getClass());
      assertEquals(CellComparatorImpl.MetaCellComparator.class,t.createComparator(CellComparatorImpl.MetaCellComparator.META_COMPARATOR.getClass().getName()).getClass());
      assertNull(t.createComparator(Bytes.BYTES_RAWCOMPARATOR.getClass().getName()));
      assertNull(t.createComparator("org.apache.hadoop.hbase.KeyValue$RawBytesComparator"));
    }
 catch (    IOException e) {
      fail("Unexpected exception while testing FixedFileTrailer#createComparator()");
    }
    expectedEx.expect(IOException.class);
    t.createComparator("");
  }
  @Test public void testTrailer() throws IOException {
    FixedFileTrailer t=new FixedFileTrailer(version,HFileReaderImpl.PBUF_TRAILER_MINOR_VERSION);
    t.setDataIndexCount(3);
    t.setEntryCount(((long)Integer.MAX_VALUE) + 1);
    t.setLastDataBlockOffset(291);
    t.setNumDataIndexLevels(3);
    t.setComparatorClass(CellComparatorImpl.COMPARATOR.getClass());
    t.setFirstDataBlockOffset(9081723123L);
    t.setUncompressedDataIndexSize(827398717L);
    t.setLoadOnOpenOffset(128);
    t.setMetaIndexCount(7);
    t.setTotalUncompressedBytes(129731987);
{
      DataOutputStream dos=new DataOutputStream(baos);
      t.serialize(dos);
      dos.flush();
      assertEquals(dos.size(),FixedFileTrailer.getTrailerSize(version));
    }
    byte[] bytes=baos.toByteArray();
    baos.reset();
    assertEquals(bytes.length,FixedFileTrailer.getTrailerSize(version));
    ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
{
      DataInputStream dis=new DataInputStream(bais);
      FixedFileTrailer t2=new FixedFileTrailer(version,HFileReaderImpl.PBUF_TRAILER_MINOR_VERSION);
      t2.deserialize(dis);
      assertEquals(-1,bais.read());
      checkLoadedTrailer(version,t,t2);
    }
    Path trailerPath=new Path(util.getDataTestDir(),"trailer_" + version);
{
      for (      byte invalidVersion : new byte[]{HFile.MIN_FORMAT_VERSION - 1,HFile.MAX_FORMAT_VERSION + 1}) {
        bytes[bytes.length - 1]=invalidVersion;
        writeTrailer(trailerPath,null,bytes);
        try {
          readTrailer(trailerPath);
          fail("Exception expected");
        }
 catch (        IllegalArgumentException ex) {
          String msg=ex.getMessage();
          String cleanMsg=msg.replaceAll("^(java(\\.[a-zA-Z]+)+:\\s+)?|\\s+\\(.*\\)\\s*$","");
          assertEquals("Actual exception message is \"" + msg + "\".\n"+ "Cleaned-up message","Invalid HFile version: " + invalidVersion,cleanMsg);
          LOG.info("Got an expected exception: " + msg);
        }
      }
    }
    writeTrailer(trailerPath,t,null);
    FixedFileTrailer t4=readTrailer(trailerPath);
    checkLoadedTrailer(version,t,t4);
    String trailerStr=t.toString();
    assertEquals("Invalid number of fields in the string representation " + "of the trailer: " + trailerStr,NUM_FIELDS_BY_VERSION[version - 2],trailerStr.split(", ").length);
    assertEquals(trailerStr,t4.toString());
  }
  @Test public void testTrailerForV2NonPBCompatibility() throws Exception {
    if (version == 2) {
      FixedFileTrailer t=new FixedFileTrailer(version,HFileReaderImpl.MINOR_VERSION_NO_CHECKSUM);
      t.setDataIndexCount(3);
      t.setEntryCount(((long)Integer.MAX_VALUE) + 1);
      t.setLastDataBlockOffset(291);
      t.setNumDataIndexLevels(3);
      t.setComparatorClass(CellComparatorImpl.COMPARATOR.getClass());
      t.setFirstDataBlockOffset(9081723123L);
      t.setUncompressedDataIndexSize(827398717L);
      t.setLoadOnOpenOffset(128);
      t.setMetaIndexCount(7);
      t.setTotalUncompressedBytes(129731987);
{
        DataOutputStream dos=new DataOutputStream(baos);
        serializeAsWritable(dos,t);
        dos.flush();
        assertEquals(FixedFileTrailer.getTrailerSize(version),dos.size());
      }
      byte[] bytes=baos.toByteArray();
      baos.reset();
      assertEquals(bytes.length,FixedFileTrailer.getTrailerSize(version));
      ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
{
        DataInputStream dis=new DataInputStream(bais);
        FixedFileTrailer t2=new FixedFileTrailer(version,HFileReaderImpl.MINOR_VERSION_NO_CHECKSUM);
        t2.deserialize(dis);
        assertEquals(-1,bais.read());
        checkLoadedTrailer(version,t,t2);
      }
    }
  }
  private void serializeAsWritable(  DataOutputStream output,  FixedFileTrailer fft) throws IOException {
    BlockType.TRAILER.write(output);
    output.writeLong(fft.getFileInfoOffset());
    output.writeLong(fft.getLoadOnOpenDataOffset());
    output.writeInt(fft.getDataIndexCount());
    output.writeLong(fft.getUncompressedDataIndexSize());
    output.writeInt(fft.getMetaIndexCount());
    output.writeLong(fft.getTotalUncompressedBytes());
    output.writeLong(fft.getEntryCount());
    output.writeInt(fft.getCompressionCodec().ordinal());
    output.writeInt(fft.getNumDataIndexLevels());
    output.writeLong(fft.getFirstDataBlockOffset());
    output.writeLong(fft.getLastDataBlockOffset());
    Bytes.writeStringFixedSize(output,fft.getComparatorClassName(),MAX_COMPARATOR_NAME_LENGTH);
    output.writeInt(FixedFileTrailer.materializeVersion(fft.getMajorVersion(),fft.getMinorVersion()));
  }
  private FixedFileTrailer readTrailer(  Path trailerPath) throws IOException {
    FSDataInputStream fsdis=fs.open(trailerPath);
    FixedFileTrailer trailerRead=FixedFileTrailer.readFromStream(fsdis,fs.getFileStatus(trailerPath).getLen());
    fsdis.close();
    return trailerRead;
  }
  private void writeTrailer(  Path trailerPath,  FixedFileTrailer t,  byte[] useBytesInstead) throws IOException {
    assert (t == null) != (useBytesInstead == null);
    FSDataOutputStream fsdos=fs.create(trailerPath);
    fsdos.write(135);
    if (useBytesInstead != null) {
      fsdos.write(useBytesInstead);
    }
 else {
      t.serialize(fsdos);
    }
    fsdos.close();
  }
  private void checkLoadedTrailer(  int version,  FixedFileTrailer expected,  FixedFileTrailer loaded) throws IOException {
    assertEquals(version,loaded.getMajorVersion());
    assertEquals(expected.getDataIndexCount(),loaded.getDataIndexCount());
    assertEquals(Math.min(expected.getEntryCount(),version == 1 ? Integer.MAX_VALUE : Long.MAX_VALUE),loaded.getEntryCount());
    if (version == 1) {
      assertEquals(expected.getFileInfoOffset(),loaded.getFileInfoOffset());
    }
    if (version == 2) {
      assertEquals(expected.getLastDataBlockOffset(),loaded.getLastDataBlockOffset());
      assertEquals(expected.getNumDataIndexLevels(),loaded.getNumDataIndexLevels());
      assertEquals(expected.createComparator().getClass().getName(),loaded.createComparator().getClass().getName());
      assertEquals(expected.getFirstDataBlockOffset(),loaded.getFirstDataBlockOffset());
      assertTrue(expected.createComparator() instanceof CellComparatorImpl);
      assertEquals(expected.getUncompressedDataIndexSize(),loaded.getUncompressedDataIndexSize());
    }
    assertEquals(expected.getLoadOnOpenDataOffset(),loaded.getLoadOnOpenDataOffset());
    assertEquals(expected.getMetaIndexCount(),loaded.getMetaIndexCount());
    assertEquals(expected.getTotalUncompressedBytes(),loaded.getTotalUncompressedBytes());
  }
}
