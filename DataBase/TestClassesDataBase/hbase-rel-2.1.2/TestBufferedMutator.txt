@Category({SmallTests.class,ClientTests.class}) public class TestBufferedMutator {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestBufferedMutator.class);
  @Rule public TestName name=new TestName();
  /** 
 * My BufferedMutator. Just to prove that I can insert a BM other than default.
 */
public static class MyBufferedMutator extends BufferedMutatorImpl {
    MyBufferedMutator(    ClusterConnection conn,    RpcRetryingCallerFactory rpcCallerFactory,    RpcControllerFactory rpcFactory,    BufferedMutatorParams params){
      super(conn,rpcCallerFactory,rpcFactory,params);
    }
  }
  @Test public void testAlternateBufferedMutatorImpl() throws IOException {
    BufferedMutatorParams params=new BufferedMutatorParams(TableName.valueOf(name.getMethodName()));
    Configuration conf=HBaseConfiguration.create();
    conf.set(AsyncRegistryFactory.REGISTRY_IMPL_CONF_KEY,DoNothingAsyncRegistry.class.getName());
    try (Connection connection=ConnectionFactory.createConnection(conf)){
      BufferedMutator bm=connection.getBufferedMutator(params);
      assertTrue(bm instanceof BufferedMutatorImpl);
      params.implementationClassName(MyBufferedMutator.class.getName());
      bm=connection.getBufferedMutator(params);
      assertTrue(bm instanceof MyBufferedMutator);
    }
     conf.set(BufferedMutator.CLASSNAME_KEY,MyBufferedMutator.class.getName());
    try (Connection connection=ConnectionFactory.createConnection(conf)){
      BufferedMutator bm=connection.getBufferedMutator(params);
      assertTrue(bm instanceof MyBufferedMutator);
    }
   }
}
