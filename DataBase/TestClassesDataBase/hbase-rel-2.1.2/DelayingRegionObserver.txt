public static class DelayingRegionObserver implements RegionCoprocessor, RegionObserver {
  private static final Logger LOG=LoggerFactory.getLogger(DelayingRegionObserver.class);
  private long delayMillis;
  @Override public Optional<RegionObserver> getRegionObserver(){
    return Optional.of(this);
  }
  @Override public void start(  CoprocessorEnvironment e) throws IOException {
    this.delayMillis=e.getConfiguration().getLong("delayingregionobserver.delay",3000);
  }
  @Override public void preGetOp(  ObserverContext<RegionCoprocessorEnvironment> e,  Get get,  List<Cell> results) throws IOException {
    try {
      long start=System.currentTimeMillis();
      TimeUnit.MILLISECONDS.sleep(delayMillis);
      if (LOG.isTraceEnabled()) {
        LOG.trace("Slept for " + (System.currentTimeMillis() - start) + " msec");
      }
    }
 catch (    InterruptedException ie) {
      throw new InterruptedIOException("Interrupted while sleeping");
    }
  }
}
