/** 
 * Ensure Coprocessors get ShortCircuit Connections when they get a Connection from their CoprocessorEnvironment.
 */
@Category({CoprocessorTests.class,MediumTests.class}) public class TestCoprocessorShortCircuitRPC {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCoprocessorShortCircuitRPC.class);
  @Rule public TestName name=new TestName();
  private static final HBaseTestingUtility HTU=HBaseTestingUtility.createLocalHTU();
  /** 
 * Start up a mini cluster with my three CPs loaded.
 */
  @BeforeClass public static void beforeClass() throws Exception {
    Configuration conf=HTU.getConfiguration();
    conf.setStrings(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,TestMasterCoprocessor.class.getName());
    conf.setStrings(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY,TestRegionServerCoprocessor.class.getName());
    conf.setStrings(CoprocessorHost.REGION_COPROCESSOR_CONF_KEY,TestRegionCoprocessor.class.getName());
    HTU.startMiniCluster();
  }
  @AfterClass public static void afterClass() throws Exception {
    HTU.shutdownMiniCluster();
  }
public static class TestMasterCoprocessor implements MasterCoprocessor {
    public TestMasterCoprocessor(){
    }
    @Override public void start(    CoprocessorEnvironment env) throws IOException {
      checkShared(((MasterCoprocessorEnvironment)env).getConnection());
      checkShortCircuit(((MasterCoprocessorEnvironment)env).createConnection(env.getConfiguration()));
    }
  }
public static class TestRegionServerCoprocessor implements RegionServerCoprocessor {
    public TestRegionServerCoprocessor(){
    }
    @Override public void start(    CoprocessorEnvironment env) throws IOException {
      checkShared(((RegionServerCoprocessorEnvironment)env).getConnection());
      checkShortCircuit(((RegionServerCoprocessorEnvironment)env).createConnection(env.getConfiguration()));
    }
  }
public static class TestRegionCoprocessor implements RegionCoprocessor {
    public TestRegionCoprocessor(){
    }
    @Override public void start(    CoprocessorEnvironment env) throws IOException {
      checkShared(((RegionCoprocessorEnvironment)env).getConnection());
      checkShortCircuit(((RegionCoprocessorEnvironment)env).createConnection(env.getConfiguration()));
    }
  }
  private static void checkShared(  Connection connection){
    assertTrue(connection instanceof SharedConnection);
  }
  private static void checkShortCircuit(  Connection connection){
    assertTrue(connection instanceof ConnectionUtils.ShortCircuitingClusterConnection);
  }
  @Test public void test() throws IOException {
  }
}
