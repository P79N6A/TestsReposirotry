@Category({RegionServerTests.class,SmallTests.class}) public class TestDateTieredCompactionPolicyOverflow extends AbstractTestDateTieredCompactionPolicy {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestDateTieredCompactionPolicyOverflow.class);
  @Override protected void config(){
    super.config();
    conf.set(StoreEngine.STORE_ENGINE_CLASS_KEY,"org.apache.hadoop.hbase.regionserver.DateTieredStoreEngine");
    conf.setLong(CompactionConfiguration.DATE_TIERED_MAX_AGE_MILLIS_KEY,100);
    conf.setLong(CompactionConfiguration.DATE_TIERED_INCOMING_WINDOW_MIN_KEY,3);
    conf.setLong(ExponentialCompactionWindowFactory.BASE_WINDOW_MILLIS_KEY,Long.MAX_VALUE / 2);
    conf.setInt(ExponentialCompactionWindowFactory.WINDOWS_PER_TIER_KEY,2);
    conf.setBoolean(CompactionConfiguration.DATE_TIERED_SINGLE_OUTPUT_FOR_MINOR_COMPACTION_KEY,false);
    this.conf.setInt(CompactionConfiguration.HBASE_HSTORE_COMPACTION_MIN_KEY,2);
    this.conf.setInt(CompactionConfiguration.HBASE_HSTORE_COMPACTION_MAX_KEY,12);
    this.conf.setFloat(CompactionConfiguration.HBASE_HSTORE_COMPACTION_RATIO_KEY,1.2F);
    conf.setInt(HStore.BLOCKING_STOREFILES_KEY,20);
    conf.setLong(HConstants.MAJOR_COMPACTION_PERIOD,10);
  }
  /** 
 * Major compaction with maximum values
 * @throws IOException with error
 */
  @Test public void maxValuesForMajor() throws IOException {
    long[] minTimestamps=new long[]{Long.MIN_VALUE,-100};
    long[] maxTimestamps=new long[]{-8,Long.MAX_VALUE};
    long[] sizes=new long[]{0,1};
    compactEquals(Long.MAX_VALUE,sfCreate(minTimestamps,maxTimestamps,sizes),new long[]{0,1},new long[]{Long.MIN_VALUE,-4611686018427387903L,0,4611686018427387903L,9223372036854775806L},true,true);
  }
}
