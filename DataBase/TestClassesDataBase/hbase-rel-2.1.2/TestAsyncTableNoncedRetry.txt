@Category({MediumTests.class,ClientTests.class}) public class TestAsyncTableNoncedRetry {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAsyncTableNoncedRetry.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static TableName TABLE_NAME=TableName.valueOf("async");
  private static byte[] FAMILY=Bytes.toBytes("cf");
  private static byte[] QUALIFIER=Bytes.toBytes("cq");
  private static byte[] VALUE=Bytes.toBytes("value");
  private static AsyncConnection ASYNC_CONN;
  private static long NONCE=1L;
  private static NonceGenerator NONCE_GENERATOR=new NonceGenerator(){
    @Override public long newNonce(){
      return NONCE;
    }
    @Override public long getNonceGroup(){
      return 1L;
    }
  }
;
  @Rule public TestName testName=new TestName();
  private byte[] row;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.startMiniCluster(1);
    TEST_UTIL.createTable(TABLE_NAME,FAMILY);
    TEST_UTIL.waitTableAvailable(TABLE_NAME);
    AsyncRegistry registry=AsyncRegistryFactory.getRegistry(TEST_UTIL.getConfiguration());
    ASYNC_CONN=new AsyncConnectionImpl(TEST_UTIL.getConfiguration(),registry,registry.getClusterId().get(),User.getCurrent()){
      @Override public NonceGenerator getNonceGenerator(){
        return NONCE_GENERATOR;
      }
    }
;
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    IOUtils.closeQuietly(ASYNC_CONN);
    TEST_UTIL.shutdownMiniCluster();
  }
  @Before public void setUp() throws IOException, InterruptedException {
    row=Bytes.toBytes(testName.getMethodName().replaceAll("[^0-9A-Za-z]","_"));
    NONCE++;
  }
  @Test public void testAppend() throws InterruptedException, ExecutionException {
    AsyncTable<?> table=ASYNC_CONN.getTable(TABLE_NAME);
    Result result=table.append(new Append(row).addColumn(FAMILY,QUALIFIER,VALUE)).get();
    assertArrayEquals(VALUE,result.getValue(FAMILY,QUALIFIER));
    result=table.append(new Append(row).addColumn(FAMILY,QUALIFIER,VALUE)).get();
    assertArrayEquals(VALUE,result.getValue(FAMILY,QUALIFIER));
    result=table.get(new Get(row)).get();
    assertArrayEquals(VALUE,result.getValue(FAMILY,QUALIFIER));
  }
  @Test public void testIncrement() throws InterruptedException, ExecutionException {
    AsyncTable<?> table=ASYNC_CONN.getTable(TABLE_NAME);
    assertEquals(1L,table.incrementColumnValue(row,FAMILY,QUALIFIER,1L).get().longValue());
    assertEquals(1L,table.incrementColumnValue(row,FAMILY,QUALIFIER,1L).get().longValue());
    Result result=table.get(new Get(row)).get();
    assertEquals(1L,Bytes.toLong(result.getValue(FAMILY,QUALIFIER)));
  }
}
