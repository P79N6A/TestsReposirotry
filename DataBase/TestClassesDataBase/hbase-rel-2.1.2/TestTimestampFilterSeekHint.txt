@Category({RegionServerTests.class,LargeTests.class}) public class TestTimestampFilterSeekHint {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestTimestampFilterSeekHint.class);
  private final static HBaseTestingUtility TEST_UTIL=HBaseTestingUtility.createLocalHTU();
  private final static String RK="myRK";
  private final static byte[] RK_BYTES=Bytes.toBytes(RK);
  private final static String FAMILY="D";
  private final static byte[] FAMILY_BYTES=Bytes.toBytes(FAMILY);
  private final static String QUAL="0";
  private final static byte[] QUAL_BYTES=Bytes.toBytes(QUAL);
  public static final int MAX_VERSIONS=50000;
  private HRegion region;
  private int regionCount=0;
  @Test public void testGetSeek() throws IOException {
    StoreFileScanner.instrument();
    prepareRegion();
    Get g=new Get(RK_BYTES);
    final TimestampsFilter timestampsFilter=new TimestampsFilter(ImmutableList.of(5L),true);
    g.setFilter(timestampsFilter);
    final long initialSeekCount=StoreFileScanner.getSeekCount();
    region.get(g);
    final long finalSeekCount=StoreFileScanner.getSeekCount();
    assertTrue(finalSeekCount >= initialSeekCount + 3);
  }
  @Test public void testGetDoesntSeekWithNoHint() throws IOException {
    StoreFileScanner.instrument();
    prepareRegion();
    Get g=new Get(RK_BYTES);
    g.setFilter(new TimestampsFilter(ImmutableList.of(5L)));
    final long initialSeekCount=StoreFileScanner.getSeekCount();
    region.get(g);
    final long finalSeekCount=StoreFileScanner.getSeekCount();
    assertTrue(finalSeekCount >= initialSeekCount);
    assertTrue(finalSeekCount < initialSeekCount + 3);
  }
  @Before public void prepareRegion() throws IOException {
    region=TEST_UTIL.createTestRegion("TestTimestampFilterSeekHint" + regionCount++,new HColumnDescriptor(FAMILY).setBlocksize(1024).setMaxVersions(MAX_VERSIONS));
    for (long i=0; i < MAX_VERSIONS - 2; i++) {
      Put p=new Put(RK_BYTES,i);
      p.addColumn(FAMILY_BYTES,QUAL_BYTES,Bytes.toBytes(RandomStringUtils.randomAlphabetic(255)));
      region.put(p);
    }
    region.flush(true);
  }
}
