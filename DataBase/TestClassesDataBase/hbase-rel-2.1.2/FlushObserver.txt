public static final class FlushObserver implements RegionObserver, RegionCoprocessor {
  @Override public Optional<RegionObserver> getRegionObserver(){
    return Optional.of(this);
  }
  @Override public void preFlush(  ObserverContext<RegionCoprocessorEnvironment> c,  FlushLifeCycleTracker tracker) throws IOException {
    if (TRACKER != null) {
      assertSame(tracker,TRACKER);
    }
  }
  @Override public InternalScanner preFlush(  ObserverContext<RegionCoprocessorEnvironment> c,  Store store,  InternalScanner scanner,  FlushLifeCycleTracker tracker) throws IOException {
    if (TRACKER != null) {
      assertSame(tracker,TRACKER);
    }
    return scanner;
  }
  @Override public void postFlush(  ObserverContext<RegionCoprocessorEnvironment> c,  FlushLifeCycleTracker tracker) throws IOException {
    if (TRACKER != null) {
      assertSame(tracker,TRACKER);
    }
  }
  @Override public void postFlush(  ObserverContext<RegionCoprocessorEnvironment> c,  Store store,  StoreFile resultFile,  FlushLifeCycleTracker tracker) throws IOException {
    if (TRACKER != null) {
      assertSame(tracker,TRACKER);
    }
    CountDownLatch arrive=ARRIVE;
    if (arrive != null) {
      arrive.countDown();
      try {
        BLOCK.await();
      }
 catch (      InterruptedException e) {
        throw new InterruptedIOException();
      }
    }
  }
}
