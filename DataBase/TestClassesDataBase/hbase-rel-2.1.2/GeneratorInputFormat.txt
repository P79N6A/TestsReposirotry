static class GeneratorInputFormat extends InputFormat<BytesWritable,NullWritable> {
static class GeneratorInputSplit extends InputSplit implements Writable {
    @Override public long getLength() throws IOException, InterruptedException {
      return 1;
    }
    @Override public String[] getLocations() throws IOException, InterruptedException {
      return new String[0];
    }
    @Override public void readFields(    DataInput arg0) throws IOException {
    }
    @Override public void write(    DataOutput arg0) throws IOException {
    }
  }
static class GeneratorRecordReader extends RecordReader<BytesWritable,NullWritable> {
    private long count;
    private long numNodes;
    private Random rand;
    @Override public void close() throws IOException {
    }
    @Override public BytesWritable getCurrentKey() throws IOException, InterruptedException {
      byte[] bytes=new byte[ROWKEY_LENGTH];
      rand.nextBytes(bytes);
      return new BytesWritable(bytes);
    }
    @Override public NullWritable getCurrentValue() throws IOException, InterruptedException {
      return NullWritable.get();
    }
    @Override public float getProgress() throws IOException, InterruptedException {
      return (float)(count / (double)numNodes);
    }
    @Override public void initialize(    InputSplit arg0,    TaskAttemptContext context) throws IOException, InterruptedException {
      numNodes=context.getConfiguration().getLong(GENERATOR_NUM_ROWS_PER_MAP_KEY,25000000);
      rand=new SecureRandom();
    }
    @Override public boolean nextKeyValue() throws IOException, InterruptedException {
      return count++ < numNodes;
    }
  }
  @Override public RecordReader<BytesWritable,NullWritable> createRecordReader(  InputSplit split,  TaskAttemptContext context) throws IOException, InterruptedException {
    GeneratorRecordReader rr=new GeneratorRecordReader();
    rr.initialize(split,context);
    return rr;
  }
  @Override public List<InputSplit> getSplits(  JobContext job) throws IOException, InterruptedException {
    int numMappers=job.getConfiguration().getInt(GENERATOR_NUM_MAPPERS_KEY,1);
    ArrayList<InputSplit> splits=new ArrayList<>(numMappers);
    for (int i=0; i < numMappers; i++) {
      splits.add(new GeneratorInputSplit());
    }
    return splits;
  }
}
