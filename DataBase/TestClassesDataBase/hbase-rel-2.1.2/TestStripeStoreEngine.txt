@Category({RegionServerTests.class,SmallTests.class}) public class TestStripeStoreEngine {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestStripeStoreEngine.class);
  @Test public void testCreateBasedOnConfig() throws Exception {
    Configuration conf=HBaseConfiguration.create();
    conf.set(StoreEngine.STORE_ENGINE_CLASS_KEY,TestStoreEngine.class.getName());
    StripeStoreEngine se=createEngine(conf);
    assertTrue(se.getCompactionPolicy() instanceof StripeCompactionPolicy);
  }
public static class TestStoreEngine extends StripeStoreEngine {
    public void setCompactorOverride(    StripeCompactor compactorOverride){
      this.compactor=compactorOverride;
    }
  }
  @Test public void testCompactionContextForceSelect() throws Exception {
    Configuration conf=HBaseConfiguration.create();
    int targetCount=2;
    conf.setInt(StripeStoreConfig.INITIAL_STRIPE_COUNT_KEY,targetCount);
    conf.setInt(StripeStoreConfig.MIN_FILES_L0_KEY,2);
    conf.set(StoreEngine.STORE_ENGINE_CLASS_KEY,TestStoreEngine.class.getName());
    TestStoreEngine se=createEngine(conf);
    StripeCompactor mockCompactor=mock(StripeCompactor.class);
    se.setCompactorOverride(mockCompactor);
    when(mockCompactor.compact(any(),anyInt(),anyLong(),any(),any(),any(),any(),any(),any())).thenReturn(new ArrayList<>());
    HStoreFile sf=createFile();
    ArrayList<HStoreFile> compactUs=al(sf,createFile(),createFile());
    se.getStoreFileManager().loadFiles(compactUs);
    CompactionContext compaction=se.createCompaction();
    compaction.select(al(),false,false,false);
    assertEquals(3,compaction.getRequest().getFiles().size());
    compactUs.remove(sf);
    CompactionRequestImpl req=new CompactionRequestImpl(compactUs);
    compaction.forceSelect(req);
    assertEquals(2,compaction.getRequest().getFiles().size());
    assertFalse(compaction.getRequest().getFiles().contains(sf));
    compaction.compact(NoLimitThroughputController.INSTANCE,null);
    verify(mockCompactor,times(1)).compact(compaction.getRequest(),targetCount,0L,StripeStoreFileManager.OPEN_KEY,StripeStoreFileManager.OPEN_KEY,null,null,NoLimitThroughputController.INSTANCE,null);
  }
  private static HStoreFile createFile() throws Exception {
    HStoreFile sf=mock(HStoreFile.class);
    when(sf.getMetadataValue(any())).thenReturn(StripeStoreFileManager.INVALID_KEY);
    when(sf.getReader()).thenReturn(mock(StoreFileReader.class));
    when(sf.getPath()).thenReturn(new Path("moo"));
    when(sf.getBulkLoadTimestamp()).thenReturn(OptionalLong.empty());
    return sf;
  }
  private static TestStoreEngine createEngine(  Configuration conf) throws Exception {
    HStore store=mock(HStore.class);
    CellComparatorImpl kvComparator=mock(CellComparatorImpl.class);
    return (TestStoreEngine)StoreEngine.create(store,conf,kvComparator);
  }
  private static ArrayList<HStoreFile> al(  HStoreFile... sfs){
    return new ArrayList<>(Arrays.asList(sfs));
  }
}
