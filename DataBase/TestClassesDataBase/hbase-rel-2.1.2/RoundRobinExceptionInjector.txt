/** 
 * Rotates through the possible cache clearing and non-cache clearing exceptions for requests.
 */
public static class RoundRobinExceptionInjector extends ExceptionInjector {
  private int numReqs=-1;
  private int expCount=-1;
  private List<Throwable> metaCachePreservingExceptions=metaCachePreservingExceptions();
  @Override public void throwOnGet(  FakeRSRpcServices rpcServices,  ClientProtos.GetRequest request) throws ServiceException {
    throwSomeExceptions(rpcServices,request.getRegion());
  }
  @Override public void throwOnMutate(  FakeRSRpcServices rpcServices,  ClientProtos.MutateRequest request) throws ServiceException {
    throwSomeExceptions(rpcServices,request.getRegion());
  }
  @Override public void throwOnScan(  FakeRSRpcServices rpcServices,  ClientProtos.ScanRequest request) throws ServiceException {
    if (!request.hasScannerId()) {
      throwSomeExceptions(rpcServices,request.getRegion());
    }
  }
  /** 
 * Throw some exceptions. Mostly throw exceptions which do not clear meta cache. Periodically throw NotSevingRegionException which clears the meta cache.
 * @throws ServiceException
 */
  private void throwSomeExceptions(  FakeRSRpcServices rpcServices,  HBaseProtos.RegionSpecifier regionSpec) throws ServiceException {
    if (!isTestTable(rpcServices,regionSpec)) {
      return;
    }
    numReqs++;
    if (numReqs % 5 == 0) {
      return;
    }
 else     if (numReqs % 5 == 1 || numReqs % 5 == 2) {
      throw new ServiceException(new NotServingRegionException());
    }
    expCount++;
    Throwable t=metaCachePreservingExceptions.get(expCount % metaCachePreservingExceptions.size());
    throw new ServiceException(t);
  }
}
