/** 
 * Test enable RSGroup
 */
@Category({MediumTests.class}) public class TestEnableRSGroup {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestEnableRSGroup.class);
  protected static final Logger LOG=LoggerFactory.getLogger(TestEnableRSGroup.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  @BeforeClass public static void setUp() throws Exception {
    final Configuration conf=TEST_UTIL.getConfiguration();
    conf.setBoolean(CoprocessorHost.COPROCESSORS_ENABLED_CONF_KEY,true);
    TEST_UTIL.startMiniCluster(5);
  }
  @AfterClass public static void tearDown() throws Exception {
    LOG.info("to stop miniCluster");
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testEnableRSGroup() throws IOException, InterruptedException {
    TEST_UTIL.getMiniHBaseCluster().stopMaster(0);
    TEST_UTIL.getMiniHBaseCluster().waitOnMaster(0);
    LOG.info("stopped master...");
    final Configuration conf=TEST_UTIL.getMiniHBaseCluster().getConfiguration();
    conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,RSGroupAdminEndpoint.class.getName());
    conf.set(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,RSGroupBasedLoadBalancer.class.getName());
    TEST_UTIL.getMiniHBaseCluster().startMaster();
    TEST_UTIL.getMiniHBaseCluster().waitForActiveAndReadyMaster(60000);
    LOG.info("started master...");
    assertTrue(TEST_UTIL.getMiniHBaseCluster().getMaster() != null);
    RSGroupBasedLoadBalancer loadBalancer=(RSGroupBasedLoadBalancer)TEST_UTIL.getMiniHBaseCluster().getMaster().getLoadBalancer();
    long start=System.currentTimeMillis();
    while (System.currentTimeMillis() - start <= 60000 && !loadBalancer.isOnline()) {
      LOG.info("waiting for rsgroup load balancer onLine...");
      sleep(200);
    }
    assertTrue(loadBalancer.isOnline());
  }
}
