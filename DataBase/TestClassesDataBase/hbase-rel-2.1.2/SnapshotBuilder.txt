public static class SnapshotBuilder {
  private final RegionData[] tableRegions;
  private final SnapshotProtos.SnapshotDescription desc;
  private final TableDescriptor htd;
  private final Configuration conf;
  private final FileSystem fs;
  private final Path rootDir;
  private Path snapshotDir;
  private int snapshotted=0;
  public SnapshotBuilder(  final Configuration conf,  final FileSystem fs,  final Path rootDir,  final TableDescriptor htd,  final SnapshotProtos.SnapshotDescription desc,  final RegionData[] tableRegions) throws IOException {
    this.fs=fs;
    this.conf=conf;
    this.rootDir=rootDir;
    this.htd=htd;
    this.desc=desc;
    this.tableRegions=tableRegions;
    this.snapshotDir=SnapshotDescriptionUtils.getWorkingSnapshotDir(desc,rootDir);
    new FSTableDescriptors(conf).createTableDescriptorForTableDirectory(snapshotDir,htd,false);
  }
  public TableDescriptor getTableDescriptor(){
    return this.htd;
  }
  public SnapshotProtos.SnapshotDescription getSnapshotDescription(){
    return this.desc;
  }
  public Path getSnapshotsDir(){
    return this.snapshotDir;
  }
  public Path[] addRegion() throws IOException {
    return addRegion(desc);
  }
  public Path[] addRegionV1() throws IOException {
    return addRegion(desc.toBuilder().setVersion(SnapshotManifestV1.DESCRIPTOR_VERSION).build());
  }
  public Path[] addRegionV2() throws IOException {
    return addRegion(desc.toBuilder().setVersion(SnapshotManifestV2.DESCRIPTOR_VERSION).build());
  }
  private Path[] addRegion(  final SnapshotProtos.SnapshotDescription desc) throws IOException {
    if (this.snapshotted == tableRegions.length) {
      throw new UnsupportedOperationException("No more regions in the table");
    }
    RegionData regionData=tableRegions[this.snapshotted++];
    ForeignExceptionDispatcher monitor=new ForeignExceptionDispatcher(desc.getName());
    SnapshotManifest manifest=SnapshotManifest.create(conf,fs,snapshotDir,desc,monitor);
    manifest.addRegion(regionData.tableDir,regionData.hri);
    return regionData.files;
  }
  private void corruptFile(  Path p) throws IOException {
    String manifestName=p.getName();
    Path newP=new Path(p.getParent(),manifestName + "1");
    fs.rename(p,newP);
    FSDataOutputStream out=fs.create(p);
    FSDataInputStream input=fs.open(newP);
    byte[] buffer=new byte[25];
    int len=input.read(0,buffer,0,25);
    if (len > 1) {
      out.write(buffer,0,len - 1);
    }
    out.close();
    fs.delete(newP);
  }
  /** 
 * Corrupt one region-manifest file
 * @throws IOException on unexecpted error from the FS
 */
  public void corruptOneRegionManifest() throws IOException {
    FileStatus[] manifestFiles=FSUtils.listStatus(fs,snapshotDir,new PathFilter(){
      @Override public boolean accept(      Path path){
        return path.getName().startsWith(SnapshotManifestV2.SNAPSHOT_MANIFEST_PREFIX);
      }
    }
);
    if (manifestFiles.length == 0)     return;
    Path p=manifestFiles[0].getPath();
    corruptFile(p);
  }
  public void missOneRegionSnapshotFile() throws IOException {
    FileStatus[] manifestFiles=FSUtils.listStatus(fs,snapshotDir);
    for (    FileStatus fileStatus : manifestFiles) {
      String fileName=fileStatus.getPath().getName();
      if (fileName.endsWith(SnapshotDescriptionUtils.SNAPSHOTINFO_FILE) || fileName.endsWith(".tabledesc") || fileName.endsWith(SnapshotDescriptionUtils.SNAPSHOT_TMP_DIR_NAME)) {
        fs.delete(fileStatus.getPath(),true);
      }
    }
  }
  /** 
 * Corrupt data-manifest file
 * @throws IOException on unexecpted error from the FS
 */
  public void corruptDataManifest() throws IOException {
    FileStatus[] manifestFiles=FSUtils.listStatus(fs,snapshotDir,new PathFilter(){
      @Override public boolean accept(      Path path){
        return path.getName().startsWith(SnapshotManifest.DATA_MANIFEST_NAME);
      }
    }
);
    if (manifestFiles.length == 0)     return;
    Path p=manifestFiles[0].getPath();
    corruptFile(p);
  }
  public Path commit() throws IOException {
    ForeignExceptionDispatcher monitor=new ForeignExceptionDispatcher(desc.getName());
    SnapshotManifest manifest=SnapshotManifest.create(conf,fs,snapshotDir,desc,monitor);
    manifest.addTableDescriptor(htd);
    manifest.consolidate();
    SnapshotDescriptionUtils.completeSnapshot(desc,rootDir,snapshotDir,fs);
    snapshotDir=SnapshotDescriptionUtils.getCompletedSnapshotDir(desc,rootDir);
    return snapshotDir;
  }
  public void consolidate() throws IOException {
    ForeignExceptionDispatcher monitor=new ForeignExceptionDispatcher(desc.getName());
    SnapshotManifest manifest=SnapshotManifest.create(conf,fs,snapshotDir,desc,monitor);
    manifest.addTableDescriptor(htd);
    manifest.consolidate();
  }
}
