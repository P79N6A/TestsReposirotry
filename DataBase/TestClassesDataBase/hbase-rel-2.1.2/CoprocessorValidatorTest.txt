@Category({SmallTests.class}) @SuppressWarnings("deprecation") public class CoprocessorValidatorTest {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(CoprocessorValidatorTest.class);
  private CoprocessorValidator validator;
  public CoprocessorValidatorTest(){
    validator=new CoprocessorValidator();
    validator.setConf(HBaseConfiguration.create());
  }
  private static ClassLoader getClassLoader(){
    return CoprocessorValidatorTest.class.getClassLoader();
  }
  private static String getFullClassName(  String className){
    return CoprocessorValidatorTest.class.getName() + "$" + className;
  }
  private List<CoprocessorViolation> validateClass(  String className){
    ClassLoader classLoader=getClass().getClassLoader();
    return validateClass(classLoader,className);
  }
  private List<CoprocessorViolation> validateClass(  ClassLoader classLoader,  String className){
    List<String> classNames=Lists.newArrayList(getFullClassName(className));
    List<CoprocessorViolation> violations=new ArrayList<>();
    validator.validateClasses(classLoader,classNames,violations);
    return violations;
  }
  @Test public void testNoSuchClass() throws IOException {
    List<CoprocessorViolation> violations=validateClass("NoSuchClass");
    assertEquals(1,violations.size());
    CoprocessorViolation violation=violations.get(0);
    assertEquals(getFullClassName("NoSuchClass"),violation.getClassName());
    assertEquals(Severity.ERROR,violation.getSeverity());
    String stackTrace=Throwables.getStackTraceAsString(violation.getThrowable());
    assertTrue(stackTrace.contains("java.lang.ClassNotFoundException: " + "org.apache.hadoop.hbase.tool.coprocessor.CoprocessorValidatorTest$NoSuchClass"));
  }
private static class MissingClass {
  }
@SuppressWarnings("unused") private static class MissingClassObserver {
    public void method(    MissingClass missingClass){
    }
  }
private static class MissingClassClassLoader extends ClassLoader {
    public MissingClassClassLoader(){
      super(getClassLoader());
    }
    @Override public Class<?> loadClass(    String name) throws ClassNotFoundException {
      if (name.equals(getFullClassName("MissingClass"))) {
        throw new ClassNotFoundException(name);
      }
      return super.findClass(name);
    }
  }
  @Test public void testMissingClass() throws IOException {
    MissingClassClassLoader missingClassClassLoader=new MissingClassClassLoader();
    List<CoprocessorViolation> violations=validateClass(missingClassClassLoader,"MissingClassObserver");
    assertEquals(1,violations.size());
    CoprocessorViolation violation=violations.get(0);
    assertEquals(getFullClassName("MissingClassObserver"),violation.getClassName());
    assertEquals(Severity.ERROR,violation.getSeverity());
    String stackTrace=Throwables.getStackTraceAsString(violation.getThrowable());
    assertTrue(stackTrace.contains("java.lang.ClassNotFoundException: " + "org.apache.hadoop.hbase.tool.coprocessor.CoprocessorValidatorTest$MissingClass"));
  }
@SuppressWarnings("unused") private static class ObsoleteMethodObserver {
    public void preCreateTable(    ObserverContext<MasterCoprocessorEnvironment> ctx,    HTableDescriptor desc,    HRegionInfo[] regions) throws IOException {
    }
  }
  @Test public void testObsoleteMethod() throws IOException {
    List<CoprocessorViolation> violations=validateClass("ObsoleteMethodObserver");
    assertEquals(1,violations.size());
    CoprocessorViolation violation=violations.get(0);
    assertEquals(Severity.WARNING,violation.getSeverity());
    assertEquals(getFullClassName("ObsoleteMethodObserver"),violation.getClassName());
    assertTrue(violation.getMessage().contains("was removed from new coprocessor API"));
  }
  private List<CoprocessorViolation> validateTable(  String jarFile,  String className) throws IOException {
    Pattern pattern=Pattern.compile(".*");
    Admin admin=mock(Admin.class);
    TableDescriptor tableDescriptor=mock(TableDescriptor.class);
    List<TableDescriptor> tableDescriptors=Lists.newArrayList(tableDescriptor);
    doReturn(tableDescriptors).when(admin).listTableDescriptors(pattern);
    CoprocessorDescriptor coprocessorDescriptor=mock(CoprocessorDescriptor.class);
    List<CoprocessorDescriptor> coprocessorDescriptors=Lists.newArrayList(coprocessorDescriptor);
    doReturn(coprocessorDescriptors).when(tableDescriptor).getCoprocessorDescriptors();
    doReturn(getFullClassName(className)).when(coprocessorDescriptor).getClassName();
    doReturn(Optional.ofNullable(jarFile)).when(coprocessorDescriptor).getJarPath();
    List<CoprocessorViolation> violations=new ArrayList<>();
    validator.validateTables(getClassLoader(),admin,pattern,violations);
    return violations;
  }
  @Test public void testTableNoSuchClass() throws IOException {
    List<CoprocessorViolation> violations=validateTable(null,"NoSuchClass");
    assertEquals(1,violations.size());
    CoprocessorViolation violation=violations.get(0);
    assertEquals(getFullClassName("NoSuchClass"),violation.getClassName());
    assertEquals(Severity.ERROR,violation.getSeverity());
    String stackTrace=Throwables.getStackTraceAsString(violation.getThrowable());
    assertTrue(stackTrace.contains("java.lang.ClassNotFoundException: " + "org.apache.hadoop.hbase.tool.coprocessor.CoprocessorValidatorTest$NoSuchClass"));
  }
  @Test public void testTableMissingJar() throws IOException {
    List<CoprocessorViolation> violations=validateTable("no such file","NoSuchClass");
    assertEquals(1,violations.size());
    CoprocessorViolation violation=violations.get(0);
    assertEquals(getFullClassName("NoSuchClass"),violation.getClassName());
    assertEquals(Severity.ERROR,violation.getSeverity());
    assertTrue(violation.getMessage().contains("could not validate jar file 'no such file'"));
  }
  @Test public void testTableValidJar() throws IOException {
    Path outputDirectory=Paths.get("target","test-classes");
    String className=getFullClassName("ObsoleteMethodObserver");
    Path classFile=Paths.get(className.replace('.','/') + ".class");
    Path fullClassFile=outputDirectory.resolve(classFile);
    Path tempJarFile=Files.createTempFile("coprocessor-validator-test-",".jar");
    try {
      try (OutputStream fileStream=Files.newOutputStream(tempJarFile);JarOutputStream jarStream=new JarOutputStream(fileStream);InputStream classStream=Files.newInputStream(fullClassFile)){
        ZipEntry entry=new ZipEntry(classFile.toString());
        jarStream.putNextEntry(entry);
        ByteStreams.copy(classStream,jarStream);
      }
       String tempJarFileUri=tempJarFile.toUri().toString();
      List<CoprocessorViolation> violations=validateTable(tempJarFileUri,"ObsoleteMethodObserver");
      assertEquals(1,violations.size());
      CoprocessorViolation violation=violations.get(0);
      assertEquals(getFullClassName("ObsoleteMethodObserver"),violation.getClassName());
      assertEquals(Severity.WARNING,violation.getSeverity());
      assertTrue(violation.getMessage().contains("was removed from new coprocessor API"));
    }
  finally {
      Files.delete(tempJarFile);
    }
  }
}
