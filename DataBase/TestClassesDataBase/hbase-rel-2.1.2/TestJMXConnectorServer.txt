/** 
 * Test case for JMX Connector Server.
 */
@Category({MiscTests.class,MediumTests.class}) public class TestJMXConnectorServer {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestJMXConnectorServer.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestJMXConnectorServer.class);
  private static HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static Configuration conf=null;
  private static Admin admin;
  private static int rmiRegistryPort=61120;
  static boolean hasAccess;
  @Before public void setUp() throws Exception {
    UTIL=new HBaseTestingUtility();
    conf=UTIL.getConfiguration();
  }
  @After public void tearDown() throws Exception {
    hasAccess=true;
    admin.close();
    UTIL.shutdownMiniCluster();
  }
  /** 
 * This tests to validate the HMaster's ConnectorServer after unauthorised stopMaster call.
 */
  @Test public void testHMConnectorServerWhenStopMaster() throws Exception {
    conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,JMXListener.class.getName() + "," + MyAccessController.class.getName());
    conf.setInt("master.rmi.registry.port",rmiRegistryPort);
    UTIL.startMiniCluster();
    admin=UTIL.getConnection().getAdmin();
    boolean accessDenied=false;
    try {
      hasAccess=false;
      LOG.info("Stopping HMaster...");
      admin.stopMaster();
    }
 catch (    AccessDeniedException e) {
      LOG.info("Exception occurred while stopping HMaster. ",e);
      accessDenied=true;
    }
    Assert.assertTrue(accessDenied);
    JMXConnector connector=null;
    try {
      connector=JMXConnectorFactory.connect(JMXListener.buildJMXServiceURL(rmiRegistryPort,rmiRegistryPort));
    }
 catch (    IOException e) {
      if (e.getCause() instanceof ServiceUnavailableException) {
        Assert.fail("Can't connect to HMaster ConnectorServer.");
      }
    }
    Assert.assertNotNull("JMXConnector should not be null.",connector);
    connector.close();
  }
  /** 
 * This tests to validate the RegionServer's ConnectorServer after unauthorised stopRegionServer call.
 */
  @Test public void testRSConnectorServerWhenStopRegionServer() throws Exception {
    conf.set(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY,JMXListener.class.getName() + "," + MyAccessController.class.getName());
    conf.setInt("regionserver.rmi.registry.port",rmiRegistryPort);
    UTIL.startMiniCluster();
    admin=UTIL.getConnection().getAdmin();
    hasAccess=false;
    ServerName serverName=UTIL.getHBaseCluster().getRegionServer(0).getServerName();
    LOG.info("Stopping Region Server...");
    admin.stopRegionServer(serverName.getHostname() + ":" + serverName.getPort());
    JMXConnector connector=null;
    try {
      connector=JMXConnectorFactory.connect(JMXListener.buildJMXServiceURL(rmiRegistryPort,rmiRegistryPort));
    }
 catch (    IOException e) {
      if (e.getCause() instanceof ServiceUnavailableException) {
        Assert.fail("Can't connect to Region Server ConnectorServer.");
      }
    }
    Assert.assertNotNull("JMXConnector should not be null.",connector);
    connector.close();
  }
  /** 
 * This tests to validate the HMaster's ConnectorServer after unauthorised shutdown call.
 */
  @Test public void testHMConnectorServerWhenShutdownCluster() throws Exception {
    conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,JMXListener.class.getName() + "," + MyAccessController.class.getName());
    conf.setInt("master.rmi.registry.port",rmiRegistryPort);
    UTIL.startMiniCluster();
    admin=UTIL.getConnection().getAdmin();
    boolean accessDenied=false;
    try {
      hasAccess=false;
      LOG.info("Stopping HMaster...");
      admin.shutdown();
    }
 catch (    AccessDeniedException e) {
      LOG.error("Exception occurred while stopping HMaster. ",e);
      accessDenied=true;
    }
    Assert.assertTrue(accessDenied);
    JMXConnector connector=null;
    try {
      connector=JMXConnectorFactory.connect(JMXListener.buildJMXServiceURL(rmiRegistryPort,rmiRegistryPort));
    }
 catch (    IOException e) {
      if (e.getCause() instanceof ServiceUnavailableException) {
        Assert.fail("Can't connect to HMaster ConnectorServer.");
      }
    }
    Assert.assertNotNull("JMXConnector should not be null.",connector);
    connector.close();
  }
public static class MyAccessController extends AccessController {
    @Override public void postStartMaster(    ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
    }
    @Override public void preStopMaster(    ObserverContext<MasterCoprocessorEnvironment> c) throws IOException {
      if (!hasAccess) {
        throw new AccessDeniedException("Insufficient permissions to stop master");
      }
    }
    @Override public void preStopRegionServer(    ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
      if (!hasAccess) {
        throw new AccessDeniedException("Insufficient permissions to stop region server.");
      }
    }
    @Override public void preShutdown(    ObserverContext<MasterCoprocessorEnvironment> c) throws IOException {
      if (!hasAccess) {
        throw new AccessDeniedException("Insufficient permissions to shut down cluster.");
      }
    }
    @Override public void preExecuteProcedures(    ObserverContext<RegionServerCoprocessorEnvironment> ctx) throws IOException {
    }
  }
}
