@Category({SmallTests.class}) public class TestCoprocessorHost {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCoprocessorHost.class);
  /** 
 * An  {@link Abortable} implementation for tests.
 */
private static class TestAbortable implements Abortable {
    private volatile boolean aborted=false;
    @Override public void abort(    String why,    Throwable e){
      this.aborted=true;
      Assert.fail();
    }
    @Override public boolean isAborted(){
      return this.aborted;
    }
  }
  @Test public void testDoubleLoadingAndPriorityValue(){
    final Configuration conf=HBaseConfiguration.create();
    final String key="KEY";
    final String coprocessor="org.apache.hadoop.hbase.coprocessor.SimpleRegionObserver";
    CoprocessorHost<RegionCoprocessor,CoprocessorEnvironment<RegionCoprocessor>> host;
    host=new CoprocessorHostForTest<>(conf);
    conf.setStrings(key,coprocessor,coprocessor,coprocessor,SimpleRegionObserverV2.class.getName());
    host.loadSystemCoprocessors(conf,key);
    Assert.assertEquals(2,host.coprocEnvironments.size());
    CoprocessorEnvironment<?> simpleEnv=host.findCoprocessorEnvironment(SimpleRegionObserver.class.getName());
    CoprocessorEnvironment<?> simpleEnv_v2=host.findCoprocessorEnvironment(SimpleRegionObserverV2.class.getName());
    assertNotNull(simpleEnv);
    assertNotNull(simpleEnv_v2);
    assertEquals(Coprocessor.PRIORITY_SYSTEM,simpleEnv.getPriority());
    assertEquals(Coprocessor.PRIORITY_SYSTEM + 1,simpleEnv_v2.getPriority());
  }
public static class SimpleRegionObserverV2 extends SimpleRegionObserver {
  }
private static class CoprocessorHostForTest<E extends Coprocessor> extends CoprocessorHost<E,CoprocessorEnvironment<E>> {
    final Configuration cpHostConf;
    public CoprocessorHostForTest(    Configuration conf){
      super(new TestAbortable());
      cpHostConf=conf;
    }
    @Override public E checkAndGetInstance(    Class<?> implClass) throws InstantiationException, IllegalAccessException {
      try {
        return (E)implClass.getDeclaredConstructor().newInstance();
      }
 catch (      InvocationTargetException|NoSuchMethodException e) {
        throw (InstantiationException)new InstantiationException().initCause(e);
      }
    }
    @Override public CoprocessorEnvironment<E> createEnvironment(    final E instance,    final int priority,    int sequence,    Configuration conf){
      return new BaseEnvironment<>(instance,priority,0,cpHostConf);
    }
  }
}
