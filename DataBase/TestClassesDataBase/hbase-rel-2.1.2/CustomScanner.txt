private static class CustomScanner implements RegionScanner {
  private RegionScanner delegate;
  public CustomScanner(  RegionScanner delegate){
    this.delegate=delegate;
  }
  @Override public boolean next(  List<Cell> results) throws IOException {
    return delegate.next(results);
  }
  @Override public boolean next(  List<Cell> result,  ScannerContext scannerContext) throws IOException {
    return delegate.next(result,scannerContext);
  }
  @Override public boolean nextRaw(  List<Cell> result) throws IOException {
    return delegate.nextRaw(result);
  }
  @Override public boolean nextRaw(  List<Cell> result,  ScannerContext context) throws IOException {
    boolean nextRaw=delegate.nextRaw(result,context);
    if (compactionLatch != null && compactionLatch.getCount() > 0) {
      try {
        compactionLatch.await();
      }
 catch (      InterruptedException ie) {
      }
    }
    if (CustomInnerRegionObserver.throwException.get()) {
      if (exceptionLatch.getCount() > 0) {
        try {
          exceptionLatch.await();
        }
 catch (        InterruptedException e) {
        }
        throw new IOException("throw exception");
      }
    }
    return nextRaw;
  }
  @Override public void close() throws IOException {
    delegate.close();
  }
  @Override public RegionInfo getRegionInfo(){
    return delegate.getRegionInfo();
  }
  @Override public boolean isFilterDone() throws IOException {
    return delegate.isFilterDone();
  }
  @Override public boolean reseek(  byte[] row) throws IOException {
    return false;
  }
  @Override public long getMaxResultSize(){
    return delegate.getMaxResultSize();
  }
  @Override public long getMvccReadPoint(){
    return delegate.getMvccReadPoint();
  }
  @Override public int getBatch(){
    return delegate.getBatch();
  }
}
