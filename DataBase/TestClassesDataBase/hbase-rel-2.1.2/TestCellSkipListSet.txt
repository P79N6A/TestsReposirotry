@Category({RegionServerTests.class,SmallTests.class}) public class TestCellSkipListSet extends TestCase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCellSkipListSet.class);
  private final CellSet csls=new CellSet(CellComparatorImpl.COMPARATOR);
  @Override protected void setUp() throws Exception {
    super.setUp();
    this.csls.clear();
  }
  public void testAdd() throws Exception {
    byte[] bytes=Bytes.toBytes(getName());
    KeyValue kv=new KeyValue(bytes,bytes,bytes,bytes);
    this.csls.add(kv);
    assertTrue(this.csls.contains(kv));
    assertEquals(1,this.csls.size());
    Cell first=this.csls.first();
    assertTrue(kv.equals(first));
    assertTrue(Bytes.equals(kv.getValueArray(),kv.getValueOffset(),kv.getValueLength(),first.getValueArray(),first.getValueOffset(),first.getValueLength()));
    byte[] overwriteValue=Bytes.toBytes("overwrite");
    KeyValue overwrite=new KeyValue(bytes,bytes,bytes,overwriteValue);
    this.csls.add(overwrite);
    assertEquals(1,this.csls.size());
    first=this.csls.first();
    assertTrue(Bytes.equals(overwrite.getValueArray(),overwrite.getValueOffset(),overwrite.getValueLength(),first.getValueArray(),first.getValueOffset(),first.getValueLength()));
    assertFalse(Bytes.equals(CellUtil.cloneValue(overwrite),CellUtil.cloneValue(kv)));
  }
  public void testIterator() throws Exception {
    byte[] bytes=Bytes.toBytes(getName());
    byte[] value1=Bytes.toBytes("1");
    byte[] value2=Bytes.toBytes("2");
    final int total=3;
    for (int i=0; i < total; i++) {
      this.csls.add(new KeyValue(bytes,bytes,Bytes.toBytes("" + i),value1));
    }
    int count=0;
    for (    Cell kv : this.csls) {
      assertEquals("" + count,Bytes.toString(kv.getQualifierArray(),kv.getQualifierOffset(),kv.getQualifierLength()));
      assertTrue(Bytes.equals(kv.getValueArray(),kv.getValueOffset(),kv.getValueLength(),value1,0,value1.length));
      count++;
    }
    assertEquals(total,count);
    for (int i=0; i < total; i++) {
      this.csls.add(new KeyValue(bytes,bytes,Bytes.toBytes("" + i),value2));
    }
    count=0;
    for (    Cell kv : this.csls) {
      assertEquals("" + count,Bytes.toString(kv.getQualifierArray(),kv.getQualifierOffset(),kv.getQualifierLength()));
      assertTrue(Bytes.equals(kv.getValueArray(),kv.getValueOffset(),kv.getValueLength(),value2,0,value2.length));
      count++;
    }
    assertEquals(total,count);
  }
  public void testDescendingIterator() throws Exception {
    byte[] bytes=Bytes.toBytes(getName());
    byte[] value1=Bytes.toBytes("1");
    byte[] value2=Bytes.toBytes("2");
    final int total=3;
    for (int i=0; i < total; i++) {
      this.csls.add(new KeyValue(bytes,bytes,Bytes.toBytes("" + i),value1));
    }
    int count=0;
    for (Iterator<Cell> i=this.csls.descendingIterator(); i.hasNext(); ) {
      Cell kv=i.next();
      assertEquals("" + (total - (count + 1)),Bytes.toString(kv.getQualifierArray(),kv.getQualifierOffset(),kv.getQualifierLength()));
      assertTrue(Bytes.equals(kv.getValueArray(),kv.getValueOffset(),kv.getValueLength(),value1,0,value1.length));
      count++;
    }
    assertEquals(total,count);
    for (int i=0; i < total; i++) {
      this.csls.add(new KeyValue(bytes,bytes,Bytes.toBytes("" + i),value2));
    }
    count=0;
    for (Iterator<Cell> i=this.csls.descendingIterator(); i.hasNext(); ) {
      Cell kv=i.next();
      assertEquals("" + (total - (count + 1)),Bytes.toString(kv.getQualifierArray(),kv.getQualifierOffset(),kv.getQualifierLength()));
      assertTrue(Bytes.equals(kv.getValueArray(),kv.getValueOffset(),kv.getValueLength(),value2,0,value2.length));
      count++;
    }
    assertEquals(total,count);
  }
  public void testHeadTail() throws Exception {
    byte[] bytes=Bytes.toBytes(getName());
    byte[] value1=Bytes.toBytes("1");
    byte[] value2=Bytes.toBytes("2");
    final int total=3;
    KeyValue splitter=null;
    for (int i=0; i < total; i++) {
      KeyValue kv=new KeyValue(bytes,bytes,Bytes.toBytes("" + i),value1);
      if (i == 1)       splitter=kv;
      this.csls.add(kv);
    }
    SortedSet<Cell> tail=this.csls.tailSet(splitter);
    assertEquals(2,tail.size());
    SortedSet<Cell> head=this.csls.headSet(splitter);
    assertEquals(1,head.size());
    for (int i=0; i < total; i++) {
      this.csls.add(new KeyValue(bytes,bytes,Bytes.toBytes("" + i),value2));
    }
    tail=this.csls.tailSet(splitter);
    assertTrue(Bytes.equals(tail.first().getValueArray(),tail.first().getValueOffset(),tail.first().getValueLength(),value2,0,value2.length));
    head=this.csls.headSet(splitter);
    assertTrue(Bytes.equals(head.first().getValueArray(),head.first().getValueOffset(),head.first().getValueLength(),value2,0,value2.length));
  }
}
