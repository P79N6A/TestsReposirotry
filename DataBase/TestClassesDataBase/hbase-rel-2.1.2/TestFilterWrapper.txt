/** 
 * Test if the FilterWrapper retains the same semantics defined in the {@link org.apache.hadoop.hbase.filter.Filter}
 */
@Category({FilterTests.class,MediumTests.class}) public class TestFilterWrapper {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestFilterWrapper.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestFilterWrapper.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static Configuration conf=null;
  private static Admin admin=null;
  private static TableName name=TableName.valueOf("test");
  private static Connection connection;
  @Test public void testFilterWrapper(){
    int kv_number=0;
    int row_number=0;
    try {
      Scan scan=new Scan();
      List<Filter> fs=new ArrayList<>();
      DependentColumnFilter f1=new DependentColumnFilter(Bytes.toBytes("f1"),Bytes.toBytes("c5"),true,CompareOperator.EQUAL,new SubstringComparator("c5"));
      PageFilter f2=new PageFilter(2);
      fs.add(f1);
      fs.add(f2);
      FilterList filter=new FilterList(fs);
      scan.setFilter(filter);
      Table table=connection.getTable(name);
      ResultScanner scanner=table.getScanner(scan);
      for (      Result result : scanner) {
        row_number++;
        for (        Cell kv : result.listCells()) {
          LOG.debug(kv_number + ". kv: " + kv);
          kv_number++;
          assertEquals("Returned row is not correct",new String(CellUtil.cloneRow(kv)),"row" + (row_number + 1));
        }
      }
      scanner.close();
      table.close();
    }
 catch (    Exception e) {
      assertNull("Exception happens in scan",e);
    }
    LOG.debug("check the fetched kv number");
    assertEquals("We should get 8 results returned.",8,kv_number);
    assertEquals("We should get 2 rows returned",2,row_number);
  }
  private static void prepareData(){
    try {
      Table table=connection.getTable(name);
      assertTrue("Fail to create the table",admin.tableExists(name));
      List<Put> puts=new ArrayList<>();
      for (int i=1; i < 4; i++) {
        Put put=new Put(Bytes.toBytes("row" + i));
        for (int j=1; j < 6; j++) {
          long timestamp=j;
          if (i != 1)           timestamp=i;
          put.addColumn(Bytes.toBytes("f1"),Bytes.toBytes("c" + j),timestamp,Bytes.toBytes(i + "_c" + j));
        }
        puts.add(put);
      }
      table.put(puts);
      table.close();
    }
 catch (    IOException e) {
      assertNull("Exception found while putting data into table",e);
    }
  }
  private static void createTable(){
    assertNotNull("HBaseAdmin is not initialized successfully.",admin);
    if (admin != null) {
      HTableDescriptor desc=new HTableDescriptor(name);
      HColumnDescriptor coldef=new HColumnDescriptor(Bytes.toBytes("f1"));
      desc.addFamily(coldef);
      try {
        admin.createTable(desc);
        assertTrue("Fail to create the table",admin.tableExists(name));
      }
 catch (      IOException e) {
        assertNull("Exception found while creating table",e);
      }
    }
  }
  private static void deleteTable(){
    if (admin != null) {
      try {
        admin.disableTable(name);
        admin.deleteTable(name);
      }
 catch (      IOException e) {
        assertNull("Exception found deleting the table",e);
      }
    }
  }
  private static void initialize(  Configuration conf){
    TestFilterWrapper.conf=HBaseConfiguration.create(conf);
    TestFilterWrapper.conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,1);
    try {
      connection=ConnectionFactory.createConnection(TestFilterWrapper.conf);
      admin=TEST_UTIL.getAdmin();
    }
 catch (    MasterNotRunningException e) {
      assertNull("Master is not running",e);
    }
catch (    ZooKeeperConnectionException e) {
      assertNull("Cannot connect to ZooKeeper",e);
    }
catch (    IOException e) {
      assertNull("Caught IOException",e);
    }
    createTable();
    prepareData();
  }
  @BeforeClass public static void setUp() throws Exception {
    TEST_UTIL.startMiniCluster(1);
    initialize(TEST_UTIL.getConfiguration());
  }
  @AfterClass public static void tearDown() throws Exception {
    deleteTable();
    connection.close();
    TEST_UTIL.shutdownMiniCluster();
  }
}
