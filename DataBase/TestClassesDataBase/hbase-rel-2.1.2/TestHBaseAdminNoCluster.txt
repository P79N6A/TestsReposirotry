@Category({SmallTests.class,ClientTests.class}) public class TestHBaseAdminNoCluster {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHBaseAdminNoCluster.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestHBaseAdminNoCluster.class);
  @Rule public TestName name=new TestName();
  /** 
 * Verify that PleaseHoldException gets retried. HBASE-8764
 */
  @Ignore @Test public void testMasterMonitorCallableRetries() throws MasterNotRunningException, ZooKeeperConnectionException, IOException, org.apache.hbase.thirdparty.com.google.protobuf.ServiceException {
    Configuration configuration=HBaseConfiguration.create();
    configuration.setLong(HConstants.HBASE_CLIENT_PAUSE,1);
    final int count=10;
    configuration.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,count);
    ClusterConnection connection=HConnectionTestingUtility.getMockedConnection(configuration);
    MasterKeepAliveConnection masterAdmin=Mockito.mock(MasterKeepAliveConnection.class);
    Mockito.when(masterAdmin.createTable((RpcController)Mockito.any(),(CreateTableRequest)Mockito.any())).thenThrow(new ServiceException("Test fail").initCause(new PleaseHoldException("test")));
    Mockito.when(connection.getMaster()).thenReturn(masterAdmin);
    Admin admin=new HBaseAdmin(connection);
    try {
      HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
      try {
        admin.createTable(htd,HBaseTestingUtility.KEYS_FOR_HBA_CREATE_TABLE);
        fail();
      }
 catch (      RetriesExhaustedException e) {
        LOG.info("Expected fail",e);
      }
      Mockito.verify(masterAdmin,Mockito.atLeast(count)).createTable((RpcController)Mockito.any(),(CreateTableRequest)Mockito.any());
    }
  finally {
      admin.close();
      if (connection != null)       connection.close();
    }
  }
  @Test public void testMasterOperationsRetries() throws Exception {
    testMasterOperationIsRetried(new MethodCaller(){
      @Override public void call(      Admin admin) throws Exception {
        admin.listTables();
      }
      @Override public void verify(      MasterKeepAliveConnection masterAdmin,      int count) throws Exception {
        Mockito.verify(masterAdmin,Mockito.atLeast(count)).getTableDescriptors((RpcController)Mockito.any(),(GetTableDescriptorsRequest)Mockito.any());
      }
    }
);
    testMasterOperationIsRetried(new MethodCaller(){
      @Override public void call(      Admin admin) throws Exception {
        admin.listTableNames();
      }
      @Override public void verify(      MasterKeepAliveConnection masterAdmin,      int count) throws Exception {
        Mockito.verify(masterAdmin,Mockito.atLeast(count)).getTableNames((RpcController)Mockito.any(),(GetTableNamesRequest)Mockito.any());
      }
    }
);
    testMasterOperationIsRetried(new MethodCaller(){
      @Override public void call(      Admin admin) throws Exception {
        admin.getTableDescriptor(TableName.valueOf(name.getMethodName()));
      }
      @Override public void verify(      MasterKeepAliveConnection masterAdmin,      int count) throws Exception {
        Mockito.verify(masterAdmin,Mockito.atLeast(count)).getTableDescriptors((RpcController)Mockito.any(),(GetTableDescriptorsRequest)Mockito.any());
      }
    }
);
    testMasterOperationIsRetried(new MethodCaller(){
      @Override public void call(      Admin admin) throws Exception {
        admin.getTableDescriptorsByTableName(new ArrayList<>());
      }
      @Override public void verify(      MasterKeepAliveConnection masterAdmin,      int count) throws Exception {
        Mockito.verify(masterAdmin,Mockito.atLeast(count)).getTableDescriptors((RpcController)Mockito.any(),(GetTableDescriptorsRequest)Mockito.any());
      }
    }
);
    testMasterOperationIsRetried(new MethodCaller(){
      @Override public void call(      Admin admin) throws Exception {
        admin.move(new byte[0],null);
      }
      @Override public void verify(      MasterKeepAliveConnection masterAdmin,      int count) throws Exception {
        Mockito.verify(masterAdmin,Mockito.atLeast(count)).moveRegion((RpcController)Mockito.any(),(MoveRegionRequest)Mockito.any());
      }
    }
);
    testMasterOperationIsRetried(new MethodCaller(){
      @Override public void call(      Admin admin) throws Exception {
        admin.offline(new byte[0]);
      }
      @Override public void verify(      MasterKeepAliveConnection masterAdmin,      int count) throws Exception {
        Mockito.verify(masterAdmin,Mockito.atLeast(count)).offlineRegion((RpcController)Mockito.any(),(OfflineRegionRequest)Mockito.any());
      }
    }
);
    testMasterOperationIsRetried(new MethodCaller(){
      @Override public void call(      Admin admin) throws Exception {
        admin.setBalancerRunning(true,true);
      }
      @Override public void verify(      MasterKeepAliveConnection masterAdmin,      int count) throws Exception {
        Mockito.verify(masterAdmin,Mockito.atLeast(count)).setBalancerRunning((RpcController)Mockito.any(),(SetBalancerRunningRequest)Mockito.any());
      }
    }
);
    testMasterOperationIsRetried(new MethodCaller(){
      @Override public void call(      Admin admin) throws Exception {
        admin.balancer();
      }
      @Override public void verify(      MasterKeepAliveConnection masterAdmin,      int count) throws Exception {
        Mockito.verify(masterAdmin,Mockito.atLeast(count)).balance((RpcController)Mockito.any(),(BalanceRequest)Mockito.any());
      }
    }
);
    testMasterOperationIsRetried(new MethodCaller(){
      @Override public void call(      Admin admin) throws Exception {
        admin.enableCatalogJanitor(true);
      }
      @Override public void verify(      MasterKeepAliveConnection masterAdmin,      int count) throws Exception {
        Mockito.verify(masterAdmin,Mockito.atLeast(count)).enableCatalogJanitor((RpcController)Mockito.any(),(EnableCatalogJanitorRequest)Mockito.any());
      }
    }
);
    testMasterOperationIsRetried(new MethodCaller(){
      @Override public void call(      Admin admin) throws Exception {
        admin.runCatalogScan();
      }
      @Override public void verify(      MasterKeepAliveConnection masterAdmin,      int count) throws Exception {
        Mockito.verify(masterAdmin,Mockito.atLeast(count)).runCatalogScan((RpcController)Mockito.any(),(RunCatalogScanRequest)Mockito.any());
      }
    }
);
    testMasterOperationIsRetried(new MethodCaller(){
      @Override public void call(      Admin admin) throws Exception {
        admin.isCatalogJanitorEnabled();
      }
      @Override public void verify(      MasterKeepAliveConnection masterAdmin,      int count) throws Exception {
        Mockito.verify(masterAdmin,Mockito.atLeast(count)).isCatalogJanitorEnabled((RpcController)Mockito.any(),(IsCatalogJanitorEnabledRequest)Mockito.any());
      }
    }
);
  }
private static interface MethodCaller {
    void call(    Admin admin) throws Exception ;
    void verify(    MasterKeepAliveConnection masterAdmin,    int count) throws Exception ;
  }
  private void testMasterOperationIsRetried(  MethodCaller caller) throws Exception {
    Configuration configuration=HBaseConfiguration.create();
    configuration.setLong(HConstants.HBASE_CLIENT_PAUSE,1);
    final int count=10;
    configuration.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,count);
    ClusterConnection connection=mock(ClusterConnection.class);
    when(connection.getConfiguration()).thenReturn(configuration);
    MasterKeepAliveConnection masterAdmin=Mockito.mock(MasterKeepAliveConnection.class,new Answer(){
      @Override public Object answer(      InvocationOnMock invocation) throws Throwable {
        if (invocation.getMethod().getName().equals("close")) {
          return null;
        }
        throw new MasterNotRunningException();
      }
    }
);
    Mockito.when(connection.getMaster()).thenReturn(masterAdmin);
    RpcControllerFactory rpcControllerFactory=Mockito.mock(RpcControllerFactory.class);
    Mockito.when(connection.getRpcControllerFactory()).thenReturn(rpcControllerFactory);
    Mockito.when(rpcControllerFactory.newController()).thenReturn(Mockito.mock(HBaseRpcController.class));
    RpcRetryingCallerFactory callerFactory=new RpcRetryingCallerFactory(configuration);
    Mockito.when(connection.getRpcRetryingCallerFactory()).thenReturn(callerFactory);
    Admin admin=null;
    try {
      admin=Mockito.spy(new HBaseAdmin(connection));
      Mockito.doReturn(null).when(((HBaseAdmin)admin)).getRegion(Matchers.<byte[]>any());
      try {
        caller.call(admin);
        fail();
      }
 catch (      RetriesExhaustedException e) {
        LOG.info("Expected fail",e);
      }
      caller.verify(masterAdmin,count);
    }
  finally {
      if (admin != null) {
        admin.close();
      }
    }
  }
}
