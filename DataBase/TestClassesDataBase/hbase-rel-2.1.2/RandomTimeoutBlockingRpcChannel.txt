/** 
 * Blocking rpc channel that goes via hbase rpc.
 */
static class RandomTimeoutBlockingRpcChannel extends AbstractRpcClient.BlockingRpcChannelImplementation {
  private static final Random RANDOM=new Random(System.currentTimeMillis());
  public static final double CHANCE_OF_TIMEOUT=0.3;
  private static AtomicInteger invokations=new AtomicInteger();
  RandomTimeoutBlockingRpcChannel(  final BlockingRpcClient rpcClient,  final ServerName sn,  final User ticket,  final int rpcTimeout){
    super(rpcClient,new InetSocketAddress(sn.getHostname(),sn.getPort()),ticket,rpcTimeout);
  }
  @Override public Message callBlockingMethod(  MethodDescriptor md,  RpcController controller,  Message param,  Message returnType) throws ServiceException {
    invokations.getAndIncrement();
    if (RANDOM.nextFloat() < CHANCE_OF_TIMEOUT) {
      throw new ServiceException(new SocketTimeoutException("fake timeout"));
    }
    return super.callBlockingMethod(md,controller,param,returnType);
  }
}
