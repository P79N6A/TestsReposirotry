@Category(LargeTests.class) public class TestFavoredStochasticBalancerPickers extends BalancerTestBase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestFavoredStochasticBalancerPickers.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestFavoredStochasticBalancerPickers.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final int SLAVES=6;
  private static final int REGIONS=SLAVES * 3;
  private static Configuration conf;
  private Admin admin;
  private MiniHBaseCluster cluster;
  @Rule public TestName name=new TestName();
  @BeforeClass public static void setupBeforeClass() throws Exception {
    conf=TEST_UTIL.getConfiguration();
    conf.setClass(HConstants.HBASE_MASTER_LOADBALANCER_CLASS,LoadOnlyFavoredStochasticBalancer.class,LoadBalancer.class);
    conf.setLong("hbase.master.balancer.stochastic.maxRunningTime",30000);
    conf.setInt("hbase.master.balancer.stochastic.moveCost",0);
    conf.setBoolean("hbase.master.balancer.stochastic.execute.maxSteps",true);
    conf.set(BaseLoadBalancer.TABLES_ON_MASTER,"none");
  }
  @Before public void startCluster() throws Exception {
    TEST_UTIL.startMiniCluster(SLAVES);
    TEST_UTIL.getDFSCluster().waitClusterUp();
    TEST_UTIL.getHBaseCluster().waitForActiveAndReadyMaster(120 * 1000);
    cluster=TEST_UTIL.getMiniHBaseCluster();
    admin=TEST_UTIL.getAdmin();
    admin.setBalancerRunning(false,true);
  }
  @After public void stopCluster() throws Exception {
    TEST_UTIL.cleanupTestDir();
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testPickers() throws Exception {
    TableName tableName=TableName.valueOf(name.getMethodName());
    ColumnFamilyDescriptor columnFamilyDescriptor=ColumnFamilyDescriptorBuilder.newBuilder(HConstants.CATALOG_FAMILY).build();
    TableDescriptor desc=TableDescriptorBuilder.newBuilder(tableName).setColumnFamily(columnFamilyDescriptor).build();
    admin.createTable(desc,Bytes.toBytes("aaa"),Bytes.toBytes("zzz"),REGIONS);
    TEST_UTIL.waitUntilAllRegionsAssigned(tableName);
    TEST_UTIL.loadTable(admin.getConnection().getTable(tableName),HConstants.CATALOG_FAMILY);
    admin.flush(tableName);
    HMaster master=cluster.getMaster();
    FavoredNodesManager fnm=master.getFavoredNodesManager();
    ServerName masterServerName=master.getServerName();
    List<ServerName> excludedServers=Lists.newArrayList(masterServerName);
    final ServerName mostLoadedServer=getRSWithMaxRegions(tableName,excludedServers);
    assertNotNull(mostLoadedServer);
    int numRegions=getTableRegionsFromServer(tableName,mostLoadedServer).size();
    excludedServers.add(mostLoadedServer);
    ServerName source=getRSWithMaxRegions(tableName,excludedServers);
    assertNotNull(source);
    int regionsToMove=getTableRegionsFromServer(tableName,source).size() / 2;
    List<RegionInfo> hris=getRegionsThatCanBeMoved(tableName,mostLoadedServer);
    RegionStates rst=master.getAssignmentManager().getRegionStates();
    for (int i=0; i < regionsToMove; i++) {
      final RegionInfo regionInfo=hris.get(i);
      admin.move(regionInfo.getEncodedNameAsBytes(),Bytes.toBytes(mostLoadedServer.getServerName()));
      LOG.info("Moving region: " + hris.get(i).getRegionNameAsString() + " to "+ mostLoadedServer);
      TEST_UTIL.waitFor(60000,new Waiter.Predicate<Exception>(){
        @Override public boolean evaluate() throws Exception {
          return ServerName.isSameAddress(rst.getRegionServerOfRegion(regionInfo),mostLoadedServer);
        }
      }
);
    }
    final int finalRegions=numRegions + regionsToMove;
    TEST_UTIL.waitUntilNoRegionsInTransition(60000);
    TEST_UTIL.waitFor(60000,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        int numRegions=getTableRegionsFromServer(tableName,mostLoadedServer).size();
        return (numRegions == finalRegions);
      }
    }
);
    TEST_UTIL.getHBaseCluster().startRegionServerAndWait(60000);
    Map<ServerName,List<RegionInfo>> serverAssignments=Maps.newHashMap();
    ClusterMetrics status=admin.getClusterMetrics(EnumSet.of(Option.LIVE_SERVERS));
    for (    ServerName sn : status.getLiveServerMetrics().keySet()) {
      if (!ServerName.isSameAddress(sn,masterServerName)) {
        serverAssignments.put(sn,getTableRegionsFromServer(tableName,sn));
      }
    }
    RegionLocationFinder regionFinder=new RegionLocationFinder();
    regionFinder.setClusterMetrics(admin.getClusterMetrics(EnumSet.of(Option.LIVE_SERVERS)));
    regionFinder.setConf(conf);
    regionFinder.setServices(TEST_UTIL.getMiniHBaseCluster().getMaster());
    Cluster cluster=new Cluster(serverAssignments,null,regionFinder,new RackManager(conf));
    LoadOnlyFavoredStochasticBalancer balancer=(LoadOnlyFavoredStochasticBalancer)TEST_UTIL.getMiniHBaseCluster().getMaster().getLoadBalancer();
    cluster.sortServersByRegionCount();
    Integer[] servers=cluster.serverIndicesSortedByRegionCount;
    LOG.info("Servers sorted by region count:" + Arrays.toString(servers));
    LOG.info("Cluster dump: " + cluster);
    if (!mostLoadedServer.equals(cluster.servers[servers[servers.length - 1]])) {
      LOG.error("Most loaded server: " + mostLoadedServer + " does not match: "+ cluster.servers[servers[servers.length - 1]]);
    }
    assertEquals(mostLoadedServer,cluster.servers[servers[servers.length - 1]]);
    FavoredStochasticBalancer.FavoredNodeLoadPicker loadPicker=balancer.new FavoredNodeLoadPicker();
    boolean userRegionPicked=false;
    for (int i=0; i < 100; i++) {
      if (userRegionPicked) {
        break;
      }
 else {
        Cluster.Action action=loadPicker.generate(cluster);
        if (action.type == Cluster.Action.Type.MOVE_REGION) {
          Cluster.MoveRegionAction moveRegionAction=(Cluster.MoveRegionAction)action;
          RegionInfo region=cluster.regions[moveRegionAction.region];
          assertNotEquals(-1,moveRegionAction.toServer);
          ServerName destinationServer=cluster.servers[moveRegionAction.toServer];
          assertEquals(cluster.servers[moveRegionAction.fromServer],mostLoadedServer);
          if (!region.getTable().isSystemTable()) {
            List<ServerName> favNodes=fnm.getFavoredNodes(region);
            assertTrue(favNodes.contains(ServerName.valueOf(destinationServer.getHostAndPort(),-1)));
            userRegionPicked=true;
          }
        }
      }
    }
    assertTrue("load picker did not pick expected regions in 100 iterations.",userRegionPicked);
  }
  private List<RegionInfo> getRegionsThatCanBeMoved(  TableName tableName,  ServerName serverName){
    List<RegionInfo> regions=Lists.newArrayList();
    RegionStates rst=cluster.getMaster().getAssignmentManager().getRegionStates();
    FavoredNodesManager fnm=cluster.getMaster().getFavoredNodesManager();
    for (    RegionInfo regionInfo : fnm.getRegionsOfFavoredNode(serverName)) {
      if (regionInfo.getTable().equals(tableName) && !ServerName.isSameAddress(rst.getRegionServerOfRegion(regionInfo),serverName)) {
        regions.add(regionInfo);
      }
    }
    return regions;
  }
  private List<RegionInfo> getTableRegionsFromServer(  TableName tableName,  ServerName source) throws IOException {
    List<RegionInfo> regionInfos=Lists.newArrayList();
    HRegionServer regionServer=cluster.getRegionServer(source);
    for (    Region region : regionServer.getRegions(tableName)) {
      regionInfos.add(region.getRegionInfo());
    }
    return regionInfos;
  }
  private ServerName getRSWithMaxRegions(  TableName tableName,  List<ServerName> excludeNodes) throws IOException {
    int maxRegions=0;
    ServerName maxLoadedServer=null;
    for (    JVMClusterUtil.RegionServerThread rst : cluster.getLiveRegionServerThreads()) {
      List<HRegion> regions=rst.getRegionServer().getRegions(tableName);
      LOG.debug("Server: " + rst.getRegionServer().getServerName() + " regions: "+ regions.size());
      if (regions.size() > maxRegions) {
        if (excludeNodes == null || !doesMatchExcludeNodes(excludeNodes,rst.getRegionServer().getServerName())) {
          maxRegions=regions.size();
          maxLoadedServer=rst.getRegionServer().getServerName();
        }
      }
    }
    return maxLoadedServer;
  }
  private boolean doesMatchExcludeNodes(  List<ServerName> excludeNodes,  ServerName sn){
    for (    ServerName excludeSN : excludeNodes) {
      if (ServerName.isSameAddress(sn,excludeSN)) {
        return true;
      }
    }
    return false;
  }
}
