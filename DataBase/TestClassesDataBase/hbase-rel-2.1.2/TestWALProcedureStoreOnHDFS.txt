@Category({MasterTests.class,LargeTests.class}) public class TestWALProcedureStoreOnHDFS {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestWALProcedureStoreOnHDFS.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestWALProcedureStoreOnHDFS.class);
  protected static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private WALProcedureStore store;
  private ProcedureStore.ProcedureStoreListener stopProcedureListener=new ProcedureStore.ProcedureStoreListener(){
    @Override public void postSync(){
    }
    @Override public void abortProcess(){
      LOG.error(HBaseMarkers.FATAL,"Abort the Procedure Store");
      store.stop(true);
    }
  }
;
  @Before public void initConfig(){
    Configuration conf=UTIL.getConfiguration();
    conf.setInt("dfs.replication",3);
    conf.setInt("dfs.namenode.replication.min",3);
    conf.setInt(WALProcedureStore.WAIT_BEFORE_ROLL_CONF_KEY,1000);
    conf.setInt(WALProcedureStore.ROLL_RETRIES_CONF_KEY,10);
    conf.setInt(WALProcedureStore.MAX_SYNC_FAILURE_ROLL_CONF_KEY,10);
  }
  private void setupDFS() throws Exception {
    MiniDFSCluster dfs=UTIL.startMiniDFSCluster(3);
    Path logDir=new Path(new Path(dfs.getFileSystem().getUri()),"/test-logs");
    store=ProcedureTestingUtility.createWalStore(UTIL.getConfiguration(),logDir);
    store.registerListener(stopProcedureListener);
    store.start(8);
    store.recoverLease();
  }
  @SuppressWarnings("JUnit4TearDownNotRun") public void tearDown() throws Exception {
    store.stop(false);
    UTIL.getDFSCluster().getFileSystem().delete(store.getWALDir(),true);
    try {
      UTIL.shutdownMiniCluster();
    }
 catch (    Exception e) {
      LOG.warn("failure shutting down cluster",e);
    }
  }
  @Test(expected=RuntimeException.class) public void testWalAbortOnLowReplication() throws Exception {
    setupDFS();
    assertEquals(3,UTIL.getDFSCluster().getDataNodes().size());
    LOG.info("Stop DataNode");
    UTIL.getDFSCluster().stopDataNode(0);
    assertEquals(2,UTIL.getDFSCluster().getDataNodes().size());
    store.insert(new TestProcedure(1,-1),null);
    for (long i=2; store.isRunning(); ++i) {
      assertEquals(2,UTIL.getDFSCluster().getDataNodes().size());
      store.insert(new TestProcedure(i,-1),null);
      Thread.sleep(100);
    }
    assertFalse(store.isRunning());
  }
  @Test public void testWalAbortOnLowReplicationWithQueuedWriters() throws Exception {
    setupDFS();
    assertEquals(3,UTIL.getDFSCluster().getDataNodes().size());
    store.registerListener(new ProcedureStore.ProcedureStoreListener(){
      @Override public void postSync(){
        Threads.sleepWithoutInterrupt(2000);
      }
      @Override public void abortProcess(){
      }
    }
);
    final AtomicInteger reCount=new AtomicInteger(0);
    Thread[] thread=new Thread[store.getNumThreads() * 2 + 1];
    for (int i=0; i < thread.length; ++i) {
      final long procId=i + 1L;
      thread[i]=new Thread(() -> {
        try {
          LOG.debug("[S] INSERT " + procId);
          store.insert(new TestProcedure(procId,-1),null);
          LOG.debug("[E] INSERT " + procId);
        }
 catch (        RuntimeException e) {
          reCount.incrementAndGet();
          LOG.debug("[F] INSERT " + procId + ": "+ e.getMessage());
        }
      }
);
      thread[i].start();
    }
    Thread.sleep(1000);
    LOG.info("Stop DataNode");
    UTIL.getDFSCluster().stopDataNode(0);
    assertEquals(2,UTIL.getDFSCluster().getDataNodes().size());
    for (int i=0; i < thread.length; ++i) {
      thread[i].join();
    }
    assertFalse(store.isRunning());
    assertTrue(reCount.toString(),reCount.get() >= store.getNumThreads() && reCount.get() < thread.length);
  }
  @Test public void testWalRollOnLowReplication() throws Exception {
    UTIL.getConfiguration().setInt("dfs.namenode.replication.min",1);
    setupDFS();
    int dnCount=0;
    store.insert(new TestProcedure(1,-1),null);
    UTIL.getDFSCluster().restartDataNode(dnCount);
    for (long i=2; i < 100; ++i) {
      store.insert(new TestProcedure(i,-1),null);
      waitForNumReplicas(3);
      Thread.sleep(100);
      if ((i % 30) == 0) {
        LOG.info("Restart Data Node");
        UTIL.getDFSCluster().restartDataNode(++dnCount % 3);
      }
    }
    assertTrue(store.isRunning());
  }
  public void waitForNumReplicas(  int numReplicas) throws Exception {
    while (UTIL.getDFSCluster().getDataNodes().size() < numReplicas) {
      Thread.sleep(100);
    }
    for (int i=0; i < numReplicas; ++i) {
      for (      DataNode dn : UTIL.getDFSCluster().getDataNodes()) {
        while (!dn.isDatanodeFullyStarted()) {
          Thread.sleep(100);
        }
      }
    }
  }
}
