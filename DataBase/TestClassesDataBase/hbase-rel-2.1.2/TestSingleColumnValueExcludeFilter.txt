/** 
 * Tests for  {@link SingleColumnValueExcludeFilter}. Because this filter extends  {@link SingleColumnValueFilter}, only the added functionality is tested. That is, method filterCell(Cell).
 */
@Category({FilterTests.class,SmallTests.class}) public class TestSingleColumnValueExcludeFilter {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSingleColumnValueExcludeFilter.class);
  private static final byte[] ROW=Bytes.toBytes("test");
  private static final byte[] COLUMN_FAMILY=Bytes.toBytes("test");
  private static final byte[] COLUMN_QUALIFIER=Bytes.toBytes("foo");
  private static final byte[] COLUMN_QUALIFIER_2=Bytes.toBytes("foo_2");
  private static final byte[] VAL_1=Bytes.toBytes("a");
  private static final byte[] VAL_2=Bytes.toBytes("ab");
  /** 
 * Test the overridden functionality of filterCell(Cell)
 * @throws Exception
 */
  @Test public void testFilterCell() throws Exception {
    Filter filter=new SingleColumnValueExcludeFilter(COLUMN_FAMILY,COLUMN_QUALIFIER,CompareOperator.EQUAL,VAL_1);
    List<Cell> kvs=new ArrayList<>();
    KeyValue c=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1);
    kvs.add(new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1));
    kvs.add(new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER,VAL_1));
    kvs.add(new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1));
    filter.filterRowCells(kvs);
    assertEquals("resultSize",2,kvs.size());
    assertTrue("leftKV1",CellComparatorImpl.COMPARATOR.compare(kvs.get(0),c) == 0);
    assertTrue("leftKV2",CellComparatorImpl.COMPARATOR.compare(kvs.get(1),c) == 0);
    assertFalse("allRemainingWhenMatch",filter.filterAllRemaining());
    filter.reset();
    c=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1);
    assertTrue("otherColumn",filter.filterCell(c) == Filter.ReturnCode.INCLUDE);
    c=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER,VAL_2);
    assertTrue("testedMismatch",filter.filterCell(c) == Filter.ReturnCode.NEXT_ROW);
    c=new KeyValue(ROW,COLUMN_FAMILY,COLUMN_QUALIFIER_2,VAL_1);
    assertTrue("otherColumn",filter.filterCell(c) == Filter.ReturnCode.NEXT_ROW);
  }
}
