@Category({MiscTests.class,SmallTests.class}) public class TestJSONMetricUtil {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestJSONMetricUtil.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestJSONMetricUtil.class);
  @Test public void testBuildHashtable(){
    String[] keys={"type","name"};
    String[] emptyKey={};
    String[] values={"MemoryPool","Par Eden Space"};
    String[] values2={"MemoryPool","Par Eden Space","Test"};
    String[] emptyValue={};
    Map<String,String> properties=JSONMetricUtil.buldKeyValueTable(keys,values);
    assertEquals(values[0],properties.get("type"));
    assertEquals(values[1],properties.get("name"));
    assertNull(JSONMetricUtil.buldKeyValueTable(keys,values2));
    assertNull(JSONMetricUtil.buldKeyValueTable(keys,emptyValue));
    assertNull(JSONMetricUtil.buldKeyValueTable(emptyKey,values2));
    assertNull(JSONMetricUtil.buldKeyValueTable(emptyKey,emptyValue));
  }
  @Test public void testSearchJson() throws JsonProcessingException, IOException {
    String jsonString="{\"test\":[{\"data1\":100,\"data2\":\"hello\",\"data3\": [1 , 2 , 3]}, " + "{\"data4\":0}]}";
    JsonNode node=JSONMetricUtil.mappStringToJsonNode(jsonString);
    JsonNode r1=JSONMetricUtil.searchJson(node,"data1");
    JsonNode r2=JSONMetricUtil.searchJson(node,"data2");
    JsonNode r3=JSONMetricUtil.searchJson(node,"data3");
    JsonNode r4=JSONMetricUtil.searchJson(node,"data4");
    assertEquals(100,r1.intValue());
    assertEquals("hello",r2.textValue());
    assertEquals(1,r3.get(0).intValue());
    assertEquals(0,r4.intValue());
  }
  @Test public void testBuildObjectName() throws MalformedObjectNameException {
    String[] keys={"type","name"};
    String[] values={"MemoryPool","Par Eden Space"};
    Hashtable<String,String> properties=JSONMetricUtil.buldKeyValueTable(keys,values);
    ObjectName testObject=JSONMetricUtil.buildObjectName(JSONMetricUtil.JAVA_LANG_DOMAIN,properties);
    assertEquals(JSONMetricUtil.JAVA_LANG_DOMAIN,testObject.getDomain());
    assertEquals(testObject.getKeyPropertyList(),properties);
  }
  @Test public void testGetLastGCInfo(){
    List<GarbageCollectorMXBean> gcBeans=ManagementFactory.getGarbageCollectorMXBeans();
    for (    GarbageCollectorMXBean bean : gcBeans) {
      ObjectName on=bean.getObjectName();
      Object value=JSONMetricUtil.getValueFromMBean(on,"LastGcInfo");
      LOG.info("Collector Info: " + value);
      if (value != null && value instanceof CompositeData) {
        CompositeData cds=(CompositeData)value;
        assertNotNull(cds.get("duration"));
      }
    }
  }
}
