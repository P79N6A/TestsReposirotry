/** 
 * A tracker for tracking and validating table rows generated with  {@link HBaseTestingUtility#loadTable(Table,byte[])}
 */
public static class SeenRowTracker {
  int dim='z' - 'a' + 1;
  int[][][] seenRows=new int[dim][dim][dim];
  byte[] startRow;
  byte[] stopRow;
  public SeenRowTracker(  byte[] startRow,  byte[] stopRow){
    this.startRow=startRow;
    this.stopRow=stopRow;
  }
  void reset(){
    for (    byte[] row : ROWS) {
      seenRows[i(row[0])][i(row[1])][i(row[2])]=0;
    }
  }
  int i(  byte b){
    return b - 'a';
  }
  public void addRow(  byte[] row){
    seenRows[i(row[0])][i(row[1])][i(row[2])]++;
  }
  /** 
 * Validate that all the rows between startRow and stopRow are seen exactly once, and all other rows none
 */
  public void validate(){
    for (byte b1='a'; b1 <= 'z'; b1++) {
      for (byte b2='a'; b2 <= 'z'; b2++) {
        for (byte b3='a'; b3 <= 'z'; b3++) {
          int count=seenRows[i(b1)][i(b2)][i(b3)];
          int expectedCount=0;
          if (Bytes.compareTo(new byte[]{b1,b2,b3},startRow) >= 0 && Bytes.compareTo(new byte[]{b1,b2,b3},stopRow) < 0) {
            expectedCount=1;
          }
          if (count != expectedCount) {
            String row=new String(new byte[]{b1,b2,b3},StandardCharsets.UTF_8);
            throw new RuntimeException("Row:" + row + " has a seen count of "+ count+ " "+ "instead of "+ expectedCount);
          }
        }
      }
    }
  }
}
