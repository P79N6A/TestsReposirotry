@Category({MasterTests.class,MediumTests.class}) public class TestEnableTableProcedure extends TestTableDDLProcedureBase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestEnableTableProcedure.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestEnableTableProcedure.class);
  @Rule public TestName name=new TestName();
  @Test public void testEnableTable() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    MasterProcedureTestingUtility.createTable(procExec,tableName,null,"f1","f2");
    UTIL.getAdmin().disableTable(tableName);
    long procId=procExec.submitProcedure(new EnableTableProcedure(procExec.getEnvironment(),tableName,false));
    ProcedureTestingUtility.waitProcedure(procExec,procId);
    ProcedureTestingUtility.assertProcNotFailed(procExec,procId);
    MasterProcedureTestingUtility.validateTableIsEnabled(getMaster(),tableName);
  }
  @Test(expected=TableNotDisabledException.class) public void testEnableNonDisabledTable() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    MasterProcedureTestingUtility.createTable(procExec,tableName,null,"f1","f2");
    long procId1=procExec.submitProcedure(new EnableTableProcedure(procExec.getEnvironment(),tableName,false));
    ProcedureTestingUtility.waitProcedure(procExec,procId1);
    Procedure<?> result=procExec.getResult(procId1);
    assertTrue(result.isFailed());
    LOG.debug("Enable failed with exception: " + result.getException());
    assertTrue(ProcedureTestingUtility.getExceptionCause(result) instanceof TableNotDisabledException);
    long procId2=procExec.submitProcedure(new EnableTableProcedure(procExec.getEnvironment(),tableName,true));
    ProcedureTestingUtility.waitProcedure(procExec,procId2);
    ProcedureTestingUtility.assertProcNotFailed(procExec,procId2);
    final ProcedurePrepareLatch prepareLatch=new ProcedurePrepareLatch.CompatibilityLatch();
    long procId3=procExec.submitProcedure(new EnableTableProcedure(procExec.getEnvironment(),tableName,false,prepareLatch));
    prepareLatch.await();
    Assert.fail("Enable should throw exception through latch.");
  }
  @Test public void testRecoveryAndDoubleExecution() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    final byte[][] splitKeys=new byte[][]{Bytes.toBytes("a"),Bytes.toBytes("b"),Bytes.toBytes("c")};
    MasterProcedureTestingUtility.createTable(procExec,tableName,splitKeys,"f1","f2");
    UTIL.getAdmin().disableTable(tableName);
    ProcedureTestingUtility.waitNoProcedureRunning(procExec);
    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec,true);
    long procId=procExec.submitProcedure(new EnableTableProcedure(procExec.getEnvironment(),tableName,false));
    MasterProcedureTestingUtility.testRecoveryAndDoubleExecution(procExec,procId);
    MasterProcedureTestingUtility.validateTableIsEnabled(getMaster(),tableName);
  }
  @Test public void testRollbackAndDoubleExecution() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    final byte[][] splitKeys=new byte[][]{Bytes.toBytes("a"),Bytes.toBytes("b"),Bytes.toBytes("c")};
    MasterProcedureTestingUtility.createTable(procExec,tableName,splitKeys,"f1","f2");
    UTIL.getAdmin().disableTable(tableName);
    ProcedureTestingUtility.waitNoProcedureRunning(procExec);
    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec,true);
    long procId=procExec.submitProcedure(new EnableTableProcedure(procExec.getEnvironment(),tableName,false));
    int lastStep=3;
    MasterProcedureTestingUtility.testRollbackAndDoubleExecution(procExec,procId,lastStep);
    MasterProcedureTestingUtility.validateTableIsDisabled(getMaster(),tableName);
  }
}
