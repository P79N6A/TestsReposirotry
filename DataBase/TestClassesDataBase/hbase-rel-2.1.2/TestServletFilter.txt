@Category({MiscTests.class,SmallTests.class}) public class TestServletFilter extends HttpServerFunctionalTest {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestServletFilter.class);
  private static final Logger LOG=LoggerFactory.getLogger(HttpServer.class);
  static volatile String uri=null;
  /** 
 * A very simple filter which record the uri filtered. 
 */
static public class SimpleFilter implements Filter {
    private FilterConfig filterConfig=null;
    @Override public void init(    FilterConfig filterConfig) throws ServletException {
      this.filterConfig=filterConfig;
    }
    @Override public void destroy(){
      this.filterConfig=null;
    }
    @Override public void doFilter(    ServletRequest request,    ServletResponse response,    FilterChain chain) throws IOException, ServletException {
      if (filterConfig == null)       return;
      uri=((HttpServletRequest)request).getRequestURI();
      LOG.info("filtering " + uri);
      chain.doFilter(request,response);
    }
    /** 
 * Configuration for the filter 
 */
static public class Initializer extends FilterInitializer {
      public Initializer(){
      }
      @Override public void initFilter(      FilterContainer container,      Configuration conf){
        container.addFilter("simple",SimpleFilter.class.getName(),null);
      }
    }
  }
  public static void assertExceptionContains(  String string,  Throwable t){
    String msg=t.getMessage();
    Assert.assertTrue("Expected to find '" + string + "' but got unexpected exception:"+ StringUtils.stringifyException(t),msg.contains(string));
  }
  /** 
 * access a url, ignoring some IOException such as the page does not exist 
 */
  static void access(  String urlstring) throws IOException {
    LOG.warn("access " + urlstring);
    URL url=new URL(urlstring);
    URLConnection connection=url.openConnection();
    connection.connect();
    try {
      BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
      try {
        for (; in.readLine() != null; )         ;
      }
  finally {
        in.close();
      }
    }
 catch (    IOException ioe) {
      LOG.warn("urlstring=" + urlstring,ioe);
    }
  }
  @Test @Ignore public void testServletFilter() throws Exception {
    Configuration conf=new Configuration();
    conf.set(HttpServer.FILTER_INITIALIZERS_PROPERTY,SimpleFilter.Initializer.class.getName());
    HttpServer http=createTestServer(conf);
    http.start();
    final String fsckURL="/fsck";
    final String stacksURL="/stacks";
    final String ajspURL="/a.jsp";
    final String logURL="/logs/a.log";
    final String hadooplogoURL="/static/hadoop-logo.jpg";
    final String[] urls={fsckURL,stacksURL,ajspURL,logURL,hadooplogoURL};
    final Random ran=new Random();
    final int[] sequence=new int[50];
    for (int i=0; i < sequence.length; i++) {
      sequence[i]=ran.nextInt(urls.length);
    }
    final String prefix="http://" + NetUtils.getHostPortString(http.getConnectorAddress(0));
    try {
      for (int i=0; i < sequence.length; i++) {
        access(prefix + urls[sequence[i]]);
        if (sequence[i] == 0) {
          assertEquals(null,uri);
        }
 else {
          assertEquals(urls[sequence[i]],uri);
          uri=null;
        }
      }
    }
  finally {
      http.stop();
    }
  }
static public class ErrorFilter extends SimpleFilter {
    @Override public void init(    FilterConfig arg0) throws ServletException {
      throw new ServletException("Throwing the exception from Filter init");
    }
    /** 
 * Configuration for the filter 
 */
static public class Initializer extends FilterInitializer {
      public Initializer(){
      }
      @Override public void initFilter(      FilterContainer container,      Configuration conf){
        container.addFilter("simple",ErrorFilter.class.getName(),null);
      }
    }
  }
  @Test public void testServletFilterWhenInitThrowsException() throws Exception {
    Configuration conf=new Configuration();
    conf.set(HttpServer.FILTER_INITIALIZERS_PROPERTY,ErrorFilter.Initializer.class.getName());
    HttpServer http=createTestServer(conf);
    try {
      http.start();
      fail("expecting exception");
    }
 catch (    IOException e) {
      assertExceptionContains("Problem starting http server",e);
    }
  }
  /** 
 * Similar to the above test case, except that it uses a different API to add the filter. Regression test for HADOOP-8786.
 */
  @Test public void testContextSpecificServletFilterWhenInitThrowsException() throws Exception {
    Configuration conf=new Configuration();
    HttpServer http=createTestServer(conf);
    HttpServer.defineFilter(http.webAppContext,"ErrorFilter",ErrorFilter.class.getName(),null,null);
    try {
      http.start();
      fail("expecting exception");
    }
 catch (    IOException e) {
      assertExceptionContains("Unable to initialize WebAppContext",e);
    }
  }
}
