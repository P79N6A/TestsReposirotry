public class MockRecordBuilder extends MetricsRecordBuilder {
  private final MetricsCollector mockMetricsBuilder;
  public MockRecordBuilder(  MetricsCollector mockMetricsBuilder){
    this.mockMetricsBuilder=mockMetricsBuilder;
  }
  @Override public MetricsRecordBuilder tag(  MetricsInfo metricsInfo,  String s){
    tags.put(canonicalizeMetricName(metricsInfo.name()),s);
    return this;
  }
  @Override public MetricsRecordBuilder add(  MetricsTag metricsTag){
    tags.put(canonicalizeMetricName(metricsTag.name()),metricsTag.value());
    return this;
  }
  @Override public MetricsRecordBuilder add(  AbstractMetric abstractMetric){
    gauges.put(canonicalizeMetricName(abstractMetric.name()),abstractMetric.value());
    return this;
  }
  @Override public MetricsRecordBuilder setContext(  String s){
    return this;
  }
  @Override public MetricsRecordBuilder addCounter(  MetricsInfo metricsInfo,  int i){
    counters.put(canonicalizeMetricName(metricsInfo.name()),Long.valueOf(i));
    return this;
  }
  @Override public MetricsRecordBuilder addCounter(  MetricsInfo metricsInfo,  long l){
    counters.put(canonicalizeMetricName(metricsInfo.name()),Long.valueOf(l));
    return this;
  }
  @Override public MetricsRecordBuilder addGauge(  MetricsInfo metricsInfo,  int i){
    gauges.put(canonicalizeMetricName(metricsInfo.name()),Long.valueOf(i));
    return this;
  }
  @Override public MetricsRecordBuilder addGauge(  MetricsInfo metricsInfo,  long l){
    gauges.put(canonicalizeMetricName(metricsInfo.name()),Long.valueOf(l));
    return this;
  }
  @Override public MetricsRecordBuilder addGauge(  MetricsInfo metricsInfo,  float v){
    gauges.put(canonicalizeMetricName(metricsInfo.name()),Double.valueOf(v));
    return this;
  }
  @Override public MetricsRecordBuilder addGauge(  MetricsInfo metricsInfo,  double v){
    gauges.put(canonicalizeMetricName(metricsInfo.name()),Double.valueOf(v));
    return this;
  }
  @Override public MetricsCollector parent(){
    return mockMetricsBuilder;
  }
}
