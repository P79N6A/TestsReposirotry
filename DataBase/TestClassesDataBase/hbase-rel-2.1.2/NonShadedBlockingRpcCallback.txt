/** 
 * A copy of the BlockingRpcCallback class for use locally. Only difference is that it makes use of non-shaded protobufs; i.e. refers to com.google.protobuf.* rather than to org.apache.hbase.thirdparty.com.google.protobuf.
 */
private static class NonShadedBlockingRpcCallback<R> implements com.google.protobuf.RpcCallback<R> {
  private R result;
  private boolean resultSet=false;
  /** 
 * Called on completion of the RPC call with the response object, or  {@code null} in the case ofan error.
 * @param parameter the response object or {@code null} if an error occurred
 */
  @Override public void run(  R parameter){
synchronized (this) {
      result=parameter;
      resultSet=true;
      this.notifyAll();
    }
  }
  /** 
 * Returns the parameter passed to  {@link #run(Object)} or {@code null} if a null value waspassed.  When used asynchronously, this method will block until the  {@link #run(Object)}method has been called.
 * @return the response object or {@code null} if no response was passed
 */
  public synchronized R get() throws IOException {
    while (!resultSet) {
      try {
        this.wait();
      }
 catch (      InterruptedException ie) {
        InterruptedIOException exception=new InterruptedIOException(ie.getMessage());
        exception.initCause(ie);
        throw exception;
      }
    }
    return result;
  }
}
