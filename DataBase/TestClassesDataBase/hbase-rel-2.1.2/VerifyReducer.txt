public static class VerifyReducer extends Reducer<BytesWritable,BytesWritable,Text,Text> {
  private Counter refsChecked;
  private Counter rowsWritten;
  @Override public void setup(  Context context) throws IOException {
    refsChecked=context.getCounter(Counters.REFERENCES_CHECKED);
    rowsWritten=context.getCounter(Counters.ROWS_WRITTEN);
  }
  @Override protected void reduce(  BytesWritable referredRow,  Iterable<BytesWritable> referrers,  VerifyReducer.Context ctx) throws IOException, InterruptedException {
    boolean gotOriginalRow=false;
    int refCount=0;
    for (    BytesWritable ref : referrers) {
      if (ref.getLength() == 0) {
        assert !gotOriginalRow;
        gotOriginalRow=true;
      }
 else {
        refCount++;
      }
    }
    refsChecked.increment(refCount);
    if (!gotOriginalRow) {
      String parsedRow=makeRowReadable(referredRow.getBytes(),referredRow.getLength());
      String binRow=Bytes.toStringBinary(referredRow.getBytes(),0,referredRow.getLength());
      LOG.error("Reference error row " + parsedRow);
      ctx.write(new Text(binRow),new Text(parsedRow));
      rowsWritten.increment(1);
    }
  }
  private String makeRowReadable(  byte[] bytes,  int length){
    long rowIdx=swapLong(Bytes.toLong(bytes,0));
    String suffix=Bytes.toString(bytes,8,length - 8);
    return "Row #" + rowIdx + " suffix "+ suffix;
  }
}
