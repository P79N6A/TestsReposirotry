@Category({ReplicationTests.class,SmallTests.class}) public class TestReplicationSinkManager {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestReplicationSinkManager.class);
  private static final String PEER_CLUSTER_ID="PEER_CLUSTER_ID";
  private HBaseReplicationEndpoint replicationEndpoint;
  private ReplicationSinkManager sinkManager;
  @Before public void setUp(){
    replicationEndpoint=mock(HBaseReplicationEndpoint.class);
    sinkManager=new ReplicationSinkManager(mock(ClusterConnection.class),PEER_CLUSTER_ID,replicationEndpoint,new Configuration());
  }
  @Test public void testChooseSinks(){
    List<ServerName> serverNames=Lists.newArrayList();
    int totalServers=20;
    for (int i=0; i < totalServers; i++) {
      serverNames.add(mock(ServerName.class));
    }
    when(replicationEndpoint.getRegionServers()).thenReturn(serverNames);
    sinkManager.chooseSinks();
    int expected=(int)(totalServers * ReplicationSinkManager.DEFAULT_REPLICATION_SOURCE_RATIO);
    assertEquals(expected,sinkManager.getNumSinks());
  }
  @Test public void testChooseSinks_LessThanRatioAvailable(){
    List<ServerName> serverNames=Lists.newArrayList(mock(ServerName.class),mock(ServerName.class));
    when(replicationEndpoint.getRegionServers()).thenReturn(serverNames);
    sinkManager.chooseSinks();
    assertEquals(1,sinkManager.getNumSinks());
  }
  @Test public void testReportBadSink(){
    ServerName serverNameA=mock(ServerName.class);
    ServerName serverNameB=mock(ServerName.class);
    when(replicationEndpoint.getRegionServers()).thenReturn(Lists.newArrayList(serverNameA,serverNameB));
    sinkManager.chooseSinks();
    assertEquals(1,sinkManager.getNumSinks());
    SinkPeer sinkPeer=new SinkPeer(serverNameA,mock(AdminService.BlockingInterface.class));
    sinkManager.reportBadSink(sinkPeer);
    assertEquals(1,sinkManager.getNumSinks());
  }
  /** 
 * Once a SinkPeer has been reported as bad more than BAD_SINK_THRESHOLD times, it should not be replicated to anymore.
 */
  @Test public void testReportBadSink_PastThreshold(){
    List<ServerName> serverNames=Lists.newArrayList();
    int totalServers=30;
    for (int i=0; i < totalServers; i++) {
      serverNames.add(mock(ServerName.class));
    }
    when(replicationEndpoint.getRegionServers()).thenReturn(serverNames);
    sinkManager.chooseSinks();
    int expected=(int)(totalServers * ReplicationSinkManager.DEFAULT_REPLICATION_SOURCE_RATIO);
    assertEquals(expected,sinkManager.getNumSinks());
    ServerName serverName=sinkManager.getSinksForTesting().get(0);
    SinkPeer sinkPeer=new SinkPeer(serverName,mock(AdminService.BlockingInterface.class));
    sinkManager.reportSinkSuccess(sinkPeer);
    for (int i=0; i <= ReplicationSinkManager.DEFAULT_BAD_SINK_THRESHOLD; i++) {
      sinkManager.reportBadSink(sinkPeer);
    }
    assertEquals(expected - 1,sinkManager.getNumSinks());
    serverName=sinkManager.getSinksForTesting().get(0);
    sinkPeer=new SinkPeer(serverName,mock(AdminService.BlockingInterface.class));
    for (int i=0; i <= ReplicationSinkManager.DEFAULT_BAD_SINK_THRESHOLD - 1; i++) {
      sinkManager.reportBadSink(sinkPeer);
    }
    sinkManager.reportSinkSuccess(sinkPeer);
    sinkManager.reportBadSink(sinkPeer);
    assertEquals(expected - 1,sinkManager.getNumSinks());
    for (int i=0; i <= ReplicationSinkManager.DEFAULT_BAD_SINK_THRESHOLD - 2; i++) {
      sinkManager.reportBadSink(sinkPeer);
    }
    assertEquals(expected - 1,sinkManager.getNumSinks());
    sinkManager.reportBadSink(sinkPeer);
    assertEquals(expected - 2,sinkManager.getNumSinks());
  }
  @Test public void testReportBadSink_DownToZeroSinks(){
    List<ServerName> serverNames=Lists.newArrayList();
    int totalServers=4;
    for (int i=0; i < totalServers; i++) {
      serverNames.add(mock(ServerName.class));
    }
    when(replicationEndpoint.getRegionServers()).thenReturn(serverNames);
    sinkManager.chooseSinks();
    List<ServerName> sinkList=sinkManager.getSinksForTesting();
    int expected=(int)(totalServers * ReplicationSinkManager.DEFAULT_REPLICATION_SOURCE_RATIO);
    assertEquals(expected,sinkList.size());
    ServerName serverNameA=sinkList.get(0);
    ServerName serverNameB=sinkList.get(1);
    SinkPeer sinkPeerA=new SinkPeer(serverNameA,mock(AdminService.BlockingInterface.class));
    SinkPeer sinkPeerB=new SinkPeer(serverNameB,mock(AdminService.BlockingInterface.class));
    for (int i=0; i <= ReplicationSinkManager.DEFAULT_BAD_SINK_THRESHOLD; i++) {
      sinkManager.reportBadSink(sinkPeerA);
      sinkManager.reportBadSink(sinkPeerB);
    }
    expected=(int)((totalServers - 2) * ReplicationSinkManager.DEFAULT_REPLICATION_SOURCE_RATIO);
    assertEquals(expected,sinkManager.getNumSinks());
  }
}
