public static class MyRpcClientImpl extends BlockingRpcClient {
  public static List<Socket> savedSockets=Lists.newArrayList();
  @Rule public ExpectedException thrown=ExpectedException.none();
  public MyRpcClientImpl(  Configuration conf){
    super(conf);
  }
  public MyRpcClientImpl(  Configuration conf,  String clusterId,  SocketAddress address,  MetricsConnection metrics){
    super(conf,clusterId,address,metrics);
  }
  @Override protected BlockingRpcConnection createConnection(  ConnectionId remoteId) throws IOException {
    return new BlockingRpcConnection(this,remoteId){
      @Override protected synchronized void setupConnection() throws IOException {
        super.setupConnection();
synchronized (savedSockets) {
          savedSockets.add(socket);
        }
        throw new IOException("Sample exception for " + "verifying socket closure in case of exceptions.");
      }
    }
;
  }
}
