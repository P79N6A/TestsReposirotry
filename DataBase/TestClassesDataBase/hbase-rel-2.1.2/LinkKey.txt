/** 
 * Writable class used as the key to group links in the linked list. Used as the key emited from a pass over the table.
 */
public static class LinkKey implements WritableComparable<LinkKey> {
  private Long chainId;
  public Long getOrder(){
    return order;
  }
  public Long getChainId(){
    return chainId;
  }
  private Long order;
  public LinkKey(){
  }
  public LinkKey(  long chainId,  long order){
    this.chainId=chainId;
    this.order=order;
  }
  @Override public int compareTo(  LinkKey linkKey){
    int res=getChainId().compareTo(linkKey.getChainId());
    if (res == 0) {
      res=getOrder().compareTo(linkKey.getOrder());
    }
    return res;
  }
  @Override public void write(  DataOutput dataOutput) throws IOException {
    WritableUtils.writeVLong(dataOutput,chainId);
    WritableUtils.writeVLong(dataOutput,order);
  }
  @Override public void readFields(  DataInput dataInput) throws IOException {
    chainId=WritableUtils.readVLong(dataInput);
    order=WritableUtils.readVLong(dataInput);
  }
}
