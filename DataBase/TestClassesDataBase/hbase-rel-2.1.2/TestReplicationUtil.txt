@Category({ReplicationTests.class,SmallTests.class}) public class TestReplicationUtil {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestReplicationUtil.class);
  private static TableName TABLE_A=TableName.valueOf("replication","testA");
  private static TableName TABLE_B=TableName.valueOf("replication","testB");
  @Test public void testContainsWithReplicatingAll(){
    ReplicationPeerConfig peerConfig;
    ReplicationPeerConfig.ReplicationPeerConfigBuilderImpl builder=new ReplicationPeerConfig.ReplicationPeerConfigBuilderImpl();
    Map<TableName,List<String>> tableCfs=new HashMap<>();
    Set<String> namespaces=new HashSet<>();
    builder.setReplicateAllUserTables(true);
    peerConfig=builder.build();
    Assert.assertTrue(ReplicationUtils.contains(peerConfig,TABLE_A));
    builder.setExcludeNamespaces(null);
    tableCfs=new HashMap<>();
    builder.setReplicateAllUserTables(true);
    builder.setExcludeTableCFsMap(tableCfs);
    peerConfig=builder.build();
    Assert.assertTrue(ReplicationUtils.contains(peerConfig,TABLE_A));
    tableCfs=new HashMap<>();
    tableCfs.put(TABLE_B,null);
    builder.setReplicateAllUserTables(true);
    builder.setExcludeTableCFsMap(tableCfs);
    peerConfig=builder.build();
    Assert.assertTrue(ReplicationUtils.contains(peerConfig,TABLE_A));
    tableCfs=new HashMap<>();
    tableCfs.put(TABLE_A,null);
    builder.setReplicateAllUserTables(true);
    builder.setExcludeTableCFsMap(tableCfs);
    peerConfig=builder.build();
    Assert.assertFalse(ReplicationUtils.contains(peerConfig,TABLE_A));
    builder.setExcludeTableCFsMap(null);
    namespaces=new HashSet<>();
    builder.setReplicateAllUserTables(true);
    builder.setExcludeNamespaces(namespaces);
    peerConfig=builder.build();
    Assert.assertTrue(ReplicationUtils.contains(peerConfig,TABLE_A));
    namespaces=new HashSet<>();
    namespaces.add("default");
    builder.setReplicateAllUserTables(true);
    builder.setExcludeNamespaces(namespaces);
    peerConfig=builder.build();
    Assert.assertTrue(ReplicationUtils.contains(peerConfig,TABLE_A));
    namespaces=new HashSet<>();
    namespaces.add("replication");
    builder.setReplicateAllUserTables(true);
    builder.setExcludeNamespaces(namespaces);
    peerConfig=builder.build();
    Assert.assertFalse(ReplicationUtils.contains(peerConfig,TABLE_A));
    namespaces=new HashSet<>();
    tableCfs=new HashMap<>();
    namespaces.add("replication");
    tableCfs.put(TABLE_A,null);
    builder.setReplicateAllUserTables(true);
    builder.setExcludeTableCFsMap(tableCfs);
    builder.setExcludeNamespaces(namespaces);
    peerConfig=builder.build();
    Assert.assertFalse(ReplicationUtils.contains(peerConfig,TABLE_A));
    namespaces=new HashSet<>();
    tableCfs=new HashMap<>();
    namespaces.add("default");
    tableCfs.put(TABLE_A,null);
    builder.setReplicateAllUserTables(true);
    builder.setExcludeTableCFsMap(tableCfs);
    builder.setExcludeNamespaces(namespaces);
    peerConfig=builder.build();
    Assert.assertFalse(ReplicationUtils.contains(peerConfig,TABLE_A));
    namespaces=new HashSet<>();
    tableCfs=new HashMap<>();
    namespaces.add("replication");
    tableCfs.put(TABLE_B,null);
    builder.setReplicateAllUserTables(true);
    builder.setExcludeTableCFsMap(tableCfs);
    builder.setExcludeNamespaces(namespaces);
    peerConfig=builder.build();
    Assert.assertFalse(ReplicationUtils.contains(peerConfig,TABLE_A));
  }
  @Test public void testContainsWithoutReplicatingAll(){
    ReplicationPeerConfig peerConfig;
    ReplicationPeerConfig.ReplicationPeerConfigBuilderImpl builder=new ReplicationPeerConfig.ReplicationPeerConfigBuilderImpl();
    Map<TableName,List<String>> tableCfs=new HashMap<>();
    Set<String> namespaces=new HashSet<>();
    builder.setReplicateAllUserTables(false);
    peerConfig=builder.build();
    Assert.assertFalse(ReplicationUtils.contains(peerConfig,TABLE_A));
    builder.setReplicateAllUserTables(false);
    builder.setTableCFsMap(tableCfs);
    peerConfig=builder.build();
    Assert.assertFalse(ReplicationUtils.contains(peerConfig,TABLE_A));
    tableCfs=new HashMap<>();
    tableCfs.put(TABLE_B,null);
    builder.setReplicateAllUserTables(false);
    builder.setTableCFsMap(tableCfs);
    peerConfig=builder.build();
    Assert.assertFalse(ReplicationUtils.contains(peerConfig,TABLE_A));
    tableCfs=new HashMap<>();
    tableCfs.put(TABLE_A,null);
    builder.setReplicateAllUserTables(false);
    builder.setTableCFsMap(tableCfs);
    peerConfig=builder.build();
    Assert.assertTrue(ReplicationUtils.contains(peerConfig,TABLE_A));
    builder.setTableCFsMap(null);
    builder.setReplicateAllUserTables(false);
    builder.setNamespaces(namespaces);
    peerConfig=builder.build();
    Assert.assertFalse(ReplicationUtils.contains(peerConfig,TABLE_A));
    namespaces=new HashSet<>();
    namespaces.add("default");
    builder.setReplicateAllUserTables(false);
    builder.setNamespaces(namespaces);
    peerConfig=builder.build();
    Assert.assertFalse(ReplicationUtils.contains(peerConfig,TABLE_A));
    namespaces=new HashSet<>();
    namespaces.add("replication");
    builder.setReplicateAllUserTables(false);
    builder.setNamespaces(namespaces);
    peerConfig=builder.build();
    Assert.assertTrue(ReplicationUtils.contains(peerConfig,TABLE_A));
    namespaces=new HashSet<>();
    tableCfs=new HashMap<>();
    namespaces.add("replication");
    tableCfs.put(TABLE_A,null);
    builder.setReplicateAllUserTables(false);
    builder.setTableCFsMap(tableCfs);
    builder.setNamespaces(namespaces);
    peerConfig=builder.build();
    Assert.assertTrue(ReplicationUtils.contains(peerConfig,TABLE_A));
    namespaces=new HashSet<>();
    tableCfs=new HashMap<>();
    namespaces.add("default");
    tableCfs.put(TABLE_A,null);
    builder.setReplicateAllUserTables(false);
    builder.setTableCFsMap(tableCfs);
    builder.setNamespaces(namespaces);
    peerConfig=builder.build();
    Assert.assertTrue(ReplicationUtils.contains(peerConfig,TABLE_A));
    namespaces=new HashSet<>();
    tableCfs=new HashMap<>();
    namespaces.add("replication");
    tableCfs.put(TABLE_B,null);
    builder.setReplicateAllUserTables(false);
    builder.setTableCFsMap(tableCfs);
    builder.setNamespaces(namespaces);
    peerConfig=builder.build();
    Assert.assertTrue(ReplicationUtils.contains(peerConfig,TABLE_A));
  }
}
