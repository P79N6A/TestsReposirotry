@Category({MasterTests.class,SmallTests.class}) public class TestProcedureDescriber {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestProcedureDescriber.class);
public static class TestProcedure extends Procedure {
    @Override protected Procedure[] execute(    Object env) throws ProcedureYieldException, ProcedureSuspendedException, InterruptedException {
      return null;
    }
    @Override protected void rollback(    Object env) throws IOException, InterruptedException {
    }
    @Override protected boolean abort(    Object env){
      return false;
    }
    @Override protected void serializeStateData(    ProcedureStateSerializer serializer) throws IOException {
      ByteString byteString=ByteString.copyFrom(new byte[]{'A'});
      BytesValue state=BytesValue.newBuilder().setValue(byteString).build();
      serializer.serialize(state);
    }
    @Override protected void deserializeStateData(    ProcedureStateSerializer serializer) throws IOException {
    }
  }
  @Test public void test(){
    TestProcedure procedure=new TestProcedure();
    String result=ProcedureDescriber.describe(procedure);
    Date epoch=new Date(0);
    assertEquals("{ ID => '-1', PARENT_ID => '-1', STATE => 'INITIALIZING', OWNER => '', " + "TYPE => 'org.apache.hadoop.hbase.procedure.TestProcedureDescriber$TestProcedure', " + "START_TIME => '" + epoch + "', LAST_UPDATE => '"+ epoch+ "', PARAMETERS => [ "+ "{ value => 'QQ==' } ] }",result);
  }
}
