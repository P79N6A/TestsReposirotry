/** 
 * Test the comparator used by Hbck.
 */
@Category({MiscTests.class,SmallTests.class}) public class TestHBaseFsckComparator {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHBaseFsckComparator.class);
  TableName table=TableName.valueOf("table1");
  TableName table2=TableName.valueOf("table2");
  byte[] keyStart=Bytes.toBytes("");
  byte[] keyA=Bytes.toBytes("A");
  byte[] keyB=Bytes.toBytes("B");
  byte[] keyC=Bytes.toBytes("C");
  byte[] keyEnd=Bytes.toBytes("");
  static HbckInfo genHbckInfo(  TableName table,  byte[] start,  byte[] end,  int time){
    return new HbckInfo(new MetaEntry(new HRegionInfo(table,start,end),null,time));
  }
  @Test public void testEquals(){
    HbckInfo hi1=genHbckInfo(table,keyA,keyB,0);
    HbckInfo hi2=genHbckInfo(table,keyA,keyB,0);
    assertEquals(0,HBaseFsck.cmp.compare(hi1,hi2));
    assertEquals(0,HBaseFsck.cmp.compare(hi2,hi1));
  }
  @Test public void testEqualsInstance(){
    HbckInfo hi1=genHbckInfo(table,keyA,keyB,0);
    HbckInfo hi2=hi1;
    assertEquals(0,HBaseFsck.cmp.compare(hi1,hi2));
    assertEquals(0,HBaseFsck.cmp.compare(hi2,hi1));
  }
  @Test public void testDiffTable(){
    HbckInfo hi1=genHbckInfo(table,keyA,keyC,0);
    HbckInfo hi2=genHbckInfo(table2,keyA,keyC,0);
    assertTrue(HBaseFsck.cmp.compare(hi1,hi2) < 0);
    assertTrue(HBaseFsck.cmp.compare(hi2,hi1) > 0);
  }
  @Test public void testDiffStartKey(){
    HbckInfo hi1=genHbckInfo(table,keyStart,keyC,0);
    HbckInfo hi2=genHbckInfo(table,keyA,keyC,0);
    assertTrue(HBaseFsck.cmp.compare(hi1,hi2) < 0);
    assertTrue(HBaseFsck.cmp.compare(hi2,hi1) > 0);
  }
  @Test public void testDiffEndKey(){
    HbckInfo hi1=genHbckInfo(table,keyA,keyB,0);
    HbckInfo hi2=genHbckInfo(table,keyA,keyC,0);
    assertTrue(HBaseFsck.cmp.compare(hi1,hi2) < 0);
    assertTrue(HBaseFsck.cmp.compare(hi2,hi1) > 0);
  }
  @Test public void testAbsEndKey(){
    HbckInfo hi1=genHbckInfo(table,keyA,keyC,0);
    HbckInfo hi2=genHbckInfo(table,keyA,keyEnd,0);
    assertTrue(HBaseFsck.cmp.compare(hi1,hi2) < 0);
    assertTrue(HBaseFsck.cmp.compare(hi2,hi1) > 0);
  }
}
