@Category(LargeTests.class) public class TestLeaseRenewal {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestLeaseRenewal.class);
  public MetricsAssertHelper HELPER=CompatibilityFactory.getInstance(MetricsAssertHelper.class);
  final Logger LOG=LoggerFactory.getLogger(getClass());
  private final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static byte[] FAMILY=Bytes.toBytes("testFamily");
  private static final byte[] ANOTHERROW=Bytes.toBytes("anotherrow");
  private final static byte[] COL_QUAL=Bytes.toBytes("f1");
  private final static byte[] VAL_BYTES=Bytes.toBytes("v1");
  private final static byte[] ROW_BYTES=Bytes.toBytes("r1");
  private final static int leaseTimeout=HConstants.DEFAULT_HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD / 4;
  @Rule public TestName name=new TestName();
  /** 
 * @throws java.lang.Exception
 */
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD,leaseTimeout);
    TEST_UTIL.startMiniCluster();
  }
  /** 
 * @throws java.lang.Exception
 */
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  /** 
 * @throws java.lang.Exception
 */
  @Before public void setUp() throws Exception {
  }
  /** 
 * @throws java.lang.Exception
 */
  @After public void tearDown() throws Exception {
    for (    HTableDescriptor htd : TEST_UTIL.getAdmin().listTables()) {
      LOG.info("Tear down, remove table=" + htd.getTableName());
      TEST_UTIL.deleteTable(htd.getTableName());
    }
  }
  @Test public void testLeaseRenewal() throws Exception {
    Table table=TEST_UTIL.createTable(TableName.valueOf(name.getMethodName()),FAMILY);
    Put p=new Put(ROW_BYTES);
    p.addColumn(FAMILY,COL_QUAL,VAL_BYTES);
    table.put(p);
    p=new Put(ANOTHERROW);
    p.addColumn(FAMILY,COL_QUAL,VAL_BYTES);
    table.put(p);
    Scan s=new Scan();
    s.setCaching(1);
    ResultScanner rs=table.getScanner(s);
    assertFalse(rs.renewLease());
    assertTrue(Arrays.equals(rs.next().getRow(),ANOTHERROW));
    Thread.sleep(leaseTimeout / 2);
    assertTrue(rs.renewLease());
    Thread.sleep(leaseTimeout / 2);
    assertTrue(rs.renewLease());
    Thread.sleep(leaseTimeout / 2);
    assertTrue(rs.renewLease());
    assertTrue(Arrays.equals(rs.next().getRow(),ROW_BYTES));
    assertFalse(rs.renewLease());
    assertNull(rs.next());
    assertFalse(rs.renewLease());
    rs.close();
    table.close();
    MetricsHBaseServerSource serverSource=TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getRpcServer().getMetrics().getMetricsSource();
    HELPER.assertCounter("exceptions.OutOfOrderScannerNextException",0,serverSource);
  }
}
