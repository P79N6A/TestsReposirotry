@Category(SmallTests.class) public class TestCachedMobFile {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCachedMobFile.class);
  static final Logger LOG=LoggerFactory.getLogger(TestCachedMobFile.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private Configuration conf=TEST_UTIL.getConfiguration();
  private CacheConfig cacheConf=new CacheConfig(conf);
  private static final String FAMILY1="familyName1";
  private static final String FAMILY2="familyName2";
  private static final long EXPECTED_REFERENCE_ZERO=0;
  private static final long EXPECTED_REFERENCE_ONE=1;
  private static final long EXPECTED_REFERENCE_TWO=2;
  @Rule public TestName testName=new TestName();
  @Test public void testOpenClose() throws Exception {
    String caseName=testName.getMethodName();
    Path testDir=TEST_UTIL.getDataTestDir();
    FileSystem fs=testDir.getFileSystem(conf);
    HFileContext meta=new HFileContextBuilder().withBlockSize(8 * 1024).build();
    StoreFileWriter writer=new StoreFileWriter.Builder(conf,cacheConf,fs).withOutputDir(testDir).withFileContext(meta).build();
    MobTestUtil.writeStoreFile(writer,caseName);
    CachedMobFile cachedMobFile=CachedMobFile.create(fs,writer.getPath(),conf,cacheConf);
    assertEquals(EXPECTED_REFERENCE_ZERO,cachedMobFile.getReferenceCount());
    cachedMobFile.open();
    assertEquals(EXPECTED_REFERENCE_ONE,cachedMobFile.getReferenceCount());
    cachedMobFile.open();
    assertEquals(EXPECTED_REFERENCE_TWO,cachedMobFile.getReferenceCount());
    cachedMobFile.close();
    assertEquals(EXPECTED_REFERENCE_ONE,cachedMobFile.getReferenceCount());
    cachedMobFile.close();
    assertEquals(EXPECTED_REFERENCE_ZERO,cachedMobFile.getReferenceCount());
  }
  @SuppressWarnings("SelfComparison") @Test public void testCompare() throws Exception {
    String caseName=testName.getMethodName();
    Path testDir=TEST_UTIL.getDataTestDir();
    FileSystem fs=testDir.getFileSystem(conf);
    Path outputDir1=new Path(testDir,FAMILY1);
    HFileContext meta=new HFileContextBuilder().withBlockSize(8 * 1024).build();
    StoreFileWriter writer1=new StoreFileWriter.Builder(conf,cacheConf,fs).withOutputDir(outputDir1).withFileContext(meta).build();
    MobTestUtil.writeStoreFile(writer1,caseName);
    CachedMobFile cachedMobFile1=CachedMobFile.create(fs,writer1.getPath(),conf,cacheConf);
    Path outputDir2=new Path(testDir,FAMILY2);
    StoreFileWriter writer2=new StoreFileWriter.Builder(conf,cacheConf,fs).withOutputDir(outputDir2).withFileContext(meta).build();
    MobTestUtil.writeStoreFile(writer2,caseName);
    CachedMobFile cachedMobFile2=CachedMobFile.create(fs,writer2.getPath(),conf,cacheConf);
    cachedMobFile1.access(1);
    cachedMobFile2.access(2);
    assertEquals(1,cachedMobFile1.compareTo(cachedMobFile2));
    assertEquals(-1,cachedMobFile2.compareTo(cachedMobFile1));
    assertEquals(0,cachedMobFile1.compareTo(cachedMobFile1));
  }
  @Test public void testReadKeyValue() throws Exception {
    Path testDir=TEST_UTIL.getDataTestDir();
    FileSystem fs=testDir.getFileSystem(conf);
    HFileContext meta=new HFileContextBuilder().withBlockSize(8 * 1024).build();
    StoreFileWriter writer=new StoreFileWriter.Builder(conf,cacheConf,fs).withOutputDir(testDir).withFileContext(meta).build();
    String caseName=testName.getMethodName();
    MobTestUtil.writeStoreFile(writer,caseName);
    CachedMobFile cachedMobFile=CachedMobFile.create(fs,writer.getPath(),conf,cacheConf);
    byte[] family=Bytes.toBytes(caseName);
    byte[] qualify=Bytes.toBytes(caseName);
    byte[] startKey=Bytes.toBytes("aa");
    KeyValue expectedKey=new KeyValue(startKey,family,qualify,Long.MAX_VALUE,Type.Put,startKey);
    KeyValue seekKey=expectedKey.createKeyOnly(false);
    Cell cell=cachedMobFile.readCell(seekKey,false);
    MobTestUtil.assertCellEquals(expectedKey,cell);
    byte[] endKey=Bytes.toBytes("zz");
    expectedKey=new KeyValue(endKey,family,qualify,Long.MAX_VALUE,Type.Put,endKey);
    seekKey=expectedKey.createKeyOnly(false);
    cell=cachedMobFile.readCell(seekKey,false);
    MobTestUtil.assertCellEquals(expectedKey,cell);
    byte[] randomKey=Bytes.toBytes(MobTestUtil.generateRandomString(2));
    expectedKey=new KeyValue(randomKey,family,qualify,Long.MAX_VALUE,Type.Put,randomKey);
    seekKey=expectedKey.createKeyOnly(false);
    cell=cachedMobFile.readCell(seekKey,false);
    MobTestUtil.assertCellEquals(expectedKey,cell);
    byte[] lowerKey=Bytes.toBytes("a1");
    expectedKey=new KeyValue(startKey,family,qualify,Long.MAX_VALUE,Type.Put,startKey);
    seekKey=new KeyValue(lowerKey,family,qualify,Long.MAX_VALUE,Type.Put,lowerKey);
    cell=cachedMobFile.readCell(seekKey,false);
    MobTestUtil.assertCellEquals(expectedKey,cell);
    byte[] upperKey=Bytes.toBytes("z{");
    seekKey=new KeyValue(upperKey,family,qualify,Long.MAX_VALUE,Type.Put,upperKey);
    cell=cachedMobFile.readCell(seekKey,false);
    Assert.assertNull(cell);
  }
}
