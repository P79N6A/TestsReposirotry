@Category({MiscTests.class,SmallTests.class}) public class TestPathFilter extends HttpServerFunctionalTest {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestPathFilter.class);
  private static final Logger LOG=LoggerFactory.getLogger(HttpServer.class);
  static final Set<String> RECORDS=new TreeSet<>();
  /** 
 * A very simple filter that records accessed uri's 
 */
static public class RecordingFilter implements Filter {
    private FilterConfig filterConfig=null;
    @Override public void init(    FilterConfig filterConfig){
      this.filterConfig=filterConfig;
    }
    @Override public void destroy(){
      this.filterConfig=null;
    }
    @Override public void doFilter(    ServletRequest request,    ServletResponse response,    FilterChain chain) throws IOException, ServletException {
      if (filterConfig == null)       return;
      String uri=((HttpServletRequest)request).getRequestURI();
      LOG.info("filtering " + uri);
      RECORDS.add(uri);
      chain.doFilter(request,response);
    }
    /** 
 * Configuration for RecordingFilter 
 */
static public class Initializer extends FilterInitializer {
      public Initializer(){
      }
      @Override public void initFilter(      FilterContainer container,      Configuration conf){
        container.addFilter("recording",RecordingFilter.class.getName(),null);
      }
    }
  }
  /** 
 * access a url, ignoring some IOException such as the page does not exist 
 */
  static void access(  String urlstring) throws IOException {
    LOG.warn("access " + urlstring);
    URL url=new URL(urlstring);
    URLConnection connection=url.openConnection();
    connection.connect();
    try {
      BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));
      try {
        for (; in.readLine() != null; )         ;
      }
  finally {
        in.close();
      }
    }
 catch (    IOException ioe) {
      LOG.warn("urlstring=" + urlstring,ioe);
    }
  }
  @Test public void testPathSpecFilters() throws Exception {
    Configuration conf=new Configuration();
    conf.set(HttpServer.FILTER_INITIALIZERS_PROPERTY,RecordingFilter.Initializer.class.getName());
    String[] pathSpecs={"/path","/path/*"};
    HttpServer http=createTestServer(conf,pathSpecs);
    http.start();
    final String baseURL="/path";
    final String baseSlashURL="/path/";
    final String addedURL="/path/nodes";
    final String addedSlashURL="/path/nodes/";
    final String longURL="/path/nodes/foo/job";
    final String rootURL="/";
    final String allURL="/*";
    final String[] filteredUrls={baseURL,baseSlashURL,addedURL,addedSlashURL,longURL};
    final String[] notFilteredUrls={rootURL,allURL};
    final String prefix="http://" + NetUtils.getHostPortString(http.getConnectorAddress(0));
    try {
      for (int i=0; i < filteredUrls.length; i++) {
        access(prefix + filteredUrls[i]);
      }
      for (int i=0; i < notFilteredUrls.length; i++) {
        access(prefix + notFilteredUrls[i]);
      }
    }
  finally {
      http.stop();
    }
    LOG.info("RECORDS = " + RECORDS);
    for (int i=0; i < filteredUrls.length; i++) {
      assertTrue(RECORDS.remove(filteredUrls[i]));
    }
    assertTrue(RECORDS.isEmpty());
  }
}
