/** 
 * Testcase for HBASE-20792.
 */
@Category({LargeTests.class,MasterTests.class}) public class TestRegionMoveAndAbandon {
  private static final Logger LOG=LoggerFactory.getLogger(TestRegionMoveAndAbandon.class);
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRegionMoveAndAbandon.class);
  @Rule public TestName name=new TestName();
  private HBaseTestingUtility UTIL;
  private MiniHBaseCluster cluster;
  private MiniZooKeeperCluster zkCluster;
  private HRegionServer rs1;
  private HRegionServer rs2;
  private RegionInfo regionInfo;
  @Before public void setup() throws Exception {
    UTIL=new HBaseTestingUtility();
    zkCluster=UTIL.startMiniZKCluster();
    cluster=UTIL.startMiniHBaseCluster(1,2);
    rs1=cluster.getRegionServer(0);
    rs2=cluster.getRegionServer(1);
    assertEquals(2,cluster.getRegionServerThreads().size());
    UTIL.waitTableAvailable(TableName.NAMESPACE_TABLE_NAME,30_000);
    regionInfo=Iterables.getOnlyElement(cluster.getRegions(TableName.NAMESPACE_TABLE_NAME)).getRegionInfo();
  }
  @After public void teardown() throws Exception {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
    if (zkCluster != null) {
      zkCluster.shutdown();
      zkCluster=null;
    }
  }
  @Test public void test() throws Exception {
    LOG.info("Moving {} to {}",regionInfo,rs2.getServerName());
    UTIL.moveRegionAndWait(regionInfo,rs2.getServerName());
    LOG.info("Moving {} to {}",regionInfo,rs1.getServerName());
    UTIL.moveRegionAndWait(regionInfo,rs1.getServerName());
    LOG.info("Killing RS {}",rs1.getServerName());
    cluster.killRegionServer(rs1.getServerName());
    UTIL.waitTableAvailable(TableName.NAMESPACE_TABLE_NAME,30_000);
    LOG.info("Killing master {}",cluster.getMaster().getServerName());
    cluster.killMaster(cluster.getMaster().getServerName());
    LOG.info("Killing RS {}",rs2.getServerName());
    cluster.killRegionServer(rs2.getServerName());
    LOG.info("Starting cluster");
    UTIL.getMiniHBaseCluster().startMaster();
    UTIL.ensureSomeRegionServersAvailable(2);
    UTIL.waitFor(30_000,new Waiter.Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        try (Table nsTable=UTIL.getConnection().getTable(TableName.NAMESPACE_TABLE_NAME)){
          nsTable.get(new Get(Bytes.toBytes("a")));
          return true;
        }
       }
    }
);
  }
}
