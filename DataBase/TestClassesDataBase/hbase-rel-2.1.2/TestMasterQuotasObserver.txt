/** 
 * Test class for  {@link MasterQuotasObserver}.
 */
@Category(MediumTests.class) public class TestMasterQuotasObserver {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMasterQuotasObserver.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static SpaceQuotaHelperForTests helper;
  @Rule public TestName testName=new TestName();
  @BeforeClass public static void setUp() throws Exception {
    Configuration conf=TEST_UTIL.getConfiguration();
    conf.setBoolean(QuotaUtil.QUOTA_CONF_KEY,true);
    TEST_UTIL.startMiniCluster(1);
  }
  @AfterClass public static void tearDown() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Before public void removeAllQuotas() throws Exception {
    if (helper == null) {
      helper=new SpaceQuotaHelperForTests(TEST_UTIL,testName,new AtomicLong());
    }
    final Connection conn=TEST_UTIL.getConnection();
    if (!conn.getAdmin().tableExists(QuotaUtil.QUOTA_TABLE_NAME)) {
      helper.waitForQuotaTable(conn);
    }
 else {
      helper.removeAllQuotas(conn);
      assertEquals(0,helper.listNumDefinedQuotas(conn));
    }
  }
  @Test public void testTableSpaceQuotaRemoved() throws Exception {
    final Connection conn=TEST_UTIL.getConnection();
    final Admin admin=conn.getAdmin();
    final TableName tn=TableName.valueOf(testName.getMethodName());
    if (admin.tableExists(tn)) {
      dropTable(admin,tn);
    }
    createTable(admin,tn);
    assertEquals(0,getNumSpaceQuotas());
    QuotaSettings settings=QuotaSettingsFactory.limitTableSpace(tn,1024L,SpaceViolationPolicy.NO_INSERTS);
    admin.setQuota(settings);
    assertEquals(1,getNumSpaceQuotas());
    dropTable(admin,tn);
    assertEquals(0,getNumSpaceQuotas());
  }
  @Test public void testTableRPCQuotaRemoved() throws Exception {
    final Connection conn=TEST_UTIL.getConnection();
    final Admin admin=conn.getAdmin();
    final TableName tn=TableName.valueOf(testName.getMethodName());
    if (admin.tableExists(tn)) {
      dropTable(admin,tn);
    }
    createTable(admin,tn);
    assertEquals(0,getThrottleQuotas());
    QuotaSettings settings=QuotaSettingsFactory.throttleTable(tn,ThrottleType.REQUEST_SIZE,2L,TimeUnit.HOURS);
    admin.setQuota(settings);
    assertEquals(1,getThrottleQuotas());
    dropTable(admin,tn);
    assertEquals(0,getThrottleQuotas());
  }
  @Test public void testTableSpaceAndRPCQuotaRemoved() throws Exception {
    final Connection conn=TEST_UTIL.getConnection();
    final Admin admin=conn.getAdmin();
    final TableName tn=TableName.valueOf(testName.getMethodName());
    if (admin.tableExists(tn)) {
      dropTable(admin,tn);
    }
    createTable(admin,tn);
    assertEquals(0,getNumSpaceQuotas());
    assertEquals(0,getThrottleQuotas());
    QuotaSettings settings=QuotaSettingsFactory.limitTableSpace(tn,1024L,SpaceViolationPolicy.NO_INSERTS);
    admin.setQuota(settings);
    settings=QuotaSettingsFactory.throttleTable(tn,ThrottleType.REQUEST_SIZE,2L,TimeUnit.HOURS);
    admin.setQuota(settings);
    assertEquals(1,getNumSpaceQuotas());
    assertEquals(1,getThrottleQuotas());
    dropTable(admin,tn);
    assertEquals(0,getNumSpaceQuotas());
    assertEquals(0,getThrottleQuotas());
  }
  @Test public void testNamespaceSpaceQuotaRemoved() throws Exception {
    final Connection conn=TEST_UTIL.getConnection();
    final Admin admin=conn.getAdmin();
    final String ns=testName.getMethodName();
    if (namespaceExists(ns)) {
      admin.deleteNamespace(ns);
    }
    NamespaceDescriptor desc=NamespaceDescriptor.create(ns).build();
    admin.createNamespace(desc);
    assertEquals(0,getNumSpaceQuotas());
    QuotaSettings settings=QuotaSettingsFactory.limitNamespaceSpace(ns,1024L,SpaceViolationPolicy.NO_INSERTS);
    admin.setQuota(settings);
    assertEquals(1,getNumSpaceQuotas());
    admin.deleteNamespace(ns);
    assertEquals(0,getNumSpaceQuotas());
  }
  @Test public void testNamespaceRPCQuotaRemoved() throws Exception {
    final Connection conn=TEST_UTIL.getConnection();
    final Admin admin=conn.getAdmin();
    final String ns=testName.getMethodName();
    if (namespaceExists(ns)) {
      admin.deleteNamespace(ns);
    }
    NamespaceDescriptor desc=NamespaceDescriptor.create(ns).build();
    admin.createNamespace(desc);
    assertEquals(0,getThrottleQuotas());
    QuotaSettings settings=QuotaSettingsFactory.throttleNamespace(ns,ThrottleType.REQUEST_SIZE,2L,TimeUnit.HOURS);
    admin.setQuota(settings);
    assertEquals(1,getThrottleQuotas());
    admin.deleteNamespace(ns);
    assertEquals(0,getThrottleQuotas());
  }
  @Test public void testNamespaceSpaceAndRPCQuotaRemoved() throws Exception {
    final Connection conn=TEST_UTIL.getConnection();
    final Admin admin=conn.getAdmin();
    final TableName tn=TableName.valueOf(testName.getMethodName());
    final String ns=testName.getMethodName();
    if (namespaceExists(ns)) {
      admin.deleteNamespace(ns);
    }
    NamespaceDescriptor desc=NamespaceDescriptor.create(ns).build();
    admin.createNamespace(desc);
    assertEquals(0,getNumSpaceQuotas());
    assertEquals(0,getThrottleQuotas());
    QuotaSettings settings=QuotaSettingsFactory.limitNamespaceSpace(ns,1024L,SpaceViolationPolicy.NO_INSERTS);
    admin.setQuota(settings);
    settings=QuotaSettingsFactory.throttleNamespace(ns,ThrottleType.REQUEST_SIZE,2L,TimeUnit.HOURS);
    admin.setQuota(settings);
    assertEquals(1,getNumSpaceQuotas());
    assertEquals(1,getThrottleQuotas());
    admin.deleteNamespace(ns);
    assertEquals(0,getNumSpaceQuotas());
    assertEquals(0,getThrottleQuotas());
  }
  @Test public void testObserverAddedByDefault() throws Exception {
    final HMaster master=TEST_UTIL.getHBaseCluster().getMaster();
    final MasterCoprocessorHost cpHost=master.getMasterCoprocessorHost();
    Set<String> coprocessorNames=cpHost.getCoprocessors();
    assertTrue("Did not find MasterQuotasObserver in list of CPs: " + coprocessorNames,coprocessorNames.contains(MasterQuotasObserver.class.getSimpleName()));
  }
  public boolean namespaceExists(  String ns) throws IOException {
    NamespaceDescriptor[] descs=TEST_UTIL.getAdmin().listNamespaceDescriptors();
    for (    NamespaceDescriptor desc : descs) {
      if (ns.equals(desc.getName())) {
        return true;
      }
    }
    return false;
  }
  public int getNumSpaceQuotas() throws Exception {
    QuotaRetriever scanner=QuotaRetriever.open(TEST_UTIL.getConfiguration());
    int numSpaceQuotas=0;
    for (    QuotaSettings quotaSettings : scanner) {
      if (quotaSettings.getQuotaType() == QuotaType.SPACE) {
        numSpaceQuotas++;
      }
    }
    return numSpaceQuotas;
  }
  public int getThrottleQuotas() throws Exception {
    QuotaRetriever scanner=QuotaRetriever.open(TEST_UTIL.getConfiguration());
    int throttleQuotas=0;
    for (    QuotaSettings quotaSettings : scanner) {
      if (quotaSettings.getQuotaType() == QuotaType.THROTTLE) {
        throttleQuotas++;
      }
    }
    return throttleQuotas;
  }
  private void createTable(  Admin admin,  TableName tn) throws Exception {
    HTableDescriptor tableDesc=new HTableDescriptor(tn);
    tableDesc.addFamily(new HColumnDescriptor("F1"));
    admin.createTable(tableDesc);
  }
  private void dropTable(  Admin admin,  TableName tn) throws Exception {
    admin.disableTable(tn);
    admin.deleteTable(tn);
  }
}
