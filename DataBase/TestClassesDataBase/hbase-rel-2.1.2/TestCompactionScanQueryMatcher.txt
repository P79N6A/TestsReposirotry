@Category({RegionServerTests.class,SmallTests.class}) public class TestCompactionScanQueryMatcher extends AbstractTestScanQueryMatcher {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCompactionScanQueryMatcher.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestCompactionScanQueryMatcher.class);
  @Test public void testMatch_PartialRangeDropDeletes() throws Exception {
    testDropDeletes(row2,row3,new byte[][]{row1,row2,row2,row3},INCLUDE,SKIP,SKIP,INCLUDE);
    testDropDeletes(row2,row3,new byte[][]{row1,row1,row2},INCLUDE,INCLUDE,SKIP);
    testDropDeletes(row2,row3,new byte[][]{row2,row3,row3},SKIP,INCLUDE,INCLUDE);
    testDropDeletes(row1,row3,new byte[][]{row1,row2,row3},SKIP,SKIP,INCLUDE);
    testDropDeletes(HConstants.EMPTY_START_ROW,row3,new byte[][]{row1,row2,row3},SKIP,SKIP,INCLUDE);
    testDropDeletes(row2,HConstants.EMPTY_END_ROW,new byte[][]{row1,row2,row3},INCLUDE,SKIP,SKIP);
    testDropDeletes(HConstants.EMPTY_START_ROW,HConstants.EMPTY_END_ROW,new byte[][]{row1,row2,row3,row3},SKIP,SKIP,SKIP,SKIP);
    testDropDeletes(row2,row3,new byte[][]{row1,row1,row3},INCLUDE,INCLUDE,INCLUDE);
    testDropDeletes(row2,row3,new byte[][]{row3,row3},INCLUDE,INCLUDE);
    testDropDeletes(row2,row3,new byte[][]{row1,row1},INCLUDE,INCLUDE);
  }
  private void testDropDeletes(  byte[] from,  byte[] to,  byte[][] rows,  MatchCode... expected) throws IOException {
    long now=EnvironmentEdgeManager.currentTime();
    ScanInfo scanInfo=new ScanInfo(this.conf,fam2,0,1,ttl,KeepDeletedCells.FALSE,HConstants.DEFAULT_BLOCKSIZE,-1L,rowComparator,false);
    CompactionScanQueryMatcher qm=CompactionScanQueryMatcher.create(scanInfo,ScanType.COMPACT_RETAIN_DELETES,Long.MAX_VALUE,HConstants.OLDEST_TIMESTAMP,HConstants.OLDEST_TIMESTAMP,now,from,to,null);
    List<ScanQueryMatcher.MatchCode> actual=new ArrayList<>(rows.length);
    byte[] prevRow=null;
    for (    byte[] row : rows) {
      if (prevRow == null || !Bytes.equals(prevRow,row)) {
        qm.setToNewRow(KeyValueUtil.createFirstOnRow(row));
        prevRow=row;
      }
      actual.add(qm.match(new KeyValue(row,fam2,null,now,Type.Delete)));
    }
    assertEquals(expected.length,actual.size());
    for (int i=0; i < expected.length; i++) {
      LOG.debug("expected " + expected[i] + ", actual "+ actual.get(i));
      assertEquals(expected[i],actual.get(i));
    }
  }
}
