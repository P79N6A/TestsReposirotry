@Category({MasterTests.class,SmallTests.class}) public class TestBitSetNode {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestBitSetNode.class);
  @Test public void testGetActiveMaxMinProcId(){
    BitSetNode node=new BitSetNode(5L,false);
    assertEquals(5L,node.getActiveMinProcId());
    assertEquals(5L,node.getActiveMaxProcId());
    node.insertOrUpdate(10L);
    assertEquals(5L,node.getActiveMinProcId());
    assertEquals(10L,node.getActiveMaxProcId());
    node.insertOrUpdate(1L);
    assertEquals(1L,node.getActiveMinProcId());
    assertEquals(10L,node.getActiveMaxProcId());
    node.delete(10L);
    assertEquals(1L,node.getActiveMinProcId());
    assertEquals(5L,node.getActiveMaxProcId());
    node.delete(1L);
    assertEquals(5L,node.getActiveMinProcId());
    assertEquals(5L,node.getActiveMaxProcId());
    node.delete(5L);
    assertEquals(Procedure.NO_PROC_ID,node.getActiveMinProcId());
    assertEquals(Procedure.NO_PROC_ID,node.getActiveMaxProcId());
  }
  @Test public void testGrow(){
    BitSetNode node=new BitSetNode(1000,false);
    assertTrue(node.canGrow(1024));
    assertTrue(node.canGrow(900));
    assertTrue(node.canGrow(1100));
    assertFalse(node.canGrow(100));
    assertFalse(node.canGrow(10000));
    node.grow(1100);
    assertTrue(node.contains(1100));
    assertTrue(node.isModified(1000));
    node.grow(900);
    assertTrue(node.contains(900));
    assertTrue(node.isModified(1000));
    for (long i=node.getStart(); i <= node.getEnd(); i++) {
      if (i != 1000) {
        assertEquals(DeleteState.YES,node.isDeleted(i));
      }
 else {
        assertEquals(DeleteState.NO,node.isDeleted(i));
      }
    }
  }
  @Test public void testMerge(){
    BitSetNode node=new BitSetNode(1000,false);
    assertTrue(node.canMerge(new BitSetNode(1200,false)));
    assertFalse(node.canMerge(new BitSetNode(10000,false)));
    BitSetNode rightNode=new BitSetNode(1200,false);
    node.merge(rightNode);
    assertTrue(node.isModified(1000));
    assertTrue(node.isModified(1200));
    for (long i=node.getStart(); i <= node.getEnd(); i++) {
      if (i != 1000 && i != 1200) {
        assertEquals(DeleteState.YES,node.isDeleted(i));
      }
 else {
        assertEquals(DeleteState.NO,node.isDeleted(i));
      }
    }
  }
}
