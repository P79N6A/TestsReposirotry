/** 
 * Test move fails when table disabled
 */
@Category({LargeTests.class}) public class TestRegionMove {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRegionMove.class);
  @Rule public ExpectedException thrown=ExpectedException.none();
  @Rule public TestName name=new TestName();
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  public static Configuration CONF;
  protected static final String F1="f1";
  protected TableName tableName;
  protected String method;
  @BeforeClass public static void startCluster() throws Exception {
    TEST_UTIL.startMiniCluster(2);
  }
  @AfterClass public static void stopCluster() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Before public void setup() throws IOException {
    CONF=TEST_UTIL.getConfiguration();
    method=name.getMethodName();
    tableName=TableName.valueOf(method);
  }
  @Test public void testDisableAndMove() throws Exception {
    Admin admin=TEST_UTIL.getAdmin();
    Table t=TEST_UTIL.createMultiRegionTable(tableName,Bytes.toBytes(F1),10);
    TEST_UTIL.waitUntilAllRegionsAssigned(tableName);
    for (    RegionInfo regionInfo : admin.getRegions(tableName)) {
      byte[] startKey=regionInfo.getStartKey();
      byte[] rowKey=org.apache.hbase.thirdparty.com.google.common.primitives.Bytes.concat(startKey,Bytes.toBytes("1"));
      Put p=new Put(rowKey);
      p.addColumn(Bytes.toBytes(F1),Bytes.toBytes("q1"),Bytes.toBytes("value"));
      t.put(p);
    }
    HRegionServer rs1=TEST_UTIL.getRSForFirstRegionInTable(tableName);
    HRegionServer rs2=TEST_UTIL.getOtherRegionServer(rs1);
    List<RegionInfo> regionsOnRS1ForTable=admin.getRegions(rs1.getServerName()).stream().filter((regionInfo) -> regionInfo.getTable().equals(tableName)).collect(Collectors.toList());
    assertTrue("Expected to find at least one region for " + tableName + " on "+ rs1.getServerName()+ ", but found none",!regionsOnRS1ForTable.isEmpty());
    final RegionInfo regionToMove=regionsOnRS1ForTable.get(0);
    admin.unassign(regionToMove.getRegionName(),true);
    try {
      admin.move(regionToMove.getEncodedNameAsBytes(),Bytes.toBytes(rs2.getServerName().toString()));
      fail();
    }
 catch (    DoNotRetryRegionException e) {
    }
    admin.assign(regionToMove.getRegionName());
    admin.disableTable(tableName);
    thrown.expect(TableNotEnabledException.class);
    thrown.expectMessage(t.getName().toString());
    admin.move(regionToMove.getEncodedNameAsBytes(),Bytes.toBytes(rs2.getServerName().toString()));
  }
}
