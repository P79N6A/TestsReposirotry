@Category({MasterTests.class,SmallTests.class}) public class TestProcedureToString {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestProcedureToString.class);
  /** 
 * A do-nothing environment for BasicProcedure.
 */
static class BasicProcedureEnv {
  }
  /** 
 * A do-nothing basic procedure just for testing toString.
 */
static class BasicProcedure extends Procedure<BasicProcedureEnv> {
    @Override protected Procedure<BasicProcedureEnv>[] execute(    BasicProcedureEnv env) throws ProcedureYieldException, InterruptedException {
      return new Procedure[]{this};
    }
    @Override protected void rollback(    BasicProcedureEnv env) throws IOException, InterruptedException {
    }
    @Override protected boolean abort(    BasicProcedureEnv env){
      return false;
    }
    @Override protected void serializeStateData(    ProcedureStateSerializer serializer) throws IOException {
    }
    @Override protected void deserializeStateData(    ProcedureStateSerializer serializer) throws IOException {
    }
  }
  /** 
 * A do-nothing basic procedure that overrides the toStringState method. It just doubles the current state string.
 */
static class DoublingStateStringBasicProcedure extends BasicProcedure {
    @Override protected void toStringState(    StringBuilder builder){
      super.toStringState(builder);
      super.toStringState(builder);
    }
  }
  /** 
 * Test that I can override the toString for its state value.
 * @throws ProcedureYieldException
 * @throws InterruptedException
 */
  @Test public void testBasicToString() throws ProcedureYieldException, InterruptedException {
    BasicProcedure p=new BasicProcedure();
    ProcedureState state=ProcedureState.RUNNABLE;
    p.setState(state);
    assertTrue(p.toString().contains(state.toString()));
    p=new DoublingStateStringBasicProcedure();
    p.setState(state);
    String testStr=state.toString() + state.toString();
    assertTrue(p.toString().contains(testStr));
  }
  /** 
 * Do-nothing SimpleMachineProcedure for checking its toString.
 */
static class SimpleStateMachineProcedure extends StateMachineProcedure<BasicProcedureEnv,ServerCrashState> {
    @Override protected org.apache.hadoop.hbase.procedure2.StateMachineProcedure.Flow executeFromState(    BasicProcedureEnv env,    ServerCrashState state) throws ProcedureYieldException, InterruptedException {
      return null;
    }
    @Override protected void rollbackState(    BasicProcedureEnv env,    ServerCrashState state) throws IOException, InterruptedException {
    }
    @Override protected ServerCrashState getState(    int stateId){
      return ServerCrashState.valueOf(stateId);
    }
    @Override protected int getStateId(    ServerCrashState state){
      return state.getNumber();
    }
    @Override protected ServerCrashState getInitialState(){
      return null;
    }
    @Override protected boolean abort(    BasicProcedureEnv env){
      return false;
    }
  }
  @Test public void testStateMachineProcedure(){
    SimpleStateMachineProcedure p=new SimpleStateMachineProcedure();
    ProcedureState state=ProcedureState.RUNNABLE;
    p.setState(state);
    p.setNextState(ServerCrashState.SERVER_CRASH_ASSIGN);
    assertTrue(p.toString().contains(state.toString()));
    assertTrue(p.toString().contains(ServerCrashState.SERVER_CRASH_ASSIGN.toString()));
  }
}
