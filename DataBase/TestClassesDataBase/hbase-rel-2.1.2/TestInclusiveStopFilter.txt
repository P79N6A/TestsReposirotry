/** 
 * Tests the inclusive stop row filter
 */
@Category({FilterTests.class,SmallTests.class}) public class TestInclusiveStopFilter {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestInclusiveStopFilter.class);
  private final byte[] STOP_ROW=Bytes.toBytes("stop_row");
  private final byte[] GOOD_ROW=Bytes.toBytes("good_row");
  private final byte[] PAST_STOP_ROW=Bytes.toBytes("zzzzzz");
  Filter mainFilter;
  @Before public void setUp() throws Exception {
    mainFilter=new InclusiveStopFilter(STOP_ROW);
  }
  /** 
 * Tests identification of the stop row
 * @throws Exception
 */
  @Test public void testStopRowIdentification() throws Exception {
    stopRowTests(mainFilter);
  }
  /** 
 * Tests serialization
 * @throws Exception
 */
  @Test public void testSerialization() throws Exception {
    byte[] buffer=mainFilter.toByteArray();
    Filter newFilter=InclusiveStopFilter.parseFrom(buffer);
    stopRowTests(newFilter);
  }
  private void stopRowTests(  Filter filter) throws Exception {
    assertFalse("Filtering on " + Bytes.toString(GOOD_ROW),filter.filterRowKey(KeyValueUtil.createFirstOnRow(GOOD_ROW)));
    assertFalse("Filtering on " + Bytes.toString(STOP_ROW),filter.filterRowKey(KeyValueUtil.createFirstOnRow(STOP_ROW)));
    assertTrue("Filtering on " + Bytes.toString(PAST_STOP_ROW),filter.filterRowKey(KeyValueUtil.createFirstOnRow(PAST_STOP_ROW)));
    assertTrue("FilterAllRemaining",filter.filterAllRemaining());
    assertFalse("FilterNotNull",filter.filterRow());
  }
}
