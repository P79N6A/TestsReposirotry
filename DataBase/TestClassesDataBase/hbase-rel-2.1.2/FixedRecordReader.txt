public static class FixedRecordReader<K,V> extends RecordReader<K,V> {
  private int index=-1;
  private K[] keys;
  private V[] values;
  public FixedRecordReader(  K[] keys,  V[] values){
    this.keys=keys;
    this.values=values;
  }
  @Override public void initialize(  InputSplit split,  TaskAttemptContext context) throws IOException, InterruptedException {
  }
  @Override public boolean nextKeyValue() throws IOException, InterruptedException {
    return ++index < keys.length;
  }
  @Override public K getCurrentKey() throws IOException, InterruptedException {
    return keys[index];
  }
  @Override public V getCurrentValue() throws IOException, InterruptedException {
    return values[index];
  }
  @Override public float getProgress() throws IOException, InterruptedException {
    return (float)index / keys.length;
  }
  @Override public void close() throws IOException {
  }
}
