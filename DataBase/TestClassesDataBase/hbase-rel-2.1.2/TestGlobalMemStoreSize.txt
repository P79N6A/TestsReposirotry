/** 
 * Test HBASE-3694 whether the GlobalMemStoreSize is the same as the summary of all the online region's MemStoreSize
 */
@Category({MiscTests.class,MediumTests.class}) public class TestGlobalMemStoreSize {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestGlobalMemStoreSize.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestGlobalMemStoreSize.class);
  private static int regionServerNum=4;
  private static int regionNum=16;
  private static int totalRegionNum=regionNum + 2;
  private HBaseTestingUtility TEST_UTIL;
  private MiniHBaseCluster cluster;
  @Rule public TestName name=new TestName();
  /** 
 * Test the global mem store size in the region server is equal to sum of each region's mem store size
 * @throws Exception
 */
  @Test public void testGlobalMemStore() throws Exception {
    LOG.info("Starting cluster");
    Configuration conf=HBaseConfiguration.create();
    TEST_UTIL=new HBaseTestingUtility(conf);
    TEST_UTIL.startMiniCluster(1,regionServerNum);
    cluster=TEST_UTIL.getHBaseCluster();
    LOG.info("Waiting for active/ready master");
    cluster.waitForActiveAndReadyMaster();
    final TableName table=TableName.valueOf(name.getMethodName());
    byte[] family=Bytes.toBytes("family");
    LOG.info("Creating table with " + regionNum + " regions");
    Table ht=TEST_UTIL.createMultiRegionTable(table,family,regionNum);
    int numRegions=-1;
    try (RegionLocator r=TEST_UTIL.getConnection().getRegionLocator(table)){
      numRegions=r.getStartKeys().length;
    }
     assertEquals(regionNum,numRegions);
    waitForAllRegionsAssigned();
    for (    HRegionServer server : getOnlineRegionServers()) {
      long globalMemStoreSize=0;
      for (      RegionInfo regionInfo : ProtobufUtil.getOnlineRegions(null,server.getRSRpcServices())) {
        globalMemStoreSize+=server.getRegion(regionInfo.getEncodedName()).getMemStoreDataSize();
      }
      assertEquals(server.getRegionServerAccounting().getGlobalMemStoreDataSize(),globalMemStoreSize);
    }
    int i=0;
    for (    HRegionServer server : getOnlineRegionServers()) {
      LOG.info("Starting flushes on " + server.getServerName() + ", size="+ server.getRegionServerAccounting().getGlobalMemStoreDataSize());
      for (      RegionInfo regionInfo : ProtobufUtil.getOnlineRegions(null,server.getRSRpcServices())) {
        HRegion r=server.getRegion(regionInfo.getEncodedName());
        flush(r,server);
      }
      LOG.info("Post flush on " + server.getServerName());
      long now=System.currentTimeMillis();
      long timeout=now + 1000;
      while (server.getRegionServerAccounting().getGlobalMemStoreDataSize() != 0 && timeout < System.currentTimeMillis()) {
        Threads.sleep(10);
      }
      long size=server.getRegionServerAccounting().getGlobalMemStoreDataSize();
      if (size > 0) {
        for (        RegionInfo regionInfo : ProtobufUtil.getOnlineRegions(null,server.getRSRpcServices())) {
          HRegion r=server.getRegion(regionInfo.getEncodedName());
          long l=r.getMemStoreDataSize();
          if (l > 0) {
            assertTrue(regionInfo.isMetaRegion());
            LOG.info(r.toString() + " " + l+ ", reflushing");
            r.flush(true);
          }
        }
      }
      size=server.getRegionServerAccounting().getGlobalMemStoreDataSize();
      assertEquals("Server=" + server.getServerName() + ", i="+ i++,0,size);
    }
    ht.close();
    TEST_UTIL.shutdownMiniCluster();
  }
  /** 
 * Flush and log stats on flush
 * @param r
 * @param server
 * @throws IOException
 */
  private void flush(  final HRegion r,  final HRegionServer server) throws IOException {
    LOG.info("Flush " + r.toString() + " on "+ server.getServerName()+ ", "+ r.flush(true)+ ", size="+ server.getRegionServerAccounting().getGlobalMemStoreDataSize());
  }
  private List<HRegionServer> getOnlineRegionServers(){
    List<HRegionServer> list=new ArrayList<>();
    for (    JVMClusterUtil.RegionServerThread rst : cluster.getRegionServerThreads()) {
      if (rst.getRegionServer().isOnline()) {
        list.add(rst.getRegionServer());
      }
    }
    return list;
  }
  /** 
 * Wait until all the regions are assigned.
 */
  private void waitForAllRegionsAssigned() throws IOException {
    while (true) {
      int regionCount=HBaseTestingUtility.getAllOnlineRegions(cluster).size();
      if (regionCount >= totalRegionNum)       break;
      LOG.debug("Waiting for there to be " + totalRegionNum + " regions, but there are "+ regionCount+ " right now.");
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
      }
    }
  }
}
