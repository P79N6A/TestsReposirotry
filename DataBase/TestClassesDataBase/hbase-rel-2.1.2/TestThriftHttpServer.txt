/** 
 * Start the HBase Thrift HTTP server on a random port through the command-line interface and talk to it from client side.
 */
@Category({ClientTests.class,LargeTests.class}) public class TestThriftHttpServer {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestThriftHttpServer.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestThriftHttpServer.class);
  static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private Thread httpServerThread;
  private volatile Exception httpServerException;
  private Exception clientSideException;
  private ThriftServer thriftServer;
  int port;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.getConfiguration().setBoolean("hbase.regionserver.thrift.http",true);
    TEST_UTIL.getConfiguration().setBoolean("hbase.table.sanity.checks",false);
    TEST_UTIL.startMiniCluster();
    EnvironmentEdgeManagerTestHelper.injectEdge(new IncrementingEnvironmentEdge());
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
    EnvironmentEdgeManager.reset();
  }
  @Test public void testExceptionThrownWhenMisConfigured() throws Exception {
    Configuration conf=new Configuration(TEST_UTIL.getConfiguration());
    conf.set("hbase.thrift.security.qop","privacy");
    conf.setBoolean("hbase.thrift.ssl.enabled",false);
    ThriftServerRunner runner=null;
    ExpectedException thrown=ExpectedException.none();
    try {
      thrown.expect(IllegalArgumentException.class);
      thrown.expectMessage("Thrift HTTP Server's QoP is privacy, " + "but hbase.thrift.ssl.enabled is false");
      runner=new ThriftServerRunner(conf);
      fail("Thrift HTTP Server starts up even with wrong security configurations.");
    }
 catch (    Exception e) {
    }
    assertNull(runner);
  }
  private void startHttpServerThread(  final String[] args){
    LOG.info("Starting HBase Thrift server with HTTP server: " + Joiner.on(" ").join(args));
    httpServerException=null;
    httpServerThread=new Thread(() -> {
      try {
        thriftServer.doMain(args);
      }
 catch (      Exception e) {
        httpServerException=e;
      }
    }
);
    httpServerThread.setName(ThriftServer.class.getSimpleName() + "-httpServer");
    httpServerThread.start();
  }
  @Rule public ExpectedException exception=ExpectedException.none();
  @Test public void testRunThriftServerWithHeaderBufferLength() throws Exception {
    try {
      runThriftServer(1024 * 63);
    }
 catch (    TTransportException tex) {
      assertFalse(tex.getMessage().equals("HTTP Response code: 431"));
    }
    exception.expect(TTransportException.class);
    exception.expectMessage("HTTP Response code: 431");
    runThriftServer(1024 * 64);
  }
  @Test public void testRunThriftServer() throws Exception {
    runThriftServer(0);
  }
  void runThriftServer(  int customHeaderSize) throws Exception {
    List<String> args=new ArrayList<>(3);
    port=HBaseTestingUtility.randomFreePort();
    args.add("-" + ThriftServer.PORT_OPTION);
    args.add(String.valueOf(port));
    args.add("-" + ThriftServer.INFOPORT_OPTION);
    int infoPort=HBaseTestingUtility.randomFreePort();
    args.add(String.valueOf(infoPort));
    args.add("start");
    thriftServer=new ThriftServer(TEST_UTIL.getConfiguration());
    startHttpServerThread(args.toArray(new String[args.size()]));
    HBaseTestingUtility.waitForHostPort(HConstants.LOCALHOST,port);
    String url="http://" + HConstants.LOCALHOST + ":"+ port;
    try {
      checkHttpMethods(url);
      talkToThriftServer(url,customHeaderSize);
    }
 catch (    Exception ex) {
      clientSideException=ex;
    }
 finally {
      stopHttpServerThread();
    }
    if (clientSideException != null) {
      LOG.error("Thrift client threw an exception " + clientSideException);
      if (clientSideException instanceof TTransportException) {
        throw clientSideException;
      }
 else {
        throw new Exception(clientSideException);
      }
    }
  }
  private void checkHttpMethods(  String url) throws Exception {
    HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();
    conn.setRequestMethod("TRACE");
    conn.connect();
    Assert.assertEquals(HttpURLConnection.HTTP_FORBIDDEN,conn.getResponseCode());
  }
  static volatile boolean tableCreated=false;
  void talkToThriftServer(  String url,  int customHeaderSize) throws Exception {
    THttpClient httpClient=new THttpClient(url);
    httpClient.open();
    if (customHeaderSize > 0) {
      StringBuilder sb=new StringBuilder();
      for (int i=0; i < customHeaderSize; i++) {
        sb.append("a");
      }
      httpClient.setCustomHeader("User-Agent",sb.toString());
    }
    try {
      TProtocol prot;
      prot=new TBinaryProtocol(httpClient);
      Hbase.Client client=new Hbase.Client(prot);
      if (!tableCreated) {
        TestThriftServer.createTestTables(client);
        tableCreated=true;
      }
      TestThriftServer.checkTableList(client);
    }
  finally {
      httpClient.close();
    }
  }
  private void stopHttpServerThread() throws Exception {
    LOG.debug("Stopping " + " Thrift HTTP server");
    thriftServer.stop();
    httpServerThread.join();
    if (httpServerException != null) {
      LOG.error("Command-line invocation of HBase Thrift server threw an " + "exception",httpServerException);
      throw new Exception(httpServerException);
    }
  }
}
