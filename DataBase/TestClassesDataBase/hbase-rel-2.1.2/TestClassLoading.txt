/** 
 * Test coprocessors class loading.
 */
@Category({CoprocessorTests.class,MediumTests.class}) public class TestClassLoading {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestClassLoading.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestClassLoading.class);
  private final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
public static class TestMasterCoprocessor implements MasterCoprocessor, MasterObserver {
    @Override public Optional<MasterObserver> getMasterObserver(){
      return Optional.of(this);
    }
  }
  private static MiniDFSCluster cluster;
  static final TableName tableName=TableName.valueOf("TestClassLoading");
  static final String cpName1="TestCP1";
  static final String cpName2="TestCP2";
  static final String cpName3="TestCP3";
  static final String cpName4="TestCP4";
  static final String cpName5="TestCP5";
  static final String cpName6="TestCP6";
  private static Class<?> regionCoprocessor1=ColumnAggregationEndpoint.class;
  private static Class<?> regionCoprocessor2=TestServerCustomProtocol.PingHandler.class;
  private static Class<?> regionServerCoprocessor=SampleRegionWALCoprocessor.class;
  private static Class<?> masterCoprocessor=TestMasterCoprocessor.class;
  private static final String[] regionServerSystemCoprocessors=new String[]{regionServerCoprocessor.getSimpleName()};
  private static final String[] masterRegionServerSystemCoprocessors=new String[]{regionCoprocessor1.getSimpleName(),MultiRowMutationEndpoint.class.getSimpleName(),regionServerCoprocessor.getSimpleName()};
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    Configuration conf=TEST_UTIL.getConfiguration();
    conf.setStrings(CoprocessorHost.REGION_COPROCESSOR_CONF_KEY,regionCoprocessor1.getName());
    conf.setStrings(CoprocessorHost.USER_REGION_COPROCESSOR_CONF_KEY,regionCoprocessor2.getName());
    conf.setStrings(CoprocessorHost.WAL_COPROCESSOR_CONF_KEY,regionServerCoprocessor.getName());
    conf.setStrings(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,masterCoprocessor.getName());
    TEST_UTIL.startMiniCluster(1);
    cluster=TEST_UTIL.getDFSCluster();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  static File buildCoprocessorJar(  String className) throws Exception {
    String code="import org.apache.hadoop.hbase.coprocessor.*;" + "public class " + className + " implements RegionCoprocessor {}";
    return ClassLoaderTestHelper.buildJar(TEST_UTIL.getDataTestDir().toString(),className,code);
  }
  @Test public void testClassLoadingFromHDFS() throws Exception {
    FileSystem fs=cluster.getFileSystem();
    File jarFile1=buildCoprocessorJar(cpName1);
    File jarFile2=buildCoprocessorJar(cpName2);
    fs.copyFromLocalFile(new Path(jarFile1.getPath()),new Path(fs.getUri().toString() + Path.SEPARATOR));
    String jarFileOnHDFS1=fs.getUri().toString() + Path.SEPARATOR + jarFile1.getName();
    Path pathOnHDFS1=new Path(jarFileOnHDFS1);
    assertTrue("Copy jar file to HDFS failed.",fs.exists(pathOnHDFS1));
    LOG.info("Copied jar file to HDFS: " + jarFileOnHDFS1);
    fs.copyFromLocalFile(new Path(jarFile2.getPath()),new Path(fs.getUri().toString() + Path.SEPARATOR));
    String jarFileOnHDFS2=fs.getUri().toString() + Path.SEPARATOR + jarFile2.getName();
    Path pathOnHDFS2=new Path(jarFileOnHDFS2);
    assertTrue("Copy jar file to HDFS failed.",fs.exists(pathOnHDFS2));
    LOG.info("Copied jar file to HDFS: " + jarFileOnHDFS2);
    HTableDescriptor htd=new HTableDescriptor(tableName);
    htd.addFamily(new HColumnDescriptor("test"));
    htd.setValue("COPROCESSOR$1",jarFileOnHDFS1.toString() + "|" + cpName1+ "|"+ Coprocessor.PRIORITY_USER);
    htd.setValue("COPROCESSOR$2",jarFileOnHDFS2.toString() + "|" + cpName2+ "|"+ Coprocessor.PRIORITY_USER+ "|k1=v1,k2=v2,k3=v3");
    Admin admin=TEST_UTIL.getAdmin();
    if (admin.tableExists(tableName)) {
      if (admin.isTableEnabled(tableName)) {
        admin.disableTable(tableName);
      }
      admin.deleteTable(tableName);
    }
    CoprocessorClassLoader.clearCache();
    byte[] startKey={10,63};
    byte[] endKey={12,43};
    admin.createTable(htd,startKey,endKey,4);
    waitForTable(htd.getTableName());
    boolean foundTableRegion=false;
    boolean found1=true, found2=true, found2_k1=true, found2_k2=true, found2_k3=true;
    Map<Region,Set<ClassLoader>> regionsActiveClassLoaders=new HashMap<>();
    MiniHBaseCluster hbase=TEST_UTIL.getHBaseCluster();
    for (    HRegion region : hbase.getRegionServer(0).getOnlineRegionsLocalContext()) {
      if (region.getRegionInfo().getRegionNameAsString().startsWith(tableName.getNameAsString())) {
        foundTableRegion=true;
        CoprocessorEnvironment env;
        env=region.getCoprocessorHost().findCoprocessorEnvironment(cpName1);
        found1=found1 && (env != null);
        env=region.getCoprocessorHost().findCoprocessorEnvironment(cpName2);
        found2=found2 && (env != null);
        if (env != null) {
          Configuration conf=env.getConfiguration();
          found2_k1=found2_k1 && (conf.get("k1") != null);
          found2_k2=found2_k2 && (conf.get("k2") != null);
          found2_k3=found2_k3 && (conf.get("k3") != null);
        }
 else {
          found2_k1=false;
          found2_k2=false;
          found2_k3=false;
        }
        regionsActiveClassLoaders.put(region,((CoprocessorHost)region.getCoprocessorHost()).getExternalClassLoaders());
      }
    }
    assertTrue("No region was found for table " + tableName,foundTableRegion);
    assertTrue("Class " + cpName1 + " was missing on a region",found1);
    assertTrue("Class " + cpName2 + " was missing on a region",found2);
    assertTrue("Configuration key 'k1' was missing on a region",found2_k1);
    assertTrue("Configuration key 'k2' was missing on a region",found2_k2);
    assertTrue("Configuration key 'k3' was missing on a region",found2_k3);
    assertNotNull(jarFileOnHDFS1 + " was not cached",CoprocessorClassLoader.getIfCached(pathOnHDFS1));
    assertNotNull(jarFileOnHDFS2 + " was not cached",CoprocessorClassLoader.getIfCached(pathOnHDFS2));
    assertEquals("The number of cached classloaders should be equal to the number" + " of external jar files",2,CoprocessorClassLoader.getAllCached().size());
    Set<ClassLoader> externalClassLoaders=new HashSet<>(CoprocessorClassLoader.getAllCached());
    for (    Map.Entry<Region,Set<ClassLoader>> regionCP : regionsActiveClassLoaders.entrySet()) {
      assertTrue("Some CP classloaders for region " + regionCP.getKey() + " are not cached."+ " ClassLoader Cache:"+ externalClassLoaders+ " Region ClassLoaders:"+ regionCP.getValue(),externalClassLoaders.containsAll(regionCP.getValue()));
    }
  }
  private String getLocalPath(  File file){
    return new Path(file.toURI()).toString();
  }
  @Test public void testClassLoadingFromLocalFS() throws Exception {
    File jarFile=buildCoprocessorJar(cpName3);
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(cpName3));
    htd.addFamily(new HColumnDescriptor("test"));
    htd.setValue("COPROCESSOR$1",getLocalPath(jarFile) + "|" + cpName3+ "|"+ Coprocessor.PRIORITY_USER);
    Admin admin=TEST_UTIL.getAdmin();
    admin.createTable(htd);
    waitForTable(htd.getTableName());
    boolean found=false;
    MiniHBaseCluster hbase=TEST_UTIL.getHBaseCluster();
    for (    HRegion region : hbase.getRegionServer(0).getOnlineRegionsLocalContext()) {
      if (region.getRegionInfo().getRegionNameAsString().startsWith(cpName3)) {
        found=(region.getCoprocessorHost().findCoprocessor(cpName3) != null);
      }
    }
    assertTrue("Class " + cpName3 + " was missing on a region",found);
  }
  @Test public void testPrivateClassLoader() throws Exception {
    File jarFile=buildCoprocessorJar(cpName4);
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(cpName4));
    htd.addFamily(new HColumnDescriptor("test"));
    htd.setValue("COPROCESSOR$1",getLocalPath(jarFile) + "|" + cpName4+ "|"+ Coprocessor.PRIORITY_USER);
    Admin admin=TEST_UTIL.getAdmin();
    admin.createTable(htd);
    waitForTable(htd.getTableName());
    boolean found=false;
    MiniHBaseCluster hbase=TEST_UTIL.getHBaseCluster();
    for (    HRegion region : hbase.getRegionServer(0).getOnlineRegionsLocalContext()) {
      if (region.getRegionInfo().getRegionNameAsString().startsWith(cpName4)) {
        Coprocessor cp=region.getCoprocessorHost().findCoprocessor(cpName4);
        if (cp != null) {
          found=true;
          assertEquals("Class " + cpName4 + " was not loaded by CoprocessorClassLoader",cp.getClass().getClassLoader().getClass(),CoprocessorClassLoader.class);
        }
      }
    }
    assertTrue("Class " + cpName4 + " was missing on a region",found);
  }
  @Test public void testHBase3810() throws Exception {
    File jarFile1=buildCoprocessorJar(cpName1);
    File jarFile2=buildCoprocessorJar(cpName2);
    File jarFile5=buildCoprocessorJar(cpName5);
    File jarFile6=buildCoprocessorJar(cpName6);
    String cpKey1="COPROCESSOR$1";
    String cpKey2=" Coprocessor$2 ";
    String cpKey3=" coprocessor$03 ";
    String cpValue1=getLocalPath(jarFile1) + "|" + cpName1+ "|"+ Coprocessor.PRIORITY_USER;
    String cpValue2=getLocalPath(jarFile2) + " | " + cpName2+ " | ";
    String cpValue3=" | org.apache.hadoop.hbase.coprocessor.SimpleRegionObserver | | k=v ";
    HTableDescriptor htd=new HTableDescriptor(tableName);
    htd.addFamily(new HColumnDescriptor("test"));
    htd.setValue(cpKey1,cpValue1);
    htd.setValue(cpKey2,cpValue2);
    htd.setValue(cpKey3,cpValue3);
    htd.addCoprocessor(cpName5,new Path(getLocalPath(jarFile5)),Coprocessor.PRIORITY_USER,null);
    Map<String,String> kvs=new HashMap<>();
    kvs.put("k1","v1");
    kvs.put("k2","v2");
    kvs.put("k3","v3");
    htd.addCoprocessor(cpName6,new Path(getLocalPath(jarFile6)),Coprocessor.PRIORITY_USER,kvs);
    Admin admin=TEST_UTIL.getAdmin();
    if (admin.tableExists(tableName)) {
      if (admin.isTableEnabled(tableName)) {
        admin.disableTable(tableName);
      }
      admin.deleteTable(tableName);
    }
    admin.createTable(htd);
    waitForTable(htd.getTableName());
    boolean found_2=false, found_1=false, found_3=false, found_5=false, found_6=false;
    boolean found6_k1=false, found6_k2=false, found6_k3=false, found6_k4=false;
    MiniHBaseCluster hbase=TEST_UTIL.getHBaseCluster();
    for (    HRegion region : hbase.getRegionServer(0).getOnlineRegionsLocalContext()) {
      if (region.getRegionInfo().getRegionNameAsString().startsWith(tableName.getNameAsString())) {
        found_1=found_1 || (region.getCoprocessorHost().findCoprocessor(cpName1) != null);
        found_2=found_2 || (region.getCoprocessorHost().findCoprocessor(cpName2) != null);
        found_3=found_3 || (region.getCoprocessorHost().findCoprocessor("SimpleRegionObserver") != null);
        found_5=found_5 || (region.getCoprocessorHost().findCoprocessor(cpName5) != null);
        CoprocessorEnvironment env=region.getCoprocessorHost().findCoprocessorEnvironment(cpName6);
        if (env != null) {
          found_6=true;
          Configuration conf=env.getConfiguration();
          found6_k1=conf.get("k1") != null;
          found6_k2=conf.get("k2") != null;
          found6_k3=conf.get("k3") != null;
        }
      }
    }
    assertTrue("Class " + cpName1 + " was missing on a region",found_1);
    assertTrue("Class " + cpName2 + " was missing on a region",found_2);
    assertTrue("Class SimpleRegionObserver was missing on a region",found_3);
    assertTrue("Class " + cpName5 + " was missing on a region",found_5);
    assertTrue("Class " + cpName6 + " was missing on a region",found_6);
    assertTrue("Configuration key 'k1' was missing on a region",found6_k1);
    assertTrue("Configuration key 'k2' was missing on a region",found6_k2);
    assertTrue("Configuration key 'k3' was missing on a region",found6_k3);
    assertFalse("Configuration key 'k4' wasn't configured",found6_k4);
  }
  @Test public void testClassLoadingFromLibDirInJar() throws Exception {
    loadingClassFromLibDirInJar("/lib/");
  }
  @Test public void testClassLoadingFromRelativeLibDirInJar() throws Exception {
    loadingClassFromLibDirInJar("lib/");
  }
  void loadingClassFromLibDirInJar(  String libPrefix) throws Exception {
    FileSystem fs=cluster.getFileSystem();
    File innerJarFile1=buildCoprocessorJar(cpName1);
    File innerJarFile2=buildCoprocessorJar(cpName2);
    File outerJarFile=new File(TEST_UTIL.getDataTestDir().toString(),"outer.jar");
    ClassLoaderTestHelper.addJarFilesToJar(outerJarFile,libPrefix,innerJarFile1,innerJarFile2);
    fs.copyFromLocalFile(new Path(outerJarFile.getPath()),new Path(fs.getUri().toString() + Path.SEPARATOR));
    String jarFileOnHDFS=fs.getUri().toString() + Path.SEPARATOR + outerJarFile.getName();
    assertTrue("Copy jar file to HDFS failed.",fs.exists(new Path(jarFileOnHDFS)));
    LOG.info("Copied jar file to HDFS: " + jarFileOnHDFS);
    HTableDescriptor htd=new HTableDescriptor(tableName);
    htd.addFamily(new HColumnDescriptor("test"));
    htd.setValue("COPROCESSOR$1",jarFileOnHDFS.toString() + "|" + cpName1+ "|"+ Coprocessor.PRIORITY_USER);
    htd.setValue("COPROCESSOR$2",jarFileOnHDFS.toString() + "|" + cpName2+ "|"+ Coprocessor.PRIORITY_USER+ "|k1=v1,k2=v2,k3=v3");
    Admin admin=TEST_UTIL.getAdmin();
    if (admin.tableExists(tableName)) {
      if (admin.isTableEnabled(tableName)) {
        admin.disableTable(tableName);
      }
      admin.deleteTable(tableName);
    }
    admin.createTable(htd);
    waitForTable(htd.getTableName());
    boolean found1=false, found2=false, found2_k1=false, found2_k2=false, found2_k3=false;
    MiniHBaseCluster hbase=TEST_UTIL.getHBaseCluster();
    for (    HRegion region : hbase.getRegionServer(0).getOnlineRegionsLocalContext()) {
      if (region.getRegionInfo().getRegionNameAsString().startsWith(tableName.getNameAsString())) {
        CoprocessorEnvironment env;
        env=region.getCoprocessorHost().findCoprocessorEnvironment(cpName1);
        if (env != null) {
          found1=true;
        }
        env=region.getCoprocessorHost().findCoprocessorEnvironment(cpName2);
        if (env != null) {
          found2=true;
          Configuration conf=env.getConfiguration();
          found2_k1=conf.get("k1") != null;
          found2_k2=conf.get("k2") != null;
          found2_k3=conf.get("k3") != null;
        }
      }
    }
    assertTrue("Class " + cpName1 + " was missing on a region",found1);
    assertTrue("Class " + cpName2 + " was missing on a region",found2);
    assertTrue("Configuration key 'k1' was missing on a region",found2_k1);
    assertTrue("Configuration key 'k2' was missing on a region",found2_k2);
    assertTrue("Configuration key 'k3' was missing on a region",found2_k3);
  }
  @Test public void testRegionServerCoprocessorsReported() throws Exception {
    assertAllRegionServers(null);
  }
  /** 
 * return the subset of all regionservers (actually returns set of ServerLoads) which host some region in a given table. used by assertAllRegionServers() below to test reporting of loaded coprocessors.
 * @param tableName : given table.
 * @return subset of all servers.
 */
  Map<ServerName,ServerMetrics> serversForTable(  String tableName){
    Map<ServerName,ServerMetrics> serverLoadHashMap=new HashMap<>();
    for (    Map.Entry<ServerName,ServerMetrics> server : TEST_UTIL.getMiniHBaseCluster().getMaster().getServerManager().getOnlineServers().entrySet()) {
      for (      Map.Entry<byte[],RegionMetrics> region : server.getValue().getRegionMetrics().entrySet()) {
        if (region.getValue().getNameAsString().equals(tableName)) {
          serverLoadHashMap.put(server.getKey(),server.getValue());
          break;
        }
      }
    }
    return serverLoadHashMap;
  }
  void assertAllRegionServers(  String tableName) throws InterruptedException {
    Map<ServerName,ServerMetrics> servers;
    boolean success=false;
    String[] expectedCoprocessors=regionServerSystemCoprocessors;
    if (tableName == null) {
      servers=TEST_UTIL.getMiniHBaseCluster().getMaster().getServerManager().getOnlineServers();
    }
 else {
      servers=serversForTable(tableName);
    }
    for (int i=0; i < 5; i++) {
      boolean any_failed=false;
      for (      Map.Entry<ServerName,ServerMetrics> server : servers.entrySet()) {
        String[] actualCoprocessors=server.getValue().getCoprocessorNames().stream().toArray(size -> new String[size]);
        if (!Arrays.equals(actualCoprocessors,expectedCoprocessors)) {
          LOG.debug("failed comparison: actual: " + Arrays.toString(actualCoprocessors) + " ; expected: "+ Arrays.toString(expectedCoprocessors));
          any_failed=true;
          expectedCoprocessors=switchExpectedCoprocessors(expectedCoprocessors);
          break;
        }
        expectedCoprocessors=switchExpectedCoprocessors(expectedCoprocessors);
      }
      if (any_failed == false) {
        success=true;
        break;
      }
      LOG.debug("retrying after failed comparison: " + i);
      Thread.sleep(1000);
    }
    assertTrue(success);
  }
  private String[] switchExpectedCoprocessors(  String[] expectedCoprocessors){
    if (Arrays.equals(regionServerSystemCoprocessors,expectedCoprocessors)) {
      expectedCoprocessors=masterRegionServerSystemCoprocessors;
    }
 else {
      expectedCoprocessors=regionServerSystemCoprocessors;
    }
    return expectedCoprocessors;
  }
  @Test public void testMasterCoprocessorsReported(){
    final String loadedMasterCoprocessorsVerify="[" + masterCoprocessor.getSimpleName() + "]";
    String loadedMasterCoprocessors=java.util.Arrays.toString(TEST_UTIL.getHBaseCluster().getMaster().getMasterCoprocessors());
    assertEquals(loadedMasterCoprocessorsVerify,loadedMasterCoprocessors);
  }
  private void waitForTable(  TableName name) throws InterruptedException, IOException {
    TEST_UTIL.waitTableEnabled(name);
    Thread.sleep(1000);
  }
}
