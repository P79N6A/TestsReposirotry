/** 
 * Tests that we fail fast when hostname resolution is not working and do not cache unresolved InetSocketAddresses.
 */
@Category({MediumTests.class,ClientTests.class}) public class TestCIBadHostname {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCIBadHostname.class);
  private static HBaseTestingUtility testUtil;
  private static ConnectionImplementation conn;
  @BeforeClass public static void setupBeforeClass() throws Exception {
    testUtil=HBaseTestingUtility.createLocalHTU();
    testUtil.startMiniCluster();
    conn=(ConnectionImplementation)testUtil.getConnection();
  }
  @AfterClass public static void teardownAfterClass() throws Exception {
    conn.close();
    testUtil.shutdownMiniCluster();
  }
  @Test(expected=UnknownHostException.class) public void testGetAdminBadHostname() throws Exception {
    ServerName master=testUtil.getHBaseCluster().getMaster().getServerName();
    try {
      conn.getAdmin(master);
    }
 catch (    UnknownHostException uhe) {
      fail("Obtaining admin to the cluster master should have succeeded");
    }
    ServerName badHost=ServerName.valueOf("unknownhost.invalid:" + HConstants.DEFAULT_MASTER_PORT,System.currentTimeMillis());
    conn.getAdmin(badHost);
    fail("Obtaining admin to unresolvable hostname should have failed");
  }
  @Test(expected=UnknownHostException.class) public void testGetClientBadHostname() throws Exception {
    ServerName rs=testUtil.getHBaseCluster().getRegionServer(0).getServerName();
    try {
      conn.getClient(rs);
    }
 catch (    UnknownHostException uhe) {
      fail("Obtaining client to the cluster regionserver should have succeeded");
    }
    ServerName badHost=ServerName.valueOf("unknownhost.invalid:" + HConstants.DEFAULT_REGIONSERVER_PORT,System.currentTimeMillis());
    conn.getAdmin(badHost);
    fail("Obtaining client to unresolvable hostname should have failed");
  }
}
