@Category({MasterTests.class,MediumTests.class}) public class TestGetReplicationLoad {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestGetReplicationLoad.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestGetReplicationLoad.class);
  private static MiniHBaseCluster cluster;
  private static HMaster master;
  private static HBaseTestingUtility TEST_UTIL;
public static class MyMaster extends HMaster {
    public MyMaster(    Configuration conf) throws IOException, KeeperException, InterruptedException {
      super(conf);
    }
    @Override protected void tryRegionServerReport(    long reportStartTime,    long reportEndTime){
    }
  }
  @BeforeClass public static void startCluster() throws Exception {
    LOG.info("Starting cluster");
    TEST_UTIL=new HBaseTestingUtility();
    TEST_UTIL.startMiniCluster(1,1,1,null,TestMasterMetrics.MyMaster.class,null);
    cluster=TEST_UTIL.getHBaseCluster();
    LOG.info("Waiting for active/ready master");
    cluster.waitForActiveAndReadyMaster();
    master=cluster.getMaster();
  }
  @AfterClass public static void after() throws Exception {
    if (TEST_UTIL != null) {
      TEST_UTIL.shutdownMiniCluster();
    }
  }
  @Test public void testGetReplicationMetrics() throws Exception {
    String peer1="test1", peer2="test2";
    long ageOfLastShippedOp=2, replicationLag=3, timeStampOfLastShippedOp=4;
    int sizeOfLogQueue=5;
    RegionServerStatusProtos.RegionServerReportRequest.Builder request=RegionServerStatusProtos.RegionServerReportRequest.newBuilder();
    ServerName serverName=cluster.getMaster(0).getServerName();
    request.setServer(ProtobufUtil.toServerName(serverName));
    ClusterStatusProtos.ReplicationLoadSource rload1=ClusterStatusProtos.ReplicationLoadSource.newBuilder().setPeerID(peer1).setAgeOfLastShippedOp(ageOfLastShippedOp).setReplicationLag(replicationLag).setTimeStampOfLastShippedOp(timeStampOfLastShippedOp).setSizeOfLogQueue(sizeOfLogQueue).build();
    ClusterStatusProtos.ReplicationLoadSource rload2=ClusterStatusProtos.ReplicationLoadSource.newBuilder().setPeerID(peer2).setAgeOfLastShippedOp(ageOfLastShippedOp + 1).setReplicationLag(replicationLag + 1).setTimeStampOfLastShippedOp(timeStampOfLastShippedOp + 1).setSizeOfLogQueue(sizeOfLogQueue + 1).build();
    ClusterStatusProtos.ServerLoad sl=ClusterStatusProtos.ServerLoad.newBuilder().addReplLoadSource(rload1).addReplLoadSource(rload2).build();
    request.setLoad(sl);
    master.getReplicationPeerManager().addPeer(peer1,ReplicationPeerConfig.newBuilder().setClusterKey("test").build(),true);
    master.getReplicationPeerManager().addPeer(peer2,ReplicationPeerConfig.newBuilder().setClusterKey("test").build(),true);
    master.getMasterRpcServices().regionServerReport(null,request.build());
    HashMap<String,List<Pair<ServerName,ReplicationLoadSource>>> replicationLoad=master.getReplicationLoad(new ServerName[]{serverName});
    assertEquals("peer size ",2,replicationLoad.size());
    assertEquals("load size ",1,replicationLoad.get(peer1).size());
    assertEquals("log queue size of peer1",sizeOfLogQueue,replicationLoad.get(peer1).get(0).getSecond().getSizeOfLogQueue());
    assertEquals("replication lag of peer2",replicationLag + 1,replicationLoad.get(peer2).get(0).getSecond().getReplicationLag());
    master.stopMaster();
  }
}
