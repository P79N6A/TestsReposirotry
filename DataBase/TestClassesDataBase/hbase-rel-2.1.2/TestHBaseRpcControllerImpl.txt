@Category({ClientTests.class,SmallTests.class}) public class TestHBaseRpcControllerImpl {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHBaseRpcControllerImpl.class);
  @Test public void testListOfCellScannerables() throws IOException {
    final int count=10;
    List<CellScannable> cells=new ArrayList<>(count);
    for (int i=0; i < count; i++) {
      cells.add(createCell(i));
    }
    HBaseRpcController controller=new HBaseRpcControllerImpl(cells);
    CellScanner cellScanner=controller.cellScanner();
    int index=0;
    for (; cellScanner.advance(); index++) {
      Cell cell=cellScanner.current();
      byte[] indexBytes=Bytes.toBytes(index);
      assertTrue("" + index,Bytes.equals(indexBytes,0,indexBytes.length,cell.getValueArray(),cell.getValueOffset(),cell.getValueLength()));
    }
    assertEquals(count,index);
  }
  /** 
 * @param index
 * @return A faked out 'Cell' that does nothing but return index as its value
 */
  static CellScannable createCell(  final int index){
    return new CellScannable(){
      @Override public CellScanner cellScanner(){
        return new CellScanner(){
          @Override public Cell current(){
            return new Cell(){
              private final int i=index;
              @Override public byte[] getRowArray(){
                return null;
              }
              @Override public int getRowOffset(){
                return 0;
              }
              @Override public short getRowLength(){
                return 0;
              }
              @Override public byte[] getFamilyArray(){
                return null;
              }
              @Override public int getFamilyOffset(){
                return 0;
              }
              @Override public byte getFamilyLength(){
                return 0;
              }
              @Override public byte[] getQualifierArray(){
                return null;
              }
              @Override public int getQualifierOffset(){
                return 0;
              }
              @Override public int getQualifierLength(){
                return 0;
              }
              @Override public long getTimestamp(){
                return 0;
              }
              @Override public byte getTypeByte(){
                return 0;
              }
              @Override public long getSequenceId(){
                return 0;
              }
              @Override public byte[] getValueArray(){
                return Bytes.toBytes(this.i);
              }
              @Override public int getValueOffset(){
                return 0;
              }
              @Override public int getValueLength(){
                return Bytes.SIZEOF_INT;
              }
              @Override public int getTagsOffset(){
                return 0;
              }
              @Override public int getTagsLength(){
                return 0;
              }
              @Override public byte[] getTagsArray(){
                return null;
              }
              @Override public Type getType(){
                return null;
              }
            }
;
          }
          private boolean hasCell=true;
          @Override public boolean advance(){
            if (!hasCell)             return hasCell;
            hasCell=false;
            return true;
          }
        }
;
      }
    }
;
  }
}
