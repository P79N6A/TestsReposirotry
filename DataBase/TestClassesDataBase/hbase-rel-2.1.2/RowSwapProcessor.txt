public static class RowSwapProcessor extends BaseRowProcessor<RowSwapProcessorRequest,RowSwapProcessorResponse> {
  byte[] row1=new byte[0];
  byte[] row2=new byte[0];
  /** 
 * Empty constructor for Writable
 */
  RowSwapProcessor(){
  }
  RowSwapProcessor(  byte[] row1,  byte[] row2){
    this.row1=row1;
    this.row2=row2;
  }
  @Override public Collection<byte[]> getRowsToLock(){
    List<byte[]> rows=new ArrayList<>(2);
    rows.add(row1);
    rows.add(row2);
    return rows;
  }
  @Override public boolean readOnly(){
    return false;
  }
  @Override public RowSwapProcessorResponse getResult(){
    return RowSwapProcessorResponse.getDefaultInstance();
  }
  @Override public void process(  long now,  HRegion region,  List<Mutation> mutations,  WALEdit walEdit) throws IOException {
    now=myTimer.getAndIncrement();
    List<Cell> kvs1=new ArrayList<>();
    List<Cell> kvs2=new ArrayList<>();
    doScan(region,new Scan(row1,row1),kvs1);
    doScan(region,new Scan(row2,row2),kvs2);
    if (swapped) {
      assertEquals(rowSize,kvs2.size());
      assertEquals(row2Size,kvs1.size());
    }
 else {
      assertEquals(rowSize,kvs1.size());
      assertEquals(row2Size,kvs2.size());
    }
    swapped=!swapped;
    List<List<Cell>> kvs=new ArrayList<>(2);
    kvs.add(kvs1);
    kvs.add(kvs2);
    byte[][] rows=new byte[][]{row1,row2};
    for (int i=0; i < kvs.size(); ++i) {
      for (      Cell kv : kvs.get(i)) {
        Delete d=new Delete(rows[i]);
        KeyValue kvDelete=new KeyValue(rows[i],CellUtil.cloneFamily(kv),CellUtil.cloneQualifier(kv),kv.getTimestamp(),KeyValue.Type.Delete);
        d.add(kvDelete);
        Put p=new Put(rows[1 - i]);
        KeyValue kvAdd=new KeyValue(rows[1 - i],CellUtil.cloneFamily(kv),CellUtil.cloneQualifier(kv),now,CellUtil.cloneValue(kv));
        p.add(kvAdd);
        mutations.add(d);
        walEdit.add(kvDelete);
        mutations.add(p);
        walEdit.add(kvAdd);
      }
    }
  }
  @Override public String getName(){
    return "swap";
  }
  @Override public RowSwapProcessorRequest getRequestData() throws IOException {
    RowSwapProcessorRequest.Builder builder=RowSwapProcessorRequest.newBuilder();
    builder.setRow1(ByteStringer.wrap(row1));
    builder.setRow2(ByteStringer.wrap(row2));
    return builder.build();
  }
  @Override public void initialize(  RowSwapProcessorRequest msg){
    this.row1=msg.getRow1().toByteArray();
    this.row2=msg.getRow2().toByteArray();
  }
}
