@Category({MediumTests.class,ClientTests.class}) public class TestReplicationAdminWithTwoDifferentZKClusters {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestReplicationAdminWithTwoDifferentZKClusters.class);
  private static Configuration conf1=HBaseConfiguration.create();
  private static Configuration conf2;
  private static HBaseTestingUtility utility1;
  private static HBaseTestingUtility utility2;
  private static ReplicationAdmin admin;
  private static final TableName tableName=TableName.valueOf("test");
  private static final byte[] famName=Bytes.toBytes("f");
  private static final String peerId="peer1";
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    utility1=new HBaseTestingUtility(conf1);
    utility1.startMiniCluster();
    admin=new ReplicationAdmin(conf1);
    conf2=HBaseConfiguration.create(conf1);
    conf2.set(HConstants.ZOOKEEPER_ZNODE_PARENT,"/2");
    conf2.setInt(HConstants.ZOOKEEPER_CLIENT_PORT,2182);
    utility2=new HBaseTestingUtility(conf2);
    utility2.startMiniCluster();
    ReplicationPeerConfig config=new ReplicationPeerConfig();
    config.setClusterKey(utility2.getClusterKey());
    admin.addPeer(peerId,config,null);
    HTableDescriptor table=new HTableDescriptor(tableName);
    HColumnDescriptor fam=new HColumnDescriptor(famName);
    fam.setScope(HConstants.REPLICATION_SCOPE_GLOBAL);
    table.addFamily(fam);
    utility1.getAdmin().createTable(table,HBaseTestingUtility.KEYS_FOR_HBA_CREATE_TABLE);
    utility1.waitUntilAllRegionsAssigned(tableName);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    admin.removePeer(peerId);
    admin.close();
    utility1.deleteTable(tableName);
    utility2.deleteTable(tableName);
    utility2.shutdownMiniCluster();
    utility1.shutdownMiniCluster();
  }
  @Test public void testEnableTableReplication() throws Exception {
    admin.enableTableRep(tableName);
    assertTrue(utility2.getAdmin().tableExists(tableName));
  }
  @Test public void testDisableTableReplication() throws Exception {
    admin.disableTableRep(tableName);
    assertTrue(utility2.getAdmin().tableExists(tableName));
  }
}
