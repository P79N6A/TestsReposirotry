@Category(MediumTests.class) public class TestCleanupMetaWAL {
  private static final Logger LOG=LoggerFactory.getLogger(TestCleanupMetaWAL.class);
  private final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCleanupMetaWAL.class);
  @BeforeClass public static void before() throws Exception {
    TEST_UTIL.startMiniCluster(2);
  }
  @AfterClass public static void after() throws Exception {
    TEST_UTIL.shutdownMiniZKCluster();
  }
  @Test public void testCleanupMetaWAL() throws Exception {
    TEST_UTIL.createTable(TableName.valueOf("test"),"cf");
    HRegionServer serverWithMeta=TEST_UTIL.getMiniHBaseCluster().getRegionServer(TEST_UTIL.getMiniHBaseCluster().getServerWithMeta());
    TEST_UTIL.getAdmin().move(RegionInfoBuilder.FIRST_META_REGIONINFO.getEncodedNameAsBytes(),null);
    LOG.info("KILL");
    TEST_UTIL.getMiniHBaseCluster().killRegionServer(serverWithMeta.getServerName());
    LOG.info("WAIT");
    TEST_UTIL.waitFor(30000,() -> TEST_UTIL.getMiniHBaseCluster().getMaster().getProcedures().stream().filter(p -> p instanceof ServerCrashProcedure && p.isFinished()).count() > 0);
    LOG.info("DONE WAITING");
    MasterFileSystem fs=TEST_UTIL.getMiniHBaseCluster().getMaster().getMasterFileSystem();
    Path walPath=new Path(fs.getWALRootDir(),HConstants.HREGION_LOGDIR_NAME);
    for (    FileStatus status : FSUtils.listStatus(fs.getFileSystem(),walPath)) {
      if (status.getPath().toString().contains(SPLITTING_EXT)) {
        fail("Should not have splitting wal dir here:" + status);
      }
    }
  }
}
