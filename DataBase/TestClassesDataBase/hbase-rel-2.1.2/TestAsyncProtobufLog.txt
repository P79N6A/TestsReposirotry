@Category({RegionServerTests.class,MediumTests.class}) public class TestAsyncProtobufLog extends AbstractTestProtobufLog<WALProvider.AsyncWriter> {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAsyncProtobufLog.class);
  private static EventLoopGroup EVENT_LOOP_GROUP;
  private static Class<? extends Channel> CHANNEL_CLASS;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    EVENT_LOOP_GROUP=new NioEventLoopGroup();
    CHANNEL_CLASS=NioSocketChannel.class;
    AbstractTestProtobufLog.setUpBeforeClass();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    AbstractTestProtobufLog.tearDownAfterClass();
    EVENT_LOOP_GROUP.shutdownGracefully().syncUninterruptibly();
  }
  @Override protected AsyncWriter createWriter(  Path path) throws IOException {
    return AsyncFSWALProvider.createAsyncWriter(TEST_UTIL.getConfiguration(),fs,path,false,EVENT_LOOP_GROUP.next(),CHANNEL_CLASS);
  }
  @Override protected void append(  AsyncWriter writer,  Entry entry) throws IOException {
    writer.append(entry);
  }
  @Override protected void sync(  AsyncWriter writer) throws IOException {
    try {
      writer.sync().get();
    }
 catch (    InterruptedException e) {
      throw new InterruptedIOException();
    }
catch (    ExecutionException e) {
      Throwables.propagateIfPossible(e.getCause());
      throw new IOException(e.getCause());
    }
  }
}
