@Category({RestTests.class,SmallTests.class}) public class TestGZIPResponseWrapper {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestGZIPResponseWrapper.class);
  private final HttpServletResponse response=mock(HttpServletResponse.class);
  private final GZIPResponseWrapper wrapper=new GZIPResponseWrapper(response);
  /** 
 * wrapper should set all headers except "content-length"
 */
  @Test public void testHeader() throws IOException {
    wrapper.setStatus(200);
    verify(response).setStatus(200);
    wrapper.addHeader("header","header value");
    verify(response).addHeader("header","header value");
    wrapper.addHeader("content-length","header value2");
    verify(response,never()).addHeader("content-length","header value");
    wrapper.setIntHeader("header",5);
    verify(response).setIntHeader("header",5);
    wrapper.setIntHeader("content-length",4);
    verify(response,never()).setIntHeader("content-length",4);
    wrapper.setHeader("set-header","new value");
    verify(response).setHeader("set-header","new value");
    wrapper.setHeader("content-length","content length value");
    verify(response,never()).setHeader("content-length","content length value");
    wrapper.sendRedirect("location");
    verify(response).sendRedirect("location");
    wrapper.flushBuffer();
    verify(response).flushBuffer();
  }
  @Test public void testResetBuffer() throws IOException {
    when(response.isCommitted()).thenReturn(false);
    ServletOutputStream out=mock(ServletOutputStream.class);
    when(response.getOutputStream()).thenReturn(out);
    ServletOutputStream servletOutput=wrapper.getOutputStream();
    assertEquals(GZIPResponseStream.class,servletOutput.getClass());
    wrapper.resetBuffer();
    verify(response).setHeader("Content-Encoding",null);
    when(response.isCommitted()).thenReturn(true);
    servletOutput=wrapper.getOutputStream();
    assertEquals(out.getClass(),servletOutput.getClass());
    assertNotNull(wrapper.getWriter());
  }
  @Test public void testReset() throws IOException {
    when(response.isCommitted()).thenReturn(false);
    ServletOutputStream out=mock(ServletOutputStream.class);
    when(response.getOutputStream()).thenReturn(out);
    ServletOutputStream servletOutput=wrapper.getOutputStream();
    verify(response).addHeader("Content-Encoding","gzip");
    assertEquals(GZIPResponseStream.class,servletOutput.getClass());
    wrapper.reset();
    verify(response).setHeader("Content-Encoding",null);
    when(response.isCommitted()).thenReturn(true);
    servletOutput=wrapper.getOutputStream();
    assertEquals(out.getClass(),servletOutput.getClass());
  }
  @Test public void testSendError() throws IOException {
    wrapper.sendError(404);
    verify(response).sendError(404);
    wrapper.sendError(404,"error message");
    verify(response).sendError(404,"error message");
  }
}
