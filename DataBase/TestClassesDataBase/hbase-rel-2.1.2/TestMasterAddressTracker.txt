@Category({RegionServerTests.class,MediumTests.class}) public class TestMasterAddressTracker {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMasterAddressTracker.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestMasterAddressTracker.class);
  private final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  @Rule public TestName name=new TestName();
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.startMiniZKCluster();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniZKCluster();
  }
  @Test public void testDeleteIfEquals() throws Exception {
    final ServerName sn=ServerName.valueOf("localhost",1234,System.currentTimeMillis());
    final MasterAddressTracker addressTracker=setupMasterTracker(sn,1772);
    try {
      assertFalse("shouldn't have deleted wrong master server.",MasterAddressTracker.deleteIfEquals(addressTracker.getWatcher(),"some other string."));
    }
  finally {
      assertTrue("Couldn't clean up master",MasterAddressTracker.deleteIfEquals(addressTracker.getWatcher(),sn.toString()));
    }
  }
  /** 
 * create an address tracker instance
 * @param sn if not-null set the active master
 * @param infoPort if there is an active master, set its info port.
 */
  private MasterAddressTracker setupMasterTracker(  final ServerName sn,  final int infoPort) throws Exception {
    ZKWatcher zk=new ZKWatcher(TEST_UTIL.getConfiguration(),name.getMethodName(),null);
    ZKUtil.createAndFailSilent(zk,zk.getZNodePaths().baseZNode);
    MasterAddressTracker addressTracker=new MasterAddressTracker(zk,null);
    addressTracker.start();
    assertFalse(addressTracker.hasMaster());
    zk.registerListener(addressTracker);
    NodeCreationListener listener=new NodeCreationListener(zk,zk.getZNodePaths().masterAddressZNode);
    zk.registerListener(listener);
    if (sn != null) {
      LOG.info("Creating master node");
      MasterAddressTracker.setMasterAddress(zk,zk.getZNodePaths().masterAddressZNode,sn,infoPort);
      LOG.info("Waiting for master address manager to be notified");
      listener.waitForCreation();
      LOG.info("Master node created");
    }
    return addressTracker;
  }
  /** 
 * Unit tests that uses ZooKeeper but does not use the master-side methods but rather acts directly on ZK.
 * @throws Exception
 */
  @Test public void testMasterAddressTrackerFromZK() throws Exception {
    final int infoPort=1235;
    final ServerName sn=ServerName.valueOf("localhost",1234,System.currentTimeMillis());
    final MasterAddressTracker addressTracker=setupMasterTracker(sn,infoPort);
    try {
      assertTrue(addressTracker.hasMaster());
      ServerName pulledAddress=addressTracker.getMasterAddress();
      assertTrue(pulledAddress.equals(sn));
      assertEquals(infoPort,addressTracker.getMasterInfoPort());
    }
  finally {
      assertTrue("Couldn't clean up master",MasterAddressTracker.deleteIfEquals(addressTracker.getWatcher(),sn.toString()));
    }
  }
  @Test public void testParsingNull() throws Exception {
    assertNull("parse on null data should return null.",MasterAddressTracker.parse(null));
  }
  @Test public void testNoBackups() throws Exception {
    final ServerName sn=ServerName.valueOf("localhost",1234,System.currentTimeMillis());
    final MasterAddressTracker addressTracker=setupMasterTracker(sn,1772);
    try {
      assertEquals("Should receive 0 for backup not found.",0,addressTracker.getBackupMasterInfoPort(ServerName.valueOf("doesnotexist.example.com",1234,System.currentTimeMillis())));
    }
  finally {
      assertTrue("Couldn't clean up master",MasterAddressTracker.deleteIfEquals(addressTracker.getWatcher(),sn.toString()));
    }
  }
  @Test public void testNoMaster() throws Exception {
    final MasterAddressTracker addressTracker=setupMasterTracker(null,1772);
    assertFalse(addressTracker.hasMaster());
    assertNull("should get null master when none active.",addressTracker.getMasterAddress());
    assertEquals("Should receive 0 for backup not found.",0,addressTracker.getMasterInfoPort());
  }
public static class NodeCreationListener extends ZKListener {
    private static final Logger LOG=LoggerFactory.getLogger(NodeCreationListener.class);
    private Semaphore lock;
    private String node;
    public NodeCreationListener(    ZKWatcher watcher,    String node){
      super(watcher);
      lock=new Semaphore(0);
      this.node=node;
    }
    @Override public void nodeCreated(    String path){
      if (path.equals(node)) {
        LOG.debug("nodeCreated(" + path + ")");
        lock.release();
      }
    }
    public void waitForCreation() throws InterruptedException {
      lock.acquire();
    }
  }
}
