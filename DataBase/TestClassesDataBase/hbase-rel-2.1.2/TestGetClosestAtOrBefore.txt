/** 
 * TestGet is a medley of tests of get all done up as a single test. This class
 */
@Category({RegionServerTests.class,MediumTests.class}) public class TestGetClosestAtOrBefore {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestGetClosestAtOrBefore.class);
  @Rule public TestName testName=new TestName();
  private static final Logger LOG=LoggerFactory.getLogger(TestGetClosestAtOrBefore.class);
  private static final byte[] T00=Bytes.toBytes("000");
  private static final byte[] T10=Bytes.toBytes("010");
  private static final byte[] T11=Bytes.toBytes("011");
  private static final byte[] T12=Bytes.toBytes("012");
  private static final byte[] T20=Bytes.toBytes("020");
  private static final byte[] T30=Bytes.toBytes("030");
  private static final byte[] T31=Bytes.toBytes("031");
  private static final byte[] T35=Bytes.toBytes("035");
  private static final byte[] T40=Bytes.toBytes("040");
  private static HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static Configuration conf=UTIL.getConfiguration();
  @Test public void testUsingMetaAndBinary() throws IOException {
    FileSystem filesystem=FileSystem.get(conf);
    Path rootdir=UTIL.getDataTestDirOnTestFS();
    TableDescriptorBuilder metaBuilder=UTIL.getMetaTableDescriptorBuilder().setMemStoreFlushSize(64 * 1024 * 1024);
    HRegion mr=HBaseTestingUtility.createRegionAndWAL(HRegionInfo.FIRST_META_REGIONINFO,rootdir,this.conf,metaBuilder.build());
    try {
      for (char c='A'; c < 'D'; c++) {
        HTableDescriptor htd=new HTableDescriptor(TableName.valueOf("" + c));
        final int last=128;
        final int interval=2;
        for (int i=0; i <= last; i+=interval) {
          HRegionInfo hri=new HRegionInfo(htd.getTableName(),i == 0 ? HConstants.EMPTY_BYTE_ARRAY : Bytes.toBytes((byte)i),i == last ? HConstants.EMPTY_BYTE_ARRAY : Bytes.toBytes((byte)i + interval));
          Put put=MetaTableAccessor.makePutFromRegionInfo(hri,EnvironmentEdgeManager.currentTime());
          put.setDurability(Durability.SKIP_WAL);
          mr.put(put);
        }
      }
      InternalScanner s=mr.getScanner(new Scan());
      try {
        List<Cell> keys=new ArrayList<>();
        while (s.next(keys)) {
          LOG.info(Objects.toString(keys));
          keys.clear();
        }
      }
  finally {
        s.close();
      }
      findRow(mr,'C',44,44);
      findRow(mr,'C',45,44);
      findRow(mr,'C',46,46);
      findRow(mr,'C',43,42);
      mr.flush(true);
      findRow(mr,'C',44,44);
      findRow(mr,'C',45,44);
      findRow(mr,'C',46,46);
      findRow(mr,'C',43,42);
      byte[] firstRowInC=HRegionInfo.createRegionName(TableName.valueOf("" + 'C'),HConstants.EMPTY_BYTE_ARRAY,HConstants.ZEROES,false);
      Scan scan=new Scan(firstRowInC);
      s=mr.getScanner(scan);
      try {
        List<Cell> keys=new ArrayList<>();
        while (s.next(keys)) {
          mr.delete(new Delete(CellUtil.cloneRow(keys.get(0))));
          keys.clear();
        }
      }
  finally {
        s.close();
      }
      findRow(mr,'C',44,-1);
      findRow(mr,'C',45,-1);
      findRow(mr,'C',46,-1);
      findRow(mr,'C',43,-1);
      mr.flush(true);
      findRow(mr,'C',44,-1);
      findRow(mr,'C',45,-1);
      findRow(mr,'C',46,-1);
      findRow(mr,'C',43,-1);
    }
  finally {
      HBaseTestingUtility.closeRegionAndWAL(mr);
    }
  }
  private byte[] findRow(  final Region mr,  final char table,  final int rowToFind,  final int answer) throws IOException {
    TableName tableb=TableName.valueOf("" + table);
    byte[] tofindBytes=Bytes.toBytes((short)rowToFind);
    byte[] metaKey=HRegionInfo.createRegionName(tableb,tofindBytes,HConstants.NINES,false);
    LOG.info("find=" + new String(metaKey,StandardCharsets.UTF_8));
    Result r=UTIL.getClosestRowBefore(mr,metaKey,HConstants.CATALOG_FAMILY);
    if (answer == -1) {
      assertNull(r);
      return null;
    }
    assertTrue(Bytes.compareTo(Bytes.toBytes((short)answer),extractRowFromMetaRow(r.getRow())) == 0);
    return r.getRow();
  }
  private byte[] extractRowFromMetaRow(  final byte[] b){
    int firstDelimiter=Bytes.searchDelimiterIndex(b,0,b.length,HConstants.DELIMITER);
    int lastDelimiter=Bytes.searchDelimiterIndexInReverse(b,0,b.length,HConstants.DELIMITER);
    int length=lastDelimiter - firstDelimiter - 1;
    byte[] row=new byte[length];
    System.arraycopy(b,firstDelimiter + 1,row,0,length);
    return row;
  }
  /** 
 * Test file of multiple deletes and with deletes as final key.
 * @see <a href="https://issues.apache.org/jira/browse/HBASE-751">HBASE-751</a>
 */
  @Test public void testGetClosestRowBefore3() throws IOException {
    HRegion region=null;
    byte[] c0=UTIL.COLUMNS[0];
    byte[] c1=UTIL.COLUMNS[1];
    try {
      TableName tn=TableName.valueOf(testName.getMethodName());
      HTableDescriptor htd=UTIL.createTableDescriptor(tn);
      region=UTIL.createLocalHRegion(htd,null,null);
      Put p=new Put(T00);
      p.addColumn(c0,c0,T00);
      region.put(p);
      p=new Put(T10);
      p.addColumn(c0,c0,T10);
      region.put(p);
      p=new Put(T20);
      p.addColumn(c0,c0,T20);
      region.put(p);
      Result r=UTIL.getClosestRowBefore(region,T20,c0);
      assertTrue(Bytes.equals(T20,r.getRow()));
      Delete d=new Delete(T20);
      d.addColumn(c0,c0);
      region.delete(d);
      r=UTIL.getClosestRowBefore(region,T20,c0);
      assertTrue(Bytes.equals(T10,r.getRow()));
      p=new Put(T30);
      p.addColumn(c0,c0,T30);
      region.put(p);
      r=UTIL.getClosestRowBefore(region,T30,c0);
      assertTrue(Bytes.equals(T30,r.getRow()));
      d=new Delete(T30);
      d.addColumn(c0,c0);
      region.delete(d);
      r=UTIL.getClosestRowBefore(region,T30,c0);
      assertTrue(Bytes.equals(T10,r.getRow()));
      r=UTIL.getClosestRowBefore(region,T31,c0);
      assertTrue(Bytes.equals(T10,r.getRow()));
      region.flush(true);
      r=UTIL.getClosestRowBefore(region,T30,c0);
      assertTrue(Bytes.equals(T10,r.getRow()));
      r=UTIL.getClosestRowBefore(region,T31,c0);
      assertTrue(Bytes.equals(T10,r.getRow()));
      p=new Put(T20);
      p.addColumn(c1,c1,T20);
      region.put(p);
      r=UTIL.getClosestRowBefore(region,T30,c0);
      assertTrue(Bytes.equals(T10,r.getRow()));
      r=UTIL.getClosestRowBefore(region,T31,c0);
      assertTrue(Bytes.equals(T10,r.getRow()));
      region.flush(true);
      r=UTIL.getClosestRowBefore(region,T30,c0);
      assertTrue(Bytes.equals(T10,r.getRow()));
      r=UTIL.getClosestRowBefore(region,T31,c0);
      assertTrue(Bytes.equals(T10,r.getRow()));
      d=new Delete(T20);
      d.addColumn(c1,c1);
      region.delete(d);
      r=UTIL.getClosestRowBefore(region,T30,c0);
      assertTrue(Bytes.equals(T10,r.getRow()));
      r=UTIL.getClosestRowBefore(region,T31,c0);
      assertTrue(Bytes.equals(T10,r.getRow()));
      region.flush(true);
      r=UTIL.getClosestRowBefore(region,T31,c0);
      assertTrue(Bytes.equals(T10,r.getRow()));
      p=new Put(T11);
      p.addColumn(c0,c0,T11);
      region.put(p);
      d=new Delete(T10);
      d.addColumn(c1,c1);
      r=UTIL.getClosestRowBefore(region,T12,c0);
      assertTrue(Bytes.equals(T11,r.getRow()));
    }
  finally {
      if (region != null) {
        try {
          WAL wal=region.getWAL();
          region.close();
          wal.close();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
  /** 
 * For HBASE-694 
 */
  @Test public void testGetClosestRowBefore2() throws IOException {
    HRegion region=null;
    byte[] c0=UTIL.COLUMNS[0];
    try {
      TableName tn=TableName.valueOf(testName.getMethodName());
      HTableDescriptor htd=UTIL.createTableDescriptor(tn);
      region=UTIL.createLocalHRegion(htd,null,null);
      Put p=new Put(T10);
      p.addColumn(c0,c0,T10);
      region.put(p);
      p=new Put(T30);
      p.addColumn(c0,c0,T30);
      region.put(p);
      p=new Put(T40);
      p.addColumn(c0,c0,T40);
      region.put(p);
      Result r=UTIL.getClosestRowBefore(region,T35,c0);
      assertTrue(Bytes.equals(T30,r.getRow()));
      region.flush(true);
      r=UTIL.getClosestRowBefore(region,T35,c0);
      assertTrue(Bytes.equals(T30,r.getRow()));
      p=new Put(T20);
      p.addColumn(c0,c0,T20);
      region.put(p);
      r=UTIL.getClosestRowBefore(region,T35,c0);
      assertTrue(Bytes.equals(T30,r.getRow()));
      region.flush(true);
      r=UTIL.getClosestRowBefore(region,T35,c0);
      assertTrue(Bytes.equals(T30,r.getRow()));
    }
  finally {
      if (region != null) {
        try {
          WAL wal=region.getWAL();
          region.close();
          wal.close();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
  }
}
