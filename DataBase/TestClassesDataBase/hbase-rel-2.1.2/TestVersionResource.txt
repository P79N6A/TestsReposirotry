@Category({RestTests.class,MediumTests.class}) public class TestVersionResource {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestVersionResource.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestVersionResource.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final HBaseRESTTestingUtility REST_TEST_UTIL=new HBaseRESTTestingUtility();
  private static Client client;
  private static JAXBContext context;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.startMiniCluster();
    REST_TEST_UTIL.startServletContainer(TEST_UTIL.getConfiguration());
    client=new Client(new Cluster().add("localhost",REST_TEST_UTIL.getServletPort()));
    context=JAXBContext.newInstance(VersionModel.class,StorageClusterVersionModel.class);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    REST_TEST_UTIL.shutdownServletContainer();
    TEST_UTIL.shutdownMiniCluster();
  }
  private static void validate(  VersionModel model){
    assertNotNull(model);
    assertNotNull(model.getRESTVersion());
    assertEquals(RESTServlet.VERSION_STRING,model.getRESTVersion());
    String osVersion=model.getOSVersion();
    assertNotNull(osVersion);
    assertTrue(osVersion.contains(System.getProperty("os.name")));
    assertTrue(osVersion.contains(System.getProperty("os.version")));
    assertTrue(osVersion.contains(System.getProperty("os.arch")));
    String jvmVersion=model.getJVMVersion();
    assertNotNull(jvmVersion);
    assertTrue(jvmVersion.contains(System.getProperty("java.vm.vendor")));
    assertTrue(jvmVersion.contains(System.getProperty("java.version")));
    assertTrue(jvmVersion.contains(System.getProperty("java.vm.version")));
    assertNotNull(model.getServerVersion());
    String jerseyVersion=model.getJerseyVersion();
    assertNotNull(jerseyVersion);
  }
  @Test public void testGetStargateVersionText() throws IOException {
    Response response=client.get("/version",Constants.MIMETYPE_TEXT);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_TEXT,response.getHeader("content-type"));
    String body=Bytes.toString(response.getBody());
    assertTrue(body.length() > 0);
    assertTrue(body.contains(RESTServlet.VERSION_STRING));
    assertTrue(body.contains(System.getProperty("java.vm.vendor")));
    assertTrue(body.contains(System.getProperty("java.version")));
    assertTrue(body.contains(System.getProperty("java.vm.version")));
    assertTrue(body.contains(System.getProperty("os.name")));
    assertTrue(body.contains(System.getProperty("os.version")));
    assertTrue(body.contains(System.getProperty("os.arch")));
  }
  @Test public void testGetStargateVersionXML() throws IOException, JAXBException {
    Response response=client.get("/version",Constants.MIMETYPE_XML);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_XML,response.getHeader("content-type"));
    VersionModel model=(VersionModel)context.createUnmarshaller().unmarshal(new ByteArrayInputStream(response.getBody()));
    validate(model);
    LOG.info("success retrieving Stargate version as XML");
  }
  @Test public void testGetStargateVersionJSON() throws IOException {
    Response response=client.get("/version",Constants.MIMETYPE_JSON);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_JSON,response.getHeader("content-type"));
    ObjectMapper mapper=new JacksonJaxbJsonProvider().locateMapper(VersionModel.class,MediaType.APPLICATION_JSON_TYPE);
    VersionModel model=mapper.readValue(response.getBody(),VersionModel.class);
    validate(model);
    LOG.info("success retrieving Stargate version as JSON");
  }
  @Test public void testGetStargateVersionPB() throws IOException {
    Response response=client.get("/version",Constants.MIMETYPE_PROTOBUF);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_PROTOBUF,response.getHeader("content-type"));
    VersionModel model=new VersionModel();
    model.getObjectFromMessage(response.getBody());
    validate(model);
    response=client.get("/version",Constants.MIMETYPE_PROTOBUF_IETF);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_PROTOBUF_IETF,response.getHeader("content-type"));
    model=new VersionModel();
    model.getObjectFromMessage(response.getBody());
    validate(model);
  }
  @Test public void testGetStorageClusterVersionText() throws IOException {
    Response response=client.get("/version/cluster",Constants.MIMETYPE_TEXT);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_TEXT,response.getHeader("content-type"));
  }
  @Test public void testGetStorageClusterVersionXML() throws IOException, JAXBException {
    Response response=client.get("/version/cluster",Constants.MIMETYPE_XML);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_XML,response.getHeader("content-type"));
    StorageClusterVersionModel clusterVersionModel=(StorageClusterVersionModel)context.createUnmarshaller().unmarshal(new ByteArrayInputStream(response.getBody()));
    assertNotNull(clusterVersionModel);
    assertNotNull(clusterVersionModel.getVersion());
    LOG.info("success retrieving storage cluster version as XML");
  }
  @Test public void testGetStorageClusterVersionJSON() throws IOException {
    Response response=client.get("/version/cluster",Constants.MIMETYPE_JSON);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_JSON,response.getHeader("content-type"));
    ObjectMapper mapper=new JacksonJaxbJsonProvider().locateMapper(StorageClusterVersionModel.class,MediaType.APPLICATION_JSON_TYPE);
    StorageClusterVersionModel clusterVersionModel=mapper.readValue(response.getBody(),StorageClusterVersionModel.class);
    assertNotNull(clusterVersionModel);
    assertNotNull(clusterVersionModel.getVersion());
    LOG.info("success retrieving storage cluster version as JSON");
  }
}
