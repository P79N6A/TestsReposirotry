@Category({MiscTests.class,SmallTests.class}) public class TestMetricsWAL {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMetricsWAL.class);
  @Test public void testLogRollRequested() throws Exception {
    MetricsWALSource source=mock(MetricsWALSourceImpl.class);
    MetricsWAL metricsWAL=new MetricsWAL(source);
    metricsWAL.logRollRequested(false);
    metricsWAL.logRollRequested(true);
    verify(source,times(2)).incrementLogRollRequested();
    verify(source,times(1)).incrementLowReplicationLogRoll();
  }
  @Test public void testPostSync() throws Exception {
    long nanos=TimeUnit.MILLISECONDS.toNanos(145);
    MetricsWALSource source=mock(MetricsWALSourceImpl.class);
    MetricsWAL metricsWAL=new MetricsWAL(source);
    metricsWAL.postSync(nanos,1);
    verify(source,times(1)).incrementSyncTime(145);
  }
  @Test public void testSlowAppend() throws Exception {
    MetricsWALSource source=new MetricsWALSourceImpl();
    MetricsWAL metricsWAL=new MetricsWAL(source);
    metricsWAL.postAppend(1,900,null,null);
    metricsWAL.postAppend(1,1010,null,null);
    metricsWAL.postAppend(1,2000,null,null);
    assertEquals(2,source.getSlowAppendCount());
  }
  @Test public void testWalWrittenInBytes() throws Exception {
    MetricsWALSource source=mock(MetricsWALSourceImpl.class);
    MetricsWAL metricsWAL=new MetricsWAL(source);
    metricsWAL.postAppend(100,900,null,null);
    metricsWAL.postAppend(200,2000,null,null);
    verify(source,times(1)).incrementWrittenBytes(100);
    verify(source,times(1)).incrementWrittenBytes(200);
  }
}
