static class MyAsyncRequestFutureImpl<Res> extends AsyncRequestFutureImpl<Res> {
  private final Map<ServerName,List<Long>> heapSizesByServer=new HashMap<>();
  public MyAsyncRequestFutureImpl(  AsyncProcessTask task,  List<Action> actions,  long nonceGroup,  AsyncProcess asyncProcess){
    super(task,actions,nonceGroup,asyncProcess);
  }
  @Override protected void updateStats(  ServerName server,  Map<byte[],MultiResponse.RegionResult> results){
  }
  Map<ServerName,List<Long>> getRequestHeapSize(){
    return heapSizesByServer;
  }
  @Override SingleServerRequestRunnable createSingleServerRequest(  MultiAction multiAction,  int numAttempt,  ServerName server,  Set<CancellableRegionServerCallable> callsInProgress){
    SingleServerRequestRunnable rq=new SingleServerRequestRunnable(multiAction,numAttempt,server,callsInProgress);
    List<Long> heapCount=heapSizesByServer.get(server);
    if (heapCount == null) {
      heapCount=new ArrayList<>();
      heapSizesByServer.put(server,heapCount);
    }
    heapCount.add(heapSizeOf(multiAction));
    return rq;
  }
  private long heapSizeOf(  MultiAction multiAction){
    return multiAction.actions.values().stream().flatMap(v -> v.stream()).map(action -> action.getAction()).filter(row -> row instanceof Mutation).mapToLong(row -> ((Mutation)row).heapSize()).sum();
  }
}
