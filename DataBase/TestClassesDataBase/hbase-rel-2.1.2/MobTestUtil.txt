public class MobTestUtil {
  protected static final char FIRST_CHAR='a';
  protected static final char LAST_CHAR='z';
  protected static String generateRandomString(  int demoLength){
    String base="abcdefghijklmnopqrstuvwxyz";
    Random random=new Random();
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < demoLength; i++) {
      int number=random.nextInt(base.length());
      sb.append(base.charAt(number));
    }
    return sb.toString();
  }
  protected static void writeStoreFile(  final StoreFileWriter writer,  String caseName) throws IOException {
    writeStoreFile(writer,Bytes.toBytes(caseName),Bytes.toBytes(caseName));
  }
  private static void writeStoreFile(  final StoreFileWriter writer,  byte[] fam,  byte[] qualifier) throws IOException {
    long now=System.currentTimeMillis();
    try {
      for (char d=FIRST_CHAR; d <= LAST_CHAR; d++) {
        for (char e=FIRST_CHAR; e <= LAST_CHAR; e++) {
          byte[] b=new byte[]{(byte)d,(byte)e};
          writer.append(new KeyValue(b,fam,qualifier,now,b));
        }
      }
    }
  finally {
      writer.close();
    }
  }
  /** 
 * Compare two Cells only for their row family qualifier value
 */
  public static void assertCellEquals(  Cell firstKeyValue,  Cell secondKeyValue){
    Assert.assertArrayEquals(CellUtil.cloneRow(firstKeyValue),CellUtil.cloneRow(secondKeyValue));
    Assert.assertArrayEquals(CellUtil.cloneFamily(firstKeyValue),CellUtil.cloneFamily(secondKeyValue));
    Assert.assertArrayEquals(CellUtil.cloneQualifier(firstKeyValue),CellUtil.cloneQualifier(secondKeyValue));
    Assert.assertArrayEquals(CellUtil.cloneValue(firstKeyValue),CellUtil.cloneValue(secondKeyValue));
  }
  public static void assertCellsValue(  Table table,  Scan scan,  byte[] expectedValue,  int expectedCount) throws IOException {
    ResultScanner results=table.getScanner(scan);
    int count=0;
    for (    Result res : results) {
      List<Cell> cells=res.listCells();
      for (      Cell cell : cells) {
        Assert.assertArrayEquals(expectedValue,CellUtil.cloneValue(cell));
        count++;
      }
    }
    results.close();
    Assert.assertEquals(expectedCount,count);
  }
}
