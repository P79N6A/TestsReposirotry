public static final class SparseFilter extends FilterBase {
  private final boolean reversed;
  public SparseFilter(  boolean reversed){
    this.reversed=reversed;
  }
  @Override public ReturnCode filterCell(  final Cell c) throws IOException {
    Threads.sleep(TIMEOUT / 2 + 100);
    return Bytes.equals(CellUtil.cloneRow(c),ROWS[reversed ? 0 : NUM_ROWS - 1]) ? ReturnCode.INCLUDE : ReturnCode.SKIP;
  }
  @Override public byte[] toByteArray() throws IOException {
    return reversed ? new byte[]{1} : new byte[]{0};
  }
  public static Filter parseFrom(  final byte[] pbBytes){
    return new SparseFilter(pbBytes[0] != 0);
  }
}
