private class MockRSProcedureDispatcher extends RSProcedureDispatcher {
  private MockRSExecutor mockRsExec;
  public MockRSProcedureDispatcher(  final MasterServices master){
    super(master);
  }
  public void setMockRsExecutor(  final MockRSExecutor mockRsExec){
    this.mockRsExec=mockRsExec;
  }
  @Override protected void remoteDispatch(  ServerName serverName,  Set<RemoteProcedure> remoteProcedures){
    submitTask(new MockRemoteCall(serverName,remoteProcedures));
  }
private class MockRemoteCall extends ExecuteProceduresRemoteCall {
    public MockRemoteCall(    final ServerName serverName,    final Set<RemoteProcedure> operations){
      super(serverName,operations);
    }
    @Override public void dispatchOpenRequests(    MasterProcedureEnv env,    List<RegionOpenOperation> operations){
      request.addOpenRegion(buildOpenRegionRequest(env,getServerName(),operations));
    }
    @Override public void dispatchCloseRequests(    MasterProcedureEnv env,    List<RegionCloseOperation> operations){
      for (      RegionCloseOperation op : operations) {
        request.addCloseRegion(op.buildCloseRegionRequest(getServerName()));
      }
    }
    @Override protected ExecuteProceduresResponse sendRequest(    final ServerName serverName,    final ExecuteProceduresRequest request) throws IOException {
      return mockRsExec.sendRequest(serverName,request);
    }
  }
}
