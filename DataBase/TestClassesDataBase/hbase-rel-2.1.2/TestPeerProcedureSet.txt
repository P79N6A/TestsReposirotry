public static class TestPeerProcedureSet {
  private final MasterProcedureScheduler queue;
  public TestPeerProcedureSet(  final MasterProcedureScheduler queue){
    this.queue=queue;
  }
  public void addBack(  TestPeerProcedure proc){
    queue.addBack(proc);
  }
  public TestPeerProcedure acquire(){
    TestPeerProcedure proc=null;
    boolean waiting=true;
    while (waiting && queue.size() > 0) {
      proc=(TestPeerProcedure)queue.poll(100000000L);
      if (proc == null) {
        continue;
      }
switch (proc.getPeerOperationType()) {
case ADD:
case REMOVE:
case ENABLE:
case DISABLE:
case UPDATE_CONFIG:
        waiting=queue.waitPeerExclusiveLock(proc,proc.getPeerId());
      break;
case REFRESH:
    waiting=false;
  break;
default :
throw new UnsupportedOperationException();
}
}
return proc;
}
public void release(TestPeerProcedure proc){
switch (proc.getPeerOperationType()) {
case ADD:
case REMOVE:
case ENABLE:
case DISABLE:
case UPDATE_CONFIG:
queue.wakePeerExclusiveLock(proc,proc.getPeerId());
break;
case REFRESH:
break;
default :
throw new UnsupportedOperationException();
}
}
}
