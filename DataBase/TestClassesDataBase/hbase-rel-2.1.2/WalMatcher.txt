private static class WalMatcher extends TypeSafeMatcher<WALEdit> {
  private final byte[] typeBytes;
  private final byte[] tableName;
  private final byte[] familyName;
  private final List<String> storeFileNames;
  public WalMatcher(  byte[] typeBytes){
    this(typeBytes,null,null,null);
  }
  public WalMatcher(  byte[] typeBytes,  byte[] tableName,  byte[] familyName,  List<String> storeFileNames){
    this.typeBytes=typeBytes;
    this.tableName=tableName;
    this.familyName=familyName;
    this.storeFileNames=storeFileNames;
  }
  @Override protected boolean matchesSafely(  WALEdit item){
    assertTrue(Arrays.equals(CellUtil.cloneQualifier(item.getCells().get(0)),typeBytes));
    BulkLoadDescriptor desc;
    try {
      desc=WALEdit.getBulkLoadDescriptor(item.getCells().get(0));
    }
 catch (    IOException e) {
      return false;
    }
    assertNotNull(desc);
    if (tableName != null) {
      assertTrue(Bytes.equals(ProtobufUtil.toTableName(desc.getTableName()).getName(),tableName));
    }
    if (storeFileNames != null) {
      int index=0;
      StoreDescriptor store=desc.getStores(0);
      assertTrue(Bytes.equals(store.getFamilyName().toByteArray(),familyName));
      assertTrue(Bytes.equals(Bytes.toBytes(store.getStoreHomeDir()),familyName));
      assertEquals(storeFileNames.size(),store.getStoreFileCount());
    }
    return true;
  }
  @Override public void describeTo(  Description description){
  }
}
