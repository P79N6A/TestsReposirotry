private static class CellWithVersionsStoreScanner extends StoreScanner {
  final AtomicInteger optimization=new AtomicInteger(0);
  CellWithVersionsStoreScanner(  final Scan scan,  ScanInfo scanInfo) throws IOException {
    super(scan,scanInfo,scan.getFamilyMap().get(CF),Arrays.<KeyValueScanner>asList(new KeyValueScanner[]{new KeyValueScanFixture(CellComparator.getInstance(),CELL_WITH_VERSIONS)}));
  }
  @Override protected boolean trySkipToNextColumn(  Cell cell) throws IOException {
    boolean optimized=super.trySkipToNextColumn(cell);
    LOG.info("Cell=" + cell + ", nextIndex="+ CellUtil.toString(getNextIndexedKey(),false)+ ", optimized="+ optimized);
    if (optimized) {
      optimization.incrementAndGet();
    }
    return optimized;
  }
  @Override public Cell getNextIndexedKey(){
    return PrivateCellUtil.createFirstOnRow(CELL_WITH_VERSIONS[CELL_WITH_VERSIONS_BLOCK2_BOUNDARY]);
  }
}
