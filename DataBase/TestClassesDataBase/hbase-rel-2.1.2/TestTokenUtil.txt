@Category(SmallTests.class) public class TestTokenUtil {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestTokenUtil.class);
  @Test public void testObtainToken() throws Exception {
    URL urlPU=ProtobufUtil.class.getProtectionDomain().getCodeSource().getLocation();
    URL urlTU=TokenUtil.class.getProtectionDomain().getCodeSource().getLocation();
    ClassLoader cl=new URLClassLoader(new URL[]{urlPU,urlTU},getClass().getClassLoader());
    Throwable injected=new com.google.protobuf.ServiceException("injected");
    Class<?> tokenUtil=cl.loadClass(TokenUtil.class.getCanonicalName());
    Field shouldInjectFault=tokenUtil.getDeclaredField("injectedException");
    shouldInjectFault.setAccessible(true);
    shouldInjectFault.set(null,injected);
    try {
      tokenUtil.getMethod("obtainToken",Connection.class).invoke(null,new Object[]{null});
      fail("Should have injected exception.");
    }
 catch (    InvocationTargetException e) {
      Throwable t=e;
      boolean serviceExceptionFound=false;
      while ((t=t.getCause()) != null) {
        if (t == injected) {
          serviceExceptionFound=true;
          break;
        }
      }
      if (!serviceExceptionFound) {
        throw e;
      }
    }
    Boolean loaded=(Boolean)cl.loadClass(ProtobufUtil.class.getCanonicalName()).getDeclaredMethod("isClassLoaderLoaded").invoke(null);
    assertFalse("Should not have loaded DynamicClassLoader",loaded);
  }
}
