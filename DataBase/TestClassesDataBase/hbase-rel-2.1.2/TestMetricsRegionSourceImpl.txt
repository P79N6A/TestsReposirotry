@Category({MetricsTests.class,SmallTests.class}) public class TestMetricsRegionSourceImpl {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMetricsRegionSourceImpl.class);
  @SuppressWarnings("SelfComparison") @Test public void testCompareToHashCodeEquals(){
    MetricsRegionServerSourceFactory fact=CompatibilitySingletonFactory.getInstance(MetricsRegionServerSourceFactory.class);
    MetricsRegionSource one=fact.createRegion(new RegionWrapperStub("TEST"));
    MetricsRegionSource oneClone=fact.createRegion(new RegionWrapperStub("TEST"));
    MetricsRegionSource two=fact.createRegion(new RegionWrapperStub("TWO"));
    assertEquals(0,one.compareTo(oneClone));
    assertEquals(one.hashCode(),oneClone.hashCode());
    assertNotEquals(one,two);
    assertNotEquals(0,one.compareTo(two));
    assertNotEquals(0,two.compareTo(one));
    assertNotEquals(one.compareTo(two),two.compareTo(one));
    assertEquals(0,two.compareTo(two));
  }
  @Test(expected=RuntimeException.class) public void testNoGetRegionServerMetricsSourceImpl(){
    CompatibilitySingletonFactory.getInstance(MetricsRegionSource.class);
  }
static class RegionWrapperStub implements MetricsRegionWrapper {
    private String regionName;
    RegionWrapperStub(    String regionName){
      this.regionName=regionName;
    }
    @Override public String getTableName(){
      return null;
    }
    @Override public String getNamespace(){
      return null;
    }
    @Override public String getRegionName(){
      return this.regionName;
    }
    @Override public long getNumStores(){
      return 0;
    }
    @Override public long getNumStoreFiles(){
      return 0;
    }
    @Override public long getMemStoreSize(){
      return 0;
    }
    @Override public long getStoreFileSize(){
      return 0;
    }
    @Override public long getReadRequestCount(){
      return 0;
    }
    @Override public long getFilteredReadRequestCount(){
      return 0;
    }
    @Override public long getMaxStoreFileAge(){
      return 0;
    }
    @Override public long getMinStoreFileAge(){
      return 0;
    }
    @Override public long getAvgStoreFileAge(){
      return 0;
    }
    @Override public long getNumReferenceFiles(){
      return 0;
    }
    @Override public long getWriteRequestCount(){
      return 0;
    }
    @Override public long getNumFilesCompacted(){
      return 0;
    }
    @Override public long getNumBytesCompacted(){
      return 0;
    }
    @Override public long getLastMajorCompactionAge(){
      return 0;
    }
    @Override public long getNumCompactionsCompleted(){
      return 0;
    }
    @Override public long getNumCompactionsFailed(){
      return 0;
    }
    @Override public int getRegionHashCode(){
      return regionName.hashCode();
    }
    /** 
 * Always return 0 for testing
 */
    @Override public int getReplicaId(){
      return 0;
    }
    @Override public long getNumCompactionsQueued(){
      return 0;
    }
    @Override public long getNumFlushesQueued(){
      return 0;
    }
    @Override public long getMaxCompactionQueueSize(){
      return 0;
    }
    @Override public long getMaxFlushQueueSize(){
      return 0;
    }
  }
}
