@Category(SmallTests.class) public class TestMobFileCache {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMobFileCache.class);
  static final Logger LOG=LoggerFactory.getLogger(TestMobFileCache.class);
  private HBaseTestingUtility UTIL;
  private HRegion region;
  private Configuration conf;
  private MobCacheConfig mobCacheConf;
  private MobFileCache mobFileCache;
  private Date currentDate=new Date();
  private static final String TEST_CACHE_SIZE="2";
  private static final int EXPECTED_CACHE_SIZE_ZERO=0;
  private static final int EXPECTED_CACHE_SIZE_ONE=1;
  private static final int EXPECTED_CACHE_SIZE_TWO=2;
  private static final int EXPECTED_CACHE_SIZE_THREE=3;
  private static final long EXPECTED_REFERENCE_ONE=1;
  private static final long EXPECTED_REFERENCE_TWO=2;
  private static final String TABLE="tableName";
  private static final String FAMILY1="family1";
  private static final String FAMILY2="family2";
  private static final String FAMILY3="family3";
  private static final byte[] ROW=Bytes.toBytes("row");
  private static final byte[] ROW2=Bytes.toBytes("row2");
  private static final byte[] VALUE=Bytes.toBytes("value");
  private static final byte[] VALUE2=Bytes.toBytes("value2");
  private static final byte[] QF1=Bytes.toBytes("qf1");
  private static final byte[] QF2=Bytes.toBytes("qf2");
  private static final byte[] QF3=Bytes.toBytes("qf3");
  @Before public void setUp() throws Exception {
    UTIL=HBaseTestingUtility.createLocalHTU();
    conf=UTIL.getConfiguration();
    HTableDescriptor htd=UTIL.createTableDescriptor("testMobFileCache");
    HColumnDescriptor hcd1=new HColumnDescriptor(FAMILY1);
    hcd1.setMobEnabled(true);
    hcd1.setMobThreshold(0);
    HColumnDescriptor hcd2=new HColumnDescriptor(FAMILY2);
    hcd2.setMobEnabled(true);
    hcd2.setMobThreshold(0);
    HColumnDescriptor hcd3=new HColumnDescriptor(FAMILY3);
    hcd3.setMobEnabled(true);
    hcd3.setMobThreshold(0);
    htd.addFamily(hcd1);
    htd.addFamily(hcd2);
    htd.addFamily(hcd3);
    region=UTIL.createLocalHRegion(htd,null,null);
  }
  @After public void tearDown() throws Exception {
    region.close();
    region.getFilesystem().delete(UTIL.getDataTestDir(),true);
  }
  /** 
 * Create the mob store file.
 */
  private Path createMobStoreFile(  String family) throws IOException {
    return createMobStoreFile(HBaseConfiguration.create(),family);
  }
  /** 
 * Create the mob store file
 */
  private Path createMobStoreFile(  Configuration conf,  String family) throws IOException {
    HColumnDescriptor hcd=new HColumnDescriptor(family);
    hcd.setMaxVersions(4);
    hcd.setMobEnabled(true);
    mobCacheConf=new MobCacheConfig(conf,hcd);
    return createMobStoreFile(hcd);
  }
  /** 
 * Create the mob store file
 */
  private Path createMobStoreFile(  HColumnDescriptor hcd) throws IOException {
    TableName tn=TableName.valueOf(TABLE);
    HTableDescriptor htd=new HTableDescriptor(tn);
    htd.addFamily(hcd);
    HMobStore mobStore=(HMobStore)region.getStore(hcd.getName());
    KeyValue key1=new KeyValue(ROW,hcd.getName(),QF1,1,VALUE);
    KeyValue key2=new KeyValue(ROW,hcd.getName(),QF2,1,VALUE);
    KeyValue key3=new KeyValue(ROW2,hcd.getName(),QF3,1,VALUE2);
    KeyValue[] keys=new KeyValue[]{key1,key2,key3};
    int maxKeyCount=keys.length;
    HRegionInfo regionInfo=new HRegionInfo(tn);
    StoreFileWriter mobWriter=mobStore.createWriterInTmp(currentDate,maxKeyCount,hcd.getCompactionCompression(),regionInfo.getStartKey(),false);
    Path mobFilePath=mobWriter.getPath();
    String fileName=mobFilePath.getName();
    mobWriter.append(key1);
    mobWriter.append(key2);
    mobWriter.append(key3);
    mobWriter.close();
    String targetPathName=MobUtils.formatDate(currentDate);
    Path targetPath=new Path(mobStore.getPath(),targetPathName);
    mobStore.commitFile(mobFilePath,targetPath);
    return new Path(targetPath,fileName);
  }
  @Test public void testMobFileCache() throws Exception {
    FileSystem fs=FileSystem.get(conf);
    conf.set(MobConstants.MOB_FILE_CACHE_SIZE_KEY,TEST_CACHE_SIZE);
    mobFileCache=new MobFileCache(conf);
    Path file1Path=createMobStoreFile(FAMILY1);
    Path file2Path=createMobStoreFile(FAMILY2);
    Path file3Path=createMobStoreFile(FAMILY3);
    assertEquals(EXPECTED_CACHE_SIZE_ZERO,mobFileCache.getCacheSize());
    CachedMobFile cachedMobFile1=(CachedMobFile)mobFileCache.openFile(fs,file1Path,mobCacheConf);
    assertEquals(EXPECTED_CACHE_SIZE_ONE,mobFileCache.getCacheSize());
    assertNotNull(cachedMobFile1);
    assertEquals(EXPECTED_REFERENCE_TWO,cachedMobFile1.getReferenceCount());
    mobFileCache.evict();
    assertEquals(EXPECTED_CACHE_SIZE_ONE,mobFileCache.getCacheSize());
    assertEquals(EXPECTED_REFERENCE_TWO,cachedMobFile1.getReferenceCount());
    mobFileCache.evictFile(file1Path.getName());
    assertEquals(EXPECTED_CACHE_SIZE_ZERO,mobFileCache.getCacheSize());
    assertEquals(EXPECTED_REFERENCE_ONE,cachedMobFile1.getReferenceCount());
    cachedMobFile1.close();
    cachedMobFile1=(CachedMobFile)mobFileCache.openFile(fs,file1Path,mobCacheConf);
    assertEquals(EXPECTED_CACHE_SIZE_ONE,mobFileCache.getCacheSize());
    CachedMobFile cachedMobFile2=(CachedMobFile)mobFileCache.openFile(fs,file2Path,mobCacheConf);
    assertEquals(EXPECTED_CACHE_SIZE_TWO,mobFileCache.getCacheSize());
    CachedMobFile cachedMobFile3=(CachedMobFile)mobFileCache.openFile(fs,file3Path,mobCacheConf);
    assertEquals(EXPECTED_CACHE_SIZE_THREE,mobFileCache.getCacheSize());
    assertEquals(EXPECTED_REFERENCE_TWO,cachedMobFile1.getReferenceCount());
    assertEquals(EXPECTED_REFERENCE_TWO,cachedMobFile2.getReferenceCount());
    assertEquals(EXPECTED_REFERENCE_TWO,cachedMobFile3.getReferenceCount());
    mobFileCache.evict();
    assertEquals(EXPECTED_CACHE_SIZE_ONE,mobFileCache.getCacheSize());
    assertEquals(EXPECTED_REFERENCE_ONE,cachedMobFile1.getReferenceCount());
    assertEquals(EXPECTED_REFERENCE_ONE,cachedMobFile2.getReferenceCount());
    assertEquals(EXPECTED_REFERENCE_TWO,cachedMobFile3.getReferenceCount());
  }
}
