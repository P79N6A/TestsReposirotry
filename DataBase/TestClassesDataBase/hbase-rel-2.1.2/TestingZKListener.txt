public static class TestingZKListener extends ZKListener {
  private static final Logger LOG=LoggerFactory.getLogger(TestingZKListener.class);
  private Semaphore deletedLock;
  private Semaphore createdLock;
  private Semaphore changedLock;
  private String node;
  public TestingZKListener(  ZKWatcher watcher,  String node){
    super(watcher);
    deletedLock=new Semaphore(0);
    createdLock=new Semaphore(0);
    changedLock=new Semaphore(0);
    this.node=node;
  }
  @Override public void nodeDeleted(  String path){
    if (path.equals(node)) {
      LOG.debug("nodeDeleted(" + path + ")");
      deletedLock.release();
    }
  }
  @Override public void nodeCreated(  String path){
    if (path.equals(node)) {
      LOG.debug("nodeCreated(" + path + ")");
      createdLock.release();
    }
  }
  @Override public void nodeDataChanged(  String path){
    if (path.equals(node)) {
      LOG.debug("nodeDataChanged(" + path + ")");
      changedLock.release();
    }
  }
  public void waitForDeletion() throws InterruptedException {
    deletedLock.acquire();
  }
  public void waitForCreation() throws InterruptedException {
    createdLock.acquire();
  }
  public void waitForDataChange() throws InterruptedException {
    changedLock.acquire();
  }
}
