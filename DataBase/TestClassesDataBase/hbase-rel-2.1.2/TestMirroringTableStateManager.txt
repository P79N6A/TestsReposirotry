/** 
 * Tests that table state is mirrored out to zookeeper for hbase-1.x clients. Also tests that table state gets migrated from zookeeper on master start.
 */
@Category({MasterTests.class,LargeTests.class}) public class TestMirroringTableStateManager {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMirroringTableStateManager.class);
  @Rule public TestName name=new TestName();
  private final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  @Before public void before() throws Exception {
    TEST_UTIL.startMiniCluster();
  }
  @After public void after() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testMirroring() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    TEST_UTIL.createTable(tableName,HConstants.CATALOG_FAMILY_STR);
    ZKWatcher zkw=TEST_UTIL.getZooKeeperWatcher();
    assertTrue(TableState.State.ENABLED.equals(getTableStateInZK(zkw,tableName)));
    TEST_UTIL.getAdmin().disableTable(tableName);
    assertTrue(TableState.State.DISABLED.equals(getTableStateInZK(zkw,tableName)));
    TEST_UTIL.getAdmin().deleteTable(tableName);
    assertTrue(getTableStateInZK(zkw,tableName) == null);
  }
  private TableState.State getTableStateInZK(  ZKWatcher watcher,  final TableName tableName) throws KeeperException, IOException, InterruptedException {
    String znode=ZNodePaths.joinZNode(watcher.getZNodePaths().tableZNode,tableName.getNameAsString());
    byte[] data=ZKUtil.getData(watcher,znode);
    if (data == null || data.length <= 0) {
      return null;
    }
    try {
      ProtobufUtil.expectPBMagicPrefix(data);
      ZooKeeperProtos.DeprecatedTableState.Builder builder=ZooKeeperProtos.DeprecatedTableState.newBuilder();
      int magicLen=ProtobufUtil.lengthOfPBMagic();
      ProtobufUtil.mergeFrom(builder,data,magicLen,data.length - magicLen);
      return TableState.State.valueOf(builder.getState().toString());
    }
 catch (    IOException e) {
      KeeperException ke=new KeeperException.DataInconsistencyException();
      ke.initCause(e);
      throw ke;
    }
catch (    DeserializationException e) {
      throw ZKUtil.convert(e);
    }
  }
}
