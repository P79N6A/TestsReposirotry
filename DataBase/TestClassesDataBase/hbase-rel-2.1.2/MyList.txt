private static class MyList<T> implements List<T> {
  private final List<T> delegatee=new ArrayList<>();
  private final MyListHook hookAtAdd;
  MyList(  final MyListHook hookAtAdd){
    this.hookAtAdd=hookAtAdd;
  }
  @Override public int size(){
    return delegatee.size();
  }
  @Override public boolean isEmpty(){
    return delegatee.isEmpty();
  }
  @Override public boolean contains(  Object o){
    return delegatee.contains(o);
  }
  @Override public Iterator<T> iterator(){
    return delegatee.iterator();
  }
  @Override public Object[] toArray(){
    return delegatee.toArray();
  }
  @Override public <R>R[] toArray(  R[] a){
    return delegatee.toArray(a);
  }
  @Override public boolean add(  T e){
    hookAtAdd.hook(size());
    return delegatee.add(e);
  }
  @Override public boolean remove(  Object o){
    return delegatee.remove(o);
  }
  @Override public boolean containsAll(  Collection<?> c){
    return delegatee.containsAll(c);
  }
  @Override public boolean addAll(  Collection<? extends T> c){
    return delegatee.addAll(c);
  }
  @Override public boolean addAll(  int index,  Collection<? extends T> c){
    return delegatee.addAll(index,c);
  }
  @Override public boolean removeAll(  Collection<?> c){
    return delegatee.removeAll(c);
  }
  @Override public boolean retainAll(  Collection<?> c){
    return delegatee.retainAll(c);
  }
  @Override public void clear(){
    delegatee.clear();
  }
  @Override public T get(  int index){
    return delegatee.get(index);
  }
  @Override public T set(  int index,  T element){
    return delegatee.set(index,element);
  }
  @Override public void add(  int index,  T element){
    delegatee.add(index,element);
  }
  @Override public T remove(  int index){
    return delegatee.remove(index);
  }
  @Override public int indexOf(  Object o){
    return delegatee.indexOf(o);
  }
  @Override public int lastIndexOf(  Object o){
    return delegatee.lastIndexOf(o);
  }
  @Override public ListIterator<T> listIterator(){
    return delegatee.listIterator();
  }
  @Override public ListIterator<T> listIterator(  int index){
    return delegatee.listIterator(index);
  }
  @Override public List<T> subList(  int fromIndex,  int toIndex){
    return delegatee.subList(fromIndex,toIndex);
  }
}
