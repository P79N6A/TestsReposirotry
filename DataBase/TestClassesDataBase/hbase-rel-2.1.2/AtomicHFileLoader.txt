/** 
 * Thread that does full scans of the table looking for any partially completed rows. Each iteration of this loads 10 hdfs files, which occupies 5 file open file handles. So every 10 iterations (500 file handles) it does a region compaction to reduce the number of open file handles.
 */
public static class AtomicHFileLoader extends RepeatingTestThread {
  final AtomicLong numBulkLoads=new AtomicLong();
  final AtomicLong numCompactions=new AtomicLong();
  private TableName tableName;
  public AtomicHFileLoader(  TableName tableName,  TestContext ctx,  byte targetFamilies[][]) throws IOException {
    super(ctx);
    this.tableName=tableName;
  }
  @Override public void doAnAction() throws Exception {
    long iteration=numBulkLoads.getAndIncrement();
    Path dir=UTIL.getDataTestDirOnTestFS(String.format("bulkLoad_%08d",iteration));
    FileSystem fs=UTIL.getTestFileSystem();
    byte[] val=Bytes.toBytes(String.format("%010d",iteration));
    final List<Pair<byte[],String>> famPaths=new ArrayList<>(NUM_CFS);
    for (int i=0; i < NUM_CFS; i++) {
      Path hfile=new Path(dir,family(i));
      byte[] fam=Bytes.toBytes(family(i));
      createHFile(fs,hfile,fam,QUAL,val,1000);
      famPaths.add(new Pair<>(fam,hfile.toString()));
    }
    final ClusterConnection conn=(ClusterConnection)UTIL.getConnection();
    Table table=conn.getTable(tableName);
    final String bulkToken=new SecureBulkLoadClient(UTIL.getConfiguration(),table).prepareBulkLoad(conn);
    ClientServiceCallable<Void> callable=new ClientServiceCallable<Void>(conn,tableName,Bytes.toBytes("aaa"),new RpcControllerFactory(UTIL.getConfiguration()).newController(),HConstants.PRIORITY_UNSET){
      @Override public Void rpcCall() throws Exception {
        LOG.debug("Going to connect to server " + getLocation() + " for row "+ Bytes.toStringBinary(getRow()));
        SecureBulkLoadClient secureClient=null;
        byte[] regionName=getLocation().getRegionInfo().getRegionName();
        try (Table table=conn.getTable(getTableName())){
          secureClient=new SecureBulkLoadClient(UTIL.getConfiguration(),table);
          secureClient.secureBulkLoadHFiles(getStub(),famPaths,regionName,true,null,bulkToken);
        }
         return null;
      }
    }
;
    RpcRetryingCallerFactory factory=new RpcRetryingCallerFactory(conf);
    RpcRetryingCaller<Void> caller=factory.<Void>newCaller();
    caller.callWithRetries(callable,Integer.MAX_VALUE);
    if (numBulkLoads.get() % 5 == 0) {
      callable=new ClientServiceCallable<Void>(conn,tableName,Bytes.toBytes("aaa"),new RpcControllerFactory(UTIL.getConfiguration()).newController(),HConstants.PRIORITY_UNSET){
        @Override protected Void rpcCall() throws Exception {
          LOG.debug("compacting " + getLocation() + " for row "+ Bytes.toStringBinary(getRow()));
          AdminProtos.AdminService.BlockingInterface server=conn.getAdmin(getLocation().getServerName());
          CompactRegionRequest request=RequestConverter.buildCompactRegionRequest(getLocation().getRegionInfo().getRegionName(),true,null);
          server.compactRegion(null,request);
          numCompactions.incrementAndGet();
          return null;
        }
      }
;
      caller.callWithRetries(callable,Integer.MAX_VALUE);
    }
  }
}
