/** 
 * Test log deletion as logs are rolled.
 */
public abstract class AbstractTestLogRolling {
  private static final Logger LOG=LoggerFactory.getLogger(AbstractTestLogRolling.class);
  protected HRegionServer server;
  protected String tableName;
  protected byte[] value;
  protected FileSystem fs;
  protected MiniDFSCluster dfsCluster;
  protected Admin admin;
  protected MiniHBaseCluster cluster;
  protected static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  @Rule public final TestName name=new TestName();
  public AbstractTestLogRolling(){
    this.server=null;
    this.tableName=null;
    String className=this.getClass().getName();
    StringBuilder v=new StringBuilder(className);
    while (v.length() < 1000) {
      v.append(className);
    }
    this.value=Bytes.toBytes(v.toString());
  }
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    Configuration conf=TEST_UTIL.getConfiguration();
    conf.setLong(HConstants.HREGION_MAX_FILESIZE,768L * 1024L);
    conf.setInt("hbase.regionserver.maxlogentries",32);
    conf.setInt("hbase.regionserver.logroll.errors.tolerated",2);
    conf.setInt("hbase.rpc.timeout",10 * 1000);
    conf.setInt("hbase.hregion.memstore.optionalflushcount",2);
    conf.setInt(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,8192);
    conf.setLong("hbase.client.pause",10 * 1000);
    conf.setInt(HConstants.THREAD_WAKE_FREQUENCY,2 * 1000);
    conf.setLong("hbase.regionserver.hlog.check.lowreplication.interval",24L * 60 * 60* 1000);
  }
  @Before public void setUp() throws Exception {
    TEST_UTIL.startMiniCluster(1,1,2);
    cluster=TEST_UTIL.getHBaseCluster();
    dfsCluster=TEST_UTIL.getDFSCluster();
    fs=TEST_UTIL.getTestFileSystem();
    admin=TEST_UTIL.getAdmin();
    cluster.getMaster().balanceSwitch(false);
  }
  @After public void tearDown() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  protected void startAndWriteData() throws IOException, InterruptedException {
    TEST_UTIL.getConnection().getTable(TableName.META_TABLE_NAME);
    this.server=cluster.getRegionServerThreads().get(0).getRegionServer();
    Table table=createTestTable(this.tableName);
    server=TEST_UTIL.getRSForFirstRegionInTable(table.getName());
    for (int i=1; i <= 256; i++) {
      doPut(table,i);
      if (i % 32 == 0) {
        try {
          Thread.sleep(2000);
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
  /** 
 * Tests that log rolling doesn't hang when no data is written.
 */
  @Test public void testLogRollOnNothingWritten() throws Exception {
    final Configuration conf=TEST_UTIL.getConfiguration();
    final WALFactory wals=new WALFactory(conf,ServerName.valueOf("test.com",8080,1).toString());
    final WAL newLog=wals.getWAL(null);
    try {
      newLog.rollWriter(true);
    }
  finally {
      wals.close();
    }
  }
  private void assertLogFileSize(  WAL log){
    if (AbstractFSWALProvider.getNumRolledLogFiles(log) > 0) {
      assertTrue(AbstractFSWALProvider.getLogFileSize(log) > 0);
    }
 else {
      assertEquals(0,AbstractFSWALProvider.getLogFileSize(log));
    }
  }
  /** 
 * Tests that logs are deleted
 */
  @Test public void testLogRolling() throws Exception {
    this.tableName=getName();
    startAndWriteData();
    RegionInfo region=server.getRegions(TableName.valueOf(tableName)).get(0).getRegionInfo();
    final WAL log=server.getWAL(region);
    LOG.info("after writing there are " + AbstractFSWALProvider.getNumRolledLogFiles(log) + " log files");
    assertLogFileSize(log);
    for (    HRegion r : server.getOnlineRegionsLocalContext()) {
      r.flush(true);
    }
    log.rollWriter();
    int count=AbstractFSWALProvider.getNumRolledLogFiles(log);
    LOG.info("after flushing all regions and rolling logs there are " + count + " log files");
    assertTrue(("actual count: " + count),count <= 2);
    assertLogFileSize(log);
  }
  protected String getName(){
    return "TestLogRolling-" + name.getMethodName();
  }
  void writeData(  Table table,  int rownum) throws IOException {
    doPut(table,rownum);
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
    }
  }
  void validateData(  Table table,  int rownum) throws IOException {
    String row="row" + String.format("%1$04d",rownum);
    Get get=new Get(Bytes.toBytes(row));
    get.addFamily(HConstants.CATALOG_FAMILY);
    Result result=table.get(get);
    assertTrue(result.size() == 1);
    assertTrue(Bytes.equals(value,result.getValue(HConstants.CATALOG_FAMILY,null)));
    LOG.info("Validated row " + row);
  }
  /** 
 * Tests that logs are deleted when some region has a compaction record in WAL and no other records. See HBASE-8597.
 */
  @Test public void testCompactionRecordDoesntBlockRolling() throws Exception {
    Table table=null;
    Table t=TEST_UTIL.getConnection().getTable(TableName.META_TABLE_NAME);
    try {
      table=createTestTable(getName());
      server=TEST_UTIL.getRSForFirstRegionInTable(table.getName());
      HRegion region=server.getRegions(table.getName()).get(0);
      final WAL log=server.getWAL(region.getRegionInfo());
      Store s=region.getStore(HConstants.CATALOG_FAMILY);
      admin.flush(TableName.NAMESPACE_TABLE_NAME);
      for (int i=1; i <= 2; ++i) {
        doPut(table,i);
        admin.flush(table.getName());
      }
      doPut(table,3);
      assertEquals("Should have no WAL after initial writes",0,AbstractFSWALProvider.getNumRolledLogFiles(log));
      assertEquals(2,s.getStorefilesCount());
      log.rollWriter();
      assertEquals("Should have WAL; one table is not flushed",1,AbstractFSWALProvider.getNumRolledLogFiles(log));
      admin.flush(table.getName());
      region.compact(false);
      Assert.assertNotNull(s);
      for (int waitTime=3000; s.getStorefilesCount() > 1 && waitTime > 0; waitTime-=200) {
        Threads.sleepWithoutInterrupt(200);
      }
      assertEquals("Compaction didn't happen",1,s.getStorefilesCount());
      doPut(table,0);
      log.rollWriter();
      assertEquals("Should have WAL; one table is not flushed",1,AbstractFSWALProvider.getNumRolledLogFiles(log));
      admin.flush(table.getName());
      doPut(table,1);
      log.rollWriter();
      assertEquals("Should have 1 WALs at the end",1,AbstractFSWALProvider.getNumRolledLogFiles(log));
    }
  finally {
      if (t != null)       t.close();
      if (table != null)       table.close();
    }
  }
  protected void doPut(  Table table,  int i) throws IOException {
    Put put=new Put(Bytes.toBytes("row" + String.format("%1$04d",i)));
    put.addColumn(HConstants.CATALOG_FAMILY,null,value);
    table.put(put);
  }
  protected Table createTestTable(  String tableName) throws IOException {
    TableDescriptor desc=TableDescriptorBuilder.newBuilder(TableName.valueOf(getName())).setColumnFamily(ColumnFamilyDescriptorBuilder.of(HConstants.CATALOG_FAMILY)).build();
    admin.createTable(desc);
    return TEST_UTIL.getConnection().getTable(desc.getTableName());
  }
}
