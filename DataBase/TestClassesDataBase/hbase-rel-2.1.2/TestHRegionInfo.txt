@Category({RegionServerTests.class,SmallTests.class}) public class TestHRegionInfo {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHRegionInfo.class);
  @Rule public TestName name=new TestName();
  @Test public void testPb() throws DeserializationException {
    HRegionInfo hri=HRegionInfo.FIRST_META_REGIONINFO;
    byte[] bytes=hri.toByteArray();
    HRegionInfo pbhri=HRegionInfo.parseFrom(bytes);
    assertTrue(hri.equals(pbhri));
  }
  @Test public void testReadAndWriteHRegionInfoFile() throws IOException, InterruptedException {
    HBaseTestingUtility htu=new HBaseTestingUtility();
    HRegionInfo hri=HRegionInfo.FIRST_META_REGIONINFO;
    Path basedir=htu.getDataTestDir();
    FSTableDescriptors fsTableDescriptors=new FSTableDescriptors(htu.getConfiguration());
    HRegion r=HBaseTestingUtility.createRegionAndWAL(hri,basedir,htu.getConfiguration(),fsTableDescriptors.get(TableName.META_TABLE_NAME));
    long modtime=getModTime(r);
    HBaseTestingUtility.closeRegionAndWAL(r);
    Thread.sleep(1001);
    r=HRegion.openHRegion(basedir,hri,fsTableDescriptors.get(TableName.META_TABLE_NAME),null,htu.getConfiguration());
    long modtime2=getModTime(r);
    assertEquals(modtime,modtime2);
    org.apache.hadoop.hbase.client.RegionInfo deserializedHri=HRegionFileSystem.loadRegionInfoFileContent(r.getRegionFileSystem().getFileSystem(),r.getRegionFileSystem().getRegionDir());
    assertTrue(org.apache.hadoop.hbase.client.RegionInfo.COMPARATOR.compare(hri,deserializedHri) == 0);
    HBaseTestingUtility.closeRegionAndWAL(r);
  }
  long getModTime(  final HRegion r) throws IOException {
    FileStatus[] statuses=r.getRegionFileSystem().getFileSystem().listStatus(new Path(r.getRegionFileSystem().getRegionDir(),HRegionFileSystem.REGION_INFO_FILE));
    assertTrue(statuses != null && statuses.length == 1);
    return statuses[0].getModificationTime();
  }
  @Test public void testCreateHRegionInfoName() throws Exception {
    final String tableName=name.getMethodName();
    final TableName tn=TableName.valueOf(tableName);
    String startKey="startkey";
    final byte[] sk=Bytes.toBytes(startKey);
    String id="id";
    byte[] name=HRegionInfo.createRegionName(tn,sk,id,false);
    String nameStr=Bytes.toString(name);
    assertEquals(tableName + "," + startKey+ ","+ id,nameStr);
    String md5HashInHex=MD5Hash.getMD5AsHex(name);
    assertEquals(HRegionInfo.MD5_HEX_LENGTH,md5HashInHex.length());
    name=HRegionInfo.createRegionName(tn,sk,id,true);
    nameStr=Bytes.toString(name);
    assertEquals(tableName + "," + startKey+ ","+ id+ "."+ md5HashInHex+ ".",nameStr);
  }
  @Test public void testContainsRange(){
    HTableDescriptor tableDesc=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    HRegionInfo hri=new HRegionInfo(tableDesc.getTableName(),Bytes.toBytes("a"),Bytes.toBytes("g"));
    assertTrue(hri.containsRange(Bytes.toBytes("a"),Bytes.toBytes("a")));
    assertTrue(hri.containsRange(Bytes.toBytes("b"),Bytes.toBytes("c")));
    assertTrue(hri.containsRange(Bytes.toBytes("a"),Bytes.toBytes("c")));
    assertTrue(hri.containsRange(Bytes.toBytes("c"),Bytes.toBytes("c")));
    assertFalse(hri.containsRange(Bytes.toBytes("a"),Bytes.toBytes("g")));
    assertFalse(hri.containsRange(Bytes.toBytes("g"),Bytes.toBytes("g")));
    assertFalse(hri.containsRange(Bytes.toBytes("z"),Bytes.toBytes("z")));
    try {
      hri.containsRange(Bytes.toBytes("z"),Bytes.toBytes("a"));
      fail("Invalid range did not throw IAE");
    }
 catch (    IllegalArgumentException iae) {
    }
  }
  @Test public void testLastRegionCompare(){
    HTableDescriptor tableDesc=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    HRegionInfo hrip=new HRegionInfo(tableDesc.getTableName(),Bytes.toBytes("a"),new byte[0]);
    HRegionInfo hric=new HRegionInfo(tableDesc.getTableName(),Bytes.toBytes("a"),Bytes.toBytes("b"));
    assertTrue(hrip.compareTo(hric) > 0);
  }
  @Test public void testMetaTables(){
    assertTrue(HRegionInfo.FIRST_META_REGIONINFO.isMetaRegion());
  }
  @SuppressWarnings("SelfComparison") @Test public void testComparator(){
    final TableName tableName=TableName.valueOf(name.getMethodName());
    byte[] empty=new byte[0];
    HRegionInfo older=new HRegionInfo(tableName,empty,empty,false,0L);
    HRegionInfo newer=new HRegionInfo(tableName,empty,empty,false,1L);
    assertTrue(older.compareTo(newer) < 0);
    assertTrue(newer.compareTo(older) > 0);
    assertEquals(0,older.compareTo(older));
    assertEquals(0,newer.compareTo(newer));
    HRegionInfo a=new HRegionInfo(TableName.valueOf("a"),null,null);
    HRegionInfo b=new HRegionInfo(TableName.valueOf("b"),null,null);
    assertNotEquals(0,a.compareTo(b));
    HTableDescriptor t=new HTableDescriptor(TableName.valueOf("t"));
    byte[] midway=Bytes.toBytes("midway");
    a=new HRegionInfo(t.getTableName(),null,midway);
    b=new HRegionInfo(t.getTableName(),midway,null);
    assertTrue(a.compareTo(b) < 0);
    assertTrue(b.compareTo(a) > 0);
    assertEquals(a,a);
    assertEquals(0,a.compareTo(a));
    a=new HRegionInfo(t.getTableName(),Bytes.toBytes("a"),Bytes.toBytes("d"));
    b=new HRegionInfo(t.getTableName(),Bytes.toBytes("e"),Bytes.toBytes("g"));
    assertTrue(a.compareTo(b) < 0);
    a=new HRegionInfo(t.getTableName(),Bytes.toBytes("aaaa"),Bytes.toBytes("dddd"));
    b=new HRegionInfo(t.getTableName(),Bytes.toBytes("e"),Bytes.toBytes("g"));
    assertTrue(a.compareTo(b) < 0);
    a=new HRegionInfo(t.getTableName(),Bytes.toBytes("aaaa"),Bytes.toBytes("dddd"));
    b=new HRegionInfo(t.getTableName(),Bytes.toBytes("aaaa"),Bytes.toBytes("eeee"));
    assertTrue(a.compareTo(b) < 0);
  }
  @Test public void testRegionNameForRegionReplicas() throws Exception {
    String tableName=name.getMethodName();
    final TableName tn=TableName.valueOf(tableName);
    String startKey="startkey";
    final byte[] sk=Bytes.toBytes(startKey);
    String id="id";
    byte[] name=HRegionInfo.createRegionName(tn,sk,Bytes.toBytes(id),0,false);
    String nameStr=Bytes.toString(name);
    assertEquals(tableName + "," + startKey+ ","+ id,nameStr);
    name=HRegionInfo.createRegionName(tn,sk,Bytes.toBytes(id),1,false);
    nameStr=Bytes.toString(name);
    assertEquals(tableName + "," + startKey+ ","+ id+ "_"+ String.format(HRegionInfo.REPLICA_ID_FORMAT,1),nameStr);
    name=HRegionInfo.createRegionName(tn,sk,Bytes.toBytes(id),0xFFFF,false);
    nameStr=Bytes.toString(name);
    assertEquals(tableName + "," + startKey+ ","+ id+ "_"+ String.format(HRegionInfo.REPLICA_ID_FORMAT,0xFFFF),nameStr);
  }
  @Test public void testParseName() throws IOException {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    byte[] startKey=Bytes.toBytes("startKey");
    long regionId=System.currentTimeMillis();
    int replicaId=42;
    byte[] regionName=HRegionInfo.createRegionName(tableName,startKey,regionId,false);
    byte[][] fields=HRegionInfo.parseRegionName(regionName);
    assertArrayEquals(Bytes.toString(fields[0]),tableName.getName(),fields[0]);
    assertArrayEquals(Bytes.toString(fields[1]),startKey,fields[1]);
    assertArrayEquals(Bytes.toString(fields[2]),Bytes.toBytes(Long.toString(regionId)),fields[2]);
    assertEquals(3,fields.length);
    regionName=HRegionInfo.createRegionName(tableName,startKey,regionId,replicaId,false);
    fields=HRegionInfo.parseRegionName(regionName);
    assertArrayEquals(Bytes.toString(fields[0]),tableName.getName(),fields[0]);
    assertArrayEquals(Bytes.toString(fields[1]),startKey,fields[1]);
    assertArrayEquals(Bytes.toString(fields[2]),Bytes.toBytes(Long.toString(regionId)),fields[2]);
    assertArrayEquals(Bytes.toString(fields[3]),Bytes.toBytes(String.format(HRegionInfo.REPLICA_ID_FORMAT,replicaId)),fields[3]);
  }
  @Test public void testConvert(){
    final TableName tableName=TableName.valueOf("ns1:" + name.getMethodName());
    byte[] startKey=Bytes.toBytes("startKey");
    byte[] endKey=Bytes.toBytes("endKey");
    boolean split=false;
    long regionId=System.currentTimeMillis();
    int replicaId=42;
    HRegionInfo hri=new HRegionInfo(tableName,startKey,endKey,split,regionId,replicaId);
    HRegionInfo convertedHri=HRegionInfo.convert(HRegionInfo.convert(hri));
    assertEquals(hri,convertedHri);
    RegionInfo info=RegionInfo.newBuilder().setTableName(HBaseProtos.TableName.newBuilder().setQualifier(UnsafeByteOperations.unsafeWrap(tableName.getQualifier())).setNamespace(UnsafeByteOperations.unsafeWrap(tableName.getNamespace())).build()).setStartKey(UnsafeByteOperations.unsafeWrap(startKey)).setEndKey(UnsafeByteOperations.unsafeWrap(endKey)).setSplit(split).setRegionId(regionId).build();
    convertedHri=HRegionInfo.convert(info);
    HRegionInfo expectedHri=new HRegionInfo(tableName,startKey,endKey,split,regionId,0);
    assertEquals(expectedHri,convertedHri);
  }
}
