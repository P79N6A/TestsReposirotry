@Category({MasterTests.class,LargeTests.class}) public class TestMasterFailoverBalancerPersistence {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMasterFailoverBalancerPersistence.class);
  /** 
 * Test that if the master fails, the load balancer maintains its state (running or not) when the next master takes over
 * @throws Exception
 */
  @Test public void testMasterFailoverBalancerPersistence() throws Exception {
    final int NUM_MASTERS=3;
    final int NUM_RS=1;
    HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
    TEST_UTIL.startMiniCluster(NUM_MASTERS,NUM_RS);
    MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
    assertTrue(cluster.waitForActiveAndReadyMaster());
    HMaster active=cluster.getMaster();
    ClusterMetrics clusterStatus=active.getClusterMetrics();
    assertTrue(clusterStatus.getBalancerOn());
    active=killActiveAndWaitForNewActive(cluster);
    clusterStatus=active.getClusterMetrics();
    assertTrue(clusterStatus.getBalancerOn());
    active.balanceSwitch(false);
    active=killActiveAndWaitForNewActive(cluster);
    clusterStatus=active.getClusterMetrics();
    assertFalse(clusterStatus.getBalancerOn());
    TEST_UTIL.shutdownMiniCluster();
  }
  /** 
 * Kill the master and wait for a new active master to show up
 * @param cluster
 * @return the new active master
 * @throws InterruptedException
 * @throws java.io.IOException
 */
  private HMaster killActiveAndWaitForNewActive(  MiniHBaseCluster cluster) throws InterruptedException, IOException {
    int activeIndex=getActiveMasterIndex(cluster);
    HMaster active=cluster.getMaster();
    cluster.stopMaster(activeIndex);
    cluster.waitOnMaster(activeIndex);
    assertTrue(cluster.waitForActiveAndReadyMaster());
    HMaster newActive=cluster.getMaster();
    assertFalse(active == newActive);
    return newActive;
  }
  /** 
 * return the index of the active master in the cluster
 * @throws org.apache.hadoop.hbase.MasterNotRunningException if no active master found
 */
  private int getActiveMasterIndex(  MiniHBaseCluster cluster) throws MasterNotRunningException {
    List<JVMClusterUtil.MasterThread> masterThreads=cluster.getMasterThreads();
    for (int i=0; i < masterThreads.size(); i++) {
      if (masterThreads.get(i).getMaster().isActiveMaster()) {
        return i;
      }
    }
    throw new MasterNotRunningException();
  }
}
