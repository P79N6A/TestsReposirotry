@Category(IntegrationTests.class) public class IntegrationTestIngestWithEncryption extends IntegrationTestIngest {
  private final static Logger LOG=LoggerFactory.getLogger(IntegrationTestIngestWithEncryption.class);
  boolean initialized=false;
  @Override public void setUpCluster() throws Exception {
    util=getTestingUtil(null);
    Configuration conf=util.getConfiguration();
    if (!util.isDistributedCluster()) {
      conf.setInt(HFile.FORMAT_VERSION_KEY,3);
      conf.set(HConstants.CRYPTO_KEYPROVIDER_CONF_KEY,KeyProviderForTesting.class.getName());
      conf.set(HConstants.CRYPTO_MASTERKEY_NAME_CONF_KEY,"hbase");
      conf.setClass("hbase.regionserver.hlog.reader.impl",SecureProtobufLogReader.class,Reader.class);
      conf.setClass("hbase.regionserver.hlog.writer.impl",SecureProtobufLogWriter.class,Writer.class);
      conf.setBoolean(HConstants.ENABLE_WAL_ENCRYPTION,true);
    }
    try {
      EncryptionTest.testEncryption(conf,"AES",null);
    }
 catch (    Exception e) {
      LOG.warn("Encryption configuration test did not pass, skipping test",e);
      return;
    }
    super.setUpCluster();
    initialized=true;
  }
  @Before @Override public void setUp() throws Exception {
    super.setUp();
    if (!initialized) {
      return;
    }
    final Admin admin=util.getAdmin();
    TableDescriptor tableDescriptor=admin.getDescriptor(getTablename());
    for (    ColumnFamilyDescriptor columnDescriptor : tableDescriptor.getColumnFamilies()) {
      ColumnFamilyDescriptor updatedColumn=ColumnFamilyDescriptorBuilder.newBuilder(columnDescriptor).setEncryptionType("AES").build();
      LOG.info("Updating CF schema for " + getTablename() + "."+ columnDescriptor.getNameAsString());
      admin.disableTable(getTablename());
      admin.modifyColumnFamily(getTablename(),updatedColumn);
      admin.enableTable(getTablename());
      util.waitFor(30000,1000,true,new Predicate<IOException>(){
        @Override public boolean evaluate() throws IOException {
          return admin.isTableAvailable(getTablename());
        }
      }
);
    }
  }
  @Override public int runTestFromCommandLine() throws Exception {
    if (!initialized) {
      return 0;
    }
    return super.runTestFromCommandLine();
  }
  @Override public void cleanUp() throws Exception {
    if (!initialized) {
      return;
    }
    super.cleanUp();
  }
  public static void main(  String[] args) throws Exception {
    Configuration conf=HBaseConfiguration.create();
    IntegrationTestingUtility.setUseDistributedCluster(conf);
    int ret=ToolRunner.run(conf,new IntegrationTestIngestWithEncryption(),args);
    System.exit(ret);
  }
}
