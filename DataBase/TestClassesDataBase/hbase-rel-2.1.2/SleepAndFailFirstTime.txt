/** 
 * This copro sleeps 20 second. The first call it fails. The second time, it works.
 */
public static class SleepAndFailFirstTime implements RegionCoprocessor, RegionObserver {
  static final AtomicLong ct=new AtomicLong(0);
  static final String SLEEP_TIME_CONF_KEY="hbase.coprocessor.SleepAndFailFirstTime.sleepTime";
  static final long DEFAULT_SLEEP_TIME=20000;
  static final AtomicLong sleepTime=new AtomicLong(DEFAULT_SLEEP_TIME);
  public SleepAndFailFirstTime(){
  }
  @Override public Optional<RegionObserver> getRegionObserver(){
    return Optional.of(this);
  }
  @Override public void postOpen(  ObserverContext<RegionCoprocessorEnvironment> c){
    RegionCoprocessorEnvironment env=c.getEnvironment();
    Configuration conf=env.getConfiguration();
    sleepTime.set(conf.getLong(SLEEP_TIME_CONF_KEY,DEFAULT_SLEEP_TIME));
  }
  @Override public void preGetOp(  final ObserverContext<RegionCoprocessorEnvironment> e,  final Get get,  final List<Cell> results) throws IOException {
    Threads.sleep(sleepTime.get());
    if (ct.incrementAndGet() == 1) {
      throw new IOException("first call I fail");
    }
  }
  @Override public void prePut(  final ObserverContext<RegionCoprocessorEnvironment> e,  final Put put,  final WALEdit edit,  final Durability durability) throws IOException {
    Threads.sleep(sleepTime.get());
    if (ct.incrementAndGet() == 1) {
      throw new IOException("first call I fail");
    }
  }
  @Override public void preDelete(  final ObserverContext<RegionCoprocessorEnvironment> e,  final Delete delete,  final WALEdit edit,  final Durability durability) throws IOException {
    Threads.sleep(sleepTime.get());
    if (ct.incrementAndGet() == 1) {
      throw new IOException("first call I fail");
    }
  }
  @Override public Result preIncrement(  final ObserverContext<RegionCoprocessorEnvironment> e,  final Increment increment) throws IOException {
    Threads.sleep(sleepTime.get());
    if (ct.incrementAndGet() == 1) {
      throw new IOException("first call I fail");
    }
    return null;
  }
}
