@Category({MapReduceTests.class,SmallTests.class}) public class TestGroupingTableMap {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestGroupingTableMap.class);
  @Test @SuppressWarnings({"deprecation","unchecked"}) public void shouldNotCallCollectonSinceFindUniqueKeyValueMoreThanOnes() throws Exception {
    GroupingTableMap gTableMap=null;
    try {
      Result result=mock(Result.class);
      Reporter reporter=mock(Reporter.class);
      gTableMap=new GroupingTableMap();
      Configuration cfg=new Configuration();
      cfg.set(GroupingTableMap.GROUP_COLUMNS,"familyA:qualifierA familyB:qualifierB");
      JobConf jobConf=new JobConf(cfg);
      gTableMap.configure(jobConf);
      byte[] row={};
      List<Cell> keyValues=ImmutableList.<Cell>of(new KeyValue(row,"familyA".getBytes(),"qualifierA".getBytes(),Bytes.toBytes("1111")),new KeyValue(row,"familyA".getBytes(),"qualifierA".getBytes(),Bytes.toBytes("2222")),new KeyValue(row,"familyB".getBytes(),"qualifierB".getBytes(),Bytes.toBytes("3333")));
      when(result.listCells()).thenReturn(keyValues);
      OutputCollector<ImmutableBytesWritable,Result> outputCollectorMock=mock(OutputCollector.class);
      gTableMap.map(null,result,outputCollectorMock,reporter);
      verify(result).listCells();
      verifyZeroInteractions(outputCollectorMock);
    }
  finally {
      if (gTableMap != null)       gTableMap.close();
    }
  }
  @Test @SuppressWarnings({"deprecation","unchecked"}) public void shouldCreateNewKeyAlthoughExtraKey() throws Exception {
    GroupingTableMap gTableMap=null;
    try {
      Result result=mock(Result.class);
      Reporter reporter=mock(Reporter.class);
      gTableMap=new GroupingTableMap();
      Configuration cfg=new Configuration();
      cfg.set(GroupingTableMap.GROUP_COLUMNS,"familyA:qualifierA familyB:qualifierB");
      JobConf jobConf=new JobConf(cfg);
      gTableMap.configure(jobConf);
      byte[] row={};
      List<Cell> keyValues=ImmutableList.<Cell>of(new KeyValue(row,"familyA".getBytes(),"qualifierA".getBytes(),Bytes.toBytes("1111")),new KeyValue(row,"familyB".getBytes(),"qualifierB".getBytes(),Bytes.toBytes("2222")),new KeyValue(row,"familyC".getBytes(),"qualifierC".getBytes(),Bytes.toBytes("3333")));
      when(result.listCells()).thenReturn(keyValues);
      OutputCollector<ImmutableBytesWritable,Result> outputCollectorMock=mock(OutputCollector.class);
      gTableMap.map(null,result,outputCollectorMock,reporter);
      verify(result).listCells();
      verify(outputCollectorMock,times(1)).collect(any(),any());
      verifyNoMoreInteractions(outputCollectorMock);
    }
  finally {
      if (gTableMap != null)       gTableMap.close();
    }
  }
  @Test @SuppressWarnings({"deprecation"}) public void shouldCreateNewKey() throws Exception {
    GroupingTableMap gTableMap=null;
    try {
      Result result=mock(Result.class);
      Reporter reporter=mock(Reporter.class);
      final byte[] bSeparator=Bytes.toBytes(" ");
      gTableMap=new GroupingTableMap();
      Configuration cfg=new Configuration();
      cfg.set(GroupingTableMap.GROUP_COLUMNS,"familyA:qualifierA familyB:qualifierB");
      JobConf jobConf=new JobConf(cfg);
      gTableMap.configure(jobConf);
      final byte[] firstPartKeyValue=Bytes.toBytes("34879512738945");
      final byte[] secondPartKeyValue=Bytes.toBytes("35245142671437");
      byte[] row={};
      List<Cell> cells=ImmutableList.<Cell>of(new KeyValue(row,"familyA".getBytes(),"qualifierA".getBytes(),firstPartKeyValue),new KeyValue(row,"familyB".getBytes(),"qualifierB".getBytes(),secondPartKeyValue));
      when(result.listCells()).thenReturn(cells);
      final AtomicBoolean outputCollected=new AtomicBoolean();
      OutputCollector<ImmutableBytesWritable,Result> outputCollector=new OutputCollector<ImmutableBytesWritable,Result>(){
        @Override public void collect(        ImmutableBytesWritable arg,        Result result) throws IOException {
          assertArrayEquals(org.apache.hbase.thirdparty.com.google.common.primitives.Bytes.concat(firstPartKeyValue,bSeparator,secondPartKeyValue),arg.copyBytes());
          outputCollected.set(true);
        }
      }
;
      gTableMap.map(null,result,outputCollector,reporter);
      verify(result).listCells();
      Assert.assertTrue("Output not received",outputCollected.get());
      final byte[] firstPartValue=Bytes.toBytes("238947928");
      final byte[] secondPartValue=Bytes.toBytes("4678456942345");
      byte[][] data={firstPartValue,secondPartValue};
      ImmutableBytesWritable byteWritable=gTableMap.createGroupKey(data);
      assertArrayEquals(org.apache.hbase.thirdparty.com.google.common.primitives.Bytes.concat(firstPartValue,bSeparator,secondPartValue),byteWritable.get());
    }
  finally {
      if (gTableMap != null)       gTableMap.close();
    }
  }
  @Test @SuppressWarnings({"deprecation"}) public void shouldReturnNullFromCreateGroupKey() throws Exception {
    GroupingTableMap gTableMap=null;
    try {
      gTableMap=new GroupingTableMap();
      assertNull(gTableMap.createGroupKey(null));
    }
  finally {
      if (gTableMap != null)       gTableMap.close();
    }
  }
}
