/** 
 * Start the HBase Thrift HTTP server on a random port through the command-line interface and talk to it from client side with SPNEGO security enabled.
 */
@Category({ClientTests.class,LargeTests.class}) public class TestThriftSpnegoHttpServer extends TestThriftHttpServer {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestThriftSpnegoHttpServer.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestThriftSpnegoHttpServer.class);
  private static SimpleKdcServer kdc;
  private static File serverKeytab;
  private static File spnegoServerKeytab;
  private static File clientKeytab;
  private static String clientPrincipal;
  private static String serverPrincipal;
  private static String spnegoServerPrincipal;
  private static void setupUser(  SimpleKdcServer kdc,  File keytab,  String principal) throws KrbException {
    kdc.createPrincipal(principal);
    kdc.exportPrincipal(principal,keytab);
  }
  private static SimpleKdcServer buildMiniKdc() throws Exception {
    SimpleKdcServer kdc=new SimpleKdcServer();
    final File target=new File(System.getProperty("user.dir"),"target");
    File kdcDir=new File(target,TestThriftSpnegoHttpServer.class.getSimpleName());
    if (kdcDir.exists()) {
      FileUtils.deleteDirectory(kdcDir);
    }
    kdcDir.mkdirs();
    kdc.setWorkDir(kdcDir);
    kdc.setKdcHost(HConstants.LOCALHOST);
    int kdcPort=HBaseTestingUtility.randomFreePort();
    kdc.setAllowTcp(true);
    kdc.setAllowUdp(false);
    kdc.setKdcTcpPort(kdcPort);
    LOG.info("Starting KDC server at " + HConstants.LOCALHOST + ":"+ kdcPort);
    kdc.init();
    return kdc;
  }
  private static void addSecurityConfigurations(  Configuration conf){
    KerberosName.setRules("DEFAULT");
    HBaseKerberosUtils.setKeytabFileForTesting(serverKeytab.getAbsolutePath());
    HBaseKerberosUtils.setPrincipalForTesting(serverPrincipal);
    HBaseKerberosUtils.setSecuredConfiguration(conf);
    conf.set(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY,serverPrincipal);
    conf.set(DFSConfigKeys.DFS_NAMENODE_KEYTAB_FILE_KEY,serverKeytab.getAbsolutePath());
    conf.set(DFSConfigKeys.DFS_DATANODE_USER_NAME_KEY,serverPrincipal);
    conf.set(DFSConfigKeys.DFS_DATANODE_KEYTAB_FILE_KEY,serverKeytab.getAbsolutePath());
    conf.setBoolean(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY,true);
    conf.set(DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY,spnegoServerPrincipal);
    conf.set(DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY,spnegoServerKeytab.getAbsolutePath());
    conf.setBoolean("ignore.secure.ports.for.testing",true);
    conf.setBoolean(THRIFT_SUPPORT_PROXYUSER_KEY,true);
    conf.setBoolean(USE_HTTP_CONF_KEY,true);
    conf.set("hadoop.proxyuser.hbase.hosts","*");
    conf.set("hadoop.proxyuser.hbase.groups","*");
    conf.set(THRIFT_KERBEROS_PRINCIPAL_KEY,serverPrincipal);
    conf.set(THRIFT_KEYTAB_FILE_KEY,serverKeytab.getAbsolutePath());
    conf.set(THRIFT_SPNEGO_PRINCIPAL_KEY,spnegoServerPrincipal);
    conf.set(THRIFT_SPNEGO_KEYTAB_FILE_KEY,spnegoServerKeytab.getAbsolutePath());
  }
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    final File target=new File(System.getProperty("user.dir"),"target");
    assertTrue(target.exists());
    File keytabDir=new File(target,TestThriftSpnegoHttpServer.class.getSimpleName() + "_keytabs");
    if (keytabDir.exists()) {
      FileUtils.deleteDirectory(keytabDir);
    }
    keytabDir.mkdirs();
    kdc=buildMiniKdc();
    kdc.start();
    clientPrincipal="client@" + kdc.getKdcConfig().getKdcRealm();
    clientKeytab=new File(keytabDir,clientPrincipal + ".keytab");
    setupUser(kdc,clientKeytab,clientPrincipal);
    serverPrincipal="hbase/" + HConstants.LOCALHOST + "@"+ kdc.getKdcConfig().getKdcRealm();
    serverKeytab=new File(keytabDir,serverPrincipal.replace('/','_') + ".keytab");
    setupUser(kdc,serverKeytab,serverPrincipal);
    spnegoServerPrincipal="HTTP/" + HConstants.LOCALHOST + "@"+ kdc.getKdcConfig().getKdcRealm();
    spnegoServerKeytab=new File(keytabDir,spnegoServerPrincipal.replace('/','_') + ".keytab");
    setupUser(kdc,spnegoServerKeytab,spnegoServerPrincipal);
    TEST_UTIL.getConfiguration().setBoolean(USE_HTTP_CONF_KEY,true);
    TEST_UTIL.getConfiguration().setBoolean("hbase.table.sanity.checks",false);
    addSecurityConfigurations(TEST_UTIL.getConfiguration());
    TestThriftHttpServer.setUpBeforeClass();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TestThriftHttpServer.tearDownAfterClass();
    try {
      if (null != kdc) {
        kdc.stop();
      }
    }
 catch (    Exception e) {
      LOG.info("Failed to stop mini KDC",e);
    }
  }
  @Override void talkToThriftServer(  String url,  int customHeaderSize) throws Exception {
    try (CloseableHttpClient httpClient=createHttpClient();THttpClient tHttpClient=new THttpClient(url,httpClient)){
      tHttpClient.open();
      if (customHeaderSize > 0) {
        StringBuilder sb=new StringBuilder();
        for (int i=0; i < customHeaderSize; i++) {
          sb.append("a");
        }
        tHttpClient.setCustomHeader(HttpHeaders.USER_AGENT,sb.toString());
      }
      TProtocol prot=new TBinaryProtocol(tHttpClient);
      Hbase.Client client=new Hbase.Client(prot);
      if (!tableCreated) {
        TestThriftServer.createTestTables(client);
        tableCreated=true;
      }
      TestThriftServer.checkTableList(client);
    }
   }
  private CloseableHttpClient createHttpClient() throws Exception {
    final Subject clientSubject=JaasKrbUtil.loginUsingKeytab(clientPrincipal,clientKeytab);
    final Set<Principal> clientPrincipals=clientSubject.getPrincipals();
    assertFalse(clientPrincipals.isEmpty());
    Set<KerberosTicket> privateCredentials=clientSubject.getPrivateCredentials(KerberosTicket.class);
    assertFalse(privateCredentials.isEmpty());
    KerberosTicket tgt=privateCredentials.iterator().next();
    assertNotNull(tgt);
    final String clientPrincipalName=clientPrincipals.iterator().next().getName();
    return Subject.doAs(clientSubject,new PrivilegedExceptionAction<CloseableHttpClient>(){
      @Override public CloseableHttpClient run() throws Exception {
        GSSManager gssManager=GSSManager.getInstance();
        Oid oid=new Oid("1.2.840.113554.1.2.2");
        GSSName gssClient=gssManager.createName(clientPrincipalName,GSSName.NT_USER_NAME);
        GSSCredential credential=gssManager.createCredential(gssClient,GSSCredential.DEFAULT_LIFETIME,oid,GSSCredential.INITIATE_ONLY);
        Lookup<AuthSchemeProvider> authRegistry=RegistryBuilder.<AuthSchemeProvider>create().register(AuthSchemes.SPNEGO,new SPNegoSchemeFactory(true,true)).build();
        BasicCredentialsProvider credentialsProvider=new BasicCredentialsProvider();
        credentialsProvider.setCredentials(AuthScope.ANY,new KerberosCredentials(credential));
        return HttpClients.custom().setDefaultAuthSchemeRegistry(authRegistry).setDefaultCredentialsProvider(credentialsProvider).build();
      }
    }
);
  }
}
