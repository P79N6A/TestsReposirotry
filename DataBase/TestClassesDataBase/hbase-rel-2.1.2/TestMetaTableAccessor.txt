/** 
 * Test  {@link org.apache.hadoop.hbase.MetaTableAccessor}.
 */
@Category({MiscTests.class,MediumTests.class}) @SuppressWarnings("deprecation") public class TestMetaTableAccessor {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMetaTableAccessor.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestMetaTableAccessor.class);
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static Connection connection;
  private Random random=new Random();
  @Rule public TestName name=new TestName();
  @BeforeClass public static void beforeClass() throws Exception {
    UTIL.startMiniCluster(3);
    Configuration c=new Configuration(UTIL.getConfiguration());
    c.setLong("hbase.client.pause",1000);
    c.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,10);
    connection=ConnectionFactory.createConnection(c);
  }
  @AfterClass public static void afterClass() throws Exception {
    connection.close();
    UTIL.shutdownMiniCluster();
  }
  @Test public void testIsMetaWhenAllHealthy() throws InterruptedException {
    HMaster m=UTIL.getMiniHBaseCluster().getMaster();
    assertTrue(m.waitForMetaOnline());
  }
  @Test public void testIsMetaWhenMetaGoesOffline() throws InterruptedException {
    HMaster m=UTIL.getMiniHBaseCluster().getMaster();
    int index=UTIL.getMiniHBaseCluster().getServerWithMeta();
    HRegionServer rsWithMeta=UTIL.getMiniHBaseCluster().getRegionServer(index);
    rsWithMeta.abort("TESTING");
    assertTrue(m.waitForMetaOnline());
  }
  /** 
 * Does  {@link MetaTableAccessor#getRegion(Connection,byte[])} and a writeagainst hbase:meta while its hosted server is restarted to prove our retrying works.
 */
  @Test public void testRetrying() throws IOException, InterruptedException {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    LOG.info("Started " + tableName);
    Table t=UTIL.createMultiRegionTable(tableName,HConstants.CATALOG_FAMILY);
    int regionCount=-1;
    try (RegionLocator r=UTIL.getConnection().getRegionLocator(tableName)){
      regionCount=r.getStartKeys().length;
    }
     final List<RegionInfo> regions=testGettingTableRegions(connection,tableName,regionCount);
    MetaTask reader=new MetaTask(connection,"reader"){
      @Override void metaTask() throws Throwable {
        testGetRegion(connection,regions.get(0));
        LOG.info("Read " + regions.get(0).getEncodedName());
      }
    }
;
    MetaTask writer=new MetaTask(connection,"writer"){
      @Override void metaTask() throws Throwable {
        MetaTableAccessor.addRegionToMeta(connection,regions.get(0));
        LOG.info("Wrote " + regions.get(0).getEncodedName());
      }
    }
;
    reader.start();
    writer.start();
    final long timeOut=180000;
    long startTime=System.currentTimeMillis();
    try {
      assertTrue(reader.isProgressing());
      assertTrue(writer.isProgressing());
      for (int i=0; i < 2; i++) {
        LOG.info("Restart=" + i);
        UTIL.ensureSomeRegionServersAvailable(2);
        int index=-1;
        do {
          index=UTIL.getMiniHBaseCluster().getServerWithMeta();
        }
 while (index == -1 && startTime + timeOut < System.currentTimeMillis());
        if (index != -1) {
          UTIL.getMiniHBaseCluster().abortRegionServer(index);
          UTIL.getMiniHBaseCluster().waitOnRegionServer(index);
        }
      }
      assertTrue("reader: " + reader.toString(),reader.isProgressing());
      assertTrue("writer: " + writer.toString(),writer.isProgressing());
    }
 catch (    IOException e) {
      throw e;
    }
 finally {
      reader.stop=true;
      writer.stop=true;
      reader.join();
      writer.join();
      t.close();
    }
    long exeTime=System.currentTimeMillis() - startTime;
    assertTrue("Timeout: test took " + exeTime / 1000 + " sec",exeTime < timeOut);
  }
  /** 
 * Thread that runs a MetaTableAccessor task until asked stop.
 */
abstract static class MetaTask extends Thread {
    boolean stop=false;
    int count=0;
    Throwable t=null;
    final Connection connection;
    MetaTask(    final Connection connection,    final String name){
      super(name);
      this.connection=connection;
    }
    @Override public void run(){
      try {
        while (!this.stop) {
          LOG.info("Before " + this.getName() + ", count="+ this.count);
          metaTask();
          this.count+=1;
          LOG.info("After " + this.getName() + ", count="+ this.count);
          Thread.sleep(100);
        }
      }
 catch (      Throwable t) {
        LOG.info(this.getName() + " failed",t);
        this.t=t;
      }
    }
    boolean isProgressing() throws InterruptedException {
      int currentCount=this.count;
      while (currentCount == this.count) {
        if (!isAlive())         return false;
        if (this.t != null)         return false;
        Thread.sleep(10);
      }
      return true;
    }
    @Override public String toString(){
      return "count=" + this.count + ", t="+ (this.t == null ? "null" : this.t.toString());
    }
    abstract void metaTask() throws Throwable ;
  }
  @Test public void testGetRegionsFromMetaTable() throws IOException, InterruptedException {
    List<RegionInfo> regions=new MetaTableLocator().getMetaRegions(UTIL.getZooKeeperWatcher());
    assertTrue(regions.size() >= 1);
    assertTrue(new MetaTableLocator().getMetaRegionsAndLocations(UTIL.getZooKeeperWatcher()).size() >= 1);
  }
  @Test public void testTableExists() throws IOException {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    assertFalse(MetaTableAccessor.tableExists(connection,tableName));
    UTIL.createTable(tableName,HConstants.CATALOG_FAMILY);
    assertTrue(MetaTableAccessor.tableExists(connection,tableName));
    Admin admin=UTIL.getAdmin();
    admin.disableTable(tableName);
    admin.deleteTable(tableName);
    assertFalse(MetaTableAccessor.tableExists(connection,tableName));
    assertTrue(MetaTableAccessor.tableExists(connection,TableName.META_TABLE_NAME));
    UTIL.createTable(tableName,HConstants.CATALOG_FAMILY);
    assertTrue(MetaTableAccessor.tableExists(connection,tableName));
    admin.disableTable(tableName);
    admin.deleteTable(tableName);
    assertFalse(MetaTableAccessor.tableExists(connection,tableName));
  }
  @Test public void testGetRegion() throws IOException, InterruptedException {
    final String name=this.name.getMethodName();
    LOG.info("Started " + name);
    Pair<RegionInfo,ServerName> pair=MetaTableAccessor.getRegion(connection,Bytes.toBytes("nonexistent-region"));
    assertNull(pair);
    LOG.info("Finished " + name);
  }
  @Test public void testScanMetaForTable() throws IOException, InterruptedException {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    LOG.info("Started " + tableName);
    UTIL.createTable(tableName,HConstants.CATALOG_FAMILY);
    TableName greaterName=TableName.valueOf("testScanMetaForTablf");
    UTIL.createTable(greaterName,HConstants.CATALOG_FAMILY);
    assertEquals(1,MetaTableAccessor.getTableRegions(connection,tableName).size());
    assertEquals(1,MetaTableAccessor.getTableRegions(connection,greaterName).size());
  }
  private static List<RegionInfo> testGettingTableRegions(  final Connection connection,  final TableName name,  final int regionCount) throws IOException, InterruptedException {
    List<RegionInfo> regions=MetaTableAccessor.getTableRegions(connection,name);
    assertEquals(regionCount,regions.size());
    Pair<RegionInfo,ServerName> pair=MetaTableAccessor.getRegion(connection,regions.get(0).getRegionName());
    assertEquals(regions.get(0).getEncodedName(),pair.getFirst().getEncodedName());
    return regions;
  }
  private static void testGetRegion(  final Connection connection,  final RegionInfo region) throws IOException, InterruptedException {
    Pair<RegionInfo,ServerName> pair=MetaTableAccessor.getRegion(connection,region.getRegionName());
    assertEquals(region.getEncodedName(),pair.getFirst().getEncodedName());
  }
  @Test public void testParseReplicaIdFromServerColumn(){
    String column1=HConstants.SERVER_QUALIFIER_STR;
    assertEquals(0,MetaTableAccessor.parseReplicaIdFromServerColumn(Bytes.toBytes(column1)));
    String column2=column1 + MetaTableAccessor.META_REPLICA_ID_DELIMITER;
    assertEquals(-1,MetaTableAccessor.parseReplicaIdFromServerColumn(Bytes.toBytes(column2)));
    String column3=column2 + "00";
    assertEquals(-1,MetaTableAccessor.parseReplicaIdFromServerColumn(Bytes.toBytes(column3)));
    String column4=column3 + "2A";
    assertEquals(42,MetaTableAccessor.parseReplicaIdFromServerColumn(Bytes.toBytes(column4)));
    String column5=column4 + "2A";
    assertEquals(-1,MetaTableAccessor.parseReplicaIdFromServerColumn(Bytes.toBytes(column5)));
    String column6=HConstants.STARTCODE_QUALIFIER_STR;
    assertEquals(-1,MetaTableAccessor.parseReplicaIdFromServerColumn(Bytes.toBytes(column6)));
  }
  @Test public void testMetaReaderGetColumnMethods(){
    Assert.assertArrayEquals(HConstants.SERVER_QUALIFIER,MetaTableAccessor.getServerColumn(0));
    Assert.assertArrayEquals(Bytes.toBytes(HConstants.SERVER_QUALIFIER_STR + MetaTableAccessor.META_REPLICA_ID_DELIMITER + "002A"),MetaTableAccessor.getServerColumn(42));
    Assert.assertArrayEquals(HConstants.STARTCODE_QUALIFIER,MetaTableAccessor.getStartCodeColumn(0));
    Assert.assertArrayEquals(Bytes.toBytes(HConstants.STARTCODE_QUALIFIER_STR + MetaTableAccessor.META_REPLICA_ID_DELIMITER + "002A"),MetaTableAccessor.getStartCodeColumn(42));
    Assert.assertArrayEquals(HConstants.SEQNUM_QUALIFIER,MetaTableAccessor.getSeqNumColumn(0));
    Assert.assertArrayEquals(Bytes.toBytes(HConstants.SEQNUM_QUALIFIER_STR + MetaTableAccessor.META_REPLICA_ID_DELIMITER + "002A"),MetaTableAccessor.getSeqNumColumn(42));
  }
  @Test public void testMetaLocationsForRegionReplicas() throws IOException {
    ServerName serverName0=ServerName.valueOf("foo",60010,random.nextLong());
    ServerName serverName1=ServerName.valueOf("bar",60010,random.nextLong());
    ServerName serverName100=ServerName.valueOf("baz",60010,random.nextLong());
    long regionId=System.currentTimeMillis();
    RegionInfo primary=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(HConstants.EMPTY_START_ROW).setEndKey(HConstants.EMPTY_END_ROW).setSplit(false).setRegionId(regionId).setReplicaId(0).build();
    RegionInfo replica1=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(HConstants.EMPTY_START_ROW).setEndKey(HConstants.EMPTY_END_ROW).setSplit(false).setRegionId(regionId).setReplicaId(1).build();
    RegionInfo replica100=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(HConstants.EMPTY_START_ROW).setEndKey(HConstants.EMPTY_END_ROW).setSplit(false).setRegionId(regionId).setReplicaId(100).build();
    long seqNum0=random.nextLong();
    long seqNum1=random.nextLong();
    long seqNum100=random.nextLong();
    try (Table meta=MetaTableAccessor.getMetaHTable(connection)){
      MetaTableAccessor.updateRegionLocation(connection,primary,serverName0,seqNum0,EnvironmentEdgeManager.currentTime());
      assertMetaLocation(meta,primary.getRegionName(),serverName0,seqNum0,0,true);
      MetaTableAccessor.updateRegionLocation(connection,replica1,serverName1,seqNum1,EnvironmentEdgeManager.currentTime());
      assertMetaLocation(meta,primary.getRegionName(),serverName0,seqNum0,0,true);
      assertMetaLocation(meta,primary.getRegionName(),serverName1,seqNum1,1,true);
      MetaTableAccessor.updateRegionLocation(connection,replica100,serverName100,seqNum100,EnvironmentEdgeManager.currentTime());
      assertMetaLocation(meta,primary.getRegionName(),serverName0,seqNum0,0,true);
      assertMetaLocation(meta,primary.getRegionName(),serverName1,seqNum1,1,true);
      assertMetaLocation(meta,primary.getRegionName(),serverName100,seqNum100,100,true);
    }
   }
  public static void assertMetaLocation(  Table meta,  byte[] row,  ServerName serverName,  long seqNum,  int replicaId,  boolean checkSeqNum) throws IOException {
    Get get=new Get(row);
    Result result=meta.get(get);
    assertTrue(Bytes.equals(result.getValue(HConstants.CATALOG_FAMILY,MetaTableAccessor.getServerColumn(replicaId)),Bytes.toBytes(serverName.getHostAndPort())));
    assertTrue(Bytes.equals(result.getValue(HConstants.CATALOG_FAMILY,MetaTableAccessor.getStartCodeColumn(replicaId)),Bytes.toBytes(serverName.getStartcode())));
    if (checkSeqNum) {
      assertTrue(Bytes.equals(result.getValue(HConstants.CATALOG_FAMILY,MetaTableAccessor.getSeqNumColumn(replicaId)),Bytes.toBytes(seqNum)));
    }
  }
  public static void assertEmptyMetaLocation(  Table meta,  byte[] row,  int replicaId) throws IOException {
    Get get=new Get(row);
    Result result=meta.get(get);
    Cell serverCell=result.getColumnLatestCell(HConstants.CATALOG_FAMILY,MetaTableAccessor.getServerColumn(replicaId));
    Cell startCodeCell=result.getColumnLatestCell(HConstants.CATALOG_FAMILY,MetaTableAccessor.getStartCodeColumn(replicaId));
    assertNotNull(serverCell);
    assertNotNull(startCodeCell);
    assertEquals(0,serverCell.getValueLength());
    assertEquals(0,startCodeCell.getValueLength());
  }
  @Test public void testMetaLocationForRegionReplicasIsAddedAtTableCreation() throws IOException {
    long regionId=System.currentTimeMillis();
    RegionInfo primary=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(HConstants.EMPTY_START_ROW).setEndKey(HConstants.EMPTY_END_ROW).setSplit(false).setRegionId(regionId).setReplicaId(0).build();
    Table meta=MetaTableAccessor.getMetaHTable(connection);
    try {
      List<RegionInfo> regionInfos=Lists.newArrayList(primary);
      MetaTableAccessor.addRegionsToMeta(connection,regionInfos,3);
      assertEmptyMetaLocation(meta,primary.getRegionName(),1);
      assertEmptyMetaLocation(meta,primary.getRegionName(),2);
    }
  finally {
      meta.close();
    }
  }
  @Test public void testMetaLocationForRegionReplicasIsAddedAtRegionSplit() throws IOException {
    long regionId=System.currentTimeMillis();
    ServerName serverName0=ServerName.valueOf("foo",60010,random.nextLong());
    RegionInfo parent=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(HConstants.EMPTY_START_ROW).setEndKey(HConstants.EMPTY_END_ROW).setSplit(false).setRegionId(regionId).setReplicaId(0).build();
    RegionInfo splitA=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(HConstants.EMPTY_START_ROW).setEndKey(Bytes.toBytes("a")).setSplit(false).setRegionId(regionId + 1).setReplicaId(0).build();
    RegionInfo splitB=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(Bytes.toBytes("a")).setEndKey(HConstants.EMPTY_END_ROW).setSplit(false).setRegionId(regionId + 1).setReplicaId(0).build();
    try (Table meta=MetaTableAccessor.getMetaHTable(connection)){
      List<RegionInfo> regionInfos=Lists.newArrayList(parent);
      MetaTableAccessor.addRegionsToMeta(connection,regionInfos,3);
      MetaTableAccessor.splitRegion(connection,parent,-1L,splitA,splitB,serverName0,3);
      assertEmptyMetaLocation(meta,splitA.getRegionName(),1);
      assertEmptyMetaLocation(meta,splitA.getRegionName(),2);
      assertEmptyMetaLocation(meta,splitB.getRegionName(),1);
      assertEmptyMetaLocation(meta,splitB.getRegionName(),2);
    }
   }
  @Test public void testMetaLocationForRegionReplicasIsAddedAtRegionMerge() throws IOException {
    long regionId=System.currentTimeMillis();
    ServerName serverName0=ServerName.valueOf("foo",60010,random.nextLong());
    RegionInfo parentA=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(Bytes.toBytes("a")).setEndKey(HConstants.EMPTY_END_ROW).setSplit(false).setRegionId(regionId).setReplicaId(0).build();
    RegionInfo parentB=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(HConstants.EMPTY_START_ROW).setEndKey(Bytes.toBytes("a")).setSplit(false).setRegionId(regionId).setReplicaId(0).build();
    RegionInfo merged=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(HConstants.EMPTY_START_ROW).setEndKey(HConstants.EMPTY_END_ROW).setSplit(false).setRegionId(regionId + 1).setReplicaId(0).build();
    try (Table meta=MetaTableAccessor.getMetaHTable(connection)){
      List<RegionInfo> regionInfos=Lists.newArrayList(parentA,parentB);
      MetaTableAccessor.addRegionsToMeta(connection,regionInfos,3);
      MetaTableAccessor.mergeRegions(connection,merged,parentA,-1L,parentB,-1L,serverName0,3);
      assertEmptyMetaLocation(meta,merged.getRegionName(),1);
      assertEmptyMetaLocation(meta,merged.getRegionName(),2);
    }
   }
  @Test public void testMetaScanner() throws Exception {
    LOG.info("Starting " + name.getMethodName());
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final byte[] FAMILY=Bytes.toBytes("family");
    final byte[][] SPLIT_KEYS=new byte[][]{Bytes.toBytes("region_a"),Bytes.toBytes("region_b")};
    UTIL.createTable(tableName,FAMILY,SPLIT_KEYS);
    Table table=connection.getTable(tableName);
    UTIL.countRows(table);
    MetaTableAccessor.Visitor visitor=mock(MetaTableAccessor.Visitor.class);
    doReturn(true).when(visitor).visit((Result)anyObject());
    MetaTableAccessor.scanMetaForTableRegions(connection,visitor,tableName);
    verify(visitor,times(3)).visit((Result)anyObject());
    reset(visitor);
    doReturn(true).when(visitor).visit((Result)anyObject());
    MetaTableAccessor.scanMeta(connection,visitor,tableName,null,1000);
    verify(visitor,times(3)).visit((Result)anyObject());
    reset(visitor);
    doReturn(true).when(visitor).visit((Result)anyObject());
    MetaTableAccessor.scanMeta(connection,visitor,tableName,Bytes.toBytes("region_ac"),1000);
    verify(visitor,times(2)).visit((Result)anyObject());
    reset(visitor);
    doReturn(true).when(visitor).visit((Result)anyObject());
    MetaTableAccessor.scanMeta(connection,visitor,tableName,Bytes.toBytes("region_ac"),1);
    verify(visitor,times(1)).visit((Result)anyObject());
    table.close();
  }
  /** 
 * Tests whether maximum of masters system time versus RSs local system time is used
 */
  @Test public void testMastersSystemTimeIsUsedInUpdateLocations() throws IOException {
    long regionId=System.currentTimeMillis();
    RegionInfo regionInfo=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(HConstants.EMPTY_START_ROW).setEndKey(HConstants.EMPTY_END_ROW).setSplit(false).setRegionId(regionId).setReplicaId(0).build();
    ServerName sn=ServerName.valueOf("bar",0,0);
    try (Table meta=MetaTableAccessor.getMetaHTable(connection)){
      List<RegionInfo> regionInfos=Lists.newArrayList(regionInfo);
      MetaTableAccessor.addRegionsToMeta(connection,regionInfos,1);
      long masterSystemTime=EnvironmentEdgeManager.currentTime() + 123456789;
      MetaTableAccessor.updateRegionLocation(connection,regionInfo,sn,1,masterSystemTime);
      Get get=new Get(regionInfo.getRegionName());
      Result result=meta.get(get);
      Cell serverCell=result.getColumnLatestCell(HConstants.CATALOG_FAMILY,MetaTableAccessor.getServerColumn(0));
      Cell startCodeCell=result.getColumnLatestCell(HConstants.CATALOG_FAMILY,MetaTableAccessor.getStartCodeColumn(0));
      Cell seqNumCell=result.getColumnLatestCell(HConstants.CATALOG_FAMILY,MetaTableAccessor.getSeqNumColumn(0));
      assertNotNull(serverCell);
      assertNotNull(startCodeCell);
      assertNotNull(seqNumCell);
      assertTrue(serverCell.getValueLength() > 0);
      assertTrue(startCodeCell.getValueLength() > 0);
      assertTrue(seqNumCell.getValueLength() > 0);
      assertEquals(masterSystemTime,serverCell.getTimestamp());
      assertEquals(masterSystemTime,startCodeCell.getTimestamp());
      assertEquals(masterSystemTime,seqNumCell.getTimestamp());
    }
   }
  @Test public void testMastersSystemTimeIsUsedInMergeRegions() throws IOException {
    long regionId=System.currentTimeMillis();
    RegionInfo regionInfoA=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(HConstants.EMPTY_START_ROW).setEndKey(new byte[]{'a'}).setSplit(false).setRegionId(regionId).setReplicaId(0).build();
    RegionInfo regionInfoB=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(new byte[]{'a'}).setEndKey(HConstants.EMPTY_END_ROW).setSplit(false).setRegionId(regionId).setReplicaId(0).build();
    RegionInfo mergedRegionInfo=RegionInfoBuilder.newBuilder(TableName.valueOf(name.getMethodName())).setStartKey(HConstants.EMPTY_START_ROW).setEndKey(HConstants.EMPTY_END_ROW).setSplit(false).setRegionId(regionId).setReplicaId(0).build();
    ServerName sn=ServerName.valueOf("bar",0,0);
    try (Table meta=MetaTableAccessor.getMetaHTable(connection)){
      List<RegionInfo> regionInfos=Lists.newArrayList(regionInfoA,regionInfoB);
      MetaTableAccessor.addRegionsToMeta(connection,regionInfos,1);
      long serverNameTime=EnvironmentEdgeManager.currentTime() + 100000000;
      long masterSystemTime=EnvironmentEdgeManager.currentTime() + 123456789;
      MetaTableAccessor.updateRegionLocation(connection,regionInfoA,sn,1,serverNameTime);
      Get get=new Get(mergedRegionInfo.getRegionName());
      Result result=meta.get(get);
      Cell serverCell=result.getColumnLatestCell(HConstants.CATALOG_FAMILY,MetaTableAccessor.getServerColumn(0));
      assertNotNull(serverCell);
      assertEquals(serverNameTime,serverCell.getTimestamp());
      ManualEnvironmentEdge edge=new ManualEnvironmentEdge();
      edge.setValue(masterSystemTime);
      EnvironmentEdgeManager.injectEdge(edge);
      try {
        MetaTableAccessor.mergeRegions(connection,mergedRegionInfo,regionInfoA,-1L,regionInfoB,-1L,sn,1);
      }
  finally {
        EnvironmentEdgeManager.reset();
      }
      result=meta.get(get);
      serverCell=result.getColumnLatestCell(HConstants.CATALOG_FAMILY,MetaTableAccessor.getServerColumn(0));
      Cell startCodeCell=result.getColumnLatestCell(HConstants.CATALOG_FAMILY,MetaTableAccessor.getStartCodeColumn(0));
      Cell seqNumCell=result.getColumnLatestCell(HConstants.CATALOG_FAMILY,MetaTableAccessor.getSeqNumColumn(0));
      assertNull(serverCell);
      assertNull(startCodeCell);
      assertNull(seqNumCell);
    }
   }
public static class SpyingRpcSchedulerFactory extends SimpleRpcSchedulerFactory {
    @Override public RpcScheduler create(    Configuration conf,    PriorityFunction priority,    Abortable server){
      final RpcScheduler delegate=super.create(conf,priority,server);
      return new SpyingRpcScheduler(delegate);
    }
  }
public static class SpyingRpcScheduler extends DelegatingRpcScheduler {
    long numPriorityCalls=0;
    public SpyingRpcScheduler(    RpcScheduler delegate){
      super(delegate);
    }
    @Override public boolean dispatch(    CallRunner task) throws IOException, InterruptedException {
      int priority=task.getRpcCall().getPriority();
      if (priority > HConstants.QOS_THRESHOLD) {
        numPriorityCalls++;
      }
      return super.dispatch(task);
    }
  }
  @Test public void testMetaUpdatesGoToPriorityQueue() throws Exception {
    Configuration c=UTIL.getConfiguration();
    c.set(RSRpcServices.REGION_SERVER_RPC_SCHEDULER_FACTORY_CLASS,SpyingRpcSchedulerFactory.class.getName());
    afterClass();
    beforeClass();
    final TableName tableName=TableName.valueOf(name.getMethodName());
    try (Admin admin=connection.getAdmin();RegionLocator rl=connection.getRegionLocator(tableName)){
      UTIL.createTable(tableName,"cf1");
      HRegionLocation loc=rl.getAllRegionLocations().get(0);
      RegionInfo parent=loc.getRegionInfo();
      long rid=1000;
      byte[] splitKey=Bytes.toBytes("a");
      RegionInfo splitA=RegionInfoBuilder.newBuilder(parent.getTable()).setStartKey(parent.getStartKey()).setEndKey(splitKey).setSplit(false).setRegionId(rid).build();
      RegionInfo splitB=RegionInfoBuilder.newBuilder(parent.getTable()).setStartKey(splitKey).setEndKey(parent.getEndKey()).setSplit(false).setRegionId(rid).build();
      MiniHBaseCluster cluster=UTIL.getMiniHBaseCluster();
      int rsIndex=cluster.getServerWithMeta();
      HRegionServer rs;
      if (rsIndex >= 0) {
        rs=cluster.getRegionServer(rsIndex);
      }
 else {
        rs=cluster.getMaster();
      }
      SpyingRpcScheduler scheduler=(SpyingRpcScheduler)rs.getRpcServer().getScheduler();
      long prevCalls=scheduler.numPriorityCalls;
      MetaTableAccessor.splitRegion(connection,parent,-1L,splitA,splitB,loc.getServerName(),1);
      assertTrue(prevCalls < scheduler.numPriorityCalls);
    }
   }
  @Test public void testEmptyMetaDaughterLocationDuringSplit() throws IOException {
    long regionId=System.currentTimeMillis();
    ServerName serverName0=ServerName.valueOf("foo",60010,random.nextLong());
    RegionInfo parent=RegionInfoBuilder.newBuilder(TableName.valueOf("table_foo")).setStartKey(HConstants.EMPTY_START_ROW).setEndKey(HConstants.EMPTY_END_ROW).setSplit(false).setRegionId(regionId).setReplicaId(0).build();
    RegionInfo splitA=RegionInfoBuilder.newBuilder(TableName.valueOf("table_foo")).setStartKey(HConstants.EMPTY_START_ROW).setEndKey(Bytes.toBytes("a")).setSplit(false).setRegionId(regionId + 1).setReplicaId(0).build();
    RegionInfo splitB=RegionInfoBuilder.newBuilder(TableName.valueOf("table_foo")).setStartKey(Bytes.toBytes("a")).setEndKey(HConstants.EMPTY_END_ROW).setSplit(false).setRegionId(regionId + 1).setReplicaId(0).build();
    Table meta=MetaTableAccessor.getMetaHTable(connection);
    try {
      List<RegionInfo> regionInfos=Lists.newArrayList(parent);
      MetaTableAccessor.addRegionsToMeta(connection,regionInfos,3);
      MetaTableAccessor.splitRegion(connection,parent,-1L,splitA,splitB,serverName0,3);
      Get get1=new Get(splitA.getRegionName());
      Result resultA=meta.get(get1);
      Cell serverCellA=resultA.getColumnLatestCell(HConstants.CATALOG_FAMILY,MetaTableAccessor.getServerColumn(splitA.getReplicaId()));
      Cell startCodeCellA=resultA.getColumnLatestCell(HConstants.CATALOG_FAMILY,MetaTableAccessor.getStartCodeColumn(splitA.getReplicaId()));
      assertNull(serverCellA);
      assertNull(startCodeCellA);
      Get get2=new Get(splitA.getRegionName());
      Result resultB=meta.get(get2);
      Cell serverCellB=resultB.getColumnLatestCell(HConstants.CATALOG_FAMILY,MetaTableAccessor.getServerColumn(splitB.getReplicaId()));
      Cell startCodeCellB=resultB.getColumnLatestCell(HConstants.CATALOG_FAMILY,MetaTableAccessor.getStartCodeColumn(splitB.getReplicaId()));
      assertNull(serverCellB);
      assertNull(startCodeCellB);
    }
  finally {
      if (meta != null) {
        meta.close();
      }
    }
  }
}
