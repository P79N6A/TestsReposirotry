/** 
 * An override that opens up the updateTransition method inside in AssignProcedure so can call it below directly in test and mess with targetServer. Used by test {@link #testTargetServerBeingNulledOnUs()}.
 */
public static class TargetServerBeingNulledOnUsAssignProcedure extends AssignProcedure {
  public final AtomicBoolean addToRemoteDispatcherWasCalled=new AtomicBoolean(false);
  public final AtomicBoolean remoteCallFailedWasCalled=new AtomicBoolean(false);
  private final RegionStates.RegionStateNode rsn;
  public TargetServerBeingNulledOnUsAssignProcedure(  RegionInfo regionInfo,  RegionStates.RegionStateNode rsn){
    super(regionInfo);
    this.rsn=rsn;
  }
  /** 
 * Override so can change access from protected to public.
 */
  @Override public boolean updateTransition(  MasterProcedureEnv env,  RegionStates.RegionStateNode regionNode) throws IOException, ProcedureSuspendedException {
    return super.updateTransition(env,regionNode);
  }
  @Override protected boolean addToRemoteDispatcher(  MasterProcedureEnv env,  ServerName targetServer){
    boolean b=super.addToRemoteDispatcher(env,null);
    assertFalse(b);
    this.addToRemoteDispatcherWasCalled.set(true);
    return b;
  }
  @Override public RegionStates.RegionStateNode getRegionState(  MasterProcedureEnv env){
    return this.rsn;
  }
  @Override public boolean remoteCallFailed(  final MasterProcedureEnv env,  final ServerName serverName,  final IOException exception){
    this.remoteCallFailedWasCalled.set(true);
    return true;
  }
}
