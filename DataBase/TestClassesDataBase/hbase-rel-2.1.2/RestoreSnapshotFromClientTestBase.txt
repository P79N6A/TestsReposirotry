/** 
 * Base class for testing restore snapshot
 */
public class RestoreSnapshotFromClientTestBase {
  protected final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  protected final byte[] FAMILY=Bytes.toBytes("cf");
  protected final byte[] TEST_FAMILY2=Bytes.toBytes("cf2");
  protected TableName tableName;
  protected byte[] emptySnapshot;
  protected byte[] snapshotName0;
  protected byte[] snapshotName1;
  protected byte[] snapshotName2;
  protected int snapshot0Rows;
  protected int snapshot1Rows;
  protected Admin admin;
  @Rule public TestName name=new TestName();
  @BeforeClass public static void setupCluster() throws Exception {
    setupConf(TEST_UTIL.getConfiguration());
    TEST_UTIL.startMiniCluster(3);
  }
  protected static void setupConf(  Configuration conf){
    TEST_UTIL.getConfiguration().setBoolean(SnapshotManager.HBASE_SNAPSHOT_ENABLED,true);
    TEST_UTIL.getConfiguration().setInt("hbase.hstore.compactionThreshold",10);
    TEST_UTIL.getConfiguration().setInt("hbase.regionserver.msginterval",100);
    TEST_UTIL.getConfiguration().setInt("hbase.client.pause",250);
    TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,6);
    TEST_UTIL.getConfiguration().setBoolean("hbase.master.enabletable.roundrobin",true);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  /** 
 * Initialize the tests with a table filled with some data and two snapshots (snapshotName0, snapshotName1) of different states. The tableName, snapshotNames and the number of rows in the snapshot are initialized.
 */
  @Before public void setup() throws Exception {
    this.admin=TEST_UTIL.getAdmin();
    long tid=System.currentTimeMillis();
    tableName=TableName.valueOf(getValidMethodName() + "-" + tid);
    emptySnapshot=Bytes.toBytes("emptySnaptb-" + tid);
    snapshotName0=Bytes.toBytes("snaptb0-" + tid);
    snapshotName1=Bytes.toBytes("snaptb1-" + tid);
    snapshotName2=Bytes.toBytes("snaptb2-" + tid);
    createTable();
    admin.disableTable(tableName);
    admin.snapshot(emptySnapshot,tableName);
    admin.enableTable(tableName);
    SnapshotTestingUtils.loadData(TEST_UTIL,tableName,500,FAMILY);
    try (Table table=TEST_UTIL.getConnection().getTable(tableName)){
      snapshot0Rows=countRows(table);
    }
     admin.disableTable(tableName);
    admin.snapshot(snapshotName0,tableName);
    admin.enableTable(tableName);
    SnapshotTestingUtils.loadData(TEST_UTIL,tableName,500,FAMILY);
    try (Table table=TEST_UTIL.getConnection().getTable(tableName)){
      snapshot1Rows=countRows(table);
    }
   }
  protected void createTable() throws Exception {
    SnapshotTestingUtils.createTable(TEST_UTIL,tableName,getNumReplicas(),FAMILY);
  }
  @After public void tearDown() throws Exception {
    TEST_UTIL.deleteTable(tableName);
    SnapshotTestingUtils.deleteAllSnapshots(TEST_UTIL.getAdmin());
    SnapshotTestingUtils.deleteArchiveDirectory(TEST_UTIL);
  }
  protected int getNumReplicas(){
    return 1;
  }
  protected int countRows(  Table table,  byte[]... families) throws IOException {
    return TEST_UTIL.countRows(table,families);
  }
  protected void verifyRowCount(  HBaseTestingUtility util,  TableName tableName,  long expectedRows) throws IOException {
    SnapshotTestingUtils.verifyRowCount(util,tableName,expectedRows);
  }
  protected final void splitRegion(  RegionInfo regionInfo) throws IOException {
    byte[][] splitPoints=Bytes.split(regionInfo.getStartKey(),regionInfo.getEndKey(),1);
    admin.split(regionInfo.getTable(),splitPoints[1]);
  }
  protected final String getValidMethodName(){
    return name.getMethodName().replaceAll("[^0-9A-Za-z_]","_");
  }
}
