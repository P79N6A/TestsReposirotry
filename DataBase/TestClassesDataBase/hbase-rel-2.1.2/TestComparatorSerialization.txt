@Category({FilterTests.class,SmallTests.class}) public class TestComparatorSerialization {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestComparatorSerialization.class);
  @Test public void testBinaryComparator() throws Exception {
    BinaryComparator binaryComparator=new BinaryComparator(Bytes.toBytes("binaryComparator"));
    assertTrue(binaryComparator.areSerializedFieldsEqual(ProtobufUtil.toComparator(ProtobufUtil.toComparator(binaryComparator))));
  }
  @Test public void testBinaryPrefixComparator() throws Exception {
    BinaryPrefixComparator binaryPrefixComparator=new BinaryPrefixComparator(Bytes.toBytes("binaryPrefixComparator"));
    assertTrue(binaryPrefixComparator.areSerializedFieldsEqual(ProtobufUtil.toComparator(ProtobufUtil.toComparator(binaryPrefixComparator))));
  }
  @Test public void testBitComparator() throws Exception {
    BitComparator bitComparator=new BitComparator(Bytes.toBytes("bitComparator"),BitComparator.BitwiseOp.XOR);
    assertTrue(bitComparator.areSerializedFieldsEqual(ProtobufUtil.toComparator(ProtobufUtil.toComparator(bitComparator))));
  }
  @Test public void testNullComparator() throws Exception {
    NullComparator nullComparator=new NullComparator();
    assertTrue(nullComparator.areSerializedFieldsEqual(ProtobufUtil.toComparator(ProtobufUtil.toComparator(nullComparator))));
  }
  @Test public void testRegexStringComparator() throws Exception {
    RegexStringComparator regexStringComparator=new RegexStringComparator(".+-2");
    assertTrue(regexStringComparator.areSerializedFieldsEqual(ProtobufUtil.toComparator(ProtobufUtil.toComparator(regexStringComparator))));
    try {
      new RegexStringComparator("regex",Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
    }
 catch (    Throwable t) {
      assertNull("Exception occurred while created the RegexStringComparator object",t);
    }
  }
  @Test public void testSubstringComparator() throws Exception {
    SubstringComparator substringComparator=new SubstringComparator("substr");
    assertTrue(substringComparator.areSerializedFieldsEqual(ProtobufUtil.toComparator(ProtobufUtil.toComparator(substringComparator))));
  }
  @Test public void testBigDecimalComparator() throws Exception {
    BigDecimal bigDecimal=new BigDecimal(Double.MIN_VALUE);
    BigDecimalComparator bigDecimalComparator=new BigDecimalComparator(bigDecimal);
    assertTrue(bigDecimalComparator.areSerializedFieldsEqual(ProtobufUtil.toComparator(ProtobufUtil.toComparator(bigDecimalComparator))));
  }
}
