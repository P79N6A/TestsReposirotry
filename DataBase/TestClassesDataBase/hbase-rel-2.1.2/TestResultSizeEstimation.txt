@Category(LargeTests.class) public class TestResultSizeEstimation {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestResultSizeEstimation.class);
  final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  final static int TAG_DATA_SIZE=2048;
  final static int SCANNER_DATA_LIMIT=TAG_DATA_SIZE + 256;
  @Rule public TestName name=new TestName();
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    Configuration conf=TEST_UTIL.getConfiguration();
    conf.setInt(HFile.FORMAT_VERSION_KEY,HFile.MIN_FORMAT_VERSION_WITH_TAGS);
    conf.setLong(HConstants.HBASE_CLIENT_SCANNER_MAX_RESULT_SIZE_KEY,SCANNER_DATA_LIMIT);
    conf.setBoolean(ScannerCallable.LOG_SCANNER_ACTIVITY,true);
    TEST_UTIL.startMiniCluster(1);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testResultSizeEstimation() throws Exception {
    byte[] ROW1=Bytes.toBytes("testRow1");
    byte[] ROW2=Bytes.toBytes("testRow2");
    byte[] FAMILY=Bytes.toBytes("testFamily");
    byte[] QUALIFIER=Bytes.toBytes("testQualifier");
    byte[] VALUE=Bytes.toBytes("testValue");
    final TableName tableName=TableName.valueOf(name.getMethodName());
    byte[][] FAMILIES=new byte[][]{FAMILY};
    Table table=TEST_UTIL.createTable(tableName,FAMILIES);
    Put p=new Put(ROW1);
    p.add(new KeyValue(ROW1,FAMILY,QUALIFIER,Long.MAX_VALUE,VALUE));
    table.put(p);
    p=new Put(ROW2);
    p.add(new KeyValue(ROW2,FAMILY,QUALIFIER,Long.MAX_VALUE,VALUE));
    table.put(p);
    Scan s=new Scan();
    s.setMaxResultSize(SCANNER_DATA_LIMIT);
    ResultScanner rs=table.getScanner(s);
    int count=0;
    while (rs.next() != null) {
      count++;
    }
    assertEquals("Result size estimation did not work properly",2,count);
    rs.close();
    table.close();
  }
  @Test public void testResultSizeEstimationWithTags() throws Exception {
    byte[] ROW1=Bytes.toBytes("testRow1");
    byte[] ROW2=Bytes.toBytes("testRow2");
    byte[] FAMILY=Bytes.toBytes("testFamily");
    byte[] QUALIFIER=Bytes.toBytes("testQualifier");
    byte[] VALUE=Bytes.toBytes("testValue");
    final TableName tableName=TableName.valueOf(name.getMethodName());
    byte[][] FAMILIES=new byte[][]{FAMILY};
    Table table=TEST_UTIL.createTable(tableName,FAMILIES);
    Put p=new Put(ROW1);
    p.add(new KeyValue(ROW1,FAMILY,QUALIFIER,Long.MAX_VALUE,VALUE,new Tag[]{new ArrayBackedTag((byte)1,new byte[TAG_DATA_SIZE])}));
    table.put(p);
    p=new Put(ROW2);
    p.add(new KeyValue(ROW2,FAMILY,QUALIFIER,Long.MAX_VALUE,VALUE,new Tag[]{new ArrayBackedTag((byte)1,new byte[TAG_DATA_SIZE])}));
    table.put(p);
    Scan s=new Scan();
    s.setMaxResultSize(SCANNER_DATA_LIMIT);
    ResultScanner rs=table.getScanner(s);
    int count=0;
    while (rs.next() != null) {
      count++;
    }
    assertEquals("Result size estimation did not work properly",2,count);
    rs.close();
    table.close();
  }
}
