/** 
 * This testcase is used to ensure that the compaction marker will fail a compaction if the RS is already dead. It can not eliminate FNFE when scanning but it does reduce the possibility a lot.
 */
@RunWith(Parameterized.class) @Category({RegionServerTests.class,LargeTests.class}) public class TestCompactionInDeadRegionServer {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCompactionInDeadRegionServer.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestCompactionInDeadRegionServer.class);
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static final TableName TABLE_NAME=TableName.valueOf("test");
  private static final byte[] CF=Bytes.toBytes("cf");
  private static final byte[] CQ=Bytes.toBytes("cq");
public static final class IgnoreYouAreDeadRS extends HRegionServer {
    public IgnoreYouAreDeadRS(    Configuration conf) throws IOException, InterruptedException {
      super(conf);
    }
    @Override protected void tryRegionServerReport(    long reportStartTime,    long reportEndTime) throws IOException {
      try {
        super.tryRegionServerReport(reportStartTime,reportEndTime);
      }
 catch (      YouAreDeadException e) {
      }
    }
  }
  @Parameter public Class<? extends WALProvider> walProvider;
  @Parameters(name="{index}: wal={0}") public static List<Object[]> params(){
    return Arrays.asList(new Object[]{FSHLogProvider.class},new Object[]{AsyncFSWALProvider.class});
  }
  @Before public void setUp() throws Exception {
    UTIL.getConfiguration().setClass(WALFactory.WAL_PROVIDER,walProvider,WALProvider.class);
    UTIL.getConfiguration().setInt(HConstants.ZK_SESSION_TIMEOUT,2000);
    UTIL.getConfiguration().setClass(HConstants.REGION_SERVER_IMPL,IgnoreYouAreDeadRS.class,HRegionServer.class);
    UTIL.startMiniCluster(2);
    Table table=UTIL.createTable(TABLE_NAME,CF);
    for (int i=0; i < 10; i++) {
      table.put(new Put(Bytes.toBytes(i)).addColumn(CF,CQ,Bytes.toBytes(i)));
    }
    UTIL.getAdmin().flush(TABLE_NAME);
    for (int i=10; i < 20; i++) {
      table.put(new Put(Bytes.toBytes(i)).addColumn(CF,CQ,Bytes.toBytes(i)));
    }
    UTIL.getAdmin().flush(TABLE_NAME);
  }
  @After public void tearDown() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  @Test public void test() throws Exception {
    HRegionServer regionSvr=UTIL.getRSForFirstRegionInTable(TABLE_NAME);
    HRegion region=regionSvr.getRegions(TABLE_NAME).get(0);
    String regName=region.getRegionInfo().getEncodedName();
    List<HRegion> metaRegs=regionSvr.getRegions(TableName.META_TABLE_NAME);
    if (metaRegs != null && !metaRegs.isEmpty()) {
      LOG.info("meta is on the same server: " + regionSvr);
      HRegionServer otherRs=UTIL.getOtherRegionServer(regionSvr);
      UTIL.moveRegionAndWait(region.getRegionInfo(),otherRs.getServerName());
      LOG.info("Moved region: " + regName + " to "+ otherRs.getServerName());
    }
    HRegionServer rsToSuspend=UTIL.getRSForFirstRegionInTable(TABLE_NAME);
    region=rsToSuspend.getRegions(TABLE_NAME).get(0);
    ZKWatcher watcher=UTIL.getZooKeeperWatcher();
    watcher.getRecoverableZooKeeper().delete(ZNodePaths.joinZNode(watcher.getZNodePaths().rsZNode,rsToSuspend.getServerName().toString()),-1);
    LOG.info("suspending " + rsToSuspend);
    UTIL.waitFor(60000,1000,new ExplainingPredicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        for (        RegionServerThread thread : UTIL.getHBaseCluster().getRegionServerThreads()) {
          HRegionServer rs=thread.getRegionServer();
          if (rs != rsToSuspend) {
            return !rs.getRegions(TABLE_NAME).isEmpty();
          }
        }
        return false;
      }
      @Override public String explainFailure() throws Exception {
        return "The region for " + TABLE_NAME + " is still on "+ rsToSuspend.getServerName();
      }
    }
);
    try {
      region.compact(true);
      fail("Should fail as our wal file has already been closed, " + "and walDir has also been renamed");
    }
 catch (    Exception e) {
      LOG.debug("expected exception: ",e);
    }
    Table table=UTIL.getConnection().getTable(TABLE_NAME);
    for (int i=0; i < 20; i++) {
      assertEquals(i,Bytes.toInt(table.get(new Get(Bytes.toBytes(i))).getValue(CF,CQ)));
    }
  }
}
