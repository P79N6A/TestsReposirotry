/** 
 * Test DataBlockEncodingTool.
 */
@Category({MiscTests.class,SmallTests.class}) public class TestDataBlockEncodingTool {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestDataBlockEncodingTool.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final String ROOT_DIR=TEST_UTIL.getDataTestDir("TestDataBlockEncodingTool").toString();
  private static final Configuration conf=TEST_UTIL.getConfiguration();
  private static FileSystem fs;
  private static StoreFileWriter sfw;
  @Before public void setUp() throws IOException {
    fs=TEST_UTIL.getTestFileSystem();
  }
  private void testHFile(  String fileName,  boolean useTags,  boolean allTags) throws IOException {
    Path path=new Path(ROOT_DIR,fileName);
    try {
      createHFileWithTags(path,useTags,allTags);
      testDataBlockingTool(path);
    }
  finally {
      if (fs.exists(path)) {
        fs.delete(path,false);
      }
    }
  }
  private void createHFileWithTags(  Path path,  boolean useTags,  boolean allTags) throws IOException {
    HFileContext meta=new HFileContextBuilder().withBlockSize(64 * 1024).withIncludesTags(useTags).build();
    sfw=new StoreFileWriter.Builder(conf,fs).withFilePath(path).withFileContext(meta).build();
    long now=System.currentTimeMillis();
    byte[] FAMILY=Bytes.toBytes("cf");
    byte[] QUALIFIER=Bytes.toBytes("q");
    try {
      for (char d='a'; d <= 'z'; d++) {
        for (char e='a'; e <= 'z'; e++) {
          byte[] b=new byte[]{(byte)d,(byte)e};
          KeyValue kv;
          if (useTags) {
            if (allTags) {
              Tag[] tags=new Tag[]{new ArrayBackedTag((byte)0,Bytes.toString(b)),new ArrayBackedTag((byte)0,Bytes.toString(b))};
              kv=new KeyValue(b,FAMILY,QUALIFIER,now,b,tags);
            }
 else {
              if ((e - 'a') % 2 == 0) {
                kv=new KeyValue(b,FAMILY,QUALIFIER,now,b);
              }
 else {
                Tag[] tags=new Tag[]{new ArrayBackedTag((byte)0,Bytes.toString(b)),new ArrayBackedTag((byte)0,Bytes.toString(b))};
                kv=new KeyValue(b,FAMILY,QUALIFIER,now,b,tags);
              }
            }
          }
 else {
            kv=new KeyValue(b,FAMILY,QUALIFIER,now,b);
          }
          sfw.append(kv);
        }
      }
      sfw.appendMetadata(0,false);
    }
  finally {
      sfw.close();
    }
  }
  private static void testDataBlockingTool(  Path path) throws IOException {
    Configuration conf=HBaseConfiguration.create();
    int maxKV=Integer.MAX_VALUE;
    boolean doVerify=true;
    boolean doBenchmark=true;
    String testHFilePath=path.toString();
    DataBlockEncodingTool.testCodecs(conf,maxKV,testHFilePath,Compression.Algorithm.GZ.getName(),doBenchmark,doVerify);
  }
  @Test public void testHFileAllCellsWithTags() throws IOException {
    testHFile("1234567890",true,true);
  }
  @Test public void testHFileAllCellsWithoutTags() throws IOException {
    testHFile("1234567089",false,false);
  }
  @Test public void testHFileHalfCellsWithTags() throws IOException {
    testHFile("1234560789",true,false);
  }
}
