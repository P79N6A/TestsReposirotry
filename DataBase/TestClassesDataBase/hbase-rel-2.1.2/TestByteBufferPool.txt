@Category({IOTests.class,SmallTests.class}) public class TestByteBufferPool {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestByteBufferPool.class);
  @Test public void testOffheapBBPool() throws Exception {
    boolean directByteBuffer=true;
    testBBPool(10,100,directByteBuffer);
  }
  @Test public void testOnheapBBPool() throws Exception {
    boolean directByteBuffer=false;
    testBBPool(10,100,directByteBuffer);
  }
  private void testBBPool(  int maxPoolSize,  int bufferSize,  boolean directByteBuffer){
    ByteBufferPool pool=new ByteBufferPool(bufferSize,maxPoolSize,directByteBuffer);
    for (int i=0; i < maxPoolSize; i++) {
      ByteBuffer buffer=pool.getBuffer();
      assertEquals(0,buffer.position());
      assertEquals(bufferSize,buffer.limit());
      assertEquals(directByteBuffer,buffer.isDirect());
    }
    assertEquals(0,pool.getQueueSize());
    ByteBuffer bb=directByteBuffer ? ByteBuffer.allocate(bufferSize) : ByteBuffer.allocateDirect(bufferSize);
    pool.putbackBuffer(bb);
    assertEquals(0,pool.getQueueSize());
    bb=directByteBuffer ? ByteBuffer.allocateDirect(bufferSize + 1) : ByteBuffer.allocate(bufferSize + 1);
    pool.putbackBuffer(bb);
    assertEquals(0,pool.getQueueSize());
  }
}
