@Category({RegionServerTests.class,LargeTests.class}) public class TestRemoveRegionMetrics {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRemoveRegionMetrics.class);
  private static MiniHBaseCluster cluster;
  private static Configuration conf;
  private static HBaseTestingUtility TEST_UTIL;
  private static MetricsAssertHelper metricsHelper;
  @Rule public TestName name=new TestName();
  @BeforeClass public static void startCluster() throws Exception {
    metricsHelper=CompatibilityFactory.getInstance(MetricsAssertHelper.class);
    TEST_UTIL=new HBaseTestingUtility();
    conf=TEST_UTIL.getConfiguration();
    conf.getLong("hbase.splitlog.max.resubmit",0);
    conf.setInt("zookeeper.recovery.retry",0);
    conf.setInt(HConstants.REGIONSERVER_INFO_PORT,-1);
    TEST_UTIL.startMiniCluster(1,2);
    cluster=TEST_UTIL.getHBaseCluster();
    cluster.waitForActiveAndReadyMaster();
    while (cluster.getLiveRegionServerThreads().size() < 2) {
      Threads.sleep(100);
    }
  }
  @Test public void testMoveRegion() throws IOException, InterruptedException {
    String tableNameString=name.getMethodName();
    TableName tableName=TableName.valueOf(tableNameString);
    Table t=TEST_UTIL.createTable(tableName,Bytes.toBytes("D"));
    TEST_UTIL.waitUntilAllRegionsAssigned(t.getName());
    Admin admin=TEST_UTIL.getAdmin();
    HRegionInfo regionInfo;
    byte[] row=Bytes.toBytes("r1");
    for (int i=0; i < 30; i++) {
      boolean moved=false;
      try (RegionLocator locator=TEST_UTIL.getConnection().getRegionLocator(tableName)){
        regionInfo=locator.getRegionLocation(row,true).getRegionInfo();
      }
       int currentServerIdx=cluster.getServerWith(regionInfo.getRegionName());
      int destServerIdx=(currentServerIdx + 1) % cluster.getLiveRegionServerThreads().size();
      HRegionServer currentServer=cluster.getRegionServer(currentServerIdx);
      HRegionServer destServer=cluster.getRegionServer(destServerIdx);
      Put p=new Put(row);
      p.addColumn(Bytes.toBytes("D"),Bytes.toBytes("Zero"),Bytes.toBytes("VALUE"));
      t.put(p);
      MetricsRegionAggregateSource currentAgg=currentServer.getRegion(regionInfo.getRegionName()).getMetrics().getSource().getAggregateSource();
      String prefix="namespace_" + NamespaceDescriptor.DEFAULT_NAMESPACE_NAME_STR + "_table_"+ tableNameString+ "_region_"+ regionInfo.getEncodedName()+ "_metric";
      metricsHelper.assertCounter(prefix + "_putCount",1,currentAgg);
      try {
        TEST_UTIL.moveRegionAndWait(regionInfo,destServer.getServerName());
        moved=true;
      }
 catch (      IOException ioe) {
        moved=false;
      }
      if (moved) {
        MetricsRegionAggregateSource destAgg=destServer.getRegion(regionInfo.getRegionName()).getMetrics().getSource().getAggregateSource();
        metricsHelper.assertCounter(prefix + "_putCount",0,destAgg);
      }
    }
    TEST_UTIL.deleteTable(tableName);
  }
}
