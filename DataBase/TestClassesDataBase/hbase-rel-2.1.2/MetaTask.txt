/** 
 * Thread that runs a MetaTableAccessor task until asked stop.
 */
abstract static class MetaTask extends Thread {
  boolean stop=false;
  int count=0;
  Throwable t=null;
  final Connection connection;
  MetaTask(  final Connection connection,  final String name){
    super(name);
    this.connection=connection;
  }
  @Override public void run(){
    try {
      while (!this.stop) {
        LOG.info("Before " + this.getName() + ", count="+ this.count);
        metaTask();
        this.count+=1;
        LOG.info("After " + this.getName() + ", count="+ this.count);
        Thread.sleep(100);
      }
    }
 catch (    Throwable t) {
      LOG.info(this.getName() + " failed",t);
      this.t=t;
    }
  }
  boolean isProgressing() throws InterruptedException {
    int currentCount=this.count;
    while (currentCount == this.count) {
      if (!isAlive())       return false;
      if (this.t != null)       return false;
      Thread.sleep(10);
    }
    return true;
  }
  @Override public String toString(){
    return "count=" + this.count + ", t="+ (this.t == null ? "null" : this.t.toString());
  }
  abstract void metaTask() throws Throwable ;
}
