@Category({RegionServerTests.class,SmallTests.class}) public class TestServerNonceManager {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestServerNonceManager.class);
  @Test public void testMvcc() throws Exception {
    ServerNonceManager nm=createManager();
    final long group=100;
    final long nonce=1;
    final long initMvcc=999;
    assertTrue(nm.startOperation(group,nonce,createStoppable()));
    nm.addMvccToOperationContext(group,nonce,initMvcc);
    nm.endOperation(group,nonce,true);
    assertEquals(initMvcc,nm.getMvccFromOperationContext(group,nonce));
    long newMvcc=initMvcc + 1;
    for (long newNonce=nonce + 1; newNonce != (nonce + 5); ++newNonce) {
      assertTrue(nm.startOperation(group,newNonce,createStoppable()));
      nm.addMvccToOperationContext(group,newNonce,newMvcc);
      nm.endOperation(group,newNonce,true);
      assertEquals(newMvcc,nm.getMvccFromOperationContext(group,newNonce));
      ++newMvcc;
    }
    assertEquals(initMvcc,nm.getMvccFromOperationContext(group,nonce));
  }
  @Test public void testNormalStartEnd() throws Exception {
    final long[] numbers=new long[]{NO_NONCE,1,2,Long.MAX_VALUE,Long.MIN_VALUE};
    ServerNonceManager nm=createManager();
    for (int i=0; i < numbers.length; ++i) {
      for (int j=0; j < numbers.length; ++j) {
        assertTrue(nm.startOperation(numbers[i],numbers[j],createStoppable()));
      }
    }
    for (int i=0; i < numbers.length; ++i) {
      assertTrue(nm.startOperation(numbers[i],NO_NONCE,createStoppable()));
    }
    for (int i=0; i < numbers.length; ++i) {
      for (int j=0; j < numbers.length; ++j) {
        nm.endOperation(numbers[i],numbers[j],false);
        assertTrue(nm.startOperation(numbers[i],numbers[j],createStoppable()));
      }
    }
    for (int i=0; i < numbers.length; ++i) {
      for (int j=0; j < numbers.length; ++j) {
        nm.endOperation(numbers[i],numbers[j],true);
        assertEquals(numbers[j] == NO_NONCE,nm.startOperation(numbers[i],numbers[j],createStoppable()));
      }
    }
  }
  @Test public void testNoEndWithoutStart(){
    ServerNonceManager nm=createManager();
    try {
      nm.endOperation(NO_NONCE,1,true);
      throw new Error("Should have thrown");
    }
 catch (    AssertionError err) {
    }
  }
  @Test public void testCleanup() throws Exception {
    ManualEnvironmentEdge edge=new ManualEnvironmentEdge();
    EnvironmentEdgeManager.injectEdge(edge);
    try {
      ServerNonceManager nm=createManager(6);
      ScheduledChore cleanup=nm.createCleanupScheduledChore(Mockito.mock(Stoppable.class));
      edge.setValue(1);
      assertTrue(nm.startOperation(NO_NONCE,1,createStoppable()));
      assertTrue(nm.startOperation(NO_NONCE,2,createStoppable()));
      assertTrue(nm.startOperation(NO_NONCE,3,createStoppable()));
      edge.setValue(2);
      nm.endOperation(NO_NONCE,1,true);
      edge.setValue(4);
      nm.endOperation(NO_NONCE,2,true);
      edge.setValue(9);
      cleanup.choreForTesting();
      assertTrue(nm.startOperation(NO_NONCE,1,createStoppable()));
      assertFalse(nm.startOperation(NO_NONCE,2,createStoppable()));
      nm.endOperation(NO_NONCE,3,false);
      assertTrue(nm.startOperation(NO_NONCE,3,createStoppable()));
      edge.setValue(11);
      cleanup.choreForTesting();
      assertTrue(nm.startOperation(NO_NONCE,2,createStoppable()));
    }
  finally {
      EnvironmentEdgeManager.reset();
    }
  }
  @Test public void testWalNonces() throws Exception {
    ManualEnvironmentEdge edge=new ManualEnvironmentEdge();
    EnvironmentEdgeManager.injectEdge(edge);
    try {
      ServerNonceManager nm=createManager(6);
      ScheduledChore cleanup=nm.createCleanupScheduledChore(Mockito.mock(Stoppable.class));
      edge.setValue(12);
      nm.reportOperationFromWal(NO_NONCE,1,8);
      nm.reportOperationFromWal(NO_NONCE,2,2);
      nm.reportOperationFromWal(NO_NONCE,3,5);
      nm.reportOperationFromWal(NO_NONCE,3,6);
      assertFalse(nm.startOperation(NO_NONCE,1,createStoppable()));
      assertTrue(nm.startOperation(NO_NONCE,2,createStoppable()));
      assertFalse(nm.startOperation(NO_NONCE,3,createStoppable()));
      edge.setValue(17);
      cleanup.choreForTesting();
      assertFalse(nm.startOperation(NO_NONCE,1,createStoppable()));
      assertFalse(nm.startOperation(NO_NONCE,3,createStoppable()));
      edge.setValue(19);
      cleanup.choreForTesting();
      assertTrue(nm.startOperation(NO_NONCE,1,createStoppable()));
      assertTrue(nm.startOperation(NO_NONCE,3,createStoppable()));
    }
  finally {
      EnvironmentEdgeManager.reset();
    }
  }
  @Test public void testConcurrentAttempts() throws Exception {
    final ServerNonceManager nm=createManager();
    nm.startOperation(NO_NONCE,1,createStoppable());
    TestRunnable tr=new TestRunnable(nm,1,false,createStoppable());
    Thread t=tr.start();
    waitForThreadToBlockOrExit(t);
    nm.endOperation(NO_NONCE,1,true);
    t.join();
    tr.propagateError();
    nm.startOperation(NO_NONCE,2,createStoppable());
    tr=new TestRunnable(nm,2,true,createStoppable());
    t=tr.start();
    waitForThreadToBlockOrExit(t);
    nm.endOperation(NO_NONCE,2,false);
    t.join();
    tr.propagateError();
    nm.endOperation(NO_NONCE,2,true);
    nm.startOperation(NO_NONCE,3,createStoppable());
    tr=new TestRunnable(nm,4,true,createStoppable());
    tr.start().join();
    tr.propagateError();
  }
  @Test public void testStopWaiting() throws Exception {
    final ServerNonceManager nm=createManager();
    nm.setConflictWaitIterationMs(1);
    Stoppable stoppingStoppable=createStoppable();
    Mockito.when(stoppingStoppable.isStopped()).thenAnswer(new Answer<Boolean>(){
      AtomicInteger answer=new AtomicInteger(3);
      @Override public Boolean answer(      InvocationOnMock invocation) throws Throwable {
        return 0 < answer.decrementAndGet();
      }
    }
);
    nm.startOperation(NO_NONCE,1,createStoppable());
    TestRunnable tr=new TestRunnable(nm,1,null,stoppingStoppable);
    Thread t=tr.start();
    waitForThreadToBlockOrExit(t);
    t.join();
    tr.propagateError();
  }
  private void waitForThreadToBlockOrExit(  Thread t) throws InterruptedException {
    for (int i=9; i >= 0; --i) {
      if (t.getState() == Thread.State.TIMED_WAITING || t.getState() == Thread.State.WAITING || t.getState() == Thread.State.BLOCKED || t.getState() == Thread.State.TERMINATED) {
        return;
      }
      if (i > 0)       Thread.sleep(300);
    }
  }
private static class TestRunnable implements Runnable {
    public final CountDownLatch startedLatch=new CountDownLatch(1);
    private final ServerNonceManager nm;
    private final long nonce;
    private final Boolean expected;
    private final Stoppable stoppable;
    private Throwable throwable=null;
    public TestRunnable(    ServerNonceManager nm,    long nonce,    Boolean expected,    Stoppable stoppable){
      this.nm=nm;
      this.nonce=nonce;
      this.expected=expected;
      this.stoppable=stoppable;
    }
    public void propagateError() throws Exception {
      if (throwable == null)       return;
      throw new Exception(throwable);
    }
    public Thread start(){
      Thread t=new Thread(this);
      t=Threads.setDaemonThreadRunning(t);
      try {
        startedLatch.await();
      }
 catch (      InterruptedException e) {
        fail("Unexpected");
      }
      return t;
    }
    @Override public void run(){
      startedLatch.countDown();
      boolean shouldThrow=expected == null;
      boolean hasThrown=true;
      try {
        boolean result=nm.startOperation(NO_NONCE,nonce,stoppable);
        hasThrown=false;
        if (!shouldThrow) {
          assertEquals(expected.booleanValue(),result);
        }
      }
 catch (      Throwable t) {
        if (!shouldThrow) {
          throwable=t;
        }
      }
      if (shouldThrow && !hasThrown) {
        throwable=new AssertionError("Should have thrown");
      }
    }
  }
  private Stoppable createStoppable(){
    Stoppable s=Mockito.mock(Stoppable.class);
    Mockito.when(s.isStopped()).thenReturn(false);
    return s;
  }
  private ServerNonceManager createManager(){
    return createManager(null);
  }
  private ServerNonceManager createManager(  Integer gracePeriod){
    Configuration conf=HBaseConfiguration.create();
    if (gracePeriod != null) {
      conf.setInt(ServerNonceManager.HASH_NONCE_GRACE_PERIOD_KEY,gracePeriod.intValue());
    }
    return new ServerNonceManager(conf);
  }
}
