/** 
 * A custom data type implementation specialized for  {@link Pojo1}.
 */
private static class SpecializedPojo1Type1 implements DataType<Pojo1> {
  private static final RawStringTerminated stringField=new RawStringTerminated("/");
  private static final RawInteger intField=new RawInteger();
  private static final RawDouble doubleField=new RawDouble();
  /** 
 * The  {@link Struct} equivalent of this type.
 */
  public static Struct GENERIC=new StructBuilder().add(stringField).add(intField).add(doubleField).toStruct();
  @Override public boolean isOrderPreserving(){
    return true;
  }
  @Override public Order getOrder(){
    return null;
  }
  @Override public boolean isNullable(){
    return false;
  }
  @Override public boolean isSkippable(){
    return true;
  }
  @Override public int encodedLength(  Pojo1 val){
    return stringField.encodedLength(val.stringFieldAsc) + intField.encodedLength(val.intFieldAsc) + doubleField.encodedLength(val.doubleFieldAsc);
  }
  @Override public Class<Pojo1> encodedClass(){
    return Pojo1.class;
  }
  @Override public int skip(  PositionedByteRange src){
    int skipped=stringField.skip(src);
    skipped+=intField.skip(src);
    skipped+=doubleField.skip(src);
    return skipped;
  }
  @Override public Pojo1 decode(  PositionedByteRange src){
    Object[] ret=new Object[3];
    ret[0]=stringField.decode(src);
    ret[1]=intField.decode(src);
    ret[2]=doubleField.decode(src);
    return new Pojo1(ret);
  }
  @Override public int encode(  PositionedByteRange dst,  Pojo1 val){
    int written=stringField.encode(dst,val.stringFieldAsc);
    written+=intField.encode(dst,val.intFieldAsc);
    written+=doubleField.encode(dst,val.doubleFieldAsc);
    return written;
  }
}
