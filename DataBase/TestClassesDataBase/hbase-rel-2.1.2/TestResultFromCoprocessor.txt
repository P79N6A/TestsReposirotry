@Category({MediumTests.class,ClientTests.class}) public class TestResultFromCoprocessor {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestResultFromCoprocessor.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final byte[] ROW=Bytes.toBytes("normal_row");
  private static final byte[] FAMILY=Bytes.toBytes("fm");
  private static final byte[] QUAL=Bytes.toBytes("qual");
  private static final byte[] VALUE=Bytes.toBytes(100L);
  private static final byte[] FIXED_VALUE=Bytes.toBytes("fixed_value");
  private static final Cell FIXED_CELL=CellUtil.createCell(ROW,FAMILY,QUAL,0,KeyValue.Type.Put.getCode(),FIXED_VALUE);
  private static final Result FIXED_RESULT=Result.create(Arrays.asList(FIXED_CELL));
  private static final TableName TABLE_NAME=TableName.valueOf("TestResultFromCoprocessor");
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.startMiniCluster(3);
    TableDescriptor desc=TableDescriptorBuilder.newBuilder(TABLE_NAME).setCoprocessor(MyObserver.class.getName()).setColumnFamily(ColumnFamilyDescriptorBuilder.of(FAMILY)).build();
    TEST_UTIL.getAdmin().createTable(desc);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testAppend() throws IOException {
    try (Table t=TEST_UTIL.getConnection().getTable(TABLE_NAME)){
      Put put=new Put(ROW);
      put.addColumn(FAMILY,QUAL,VALUE);
      t.put(put);
      assertRowAndValue(t.get(new Get(ROW)),ROW,VALUE);
      Append append=new Append(ROW);
      append.addColumn(FAMILY,QUAL,FIXED_VALUE);
      assertRowAndValue(t.append(append),ROW,FIXED_VALUE);
      assertRowAndValue(t.get(new Get(ROW)),ROW,Bytes.add(VALUE,FIXED_VALUE));
    }
   }
  @Test public void testIncrement() throws IOException {
    try (Table t=TEST_UTIL.getConnection().getTable(TABLE_NAME)){
      Put put=new Put(ROW);
      put.addColumn(FAMILY,QUAL,VALUE);
      t.put(put);
      assertRowAndValue(t.get(new Get(ROW)),ROW,VALUE);
      Increment inc=new Increment(ROW);
      inc.addColumn(FAMILY,QUAL,99);
      assertRowAndValue(t.increment(inc),ROW,FIXED_VALUE);
      assertRowAndValue(t.get(new Get(ROW)),ROW,Bytes.toBytes(199L));
    }
   }
  private static void assertRowAndValue(  Result r,  byte[] row,  byte[] value){
    for (    Cell c : r.rawCells()) {
      assertTrue(Bytes.equals(CellUtil.cloneRow(c),row));
      assertTrue(Bytes.equals(CellUtil.cloneValue(c),value));
    }
  }
public static class MyObserver implements RegionCoprocessor, RegionObserver {
    @Override public Optional<RegionObserver> getRegionObserver(){
      return Optional.of(this);
    }
    @Override public Result postAppend(    final ObserverContext<RegionCoprocessorEnvironment> c,    final Append append,    final Result result){
      return FIXED_RESULT;
    }
    @Override public Result postIncrement(    final ObserverContext<RegionCoprocessorEnvironment> c,    final Increment increment,    final Result result){
      return FIXED_RESULT;
    }
    @Override public void start(    CoprocessorEnvironment env) throws IOException {
    }
    @Override public void stop(    CoprocessorEnvironment env) throws IOException {
    }
  }
}
