/** 
 * Test the optimization that does not scan files where all key ranges are excluded.
 */
@RunWith(Parameterized.class) @Category({IOTests.class,SmallTests.class}) public class TestScannerSelectionUsingKeyRange {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestScannerSelectionUsingKeyRange.class);
  private static final HBaseTestingUtility TEST_UTIL=HBaseTestingUtility.createLocalHTU();
  private static TableName TABLE=TableName.valueOf("myTable");
  private static String FAMILY="myCF";
  private static byte[] FAMILY_BYTES=Bytes.toBytes(FAMILY);
  private static final int NUM_ROWS=8;
  private static final int NUM_COLS_PER_ROW=5;
  private static final int NUM_FILES=2;
  private static final Map<Object,Integer> TYPE_COUNT=new HashMap<>(3);
static {
    TYPE_COUNT.put(BloomType.ROWCOL,0);
    TYPE_COUNT.put(BloomType.ROW,0);
    TYPE_COUNT.put(BloomType.NONE,0);
  }
  private BloomType bloomType;
  private int expectedCount;
  @Parameters public static Collection<Object[]> parameters(){
    List<Object[]> params=new ArrayList<>();
    for (    Object type : TYPE_COUNT.keySet()) {
      params.add(new Object[]{type,TYPE_COUNT.get(type)});
    }
    return params;
  }
  public TestScannerSelectionUsingKeyRange(  Object type,  Object count){
    bloomType=(BloomType)type;
    expectedCount=(Integer)count;
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.cleanupTestDir();
  }
  @Test public void testScannerSelection() throws IOException {
    Configuration conf=TEST_UTIL.getConfiguration();
    conf.setInt("hbase.hstore.compactionThreshold",10000);
    HColumnDescriptor hcd=new HColumnDescriptor(FAMILY_BYTES).setBlockCacheEnabled(true).setBloomFilterType(bloomType);
    HTableDescriptor htd=new HTableDescriptor(TABLE);
    htd.addFamily(hcd);
    HRegionInfo info=new HRegionInfo(TABLE);
    HRegion region=HBaseTestingUtility.createRegionAndWAL(info,TEST_UTIL.getDataTestDir(),conf,htd);
    for (int iFile=0; iFile < NUM_FILES; ++iFile) {
      for (int iRow=0; iRow < NUM_ROWS; ++iRow) {
        Put put=new Put(Bytes.toBytes("row" + iRow));
        for (int iCol=0; iCol < NUM_COLS_PER_ROW; ++iCol) {
          put.addColumn(FAMILY_BYTES,Bytes.toBytes("col" + iCol),Bytes.toBytes("value" + iFile + "_"+ iRow+ "_"+ iCol));
        }
        region.put(put);
      }
      region.flush(true);
    }
    Scan scan=new Scan(Bytes.toBytes("aaa"),Bytes.toBytes("aaz"));
    CacheConfig.blockCacheDisabled=false;
    CacheConfig.instantiateBlockCache(conf);
    CacheConfig cacheConf=new CacheConfig(conf);
    LruBlockCache cache=(LruBlockCache)cacheConf.getBlockCache();
    cache.clearCache();
    InternalScanner scanner=region.getScanner(scan);
    List<Cell> results=new ArrayList<>();
    while (scanner.next(results)) {
    }
    scanner.close();
    assertEquals(0,results.size());
    Set<String> accessedFiles=cache.getCachedFileNamesForTest();
    assertEquals(expectedCount,accessedFiles.size());
    HBaseTestingUtility.closeRegionAndWAL(region);
  }
}
