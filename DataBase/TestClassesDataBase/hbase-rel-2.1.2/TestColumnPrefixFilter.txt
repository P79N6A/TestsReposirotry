@Category({FilterTests.class,SmallTests.class}) public class TestColumnPrefixFilter {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestColumnPrefixFilter.class);
  private final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  @Rule public TestName name=new TestName();
  @Test public void testColumnPrefixFilter() throws IOException {
    String family="Family";
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    htd.addFamily((new HColumnDescriptor(family)).setMaxVersions(3));
    HRegionInfo info=new HRegionInfo(htd.getTableName(),null,null,false);
    HRegion region=HBaseTestingUtility.createRegionAndWAL(info,TEST_UTIL.getDataTestDir(),TEST_UTIL.getConfiguration(),htd);
    try {
      List<String> rows=generateRandomWords(100,"row");
      List<String> columns=generateRandomWords(10000,"column");
      long maxTimestamp=2;
      List<Cell> kvList=new ArrayList<>();
      Map<String,List<Cell>> prefixMap=new HashMap<>();
      prefixMap.put("p",new ArrayList<>());
      prefixMap.put("s",new ArrayList<>());
      String valueString="ValueString";
      for (      String row : rows) {
        Put p=new Put(Bytes.toBytes(row));
        p.setDurability(Durability.SKIP_WAL);
        for (        String column : columns) {
          for (long timestamp=1; timestamp <= maxTimestamp; timestamp++) {
            KeyValue kv=KeyValueTestUtil.create(row,family,column,timestamp,valueString);
            p.add(kv);
            kvList.add(kv);
            for (            String s : prefixMap.keySet()) {
              if (column.startsWith(s)) {
                prefixMap.get(s).add(kv);
              }
            }
          }
        }
        region.put(p);
      }
      ColumnPrefixFilter filter;
      Scan scan=new Scan();
      scan.setMaxVersions();
      for (      String s : prefixMap.keySet()) {
        filter=new ColumnPrefixFilter(Bytes.toBytes(s));
        scan.setFilter(filter);
        InternalScanner scanner=region.getScanner(scan);
        List<Cell> results=new ArrayList<>();
        while (scanner.next(results))         ;
        assertEquals(prefixMap.get(s).size(),results.size());
      }
    }
  finally {
      HBaseTestingUtility.closeRegionAndWAL(region);
    }
    HBaseTestingUtility.closeRegionAndWAL(region);
  }
  @Test public void testColumnPrefixFilterWithFilterList() throws IOException {
    String family="Family";
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    htd.addFamily((new HColumnDescriptor(family)).setMaxVersions(3));
    HRegionInfo info=new HRegionInfo(htd.getTableName(),null,null,false);
    HRegion region=HBaseTestingUtility.createRegionAndWAL(info,TEST_UTIL.getDataTestDir(),TEST_UTIL.getConfiguration(),htd);
    try {
      List<String> rows=generateRandomWords(100,"row");
      List<String> columns=generateRandomWords(10000,"column");
      long maxTimestamp=2;
      List<Cell> kvList=new ArrayList<>();
      Map<String,List<Cell>> prefixMap=new HashMap<>();
      prefixMap.put("p",new ArrayList<>());
      prefixMap.put("s",new ArrayList<>());
      String valueString="ValueString";
      for (      String row : rows) {
        Put p=new Put(Bytes.toBytes(row));
        p.setDurability(Durability.SKIP_WAL);
        for (        String column : columns) {
          for (long timestamp=1; timestamp <= maxTimestamp; timestamp++) {
            KeyValue kv=KeyValueTestUtil.create(row,family,column,timestamp,valueString);
            p.add(kv);
            kvList.add(kv);
            for (            String s : prefixMap.keySet()) {
              if (column.startsWith(s)) {
                prefixMap.get(s).add(kv);
              }
            }
          }
        }
        region.put(p);
      }
      ColumnPrefixFilter filter;
      Scan scan=new Scan();
      scan.setMaxVersions();
      for (      String s : prefixMap.keySet()) {
        filter=new ColumnPrefixFilter(Bytes.toBytes(s));
        FilterList filterList=new FilterList(FilterList.Operator.MUST_PASS_ALL);
        filterList.addFilter(filter);
        scan.setFilter(filterList);
        InternalScanner scanner=region.getScanner(scan);
        List<Cell> results=new ArrayList<>();
        while (scanner.next(results))         ;
        assertEquals(prefixMap.get(s).size(),results.size());
      }
    }
  finally {
      HBaseTestingUtility.closeRegionAndWAL(region);
    }
    HBaseTestingUtility.closeRegionAndWAL(region);
  }
  List<String> generateRandomWords(  int numberOfWords,  String suffix){
    Set<String> wordSet=new HashSet<>();
    for (int i=0; i < numberOfWords; i++) {
      int lengthOfWords=(int)(Math.random() * 2) + 1;
      char[] wordChar=new char[lengthOfWords];
      for (int j=0; j < wordChar.length; j++) {
        wordChar[j]=(char)(Math.random() * 26 + 97);
      }
      String word;
      if (suffix == null) {
        word=new String(wordChar);
      }
 else {
        word=new String(wordChar) + suffix;
      }
      wordSet.add(word);
    }
    List<String> wordList=new ArrayList<>(wordSet);
    return wordList;
  }
}
