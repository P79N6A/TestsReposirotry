/** 
 * Run tests that use the HBase clients;  {@link org.apache.hadoop.hbase.client.HTable}. Sets up the HBase mini cluster once at start and runs through all client tests. Each creates a table named for the method and does its stuff against that.
 */
@Category({MasterTests.class,LargeTests.class}) @SuppressWarnings("deprecation") public class TestWarmupRegion {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestWarmupRegion.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestWarmupRegion.class);
  protected TableName TABLENAME=TableName.valueOf("testPurgeFutureDeletes");
  protected final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static byte[] ROW=Bytes.toBytes("testRow");
  private static byte[] FAMILY=Bytes.toBytes("testFamily");
  private static byte[] QUALIFIER=Bytes.toBytes("testQualifier");
  private static byte[] VALUE=Bytes.toBytes("testValue");
  private static byte[] COLUMN=Bytes.toBytes("column");
  private static int numRows=10000;
  protected static int SLAVES=3;
  private static MiniHBaseCluster myCluster;
  private static Table table;
  /** 
 * @throws java.lang.Exception
 */
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    Configuration conf=TEST_UTIL.getConfiguration();
    TEST_UTIL.startMiniCluster(SLAVES);
  }
  /** 
 * @throws java.lang.Exception
 */
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  /** 
 * @throws java.lang.Exception
 */
  @Before public void setUp() throws Exception {
    table=TEST_UTIL.createTable(TABLENAME,FAMILY);
    for (int i=0; i < numRows; i++) {
      long ts=System.currentTimeMillis() * 2;
      Put put=new Put(ROW,ts);
      put.addColumn(FAMILY,COLUMN,VALUE);
      table.put(put);
    }
    TEST_UTIL.getAdmin().flush(TABLENAME);
    TEST_UTIL.getAdmin().majorCompact(TABLENAME);
    TEST_UTIL.waitFor(6000,new Waiter.Predicate<IOException>(){
      @Override public boolean evaluate() throws IOException {
        return TEST_UTIL.getAdmin().getCompactionState(TABLENAME) == CompactionState.NONE;
      }
    }
);
    table.close();
  }
  /** 
 * @throws java.lang.Exception
 */
  @After public void tearDown() throws Exception {
  }
  protected void runwarmup() throws InterruptedException {
    Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        HRegionServer rs=TEST_UTIL.getMiniHBaseCluster().getRegionServer(0);
        HRegion region=TEST_UTIL.getMiniHBaseCluster().getRegions(TABLENAME).get(0);
        RegionInfo info=region.getRegionInfo();
        try {
          HTableDescriptor htd=table.getTableDescriptor();
          for (int i=0; i < 10; i++) {
            warmupHRegion(info,htd,rs.getWAL(info),rs.getConfiguration(),rs,null);
          }
        }
 catch (        IOException ie) {
          LOG.error("Failed warming up region " + info.getRegionNameAsString(),ie);
        }
      }
    }
);
    thread.start();
    thread.join();
  }
  /** 
 * Basic client side validation of HBASE-4536
 */
  @Test public void testWarmup() throws Exception {
    int serverid=0;
    HRegion region=TEST_UTIL.getMiniHBaseCluster().getRegions(TABLENAME).get(0);
    RegionInfo info=region.getRegionInfo();
    runwarmup();
    for (int i=0; i < 10; i++) {
      HRegionServer rs=TEST_UTIL.getMiniHBaseCluster().getRegionServer(serverid);
      byte[] destName=Bytes.toBytes(rs.getServerName().toString());
      assertTrue(destName != null);
      LOG.info("i=" + i);
      TEST_UTIL.getMiniHBaseCluster().getMaster().move(info.getEncodedNameAsBytes(),destName);
      serverid=(serverid + 1) % 2;
    }
  }
}
