/** 
 * Tests LRUDictionary
 */
@Category({MiscTests.class,SmallTests.class}) public class TestLRUDictionary {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestLRUDictionary.class);
  LRUDictionary testee;
  @Before public void setUp() throws Exception {
    testee=new LRUDictionary();
    testee.init(Short.MAX_VALUE);
  }
  @Test public void TestContainsNothing(){
    assertTrue(isDictionaryEmpty(testee));
  }
  /** 
 * Assert can't add empty array.
 */
  @Test public void testPassingEmptyArrayToFindEntry(){
    assertEquals(Dictionary.NOT_IN_DICTIONARY,testee.findEntry(HConstants.EMPTY_BYTE_ARRAY,0,0));
    assertEquals(Dictionary.NOT_IN_DICTIONARY,testee.addEntry(HConstants.EMPTY_BYTE_ARRAY,0,0));
  }
  @Test public void testPassingSameArrayToAddEntry(){
    int len=HConstants.CATALOG_FAMILY.length;
    int index=testee.addEntry(HConstants.CATALOG_FAMILY,0,len);
    assertFalse(index == testee.addEntry(HConstants.CATALOG_FAMILY,0,len));
    assertFalse(index == testee.addEntry(HConstants.CATALOG_FAMILY,0,len));
  }
  @Test public void testBasic(){
    Random rand=new Random();
    byte[] testBytes=new byte[10];
    rand.nextBytes(testBytes);
    assertEquals(-1,testee.findEntry(testBytes,0,testBytes.length));
    assertFalse(isDictionaryEmpty(testee));
    short t=testee.findEntry(testBytes,0,testBytes.length);
    assertTrue(t != -1);
    byte[] testBytesCopy=new byte[20];
    Bytes.putBytes(testBytesCopy,10,testBytes,0,testBytes.length);
    assertEquals(testee.findEntry(testBytesCopy,10,testBytes.length),t);
    assertTrue(Arrays.equals(testBytes,testee.getEntry(t)));
    testee.clear();
    assertTrue(isDictionaryEmpty(testee));
  }
  @Test public void TestLRUPolicy(){
    for (int i=0; i < Short.MAX_VALUE; i++) {
      testee.findEntry((BigInteger.valueOf(i)).toByteArray(),0,(BigInteger.valueOf(i)).toByteArray().length);
    }
    assertTrue(testee.findEntry(BigInteger.ZERO.toByteArray(),0,BigInteger.ZERO.toByteArray().length) != -1);
    assertTrue(testee.findEntry(BigInteger.valueOf(Integer.MAX_VALUE).toByteArray(),0,BigInteger.valueOf(Integer.MAX_VALUE).toByteArray().length) == -1);
    assertTrue(testee.findEntry(BigInteger.valueOf(Integer.MAX_VALUE).toByteArray(),0,BigInteger.valueOf(Integer.MAX_VALUE).toByteArray().length) != -1);
    assertTrue(testee.findEntry(BigInteger.ZERO.toByteArray(),0,BigInteger.ZERO.toByteArray().length) != -1);
    for (int i=1; i < Short.MAX_VALUE; i++) {
      assertTrue(testee.findEntry(BigInteger.valueOf(i).toByteArray(),0,BigInteger.valueOf(i).toByteArray().length) == -1);
    }
    for (int i=0; i < Short.MAX_VALUE; i++) {
      assertTrue(testee.findEntry(BigInteger.valueOf(i).toByteArray(),0,BigInteger.valueOf(i).toByteArray().length) != -1);
    }
  }
  static private boolean isDictionaryEmpty(  LRUDictionary dict){
    try {
      dict.getEntry((short)0);
      return false;
    }
 catch (    IndexOutOfBoundsException ioobe) {
      return true;
    }
  }
}
