public class RestoreSnapshotFromClientSimpleTestBase extends RestoreSnapshotFromClientTestBase {
  @Test public void testRestoreSnapshot() throws IOException {
    verifyRowCount(TEST_UTIL,tableName,snapshot1Rows);
    admin.disableTable(tableName);
    admin.snapshot(snapshotName1,tableName);
    admin.restoreSnapshot(snapshotName0);
    admin.enableTable(tableName);
    verifyRowCount(TEST_UTIL,tableName,snapshot0Rows);
    SnapshotTestingUtils.verifyReplicasCameOnline(tableName,admin,getNumReplicas());
    admin.disableTable(tableName);
    admin.restoreSnapshot(emptySnapshot);
    admin.enableTable(tableName);
    verifyRowCount(TEST_UTIL,tableName,0);
    SnapshotTestingUtils.verifyReplicasCameOnline(tableName,admin,getNumReplicas());
    admin.disableTable(tableName);
    admin.restoreSnapshot(snapshotName1);
    admin.enableTable(tableName);
    verifyRowCount(TEST_UTIL,tableName,snapshot1Rows);
    SnapshotTestingUtils.verifyReplicasCameOnline(tableName,admin,getNumReplicas());
    TEST_UTIL.deleteTable(tableName);
    admin.restoreSnapshot(snapshotName1);
    verifyRowCount(TEST_UTIL,tableName,snapshot1Rows);
    SnapshotTestingUtils.verifyReplicasCameOnline(tableName,admin,getNumReplicas());
  }
  @Test public void testCorruptedSnapshot() throws IOException, InterruptedException {
    SnapshotTestingUtils.corruptSnapshot(TEST_UTIL,Bytes.toString(snapshotName0));
    TableName cloneName=TableName.valueOf(getValidMethodName() + "-" + System.currentTimeMillis());
    try {
      admin.cloneSnapshot(snapshotName0,cloneName);
      fail("Expected CorruptedSnapshotException, got succeeded cloneSnapshot()");
    }
 catch (    CorruptedSnapshotException e) {
      assertFalse(admin.tableExists(cloneName));
    }
catch (    Exception e) {
      fail("Expected CorruptedSnapshotException got: " + e);
    }
  }
}
