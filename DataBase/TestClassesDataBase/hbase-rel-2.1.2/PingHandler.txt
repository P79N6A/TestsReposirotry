public static class PingHandler extends PingProtos.PingService implements RegionCoprocessor {
  private int counter=0;
  @Override public void start(  CoprocessorEnvironment env) throws IOException {
    if (env instanceof RegionCoprocessorEnvironment) {
      return;
    }
    throw new CoprocessorException("Must be loaded on a table region!");
  }
  @Override public void stop(  CoprocessorEnvironment env) throws IOException {
  }
  @Override public void ping(  RpcController controller,  PingRequest request,  RpcCallback<PingResponse> done){
    this.counter++;
    done.run(PingResponse.newBuilder().setPong("pong").build());
  }
  @Override public void count(  RpcController controller,  CountRequest request,  RpcCallback<CountResponse> done){
    done.run(CountResponse.newBuilder().setCount(this.counter).build());
  }
  @Override public void increment(  RpcController controller,  IncrementCountRequest request,  RpcCallback<IncrementCountResponse> done){
    this.counter+=request.getDiff();
    done.run(IncrementCountResponse.newBuilder().setCount(this.counter).build());
  }
  @Override public void hello(  RpcController controller,  HelloRequest request,  RpcCallback<HelloResponse> done){
    if (!request.hasName()) {
      done.run(HelloResponse.newBuilder().setResponse(WHOAREYOU).build());
    }
 else     if (request.getName().equals(NOBODY)) {
      done.run(HelloResponse.newBuilder().build());
    }
 else {
      done.run(HelloResponse.newBuilder().setResponse(HELLO + request.getName()).build());
    }
  }
  @Override public void noop(  RpcController controller,  NoopRequest request,  RpcCallback<NoopResponse> done){
    done.run(NoopResponse.newBuilder().build());
  }
  @Override public Iterable<Service> getServices(){
    return Collections.singleton(this);
  }
}
