/** 
 * Test  {@link HFileScanner#seekTo(Cell)} and its variants.
 */
@Category({IOTests.class,SmallTests.class}) @RunWith(Parameterized.class) public class TestSeekTo {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSeekTo.class);
  private final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private final DataBlockEncoding encoding;
  @Parameters public static Collection<Object[]> parameters(){
    List<Object[]> paramList=new ArrayList<>();
    for (    DataBlockEncoding encoding : DataBlockEncoding.values()) {
      paramList.add(new Object[]{encoding});
    }
    return paramList;
  }
  static boolean switchKVs=false;
  public TestSeekTo(  DataBlockEncoding encoding){
    this.encoding=encoding;
  }
  @Before public void setUp(){
    switchKVs=false;
  }
  static KeyValue toKV(  String row,  TagUsage tagUsage){
    if (tagUsage == TagUsage.NO_TAG) {
      return new KeyValue(Bytes.toBytes(row),Bytes.toBytes("family"),Bytes.toBytes("qualifier"),Bytes.toBytes("value"));
    }
 else     if (tagUsage == TagUsage.ONLY_TAG) {
      Tag t=new ArrayBackedTag((byte)1,"myTag1");
      Tag[] tags=new Tag[1];
      tags[0]=t;
      return new KeyValue(Bytes.toBytes(row),Bytes.toBytes("family"),Bytes.toBytes("qualifier"),HConstants.LATEST_TIMESTAMP,Bytes.toBytes("value"),tags);
    }
 else {
      if (!switchKVs) {
        switchKVs=true;
        return new KeyValue(Bytes.toBytes(row),Bytes.toBytes("family"),Bytes.toBytes("qualifier"),HConstants.LATEST_TIMESTAMP,Bytes.toBytes("value"));
      }
 else {
        switchKVs=false;
        Tag t=new ArrayBackedTag((byte)1,"myTag1");
        Tag[] tags=new Tag[1];
        tags[0]=t;
        return new KeyValue(Bytes.toBytes(row),Bytes.toBytes("family"),Bytes.toBytes("qualifier"),HConstants.LATEST_TIMESTAMP,Bytes.toBytes("value"),tags);
      }
    }
  }
  static String toRowStr(  Cell c){
    return Bytes.toString(c.getRowArray(),c.getRowOffset(),c.getRowLength());
  }
  Path makeNewFile(  TagUsage tagUsage) throws IOException {
    Path ncTFile=new Path(TEST_UTIL.getDataTestDir(),"basic.hfile");
    FSDataOutputStream fout=TEST_UTIL.getTestFileSystem().create(ncTFile);
    int blocksize=toKV("a",tagUsage).getLength() * 3;
    HFileContext context=new HFileContextBuilder().withBlockSize(blocksize).withDataBlockEncoding(encoding).withIncludesTags(true).build();
    Configuration conf=TEST_UTIL.getConfiguration();
    HFile.Writer writer=HFile.getWriterFactoryNoCache(conf).withOutputStream(fout).withFileContext(context).withComparator(CellComparatorImpl.COMPARATOR).create();
    writer.append(toKV("c",tagUsage));
    writer.append(toKV("e",tagUsage));
    writer.append(toKV("g",tagUsage));
    writer.append(toKV("i",tagUsage));
    writer.append(toKV("k",tagUsage));
    writer.close();
    fout.close();
    return ncTFile;
  }
  @Test public void testSeekBefore() throws Exception {
    testSeekBeforeInternals(TagUsage.NO_TAG);
    testSeekBeforeInternals(TagUsage.ONLY_TAG);
    testSeekBeforeInternals(TagUsage.PARTIAL_TAG);
  }
  protected void testSeekBeforeInternals(  TagUsage tagUsage) throws IOException {
    Path p=makeNewFile(tagUsage);
    FileSystem fs=TEST_UTIL.getTestFileSystem();
    Configuration conf=TEST_UTIL.getConfiguration();
    HFile.Reader reader=HFile.createReader(fs,p,new CacheConfig(conf),true,conf);
    reader.loadFileInfo();
    HFileScanner scanner=reader.getScanner(false,true);
    assertFalse(scanner.seekBefore(toKV("a",tagUsage)));
    assertFalse(scanner.seekBefore(toKV("c",tagUsage)));
    assertTrue(scanner.seekBefore(toKV("d",tagUsage)));
    assertEquals("c",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("e",tagUsage)));
    assertEquals("c",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("f",tagUsage)));
    assertEquals("e",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("g",tagUsage)));
    assertEquals("e",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("h",tagUsage)));
    assertEquals("g",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("i",tagUsage)));
    assertEquals("g",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("j",tagUsage)));
    assertEquals("i",toRowStr(scanner.getCell()));
    Cell cell=scanner.getCell();
    if (tagUsage != TagUsage.NO_TAG && cell.getTagsLength() > 0) {
      Iterator<Tag> tagsIterator=PrivateCellUtil.tagsIterator(cell);
      while (tagsIterator.hasNext()) {
        Tag next=tagsIterator.next();
        assertEquals("myTag1",Bytes.toString(Tag.cloneValue(next)));
      }
    }
    assertTrue(scanner.seekBefore(toKV("k",tagUsage)));
    assertEquals("i",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("l",tagUsage)));
    assertEquals("k",toRowStr(scanner.getCell()));
    reader.close();
    deleteTestDir(fs);
  }
  protected void deleteTestDir(  FileSystem fs) throws IOException {
    Path dataTestDir=TEST_UTIL.getDataTestDir();
    if (fs.exists(dataTestDir)) {
      fs.delete(dataTestDir,true);
    }
  }
  @Test public void testSeekBeforeWithReSeekTo() throws Exception {
    testSeekBeforeWithReSeekToInternals(TagUsage.NO_TAG);
    testSeekBeforeWithReSeekToInternals(TagUsage.ONLY_TAG);
    testSeekBeforeWithReSeekToInternals(TagUsage.PARTIAL_TAG);
  }
  protected void testSeekBeforeWithReSeekToInternals(  TagUsage tagUsage) throws IOException {
    Path p=makeNewFile(tagUsage);
    FileSystem fs=TEST_UTIL.getTestFileSystem();
    Configuration conf=TEST_UTIL.getConfiguration();
    HFile.Reader reader=HFile.createReader(fs,p,new CacheConfig(conf),true,conf);
    reader.loadFileInfo();
    HFileScanner scanner=reader.getScanner(false,true);
    assertFalse(scanner.seekBefore(toKV("a",tagUsage)));
    assertFalse(scanner.seekBefore(toKV("b",tagUsage)));
    assertFalse(scanner.seekBefore(toKV("c",tagUsage)));
    assertTrue(scanner.seekBefore(toKV("d",tagUsage)));
    assertFalse(scanner.getCell() instanceof ByteBufferKeyValue);
    assertEquals("c",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("c",tagUsage)));
    assertEquals("c",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("g",tagUsage)));
    assertEquals("g",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("e",tagUsage)));
    assertEquals("c",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("e",tagUsage)));
    assertEquals("e",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("g",tagUsage)));
    assertEquals("g",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("f",tagUsage)));
    assertEquals("e",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("e",tagUsage)));
    assertEquals("e",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("g",tagUsage)));
    assertEquals("g",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("g",tagUsage)));
    assertEquals("e",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("e",tagUsage)));
    assertEquals("e",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("g",tagUsage)));
    assertEquals("g",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("h",tagUsage)));
    assertEquals("g",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("g",tagUsage)));
    assertEquals("g",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("i",tagUsage)));
    assertEquals("g",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("g",tagUsage)));
    assertEquals("g",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("j",tagUsage)));
    assertEquals("i",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("i",tagUsage)));
    assertEquals("i",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("k",tagUsage)));
    assertEquals("i",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("i",tagUsage)));
    assertEquals("i",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("k",tagUsage)));
    assertEquals("k",toRowStr(scanner.getCell()));
    assertTrue(scanner.seekBefore(toKV("l",tagUsage)));
    assertEquals("k",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.reseekTo(toKV("k",tagUsage)));
    assertEquals("k",toRowStr(scanner.getCell()));
    deleteTestDir(fs);
  }
  @Test public void testSeekTo() throws Exception {
    testSeekToInternals(TagUsage.NO_TAG);
    testSeekToInternals(TagUsage.ONLY_TAG);
    testSeekToInternals(TagUsage.PARTIAL_TAG);
  }
  protected void testSeekToInternals(  TagUsage tagUsage) throws IOException {
    Path p=makeNewFile(tagUsage);
    FileSystem fs=TEST_UTIL.getTestFileSystem();
    Configuration conf=TEST_UTIL.getConfiguration();
    HFile.Reader reader=HFile.createReader(fs,p,new CacheConfig(conf),true,conf);
    reader.loadFileInfo();
    assertEquals(2,reader.getDataBlockIndexReader().getRootBlockCount());
    HFileScanner scanner=reader.getScanner(false,true);
    assertEquals(-1,scanner.seekTo(toKV("a",tagUsage)));
    assertEquals(1,scanner.seekTo(toKV("d",tagUsage)));
    assertEquals("c",toRowStr(scanner.getCell()));
    assertEquals(0,scanner.seekTo(toKV("i",tagUsage)));
    assertEquals("i",toRowStr(scanner.getCell()));
    assertEquals(1,scanner.seekTo(toKV("l",tagUsage)));
    assertEquals("k",toRowStr(scanner.getCell()));
    reader.close();
    deleteTestDir(fs);
  }
  @Test public void testBlockContainingKey() throws Exception {
    testBlockContainingKeyInternals(TagUsage.NO_TAG);
    testBlockContainingKeyInternals(TagUsage.ONLY_TAG);
    testBlockContainingKeyInternals(TagUsage.PARTIAL_TAG);
  }
  protected void testBlockContainingKeyInternals(  TagUsage tagUsage) throws IOException {
    Path p=makeNewFile(tagUsage);
    FileSystem fs=TEST_UTIL.getTestFileSystem();
    Configuration conf=TEST_UTIL.getConfiguration();
    HFile.Reader reader=HFile.createReader(fs,p,new CacheConfig(conf),true,conf);
    reader.loadFileInfo();
    HFileBlockIndex.BlockIndexReader blockIndexReader=reader.getDataBlockIndexReader();
    System.out.println(blockIndexReader.toString());
    assertEquals(-1,blockIndexReader.rootBlockContainingKey(toKV("a",tagUsage)));
    assertEquals(0,blockIndexReader.rootBlockContainingKey(toKV("c",tagUsage)));
    assertEquals(0,blockIndexReader.rootBlockContainingKey(toKV("d",tagUsage)));
    assertEquals(0,blockIndexReader.rootBlockContainingKey(toKV("e",tagUsage)));
    assertEquals(0,blockIndexReader.rootBlockContainingKey(toKV("g",tagUsage)));
    assertEquals(1,blockIndexReader.rootBlockContainingKey(toKV("h",tagUsage)));
    assertEquals(1,blockIndexReader.rootBlockContainingKey(toKV("i",tagUsage)));
    assertEquals(1,blockIndexReader.rootBlockContainingKey(toKV("j",tagUsage)));
    assertEquals(1,blockIndexReader.rootBlockContainingKey(toKV("k",tagUsage)));
    assertEquals(1,blockIndexReader.rootBlockContainingKey(toKV("l",tagUsage)));
    reader.close();
    deleteTestDir(fs);
  }
}
