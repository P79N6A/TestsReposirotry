/** 
 * Unit test version of rs metrics tests.
 */
@Category({RegionServerTests.class,SmallTests.class}) public class TestMetricsHeapMemoryManager {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMetricsHeapMemoryManager.class);
  public static MetricsAssertHelper HELPER=CompatibilitySingletonFactory.getInstance(MetricsAssertHelper.class);
  private MetricsHeapMemoryManager hmm;
  private MetricsHeapMemoryManagerSource source;
  @Before public void setUp(){
    hmm=new MetricsHeapMemoryManager();
    source=hmm.getMetricsSource();
  }
  @Test public void testConstuctor(){
    assertNotNull("There should be a hadoop1/hadoop2 metrics source",source);
  }
  @Test public void testCounter(){
    for (int i=0; i < 10; i++) {
      hmm.increaseAboveHeapOccupancyLowWatermarkCounter();
    }
    for (int i=0; i < 11; i++) {
      hmm.increaseTunerDoNothingCounter();
    }
    HELPER.assertCounter("aboveHeapOccupancyLowWaterMarkCounter",10L,source);
    HELPER.assertCounter("tunerDoNothingCounter",11L,source);
  }
  @Test public void testGauge(){
    hmm.updateBlockedFlushCount(200);
    hmm.updateUnblockedFlushCount(50);
    hmm.setCurMemStoreSizeGauge(256 * 1024 * 1024);
    hmm.setCurBlockCacheSizeGauge(100 * 1024 * 1024);
    HELPER.assertGauge("blockedFlushGauge",200,source);
    HELPER.assertGauge("unblockedFlushGauge",50,source);
    HELPER.assertGauge("memStoreSize",256 * 1024 * 1024,source);
    HELPER.assertGauge("blockCacheSize",100 * 1024 * 1024,source);
  }
}
