@Category({CoprocessorTests.class,MediumTests.class}) public class TestRegionServerCoprocessorEndpoint {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRegionServerCoprocessorEndpoint.class);
  public static final FileNotFoundException WHAT_TO_THROW=new FileNotFoundException("/file.txt");
  private static HBaseTestingUtility TEST_UTIL=null;
  private static Configuration CONF=null;
  private static final String DUMMY_VALUE="val";
  @BeforeClass public static void setupBeforeClass() throws Exception {
    TEST_UTIL=new HBaseTestingUtility();
    CONF=TEST_UTIL.getConfiguration();
    CONF.setStrings(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY,DummyRegionServerEndpoint.class.getName());
    TEST_UTIL.startMiniCluster();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testEndpoint() throws Exception {
    final ServerName serverName=TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();
    final ServerRpcController controller=new ServerRpcController();
    final CoprocessorRpcUtils.BlockingRpcCallback<DummyRegionServerEndpointProtos.DummyResponse> rpcCallback=new CoprocessorRpcUtils.BlockingRpcCallback<>();
    DummyRegionServerEndpointProtos.DummyService service=ProtobufUtil.newServiceStub(DummyRegionServerEndpointProtos.DummyService.class,TEST_UTIL.getAdmin().coprocessorService(serverName));
    service.dummyCall(controller,DummyRegionServerEndpointProtos.DummyRequest.getDefaultInstance(),rpcCallback);
    assertEquals(DUMMY_VALUE,rpcCallback.get().getValue());
    if (controller.failedOnException()) {
      throw controller.getFailedOn();
    }
  }
  @Test public void testEndpointExceptions() throws Exception {
    final ServerName serverName=TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();
    final ServerRpcController controller=new ServerRpcController();
    final CoprocessorRpcUtils.BlockingRpcCallback<DummyRegionServerEndpointProtos.DummyResponse> rpcCallback=new CoprocessorRpcUtils.BlockingRpcCallback<>();
    DummyRegionServerEndpointProtos.DummyService service=ProtobufUtil.newServiceStub(DummyRegionServerEndpointProtos.DummyService.class,TEST_UTIL.getAdmin().coprocessorService(serverName));
    service.dummyThrow(controller,DummyRegionServerEndpointProtos.DummyRequest.getDefaultInstance(),rpcCallback);
    assertEquals(null,rpcCallback.get());
    assertTrue(controller.failedOnException());
    assertEquals(WHAT_TO_THROW.getClass().getName().trim(),((RemoteWithExtrasException)controller.getFailedOn().getCause()).getClassName().trim());
  }
public static class DummyRegionServerEndpoint extends DummyService implements RegionServerCoprocessor {
    @Override public Iterable<Service> getServices(){
      return Collections.singleton(this);
    }
    @Override public void dummyCall(    RpcController controller,    DummyRequest request,    RpcCallback<DummyResponse> callback){
      callback.run(DummyResponse.newBuilder().setValue(DUMMY_VALUE).build());
    }
    @Override public void dummyThrow(    RpcController controller,    DummyRequest request,    RpcCallback<DummyResponse> done){
      CoprocessorRpcUtils.setControllerException(controller,WHAT_TO_THROW);
    }
  }
}
