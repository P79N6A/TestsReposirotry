/** 
 * Coprocessor that creates an HTable with a pool to write to another table
 */
public static class CustomThreadPoolCoprocessor implements RegionCoprocessor, RegionObserver {
  /** 
 * Get a pool that has only ever one thread. A second action added to the pool (running concurrently), will cause an exception.
 * @return
 */
  private ExecutorService getPool(){
    int maxThreads=1;
    long keepAliveTime=60;
    ThreadPoolExecutor pool=new ThreadPoolExecutor(1,maxThreads,keepAliveTime,TimeUnit.SECONDS,new SynchronousQueue<>(),Threads.newDaemonThreadFactory("hbase-table"));
    pool.allowCoreThreadTimeOut(true);
    return pool;
  }
  @Override public Optional<RegionObserver> getRegionObserver(){
    return Optional.of(this);
  }
  @Override public void prePut(  final ObserverContext<RegionCoprocessorEnvironment> e,  final Put put,  final WALEdit edit,  final Durability durability) throws IOException {
    try (Table table=e.getEnvironment().getConnection().getTable(otherTable,getPool())){
      Put p=new Put(new byte[]{'a'});
      p.addColumn(family,null,new byte[]{'a'});
      try {
        table.batch(Collections.singletonList(put),null);
      }
 catch (      InterruptedException e1) {
        throw new IOException(e1);
      }
      completedWithPool[0]=true;
    }
   }
}
