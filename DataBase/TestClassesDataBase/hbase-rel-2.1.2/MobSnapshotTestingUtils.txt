public class MobSnapshotTestingUtils {
  /** 
 * Create the Mob Table.
 */
  public static void createMobTable(  final HBaseTestingUtility util,  final TableName tableName,  int regionReplication,  final byte[]... families) throws IOException, InterruptedException {
    createMobTable(util,tableName,SnapshotTestingUtils.getSplitKeys(),regionReplication,families);
  }
  public static void createPreSplitMobTable(  final HBaseTestingUtility util,  final TableName tableName,  int nRegions,  final byte[]... families) throws IOException, InterruptedException {
    createMobTable(util,tableName,SnapshotTestingUtils.getSplitKeys(nRegions),1,families);
  }
  public static void createMobTable(  final HBaseTestingUtility util,  final TableName tableName,  final byte[][] splitKeys,  int regionReplication,  final byte[]... families) throws IOException, InterruptedException {
    createMobTable(util,tableName,splitKeys,regionReplication,null,families);
  }
  public static void createMobTable(  HBaseTestingUtility util,  TableName tableName,  byte[][] splitKeys,  int regionReplication,  String cpClassName,  byte[]... families) throws IOException, InterruptedException {
    TableDescriptorBuilder builder=TableDescriptorBuilder.newBuilder(tableName).setRegionReplication(regionReplication);
    for (    byte[] family : families) {
      builder.setColumnFamily(ColumnFamilyDescriptorBuilder.newBuilder(family).setMobEnabled(true).setMobThreshold(0L).build());
    }
    if (!StringUtils.isBlank(cpClassName)) {
      builder.setCoprocessor(cpClassName);
    }
    util.getAdmin().createTable(builder.build(),splitKeys);
    SnapshotTestingUtils.waitForTableToBeOnline(util,tableName);
    assertEquals((splitKeys.length + 1) * regionReplication,util.getAdmin().getRegions(tableName).size());
  }
  /** 
 * Create a Mob table.
 * @param util
 * @param tableName
 * @param families
 * @return An Table instance for the created table.
 * @throws IOException
 */
  public static Table createMobTable(  final HBaseTestingUtility util,  final TableName tableName,  final byte[]... families) throws IOException {
    TableDescriptorBuilder builder=TableDescriptorBuilder.newBuilder(tableName);
    for (    byte[] family : families) {
      builder.setColumnFamily(ColumnFamilyDescriptorBuilder.newBuilder(family).setBloomFilterType(BloomType.NONE).setMobEnabled(true).setMobThreshold(0L).build());
    }
    util.getAdmin().createTable(builder.build());
    util.waitUntilAllRegionsAssigned(tableName);
    return ConnectionFactory.createConnection(util.getConfiguration()).getTable(tableName);
  }
  /** 
 * Return the number of rows in the given table.
 */
  public static int countMobRows(  final Table table,  final byte[]... families) throws IOException {
    Scan scan=new Scan();
    for (    byte[] family : families) {
      scan.addFamily(family);
    }
    try (ResultScanner results=table.getScanner(scan)){
      int count=0;
      for (Result res; (res=results.next()) != null; ) {
        count++;
        for (        Cell cell : res.listCells()) {
          Assert.assertTrue(CellUtil.cloneValue(cell).length > 0);
        }
      }
      return count;
    }
   }
  public static void verifyMobRowCount(  final HBaseTestingUtility util,  final TableName tableName,  long expectedRows) throws IOException {
    Table table=ConnectionFactory.createConnection(util.getConfiguration()).getTable(tableName);
    try {
      assertEquals(expectedRows,countMobRows(table));
    }
  finally {
      table.close();
    }
  }
public static class SnapshotMock extends SnapshotTestingUtils.SnapshotMock {
    public SnapshotMock(    final Configuration conf,    final FileSystem fs,    final Path rootDir){
      super(conf,fs,rootDir);
    }
    @Override public TableDescriptor createHtd(    final String tableName){
      return TableDescriptorBuilder.newBuilder(TableName.valueOf(tableName)).setColumnFamily(ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes(TEST_FAMILY)).setMobEnabled(true).setMobThreshold(0L).build()).build();
    }
  }
}
