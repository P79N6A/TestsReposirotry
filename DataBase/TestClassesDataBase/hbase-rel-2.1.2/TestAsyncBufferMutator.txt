@Category({MediumTests.class,ClientTests.class}) public class TestAsyncBufferMutator {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAsyncBufferMutator.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static TableName TABLE_NAME=TableName.valueOf("async");
  private static TableName MULTI_REGION_TABLE_NAME=TableName.valueOf("async-multi-region");
  private static byte[] CF=Bytes.toBytes("cf");
  private static byte[] CQ=Bytes.toBytes("cq");
  private static int COUNT=100;
  private static byte[] VALUE=new byte[1024];
  private static AsyncConnection CONN;
  @BeforeClass public static void setUp() throws Exception {
    TEST_UTIL.startMiniCluster(1);
    TEST_UTIL.createTable(TABLE_NAME,CF);
    TEST_UTIL.createMultiRegionTable(MULTI_REGION_TABLE_NAME,CF);
    CONN=ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();
    ThreadLocalRandom.current().nextBytes(VALUE);
  }
  @AfterClass public static void tearDown() throws Exception {
    CONN.close();
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testWithMultiRegionTable() throws InterruptedException {
    test(MULTI_REGION_TABLE_NAME);
  }
  @Test public void testWithSingleRegionTable() throws InterruptedException {
    test(TABLE_NAME);
  }
  private void test(  TableName tableName) throws InterruptedException {
    List<CompletableFuture<Void>> futures=new ArrayList<>();
    try (AsyncBufferedMutator mutator=CONN.getBufferedMutatorBuilder(tableName).setWriteBufferSize(16 * 1024).build()){
      List<CompletableFuture<Void>> fs=mutator.mutate(IntStream.range(0,COUNT / 2).mapToObj(i -> new Put(Bytes.toBytes(i)).addColumn(CF,CQ,VALUE)).collect(Collectors.toList()));
      fs.forEach(f -> f.join());
      IntStream.range(COUNT / 2,COUNT).forEach(i -> {
        futures.add(mutator.mutate(new Put(Bytes.toBytes(i)).addColumn(CF,CQ,VALUE)));
      }
);
      futures.get(0).join();
      Thread.sleep(2000);
      assertFalse(futures.get(futures.size() - 1).isDone());
    }
     futures.forEach(f -> f.join());
    AsyncTable<?> table=CONN.getTable(tableName);
    IntStream.range(0,COUNT).mapToObj(i -> new Get(Bytes.toBytes(i))).map(g -> table.get(g).join()).forEach(r -> {
      assertArrayEquals(VALUE,r.getValue(CF,CQ));
    }
);
  }
  @Test public void testClosedMutate() throws InterruptedException {
    AsyncBufferedMutator mutator=CONN.getBufferedMutator(TABLE_NAME);
    mutator.close();
    Put put=new Put(Bytes.toBytes(0)).addColumn(CF,CQ,VALUE);
    try {
      mutator.mutate(put).get();
      fail("Close check failed");
    }
 catch (    ExecutionException e) {
      assertThat(e.getCause(),instanceOf(IOException.class));
      assertTrue(e.getCause().getMessage().startsWith("Already closed"));
    }
    for (    CompletableFuture<Void> f : mutator.mutate(Arrays.asList(put))) {
      try {
        f.get();
        fail("Close check failed");
      }
 catch (      ExecutionException e) {
        assertThat(e.getCause(),instanceOf(IOException.class));
        assertTrue(e.getCause().getMessage().startsWith("Already closed"));
      }
    }
  }
  @Test public void testNoPeriodicFlush() throws InterruptedException, ExecutionException {
    try (AsyncBufferedMutator mutator=CONN.getBufferedMutatorBuilder(TABLE_NAME).disableWriteBufferPeriodicFlush().build()){
      Put put=new Put(Bytes.toBytes(0)).addColumn(CF,CQ,VALUE);
      CompletableFuture<?> future=mutator.mutate(put);
      Thread.sleep(2000);
      assertFalse(future.isDone());
      mutator.flush();
      future.get();
    }
     AsyncTable<?> table=CONN.getTable(TABLE_NAME);
    assertArrayEquals(VALUE,table.get(new Get(Bytes.toBytes(0))).get().getValue(CF,CQ));
  }
  @Test public void testPeriodicFlush() throws InterruptedException, ExecutionException {
    AsyncBufferedMutator mutator=CONN.getBufferedMutatorBuilder(TABLE_NAME).setWriteBufferPeriodicFlush(1,TimeUnit.SECONDS).build();
    Put put=new Put(Bytes.toBytes(0)).addColumn(CF,CQ,VALUE);
    CompletableFuture<?> future=mutator.mutate(put);
    future.get();
    AsyncTable<?> table=CONN.getTable(TABLE_NAME);
    assertArrayEquals(VALUE,table.get(new Get(Bytes.toBytes(0))).get().getValue(CF,CQ));
  }
  @Test public void testCancelPeriodicFlush() throws InterruptedException, ExecutionException {
    Put put=new Put(Bytes.toBytes(0)).addColumn(CF,CQ,VALUE);
    try (AsyncBufferedMutatorImpl mutator=(AsyncBufferedMutatorImpl)CONN.getBufferedMutatorBuilder(TABLE_NAME).setWriteBufferPeriodicFlush(1,TimeUnit.SECONDS).setWriteBufferSize(10 * put.heapSize()).build()){
      List<CompletableFuture<?>> futures=new ArrayList<>();
      futures.add(mutator.mutate(put));
      Timeout task=mutator.periodicFlushTask;
      assertNotNull(task);
      for (int i=1; ; i++) {
        futures.add(mutator.mutate(new Put(Bytes.toBytes(i)).addColumn(CF,CQ,VALUE)));
        if (mutator.periodicFlushTask == null) {
          break;
        }
      }
      assertTrue(task.isCancelled());
      CompletableFuture.allOf(futures.toArray(new CompletableFuture[0])).join();
      AsyncTable<?> table=CONN.getTable(TABLE_NAME);
      for (int i=0; i < futures.size(); i++) {
        assertArrayEquals(VALUE,table.get(new Get(Bytes.toBytes(i))).get().getValue(CF,CQ));
      }
    }
   }
  @Test public void testCancelPeriodicFlushByManuallyFlush() throws InterruptedException, ExecutionException {
    try (AsyncBufferedMutatorImpl mutator=(AsyncBufferedMutatorImpl)CONN.getBufferedMutatorBuilder(TABLE_NAME).setWriteBufferPeriodicFlush(1,TimeUnit.SECONDS).build()){
      CompletableFuture<?> future=mutator.mutate(new Put(Bytes.toBytes(0)).addColumn(CF,CQ,VALUE));
      Timeout task=mutator.periodicFlushTask;
      assertNotNull(task);
      mutator.flush();
      assertTrue(task.isCancelled());
      future.get();
      AsyncTable<?> table=CONN.getTable(TABLE_NAME);
      assertArrayEquals(VALUE,table.get(new Get(Bytes.toBytes(0))).get().getValue(CF,CQ));
    }
   }
  @Test public void testCancelPeriodicFlushByClose() throws InterruptedException, ExecutionException {
    CompletableFuture<?> future;
    Timeout task;
    try (AsyncBufferedMutatorImpl mutator=(AsyncBufferedMutatorImpl)CONN.getBufferedMutatorBuilder(TABLE_NAME).setWriteBufferPeriodicFlush(1,TimeUnit.SECONDS).build()){
      future=mutator.mutate(new Put(Bytes.toBytes(0)).addColumn(CF,CQ,VALUE));
      task=mutator.periodicFlushTask;
      assertNotNull(task);
    }
     assertTrue(task.isCancelled());
    future.get();
    AsyncTable<?> table=CONN.getTable(TABLE_NAME);
    assertArrayEquals(VALUE,table.get(new Get(Bytes.toBytes(0))).get().getValue(CF,CQ));
  }
private static final class AsyncBufferMutatorForTest extends AsyncBufferedMutatorImpl {
    private int flushCount;
    AsyncBufferMutatorForTest(    HashedWheelTimer periodicalFlushTimer,    AsyncTable<?> table,    long writeBufferSize,    long periodicFlushTimeoutNs){
      super(periodicalFlushTimer,table,writeBufferSize,periodicFlushTimeoutNs);
    }
    @Override protected void internalFlush(){
      flushCount++;
      super.internalFlush();
    }
  }
  @Test public void testRaceBetweenNormalFlushAndPeriodicFlush() throws InterruptedException, ExecutionException {
    Put put=new Put(Bytes.toBytes(0)).addColumn(CF,CQ,VALUE);
    try (AsyncBufferMutatorForTest mutator=new AsyncBufferMutatorForTest(AsyncConnectionImpl.RETRY_TIMER,CONN.getTable(TABLE_NAME),10 * put.heapSize(),TimeUnit.MILLISECONDS.toNanos(200))){
      CompletableFuture<?> future=mutator.mutate(put);
      Timeout task=mutator.periodicFlushTask;
      assertNotNull(task);
synchronized (mutator) {
        Thread.sleep(500);
        assertTrue(task.isExpired());
        assertEquals(0,mutator.flushCount);
        assertFalse(future.isDone());
        mutator.flush();
      }
      assertFalse(task.isCancelled());
      future.get();
      AsyncTable<?> table=CONN.getTable(TABLE_NAME);
      assertArrayEquals(VALUE,table.get(new Get(Bytes.toBytes(0))).get().getValue(CF,CQ));
      assertEquals(1,mutator.flushCount);
    }
   }
}
