/** 
 * Test the refreshKeys in ZKSecretWatcher
 */
@Category({SecurityTests.class,SmallTests.class}) public class TestZKSecretWatcherRefreshKeys {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestZKSecretWatcherRefreshKeys.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestZKSecretWatcherRefreshKeys.class);
  private static HBaseTestingUtility TEST_UTIL;
private static class MockAbortable implements Abortable {
    private boolean abort;
    @Override public void abort(    String reason,    Throwable e){
      LOG.info("Aborting: " + reason,e);
      abort=true;
    }
    @Override public boolean isAborted(){
      return abort;
    }
  }
  @BeforeClass public static void setupBeforeClass() throws Exception {
    TEST_UTIL=new HBaseTestingUtility();
    TEST_UTIL.startMiniZKCluster();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniZKCluster();
  }
  private static ZKWatcher newZK(  Configuration conf,  String name,  Abortable abort) throws Exception {
    Configuration copy=HBaseConfiguration.create(conf);
    ZKWatcher zk=new ZKWatcher(copy,name,abort);
    return zk;
  }
  @Test public void testRefreshKeys() throws Exception {
    Configuration conf=TEST_UTIL.getConfiguration();
    ZKWatcher zk=newZK(conf,"127.0.0.1",new MockAbortable());
    AuthenticationTokenSecretManager keyManager=new AuthenticationTokenSecretManager(conf,zk,"127.0.0.1",60 * 60 * 1000,60 * 1000);
    ZKSecretWatcher watcher=new ZKSecretWatcher(conf,zk,keyManager);
    ZKUtil.deleteChildrenRecursively(zk,watcher.getKeysParentZNode());
    Integer[] keys={1,2,3,4,5,6};
    for (    Integer key : keys) {
      AuthenticationKey ak=new AuthenticationKey(key,System.currentTimeMillis() + 600 * 1000,null);
      ZKUtil.createWithParents(zk,ZNodePaths.joinZNode(watcher.getKeysParentZNode(),key.toString()),Writables.getBytes(ak));
    }
    Assert.assertNull(keyManager.getCurrentKey());
    watcher.refreshKeys();
    for (    Integer key : keys) {
      Assert.assertNotNull(keyManager.getKey(key.intValue()));
    }
  }
}
