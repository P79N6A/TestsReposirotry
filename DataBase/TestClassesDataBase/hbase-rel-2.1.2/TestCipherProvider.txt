@Category({MiscTests.class,SmallTests.class}) public class TestCipherProvider {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCipherProvider.class);
public static class MyCipherProvider implements CipherProvider {
    private Configuration conf;
    @Override public Configuration getConf(){
      return conf;
    }
    @Override public void setConf(    Configuration conf){
      this.conf=conf;
    }
    @Override public String getName(){
      return MyCipherProvider.class.getName();
    }
    @Override public String[] getSupportedCiphers(){
      return new String[]{"TEST"};
    }
    @Override public Cipher getCipher(    String name){
      if (name.equals("TEST")) {
        return new Cipher(this){
          @Override public String getName(){
            return "TEST";
          }
          @Override public int getKeyLength(){
            return 0;
          }
          @Override public int getIvLength(){
            return 0;
          }
          @Override public Key getRandomKey(){
            return null;
          }
          @Override public Encryptor getEncryptor(){
            return null;
          }
          @Override public Decryptor getDecryptor(){
            return null;
          }
          @Override public OutputStream createEncryptionStream(          OutputStream out,          Context context,          byte[] iv) throws IOException {
            return null;
          }
          @Override public OutputStream createEncryptionStream(          OutputStream out,          Encryptor encryptor) throws IOException {
            return null;
          }
          @Override public InputStream createDecryptionStream(          InputStream in,          Context context,          byte[] iv) throws IOException {
            return null;
          }
          @Override public InputStream createDecryptionStream(          InputStream in,          Decryptor decryptor) throws IOException {
            return null;
          }
        }
;
      }
      return null;
    }
  }
  @Test public void testCustomProvider(){
    Configuration conf=HBaseConfiguration.create();
    conf.set(HConstants.CRYPTO_CIPHERPROVIDER_CONF_KEY,MyCipherProvider.class.getName());
    CipherProvider provider=Encryption.getCipherProvider(conf);
    assertTrue(provider instanceof MyCipherProvider);
    assertTrue(Arrays.asList(provider.getSupportedCiphers()).contains("TEST"));
    Cipher a=Encryption.getCipher(conf,"TEST");
    assertNotNull(a);
    assertTrue(a.getProvider() instanceof MyCipherProvider);
    assertEquals("TEST",a.getName());
    assertEquals(0,a.getKeyLength());
  }
  @Test public void testDefaultProvider(){
    Configuration conf=HBaseConfiguration.create();
    CipherProvider provider=Encryption.getCipherProvider(conf);
    assertTrue(provider instanceof DefaultCipherProvider);
    String algorithm=conf.get(HConstants.CRYPTO_KEY_ALGORITHM_CONF_KEY,HConstants.CIPHER_AES);
    assertTrue(Arrays.asList(provider.getSupportedCiphers()).contains(algorithm));
    Cipher a=Encryption.getCipher(conf,algorithm);
    assertNotNull(a);
    assertTrue(a.getProvider() instanceof DefaultCipherProvider);
    assertEquals(a.getName(),algorithm);
    assertEquals(AES.KEY_LENGTH,a.getKeyLength());
  }
}
