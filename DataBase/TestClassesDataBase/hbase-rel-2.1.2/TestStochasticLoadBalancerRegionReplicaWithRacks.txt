@Category({MasterTests.class,LargeTests.class}) public class TestStochasticLoadBalancerRegionReplicaWithRacks extends BalancerTestBase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestStochasticLoadBalancerRegionReplicaWithRacks.class);
private static class ForTestRackManager extends RackManager {
    int numRacks;
    public ForTestRackManager(    int numRacks){
      this.numRacks=numRacks;
    }
    @Override public String getRack(    ServerName server){
      return "rack_" + (server.hashCode() % numRacks);
    }
  }
  @Test public void testRegionReplicationOnMidClusterWithRacks(){
    conf.setLong(StochasticLoadBalancer.MAX_STEPS_KEY,10000000L);
    conf.setFloat("hbase.master.balancer.stochastic.maxMovePercent",1.0f);
    conf.setLong("hbase.master.balancer.stochastic.maxRunningTime",120 * 1000);
    loadBalancer.setConf(conf);
    int numNodes=30;
    int numRegions=numNodes * 30;
    int replication=3;
    int numRegionsPerServer=28;
    int numTables=10;
    int numRacks=4;
    Map<ServerName,List<RegionInfo>> serverMap=createServerMap(numNodes,numRegions,numRegionsPerServer,replication,numTables);
    RackManager rm=new ForTestRackManager(numRacks);
    testWithCluster(serverMap,rm,false,true);
  }
}
