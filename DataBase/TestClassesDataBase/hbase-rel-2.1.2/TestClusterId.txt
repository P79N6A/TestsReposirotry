/** 
 * Test metrics incremented on region server operations.
 */
@Category({RegionServerTests.class,MediumTests.class}) public class TestClusterId {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestClusterId.class);
  private final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private JVMClusterUtil.RegionServerThread rst;
  @Before public void setUp() throws Exception {
    TEST_UTIL.getConfiguration().setBoolean(ShutdownHook.RUN_SHUTDOWN_HOOK,false);
  }
  @After public void tearDown() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
    if (rst != null && rst.getRegionServer() != null) {
      rst.getRegionServer().stop("end of test");
      rst.join();
    }
  }
  @Test public void testClusterId() throws Exception {
    TEST_UTIL.startMiniZKCluster();
    TEST_UTIL.startMiniDFSCluster(1);
    Configuration conf=new Configuration(TEST_UTIL.getConfiguration());
    rst=JVMClusterUtil.createRegionServerThread(conf,HRegionServer.class,0);
    rst.start();
    Thread.sleep(10000);
    TEST_UTIL.startMiniHBaseCluster(1,0);
    rst.waitForServerOnline();
    String clusterId=ZKClusterId.readClusterIdZNode(TEST_UTIL.getZooKeeperWatcher());
    assertNotNull(clusterId);
    assertEquals(clusterId,rst.getRegionServer().getClusterId());
  }
  @Test public void testRewritingClusterIdToPB() throws Exception {
    TEST_UTIL.startMiniZKCluster();
    TEST_UTIL.startMiniDFSCluster(1);
    TEST_UTIL.createRootDir();
    Path rootDir=FSUtils.getRootDir(TEST_UTIL.getConfiguration());
    FileSystem fs=rootDir.getFileSystem(TEST_UTIL.getConfiguration());
    Path filePath=new Path(rootDir,HConstants.CLUSTER_ID_FILE_NAME);
    FSDataOutputStream s=null;
    try {
      s=fs.create(filePath);
      s.writeUTF(TEST_UTIL.getRandomUUID().toString());
    }
  finally {
      if (s != null) {
        s.close();
      }
    }
    TEST_UTIL.startMiniHBaseCluster(1,1);
    HMaster master=TEST_UTIL.getHBaseCluster().getMaster();
    int expected=LoadBalancer.isTablesOnMaster(TEST_UTIL.getConfiguration()) ? 2 : 1;
    assertEquals(expected,master.getServerManager().getOnlineServersList().size());
  }
}
