/** 
 * Dummy Master Implementation.
 */
public static class DummyMaster implements Server {
  private volatile boolean stopped;
  private ClusterStatusTracker clusterStatusTracker;
  private ActiveMasterManager activeMasterManager;
  public DummyMaster(  ZKWatcher zk,  ServerName master){
    this.clusterStatusTracker=new ClusterStatusTracker(zk,this);
    clusterStatusTracker.start();
    this.activeMasterManager=new ActiveMasterManager(zk,master,this);
    zk.registerListener(activeMasterManager);
  }
  @Override public void abort(  final String msg,  final Throwable t){
  }
  @Override public boolean isAborted(){
    return false;
  }
  @Override public Configuration getConfiguration(){
    return null;
  }
  @Override public ZKWatcher getZooKeeper(){
    return null;
  }
  @Override public CoordinatedStateManager getCoordinatedStateManager(){
    return null;
  }
  @Override public ServerName getServerName(){
    return null;
  }
  @Override public boolean isStopped(){
    return this.stopped;
  }
  @Override public void stop(  String why){
    this.stopped=true;
  }
  @Override public ClusterConnection getConnection(){
    return null;
  }
  @Override public MetaTableLocator getMetaTableLocator(){
    return null;
  }
  public ClusterStatusTracker getClusterStatusTracker(){
    return clusterStatusTracker;
  }
  public ActiveMasterManager getActiveMasterManager(){
    return activeMasterManager;
  }
  @Override public ChoreService getChoreService(){
    return null;
  }
  @Override public ClusterConnection getClusterConnection(){
    return null;
  }
  @Override public FileSystem getFileSystem(){
    return null;
  }
  @Override public boolean isStopping(){
    return false;
  }
  @Override public Connection createConnection(  Configuration conf) throws IOException {
    return null;
  }
}
