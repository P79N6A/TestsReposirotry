@Category({RegionServerTests.class,SmallTests.class}) public class TestWALCellCodecWithCompression {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestWALCellCodecWithCompression.class);
  @Test public void testEncodeDecodeKVsWithTags() throws Exception {
    doTest(false,false);
  }
  @Test public void testEncodeDecodeKVsWithTagsWithTagsCompression() throws Exception {
    doTest(true,false);
  }
  @Test public void testEncodeDecodeOffKVsWithTagsWithTagsCompression() throws Exception {
    doTest(true,true);
  }
  private void doTest(  boolean compressTags,  boolean offheapKV) throws Exception {
    Configuration conf=new Configuration(false);
    conf.setBoolean(CompressionContext.ENABLE_WAL_TAGS_COMPRESSION,compressTags);
    WALCellCodec codec=new WALCellCodec(conf,new CompressionContext(LRUDictionary.class,false,compressTags));
    ByteArrayOutputStream bos=new ByteArrayOutputStream(1024);
    Encoder encoder=codec.getEncoder(bos);
    if (offheapKV) {
      encoder.write(createOffheapKV(1));
      encoder.write(createOffheapKV(0));
      encoder.write(createOffheapKV(2));
    }
 else {
      encoder.write(createKV(1));
      encoder.write(createKV(0));
      encoder.write(createKV(2));
    }
    InputStream is=new ByteArrayInputStream(bos.toByteArray());
    Decoder decoder=codec.getDecoder(is);
    decoder.advance();
    KeyValue kv=(KeyValue)decoder.current();
    List<Tag> tags=PrivateCellUtil.getTags(kv);
    assertEquals(1,tags.size());
    assertEquals("tagValue1",Bytes.toString(Tag.cloneValue(tags.get(0))));
    decoder.advance();
    kv=(KeyValue)decoder.current();
    tags=PrivateCellUtil.getTags(kv);
    assertEquals(0,tags.size());
    decoder.advance();
    kv=(KeyValue)decoder.current();
    tags=PrivateCellUtil.getTags(kv);
    assertEquals(2,tags.size());
    assertEquals("tagValue1",Bytes.toString(Tag.cloneValue(tags.get(0))));
    assertEquals("tagValue2",Bytes.toString(Tag.cloneValue(tags.get(1))));
  }
  private KeyValue createKV(  int noOfTags){
    byte[] row=Bytes.toBytes("myRow");
    byte[] cf=Bytes.toBytes("myCF");
    byte[] q=Bytes.toBytes("myQualifier");
    byte[] value=Bytes.toBytes("myValue");
    List<Tag> tags=new ArrayList<>(noOfTags);
    for (int i=1; i <= noOfTags; i++) {
      tags.add(new ArrayBackedTag((byte)i,Bytes.toBytes("tagValue" + i)));
    }
    return new KeyValue(row,cf,q,HConstants.LATEST_TIMESTAMP,value,tags);
  }
  private ByteBufferKeyValue createOffheapKV(  int noOfTags){
    byte[] row=Bytes.toBytes("myRow");
    byte[] cf=Bytes.toBytes("myCF");
    byte[] q=Bytes.toBytes("myQualifier");
    byte[] value=Bytes.toBytes("myValue");
    List<Tag> tags=new ArrayList<>(noOfTags);
    for (int i=1; i <= noOfTags; i++) {
      tags.add(new ArrayBackedTag((byte)i,Bytes.toBytes("tagValue" + i)));
    }
    KeyValue kv=new KeyValue(row,cf,q,HConstants.LATEST_TIMESTAMP,value,tags);
    ByteBuffer dbb=ByteBuffer.allocateDirect(kv.getBuffer().length);
    dbb.put(kv.getBuffer());
    return new ByteBufferKeyValue(dbb,0,kv.getBuffer().length);
  }
}
