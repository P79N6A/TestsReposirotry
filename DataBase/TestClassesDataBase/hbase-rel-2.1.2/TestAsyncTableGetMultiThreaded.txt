/** 
 * Will split the table, and move region randomly when testing.
 */
@Category({LargeTests.class,ClientTests.class}) public class TestAsyncTableGetMultiThreaded {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAsyncTableGetMultiThreaded.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static TableName TABLE_NAME=TableName.valueOf("async");
  private static byte[] FAMILY=Bytes.toBytes("cf");
  private static byte[] QUALIFIER=Bytes.toBytes("cq");
  private static int COUNT=1000;
  private static AsyncConnection CONN;
  private static AsyncTable<?> TABLE;
  private static byte[][] SPLIT_KEYS;
  @BeforeClass public static void setUp() throws Exception {
    setUp(MemoryCompactionPolicy.NONE);
  }
  protected static void setUp(  MemoryCompactionPolicy memoryCompaction) throws Exception {
    TEST_UTIL.getConfiguration().set(TABLES_ON_MASTER,"none");
    TEST_UTIL.getConfiguration().setLong(HBASE_CLIENT_META_OPERATION_TIMEOUT,60000L);
    TEST_UTIL.getConfiguration().setInt(ByteBufferPool.MAX_POOL_SIZE_KEY,100);
    TEST_UTIL.getConfiguration().set(CompactingMemStore.COMPACTING_MEMSTORE_TYPE_KEY,String.valueOf(memoryCompaction));
    TEST_UTIL.startMiniCluster(5);
    SPLIT_KEYS=new byte[8][];
    for (int i=111; i < 999; i+=111) {
      SPLIT_KEYS[i / 111 - 1]=Bytes.toBytes(String.format("%03d",i));
    }
    TEST_UTIL.createTable(TABLE_NAME,FAMILY);
    TEST_UTIL.waitTableAvailable(TABLE_NAME);
    CONN=ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();
    TABLE=CONN.getTableBuilder(TABLE_NAME).setReadRpcTimeout(1,TimeUnit.SECONDS).setMaxRetries(1000).build();
    TABLE.putAll(IntStream.range(0,COUNT).mapToObj(i -> new Put(Bytes.toBytes(String.format("%03d",i))).addColumn(FAMILY,QUALIFIER,Bytes.toBytes(i))).collect(Collectors.toList())).get();
  }
  @AfterClass public static void tearDown() throws Exception {
    IOUtils.closeQuietly(CONN);
    TEST_UTIL.shutdownMiniCluster();
  }
  private void run(  AtomicBoolean stop) throws InterruptedException, ExecutionException {
    while (!stop.get()) {
      for (int i=0; i < COUNT; i++) {
        assertEquals(i,Bytes.toInt(TABLE.get(new Get(Bytes.toBytes(String.format("%03d",i)))).get().getValue(FAMILY,QUALIFIER)));
      }
    }
  }
  @Test public void test() throws Exception {
    int numThreads=20;
    AtomicBoolean stop=new AtomicBoolean(false);
    ExecutorService executor=Executors.newFixedThreadPool(numThreads,Threads.newDaemonThreadFactory("TestAsyncGet-"));
    List<Future<?>> futures=new ArrayList<>();
    IntStream.range(0,numThreads).forEach(i -> futures.add(executor.submit(() -> {
      run(stop);
      return null;
    }
)));
    Collections.shuffle(Arrays.asList(SPLIT_KEYS),new Random(123));
    Admin admin=TEST_UTIL.getAdmin();
    for (    byte[] splitPoint : SPLIT_KEYS) {
      int oldRegionCount=admin.getRegions(TABLE_NAME).size();
      admin.split(TABLE_NAME,splitPoint);
      TEST_UTIL.waitFor(30000,new ExplainingPredicate<Exception>(){
        @Override public boolean evaluate() throws Exception {
          return TEST_UTIL.getMiniHBaseCluster().getRegions(TABLE_NAME).size() > oldRegionCount;
        }
        @Override public String explainFailure() throws Exception {
          return "Split has not finished yet";
        }
      }
);
      for (      HRegion region : TEST_UTIL.getHBaseCluster().getRegions(TABLE_NAME)) {
        region.compact(true);
        RetryCounter retrier=new RetryCounter(30,1,TimeUnit.SECONDS);
        while (CompactionState.NONE != admin.getCompactionStateForRegion(region.getRegionInfo().getRegionName()) && retrier.shouldRetry()) {
          retrier.sleepUntilNextRetry();
        }
        region.getStores().get(0).closeAndArchiveCompactedFiles();
      }
      Thread.sleep(5000);
      admin.balance(true);
      Thread.sleep(5000);
      ServerName metaServer=TEST_UTIL.getHBaseCluster().getServerHoldingMeta();
      ServerName newMetaServer=TEST_UTIL.getHBaseCluster().getRegionServerThreads().stream().map(t -> t.getRegionServer().getServerName()).filter(s -> !s.equals(metaServer)).findAny().get();
      admin.move(RegionInfoBuilder.FIRST_META_REGIONINFO.getEncodedNameAsBytes(),Bytes.toBytes(newMetaServer.getServerName()));
      Thread.sleep(5000);
    }
    stop.set(true);
    executor.shutdown();
    for (    Future<?> future : futures) {
      future.get();
    }
  }
}
