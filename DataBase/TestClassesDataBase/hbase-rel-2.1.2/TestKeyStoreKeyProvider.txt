@Category({MiscTests.class,SmallTests.class}) public class TestKeyStoreKeyProvider {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestKeyStoreKeyProvider.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestKeyStoreKeyProvider.class);
  static final HBaseCommonTestingUtility TEST_UTIL=new HBaseCommonTestingUtility();
  static final String ALIAS="test";
  static final String PASSWORD="password";
  static byte[] KEY;
  static File storeFile;
  static File passwordFile;
  @BeforeClass public static void setUp() throws Exception {
    KEY=MessageDigest.getInstance("SHA-256").digest(Bytes.toBytes(ALIAS));
    KeyStore store=KeyStore.getInstance("JCEKS");
    store.load(null,PASSWORD.toCharArray());
    store.setEntry(ALIAS,new KeyStore.SecretKeyEntry(new SecretKeySpec(KEY,"AES")),new KeyStore.PasswordProtection(PASSWORD.toCharArray()));
    String dataDir=TEST_UTIL.getDataTestDir().toString();
    new File(dataDir).mkdirs();
    storeFile=new File(dataDir,"keystore.jks");
    FileOutputStream os=new FileOutputStream(storeFile);
    try {
      store.store(os,PASSWORD.toCharArray());
    }
  finally {
      os.close();
    }
    Properties p=new Properties();
    p.setProperty(ALIAS,PASSWORD);
    passwordFile=new File(dataDir,"keystore.pw");
    os=new FileOutputStream(passwordFile);
    try {
      p.store(os,"");
    }
  finally {
      os.close();
    }
  }
  @Test public void testKeyStoreKeyProviderWithPassword() throws Exception {
    KeyProvider provider=new KeyStoreKeyProvider();
    provider.init("jceks://" + storeFile.toURI().getPath() + "?password="+ PASSWORD);
    Key key=provider.getKey(ALIAS);
    assertNotNull(key);
    byte[] keyBytes=key.getEncoded();
    assertEquals(keyBytes.length,KEY.length);
    for (int i=0; i < KEY.length; i++) {
      assertEquals(keyBytes[i],KEY[i]);
    }
  }
  @Test public void testKeyStoreKeyProviderWithPasswordFile() throws Exception {
    KeyProvider provider=new KeyStoreKeyProvider();
    provider.init("jceks://" + storeFile.toURI().getPath() + "?passwordFile="+ URLEncoder.encode(passwordFile.getAbsolutePath(),"UTF-8"));
    Key key=provider.getKey(ALIAS);
    assertNotNull(key);
    byte[] keyBytes=key.getEncoded();
    assertEquals(keyBytes.length,KEY.length);
    for (int i=0; i < KEY.length; i++) {
      assertEquals(keyBytes[i],KEY[i]);
    }
  }
}
