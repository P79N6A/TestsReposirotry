@Category({RegionServerTests.class,SmallTests.class}) public class TestDefaultStoreEngine {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestDefaultStoreEngine.class);
public static class DummyStoreFlusher extends DefaultStoreFlusher {
    public DummyStoreFlusher(    Configuration conf,    HStore store){
      super(conf,store);
    }
  }
public static class DummyCompactor extends DefaultCompactor {
    public DummyCompactor(    Configuration conf,    HStore store){
      super(conf,store);
    }
  }
public static class DummyCompactionPolicy extends RatioBasedCompactionPolicy {
    public DummyCompactionPolicy(    Configuration conf,    StoreConfigInformation storeConfigInfo){
      super(conf,storeConfigInfo);
    }
  }
  @Test public void testCustomParts() throws Exception {
    Configuration conf=HBaseConfiguration.create();
    conf.set(DefaultStoreEngine.DEFAULT_COMPACTOR_CLASS_KEY,DummyCompactor.class.getName());
    conf.set(DefaultStoreEngine.DEFAULT_COMPACTION_POLICY_CLASS_KEY,DummyCompactionPolicy.class.getName());
    conf.set(DefaultStoreEngine.DEFAULT_STORE_FLUSHER_CLASS_KEY,DummyStoreFlusher.class.getName());
    HStore mockStore=Mockito.mock(HStore.class);
    StoreEngine<?,?,?,?> se=StoreEngine.create(mockStore,conf,CellComparatorImpl.COMPARATOR);
    Assert.assertTrue(se instanceof DefaultStoreEngine);
    Assert.assertTrue(se.getCompactionPolicy() instanceof DummyCompactionPolicy);
    Assert.assertTrue(se.getStoreFlusher() instanceof DummyStoreFlusher);
    Assert.assertTrue(se.getCompactor() instanceof DummyCompactor);
  }
}
