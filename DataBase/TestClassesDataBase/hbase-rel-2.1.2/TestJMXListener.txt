@Category({MiscTests.class,MediumTests.class}) public class TestJMXListener {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestJMXListener.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestJMXListener.class);
  private static HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static int connectorPort=UTIL.randomFreePort();
  @BeforeClass public static void setupBeforeClass() throws Exception {
    Configuration conf=UTIL.getConfiguration();
    conf.set(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY,JMXListener.class.getName());
    conf.setInt("regionserver.rmi.registry.port",connectorPort);
    UTIL.startMiniCluster();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  @Test public void testStart() throws Exception {
    JMXConnector connector=JMXConnectorFactory.connect(JMXListener.buildJMXServiceURL(connectorPort,connectorPort));
    MBeanServerConnection mb=connector.getMBeanServerConnection();
    String domain=mb.getDefaultDomain();
    Assert.assertTrue("default domain is not correct",!domain.isEmpty());
    connector.close();
  }
  @Rule public ExpectedException expectedEx=ExpectedException.none();
  @Test public void testStop() throws Exception {
    MiniHBaseCluster cluster=UTIL.getHBaseCluster();
    LOG.info("shutdown hbase cluster...");
    cluster.shutdown();
    LOG.info("wait for the hbase cluster shutdown...");
    cluster.waitUntilShutDown();
    JMXConnector connector=JMXConnectorFactory.newJMXConnector(JMXListener.buildJMXServiceURL(connectorPort,connectorPort),null);
    expectedEx.expect(IOException.class);
    connector.connect();
  }
  @Test public void testGetRegionServerCoprocessors() throws Exception {
    for (    JVMClusterUtil.RegionServerThread rs : UTIL.getHBaseCluster().getRegionServerThreads()) {
      boolean find=false;
      for (      String s : rs.getRegionServer().getRegionServerCoprocessors()) {
        if (s.equals(JMXListener.class.getSimpleName())) {
          find=true;
          break;
        }
      }
      if (!find) {
        fail("where is the JMXListener?");
      }
    }
  }
}
