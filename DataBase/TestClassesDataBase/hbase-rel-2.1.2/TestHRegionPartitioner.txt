@Category({MapReduceTests.class,MediumTests.class}) public class TestHRegionPartitioner {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHRegionPartitioner.class);
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  @Rule public TestName name=new TestName();
  @BeforeClass public static void beforeClass() throws Exception {
    UTIL.startMiniCluster();
  }
  @AfterClass public static void afterClass() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  /** 
 * Test HRegionPartitioner
 */
  @Test public void testHRegionPartitioner() throws Exception {
    byte[][] families={Bytes.toBytes("familyA"),Bytes.toBytes("familyB")};
    UTIL.createTable(TableName.valueOf(name.getMethodName()),families,1,Bytes.toBytes("aa"),Bytes.toBytes("cc"),3);
    HRegionPartitioner<Long,Long> partitioner=new HRegionPartitioner<>();
    Configuration configuration=UTIL.getConfiguration();
    configuration.set(TableOutputFormat.OUTPUT_TABLE,name.getMethodName());
    partitioner.setConf(configuration);
    ImmutableBytesWritable writable=new ImmutableBytesWritable(Bytes.toBytes("bb"));
    assertEquals(1,partitioner.getPartition(writable,10L,3));
    assertEquals(0,partitioner.getPartition(writable,10L,1));
  }
}
