private static class ProcessTimeRangeMapper extends TableMapper<ImmutableBytesWritable,MapWritable> implements Configurable {
  private Configuration conf=null;
  private Table table=null;
  @Override public void map(  ImmutableBytesWritable key,  Result result,  Context context) throws IOException {
    List<Long> tsList=new ArrayList<>();
    for (    Cell kv : result.listCells()) {
      tsList.add(kv.getTimestamp());
    }
    List<Put> puts=new ArrayList<>();
    for (    Long ts : tsList) {
      Put put=new Put(key.get());
      put.setDurability(Durability.SKIP_WAL);
      put.addColumn(FAMILY_NAME,COLUMN_NAME,ts,Bytes.toBytes(true));
      puts.add(put);
    }
    table.put(puts);
  }
  @Override public Configuration getConf(){
    return conf;
  }
  @Override public void setConf(  Configuration configuration){
    this.conf=configuration;
    try {
      Connection connection=ConnectionFactory.createConnection(conf);
      table=connection.getTable(TABLE_NAME);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}
