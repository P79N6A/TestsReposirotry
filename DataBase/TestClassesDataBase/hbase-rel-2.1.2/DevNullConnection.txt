/** 
 * A DevNull Connection whose only purpose is checking what edits made it through. See down in {@link Table#batch(List,Object[])}.
 */
public static class DevNullConnection implements Connection {
  private final Configuration configuration;
  DevNullConnection(  Configuration configuration,  ExecutorService es,  User user){
    this.configuration=configuration;
  }
  @Override public void abort(  String why,  Throwable e){
  }
  @Override public boolean isAborted(){
    return false;
  }
  @Override public Configuration getConfiguration(){
    return this.configuration;
  }
  @Override public BufferedMutator getBufferedMutator(  TableName tableName) throws IOException {
    return null;
  }
  @Override public BufferedMutator getBufferedMutator(  BufferedMutatorParams params) throws IOException {
    return null;
  }
  @Override public RegionLocator getRegionLocator(  TableName tableName) throws IOException {
    return null;
  }
  @Override public Admin getAdmin() throws IOException {
    return null;
  }
  @Override public void close() throws IOException {
  }
  @Override public boolean isClosed(){
    return false;
  }
  @Override public TableBuilder getTableBuilder(  final TableName tableName,  ExecutorService pool){
    return new TableBuilder(){
      @Override public TableBuilder setOperationTimeout(      int timeout){
        return this;
      }
      @Override public TableBuilder setRpcTimeout(      int timeout){
        return this;
      }
      @Override public TableBuilder setReadRpcTimeout(      int timeout){
        return this;
      }
      @Override public TableBuilder setWriteRpcTimeout(      int timeout){
        return this;
      }
      @Override public Table build(){
        return new Table(){
          @Override public TableName getName(){
            return tableName;
          }
          @Override public Configuration getConfiguration(){
            return configuration;
          }
          @Override public HTableDescriptor getTableDescriptor() throws IOException {
            return null;
          }
          @Override public TableDescriptor getDescriptor() throws IOException {
            return null;
          }
          @Override public boolean exists(          Get get) throws IOException {
            return false;
          }
          @Override public boolean[] exists(          List<Get> gets) throws IOException {
            return new boolean[0];
          }
          @Override public void batch(          List<? extends Row> actions,          Object[] results) throws IOException, InterruptedException {
            for (            Row action : actions) {
              int row=Bytes.toInt(action.getRow());
              assertTrue("" + row,row > BOUNDARY);
              UNFILTERED.incrementAndGet();
            }
          }
          @Override public <R>void batchCallback(          List<? extends Row> actions,          Object[] results,          Batch.Callback<R> callback) throws IOException, InterruptedException {
          }
          @Override public Result get(          Get get) throws IOException {
            return null;
          }
          @Override public Result[] get(          List<Get> gets) throws IOException {
            return new Result[0];
          }
          @Override public ResultScanner getScanner(          Scan scan) throws IOException {
            return null;
          }
          @Override public ResultScanner getScanner(          byte[] family) throws IOException {
            return null;
          }
          @Override public ResultScanner getScanner(          byte[] family,          byte[] qualifier) throws IOException {
            return null;
          }
          @Override public void put(          Put put) throws IOException {
          }
          @Override public void put(          List<Put> puts) throws IOException {
          }
          @Override public boolean checkAndPut(          byte[] row,          byte[] family,          byte[] qualifier,          byte[] value,          Put put) throws IOException {
            return false;
          }
          @Override public boolean checkAndPut(          byte[] row,          byte[] family,          byte[] qualifier,          CompareFilter.CompareOp compareOp,          byte[] value,          Put put) throws IOException {
            return false;
          }
          @Override public boolean checkAndPut(          byte[] row,          byte[] family,          byte[] qualifier,          CompareOperator op,          byte[] value,          Put put) throws IOException {
            return false;
          }
          @Override public void delete(          Delete delete) throws IOException {
          }
          @Override public void delete(          List<Delete> deletes) throws IOException {
          }
          @Override public boolean checkAndDelete(          byte[] row,          byte[] family,          byte[] qualifier,          byte[] value,          Delete delete) throws IOException {
            return false;
          }
          @Override public boolean checkAndDelete(          byte[] row,          byte[] family,          byte[] qualifier,          CompareFilter.CompareOp compareOp,          byte[] value,          Delete delete) throws IOException {
            return false;
          }
          @Override public boolean checkAndDelete(          byte[] row,          byte[] family,          byte[] qualifier,          CompareOperator op,          byte[] value,          Delete delete) throws IOException {
            return false;
          }
          @Override public CheckAndMutateBuilder checkAndMutate(          byte[] row,          byte[] family){
            return null;
          }
          @Override public void mutateRow(          RowMutations rm) throws IOException {
          }
          @Override public Result append(          Append append) throws IOException {
            return null;
          }
          @Override public Result increment(          Increment increment) throws IOException {
            return null;
          }
          @Override public long incrementColumnValue(          byte[] row,          byte[] family,          byte[] qualifier,          long amount) throws IOException {
            return 0;
          }
          @Override public long incrementColumnValue(          byte[] row,          byte[] family,          byte[] qualifier,          long amount,          Durability durability) throws IOException {
            return 0;
          }
          @Override public void close() throws IOException {
          }
          @Override public CoprocessorRpcChannel coprocessorService(          byte[] row){
            return null;
          }
          @Override public <T extends com.google.protobuf.Service,R>Map<byte[],R> coprocessorService(          Class<T> service,          byte[] startKey,          byte[] endKey,          Batch.Call<T,R> callable) throws com.google.protobuf.ServiceException, Throwable {
            return null;
          }
          @Override public <T extends com.google.protobuf.Service,R>void coprocessorService(          Class<T> service,          byte[] startKey,          byte[] endKey,          Batch.Call<T,R> callable,          Batch.Callback<R> callback) throws com.google.protobuf.ServiceException, Throwable {
          }
          @Override public <R extends com.google.protobuf.Message>Map<byte[],R> batchCoprocessorService(          com.google.protobuf.Descriptors.MethodDescriptor methodDescriptor,          com.google.protobuf.Message request,          byte[] startKey,          byte[] endKey,          R responsePrototype) throws com.google.protobuf.ServiceException, Throwable {
            return null;
          }
          @Override public <R extends com.google.protobuf.Message>void batchCoprocessorService(          com.google.protobuf.Descriptors.MethodDescriptor methodDescriptor,          com.google.protobuf.Message request,          byte[] startKey,          byte[] endKey,          R responsePrototype,          Batch.Callback<R> callback) throws com.google.protobuf.ServiceException, Throwable {
          }
          @Override public boolean checkAndMutate(          byte[] row,          byte[] family,          byte[] qualifier,          CompareFilter.CompareOp compareOp,          byte[] value,          RowMutations mutation) throws IOException {
            return false;
          }
          @Override public boolean checkAndMutate(          byte[] row,          byte[] family,          byte[] qualifier,          CompareOperator op,          byte[] value,          RowMutations mutation) throws IOException {
            return false;
          }
          @Override public long getRpcTimeout(          TimeUnit unit){
            return 0;
          }
          @Override public int getRpcTimeout(){
            return 0;
          }
          @Override public void setRpcTimeout(          int rpcTimeout){
          }
          @Override public long getReadRpcTimeout(          TimeUnit unit){
            return 0;
          }
          @Override public int getReadRpcTimeout(){
            return 0;
          }
          @Override public void setReadRpcTimeout(          int readRpcTimeout){
          }
          @Override public long getWriteRpcTimeout(          TimeUnit unit){
            return 0;
          }
          @Override public int getWriteRpcTimeout(){
            return 0;
          }
          @Override public void setWriteRpcTimeout(          int writeRpcTimeout){
          }
          @Override public long getOperationTimeout(          TimeUnit unit){
            return 0;
          }
          @Override public int getOperationTimeout(){
            return 0;
          }
          @Override public void setOperationTimeout(          int operationTimeout){
          }
        }
;
      }
    }
;
  }
}
