/** 
 * The actual searcher mapper.
 */
public static class WALMapperSearcher extends WALMapper {
  private SortedSet<byte[]> keysToFind;
  private AtomicInteger rows=new AtomicInteger(0);
  @Override public void setup(  Mapper<WALKey,WALEdit,ImmutableBytesWritable,Mutation>.Context context) throws IOException {
    super.setup(context);
    try {
      this.keysToFind=readKeysToSearch(context.getConfiguration());
      LOG.info("Loaded keys to find: count=" + this.keysToFind.size());
    }
 catch (    InterruptedException e) {
      throw new InterruptedIOException(e.toString());
    }
  }
  @Override protected boolean filter(  Context context,  Cell cell){
    byte[] row=new byte[cell.getRowLength()];
    System.arraycopy(cell.getRowArray(),cell.getRowOffset(),row,0,cell.getRowLength());
    boolean b=this.keysToFind.contains(row);
    if (b) {
      String keyStr=Bytes.toStringBinary(row);
      try {
        LOG.info("Found cell=" + cell + " , walKey="+ context.getCurrentKey());
      }
 catch (      IOException|InterruptedException e) {
        LOG.warn(e.toString(),e);
      }
      if (rows.addAndGet(1) < MISSING_ROWS_TO_LOG) {
        context.getCounter(FOUND_GROUP_KEY,keyStr).increment(1);
      }
      context.getCounter(FOUND_GROUP_KEY,"CELL_WITH_MISSING_ROW").increment(1);
    }
    return b;
  }
}
