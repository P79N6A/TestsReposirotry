/** 
 * Tests for the region server status page and its template.
 */
@Category({RegionServerTests.class,SmallTests.class}) public class TestRSStatusServlet {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRSStatusServlet.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestRSStatusServlet.class);
  private HRegionServer rs;
  private RSRpcServices rpcServices;
  private RpcServerInterface rpcServer;
  static final int FAKE_IPC_PORT=1585;
  static final int FAKE_WEB_PORT=1586;
  private final ServerName fakeServerName=ServerName.valueOf("localhost",FAKE_IPC_PORT,11111);
  private final GetServerInfoResponse fakeResponse=ResponseConverter.buildGetServerInfoResponse(fakeServerName,FAKE_WEB_PORT);
  private final ServerName fakeMasterAddress=ServerName.valueOf("localhost",60010,1212121212);
  @Rule public TestName name=new TestName();
  @Before public void setupBasicMocks() throws IOException, ServiceException {
    rs=Mockito.mock(HRegionServer.class);
    rpcServices=Mockito.mock(RSRpcServices.class);
    rpcServer=Mockito.mock(RpcServerInterface.class);
    Mockito.doReturn(HBaseConfiguration.create()).when(rs).getConfiguration();
    Mockito.doReturn(rpcServices).when(rs).getRSRpcServices();
    Mockito.doReturn(rpcServer).when(rs).getRpcServer();
    Mockito.doReturn(fakeResponse).when(rpcServices).getServerInfo((RpcController)Mockito.any(),(GetServerInfoRequest)Mockito.any());
    ZKWatcher zkw=Mockito.mock(ZKWatcher.class);
    Mockito.doReturn("fakequorum").when(zkw).getQuorum();
    Mockito.doReturn(zkw).when(rs).getZooKeeper();
    LOG.warn("The " + HConstants.HFILE_BLOCK_CACHE_SIZE_KEY + " is set to 0");
    CacheConfig cacheConf=Mockito.mock(CacheConfig.class);
    Mockito.doReturn(null).when(cacheConf).getBlockCache();
    Mockito.doReturn(cacheConf).when(rs).getCacheConfig();
    MasterAddressTracker mat=Mockito.mock(MasterAddressTracker.class);
    Mockito.doReturn(fakeMasterAddress).when(mat).getMasterAddress();
    Mockito.doReturn(mat).when(rs).getMasterAddressTracker();
    MetricsRegionServer rms=Mockito.mock(MetricsRegionServer.class);
    Mockito.doReturn(new MetricsRegionServerWrapperStub()).when(rms).getRegionServerWrapper();
    Mockito.doReturn(rms).when(rs).getRegionServerMetrics();
    MetricsHBaseServer ms=Mockito.mock(MetricsHBaseServer.class);
    Mockito.doReturn(new MetricsHBaseServerWrapperStub()).when(ms).getHBaseServerWrapper();
    Mockito.doReturn(ms).when(rpcServer).getMetrics();
  }
  @Test public void testBasic() throws IOException, ServiceException {
    new RSStatusTmpl().render(new StringWriter(),rs);
  }
  @Test public void testWithRegions() throws IOException, ServiceException {
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    List<RegionInfo> regions=Lists.newArrayList(RegionInfoBuilder.newBuilder(htd.getTableName()).setStartKey(Bytes.toBytes("a")).setEndKey(Bytes.toBytes("d")).build(),RegionInfoBuilder.newBuilder(htd.getTableName()).setStartKey(Bytes.toBytes("d")).setEndKey(Bytes.toBytes("z")).build());
    Mockito.doReturn(ResponseConverter.buildGetOnlineRegionResponse(regions)).when(rpcServices).getOnlineRegion((RpcController)Mockito.any(),(GetOnlineRegionRequest)Mockito.any());
    new RSStatusTmpl().render(new StringWriter(),rs);
  }
}
