/** 
 * This copro is used to slow down the primary meta region scan a bit
 */
public static class RegionServerHostingPrimayMetaRegionSlowOrStopCopro implements RegionCoprocessor, RegionObserver {
  static boolean slowDownPrimaryMetaScan=false;
  static boolean throwException=false;
  @Override public Optional<RegionObserver> getRegionObserver(){
    return Optional.of(this);
  }
  @Override public void preGetOp(  final ObserverContext<RegionCoprocessorEnvironment> e,  final Get get,  final List<Cell> results) throws IOException {
    int replicaId=e.getEnvironment().getRegion().getRegionInfo().getReplicaId();
    if (throwException) {
      if (!e.getEnvironment().getRegion().getRegionInfo().isMetaRegion() && (replicaId == 0)) {
        LOG.info("Get, throw Region Server Stopped Exceptoin for region " + e.getEnvironment().getRegion().getRegionInfo());
        throw new RegionServerStoppedException("Server " + e.getEnvironment().getServerName() + " not running");
      }
    }
 else {
      LOG.info("Get, We're replica region " + replicaId);
    }
  }
  @Override public void preScannerOpen(  final ObserverContext<RegionCoprocessorEnvironment> e,  final Scan scan) throws IOException {
    int replicaId=e.getEnvironment().getRegion().getRegionInfo().getReplicaId();
    if (e.getEnvironment().getRegion().getRegionInfo().isMetaRegion() && (replicaId == 0)) {
      if (slowDownPrimaryMetaScan) {
        LOG.info("Scan with primary meta region, slow down a bit");
        try {
          Thread.sleep(META_SCAN_TIMEOUT_IN_MILLISEC - 50);
        }
 catch (        InterruptedException ie) {
        }
      }
      if (throwException) {
        LOG.info("Scan, throw Region Server Stopped Exceptoin for replica " + e.getEnvironment().getRegion().getRegionInfo());
        throw new RegionServerStoppedException("Server " + e.getEnvironment().getServerName() + " not running");
      }
 else {
        LOG.info("Scan, We're replica region " + replicaId);
      }
    }
 else {
      LOG.info("Scan, We're replica region " + replicaId);
    }
  }
}
