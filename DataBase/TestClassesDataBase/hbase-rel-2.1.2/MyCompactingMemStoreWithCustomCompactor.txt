public static class MyCompactingMemStoreWithCustomCompactor extends CompactingMemStore {
  private static final AtomicInteger RUNNER_COUNT=new AtomicInteger(0);
  public MyCompactingMemStoreWithCustomCompactor(  Configuration conf,  CellComparatorImpl c,  HStore store,  RegionServicesForStores regionServices,  MemoryCompactionPolicy compactionPolicy) throws IOException {
    super(conf,c,store,regionServices,compactionPolicy);
  }
  @Override protected MemStoreCompactor createMemStoreCompactor(  MemoryCompactionPolicy compactionPolicy) throws IllegalArgumentIOException {
    return new MyMemStoreCompactor(this,compactionPolicy);
  }
  @Override protected boolean shouldFlushInMemory(){
    boolean rval=super.shouldFlushInMemory();
    if (rval) {
      RUNNER_COUNT.incrementAndGet();
      if (LOG.isDebugEnabled()) {
        LOG.debug("runner count: " + RUNNER_COUNT.get());
      }
    }
    return rval;
  }
}
