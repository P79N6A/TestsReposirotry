@Category({RegionServerTests.class,SmallTests.class}) public class TestOffPeakHours {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestOffPeakHours.class);
  private static HBaseTestingUtility testUtil;
  @BeforeClass public static void setUpClass(){
    testUtil=new HBaseTestingUtility();
  }
  private int hourOfDay;
  private int hourPlusOne;
  private int hourMinusOne;
  private int hourMinusTwo;
  private Configuration conf;
  @Before public void setUp(){
    hourOfDay=15;
    hourPlusOne=((hourOfDay + 1) % 24);
    hourMinusOne=((hourOfDay - 1 + 24) % 24);
    hourMinusTwo=((hourOfDay - 2 + 24) % 24);
    conf=testUtil.getConfiguration();
  }
  @Test public void testWithoutSettings(){
    Configuration conf=testUtil.getConfiguration();
    OffPeakHours target=OffPeakHours.getInstance(conf);
    assertFalse(target.isOffPeakHour(hourOfDay));
  }
  @Test public void testSetPeakHourToTargetTime(){
    conf.setLong(CompactionConfiguration.HBASE_HSTORE_OFFPEAK_START_HOUR,hourMinusOne);
    conf.setLong(CompactionConfiguration.HBASE_HSTORE_OFFPEAK_END_HOUR,hourPlusOne);
    OffPeakHours target=OffPeakHours.getInstance(conf);
    assertTrue(target.isOffPeakHour(hourOfDay));
  }
  @Test public void testSetPeakHourOutsideCurrentSelection(){
    conf.setLong(CompactionConfiguration.HBASE_HSTORE_OFFPEAK_START_HOUR,hourMinusTwo);
    conf.setLong(CompactionConfiguration.HBASE_HSTORE_OFFPEAK_END_HOUR,hourMinusOne);
    OffPeakHours target=OffPeakHours.getInstance(conf);
    assertFalse(target.isOffPeakHour(hourOfDay));
  }
}
