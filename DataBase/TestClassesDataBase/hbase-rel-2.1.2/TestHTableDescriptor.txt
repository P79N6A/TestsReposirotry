/** 
 * Test setting values in the descriptor
 */
@Category({MiscTests.class,SmallTests.class}) @Deprecated public class TestHTableDescriptor {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHTableDescriptor.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestHTableDescriptor.class);
  @Rule public TestName name=new TestName();
  @Test(expected=IOException.class) public void testAddCoprocessorTwice() throws IOException {
    HTableDescriptor htd=new HTableDescriptor(TableName.META_TABLE_NAME);
    String cpName="a.b.c.d";
    htd.addCoprocessor(cpName);
    htd.addCoprocessor(cpName);
  }
  @Test public void testAddCoprocessorWithSpecStr() throws IOException {
    HTableDescriptor htd=new HTableDescriptor(TableName.META_TABLE_NAME);
    String cpName="a.b.c.d";
    try {
      htd.addCoprocessorWithSpec(cpName);
      fail();
    }
 catch (    IllegalArgumentException iae) {
    }
    try {
      htd.addCoprocessorWithSpec("file:///some/path" + "|" + cpName);
      fail();
    }
 catch (    IllegalArgumentException iae) {
    }
    String spec="hdfs:///foo.jar|com.foo.FooRegionObserver|1001|arg1=1,arg2=2";
    try {
      htd.addCoprocessorWithSpec(spec);
    }
 catch (    IllegalArgumentException iae) {
      fail();
    }
    try {
      htd.addCoprocessorWithSpec(spec);
      fail();
    }
 catch (    IOException ioe) {
    }
  }
  @Test public void testPb() throws DeserializationException, IOException {
    HTableDescriptor htd=new HTableDescriptor(TableName.META_TABLE_NAME);
    final int v=123;
    htd.setMaxFileSize(v);
    htd.setDurability(Durability.ASYNC_WAL);
    htd.setReadOnly(true);
    htd.setRegionReplication(2);
    byte[] bytes=htd.toByteArray();
    HTableDescriptor deserializedHtd=HTableDescriptor.parseFrom(bytes);
    assertEquals(htd,deserializedHtd);
    assertEquals(v,deserializedHtd.getMaxFileSize());
    assertTrue(deserializedHtd.isReadOnly());
    assertEquals(Durability.ASYNC_WAL,deserializedHtd.getDurability());
    assertEquals(2,deserializedHtd.getRegionReplication());
  }
  /** 
 * Test cps in the table description
 * @throws Exception
 */
  @Test public void testGetSetRemoveCP() throws Exception {
    HTableDescriptor desc=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    String className="org.apache.hadoop.hbase.coprocessor.SimpleRegionObserver";
    desc.addCoprocessor(className);
    assertTrue(desc.hasCoprocessor(className));
    desc.removeCoprocessor(className);
    assertFalse(desc.hasCoprocessor(className));
  }
  /** 
 * Test cps in the table description
 * @throws Exception
 */
  @Test public void testSetListRemoveCP() throws Exception {
    HTableDescriptor desc=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    String className1="org.apache.hadoop.hbase.coprocessor.SimpleRegionObserver";
    String className2="org.apache.hadoop.hbase.coprocessor.SampleRegionWALObserver";
    assertTrue(desc.getCoprocessors().isEmpty());
    desc.addCoprocessor(className1);
    assertTrue(desc.getCoprocessors().size() == 1);
    assertTrue(desc.getCoprocessors().contains(className1));
    desc.addCoprocessor(className2);
    assertTrue(desc.getCoprocessors().size() == 2);
    assertTrue(desc.getCoprocessors().contains(className2));
    desc.removeCoprocessor(className1);
    assertTrue(desc.getCoprocessors().size() == 1);
    assertFalse(desc.getCoprocessors().contains(className1));
    assertTrue(desc.getCoprocessors().contains(className2));
    desc.removeCoprocessor(className2);
    assertTrue(desc.getCoprocessors().isEmpty());
    assertFalse(desc.getCoprocessors().contains(className1));
    assertFalse(desc.getCoprocessors().contains(className2));
  }
  /** 
 * Test that we add and remove strings from settings properly.
 * @throws Exception
 */
  @Test public void testRemoveString() throws Exception {
    HTableDescriptor desc=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    String key="Some";
    String value="value";
    desc.setValue(key,value);
    assertEquals(value,desc.getValue(key));
    desc.remove(key);
    assertEquals(null,desc.getValue(key));
  }
  String legalTableNames[]={"foo","with-dash_under.dot","_under_start_ok","with-dash.with_underscore","02-01-2012.my_table_01-02","xyz._mytable_","9_9_0.table_02","dot1.dot2.table","new.-mytable","with-dash.with.dot","legal..t2","legal..legal.t2","trailingdots..","trailing.dots...","ns:mytable","ns:_mytable_","ns:my_table_01-02","汉","汉:字","_字_","foo:字","foo.字","字.foo"};
  String illegalTableNames[]={".dot_start_illegal","-dash_start_illegal","spaces not ok","-dash-.start_illegal","new.table with space","01 .table","ns:-illegaldash","new:.illegaldot","new:illegalcolon1:","new:illegalcolon1:2",String.valueOf((char)130),String.valueOf((char)5),String.valueOf((char)65530)};
  @Test public void testLegalHTableNames(){
    for (    String tn : legalTableNames) {
      TableName.isLegalFullyQualifiedTableName(Bytes.toBytes(tn));
    }
  }
  @Test public void testIllegalHTableNames(){
    for (    String tn : illegalTableNames) {
      try {
        TableName.isLegalFullyQualifiedTableName(Bytes.toBytes(tn));
        fail("invalid tablename " + tn + " should have failed");
      }
 catch (      Exception e) {
      }
    }
  }
  @Test public void testIllegalZooKeeperName(){
    for (    String name : Arrays.asList("zookeeper","ns:zookeeper","zookeeper:table")) {
      try {
        TableName.isLegalFullyQualifiedTableName(Bytes.toBytes(name));
        fail("invalid tablename " + name + " should have failed");
      }
 catch (      Exception e) {
      }
    }
  }
  @Test public void testLegalHTableNamesRegex(){
    for (    String tn : legalTableNames) {
      TableName tName=TableName.valueOf(tn);
      assertTrue("Testing: '" + tn + "'",Pattern.matches(TableName.VALID_USER_TABLE_REGEX,tName.getNameAsString()));
    }
  }
  @Test public void testIllegalHTableNamesRegex(){
    for (    String tn : illegalTableNames) {
      LOG.info("Testing: '" + tn + "'");
      assertFalse(Pattern.matches(TableName.VALID_USER_TABLE_REGEX,tn));
    }
  }
  /** 
 * Test default value handling for maxFileSize
 */
  @Test public void testGetMaxFileSize(){
    HTableDescriptor desc=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    assertEquals(-1,desc.getMaxFileSize());
    desc.setMaxFileSize(1111L);
    assertEquals(1111L,desc.getMaxFileSize());
  }
  /** 
 * Test default value handling for memStoreFlushSize
 */
  @Test public void testGetMemStoreFlushSize(){
    HTableDescriptor desc=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    assertEquals(-1,desc.getMemStoreFlushSize());
    desc.setMemStoreFlushSize(1111L);
    assertEquals(1111L,desc.getMemStoreFlushSize());
  }
  /** 
 * Test that we add and remove strings from configuration properly.
 */
  @Test public void testAddGetRemoveConfiguration() throws Exception {
    HTableDescriptor desc=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    String key="Some";
    String value="value";
    desc.setConfiguration(key,value);
    assertEquals(value,desc.getConfigurationValue(key));
    desc.removeConfiguration(key);
    assertEquals(null,desc.getConfigurationValue(key));
  }
  @Test public void testClassMethodsAreBuilderStyle(){
    BuilderStyleTest.assertClassesAreBuilderStyle(HTableDescriptor.class);
  }
  @Test public void testModifyFamily(){
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    byte[] familyName=Bytes.toBytes("cf");
    HColumnDescriptor hcd=new HColumnDescriptor(familyName);
    hcd.setBlocksize(1000);
    hcd.setDFSReplication((short)3);
    htd.addFamily(hcd);
    assertEquals(1000,htd.getFamily(familyName).getBlocksize());
    assertEquals(3,htd.getFamily(familyName).getDFSReplication());
    hcd=new HColumnDescriptor(familyName);
    hcd.setBlocksize(2000);
    hcd.setDFSReplication((short)1);
    htd.modifyFamily(hcd);
    assertEquals(2000,htd.getFamily(familyName).getBlocksize());
    assertEquals(1,htd.getFamily(familyName).getDFSReplication());
  }
  @Test(expected=IllegalArgumentException.class) public void testModifyInexistentFamily(){
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    byte[] familyName=Bytes.toBytes("cf");
    HColumnDescriptor hcd=new HColumnDescriptor(familyName);
    htd.modifyFamily(hcd);
  }
  @Test(expected=IllegalArgumentException.class) public void testAddDuplicateFamilies(){
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    byte[] familyName=Bytes.toBytes("cf");
    HColumnDescriptor hcd=new HColumnDescriptor(familyName);
    hcd.setBlocksize(1000);
    htd.addFamily(hcd);
    assertEquals(1000,htd.getFamily(familyName).getBlocksize());
    hcd=new HColumnDescriptor(familyName);
    hcd.setBlocksize(2000);
    htd.addFamily(hcd);
  }
  @Test public void testPriority(){
    HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
    htd.setPriority(42);
    assertEquals(42,htd.getPriority());
  }
}
