/** 
 * Class to test asynchronous region admin operations.
 * @see TestAsyncRegionAdminApi This test and it used to be joined it was taking longer than ourten minute timeout so they were split.
 */
@RunWith(Parameterized.class) @Category({LargeTests.class,ClientTests.class}) public class TestAsyncRegionAdminApi2 extends TestAsyncAdminBase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAsyncRegionAdminApi2.class);
  @Test public void testGetRegionLocation() throws Exception {
    RawAsyncHBaseAdmin rawAdmin=(RawAsyncHBaseAdmin)ASYNC_CONN.getAdmin();
    TEST_UTIL.createMultiRegionTable(tableName,HConstants.CATALOG_FAMILY);
    AsyncTableRegionLocator locator=ASYNC_CONN.getRegionLocator(tableName);
    HRegionLocation regionLocation=locator.getRegionLocation(Bytes.toBytes("mmm")).get();
    RegionInfo region=regionLocation.getRegion();
    byte[] regionName=regionLocation.getRegion().getRegionName();
    HRegionLocation location=rawAdmin.getRegionLocation(regionName).get();
    assertTrue(Bytes.equals(regionName,location.getRegion().getRegionName()));
    location=rawAdmin.getRegionLocation(region.getEncodedNameAsBytes()).get();
    assertTrue(Bytes.equals(regionName,location.getRegion().getRegionName()));
  }
  @Test public void testSplitSwitch() throws Exception {
    createTableWithDefaultConf(tableName);
    byte[][] families={FAMILY};
    final int rows=10000;
    TestAsyncRegionAdminApi.loadData(tableName,families,rows);
    AsyncTable<AdvancedScanResultConsumer> metaTable=ASYNC_CONN.getTable(META_TABLE_NAME);
    List<HRegionLocation> regionLocations=AsyncMetaTableAccessor.getTableHRegionLocations(metaTable,Optional.of(tableName)).get();
    int originalCount=regionLocations.size();
    initSplitMergeSwitch();
    assertTrue(admin.splitSwitch(false).get());
    try {
      admin.split(tableName,Bytes.toBytes(rows / 2)).join();
    }
 catch (    Exception e) {
    }
    int count=admin.getRegions(tableName).get().size();
    assertTrue(originalCount == count);
    assertFalse(admin.splitSwitch(true).get());
    admin.split(tableName).join();
    while ((count=admin.getRegions(tableName).get().size()) == originalCount) {
      Threads.sleep(100);
    }
    assertTrue(originalCount < count);
  }
  @Test @Ignore public void testMergeSwitch() throws Exception {
    createTableWithDefaultConf(tableName);
    byte[][] families={FAMILY};
    TestAsyncRegionAdminApi.loadData(tableName,families,1000);
    AsyncTable<AdvancedScanResultConsumer> metaTable=ASYNC_CONN.getTable(META_TABLE_NAME);
    List<HRegionLocation> regionLocations=AsyncMetaTableAccessor.getTableHRegionLocations(metaTable,Optional.of(tableName)).get();
    int originalCount=regionLocations.size();
    initSplitMergeSwitch();
    admin.split(tableName).join();
    int postSplitCount=originalCount;
    while ((postSplitCount=admin.getRegions(tableName).get().size()) == originalCount) {
      Threads.sleep(100);
    }
    assertTrue("originalCount=" + originalCount + ", postSplitCount="+ postSplitCount,originalCount != postSplitCount);
    assertTrue(admin.mergeSwitch(false).get());
    List<RegionInfo> regions=admin.getRegions(tableName).get();
    assertTrue(regions.size() > 1);
    admin.mergeRegions(regions.get(0).getRegionName(),regions.get(1).getRegionName(),true).join();
    int count=admin.getRegions(tableName).get().size();
    assertTrue("postSplitCount=" + postSplitCount + ", count="+ count,postSplitCount == count);
    assertFalse(admin.mergeSwitch(true).get());
    admin.mergeRegions(regions.get(0).getRegionName(),regions.get(1).getRegionName(),true).join();
    count=admin.getRegions(tableName).get().size();
    assertTrue((postSplitCount / 2) == count);
  }
  private void initSplitMergeSwitch() throws Exception {
    if (!admin.isSplitEnabled().get()) {
      admin.splitSwitch(true).get();
    }
    if (!admin.isMergeEnabled().get()) {
      admin.mergeSwitch(true).get();
    }
    assertTrue(admin.isSplitEnabled().get());
    assertTrue(admin.isMergeEnabled().get());
  }
  @Test public void testMergeRegions() throws Exception {
    byte[][] splitRows=new byte[][]{Bytes.toBytes("3"),Bytes.toBytes("6")};
    createTableWithDefaultConf(tableName,splitRows);
    AsyncTable<AdvancedScanResultConsumer> metaTable=ASYNC_CONN.getTable(META_TABLE_NAME);
    List<HRegionLocation> regionLocations=AsyncMetaTableAccessor.getTableHRegionLocations(metaTable,Optional.of(tableName)).get();
    RegionInfo regionA;
    RegionInfo regionB;
    assertEquals(3,regionLocations.size());
    regionA=regionLocations.get(0).getRegion();
    regionB=regionLocations.get(1).getRegion();
    admin.mergeRegions(regionA.getRegionName(),regionB.getRegionName(),false).get();
    regionLocations=AsyncMetaTableAccessor.getTableHRegionLocations(metaTable,Optional.of(tableName)).get();
    assertEquals(2,regionLocations.size());
    regionA=regionLocations.get(0).getRegion();
    regionB=regionLocations.get(1).getRegion();
    admin.mergeRegions(regionA.getRegionName(),regionB.getRegionName(),false).get();
    regionLocations=AsyncMetaTableAccessor.getTableHRegionLocations(metaTable,Optional.of(tableName)).get();
    assertEquals(1,regionLocations.size());
  }
  @Test public void testSplitTable() throws Exception {
    initSplitMergeSwitch();
    splitTest(TableName.valueOf("testSplitTable"),3000,false,null);
    splitTest(TableName.valueOf("testSplitTableWithSplitPoint"),3000,false,Bytes.toBytes("3"));
    splitTest(TableName.valueOf("testSplitTableRegion"),3000,true,null);
    splitTest(TableName.valueOf("testSplitTableRegionWithSplitPoint2"),3000,true,Bytes.toBytes("3"));
  }
  private void splitTest(  TableName tableName,  int rowCount,  boolean isSplitRegion,  byte[] splitPoint) throws Exception {
    createTableWithDefaultConf(tableName);
    AsyncTable<AdvancedScanResultConsumer> metaTable=ASYNC_CONN.getTable(META_TABLE_NAME);
    List<HRegionLocation> regionLocations=AsyncMetaTableAccessor.getTableHRegionLocations(metaTable,Optional.of(tableName)).get();
    assertEquals(1,regionLocations.size());
    AsyncTable<?> table=ASYNC_CONN.getTable(tableName);
    List<Put> puts=new ArrayList<>();
    for (int i=0; i < rowCount; i++) {
      Put put=new Put(Bytes.toBytes(i));
      put.addColumn(FAMILY,null,Bytes.toBytes("value" + i));
      puts.add(put);
    }
    table.putAll(puts).join();
    if (isSplitRegion) {
      if (splitPoint == null) {
        admin.splitRegion(regionLocations.get(0).getRegion().getRegionName()).get();
      }
 else {
        admin.splitRegion(regionLocations.get(0).getRegion().getRegionName(),splitPoint).get();
      }
    }
 else {
      if (splitPoint == null) {
        admin.split(tableName).get();
      }
 else {
        admin.split(tableName,splitPoint).get();
      }
    }
    int count=0;
    for (int i=0; i < 45; i++) {
      try {
        regionLocations=AsyncMetaTableAccessor.getTableHRegionLocations(metaTable,Optional.of(tableName)).get();
        count=regionLocations.size();
        if (count >= 2) {
          break;
        }
        Thread.sleep(1000L);
      }
 catch (      Exception e) {
        LOG.error(e.toString(),e);
      }
    }
    assertEquals(2,count);
  }
}
