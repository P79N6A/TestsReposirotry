@Category({MiscTests.class,SmallTests.class}) public class TestExecutorService {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestExecutorService.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestExecutorService.class);
  @Test public void testExecutorService() throws Exception {
    int maxThreads=5;
    int maxTries=10;
    int sleepInterval=10;
    Server mockedServer=mock(Server.class);
    when(mockedServer.getConfiguration()).thenReturn(HBaseConfiguration.create());
    ExecutorService executorService=new ExecutorService("unit_test");
    executorService.startExecutorService(ExecutorType.MASTER_SERVER_OPERATIONS,maxThreads);
    Executor executor=executorService.getExecutor(ExecutorType.MASTER_SERVER_OPERATIONS);
    ThreadPoolExecutor pool=executor.threadPoolExecutor;
    assertEquals(0,pool.getPoolSize());
    AtomicBoolean lock=new AtomicBoolean(true);
    AtomicInteger counter=new AtomicInteger(0);
    for (int i=0; i < maxThreads; i++) {
      executorService.submit(new TestEventHandler(mockedServer,EventType.M_SERVER_SHUTDOWN,lock,counter));
    }
    int tries=0;
    while (counter.get() < maxThreads && tries < maxTries) {
      LOG.info("Waiting for all event handlers to start...");
      Thread.sleep(sleepInterval);
      tries++;
    }
    assertEquals(maxThreads,counter.get());
    assertEquals(maxThreads,pool.getPoolSize());
    ExecutorStatus status=executor.getStatus();
    assertTrue(status.queuedEvents.isEmpty());
    assertEquals(5,status.running.size());
    checkStatusDump(status);
synchronized (lock) {
      lock.set(false);
      lock.notifyAll();
    }
    while (counter.get() < (maxThreads * 2) && tries < maxTries) {
      System.out.println("Waiting for all event handlers to finish...");
      Thread.sleep(sleepInterval);
      tries++;
    }
    assertEquals(maxThreads * 2,counter.get());
    assertEquals(maxThreads,pool.getPoolSize());
    for (int i=0; i < (2 * maxThreads); i++) {
      executorService.submit(new TestEventHandler(mockedServer,EventType.M_SERVER_SHUTDOWN,lock,counter));
    }
synchronized (lock) {
      lock.set(false);
      lock.notifyAll();
    }
    Thread.sleep(ExecutorService.Executor.keepAliveTimeInMillis * 2);
    assertEquals(maxThreads,pool.getPoolSize());
    executorService.shutdown();
    assertEquals(0,executorService.getAllExecutorStatuses().size());
    executorService.submit(new TestEventHandler(mockedServer,EventType.M_SERVER_SHUTDOWN,lock,counter));
  }
  private void checkStatusDump(  ExecutorStatus status) throws IOException {
    StringWriter sw=new StringWriter();
    status.dumpTo(sw,"");
    String dump=sw.toString();
    LOG.info("Got status dump:\n" + dump);
    assertTrue(dump.contains("Waiting on java.util.concurrent.atomic.AtomicBoolean"));
  }
public static class TestEventHandler extends EventHandler {
    private final AtomicBoolean lock;
    private AtomicInteger counter;
    public TestEventHandler(    Server server,    EventType eventType,    AtomicBoolean lock,    AtomicInteger counter){
      super(server,eventType);
      this.lock=lock;
      this.counter=counter;
    }
    @Override public void process() throws IOException {
      int num=counter.incrementAndGet();
      LOG.info("Running process #" + num + ", threadName="+ Thread.currentThread().getName());
synchronized (lock) {
        while (lock.get()) {
          try {
            lock.wait();
          }
 catch (          InterruptedException e) {
          }
        }
      }
      counter.incrementAndGet();
    }
  }
  @Test public void testAborting() throws Exception {
    final Configuration conf=HBaseConfiguration.create();
    final Server server=mock(Server.class);
    when(server.getConfiguration()).thenReturn(conf);
    ExecutorService executorService=new ExecutorService("unit_test");
    executorService.startExecutorService(ExecutorType.MASTER_SERVER_OPERATIONS,1);
    executorService.submit(new EventHandler(server,EventType.M_SERVER_SHUTDOWN){
      @Override public void process() throws IOException {
        throw new RuntimeException("Should cause abort");
      }
    }
);
    Waiter.waitFor(conf,30000,new Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        try {
          verify(server,times(1)).abort(anyString(),(Throwable)anyObject());
          return true;
        }
 catch (        Throwable t) {
          return false;
        }
      }
    }
);
    executorService.shutdown();
  }
}
