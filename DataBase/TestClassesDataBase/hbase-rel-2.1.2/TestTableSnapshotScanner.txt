@Category({LargeTests.class,ClientTests.class}) public class TestTableSnapshotScanner {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestTableSnapshotScanner.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestTableSnapshotScanner.class);
  private final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static final int NUM_REGION_SERVERS=2;
  private static final byte[][] FAMILIES={Bytes.toBytes("f1"),Bytes.toBytes("f2")};
  public static byte[] bbb=Bytes.toBytes("bbb");
  public static byte[] yyy=Bytes.toBytes("yyy");
  private FileSystem fs;
  private Path rootDir;
  public static void blockUntilSplitFinished(  HBaseTestingUtility util,  TableName tableName,  int expectedRegionSize) throws Exception {
    for (int i=0; i < 100; i++) {
      List<HRegionInfo> hRegionInfoList=util.getAdmin().getTableRegions(tableName);
      if (hRegionInfoList.size() >= expectedRegionSize) {
        break;
      }
      Thread.sleep(1000);
    }
  }
  public void setupCluster() throws Exception {
    setupConf(UTIL.getConfiguration());
    UTIL.startMiniCluster(NUM_REGION_SERVERS,true);
    rootDir=UTIL.getHBaseCluster().getMaster().getMasterFileSystem().getRootDir();
    fs=rootDir.getFileSystem(UTIL.getConfiguration());
  }
  public void tearDownCluster() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  private static void setupConf(  Configuration conf){
    conf.setBoolean(SnapshotManager.HBASE_SNAPSHOT_ENABLED,true);
  }
  @After public void tearDown() throws Exception {
  }
  public static void createTableAndSnapshot(  HBaseTestingUtility util,  TableName tableName,  String snapshotName,  int numRegions) throws Exception {
    try {
      util.deleteTable(tableName);
    }
 catch (    Exception ex) {
    }
    if (numRegions > 1) {
      util.createTable(tableName,FAMILIES,1,bbb,yyy,numRegions);
    }
 else {
      util.createTable(tableName,FAMILIES);
    }
    Admin admin=util.getAdmin();
    Table table=util.getConnection().getTable(tableName);
    util.loadTable(table,FAMILIES);
    Path rootDir=FSUtils.getRootDir(util.getConfiguration());
    FileSystem fs=rootDir.getFileSystem(util.getConfiguration());
    SnapshotTestingUtils.createSnapshotAndValidate(admin,tableName,Arrays.asList(FAMILIES),null,snapshotName,rootDir,fs,true);
    byte[] value=Bytes.toBytes("after_snapshot_value");
    util.loadTable(table,FAMILIES,value);
    admin.flush(tableName);
    table.close();
  }
  @Test public void testNoDuplicateResultsWhenSplitting() throws Exception {
    setupCluster();
    TableName tableName=TableName.valueOf("testNoDuplicateResultsWhenSplitting");
    String snapshotName="testSnapshotBug";
    try {
      if (UTIL.getAdmin().tableExists(tableName)) {
        UTIL.deleteTable(tableName);
      }
      UTIL.createTable(tableName,FAMILIES);
      Admin admin=UTIL.getAdmin();
      Table table=UTIL.getConnection().getTable(tableName);
      UTIL.loadTable(table,FAMILIES);
      admin.split(tableName,Bytes.toBytes("eee"));
      blockUntilSplitFinished(UTIL,tableName,2);
      Path rootDir=FSUtils.getRootDir(UTIL.getConfiguration());
      FileSystem fs=rootDir.getFileSystem(UTIL.getConfiguration());
      SnapshotTestingUtils.createSnapshotAndValidate(admin,tableName,Arrays.asList(FAMILIES),null,snapshotName,rootDir,fs,true);
      byte[] value=Bytes.toBytes("after_snapshot_value");
      UTIL.loadTable(table,FAMILIES,value);
      admin.flush(tableName);
      table.close();
      Path restoreDir=UTIL.getDataTestDirOnTestFS(snapshotName);
      Scan scan=new Scan().withStartRow(bbb).withStopRow(yyy);
      TableSnapshotScanner scanner=new TableSnapshotScanner(UTIL.getConfiguration(),restoreDir,snapshotName,scan);
      verifyScanner(scanner,bbb,yyy);
      scanner.close();
    }
  finally {
      UTIL.getAdmin().deleteSnapshot(snapshotName);
      UTIL.deleteTable(tableName);
      tearDownCluster();
    }
  }
  @Test public void testWithSingleRegion() throws Exception {
    testScanner(UTIL,"testWithSingleRegion",1,false);
  }
  @Test public void testWithMultiRegion() throws Exception {
    testScanner(UTIL,"testWithMultiRegion",10,false);
  }
  @Test public void testWithOfflineHBaseMultiRegion() throws Exception {
    testScanner(UTIL,"testWithMultiRegion",20,true);
  }
  @Test public void testScannerWithRestoreScanner() throws Exception {
    setupCluster();
    TableName tableName=TableName.valueOf("testScanner");
    String snapshotName="testScannerWithRestoreScanner";
    try {
      createTableAndSnapshot(UTIL,tableName,snapshotName,50);
      Path restoreDir=UTIL.getDataTestDirOnTestFS(snapshotName);
      Scan scan=new Scan(bbb,yyy);
      Configuration conf=UTIL.getConfiguration();
      Path rootDir=FSUtils.getRootDir(conf);
      TableSnapshotScanner scanner0=new TableSnapshotScanner(conf,restoreDir,snapshotName,scan);
      verifyScanner(scanner0,bbb,yyy);
      scanner0.close();
      RestoreSnapshotHelper.copySnapshotForScanner(conf,fs,rootDir,restoreDir,snapshotName);
      TableSnapshotScanner scanner=new TableSnapshotScanner(conf,rootDir,restoreDir,snapshotName,scan,true);
      verifyScanner(scanner,bbb,yyy);
      scanner.close();
      scanner=new TableSnapshotScanner(conf,rootDir,restoreDir,snapshotName,scan,true);
      verifyScanner(scanner,bbb,yyy);
      scanner.close();
      RestoreSnapshotHelper.copySnapshotForScanner(conf,fs,rootDir,restoreDir,snapshotName);
      scanner=new TableSnapshotScanner(conf,rootDir,restoreDir,snapshotName,scan,true);
      verifyScanner(scanner,bbb,yyy);
      scanner.close();
    }
  finally {
      UTIL.getAdmin().deleteSnapshot(snapshotName);
      UTIL.deleteTable(tableName);
      tearDownCluster();
    }
  }
  private void testScanner(  HBaseTestingUtility util,  String snapshotName,  int numRegions,  boolean shutdownCluster) throws Exception {
    setupCluster();
    TableName tableName=TableName.valueOf("testScanner");
    try {
      createTableAndSnapshot(util,tableName,snapshotName,numRegions);
      if (shutdownCluster) {
        util.shutdownMiniHBaseCluster();
      }
      Path restoreDir=util.getDataTestDirOnTestFS(snapshotName);
      Scan scan=new Scan(bbb,yyy);
      TableSnapshotScanner scanner=new TableSnapshotScanner(UTIL.getConfiguration(),restoreDir,snapshotName,scan);
      verifyScanner(scanner,bbb,yyy);
      scanner.close();
    }
  finally {
      if (!shutdownCluster) {
        util.getAdmin().deleteSnapshot(snapshotName);
        util.deleteTable(tableName);
        tearDownCluster();
      }
    }
  }
  private void verifyScanner(  ResultScanner scanner,  byte[] startRow,  byte[] stopRow) throws IOException, InterruptedException {
    HBaseTestingUtility.SeenRowTracker rowTracker=new HBaseTestingUtility.SeenRowTracker(startRow,stopRow);
    while (true) {
      Result result=scanner.next();
      if (result == null) {
        break;
      }
      verifyRow(result);
      rowTracker.addRow(result.getRow());
    }
    rowTracker.validate();
  }
  private static void verifyRow(  Result result) throws IOException {
    byte[] row=result.getRow();
    CellScanner scanner=result.cellScanner();
    while (scanner.advance()) {
      Cell cell=scanner.current();
      Assert.assertEquals(0,Bytes.compareTo(row,0,row.length,cell.getRowArray(),cell.getRowOffset(),cell.getRowLength()));
    }
    for (int j=0; j < FAMILIES.length; j++) {
      byte[] actual=result.getValue(FAMILIES[j],FAMILIES[j]);
      Assert.assertArrayEquals("Row in snapshot does not match, expected:" + Bytes.toString(row) + " ,actual:"+ Bytes.toString(actual),row,actual);
    }
  }
}
