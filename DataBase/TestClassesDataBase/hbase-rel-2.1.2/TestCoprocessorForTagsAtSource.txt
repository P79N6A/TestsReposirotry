public static class TestCoprocessorForTagsAtSource implements RegionCoprocessor, RegionObserver {
  @Override public Optional<RegionObserver> getRegionObserver(){
    return Optional.of(this);
  }
  @Override public void prePut(  final ObserverContext<RegionCoprocessorEnvironment> e,  final Put put,  final WALEdit edit,  final Durability durability) throws IOException {
    byte[] attribute=put.getAttribute("visibility");
    byte[] cf=null;
    List<Cell> updatedCells=new ArrayList<>();
    if (attribute != null) {
      for (      List<? extends Cell> edits : put.getFamilyCellMap().values()) {
        for (        Cell cell : edits) {
          KeyValue kv=KeyValueUtil.ensureKeyValue(cell);
          if (cf == null) {
            cf=CellUtil.cloneFamily(kv);
          }
          Tag tag=new ArrayBackedTag(TAG_TYPE,attribute);
          List<Tag> tagList=new ArrayList<>(1);
          tagList.add(tag);
          KeyValue newKV=new KeyValue(CellUtil.cloneRow(kv),0,kv.getRowLength(),CellUtil.cloneFamily(kv),0,kv.getFamilyLength(),CellUtil.cloneQualifier(kv),0,kv.getQualifierLength(),kv.getTimestamp(),KeyValue.Type.codeToType(kv.getTypeByte()),CellUtil.cloneValue(kv),0,kv.getValueLength(),tagList);
          ((List<Cell>)updatedCells).add(newKV);
        }
      }
      put.getFamilyCellMap().remove(cf);
      put.getFamilyCellMap().put(cf,updatedCells);
    }
  }
}
