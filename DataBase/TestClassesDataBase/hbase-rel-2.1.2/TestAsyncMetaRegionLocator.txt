@Category({MediumTests.class,ClientTests.class}) public class TestAsyncMetaRegionLocator {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAsyncMetaRegionLocator.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static AsyncRegistry REGISTRY;
  private static AsyncMetaRegionLocator LOCATOR;
  @BeforeClass public static void setUp() throws Exception {
    TEST_UTIL.getConfiguration().set(BaseLoadBalancer.TABLES_ON_MASTER,"none");
    TEST_UTIL.startMiniCluster(3);
    TEST_UTIL.waitUntilAllSystemRegionsAssigned();
    TEST_UTIL.getAdmin().setBalancerRunning(false,true);
    REGISTRY=AsyncRegistryFactory.getRegistry(TEST_UTIL.getConfiguration());
    LOCATOR=new AsyncMetaRegionLocator(REGISTRY);
  }
  @AfterClass public static void tearDown() throws Exception {
    IOUtils.closeQuietly(REGISTRY);
    TEST_UTIL.shutdownMiniCluster();
  }
  private Optional<ServerName> getRSCarryingMeta(){
    return TEST_UTIL.getHBaseCluster().getRegionServerThreads().stream().map(t -> t.getRegionServer()).filter(rs -> !rs.getRegions(TableName.META_TABLE_NAME).isEmpty()).findAny().map(rs -> rs.getServerName());
  }
  @Test public void testReload() throws Exception {
    ServerName serverName=getRSCarryingMeta().get();
    assertEquals(serverName,LOCATOR.getRegionLocation(false).get().getServerName());
    ServerName newServerName=TEST_UTIL.getHBaseCluster().getRegionServerThreads().stream().map(t -> t.getRegionServer().getServerName()).filter(sn -> !sn.equals(serverName)).findAny().get();
    TEST_UTIL.getAdmin().move(HRegionInfo.FIRST_META_REGIONINFO.getEncodedNameAsBytes(),Bytes.toBytes(newServerName.getServerName()));
    TEST_UTIL.waitFor(30000,new ExplainingPredicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        Optional<ServerName> newServerName=getRSCarryingMeta();
        return newServerName.isPresent() && !newServerName.get().equals(serverName);
      }
      @Override public String explainFailure() throws Exception {
        return HRegionInfo.FIRST_META_REGIONINFO.getRegionNameAsString() + " is still on " + serverName;
      }
    }
);
    assertEquals(serverName,LOCATOR.getRegionLocation(false).get().getServerName());
    assertEquals(newServerName,LOCATOR.getRegionLocation(true).get().getServerName());
    assertEquals(newServerName,LOCATOR.getRegionLocation(false).get().getServerName());
  }
}
