/** 
 * Test the reading and writing of access permissions to and from zookeeper.
 */
@Category({SecurityTests.class,LargeTests.class}) public class TestZKPermissionWatcher {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestZKPermissionWatcher.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestZKPermissionWatcher.class);
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static TableAuthManager AUTH_A;
  private static TableAuthManager AUTH_B;
  private final static Abortable ABORTABLE=new Abortable(){
    private final AtomicBoolean abort=new AtomicBoolean(false);
    @Override public void abort(    String why,    Throwable e){
      LOG.info(why,e);
      abort.set(true);
    }
    @Override public boolean isAborted(){
      return abort.get();
    }
  }
;
  private static TableName TEST_TABLE=TableName.valueOf("perms_test");
  @BeforeClass public static void beforeClass() throws Exception {
    Configuration conf=UTIL.getConfiguration();
    SecureTestUtil.enableSecurity(conf);
    UTIL.startMiniCluster();
    AUTH_A=TableAuthManager.getOrCreate(new ZKWatcher(conf,"TestZKPermissionsWatcher_1",ABORTABLE),conf);
    AUTH_B=TableAuthManager.getOrCreate(new ZKWatcher(conf,"TestZKPermissionsWatcher_2",ABORTABLE),conf);
  }
  @AfterClass public static void afterClass() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  @Test public void testPermissionsWatcher() throws Exception {
    Configuration conf=UTIL.getConfiguration();
    User george=User.createUserForTesting(conf,"george",new String[]{});
    User hubert=User.createUserForTesting(conf,"hubert",new String[]{});
    assertFalse(AUTH_A.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.READ));
    assertFalse(AUTH_A.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.WRITE));
    assertFalse(AUTH_A.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.READ));
    assertFalse(AUTH_A.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.WRITE));
    assertFalse(AUTH_B.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.READ));
    assertFalse(AUTH_B.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.WRITE));
    assertFalse(AUTH_B.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.READ));
    assertFalse(AUTH_B.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.WRITE));
    List<TablePermission> acl=new ArrayList<>(1);
    acl.add(new TablePermission(TEST_TABLE,null,TablePermission.Action.READ,TablePermission.Action.WRITE));
    final long mtimeB=AUTH_B.getMTime();
    AUTH_A.setTableUserPermissions(george.getShortName(),TEST_TABLE,acl);
    UTIL.waitFor(10000,100,new Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return AUTH_B.getMTime() > mtimeB;
      }
    }
);
    Thread.sleep(1000);
    assertTrue(AUTH_A.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.READ));
    assertTrue(AUTH_A.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.WRITE));
    assertTrue(AUTH_B.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.READ));
    assertTrue(AUTH_B.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.WRITE));
    assertFalse(AUTH_A.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.READ));
    assertFalse(AUTH_A.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.WRITE));
    assertFalse(AUTH_B.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.READ));
    assertFalse(AUTH_B.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.WRITE));
    acl=new ArrayList<>(1);
    acl.add(new TablePermission(TEST_TABLE,null,TablePermission.Action.READ));
    final long mtimeA=AUTH_A.getMTime();
    AUTH_B.setTableUserPermissions("hubert",TEST_TABLE,acl);
    UTIL.waitFor(10000,100,new Predicate<Exception>(){
      @Override public boolean evaluate() throws Exception {
        return AUTH_A.getMTime() > mtimeA;
      }
    }
);
    Thread.sleep(1000);
    assertTrue(AUTH_A.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.READ));
    assertTrue(AUTH_A.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.WRITE));
    assertTrue(AUTH_B.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.READ));
    assertTrue(AUTH_B.authorizeUser(george,TEST_TABLE,null,TablePermission.Action.WRITE));
    assertTrue(AUTH_A.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.READ));
    assertFalse(AUTH_A.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.WRITE));
    assertTrue(AUTH_B.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.READ));
    assertFalse(AUTH_B.authorizeUser(hubert,TEST_TABLE,null,TablePermission.Action.WRITE));
  }
}
