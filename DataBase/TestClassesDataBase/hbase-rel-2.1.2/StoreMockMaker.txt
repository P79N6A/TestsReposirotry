class StoreMockMaker extends StatefulStoreMockMaker {
  public ArrayList<HStoreFile> compacting=new ArrayList<>();
  public ArrayList<HStoreFile> notCompacting=new ArrayList<>();
  private final ArrayList<Integer> results;
  public StoreMockMaker(  ArrayList<Integer> results){
    this.results=results;
  }
public class TestCompactionContext extends CompactionContext {
    private List<HStoreFile> selectedFiles;
    public TestCompactionContext(    List<HStoreFile> selectedFiles){
      super();
      this.selectedFiles=selectedFiles;
    }
    @Override public List<HStoreFile> preSelect(    List<HStoreFile> filesCompacting){
      return new ArrayList<>();
    }
    @Override public boolean select(    List<HStoreFile> filesCompacting,    boolean isUserCompaction,    boolean mayUseOffPeak,    boolean forceMajor) throws IOException {
      this.request=new CompactionRequestImpl(selectedFiles);
      this.request.setPriority(getPriority());
      return true;
    }
    @Override public List<Path> compact(    ThroughputController throughputController,    User user) throws IOException {
      finishCompaction(this.selectedFiles);
      return new ArrayList<>();
    }
  }
  @Override public synchronized Optional<CompactionContext> selectCompaction(){
    CompactionContext ctx=new TestCompactionContext(new ArrayList<>(notCompacting));
    compacting.addAll(notCompacting);
    notCompacting.clear();
    try {
      ctx.select(null,false,false,false);
    }
 catch (    IOException ex) {
      fail("Shouldn't happen");
    }
    return Optional.of(ctx);
  }
  @Override public synchronized void cancelCompaction(  Object object){
    TestCompactionContext ctx=(TestCompactionContext)object;
    compacting.removeAll(ctx.selectedFiles);
    notCompacting.addAll(ctx.selectedFiles);
  }
  public synchronized void finishCompaction(  List<HStoreFile> sfs){
    if (sfs.isEmpty())     return;
synchronized (results) {
      results.add(sfs.size());
    }
    compacting.removeAll(sfs);
  }
  @Override public int getPriority(){
    return 7 - compacting.size() - notCompacting.size();
  }
}
