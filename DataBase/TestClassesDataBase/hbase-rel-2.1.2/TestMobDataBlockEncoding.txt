@Category(MediumTests.class) public class TestMobDataBlockEncoding {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMobDataBlockEncoding.class);
  private final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private final static byte[] row1=Bytes.toBytes("row1");
  private final static byte[] family=Bytes.toBytes("family");
  private final static byte[] qf1=Bytes.toBytes("qualifier1");
  private final static byte[] qf2=Bytes.toBytes("qualifier2");
  protected final byte[] qf3=Bytes.toBytes("qualifier3");
  private static Table table;
  private static Admin admin;
  private static HColumnDescriptor hcd;
  private static HTableDescriptor desc;
  private static Random random=new Random();
  private static long defaultThreshold=10;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.startMiniCluster(1);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  public void setUp(  long threshold,  String TN,  DataBlockEncoding encoding) throws Exception {
    desc=new HTableDescriptor(TableName.valueOf(TN));
    hcd=new HColumnDescriptor(family);
    hcd.setMobEnabled(true);
    hcd.setMobThreshold(threshold);
    hcd.setMaxVersions(4);
    hcd.setDataBlockEncoding(encoding);
    desc.addFamily(hcd);
    admin=TEST_UTIL.getAdmin();
    admin.createTable(desc);
    table=ConnectionFactory.createConnection(TEST_UTIL.getConfiguration()).getTable(TableName.valueOf(TN));
  }
  /** 
 * Generate the mob value.
 * @param size the size of the value
 * @return the mob value generated
 */
  private static byte[] generateMobValue(  int size){
    byte[] mobVal=new byte[size];
    random.nextBytes(mobVal);
    return mobVal;
  }
  @Test public void testDataBlockEncoding() throws Exception {
    for (    DataBlockEncoding encoding : DataBlockEncoding.values()) {
      testDataBlockEncoding(encoding);
    }
  }
  public void testDataBlockEncoding(  DataBlockEncoding encoding) throws Exception {
    String TN="testDataBlockEncoding" + encoding;
    setUp(defaultThreshold,TN,encoding);
    long ts1=System.currentTimeMillis();
    long ts2=ts1 + 1;
    long ts3=ts1 + 2;
    byte[] value=generateMobValue((int)defaultThreshold + 1);
    Put put1=new Put(row1);
    put1.addColumn(family,qf1,ts3,value);
    put1.addColumn(family,qf2,ts2,value);
    put1.addColumn(family,qf3,ts1,value);
    table.put(put1);
    admin.flush(TableName.valueOf(TN));
    Scan scan=new Scan();
    scan.setMaxVersions(4);
    MobTestUtil.assertCellsValue(table,scan,value,3);
  }
}
