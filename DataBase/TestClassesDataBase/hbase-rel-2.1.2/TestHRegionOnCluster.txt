/** 
 * Tests that need to spin up a cluster testing an  {@link HRegion}.  Use {@link TestHRegion} if you don't need a cluster, if you can test w/ astandalone  {@link HRegion}.
 */
@Category({RegionServerTests.class,MediumTests.class}) public class TestHRegionOnCluster {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHRegionOnCluster.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestHRegionOnCluster.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  @Rule public TestName name=new TestName();
  @Test public void testDataCorrectnessReplayingRecoveredEdits() throws Exception {
    final int NUM_MASTERS=1;
    final int NUM_RS=3;
    Admin hbaseAdmin=null;
    TEST_UTIL.startMiniCluster(NUM_MASTERS,NUM_RS);
    try {
      final TableName tableName=TableName.valueOf(name.getMethodName());
      final byte[] FAMILY=Bytes.toBytes("family");
      MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
      HMaster master=cluster.getMaster();
      HTableDescriptor desc=new HTableDescriptor(tableName);
      desc.addFamily(new HColumnDescriptor(FAMILY));
      hbaseAdmin=master.getConnection().getAdmin();
      hbaseAdmin.createTable(desc);
      assertTrue(hbaseAdmin.isTableAvailable(tableName));
      LOG.info("Loading r1 to v1 into " + tableName);
      Table table=TEST_UTIL.getConnection().getTable(tableName);
      putDataAndVerify(table,"r1",FAMILY,"v1",1);
      TEST_UTIL.waitUntilAllRegionsAssigned(table.getName());
      HRegionInfo regionInfo;
      try (RegionLocator locator=TEST_UTIL.getConnection().getRegionLocator(tableName)){
        regionInfo=locator.getRegionLocation(Bytes.toBytes("r1")).getRegionInfo();
      }
       int originServerNum=cluster.getServerWith(regionInfo.getRegionName());
      HRegionServer originServer=cluster.getRegionServer(originServerNum);
      int targetServerNum=(originServerNum + 1) % NUM_RS;
      HRegionServer targetServer=cluster.getRegionServer(targetServerNum);
      assertFalse(originServer.equals(targetServer));
      TEST_UTIL.waitUntilAllRegionsAssigned(table.getName());
      LOG.info("Moving " + regionInfo.getEncodedName() + " to "+ targetServer.getServerName());
      hbaseAdmin.move(regionInfo.getEncodedNameAsBytes(),Bytes.toBytes(targetServer.getServerName().getServerName()));
      do {
        Thread.sleep(1);
      }
 while (cluster.getServerWith(regionInfo.getRegionName()) == originServerNum);
      LOG.info("Loading r2 to v2 into " + tableName);
      putDataAndVerify(table,"r2",FAMILY,"v2",2);
      TEST_UTIL.waitUntilAllRegionsAssigned(table.getName());
      LOG.info("Moving " + regionInfo.getEncodedName() + " to "+ originServer.getServerName());
      hbaseAdmin.move(regionInfo.getEncodedNameAsBytes(),Bytes.toBytes(originServer.getServerName().getServerName()));
      do {
        Thread.sleep(1);
      }
 while (cluster.getServerWith(regionInfo.getRegionName()) == targetServerNum);
      LOG.info("Loading r3 to v3 into " + tableName);
      putDataAndVerify(table,"r3",FAMILY,"v3",3);
      LOG.info("Killing target server " + targetServer.getServerName());
      targetServer.kill();
      cluster.getRegionServerThreads().get(targetServerNum).join();
      while (master.getServerManager().areDeadServersInProgress()) {
        Thread.sleep(5);
      }
      LOG.info("Killing origin server " + targetServer.getServerName());
      originServer.kill();
      cluster.getRegionServerThreads().get(originServerNum).join();
      LOG.info("Loading r4 to v4 into " + tableName);
      putDataAndVerify(table,"r4",FAMILY,"v4",4);
    }
  finally {
      if (hbaseAdmin != null)       hbaseAdmin.close();
      TEST_UTIL.shutdownMiniCluster();
    }
  }
  private void putDataAndVerify(  Table table,  String row,  byte[] family,  String value,  int verifyNum) throws IOException {
    System.out.println("=========Putting data :" + row);
    Put put=new Put(Bytes.toBytes(row));
    put.addColumn(family,Bytes.toBytes("q1"),Bytes.toBytes(value));
    table.put(put);
    ResultScanner resultScanner=table.getScanner(new Scan());
    List<Result> results=new ArrayList<>();
    while (true) {
      Result r=resultScanner.next();
      if (r == null)       break;
      results.add(r);
    }
    resultScanner.close();
    if (results.size() != verifyNum) {
      System.out.println(results);
    }
    assertEquals(verifyNum,results.size());
  }
}
