@Category({RegionServerTests.class,MediumTests.class}) public class TestRegionReplicasAreDistributed {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRegionReplicasAreDistributed.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestRegionReplicasAreDistributed.class);
  private static final int NB_SERVERS=3;
  private static Table table;
  private static final HBaseTestingUtility HTU=new HBaseTestingUtility();
  private static final byte[] f=HConstants.CATALOG_FAMILY;
  Map<ServerName,Collection<RegionInfo>> serverVsOnlineRegions;
  Map<ServerName,Collection<RegionInfo>> serverVsOnlineRegions2;
  Map<ServerName,Collection<RegionInfo>> serverVsOnlineRegions3;
  Map<ServerName,Collection<RegionInfo>> serverVsOnlineRegions4;
  @BeforeClass public static void before() throws Exception {
    HTU.getConfiguration().setInt(">hbase.master.wait.on.regionservers.mintostart",3);
    HTU.startMiniCluster(NB_SERVERS);
    Thread.sleep(3000);
    final TableName tableName=TableName.valueOf(TestRegionReplicasAreDistributed.class.getSimpleName());
    createTableDirectlyFromHTD(tableName);
  }
  private static void createTableDirectlyFromHTD(  final TableName tableName) throws IOException {
    HTableDescriptor htd=new HTableDescriptor(tableName);
    htd.setRegionReplication(3);
    table=HTU.createTable(htd,new byte[][]{f},getSplits(20),new Configuration(HTU.getConfiguration()));
  }
  private static byte[][] getSplits(  int numRegions){
    RegionSplitter.UniformSplit split=new RegionSplitter.UniformSplit();
    split.setFirstRow(Bytes.toBytes(0L));
    split.setLastRow(Bytes.toBytes(Long.MAX_VALUE));
    return split.split(numRegions);
  }
  @AfterClass public static void afterClass() throws Exception {
    HRegionServer.TEST_SKIP_REPORTING_TRANSITION=false;
    table.close();
    HTU.shutdownMiniCluster();
  }
  private HRegionServer getRS(){
    return HTU.getMiniHBaseCluster().getRegionServer(0);
  }
  private HRegionServer getSecondaryRS(){
    return HTU.getMiniHBaseCluster().getRegionServer(1);
  }
  private HRegionServer getTertiaryRS(){
    return HTU.getMiniHBaseCluster().getRegionServer(2);
  }
  @Test public void testRegionReplicasCreatedAreDistributed() throws Exception {
    try {
      checkAndAssertRegionDistribution(false);
      HTU.getAdmin().disableTable(table.getName());
      LOG.info("Disabled the table " + table.getName());
      LOG.info("enabling the table " + table.getName());
      HTU.getAdmin().enableTable(table.getName());
      LOG.info("Enabled the table " + table.getName());
      boolean res=checkAndAssertRegionDistribution(true);
      assertTrue("Region retainment not done ",res);
    }
  finally {
      HTU.getAdmin().disableTable(table.getName());
      HTU.getAdmin().deleteTable(table.getName());
    }
  }
  private boolean checkAndAssertRegionDistribution(  boolean checkfourth) throws Exception {
    Collection<RegionInfo> onlineRegions=new ArrayList<RegionInfo>(getRS().getOnlineRegionsLocalContext().size());
    for (    HRegion region : getRS().getOnlineRegionsLocalContext()) {
      onlineRegions.add(region.getRegionInfo());
    }
    if (this.serverVsOnlineRegions == null) {
      this.serverVsOnlineRegions=new HashMap<ServerName,Collection<RegionInfo>>();
      this.serverVsOnlineRegions.put(getRS().getServerName(),onlineRegions);
    }
 else {
      Collection<RegionInfo> existingRegions=new ArrayList<RegionInfo>(this.serverVsOnlineRegions.get(getRS().getServerName()));
      LOG.info("Count is " + existingRegions.size() + " "+ onlineRegions.size());
      for (      RegionInfo existingRegion : existingRegions) {
        if (!onlineRegions.contains(existingRegion)) {
          return false;
        }
      }
    }
    Collection<RegionInfo> onlineRegions2=new ArrayList<RegionInfo>(getSecondaryRS().getOnlineRegionsLocalContext().size());
    for (    HRegion region : getSecondaryRS().getOnlineRegionsLocalContext()) {
      onlineRegions2.add(region.getRegionInfo());
    }
    if (this.serverVsOnlineRegions2 == null) {
      this.serverVsOnlineRegions2=new HashMap<ServerName,Collection<RegionInfo>>();
      this.serverVsOnlineRegions2.put(getSecondaryRS().getServerName(),onlineRegions2);
    }
 else {
      Collection<RegionInfo> existingRegions=new ArrayList<RegionInfo>(this.serverVsOnlineRegions2.get(getSecondaryRS().getServerName()));
      LOG.info("Count is " + existingRegions.size() + " "+ onlineRegions2.size());
      for (      RegionInfo existingRegion : existingRegions) {
        if (!onlineRegions2.contains(existingRegion)) {
          return false;
        }
      }
    }
    Collection<RegionInfo> onlineRegions3=new ArrayList<RegionInfo>(getTertiaryRS().getOnlineRegionsLocalContext().size());
    for (    HRegion region : getTertiaryRS().getOnlineRegionsLocalContext()) {
      onlineRegions3.add(region.getRegionInfo());
    }
    if (this.serverVsOnlineRegions3 == null) {
      this.serverVsOnlineRegions3=new HashMap<ServerName,Collection<RegionInfo>>();
      this.serverVsOnlineRegions3.put(getTertiaryRS().getServerName(),onlineRegions3);
    }
 else {
      Collection<RegionInfo> existingRegions=new ArrayList<RegionInfo>(this.serverVsOnlineRegions3.get(getTertiaryRS().getServerName()));
      LOG.info("Count is " + existingRegions.size() + " "+ onlineRegions3.size());
      for (      RegionInfo existingRegion : existingRegions) {
        if (!onlineRegions3.contains(existingRegion)) {
          return false;
        }
      }
    }
    return true;
  }
}
