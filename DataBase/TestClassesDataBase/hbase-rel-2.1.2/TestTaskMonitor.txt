@Category({MiscTests.class,SmallTests.class}) public class TestTaskMonitor {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestTaskMonitor.class);
  @Test public void testTaskMonitorBasics(){
    TaskMonitor tm=new TaskMonitor(new Configuration());
    assertTrue("Task monitor should start empty",tm.getTasks().isEmpty());
    MonitoredTask task=tm.createStatus("Test task");
    MonitoredTask taskFromTm=tm.getTasks().get(0);
    assertEquals(task.getDescription(),taskFromTm.getDescription());
    assertEquals(-1,taskFromTm.getCompletionTimestamp());
    assertEquals(MonitoredTask.State.RUNNING,taskFromTm.getState());
    task.markComplete("Finished!");
    assertEquals(MonitoredTask.State.COMPLETE,task.getState());
    assertEquals(1,tm.getTasks().size());
    task.expireNow();
    assertEquals(0,tm.getTasks().size());
    tm.shutdown();
  }
  @Test public void testTasksGetAbortedOnLeak() throws InterruptedException {
    final TaskMonitor tm=new TaskMonitor(new Configuration());
    assertTrue("Task monitor should start empty",tm.getTasks().isEmpty());
    final AtomicBoolean threadSuccess=new AtomicBoolean(false);
    Thread t=new Thread(){
      @Override public void run(){
        MonitoredTask task=tm.createStatus("Test task");
        assertEquals(MonitoredTask.State.RUNNING,task.getState());
        threadSuccess.set(true);
      }
    }
;
    t.start();
    t.join();
    assertTrue(threadSuccess.get());
    System.gc();
    System.gc();
    System.gc();
    MonitoredTask taskFromTm=tm.getTasks().get(0);
    assertEquals(MonitoredTask.State.ABORTED,taskFromTm.getState());
    tm.shutdown();
  }
  @Test public void testTaskLimit() throws Exception {
    TaskMonitor tm=new TaskMonitor(new Configuration());
    for (int i=0; i < TaskMonitor.DEFAULT_MAX_TASKS + 10; i++) {
      tm.createStatus("task " + i);
    }
    assertEquals(TaskMonitor.DEFAULT_MAX_TASKS,tm.getTasks().size());
    assertEquals("task 10",tm.getTasks().get(0).getDescription());
    tm.shutdown();
  }
  @Test public void testDoNotPurgeRPCTask() throws Exception {
    int RPCTaskNums=10;
    TaskMonitor tm=TaskMonitor.get();
    for (int i=0; i < RPCTaskNums; i++) {
      tm.createRPCStatus("PRCTask" + i);
    }
    for (int i=0; i < TaskMonitor.DEFAULT_MAX_TASKS; i++) {
      tm.createStatus("otherTask" + i);
    }
    int remainRPCTask=0;
    for (    MonitoredTask task : tm.getTasks()) {
      if (task instanceof MonitoredRPCHandler) {
        remainRPCTask++;
      }
    }
    assertEquals("RPC Tasks have been purged!",RPCTaskNums,remainRPCTask);
    tm.shutdown();
  }
  @Test public void testWarnStuckTasks() throws Exception {
    final int INTERVAL=1000;
    Configuration conf=new Configuration();
    conf.setLong(TaskMonitor.RPC_WARN_TIME_KEY,INTERVAL);
    conf.setLong(TaskMonitor.MONITOR_INTERVAL_KEY,INTERVAL);
    final TaskMonitor tm=new TaskMonitor(conf);
    MonitoredRPCHandler t=tm.createRPCStatus("test task");
    long then=EnvironmentEdgeManager.currentTime();
    t.setRPC("testMethod",new Object[0],then);
    Thread.sleep(INTERVAL * 2);
    assertTrue("We did not warn",t.getWarnTime() > then);
    tm.shutdown();
  }
  @Test public void testGetTasksWithFilter() throws Exception {
    TaskMonitor tm=new TaskMonitor(new Configuration());
    assertTrue("Task monitor should start empty",tm.getTasks().isEmpty());
    tm.createStatus("General task1");
    tm.createStatus("General task2");
    tm.createStatus("General task3");
    tm.createStatus("General task4");
    tm.createStatus("General task5");
    int length=5;
    ArrayList<MonitoredRPCHandler> rpcHandlers=new ArrayList<>(length);
    for (int i=0; i < length; i++) {
      MonitoredRPCHandler rpcHandler=tm.createRPCStatus("Rpc task" + i);
      rpcHandlers.add(rpcHandler);
    }
    byte[] row=new byte[]{0x01};
    Mutation m=new Put(row);
    Query q=new Scan();
    String notOperation="for test";
    rpcHandlers.get(0).setRPC("operations",new Object[]{m,q},3000);
    rpcHandlers.get(1).setRPC("operations",new Object[]{m,q},3000);
    rpcHandlers.get(2).setRPC("operations",new Object[]{m,q},3000);
    rpcHandlers.get(3).setRPC("operations",new Object[]{notOperation},3000);
    rpcHandlers.get(4).setRPC("operations",new Object[]{m,q},3000);
    MonitoredRPCHandler completed=rpcHandlers.get(4);
    completed.markComplete("Completed!");
    List<MonitoredTask> generalTasks=tm.getTasks("general");
    assertEquals(5,generalTasks.size());
    List<MonitoredTask> handlerTasks=tm.getTasks("handler");
    assertEquals(5,handlerTasks.size());
    List<MonitoredTask> rpcTasks=tm.getTasks("rpc");
    assertEquals(4,rpcTasks.size());
    List<MonitoredTask> operationTasks=tm.getTasks("operation");
    assertEquals(3,operationTasks.size());
    tm.shutdown();
  }
  @Test public void testStatusJournal(){
    TaskMonitor tm=new TaskMonitor(new Configuration());
    MonitoredTask task=tm.createStatus("Test task");
    assertTrue(task.getStatusJournal().isEmpty());
    task.disableStatusJournal();
    task.setStatus("status1");
    assertTrue(task.getStatusJournal().isEmpty());
    task.enableStatusJournal(true);
    assertEquals("status1",task.getStatusJournal().get(0).getStatus());
    assertTrue(task.getStatusJournal().get(0).getTimeStamp() > 0);
    task.disableStatusJournal();
    task.setStatus("status2");
    assertEquals(1,task.getStatusJournal().size());
    task.enableStatusJournal(false);
    assertEquals(1,task.getStatusJournal().size());
    task.setStatus("status3");
    assertEquals("status3",task.getStatusJournal().get(1).getStatus());
    tm.shutdown();
  }
}
