@Category({MediumTests.class,ClientTests.class}) public class TestSplitOrMergeStatus {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSplitOrMergeStatus.class);
  private final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static byte[] FAMILY=Bytes.toBytes("testFamily");
  @Rule public TestName name=new TestName();
  /** 
 * @throws java.lang.Exception
 */
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.startMiniCluster(2);
  }
  /** 
 * @throws java.lang.Exception
 */
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testSplitSwitch() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    Table t=TEST_UTIL.createTable(tableName,FAMILY);
    TEST_UTIL.loadTable(t,FAMILY,false);
    RegionLocator locator=TEST_UTIL.getConnection().getRegionLocator(t.getName());
    int originalCount=locator.getAllRegionLocations().size();
    Admin admin=TEST_UTIL.getAdmin();
    initSwitchStatus(admin);
    boolean[] results=admin.setSplitOrMergeEnabled(false,false,MasterSwitchType.SPLIT);
    assertEquals(1,results.length);
    assertTrue(results[0]);
    admin.split(t.getName());
    int count=admin.getTableRegions(tableName).size();
    assertTrue(originalCount == count);
    results=admin.setSplitOrMergeEnabled(true,false,MasterSwitchType.SPLIT);
    assertEquals(1,results.length);
    assertFalse(results[0]);
    admin.split(t.getName());
    while ((count=admin.getTableRegions(tableName).size()) == originalCount) {
      Threads.sleep(1);
      ;
    }
    count=admin.getTableRegions(tableName).size();
    assertTrue(originalCount < count);
    admin.close();
  }
  @Ignore @Test public void testMergeSwitch() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    Table t=TEST_UTIL.createTable(tableName,FAMILY);
    TEST_UTIL.loadTable(t,FAMILY,false);
    Admin admin=TEST_UTIL.getAdmin();
    int originalCount=admin.getTableRegions(tableName).size();
    initSwitchStatus(admin);
    admin.split(t.getName());
    int postSplitCount=-1;
    while ((postSplitCount=admin.getTableRegions(tableName).size()) == originalCount) {
      Threads.sleep(1);
      ;
    }
    assertTrue("originalCount=" + originalCount + ", newCount="+ postSplitCount,originalCount != postSplitCount);
    boolean[] results=admin.setSplitOrMergeEnabled(false,false,MasterSwitchType.MERGE);
    assertEquals(1,results.length);
    assertTrue(results[0]);
    List<HRegionInfo> regions=admin.getTableRegions(t.getName());
    assertTrue(regions.size() > 1);
    Future<?> f=admin.mergeRegionsAsync(regions.get(0).getEncodedNameAsBytes(),regions.get(1).getEncodedNameAsBytes(),true);
    try {
      f.get(10,TimeUnit.SECONDS);
      fail("Should not get here.");
    }
 catch (    ExecutionException ee) {
    }
    int count=admin.getTableRegions(tableName).size();
    assertTrue("newCount=" + postSplitCount + ", count="+ count,postSplitCount == count);
    results=admin.setSplitOrMergeEnabled(true,false,MasterSwitchType.MERGE);
    regions=admin.getTableRegions(t.getName());
    assertEquals(1,results.length);
    assertFalse(results[0]);
    f=admin.mergeRegionsAsync(regions.get(0).getEncodedNameAsBytes(),regions.get(1).getEncodedNameAsBytes(),true);
    f.get(10,TimeUnit.SECONDS);
    count=admin.getTableRegions(tableName).size();
    assertTrue((postSplitCount / 2) == count);
    admin.close();
  }
  @Test public void testMultiSwitches() throws IOException {
    Admin admin=TEST_UTIL.getAdmin();
    boolean[] switches=admin.setSplitOrMergeEnabled(false,false,MasterSwitchType.SPLIT,MasterSwitchType.MERGE);
    for (    boolean s : switches) {
      assertTrue(s);
    }
    assertFalse(admin.isSplitOrMergeEnabled(MasterSwitchType.SPLIT));
    assertFalse(admin.isSplitOrMergeEnabled(MasterSwitchType.MERGE));
    admin.close();
  }
  private void initSwitchStatus(  Admin admin) throws IOException {
    if (!admin.isSplitOrMergeEnabled(MasterSwitchType.SPLIT)) {
      admin.setSplitOrMergeEnabled(true,false,MasterSwitchType.SPLIT);
    }
    if (!admin.isSplitOrMergeEnabled(MasterSwitchType.MERGE)) {
      admin.setSplitOrMergeEnabled(true,false,MasterSwitchType.MERGE);
    }
    assertTrue(admin.isSplitOrMergeEnabled(MasterSwitchType.SPLIT));
    assertTrue(admin.isSplitOrMergeEnabled(MasterSwitchType.MERGE));
  }
}
