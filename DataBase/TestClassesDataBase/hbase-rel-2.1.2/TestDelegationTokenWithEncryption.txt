@RunWith(Parameterized.class) @Category({SecurityTests.class,MediumTests.class}) public class TestDelegationTokenWithEncryption extends SecureTestCluster {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestDelegationTokenWithEncryption.class);
  @BeforeClass public static void setUp() throws Exception {
    TEST_UTIL.getConfiguration().set("hbase.rpc.protection","privacy");
    SecureTestCluster.setUp();
    try (Connection conn=ConnectionFactory.createConnection(TEST_UTIL.getConfiguration())){
      Token<? extends TokenIdentifier> token=TokenUtil.obtainToken(conn);
      UserGroupInformation.getCurrentUser().addToken(token);
    }
   }
  @Parameters(name="{index}: rpcClientImpl={0}") public static Collection<Object[]> parameters(){
    return Arrays.asList(new Object[]{BlockingRpcClient.class.getName()},new Object[]{NettyRpcClient.class.getName()});
  }
  @Parameter public String rpcClientImpl;
  @Rule public TestName testName=new TestName();
  @Before public void setUpBeforeMethod(){
    TEST_UTIL.getConfiguration().set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY,rpcClientImpl);
  }
  private TableName getTestTableName(){
    return TableName.valueOf(testName.getMethodName().replaceAll("[^0-9A-Za-z]","_"));
  }
  @Test public void testPutGetWithDelegationToken() throws Exception {
    TableName tableName=getTestTableName();
    byte[] family=Bytes.toBytes("f");
    byte[] qualifier=Bytes.toBytes("q");
    byte[] row=Bytes.toBytes("row");
    byte[] value=Bytes.toBytes("data");
    try (Connection conn=ConnectionFactory.createConnection(TEST_UTIL.getConfiguration())){
      Admin admin=conn.getAdmin();
      HTableDescriptor tableDescriptor=new HTableDescriptor(new HTableDescriptor(tableName));
      tableDescriptor.addFamily(new HColumnDescriptor(family));
      admin.createTable(tableDescriptor);
      try (Table table=conn.getTable(tableName)){
        table.put(new Put(row).addColumn(family,qualifier,value));
        Result result=table.get(new Get(row));
        assertArrayEquals(value,result.getValue(family,qualifier));
      }
     }
   }
}
