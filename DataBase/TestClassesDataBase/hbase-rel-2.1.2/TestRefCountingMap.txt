@Category(SmallTests.class) public class TestRefCountingMap {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRefCountingMap.class);
  private RefCountingMap<String,String> map;
  @Before public void setUp(){
    map=new RefCountingMap<>();
  }
  @Test public void testPutGet(){
    map.put("foo",() -> "foovalue");
    String v=map.get("foo");
    assertNotNull(v);
    assertEquals("foovalue",v);
  }
  @Test public void testPutMulti(){
    String v1=map.put("foo",() -> "foovalue");
    String v2=map.put("foo",() -> "foovalue2");
    String v3=map.put("foo",() -> "foovalue3");
    String v=map.get("foo");
    assertEquals("foovalue",v);
    assertEquals(v,v1);
    assertEquals(v,v2);
    assertEquals(v,v3);
  }
  @Test public void testPutRemove(){
    map.put("foo",() -> "foovalue");
    String v=map.remove("foo");
    assertNull(v);
    v=map.get("foo");
    assertNull(v);
  }
  @Test public void testPutRemoveMulti(){
    map.put("foo",() -> "foovalue");
    map.put("foo",() -> "foovalue2");
    map.put("foo",() -> "foovalue3");
    String v=map.remove("foo");
    assertEquals("foovalue",v);
    v=map.remove("foo");
    assertEquals("foovalue",v);
    v=map.remove("foo");
    assertNull(v);
    v=map.get("foo");
    assertNull(v);
  }
  @Test public void testSize(){
    assertEquals(0,map.size());
    map.put("foo",() -> "foovalue");
    assertEquals(1,map.size());
    map.put("bar",() -> "foovalue2");
    assertEquals(2,map.size());
    map.put("bar",() -> "foovalue3");
    assertEquals(2,map.size());
  }
  @Test public void testClear(){
    map.put("foo",() -> "foovalue");
    map.put("bar",() -> "foovalue2");
    map.put("baz",() -> "foovalue3");
    map.clear();
    assertEquals(0,map.size());
  }
  @Test public void testKeySet(){
    map.put("foo",() -> "foovalue");
    map.put("bar",() -> "foovalue2");
    map.put("baz",() -> "foovalue3");
    Set<String> keys=map.keySet();
    assertEquals(3,keys.size());
    Lists.newArrayList("foo","bar","baz").stream().forEach(v -> assertTrue(keys.contains(v)));
  }
  @Test public void testValues(){
    map.put("foo",() -> "foovalue");
    map.put("foo",() -> "foovalue2");
    map.put("bar",() -> "foovalue3");
    map.put("baz",() -> "foovalue4");
    Collection<String> values=map.values();
    assertEquals(3,values.size());
    Lists.newArrayList("foovalue","foovalue3","foovalue4").stream().forEach(v -> assertTrue(values.contains(v)));
  }
}
