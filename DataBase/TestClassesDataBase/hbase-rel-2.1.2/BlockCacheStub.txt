private static class BlockCacheStub implements ResizableBlockCache {
  CacheStats stats=new CacheStats("test");
  long maxSize=0;
  private long testBlockSize=0;
  public BlockCacheStub(  long size){
    this.maxSize=size;
  }
  @Override public void cacheBlock(  BlockCacheKey cacheKey,  Cacheable buf,  boolean inMemory){
  }
  @Override public void cacheBlock(  BlockCacheKey cacheKey,  Cacheable buf){
  }
  @Override public Cacheable getBlock(  BlockCacheKey cacheKey,  boolean caching,  boolean repeat,  boolean updateCacheMetrics){
    return null;
  }
  @Override public boolean evictBlock(  BlockCacheKey cacheKey){
    stats.evicted(0,cacheKey != null ? cacheKey.isPrimary() : true);
    return false;
  }
  @Override public int evictBlocksByHfileName(  String hfileName){
    stats.evicted(0,true);
    return 0;
  }
  @Override public CacheStats getStats(){
    return this.stats;
  }
  @Override public void shutdown(){
  }
  @Override public long size(){
    return 0;
  }
  @Override public long getMaxSize(){
    return 0;
  }
  @Override public long getFreeSize(){
    return 0;
  }
  @Override public long getCurrentSize(){
    return this.testBlockSize;
  }
  @Override public long getCurrentDataSize(){
    return 0;
  }
  @Override public long getBlockCount(){
    return 0;
  }
  @Override public long getDataBlockCount(){
    return 0;
  }
  @Override public void setMaxSize(  long size){
    this.maxSize=size;
  }
  @Override public Iterator<CachedBlock> iterator(){
    return null;
  }
  @Override public BlockCache[] getBlockCaches(){
    return null;
  }
  @Override public void returnBlock(  BlockCacheKey cacheKey,  Cacheable buf){
  }
  public void setTestBlockSize(  long testBlockSize){
    this.testBlockSize=testBlockSize;
  }
}
