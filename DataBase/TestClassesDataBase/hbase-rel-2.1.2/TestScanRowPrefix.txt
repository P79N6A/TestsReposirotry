/** 
 * Test if Scan.setRowPrefixFilter works as intended.
 */
@Category({FilterTests.class,MediumTests.class}) public class TestScanRowPrefix extends FilterTestingCluster {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestScanRowPrefix.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestScanRowPrefix.class);
  @Rule public TestName name=new TestName();
  @Test public void testPrefixScanning() throws IOException {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    createTable(tableName,"F");
    Table table=openTable(tableName);
    final byte[][] rowIds={{(byte)0x11},{(byte)0x12},{(byte)0x12,(byte)0x23,(byte)0xFF,(byte)0xFE},{(byte)0x12,(byte)0x23,(byte)0xFF,(byte)0xFF},{(byte)0x12,(byte)0x23,(byte)0xFF,(byte)0xFF,(byte)0x00},{(byte)0x12,(byte)0x23,(byte)0xFF,(byte)0xFF,(byte)0x01},{(byte)0x12,(byte)0x24},{(byte)0x12,(byte)0x24,(byte)0x00},{(byte)0x12,(byte)0x24,(byte)0x00,(byte)0x00},{(byte)0x12,(byte)0x25},{(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF}};
    for (    byte[] rowId : rowIds) {
      Put p=new Put(rowId);
      p.addColumn("F".getBytes(),rowId,"Dummy value".getBytes());
      table.put(p);
    }
    byte[] prefix0={};
    List<byte[]> expected0=new ArrayList<>(16);
    expected0.addAll(Arrays.asList(rowIds));
    byte[] prefix1={(byte)0x12,(byte)0x23};
    List<byte[]> expected1=new ArrayList<>(16);
    expected1.add(rowIds[2]);
    expected1.add(rowIds[3]);
    expected1.add(rowIds[4]);
    expected1.add(rowIds[5]);
    byte[] prefix2={(byte)0x12,(byte)0x23,(byte)0xFF,(byte)0xFF};
    List<byte[]> expected2=new ArrayList<>();
    expected2.add(rowIds[3]);
    expected2.add(rowIds[4]);
    expected2.add(rowIds[5]);
    byte[] prefix3={(byte)0x12,(byte)0x24};
    List<byte[]> expected3=new ArrayList<>();
    expected3.add(rowIds[6]);
    expected3.add(rowIds[7]);
    expected3.add(rowIds[8]);
    byte[] prefix4={(byte)0xFF,(byte)0xFF};
    List<byte[]> expected4=new ArrayList<>();
    expected4.add(rowIds[10]);
    Scan scan=new Scan();
    scan.setRowPrefixFilter(prefix0);
    verifyScanResult(table,scan,expected0,"Scan empty prefix failed");
    scan=new Scan();
    scan.setRowPrefixFilter(prefix1);
    verifyScanResult(table,scan,expected1,"Scan normal prefix failed");
    scan.setRowPrefixFilter(null);
    verifyScanResult(table,scan,expected0,"Scan after prefix reset failed");
    scan=new Scan();
    scan.setFilter(new ColumnPrefixFilter(prefix1));
    verifyScanResult(table,scan,expected1,"Double check on column prefix failed");
    scan=new Scan();
    scan.setRowPrefixFilter(prefix2);
    verifyScanResult(table,scan,expected2,"Scan edge 0xFF prefix failed");
    scan.setRowPrefixFilter(null);
    verifyScanResult(table,scan,expected0,"Scan after prefix reset failed");
    scan=new Scan();
    scan.setFilter(new ColumnPrefixFilter(prefix2));
    verifyScanResult(table,scan,expected2,"Double check on column prefix failed");
    scan=new Scan();
    scan.setRowPrefixFilter(prefix3);
    verifyScanResult(table,scan,expected3,"Scan normal with 0x00 ends failed");
    scan.setRowPrefixFilter(null);
    verifyScanResult(table,scan,expected0,"Scan after prefix reset failed");
    scan=new Scan();
    scan.setFilter(new ColumnPrefixFilter(prefix3));
    verifyScanResult(table,scan,expected3,"Double check on column prefix failed");
    scan=new Scan();
    scan.setRowPrefixFilter(prefix4);
    verifyScanResult(table,scan,expected4,"Scan end prefix failed");
    scan.setRowPrefixFilter(null);
    verifyScanResult(table,scan,expected0,"Scan after prefix reset failed");
    scan=new Scan();
    scan.setFilter(new ColumnPrefixFilter(prefix4));
    verifyScanResult(table,scan,expected4,"Double check on column prefix failed");
    scan=new Scan();
    scan.setRowPrefixFilter(prefix1);
    verifyScanResult(table,scan,expected1,"Prefix filter failed");
    scan.setFilter(new ColumnPrefixFilter(prefix2));
    verifyScanResult(table,scan,expected2,"Combined Prefix + Filter failed");
    scan.setRowPrefixFilter(null);
    verifyScanResult(table,scan,expected2,"Combined Prefix + Filter; removing Prefix failed");
    scan.setFilter(null);
    verifyScanResult(table,scan,expected0,"Scan after Filter reset failed");
    scan=new Scan();
    scan.setFilter(new ColumnPrefixFilter(prefix2));
    verifyScanResult(table,scan,expected2,"Test filter failed");
    scan.setRowPrefixFilter(prefix1);
    verifyScanResult(table,scan,expected2,"Combined Filter + Prefix failed");
    scan.setFilter(null);
    verifyScanResult(table,scan,expected1,"Combined Filter + Prefix ; removing Filter failed");
    scan.setRowPrefixFilter(null);
    verifyScanResult(table,scan,expected0,"Scan after prefix reset failed");
  }
  private void verifyScanResult(  Table table,  Scan scan,  List<byte[]> expectedKeys,  String message){
    List<byte[]> actualKeys=new ArrayList<>();
    try {
      ResultScanner scanner=table.getScanner(scan);
      for (      Result result : scanner) {
        actualKeys.add(result.getRow());
      }
      String fullMessage=message;
      if (LOG.isDebugEnabled()) {
        fullMessage=message + "\n" + tableOfTwoListsOfByteArrays("Expected",expectedKeys,"Actual  ",actualKeys);
      }
      Assert.assertArrayEquals(fullMessage,expectedKeys.toArray(),actualKeys.toArray());
    }
 catch (    IOException e) {
      e.printStackTrace();
      Assert.fail();
    }
  }
  private String printMultiple(  char letter,  int count){
    StringBuilder sb=new StringBuilder(count);
    for (int i=0; i < count; i++) {
      sb.append(letter);
    }
    return sb.toString();
  }
  private String tableOfTwoListsOfByteArrays(  String label1,  List<byte[]> listOfBytes1,  String label2,  List<byte[]> listOfBytes2){
    int margin1=calculateWidth(label1,listOfBytes1);
    int margin2=calculateWidth(label2,listOfBytes2);
    StringBuilder sb=new StringBuilder(512);
    String separator='+' + printMultiple('-',margin1 + margin2 + 5) + '+'+ '\n';
    sb.append(separator);
    sb.append(printLine(label1,margin1,label2,margin2)).append('\n');
    sb.append(separator);
    int maxLength=Math.max(listOfBytes1.size(),listOfBytes2.size());
    for (int offset=0; offset < maxLength; offset++) {
      String value1=getStringFromList(listOfBytes1,offset);
      String value2=getStringFromList(listOfBytes2,offset);
      sb.append(printLine(value1,margin1,value2,margin2)).append('\n');
    }
    sb.append(separator).append('\n');
    return sb.toString();
  }
  private String printLine(  String leftValue,  int leftWidth1,  String rightValue,  int rightWidth){
    return "| " + leftValue + printMultiple(' ',leftWidth1 - leftValue.length())+ " | "+ rightValue+ printMultiple(' ',rightWidth - rightValue.length())+ " |";
  }
  private int calculateWidth(  String label1,  List<byte[]> listOfBytes1){
    int longestList1=label1.length();
    for (    byte[] value : listOfBytes1) {
      longestList1=Math.max(value.length * 2,longestList1);
    }
    return longestList1 + 5;
  }
  private String getStringFromList(  List<byte[]> listOfBytes,  int offset){
    String value1;
    if (listOfBytes.size() > offset) {
      value1=Hex.encodeHexString(listOfBytes.get(offset));
    }
 else {
      value1="<missing>";
    }
    return value1;
  }
}
