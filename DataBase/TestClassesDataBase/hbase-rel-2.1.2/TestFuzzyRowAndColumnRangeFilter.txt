/** 
 */
@Category({FilterTests.class,MediumTests.class}) public class TestFuzzyRowAndColumnRangeFilter {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestFuzzyRowAndColumnRangeFilter.class);
  private final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final Logger LOG=LoggerFactory.getLogger(TestFuzzyRowAndColumnRangeFilter.class);
  @Rule public TestName name=new TestName();
  /** 
 * @throws java.lang.Exception
 */
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.startMiniCluster();
  }
  /** 
 * @throws java.lang.Exception
 */
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  /** 
 * @throws java.lang.Exception
 */
  @Before public void setUp() throws Exception {
  }
  /** 
 * @throws java.lang.Exception
 */
  @After public void tearDown() throws Exception {
  }
  @Test public void Test() throws Exception {
    String cf="f";
    Table ht=TEST_UTIL.createTable(TableName.valueOf(name.getMethodName()),Bytes.toBytes(cf),Integer.MAX_VALUE);
    for (int i1=0; i1 < 2; i1++) {
      for (int i2=0; i2 < 5; i2++) {
        byte[] rk=new byte[10];
        ByteBuffer buf=ByteBuffer.wrap(rk);
        buf.clear();
        buf.putShort((short)2);
        buf.putInt(i1);
        buf.putInt(i2);
        for (int c=0; c < 5; c++) {
          byte[] cq=new byte[4];
          Bytes.putBytes(cq,0,Bytes.toBytes(c),0,4);
          Put p=new Put(rk);
          p.setDurability(Durability.SKIP_WAL);
          p.addColumn(cf.getBytes(),cq,Bytes.toBytes(c));
          ht.put(p);
          LOG.info("Inserting: rk: " + Bytes.toStringBinary(rk) + " cq: "+ Bytes.toStringBinary(cq));
        }
      }
    }
    TEST_UTIL.flush();
    runTest(ht,0,10);
    runTest(ht,1,8);
  }
  private void runTest(  Table hTable,  int cqStart,  int expectedSize) throws IOException {
    byte[] fuzzyKey=new byte[10];
    ByteBuffer buf=ByteBuffer.wrap(fuzzyKey);
    buf.clear();
    buf.putShort((short)2);
    for (int i=0; i < 4; i++)     buf.put((byte)63);
    buf.putInt((short)1);
    byte[] mask=new byte[]{0,0,1,1,1,1,0,0,0,0};
    Pair<byte[],byte[]> pair=new Pair<>(fuzzyKey,mask);
    FuzzyRowFilter fuzzyRowFilter=new FuzzyRowFilter(Lists.newArrayList(pair));
    ColumnRangeFilter columnRangeFilter=new ColumnRangeFilter(Bytes.toBytes(cqStart),true,Bytes.toBytes(4),true);
    runScanner(hTable,expectedSize,fuzzyRowFilter,columnRangeFilter);
    runScanner(hTable,expectedSize,columnRangeFilter,fuzzyRowFilter);
  }
  private void runScanner(  Table hTable,  int expectedSize,  Filter... filters) throws IOException {
    String cf="f";
    Scan scan=new Scan();
    scan.addFamily(cf.getBytes());
    FilterList filterList=new FilterList(filters);
    scan.setFilter(filterList);
    ResultScanner scanner=hTable.getScanner(scan);
    List<Cell> results=new ArrayList<>();
    Result result;
    long timeBeforeScan=System.currentTimeMillis();
    while ((result=scanner.next()) != null) {
      for (      Cell kv : result.listCells()) {
        LOG.info("Got rk: " + Bytes.toStringBinary(CellUtil.cloneRow(kv)) + " cq: "+ Bytes.toStringBinary(CellUtil.cloneQualifier(kv)));
        results.add(kv);
      }
    }
    long scanTime=System.currentTimeMillis() - timeBeforeScan;
    scanner.close();
    LOG.info("scan time = " + scanTime + "ms");
    LOG.info("found " + results.size() + " results");
    assertEquals(expectedSize,results.size());
  }
}
