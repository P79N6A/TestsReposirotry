@Category({RegionServerTests.class,SmallTests.class}) public class TestRegionInfoBuilder {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRegionInfoBuilder.class);
  @Rule public TestName name=new TestName();
  @Test public void testBuilder(){
    TableName tn=TableName.valueOf("test");
    RegionInfoBuilder builder=RegionInfoBuilder.newBuilder(tn);
    byte[] startKey=Bytes.toBytes("a");
    builder.setStartKey(startKey);
    byte[] endKey=Bytes.toBytes("z");
    builder.setEndKey(endKey);
    int regionId=1;
    builder.setRegionId(1);
    int replicaId=2;
    builder.setReplicaId(replicaId);
    boolean offline=true;
    builder.setOffline(offline);
    boolean isSplit=true;
    builder.setSplit(isSplit);
    RegionInfo ri=builder.build();
    assertEquals(tn,ri.getTable());
    assertArrayEquals(startKey,ri.getStartKey());
    assertArrayEquals(endKey,ri.getEndKey());
    assertEquals(regionId,ri.getRegionId());
    assertEquals(replicaId,ri.getReplicaId());
    assertEquals(offline,ri.isOffline());
    assertEquals(isSplit,ri.isSplit());
  }
  @Test public void testPb() throws DeserializationException {
    RegionInfo ri=RegionInfoBuilder.FIRST_META_REGIONINFO;
    byte[] bytes=RegionInfo.toByteArray(ri);
    RegionInfo pbri=RegionInfo.parseFrom(bytes);
    assertTrue(RegionInfo.COMPARATOR.compare(ri,pbri) == 0);
  }
  @Test public void testReadAndWriteRegionInfoFile() throws IOException, InterruptedException {
    HBaseTestingUtility htu=new HBaseTestingUtility();
    RegionInfo ri=RegionInfoBuilder.FIRST_META_REGIONINFO;
    Path basedir=htu.getDataTestDir();
    FSTableDescriptors fsTableDescriptors=new FSTableDescriptors(htu.getConfiguration());
    HRegion r=HBaseTestingUtility.createRegionAndWAL(convert(ri),basedir,htu.getConfiguration(),fsTableDescriptors.get(TableName.META_TABLE_NAME));
    long modtime=getModTime(r);
    HBaseTestingUtility.closeRegionAndWAL(r);
    Thread.sleep(1001);
    r=HRegion.openHRegion(basedir,convert(ri),fsTableDescriptors.get(TableName.META_TABLE_NAME),null,htu.getConfiguration());
    long modtime2=getModTime(r);
    assertEquals(modtime,modtime2);
    RegionInfo deserializedRi=HRegionFileSystem.loadRegionInfoFileContent(r.getRegionFileSystem().getFileSystem(),r.getRegionFileSystem().getRegionDir());
    HBaseTestingUtility.closeRegionAndWAL(r);
  }
  long getModTime(  final HRegion r) throws IOException {
    FileStatus[] statuses=r.getRegionFileSystem().getFileSystem().listStatus(new Path(r.getRegionFileSystem().getRegionDir(),HRegionFileSystem.REGION_INFO_FILE));
    assertTrue(statuses != null && statuses.length == 1);
    return statuses[0].getModificationTime();
  }
  @Test public void testCreateRegionInfoName() throws Exception {
    final String tableName=name.getMethodName();
    final TableName tn=TableName.valueOf(tableName);
    String startKey="startkey";
    final byte[] sk=Bytes.toBytes(startKey);
    String id="id";
    byte[] name=RegionInfo.createRegionName(tn,sk,id,false);
    String nameStr=Bytes.toString(name);
    assertEquals(tableName + "," + startKey+ ","+ id,nameStr);
    String md5HashInHex=MD5Hash.getMD5AsHex(name);
    assertEquals(RegionInfo.MD5_HEX_LENGTH,md5HashInHex.length());
    name=RegionInfo.createRegionName(tn,sk,id,true);
    nameStr=Bytes.toString(name);
    assertEquals(tableName + "," + startKey+ ","+ id+ "."+ md5HashInHex+ ".",nameStr);
  }
  @Test public void testContainsRange(){
    TableDescriptor tableDesc=TableDescriptorBuilder.newBuilder(TableName.valueOf(name.getMethodName())).build();
    RegionInfo ri=RegionInfoBuilder.newBuilder(tableDesc.getTableName()).setStartKey(Bytes.toBytes("a")).setEndKey(Bytes.toBytes("g")).build();
    assertTrue(ri.containsRange(Bytes.toBytes("a"),Bytes.toBytes("a")));
    assertTrue(ri.containsRange(Bytes.toBytes("b"),Bytes.toBytes("c")));
    assertTrue(ri.containsRange(Bytes.toBytes("a"),Bytes.toBytes("c")));
    assertTrue(ri.containsRange(Bytes.toBytes("c"),Bytes.toBytes("c")));
    assertFalse(ri.containsRange(Bytes.toBytes("a"),Bytes.toBytes("g")));
    assertFalse(ri.containsRange(Bytes.toBytes("g"),Bytes.toBytes("g")));
    assertFalse(ri.containsRange(Bytes.toBytes("z"),Bytes.toBytes("z")));
    try {
      ri.containsRange(Bytes.toBytes("z"),Bytes.toBytes("a"));
      fail("Invalid range did not throw IAE");
    }
 catch (    IllegalArgumentException iae) {
    }
  }
  @Test public void testLastRegionCompare(){
    TableDescriptor tableDesc=TableDescriptorBuilder.newBuilder(TableName.valueOf(name.getMethodName())).build();
    RegionInfo rip=RegionInfoBuilder.newBuilder(tableDesc.getTableName()).setStartKey(Bytes.toBytes("a")).setEndKey(new byte[0]).build();
    RegionInfo ric=RegionInfoBuilder.newBuilder(tableDesc.getTableName()).setStartKey(Bytes.toBytes("a")).setEndKey(Bytes.toBytes("b")).build();
    assertTrue(RegionInfo.COMPARATOR.compare(rip,ric) > 0);
  }
  @Test public void testMetaTables(){
    assertTrue(RegionInfoBuilder.FIRST_META_REGIONINFO.isMetaRegion());
  }
  @Test public void testComparator(){
    final TableName tableName=TableName.valueOf(name.getMethodName());
    byte[] empty=new byte[0];
    RegionInfo older=RegionInfoBuilder.newBuilder(tableName).setStartKey(empty).setEndKey(empty).setSplit(false).setRegionId(0L).build();
    RegionInfo newer=RegionInfoBuilder.newBuilder(tableName).setStartKey(empty).setEndKey(empty).setSplit(false).setRegionId(1L).build();
    assertTrue(RegionInfo.COMPARATOR.compare(older,newer) < 0);
    assertTrue(RegionInfo.COMPARATOR.compare(newer,older) > 0);
    assertTrue(RegionInfo.COMPARATOR.compare(older,older) == 0);
    assertTrue(RegionInfo.COMPARATOR.compare(newer,newer) == 0);
  }
  @Test public void testRegionNameForRegionReplicas() throws Exception {
    String tableName=name.getMethodName();
    final TableName tn=TableName.valueOf(tableName);
    String startKey="startkey";
    final byte[] sk=Bytes.toBytes(startKey);
    String id="id";
    byte[] name=RegionInfo.createRegionName(tn,sk,Bytes.toBytes(id),0,false);
    String nameStr=Bytes.toString(name);
    assertEquals(tableName + "," + startKey+ ","+ id,nameStr);
    name=RegionInfo.createRegionName(tn,sk,Bytes.toBytes(id),1,false);
    nameStr=Bytes.toString(name);
    assertEquals(tableName + "," + startKey+ ","+ id+ "_"+ String.format(RegionInfo.REPLICA_ID_FORMAT,1),nameStr);
    name=RegionInfo.createRegionName(tn,sk,Bytes.toBytes(id),0xFFFF,false);
    nameStr=Bytes.toString(name);
    assertEquals(tableName + "," + startKey+ ","+ id+ "_"+ String.format(RegionInfo.REPLICA_ID_FORMAT,0xFFFF),nameStr);
  }
  @Test public void testParseName() throws IOException {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    byte[] startKey=Bytes.toBytes("startKey");
    long regionId=System.currentTimeMillis();
    int replicaId=42;
    byte[] regionName=RegionInfo.createRegionName(tableName,startKey,regionId,false);
    byte[][] fields=RegionInfo.parseRegionName(regionName);
    assertArrayEquals(Bytes.toString(fields[0]),tableName.getName(),fields[0]);
    assertArrayEquals(Bytes.toString(fields[1]),startKey,fields[1]);
    assertArrayEquals(Bytes.toString(fields[2]),Bytes.toBytes(Long.toString(regionId)),fields[2]);
    assertEquals(3,fields.length);
    regionName=RegionInfo.createRegionName(tableName,startKey,regionId,replicaId,false);
    fields=RegionInfo.parseRegionName(regionName);
    assertArrayEquals(Bytes.toString(fields[0]),tableName.getName(),fields[0]);
    assertArrayEquals(Bytes.toString(fields[1]),startKey,fields[1]);
    assertArrayEquals(Bytes.toString(fields[2]),Bytes.toBytes(Long.toString(regionId)),fields[2]);
    assertArrayEquals(Bytes.toString(fields[3]),Bytes.toBytes(String.format(RegionInfo.REPLICA_ID_FORMAT,replicaId)),fields[3]);
  }
  @Test public void testConvert(){
    final TableName tableName=TableName.valueOf("ns1:" + name.getMethodName());
    byte[] startKey=Bytes.toBytes("startKey");
    byte[] endKey=Bytes.toBytes("endKey");
    boolean split=false;
    long regionId=System.currentTimeMillis();
    int replicaId=42;
    RegionInfo ri=RegionInfoBuilder.newBuilder(tableName).setStartKey(startKey).setEndKey(endKey).setSplit(split).setRegionId(regionId).setReplicaId(replicaId).build();
    RegionInfo convertedRi=ProtobufUtil.toRegionInfo(ProtobufUtil.toRegionInfo(ri));
    assertEquals(ri,convertedRi);
    HBaseProtos.RegionInfo info=HBaseProtos.RegionInfo.newBuilder().setTableName(HBaseProtos.TableName.newBuilder().setQualifier(UnsafeByteOperations.unsafeWrap(tableName.getQualifier())).setNamespace(UnsafeByteOperations.unsafeWrap(tableName.getNamespace())).build()).setStartKey(UnsafeByteOperations.unsafeWrap(startKey)).setEndKey(UnsafeByteOperations.unsafeWrap(endKey)).setSplit(split).setRegionId(regionId).build();
    convertedRi=ProtobufUtil.toRegionInfo(info);
    RegionInfo expectedRi=RegionInfoBuilder.newBuilder(tableName).setStartKey(startKey).setEndKey(endKey).setSplit(split).setRegionId(regionId).setReplicaId(0).build();
    assertEquals(expectedRi,convertedRi);
  }
  private HRegionInfo convert(  RegionInfo ri){
    HRegionInfo hri=new HRegionInfo(ri.getTable(),ri.getStartKey(),ri.getEndKey(),ri.isSplit(),ri.getRegionId());
    hri.setOffline(ri.isOffline());
    return hri;
  }
}
