@Category({RestTests.class,MediumTests.class}) public class TestStatusResource {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestStatusResource.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestStatusResource.class);
  private static final byte[] META_REGION_NAME=Bytes.toBytes(TableName.META_TABLE_NAME + ",,1");
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final HBaseRESTTestingUtility REST_TEST_UTIL=new HBaseRESTTestingUtility();
  private static Client client;
  private static JAXBContext context;
  private static Configuration conf;
  private static void validate(  StorageClusterStatusModel model){
    assertNotNull(model);
    assertTrue(model.getRegions() + ">= 1",model.getRegions() >= 1);
    assertTrue(model.getRequests() >= 0);
    assertTrue(model.getAverageLoad() >= 0.0);
    assertNotNull(model.getLiveNodes());
    assertNotNull(model.getDeadNodes());
    assertFalse(model.getLiveNodes().isEmpty());
    boolean foundMeta=false;
    for (    StorageClusterStatusModel.Node node : model.getLiveNodes()) {
      assertNotNull(node.getName());
      assertTrue(node.getStartCode() > 0L);
      assertTrue(node.getRequests() >= 0);
      for (      StorageClusterStatusModel.Node.Region region : node.getRegions()) {
        if (Bytes.equals(region.getName(),META_REGION_NAME)) {
          foundMeta=true;
        }
      }
    }
    assertTrue(foundMeta);
  }
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    conf=TEST_UTIL.getConfiguration();
    TEST_UTIL.startMiniCluster(1,1);
    TEST_UTIL.createTable(TableName.valueOf("TestStatusResource"),Bytes.toBytes("D"));
    TEST_UTIL.createTable(TableName.valueOf("TestStatusResource2"),Bytes.toBytes("D"));
    REST_TEST_UTIL.startServletContainer(conf);
    Cluster cluster=new Cluster();
    cluster.add("localhost",REST_TEST_UTIL.getServletPort());
    client=new Client(cluster);
    context=JAXBContext.newInstance(StorageClusterStatusModel.class);
    TEST_UTIL.waitFor(6000,new Waiter.Predicate<IOException>(){
      @Override public boolean evaluate() throws IOException {
        return TEST_UTIL.getMiniHBaseCluster().getClusterStatus().getAverageLoad() > 0;
      }
    }
);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    REST_TEST_UTIL.shutdownServletContainer();
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testGetClusterStatusXML() throws IOException, JAXBException {
    Response response=client.get("/status/cluster",Constants.MIMETYPE_XML);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_XML,response.getHeader("content-type"));
    StorageClusterStatusModel model=(StorageClusterStatusModel)context.createUnmarshaller().unmarshal(new ByteArrayInputStream(response.getBody()));
    validate(model);
  }
  @Test public void testGetClusterStatusPB() throws IOException {
    Response response=client.get("/status/cluster",Constants.MIMETYPE_PROTOBUF);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_PROTOBUF,response.getHeader("content-type"));
    StorageClusterStatusModel model=new StorageClusterStatusModel();
    model.getObjectFromMessage(response.getBody());
    validate(model);
    response=client.get("/status/cluster",Constants.MIMETYPE_PROTOBUF_IETF);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_PROTOBUF_IETF,response.getHeader("content-type"));
    model=new StorageClusterStatusModel();
    model.getObjectFromMessage(response.getBody());
    validate(model);
  }
}
