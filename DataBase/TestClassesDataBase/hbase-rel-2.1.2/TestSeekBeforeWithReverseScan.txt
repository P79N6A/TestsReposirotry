@Category({IOTests.class,SmallTests.class}) public class TestSeekBeforeWithReverseScan {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSeekBeforeWithReverseScan.class);
  private final HBaseTestingUtility testUtil=new HBaseTestingUtility();
  private HRegion region;
  private byte[] cfName=Bytes.toBytes("a");
  private byte[] cqName=Bytes.toBytes("b");
  @Before public void setUp() throws Exception {
    TableName tableName=TableName.valueOf(getClass().getSimpleName());
    HTableDescriptor htd=new HTableDescriptor(tableName);
    htd.addFamily(new HColumnDescriptor(cfName).setDataBlockEncoding(DataBlockEncoding.FAST_DIFF));
    HRegionInfo info=new HRegionInfo(tableName,null,null,false);
    Path path=testUtil.getDataTestDir(getClass().getSimpleName());
    region=HBaseTestingUtility.createRegionAndWAL(info,path,testUtil.getConfiguration(),htd);
  }
  @After public void tearDown() throws Exception {
    HBaseTestingUtility.closeRegionAndWAL(region);
    testUtil.cleanupTestDir();
  }
  @Test public void testReverseScanWithoutPadding() throws Exception {
    byte[] row1=Bytes.toBytes("a");
    byte[] row2=Bytes.toBytes("ab");
    byte[] row3=Bytes.toBytes("b");
    Put put1=new Put(row1);
    put1.addColumn(cfName,cqName,HConstants.EMPTY_BYTE_ARRAY);
    Put put2=new Put(row2);
    put2.addColumn(cfName,cqName,HConstants.EMPTY_BYTE_ARRAY);
    Put put3=new Put(row3);
    put3.addColumn(cfName,cqName,HConstants.EMPTY_BYTE_ARRAY);
    region.put(put1);
    region.put(put2);
    region.put(put3);
    region.flush(true);
    Scan scan=new Scan();
    scan.setCacheBlocks(false);
    scan.setReversed(true);
    scan.setFilter(new FirstKeyOnlyFilter());
    scan.addFamily(cfName);
    RegionScanner scanner=region.getScanner(scan);
    List<Cell> res=new ArrayList<>();
    int count=1;
    while (scanner.next(res)) {
      count++;
    }
    assertEquals("b",Bytes.toString(res.get(0).getRowArray(),res.get(0).getRowOffset(),res.get(0).getRowLength()));
    assertEquals("ab",Bytes.toString(res.get(1).getRowArray(),res.get(1).getRowOffset(),res.get(1).getRowLength()));
    assertEquals("a",Bytes.toString(res.get(2).getRowArray(),res.get(2).getRowOffset(),res.get(2).getRowLength()));
    assertEquals(3,count);
  }
  @Test public void testReverseScanWithPadding() throws Exception {
    byte[] terminator=new byte[]{-1};
    byte[] row1=Bytes.add(invert(Bytes.toBytes("a")),terminator);
    byte[] row2=Bytes.add(invert(Bytes.toBytes("ab")),terminator);
    byte[] row3=Bytes.add(invert(Bytes.toBytes("b")),terminator);
    Put put1=new Put(row1);
    put1.addColumn(cfName,cqName,HConstants.EMPTY_BYTE_ARRAY);
    Put put2=new Put(row2);
    put2.addColumn(cfName,cqName,HConstants.EMPTY_BYTE_ARRAY);
    Put put3=new Put(row3);
    put3.addColumn(cfName,cqName,HConstants.EMPTY_BYTE_ARRAY);
    region.put(put1);
    region.put(put2);
    region.put(put3);
    region.flush(true);
    Scan scan=new Scan();
    scan.setCacheBlocks(false);
    scan.setReversed(true);
    scan.setFilter(new FirstKeyOnlyFilter());
    scan.addFamily(cfName);
    RegionScanner scanner=region.getScanner(scan);
    List<Cell> res=new ArrayList<>();
    int count=1;
    while (scanner.next(res)) {
      count++;
    }
    assertEquals(3,count);
  }
  private byte[] invert(  byte[] bytes){
    byte[] newBytes=Arrays.copyOf(bytes,bytes.length);
    for (int i=0; i < newBytes.length; i++) {
      newBytes[i]=(byte)(newBytes[i] ^ 0xFF);
    }
    return newBytes;
  }
}
