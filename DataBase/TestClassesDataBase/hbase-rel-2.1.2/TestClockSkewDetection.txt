@Category({MasterTests.class,SmallTests.class}) public class TestClockSkewDetection {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestClockSkewDetection.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestClockSkewDetection.class);
  @Test public void testClockSkewDetection() throws Exception {
    final Configuration conf=HBaseConfiguration.create();
    ServerManager sm=new ServerManager(new MockNoopMasterServices(conf){
      @Override public ClusterConnection getClusterConnection(){
        ClusterConnection conn=mock(ClusterConnection.class);
        when(conn.getRpcControllerFactory()).thenReturn(mock(RpcControllerFactory.class));
        return conn;
      }
    }
);
    LOG.debug("regionServerStartup 1");
    InetAddress ia1=InetAddress.getLocalHost();
    RegionServerStartupRequest.Builder request=RegionServerStartupRequest.newBuilder();
    request.setPort(1234);
    request.setServerStartCode(-1);
    request.setServerCurrentTime(System.currentTimeMillis());
    sm.regionServerStartup(request.build(),0,"0.0.0",ia1);
    final Configuration c=HBaseConfiguration.create();
    long maxSkew=c.getLong("hbase.master.maxclockskew",30000);
    long warningSkew=c.getLong("hbase.master.warningclockskew",1000);
    try {
      LOG.debug("Test: Master Time > Region Server Time");
      LOG.debug("regionServerStartup 2");
      InetAddress ia2=InetAddress.getLocalHost();
      request=RegionServerStartupRequest.newBuilder();
      request.setPort(1235);
      request.setServerStartCode(-1);
      request.setServerCurrentTime(System.currentTimeMillis() - maxSkew * 2);
      sm.regionServerStartup(request.build(),0,"0.0.0",ia2);
      fail("HMaster should have thrown a ClockOutOfSyncException but didn't.");
    }
 catch (    ClockOutOfSyncException e) {
      LOG.info("Received expected exception: " + e);
    }
    try {
      LOG.debug("Test: Master Time < Region Server Time");
      LOG.debug("regionServerStartup 3");
      InetAddress ia3=InetAddress.getLocalHost();
      request=RegionServerStartupRequest.newBuilder();
      request.setPort(1236);
      request.setServerStartCode(-1);
      request.setServerCurrentTime(System.currentTimeMillis() + maxSkew * 2);
      sm.regionServerStartup(request.build(),0,"0.0.0",ia3);
      fail("HMaster should have thrown a ClockOutOfSyncException but didn't.");
    }
 catch (    ClockOutOfSyncException e) {
      LOG.info("Received expected exception: " + e);
    }
    LOG.debug("regionServerStartup 4");
    InetAddress ia4=InetAddress.getLocalHost();
    request=RegionServerStartupRequest.newBuilder();
    request.setPort(1237);
    request.setServerStartCode(-1);
    request.setServerCurrentTime(System.currentTimeMillis() - warningSkew * 2);
    sm.regionServerStartup(request.build(),0,"0.0.0",ia4);
    LOG.debug("regionServerStartup 5");
    InetAddress ia5=InetAddress.getLocalHost();
    request=RegionServerStartupRequest.newBuilder();
    request.setPort(1238);
    request.setServerStartCode(-1);
    request.setServerCurrentTime(System.currentTimeMillis() + warningSkew * 2);
    sm.regionServerStartup(request.build(),0,"0.0.0",ia5);
  }
}
