@Category({ClientTests.class,SmallTests.class}) public class TestRpcClientDeprecatedNameMapping {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRpcClientDeprecatedNameMapping.class);
  @Test public void test(){
    Configuration conf=HBaseConfiguration.create();
    conf.set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY,BlockingRpcClient.class.getName());
    try (RpcClient client=RpcClientFactory.createClient(conf,HConstants.CLUSTER_ID_DEFAULT)){
      assertThat(client,instanceOf(BlockingRpcClient.class));
    }
     conf.set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY,"org.apache.hadoop.hbase.ipc.RpcClientImpl");
    try (RpcClient client=RpcClientFactory.createClient(conf,HConstants.CLUSTER_ID_DEFAULT)){
      assertThat(client,instanceOf(BlockingRpcClient.class));
    }
     conf.set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY,NettyRpcClient.class.getName());
    try (RpcClient client=RpcClientFactory.createClient(conf,HConstants.CLUSTER_ID_DEFAULT)){
      assertThat(client,instanceOf(NettyRpcClient.class));
    }
     conf.set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY,"org.apache.hadoop.hbase.ipc.AsyncRpcClient");
    try (RpcClient client=RpcClientFactory.createClient(conf,HConstants.CLUSTER_ID_DEFAULT)){
      assertThat(client,instanceOf(NettyRpcClient.class));
    }
   }
}
