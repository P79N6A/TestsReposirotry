@Category({RPCTests.class,SmallTests.class}) public class TestBlockingIPC extends AbstractTestIPC {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestBlockingIPC.class);
  @Override protected RpcServer createRpcServer(  Server server,  String name,  List<RpcServer.BlockingServiceAndInterface> services,  InetSocketAddress bindAddress,  Configuration conf,  RpcScheduler scheduler) throws IOException {
    return RpcServerFactory.createRpcServer(server,name,services,bindAddress,conf,scheduler);
  }
  @Override protected BlockingRpcClient createRpcClientNoCodec(  Configuration conf){
    return new BlockingRpcClient(conf){
      @Override Codec getCodec(){
        return null;
      }
    }
;
  }
  @Override protected BlockingRpcClient createRpcClient(  Configuration conf){
    return new BlockingRpcClient(conf);
  }
  @Override protected BlockingRpcClient createRpcClientRTEDuringConnectionSetup(  Configuration conf) throws IOException {
    return new BlockingRpcClient(conf){
      @Override boolean isTcpNoDelay(){
        throw new RuntimeException("Injected fault");
      }
    }
;
  }
private static class TestFailingRpcServer extends SimpleRpcServer {
    TestFailingRpcServer(    Server server,    String name,    List<RpcServer.BlockingServiceAndInterface> services,    InetSocketAddress bindAddress,    Configuration conf,    RpcScheduler scheduler) throws IOException {
      super(server,name,services,bindAddress,conf,scheduler,true);
    }
final class FailingConnection extends SimpleServerRpcConnection {
      private FailingConnection(      TestFailingRpcServer rpcServer,      SocketChannel channel,      long lastContact){
        super(rpcServer,channel,lastContact);
      }
      @Override public void processRequest(      ByteBuff buf) throws IOException, InterruptedException {
        throw new DoNotRetryIOException("Failing for test");
      }
    }
    @Override protected SimpleServerRpcConnection getConnection(    SocketChannel channel,    long time){
      return new FailingConnection(this,channel,time);
    }
  }
  @Override protected RpcServer createTestFailingRpcServer(  Server server,  String name,  List<RpcServer.BlockingServiceAndInterface> services,  InetSocketAddress bindAddress,  Configuration conf,  RpcScheduler scheduler) throws IOException {
    return new TestFailingRpcServer(server,name,services,bindAddress,conf,scheduler);
  }
}
