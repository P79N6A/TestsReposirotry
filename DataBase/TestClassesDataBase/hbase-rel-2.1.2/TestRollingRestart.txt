/** 
 * Tests the restarting of everything as done during rolling restarts.
 */
@Category({MasterTests.class,LargeTests.class}) public class TestRollingRestart {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRollingRestart.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestRollingRestart.class);
  @Rule public TestName name=new TestName();
  @Test public void testBasicRollingRestart() throws Exception {
    final int NUM_MASTERS=2;
    final int NUM_RS=3;
    final int NUM_REGIONS_TO_CREATE=20;
    int expectedNumRS=3;
    log("Starting cluster");
    Configuration conf=HBaseConfiguration.create();
    HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility(conf);
    TEST_UTIL.startMiniCluster(NUM_MASTERS,NUM_RS);
    MiniHBaseCluster cluster=TEST_UTIL.getHBaseCluster();
    log("Waiting for active/ready master");
    cluster.waitForActiveAndReadyMaster();
    final TableName tableName=TableName.valueOf(name.getMethodName());
    byte[] family=Bytes.toBytes("family");
    log("Creating table with " + NUM_REGIONS_TO_CREATE + " regions");
    Table ht=TEST_UTIL.createMultiRegionTable(tableName,family,NUM_REGIONS_TO_CREATE);
    int numRegions=-1;
    try (RegionLocator r=TEST_UTIL.getConnection().getRegionLocator(tableName)){
      numRegions=r.getStartKeys().length;
    }
     numRegions+=1;
    log("Waiting for no more RIT\n");
    TEST_UTIL.waitUntilNoRegionsInTransition(60000);
    log("Disabling table\n");
    TEST_UTIL.getAdmin().disableTable(tableName);
    log("Waiting for no more RIT\n");
    TEST_UTIL.waitUntilNoRegionsInTransition(60000);
    NavigableSet<String> regions=HBaseTestingUtility.getAllOnlineRegions(cluster);
    log("Verifying only catalog and namespace regions are assigned\n");
    if (regions.size() != 2) {
      for (      String oregion : regions)       log("Region still online: " + oregion);
    }
    assertEquals(2,regions.size());
    log("Enabling table\n");
    TEST_UTIL.getAdmin().enableTable(tableName);
    log("Waiting for no more RIT\n");
    TEST_UTIL.waitUntilNoRegionsInTransition(60000);
    log("Verifying there are " + numRegions + " assigned on cluster\n");
    regions=HBaseTestingUtility.getAllOnlineRegions(cluster);
    assertRegionsAssigned(cluster,regions);
    assertEquals(expectedNumRS,cluster.getRegionServerThreads().size());
    log("Adding a fourth RS");
    RegionServerThread restarted=cluster.startRegionServer();
    expectedNumRS++;
    restarted.waitForServerOnline();
    log("Additional RS is online");
    log("Waiting for no more RIT");
    TEST_UTIL.waitUntilNoRegionsInTransition(60000);
    log("Verifying there are " + numRegions + " assigned on cluster");
    assertRegionsAssigned(cluster,regions);
    assertEquals(expectedNumRS,cluster.getRegionServerThreads().size());
    List<MasterThread> masterThreads=cluster.getMasterThreads();
    MasterThread activeMaster=null;
    MasterThread backupMaster=null;
    assertEquals(2,masterThreads.size());
    if (masterThreads.get(0).getMaster().isActiveMaster()) {
      activeMaster=masterThreads.get(0);
      backupMaster=masterThreads.get(1);
    }
 else {
      activeMaster=masterThreads.get(1);
      backupMaster=masterThreads.get(0);
    }
    log("Stopping backup master\n\n");
    backupMaster.getMaster().stop("Stop of backup during rolling restart");
    cluster.hbaseCluster.waitOnMaster(backupMaster);
    log("Stopping primary master\n\n");
    activeMaster.getMaster().stop("Stop of active during rolling restart");
    cluster.hbaseCluster.waitOnMaster(activeMaster);
    log("Restarting primary master\n\n");
    activeMaster=cluster.startMaster();
    cluster.waitForActiveAndReadyMaster();
    log("Restarting backup master\n\n");
    backupMaster=cluster.startMaster();
    assertEquals(expectedNumRS,cluster.getRegionServerThreads().size());
    List<RegionServerThread> regionServers=cluster.getLiveRegionServerThreads();
    int num=1;
    int total=regionServers.size();
    for (    RegionServerThread rst : regionServers) {
      ServerName serverName=rst.getRegionServer().getServerName();
      log("Stopping region server " + num + " of "+ total+ " [ "+ serverName+ "]");
      rst.getRegionServer().stop("Stopping RS during rolling restart");
      cluster.hbaseCluster.waitOnRegionServer(rst);
      log("Waiting for RS shutdown to be handled by master");
      waitForRSShutdownToStartAndFinish(activeMaster,serverName);
      log("RS shutdown done, waiting for no more RIT");
      TEST_UTIL.waitUntilNoRegionsInTransition(60000);
      log("Verifying there are " + numRegions + " assigned on cluster");
      assertRegionsAssigned(cluster,regions);
      expectedNumRS--;
      assertEquals(expectedNumRS,cluster.getRegionServerThreads().size());
      log("Restarting region server " + num + " of "+ total);
      restarted=cluster.startRegionServer();
      restarted.waitForServerOnline();
      expectedNumRS++;
      log("Region server " + num + " is back online");
      log("Waiting for no more RIT");
      TEST_UTIL.waitUntilNoRegionsInTransition(60000);
      log("Verifying there are " + numRegions + " assigned on cluster");
      assertRegionsAssigned(cluster,regions);
      assertEquals(expectedNumRS,cluster.getRegionServerThreads().size());
      num++;
    }
    Thread.sleep(1000);
    assertRegionsAssigned(cluster,regions);
    ht.close();
    TEST_UTIL.shutdownMiniCluster();
  }
  private void waitForRSShutdownToStartAndFinish(  MasterThread activeMaster,  ServerName serverName) throws InterruptedException {
    ServerManager sm=activeMaster.getMaster().getServerManager();
    while (!sm.getDeadServers().isDeadServer(serverName)) {
      log("Waiting for [" + serverName + "] to be listed as dead in master");
      Thread.sleep(1);
    }
    log("Server [" + serverName + "] marked as dead, waiting for it to "+ "finish dead processing");
    while (sm.areDeadServersInProgress()) {
      log("Server [" + serverName + "] still being processed, waiting");
      Thread.sleep(100);
    }
    log("Server [" + serverName + "] done with server shutdown processing");
  }
  private void log(  String msg){
    LOG.debug("\n\nTRR: " + msg + "\n");
  }
  private int getNumberOfOnlineRegions(  MiniHBaseCluster cluster){
    int numFound=0;
    for (    RegionServerThread rst : cluster.getLiveRegionServerThreads()) {
      numFound+=rst.getRegionServer().getNumberOfOnlineRegions();
    }
    for (    MasterThread mt : cluster.getMasterThreads()) {
      numFound+=mt.getMaster().getNumberOfOnlineRegions();
    }
    return numFound;
  }
  private void assertRegionsAssigned(  MiniHBaseCluster cluster,  Set<String> expectedRegions) throws IOException {
    int numFound=getNumberOfOnlineRegions(cluster);
    if (expectedRegions.size() > numFound) {
      log("Expected to find " + expectedRegions.size() + " but only found"+ " "+ numFound);
      NavigableSet<String> foundRegions=HBaseTestingUtility.getAllOnlineRegions(cluster);
      for (      String region : expectedRegions) {
        if (!foundRegions.contains(region)) {
          log("Missing region: " + region);
        }
      }
      assertEquals(expectedRegions.size(),numFound);
    }
 else     if (expectedRegions.size() < numFound) {
      int doubled=numFound - expectedRegions.size();
      log("Expected to find " + expectedRegions.size() + " but found"+ " "+ numFound+ " ("+ doubled+ " double assignments?)");
      NavigableSet<String> doubleRegions=getDoubleAssignedRegions(cluster);
      for (      String region : doubleRegions) {
        log("Region is double assigned: " + region);
      }
      assertEquals(expectedRegions.size(),numFound);
    }
 else {
      log("Success!  Found expected number of " + numFound + " regions");
    }
  }
  private NavigableSet<String> getDoubleAssignedRegions(  MiniHBaseCluster cluster) throws IOException {
    NavigableSet<String> online=new TreeSet<>();
    NavigableSet<String> doubled=new TreeSet<>();
    for (    RegionServerThread rst : cluster.getLiveRegionServerThreads()) {
      for (      RegionInfo region : ProtobufUtil.getOnlineRegions(rst.getRegionServer().getRSRpcServices())) {
        if (!online.add(region.getRegionNameAsString())) {
          doubled.add(region.getRegionNameAsString());
        }
      }
    }
    return doubled;
  }
}
