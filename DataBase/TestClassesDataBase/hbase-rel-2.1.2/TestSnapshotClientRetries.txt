@Category({MediumTests.class}) public class TestSnapshotClientRetries {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestSnapshotClientRetries.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final Logger LOG=LoggerFactory.getLogger(TestSnapshotClientRetries.class);
  @Rule public TestTableName TEST_TABLE=new TestTableName();
  @Before public void setUp() throws Exception {
    TEST_UTIL.getConfiguration().set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,MasterSyncObserver.class.getName());
    TEST_UTIL.startMiniCluster(1);
  }
  @After public void tearDown() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test(expected=SnapshotExistsException.class) public void testSnapshotAlreadyExist() throws Exception {
    final String snapshotName="testSnapshotAlreadyExist";
    TEST_UTIL.createTable(TEST_TABLE.getTableName(),"f");
    TEST_UTIL.getAdmin().snapshot(snapshotName,TEST_TABLE.getTableName());
    snapshotAndAssertOneRetry(snapshotName,TEST_TABLE.getTableName());
  }
  @Test(expected=SnapshotDoesNotExistException.class) public void testCloneNonExistentSnapshot() throws Exception {
    final String snapshotName="testCloneNonExistentSnapshot";
    cloneAndAssertOneRetry(snapshotName,TEST_TABLE.getTableName());
  }
public static class MasterSyncObserver implements MasterCoprocessor, MasterObserver {
    volatile AtomicInteger snapshotCount=null;
    volatile AtomicInteger cloneCount=null;
    @Override public Optional<MasterObserver> getMasterObserver(){
      return Optional.of(this);
    }
    @Override public void preSnapshot(    final ObserverContext<MasterCoprocessorEnvironment> ctx,    final SnapshotDescription snapshot,    final TableDescriptor hTableDescriptor) throws IOException {
      if (snapshotCount != null) {
        snapshotCount.incrementAndGet();
      }
    }
    @Override public void preCloneSnapshot(    final ObserverContext<MasterCoprocessorEnvironment> ctx,    final SnapshotDescription snapshot,    final TableDescriptor hTableDescriptor) throws IOException {
      if (cloneCount != null) {
        cloneCount.incrementAndGet();
      }
    }
  }
  public void snapshotAndAssertOneRetry(  final String snapshotName,  final TableName tableName) throws Exception {
    MasterSyncObserver observer=getMasterSyncObserver();
    observer.snapshotCount=new AtomicInteger(0);
    TEST_UTIL.getAdmin().snapshot(snapshotName,tableName);
    assertEquals(1,observer.snapshotCount.get());
  }
  public void cloneAndAssertOneRetry(  final String snapshotName,  final TableName tableName) throws Exception {
    MasterSyncObserver observer=getMasterSyncObserver();
    observer.cloneCount=new AtomicInteger(0);
    TEST_UTIL.getAdmin().cloneSnapshot(snapshotName,tableName);
    assertEquals(1,observer.cloneCount.get());
  }
  private MasterSyncObserver getMasterSyncObserver(){
    return (MasterSyncObserver)TEST_UTIL.getHBaseCluster().getMaster().getMasterCoprocessorHost().findCoprocessor(MasterSyncObserver.class.getName());
  }
}
