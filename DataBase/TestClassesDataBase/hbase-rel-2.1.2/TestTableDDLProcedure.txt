public static class TestTableDDLProcedure extends Procedure<MasterProcedureEnv> implements TableProcedureInterface {
  private TableName tableName;
  public TestTableDDLProcedure(){
  }
  public TestTableDDLProcedure(  final MasterProcedureEnv env,  final TableName tableName) throws IOException {
    this.tableName=tableName;
    this.setTimeout(180000);
    this.setOwner(env.getRequestUser());
  }
  @Override public TableName getTableName(){
    return tableName;
  }
  @Override public TableOperationType getTableOperationType(){
    return TableOperationType.EDIT;
  }
  @Override protected boolean abort(  MasterProcedureEnv env){
    return true;
  }
  @Override protected void serializeStateData(  ProcedureStateSerializer serializer) throws IOException {
    TestProcedureProtos.TestTableDDLStateData.Builder testTableDDLMsg=TestProcedureProtos.TestTableDDLStateData.newBuilder().setTableName(tableName.getNameAsString());
    serializer.serialize(testTableDDLMsg.build());
  }
  @Override protected void deserializeStateData(  ProcedureStateSerializer serializer) throws IOException {
    TestProcedureProtos.TestTableDDLStateData testTableDDLMsg=serializer.deserialize(TestProcedureProtos.TestTableDDLStateData.class);
    tableName=TableName.valueOf(testTableDDLMsg.getTableName());
  }
  @Override protected Procedure[] execute(  MasterProcedureEnv env) throws ProcedureYieldException, InterruptedException {
    setState(ProcedureState.WAITING_TIMEOUT);
    return null;
  }
  @Override protected void rollback(  MasterProcedureEnv env) throws IOException, InterruptedException {
  }
}
