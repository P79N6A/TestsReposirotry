@Category({MasterTests.class,MediumTests.class}) public class TestDeadServer {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestDeadServer.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  final ServerName hostname123=ServerName.valueOf("127.0.0.1",123,3L);
  final ServerName hostname123_2=ServerName.valueOf("127.0.0.1",123,4L);
  final ServerName hostname1234=ServerName.valueOf("127.0.0.2",1234,4L);
  final ServerName hostname12345=ServerName.valueOf("127.0.0.2",12345,4L);
  @BeforeClass public static void setupBeforeClass() throws Exception {
    TEST_UTIL.startMiniCluster();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testIsDead(){
    DeadServer ds=new DeadServer();
    ds.add(hostname123);
    ds.notifyServer(hostname123);
    assertTrue(ds.areDeadServersInProgress());
    ds.finish(hostname123);
    assertFalse(ds.areDeadServersInProgress());
    ds.add(hostname1234);
    ds.notifyServer(hostname1234);
    assertTrue(ds.areDeadServersInProgress());
    ds.finish(hostname1234);
    assertFalse(ds.areDeadServersInProgress());
    ds.add(hostname12345);
    ds.notifyServer(hostname12345);
    assertTrue(ds.areDeadServersInProgress());
    ds.finish(hostname12345);
    assertFalse(ds.areDeadServersInProgress());
    final ServerName deadServer=ServerName.valueOf("127.0.0.1",9090,112321L);
    assertFalse(ds.cleanPreviousInstance(deadServer));
    ds.add(deadServer);
    assertTrue(ds.isDeadServer(deadServer));
    Set<ServerName> deadServerNames=ds.copyServerNames();
    for (    ServerName eachDeadServer : deadServerNames) {
      Assert.assertNotNull(ds.getTimeOfDeath(eachDeadServer));
    }
    final ServerName deadServerHostComingAlive=ServerName.valueOf("127.0.0.1",9090,223341L);
    assertTrue(ds.cleanPreviousInstance(deadServerHostComingAlive));
    assertFalse(ds.isDeadServer(deadServer));
    assertFalse(ds.cleanPreviousInstance(deadServerHostComingAlive));
  }
  @Test public void testCrashProcedureReplay(){
    HMaster master=TEST_UTIL.getHBaseCluster().getMaster();
    final ProcedureExecutor<MasterProcedureEnv> pExecutor=master.getMasterProcedureExecutor();
    ServerCrashProcedure proc=new ServerCrashProcedure(pExecutor.getEnvironment(),hostname123,false,false);
    ProcedureTestingUtility.submitAndWait(pExecutor,proc);
    assertFalse(master.getServerManager().getDeadServers().areDeadServersInProgress());
  }
  @Test public void testSortExtract(){
    ManualEnvironmentEdge mee=new ManualEnvironmentEdge();
    EnvironmentEdgeManager.injectEdge(mee);
    mee.setValue(1);
    DeadServer d=new DeadServer();
    d.add(hostname123);
    mee.incValue(1);
    d.add(hostname1234);
    mee.incValue(1);
    d.add(hostname12345);
    List<Pair<ServerName,Long>> copy=d.copyDeadServersSince(2L);
    Assert.assertEquals(2,copy.size());
    Assert.assertEquals(hostname1234,copy.get(0).getFirst());
    Assert.assertEquals(new Long(2L),copy.get(0).getSecond());
    Assert.assertEquals(hostname12345,copy.get(1).getFirst());
    Assert.assertEquals(new Long(3L),copy.get(1).getSecond());
    EnvironmentEdgeManager.reset();
  }
  @Test public void testClean(){
    DeadServer d=new DeadServer();
    d.add(hostname123);
    d.cleanPreviousInstance(hostname12345);
    Assert.assertFalse(d.isEmpty());
    d.cleanPreviousInstance(hostname1234);
    Assert.assertFalse(d.isEmpty());
    d.cleanPreviousInstance(hostname123_2);
    Assert.assertTrue(d.isEmpty());
  }
  @Test public void testClearDeadServer(){
    DeadServer d=new DeadServer();
    d.add(hostname123);
    d.add(hostname1234);
    Assert.assertEquals(2,d.size());
    d.finish(hostname123);
    d.removeDeadServer(hostname123);
    Assert.assertEquals(1,d.size());
    d.finish(hostname1234);
    d.removeDeadServer(hostname1234);
    Assert.assertTrue(d.isEmpty());
    d.add(hostname1234);
    Assert.assertFalse(d.removeDeadServer(hostname123_2));
    Assert.assertEquals(1,d.size());
    d.finish(hostname1234);
    Assert.assertTrue(d.removeDeadServer(hostname1234));
    Assert.assertTrue(d.isEmpty());
  }
}
