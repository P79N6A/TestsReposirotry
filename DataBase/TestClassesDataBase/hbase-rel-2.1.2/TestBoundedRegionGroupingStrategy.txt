@RunWith(Parameterized.class) @Category({RegionServerTests.class,LargeTests.class}) public class TestBoundedRegionGroupingStrategy {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestBoundedRegionGroupingStrategy.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestBoundedRegionGroupingStrategy.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static Configuration CONF;
  private static DistributedFileSystem FS;
  @Parameter public String walProvider;
  @Parameters(name="{index}: delegate-provider={0}") public static Iterable<Object[]> data(){
    return Arrays.asList(new Object[]{"defaultProvider"},new Object[]{"asyncfs"});
  }
  @Before public void setUp() throws Exception {
    CONF.set(DELEGATE_PROVIDER,walProvider);
  }
  @After public void tearDown() throws Exception {
    FileStatus[] entries=FS.listStatus(new Path("/"));
    for (    FileStatus dir : entries) {
      FS.delete(dir.getPath(),true);
    }
  }
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    CONF=TEST_UTIL.getConfiguration();
    CONF.setInt("dfs.blocksize",1024 * 1024);
    CONF.setInt("dfs.namenode.heartbeat.recheck-interval",5000);
    CONF.setInt("dfs.heartbeat.interval",1);
    CONF.setInt("dfs.client.socket-timeout",5000);
    CONF.setInt("hbase.ipc.client.connect.max.retries",1);
    CONF.setInt("dfs.client.block.recovery.retries",1);
    CONF.setInt("hbase.ipc.client.connection.maxidletime",500);
    CONF.setClass(WAL_PROVIDER,RegionGroupingProvider.class,WALProvider.class);
    CONF.set(REGION_GROUPING_STRATEGY,RegionGroupingProvider.Strategies.bounded.name());
    TEST_UTIL.startMiniDFSCluster(3);
    FS=TEST_UTIL.getDFSCluster().getFileSystem();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  /** 
 * Write to a log file with three concurrent threads and verifying all data is written.
 */
  @Test public void testConcurrentWrites() throws Exception {
    int errCode=WALPerformanceEvaluation.innerMain(new Configuration(CONF),new String[]{"-threads","3","-verify","-noclosefs","-iterations","3000"});
    assertEquals(0,errCode);
  }
  /** 
 * Make sure we can successfully run with more regions then our bound.
 */
  @Test public void testMoreRegionsThanBound() throws Exception {
    final String parallelism=Integer.toString(DEFAULT_NUM_REGION_GROUPS * 2);
    int errCode=WALPerformanceEvaluation.innerMain(new Configuration(CONF),new String[]{"-threads",parallelism,"-verify","-noclosefs","-iterations","3000","-regions",parallelism});
    assertEquals(0,errCode);
  }
  @Test public void testBoundsGreaterThanDefault() throws Exception {
    final int temp=CONF.getInt(NUM_REGION_GROUPS,DEFAULT_NUM_REGION_GROUPS);
    try {
      CONF.setInt(NUM_REGION_GROUPS,temp * 4);
      final String parallelism=Integer.toString(temp * 4);
      int errCode=WALPerformanceEvaluation.innerMain(new Configuration(CONF),new String[]{"-threads",parallelism,"-verify","-noclosefs","-iterations","3000","-regions",parallelism});
      assertEquals(0,errCode);
    }
  finally {
      CONF.setInt(NUM_REGION_GROUPS,temp);
    }
  }
  @Test public void testMoreRegionsThanBoundWithBoundsGreaterThanDefault() throws Exception {
    final int temp=CONF.getInt(NUM_REGION_GROUPS,DEFAULT_NUM_REGION_GROUPS);
    try {
      CONF.setInt(NUM_REGION_GROUPS,temp * 4);
      final String parallelism=Integer.toString(temp * 4 * 2);
      int errCode=WALPerformanceEvaluation.innerMain(new Configuration(CONF),new String[]{"-threads",parallelism,"-verify","-noclosefs","-iterations","3000","-regions",parallelism});
      assertEquals(0,errCode);
    }
  finally {
      CONF.setInt(NUM_REGION_GROUPS,temp);
    }
  }
  /** 
 * Ensure that we can use Set.add to deduplicate WALs
 */
  @Test public void setMembershipDedups() throws IOException {
    final int temp=CONF.getInt(NUM_REGION_GROUPS,DEFAULT_NUM_REGION_GROUPS);
    WALFactory wals=null;
    try {
      CONF.setInt(NUM_REGION_GROUPS,temp * 4);
      FSUtils.setRootDir(CONF,TEST_UTIL.getDataTestDirOnTestFS());
      wals=new WALFactory(CONF,"setMembershipDedups");
      Set<WAL> seen=new HashSet<>(temp * 4);
      int count=0;
      for (int i=0; i < temp * 8; i++) {
        WAL maybeNewWAL=wals.getWAL(RegionInfoBuilder.newBuilder(TableName.valueOf("Table-" + ThreadLocalRandom.current().nextInt())).build());
        LOG.info("Iteration " + i + ", checking wal "+ maybeNewWAL);
        if (seen.add(maybeNewWAL)) {
          count++;
        }
      }
      assertEquals("received back a different number of WALs that are not equal() to each other " + "than the bound we placed.",temp * 4,count);
    }
  finally {
      if (wals != null) {
        wals.close();
      }
      CONF.setInt(NUM_REGION_GROUPS,temp);
    }
  }
}
