@Category({RegionServerTests.class,SmallTests.class}) public class TestExplicitColumnTracker {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestExplicitColumnTracker.class);
  private final byte[] col1=Bytes.toBytes("col1");
  private final byte[] col2=Bytes.toBytes("col2");
  private final byte[] col3=Bytes.toBytes("col3");
  private final byte[] col4=Bytes.toBytes("col4");
  private final byte[] col5=Bytes.toBytes("col5");
  private void runTest(  int maxVersions,  TreeSet<byte[]> trackColumns,  List<byte[]> scannerColumns,  List<MatchCode> expected) throws IOException {
    ColumnTracker exp=new ExplicitColumnTracker(trackColumns,0,maxVersions,Long.MIN_VALUE);
    List<ScanQueryMatcher.MatchCode> result=new ArrayList<>(scannerColumns.size());
    long timestamp=0;
    for (    byte[] col : scannerColumns) {
      result.add(ScanQueryMatcher.checkColumn(exp,col,0,col.length,++timestamp,KeyValue.Type.Put.getCode(),false));
    }
    assertEquals(expected.size(),result.size());
    for (int i=0; i < expected.size(); i++) {
      assertEquals(expected.get(i),result.get(i));
    }
  }
  @Test public void testGetSingleVersion() throws IOException {
    TreeSet<byte[]> columns=new TreeSet<>(Bytes.BYTES_COMPARATOR);
    columns.add(col2);
    columns.add(col4);
    List<MatchCode> expected=new ArrayList<>(5);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_COL);
    expected.add(ScanQueryMatcher.MatchCode.INCLUDE_AND_SEEK_NEXT_COL);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_COL);
    expected.add(ScanQueryMatcher.MatchCode.INCLUDE_AND_SEEK_NEXT_ROW);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_ROW);
    int maxVersions=1;
    List<byte[]> scanner=new ArrayList<>(5);
    scanner.add(col1);
    scanner.add(col2);
    scanner.add(col3);
    scanner.add(col4);
    scanner.add(col5);
    runTest(maxVersions,columns,scanner,expected);
  }
  @Test public void testGetMultiVersion() throws IOException {
    TreeSet<byte[]> columns=new TreeSet<>(Bytes.BYTES_COMPARATOR);
    columns.add(col2);
    columns.add(col4);
    List<ScanQueryMatcher.MatchCode> expected=new ArrayList<>(15);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_COL);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_COL);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_COL);
    expected.add(ScanQueryMatcher.MatchCode.INCLUDE);
    expected.add(ScanQueryMatcher.MatchCode.INCLUDE_AND_SEEK_NEXT_COL);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_COL);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_COL);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_COL);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_COL);
    expected.add(ScanQueryMatcher.MatchCode.INCLUDE);
    expected.add(ScanQueryMatcher.MatchCode.INCLUDE_AND_SEEK_NEXT_ROW);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_ROW);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_ROW);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_ROW);
    expected.add(ScanQueryMatcher.MatchCode.SEEK_NEXT_ROW);
    int maxVersions=2;
    List<byte[]> scanner=new ArrayList<>(15);
    scanner.add(col1);
    scanner.add(col1);
    scanner.add(col1);
    scanner.add(col2);
    scanner.add(col2);
    scanner.add(col2);
    scanner.add(col3);
    scanner.add(col3);
    scanner.add(col3);
    scanner.add(col4);
    scanner.add(col4);
    scanner.add(col4);
    scanner.add(col5);
    scanner.add(col5);
    scanner.add(col5);
    runTest(maxVersions,columns,scanner,expected);
  }
  /** 
 * hbase-2259
 */
  @Test public void testStackOverflow() throws IOException {
    int maxVersions=1;
    TreeSet<byte[]> columns=new TreeSet<>(Bytes.BYTES_COMPARATOR);
    for (int i=0; i < 100000; i++) {
      columns.add(Bytes.toBytes("col" + i));
    }
    ColumnTracker explicit=new ExplicitColumnTracker(columns,0,maxVersions,Long.MIN_VALUE);
    for (int i=0; i < 100000; i+=2) {
      byte[] col=Bytes.toBytes("col" + i);
      ScanQueryMatcher.checkColumn(explicit,col,0,col.length,1,KeyValue.Type.Put.getCode(),false);
    }
    explicit.reset();
    for (int i=1; i < 100000; i+=2) {
      byte[] col=Bytes.toBytes("col" + i);
      ScanQueryMatcher.checkColumn(explicit,col,0,col.length,1,KeyValue.Type.Put.getCode(),false);
    }
  }
  /** 
 * Regression test for HBASE-2545
 */
  @Test public void testInfiniteLoop() throws IOException {
    TreeSet<byte[]> columns=new TreeSet<>(Bytes.BYTES_COMPARATOR);
    columns.addAll(Arrays.asList(new byte[][]{col2,col3,col5}));
    List<byte[]> scanner=Arrays.<byte[]>asList(new byte[][]{col1,col4});
    List<ScanQueryMatcher.MatchCode> expected=Arrays.<ScanQueryMatcher.MatchCode>asList(new ScanQueryMatcher.MatchCode[]{ScanQueryMatcher.MatchCode.SEEK_NEXT_COL,ScanQueryMatcher.MatchCode.SEEK_NEXT_COL});
    runTest(1,columns,scanner,expected);
  }
}
