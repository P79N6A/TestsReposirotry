/** 
 * Class to test ProtobufUtil.
 */
@Category({MiscTests.class,SmallTests.class}) public class TestProtobufUtil {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestProtobufUtil.class);
  @Test public void testException() throws IOException {
    NameBytesPair.Builder builder=NameBytesPair.newBuilder();
    final String omg="OMG!!!";
    builder.setName("java.io.IOException");
    builder.setValue(ByteString.copyFrom(Bytes.toBytes(omg)));
    Throwable t=ProtobufUtil.toException(builder.build());
    assertEquals(omg,t.getMessage());
    builder.clear();
    builder.setName("org.apache.hadoop.ipc.RemoteException");
    builder.setValue(ByteString.copyFrom(Bytes.toBytes(omg)));
    t=ProtobufUtil.toException(builder.build());
    assertEquals(omg,t.getMessage());
  }
  /** 
 * Test basic Get conversions.
 * @throws IOException
 */
  @Test public void testGet() throws IOException {
    ClientProtos.Get.Builder getBuilder=ClientProtos.Get.newBuilder();
    getBuilder.setRow(ByteString.copyFromUtf8("row"));
    Column.Builder columnBuilder=Column.newBuilder();
    columnBuilder.setFamily(ByteString.copyFromUtf8("f1"));
    columnBuilder.addQualifier(ByteString.copyFromUtf8("c1"));
    columnBuilder.addQualifier(ByteString.copyFromUtf8("c2"));
    getBuilder.addColumn(columnBuilder.build());
    columnBuilder.clear();
    columnBuilder.setFamily(ByteString.copyFromUtf8("f2"));
    getBuilder.addColumn(columnBuilder.build());
    getBuilder.setLoadColumnFamiliesOnDemand(true);
    ClientProtos.Get proto=getBuilder.build();
    assertEquals(1,proto.getMaxVersions());
    assertEquals(true,proto.getCacheBlocks());
    getBuilder=ClientProtos.Get.newBuilder(proto);
    getBuilder.setMaxVersions(1);
    getBuilder.setCacheBlocks(true);
    getBuilder.setTimeRange(ProtobufUtil.toTimeRange(TimeRange.allTime()));
    Get get=ProtobufUtil.toGet(proto);
    assertEquals(getBuilder.build(),ProtobufUtil.toGet(get));
  }
  /** 
 * Test Append Mutate conversions.
 * @throws IOException
 */
  @Test public void testAppend() throws IOException {
    long timeStamp=111111;
    MutationProto.Builder mutateBuilder=MutationProto.newBuilder();
    mutateBuilder.setRow(ByteString.copyFromUtf8("row"));
    mutateBuilder.setMutateType(MutationType.APPEND);
    mutateBuilder.setTimestamp(timeStamp);
    ColumnValue.Builder valueBuilder=ColumnValue.newBuilder();
    valueBuilder.setFamily(ByteString.copyFromUtf8("f1"));
    QualifierValue.Builder qualifierBuilder=QualifierValue.newBuilder();
    qualifierBuilder.setQualifier(ByteString.copyFromUtf8("c1"));
    qualifierBuilder.setValue(ByteString.copyFromUtf8("v1"));
    qualifierBuilder.setTimestamp(timeStamp);
    valueBuilder.addQualifierValue(qualifierBuilder.build());
    qualifierBuilder.setQualifier(ByteString.copyFromUtf8("c2"));
    qualifierBuilder.setValue(ByteString.copyFromUtf8("v2"));
    valueBuilder.addQualifierValue(qualifierBuilder.build());
    mutateBuilder.addColumnValue(valueBuilder.build());
    MutationProto proto=mutateBuilder.build();
    assertEquals(MutationProto.Durability.USE_DEFAULT,proto.getDurability());
    mutateBuilder=MutationProto.newBuilder(proto);
    mutateBuilder.setDurability(MutationProto.Durability.USE_DEFAULT);
    Append append=ProtobufUtil.toAppend(proto,null);
    mutateBuilder.setTimestamp(append.getTimestamp());
    mutateBuilder.setTimeRange(ProtobufUtil.toTimeRange(append.getTimeRange()));
    assertEquals(mutateBuilder.build(),ProtobufUtil.toMutation(MutationType.APPEND,append));
  }
  /** 
 * Test Delete Mutate conversions.
 * @throws IOException
 */
  @Test public void testDelete() throws IOException {
    MutationProto.Builder mutateBuilder=MutationProto.newBuilder();
    mutateBuilder.setRow(ByteString.copyFromUtf8("row"));
    mutateBuilder.setMutateType(MutationType.DELETE);
    mutateBuilder.setTimestamp(111111);
    ColumnValue.Builder valueBuilder=ColumnValue.newBuilder();
    valueBuilder.setFamily(ByteString.copyFromUtf8("f1"));
    QualifierValue.Builder qualifierBuilder=QualifierValue.newBuilder();
    qualifierBuilder.setQualifier(ByteString.copyFromUtf8("c1"));
    qualifierBuilder.setDeleteType(DeleteType.DELETE_ONE_VERSION);
    qualifierBuilder.setTimestamp(111222);
    valueBuilder.addQualifierValue(qualifierBuilder.build());
    qualifierBuilder.setQualifier(ByteString.copyFromUtf8("c2"));
    qualifierBuilder.setDeleteType(DeleteType.DELETE_MULTIPLE_VERSIONS);
    qualifierBuilder.setTimestamp(111333);
    valueBuilder.addQualifierValue(qualifierBuilder.build());
    mutateBuilder.addColumnValue(valueBuilder.build());
    MutationProto proto=mutateBuilder.build();
    assertEquals(MutationProto.Durability.USE_DEFAULT,proto.getDurability());
    mutateBuilder=MutationProto.newBuilder(proto);
    mutateBuilder.setDurability(MutationProto.Durability.USE_DEFAULT);
    Delete delete=ProtobufUtil.toDelete(proto);
    for (    ColumnValue.Builder column : mutateBuilder.getColumnValueBuilderList()) {
      for (      QualifierValue.Builder qualifier : column.getQualifierValueBuilderList()) {
        qualifier.setValue(ByteString.EMPTY);
      }
    }
    assertEquals(mutateBuilder.build(),ProtobufUtil.toMutation(MutationType.DELETE,delete));
  }
  /** 
 * Test Increment Mutate conversions.
 * @throws IOException
 */
  @Test public void testIncrement() throws IOException {
    long timeStamp=111111;
    MutationProto.Builder mutateBuilder=MutationProto.newBuilder();
    mutateBuilder.setRow(ByteString.copyFromUtf8("row"));
    mutateBuilder.setMutateType(MutationType.INCREMENT);
    ColumnValue.Builder valueBuilder=ColumnValue.newBuilder();
    valueBuilder.setFamily(ByteString.copyFromUtf8("f1"));
    QualifierValue.Builder qualifierBuilder=QualifierValue.newBuilder();
    qualifierBuilder.setQualifier(ByteString.copyFromUtf8("c1"));
    qualifierBuilder.setValue(ByteString.copyFrom(Bytes.toBytes(11L)));
    qualifierBuilder.setTimestamp(timeStamp);
    valueBuilder.addQualifierValue(qualifierBuilder.build());
    qualifierBuilder.setQualifier(ByteString.copyFromUtf8("c2"));
    qualifierBuilder.setValue(ByteString.copyFrom(Bytes.toBytes(22L)));
    valueBuilder.addQualifierValue(qualifierBuilder.build());
    mutateBuilder.addColumnValue(valueBuilder.build());
    MutationProto proto=mutateBuilder.build();
    assertEquals(MutationProto.Durability.USE_DEFAULT,proto.getDurability());
    mutateBuilder=MutationProto.newBuilder(proto);
    mutateBuilder.setDurability(MutationProto.Durability.USE_DEFAULT);
    Increment increment=ProtobufUtil.toIncrement(proto,null);
    mutateBuilder.setTimestamp(increment.getTimestamp());
    mutateBuilder.setTimeRange(ProtobufUtil.toTimeRange(increment.getTimeRange()));
    assertEquals(mutateBuilder.build(),ProtobufUtil.toMutation(MutationType.INCREMENT,increment));
  }
  /** 
 * Test Put Mutate conversions.
 * @throws IOException
 */
  @Test public void testPut() throws IOException {
    MutationProto.Builder mutateBuilder=MutationProto.newBuilder();
    mutateBuilder.setRow(ByteString.copyFromUtf8("row"));
    mutateBuilder.setMutateType(MutationType.PUT);
    mutateBuilder.setTimestamp(111111);
    ColumnValue.Builder valueBuilder=ColumnValue.newBuilder();
    valueBuilder.setFamily(ByteString.copyFromUtf8("f1"));
    QualifierValue.Builder qualifierBuilder=QualifierValue.newBuilder();
    qualifierBuilder.setQualifier(ByteString.copyFromUtf8("c1"));
    qualifierBuilder.setValue(ByteString.copyFromUtf8("v1"));
    valueBuilder.addQualifierValue(qualifierBuilder.build());
    qualifierBuilder.setQualifier(ByteString.copyFromUtf8("c2"));
    qualifierBuilder.setValue(ByteString.copyFromUtf8("v2"));
    qualifierBuilder.setTimestamp(222222);
    valueBuilder.addQualifierValue(qualifierBuilder.build());
    mutateBuilder.addColumnValue(valueBuilder.build());
    MutationProto proto=mutateBuilder.build();
    assertEquals(MutationProto.Durability.USE_DEFAULT,proto.getDurability());
    mutateBuilder=MutationProto.newBuilder(proto);
    mutateBuilder.setDurability(MutationProto.Durability.USE_DEFAULT);
    Put put=ProtobufUtil.toPut(proto);
    long timestamp=put.getTimestamp();
    for (    ColumnValue.Builder column : mutateBuilder.getColumnValueBuilderList()) {
      for (      QualifierValue.Builder qualifier : column.getQualifierValueBuilderList()) {
        if (!qualifier.hasTimestamp()) {
          qualifier.setTimestamp(timestamp);
        }
      }
    }
    assertEquals(mutateBuilder.build(),ProtobufUtil.toMutation(MutationType.PUT,put));
  }
  /** 
 * Test basic Scan conversions.
 * @throws IOException
 */
  @Test public void testScan() throws IOException {
    ClientProtos.Scan.Builder scanBuilder=ClientProtos.Scan.newBuilder();
    scanBuilder.setStartRow(ByteString.copyFromUtf8("row1"));
    scanBuilder.setStopRow(ByteString.copyFromUtf8("row2"));
    Column.Builder columnBuilder=Column.newBuilder();
    columnBuilder.setFamily(ByteString.copyFromUtf8("f1"));
    columnBuilder.addQualifier(ByteString.copyFromUtf8("c1"));
    columnBuilder.addQualifier(ByteString.copyFromUtf8("c2"));
    scanBuilder.addColumn(columnBuilder.build());
    columnBuilder.clear();
    columnBuilder.setFamily(ByteString.copyFromUtf8("f2"));
    scanBuilder.addColumn(columnBuilder.build());
    ClientProtos.Scan proto=scanBuilder.build();
    assertEquals(1,proto.getMaxVersions());
    assertEquals(true,proto.getCacheBlocks());
    scanBuilder=ClientProtos.Scan.newBuilder(proto);
    scanBuilder.setMaxVersions(2);
    scanBuilder.setCacheBlocks(false);
    scanBuilder.setCaching(1024);
    scanBuilder.setTimeRange(ProtobufUtil.toTimeRange(TimeRange.allTime()));
    scanBuilder.setIncludeStopRow(false);
    ClientProtos.Scan expectedProto=scanBuilder.build();
    ClientProtos.Scan actualProto=ProtobufUtil.toScan(ProtobufUtil.toScan(expectedProto));
    assertEquals(expectedProto,actualProto);
  }
  @Test public void testToCell() throws Exception {
    KeyValue kv1=new KeyValue(Bytes.toBytes("aaa"),Bytes.toBytes("f1"),Bytes.toBytes("q1"),new byte[30]);
    KeyValue kv2=new KeyValue(Bytes.toBytes("bbb"),Bytes.toBytes("f1"),Bytes.toBytes("q1"),new byte[30]);
    KeyValue kv3=new KeyValue(Bytes.toBytes("ccc"),Bytes.toBytes("f1"),Bytes.toBytes("q1"),new byte[30]);
    byte[] arr=new byte[kv1.getLength() + kv2.getLength() + kv3.getLength()];
    System.arraycopy(kv1.getBuffer(),kv1.getOffset(),arr,0,kv1.getLength());
    System.arraycopy(kv2.getBuffer(),kv2.getOffset(),arr,kv1.getLength(),kv2.getLength());
    System.arraycopy(kv3.getBuffer(),kv3.getOffset(),arr,kv1.getLength() + kv2.getLength(),kv3.getLength());
    ByteBuffer dbb=ByteBuffer.allocateDirect(arr.length);
    dbb.put(arr);
    ByteBufferKeyValue offheapKV=new ByteBufferKeyValue(dbb,kv1.getLength(),kv2.getLength());
    CellProtos.Cell cell=ProtobufUtil.toCell(offheapKV);
    Cell newOffheapKV=ProtobufUtil.toCell(ExtendedCellBuilderFactory.create(CellBuilderType.SHALLOW_COPY),cell);
    assertTrue(CellComparatorImpl.COMPARATOR.compare(offheapKV,newOffheapKV) == 0);
  }
}
