private static class MockLeader extends Thread implements Stoppable {
  private volatile boolean stopped;
  private ZKWatcher watcher;
  private ZKLeaderManager zkLeader;
  private AtomicBoolean master=new AtomicBoolean(false);
  private int index;
  public MockLeader(  ZKWatcher watcher,  int index){
    setDaemon(true);
    setName("TestZKLeaderManager-leader-" + index);
    this.index=index;
    this.watcher=watcher;
    this.zkLeader=new ZKLeaderManager(watcher,LEADER_ZNODE,Bytes.toBytes(index),this);
  }
  public boolean isMaster(){
    return master.get();
  }
  public int getIndex(){
    return index;
  }
  public ZKWatcher getWatcher(){
    return watcher;
  }
  @Override public void run(){
    while (!stopped) {
      zkLeader.start();
      zkLeader.waitToBecomeLeader();
      master.set(true);
      while (master.get() && !stopped) {
        try {
          Thread.sleep(10);
        }
 catch (        InterruptedException ignored) {
        }
      }
    }
  }
  public void abdicate(){
    zkLeader.stepDownAsLeader();
    master.set(false);
  }
  @Override public void stop(  String why){
    stopped=true;
    abdicate();
    Threads.sleep(100);
    watcher.close();
  }
  @Override public boolean isStopped(){
    return stopped;
  }
}
