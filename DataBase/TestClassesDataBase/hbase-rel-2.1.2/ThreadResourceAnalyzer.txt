static class ThreadResourceAnalyzer extends ResourceChecker.ResourceAnalyzer {
  private static Set<String> initialThreadNames=new HashSet<>();
  private static List<String> stringsToLog=null;
  @Override public int getVal(  Phase phase){
    Map<Thread,StackTraceElement[]> stackTraces=Thread.getAllStackTraces();
    if (phase == Phase.INITIAL) {
      stringsToLog=null;
      for (      Thread t : stackTraces.keySet()) {
        initialThreadNames.add(t.getName());
      }
    }
 else     if (phase == Phase.END) {
      if (stackTraces.size() > initialThreadNames.size()) {
        stringsToLog=new ArrayList<>();
        for (        Thread t : stackTraces.keySet()) {
          if (!initialThreadNames.contains(t.getName())) {
            stringsToLog.add("\nPotentially hanging thread: " + t.getName() + "\n");
            StackTraceElement[] stackElements=stackTraces.get(t);
            for (            StackTraceElement ele : stackElements) {
              stringsToLog.add("\t" + ele + "\n");
            }
          }
        }
      }
    }
    return stackTraces.size();
  }
  @Override public int getMax(){
    return 500;
  }
  @Override public List<String> getStringsToLog(){
    return stringsToLog;
  }
}
