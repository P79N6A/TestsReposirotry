@Category({RegionServerTests.class,SmallTests.class}) public class TestMetricsTableLatencies {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMetricsTableLatencies.class);
  public static MetricsAssertHelper HELPER=CompatibilityFactory.getInstance(MetricsAssertHelper.class);
  @Test public void testTableWrapperAggregateMetrics() throws IOException {
    TableName tn1=TableName.valueOf("table1");
    TableName tn2=TableName.valueOf("table2");
    MetricsTableLatencies latencies=CompatibilitySingletonFactory.getInstance(MetricsTableLatencies.class);
    assertTrue("'latencies' is actually " + latencies.getClass(),latencies instanceof MetricsTableLatenciesImpl);
    MetricsTableLatenciesImpl latenciesImpl=(MetricsTableLatenciesImpl)latencies;
    RegionServerTableMetrics tableMetrics=new RegionServerTableMetrics();
    tableMetrics.updateGet(tn1,500L);
    HELPER.assertGauge(MetricsTableLatenciesImpl.qualifyMetricsName(tn1,MetricsTableLatencies.GET_TIME + "_" + "999th_percentile"),500L,latenciesImpl);
    tableMetrics.updatePut(tn1,50L);
    HELPER.assertGauge(MetricsTableLatenciesImpl.qualifyMetricsName(tn1,MetricsTableLatencies.PUT_TIME + "_" + "99th_percentile"),50L,latenciesImpl);
    tableMetrics.updateGet(tn2,300L);
    HELPER.assertGauge(MetricsTableLatenciesImpl.qualifyMetricsName(tn2,MetricsTableLatencies.GET_TIME + "_" + "999th_percentile"),300L,latenciesImpl);
    tableMetrics.updatePut(tn2,75L);
    HELPER.assertGauge(MetricsTableLatenciesImpl.qualifyMetricsName(tn2,MetricsTableLatencies.PUT_TIME + "_" + "99th_percentile"),75L,latenciesImpl);
  }
}
