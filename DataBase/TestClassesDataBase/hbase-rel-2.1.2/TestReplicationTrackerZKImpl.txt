/** 
 * This class tests the ReplicationTrackerZKImpl class and ReplicationListener interface. One MiniZKCluster is used throughout the entire class. The cluster is initialized with the creation of the rsZNode. All other znode creation/initialization is handled by the replication state interfaces (i.e. ReplicationPeers, etc.). Each test case in this class should ensure that the MiniZKCluster is cleaned and returned to it's initial state (i.e. nothing but the rsZNode).
 */
@Category({ReplicationTests.class,MediumTests.class}) public class TestReplicationTrackerZKImpl {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestReplicationTrackerZKImpl.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestReplicationTrackerZKImpl.class);
  private static Configuration conf;
  private static HBaseTestingUtility utility;
  private ZKWatcher zkw;
  private ReplicationPeers rp;
  private ReplicationTracker rt;
  private AtomicInteger rsRemovedCount;
  private String rsRemovedData;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    utility=new HBaseTestingUtility();
    utility.startMiniZKCluster();
    conf=utility.getConfiguration();
    ZKWatcher zk=HBaseTestingUtility.getZooKeeperWatcher(utility);
    ZKUtil.createWithParents(zk,zk.getZNodePaths().rsZNode);
  }
  @Before public void setUp() throws Exception {
    zkw=HBaseTestingUtility.getZooKeeperWatcher(utility);
    String fakeRs1=ZNodePaths.joinZNode(zkw.getZNodePaths().rsZNode,"hostname1.example.org:1234");
    try {
      ZKClusterId.setClusterId(zkw,new ClusterId());
      rp=ReplicationFactory.getReplicationPeers(zkw,conf);
      rp.init();
      rt=ReplicationFactory.getReplicationTracker(zkw,new DummyServer(fakeRs1),new DummyServer(fakeRs1));
    }
 catch (    Exception e) {
      fail("Exception during test setup: " + e);
    }
    rsRemovedCount=new AtomicInteger(0);
    rsRemovedData="";
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    utility.shutdownMiniZKCluster();
  }
  @Test public void testGetListOfRegionServers() throws Exception {
    assertEquals(0,rt.getListOfRegionServers().size());
    ZKUtil.createWithParents(zkw,ZNodePaths.joinZNode(zkw.getZNodePaths().rsZNode,"hostname1.example.org:1234"));
    assertEquals(1,rt.getListOfRegionServers().size());
    ZKUtil.createWithParents(zkw,ZNodePaths.joinZNode(zkw.getZNodePaths().rsZNode,"hostname2.example.org:1234"));
    assertEquals(2,rt.getListOfRegionServers().size());
    ZKUtil.deleteNode(zkw,ZNodePaths.joinZNode(zkw.getZNodePaths().rsZNode,"hostname2.example.org:1234"));
    assertEquals(1,rt.getListOfRegionServers().size());
    ZKUtil.deleteNode(zkw,ZNodePaths.joinZNode(zkw.getZNodePaths().rsZNode,"hostname1.example.org:1234"));
    assertEquals(0,rt.getListOfRegionServers().size());
  }
  @Test public void testRegionServerRemovedEvent() throws Exception {
    ZKUtil.createAndWatch(zkw,ZNodePaths.joinZNode(zkw.getZNodePaths().rsZNode,"hostname2.example.org:1234"),HConstants.EMPTY_BYTE_ARRAY);
    rt.registerListener(new DummyReplicationListener());
    ZKUtil.deleteNode(zkw,ZNodePaths.joinZNode(zkw.getZNodePaths().rsZNode,"hostname2.example.org:1234"));
    while (rsRemovedCount.get() < 1) {
      Thread.sleep(5);
    }
    assertEquals("hostname2.example.org:1234",rsRemovedData);
  }
  @Test public void testPeerNameControl() throws Exception {
    int exists=0;
    rp.getPeerStorage().addPeer("6",ReplicationPeerConfig.newBuilder().setClusterKey(utility.getClusterKey()).build(),true);
    try {
      rp.getPeerStorage().addPeer("6",ReplicationPeerConfig.newBuilder().setClusterKey(utility.getClusterKey()).build(),true);
    }
 catch (    ReplicationException e) {
      if (e.getCause() instanceof KeeperException.NodeExistsException) {
        exists++;
      }
    }
    assertEquals(1,exists);
    rp.getPeerStorage().removePeer("6");
  }
private class DummyReplicationListener implements ReplicationListener {
    @Override public void regionServerRemoved(    String regionServer){
      rsRemovedData=regionServer;
      rsRemovedCount.getAndIncrement();
      LOG.debug("Received regionServerRemoved event: " + regionServer);
    }
  }
private class DummyServer implements Server {
    private String serverName;
    private boolean isAborted=false;
    private boolean isStopped=false;
    public DummyServer(    String serverName){
      this.serverName=serverName;
    }
    @Override public Configuration getConfiguration(){
      return conf;
    }
    @Override public ZKWatcher getZooKeeper(){
      return zkw;
    }
    @Override public CoordinatedStateManager getCoordinatedStateManager(){
      return null;
    }
    @Override public ClusterConnection getConnection(){
      return null;
    }
    @Override public MetaTableLocator getMetaTableLocator(){
      return null;
    }
    @Override public ServerName getServerName(){
      return ServerName.valueOf(this.serverName);
    }
    @Override public void abort(    String why,    Throwable e){
      LOG.info("Aborting " + serverName);
      this.isAborted=true;
    }
    @Override public boolean isAborted(){
      return this.isAborted;
    }
    @Override public void stop(    String why){
      this.isStopped=true;
    }
    @Override public boolean isStopped(){
      return this.isStopped;
    }
    @Override public ChoreService getChoreService(){
      return null;
    }
    @Override public ClusterConnection getClusterConnection(){
      return null;
    }
    @Override public FileSystem getFileSystem(){
      return null;
    }
    @Override public boolean isStopping(){
      return false;
    }
    @Override public Connection createConnection(    Configuration conf) throws IOException {
      return null;
    }
  }
}
