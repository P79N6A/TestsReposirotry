/** 
 * Test that we add tmpjars correctly including the named dependencies. Runs as an integration test so that classpath is realistic.
 */
@Category(IntegrationTests.class) public class IntegrationTestTableMapReduceUtil implements Configurable, Tool {
  private static IntegrationTestingUtility util;
  @BeforeClass public static void provisionCluster() throws Exception {
    if (null == util) {
      util=new IntegrationTestingUtility();
    }
  }
  @Before public void skipMiniCluster(){
    assumeTrue("test requires a distributed cluster.",util.isDistributedCluster());
  }
  /** 
 * Look for jars we expect to be on the classpath by name.
 */
  @Test public void testAddDependencyJars() throws Exception {
    Job job=new Job();
    TableMapReduceUtil.addDependencyJars(job);
    String tmpjars=job.getConfiguration().get("tmpjars");
    assertTrue(tmpjars.contains("hbase-common"));
    assertTrue(tmpjars.contains("hbase-protocol"));
    assertTrue(tmpjars.contains("hbase-client"));
    assertTrue(tmpjars.contains("hbase-hadoop-compat"));
    assertTrue(tmpjars.contains("hbase-server"));
    assertTrue(tmpjars.contains("zookeeper"));
    assertTrue(tmpjars.contains("netty"));
    assertTrue(tmpjars.contains("protobuf"));
    assertTrue(tmpjars.contains("guava"));
    assertTrue(tmpjars.contains("htrace"));
  }
  @Override public int run(  String[] args) throws Exception {
    provisionCluster();
    skipMiniCluster();
    testAddDependencyJars();
    return 0;
  }
  public void setConf(  Configuration conf){
    if (util != null) {
      throw new IllegalArgumentException("setConf not supported after the test has been initialized.");
    }
    util=new IntegrationTestingUtility(conf);
  }
  @Override public Configuration getConf(){
    return util.getConfiguration();
  }
  public static void main(  String[] args) throws Exception {
    Configuration conf=HBaseConfiguration.create();
    IntegrationTestingUtility.setUseDistributedCluster(conf);
    int status=ToolRunner.run(conf,new IntegrationTestTableMapReduceUtil(),args);
    System.exit(status);
  }
}
