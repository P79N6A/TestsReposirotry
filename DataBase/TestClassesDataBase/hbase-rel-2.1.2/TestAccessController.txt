/** 
 * Performs authorization checks for common operations, according to different levels of authorized users.
 */
@Category({SecurityTests.class,LargeTests.class}) public class TestAccessController extends SecureTestUtil {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestAccessController.class);
  private static final FsPermission FS_PERMISSION_ALL=FsPermission.valueOf("-rwxrwxrwx");
  private static final Logger LOG=LoggerFactory.getLogger(TestAccessController.class);
  private static TableName TEST_TABLE=TableName.valueOf("testtable1");
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static Configuration conf;
  /** 
 * The systemUserConnection created here is tied to the system user. In case, you are planning to create AccessTestAction, DON'T use this systemUserConnection as the 'doAs' user gets  eclipsed by the system user. 
 */
  private static Connection systemUserConnection;
  private static User SUPERUSER;
  private static User USER_ADMIN;
  private static User USER_RW;
  private static User USER_RO;
  private static User USER_OWNER;
  private static User USER_CREATE;
  private static User USER_NONE;
  private static User USER_ADMIN_CF;
  private static final String GROUP_ADMIN="group_admin";
  private static final String GROUP_CREATE="group_create";
  private static final String GROUP_READ="group_read";
  private static final String GROUP_WRITE="group_write";
  private static User USER_GROUP_ADMIN;
  private static User USER_GROUP_CREATE;
  private static User USER_GROUP_READ;
  private static User USER_GROUP_WRITE;
  private static TableName TEST_TABLE2=TableName.valueOf("testtable2");
  private static byte[] TEST_FAMILY=Bytes.toBytes("f1");
  private static byte[] TEST_QUALIFIER=Bytes.toBytes("q1");
  private static byte[] TEST_ROW=Bytes.toBytes("r1");
  private static MasterCoprocessorEnvironment CP_ENV;
  private static AccessController ACCESS_CONTROLLER;
  private static RegionServerCoprocessorEnvironment RSCP_ENV;
  private static RegionCoprocessorEnvironment RCP_ENV;
  @Rule public TestName name=new TestName();
  @BeforeClass public static void setupBeforeClass() throws Exception {
    conf=TEST_UTIL.getConfiguration();
    conf.setInt(HConstants.REGION_SERVER_HIGH_PRIORITY_HANDLER_COUNT,10);
    enableSecurity(conf);
    conf.set(CoprocessorHost.REGION_COPROCESSOR_CONF_KEY,AccessController.class.getName());
    verifyConfiguration(conf);
    conf.setBoolean(AccessControlConstants.EXEC_PERMISSION_CHECKS_KEY,true);
    TEST_UTIL.startMiniCluster();
    MasterCoprocessorHost masterCpHost=TEST_UTIL.getMiniHBaseCluster().getMaster().getMasterCoprocessorHost();
    masterCpHost.load(AccessController.class,Coprocessor.PRIORITY_HIGHEST,conf);
    ACCESS_CONTROLLER=masterCpHost.findCoprocessor(AccessController.class);
    CP_ENV=masterCpHost.createEnvironment(ACCESS_CONTROLLER,Coprocessor.PRIORITY_HIGHEST,1,conf);
    RegionServerCoprocessorHost rsCpHost=TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getRegionServerCoprocessorHost();
    RSCP_ENV=rsCpHost.createEnvironment(ACCESS_CONTROLLER,Coprocessor.PRIORITY_HIGHEST,1,conf);
    TEST_UTIL.waitUntilAllRegionsAssigned(AccessControlLists.ACL_TABLE_NAME);
    SUPERUSER=User.createUserForTesting(conf,"admin",new String[]{"supergroup"});
    USER_ADMIN=User.createUserForTesting(conf,"admin2",new String[0]);
    USER_RW=User.createUserForTesting(conf,"rwuser",new String[0]);
    USER_RO=User.createUserForTesting(conf,"rouser",new String[0]);
    USER_OWNER=User.createUserForTesting(conf,"owner",new String[0]);
    USER_CREATE=User.createUserForTesting(conf,"tbl_create",new String[0]);
    USER_NONE=User.createUserForTesting(conf,"nouser",new String[0]);
    USER_ADMIN_CF=User.createUserForTesting(conf,"col_family_admin",new String[0]);
    USER_GROUP_ADMIN=User.createUserForTesting(conf,"user_group_admin",new String[]{GROUP_ADMIN});
    USER_GROUP_CREATE=User.createUserForTesting(conf,"user_group_create",new String[]{GROUP_CREATE});
    USER_GROUP_READ=User.createUserForTesting(conf,"user_group_read",new String[]{GROUP_READ});
    USER_GROUP_WRITE=User.createUserForTesting(conf,"user_group_write",new String[]{GROUP_WRITE});
    systemUserConnection=TEST_UTIL.getConnection();
    setUpTableAndUserPermissions();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    cleanUp();
    TEST_UTIL.shutdownMiniCluster();
    int total=TableAuthManager.getTotalRefCount();
    assertTrue("Unexpected reference count: " + total,total == 0);
  }
  private static void setUpTableAndUserPermissions() throws Exception {
    HTableDescriptor htd=new HTableDescriptor(TEST_TABLE);
    HColumnDescriptor hcd=new HColumnDescriptor(TEST_FAMILY);
    hcd.setMaxVersions(100);
    htd.addFamily(hcd);
    htd.setOwner(USER_OWNER);
    createTable(TEST_UTIL,htd,new byte[][]{Bytes.toBytes("s")});
    HRegion region=TEST_UTIL.getHBaseCluster().getRegions(TEST_TABLE).get(0);
    RegionCoprocessorHost rcpHost=region.getCoprocessorHost();
    RCP_ENV=rcpHost.createEnvironment(ACCESS_CONTROLLER,Coprocessor.PRIORITY_HIGHEST,1,conf);
    grantGlobal(TEST_UTIL,USER_ADMIN.getShortName(),Permission.Action.ADMIN,Permission.Action.CREATE,Permission.Action.READ,Permission.Action.WRITE);
    grantOnTable(TEST_UTIL,USER_RW.getShortName(),TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ,Permission.Action.WRITE);
    grantOnTable(TEST_UTIL,USER_CREATE.getShortName(),TEST_TABLE,null,null,Permission.Action.CREATE,Permission.Action.READ,Permission.Action.WRITE);
    grantOnTable(TEST_UTIL,USER_RO.getShortName(),TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ);
    grantOnTable(TEST_UTIL,USER_ADMIN_CF.getShortName(),TEST_TABLE,TEST_FAMILY,null,Permission.Action.ADMIN,Permission.Action.CREATE);
    grantGlobal(TEST_UTIL,toGroupEntry(GROUP_ADMIN),Permission.Action.ADMIN);
    grantGlobal(TEST_UTIL,toGroupEntry(GROUP_CREATE),Permission.Action.CREATE);
    grantGlobal(TEST_UTIL,toGroupEntry(GROUP_READ),Permission.Action.READ);
    grantGlobal(TEST_UTIL,toGroupEntry(GROUP_WRITE),Permission.Action.WRITE);
    assertEquals(5,AccessControlLists.getTablePermissions(conf,TEST_TABLE).size());
    int size=0;
    try {
      size=AccessControlClient.getUserPermissions(systemUserConnection,TEST_TABLE.toString()).size();
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.getUserPermissions. ",e);
      fail("error during call of AccessControlClient.getUserPermissions.");
    }
    assertEquals(5,size);
  }
  private static void cleanUp() throws Exception {
    try {
      deleteTable(TEST_UTIL,TEST_TABLE);
    }
 catch (    TableNotFoundException ex) {
      LOG.info("Test deleted table " + TEST_TABLE);
    }
    assertEquals(0,AccessControlLists.getTablePermissions(conf,TEST_TABLE).size());
    assertEquals(0,AccessControlLists.getNamespacePermissions(conf,TEST_TABLE.getNamespaceAsString()).size());
  }
  @Test public void testUnauthorizedShutdown() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        HMaster master=TEST_UTIL.getHBaseCluster().getMaster();
        master.shutdown();
        return null;
      }
    }
;
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testUnauthorizedStopMaster() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        HMaster master=TEST_UTIL.getHBaseCluster().getMaster();
        master.stopMaster();
        return null;
      }
    }
;
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testSecurityCapabilities() throws Exception {
    List<SecurityCapability> capabilities=TEST_UTIL.getConnection().getAdmin().getSecurityCapabilities();
    assertTrue("AUTHORIZATION capability is missing",capabilities.contains(SecurityCapability.AUTHORIZATION));
    assertTrue("CELL_AUTHORIZATION capability is missing",capabilities.contains(SecurityCapability.CELL_AUTHORIZATION));
  }
  @Test public void testTableCreate() throws Exception {
    AccessTestAction createTable=new AccessTestAction(){
      @Override public Object run() throws Exception {
        HTableDescriptor htd=new HTableDescriptor(TableName.valueOf(name.getMethodName()));
        htd.addFamily(new HColumnDescriptor(TEST_FAMILY));
        ACCESS_CONTROLLER.preCreateTable(ObserverContextImpl.createAndPrepare(CP_ENV),htd,null);
        return null;
      }
    }
;
    verifyAllowed(createTable,SUPERUSER,USER_ADMIN,USER_GROUP_CREATE);
    verifyDenied(createTable,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_ADMIN,USER_GROUP_READ,USER_GROUP_WRITE);
  }
  @Test public void testTableModify() throws Exception {
    AccessTestAction modifyTable=new AccessTestAction(){
      @Override public Object run() throws Exception {
        HTableDescriptor htd=new HTableDescriptor(TEST_TABLE);
        htd.addFamily(new HColumnDescriptor(TEST_FAMILY));
        htd.addFamily(new HColumnDescriptor("fam_" + User.getCurrent().getShortName()));
        ACCESS_CONTROLLER.preModifyTable(ObserverContextImpl.createAndPrepare(CP_ENV),TEST_TABLE,htd);
        return null;
      }
    }
;
    verifyAllowed(modifyTable,SUPERUSER,USER_ADMIN,USER_CREATE,USER_OWNER,USER_GROUP_CREATE,USER_GROUP_ADMIN);
    verifyDenied(modifyTable,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE);
  }
  @Test public void testTableDelete() throws Exception {
    AccessTestAction deleteTable=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preDeleteTable(ObserverContextImpl.createAndPrepare(CP_ENV),TEST_TABLE);
        return null;
      }
    }
;
    verifyAllowed(deleteTable,SUPERUSER,USER_ADMIN,USER_CREATE,USER_OWNER,USER_GROUP_CREATE,USER_GROUP_ADMIN);
    verifyDenied(deleteTable,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE);
  }
  @Test public void testTableTruncate() throws Exception {
    AccessTestAction truncateTable=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preTruncateTable(ObserverContextImpl.createAndPrepare(CP_ENV),TEST_TABLE);
        return null;
      }
    }
;
    verifyAllowed(truncateTable,SUPERUSER,USER_ADMIN,USER_CREATE,USER_OWNER,USER_GROUP_CREATE,USER_GROUP_ADMIN);
    verifyDenied(truncateTable,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE);
  }
  @Test public void testTableDisable() throws Exception {
    AccessTestAction disableTable=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preDisableTable(ObserverContextImpl.createAndPrepare(CP_ENV),TEST_TABLE);
        return null;
      }
    }
;
    AccessTestAction disableAclTable=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preDisableTable(ObserverContextImpl.createAndPrepare(CP_ENV),AccessControlLists.ACL_TABLE_NAME);
        return null;
      }
    }
;
    verifyAllowed(disableTable,SUPERUSER,USER_ADMIN,USER_CREATE,USER_OWNER,USER_GROUP_CREATE,USER_GROUP_ADMIN);
    verifyDenied(disableTable,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE);
    verifyDenied(disableAclTable,SUPERUSER,USER_ADMIN,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_GROUP_CREATE,USER_GROUP_ADMIN,USER_GROUP_READ,USER_GROUP_WRITE);
  }
  @Test public void testTableEnable() throws Exception {
    AccessTestAction enableTable=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preEnableTable(ObserverContextImpl.createAndPrepare(CP_ENV),TEST_TABLE);
        return null;
      }
    }
;
    verifyAllowed(enableTable,SUPERUSER,USER_ADMIN,USER_CREATE,USER_OWNER,USER_GROUP_CREATE,USER_GROUP_ADMIN);
    verifyDenied(enableTable,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE);
  }
public static class TestTableDDLProcedure extends Procedure<MasterProcedureEnv> implements TableProcedureInterface {
    private TableName tableName;
    public TestTableDDLProcedure(){
    }
    public TestTableDDLProcedure(    final MasterProcedureEnv env,    final TableName tableName) throws IOException {
      this.tableName=tableName;
      this.setTimeout(180000);
      this.setOwner(env.getRequestUser());
    }
    @Override public TableName getTableName(){
      return tableName;
    }
    @Override public TableOperationType getTableOperationType(){
      return TableOperationType.EDIT;
    }
    @Override protected boolean abort(    MasterProcedureEnv env){
      return true;
    }
    @Override protected void serializeStateData(    ProcedureStateSerializer serializer) throws IOException {
      TestProcedureProtos.TestTableDDLStateData.Builder testTableDDLMsg=TestProcedureProtos.TestTableDDLStateData.newBuilder().setTableName(tableName.getNameAsString());
      serializer.serialize(testTableDDLMsg.build());
    }
    @Override protected void deserializeStateData(    ProcedureStateSerializer serializer) throws IOException {
      TestProcedureProtos.TestTableDDLStateData testTableDDLMsg=serializer.deserialize(TestProcedureProtos.TestTableDDLStateData.class);
      tableName=TableName.valueOf(testTableDDLMsg.getTableName());
    }
    @Override protected Procedure[] execute(    MasterProcedureEnv env) throws ProcedureYieldException, InterruptedException {
      setState(ProcedureState.WAITING_TIMEOUT);
      return null;
    }
    @Override protected void rollback(    MasterProcedureEnv env) throws IOException, InterruptedException {
    }
  }
  @Test public void testAbortProcedure() throws Exception {
    long procId=1;
    AccessTestAction abortProcedureAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preAbortProcedure(ObserverContextImpl.createAndPrepare(CP_ENV),procId);
        return null;
      }
    }
;
    verifyAllowed(abortProcedureAction,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
  }
  @Test public void testGetProcedures() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final ProcedureExecutor<MasterProcedureEnv> procExec=TEST_UTIL.getHBaseCluster().getMaster().getMasterProcedureExecutor();
    Procedure proc=new TestTableDDLProcedure(procExec.getEnvironment(),tableName);
    proc.setOwner(USER_OWNER);
    procExec.submitProcedure(proc);
    final List<Procedure<MasterProcedureEnv>> procList=procExec.getProcedures();
    AccessTestAction getProceduresAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.postGetProcedures(ObserverContextImpl.createAndPrepare(CP_ENV));
        return null;
      }
    }
;
    verifyAllowed(getProceduresAction,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyAllowed(getProceduresAction,USER_OWNER);
    verifyIfNull(getProceduresAction,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE);
  }
  @Test public void testGetLocks() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preGetLocks(ObserverContextImpl.createAndPrepare(CP_ENV));
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testMove() throws Exception {
    List<HRegionLocation> regions;
    try (RegionLocator locator=systemUserConnection.getRegionLocator(TEST_TABLE)){
      regions=locator.getAllRegionLocations();
    }
     HRegionLocation location=regions.get(0);
    final HRegionInfo hri=location.getRegionInfo();
    final ServerName server=location.getServerName();
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preMove(ObserverContextImpl.createAndPrepare(CP_ENV),hri,server,server);
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testAssign() throws Exception {
    List<HRegionLocation> regions;
    try (RegionLocator locator=systemUserConnection.getRegionLocator(TEST_TABLE)){
      regions=locator.getAllRegionLocations();
    }
     HRegionLocation location=regions.get(0);
    final HRegionInfo hri=location.getRegionInfo();
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preAssign(ObserverContextImpl.createAndPrepare(CP_ENV),hri);
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testUnassign() throws Exception {
    List<HRegionLocation> regions;
    try (RegionLocator locator=systemUserConnection.getRegionLocator(TEST_TABLE)){
      regions=locator.getAllRegionLocations();
    }
     HRegionLocation location=regions.get(0);
    final HRegionInfo hri=location.getRegionInfo();
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preUnassign(ObserverContextImpl.createAndPrepare(CP_ENV),hri,false);
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testRegionOffline() throws Exception {
    List<HRegionLocation> regions;
    try (RegionLocator locator=systemUserConnection.getRegionLocator(TEST_TABLE)){
      regions=locator.getAllRegionLocations();
    }
     HRegionLocation location=regions.get(0);
    final HRegionInfo hri=location.getRegionInfo();
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preRegionOffline(ObserverContextImpl.createAndPrepare(CP_ENV),hri);
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testSetSplitOrMergeEnabled() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preSetSplitOrMergeEnabled(ObserverContextImpl.createAndPrepare(CP_ENV),true,MasterSwitchType.MERGE);
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testBalance() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preBalance(ObserverContextImpl.createAndPrepare(CP_ENV));
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testBalanceSwitch() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preBalanceSwitch(ObserverContextImpl.createAndPrepare(CP_ENV),true);
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testShutdown() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preShutdown(ObserverContextImpl.createAndPrepare(CP_ENV));
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testStopMaster() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preStopMaster(ObserverContextImpl.createAndPrepare(CP_ENV));
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  private void verifyWrite(  AccessTestAction action) throws Exception {
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_OWNER,USER_CREATE,USER_RW,USER_GROUP_WRITE);
    verifyDenied(action,USER_NONE,USER_RO,USER_GROUP_ADMIN,USER_GROUP_READ,USER_GROUP_CREATE);
  }
  @Test public void testSplitWithSplitRow() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    createTestTable(tableName);
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preSplitRegion(ObserverContextImpl.createAndPrepare(CP_ENV),tableName,TEST_ROW);
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testFlush() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preFlush(ObserverContextImpl.createAndPrepare(RCP_ENV),FlushLifeCycleTracker.DUMMY);
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_OWNER,USER_CREATE,USER_GROUP_CREATE,USER_GROUP_ADMIN);
    verifyDenied(action,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE);
  }
  @Test public void testCompact() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preCompact(ObserverContextImpl.createAndPrepare(RCP_ENV),null,null,ScanType.COMPACT_RETAIN_DELETES,null,null);
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_OWNER,USER_CREATE,USER_GROUP_CREATE,USER_GROUP_ADMIN);
    verifyDenied(action,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE);
  }
  private void verifyRead(  AccessTestAction action) throws Exception {
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_OWNER,USER_CREATE,USER_RW,USER_RO,USER_GROUP_READ);
    verifyDenied(action,USER_NONE,USER_GROUP_CREATE,USER_GROUP_ADMIN,USER_GROUP_WRITE);
  }
  private void verifyReadWrite(  AccessTestAction action) throws Exception {
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_OWNER,USER_CREATE,USER_RW);
    verifyDenied(action,USER_NONE,USER_RO,USER_GROUP_ADMIN,USER_GROUP_CREATE,USER_GROUP_READ,USER_GROUP_WRITE);
  }
  @Test public void testRead() throws Exception {
    AccessTestAction getAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        Get g=new Get(TEST_ROW);
        g.addFamily(TEST_FAMILY);
        try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
          t.get(g);
        }
         return null;
      }
    }
;
    verifyRead(getAction);
    AccessTestAction scanAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        Scan s=new Scan();
        s.addFamily(TEST_FAMILY);
        try (Connection conn=ConnectionFactory.createConnection(conf);Table table=conn.getTable(TEST_TABLE)){
          ResultScanner scanner=table.getScanner(s);
          try {
            for (Result r=scanner.next(); r != null; r=scanner.next()) {
            }
          }
  finally {
            scanner.close();
          }
        }
         return null;
      }
    }
;
    verifyRead(scanAction);
  }
  @Test public void testWrite() throws Exception {
    AccessTestAction putAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        Put p=new Put(TEST_ROW);
        p.addColumn(TEST_FAMILY,TEST_QUALIFIER,Bytes.toBytes(1));
        try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
          t.put(p);
        }
         return null;
      }
    }
;
    verifyWrite(putAction);
    AccessTestAction deleteAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        Delete d=new Delete(TEST_ROW);
        d.addFamily(TEST_FAMILY);
        try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
          t.delete(d);
        }
         return null;
      }
    }
;
    verifyWrite(deleteAction);
    AccessTestAction incrementAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        Increment inc=new Increment(TEST_ROW);
        inc.addColumn(TEST_FAMILY,TEST_QUALIFIER,1);
        try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
          t.increment(inc);
        }
         return null;
      }
    }
;
    verifyWrite(incrementAction);
  }
  @Test public void testReadWrite() throws Exception {
    AccessTestAction checkAndDeleteAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        Delete d=new Delete(TEST_ROW);
        d.addFamily(TEST_FAMILY);
        try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
          t.checkAndMutate(TEST_ROW,TEST_FAMILY).qualifier(TEST_QUALIFIER).ifEquals(Bytes.toBytes("test_value")).thenDelete(d);
        }
         return null;
      }
    }
;
    verifyReadWrite(checkAndDeleteAction);
    AccessTestAction checkAndPut=new AccessTestAction(){
      @Override public Object run() throws Exception {
        Put p=new Put(TEST_ROW);
        p.addColumn(TEST_FAMILY,TEST_QUALIFIER,Bytes.toBytes(1));
        try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
          t.checkAndMutate(TEST_ROW,TEST_FAMILY).qualifier(TEST_QUALIFIER).ifEquals(Bytes.toBytes("test_value")).thenPut(p);
        }
         return null;
      }
    }
;
    verifyReadWrite(checkAndPut);
  }
  @Test public void testBulkLoad() throws Exception {
    try {
      FileSystem fs=TEST_UTIL.getTestFileSystem();
      final Path dir=TEST_UTIL.getDataTestDirOnTestFS("testBulkLoad");
      fs.mkdirs(dir);
      fs.setPermission(dir,FS_PERMISSION_ALL);
      AccessTestAction bulkLoadAction=new AccessTestAction(){
        @Override public Object run() throws Exception {
          int numRows=3;
          byte[][][] hfileRanges={{{(byte)0},{(byte)9}}};
          Path bulkLoadBasePath=new Path(dir,new Path(User.getCurrent().getName()));
          new BulkLoadHelper(bulkLoadBasePath).initHFileData(TEST_FAMILY,TEST_QUALIFIER,hfileRanges,numRows,FS_PERMISSION_ALL).bulkLoadHFile(TEST_TABLE);
          return null;
        }
      }
;
      verifyAllowed(bulkLoadAction,SUPERUSER,USER_ADMIN,USER_OWNER,USER_CREATE,USER_GROUP_CREATE);
      verifyDenied(bulkLoadAction,USER_RW,USER_NONE,USER_RO,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_ADMIN);
    }
  finally {
      TEST_UTIL.getAdmin().disableTable(TEST_TABLE);
      TEST_UTIL.getAdmin().enableTable(TEST_TABLE);
    }
  }
private class BulkLoadAccessTestAction implements AccessTestAction {
    private FsPermission filePermission;
    private Path testDataDir;
    public BulkLoadAccessTestAction(    FsPermission perm,    Path testDataDir){
      this.filePermission=perm;
      this.testDataDir=testDataDir;
    }
    @Override public Object run() throws Exception {
      FileSystem fs=TEST_UTIL.getTestFileSystem();
      fs.mkdirs(testDataDir);
      fs.setPermission(testDataDir,FS_PERMISSION_ALL);
      byte[][][] hfileRanges={{{(byte)0},{(byte)9}}};
      Path bulkLoadBasePath=new Path(testDataDir,new Path(User.getCurrent().getName()));
      new BulkLoadHelper(bulkLoadBasePath).initHFileData(TEST_FAMILY,TEST_QUALIFIER,hfileRanges,3,filePermission).bulkLoadHFile(TEST_TABLE);
      return null;
    }
  }
  @Test public void testBulkLoadWithoutWritePermission() throws Exception {
    Path testDataDir0=TEST_UTIL.getDataTestDirOnTestFS("testBulkLoadWithoutWritePermission0");
    Path testDataDir1=TEST_UTIL.getDataTestDirOnTestFS("testBulkLoadWithoutWritePermission1");
    AccessTestAction bulkLoadAction1=new BulkLoadAccessTestAction(FsPermission.valueOf("-r-xr-xr-x"),testDataDir0);
    AccessTestAction bulkLoadAction2=new BulkLoadAccessTestAction(FS_PERMISSION_ALL,testDataDir1);
    BulkLoadHelper.setPermission(TEST_UTIL.getTestFileSystem(),TEST_UTIL.getTestFileSystem().getWorkingDirectory(),FS_PERMISSION_ALL);
    try {
      USER_CREATE.runAs(bulkLoadAction1);
      fail("Should fail because the hbase user has no write permission on hfiles.");
    }
 catch (    IOException e) {
    }
    USER_CREATE.runAs(bulkLoadAction2);
  }
public static class BulkLoadHelper {
    private final FileSystem fs;
    private final Path loadPath;
    private final Configuration conf;
    public BulkLoadHelper(    Path loadPath) throws IOException {
      fs=TEST_UTIL.getTestFileSystem();
      conf=TEST_UTIL.getConfiguration();
      loadPath=loadPath.makeQualified(fs);
      this.loadPath=loadPath;
    }
    private void createHFile(    Path path,    byte[] family,    byte[] qualifier,    byte[] startKey,    byte[] endKey,    int numRows) throws IOException {
      HFile.Writer writer=null;
      long now=System.currentTimeMillis();
      try {
        HFileContext context=new HFileContextBuilder().build();
        writer=HFile.getWriterFactory(conf,new CacheConfig(conf)).withPath(fs,path).withFileContext(context).create();
        for (        byte[] key : Bytes.iterateOnSplits(startKey,endKey,true,numRows - 2)) {
          KeyValue kv=new KeyValue(key,family,qualifier,now,key);
          writer.append(kv);
        }
      }
  finally {
        if (writer != null) {
          writer.close();
        }
      }
    }
    private BulkLoadHelper initHFileData(    byte[] family,    byte[] qualifier,    byte[][][] hfileRanges,    int numRowsPerRange,    FsPermission filePermission) throws Exception {
      Path familyDir=new Path(loadPath,Bytes.toString(family));
      fs.mkdirs(familyDir);
      int hfileIdx=0;
      List<Path> hfiles=new ArrayList<>();
      for (      byte[][] range : hfileRanges) {
        byte[] from=range[0];
        byte[] to=range[1];
        Path hfile=new Path(familyDir,"hfile_" + (hfileIdx++));
        hfiles.add(hfile);
        createHFile(hfile,family,qualifier,from,to,numRowsPerRange);
      }
      setPermission(fs,loadPath,FS_PERMISSION_ALL);
      for (      Path hfile : hfiles) {
        setPermission(fs,hfile,filePermission);
      }
      return this;
    }
    private void bulkLoadHFile(    TableName tableName) throws Exception {
      try (Connection conn=ConnectionFactory.createConnection(conf);Admin admin=conn.getAdmin();RegionLocator locator=conn.getRegionLocator(tableName);Table table=conn.getTable(tableName)){
        TEST_UTIL.waitUntilAllRegionsAssigned(tableName);
        LoadIncrementalHFiles loader=new LoadIncrementalHFiles(conf);
        loader.doBulkLoad(loadPath,admin,table,locator);
      }
     }
    private static void setPermission(    FileSystem fs,    Path dir,    FsPermission perm) throws IOException {
      if (!fs.getFileStatus(dir).isDirectory()) {
        fs.setPermission(dir,perm);
      }
 else {
        for (        FileStatus el : fs.listStatus(dir)) {
          fs.setPermission(el.getPath(),perm);
          setPermission(fs,el.getPath(),perm);
        }
      }
    }
  }
  @Test public void testAppend() throws Exception {
    AccessTestAction appendAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        byte[] row=TEST_ROW;
        byte[] qualifier=TEST_QUALIFIER;
        Put put=new Put(row);
        put.addColumn(TEST_FAMILY,qualifier,Bytes.toBytes(1));
        Append append=new Append(row);
        append.addColumn(TEST_FAMILY,qualifier,Bytes.toBytes(2));
        try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
          t.put(put);
          t.append(append);
        }
         return null;
      }
    }
;
    verifyAllowed(appendAction,SUPERUSER,USER_ADMIN,USER_OWNER,USER_CREATE,USER_RW,USER_GROUP_WRITE);
    verifyDenied(appendAction,USER_RO,USER_NONE,USER_GROUP_CREATE,USER_GROUP_READ,USER_GROUP_ADMIN);
  }
  @Test public void testGrantRevoke() throws Exception {
    AccessTestAction grantAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf);Table acl=conn.getTable(AccessControlLists.ACL_TABLE_NAME)){
          BlockingRpcChannel service=acl.coprocessorService(TEST_TABLE.getName());
          AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
          AccessControlUtil.grant(null,protocol,USER_RO.getShortName(),TEST_TABLE,TEST_FAMILY,null,false,Action.READ);
        }
         return null;
      }
    }
;
    AccessTestAction revokeAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf);Table acl=conn.getTable(AccessControlLists.ACL_TABLE_NAME)){
          BlockingRpcChannel service=acl.coprocessorService(TEST_TABLE.getName());
          AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
          AccessControlUtil.revoke(null,protocol,USER_RO.getShortName(),TEST_TABLE,TEST_FAMILY,null,Action.READ);
        }
         return null;
      }
    }
;
    AccessTestAction getTablePermissionsAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf);Table acl=conn.getTable(AccessControlLists.ACL_TABLE_NAME)){
          BlockingRpcChannel service=acl.coprocessorService(TEST_TABLE.getName());
          AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
          AccessControlUtil.getUserPermissions(null,protocol,TEST_TABLE);
        }
         return null;
      }
    }
;
    AccessTestAction getGlobalPermissionsAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf);Table acl=conn.getTable(AccessControlLists.ACL_TABLE_NAME)){
          BlockingRpcChannel service=acl.coprocessorService(HConstants.EMPTY_START_ROW);
          AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
          AccessControlUtil.getUserPermissions(null,protocol);
        }
         return null;
      }
    }
;
    verifyAllowed(grantAction,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
    verifyDenied(grantAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
    try {
      verifyAllowed(revokeAction,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
      verifyDenied(revokeAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
      verifyAllowed(getTablePermissionsAction,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
      verifyDenied(getTablePermissionsAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
      verifyAllowed(getGlobalPermissionsAction,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
      verifyDenied(getGlobalPermissionsAction,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
    }
  finally {
      grantOnTable(TEST_UTIL,USER_RO.getShortName(),TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ);
    }
  }
  @Test public void testPostGrantRevoke() throws Exception {
    final TableName tableName=TableName.valueOf("TempTable");
    final byte[] family1=Bytes.toBytes("f1");
    final byte[] family2=Bytes.toBytes("f2");
    final byte[] qualifier=Bytes.toBytes("q");
    Admin admin=TEST_UTIL.getAdmin();
    if (admin.tableExists(tableName)) {
      deleteTable(TEST_UTIL,tableName);
    }
    HTableDescriptor htd=new HTableDescriptor(tableName);
    htd.addFamily(new HColumnDescriptor(family1));
    htd.addFamily(new HColumnDescriptor(family2));
    createTable(TEST_UTIL,htd);
    try {
      User tblUser=User.createUserForTesting(TEST_UTIL.getConfiguration(),"tbluser",new String[0]);
      User gblUser=User.createUserForTesting(TEST_UTIL.getConfiguration(),"gbluser",new String[0]);
      AccessTestAction putActionAll=new AccessTestAction(){
        @Override public Object run() throws Exception {
          Put p=new Put(Bytes.toBytes("a"));
          p.addColumn(family1,qualifier,Bytes.toBytes("v1"));
          p.addColumn(family2,qualifier,Bytes.toBytes("v2"));
          try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(tableName)){
            t.put(p);
          }
           return null;
        }
      }
;
      AccessTestAction putAction1=new AccessTestAction(){
        @Override public Object run() throws Exception {
          Put p=new Put(Bytes.toBytes("a"));
          p.addColumn(family1,qualifier,Bytes.toBytes("v1"));
          try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(tableName)){
            t.put(p);
          }
           return null;
        }
      }
;
      AccessTestAction putAction2=new AccessTestAction(){
        @Override public Object run() throws Exception {
          Put p=new Put(Bytes.toBytes("a"));
          p.addColumn(family2,qualifier,Bytes.toBytes("v2"));
          try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(tableName)){
            t.put(p);
          }
           return null;
        }
      }
;
      AccessTestAction getActionAll=new AccessTestAction(){
        @Override public Object run() throws Exception {
          Get g=new Get(TEST_ROW);
          g.addFamily(family1);
          g.addFamily(family2);
          try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(tableName)){
            t.get(g);
          }
           return null;
        }
      }
;
      AccessTestAction getAction1=new AccessTestAction(){
        @Override public Object run() throws Exception {
          Get g=new Get(TEST_ROW);
          g.addFamily(family1);
          try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(tableName)){
            t.get(g);
          }
           return null;
        }
      }
;
      AccessTestAction getAction2=new AccessTestAction(){
        @Override public Object run() throws Exception {
          Get g=new Get(TEST_ROW);
          g.addFamily(family2);
          try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(tableName)){
            t.get(g);
          }
           return null;
        }
      }
;
      AccessTestAction deleteActionAll=new AccessTestAction(){
        @Override public Object run() throws Exception {
          Delete d=new Delete(TEST_ROW);
          d.addFamily(family1);
          d.addFamily(family2);
          try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(tableName)){
            t.delete(d);
          }
           return null;
        }
      }
;
      AccessTestAction deleteAction1=new AccessTestAction(){
        @Override public Object run() throws Exception {
          Delete d=new Delete(TEST_ROW);
          d.addFamily(family1);
          try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(tableName)){
            t.delete(d);
          }
           return null;
        }
      }
;
      AccessTestAction deleteAction2=new AccessTestAction(){
        @Override public Object run() throws Exception {
          Delete d=new Delete(TEST_ROW);
          d.addFamily(family2);
          try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(tableName)){
            t.delete(d);
          }
           return null;
        }
      }
;
      verifyDenied(tblUser,getActionAll,getAction1,getAction2);
      verifyDenied(tblUser,putActionAll,putAction1,putAction2);
      verifyDenied(tblUser,deleteActionAll,deleteAction1,deleteAction2);
      verifyDenied(gblUser,getActionAll,getAction1,getAction2);
      verifyDenied(gblUser,putActionAll,putAction1,putAction2);
      verifyDenied(gblUser,deleteActionAll,deleteAction1,deleteAction2);
      grantGlobal(TEST_UTIL,gblUser.getShortName(),Permission.Action.READ);
      grantOnTable(TEST_UTIL,tblUser.getShortName(),tableName,null,null,Permission.Action.READ);
      verifyAllowed(tblUser,getActionAll,getAction1,getAction2);
      verifyDenied(tblUser,putActionAll,putAction1,putAction2);
      verifyDenied(tblUser,deleteActionAll,deleteAction1,deleteAction2);
      verifyAllowed(gblUser,getActionAll,getAction1,getAction2);
      verifyDenied(gblUser,putActionAll,putAction1,putAction2);
      verifyDenied(gblUser,deleteActionAll,deleteAction1,deleteAction2);
      grantGlobal(TEST_UTIL,gblUser.getShortName(),Permission.Action.WRITE);
      grantOnTable(TEST_UTIL,tblUser.getShortName(),tableName,null,null,Permission.Action.WRITE);
      verifyDenied(tblUser,getActionAll,getAction1,getAction2);
      verifyAllowed(tblUser,putActionAll,putAction1,putAction2);
      verifyAllowed(tblUser,deleteActionAll,deleteAction1,deleteAction2);
      verifyDenied(gblUser,getActionAll,getAction1,getAction2);
      verifyAllowed(gblUser,putActionAll,putAction1,putAction2);
      verifyAllowed(gblUser,deleteActionAll,deleteAction1,deleteAction2);
      revokeGlobal(TEST_UTIL,gblUser.getShortName());
      revokeFromTable(TEST_UTIL,tblUser.getShortName(),tableName,null,null);
      verifyDenied(tblUser,getActionAll,getAction1,getAction2);
      verifyDenied(tblUser,putActionAll,putAction1,putAction2);
      verifyDenied(tblUser,deleteActionAll,deleteAction1,deleteAction2);
      verifyDenied(gblUser,getActionAll,getAction1,getAction2);
      verifyDenied(gblUser,putActionAll,putAction1,putAction2);
      verifyDenied(gblUser,deleteActionAll,deleteAction1,deleteAction2);
      grantGlobal(TEST_UTIL,gblUser.getShortName(),Permission.Action.READ);
      grantOnTable(TEST_UTIL,tblUser.getShortName(),tableName,family1,null,Permission.Action.READ);
      verifyAllowed(tblUser,getActionAll,getAction1);
      verifyDenied(tblUser,getAction2);
      verifyDenied(tblUser,putActionAll,putAction1,putAction2);
      verifyDenied(tblUser,deleteActionAll,deleteAction1,deleteAction2);
      verifyAllowed(gblUser,getActionAll,getAction1,getAction2);
      verifyDenied(gblUser,putActionAll,putAction1,putAction2);
      verifyDenied(gblUser,deleteActionAll,deleteAction1,deleteAction2);
      grantGlobal(TEST_UTIL,gblUser.getShortName(),Permission.Action.WRITE);
      grantOnTable(TEST_UTIL,tblUser.getShortName(),tableName,family2,null,Permission.Action.WRITE);
      verifyAllowed(tblUser,getActionAll,getAction1);
      verifyAllowed(tblUser,putAction2,deleteAction2);
      verifyDenied(tblUser,getAction2);
      verifyDenied(tblUser,putActionAll,putAction1);
      verifyDenied(tblUser,deleteActionAll,deleteAction1);
      verifyDenied(gblUser,getActionAll,getAction1,getAction2);
      verifyAllowed(gblUser,putActionAll,putAction1,putAction2);
      verifyAllowed(gblUser,deleteActionAll,deleteAction1,deleteAction2);
      revokeGlobal(TEST_UTIL,gblUser.getShortName());
      revokeFromTable(TEST_UTIL,tblUser.getShortName(),tableName,family2,null);
      verifyAllowed(tblUser,getActionAll,getAction1);
      verifyDenied(tblUser,getAction2);
      verifyDenied(tblUser,putActionAll,putAction1,putAction2);
      verifyDenied(tblUser,deleteActionAll,deleteAction1,deleteAction2);
      verifyDenied(gblUser,getActionAll,getAction1,getAction2);
      verifyDenied(gblUser,putActionAll,putAction1,putAction2);
      verifyDenied(gblUser,deleteActionAll,deleteAction1,deleteAction2);
    }
  finally {
      deleteTable(TEST_UTIL,tableName);
    }
  }
  private boolean hasFoundUserPermission(  List<UserPermission> userPermissions,  List<UserPermission> perms){
    return perms.containsAll(userPermissions);
  }
  private boolean hasFoundUserPermission(  UserPermission userPermission,  List<UserPermission> perms){
    return perms.contains(userPermission);
  }
  @Test public void testPostGrantRevokeAtQualifierLevel() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final byte[] family1=Bytes.toBytes("f1");
    final byte[] family2=Bytes.toBytes("f2");
    final byte[] qualifier=Bytes.toBytes("q");
    Admin admin=TEST_UTIL.getAdmin();
    if (admin.tableExists(tableName)) {
      deleteTable(TEST_UTIL,tableName);
    }
    HTableDescriptor htd=new HTableDescriptor(tableName);
    htd.addFamily(new HColumnDescriptor(family1));
    htd.addFamily(new HColumnDescriptor(family2));
    createTable(TEST_UTIL,htd);
    try {
      User user=User.createUserForTesting(TEST_UTIL.getConfiguration(),"user",new String[0]);
      AccessTestAction getQualifierAction=new AccessTestAction(){
        @Override public Object run() throws Exception {
          Get g=new Get(TEST_ROW);
          g.addColumn(family1,qualifier);
          try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(tableName)){
            t.get(g);
          }
           return null;
        }
      }
;
      AccessTestAction putQualifierAction=new AccessTestAction(){
        @Override public Object run() throws Exception {
          Put p=new Put(TEST_ROW);
          p.addColumn(family1,qualifier,Bytes.toBytes("v1"));
          try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(tableName)){
            t.put(p);
          }
           return null;
        }
      }
;
      AccessTestAction deleteQualifierAction=new AccessTestAction(){
        @Override public Object run() throws Exception {
          Delete d=new Delete(TEST_ROW);
          d.addColumn(family1,qualifier);
          try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(tableName)){
            t.delete(d);
          }
           return null;
        }
      }
;
      revokeFromTable(TEST_UTIL,user.getShortName(),tableName,family1,null);
      verifyDenied(user,getQualifierAction);
      verifyDenied(user,putQualifierAction);
      verifyDenied(user,deleteQualifierAction);
      grantOnTable(TEST_UTIL,user.getShortName(),tableName,family1,qualifier,Permission.Action.READ);
      verifyAllowed(user,getQualifierAction);
      verifyDenied(user,putQualifierAction);
      verifyDenied(user,deleteQualifierAction);
      grantOnTable(TEST_UTIL,user.getShortName(),tableName,family1,qualifier,Permission.Action.WRITE);
      verifyDenied(user,getQualifierAction);
      verifyAllowed(user,putQualifierAction);
      verifyAllowed(user,deleteQualifierAction);
      grantOnTable(TEST_UTIL,user.getShortName(),tableName,family1,qualifier,Permission.Action.READ,Permission.Action.WRITE);
      verifyAllowed(user,getQualifierAction);
      verifyAllowed(user,putQualifierAction);
      verifyAllowed(user,deleteQualifierAction);
      revokeFromTable(TEST_UTIL,user.getShortName(),tableName,family1,qualifier);
      verifyDenied(user,getQualifierAction);
      verifyDenied(user,putQualifierAction);
      verifyDenied(user,deleteQualifierAction);
    }
  finally {
      deleteTable(TEST_UTIL,tableName);
    }
  }
  @Test public void testPermissionList() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    final byte[] family1=Bytes.toBytes("f1");
    final byte[] family2=Bytes.toBytes("f2");
    final byte[] qualifier=Bytes.toBytes("q");
    Admin admin=TEST_UTIL.getAdmin();
    if (admin.tableExists(tableName)) {
      deleteTable(TEST_UTIL,tableName);
    }
    HTableDescriptor htd=new HTableDescriptor(tableName);
    htd.addFamily(new HColumnDescriptor(family1));
    htd.addFamily(new HColumnDescriptor(family2));
    htd.setOwner(USER_OWNER);
    createTable(TEST_UTIL,htd);
    try {
      List<UserPermission> perms;
      Table acl=systemUserConnection.getTable(AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(tableName.getName());
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        perms=AccessControlUtil.getUserPermissions(null,protocol,tableName);
      }
  finally {
        acl.close();
      }
      UserPermission ownerperm=new UserPermission(Bytes.toBytes(USER_OWNER.getName()),tableName,null,Action.values());
      assertTrue("Owner should have all permissions on table",hasFoundUserPermission(ownerperm,perms));
      User user=User.createUserForTesting(TEST_UTIL.getConfiguration(),"user",new String[0]);
      byte[] userName=Bytes.toBytes(user.getShortName());
      UserPermission up=new UserPermission(userName,tableName,family1,qualifier,Permission.Action.READ);
      assertFalse("User should not be granted permission: " + up.toString(),hasFoundUserPermission(up,perms));
      grantOnTable(TEST_UTIL,user.getShortName(),tableName,family1,qualifier,Permission.Action.READ);
      acl=systemUserConnection.getTable(AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(tableName.getName());
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        perms=AccessControlUtil.getUserPermissions(null,protocol,tableName);
      }
  finally {
        acl.close();
      }
      UserPermission upToVerify=new UserPermission(userName,tableName,family1,qualifier,Permission.Action.READ);
      assertTrue("User should be granted permission: " + upToVerify.toString(),hasFoundUserPermission(upToVerify,perms));
      upToVerify=new UserPermission(userName,tableName,family1,qualifier,Permission.Action.WRITE);
      assertFalse("User should not be granted permission: " + upToVerify.toString(),hasFoundUserPermission(upToVerify,perms));
      grantOnTable(TEST_UTIL,user.getShortName(),tableName,family1,qualifier,Permission.Action.WRITE,Permission.Action.READ);
      acl=systemUserConnection.getTable(AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(tableName.getName());
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        perms=AccessControlUtil.getUserPermissions(null,protocol,tableName);
      }
  finally {
        acl.close();
      }
      upToVerify=new UserPermission(userName,tableName,family1,qualifier,Permission.Action.WRITE,Permission.Action.READ);
      assertTrue("User should be granted permission: " + upToVerify.toString(),hasFoundUserPermission(upToVerify,perms));
      revokeFromTable(TEST_UTIL,user.getShortName(),tableName,family1,qualifier,Permission.Action.WRITE,Permission.Action.READ);
      acl=systemUserConnection.getTable(AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(tableName.getName());
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        perms=AccessControlUtil.getUserPermissions(null,protocol,tableName);
      }
  finally {
        acl.close();
      }
      assertFalse("User should not be granted permission: " + upToVerify.toString(),hasFoundUserPermission(upToVerify,perms));
      admin.disableTable(tableName);
      User newOwner=User.createUserForTesting(conf,"new_owner",new String[]{});
      htd.setOwner(newOwner);
      admin.modifyTable(tableName,htd);
      acl=systemUserConnection.getTable(AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel service=acl.coprocessorService(tableName.getName());
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
        perms=AccessControlUtil.getUserPermissions(null,protocol,tableName);
      }
  finally {
        acl.close();
      }
      UserPermission newOwnerperm=new UserPermission(Bytes.toBytes(newOwner.getName()),tableName,null,Action.values());
      assertTrue("New owner should have all permissions on table",hasFoundUserPermission(newOwnerperm,perms));
    }
  finally {
      deleteTable(TEST_UTIL,tableName);
    }
  }
  @Test public void testGlobalPermissionList() throws Exception {
    List<UserPermission> perms;
    Table acl=systemUserConnection.getTable(AccessControlLists.ACL_TABLE_NAME);
    try {
      BlockingRpcChannel service=acl.coprocessorService(HConstants.EMPTY_START_ROW);
      AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(service);
      perms=AccessControlUtil.getUserPermissions(null,protocol);
    }
  finally {
      acl.close();
    }
    Collection<String> superUsers=Superusers.getSuperUsers();
    List<UserPermission> adminPerms=new ArrayList<>(superUsers.size() + 1);
    adminPerms.add(new UserPermission(Bytes.toBytes(USER_ADMIN.getShortName()),AccessControlLists.ACL_TABLE_NAME,null,null,Bytes.toBytes("ACRW")));
    for (    String user : superUsers) {
      adminPerms.add(new UserPermission(Bytes.toBytes(user),AccessControlLists.ACL_TABLE_NAME,null,null,Action.values()));
    }
    assertTrue("Only super users, global users and user admin has permission on table hbase:acl " + "per setup",perms.size() == 5 + superUsers.size() && hasFoundUserPermission(adminPerms,perms));
  }
  /** 
 * global operations 
 */
  private void verifyGlobal(  AccessTestAction action) throws Exception {
    verifyAllowed(action,SUPERUSER);
    verifyDenied(action,USER_CREATE,USER_RW,USER_NONE,USER_RO);
  }
  @Test public void testCheckPermissions() throws Exception {
    AccessTestAction globalAdmin=new AccessTestAction(){
      @Override public Void run() throws Exception {
        checkGlobalPerms(TEST_UTIL,Permission.Action.ADMIN);
        return null;
      }
    }
;
    verifyGlobal(globalAdmin);
    AccessTestAction globalReadWrite=new AccessTestAction(){
      @Override public Void run() throws Exception {
        checkGlobalPerms(TEST_UTIL,Permission.Action.READ,Permission.Action.WRITE);
        return null;
      }
    }
;
    verifyGlobal(globalReadWrite);
    final byte[] TEST_Q1=Bytes.toBytes("q1");
    final byte[] TEST_Q2=Bytes.toBytes("q2");
    User userTable=User.createUserForTesting(conf,"user_check_perms_table",new String[0]);
    User userColumn=User.createUserForTesting(conf,"user_check_perms_family",new String[0]);
    User userQualifier=User.createUserForTesting(conf,"user_check_perms_q",new String[0]);
    grantOnTable(TEST_UTIL,userTable.getShortName(),TEST_TABLE,null,null,Permission.Action.READ);
    grantOnTable(TEST_UTIL,userColumn.getShortName(),TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ);
    grantOnTable(TEST_UTIL,userQualifier.getShortName(),TEST_TABLE,TEST_FAMILY,TEST_Q1,Permission.Action.READ);
    try {
      AccessTestAction tableRead=new AccessTestAction(){
        @Override public Void run() throws Exception {
          checkTablePerms(TEST_UTIL,TEST_TABLE,null,null,Permission.Action.READ);
          return null;
        }
      }
;
      AccessTestAction columnRead=new AccessTestAction(){
        @Override public Void run() throws Exception {
          checkTablePerms(TEST_UTIL,TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ);
          return null;
        }
      }
;
      AccessTestAction qualifierRead=new AccessTestAction(){
        @Override public Void run() throws Exception {
          checkTablePerms(TEST_UTIL,TEST_TABLE,TEST_FAMILY,TEST_Q1,Permission.Action.READ);
          return null;
        }
      }
;
      AccessTestAction multiQualifierRead=new AccessTestAction(){
        @Override public Void run() throws Exception {
          checkTablePerms(TEST_UTIL,TEST_TABLE,new Permission[]{new TablePermission(TEST_TABLE,TEST_FAMILY,TEST_Q1,Permission.Action.READ),new TablePermission(TEST_TABLE,TEST_FAMILY,TEST_Q2,Permission.Action.READ)});
          return null;
        }
      }
;
      AccessTestAction globalAndTableRead=new AccessTestAction(){
        @Override public Void run() throws Exception {
          checkTablePerms(TEST_UTIL,TEST_TABLE,new Permission[]{new Permission(Permission.Action.READ),new TablePermission(TEST_TABLE,null,(byte[])null,Permission.Action.READ)});
          return null;
        }
      }
;
      AccessTestAction noCheck=new AccessTestAction(){
        @Override public Void run() throws Exception {
          checkTablePerms(TEST_UTIL,TEST_TABLE,new Permission[0]);
          return null;
        }
      }
;
      verifyAllowed(tableRead,SUPERUSER,userTable);
      verifyDenied(tableRead,userColumn,userQualifier);
      verifyAllowed(columnRead,SUPERUSER,userTable,userColumn);
      verifyDenied(columnRead,userQualifier);
      verifyAllowed(qualifierRead,SUPERUSER,userTable,userColumn,userQualifier);
      verifyAllowed(multiQualifierRead,SUPERUSER,userTable,userColumn);
      verifyDenied(multiQualifierRead,userQualifier);
      verifyAllowed(globalAndTableRead,SUPERUSER);
      verifyDenied(globalAndTableRead,userTable,userColumn,userQualifier);
      verifyAllowed(noCheck,SUPERUSER,userTable,userColumn,userQualifier);
      AccessTestAction familyReadWrite=new AccessTestAction(){
        @Override public Void run() throws Exception {
          checkTablePerms(TEST_UTIL,TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ,Permission.Action.WRITE);
          return null;
        }
      }
;
      verifyAllowed(familyReadWrite,SUPERUSER,USER_OWNER,USER_CREATE,USER_RW);
      verifyDenied(familyReadWrite,USER_NONE,USER_RO);
      CheckPermissionsRequest checkRequest=CheckPermissionsRequest.newBuilder().addPermission(AccessControlProtos.Permission.newBuilder().setType(AccessControlProtos.Permission.Type.Table).setTablePermission(AccessControlProtos.TablePermission.newBuilder().setTableName(ProtobufUtil.toProtoTableName(TEST_TABLE)).addAction(AccessControlProtos.Permission.Action.CREATE))).build();
      Table acl=systemUserConnection.getTable(AccessControlLists.ACL_TABLE_NAME);
      try {
        BlockingRpcChannel channel=acl.coprocessorService(new byte[0]);
        AccessControlService.BlockingInterface protocol=AccessControlService.newBlockingStub(channel);
        try {
          protocol.checkPermissions(null,checkRequest);
          fail("this should have thrown CoprocessorException");
        }
 catch (        ServiceException ex) {
        }
      }
  finally {
        acl.close();
      }
    }
  finally {
      revokeFromTable(TEST_UTIL,userTable.getShortName(),TEST_TABLE,null,null,Permission.Action.READ);
      revokeFromTable(TEST_UTIL,userColumn.getShortName(),TEST_TABLE,TEST_FAMILY,null,Permission.Action.READ);
      revokeFromTable(TEST_UTIL,userQualifier.getShortName(),TEST_TABLE,TEST_FAMILY,TEST_Q1,Permission.Action.READ);
    }
  }
  @Test public void testStopRegionServer() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preStopRegionServer(ObserverContextImpl.createAndPrepare(RSCP_ENV));
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testRollWALWriterRequest() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preRollWALWriterRequest(ObserverContextImpl.createAndPrepare(RSCP_ENV));
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testOpenRegion() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preOpen(ObserverContextImpl.createAndPrepare(RCP_ENV));
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER,USER_GROUP_CREATE,USER_GROUP_READ,USER_GROUP_WRITE);
  }
  @Test public void testCloseRegion() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preClose(ObserverContextImpl.createAndPrepare(RCP_ENV),false);
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER,USER_GROUP_CREATE,USER_GROUP_READ,USER_GROUP_WRITE);
  }
  @Test public void testSnapshot() throws Exception {
    Admin admin=TEST_UTIL.getAdmin();
    final HTableDescriptor htd=admin.getTableDescriptor(TEST_TABLE);
    final SnapshotDescription snapshot=new SnapshotDescription(TEST_TABLE.getNameAsString() + "-snapshot",TEST_TABLE);
    AccessTestAction snapshotAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preSnapshot(ObserverContextImpl.createAndPrepare(CP_ENV),snapshot,htd);
        return null;
      }
    }
;
    AccessTestAction deleteAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preDeleteSnapshot(ObserverContextImpl.createAndPrepare(CP_ENV),snapshot);
        return null;
      }
    }
;
    AccessTestAction restoreAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preRestoreSnapshot(ObserverContextImpl.createAndPrepare(CP_ENV),snapshot,htd);
        return null;
      }
    }
;
    AccessTestAction cloneAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preCloneSnapshot(ObserverContextImpl.createAndPrepare(CP_ENV),snapshot,null);
        return null;
      }
    }
;
    verifyAllowed(snapshotAction,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
    verifyDenied(snapshotAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
    verifyAllowed(cloneAction,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(deleteAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
    verifyAllowed(restoreAction,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(restoreAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
    verifyAllowed(deleteAction,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(cloneAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testSnapshotWithOwner() throws Exception {
    Admin admin=TEST_UTIL.getAdmin();
    final HTableDescriptor htd=admin.getTableDescriptor(TEST_TABLE);
    final SnapshotDescription snapshot=new SnapshotDescription(TEST_TABLE.getNameAsString() + "-snapshot",TEST_TABLE,null,USER_OWNER.getName());
    AccessTestAction snapshotAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preSnapshot(ObserverContextImpl.createAndPrepare(CP_ENV),snapshot,htd);
        return null;
      }
    }
;
    verifyAllowed(snapshotAction,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
    verifyDenied(snapshotAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
    AccessTestAction deleteAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preDeleteSnapshot(ObserverContextImpl.createAndPrepare(CP_ENV),snapshot);
        return null;
      }
    }
;
    verifyAllowed(deleteAction,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
    verifyDenied(deleteAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
    AccessTestAction restoreAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preRestoreSnapshot(ObserverContextImpl.createAndPrepare(CP_ENV),snapshot,htd);
        return null;
      }
    }
;
    verifyAllowed(restoreAction,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
    verifyDenied(restoreAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
    AccessTestAction cloneAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preCloneSnapshot(ObserverContextImpl.createAndPrepare(CP_ENV),snapshot,htd);
        return null;
      }
    }
;
    verifyAllowed(cloneAction,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN,USER_OWNER);
    verifyDenied(cloneAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testGlobalAuthorizationForNewRegisteredRS() throws Exception {
    LOG.debug("Test for global authorization for a new registered RegionServer.");
    MiniHBaseCluster hbaseCluster=TEST_UTIL.getHBaseCluster();
    final Admin admin=TEST_UTIL.getAdmin();
    HTableDescriptor htd=new HTableDescriptor(TEST_TABLE2);
    htd.addFamily(new HColumnDescriptor(TEST_FAMILY));
    createTable(TEST_UTIL,htd);
    JVMClusterUtil.RegionServerThread newRsThread=hbaseCluster.startRegionServer();
    final HRegionServer newRs=newRsThread.getRegionServer();
    List<HRegionLocation> regions;
    try (RegionLocator locator=systemUserConnection.getRegionLocator(TEST_TABLE2)){
      regions=locator.getAllRegionLocations();
    }
     HRegionLocation location=regions.get(0);
    final HRegionInfo hri=location.getRegionInfo();
    final ServerName server=location.getServerName();
    try (Table table=systemUserConnection.getTable(TEST_TABLE2)){
      AccessTestAction moveAction=new AccessTestAction(){
        @Override public Object run() throws Exception {
          admin.move(hri.getEncodedNameAsBytes(),Bytes.toBytes(newRs.getServerName().getServerName()));
          return null;
        }
      }
;
      SUPERUSER.runAs(moveAction);
      final int RETRIES_LIMIT=10;
      int retries=0;
      while (newRs.getRegions(TEST_TABLE2).size() < 1 && retries < RETRIES_LIMIT) {
        LOG.debug("Waiting for region to be opened. Already retried " + retries + " times.");
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException e) {
        }
        retries++;
        if (retries == RETRIES_LIMIT - 1) {
          fail("Retry exhaust for waiting region to be opened.");
        }
      }
      AccessTestAction putAction=new AccessTestAction(){
        @Override public Object run() throws Exception {
          Put put=new Put(Bytes.toBytes("test"));
          put.addColumn(TEST_FAMILY,Bytes.toBytes("qual"),Bytes.toBytes("value"));
          table.put(put);
          return null;
        }
      }
;
      USER_ADMIN.runAs(putAction);
    }
   }
  @Test public void testTableDescriptorsEnumeration() throws Exception {
    User TABLE_ADMIN=User.createUserForTesting(conf,"UserA",new String[0]);
    grantOnTable(TEST_UTIL,TABLE_ADMIN.getShortName(),TEST_TABLE,null,null,Permission.Action.ADMIN);
    try {
      AccessTestAction listTablesAction=new AccessTestAction(){
        @Override public Object run() throws Exception {
          try (Connection conn=ConnectionFactory.createConnection(TEST_UTIL.getConfiguration());Admin admin=conn.getAdmin()){
            return Arrays.asList(admin.listTables());
          }
         }
      }
;
      AccessTestAction getTableDescAction=new AccessTestAction(){
        @Override public Object run() throws Exception {
          try (Connection conn=ConnectionFactory.createConnection(TEST_UTIL.getConfiguration());Admin admin=conn.getAdmin()){
            return admin.getTableDescriptor(TEST_TABLE);
          }
         }
      }
;
      verifyAllowed(listTablesAction,SUPERUSER,USER_ADMIN,USER_CREATE,USER_OWNER,TABLE_ADMIN,USER_GROUP_CREATE,USER_GROUP_ADMIN);
      verifyIfEmptyList(listTablesAction,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE);
      verifyAllowed(getTableDescAction,SUPERUSER,USER_ADMIN,USER_CREATE,USER_OWNER,TABLE_ADMIN,USER_GROUP_CREATE,USER_GROUP_ADMIN);
      verifyDenied(getTableDescAction,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE);
    }
  finally {
      revokeFromTable(TEST_UTIL,TABLE_ADMIN.getShortName(),TEST_TABLE,null,null,Permission.Action.ADMIN);
    }
  }
  @Test public void testTableNameEnumeration() throws Exception {
    AccessTestAction listTablesAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        Connection unmanagedConnection=ConnectionFactory.createConnection(TEST_UTIL.getConfiguration());
        Admin admin=unmanagedConnection.getAdmin();
        try {
          return Arrays.asList(admin.listTableNames());
        }
  finally {
          admin.close();
          unmanagedConnection.close();
        }
      }
    }
;
    verifyAllowed(listTablesAction,SUPERUSER,USER_ADMIN,USER_CREATE,USER_OWNER,USER_RW,USER_RO,USER_GROUP_CREATE,USER_GROUP_ADMIN,USER_GROUP_READ,USER_GROUP_WRITE);
    verifyIfEmptyList(listTablesAction,USER_NONE);
  }
  @Test public void testTableDeletion() throws Exception {
    User TABLE_ADMIN=User.createUserForTesting(conf,"TestUser",new String[0]);
    final TableName tableName=TableName.valueOf(name.getMethodName());
    createTestTable(tableName);
    grantOnTable(TEST_UTIL,TABLE_ADMIN.getShortName(),tableName,null,null,Permission.Action.ADMIN);
    AccessTestAction deleteTableAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        Connection unmanagedConnection=ConnectionFactory.createConnection(TEST_UTIL.getConfiguration());
        Admin admin=unmanagedConnection.getAdmin();
        try {
          deleteTable(TEST_UTIL,admin,tableName);
        }
  finally {
          admin.close();
          unmanagedConnection.close();
        }
        return null;
      }
    }
;
    verifyDenied(deleteTableAction,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE);
    verifyAllowed(deleteTableAction,TABLE_ADMIN);
  }
  private void createTestTable(  TableName tname) throws Exception {
    HTableDescriptor htd=new HTableDescriptor(tname);
    HColumnDescriptor hcd=new HColumnDescriptor(TEST_FAMILY);
    hcd.setMaxVersions(100);
    htd.addFamily(hcd);
    htd.setOwner(USER_OWNER);
    createTable(TEST_UTIL,htd,new byte[][]{Bytes.toBytes("s")});
  }
  @Test public void testNamespaceUserGrant() throws Exception {
    AccessTestAction getAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
          return t.get(new Get(TEST_ROW));
        }
       }
    }
;
    String namespace=TEST_TABLE.getNamespaceAsString();
    grantOnNamespace(TEST_UTIL,USER_NONE.getShortName(),namespace,Permission.Action.READ);
    verifyAllowed(getAction,USER_NONE);
    revokeFromNamespace(TEST_UTIL,USER_NONE.getShortName(),namespace,Permission.Action.READ);
    verifyDenied(getAction,USER_NONE);
  }
  @Test public void testAccessControlClientGrantRevoke() throws Exception {
    User testGrantRevoke=User.createUserForTesting(conf,"testGrantRevoke",new String[0]);
    AccessTestAction getAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
          return t.get(new Get(TEST_ROW));
        }
       }
    }
;
    verifyDenied(getAction,testGrantRevoke);
    try {
      grantOnTableUsingAccessControlClient(TEST_UTIL,systemUserConnection,testGrantRevoke.getShortName(),TEST_TABLE,null,null,Permission.Action.READ);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.grant. ",e);
    }
    verifyAllowed(getAction,testGrantRevoke);
    try {
      revokeFromTableUsingAccessControlClient(TEST_UTIL,systemUserConnection,testGrantRevoke.getShortName(),TEST_TABLE,null,null,Permission.Action.READ);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.revoke ",e);
    }
    verifyDenied(getAction,testGrantRevoke);
  }
  @Test public void testAccessControlClientGlobalGrantRevoke() throws Exception {
    User testGlobalGrantRevoke=User.createUserForTesting(conf,"testGlobalGrantRevoke",new String[0]);
    AccessTestAction getAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
          return t.get(new Get(TEST_ROW));
        }
       }
    }
;
    verifyDenied(getAction,testGlobalGrantRevoke);
    String userName=testGlobalGrantRevoke.getShortName();
    try {
      grantGlobalUsingAccessControlClient(TEST_UTIL,systemUserConnection,userName,Permission.Action.READ);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.grant. ",e);
    }
    try {
      verifyAllowed(getAction,testGlobalGrantRevoke);
    }
 catch (    Exception e) {
      revokeGlobal(TEST_UTIL,userName,Permission.Action.READ);
      throw e;
    }
    try {
      revokeGlobalUsingAccessControlClient(TEST_UTIL,systemUserConnection,userName,Permission.Action.READ);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.revoke ",e);
    }
    verifyDenied(getAction,testGlobalGrantRevoke);
  }
  @Test public void testAccessControlClientMultiGrantRevoke() throws Exception {
    User testGrantRevoke=User.createUserForTesting(conf,"testGrantRevoke",new String[0]);
    AccessTestAction getAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
          return t.get(new Get(TEST_ROW));
        }
       }
    }
;
    AccessTestAction putAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        Put p=new Put(TEST_ROW);
        p.addColumn(TEST_FAMILY,TEST_QUALIFIER,Bytes.toBytes(1));
        try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
          t.put(p);
          return null;
        }
       }
    }
;
    verifyDenied(getAction,testGrantRevoke);
    verifyDenied(putAction,testGrantRevoke);
    String userName=testGrantRevoke.getShortName();
    try {
      grantGlobalUsingAccessControlClient(TEST_UTIL,systemUserConnection,userName,Permission.Action.READ);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.grant. ",e);
    }
    verifyAllowed(getAction,testGrantRevoke);
    verifyDenied(putAction,testGrantRevoke);
    try {
      grantGlobalUsingAccessControlClient(TEST_UTIL,systemUserConnection,userName,Permission.Action.WRITE);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.grant. ",e);
    }
    verifyAllowed(getAction,testGrantRevoke);
    verifyAllowed(putAction,testGrantRevoke);
    try {
      revokeGlobalUsingAccessControlClient(TEST_UTIL,systemUserConnection,userName,Permission.Action.READ,Permission.Action.WRITE);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.revoke ",e);
    }
    verifyDenied(getAction,testGrantRevoke);
    verifyDenied(putAction,testGrantRevoke);
    try {
      grantOnTableUsingAccessControlClient(TEST_UTIL,systemUserConnection,userName,TEST_TABLE,null,null,Permission.Action.READ);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.grant. ",e);
    }
    verifyAllowed(getAction,testGrantRevoke);
    verifyDenied(putAction,testGrantRevoke);
    try {
      grantOnTableUsingAccessControlClient(TEST_UTIL,systemUserConnection,userName,TEST_TABLE,null,null,Action.WRITE);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.grant. ",e);
    }
    verifyAllowed(getAction,testGrantRevoke);
    verifyAllowed(putAction,testGrantRevoke);
    try {
      revokeFromTableUsingAccessControlClient(TEST_UTIL,systemUserConnection,userName,TEST_TABLE,null,null,Permission.Action.READ,Permission.Action.WRITE);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.revoke ",e);
    }
    verifyDenied(getAction,testGrantRevoke);
    verifyDenied(putAction,testGrantRevoke);
    String namespace=TEST_TABLE.getNamespaceAsString();
    try {
      grantOnNamespaceUsingAccessControlClient(TEST_UTIL,systemUserConnection,userName,namespace,Permission.Action.READ);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.grant. ",e);
    }
    verifyAllowed(getAction,testGrantRevoke);
    verifyDenied(putAction,testGrantRevoke);
    try {
      grantOnNamespaceUsingAccessControlClient(TEST_UTIL,systemUserConnection,userName,namespace,Permission.Action.WRITE);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.grant. ",e);
    }
    verifyAllowed(getAction,testGrantRevoke);
    verifyAllowed(putAction,testGrantRevoke);
    try {
      revokeFromNamespaceUsingAccessControlClient(TEST_UTIL,systemUserConnection,userName,TEST_TABLE.getNamespaceAsString(),Permission.Action.READ,Permission.Action.WRITE);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.revoke ",e);
    }
    verifyDenied(getAction,testGrantRevoke);
    verifyDenied(putAction,testGrantRevoke);
  }
  @Test public void testAccessControlClientGrantRevokeOnNamespace() throws Exception {
    User testNS=User.createUserForTesting(conf,"testNS",new String[0]);
    AccessTestAction getAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
          return t.get(new Get(TEST_ROW));
        }
       }
    }
;
    verifyDenied(getAction,testNS);
    String userName=testNS.getShortName();
    String namespace=TEST_TABLE.getNamespaceAsString();
    try {
      grantOnNamespaceUsingAccessControlClient(TEST_UTIL,systemUserConnection,userName,namespace,Permission.Action.READ);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.grant. ",e);
    }
    try {
      verifyAllowed(getAction,testNS);
    }
 catch (    Exception e) {
      revokeFromNamespace(TEST_UTIL,userName,namespace,Permission.Action.READ);
      throw e;
    }
    try {
      revokeFromNamespaceUsingAccessControlClient(TEST_UTIL,systemUserConnection,userName,namespace,Permission.Action.READ);
    }
 catch (    Throwable e) {
      LOG.error("error during call of AccessControlClient.revoke ",e);
    }
    verifyDenied(getAction,testNS);
  }
public static class PingCoprocessor extends PingService implements RegionCoprocessor {
    @Override public void start(    CoprocessorEnvironment env) throws IOException {
    }
    @Override public void stop(    CoprocessorEnvironment env) throws IOException {
    }
    @Override public Iterable<Service> getServices(){
      return Collections.singleton(this);
    }
    @Override public void ping(    RpcController controller,    PingRequest request,    RpcCallback<PingResponse> callback){
      callback.run(PingResponse.newBuilder().setPong("Pong!").build());
    }
    @Override public void count(    RpcController controller,    CountRequest request,    RpcCallback<CountResponse> callback){
      callback.run(CountResponse.newBuilder().build());
    }
    @Override public void increment(    RpcController controller,    IncrementCountRequest requet,    RpcCallback<IncrementCountResponse> callback){
      callback.run(IncrementCountResponse.newBuilder().build());
    }
    @Override public void hello(    RpcController controller,    HelloRequest request,    RpcCallback<HelloResponse> callback){
      callback.run(HelloResponse.newBuilder().setResponse("Hello!").build());
    }
    @Override public void noop(    RpcController controller,    NoopRequest request,    RpcCallback<NoopResponse> callback){
      callback.run(NoopResponse.newBuilder().build());
    }
  }
  @Test public void testCoprocessorExec() throws Exception {
    for (    JVMClusterUtil.RegionServerThread thread : TEST_UTIL.getMiniHBaseCluster().getRegionServerThreads()) {
      HRegionServer rs=thread.getRegionServer();
      for (      HRegion region : rs.getRegions(TEST_TABLE)) {
        region.getCoprocessorHost().load(PingCoprocessor.class,Coprocessor.PRIORITY_USER,conf);
      }
    }
    User userA=User.createUserForTesting(conf,"UserA",new String[0]);
    User userB=User.createUserForTesting(conf,"UserB",new String[0]);
    grantOnTable(TEST_UTIL,userA.getShortName(),TEST_TABLE,null,null,Permission.Action.EXEC);
    try {
      AccessTestAction execEndpointAction=new AccessTestAction(){
        @Override public Object run() throws Exception {
          try (Connection conn=ConnectionFactory.createConnection(conf);Table t=conn.getTable(TEST_TABLE)){
            BlockingRpcChannel service=t.coprocessorService(HConstants.EMPTY_BYTE_ARRAY);
            PingCoprocessor.newBlockingStub(service).noop(null,NoopRequest.newBuilder().build());
          }
           return null;
        }
      }
;
      String namespace=TEST_TABLE.getNamespaceAsString();
      grantOnNamespace(TEST_UTIL,userB.getShortName(),namespace,Permission.Action.EXEC);
      verifyAllowed(execEndpointAction,userA,userB);
      revokeFromNamespace(TEST_UTIL,userB.getShortName(),namespace,Permission.Action.EXEC);
      verifyDenied(execEndpointAction,userB);
      verifyAllowed(execEndpointAction,userA);
    }
  finally {
      revokeFromTable(TEST_UTIL,userA.getShortName(),TEST_TABLE,null,null,Permission.Action.EXEC);
    }
  }
  @Test public void testSetQuota() throws Exception {
    AccessTestAction setUserQuotaAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preSetUserQuota(ObserverContextImpl.createAndPrepare(CP_ENV),null,null);
        return null;
      }
    }
;
    AccessTestAction setUserTableQuotaAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preSetUserQuota(ObserverContextImpl.createAndPrepare(CP_ENV),null,TEST_TABLE,null);
        return null;
      }
    }
;
    AccessTestAction setUserNamespaceQuotaAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preSetUserQuota(ObserverContextImpl.createAndPrepare(CP_ENV),null,(String)null,null);
        return null;
      }
    }
;
    AccessTestAction setTableQuotaAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preSetTableQuota(ObserverContextImpl.createAndPrepare(CP_ENV),TEST_TABLE,null);
        return null;
      }
    }
;
    AccessTestAction setNamespaceQuotaAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preSetNamespaceQuota(ObserverContextImpl.createAndPrepare(CP_ENV),null,null);
        return null;
      }
    }
;
    verifyAllowed(setUserQuotaAction,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(setUserQuotaAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
    verifyAllowed(setUserTableQuotaAction,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
    verifyDenied(setUserTableQuotaAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
    verifyAllowed(setUserNamespaceQuotaAction,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(setUserNamespaceQuotaAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
    verifyAllowed(setTableQuotaAction,SUPERUSER,USER_ADMIN,USER_OWNER,USER_GROUP_ADMIN);
    verifyDenied(setTableQuotaAction,USER_CREATE,USER_RW,USER_RO,USER_NONE);
    verifyAllowed(setNamespaceQuotaAction,SUPERUSER,USER_ADMIN,USER_GROUP_ADMIN);
    verifyDenied(setNamespaceQuotaAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_CREATE);
  }
  @Test public void testGetNamespacePermission() throws Exception {
    String namespace="testGetNamespacePermission";
    NamespaceDescriptor desc=NamespaceDescriptor.create(namespace).build();
    createNamespace(TEST_UTIL,desc);
    grantOnNamespace(TEST_UTIL,USER_NONE.getShortName(),namespace,Permission.Action.READ);
    getNamespacePermissionsAndVerify(namespace,1,namespace);
    getNamespacePermissionsAndVerify(".*",1,namespace);
    getNamespacePermissionsAndVerify("^test[a-zA-Z]*",1,namespace);
    deleteNamespace(TEST_UTIL,namespace);
  }
  /** 
 * List all user permissions match the given regular expression for namespace and verify each of them.
 * @param namespaceRegexWithoutPrefix the regualar expression for namespace, without NAMESPACE_PREFIX
 * @param expectedAmount the expected amount of user permissions returned
 * @param expectedNamespace the expected namespace of each user permission returned
 * @throws HBaseException in the case of any HBase exception when accessing hbase:acl table
 */
  private void getNamespacePermissionsAndVerify(  String namespaceRegexWithoutPrefix,  int expectedAmount,  String expectedNamespace) throws HBaseException {
    try {
      List<UserPermission> namespacePermissions=AccessControlClient.getUserPermissions(systemUserConnection,AccessControlLists.toNamespaceEntry(namespaceRegexWithoutPrefix));
      assertTrue(namespacePermissions != null);
      assertEquals(expectedAmount,namespacePermissions.size());
      for (      UserPermission namespacePermission : namespacePermissions) {
        assertFalse(namespacePermission.isGlobal());
        assertEquals(expectedNamespace,namespacePermission.getNamespace());
      }
    }
 catch (    Throwable thw) {
      throw new HBaseException(thw);
    }
  }
  @Test public void testTruncatePerms() throws Exception {
    try {
      List<UserPermission> existingPerms=AccessControlClient.getUserPermissions(systemUserConnection,TEST_TABLE.getNameAsString());
      assertTrue(existingPerms != null);
      assertTrue(existingPerms.size() > 1);
      TEST_UTIL.getAdmin().disableTable(TEST_TABLE);
      TEST_UTIL.truncateTable(TEST_TABLE);
      TEST_UTIL.waitTableAvailable(TEST_TABLE);
      List<UserPermission> perms=AccessControlClient.getUserPermissions(systemUserConnection,TEST_TABLE.getNameAsString());
      assertTrue(perms != null);
      assertEquals(existingPerms.size(),perms.size());
    }
 catch (    Throwable e) {
      throw new HBaseIOException(e);
    }
  }
  private PrivilegedAction<List<UserPermission>> getPrivilegedAction(  final String regex){
    return new PrivilegedAction<List<UserPermission>>(){
      @Override public List<UserPermission> run(){
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          return AccessControlClient.getUserPermissions(conn,regex);
        }
 catch (        Throwable e) {
          LOG.error("error during call of AccessControlClient.getUserPermissions.",e);
          return null;
        }
      }
    }
;
  }
  @Test public void testAccessControlClientUserPerms() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    createTestTable(tableName);
    try {
      final String regex=tableName.getNameWithNamespaceInclAsString();
      User testUserPerms=User.createUserForTesting(conf,"testUserPerms",new String[0]);
      assertEquals(0,testUserPerms.runAs(getPrivilegedAction(regex)).size());
      grantOnTable(TEST_UTIL,testUserPerms.getShortName(),tableName,null,null,Action.ADMIN);
      List<UserPermission> perms=testUserPerms.runAs(getPrivilegedAction(regex));
      assertNotNull(perms);
      assertEquals(2,perms.size());
    }
  finally {
      deleteTable(TEST_UTIL,tableName);
    }
  }
  @Test public void testAccessControllerUserPermsRegexHandling() throws Exception {
    User testRegexHandler=User.createUserForTesting(conf,"testRegexHandling",new String[0]);
    final String REGEX_ALL_TABLES=".*";
    final String tableName=name.getMethodName();
    final TableName table1=TableName.valueOf(tableName);
    final byte[] family=Bytes.toBytes("f1");
    Admin admin=TEST_UTIL.getAdmin();
    HTableDescriptor htd=new HTableDescriptor(table1);
    htd.addFamily(new HColumnDescriptor(family));
    createTable(TEST_UTIL,htd);
    String ns="testNamespace";
    NamespaceDescriptor desc=NamespaceDescriptor.create(ns).build();
    final TableName table2=TableName.valueOf(ns,tableName);
    createNamespace(TEST_UTIL,desc);
    htd=new HTableDescriptor(table2);
    htd.addFamily(new HColumnDescriptor(family));
    createTable(TEST_UTIL,htd);
    String aclTableName=AccessControlLists.ACL_TABLE_NAME.getNameAsString();
    assertEquals(5,SUPERUSER.runAs(getPrivilegedAction(aclTableName)).size());
    assertEquals(0,testRegexHandler.runAs(getPrivilegedAction(aclTableName)).size());
    assertEquals(0,testRegexHandler.runAs(getPrivilegedAction(REGEX_ALL_TABLES)).size());
    grantOnTable(TEST_UTIL,testRegexHandler.getShortName(),table1,null,null,Action.ADMIN);
    assertEquals(2,testRegexHandler.runAs(getPrivilegedAction(REGEX_ALL_TABLES)).size());
    grantOnTable(TEST_UTIL,testRegexHandler.getShortName(),table2,null,null,Action.ADMIN);
    assertEquals(4,testRegexHandler.runAs(getPrivilegedAction(REGEX_ALL_TABLES)).size());
    assertEquals(2,testRegexHandler.runAs(getPrivilegedAction(tableName)).size());
    assertEquals(2,testRegexHandler.runAs(getPrivilegedAction(NamespaceDescriptor.DEFAULT_NAMESPACE_NAME_STR + TableName.NAMESPACE_DELIM + tableName)).size());
    assertEquals(2,testRegexHandler.runAs(getPrivilegedAction(ns + TableName.NAMESPACE_DELIM + tableName)).size());
    assertEquals(0,testRegexHandler.runAs(getPrivilegedAction("notMatchingAny")).size());
    deleteTable(TEST_UTIL,table1);
    deleteTable(TEST_UTIL,table2);
    deleteNamespace(TEST_UTIL,ns);
  }
  private void verifyAnyCreate(  AccessTestAction action) throws Exception {
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_OWNER,USER_CREATE,USER_ADMIN_CF,USER_GROUP_CREATE);
    verifyDenied(action,USER_NONE,USER_RO,USER_RW,USER_GROUP_READ,USER_GROUP_WRITE,USER_GROUP_ADMIN);
  }
  @Test public void testPrepareAndCleanBulkLoad() throws Exception {
    AccessTestAction prepareBulkLoadAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.prePrepareBulkLoad(ObserverContextImpl.createAndPrepare(RCP_ENV));
        return null;
      }
    }
;
    AccessTestAction cleanupBulkLoadAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preCleanupBulkLoad(ObserverContextImpl.createAndPrepare(RCP_ENV));
        return null;
      }
    }
;
    verifyAnyCreate(prepareBulkLoadAction);
    verifyAnyCreate(cleanupBulkLoadAction);
  }
  @Test public void testReplicateLogEntries() throws Exception {
    AccessTestAction replicateLogEntriesAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preReplicateLogEntries(ObserverContextImpl.createAndPrepare(RSCP_ENV));
        ACCESS_CONTROLLER.postReplicateLogEntries(ObserverContextImpl.createAndPrepare(RSCP_ENV));
        return null;
      }
    }
;
    verifyAllowed(replicateLogEntriesAction,SUPERUSER,USER_ADMIN,USER_GROUP_WRITE);
    verifyDenied(replicateLogEntriesAction,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER,USER_GROUP_READ,USER_GROUP_ADMIN,USER_GROUP_CREATE);
  }
  @Test public void testAddReplicationPeer() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preAddReplicationPeer(ObserverContextImpl.createAndPrepare(CP_ENV),"test",null);
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER);
  }
  @Test public void testRemoveReplicationPeer() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preRemoveReplicationPeer(ObserverContextImpl.createAndPrepare(CP_ENV),"test");
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER);
  }
  @Test public void testEnableReplicationPeer() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preEnableReplicationPeer(ObserverContextImpl.createAndPrepare(CP_ENV),"test");
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER);
  }
  @Test public void testDisableReplicationPeer() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preDisableReplicationPeer(ObserverContextImpl.createAndPrepare(CP_ENV),"test");
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER);
  }
  @Test public void testGetReplicationPeerConfig() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preGetReplicationPeerConfig(ObserverContextImpl.createAndPrepare(CP_ENV),"test");
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER);
  }
  @Test public void testUpdateReplicationPeerConfig() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preUpdateReplicationPeerConfig(ObserverContextImpl.createAndPrepare(CP_ENV),"test",new ReplicationPeerConfig());
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER);
  }
  @Test public void testListReplicationPeers() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preListReplicationPeers(ObserverContextImpl.createAndPrepare(CP_ENV),"test");
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER);
  }
  @Test public void testRemoteLocks() throws Exception {
    String namespace="preQueueNs";
    final TableName tableName=TableName.valueOf(namespace,name.getMethodName());
    HRegionInfo[] regionInfos=new HRegionInfo[]{new HRegionInfo(tableName)};
    User namespaceUser=User.createUserForTesting(conf,"qLNSUser",new String[0]);
    User tableACUser=User.createUserForTesting(conf,"qLTableACUser",new String[0]);
    User tableRWXUser=User.createUserForTesting(conf,"qLTableRWXUser",new String[0]);
    grantOnTable(TEST_UTIL,tableRWXUser.getShortName(),tableName,null,null,Action.READ,Action.WRITE,Action.EXEC);
    User globalRWXUser=User.createUserForTesting(conf,"qLGlobalRWXUser",new String[0]);
    grantGlobal(TEST_UTIL,globalRWXUser.getShortName(),Action.READ,Action.WRITE,Action.EXEC);
    AccessTestAction namespaceLockAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preRequestLock(ObserverContextImpl.createAndPrepare(CP_ENV),namespace,null,null,null);
        return null;
      }
    }
;
    verifyAllowed(namespaceLockAction,SUPERUSER,USER_ADMIN);
    verifyDenied(namespaceLockAction,globalRWXUser,tableACUser,namespaceUser,tableRWXUser);
    grantOnNamespace(TEST_UTIL,namespaceUser.getShortName(),namespace,Action.ADMIN);
    Threads.sleep(1000);
    verifyAllowed(namespaceLockAction,namespaceUser);
    AccessTestAction tableLockAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preRequestLock(ObserverContextImpl.createAndPrepare(CP_ENV),null,tableName,null,null);
        return null;
      }
    }
;
    verifyAllowed(tableLockAction,SUPERUSER,USER_ADMIN,namespaceUser);
    verifyDenied(tableLockAction,globalRWXUser,tableACUser,tableRWXUser);
    grantOnTable(TEST_UTIL,tableACUser.getShortName(),tableName,null,null,Action.ADMIN,Action.CREATE);
    verifyAllowed(tableLockAction,tableACUser);
    AccessTestAction regionsLockAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preRequestLock(ObserverContextImpl.createAndPrepare(CP_ENV),null,null,regionInfos,null);
        return null;
      }
    }
;
    verifyAllowed(regionsLockAction,SUPERUSER,USER_ADMIN,namespaceUser,tableACUser);
    verifyDenied(regionsLockAction,globalRWXUser,tableRWXUser);
    LockProcedure proc=new LockProcedure(conf,tableName,LockType.EXCLUSIVE,"test",null);
    AccessTestAction regionLockHeartbeatAction=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preLockHeartbeat(ObserverContextImpl.createAndPrepare(CP_ENV),proc.getTableName(),proc.getDescription());
        return null;
      }
    }
;
    verifyAllowed(regionLockHeartbeatAction,SUPERUSER,USER_ADMIN,namespaceUser,tableACUser);
    verifyDenied(regionLockHeartbeatAction,globalRWXUser,tableRWXUser);
  }
  @Test public void testAccessControlRevokeOnlyFewPermission() throws Throwable {
    TableName tname=TableName.valueOf("revoke");
    try {
      TEST_UTIL.createTable(tname,TEST_FAMILY);
      User testUserPerms=User.createUserForTesting(conf,"revokePerms",new String[0]);
      Permission.Action[] actions={Action.READ,Action.WRITE};
      AccessControlClient.grant(TEST_UTIL.getConnection(),tname,testUserPerms.getShortName(),null,null,actions);
      List<UserPermission> userPermissions=AccessControlClient.getUserPermissions(TEST_UTIL.getConnection(),tname.getNameAsString());
      assertEquals(2,userPermissions.size());
      AccessControlClient.revoke(TEST_UTIL.getConnection(),tname,testUserPerms.getShortName(),null,null,Action.WRITE);
      userPermissions=AccessControlClient.getUserPermissions(TEST_UTIL.getConnection(),tname.getNameAsString());
      assertEquals(2,userPermissions.size());
      Permission.Action[] expectedAction={Action.READ};
      boolean userFound=false;
      for (      UserPermission p : userPermissions) {
        if (testUserPerms.getShortName().equals(Bytes.toString(p.getUser()))) {
          assertArrayEquals(expectedAction,p.getActions());
          userFound=true;
          break;
        }
      }
      assertTrue(userFound);
    }
  finally {
      TEST_UTIL.deleteTable(tname);
    }
  }
  @Test public void testGetClusterStatus() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preGetClusterMetrics(ObserverContextImpl.createAndPrepare(CP_ENV));
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER,USER_ADMIN,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER);
  }
  @Test public void testExecuteProcedures() throws Exception {
    AccessTestAction action=new AccessTestAction(){
      @Override public Object run() throws Exception {
        ACCESS_CONTROLLER.preExecuteProcedures(ObserverContextImpl.createAndPrepare(RSCP_ENV));
        return null;
      }
    }
;
    verifyAllowed(action,SUPERUSER);
    verifyDenied(action,USER_CREATE,USER_RW,USER_RO,USER_NONE,USER_OWNER,USER_ADMIN);
  }
}
