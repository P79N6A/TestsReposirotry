static class DataCacheEntry implements Cacheable {
  private static final int SIZE=1;
  private static DataCacheEntry SINGLETON=new DataCacheEntry();
  final CacheableDeserializer<Cacheable> deserializer;
  DataCacheEntry(){
    this(SINGLETON);
  }
  DataCacheEntry(  final Cacheable c){
    this.deserializer=new Deserializer(c);
  }
  @Override public String toString(){
    return "size=" + SIZE + ", type="+ getBlockType();
  }
  @Override public long heapSize(){
    return SIZE;
  }
  @Override public int getSerializedLength(){
    return SIZE;
  }
  @Override public void serialize(  ByteBuffer destination,  boolean includeNextBlockMetadata){
    LOG.info("Serialized " + this + " to "+ destination);
  }
  @Override public CacheableDeserializer<Cacheable> getDeserializer(){
    return this.deserializer;
  }
  @Override public BlockType getBlockType(){
    return BlockType.DATA;
  }
  @Override public MemoryType getMemoryType(){
    return MemoryType.EXCLUSIVE;
  }
}
