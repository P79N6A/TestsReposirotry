/** 
 * This class drives the Integration test suite execution. Executes all tests having @Category(IntegrationTests.class) annotation against an already deployed distributed cluster.
 */
public class IntegrationTestsDriver extends AbstractHBaseTool {
  private static final String SHORT_REGEX_ARG="r";
  private static final String LONG_REGEX_ARG="regex";
  private static final Logger LOG=LoggerFactory.getLogger(IntegrationTestsDriver.class);
  private IntegrationTestFilter intTestFilter=new IntegrationTestFilter();
  public static void main(  String[] args) throws Exception {
    int ret=ToolRunner.run(new IntegrationTestsDriver(),args);
    System.exit(ret);
  }
private class IntegrationTestFilter extends ClassTestFinder.TestClassFilter {
    private Pattern testFilterRe=Pattern.compile(".*\\.IntegrationTest.*");
    public IntegrationTestFilter(){
      super(IntegrationTests.class);
    }
    public void setPattern(    String pattern){
      testFilterRe=Pattern.compile(pattern);
    }
    @Override public boolean isCandidateClass(    Class<?> c){
      return testFilterRe.matcher(c.getName()).find() && !c.getName().contains("IntegrationTestingUtility") && super.isCandidateClass(c);
    }
  }
  @Override protected void addOptions(){
    addOptWithArg(SHORT_REGEX_ARG,LONG_REGEX_ARG,"Java regex to use selecting tests to run: e.g. .*TestBig.*" + " will select all tests that include TestBig in their name.  Default: " + ".*IntegrationTest.*");
  }
  @Override protected void processOptions(  CommandLine cmd){
    String testFilterString=cmd.getOptionValue(SHORT_REGEX_ARG,null);
    if (testFilterString != null) {
      intTestFilter.setPattern(testFilterString);
    }
  }
  /** 
 * Returns test classes annotated with @Category(IntegrationTests.class), according to the filter specific on the command line (if any).
 */
  private Class<?>[] findIntegrationTestClasses() throws ClassNotFoundException, LinkageError, IOException {
    ClassTestFinder.TestFileNameFilter nameFilter=new ClassTestFinder.TestFileNameFilter();
    ClassFinder classFinder=new ClassFinder(nameFilter,nameFilter,intTestFilter);
    Set<Class<?>> classes=classFinder.findClasses(true);
    return classes.toArray(new Class<?>[classes.size()]);
  }
  @Override protected int doWork() throws Exception {
    IntegrationTestingUtility.setUseDistributedCluster(conf);
    Class<?>[] classes=findIntegrationTestClasses();
    LOG.info("Found " + classes.length + " integration tests to run:");
    for (    Class<?> aClass : classes) {
      LOG.info("  " + aClass);
    }
    JUnitCore junit=new JUnitCore();
    junit.addListener(new TextListener(System.out));
    Result result=junit.run(classes);
    return result.wasSuccessful() ? 0 : 1;
  }
}
