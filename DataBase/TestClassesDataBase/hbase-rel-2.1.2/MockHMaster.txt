public static final class MockHMaster extends HMaster {
  volatile boolean addPeerCalled;
  volatile boolean removePeerCalled;
  volatile boolean updatePeerConfigCalled;
  volatile boolean enablePeerCalled;
  volatile boolean disablePeerCalled;
  private ReplicationPeerManager manager;
  public MockHMaster(  Configuration conf) throws IOException, KeeperException {
    super(conf);
  }
  private Object invokeWithError(  InvocationOnMock invocation,  boolean errorBeforeUpdate) throws Throwable {
    if (errorBeforeUpdate) {
      throw new ReplicationException("mock error before update");
    }
    invocation.callRealMethod();
    throw new ReplicationException("mock error after update");
  }
  public void reset(  boolean errorBeforeUpdate) throws ReplicationException {
    addPeerCalled=false;
    removePeerCalled=false;
    updatePeerConfigCalled=false;
    enablePeerCalled=false;
    disablePeerCalled=false;
    ReplicationPeerManager m=super.getReplicationPeerManager();
    manager=spy(m);
    doAnswer(invocation -> {
      if (!addPeerCalled) {
        addPeerCalled=true;
        return invokeWithError(invocation,errorBeforeUpdate);
      }
 else {
        return invocation.callRealMethod();
      }
    }
).when(manager).addPeer(anyString(),any(ReplicationPeerConfig.class),anyBoolean());
    doAnswer(invocation -> {
      if (!removePeerCalled) {
        removePeerCalled=true;
        return invokeWithError(invocation,errorBeforeUpdate);
      }
 else {
        return invocation.callRealMethod();
      }
    }
).when(manager).removePeer(anyString());
    doAnswer(invocation -> {
      if (!updatePeerConfigCalled) {
        updatePeerConfigCalled=true;
        return invokeWithError(invocation,errorBeforeUpdate);
      }
 else {
        return invocation.callRealMethod();
      }
    }
).when(manager).updatePeerConfig(anyString(),any(ReplicationPeerConfig.class));
    doAnswer(invocation -> {
      if (!enablePeerCalled) {
        enablePeerCalled=true;
        return invokeWithError(invocation,errorBeforeUpdate);
      }
 else {
        return invocation.callRealMethod();
      }
    }
).when(manager).enablePeer(anyString());
    doAnswer(invocation -> {
      if (!disablePeerCalled) {
        disablePeerCalled=true;
        return invokeWithError(invocation,errorBeforeUpdate);
      }
 else {
        return invocation.callRealMethod();
      }
    }
).when(manager).disablePeer(anyString());
  }
  @Override public ReplicationPeerManager getReplicationPeerManager(){
    return manager;
  }
}
