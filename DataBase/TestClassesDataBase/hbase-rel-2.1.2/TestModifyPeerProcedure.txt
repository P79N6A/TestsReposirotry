public static class TestModifyPeerProcedure extends ModifyPeerProcedure {
  public TestModifyPeerProcedure(){
  }
  public TestModifyPeerProcedure(  String peerId){
    super(peerId);
  }
  @Override public PeerOperationType getPeerOperationType(){
    return PeerOperationType.ADD;
  }
  private void tryFail() throws ReplicationException {
synchronized (TestModifyPeerProcedureRetryBackoff.class) {
      if (FAIL) {
        throw new ReplicationException("Inject error");
      }
      FAIL=true;
    }
  }
  @Override protected <T extends Procedure<MasterProcedureEnv>>void addChildProcedure(  @SuppressWarnings("unchecked") T... subProcedure){
  }
  @Override protected PeerModificationState nextStateAfterRefresh(){
    return PeerModificationState.SERIAL_PEER_REOPEN_REGIONS;
  }
  @Override protected boolean enablePeerBeforeFinish(){
    return true;
  }
  @Override protected void updateLastPushedSequenceIdForSerialPeer(  MasterProcedureEnv env) throws IOException, ReplicationException {
    tryFail();
  }
  @Override protected void reopenRegions(  MasterProcedureEnv env) throws IOException {
    try {
      tryFail();
    }
 catch (    ReplicationException e) {
      throw new IOException(e);
    }
  }
  @Override protected void enablePeer(  MasterProcedureEnv env) throws ReplicationException {
    tryFail();
  }
  @Override protected void prePeerModification(  MasterProcedureEnv env) throws IOException, ReplicationException {
    tryFail();
  }
  @Override protected void updatePeerStorage(  MasterProcedureEnv env) throws ReplicationException {
    tryFail();
  }
  @Override protected void postPeerModification(  MasterProcedureEnv env) throws IOException, ReplicationException {
    tryFail();
  }
}
