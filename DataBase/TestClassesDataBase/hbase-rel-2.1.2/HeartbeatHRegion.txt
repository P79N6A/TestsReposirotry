/** 
 * Custom HRegion class that instantiates  {@link RegionScanner}s with configurable sleep times between fetches of row Results and/or column family cells. Useful for emulating an instance where the server is taking a long time to process a client's scan request
 */
private static class HeartbeatHRegion extends HRegion {
  private static volatile int rowSleepTime=DEFAULT_ROW_SLEEP_TIME;
  private static volatile boolean sleepBetweenRows=false;
  private static volatile boolean sleepBeforeColumnFamily=false;
  private static volatile int columnFamilySleepTime=DEFAULT_CF_SLEEP_TIME;
  private static volatile boolean sleepBetweenColumnFamilies=false;
  public HeartbeatHRegion(  Path tableDir,  WAL wal,  FileSystem fs,  Configuration confParam,  RegionInfo regionInfo,  TableDescriptor htd,  RegionServerServices rsServices){
    super(tableDir,wal,fs,confParam,regionInfo,htd,rsServices);
  }
  public HeartbeatHRegion(  HRegionFileSystem fs,  WAL wal,  Configuration confParam,  TableDescriptor htd,  RegionServerServices rsServices){
    super(fs,wal,confParam,htd,rsServices);
  }
  private static void columnFamilySleep(){
    if (sleepBetweenColumnFamilies) {
      Threads.sleepWithoutInterrupt(columnFamilySleepTime);
    }
  }
  private static void rowSleep(){
    if (sleepBetweenRows) {
      Threads.sleepWithoutInterrupt(rowSleepTime);
    }
  }
  @Override protected RegionScannerImpl instantiateRegionScanner(  Scan scan,  List<KeyValueScanner> additionalScanners,  long nonceGroup,  long nonce) throws IOException {
    if (scan.isReversed()) {
      if (scan.getFilter() != null) {
        scan.getFilter().setReversed(true);
      }
      return new HeartbeatReversedRegionScanner(scan,additionalScanners,this);
    }
    return new HeartbeatRegionScanner(scan,additionalScanners,this);
  }
}
