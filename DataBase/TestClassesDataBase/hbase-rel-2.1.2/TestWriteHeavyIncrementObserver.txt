@Category({CoprocessorTests.class,MediumTests.class}) public class TestWriteHeavyIncrementObserver extends WriteHeavyIncrementObserverTestBase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestWriteHeavyIncrementObserver.class);
  @BeforeClass public static void setUp() throws Exception {
    WriteHeavyIncrementObserverTestBase.setUp();
    UTIL.getAdmin().createTable(TableDescriptorBuilder.newBuilder(NAME).setCoprocessor(WriteHeavyIncrementObserver.class.getName()).setColumnFamily(ColumnFamilyDescriptorBuilder.of(FAMILY)).build());
    TABLE=UTIL.getConnection().getTable(NAME);
  }
  @Test public void test() throws Exception {
    doIncrement(0);
    assertSum();
    try (ResultScanner scanner=TABLE.getScanner(new Scan().withStartRow(ROW).withStopRow(ROW,true).addFamily(FAMILY).readAllVersions().setAllowPartialResults(true))){
      Result r=scanner.next();
      assertTrue(r.rawCells().length > 2);
    }
     UTIL.flush(NAME);
    HRegion region=UTIL.getHBaseCluster().findRegionsForTable(NAME).get(0);
    HStore store=region.getStore(FAMILY);
    for (; ; ) {
      region.compact(true);
      if (store.getStorefilesCount() == 1) {
        break;
      }
    }
    assertSum();
    try (ResultScanner scanner=TABLE.getScanner(new Scan().withStartRow(ROW).withStopRow(ROW,true).addFamily(FAMILY).readAllVersions().setAllowPartialResults(true))){
      Result r=scanner.next();
      assertEquals(2,r.rawCells().length);
    }
   }
}
