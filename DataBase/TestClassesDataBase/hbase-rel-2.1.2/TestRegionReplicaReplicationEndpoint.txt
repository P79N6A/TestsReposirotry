/** 
 * Tests RegionReplicaReplicationEndpoint class by setting up region replicas and verifying async wal replication replays the edits to the secondary region in various scenarios.
 */
@Category({FlakeyTests.class,LargeTests.class}) public class TestRegionReplicaReplicationEndpoint {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRegionReplicaReplicationEndpoint.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestRegionReplicaReplicationEndpoint.class);
  private static final int NB_SERVERS=2;
  private static final HBaseTestingUtility HTU=new HBaseTestingUtility();
  @Rule public TestName name=new TestName();
  @BeforeClass public static void beforeClass() throws Exception {
    Configuration conf=HTU.getConfiguration();
    conf.setFloat("hbase.regionserver.logroll.multiplier",0.0003f);
    conf.setInt("replication.source.size.capacity",10240);
    conf.setLong("replication.source.sleepforretries",100);
    conf.setInt("hbase.regionserver.maxlogs",10);
    conf.setLong("hbase.master.logcleaner.ttl",10);
    conf.setInt("zookeeper.recovery.retry",1);
    conf.setInt("zookeeper.recovery.retry.intervalmill",10);
    conf.setBoolean(ServerRegionReplicaUtil.REGION_REPLICA_REPLICATION_CONF_KEY,true);
    conf.setLong(HConstants.THREAD_WAKE_FREQUENCY,100);
    conf.setInt("replication.stats.thread.period.seconds",5);
    conf.setBoolean("hbase.tests.use.shortcircuit.reads",false);
    conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,5);
    conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER,1);
    HTU.startMiniCluster(NB_SERVERS);
  }
  @AfterClass public static void afterClass() throws Exception {
    HTU.shutdownMiniCluster();
  }
  @Test public void testRegionReplicaReplicationPeerIsCreated() throws IOException, ReplicationException {
    ReplicationAdmin admin=new ReplicationAdmin(HTU.getConfiguration());
    String peerId="region_replica_replication";
    ReplicationPeerConfig peerConfig=null;
    try {
      peerConfig=admin.getPeerConfig(peerId);
    }
 catch (    ReplicationPeerNotFoundException e) {
      LOG.warn("Region replica replication peer id=" + peerId + " not exist",e);
    }
    if (peerConfig != null) {
      admin.removePeer(peerId);
      peerConfig=null;
    }
    HTableDescriptor htd=HTU.createTableDescriptor("testReplicationPeerIsCreated_no_region_replicas");
    HTU.getAdmin().createTable(htd);
    try {
      peerConfig=admin.getPeerConfig(peerId);
      fail("Should throw ReplicationException, because replication peer id=" + peerId + " not exist");
    }
 catch (    ReplicationPeerNotFoundException e) {
    }
    assertNull(peerConfig);
    htd=HTU.createTableDescriptor("testReplicationPeerIsCreated");
    htd.setRegionReplication(2);
    HTU.getAdmin().createTable(htd);
    peerConfig=admin.getPeerConfig(peerId);
    assertNotNull(peerConfig);
    assertEquals(peerConfig.getClusterKey(),ZKConfig.getZooKeeperClusterKey(HTU.getConfiguration()));
    assertEquals(RegionReplicaReplicationEndpoint.class.getName(),peerConfig.getReplicationEndpointImpl());
    admin.close();
  }
  @Test public void testRegionReplicaReplicationPeerIsCreatedForModifyTable() throws Exception {
    ReplicationAdmin admin=new ReplicationAdmin(HTU.getConfiguration());
    String peerId="region_replica_replication";
    ReplicationPeerConfig peerConfig=null;
    try {
      peerConfig=admin.getPeerConfig(peerId);
    }
 catch (    ReplicationPeerNotFoundException e) {
      LOG.warn("Region replica replication peer id=" + peerId + " not exist",e);
    }
    if (peerConfig != null) {
      admin.removePeer(peerId);
      peerConfig=null;
    }
    HTableDescriptor htd=HTU.createTableDescriptor("testRegionReplicaReplicationPeerIsCreatedForModifyTable");
    HTU.getAdmin().createTable(htd);
    try {
      peerConfig=admin.getPeerConfig(peerId);
      fail("Should throw ReplicationException, because replication peer id=" + peerId + " not exist");
    }
 catch (    ReplicationPeerNotFoundException e) {
    }
    assertNull(peerConfig);
    HTU.getAdmin().disableTable(htd.getTableName());
    htd.setRegionReplication(2);
    HTU.getAdmin().modifyTable(htd.getTableName(),htd);
    HTU.getAdmin().enableTable(htd.getTableName());
    peerConfig=admin.getPeerConfig(peerId);
    assertNotNull(peerConfig);
    assertEquals(peerConfig.getClusterKey(),ZKConfig.getZooKeeperClusterKey(HTU.getConfiguration()));
    assertEquals(RegionReplicaReplicationEndpoint.class.getName(),peerConfig.getReplicationEndpointImpl());
    admin.close();
  }
  public void testRegionReplicaReplication(  int regionReplication) throws Exception {
    TableName tableName=TableName.valueOf("testRegionReplicaReplicationWithReplicas_" + regionReplication);
    HTableDescriptor htd=HTU.createTableDescriptor(tableName.toString());
    htd.setRegionReplication(regionReplication);
    HTU.getAdmin().createTable(htd);
    TableName tableNameNoReplicas=TableName.valueOf("testRegionReplicaReplicationWithReplicas_NO_REPLICAS");
    HTU.deleteTableIfAny(tableNameNoReplicas);
    HTU.createTable(tableNameNoReplicas,HBaseTestingUtility.fam1);
    Connection connection=ConnectionFactory.createConnection(HTU.getConfiguration());
    Table table=connection.getTable(tableName);
    Table tableNoReplicas=connection.getTable(tableNameNoReplicas);
    try {
      HTU.loadNumericRows(tableNoReplicas,HBaseTestingUtility.fam1,6000,7000);
      HTU.loadNumericRows(table,HBaseTestingUtility.fam1,0,1000);
      verifyReplication(tableName,regionReplication,0,1000);
    }
  finally {
      table.close();
      tableNoReplicas.close();
      HTU.deleteTableIfAny(tableNameNoReplicas);
      connection.close();
    }
  }
  private void verifyReplication(  TableName tableName,  int regionReplication,  final int startRow,  final int endRow) throws Exception {
    verifyReplication(tableName,regionReplication,startRow,endRow,true);
  }
  private void verifyReplication(  TableName tableName,  int regionReplication,  final int startRow,  final int endRow,  final boolean present) throws Exception {
    final Region[] regions=new Region[regionReplication];
    for (int i=0; i < NB_SERVERS; i++) {
      HRegionServer rs=HTU.getMiniHBaseCluster().getRegionServer(i);
      List<HRegion> onlineRegions=rs.getRegions(tableName);
      for (      HRegion region : onlineRegions) {
        regions[region.getRegionInfo().getReplicaId()]=region;
      }
    }
    for (    Region region : regions) {
      assertNotNull(region);
    }
    for (int i=1; i < regionReplication; i++) {
      final Region region=regions[i];
      Waiter.waitFor(HTU.getConfiguration(),90000,new Waiter.Predicate<Exception>(){
        @Override public boolean evaluate() throws Exception {
          LOG.info("verifying replication for region replica:" + region.getRegionInfo());
          try {
            HTU.verifyNumericRows(region,HBaseTestingUtility.fam1,startRow,endRow,present);
          }
 catch (          Throwable ex) {
            LOG.warn("Verification from secondary region is not complete yet",ex);
            return false;
          }
          return true;
        }
      }
);
    }
  }
  @Test public void testRegionReplicaReplicationWith2Replicas() throws Exception {
    testRegionReplicaReplication(2);
  }
  @Test public void testRegionReplicaReplicationWith3Replicas() throws Exception {
    testRegionReplicaReplication(3);
  }
  @Test public void testRegionReplicaReplicationWith10Replicas() throws Exception {
    testRegionReplicaReplication(10);
  }
  @Test public void testRegionReplicaWithoutMemstoreReplication() throws Exception {
    int regionReplication=3;
    final TableName tableName=TableName.valueOf(name.getMethodName());
    HTableDescriptor htd=HTU.createTableDescriptor(tableName);
    htd.setRegionReplication(regionReplication);
    htd.setRegionMemstoreReplication(false);
    HTU.getAdmin().createTable(htd);
    Connection connection=ConnectionFactory.createConnection(HTU.getConfiguration());
    Table table=connection.getTable(tableName);
    try {
      final int STEP=100;
      for (int i=0; i < 3; ++i) {
        final int startRow=i * STEP;
        final int endRow=(i + 1) * STEP;
        LOG.info("Writing data from " + startRow + " to "+ endRow);
        HTU.loadNumericRows(table,HBaseTestingUtility.fam1,startRow,endRow);
        verifyReplication(tableName,regionReplication,startRow,endRow,false);
        LOG.info("flushing table");
        HTU.flush(tableName);
        verifyReplication(tableName,regionReplication,0,endRow,true);
      }
    }
  finally {
      table.close();
      connection.close();
    }
  }
  @Test public void testRegionReplicaReplicationForFlushAndCompaction() throws Exception {
    int regionReplication=3;
    final TableName tableName=TableName.valueOf(name.getMethodName());
    HTableDescriptor htd=HTU.createTableDescriptor(tableName);
    htd.setRegionReplication(regionReplication);
    HTU.getAdmin().createTable(htd);
    Connection connection=ConnectionFactory.createConnection(HTU.getConfiguration());
    Table table=connection.getTable(tableName);
    try {
      for (int i=0; i < 6000; i+=1000) {
        LOG.info("Writing data from " + i + " to "+ (i + 1000));
        HTU.loadNumericRows(table,HBaseTestingUtility.fam1,i,i + 1000);
        LOG.info("flushing table");
        HTU.flush(tableName);
        LOG.info("compacting table");
        HTU.compact(tableName,false);
      }
      verifyReplication(tableName,regionReplication,0,1000);
    }
  finally {
      table.close();
      connection.close();
    }
  }
  @Test public void testRegionReplicaReplicationIgnoresDisabledTables() throws Exception {
    testRegionReplicaReplicationIgnoresDisabledTables(false);
  }
  @Test public void testRegionReplicaReplicationIgnoresDroppedTables() throws Exception {
    testRegionReplicaReplicationIgnoresDisabledTables(true);
  }
  public void testRegionReplicaReplicationIgnoresDisabledTables(  boolean dropTable) throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName() + dropTable);
    HTableDescriptor htd=HTU.createTableDescriptor(tableName);
    int regionReplication=3;
    htd.setRegionReplication(regionReplication);
    HTU.deleteTableIfAny(tableName);
    HTU.getAdmin().createTable(htd);
    TableName toBeDisabledTable=TableName.valueOf(dropTable ? "droppedTable" : "disabledTable");
    HTU.deleteTableIfAny(toBeDisabledTable);
    htd=HTU.createTableDescriptor(toBeDisabledTable.toString());
    htd.setRegionReplication(regionReplication);
    HTU.getAdmin().createTable(htd);
    ReplicationAdmin admin=new ReplicationAdmin(HTU.getConfiguration());
    admin.disablePeer(ServerRegionReplicaUtil.getReplicationPeerId());
    Connection connection=ConnectionFactory.createConnection(HTU.getConfiguration());
    Table table=connection.getTable(tableName);
    Table tableToBeDisabled=connection.getTable(toBeDisabledTable);
    HTU.loadNumericRows(tableToBeDisabled,HBaseTestingUtility.fam1,6000,7000);
    AtomicLong skippedEdits=new AtomicLong();
    RegionReplicaReplicationEndpoint.RegionReplicaOutputSink sink=mock(RegionReplicaReplicationEndpoint.RegionReplicaOutputSink.class);
    when(sink.getSkippedEditsCounter()).thenReturn(skippedEdits);
    RegionReplicaReplicationEndpoint.RegionReplicaSinkWriter sinkWriter=new RegionReplicaReplicationEndpoint.RegionReplicaSinkWriter(sink,(ClusterConnection)connection,Executors.newSingleThreadExecutor(),Integer.MAX_VALUE);
    RegionLocator rl=connection.getRegionLocator(toBeDisabledTable);
    HRegionLocation hrl=rl.getRegionLocation(HConstants.EMPTY_BYTE_ARRAY);
    byte[] encodedRegionName=hrl.getRegionInfo().getEncodedNameAsBytes();
    Entry entry=new Entry(new WALKeyImpl(encodedRegionName,toBeDisabledTable,1),new WALEdit());
    HTU.getAdmin().disableTable(toBeDisabledTable);
    if (dropTable) {
      HTU.getAdmin().deleteTable(toBeDisabledTable);
    }
    sinkWriter.append(toBeDisabledTable,encodedRegionName,HConstants.EMPTY_BYTE_ARRAY,Lists.newArrayList(entry,entry));
    assertEquals(2,skippedEdits.get());
    try {
      HTU.loadNumericRows(table,HBaseTestingUtility.fam1,0,1000);
      admin.enablePeer(ServerRegionReplicaUtil.getReplicationPeerId());
      verifyReplication(tableName,regionReplication,0,1000);
    }
  finally {
      admin.close();
      table.close();
      rl.close();
      tableToBeDisabled.close();
      HTU.deleteTableIfAny(toBeDisabledTable);
      connection.close();
    }
  }
}
