@Category({RestTests.class,MediumTests.class}) public class TestScannersWithFilters {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestScannersWithFilters.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestScannersWithFilters.class);
  private static final TableName TABLE=TableName.valueOf("TestScannersWithFilters");
  private static final byte[][] ROWS_ONE={Bytes.toBytes("testRowOne-0"),Bytes.toBytes("testRowOne-1"),Bytes.toBytes("testRowOne-2"),Bytes.toBytes("testRowOne-3")};
  private static final byte[][] ROWS_TWO={Bytes.toBytes("testRowTwo-0"),Bytes.toBytes("testRowTwo-1"),Bytes.toBytes("testRowTwo-2"),Bytes.toBytes("testRowTwo-3")};
  private static final byte[][] FAMILIES={Bytes.toBytes("testFamilyOne"),Bytes.toBytes("testFamilyTwo")};
  private static final byte[][] QUALIFIERS_ONE={Bytes.toBytes("testQualifierOne-0"),Bytes.toBytes("testQualifierOne-1"),Bytes.toBytes("testQualifierOne-2"),Bytes.toBytes("testQualifierOne-3")};
  private static final byte[][] QUALIFIERS_TWO={Bytes.toBytes("testQualifierTwo-0"),Bytes.toBytes("testQualifierTwo-1"),Bytes.toBytes("testQualifierTwo-2"),Bytes.toBytes("testQualifierTwo-3")};
  private static final byte[][] VALUES={Bytes.toBytes("testValueOne"),Bytes.toBytes("testValueTwo")};
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final HBaseRESTTestingUtility REST_TEST_UTIL=new HBaseRESTTestingUtility();
  private static Client client;
  private static JAXBContext context;
  private static Marshaller marshaller;
  private static Unmarshaller unmarshaller;
  private static long numRows=(long)ROWS_ONE.length + ROWS_TWO.length;
  private static long colsPerRow=(long)FAMILIES.length * QUALIFIERS_ONE.length;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.startMiniCluster(3);
    REST_TEST_UTIL.startServletContainer(TEST_UTIL.getConfiguration());
    context=JAXBContext.newInstance(CellModel.class,CellSetModel.class,RowModel.class,ScannerModel.class);
    marshaller=context.createMarshaller();
    unmarshaller=context.createUnmarshaller();
    client=new Client(new Cluster().add("localhost",REST_TEST_UTIL.getServletPort()));
    Admin admin=TEST_UTIL.getAdmin();
    if (!admin.tableExists(TABLE)) {
      HTableDescriptor htd=new HTableDescriptor(TABLE);
      htd.addFamily(new HColumnDescriptor(FAMILIES[0]));
      htd.addFamily(new HColumnDescriptor(FAMILIES[1]));
      admin.createTable(htd);
      Table table=TEST_UTIL.getConnection().getTable(TABLE);
      for (      byte[] ROW : ROWS_ONE) {
        Put p=new Put(ROW);
        p.setDurability(Durability.SKIP_WAL);
        for (        byte[] QUALIFIER : QUALIFIERS_ONE) {
          p.addColumn(FAMILIES[0],QUALIFIER,VALUES[0]);
        }
        table.put(p);
      }
      for (      byte[] ROW : ROWS_TWO) {
        Put p=new Put(ROW);
        p.setDurability(Durability.SKIP_WAL);
        for (        byte[] QUALIFIER : QUALIFIERS_TWO) {
          p.addColumn(FAMILIES[1],QUALIFIER,VALUES[1]);
        }
        table.put(p);
      }
      for (      byte[] ROW : ROWS_ONE) {
        Put p=new Put(ROW);
        p.setDurability(Durability.SKIP_WAL);
        for (        byte[] QUALIFIER : QUALIFIERS_ONE) {
          p.addColumn(FAMILIES[1],QUALIFIER,VALUES[0]);
        }
        table.put(p);
      }
      for (      byte[] ROW : ROWS_TWO) {
        Put p=new Put(ROW);
        p.setDurability(Durability.SKIP_WAL);
        for (        byte[] QUALIFIER : QUALIFIERS_TWO) {
          p.addColumn(FAMILIES[0],QUALIFIER,VALUES[1]);
        }
        table.put(p);
      }
      for (      byte[] ROW : ROWS_ONE) {
        Delete d=new Delete(ROW);
        d.addColumns(FAMILIES[0],QUALIFIERS_ONE[1]);
        d.addColumns(FAMILIES[1],QUALIFIERS_ONE[1]);
        table.delete(d);
      }
      for (      byte[] ROW : ROWS_TWO) {
        Delete d=new Delete(ROW);
        d.addColumns(FAMILIES[0],QUALIFIERS_TWO[1]);
        d.addColumns(FAMILIES[1],QUALIFIERS_TWO[1]);
        table.delete(d);
      }
      colsPerRow-=2;
      for (      byte[] QUALIFIER : QUALIFIERS_ONE) {
        Delete d=new Delete(ROWS_ONE[1]);
        d.addColumns(FAMILIES[0],QUALIFIER);
        d.addColumns(FAMILIES[1],QUALIFIER);
        table.delete(d);
      }
      for (      byte[] QUALIFIER : QUALIFIERS_TWO) {
        Delete d=new Delete(ROWS_TWO[1]);
        d.addColumns(FAMILIES[0],QUALIFIER);
        d.addColumns(FAMILIES[1],QUALIFIER);
        table.delete(d);
      }
      numRows-=2;
      table.close();
    }
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    REST_TEST_UTIL.shutdownServletContainer();
    TEST_UTIL.shutdownMiniCluster();
  }
  private static void verifyScan(  Scan s,  long expectedRows,  long expectedKeys) throws Exception {
    ScannerModel model=ScannerModel.fromScan(s);
    model.setBatch(Integer.MAX_VALUE);
    StringWriter writer=new StringWriter();
    marshaller.marshal(model,writer);
    LOG.debug(writer.toString());
    byte[] body=Bytes.toBytes(writer.toString());
    Response response=client.put("/" + TABLE + "/scanner",Constants.MIMETYPE_XML,body);
    assertEquals(201,response.getCode());
    String scannerURI=response.getLocation();
    assertNotNull(scannerURI);
    response=client.get(scannerURI,Constants.MIMETYPE_XML);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_XML,response.getHeader("content-type"));
    CellSetModel cells=(CellSetModel)unmarshaller.unmarshal(new ByteArrayInputStream(response.getBody()));
    int rows=cells.getRows().size();
    assertTrue("Scanned too many rows! Only expected " + expectedRows + " total but scanned "+ rows,expectedRows == rows);
    for (    RowModel row : cells.getRows()) {
      int count=row.getCells().size();
      assertEquals("Expected " + expectedKeys + " keys per row but "+ "returned "+ count,expectedKeys,count);
    }
    response=client.delete(scannerURI);
    assertEquals(200,response.getCode());
  }
  private static void verifyScanFull(  Scan s,  KeyValue[] kvs) throws Exception {
    ScannerModel model=ScannerModel.fromScan(s);
    model.setBatch(Integer.MAX_VALUE);
    StringWriter writer=new StringWriter();
    marshaller.marshal(model,writer);
    LOG.debug(writer.toString());
    byte[] body=Bytes.toBytes(writer.toString());
    Response response=client.put("/" + TABLE + "/scanner",Constants.MIMETYPE_XML,body);
    assertEquals(201,response.getCode());
    String scannerURI=response.getLocation();
    assertNotNull(scannerURI);
    response=client.get(scannerURI,Constants.MIMETYPE_XML);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_XML,response.getHeader("content-type"));
    CellSetModel cellSet=(CellSetModel)unmarshaller.unmarshal(new ByteArrayInputStream(response.getBody()));
    response=client.delete(scannerURI);
    assertEquals(200,response.getCode());
    int row=0;
    int idx=0;
    Iterator<RowModel> i=cellSet.getRows().iterator();
    for (boolean done=true; done; row++) {
      done=i.hasNext();
      if (!done)       break;
      RowModel rowModel=i.next();
      List<CellModel> cells=rowModel.getCells();
      if (cells.isEmpty())       break;
      assertTrue("Scanned too many keys! Only expected " + kvs.length + " total but already scanned "+ (cells.size() + idx),kvs.length >= idx + cells.size());
      for (      CellModel cell : cells) {
        assertTrue("Row mismatch",Bytes.equals(rowModel.getKey(),CellUtil.cloneRow(kvs[idx])));
        byte[][] split=CellUtil.parseColumn(cell.getColumn());
        assertTrue("Family mismatch",Bytes.equals(split[0],CellUtil.cloneFamily(kvs[idx])));
        assertTrue("Qualifier mismatch",Bytes.equals(split[1],CellUtil.cloneQualifier(kvs[idx])));
        assertTrue("Value mismatch",Bytes.equals(cell.getValue(),CellUtil.cloneValue(kvs[idx])));
        idx++;
      }
    }
    assertEquals("Expected " + kvs.length + " total keys but scanned "+ idx,kvs.length,idx);
  }
  private static void verifyScanNoEarlyOut(  Scan s,  long expectedRows,  long expectedKeys) throws Exception {
    ScannerModel model=ScannerModel.fromScan(s);
    model.setBatch(Integer.MAX_VALUE);
    StringWriter writer=new StringWriter();
    marshaller.marshal(model,writer);
    LOG.debug(writer.toString());
    byte[] body=Bytes.toBytes(writer.toString());
    Response response=client.put("/" + TABLE + "/scanner",Constants.MIMETYPE_XML,body);
    assertEquals(201,response.getCode());
    String scannerURI=response.getLocation();
    assertNotNull(scannerURI);
    response=client.get(scannerURI,Constants.MIMETYPE_XML);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_XML,response.getHeader("content-type"));
    CellSetModel cellSet=(CellSetModel)unmarshaller.unmarshal(new ByteArrayInputStream(response.getBody()));
    response=client.delete(scannerURI);
    assertEquals(200,response.getCode());
    Iterator<RowModel> i=cellSet.getRows().iterator();
    int j=0;
    for (boolean done=true; done; j++) {
      done=i.hasNext();
      if (!done)       break;
      RowModel rowModel=i.next();
      List<CellModel> cells=rowModel.getCells();
      if (cells.isEmpty())       break;
      assertTrue("Scanned too many rows! Only expected " + expectedRows + " total but already scanned "+ (j + 1),expectedRows > j);
      assertEquals("Expected " + expectedKeys + " keys per row but "+ "returned "+ cells.size(),expectedKeys,cells.size());
    }
    assertEquals("Expected " + expectedRows + " rows but scanned "+ j+ " rows",expectedRows,j);
  }
  @Test public void testNoFilter() throws Exception {
    long expectedRows=numRows;
    long expectedKeys=colsPerRow;
    Scan s=new Scan();
    verifyScan(s,expectedRows,expectedKeys);
    s=new Scan();
    s.addFamily(FAMILIES[0]);
    verifyScan(s,expectedRows,expectedKeys / 2);
  }
  @Test public void testPrefixFilter() throws Exception {
    long expectedRows=numRows / 2;
    long expectedKeys=colsPerRow;
    Scan s=new Scan();
    s.setFilter(new PrefixFilter(Bytes.toBytes("testRowOne")));
    verifyScan(s,expectedRows,expectedKeys);
  }
  @Test public void testPageFilter() throws Exception {
    KeyValue[] expectedKVs={new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1])};
    long expectedRows=6;
    long expectedKeys=colsPerRow;
    Scan s=new Scan();
    s.setFilter(new PageFilter(expectedRows));
    verifyScan(s,expectedRows,expectedKeys);
    s.setFilter(new PageFilter(expectedRows));
    verifyScanFull(s,expectedKVs);
    expectedRows=4;
    expectedKeys=colsPerRow;
    s=new Scan();
    s.setFilter(new PageFilter(expectedRows));
    verifyScan(s,expectedRows,expectedKeys);
    s.setFilter(new PageFilter(expectedRows));
    verifyScanFull(s,Arrays.copyOf(expectedKVs,24));
    expectedRows=2;
    expectedKeys=colsPerRow;
    s=new Scan();
    s.setFilter(new PageFilter(expectedRows));
    verifyScan(s,expectedRows,expectedKeys);
    s.setFilter(new PageFilter(expectedRows));
    verifyScanFull(s,Arrays.copyOf(expectedKVs,12));
    expectedRows=1;
    expectedKeys=colsPerRow;
    s=new Scan();
    s.setFilter(new PageFilter(expectedRows));
    verifyScan(s,expectedRows,expectedKeys);
    s.setFilter(new PageFilter(expectedRows));
    verifyScanFull(s,Arrays.copyOf(expectedKVs,6));
  }
  @Test public void testInclusiveStopFilter() throws Exception {
    long expectedRows=(numRows / 2) - 1;
    long expectedKeys=colsPerRow;
    Scan s=new Scan(Bytes.toBytes("testRowOne-0"),Bytes.toBytes("testRowOne-3"));
    verifyScan(s,expectedRows,expectedKeys);
    expectedRows=numRows / 2;
    s=new Scan(Bytes.toBytes("testRowOne-0"));
    s.setFilter(new InclusiveStopFilter(Bytes.toBytes("testRowOne-3")));
    verifyScan(s,expectedRows,expectedKeys);
    expectedRows=(numRows / 2) - 1;
    expectedKeys=colsPerRow;
    s=new Scan(Bytes.toBytes("testRowTwo-0"),Bytes.toBytes("testRowTwo-3"));
    verifyScan(s,expectedRows,expectedKeys);
    expectedRows=numRows / 2;
    s=new Scan(Bytes.toBytes("testRowTwo-0"));
    s.setFilter(new InclusiveStopFilter(Bytes.toBytes("testRowTwo-3")));
    verifyScan(s,expectedRows,expectedKeys);
  }
  @Test public void testQualifierFilter() throws Exception {
    long expectedRows=numRows / 2;
    long expectedKeys=2;
    Filter f=new QualifierFilter(CompareOperator.EQUAL,new BinaryComparator(Bytes.toBytes("testQualifierOne-2")));
    Scan s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows / 2;
    expectedKeys=2;
    f=new QualifierFilter(CompareOperator.LESS,new BinaryComparator(Bytes.toBytes("testQualifierOne-2")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows / 2;
    expectedKeys=4;
    f=new QualifierFilter(CompareOperator.LESS_OR_EQUAL,new BinaryComparator(Bytes.toBytes("testQualifierOne-2")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows / 2;
    expectedKeys=4;
    f=new QualifierFilter(CompareOperator.NOT_EQUAL,new BinaryComparator(Bytes.toBytes("testQualifierOne-2")));
    s=new Scan(HConstants.EMPTY_START_ROW,Bytes.toBytes("testRowTwo"));
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows / 2;
    expectedKeys=4;
    f=new QualifierFilter(CompareOperator.GREATER_OR_EQUAL,new BinaryComparator(Bytes.toBytes("testQualifierOne-2")));
    s=new Scan(HConstants.EMPTY_START_ROW,Bytes.toBytes("testRowTwo"));
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows / 2;
    expectedKeys=2;
    f=new QualifierFilter(CompareOperator.GREATER,new BinaryComparator(Bytes.toBytes("testQualifierOne-2")));
    s=new Scan(HConstants.EMPTY_START_ROW,Bytes.toBytes("testRowTwo"));
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    f=new QualifierFilter(CompareOperator.NOT_EQUAL,new BinaryComparator(QUALIFIERS_ONE[2]));
    s=new Scan();
    s.setFilter(f);
    KeyValue[] kvs={new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1])};
    verifyScanFull(s,kvs);
    f=new QualifierFilter(CompareOperator.NOT_EQUAL,new RegexStringComparator("test.+-2"));
    s=new Scan();
    s.setFilter(f);
    kvs=new KeyValue[]{new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1])};
    verifyScanFull(s,kvs);
  }
  @Test public void testRowFilter() throws Exception {
    long expectedRows=1;
    long expectedKeys=colsPerRow;
    Filter f=new RowFilter(CompareOperator.EQUAL,new BinaryComparator(Bytes.toBytes("testRowOne-2")));
    Scan s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=2;
    expectedKeys=colsPerRow;
    f=new RowFilter(CompareOperator.EQUAL,new RegexStringComparator("testRow.+-2"));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=1;
    expectedKeys=colsPerRow;
    f=new RowFilter(CompareOperator.LESS,new BinaryComparator(Bytes.toBytes("testRowOne-2")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=2;
    expectedKeys=colsPerRow;
    f=new RowFilter(CompareOperator.LESS_OR_EQUAL,new BinaryComparator(Bytes.toBytes("testRowOne-2")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows - 1;
    expectedKeys=colsPerRow;
    f=new RowFilter(CompareOperator.NOT_EQUAL,new BinaryComparator(Bytes.toBytes("testRowOne-2")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows - 1;
    expectedKeys=colsPerRow;
    f=new RowFilter(CompareOperator.GREATER_OR_EQUAL,new BinaryComparator(Bytes.toBytes("testRowOne-2")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows - 2;
    expectedKeys=colsPerRow;
    f=new RowFilter(CompareOperator.GREATER,new BinaryComparator(Bytes.toBytes("testRowOne-2")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    f=new RowFilter(CompareOperator.NOT_EQUAL,new BinaryComparator(Bytes.toBytes("testRowOne-2")));
    s=new Scan();
    s.setFilter(f);
    KeyValue[] kvs={new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[0],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1])};
    verifyScanFull(s,kvs);
    f=new RowFilter(CompareOperator.EQUAL,new RegexStringComparator(".+-2"));
    s=new Scan();
    s.setFilter(f);
    kvs=new KeyValue[]{new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_ONE[2],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[1],QUALIFIERS_ONE[3],VALUES[0]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1])};
    verifyScanFull(s,kvs);
  }
  @Test public void testValueFilter() throws Exception {
    long expectedRows=numRows / 2;
    long expectedKeys=colsPerRow;
    Filter f=new ValueFilter(CompareOperator.EQUAL,new BinaryComparator(Bytes.toBytes("testValueOne")));
    Scan s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows / 2;
    expectedKeys=colsPerRow;
    f=new ValueFilter(CompareOperator.EQUAL,new BinaryComparator(Bytes.toBytes("testValueTwo")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows;
    expectedKeys=colsPerRow;
    f=new ValueFilter(CompareOperator.EQUAL,new RegexStringComparator("testValue((One)|(Two))"));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows / 2;
    expectedKeys=colsPerRow;
    f=new ValueFilter(CompareOperator.LESS,new BinaryComparator(Bytes.toBytes("testValueTwo")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows;
    expectedKeys=colsPerRow;
    f=new ValueFilter(CompareOperator.LESS_OR_EQUAL,new BinaryComparator(Bytes.toBytes("testValueTwo")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows / 2;
    expectedKeys=colsPerRow;
    f=new ValueFilter(CompareOperator.LESS_OR_EQUAL,new BinaryComparator(Bytes.toBytes("testValueOne")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows / 2;
    expectedKeys=colsPerRow;
    f=new ValueFilter(CompareOperator.NOT_EQUAL,new BinaryComparator(Bytes.toBytes("testValueOne")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows;
    expectedKeys=colsPerRow;
    f=new ValueFilter(CompareOperator.GREATER_OR_EQUAL,new BinaryComparator(Bytes.toBytes("testValueOne")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    expectedRows=numRows / 2;
    expectedKeys=colsPerRow;
    f=new ValueFilter(CompareOperator.GREATER,new BinaryComparator(Bytes.toBytes("testValueOne")));
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,expectedRows,expectedKeys);
    f=new ValueFilter(CompareOperator.NOT_EQUAL,new BinaryComparator(Bytes.toBytes("testValueOne")));
    s=new Scan();
    s.setFilter(f);
    KeyValue[] kvs={new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1])};
    verifyScanFull(s,kvs);
  }
  @Test public void testSkipFilter() throws Exception {
    Filter f=new SkipFilter(new QualifierFilter(CompareOperator.NOT_EQUAL,new BinaryComparator(Bytes.toBytes("testQualifierOne-2"))));
    Scan s=new Scan();
    s.setFilter(f);
    KeyValue[] kvs={new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[0],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[3],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[2],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[1],QUALIFIERS_TWO[3],VALUES[1])};
    verifyScanFull(s,kvs);
  }
  @Test public void testFilterList() throws Exception {
    List<Filter> filters=new ArrayList<>(3);
    filters.add(new RowFilter(CompareOperator.EQUAL,new RegexStringComparator(".+-2")));
    filters.add(new QualifierFilter(CompareOperator.EQUAL,new RegexStringComparator(".+-2")));
    filters.add(new ValueFilter(CompareOperator.EQUAL,new SubstringComparator("One")));
    Filter f=new FilterList(Operator.MUST_PASS_ALL,filters);
    Scan s=new Scan();
    s.addFamily(FAMILIES[0]);
    s.setFilter(f);
    KeyValue[] kvs={new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[2],VALUES[0])};
    verifyScanFull(s,kvs);
    filters.clear();
    filters.add(new RowFilter(CompareOperator.EQUAL,new RegexStringComparator(".+Two.+")));
    filters.add(new QualifierFilter(CompareOperator.EQUAL,new RegexStringComparator(".+-2")));
    filters.add(new ValueFilter(CompareOperator.EQUAL,new SubstringComparator("One")));
    f=new FilterList(Operator.MUST_PASS_ONE,filters);
    s=new Scan();
    s.setFilter(f);
    verifyScanNoEarlyOut(s,numRows,colsPerRow);
  }
  @Test public void testFirstKeyOnlyFilter() throws Exception {
    Scan s=new Scan();
    s.setFilter(new FirstKeyOnlyFilter());
    KeyValue[] kvs={new KeyValue(ROWS_ONE[0],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[2],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_ONE[3],FAMILIES[0],QUALIFIERS_ONE[0],VALUES[0]),new KeyValue(ROWS_TWO[0],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[2],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1]),new KeyValue(ROWS_TWO[3],FAMILIES[0],QUALIFIERS_TWO[0],VALUES[1])};
    verifyScanFull(s,kvs);
  }
}
