@Category({MetricsTests.class,SmallTests.class}) public class TestCompatibilitySingletonFactory {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCompatibilitySingletonFactory.class);
  private static final int ITERATIONS=100000;
  private static final Random RANDOM=new Random();
private class TestCompatibilitySingletonFactoryCallable implements Callable<String> {
    @Override public String call() throws Exception {
      Thread.sleep(RANDOM.nextInt(10));
      RandomStringGenerator instance=CompatibilitySingletonFactory.getInstance(RandomStringGenerator.class);
      return instance.getRandString();
    }
  }
  @Test public void testGetInstance() throws Exception {
    List<TestCompatibilitySingletonFactoryCallable> callables=new ArrayList<>(ITERATIONS);
    List<String> resultStrings=new ArrayList<>(ITERATIONS);
    for (int i=0; i < ITERATIONS; i++) {
      callables.add(new TestCompatibilitySingletonFactoryCallable());
    }
    ExecutorService executorService=Executors.newFixedThreadPool(100);
    List<Future<String>> futures=executorService.invokeAll(callables);
    for (    Future<String> f : futures) {
      resultStrings.add(f.get());
    }
    String firstString=resultStrings.get(0);
    for (    String s : resultStrings) {
      assertEquals(firstString,s);
    }
    assertNotEquals(new RandomStringGeneratorImpl().getRandString(),firstString);
  }
}
