public static class SlowMeCoproScanOperations implements RegionCoprocessor, RegionObserver {
  static final AtomicLong sleepTime=new AtomicLong(2000);
  Random r=new Random();
  AtomicLong countOfNext=new AtomicLong(0);
  AtomicLong countOfOpen=new AtomicLong(0);
  public SlowMeCoproScanOperations(){
  }
  @Override public Optional<RegionObserver> getRegionObserver(){
    return Optional.of(this);
  }
  @Override public void preScannerOpen(  final ObserverContext<RegionCoprocessorEnvironment> e,  final Scan scan) throws IOException {
    if (countOfOpen.incrementAndGet() == 2) {
      slowdownCode(e);
    }
  }
  @Override public boolean preScannerNext(  final ObserverContext<RegionCoprocessorEnvironment> e,  final InternalScanner s,  final List<Result> results,  final int limit,  final boolean hasMore) throws IOException {
    countOfNext.incrementAndGet();
    if (countOfNext.get() == 0 || countOfNext.get() == 4) {
      slowdownCode(e);
    }
    return true;
  }
  protected void slowdownCode(  final ObserverContext<RegionCoprocessorEnvironment> e){
    if (e.getEnvironment().getRegion().getRegionInfo().getReplicaId() == 0) {
      try {
        if (sleepTime.get() > 0) {
          LOG.info("Sleeping for " + sleepTime.get() + " ms");
          Thread.sleep(sleepTime.get());
        }
      }
 catch (      InterruptedException e1) {
        LOG.error(e1.toString(),e1);
      }
    }
  }
}
