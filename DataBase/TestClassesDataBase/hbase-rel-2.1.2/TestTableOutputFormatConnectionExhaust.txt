/** 
 * Spark creates many instances of TableOutputFormat within a single process.  We need to make sure we can have many instances and not leak connections. This test creates a few TableOutputFormats and shouldn't fail due to ZK connection exhaustion.
 */
@Category(MediumTests.class) public class TestTableOutputFormatConnectionExhaust {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestTableOutputFormatConnectionExhaust.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestTableOutputFormatConnectionExhaust.class);
  private final static HBaseTestingUtility UTIL=new HBaseTestingUtility();
  static final String TABLE="TestTableOutputFormatConnectionExhaust";
  static final String FAMILY="family";
  @BeforeClass public static void beforeClass() throws Exception {
    UTIL.getConfiguration().setInt(HConstants.ZOOKEEPER_MAX_CLIENT_CNXNS,10);
    UTIL.startMiniCluster();
  }
  @AfterClass public static void afterClass() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  @Before public void before() throws IOException {
    LOG.info("before");
    UTIL.ensureSomeRegionServersAvailable(1);
    LOG.info("before done");
  }
  /** 
 * Open and close a TableOutputFormat.  The closing the RecordWriter should release HBase Connection (ZK) resources, and will throw exception if they are exhausted.
 */
  static void openCloseTableOutputFormat(  int iter) throws IOException {
    LOG.info("Instantiating TableOutputFormat connection  " + iter);
    JobConf conf=new JobConf();
    conf.addResource(UTIL.getConfiguration());
    conf.set(TableOutputFormat.OUTPUT_TABLE,TABLE);
    TableMapReduceUtil.initTableMapJob(TABLE,FAMILY,TableMap.class,ImmutableBytesWritable.class,ImmutableBytesWritable.class,conf);
    TableOutputFormat tof=new TableOutputFormat();
    RecordWriter rw=tof.getRecordWriter(null,conf,TABLE,null);
    rw.close(null);
  }
  @Test public void testConnectionExhaustion() throws IOException {
    int MAX_INSTANCES=5;
    for (int i=0; i < MAX_INSTANCES; i++) {
      final int iter=i;
      try {
        openCloseTableOutputFormat(iter);
      }
 catch (      Exception e) {
        LOG.error("Exception encountered",e);
        fail("Failed on iteration " + i);
      }
    }
  }
}
