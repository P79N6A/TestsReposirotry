@Category({MasterTests.class,MediumTests.class}) public class TestMasterAbortWhileMergingTable {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMasterAbortWhileMergingTable.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestMasterAbortWhileMergingTable.class);
  protected static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static TableName TABLE_NAME=TableName.valueOf("test");
  private static Admin admin;
  private static byte[] CF=Bytes.toBytes("cf");
  private static byte[] SPLITKEY=Bytes.toBytes("bbbbbbb");
  private static CountDownLatch mergeCommitArrive=new CountDownLatch(1);
  @BeforeClass public static void setupCluster() throws Exception {
    UTIL.getConfiguration().set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,MergeRegionObserver.class.getName());
    UTIL.startMiniCluster(3);
    admin=UTIL.getHBaseAdmin();
    byte[][] splitKeys=new byte[1][];
    splitKeys[0]=SPLITKEY;
    UTIL.createTable(TABLE_NAME,CF,splitKeys);
    UTIL.waitTableAvailable(TABLE_NAME);
  }
  @AfterClass public static void cleanupTest() throws Exception {
    try {
      UTIL.shutdownMiniCluster();
    }
 catch (    Exception e) {
      LOG.warn("failure shutting down cluster",e);
    }
  }
  @Test public void test() throws Exception {
    List<RegionInfo> regionInfos=admin.getRegions(TABLE_NAME);
    MergeTableRegionsProcedure mergeTableRegionsProcedure=new MergeTableRegionsProcedure(UTIL.getMiniHBaseCluster().getMaster().getMasterProcedureExecutor().getEnvironment(),regionInfos.get(0),regionInfos.get(1));
    long procID=UTIL.getMiniHBaseCluster().getMaster().getMasterProcedureExecutor().submitProcedure(mergeTableRegionsProcedure);
    mergeCommitArrive.await();
    UTIL.getMiniHBaseCluster().stopMaster(0);
    UTIL.getMiniHBaseCluster().startMaster();
    UTIL.waitFor(30000,() -> UTIL.getMiniHBaseCluster().getMaster() != null && UTIL.getMiniHBaseCluster().getMaster().isInitialized());
    UTIL.waitFor(30000,() -> UTIL.getMiniHBaseCluster().getMaster().getMasterProcedureExecutor().isFinished(procID));
    Assert.assertTrue("Found region RIT, that's impossible!",UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager().getRegionsInTransition().size() == 0);
  }
public static class MergeRegionObserver implements MasterCoprocessor, MasterObserver {
    @Override public Optional<MasterObserver> getMasterObserver(){
      return Optional.of(this);
    }
    @Override public void preMergeRegionsCommitAction(    ObserverContext<MasterCoprocessorEnvironment> ctx,    RegionInfo[] regionsToMerge,    List<Mutation> metaEntries){
      mergeCommitArrive.countDown();
      LOG.error("mergeCommitArrive countdown");
    }
  }
}
