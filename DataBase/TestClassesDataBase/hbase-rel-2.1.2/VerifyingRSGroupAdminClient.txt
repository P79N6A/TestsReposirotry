@InterfaceAudience.Private public class VerifyingRSGroupAdminClient implements RSGroupAdmin {
  private Table table;
  private ZKWatcher zkw;
  private RSGroupAdmin wrapped;
  public VerifyingRSGroupAdminClient(  RSGroupAdmin RSGroupAdmin,  Configuration conf) throws IOException {
    wrapped=RSGroupAdmin;
    table=ConnectionFactory.createConnection(conf).getTable(RSGroupInfoManager.RSGROUP_TABLE_NAME);
    zkw=new ZKWatcher(conf,this.getClass().getSimpleName(),null);
  }
  @Override public void addRSGroup(  String groupName) throws IOException {
    wrapped.addRSGroup(groupName);
    verify();
  }
  @Override public RSGroupInfo getRSGroupInfo(  String groupName) throws IOException {
    return wrapped.getRSGroupInfo(groupName);
  }
  @Override public RSGroupInfo getRSGroupInfoOfTable(  TableName tableName) throws IOException {
    return wrapped.getRSGroupInfoOfTable(tableName);
  }
  @Override public void moveServers(  Set<Address> servers,  String targetGroup) throws IOException {
    wrapped.moveServers(servers,targetGroup);
    verify();
  }
  @Override public void moveTables(  Set<TableName> tables,  String targetGroup) throws IOException {
    wrapped.moveTables(tables,targetGroup);
    verify();
  }
  @Override public void removeRSGroup(  String name) throws IOException {
    wrapped.removeRSGroup(name);
    verify();
  }
  @Override public boolean balanceRSGroup(  String groupName) throws IOException {
    return wrapped.balanceRSGroup(groupName);
  }
  @Override public List<RSGroupInfo> listRSGroups() throws IOException {
    return wrapped.listRSGroups();
  }
  @Override public RSGroupInfo getRSGroupOfServer(  Address hostPort) throws IOException {
    return wrapped.getRSGroupOfServer(hostPort);
  }
  @Override public void moveServersAndTables(  Set<Address> servers,  Set<TableName> tables,  String targetGroup) throws IOException {
    wrapped.moveServersAndTables(servers,tables,targetGroup);
    verify();
  }
  @Override public void removeServers(  Set<Address> servers) throws IOException {
    wrapped.removeServers(servers);
    verify();
  }
  public void verify() throws IOException {
    Map<String,RSGroupInfo> groupMap=Maps.newHashMap();
    Set<RSGroupInfo> zList=Sets.newHashSet();
    for (    Result result : table.getScanner(new Scan())) {
      RSGroupProtos.RSGroupInfo proto=RSGroupProtos.RSGroupInfo.parseFrom(result.getValue(RSGroupInfoManager.META_FAMILY_BYTES,RSGroupInfoManager.META_QUALIFIER_BYTES));
      groupMap.put(proto.getName(),RSGroupProtobufUtil.toGroupInfo(proto));
    }
    Assert.assertEquals(Sets.newHashSet(groupMap.values()),Sets.newHashSet(wrapped.listRSGroups()));
    try {
      String groupBasePath=ZNodePaths.joinZNode(zkw.getZNodePaths().baseZNode,"rsgroup");
      for (      String znode : ZKUtil.listChildrenNoWatch(zkw,groupBasePath)) {
        byte[] data=ZKUtil.getData(zkw,ZNodePaths.joinZNode(groupBasePath,znode));
        if (data.length > 0) {
          ProtobufUtil.expectPBMagicPrefix(data);
          ByteArrayInputStream bis=new ByteArrayInputStream(data,ProtobufUtil.lengthOfPBMagic(),data.length);
          zList.add(RSGroupProtobufUtil.toGroupInfo(RSGroupProtos.RSGroupInfo.parseFrom(bis)));
        }
      }
      Assert.assertEquals(zList.size(),groupMap.size());
      for (      RSGroupInfo RSGroupInfo : zList) {
        Assert.assertTrue(groupMap.get(RSGroupInfo.getName()).equals(RSGroupInfo));
      }
    }
 catch (    KeeperException e) {
      throw new IOException("ZK verification failed",e);
    }
catch (    DeserializationException e) {
      throw new IOException("ZK verification failed",e);
    }
catch (    InterruptedException e) {
      throw new IOException("ZK verification failed",e);
    }
  }
}
