/** 
 * Tests for the page filter
 */
@Category({FilterTests.class,SmallTests.class}) public class TestPageFilter {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestPageFilter.class);
  static final int ROW_LIMIT=3;
  /** 
 * test page size filter
 * @throws Exception
 */
  @Test public void testPageSize() throws Exception {
    Filter f=new PageFilter(ROW_LIMIT);
    pageSizeTests(f);
  }
  /** 
 * Test filter serialization
 * @throws Exception
 */
  @Test public void testSerialization() throws Exception {
    Filter f=new PageFilter(ROW_LIMIT);
    byte[] buffer=f.toByteArray();
    Filter newFilter=PageFilter.parseFrom(buffer);
    pageSizeTests(newFilter);
  }
  private void pageSizeTests(  Filter f) throws Exception {
    testFiltersBeyondPageSize(f,ROW_LIMIT);
  }
  private void testFiltersBeyondPageSize(  final Filter f,  final int pageSize) throws IOException {
    int count=0;
    for (int i=0; i < (pageSize * 2); i++) {
      boolean filterOut=f.filterRow();
      if (filterOut) {
        break;
      }
 else {
        count++;
      }
      if (count == pageSize) {
        assertTrue(f.filterAllRemaining());
      }
 else {
        assertFalse(f.filterAllRemaining());
      }
    }
    assertEquals(pageSize,count);
  }
}
