@Category({MasterTests.class,MediumTests.class}) public class TestMasterMetricsWrapper {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMasterMetricsWrapper.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestMasterMetricsWrapper.class);
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final int NUM_RS=4;
  @BeforeClass public static void setup() throws Exception {
    TEST_UTIL.startMiniCluster(1,NUM_RS);
  }
  @AfterClass public static void teardown() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testInfo(){
    HMaster master=TEST_UTIL.getHBaseCluster().getMaster();
    MetricsMasterWrapperImpl info=new MetricsMasterWrapperImpl(master);
    assertEquals(master.getSplitPlanCount(),info.getSplitPlanCount(),0);
    assertEquals(master.getMergePlanCount(),info.getMergePlanCount(),0);
    assertEquals(master.getAverageLoad(),info.getAverageLoad(),0);
    assertEquals(master.getClusterId(),info.getClusterId());
    assertEquals(master.getMasterActiveTime(),info.getActiveTime());
    assertEquals(master.getMasterStartTime(),info.getStartTime());
    assertEquals(master.getMasterCoprocessors().length,info.getCoprocessors().length);
    assertEquals(master.getServerManager().getOnlineServersList().size(),info.getNumRegionServers());
    int regionServerCount=NUM_RS + (LoadBalancer.isTablesOnMaster(TEST_UTIL.getConfiguration()) ? 1 : 0);
    assertEquals(regionServerCount,info.getNumRegionServers());
    String zkServers=info.getZookeeperQuorum();
    assertEquals(zkServers.split(",").length,TEST_UTIL.getZkCluster().getZooKeeperServerNum());
    final int index=3;
    LOG.info("Stopping " + TEST_UTIL.getMiniHBaseCluster().getRegionServer(index));
    TEST_UTIL.getMiniHBaseCluster().stopRegionServer(index,false);
    TEST_UTIL.getMiniHBaseCluster().waitOnRegionServer(index);
    while (TEST_UTIL.getHBaseCluster().getMaster().getServerManager().getOnlineServers().size() == regionServerCount) {
      Threads.sleep(10);
    }
    assertEquals(regionServerCount - 1,info.getNumRegionServers());
    assertEquals(1,info.getNumDeadRegionServers());
    assertEquals(1,info.getNumWALFiles());
  }
  @Test public void testQuotaSnapshotConversion(){
    MetricsMasterWrapperImpl info=new MetricsMasterWrapperImpl(TEST_UTIL.getHBaseCluster().getMaster());
    assertEquals(new SimpleImmutableEntry<Long,Long>(1024L,2048L),info.convertSnapshot(new SpaceQuotaSnapshot(SpaceQuotaStatus.notInViolation(),1024L,2048L)));
    assertEquals(new SimpleImmutableEntry<Long,Long>(4096L,2048L),info.convertSnapshot(new SpaceQuotaSnapshot(new SpaceQuotaStatus(SpaceViolationPolicy.NO_INSERTS),4096L,2048L)));
  }
}
