/** 
 * Test TestCoprocessorClassLoader. More tests are in TestClassLoading
 */
@Category({MiscTests.class,SmallTests.class}) public class TestCoprocessorClassLoader {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCoprocessorClassLoader.class);
  private static final HBaseCommonTestingUtility TEST_UTIL=new HBaseCommonTestingUtility();
  private static final Configuration conf=TEST_UTIL.getConfiguration();
static {
    TEST_UTIL.getDataTestDir();
  }
  @Test public void testCleanupOldJars() throws Exception {
    String className="TestCleanupOldJars";
    String folder=TEST_UTIL.getDataTestDir().toString();
    File jarFile=ClassLoaderTestHelper.buildJar(folder,className,null,ClassLoaderTestHelper.localDirPath(conf));
    File tmpJarFile=new File(jarFile.getParent(),"/tmp/" + className + ".test.jar");
    if (tmpJarFile.exists())     tmpJarFile.delete();
    assertFalse("tmp jar file should not exist",tmpJarFile.exists());
    IOUtils.copyBytes(new FileInputStream(jarFile),new FileOutputStream(tmpJarFile),conf,true);
    assertTrue("tmp jar file should be created",tmpJarFile.exists());
    Path path=new Path(jarFile.getAbsolutePath());
    ClassLoader parent=TestCoprocessorClassLoader.class.getClassLoader();
    CoprocessorClassLoader.parentDirLockSet.clear();
    ClassLoader classLoader=CoprocessorClassLoader.getClassLoader(path,parent,"111",conf);
    assertNotNull("Classloader should be created",classLoader);
    assertFalse("tmp jar file should be removed",tmpJarFile.exists());
  }
  @Test public void testLibJarName() throws Exception {
    checkingLibJarName("TestLibJarName.jar","/lib/");
  }
  @Test public void testRelativeLibJarName() throws Exception {
    checkingLibJarName("TestRelativeLibJarName.jar","lib/");
  }
  /** 
 * Test to make sure the lib jar file extracted from a coprocessor jar have the right name.  Otherwise, some existing jar could be override if there are naming conflicts.
 */
  private void checkingLibJarName(  String jarName,  String libPrefix) throws Exception {
    File tmpFolder=new File(ClassLoaderTestHelper.localDirPath(conf),"tmp");
    if (tmpFolder.exists()) {
      File[] files=tmpFolder.listFiles();
      if (files != null) {
        for (        File f : files) {
          f.delete();
        }
      }
    }
    String className="CheckingLibJarName";
    String folder=TEST_UTIL.getDataTestDir().toString();
    File innerJarFile=ClassLoaderTestHelper.buildJar(folder,className,null,ClassLoaderTestHelper.localDirPath(conf));
    File targetJarFile=new File(innerJarFile.getParent(),jarName);
    ClassLoaderTestHelper.addJarFilesToJar(targetJarFile,libPrefix,innerJarFile);
    Path path=new Path(targetJarFile.getAbsolutePath());
    ClassLoader parent=TestCoprocessorClassLoader.class.getClassLoader();
    ClassLoader classLoader=CoprocessorClassLoader.getClassLoader(path,parent,"112",conf);
    assertNotNull("Classloader should be created",classLoader);
    String fileToLookFor="." + className + ".jar";
    String[] files=tmpFolder.list();
    if (files != null) {
      for (      String f : files) {
        if (f.endsWith(fileToLookFor) && f.contains(jarName)) {
          return;
        }
      }
    }
    fail("Could not find the expected lib jar file");
  }
  @Test public void testDirectoryAndWildcard() throws Exception {
    String testClassName="TestClass";
    String dataTestDir=TEST_UTIL.getDataTestDir().toString();
    System.out.println(dataTestDir);
    String localDirContainingJar=ClassLoaderTestHelper.localDirPath(conf);
    ClassLoaderTestHelper.buildJar(dataTestDir,testClassName,null,localDirContainingJar);
    ClassLoader parent=TestCoprocessorClassLoader.class.getClassLoader();
    CoprocessorClassLoader.parentDirLockSet.clear();
    CoprocessorClassLoader coprocessorClassLoader=null;
    Path testPath=null;
    testPath=new Path(localDirContainingJar);
    coprocessorClassLoader=CoprocessorClassLoader.getClassLoader(testPath,parent,"113_1",conf);
    verifyCoprocessorClassLoader(coprocessorClassLoader,testClassName);
    testPath=new Path(localDirContainingJar,"*.jar");
    coprocessorClassLoader=CoprocessorClassLoader.getClassLoader(testPath,parent,"113_2",conf);
    verifyCoprocessorClassLoader(coprocessorClassLoader,testClassName);
    testPath=new Path(localDirContainingJar,"*.j*");
    coprocessorClassLoader=CoprocessorClassLoader.getClassLoader(testPath,parent,"113_3",conf);
    verifyCoprocessorClassLoader(coprocessorClassLoader,testClassName);
  }
  /** 
 * Verify the coprocessorClassLoader is not null and the expected class can be loaded successfully
 * @param coprocessorClassLoader the CoprocessorClassLoader to verify
 * @param className the expected class to be loaded by the coprocessorClassLoader
 * @throws ClassNotFoundException
 */
  private void verifyCoprocessorClassLoader(  CoprocessorClassLoader coprocessorClassLoader,  String className) throws ClassNotFoundException {
    assertNotNull("Classloader should be created and not null",coprocessorClassLoader);
    assertEquals(className,coprocessorClassLoader.loadClass(className).getName());
  }
}
