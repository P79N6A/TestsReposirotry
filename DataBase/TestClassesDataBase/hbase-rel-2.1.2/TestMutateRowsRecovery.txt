@Category({RegionServerTests.class,MediumTests.class}) public class TestMutateRowsRecovery {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMutateRowsRecovery.class);
  private MiniHBaseCluster cluster=null;
  private Connection connection=null;
  private static final int NB_SERVERS=3;
  static final byte[] qual1=Bytes.toBytes("qual1");
  static final byte[] qual2=Bytes.toBytes("qual2");
  static final byte[] value1=Bytes.toBytes("value1");
  static final byte[] value2=Bytes.toBytes("value2");
  static final byte[] row1=Bytes.toBytes("rowA");
  static final byte[] row2=Bytes.toBytes("rowB");
  static final HBaseTestingUtility TESTING_UTIL=new HBaseTestingUtility();
  @BeforeClass public static void before() throws Exception {
    TESTING_UTIL.startMiniCluster(NB_SERVERS);
  }
  @AfterClass public static void after() throws Exception {
    TESTING_UTIL.shutdownMiniCluster();
  }
  @Before public void setup() throws IOException {
    TESTING_UTIL.ensureSomeNonStoppedRegionServersAvailable(NB_SERVERS);
    this.connection=ConnectionFactory.createConnection(TESTING_UTIL.getConfiguration());
    this.cluster=TESTING_UTIL.getMiniHBaseCluster();
  }
  @After public void tearDown() throws IOException {
    if (this.connection != null) {
      this.connection.close();
    }
  }
  @Test public void MutateRowsAndCheckPostKill() throws IOException, InterruptedException {
    final TableName tableName=TableName.valueOf("test");
    Admin admin=null;
    Table hTable=null;
    try {
      admin=connection.getAdmin();
      hTable=connection.getTable(tableName);
      HTableDescriptor desc=new HTableDescriptor(tableName);
      desc.addFamily(new HColumnDescriptor(fam1));
      admin.createTable(desc);
      RowMutations rm=new RowMutations(row1);
      Put p1=new Put(row1);
      p1.addColumn(fam1,qual1,value1);
      p1.setDurability(Durability.SYNC_WAL);
      rm.add(p1);
      hTable.mutateRow(rm);
      Put p2=new Put(row1);
      p2.addColumn(fam1,qual2,value2);
      p2.setDurability(Durability.SYNC_WAL);
      hTable.put(p2);
      HRegionServer rs1=TESTING_UTIL.getRSForFirstRegionInTable(tableName);
      long now=EnvironmentEdgeManager.currentTime();
      rs1.tryRegionServerReport(now - 30000,now);
      cluster.killRegionServer(rs1.serverName);
      Get g1=new Get(row1);
      Result result=hTable.get(g1);
      assertTrue(result.getValue(fam1,qual1) != null);
      assertEquals(0,Bytes.compareTo(result.getValue(fam1,qual1),value1));
      assertTrue(result.getValue(fam1,qual2) != null);
      assertEquals(0,Bytes.compareTo(result.getValue(fam1,qual2),value2));
    }
  finally {
      if (admin != null) {
        admin.close();
      }
      if (hTable != null) {
        hTable.close();
      }
    }
  }
}
