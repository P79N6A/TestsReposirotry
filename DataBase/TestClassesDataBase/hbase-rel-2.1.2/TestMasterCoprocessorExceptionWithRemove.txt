/** 
 * Tests unhandled exceptions thrown by coprocessors running on master. Expected result is that the master will remove the buggy coprocessor from its set of coprocessors and throw a org.apache.hadoop.hbase.exceptions.DoNotRetryIOException back to the client. (HBASE-4014).
 */
@Category({CoprocessorTests.class,MediumTests.class}) public class TestMasterCoprocessorExceptionWithRemove {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMasterCoprocessorExceptionWithRemove.class);
public static class MasterTracker extends ZKNodeTracker {
    public boolean masterZKNodeWasDeleted=false;
    public MasterTracker(    ZKWatcher zkw,    String masterNode,    Abortable abortable){
      super(zkw,masterNode,abortable);
    }
    @Override public synchronized void nodeDeleted(    String path){
      if (path.equals("/hbase/master")) {
        masterZKNodeWasDeleted=true;
      }
    }
  }
public static class BuggyMasterObserver implements MasterCoprocessor, MasterObserver {
    private boolean preCreateTableCalled;
    private boolean postCreateTableCalled;
    private boolean startCalled;
    private boolean postStartMasterCalled;
    @Override public Optional<MasterObserver> getMasterObserver(){
      return Optional.of(this);
    }
    @SuppressWarnings("null") @Override public void postCreateTable(    ObserverContext<MasterCoprocessorEnvironment> env,    TableDescriptor desc,    RegionInfo[] regions) throws IOException {
      Integer i;
      i=null;
      i=i++;
    }
    public boolean wasCreateTableCalled(){
      return preCreateTableCalled && postCreateTableCalled;
    }
    @Override public void postStartMaster(    ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {
      postStartMasterCalled=true;
    }
    public boolean wasStartMasterCalled(){
      return postStartMasterCalled;
    }
    @Override public void start(    CoprocessorEnvironment env) throws IOException {
      startCalled=true;
    }
    public boolean wasStarted(){
      return startCalled;
    }
  }
  private static HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static byte[] TEST_TABLE1=Bytes.toBytes("observed_table1");
  private static byte[] TEST_FAMILY1=Bytes.toBytes("fam1");
  private static byte[] TEST_TABLE2=Bytes.toBytes("table2");
  private static byte[] TEST_FAMILY2=Bytes.toBytes("fam2");
  @BeforeClass public static void setupBeforeClass() throws Exception {
    Configuration conf=UTIL.getConfiguration();
    conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,BuggyMasterObserver.class.getName());
    UTIL.getConfiguration().setBoolean(CoprocessorHost.ABORT_ON_ERROR_KEY,false);
    UTIL.startMiniCluster();
  }
  @AfterClass public static void teardownAfterClass() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  @Test public void testExceptionFromCoprocessorWhenCreatingTable() throws IOException {
    MiniHBaseCluster cluster=UTIL.getHBaseCluster();
    HMaster master=cluster.getMaster();
    MasterCoprocessorHost host=master.getMasterCoprocessorHost();
    BuggyMasterObserver cp=host.findCoprocessor(BuggyMasterObserver.class);
    assertFalse("No table created yet",cp.wasCreateTableCalled());
    ZKWatcher zkw=new ZKWatcher(UTIL.getConfiguration(),"unittest",new Abortable(){
      @Override public void abort(      String why,      Throwable e){
        throw new RuntimeException("Fatal ZK error: " + why,e);
      }
      @Override public boolean isAborted(){
        return false;
      }
    }
);
    MasterTracker masterTracker=new MasterTracker(zkw,"/hbase/master",new Abortable(){
      @Override public void abort(      String why,      Throwable e){
        throw new RuntimeException("Fatal ZooKeeper tracker error, why=",e);
      }
      @Override public boolean isAborted(){
        return false;
      }
    }
);
    masterTracker.start();
    zkw.registerListener(masterTracker);
    String coprocessorName=BuggyMasterObserver.class.getName();
    assertTrue(HMaster.getLoadedCoprocessors().contains(coprocessorName));
    HTableDescriptor htd1=new HTableDescriptor(TableName.valueOf(TEST_TABLE1));
    htd1.addFamily(new HColumnDescriptor(TEST_FAMILY1));
    boolean threwDNRE=false;
    try {
      Admin admin=UTIL.getAdmin();
      admin.createTable(htd1);
    }
 catch (    IOException e) {
      if (e.getClass().getName().equals("org.apache.hadoop.hbase.DoNotRetryIOException")) {
        threwDNRE=true;
      }
    }
 finally {
      assertTrue(threwDNRE);
    }
    try {
      Thread.sleep(3000);
    }
 catch (    InterruptedException e) {
      fail("InterruptedException while sleeping.");
    }
    assertFalse("Master survived coprocessor NPE, as expected.",masterTracker.masterZKNodeWasDeleted);
    String loadedCoprocessors=HMaster.getLoadedCoprocessors();
    assertTrue(loadedCoprocessors.contains(coprocessorName));
    HTableDescriptor htd2=new HTableDescriptor(TableName.valueOf(TEST_TABLE2));
    htd2.addFamily(new HColumnDescriptor(TEST_FAMILY2));
    Admin admin=UTIL.getAdmin();
    try {
      admin.createTable(htd2);
    }
 catch (    IOException e) {
      fail("Failed to create table after buggy coprocessor removal: " + e);
    }
  }
}
