/** 
 * Test Export Snapshot Tool
 */
@Category({MapReduceTests.class,MediumTests.class}) public class TestExportSnapshotNoCluster {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestExportSnapshotNoCluster.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestExportSnapshotNoCluster.class);
  protected final static HBaseCommonTestingUtility TEST_UTIL=new HBaseCommonTestingUtility();
  private static FileSystem fs;
  private static Path testDir;
  public static void setUpBaseConf(  Configuration conf){
    conf.setBoolean(SnapshotManager.HBASE_SNAPSHOT_ENABLED,true);
    conf.setInt("hbase.regionserver.msginterval",100);
    conf.setInt("hbase.client.pause",250);
    conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,6);
    conf.setBoolean("hbase.master.enabletable.roundrobin",true);
    conf.setInt("mapreduce.map.maxattempts",10);
    conf.set(HConstants.HBASE_DIR,testDir.toString());
  }
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    testDir=TEST_UTIL.getDataTestDir();
    fs=testDir.getFileSystem(TEST_UTIL.getConfiguration());
    setUpBaseConf(TEST_UTIL.getConfiguration());
  }
  /** 
 * Mock a snapshot with files in the archive dir, two regions, and one reference file.
 */
  @Test public void testSnapshotWithRefsExportFileSystemState() throws Exception {
    SnapshotMock snapshotMock=new SnapshotMock(TEST_UTIL.getConfiguration(),fs,testDir);
    SnapshotMock.SnapshotBuilder builder=snapshotMock.createSnapshotV2("tableWithRefsV1","tableWithRefsV1");
    testSnapshotWithRefsExportFileSystemState(builder);
    snapshotMock=new SnapshotMock(TEST_UTIL.getConfiguration(),fs,testDir);
    builder=snapshotMock.createSnapshotV2("tableWithRefsV2","tableWithRefsV2");
    testSnapshotWithRefsExportFileSystemState(builder);
  }
  /** 
 * Generates a couple of regions for the specified SnapshotMock, and then it will run the export and verification.
 */
  private void testSnapshotWithRefsExportFileSystemState(  SnapshotMock.SnapshotBuilder builder) throws Exception {
    Path[] r1Files=builder.addRegion();
    Path[] r2Files=builder.addRegion();
    builder.commit();
    int snapshotFilesCount=r1Files.length + r2Files.length;
    byte[] snapshotName=Bytes.toBytes(builder.getSnapshotDescription().getName());
    TableName tableName=builder.getTableDescriptor().getTableName();
    TestExportSnapshot.testExportFileSystemState(TEST_UTIL.getConfiguration(),tableName,snapshotName,snapshotName,snapshotFilesCount,testDir,getDestinationDir(),false,null,true);
  }
  private Path getDestinationDir(){
    Path path=new Path(new Path(testDir,"export-test"),"export-" + System.currentTimeMillis());
    LOG.info("HDFS export destination path: " + path);
    return path;
  }
}
