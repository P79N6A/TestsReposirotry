private static final class Tracker implements CompactionLifeCycleTracker {
  final List<Pair<Store,String>> notExecutedStores=new ArrayList<>();
  final List<Store> beforeExecuteStores=new ArrayList<>();
  final List<Store> afterExecuteStores=new ArrayList<>();
  private boolean completed=false;
  @Override public void notExecuted(  Store store,  String reason){
    notExecutedStores.add(Pair.newPair(store,reason));
  }
  @Override public void beforeExecution(  Store store){
    beforeExecuteStores.add(store);
  }
  @Override public void afterExecution(  Store store){
    afterExecuteStores.add(store);
  }
  @Override public synchronized void completed(){
    completed=true;
    notifyAll();
  }
  public synchronized void await() throws InterruptedException {
    while (!completed) {
      wait();
    }
  }
}
