/** 
 * Test Map/Reduce job over HBase tables. The map/reduce process we're testing on our tables is simple - take every row in the table, reverse the value of a particular cell, and write it back to the table.
 */
@Category({VerySlowMapReduceTests.class,LargeTests.class}) public class TestTableMapReduce extends TestTableMapReduceBase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestTableMapReduce.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestTableMapReduce.class);
  @Override protected Logger getLog(){
    return LOG;
  }
  /** 
 * Pass the given key and processed record reduce
 */
static class ProcessContentsMapper extends TableMapper<ImmutableBytesWritable,Put> {
    /** 
 * Pass the key, and reversed value to reduce
 * @param key
 * @param value
 * @param context
 * @throws IOException
 */
    @Override public void map(    ImmutableBytesWritable key,    Result value,    Context context) throws IOException, InterruptedException {
      if (value.size() != 1) {
        throw new IOException("There should only be one input column");
      }
      Map<byte[],NavigableMap<byte[],NavigableMap<Long,byte[]>>> cf=value.getMap();
      if (!cf.containsKey(INPUT_FAMILY)) {
        throw new IOException("Wrong input columns. Missing: '" + Bytes.toString(INPUT_FAMILY) + "'.");
      }
      String originalValue=Bytes.toString(value.getValue(INPUT_FAMILY,INPUT_FAMILY));
      StringBuilder newValue=new StringBuilder(originalValue);
      newValue.reverse();
      Put outval=new Put(key.get());
      outval.addColumn(OUTPUT_FAMILY,null,Bytes.toBytes(newValue.toString()));
      context.write(key,outval);
    }
  }
  @Override protected void runTestOnTable(  Table table) throws IOException {
    Job job=null;
    try {
      LOG.info("Before map/reduce startup");
      job=new Job(table.getConfiguration(),"process column contents");
      job.setNumReduceTasks(1);
      Scan scan=new Scan();
      scan.addFamily(INPUT_FAMILY);
      TableMapReduceUtil.initTableMapperJob(table.getName().getNameAsString(),scan,ProcessContentsMapper.class,ImmutableBytesWritable.class,Put.class,job);
      TableMapReduceUtil.initTableReducerJob(table.getName().getNameAsString(),IdentityTableReducer.class,job);
      FileOutputFormat.setOutputPath(job,new Path("test"));
      LOG.info("Started " + table.getName().getNameAsString());
      assertTrue(job.waitForCompletion(true));
      LOG.info("After map/reduce completion");
      verify(table.getName());
      verifyJobCountersAreEmitted(job);
    }
 catch (    InterruptedException e) {
      throw new IOException(e);
    }
catch (    ClassNotFoundException e) {
      throw new IOException(e);
    }
 finally {
      table.close();
      if (job != null) {
        FileUtil.fullyDelete(new File(job.getConfiguration().get("hadoop.tmp.dir")));
      }
    }
  }
  /** 
 * Verify scan counters are emitted from the job
 * @param job
 * @throws IOException
 */
  private void verifyJobCountersAreEmitted(  Job job) throws IOException {
    Counters counters=job.getCounters();
    Counter counter=counters.findCounter(TableRecordReaderImpl.HBASE_COUNTER_GROUP_NAME,"RPC_CALLS");
    assertNotNull("Unable to find Job counter for HBase scan metrics, RPC_CALLS",counter);
    assertTrue("Counter value for RPC_CALLS should be larger than 0",counter.getValue() > 0);
  }
  @Test(expected=TableNotEnabledException.class) public void testWritingToDisabledTable() throws IOException {
    try (Admin admin=UTIL.getConnection().getAdmin();Table table=UTIL.getConnection().getTable(TABLE_FOR_NEGATIVE_TESTS)){
      admin.disableTable(table.getName());
      runTestOnTable(table);
      fail("Should not have reached here, should have thrown an exception");
    }
   }
  @Test(expected=TableNotFoundException.class) public void testWritingToNonExistentTable() throws IOException {
    try (Table table=UTIL.getConnection().getTable(TableName.valueOf("table-does-not-exist"))){
      runTestOnTable(table);
      fail("Should not have reached here, should have thrown an exception");
    }
   }
}
