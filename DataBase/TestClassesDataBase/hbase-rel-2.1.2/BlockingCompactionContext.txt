public class BlockingCompactionContext extends CompactionContext {
  public volatile boolean isInCompact=false;
  public void unblock(){
synchronized (this) {
      this.notifyAll();
    }
  }
  @Override public List<Path> compact(  ThroughputController throughputController,  User user) throws IOException {
    try {
      isInCompact=true;
synchronized (this) {
        this.wait();
      }
    }
 catch (    InterruptedException e) {
      Assume.assumeNoException(e);
    }
    return new ArrayList<>();
  }
  @Override public List<HStoreFile> preSelect(  List<HStoreFile> filesCompacting){
    return new ArrayList<>();
  }
  @Override public boolean select(  List<HStoreFile> f,  boolean i,  boolean m,  boolean e) throws IOException {
    this.request=new CompactionRequestImpl(new ArrayList<>());
    return true;
  }
}
