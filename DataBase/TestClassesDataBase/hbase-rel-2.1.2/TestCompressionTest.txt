@Category({MiscTests.class,SmallTests.class}) public class TestCompressionTest {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCompressionTest.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestCompressionTest.class);
  @Test public void testExceptionCaching(){
    try {
      CompressionTest.testCompression(Compression.Algorithm.LZO);
      fail();
    }
 catch (    IOException e) {
      assertNotNull(e.getCause());
    }
    try {
      CompressionTest.testCompression(Compression.Algorithm.LZO);
      fail();
    }
 catch (    IOException e) {
      assertNull(e.getCause());
    }
    assertFalse(CompressionTest.testCompression("LZO"));
  }
  @Test public void testTestCompression(){
    assertTrue(CompressionTest.testCompression("NONE"));
    assertTrue(CompressionTest.testCompression("GZ"));
    if (NativeCodeLoader.isNativeCodeLoaded()) {
      nativeCodecTest("LZO","lzo2","com.hadoop.compression.lzo.LzoCodec");
      nativeCodecTest("LZ4",null,"org.apache.hadoop.io.compress.Lz4Codec");
      nativeCodecTest("SNAPPY","snappy","org.apache.hadoop.io.compress.SnappyCodec");
      nativeCodecTest("BZIP2","bzip2","org.apache.hadoop.io.compress.BZip2Codec");
      nativeCodecTest("ZSTD","zstd","org.apache.hadoop.io.compress.ZStandardCodec");
    }
 else {
      LOG.debug("Native code not loaded");
      assertFalse(CompressionTest.testCompression("LZO"));
      assertFalse(CompressionTest.testCompression("LZ4"));
      assertFalse(CompressionTest.testCompression("SNAPPY"));
      assertFalse(CompressionTest.testCompression("BZIP2"));
      assertFalse(CompressionTest.testCompression("ZSTD"));
    }
  }
  private boolean isCompressionAvailable(  String codecClassName){
    try {
      Thread.currentThread().getContextClassLoader().loadClass(codecClassName);
      return true;
    }
 catch (    Exception ex) {
      return false;
    }
  }
  /** 
 * Verify CompressionTest.testCompression() on a native codec.
 */
  private void nativeCodecTest(  String codecName,  String libName,  String codecClassName){
    if (isCompressionAvailable(codecClassName)) {
      try {
        if (libName != null) {
          System.loadLibrary(libName);
        }
        try {
          Configuration conf=new Configuration();
          CompressionCodec codec=(CompressionCodec)ReflectionUtils.newInstance(conf.getClassByName(codecClassName),conf);
          DataOutputBuffer compressedDataBuffer=new DataOutputBuffer();
          CompressionOutputStream deflateFilter=codec.createOutputStream(compressedDataBuffer);
          byte[] data=new byte[1024];
          DataOutputStream deflateOut=new DataOutputStream(new BufferedOutputStream(deflateFilter));
          deflateOut.write(data,0,data.length);
          deflateOut.flush();
          deflateFilter.finish();
          assertTrue(CompressionTest.testCompression(codecName));
        }
 catch (        UnsatisfiedLinkError e) {
          LOG.debug("No JNI for codec '" + codecName + "' "+ e.getMessage());
        }
catch (        Exception e) {
          LOG.error(codecName,e);
        }
      }
 catch (      UnsatisfiedLinkError e) {
        LOG.debug("Native lib not available: " + codecName);
        assertFalse(CompressionTest.testCompression(codecName));
      }
    }
 else {
      LOG.debug("Codec class not available: " + codecName);
      assertFalse(CompressionTest.testCompression(codecName));
    }
  }
}
