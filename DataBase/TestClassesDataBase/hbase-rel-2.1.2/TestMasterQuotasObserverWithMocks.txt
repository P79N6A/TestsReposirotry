/** 
 * Test class for MasterQuotasObserver that does not require a cluster.
 */
@Category(SmallTests.class) public class TestMasterQuotasObserverWithMocks {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMasterQuotasObserverWithMocks.class);
  private HMaster master;
  private Configuration conf;
  @Before public void setup(){
    conf=HBaseConfiguration.create();
    master=mock(HMaster.class);
    doCallRealMethod().when(master).updateConfigurationForQuotasObserver(any());
  }
  @Test public void testAddDefaultObserver(){
    master.updateConfigurationForQuotasObserver(conf);
    assertEquals(MasterQuotasObserver.class.getName(),conf.get(MASTER_COPROCESSOR_CONF_KEY));
  }
  @Test public void testDoNotAddDefaultObserver(){
    conf.setBoolean(REMOVE_QUOTA_ON_TABLE_DELETE,false);
    master.updateConfigurationForQuotasObserver(conf);
    assertNull(conf.getStrings(MASTER_COPROCESSOR_CONF_KEY));
  }
  @Test public void testAppendsObserver(){
    conf.set(MASTER_COPROCESSOR_CONF_KEY,AccessController.class.getName());
    master.updateConfigurationForQuotasObserver(conf);
    Set<String> coprocs=new HashSet<>(conf.getStringCollection(MASTER_COPROCESSOR_CONF_KEY));
    assertEquals(2,coprocs.size());
    assertTrue("Observed coprocessors were: " + coprocs,coprocs.contains(AccessController.class.getName()));
    assertTrue("Observed coprocessors were: " + coprocs,coprocs.contains(MasterQuotasObserver.class.getName()));
  }
}
