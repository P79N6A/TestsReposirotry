@Category({FilterTests.class,SmallTests.class}) public class TestPrefixFilter {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestPrefixFilter.class);
  Filter mainFilter;
  static final char FIRST_CHAR='a';
  static final char LAST_CHAR='e';
  static final String HOST_PREFIX="org.apache.site-";
  static final byte[] GOOD_BYTES=Bytes.toBytes("abc");
  @Before public void setUp() throws Exception {
    this.mainFilter=new PrefixFilter(Bytes.toBytes(HOST_PREFIX));
  }
  @Test public void testPrefixOnRow() throws Exception {
    prefixRowTests(mainFilter);
  }
  @Test public void testPrefixOnRowInsideWhileMatchRow() throws Exception {
    prefixRowTests(new WhileMatchFilter(this.mainFilter),true);
  }
  @Test public void testSerialization() throws Exception {
    byte[] buffer=mainFilter.toByteArray();
    Filter newFilter=PrefixFilter.parseFrom(buffer);
    prefixRowTests(newFilter);
  }
  private void prefixRowTests(  Filter filter) throws Exception {
    prefixRowTests(filter,false);
  }
  private void prefixRowTests(  Filter filter,  boolean lastFilterAllRemaining) throws Exception {
    for (char c=FIRST_CHAR; c <= LAST_CHAR; c++) {
      byte[] t=createRow(c);
      assertFalse("Failed with character " + c,filter.filterRowKey(KeyValueUtil.createFirstOnRow(t)));
      assertFalse(filter.filterAllRemaining());
    }
    String yahooSite="com.yahoo.www";
    byte[] yahooSiteBytes=Bytes.toBytes(yahooSite);
    assertTrue("Failed with character " + yahooSite,filter.filterRowKey(KeyValueUtil.createFirstOnRow(yahooSiteBytes)));
    assertEquals(filter.filterAllRemaining(),lastFilterAllRemaining);
  }
  private byte[] createRow(  final char c){
    return Bytes.toBytes(HOST_PREFIX + Character.toString(c));
  }
}
