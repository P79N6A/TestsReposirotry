@Category({SecurityTests.class,MediumTests.class}) public class TestVisibilityLabelsWithCustomVisLabService extends TestVisibilityLabels {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestVisibilityLabelsWithCustomVisLabService.class);
  @BeforeClass public static void setupBeforeClass() throws Exception {
    conf=TEST_UTIL.getConfiguration();
    VisibilityTestUtil.enableVisiblityLabels(conf);
    conf.setClass(VisibilityUtils.VISIBILITY_LABEL_GENERATOR_CLASS,SimpleScanLabelGenerator.class,ScanLabelGenerator.class);
    conf.setClass(VisibilityLabelServiceManager.VISIBILITY_LABEL_SERVICE_CLASS,ExpAsStringVisibilityLabelServiceImpl.class,VisibilityLabelService.class);
    conf.set("hbase.superuser","admin");
    TEST_UTIL.startMiniCluster(2);
    SUPERUSER=User.createUserForTesting(conf,"admin",new String[]{"supergroup"});
    TEST_UTIL.waitTableEnabled(LABELS_TABLE_NAME.getName(),50000);
    addLabels();
  }
  @Override @Test public void testVisibilityLabelsInPutsThatDoesNotMatchAnyDefinedLabels() throws Exception {
    TableName tableName=TableName.valueOf(TEST_NAME.getMethodName());
    createTableAndWriteDataWithLabels(tableName,"SAMPLE_LABEL","TEST");
  }
  @Override protected List<String> extractAuths(  String user,  List<Result> results){
    List<String> auths=new ArrayList<>();
    for (    Result result : results) {
      if (Bytes.equals(result.getRow(),Bytes.toBytes(user))) {
        NavigableMap<byte[],byte[]> familyMap=result.getFamilyMap(LABELS_TABLE_FAMILY);
        for (        byte[] q : familyMap.keySet()) {
          auths.add(Bytes.toString(q,0,q.length));
        }
      }
    }
    return auths;
  }
}
