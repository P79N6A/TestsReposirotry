public static final class MyStoreScanner extends StoreScanner {
  public MyStoreScanner(  HStore store,  ScanInfo scanInfo,  Scan scan,  NavigableSet<byte[]> columns,  long readPt) throws IOException {
    super(store,scanInfo,scan,columns,readPt);
  }
  @Override protected List<KeyValueScanner> selectScannersFrom(  HStore store,  List<? extends KeyValueScanner> allScanners){
    List<KeyValueScanner> scanners=super.selectScannersFrom(store,allScanners);
    List<KeyValueScanner> newScanners=new ArrayList<>(scanners.size());
    for (    KeyValueScanner scanner : scanners) {
      newScanners.add(new DelegatingKeyValueScanner(scanner){
        @Override public boolean reseek(        Cell key) throws IOException {
          if (ON.get()) {
            REQ_COUNT.incrementAndGet();
            if (!THROW_ONCE.get() || REQ_COUNT.get() == 1) {
              if (IS_DO_NOT_RETRY.get()) {
                throw new DoNotRetryIOException("Injected exception");
              }
 else {
                throw new IOException("Injected exception");
              }
            }
          }
          return super.reseek(key);
        }
      }
);
    }
    return newScanners;
  }
}
