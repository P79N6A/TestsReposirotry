public abstract class TestTableDDLProcedureBase {
  private static final Logger LOG=LoggerFactory.getLogger(TestTableDDLProcedureBase.class);
  protected static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static void setupConf(  Configuration conf){
    conf.setInt(MasterProcedureConstants.MASTER_PROCEDURE_THREADS,1);
    conf.setInt(MasterProcedureConstants.MASTER_URGENT_PROCEDURE_THREADS,0);
  }
  @BeforeClass public static void setupCluster() throws Exception {
    setupConf(UTIL.getConfiguration());
    UTIL.startMiniCluster(1);
  }
  @AfterClass public static void cleanupTest() throws Exception {
    try {
      UTIL.shutdownMiniCluster();
    }
 catch (    Exception e) {
      LOG.warn("failure shutting down cluster",e);
    }
  }
  @Before public void setup() throws Exception {
    resetProcExecutorTestingKillFlag();
  }
  @After public void tearDown() throws Exception {
    resetProcExecutorTestingKillFlag();
    for (    HTableDescriptor htd : UTIL.getAdmin().listTables()) {
      LOG.info("Tear down, remove table=" + htd.getTableName());
      UTIL.deleteTable(htd.getTableName());
    }
  }
  protected void resetProcExecutorTestingKillFlag(){
    final ProcedureExecutor<MasterProcedureEnv> procExec=getMasterProcedureExecutor();
    ProcedureTestingUtility.setKillAndToggleBeforeStoreUpdate(procExec,false);
    assertTrue("expected executor to be running",procExec.isRunning());
  }
  protected ProcedureExecutor<MasterProcedureEnv> getMasterProcedureExecutor(){
    return getMaster().getMasterProcedureExecutor();
  }
  protected HMaster getMaster(){
    return UTIL.getHBaseCluster().getMaster();
  }
}
