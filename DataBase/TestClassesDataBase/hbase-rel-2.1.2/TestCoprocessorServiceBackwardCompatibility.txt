/** 
 * Tests to ensure that 2.0 is backward compatible in loading CoprocessorService.
 */
@Category({MediumTests.class}) public class TestCoprocessorServiceBackwardCompatibility {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestCoprocessorServiceBackwardCompatibility.class);
  private static HBaseTestingUtility TEST_UTIL=null;
  private static Configuration CONF=null;
  private static final long MASTER=1;
  private static final long REGIONSERVER=2;
  private static final long REGION=3;
public static class DummyCoprocessorService extends DummyService implements CoprocessorService, SingletonCoprocessorService {
    static int numMaster=0;
    static int numRegionServer=0;
    static int numRegion=0;
    @Override public Service getService(){
      return this;
    }
    @Override public void dummyCall(    RpcController controller,    DummyRequest request,    RpcCallback<DummyResponse> callback){
      callback.run(DummyResponse.newBuilder().setValue("").build());
      if (request.getValue() == MASTER) {
        numMaster+=request.getValue();
      }
 else       if (request.getValue() == REGIONSERVER) {
        numRegionServer+=request.getValue();
      }
 else       if (request.getValue() == REGION) {
        numRegion+=request.getValue();
      }
    }
    @Override public void dummyThrow(    RpcController controller,    DummyRequest request,    RpcCallback<DummyResponse> callback){
    }
  }
  @BeforeClass public static void setupBeforeClass() throws Exception {
    TEST_UTIL=new HBaseTestingUtility();
    CONF=TEST_UTIL.getConfiguration();
    CONF.setStrings(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY,DummyCoprocessorService.class.getName());
    CONF.setStrings(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY,DummyCoprocessorService.class.getName());
    CONF.setStrings(CoprocessorHost.REGION_COPROCESSOR_CONF_KEY,DummyCoprocessorService.class.getName());
    TEST_UTIL.startMiniCluster();
  }
  @AfterClass public static void tearDownAfter() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testCoprocessorServiceLoadedByMaster() throws Throwable {
    TEST_UTIL.getAdmin().coprocessorService().callBlockingMethod(DummyCoprocessorService.getDescriptor().findMethodByName("dummyCall"),null,DummyRequest.newBuilder().setValue(MASTER).build(),DummyResponse.getDefaultInstance());
    assertEquals(MASTER,DummyCoprocessorService.numMaster);
    TEST_UTIL.getAdmin().coprocessorService(TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName()).callBlockingMethod(DummyCoprocessorService.getDescriptor().findMethodByName("dummyCall"),null,DummyRequest.newBuilder().setValue(REGIONSERVER).build(),DummyResponse.getDefaultInstance());
    assertEquals(REGIONSERVER,DummyCoprocessorService.numRegionServer);
    TEST_UTIL.getConnection().getTable(TableName.valueOf("hbase:meta")).batchCoprocessorService(DummyCoprocessorService.getDescriptor().findMethodByName("dummyCall"),DummyRequest.newBuilder().setValue(REGION).build(),Bytes.toBytes(""),Bytes.toBytes(""),DummyResponse.getDefaultInstance());
    assertEquals(REGION,DummyCoprocessorService.numRegion);
  }
}
