/** 
 * Mapper that creates a linked list of KeyValues. Each map task generates one linked list. All lists start on row key 0L. All lists should be CHAIN_LENGTH long.
 */
public static class LinkedListCreationMapper extends Mapper<LongWritable,LongWritable,ImmutableBytesWritable,KeyValue> {
  private Random rand=new Random();
  @Override protected void map(  LongWritable key,  LongWritable value,  Context context) throws IOException, InterruptedException {
    long chainId=value.get();
    LOG.info("Starting mapper with chainId:" + chainId);
    byte[] chainIdArray=Bytes.toBytes(chainId);
    long currentRow=0;
    long chainLength=context.getConfiguration().getLong(CHAIN_LENGTH_KEY,CHAIN_LENGTH);
    long nextRow=getNextRow(0,chainLength);
    for (long i=0; i < chainLength; i++) {
      byte[] rk=Bytes.toBytes(currentRow);
      KeyValue linkKv=new KeyValue(rk,CHAIN_FAM,chainIdArray,Bytes.toBytes(nextRow));
      KeyValue sortKv=new KeyValue(rk,SORT_FAM,chainIdArray,Bytes.toBytes(i));
      KeyValue dataKv=new KeyValue(rk,DATA_FAM,chainIdArray,Bytes.toBytes(RandomStringUtils.randomAlphabetic(50)));
      context.write(new ImmutableBytesWritable(rk),linkKv);
      context.write(new ImmutableBytesWritable(rk),sortKv);
      context.write(new ImmutableBytesWritable(rk),dataKv);
      currentRow=nextRow;
      nextRow=getNextRow(i + 1,chainLength);
    }
  }
  /** 
 * Returns a unique row id within this chain for this index 
 */
  private long getNextRow(  long index,  long chainLength){
    long nextRow=Math.abs(rand.nextLong());
    nextRow=nextRow - (nextRow % chainLength) + index;
    return nextRow;
  }
}
