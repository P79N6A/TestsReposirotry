@Category(MediumTests.class) public class TestRpcClientLeaks {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRpcClientLeaks.class);
  @Rule public TestName name=new TestName();
public static class MyRpcClientImpl extends BlockingRpcClient {
    public static List<Socket> savedSockets=Lists.newArrayList();
    @Rule public ExpectedException thrown=ExpectedException.none();
    public MyRpcClientImpl(    Configuration conf){
      super(conf);
    }
    public MyRpcClientImpl(    Configuration conf,    String clusterId,    SocketAddress address,    MetricsConnection metrics){
      super(conf,clusterId,address,metrics);
    }
    @Override protected BlockingRpcConnection createConnection(    ConnectionId remoteId) throws IOException {
      return new BlockingRpcConnection(this,remoteId){
        @Override protected synchronized void setupConnection() throws IOException {
          super.setupConnection();
synchronized (savedSockets) {
            savedSockets.add(socket);
          }
          throw new IOException("Sample exception for " + "verifying socket closure in case of exceptions.");
        }
      }
;
    }
  }
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  @BeforeClass public static void setup() throws Exception {
    UTIL.startMiniCluster();
  }
  @AfterClass public static void teardown() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  public static final Logger LOG=LoggerFactory.getLogger(TestRpcClientLeaks.class);
  @Test(expected=RetriesExhaustedException.class) public void testSocketClosed() throws IOException, InterruptedException {
    TableName tableName=TableName.valueOf(name.getMethodName());
    UTIL.createTable(tableName,fam1).close();
    Configuration conf=new Configuration(UTIL.getConfiguration());
    conf.set(RpcClientFactory.CUSTOM_RPC_CLIENT_IMPL_CONF_KEY,MyRpcClientImpl.class.getName());
    conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,2);
    Connection connection=ConnectionFactory.createConnection(conf);
    Table table=connection.getTable(TableName.valueOf(name.getMethodName()));
    table.get(new Get(Bytes.toBytes("asd")));
    connection.close();
    for (    Socket socket : MyRpcClientImpl.savedSockets) {
      assertTrue("Socket + " + socket + " is not closed",socket.isClosed());
    }
  }
}
