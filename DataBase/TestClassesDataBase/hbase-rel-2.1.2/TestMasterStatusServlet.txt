/** 
 * Tests for the master status page and its template.
 */
@Category({MasterTests.class,MediumTests.class}) public class TestMasterStatusServlet {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMasterStatusServlet.class);
  private HMaster master;
  private Configuration conf;
  private Admin admin;
  static final ServerName FAKE_HOST=ServerName.valueOf("fakehost",12345,1234567890);
  static final HTableDescriptor FAKE_TABLE=new HTableDescriptor(TableName.valueOf("mytable"));
  static final HRegionInfo FAKE_HRI=new HRegionInfo(FAKE_TABLE.getTableName(),Bytes.toBytes("a"),Bytes.toBytes("b"));
  @Before public void setupBasicMocks(){
    conf=HBaseConfiguration.create();
    master=Mockito.mock(HMaster.class);
    Mockito.doReturn(FAKE_HOST).when(master).getServerName();
    Mockito.doReturn(conf).when(master).getConfiguration();
    DeadServer deadServer=Mockito.mock(DeadServer.class);
    ServerManager serverManager=Mockito.mock(ServerManager.class);
    Mockito.doReturn(1.0).when(serverManager).getAverageLoad();
    Mockito.doReturn(serverManager).when(master).getServerManager();
    Mockito.doReturn(deadServer).when(serverManager).getDeadServers();
    AssignmentManager am=Mockito.mock(AssignmentManager.class);
    RegionStates rs=Mockito.mock(RegionStates.class);
    List<RegionState> regionsInTransition=new ArrayList<>();
    regionsInTransition.add(new RegionState(FAKE_HRI,RegionState.State.CLOSING,12345L,FAKE_HOST));
    Mockito.doReturn(rs).when(am).getRegionStates();
    Mockito.doReturn(regionsInTransition).when(rs).getRegionsInTransition();
    Mockito.doReturn(am).when(master).getAssignmentManager();
    Mockito.doReturn(serverManager).when(master).getServerManager();
    ZKWatcher zkw=Mockito.mock(ZKWatcher.class);
    Mockito.doReturn(new ZNodePaths(conf)).when(zkw).getZNodePaths();
    Mockito.doReturn("fakequorum").when(zkw).getQuorum();
    Mockito.doReturn(zkw).when(master).getZooKeeper();
    MasterAddressTracker tracker=Mockito.mock(MasterAddressTracker.class);
    Mockito.doReturn(tracker).when(master).getMasterAddressTracker();
    Mockito.doReturn(FAKE_HOST).when(tracker).getMasterAddress();
    MetricsRegionServer rms=Mockito.mock(MetricsRegionServer.class);
    Mockito.doReturn(new MetricsRegionServerWrapperStub()).when(rms).getRegionServerWrapper();
    Mockito.doReturn(rms).when(master).getRegionServerMetrics();
    admin=Mockito.mock(Admin.class);
  }
  private void setupMockTables() throws IOException {
    HTableDescriptor tables[]=new HTableDescriptor[]{new HTableDescriptor(TableName.valueOf("foo")),new HTableDescriptor(TableName.valueOf("bar"))};
    Mockito.doReturn(tables).when(admin).listTables();
  }
  @Test public void testStatusTemplateNoTables() throws IOException {
    new MasterStatusTmpl().render(new StringWriter(),master);
  }
  @Test public void testStatusTemplateMetaAvailable() throws IOException {
    setupMockTables();
    new MasterStatusTmpl().setMetaLocation(ServerName.valueOf("metaserver,123,12345")).render(new StringWriter(),master);
  }
  @Test public void testStatusTemplateWithServers() throws IOException {
    setupMockTables();
    List<ServerName> servers=Lists.newArrayList(ServerName.valueOf("rootserver,123,12345"),ServerName.valueOf("metaserver,123,12345"));
    Set<ServerName> deadServers=new HashSet<>(Lists.newArrayList(ServerName.valueOf("badserver,123,12345"),ServerName.valueOf("uglyserver,123,12345")));
    new MasterStatusTmpl().setMetaLocation(ServerName.valueOf("metaserver,123,12345")).setServers(servers).setDeadServers(deadServers).render(new StringWriter(),master);
  }
}
