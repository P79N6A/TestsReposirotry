/** 
 * Tests the default table lock manager
 */
@Category({MasterTests.class,LargeTests.class}) public class TestTableStateManager {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestTableStateManager.class);
  private final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  @Rule public TestName name=new TestName();
  @Before public void before() throws Exception {
    TEST_UTIL.startMiniCluster();
  }
  @After public void after() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testMigration() throws Exception {
    final TableName tableName=TableName.valueOf(name.getMethodName());
    TEST_UTIL.createTable(tableName,HConstants.CATALOG_FAMILY_STR);
    TEST_UTIL.getAdmin().disableTable(tableName);
    TableState state=MetaTableAccessor.getTableState(TEST_UTIL.getConnection(),tableName);
    assertTrue("State=" + state,state.getState().equals(TableState.State.DISABLED));
    MetaTableAccessor.deleteTableState(TEST_UTIL.getConnection(),tableName);
    assertTrue(MetaTableAccessor.getTableState(TEST_UTIL.getConnection(),tableName) == null);
    HMaster master=TEST_UTIL.getMiniHBaseCluster().getMaster();
    master.stop("Restarting");
    while (!master.isStopped()) {
      Threads.sleep(1);
    }
    assertTrue(master.isStopped());
    JVMClusterUtil.MasterThread newMasterThread=TEST_UTIL.getMiniHBaseCluster().startMaster();
    master=newMasterThread.getMaster();
    while (!master.isInitialized()) {
      Threads.sleep(1);
    }
    assertTrue(MetaTableAccessor.getTableState(TEST_UTIL.getConnection(),tableName).getState().equals(TableState.State.DISABLED));
  }
}
