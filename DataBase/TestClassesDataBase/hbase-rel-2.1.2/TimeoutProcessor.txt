public static class TimeoutProcessor extends BaseRowProcessor<TimeoutProcessorRequest,TimeoutProcessorResponse> {
  byte[] row=new byte[0];
  /** 
 * Empty constructor for Writable
 */
  public TimeoutProcessor(){
  }
  public TimeoutProcessor(  byte[] row){
    this.row=row;
  }
  public Collection<byte[]> getRowsToLock(){
    return Collections.singleton(row);
  }
  @Override public TimeoutProcessorResponse getResult(){
    return TimeoutProcessorResponse.getDefaultInstance();
  }
  @Override public void process(  long now,  HRegion region,  List<Mutation> mutations,  WALEdit walEdit) throws IOException {
    try {
      Thread.sleep(100 * 1000L);
    }
 catch (    Exception e) {
      throw new IOException(e);
    }
  }
  @Override public boolean readOnly(){
    return true;
  }
  @Override public String getName(){
    return "timeout";
  }
  @Override public TimeoutProcessorRequest getRequestData() throws IOException {
    TimeoutProcessorRequest.Builder builder=TimeoutProcessorRequest.newBuilder();
    builder.setRow(ByteStringer.wrap(row));
    return builder.build();
  }
  @Override public void initialize(  TimeoutProcessorRequest msg) throws IOException {
    this.row=msg.getRow().toByteArray();
  }
}
