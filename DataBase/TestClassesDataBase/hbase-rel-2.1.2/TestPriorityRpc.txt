/** 
 * Tests that verify certain RPCs get a higher QoS.
 */
@Category({RegionServerTests.class,MediumTests.class}) public class TestPriorityRpc {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestPriorityRpc.class);
  private HRegionServer regionServer=null;
  private PriorityFunction priority=null;
  @Before public void setup(){
    Configuration conf=HBaseConfiguration.create();
    conf.setBoolean("hbase.testing.nocluster",true);
    final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility(conf);
    TEST_UTIL.getDataTestDir(this.getClass().getName());
    regionServer=HRegionServer.constructRegionServer(HRegionServer.class,conf);
    priority=regionServer.rpcServices.getPriority();
  }
  @Test public void testQosFunctionForMeta() throws IOException {
    priority=regionServer.rpcServices.getPriority();
    RequestHeader.Builder headerBuilder=RequestHeader.newBuilder();
    headerBuilder.setMethodName("foo");
    GetRequest.Builder getRequestBuilder=GetRequest.newBuilder();
    RegionSpecifier.Builder regionSpecifierBuilder=RegionSpecifier.newBuilder();
    regionSpecifierBuilder.setType(RegionSpecifierType.REGION_NAME);
    ByteString name=UnsafeByteOperations.unsafeWrap(RegionInfoBuilder.FIRST_META_REGIONINFO.getRegionName());
    regionSpecifierBuilder.setValue(name);
    RegionSpecifier regionSpecifier=regionSpecifierBuilder.build();
    getRequestBuilder.setRegion(regionSpecifier);
    Get.Builder getBuilder=Get.newBuilder();
    getBuilder.setRow(UnsafeByteOperations.unsafeWrap(Bytes.toBytes("somerow")));
    getRequestBuilder.setGet(getBuilder.build());
    GetRequest getRequest=getRequestBuilder.build();
    RequestHeader header=headerBuilder.build();
    HRegion mockRegion=Mockito.mock(HRegion.class);
    HRegionServer mockRS=Mockito.mock(HRegionServer.class);
    RSRpcServices mockRpc=Mockito.mock(RSRpcServices.class);
    Mockito.when(mockRS.getRSRpcServices()).thenReturn(mockRpc);
    RegionInfo mockRegionInfo=Mockito.mock(RegionInfo.class);
    Mockito.when(mockRpc.getRegion(Mockito.any())).thenReturn(mockRegion);
    Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);
    Mockito.when(mockRegionInfo.getTable()).thenReturn(RegionInfoBuilder.FIRST_META_REGIONINFO.getTable());
    ((AnnotationReadingPriorityFunction)priority).setRegionServer(mockRS);
    assertEquals(HConstants.SYSTEMTABLE_QOS,priority.getPriority(header,getRequest,User.createUserForTesting(regionServer.conf,"someuser",new String[]{"somegroup"})));
  }
  @Test public void testQosFunctionWithoutKnownArgument() throws IOException {
    RequestHeader.Builder headerBuilder=RequestHeader.newBuilder();
    headerBuilder.setMethodName("foo");
    RequestHeader header=headerBuilder.build();
    PriorityFunction qosFunc=regionServer.rpcServices.getPriority();
    assertEquals(HConstants.NORMAL_QOS,qosFunc.getPriority(header,null,User.createUserForTesting(regionServer.conf,"someuser",new String[]{"somegroup"})));
  }
  @Test public void testQosFunctionForScanMethod() throws IOException {
    RequestHeader.Builder headerBuilder=RequestHeader.newBuilder();
    headerBuilder.setMethodName("Scan");
    RequestHeader header=headerBuilder.build();
    ScanRequest.Builder scanBuilder=ScanRequest.newBuilder();
    ScanRequest scanRequest=scanBuilder.build();
    HRegion mockRegion=Mockito.mock(HRegion.class);
    HRegionServer mockRS=Mockito.mock(HRegionServer.class);
    RSRpcServices mockRpc=Mockito.mock(RSRpcServices.class);
    Mockito.when(mockRS.getRSRpcServices()).thenReturn(mockRpc);
    RegionInfo mockRegionInfo=Mockito.mock(RegionInfo.class);
    Mockito.when(mockRpc.getRegion(Mockito.any())).thenReturn(mockRegion);
    Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);
    Mockito.when(mockRegionInfo.getTable()).thenReturn(TableName.valueOf("testQosFunctionForScanMethod"));
    ((AnnotationReadingPriorityFunction)priority).setRegionServer(mockRS);
    int qos=priority.getPriority(header,scanRequest,User.createUserForTesting(regionServer.conf,"someuser",new String[]{"somegroup"}));
    assertTrue("" + qos,qos == HConstants.NORMAL_QOS);
    scanBuilder=ScanRequest.newBuilder();
    scanBuilder.setScannerId(12345);
    scanRequest=scanBuilder.build();
    RegionScanner mockRegionScanner=Mockito.mock(RegionScanner.class);
    Mockito.when(mockRpc.getScanner(12345)).thenReturn(mockRegionScanner);
    Mockito.when(mockRegionScanner.getRegionInfo()).thenReturn(mockRegionInfo);
    Mockito.when(mockRpc.getRegion((RegionSpecifier)Mockito.any())).thenReturn(mockRegion);
    Mockito.when(mockRegion.getRegionInfo()).thenReturn(mockRegionInfo);
    Mockito.when(mockRegionInfo.getTable()).thenReturn(RegionInfoBuilder.FIRST_META_REGIONINFO.getTable());
    ((AnnotationReadingPriorityFunction)priority).setRegionServer(mockRS);
    assertEquals(HConstants.SYSTEMTABLE_QOS,priority.getPriority(header,scanRequest,User.createUserForTesting(regionServer.conf,"someuser",new String[]{"somegroup"})));
    Mockito.when(mockRegionInfo.getTable()).thenReturn(TableName.valueOf("testQosFunctionForScanMethod"));
    assertEquals(HConstants.NORMAL_QOS,priority.getPriority(header,scanRequest,User.createUserForTesting(regionServer.conf,"someuser",new String[]{"somegroup"})));
  }
}
