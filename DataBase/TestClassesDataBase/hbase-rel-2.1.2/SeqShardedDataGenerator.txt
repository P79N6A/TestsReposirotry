public static class SeqShardedDataGenerator extends LoadTestDataGenerator {
  private static final byte[][] COLUMN_NAMES=new byte[][]{Bytes.toBytes("col1")};
  private static final int PAD_TO=10;
  private static final int PREFIX_PAD_TO=7;
  private final int numPartitions;
  public SeqShardedDataGenerator(  int minValueSize,  int maxValueSize,  int numPartitions){
    super(minValueSize,maxValueSize);
    this.numPartitions=numPartitions;
  }
  @Override public byte[] getDeterministicUniqueKey(  long keyBase){
    String num=StringUtils.leftPad(String.valueOf(keyBase),PAD_TO,"0");
    return Bytes.toBytes(getPrefix(keyBase) + num);
  }
  private String getPrefix(  long i){
    return StringUtils.leftPad(String.valueOf((int)(i % numPartitions)),PREFIX_PAD_TO,"0");
  }
  @Override public byte[][] getColumnFamilies(){
    return new byte[][]{COLUMN_FAMILY};
  }
  @Override public byte[][] generateColumnsForCf(  byte[] rowKey,  byte[] cf){
    return COLUMN_NAMES;
  }
  @Override public byte[] generateValue(  byte[] rowKey,  byte[] cf,  byte[] column){
    return kvGenerator.generateRandomSizeValue(rowKey,cf,column);
  }
  @Override public boolean verify(  byte[] rowKey,  byte[] cf,  byte[] column,  byte[] value){
    return LoadTestKVGenerator.verify(value,rowKey,cf,column);
  }
  @Override public boolean verify(  byte[] rowKey,  byte[] cf,  Set<byte[]> columnSet){
    return true;
  }
}
