public static class IncrementCounterProcessor extends BaseRowProcessor<IncrementCounterProcessorTestProtos.IncCounterProcessorRequest,IncrementCounterProcessorTestProtos.IncCounterProcessorResponse> {
  int counter=0;
  byte[] row=new byte[0];
  /** 
 * Empty constructor for Writable
 */
  IncrementCounterProcessor(){
  }
  IncrementCounterProcessor(  byte[] row){
    this.row=row;
  }
  @Override public Collection<byte[]> getRowsToLock(){
    return Collections.singleton(row);
  }
  @Override public IncCounterProcessorResponse getResult(){
    IncCounterProcessorResponse.Builder i=IncCounterProcessorResponse.newBuilder();
    i.setResponse(counter);
    return i.build();
  }
  @Override public boolean readOnly(){
    return false;
  }
  @Override public void process(  long now,  HRegion region,  List<Mutation> mutations,  WALEdit walEdit) throws IOException {
    List<Cell> kvs=new ArrayList<>();
    Scan scan=new Scan(row,row);
    scan.addColumn(FAM,COUNTER);
    doScan(region,scan,kvs);
    counter=kvs.isEmpty() ? 0 : Bytes.toInt(CellUtil.cloneValue(kvs.iterator().next()));
    assertEquals(expectedCounter,counter);
    counter+=1;
    expectedCounter+=1;
    Put p=new Put(row);
    KeyValue kv=new KeyValue(row,FAM,COUNTER,now,Bytes.toBytes(counter));
    p.add(kv);
    mutations.add(p);
    walEdit.add(kv);
    KeyValue metaKv=new KeyValue(row,WALEdit.METAFAMILY,Bytes.toBytes("I just increment counter"),Bytes.toBytes(counter));
    walEdit.add(metaKv);
  }
  @Override public IncCounterProcessorRequest getRequestData() throws IOException {
    IncCounterProcessorRequest.Builder builder=IncCounterProcessorRequest.newBuilder();
    builder.setCounter(counter);
    builder.setRow(ByteStringer.wrap(row));
    return builder.build();
  }
  @Override public void initialize(  IncCounterProcessorRequest msg){
    this.row=msg.getRow().toByteArray();
    this.counter=msg.getCounter();
  }
}
