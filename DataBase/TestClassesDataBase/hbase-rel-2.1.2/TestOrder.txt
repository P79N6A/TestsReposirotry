@Category({MiscTests.class,SmallTests.class}) public class TestOrder {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestOrder.class);
  byte[][] VALS={Bytes.toBytes("foo"),Bytes.toBytes("bar"),Bytes.toBytes("baz")};
  @Test public void testApplyAscending(){
    byte[][] vals=new byte[VALS.length][];
    byte[][] ordered=new byte[VALS.length][];
    for (int i=0; i < VALS.length; i++) {
      vals[i]=Arrays.copyOf(VALS[i],VALS[i].length);
      ordered[i]=Arrays.copyOf(VALS[i],VALS[i].length);
      ASCENDING.apply(ordered[i]);
    }
    Arrays.sort(vals,Bytes.BYTES_COMPARATOR);
    Arrays.sort(ordered,Bytes.BYTES_COMPARATOR);
    for (int i=0; i < vals.length; i++) {
      assertArrayEquals(vals[i],ordered[i]);
    }
    byte[] rangeApply=Arrays.copyOf(VALS[0],VALS[0].length);
    ASCENDING.apply(rangeApply,1,1);
    assertArrayEquals(VALS[0],rangeApply);
  }
  @Test public void testApplyDescending(){
    byte[][] vals=new byte[VALS.length][];
    byte[][] ordered=new byte[VALS.length][];
    for (int i=0; i < VALS.length; i++) {
      vals[i]=Arrays.copyOf(VALS[i],VALS[i].length);
      ordered[i]=Arrays.copyOf(VALS[i],VALS[i].length);
      DESCENDING.apply(ordered[i]);
    }
    Arrays.sort(vals,Collections.reverseOrder(Bytes.BYTES_COMPARATOR));
    Arrays.sort(ordered,Bytes.BYTES_COMPARATOR);
    for (int i=0; i < vals.length; i++) {
      DESCENDING.apply(ordered[i]);
      assertArrayEquals(vals[i],ordered[i]);
    }
    byte[] expected=new byte[]{VALS[0][0],DESCENDING.apply(VALS[0][1]),VALS[0][2]};
    byte[] rangeApply=Arrays.copyOf(VALS[0],VALS[0].length);
    DESCENDING.apply(rangeApply,1,1);
    assertArrayEquals(expected,rangeApply);
  }
}
