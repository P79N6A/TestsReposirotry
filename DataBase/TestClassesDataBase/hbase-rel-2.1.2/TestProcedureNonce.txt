@Category({MasterTests.class,SmallTests.class}) public class TestProcedureNonce {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestProcedureNonce.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestProcedureNonce.class);
  private static final int PROCEDURE_EXECUTOR_SLOTS=2;
  private static TestProcEnv procEnv;
  private static ProcedureExecutor<TestProcEnv> procExecutor;
  private static ProcedureStore procStore;
  private HBaseCommonTestingUtility htu;
  private FileSystem fs;
  private Path logDir;
  @Before public void setUp() throws IOException {
    htu=new HBaseCommonTestingUtility();
    Path testDir=htu.getDataTestDir();
    fs=testDir.getFileSystem(htu.getConfiguration());
    assertTrue(testDir.depth() > 1);
    logDir=new Path(testDir,"proc-logs");
    procEnv=new TestProcEnv();
    procStore=ProcedureTestingUtility.createStore(htu.getConfiguration(),logDir);
    procExecutor=new ProcedureExecutor<>(htu.getConfiguration(),procEnv,procStore);
    procExecutor.testing=new ProcedureExecutor.Testing();
    procStore.start(PROCEDURE_EXECUTOR_SLOTS);
    ProcedureTestingUtility.initAndStartWorkers(procExecutor,PROCEDURE_EXECUTOR_SLOTS,true);
  }
  @After public void tearDown() throws IOException {
    procExecutor.stop();
    procStore.stop(false);
    fs.delete(logDir,true);
  }
  @Test public void testCompletedProcWithSameNonce() throws Exception {
    final long nonceGroup=123;
    final long nonce=2222;
    final NonceKey nonceKey=procExecutor.createNonceKey(nonceGroup,nonce);
    assertFalse(procExecutor.registerNonce(nonceKey) >= 0);
    Procedure proc=new TestSingleStepProcedure();
    long procId=procExecutor.submitProcedure(proc,nonceKey);
    ProcedureTestingUtility.waitProcedure(procExecutor,procId);
    ProcedureTestingUtility.restart(procExecutor);
    ProcedureTestingUtility.waitProcedure(procExecutor,procId);
    assertEquals(procId,procExecutor.registerNonce(nonceKey));
    Procedure<?> result=procExecutor.getResult(procId);
    ProcedureTestingUtility.assertProcNotFailed(result);
  }
  @Test public void testRunningProcWithSameNonce() throws Exception {
    final long nonceGroup=456;
    final long nonce=33333;
    final NonceKey nonceKey=procExecutor.createNonceKey(nonceGroup,nonce);
    assertFalse(procExecutor.registerNonce(nonceKey) >= 0);
    CountDownLatch latch=new CountDownLatch(1);
    TestSingleStepProcedure proc=new TestSingleStepProcedure();
    procEnv.setWaitLatch(latch);
    long procId=procExecutor.submitProcedure(proc,nonceKey);
    while (proc.step != 1)     Threads.sleep(25);
    assertEquals(procId,procExecutor.registerNonce(nonceKey));
    latch.countDown();
    ProcedureTestingUtility.restart(procExecutor);
    ProcedureTestingUtility.waitProcedure(procExecutor,procId);
    assertEquals(procId,procExecutor.registerNonce(nonceKey));
    Procedure<?> result=procExecutor.getResult(procId);
    ProcedureTestingUtility.assertProcNotFailed(result);
  }
  @Test public void testSetFailureResultForNonce() throws IOException {
    final long nonceGroup=234;
    final long nonce=55555;
    final NonceKey nonceKey=procExecutor.createNonceKey(nonceGroup,nonce);
    assertFalse(procExecutor.registerNonce(nonceKey) >= 0);
    procExecutor.setFailureResultForNonce(nonceKey,"testProc",User.getCurrent(),new IOException("test failure"));
    final long procId=procExecutor.registerNonce(nonceKey);
    Procedure<?> result=procExecutor.getResult(procId);
    ProcedureTestingUtility.assertProcFailed(result);
  }
  @Test public void testConcurrentNonceRegistration() throws IOException {
    testConcurrentNonceRegistration(true,567,44444);
  }
  @Test public void testConcurrentNonceRegistrationWithRollback() throws IOException {
    testConcurrentNonceRegistration(false,890,55555);
  }
  private void testConcurrentNonceRegistration(  final boolean submitProcedure,  final long nonceGroup,  final long nonce) throws IOException {
    final NonceKey nonceKey=procExecutor.createNonceKey(nonceGroup,nonce);
    final AtomicReference<Throwable> t1Exception=new AtomicReference();
    final AtomicReference<Throwable> t2Exception=new AtomicReference();
    final CountDownLatch t1NonceRegisteredLatch=new CountDownLatch(1);
    final CountDownLatch t2BeforeNonceRegisteredLatch=new CountDownLatch(1);
    final Thread[] threads=new Thread[2];
    threads[0]=new Thread(){
      @Override public void run(){
        try {
          assertFalse("unexpected already registered nonce",procExecutor.registerNonce(nonceKey) >= 0);
          t1NonceRegisteredLatch.countDown();
          t2BeforeNonceRegisteredLatch.await();
          Threads.sleep(1000);
          if (submitProcedure) {
            CountDownLatch latch=new CountDownLatch(1);
            TestSingleStepProcedure proc=new TestSingleStepProcedure();
            procEnv.setWaitLatch(latch);
            procExecutor.submitProcedure(proc,nonceKey);
            Threads.sleep(100);
            latch.countDown();
          }
 else {
            procExecutor.unregisterNonceIfProcedureWasNotSubmitted(nonceKey);
          }
        }
 catch (        Throwable e) {
          t1Exception.set(e);
        }
 finally {
          t1NonceRegisteredLatch.countDown();
          t2BeforeNonceRegisteredLatch.countDown();
        }
      }
    }
;
    threads[1]=new Thread(){
      @Override public void run(){
        try {
          t1NonceRegisteredLatch.await();
          t2BeforeNonceRegisteredLatch.countDown();
          assertFalse("unexpected non registered nonce",procExecutor.registerNonce(nonceKey) < 0);
        }
 catch (        Throwable e) {
          t2Exception.set(e);
        }
 finally {
          t1NonceRegisteredLatch.countDown();
          t2BeforeNonceRegisteredLatch.countDown();
        }
      }
    }
;
    for (int i=0; i < threads.length; ++i)     threads[i].start();
    for (int i=0; i < threads.length; ++i)     Threads.shutdown(threads[i]);
    ProcedureTestingUtility.waitNoProcedureRunning(procExecutor);
    assertEquals(null,t1Exception.get());
    assertEquals(null,t2Exception.get());
  }
public static class TestSingleStepProcedure extends SequentialProcedure<TestProcEnv> {
    private int step=0;
    public TestSingleStepProcedure(){
    }
    @Override protected Procedure[] execute(    TestProcEnv env) throws InterruptedException {
      step++;
      env.waitOnLatch();
      LOG.debug("execute procedure " + this + " step="+ step);
      step++;
      setResult(Bytes.toBytes(step));
      return null;
    }
    @Override protected void rollback(    TestProcEnv env){
    }
    @Override protected boolean abort(    TestProcEnv env){
      return true;
    }
  }
private static class TestProcEnv {
    private CountDownLatch latch=null;
    /** 
 * set/unset a latch. every procedure execute() step will wait on the latch if any.
 */
    public void setWaitLatch(    CountDownLatch latch){
      this.latch=latch;
    }
    public void waitOnLatch() throws InterruptedException {
      if (latch != null) {
        latch.await();
      }
    }
  }
}
