/** 
 * Ensure configuration changes are having an effect on WAL. There is a lot of reflection around WAL setup; could be skipping Configuration changes.
 */
@RunWith(Parameterized.class) @Category({RegionServerTests.class,SmallTests.class}) public class TestWALConfiguration {
  private static final Logger LOG=LoggerFactory.getLogger(TestWALConfiguration.class);
  static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestWALConfiguration.class);
  @Rule public TestName name=new TestName();
  @Parameterized.Parameter public String walProvider;
  @Parameterized.Parameters(name="{index}: provider={0}") public static Iterable<Object[]> data(){
    return Arrays.asList(new Object[]{"filesystem"},new Object[]{"asyncfs"});
  }
  @Before public void before(){
    TEST_UTIL.getConfiguration().set(WALFactory.WAL_PROVIDER,walProvider);
  }
  /** 
 * Test blocksize change from HBASE-20520 takes on both asycnfs and old wal provider. Hard to verify more than this given the blocksize is passed down to HDFS on create -- not kept local to the streams themselves.
 */
  @Test public void testBlocksizeDefaultsToTwiceHDFSBlockSize() throws IOException {
    TableName tableName=TableName.valueOf("test");
    final WALFactory walFactory=new WALFactory(TEST_UTIL.getConfiguration(),this.walProvider);
    Configuration conf=TEST_UTIL.getConfiguration();
    WALProvider provider=walFactory.getWALProvider();
    WAL wal=provider.getWAL(null);
    if (wal instanceof AbstractFSWAL) {
      long expectedDefaultBlockSize=WALUtil.getWALBlockSize(conf,FileSystem.get(conf),TEST_UTIL.getDataTestDir());
      long blocksize=((AbstractFSWAL)wal).blocksize;
      assertEquals(expectedDefaultBlockSize,blocksize);
      LOG.info("Found blocksize of {} on {}",blocksize,wal);
    }
 else {
      fail("Unknown provider " + provider);
    }
  }
}
