@Category({CoprocessorTests.class,MediumTests.class}) public class TestValueReplacingCompaction {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestValueReplacingCompaction.class);
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static final TableName NAME=TableName.valueOf("TestValueReplacement");
  private static final byte[] FAMILY=Bytes.toBytes("f");
  private static final byte[] QUALIFIER=Bytes.toBytes("q");
  private static final ColumnFamilyDescriptor CFD=ColumnFamilyDescriptorBuilder.newBuilder(FAMILY).build();
  private static final int NUM_ROWS=5;
  private static final String value="foo";
  private static final String replacedValue="bar";
  @BeforeClass public static void setUp() throws Exception {
    UTIL.startMiniCluster(1);
    UTIL.getAdmin().createTable(TableDescriptorBuilder.newBuilder(NAME).setCoprocessor(ValueRewritingObserver.class.getName()).setValue(ValueRewritingObserver.ORIGINAL_VALUE_KEY,value).setValue(ValueRewritingObserver.REPLACED_VALUE_KEY,replacedValue).setColumnFamily(CFD).build());
  }
  @AfterClass public static void tearDown() throws Exception {
    UTIL.shutdownMiniCluster();
  }
  private void writeData(  Table t) throws IOException {
    List<Put> puts=new ArrayList<>(NUM_ROWS);
    for (int i=0; i < NUM_ROWS; i++) {
      Put p=new Put(Bytes.toBytes(i + 1));
      p.addColumn(FAMILY,QUALIFIER,Bytes.toBytes(value));
      puts.add(p);
    }
    t.put(puts);
  }
  @Test public void test() throws IOException, InterruptedException {
    try (Table t=UTIL.getConnection().getTable(NAME)){
      writeData(t);
      UTIL.flush(NAME);
      UTIL.compact(NAME,true);
      Scan s=new Scan();
      s.addColumn(FAMILY,QUALIFIER);
      try (ResultScanner scanner=t.getScanner(s)){
        for (int i=0; i < NUM_ROWS; i++) {
          Result result=scanner.next();
          assertNotNull("The " + (i + 1) + "th result was unexpectedly null",result);
          assertEquals(1,result.getFamilyMap(FAMILY).size());
          assertArrayEquals(Bytes.toBytes(i + 1),result.getRow());
          assertArrayEquals(Bytes.toBytes(replacedValue),result.getValue(FAMILY,QUALIFIER));
        }
        assertNull(scanner.next());
      }
     }
   }
}
