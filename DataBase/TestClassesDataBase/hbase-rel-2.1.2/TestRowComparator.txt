@Category({ClientTests.class,SmallTests.class}) public class TestRowComparator {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRowComparator.class);
  private static final List<byte[]> DEFAULT_ROWS=IntStream.range(1,9).mapToObj(String::valueOf).map(Bytes::toBytes).collect(Collectors.toList());
  @Test public void testPut(){
    test(row -> new Put(row));
  }
  @Test public void testDelete(){
    test(row -> new Delete(row));
  }
  @Test public void testAppend(){
    test(row -> new Append(row));
  }
  @Test public void testIncrement(){
    test(row -> new Increment(row));
  }
  @Test public void testGet(){
    test(row -> new Get(row));
  }
  private static <T extends Row>void test(  Function<byte[],T> f){
    List<T> rows=new ArrayList<T>(DEFAULT_ROWS.stream().map(f).collect(Collectors.toList()));
    do {
      Collections.shuffle(rows);
    }
 while (needShuffle(rows));
    Collections.sort(rows,Row.COMPARATOR);
    assertSort(rows);
  }
  private static boolean needShuffle(  List<? extends Row> rows){
    assertFalse(rows.isEmpty());
    assertEquals(DEFAULT_ROWS.size(),rows.size());
    for (int i=0; i != DEFAULT_ROWS.size(); ++i) {
      if (!Bytes.equals(DEFAULT_ROWS.get(i),rows.get(i).getRow())) {
        return false;
      }
    }
    return true;
  }
  private static void assertSort(  List<? extends Row> rows){
    assertFalse(rows.isEmpty());
    assertEquals(DEFAULT_ROWS.size(),rows.size());
    for (int i=0; i != DEFAULT_ROWS.size(); ++i) {
      assertTrue(Bytes.equals(DEFAULT_ROWS.get(i),rows.get(i).getRow()));
    }
  }
}
