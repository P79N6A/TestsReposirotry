@Category({MasterTests.class,MediumTests.class}) public class TestModifyTableWhileMerging {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestModifyTableWhileMerging.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestModifyTableWhileMerging.class);
  protected static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static TableName TABLE_NAME=TableName.valueOf("test");
  private static Admin admin;
  private static Table client;
  private static byte[] CF=Bytes.toBytes("cf");
  private static byte[] SPLITKEY=Bytes.toBytes("bbbbbbb");
  @BeforeClass public static void setupCluster() throws Exception {
    UTIL.getConfiguration().setInt(MasterProcedureConstants.MASTER_PROCEDURE_THREADS,1);
    UTIL.startMiniCluster(1);
    admin=UTIL.getHBaseAdmin();
    byte[][] splitKeys=new byte[1][];
    splitKeys[0]=SPLITKEY;
    client=UTIL.createTable(TABLE_NAME,CF,splitKeys);
    UTIL.waitTableAvailable(TABLE_NAME);
  }
  @AfterClass public static void cleanupTest() throws Exception {
    try {
      UTIL.shutdownMiniCluster();
    }
 catch (    Exception e) {
      LOG.warn("failure shutting down cluster",e);
    }
  }
  @Test public void test() throws Exception {
    TableDescriptor tableDescriptor=client.getDescriptor();
    ProcedureExecutor<MasterProcedureEnv> executor=UTIL.getMiniHBaseCluster().getMaster().getMasterProcedureExecutor();
    MasterProcedureEnv env=executor.getEnvironment();
    List<RegionInfo> regionInfos=admin.getRegions(TABLE_NAME);
    MergeTableRegionsProcedure mergeTableRegionsProcedure=new MergeTableRegionsProcedure(UTIL.getMiniHBaseCluster().getMaster().getMasterProcedureExecutor().getEnvironment(),regionInfos.get(0),regionInfos.get(1));
    ModifyTableProcedure modifyTableProcedure=new ModifyTableProcedure(env,tableDescriptor);
    long procModify=executor.submitProcedure(modifyTableProcedure);
    UTIL.waitFor(30000,() -> executor.getProcedures().stream().filter(p -> p instanceof ModifyTableProcedure).map(p -> (ModifyTableProcedure)p).anyMatch(p -> TABLE_NAME.equals(p.getTableName())));
    long proc=executor.submitProcedure(mergeTableRegionsProcedure);
    UTIL.waitFor(3000000,() -> UTIL.getMiniHBaseCluster().getMaster().getMasterProcedureExecutor().isFinished(procModify));
    Assert.assertEquals("Modify Table procedure should success!",ProcedureProtos.ProcedureState.SUCCESS,modifyTableProcedure.getState());
  }
}
