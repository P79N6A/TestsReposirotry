private static class MyMemStoreCompactor extends MemStoreCompactor {
  private static final AtomicInteger RUNNER_COUNT=new AtomicInteger(0);
  private static final CountDownLatch START_COMPACTOR_LATCH=new CountDownLatch(1);
  public MyMemStoreCompactor(  CompactingMemStore compactingMemStore,  MemoryCompactionPolicy compactionPolicy) throws IllegalArgumentIOException {
    super(compactingMemStore,compactionPolicy);
  }
  @Override public boolean start() throws IOException {
    boolean isFirst=RUNNER_COUNT.getAndIncrement() == 0;
    boolean rval=super.start();
    if (isFirst) {
      try {
        START_COMPACTOR_LATCH.await();
      }
 catch (      InterruptedException ex) {
        throw new RuntimeException(ex);
      }
    }
    return rval;
  }
}
