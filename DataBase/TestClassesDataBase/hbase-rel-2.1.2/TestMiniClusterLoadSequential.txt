/** 
 * A write/read/verify load test on a mini HBase cluster. Tests reading and then writing.
 */
@Category({MiscTests.class,LargeTests.class}) @RunWith(Parameterized.class) public class TestMiniClusterLoadSequential {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMiniClusterLoadSequential.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestMiniClusterLoadSequential.class);
  protected static final TableName TABLE=TableName.valueOf("load_test_tbl");
  protected static final byte[] CF=Bytes.toBytes("load_test_cf");
  protected static final int NUM_THREADS=8;
  protected static final int NUM_RS=2;
  protected static final int TIMEOUT_MS=180000;
  protected static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  protected final Configuration conf=TEST_UTIL.getConfiguration();
  protected final boolean isMultiPut;
  protected final DataBlockEncoding dataBlockEncoding;
  protected MultiThreadedWriter writerThreads;
  protected MultiThreadedReader readerThreads;
  protected int numKeys;
  protected Compression.Algorithm compression=Compression.Algorithm.NONE;
  public TestMiniClusterLoadSequential(  boolean isMultiPut,  DataBlockEncoding dataBlockEncoding){
    this.isMultiPut=isMultiPut;
    this.dataBlockEncoding=dataBlockEncoding;
    conf.setInt(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,1024 * 1024);
    conf.setFloat(HConstants.LOAD_BALANCER_SLOP_KEY,10.0f);
  }
  @Parameters public static Collection<Object[]> parameters(){
    List<Object[]> parameters=new ArrayList<>();
    for (    boolean multiPut : new boolean[]{false,true}) {
      for (      DataBlockEncoding dataBlockEncoding : new DataBlockEncoding[]{DataBlockEncoding.NONE,DataBlockEncoding.PREFIX}) {
        parameters.add(new Object[]{multiPut,dataBlockEncoding});
      }
    }
    return parameters;
  }
  @Before public void setUp() throws Exception {
    LOG.debug("Test setup: isMultiPut=" + isMultiPut);
    TEST_UTIL.startMiniCluster(1,NUM_RS);
  }
  @After public void tearDown() throws Exception {
    LOG.debug("Test teardown: isMultiPut=" + isMultiPut);
    TEST_UTIL.shutdownMiniCluster();
  }
  protected MultiThreadedReader prepareReaderThreads(  LoadTestDataGenerator dataGen,  Configuration conf,  TableName tableName,  double verifyPercent) throws IOException {
    MultiThreadedReader reader=new MultiThreadedReader(dataGen,conf,tableName,verifyPercent);
    return reader;
  }
  protected MultiThreadedWriter prepareWriterThreads(  LoadTestDataGenerator dataGen,  Configuration conf,  TableName tableName) throws IOException {
    MultiThreadedWriter writer=new MultiThreadedWriter(dataGen,conf,tableName);
    writer.setMultiPut(isMultiPut);
    return writer;
  }
  @Test public void loadTest() throws Exception {
    prepareForLoadTest();
    runLoadTestOnExistingTable();
  }
  protected void runLoadTestOnExistingTable() throws IOException {
    writerThreads.start(0,numKeys,NUM_THREADS);
    writerThreads.waitForFinish();
    assertEquals(0,writerThreads.getNumWriteFailures());
    readerThreads.start(0,numKeys,NUM_THREADS);
    readerThreads.waitForFinish();
    assertEquals(0,readerThreads.getNumReadFailures());
    assertEquals(0,readerThreads.getNumReadErrors());
    assertEquals(numKeys,readerThreads.getNumKeysVerified());
  }
  protected void createPreSplitLoadTestTable(  HTableDescriptor htd,  HColumnDescriptor hcd) throws IOException {
    HBaseTestingUtility.createPreSplitLoadTestTable(conf,htd,hcd);
    TEST_UTIL.waitUntilAllRegionsAssigned(htd.getTableName());
  }
  protected void prepareForLoadTest() throws IOException {
    LOG.info("Starting load test: dataBlockEncoding=" + dataBlockEncoding + ", isMultiPut="+ isMultiPut);
    numKeys=numKeys();
    Admin admin=TEST_UTIL.getAdmin();
    while (admin.getClusterMetrics(EnumSet.of(Option.LIVE_SERVERS)).getLiveServerMetrics().size() < NUM_RS) {
      LOG.info("Sleeping until " + NUM_RS + " RSs are online");
      Threads.sleepWithoutInterrupt(1000);
    }
    admin.close();
    HTableDescriptor htd=new HTableDescriptor(TABLE);
    HColumnDescriptor hcd=new HColumnDescriptor(CF).setCompressionType(compression).setDataBlockEncoding(dataBlockEncoding);
    createPreSplitLoadTestTable(htd,hcd);
    LoadTestDataGenerator dataGen=new MultiThreadedAction.DefaultDataGenerator(CF);
    writerThreads=prepareWriterThreads(dataGen,conf,TABLE);
    readerThreads=prepareReaderThreads(dataGen,conf,TABLE,100);
  }
  protected int numKeys(){
    return 1000;
  }
  protected HColumnDescriptor getColumnDesc(  Admin admin) throws TableNotFoundException, IOException {
    return admin.getTableDescriptor(TABLE).getFamily(CF);
  }
}
