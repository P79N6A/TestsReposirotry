@Category({MiscTests.class,SmallTests.class}) public class TestServerMetrics {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestServerMetrics.class);
  @Test public void testRegionLoadAggregation(){
    ServerMetrics metrics=ServerMetricsBuilder.toServerMetrics(ServerName.valueOf("localhost,1,1"),createServerLoadProto());
    assertEquals(13,metrics.getRegionMetrics().values().stream().mapToInt(v -> v.getStoreCount()).sum());
    assertEquals(114,metrics.getRegionMetrics().values().stream().mapToInt(v -> v.getStoreFileCount()).sum());
    assertEquals(129,metrics.getRegionMetrics().values().stream().mapToDouble(v -> v.getUncompressedStoreFileSize().get(Size.Unit.MEGABYTE)).sum(),0);
    assertEquals(504,metrics.getRegionMetrics().values().stream().mapToDouble(v -> v.getStoreFileRootLevelIndexSize().get(Size.Unit.KILOBYTE)).sum(),0);
    assertEquals(820,metrics.getRegionMetrics().values().stream().mapToDouble(v -> v.getStoreFileSize().get(Size.Unit.MEGABYTE)).sum(),0);
    assertEquals(82,metrics.getRegionMetrics().values().stream().mapToDouble(v -> v.getStoreFileIndexSize().get(Size.Unit.KILOBYTE)).sum(),0);
    assertEquals(((long)Integer.MAX_VALUE) * 2,metrics.getRegionMetrics().values().stream().mapToLong(v -> v.getReadRequestCount()).sum());
    assertEquals(300,metrics.getRegionMetrics().values().stream().mapToLong(v -> v.getFilteredReadRequestCount()).sum());
  }
  @Test public void testToString(){
    ServerMetrics metrics=ServerMetricsBuilder.toServerMetrics(ServerName.valueOf("localhost,1,1"),createServerLoadProto());
    String slToString=metrics.toString();
    assertTrue(slToString.contains("numberOfStores=13"));
    assertTrue(slToString.contains("numberOfStorefiles=114"));
    assertTrue(slToString.contains("storefileUncompressedSizeMB=129"));
    assertTrue(slToString.contains("storefileSizeMB=820"));
    assertTrue(slToString.contains("rootIndexSizeKB=504"));
    assertTrue(slToString.contains("coprocessors=[]"));
    assertTrue(slToString.contains("filteredReadRequestsCount=300"));
  }
  @Test public void testRegionLoadWrapAroundAggregation(){
    ServerMetrics metrics=ServerMetricsBuilder.toServerMetrics(ServerName.valueOf("localhost,1,1"),createServerLoadProto());
    long totalCount=((long)Integer.MAX_VALUE) * 2;
    assertEquals(totalCount,metrics.getRegionMetrics().values().stream().mapToLong(v -> v.getReadRequestCount()).sum());
    assertEquals(totalCount,metrics.getRegionMetrics().values().stream().mapToLong(v -> v.getWriteRequestCount()).sum());
  }
  private ClusterStatusProtos.ServerLoad createServerLoadProto(){
    HBaseProtos.RegionSpecifier rSpecOne=HBaseProtos.RegionSpecifier.newBuilder().setType(HBaseProtos.RegionSpecifier.RegionSpecifierType.ENCODED_REGION_NAME).setValue(ByteString.copyFromUtf8("ASDFGQWERT")).build();
    HBaseProtos.RegionSpecifier rSpecTwo=HBaseProtos.RegionSpecifier.newBuilder().setType(HBaseProtos.RegionSpecifier.RegionSpecifierType.ENCODED_REGION_NAME).setValue(ByteString.copyFromUtf8("QWERTYUIOP")).build();
    ClusterStatusProtos.RegionLoad rlOne=ClusterStatusProtos.RegionLoad.newBuilder().setRegionSpecifier(rSpecOne).setStores(10).setStorefiles(101).setStoreUncompressedSizeMB(106).setStorefileSizeMB(520).setFilteredReadRequestsCount(100).setStorefileIndexSizeKB(42).setRootIndexSizeKB(201).setReadRequestsCount(Integer.MAX_VALUE).setWriteRequestsCount(Integer.MAX_VALUE).build();
    ClusterStatusProtos.RegionLoad rlTwo=ClusterStatusProtos.RegionLoad.newBuilder().setRegionSpecifier(rSpecTwo).setStores(3).setStorefiles(13).setStoreUncompressedSizeMB(23).setStorefileSizeMB(300).setFilteredReadRequestsCount(200).setStorefileIndexSizeKB(40).setRootIndexSizeKB(303).setReadRequestsCount(Integer.MAX_VALUE).setWriteRequestsCount(Integer.MAX_VALUE).build();
    ClusterStatusProtos.ServerLoad sl=ClusterStatusProtos.ServerLoad.newBuilder().addRegionLoads(rlOne).addRegionLoads(rlTwo).build();
    return sl;
  }
}
