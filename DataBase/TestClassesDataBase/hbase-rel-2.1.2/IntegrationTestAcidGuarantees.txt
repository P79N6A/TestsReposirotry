/** 
 * This Integration Test verifies acid guarantees across column families by frequently writing values to rows with multiple column families and concurrently reading entire rows that expect all column families. <p> Sample usage: <pre> hbase org.apache.hadoop.hbase.IntegrationTestAcidGuarantees -Dmillis=10000 -DnumWriters=50 -DnumGetters=2 -DnumScanners=2 -DnumUniqueRows=5 </pre>
 */
@Category(IntegrationTests.class) public class IntegrationTestAcidGuarantees extends IntegrationTestBase {
  private static final int SERVER_COUNT=1;
  AcidGuaranteesTestTool tool;
  @Override public int runTestFromCommandLine() throws Exception {
    return tool.run(new String[0]);
  }
  @Override public void setUpCluster() throws Exception {
    util=getTestingUtil(getConf());
    util.initializeCluster(SERVER_COUNT);
    conf=getConf();
    conf.set(HConstants.HREGION_MEMSTORE_FLUSH_SIZE,String.valueOf(128 * 1024));
    conf.set(HConstants.HBASE_REGION_SPLIT_POLICY_KEY,ConstantSizeRegionSplitPolicy.class.getName());
    tool=new AcidGuaranteesTestTool();
    tool.setConf(getConf());
  }
  @Override public TableName getTablename(){
    return TABLE_NAME;
  }
  @Override protected Set<String> getColumnFamilies(){
    return Sets.newHashSet(Bytes.toString(FAMILY_A),Bytes.toString(FAMILY_B),Bytes.toString(FAMILY_C));
  }
  private void runTestAtomicity(  long millisToRun,  int numWriters,  int numGetters,  int numScanners,  int numUniqueRows) throws Exception {
    tool.run(new String[]{"-millis",String.valueOf(millisToRun),"-numWriters",String.valueOf(numWriters),"-numGetters",String.valueOf(numGetters),"-numScanners",String.valueOf(numScanners),"-numUniqueRows",String.valueOf(numUniqueRows)});
  }
  @Test public void testGetAtomicity() throws Exception {
    runTestAtomicity(20000,4,4,0,3);
  }
  @Test public void testScanAtomicity() throws Exception {
    runTestAtomicity(20000,3,0,2,3);
  }
  @Test public void testMixedAtomicity() throws Exception {
    runTestAtomicity(20000,4,2,2,3);
  }
  public static void main(  String[] args) throws Exception {
    Configuration conf=HBaseConfiguration.create();
    IntegrationTestingUtility.setUseDistributedCluster(conf);
    int ret=ToolRunner.run(conf,new IntegrationTestAcidGuarantees(),args);
    System.exit(ret);
  }
}
