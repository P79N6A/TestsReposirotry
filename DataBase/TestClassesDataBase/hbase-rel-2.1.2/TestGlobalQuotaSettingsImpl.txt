@Category(SmallTests.class) public class TestGlobalQuotaSettingsImpl {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestGlobalQuotaSettingsImpl.class);
  QuotaProtos.TimedQuota REQUEST_THROTTLE=QuotaProtos.TimedQuota.newBuilder().setScope(QuotaProtos.QuotaScope.MACHINE).setSoftLimit(100).setTimeUnit(HBaseProtos.TimeUnit.MINUTES).build();
  QuotaProtos.Throttle THROTTLE=QuotaProtos.Throttle.newBuilder().setReqNum(REQUEST_THROTTLE).build();
  QuotaProtos.SpaceQuota SPACE_QUOTA=QuotaProtos.SpaceQuota.newBuilder().setSoftLimit(1024L * 1024L).setViolationPolicy(QuotaProtos.SpaceViolationPolicy.NO_WRITES).build();
  @Test public void testMergeThrottle() throws IOException {
    QuotaProtos.Quotas quota=QuotaProtos.Quotas.newBuilder().setThrottle(THROTTLE).build();
    QuotaProtos.TimedQuota writeQuota=REQUEST_THROTTLE.toBuilder().setSoftLimit(500).build();
    QuotaProtos.ThrottleRequest writeThrottle=QuotaProtos.ThrottleRequest.newBuilder().setTimedQuota(writeQuota).setType(QuotaProtos.ThrottleType.WRITE_NUMBER).build();
    GlobalQuotaSettingsImpl settings=new GlobalQuotaSettingsImpl("joe",null,null,quota);
    GlobalQuotaSettingsImpl merged=settings.merge(new ThrottleSettings("joe",null,null,writeThrottle));
    QuotaProtos.Throttle mergedThrottle=merged.getThrottleProto();
    assertTrue(mergedThrottle.hasReqNum());
    QuotaProtos.TimedQuota actualReqNum=mergedThrottle.getReqNum();
    assertEquals(REQUEST_THROTTLE.getSoftLimit(),actualReqNum.getSoftLimit());
    assertTrue(mergedThrottle.hasWriteNum());
    QuotaProtos.TimedQuota actualWriteNum=mergedThrottle.getWriteNum();
    assertEquals(writeQuota.getSoftLimit(),actualWriteNum.getSoftLimit());
  }
  @Test public void testMergeSpace() throws IOException {
    TableName tn=TableName.valueOf("foo");
    QuotaProtos.Quotas quota=QuotaProtos.Quotas.newBuilder().setSpace(SPACE_QUOTA).build();
    GlobalQuotaSettingsImpl settings=new GlobalQuotaSettingsImpl(null,tn,null,quota);
    GlobalQuotaSettingsImpl merged=settings.merge(new SpaceLimitSettings(tn,SPACE_QUOTA.getSoftLimit(),SpaceViolationPolicy.DISABLE));
    QuotaProtos.SpaceQuota mergedSpaceQuota=merged.getSpaceProto();
    assertEquals(SPACE_QUOTA.getSoftLimit(),mergedSpaceQuota.getSoftLimit());
    assertEquals(QuotaProtos.SpaceViolationPolicy.DISABLE,mergedSpaceQuota.getViolationPolicy());
  }
  @Test public void testMergeThrottleAndSpace() throws IOException {
    final String ns="org1";
    QuotaProtos.Quotas quota=QuotaProtos.Quotas.newBuilder().setThrottle(THROTTLE).setSpace(SPACE_QUOTA).build();
    GlobalQuotaSettingsImpl settings=new GlobalQuotaSettingsImpl(null,null,ns,quota);
    QuotaProtos.TimedQuota writeQuota=REQUEST_THROTTLE.toBuilder().setSoftLimit(500).build();
    QuotaProtos.ThrottleRequest writeThrottle=QuotaProtos.ThrottleRequest.newBuilder().setTimedQuota(writeQuota).setType(QuotaProtos.ThrottleType.WRITE_NUMBER).build();
    GlobalQuotaSettingsImpl merged=settings.merge(new ThrottleSettings(null,null,ns,writeThrottle));
    GlobalQuotaSettingsImpl finalQuota=merged.merge(new SpaceLimitSettings(ns,SPACE_QUOTA.getSoftLimit(),SpaceViolationPolicy.NO_WRITES_COMPACTIONS));
    QuotaProtos.Throttle throttle=finalQuota.getThrottleProto();
    assertTrue(throttle.hasReqNum());
    QuotaProtos.TimedQuota reqNumQuota=throttle.getReqNum();
    assertEquals(REQUEST_THROTTLE.getSoftLimit(),reqNumQuota.getSoftLimit());
    assertTrue(throttle.hasWriteNum());
    QuotaProtos.TimedQuota writeNumQuota=throttle.getWriteNum();
    assertEquals(writeQuota.getSoftLimit(),writeNumQuota.getSoftLimit());
    QuotaProtos.SpaceQuota finalSpaceQuota=finalQuota.getSpaceProto();
    assertEquals(SPACE_QUOTA.getSoftLimit(),finalSpaceQuota.getSoftLimit());
    assertEquals(QuotaProtos.SpaceViolationPolicy.NO_WRITES_COMPACTIONS,finalSpaceQuota.getViolationPolicy());
  }
}
