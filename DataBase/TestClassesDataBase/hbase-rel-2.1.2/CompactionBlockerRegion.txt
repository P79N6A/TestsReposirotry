public abstract static class CompactionBlockerRegion extends HRegion {
  AtomicInteger compactCount=new AtomicInteger();
  volatile CountDownLatch compactionsBlocked=new CountDownLatch(0);
  volatile CountDownLatch compactionsWaiting=new CountDownLatch(0);
  @SuppressWarnings("deprecation") public CompactionBlockerRegion(  Path tableDir,  WAL log,  FileSystem fs,  Configuration confParam,  RegionInfo info,  TableDescriptor htd,  RegionServerServices rsServices){
    super(tableDir,log,fs,confParam,info,htd,rsServices);
  }
  public void stopCompactions(){
    compactionsBlocked=new CountDownLatch(1);
    compactionsWaiting=new CountDownLatch(1);
  }
  public void allowCompactions(){
    LOG.debug("allowing compactions");
    compactionsBlocked.countDown();
  }
  public void waitForCompactionToBlock() throws IOException {
    try {
      LOG.debug("waiting for compaction to block");
      compactionsWaiting.await();
      LOG.debug("compaction block reached");
    }
 catch (    InterruptedException ex) {
      throw new IOException(ex);
    }
  }
  @Override public boolean compact(  CompactionContext compaction,  HStore store,  ThroughputController throughputController) throws IOException {
    try {
      return super.compact(compaction,store,throughputController);
    }
  finally {
      compactCount.getAndIncrement();
    }
  }
  @Override public boolean compact(  CompactionContext compaction,  HStore store,  ThroughputController throughputController,  User user) throws IOException {
    try {
      return super.compact(compaction,store,throughputController,user);
    }
  finally {
      compactCount.getAndIncrement();
    }
  }
  public int countStoreFiles(){
    int count=0;
    for (    HStore store : stores.values()) {
      count+=store.getStorefilesCount();
    }
    return count;
  }
}
