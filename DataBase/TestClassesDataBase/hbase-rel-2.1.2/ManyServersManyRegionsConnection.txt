/** 
 * Fake many regionservers and many regions on a connection implementation.
 */
static class ManyServersManyRegionsConnection extends ConnectionImplementation {
  final Map<ServerName,ClientService.BlockingInterface> serversByClient;
  /** 
 * Map of faked-up rows of a 'meta table'.
 */
  final SortedMap<byte[],Pair<HRegionInfo,ServerName>> meta;
  final AtomicLong sequenceids=new AtomicLong(0);
  private final Configuration conf;
  ManyServersManyRegionsConnection(  Configuration conf,  ExecutorService pool,  User user) throws IOException {
    super(conf,pool,user);
    int serverCount=conf.getInt("hbase.test.servers",10);
    this.serversByClient=new HashMap<>(serverCount);
    this.meta=makeMeta(Bytes.toBytes(conf.get("hbase.test.tablename",Bytes.toString(BIG_USER_TABLE))),conf.getInt("hbase.test.regions",100),conf.getLong("hbase.test.namespace.span",1000),serverCount);
    this.conf=conf;
  }
  @Override public ClientService.BlockingInterface getClient(  ServerName sn) throws IOException {
    ClientService.BlockingInterface stub=null;
synchronized (this.serversByClient) {
      stub=this.serversByClient.get(sn);
      if (stub == null) {
        stub=new FakeServer(this.conf,meta,sequenceids);
        this.serversByClient.put(sn,stub);
      }
    }
    return stub;
  }
}
