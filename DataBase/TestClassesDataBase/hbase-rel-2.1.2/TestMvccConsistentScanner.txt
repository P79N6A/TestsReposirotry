@Category({LargeTests.class,ClientTests.class}) public class TestMvccConsistentScanner {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMvccConsistentScanner.class);
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static Connection CONN;
  private static final byte[] CF=Bytes.toBytes("cf");
  private static final byte[] CQ1=Bytes.toBytes("cq1");
  private static final byte[] CQ2=Bytes.toBytes("cq2");
  private static final byte[] CQ3=Bytes.toBytes("cq3");
  @Rule public TestName testName=new TestName();
  private TableName tableName;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    UTIL.startMiniCluster(2);
    CONN=ConnectionFactory.createConnection(UTIL.getConfiguration());
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    CONN.close();
    UTIL.shutdownMiniCluster();
  }
  @Before public void setUp() throws IOException, InterruptedException {
    tableName=TableName.valueOf(testName.getMethodName().replaceAll("[^0-9a-zA-Z]","_"));
    UTIL.createTable(tableName,CF);
    UTIL.waitTableAvailable(tableName);
  }
  private void put(  byte[] row,  byte[] cq,  byte[] value) throws IOException {
    try (Table table=CONN.getTable(tableName)){
      table.put(new Put(row).addColumn(CF,cq,value));
    }
   }
  private void move() throws IOException, InterruptedException {
    RegionInfo region=UTIL.getHBaseCluster().getRegions(tableName).stream().findAny().get().getRegionInfo();
    HRegionServer rs=UTIL.getHBaseCluster().getRegionServerThreads().stream().map(t -> t.getRegionServer()).filter(r -> !r.getOnlineTables().contains(tableName)).findAny().get();
    UTIL.getAdmin().move(region.getEncodedNameAsBytes(),Bytes.toBytes(rs.getServerName().getServerName()));
    while (UTIL.getRSForFirstRegionInTable(tableName) != rs) {
      Thread.sleep(100);
    }
  }
  @Test public void testRowAtomic() throws IOException, InterruptedException {
    byte[] row=Bytes.toBytes("row");
    put(row,CQ1,Bytes.toBytes(1));
    put(row,CQ2,Bytes.toBytes(2));
    try (Table table=CONN.getTable(tableName);ResultScanner scanner=table.getScanner(new Scan().setBatch(1).setCaching(1))){
      Result result=scanner.next();
      assertEquals(1,result.rawCells().length);
      assertEquals(1,Bytes.toInt(result.getValue(CF,CQ1)));
      move();
      put(row,CQ3,Bytes.toBytes(3));
      result=scanner.next();
      assertEquals(1,result.rawCells().length);
      assertEquals(2,Bytes.toInt(result.getValue(CF,CQ2)));
      assertNull(scanner.next());
    }
   }
  @Test public void testCrossRowAtomicInRegion() throws IOException, InterruptedException {
    put(Bytes.toBytes("row1"),CQ1,Bytes.toBytes(1));
    put(Bytes.toBytes("row2"),CQ1,Bytes.toBytes(2));
    try (Table table=CONN.getTable(tableName);ResultScanner scanner=table.getScanner(new Scan().setCaching(1))){
      Result result=scanner.next();
      assertArrayEquals(Bytes.toBytes("row1"),result.getRow());
      assertEquals(1,Bytes.toInt(result.getValue(CF,CQ1)));
      move();
      put(Bytes.toBytes("row3"),CQ1,Bytes.toBytes(3));
      result=scanner.next();
      assertArrayEquals(Bytes.toBytes("row2"),result.getRow());
      assertEquals(2,Bytes.toInt(result.getValue(CF,CQ1)));
      assertNull(scanner.next());
    }
   }
}
