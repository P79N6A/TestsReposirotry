/** 
 * Test the restore/clone operation from a file-system point of view.
 */
@Category({RegionServerTests.class,MediumTests.class}) public class TestRestoreSnapshotHelper {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRestoreSnapshotHelper.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestRestoreSnapshotHelper.class);
  protected final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  protected final static String TEST_HFILE="abc";
  protected Configuration conf;
  protected Path archiveDir;
  protected FileSystem fs;
  protected Path rootDir;
  protected void setupConf(  Configuration conf){
  }
  @BeforeClass public static void setupCluster() throws Exception {
    TEST_UTIL.startMiniCluster();
  }
  @AfterClass public static void tearDownCluster() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Before public void setup() throws Exception {
    rootDir=TEST_UTIL.getDataTestDir("testRestore");
    archiveDir=new Path(rootDir,HConstants.HFILE_ARCHIVE_DIRECTORY);
    fs=TEST_UTIL.getTestFileSystem();
    conf=TEST_UTIL.getConfiguration();
    setupConf(conf);
    FSUtils.setRootDir(conf,rootDir);
  }
  @After public void tearDown() throws Exception {
    fs.delete(TEST_UTIL.getDataTestDir(),true);
  }
  protected SnapshotMock createSnapshotMock() throws IOException {
    return new SnapshotMock(TEST_UTIL.getConfiguration(),fs,rootDir);
  }
  @Test public void testRestore() throws IOException {
    restoreAndVerify("snapshot","testRestore");
  }
  @Test public void testRestoreWithNamespace() throws IOException {
    restoreAndVerify("snapshot","namespace1:testRestoreWithNamespace");
  }
  @Test public void testNoHFileLinkInRootDir() throws IOException {
    rootDir=TEST_UTIL.getDefaultRootDirPath();
    FSUtils.setRootDir(conf,rootDir);
    fs=rootDir.getFileSystem(conf);
    TableName tableName=TableName.valueOf("testNoHFileLinkInRootDir");
    String snapshotName=tableName.getNameAsString() + "-snapshot";
    createTableAndSnapshot(tableName,snapshotName);
    Path restoreDir=new Path("/hbase/.tmp-restore");
    RestoreSnapshotHelper.copySnapshotForScanner(conf,fs,rootDir,restoreDir,snapshotName);
    checkNoHFileLinkInTableDir(tableName);
  }
  protected void createTableAndSnapshot(  TableName tableName,  String snapshotName) throws IOException {
    byte[] column=Bytes.toBytes("A");
    Table table=TEST_UTIL.createTable(tableName,column,2);
    TEST_UTIL.loadTable(table,column);
    TEST_UTIL.getAdmin().snapshot(snapshotName,tableName);
  }
  private void checkNoHFileLinkInTableDir(  TableName tableName) throws IOException {
    Path[] tableDirs=new Path[]{CommonFSUtils.getTableDir(rootDir,tableName),CommonFSUtils.getTableDir(new Path(rootDir,HConstants.HFILE_ARCHIVE_DIRECTORY),tableName),CommonFSUtils.getTableDir(MobUtils.getMobHome(rootDir),tableName)};
    for (    Path tableDir : tableDirs) {
      Assert.assertFalse(hasHFileLink(tableDir));
    }
  }
  private boolean hasHFileLink(  Path tableDir) throws IOException {
    if (fs.exists(tableDir)) {
      RemoteIterator<LocatedFileStatus> iterator=fs.listFiles(tableDir,true);
      while (iterator.hasNext()) {
        LocatedFileStatus fileStatus=iterator.next();
        if (fileStatus.isFile() && HFileLink.isHFileLink(fileStatus.getPath())) {
          return true;
        }
      }
    }
    return false;
  }
  private void restoreAndVerify(  final String snapshotName,  final String tableName) throws IOException {
    SnapshotMock snapshotMock=createSnapshotMock();
    SnapshotMock.SnapshotBuilder builder=snapshotMock.createSnapshotV2("snapshot",tableName);
    builder.addRegionV1();
    builder.addRegionV2();
    builder.addRegionV2();
    builder.addRegionV1();
    Path snapshotDir=builder.commit();
    TableDescriptor htd=builder.getTableDescriptor();
    SnapshotDescription desc=builder.getSnapshotDescription();
    TableDescriptor htdClone=snapshotMock.createHtd("testtb-clone");
    testRestore(snapshotDir,desc,htdClone);
    verifyRestore(rootDir,htd,htdClone);
    SnapshotDescription cloneDesc=SnapshotDescription.newBuilder().setName("cloneSnapshot").setTable("testtb-clone").build();
    Path cloneDir=FSUtils.getTableDir(rootDir,htdClone.getTableName());
    TableDescriptor htdClone2=snapshotMock.createHtd("testtb-clone2");
    testRestore(cloneDir,cloneDesc,htdClone2);
    verifyRestore(rootDir,htd,htdClone2);
  }
  private void verifyRestore(  final Path rootDir,  final TableDescriptor sourceHtd,  final TableDescriptor htdClone) throws IOException {
    List<String> files=SnapshotTestingUtils.listHFileNames(fs,FSUtils.getTableDir(rootDir,htdClone.getTableName()));
    assertEquals(12,files.size());
    for (int i=0; i < files.size(); i+=2) {
      String linkFile=files.get(i);
      String refFile=files.get(i + 1);
      assertTrue(linkFile + " should be a HFileLink",HFileLink.isHFileLink(linkFile));
      assertTrue(refFile + " should be a Referene",StoreFileInfo.isReference(refFile));
      assertEquals(sourceHtd.getTableName(),HFileLink.getReferencedTableName(linkFile));
      Path refPath=getReferredToFile(refFile);
      LOG.debug("get reference name for file " + refFile + " = "+ refPath);
      assertTrue(refPath.getName() + " should be a HFileLink",HFileLink.isHFileLink(refPath.getName()));
      assertEquals(linkFile,refPath.getName());
    }
  }
  /** 
 * Execute the restore operation
 * @param snapshotDir The snapshot directory to use as "restore source"
 * @param sd The snapshot descriptor
 * @param htdClone The HTableDescriptor of the table to restore/clone.
 */
  private void testRestore(  final Path snapshotDir,  final SnapshotDescription sd,  final TableDescriptor htdClone) throws IOException {
    LOG.debug("pre-restore table=" + htdClone.getTableName() + " snapshot="+ snapshotDir);
    FSUtils.logFileSystemState(fs,rootDir,LOG);
    new FSTableDescriptors(conf).createTableDescriptor(htdClone);
    RestoreSnapshotHelper helper=getRestoreHelper(rootDir,snapshotDir,sd,htdClone);
    helper.restoreHdfsRegions();
    LOG.debug("post-restore table=" + htdClone.getTableName() + " snapshot="+ snapshotDir);
    FSUtils.logFileSystemState(fs,rootDir,LOG);
  }
  /** 
 * Initialize the restore helper, based on the snapshot and table information provided.
 */
  private RestoreSnapshotHelper getRestoreHelper(  final Path rootDir,  final Path snapshotDir,  final SnapshotDescription sd,  final TableDescriptor htdClone) throws IOException {
    ForeignExceptionDispatcher monitor=Mockito.mock(ForeignExceptionDispatcher.class);
    MonitoredTask status=Mockito.mock(MonitoredTask.class);
    SnapshotManifest manifest=SnapshotManifest.open(conf,fs,snapshotDir,sd);
    return new RestoreSnapshotHelper(conf,fs,manifest,htdClone,rootDir,monitor,status);
  }
  private Path getReferredToFile(  final String referenceName){
    Path fakeBasePath=new Path(new Path("table","region"),"cf");
    return StoreFileInfo.getReferredToFile(new Path(fakeBasePath,referenceName));
  }
}
