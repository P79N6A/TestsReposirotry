@Category({MasterTests.class,SmallTests.class}) public class TestMasterWALManager {
  private static final Logger LOG=LoggerFactory.getLogger(TestMasterWALManager.class);
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMasterWALManager.class);
  private static final HBaseTestingUtility HTU=new HBaseTestingUtility();
  private MasterWalManager mwm;
  private MasterServices masterServices;
  @Before public void before() throws IOException {
    MasterFileSystem mfs=Mockito.mock(MasterFileSystem.class);
    Mockito.when(mfs.getWALFileSystem()).thenReturn(HTU.getTestFileSystem());
    Path walRootDir=HTU.createWALRootDir();
    Mockito.when(mfs.getWALRootDir()).thenReturn(walRootDir);
    this.masterServices=Mockito.mock(MasterServices.class);
    Mockito.when(this.masterServices.getConfiguration()).thenReturn(HTU.getConfiguration());
    Mockito.when(this.masterServices.getMasterFileSystem()).thenReturn(mfs);
    Mockito.when(this.masterServices.getServerName()).thenReturn(ServerName.parseServerName("master.example.org,0123,456"));
    this.mwm=new MasterWalManager(this.masterServices);
  }
  @Test public void testIsWALDirectoryNameWithWALs() throws IOException {
    ServerName sn=ServerName.parseServerName("x.example.org,1234,5678");
    assertFalse(this.mwm.isWALDirectoryNameWithWALs(sn));
    FileSystem walFS=this.masterServices.getMasterFileSystem().getWALFileSystem();
    Path dir=new Path(this.mwm.getWALDirPath(),sn.toString());
    assertTrue(walFS.mkdirs(dir));
    assertTrue(this.mwm.isWALDirectoryNameWithWALs(sn));
    Set<ServerName> sns=new HashSet<ServerName>();
    sns.add(sn);
    List<Path> paths=this.mwm.createAndGetLogDirs(sns);
    assertTrue(this.mwm.isWALDirectoryNameWithWALs(sn));
  }
}
