/** 
 * Class to test AsyncAdmin.
 */
public abstract class TestAsyncAdminBase {
  protected static final Logger LOG=LoggerFactory.getLogger(TestAsyncAdminBase.class);
  protected final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  protected static final byte[] FAMILY=Bytes.toBytes("testFamily");
  protected static final byte[] FAMILY_0=Bytes.toBytes("cf0");
  protected static final byte[] FAMILY_1=Bytes.toBytes("cf1");
  protected static AsyncConnection ASYNC_CONN;
  protected AsyncAdmin admin;
  @Parameter public Supplier<AsyncAdmin> getAdmin;
  private static AsyncAdmin getRawAsyncAdmin(){
    return ASYNC_CONN.getAdmin();
  }
  private static AsyncAdmin getAsyncAdmin(){
    return ASYNC_CONN.getAdmin(ForkJoinPool.commonPool());
  }
  @Parameters public static List<Object[]> params(){
    return Arrays.asList(new Supplier<?>[]{TestAsyncAdminBase::getRawAsyncAdmin},new Supplier<?>[]{TestAsyncAdminBase::getAsyncAdmin});
  }
  @Rule public TestName testName=new TestName();
  protected TableName tableName;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_RPC_TIMEOUT_KEY,60000);
    TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT,120000);
    TEST_UTIL.getConfiguration().setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,2);
    TEST_UTIL.getConfiguration().setInt(START_LOG_ERRORS_AFTER_COUNT_KEY,0);
    TEST_UTIL.startMiniCluster(2);
    ASYNC_CONN=ConnectionFactory.createAsyncConnection(TEST_UTIL.getConfiguration()).get();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    IOUtils.closeQuietly(ASYNC_CONN);
    TEST_UTIL.shutdownMiniCluster();
  }
  @Before public void setUp() throws Exception {
    admin=getAdmin.get();
    String methodName=testName.getMethodName();
    tableName=TableName.valueOf(methodName.substring(0,methodName.length() - 3));
  }
  @After public void tearDown() throws Exception {
    admin.listTableNames(Pattern.compile(tableName.getNameAsString() + ".*"),false).whenCompleteAsync((tables,err) -> {
      if (tables != null) {
        tables.forEach(table -> {
          try {
            admin.disableTable(table).join();
          }
 catch (          Exception e) {
            LOG.debug("Table: " + tableName + " already disabled, so just deleting it.");
          }
          admin.deleteTable(table).join();
        }
);
      }
    }
,ForkJoinPool.commonPool()).join();
  }
  protected void createTableWithDefaultConf(  TableName tableName){
    createTableWithDefaultConf(tableName,null);
  }
  protected void createTableWithDefaultConf(  TableName tableName,  byte[][] splitKeys){
    createTableWithDefaultConf(tableName,splitKeys,FAMILY);
  }
  protected void createTableWithDefaultConf(  TableName tableName,  byte[][] splitKeys,  byte[]... families){
    TableDescriptorBuilder builder=TableDescriptorBuilder.newBuilder(tableName);
    for (    byte[] family : families) {
      builder.setColumnFamily(ColumnFamilyDescriptorBuilder.of(family));
    }
    CompletableFuture<Void> future=splitKeys == null ? admin.createTable(builder.build()) : admin.createTable(builder.build(),splitKeys);
    future.join();
  }
}
