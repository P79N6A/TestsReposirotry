@Category({SecurityTests.class,MediumTests.class}) public class TestVisibilityLablesWithGroups {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestVisibilityLablesWithGroups.class);
  public static final String CONFIDENTIAL="confidential";
  private static final String SECRET="secret";
  public static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final byte[] ROW_1=Bytes.toBytes("row1");
  private final static byte[] CF=Bytes.toBytes("f");
  private final static byte[] Q1=Bytes.toBytes("q1");
  private final static byte[] Q2=Bytes.toBytes("q2");
  private final static byte[] Q3=Bytes.toBytes("q3");
  private final static byte[] value1=Bytes.toBytes("value1");
  private final static byte[] value2=Bytes.toBytes("value2");
  private final static byte[] value3=Bytes.toBytes("value3");
  public static Configuration conf;
  @Rule public final TestName TEST_NAME=new TestName();
  public static User SUPERUSER;
  public static User TESTUSER;
  @BeforeClass public static void setupBeforeClass() throws Exception {
    conf=TEST_UTIL.getConfiguration();
    VisibilityTestUtil.enableVisiblityLabels(conf);
    conf.set("hbase.superuser","@supergroup");
    TEST_UTIL.startMiniCluster(1);
    SUPERUSER=User.createUserForTesting(conf,"admin",new String[]{"supergroup"});
    TESTUSER=User.createUserForTesting(conf,"test",new String[]{"testgroup"});
    TEST_UTIL.waitTableEnabled(LABELS_TABLE_NAME.getName(),50000);
    SUPERUSER.runAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          VisibilityClient.addLabels(conn,new String[]{SECRET,CONFIDENTIAL});
          VisibilityClient.setAuths(conn,new String[]{CONFIDENTIAL},"@testgroup");
        }
 catch (        Throwable t) {
          throw new IOException(t);
        }
        return null;
      }
    }
);
  }
  @Test public void testGroupAuths() throws Exception {
    final TableName tableName=TableName.valueOf(TEST_NAME.getMethodName());
    TEST_UTIL.createTable(tableName,CF);
    SUPERUSER.runAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try (Connection connection=ConnectionFactory.createConnection(conf);Table table=connection.getTable(tableName)){
          Put put=new Put(ROW_1);
          put.addColumn(CF,Q1,HConstants.LATEST_TIMESTAMP,value1);
          put.setCellVisibility(new CellVisibility(SECRET));
          table.put(put);
          put=new Put(ROW_1);
          put.addColumn(CF,Q2,HConstants.LATEST_TIMESTAMP,value2);
          put.setCellVisibility(new CellVisibility(CONFIDENTIAL));
          table.put(put);
          put=new Put(ROW_1);
          put.addColumn(CF,Q3,HConstants.LATEST_TIMESTAMP,value3);
          table.put(put);
        }
         return null;
      }
    }
);
    SUPERUSER.runAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try (Connection connection=ConnectionFactory.createConnection(conf);Table table=connection.getTable(tableName)){
          Scan s=new Scan();
          ResultScanner scanner=table.getScanner(s);
          Result[] next=scanner.next(1);
          assertTrue(next.length == 1);
          CellScanner cellScanner=next[0].cellScanner();
          cellScanner.advance();
          Cell current=cellScanner.current();
          assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),ROW_1,0,ROW_1.length));
          assertTrue(Bytes.equals(current.getQualifierArray(),current.getQualifierOffset(),current.getQualifierLength(),Q1,0,Q1.length));
          assertTrue(Bytes.equals(current.getValueArray(),current.getValueOffset(),current.getValueLength(),value1,0,value1.length));
          cellScanner.advance();
          current=cellScanner.current();
          assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),ROW_1,0,ROW_1.length));
          assertTrue(Bytes.equals(current.getQualifierArray(),current.getQualifierOffset(),current.getQualifierLength(),Q2,0,Q2.length));
          assertTrue(Bytes.equals(current.getValueArray(),current.getValueOffset(),current.getValueLength(),value2,0,value2.length));
          cellScanner.advance();
          current=cellScanner.current();
          assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),ROW_1,0,ROW_1.length));
          assertTrue(Bytes.equals(current.getQualifierArray(),current.getQualifierOffset(),current.getQualifierLength(),Q3,0,Q3.length));
          assertTrue(Bytes.equals(current.getValueArray(),current.getValueOffset(),current.getValueLength(),value3,0,value3.length));
        }
         return null;
      }
    }
);
    SUPERUSER.runAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        GetAuthsResponse authsResponse=null;
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          authsResponse=VisibilityClient.getAuths(conn,"@testgroup");
        }
 catch (        Throwable e) {
          fail("Should not have failed");
        }
        List<String> authsList=new ArrayList<>(authsResponse.getAuthList().size());
        for (        ByteString authBS : authsResponse.getAuthList()) {
          authsList.add(Bytes.toString(authBS.toByteArray()));
        }
        assertEquals(1,authsList.size());
        assertTrue(authsList.contains(CONFIDENTIAL));
        return null;
      }
    }
);
    TESTUSER.runAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try (Connection connection=ConnectionFactory.createConnection(conf);Table table=connection.getTable(tableName)){
          Scan s=new Scan();
          ResultScanner scanner=table.getScanner(s);
          Result[] next=scanner.next(1);
          assertTrue(next.length == 1);
          CellScanner cellScanner=next[0].cellScanner();
          cellScanner.advance();
          Cell current=cellScanner.current();
          assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),ROW_1,0,ROW_1.length));
          assertTrue(Bytes.equals(current.getQualifierArray(),current.getQualifierOffset(),current.getQualifierLength(),Q2,0,Q2.length));
          assertTrue(Bytes.equals(current.getValueArray(),current.getValueOffset(),current.getValueLength(),value2,0,value2.length));
          cellScanner.advance();
          current=cellScanner.current();
          assertTrue(Bytes.equals(current.getRowArray(),current.getRowOffset(),current.getRowLength(),ROW_1,0,ROW_1.length));
          assertTrue(Bytes.equals(current.getQualifierArray(),current.getQualifierOffset(),current.getQualifierLength(),Q3,0,Q3.length));
          assertTrue(Bytes.equals(current.getValueArray(),current.getValueOffset(),current.getValueLength(),value3,0,value3.length));
          Scan s1=new Scan();
          s1.setAuthorizations(new Authorizations(new String[]{SECRET,CONFIDENTIAL}));
          ResultScanner scanner1=table.getScanner(s1);
          Result[] next1=scanner1.next(1);
          assertTrue(next1.length == 1);
          CellScanner cellScanner1=next1[0].cellScanner();
          cellScanner1.advance();
          Cell current1=cellScanner1.current();
          assertTrue(Bytes.equals(current1.getRowArray(),current1.getRowOffset(),current1.getRowLength(),ROW_1,0,ROW_1.length));
          assertTrue(Bytes.equals(current1.getQualifierArray(),current1.getQualifierOffset(),current1.getQualifierLength(),Q2,0,Q2.length));
          assertTrue(Bytes.equals(current1.getValueArray(),current1.getValueOffset(),current1.getValueLength(),value2,0,value2.length));
          cellScanner1.advance();
          current1=cellScanner1.current();
          assertTrue(Bytes.equals(current1.getRowArray(),current1.getRowOffset(),current1.getRowLength(),ROW_1,0,ROW_1.length));
          assertTrue(Bytes.equals(current1.getQualifierArray(),current1.getQualifierOffset(),current1.getQualifierLength(),Q3,0,Q3.length));
          assertTrue(Bytes.equals(current1.getValueArray(),current1.getValueOffset(),current1.getValueLength(),value3,0,value3.length));
          Scan s2=new Scan();
          s2.setAuthorizations(new Authorizations(new String[]{SECRET}));
          ResultScanner scanner2=table.getScanner(s2);
          Result next2=scanner2.next();
          CellScanner cellScanner2=next2.cellScanner();
          cellScanner2.advance();
          Cell current2=cellScanner2.current();
          assertTrue(Bytes.equals(current2.getRowArray(),current2.getRowOffset(),current2.getRowLength(),ROW_1,0,ROW_1.length));
          assertTrue(Bytes.equals(current2.getQualifierArray(),current2.getQualifierOffset(),current2.getQualifierLength(),Q3,0,Q3.length));
          assertTrue(Bytes.equals(current2.getValueArray(),current2.getValueOffset(),current2.getValueLength(),value3,0,value3.length));
          assertFalse(cellScanner2.advance());
        }
         return null;
      }
    }
);
    SUPERUSER.runAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        VisibilityLabelsResponse response=null;
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          response=VisibilityClient.clearAuths(conn,new String[]{CONFIDENTIAL},"@testgroup");
        }
 catch (        Throwable e) {
          fail("Should not have failed");
        }
        return null;
      }
    }
);
    SUPERUSER.runAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        GetAuthsResponse authsResponse=null;
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          authsResponse=VisibilityClient.getAuths(conn,"@testgroup");
        }
 catch (        Throwable e) {
          fail("Should not have failed");
        }
        List<String> authsList=new ArrayList<>(authsResponse.getAuthList().size());
        for (        ByteString authBS : authsResponse.getAuthList()) {
          authsList.add(Bytes.toString(authBS.toByteArray()));
        }
        assertEquals(0,authsList.size());
        return null;
      }
    }
);
    TESTUSER.runAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try (Connection connection=ConnectionFactory.createConnection(conf);Table table=connection.getTable(tableName)){
          Scan s1=new Scan();
          s1.setAuthorizations(new Authorizations(new String[]{SECRET,CONFIDENTIAL}));
          ResultScanner scanner1=table.getScanner(s1);
          Result[] next1=scanner1.next(1);
          assertTrue(next1.length == 1);
          CellScanner cellScanner1=next1[0].cellScanner();
          cellScanner1.advance();
          Cell current1=cellScanner1.current();
          assertTrue(Bytes.equals(current1.getRowArray(),current1.getRowOffset(),current1.getRowLength(),ROW_1,0,ROW_1.length));
          assertTrue(Bytes.equals(current1.getQualifierArray(),current1.getQualifierOffset(),current1.getQualifierLength(),Q3,0,Q3.length));
          assertTrue(Bytes.equals(current1.getValueArray(),current1.getValueOffset(),current1.getValueLength(),value3,0,value3.length));
          assertFalse(cellScanner1.advance());
        }
         return null;
      }
    }
);
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
}
