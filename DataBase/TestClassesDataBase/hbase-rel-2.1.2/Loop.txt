/** 
 * Executes Generate and Verify in a loop. Data is not cleaned between runs, so each iteration adds more data.
 */
static class Loop extends Configured implements Tool {
  private static final Logger LOG=LoggerFactory.getLogger(Loop.class);
  private static final String USAGE="Usage: Loop <num iterations> <num mappers> " + "<num nodes per mapper> <output dir> <num reducers> [<width> <wrap multiplier>" + " <num walker threads>] \n"+ "where <num nodes per map> should be a multiple of width*wrap multiplier, 25M by default \n"+ "walkers will select and verify random flushed loop during Generation.";
  IntegrationTestBigLinkedList it;
  protected void runGenerator(  int numMappers,  long numNodes,  String outputDir,  Integer width,  Integer wrapMultiplier,  Integer numWalkers) throws Exception {
    Path outputPath=new Path(outputDir);
    UUID uuid=UUID.randomUUID();
    Path generatorOutput=new Path(outputPath,uuid.toString());
    Generator generator=new Generator();
    generator.setConf(getConf());
    int retCode=generator.run(numMappers,numNodes,generatorOutput,width,wrapMultiplier,numWalkers);
    if (retCode > 0) {
      throw new RuntimeException("Generator failed with return code: " + retCode);
    }
    if (numWalkers > 0) {
      if (!generator.verify()) {
        throw new RuntimeException("Generator.verify failed");
      }
    }
  }
  protected void runVerify(  String outputDir,  int numReducers,  long expectedNumNodes) throws Exception {
    Path outputPath=new Path(outputDir);
    UUID uuid=UUID.randomUUID();
    Path iterationOutput=new Path(outputPath,uuid.toString());
    Verify verify=new Verify();
    verify.setConf(getConf());
    int retCode=verify.run(iterationOutput,numReducers);
    if (retCode > 0) {
      throw new RuntimeException("Verify.run failed with return code: " + retCode);
    }
    if (!verify.verify(expectedNumNodes)) {
      throw new RuntimeException("Verify.verify failed");
    }
    LOG.info("Verify finished with success. Total nodes=" + expectedNumNodes);
  }
  @Override public int run(  String[] args) throws Exception {
    if (args.length < 5) {
      System.err.println(USAGE);
      return 1;
    }
    try {
      int numIterations=Integer.parseInt(args[0]);
      int numMappers=Integer.parseInt(args[1]);
      long numNodes=Long.parseLong(args[2]);
      String outputDir=args[3];
      int numReducers=Integer.parseInt(args[4]);
      Integer width=(args.length < 6) ? null : Integer.parseInt(args[5]);
      Integer wrapMultiplier=(args.length < 7) ? null : Integer.parseInt(args[6]);
      Integer numWalkers=(args.length < 8) ? 0 : Integer.parseInt(args[7]);
      long expectedNumNodes=0;
      if (numIterations < 0) {
        numIterations=Integer.MAX_VALUE;
      }
      LOG.info("Running Loop with args:" + Arrays.deepToString(args));
      for (int i=0; i < numIterations; i++) {
        LOG.info("Starting iteration = " + i);
        runGenerator(numMappers,numNodes,outputDir,width,wrapMultiplier,numWalkers);
        expectedNumNodes+=numMappers * numNodes;
        runVerify(outputDir,numReducers,expectedNumNodes);
      }
      return 0;
    }
 catch (    NumberFormatException e) {
      System.err.println("Parsing loop arguments failed: " + e.getMessage());
      System.err.println(USAGE);
      return 1;
    }
  }
}
