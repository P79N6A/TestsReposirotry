/** 
 * Simple mapper that makes Put output.
 */
static class RandomPutGeneratingMapper extends Mapper<NullWritable,NullWritable,ImmutableBytesWritable,Put> {
  private int keyLength;
  private static final int KEYLEN_DEFAULT=10;
  private static final String KEYLEN_CONF="randomkv.key.length";
  private int valLength;
  private static final int VALLEN_DEFAULT=10;
  private static final String VALLEN_CONF="randomkv.val.length";
  private static final byte[] QUALIFIER=Bytes.toBytes("data");
  private boolean multiTableMapper=false;
  private TableName[] tables=null;
  @Override protected void setup(  Context context) throws IOException, InterruptedException {
    super.setup(context);
    Configuration conf=context.getConfiguration();
    keyLength=conf.getInt(KEYLEN_CONF,KEYLEN_DEFAULT);
    valLength=conf.getInt(VALLEN_CONF,VALLEN_DEFAULT);
    multiTableMapper=conf.getBoolean(HFileOutputFormat2.MULTI_TABLE_HFILEOUTPUTFORMAT_CONF_KEY,false);
    if (multiTableMapper) {
      tables=TABLE_NAMES;
    }
 else {
      tables=new TableName[]{TABLE_NAMES[0]};
    }
  }
  @Override protected void map(  NullWritable n1,  NullWritable n2,  Mapper<NullWritable,NullWritable,ImmutableBytesWritable,Put>.Context context) throws java.io.IOException, InterruptedException {
    byte keyBytes[]=new byte[keyLength];
    byte valBytes[]=new byte[valLength];
    int taskId=context.getTaskAttemptID().getTaskID().getId();
    assert taskId < Byte.MAX_VALUE : "Unit tests dont support > 127 tasks!";
    Random random=new Random();
    byte[] key;
    for (int j=0; j < tables.length; ++j) {
      for (int i=0; i < ROWSPERSPLIT; i++) {
        random.nextBytes(keyBytes);
        keyBytes[keyLength - 1]=(byte)(taskId & 0xFF);
        random.nextBytes(valBytes);
        key=keyBytes;
        if (multiTableMapper) {
          key=MultiTableHFileOutputFormat.createCompositeKey(tables[j].getName(),keyBytes);
        }
        for (        byte[] family : TestHFileOutputFormat2.FAMILIES) {
          Put p=new Put(keyBytes);
          p.addColumn(family,QUALIFIER,valBytes);
          p.setTTL(1l);
          context.write(new ImmutableBytesWritable(key),p);
        }
      }
    }
  }
}
