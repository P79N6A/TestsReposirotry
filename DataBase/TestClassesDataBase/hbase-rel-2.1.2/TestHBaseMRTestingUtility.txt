@Category({MapReduceTests.class,LargeTests.class}) public class TestHBaseMRTestingUtility {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestHBaseMRTestingUtility.class);
  @Test public void testMRYarnConfigsPopulation() throws IOException {
    Map<String,String> dummyProps=new HashMap<>();
    dummyProps.put("mapreduce.jobtracker.address","dummyhost:11234");
    dummyProps.put("yarn.resourcemanager.address","dummyhost:11235");
    dummyProps.put("mapreduce.jobhistory.address","dummyhost:11236");
    dummyProps.put("yarn.resourcemanager.scheduler.address","dummyhost:11237");
    dummyProps.put("mapreduce.jobhistory.webapp.address","dummyhost:11238");
    dummyProps.put("yarn.resourcemanager.webapp.address","dummyhost:11239");
    HBaseTestingUtility hbt=new HBaseTestingUtility();
    for (    Map.Entry<String,String> entry : dummyProps.entrySet()) {
      hbt.getConfiguration().set(entry.getKey(),entry.getValue());
    }
    for (    Map.Entry<String,String> entry : dummyProps.entrySet()) {
      assertTrue("The Configuration for key " + entry.getKey() + " and value: "+ entry.getValue()+ " is not populated correctly",hbt.getConfiguration().get(entry.getKey()).equals(entry.getValue()));
    }
    hbt.startMiniMapReduceCluster();
    for (    Map.Entry<String,String> entry : dummyProps.entrySet()) {
      assertFalse("The MR prop: " + entry.getValue() + " is not overwritten when map reduce mini"+ "cluster is started",hbt.getConfiguration().get(entry.getKey()).equals(entry.getValue()));
    }
    hbt.shutdownMiniMapReduceCluster();
  }
}
