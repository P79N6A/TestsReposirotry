@Category({RestTests.class,MediumTests.class}) public class TestTableResource {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestTableResource.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestTableResource.class);
  private static final TableName TABLE=TableName.valueOf("TestTableResource");
  private static final String COLUMN_FAMILY="test";
  private static final String COLUMN=COLUMN_FAMILY + ":qualifier";
  private static final int NUM_REGIONS=4;
  private static List<HRegionLocation> regionMap;
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static final HBaseRESTTestingUtility REST_TEST_UTIL=new HBaseRESTTestingUtility();
  private static Client client;
  private static JAXBContext context;
  @BeforeClass public static void setUpBeforeClass() throws Exception {
    TEST_UTIL.startMiniCluster(3);
    REST_TEST_UTIL.startServletContainer(TEST_UTIL.getConfiguration());
    client=new Client(new Cluster().add("localhost",REST_TEST_UTIL.getServletPort()));
    context=JAXBContext.newInstance(TableModel.class,TableInfoModel.class,TableListModel.class,TableRegionModel.class);
    TEST_UTIL.createMultiRegionTable(TABLE,Bytes.toBytes(COLUMN_FAMILY),NUM_REGIONS);
    byte[] k=new byte[3];
    byte[][] famAndQf=CellUtil.parseColumn(Bytes.toBytes(COLUMN));
    List<Put> puts=new ArrayList<>();
    for (byte b1='a'; b1 < 'z'; b1++) {
      for (byte b2='a'; b2 < 'z'; b2++) {
        for (byte b3='a'; b3 < 'z'; b3++) {
          k[0]=b1;
          k[1]=b2;
          k[2]=b3;
          Put put=new Put(k);
          put.setDurability(Durability.SKIP_WAL);
          put.addColumn(famAndQf[0],famAndQf[1],k);
          puts.add(put);
        }
      }
    }
    Connection connection=TEST_UTIL.getConnection();
    Table table=connection.getTable(TABLE);
    table.put(puts);
    table.close();
    RegionLocator regionLocator=connection.getRegionLocator(TABLE);
    List<HRegionLocation> m=regionLocator.getAllRegionLocations();
    assertEquals(NUM_REGIONS,m.size());
    regionMap=m;
    LOG.error("regions: " + regionMap);
    regionLocator.close();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    REST_TEST_UTIL.shutdownServletContainer();
    TEST_UTIL.shutdownMiniCluster();
  }
  private static void checkTableList(  TableListModel model){
    boolean found=false;
    Iterator<TableModel> tables=model.getTables().iterator();
    assertTrue(tables.hasNext());
    while (tables.hasNext()) {
      TableModel table=tables.next();
      if (table.getName().equals(TABLE.getNameAsString())) {
        found=true;
        break;
      }
    }
    assertTrue(found);
  }
  void checkTableInfo(  TableInfoModel model){
    assertEquals(model.getName(),TABLE.getNameAsString());
    Iterator<TableRegionModel> regions=model.getRegions().iterator();
    assertTrue(regions.hasNext());
    while (regions.hasNext()) {
      TableRegionModel region=regions.next();
      boolean found=false;
      LOG.debug("looking for region " + region.getName());
      for (      HRegionLocation e : regionMap) {
        HRegionInfo hri=e.getRegionInfo();
        String hriRegionName=Bytes.toString(hri.getRegionName());
        String regionName=region.getName();
        LOG.debug("comparing to region " + hriRegionName);
        if (hriRegionName.equals(regionName)) {
          found=true;
          byte[] startKey=hri.getStartKey();
          byte[] endKey=hri.getEndKey();
          ServerName serverName=e.getServerName();
          InetSocketAddress sa=new InetSocketAddress(serverName.getHostname(),serverName.getPort());
          String location=sa.getHostName() + ":" + Integer.valueOf(sa.getPort());
          assertEquals(hri.getRegionId(),region.getId());
          assertTrue(Bytes.equals(startKey,region.getStartKey()));
          assertTrue(Bytes.equals(endKey,region.getEndKey()));
          assertEquals(location,region.getLocation());
          break;
        }
      }
      assertTrue("Couldn't find region " + region.getName(),found);
    }
  }
  @Test public void testTableListText() throws IOException {
    Response response=client.get("/",Constants.MIMETYPE_TEXT);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_TEXT,response.getHeader("content-type"));
  }
  @Test public void testTableListXML() throws IOException, JAXBException {
    Response response=client.get("/",Constants.MIMETYPE_XML);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_XML,response.getHeader("content-type"));
    TableListModel model=(TableListModel)context.createUnmarshaller().unmarshal(new ByteArrayInputStream(response.getBody()));
    checkTableList(model);
  }
  @Test public void testTableListJSON() throws IOException {
    Response response=client.get("/",Constants.MIMETYPE_JSON);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_JSON,response.getHeader("content-type"));
  }
  @Test public void testTableListPB() throws IOException, JAXBException {
    Response response=client.get("/",Constants.MIMETYPE_PROTOBUF);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_PROTOBUF,response.getHeader("content-type"));
    TableListModel model=new TableListModel();
    model.getObjectFromMessage(response.getBody());
    checkTableList(model);
    response=client.get("/",Constants.MIMETYPE_PROTOBUF_IETF);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_PROTOBUF_IETF,response.getHeader("content-type"));
    model=new TableListModel();
    model.getObjectFromMessage(response.getBody());
    checkTableList(model);
  }
  @Test public void testTableInfoText() throws IOException {
    Response response=client.get("/" + TABLE + "/regions",Constants.MIMETYPE_TEXT);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_TEXT,response.getHeader("content-type"));
  }
  @Test public void testTableInfoXML() throws IOException, JAXBException {
    Response response=client.get("/" + TABLE + "/regions",Constants.MIMETYPE_XML);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_XML,response.getHeader("content-type"));
    TableInfoModel model=(TableInfoModel)context.createUnmarshaller().unmarshal(new ByteArrayInputStream(response.getBody()));
    checkTableInfo(model);
  }
  @Test public void testTableInfoJSON() throws IOException {
    Response response=client.get("/" + TABLE + "/regions",Constants.MIMETYPE_JSON);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_JSON,response.getHeader("content-type"));
  }
  @Test public void testTableInfoPB() throws IOException, JAXBException {
    Response response=client.get("/" + TABLE + "/regions",Constants.MIMETYPE_PROTOBUF);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_PROTOBUF,response.getHeader("content-type"));
    TableInfoModel model=new TableInfoModel();
    model.getObjectFromMessage(response.getBody());
    checkTableInfo(model);
    response=client.get("/" + TABLE + "/regions",Constants.MIMETYPE_PROTOBUF_IETF);
    assertEquals(200,response.getCode());
    assertEquals(Constants.MIMETYPE_PROTOBUF_IETF,response.getHeader("content-type"));
    model=new TableInfoModel();
    model.getObjectFromMessage(response.getBody());
    checkTableInfo(model);
  }
}
