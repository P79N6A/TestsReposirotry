@Category({SecurityTests.class,MediumTests.class}) public class TestVisibilityLabelsOpWithDifferentUsersNoACL {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestVisibilityLabelsOpWithDifferentUsersNoACL.class);
  private static final String PRIVATE="private";
  private static final String CONFIDENTIAL="confidential";
  private static final String SECRET="secret";
  private static final HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  private static Configuration conf;
  @Rule public final TestName TEST_NAME=new TestName();
  private static User SUPERUSER;
  private static User NORMAL_USER;
  private static User NORMAL_USER1;
  @BeforeClass public static void setupBeforeClass() throws Exception {
    conf=TEST_UTIL.getConfiguration();
    VisibilityTestUtil.enableVisiblityLabels(conf);
    String currentUser=User.getCurrent().getName();
    conf.set("hbase.superuser","admin," + currentUser);
    TEST_UTIL.startMiniCluster(2);
    TEST_UTIL.waitTableEnabled(LABELS_TABLE_NAME.getName(),50000);
    SUPERUSER=User.createUserForTesting(conf,"admin",new String[]{"supergroup"});
    NORMAL_USER=User.createUserForTesting(conf,"user1",new String[]{});
    NORMAL_USER1=User.createUserForTesting(conf,"user2",new String[]{});
    addLabels();
  }
  @AfterClass public static void tearDownAfterClass() throws Exception {
    TEST_UTIL.shutdownMiniCluster();
  }
  @Test public void testLabelsTableOpsWithDifferentUsers() throws Throwable {
    PrivilegedExceptionAction<VisibilityLabelsResponse> action=new PrivilegedExceptionAction<VisibilityLabelsResponse>(){
      @Override public VisibilityLabelsResponse run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          return VisibilityClient.setAuths(conn,new String[]{CONFIDENTIAL,PRIVATE},"user1");
        }
 catch (        Throwable e) {
        }
        return null;
      }
    }
;
    VisibilityLabelsResponse response=SUPERUSER.runAs(action);
    assertTrue(response.getResult(0).getException().getValue().isEmpty());
    assertTrue(response.getResult(1).getException().getValue().isEmpty());
    action=new PrivilegedExceptionAction<VisibilityLabelsResponse>(){
      @Override public VisibilityLabelsResponse run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          return VisibilityClient.setAuths(conn,new String[]{CONFIDENTIAL,PRIVATE},"user3");
        }
 catch (        Throwable e) {
        }
        return null;
      }
    }
;
    response=NORMAL_USER1.runAs(action);
    assertEquals("org.apache.hadoop.hbase.security.AccessDeniedException",response.getResult(0).getException().getName());
    assertEquals("org.apache.hadoop.hbase.security.AccessDeniedException",response.getResult(1).getException().getName());
    PrivilegedExceptionAction<GetAuthsResponse> action1=new PrivilegedExceptionAction<GetAuthsResponse>(){
      @Override public GetAuthsResponse run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          return VisibilityClient.getAuths(conn,"user1");
        }
 catch (        Throwable e) {
        }
        return null;
      }
    }
;
    GetAuthsResponse authsResponse=NORMAL_USER.runAs(action1);
    assertTrue(authsResponse.getAuthList().isEmpty());
    authsResponse=NORMAL_USER1.runAs(action1);
    assertTrue(authsResponse.getAuthList().isEmpty());
    authsResponse=SUPERUSER.runAs(action1);
    List<String> authsList=new ArrayList<>(authsResponse.getAuthList().size());
    for (    ByteString authBS : authsResponse.getAuthList()) {
      authsList.add(Bytes.toString(authBS.toByteArray()));
    }
    assertEquals(2,authsList.size());
    assertTrue(authsList.contains(CONFIDENTIAL));
    assertTrue(authsList.contains(PRIVATE));
    PrivilegedExceptionAction<VisibilityLabelsResponse> action2=new PrivilegedExceptionAction<VisibilityLabelsResponse>(){
      @Override public VisibilityLabelsResponse run() throws Exception {
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          return VisibilityClient.clearAuths(conn,new String[]{CONFIDENTIAL,PRIVATE},"user1");
        }
 catch (        Throwable e) {
        }
        return null;
      }
    }
;
    response=NORMAL_USER1.runAs(action2);
    assertEquals("org.apache.hadoop.hbase.security.AccessDeniedException",response.getResult(0).getException().getName());
    assertEquals("org.apache.hadoop.hbase.security.AccessDeniedException",response.getResult(1).getException().getName());
    response=SUPERUSER.runAs(action2);
    assertTrue(response.getResult(0).getException().getValue().isEmpty());
    assertTrue(response.getResult(1).getException().getValue().isEmpty());
    authsResponse=SUPERUSER.runAs(action1);
    assertTrue(authsResponse.getAuthList().isEmpty());
  }
  private static void addLabels() throws Exception {
    PrivilegedExceptionAction<VisibilityLabelsResponse> action=new PrivilegedExceptionAction<VisibilityLabelsResponse>(){
      @Override public VisibilityLabelsResponse run() throws Exception {
        String[] labels={SECRET,CONFIDENTIAL,PRIVATE};
        try (Connection conn=ConnectionFactory.createConnection(conf)){
          VisibilityClient.addLabels(conn,labels);
        }
 catch (        Throwable t) {
          throw new IOException(t);
        }
        return null;
      }
    }
;
    SUPERUSER.runAs(action);
  }
}
