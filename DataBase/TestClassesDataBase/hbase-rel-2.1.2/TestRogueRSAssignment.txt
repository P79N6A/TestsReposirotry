/** 
 * Tests to verify master/ assignment manager functionality against rogue RS
 */
@Category({MasterTests.class,MediumTests.class}) public class TestRogueRSAssignment {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRogueRSAssignment.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestRogueRSAssignment.class);
  @Rule public final TestName name=new TestName();
  @Rule public ExpectedException exception=ExpectedException.none();
  private static final int initialRegionCount=3;
  private final static byte[] FAMILY=Bytes.toBytes("FAMILY");
  private static final HBaseTestingUtility UTIL=new HBaseTestingUtility();
  private static final Configuration conf=UTIL.getConfiguration();
  private static Admin admin;
  private static MiniHBaseCluster cluster;
  private static HMaster master;
  private static void setupConf(  Configuration conf){
    conf.setInt("hbase.assignment.maximum.attempts",3);
    conf.setInt("hbase.master.maximum.ping.server.attempts",3);
    conf.setInt("hbase.master.ping.server.retry.sleep.interval",1);
    conf.setInt(MasterProcedureConstants.MASTER_PROCEDURE_THREADS,1);
    conf.setInt(MasterProcedureConstants.MASTER_URGENT_PROCEDURE_THREADS,0);
  }
  @BeforeClass public static void setupCluster() throws Exception {
    setupConf(conf);
    UTIL.startMiniCluster(2);
    cluster=UTIL.getHBaseCluster();
    assertNotNull(cluster);
    admin=UTIL.getAdmin();
    assertNotNull(admin);
    master=cluster.getMaster();
    assertNotNull(master);
  }
  @AfterClass public static void cleanupTest() throws Exception {
    try {
      UTIL.shutdownMiniCluster();
      cluster=null;
      admin=null;
    }
 catch (    Exception e) {
      LOG.warn("failure shutting down cluster",e);
    }
  }
  @Before public void setup() throws IOException {
    admin.setBalancerRunning(false,true);
  }
  @After public void tearDown() throws Exception {
    for (    TableDescriptor td : UTIL.getAdmin().listTableDescriptors()) {
      LOG.info("Tear down, remove table=" + td.getTableName());
      UTIL.deleteTable(td.getTableName());
    }
    admin.setBalancerRunning(true,false);
  }
  /** 
 * Ignore this test, see HBASE-21421
 */
  @Test @Ignore public void testReportRSWithWrongRegion() throws Exception {
    final TableName tableName=TableName.valueOf(this.name.getMethodName());
    List<HRegionInfo> tableRegions=createTable(tableName);
    final ServerName sn=ServerName.parseVersionedServerName(ServerName.valueOf("1.example.org",1,System.currentTimeMillis()).getVersionedBytes());
    RegionServerStatusProtos.RegionServerReportRequest.Builder request=makeRSReportRequestWithRegions(sn,tableRegions.get(1));
    exception.expect(ServiceException.class);
    exception.expectCause(isA(YouAreDeadException.class));
    RegionServerStatusProtos.RegionServerReportResponse response=master.getMasterRpcServices().regionServerReport(null,request.build());
  }
  private RegionServerStatusProtos.RegionServerReportRequest.Builder makeRSReportRequestWithRegions(  final ServerName sn,  HRegionInfo... regions){
    ClusterStatusProtos.ServerLoad.Builder sl=ClusterStatusProtos.ServerLoad.newBuilder();
    for (int i=0; i < regions.length; i++) {
      HBaseProtos.RegionSpecifier.Builder rs=HBaseProtos.RegionSpecifier.newBuilder();
      rs.setType(HBaseProtos.RegionSpecifier.RegionSpecifierType.REGION_NAME);
      rs.setValue(UnsafeByteOperations.unsafeWrap(regions[i].getRegionName()));
      ClusterStatusProtos.RegionLoad.Builder rl=ClusterStatusProtos.RegionLoad.newBuilder().setRegionSpecifier(rs.build());
      sl.addRegionLoads(i,rl.build());
    }
    return RegionServerStatusProtos.RegionServerReportRequest.newBuilder().setServer(ProtobufUtil.toServerName(sn)).setLoad(sl);
  }
  private List<HRegionInfo> createTable(  final TableName tableName) throws Exception {
    TableDescriptorBuilder tdBuilder=TableDescriptorBuilder.newBuilder(tableName);
    tdBuilder.setColumnFamily(ColumnFamilyDescriptorBuilder.newBuilder(FAMILY).build());
    byte[][] rows=new byte[initialRegionCount - 1][];
    for (int i=0; i < rows.length; ++i) {
      rows[i]=Bytes.toBytes(String.format("%d",i));
    }
    admin.createTable(tdBuilder.build(),rows);
    return assertRegionCount(tableName,initialRegionCount);
  }
  private List<HRegionInfo> assertRegionCount(  final TableName tableName,  final int nregions) throws Exception {
    UTIL.waitUntilNoRegionsInTransition();
    List<HRegionInfo> tableRegions=admin.getTableRegions(tableName);
    assertEquals(nregions,tableRegions.size());
    return tableRegions;
  }
}
