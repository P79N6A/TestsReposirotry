@Category({SmallTests.class}) public class TestMultiTableSnapshotInputFormatImpl {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestMultiTableSnapshotInputFormatImpl.class);
  private MultiTableSnapshotInputFormatImpl subject;
  private Map<String,Collection<Scan>> snapshotScans;
  private Path restoreDir;
  private Configuration conf;
  private Path rootDir;
  @Before public void setUp() throws Exception {
    this.subject=Mockito.spy(new MultiTableSnapshotInputFormatImpl());
    doNothing().when(this.subject).restoreSnapshot(any(),any(),any(),any(),any());
    this.conf=new Configuration();
    this.rootDir=new Path("file:///test-root-dir");
    FSUtils.setRootDir(conf,rootDir);
    this.snapshotScans=ImmutableMap.<String,Collection<Scan>>of("snapshot1",ImmutableList.of(new Scan(Bytes.toBytes("1"),Bytes.toBytes("2"))),"snapshot2",ImmutableList.of(new Scan(Bytes.toBytes("3"),Bytes.toBytes("4")),new Scan(Bytes.toBytes("5"),Bytes.toBytes("6"))));
    this.restoreDir=new Path(FSUtils.getRootDir(conf),"restore-dir");
  }
  public void callSetInput() throws IOException {
    subject.setInput(this.conf,snapshotScans,restoreDir);
  }
  public Map<String,Collection<ScanWithEquals>> toScanWithEquals(  Map<String,Collection<Scan>> snapshotScans) throws IOException {
    Map<String,Collection<ScanWithEquals>> rtn=Maps.newHashMap();
    for (    Map.Entry<String,Collection<Scan>> entry : snapshotScans.entrySet()) {
      List<ScanWithEquals> scans=Lists.newArrayList();
      for (      Scan scan : entry.getValue()) {
        scans.add(new ScanWithEquals(scan));
      }
      rtn.put(entry.getKey(),scans);
    }
    return rtn;
  }
public static class ScanWithEquals {
    private final String startRow;
    private final String stopRow;
    /** 
 * Creates a new instance of this class while copying all values.
 * @param scan The scan instance to copy from.
 * @throws java.io.IOException When copying the values fails.
 */
    public ScanWithEquals(    Scan scan) throws IOException {
      this.startRow=Bytes.toStringBinary(scan.getStartRow());
      this.stopRow=Bytes.toStringBinary(scan.getStopRow());
    }
    @Override public boolean equals(    Object obj){
      if (!(obj instanceof ScanWithEquals)) {
        return false;
      }
      ScanWithEquals otherScan=(ScanWithEquals)obj;
      return Objects.equals(this.startRow,otherScan.startRow) && Objects.equals(this.stopRow,otherScan.stopRow);
    }
    @Override public String toString(){
      return org.apache.hbase.thirdparty.com.google.common.base.MoreObjects.toStringHelper(this).add("startRow",startRow).add("stopRow",stopRow).toString();
    }
  }
  @Test public void testSetInputSetsSnapshotToScans() throws Exception {
    callSetInput();
    Map<String,Collection<Scan>> actual=subject.getSnapshotsToScans(conf);
    Map<String,Collection<ScanWithEquals>> actualWithEquals=toScanWithEquals(actual);
    Map<String,Collection<ScanWithEquals>> expectedWithEquals=toScanWithEquals(snapshotScans);
    assertEquals(expectedWithEquals,actualWithEquals);
  }
  @Test public void testSetInputPushesRestoreDirectories() throws Exception {
    callSetInput();
    Map<String,Path> restoreDirs=subject.getSnapshotDirs(conf);
    assertEquals(this.snapshotScans.keySet(),restoreDirs.keySet());
  }
  @Test public void testSetInputCreatesRestoreDirectoriesUnderRootRestoreDir() throws Exception {
    callSetInput();
    Map<String,Path> restoreDirs=subject.getSnapshotDirs(conf);
    for (    Path snapshotDir : restoreDirs.values()) {
      assertEquals("Expected " + snapshotDir + " to be a child of "+ restoreDir,restoreDir,snapshotDir.getParent());
    }
  }
  @Test public void testSetInputRestoresSnapshots() throws Exception {
    callSetInput();
    Map<String,Path> snapshotDirs=subject.getSnapshotDirs(conf);
    for (    Map.Entry<String,Path> entry : snapshotDirs.entrySet()) {
      verify(this.subject).restoreSnapshot(eq(this.conf),eq(entry.getKey()),eq(this.rootDir),eq(entry.getValue()),any());
    }
  }
}
