private class SocketTimeoutRsExecutor extends GoodRsExecutor {
  private final int maxSocketTimeoutRetries;
  private final int maxServerRetries;
  private ServerName lastServer;
  private int sockTimeoutRetries;
  private int serverRetries;
  public SocketTimeoutRsExecutor(  int maxSocketTimeoutRetries,  int maxServerRetries){
    this.maxServerRetries=maxServerRetries;
    this.maxSocketTimeoutRetries=maxSocketTimeoutRetries;
  }
  @Override public ExecuteProceduresResponse sendRequest(  ServerName server,  ExecuteProceduresRequest req) throws IOException {
    if (sockTimeoutRetries++ < maxSocketTimeoutRetries) {
      if (sockTimeoutRetries == 1)       assertNotEquals(lastServer,server);
      lastServer=server;
      LOG.debug("Socket timeout for server=" + server + " retries="+ sockTimeoutRetries);
      throw new SocketTimeoutException("simulate socket timeout");
    }
 else     if (serverRetries++ < maxServerRetries) {
      LOG.info("Mark server=" + server + " as dead. serverRetries="+ serverRetries);
      master.getServerManager().moveFromOnlineToDeadServers(server);
      sockTimeoutRetries=0;
      throw new SocketTimeoutException("simulate socket timeout");
    }
 else {
      return super.sendRequest(server,req);
    }
  }
}
