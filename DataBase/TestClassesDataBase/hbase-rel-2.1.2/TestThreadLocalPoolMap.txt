@Category({MiscTests.class,SmallTests.class}) public class TestThreadLocalPoolMap extends PoolMapTestBase {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestThreadLocalPoolMap.class);
  @Override protected PoolType getPoolType(){
    return PoolType.ThreadLocal;
  }
  @Test public void testSingleThreadedClient() throws InterruptedException, ExecutionException {
    Random rand=ThreadLocalRandom.current();
    String randomKey=String.valueOf(rand.nextInt());
    String randomValue=String.valueOf(rand.nextInt());
    runThread(randomKey,randomValue,randomValue);
    assertEquals(1,poolMap.size(randomKey));
  }
  @Test public void testMultiThreadedClients() throws InterruptedException, ExecutionException {
    Random rand=ThreadLocalRandom.current();
    for (int i=0; i < POOL_SIZE; i++) {
      String randomKey=String.valueOf(rand.nextInt());
      String randomValue=String.valueOf(rand.nextInt());
      runThread(randomKey,randomValue,randomValue);
      assertEquals(1,poolMap.size(randomKey));
    }
    String randomKey=String.valueOf(rand.nextInt());
    for (int i=0; i < POOL_SIZE; i++) {
      String randomValue=String.valueOf(rand.nextInt());
      runThread(randomKey,randomValue,randomValue);
      assertEquals(i + 1,poolMap.size(randomKey));
    }
  }
  @Test public void testPoolCap() throws InterruptedException, ExecutionException {
    Random rand=ThreadLocalRandom.current();
    String randomKey=String.valueOf(rand.nextInt());
    for (int i=0; i < POOL_SIZE * 2; i++) {
      String randomValue=String.valueOf(rand.nextInt());
      runThread(randomKey,randomValue,randomValue);
    }
    assertEquals(POOL_SIZE * 2,poolMap.size(randomKey));
  }
}
