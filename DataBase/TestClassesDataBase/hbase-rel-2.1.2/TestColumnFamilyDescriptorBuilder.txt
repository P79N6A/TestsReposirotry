@Category({MiscTests.class,SmallTests.class}) public class TestColumnFamilyDescriptorBuilder {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestColumnFamilyDescriptorBuilder.class);
  @Rule public ExpectedException expectedEx=ExpectedException.none();
  @Test public void testBuilder() throws DeserializationException {
    ColumnFamilyDescriptorBuilder builder=ColumnFamilyDescriptorBuilder.newBuilder(HConstants.CATALOG_FAMILY).setInMemory(true).setScope(HConstants.REPLICATION_SCOPE_LOCAL).setBloomFilterType(BloomType.NONE);
    final int v=123;
    builder.setBlocksize(v);
    builder.setTimeToLive(v);
    builder.setBlockCacheEnabled(!HColumnDescriptor.DEFAULT_BLOCKCACHE);
    builder.setValue(Bytes.toBytes("a"),Bytes.toBytes("b"));
    builder.setMaxVersions(v);
    assertEquals(v,builder.build().getMaxVersions());
    builder.setMinVersions(v);
    assertEquals(v,builder.build().getMinVersions());
    builder.setKeepDeletedCells(KeepDeletedCells.TRUE);
    builder.setInMemory(!HColumnDescriptor.DEFAULT_IN_MEMORY);
    boolean inmemory=builder.build().isInMemory();
    builder.setScope(v);
    builder.setDataBlockEncoding(DataBlockEncoding.FAST_DIFF);
    builder.setBloomFilterType(BloomType.ROW);
    builder.setCompressionType(Algorithm.SNAPPY);
    builder.setMobEnabled(true);
    builder.setMobThreshold(1000L);
    builder.setDFSReplication((short)v);
    ColumnFamilyDescriptor hcd=builder.build();
    byte[] bytes=ColumnFamilyDescriptorBuilder.toByteArray(hcd);
    ColumnFamilyDescriptor deserializedHcd=ColumnFamilyDescriptorBuilder.parseFrom(bytes);
    assertTrue(hcd.equals(deserializedHcd));
    assertEquals(v,hcd.getBlocksize());
    assertEquals(v,hcd.getTimeToLive());
    assertTrue(Bytes.equals(hcd.getValue(Bytes.toBytes("a")),deserializedHcd.getValue(Bytes.toBytes("a"))));
    assertEquals(hcd.getMaxVersions(),deserializedHcd.getMaxVersions());
    assertEquals(hcd.getMinVersions(),deserializedHcd.getMinVersions());
    assertEquals(hcd.getKeepDeletedCells(),deserializedHcd.getKeepDeletedCells());
    assertEquals(inmemory,deserializedHcd.isInMemory());
    assertEquals(hcd.getScope(),deserializedHcd.getScope());
    assertTrue(deserializedHcd.getCompressionType().equals(Compression.Algorithm.SNAPPY));
    assertTrue(deserializedHcd.getDataBlockEncoding().equals(DataBlockEncoding.FAST_DIFF));
    assertTrue(deserializedHcd.getBloomFilterType().equals(BloomType.ROW));
    assertEquals(hcd.isMobEnabled(),deserializedHcd.isMobEnabled());
    assertEquals(hcd.getMobThreshold(),deserializedHcd.getMobThreshold());
    assertEquals(v,deserializedHcd.getDFSReplication());
  }
  /** 
 * Tests HColumnDescriptor with empty familyName
 */
  @Test public void testHColumnDescriptorShouldThrowIAEWhenFamilyNameEmpty() throws Exception {
    expectedEx.expect(IllegalArgumentException.class);
    expectedEx.expectMessage("Column Family name can not be empty");
    ColumnFamilyDescriptorBuilder.of("");
  }
  /** 
 * Test that we add and remove strings from configuration properly.
 */
  @Test public void testAddGetRemoveConfiguration(){
    ColumnFamilyDescriptorBuilder builder=ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes("foo"));
    String key="Some";
    String value="value";
    builder.setConfiguration(key,value);
    assertEquals(value,builder.build().getConfigurationValue(key));
    builder.removeConfiguration(key);
    assertEquals(null,builder.build().getConfigurationValue(key));
  }
  @Test public void testMobValuesInHColumnDescriptorShouldReadable(){
    boolean isMob=true;
    long threshold=1000;
    String policy="weekly";
    String isMobString=PrettyPrinter.format(String.valueOf(isMob),HColumnDescriptor.getUnit(HColumnDescriptor.IS_MOB));
    String thresholdString=PrettyPrinter.format(String.valueOf(threshold),HColumnDescriptor.getUnit(HColumnDescriptor.MOB_THRESHOLD));
    String policyString=PrettyPrinter.format(Bytes.toStringBinary(Bytes.toBytes(policy)),HColumnDescriptor.getUnit(HColumnDescriptor.MOB_COMPACT_PARTITION_POLICY));
    assertEquals(String.valueOf(isMob),isMobString);
    assertEquals(String.valueOf(threshold),thresholdString);
    assertEquals(String.valueOf(policy),policyString);
  }
  @Test public void testClassMethodsAreBuilderStyle(){
    BuilderStyleTest.assertClassesAreBuilderStyle(ColumnFamilyDescriptorBuilder.class);
  }
  @Test public void testSetTimeToLive() throws HBaseException {
    String ttl;
    ColumnFamilyDescriptorBuilder builder=ColumnFamilyDescriptorBuilder.newBuilder(Bytes.toBytes("foo"));
    ttl="50000";
    builder.setTimeToLive(ttl);
    Assert.assertEquals(50000,builder.build().getTimeToLive());
    ttl="50000 seconds";
    builder.setTimeToLive(ttl);
    Assert.assertEquals(50000,builder.build().getTimeToLive());
    ttl="";
    builder.setTimeToLive(ttl);
    Assert.assertEquals(0,builder.build().getTimeToLive());
    ttl="FOREVER";
    builder.setTimeToLive(ttl);
    Assert.assertEquals(HConstants.FOREVER,builder.build().getTimeToLive());
    ttl="1 HOUR 10 minutes 1 second";
    builder.setTimeToLive(ttl);
    Assert.assertEquals(4201,builder.build().getTimeToLive());
    ttl="500 Days 23 HOURS";
    builder.setTimeToLive(ttl);
    Assert.assertEquals(43282800,builder.build().getTimeToLive());
    ttl="43282800 SECONDS (500 Days 23 hours)";
    builder.setTimeToLive(ttl);
    Assert.assertEquals(43282800,builder.build().getTimeToLive());
  }
}
