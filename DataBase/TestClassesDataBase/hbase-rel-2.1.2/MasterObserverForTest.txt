public static class MasterObserverForTest implements MasterCoprocessor, MasterObserver {
  private AtomicInteger postHookCalls=null;
  @Override public Optional<MasterObserver> getMasterObserver(){
    return Optional.of(this);
  }
  @Override public void start(  @SuppressWarnings("rawtypes") CoprocessorEnvironment ctx) throws IOException {
    this.postHookCalls=new AtomicInteger(0);
  }
  @Override public void postDeleteNamespace(  ObserverContext<MasterCoprocessorEnvironment> ctx,  String namespace){
    postHookCalls.incrementAndGet();
  }
  @Override public void postModifyNamespace(  ObserverContext<MasterCoprocessorEnvironment> ctx,  NamespaceDescriptor desc){
    postHookCalls.incrementAndGet();
  }
  @Override public void postCreateNamespace(  ObserverContext<MasterCoprocessorEnvironment> ctx,  NamespaceDescriptor desc){
    postHookCalls.incrementAndGet();
  }
  @Override public void postCreateTable(  ObserverContext<MasterCoprocessorEnvironment> ctx,  TableDescriptor td,  RegionInfo[] regions){
    postHookCalls.incrementAndGet();
  }
  @Override public void postModifyTable(  ObserverContext<MasterCoprocessorEnvironment> ctx,  TableName tn,  TableDescriptor td){
    postHookCalls.incrementAndGet();
  }
  @Override public void postDisableTable(  ObserverContext<MasterCoprocessorEnvironment> ctx,  TableName tn){
    postHookCalls.incrementAndGet();
  }
  @Override public void postDeleteTable(  ObserverContext<MasterCoprocessorEnvironment> ctx,  TableName tn){
    postHookCalls.incrementAndGet();
  }
}
