static class RegionSplitter extends Thread {
  final Connection connection;
  Throwable ex;
  Table table;
  TableName tableName;
  byte[] family;
  Admin admin;
  HRegionServer rs;
  RegionSplitter(  Table table) throws IOException {
    this.table=table;
    this.tableName=table.getName();
    this.family=table.getTableDescriptor().getFamiliesKeys().iterator().next();
    admin=TEST_UTIL.getAdmin();
    rs=TEST_UTIL.getMiniHBaseCluster().getRegionServer(0);
    connection=TEST_UTIL.getConnection();
  }
  @Override public void run(){
    try {
      Random random=new Random();
      for (int i=0; i < 5; i++) {
        List<RegionInfo> regions=MetaTableAccessor.getTableRegions(connection,tableName,true);
        if (regions.isEmpty()) {
          continue;
        }
        int regionIndex=random.nextInt(regions.size());
        RegionInfo region=Iterators.get(regions.iterator(),regionIndex);
        int start=0, end=Integer.MAX_VALUE;
        if (region.getStartKey().length > 0) {
          start=Bytes.toInt(region.getStartKey());
        }
        if (region.getEndKey().length > 0) {
          end=Bytes.toInt(region.getEndKey());
        }
        int mid=start + ((end - start) / 2);
        byte[] splitPoint=Bytes.toBytes(mid);
        addData(start);
        addData(mid);
        flushAndBlockUntilDone(admin,rs,region.getRegionName());
        compactAndBlockUntilDone(admin,rs,region.getRegionName());
        log("Initiating region split for:" + region.getRegionNameAsString());
        try {
          admin.splitRegion(region.getRegionName(),splitPoint);
          blockUntilRegionSplit(CONF,50000,region.getRegionName(),true);
        }
 catch (        NotServingRegionException ex) {
        }
      }
    }
 catch (    Throwable ex) {
      this.ex=ex;
    }
  }
  void addData(  int start) throws IOException {
    List<Put> puts=new ArrayList<>();
    for (int i=start; i < start + 100; i++) {
      Put put=new Put(Bytes.toBytes(i));
      put.addColumn(family,family,Bytes.toBytes(i));
      puts.add(put);
    }
    table.put(puts);
  }
}
