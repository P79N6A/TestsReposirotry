@Category(SmallTests.class) public class TestRegionServerAccounting {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestRegionServerAccounting.class);
  private final static float DEFAULT_MEMSTORE_SIZE=0.2f;
  private static Configuration conf;
  @Before public void setUpConf(){
    conf=HBaseConfiguration.create();
    conf.setFloat(MemorySizeUtil.MEMSTORE_SIZE_KEY,DEFAULT_MEMSTORE_SIZE);
  }
  @Test public void testOnheapMemstoreHigherWaterMarkLimits(){
    RegionServerAccounting regionServerAccounting=new RegionServerAccounting(conf);
    long dataSize=regionServerAccounting.getGlobalMemStoreLimit();
    MemStoreSize memstoreSize=new MemStoreSize(dataSize,dataSize,0);
    regionServerAccounting.incGlobalMemStoreSize(memstoreSize);
    assertEquals(FlushType.ABOVE_ONHEAP_HIGHER_MARK,regionServerAccounting.isAboveHighWaterMark());
  }
  @Test public void testOnheapMemstoreLowerWaterMarkLimits(){
    RegionServerAccounting regionServerAccounting=new RegionServerAccounting(conf);
    long dataSize=regionServerAccounting.getGlobalMemStoreLimit();
    MemStoreSize memstoreSize=new MemStoreSize(dataSize,dataSize,0);
    regionServerAccounting.incGlobalMemStoreSize(memstoreSize);
    assertEquals(FlushType.ABOVE_ONHEAP_LOWER_MARK,regionServerAccounting.isAboveLowWaterMark());
  }
  @Test public void testOffheapMemstoreHigherWaterMarkLimitsDueToDataSize(){
    conf.setLong(MemorySizeUtil.OFFHEAP_MEMSTORE_SIZE_KEY,(1L * 1024L));
    RegionServerAccounting regionServerAccounting=new RegionServerAccounting(conf);
    MemStoreSize memstoreSize=new MemStoreSize((3L * 1024L * 1024L* 1024L),0,(1L * 1024L * 1024L* 1024L));
    regionServerAccounting.incGlobalMemStoreSize(memstoreSize);
    assertEquals(FlushType.ABOVE_OFFHEAP_HIGHER_MARK,regionServerAccounting.isAboveHighWaterMark());
  }
  @Test public void testOffheapMemstoreHigherWaterMarkLimitsDueToHeapSize(){
    conf.setLong(MemorySizeUtil.OFFHEAP_MEMSTORE_SIZE_KEY,(1L * 1024L));
    RegionServerAccounting regionServerAccounting=new RegionServerAccounting(conf);
    long dataSize=regionServerAccounting.getGlobalOnHeapMemStoreLimit();
    MemStoreSize memstoreSize=new MemStoreSize(dataSize,dataSize,0);
    regionServerAccounting.incGlobalMemStoreSize(memstoreSize);
    assertEquals(FlushType.ABOVE_ONHEAP_HIGHER_MARK,regionServerAccounting.isAboveHighWaterMark());
  }
  @Test public void testOffheapMemstoreLowerWaterMarkLimitsDueToDataSize(){
    conf.setLong(MemorySizeUtil.OFFHEAP_MEMSTORE_SIZE_KEY,(1L * 1024L));
    RegionServerAccounting regionServerAccounting=new RegionServerAccounting(conf);
    MemStoreSize memstoreSize=new MemStoreSize((3L * 1024L * 1024L* 1024L),0,(1L * 1024L * 1024L* 1024L));
    regionServerAccounting.incGlobalMemStoreSize(memstoreSize);
    assertEquals(FlushType.ABOVE_OFFHEAP_LOWER_MARK,regionServerAccounting.isAboveLowWaterMark());
  }
  @Test public void testOffheapMemstoreLowerWaterMarkLimitsDueToHeapSize(){
    conf.setLong(MemorySizeUtil.OFFHEAP_MEMSTORE_SIZE_KEY,(1L * 1024L));
    RegionServerAccounting regionServerAccounting=new RegionServerAccounting(conf);
    long dataSize=regionServerAccounting.getGlobalOnHeapMemStoreLimit();
    MemStoreSize memstoreSize=new MemStoreSize(dataSize,dataSize,0);
    regionServerAccounting.incGlobalMemStoreSize(memstoreSize);
    assertEquals(FlushType.ABOVE_ONHEAP_LOWER_MARK,regionServerAccounting.isAboveLowWaterMark());
  }
}
