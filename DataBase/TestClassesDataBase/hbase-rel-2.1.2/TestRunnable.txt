private static class TestRunnable implements Runnable {
  public final CountDownLatch startedLatch=new CountDownLatch(1);
  private final ServerNonceManager nm;
  private final long nonce;
  private final Boolean expected;
  private final Stoppable stoppable;
  private Throwable throwable=null;
  public TestRunnable(  ServerNonceManager nm,  long nonce,  Boolean expected,  Stoppable stoppable){
    this.nm=nm;
    this.nonce=nonce;
    this.expected=expected;
    this.stoppable=stoppable;
  }
  public void propagateError() throws Exception {
    if (throwable == null)     return;
    throw new Exception(throwable);
  }
  public Thread start(){
    Thread t=new Thread(this);
    t=Threads.setDaemonThreadRunning(t);
    try {
      startedLatch.await();
    }
 catch (    InterruptedException e) {
      fail("Unexpected");
    }
    return t;
  }
  @Override public void run(){
    startedLatch.countDown();
    boolean shouldThrow=expected == null;
    boolean hasThrown=true;
    try {
      boolean result=nm.startOperation(NO_NONCE,nonce,stoppable);
      hasThrown=false;
      if (!shouldThrow) {
        assertEquals(expected.booleanValue(),result);
      }
    }
 catch (    Throwable t) {
      if (!shouldThrow) {
        throwable=t;
      }
    }
    if (shouldThrow && !hasThrown) {
      throwable=new AssertionError("Should have thrown");
    }
  }
}
