@Category({MediumTests.class}) public class TestUpdateConfiguration {
  @ClassRule public static final HBaseClassTestRule CLASS_RULE=HBaseClassTestRule.forClass(TestUpdateConfiguration.class);
  private static final Logger LOG=LoggerFactory.getLogger(TestUpdateConfiguration.class);
  private final static HBaseTestingUtility TEST_UTIL=new HBaseTestingUtility();
  @BeforeClass public static void setup() throws Exception {
    TEST_UTIL.startMiniCluster(2,1);
  }
  @Test public void testOnlineConfigChange() throws IOException {
    LOG.debug("Starting the test");
    Admin admin=TEST_UTIL.getAdmin();
    ServerName server=TEST_UTIL.getHBaseCluster().getRegionServer(0).getServerName();
    admin.updateConfiguration(server);
  }
  @Test public void testMasterOnlineConfigChange() throws IOException {
    LOG.debug("Starting the test");
    Path cnfPath=FileSystems.getDefault().getPath("target/test-classes/hbase-site.xml");
    Path cnf2Path=FileSystems.getDefault().getPath("target/test-classes/hbase-site2.xml");
    Path cnf3Path=FileSystems.getDefault().getPath("target/test-classes/hbase-site3.xml");
    Files.copy(cnfPath,cnf3Path,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(cnf2Path,cnfPath,StandardCopyOption.REPLACE_EXISTING);
    Admin admin=TEST_UTIL.getAdmin();
    ServerName server=TEST_UTIL.getHBaseCluster().getMaster().getServerName();
    admin.updateConfiguration(server);
    Configuration conf=TEST_UTIL.getMiniHBaseCluster().getMaster().getConfiguration();
    int custom=conf.getInt("hbase.custom.config",0);
    assertEquals(1000,custom);
    Files.copy(cnf3Path,cnfPath,StandardCopyOption.REPLACE_EXISTING);
  }
  @Test public void testAllOnlineConfigChange() throws IOException {
    LOG.debug("Starting the test");
    Admin admin=TEST_UTIL.getAdmin();
    admin.updateConfiguration();
  }
  @Test public void testAllCustomOnlineConfigChange() throws IOException {
    LOG.debug("Starting the test");
    Path cnfPath=FileSystems.getDefault().getPath("target/test-classes/hbase-site.xml");
    Path cnf2Path=FileSystems.getDefault().getPath("target/test-classes/hbase-site2.xml");
    Path cnf3Path=FileSystems.getDefault().getPath("target/test-classes/hbase-site3.xml");
    Files.copy(cnfPath,cnf3Path,StandardCopyOption.REPLACE_EXISTING);
    Files.copy(cnf2Path,cnfPath,StandardCopyOption.REPLACE_EXISTING);
    Admin admin=TEST_UTIL.getAdmin();
    admin.updateConfiguration();
    Configuration masterConfiguration=TEST_UTIL.getMiniHBaseCluster().getMaster(0).getConfiguration();
    int custom=masterConfiguration.getInt("hbase.custom.config",0);
    assertEquals(1000,custom);
    Configuration backupMasterConfiguration=TEST_UTIL.getMiniHBaseCluster().getMaster(1).getConfiguration();
    custom=backupMasterConfiguration.getInt("hbase.custom.config",0);
    assertEquals(1000,custom);
    Configuration regionServerConfiguration=TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getConfiguration();
    custom=regionServerConfiguration.getInt("hbase.custom.config",0);
    assertEquals(1000,custom);
    Files.copy(cnf3Path,cnfPath,StandardCopyOption.REPLACE_EXISTING);
  }
}
