public static class TestClassRunnerIsOrderable {
  private static String log="";
public static class OrderMe {
    @Test public void a(){
      log+="a";
    }
    @Test public void b(){
      log+="b";
    }
    @Test public void c(){
      log+="c";
    }
  }
  @Before public void resetLog(){
    log="";
  }
  @Test public void orderingForwardWorksOnTestClassRunner(){
    Request forward=Request.aClass(OrderMe.class).orderWith(AlphanumericOrdering.INSTANCE);
    new JUnitCore().run(forward);
    assertEquals("abc",log);
  }
  @Test public void orderingBackwardWorksOnTestClassRunner(){
    Request backward=Request.aClass(OrderMe.class).orderWith(new ReverseAlphanumericOrdering());
    new JUnitCore().run(backward);
    assertEquals("cba",log);
  }
@RunWith(Enclosed.class) public static class Enclosing {
public static class A {
      @Test public void a(){
        log+="Aa";
      }
      @Test public void b(){
        log+="Ab";
      }
      @Test public void c(){
        log+="Ac";
      }
    }
public static class B {
      @Test public void a(){
        log+="Ba";
      }
      @Test public void b(){
        log+="Bb";
      }
      @Test public void c(){
        log+="Bc";
      }
    }
  }
  @Test public void orderingForwardWorksOnSuite(){
    Request forward=Request.aClass(Enclosing.class).orderWith(AlphanumericOrdering.INSTANCE);
    new JUnitCore().run(forward);
    assertEquals("AaAbAcBaBbBc",log);
  }
  @Test public void orderingBackwardWorksOnSuite(){
    Request backward=Request.aClass(Enclosing.class).orderWith(new ReverseAlphanumericOrdering());
    new JUnitCore().run(backward);
    assertEquals("BcBbBaAcAbAa",log);
  }
}
