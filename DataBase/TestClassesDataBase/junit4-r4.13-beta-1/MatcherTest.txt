@RunWith(Theories.class) public class MatcherTest {
  @DataPoint public static Matcher<Object> SINGLE_FAILURE=hasSingleFailureContaining("cheese");
  @DataPoint public static Matcher<PrintableResult> ANY_FAILURE=hasFailureContaining("cheese");
  @DataPoint public static PrintableResult TWO_FAILURES_ONE_CHEESE=new PrintableResult(Arrays.asList(failure("cheese"),failure("mustard")));
  @Theory @SuppressWarnings({"unchecked","rawtypes"}) public void differentMatchersHaveDifferentDescriptions(  Matcher matcher1,  Matcher matcher2,  Object value){
    assumeThat(value,matcher1);
    assumeThat(value,not(matcher2));
    assertThat(matcher1.toString(),not(matcher2.toString()));
  }
  private static Failure failure(  String string){
    return new Failure(Description.EMPTY,new Error(string));
  }
}
