public static class CallbackArguments {
public static class Succeeded {
    private static Description catchedDescription;
    @Rule public final TestRule watcher=new TestWatcher(){
      @Override protected void succeeded(      Description description){
        catchedDescription=description;
      }
    }
;
    @Test public void test(){
    }
  }
  @Test public void succeeded(){
    JUnitCore.runClasses(Succeeded.class);
    assertEquals("test(org.junit.rules.TestWatcherTest$CallbackArguments$Succeeded)",Succeeded.catchedDescription.getDisplayName());
  }
public static class Failed {
    private static Description catchedDescription;
    private static Throwable catchedThrowable;
    @Rule public final TestRule watcher=new TestWatcher(){
      @Override protected void failed(      Throwable e,      Description description){
        catchedDescription=description;
        catchedThrowable=e;
      }
    }
;
    @Test public void test(){
      fail("test failed");
    }
  }
  @Test public void failed(){
    JUnitCore.runClasses(Failed.class);
    assertEquals("test failed",Failed.catchedThrowable.getMessage());
    assertEquals(AssertionError.class,Failed.catchedThrowable.getClass());
    assertEquals("test(org.junit.rules.TestWatcherTest$CallbackArguments$Failed)",Failed.catchedDescription.getDisplayName());
  }
public static class Skipped {
    private static Description catchedDescription;
    private static org.junit.AssumptionViolatedException catchedException;
    @Rule public final TestRule watcher=new TestWatcher(){
      @Override protected void skipped(      org.junit.AssumptionViolatedException e,      Description description){
        catchedDescription=description;
        catchedException=e;
      }
    }
;
    @Test public void test(){
      assumeTrue("test skipped",false);
    }
  }
  @Test public void skipped(){
    JUnitCore.runClasses(Skipped.class);
    assertEquals("test skipped",Skipped.catchedException.getMessage());
    assertEquals(org.junit.AssumptionViolatedException.class,Skipped.catchedException.getClass());
    assertEquals("test(org.junit.rules.TestWatcherTest$CallbackArguments$Skipped)",Skipped.catchedDescription.getDisplayName());
  }
public static class DeprecatedSkipped {
    private static Description catchedDescription;
    private static AssumptionViolatedException catchedException;
    @Rule public final TestRule watcher=new TestWatcher(){
      @Override @SuppressWarnings("deprecation") protected void skipped(      AssumptionViolatedException e,      Description description){
        catchedDescription=description;
        catchedException=e;
      }
    }
;
    @SuppressWarnings("deprecation") @Test public void test(){
      throw new AssumptionViolatedException("test skipped");
    }
  }
  @Test public void deprecatedSkipped(){
    JUnitCore.runClasses(DeprecatedSkipped.class);
    assertEquals("test skipped",DeprecatedSkipped.catchedException.getMessage());
    assertEquals(AssumptionViolatedException.class,DeprecatedSkipped.catchedException.getClass());
    assertEquals("test(org.junit.rules.TestWatcherTest$CallbackArguments$DeprecatedSkipped)",DeprecatedSkipped.catchedDescription.getDisplayName());
  }
public static class Starting {
    private static Description catchedDescription;
    @Rule public final TestRule watcher=new TestWatcher(){
      @Override protected void starting(      Description description){
        catchedDescription=description;
      }
    }
;
    @Test public void test(){
    }
  }
  @Test public void starting(){
    JUnitCore.runClasses(Starting.class);
    assertEquals("test(org.junit.rules.TestWatcherTest$CallbackArguments$Starting)",Starting.catchedDescription.getDisplayName());
  }
public static class Finished {
    private static Description catchedDescription;
    @Rule public final TestRule watcher=new TestWatcher(){
      @Override protected void finished(      Description description){
        catchedDescription=description;
      }
    }
;
    @Test public void test(){
    }
  }
  @Test public void finished(){
    JUnitCore.runClasses(Finished.class);
    assertEquals("test(org.junit.rules.TestWatcherTest$CallbackArguments$Finished)",Finished.catchedDescription.getDisplayName());
  }
}
