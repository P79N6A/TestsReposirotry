static class GuessMap extends HashMap<MethodCall,Object> implements InvocationHandler {
  private static final long serialVersionUID=1L;
  public GuessMap(  GuessMap guesses){
    super(guesses);
  }
  public GuessMap(){
  }
  GuessMap replaceGuess(  Object oldValue,  Object newValue){
    GuessMap newGuesses=new GuessMap(this);
    for (    Entry<MethodCall,Object> entry : newGuesses.entrySet()) {
      if (entry.getValue().equals(oldValue)) {
        entry.setValue(newValue);
      }
    }
    return newGuesses;
  }
  protected Object generateGuess(  Class<?> returnType){
    if (returnType.equals(String.class)) {
      return "GUESS" + new Random().nextInt();
    }
    if (returnType.equals(Integer.class) || returnType.equals(int.class)) {
      return new Random().nextInt();
    }
    return null;
  }
  Object getGuess(  MethodCall call){
    if (!containsKey(call)) {
      put(call,generateGuess(call.getReturnType()));
    }
    return get(call);
  }
  public Object invoke(  Object proxy,  Method method,  Object[] args) throws Throwable {
    return getGuess(new MethodCall(method,args));
  }
}
