/** 
 * Integration tests can be found in  {@link org.junit.tests.running.methods.ExpectedTest}. See e.g.  {@link org.junit.tests.running.methods.ExpectedTest#expectsAssumptionViolatedException()}
 */
public class ExpectExceptionTest {
  @Test public void whenExpectingAssumptionViolatedExceptionStatementsThrowingItShouldPass(){
    Statement delegate=new Fail(new AssumptionViolatedException("expected"));
    ExpectException expectException=new ExpectException(delegate,AssumptionViolatedException.class);
    try {
      expectException.evaluate();
    }
 catch (    Throwable e) {
      fail("should not throw anything, but was thrown: " + e);
    }
  }
  @Test public void whenExpectingAssumptionViolatedExceptionStatementsThrowingSubclassShouldPass(){
    Statement delegate=new Fail(new AssumptionViolatedExceptionSubclass("expected"));
    ExpectException expectException=new ExpectException(delegate,AssumptionViolatedException.class);
    try {
      expectException.evaluate();
    }
 catch (    Throwable e) {
      fail("should not throw anything, but was thrown: " + e);
    }
  }
  @Test public void whenExpectingAssumptionViolatedExceptionStatementsThrowingDifferentExceptionShouldFail(){
    Statement delegate=new Fail(new SomeException("not expected"));
    ExpectException expectException=new ExpectException(delegate,AssumptionViolatedException.class);
    try {
      expectException.evaluate();
      fail("should throw 'Unexpected exception' when statement throws an exception which is not the one expected");
    }
 catch (    Exception e) {
      assertThat(e.getMessage(),equalTo("Unexpected exception, expected<org.junit.internal.AssumptionViolatedException> " + "but was<org.junit.internal.runners.statements.ExpectExceptionTest$SomeException>"));
    }
  }
  @Test public void whenExpectingAssumptionViolatedExceptionStatementsPassingShouldFail() throws Exception {
    ExpectException expectException=new ExpectException(new PassingStatement(),AssumptionViolatedException.class);
    try {
      expectException.evaluate();
    }
 catch (    AssertionError e) {
      assertThat(e.getMessage(),containsString("Expected exception: " + AssumptionViolatedException.class.getName()));
      return;
    }
    fail("ExpectException should throw when the given statement passes");
  }
private static class PassingStatement extends Statement {
    public void evaluate() throws Throwable {
    }
  }
private static class SomeException extends RuntimeException {
    public SomeException(    String message){
      super(message);
    }
  }
private static class AssumptionViolatedExceptionSubclass extends AssumptionViolatedException {
    public AssumptionViolatedExceptionSubclass(    String assumption){
      super(assumption);
    }
  }
}
