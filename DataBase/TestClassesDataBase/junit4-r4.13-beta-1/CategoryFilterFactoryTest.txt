public class CategoryFilterFactoryTest {
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Rule public TestName testName=new TestName();
  private final CategoryFilterFactory categoryFilterFactory=new CategoryFilterFactoryStub();
  @Test public void shouldCreateFilter() throws Exception {
    FilterFactoryParams params=new FilterFactoryParams(createSuiteDescription(testName.getMethodName()),CategoryFilterFactoryStub.class.getName());
    Filter filter=categoryFilterFactory.createFilter(params);
    assertThat(filter,instanceOf(DummyFilter.class));
  }
  @Test public void shouldThrowException() throws Exception {
    FilterFactoryParams params=new FilterFactoryParams(createSuiteDescription(testName.getMethodName()),"NonExistentFilter");
    expectedException.expect(FilterFactory.FilterNotCreatedException.class);
    categoryFilterFactory.createFilter(params);
  }
private static class CategoryFilterFactoryStub extends CategoryFilterFactory {
    @Override protected Filter createFilter(    List<Class<?>> categories){
      return new DummyFilter();
    }
  }
private static class DummyFilter extends Filter {
    @Override public boolean shouldRun(    Description description){
      return false;
    }
    @Override public String describe(){
      return null;
    }
  }
}
