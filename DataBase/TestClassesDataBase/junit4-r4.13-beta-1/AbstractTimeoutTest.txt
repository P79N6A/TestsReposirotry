public abstract static class AbstractTimeoutTest {
  public static final StringBuffer logger=new StringBuffer();
  @Rule public final TemporaryFolder tmpFile=new TemporaryFolder();
  @Test public void run1() throws InterruptedException {
    logger.append("run1");
    TimeoutRuleTest.run1Lock.lockInterruptibly();
    TimeoutRuleTest.run1Lock.unlock();
  }
  @Test public void run2() throws InterruptedException {
    logger.append("run2");
    Thread.currentThread().join();
  }
  @Test public synchronized void run3() throws InterruptedException {
    logger.append("run3");
    wait();
  }
  @Test public void run4(){
    logger.append("run4");
    while (!run4done) {
    }
  }
  @Test public void run5() throws IOException {
    logger.append("run5");
    Random rnd=new Random();
    byte[] data=new byte[1024];
    File tmp=tmpFile.newFile();
    while (true) {
      RandomAccessFile randomAccessFile=new RandomAccessFile(tmp,"rw");
      try {
        FileChannel channel=randomAccessFile.getChannel();
        rnd.nextBytes(data);
        ByteBuffer buffer=ByteBuffer.wrap(data);
        channel.write(buffer);
      }
  finally {
        randomAccessFile.close();
      }
      tmp.delete();
    }
  }
  @Test public void run6() throws InterruptedIOException {
    logger.append("run6");
    throw new InterruptedIOException();
  }
}
