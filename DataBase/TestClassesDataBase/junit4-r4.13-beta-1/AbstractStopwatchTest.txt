public static abstract class AbstractStopwatchTest {
  /** 
 * Fake implementation of  {@link Stopwatch.Clock} that increments the timeevery time it is asked.
 */
  private final Stopwatch.Clock fakeClock=new Stopwatch.Clock(){
    @Override public long nanoTime(){
      return fakeTimeNanos++;
    }
  }
;
  protected final Stopwatch stopwatch=new Stopwatch(fakeClock){
    @Override protected void succeeded(    long nanos,    Description description){
      StopwatchTest.record=new Record(nanos,TestStatus.SUCCEEDED,description);
      simulateTimePassing(1);
    }
    @Override protected void failed(    long nanos,    Throwable e,    Description description){
      StopwatchTest.record=new Record(nanos,TestStatus.FAILED,description);
      simulateTimePassing(1);
    }
    @Override protected void skipped(    long nanos,    AssumptionViolatedException e,    Description description){
      StopwatchTest.record=new Record(nanos,TestStatus.SKIPPED,description);
      simulateTimePassing(1);
    }
    @Override protected void finished(    long nanos,    Description description){
      StopwatchTest.finishedRecord=new Record(nanos,description);
    }
  }
;
  private final TestWatcher watcher=new TestWatcher(){
    @Override protected void finished(    Description description){
      afterStopwatchRule();
    }
  }
;
  @Rule public final RuleChain chain=RuleChain.outerRule(watcher).around(stopwatch);
  protected void afterStopwatchRule(){
  }
}
