public static class CreatesSubFolder {
  @Rule public TemporaryFolder folder=new TemporaryFolder();
  @Test public void testUsingTempFolderStringReflection() throws Exception {
    String subfolder="subfolder";
    String filename="a.txt";
    Method method=folder.getClass().getMethod("newFolder",new Class<?>[]{String.class});
    createdFiles[0]=(File)method.invoke(folder,subfolder);
    new File(createdFiles[0],filename).createNewFile();
    File expectedFile=new File(folder.getRoot(),join(subfolder,filename));
    assertTrue(expectedFile.exists());
  }
  @Test public void testUsingTempFolderString() throws IOException {
    String subfolder="subfolder";
    String filename="a.txt";
    createdFiles[0]=folder.newFolder(subfolder);
    new File(createdFiles[0],filename).createNewFile();
    File expectedFile=new File(folder.getRoot(),join(subfolder,filename));
    assertTrue(expectedFile.exists());
  }
  @Test public void testUsingTempTreeFolders() throws IOException {
    String subfolder="subfolder";
    String anotherfolder="anotherfolder";
    String filename="a.txt";
    createdFiles[0]=folder.newFolder(subfolder,anotherfolder);
    new File(createdFiles[0],filename).createNewFile();
    File expectedFile=new File(folder.getRoot(),join(subfolder,anotherfolder,filename));
    assertTrue(expectedFile.exists());
  }
  private String join(  String... folderNames){
    StringBuilder path=new StringBuilder();
    for (    String folderName : folderNames) {
      path.append(File.separator).append(folderName);
    }
    return path.toString();
  }
}
