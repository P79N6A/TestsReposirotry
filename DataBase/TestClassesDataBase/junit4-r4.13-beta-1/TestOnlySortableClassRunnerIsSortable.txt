public static class TestOnlySortableClassRunnerIsSortable {
  private static String log="";
  /** 
 * A Runner that implements  {@link Sortable} but not {@link Orderable}.
 */
public static class SortableRunner extends Runner implements Sortable {
    private final BlockJUnit4ClassRunner delegate;
    public SortableRunner(    Class<?> klass) throws Throwable {
      delegate=new BlockJUnit4ClassRunner(klass);
    }
    @Override public void run(    RunNotifier notifier){
      delegate.run(notifier);
    }
    @Override public Description getDescription(){
      return delegate.getDescription();
    }
    public void sort(    Sorter sorter){
      delegate.sort(sorter);
    }
  }
@RunWith(SortableRunner.class) public static class SortMe {
    @Test public void a(){
      log+="a";
    }
    @Test public void b(){
      log+="b";
    }
    @Test public void c(){
      log+="c";
    }
    public static junit.framework.Test suite(){
      return new JUnit4TestAdapter(SortMe.class);
    }
  }
  @Before public void resetLog(){
    log="";
  }
  @Test public void sortingForwardWorksOnTestClassRunner(){
    Request forward=Request.aClass(SortMe.class).sortWith(forward());
    new JUnitCore().run(forward);
    assertEquals("abc",log);
  }
  @Test public void sortingBackwardWorksOnTestClassRunner(){
    Request backward=Request.aClass(SortMe.class).sortWith(backward());
    new JUnitCore().run(backward);
    assertEquals("cba",log);
  }
}
