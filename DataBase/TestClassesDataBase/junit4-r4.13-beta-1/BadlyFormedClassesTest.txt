@SuppressWarnings("deprecation") public class BadlyFormedClassesTest {
public static class FaultyConstructor {
    public FaultyConstructor() throws Exception {
      throw new Exception("Thrown during construction");
    }
    @Test public void someTest(){
    }
  }
@RunWith(JUnit4ClassRunner.class) public static class BadBeforeMethodWithLegacyRunner {
    @Before void before(){
    }
    @Test public void someTest(){
    }
  }
public static class NoTests {
  }
  @Test public void constructorException(){
    String message=exceptionMessageFrom(FaultyConstructor.class);
    assertEquals("Thrown during construction",message);
  }
  @Test public void noRunnableMethods(){
    assertThat(exceptionMessageFrom(NoTests.class),containsString("No runnable methods"));
  }
  @Test public void badBeforeMethodWithLegacyRunner(){
    assertEquals("Method before should be public",exceptionMessageFrom(BadBeforeMethodWithLegacyRunner.class));
  }
  private String exceptionMessageFrom(  Class<?> testClass){
    JUnitCore core=new JUnitCore();
    Result result=core.run(testClass);
    Failure failure=result.getFailures().get(0);
    String message=failure.getException().getMessage();
    return message;
  }
}
