public static class InterplayWithOtherRules {
  private static StringBuilder log;
public static class ExpectedExceptionTest {
    @Rule(order=Integer.MIN_VALUE) public final TestRule a=new LoggingTestWatcher(log);
    @Rule public final ExpectedException thrown=none();
    @Test public void testWithExpectedException(){
      thrown.expect(RuntimeException.class);
      throw new RuntimeException("expected exception");
    }
  }
  @Test public void expectedExceptionIsSeenAsSuccessfulTest(){
    log=new StringBuilder();
    JUnitCore.runClasses(ExpectedExceptionTest.class);
    assertEquals("starting succeeded finished ",log.toString());
  }
public static class ErrorCollectorTest {
    @Rule(order=Integer.MIN_VALUE) public final TestRule a=new LoggingTestWatcher(log);
    @Rule public final ErrorCollector collector=new ErrorCollector();
    @Test public void test(){
      collector.addError(new RuntimeException("expected exception"));
    }
  }
  @Test public void testIsSeenAsFailedBecauseOfCollectedError(){
    log=new StringBuilder();
    JUnitCore.runClasses(ErrorCollectorTest.class);
    assertEquals("starting failed finished ",log.toString());
  }
}
