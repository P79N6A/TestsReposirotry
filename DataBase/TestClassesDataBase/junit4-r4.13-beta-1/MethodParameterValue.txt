static class MethodParameterValue extends PotentialAssignment {
  private final FrameworkMethod method;
  private MethodParameterValue(  FrameworkMethod dataPointMethod){
    method=dataPointMethod;
  }
  @Override public Object getValue() throws CouldNotGenerateValueException {
    try {
      return method.invokeExplosively(null);
    }
 catch (    IllegalArgumentException e) {
      throw new RuntimeException("unexpected: argument length is checked");
    }
catch (    IllegalAccessException e) {
      throw new RuntimeException("unexpected: getMethods returned an inaccessible method");
    }
catch (    Throwable throwable) {
      DataPoint annotation=method.getAnnotation(DataPoint.class);
      Assume.assumeTrue(annotation == null || !isAssignableToAnyOf(annotation.ignoredExceptions(),throwable));
      throw new CouldNotGenerateValueException(throwable);
    }
  }
  @Override public String getDescription() throws CouldNotGenerateValueException {
    return method.getName();
  }
}
