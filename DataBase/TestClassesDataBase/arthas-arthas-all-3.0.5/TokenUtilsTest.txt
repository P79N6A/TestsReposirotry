/** 
 * @author earayu
 */
public class TokenUtilsTest {
  private List<CliToken> newCliTokenList(  CliToken... tokens){
    List<CliToken> cliTokens=new ArrayList<CliToken>();
    if (tokens != null) {
      Collections.addAll(cliTokens,tokens);
    }
    return cliTokens;
  }
  @Test public void testFindFirstTextToken(){
    CliToken textCliToken=new CliTokenImpl(true,"textCliToken");
    CliToken nonTextCliToken=new CliTokenImpl(false,"nonTextCliToken");
    Assert.assertEquals(null,TokenUtils.findFirstTextToken(null));
    Assert.assertEquals(null,TokenUtils.findFirstTextToken(new ArrayList<CliToken>()));
    Assert.assertEquals(null,TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{null})));
    Assert.assertEquals(textCliToken,TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{null,textCliToken})));
    Assert.assertEquals(textCliToken,TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{null,nonTextCliToken,textCliToken})));
    Assert.assertEquals(textCliToken,TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{nonTextCliToken,null,textCliToken})));
    Assert.assertEquals(textCliToken,TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{textCliToken})));
    Assert.assertEquals(textCliToken,TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{nonTextCliToken,textCliToken})));
    Assert.assertEquals(textCliToken,TokenUtils.findFirstTextToken(newCliTokenList(new CliToken[]{textCliToken,nonTextCliToken})));
  }
  @Test public void testFindLastTextToken(){
    CliToken textCliToken=new CliTokenImpl(true,"textCliToken");
    CliToken nonTextCliToken=new CliTokenImpl(false,"nonTextCliToken");
    Assert.assertEquals(null,TokenUtils.findLastTextToken(null));
    Assert.assertEquals(null,TokenUtils.findLastTextToken(new ArrayList<CliToken>()));
    Assert.assertEquals(null,TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{null})));
    Assert.assertEquals(textCliToken,TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{null,textCliToken})));
    Assert.assertEquals(textCliToken,TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{null,nonTextCliToken,textCliToken})));
    Assert.assertEquals(textCliToken,TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{nonTextCliToken,null,textCliToken})));
    Assert.assertEquals(textCliToken,TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{textCliToken,null,nonTextCliToken})));
    Assert.assertEquals(textCliToken,TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{textCliToken})));
    Assert.assertEquals(null,TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{nonTextCliToken})));
    Assert.assertEquals(textCliToken,TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{nonTextCliToken,textCliToken})));
    Assert.assertEquals(textCliToken,TokenUtils.findLastTextToken(newCliTokenList(new CliToken[]{textCliToken,nonTextCliToken})));
  }
  @Test public void testFindSecondTextToken(){
    CliToken textCliToken=new CliTokenImpl(true,"textCliToken");
    CliToken nonTextCliToken=new CliTokenImpl(false,"nonTextCliToken");
    Assert.assertEquals(null,TokenUtils.findSecondTokenText(null));
    Assert.assertEquals(null,TokenUtils.findSecondTokenText(new ArrayList<CliToken>()));
    Assert.assertEquals(null,TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null})));
    Assert.assertEquals(null,TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null,textCliToken})));
    Assert.assertEquals(null,TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null,nonTextCliToken,textCliToken})));
    Assert.assertEquals(textCliToken.value(),TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{null,nonTextCliToken,textCliToken,textCliToken})));
    Assert.assertEquals(null,TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{textCliToken})));
    Assert.assertEquals(null,TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{nonTextCliToken})));
    Assert.assertEquals(null,TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{nonTextCliToken,textCliToken})));
    Assert.assertEquals(textCliToken.value(),TokenUtils.findSecondTokenText(newCliTokenList(new CliToken[]{textCliToken,nonTextCliToken,textCliToken})));
  }
}
