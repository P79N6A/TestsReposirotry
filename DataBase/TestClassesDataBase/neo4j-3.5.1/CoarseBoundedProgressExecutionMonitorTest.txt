@RunWith(Parameterized.class) public class CoarseBoundedProgressExecutionMonitorTest {
  @Parameterized.Parameters(name="{0}") public static Iterable<Integer> parameters(){
    return Arrays.asList(1,10,123);
  }
  @Parameter public int batchSize;
  @Test public void shouldReportProgressOnSingleExecution(){
    Configuration config=config();
    ProgressExecutionMonitor progressExecutionMonitor=new ProgressExecutionMonitor(batchSize,config());
    long total=monitorSingleStageExecution(progressExecutionMonitor,config);
    assertEquals(total,progressExecutionMonitor.getProgress());
  }
  @Test public void progressOnMultipleExecutions(){
    Configuration config=config();
    ProgressExecutionMonitor progressExecutionMonitor=new ProgressExecutionMonitor(batchSize,config);
    long total=progressExecutionMonitor.total();
    for (int i=0; i < 4; i++) {
      progressExecutionMonitor.start(execution(0,config));
      progressExecutionMonitor.check(execution(total / 4,config));
    }
    progressExecutionMonitor.done(0,"Completed");
    assertEquals("Each item should be completed",total,progressExecutionMonitor.getProgress());
  }
  private long monitorSingleStageExecution(  ProgressExecutionMonitor progressExecutionMonitor,  Configuration config){
    progressExecutionMonitor.start(execution(0,config));
    long total=progressExecutionMonitor.total();
    long part=total / 10;
    for (int i=0; i < 9; i++) {
      progressExecutionMonitor.check(execution(part * (i + 1),config));
      assertTrue(progressExecutionMonitor.getProgress() < total);
    }
    progressExecutionMonitor.done(0,"Test");
    return total;
  }
  private StageExecution execution(  long doneBatches,  Configuration config){
    Step<?> step=ControlledStep.stepWithStats("Test",0,done_batches,doneBatches);
    StageExecution execution=new StageExecution("Test",null,config,Collections.singletonList(step),0);
    return execution;
  }
  private Configuration config(){
    return new Configuration.Overridden(Configuration.DEFAULT){
      @Override public int batchSize(){
        return batchSize;
      }
    }
;
  }
private class ProgressExecutionMonitor extends CoarseBoundedProgressExecutionMonitor {
    private long progress;
    ProgressExecutionMonitor(    int batchSize,    Configuration configuration){
      super(100 * batchSize,100 * batchSize,configuration);
    }
    @Override protected void progress(    long progress){
      this.progress+=progress;
    }
    public long getProgress(){
      return progress;
    }
  }
}
