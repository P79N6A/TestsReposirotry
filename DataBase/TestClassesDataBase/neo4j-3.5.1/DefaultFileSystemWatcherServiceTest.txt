public class DefaultFileSystemWatcherServiceTest {
  private static JobScheduler jobScheduler;
  private final FileWatcher fileWatcher=Mockito.mock(FileWatcher.class);
  @BeforeClass public static void setUp(){
    jobScheduler=createInitialisedScheduler();
  }
  @AfterClass public static void tearDown() throws Throwable {
    jobScheduler.shutdown();
  }
  @Test public void startMonitoringWhenLifecycleStarting() throws Throwable {
    CountDownLatch latch=new CountDownLatch(1);
    FileWatcher watcher=new TestFileWatcher(latch);
    DefaultFileSystemWatcherService service=new DefaultFileSystemWatcherService(jobScheduler,watcher);
    service.init();
    service.start();
    latch.await();
  }
  @Test public void stopMonitoringWhenLifecycleStops() throws Throwable {
    DefaultFileSystemWatcherService service=new DefaultFileSystemWatcherService(jobScheduler,fileWatcher);
    service.init();
    service.start();
    service.stop();
    verify(fileWatcher).stopWatching();
  }
  @Test public void closeFileWatcherOnShutdown() throws Throwable {
    DefaultFileSystemWatcherService service=new DefaultFileSystemWatcherService(jobScheduler,fileWatcher);
    service.init();
    service.start();
    service.stop();
    service.shutdown();
    verify(fileWatcher).close();
  }
private static class TestFileWatcher extends SilentFileWatcher {
    private CountDownLatch latch;
    TestFileWatcher(    CountDownLatch latch){
      this.latch=latch;
    }
    @Override public void startWatching(){
      latch.countDown();
    }
  }
}
