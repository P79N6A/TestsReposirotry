public class GlobalKernelExtensionsTest {
  @Test public void shouldConsultUnsatisfiedDependencyHandlerOnMissingDependencies(){
    KernelContext context=mock(KernelContext.class);
    KernelExtensionFailureStrategy handler=mock(KernelExtensionFailureStrategy.class);
    Dependencies dependencies=new Dependencies();
    TestingExtensionFactory extensionFactory=new TestingExtensionFactory();
    GlobalKernelExtensions extensions=new GlobalKernelExtensions(context,iterable(extensionFactory),dependencies,handler);
    LifeSupport life=new LifeSupport();
    life.add(extensions);
    try {
      life.start();
      verify(handler).handle(eq(extensionFactory),any(UnsatisfiedDependencyException.class));
    }
  finally {
      life.shutdown();
    }
  }
  @Test public void shouldConsultUnsatisfiedDependencyHandlerOnFailingDependencyClasses(){
    KernelContext context=mock(KernelContext.class);
    KernelExtensionFailureStrategy handler=mock(KernelExtensionFailureStrategy.class);
    Dependencies dependencies=new Dependencies();
    UninitializableKernelExtensionFactory extensionFactory=new UninitializableKernelExtensionFactory();
    GlobalKernelExtensions extensions=new GlobalKernelExtensions(context,iterable(extensionFactory),dependencies,handler);
    LifeSupport life=new LifeSupport();
    life.add(extensions);
    try {
      life.start();
      verify(handler).handle(eq(extensionFactory),any(IllegalArgumentException.class));
    }
  finally {
      life.shutdown();
    }
  }
private interface TestingDependencies {
    JobScheduler jobScheduler();
  }
private static class TestingExtensionFactory extends KernelExtensionFactory<TestingDependencies> {
    TestingExtensionFactory(){
      super("testing");
    }
    @Override public Lifecycle newInstance(    KernelContext context,    TestingDependencies dependencies){
      return new TestingExtension(dependencies.jobScheduler());
    }
  }
private static class TestingExtension extends LifecycleAdapter {
    TestingExtension(    JobScheduler jobScheduler){
    }
  }
}
