public class SchemaProcessorTest {
  private static final int LABEL_ID=0;
  private static final int REL_TYPE_ID=0;
  @Test public void shouldHandleCorrectDescriptorVersions(){
    List<String> callHistory=new ArrayList<>();
    SchemaProcessor processor=new SchemaProcessor(){
      @Override public void processSpecific(      org.neo4j.internal.kernel.api.schema.LabelSchemaDescriptor schema){
        callHistory.add("LabelSchemaDescriptor");
      }
      @Override public void processSpecific(      org.neo4j.internal.kernel.api.schema.RelationTypeSchemaDescriptor schema){
        callHistory.add("RelationTypeSchemaDescriptor");
      }
      @Override public void processSpecific(      org.neo4j.internal.kernel.api.schema.SchemaDescriptor schemaDescriptor){
        callHistory.add("SchemaDescriptor");
      }
    }
;
    disguisedLabel().processWith(processor);
    disguisedLabel().processWith(processor);
    disguisedRelType().processWith(processor);
    disguisedLabel().processWith(processor);
    disguisedRelType().processWith(processor);
    disguisedRelType().processWith(processor);
    assertThat(callHistory,Matchers.contains("LabelSchemaDescriptor","LabelSchemaDescriptor","RelationTypeSchemaDescriptor","LabelSchemaDescriptor","RelationTypeSchemaDescriptor","RelationTypeSchemaDescriptor"));
  }
  private SchemaDescriptor disguisedLabel(){
    return SchemaDescriptorFactory.forLabel(LABEL_ID,1);
  }
  private SchemaDescriptor disguisedRelType(){
    return SchemaDescriptorFactory.forRelType(REL_TYPE_ID,1);
  }
}
