@EnableRuleMigrationSupport public class NumbersTest {
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Test void failSafeCastLongToInt(){
    expectedException.expect(ArithmeticException.class);
    expectedException.expectMessage("Value 2147483648 is too big to be represented as int");
    safeCastLongToInt(Integer.MAX_VALUE + 1L);
  }
  @Test void failSafeCastLongToShort(){
    expectedException.expect(ArithmeticException.class);
    expectedException.expectMessage("Value 32768 is too big to be represented as short");
    safeCastLongToShort(Short.MAX_VALUE + 1L);
  }
  @Test void failSafeCastIntToUnsignedShort(){
    expectedException.expect(ArithmeticException.class);
    expectedException.expectMessage("Value 131068 is too big to be represented as unsigned short");
    safeCastIntToUnsignedShort(Short.MAX_VALUE << 2);
  }
  @Test void failSafeCastLongToByte(){
    expectedException.expect(ArithmeticException.class);
    expectedException.expectMessage("Value 128 is too big to be represented as byte");
    safeCastLongToByte(Byte.MAX_VALUE + 1);
  }
  @Test void failSafeCastIntToShort(){
    expectedException.expect(ArithmeticException.class);
    expectedException.expectMessage("Value 32768 is too big to be represented as short");
    safeCastIntToShort(Short.MAX_VALUE + 1);
  }
  @Test void castLongToInt(){
    assertEquals(1,safeCastLongToInt(1L));
    assertEquals(10,safeCastLongToInt(10L));
    assertEquals(-1,safeCastLongToInt(-1L));
    assertEquals(Integer.MAX_VALUE,safeCastLongToInt(Integer.MAX_VALUE));
    assertEquals(Integer.MIN_VALUE,safeCastLongToInt(Integer.MIN_VALUE));
  }
  @Test void castLongToShort(){
    assertEquals(1,safeCastLongToShort(1L));
    assertEquals(10,safeCastLongToShort(10L));
    assertEquals(-1,safeCastLongToShort(-1L));
    assertEquals(Short.MAX_VALUE,safeCastLongToShort(Short.MAX_VALUE));
    assertEquals(Short.MIN_VALUE,safeCastLongToShort(Short.MIN_VALUE));
  }
  @Test void castIntToUnsignedShort(){
    assertEquals(1,safeCastIntToUnsignedShort(1));
    assertEquals(10,safeCastIntToUnsignedShort(10));
    assertEquals(-1,safeCastIntToUnsignedShort((Short.MAX_VALUE << 1) + 1));
  }
  @Test void castIntToShort(){
    assertEquals(1,safeCastIntToShort(1));
    assertEquals(10,safeCastIntToShort(10));
    assertEquals(Short.MAX_VALUE,safeCastIntToShort(Short.MAX_VALUE));
    assertEquals(Short.MIN_VALUE,safeCastIntToShort(Short.MIN_VALUE));
  }
  @Test void castLongToByte(){
    assertEquals(1,safeCastLongToByte(1L));
    assertEquals(10,safeCastLongToByte(10L));
    assertEquals(-1,safeCastLongToByte(-1L));
    assertEquals(Byte.MAX_VALUE,safeCastLongToByte(Byte.MAX_VALUE));
    assertEquals(Byte.MIN_VALUE,safeCastLongToByte(Byte.MIN_VALUE));
  }
  @Test void castUnsignedShortToInt(){
    assertEquals(1,unsignedShortToInt((short)1));
    assertEquals(Short.MAX_VALUE,unsignedShortToInt(Short.MAX_VALUE));
    assertEquals((Short.MAX_VALUE << 1) | 1,unsignedShortToInt((short)-1));
  }
}
