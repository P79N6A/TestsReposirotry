public class BatchInsertersTest {
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  @Rule public final EphemeralFileSystemRule fileSystemRule=new EphemeralFileSystemRule();
  @Test public void automaticallyCloseCreatedFileSystemOnShutdown() throws Exception {
    verifyInserterFileSystemClose(inserter(getStoreDir()));
    verifyInserterFileSystemClose(inserter(getStoreDir(),getConfig()));
    verifyInserterFileSystemClose(inserter(getStoreDir(),getConfig(),getKernelExtensions()));
  }
  @Test public void providedFileSystemNotClosedAfterShutdown() throws IOException {
    EphemeralFileSystemAbstraction fs=fileSystemRule.get();
    verifyProvidedFileSystemOpenAfterShutdown(inserter(getStoreDir(),fs),fs);
    verifyProvidedFileSystemOpenAfterShutdown(inserter(getStoreDir(),fs,getConfig()),fs);
    verifyProvidedFileSystemOpenAfterShutdown(inserter(getStoreDir(),fs,getConfig(),getKernelExtensions()),fs);
  }
  private static Iterable<KernelExtensionFactory<?>> getKernelExtensions(){
    return Iterables.asIterable(new GenericNativeIndexProviderFactory());
  }
  private static Map<String,String> getConfig(){
    return MapUtil.stringMap(default_schema_provider.name(),GraphDatabaseSettings.SchemaIndex.NATIVE_BTREE10.providerName());
  }
  private static void verifyProvidedFileSystemOpenAfterShutdown(  BatchInserter inserter,  EphemeralFileSystemAbstraction fileSystemAbstraction){
    inserter.shutdown();
    assertFalse(fileSystemAbstraction.isClosed());
  }
  private File getStoreDir(){
    return testDirectory.storeDir();
  }
  private static void verifyInserterFileSystemClose(  BatchInserter inserter){
    assertThat("Expect specific implementation that will do required cleanups.",inserter,is(instanceOf(FileSystemClosingBatchInserter.class)));
    inserter.shutdown();
  }
}
