@RunWith(Parameterized.class) public class UdcSettingsTest {
  private static final String UDC_DISABLE="dbms.udc.disable";
  private static final UdcSettings settingsClasses=new UdcSettings();
  @Rule public final Configuration configuration=new Configuration();
  @Parameterized.Parameters(name="{0}") public static Iterable<Object[]> variations(){
    return Arrays.asList(new Variations().trueAs("true").falseAs("false").unknownAs("").parameters(),new Variations().trueAs("True").falseAs("False").unknownAs("no").parameters(),new Variations().trueAs("TRUE").falseAs("FALSE").unknownAs("yes").parameters(),new Variations().trueAs("tRuE").falseAs("fAlSe").unknownAs("foo").parameters());
  }
  private final String trueVariation;
  private final String falseVariation;
  private final String unknown;
  public UdcSettingsTest(  Variations variations){
    this.trueVariation=variations.trueVariation;
    this.falseVariation=variations.falseVariation;
    this.unknown=variations.unknown;
  }
  @Test public void shouldBeEnabledByDefault(){
    assertTrue(configuration.config(settingsClasses).get(udc_enabled));
    assertTrue(Config.defaults().get(udc_enabled));
  }
  @Test public void shouldBeDisabledByConfigurationProperty(){
    assertFalse(configuration.with(udc_enabled,falseVariation).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT).config(settingsClasses).get(udc_enabled));
    assertFalse(Config.defaults(singletonMap(udc_enabled.name(),"false")).get(udc_enabled));
  }
  @Test public void enableOn_settingDefault_sysEnableDefault_sysDisableDefault(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingTrue_sysEnableDefault_sysDisableDefault(){
    assertEnabled(configuration.with(udc_enabled,trueVariation).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingTrue_sysEnableDefault_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,trueVariation).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,falseVariation));
  }
  @Test public void enableOn_settingTrue_sysEnableDefault_sysDisableTrue(){
    assertEnabled(configuration.with(udc_enabled,trueVariation).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,trueVariation));
  }
  @Test public void enableOn_settingTrue_sysEnableTrue_sysDisableDefault(){
    assertEnabled(configuration.with(udc_enabled,trueVariation).withSystemProperty(udc_enabled.name(),trueVariation).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingTrue_sysEnableTrue_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,trueVariation).withSystemProperty(udc_enabled.name(),trueVariation).withSystemProperty(UDC_DISABLE,falseVariation));
  }
  @Test public void enableOn_settingTrue_sysEnableTrue_sysDisableTrue(){
    assertEnabled(configuration.with(udc_enabled,trueVariation).withSystemProperty(udc_enabled.name(),trueVariation).withSystemProperty(UDC_DISABLE,trueVariation));
  }
  @Test public void enableOn_settingTrue_sysEnableFalse_sysDisableDefault(){
    assertEnabled(configuration.with(udc_enabled,trueVariation).withSystemProperty(udc_enabled.name(),falseVariation).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingTrue_sysEnableFalse_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,trueVariation).withSystemProperty(udc_enabled.name(),falseVariation).withSystemProperty(UDC_DISABLE,falseVariation));
  }
  @Test public void enableOn_settingTrue_sysEnableFalse_sysDisableTrue(){
    assertEnabled(configuration.with(udc_enabled,trueVariation).withSystemProperty(udc_enabled.name(),falseVariation).withSystemProperty(UDC_DISABLE,trueVariation));
  }
  @Test public void enableOn_settingDefault_sysEnableTrue_sysDisableDefault(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),trueVariation).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingDefault_sysEnableTrue_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),trueVariation).withSystemProperty(UDC_DISABLE,falseVariation));
  }
  @Test public void enableOn_settingDefault_sysEnableTrue_sysDisableTrue(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),trueVariation).withSystemProperty(UDC_DISABLE,trueVariation));
  }
  @Test public void enableOn_settingFalse_sysEnableTrue_sysDisableDefault(){
    assertEnabled(configuration.with(udc_enabled,falseVariation).withSystemProperty(udc_enabled.name(),trueVariation).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingFalse_sysEnableTrue_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,falseVariation).withSystemProperty(udc_enabled.name(),trueVariation).withSystemProperty(UDC_DISABLE,falseVariation));
  }
  @Test public void enableOn_settingFalse_sysEnableTrue_sysDisableTrue(){
    assertEnabled(configuration.with(udc_enabled,falseVariation).withSystemProperty(udc_enabled.name(),trueVariation).withSystemProperty(UDC_DISABLE,trueVariation));
  }
  @Test public void enableOn_settingDefault_sysEnableDefault_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,falseVariation));
  }
  @Test public void enableOn_settingDefault_sysEnableFalse_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),falseVariation).withSystemProperty(UDC_DISABLE,falseVariation));
  }
  @Test public void enableOn_settingFalse_sysEnableDefault_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,falseVariation).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,falseVariation));
  }
  @Test public void enableOn_settingFalse_sysEnableFalse_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,falseVariation).withSystemProperty(udc_enabled.name(),falseVariation).withSystemProperty(UDC_DISABLE,falseVariation));
  }
  @Test public void disableOn_settingFalse_sysEnableFalse_sysDisableTrue(){
    assertDisabled(configuration.with(udc_enabled,falseVariation).withSystemProperty(udc_enabled.name(),falseVariation).withSystemProperty(UDC_DISABLE,trueVariation));
  }
  @Test public void disableOn_settingFalse_sysEnableDefault_sysDisableDefault(){
    assertDisabled(configuration.with(udc_enabled,falseVariation).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void disableOn_settingDefault_sysEnableFalse_sysDisableDefault(){
    assertDisabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),falseVariation).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void disableOn_settingDefault_sysEnableDefault_sysDisableTrue(){
    assertDisabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,trueVariation));
  }
  @Test public void disableOn_settingFalse_sysEnableFalse_sysDisableDefault(){
    assertDisabled(configuration.with(udc_enabled,falseVariation).withSystemProperty(udc_enabled.name(),falseVariation).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void disableOn_settingFalse_sysEnableDefault_sysDisableTrue(){
    assertDisabled(configuration.with(udc_enabled,falseVariation).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,trueVariation));
  }
  @Test public void disableOn_settingDefault_sysEnableFalse_sysDisableTrue(){
    assertDisabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),falseVariation).withSystemProperty(UDC_DISABLE,trueVariation));
  }
  @Test public void enableOn_settingUnknown_sysEnableDefault_sysDisableDefault(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingUnknown_sysEnableDefault_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,falseVariation));
  }
  @Test public void enableOn_settingUnknown_sysEnableDefault_sysDisableTrue(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,falseVariation));
  }
  @Test public void enableOn_settingUnknown_sysEnableFalse_sysDisableDefault(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingUnknown_sysEnableFalse_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingUnknown_sysEnableFalse_sysDisableTrue(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingUnknown_sysEnableTrue_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingUnknown_sysEnableTrue_sysDisableTrue(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingDefault_sysEnableUnknown_sysDisableDefault(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),unknown).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingDefault_sysEnableUnknown_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),unknown).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingDefault_sysEnableUnknown_sysDisableTrue(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),unknown).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingTrue_sysEnableUnknown_sysDisableDefault(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),unknown).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingTrue_sysEnableUnknown_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),unknown).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingTrue_sysEnableUnknown_sysDisableTrue(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),unknown).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingFalse_sysEnableUnknown_sysDisableDefault(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),unknown).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingFalse_sysEnableUnknown_sysDisableFalse(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),unknown).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingFalse_sysEnableUnknown_sysDisableTrue(){
    assertEnabled(configuration.with(udc_enabled,DEFAULT).withSystemProperty(udc_enabled.name(),unknown).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingDefault_sysEnableDefault_sysDisableUnknown(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingDefault_sysEnableTrue_sysDisableUnknown(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingDefault_sysEnableFalse_sysDisableUnknown(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingTrue_sysEnableDefault_sysDisableUnknown(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingTrue_sysEnableTrue_sysDisableUnknown(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingTrue_sysEnableFalse_sysDisableUnknown(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingFalse_sysEnableDefault_sysDisableUnknown(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingFalse_sysEnableTrue_sysDisableUnknown(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  @Test public void enableOn_settingFalse_sysEnableFalse_sysDisableUnknown(){
    assertEnabled(configuration.with(udc_enabled,unknown).withSystemProperty(udc_enabled.name(),DEFAULT).withSystemProperty(UDC_DISABLE,DEFAULT));
  }
  private static void assertEnabled(  Configuration configuration){
    assertTrue("should be enabled",configuration.config(settingsClasses).get(udc_enabled));
  }
  private static void assertDisabled(  Configuration configuration){
    assertFalse("should be disabled",configuration.config(settingsClasses).get(udc_enabled));
  }
static final class Variations {
    String trueVariation;
    String falseVariation;
    String unknown;
    Variations trueAs(    String trueVariation){
      this.trueVariation=trueVariation;
      return this;
    }
    Variations falseAs(    String falseVariation){
      this.falseVariation=falseVariation;
      return this;
    }
    Variations unknownAs(    String unknown){
      this.unknown=unknown;
      return this;
    }
    Object[] parameters(){
      if (trueVariation == null || falseVariation == null || unknown == null) {
        throw new IllegalStateException("Undefined variations.");
      }
      return new Object[]{this};
    }
    @Override public String toString(){
      return String.format("trueAs(%s).falseAs(%s).unknownAs(%s)",trueVariation,falseVariation,unknown);
    }
  }
}
