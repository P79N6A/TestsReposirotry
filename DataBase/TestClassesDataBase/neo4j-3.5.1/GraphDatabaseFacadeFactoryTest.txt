@ExtendWith({EphemeralFileSystemExtension.class,TestDirectoryExtension.class}) class GraphDatabaseFacadeFactoryTest {
  @Inject private TestDirectory testDirectory;
  private final GraphDatabaseFacade mockFacade=mock(GraphDatabaseFacade.class);
  private final GraphDatabaseFacadeFactory.Dependencies deps=mock(GraphDatabaseFacadeFactory.Dependencies.class,RETURNS_MOCKS);
  @BeforeEach void setup(){
    when(deps.monitors()).thenReturn(new Monitors());
  }
  @Test void shouldThrowAppropriateExceptionIfStartFails(){
    RuntimeException startupError=new RuntimeException();
    GraphDatabaseFacadeFactory db=newFaultyGraphDatabaseFacadeFactory(startupError);
    RuntimeException startException=assertThrows(RuntimeException.class,() -> db.initFacade(testDirectory.storeDir(),Collections.emptyMap(),deps,mockFacade));
    assertEquals(startupError,Exceptions.rootCause(startException));
  }
  @Test void shouldThrowAppropriateExceptionIfBothStartAndShutdownFail(){
    RuntimeException startupError=new RuntimeException();
    RuntimeException shutdownError=new RuntimeException();
    GraphDatabaseFacadeFactory db=newFaultyGraphDatabaseFacadeFactory(startupError);
    doThrow(shutdownError).when(mockFacade).shutdown();
    RuntimeException initException=assertThrows(RuntimeException.class,() -> db.initFacade(testDirectory.storeDir(),Collections.emptyMap(),deps,mockFacade));
    assertTrue(initException.getMessage().startsWith("Error starting "));
    assertEquals(startupError,initException.getCause());
    assertEquals(shutdownError,initException.getSuppressed()[0]);
  }
  private GraphDatabaseFacadeFactory newFaultyGraphDatabaseFacadeFactory(  final RuntimeException startupError){
    PlatformModule platformModule=new PlatformModule(testDirectory.storeDir(),Config.defaults(),COMMUNITY,newDependencies());
    AbstractEditionModule editionModule=new CommunityEditionModule(platformModule){
      @Override protected SchemaWriteGuard createSchemaWriteGuard(){
        return SchemaWriteGuard.ALLOW_ALL_WRITES;
      }
    }
;
    return new GraphDatabaseFacadeFactory(DatabaseInfo.UNKNOWN,p -> editionModule){
      @Override protected PlatformModule createPlatform(      File storeDir,      Config config,      Dependencies dependencies){
        final LifeSupport lifeMock=mock(LifeSupport.class);
        doThrow(startupError).when(lifeMock).start();
        doAnswer(invocation -> invocation.getArgument(0)).when(lifeMock).add(any(Lifecycle.class));
        return new PlatformModule(storeDir,config,databaseInfo,dependencies){
          @Override public LifeSupport createLife(){
            return lifeMock;
          }
        }
;
      }
    }
;
  }
}
