private static class DataUpdates implements Answer<StoreScan<IndexPopulationFailedKernelException>> {
  private final EntityUpdates[] updates;
  DataUpdates(){
    this.updates=new EntityUpdates[0];
  }
  DataUpdates(  EntityUpdates[] updates){
    this.updates=updates;
  }
  @SuppressWarnings("unchecked") void getsProcessedByStoreScanFrom(  IndexStoreView mock){
    when(mock.visitNodes(any(int[].class),any(IntPredicate.class),any(Visitor.class),isNull(),anyBoolean())).thenAnswer(this);
  }
  @Override public StoreScan<IndexPopulationFailedKernelException> answer(  InvocationOnMock invocation){
    final Visitor<EntityUpdates,IndexPopulationFailedKernelException> visitor=visitor(invocation.getArgument(2));
    return new StoreScan<IndexPopulationFailedKernelException>(){
      private volatile boolean stop;
      @Override public void run() throws IndexPopulationFailedKernelException {
        for (        EntityUpdates update : updates) {
          if (stop) {
            return;
          }
          visitor.visit(update);
        }
      }
      @Override public void stop(){
        stop=true;
      }
      @Override public void acceptUpdate(      MultipleIndexPopulator.MultipleIndexUpdater updater,      IndexEntryUpdate<?> update,      long currentlyIndexedNodeId){
      }
      @Override public PopulationProgress getProgress(){
        return new PopulationProgress(42,100);
      }
    }
;
  }
  @SuppressWarnings({"unchecked","rawtypes"}) private static Visitor<EntityUpdates,IndexPopulationFailedKernelException> visitor(  Object v){
    return (Visitor)v;
  }
  @Override public String toString(){
    return Arrays.toString(updates);
  }
}
