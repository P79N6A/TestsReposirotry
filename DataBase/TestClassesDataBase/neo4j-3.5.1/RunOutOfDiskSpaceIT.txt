public class RunOutOfDiskSpaceIT {
  @Rule public final CleanupRule cleanup=new CleanupRule();
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  @Rule public final PageCacheRule pageCacheRule=new PageCacheRule();
  @Test public void shouldPropagateIOExceptions() throws Exception {
    TransactionFailureException exceptionThrown=null;
    File storeDir=testDirectory.storeDir();
    LimitedFileSystemGraphDatabase db=new LimitedFileSystemGraphDatabase(storeDir);
    try (Transaction tx=db.beginTx()){
      db.createNode();
      tx.success();
    }
     long logVersion=db.getDependencyResolver().resolveDependency(LogVersionRepository.class).getCurrentLogVersion();
    db.runOutOfDiskSpaceNao();
    try (Transaction tx=db.beginTx()){
      db.createNode();
      tx.success();
    }
 catch (    TransactionFailureException e) {
      exceptionThrown=e;
    }
 finally {
      assertNotNull("Expected tx finish to throw TransactionFailureException when filesystem is full.",exceptionThrown);
      assertTrue(Exceptions.contains(exceptionThrown,IOException.class));
    }
    db.somehowGainMoreDiskSpace();
    db.shutdown();
    PageCache pageCache=pageCacheRule.getPageCache(db.getFileSystem());
    File neoStore=testDirectory.databaseLayout().metadataStore();
    assertEquals(logVersion,MetaDataStore.getRecord(pageCache,neoStore,MetaDataStore.Position.LOG_VERSION));
  }
  @Test public void shouldStopDatabaseWhenOutOfDiskSpace() throws Exception {
    TransactionFailureException expectedCommitException=null;
    TransactionFailureException expectedStartException=null;
    File storeDir=testDirectory.absolutePath();
    LimitedFileSystemGraphDatabase db=cleanup.add(new LimitedFileSystemGraphDatabase(storeDir));
    try (Transaction tx=db.beginTx()){
      db.createNode();
      tx.success();
    }
     long logVersion=db.getDependencyResolver().resolveDependency(LogVersionRepository.class).getCurrentLogVersion();
    db.runOutOfDiskSpaceNao();
    try (Transaction tx=db.beginTx()){
      db.createNode();
      tx.success();
    }
 catch (    TransactionFailureException e) {
      expectedCommitException=e;
    }
 finally {
      assertNotNull("Expected tx finish to throw TransactionFailureException when filesystem is full.",expectedCommitException);
    }
    try (Transaction transaction=db.beginTx()){
      fail("Expected tx begin to throw TransactionFailureException when tx manager breaks.");
    }
 catch (    TransactionFailureException e) {
      expectedStartException=e;
    }
 finally {
      assertNotNull("Expected tx begin to throw TransactionFailureException when tx manager breaks.",expectedStartException);
    }
    db.somehowGainMoreDiskSpace();
    db.shutdown();
    PageCache pageCache=pageCacheRule.getPageCache(db.getFileSystem());
    File neoStore=testDirectory.databaseLayout().metadataStore();
    assertEquals(logVersion,MetaDataStore.getRecord(pageCache,neoStore,MetaDataStore.Position.LOG_VERSION));
  }
}
