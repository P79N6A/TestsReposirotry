class IntArrayTest extends NumberArrayPageCacheTestSupport {
  private static Fixture fixture;
  private final long seed=currentTimeMillis();
  private final Random random=new Random(seed);
  @BeforeAll static void setUp() throws IOException {
    fixture=prepareDirectoryAndPageCache(IntArrayTest.class);
  }
  @AfterAll static void tearDown() throws Exception {
    fixture.close();
  }
  @TestFactory Stream<DynamicTest> shouldHandleSomeRandomSetAndGet(){
    ThrowingConsumer<NumberArrayFactory> arrayFactoryConsumer=factory -> {
      int length=random.nextInt(100_000) + 100;
      int defaultValue=random.nextInt(2) - 1;
      try (IntArray array=factory.newIntArray(length,defaultValue)){
        int[] expected=new int[length];
        Arrays.fill(expected,defaultValue);
        int operations=random.nextInt(1_000) + 10;
        for (int i=0; i < operations; i++) {
          int index=random.nextInt(length);
          int value=random.nextInt();
switch (random.nextInt(3)) {
case 0:
            array.set(index,value);
          expected[index]=value;
        break;
case 1:
      assertEquals(expected[index],array.get(index),"Seed:" + seed);
    break;
default :
  int toIndex=random.nextInt(length);
array.swap(index,toIndex);
swap(expected,index,toIndex);
break;
}
}
}
 }
;
return stream(arrayFactories(),getNumberArrayFactoryName(),arrayFactoryConsumer);
}
@TestFactory Stream<DynamicTest> shouldHandleMultipleCallsToClose(){
return DynamicTest.stream(arrayFactories(),getNumberArrayFactoryName(),factory -> {
NumberArray<?> array=factory.newIntArray(10,-1);
array.close();
array.close();
}
);
}
private static Function<NumberArrayFactory,String> getNumberArrayFactoryName(){
return factory -> factory.getClass().getName();
}
private static void swap(int[] expected,int fromIndex,int toIndex){
int fromValue=expected[fromIndex];
expected[fromIndex]=expected[toIndex];
expected[toIndex]=fromValue;
}
private static Iterator<NumberArrayFactory> arrayFactories(){
PageCache pageCache=fixture.pageCache;
File dir=fixture.directory;
NumberArrayFactory autoWithPageCacheFallback=auto(pageCache,dir,true,NO_MONITOR);
NumberArrayFactory pageCacheArrayFactory=new PageCachedNumberArrayFactory(pageCache,dir);
return Iterators.iterator(HEAP,OFF_HEAP,autoWithPageCacheFallback,pageCacheArrayFactory);
}
}
