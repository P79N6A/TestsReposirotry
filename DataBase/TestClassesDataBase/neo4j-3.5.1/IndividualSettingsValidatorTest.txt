public class IndividualSettingsValidatorTest {
  @Rule public ExpectedException expected=ExpectedException.none();
  private Log log;
  @Before public void setup(){
    log=mock(Log.class);
  }
  @Test public void nonStrictRetainsSettings(){
    IndividualSettingsValidator iv=new IndividualSettingsValidator(singletonList(strict_config_validation),true);
    final Map<String,String> rawConfig=stringMap(strict_config_validation.name(),FALSE,"dbms.jibber.jabber","bla","external_plugin.foo","bar");
    Config config=mockConfig(rawConfig);
    iv.validate(config,log);
    verify(log).warn("Unknown config option: %s","dbms.jibber.jabber");
    verifyNoMoreInteractions(log);
  }
  @Test public void strictErrorsOnUnknownSettingsInOurNamespace(){
    IndividualSettingsValidator iv=new IndividualSettingsValidator(singletonList(strict_config_validation),true);
    final Map<String,String> rawConfig=stringMap(strict_config_validation.name(),TRUE,"dbms.jibber.jabber","bla","external_plugin.foo","bar");
    Config config=mockConfig(rawConfig);
    expected.expect(InvalidSettingException.class);
    expected.expectMessage(String.format("Unknown config option 'dbms.jibber.jabber'. To resolve either remove" + " it from your configuration or set '%s' to false.",strict_config_validation.name()));
    iv.validate(config,log);
  }
  @Test public void strictAllowsStuffOutsideOurNamespace(){
    IndividualSettingsValidator iv=new IndividualSettingsValidator(singletonList(strict_config_validation),true);
    final Map<String,String> rawConfig=stringMap(strict_config_validation.name(),TRUE,"external_plugin.foo","bar");
    Config config=mockConfig(rawConfig);
    iv.validate(config,log);
    verifyNoMoreInteractions(log);
  }
  private Config mockConfig(  Map<String,String> rawConfig){
    Config config=Mockito.mock(Config.class);
    when(config.getRaw()).thenReturn(rawConfig);
    when(config.get(strict_config_validation)).thenReturn(Boolean.valueOf(rawConfig.get(strict_config_validation.name())));
    return config;
  }
}
