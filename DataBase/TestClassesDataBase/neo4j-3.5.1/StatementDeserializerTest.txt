public class StatementDeserializerTest {
  @Test @SuppressWarnings("unchecked") public void shouldDeserializeSingleStatement(){
    String json=createJsonFrom(map("statements",asList(map("statement","Blah blah","parameters",map("one",12)))));
    StatementDeserializer de=new StatementDeserializer(new ByteArrayInputStream(UTF8.encode(json)));
    assertThat(de.hasNext(),equalTo(true));
    Statement stmt=de.next();
    assertThat(stmt.statement(),equalTo("Blah blah"));
    assertThat(stmt.parameters(),equalTo(map("one",12)));
    assertThat(de.hasNext(),equalTo(false));
  }
  @Test public void shouldRejectMapWithADifferentFieldBeforeStatement(){
    String json="{ \"timeout\" : 200, \"statements\" : [ { \"statement\" : \"ignored\", \"parameters\" : {}} ] }";
    assertYieldsErrors(json,new Neo4jError(Status.Request.InvalidFormat,new DeserializationException("Unable to deserialize request. Expected first field to be 'statements', but was 'timeout'.")));
  }
  @Test public void shouldTotallyIgnoreInvalidJsonAfterStatementArrayHasFinished(){
    String json="{ \"statements\" : [ { \"statement\" : \"Blah blah\", \"parameters\" : {\"one\" : 12}} ] " + "totally invalid json is totally ignored";
    StatementDeserializer de=new StatementDeserializer(new ByteArrayInputStream(UTF8.encode(json)));
    assertThat(de.hasNext(),equalTo(true));
    Statement stmt=de.next();
    assertThat(stmt.statement(),equalTo("Blah blah"));
    assertThat(de.hasNext(),equalTo(false));
  }
  @Test public void shouldIgnoreUnknownFields(){
    String json="{ \"statements\" : [ { \"a\" : \"\", \"b\" : { \"k\":1 }, \"statement\" : \"blah\" } ] }";
    StatementDeserializer de=new StatementDeserializer(new ByteArrayInputStream(UTF8.encode(json)));
    assertThat(de.hasNext(),equalTo(true));
    assertThat(de.next().statement(),equalTo("blah"));
    assertThat(de.hasNext(),equalTo(false));
  }
  @Test public void shouldTakeParametersBeforeStatement(){
    String json="{ \"statements\" : [ { \"a\" : \"\", \"parameters\" : { \"k\":1 }, \"statement\" : \"blah\"}]}";
    StatementDeserializer de=new StatementDeserializer(new ByteArrayInputStream(UTF8.encode(json)));
    assertThat(de.hasNext(),equalTo(true));
    Statement stmt=de.next();
    assertThat(stmt.statement(),equalTo("blah"));
    assertThat(stmt.parameters(),equalTo(map("k",1)));
    assertThat(de.hasNext(),equalTo(false));
  }
  @Test public void shouldTreatEmptyInputStreamAsEmptyStatementList(){
    byte[] json=new byte[0];
    StatementDeserializer de=new StatementDeserializer(new ByteArrayInputStream(json));
    assertFalse(de.hasNext());
    assertFalse(de.errors().hasNext());
  }
  @Test @SuppressWarnings("unchecked") public void shouldDeserializeMultipleStatements(){
    String json=createJsonFrom(map("statements",asList(map("statement","Blah blah","parameters",map("one",12)),map("statement","Blah bluh","parameters",map("asd",asList("one, two"))))));
    StatementDeserializer de=new StatementDeserializer(new ByteArrayInputStream(UTF8.encode(json)));
    assertThat(de.hasNext(),equalTo(true));
    Statement stmt=de.next();
    assertThat(stmt.statement(),equalTo("Blah blah"));
    assertThat(stmt.parameters(),equalTo(map("one",12)));
    assertThat(de.hasNext(),equalTo(true));
    Statement stmt2=de.next();
    assertThat(stmt2.statement(),equalTo("Blah bluh"));
    assertThat(stmt2.parameters(),equalTo(map("asd",asList("one, two"))));
    assertThat(de.hasNext(),equalTo(false));
  }
  @Test public void shouldNotThrowButReportErrorOnInvalidInput(){
    assertYieldsErrors("{}",new Neo4jError(Status.Request.InvalidFormat,new DeserializationException("Unable to " + "deserialize request. " + "Expected [START_OBJECT, FIELD_NAME, START_ARRAY], "+ "found [START_OBJECT, END_OBJECT, null].")));
    assertYieldsErrors("{ \"statements\":\"WAIT WAT A STRING NOO11!\" }",new Neo4jError(Status.Request.InvalidFormat,new DeserializationException("Unable to " + "deserialize request. Expected [START_OBJECT, FIELD_NAME, START_ARRAY], found [START_OBJECT, " + "FIELD_NAME, VALUE_STRING].")));
    assertYieldsErrors("[{]}",new Neo4jError(Status.Request.InvalidFormat,new DeserializationException("Unable to deserialize request: Unexpected close marker ']': " + "expected '}' " + "(for OBJECT starting at [Source: TestInputStream; line: 1, column: 1])\n "+ "at [Source: TestInputStream; line: 1, column: 4]")));
    assertYieldsErrors("{ \"statements\" : \"ITS A STRING\" }",new Neo4jError(Status.Request.InvalidFormat,new DeserializationException("Unable to deserialize request. " + "Expected [START_OBJECT, FIELD_NAME, START_ARRAY], " + "found [START_OBJECT, FIELD_NAME, VALUE_STRING].")));
    assertYieldsErrors("{ \"statements\" : [ { \"statement\" : [\"dd\"] } ] }",new Neo4jError(Status.Request.InvalidFormat,new DeserializationException("Unable to deserialize request: Can not deserialize instance of" + " java.lang.String out of START_ARRAY token\n at [Source: TestInputStream; line: 1, " + "column: 22]")));
    assertYieldsErrors("{ \"statements\" : [ { \"statement\" : \"stmt\", \"parameters\" : [\"AN ARRAY!!\"] } ] }",new Neo4jError(Status.Request.InvalidFormat,new DeserializationException("Unable to deserialize request: Can not deserialize instance of" + " java.util.LinkedHashMap out of START_ARRAY token\n at [Source: TestInputStream; " + "line: 1, column: 42]")));
  }
  private void assertYieldsErrors(  String json,  Neo4jError... expectedErrors){
    StatementDeserializer de=new StatementDeserializer(new ByteArrayInputStream(UTF8.encode(json)){
      @Override public String toString(){
        return "TestInputStream";
      }
    }
);
    while (de.hasNext()) {
      de.next();
    }
    Iterator<Neo4jError> actual=de.errors();
    Iterator<Neo4jError> expected=asList(expectedErrors).iterator();
    while (actual.hasNext()) {
      assertTrue(expected.hasNext());
      Neo4jError error=actual.next();
      Neo4jError expectedError=expected.next();
      assertThat(error.getMessage(),equalTo(expectedError.getMessage()));
      assertThat(error.status(),equalTo(expectedError.status()));
    }
    assertFalse(expected.hasNext());
  }
}
