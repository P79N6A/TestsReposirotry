public class SystemExitRule extends ExternalResource {
  private Integer expectedExitStatusCode;
  private SecurityManager originalSecurityManager;
  private SystemExitRule(){
  }
  public static SystemExitRule none(){
    return new SystemExitRule();
  }
  public void expectExit(  int statusCode){
    this.expectedExitStatusCode=statusCode;
  }
  @Override protected void before(){
    originalSecurityManager=System.getSecurityManager();
    TestSecurityManager testSecurityManager=new TestSecurityManager(originalSecurityManager);
    System.setSecurityManager(testSecurityManager);
  }
  @Override public Statement apply(  Statement base,  Description description){
    final Statement externalRuleStatement=super.apply(base,description);
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        try {
          externalRuleStatement.evaluate();
          if (exitWasExpected()) {
            fail("System exit call was expected, but not invoked.");
          }
        }
 catch (        SystemExitError e) {
          int exceptionStatusCode=e.getStatusCode();
          if (exitWasExpected()) {
            int expectedCode=expectedExitStatusCode;
            assertEquals(String.format("Expected system exit code:%d but was: %d.",expectedCode,exceptionStatusCode),expectedCode,exceptionStatusCode);
          }
 else {
            fail("System exit call was not expected, but was invoked. Exit status code: " + exceptionStatusCode);
          }
        }
      }
    }
;
  }
  @Override protected void after(){
    System.setSecurityManager(originalSecurityManager);
  }
  private boolean exitWasExpected(){
    return expectedExitStatusCode != null;
  }
}
