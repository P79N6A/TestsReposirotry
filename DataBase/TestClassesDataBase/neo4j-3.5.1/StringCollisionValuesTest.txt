@RunWith(Parameterized.class) public class StringCollisionValuesTest {
  @Rule public final PageCacheAndDependenciesRule storage=new PageCacheAndDependenciesRule().with(new DefaultFileSystemRule());
  @Rule public final RandomRule random=new RandomRule().withConfiguration(new RandomValues.Default(){
    @Override public int stringMaxLength(){
      return (1 << Short.SIZE) - 1;
    }
  }
);
  @Parameters public static Collection<Function<PageCacheAndDependenciesRule,NumberArrayFactory>> data(){
    return Arrays.asList(storage -> HEAP,storage -> OFF_HEAP,storage -> AUTO_WITHOUT_PAGECACHE,storage -> CHUNKED_FIXED_SIZE,storage -> new PageCachedNumberArrayFactory(storage.pageCache(),storage.directory().directory()));
  }
  @Parameter(0) public Function<PageCacheAndDependenciesRule,NumberArrayFactory> factory;
  @Test public void shouldStoreAndLoadStrings(){
    try (StringCollisionValues values=new StringCollisionValues(factory.apply(storage),10_000)){
      long[] offsets=new long[100];
      String[] strings=new String[offsets.length];
      for (int i=0; i < offsets.length; i++) {
        String string=random.nextAlphaNumericString();
        offsets[i]=values.add(string);
        strings[i]=string;
      }
      for (int i=0; i < offsets.length; i++) {
        assertEquals(strings[i],values.get(offsets[i]));
      }
    }
   }
  @Test public void shouldMoveOverToNextChunkOnNearEnd(){
    try (StringCollisionValues values=new StringCollisionValues(factory.apply(storage),10_000)){
      char[] chars=new char[PAGE_SIZE - 3];
      Arrays.fill(chars,'a');
      String string=String.valueOf(chars);
      long offset=values.add(string);
      String secondString="abcdef";
      long secondOffset=values.add(secondString);
      String readString=(String)values.get(offset);
      assertEquals(string,readString);
      String readSecondString=(String)values.get(secondOffset);
      assertEquals(secondString,readSecondString);
    }
   }
}
