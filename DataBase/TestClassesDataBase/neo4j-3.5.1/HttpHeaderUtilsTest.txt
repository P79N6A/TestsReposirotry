public class HttpHeaderUtilsTest {
  @Rule public AssertableLogProvider logProvider=new AssertableLogProvider(true);
  private HttpServletRequest request;
  @Before public void setUp(){
    request=Mockito.mock(HttpServletRequest.class);
  }
  @Test public void retrieveCustomTransactionTimeout(){
    when(request.getHeader(MAX_EXECUTION_TIME_HEADER)).thenReturn("100");
    Log log=logProvider.getLog(HttpServletRequest.class);
    long transactionTimeout=getTransactionTimeout(request,log);
    assertEquals("Transaction timeout should be retrieved.",100,transactionTimeout);
    logProvider.assertNoLoggingOccurred();
  }
  @Test public void defaultValueWhenCustomTransactionTimeoutNotSpecified(){
    Log log=logProvider.getLog(HttpServletRequest.class);
    long transactionTimeout=getTransactionTimeout(request,log);
    assertEquals("Transaction timeout not specified.",0,transactionTimeout);
    logProvider.assertNoLoggingOccurred();
  }
  @Test public void defaultValueWhenCustomTransactionTimeoutNotANumber(){
    when(request.getHeader(MAX_EXECUTION_TIME_HEADER)).thenReturn("aa");
    Log log=logProvider.getLog(HttpServletRequest.class);
    long transactionTimeout=getTransactionTimeout(request,log);
    assertEquals("Transaction timeout not specified.",0,transactionTimeout);
    logProvider.assertContainsMessageContaining("Fail to parse `max-execution-time` " + "header with value: 'aa'. Should be a positive number.");
  }
  @Test public void shouldCheckHttpHeaders(){
    assertFalse(isValidHttpHeaderName(null));
    assertFalse(isValidHttpHeaderName(""));
    assertFalse(isValidHttpHeaderName(" "));
    assertFalse(isValidHttpHeaderName("      "));
    assertFalse(isValidHttpHeaderName(" \r "));
    assertFalse(isValidHttpHeaderName(" \r\n\t "));
    assertTrue(isValidHttpHeaderName(HttpHeaders.ACCEPT));
    assertTrue(isValidHttpHeaderName(HttpHeaders.ACCEPT_ENCODING));
    assertTrue(isValidHttpHeaderName(HttpHeaders.AGE));
    assertTrue(isValidHttpHeaderName(HttpHeaders.CONTENT_ENCODING));
    assertTrue(isValidHttpHeaderName(HttpHeaders.EXPIRES));
    assertTrue(isValidHttpHeaderName(HttpHeaders.IF_MATCH));
    assertTrue(isValidHttpHeaderName(HttpHeaders.TRANSFER_ENCODING));
    assertTrue(isValidHttpHeaderName("Weird Header With Spaces"));
    assertFalse(isValidHttpHeaderName("My\nHeader"));
    assertFalse(isValidHttpHeaderName("Other\rStrange-Header"));
    assertFalse(isValidHttpHeaderName("Header-With-Tab\t"));
  }
}
