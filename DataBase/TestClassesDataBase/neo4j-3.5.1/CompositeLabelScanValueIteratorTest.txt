public class CompositeLabelScanValueIteratorTest {
  @Test public void mustHandleEmptyListOfIterators(){
    List<PrimitiveLongResourceIterator> iterators=emptyList();
    CompositeLabelScanValueIterator iterator=new CompositeLabelScanValueIterator(iterators,false);
    assertFalse(iterator.hasNext());
    try {
      iterator.next();
      fail("Expected iterator to throw");
    }
 catch (    NoSuchElementException e) {
    }
  }
  @Test public void mustHandleEmptyIterator(){
    List<PrimitiveLongResourceIterator> iterators=singletonList(emptyIterator());
    CompositeLabelScanValueIterator iterator=new CompositeLabelScanValueIterator(iterators,false);
    assertFalse(iterator.hasNext());
  }
  @Test public void mustHandleMultipleEmptyIterators(){
    List<PrimitiveLongResourceIterator> iterators=asMutableList(emptyIterator(),emptyIterator(),emptyIterator());
    CompositeLabelScanValueIterator iterator=new CompositeLabelScanValueIterator(iterators,false);
    assertFalse(iterator.hasNext());
  }
  @Test public void mustReportAllFromSingleIterator(){
    long[] expected={0L,1L,Long.MAX_VALUE};
    List<PrimitiveLongResourceIterator> iterators=Collections.singletonList(iterator(null,expected));
    CompositeLabelScanValueIterator iterator=new CompositeLabelScanValueIterator(iterators,false);
    assertArrayEquals(expected,PrimitiveLongCollections.asArray(iterator));
  }
  @Test public void mustReportAllFromNonOverlappingMultipleIterators(){
    AtomicInteger closeCounter=new AtomicInteger();
    long[] firstIter={0L,2L,Long.MAX_VALUE};
    long[] secondIter={1L,3L};
    long[] expected={0L,1L,2L,3L,Long.MAX_VALUE};
    List<PrimitiveLongResourceIterator> iterators=asMutableList(iterator(closeCounter::incrementAndGet,firstIter),iterator(closeCounter::incrementAndGet,secondIter));
    CompositeLabelScanValueIterator iterator=new CompositeLabelScanValueIterator(iterators,false);
    assertArrayEquals(expected,PrimitiveLongCollections.asArray(iterator));
    iterator.close();
    assertEquals("expected close count",2,closeCounter.get());
  }
  @Test public void mustReportUniqueValuesFromOverlappingIterators(){
    AtomicInteger closeCounter=new AtomicInteger();
    long[] firstIter={0L,2L,Long.MAX_VALUE};
    long[] secondIter={1L,3L};
    long[] thirdIter={0L,3L};
    long[] expected={0L,1L,2L,3L,Long.MAX_VALUE};
    List<PrimitiveLongResourceIterator> iterators=asMutableList(iterator(closeCounter::incrementAndGet,firstIter),iterator(closeCounter::incrementAndGet,secondIter),iterator(closeCounter::incrementAndGet,thirdIter));
    CompositeLabelScanValueIterator iterator=new CompositeLabelScanValueIterator(iterators,false);
    assertArrayEquals(expected,PrimitiveLongCollections.asArray(iterator));
    iterator.close();
    assertEquals("expected close count",3,closeCounter.get());
  }
  @Test public void mustReportUniqueValuesFromOverlappingIteratorsWithOneEmpty(){
    AtomicInteger closeCounter=new AtomicInteger();
    long[] firstIter={0L,2L,Long.MAX_VALUE};
    long[] secondIter={1L,3L};
    long[] thirdIter={0L,3L};
    long[] fourthIter={};
    long[] expected={0L,1L,2L,3L,Long.MAX_VALUE};
    List<PrimitiveLongResourceIterator> iterators=asMutableList(iterator(closeCounter::incrementAndGet,firstIter),iterator(closeCounter::incrementAndGet,secondIter),iterator(closeCounter::incrementAndGet,thirdIter),iterator(closeCounter::incrementAndGet,fourthIter));
    CompositeLabelScanValueIterator iterator=new CompositeLabelScanValueIterator(iterators,false);
    assertArrayEquals(expected,PrimitiveLongCollections.asArray(iterator));
    iterator.close();
    assertEquals("expected close count",4,closeCounter.get());
  }
  @Test public void mustOnlyReportValuesReportedByAll(){
    AtomicInteger closeCounter=new AtomicInteger();
    long[] firstIter={0L,Long.MAX_VALUE};
    long[] secondIter={0L,1L,Long.MAX_VALUE};
    long[] thirdIter={0L,1L,2L,Long.MAX_VALUE};
    long[] expected={0L,Long.MAX_VALUE};
    List<PrimitiveLongResourceIterator> iterators=asMutableList(iterator(closeCounter::incrementAndGet,firstIter),iterator(closeCounter::incrementAndGet,secondIter),iterator(closeCounter::incrementAndGet,thirdIter));
    CompositeLabelScanValueIterator iterator=new CompositeLabelScanValueIterator(iterators,true);
    assertArrayEquals(expected,PrimitiveLongCollections.asArray(iterator));
    iterator.close();
    assertEquals("expected close count",3,closeCounter.get());
  }
  @Test public void mustOnlyReportValuesReportedByAllWithOneEmpty(){
    AtomicInteger closeCounter=new AtomicInteger();
    long[] firstIter={0L,Long.MAX_VALUE};
    long[] secondIter={0L,1L,Long.MAX_VALUE};
    long[] thirdIter={0L,1L,2L,Long.MAX_VALUE};
    long[] fourthIter={};
    long[] expected={};
    List<PrimitiveLongResourceIterator> iterators=asMutableList(iterator(closeCounter::incrementAndGet,firstIter),iterator(closeCounter::incrementAndGet,secondIter),iterator(closeCounter::incrementAndGet,thirdIter),iterator(closeCounter::incrementAndGet,fourthIter));
    CompositeLabelScanValueIterator iterator=new CompositeLabelScanValueIterator(iterators,true);
    assertArrayEquals(expected,PrimitiveLongCollections.asArray(iterator));
    iterator.close();
    assertEquals("expected close count",4,closeCounter.get());
  }
  @SafeVarargs private final <T>List<T> asMutableList(  T... objects){
    return new ArrayList<>(Arrays.asList(objects));
  }
}
