public class UserServiceTest {
  protected static final User NEO4J_USER=new User.Builder("neo4j",LegacyCredential.forPassword("neo4j")).withRequiredPasswordChange(true).build();
  protected final PasswordPolicy passwordPolicy=new BasicPasswordPolicy();
  protected final UserRepository userRepository=new InMemoryUserRepository();
  protected UserManagerSupplier userManagerSupplier;
  protected LoginContext neo4jContext;
  protected Principal neo4jPrinciple;
  protected void setupAuthManagerAndSubject(){
    BasicAuthManager basicAuthManager=new BasicAuthManager(userRepository,passwordPolicy,mock(AuthenticationStrategy.class),new InMemoryUserRepository());
    userManagerSupplier=basicAuthManager;
    neo4jContext=new BasicLoginContext(NEO4J_USER,AuthenticationResult.SUCCESS);
  }
  @Before public void setUp() throws InvalidArgumentsException, IOException {
    userRepository.create(NEO4J_USER);
    setupAuthManagerAndSubject();
    neo4jPrinciple=new DelegatingPrincipal("neo4j",neo4jContext);
  }
  @After public void tearDown() throws IOException {
    userRepository.delete(NEO4J_USER);
  }
  @Test public void shouldReturnValidUserRepresentation() throws Exception {
    HttpServletRequest req=mock(HttpServletRequest.class);
    when(req.getUserPrincipal()).thenReturn(neo4jPrinciple);
    OutputFormat outputFormat=new EntityOutputFormat(new JsonFormat(),new URI("http://www.example.com"),null);
    UserService userService=new UserService(userManagerSupplier,new JsonFormat(),outputFormat);
    Response response=userService.getUser("neo4j",req);
    assertThat(response.getStatus(),equalTo(200));
    String json=new String((byte[])response.getEntity());
    assertNotNull(json);
    assertThat(json,containsString("\"username\" : \"neo4j\""));
    assertThat(json,containsString("\"password_change\" : \"http://www.example.com/user/neo4j/password\""));
    assertThat(json,containsString("\"password_change_required\" : true"));
  }
  @Test public void shouldReturn404WhenRequestingUserIfNotAuthenticated() throws Exception {
    HttpServletRequest req=mock(HttpServletRequest.class);
    when(req.getUserPrincipal()).thenReturn(null);
    OutputFormat outputFormat=new EntityOutputFormat(new JsonFormat(),new URI("http://www.example.com"),null);
    UserService userService=new UserService(userManagerSupplier,new JsonFormat(),outputFormat);
    Response response=userService.getUser("neo4j",req);
    assertThat(response.getStatus(),equalTo(404));
  }
  @Test public void shouldReturn404WhenRequestingUserIfDifferentUser() throws Exception {
    HttpServletRequest req=mock(HttpServletRequest.class);
    when(req.getUserPrincipal()).thenReturn(neo4jPrinciple);
    OutputFormat outputFormat=new EntityOutputFormat(new JsonFormat(),new URI("http://www.example.com"),null);
    UserService userService=new UserService(mock(BasicAuthManager.class),new JsonFormat(),outputFormat);
    Response response=userService.getUser("fred",req);
    assertThat(response.getStatus(),equalTo(404));
  }
  @Test public void shouldReturn404WhenRequestingUserIfUnknownUser() throws Exception {
    HttpServletRequest req=mock(HttpServletRequest.class);
    when(req.getUserPrincipal()).thenReturn(neo4jPrinciple);
    userManagerSupplier.getUserManager().deleteUser("neo4j");
    OutputFormat outputFormat=new EntityOutputFormat(new JsonFormat(),new URI("http://www.example.com"),null);
    UserService userService=new UserService(userManagerSupplier,new JsonFormat(),outputFormat);
    Response response=userService.getUser("neo4j",req);
    assertThat(response.getStatus(),equalTo(404));
  }
  @Test public void shouldChangePasswordAndReturnSuccess() throws Exception {
    HttpServletRequest req=mock(HttpServletRequest.class);
    when(req.getUserPrincipal()).thenReturn(neo4jPrinciple);
    OutputFormat outputFormat=new EntityOutputFormat(new JsonFormat(),new URI("http://www.example.com"),null);
    UserService userService=new UserService(userManagerSupplier,new JsonFormat(),outputFormat);
    Response response=userService.setPassword("neo4j",req,"{ \"password\" : \"test\" }");
    assertThat(response.getStatus(),equalTo(200));
    userManagerSupplier.getUserManager().getUser("neo4j").credentials().matchesPassword("test");
  }
  @Test public void shouldReturn404WhenChangingPasswordIfNotAuthenticated() throws Exception {
    HttpServletRequest req=mock(HttpServletRequest.class);
    when(req.getUserPrincipal()).thenReturn(null);
    OutputFormat outputFormat=new EntityOutputFormat(new JsonFormat(),new URI("http://www.example.com"),null);
    UserService userService=new UserService(mock(BasicAuthManager.class),new JsonFormat(),outputFormat);
    Response response=userService.setPassword("neo4j",req,"{ \"password\" : \"test\" }");
    assertThat(response.getStatus(),equalTo(404));
  }
  @Test public void shouldReturn404WhenChangingPasswordIfDifferentUser() throws Exception {
    HttpServletRequest req=mock(HttpServletRequest.class);
    when(req.getUserPrincipal()).thenReturn(neo4jPrinciple);
    UserManager userManager=mock(UserManager.class);
    OutputFormat outputFormat=new EntityOutputFormat(new JsonFormat(),new URI("http://www.example.com"),null);
    UserService userService=new UserService(userManagerSupplier,new JsonFormat(),outputFormat);
    Response response=userService.setPassword("fred",req,"{ \"password\" : \"test\" }");
    assertThat(response.getStatus(),equalTo(404));
    verifyZeroInteractions(userManager);
  }
  @Test public void shouldReturn422WhenChangingPasswordIfUnknownUser() throws Exception {
    HttpServletRequest req=mock(HttpServletRequest.class);
    when(req.getUserPrincipal()).thenReturn(neo4jPrinciple);
    OutputFormat outputFormat=new EntityOutputFormat(new JsonFormat(),new URI("http://www.example.com"),null);
    UserService userService=new UserService(userManagerSupplier,new JsonFormat(),outputFormat);
    userRepository.delete(NEO4J_USER);
    Response response=userService.setPassword("neo4j",req,"{ \"password\" : \"test\" }");
    assertThat(response.getStatus(),equalTo(422));
  }
  @Test public void shouldReturn400IfPayloadIsInvalid() throws Exception {
    HttpServletRequest req=mock(HttpServletRequest.class);
    when(req.getUserPrincipal()).thenReturn(neo4jPrinciple);
    OutputFormat outputFormat=new EntityOutputFormat(new JsonFormat(),new URI("http://www.example.com"),null);
    UserService userService=new UserService(mock(BasicAuthManager.class),new JsonFormat(),outputFormat);
    Response response=userService.setPassword("neo4j",req,"xxx");
    assertThat(response.getStatus(),equalTo(400));
    String json=new String((byte[])response.getEntity());
    assertNotNull(json);
    assertThat(json,containsString("\"code\" : \"Neo.ClientError.Request.InvalidFormat\""));
  }
  @Test public void shouldReturn422IfMissingPassword() throws Exception {
    HttpServletRequest req=mock(HttpServletRequest.class);
    when(req.getUserPrincipal()).thenReturn(neo4jPrinciple);
    OutputFormat outputFormat=new EntityOutputFormat(new JsonFormat(),new URI("http://www.example.com"),null);
    UserService userService=new UserService(mock(BasicAuthManager.class),new JsonFormat(),outputFormat);
    Response response=userService.setPassword("neo4j",req,"{ \"unknown\" : \"unknown\" }");
    assertThat(response.getStatus(),equalTo(422));
    String json=new String((byte[])response.getEntity());
    assertNotNull(json);
    assertThat(json,containsString("\"code\" : \"Neo.ClientError.Request.InvalidFormat\""));
    assertThat(json,containsString("\"message\" : \"Required parameter 'password' is missing.\""));
  }
  @Test public void shouldReturn422IfInvalidPasswordType() throws Exception {
    HttpServletRequest req=mock(HttpServletRequest.class);
    when(req.getUserPrincipal()).thenReturn(neo4jPrinciple);
    OutputFormat outputFormat=new EntityOutputFormat(new JsonFormat(),new URI("http://www.example.com"),null);
    UserService userService=new UserService(mock(BasicAuthManager.class),new JsonFormat(),outputFormat);
    Response response=userService.setPassword("neo4j",req,"{ \"password\" : 1 }");
    assertThat(response.getStatus(),equalTo(422));
    String json=new String((byte[])response.getEntity());
    assertNotNull(json);
    assertThat(json,containsString("\"code\" : \"Neo.ClientError.Request.InvalidFormat\""));
    assertThat(json,containsString("\"message\" : \"Expected 'password' to be a string.\""));
  }
  @Test public void shouldReturn422IfEmptyPassword() throws Exception {
    HttpServletRequest req=mock(HttpServletRequest.class);
    when(req.getUserPrincipal()).thenReturn(neo4jPrinciple);
    OutputFormat outputFormat=new EntityOutputFormat(new JsonFormat(),new URI("http://www.example.com"),null);
    UserService userService=new UserService(userManagerSupplier,new JsonFormat(),outputFormat);
    Response response=userService.setPassword("neo4j",req,"{ \"password\" : \"\" }");
    assertThat(response.getStatus(),equalTo(422));
    String json=new String((byte[])response.getEntity());
    assertNotNull(json);
    assertThat(json,containsString("\"code\" : \"Neo.ClientError.General.InvalidArguments\""));
    assertThat(json,containsString("\"message\" : \"A password cannot be empty.\""));
  }
  @Test public void shouldReturn422IfPasswordIdentical() throws Exception {
    HttpServletRequest req=mock(HttpServletRequest.class);
    when(req.getUserPrincipal()).thenReturn(neo4jPrinciple);
    OutputFormat outputFormat=new EntityOutputFormat(new JsonFormat(),new URI("http://www.example.com"),null);
    UserService userService=new UserService(userManagerSupplier,new JsonFormat(),outputFormat);
    Response response=userService.setPassword("neo4j",req,"{ \"password\" : \"neo4j\" }");
    assertThat(response.getStatus(),equalTo(422));
    String json=new String((byte[])response.getEntity());
    assertNotNull(json);
    assertThat(json,containsString("\"code\" : \"Neo.ClientError.General.InvalidArguments\""));
    assertThat(json,containsString("\"message\" : \"Old password and new password cannot be the same.\""));
  }
}
