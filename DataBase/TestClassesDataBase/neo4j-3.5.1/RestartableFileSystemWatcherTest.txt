class RestartableFileSystemWatcherTest {
  private FileWatcher delegate=mock(FileWatcher.class);
  private RestartableFileSystemWatcher watcher=new RestartableFileSystemWatcher(delegate);
  @Test void delegateListenersCallToRealWatcher(){
    FileWatchEventListener listener=mock(FileWatchEventListener.class);
    watcher.addFileWatchEventListener(listener);
    verify(delegate).addFileWatchEventListener(listener);
    watcher.removeFileWatchEventListener(listener);
    verify(delegate).removeFileWatchEventListener(listener);
  }
  @Test void closeDelegateOnClose() throws IOException {
    watcher.close();
    verify(delegate).close();
  }
  @Test void startStopFileWatchingCycle() throws IOException, InterruptedException {
    File file1=mock(File.class);
    File file2=mock(File.class);
    WatchedResource resource1=mock(WatchedResource.class);
    WatchedResource resource2=mock(WatchedResource.class);
    watcher.watch(file1);
    watcher.watch(file2);
    when(delegate.watch(file1)).thenReturn(resource1);
    when(delegate.watch(file2)).thenReturn(resource2);
    int invocations=100;
    for (int i=0; i < invocations; i++) {
      startStopWatching();
    }
    verify(delegate,times(invocations)).watch(file1);
    verify(delegate,times(invocations)).watch(file2);
    verify(delegate,times(invocations)).startWatching();
    verify(delegate,times(invocations)).stopWatching();
    verify(resource1,times(invocations)).close();
    verify(resource2,times(invocations)).close();
  }
  private void startStopWatching() throws InterruptedException {
    watcher.startWatching();
    watcher.stopWatching();
  }
}
