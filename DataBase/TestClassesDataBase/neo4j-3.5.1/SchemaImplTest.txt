@ExtendWith({EphemeralFileSystemExtension.class,TestDirectoryExtension.class}) public class SchemaImplTest {
  private static final Label USER_LABEL=Label.label("User");
  @Inject private EphemeralFileSystemAbstraction fs;
  @Inject private TestDirectory testDirectory;
  private GraphDatabaseService db;
  @BeforeEach void createDb(){
    db=new TestGraphDatabaseFactory().setFileSystem(fs).newImpermanentDatabase(testDirectory.databaseDir());
  }
  @AfterEach void shutdownDb(){
    db.shutdown();
  }
  @Test void testGetIndexPopulationProgress() throws Exception {
    assertFalse(indexExists(USER_LABEL));
    try (Transaction tx=db.beginTx()){
      Label label=Label.label("User");
      for (int id=0; id < 100000; id++) {
        Node userNode=db.createNode(label);
        userNode.setProperty("username","user" + id + "@neo4j.org");
      }
      tx.success();
    }
     IndexDefinition indexDefinition;
    try (Transaction tx=db.beginTx()){
      Schema schema=db.schema();
      indexDefinition=schema.indexFor(USER_LABEL).on("username").create();
      tx.success();
    }
     try (Transaction ignore=db.beginTx()){
      Schema schema=db.schema();
      Schema.IndexState state;
      IndexPopulationProgress progress;
      do {
        state=schema.getIndexState(indexDefinition);
        progress=schema.getIndexPopulationProgress(indexDefinition);
        assertTrue(progress.getCompletedPercentage() >= 0);
        assertTrue(progress.getCompletedPercentage() <= 100);
        Thread.sleep(10);
      }
 while (state == Schema.IndexState.POPULATING);
      assertSame(state,Schema.IndexState.ONLINE);
      assertEquals(100.0,progress.getCompletedPercentage(),0.0001);
    }
   }
  @Test void createdIndexDefinitionsMustBeUnnamed(){
    try (Transaction tx=db.beginTx()){
      IndexDefinition index=db.schema().indexFor(USER_LABEL).on("name").create();
      assertThat(index.getName(),is(IndexReference.UNNAMED_INDEX));
      tx.success();
    }
   }
  @Test void mustRememberNamesOfCreatedIndex(){
    String indexName="Users index";
    try (Transaction tx=db.beginTx()){
      IndexDefinition index=db.schema().indexFor(USER_LABEL).on("name").withName(indexName).create();
      assertThat(index.getName(),is(indexName));
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      IndexDefinition index=db.schema().getIndexByName(indexName);
      assertThat(index.getName(),is(indexName));
      tx.success();
    }
   }
  private boolean indexExists(  Label label){
    try (Transaction transaction=db.beginTx()){
      Iterable<IndexDefinition> indexes=db.schema().getIndexes(label);
      IndexDefinition index=Iterables.firstOrNull(indexes);
      boolean exists=index != null;
      transaction.success();
      return exists;
    }
   }
}
