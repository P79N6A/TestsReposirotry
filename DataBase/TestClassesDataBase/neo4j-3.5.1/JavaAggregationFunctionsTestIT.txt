public class JavaAggregationFunctionsTestIT {
  @Rule public TestDirectory testDir=TestDirectory.testDirectory();
  @Rule public SuppressOutput suppressOutput=SuppressOutput.suppressAll();
public static class MyFunctions {
    @UserAggregationFunction public EliteAggregator myFunc(){
      return new EliteAggregator();
    }
    @UserAggregationFunction public EliteAggregator funcThatThrows(){
      throw new RuntimeException("This is an exception");
    }
  }
public static class EliteAggregator {
    @UserAggregationUpdate public void update(){
    }
    @UserAggregationResult public long result(){
      return 1337L;
    }
  }
  @Test public void shouldLaunchWithDeclaredFunctions() throws Exception {
    try (ServerControls server=createServer(MyFunctions.class).newServer()){
      HTTP.Response response=HTTP.POST(server.httpURI().resolve("db/data/transaction/commit").toString(),quotedJson("{ 'statements': [ { 'statement': 'RETURN org.neo4j.harness.myFunc() AS someNumber' } ] " + "}"));
      JsonNode result=response.get("results").get(0);
      assertEquals("someNumber",result.get("columns").get(0).asText());
      assertEquals(1337,result.get("data").get(0).get("row").get(0).asInt());
      assertEquals("[]",response.get("errors").toString());
    }
   }
  private TestServerBuilder createServer(  Class<?> functionClass){
    return TestServerBuilders.newInProcessBuilder().withAggregationFunction(functionClass);
  }
  @Test public void shouldGetHelpfulErrorOnProcedureThrowsException() throws Exception {
    try (ServerControls server=createServer(MyFunctions.class).newServer()){
      HTTP.Response response=HTTP.POST(server.httpURI().resolve("db/data/transaction/commit").toString(),quotedJson("{ 'statements': [ { 'statement': 'RETURN org.neo4j.harness.funcThatThrows()' } ] }"));
      String error=response.get("errors").get(0).get("message").asText();
      assertEquals("Failed to invoke function `org.neo4j.harness.funcThatThrows`: Caused by: java.lang" + ".RuntimeException: This is an exception",error);
    }
   }
}
