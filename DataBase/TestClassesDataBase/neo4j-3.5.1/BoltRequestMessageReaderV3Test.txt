class BoltRequestMessageReaderV3Test {
  @ParameterizedTest @MethodSource("boltV3Messages") void shouldDecodeV3Messages(  RequestMessage message) throws Exception {
    testMessageDecoding(message);
  }
  @ParameterizedTest @MethodSource("boltV3UnsupportedMessages") void shouldNotDecodeUnsupportedMessages(  RequestMessage message) throws Exception {
    assertThrows(Exception.class,() -> testMessageDecoding(message));
  }
  private static void testMessageDecoding(  RequestMessage message) throws Exception {
    Neo4jPack neo4jPack=newNeo4jPack();
    BoltStateMachine stateMachine=mock(BoltStateMachine.class);
    BoltRequestMessageReader reader=requestMessageReader(stateMachine);
    PackedInputArray input=new PackedInputArray(encode(neo4jPack,message));
    Neo4jPack.Unpacker unpacker=neo4jPack.newUnpacker(input);
    reader.read(unpacker);
    verify(stateMachine).process(eq(message),any());
  }
  private static Stream<RequestMessage> boltV3Messages() throws BoltIOException {
    return Stream.of(new HelloMessage(map("user_agent","My driver","one",1L,"two",2L)),new RunMessage("RETURN 1",EMPTY_MAP,EMPTY_MAP),DiscardAllMessage.INSTANCE,PullAllMessage.INSTANCE,new BeginMessage(),COMMIT_MESSAGE,ROLLBACK_MESSAGE,ResetMessage.INSTANCE);
  }
  private static Stream<RequestMessage> boltV3UnsupportedMessages(){
    return Stream.of(new InitMessage("My driver",map("one",1L,"two",2L)),AckFailureMessage.INSTANCE,new org.neo4j.bolt.v1.messaging.request.RunMessage("RETURN 1"));
  }
}
