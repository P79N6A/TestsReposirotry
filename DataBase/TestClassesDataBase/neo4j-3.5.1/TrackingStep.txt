private static class TrackingStep implements Step<Batch> {
  private final AtomicLong received=new AtomicLong();
  @Override public void receivePanic(  Throwable cause){
  }
  @Override public void start(  int orderingGuarantees){
  }
  @Override public String name(){
    return "END";
  }
  @Override public long receive(  long ticket,  Batch batch){
    int count=0;
    for (int i=0; i < batch.processed.length; i++) {
      if (batch.processed[i]) {
        count++;
      }
    }
    assertEquals(batch.processed.length,count);
    if (!received.compareAndSet(ticket - 1,ticket)) {
      fail("Hmm " + ticket + " "+ received.get());
    }
    return 0;
  }
  @Override public StepStats stats(){
    return null;
  }
  @Override public void endOfUpstream(){
  }
  @Override public boolean isCompleted(){
    return false;
  }
  @Override public void awaitCompleted(){
    throw new UnsupportedOperationException();
  }
  @Override public void setDownstream(  Step<?> downstreamStep){
  }
  @Override public void close(){
  }
}
