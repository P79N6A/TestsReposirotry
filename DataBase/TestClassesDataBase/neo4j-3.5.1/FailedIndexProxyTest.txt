public class FailedIndexProxyTest {
  private final IndexProviderDescriptor providerDescriptor=mock(IndexProviderDescriptor.class);
  private final IndexCapability indexCapability=mock(IndexCapability.class);
  private final IndexPopulator indexPopulator=mock(IndexPopulator.class);
  private final IndexPopulationFailure indexPopulationFailure=mock(IndexPopulationFailure.class);
  private final IndexCountsRemover indexCountsRemover=mock(IndexCountsRemover.class);
  @Test public void shouldRemoveIndexCountsWhenTheIndexItselfIsDropped() throws IOException {
    String userDescription="description";
    FailedIndexProxy index=new FailedIndexProxy(forSchema(forLabel(1,2),IndexProviderDescriptor.UNDECIDED).withId(1).withoutCapabilities(),userDescription,indexPopulator,indexPopulationFailure,indexCountsRemover,NullLogProvider.getInstance());
    index.drop();
    verify(indexPopulator).drop();
    verify(indexCountsRemover).remove();
    verifyNoMoreInteractions(indexPopulator,indexCountsRemover);
  }
  @Test public void shouldLogReasonForDroppingIndex() throws IOException {
    AssertableLogProvider logProvider=new AssertableLogProvider();
    new FailedIndexProxy(forSchema(forLabel(0,0),IndexProviderDescriptor.UNDECIDED).withId(1).withoutCapabilities(),"foo",mock(IndexPopulator.class),IndexPopulationFailure.failure("it broke"),indexCountsRemover,logProvider).drop();
    logProvider.assertAtLeastOnce(inLog(FailedIndexProxy.class).info("FailedIndexProxy#drop index on foo dropped due to:\nit broke"));
  }
}
