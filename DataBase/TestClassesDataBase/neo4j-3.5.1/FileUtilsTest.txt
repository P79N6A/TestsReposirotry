public class FileUtilsTest {
  public final TestDirectory testDirectory=TestDirectory.testDirectory();
  public final ExpectedException expected=ExpectedException.none();
  public final FileSystemAbstraction fs=new DefaultFileSystemAbstraction();
  @Rule public RuleChain chain=RuleChain.outerRule(testDirectory).around(expected);
  private File path;
  @Before public void doBefore(){
    path=testDirectory.directory("path");
  }
  @Test public void moveFileToDirectory() throws Exception {
    File file=touchFile("source");
    File targetDir=directory("dir");
    File newLocationOfFile=FileUtils.moveFileToDirectory(file,targetDir);
    assertTrue(newLocationOfFile.exists());
    assertFalse(file.exists());
    assertEquals(newLocationOfFile,targetDir.listFiles()[0]);
  }
  @Test public void moveFile() throws Exception {
    File file=touchFile("source");
    File targetDir=directory("dir");
    File newLocationOfFile=new File(targetDir,"new-name");
    FileUtils.moveFile(file,newLocationOfFile);
    assertTrue(newLocationOfFile.exists());
    assertFalse(file.exists());
    assertEquals(newLocationOfFile,targetDir.listFiles()[0]);
  }
  @Test public void testEmptyDirectory() throws IOException {
    File emptyDir=directory("emptyDir");
    File nonEmptyDir=directory("nonEmptyDir");
    File directoryContent=new File(nonEmptyDir,"somefile");
    assert directoryContent.createNewFile();
    assertTrue(FileUtils.isEmptyDirectory(emptyDir));
    assertFalse(FileUtils.isEmptyDirectory(nonEmptyDir));
  }
  @Test public void pathToFileAfterMoveMustThrowIfFileNotSubPathToFromShorter(){
    File file=new File("/a");
    File from=new File("/a/b");
    File to=new File("/a/c");
    expected.expect(IllegalArgumentException.class);
    pathToFileAfterMove(from,to,file);
  }
  @Test public void pathToFileAfterMoveMustThrowIfFileNotSubPathToFromSameLength(){
    File file=new File("/a/f");
    File from=new File("/a/b");
    File to=new File("/a/c");
    expected.expect(IllegalArgumentException.class);
    pathToFileAfterMove(from,to,file);
  }
  @Test public void pathToFileAfterMoveMustThrowIfFileNotSubPathToFromLonger(){
    File file=new File("/a/c/f");
    File from=new File("/a/b");
    File to=new File("/a/c");
    expected.expect(IllegalArgumentException.class);
    pathToFileAfterMove(from,to,file);
  }
  @Test public void pathToFileAfterMoveMustThrowIfFromDirIsCompletePathToFile(){
    File file=new File("/a/b/f");
    File from=new File("/a/b/f");
    File to=new File("/a/c");
    expected.expect(IllegalArgumentException.class);
    pathToFileAfterMove(from,to,file);
  }
  @Test public void pathToFileAfterMoveMustWorkIfMovingToSibling(){
    File file=new File("/a/b/f");
    File from=new File("/a/b");
    File to=new File("/a/c");
    assertThat(pathToFileAfterMove(from,to,file).getPath(),is(path("/a/c/f")));
  }
  @Test public void pathToFileAfterMoveMustWorkIfMovingToSiblingAndFileHasSubDir(){
    File file=new File("/a/b/d/f");
    File from=new File("/a/b");
    File to=new File("/a/c");
    assertThat(pathToFileAfterMove(from,to,file).getPath(),is(path("/a/c/d/f")));
  }
  @Test public void pathToFileAfterMoveMustWorkIfMovingToSubDir(){
    File file=new File("/a/b/f");
    File from=new File("/a/b");
    File to=new File("/a/b/c");
    assertThat(pathToFileAfterMove(from,to,file).getPath(),is(path("/a/b/c/f")));
  }
  @Test public void pathToFileAfterMoveMustWorkIfMovingToSubDirAndFileHasSubDir(){
    File file=new File("/a/b/d/f");
    File from=new File("/a/b");
    File to=new File("/a/b/c");
    assertThat(pathToFileAfterMove(from,to,file).getPath(),is(path("/a/b/c/d/f")));
  }
  @Test public void pathToFileAfterMoveMustWorkIfMovingOutOfDir(){
    File file=new File("/a/b/f");
    File from=new File("/a/b");
    File to=new File("/c");
    assertThat(pathToFileAfterMove(from,to,file).getPath(),is(path("/c/f")));
  }
  @Test public void pathToFileAfterMoveMustWorkIfMovingOutOfDirAndFileHasSubDir(){
    File file=new File("/a/b/d/f");
    File from=new File("/a/b");
    File to=new File("/c");
    assertThat(pathToFileAfterMove(from,to,file).getPath(),is(path("/c/d/f")));
  }
  @Test public void pathToFileAfterMoveMustWorkIfNotMovingAtAll(){
    File file=new File("/a/b/f");
    File from=new File("/a/b");
    File to=new File("/a/b");
    assertThat(pathToFileAfterMove(from,to,file).getPath(),is(path("/a/b/f")));
  }
  @Test public void pathToFileAfterMoveMustWorkIfNotMovingAtAllAndFileHasSubDir(){
    File file=new File("/a/b/d/f");
    File from=new File("/a/b");
    File to=new File("/a/b");
    assertThat(pathToFileAfterMove(from,to,file).getPath(),is(path("/a/b/d/f")));
  }
  @Test public void allMacsHaveHighIO(){
    assumeTrue(SystemUtils.IS_OS_MAC);
    assertTrue(FileUtils.highIODevice(Paths.get("."),false));
  }
  @Test public void windowsNeverHaveHighIO(){
    assumeTrue(SystemUtils.IS_OS_WINDOWS);
    assertFalse(FileUtils.highIODevice(Paths.get("."),false));
  }
  @Test public void onLinuxDevShmHasHighIO(){
    assumeTrue(SystemUtils.IS_OS_LINUX);
    assertTrue(FileUtils.highIODevice(Paths.get("/dev/shm"),false));
  }
  @Test public void sizeOfFile() throws Exception {
    File file=touchFile("a");
    try (FileWriter fileWriter=new FileWriter(file)){
      fileWriter.append('a');
    }
     assertThat(size(fs,file),is(1L));
  }
  @Test public void sizeOfDirector() throws Exception {
    File dir=directory("dir");
    File file1=new File(dir,"file1");
    File file2=new File(dir,"file2");
    try (FileWriter fileWriter=new FileWriter(file1)){
      fileWriter.append('a').append('b');
    }
     try (FileWriter fileWriter=new FileWriter(file2)){
      fileWriter.append('a');
    }
     assertThat(size(fs,dir),is(3L));
  }
  @Test public void mustCountDirectoryContents() throws Exception {
    File dir=directory("dir");
    File file=new File(dir,"file");
    File subdir=new File(dir,"subdir");
    file.createNewFile();
    subdir.mkdirs();
    assertThat(FileUtils.countFilesInDirectoryPath(dir.toPath()),is(2L));
  }
  private File directory(  String name){
    File dir=new File(path,name);
    dir.mkdirs();
    return dir;
  }
  private File touchFile(  String name) throws IOException {
    File file=new File(path,name);
    file.createNewFile();
    return file;
  }
  private String path(  String path){
    return new File(path).getPath();
  }
}
