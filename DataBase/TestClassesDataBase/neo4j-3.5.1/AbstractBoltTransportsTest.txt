@RunWith(Parameterized.class) public abstract class AbstractBoltTransportsTest {
  private static final List<Class<? extends TransportConnection>> CONNECTION_CLASSES=Arrays.asList(SocketConnection.class,WebSocketConnection.class,SecureSocketConnection.class,SecureWebSocketConnection.class);
  private static final List<Neo4jPack> NEO4J_PACK_VERSIONS=Arrays.asList(new Neo4jPackV1(),new Neo4jPackV2());
  @Parameter(0) public Class<? extends TransportConnection> connectionClass;
  @Parameter(1) public Neo4jPack neo4jPack;
  @Parameter(2) public String name;
  protected HostnamePort address;
  protected TransportConnection connection;
  protected TransportTestUtil util;
  @Before public void initializeConnectionAndUtil() throws Exception {
    connection=connectionClass.newInstance();
    util=new TransportTestUtil(neo4jPack);
  }
  @After public void disconnectFromDatabase() throws Exception {
    if (connection != null) {
      connection.disconnect();
    }
  }
  @Parameters(name="{2}") public static List<Object[]> parameters(){
    List<Object[]> result=new ArrayList<>();
    for (    Class<? extends TransportConnection> connectionClass : CONNECTION_CLASSES) {
      for (      Neo4jPack neo4jPack : NEO4J_PACK_VERSIONS) {
        result.add(new Object[]{connectionClass,neo4jPack,newName(connectionClass,neo4jPack)});
      }
    }
    return result;
  }
  protected TransportConnection newConnection() throws Exception {
    return connectionClass.newInstance();
  }
  protected void reconnect() throws Exception {
    if (connection != null) {
      connection.disconnect();
    }
    connection=newConnection();
  }
  private static String newName(  Class<? extends TransportConnection> connectionClass,  Neo4jPack neo4jPack){
    return connectionClass.getSimpleName() + " & " + neo4jPack;
  }
}
