public class LogHeaderWriterTest {
  private final long expectedLogVersion=CURRENT_LOG_VERSION;
  private final long expectedTxId=42;
  @Rule public final DefaultFileSystemRule fileSystemRule=new DefaultFileSystemRule();
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  @Test public void shouldWriteALogHeaderInTheGivenChannel() throws IOException {
    final InMemoryClosableChannel channel=new InMemoryClosableChannel();
    writeLogHeader(channel,expectedLogVersion,expectedTxId);
    long encodedLogVersions=channel.getLong();
    assertEquals(encodeLogVersion(expectedLogVersion),encodedLogVersions);
    byte logFormatVersion=decodeLogFormatVersion(encodedLogVersions);
    assertEquals(CURRENT_LOG_VERSION,logFormatVersion);
    long logVersion=decodeLogVersion(encodedLogVersions);
    assertEquals(expectedLogVersion,logVersion);
    long txId=channel.getLong();
    assertEquals(expectedTxId,txId);
  }
  @Test public void shouldWriteALogHeaderInTheGivenBuffer(){
    final ByteBuffer buffer=ByteBuffer.allocate(LOG_HEADER_SIZE);
    final ByteBuffer result=writeLogHeader(buffer,expectedLogVersion,expectedTxId);
    assertSame(buffer,result);
    long encodedLogVersions=result.getLong();
    assertEquals(encodeLogVersion(expectedLogVersion),encodedLogVersions);
    byte logFormatVersion=decodeLogFormatVersion(encodedLogVersions);
    assertEquals(CURRENT_LOG_VERSION,logFormatVersion);
    long logVersion=decodeLogVersion(encodedLogVersions);
    assertEquals(expectedLogVersion,logVersion);
    long txId=result.getLong();
    assertEquals(expectedTxId,txId);
  }
  @Test public void shouldWriteALogHeaderInAFile() throws IOException {
    final File file=testDirectory.file("WriteLogHeader");
    writeLogHeader(fileSystemRule.get(),file,expectedLogVersion,expectedTxId);
    final byte[] array=new byte[LOG_HEADER_SIZE];
    try (InputStream stream=fileSystemRule.get().openAsInputStream(file)){
      int read=stream.read(array);
      assertEquals(LOG_HEADER_SIZE,read);
    }
     final ByteBuffer result=ByteBuffer.wrap(array);
    long encodedLogVersions=result.getLong();
    assertEquals(encodeLogVersion(expectedLogVersion),encodedLogVersions);
    byte logFormatVersion=decodeLogFormatVersion(encodedLogVersions);
    assertEquals(CURRENT_LOG_VERSION,logFormatVersion);
    long logVersion=decodeLogVersion(encodedLogVersions);
    assertEquals(expectedLogVersion,logVersion);
    long txId=result.getLong();
    assertEquals(expectedTxId,txId);
  }
  @Test public void shouldWriteALogHeaderInAStoreChannel() throws IOException {
    final File file=testDirectory.file("WriteLogHeader");
    final StoreChannel channel=fileSystemRule.get().open(file,OpenMode.READ_WRITE);
    writeLogHeader(channel,expectedLogVersion,expectedTxId);
    channel.close();
    final byte[] array=new byte[LOG_HEADER_SIZE];
    try (InputStream stream=fileSystemRule.get().openAsInputStream(file)){
      int read=stream.read(array);
      assertEquals(LOG_HEADER_SIZE,read);
    }
     final ByteBuffer result=ByteBuffer.wrap(array);
    long encodedLogVersions=result.getLong();
    assertEquals(encodeLogVersion(expectedLogVersion),encodedLogVersions);
    byte logFormatVersion=decodeLogFormatVersion(encodedLogVersions);
    assertEquals(CURRENT_LOG_VERSION,logFormatVersion);
    long logVersion=decodeLogVersion(encodedLogVersions);
    assertEquals(expectedLogVersion,logVersion);
    long txId=result.getLong();
    assertEquals(expectedTxId,txId);
  }
}
