@ExtendWith(TestDirectoryExtension.class) class DataSourceManagerTest {
  @Inject private TestDirectory testDirectory;
  @Test void shouldCallListenersOnStart(){
    DataSourceManager manager=createDataSourceManager();
    DataSourceManager.Listener listener=mock(DataSourceManager.Listener.class);
    manager.register(mock(NeoStoreDataSource.class));
    manager.addListener(listener);
    manager.start();
    verify(listener).registered(any(NeoStoreDataSource.class));
  }
  @Test void shouldCallListenersWhenAddedIfManagerAlreadyStarted(){
    DataSourceManager manager=createDataSourceManager();
    DataSourceManager.Listener listener=mock(DataSourceManager.Listener.class);
    manager.register(mock(NeoStoreDataSource.class));
    manager.start();
    manager.addListener(listener);
    verify(listener).registered(any(NeoStoreDataSource.class));
  }
  @Test void shouldCallListenersOnDataSourceRegistrationIfManagerAlreadyStarted(){
    DataSourceManager manager=createDataSourceManager();
    DataSourceManager.Listener listener=mock(DataSourceManager.Listener.class);
    manager.addListener(listener);
    manager.start();
    manager.register(mock(NeoStoreDataSource.class));
    verify(listener).registered(any(NeoStoreDataSource.class));
  }
  @Test void shouldSupportMultipleStartStopCycles() throws Throwable {
    DataSourceManager manager=createDataSourceManager();
    NeoStoreDataSource dataSource=mock(NeoStoreDataSource.class);
    manager.register(dataSource);
    manager.init();
    manager.start();
    manager.stop();
    manager.start();
    verify(dataSource,times(2)).start();
  }
  @Test void provideAccessOnlyToActiveDatabase(){
    DataSourceManager manager=createDataSourceManager();
    NeoStoreDataSource dataSource1=mock(NeoStoreDataSource.class);
    NeoStoreDataSource dataSource2=mock(NeoStoreDataSource.class);
    when(dataSource1.getDatabaseLayout()).thenReturn(testDirectory.databaseLayout());
    when(dataSource2.getDatabaseLayout()).thenReturn(testDirectory.databaseLayout("somethingElse"));
    manager.register(dataSource1);
    manager.register(dataSource2);
    assertEquals(dataSource1,manager.getDataSource());
  }
  @Test void illegalStateWhenActiveDatabaseNotFound(){
    DataSourceManager manager=createDataSourceManager();
    assertThrows(IllegalStateException.class,manager::getDataSource);
  }
  private static DataSourceManager createDataSourceManager(){
    return new DataSourceManager(Config.defaults());
  }
}
