public class PageCacheLongArrayConcurrencyTest extends PageCacheNumberArrayConcurrencyTest {
  @Override protected Runnable wholeFileRacer(  NumberArray array,  int contestant){
    return new WholeFileRacer((PageCacheLongArray)array);
  }
  @Override protected Runnable fileRangeRacer(  NumberArray array,  int contestant){
    return new FileRangeRacer((PageCacheLongArray)array,contestant);
  }
  @Override protected PageCacheLongArray getNumberArray(  PagedFile file) throws IOException {
    return new PageCacheLongArray(file,COUNT,0,0);
  }
private class WholeFileRacer implements Runnable {
    private LongArray array;
    WholeFileRacer(    LongArray array){
      this.array=array;
    }
    @Override public void run(){
      for (int o=0; o < LAPS; o++) {
        for (long i=0; i < COUNT; i++) {
          array.set(i,i);
          assertEquals(i,array.get(i));
        }
      }
    }
  }
private class FileRangeRacer implements Runnable {
    private LongArray array;
    private int contestant;
    FileRangeRacer(    LongArray array,    int contestant){
      this.array=array;
      this.contestant=contestant;
    }
    @Override public void run(){
      for (int o=0; o < LAPS; o++) {
        for (long i=contestant; i < COUNT; i+=CONTESTANTS) {
          long value=random.nextLong();
          array.set(i,value);
          assertEquals(value,array.get(i));
        }
      }
    }
  }
}
