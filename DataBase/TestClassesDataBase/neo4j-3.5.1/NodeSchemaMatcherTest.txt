public class NodeSchemaMatcherTest {
  private static final int labelId1=10;
  private static final int labelId2=11;
  private static final int nonExistentLabelId=12;
  private static final int propId1=20;
  private static final int propId2=21;
  private static final int unIndexedPropId=22;
  private static final int nonExistentPropId=23;
  private static final int specialPropId=24;
  IndexDescriptor index1=forLabel(labelId1,propId1);
  IndexDescriptor index1_2=forLabel(labelId1,propId1,propId2);
  IndexDescriptor indexWithMissingProperty=forLabel(labelId1,propId1,nonExistentPropId);
  IndexDescriptor indexWithMissingLabel=forLabel(nonExistentLabelId,propId1,propId2);
  IndexDescriptor indexOnSpecialProperty=forLabel(labelId1,propId1,specialPropId);
  private StubNodeCursor node;
  @Before public void setup(){
    HashMap<Integer,Value> map=new HashMap<>();
    map.put(propId1,stringValue("hello"));
    map.put(propId2,stringValue("world"));
    map.put(unIndexedPropId,stringValue("!"));
    node=new StubNodeCursor(false);
    node.withNode(42,new long[]{labelId1},map);
    node.next();
  }
  @Test public void shouldMatchOnSingleProperty(){
    List<IndexDescriptor> matched=new ArrayList<>();
    NodeSchemaMatcher.onMatchingSchema(iterator(index1),node,new StubPropertyCursor(),unIndexedPropId,(schema,props) -> matched.add(schema));
    assertThat(matched,contains(index1));
  }
  @Test public void shouldMatchOnTwoProperties(){
    List<IndexDescriptor> matched=new ArrayList<>();
    NodeSchemaMatcher.onMatchingSchema(iterator(index1_2),node,new StubPropertyCursor(),unIndexedPropId,(schema,props) -> matched.add(schema));
    assertThat(matched,contains(index1_2));
  }
  @Test public void shouldNotMatchIfNodeIsMissingProperty(){
    List<IndexDescriptor> matched=new ArrayList<>();
    NodeSchemaMatcher.onMatchingSchema(iterator(indexWithMissingProperty),node,new StubPropertyCursor(),unIndexedPropId,(schema,props) -> matched.add(schema));
    assertThat(matched,empty());
  }
  @Test public void shouldNotMatchIfNodeIsMissingLabel(){
    List<IndexDescriptor> matched=new ArrayList<>();
    NodeSchemaMatcher.onMatchingSchema(iterator(indexWithMissingLabel),node,new StubPropertyCursor(),unIndexedPropId,(schema,props) -> matched.add(schema));
    assertThat(matched,empty());
  }
  @Test public void shouldMatchOnSpecialProperty(){
    List<IndexDescriptor> matched=new ArrayList<>();
    NodeSchemaMatcher.onMatchingSchema(iterator(indexOnSpecialProperty),node,new StubPropertyCursor(),specialPropId,(schema,props) -> matched.add(schema));
    assertThat(matched,contains(indexOnSpecialProperty));
  }
  @Test public void shouldMatchSeveralTimes(){
    List<IndexDescriptor> indexes=Arrays.asList(index1,index1,index1_2,index1_2);
    final List<IndexDescriptor> matched=new ArrayList<>();
    NodeSchemaMatcher.onMatchingSchema(indexes.iterator(),node,new StubPropertyCursor(),unIndexedPropId,(schema,props) -> matched.add(schema));
    assertThat(matched,equalTo(indexes));
  }
}
