public class XForwardFilterIT extends AbstractRestFunctionalTestBase {
  public static final String X_FORWARDED_HOST="X-Forwarded-Host";
  public static final String X_FORWARDED_PROTO="X-Forwarded-Proto";
  private Client client=Client.create();
  private static GraphDbHelper helper;
  @BeforeClass public static void setupServer(){
    FunctionalTestHelper functionalTestHelper=new FunctionalTestHelper(server());
    helper=functionalTestHelper.getGraphDbHelper();
  }
  @Before public void setupTheDatabase(){
    helper.createRelationship("RELATES_TO",helper.createNode(),helper.createNode());
  }
  @Test public void shouldUseXForwardedHostHeaderWhenPresent(){
    ClientResponse response=client.resource(getManageUri()).accept(APPLICATION_JSON).header(X_FORWARDED_HOST,"jimwebber.org").get(ClientResponse.class);
    String entity=response.getEntity(String.class);
    assertTrue(entity.contains("http://jimwebber.org"));
    assertFalse(entity.contains("http://localhost"));
  }
  @Test public void shouldUseXForwardedProtoHeaderWhenPresent(){
    ClientResponse response=client.resource(getManageUri()).accept(APPLICATION_JSON).header(X_FORWARDED_PROTO,"https").get(ClientResponse.class);
    String entity=response.getEntity(String.class);
    assertTrue(entity.contains("https://localhost"));
    assertFalse(entity.contains("http://localhost"));
  }
  @Test public void shouldPickFirstXForwardedHostHeaderValueFromCommaOrCommaAndSpaceSeparatedList(){
    ClientResponse response=client.resource(getManageUri()).accept(APPLICATION_JSON).header(X_FORWARDED_HOST,"jimwebber.org, kathwebber.com,neo4j.org").get(ClientResponse.class);
    String entity=response.getEntity(String.class);
    assertTrue(entity.contains("http://jimwebber.org"));
    assertFalse(entity.contains("http://localhost"));
  }
  @Test public void shouldUseBaseUriOnBadXForwardedHostHeader(){
    ClientResponse response=client.resource(getManageUri()).accept(APPLICATION_JSON).header(X_FORWARDED_HOST,":bad_URI").get(ClientResponse.class);
    String entity=response.getEntity(String.class);
    assertTrue(entity.contains(getServerUri()));
  }
  @Test public void shouldUseBaseUriIfFirstAddressInXForwardedHostHeaderIsBad(){
    ClientResponse response=client.resource(getManageUri()).accept(APPLICATION_JSON).header(X_FORWARDED_HOST,":bad_URI,good-host").get(ClientResponse.class);
    String entity=response.getEntity(String.class);
    assertTrue(entity.contains(getServerUri()));
  }
  @Test public void shouldUseBaseUriOnBadXForwardedProtoHeader(){
    ClientResponse response=client.resource(getManageUri()).accept(APPLICATION_JSON).header(X_FORWARDED_PROTO,"%%%DEFINITELY-NOT-A-PROTO!").get(ClientResponse.class);
    String entity=response.getEntity(String.class);
    assertTrue(entity.contains(getServerUri()));
  }
  @Test public void shouldUseXForwardedHostAndXForwardedProtoHeadersWhenPresent(){
    ClientResponse response=client.resource(getManageUri()).accept(APPLICATION_JSON).header(X_FORWARDED_HOST,"jimwebber.org").header(X_FORWARDED_PROTO,"https").get(ClientResponse.class);
    String entity=response.getEntity(String.class);
    assertTrue(entity.contains("https://jimwebber.org"));
    assertFalse(entity.contains(getServerUri()));
  }
  @Test public void shouldUseXForwardedHostAndXForwardedProtoHeadersInCypherResponseRepresentations(){
    String jsonString="{\"statements\" : [{ \"statement\": \"MATCH (n) RETURN n\", " + "\"resultDataContents\":[\"REST\"] }] }";
    ClientResponse response=client.resource(getServerUri() + "db/data/transaction").accept(APPLICATION_JSON).header(X_FORWARDED_HOST,"jimwebber.org:2354").header(X_FORWARDED_PROTO,"https").entity(jsonString,MediaType.APPLICATION_JSON_TYPE).post(ClientResponse.class);
    String entity=response.getEntity(String.class);
    assertTrue(entity.contains("https://jimwebber.org:2354"));
    assertFalse(entity.contains(getServerUri()));
  }
  private String getManageUri(){
    return getServerUri() + "db/manage";
  }
  private String getServerUri(){
    return server().baseUri().toString();
  }
}
