public class NettyServerTest {
  @Rule public ExpectedException exception=ExpectedException.none();
  @Test public void shouldGivePortConflictErrorWithPortNumberInIt() throws Throwable {
    int port=16000;
    try (ServerSocketChannel ignore=ServerSocketChannel.open().bind(new InetSocketAddress("localhost",port))){
      final ListenSocketAddress address=new ListenSocketAddress("localhost",port);
      exception.expect(PortBindException.class);
      Map<BoltConnector,NettyServer.ProtocolInitializer> initializersMap=genericMap(new BoltConnector("test"),protocolOnAddress(address));
      new NettyServer(new NamedThreadFactory("mythreads"),initializersMap,new ConnectorPortRegister(),NullLog.getInstance()).start();
    }
   }
  private NettyServer.ProtocolInitializer protocolOnAddress(  final ListenSocketAddress address){
    return new NettyServer.ProtocolInitializer(){
      @Override public ChannelInitializer<Channel> channelInitializer(){
        return new ChannelInitializer<Channel>(){
          @Override public void initChannel(          Channel ch){
          }
        }
;
      }
      @Override public ListenSocketAddress address(){
        return address;
      }
    }
;
  }
}
