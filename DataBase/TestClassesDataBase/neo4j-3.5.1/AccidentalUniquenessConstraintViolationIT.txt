@RunWith(Parameterized.class) public class AccidentalUniquenessConstraintViolationIT {
  private static final Label Foo=Label.label("Foo");
  private static final String BAR="bar";
  @Parameterized.Parameters public static Collection<Object[]> data(){
    Collection<Object[]> data=new ArrayList<>();
    data.add(array(42,41));
    data.add(array("a","b"));
    return data;
  }
  @Parameterized.Parameter public Object value1;
  @Parameterized.Parameter(1) public Object value2;
  @Rule public final DatabaseRule db=new ImpermanentDatabaseRule();
  @Test public void shouldApplyChangesWithIntermediateConstraintViolations() throws Exception {
    try (Transaction tx=db.beginTx()){
      db.schema().constraintFor(Foo).assertPropertyIsUnique(BAR).create();
      tx.success();
    }
     Node fourtyTwo;
    Node fourtyOne;
    try (Transaction tx=db.beginTx()){
      fourtyTwo=db.createNode(Foo);
      fourtyTwo.setProperty(BAR,value1);
      fourtyOne=db.createNode(Foo);
      fourtyOne.setProperty(BAR,value2);
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      fourtyOne.delete();
      fourtyTwo.setProperty(BAR,value2);
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      assertEquals(value2,fourtyTwo.getProperty(BAR));
      try {
        fourtyOne.getProperty(BAR);
        fail("Should be deleted");
      }
 catch (      NotFoundException e) {
      }
      tx.success();
      assertEquals(fourtyTwo,db.findNode(Foo,BAR,value2));
      assertNull(db.findNode(Foo,BAR,value1));
    }
   }
}
