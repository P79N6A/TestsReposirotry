private static class TxStateBuilder {
  Map<ValueTuple,MutableLongDiffSetsImpl> updates=new HashMap<>();
  TxStateBuilder withAdded(  long id,  Object... value){
    final ValueTuple valueTuple=ValueTuple.of((Object[])value);
    final MutableLongDiffSetsImpl changes=updates.computeIfAbsent(valueTuple,ignore -> new MutableLongDiffSetsImpl(OnHeapCollectionsFactory.INSTANCE));
    changes.add(id);
    return this;
  }
  TxStateBuilder withRemoved(  long id,  Object... value){
    final ValueTuple valueTuple=ValueTuple.of((Object[])value);
    final MutableLongDiffSetsImpl changes=updates.computeIfAbsent(valueTuple,ignore -> new MutableLongDiffSetsImpl(OnHeapCollectionsFactory.INSTANCE));
    changes.remove(id);
    return this;
  }
  ReadableTransactionState build(){
    final ReadableTransactionState mock=Mockito.mock(ReadableTransactionState.class);
    doReturn(new UnmodifiableMap<>(updates)).when(mock).getIndexUpdates(any(SchemaDescriptor.class));
    final TreeMap<ValueTuple,MutableLongDiffSetsImpl> sortedMap=new TreeMap<>(ValueTuple.COMPARATOR);
    sortedMap.putAll(updates);
    doReturn(sortedMap).when(mock).getSortedIndexUpdates(any(SchemaDescriptor.class));
    return mock;
  }
}
