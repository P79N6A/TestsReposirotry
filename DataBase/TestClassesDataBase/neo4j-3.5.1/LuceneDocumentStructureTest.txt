class LuceneDocumentStructureTest {
  @Test void stringWithMaximumLengthShouldBeAllowed(){
    String longestString=RandomStringUtils.randomAscii(IndexWriter.MAX_TERM_LENGTH);
    Document document=documentRepresentingProperties((long)123,longestString);
    assertEquals(longestString,document.getField(String.key(0)).stringValue());
  }
  @Test void shouldBuildDocumentRepresentingStringProperty(){
    Document document=documentRepresentingProperties((long)123,"hello");
    assertEquals("123",document.get(NODE_ID_KEY));
    assertEquals("hello",document.get(String.key(0)));
  }
  @Test void shouldBuildDocumentRepresentingMultipleStringProperties(){
    String[] values=new String[]{"hello","world"};
    Document document=documentRepresentingProperties(123,values);
    assertEquals("123",document.get(NODE_ID_KEY));
    assertThat(document.get(String.key(0)),equalTo(values[0]));
    assertThat(document.get(String.key(1)),equalTo(values[1]));
  }
  @Test void shouldBuildDocumentRepresentingMultiplePropertiesOfDifferentTypes(){
    Object[] values=new Object[]{"hello",789};
    Document document=documentRepresentingProperties(123,values);
    assertEquals("123",document.get(NODE_ID_KEY));
    assertThat(document.get(String.key(0)),equalTo("hello"));
    assertThat(document.get(Number.key(1)),equalTo("789.0"));
  }
  @Test void shouldBuildDocumentRepresentingBoolProperty(){
    Document document=documentRepresentingProperties((long)123,true);
    assertEquals("123",document.get(NODE_ID_KEY));
    assertEquals("true",document.get(Bool.key(0)));
  }
  @Test void shouldBuildDocumentRepresentingNumberProperty(){
    Document document=documentRepresentingProperties((long)123,12);
    assertEquals("123",document.get(NODE_ID_KEY));
    assertEquals(12.0,document.getField(Number.key(0)).numericValue().doubleValue(),0.001);
  }
  @Test void shouldBuildDocumentRepresentingArrayProperty(){
    Document document=documentRepresentingProperties((long)123,new Object[]{new Integer[]{1,2,3}});
    assertEquals("123",document.get(NODE_ID_KEY));
    assertEquals("D1.0|2.0|3.0|",document.get(Array.key(0)));
  }
  @Test void shouldBuildQueryRepresentingBoolProperty(){
    BooleanQuery booleanQuery=(BooleanQuery)newSeekQuery(true);
    ConstantScoreQuery constantScoreQuery=(ConstantScoreQuery)booleanQuery.clauses().get(0).getQuery();
    TermQuery query=(TermQuery)constantScoreQuery.getQuery();
    assertEquals("true",query.getTerm().text());
  }
  @Test void shouldBuildQueryRepresentingStringProperty(){
    BooleanQuery booleanQuery=(BooleanQuery)newSeekQuery("Characters");
    ConstantScoreQuery query=(ConstantScoreQuery)booleanQuery.clauses().get(0).getQuery();
    assertEquals("Characters",((TermQuery)query.getQuery()).getTerm().text());
  }
  @SuppressWarnings("unchecked") @Test void shouldBuildQueryRepresentingNumberProperty(){
    BooleanQuery booleanQuery=(BooleanQuery)newSeekQuery(12);
    ConstantScoreQuery constantScoreQuery=(ConstantScoreQuery)booleanQuery.clauses().get(0).getQuery();
    NumericRangeQuery<Double> query=(NumericRangeQuery<Double>)constantScoreQuery.getQuery();
    assertEquals(12.0,query.getMin(),0.001);
    assertEquals(12.0,query.getMax(),0.001);
  }
  @Test void shouldBuildQueryRepresentingArrayProperty(){
    BooleanQuery booleanQuery=(BooleanQuery)newSeekQuery(new Object[]{new Integer[]{1,2,3}});
    ConstantScoreQuery constantScoreQuery=(ConstantScoreQuery)booleanQuery.clauses().get(0).getQuery();
    TermQuery query=(TermQuery)constantScoreQuery.getQuery();
    assertEquals("D1.0|2.0|3.0|",query.getTerm().text());
  }
  @Test void shouldBuildQueryRepresentingMultipleProperties(){
    BooleanQuery booleanQuery=(BooleanQuery)newSeekQuery(true,"Characters",12,new Integer[]{1,2,3});
    ConstantScoreQuery boolScoreQuery=(ConstantScoreQuery)booleanQuery.clauses().get(0).getQuery();
    TermQuery boolTermQuery=(TermQuery)boolScoreQuery.getQuery();
    ConstantScoreQuery stringScoreQuery=(ConstantScoreQuery)booleanQuery.clauses().get(1).getQuery();
    TermQuery stringTermQuery=(TermQuery)stringScoreQuery.getQuery();
    ConstantScoreQuery numberScoreQuery=(ConstantScoreQuery)booleanQuery.clauses().get(2).getQuery();
    NumericRangeQuery<Double> numericRangeQuery=(NumericRangeQuery<Double>)numberScoreQuery.getQuery();
    ConstantScoreQuery arrayScoreQuery=(ConstantScoreQuery)booleanQuery.clauses().get(3).getQuery();
    TermQuery arrayTermQuery=(TermQuery)arrayScoreQuery.getQuery();
    assertEquals("true",boolTermQuery.getTerm().text());
    assertEquals("Characters",stringTermQuery.getTerm().text());
    assertEquals(12.0,numericRangeQuery.getMin(),0.001);
    assertEquals(12.0,numericRangeQuery.getMax(),0.001);
    assertEquals("D1.0|2.0|3.0|",arrayTermQuery.getTerm().text());
  }
  @Test void shouldBuildRangeSeekByNumberQueryForStrings(){
    NumericRangeQuery<Double> query=LuceneDocumentStructure.newInclusiveNumericRangeSeekQuery(12.0d,null);
    assertEquals("number",query.getField());
    assertEquals(12.0,query.getMin(),0.001);
    assertTrue(query.includesMin());
    assertNull(query.getMax());
    assertTrue(query.includesMax());
  }
  @Test void shouldBuildRangeSeekByStringQueryForStrings(){
    TermRangeQuery query=(TermRangeQuery)LuceneDocumentStructure.newRangeSeekByStringQuery("foo",false,null,true);
    assertEquals("string",query.getField());
    assertEquals("foo",query.getLowerTerm().utf8ToString());
    assertFalse(query.includesLower());
    assertNull(query.getUpperTerm());
    assertTrue(query.includesUpper());
  }
  @Test void shouldBuildWildcardQueries(){
    WildcardQuery query=(WildcardQuery)LuceneDocumentStructure.newWildCardStringQuery("foo");
    assertEquals("string",query.getField());
  }
  @Test void shouldBuildRangeSeekByPrefixQueryForStrings(){
    MultiTermQuery prefixQuery=(MultiTermQuery)LuceneDocumentStructure.newRangeSeekByPrefixQuery("Prefix");
    assertThat("Should contain term value",prefixQuery.toString(),containsString("Prefix"));
  }
  @Test void checkFieldUsageForUniquenessVerification(){
    assertFalse(useFieldForUniquenessVerification("id"));
    assertFalse(useFieldForUniquenessVerification("1number"));
    assertTrue(useFieldForUniquenessVerification("number"));
    assertFalse(useFieldForUniquenessVerification("1string"));
    assertFalse(useFieldForUniquenessVerification("10string"));
    assertTrue(useFieldForUniquenessVerification("string"));
  }
}
