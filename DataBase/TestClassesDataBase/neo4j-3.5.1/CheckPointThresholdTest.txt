public class CheckPointThresholdTest extends CheckPointThresholdTestSupport {
  @Test public void mustCreateThresholdThatTriggersAfterTransactionCount(){
    CheckPointThreshold threshold=createThreshold();
    threshold.initialize(1);
    assertFalse(threshold.isCheckPointingNeeded(intervalTx - 1,notTriggered));
    assertFalse(threshold.isCheckPointingNeeded(intervalTx,notTriggered));
    assertTrue(threshold.isCheckPointingNeeded(intervalTx + 1,triggered));
    verifyTriggered("count");
    verifyNoMoreTriggers();
  }
  @Test public void mustCreateThresholdThatTriggersAfterTime(){
    CheckPointThreshold threshold=createThreshold();
    threshold.initialize(1);
    clock.forward(intervalTime.toMillis(),MILLISECONDS);
    assertFalse(threshold.isCheckPointingNeeded(2,notTriggered));
    clock.forward(intervalTime.toMillis(),MILLISECONDS);
    assertTrue(threshold.isCheckPointingNeeded(4,triggered));
    verifyTriggered("time");
    verifyNoMoreTriggers();
  }
  @Test public void mustNotTriggerBeforeTimeWithTooFewCommittedTransactions(){
    withIntervalTime("100ms");
    CheckPointThreshold threshold=createThreshold();
    threshold.initialize(2);
    clock.forward(50,MILLISECONDS);
    assertFalse(threshold.isCheckPointingNeeded(42,notTriggered));
  }
  @Test public void mustTriggerWhenTimeThresholdIsReachedAndThereAreCommittedTransactions(){
    withIntervalTime("100ms");
    CheckPointThreshold threshold=createThreshold();
    threshold.initialize(2);
    clock.forward(199,MILLISECONDS);
    assertTrue(threshold.isCheckPointingNeeded(42,triggered));
    verifyTriggered("time");
    verifyNoMoreTriggers();
  }
  @Test public void mustNotTriggerWhenTimeThresholdIsReachedAndThereAreNoCommittedTransactions(){
    withIntervalTime("100ms");
    CheckPointThreshold threshold=createThreshold();
    threshold.initialize(42);
    clock.forward(199,MILLISECONDS);
    assertFalse(threshold.isCheckPointingNeeded(42,notTriggered));
    verifyNoMoreTriggers();
  }
  @Test public void mustNotTriggerPastTimeThresholdSinceLastCheckpointWithNoNewTransactions(){
    withIntervalTime("100ms");
    CheckPointThreshold threshold=createThreshold();
    threshold.initialize(2);
    clock.forward(199,MILLISECONDS);
    threshold.checkPointHappened(42);
    clock.forward(100,MILLISECONDS);
    assertFalse(threshold.isCheckPointingNeeded(42,notTriggered));
    verifyNoMoreTriggers();
  }
  @Test public void mustTriggerPastTimeThresholdSinceLastCheckpointWithNewTransactions(){
    withIntervalTime("100ms");
    CheckPointThreshold threshold=createThreshold();
    threshold.initialize(2);
    clock.forward(199,MILLISECONDS);
    threshold.checkPointHappened(42);
    clock.forward(100,MILLISECONDS);
    assertTrue(threshold.isCheckPointingNeeded(43,triggered));
    verifyTriggered("time");
    verifyNoMoreTriggers();
  }
  @Test public void mustNotTriggerOnTransactionCountWhenThereAreNoNewTransactions(){
    withIntervalTx(2);
    CheckPointThreshold threshold=createThreshold();
    threshold.initialize(2);
    assertFalse(threshold.isCheckPointingNeeded(2,notTriggered));
  }
  @Test public void mustNotTriggerOnTransactionCountWhenCountIsBellowThreshold(){
    withIntervalTx(2);
    CheckPointThreshold threshold=createThreshold();
    threshold.initialize(2);
    assertFalse(threshold.isCheckPointingNeeded(3,notTriggered));
  }
  @Test public void mustTriggerOnTransactionCountWhenCountIsAtThreshold(){
    withIntervalTx(2);
    CheckPointThreshold threshold=createThreshold();
    threshold.initialize(2);
    assertTrue(threshold.isCheckPointingNeeded(4,triggered));
    verifyTriggered("count");
    verifyNoMoreTriggers();
  }
  @Test public void mustNotTriggerOnTransactionCountAtThresholdIfCheckPointAlreadyHappened(){
    withIntervalTx(2);
    CheckPointThreshold threshold=createThreshold();
    threshold.initialize(2);
    threshold.checkPointHappened(4);
    assertFalse(threshold.isCheckPointingNeeded(4,notTriggered));
  }
  @Test public void mustNotTriggerWhenTransactionCountIsWithinThresholdSinceLastTrigger(){
    withIntervalTx(2);
    CheckPointThreshold threshold=createThreshold();
    threshold.initialize(2);
    threshold.checkPointHappened(4);
    assertFalse(threshold.isCheckPointingNeeded(5,notTriggered));
  }
  @Test public void mustTriggerOnTransactionCountWhenCountIsAtThresholdSinceLastCheckPoint(){
    withIntervalTx(2);
    CheckPointThreshold threshold=createThreshold();
    threshold.initialize(2);
    threshold.checkPointHappened(4);
    assertTrue(threshold.isCheckPointingNeeded(6,triggered));
    verifyTriggered("count");
    verifyNoMoreTriggers();
  }
  @SuppressWarnings("ConstantConditions") @Test public void timeBasedThresholdMustSuggestSchedulingFrequency(){
    assertThat(createThreshold().checkFrequencyMillis(),is(DEFAULT_CHECKING_FREQUENCY_MILLIS));
    withIntervalTime("100ms");
    assertThat(createThreshold().checkFrequencyMillis(),is(100L));
  }
}
