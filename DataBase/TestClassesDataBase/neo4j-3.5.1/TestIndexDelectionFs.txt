public class TestIndexDelectionFs {
  private static GraphDatabaseAPI db;
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  @Before public void doBefore(){
    db=(GraphDatabaseAPI)new TestGraphDatabaseFactory().newEmbeddedDatabase(testDirectory.databaseDir());
  }
  @After public void doAfter(){
    db.shutdown();
  }
  @Test public void indexDeleteShouldDeleteDirectory(){
    String indexName="index";
    String otherIndexName="other-index";
    File indexBaseDir=new File(testDirectory.databaseDir(),"index");
    File pathToLuceneIndex=LuceneDataSource.getFileDirectory(indexBaseDir,new IndexIdentifier(IndexEntityType.Node,indexName));
    File pathToOtherLuceneIndex=LuceneDataSource.getFileDirectory(indexBaseDir,new IndexIdentifier(IndexEntityType.Node,otherIndexName));
    Index<Node> index;
    try (Transaction tx=db.beginTx()){
      index=db.index().forNodes(indexName);
      Index<Node> otherIndex=db.index().forNodes(otherIndexName);
      Node node=db.createNode();
      index.add(node,"someKey","someValue");
      otherIndex.add(node,"someKey","someValue");
      tx.success();
    }
     assertTrue(pathToLuceneIndex.exists());
    assertTrue(pathToOtherLuceneIndex.exists());
    try (Transaction tx=db.beginTx()){
      index.delete();
      assertTrue(pathToLuceneIndex.exists());
      assertTrue(pathToOtherLuceneIndex.exists());
      tx.success();
    }
     assertFalse(pathToLuceneIndex.exists());
    assertTrue(pathToOtherLuceneIndex.exists());
  }
}
