class PrettyPrinterTest {
  @Test void shouldHandleNodeReference(){
    NodeReference node=VirtualValues.node(42L);
    PrettyPrinter printer=new PrettyPrinter();
    node.writeTo(printer);
    assertThat(printer.value(),equalTo("(id=42)"));
  }
  @Test void shouldHandleNodeValue(){
    NodeValue node=VirtualValues.nodeValue(42L,Values.stringArray("L1","L2","L3"),props("foo",intValue(42),"bar",list(intValue(1337),stringValue("baz"))));
    PrettyPrinter printer=new PrettyPrinter();
    node.writeTo(printer);
    assertThat(printer.value(),equalTo("(id=42 :L1:L2:L3 {bar: [1337, \"baz\"], foo: 42})"));
  }
  @Test void shouldHandleNodeValueWithoutLabels(){
    NodeValue node=VirtualValues.nodeValue(42L,Values.stringArray(),props("foo",intValue(42),"bar",list(intValue(1337),stringValue("baz"))));
    PrettyPrinter printer=new PrettyPrinter();
    node.writeTo(printer);
    assertThat(printer.value(),equalTo("(id=42 {bar: [1337, \"baz\"], foo: 42})"));
  }
  @Test void shouldHandleNodeValueWithoutProperties(){
    NodeValue node=VirtualValues.nodeValue(42L,Values.stringArray("L1","L2","L3"),EMPTY_MAP);
    PrettyPrinter printer=new PrettyPrinter();
    node.writeTo(printer);
    assertThat(printer.value(),equalTo("(id=42 :L1:L2:L3)"));
  }
  @Test void shouldHandleNodeValueWithoutLabelsNorProperties(){
    NodeValue node=VirtualValues.nodeValue(42L,Values.stringArray(),EMPTY_MAP);
    PrettyPrinter printer=new PrettyPrinter();
    node.writeTo(printer);
    assertThat(printer.value(),equalTo("(id=42)"));
  }
  @Test void shouldHandleEdgeReference(){
    RelationshipReference rel=VirtualValues.relationship(42L);
    PrettyPrinter printer=new PrettyPrinter();
    rel.writeTo(printer);
    assertThat(printer.value(),equalTo("-[id=42]-"));
  }
  @Test void shouldHandleEdgeValue(){
    NodeValue startNode=VirtualValues.nodeValue(1L,Values.stringArray("L"),EMPTY_MAP);
    NodeValue endNode=VirtualValues.nodeValue(2L,Values.stringArray("L"),EMPTY_MAP);
    RelationshipValue rel=VirtualValues.relationshipValue(42L,startNode,endNode,stringValue("R"),props("foo",intValue(42),"bar",list(intValue(1337),stringValue("baz"))));
    PrettyPrinter printer=new PrettyPrinter();
    rel.writeTo(printer);
    assertThat(printer.value(),equalTo("-[id=42 :R {bar: [1337, \"baz\"], foo: 42}]-"));
  }
  @Test void shouldHandleEdgeValueWithoutProperties(){
    NodeValue startNode=VirtualValues.nodeValue(1L,Values.stringArray("L"),EMPTY_MAP);
    NodeValue endNode=VirtualValues.nodeValue(2L,Values.stringArray("L"),EMPTY_MAP);
    RelationshipValue rel=VirtualValues.relationshipValue(42L,startNode,endNode,stringValue("R"),EMPTY_MAP);
    PrettyPrinter printer=new PrettyPrinter();
    rel.writeTo(printer);
    assertThat(printer.value(),equalTo("-[id=42 :R]-"));
  }
  @Test void shouldHandleEdgeValueWithoutLabelsNorProperties(){
    NodeValue node=VirtualValues.nodeValue(42L,Values.stringArray(),EMPTY_MAP);
    PrettyPrinter printer=new PrettyPrinter();
    node.writeTo(printer);
    assertThat(printer.value(),equalTo("(id=42)"));
  }
  @Test void shouldHandlePaths(){
    NodeValue startNode=VirtualValues.nodeValue(1L,Values.stringArray("L"),EMPTY_MAP);
    NodeValue endNode=VirtualValues.nodeValue(2L,Values.stringArray("L"),EMPTY_MAP);
    RelationshipValue rel=VirtualValues.relationshipValue(42L,startNode,endNode,stringValue("R"),EMPTY_MAP);
    PathValue path=VirtualValues.path(new NodeValue[]{startNode,endNode},new RelationshipValue[]{rel});
    PrettyPrinter printer=new PrettyPrinter();
    path.writeTo(printer);
    assertThat(printer.value(),equalTo("(id=1 :L)-[id=42 :R]->(id=2 :L)"));
  }
  @Test void shouldHandleMaps(){
    PrettyPrinter printer=new PrettyPrinter();
    MapValue mapValue=props("k1",intValue(42));
    mapValue.writeTo(printer);
    assertThat(printer.value(),equalTo("{k1: 42}"));
  }
  @Test void shouldHandleLists(){
    PrettyPrinter printer=new PrettyPrinter();
    ListValue list=VirtualValues.list(stringValue("foo"),byteValue((byte)42));
    list.writeTo(printer);
    assertThat(printer.value(),equalTo("[\"foo\", 42]"));
  }
  @Test void shouldHandleArrays(){
    PrettyPrinter printer=new PrettyPrinter();
    TextArray array=Values.stringArray("a","b","c");
    array.writeTo(printer);
    assertThat(printer.value(),equalTo("[\"a\", \"b\", \"c\"]"));
  }
  @Test void shouldHandleBooleans(){
    Value array=Values.booleanArray(new boolean[]{true,false,true});
    PrettyPrinter printer=new PrettyPrinter();
    array.writeTo(printer);
    assertThat(printer.value(),equalTo("[true, false, true]"));
  }
  @Test void shouldHandleByteArrays(){
    Value array=Values.byteArray(new byte[]{2,3,42});
    PrettyPrinter printer=new PrettyPrinter();
    array.writeTo(printer);
    assertThat(printer.value(),equalTo("[2, 3, 42]"));
  }
  @Test void shouldHandleNull(){
    PrettyPrinter printer=new PrettyPrinter();
    Values.NO_VALUE.writeTo(printer);
    assertThat(printer.value(),equalTo("<null>"));
  }
  @Test void shouldHandlePoints(){
    PointValue pointValue=Values.pointValue(CoordinateReferenceSystem.Cartesian,11d,12d);
    PrettyPrinter printer=new PrettyPrinter();
    pointValue.writeTo(printer);
    assertThat(printer.value(),equalTo("{geometry: {type: \"Point\", coordinates: [11.0, 12.0], " + "crs: {type: link, properties: " + "{href: \"http://spatialreference.org/ref/sr-org/7203/\", code: "+ "7203}}}}"));
  }
  @Test void shouldBeAbleToUseAnyQuoteMark(){
    TextValue hello=stringValue("(ツ)");
    PrettyPrinter printer=new PrettyPrinter("__");
    hello.writeTo(printer);
    assertThat(printer.value(),equalTo("__(ツ)__"));
  }
  @Test void shouldHandleDuration(){
    DurationValue duration=duration(12,45,90,9911);
    PrettyPrinter printer=new PrettyPrinter();
    duration.writeTo(printer);
    assertEquals("{duration: {months: 12, days: 45, seconds: 90, nanos: 9911}}",printer.value());
  }
  @Test void shouldHandleDate(){
    DateValue date=date(1991,9,24);
    PrettyPrinter printer=new PrettyPrinter();
    date.writeTo(printer);
    assertEquals("{date: \"1991-09-24\"}",printer.value());
  }
  @Test void shouldHandleLocalTime(){
    LocalTimeValue localTime=localTime(18,39,24,111222777);
    PrettyPrinter printer=new PrettyPrinter();
    localTime.writeTo(printer);
    assertEquals("{localTime: \"18:39:24.111222777\"}",printer.value());
  }
  @Test void shouldHandleTime(){
    TimeValue time=time(11,19,11,123456789,ZoneOffset.ofHoursMinutes(-9,-30));
    PrettyPrinter printer=new PrettyPrinter();
    time.writeTo(printer);
    assertEquals("{time: \"11:19:11.123456789-09:30\"}",printer.value());
  }
  @Test void shouldHandleLocalDateTime(){
    LocalDateTimeValue localDateTime=localDateTime(2015,8,8,8,40,29,999888111);
    PrettyPrinter printer=new PrettyPrinter();
    localDateTime.writeTo(printer);
    assertEquals("{localDateTime: \"2015-08-08T08:40:29.999888111\"}",printer.value());
  }
  @Test void shouldHandleDateTimeWithTimeZoneId(){
    DateTimeValue datetime=datetime(2045,2,7,12,00,40,999888999,"Europe/London");
    PrettyPrinter printer=new PrettyPrinter();
    datetime.writeTo(printer);
    assertEquals("{datetime: \"2045-02-07T12:00:40.999888999Z[Europe/London]\"}",printer.value());
  }
  @Test void shouldHandleDateTimeWithTimeZoneOffset(){
    DateTimeValue datetime=datetime(1988,4,19,10,12,59,112233445,ZoneOffset.ofHoursMinutes(3,15));
    PrettyPrinter printer=new PrettyPrinter();
    datetime.writeTo(printer);
    assertEquals("{datetime: \"1988-04-19T10:12:59.112233445+03:15\"}",printer.value());
  }
  private MapValue props(  Object... keyValue){
    String[] keys=new String[keyValue.length / 2];
    AnyValue[] values=new AnyValue[keyValue.length / 2];
    for (int i=0; i < keyValue.length; i++) {
      if (i % 2 == 0) {
        keys[i / 2]=(String)keyValue[i];
      }
 else {
        values[i / 2]=(AnyValue)keyValue[i];
      }
    }
    return VirtualValues.map(keys,values);
  }
}
