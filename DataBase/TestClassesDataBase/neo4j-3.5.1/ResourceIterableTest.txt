class ResourceIterableTest {
  @Test void streamShouldCloseSingleOnCompleted(){
    AtomicBoolean closed=new AtomicBoolean(false);
    ResourceIterator<Integer> resourceIterator=newResourceIterator(iterator(new Integer[]{1,2,3}),() -> closed.set(true));
    ResourceIterable<Integer> iterable=() -> resourceIterator;
    List<Integer> result=iterable.stream().collect(Collectors.toList());
    assertEquals(asList(1,2,3),result);
    assertTrue(closed.get());
  }
  @Test void streamShouldCloseMultipleOnCompleted(){
    AtomicInteger closed=new AtomicInteger();
    Resource resource=closed::incrementAndGet;
    ResourceIterator<Integer> resourceIterator=newResourceIterator(iterator(new Integer[]{1,2,3}),resource,resource);
    ResourceIterable<Integer> iterable=() -> resourceIterator;
    List<Integer> result=iterable.stream().collect(Collectors.toList());
    assertEquals(asList(1,2,3),result);
    assertEquals(2,closed.get(),"two calls to close");
  }
}
