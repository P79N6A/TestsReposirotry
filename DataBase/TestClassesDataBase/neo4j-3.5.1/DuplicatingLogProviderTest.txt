class DuplicatingLogProviderTest {
  @Test void shouldReturnSameLoggerForSameClass(){
    DuplicatingLogProvider logProvider=new DuplicatingLogProvider();
    DuplicatingLog log=logProvider.getLog(getClass());
    assertThat(logProvider.getLog(DuplicatingLogProviderTest.class),sameInstance(log));
  }
  @Test void shouldReturnSameLoggerForSameContext(){
    DuplicatingLogProvider logProvider=new DuplicatingLogProvider();
    DuplicatingLog log=logProvider.getLog("test context");
    assertThat(logProvider.getLog("test context"),sameInstance(log));
  }
  @Test void shouldRemoveLogProviderFromDuplication(){
    AssertableLogProvider logProvider1=new AssertableLogProvider();
    AssertableLogProvider logProvider2=new AssertableLogProvider();
    DuplicatingLogProvider logProvider=new DuplicatingLogProvider(logProvider1,logProvider2);
    Log log=logProvider.getLog(getClass());
    log.info("When the going gets weird");
    assertTrue(logProvider.remove(logProvider1));
    log.info("The weird turn pro");
    logProvider1.assertExactly(AssertableLogProvider.inLog(getClass()).info("When the going gets weird"));
    logProvider2.assertExactly(AssertableLogProvider.inLog(getClass()).info("When the going gets weird"),AssertableLogProvider.inLog(getClass()).info("The weird turn pro"));
  }
}
