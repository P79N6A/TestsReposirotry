@ExtendWith({DefaultFileSystemExtension.class,TestDirectoryExtension.class}) class DiagnosticsReporterTest {
  @Inject private TestDirectory testDirectory;
  @Inject private DefaultFileSystemAbstraction fileSystem;
  @Test void dumpFiles() throws Exception {
    DiagnosticsReporter reporter=setupDiagnosticsReporter();
    Path destination=testDirectory.file("logs.zip").toPath();
    reporter.dump(Collections.singleton("logs"),destination,mock(DiagnosticsReporterProgress.class),true);
    verifyContent(destination);
  }
  @Test void shouldContinueAfterError() throws Exception {
    DiagnosticsReporter reporter=new DiagnosticsReporter();
    MyProvider myProvider=new MyProvider(fileSystem);
    reporter.registerOfflineProvider(myProvider);
    myProvider.addFile("logs/a.txt",createNewFileWithContent("a.txt","file a"));
    Path destination=testDirectory.file("logs.zip").toPath();
    Set<String> classifiers=new HashSet<>();
    classifiers.add("logs");
    classifiers.add("fail");
    try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
      PrintStream out=new PrintStream(baos);
      NonInteractiveProgress progress=new NonInteractiveProgress(out,false);
      reporter.dump(classifiers,destination,progress,true);
      assertThat(baos.toString(),is(String.format("1/2 fail.txt%n" + "....................  20%%%n" + "..........%n"+ "Error: Step failed%n"+ "2/2 logs/a.txt%n"+ "....................  20%%%n"+ "....................  40%%%n"+ "....................  60%%%n"+ "....................  80%%%n"+ ".................... 100%%%n%n")));
    }
     URI uri=URI.create("jar:file:" + destination.toAbsolutePath().toUri().getRawPath());
    try (FileSystem fs=FileSystems.newFileSystem(uri,Collections.emptyMap())){
      List<String> fileA=Files.readAllLines(fs.getPath("logs/a.txt"));
      assertEquals(1,fileA.size());
      assertEquals("file a",fileA.get(0));
    }
   }
  @Test void supportPathsWithSpaces() throws IOException {
    DiagnosticsReporter reporter=setupDiagnosticsReporter();
    Path destination=testDirectory.file("log files.zip").toPath();
    reporter.dump(Collections.singleton("logs"),destination,mock(DiagnosticsReporterProgress.class),true);
    verifyContent(destination);
  }
  private File createNewFileWithContent(  String name,  String content) throws IOException {
    Path file=testDirectory.file(name).toPath();
    Files.write(file,content.getBytes());
    return file.toFile();
  }
  private DiagnosticsReporter setupDiagnosticsReporter() throws IOException {
    DiagnosticsReporter reporter=new DiagnosticsReporter();
    MyProvider myProvider=new MyProvider(fileSystem);
    reporter.registerOfflineProvider(myProvider);
    myProvider.addFile("logs/a.txt",createNewFileWithContent("a.txt","file a"));
    myProvider.addFile("logs/b.txt",createNewFileWithContent("b.txt","file b"));
    return reporter;
  }
  private static void verifyContent(  Path destination) throws IOException {
    URI uri=URI.create("jar:file:" + destination.toAbsolutePath().toUri().getRawPath());
    try (FileSystem fs=FileSystems.newFileSystem(uri,Collections.emptyMap())){
      List<String> fileA=Files.readAllLines(fs.getPath("logs/a.txt"));
      assertEquals(1,fileA.size());
      assertEquals("file a",fileA.get(0));
      List<String> fileB=Files.readAllLines(fs.getPath("logs/b.txt"));
      assertEquals(1,fileB.size());
      assertEquals("file b",fileB.get(0));
    }
   }
private static class MyProvider extends DiagnosticsOfflineReportProvider {
    private final FileSystemAbstraction fs;
    private final List<DiagnosticsReportSource> logFiles=new ArrayList<>();
    MyProvider(    FileSystemAbstraction fs){
      super("my-provider","logs");
      this.fs=fs;
    }
    void addFile(    String destination,    File file){
      logFiles.add(newDiagnosticsFile(destination,fs,file));
    }
    @Override public void init(    FileSystemAbstraction fs,    Config config,    File storeDirectory){
    }
    @Override public List<DiagnosticsReportSource> provideSources(    Set<String> classifiers){
      List<DiagnosticsReportSource> sources=new ArrayList<>();
      if (classifiers.contains("fail")) {
        sources.add(new FailingSource());
      }
      if (classifiers.contains("logs")) {
        sources.addAll(logFiles);
      }
      return sources;
    }
  }
private static class FailingSource implements DiagnosticsReportSource {
    @Override public String destinationPath(){
      return "fail.txt";
    }
    @Override public void addToArchive(    Path archiveDestination,    DiagnosticsReporterProgress progress){
      progress.percentChanged(30);
      throw new RuntimeException("You had it coming...");
    }
    @Override public long estimatedSize(    DiagnosticsReporterProgress progress){
      return 0;
    }
  }
}
