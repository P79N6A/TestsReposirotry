class FullyCoveringRecordKeys implements RecordKeys {
  public static final RecordKeys INSTANCE=new FullyCoveringRecordKeys();
  @Override public RecordKey<NodeRecord> node(){
    return (written,read) -> {
      assertEquals(written.getNextProp(),read.getNextProp());
      assertEquals(written.getNextRel(),read.getNextRel());
      assertEquals(written.getLabelField(),read.getLabelField());
      assertEquals(written.isDense(),read.isDense());
    }
;
  }
  @Override public RecordKey<RelationshipRecord> relationship(){
    return (written,read) -> {
      assertEquals(written.getNextProp(),read.getNextProp());
      assertEquals(written.getFirstNode(),read.getFirstNode());
      assertEquals(written.getSecondNode(),read.getSecondNode());
      assertEquals(written.getType(),read.getType());
      assertEquals(written.getFirstPrevRel(),read.getFirstPrevRel());
      assertEquals(written.getFirstNextRel(),read.getFirstNextRel());
      assertEquals(written.getSecondPrevRel(),read.getSecondPrevRel());
      assertEquals(written.getSecondNextRel(),read.getSecondNextRel());
      assertEquals(written.isFirstInFirstChain(),read.isFirstInFirstChain());
      assertEquals(written.isFirstInSecondChain(),read.isFirstInSecondChain());
    }
;
  }
  @Override public RecordKey<PropertyRecord> property(){
    return new RecordKey<PropertyRecord>(){
      @Override public void assertRecordsEquals(      PropertyRecord written,      PropertyRecord read){
        assertEquals(written.getPrevProp(),read.getPrevProp());
        assertEquals(written.getNextProp(),read.getNextProp());
        assertEquals(written.isNodeSet(),read.isNodeSet());
        if (written.isNodeSet()) {
          assertEquals(written.getNodeId(),read.getNodeId());
        }
 else {
          assertEquals(written.getRelId(),read.getRelId());
        }
        assertEquals(written.numberOfProperties(),read.numberOfProperties());
        Iterator<PropertyBlock> writtenBlocks=written.iterator();
        Iterator<PropertyBlock> readBlocks=read.iterator();
        while (writtenBlocks.hasNext()) {
          assertTrue(readBlocks.hasNext());
          assertBlocksEquals(writtenBlocks.next(),readBlocks.next());
        }
      }
      private void assertBlocksEquals(      PropertyBlock written,      PropertyBlock read){
        assertEquals(written.getKeyIndexId(),read.getKeyIndexId());
        assertEquals(written.getSize(),read.getSize());
        assertTrue(written.hasSameContentsAs(read));
        assertArrayEquals(written.getValueBlocks(),read.getValueBlocks());
      }
    }
;
  }
  @Override public RecordKey<RelationshipGroupRecord> relationshipGroup(){
    return (written,read) -> {
      assertEquals(written.getType(),read.getType());
      assertEquals(written.getFirstOut(),read.getFirstOut());
      assertEquals(written.getFirstIn(),read.getFirstIn());
      assertEquals(written.getFirstLoop(),read.getFirstLoop());
      assertEquals(written.getNext(),read.getNext());
      assertEquals(written.getOwningNode(),read.getOwningNode());
    }
;
  }
  @Override public RecordKey<RelationshipTypeTokenRecord> relationshipTypeToken(){
    return (written,read) -> assertEquals(written.getNameId(),read.getNameId());
  }
  @Override public RecordKey<PropertyKeyTokenRecord> propertyKeyToken(){
    return (written,read) -> {
      assertEquals(written.getNameId(),read.getNameId());
      assertEquals(written.getPropertyCount(),read.getPropertyCount());
    }
;
  }
  @Override public RecordKey<LabelTokenRecord> labelToken(){
    return (written,read) -> assertEquals(written.getNameId(),read.getNameId());
  }
  @Override public RecordKey<DynamicRecord> dynamic(){
    return (written,read) -> {
      assertEquals(written.getLength(),read.getLength());
      assertEquals(written.getNextBlock(),read.getNextBlock());
      assertArrayEquals(written.getData(),read.getData());
      assertEquals(written.isStartRecord(),read.isStartRecord());
    }
;
  }
}
