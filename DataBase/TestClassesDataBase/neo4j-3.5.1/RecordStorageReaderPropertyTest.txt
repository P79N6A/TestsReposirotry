/** 
 * Test read access to committed properties.
 */
public class RecordStorageReaderPropertyTest extends RecordStorageReaderTestBase {
  @Test public void shouldGetAllNodeProperties(){
    String longString="AlalalalalongAlalalalalongAlalalalalongAlalalalalongAlalalalalongAlalalalalongAlalalalalongAlalalalalong";
    Object[] properties={longString,createNew(String.class),createNew(long.class),createNew(int.class),createNew(byte.class),createNew(short.class),createNew(boolean.class),createNew(char.class),createNew(float.class),createNew(double.class),array(0,String.class),array(0,long.class),array(0,int.class),array(0,byte.class),array(0,short.class),array(0,boolean.class),array(0,char.class),array(0,float.class),array(0,double.class),array(1,String.class),array(1,long.class),array(1,int.class),array(1,byte.class),array(1,short.class),array(1,boolean.class),array(1,char.class),array(1,float.class),array(1,double.class),array(256,String.class),array(256,long.class),array(256,int.class),array(256,byte.class),array(256,short.class),array(256,boolean.class),array(256,char.class),array(256,float.class),array(256,double.class)};
    for (    Object value : properties) {
      long nodeId=createLabeledNode(db,singletonMap("prop",value),label1).getId();
      try (StorageNodeCursor node=storageReader.allocateNodeCursor()){
        node.single(nodeId);
        assertTrue(node.next());
        try (StoragePropertyCursor props=storageReader.allocatePropertyCursor()){
          props.init(node.propertiesReference());
          if (props.next()) {
            Value propVal=props.propertyValue();
            assertTrue(propVal + ".equals(" + value+ ")",propVal.equals(Values.of(value)));
          }
 else {
            fail();
          }
        }
       }
     }
  }
  private Object array(  int length,  Class<?> componentType){
    Object array=Array.newInstance(componentType,length);
    for (int i=0; i < length; i++) {
      Array.set(array,i,createNew(componentType));
    }
    return array;
  }
  private Object createNew(  Class<?> type){
    if (type == int.class) {
      return 666;
    }
    if (type == long.class) {
      return 17L;
    }
    if (type == double.class) {
      return 6.28318530717958647692d;
    }
    if (type == float.class) {
      return 3.14f;
    }
    if (type == short.class) {
      return (short)8733;
    }
    if (type == byte.class) {
      return (byte)123;
    }
    if (type == boolean.class) {
      return false;
    }
    if (type == char.class) {
      return 'Z';
    }
    if (type == String.class) {
      return "hello world";
    }
    throw new IllegalArgumentException(type.getName());
  }
}
