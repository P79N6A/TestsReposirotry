public class TestShortArray {
  private static final int DEFAULT_PAYLOAD_SIZE=PropertyType.getPayloadSize();
  @Test public void canEncodeSomeSampleArraysWithDefaultPayloadSize(){
    assertCanEncodeAndDecodeToSameValue(new boolean[]{true,false,true,true,true,true,true,true,true,true,false,true});
    assertCanEncodeAndDecodeToSameValue(new byte[]{-1,-10,43,127,0,4,2,3,56,47,67,43});
    assertCanEncodeAndDecodeToSameValue(new short[]{1,2,3,45,5,6,7});
    assertCanEncodeAndDecodeToSameValue(new int[]{1,2,3,4,5,6,7});
    assertCanEncodeAndDecodeToSameValue(new long[]{1,2,3,4,5,6,7});
    assertCanEncodeAndDecodeToSameValue(new float[]{0.34f,0.21f});
    assertCanEncodeAndDecodeToSameValue(new long[]{1L << 63,1L << 63});
    assertCanEncodeAndDecodeToSameValue(new long[]{1L << 63,1L << 63,1L << 63});
    assertCanEncodeAndDecodeToSameValue(new byte[]{0,0,0,0,0,0,0,0,0,0,0,0,0});
    assertCanEncodeAndDecodeToSameValue(new long[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
  }
  @Test public void testCannotEncodeMarginal(){
    assertCanNotEncode(new long[]{1L << 15,1,1,1,1,1,1,1,1,1,1,1,1,1});
  }
  @Test public void canEncodeBiggerArraysWithBiggerPayloadSize(){
    int[] intArray=intArray(10,2600);
    assertCanEncodeAndDecodeToSameValue(intArray,32);
  }
  private void assertCanNotEncode(  Object intArray){
    assertCanNotEncode(intArray,DEFAULT_PAYLOAD_SIZE);
  }
  private void assertCanNotEncode(  Object intArray,  int payloadSize){
    assertFalse(ShortArray.encode(0,intArray,new PropertyBlock(),payloadSize));
  }
  private int[] intArray(  int count,  int stride){
    int[] result=new int[count];
    for (int i=0; i < count; i++) {
      result[i]=i * stride;
    }
    return result;
  }
  private void assertCanEncodeAndDecodeToSameValue(  Object value){
    assertCanEncodeAndDecodeToSameValue(value,PropertyType.getPayloadSize());
  }
  private void assertCanEncodeAndDecodeToSameValue(  Object value,  int payloadSize){
    PropertyBlock target=new PropertyBlock();
    boolean encoded=ShortArray.encode(0,value,target,payloadSize);
    assertTrue(encoded);
    assertEquals(Values.of(value),ShortArray.decode(target));
  }
}
