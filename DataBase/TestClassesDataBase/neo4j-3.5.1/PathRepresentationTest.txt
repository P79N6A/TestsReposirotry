public class PathRepresentationTest {
  @Test public void shouldHaveLength(){
    assertNotNull(pathrep().length());
  }
  @Test public void shouldHaveStartNodeLink(){
    assertUriMatches(NODE_URI_PATTERN,pathrep().startNode());
  }
  @Test public void shouldHaveEndNodeLink(){
    assertUriMatches(NODE_URI_PATTERN,pathrep().endNode());
  }
  @Test public void shouldHaveNodeList(){
    assertNotNull(pathrep().nodes());
  }
  @Test public void shouldHaveRelationshipList(){
    assertNotNull(pathrep().relationships());
  }
  @Test public void shouldHaveDirectionList(){
    assertNotNull(pathrep().directions());
  }
  @Test public void shouldSerialiseToMap(){
    Map<String,Object> repr=serialize(pathrep());
    assertNotNull(repr);
    verifySerialisation(repr);
  }
  private PathRepresentation<Path> pathrep(){
    Node a=node(0,properties());
    Node b=node(1,properties());
    Node c=node(2,properties());
    Node d=node(3,properties());
    Relationship ab=relationship(17,a,"LOVES",b);
    Relationship cb=relationship(18,c,"HATES",b);
    Relationship cd=relationship(19,c,"KNOWS",d);
    return new PathRepresentation<>(path(a,link(ab,b),link(cb,c),link(cd,d)));
  }
  public static void verifySerialisation(  Map<String,Object> pathrep){
    assertNotNull(pathrep.get("length"));
    int length=Integer.parseInt(pathrep.get("length").toString());
    assertUriMatches(NODE_URI_PATTERN,pathrep.get("start").toString());
    assertUriMatches(NODE_URI_PATTERN,pathrep.get("end").toString());
    Object nodes=pathrep.get("nodes");
    assertTrue(nodes instanceof List);
    List nodeList=(List)nodes;
    assertEquals(length + 1,nodeList.size());
    for (    Object node : nodeList) {
      assertUriMatches(NODE_URI_PATTERN,node.toString());
    }
    Object rels=pathrep.get("relationships");
    assertTrue(rels instanceof List);
    List relList=(List)rels;
    assertEquals(length,relList.size());
    for (    Object rel : relList) {
      assertUriMatches(RELATIONSHIP_URI_PATTERN,rel.toString());
    }
    Object directions=pathrep.get("directions");
    assertTrue(directions instanceof List);
    List directionList=(List)directions;
    assertEquals(length,directionList.size());
    assertEquals("->",directionList.get(0).toString());
    assertEquals("<-",directionList.get(1).toString());
    assertEquals("->",directionList.get(2).toString());
  }
}
