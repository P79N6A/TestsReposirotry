public class SchemaIndexIT extends AbstractRestFunctionalTestBase {
  @Documented("Create index.\n" + "\n" + "This will start a background job in the database that will create and populate the index.\n"+ "You can check the status of your index by listing all the indexes for the relevant label.") @Test @GraphDescription.Graph(nodes={}) public void create_index() throws JsonParseException {
    data.get();
    String labelName=labels.newInstance();
    String propertyKey=properties.newInstance();
    Map<String,Object> definition=map("property_keys",singletonList(propertyKey));
    String result=gen.get().expectedStatus(200).payload(createJsonFrom(definition)).post(getSchemaIndexLabelUri(labelName)).entity();
    Map<String,Object> serialized=jsonToMap(result);
    Map<String,Object> index=new HashMap<>();
    index.put("label",labelName);
    index.put("labels",singletonList(labelName));
    index.put("property_keys",singletonList(propertyKey));
    assertThat(serialized,equalTo(index));
  }
  @Documented("List indexes for a label.") @Test @GraphDescription.Graph(nodes={}) public void get_indexes_for_label() throws Exception {
    data.get();
    String labelName=labels.newInstance();
    String propertyKey=properties.newInstance();
    createIndex(labelName,propertyKey);
    Map<String,Object> definition=map("property_keys",singletonList(propertyKey));
    List<Map<String,Object>> serializedList=retryOnStillPopulating(() -> gen.get().expectedStatus(200).payload(createJsonFrom(definition)).get(getSchemaIndexLabelUri(labelName)).entity());
    Map<String,Object> index=new HashMap<>();
    index.put("label",labelName);
    index.put("labels",singletonList(labelName));
    index.put("property_keys",singletonList(propertyKey));
    assertThat(serializedList,hasItem(index));
  }
  private List<Map<String,Object>> retryOnStillPopulating(  Callable<String> callable) throws Exception {
    long endTime=System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(1);
    List<Map<String,Object>> serializedList;
    do {
      String result=callable.call();
      serializedList=jsonToList(result);
      if (System.currentTimeMillis() > endTime) {
        fail("Indexes didn't populate correctly, last result '" + result + "'");
      }
    }
 while (stillPopulating(serializedList));
    return serializedList;
  }
  private boolean stillPopulating(  List<Map<String,Object>> serializedList){
    for (    Map<String,Object> map : serializedList) {
      if (map.containsKey("population_progress")) {
        return true;
      }
    }
    return false;
  }
  @SuppressWarnings("unchecked") @Documented("Get all indexes.") @Test @GraphDescription.Graph(nodes={}) public void get_indexes() throws Exception {
    data.get();
    String labelName1=labels.newInstance();
    String propertyKey1=properties.newInstance();
    String labelName2=labels.newInstance();
    String propertyKey2=properties.newInstance();
    createIndex(labelName1,propertyKey1);
    createIndex(labelName2,propertyKey2);
    List<Map<String,Object>> serializedList=retryOnStillPopulating(() -> gen.get().expectedStatus(200).get(getSchemaIndexUri()).entity());
    Map<String,Object> index1=new HashMap<>();
    index1.put("label",labelName1);
    index1.put("labels",singletonList(labelName1));
    index1.put("property_keys",singletonList(propertyKey1));
    Map<String,Object> index2=new HashMap<>();
    index2.put("label",labelName2);
    index2.put("labels",singletonList(labelName2));
    index2.put("property_keys",singletonList(propertyKey2));
    assertThat(serializedList,hasItems(index1,index2));
  }
  @Documented("Drop index") @Test @GraphDescription.Graph(nodes={}) public void drop_index(){
    data.get();
    String labelName=labels.newInstance();
    String propertyKey=properties.newInstance();
    IndexDefinition schemaIndex=createIndex(labelName,propertyKey);
    assertThat(Neo4jMatchers.getIndexes(graphdb(),label(labelName)),containsOnly(schemaIndex));
    gen.get().expectedStatus(204).delete(getSchemaIndexLabelPropertyUri(labelName,propertyKey)).entity();
    assertThat(Neo4jMatchers.getIndexes(graphdb(),label(labelName)),not(containsOnly(schemaIndex)));
  }
  /** 
 * Create an index for a label and property key which already exists.
 */
  @Test public void create_existing_index(){
    String labelName=labels.newInstance();
    String propertyKey=properties.newInstance();
    createIndex(labelName,propertyKey);
    Map<String,Object> definition=map("property_keys",singletonList(propertyKey));
    gen.get().expectedStatus(409).payload(createJsonFrom(definition)).post(getSchemaIndexLabelUri(labelName));
  }
  @Test public void drop_non_existent_index(){
    String labelName=labels.newInstance();
    String propertyKey=properties.newInstance();
    gen.get().expectedStatus(404).delete(getSchemaIndexLabelPropertyUri(labelName,propertyKey));
  }
  @Test public void create_compound_index(){
    Map<String,Object> definition=map("property_keys",asList(properties.newInstance(),properties.newInstance()));
    gen.get().expectedStatus(200).payload(createJsonFrom(definition)).post(getSchemaIndexLabelUri(labels.newInstance()));
  }
  private IndexDefinition createIndex(  String labelName,  String propertyKey){
    try (Transaction tx=graphdb().beginTx()){
      IndexDefinition indexDefinition=graphdb().schema().indexFor(label(labelName)).on(propertyKey).create();
      tx.success();
      return indexDefinition;
    }
   }
  private final Factory<String> labels=UniqueStrings.withPrefix("label");
  private final Factory<String> properties=UniqueStrings.withPrefix("property");
}
