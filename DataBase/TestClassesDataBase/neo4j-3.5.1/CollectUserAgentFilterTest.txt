public class CollectUserAgentFilterTest {
  private final RecentK<String> agents=new RecentK<>(10);
  private final FilterChain filterChain=mock(FilterChain.class);
  private final CollectUserAgentFilter filter=new CollectUserAgentFilter(agents);
  @Rule public SuppressOutput suppressOutput=suppressAll();
  @Test public void shouldRecordASingleUserAgent() throws IOException, ServletException {
    filter.doFilter(request("the-agent"),null,filterChain);
    assertThat(agents.recentItems(),hasItem("the-agent"));
  }
  @Test public void shouldOnlyRecordTheFirstFieldOfTheUserAgentString() throws IOException, ServletException {
    filter.doFilter(request("the-agent other-info"),null,filterChain);
    assertThat(agents.recentItems(),hasItem("the-agent"));
  }
  @Test public void shouldRecordMultipleUserAgents() throws IOException, ServletException {
    filter.doFilter(request("agent1"),null,filterChain);
    filter.doFilter(request("agent2"),null,filterChain);
    assertThat(agents.recentItems(),hasItems("agent1","agent2"));
  }
  @Test public void shouldNotReportDuplicates() throws IOException, ServletException {
    filter.doFilter(request("the-agent"),null,filterChain);
    filter.doFilter(request("the-agent"),null,filterChain);
    assertThat(agents.recentItems(),hasSize(1));
  }
  @Test public void shouldCopeIfThereIsNoUserAgentHeader() throws IOException, ServletException {
    filter.doFilter(request(null),null,filterChain);
    assertThat(agents.recentItems(),hasSize(0));
  }
  @Test public void shouldSwallowAnyExceptionsThrownByTheRequest() throws IOException, ServletException {
    HttpServletRequest request=mock(HttpServletRequest.class);
    when(request.getHeader(anyString())).thenThrow(new RuntimeException());
    filter.doFilter(request,null,filterChain);
  }
  @Test public void shouldReturnTheRequest() throws IOException, ServletException {
    ServletRequest original=request("the-agent");
    filter.doFilter(original,null,filterChain);
    verify(filterChain).doFilter(original,null);
  }
  private static ServletRequest request(  String userAgent){
    HttpServletRequest request=mock(HttpServletRequest.class);
    when(request.getHeader("User-Agent")).thenReturn(userAgent);
    return request;
  }
}
