public class AutoIndexWithNonDefaultConfigurationThroughRESTAPIIT extends ExclusiveServerTestBase {
  private static CommunityNeoServer server;
  private static FunctionalTestHelper functionalTestHelper;
  @ClassRule public static TemporaryFolder staticFolder=new TemporaryFolder();
  @Rule public TestData<RESTRequestGenerator> gen=TestData.producedThrough(RESTRequestGenerator.PRODUCER);
  @BeforeClass public static void allocateServer() throws IOException {
    server=CommunityServerBuilder.serverOnRandomPorts().usingDataDir(staticFolder.getRoot().getAbsolutePath()).withAutoIndexingEnabledForNodes("foo","bar").build();
    server.start();
    functionalTestHelper=new FunctionalTestHelper(server);
  }
  @Before public void cleanTheDatabase(){
    ServerHelper.cleanTheDatabase(server);
  }
  @AfterClass public static void stopServer(){
    server.stop();
  }
  /** 
 * Create an auto index for nodes with specific configuration.
 */
  @Test public void shouldCreateANodeAutoIndexWithGivenFullTextConfiguration(){
    String responseBody=gen.get().expectedStatus(201).payload("{\"name\":\"node_auto_index\", \"config\":{\"type\":\"fulltext\",\"provider\":\"lucene\"}}").post(functionalTestHelper.nodeIndexUri()).entity();
    assertThat(responseBody,containsString("\"type\" : \"fulltext\""));
  }
  /** 
 * Create an auto index for relationships with specific configuration.
 */
  @Test public void shouldCreateARelationshipAutoIndexWithGivenFullTextConfiguration(){
    String responseBody=gen.get().expectedStatus(201).payload("{\"name\":\"relationship_auto_index\", \"config\":{\"type\":\"fulltext\"," + "\"provider\":\"lucene\"}}").post(functionalTestHelper.relationshipIndexUri()).entity();
    assertThat(responseBody,containsString("\"type\" : \"fulltext\""));
  }
}
