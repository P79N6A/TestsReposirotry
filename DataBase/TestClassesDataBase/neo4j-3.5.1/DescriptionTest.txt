public class DescriptionTest {
  private static GraphDatabaseService graphdb;
  @BeforeClass public static void startDb(){
    graphdb=new TestGraphDatabaseFactory().newImpermanentDatabaseBuilder().newGraphDatabase();
  }
  @AfterClass public static void stopDb(){
    if (graphdb != null) {
      graphdb.shutdown();
    }
    graphdb=null;
  }
  @Test public void canGetBeanDescriptionFromMBeanInterface() throws Exception {
    assertEquals(Kernel.class.getAnnotation(Description.class).value(),kernelMBeanInfo().getDescription());
  }
  @Test public void canGetMethodDescriptionFromMBeanInterface() throws Exception {
    for (    MBeanAttributeInfo attr : kernelMBeanInfo().getAttributes()) {
      try {
        assertEquals(Kernel.class.getMethod("get" + attr.getName()).getAnnotation(Description.class).value(),attr.getDescription());
      }
 catch (      NoSuchMethodException ignored) {
        assertEquals(Kernel.class.getMethod("is" + attr.getName()).getAnnotation(Description.class).value(),attr.getDescription());
      }
    }
  }
  private MBeanInfo kernelMBeanInfo() throws Exception {
    Kernel kernel=((GraphDatabaseAPI)graphdb).getDependencyResolver().resolveDependency(JmxKernelExtension.class).getSingleManagementBean(Kernel.class);
    ObjectName query=kernel.getMBeanQuery();
    Hashtable<String,String> properties=new Hashtable<>(query.getKeyPropertyList());
    properties.put("name",Kernel.NAME);
    return getPlatformMBeanServer().getMBeanInfo(new ObjectName(query.getDomain(),properties));
  }
}
