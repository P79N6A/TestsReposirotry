public abstract class InitialUserTest {
  @Rule public EphemeralFileSystemRule fsRule=new EphemeralFileSystemRule();
  protected Config config;
  protected UserRepository users;
  protected abstract AuthManager authManager();
  @Test public void shouldCreateDefaultUserIfNoneExist() throws Throwable {
    authManager().start();
    final User user=users.getUserByName("neo4j");
    assertNotNull(user);
    assertTrue(user.credentials().matchesPassword("neo4j"));
    assertTrue(user.passwordChangeRequired());
  }
  @Test public void shouldLoadInitialUserIfNoneExist() throws Throwable {
    FileUserRepository initialUserRepository=CommunitySecurityModule.getInitialUserRepository(config,NullLogProvider.getInstance(),fsRule.get());
    initialUserRepository.start();
    initialUserRepository.create(new User.Builder("neo4j",LegacyCredential.forPassword("123")).withRequiredPasswordChange(false).build());
    initialUserRepository.shutdown();
    authManager().start();
    final User user=users.getUserByName("neo4j");
    assertNotNull(user);
    assertTrue(user.credentials().matchesPassword("123"));
    assertFalse(user.passwordChangeRequired());
  }
  @Test public void shouldLoadInitialUserIfNoneExistEvenWithSamePassword() throws Throwable {
    FileUserRepository initialUserRepository=CommunitySecurityModule.getInitialUserRepository(config,NullLogProvider.getInstance(),fsRule.get());
    initialUserRepository.start();
    initialUserRepository.create(new User.Builder("neo4j",LegacyCredential.forPassword("neo4j")).withRequiredPasswordChange(false).build());
    initialUserRepository.shutdown();
    authManager().start();
    final User user=users.getUserByName("neo4j");
    assertNotNull(user);
    assertTrue(user.credentials().matchesPassword("neo4j"));
    assertFalse(user.passwordChangeRequired());
  }
  @Test public void shouldNotAddInitialUserIfUsersExist() throws Throwable {
    FileUserRepository initialUserRepository=CommunitySecurityModule.getInitialUserRepository(config,NullLogProvider.getInstance(),fsRule.get());
    initialUserRepository.start();
    initialUserRepository.create(newUser("initUser","123",false));
    initialUserRepository.shutdown();
    users.start();
    users.create(newUser("oldUser","321",false));
    users.shutdown();
    authManager().start();
    final User initUser=users.getUserByName("initUser");
    assertNull(initUser);
    final User oldUser=users.getUserByName("oldUser");
    assertNotNull(oldUser);
    assertTrue(oldUser.credentials().matchesPassword("321"));
    assertFalse(oldUser.passwordChangeRequired());
  }
  @Test public void shouldNotUpdateUserIfInitialUserExist() throws Throwable {
    FileUserRepository initialUserRepository=CommunitySecurityModule.getInitialUserRepository(config,NullLogProvider.getInstance(),fsRule.get());
    initialUserRepository.start();
    initialUserRepository.create(newUser("oldUser","newPassword",false));
    initialUserRepository.shutdown();
    users.start();
    users.create(newUser("oldUser","oldPassword",true));
    users.shutdown();
    authManager().start();
    final User oldUser=users.getUserByName("oldUser");
    assertNotNull(oldUser);
    assertTrue(oldUser.credentials().matchesPassword("oldPassword"));
    assertTrue(oldUser.passwordChangeRequired());
  }
  protected User newUser(  String userName,  String password,  boolean pwdChange){
    return new User.Builder(userName,LegacyCredential.forPassword(password)).withRequiredPasswordChange(pwdChange).build();
  }
}
