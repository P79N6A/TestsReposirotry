public class LockManagerImplTest {
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Test public void shouldAllowGetReadWriteLocks(){
    LockResource node1=new LockResource(ResourceTypes.NODE,1L);
    LockResource node2=new LockResource(ResourceTypes.NODE,2L);
    LockTransaction lockTransaction=new LockTransaction();
    LockManagerImpl lockManager=createLockManager();
    assertTrue(lockManager.getReadLock(LockTracer.NONE,node1,lockTransaction));
    assertTrue(lockManager.getReadLock(LockTracer.NONE,node2,lockTransaction));
    assertTrue(lockManager.getWriteLock(LockTracer.NONE,node2,lockTransaction));
    lockManager.releaseReadLock(node1,lockTransaction);
    lockManager.releaseReadLock(node2,lockTransaction);
    lockManager.releaseWriteLock(node2,lockTransaction);
    int lockCount=countLocks(lockManager);
    assertEquals(0,lockCount);
  }
  @Test public void shouldNotBePossibleReleaseNotExistingLock(){
    LockResource node1=new LockResource(ResourceTypes.NODE,1L);
    LockTransaction lockTransaction=new LockTransaction();
    LockManagerImpl lockManager=createLockManager();
    expectedException.expect(LockNotFoundException.class);
    expectedException.expectMessage("Lock not found for: ");
    lockManager.releaseReadLock(node1,lockTransaction);
  }
  @Test public void shouldCleanupNotUsedLocks(){
    LockResource node=new LockResource(ResourceTypes.NODE,1L);
    LockTransaction lockTransaction=new LockTransaction();
    LockManagerImpl lockManager=createLockManager();
    lockManager.getWriteLock(LockTracer.NONE,node,lockTransaction);
    assertTrue(lockManager.tryReadLock(node,lockTransaction));
    assertEquals(1,countLocks(lockManager));
    lockManager.releaseWriteLock(node,lockTransaction);
    assertEquals(1,countLocks(lockManager));
    lockManager.releaseReadLock(node,lockTransaction);
    assertEquals(0,countLocks(lockManager));
  }
  @Test public void shouldReleaseNotAcquiredLocks(){
    LockResource node=new LockResource(ResourceTypes.NODE,1L);
    LockTransaction lockTransaction=new LockTransaction();
    RWLock rwLock=Mockito.mock(RWLock.class);
    LockManagerImpl lockManager=new MockedLockLockManager(new RagManager(),rwLock);
    lockManager.tryReadLock(node,lockTransaction);
    assertEquals(0,countLocks(lockManager));
  }
  private LockManagerImpl createLockManager(){
    return new LockManagerImpl(new RagManager(),Config.defaults(),Clocks.systemClock());
  }
  private int countLocks(  LockManagerImpl lockManager){
    final int[] counter=new int[1];
    lockManager.accept(element -> {
      counter[0]++;
      return false;
    }
);
    return counter[0];
  }
private class MockedLockLockManager extends LockManagerImpl {
    private RWLock lock;
    MockedLockLockManager(    RagManager ragManager,    RWLock lock){
      super(ragManager,Config.defaults(),Clocks.systemClock());
      this.lock=lock;
    }
    @Override protected RWLock createLock(    LockResource resource){
      return lock;
    }
  }
}
