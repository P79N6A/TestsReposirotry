public class NeoStoreTransactionApplierTest {
  private final NeoStores neoStores=mock(NeoStores.class);
  private final IndexingService indexingService=mock(IndexingService.class);
  @SuppressWarnings("unchecked") private final Supplier<LabelScanWriter> labelScanStore=mock(Supplier.class);
  private final CacheAccessBackDoor cacheAccess=mock(CacheAccessBackDoor.class);
  private final LockService lockService=mock(LockService.class);
  private final MetaDataStore metaDataStore=mock(MetaDataStore.class);
  private final NodeStore nodeStore=mock(NodeStore.class);
  private final RelationshipStore relationshipStore=mock(RelationshipStore.class);
  private final PropertyStore propertyStore=mock(PropertyStore.class);
  private final RelationshipGroupStore relationshipGroupStore=mock(RelationshipGroupStore.class);
  private final RelationshipTypeTokenStore relationshipTypeTokenStore=mock(RelationshipTypeTokenStore.class);
  private final LabelTokenStore labelTokenStore=mock(LabelTokenStore.class);
  private final PropertyKeyTokenStore propertyKeyTokenStore=mock(PropertyKeyTokenStore.class);
  private final SchemaStore schemaStore=mock(SchemaStore.class);
  private final DynamicArrayStore dynamicLabelStore=mock(DynamicArrayStore.class);
  private final long transactionId=55555;
  private final DynamicRecord one=DynamicRecord.dynamicRecord(1,true);
  private final DynamicRecord two=DynamicRecord.dynamicRecord(2,true);
  private final DynamicRecord three=DynamicRecord.dynamicRecord(3,true);
  private final WorkSync<Supplier<LabelScanWriter>,LabelUpdateWork> labelScanStoreSynchronizer=new WorkSync<>(labelScanStore);
  private final TransactionToApply transactionToApply=mock(TransactionToApply.class);
  private final WorkSync<IndexingUpdateService,IndexUpdatesWork> indexUpdatesSync=new WorkSync<>(indexingService);
  @Before public void setup(){
    when(neoStores.getMetaDataStore()).thenReturn(metaDataStore);
    when(neoStores.getNodeStore()).thenReturn(nodeStore);
    when(neoStores.getRelationshipStore()).thenReturn(relationshipStore);
    when(neoStores.getPropertyStore()).thenReturn(propertyStore);
    when(neoStores.getRelationshipGroupStore()).thenReturn(relationshipGroupStore);
    when(neoStores.getRelationshipTypeTokenStore()).thenReturn(relationshipTypeTokenStore);
    when(neoStores.getLabelTokenStore()).thenReturn(labelTokenStore);
    when(neoStores.getPropertyKeyTokenStore()).thenReturn(propertyKeyTokenStore);
    when(neoStores.getSchemaStore()).thenReturn(schemaStore);
    when(nodeStore.getDynamicLabelStore()).thenReturn(dynamicLabelStore);
    when(lockService.acquireNodeLock(anyLong(),any())).thenReturn(LockService.NO_LOCK);
    when(lockService.acquireRelationshipLock(anyLong(),any())).thenReturn(LockService.NO_LOCK);
    when(transactionToApply.transactionId()).thenReturn(transactionId);
  }
  @Test public void shouldApplyNodeCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final NodeRecord before=new NodeRecord(11);
    before.setLabelField(42,asList(one,two));
    final NodeRecord after=new NodeRecord(12);
    after.setInUse(true);
    after.setLabelField(42,asList(one,two,three));
    final Command.NodeCommand command=new Command.NodeCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(lockService,times(1)).acquireNodeLock(command.getKey(),LockService.LockType.WRITE_LOCK);
    verify(nodeStore,times(1)).updateRecord(after);
  }
  @Test public void shouldApplyNodeCommandToTheStoreAndInvalidateTheCache() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final NodeRecord before=new NodeRecord(11);
    before.setLabelField(42,asList(one,two));
    final NodeRecord after=new NodeRecord(12);
    after.setInUse(false);
    after.setLabelField(42,asList(one,two,three));
    final Command.NodeCommand command=new Command.NodeCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(lockService,times(1)).acquireNodeLock(command.getKey(),LockService.LockType.WRITE_LOCK);
    verify(nodeStore,times(1)).updateRecord(after);
  }
  @Test public void shouldApplyNodeCommandToTheStoreInRecoveryMode() throws Exception {
    final BatchTransactionApplier applier=newApplier(true);
    final NodeRecord before=new NodeRecord(11);
    before.setLabelField(42,asList(one,two));
    final NodeRecord after=new NodeRecord(12);
    after.setInUse(true);
    after.setLabelField(42,asList(one,two,three));
    final Command.NodeCommand command=new Command.NodeCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(lockService,times(1)).acquireNodeLock(command.getKey(),LockService.LockType.WRITE_LOCK);
    verify(nodeStore,times(1)).setHighestPossibleIdInUse(after.getId());
    verify(nodeStore,times(1)).updateRecord(after);
    verify(dynamicLabelStore,times(1)).setHighestPossibleIdInUse(three.getId());
  }
  @Test public void shouldInvalidateTheCacheWhenTheNodeBecomesDense() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final NodeRecord before=new NodeRecord(11);
    before.setLabelField(42,singletonList(one));
    before.setInUse(true);
    before.setDense(false);
    final NodeRecord after=new NodeRecord(12);
    after.setInUse(true);
    after.setDense(true);
    after.setLabelField(42,asList(one,two,three));
    final Command.NodeCommand command=new Command.NodeCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(lockService,times(1)).acquireNodeLock(command.getKey(),LockService.LockType.WRITE_LOCK);
    verify(nodeStore,times(1)).updateRecord(after);
  }
  @Test public void shouldApplyRelationshipCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final RelationshipRecord before=new RelationshipRecord(12);
    final RelationshipRecord record=new RelationshipRecord(12,3,4,5);
    record.setInUse(true);
    final Command command=new Command.RelationshipCommand(before,record);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(relationshipStore,times(1)).updateRecord(record);
  }
  @Test public void shouldApplyRelationshipCommandToTheStoreAndInvalidateTheCache() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final RelationshipRecord before=new RelationshipRecord(12);
    final RelationshipRecord record=new RelationshipRecord(12,3,4,5);
    record.setInUse(false);
    final Command command=new Command.RelationshipCommand(before,record);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(relationshipStore,times(1)).updateRecord(record);
  }
  @Test public void shouldApplyRelationshipCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplier(true);
    final RelationshipRecord before=new RelationshipRecord(12);
    final RelationshipRecord record=new RelationshipRecord(12,3,4,5);
    record.setInUse(true);
    final Command command=new Command.RelationshipCommand(before,record);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(relationshipStore,times(1)).setHighestPossibleIdInUse(record.getId());
    verify(relationshipStore,times(1)).updateRecord(record);
  }
  @Test public void shouldApplyNodePropertyCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final PropertyRecord before=new PropertyRecord(11);
    final PropertyRecord after=new PropertyRecord(12);
    after.setNodeId(42);
    final Command command=new Command.PropertyCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(lockService,times(1)).acquireNodeLock(42,LockService.LockType.WRITE_LOCK);
    verify(propertyStore,times(1)).updateRecord(after);
  }
  @Test public void shouldApplyNodePropertyCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplier(true);
    final PropertyRecord before=new PropertyRecord(11);
    final PropertyRecord after=new PropertyRecord(12);
    after.setNodeId(42);
    final Command command=new Command.PropertyCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(lockService,times(1)).acquireNodeLock(42,LockService.LockType.WRITE_LOCK);
    verify(propertyStore,times(1)).setHighestPossibleIdInUse(after.getId());
    verify(propertyStore,times(1)).updateRecord(after);
  }
  @Test public void shouldApplyRelPropertyCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final PropertyRecord before=new PropertyRecord(11);
    final PropertyRecord after=new PropertyRecord(12);
    after.setRelId(42);
    final Command command=new Command.PropertyCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(propertyStore,times(1)).updateRecord(after);
  }
  @Test public void shouldApplyRelPropertyCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplier(true);
    final PropertyRecord before=new PropertyRecord(11);
    final PropertyRecord after=new PropertyRecord(12);
    after.setRelId(42);
    final Command command=new Command.PropertyCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(propertyStore,times(1)).setHighestPossibleIdInUse(12);
    verify(propertyStore,times(1)).updateRecord(after);
  }
  @Test public void shouldApplyRelationshipGroupCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final RelationshipGroupRecord before=new RelationshipGroupRecord(42,1);
    final RelationshipGroupRecord after=new RelationshipGroupRecord(42,1,2,3,4,5,6,true);
    final Command command=new Command.RelationshipGroupCommand(before,after);
    final boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(relationshipGroupStore,times(1)).updateRecord(after);
  }
  @Test public void shouldApplyRelationshipGroupCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplier(true);
    final RelationshipGroupRecord before=new RelationshipGroupRecord(42,1);
    final RelationshipGroupRecord after=new RelationshipGroupRecord(42,1,2,3,4,5,6,true);
    final Command command=new Command.RelationshipGroupCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(relationshipGroupStore,times(1)).setHighestPossibleIdInUse(after.getId());
    verify(relationshipGroupStore,times(1)).updateRecord(after);
  }
  @Test public void shouldApplyRelationshipTypeTokenCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final RelationshipTypeTokenRecord before=new RelationshipTypeTokenRecord(42);
    final RelationshipTypeTokenRecord after=new RelationshipTypeTokenRecord(42);
    after.setInUse(true);
    after.setNameId(323);
    final Command command=new RelationshipTypeTokenCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(relationshipTypeTokenStore,times(1)).updateRecord(after);
  }
  @Test public void shouldApplyRelationshipTypeTokenCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplier(true);
    final RelationshipTypeTokenRecord before=new RelationshipTypeTokenRecord(42);
    final RelationshipTypeTokenRecord after=new RelationshipTypeTokenRecord(42);
    after.setInUse(true);
    after.setNameId(323);
    final Command.RelationshipTypeTokenCommand command=new Command.RelationshipTypeTokenCommand(before,after);
    final NamedToken token=new NamedToken("token",21);
    when(relationshipTypeTokenStore.getToken((int)command.getKey())).thenReturn(token);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(relationshipTypeTokenStore,times(1)).setHighestPossibleIdInUse(after.getId());
    verify(relationshipTypeTokenStore,times(1)).updateRecord(after);
    verify(cacheAccess,times(1)).addRelationshipTypeToken(token);
  }
  @Test public void shouldApplyLabelTokenCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final LabelTokenRecord before=new LabelTokenRecord(42);
    final LabelTokenRecord after=new LabelTokenRecord(42);
    after.setInUse(true);
    after.setNameId(323);
    final Command command=new LabelTokenCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(labelTokenStore,times(1)).updateRecord(after);
  }
  @Test public void shouldApplyLabelTokenCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplier(true);
    final LabelTokenRecord before=new LabelTokenRecord(42);
    final LabelTokenRecord after=new LabelTokenRecord(42);
    after.setInUse(true);
    after.setNameId(323);
    final Command.LabelTokenCommand command=new Command.LabelTokenCommand(before,after);
    final NamedToken token=new NamedToken("token",21);
    when(labelTokenStore.getToken((int)command.getKey())).thenReturn(token);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(labelTokenStore,times(1)).setHighestPossibleIdInUse(after.getId());
    verify(labelTokenStore,times(1)).updateRecord(after);
    verify(cacheAccess,times(1)).addLabelToken(token);
  }
  @Test public void shouldApplyPropertyKeyTokenCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final PropertyKeyTokenRecord before=new PropertyKeyTokenRecord(42);
    final PropertyKeyTokenRecord after=new PropertyKeyTokenRecord(42);
    after.setInUse(true);
    after.setNameId(323);
    final Command command=new PropertyKeyTokenCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(propertyKeyTokenStore,times(1)).updateRecord(after);
  }
  @Test public void shouldApplyPropertyKeyTokenCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplier(true);
    final PropertyKeyTokenRecord before=new PropertyKeyTokenRecord(42);
    final PropertyKeyTokenRecord after=new PropertyKeyTokenRecord(42);
    after.setInUse(true);
    after.setNameId(323);
    final Command.PropertyKeyTokenCommand command=new Command.PropertyKeyTokenCommand(before,after);
    final NamedToken token=new NamedToken("token",21);
    when(propertyKeyTokenStore.getToken((int)command.getKey())).thenReturn(token);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(propertyKeyTokenStore,times(1)).setHighestPossibleIdInUse(after.getId());
    verify(propertyKeyTokenStore,times(1)).updateRecord(after);
    verify(cacheAccess,times(1)).addPropertyKeyToken(token);
  }
  @Test public void shouldApplyCreateIndexRuleSchemaRuleCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplierFacade(newApplier(false),newIndexApplier());
    final DynamicRecord record=DynamicRecord.dynamicRecord(21,true);
    record.setCreated();
    final Collection<DynamicRecord> recordsAfter=singletonList(record);
    final StoreIndexDescriptor rule=indexRule(0,1,2,new IndexProviderDescriptor("K","X.Y"));
    final Command.SchemaRuleCommand command=new Command.SchemaRuleCommand(Collections.emptyList(),recordsAfter,rule);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(schemaStore,times(1)).updateRecord(record);
    verify(indexingService,times(1)).createIndexes(rule);
    verify(cacheAccess,times(1)).addSchemaRule(rule);
  }
  @Test public void shouldApplyCreateIndexRuleSchemaRuleCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplierFacade(newIndexApplier(),newApplier(true));
    final DynamicRecord record=DynamicRecord.dynamicRecord(21,true);
    record.setCreated();
    final Collection<DynamicRecord> recordsAfter=singletonList(record);
    final StoreIndexDescriptor rule=indexRule(0,1,2,new IndexProviderDescriptor("K","X.Y"));
    final Command.SchemaRuleCommand command=new Command.SchemaRuleCommand(Collections.emptyList(),recordsAfter,rule);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(schemaStore,times(1)).setHighestPossibleIdInUse(record.getId());
    verify(schemaStore,times(1)).updateRecord(record);
    verify(indexingService,times(1)).createIndexes(rule);
    verify(cacheAccess,times(1)).addSchemaRule(rule);
  }
  @Test public void shouldApplyUpdateIndexRuleSchemaRuleCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplierFacade(newIndexApplier(),newApplier(false));
    final DynamicRecord record=DynamicRecord.dynamicRecord(21,true);
    final Collection<DynamicRecord> recordsAfter=singletonList(record);
    final StoreIndexDescriptor rule=constraintIndexRule(0,1,2,new IndexProviderDescriptor("K","X.Y"),42L);
    final Command.SchemaRuleCommand command=new Command.SchemaRuleCommand(Collections.emptyList(),recordsAfter,rule);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(schemaStore,times(1)).updateRecord(record);
    verify(indexingService,times(1)).activateIndex(rule.getId());
    verify(cacheAccess,times(1)).addSchemaRule(rule);
  }
  @Test public void shouldApplyUpdateIndexRuleSchemaRuleCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplierFacade(newIndexApplier(),newApplier(true));
    final DynamicRecord record=DynamicRecord.dynamicRecord(21,true);
    final Collection<DynamicRecord> recordsAfter=singletonList(record);
    final StoreIndexDescriptor rule=constraintIndexRule(0,1,2,new IndexProviderDescriptor("K","X.Y"),42L);
    final Command.SchemaRuleCommand command=new Command.SchemaRuleCommand(Collections.emptyList(),recordsAfter,rule);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(schemaStore,times(1)).setHighestPossibleIdInUse(record.getId());
    verify(schemaStore,times(1)).updateRecord(record);
    verify(indexingService,times(1)).activateIndex(rule.getId());
    verify(cacheAccess,times(1)).addSchemaRule(rule);
  }
  @Test public void shouldApplyUpdateIndexRuleSchemaRuleCommandToTheStoreThrowingIndexProblem() throws IndexNotFoundKernelException, IndexPopulationFailedKernelException, IndexActivationFailedKernelException {
    final BatchTransactionApplier applier=newIndexApplier();
    doThrow(new IndexNotFoundKernelException("")).when(indexingService).activateIndex(anyLong());
    final DynamicRecord record=DynamicRecord.dynamicRecord(21,true);
    final Collection<DynamicRecord> recordsAfter=singletonList(record);
    final StoreIndexDescriptor rule=constraintIndexRule(0,1,2,new IndexProviderDescriptor("K","X.Y"),42L);
    final Command.SchemaRuleCommand command=new Command.SchemaRuleCommand(Collections.emptyList(),recordsAfter,rule);
    try {
      apply(applier,command::handle,transactionToApply);
      fail("should have thrown");
    }
 catch (    Exception e) {
      assertTrue(e.getCause() instanceof IndexNotFoundKernelException);
    }
  }
  @Test public void shouldApplyDeleteIndexRuleSchemaRuleCommandToTheStore() throws Exception {
    final BatchTransactionApplier base=newApplier(false);
    final BatchTransactionApplier indexApplier=newIndexApplier();
    final BatchTransactionApplierFacade applier=new BatchTransactionApplierFacade(base,indexApplier);
    final DynamicRecord record=DynamicRecord.dynamicRecord(21,true);
    record.setInUse(false);
    final Collection<DynamicRecord> recordsAfter=singletonList(record);
    final StoreIndexDescriptor rule=indexRule(0,1,2,new IndexProviderDescriptor("K","X.Y"));
    final Command.SchemaRuleCommand command=new Command.SchemaRuleCommand(Collections.emptyList(),recordsAfter,rule);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(schemaStore,times(1)).updateRecord(record);
    verify(indexingService,times(1)).dropIndex(rule);
    verify(cacheAccess,times(1)).removeSchemaRuleFromCache(command.getKey());
  }
  @Test public void shouldApplyDeleteIndexRuleSchemaRuleCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplierFacade(newIndexApplier(),newApplier(true));
    final DynamicRecord record=DynamicRecord.dynamicRecord(21,true);
    record.setInUse(false);
    final Collection<DynamicRecord> recordsAfter=singletonList(record);
    final StoreIndexDescriptor rule=indexRule(0,1,2,new IndexProviderDescriptor("K","X.Y"));
    final Command.SchemaRuleCommand command=new Command.SchemaRuleCommand(Collections.emptyList(),recordsAfter,rule);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(schemaStore,times(1)).setHighestPossibleIdInUse(record.getId());
    verify(schemaStore,times(1)).updateRecord(record);
    verify(indexingService,times(1)).dropIndex(rule);
    verify(cacheAccess,times(1)).removeSchemaRuleFromCache(command.getKey());
  }
  @Test public void shouldApplyCreateUniquenessConstraintRuleSchemaRuleCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final DynamicRecord record=DynamicRecord.dynamicRecord(21,true);
    record.setCreated();
    final Collection<DynamicRecord> recordsAfter=singletonList(record);
    final ConstraintRule rule=uniquenessConstraintRule(0L,1,2,3L);
    final Command.SchemaRuleCommand command=new Command.SchemaRuleCommand(Collections.emptyList(),recordsAfter,rule);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(schemaStore,times(1)).updateRecord(record);
    verify(metaDataStore,times(1)).setLatestConstraintIntroducingTx(transactionId);
    verify(cacheAccess,times(1)).addSchemaRule(rule);
  }
  @Test public void shouldApplyCreateUniquenessConstraintRuleSchemaRuleCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplier(true);
    final DynamicRecord record=DynamicRecord.dynamicRecord(21,true);
    record.setCreated();
    final Collection<DynamicRecord> recordsAfter=singletonList(record);
    final ConstraintRule rule=uniquenessConstraintRule(0L,1,2,3L);
    final Command.SchemaRuleCommand command=new Command.SchemaRuleCommand(Collections.emptyList(),recordsAfter,rule);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(schemaStore,times(1)).setHighestPossibleIdInUse(record.getId());
    verify(schemaStore,times(1)).updateRecord(record);
    verify(metaDataStore,times(1)).setLatestConstraintIntroducingTx(transactionId);
    verify(cacheAccess,times(1)).addSchemaRule(rule);
  }
  @Test public void shouldApplyUpdateUniquenessConstraintRuleSchemaRuleCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final DynamicRecord record=DynamicRecord.dynamicRecord(21,true);
    final Collection<DynamicRecord> recordsAfter=singletonList(record);
    final ConstraintRule rule=uniquenessConstraintRule(0L,1,2,3L);
    final Command.SchemaRuleCommand command=new Command.SchemaRuleCommand(Collections.emptyList(),recordsAfter,rule);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(schemaStore,times(1)).updateRecord(record);
    verify(metaDataStore,times(1)).setLatestConstraintIntroducingTx(transactionId);
    verify(cacheAccess,times(1)).addSchemaRule(rule);
  }
  @Test public void shouldApplyUpdateUniquenessConstraintRuleSchemaRuleCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplier(true);
    final DynamicRecord record=DynamicRecord.dynamicRecord(21,true);
    final Collection<DynamicRecord> recordsAfter=singletonList(record);
    final ConstraintRule rule=uniquenessConstraintRule(0L,1,2,3L);
    final Command.SchemaRuleCommand command=new Command.SchemaRuleCommand(Collections.emptyList(),recordsAfter,rule);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(schemaStore,times(1)).setHighestPossibleIdInUse(record.getId());
    verify(schemaStore,times(1)).updateRecord(record);
    verify(metaDataStore,times(1)).setLatestConstraintIntroducingTx(transactionId);
    verify(cacheAccess,times(1)).addSchemaRule(rule);
  }
  @Test public void shouldApplyDeleteUniquenessConstraintRuleSchemaRuleCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final DynamicRecord record=DynamicRecord.dynamicRecord(21,true);
    record.setInUse(false);
    final Collection<DynamicRecord> recordsAfter=singletonList(record);
    final ConstraintRule rule=uniquenessConstraintRule(0L,1,2,3L);
    final Command.SchemaRuleCommand command=new Command.SchemaRuleCommand(Collections.emptyList(),recordsAfter,rule);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(schemaStore,times(1)).updateRecord(record);
    verify(metaDataStore,never()).setLatestConstraintIntroducingTx(transactionId);
    verify(cacheAccess,times(1)).removeSchemaRuleFromCache(command.getKey());
  }
  @Test public void shouldApplyDeleteUniquenessConstraintRuleSchemaRuleCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplier(true);
    final DynamicRecord record=DynamicRecord.dynamicRecord(21,true);
    record.setInUse(false);
    final Collection<DynamicRecord> recordsAfter=singletonList(record);
    final ConstraintRule rule=uniquenessConstraintRule(0L,1,2,3L);
    final Command.SchemaRuleCommand command=new Command.SchemaRuleCommand(Collections.emptyList(),recordsAfter,rule);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(schemaStore,times(1)).setHighestPossibleIdInUse(record.getId());
    verify(schemaStore,times(1)).updateRecord(record);
    verify(metaDataStore,never()).setLatestConstraintIntroducingTx(transactionId);
    verify(cacheAccess,times(1)).removeSchemaRuleFromCache(command.getKey());
  }
  @Test public void shouldApplyNeoStoreCommandToTheStore() throws Exception {
    final BatchTransactionApplier applier=newApplier(false);
    final NeoStoreRecord before=new NeoStoreRecord();
    final NeoStoreRecord after=new NeoStoreRecord();
    after.setNextProp(42);
    final Command command=new Command.NeoStoreCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(metaDataStore,times(1)).setGraphNextProp(after.getNextProp());
  }
  @Test public void shouldApplyNeoStoreCommandToTheStoreInRecovery() throws Exception {
    final BatchTransactionApplier applier=newApplier(true);
    final NeoStoreRecord before=new NeoStoreRecord();
    final NeoStoreRecord after=new NeoStoreRecord();
    after.setNextProp(42);
    final Command command=new Command.NeoStoreCommand(before,after);
    boolean result=apply(applier,command::handle,transactionToApply);
    assertFalse(result);
    verify(metaDataStore,times(1)).setGraphNextProp(after.getNextProp());
  }
  private BatchTransactionApplier newApplier(  boolean recovery){
    BatchTransactionApplier applier=new NeoStoreBatchTransactionApplier(neoStores,cacheAccess,lockService);
    if (recovery) {
      applier=newApplierFacade(new HighIdBatchTransactionApplier(neoStores),applier,new CacheInvalidationBatchTransactionApplier(neoStores,cacheAccess));
    }
    return applier;
  }
  private BatchTransactionApplier newApplierFacade(  BatchTransactionApplier... appliers){
    return new BatchTransactionApplierFacade(appliers);
  }
  private BatchTransactionApplier newIndexApplier(){
    return new IndexBatchTransactionApplier(indexingService,labelScanStoreSynchronizer,indexUpdatesSync,nodeStore,neoStores.getRelationshipStore(),new PropertyPhysicalToLogicalConverter(propertyStore));
  }
  public static StoreIndexDescriptor indexRule(  long id,  int label,  int propertyKeyId,  IndexProviderDescriptor providerDescriptor){
    return IndexDescriptorFactory.forSchema(forLabel(label,propertyKeyId),providerDescriptor).withId(id);
  }
  private static StoreIndexDescriptor constraintIndexRule(  long id,  int label,  int propertyKeyId,  IndexProviderDescriptor providerDescriptor,  Long owningConstraint){
    return IndexDescriptorFactory.uniqueForSchema(forLabel(label,propertyKeyId),providerDescriptor).withIds(id,owningConstraint);
  }
  private static ConstraintRule uniquenessConstraintRule(  long id,  int labelId,  int propertyKeyId,  long ownedIndexRule){
    return ConstraintRule.constraintRule(id,ConstraintDescriptorFactory.uniqueForLabel(labelId,propertyKeyId),ownedIndexRule);
  }
}
