class ServiceTest {
  private ClassLoader contextClassLoader;
  @BeforeEach void setUp(){
    contextClassLoader=Thread.currentThread().getContextClassLoader();
  }
  @AfterEach void tearDown(){
    Thread.currentThread().setContextClassLoader(contextClassLoader);
  }
  @Test void shouldLoadServiceInDefaultEnvironment(){
    FooService fooService=Service.load(FooService.class,"foo");
    assertTrue(fooService instanceof BarService);
  }
  @Test void whenContextCallsLoaderBlocksServicesFolderShouldLoadClassFromKernelClassloader(){
    Thread.currentThread().setContextClassLoader(new ServiceBlockClassLoader(contextClassLoader));
    FooService fooService=Service.load(FooService.class,"foo");
    assertTrue(fooService instanceof BarService);
  }
  @Test void whenContextClassLoaderOverridesServiceShouldLoadThatClass(){
    Thread.currentThread().setContextClassLoader(new ServiceRedirectClassLoader(contextClassLoader));
    FooService fooService=Service.load(FooService.class,"foo");
    assertTrue(fooService instanceof BazService);
  }
  @Test void whenContextClassLoaderDuplicatesServiceShouldLoadItOnce(){
    Thread.currentThread().setContextClassLoader(Service.class.getClassLoader());
    Iterable<FooService> services=Service.load(FooService.class);
    assertEquals(1,Iterables.count(services));
  }
private static final class ServiceBlockClassLoader extends ClassLoader {
    ServiceBlockClassLoader(    ClassLoader parent){
      super(parent);
    }
    @Override public URL getResource(    String name){
      return name.startsWith("META-INF/services") ? null : super.getResource(name);
    }
    @Override public Enumeration<URL> getResources(    String name) throws IOException {
      return name.startsWith("META-INF/services") ? Collections.enumeration(Collections.<URL>emptySet()) : super.getResources(name);
    }
    @Override public InputStream getResourceAsStream(    String name){
      return name.startsWith("META-INF/services") ? null : super.getResourceAsStream(name);
    }
  }
private static final class ServiceRedirectClassLoader extends ClassLoader {
    ServiceRedirectClassLoader(    ClassLoader parent){
      super(parent);
    }
    @Override public URL getResource(    String name){
      return name.startsWith("META-INF/services") ? super.getResource("test/" + name) : super.getResource(name);
    }
    @Override public Enumeration<URL> getResources(    String name) throws IOException {
      return name.startsWith("META-INF/services") ? super.getResources("test/" + name) : super.getResources(name);
    }
    @Override public InputStream getResourceAsStream(    String name){
      return name.startsWith("META-INF/services") ? super.getResourceAsStream("test/" + name) : super.getResourceAsStream(name);
    }
  }
}
