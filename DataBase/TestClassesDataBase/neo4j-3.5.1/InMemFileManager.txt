private static class InMemFileManager extends ForwardingJavaFileManager {
  private final Map<String,InMemSink> classes=new HashMap<>();
  InMemFileManager(){
    super(ToolProvider.getSystemJavaCompiler().getStandardFileManager(null,null,null));
  }
  @Override public ClassLoader getClassLoader(  Location location){
    return new SecureClassLoader(){
      @Override protected Class<?> findClass(      String name){
        byte[] byteCode=classes.get(name).getBytes();
        return super.defineClass(name,byteCode,0,byteCode.length);
      }
    }
;
  }
  @Override public JavaFileObject getJavaFileForOutput(  Location location,  String className,  Kind kind,  FileObject sibling) throws IOException {
    if (StandardLocation.CLASS_OUTPUT == location && Kind.CLASS == kind) {
      InMemSink clazz=new InMemSink(className);
      classes.put(className,clazz);
      return clazz;
    }
 else {
      return super.getJavaFileForOutput(location,className,kind,sibling);
    }
  }
}
