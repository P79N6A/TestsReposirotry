public class AbstractDynamicStoreTest {
  private static final int BLOCK_SIZE=60;
  @Rule public final EphemeralFileSystemRule fsr=new EphemeralFileSystemRule();
  @Rule public final PageCacheRule pageCacheRule=new PageCacheRule();
  private final File storeFile=new File("store");
  private final File idFile=new File("idStore");
  private final RecordFormats formats=Standard.LATEST_RECORD_FORMATS;
  private PageCache pageCache;
  private FileSystemAbstraction fs;
  @Before public void before() throws IOException {
    fs=fsr.get();
    pageCache=pageCacheRule.getPageCache(fsr.get());
    try (StoreChannel channel=fs.create(storeFile)){
      ByteBuffer buffer=ByteBuffer.allocate(4);
      buffer.putInt(BLOCK_SIZE);
      buffer.flip();
      channel.write(buffer);
    }
   }
  @Test public void dynamicRecordCursorReadsInUseRecords(){
    try (AbstractDynamicStore store=newTestableDynamicStore()){
      DynamicRecord first=createDynamicRecord(1,store,0);
      DynamicRecord second=createDynamicRecord(2,store,0);
      DynamicRecord third=createDynamicRecord(3,store,10);
      store.setHighId(3);
      first.setNextBlock(second.getId());
      store.updateRecord(first);
      second.setNextBlock(third.getId());
      store.updateRecord(second);
      Iterator<DynamicRecord> records=store.getRecords(1,NORMAL).iterator();
      assertTrue(records.hasNext());
      assertEquals(first,records.next());
      assertTrue(records.hasNext());
      assertEquals(second,records.next());
      assertTrue(records.hasNext());
      assertEquals(third,records.next());
      assertFalse(records.hasNext());
    }
   }
  @Test public void dynamicRecordCursorReadsNotInUseRecords(){
    try (AbstractDynamicStore store=newTestableDynamicStore()){
      DynamicRecord first=createDynamicRecord(1,store,0);
      DynamicRecord second=createDynamicRecord(2,store,0);
      DynamicRecord third=createDynamicRecord(3,store,10);
      store.setHighId(3);
      first.setNextBlock(second.getId());
      store.updateRecord(first);
      second.setNextBlock(third.getId());
      store.updateRecord(second);
      second.setInUse(false);
      store.updateRecord(second);
      Iterator<DynamicRecord> records=store.getRecords(1,FORCE).iterator();
      assertTrue(records.hasNext());
      assertEquals(first,records.next());
      assertTrue(records.hasNext());
      DynamicRecord secondReadRecord=records.next();
      assertEquals(second,secondReadRecord);
      assertFalse(secondReadRecord.inUse());
      assertTrue(records.hasNext());
      assertEquals(third,records.next());
      assertFalse(records.hasNext());
    }
   }
  private DynamicRecord createDynamicRecord(  long id,  AbstractDynamicStore store,  int dataSize){
    DynamicRecord first=new DynamicRecord(id);
    first.setInUse(true);
    first.setData(RandomUtils.nextBytes(dataSize == 0 ? BLOCK_SIZE - formats.dynamic().getRecordHeaderSize() : 10));
    store.updateRecord(first);
    return first;
  }
  private AbstractDynamicStore newTestableDynamicStore(){
    DefaultIdGeneratorFactory idGeneratorFactory=new DefaultIdGeneratorFactory(fs);
    AbstractDynamicStore store=new AbstractDynamicStore(storeFile,idFile,Config.defaults(),IdType.ARRAY_BLOCK,idGeneratorFactory,pageCache,NullLogProvider.getInstance(),"test",BLOCK_SIZE,formats.dynamic(),formats.storeVersion()){
      @Override public void accept(      Processor processor,      DynamicRecord record){
      }
      @Override public String getTypeDescriptor(){
        return "TestDynamicStore";
      }
    }
;
    store.initialise(true);
    return store;
  }
}
