public class XForwardFilterTest {
  private static final String X_FORWARD_HOST_HEADER_KEY="X-Forwarded-Host";
  private static final String X_FORWARD_PROTO_HEADER_KEY="X-Forwarded-Proto";
  @Test public void shouldSetTheBaseUriToTheSameValueAsTheXForwardHostHeader(){
    final String xForwardHostAndPort="jimwebber.org:1234";
    XForwardFilter filter=new XForwardFilter();
    InBoundHeaders headers=new InBoundHeaders();
    headers.add(X_FORWARD_HOST_HEADER_KEY,xForwardHostAndPort);
    ContainerRequest request=new ContainerRequest(WEB_APPLICATION,"GET",URI.create("http://iansrobinson.com"),URI.create("http://iansrobinson.com/foo/bar"),headers,INPUT_STREAM);
    ContainerRequest result=filter.filter(request);
    assertThat(result.getBaseUri().toString(),containsString(xForwardHostAndPort));
  }
  @Test public void shouldSetTheRequestUriToTheSameValueAsTheXForwardHostHeader(){
    final String xForwardHostAndPort="jimwebber.org:1234";
    XForwardFilter filter=new XForwardFilter();
    InBoundHeaders headers=new InBoundHeaders();
    headers.add(X_FORWARD_HOST_HEADER_KEY,xForwardHostAndPort);
    ContainerRequest request=new ContainerRequest(WEB_APPLICATION,"GET",URI.create("http://iansrobinson.com"),URI.create("http://iansrobinson.com/foo/bar"),headers,INPUT_STREAM);
    ContainerRequest result=filter.filter(request);
    assertTrue(result.getRequestUri().toString().startsWith("http://" + xForwardHostAndPort));
  }
  @Test public void shouldSetTheBaseUriToTheSameProtocolAsTheXForwardProtoHeader(){
    final String theProtocol="https";
    XForwardFilter filter=new XForwardFilter();
    InBoundHeaders headers=new InBoundHeaders();
    headers.add(X_FORWARD_PROTO_HEADER_KEY,theProtocol);
    ContainerRequest request=new ContainerRequest(WEB_APPLICATION,"GET",URI.create("http://jimwebber.org:1234"),URI.create("http://jimwebber.org:1234/foo/bar"),headers,INPUT_STREAM);
    ContainerRequest result=filter.filter(request);
    assertThat(result.getBaseUri().getScheme(),containsString(theProtocol));
  }
  @Test public void shouldSetTheRequestUriToTheSameProtocolAsTheXForwardProtoHeader(){
    final String theProtocol="https";
    XForwardFilter filter=new XForwardFilter();
    InBoundHeaders headers=new InBoundHeaders();
    headers.add(X_FORWARD_PROTO_HEADER_KEY,theProtocol);
    ContainerRequest request=new ContainerRequest(WEB_APPLICATION,"GET",URI.create("http://jimwebber.org:1234"),URI.create("http://jimwebber.org:1234/foo/bar"),headers,INPUT_STREAM);
    ContainerRequest result=filter.filter(request);
    assertThat(result.getBaseUri().getScheme(),containsString(theProtocol));
  }
  private static final WebApplication WEB_APPLICATION=new WebApplication(){
    @Override public boolean isInitiated(){
      return false;
    }
    @Override public void initiate(    ResourceConfig resourceConfig) throws IllegalArgumentException, ContainerException {
    }
    @Override public void initiate(    ResourceConfig resourceConfig,    IoCComponentProviderFactory ioCComponentProviderFactory) throws IllegalArgumentException, ContainerException {
    }
    @SuppressWarnings("CloneDoesntCallSuperClone") @Override public WebApplication clone(){
      return null;
    }
    @Override public FeaturesAndProperties getFeaturesAndProperties(){
      return null;
    }
    @Override public Providers getProviders(){
      return null;
    }
    @Override public ResourceContext getResourceContext(){
      return null;
    }
    @Override public MessageBodyWorkers getMessageBodyWorkers(){
      return null;
    }
    @Override public ExceptionMapperContext getExceptionMapperContext(){
      return null;
    }
    @Override public HttpContext getThreadLocalHttpContext(){
      return null;
    }
    @Override public ServerInjectableProviderFactory getServerInjectableProviderFactory(){
      return null;
    }
    @Override public RequestListener getRequestListener(){
      return null;
    }
    @Override public DispatchingListener getDispatchingListener(){
      return null;
    }
    @Override public ResponseListener getResponseListener(){
      return null;
    }
    @Override public void handleRequest(    ContainerRequest containerRequest,    ContainerResponseWriter containerResponseWriter){
    }
    @Override public void handleRequest(    ContainerRequest containerRequest,    ContainerResponse containerResponse){
    }
    @Override public void destroy(){
    }
    @Override public boolean isTracingEnabled(){
      return false;
    }
    @Override public void trace(    String s){
    }
  }
;
  private static final InputStream INPUT_STREAM=new InputStream(){
    @Override public int read(){
      return 0;
    }
  }
;
}
