@RunWith(Parameterized.class) public class RejectTransportEncryptionIT {
  @Rule public Neo4jWithSocket server=new Neo4jWithSocket(getClass(),settings -> {
    settings.put(new BoltConnector(DEFAULT_CONNECTOR_KEY).type.name(),"BOLT");
    settings.put(new BoltConnector(DEFAULT_CONNECTOR_KEY).encryption_level.name(),DISABLED.name());
  }
);
  @Rule public ExpectedException exception=ExpectedException.none();
  @Parameterized.Parameter(0) public Factory<TransportConnection> cf;
  @Parameterized.Parameter(1) public Exception expected;
  private TransportConnection client;
  private TransportTestUtil util;
  @Parameterized.Parameters public static Collection<Object[]> transports(){
    return asList(new Object[]{(Factory<TransportConnection>)SecureWebSocketConnection::new,new IOException("Failed to connect to the server within 10 seconds")},new Object[]{(Factory<TransportConnection>)SecureSocketConnection::new,new IOException(isJavaVersionAtLeast(JAVA_9) ? "Remote host terminated the handshake" : "Remote host closed connection during handshake")});
  }
  @Before public void setup(){
    this.client=cf.newInstance();
    this.util=new TransportTestUtil(new Neo4jPackV1());
  }
  @After public void teardown() throws Exception {
    if (client != null) {
      client.disconnect();
    }
  }
  @Test public void shouldRejectConnectionAfterHandshake() throws Throwable {
    exception.expect(expected.getClass());
    exception.expectMessage(expected.getMessage());
    client.connect(server.lookupDefaultConnector()).send(util.acceptedVersions(1,0,0,0));
  }
}
