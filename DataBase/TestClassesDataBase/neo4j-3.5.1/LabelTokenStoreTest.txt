public class LabelTokenStoreTest {
  private final File file=mock(File.class);
  private final File idFile=mock(File.class);
  private final IdGeneratorFactory generatorFactory=mock(IdGeneratorFactory.class);
  private final PageCache cache=mock(PageCache.class);
  private final LogProvider logProvider=mock(LogProvider.class);
  private final DynamicStringStore dynamicStringStore=mock(DynamicStringStore.class);
  private final PageCursor pageCursor=mock(PageCursor.class);
  private final Config config=Config.defaults();
  @Test public void forceGetRecordSkipInUsecheck() throws IOException {
    LabelTokenStore store=new UnusedLabelTokenStore();
    LabelTokenRecord record=store.getRecord(7,store.newRecord(),FORCE);
    assertFalse("Record should not be in use",record.inUse());
  }
  @Test(expected=InvalidRecordException.class) public void getRecord() throws IOException {
    when(pageCursor.getByte()).thenReturn(Record.NOT_IN_USE.byteValue());
    LabelTokenStore store=new UnusedLabelTokenStore();
    store.getRecord(7,store.newRecord(),NORMAL);
  }
class UnusedLabelTokenStore extends LabelTokenStore {
    UnusedLabelTokenStore() throws IOException {
      super(file,idFile,config,generatorFactory,cache,logProvider,dynamicStringStore,RecordFormatSelector.defaultFormat());
      pagedFile=mock(PagedFile.class);
      when(pagedFile.io(any(Long.class),any(Integer.class))).thenReturn(pageCursor);
      when(pagedFile.pageSize()).thenReturn(1);
      when(pageCursor.next()).thenReturn(true);
    }
  }
}
