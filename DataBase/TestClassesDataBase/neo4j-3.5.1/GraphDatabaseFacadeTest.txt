class GraphDatabaseFacadeTest {
  private final GraphDatabaseFacade.SPI spi=Mockito.mock(GraphDatabaseFacade.SPI.class,RETURNS_DEEP_STUBS);
  private final GraphDatabaseFacade graphDatabaseFacade=new GraphDatabaseFacade();
  private GraphDatabaseQueryService queryService;
  @BeforeEach void setUp(){
    queryService=mock(GraphDatabaseQueryService.class);
    DependencyResolver resolver=mock(DependencyResolver.class);
    Statement statement=mock(Statement.class,RETURNS_DEEP_STUBS);
    ThreadToStatementContextBridge contextBridge=mock(ThreadToStatementContextBridge.class);
    when(spi.queryService()).thenReturn(queryService);
    when(spi.resolver()).thenReturn(resolver);
    when(resolver.resolveDependency(ThreadToStatementContextBridge.class)).thenReturn(contextBridge);
    when(contextBridge.get()).thenReturn(statement);
    Config config=Config.defaults();
    when(resolver.resolveDependency(Config.class)).thenReturn(config);
    graphDatabaseFacade.init(spi,contextBridge,config,mockedTokenHolders());
  }
  @Test void beginTransactionWithCustomTimeout(){
    graphDatabaseFacade.beginTx(10,TimeUnit.MILLISECONDS);
    verify(spi).beginTransaction(KernelTransaction.Type.explicit,AUTH_DISABLED,10L);
  }
  @Test void beginTransaction(){
    graphDatabaseFacade.beginTx();
    long timeout=Config.defaults().get(GraphDatabaseSettings.transaction_timeout).toMillis();
    verify(spi).beginTransaction(KernelTransaction.Type.explicit,AUTH_DISABLED,timeout);
  }
  @Test void executeQueryWithCustomTimeoutShouldStartTransactionWithRequestedTimeout(){
    graphDatabaseFacade.execute("create (n)",157L,TimeUnit.SECONDS);
    verify(spi).beginTransaction(KernelTransaction.Type.implicit,AUTH_DISABLED,TimeUnit.SECONDS.toMillis(157L));
    graphDatabaseFacade.execute("create (n)",new HashMap<>(),247L,TimeUnit.MINUTES);
    verify(spi).beginTransaction(KernelTransaction.Type.implicit,AUTH_DISABLED,TimeUnit.MINUTES.toMillis(247L));
  }
  @Test void executeQueryStartDefaultTransaction(){
    KernelTransaction kernelTransaction=mock(KernelTransaction.class);
    InternalTransaction transaction=new TopLevelTransaction(kernelTransaction);
    when(queryService.beginTransaction(KernelTransaction.Type.implicit,AUTH_DISABLED)).thenReturn(transaction);
    graphDatabaseFacade.execute("create (n)");
    graphDatabaseFacade.execute("create (n)",new HashMap<>());
    long timeout=Config.defaults().get(GraphDatabaseSettings.transaction_timeout).toMillis();
    verify(spi,times(2)).beginTransaction(KernelTransaction.Type.implicit,AUTH_DISABLED,timeout);
  }
}
