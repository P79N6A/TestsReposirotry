class ProfilerTest {
  private static final int COMPUTE_WORK_MILLIS=1000;
  @Test void profilerMustNoticeWhereTimeGoes() throws Exception {
    Profiler profiler=Profiler.profiler();
    try (Profiler.ProfiledInterval ignored=profiler.profile()){
      expensiveComputation();
    }
     String output=getProfilerOutput(profiler);
    assertThat(output,containsString("expensiveComputation"));
  }
  @Test void profilerMustLimitItselfToProfiledRegion() throws Exception {
    Profiler profiler=Profiler.profiler();
    try (Profiler.ProfiledInterval ignored=profiler.profile()){
      expensiveComputation();
    }
     otherIntenseWork();
    String output=getProfilerOutput(profiler);
    assertThat(output,not(containsString("otherIntensiveWork")));
  }
  @Test void profilerMustWaitUntilAfterAnInitialDelay() throws Exception {
    Profiler profiler=Profiler.profiler();
    long initialDelayNanos=TimeUnit.MILLISECONDS.toNanos(COMPUTE_WORK_MILLIS * 3);
    try (Profiler.ProfiledInterval ignored=profiler.profile(Thread.currentThread(),initialDelayNanos)){
      expensiveComputation();
    }
     String output=getProfilerOutput(profiler);
    assertThat(output,not(containsString("expensiveComputation")));
  }
  private String getProfilerOutput(  Profiler profiler) throws InterruptedException {
    profiler.finish();
    ByteArrayOutputStream buffer=new ByteArrayOutputStream();
    try (PrintStream out=new PrintStream(buffer)){
      profiler.printProfile(out,"Profile");
      out.flush();
    }
     return buffer.toString();
  }
  private void expensiveComputation() throws InterruptedException {
    Thread.sleep(COMPUTE_WORK_MILLIS);
  }
  private void otherIntenseWork() throws InterruptedException {
    Thread.sleep(COMPUTE_WORK_MILLIS);
  }
}
