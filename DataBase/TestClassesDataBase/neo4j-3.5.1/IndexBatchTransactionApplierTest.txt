public class IndexBatchTransactionApplierTest {
  @Test public void shouldProvideLabelScanStoreUpdatesSortedByNodeId() throws Exception {
    IndexingService indexing=mock(IndexingService.class);
    when(indexing.convertToIndexUpdates(any(),eq(EntityType.NODE))).thenAnswer(o -> Iterables.empty());
    LabelScanWriter writer=new OrderVerifyingLabelScanWriter(10,15,20);
    WorkSync<Supplier<LabelScanWriter>,LabelUpdateWork> labelScanSync=spy(new WorkSync<>(singletonProvider(writer)));
    WorkSync<IndexingUpdateService,IndexUpdatesWork> indexUpdatesSync=new WorkSync<>(indexing);
    TransactionToApply tx=mock(TransactionToApply.class);
    PropertyStore propertyStore=mock(PropertyStore.class);
    try (IndexBatchTransactionApplier applier=new IndexBatchTransactionApplier(indexing,labelScanSync,indexUpdatesSync,mock(NodeStore.class),mock(RelationshipStore.class),new PropertyPhysicalToLogicalConverter(propertyStore))){
      try (TransactionApplier txApplier=applier.startTx(tx)){
        txApplier.visitNodeCommand(node(15));
        txApplier.visitNodeCommand(node(20));
        txApplier.visitNodeCommand(node(10));
      }
     }
     verify(labelScanSync).applyAsync(any());
  }
  private Supplier<LabelScanWriter> singletonProvider(  final LabelScanWriter writer){
    return () -> writer;
  }
  private NodeCommand node(  long nodeId){
    NodeRecord after=new NodeRecord(nodeId,true,false,NO_NEXT_RELATIONSHIP.intValue(),NO_NEXT_PROPERTY.intValue(),0);
    NodeLabelsField.parseLabelsField(after).add(1,null,null);
    return new NodeCommand(new NodeRecord(nodeId),after);
  }
private static class OrderVerifyingLabelScanWriter implements LabelScanWriter {
    private final long[] expectedNodeIds;
    private int cursor;
    OrderVerifyingLabelScanWriter(    long... expectedNodeIds){
      this.expectedNodeIds=expectedNodeIds;
    }
    @Override public void write(    NodeLabelUpdate update){
      assertEquals(expectedNodeIds[cursor],update.getNodeId());
      cursor++;
    }
    @Override public void close(){
      assertEquals(cursor,expectedNodeIds.length);
    }
  }
}
