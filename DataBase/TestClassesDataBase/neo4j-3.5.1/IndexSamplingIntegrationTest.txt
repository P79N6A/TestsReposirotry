public class IndexSamplingIntegrationTest {
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  private final Label label=Label.label("Person");
  private final String property="name";
  private final long nodes=1000;
  private final String[] names={"Neo4j","Neo","Graph","Apa"};
  @Test public void shouldSampleNotUniqueIndex() throws Throwable {
    GraphDatabaseService db=null;
    long deletedNodes=0;
    try {
      db=new TestGraphDatabaseFactory().newEmbeddedDatabase(testDirectory.storeDir());
      IndexDefinition indexDefinition;
      try (Transaction tx=db.beginTx()){
        indexDefinition=db.schema().indexFor(label).on(property).create();
        tx.success();
      }
       try (Transaction tx=db.beginTx()){
        db.schema().awaitIndexOnline(indexDefinition,10,TimeUnit.SECONDS);
        tx.success();
      }
       try (Transaction tx=db.beginTx()){
        for (int i=0; i < nodes; i++) {
          db.createNode(label).setProperty(property,names[i % names.length]);
          tx.success();
        }
      }
       try (Transaction tx=db.beginTx()){
        for (int i=0; i < (nodes / 10); i++) {
          try (ResourceIterator<Node> nodes=db.findNodes(label,property,names[i % names.length])){
            nodes.next().delete();
          }
           deletedNodes++;
          tx.success();
        }
      }
     }
  finally {
      if (db != null) {
        db.shutdown();
      }
    }
    triggerIndexResamplingOnNextStartup();
    DoubleLongRegister register=fetchIndexSamplingValues(db);
    assertEquals(names.length,register.readFirst());
    assertThat(register.readSecond(),allOf(greaterThanOrEqualTo(nodes - deletedNodes),lessThanOrEqualTo(nodes)));
    DoubleLongRegister indexSizeRegister=fetchIndexSizeValues(db);
    assertEquals(0,indexSizeRegister.readFirst());
    assertEquals(nodes - deletedNodes,indexSizeRegister.readSecond());
  }
  @Test public void shouldSampleUniqueIndex() throws Throwable {
    GraphDatabaseService db=null;
    long deletedNodes=0;
    try {
      db=new TestGraphDatabaseFactory().newEmbeddedDatabase(testDirectory.storeDir());
      try (Transaction tx=db.beginTx()){
        db.schema().constraintFor(label).assertPropertyIsUnique(property).create();
        tx.success();
      }
       try (Transaction tx=db.beginTx()){
        for (int i=0; i < nodes; i++) {
          db.createNode(label).setProperty(property,"" + i);
          tx.success();
        }
      }
       try (Transaction tx=db.beginTx()){
        for (int i=0; i < nodes; i++) {
          if (i % 10 == 0) {
            deletedNodes++;
            db.findNode(label,property,"" + i).delete();
            tx.success();
          }
        }
      }
     }
  finally {
      if (db != null) {
        db.shutdown();
      }
    }
    triggerIndexResamplingOnNextStartup();
    DoubleLongRegister indexSampleRegister=fetchIndexSamplingValues(db);
    assertEquals(nodes - deletedNodes,indexSampleRegister.readFirst());
    assertEquals(nodes - deletedNodes,indexSampleRegister.readSecond());
    DoubleLongRegister indexSizeRegister=fetchIndexSizeValues(db);
    assertEquals(0,indexSizeRegister.readFirst());
    assertEquals(nodes - deletedNodes,indexSizeRegister.readSecond());
  }
  private IndexReference indexId(  org.neo4j.internal.kernel.api.Transaction tx){
    int labelId=tx.tokenRead().nodeLabel(label.name());
    int propertyKeyId=tx.tokenRead().propertyKey(property);
    return tx.schemaRead().index(labelId,propertyKeyId);
  }
  private DoubleLongRegister fetchIndexSamplingValues(  GraphDatabaseService db) throws IndexNotFoundKernelException, TransactionFailureException {
    try {
      db=new TestGraphDatabaseFactory().newEmbeddedDatabase(testDirectory.storeDir());
      @SuppressWarnings("deprecation") GraphDatabaseAPI api=(GraphDatabaseAPI)db;
      try (org.neo4j.internal.kernel.api.Transaction tx=api.getDependencyResolver().resolveDependency(Kernel.class).beginTransaction(explicit,AUTH_DISABLED)){
        return tx.schemaRead().indexSample(indexId(tx),Registers.newDoubleLongRegister());
      }
     }
  finally {
      if (db != null) {
        db.shutdown();
      }
    }
  }
  private DoubleLongRegister fetchIndexSizeValues(  GraphDatabaseService db) throws IndexNotFoundKernelException, TransactionFailureException {
    try {
      db=new TestGraphDatabaseFactory().newEmbeddedDatabase(testDirectory.storeDir());
      @SuppressWarnings("deprecation") GraphDatabaseAPI api=(GraphDatabaseAPI)db;
      try (org.neo4j.internal.kernel.api.Transaction tx=api.getDependencyResolver().resolveDependency(Kernel.class).beginTransaction(explicit,AUTH_DISABLED)){
        return tx.schemaRead().indexUpdatesAndSize(indexId(tx),Registers.newDoubleLongRegister());
      }
     }
  finally {
      if (db != null) {
        db.shutdown();
      }
    }
  }
  private void triggerIndexResamplingOnNextStartup(){
    FileUtils.deleteFile(testDirectory.databaseLayout().countStoreA());
    FileUtils.deleteFile(testDirectory.databaseLayout().countStoreB());
  }
}
