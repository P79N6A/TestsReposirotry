public class ConfigLoaderTest {
  @Rule public final SuppressOutput suppressOutput=suppressAll();
  @Rule public final TemporaryFolder folder=new TemporaryFolder();
  @Test public void shouldProvideAConfiguration(){
    File configFile=ConfigFileBuilder.builder(folder.getRoot()).build();
    Config config=Config.fromFile(configFile).withHome(folder.getRoot()).build();
    assertNotNull(config);
  }
  @Test public void shouldUseSpecifiedConfigFile(){
    File configFile=ConfigFileBuilder.builder(folder.getRoot()).withNameValue(GraphDatabaseSettings.default_advertised_address.name(),"bar").build();
    Config testConf=Config.fromFile(configFile).withHome(folder.getRoot()).build();
    final String EXPECTED_VALUE="bar";
    assertEquals(EXPECTED_VALUE,testConf.get(GraphDatabaseSettings.default_advertised_address));
  }
  @Test public void shouldUseSpecifiedHomeDir(){
    File configFile=ConfigFileBuilder.builder(folder.getRoot()).build();
    Config testConf=Config.fromFile(configFile).withHome(folder.getRoot()).build();
    assertEquals(folder.getRoot(),testConf.get(GraphDatabaseSettings.neo4j_home));
  }
  @Test public void shouldUseWorkingDirForHomeDirIfUnspecified(){
    File configFile=ConfigFileBuilder.builder(folder.getRoot()).build();
    Config testConf=Config.fromFile(configFile).build();
    assertEquals(new File(System.getProperty("user.dir")),testConf.get(GraphDatabaseSettings.neo4j_home));
  }
  @Test public void shouldAcceptDuplicateKeysWithSameValue(){
    File configFile=ConfigFileBuilder.builder(folder.getRoot()).withNameValue(GraphDatabaseSettings.default_advertised_address.name(),"bar").withNameValue(GraphDatabaseSettings.default_advertised_address.name(),"bar").build();
    Config testConf=Config.fromFile(configFile).withHome(folder.getRoot()).build();
    assertNotNull(testConf);
    final String EXPECTED_VALUE="bar";
    assertEquals(EXPECTED_VALUE,testConf.get(GraphDatabaseSettings.default_advertised_address));
  }
  @Test public void loadOfflineConfigShouldDisableBolt(){
    BoltConnector defaultBoltConf=new BoltConnector("bolt");
    File configFile=ConfigFileBuilder.builder(folder.getRoot()).withNameValue(defaultBoltConf.enabled.name(),Settings.TRUE).build();
    Config testConf=Config.fromFile(configFile).withHome(folder.getRoot()).withConnectorsDisabled().build();
    assertNotNull(testConf);
    assertEquals(false,testConf.get(defaultBoltConf.enabled));
    assertEquals(false,testConf.get(new BoltConnector().enabled));
  }
  @Test public void loadOfflineConfigAddDisabledBoltConnector(){
    File configFile=ConfigFileBuilder.builder(folder.getRoot()).build();
    Config testConf=Config.fromFile(configFile).withHome(folder.getRoot()).withConnectorsDisabled().build();
    assertNotNull(testConf);
    assertEquals(false,testConf.get(new BoltConnector().enabled));
  }
  @Test public void shouldFindThirdPartyJaxRsPackages() throws IOException {
    File file=ServerTestUtils.createTempConfigFile(folder.getRoot());
    try (BufferedWriter out=new BufferedWriter(new FileWriter(file,true))){
      out.write(ServerSettings.third_party_packages.name());
      out.write("=");
      out.write("com.foo.bar=\"mount/point/foo\",");
      out.write("com.foo.baz=\"/bar\",");
      out.write("com.foo.foobarbaz=\"/\"");
      out.write(System.lineSeparator());
    }
     Config config=Config.fromFile(file).withHome(folder.getRoot()).build();
    List<ThirdPartyJaxRsPackage> thirdpartyJaxRsPackages=config.get(ServerSettings.third_party_packages);
    assertNotNull(thirdpartyJaxRsPackages);
    assertEquals(3,thirdpartyJaxRsPackages.size());
  }
  @Test public void shouldRetainRegistrationOrderOfThirdPartyJaxRsPackages(){
    File configFile=ConfigFileBuilder.builder(folder.getRoot()).withNameValue(ServerSettings.third_party_packages.name(),"org.neo4j.extension.extension1=/extension1,org.neo4j.extension.extension2=/extension2," + "org.neo4j.extension.extension3=/extension3").build();
    Config config=Config.fromFile(configFile).withHome(folder.getRoot()).build();
    List<ThirdPartyJaxRsPackage> thirdpartyJaxRsPackages=config.get(ServerSettings.third_party_packages);
    assertEquals(3,thirdpartyJaxRsPackages.size());
    assertEquals("/extension1",thirdpartyJaxRsPackages.get(0).getMountPoint());
    assertEquals("/extension2",thirdpartyJaxRsPackages.get(1).getMountPoint());
    assertEquals("/extension3",thirdpartyJaxRsPackages.get(2).getMountPoint());
  }
  @Test(expected=UncheckedIOException.class) public void shouldThrowWhenSpecifiedConfigFileDoesNotExist(){
    File nonExistentConfigFile=new File("/tmp/" + System.currentTimeMillis());
    Config config=Config.fromFile(nonExistentConfigFile).withHome(folder.getRoot()).build();
    assertNotNull(config);
  }
  @Test public void shouldWorkFineWhenSpecifiedConfigFileDoesNotExist(){
    File nonExistentConfigFile=new File("/tmp/" + System.currentTimeMillis());
    Config config=Config.fromFile(nonExistentConfigFile).withHome(folder.getRoot()).withNoThrowOnFileLoadFailure().build();
    assertNotNull(config);
  }
  @Test public void shouldDefaultToCorrectValueForAuthStoreLocation(){
    File configFile=ConfigFileBuilder.builder(folder.getRoot()).withoutSetting(GraphDatabaseSettings.data_directory).build();
    Config config=Config.fromFile(configFile).withHome(folder.getRoot()).build();
    assertThat(config.get(DatabaseManagementSystemSettings.auth_store_directory),is(new File(folder.getRoot(),"data/dbms").getAbsoluteFile()));
  }
  @Test public void shouldSetAValueForAuthStoreLocation(){
    File configFile=ConfigFileBuilder.builder(folder.getRoot()).withSetting(GraphDatabaseSettings.data_directory,"the-data-dir").build();
    Config config=Config.fromFile(configFile).withHome(folder.getRoot()).build();
    assertThat(config.get(DatabaseManagementSystemSettings.auth_store_directory),is(new File(folder.getRoot(),"the-data-dir/dbms").getAbsoluteFile()));
  }
  @Test public void shouldNotOverwriteAuthStoreLocationIfProvided(){
    File configFile=ConfigFileBuilder.builder(folder.getRoot()).withSetting(GraphDatabaseSettings.data_directory,"the-data-dir").withSetting(GraphDatabaseSettings.auth_store,"foo/bar/auth").build();
    Config config=Config.fromFile(configFile).withHome(folder.getRoot()).build();
    assertThat(config.get(GraphDatabaseSettings.auth_store),is(new File(folder.getRoot(),"foo/bar/auth").getAbsoluteFile()));
  }
}
