class CoordinatingPortProviderTest {
  @Test void shouldProvideUniquePorts(){
    PortRepository portRepository=mock(PortRepository.class);
    PortProvider portProvider=new CoordinatingPortProvider(portRepository,port -> false);
    when(portRepository.reserveNextPort("foo")).thenReturn(40,41);
    int port1=portProvider.getNextFreePort("foo");
    int port2=portProvider.getNextFreePort("foo");
    assertThat(port1,is(not(equalTo(port2))));
  }
  @Test void shouldSkipReservedPorts(){
    PortRepository portRepository=mock(PortRepository.class);
    PortProvider portProvider=new CoordinatingPortProvider(portRepository,port -> false);
    when(portRepository.reserveNextPort("foo")).thenReturn(40,41,43);
    assertThat(portProvider.getNextFreePort("foo"),is(40));
    assertThat(portProvider.getNextFreePort("foo"),is(41));
    assertThat(portProvider.getNextFreePort("foo"),is(43));
  }
  @Test void shouldSkipOccupiedPorts(){
    PortRepository portRepository=mock(PortRepository.class);
    PortProbe portProbe=mock(PortProbe.class);
    PortProvider portProvider=new CoordinatingPortProvider(portRepository,portProbe);
    when(portRepository.reserveNextPort("foo")).thenReturn(40,41,42,43);
    when(portProbe.isOccupied(40)).thenReturn(false);
    when(portProbe.isOccupied(41)).thenReturn(false);
    when(portProbe.isOccupied(42)).thenReturn(true);
    when(portProbe.isOccupied(43)).thenReturn(false);
    assertThat(portProvider.getNextFreePort("foo"),is(40));
    assertThat(portProvider.getNextFreePort("foo"),is(41));
    assertThat(portProvider.getNextFreePort("foo"),is(43));
  }
}
