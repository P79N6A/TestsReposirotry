public class TemporalTypeIT extends AbstractRestFunctionalTestBase {
  @Test public void shouldWorkWithDateTime() throws Throwable {
    HTTP.Response response=runQuery("RETURN datetime({year: 1, month:10, day:2, timezone:\\\"+01:00\\\"})");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode data=getSingleData(response);
    assertTemporalEquals(data,"0001-10-02T00:00+01:00","datetime");
  }
  @Test public void shouldWorkWithTime() throws Throwable {
    HTTP.Response response=runQuery("RETURN time({hour: 23, minute: 19, second: 55, timezone:\\\"-07:00\\\"})");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode data=getSingleData(response);
    assertTemporalEquals(data,"23:19:55-07:00","time");
  }
  @Test public void shouldWorkWithLocalDateTime() throws Throwable {
    HTTP.Response response=runQuery("RETURN localdatetime({year: 1984, month: 10, day: 21, hour: 12, minute: 34})");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode data=getSingleData(response);
    assertTemporalEquals(data,"1984-10-21T12:34","localdatetime");
  }
  @Test public void shouldWorkWithDate() throws Throwable {
    HTTP.Response response=runQuery("RETURN date({year: 1984, month: 10, day: 11})");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode data=getSingleData(response);
    assertTemporalEquals(data,"1984-10-11","date");
  }
  @Test public void shouldWorkWithLocalTime() throws Throwable {
    HTTP.Response response=runQuery("RETURN localtime({hour:12, minute:31, second:14, nanosecond: 645876123})");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode data=getSingleData(response);
    assertTemporalEquals(data,"12:31:14.645876123","localtime");
  }
  @Test public void shouldWorkWithDuration() throws Throwable {
    HTTP.Response response=runQuery("RETURN duration({weeks:2, days:3})");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode data=getSingleData(response);
    assertTemporalEquals(data,"P17D","duration");
  }
  @Test public void shouldOnlyGetNodeTypeInMetaAsNodeProperties() throws Throwable {
    HTTP.Response response=runQuery("CREATE (account {name: \\\"zhen\\\", creationTime: localdatetime({year: 1984, month: 10, day: 21, hour: 12, minute: 34})}) RETURN account");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode data=getSingleData(response);
    JsonNode row=getSingle(data,"row");
    assertThat(row.get("creationTime").asText(),equalTo("1984-10-21T12:34"));
    assertThat(row.get("name").asText(),equalTo("zhen"));
    JsonNode meta=getSingle(data,"meta");
    assertThat(meta.get("type").asText(),equalTo("node"));
  }
  private void assertTemporalEquals(  JsonNode data,  String value,  String type){
    JsonNode row=getSingle(data,"row");
    assertThat(row.asText(),equalTo(value));
    JsonNode meta=getSingle(data,"meta");
    assertEquals(type,meta.get("type").asText());
  }
  private static JsonNode getSingleData(  HTTP.Response response) throws JsonParseException {
    JsonNode data=response.get("results").get(0).get("data");
    assertEquals(1,data.size());
    return data.get(0);
  }
  private static JsonNode getSingle(  JsonNode node,  String key){
    JsonNode data=node.get(key);
    assertEquals(1,data.size());
    return data.get(0);
  }
}
