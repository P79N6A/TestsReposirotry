@ExtendWith(TestDirectoryExtension.class) class IndexValuesValidationTest {
  @Inject private TestDirectory directory;
  private GraphDatabaseService database;
  void setUp(  String... settings){
    database=new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(directory.storeDir()).setConfig(stringMap(settings)).newGraphDatabase();
  }
  @AfterEach void tearDown(){
    database.shutdown();
  }
  @Test void validateIndexedNodePropertiesInLucene(){
    setUp(default_schema_provider.name(),GraphDatabaseSettings.SchemaIndex.NATIVE10.providerName());
    Label label=Label.label("indexedNodePropertiesTestLabel");
    String propertyName="indexedNodePropertyName";
    createIndex(label,propertyName);
    try (Transaction ignored=database.beginTx()){
      database.schema().awaitIndexesOnline(5,TimeUnit.MINUTES);
    }
     IllegalArgumentException argumentException=assertThrows(IllegalArgumentException.class,() -> {
      try (Transaction transaction=database.beginTx()){
        Node node=database.createNode(label);
        node.setProperty(propertyName,StringUtils.repeat("a",IndexWriter.MAX_TERM_LENGTH + 1));
        transaction.success();
      }
     }
);
    assertThat(argumentException.getMessage(),equalTo("Property value size is too large for index. Please see index documentation for limitations."));
  }
  @Test void validateIndexedNodePropertiesInNativeBtree(){
    setUp();
    Label label=Label.label("indexedNodePropertiesTestLabel");
    String propertyName="indexedNodePropertyName";
    createIndex(label,propertyName);
    try (Transaction ignored=database.beginTx()){
      database.schema().awaitIndexesOnline(5,TimeUnit.MINUTES);
    }
     IllegalArgumentException argumentException=assertThrows(IllegalArgumentException.class,() -> {
      try (Transaction transaction=database.beginTx()){
        Node node=database.createNode(label);
        node.setProperty(propertyName,StringUtils.repeat("a",keyValueSizeCapFromPageSize(PAGE_SIZE) + 1));
        transaction.success();
      }
     }
);
    assertThat(argumentException.getMessage(),containsString("is too large to index into this particular index. Please see index documentation for limitations."));
  }
  @Test void validateNodePropertiesOnPopulation(){
    setUp();
    Label label=Label.label("populationTestNodeLabel");
    String propertyName="populationTestPropertyName";
    try (Transaction transaction=database.beginTx()){
      Node node=database.createNode(label);
      node.setProperty(propertyName,StringUtils.repeat("a",IndexWriter.MAX_TERM_LENGTH + 1));
      transaction.success();
    }
     IndexDefinition indexDefinition=createIndex(label,propertyName);
    try {
      try (Transaction ignored=database.beginTx()){
        database.schema().awaitIndexesOnline(5,TimeUnit.MINUTES);
      }
     }
 catch (    IllegalStateException e) {
      try (Transaction ignored=database.beginTx()){
        String indexFailure=database.schema().getIndexFailure(indexDefinition);
        assertThat("",indexFailure,Matchers.containsString("java.lang.IllegalArgumentException: Index key-value size it to large. Please see index documentation for limitations."));
      }
     }
  }
  @Test void validateExplicitIndexedNodeProperties(){
    setUp();
    Label label=Label.label("explicitIndexedNodePropertiesTestLabel");
    String propertyName="explicitIndexedNodeProperties";
    String explicitIndexedNodeIndex="explicitIndexedNodeIndex";
    try (Transaction transaction=database.beginTx()){
      Node node=database.createNode(label);
      database.index().forNodes(explicitIndexedNodeIndex).add(node,propertyName,"shortString");
      transaction.success();
    }
     IllegalArgumentException argumentException=assertThrows(IllegalArgumentException.class,() -> {
      try (Transaction transaction=database.beginTx()){
        Node node=database.createNode(label);
        String longValue=StringUtils.repeat("a",IndexWriter.MAX_TERM_LENGTH + 1);
        database.index().forNodes(explicitIndexedNodeIndex).add(node,propertyName,longValue);
        transaction.success();
      }
     }
);
    assertEquals("Property value size is too large for index. Please see index documentation for limitations.",argumentException.getMessage());
  }
  @Test void validateExplicitIndexedRelationshipProperties(){
    setUp();
    Label label=Label.label("explicitIndexedRelationshipPropertiesTestLabel");
    String propertyName="explicitIndexedRelationshipProperties";
    String explicitIndexedRelationshipIndex="explicitIndexedRelationshipIndex";
    RelationshipType indexType=RelationshipType.withName("explicitIndexType");
    try (Transaction transaction=database.beginTx()){
      Node source=database.createNode(label);
      Node destination=database.createNode(label);
      Relationship relationship=source.createRelationshipTo(destination,indexType);
      database.index().forRelationships(explicitIndexedRelationshipIndex).add(relationship,propertyName,"shortString");
      transaction.success();
    }
     IllegalArgumentException argumentException=assertThrows(IllegalArgumentException.class,() -> {
      try (Transaction transaction=database.beginTx()){
        Node source=database.createNode(label);
        Node destination=database.createNode(label);
        Relationship relationship=source.createRelationshipTo(destination,indexType);
        String longValue=StringUtils.repeat("a",IndexWriter.MAX_TERM_LENGTH + 1);
        database.index().forRelationships(explicitIndexedRelationshipIndex).add(relationship,propertyName,longValue);
        transaction.success();
      }
     }
);
    assertEquals("Property value size is too large for index. Please see index documentation for limitations.",argumentException.getMessage());
  }
  private IndexDefinition createIndex(  Label label,  String propertyName){
    try (Transaction transaction=database.beginTx()){
      IndexDefinition indexDefinition=database.schema().indexFor(label).on(propertyName).create();
      transaction.success();
      return indexDefinition;
    }
   }
}
