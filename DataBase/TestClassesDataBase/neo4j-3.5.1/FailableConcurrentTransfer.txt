private static class FailableConcurrentTransfer<TYPE> implements FailableConsumer<TYPE>, ThrowingSupplier<TYPE,Exception> {
  private final CountDownLatch latch=new CountDownLatch(1);
  private TYPE value;
  private Exception failure;
  @Override public void accept(  TYPE value){
    this.value=value;
    latch.countDown();
  }
  @Override public void fail(  Exception failure){
    this.failure=failure;
    latch.countDown();
  }
  @Override public TYPE get() throws Exception {
    latch.await();
    if (failure != null) {
      throw failure;
    }
    return value;
  }
  @Override public String toString(){
    return String.format("ConcurrentTransfer{%s}",latch.getCount() == 1 ? "<waiting>" : value);
  }
}
