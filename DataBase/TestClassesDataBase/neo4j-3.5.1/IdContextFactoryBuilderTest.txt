@ExtendWith({DefaultFileSystemExtension.class,TestDirectoryExtension.class}) class IdContextFactoryBuilderTest {
  @Inject private TestDirectory testDirectory;
  @Inject private DefaultFileSystemAbstraction fs;
  private final JobScheduler jobScheduler=mock(JobScheduler.class);
  @Test void createCommunityBufferedContextByDefault(){
    IdContextFactory idContextFactory=IdContextFactoryBuilder.of(fs,jobScheduler).build();
    DatabaseIdContext idContext=idContextFactory.createIdContext("database");
    IdGeneratorFactory idGeneratorFactory=idContext.getIdGeneratorFactory();
    assertThat(idContext.getIdController(),instanceOf(BufferedIdController.class));
    assertThat(idGeneratorFactory,instanceOf(BufferingIdGeneratorFactory.class));
    ((BufferingIdGeneratorFactory)idGeneratorFactory).initialize(() -> mock(KernelTransactionsSnapshot.class));
    idGeneratorFactory.open(testDirectory.file("a"),IdType.NODE,() -> 0,100).close();
    idGeneratorFactory.open(testDirectory.file("b"),IdType.PROPERTY,() -> 0,100).close();
    BufferingIdGeneratorFactory bufferedFactory=(BufferingIdGeneratorFactory)idGeneratorFactory;
    assertThat(bufferedFactory.get(IdType.NODE),instanceOf(IdGeneratorImpl.class));
    assertThat(bufferedFactory.get(IdType.PROPERTY),not(instanceOf(IdGeneratorImpl.class)));
  }
  @Test void requireFileSystemWhenIdGeneratorFactoryNotProvided(){
    NullPointerException exception=assertThrows(NullPointerException.class,() -> IdContextFactoryBuilder.of(new CommunityIdTypeConfigurationProvider(),jobScheduler).build());
    assertThat(exception.getMessage(),containsString("File system is required"));
  }
  @Test void createContextWithCustomIdGeneratorFactoryWhenProvided(){
    IdGeneratorFactory idGeneratorFactory=mock(IdGeneratorFactory.class);
    IdContextFactory contextFactory=IdContextFactoryBuilder.of(fs,jobScheduler).withIdGenerationFactoryProvider(any -> idGeneratorFactory).build();
    DatabaseIdContext idContext=contextFactory.createIdContext("database");
    IdGeneratorFactory bufferedGeneratorFactory=idContext.getIdGeneratorFactory();
    assertThat(idContext.getIdController(),instanceOf(BufferedIdController.class));
    assertThat(bufferedGeneratorFactory,instanceOf(BufferingIdGeneratorFactory.class));
    ((BufferingIdGeneratorFactory)bufferedGeneratorFactory).initialize(() -> mock(KernelTransactionsSnapshot.class));
    File file=testDirectory.file("a");
    IdType idType=IdType.NODE;
    LongSupplier highIdSupplier=() -> 0;
    int maxId=100;
    idGeneratorFactory.open(file,idType,highIdSupplier,maxId);
    verify(idGeneratorFactory).open(file,idType,highIdSupplier,maxId);
  }
  @Test void createContextWithProvidedReusabilityCheck(){
    IdReuseEligibility reuseEligibility=mock(IdReuseEligibility.class);
    IdContextFactory contextFactory=IdContextFactoryBuilder.of(fs,jobScheduler).withIdReuseEligibility(reuseEligibility).build();
    DatabaseIdContext idContext=contextFactory.createIdContext("database");
    IdGeneratorFactory bufferedGeneratorFactory=idContext.getIdGeneratorFactory();
    assertThat(bufferedGeneratorFactory,instanceOf(BufferingIdGeneratorFactory.class));
    BufferingIdGeneratorFactory bufferedFactory=(BufferingIdGeneratorFactory)bufferedGeneratorFactory;
    KernelTransactionsSnapshot snapshot=mock(KernelTransactionsSnapshot.class);
    when(snapshot.allClosed()).thenReturn(true);
    bufferedFactory.initialize(() -> snapshot);
    try (IdGenerator idGenerator=bufferedFactory.open(testDirectory.file("a"),IdType.PROPERTY,() -> 100,100)){
      idGenerator.freeId(15);
      bufferedFactory.maintenance();
      verify(reuseEligibility).isEligible(snapshot);
    }
   }
  @Test void createContextWithFactoryWrapper(){
    Function<IdGeneratorFactory,IdGeneratorFactory> factoryWrapper=mock(Function.class);
    IdGeneratorFactory idGeneratorFactory=mock(IdGeneratorFactory.class);
    when(factoryWrapper.apply(any())).thenReturn(idGeneratorFactory);
    IdContextFactory contextFactory=IdContextFactoryBuilder.of(fs,jobScheduler).withFactoryWrapper(factoryWrapper).build();
    DatabaseIdContext idContext=contextFactory.createIdContext("database");
    assertSame(idGeneratorFactory,idContext.getIdGeneratorFactory());
  }
}
