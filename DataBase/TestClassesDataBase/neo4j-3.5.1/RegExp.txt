public static class RegExp extends TypeSafeMatcher<String> {
  enum MatchType {  end("ends with"){
    @Override boolean match(    String pattern,    String string){
      return string.endsWith(pattern);
    }
  }
,   matches{
    @Override boolean match(    String pattern,    String string){
      return string.matches(pattern);
    }
  }
;   private final String description;
  abstract boolean match(  String pattern,  String string);
  MatchType(){
    this.description=name();
  }
  MatchType(  String description){
    this.description=description;
  }
}
  private final String pattern;
  private String string;
  private final MatchType type;
  RegExp(  String regexp,  MatchType type){
    this.pattern=regexp;
    this.type=type;
  }
  @Factory public static Matcher<String> endsWith(  String pattern){
    return new RegExp(pattern,MatchType.end);
  }
  @Override public boolean matchesSafely(  String string){
    this.string=string;
    return type.match(pattern,string);
  }
  @Override public void describeTo(  Description descr){
    descr.appendText("expected something that ").appendText(type.description).appendText(" [").appendText(pattern).appendText("] but got [").appendText(string).appendText("]");
  }
}
