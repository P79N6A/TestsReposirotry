class CombiningResourceIteratorTest {
  @Test void shouldNotCloseDuringIteration(){
    ResourceIterator<Long> it1=spy(asResourceIterator(iterator(1L,2L,3L)));
    ResourceIterator<Long> it2=spy(asResourceIterator(iterator(5L,6L,7L)));
    CombiningResourceIterator<Long> combingIterator=new CombiningResourceIterator<>(iterator(it1,it2));
    assertThat(Iterators.asList(combingIterator),equalTo(asList(1L,2L,3L,5L,6L,7L)));
    verify(it1,never()).close();
    verify(it2,never()).close();
  }
  @Test void closesAllIteratorsOnShutdown(){
    ResourceIterator<Long> it1=spy(asResourceIterator(iterator(1L,2L,3L)));
    ResourceIterator<Long> it2=spy(asResourceIterator(iterator(5L,6L,7L)));
    CombiningResourceIterator<Long> combingIterator=new CombiningResourceIterator<>(iterator(it1,it2));
    int iterations=4;
    while (iterations-- > 0) {
      combingIterator.next();
    }
    combingIterator.close();
    verify(it1).close();
    verify(it2).close();
  }
  @Test void shouldHandleSingleItemIterators(){
    ResourceIterator<Long> it1=asResourceIterator(iterator(1L));
    ResourceIterator<Long> it2=asResourceIterator(iterator(5L,6L,7L));
    CombiningResourceIterator<Long> combingIterator=new CombiningResourceIterator<>(iterator(it1,it2));
    assertThat(Iterators.asList(combingIterator),equalTo(asList(1L,5L,6L,7L)));
  }
}
