class PropertyEntryImpl<T extends PropertyContainer> implements PropertyEntry<T> {
  private final T entity;
  private final String key;
  private final Object value;
  private final Object valueBeforeTx;
  PropertyEntryImpl(  T entity,  String key,  Object value,  Object valueBeforeTx){
    this.entity=entity;
    this.key=key;
    this.value=value;
    this.valueBeforeTx=valueBeforeTx;
  }
  @Override public T entity(){
    return this.entity;
  }
  @Override public String key(){
    return this.key;
  }
  @Override public Object value(){
    return this.value;
  }
  @Override public Object previouslyCommitedValue(){
    return this.valueBeforeTx;
  }
  void compareToAssigned(  PropertyEntry<T> entry){
    basicCompareTo(entry);
    assertEqualsMaybeNull(entry.value(),value(),entry.entity(),entry.key());
  }
  void compareToRemoved(  PropertyEntry<T> entry){
    basicCompareTo(entry);
    try {
      entry.value();
      fail("Should throw IllegalStateException");
    }
 catch (    IllegalStateException e) {
    }
    assertNull(value());
  }
  void basicCompareTo(  PropertyEntry<T> entry){
    assertEquals(entry.entity(),entity());
    assertEquals(entry.key(),key());
    assertEqualsMaybeNull(entry.previouslyCommitedValue(),previouslyCommitedValue(),entry.entity(),entry.key());
  }
  @Override public String toString(){
    return "PropertyEntry[entity=" + entity + ", key="+ key+ ", value="+ value+ ", valueBeforeTx="+ valueBeforeTx+ "]";
  }
  public static <T extends PropertyContainer>void assertEqualsMaybeNull(  Object o1,  Object o2,  T entity,  String key){
    String entityDescription="For " + entity + " and "+ key;
    if (o1 == null || o2 == null) {
      assertSame(entityDescription + ". " + Strings.prettyPrint(o1)+ " != "+ Strings.prettyPrint(o2),o1,o2);
    }
 else {
      assertEquals(entityDescription,Values.of(o1),Values.of(o2));
    }
  }
}
