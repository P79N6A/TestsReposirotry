/** 
 * A convenience wrapper around  {@link org.neo4j.harness.TestServerBuilder}, exposing it as a JUnit {@link org.junit.Rule rule}. Note that it will try to start the web server on the standard 7474 port, but if that is not available (typically because you already have an instance of Neo4j running) it will try other ports. Therefore it is necessary for the test code to use  {@link #httpURI()} and then {@link java.net.URI#resolve(String)} to create the URIs to be invoked.
 */
public class Neo4jRule implements TestRule, TestServerBuilder {
  private TestServerBuilder builder;
  private ServerControls controls;
  private PrintStream dumpLogsOnFailureTarget;
  Neo4jRule(  TestServerBuilder builder){
    this.builder=builder;
  }
  public Neo4jRule(){
    this(TestServerBuilders.newInProcessBuilder());
  }
  public Neo4jRule(  File workingDirectory){
    this(TestServerBuilders.newInProcessBuilder(workingDirectory));
  }
  @Override public Statement apply(  final Statement base,  Description description){
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        try (ServerControls sc=controls=builder.newServer()){
          try {
            base.evaluate();
          }
 catch (          Throwable t) {
            if (dumpLogsOnFailureTarget != null) {
              sc.printLogs(dumpLogsOnFailureTarget);
            }
            throw t;
          }
        }
       }
    }
;
  }
  @Override public ServerControls newServer(){
    throw new UnsupportedOperationException("The server cannot be manually started via this class, it must be used as a JUnit rule.");
  }
  @Override public Neo4jRule withConfig(  Setting<?> key,  String value){
    builder=builder.withConfig(key,value);
    return this;
  }
  @Override public Neo4jRule withConfig(  String key,  String value){
    builder=builder.withConfig(key,value);
    return this;
  }
  @Override public Neo4jRule withExtension(  String mountPath,  Class<?> extension){
    builder=builder.withExtension(mountPath,extension);
    return this;
  }
  @Override public Neo4jRule withExtension(  String mountPath,  String packageName){
    builder=builder.withExtension(mountPath,packageName);
    return this;
  }
  @Override public Neo4jRule withFixture(  File cypherFileOrDirectory){
    builder=builder.withFixture(cypherFileOrDirectory);
    return this;
  }
  @Override public Neo4jRule withFixture(  String fixtureStatement){
    builder=builder.withFixture(fixtureStatement);
    return this;
  }
  @Override public Neo4jRule withFixture(  Function<GraphDatabaseService,Void> fixtureFunction){
    builder=builder.withFixture(fixtureFunction);
    return this;
  }
  @Override public Neo4jRule copyFrom(  File sourceDirectory){
    builder=builder.copyFrom(sourceDirectory);
    return this;
  }
  @Override public Neo4jRule withProcedure(  Class<?> procedureClass){
    builder=builder.withProcedure(procedureClass);
    return this;
  }
  @Override public Neo4jRule withFunction(  Class<?> functionClass){
    builder=builder.withFunction(functionClass);
    return this;
  }
  @Override public Neo4jRule withAggregationFunction(  Class<?> functionClass){
    builder=builder.withAggregationFunction(functionClass);
    return this;
  }
  public Neo4jRule dumpLogsOnFailure(  PrintStream out){
    dumpLogsOnFailureTarget=out;
    return this;
  }
  public URI boltURI(){
    if (controls == null) {
      throw new IllegalStateException("Cannot access instance URI before or after the test runs.");
    }
    return controls.boltURI();
  }
  public URI httpURI(){
    if (controls == null) {
      throw new IllegalStateException("Cannot access instance URI before or after the test runs.");
    }
    return controls.httpURI();
  }
  public URI httpsURI(){
    if (controls == null) {
      throw new IllegalStateException("Cannot access instance URI before or after the test runs.");
    }
    return controls.httpsURI().orElseThrow(() -> new IllegalStateException("HTTPS connector is not configured"));
  }
  public GraphDatabaseService getGraphDatabaseService(){
    return controls.graph();
  }
  public Configuration getConfig(){
    return controls.config();
  }
}
