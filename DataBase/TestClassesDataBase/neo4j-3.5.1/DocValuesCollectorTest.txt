final class DocValuesCollectorTest {
  @Test void shouldStartWithEmptyMatchingDocs(){
    DocValuesCollector collector=new DocValuesCollector();
    assertEquals(emptyList(),collector.getMatchingDocs());
  }
  @Test void shouldCollectAllHitsPerSegment() throws Exception {
    DocValuesCollector collector=new DocValuesCollector();
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.collect(1);
    collector.collect(3);
    collector.collect(5);
    collector.collect(9);
    assertEquals(4,collector.getTotalHits());
    List<DocValuesCollector.MatchingDocs> allMatchingDocs=collector.getMatchingDocs();
    assertEquals(1,allMatchingDocs.size());
    DocValuesCollector.MatchingDocs matchingDocs=allMatchingDocs.get(0);
    assertSame(readerStub.getContext(),matchingDocs.context);
    assertEquals(4,matchingDocs.totalHits);
    DocIdSetIterator idIterator=matchingDocs.docIdSet.iterator();
    assertEquals(1,idIterator.nextDoc());
    assertEquals(3,idIterator.nextDoc());
    assertEquals(5,idIterator.nextDoc());
    assertEquals(9,idIterator.nextDoc());
    assertEquals(DocIdSetIterator.NO_MORE_DOCS,idIterator.nextDoc());
  }
  @Test void shouldCollectOneMatchingDocsPerSegment() throws Exception {
    DocValuesCollector collector=new DocValuesCollector();
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.collect(1);
    collector.collect(3);
    collector.doSetNextReader(readerStub.getContext());
    collector.collect(5);
    collector.collect(9);
    assertEquals(4,collector.getTotalHits());
    List<DocValuesCollector.MatchingDocs> allMatchingDocs=collector.getMatchingDocs();
    assertEquals(2,allMatchingDocs.size());
    DocValuesCollector.MatchingDocs matchingDocs=allMatchingDocs.get(0);
    assertSame(readerStub.getContext(),matchingDocs.context);
    assertEquals(2,matchingDocs.totalHits);
    DocIdSetIterator idIterator=matchingDocs.docIdSet.iterator();
    assertEquals(1,idIterator.nextDoc());
    assertEquals(3,idIterator.nextDoc());
    assertEquals(DocIdSetIterator.NO_MORE_DOCS,idIterator.nextDoc());
    matchingDocs=allMatchingDocs.get(1);
    assertSame(readerStub.getContext(),matchingDocs.context);
    assertEquals(2,matchingDocs.totalHits);
    idIterator=matchingDocs.docIdSet.iterator();
    assertEquals(5,idIterator.nextDoc());
    assertEquals(9,idIterator.nextDoc());
    assertEquals(DocIdSetIterator.NO_MORE_DOCS,idIterator.nextDoc());
  }
  @Test void shouldNotSaveScoresWhenNotRequired() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(false);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.collect(1);
    DocValuesCollector.MatchingDocs matchingDocs=collector.getMatchingDocs().get(0);
    assertNull(matchingDocs.scores);
  }
  @Test void shouldSaveScoresWhenRequired() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(true);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.setScorer(constantScorer(13.42f));
    collector.collect(1);
    DocValuesCollector.MatchingDocs matchingDocs=collector.getMatchingDocs().get(0);
    assertArrayEquals(new float[]{13.42f},matchingDocs.scores,0.001f);
  }
  @Test void shouldSaveScoresInADenseArray() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(true);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.setScorer(constantScorer(1.0f));
    collector.collect(1);
    collector.setScorer(constantScorer(41.0f));
    collector.collect(41);
    DocValuesCollector.MatchingDocs matchingDocs=collector.getMatchingDocs().get(0);
    assertArrayEquals(new float[]{1.0f,41.0f},matchingDocs.scores,0.001f);
  }
  @Test void shouldDynamicallyResizeScoresArray() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(true);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.setScorer(constantScorer(1.0f));
    for (int i=0; i < 42; i++) {
      collector.collect(i);
    }
    DocValuesCollector.MatchingDocs matchingDocs=collector.getMatchingDocs().get(0);
    float[] scores=new float[42];
    Arrays.fill(scores,1.0f);
    assertArrayEquals(scores,matchingDocs.scores,0.001f);
  }
  @Test void shouldReturnIndexHitsInIndexOrderWhenNoSortIsGiven() throws Exception {
    DocValuesCollector collector=new DocValuesCollector();
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.collect(1);
    collector.collect(2);
    IndexHits<Document> indexHits=collector.getIndexHits(null);
    assertEquals(2,indexHits.size());
    assertEquals("1",indexHits.next().get("id"));
    assertEquals("2",indexHits.next().get("id"));
    assertFalse(indexHits.hasNext());
  }
  @Test void shouldReturnIndexHitsOrderedByRelevance() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(true);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.setScorer(constantScorer(1.0f));
    collector.collect(1);
    collector.setScorer(constantScorer(2.0f));
    collector.collect(2);
    IndexHits<Document> indexHits=collector.getIndexHits(Sort.RELEVANCE);
    assertEquals(2,indexHits.size());
    assertEquals("2",indexHits.next().get("id"));
    assertEquals(2.0f,indexHits.currentScore(),0.001f);
    assertEquals("1",indexHits.next().get("id"));
    assertEquals(1.0f,indexHits.currentScore(),0.001f);
    assertFalse(indexHits.hasNext());
  }
  @Test void shouldReturnIndexHitsInGivenSortOrder() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(false);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(43);
    collector.doSetNextReader(readerStub.getContext());
    collector.collect(1);
    collector.collect(3);
    collector.collect(37);
    collector.collect(42);
    Sort byIdDescending=new Sort(new SortField("id",SortField.Type.LONG,true));
    IndexHits<Document> indexHits=collector.getIndexHits(byIdDescending);
    assertEquals(4,indexHits.size());
    assertEquals("42",indexHits.next().get("id"));
    assertEquals("37",indexHits.next().get("id"));
    assertEquals("3",indexHits.next().get("id"));
    assertEquals("1",indexHits.next().get("id"));
    assertFalse(indexHits.hasNext());
  }
  @Test void shouldSilentlyMergeAllSegments() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(false);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.collect(1);
    collector.doSetNextReader(readerStub.getContext());
    collector.collect(2);
    IndexHits<Document> indexHits=collector.getIndexHits(null);
    assertEquals(2,indexHits.size());
    assertEquals("1",indexHits.next().get("id"));
    assertEquals("2",indexHits.next().get("id"));
    assertFalse(indexHits.hasNext());
  }
  @Test void shouldReturnEmptyIteratorWhenNoHits() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(false);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    IndexHits<Document> indexHits=collector.getIndexHits(null);
    assertEquals(0,indexHits.size());
    assertEquals(Float.NaN,indexHits.currentScore(),0.001f);
    assertFalse(indexHits.hasNext());
  }
  @Test void shouldReadDocValuesInIndexOrder() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(false);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.collect(1);
    collector.collect(2);
    DocValuesCollector.LongValuesIterator valuesIterator=collector.getValuesIterator("id");
    assertEquals(2,valuesIterator.remaining());
    assertEquals(1,valuesIterator.next());
    assertEquals(2,valuesIterator.next());
    assertFalse(valuesIterator.hasNext());
  }
  @Test void shouldSilentlyMergeSegmentsWhenReadingDocValues() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(false);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.collect(1);
    collector.doSetNextReader(readerStub.getContext());
    collector.collect(2);
    DocValuesCollector.LongValuesIterator valuesIterator=collector.getValuesIterator("id");
    assertEquals(2,valuesIterator.remaining());
    assertEquals(1,valuesIterator.next());
    assertEquals(2,valuesIterator.next());
    assertFalse(valuesIterator.hasNext());
  }
  @Test void shouldReturnEmptyIteratorWhenNoDocValues(){
    DocValuesCollector collector=new DocValuesCollector(false);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    DocValuesCollector.LongValuesIterator valuesIterator=collector.getValuesIterator("id");
    assertEquals(0,valuesIterator.remaining());
    assertFalse(valuesIterator.hasNext());
  }
  @Test void shouldReturnDocValuesInIndexOrderWhenNoSortIsGiven() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(false);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.collect(1);
    collector.collect(2);
    LongIterator valuesIterator=collector.getSortedValuesIterator("id",null);
    assertEquals(1,valuesIterator.next());
    assertEquals(2,valuesIterator.next());
    assertFalse(valuesIterator.hasNext());
  }
  @Test void shouldReturnDocValuesInRelevanceOrder() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(true);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.setScorer(constantScorer(1.0f));
    collector.collect(1);
    collector.setScorer(constantScorer(2.0f));
    collector.collect(2);
    LongIterator valuesIterator=collector.getSortedValuesIterator("id",Sort.RELEVANCE);
    assertEquals(2,valuesIterator.next());
    assertEquals(1,valuesIterator.next());
    assertFalse(valuesIterator.hasNext());
  }
  @Test void shouldReturnDocValuesInGivenOrder() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(false);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.collect(1);
    collector.collect(2);
    Sort byIdDescending=new Sort(new SortField("id",SortField.Type.LONG,true));
    LongIterator valuesIterator=collector.getSortedValuesIterator("id",byIdDescending);
    assertEquals(2,valuesIterator.next());
    assertEquals(1,valuesIterator.next());
    assertFalse(valuesIterator.hasNext());
  }
  @Test void shouldSilentlyMergeSegmentsWhenReturnDocValuesInOrder() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(true);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    collector.setScorer(constantScorer(1.0f));
    collector.collect(1);
    collector.doSetNextReader(readerStub.getContext());
    collector.setScorer(constantScorer(2.0f));
    collector.collect(2);
    LongIterator valuesIterator=collector.getSortedValuesIterator("id",Sort.RELEVANCE);
    assertEquals(2,valuesIterator.next());
    assertEquals(1,valuesIterator.next());
    assertFalse(valuesIterator.hasNext());
  }
  @Test void shouldReturnEmptyIteratorWhenNoDocValuesInOrder() throws Exception {
    DocValuesCollector collector=new DocValuesCollector(false);
    IndexReaderStub readerStub=indexReaderWithMaxDocs(42);
    collector.doSetNextReader(readerStub.getContext());
    LongIterator valuesIterator=collector.getSortedValuesIterator("id",Sort.RELEVANCE);
    assertFalse(valuesIterator.hasNext());
  }
  private static IndexReaderStub indexReaderWithMaxDocs(  int maxDocs){
    NumericDocValues identityValues=new NumericDocValues(){
      @Override public long get(      int docID){
        return docID;
      }
    }
;
    IndexReaderStub stub=new IndexReaderStub(identityValues);
    stub.setElements(new String[maxDocs]);
    return stub;
  }
  private static Scorer constantScorer(  float score){
    return new ConstantScoreScorer(null,score,(DocIdSetIterator)null);
  }
}
