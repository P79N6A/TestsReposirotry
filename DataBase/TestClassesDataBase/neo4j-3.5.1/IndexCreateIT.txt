public class IndexCreateIT extends KernelIntegrationTest {
  private static final IndexCreator INDEX_CREATOR=(schemaWrite,descriptor,providerName) -> schemaWrite.indexCreate(descriptor,providerName,Optional.empty());
  private static final IndexCreator UNIQUE_CONSTRAINT_CREATOR=SchemaWrite::uniquePropertyConstraintCreate;
  @Test public void shouldCreateIndexWithSpecificExistingProviderName() throws KernelException {
    shouldCreateWithSpecificExistingProviderName(INDEX_CREATOR);
  }
  @Test public void shouldCreateUniquePropertyConstraintWithSpecificExistingProviderName() throws KernelException {
    shouldCreateWithSpecificExistingProviderName(UNIQUE_CONSTRAINT_CREATOR);
  }
  @Test public void shouldFailCreateIndexWithNonExistentProviderName() throws KernelException {
    shouldFailWithNonExistentProviderName(INDEX_CREATOR);
  }
  @Test public void shouldFailCreateUniquePropertyConstraintWithNonExistentProviderName() throws KernelException {
    shouldFailWithNonExistentProviderName(UNIQUE_CONSTRAINT_CREATOR);
  }
  void shouldFailWithNonExistentProviderName(  IndexCreator creator) throws KernelException {
    SchemaWrite schemaWrite=schemaWriteInNewTransaction();
    try {
      creator.create(schemaWrite,forLabel(0,0),"something-completely-different");
      fail("Should have failed");
    }
 catch (    IndexProviderNotFoundException e) {
    }
  }
  void shouldCreateWithSpecificExistingProviderName(  IndexCreator creator) throws KernelException {
    int labelId=0;
    for (    GraphDatabaseSettings.SchemaIndex indexSetting : GraphDatabaseSettings.SchemaIndex.values()) {
      SchemaWrite schemaWrite=schemaWriteInNewTransaction();
      String provider=indexSetting.providerName();
      LabelSchemaDescriptor descriptor=forLabel(labelId++,0);
      creator.create(schemaWrite,descriptor,provider);
      commit();
      assertEquals(provider,indexingService.getIndexProxy(descriptor).getDescriptor().providerDescriptor().name());
    }
  }
interface IndexCreator {
    void create(    SchemaWrite schemaWrite,    LabelSchemaDescriptor descriptor,    String providerName) throws SchemaKernelException ;
  }
}
