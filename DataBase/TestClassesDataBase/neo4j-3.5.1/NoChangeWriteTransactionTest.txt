public class NoChangeWriteTransactionTest {
  @Rule public final DatabaseRule dbr=new ImpermanentDatabaseRule();
  @Test public void shouldIdentifyTransactionWithNetZeroChangesAsReadOnly(){
    GraphDatabaseAPI db=dbr.getGraphDatabaseAPI();
    TransactionIdStore txIdStore=db.getDependencyResolver().resolveDependency(TransactionIdStore.class);
    long startTxId=txIdStore.getLastCommittedTransactionId();
    Node node=createEmptyNode(db);
    try (Transaction tx=db.beginTx()){
      node.addLabel(TestLabels.LABEL_ONE);
      node.removeLabel(TestLabels.LABEL_ONE);
      tx.success();
    }
     assertEquals("Expected last txId to be what it started at + 2 (1 for the empty node, and one for the label)",startTxId + 2,txIdStore.getLastCommittedTransactionId());
  }
  @Test public void shouldDetectNoChangesInCommitsAlsoForTheIndexes(){
    GraphDatabaseAPI db=dbr.getGraphDatabaseAPI();
    TransactionIdStore txIdStore=db.getDependencyResolver().resolveDependency(TransactionIdStore.class);
    long startTxId=txIdStore.getLastCommittedTransactionId();
    Node node=createEmptyNode(db);
    Index<Node> index=createNodeIndex(db);
    try (Transaction tx=db.beginTx()){
      node.addLabel(TestLabels.LABEL_ONE);
      node.removeLabel(TestLabels.LABEL_ONE);
      index.add(node,"key","value");
      index.remove(node,"key","value");
      tx.success();
    }
     assertEquals("Expected last txId to be what it started at + 3 " + "(1 for the empty node, 1 for index, and one for the label)",startTxId + 3,txIdStore.getLastCommittedTransactionId());
  }
  private Index<Node> createNodeIndex(  GraphDatabaseAPI db){
    try (Transaction tx=db.beginTx()){
      Index<Node> index=db.index().forNodes("test",stringMap(PROVIDER,IDENTIFIER));
      tx.success();
      return index;
    }
   }
  private Node createEmptyNode(  GraphDatabaseService db){
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode();
      tx.success();
      return node;
    }
   }
}
