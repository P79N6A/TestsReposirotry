public class JmxQueryProcedureTest {
  private MBeanServer jmxServer;
  private ObjectName beanName;
  private String attributeName;
  private final ResourceTracker resourceTracker=new StubResourceManager();
  @Test public void shouldHandleBasicMBean() throws Throwable {
    when(jmxServer.getAttribute(beanName,"name")).thenReturn("Hello, world!");
    JmxQueryProcedure procedure=new JmxQueryProcedure(ProcedureSignature.procedureName("bob"),jmxServer);
    RawIterator<Object[],ProcedureException> result=procedure.apply(null,new Object[]{"*:*"},resourceTracker);
    assertThat(asList(result),contains(equalTo(new Object[]{"org.neo4j:chevyMakesTheTruck=bobMcCoshMakesTheDifference","This is a description",map(attributeName,map("description","This is the attribute desc.","value","Hello, world!"))})));
  }
  @Test public void shouldHandleMBeanThatThrowsOnGetAttribute() throws Throwable {
    when(jmxServer.getAttribute(beanName,"name")).thenThrow(new RuntimeMBeanException(new UnsupportedOperationException("Haha, screw discoverable services!")));
    JmxQueryProcedure procedure=new JmxQueryProcedure(ProcedureSignature.procedureName("bob"),jmxServer);
    RawIterator<Object[],ProcedureException> result=procedure.apply(null,new Object[]{"*:*"},resourceTracker);
    assertThat(asList(result),contains(equalTo(new Object[]{"org.neo4j:chevyMakesTheTruck=bobMcCoshMakesTheDifference","This is a description",map(attributeName,map("description","This is the attribute desc.","value",null))})));
  }
  @Test public void shouldHandleCompositeAttributes() throws Throwable {
    ObjectName beanName=new ObjectName("org.neo4j:chevyMakesTheTruck=bobMcCoshMakesTheDifference");
    when(jmxServer.queryNames(new ObjectName("*:*"),null)).thenReturn(asSet(beanName));
    when(jmxServer.getMBeanInfo(beanName)).thenReturn(new MBeanInfo("org.neo4j.SomeMBean","This is a description",new MBeanAttributeInfo[]{new MBeanAttributeInfo("name","differenceMaker","Who makes the difference?",true,false,false)},null,null,null));
    when(jmxServer.getAttribute(beanName,"name")).thenReturn(new CompositeDataSupport(new CompositeType("myComposite","Composite description",new String[]{"key1","key2"},new String[]{"Can't be empty","Also can't be empty"},new OpenType<?>[]{SimpleType.STRING,SimpleType.INTEGER}),map("key1","Hello","key2",123)));
    JmxQueryProcedure procedure=new JmxQueryProcedure(ProcedureSignature.procedureName("bob"),jmxServer);
    RawIterator<Object[],ProcedureException> result=procedure.apply(null,new Object[]{"*:*"},resourceTracker);
    assertThat(asList(result),contains(equalTo(new Object[]{"org.neo4j:chevyMakesTheTruck=bobMcCoshMakesTheDifference","This is a description",map(attributeName,map("description","Who makes the difference?","value",map("description","Composite description","properties",map("key1","Hello","key2",123))))})));
  }
  @Test public void shouldConvertAllStandardBeansWithoutError() throws Throwable {
    MBeanServer jmxServer=ManagementFactory.getPlatformMBeanServer();
    JmxQueryProcedure procedure=new JmxQueryProcedure(ProcedureSignature.procedureName("bob"),jmxServer);
    RawIterator<Object[],ProcedureException> result=procedure.apply(null,new Object[]{"*:*"},resourceTracker);
    assertThat(asList(result).size(),equalTo(jmxServer.getMBeanCount()));
  }
  @Before public void setup() throws Throwable {
    jmxServer=mock(MBeanServer.class);
    beanName=new ObjectName("org.neo4j:chevyMakesTheTruck=bobMcCoshMakesTheDifference");
    attributeName="name";
    when(jmxServer.queryNames(new ObjectName("*:*"),null)).thenReturn(asSet(beanName));
    when(jmxServer.getMBeanInfo(beanName)).thenReturn(new MBeanInfo("org.neo4j.SomeMBean","This is a description",new MBeanAttributeInfo[]{new MBeanAttributeInfo(attributeName,"someType","This is the attribute desc.",true,false,false)},null,null,null));
  }
}
