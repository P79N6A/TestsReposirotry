public class TestImpermanentGraphDatabase {
  private GraphDatabaseService db;
  @Before public void createDb(){
    db=new TestGraphDatabaseFactory().newImpermanentDatabase();
  }
  @After public void tearDown(){
    db.shutdown();
  }
  @Test public void should_keep_data_between_start_and_shutdown(){
    createNode();
    assertEquals("Expected one new node",1,nodeCount());
  }
  @Test public void data_should_not_survive_shutdown(){
    createNode();
    db.shutdown();
    createDb();
    assertEquals("Should not see anything.",0,nodeCount());
  }
  @Test public void should_remove_all_data(){
    try (Transaction tx=db.beginTx()){
      RelationshipType relationshipType=RelationshipType.withName("R");
      Node n1=db.createNode();
      Node n2=db.createNode();
      Node n3=db.createNode();
      n1.createRelationshipTo(n2,relationshipType);
      n2.createRelationshipTo(n1,relationshipType);
      n3.createRelationshipTo(n1,relationshipType);
      tx.success();
    }
     cleanDatabaseContent(db);
    assertThat(nodeCount(),is(0L));
  }
  private void cleanDatabaseContent(  GraphDatabaseService db){
    try (Transaction tx=db.beginTx()){
      db.getAllRelationships().forEach(Relationship::delete);
      db.getAllNodes().forEach(Node::delete);
      tx.success();
    }
   }
  private long nodeCount(){
    Transaction transaction=db.beginTx();
    long count=Iterables.count(db.getAllNodes());
    transaction.close();
    return count;
  }
  private void createNode(){
    try (Transaction tx=db.beginTx()){
      db.createNode();
      tx.success();
    }
   }
}
