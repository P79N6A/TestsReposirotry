/** 
 * Tests for error messages and graceful handling of problems with the transactional endpoint.
 */
public class TransactionErrorIT extends AbstractRestFunctionalTestBase {
  @Test public void begin__commit_with_invalid_cypher() throws Exception {
    long nodesInDatabaseBeforeTransaction=countNodes();
    HTTP.Response response=POST(txUri(),quotedJson("{ 'statements': [ { 'statement': 'CREATE (n)' } ] }"));
    String commitResource=response.stringFromContent("commit");
    response=POST(commitResource,quotedJson("{ 'statements': [ { 'statement': 'CREATE ;;' } ] }"));
    assertThat(response.status(),is(200));
    assertThat(response,hasErrors(SyntaxError));
    assertThat(response,containsNoStackTraces());
    assertThat(countNodes(),equalTo(nodesInDatabaseBeforeTransaction));
  }
  @Test public void begin__commit_with_malformed_json() throws Exception {
    long nodesInDatabaseBeforeTransaction=countNodes();
    HTTP.Response begin=POST(txUri(),quotedJson("{ 'statements': [ { 'statement': 'CREATE (n)' } ] }"));
    String commitResource=begin.stringFromContent("commit");
    HTTP.Response response=POST(commitResource,rawPayload("[{asd,::}]"));
    assertThat(response.status(),is(200));
    assertThat(response,hasErrors(InvalidFormat));
    assertThat(countNodes(),equalTo(nodesInDatabaseBeforeTransaction));
  }
  @SuppressWarnings("ResultOfMethodCallIgnored") @Test public void begin_and_execute_periodic_commit_that_fails() throws Exception {
    File file=File.createTempFile("begin_and_execute_periodic_commit_that_fails",".csv").getAbsoluteFile();
    try {
      PrintStream out=new PrintStream(new FileOutputStream(file));
      out.println("1");
      out.println("2");
      out.println("0");
      out.println("3");
      out.close();
      String url=file.toURI().toURL().toString().replace("\\","\\\\");
      String query="USING PERIODIC COMMIT 1 LOAD CSV FROM \\\"" + url + "\\\" AS line CREATE ({name: 1/toInt(line[0])});";
      HTTP.RawPayload payload=quotedJson("{ 'statements': [ { 'statement': '" + query + "' } ] }");
      HTTP.Response response=POST(txCommitUri(),payload);
      assertThat(response.status(),equalTo(200));
      assertThat(response,hasErrors(Status.Statement.ArithmeticError));
      JsonNode message=response.get("errors").get(0).get("message");
      assertTrue("Expected LOAD CSV line number information",message.toString().contains("on line 3. Possibly the last row committed during import is line 2. " + "Note that this information might not be accurate."));
    }
  finally {
      file.delete();
    }
  }
  private long countNodes(){
    return TransactionMatchers.countNodes(graphdb());
  }
}
