public class DBMSModuleTest {
  @Rule public SuppressOutput suppressOutput=SuppressOutput.suppress(SuppressOutput.System.err,SuppressOutput.System.out);
  @SuppressWarnings("unchecked") @Test public void shouldRegisterAtRootByDefault() throws Exception {
    WebServer webServer=mock(WebServer.class);
    Config config=mock(Config.class);
    CommunityNeoServer neoServer=mock(CommunityNeoServer.class);
    when(neoServer.baseUri()).thenReturn(new URI("http://localhost:7575"));
    when(neoServer.getWebServer()).thenReturn(webServer);
    when(config.get(GraphDatabaseSettings.auth_enabled)).thenReturn(true);
    DBMSModule module=new DBMSModule(webServer,config,() -> new DiscoverableURIs.Builder().build());
    module.start();
    verify(webServer).addJAXRSClasses(anyList(),anyString(),isNull());
  }
  @SuppressWarnings("unchecked") @Test public void shouldNotRegisterUserServiceWhenAuthDisabled() throws Exception {
    WebServer webServer=mock(WebServer.class);
    Config config=mock(Config.class);
    CommunityNeoServer neoServer=mock(CommunityNeoServer.class);
    when(neoServer.baseUri()).thenReturn(new URI("http://localhost:7575"));
    when(neoServer.getWebServer()).thenReturn(webServer);
    when(config.get(GraphDatabaseSettings.auth_enabled)).thenReturn(false);
    DBMSModule module=new DBMSModule(webServer,config,() -> new DiscoverableURIs.Builder().build());
    module.start();
    verify(webServer).addJAXRSClasses(anyList(),anyString(),isNull());
    verify(webServer,never()).addJAXRSClasses(argThat(new ArgumentMatcher<List<String>>(){
      @Override public boolean matches(      List<String> argument){
        return argument.contains(UserService.class.getName());
      }
      public String toString(){
        return "<List containing " + UserService.class.getName() + ">";
      }
    }
),anyString(),anyCollection());
  }
}
