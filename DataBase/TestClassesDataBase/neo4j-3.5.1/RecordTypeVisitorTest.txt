public class RecordTypeVisitorTest {
  @Rule public CompilationRule compilation=new CompilationRule();
  private TypeMirrorTestUtils typeMirrorTestUtils;
  private RecordTypeVisitor visitor;
  @Before public void prepare(){
    Types types=compilation.getTypes();
    Elements elements=compilation.getElements();
    TypeMirrorUtils typeMirrors=new TypeMirrorUtils(types,elements);
    typeMirrorTestUtils=new TypeMirrorTestUtils(compilation);
    visitor=new RecordTypeVisitor(types,typeMirrors);
  }
  @Test public void validates_supported_record(){
    TypeMirror recordStreamType=typeMirrorTestUtils.typeOf(Stream.class,ValidRecord.class);
    assertThat(visitor.visit(recordStreamType)).isEmpty();
  }
  @Test public void does_not_validate_record_with_nonpublic_fields(){
    TypeMirror recordStreamType=typeMirrorTestUtils.typeOf(Stream.class,InvalidRecord.class);
    assertThat(visitor.visit(recordStreamType)).hasSize(1).extracting(CompilationMessage::getCategory,CompilationMessage::getContents).containsExactly(tuple(Diagnostic.Kind.ERROR,"Record definition error: field InvalidRecord#foo must" + " be public"));
  }
}
