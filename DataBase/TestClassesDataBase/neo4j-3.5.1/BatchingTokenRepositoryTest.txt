public class BatchingTokenRepositoryTest {
  @Rule public final PageCacheAndDependenciesRule storage=new PageCacheAndDependenciesRule();
  @Test public void shouldDedupLabelIds(){
    BatchingLabelTokenRepository repo=new BatchingLabelTokenRepository(mock(TokenStore.class));
    long[] ids=repo.getOrCreateIds(new String[]{"One","Two","One"});
    assertTrue(NodeLabelsField.isSane(ids));
  }
  @Test public void shouldSortLabelIds(){
    BatchingLabelTokenRepository repo=new BatchingLabelTokenRepository(mock(TokenStore.class));
    long[] expected=new long[]{repo.getOrCreateId("One"),repo.getOrCreateId("Two"),repo.getOrCreateId("Three")};
    long[] ids=repo.getOrCreateIds(new String[]{"Two","One","Three"});
    assertArrayEquals(expected,ids);
    assertTrue(NodeLabelsField.isSane(ids));
  }
  @Test public void shouldRespectExistingTokens(){
    TokenStore<RelationshipTypeTokenRecord> tokenStore=mock(TokenStore.class);
    int previousHighId=5;
    when(tokenStore.getHighId()).thenReturn((long)previousHighId);
    BatchingRelationshipTypeTokenRepository repo=new BatchingRelationshipTypeTokenRepository(tokenStore);
    verify(tokenStore).getHighId();
    int tokenId=repo.getOrCreateId("NEW_ONE");
    assertEquals(previousHighId,tokenId);
  }
  @Test public void shouldFlushNewTokens(){
    try (PageCache pageCache=storage.pageCache();NeoStores stores=new StoreFactory(storage.directory().databaseLayout(),Config.defaults(),new DefaultIdGeneratorFactory(storage.fileSystem()),pageCache,storage.fileSystem(),NullLogProvider.getInstance(),EmptyVersionContextSupplier.EMPTY).openNeoStores(true,StoreType.PROPERTY_KEY_TOKEN,StoreType.PROPERTY_KEY_TOKEN_NAME)){
      TokenStore<PropertyKeyTokenRecord> tokenStore=stores.getPropertyKeyTokenStore();
      int rounds=3;
      int tokensPerRound=4;
      try (BatchingPropertyKeyTokenRepository repo=new BatchingPropertyKeyTokenRepository(tokenStore)){
        int expectedId=0;
        int tokenNameAsInt=0;
        for (int round=0; round < rounds; round++) {
          for (int i=0; i < tokensPerRound; i++) {
            int tokenId=repo.getOrCreateId(String.valueOf(tokenNameAsInt++));
            assertEquals(expectedId + i,tokenId);
          }
          assertEquals(expectedId,tokenStore.getHighId());
          repo.flush();
          assertEquals(expectedId + tokensPerRound,tokenStore.getHighId());
          expectedId+=tokensPerRound;
        }
      }
       List<NamedToken> tokens=tokenStore.getTokens();
      assertEquals(tokensPerRound * rounds,tokens.size());
      for (      NamedToken token : tokens) {
        assertEquals(token.id(),parseInt(token.name()));
      }
    }
   }
}
