@ExtendWith(EphemeralFileSystemExtension.class) class FailureStorageTest {
  @Inject private EphemeralFileSystemAbstraction fs;
  private IndexFolderLayout indexFolderLayout;
  @BeforeEach void before(){
    File rootDirectory=new File("dir");
    fs.mkdirs(rootDirectory);
    indexFolderLayout=new IndexFolderLayout(rootDirectory);
  }
  @Test void shouldReserveFailureFile() throws Exception {
    FailureStorage storage=new FailureStorage(fs,indexFolderLayout);
    storage.reserveForIndex();
    File failureFile=storage.failureFile();
    assertTrue(fs.fileExists(failureFile));
    assertTrue(fs.getFileSize(failureFile) > 100);
  }
  @Test void shouldStoreFailure() throws Exception {
    FailureStorage storage=new FailureStorage(fs,indexFolderLayout);
    storage.reserveForIndex();
    String failure=format("A failure message%nspanning%nmultiple lines.");
    storage.storeIndexFailure(failure);
    File failureFile=storage.failureFile();
    assertTrue(fs.fileExists(failureFile));
    assertTrue(fs.getFileSize(failureFile) > 100);
    assertEquals(failure,storage.loadIndexFailure());
  }
  @Test void shouldClearFailure() throws Exception {
    FailureStorage storage=new FailureStorage(fs,indexFolderLayout);
    storage.reserveForIndex();
    String failure=format("A failure message%nspanning%nmultiple lines.");
    storage.storeIndexFailure(failure);
    File failureFile=storage.failureFile();
    assertTrue(fs.fileExists(failureFile));
    assertTrue(fs.getFileSize(failureFile) > 100);
    storage.clearForIndex();
    assertFalse(fs.fileExists(failureFile));
  }
  @Test void shouldAppendFailureIfAlreadyExists() throws Exception {
    FailureStorage storage=new FailureStorage(fs,indexFolderLayout);
    storage.reserveForIndex();
    String failure1="Once upon a time there was a first failure";
    String failure2="Then there was another";
    storage.storeIndexFailure(failure1);
    storage.storeIndexFailure(failure2);
    String allFailures=storage.loadIndexFailure();
    assertThat(allFailures,containsString(failure1));
    assertThat(allFailures,containsString(failure2));
  }
}
