public class TransientErrorIT extends AbstractRestFunctionalTestBase {
  @Rule public final OtherThreadRule<Void> otherThread=new OtherThreadRule<>();
  @Test(timeout=60000) public void deadlockShouldRollbackTransaction() throws Exception {
    HTTP.Response initial=POST(txCommitUri(),quotedJson("{'statements': [{'statement': 'CREATE (n1 {prop : 1}), (n2 {prop : 2})'}]}"));
    assertThat(initial.status(),is(200));
    assertThat(initial,containsNoErrors());
    HTTP.Response firstInTx1=POST(txUri(),quotedJson("{'statements': [{'statement': 'MATCH (n {prop : 1}) SET n.prop = 3'}]}"));
    final long tx1=extractTxId(firstInTx1);
    HTTP.Response firstInTx2=POST(txUri(),quotedJson("{'statements': [{'statement': 'MATCH (n {prop : 2}) SET n.prop = 4'}]}"));
    long tx2=extractTxId(firstInTx2);
    Future<HTTP.Response> future=otherThread.execute(state -> POST(txUri(tx1),quotedJson("{'statements': [{'statement': 'MATCH (n {prop : 2}) SET n.prop = 5'}]}")));
    HTTP.Response secondInTx2=POST(txUri(tx2),quotedJson("{'statements': [{'statement': 'MATCH (n {prop : 1}) SET n.prop = 6'}]}"));
    HTTP.Response secondInTx1=future.get();
    assertThat(secondInTx1.status(),is(200));
    assertThat(secondInTx2.status(),is(200));
    HTTP.Response failed;
    if (containsError(secondInTx1)) {
      failed=secondInTx1;
    }
 else     if (containsError(secondInTx2)) {
      failed=secondInTx2;
    }
 else {
      failed=null;
      fail("Either tx1 or tx2 is expected to fail");
    }
    assertThat(failed,hasErrors(Status.Transaction.DeadlockDetected));
    HTTP.Response commit=POST(failed.stringFromContent("commit"));
    assertThat(commit.status(),is(404));
  }
  @Test public void unavailableCsvResourceShouldRollbackTransaction() throws JsonParseException {
    HTTP.Response first=POST(txUri(),quotedJson("{'statements': [{'statement': 'CREATE ()'}]}"));
    assertThat(first.status(),is(201));
    assertThat(first,containsNoErrors());
    long txId=extractTxId(first);
    HTTP.Response second=POST(txUri(txId),quotedJson("{'statements': [{'statement': 'LOAD CSV FROM \\\"http://127.0.0.1/null/\\\" AS line " + "CREATE (a {name:line[0]})'}]}"));
    assertThat(second.status(),is(200));
    assertThat(second,hasErrors(Status.Statement.ExternalResourceFailed));
    HTTP.Response commit=POST(second.stringFromContent("commit"));
    assertThat(commit.status(),is(404));
  }
  private static boolean containsError(  HTTP.Response response) throws JsonParseException {
    return response.get("errors").iterator().hasNext();
  }
}
