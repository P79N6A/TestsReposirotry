public class StoreVersionCheckTest {
  private final DefaultFileSystemRule fileSystemRule=new DefaultFileSystemRule();
  private final TestDirectory directory=TestDirectory.testDirectory();
  private final PageCacheRule pageCacheRule=new PageCacheRule();
  @Rule public final RuleChain ruleChain=RuleChain.outerRule(directory).around(fileSystemRule).around(pageCacheRule);
  @Test public void shouldFailIfFileDoesNotExist(){
    File missingFile=new File(directory.directory(),"missing-file");
    PageCache pageCache=pageCacheRule.getPageCache(fileSystemRule.get());
    StoreVersionCheck storeVersionCheck=new StoreVersionCheck(pageCache);
    StoreVersionCheck.Result result=storeVersionCheck.hasVersion(missingFile,"version");
    assertFalse(result.outcome.isSuccessful());
    assertEquals(StoreVersionCheck.Result.Outcome.missingStoreFile,result.outcome);
    assertNull(result.actualVersion);
  }
  @Test public void shouldReportShortFileDoesNotHaveSpecifiedVersion() throws IOException {
    File shortFile=fileContaining(fileSystemRule.get(),"nothing interesting");
    StoreVersionCheck storeVersionCheck=new StoreVersionCheck(pageCacheRule.getPageCache(fileSystemRule.get()));
    StoreVersionCheck.Result result=storeVersionCheck.hasVersion(shortFile,"version");
    assertFalse(result.outcome.isSuccessful());
    assertEquals(StoreVersionCheck.Result.Outcome.storeVersionNotFound,result.outcome);
    assertNull(result.actualVersion);
  }
  @Test public void shouldReportFileWithIncorrectVersion() throws IOException {
    File neoStore=emptyFile(fileSystemRule.get());
    long v1=MetaDataStore.versionStringToLong("V1");
    PageCache pageCache=pageCacheRule.getPageCache(fileSystemRule.get());
    MetaDataStore.setRecord(pageCache,neoStore,MetaDataStore.Position.STORE_VERSION,v1);
    StoreVersionCheck storeVersionCheck=new StoreVersionCheck(pageCache);
    StoreVersionCheck.Result result=storeVersionCheck.hasVersion(neoStore,"V2");
    assertFalse(result.outcome.isSuccessful());
    assertEquals(StoreVersionCheck.Result.Outcome.unexpectedStoreVersion,result.outcome);
    assertEquals("V1",result.actualVersion);
  }
  @Test public void shouldReportFileWithCorrectVersion() throws IOException {
    File neoStore=emptyFile(fileSystemRule.get());
    long v1=MetaDataStore.versionStringToLong("V1");
    PageCache pageCache=pageCacheRule.getPageCache(fileSystemRule.get());
    MetaDataStore.setRecord(pageCache,neoStore,MetaDataStore.Position.STORE_VERSION,v1);
    StoreVersionCheck storeVersionCheck=new StoreVersionCheck(pageCache);
    StoreVersionCheck.Result result=storeVersionCheck.hasVersion(neoStore,"V1");
    assertTrue(result.outcome.isSuccessful());
    assertEquals(StoreVersionCheck.Result.Outcome.ok,result.outcome);
    assertNull(result.actualVersion);
  }
  private File emptyFile(  FileSystemAbstraction fs) throws IOException {
    File shortFile=directory.file("empty");
    fs.deleteFile(shortFile);
    fs.create(shortFile).close();
    return shortFile;
  }
  private File fileContaining(  FileSystemAbstraction fs,  String content) throws IOException {
    File shortFile=directory.file("file");
    fs.deleteFile(shortFile);
    try (OutputStream outputStream=fs.openAsOutputStream(shortFile,false)){
      outputStream.write(UTF8.encode(content));
      return shortFile;
    }
   }
}
