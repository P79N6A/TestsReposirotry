public class ListConverterTest {
  @Rule public ExpectedException exception=ExpectedException.none();
  @Test public void shouldHandleNullString(){
    ListConverter converter=new ListConverter(String.class,NTString);
    String listString="null";
    DefaultParameterValue converted=converter.apply(listString);
    assertThat(converted,equalTo(ntList(null,NTString)));
  }
  @Test public void shouldHandleEmptyList(){
    ListConverter converter=new ListConverter(String.class,NTString);
    String listString="[]";
    DefaultParameterValue converted=converter.apply(listString);
    assertThat(converted,equalTo(ntList(emptyList(),NTString)));
  }
  @Test public void shouldHandleEmptyListWithSpaces(){
    ListConverter converter=new ListConverter(String.class,NTString);
    String listString=" [  ]   ";
    DefaultParameterValue converted=converter.apply(listString);
    assertThat(converted,equalTo(ntList(emptyList(),NTString)));
  }
  @Test public void shouldHandleSingleQuotedValue(){
    ListConverter converter=new ListConverter(String.class,NTString);
    String listString="['foo', 'bar']";
    DefaultParameterValue converted=converter.apply(listString);
    assertThat(converted,equalTo(ntList(asList("foo","bar"),NTString)));
  }
  @Test public void shouldHandleDoubleQuotedValue(){
    ListConverter converter=new ListConverter(String.class,NTString);
    String listString="[\"foo\", \"bar\"]";
    DefaultParameterValue converted=converter.apply(listString);
    assertThat(converted,equalTo(ntList(asList("foo","bar"),NTString)));
  }
  @Test public void shouldHandleIntegerValue(){
    ListConverter converter=new ListConverter(Long.class,NTInteger);
    String listString="[1337, 42]";
    DefaultParameterValue converted=converter.apply(listString);
    assertThat(converted,equalTo(ntList(asList(1337L,42L),NTInteger)));
  }
  @Test public void shouldHandleFloatValue(){
    ListConverter converter=new ListConverter(Double.class,NTFloat);
    String listSting="[2.718281828, 3.14]";
    DefaultParameterValue converted=converter.apply(listSting);
    assertThat(converted,equalTo(ntList(asList(2.718281828,3.14),NTFloat)));
  }
  @Test public void shouldHandleNullValue(){
    ListConverter converter=new ListConverter(Double.class,NTFloat);
    String listString="[null]";
    DefaultParameterValue converted=converter.apply(listString);
    assertThat(converted,equalTo(ntList(singletonList(null),NTFloat)));
  }
  @Test public void shouldHandleBooleanValues(){
    ListConverter converter=new ListConverter(Boolean.class,NTBoolean);
    String mapString="[false, true]";
    DefaultParameterValue converted=converter.apply(mapString);
    assertThat(converted,equalTo(ntList(asList(false,true),NTBoolean)));
  }
  @SuppressWarnings("unchecked") @Test public void shouldHandleNestedLists(){
    ParameterizedType type=mock(ParameterizedType.class);
    when(type.getActualTypeArguments()).thenReturn(new Type[]{Object.class});
    ListConverter converter=new ListConverter(type,NTList(NTAny));
    String mapString="[42, [42, 1337]]";
    DefaultParameterValue converted=converter.apply(mapString);
    List<Object> list=(List<Object>)converted.value();
    assertThat(list.get(0),equalTo(42L));
    assertThat(list.get(1),equalTo(asList(42L,1337L)));
  }
  @Test public void shouldFailOnInvalidMixedTyoes(){
    ListConverter converter=new ListConverter(Long.class,NTInteger);
    String listString="[1337, 'forty-two']";
    exception.expect(IllegalArgumentException.class);
    exception.expectMessage("Expects a list of Long but got a list of String");
    converter.apply(listString);
  }
  @Test public void shouldPassOnValidMixedTyoes(){
    ListConverter converter=new ListConverter(Object.class,NTAny);
    String listString="[1337, 'forty-two']";
    DefaultParameterValue value=converter.apply(listString);
    assertThat(value,equalTo(ntList(asList(1337L,"forty-two"),NTAny)));
  }
  @SuppressWarnings("unchecked") @Test public void shouldHandleListsOfMaps(){
    ListConverter converter=new ListConverter(Map.class,NTMap);
    String mapString="[{k1: 42}, {k1: 1337}]";
    DefaultParameterValue converted=converter.apply(mapString);
    List<Object> list=(List<Object>)converted.value();
    assertThat(list.get(0),equalTo(map("k1",42L)));
    assertThat(list.get(1),equalTo(map("k1",1337L)));
  }
}
