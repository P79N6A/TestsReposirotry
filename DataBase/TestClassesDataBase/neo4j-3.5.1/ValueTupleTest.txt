class ValueTupleTest {
  @Test void shouldEqual(){
    verifyEquals(tuple(true),tuple(true));
    assertNotEquals(tuple(true),tuple(false));
    verifyEquals(tuple(1,2,3,4L),tuple(1.0,2.0,3,(byte)4));
    assertNotEquals(tuple(2,3,1),tuple(1,2,3));
    assertNotEquals(tuple(1,2,3,4),tuple(1,2,3));
    assertNotEquals(tuple(1,2,3),tuple(1,2,3,4));
    verifyEquals(tuple((Object)new int[]{3}),tuple((Object)new int[]{3}));
    verifyEquals(tuple((Object)new int[]{3}),tuple((Object)new byte[]{3}));
    verifyEquals(tuple('a',new int[]{3},"c"),tuple('a',new int[]{3},"c"));
  }
  private ValueTuple tuple(  Object... objs){
    Value[] values=new Value[objs.length];
    for (int i=0; i < values.length; i++) {
      values[i]=Values.of(objs[i]);
    }
    return ValueTuple.of(values);
  }
  private void verifyEquals(  ValueTuple a,  ValueTuple b){
    assertThat(a,equalTo(b));
    assertThat(b,equalTo(a));
    assertEquals(a.hashCode(),b.hashCode(),format("Expected hashCode for %s and %s to be equal",a,b));
  }
  private void assertNotEquals(  ValueTuple a,  ValueTuple b){
    assertThat(a,not(equalTo(b)));
    assertThat(b,not(equalTo(a)));
  }
}
