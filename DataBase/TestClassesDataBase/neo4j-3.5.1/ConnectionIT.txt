@RunWith(Parameterized.class) public class ConnectionIT {
  @Rule public ExpectedException exception=ExpectedException.none();
  @Rule public Neo4jWithSocket server=new Neo4jWithSocket(getClass());
  @Parameterized.Parameter public TransportConnection connection;
  private HostnamePort address;
  @Parameterized.Parameters public static Collection<TransportConnection> transports(){
    return asList(new SecureSocketConnection(),new SocketConnection(),new SecureWebSocketConnection(),new WebSocketConnection());
  }
  @Before public void setUp(){
    address=server.lookupDefaultConnector();
  }
  @After public void cleanup() throws IOException {
    if (connection != null) {
      connection.disconnect();
    }
  }
  @Test public void shouldCloseConnectionOnInvalidHandshake() throws Exception {
    connection.connect(address);
    connection.send(new byte[]{(byte)0xDE,(byte)0xAD,(byte)0xB0,(byte)0x17,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0});
    exception.expect(IOException.class);
    connection.recv(4);
  }
}
