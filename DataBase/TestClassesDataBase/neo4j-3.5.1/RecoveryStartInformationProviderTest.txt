public class RecoveryStartInformationProviderTest {
  private final long currentLogVersion=2L;
  private final long logVersion=2L;
  private final LogTailScanner tailScanner=mock(LogTailScanner.class);
  private final Monitor monitor=mock(Monitor.class);
  @Test public void shouldReturnUnspecifiedIfThereIsNoNeedForRecovery(){
    when(tailScanner.getTailInformation()).thenReturn(new LogTailScanner.LogTailInformation(false,NO_TRANSACTION_ID,logVersion,currentLogVersion,LogEntryVersion.CURRENT));
    RecoveryStartInformation recoveryStartInformation=new RecoveryStartInformationProvider(tailScanner,monitor).get();
    verify(monitor).noCommitsAfterLastCheckPoint(null);
    assertEquals(LogPosition.UNSPECIFIED,recoveryStartInformation.getRecoveryPosition());
    assertEquals(NO_TRANSACTION_ID,recoveryStartInformation.getFirstTxIdAfterLastCheckPoint());
    assertFalse(recoveryStartInformation.isRecoveryRequired());
  }
  @Test public void shouldReturnLogPositionToRecoverFromIfNeeded(){
    LogPosition checkPointLogPosition=new LogPosition(1L,4242);
    when(tailScanner.getTailInformation()).thenReturn(new LogTailInformation(new CheckPoint(checkPointLogPosition),true,10L,logVersion,currentLogVersion,LogEntryVersion.CURRENT));
    RecoveryStartInformation recoveryStartInformation=new RecoveryStartInformationProvider(tailScanner,monitor).get();
    verify(monitor).commitsAfterLastCheckPoint(checkPointLogPosition,10L);
    assertEquals(checkPointLogPosition,recoveryStartInformation.getRecoveryPosition());
    assertEquals(10L,recoveryStartInformation.getFirstTxIdAfterLastCheckPoint());
    assertTrue(recoveryStartInformation.isRecoveryRequired());
  }
  @Test public void shouldRecoverFromStartOfLogZeroIfThereAreNoCheckPointAndOldestLogIsVersionZero(){
    when(tailScanner.getTailInformation()).thenReturn(new LogTailInformation(true,10L,INITIAL_LOG_VERSION,currentLogVersion,LogEntryVersion.CURRENT));
    RecoveryStartInformation recoveryStartInformation=new RecoveryStartInformationProvider(tailScanner,monitor).get();
    verify(monitor).noCheckPointFound();
    assertEquals(LogPosition.start(INITIAL_LOG_VERSION),recoveryStartInformation.getRecoveryPosition());
    assertEquals(10L,recoveryStartInformation.getFirstTxIdAfterLastCheckPoint());
    assertTrue(recoveryStartInformation.isRecoveryRequired());
  }
  @Test public void shouldFailIfThereAreNoCheckPointsAndOldestLogVersionInNotZero(){
    long oldestLogVersionFound=1L;
    when(tailScanner.getTailInformation()).thenReturn(new LogTailScanner.LogTailInformation(true,10L,oldestLogVersionFound,currentLogVersion,LogEntryVersion.CURRENT));
    try {
      new RecoveryStartInformationProvider(tailScanner,monitor).get();
    }
 catch (    UnderlyingStorageException ex) {
      final String expectedMessage="No check point found in any log file from version " + oldestLogVersionFound + " to "+ logVersion;
      assertEquals(expectedMessage,ex.getMessage());
    }
  }
}
