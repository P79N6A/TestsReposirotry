class FormattedLogProviderTest {
  @Test void shouldReturnSameLoggerForSameClass(){
    FormattedLogProvider logProvider=FormattedLogProvider.toOutputStream(new ByteArrayOutputStream());
    FormattedLog log=logProvider.getLog(getClass());
    assertThat(logProvider.getLog(FormattedLogProviderTest.class),sameInstance(log));
  }
  @Test void shouldReturnSameLoggerForSameContext(){
    FormattedLogProvider logProvider=FormattedLogProvider.toOutputStream(new ByteArrayOutputStream());
    FormattedLog log=logProvider.getLog("test context");
    assertThat(logProvider.getLog("test context"),sameInstance(log));
  }
  @Test void shouldLogWithAbbreviatedClassNameAsContext(){
    StringWriter writer=new StringWriter();
    FormattedLogProvider logProvider=newFormattedLogProvider(writer);
    FormattedLog log=logProvider.getLog(StringWriter.class);
    log.info("Terminator 2");
    assertThat(writer.toString(),endsWith(format("INFO [j.i.StringWriter] Terminator 2%n")));
  }
  @Test void shouldSetLevelForLogWithMatchingContext(){
    StringWriter writer=new StringWriter();
    FormattedLogProvider logProvider=newFormattedLogProvider(writer,"java.io.StringWriter",Level.DEBUG);
    FormattedLog stringWriterLog=logProvider.getLog(StringWriter.class);
    FormattedLog otherClassLog=logProvider.getLog(PrintWriter.class);
    FormattedLog matchingNamedLog=logProvider.getLog("java.io.StringWriter");
    FormattedLog nonMatchingNamedLog=logProvider.getLog("java.io.Foo");
    assertThat(stringWriterLog.isDebugEnabled(),is(true));
    assertThat(otherClassLog.isDebugEnabled(),is(false));
    assertThat(matchingNamedLog.isDebugEnabled(),is(true));
    assertThat(nonMatchingNamedLog.isDebugEnabled(),is(false));
  }
  @Test void shouldSetLevelForLogWithPartiallyMatchingContext(){
    StringWriter writer=new StringWriter();
    FormattedLogProvider logProvider=newFormattedLogProvider(writer,"java.io",Level.DEBUG);
    FormattedLog stringWriterLog=logProvider.getLog(StringWriter.class);
    FormattedLog printWriterLog=logProvider.getLog(PrintWriter.class);
    FormattedLog otherClassLog=logProvider.getLog(Date.class);
    FormattedLog matchingNamedLog=logProvider.getLog("java.io.Foo");
    FormattedLog nonMatchingNamedLog=logProvider.getLog("java.util.Foo");
    assertThat(stringWriterLog.isDebugEnabled(),is(true));
    assertThat(printWriterLog.isDebugEnabled(),is(true));
    assertThat(otherClassLog.isDebugEnabled(),is(false));
    assertThat(matchingNamedLog.isDebugEnabled(),is(true));
    assertThat(nonMatchingNamedLog.isDebugEnabled(),is(false));
  }
  private static FormattedLogProvider newFormattedLogProvider(  StringWriter writer){
    return newFormattedLogProvider(writer,Collections.emptyMap());
  }
  private static FormattedLogProvider newFormattedLogProvider(  StringWriter writer,  String context,  Level level){
    return newFormattedLogProvider(writer,Collections.singletonMap(context,level));
  }
  private static FormattedLogProvider newFormattedLogProvider(  StringWriter writer,  Map<String,Level> levels){
    return new FormattedLogProvider(Suppliers.singleton(new PrintWriter(writer)),ZoneOffset.UTC,true,levels,Level.INFO,true);
  }
}
