public class StoreScanChunkIT {
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  @Test public void differentChunksHaveDifferentCursors(){
    GraphDatabaseAPI database=(GraphDatabaseAPI)new TestGraphDatabaseFactory().newEmbeddedDatabase(testDirectory.storeDir());
    try {
      RecordStorageEngine recordStorageEngine=database.getDependencyResolver().resolveDependency(RecordStorageEngine.class);
      NeoStores neoStores=recordStorageEngine.testAccessNeoStores();
      RecordStorageReader storageReader=new RecordStorageReader(neoStores);
      TestStoreScanChunk scanChunk1=new TestStoreScanChunk(storageReader,false);
      TestStoreScanChunk scanChunk2=new TestStoreScanChunk(storageReader,false);
      assertNotSame(scanChunk1.getCursor(),scanChunk2.getCursor());
      assertNotSame(scanChunk1.getStorePropertyCursor(),scanChunk2.getStorePropertyCursor());
    }
  finally {
      database.shutdown();
    }
  }
private class TestStoreScanChunk extends StoreScanChunk<StorageNodeCursor> {
    TestStoreScanChunk(    RecordStorageReader storageReader,    boolean requiresPropertyMigration){
      super(storageReader.allocateNodeCursor(),storageReader,requiresPropertyMigration);
    }
    @Override protected void read(    StorageNodeCursor cursor,    long id){
      cursor.single(id);
    }
    @Override void visitRecord(    StorageNodeCursor record,    InputEntityVisitor visitor){
    }
    StorageNodeCursor getCursor(){
      return cursor;
    }
    StoragePropertyCursor getStorePropertyCursor(){
      return storePropertyCursor;
    }
  }
}
