public class TestShutdownSequence {
  private GraphDatabaseService graphDb;
  @Before public void createGraphDb(){
    graphDb=new TestGraphDatabaseFactory().newImpermanentDatabase();
  }
  @Test public void canInvokeShutdownMultipleTimes(){
    graphDb.shutdown();
    graphDb.shutdown();
  }
  @Test public void eventHandlersAreOnlyInvokedOnceDuringShutdown(){
    final AtomicInteger counter=new AtomicInteger();
    graphDb.registerKernelEventHandler(new KernelEventHandler(){
      @Override public void beforeShutdown(){
        counter.incrementAndGet();
      }
      @Override public Object getResource(){
        return null;
      }
      @Override public void kernelPanic(      ErrorState error){
      }
      @Override public ExecutionOrder orderComparedTo(      KernelEventHandler other){
        return ExecutionOrder.DOESNT_MATTER;
      }
    }
);
    graphDb.shutdown();
    graphDb.shutdown();
    assertEquals(1,counter.get());
  }
  @Test public void canRemoveFilesAndReinvokeShutdown() throws IOException {
    GraphDatabaseAPI databaseAPI=(GraphDatabaseAPI)this.graphDb;
    FileSystemAbstraction fileSystemAbstraction=getDatabaseFileSystem(databaseAPI);
    graphDb.shutdown();
    fileSystemAbstraction.deleteRecursively(databaseAPI.databaseLayout().databaseDirectory());
    graphDb.shutdown();
  }
  @Test public void canInvokeShutdownFromShutdownHandler(){
    graphDb.registerKernelEventHandler(new KernelEventHandler(){
      @Override public void beforeShutdown(){
        graphDb.shutdown();
      }
      @Override public Object getResource(){
        return null;
      }
      @Override public void kernelPanic(      ErrorState error){
      }
      @Override public ExecutionOrder orderComparedTo(      KernelEventHandler other){
        return ExecutionOrder.DOESNT_MATTER;
      }
    }
);
    graphDb.shutdown();
  }
  private static FileSystemAbstraction getDatabaseFileSystem(  GraphDatabaseAPI databaseAPI){
    return databaseAPI.getDependencyResolver().resolveDependency(FileSystemAbstraction.class);
  }
}
