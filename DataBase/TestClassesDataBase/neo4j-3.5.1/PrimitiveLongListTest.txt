class PrimitiveLongListTest {
  @Test void newListIsEmpty(){
    assertTrue(new PrimitiveLongList().isEmpty());
    assertTrue(new PrimitiveLongList(12).isEmpty());
  }
  @Test void newListHasZeroSize(){
    assertEquals(0,new PrimitiveLongList().size());
    assertEquals(0,new PrimitiveLongList(12).size());
  }
  @Test void addingElementsChangeSize(){
    PrimitiveLongList longList=new PrimitiveLongList();
    longList.add(1L);
    assertFalse(longList.isEmpty());
    assertEquals(1,longList.size());
    longList.add(2L);
    assertFalse(longList.isEmpty());
    assertEquals(2,longList.size());
    longList.add(3L);
    assertFalse(longList.isEmpty());
    assertEquals(3,longList.size());
  }
  @Test void accessAddedElements(){
    PrimitiveLongList longList=new PrimitiveLongList();
    for (long i=1; i < 6L; i++) {
      longList.add(i);
    }
    assertEquals(5L,longList.get(4));
    assertEquals(1L,longList.get(0));
  }
  @Test void throwExceptionOnAccessingNonExistentElement(){
    PrimitiveLongList longList=new PrimitiveLongList();
    assertThrows(IndexOutOfBoundsException.class,() -> longList.get(0));
  }
  @Test void iterateOverListElements(){
    PrimitiveLongList longList=new PrimitiveLongList();
    for (long i=0; i < 10L; i++) {
      longList.add(i);
    }
    int iteratorElements=0;
    long value=0;
    PrimitiveLongIterator iterator=longList.iterator();
    while (iterator.hasNext()) {
      iteratorElements++;
      assertEquals(value++,iterator.next());
    }
    assertEquals(iteratorElements,longList.size());
  }
  @Test void clearResetListSize(){
    PrimitiveLongList longList=new PrimitiveLongList();
    long size=10;
    for (long i=0; i < 10L; i++) {
      longList.add(i);
    }
    assertEquals(size,longList.size());
    longList.clear();
    assertEquals(0,longList.size());
    assertTrue(longList.isEmpty());
  }
  @Test void transformListToArray(){
    PrimitiveLongList longList=new PrimitiveLongList();
    long size=24L;
    for (long i=0; i < size; i++) {
      longList.add(i);
    }
    long[] longs=longList.toArray();
    assertEquals(size,longs.length);
    for (int i=0; i < longs.length; i++) {
      assertEquals(i,longs[i]);
    }
  }
  @Test void holdLotsOfElements(){
    PrimitiveLongList longList=new PrimitiveLongList();
    long size=13077L;
    for (long i=0; i < size; i++) {
      longList.add(i);
    }
    assertEquals(size,longList.size());
    for (int i=0; i < size; i++) {
      assertEquals(i,longList.get(i));
    }
  }
}
