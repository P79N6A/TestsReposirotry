class WritableIndexReferenceTest {
  private IndexIdentifier identifier=mock(IndexIdentifier.class);
  private IndexSearcher searcher=mock(IndexSearcher.class);
  private IndexWriter indexWriter=mock(IndexWriter.class);
  private CloseTrackingIndexReader reader=new CloseTrackingIndexReader();
  private WritableIndexReference indexReference=new WritableIndexReference(identifier,searcher,indexWriter);
  @BeforeEach void setUp(){
    when(searcher.getIndexReader()).thenReturn(reader);
  }
  @Test void useProvidedWriterAsIndexWriter(){
    assertSame(indexWriter,indexReference.getWriter());
  }
  @Test void stalingWritableIndex(){
    assertFalse(indexReference.checkAndClearStale(),"Index is not stale by default.");
    indexReference.setStale();
    assertTrue(indexReference.checkAndClearStale(),"We should be able to reset stale index state.");
    assertFalse(indexReference.checkAndClearStale(),"Index is not stale anymore.");
  }
  @Test void disposeWritableIndex() throws Exception {
    indexReference.dispose();
    assertTrue(reader.isClosed(),"Reader should be closed.");
    assertTrue(indexReference.isWriterClosed(),"Reader should be closed.");
  }
}
