public static final class LogMatcher {
  private final Matcher<String> contextMatcher;
  private final Matcher<Level> levelMatcher;
  private final Matcher<String> messageMatcher;
  private final Matcher<? extends Object[]> argumentsMatcher;
  private final Matcher<? extends Throwable> throwableMatcher;
  public LogMatcher(  Matcher<String> contextMatcher,  Matcher<Level> levelMatcher,  Matcher<String> messageMatcher,  Matcher<? extends Object[]> argumentsMatcher,  Matcher<? extends Throwable> throwableMatcher){
    this.contextMatcher=contextMatcher;
    this.levelMatcher=levelMatcher;
    this.messageMatcher=messageMatcher;
    this.argumentsMatcher=argumentsMatcher;
    this.throwableMatcher=throwableMatcher;
  }
  protected boolean matches(  LogCall logCall){
    return logCall != null && contextMatcher.matches(logCall.context) && levelMatcher.matches(logCall.level) && messageMatcher.matches(logCall.message) && argumentsMatcher.matches(logCall.arguments) && throwableMatcher.matches(logCall.throwable);
  }
  @Override public String toString(){
    Description description=new StringDescription();
    description.appendText("LogMatcher{");
    description.appendDescriptionOf(contextMatcher);
    description.appendText(", ");
    description.appendDescriptionOf(levelMatcher);
    description.appendText(", message=");
    description.appendDescriptionOf(messageMatcher);
    description.appendText(", arguments=");
    description.appendDescriptionOf(argumentsMatcher);
    description.appendText(", throwable=");
    description.appendDescriptionOf(throwableMatcher);
    description.appendText("}");
    return description.toString();
  }
}
