private static class DelegatingTransaction implements KernelTransaction {
  private final KernelTransaction internal;
  private final Locks locks;
  DelegatingTransaction(  KernelTransaction internal,  Locks locks){
    this.internal=internal;
    this.locks=locks;
  }
  @Override public void success(){
    internal.success();
  }
  @Override public void failure(){
    internal.failure();
  }
  @Override public Read dataRead(){
    return internal.dataRead();
  }
  @Override public Write dataWrite() throws InvalidTransactionTypeKernelException {
    return internal.dataWrite();
  }
  @Override public ExplicitIndexRead indexRead(){
    return internal.indexRead();
  }
  @Override public ExplicitIndexWrite indexWrite() throws InvalidTransactionTypeKernelException {
    return internal.indexWrite();
  }
  @Override public TokenRead tokenRead(){
    return internal.tokenRead();
  }
  @Override public TokenWrite tokenWrite(){
    return internal.tokenWrite();
  }
  @Override public org.neo4j.internal.kernel.api.Token token(){
    return internal.token();
  }
  @Override public SchemaRead schemaRead(){
    return internal.schemaRead();
  }
  @Override public SchemaWrite schemaWrite() throws InvalidTransactionTypeKernelException {
    return internal.schemaWrite();
  }
  @Override public Locks locks(){
    return locks;
  }
  @Override public CursorFactory cursors(){
    return internal.cursors();
  }
  @Override public Procedures procedures(){
    return internal.procedures();
  }
  @Override public ExecutionStatistics executionStatistics(){
    return internal.executionStatistics();
  }
  @Override public Statement acquireStatement(){
    return internal.acquireStatement();
  }
  @Override public IndexDescriptor indexUniqueCreate(  SchemaDescriptor schema,  String provider){
    String defaultProvider=Config.defaults().get(GraphDatabaseSettings.default_schema_provider);
    return internal.indexUniqueCreate(schema,defaultProvider);
  }
  @Override public long closeTransaction() throws TransactionFailureException {
    return internal.closeTransaction();
  }
  @Override public void close() throws TransactionFailureException {
    internal.close();
  }
  @Override public boolean isOpen(){
    return internal.isOpen();
  }
  @Override public SecurityContext securityContext(){
    return internal.securityContext();
  }
  @Override public AuthSubject subjectOrAnonymous(){
    return internal.subjectOrAnonymous();
  }
  @Override public Optional<Status> getReasonIfTerminated(){
    return internal.getReasonIfTerminated();
  }
  @Override public boolean isTerminated(){
    return internal.isTerminated();
  }
  @Override public void markForTermination(  Status reason){
    internal.markForTermination(reason);
  }
  @Override public long lastTransactionTimestampWhenStarted(){
    return internal.lastTransactionTimestampWhenStarted();
  }
  @Override public long lastTransactionIdWhenStarted(){
    return internal.lastTransactionIdWhenStarted();
  }
  @Override public long startTime(){
    return internal.startTime();
  }
  @Override public long timeout(){
    return internal.timeout();
  }
  @Override public void registerCloseListener(  CloseListener listener){
    internal.registerCloseListener(listener);
  }
  @Override public Type transactionType(){
    return internal.transactionType();
  }
  @Override public long getTransactionId(){
    return internal.getTransactionId();
  }
  @Override public long getCommitTime(){
    return internal.getCommitTime();
  }
  @Override public Revertable overrideWith(  SecurityContext context){
    return internal.overrideWith(context);
  }
  @Override public ClockContext clocks(){
    return internal.clocks();
  }
  @Override public NodeCursor ambientNodeCursor(){
    return internal.ambientNodeCursor();
  }
  @Override public RelationshipScanCursor ambientRelationshipCursor(){
    return internal.ambientRelationshipCursor();
  }
  @Override public PropertyCursor ambientPropertyCursor(){
    return internal.ambientPropertyCursor();
  }
  @Override public void setMetaData(  Map<String,Object> metaData){
    internal.setMetaData(metaData);
  }
  @Override public void assertOpen(){
    internal.assertOpen();
  }
}
