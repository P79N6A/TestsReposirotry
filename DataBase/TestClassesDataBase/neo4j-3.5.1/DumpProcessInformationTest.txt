public class DumpProcessInformationTest {
  private static final String SIGNAL="here";
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  @Before public void checkEnvironment(){
    assumeTrue(commandExists("jps"));
    assumeTrue(commandExists("jstack -h"));
  }
  private boolean commandExists(  String command){
    try {
      return Runtime.getRuntime().exec(command).waitFor() == 0;
    }
 catch (    Throwable e) {
      return false;
    }
  }
  @Test public void shouldDumpProcessInformation() throws Exception {
    File directory=testDirectory.directory("dump");
    String java=getJavaExecutable().toString();
    Process process=getRuntime().exec(new String[]{java,"-cp",getClassPath(),DumpableProcess.class.getName(),SIGNAL});
    awaitSignal(process);
    DumpProcessInformation dumper=new DumpProcessInformation(NullLogProvider.getInstance(),directory);
    Collection<Pair<Long,String>> pids=dumper.getJPids(containsString(DumpableProcess.class.getSimpleName()));
    assumeThat(pids.size(),greaterThan(0));
    Pair<Long,String> pid=Iterables.single(pids);
    File threaddumpFile=dumper.doThreadDump(pid);
    process.destroy();
    assertTrue(fileContains(threaddumpFile,"traceableMethod",DumpableProcess.class.getName()));
  }
  private static boolean fileContains(  File file,  String... expectedStrings) throws IOException {
    Set<String> expectedStringSet=asSet(expectedStrings);
    try (Stream<String> lines=Files.lines(file.toPath())){
      lines.forEach(line -> expectedStringSet.removeIf(line::contains));
    }
     return expectedStringSet.isEmpty();
  }
  private static void awaitSignal(  Process process) throws IOException {
    try (BufferedReader reader=new BufferedReader(new InputStreamReader(process.getInputStream()))){
      String line=reader.readLine();
      if (!SIGNAL.equals(line)) {
        fail("Got weird signal " + line);
      }
    }
   }
}
