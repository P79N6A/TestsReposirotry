public class NodeManagerTest {
  private GraphDatabaseAPI db;
  @Before public void init(){
    db=(GraphDatabaseAPI)new TestGraphDatabaseFactory().newImpermanentDatabase();
  }
  @After public void stop(){
    db.shutdown();
  }
  @Test public void getAllNodesIteratorShouldPickUpHigherIdsThanHighIdWhenStarted() throws Exception {
{
      Transaction tx=db.beginTx();
      db.createNode();
      db.createNode();
      tx.success();
      tx.close();
    }
    Transaction transaction=db.beginTx();
    Iterator<Node> allNodes=db.getAllNodes().iterator();
    allNodes.next();
    Thread thread=new Thread(() -> {
      Transaction newTx=db.beginTx();
      assertThat(newTx,not(instanceOf(PlaceboTransaction.class)));
      db.createNode();
      newTx.success();
      newTx.close();
    }
);
    thread.start();
    thread.join();
    assertThat(addToCollection(allNodes,new ArrayList<>()).size(),is(2));
    transaction.close();
  }
  @Test public void getAllRelationshipsIteratorShouldPickUpHigherIdsThanHighIdWhenStarted() throws Exception {
    Transaction tx=db.beginTx();
    createRelationshipAssumingTxWith("key",1);
    createRelationshipAssumingTxWith("key",2);
    tx.success();
    tx.close();
    tx=db.beginTx();
    Iterator<Relationship> allRelationships=db.getAllRelationships().iterator();
    Thread thread=new Thread(() -> {
      Transaction newTx=db.beginTx();
      assertThat(newTx,not(instanceOf(PlaceboTransaction.class)));
      createRelationshipAssumingTxWith("key",3);
      newTx.success();
      newTx.close();
    }
);
    thread.start();
    thread.join();
    assertThat(addToCollection(allRelationships,new ArrayList<>()).size(),is(3));
    tx.success();
    tx.close();
  }
  private Relationship createRelationshipAssumingTxWith(  String key,  Object value){
    Node a=db.createNode();
    Node b=db.createNode();
    Relationship relationship=a.createRelationshipTo(b,RelationshipType.withName("FOO"));
    relationship.setProperty(key,value);
    return relationship;
  }
}
