public class PageCacheByteArrayConcurrencyTest extends PageCacheNumberArrayConcurrencyTest {
  @Override protected Runnable wholeFileRacer(  NumberArray array,  int contestant){
    return new WholeFileRacer((ByteArray)array);
  }
  @Override protected Runnable fileRangeRacer(  NumberArray array,  int contestant){
    return new FileRangeRacer((ByteArray)array,contestant);
  }
  @Override protected ByteArray getNumberArray(  PagedFile file) throws IOException {
    return new PageCacheByteArray(file,COUNT,new byte[]{-1,-1,-1,-1},0);
  }
private class WholeFileRacer implements Runnable {
    private ByteArray array;
    WholeFileRacer(    ByteArray array){
      this.array=array;
    }
    @Override public void run(){
      for (int o=0; o < LAPS; o++) {
        for (int i=0; i < COUNT; i++) {
          byte[] value={1,2,3,4};
          array.set(i,value);
          byte[] actual=new byte[4];
          array.get(i,actual);
          assertArrayEquals(value,actual);
        }
      }
    }
  }
private class FileRangeRacer implements Runnable {
    private ByteArray array;
    private int contestant;
    FileRangeRacer(    ByteArray array,    int contestant){
      this.array=array;
      this.contestant=contestant;
    }
    @Override public void run(){
      for (int o=0; o < LAPS; o++) {
        for (int i=contestant; i < COUNT; i+=CONTESTANTS) {
          byte[] value=new byte[4];
          byte[] actual=new byte[4];
          random.nextBytes(value);
          array.set(i,value);
          array.get(i,actual);
          assertArrayEquals(value,actual);
        }
      }
    }
  }
}
