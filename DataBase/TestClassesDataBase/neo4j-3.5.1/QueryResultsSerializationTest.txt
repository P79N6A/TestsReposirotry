public class QueryResultsSerializationTest extends AbstractRestFunctionalTestBase {
  private final HTTP.Builder http=HTTP.withBaseUri(server().baseUri());
  private String commitResource;
  @Before public void setUp(){
    Response begin=http.POST("db/data/transaction");
    assertThat(begin.status(),equalTo(201));
    assertHasTxLocation(begin);
    try {
      commitResource=begin.stringFromContent("commit");
    }
 catch (    JsonParseException e) {
      fail("Exception caught when setting up test: " + e.getMessage());
    }
    assertThat(commitResource,equalTo(begin.location() + "/commit"));
  }
  @After public void tearDown(){
    graphdb().execute("MATCH (n) DETACH DELETE n");
  }
  @Test public void shouldBeAbleToReturnDeletedEntitiesGraph(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonGraph("MATCH (s:Start)-[r:R]->(e:End) DELETE s, r, e RETURN *"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,graphContainsDeletedRelationships(1));
    assertThat(commit,graphContainsDeletedNodes(2));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(0L));
  }
  @Test public void shouldBeAbleToReturnDeletedEntitiesRest(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRest("MATCH (s:Start)-[r:R]->(e:End) DELETE s, r, e RETURN *"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,restContainsDeletedEntities(3));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(0L));
  }
  @Test public void shouldBeAbleToReturnDeletedEntitiesRow(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRow("MATCH (s:Start)-[r:R]->(e:End) DELETE s, r, e RETURN *"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,rowContainsDeletedEntities(2,1));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(0L));
  }
  @Test public void shouldNotMarkNormalEntitiesAsDeletedGraph(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonGraph("MATCH (s:Start)-[r:R]->(e:End) RETURN *"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,graphContainsNoDeletedEntities());
    assertThat(commit.status(),equalTo(200));
  }
  @Test public void shouldNotMarkNormalEntitiesAsDeletedRow(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRow("MATCH (s:Start)-[r:R]->(e:End) RETURN *"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,rowContainsNoDeletedEntities());
    assertThat(commit.status(),equalTo(200));
  }
  @Test public void shouldNotMarkNormalEntitiesAsDeletedRest(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRest("MATCH (s:Start)-[r:R]->(e:End) RETURN *"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,restContainsNoDeletedEntities());
    assertThat(commit.status(),equalTo(200));
  }
  @Test public void shouldBeAbleToReturnDeletedNodesGraph(){
    graphdb().execute("CREATE (:NodeToDelete {p: 'a property'})");
    Response commit=http.POST(commitResource,queryAsJsonGraph("MATCH (n:NodeToDelete) DELETE n RETURN n"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,graphContainsDeletedNodes(1));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(0L));
  }
  @Test public void shouldBeAbleToReturnDeletedNodesRow(){
    graphdb().execute("CREATE (:NodeToDelete {p: 'a property'})");
    Response commit=http.POST(commitResource,queryAsJsonRow("MATCH (n:NodeToDelete) DELETE n RETURN n"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,rowContainsDeletedEntities(1,0));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(0L));
  }
  @Test public void shouldBeAbleToReturnDeletedNodesRest(){
    graphdb().execute("CREATE (:NodeToDelete {p: 'a property'})");
    Response commit=http.POST(commitResource,queryAsJsonRest("MATCH (n:NodeToDelete) DELETE n RETURN n"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,restContainsDeletedEntities(1));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(0L));
  }
  @Test public void shouldBeAbleToReturnDeletedRelationshipsGraph(){
    graphdb().execute("CREATE (:Start)-[:R {p: 'a property'}]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonGraph("MATCH (s)-[r:R]->(e) DELETE r RETURN r"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,graphContainsDeletedRelationships(1));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(2L));
  }
  @Test public void shouldBeAbleToReturnDeletedRelationshipsRow(){
    graphdb().execute("CREATE (:Start)-[:R {p: 'a property'}]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRow("MATCH (s)-[r:R]->(e) DELETE r RETURN r"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,rowContainsDeletedEntities(0,1));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(2L));
  }
  @Test public void shouldBeAbleToReturnDeletedRelationshipsRest(){
    graphdb().execute("CREATE (:Start)-[:R {p: 'a property'}]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRest("MATCH (s)-[r:R]->(e) DELETE r RETURN r"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,restContainsDeletedEntities(1));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(2L));
  }
  @Test public void shouldFailIfTryingToReturnPropsOfDeletedNodeGraph(){
    graphdb().execute("CREATE (:NodeToDelete {p: 'a property'})");
    Response commit=http.POST(commitResource,queryAsJsonGraph("MATCH (n:NodeToDelete) DELETE n RETURN n.p"));
    assertThat(commit,hasErrors(Status.Statement.EntityNotFound));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(1L));
  }
  @Test public void shouldFailIfTryingToReturnPropsOfDeletedNodeRow(){
    graphdb().execute("CREATE (:NodeToDelete {p: 'a property'})");
    Response commit=http.POST(commitResource,queryAsJsonRow("MATCH (n:NodeToDelete) DELETE n RETURN n.p"));
    assertThat(commit,hasErrors(Status.Statement.EntityNotFound));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(1L));
  }
  @Test public void shouldFailIfTryingToReturnPropsOfDeletedNodeRest(){
    graphdb().execute("CREATE (:NodeToDelete {p: 'a property'})");
    Response commit=http.POST(commitResource,queryAsJsonRest("MATCH (n:NodeToDelete) DELETE n RETURN n.p"));
    assertThat(commit,hasErrors(Status.Statement.EntityNotFound));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(1L));
  }
  @Test public void shouldFailIfTryingToReturnLabelsOfDeletedNodeGraph(){
    graphdb().execute("CREATE (:NodeToDelete)");
    Response commit=http.POST(commitResource,queryAsJsonGraph("MATCH (n:NodeToDelete) DELETE n RETURN labels(n)"));
    assertThat(commit,hasErrors(Status.Statement.EntityNotFound));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(1L));
  }
  @Test public void shouldFailIfTryingToReturnLabelsOfDeletedNodeRow(){
    graphdb().execute("CREATE (:NodeToDelete)");
    Response commit=http.POST(commitResource,queryAsJsonRow("MATCH (n:NodeToDelete) DELETE n RETURN labels(n)"));
    assertThat(commit,hasErrors(Status.Statement.EntityNotFound));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(1L));
  }
  @Test public void shouldFailIfTryingToReturnLabelsOfDeletedNodeRest(){
    graphdb().execute("CREATE (:NodeToDelete)");
    Response commit=http.POST(commitResource,queryAsJsonRest("MATCH (n:NodeToDelete) DELETE n RETURN labels(n)"));
    assertThat(commit,hasErrors(Status.Statement.EntityNotFound));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(1L));
  }
  @Test public void shouldFailIfTryingToReturnPropsOfDeletedRelationshipGraph(){
    graphdb().execute("CREATE (:Start)-[:R {p: 'a property'}]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonGraph("MATCH (s)-[r:R]->(e) DELETE r RETURN r.p"));
    assertThat(commit,hasErrors(Status.Statement.EntityNotFound));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(2L));
  }
  @Test public void shouldFailIfTryingToReturnPropsOfDeletedRelationshipRow(){
    graphdb().execute("CREATE (:Start)-[:R {p: 'a property'}]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRow("MATCH (s)-[r:R]->(e) DELETE r RETURN r.p"));
    assertThat(commit,hasErrors(Status.Statement.EntityNotFound));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(2L));
  }
  @Test public void shouldFailIfTryingToReturnPropsOfDeletedRelationshipRest(){
    graphdb().execute("CREATE (:Start)-[:MARKER {p: 'a property'}]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRest("MATCH (s)-[r:MARKER]->(e) DELETE r RETURN r.p"));
    assertThat("Error raw response: " + commit.rawContent(),commit,hasErrors(Status.Statement.EntityNotFound));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(2L));
  }
  @Test public void returningADeletedPathGraph(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonGraph("MATCH p=(s)-[r:R]->(e) DELETE p RETURN p"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,graphContainsDeletedNodes(2));
    assertThat(commit,graphContainsDeletedRelationships(1));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(0L));
  }
  @Test public void returningAPartiallyDeletedPathGraph(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonGraph("MATCH p=(s)-[r:R]->(e) DELETE s,r RETURN p"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,graphContainsDeletedNodes(1));
    assertThat(commit,graphContainsDeletedRelationships(1));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(1L));
  }
  @Test public void returningADeletedPathRow(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRow("MATCH p=(s)-[r:R]->(e) DELETE p RETURN p"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,rowContainsDeletedEntitiesInPath(2,1));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(0L));
  }
  @Test public void returningAPartiallyDeletedPathRow(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRow("MATCH p=(s)-[r:R]->(e) DELETE s,r RETURN p"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,rowContainsDeletedEntitiesInPath(1,1));
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(1L));
  }
  @Test public void returningADeletedPathRest(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRest("MATCH p=(s)-[r:R]->(e) DELETE p RETURN p"));
    assertThat(commit,containsNoErrors());
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(0L));
  }
  @Test public void returningAPartiallyDeletedPathRest(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRest("MATCH p=(s)-[r:R]->(e) DELETE s,r RETURN p"));
    assertThat(commit,containsNoErrors());
    assertThat(commit.status(),equalTo(200));
    assertThat(nodesInDatabase(),equalTo(1L));
  }
  @Test public void nestedShouldWorkGraph(){
    graphdb().execute("CREATE ()");
    Response commit=http.POST(commitResource,queryAsJsonGraph("MATCH (n) DELETE (n) RETURN [n, {someKey: n}]"));
    assertThat(commit,containsNoErrors());
    assertThat(commit.status(),equalTo(200));
    assertThat(commit,graphContainsDeletedNodes(1));
    assertThat(nodesInDatabase(),equalTo(0L));
  }
  @Test public void nestedShouldWorkRest(){
    graphdb().execute("CREATE ()");
    Response commit=http.POST(commitResource,queryAsJsonRest("MATCH (n) DELETE (n) RETURN [n, {someKey: n}]"));
    assertThat(commit,containsNoErrors());
    assertThat(commit.status(),equalTo(200));
    assertThat(commit,restContainsNestedDeleted());
    assertThat(nodesInDatabase(),equalTo(0L));
  }
  @Test public void nestedShouldWorkRow(){
    graphdb().execute("CREATE ()");
    Response commit=http.POST(commitResource,queryAsJsonRow("MATCH (n) DELETE (n) RETURN [n, {someKey: n}]"));
    assertThat(commit,containsNoErrors());
    assertThat(commit.status(),equalTo(200));
    assertThat(commit,rowContainsDeletedEntities(2,0));
    assertThat(nodesInDatabase(),equalTo(0L));
  }
  @Test public void shouldHandleTemporalArrays() throws Exception {
    GraphDatabaseFacade db=server().getDatabase().getGraph();
    ZonedDateTime date=ZonedDateTime.of(1980,3,11,0,0,0,0,ZoneId.of("Europe/Stockholm"));
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(label("N"));
      node.setProperty("date",new ZonedDateTime[]{date});
      tx.success();
    }
     HTTP.Response response=runQuery("MATCH (n:N) RETURN n");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode row=response.get("results").get(0).get("data").get(0).get("row").get(0).get("date").get(0);
    assertEquals("\"1980-03-11T00:00+01:00[Europe/Stockholm]\"",row.toString());
  }
  @Test public void shouldHandleDurationArrays() throws Exception {
    GraphDatabaseFacade db=server().getDatabase().getGraph();
    Duration duration=Duration.ofSeconds(73);
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(label("N"));
      node.setProperty("duration",new Duration[]{duration});
      tx.success();
    }
     HTTP.Response response=runQuery("MATCH (n:N) RETURN n");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode row=response.get("results").get(0).get("data").get(0).get("row").get(0).get("duration").get(0);
    assertEquals("\"PT1M13S\"",row.toString());
  }
  @Test public void shouldHandleTemporalUsingRestResultDataContent() throws Exception {
    GraphDatabaseFacade db=server().getDatabase().getGraph();
    ZonedDateTime date=ZonedDateTime.of(1980,3,11,0,0,0,0,ZoneId.of("Europe/Stockholm"));
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(label("N"));
      node.setProperty("date",date);
      tx.success();
    }
     HTTP.Response response=runQuery("MATCH (n:N) RETURN n","rest");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode row=response.get("results").get(0).get("data").get(0).get("rest").get(0).get("data").get("date");
    assertEquals("\"1980-03-11T00:00+01:00[Europe/Stockholm]\"",row.toString());
  }
  @Test public void shouldHandleDurationUsingRestResultDataContent() throws Exception {
    GraphDatabaseFacade db=server().getDatabase().getGraph();
    Duration duration=Duration.ofSeconds(73);
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(label("N"));
      node.setProperty("duration",duration);
      tx.success();
    }
     HTTP.Response response=runQuery("MATCH (n:N) RETURN n","rest");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode row=response.get("results").get(0).get("data").get(0).get("rest").get(0).get("data").get("duration");
    assertEquals("\"PT1M13S\"",row.toString());
  }
  @Test public void shouldHandleTemporalArraysUsingRestResultDataContent() throws Exception {
    GraphDatabaseFacade db=server().getDatabase().getGraph();
    ZonedDateTime date=ZonedDateTime.of(1980,3,11,0,0,0,0,ZoneId.of("Europe/Stockholm"));
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(label("N"));
      node.setProperty("dates",new ZonedDateTime[]{date});
      tx.success();
    }
     HTTP.Response response=runQuery("MATCH (n:N) RETURN n","rest");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode row=response.get("results").get(0).get("data").get(0).get("rest").get(0).get("data").get("dates").get(0);
    assertEquals("\"1980-03-11T00:00+01:00[Europe/Stockholm]\"",row.toString());
  }
  @Test public void shouldHandleDurationArraysUsingRestResultDataContent() throws Exception {
    GraphDatabaseFacade db=server().getDatabase().getGraph();
    Duration duration=Duration.ofSeconds(73);
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(label("N"));
      node.setProperty("durations",new Duration[]{duration});
      tx.success();
    }
     HTTP.Response response=runQuery("MATCH (n:N) RETURN n","rest");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode row=response.get("results").get(0).get("data").get(0).get("rest").get(0).get("data").get("durations").get(0);
    assertEquals("\"PT1M13S\"",row.toString());
  }
  @Test public void shouldHandleTemporalUsingGraphResultDataContent() throws Exception {
    GraphDatabaseFacade db=server().getDatabase().getGraph();
    ZonedDateTime date=ZonedDateTime.of(1980,3,11,0,0,0,0,ZoneId.of("Europe/Stockholm"));
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(label("N"));
      node.setProperty("date",date);
      tx.success();
    }
     HTTP.Response response=runQuery("MATCH (n:N) RETURN n","graph");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode row=response.get("results").get(0).get("data").get(0).get("graph").get("nodes").get(0).get("properties").get("date");
    assertEquals("\"1980-03-11T00:00+01:00[Europe/Stockholm]\"",row.toString());
  }
  @Test public void shouldHandleDurationUsingGraphResultDataContent() throws Exception {
    GraphDatabaseFacade db=server().getDatabase().getGraph();
    Duration duration=Duration.ofSeconds(73);
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(label("N"));
      node.setProperty("duration",duration);
      tx.success();
    }
     HTTP.Response response=runQuery("MATCH (n:N) RETURN n","graph");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode row=response.get("results").get(0).get("data").get(0).get("graph").get("nodes").get(0).get("properties").get("duration");
    assertEquals("\"PT1M13S\"",row.toString());
  }
  @Test public void shouldHandleTemporalArraysUsingGraphResultDataContent() throws Exception {
    GraphDatabaseFacade db=server().getDatabase().getGraph();
    ZonedDateTime date=ZonedDateTime.of(1980,3,11,0,0,0,0,ZoneId.of("Europe/Stockholm"));
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(label("N"));
      node.setProperty("dates",new ZonedDateTime[]{date});
      tx.success();
    }
     HTTP.Response response=runQuery("MATCH (n:N) RETURN n","graph");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode row=response.get("results").get(0).get("data").get(0).get("graph").get("nodes").get(0).get("properties").get("dates").get(0);
    assertEquals("\"1980-03-11T00:00+01:00[Europe/Stockholm]\"",row.toString());
  }
  @Test public void shouldHandleDurationArraysUsingGraphResultDataContent() throws Exception {
    GraphDatabaseFacade db=server().getDatabase().getGraph();
    Duration duration=Duration.ofSeconds(73);
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(label("N"));
      node.setProperty("durations",new Duration[]{duration});
      tx.success();
    }
     HTTP.Response response=runQuery("MATCH (n:N) RETURN n","graph");
    assertEquals(200,response.status());
    assertNoErrors(response);
    JsonNode row=response.get("results").get(0).get("data").get(0).get("graph").get("nodes").get(0).get("properties").get("durations").get(0);
    assertEquals("\"PT1M13S\"",row.toString());
  }
  private HTTP.RawPayload queryAsJsonGraph(  String query){
    return quotedJson("{ 'statements': [ { 'statement': '" + query + "', 'resultDataContents': [ 'graph' ] } ] }");
  }
  private HTTP.RawPayload queryAsJsonRest(  String query){
    return quotedJson("{ 'statements': [ { 'statement': '" + query + "', 'resultDataContents': [ 'rest' ] } ] }");
  }
  private HTTP.RawPayload queryAsJsonRow(  String query){
    return quotedJson("{ 'statements': [ { 'statement': '" + query + "', 'resultDataContents': [ 'row' ] } ] }");
  }
  private long nodesInDatabase(){
    Result r=graphdb().execute("MATCH (n) RETURN count(n) AS c");
    Long nodes=(Long)r.columnAs("c").next();
    r.close();
    return nodes;
  }
  private void assertHasTxLocation(  Response begin){
    assertThat(begin.location(),matches("http://localhost:\\d+/db/data/transaction/\\d+"));
  }
  /** 
 * This matcher is hardcoded to check for a list containing one deleted node and one map with a deleted node mapped to the key `someKey`.
 */
  private static Matcher<? super Response> restContainsNestedDeleted(){
    return new TypeSafeMatcher<Response>(){
      @Override protected boolean matchesSafely(      HTTP.Response response){
        try {
          JsonNode list=TransactionMatchers.getJsonNodeWithName(response,"rest").iterator().next();
          assertThat(list.get(0).get("metadata").get("deleted").asBoolean(),equalTo(Boolean.TRUE));
          assertThat(list.get(1).get("someKey").get("metadata").get("deleted").asBoolean(),equalTo(Boolean.TRUE));
          return true;
        }
 catch (        JsonParseException e) {
          return false;
        }
      }
      @Override public void describeTo(      Description description){
      }
    }
;
  }
}
