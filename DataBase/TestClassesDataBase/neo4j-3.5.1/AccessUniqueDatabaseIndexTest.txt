@ExtendWith(EphemeralFileSystemExtension.class) class AccessUniqueDatabaseIndexTest {
  @Inject private EphemeralFileSystemAbstraction fileSystem;
  private final DirectoryFactory directoryFactory=new DirectoryFactory.InMemoryDirectoryFactory();
  private final File storeDirectory=new File("db");
  private final IndexDescriptor index=TestIndexDescriptorFactory.uniqueForLabel(1000,100);
  @Test void shouldAddUniqueEntries() throws Exception {
    PartitionedIndexStorage indexStorage=getIndexStorage();
    LuceneIndexAccessor accessor=createAccessor(indexStorage);
    updateAndCommit(accessor,asList(add(1L,"value1"),add(2L,"value2")));
    updateAndCommit(accessor,asList(add(3L,"value3")));
    accessor.close();
    assertEquals(asList(1L),getAllNodes(indexStorage,"value1"));
  }
  @Test void shouldUpdateUniqueEntries() throws Exception {
    PartitionedIndexStorage indexStorage=getIndexStorage();
    LuceneIndexAccessor accessor=createAccessor(indexStorage);
    updateAndCommit(accessor,asList(add(1L,"value1")));
    updateAndCommit(accessor,asList(change(1L,"value1","value2")));
    accessor.close();
    assertEquals(asList(1L),getAllNodes(indexStorage,"value2"));
    assertEquals(emptyList(),getAllNodes(indexStorage,"value1"));
  }
  @Test void shouldRemoveAndAddEntries() throws Exception {
    PartitionedIndexStorage indexStorage=getIndexStorage();
    LuceneIndexAccessor accessor=createAccessor(indexStorage);
    updateAndCommit(accessor,asList(add(1L,"value1")));
    updateAndCommit(accessor,asList(add(2L,"value2")));
    updateAndCommit(accessor,asList(add(3L,"value3")));
    updateAndCommit(accessor,asList(add(4L,"value4")));
    updateAndCommit(accessor,asList(remove(1L,"value1")));
    updateAndCommit(accessor,asList(remove(2L,"value2")));
    updateAndCommit(accessor,asList(remove(3L,"value3")));
    updateAndCommit(accessor,asList(add(1L,"value1")));
    updateAndCommit(accessor,asList(add(3L,"value3b")));
    accessor.close();
    assertEquals(asList(1L),getAllNodes(indexStorage,"value1"));
    assertEquals(emptyList(),getAllNodes(indexStorage,"value2"));
    assertEquals(emptyList(),getAllNodes(indexStorage,"value3"));
    assertEquals(asList(3L),getAllNodes(indexStorage,"value3b"));
    assertEquals(asList(4L),getAllNodes(indexStorage,"value4"));
  }
  @Test void shouldConsiderWholeTransactionForValidatingUniqueness() throws Exception {
    PartitionedIndexStorage indexStorage=getIndexStorage();
    LuceneIndexAccessor accessor=createAccessor(indexStorage);
    updateAndCommit(accessor,asList(add(1L,"value1")));
    updateAndCommit(accessor,asList(add(2L,"value2")));
    updateAndCommit(accessor,asList(change(1L,"value1","value2"),change(2L,"value2","value1")));
    accessor.close();
    assertEquals(asList(2L),getAllNodes(indexStorage,"value1"));
    assertEquals(asList(1L),getAllNodes(indexStorage,"value2"));
  }
  private LuceneIndexAccessor createAccessor(  PartitionedIndexStorage indexStorage) throws IOException {
    SchemaIndex luceneIndex=LuceneSchemaIndexBuilder.create(index,Config.defaults()).withIndexStorage(indexStorage).build();
    luceneIndex.open();
    return new LuceneIndexAccessor(luceneIndex,index);
  }
  private PartitionedIndexStorage getIndexStorage(){
    IndexStorageFactory storageFactory=new IndexStorageFactory(directoryFactory,fileSystem,directoriesByProviderKey(storeDirectory).forProvider(PROVIDER_DESCRIPTOR));
    return storageFactory.indexStorageOf(1);
  }
  private IndexEntryUpdate<?> add(  long nodeId,  Object propertyValue){
    return IndexQueryHelper.add(nodeId,index.schema(),propertyValue);
  }
  private IndexEntryUpdate<?> change(  long nodeId,  Object oldValue,  Object newValue){
    return IndexQueryHelper.change(nodeId,index.schema(),oldValue,newValue);
  }
  private IndexEntryUpdate<?> remove(  long nodeId,  Object oldValue){
    return IndexQueryHelper.remove(nodeId,index.schema(),oldValue);
  }
  private List<Long> getAllNodes(  PartitionedIndexStorage indexStorage,  String propertyValue) throws IOException {
    return AllNodesCollector.getAllNodes(indexStorage.openDirectory(indexStorage.getPartitionFolder(1)),Values.stringValue(propertyValue));
  }
  private void updateAndCommit(  IndexAccessor accessor,  Iterable<IndexEntryUpdate<?>> updates) throws IOException, IndexEntryConflictException {
    try (IndexUpdater updater=accessor.newUpdater(IndexUpdateMode.ONLINE)){
      for (      IndexEntryUpdate<?> update : updates) {
        updater.process(update);
      }
    }
   }
}
