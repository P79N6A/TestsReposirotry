static class Tracker extends NoOpClient implements RecordAccessSet {
  private final RecordAccessSet delegate;
  private final TrackingRecordAccess<RelationshipRecord,Void> relRecords;
  private final Set<Long> relationshipLocksAcquired=new HashSet<>();
  private final Set<Long> changedRelationships=new HashSet<>();
  Tracker(  NeoStores neoStores){
    this.delegate=new DirectRecordAccessSet(neoStores);
    this.relRecords=new TrackingRecordAccess<>(delegate.getRelRecords(),this);
  }
  @Override public void acquireExclusive(  LockTracer tracer,  ResourceType resourceType,  long... resourceIds) throws AcquireLockTimeoutException {
    assertEquals(ResourceTypes.RELATIONSHIP,resourceType);
    for (    long resourceId : resourceIds) {
      relationshipLocksAcquired.add(resourceId);
    }
  }
  protected void changingRelationship(  long relId){
    assertTrue("Tried to change relationship " + relId + " without this transaction having it locked",relationshipLocksAcquired.contains(relId));
    changedRelationships.add(relId);
  }
  @Override public RecordAccess<NodeRecord,Void> getNodeRecords(){
    return delegate.getNodeRecords();
  }
  @Override public RecordAccess<PropertyRecord,PrimitiveRecord> getPropertyRecords(){
    return delegate.getPropertyRecords();
  }
  @Override public RecordAccess<RelationshipRecord,Void> getRelRecords(){
    return relRecords;
  }
  @Override public RecordAccess<RelationshipGroupRecord,Integer> getRelGroupRecords(){
    return delegate.getRelGroupRecords();
  }
  @Override public RecordAccess<SchemaRecord,SchemaRule> getSchemaRuleChanges(){
    return delegate.getSchemaRuleChanges();
  }
  @Override public RecordAccess<PropertyKeyTokenRecord,Void> getPropertyKeyTokenChanges(){
    return delegate.getPropertyKeyTokenChanges();
  }
  @Override public RecordAccess<LabelTokenRecord,Void> getLabelTokenChanges(){
    return delegate.getLabelTokenChanges();
  }
  @Override public RecordAccess<RelationshipTypeTokenRecord,Void> getRelationshipTypeTokenChanges(){
    return delegate.getRelationshipTypeTokenChanges();
  }
  @Override public void close(){
    delegate.close();
  }
  @Override public boolean hasChanges(){
    return delegate.hasChanges();
  }
  @Override public int changeSize(){
    return delegate.changeSize();
  }
}
