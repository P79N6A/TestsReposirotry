@ExtendWith({DefaultFileSystemExtension.class,TestDirectoryExtension.class}) class ReadOnlyLuceneSchemaIndexTest {
  @Inject private TestDirectory testDirectory;
  @Inject private DefaultFileSystemAbstraction fileSystem;
  private ReadOnlyDatabaseSchemaIndex luceneSchemaIndex;
  @BeforeEach void setUp(){
    PartitionedIndexStorage indexStorage=new PartitionedIndexStorage(DirectoryFactory.PERSISTENT,fileSystem,testDirectory.directory());
    Config config=Config.defaults();
    IndexSamplingConfig samplingConfig=new IndexSamplingConfig(config);
    luceneSchemaIndex=new ReadOnlyDatabaseSchemaIndex(indexStorage,TestIndexDescriptorFactory.forLabel(0,0),samplingConfig,new ReadOnlyIndexPartitionFactory());
  }
  @AfterEach void tearDown() throws IOException {
    luceneSchemaIndex.close();
  }
  @Test void indexDeletionIndReadOnlyModeIsNotSupported(){
    assertThrows(UnsupportedOperationException.class,() -> luceneSchemaIndex.drop());
  }
  @Test void indexCreationInReadOnlyModeIsNotSupported(){
    assertThrows(UnsupportedOperationException.class,() -> luceneSchemaIndex.create());
  }
  @Test void readOnlyIndexMarkingIsNotSupported(){
    assertThrows(UnsupportedOperationException.class,() -> luceneSchemaIndex.markAsOnline());
  }
  @Test void readOnlyIndexMode(){
    assertTrue(luceneSchemaIndex.isReadOnly());
  }
  @Test void writerIsNotAccessibleInReadOnlyMode(){
    assertThrows(UnsupportedOperationException.class,() -> luceneSchemaIndex.getIndexWriter());
  }
}
