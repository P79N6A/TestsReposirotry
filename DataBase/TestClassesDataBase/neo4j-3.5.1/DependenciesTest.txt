public class DependenciesTest {
  @Test public void givenSatisfiedTypeWhenResolveWithTypeThenInstanceReturned(){
    Dependencies dependencies=new Dependencies();
    String foo="foo";
    dependencies.satisfyDependency(foo);
    String instance=dependencies.resolveDependency(String.class);
    assertThat(instance,equalTo(foo));
  }
  @Test public void givenSatisfiedTypeWhenResolveWithSuperTypeThenInstanceReturned(){
    Dependencies dependencies=new Dependencies();
    AbstractList foo=new ArrayList();
    dependencies.satisfyDependency(foo);
    AbstractList instance=dependencies.resolveDependency(AbstractList.class);
    assertThat(instance,equalTo(foo));
  }
  @Test public void givenSatisfiedTypeWhenResolveWithInterfaceThenInstanceReturned(){
    Dependencies dependencies=new Dependencies();
    List foo=new ArrayList();
    dependencies.satisfyDependency(foo);
    List instance=dependencies.resolveDependency(List.class);
    assertThat(instance,equalTo(foo));
  }
  @Test public void givenSatisfiedTypeWhenResolveWithSubInterfaceThenInstanceReturned(){
    Dependencies dependencies=new Dependencies();
    Collection foo=new ArrayList();
    dependencies.satisfyDependency(foo);
    Collection instance=dependencies.resolveDependency(Collection.class);
    assertThat(instance,equalTo(foo));
  }
  @Test public void givenSatisfiedTypeInParentWhenResolveWithTypeInEmptyDependenciesThenInstanceReturned(){
    Dependencies parent=new Dependencies();
    Dependencies dependencies=new Dependencies(parent);
    Collection foo=new ArrayList();
    dependencies.satisfyDependency(foo);
    Collection instance=dependencies.resolveDependency(Collection.class);
    assertThat(instance,equalTo(foo));
  }
  @Test public void givenSatisfiedTypeInParentAndDependenciesWhenResolveWithTypeInDependenciesThenInstanceReturned(){
    Dependencies parent=new Dependencies();
    Dependencies dependencies=new Dependencies(parent);
    Collection foo=new ArrayList();
    dependencies.satisfyDependency(foo);
    parent.satisfyDependency(new ArrayList());
    Collection instance=dependencies.resolveDependency(Collection.class);
    assertThat(instance,equalTo(foo));
  }
  @Test public void givenEmptyDependenciesWhenResolveWithTypeThenException(){
    Dependencies dependencies=new Dependencies();
    try {
      dependencies.resolveDependency(Collection.class);
      fail();
    }
 catch (    UnsatisfiedDependencyException e) {
    }
  }
}
