public class ConvertersTest {
  @Rule public final TestDirectory directory=TestDirectory.testDirectory();
  @Test public void shouldSortFilesByNumberCleverly() throws Exception {
    File file1=existenceOfFile("file1");
    File file123=existenceOfFile("file123");
    File file12=existenceOfFile("file12");
    File file2=existenceOfFile("file2");
    File file32=existenceOfFile("file32");
    File[] files=regexFiles(true).apply(directory.file("file.*").getAbsolutePath());
    assertArrayEquals(new File[]{file1,file2,file12,file32,file123},files);
  }
  @Test public void canProcessPortFromAGivenString(){
    String addressWithPorts="hostname:1234";
    Optional<Integer> port=toOptionalHostnamePortFromRawAddress(addressWithPorts).getPort();
    assertTrue(port.isPresent());
    assertEquals(Integer.valueOf(1234),port.get());
  }
  @Test public void emptyOptionalWhenPortIsMissing(){
    String addressWithoutPorts="hostname";
    Optional<Integer> port=toOptionalHostnamePortFromRawAddress(addressWithoutPorts).getPort();
    assertFalse(port.isPresent());
  }
  @Test public void canProcessHostnameFromAGivenAddress(){
    String addressWithPorts="hostname:1234";
    Optional<String> hostname=toOptionalHostnamePortFromRawAddress(addressWithPorts).getHostname();
    assertTrue(hostname.isPresent());
    assertEquals("hostname",hostname.get());
  }
  @Test public void canProcessHostnameWithoutPort(){
    String addressWithoutPort="hostname";
    Optional<String> hostname=toOptionalHostnamePortFromRawAddress(addressWithoutPort).getHostname();
    assertTrue(hostname.isPresent());
    assertEquals("hostname",hostname.get());
  }
  @Test public void emptyOptionalWhenOnlyPort(){
    String portOnlyAddress=":1234";
    Optional<String> hostname=toOptionalHostnamePortFromRawAddress(portOnlyAddress).getHostname();
    assertFalse(hostname.isPresent());
  }
  @Test public void ipv6Works(){
    String full="1234:5678:9abc:def0:1234:5678:9abc:def0";
    List<Pair<String,OptionalHostnamePort>> cases=Arrays.asList(Pair.of("[::1]",new OptionalHostnamePort("::1",null,null)),Pair.of("[3FFe::1]",new OptionalHostnamePort("3FFe::1",null,null)),Pair.of("[::1]:2",new OptionalHostnamePort("::1",2,2)),Pair.of("[" + full + "]",new OptionalHostnamePort(full,null,null)),Pair.of("[" + full + "]"+ ":5432",new OptionalHostnamePort(full,5432,5432)),Pair.of("[1::2]:3-4",new OptionalHostnamePort("1::2",3,4)));
    for (    Pair<String,OptionalHostnamePort> useCase : cases) {
      String caseInput=useCase.first();
      OptionalHostnamePort caseOutput=useCase.other();
      OptionalHostnamePort optionalHostnamePort=toOptionalHostnamePortFromRawAddress(caseInput);
      String msg=String.format("\"%s\" -> %s",caseInput,caseOutput);
      assertEquals(msg,caseOutput.getHostname(),optionalHostnamePort.getHostname());
      assertEquals(msg,caseOutput.getPort(),optionalHostnamePort.getPort());
      assertEquals(msg,caseOutput.getUpperRangePort(),optionalHostnamePort.getUpperRangePort());
    }
  }
  @Test public void trailingColonIgnored(){
    OptionalHostnamePort optionalHostnamePort=toOptionalHostnamePortFromRawAddress("localhost::");
    assertEquals("localhost",optionalHostnamePort.getHostname().get());
    assertFalse(optionalHostnamePort.getPort().isPresent());
    assertFalse(optionalHostnamePort.getUpperRangePort().isPresent());
  }
  private File existenceOfFile(  String name) throws IOException {
    File file=directory.file(name);
    file.createNewFile();
    return file;
  }
}
