public class TestKernelEvents {
  private static final String PATH="target/var/neodb";
  private static final Object RESOURCE1=new Object();
  private static final Object RESOURCE2=new Object();
  @BeforeClass public static void doBefore(){
    deleteFileOrDirectory(PATH);
  }
  @Test public void testRegisterUnregisterHandlers(){
    GraphDatabaseService graphDb=new TestGraphDatabaseFactory().newImpermanentDatabase();
    KernelEventHandler handler1=new DummyKernelEventHandler(RESOURCE1){
      @Override public ExecutionOrder orderComparedTo(      KernelEventHandler other){
        return ExecutionOrder.DOESNT_MATTER;
      }
    }
;
    KernelEventHandler handler2=new DummyKernelEventHandler(RESOURCE2){
      @Override public ExecutionOrder orderComparedTo(      KernelEventHandler other){
        return ExecutionOrder.DOESNT_MATTER;
      }
    }
;
    try {
      graphDb.unregisterKernelEventHandler(handler1);
      fail("Shouldn't be able to do unregister on a " + "unregistered handler");
    }
 catch (    IllegalStateException e) {
    }
    assertSame(handler1,graphDb.registerKernelEventHandler(handler1));
    assertSame(handler1,graphDb.registerKernelEventHandler(handler1));
    assertSame(handler1,graphDb.unregisterKernelEventHandler(handler1));
    try {
      graphDb.unregisterKernelEventHandler(handler1);
      fail("Shouldn't be able to do unregister on a " + "unregistered handler");
    }
 catch (    IllegalStateException e) {
    }
    assertSame(handler1,graphDb.registerKernelEventHandler(handler1));
    assertSame(handler2,graphDb.registerKernelEventHandler(handler2));
    assertSame(handler1,graphDb.unregisterKernelEventHandler(handler1));
    assertSame(handler2,graphDb.unregisterKernelEventHandler(handler2));
    graphDb.shutdown();
  }
  @Test public void testShutdownEvents(){
    GraphDatabaseService graphDb=new TestGraphDatabaseFactory().newImpermanentDatabase();
    DummyKernelEventHandler handler1=new DummyKernelEventHandler(RESOURCE1){
      @Override public ExecutionOrder orderComparedTo(      KernelEventHandler other){
        if (((DummyKernelEventHandler)other).resource == RESOURCE2) {
          return ExecutionOrder.AFTER;
        }
        return ExecutionOrder.DOESNT_MATTER;
      }
    }
;
    DummyKernelEventHandler handler2=new DummyKernelEventHandler(RESOURCE1){
      @Override public ExecutionOrder orderComparedTo(      KernelEventHandler other){
        if (((DummyKernelEventHandler)other).resource == RESOURCE1) {
          return ExecutionOrder.BEFORE;
        }
        return ExecutionOrder.DOESNT_MATTER;
      }
    }
;
    graphDb.registerKernelEventHandler(handler1);
    graphDb.registerKernelEventHandler(handler2);
    graphDb.shutdown();
    assertEquals(Integer.valueOf(0),handler2.beforeShutdown);
    assertEquals(Integer.valueOf(1),handler1.beforeShutdown);
  }
private abstract static class DummyKernelEventHandler implements KernelEventHandler {
    private static int counter;
    private Integer beforeShutdown;
    private Integer kernelPanic;
    private final Object resource;
    DummyKernelEventHandler(    Object resource){
      this.resource=resource;
    }
    @Override public void beforeShutdown(){
      beforeShutdown=counter++;
    }
    @Override public Object getResource(){
      return this.resource;
    }
    @Override public void kernelPanic(    ErrorState error){
      kernelPanic=counter++;
    }
  }
}
