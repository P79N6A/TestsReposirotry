static class MatcherBuilder extends AbstractLog {
  private final AssertableLogProvider.LogMatcherBuilder builder;
  private AssertableLogProvider.LogMatcher matcher;
  MatcherBuilder(  AssertableLogProvider.LogMatcherBuilder builder){
    this.builder=builder;
  }
  public AssertableLogProvider.LogMatcher matcher(){
    return requireNonNull(matcher,"invalid use, no matcher built");
  }
  @Override public boolean isDebugEnabled(){
    return true;
  }
  @Override public void bulk(  @Nonnull Consumer<Log> consumer){
    throw new UnsupportedOperationException();
  }
  @Nonnull @Override public Logger debugLogger(){
    return new Logger(){
      @Override public void log(      @Nonnull String message){
        matcher=builder.debug(messageMatcher(message));
      }
      @Override public void log(      @Nonnull String message,      @Nonnull Throwable throwable){
        matcher=builder.debug(messageMatcher(message),sameInstance(throwable));
      }
      @Override public void log(      @Nonnull String format,      @Nonnull Object... arguments){
        matcher=builder.debug(messageMatcher(format),arguments);
      }
      @Override public void bulk(      @Nonnull Consumer<Logger> consumer){
        throw new UnsupportedOperationException();
      }
    }
;
  }
  @Nonnull @Override public Logger infoLogger(){
    return new Logger(){
      @Override public void log(      @Nonnull String message){
        matcher=builder.info(messageMatcher(message));
      }
      @Override public void log(      @Nonnull String message,      @Nonnull Throwable throwable){
        matcher=builder.info(messageMatcher(message),sameInstance(throwable));
      }
      @Override public void log(      @Nonnull String format,      @Nonnull Object... arguments){
        matcher=builder.info(messageMatcher(format),arguments);
      }
      @Override public void bulk(      @Nonnull Consumer<Logger> consumer){
        throw new UnsupportedOperationException();
      }
    }
;
  }
  @Nonnull @Override public Logger warnLogger(){
    return new Logger(){
      @Override public void log(      @Nonnull String message){
        matcher=builder.warn(messageMatcher(message));
      }
      @Override public void log(      @Nonnull String message,      @Nonnull Throwable throwable){
        matcher=builder.warn(messageMatcher(message),sameInstance(throwable));
      }
      @Override public void log(      @Nonnull String format,      @Nonnull Object... arguments){
        matcher=builder.warn(messageMatcher(format),arguments);
      }
      @Override public void bulk(      @Nonnull Consumer<Logger> consumer){
        throw new UnsupportedOperationException();
      }
    }
;
  }
  @Nonnull @Override public Logger errorLogger(){
    return new Logger(){
      @Override public void log(      @Nonnull String message){
        matcher=builder.error(messageMatcher(message));
      }
      @Override public void log(      @Nonnull String message,      @Nonnull Throwable throwable){
        matcher=builder.error(messageMatcher(message),sameInstance(throwable));
      }
      @Override public void log(      @Nonnull String format,      @Nonnull Object... arguments){
        matcher=builder.error(messageMatcher(format),arguments);
      }
      @Override public void bulk(      @Nonnull Consumer<Logger> consumer){
        throw new UnsupportedOperationException();
      }
    }
;
  }
  private Matcher<String> messageMatcher(  @Nonnull String message){
    return allOf(startsWith("[AsyncLog @ "),endsWith("]  " + message));
  }
}
