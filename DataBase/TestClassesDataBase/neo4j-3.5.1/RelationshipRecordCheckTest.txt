class RelationshipRecordCheckTest extends RecordCheckTestBase<RelationshipRecord,RelationshipConsistencyReport,RelationshipRecordCheck> {
  private boolean checkSingleDirection;
  RelationshipRecordCheckTest(){
    super(new RelationshipRecordCheck(RelationshipTypeField.RELATIONSHIP_TYPE,NodeField.SOURCE,RelationshipField.SOURCE_PREV,RelationshipField.SOURCE_NEXT,NodeField.TARGET,RelationshipField.TARGET_PREV,RelationshipField.TARGET_NEXT,new PropertyChain<>(from -> null)),RelationshipConsistencyReport.class,CheckStage.Stage6_RS_Forward.getCacheSlotSizes(),MultiPassStore.RELATIONSHIPS);
  }
  private void checkSingleDirection(){
    this.checkSingleDirection=true;
  }
  @Override final RelationshipConsistencyReport check(  RelationshipRecord record){
    records.populateCache();
    RelationshipConsistencyReport report=mock(RelationshipConsistencyReport.class);
    records.cacheAccess().setCacheSlotSizes(CheckStage.Stage6_RS_Forward.getCacheSlotSizes());
    super.check(report,record);
    if (!checkSingleDirection) {
      records.cacheAccess().setForward(!records.cacheAccess().isForward());
      super.check(report,record);
    }
    return report;
  }
  @Test void shouldNotReportAnythingForRelationshipNotInUse(){
    RelationshipRecord relationship=notInUse(new RelationshipRecord(42,0,0,0));
    RelationshipConsistencyReport report=check(relationship);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldNotReportAnythingForRelationshipThatDoesNotReferenceOtherRecords(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipConsistencyReport report=check(relationship);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldNotReportAnythingForRelationshipWithConsistentReferences(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,relationship.getId(),NONE)));
    add(inUse(new NodeRecord(2,false,53,NONE)));
    add(inUse(new NodeRecord(3,false,NONE,NONE)));
    add(inUse(new PropertyRecord(101)));
    relationship.setNextProp(101);
    RelationshipRecord sNext=add(inUse(new RelationshipRecord(51,1,3,4)));
    RelationshipRecord tNext=add(inUse(new RelationshipRecord(52,2,3,4)));
    RelationshipRecord tPrev=add(inUse(new RelationshipRecord(53,3,2,4)));
    relationship.setFirstNextRel(sNext.getId());
    sNext.setFirstPrevRel(relationship.getId());
    sNext.setFirstInFirstChain(false);
    relationship.setSecondNextRel(tNext.getId());
    tNext.setFirstPrevRel(relationship.getId());
    tNext.setFirstInFirstChain(false);
    relationship.setSecondPrevRel(tPrev.getId());
    relationship.setFirstInSecondChain(false);
    tPrev.setSecondNextRel(relationship.getId());
    RelationshipConsistencyReport report=check(relationship);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportIllegalRelationshipType(){
    checkSingleDirection();
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,NONE));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipConsistencyReport report=check(relationship);
    verify(report).illegalRelationshipType();
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportRelationshipTypeNotInUse(){
    checkSingleDirection();
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    RelationshipTypeTokenRecord relationshipType=add(notInUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipConsistencyReport report=check(relationship);
    verify(report).relationshipTypeNotInUse(relationshipType);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportIllegalSourceNode(){
    checkSingleDirection();
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,NONE,1,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    RelationshipConsistencyReport report=check(relationship);
    verify(report).illegalSourceNode();
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportSourceNodeNotInUse(){
    checkSingleDirection();
    initialize(RELATIONSHIPS,NODES);
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    NodeRecord node=add(notInUse(new NodeRecord(1,false,NONE,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipConsistencyReport report=check(relationship);
    verify(report).sourceNodeNotInUse(node);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportIllegalTargetNode(){
    checkSingleDirection();
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,NONE,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    RelationshipConsistencyReport report=check(relationship);
    verify(report).illegalTargetNode();
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportTargetNodeNotInUse(){
    checkSingleDirection();
    initialize(RELATIONSHIPS,NODES);
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    NodeRecord node=add(notInUse(new NodeRecord(2,false,NONE,NONE)));
    RelationshipConsistencyReport report=check(relationship);
    verify(report).targetNodeNotInUse(node);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportPropertyNotInUse(){
    checkSingleDirection();
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    relationship.setNextProp(11);
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    PropertyRecord property=add(notInUse(new PropertyRecord(11)));
    RelationshipConsistencyReport report=check(relationship);
    verify(report).propertyNotInUse(property);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportPropertyNotFirstInChain(){
    checkSingleDirection();
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    relationship.setNextProp(11);
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    PropertyRecord property=add(inUse(new PropertyRecord(11)));
    property.setPrevProp(6);
    RelationshipConsistencyReport report=check(relationship);
    verify(report).propertyNotFirstInChain(property);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportSourceNodeNotReferencingBackForFirstRelationshipInSourceChain(){
    checkSingleDirection();
    initialize(RELATIONSHIPS,NODES);
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    NodeRecord source=add(inUse(new NodeRecord(1,false,7,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipConsistencyReport report=check(relationship);
    verify(report).sourceNodeDoesNotReferenceBack(source);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportTargetNodeNotReferencingBackForFirstRelationshipInTargetChain(){
    checkSingleDirection();
    initialize(RELATIONSHIPS,NODES);
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    NodeRecord target=add(inUse(new NodeRecord(2,false,7,NONE)));
    RelationshipConsistencyReport report=check(relationship);
    verify(report).targetNodeDoesNotReferenceBack(target);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportSourceAndTargetNodeNotReferencingBackForFirstRelationshipInChains(){
    checkSingleDirection();
    initialize(RELATIONSHIPS,NODES);
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    NodeRecord source=add(inUse(new NodeRecord(1,false,NONE,NONE)));
    NodeRecord target=add(inUse(new NodeRecord(2,false,NONE,NONE)));
    RelationshipConsistencyReport report=check(relationship);
    verify(report).sourceNodeDoesNotReferenceBack(source);
    verify(report).targetNodeDoesNotReferenceBack(target);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportSourceNodeWithoutChainForRelationshipInTheMiddleOfChain(){
    checkSingleDirection();
    initialize(RELATIONSHIPS,NODES);
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    NodeRecord source=add(inUse(new NodeRecord(1,false,NONE,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipRecord sPrev=add(inUse(new RelationshipRecord(51,1,0,0)));
    relationship.setFirstPrevRel(sPrev.getId());
    relationship.setFirstInFirstChain(false);
    sPrev.setFirstNextRel(relationship.getId());
    RelationshipConsistencyReport report=check(relationship);
    verify(report).sourceNodeHasNoRelationships(source);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportTargetNodeWithoutChainForRelationshipInTheMiddleOfChain(){
    checkSingleDirection();
    initialize(RELATIONSHIPS,NODES);
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    NodeRecord target=add(inUse(new NodeRecord(2,false,NONE,NONE)));
    RelationshipRecord tPrev=add(inUse(new RelationshipRecord(51,0,2,0)));
    relationship.setSecondPrevRel(tPrev.getId());
    relationship.setFirstInSecondChain(false);
    tPrev.setSecondNextRel(relationship.getId());
    RelationshipConsistencyReport report=check(relationship);
    verify(report).targetNodeHasNoRelationships(target);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportSourcePrevReferencingOtherNodes(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,0,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipRecord sPrev=add(inUse(new RelationshipRecord(51,8,9,0)));
    relationship.setFirstPrevRel(sPrev.getId());
    relationship.setFirstInFirstChain(false);
    RelationshipConsistencyReport report=check(relationship);
    verify(report).sourcePrevReferencesOtherNodes(sPrev);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportTargetPrevReferencingOtherNodes(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,0,NONE)));
    RelationshipRecord tPrev=add(inUse(new RelationshipRecord(51,8,9,0)));
    relationship.setSecondPrevRel(tPrev.getId());
    relationship.setFirstInSecondChain(false);
    RelationshipConsistencyReport report=check(relationship);
    verify(report).targetPrevReferencesOtherNodes(tPrev);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportSourceNextReferencingOtherNodes(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipRecord sNext=add(inUse(new RelationshipRecord(51,8,9,0)));
    relationship.setFirstNextRel(sNext.getId());
    RelationshipConsistencyReport report=check(relationship);
    verify(report).sourceNextReferencesOtherNodes(sNext);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportTargetNextReferencingOtherNodes(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipRecord tNext=add(inUse(new RelationshipRecord(51,8,9,0)));
    relationship.setSecondNextRel(tNext.getId());
    RelationshipConsistencyReport report=check(relationship);
    verify(report).targetNextReferencesOtherNodes(tNext);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportSourcePrevReferencingOtherNodesWhenReferencingTargetNode(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,0,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipRecord sPrev=add(inUse(new RelationshipRecord(51,2,0,0)));
    relationship.setFirstPrevRel(sPrev.getId());
    relationship.setFirstInFirstChain(false);
    RelationshipConsistencyReport report=check(relationship);
    verify(report).sourcePrevReferencesOtherNodes(sPrev);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportTargetPrevReferencingOtherNodesWhenReferencingSourceNode(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,0,NONE)));
    RelationshipRecord tPrev=add(inUse(new RelationshipRecord(51,1,0,0)));
    relationship.setSecondPrevRel(tPrev.getId());
    relationship.setFirstInSecondChain(false);
    RelationshipConsistencyReport report=check(relationship);
    verify(report).targetPrevReferencesOtherNodes(tPrev);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportSourceNextReferencingOtherNodesWhenReferencingTargetNode(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipRecord sNext=add(inUse(new RelationshipRecord(51,2,0,0)));
    relationship.setFirstNextRel(sNext.getId());
    RelationshipConsistencyReport report=check(relationship);
    verify(report).sourceNextReferencesOtherNodes(sNext);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportTargetNextReferencingOtherNodesWhenReferencingSourceNode(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipRecord tNext=add(inUse(new RelationshipRecord(51,1,0,0)));
    relationship.setSecondNextRel(tNext.getId());
    RelationshipConsistencyReport report=check(relationship);
    verify(report).targetNextReferencesOtherNodes(tNext);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportSourcePrevNotReferencingBack(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,0,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipRecord sPrev=add(inUse(new RelationshipRecord(51,1,3,0)));
    relationship.setFirstPrevRel(sPrev.getId());
    relationship.setFirstInFirstChain(false);
    RelationshipConsistencyReport report=check(relationship);
    verify(report).sourcePrevDoesNotReferenceBack(sPrev);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportTargetPrevNotReferencingBack(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,0,NONE)));
    RelationshipRecord tPrev=add(inUse(new RelationshipRecord(51,2,3,0)));
    relationship.setSecondPrevRel(tPrev.getId());
    relationship.setFirstInSecondChain(false);
    RelationshipConsistencyReport report=check(relationship);
    verify(report).targetPrevDoesNotReferenceBack(tPrev);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportSourceNextNotReferencingBack(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipRecord sNext=add(inUse(new RelationshipRecord(51,3,1,0)));
    relationship.setFirstNextRel(sNext.getId());
    RelationshipConsistencyReport report=check(relationship);
    verify(report).sourceNextDoesNotReferenceBack(sNext);
    verifyNoMoreInteractions(report);
  }
  @Test void shouldReportTargetNextNotReferencingBack(){
    RelationshipRecord relationship=inUse(new RelationshipRecord(42,1,2,4));
    add(inUse(new RelationshipTypeTokenRecord(4)));
    add(inUse(new NodeRecord(1,false,42,NONE)));
    add(inUse(new NodeRecord(2,false,42,NONE)));
    RelationshipRecord tNext=add(inUse(new RelationshipRecord(51,3,2,0)));
    relationship.setSecondNextRel(tNext.getId());
    RelationshipConsistencyReport report=check(relationship);
    verify(report).targetNextDoesNotReferenceBack(tNext);
    verifyNoMoreInteractions(report);
  }
}
