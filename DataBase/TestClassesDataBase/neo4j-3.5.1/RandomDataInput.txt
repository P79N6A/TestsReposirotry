private class RandomDataInput implements Input, AutoCloseable {
  private final int count;
  private final BadCollector badCollector;
  RandomDataInput(  int count){
    this.count=count;
    this.badCollector=createBadCollector();
  }
  @Override public InputIterable relationships(){
    return EMPTY_ITERABLE;
  }
  @Override public InputIterable nodes(){
    return () -> new RandomNodeGenerator(count,(state,visitor,id) -> {
      String[] keys=random.randomValues().selection(TOKENS,1,TOKENS.length,false);
      for (      String key : keys) {
        visitor.property(key,random.nextValueAsObject());
      }
      visitor.labels(random.selection(TOKENS,1,TOKENS.length,false));
    }
);
  }
  @Override public IdMapper idMapper(  NumberArrayFactory numberArrayFactory){
    return IdMappers.actual();
  }
  @Override public Collector badCollector(){
    return badCollector;
  }
  private BadCollector createBadCollector(){
    try {
      return new BadCollector(fileSystemRule.get().openAsOutputStream(new File(directory.databaseDir(),"bad"),false),0,0);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
  @Override public Estimates calculateEstimates(  ToIntFunction<Value[]> valueSizeCalculator){
    return knownEstimates(count,0,count * TOKENS.length / 2,0,count * TOKENS.length / 2 * Long.BYTES,0,0);
  }
  @Override public void close(){
    badCollector.close();
  }
}
