public class MethodSignatureCompilerTest {
  @Rule public ExpectedException exception=ExpectedException.none();
public static class MyOutputRecord {
    public String name;
    MyOutputRecord(    String name){
      this.name=name;
    }
  }
public static class UnmappableRecord {
    public UnmappableRecord wat;
  }
public static class ClassWithProcedureWithSimpleArgs {
    @Procedure public Stream<MyOutputRecord> echo(    @Name("name") String in){
      return Stream.of(new MyOutputRecord(in));
    }
    @Procedure public Stream<MyOutputRecord> echoWithoutAnnotations(    @Name("name") String in1,    String in2){
      return Stream.of(new MyOutputRecord(in1 + in2));
    }
    @Procedure public Stream<MyOutputRecord> echoWithInvalidType(    @Name("name") UnmappableRecord in){
      return Stream.of(new MyOutputRecord("echo"));
    }
  }
  @Test public void shouldMapSimpleRecordWithString() throws Throwable {
    Method echo=ClassWithProcedureWithSimpleArgs.class.getMethod("echo",String.class);
    List<FieldSignature> signature=new MethodSignatureCompiler(new TypeMappers()).signatureFor(echo);
    assertThat(signature,contains(FieldSignature.inputField("name",Neo4jTypes.NTString)));
  }
  @Test public void shouldMapSimpleFunctionWithString() throws Throwable {
    Method echo=ClassWithProcedureWithSimpleArgs.class.getMethod("echo",String.class);
    List<Neo4jTypes.AnyType> signature=new MethodSignatureCompiler(new TypeMappers()).inputTypesFor(echo);
    assertThat(signature,contains(Neo4jTypes.NTString));
  }
  @Test public void shouldGiveHelpfulErrorOnUnmappable() throws Throwable {
    Method echo=ClassWithProcedureWithSimpleArgs.class.getMethod("echoWithInvalidType",UnmappableRecord.class);
    exception.expect(ProcedureException.class);
    exception.expectMessage(String.format("Argument `name` at position 0 in `echoWithInvalidType` with%n" + "type `UnmappableRecord` cannot be converted to a Neo4j type: Don't know how to map " + "`org.neo4j.kernel.impl.proc.MethodSignatureCompilerTest$UnmappableRecord` to "+ "the Neo4j Type System.%n"+ "Please refer to to the documentation for full details.%n"+ "For your reference, known types are:"));
    new MethodSignatureCompiler(new TypeMappers()).signatureFor(echo);
  }
  @Test public void shouldGiveHelpfulErrorOnMissingAnnotations() throws Throwable {
    Method echo=ClassWithProcedureWithSimpleArgs.class.getMethod("echoWithoutAnnotations",String.class,String.class);
    exception.expect(ProcedureException.class);
    exception.expectMessage(String.format("Argument at position 1 in method `echoWithoutAnnotations` is missing an `@Name` " + "annotation.%n" + "Please add the annotation, recompile the class and try again."));
    new MethodSignatureCompiler(new TypeMappers()).signatureFor(echo);
  }
}
