public class EntryCountThresholdTest {
  private LogFileInformation info=mock(LogFileInformation.class);
  private File file=mock(File.class);
  @Test public void shouldReportThresholdReachedWhenThresholdIsReached() throws Exception {
    long version=10L;
    when(info.getFirstEntryId(version + 1)).thenReturn(1L);
    when(info.getLastEntryId()).thenReturn(2L);
    EntryCountThreshold threshold=new EntryCountThreshold(1);
    boolean reached=threshold.reached(file,version,info);
    assertTrue(reached);
  }
  @Test public void shouldReportThresholdNotReachedWhenThresholdIsNotReached() throws Exception {
    long version=10L;
    when(info.getFirstEntryId(version)).thenReturn(1L);
    when(info.getFirstEntryId(version + 1)).thenReturn(1L);
    when(info.getLastEntryId()).thenReturn(1L);
    EntryCountThreshold threshold=new EntryCountThreshold(1);
    assertFalse(threshold.reached(file,version,info));
  }
  @Test public void shouldProperlyHandleCaseWithOneEntryPerLogFile() throws Exception {
    when(info.getFirstEntryId(1L)).thenReturn(1L);
    when(info.getFirstEntryId(2L)).thenReturn(2L);
    when(info.getFirstEntryId(3L)).thenReturn(3L);
    when(info.getLastEntryId()).thenReturn(3L);
    EntryCountThreshold threshold=new EntryCountThreshold(1);
    assertFalse(threshold.reached(file,2L,info));
    assertTrue(threshold.reached(file,1L,info));
  }
  @Test public void shouldWorkWhenCalledMultipleTimesKeeping2Files() throws Exception {
    when(info.getFirstEntryId(1L)).thenReturn(1L);
    when(info.getFirstEntryId(2L)).thenReturn(5L);
    when(info.getFirstEntryId(3L)).thenReturn(15L);
    when(info.getFirstEntryId(4L)).thenReturn(18L);
    when(info.getLastEntryId()).thenReturn(18L);
    EntryCountThreshold threshold=new EntryCountThreshold(8);
    assertTrue(threshold.reached(file,1L,info));
    assertFalse(threshold.reached(file,2L,info));
    assertFalse(threshold.reached(file,3L,info));
  }
  @Test public void shouldWorkWhenCalledMultipleTimesKeeping3Files() throws Exception {
    when(info.getFirstEntryId(1L)).thenReturn(1L);
    when(info.getFirstEntryId(2L)).thenReturn(5L);
    when(info.getFirstEntryId(3L)).thenReturn(15L);
    when(info.getFirstEntryId(4L)).thenReturn(18L);
    when(info.getLastEntryId()).thenReturn(18L);
    EntryCountThreshold threshold=new EntryCountThreshold(15);
    assertFalse(threshold.reached(file,1L,info));
    assertFalse(threshold.reached(file,2L,info));
    assertFalse(threshold.reached(file,3L,info));
  }
  @Test public void shouldWorkWhenCalledMultipleTimesKeeping1FileOnBoundary() throws Exception {
    when(info.getFirstEntryId(1L)).thenReturn(1L);
    when(info.getFirstEntryId(2L)).thenReturn(5L);
    when(info.getFirstEntryId(3L)).thenReturn(15L);
    when(info.getFirstEntryId(4L)).thenReturn(18L);
    when(info.getLastEntryId()).thenReturn(18L);
    EntryCountThreshold threshold=new EntryCountThreshold(3);
    assertTrue(threshold.reached(file,1L,info));
    assertTrue(threshold.reached(file,2L,info));
    assertFalse(threshold.reached(file,3L,info));
  }
  @Test public void shouldSkipEmptyLogsBetweenLogsThatWillBeKept() throws Exception {
    when(info.getFirstEntryId(1L)).thenReturn(1L);
    when(info.getFirstEntryId(2L)).thenReturn(1L);
    when(info.getFirstEntryId(3L)).thenReturn(5L);
    when(info.getFirstEntryId(4L)).thenReturn(5L);
    when(info.getFirstEntryId(5L)).thenReturn(5L);
    when(info.getFirstEntryId(6L)).thenReturn(13L);
    when(info.getLastEntryId()).thenReturn(13L);
    EntryCountThreshold threshold=new EntryCountThreshold(9);
    assertFalse(threshold.reached(file,5L,info));
    assertFalse(threshold.reached(file,4L,info));
    assertFalse(threshold.reached(file,3L,info));
    assertFalse(threshold.reached(file,2L,info));
    assertTrue(threshold.reached(file,1L,info));
  }
  @Test public void shouldDeleteNonEmptyLogThatIsAfterASeriesOfEmptyLogs() throws Exception {
    when(info.getFirstEntryId(1L)).thenReturn(1L);
    when(info.getFirstEntryId(2L)).thenReturn(1L);
    when(info.getFirstEntryId(3L)).thenReturn(5L);
    when(info.getFirstEntryId(4L)).thenReturn(5L);
    when(info.getFirstEntryId(5L)).thenReturn(5L);
    when(info.getFirstEntryId(6L)).thenReturn(13L);
    when(info.getLastEntryId()).thenReturn(13L);
    EntryCountThreshold threshold=new EntryCountThreshold(8);
    assertFalse(threshold.reached(file,5L,info));
    assertTrue(threshold.reached(file,4L,info));
    assertTrue(threshold.reached(file,3L,info));
    assertTrue(threshold.reached(file,2L,info));
    assertTrue(threshold.reached(file,1L,info));
  }
}
