@RunWith(Suite.class) @Suite.SuiteClasses({DynamicRecordCheckTest.StringDynamicRecordCheckTest.class,DynamicRecordCheckTest.ArrayDynamicRecordCheckTest.class,DynamicRecordCheckTest.SchemaDynamicRecordCheckTest.class}) public abstract class DynamicRecordCheckTest extends RecordCheckTestBase<DynamicRecord,ConsistencyReport.DynamicConsistencyReport,DynamicRecordCheck> {
  private final int blockSize;
  private DynamicRecordCheckTest(  DynamicRecordCheck check,  int blockSize){
    super(check,ConsistencyReport.DynamicConsistencyReport.class,new int[0]);
    this.blockSize=blockSize;
  }
  @Test public void shouldNotReportAnythingForRecordNotInUse(){
    DynamicRecord property=notInUse(record(42));
    ConsistencyReport.DynamicConsistencyReport report=check(property);
    verifyNoMoreInteractions(report);
  }
  @Test public void shouldNotReportAnythingForRecordThatDoesNotReferenceOtherRecords(){
    DynamicRecord property=inUse(fill(record(42),blockSize / 2));
    ConsistencyReport.DynamicConsistencyReport report=check(property);
    verifyNoMoreInteractions(report);
  }
  @Test public void shouldNotReportAnythingForRecordWithConsistentReferences(){
    DynamicRecord property=inUse(fill(record(42)));
    DynamicRecord next=add(inUse(fill(record(7),blockSize / 2)));
    property.setNextBlock(next.getId());
    ConsistencyReport.DynamicConsistencyReport report=check(property);
    verifyNoMoreInteractions(report);
  }
  @Test public void shouldReportNextRecordNotInUse(){
    DynamicRecord property=inUse(fill(record(42)));
    DynamicRecord next=add(notInUse(record(7)));
    property.setNextBlock(next.getId());
    ConsistencyReport.DynamicConsistencyReport report=check(property);
    verify(report).nextNotInUse(next);
    verifyNoMoreInteractions(report);
  }
  @Test public void shouldReportSelfReferentialNext(){
    DynamicRecord property=add(inUse(fill(record(42))));
    property.setNextBlock(property.getId());
    ConsistencyReport.DynamicConsistencyReport report=check(property);
    verify(report).selfReferentialNext();
    verifyNoMoreInteractions(report);
  }
  @Test public void shouldReportNonFullRecordWithNextReference(){
    DynamicRecord property=inUse(fill(record(42),blockSize - 1));
    DynamicRecord next=add(inUse(fill(record(7),blockSize / 2)));
    property.setNextBlock(next.getId());
    ConsistencyReport.DynamicConsistencyReport report=check(property);
    verify(report).recordNotFullReferencesNext();
    verifyNoMoreInteractions(report);
  }
  @Test public void shouldReportInvalidDataLength(){
    DynamicRecord property=inUse(record(42));
    property.setLength(-1);
    ConsistencyReport.DynamicConsistencyReport report=check(property);
    verify(report).invalidLength();
    verifyNoMoreInteractions(report);
  }
  @Test public void shouldReportEmptyRecord(){
    DynamicRecord property=inUse(record(42));
    ConsistencyReport.DynamicConsistencyReport report=check(property);
    verify(report).emptyBlock();
    verifyNoMoreInteractions(report);
  }
  @Test public void shouldReportRecordWithEmptyNext(){
    DynamicRecord property=inUse(fill(record(42)));
    DynamicRecord next=add(inUse(record(7)));
    property.setNextBlock(next.getId());
    ConsistencyReport.DynamicConsistencyReport report=check(property);
    verify(report).emptyNextBlock(next);
    verifyNoMoreInteractions(report);
  }
  @Test public void shouldReportCorrectTypeBasedOnProperBitsOnly(){
    DynamicRecord property=inUse(record(42));
    int type=PropertyType.STRING.intValue();
    type=type | 0b10000000;
    property.setType(type);
    PropertyType reportedType=property.getType();
    assertEquals(PropertyType.STRING,reportedType);
    assertEquals(type,property.getTypeAsInt());
  }
  DynamicRecord fill(  DynamicRecord record){
    return fill(record,blockSize);
  }
  abstract DynamicRecord fill(  DynamicRecord record,  int size);
  abstract DynamicRecord record(  long id);
@RunWith(JUnit4.class) public static class StringDynamicRecordCheckTest extends DynamicRecordCheckTest {
    public StringDynamicRecordCheckTest(){
      super(new DynamicRecordCheck(configureDynamicStore(66),DynamicStore.STRING),66);
    }
    @Override DynamicRecord record(    long id){
      return string(new DynamicRecord(id));
    }
    @Override DynamicRecord fill(    DynamicRecord record,    int size){
      record.setLength(size);
      return record;
    }
  }
@RunWith(JUnit4.class) public static class ArrayDynamicRecordCheckTest extends DynamicRecordCheckTest {
    public ArrayDynamicRecordCheckTest(){
      super(new DynamicRecordCheck(configureDynamicStore(66),DynamicStore.ARRAY),66);
    }
    @Override DynamicRecord record(    long id){
      return array(new DynamicRecord(id));
    }
    @Override DynamicRecord fill(    DynamicRecord record,    int size){
      record.setLength(size);
      return record;
    }
  }
@RunWith(JUnit4.class) public static class SchemaDynamicRecordCheckTest extends DynamicRecordCheckTest {
    public SchemaDynamicRecordCheckTest(){
      super(new DynamicRecordCheck(configureDynamicStore(SchemaStore.BLOCK_SIZE),DynamicStore.SCHEMA),SchemaStore.BLOCK_SIZE);
    }
    @Override DynamicRecord record(    long id){
      DynamicRecord result=new DynamicRecord(id);
      result.setType(SCHEMA_RECORD_TYPE);
      return result;
    }
    @Override DynamicRecord fill(    DynamicRecord record,    int size){
      record.setLength(size);
      return record;
    }
  }
  public static RecordStore<DynamicRecord> configureDynamicStore(  int blockSize){
    @SuppressWarnings("unchecked") RecordStore<DynamicRecord> mock=mock(RecordStore.class);
    when(mock.getRecordSize()).thenReturn(blockSize + DynamicRecordFormat.RECORD_HEADER_SIZE);
    when(mock.getRecordDataSize()).thenReturn(blockSize);
    return mock;
  }
}
