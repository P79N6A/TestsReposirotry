private class Populator implements Runnable {
  private final GraphDatabaseService databaseService;
  private final long totalNodes;
  private final CountDownLatch startSignal;
  private final AtomicBoolean endSignal;
  Populator(  GraphDatabaseService databaseService,  long totalNodes,  CountDownLatch startSignal,  AtomicBoolean endSignal){
    this.databaseService=databaseService;
    this.totalNodes=totalNodes;
    this.startSignal=startSignal;
    this.endSignal=endSignal;
  }
  @Override public void run(){
    RandomValues randomValues=RandomValues.create();
    awaitLatch(startSignal);
    while (!endSignal.get()) {
      try (Transaction transaction=databaseService.beginTx()){
        try {
          int operationType=randomValues.nextIntValue(3).value();
switch (operationType) {
case 0:
            long targetNodeId=randomValues.nextLongValue(totalNodes).value();
          databaseService.getNodeById(targetNodeId).delete();
        break;
case 1:
      long nodeId=randomValues.nextLongValue(totalNodes).value();
    Node node=databaseService.getNodeById(nodeId);
  Map<String,Object> allProperties=node.getAllProperties();
for (String key : allProperties.keySet()) {
  node.setProperty(key,randomValues.nextValue().asObject());
}
break;
case 2:
Node nodeToUpdate=databaseService.createNode(Label.label("label10"));
nodeToUpdate.setProperty("property",randomValues.nextValue().asObject());
break;
default :
throw new UnsupportedOperationException("Unknown type of index operation");
}
transaction.success();
}
 catch (Exception e) {
transaction.failure();
}
}
 }
}
}
