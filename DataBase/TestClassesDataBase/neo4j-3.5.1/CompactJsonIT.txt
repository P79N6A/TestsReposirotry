public class CompactJsonIT extends AbstractRestFunctionalTestBase {
  private long thomasAnderson;
  private long trinity;
  private long thomasAndersonLovesTrinity;
  private static FunctionalTestHelper functionalTestHelper;
  private static GraphDbHelper helper;
  @BeforeClass public static void setupServer(){
    functionalTestHelper=new FunctionalTestHelper(server());
    helper=functionalTestHelper.getGraphDbHelper();
  }
  @Before public void setupTheDatabase(){
    createTheMatrix();
  }
  private void createTheMatrix(){
    thomasAnderson=createAndIndexNode("Thomas Anderson");
    trinity=createAndIndexNode("Trinity");
    long tank=createAndIndexNode("Tank");
    long knowsRelationshipId=helper.createRelationship("KNOWS",thomasAnderson,trinity);
    thomasAndersonLovesTrinity=helper.createRelationship("LOVES",thomasAnderson,trinity);
    helper.setRelationshipProperties(thomasAndersonLovesTrinity,Collections.singletonMap("strength",100));
    helper.createRelationship("KNOWS",thomasAnderson,tank);
    helper.createRelationship("KNOWS",trinity,tank);
    helper.createRelationshipIndex("relationships");
    helper.addRelationshipToIndex("relationships","key","value",knowsRelationshipId);
    helper.createRelationshipIndex("relationships2");
    helper.addRelationshipToIndex("relationships2","key2","value2",knowsRelationshipId);
  }
  private long createAndIndexNode(  String name){
    long id=helper.createNode();
    helper.setNodeProperties(id,Collections.singletonMap("name",name));
    helper.addNodeToIndex("node","name",name,id);
    return id;
  }
  @Test public void shouldGetThomasAndersonDirectly(){
    JaxRsResponse response=RestRequest.req().get(functionalTestHelper.nodeUri(thomasAnderson),CompactJsonFormat.MEDIA_TYPE);
    assertEquals(Status.OK.getStatusCode(),response.getStatus());
    String entity=response.getEntity();
    assertTrue(entity.contains("Thomas Anderson"));
    assertValidJson(entity);
    response.close();
  }
  private void assertValidJson(  String entity){
    try {
      assertTrue(JsonHelper.jsonToMap(entity).containsKey("self"));
      assertFalse(JsonHelper.jsonToMap(entity).containsKey("properties"));
    }
 catch (    JsonParseException e) {
      e.printStackTrace();
    }
  }
}
