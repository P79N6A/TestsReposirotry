public class GenericKeyStateFormatTest extends FormatCompatibilityVerifier {
  @Rule public PageCacheRule pageCacheRule=new PageCacheRule();
  private static final int ENTITY_ID=19570320;
  private static final int NUMBER_OF_SLOTS=2;
  private List<Value> values;
  @Before public void setup(){
    values=new ArrayList<>();
    values.add(Values.dateTimeArray(new ZonedDateTime[]{ZonedDateTime.of(2018,10,9,8,7,6,5,ZoneId.of("UTC")),ZonedDateTime.of(2017,9,8,7,6,5,4,ZoneId.of("UTC"))}));
    values.add(Values.localDateTimeArray(new LocalDateTime[]{LocalDateTime.of(2018,10,9,8,7,6,5),LocalDateTime.of(2018,10,9,8,7,6,5)}));
    values.add(Values.dateArray(new LocalDate[]{LocalDate.of(1,12,28),LocalDate.of(1,12,28)}));
    values.add(Values.timeArray(new OffsetTime[]{OffsetTime.of(19,8,7,6,ZoneOffset.UTC),OffsetTime.of(19,8,7,6,ZoneOffset.UTC)}));
    values.add(Values.localTimeArray(new LocalTime[]{LocalTime.of(19,28),LocalTime.of(19,28)}));
    values.add(Values.durationArray(new DurationValue[]{DurationValue.duration(99,10,10,10),DurationValue.duration(99,10,10,10)}));
    values.add(Values.of(new String[]{"someString1","someString2"}));
    values.add(Values.of(new boolean[]{true,true}));
    values.add(Values.of(new byte[]{(byte)1,(byte)12}));
    values.add(Values.of(new short[]{314,1337}));
    values.add(Values.of(new int[]{3140,13370}));
    values.add(Values.of(new long[]{31400,133700}));
    values.add(Values.of(new float[]{0.5654f,13432.14f}));
    values.add(Values.of(new double[]{432453254.43243,4354.7888}));
    values.add(Values.of(new char[]{'a','z'}));
    values.add(DateTimeValue.datetime(2014,3,25,12,45,13,7474,"UTC"));
    values.add(LocalDateTimeValue.localDateTime(2018,3,1,13,50,42,1337));
    values.add(DateValue.epochDate(2));
    values.add(TimeValue.time(43_200_000_000_000L,ZoneOffset.UTC));
    values.add(LocalTimeValue.localTime(100000));
    values.add(DurationValue.duration(10,20,30,40));
    values.add(Values.of("string1"));
    values.add(Values.of(true));
    values.add(Values.of(Byte.MAX_VALUE));
    values.add(Values.of(Short.MAX_VALUE));
    values.add(Values.of(Integer.MAX_VALUE));
    values.add(Values.of(Long.MAX_VALUE));
    values.add(Values.of(Float.MAX_VALUE));
    values.add(Values.of(Double.MAX_VALUE));
    values.add(Values.of(Character.MAX_VALUE));
    values.add(Values.pointValue(CoordinateReferenceSystem.WGS84,12.78,56.7));
    values.add(Values.pointArray(new PointValue[]{Values.pointValue(CoordinateReferenceSystem.WGS84,12.7566548,56.7163465),Values.pointValue(CoordinateReferenceSystem.WGS84,12.13413478,56.1343457)}));
    values.add(Values.pointValue(CoordinateReferenceSystem.WGS84_3D,12.78,56.7,666));
    values.add(Values.pointArray(new PointValue[]{Values.pointValue(CoordinateReferenceSystem.WGS84_3D,12.7566548,56.7163465,666),Values.pointValue(CoordinateReferenceSystem.WGS84_3D,12.13413478,56.1343457,555)}));
    values.add(Values.pointValue(CoordinateReferenceSystem.Cartesian,0.0000043,-0.0000000012341025786543));
    values.add(Values.pointArray(new PointValue[]{Values.pointValue(CoordinateReferenceSystem.Cartesian,0.0000043,-0.0000000012341025786543),Values.pointValue(CoordinateReferenceSystem.Cartesian,0.2000043,-0.0300000012341025786543)}));
    values.add(Values.pointValue(CoordinateReferenceSystem.Cartesian_3D,0.0000043,-0.0000000012341025786543,666));
    values.add(Values.pointArray(new PointValue[]{Values.pointValue(CoordinateReferenceSystem.Cartesian_3D,0.0000043,-0.0000000012341025786543,666),Values.pointValue(CoordinateReferenceSystem.Cartesian_3D,0.2000043,-0.0300000012341025786543,555)}));
  }
  @Override protected String zipName(){
    return "current-generic-key-state-format.zip";
  }
  @Override protected String storeFileName(){
    return "generic-key-state-store";
  }
  @Override protected void createStoreFile(  File storeFile) throws IOException {
    withCursor(storeFile,true,c -> {
      putFormatVersion(c);
      putData(c);
    }
);
  }
  @Override protected void verifyFormat(  File storeFile) throws FormatViolationException, IOException {
    AtomicReference<FormatViolationException> exception=new AtomicReference<>();
    withCursor(storeFile,false,c -> {
      int major=c.getInt();
      int minor=c.getInt();
      GenericLayout layout=getLayout();
      if (major != layout.majorVersion() || minor != layout.minorVersion()) {
        exception.set(new FormatViolationException(String.format("Read format version %d.%d, but layout has version %d.%d",major,minor,layout.majorVersion(),layout.minorVersion())));
      }
    }
);
    if (exception.get() != null) {
      throw exception.get();
    }
  }
  @Override protected void verifyContent(  File storeFile) throws IOException {
    withCursor(storeFile,false,c -> {
      readFormatVersion(c);
      verifyData(c);
    }
);
  }
  private void putFormatVersion(  PageCursor cursor){
    GenericLayout layout=getLayout();
    int major=layout.majorVersion();
    cursor.putInt(major);
    int minor=layout.minorVersion();
    cursor.putInt(minor);
  }
  private void readFormatVersion(  PageCursor c){
    c.getInt();
    c.getInt();
  }
  private void putData(  PageCursor c){
    GenericLayout layout=getLayout();
    GenericKey key=layout.newKey();
    for (    Value value : values) {
      initializeFromValue(key,value);
      c.putInt(key.size());
      layout.writeKey(c,key);
    }
  }
  private void initializeFromValue(  GenericKey key,  Value value){
    key.initialize(ENTITY_ID);
    for (int i=0; i < NUMBER_OF_SLOTS; i++) {
      key.initFromValue(i,value,NativeIndexKey.Inclusion.NEUTRAL);
    }
  }
  private void verifyData(  PageCursor c){
    GenericLayout layout=getLayout();
    GenericKey readCompositeKey=layout.newKey();
    GenericKey comparison=layout.newKey();
    for (    Value value : values) {
      int keySize=c.getInt();
      layout.readKey(c,readCompositeKey,keySize);
      for (      Value readValue : readCompositeKey.asValues()) {
        initializeFromValue(comparison,value);
        assertEquals(0,layout.compare(readCompositeKey,comparison),detailedFailureMessage(readCompositeKey,comparison));
        if (readValue != Values.NO_VALUE) {
          assertEquals(value,readValue,"expected read value to be " + value + ", but was "+ readValue);
        }
      }
    }
  }
  private String detailedFailureMessage(  GenericKey actualKey,  GenericKey expectedKey){
    return "expected " + expectedKey.toDetailedString() + ", but was "+ actualKey.toDetailedString();
  }
  private GenericLayout getLayout(){
    return new GenericLayout(NUMBER_OF_SLOTS,new IndexSpecificSpaceFillingCurveSettingsCache(new ConfiguredSpaceFillingCurveSettingsCache(Config.defaults()),new HashMap<>()));
  }
  private void withCursor(  File storeFile,  boolean create,  Consumer<PageCursor> cursorConsumer) throws IOException {
    OpenOption[] openOptions=create ? new OpenOption[]{StandardOpenOption.WRITE,StandardOpenOption.CREATE} : new OpenOption[]{StandardOpenOption.WRITE};
    try (PageCache pageCache=pageCacheRule.getPageCache(globalFs.get());PagedFile pagedFile=pageCache.map(storeFile,pageCache.pageSize(),openOptions);PageCursor cursor=pagedFile.io(0,PagedFile.PF_SHARED_WRITE_LOCK)){
      cursor.next();
      cursorConsumer.accept(cursor);
    }
   }
}
