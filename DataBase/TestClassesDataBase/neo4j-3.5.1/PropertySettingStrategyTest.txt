public class PropertySettingStrategyTest {
  private static GraphDatabaseAPI db;
  private Transaction tx;
  private static PropertySettingStrategy propSetter;
  @BeforeClass public static void createDb(){
    db=(GraphDatabaseAPI)new TestGraphDatabaseFactory().newImpermanentDatabase();
    propSetter=new PropertySettingStrategy(db);
  }
  @AfterClass public static void closeDb(){
    db.shutdown();
  }
  @Before public void beginTx(){
    tx=db.beginTx();
  }
  @After public void rollbackTx(){
    tx.close();
  }
  @Test public void shouldSetSingleProperty() throws Exception {
    Node node=db.createNode();
    propSetter.setProperty(node,"name","bob");
    assertThat(node.getProperty("name"),is("bob"));
  }
  @Test public void shouldSetMultipleProperties() throws Exception {
    Node node=db.createNode();
    List<String> anArray=new ArrayList<>();
    anArray.add("hello");
    anArray.add("Iamanarray");
    Map<String,Object> props=new HashMap<>();
    props.put("name","bob");
    props.put("age",12);
    props.put("anArray",anArray);
    propSetter.setProperties(node,props);
    assertThat(node.getProperty("name"),is("bob"));
    assertThat(node.getProperty("age"),is(12));
    assertThat(node.getProperty("anArray"),is(new String[]{"hello","Iamanarray"}));
  }
  @Test public void shouldSetAllProperties() throws Exception {
    Node node=db.createNode();
    node.setProperty("name","bob");
    node.setProperty("age",12);
    propSetter.setAllProperties(node,map("name","Steven","color",123));
    assertThat(node.getProperty("name"),is("Steven"));
    assertThat(node.getProperty("color"),is(123));
    assertThat(node.hasProperty("age"),is(false));
  }
  @Test public void shouldNotFailSettingEmptyArrayIfEntityAlreadyHasAnEmptyArrayAsValue() throws Exception {
    Node node=db.createNode();
    node.setProperty("arr",new String[]{});
    propSetter.setProperty(node,"arr",new ArrayList<>());
    assertThat(node.getProperty("arr"),is(new String[]{}));
  }
  @Test public void shouldNotFailSettingEmptyArrayAndOtherValuesIfEntityAlreadyHasAnEmptyArrayAsValue() throws Exception {
    Node node=db.createNode();
    node.setProperty("arr",new String[]{});
    Map<String,Object> props=new HashMap<>();
    props.put("name","bob");
    props.put("arr",new ArrayList<String>());
    propSetter.setProperties(node,props);
    assertThat(node.getProperty("name"),is("bob"));
    assertThat(node.getProperty("arr"),is(new String[]{}));
  }
  @Test(expected=PropertyValueException.class) public void shouldThrowPropertyErrorWhenSettingEmptyArrayOnEntityWithNoPreExistingProperty() throws Exception {
    Node node=db.createNode();
    propSetter.setProperty(node,"arr",new ArrayList<>());
  }
  @Test(expected=PropertyValueException.class) public void shouldThrowPropertyErrorWhenSettingEmptyArrayOnEntityWithNoPreExistingEmptyArray() throws Exception {
    Node node=db.createNode();
    node.setProperty("arr","hello");
    propSetter.setProperty(node,"arr",new ArrayList<>());
  }
  @Test public void shouldUseOriginalTypeWhenSettingEmptyArrayIfEntityAlreadyHasACollection() throws Exception {
    Node node=db.createNode();
    node.setProperty("arr",new String[]{"a","b"});
    propSetter.setProperty(node,"arr",new ArrayList<>());
    assertThat(node.getProperty("arr"),is(new String[]{}));
  }
  @Test public void shouldUseOriginalTypeOnEmptyCollectionWhenSettingAllProperties() throws Exception {
    Node node=db.createNode();
    node.setProperty("name","bob");
    node.setProperty("arr",new String[]{"a","b"});
    propSetter.setAllProperties(node,map("arr",new ArrayList<String>()));
    assertThat(node.hasProperty("name"),is(false));
    assertThat(node.getProperty("arr"),is(new String[]{}));
  }
}
