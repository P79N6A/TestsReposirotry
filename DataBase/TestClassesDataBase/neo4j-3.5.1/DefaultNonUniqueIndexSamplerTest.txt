public class DefaultNonUniqueIndexSamplerTest {
  private final String value="aaa";
  @Test public void shouldSampleNothing(){
    NonUniqueIndexSampler sampler=new DefaultNonUniqueIndexSampler(10);
    assertSampledValues(sampler,0,0,0);
  }
  @Test public void shouldSampleASingleValue(){
    NonUniqueIndexSampler sampler=new DefaultNonUniqueIndexSampler(10);
    sampler.include(value,2);
    assertSampledValues(sampler,2,1,2);
  }
  @Test public void shouldSampleDuplicateValues(){
    NonUniqueIndexSampler sampler=new DefaultNonUniqueIndexSampler(10);
    sampler.include(value,5);
    sampler.include(value,4);
    sampler.include("bbb",3);
    assertSampledValues(sampler,12,2,12);
  }
  @Test public void shouldDivideTheSamplingInStepsNotBiggerThanBatchSize(){
    NonUniqueIndexSampler sampler=new DefaultNonUniqueIndexSampler(1);
    sampler.include(value,5);
    sampler.include(value,4);
    sampler.include("bbb",3);
    int expectedSampledSize=12 / 3;
    assertSampledValues(sampler,12,1,expectedSampledSize);
  }
  @Test public void shouldExcludeValuesFromTheCurrentSampling1(){
    NonUniqueIndexSampler sampler=new DefaultNonUniqueIndexSampler(10);
    sampler.include(value,5);
    sampler.include(value,4);
    sampler.include("bbb",3);
    sampler.exclude(value,3);
    assertSampledValues(sampler,9,2,9);
  }
  @Test public void shouldExcludeValuesFromTheCurrentSampling2(){
    NonUniqueIndexSampler sampler=new DefaultNonUniqueIndexSampler(10);
    sampler.include(value,1);
    sampler.include(value,4);
    sampler.include("bbb",1);
    sampler.exclude(value,4);
    assertSampledValues(sampler,2,2,2);
  }
  @Test public void shouldDoNothingWhenExcludingAValueInAnEmptySample(){
    NonUniqueIndexSampler sampler=new DefaultNonUniqueIndexSampler(10);
    sampler.exclude(value,1);
    sampler.include(value,1);
    assertSampledValues(sampler,1,1,1);
  }
  private void assertSampledValues(  NonUniqueIndexSampler sampler,  long expectedIndexSize,  long expectedUniqueValues,  long expectedSampledSize){
    IndexSample sample=sampler.result();
    assertEquals(expectedIndexSize,sample.indexSize());
    assertEquals(expectedUniqueValues,sample.uniqueValues());
    assertEquals(expectedSampledSize,sample.sampleSize());
  }
}
