public class TransactionLogsInSeparateLocationIT {
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  @Rule public final FileSystemRule fileSystemRule=new DefaultFileSystemRule();
  @Test public void databaseWithTransactionLogsInSeparateRelativeLocation() throws IOException {
    File databaseDirectory=testDirectory.databaseDir();
    File txDirectory=new File(databaseDirectory,"transaction-logs");
    performTransactions(txDirectory.getName(),testDirectory.databaseDir());
    verifyTransactionLogs(txDirectory,databaseDirectory);
  }
  @Test public void databaseWithTransactionLogsInSeparateAbsoluteLocation() throws IOException {
    File databaseDirectory=testDirectory.databaseDir();
    File txDirectory=testDirectory.directory("transaction-logs");
    performTransactions(txDirectory.getAbsolutePath(),testDirectory.databaseDir());
    verifyTransactionLogs(txDirectory,databaseDirectory);
  }
  private static void performTransactions(  String txPath,  File storeDir){
    GraphDatabaseService database=new TestGraphDatabaseFactory().newEmbeddedDatabaseBuilder(storeDir).setConfig(GraphDatabaseSettings.logical_logs_location,txPath).newGraphDatabase();
    for (int i=0; i < 10; i++) {
      try (Transaction transaction=database.beginTx()){
        Node node=database.createNode();
        node.setProperty("a","b");
        node.setProperty("c","d");
        transaction.success();
      }
     }
    database.shutdown();
  }
  private void verifyTransactionLogs(  File txDirectory,  File storeDir) throws IOException {
    FileSystemAbstraction fileSystem=fileSystemRule.get();
    LogFiles storeDirLogs=LogFilesBuilder.logFilesBasedOnlyBuilder(storeDir,fileSystem).build();
    assertFalse(storeDirLogs.versionExists(0));
    LogFiles txDirectoryLogs=LogFilesBuilder.logFilesBasedOnlyBuilder(txDirectory,fileSystem).build();
    assertTrue(txDirectoryLogs.versionExists(0));
    try (PhysicalLogVersionedStoreChannel physicalLogVersionedStoreChannel=txDirectoryLogs.openForVersion(0)){
      assertThat(physicalLogVersionedStoreChannel.size(),greaterThan(0L));
    }
   }
}
