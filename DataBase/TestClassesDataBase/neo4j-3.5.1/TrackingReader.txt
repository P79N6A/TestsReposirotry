private static class TrackingReader extends CharReadable.Adapter {
  private int bytesRead;
  private volatile int readsCompleted;
  private final CharReadable actual;
  private final long bytes;
  TrackingReader(  int length){
    this.bytes=length * 2;
    this.actual=Readables.wrap(new CharArrayReader(chars(0,length)),length * 2);
  }
  @Override public SectionedCharBuffer read(  SectionedCharBuffer buffer,  int from) throws IOException {
    try {
      return registerBytesRead(actual.read(buffer,from));
    }
  finally {
      readsCompleted++;
    }
  }
  @Override public int read(  char[] into,  int offset,  int length){
    throw new UnsupportedOperationException();
  }
  private SectionedCharBuffer registerBytesRead(  SectionedCharBuffer buffer){
    bytesRead+=buffer.available();
    return buffer;
  }
  @Override public void close(){
  }
  private int awaitCompletedReadAttempts(  int ticket){
    while (readsCompleted < ticket) {
      LockSupport.parkNanos(10_000_000);
    }
    return bytesRead;
  }
  @Override public long position(){
    return actual.position();
  }
  @Override public String sourceDescription(){
    return getClass().getSimpleName();
  }
  @Override public long length(){
    return bytes;
  }
}
