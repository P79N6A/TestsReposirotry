/** 
 * Base class for testing a  {@link org.neo4j.kernel.extension.KernelExtensionFactory}. The base test cases in this class verifies that a extension upholds the  {@link org.neo4j.kernel.extension.KernelExtensionFactory} contract.
 */
public abstract class KernelExtensionFactoryContractTest {
  private final Class<? extends KernelExtensionFactory<?>> extClass;
  private final String key;
  @Rule public final TestDirectory target=TestDirectory.testDirectory();
  public KernelExtensionFactoryContractTest(  String key,  Class<? extends KernelExtensionFactory<?>> extClass){
    this.extClass=extClass;
    this.key=key;
  }
  protected GraphDatabaseAPI graphDb(  int instance){
    Map<String,String> config=configuration(instance);
    return (GraphDatabaseAPI)new TestGraphDatabaseFactory().newImpermanentDatabaseBuilder().setConfig(config).newGraphDatabase();
  }
  /** 
 * Override to create default configuration for the  {@link org.neo4j.kernel.extension.KernelExtensionFactory}under test.
 * @param instance   used for differentiating multiple instances that will runsimultaneously.
 * @return configuration for an {@link EmbeddedGraphDatabase} that
 */
  protected Map<String,String> configuration(  int instance){
    return MapUtil.stringMap();
  }
  @Test public void extensionShouldHavePublicNoArgConstructor(){
    KernelExtensionFactory<?> instance=null;
    try {
      instance=newInstance();
    }
 catch (    IllegalArgumentException failure) {
      failure.printStackTrace();
      fail("Contract violation: extension class must have public no-arg constructor (Exception in stderr)");
    }
    assertNotNull(instance);
  }
  @Test public void shouldBeAbleToLoadExtensionAsAServiceProvider(){
    KernelExtensionFactory<?> instance=null;
    try {
      instance=loadInstance();
    }
 catch (    ClassCastException failure) {
      failure.printStackTrace();
      fail("Loaded instance does not match the extension class (Exception in stderr)");
    }
    assertNotNull("Could not load the kernel extension with the provided key",instance);
    assertSame("Class of the loaded instance is a subclass of the extension class",instance.getClass(),extClass);
  }
  @Test public void differentInstancesShouldHaveEqualHashCodesAndBeEqual(){
    KernelExtensionFactory<?> one=newInstance();
    KernelExtensionFactory<?> two=newInstance();
    assertEquals("new instances have different hash codes",one.hashCode(),two.hashCode());
    assertEquals("new instances are not equals",one,two);
    one=loadInstance();
    two=loadInstance();
    assertEquals("loaded instances have different hash codes",one.hashCode(),two.hashCode());
    assertEquals("loaded instances are not equals",one,two);
    one=loadInstance();
    two=newInstance();
    assertEquals("loaded instance and new instance have different hash codes",one.hashCode(),two.hashCode());
    assertEquals("loaded instance and new instance are not equals",one,two);
  }
  private KernelExtensionFactory<?> newInstance(){
    try {
      return extClass.newInstance();
    }
 catch (    Exception cause) {
      throw new IllegalArgumentException("Could not instantiate extension class",cause);
    }
  }
  private KernelExtensionFactory<?> loadInstance(){
    return extClass.cast(Service.load(KernelExtensionFactory.class,key));
  }
}
