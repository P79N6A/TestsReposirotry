class InterruptedStateIT extends BoltStateMachineStateTestBase {
  @Test void shouldMoveReadyOnReset_succ() throws Throwable {
    BoltStateMachineV3 machine=getBoltStateMachineInInterruptedState();
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    machine.process(ResetMessage.INSTANCE,recorder);
    assertThat(recorder.nextResponse(),succeeded());
    assertThat(machine.state(),instanceOf(ReadyState.class));
  }
  @Test void shouldStayInInterruptedOnMoreReset() throws Throwable {
    BoltStateMachineV3 machine=getBoltStateMachineInInterruptedState();
    machine.interrupt();
    machine.interrupt();
    machine.process(ResetMessage.INSTANCE,nullResponseHandler());
    assertThat(machine.state(),instanceOf(InterruptedState.class));
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    machine.process(ResetMessage.INSTANCE,recorder);
    assertThat(recorder.nextResponse(),succeeded());
    assertThat(machine.state(),instanceOf(ReadyState.class));
  }
  @Test void shouldStayInInterruptedOnInterruptedSignal() throws Throwable {
    BoltStateMachineV3 machine=getBoltStateMachineInInterruptedState();
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    machine.process(InterruptSignal.INSTANCE,recorder);
    assertThat(recorder.nextResponse(),succeeded());
    assertThat(machine.state(),instanceOf(InterruptedState.class));
  }
  @ParameterizedTest @MethodSource("illegalV3Messages") void shouldCloseConnectionOnIllegalV3Messages(  RequestMessage message) throws Throwable {
    shouldCloseConnectionOnIllegalMessages(message);
  }
  private void shouldCloseConnectionOnIllegalMessages(  RequestMessage message) throws InterruptedException, BoltConnectionFatality {
    BoltStateMachineV3 machine=getBoltStateMachineInInterruptedState();
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    machine.process(message,recorder);
    assertThat(recorder.nextResponse(),wasIgnored());
    assertThat(machine.state(),instanceOf(InterruptedState.class));
  }
  private BoltStateMachineV3 getBoltStateMachineInInterruptedState() throws BoltConnectionFatality {
    BoltStateMachineV3 machine=newStateMachine();
    machine.process(newHelloMessage(),nullResponseHandler());
    machine.process(InterruptSignal.INSTANCE,nullResponseHandler());
    assertThat(machine.state(),instanceOf(InterruptedState.class));
    return machine;
  }
  private static Stream<RequestMessage> illegalV3Messages() throws BoltIOException {
    return Stream.of(newHelloMessage(),DiscardAllMessage.INSTANCE,PullAllMessage.INSTANCE,new BeginMessage(),COMMIT_MESSAGE,ROLLBACK_MESSAGE,new RunMessage("A cypher query"),GOODBYE_MESSAGE);
  }
}
