class CharValueTest {
  private static char[] chars={' ','цеб','a','7','├Ц'};
  @Test void shouldHandleDifferentTypesOfChars(){
    for (    char c : chars) {
      TextValue charValue=charValue(c);
      TextValue stringValue=stringValue(Character.toString(c));
      assertThat(charValue,equalTo(stringValue));
      assertThat(charValue.length(),equalTo(stringValue.length()));
      assertThat(charValue.hashCode(),equalTo(stringValue.hashCode()));
      assertThat(charValue.split(Character.toString(c)),equalTo(stringValue.split(Character.toString(c))));
      assertThat(charValue.toUpper(),equalTo(stringValue.toUpper()));
      assertThat(charValue.toLower(),equalTo(stringValue.toLower()));
    }
  }
  @Test void shouldSplit(){
    CharValue charValue=charValue('a');
    assertThat(charValue.split("a"),equalTo(list(EMPTY_STRING,EMPTY_STRING)));
    assertThat(charValue.split("A"),equalTo(list(charValue)));
  }
  @Test void shouldTrim(){
    assertThat(charValue('a').trim(),equalTo(charValue('a')));
    assertThat(charValue(' ').trim(),equalTo(EMPTY_STRING));
  }
  @Test void shouldLTrim(){
    assertThat(charValue('a').ltrim(),equalTo(charValue('a')));
    assertThat(charValue(' ').ltrim(),equalTo(EMPTY_STRING));
  }
  @Test void shouldRTrim(){
    assertThat(charValue('a').rtrim(),equalTo(charValue('a')));
    assertThat(charValue(' ').rtrim(),equalTo(EMPTY_STRING));
  }
  @Test void shouldReverse(){
    for (    char c : chars) {
      CharValue charValue=charValue(c);
      assertThat(charValue.reverse(),equalTo(charValue));
    }
  }
  @Test void shouldReplace(){
    assertThat(charValue('a').replace("a","a long string"),equalTo(stringValue("a long string")));
    assertThat(charValue('a').replace("b","a long string"),equalTo(charValue('a')));
  }
  @Test void shouldSubstring(){
    assertThat(charValue('a').substring(0,1),equalTo(charValue('a')));
    assertThat(charValue('a').substring(1,3),equalTo(EMPTY_STRING));
  }
}
