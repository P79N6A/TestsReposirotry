public class ReusableRecordsAllocatorTest {
  @Test public void allocatePreviouslyNotUsedRecord(){
    DynamicRecord dynamicRecord=new DynamicRecord(1);
    dynamicRecord.setInUse(false);
    ReusableRecordsAllocator recordsAllocator=new ReusableRecordsAllocator(10,dynamicRecord);
    DynamicRecord allocatedRecord=recordsAllocator.nextRecord();
    assertSame("Records should be the same.",allocatedRecord,dynamicRecord);
    assertTrue("Record should be marked as used.",allocatedRecord.inUse());
    assertTrue("Record should be marked as created.",allocatedRecord.isCreated());
  }
  @Test public void allocatePreviouslyUsedRecord(){
    DynamicRecord dynamicRecord=new DynamicRecord(1);
    dynamicRecord.setInUse(true);
    ReusableRecordsAllocator recordsAllocator=new ReusableRecordsAllocator(10,dynamicRecord);
    DynamicRecord allocatedRecord=recordsAllocator.nextRecord();
    assertSame("Records should be the same.",allocatedRecord,dynamicRecord);
    assertTrue("Record should be marked as used.",allocatedRecord.inUse());
    assertFalse("Record should be marked as created.",allocatedRecord.isCreated());
  }
  @Test public void trackRecordsAvailability(){
    DynamicRecord dynamicRecord1=new DynamicRecord(1);
    DynamicRecord dynamicRecord2=new DynamicRecord(1);
    ReusableRecordsAllocator recordsAllocator=new ReusableRecordsAllocator(10,dynamicRecord1,dynamicRecord2);
    assertSame("Should be the same as first available record.",dynamicRecord1,recordsAllocator.nextRecord());
    assertTrue("Should have second record.",recordsAllocator.hasNext());
    assertSame("Should be the same as second available record.",dynamicRecord2,recordsAllocator.nextRecord());
    assertFalse("Should be out of available records",recordsAllocator.hasNext());
  }
}
