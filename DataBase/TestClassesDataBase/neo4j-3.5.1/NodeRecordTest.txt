public class NodeRecordTest {
  @Test public void cloneShouldProduceExactCopy(){
    long relId=1337L;
    long propId=1338L;
    long inlinedLabels=12L;
    NodeRecord node=new NodeRecord(1L,false,relId,propId);
    node.setLabelField(inlinedLabels,asList(new DynamicRecord(1L),new DynamicRecord(2L)));
    node.setInUse(true);
    NodeRecord clone=node.clone();
    assertEquals(node.inUse(),clone.inUse());
    assertEquals(node.getLabelField(),clone.getLabelField());
    assertEquals(node.getNextProp(),clone.getNextProp());
    assertEquals(node.getNextRel(),clone.getNextRel());
    assertThat(clone.getDynamicLabelRecords(),equalTo(node.getDynamicLabelRecords()));
  }
  @Test public void shouldListLabelRecordsInUse(){
    NodeRecord node=new NodeRecord(1,false,-1,-1);
    long inlinedLabels=12L;
    DynamicRecord dynamic1=dynamicRecord(1L,true);
    DynamicRecord dynamic2=dynamicRecord(2L,true);
    DynamicRecord dynamic3=dynamicRecord(3L,true);
    node.setLabelField(inlinedLabels,asList(dynamic1,dynamic2,dynamic3));
    dynamic3.setInUse(false);
    Iterable<DynamicRecord> usedRecords=node.getUsedDynamicLabelRecords();
    assertThat(asList(usedRecords),equalTo(asList(dynamic1,dynamic2)));
  }
  @Test public void shouldToStringBothUsedAndUnusedDynamicLabelRecords(){
    IdSequence ids=mock(IdSequence.class);
    when(ids.nextId()).thenReturn(1L,2L);
    ReusableRecordsAllocator recordAllocator=new ReusableRecordsAllocator(30,new DynamicRecord(1),new DynamicRecord(2));
    NodeRecord node=newUsedNodeRecord(0);
    long labelId=10_123;
    Collection<DynamicRecord> existing=allocateRecordsForDynamicLabels(node.getId(),new long[]{labelId},recordAllocator);
    DynamicRecord unused=newDeletedDynamicRecord(ids.nextId());
    unused.setInUse(false);
    existing.add(unused);
    node.setLabelField(dynamicPointer(existing),existing);
    String toString=node.toString();
    assertThat(toString,containsString(String.valueOf(labelId)));
    assertThat(toString,containsString(unused.toString()));
  }
  private DynamicRecord newDeletedDynamicRecord(  long id){
    DynamicRecord record=new DynamicRecord(id);
    record.setInUse(false);
    return record;
  }
  private NodeRecord newUsedNodeRecord(  long id){
    NodeRecord node=new NodeRecord(id);
    node.setInUse(true);
    return node;
  }
}
