public class BatchingIdSequenceTest {
  @Test public void ShouldSkipNullId(){
    BatchingIdSequence idSequence=new BatchingIdSequence();
    idSequence.set(IdGeneratorImpl.INTEGER_MINUS_ONE - 1);
    assertEquals(IdGeneratorImpl.INTEGER_MINUS_ONE - 1,idSequence.peek());
    assertEquals(IdGeneratorImpl.INTEGER_MINUS_ONE - 1,idSequence.nextId());
    assertEquals(IdGeneratorImpl.INTEGER_MINUS_ONE + 1,idSequence.peek());
    assertEquals(IdGeneratorImpl.INTEGER_MINUS_ONE + 1,idSequence.nextId());
    idSequence.set(IdGeneratorImpl.INTEGER_MINUS_ONE);
    assertEquals(IdGeneratorImpl.INTEGER_MINUS_ONE + 1,idSequence.peek());
    assertEquals(IdGeneratorImpl.INTEGER_MINUS_ONE + 1,idSequence.nextId());
  }
  @Test public void resetShouldSetDefault(){
    BatchingIdSequence idSequence=new BatchingIdSequence();
    idSequence.set(99L);
    assertEquals(99L,idSequence.peek());
    assertEquals(99L,idSequence.nextId());
    assertEquals(100L,idSequence.peek());
    idSequence.reset();
    assertEquals(0L,idSequence.peek());
    assertEquals(0L,idSequence.nextId());
    assertEquals(1L,idSequence.peek());
  }
  @Test public void shouldSkipReservedIdWhenGettingBatches(){
    int batchSize=10;
    BatchingIdSequence idSequence=new BatchingIdSequence(IdGeneratorImpl.INTEGER_MINUS_ONE - batchSize - batchSize / 2);
    IdRange range1=idSequence.nextIdBatch(batchSize);
    IdRange range2=idSequence.nextIdBatch(batchSize);
    assertNoReservedId(range1);
    assertNoReservedId(range2);
  }
  private void assertNoReservedId(  IdRange range){
    for (    long id : range.getDefragIds()) {
      assertFalse(IdValidator.isReservedId(id));
    }
    assertFalse(IdValidator.hasReservedIdInRange(range.getRangeStart(),range.getRangeStart() + range.getRangeLength()));
  }
}
