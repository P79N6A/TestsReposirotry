public class BoltConnectionAuthIT {
  private static final String USER_AGENT="BoltConnectionAuthIT/0.0";
  private static final BoltChannel BOLT_CHANNEL=BoltTestUtil.newTestBoltChannel();
  @Rule public SessionRule env=new SessionRule().withAuthEnabled(true);
  @Test public void shouldGiveCredentialsExpiredStatusOnExpiredCredentials() throws Throwable {
    BoltStateMachine machine=env.newMachine(BOLT_CHANNEL);
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    InitMessage init=new InitMessage(USER_AGENT,newBasicAuthToken("neo4j","neo4j"));
    machine.process(init,recorder);
    machine.process(new RunMessage("CREATE ()",EMPTY_MAP),recorder);
    assertThat(recorder.nextResponse(),succeededWithMetadata("credentials_expired",TRUE));
    assertThat(recorder.nextResponse(),failedWithStatus(Status.Security.CredentialsExpired));
  }
  @Test public void shouldGiveKernelVersionOnInit() throws Throwable {
    BoltStateMachine machine=env.newMachine(BOLT_CHANNEL);
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    String version="Neo4j/" + Version.getNeo4jVersion();
    InitMessage init=new InitMessage(USER_AGENT,newBasicAuthToken("neo4j","neo4j"));
    machine.process(init,recorder);
    machine.process(new RunMessage("CREATE ()",EMPTY_MAP),recorder);
    assertThat(recorder.nextResponse(),succeededWithMetadata("server",stringValue(version)));
  }
  @Test public void shouldCloseConnectionAfterAuthenticationFailure() throws Throwable {
    BoltStateMachine machine=env.newMachine(BOLT_CHANNEL);
    InitMessage init=new InitMessage(USER_AGENT,newBasicAuthToken("neo4j","j4oen"));
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    verifyKillsConnection(() -> machine.process(init,recorder));
    assertThat(recorder.nextResponse(),failedWithStatus(Status.Security.Unauthorized));
  }
  @Test public void shouldBeAbleToActOnSessionWhenUpdatingCredentials() throws Throwable {
    BoltStateMachine machine=env.newMachine(BOLT_CHANNEL);
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    InitMessage message=new InitMessage(USER_AGENT,map("scheme","basic","principal","neo4j","credentials",UTF8.encode("neo4j"),"new_credentials",UTF8.encode("secret")));
    machine.process(message,recorder);
    machine.process(new RunMessage("CREATE ()",EMPTY_MAP),recorder);
    assertThat(recorder.nextResponse(),succeeded());
    assertThat(recorder.nextResponse(),succeeded());
  }
}
