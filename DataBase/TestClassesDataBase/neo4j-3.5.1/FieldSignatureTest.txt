public class FieldSignatureTest {
  @Test public void equalsShouldConsiderName(){
    assertEquals("input without default",inputField("name",Neo4jTypes.NTString),inputField("name",Neo4jTypes.NTString));
    assertNotEquals("input without default",inputField("name",Neo4jTypes.NTString),inputField("other",Neo4jTypes.NTString));
    assertEquals("input with default",inputField("name",Neo4jTypes.NTString,ntString("hello")),inputField("name",Neo4jTypes.NTString,ntString("hello")));
    assertNotEquals("input with default",inputField("name",Neo4jTypes.NTString,ntString("hello")),inputField("other",Neo4jTypes.NTString,ntString("hello")));
    assertEquals("output",outputField("name",Neo4jTypes.NTString,false),outputField("name",Neo4jTypes.NTString,false));
    assertNotEquals("output",outputField("name",Neo4jTypes.NTString,false),outputField("other",Neo4jTypes.NTString,false));
    assertEquals("deprecated output",outputField("name",Neo4jTypes.NTString,true),outputField("name",Neo4jTypes.NTString,true));
    assertNotEquals("deprecated output",outputField("name",Neo4jTypes.NTString,true),outputField("other",Neo4jTypes.NTString,true));
  }
  @Test public void shouldTypeCheckDefaultValue(){
    try {
      inputField("name",Neo4jTypes.NTInteger,ntString("bad"));
      fail("expected exception");
    }
 catch (    IllegalArgumentException e) {
      assertEquals(e.getMessage(),"Default value does not have a valid type, field type was INTEGER?, but value type was STRING?.");
    }
  }
  @Test public void equalsShouldConsiderType(){
    assertEquals("input without default",inputField("name",Neo4jTypes.NTString),inputField("name",Neo4jTypes.NTString));
    assertNotEquals("input without default",inputField("name",Neo4jTypes.NTString),inputField("name",Neo4jTypes.NTInteger));
    assertEquals("output",outputField("name",Neo4jTypes.NTString,false),outputField("name",Neo4jTypes.NTString,false));
    assertNotEquals("output",outputField("name",Neo4jTypes.NTString,false),outputField("name",Neo4jTypes.NTInteger,false));
    assertEquals("deprecated output",outputField("name",Neo4jTypes.NTString,true),outputField("name",Neo4jTypes.NTString,true));
    assertNotEquals("deprecated output",outputField("name",Neo4jTypes.NTString,true),outputField("name",Neo4jTypes.NTInteger,true));
  }
  @Test public void equalsShouldConsiderDefaultValue(){
    assertEquals(inputField("name",Neo4jTypes.NTString,ntString("foo")),inputField("name",Neo4jTypes.NTString,ntString("foo")));
    assertNotEquals(inputField("name",Neo4jTypes.NTString,ntString("bar")),inputField("name",Neo4jTypes.NTString,ntString("baz")));
  }
  @Test public void equalsShouldConsiderDeprecation(){
    assertEquals(outputField("name",Neo4jTypes.NTString,true),outputField("name",Neo4jTypes.NTString,true));
    assertEquals(outputField("name",Neo4jTypes.NTString,false),outputField("name",Neo4jTypes.NTString,false));
    assertNotEquals(outputField("name",Neo4jTypes.NTString,true),outputField("name",Neo4jTypes.NTString,false));
  }
}
