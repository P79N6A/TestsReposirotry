public class ApplyRecoveredTransactionsTest {
  private final EphemeralFileSystemRule fs=new EphemeralFileSystemRule();
  private final PageCacheRule pageCacheRule=new PageCacheRule();
  private final TestDirectory testDirectory=TestDirectory.testDirectory(fs);
  @Rule public final RuleChain ruleChain=RuleChain.outerRule(fs).around(testDirectory).around(pageCacheRule);
  private NeoStores neoStores;
  @Before public void before(){
    FileSystemAbstraction fs=this.fs.get();
    StoreFactory storeFactory=new StoreFactory(testDirectory.databaseLayout(),Config.defaults(),new DefaultIdGeneratorFactory(fs),pageCacheRule.getPageCache(fs),fs,NullLogProvider.getInstance(),EmptyVersionContextSupplier.EMPTY);
    neoStores=storeFactory.openAllNeoStores(true);
  }
  @After public void after(){
    neoStores.close();
  }
  @Test public void shouldSetCorrectHighIdWhenApplyingExternalTransactions() throws Exception {
    long nodeId=neoStores.getNodeStore().nextId();
    long relationshipId=neoStores.getRelationshipStore().nextId();
    int type=1;
    applyExternalTransaction(1,new NodeCommand(new NodeRecord(nodeId),inUse(created(new NodeRecord(nodeId)))),new RelationshipCommand(null,inUse(created(with(new RelationshipRecord(relationshipId),nodeId,nodeId,type)))));
    applyExternalTransaction(2,new NodeCommand(inUse(created(new NodeRecord(nodeId))),new NodeRecord(nodeId)),new RelationshipCommand(null,new RelationshipRecord(relationshipId)));
    assertEquals(nodeId + 1,neoStores.getNodeStore().getHighId());
    assertEquals(relationshipId + 1,neoStores.getRelationshipStore().getHighId());
  }
  private RelationshipRecord with(  RelationshipRecord relationship,  long startNode,  long endNode,  int type){
    relationship.setFirstNode(startNode);
    relationship.setSecondNode(endNode);
    relationship.setType(type);
    return relationship;
  }
  private void applyExternalTransaction(  long transactionId,  Command... commands) throws Exception {
    LockService lockService=mock(LockService.class);
    when(lockService.acquireNodeLock(anyLong(),any(LockService.LockType.class))).thenReturn(LockService.NO_LOCK);
    when(lockService.acquireRelationshipLock(anyLong(),any(LockService.LockType.class))).thenReturn(LockService.NO_LOCK);
    NeoStoreBatchTransactionApplier applier=new NeoStoreBatchTransactionApplier(neoStores,mock(CacheAccessBackDoor.class),lockService);
    TransactionRepresentation tx=new PhysicalTransactionRepresentation(Arrays.asList(commands));
    CommandHandlerContract.apply(applier,txApplier -> {
      tx.accept(txApplier);
      return false;
    }
,new TransactionToApply(tx,transactionId));
  }
  private static <RECORD extends AbstractBaseRecord>RECORD inUse(  RECORD record){
    record.setInUse(true);
    return record;
  }
  private static <RECORD extends AbstractBaseRecord>RECORD created(  RECORD record){
    record.setCreated();
    return record;
  }
}
