public class DegreeIT extends AbstractRestFunctionalTestBase {
  @Documented("Get the degree of a node\n" + "\n" + "Return the total number of relationships associated with a node.") @Test @GraphDescription.Graph({"Root knows Mattias","Root knows Johan"}) public void get_degree() throws JsonParseException {
    Map<String,Node> nodes=data.get();
    String nodeUri=getNodeUri(nodes.get("Root"));
    RESTRequestGenerator.ResponseEntity response=gen.get().expectedStatus(200).get(nodeUri + "/degree/all");
    assertEquals(2,JsonHelper.jsonNode(response.response().getEntity()).asInt());
  }
  @Documented("Get the degree of a node by direction\n" + "\n" + "Return the number of relationships of a particular direction for a node.\n"+ "Specify `all`, `in` or `out`.") @Test @GraphDescription.Graph({"Root knows Mattias","Root knows Johan"}) public void get_degree_by_direction() throws JsonParseException {
    Map<String,Node> nodes=data.get();
    String nodeUri=getNodeUri(nodes.get("Root"));
    RESTRequestGenerator.ResponseEntity response=gen.get().expectedStatus(200).get(nodeUri + "/degree/out");
    assertEquals(2,JsonHelper.jsonNode(response.response().getEntity()).asInt());
  }
  @Documented("Get the degree of a node by direction and types\n" + "\n" + "If you are only interested in the degree of a particular relationship type, or a set of "+ "relationship types, you specify relationship types after the direction.\n"+ "You can combine multiple relationship types by using the `&` character.") @Test @GraphDescription.Graph({"Root KNOWS Mattias","Root KNOWS Johan","Root LIKES Cookie"}) public void get_degree_by_direction_and_type() throws JsonParseException {
    Map<String,Node> nodes=data.get();
    String nodeUri=getNodeUri(nodes.get("Root"));
    RESTRequestGenerator.ResponseEntity response=gen.get().expectedStatus(200).get(nodeUri + "/degree/out/KNOWS&LIKES");
    assertEquals(3,JsonHelper.jsonNode(response.response().getEntity()).asInt());
  }
}
