@RunWith(Parameterized.class) public abstract class BoltV3TransportBase {
  protected static final String USER_AGENT="TestClient/3.0";
  @Rule public Neo4jWithSocket server=new Neo4jWithSocket(getClass(),settings -> settings.put(auth_enabled.name(),"false"));
  @Parameterized.Parameter public Class<? extends TransportConnection> connectionClass;
  protected HostnamePort address;
  protected TransportConnection connection;
  protected TransportTestUtil util;
  @Parameterized.Parameters(name="{0}") public static List<Class<? extends TransportConnection>> transports(){
    return asList(SocketConnection.class,WebSocketConnection.class,SecureSocketConnection.class,SecureWebSocketConnection.class);
  }
  @Before public void setUp() throws Exception {
    address=server.lookupDefaultConnector();
    connection=connectionClass.newInstance();
    util=new TransportTestUtil(newNeo4jPack(),newMessageEncoder());
  }
  @After public void tearDown() throws Exception {
    if (connection != null) {
      connection.disconnect();
    }
  }
  protected void negotiateBoltV3() throws Exception {
    connection.connect(address).send(util.acceptedVersions(3,0,0,0)).send(util.chunk(new HelloMessage(MapUtil.map("user_agent",USER_AGENT))));
    assertThat(connection,eventuallyReceives(new byte[]{0,0,0,3}));
    assertThat(connection,util.eventuallyReceives(msgSuccess()));
  }
}
