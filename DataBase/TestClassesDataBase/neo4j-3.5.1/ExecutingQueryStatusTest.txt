public class ExecutingQueryStatusTest {
  private final FakeClock clock=Clocks.fakeClock(ZonedDateTime.parse("2016-12-16T16:14:12+01:00"));
  @Test public void shouldProduceSensibleMapRepresentationInRunningState(){
    String status=SimpleState.running().name();
    assertEquals("running",status);
  }
  @Test public void shouldProduceSensibleMapRepresentationInPlanningState(){
    String status=SimpleState.planning().name();
    assertEquals("planning",status);
  }
  @Test public void shouldProduceSensibleMapRepresentationInWaitingOnLockState(){
    long[] resourceIds={17};
    WaitingOnLock status=new WaitingOnLock(ActiveLock.EXCLUSIVE_MODE,resourceType("NODE"),resourceIds,clock.nanos());
    clock.forward(17,TimeUnit.MILLISECONDS);
    Map<String,Object> statusMap=status.toMap(clock.nanos());
    assertEquals("waiting",status.name());
    Map<String,Object> expected=new HashMap<>();
    expected.put("waitTimeMillis",17L);
    expected.put("lockMode","EXCLUSIVE");
    expected.put("resourceType","NODE");
    expected.put("resourceIds",resourceIds);
    assertEquals(expected,statusMap);
  }
  @Test public void shouldProduceSensibleMapRepresentationInWaitingOnQueryState(){
    WaitingOnQuery status=new WaitingOnQuery(new ExecutingQuery(12,null,null,null,null,null,() -> 0,PageCursorTracer.NULL,Thread.currentThread().getId(),Thread.currentThread().getName(),clock,FakeCpuClock.NOT_AVAILABLE,HeapAllocation.NOT_AVAILABLE),clock.nanos());
    clock.forward(1025,TimeUnit.MILLISECONDS);
    Map<String,Object> statusMap=status.toMap(clock.nanos());
    assertEquals("waiting",status.name());
    Map<String,Object> expected=new HashMap<>();
    expected.put("waitTimeMillis",1025L);
    expected.put("queryId","query-12");
    assertEquals(expected,statusMap);
  }
  static ResourceType resourceType(  String name){
    return new ResourceType(){
      @Override public String toString(){
        return name();
      }
      @Override public int typeId(){
        throw new UnsupportedOperationException("not used");
      }
      @Override public WaitStrategy waitStrategy(){
        throw new UnsupportedOperationException("not used");
      }
      @Override public String name(){
        return name;
      }
    }
;
  }
}
