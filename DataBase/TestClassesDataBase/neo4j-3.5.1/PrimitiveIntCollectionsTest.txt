class PrimitiveIntCollectionsTest {
  @Test void arrayOfItemsAsIterator(){
    int[] items=new int[]{2,5,234};
    PrimitiveIntIterator iterator=PrimitiveIntCollections.iterator(items);
    assertItems(iterator,items);
  }
  @Test void convertCollectionToLongArray(){
    PrimitiveIntSet heapSet=PrimitiveIntCollections.asSet(new int[]{1,2,3});
    PrimitiveIntSet offHeapIntSet=Primitive.offHeapIntSet(GlobalMemoryTracker.INSTANCE);
    offHeapIntSet.add(7);
    offHeapIntSet.add(8);
    assertArrayEquals(new long[]{1,2,3},PrimitiveIntCollections.asLongArray(heapSet));
    assertArrayEquals(new long[]{7,8},PrimitiveIntCollections.asLongArray(offHeapIntSet));
  }
  @Test void concatenateTwoIterators(){
    PrimitiveIntIterator firstItems=PrimitiveIntCollections.iterator(10,3,203,32);
    PrimitiveIntIterator otherItems=PrimitiveIntCollections.iterator(1,2,5);
    PrimitiveIntIterator iterator=PrimitiveIntCollections.concat(asList(firstItems,otherItems).iterator());
    assertItems(iterator,10,3,203,32,1,2,5);
  }
  @Test void filter(){
    PrimitiveIntIterator items=PrimitiveIntCollections.iterator(1,2,3);
    PrimitiveIntIterator filtered=PrimitiveIntCollections.filter(items,item -> item != 2);
    assertItems(filtered,1,3);
  }
  @Test void deduplicate(){
    PrimitiveIntIterator items=PrimitiveIntCollections.iterator(1,1,2,3,2);
    PrimitiveIntIterator deduped=PrimitiveIntCollections.deduplicate(items);
    assertItems(deduped,1,2,3);
  }
private static final class CountingPrimitiveIntIteratorResource implements PrimitiveIntIterator, AutoCloseable {
    private final PrimitiveIntIterator delegate;
    private final AtomicInteger closeCounter;
    private CountingPrimitiveIntIteratorResource(    PrimitiveIntIterator delegate,    AtomicInteger closeCounter){
      this.delegate=delegate;
      this.closeCounter=closeCounter;
    }
    @Override public void close(){
      closeCounter.incrementAndGet();
    }
    @Override public boolean hasNext(){
      return delegate.hasNext();
    }
    @Override public int next(){
      return delegate.next();
    }
  }
  @Test void iteratorAsSet(){
    PrimitiveIntIterator items=PrimitiveIntCollections.iterator(1,2,3);
    PrimitiveIntSet set=PrimitiveIntCollections.asSet(items);
    assertTrue(set.contains(1));
    assertTrue(set.contains(2));
    assertTrue(set.contains(3));
    assertFalse(set.contains(4));
    assertThrows(IllegalStateException.class,() -> PrimitiveIntCollections.asSet(PrimitiveIntCollections.iterator(1,2,1)));
  }
  @Test void shouldNotContinueToCallNextOnHasNextFalse(){
    AtomicInteger count=new AtomicInteger(2);
    PrimitiveIntIterator iterator=new PrimitiveIntCollections.PrimitiveIntBaseIterator(){
      @Override protected boolean fetchNext(){
        return count.decrementAndGet() >= 0 && next(count.get());
      }
    }
;
    assertTrue(iterator.hasNext());
    assertTrue(iterator.hasNext());
    assertEquals(1L,iterator.next());
    assertTrue(iterator.hasNext());
    assertTrue(iterator.hasNext());
    assertEquals(0L,iterator.next());
    assertFalse(iterator.hasNext());
    assertFalse(iterator.hasNext());
    assertEquals(-1L,count.get());
  }
  @Test void shouldDeduplicate(){
    int[] array=new int[]{1,6,2,5,6,1,6};
    int[] deduped=PrimitiveIntCollections.deduplicate(array);
    assertArrayEquals(new int[]{1,6,2,5},deduped);
  }
  @Test void copyMap(){
    PrimitiveIntObjectMap<Object> originalMap=Primitive.intObjectMap();
    originalMap.put(1,"a");
    originalMap.put(2,"b");
    originalMap.put(3,"c");
    PrimitiveIntObjectMap<Object> copyMap=PrimitiveIntCollections.copy(originalMap);
    assertNotSame(originalMap,copyMap);
    assertEquals(3,copyMap.size());
    assertEquals("a",copyMap.get(1));
    assertEquals("b",copyMap.get(2));
    assertEquals("c",copyMap.get(3));
  }
  private static void assertNoMoreItems(  PrimitiveIntIterator iterator){
    assertFalse(iterator.hasNext(),iterator + " should have no more items");
    assertThrows(NoSuchElementException.class,iterator::next);
  }
  private static void assertNextEquals(  long expected,  PrimitiveIntIterator iterator){
    assertTrue(iterator.hasNext(),iterator + " should have had more items");
    assertEquals(expected,iterator.next());
  }
  private static void assertItems(  PrimitiveIntIterator iterator,  int... expectedItems){
    for (    long expectedItem : expectedItems) {
      assertNextEquals(expectedItem,iterator);
    }
    assertNoMoreItems(iterator);
  }
}
