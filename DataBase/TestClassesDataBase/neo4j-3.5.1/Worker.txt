private static class Worker extends OtherThreadExecutor<State> {
  Worker(  String name,  State initialState){
    super(name,initialState);
  }
  public boolean hasProperty(  final String key) throws Exception {
    return execute(state -> state.properties.hasProperty(key));
  }
  public void commitTx() throws Exception {
    execute((WorkerCommand<State,Void>)state -> {
      state.tx.success();
      state.tx.close();
      return null;
    }
);
  }
  void beginTx() throws Exception {
    execute((WorkerCommand<State,Void>)state -> {
      state.tx=state.db.beginTx();
      return null;
    }
);
  }
  Future<Void> setProperty(  final String key,  final Object value){
    return executeDontWait(state -> {
      state.properties.setProperty(key,value);
      return null;
    }
);
  }
}
