public class TestLengthyArrayPacking extends AbstractNeo4jTestCase {
  private static final String SOME_MIXED_CHARS="abc421#¤åäö(/&€";
  private static final String SOME_LATIN_1_CHARS="abcdefghijklmnopqrstuvwxyz";
  @Test public void bitPackingOfLengthyArrays(){
    long arrayRecordsBefore=dynamicArrayRecordsInUse();
    int[] arrayWhichUnpackedWouldFillTwoDynamicRecords=new int[40];
    for (int i=0; i < arrayWhichUnpackedWouldFillTwoDynamicRecords.length; i++) {
      arrayWhichUnpackedWouldFillTwoDynamicRecords[i]=i * i;
    }
    Node node=getGraphDb().createNode();
    String key="the array";
    node.setProperty(key,arrayWhichUnpackedWouldFillTwoDynamicRecords);
    newTransaction();
    assertEquals(arrayRecordsBefore + 1,dynamicArrayRecordsInUse());
    assertTrue(Arrays.equals(arrayWhichUnpackedWouldFillTwoDynamicRecords,(int[])node.getProperty(key)));
  }
  @Test public void makeSureLongLatin1StringUsesOneBytePerChar(){
    String string=stringOfLength(SOME_LATIN_1_CHARS,DEFAULT_DATA_BLOCK_SIZE * 2 - 1);
    makeSureRightAmountOfDynamicRecordsUsed(string,2,STRING_RECORD_COUNTER);
  }
  @Test public void makeSureLongUtf8StringUsesLessThanTwoBytesPerChar(){
    String string=stringOfLength(SOME_MIXED_CHARS,DEFAULT_DATA_BLOCK_SIZE + 10);
    makeSureRightAmountOfDynamicRecordsUsed(string,2,STRING_RECORD_COUNTER);
  }
  @Test public void makeSureLongLatin1StringArrayUsesOneBytePerChar(){
    String[] stringArray=new String[5];
    for (int i=0; i < stringArray.length; i++) {
      stringArray[i]=stringOfLength(SOME_LATIN_1_CHARS,19);
    }
    makeSureRightAmountOfDynamicRecordsUsed(stringArray,1,ARRAY_RECORD_COUNTER);
  }
  @Test public void makeSureLongUtf8StringArrayUsesLessThanTwoBytePerChar(){
    String[] stringArray=new String[7];
    for (int i=0; i < stringArray.length; i++) {
      stringArray[i]=stringOfLength(SOME_MIXED_CHARS,20);
    }
    makeSureRightAmountOfDynamicRecordsUsed(stringArray,2,ARRAY_RECORD_COUNTER);
  }
  private void makeSureRightAmountOfDynamicRecordsUsed(  Object value,  int expectedAddedDynamicRecords,  DynamicRecordCounter recordCounter){
    long stringRecordsBefore=recordCounter.count();
    Node node=getGraphDb().createNode();
    node.setProperty("name",value);
    newTransaction();
    long stringRecordsAfter=recordCounter.count();
    assertEquals(stringRecordsBefore + expectedAddedDynamicRecords,stringRecordsAfter);
  }
  private String stringOfLength(  String possibilities,  int length){
    StringBuilder builder=new StringBuilder();
    for (int i=0; i < length; i++) {
      builder.append(possibilities.charAt(i % possibilities.length()));
    }
    return builder.toString();
  }
private interface DynamicRecordCounter {
    long count();
  }
private class ArrayRecordCounter implements DynamicRecordCounter {
    @Override public long count(){
      return dynamicArrayRecordsInUse();
    }
  }
private class StringRecordCounter implements DynamicRecordCounter {
    @Override public long count(){
      return dynamicStringRecordsInUse();
    }
  }
  private final DynamicRecordCounter ARRAY_RECORD_COUNTER=new ArrayRecordCounter();
  private final DynamicRecordCounter STRING_RECORD_COUNTER=new StringRecordCounter();
}
