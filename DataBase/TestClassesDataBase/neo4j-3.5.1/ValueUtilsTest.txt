class ValueUtilsTest {
  @Test void shouldHandleCollection(){
    Collection<Integer> collection=Arrays.asList(1,2,3);
    AnyValue of=ValueUtils.of(collection);
    assertThat(of,instanceOf(ListValue.class));
    ListValue listValue=(ListValue)of;
    assertThat(listValue.value(0),equalTo(intValue(1)));
    assertThat(listValue.value(1),equalTo(intValue(2)));
    assertThat(listValue.value(2),equalTo(intValue(3)));
    assertThat(listValue.size(),equalTo(3));
  }
  @Test void shouldHandleIterator(){
    Iterator<Integer> iterator=Arrays.asList(1,2,3).iterator();
    AnyValue of=ValueUtils.of(iterator);
    assertThat(of,instanceOf(ListValue.class));
    ListValue listValue=(ListValue)of;
    assertThat(listValue.value(0),equalTo(intValue(1)));
    assertThat(listValue.value(1),equalTo(intValue(2)));
    assertThat(listValue.value(2),equalTo(intValue(3)));
    assertThat(listValue.size(),equalTo(3));
  }
  @Test void shouldHandleMaps(){
    Map<String,Object> map=MapUtil.map("a",Arrays.asList("foo",42));
    AnyValue anyValue=ValueUtils.of(map);
    assertThat(anyValue,instanceOf(MapValue.class));
    MapValue mapValue=(MapValue)anyValue;
    assertThat(mapValue.get("a"),equalTo(VirtualValues.list(stringValue("foo"),intValue(42))));
    assertThat(mapValue.size(),equalTo(1));
  }
  @Test void shouldHandleIterable(){
    Iterable<Integer> collection=Arrays.asList(1,2,3);
    AnyValue of=ValueUtils.of(collection);
    assertThat(of,instanceOf(ListValue.class));
    ListValue listValue=(ListValue)of;
    assertThat(listValue.value(0),equalTo(intValue(1)));
    assertThat(listValue.value(1),equalTo(intValue(2)));
    assertThat(listValue.value(2),equalTo(intValue(3)));
    assertThat(listValue.size(),equalTo(3));
  }
}
