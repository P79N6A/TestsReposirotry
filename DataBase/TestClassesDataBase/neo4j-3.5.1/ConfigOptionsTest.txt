class ConfigOptionsTest {
  private Setting<Integer> setting=new BaseSetting<Integer>(){
    @Override public String name(){
      return "myInt";
    }
    @Override public void withScope(    Function<String,String> scopingRule){
    }
    @Override public String getDefaultValue(){
      return "1";
    }
    @Override public Integer from(    Configuration config){
      return config.get(this);
    }
    @Override public Integer apply(    Function<String,String> provider){
      return Integer.parseInt(provider.apply(name()));
    }
    @Override public String valueDescription(){
      return "a special test integer";
    }
  }
;
  private ConfigOptions configOptions;
  @BeforeEach void setup(){
    this.configOptions=new ConfigOptions(setting);
  }
  @Test void setting(){
    assertEquals(setting,configOptions.settingGroup());
  }
  @Test void asConfigValue(){
    List<ConfigValue> values=configOptions.asConfigValues(Collections.singletonMap("myInt","123"));
    assertEquals(1,values.size());
    assertEquals(Optional.of(123),values.get(0).value());
    assertEquals("myInt",values.get(0).name());
    assertEquals(Optional.empty(),values.get(0).description());
    assertEquals("a special test integer",values.get(0).valueDescription());
  }
}
