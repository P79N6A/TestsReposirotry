public class ResampleIndexProcedureTest {
  private IndexingService indexingService;
  private IndexProcedures procedure;
  private TokenRead tokenRead;
  private SchemaRead schemaRead;
  @Before public void setup(){
    KernelTransaction transaction=mock(KernelTransaction.class);
    tokenRead=mock(TokenRead.class);
    schemaRead=mock(SchemaRead.class);
    procedure=new IndexProcedures(transaction,null);
    when(transaction.tokenRead()).thenReturn(tokenRead);
    when(transaction.schemaRead()).thenReturn(schemaRead);
    indexingService=mock(IndexingService.class);
    procedure=new IndexProcedures(transaction,indexingService);
  }
  @Test public void shouldThrowAnExceptionIfTheLabelDoesntExist(){
    when(tokenRead.nodeLabel("NonExistentLabel")).thenReturn(-1);
    try {
      procedure.resampleIndex(":NonExistentLabel(prop)");
      fail("Expected an exception");
    }
 catch (    ProcedureException e) {
      assertThat(e.status(),is(Status.Schema.LabelAccessFailed));
    }
  }
  @Test public void shouldThrowAnExceptionIfThePropertyKeyDoesntExist(){
    when(tokenRead.propertyKey("nonExistentProperty")).thenReturn(-1);
    try {
      procedure.resampleIndex(":Label(nonExistentProperty)");
      fail("Expected an exception");
    }
 catch (    ProcedureException e) {
      assertThat(e.status(),is(Status.Schema.PropertyKeyAccessFailed));
    }
  }
  @Test public void shouldLookUpTheIndexByLabelIdAndPropertyKeyId() throws ProcedureException, SchemaRuleNotFoundException {
    IndexDescriptor index=TestIndexDescriptorFactory.forLabel(0,0);
    when(tokenRead.nodeLabel(anyString())).thenReturn(123);
    when(tokenRead.propertyKey(anyString())).thenReturn(456);
    when(schemaRead.index(anyInt(),any())).thenReturn(index);
    procedure.resampleIndex(":Person(name)");
    verify(schemaRead).index(123,456);
  }
  @Test public void shouldLookUpTheCompositeIndexByLabelIdAndPropertyKeyId() throws ProcedureException, SchemaRuleNotFoundException {
    IndexDescriptor index=TestIndexDescriptorFactory.forLabel(0,0,1);
    when(tokenRead.nodeLabel(anyString())).thenReturn(123);
    when(tokenRead.propertyKey("name")).thenReturn(0);
    when(tokenRead.propertyKey("lastName")).thenReturn(1);
    when(schemaRead.index(123,0,1)).thenReturn(index);
    procedure.resampleIndex(":Person(name, lastName)");
    verify(schemaRead).index(123,0,1);
  }
  @Test public void shouldThrowAnExceptionIfTheIndexDoesNotExist() throws SchemaRuleNotFoundException {
    when(tokenRead.nodeLabel(anyString())).thenReturn(0);
    when(tokenRead.propertyKey(anyString())).thenReturn(0);
    when(schemaRead.index(anyInt(),any())).thenReturn(IndexReference.NO_INDEX);
    try {
      procedure.resampleIndex(":Person(name)");
      fail("Expected an exception");
    }
 catch (    ProcedureException e) {
      assertThat(e.status(),is(Status.Schema.IndexNotFound));
    }
  }
  @Test public void shouldTriggerResampling() throws SchemaRuleNotFoundException, ProcedureException, IndexNotFoundKernelException {
    IndexDescriptor index=TestIndexDescriptorFactory.forLabel(123,456);
    when(schemaRead.index(anyInt(),any())).thenReturn(index);
    procedure.resampleIndex(":Person(name)");
    verify(indexingService).triggerIndexSampling(index.schema(),IndexSamplingMode.TRIGGER_REBUILD_ALL);
  }
}
