/** 
 * Very often when you want a  {@link PageCacheRule} you also want {@link TestDirectory} and some {@link FileSystemRule}. This is tedious to write and apply in the correct order in every test doing this. This rule collects this threesome into one rule for convenience.
 */
public class PageCacheAndDependenciesRule implements TestRule {
  private RuleChain chain;
  private FileSystemRule<? extends FileSystemAbstraction> fs;
  private TestDirectory directory;
  private PageCacheRule pageCacheRule;
  private PageCacheRule.PageCacheConfig pageCacheConfig=config();
  private Class<?> clazz;
  public PageCacheAndDependenciesRule with(  FileSystemRule<? extends FileSystemAbstraction> fs){
    this.fs=fs;
    return this;
  }
  public PageCacheAndDependenciesRule with(  PageCacheRule.PageCacheConfig config){
    this.pageCacheConfig=config;
    return this;
  }
  public PageCacheAndDependenciesRule with(  Class<?> clazz){
    this.clazz=clazz;
    return this;
  }
  @Override public Statement apply(  Statement base,  Description description){
    if (chain == null) {
      if (fs == null) {
        fs=new EphemeralFileSystemRule();
      }
      this.pageCacheRule=new PageCacheRule(pageCacheConfig);
      this.directory=TestDirectory.testDirectory(clazz,fs);
      this.chain=RuleChain.outerRule(fs).around(directory).around(pageCacheRule);
    }
    return chain.apply(base,description);
  }
  public FileSystemRule<? extends FileSystemAbstraction> fileSystemRule(){
    return fs;
  }
  public FileSystemAbstraction fileSystem(){
    return fs.get();
  }
  public TestDirectory directory(){
    return directory;
  }
  public PageCacheRule pageCacheRule(){
    return pageCacheRule;
  }
  public PageCache pageCache(){
    return pageCacheRule.getPageCache(fs);
  }
}
