private static class LockAcquisition {
  volatile Future<?> future;
  volatile Locks.Client client;
  volatile OtherThreadExecutor<Void> executor;
  Future<?> getFuture(){
    Objects.requireNonNull(future,"lock acquisition was not initialized with future");
    return future;
  }
  void setFuture(  Future<?> future,  OtherThreadExecutor<Void> executor){
    this.future=future;
    this.executor=executor;
  }
  Locks.Client getClient(){
    Objects.requireNonNull(client,"lock acquisition was not initialized with client");
    return client;
  }
  void setClient(  Locks.Client client){
    this.client=client;
  }
  Object result() throws InterruptedException, ExecutionException, TimeoutException {
    return getFuture().get(100,TimeUnit.MILLISECONDS);
  }
  boolean completed(){
    return getFuture().isDone();
  }
  void stop(){
    getClient().stop();
  }
}
