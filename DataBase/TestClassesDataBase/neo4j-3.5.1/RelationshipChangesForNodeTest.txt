public class RelationshipChangesForNodeTest {
  @Test public void shouldGetRelationships(){
    RelationshipChangesForNode changes=new RelationshipChangesForNode(RelationshipChangesForNode.DiffStrategy.ADD);
    final int TYPE=2;
    changes.addRelationship(1,TYPE,INCOMING);
    changes.addRelationship(2,TYPE,OUTGOING);
    changes.addRelationship(3,TYPE,OUTGOING);
    changes.addRelationship(4,TYPE,LOOP);
    changes.addRelationship(5,TYPE,LOOP);
    changes.addRelationship(6,TYPE,LOOP);
    LongIterator rawRelationships=changes.getRelationships();
    assertThat(PrimitiveLongCollections.asArray(rawRelationships),ids(1,2,3,4,5,6));
  }
  @Test public void shouldGetRelationshipsByTypeAndDirection(){
    RelationshipChangesForNode changes=new RelationshipChangesForNode(RelationshipChangesForNode.DiffStrategy.ADD);
    final int TYPE=2;
    final int DECOY_TYPE=666;
    changes.addRelationship(1,TYPE,INCOMING);
    changes.addRelationship(2,TYPE,OUTGOING);
    changes.addRelationship(3,TYPE,OUTGOING);
    changes.addRelationship(4,TYPE,LOOP);
    changes.addRelationship(5,TYPE,LOOP);
    changes.addRelationship(6,TYPE,LOOP);
    changes.addRelationship(10,DECOY_TYPE,INCOMING);
    changes.addRelationship(11,DECOY_TYPE,OUTGOING);
    changes.addRelationship(12,DECOY_TYPE,LOOP);
    LongIterator rawIncoming=changes.getRelationships(RelationshipDirection.INCOMING,TYPE);
    assertThat(PrimitiveLongCollections.asArray(rawIncoming),ids(1));
    LongIterator rawOutgoing=changes.getRelationships(RelationshipDirection.OUTGOING,TYPE);
    assertThat(PrimitiveLongCollections.asArray(rawOutgoing),ids(2,3));
    LongIterator rawLoops=changes.getRelationships(RelationshipDirection.LOOP,TYPE);
    assertThat(PrimitiveLongCollections.asArray(rawLoops),ids(4,5,6));
  }
  private Matcher<long[]> ids(  long... ids){
    return equalTo(ids);
  }
}
