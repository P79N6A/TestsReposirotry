public class ShortStringPropertyEncodeTest {
  private static final int KEY_ID=0;
  @Rule public final PageCacheAndDependenciesRule storage=new PageCacheAndDependenciesRule();
  private NeoStores neoStores;
  private PropertyStore propertyStore;
  @Before public void setupStore(){
    neoStores=new StoreFactory(storage.directory().databaseLayout(),Config.defaults(),new DefaultIdGeneratorFactory(storage.fileSystem()),storage.pageCache(),storage.fileSystem(),NullLogProvider.getInstance(),EmptyVersionContextSupplier.EMPTY).openNeoStores(true,StoreType.PROPERTY,StoreType.PROPERTY_ARRAY,StoreType.PROPERTY_STRING);
    propertyStore=neoStores.getPropertyStore();
  }
  @After public void closeStore(){
    neoStores.close();
  }
  @Test public void canEncodeEmptyString(){
    assertCanEncode("");
  }
  @Test public void canEncodeReallyLongString(){
    assertCanEncode("                    ");
    assertCanEncode("                ");
  }
  @Test public void canEncodeFifteenSpaces(){
    assertCanEncode("               ");
  }
  @Test public void canEncodeNumericalString(){
    assertCanEncode("0123456789+,'.-");
    assertCanEncode(" ,'.-0123456789");
    assertCanEncode("+ '.0123456789-");
    assertCanEncode("+, 0123456789.-");
    assertCanEncode("+,0123456789' -");
    assertCanEncode("+0123456789,'. ");
    assertCanEncode("192.168.0.1");
    assertCanEncode("127.0.0.1");
    assertCanEncode("255.255.255.255");
  }
  @Test public void canEncodeTooLongStringsWithCharsInDifferentTables(){
    assertCanEncode("____________+");
    assertCanEncode("_____+_____");
    assertCanEncode("____+____");
    assertCanEncode("HELLO world");
    assertCanEncode("Hello_World");
  }
  @Test public void canEncodeUpToNineEuropeanChars(){
    assertCanEncode("fågel");
    assertCanEncode("påfågel");
    assertCanEncode("påfågelö");
    assertCanEncode("påfågelön");
    assertCanEncode("påfågelöar");
  }
  @Test public void canEncodeEuropeanCharsWithPunctuation(){
    assertCanEncode("qHm7 pp3");
    assertCanEncode("UKKY3t.gk");
  }
  @Test public void canEncodeAlphanumerical(){
    assertCanEncode("1234567890");
    assertCanEncodeInBothCasings("HelloWor1d");
    assertCanEncode("          ");
    assertCanEncode("_ _ _ _ _ ");
    assertCanEncode("H3Lo_ or1D");
    assertCanEncode("q1w2e3r4t+");
  }
  @Test public void canEncodeHighUnicode(){
    assertCanEncode("\u02FF");
    assertCanEncode("hello\u02FF");
  }
  @Test public void canEncodeLatin1SpecialChars(){
    assertCanEncode("#$#$#$#");
    assertCanEncode("$hello#");
  }
  @Test public void canEncodeTooLongLatin1String(){
    assertCanEncode("#$#$#$#$");
  }
  @Test public void canEncodeLowercaseAndUppercaseStringsUpTo12Chars(){
    assertCanEncodeInBothCasings("hello world");
    assertCanEncode("hello_world");
    assertCanEncode("_hello_world");
    assertCanEncode("hello::world");
    assertCanEncode("hello//world");
    assertCanEncode("hello world");
    assertCanEncode("http://ok");
    assertCanEncode("::::::::");
    assertCanEncode(" _.-:/ _.-:/");
  }
  private void assertCanEncodeInBothCasings(  String string){
    assertCanEncode(string.toLowerCase());
    assertCanEncode(string.toUpperCase());
  }
  private void assertCanEncode(  String string){
    encode(string);
  }
  private void encode(  String string){
    PropertyBlock block=new PropertyBlock();
    TextValue expectedValue=Values.stringValue(string);
    propertyStore.encodeValue(block,KEY_ID,expectedValue);
    assertEquals(0,block.getValueRecords().size());
    Value readValue=block.getType().value(block,propertyStore);
    assertEquals(expectedValue,readValue);
  }
}
