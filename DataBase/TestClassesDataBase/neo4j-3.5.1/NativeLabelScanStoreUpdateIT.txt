public class NativeLabelScanStoreUpdateIT {
  @ClassRule public static final DatabaseRule dbRule=new ImpermanentDatabaseRule();
  @Rule public final TestName testName=new TestName();
  private Label First;
  private Label Second;
  private Label Third;
  @Before public void setupLabels(){
    First=Label.label("First-" + testName.getMethodName());
    Second=Label.label("Second-" + testName.getMethodName());
    Third=Label.label("Third-" + testName.getMethodName());
  }
  @Test public void shouldGetNodesWithCreatedLabel(){
    Node node1=createLabeledNode(First);
    Node node2=createLabeledNode(Second);
    Node node3=createLabeledNode(Third);
    Node node4=createLabeledNode(First,Second,Third);
    Node node5=createLabeledNode(First,Third);
    assertEquals(asSet(node1,node4,node5),Iterables.asSet(getAllNodesWithLabel(First)));
    assertEquals(asSet(node2,node4),Iterables.asSet(getAllNodesWithLabel(Second)));
    assertEquals(asSet(node3,node4,node5),Iterables.asSet(getAllNodesWithLabel(Third)));
  }
  @Test public void shouldGetNodesWithAddedLabel(){
    Node node1=createLabeledNode(First);
    Node node2=createLabeledNode(Second);
    Node node3=createLabeledNode(Third);
    Node node4=createLabeledNode(First);
    Node node5=createLabeledNode(First);
    addLabels(node4,Second,Third);
    addLabels(node5,Third);
    assertEquals(asSet(node1,node4,node5),Iterables.asSet(getAllNodesWithLabel(First)));
    assertEquals(asSet(node2,node4),Iterables.asSet(getAllNodesWithLabel(Second)));
    assertEquals(asSet(node3,node4,node5),Iterables.asSet(getAllNodesWithLabel(Third)));
  }
  @Test public void shouldGetNodesAfterDeletedNodes(){
    Node node1=createLabeledNode(First,Second);
    Node node2=createLabeledNode(First,Third);
    deleteNode(node1);
    assertEquals(asSet(node2),getAllNodesWithLabel(First));
    assertEquals(emptySet(),getAllNodesWithLabel(Second));
    assertEquals(asSet(node2),getAllNodesWithLabel(Third));
  }
  @Test public void shouldGetNodesAfterRemovedLabels(){
    Node node1=createLabeledNode(First,Second);
    Node node2=createLabeledNode(First,Third);
    removeLabels(node1,First);
    removeLabels(node2,Third);
    assertEquals(asSet(node2),getAllNodesWithLabel(First));
    assertEquals(asSet(node1),getAllNodesWithLabel(Second));
    assertEquals(emptySet(),getAllNodesWithLabel(Third));
  }
  @Test public void retrieveNodeIdsInAscendingOrder(){
    for (int i=0; i < 50; i++) {
      createLabeledNode(Labels.First,Labels.Second);
      createLabeledNode(Labels.Second);
      createLabeledNode(Labels.First);
    }
    long nodeWithThirdLabel=createLabeledNode(Labels.Third).getId();
    verifyFoundNodes(Labels.Third,"Expect to see 1 matched nodeId: " + nodeWithThirdLabel,nodeWithThirdLabel);
    Node nodeById=getNodeById(1);
    addLabels(nodeById,Labels.Third);
    verifyFoundNodes(Labels.Third,"Expect to see 2 matched nodeIds: 1, " + nodeWithThirdLabel,1,nodeWithThirdLabel);
  }
  @Test public void shouldHandleLargeAmountsOfNodesAddedAndRemovedInSameTx(){
    GraphDatabaseService db=dbRule;
    int labelsToAdd=80;
    int labelsToRemove=40;
    Node node;
    try (Transaction tx=db.beginTx()){
      node=db.createNode();
      for (int l=0; l < labelsToAdd; l++) {
        node.addLabel(label("Label-" + l));
      }
      for (int l=0; l < labelsToRemove; l++) {
        node.removeLabel(label("Label-" + l));
      }
      tx.success();
    }
     try (Transaction ignore=db.beginTx()){
      for (int l=labelsToAdd - 1; l >= labelsToRemove; l--) {
        Label label=label("Label-" + l);
        assertThat("Should have found node when looking for label " + label,single(db.findNodes(label)),equalTo(node));
      }
    }
   }
  private void verifyFoundNodes(  Label label,  String sizeMismatchMessage,  long... expectedNodeIds){
    try (Transaction ignored=dbRule.beginTx()){
      ResourceIterator<Node> nodes=dbRule.findNodes(label);
      List<Node> nodeList=Iterators.asList(nodes);
      assertThat(sizeMismatchMessage,nodeList,Matchers.hasSize(expectedNodeIds.length));
      int index=0;
      for (      Node node : nodeList) {
        assertEquals(expectedNodeIds[index++],node.getId());
      }
    }
   }
  private void removeLabels(  Node node,  Label... labels){
    try (Transaction tx=dbRule.beginTx()){
      for (      Label label : labels) {
        node.removeLabel(label);
      }
      tx.success();
    }
   }
  private void deleteNode(  Node node){
    try (Transaction tx=dbRule.beginTx()){
      node.delete();
      tx.success();
    }
   }
  private Set<Node> getAllNodesWithLabel(  Label label){
    try (Transaction ignored=dbRule.beginTx()){
      return asSet(dbRule.findNodes(label));
    }
   }
  private Node createLabeledNode(  Label... labels){
    try (Transaction tx=dbRule.beginTx()){
      Node node=dbRule.createNode(labels);
      tx.success();
      return node;
    }
   }
  private void addLabels(  Node node,  Label... labels){
    try (Transaction tx=dbRule.beginTx()){
      for (      Label label : labels) {
        node.addLabel(label);
      }
      tx.success();
    }
   }
  private Node getNodeById(  long id){
    try (Transaction ignored=dbRule.beginTx()){
      return dbRule.getNodeById(id);
    }
   }
  private enum Labels implements Label {  First,   Second,   Third}
}
