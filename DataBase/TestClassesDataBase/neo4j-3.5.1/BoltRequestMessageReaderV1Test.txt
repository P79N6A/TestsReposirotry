public class BoltRequestMessageReaderV1Test {
  @Test void shouldDecodeInitMessage() throws Exception {
    testMessageDecoding(new InitMessage("My driver",map("one",1L,"two",2L)));
  }
  @Test void shouldDecodeAckFailureMessage() throws Exception {
    testMessageDecoding(AckFailureMessage.INSTANCE);
  }
  @Test void shouldDecodeResetMessage() throws Exception {
    testMessageDecoding(ResetMessage.INSTANCE);
  }
  @Test void shouldDecodeRunMessage() throws Exception {
    testMessageDecoding(new RunMessage("RETURN $answer",map(new String[]{"answer"},new AnyValue[]{stringValue("42")})));
  }
  @Test void shouldDecodeDiscardAllMessage() throws Exception {
    testMessageDecoding(DiscardAllMessage.INSTANCE);
  }
  @Test void shouldDecodePullAllMessage() throws Exception {
    testMessageDecoding(PullAllMessage.INSTANCE);
  }
  private static void testMessageDecoding(  RequestMessage message) throws Exception {
    Neo4jPack neo4jPack=new Neo4jPackV1();
    BoltStateMachine stateMachine=mock(BoltStateMachine.class);
    BoltRequestMessageReader reader=newReader(stateMachine);
    PackedInputArray innput=new PackedInputArray(serialize(neo4jPack,message));
    Neo4jPack.Unpacker unpacker=neo4jPack.newUnpacker(innput);
    reader.read(unpacker);
    verify(stateMachine).process(eq(message),any());
  }
  private static BoltRequestMessageReader newReader(  BoltStateMachine stateMachine){
    return new BoltRequestMessageReaderV1(new SynchronousBoltConnection(stateMachine),mock(BoltResponseMessageWriter.class),NullLogService.getInstance());
  }
}
