class SpaceFillingCurveSettingsHeaderTest {
  private final byte[] data=new byte[PAGE_SIZE];
  private final PageCursor pageCursor=ByteArrayPageCursor.wrap(data);
  @Test void shouldWriteAndReadZeroSettings(){
    shouldWriteAndReadSettings();
  }
  @Test void shouldWriteAndReadSingleSetting(){
    shouldWriteAndReadSettings(CoordinateReferenceSystem.WGS84);
  }
  @Test void shouldWriteAndReadMultipleSettings(){
    shouldWriteAndReadSettings(CoordinateReferenceSystem.WGS84,CoordinateReferenceSystem.Cartesian,CoordinateReferenceSystem.Cartesian_3D);
  }
  private void shouldWriteAndReadSettings(  CoordinateReferenceSystem... crss){
    IndexSpecificSpaceFillingCurveSettingsCache indexSettings=new IndexSpecificSpaceFillingCurveSettingsCache(new ConfiguredSpaceFillingCurveSettingsCache(Config.defaults()),new HashMap<>());
    for (    CoordinateReferenceSystem crs : crss) {
      indexSettings.forCrs(crs,true);
    }
    SpaceFillingCurveSettingsWriter writer=new SpaceFillingCurveSettingsWriter(indexSettings);
    writer.accept(pageCursor);
    pageCursor.rewind();
    Map<CoordinateReferenceSystem,SpaceFillingCurveSettings> read=new HashMap<>();
    SpaceFillingCurveSettingsReader reader=new SpaceFillingCurveSettingsReader(read);
    reader.read(ByteBuffer.wrap(data));
    assertEquals(asMap(indexSettings),read);
  }
  private Map<CoordinateReferenceSystem,SpaceFillingCurveSettings> asMap(  IndexSpecificSpaceFillingCurveSettingsCache indexSettings){
    ToMapSettingVisitor visitor=new ToMapSettingVisitor();
    indexSettings.visitIndexSpecificSettings(visitor);
    return visitor.map;
  }
}
