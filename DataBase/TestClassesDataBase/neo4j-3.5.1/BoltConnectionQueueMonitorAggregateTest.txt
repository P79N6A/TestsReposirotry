public class BoltConnectionQueueMonitorAggregateTest {
  private BoltConnection connection=mock(BoltConnection.class);
  @Test public void shouldCallEnqueuedOnSingleMonitor(){
    Job job=mock(Job.class);
    BoltConnectionQueueMonitor monitor=mock(BoltConnectionQueueMonitor.class);
    BoltConnectionQueueMonitorAggregate monitorAggregate=new BoltConnectionQueueMonitorAggregate(monitor);
    monitorAggregate.enqueued(connection,job);
    verify(monitor).enqueued(connection,job);
  }
  @Test public void shouldCallDrainedOnSingleMonitor(){
    Collection<Job> batch=new ArrayList<>();
    BoltConnectionQueueMonitor monitor=mock(BoltConnectionQueueMonitor.class);
    BoltConnectionQueueMonitorAggregate monitorAggregate=new BoltConnectionQueueMonitorAggregate(monitor);
    monitorAggregate.drained(connection,batch);
    verify(monitor).drained(connection,batch);
  }
  @Test public void shouldCallEnqueuedOnEachMonitor(){
    Job job=mock(Job.class);
    BoltConnectionQueueMonitor monitor1=mock(BoltConnectionQueueMonitor.class);
    BoltConnectionQueueMonitor monitor2=mock(BoltConnectionQueueMonitor.class);
    BoltConnectionQueueMonitorAggregate monitorAggregate=new BoltConnectionQueueMonitorAggregate(monitor1,monitor2);
    monitorAggregate.enqueued(connection,job);
    verify(monitor1).enqueued(connection,job);
    verify(monitor2).enqueued(connection,job);
  }
  @Test public void shouldCallDrainedOnEachMonitor(){
    Collection<Job> batch=new ArrayList<>();
    BoltConnectionQueueMonitor monitor1=mock(BoltConnectionQueueMonitor.class);
    BoltConnectionQueueMonitor monitor2=mock(BoltConnectionQueueMonitor.class);
    BoltConnectionQueueMonitorAggregate monitorAggregate=new BoltConnectionQueueMonitorAggregate(monitor1,monitor2);
    monitorAggregate.drained(connection,batch);
    verify(monitor1).drained(connection,batch);
    verify(monitor2).drained(connection,batch);
  }
}
