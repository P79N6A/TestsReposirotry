@Ignore("Not a test. This is a compatibility suite, run from LockingCompatibilityTestSuite.") public class DeadlockCompatibility extends LockingCompatibilityTestSuite.Compatibility {
  public DeadlockCompatibility(  LockingCompatibilityTestSuite suite){
    super(suite);
  }
  @After public void shutdown(){
    threadA.interrupt();
    threadB.interrupt();
    threadC.interrupt();
  }
  @Test public void shouldDetectTwoClientExclusiveDeadlock(){
    assertDetectsDeadlock(acquireExclusive(clientA,LockTracer.NONE,NODE,1L),acquireExclusive(clientB,LockTracer.NONE,NODE,2L),acquireExclusive(clientB,LockTracer.NONE,NODE,1L),acquireExclusive(clientA,LockTracer.NONE,NODE,2L));
  }
  @Test public void shouldDetectThreeClientExclusiveDeadlock(){
    assertDetectsDeadlock(acquireExclusive(clientA,LockTracer.NONE,NODE,1L),acquireExclusive(clientB,LockTracer.NONE,NODE,2L),acquireExclusive(clientC,LockTracer.NONE,NODE,3L),acquireExclusive(clientB,LockTracer.NONE,NODE,1L),acquireExclusive(clientC,LockTracer.NONE,NODE,2L),acquireExclusive(clientA,LockTracer.NONE,NODE,3L));
  }
  @Test public void shouldDetectMixedExclusiveAndSharedDeadlock(){
    assertDetectsDeadlock(acquireShared(clientA,LockTracer.NONE,NODE,1L),acquireExclusive(clientB,LockTracer.NONE,NODE,2L),acquireExclusive(clientB,LockTracer.NONE,NODE,1L),acquireShared(clientA,LockTracer.NONE,NODE,2L));
  }
  private void assertDetectsDeadlock(  LockCommand... commands){
    List<Pair<Client,Future<Object>>> calls=new ArrayList<>();
    for (    LockCommand command : commands) {
      calls.add(Pair.of(command.client(),command.call()));
    }
    long timeout=System.currentTimeMillis() + (1000 * 10);
    while (System.currentTimeMillis() < timeout) {
      for (      Pair<Client,Future<Object>> call : calls) {
        try {
          call.other().get(1,TimeUnit.MILLISECONDS);
        }
 catch (        ExecutionException e) {
          if (e.getCause() instanceof DeadlockDetectedException) {
            return;
          }
 else {
            throw new RuntimeException(e);
          }
        }
catch (        InterruptedException|TimeoutException e) {
        }
      }
    }
    throw new AssertionError("Failed to detect deadlock. Expected lock manager to detect deadlock, " + "but none of the clients reported any deadlocks.");
  }
}
