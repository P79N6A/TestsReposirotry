public class ZonedDateTimeLayoutTest {
  @Test public void shouldReadAndWriteConsistentValues(){
    Value[] values={DateTimeValue.datetime(9999,100,ZoneId.of("+18:00")),DateTimeValue.datetime(10000,100,ZoneId.of("-18:00")),DateTimeValue.datetime(10000,100,ZoneOffset.of("-17:59:59")),DateTimeValue.datetime(10000,100,ZoneId.of("UTC")),DateTimeValue.datetime(10000,100,ZoneId.of("+01:00")),DateTimeValue.datetime(10000,100,ZoneId.of("Europe/Stockholm")),DateTimeValue.datetime(10000,100,ZoneId.of("+03:00")),DateTimeValue.datetime(10000,101,ZoneId.of("-18:00"))};
    ZonedDateTimeLayout layout=new ZonedDateTimeLayout();
    PageCursor cursor=new StubPageCursor(0,8 * 1024);
    ZonedDateTimeIndexKey writeKey=layout.newKey();
    ZonedDateTimeIndexKey readKey=layout.newKey();
    for (    Value value : values) {
      value.writeTo(writeKey);
      layout.writeKey(cursor,writeKey);
    }
    cursor.setOffset(0);
    for (    Value value : values) {
      layout.readKey(cursor,readKey,ZonedDateTimeIndexKey.SIZE);
      assertEquals(value,readKey.asValue());
    }
  }
}
