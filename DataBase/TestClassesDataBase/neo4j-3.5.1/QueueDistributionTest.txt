class QueueDistributionTest {
  private static final int MAX_NUMBER_OF_THREADS=1_000_000;
  private static final int NUMBER_OF_DISTRIBUTION_ITERATIONS=1000;
  @Test void roundRobinRecordDistribution() throws Exception {
    testRecordDistribution(QueueDistribution.ROUND_ROBIN);
  }
  @Test void relationshipNodesDistribution() throws InterruptedException {
    testRecordDistribution(QueueDistribution.RELATIONSHIPS);
  }
  private static void testRecordDistribution(  QueueDistribution queueDistribution) throws InterruptedException {
    ThreadLocalRandom randomGenerator=ThreadLocalRandom.current();
    int numberOfThreads=randomGenerator.nextInt(MAX_NUMBER_OF_THREADS);
    int recordsPerCpu=randomGenerator.nextInt(Integer.MAX_VALUE);
    QueueDistribution.QueueDistributor<RelationshipRecord> distributor=queueDistribution.distributor(recordsPerCpu,numberOfThreads);
    for (int iteration=0; iteration <= NUMBER_OF_DISTRIBUTION_ITERATIONS; iteration++) {
      RelationshipRecord relationshipRecord=new RelationshipRecord(1);
      relationshipRecord.setFirstNode(nextLong(randomGenerator));
      relationshipRecord.setSecondNode(nextLong(randomGenerator));
      distributor.distribute(relationshipRecord,(record,qIndex) -> assertThat("Distribution index for record " + record + " should be within a range of available "+ "executors, while expected records per cpu is: "+ recordsPerCpu,qIndex,allOf(greaterThanOrEqualTo(0),lessThan(numberOfThreads))));
    }
  }
  private static long nextLong(  ThreadLocalRandom randomGenerator){
    return randomGenerator.nextLong();
  }
}
