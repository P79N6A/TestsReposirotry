public class PropertyValueRecordSizeCalculatorTest {
  private static final int PROPERTY_RECORD_SIZE=PropertyRecordFormat.RECORD_SIZE;
  private static final int DYNAMIC_RECORD_SIZE=120;
  @Rule public final RandomRule random=new RandomRule();
  @Test public void shouldIncludePropertyRecordSize(){
    PropertyValueRecordSizeCalculator calculator=newCalculator();
    int size=calculator.applyAsInt(new Value[]{Values.of(10)});
    assertEquals(PropertyRecordFormat.RECORD_SIZE,size);
  }
  @Test public void shouldIncludeDynamicRecordSizes(){
    PropertyValueRecordSizeCalculator calculator=newCalculator();
    int size=calculator.applyAsInt(new Value[]{Values.of(string(80)),Values.of(new String[]{string(150)})});
    assertEquals(PROPERTY_RECORD_SIZE + DYNAMIC_RECORD_SIZE + DYNAMIC_RECORD_SIZE * 2,size);
  }
  @Test public void shouldSpanMultiplePropertyRecords(){
    PropertyValueRecordSizeCalculator calculator=newCalculator();
    int size=calculator.applyAsInt(new Value[]{Values.of(10),Values.of("test"),Values.of((byte)5),Values.of(string(80)),Values.of("a bit longer short string"),Values.of(1234567890123456789L),Values.of(5),Values.of("value")});
    assertEquals(PROPERTY_RECORD_SIZE * 3 + DYNAMIC_RECORD_SIZE,size);
  }
  private String string(  int length){
    return random.nextAlphaNumericString(length,length);
  }
  private PropertyValueRecordSizeCalculator newCalculator(){
    return new PropertyValueRecordSizeCalculator(PROPERTY_RECORD_SIZE,DYNAMIC_RECORD_SIZE,DYNAMIC_RECORD_SIZE - 10,DYNAMIC_RECORD_SIZE,DYNAMIC_RECORD_SIZE - 10);
  }
}
