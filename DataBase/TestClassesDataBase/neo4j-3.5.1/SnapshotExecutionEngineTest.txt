public class SnapshotExecutionEngineTest {
  @Rule public final DatabaseRule database=new ImpermanentDatabaseRule();
  private CompilerFactory compilerFactory;
  private TestSnapshotExecutionEngine executionEngine;
  private VersionContext versionContext;
  private SnapshotExecutionEngine.ParametrizedQueryExecutor executor;
  private TransactionalContext transactionalContext;
  private final Config config=Config.defaults();
  @Before public void setUp() throws Exception {
    GraphDatabaseQueryService cypherService=new GraphDatabaseCypherService(this.database.getGraphDatabaseAPI());
    compilerFactory=mock(CompilerFactory.class);
    transactionalContext=mock(TransactionalContext.class);
    KernelStatement kernelStatement=mock(KernelStatement.class);
    executor=mock(SnapshotExecutionEngine.ParametrizedQueryExecutor.class);
    versionContext=mock(VersionContext.class);
    executionEngine=createExecutionEngine(cypherService);
    when(kernelStatement.getVersionContext()).thenReturn(versionContext);
    when(transactionalContext.statement()).thenReturn(kernelStatement);
    Result result=mock(Result.class);
    QueryStatistics statistics=mock(QueryStatistics.class);
    when(result.getQueryStatistics()).thenReturn(statistics);
    when(executor.execute(any(),anyMap(),any())).thenReturn(result);
  }
  @Test public void executeQueryWithoutRetries() throws QueryExecutionKernelException {
    executionEngine.executeWithRetries("query",Collections.emptyMap(),transactionalContext,executor);
    verify(executor,times(1)).execute(any(),anyMap(),any());
    verify(versionContext,times(1)).initRead();
  }
  @Test public void executeQueryAfterSeveralRetries() throws QueryExecutionKernelException {
    when(versionContext.isDirty()).thenReturn(true,true,false);
    executionEngine.executeWithRetries("query",Collections.emptyMap(),transactionalContext,executor);
    verify(executor,times(3)).execute(any(),anyMap(),any());
    verify(versionContext,times(3)).initRead();
  }
  @Test public void failQueryAfterMaxRetriesReached() throws QueryExecutionKernelException {
    when(versionContext.isDirty()).thenReturn(true);
    try {
      executionEngine.executeWithRetries("query",Collections.emptyMap(),transactionalContext,executor);
    }
 catch (    QueryExecutionKernelException e) {
      assertEquals("Unable to get clean data snapshot for query 'query' after 5 attempts.",e.getMessage());
    }
    verify(executor,times(5)).execute(any(),anyMap(),any());
    verify(versionContext,times(5)).initRead();
  }
private class TestSnapshotExecutionEngine extends SnapshotExecutionEngine {
    TestSnapshotExecutionEngine(    GraphDatabaseQueryService queryService,    Config config,    LogProvider logProvider,    CompilerFactory compatibilityFactory){
      super(queryService,config,logProvider,compatibilityFactory);
    }
    @Override public <T>Result executeWithRetries(    String query,    T parameters,    TransactionalContext context,    ParametrizedQueryExecutor<T> executor) throws QueryExecutionKernelException {
      return super.executeWithRetries(query,parameters,context,executor);
    }
  }
  private TestSnapshotExecutionEngine createExecutionEngine(  GraphDatabaseQueryService cypherService){
    return new TestSnapshotExecutionEngine(cypherService,config,NullLogProvider.getInstance(),compilerFactory);
  }
}
