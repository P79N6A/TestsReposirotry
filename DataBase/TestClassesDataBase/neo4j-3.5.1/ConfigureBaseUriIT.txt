public class ConfigureBaseUriIT extends AbstractRestFunctionalTestBase {
  private static FunctionalTestHelper functionalTestHelper;
  @BeforeClass public static void setupServer(){
    functionalTestHelper=new FunctionalTestHelper(server());
  }
  @Test public void shouldForwardHttpAndHost() throws Exception {
    URI rootUri=functionalTestHelper.baseUri();
    HttpClient httpclient=new DefaultHttpClient();
    try {
      HttpGet httpget=new HttpGet(rootUri);
      httpget.setHeader("Accept","application/json");
      httpget.setHeader("X-Forwarded-Host","foobar.com");
      httpget.setHeader("X-Forwarded-Proto","http");
      HttpResponse response=httpclient.execute(httpget);
      String length=response.getHeaders("CONTENT-LENGTH")[0].getValue();
      byte[] data=new byte[Integer.valueOf(length)];
      response.getEntity().getContent().read(data);
      String responseEntityBody=new String(data);
      assertTrue(responseEntityBody.contains("http://foobar.com"));
      assertFalse(responseEntityBody.contains("http://localhost"));
    }
  finally {
      httpclient.getConnectionManager().shutdown();
    }
  }
  @Test public void shouldForwardHttpsAndHost() throws Exception {
    URI rootUri=functionalTestHelper.baseUri();
    HttpClient httpclient=new DefaultHttpClient();
    try {
      HttpGet httpget=new HttpGet(rootUri);
      httpget.setHeader("Accept","application/json");
      httpget.setHeader("X-Forwarded-Host","foobar.com");
      httpget.setHeader("X-Forwarded-Proto","https");
      HttpResponse response=httpclient.execute(httpget);
      String length=response.getHeaders("CONTENT-LENGTH")[0].getValue();
      byte[] data=new byte[Integer.valueOf(length)];
      response.getEntity().getContent().read(data);
      String responseEntityBody=new String(data);
      assertTrue(responseEntityBody.contains("https://foobar.com"));
      assertFalse(responseEntityBody.contains("https://localhost"));
    }
  finally {
      httpclient.getConnectionManager().shutdown();
    }
  }
  @Test public void shouldForwardHttpAndHostOnDifferentPort() throws Exception {
    URI rootUri=functionalTestHelper.baseUri();
    HttpClient httpclient=new DefaultHttpClient();
    try {
      HttpGet httpget=new HttpGet(rootUri);
      httpget.setHeader("Accept","application/json");
      httpget.setHeader("X-Forwarded-Host","foobar.com:9999");
      httpget.setHeader("X-Forwarded-Proto","http");
      HttpResponse response=httpclient.execute(httpget);
      String length=response.getHeaders("CONTENT-LENGTH")[0].getValue();
      byte[] data=new byte[Integer.valueOf(length)];
      response.getEntity().getContent().read(data);
      String responseEntityBody=new String(data);
      assertTrue(responseEntityBody.contains("http://foobar.com:9999"));
      assertFalse(responseEntityBody.contains("http://localhost"));
    }
  finally {
      httpclient.getConnectionManager().shutdown();
    }
  }
  @Test public void shouldForwardHttpAndFirstHost() throws Exception {
    URI rootUri=functionalTestHelper.baseUri();
    HttpClient httpclient=new DefaultHttpClient();
    try {
      HttpGet httpget=new HttpGet(rootUri);
      httpget.setHeader("Accept","application/json");
      httpget.setHeader("X-Forwarded-Host","foobar.com, bazbar.com");
      httpget.setHeader("X-Forwarded-Proto","http");
      HttpResponse response=httpclient.execute(httpget);
      String length=response.getHeaders("CONTENT-LENGTH")[0].getValue();
      byte[] data=new byte[Integer.valueOf(length)];
      response.getEntity().getContent().read(data);
      String responseEntityBody=new String(data);
      assertTrue(responseEntityBody.contains("http://foobar.com"));
      assertFalse(responseEntityBody.contains("http://localhost"));
    }
  finally {
      httpclient.getConnectionManager().shutdown();
    }
  }
  @Test public void shouldForwardHttpsAndHostOnDifferentPort() throws Exception {
    URI rootUri=functionalTestHelper.baseUri();
    HttpClient httpclient=new DefaultHttpClient();
    try {
      HttpGet httpget=new HttpGet(rootUri);
      httpget.setHeader("Accept","application/json");
      httpget.setHeader("X-Forwarded-Host","foobar.com:9999");
      httpget.setHeader("X-Forwarded-Proto","https");
      HttpResponse response=httpclient.execute(httpget);
      String length=response.getHeaders("CONTENT-LENGTH")[0].getValue();
      byte[] data=new byte[Integer.valueOf(length)];
      response.getEntity().getContent().read(data);
      String responseEntityBody=new String(data);
      assertTrue(responseEntityBody.contains("https://foobar.com:9999"));
      assertFalse(responseEntityBody.contains("https://localhost"));
    }
  finally {
      httpclient.getConnectionManager().shutdown();
    }
  }
  @Test public void shouldUseRequestUriWhenNoXForwardHeadersPresent() throws Exception {
    URI rootUri=functionalTestHelper.baseUri();
    HttpClient httpclient=new DefaultHttpClient();
    try {
      HttpGet httpget=new HttpGet(rootUri);
      httpget.setHeader("Accept","application/json");
      HttpResponse response=httpclient.execute(httpget);
      String length=response.getHeaders("CONTENT-LENGTH")[0].getValue();
      byte[] data=new byte[Integer.valueOf(length)];
      response.getEntity().getContent().read(data);
      String responseEntityBody=new String(data);
      assertFalse(responseEntityBody.contains("https://foobar.com"));
      assertFalse(responseEntityBody.contains(":0"));
      assertTrue(responseEntityBody.contains("http://localhost"));
    }
  finally {
      httpclient.getConnectionManager().shutdown();
    }
  }
}
