public class TestCleanupRule {
  @Test public void shouldCleanupAutoCloseable() throws Throwable {
    CleanupRule rule=new CleanupRule();
    AutoCloseable toClose=rule.add(mock(AutoCloseable.class));
    simulateTestExecution(rule);
    verify(toClose).close();
  }
  @Test public void shouldCleanupObjectWithAppropriateCloseMethod() throws Throwable {
    CleanupRule rule=new CleanupRule();
    Dirt toClose=rule.add(mock(Dirt.class));
    simulateTestExecution(rule);
    verify(toClose).shutdown();
  }
  @Test public void shouldCleanupMultipleObjectsInReverseAddedOrder() throws Throwable {
    CleanupRule rule=new CleanupRule();
    AutoCloseable closeable=rule.add(mock(AutoCloseable.class));
    Dirt dirt=rule.add(mock(Dirt.class));
    simulateTestExecution(rule);
    InOrder inOrder=inOrder(dirt,closeable);
    inOrder.verify(dirt,times(1)).shutdown();
    inOrder.verify(closeable,times(1)).close();
  }
  @Test public void shouldTellUserIllegalArgumentIfSo(){
    CleanupRule rule=new CleanupRule();
    try {
      rule.add(new Object());
      fail("Should not accept this object");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  private void simulateTestExecution(  CleanupRule rule) throws Throwable {
    rule.apply(new Statement(){
      @Override public void evaluate(){
      }
    }
,null).evaluate();
  }
private interface Dirt {
    void shutdown();
  }
}
