public class AdvertisedAddressSettingsTest {
  private static Setting<ListenSocketAddress> listen_address_setting=listenAddress("listen_address",1234);
  private static Setting<AdvertisedSocketAddress> advertised_address_setting=advertisedAddress("advertised_address",listen_address_setting);
  @Test public void shouldParseExplicitSettingValueWhenProvided(){
    Map<String,String> config=stringMap(GraphDatabaseSettings.default_advertised_address.name(),"server1.example.com",advertised_address_setting.name(),"server1.internal:4000");
    AdvertisedSocketAddress advertisedSocketAddress=advertised_address_setting.apply(config::get);
    assertEquals("server1.internal",advertisedSocketAddress.getHostname());
    assertEquals(4000,advertisedSocketAddress.getPort());
  }
  @Test public void shouldCombineDefaultHostnameWithPortFromListenAddressSettingWhenNoValueProvided(){
    Map<String,String> config=stringMap(GraphDatabaseSettings.default_advertised_address.name(),"server1.example.com");
    AdvertisedSocketAddress advertisedSocketAddress=advertised_address_setting.apply(config::get);
    assertEquals("server1.example.com",advertisedSocketAddress.getHostname());
    assertEquals(1234,advertisedSocketAddress.getPort());
  }
  @Test public void shouldCombineDefaultHostnameWithExplicitPortWhenOnlyAPortProvided(){
    Map<String,String> config=stringMap(GraphDatabaseSettings.default_advertised_address.name(),"server1.example.com",advertised_address_setting.name(),":4000");
    AdvertisedSocketAddress advertisedSocketAddress=advertised_address_setting.apply(config::get);
    assertEquals("server1.example.com",advertisedSocketAddress.getHostname());
    assertEquals(4000,advertisedSocketAddress.getPort());
  }
}
