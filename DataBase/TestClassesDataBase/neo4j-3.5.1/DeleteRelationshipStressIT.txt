public class DeleteRelationshipStressIT {
  private final ExecutorService executorService=Executors.newFixedThreadPool(10);
  @Rule public ImpermanentDatabaseRule db=new ImpermanentDatabaseRule();
  @Before public void setup(){
    for (int i=0; i < 100; i++) {
      try (Transaction tx=db.beginTx()){
        Node prev=null;
        for (int j=0; j < 100; j++) {
          Node node=db.createNode(label("L"));
          if (prev != null) {
            Relationship rel=prev.createRelationshipTo(node,RelationshipType.withName("T"));
            rel.setProperty("prop",i + j);
          }
          prev=node;
        }
        tx.success();
      }
     }
  }
  @After public void tearDown(){
    executorService.shutdown();
  }
  @Test public void shouldBeAbleToReturnRelsWhileDeletingRelationship() throws InterruptedException, ExecutionException {
    Future query1=executeInThread("MATCH (:L)-[r:T {prop:42}]-(:L) OPTIONAL MATCH (:L)-[:T {prop:1337}]-(:L) WITH r MATCH ()-[r]-() return r");
    Future query2=executeInThread("MATCH (:L)-[r:T {prop:42}]-(:L) DELETE r");
    query1.get();
    query2.get();
  }
  @Test public void shouldBeAbleToGetPropertyWhileDeletingRelationship() throws InterruptedException, ExecutionException {
    Future query1=executeInThread("MATCH (:L)-[r:T {prop:42}]-(:L) OPTIONAL MATCH (:L)-[:T {prop:1337}]-(:L) WITH r MATCH ()-[r]-() return r.prop");
    Future query2=executeInThread("MATCH (:L)-[r:T {prop:42}]-(:L) DELETE r");
    query1.get();
    query2.get();
  }
  @Test public void shouldBeAbleToCheckPropertiesWhileDeletingRelationship() throws InterruptedException, ExecutionException {
    Future query1=executeInThread("MATCH (:L)-[r:T {prop:42}]-(:L) OPTIONAL MATCH (:L)-[:T {prop:1337}]-(:L) WITH r MATCH ()-[r]-() return exists(r.prop)");
    Future query2=executeInThread("MATCH (:L)-[r:T {prop:42}]-(:L) DELETE r");
    query1.get();
    query2.get();
  }
  @Test public void shouldBeAbleToRemovePropertiesWhileDeletingRelationship() throws InterruptedException, ExecutionException {
    Future query1=executeInThread("MATCH (:L)-[r:T {prop:42}]-(:L) OPTIONAL MATCH (:L)-[:T {prop:1337}]-(:L) WITH r MATCH ()-[r]-() REMOVE r.prop");
    Future query2=executeInThread("MATCH (:L)-[r:T {prop:42}]-(:L) DELETE r");
    query1.get();
    query2.get();
  }
  @Test public void shouldBeAbleToSetPropertiesWhileDeletingRelationship() throws InterruptedException, ExecutionException {
    Future query1=executeInThread("MATCH (:L)-[r:T {prop:42}]-(:L) OPTIONAL MATCH (:L)-[:T {prop:1337}]-(:L) WITH r MATCH ()-[r]-() SET r.foo = 'bar'");
    Future query2=executeInThread("MATCH (:L)-[r:T {prop:42}]-(:L) DELETE r");
    query1.get();
    query2.get();
  }
  private Future executeInThread(  final String query){
    return executorService.submit(() -> db.execute(query).resultAsString());
  }
}
