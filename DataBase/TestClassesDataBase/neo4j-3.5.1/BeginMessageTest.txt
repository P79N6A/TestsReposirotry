class BeginMessageTest {
  @Test void shouldParseEmptyTransactionMetadataCorrectly() throws Throwable {
    BeginMessage message=new BeginMessage();
    assertNull(message.transactionMetadata());
  }
  @Test void shouldThrowExceptionIfFailedToParseTransactionMetadataCorrectly() throws Throwable {
    Map<String,Object> msgMetadata=map("tx_metadata","invalid value type");
    MapValue meta=ValueUtils.asMapValue(msgMetadata);
    BoltIOException exception=assertThrows(BoltIOException.class,() -> new BeginMessage(meta));
    assertThat(exception.getMessage(),startsWith("Expecting transaction metadata value to be a Map value"));
  }
  @Test void shouldParseTransactionMetadataCorrectly() throws Throwable {
    Map<String,Object> txMetadata=map("creation-time",Duration.ofMillis(4321L));
    Map<String,Object> msgMetadata=map("tx_metadata",txMetadata);
    MapValue meta=ValueUtils.asMapValue(msgMetadata);
    BeginMessage beginMessage=new BeginMessage(meta);
    assertThat(beginMessage.transactionMetadata().toString(),equalTo(txMetadata.toString()));
  }
  @Test void shouldThrowExceptionIfFailedToParseTransactionTimeoutCorrectly() throws Throwable {
    Map<String,Object> msgMetadata=map("tx_timeout","invalid value type");
    MapValue meta=ValueUtils.asMapValue(msgMetadata);
    BoltIOException exception=assertThrows(BoltIOException.class,() -> new BeginMessage(meta));
    assertThat(exception.getMessage(),startsWith("Expecting transaction timeout value to be a Long value"));
  }
  @Test void shouldParseTransactionTimeoutCorrectly() throws Throwable {
    Map<String,Object> msgMetadata=map("tx_timeout",123456L);
    MapValue meta=ValueUtils.asMapValue(msgMetadata);
    BeginMessage beginMessage=new BeginMessage(meta);
    assertThat(beginMessage.transactionTimeout().toMillis(),equalTo(123456L));
  }
}
