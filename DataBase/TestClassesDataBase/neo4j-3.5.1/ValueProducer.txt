private abstract static class ValueProducer<T extends PrimitiveCollection> {
  private final Class<T> applicableType;
  ValueProducer(  Class<T> applicableType){
    this.applicableType=applicableType;
  }
  public boolean isApplicable(  Factory<? extends PrimitiveCollection> factory){
    try (PrimitiveCollection coll=factory.newInstance()){
      return applicableType.isInstance(coll);
    }
   }
  public abstract Value<T> randomValue();
}
