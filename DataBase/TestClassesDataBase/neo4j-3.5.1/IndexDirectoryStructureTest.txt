public class IndexDirectoryStructureTest {
  private final IndexProviderDescriptor provider=new IndexProviderDescriptor("test","0.5");
  private final File databaseStoreDir=new File("db").getAbsoluteFile();
  private final File baseIndexDirectory=baseSchemaIndexFolder(databaseStoreDir);
  private final long indexId=15;
  @Test public void shouldSeeCorrectDirectoriesForProviderKey(){
    assertCorrectDirectories(directoriesByProviderKey(databaseStoreDir).forProvider(provider),path(baseIndexDirectory,provider.getKey()),path(baseIndexDirectory,provider.getKey(),String.valueOf(indexId)));
  }
  @Test public void shouldSeeCorrectDirectoriesForProvider(){
    assertCorrectDirectories(directoriesByProvider(databaseStoreDir).forProvider(provider),path(baseIndexDirectory,provider.getKey() + "-" + provider.getVersion()),path(baseIndexDirectory,provider.getKey() + "-" + provider.getVersion(),String.valueOf(indexId)));
  }
  @Test public void shouldSeeCorrectDirectoriesForSubProvider(){
    IndexDirectoryStructure parentStructure=directoriesByProvider(databaseStoreDir).forProvider(provider);
    IndexProviderDescriptor subProvider=new IndexProviderDescriptor("sub","0.3");
    assertCorrectDirectories(directoriesBySubProvider(parentStructure).forProvider(subProvider),path(baseIndexDirectory,provider.getKey() + "-" + provider.getVersion()),path(baseIndexDirectory,provider.getKey() + "-" + provider.getVersion(),String.valueOf(indexId),subProvider.getKey() + "-" + subProvider.getVersion()));
  }
  @Test public void shouldHandleWeirdCharactersInProviderKey(){
    IndexProviderDescriptor providerWithWeirdName=new IndexProviderDescriptor("native+lucene","1.0");
    assertCorrectDirectories(directoriesByProvider(databaseStoreDir).forProvider(providerWithWeirdName),path(baseIndexDirectory,"native_lucene-1.0"),path(baseIndexDirectory,"native_lucene-1.0",String.valueOf(indexId)));
  }
  private void assertCorrectDirectories(  IndexDirectoryStructure directoryStructure,  File expectedRootDirectory,  File expectedIndexDirectory){
    File rootDirectory=directoryStructure.rootDirectory();
    File indexDirectory=directoryStructure.directoryForIndex(indexId);
    assertEquals(expectedRootDirectory,rootDirectory);
    assertEquals(expectedIndexDirectory,indexDirectory);
  }
}
