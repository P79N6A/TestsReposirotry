/** 
 * This test is disabled by default and not executed directly by test runner. It will be executed by a specific test executor as part of extensions lifecycle testing.
 * @see TestDirectoryExtensionTest#failedTestShouldKeepDirectory()
 */
@ExtendWith({DefaultFileSystemExtension.class,TestDirectoryExtension.class}) @ExtendWith(DirectoryExtensionLifecycleVerificationTest.ConfigurationParameterCondition.class) class DirectoryExtensionLifecycleVerificationTest {
  @Inject private TestDirectory directory;
  @Test void executeAndCleanupDirectory(){
    File file=directory.createFile("a");
    assertTrue(file.exists());
    CONTEXT.setValue(SUCCESSFUL_TEST_FILE_KEY,file);
  }
  @Test void failAndKeepDirectory(){
    File file=directory.createFile("b");
    CONTEXT.setValue(FAILED_TEST_FILE_KEY,file);
    throw new RuntimeException("simulate test failure");
  }
  @Test void lockFileAndFailToDeleteDirectory(){
    File nonDeletableDirectory=directory.directory("c");
    CONTEXT.setValue(LOCKED_TEST_FILE_KEY,nonDeletableDirectory);
    assertTrue(nonDeletableDirectory.setReadable(false,false));
  }
static class ConfigurationParameterCondition implements ExecutionCondition {
    static final String TEST_TOGGLE="testToggle";
    @Override public ConditionEvaluationResult evaluateExecutionCondition(    ExtensionContext context){
      Optional<String> option=context.getConfigurationParameter(TEST_TOGGLE);
      return option.map(ConditionEvaluationResult::enabled).orElseGet(() -> disabled("configuration parameter not present"));
    }
  }
}
