public class TestDirectoryExtension extends StatefullFieldExtension<TestDirectory> implements BeforeEachCallback, AfterEachCallback, AfterAllCallback {
  static final String TEST_DIRECTORY="testDirectory";
  static final Namespace TEST_DIRECTORY_NAMESPACE=Namespace.create(TEST_DIRECTORY);
  @Override public void beforeEach(  ExtensionContext context) throws Exception {
    TestDirectory testDirectory=getStoredValue(context);
    testDirectory.prepareDirectory(context.getRequiredTestClass(),context.getRequiredTestMethod().getName());
  }
  @Override public void afterEach(  ExtensionContext context){
    TestDirectory testDirectory=getStoredValue(context);
    try {
      testDirectory.complete(!context.getExecutionException().isPresent());
    }
 catch (    Exception e) {
      throw new JUnitException(format("Fail to cleanup test directory for %s test.",context.getDisplayName()),e);
    }
  }
  @Override protected String getFieldKey(){
    return TEST_DIRECTORY;
  }
  @Override protected Class<TestDirectory> getFieldType(){
    return TestDirectory.class;
  }
  @Override protected TestDirectory createField(  ExtensionContext extensionContext){
    ExtensionContext.Store fileSystemStore=getStore(extensionContext,FileSystemExtension.FILE_SYSTEM_NAMESPACE);
    FileSystemAbstraction fileSystemAbstraction=fileSystemStore.get(FileSystemExtension.FILE_SYSTEM,FileSystemAbstraction.class);
    return fileSystemAbstraction != null ? testDirectory(fileSystemAbstraction) : testDirectory();
  }
  @Override protected Namespace getNameSpace(){
    return TEST_DIRECTORY_NAMESPACE;
  }
}
