@RunWith(Parameterized.class) public class ByteArrayTest extends NumberArrayPageCacheTestSupport {
  private static final byte[] DEFAULT=new byte[50];
  private static final int LENGTH=1_000;
  private static Fixture fixture;
  @Parameters public static Collection<Supplier<ByteArray>> data() throws IOException {
    fixture=prepareDirectoryAndPageCache(ByteArrayTest.class);
    PageCache pageCache=fixture.pageCache;
    File dir=fixture.directory;
    NumberArrayFactory autoWithPageCacheFallback=auto(pageCache,dir,true,NO_MONITOR);
    NumberArrayFactory pageCacheArrayFactory=new PageCachedNumberArrayFactory(pageCache,dir);
    int chunkSize=LENGTH / ChunkedNumberArrayFactory.MAGIC_CHUNK_COUNT;
    return Arrays.asList(() -> HEAP.newByteArray(LENGTH,DEFAULT),() -> HEAP.newDynamicByteArray(chunkSize,DEFAULT),() -> OFF_HEAP.newByteArray(LENGTH,DEFAULT),() -> OFF_HEAP.newDynamicByteArray(chunkSize,DEFAULT),() -> AUTO_WITHOUT_PAGECACHE.newByteArray(LENGTH,DEFAULT),() -> AUTO_WITHOUT_PAGECACHE.newDynamicByteArray(chunkSize,DEFAULT),() -> autoWithPageCacheFallback.newByteArray(LENGTH,DEFAULT),() -> autoWithPageCacheFallback.newDynamicByteArray(chunkSize,DEFAULT),() -> pageCacheArrayFactory.newByteArray(LENGTH,DEFAULT),() -> pageCacheArrayFactory.newDynamicByteArray(chunkSize,DEFAULT));
  }
  @AfterClass public static void closeFixture() throws Exception {
    fixture.close();
  }
  @Parameter public Supplier<ByteArray> factory;
  private ByteArray array;
  @Before public void before(){
    array=factory.get();
  }
  @After public void after(){
    array.close();
  }
  @Test public void shouldSetAndGetBasicTypes(){
    int index=0;
    byte[] actualBytes=new byte[DEFAULT.length];
    byte[] expectedBytes=new byte[actualBytes.length];
    ThreadLocalRandom.current().nextBytes(actualBytes);
    int len=LENGTH - 1;
    for (int i=0; i < len; i++) {
      try {
        setSimpleValues(index);
        setArray(index + 1,actualBytes);
        verifySimpleValues(index);
        verifyArray(index + 1,actualBytes,expectedBytes);
      }
 catch (      Throwable throwable) {
        throw new AssertionError("Failure at index " + i,throwable);
      }
    }
  }
  private void setSimpleValues(  int index){
    array.setByte(index,0,(byte)123);
    array.setShort(index,1,(short)1234);
    array.setInt(index,5,12345);
    array.setLong(index,9,Long.MAX_VALUE - 100);
    array.set3ByteInt(index,17,0b10101010_10101010_10101010);
    array.set5ByteLong(index,20,0b10101010_10101010_10101010_10101010_10101010L);
    array.set6ByteLong(index,25,0b10101010_10101010_10101010_10101010_10101010_10101010L);
  }
  private void verifySimpleValues(  int index){
    assertEquals((byte)123,array.getByte(index,0));
    assertEquals((short)1234,array.getShort(index,1));
    assertEquals(12345,array.getInt(index,5));
    assertEquals(Long.MAX_VALUE - 100,array.getLong(index,9));
    assertEquals(0b10101010_10101010_10101010,array.get3ByteInt(index,17));
    assertEquals(0b10101010_10101010_10101010_10101010_10101010L,array.get5ByteLong(index,20));
    assertEquals(0b10101010_10101010_10101010_10101010_10101010_10101010L,array.get6ByteLong(index,25));
  }
  private void setArray(  int index,  byte[] bytes){
    array.set(index,bytes);
  }
  private void verifyArray(  int index,  byte[] actualBytes,  byte[] scratchBuffer){
    array.get(index,scratchBuffer);
    assertArrayEquals(actualBytes,scratchBuffer);
  }
  @Test public void shouldDetectMinusOneFor3ByteInts(){
    array.set3ByteInt(10,2,-1);
    array.set3ByteInt(10,5,-1);
    assertEquals(-1L,array.get3ByteInt(10,2));
    assertEquals(-1L,array.get3ByteInt(10,5));
  }
  @Test public void shouldDetectMinusOneFor5ByteLongs(){
    array.set5ByteLong(10,2,-1);
    array.set5ByteLong(10,7,-1);
    assertEquals(-1L,array.get5ByteLong(10,2));
    assertEquals(-1L,array.get5ByteLong(10,7));
  }
  @Test public void shouldDetectMinusOneFor6ByteLongs(){
    array.set6ByteLong(10,2,-1);
    array.set6ByteLong(10,8,-1);
    assertEquals(-1L,array.get6ByteLong(10,2));
    assertEquals(-1L,array.get6ByteLong(10,8));
  }
  @Test public void shouldHandleMultipleCallsToClose(){
    array.close();
    array.close();
  }
}
