public class StatementLocksFactorySelectorTest {
  @Test public void loadSimpleStatementLocksFactoryWhenNoServices(){
    Locks locks=mock(Locks.class);
    Locks.Client locksClient=mock(Client.class);
    when(locks.newClient()).thenReturn(locksClient);
    StatementLocksFactorySelector loader=newLoader(locks);
    StatementLocksFactory factory=loader.select();
    StatementLocks statementLocks=factory.newInstance();
    assertThat(factory,instanceOf(SimpleStatementLocksFactory.class));
    assertThat(statementLocks,instanceOf(SimpleStatementLocks.class));
    assertSame(locksClient,statementLocks.optimistic());
    assertSame(locksClient,statementLocks.pessimistic());
  }
  @Test public void loadSingleAvailableFactory(){
    Locks locks=mock(Locks.class);
    StatementLocksFactory factory=mock(StatementLocksFactory.class);
    StatementLocksFactorySelector loader=newLoader(locks,factory);
    StatementLocksFactory loadedFactory=loader.select();
    assertSame(factory,loadedFactory);
    verify(factory).initialize(same(locks),any(Config.class));
  }
  @Test public void throwWhenMultipleFactoriesLoaded(){
    TestStatementLocksFactorySelector loader=newLoader(mock(Locks.class),mock(StatementLocksFactory.class),mock(StatementLocksFactory.class),mock(StatementLocksFactory.class));
    try {
      loader.select();
    }
 catch (    Exception e) {
      assertThat(e,instanceOf(IllegalStateException.class));
    }
  }
  private static TestStatementLocksFactorySelector newLoader(  Locks locks,  StatementLocksFactory... factories){
    return new TestStatementLocksFactorySelector(locks,Config.defaults(),NullLogService.getInstance(),factories);
  }
private static class TestStatementLocksFactorySelector extends StatementLocksFactorySelector {
    private final List<StatementLocksFactory> factories;
    TestStatementLocksFactorySelector(    Locks locks,    Config config,    LogService logService,    StatementLocksFactory... factories){
      super(locks,config,logService);
      this.factories=Arrays.asList(factories);
    }
    @Override List<StatementLocksFactory> serviceLoadFactories(){
      return factories;
    }
  }
}
