public static class Response {
  private final ClientResponse response;
  private final String entity;
  public Response(  ClientResponse response){
    this.response=sanityCheck(response);
    this.entity=response.getEntity(String.class);
  }
  public int status(){
    return response.getStatus();
  }
  public String location(){
    if (response.getLocation() != null) {
      return response.getLocation().toString();
    }
    throw new RuntimeException("The request did not contain a location header, " + "unable to provide location. Status code was: " + status());
  }
  @SuppressWarnings("unchecked") public <T>T content(){
    try {
      return (T)JsonHelper.readJson(entity);
    }
 catch (    JsonParseException e) {
      throw new RuntimeException("Unable to deserialize: " + entity,e);
    }
  }
  public String rawContent(){
    return entity;
  }
  public String stringFromContent(  String key) throws JsonParseException {
    return get(key).asText();
  }
  public JsonNode get(  String fieldName) throws JsonParseException {
    return JsonHelper.jsonNode(entity).get(fieldName);
  }
  public String header(  String name){
    return response.getHeaders().getFirst(name);
  }
  @Override public String toString(){
    StringBuilder sb=new StringBuilder();
    sb.append("HTTP ").append(response.getStatus()).append("\n");
    for (    Map.Entry<String,List<String>> header : response.getHeaders().entrySet()) {
      for (      String headerEntry : header.getValue()) {
        sb.append(header.getKey() + ": ").append(headerEntry).append("\n");
      }
    }
    sb.append("\n");
    sb.append(entity).append("\n");
    return sb.toString();
  }
}
