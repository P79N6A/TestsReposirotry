public class IndexRestartIT {
  @Rule public final EphemeralFileSystemRule fs=new EphemeralFileSystemRule();
  private GraphDatabaseService db;
  private TestGraphDatabaseFactory factory;
  private final ControlledPopulationIndexProvider provider=new ControlledPopulationIndexProvider();
  private final Label myLabel=label("MyLabel");
  @Before public void before(){
    factory=new TestGraphDatabaseFactory();
    factory.setFileSystem(new UncloseableDelegatingFileSystemAbstraction(fs.get()));
    factory.setKernelExtensions(Collections.singletonList(singleInstanceIndexProviderFactory("test",provider)));
  }
  @After public void after(){
    db.shutdown();
  }
  @Test public void shouldBeAbleToDropIndexWhileItIsPopulating(){
    startDb();
    DoubleLatch populationCompletionLatch=provider.installPopulationJobCompletionLatch();
    IndexDefinition index=createIndex();
    populationCompletionLatch.waitForAllToStart();
    dropIndex(index,populationCompletionLatch);
    assertThat(getIndexes(db,myLabel),inTx(db,hasSize(0)));
    try {
      getIndexState(db,index);
      fail("This index should have been deleted");
    }
 catch (    NotFoundException e) {
      assertThat(e.getMessage(),CoreMatchers.containsString(myLabel.name()));
    }
  }
  @Test public void shouldHandleRestartOfOnlineIndex(){
    startDb();
    createIndex();
    provider.awaitFullyPopulated();
    stopDb();
    provider.setInitialIndexState(ONLINE);
    startDb();
    assertThat(getIndexes(db,myLabel),inTx(db,haveState(db,Schema.IndexState.ONLINE)));
    assertEquals(1,provider.populatorCallCount.get());
    assertEquals(2,provider.writerCallCount.get());
  }
  @Test public void shouldHandleRestartIndexThatHasNotComeOnlineYet(){
    startDb();
    createIndex();
    stopDb();
    provider.setInitialIndexState(POPULATING);
    startDb();
    assertThat(getIndexes(db,myLabel),inTx(db,not(haveState(db,Schema.IndexState.FAILED))));
    assertEquals(2,provider.populatorCallCount.get());
  }
  private IndexDefinition createIndex(){
    try (Transaction tx=db.beginTx()){
      IndexDefinition index=db.schema().indexFor(myLabel).on("number_of_bananas_owned").create();
      tx.success();
      return index;
    }
   }
  private void dropIndex(  IndexDefinition index,  DoubleLatch populationCompletionLatch){
    try (Transaction tx=db.beginTx()){
      index.drop();
      populationCompletionLatch.finish();
      tx.success();
    }
   }
  private void startDb(){
    if (db != null) {
      db.shutdown();
    }
    db=factory.newImpermanentDatabaseBuilder().setConfig(default_schema_provider,provider.getProviderDescriptor().name()).newGraphDatabase();
  }
  private void stopDb(){
    if (db != null) {
      db.shutdown();
    }
  }
}
