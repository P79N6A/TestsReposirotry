public class SetInitialPasswordCommandTest {
  private SetInitialPasswordCommand setPasswordCommand;
  private File authInitFile;
  private File authFile;
  private FileSystemAbstraction fileSystem;
  private final EphemeralFileSystemRule fileSystemRule=new EphemeralFileSystemRule();
  private final TestDirectory testDir=TestDirectory.testDirectory(fileSystemRule.get());
  @Rule public final RuleChain ruleChain=RuleChain.outerRule(fileSystemRule).around(testDir);
  @Before public void setup(){
    fileSystem=fileSystemRule.get();
    OutsideWorld mock=mock(OutsideWorld.class);
    when(mock.fileSystem()).thenReturn(fileSystem);
    setPasswordCommand=new SetInitialPasswordCommand(testDir.directory("home").toPath(),testDir.directory("conf").toPath(),mock);
    authInitFile=CommunitySecurityModule.getInitialUserRepositoryFile(setPasswordCommand.loadNeo4jConfig());
    CommunitySecurityModule.getUserRepositoryFile(setPasswordCommand.loadNeo4jConfig());
  }
  @Test public void shouldFailSetPasswordWithNoArguments(){
    assertException(() -> setPasswordCommand.execute(new String[0]),IncorrectUsage.class,"not enough arguments");
  }
  @Test public void shouldFailSetPasswordWithTooManyArguments(){
    String[] arguments={"","123","321"};
    assertException(() -> setPasswordCommand.execute(arguments),IncorrectUsage.class,"unrecognized arguments: '123 321'");
  }
  @Test public void shouldSetInitialPassword() throws Throwable {
    assertFalse(fileSystem.fileExists(authInitFile));
    String[] arguments={"123"};
    setPasswordCommand.execute(arguments);
    assertAuthIniFile("123");
  }
  @Test public void shouldOverwriteInitialPasswordFileIfExists() throws Throwable {
    fileSystem.mkdirs(authInitFile.getParentFile());
    fileSystem.create(authInitFile);
    String[] arguments={"123"};
    setPasswordCommand.execute(arguments);
    assertAuthIniFile("123");
  }
  @Test public void shouldWorkAlsoWithSamePassword() throws Throwable {
    String[] arguments={"neo4j"};
    setPasswordCommand.execute(arguments);
    assertAuthIniFile("neo4j");
  }
  @Test public void shouldPrintNiceHelp() throws Throwable {
    try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
      PrintStream ps=new PrintStream(baos);
      Usage usage=new Usage("neo4j-admin",mock(CommandLocator.class));
      usage.printUsageForCommand(new SetInitialPasswordCommandProvider(),ps::println);
      assertEquals(String.format("usage: neo4j-admin set-initial-password <password>%n" + "%n" + "environment variables:%n"+ "    NEO4J_CONF    Path to directory which contains neo4j.conf.%n"+ "    NEO4J_DEBUG   Set to anything to enable debug output.%n"+ "    NEO4J_HOME    Neo4j home directory.%n"+ "    HEAP_SIZE     Set JVM maximum heap size during command execution.%n"+ "                  Takes a number and a unit, for example 512m.%n"+ "%n"+ "Sets the initial password of the initial admin user ('neo4j').%n"),baos.toString());
    }
   }
  private void assertAuthIniFile(  String password) throws Throwable {
    assertTrue(fileSystem.fileExists(authInitFile));
    FileUserRepository userRepository=new FileUserRepository(fileSystem,authInitFile,NullLogProvider.getInstance());
    userRepository.start();
    User neo4j=userRepository.getUserByName(UserManager.INITIAL_USER_NAME);
    assertNotNull(neo4j);
    assertTrue(neo4j.credentials().matchesPassword(password));
    assertFalse(neo4j.hasFlag(User.PASSWORD_CHANGE_REQUIRED));
  }
}
