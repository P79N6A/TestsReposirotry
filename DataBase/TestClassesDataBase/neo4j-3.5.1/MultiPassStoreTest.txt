@RunWith(Suite.class) @Suite.SuiteClasses({MultiPassStoreTest.Nodes.class,MultiPassStoreTest.Relationships.class,MultiPassStoreTest.Properties.class,MultiPassStoreTest.Strings.class,MultiPassStoreTest.Arrays.class}) public abstract class MultiPassStoreTest {
  @Test public void shouldSkipOtherKindsOfRecords(){
    RecordAccess recordAccess=mock(RecordAccess.class);
    List<RecordAccess> filters=multiPassStore().multiPassFilters(recordAccess,MultiPassStore.values());
    for (    RecordAccess filter : filters) {
      for (      long id : new long[]{0,100,200,300,400,500,600,700,800,900}) {
        otherRecords(filter,id);
      }
    }
    verifyZeroInteractions(recordAccess);
  }
  protected abstract MultiPassStore multiPassStore();
  protected abstract RecordReference<? extends AbstractBaseRecord> record(  RecordAccess filter,  long id);
  protected abstract void otherRecords(  RecordAccess filter,  long id);
@RunWith(JUnit4.class) public static class Nodes extends MultiPassStoreTest {
    @Override protected MultiPassStore multiPassStore(){
      return MultiPassStore.NODES;
    }
    @Override protected RecordReference<NodeRecord> record(    RecordAccess filter,    long id){
      return filter.node(id);
    }
    @Override protected void otherRecords(    RecordAccess filter,    long id){
      filter.relationship(id);
      filter.property(id);
      filter.string(id);
      filter.array(id);
    }
  }
@RunWith(JUnit4.class) public static class Relationships extends MultiPassStoreTest {
    @Override protected MultiPassStore multiPassStore(){
      return MultiPassStore.RELATIONSHIPS;
    }
    @Override protected RecordReference<RelationshipRecord> record(    RecordAccess filter,    long id){
      return filter.relationship(id);
    }
    @Override protected void otherRecords(    RecordAccess filter,    long id){
      filter.node(id);
      filter.property(id);
      filter.string(id);
      filter.array(id);
    }
  }
@RunWith(JUnit4.class) public static class Properties extends MultiPassStoreTest {
    @Override protected MultiPassStore multiPassStore(){
      return MultiPassStore.PROPERTIES;
    }
    @Override protected RecordReference<PropertyRecord> record(    RecordAccess filter,    long id){
      return filter.property(id);
    }
    @Override protected void otherRecords(    RecordAccess filter,    long id){
      filter.node(id);
      filter.relationship(id);
      filter.string(id);
      filter.array(id);
    }
  }
@RunWith(JUnit4.class) public static class Strings extends MultiPassStoreTest {
    @Override protected MultiPassStore multiPassStore(){
      return MultiPassStore.STRINGS;
    }
    @Override protected RecordReference<DynamicRecord> record(    RecordAccess filter,    long id){
      return filter.string(id);
    }
    @Override protected void otherRecords(    RecordAccess filter,    long id){
      filter.node(id);
      filter.relationship(id);
      filter.property(id);
      filter.array(id);
    }
  }
@RunWith(JUnit4.class) public static class Arrays extends MultiPassStoreTest {
    @Override protected MultiPassStore multiPassStore(){
      return MultiPassStore.ARRAYS;
    }
    @Override protected RecordReference<DynamicRecord> record(    RecordAccess filter,    long id){
      return filter.array(id);
    }
    @Override protected void otherRecords(    RecordAccess filter,    long id){
      filter.node(id);
      filter.relationship(id);
      filter.property(id);
      filter.string(id);
    }
  }
}
