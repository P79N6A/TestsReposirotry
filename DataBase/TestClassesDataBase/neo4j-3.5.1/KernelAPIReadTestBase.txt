/** 
 * KernelAPIReadTestBase is the basis of read tests targeting the Kernel API. As tests are packaged together with the API, they cannot provide all the functionality needed to construct the test graph, or provide the concrete Kernel to test. These things are abstracted behind the KernelAPIReadTestSupport interface, which needs to be implemented to test reading Kernel implementations. As read tests do not modify the graph, the test graph is created lazily on the first test run.
 * @param < ReadSupport > The test support for the current test.
 */
@SuppressWarnings("WeakerAccess") public abstract class KernelAPIReadTestBase<ReadSupport extends KernelAPIReadTestSupport> {
  protected static final TemporaryFolder folder=new TemporaryFolder();
  protected static KernelAPIReadTestSupport testSupport;
  protected Transaction tx;
  protected Read read;
  protected ExplicitIndexRead indexRead;
  protected SchemaRead schemaRead;
  protected Token token;
  protected ManagedTestCursors cursors;
  /** 
 * Creates a new instance of KernelAPIReadTestSupport, which will be used to execute the concrete test
 */
  public abstract ReadSupport newTestSupport();
  /** 
 * Create the graph which all test in the class will be executed against. The graph is only built once, regardless of the number of tests.
 * @param graphDb a graph API which should be used to build the test graph
 */
  public abstract void createTestGraph(  GraphDatabaseService graphDb);
  @Before public void setupGraph() throws IOException, KernelException {
    if (testSupport == null) {
      folder.create();
      testSupport=newTestSupport();
      testSupport.setup(folder.getRoot(),this::createTestGraph);
    }
    Kernel kernel=testSupport.kernelToTest();
    tx=kernel.beginTransaction(Transaction.Type.implicit,LoginContext.AUTH_DISABLED);
    token=tx.token();
    read=tx.dataRead();
    indexRead=tx.indexRead();
    schemaRead=tx.schemaRead();
    cursors=new ManagedTestCursors(tx.cursors());
  }
  protected Transaction beginTransaction() throws TransactionFailureException {
    Kernel kernel=testSupport.kernelToTest();
    return kernel.beginTransaction(Transaction.Type.implicit,LoginContext.AUTH_DISABLED);
  }
  @Rule public CursorsClosedPostCondition cursorsClosedPostCondition=new CursorsClosedPostCondition(() -> cursors);
  @After public void closeTransaction() throws Exception {
    tx.success();
    tx.close();
  }
  @AfterClass public static void tearDown(){
    if (testSupport != null) {
      testSupport.tearDown();
      folder.delete();
      testSupport=null;
    }
  }
}
