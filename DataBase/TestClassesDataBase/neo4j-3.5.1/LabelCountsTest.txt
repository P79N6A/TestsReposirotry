public class LabelCountsTest {
  @Rule public final DatabaseRule db=new ImpermanentDatabaseRule();
  private Supplier<KernelTransaction> transactionSupplier;
  @Before public void exposeGuts(){
    transactionSupplier=() -> db.getGraphDatabaseAPI().getDependencyResolver().resolveDependency(ThreadToStatementContextBridge.class).getKernelTransactionBoundToThisThread(true);
  }
  @Test public void shouldGetNumberOfNodesWithLabel(){
    GraphDatabaseService graphDb=db.getGraphDatabaseAPI();
    try (Transaction tx=graphDb.beginTx()){
      graphDb.createNode(label("Foo"));
      graphDb.createNode(label("Bar"));
      graphDb.createNode(label("Bar"));
      tx.success();
    }
     long fooCount=numberOfNodesWith(label("Foo"));
    long barCount=numberOfNodesWith(label("Bar"));
    assertEquals(1,fooCount);
    assertEquals(2,barCount);
  }
  @Test public void shouldAccountForDeletedNodes(){
    GraphDatabaseService graphDb=db.getGraphDatabaseAPI();
    Node node;
    try (Transaction tx=graphDb.beginTx()){
      node=graphDb.createNode(label("Foo"));
      graphDb.createNode(label("Foo"));
      tx.success();
    }
     try (Transaction tx=graphDb.beginTx()){
      node.delete();
      tx.success();
    }
     long fooCount=numberOfNodesWith(label("Foo"));
    assertEquals(1,fooCount);
  }
  @Test public void shouldAccountForDeletedNodesWithMultipleLabels(){
    GraphDatabaseService graphDb=db.getGraphDatabaseAPI();
    Node node;
    try (Transaction tx=graphDb.beginTx()){
      node=graphDb.createNode(label("Foo"),label("Bar"));
      graphDb.createNode(label("Foo"));
      graphDb.createNode(label("Bar"));
      tx.success();
    }
     try (Transaction tx=graphDb.beginTx()){
      node.delete();
      tx.success();
    }
     long fooCount=numberOfNodesWith(label("Foo"));
    long barCount=numberOfNodesWith(label("Bar"));
    assertEquals(1,fooCount);
    assertEquals(1,barCount);
  }
  @Test public void shouldAccountForAddedLabels(){
    GraphDatabaseService graphDb=db.getGraphDatabaseAPI();
    Node n1;
    Node n2;
    Node n3;
    try (Transaction tx=graphDb.beginTx()){
      n1=graphDb.createNode(label("Foo"));
      n2=graphDb.createNode();
      n3=graphDb.createNode();
      tx.success();
    }
     try (Transaction tx=graphDb.beginTx()){
      n1.addLabel(label("Bar"));
      n2.addLabel(label("Bar"));
      n3.addLabel(label("Foo"));
      tx.success();
    }
     long fooCount=numberOfNodesWith(label("Foo"));
    long barCount=numberOfNodesWith(label("Bar"));
    assertEquals(2,fooCount);
    assertEquals(2,barCount);
  }
  @Test public void shouldAccountForRemovedLabels(){
    GraphDatabaseService graphDb=db.getGraphDatabaseAPI();
    Node n1;
    Node n2;
    Node n3;
    try (Transaction tx=graphDb.beginTx()){
      n1=graphDb.createNode(label("Foo"),label("Bar"));
      n2=graphDb.createNode(label("Bar"));
      n3=graphDb.createNode(label("Foo"));
      tx.success();
    }
     try (Transaction tx=graphDb.beginTx()){
      n1.removeLabel(label("Bar"));
      n2.removeLabel(label("Bar"));
      n3.removeLabel(label("Foo"));
      tx.success();
    }
     long fooCount=numberOfNodesWith(label("Foo"));
    long barCount=numberOfNodesWith(label("Bar"));
    assertEquals(1,fooCount);
    assertEquals(0,barCount);
  }
  /** 
 * Transactional version of  {@link #countsForNode(Label)} 
 */
  private long numberOfNodesWith(  Label label){
    try (Transaction tx=db.getGraphDatabaseAPI().beginTx()){
      long nodeCount=countsForNode(label);
      tx.success();
      return nodeCount;
    }
   }
  /** 
 * @param label the label to get the number of nodes of, or {@code null} to get the total number of nodes. 
 */
  private long countsForNode(  Label label){
    KernelTransaction transaction=transactionSupplier.get();
    Read read=transaction.dataRead();
    int labelId;
    if (label == null) {
      labelId=StatementConstants.ANY_LABEL;
    }
 else {
      if (TokenRead.NO_TOKEN == (labelId=transaction.tokenRead().nodeLabel(label.name()))) {
        return 0;
      }
    }
    return read.countsForNode(labelId);
  }
}
