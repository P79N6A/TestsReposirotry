public class FusionIndexIT {
  @Rule public DatabaseRule db=new EmbeddedDatabaseRule().withSetting(GraphDatabaseSettings.default_schema_provider,GraphDatabaseSettings.SchemaIndex.NATIVE20.providerName());
  private DatabaseLayout databaseLayout;
  private final Label label=Label.label("label");
  private final String propKey="propKey";
  private FileSystemAbstraction fs;
  private int numberValue=1;
  private String stringValue="string";
  private PointValue spatialValue=pointValue(CoordinateReferenceSystem.WGS84,0.5,0.5);
  private DateValue temporalValue=DateValue.date(2018,3,19);
  @Before public void setup(){
    databaseLayout=db.databaseLayout();
    fs=db.getDependencyResolver().resolveDependency(FileSystemAbstraction.class);
  }
  @Test public void mustRebuildFusionIndexIfNativePartIsMissing() throws IOException {
    initializeIndexWithDataAndShutdown();
    IndexProviderDescriptor descriptor=NumberIndexProvider.NATIVE_PROVIDER_DESCRIPTOR;
    deleteIndexFilesFor(descriptor);
    verifyContent();
  }
  @Test public void mustRebuildFusionIndexIfLucenePartIsMissing() throws IOException {
    initializeIndexWithDataAndShutdown();
    IndexProviderDescriptor descriptor=LuceneIndexProviderFactory.PROVIDER_DESCRIPTOR;
    deleteIndexFilesFor(descriptor);
    verifyContent();
  }
  @Test public void mustRebuildFusionIndexIfCompletelyMissing() throws IOException {
    initializeIndexWithDataAndShutdown();
    IndexProviderDescriptor luceneDescriptor=LuceneIndexProviderFactory.PROVIDER_DESCRIPTOR;
    IndexProviderDescriptor nativeDescriptor=NumberIndexProvider.NATIVE_PROVIDER_DESCRIPTOR;
    deleteIndexFilesFor(luceneDescriptor);
    deleteIndexFilesFor(nativeDescriptor);
    verifyContent();
  }
  private void verifyContent(){
    GraphDatabaseAPI newDb=db.getGraphDatabaseAPI();
    try (Transaction tx=newDb.beginTx()){
      assertEquals(1L,Iterators.stream(newDb.schema().getIndexes(label).iterator()).count());
      assertNotNull(newDb.findNode(label,propKey,numberValue));
      assertNotNull(newDb.findNode(label,propKey,stringValue));
      assertNotNull(newDb.findNode(label,propKey,spatialValue));
      assertNotNull(newDb.findNode(label,propKey,temporalValue));
      tx.success();
    }
   }
  private void deleteIndexFilesFor(  IndexProviderDescriptor descriptor){
    File databaseDirectory=this.databaseLayout.databaseDirectory();
    File rootDirectory=subProviderDirectoryStructure(databaseDirectory).forProvider(descriptor).rootDirectory();
    File[] files=fs.listFiles(rootDirectory);
    for (    File indexFile : files) {
      fs.deleteFile(indexFile);
    }
  }
  private void initializeIndexWithDataAndShutdown(){
    createIndex();
    try (Transaction tx=db.beginTx()){
      db.createNode(label).setProperty(propKey,numberValue);
      db.createNode(label).setProperty(propKey,stringValue);
      db.createNode(label).setProperty(propKey,spatialValue);
      db.createNode(label).setProperty(propKey,temporalValue);
      tx.success();
    }
     db.shutdown();
  }
  private void createIndex(){
    try (Transaction tx=db.beginTx()){
      db.schema().indexFor(label).on(propKey).create();
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      db.schema().awaitIndexesOnline(10,TimeUnit.SECONDS);
      tx.success();
    }
   }
}
