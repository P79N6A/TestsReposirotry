public class MandatoryTransactionsForIndexHitsFacadeTest {
  @Rule public ImpermanentDatabaseRule dbRule=new ImpermanentDatabaseRule();
  private IndexHits<Node> indexHits;
  @Before public void before(){
    Index<Node> index=createIndex();
    indexHits=queryIndex(index);
  }
  @Test public void shouldMandateTransactionsForUsingIterator(){
    try (ResourceIterator<Node> iterator=indexHits.iterator()){
      try {
        iterator.hasNext();
        fail("Transactions are mandatory, also for reads");
      }
 catch (      NotInTransactionException e) {
      }
      try {
        iterator.next();
        fail("Transactions are mandatory, also for reads");
      }
 catch (      NotInTransactionException e) {
      }
    }
   }
  @Test public void shouldMandateTransactionsForGetSingle(){
    try {
      indexHits.getSingle();
      fail("Transactions are mandatory, also for reads");
    }
 catch (    NotInTransactionException e) {
    }
  }
  private Index<Node> createIndex(){
    GraphDatabaseService graphDatabaseService=dbRule.getGraphDatabaseAPI();
    try (Transaction transaction=graphDatabaseService.beginTx()){
      Index<Node> index=graphDatabaseService.index().forNodes("foo");
      transaction.success();
      return index;
    }
   }
  private IndexHits<Node> queryIndex(  Index<Node> index){
    GraphDatabaseService graphDatabaseService=dbRule.getGraphDatabaseAPI();
    try (Transaction ignored=graphDatabaseService.beginTx()){
      IndexHits<Node> hits=index.get("foo",42);
      hits.close();
      return hits;
    }
   }
}
