class PrimitiveIntStackTest {
  @Test void shouldPushAndPollSomeEntities(){
    PrimitiveIntStack stack=new PrimitiveIntStack(6);
    assertTrue(stack.isEmpty());
    assertEquals(-1,stack.poll());
    stack.push(123);
    assertFalse(stack.isEmpty());
    stack.push(456);
    assertFalse(stack.isEmpty());
    assertEquals(456,stack.poll());
    assertFalse(stack.isEmpty());
    assertEquals(123,stack.poll());
    assertTrue(stack.isEmpty());
    assertEquals(-1,stack.poll());
  }
  @Test void shouldGrowArray(){
    PrimitiveIntStack stack=new PrimitiveIntStack(5);
    for (int i=0; i <= 7; i++) {
      stack.push(i);
    }
    for (int i=7; i >= 0; i--) {
      assertFalse(stack.isEmpty());
      assertEquals(i,stack.poll());
    }
    assertTrue(stack.isEmpty());
    assertEquals(-1,stack.poll());
  }
  @Test void shouldIterate(){
    PrimitiveIntStack stack=new PrimitiveIntStack();
    for (int i=0; i < 7; i++) {
      stack.push(i);
    }
    PrimitiveIntIterator iterator=stack.iterator();
    int i=0;
    while (iterator.hasNext()) {
      assertEquals(i++,iterator.next());
    }
    assertEquals(7,i);
  }
}
