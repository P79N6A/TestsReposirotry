public class StreamingJsonFormatTest {
  private OutputFormat json;
  private ByteArrayOutputStream stream;
  @Before public void createOutputFormat() throws Exception {
    stream=new ByteArrayOutputStream();
    json=new OutputFormat(new StreamingJsonFormat().writeTo(stream).usePrettyPrinter(),new URI("http://localhost/"),null);
  }
  @Test public void canFormatNode(){
    GraphDatabaseService db=new TestGraphDatabaseFactory().newImpermanentDatabase();
    try (Transaction transaction=db.beginTx()){
      final Node n=db.createNode();
      json.assemble(new NodeRepresentation(n));
    }
  finally {
      db.shutdown();
    }
    assertTrue(stream.toString().contains("\"self\" : \"http://localhost/node/0\","));
  }
  @Test public void canFormatString(){
    json.assemble(ValueRepresentation.string("expected value"));
    assertEquals(stream.toString(),"\"expected value\"");
  }
  @Test public void canFormatListOfStrings(){
    json.assemble(ListRepresentation.strings("hello","world"));
    String expectedString=JsonHelper.createJsonFrom(Arrays.asList("hello","world"));
    assertEquals(expectedString,stream.toString());
  }
  @Test public void canFormatInteger(){
    json.assemble(ValueRepresentation.number(10));
    assertEquals("10",stream.toString());
  }
  @Test public void canFormatEmptyObject(){
    json.assemble(new MappingRepresentation("empty"){
      @Override protected void serialize(      MappingSerializer serializer){
      }
    }
);
    assertEquals(JsonHelper.createJsonFrom(Collections.emptyMap()),stream.toString());
  }
  @Test public void canFormatObjectWithStringField(){
    json.assemble(new MappingRepresentation("string"){
      @Override protected void serialize(      MappingSerializer serializer){
        serializer.putString("key","expected string");
      }
    }
);
    assertEquals(JsonHelper.createJsonFrom(Collections.singletonMap("key","expected string")),stream.toString());
  }
  @Test public void canFormatObjectWithUriField(){
    json.assemble(new MappingRepresentation("uri"){
      @Override protected void serialize(      MappingSerializer serializer){
        serializer.putRelativeUri("URL","subpath");
      }
    }
);
    assertEquals(JsonHelper.createJsonFrom(Collections.singletonMap("URL","http://localhost/subpath")),stream.toString());
  }
  @Test public void canFormatObjectWithNestedObject(){
    json.assemble(new MappingRepresentation("nesting"){
      @Override protected void serialize(      MappingSerializer serializer){
        serializer.putMapping("nested",new MappingRepresentation("data"){
          @Override protected void serialize(          MappingSerializer nested){
            nested.putString("data","expected data");
          }
        }
);
      }
    }
);
    assertEquals(JsonHelper.createJsonFrom(Collections.singletonMap("nested",Collections.singletonMap("data","expected data"))),stream.toString());
  }
}
