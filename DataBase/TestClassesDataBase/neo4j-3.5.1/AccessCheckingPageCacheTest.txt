class AccessCheckingPageCacheTest {
  private PageCache pageCache;
  private PageCursor cursor;
  @BeforeEach void getPageCursor() throws IOException {
    PageCache mockedPageCache=mock(PageCache.class);
    PagedFile mockedPagedFile=mock(PagedFile.class);
    PageCursor mockedCursor=mock(PageCursor.class);
    when(mockedPagedFile.io(anyLong(),anyInt())).thenReturn(mockedCursor);
    when(mockedPageCache.map(any(File.class),anyInt(),any())).thenReturn(mockedPagedFile);
    pageCache=new AccessCheckingPageCache(mockedPageCache);
    PagedFile file=pageCache.map(new File("some file"),512);
    cursor=file.io(0,PagedFile.PF_SHARED_READ_LOCK);
  }
  @Test void shouldGrant_read_shouldRetry_close() throws Exception {
    cursor.getByte();
    cursor.shouldRetry();
    cursor.close();
  }
  @Test void shouldGrant_read_shouldRetry_next() throws Exception {
    cursor.getByte(0);
    cursor.shouldRetry();
    cursor.next();
  }
  @Test void shouldGrant_read_shouldRetry_next_with_id() throws Exception {
    cursor.getShort();
    cursor.shouldRetry();
    cursor.next(1);
  }
  @Test void shouldGrant_read_shouldRetry_read_shouldRetry_close() throws Exception {
    cursor.getShort(0);
    cursor.shouldRetry();
    cursor.getInt();
    cursor.shouldRetry();
    cursor.close();
  }
  @Test void shouldGrant_read_shouldRetry_read_shouldRetry_next() throws Exception {
    cursor.getInt(0);
    cursor.shouldRetry();
    cursor.getLong();
    cursor.shouldRetry();
    cursor.next();
  }
  @Test void shouldGrant_read_shouldRetry_read_shouldRetry_next_with_id() throws Exception {
    cursor.getLong(0);
    cursor.shouldRetry();
    cursor.getBytes(new byte[2]);
    cursor.shouldRetry();
    cursor.next(1);
  }
  @Test void shouldFail_read_close(){
    cursor.getByte();
    try {
      cursor.close();
      fail("Should have failed");
    }
 catch (    AssertionError e) {
      assertThat(e.getMessage(),containsString("shouldRetry"));
    }
  }
  @Test void shouldFail_read_next() throws Exception {
    cursor.getByte(0);
    try {
      cursor.next();
      fail("Should have failed");
    }
 catch (    AssertionError e) {
      assertThat(e.getMessage(),containsString("shouldRetry"));
    }
  }
  @Test void shouldFail_read_next_with_id() throws Exception {
    cursor.getShort();
    try {
      cursor.next(1);
      fail("Should have failed");
    }
 catch (    AssertionError e) {
      assertThat(e.getMessage(),containsString("shouldRetry"));
    }
  }
  @Test void shouldFail_read_shouldRetry_read_close() throws Exception {
    cursor.getShort(0);
    cursor.shouldRetry();
    cursor.getInt();
    try {
      cursor.close();
      fail("Should have failed");
    }
 catch (    AssertionError e) {
      assertThat(e.getMessage(),containsString("shouldRetry"));
    }
  }
  @Test void shouldFail_read_shouldRetry_read_next() throws Exception {
    cursor.getInt(0);
    cursor.shouldRetry();
    cursor.getLong();
    try {
      cursor.next();
      fail("Should have failed");
    }
 catch (    AssertionError e) {
      assertThat(e.getMessage(),containsString("shouldRetry"));
    }
  }
  @Test void shouldFail_read_shouldRetry_read_next_with_id() throws Exception {
    cursor.getLong(0);
    cursor.shouldRetry();
    cursor.getBytes(new byte[2]);
    try {
      cursor.next(1);
      fail("Should have failed");
    }
 catch (    AssertionError e) {
      assertThat(e.getMessage(),containsString("shouldRetry"));
    }
  }
}
