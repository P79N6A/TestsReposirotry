class SimpleIndexReaderTest {
  private final PartitionSearcher partitionSearcher=mock(PartitionSearcher.class);
  private final IndexSearcher indexSearcher=mock(IndexSearcher.class);
  private final IndexSamplingConfig samplingConfig=new IndexSamplingConfig(Config.defaults());
  private final TaskCoordinator taskCoordinator=new TaskCoordinator(0,TimeUnit.MILLISECONDS);
  @BeforeEach void setUp(){
    when(partitionSearcher.getIndexSearcher()).thenReturn(indexSearcher);
  }
  @Test void releaseSearcherOnClose() throws IOException {
    IndexReader simpleIndexReader=getUniqueSimpleReader();
    simpleIndexReader.close();
    verify(partitionSearcher).close();
  }
  @Test void seekQueryReachSearcher() throws Exception {
    IndexReader simpleIndexReader=getUniqueSimpleReader();
    simpleIndexReader.query(IndexQuery.exact(1,"test"));
    verify(indexSearcher).search(any(BooleanQuery.class),any(DocValuesCollector.class));
  }
  @Test void scanQueryReachSearcher() throws Exception {
    IndexReader simpleIndexReader=getUniqueSimpleReader();
    simpleIndexReader.query(IndexQuery.exists(1));
    verify(indexSearcher).search(any(MatchAllDocsQuery.class),any(DocValuesCollector.class));
  }
  @Test void stringRangeSeekQueryReachSearcher() throws Exception {
    IndexReader simpleIndexReader=getUniqueSimpleReader();
    simpleIndexReader.query(range(1,"a",false,"b",true));
    verify(indexSearcher).search(any(TermRangeQuery.class),any(DocValuesCollector.class));
  }
  @Test void prefixRangeSeekQueryReachSearcher() throws Exception {
    IndexReader simpleIndexReader=getUniqueSimpleReader();
    simpleIndexReader.query(IndexQuery.stringPrefix(1,stringValue("bb")));
    verify(indexSearcher).search(any(MultiTermQuery.class),any(DocValuesCollector.class));
  }
  @Test void numberRangeSeekQueryReachSearcher() throws Exception {
    IndexReader simpleIndexReader=getUniqueSimpleReader();
    simpleIndexReader.query(range(1,7,true,8,true));
    verify(indexSearcher).search(any(NumericRangeQuery.class),any(DocValuesCollector.class));
  }
  @Test void countIndexedNodesReachSearcher() throws IOException {
    IndexReader simpleIndexReader=getUniqueSimpleReader();
    simpleIndexReader.countIndexedNodes(2,new int[]{3},Values.of("testValue"));
    verify(indexSearcher).search(any(BooleanQuery.class),any(TotalHitCountCollector.class));
  }
  @Test void uniqueIndexSamplerForUniqueIndex(){
    SimpleIndexReader uniqueSimpleReader=getUniqueSimpleReader();
    assertThat(uniqueSimpleReader.createSampler(),instanceOf(UniqueLuceneIndexSampler.class));
  }
  @Test void nonUniqueIndexSamplerForNonUniqueIndex(){
    SimpleIndexReader uniqueSimpleReader=getNonUniqueSimpleReader();
    assertThat(uniqueSimpleReader.createSampler(),instanceOf(NonUniqueLuceneIndexSampler.class));
  }
  private SimpleIndexReader getNonUniqueSimpleReader(){
    return new SimpleIndexReader(partitionSearcher,TestIndexDescriptorFactory.forLabel(0,0),samplingConfig,taskCoordinator);
  }
  private SimpleIndexReader getUniqueSimpleReader(){
    return new SimpleIndexReader(partitionSearcher,TestIndexDescriptorFactory.uniqueForLabel(0,0),samplingConfig,taskCoordinator);
  }
}
