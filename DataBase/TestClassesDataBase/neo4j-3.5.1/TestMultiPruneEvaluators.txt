public class TestMultiPruneEvaluators extends TraversalTestBase {
  @Before public void setupGraph(){
    createGraph("a to b","a to c","a to d","a to e","b to f","b to g","b to h","c to i","d to j","d to k","d to l","e to m","e to n","k to o","k to p","k to q","k to r");
  }
  @Test public void testMaxDepthAndCustomPruneEvaluatorCombined(){
    Evaluator lessThanThreeRels=path -> count(path.endNode().getRelationships(Direction.OUTGOING).iterator()) < 3 ? Evaluation.INCLUDE_AND_PRUNE : Evaluation.INCLUDE_AND_CONTINUE;
    TraversalDescription description=getGraphDb().traversalDescription().evaluator(Evaluators.all()).evaluator(toDepth(1)).evaluator(lessThanThreeRels);
    Set<String> expectedNodes=new HashSet<>(asList("a","b","c","d","e"));
    try (Transaction tx=beginTx()){
      for (      Path position : description.traverse(node("a"))) {
        String name=(String)position.endNode().getProperty("name");
        assertTrue(name + " shouldn't have been returned",expectedNodes.remove(name));
      }
      tx.success();
    }
     assertTrue(expectedNodes.isEmpty());
  }
}
