class NotificationCodeTest {
  @Test void shouldConstructNotificationFor_INDEX_HINT_UNFULFILLABLE(){
    NotificationDetail indexDetail=NotificationDetail.Factory.index("Person","name");
    Notification notification=INDEX_HINT_UNFULFILLABLE.notification(InputPosition.empty,indexDetail);
    assertThat(notification.getTitle(),equalTo("The request (directly or indirectly) referred to an index that does not exist."));
    assertThat(notification.getSeverity(),equalTo(SeverityLevel.WARNING));
    assertThat(notification.getCode(),equalTo("Neo.ClientError.Schema.IndexNotFound"));
    assertThat(notification.getPosition(),equalTo(InputPosition.empty));
    assertThat(notification.getDescription(),equalTo("The hinted index does not exist, please check the schema (hinted index is: index on :Person(name))"));
  }
  @Test void shouldConstructNotificationFor_CARTESIAN_PRODUCT(){
    Set<String> idents=new TreeSet<>();
    idents.add("n");
    idents.add("node2");
    NotificationDetail identifierDetail=NotificationDetail.Factory.cartesianProduct(idents);
    Notification notification=CARTESIAN_PRODUCT.notification(InputPosition.empty,identifierDetail);
    assertThat(notification.getTitle(),equalTo("This query builds a cartesian product between disconnected patterns."));
    assertThat(notification.getSeverity(),equalTo(SeverityLevel.WARNING));
    assertThat(notification.getCode(),equalTo("Neo.ClientNotification.Statement.CartesianProductWarning"));
    assertThat(notification.getPosition(),equalTo(InputPosition.empty));
    assertThat(notification.getDescription(),equalTo("If a part of a query contains multiple disconnected patterns, this will build a cartesian product " + "between all those parts. This may produce a large amount of data and slow down query processing. While " + "occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross "+ "product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH "+ "(identifiers are: (n, node2))"));
  }
  @Test void shouldConstructNotificationsFor_JOIN_HINT_UNFULFILLABLE(){
    List<String> idents=new ArrayList<>();
    idents.add("n");
    idents.add("node2");
    NotificationDetail identifierDetail=NotificationDetail.Factory.joinKey(idents);
    Notification notification=JOIN_HINT_UNFULFILLABLE.notification(InputPosition.empty,identifierDetail);
    assertThat(notification.getTitle(),equalTo("The database was unable to plan a hinted join."));
    assertThat(notification.getSeverity(),equalTo(SeverityLevel.WARNING));
    assertThat(notification.getCode(),equalTo("Neo.ClientNotification.Statement.JoinHintUnfulfillableWarning"));
    assertThat(notification.getPosition(),equalTo(InputPosition.empty));
    assertThat(notification.getDescription(),equalTo("The hinted join was not planned. This could happen because no generated plan contained the join key, " + "please try using a different join key or restructure your query. " + "(hinted join key identifiers are: n, node2)"));
  }
  @Test void shouldConstructNotificationsFor_DEPRECATED_PROCEDURE(){
    NotificationDetail identifierDetail=NotificationDetail.Factory.deprecatedName("oldName","newName");
    Notification notification=DEPRECATED_PROCEDURE.notification(InputPosition.empty,identifierDetail);
    assertThat(notification.getTitle(),equalTo("This feature is deprecated and will be removed in future versions."));
    assertThat(notification.getSeverity(),equalTo(SeverityLevel.WARNING));
    assertThat(notification.getCode(),equalTo("Neo.ClientNotification.Statement.FeatureDeprecationWarning"));
    assertThat(notification.getPosition(),equalTo(InputPosition.empty));
    assertThat(notification.getDescription(),equalTo("The query used a deprecated procedure. ('oldName' has been replaced by 'newName')"));
  }
  @Test void shouldConstructNotificationsFor_DEPRECATED_PROCEDURE_with_no_newName(){
    NotificationDetail identifierDetail=NotificationDetail.Factory.deprecatedName("oldName","");
    Notification notification=DEPRECATED_PROCEDURE.notification(InputPosition.empty,identifierDetail);
    assertThat(notification.getTitle(),equalTo("This feature is deprecated and will be removed in future versions."));
    assertThat(notification.getSeverity(),equalTo(SeverityLevel.WARNING));
    assertThat(notification.getCode(),equalTo("Neo.ClientNotification.Statement.FeatureDeprecationWarning"));
    assertThat(notification.getPosition(),equalTo(InputPosition.empty));
    assertThat(notification.getDescription(),equalTo("The query used a deprecated procedure. ('oldName' is no longer supported)"));
  }
}
