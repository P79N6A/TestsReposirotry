public class DeferredConflictCheckingIndexUpdaterTest {
  private final int labelId=1;
  private final int[] propertyKeyIds={2,3};
  private final IndexDescriptor descriptor=TestIndexDescriptorFactory.forLabel(labelId,propertyKeyIds);
  @Test public void shouldQueryAboutAddedAndChangedValueTuples() throws Exception {
    IndexUpdater actual=mock(IndexUpdater.class);
    IndexReader reader=mock(IndexReader.class);
    when(reader.query(anyVararg())).thenAnswer(invocation -> iterator(0));
    long nodeId=0;
    List<IndexEntryUpdate<IndexDescriptor>> updates=new ArrayList<>();
    updates.add(add(nodeId++,descriptor,tuple(10,11)));
    updates.add(change(nodeId++,descriptor,tuple("abc","def"),tuple("ghi","klm")));
    updates.add(remove(nodeId++,descriptor,tuple(1001L,1002L)));
    updates.add(change(nodeId++,descriptor,tuple((byte)2,(byte)3),tuple((byte)4,(byte)5)));
    updates.add(add(nodeId++,descriptor,tuple(5,"5")));
    try (DeferredConflictCheckingIndexUpdater updater=new DeferredConflictCheckingIndexUpdater(actual,() -> reader,descriptor)){
      for (      IndexEntryUpdate<IndexDescriptor> update : updates) {
        updater.process(update);
        verify(actual).process(update);
      }
    }
     for (    IndexEntryUpdate<IndexDescriptor> update : updates) {
      if (update.updateMode() == UpdateMode.ADDED || update.updateMode() == UpdateMode.CHANGED) {
        Value[] tuple=update.values();
        IndexQuery[] query=new IndexQuery[tuple.length];
        for (int i=0; i < tuple.length; i++) {
          query[i]=IndexQuery.exact(propertyKeyIds[i],tuple[i]);
        }
        verify(reader).query(query);
      }
    }
    verify(reader).close();
    verifyNoMoreInteractions(reader);
  }
  @Test public void shouldThrowOnIndexEntryConflict() throws Exception {
    IndexUpdater actual=mock(IndexUpdater.class);
    IndexReader reader=mock(IndexReader.class);
    when(reader.query(anyVararg())).thenAnswer(invocation -> iterator(101,202));
    DeferredConflictCheckingIndexUpdater updater=new DeferredConflictCheckingIndexUpdater(actual,() -> reader,descriptor);
    updater.process(add(0,descriptor,tuple(10,11)));
    try {
      updater.close();
      fail("Should have failed");
    }
 catch (    IndexEntryConflictException e) {
      assertThat(e.getMessage(),containsString("101"));
      assertThat(e.getMessage(),containsString("202"));
    }
  }
  private Value[] tuple(  Object... values){
    Value[] result=new Value[values.length];
    for (int i=0; i < values.length; i++) {
      result[i]=Values.of(values[i]);
    }
    return result;
  }
}
