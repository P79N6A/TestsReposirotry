public class TestJumpingIdGenerator {
  @Test public void testIt(){
    int sizePerJump=1000;
    IdGeneratorFactory factory=new JumpingIdGeneratorFactory(sizePerJump);
    IdGenerator generator=factory.get(IdType.NODE);
    for (int i=0; i < sizePerJump / 2; i++) {
      assertEquals(i,generator.nextId());
    }
    for (int i=0; i < sizePerJump - 1; i++) {
      long expected=0x100000000L - sizePerJump / 2 + i;
      if (expected >= 0xFFFFFFFFL) {
        expected++;
      }
      assertEquals(expected,generator.nextId());
    }
    for (int i=0; i < sizePerJump; i++) {
      assertEquals(0x200000000L - sizePerJump / 2 + i,generator.nextId());
    }
    for (int i=0; i < sizePerJump; i++) {
      assertEquals(0x300000000L - sizePerJump / 2 + i,generator.nextId());
    }
  }
  @Test public void testOffsetFileChannel() throws Exception {
    try (JumpingFileSystemAbstraction offsetFileSystem=new JumpingFileSystemAbstraction(10)){
      File fileName=new File("target/var/neostore.nodestore.db");
      offsetFileSystem.deleteFile(fileName);
      offsetFileSystem.mkdirs(fileName.getParentFile());
      IdGenerator idGenerator=new JumpingIdGeneratorFactory(10).get(IdType.NODE);
      try (JumpingFileChannel channel=(JumpingFileChannel)offsetFileSystem.open(fileName,OpenMode.READ_WRITE)){
        for (int i=0; i < 16; i++) {
          writeSomethingLikeNodeRecord(channel,idGenerator.nextId(),i);
        }
      }
       try (JumpingFileChannel channel=(JumpingFileChannel)offsetFileSystem.open(fileName,OpenMode.READ_WRITE)){
        idGenerator=new JumpingIdGeneratorFactory(10).get(IdType.NODE);
        for (int i=0; i < 16; i++) {
          assertEquals(i,readSomethingLikeNodeRecord(channel,idGenerator.nextId()));
        }
      }
     }
   }
  private byte readSomethingLikeNodeRecord(  JumpingFileChannel channel,  long id) throws IOException {
    ByteBuffer buffer=ByteBuffer.allocate(RECORD_SIZE);
    channel.position(id * RECORD_SIZE);
    channel.read(buffer);
    buffer.flip();
    buffer.getLong();
    return buffer.get();
  }
  private void writeSomethingLikeNodeRecord(  JumpingFileChannel channel,  long id,  int justAByte) throws IOException {
    channel.position(id * RECORD_SIZE);
    ByteBuffer buffer=ByteBuffer.allocate(RECORD_SIZE);
    buffer.putLong(4321);
    buffer.put((byte)justAByte);
    buffer.flip();
    channel.write(buffer);
  }
}
