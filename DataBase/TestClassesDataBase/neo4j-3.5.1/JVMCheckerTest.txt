public class JVMCheckerTest {
  @Test public void shouldIssueWarningWhenUsingHotspotServerVmVersion7(){
    BufferingLog bufferingLogger=new BufferingLog();
    new JvmChecker(bufferingLogger,new CannedJvmMetadataRepository("Java HotSpot(TM) 64-Bit Server VM","1.7.0-b147")).checkJvmCompatibilityAndIssueWarning();
    assertThat(bufferingLogger.toString().trim(),is(INCOMPATIBLE_JVM_VERSION_WARNING));
  }
  @Test public void shouldNotIssueWarningWhenUsingHotspotServerVmVersion8(){
    BufferingLog bufferingLogger=new BufferingLog();
    new JvmChecker(bufferingLogger,new CannedJvmMetadataRepository("Java HotSpot(TM) 64-Bit Server VM","1.8.0_45")).checkJvmCompatibilityAndIssueWarning();
    assertTrue(bufferingLogger.toString().isEmpty());
  }
  @Test public void shouldNotIssueWarningWhenUsingIbmJ9Vm(){
    BufferingLog bufferingLogger=new BufferingLog();
    new JvmChecker(bufferingLogger,new CannedJvmMetadataRepository("IBM J9 VM","1.8")).checkJvmCompatibilityAndIssueWarning();
    assertTrue(bufferingLogger.toString().isEmpty());
  }
  @Test public void shouldIssueWarningWhenUsingHotspotServerVmVersion7InThe32BitVersion(){
    BufferingLog bufferingLogger=new BufferingLog();
    new JvmChecker(bufferingLogger,new CannedJvmMetadataRepository("Java HotSpot(TM) Server VM","1.7.0_25-b15")).checkJvmCompatibilityAndIssueWarning();
    assertThat(bufferingLogger.toString().trim(),is(INCOMPATIBLE_JVM_VERSION_WARNING));
  }
  @Test public void shouldIssueWarningWhenUsingOpenJDKServerVmVersion7(){
    BufferingLog bufferingLogger=new BufferingLog();
    new JvmChecker(bufferingLogger,new CannedJvmMetadataRepository("OpenJDK 64-Bit Server VM","1.7.0-b147")).checkJvmCompatibilityAndIssueWarning();
    assertThat(bufferingLogger.toString().trim(),is(INCOMPATIBLE_JVM_VERSION_WARNING));
  }
  @Test public void shouldIssueWarningWhenUsingOpenJDKClientVmVersion7(){
    BufferingLog bufferingLogger=new BufferingLog();
    new JvmChecker(bufferingLogger,new CannedJvmMetadataRepository("OpenJDK Client VM","1.7.0-b147")).checkJvmCompatibilityAndIssueWarning();
    assertThat(bufferingLogger.toString().trim(),is(INCOMPATIBLE_JVM_VERSION_WARNING));
  }
  @Test public void shouldIssueWarningWhenUsingUnsupportedJvm(){
    BufferingLog bufferingLogger=new BufferingLog();
    new JvmChecker(bufferingLogger,new CannedJvmMetadataRepository("MyOwnJDK 64-Bit Awesome VM","1.7")).checkJvmCompatibilityAndIssueWarning();
    assertThat(bufferingLogger.toString().trim(),is(INCOMPATIBLE_JVM_WARNING));
  }
  @Test public void shouldIssueWarningWhenUsingUnsupportedJvmVersion(){
    BufferingLog bufferingLogger=new BufferingLog();
    new JvmChecker(bufferingLogger,new CannedJvmMetadataRepository("Java HotSpot(TM) 64-Bit Server VM","1.6.42_87")).checkJvmCompatibilityAndIssueWarning();
    assertThat(bufferingLogger.toString().trim(),is(INCOMPATIBLE_JVM_VERSION_WARNING));
  }
}
