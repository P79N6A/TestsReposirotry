public class ReadOnlyIT extends ExclusiveServerTestBase {
  private NeoServer readOnlyServer;
  private HTTP.Builder http;
  @Before public void setup() throws IOException {
    ServerHelper.cleanTheDatabase(readOnlyServer);
    readOnlyServer=ServerHelper.createNonPersistentReadOnlyServer();
    http=HTTP.withBaseUri(readOnlyServer.baseUri());
  }
  @After public void teardown(){
    if (readOnlyServer != null) {
      readOnlyServer.stop();
    }
  }
  @Test public void shouldReturnReadOnlyStatusWhenCreatingNodes() throws Exception {
    HTTP.Response response=http.POST("db/data/transaction/commit",quotedJson("{ 'statements': [ { 'statement': 'CREATE (node)' } ] }"));
    JsonNode error=response.get("errors").get(0);
    String code=error.get("code").asText();
    String message=error.get("message").asText();
    assertEquals("Neo.ClientError.General.ForbiddenOnReadOnlyDatabase",code);
    assertThat(message,containsString("This is a read only Neo4j instance"));
  }
  @Test public void shouldReturnReadOnlyStatusWhenCreatingNodesWhichTransitivelyCreateTokens() throws Exception {
    HTTP.Response response=http.POST("db/data/transaction/commit",quotedJson("{ 'statements': [ { 'statement': 'CREATE (node:Node)' } ] }"));
    JsonNode error=response.get("errors").get(0);
    String code=error.get("code").asText();
    String message=error.get("message").asText();
    assertEquals("Neo.ClientError.General.ForbiddenOnReadOnlyDatabase",code);
    assertThat(message,containsString("This is a read only Neo4j instance"));
  }
}
