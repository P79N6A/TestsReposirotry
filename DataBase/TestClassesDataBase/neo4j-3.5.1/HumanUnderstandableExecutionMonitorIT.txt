public class HumanUnderstandableExecutionMonitorIT {
  private static final long NODE_COUNT=1_000;
  private static final long RELATIONSHIP_COUNT=10_000;
  @Rule public final RandomRule random=new RandomRule();
  @Rule public final PageCacheAndDependenciesRule storage=new PageCacheAndDependenciesRule();
  @Rule public final SuppressOutput suppressOutput=SuppressOutput.suppressAll();
  @Test public void shouldReportProgressOfNodeImport() throws Exception {
    CapturingMonitor progress=new CapturingMonitor();
    HumanUnderstandableExecutionMonitor monitor=new HumanUnderstandableExecutionMonitor(progress,NO_EXTERNAL_MONITOR);
    IdType idType=INTEGER;
    Input input=new DataGeneratorInput(NODE_COUNT,RELATIONSHIP_COUNT,idType,Collector.EMPTY,random.seed(),0,bareboneNodeHeader(idType,new Extractors(';')),bareboneRelationshipHeader(idType,new Extractors(';')),1,1,0,0);
    try (JobScheduler jobScheduler=new ThreadPoolJobScheduler()){
      new ParallelBatchImporter(storage.directory().databaseLayout(),storage.fileSystem(),storage.pageCache(),DEFAULT,NullLogService.getInstance(),monitor,EMPTY,defaults(),LATEST_RECORD_FORMATS,NO_MONITOR,jobScheduler).doImport(input);
      progress.assertAllProgressReachedEnd();
    }
   }
private static class CapturingMonitor implements HumanUnderstandableExecutionMonitor.Monitor {
    final EnumMap<ImportStage,AtomicInteger> progress=new EnumMap<>(ImportStage.class);
    @Override public void progress(    ImportStage stage,    int percent){
      if (percent > 100) {
        fail("Expected percentage to be 0..100% but was " + percent);
      }
      AtomicInteger stageProgress=progress.computeIfAbsent(stage,s -> new AtomicInteger());
      int previous=stageProgress.getAndSet(percent);
      if (previous > percent) {
        fail("Progress should go forwards only, but went from " + previous + " to "+ percent);
      }
    }
    void assertAllProgressReachedEnd(){
      assertEquals(ImportStage.values().length,progress.size());
      progress.values().forEach(p -> assertEquals(100,p.get()));
    }
  }
}
