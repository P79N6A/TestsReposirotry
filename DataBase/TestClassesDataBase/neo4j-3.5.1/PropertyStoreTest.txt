public class PropertyStoreTest {
  @ClassRule public static PageCacheRule pageCacheRule=new PageCacheRule(config().withInconsistentReads(false));
  @Rule public final EphemeralFileSystemRule fsRule=new EphemeralFileSystemRule();
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  private EphemeralFileSystemAbstraction fileSystemAbstraction;
  private File storeFile;
  private File idFile;
  @Before public void setup(){
    fileSystemAbstraction=fsRule.get();
    storeFile=testDirectory.databaseLayout().propertyStore();
    idFile=testDirectory.databaseLayout().idPropertyStore();
    fileSystemAbstraction.mkdir(storeFile.getParentFile());
  }
  @Test public void shouldWriteOutTheDynamicChainBeforeUpdatingThePropertyRecord(){
    PageCache pageCache=pageCacheRule.getPageCache(fileSystemAbstraction);
    Config config=Config.defaults(GraphDatabaseSettings.rebuild_idgenerators_fast,"true");
    DynamicStringStore stringPropertyStore=mock(DynamicStringStore.class);
    final PropertyStore store=new PropertyStore(storeFile,idFile,config,new JumpingIdGeneratorFactory(1),pageCache,NullLogProvider.getInstance(),stringPropertyStore,mock(PropertyKeyTokenStore.class),mock(DynamicArrayStore.class),RecordFormatSelector.defaultFormat());
    store.initialise(true);
    try {
      store.makeStoreOk();
      final long propertyRecordId=store.nextId();
      PropertyRecord record=new PropertyRecord(propertyRecordId);
      record.setInUse(true);
      DynamicRecord dynamicRecord=dynamicRecord();
      PropertyBlock propertyBlock=propertyBlockWith(dynamicRecord);
      record.setPropertyBlock(propertyBlock);
      doAnswer(invocation -> {
        PropertyRecord recordBeforeWrite=store.getRecord(propertyRecordId,store.newRecord(),FORCE);
        assertFalse(recordBeforeWrite.inUse());
        return null;
      }
).when(stringPropertyStore).updateRecord(dynamicRecord);
      store.updateRecord(record);
      verify(stringPropertyStore).updateRecord(dynamicRecord);
    }
  finally {
      store.close();
    }
  }
  private DynamicRecord dynamicRecord(){
    DynamicRecord dynamicRecord=new DynamicRecord(42);
    dynamicRecord.setType(PropertyType.STRING.intValue());
    dynamicRecord.setCreated();
    return dynamicRecord;
  }
  private PropertyBlock propertyBlockWith(  DynamicRecord dynamicRecord){
    PropertyBlock propertyBlock=new PropertyBlock();
    PropertyKeyTokenRecord key=new PropertyKeyTokenRecord(10);
    propertyBlock.setSingleBlock(key.getId() | (((long)PropertyType.STRING.intValue()) << 24) | (dynamicRecord.getId() << 28));
    propertyBlock.addValueRecord(dynamicRecord);
    return propertyBlock;
  }
}
