class MessageConsistencyLoggerTest {
  private static final AssertableLogProvider.LogMatcherBuilder INLOG=AssertableLogProvider.inLog(MessageConsistencyLoggerTest.class);
  private final AssertableLogProvider logProvider=new AssertableLogProvider();
  private final InconsistencyMessageLogger logger=new InconsistencyMessageLogger(logProvider.getLog(getClass()));
  @Test void shouldFormatErrorForRecord(){
    logger.error(RecordType.NEO_STORE,new NeoStoreRecord(),"sample message",1,2);
    logProvider.assertExactly(INLOG.error(join("sample message",neoStoreRecord(true,-1),"Inconsistent with: 1 2")));
  }
  @Test void shouldFlattenAMultiLineMessageToASingleLine(){
    logger.error(RecordType.NEO_STORE,new NeoStoreRecord(),"multiple\n line\r\n message",1,2);
    logProvider.assertExactly(INLOG.error(join("multiple line message",neoStoreRecord(true,-1),"Inconsistent with: 1 2")));
  }
  @Test void shouldFormatWarningForRecord(){
    logger.warning(RecordType.NEO_STORE,new NeoStoreRecord(),"sample message",1,2);
    logProvider.assertExactly(INLOG.warn(join("sample message",neoStoreRecord(true,-1),"Inconsistent with: 1 2")));
  }
  @Test void shouldFormatLogForChangedRecord(){
    logger.error(RecordType.NEO_STORE,new NeoStoreRecord(),new NeoStoreRecord(),"sample message",1,2);
    logProvider.assertExactly(INLOG.error(join("sample message","- " + neoStoreRecord(true,-1),"+ " + neoStoreRecord(true,-1),"Inconsistent with: 1 2")));
  }
  private static String join(  String firstLine,  String... lines){
    StringBuilder expected=new StringBuilder(firstLine);
    for (    String line : lines) {
      expected.append(System.lineSeparator()).append(Strings.TAB).append(line);
    }
    return expected.toString();
  }
  private static String neoStoreRecord(  boolean used,  long nextProp){
    NeoStoreRecord record=new NeoStoreRecord();
    record.setInUse(used);
    record.setNextProp(nextProp);
    return record.toString();
  }
}
