public class RecordRelationshipScanCursorTest {
  private static final long RELATIONSHIP_ID=1L;
  @Rule public final PageCacheAndDependenciesRule storage=new PageCacheAndDependenciesRule().with(new DefaultFileSystemRule());
  @Rule public final RandomRule random=new RandomRule();
  private NeoStores neoStores;
  @After public void tearDown(){
    if (neoStores != null) {
      neoStores.close();
    }
  }
  @Before public void setUp(){
    StoreFactory storeFactory=getStoreFactory();
    neoStores=storeFactory.openAllNeoStores(true);
  }
  @Test public void retrieveUsedRelationship(){
    RelationshipStore relationshipStore=neoStores.getRelationshipStore();
    createRelationshipRecord(RELATIONSHIP_ID,1,relationshipStore,true);
    try (RecordRelationshipScanCursor cursor=createRelationshipCursor()){
      cursor.single(RELATIONSHIP_ID);
      assertTrue(cursor.next());
      assertEquals(RELATIONSHIP_ID,cursor.entityReference());
    }
   }
  @Test public void retrieveUnusedRelationship(){
    RelationshipStore relationshipStore=neoStores.getRelationshipStore();
    relationshipStore.setHighId(10);
    createRelationshipRecord(RELATIONSHIP_ID,1,relationshipStore,false);
    try (RecordRelationshipScanCursor cursor=createRelationshipCursor()){
      cursor.single(RELATIONSHIP_ID);
      assertFalse(cursor.next());
    }
   }
  @Test public void shouldScanAllInUseRelationships(){
    RelationshipStore relationshipStore=neoStores.getRelationshipStore();
    int count=100;
    relationshipStore.setHighId(count);
    Set<Long> expected=new HashSet<>();
    for (long id=0; id < count; id++) {
      boolean inUse=random.nextBoolean();
      createRelationshipRecord(id,1,relationshipStore,inUse);
      if (inUse) {
        expected.add(id);
      }
    }
    assertSeesRelationships(expected,ANY_RELATIONSHIP_TYPE);
  }
  @Test public void shouldScanAllInUseRelationshipsOfCertainType(){
    RelationshipStore relationshipStore=neoStores.getRelationshipStore();
    int count=100;
    relationshipStore.setHighId(count);
    Set<Long> expected=new HashSet<>();
    int theType=1;
    for (long id=0; id < count; id++) {
      boolean inUse=random.nextBoolean();
      int type=random.nextInt(3);
      createRelationshipRecord(id,type,relationshipStore,inUse);
      if (inUse && type == theType) {
        expected.add(id);
      }
    }
    assertSeesRelationships(expected,theType);
  }
  private void assertSeesRelationships(  Set<Long> expected,  int type){
    try (RecordRelationshipScanCursor cursor=createRelationshipCursor()){
      cursor.scan(type);
      while (cursor.next()) {
        assertTrue(cursor.toString(),expected.remove(cursor.entityReference()));
      }
    }
     assertTrue(expected.isEmpty());
  }
  private void createRelationshipRecord(  long id,  int type,  RelationshipStore relationshipStore,  boolean used){
    relationshipStore.updateRecord(new RelationshipRecord(id).initialize(used,-1,1,2,type,-1,-1,-1,-1,true,true));
  }
  private StoreFactory getStoreFactory(){
    return new StoreFactory(storage.directory().databaseLayout(),Config.defaults(),new DefaultIdGeneratorFactory(storage.fileSystem()),storage.pageCache(),storage.fileSystem(),NullLogProvider.getInstance(),EmptyVersionContextSupplier.EMPTY);
  }
  private RecordRelationshipScanCursor createRelationshipCursor(){
    return new RecordRelationshipScanCursor(neoStores.getRelationshipStore());
  }
}
