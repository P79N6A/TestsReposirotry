public class HtmlIT extends AbstractRestFunctionalTestBase {
  private static FunctionalTestHelper functionalTestHelper;
  private static GraphDbHelper helper;
  private long thomasAnderson;
  private long trinity;
  private long thomasAndersonLovesTrinity;
  @BeforeClass public static void setupServer(){
    functionalTestHelper=new FunctionalTestHelper(server());
    helper=functionalTestHelper.getGraphDbHelper();
  }
  @Before public void setupTheDatabase(){
    thomasAnderson=createAndIndexNode("Thomas Anderson");
    trinity=createAndIndexNode("Trinity");
    long tank=createAndIndexNode("Tank");
    long knowsRelationshipId=helper.createRelationship("KNOWS",thomasAnderson,trinity);
    thomasAndersonLovesTrinity=helper.createRelationship("LOVES",thomasAnderson,trinity);
    helper.setRelationshipProperties(thomasAndersonLovesTrinity,Collections.singletonMap("strength",100));
    helper.createRelationship("KNOWS",thomasAnderson,tank);
    helper.createRelationship("KNOWS",trinity,tank);
    helper.createRelationshipIndex("relationships");
    helper.addRelationshipToIndex("relationships","key","value",knowsRelationshipId);
    helper.createRelationshipIndex("relationships2");
    helper.addRelationshipToIndex("relationships2","key2","value2",knowsRelationshipId);
  }
  private long createAndIndexNode(  String name){
    long id=helper.createNode();
    helper.setNodeProperties(id,Collections.singletonMap("name",name));
    helper.addNodeToIndex("node","name",name,id);
    return id;
  }
  @Test public void shouldGetRoot(){
    JaxRsResponse response=RestRequest.req().get(functionalTestHelper.dataUri(),MediaType.TEXT_HTML_TYPE);
    assertEquals(Status.OK.getStatusCode(),response.getStatus());
    assertValidHtml(response.getEntity());
    response.close();
  }
  @Test public void shouldGetRootWithHTTP(){
    HTTP.Response response=HTTP.withHeaders("Accept",MediaType.TEXT_HTML).GET(functionalTestHelper.dataUri());
    assertEquals(Status.OK.getStatusCode(),response.status());
    assertValidHtml(response.rawContent());
  }
  @Test public void shouldGetNodeIndexRoot(){
    JaxRsResponse response=RestRequest.req().get(functionalTestHelper.nodeIndexUri(),MediaType.TEXT_HTML_TYPE);
    assertEquals(Status.OK.getStatusCode(),response.getStatus());
    assertValidHtml(response.getEntity());
    response.close();
  }
  @Test public void shouldGetRelationshipIndexRoot(){
    JaxRsResponse response=RestRequest.req().get(functionalTestHelper.relationshipIndexUri(),MediaType.TEXT_HTML_TYPE);
    assertEquals(Status.OK.getStatusCode(),response.getStatus());
    assertValidHtml(response.getEntity());
    response.close();
  }
  @Test public void shouldGetTrinityWhenSearchingForHer(){
    JaxRsResponse response=RestRequest.req().get(functionalTestHelper.indexNodeUri("node","name","Trinity"),MediaType.TEXT_HTML_TYPE);
    assertEquals(Status.OK.getStatusCode(),response.getStatus());
    String entity=response.getEntity();
    assertTrue(entity.contains("Trinity"));
    assertValidHtml(entity);
    response.close();
  }
  @Test public void shouldGetThomasAndersonDirectly(){
    JaxRsResponse response=RestRequest.req().get(functionalTestHelper.nodeUri(thomasAnderson),MediaType.TEXT_HTML_TYPE);
    assertEquals(Status.OK.getStatusCode(),response.getStatus());
    String entity=response.getEntity();
    assertTrue(entity.contains("Thomas Anderson"));
    assertValidHtml(entity);
    response.close();
  }
  @Test public void shouldGetSomeRelationships(){
    final RestRequest request=RestRequest.req();
    JaxRsResponse response=request.get(functionalTestHelper.relationshipsUri(thomasAnderson,RelationshipDirection.all.name(),"KNOWS"),MediaType.TEXT_HTML_TYPE);
    assertEquals(Status.OK.getStatusCode(),response.getStatus());
    String entity=response.getEntity();
    assertTrue(entity.contains("KNOWS"));
    assertFalse(entity.contains("LOVES"));
    assertValidHtml(entity);
    response.close();
    response=request.get(functionalTestHelper.relationshipsUri(thomasAnderson,RelationshipDirection.all.name(),"LOVES"),MediaType.TEXT_HTML_TYPE);
    entity=response.getEntity();
    assertFalse(entity.contains("KNOWS"));
    assertTrue(entity.contains("LOVES"));
    assertValidHtml(entity);
    response.close();
    response=request.get(functionalTestHelper.relationshipsUri(thomasAnderson,RelationshipDirection.all.name(),"LOVES","KNOWS"),MediaType.TEXT_HTML_TYPE);
    entity=response.getEntity();
    assertTrue(entity.contains("KNOWS"));
    assertTrue(entity.contains("LOVES"));
    assertValidHtml(entity);
    response.close();
  }
  @Test public void shouldGetThomasAndersonLovesTrinityRelationship(){
    JaxRsResponse response=RestRequest.req().get(functionalTestHelper.relationshipUri(thomasAndersonLovesTrinity),MediaType.TEXT_HTML_TYPE);
    assertEquals(Status.OK.getStatusCode(),response.getStatus());
    String entity=response.getEntity();
    assertTrue(entity.contains("strength"));
    assertTrue(entity.contains("100"));
    assertTrue(entity.contains("LOVES"));
    assertValidHtml(entity);
    response.close();
  }
  private void assertValidHtml(  String entity){
    assertTrue(entity.contains("<html>"));
    assertTrue(entity.contains("</html>"));
  }
}
