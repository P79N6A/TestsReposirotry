public class SessionExtension implements BeforeEachCallback, AfterEachCallback {
  private GraphDatabaseAPI gdb;
  private BoltStateMachineFactoryImpl boltFactory;
  private List<BoltStateMachine> runningMachines=new ArrayList<>();
  private boolean authEnabled;
  private Authentication authentication(  AuthManager authManager,  UserManagerSupplier userManagerSupplier){
    return new BasicAuthentication(authManager,userManagerSupplier);
  }
  public BoltStateMachine newMachine(  long version,  BoltChannel boltChannel){
    if (boltFactory == null) {
      throw new IllegalStateException("Cannot access test environment before test is running.");
    }
    BoltStateMachine machine=boltFactory.newStateMachine(version,boltChannel);
    runningMachines.add(machine);
    return machine;
  }
  @Override public void beforeEach(  ExtensionContext extensionContext){
    Map<Setting<?>,String> config=new HashMap<>();
    config.put(GraphDatabaseSettings.auth_enabled,Boolean.toString(authEnabled));
    gdb=(GraphDatabaseAPI)new TestGraphDatabaseFactory().newImpermanentDatabase(config);
    DependencyResolver resolver=gdb.getDependencyResolver();
    Authentication authentication=authentication(resolver.resolveDependency(AuthManager.class),resolver.resolveDependency(UserManagerSupplier.class));
    boltFactory=new BoltStateMachineFactoryImpl(resolver.resolveDependency(DatabaseManager.class),new UsageData(null),authentication,Clock.systemUTC(),Config.defaults(),NullLogService.getInstance());
  }
  @Override public void afterEach(  ExtensionContext extensionContext){
    try {
      if (runningMachines != null) {
        IOUtils.closeAll(runningMachines);
      }
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
    gdb.shutdown();
  }
}
