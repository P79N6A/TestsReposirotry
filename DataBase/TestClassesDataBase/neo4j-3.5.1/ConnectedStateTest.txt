class ConnectedStateTest {
  @Test void shouldAddServerVersionMetadataOnHelloMessage() throws Exception {
    Map<String,Object> meta=map("user_agent","3.0",PRINCIPAL,"neo4j",CREDENTIALS,"password");
    HelloMessage helloMessage=new HelloMessage(meta);
    ConnectedState state=new ConnectedState();
    BoltStateMachineState readyState=mock(BoltStateMachineState.class);
    StateMachineContext context=mock(StateMachineContext.class);
    BoltStateMachineSPI boltSpi=mock(BoltStateMachineSPI.class,RETURNS_MOCKS);
    MutableConnectionState connectionState=new MutableConnectionState();
    state.setReadyState(readyState);
    when(context.boltSpi()).thenReturn(boltSpi);
    when(context.connectionState()).thenReturn(connectionState);
    when(boltSpi.version()).thenReturn("42.42.42");
    MutableConnectionState connectionStateMock=mock(MutableConnectionState.class);
    when(context.connectionState()).thenReturn(connectionStateMock);
    when(context.connectionId()).thenReturn("connection-uuid");
    when(boltSpi.authenticate(meta)).thenReturn(AuthenticationResult.AUTH_DISABLED);
    BoltStateMachineState newState=state.process(helloMessage,context);
    assertEquals(readyState,newState);
    verify(connectionStateMock).onMetadata("server",stringValue("42.42.42"));
    verify(connectionStateMock).onMetadata(eq("connection_id"),any(StringValue.class));
  }
}
