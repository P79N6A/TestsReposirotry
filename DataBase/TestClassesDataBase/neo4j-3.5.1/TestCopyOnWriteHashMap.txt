public class TestCopyOnWriteHashMap {
  @Test public void keySetUnaffectedByChanges(){
    Map<Integer,String> map=new CopyOnWriteHashMap<>();
    map.put(0,"0");
    map.put(1,"1");
    map.put(2,"2");
    assertThat(map,hasKey(0));
    assertThat(map,hasKey(1));
    assertThat(map,hasKey(2));
    Iterator<Integer> keys=map.keySet().iterator();
    map.remove(1);
    List<Integer> keysBeforeDeletion=Iterators.asList(keys);
    assertThat(keysBeforeDeletion,contains(0,1,2));
  }
  @Test public void entrySetUnaffectedByChanges(){
    Map<Integer,String> map=new CopyOnWriteHashMap<>();
    map.put(0,"0");
    map.put(1,"1");
    map.put(2,"2");
    @SuppressWarnings("unchecked") Map.Entry<Integer,String>[] allEntries=map.entrySet().toArray(new Map.Entry[0]);
    assertThat(map.entrySet(),containsInAnyOrder(allEntries));
    Iterator<Entry<Integer,String>> entries=map.entrySet().iterator();
    map.remove(1);
    List<Entry<Integer,String>> entriesBeforeRemoval=Iterators.asList(entries);
    assertThat(entriesBeforeRemoval,containsInAnyOrder(allEntries));
  }
  @Test public void snapshotShouldKeepData(){
    CopyOnWriteHashMap<Integer,String> map=new CopyOnWriteHashMap<>();
    map.put(0,"0");
    Map<Integer,String> snapshot=map.snapshot();
    assertThat(snapshot.get(0),is("0"));
    assertThat(map.remove(0),is("0"));
    assertThat(snapshot.get(0),is("0"));
  }
  @Test(expected=UnsupportedOperationException.class) public void snapshotMustBeUnmodifiable(){
    new CopyOnWriteHashMap<>().snapshot().put(0,"0");
  }
}
