public class TransactionStatementSequenceTest {
  @Test public void shouldAllowReadStatementAfterReadStatement(){
    KernelTransaction tx=kernelTransaction(AnonymousContext.read());
    tx.dataRead();
    tx.dataRead();
  }
  @Test public void shouldAllowDataStatementAfterReadStatement() throws Exception {
    KernelTransaction tx=kernelTransaction(AnonymousContext.write());
    tx.dataRead();
    tx.dataWrite();
  }
  @Test public void shouldAllowSchemaStatementAfterReadStatement() throws Exception {
    KernelTransaction tx=kernelTransaction(AUTH_DISABLED);
    tx.dataRead();
    tx.schemaWrite();
  }
  @Test public void shouldRejectSchemaStatementAfterDataStatement() throws Exception {
    KernelTransaction tx=kernelTransaction(AUTH_DISABLED);
    tx.dataWrite();
    try {
      tx.schemaWrite();
      fail("expected exception");
    }
 catch (    InvalidTransactionTypeKernelException e) {
      assertEquals("Cannot perform schema updates in a transaction that has performed data updates.",e.getMessage());
    }
  }
  @Test public void shouldRejectDataStatementAfterSchemaStatement() throws Exception {
    KernelTransaction tx=kernelTransaction(AUTH_DISABLED);
    tx.schemaWrite();
    try {
      tx.dataWrite();
      fail("expected exception");
    }
 catch (    InvalidTransactionTypeKernelException e) {
      assertEquals("Cannot perform data updates in a transaction that has performed schema updates.",e.getMessage());
    }
  }
  @Test public void shouldAllowDataStatementAfterDataStatement() throws Exception {
    KernelTransaction tx=kernelTransaction(AnonymousContext.write());
    tx.dataWrite();
    tx.dataWrite();
  }
  @Test public void shouldAllowSchemaStatementAfterSchemaStatement() throws Exception {
    KernelTransaction tx=kernelTransaction(AUTH_DISABLED);
    tx.schemaWrite();
    tx.schemaWrite();
  }
  @Test public void shouldAllowReadStatementAfterDataStatement() throws Exception {
    KernelTransaction tx=kernelTransaction(AnonymousContext.write());
    tx.dataWrite();
    tx.dataRead();
  }
  @Test public void shouldAllowReadStatementAfterSchemaStatement() throws Exception {
    KernelTransaction tx=kernelTransaction(AUTH_DISABLED);
    tx.schemaWrite();
    tx.dataRead();
  }
}
