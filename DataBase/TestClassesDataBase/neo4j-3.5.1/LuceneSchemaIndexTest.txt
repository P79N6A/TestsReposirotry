@ExtendWith({DefaultFileSystemExtension.class,TestDirectoryExtension.class}) class LuceneSchemaIndexTest {
  @Inject private DefaultFileSystemAbstraction fs;
  @Inject private TestDirectory testDir;
  private final DirectoryFactory dirFactory=new DirectoryFactory.InMemoryDirectoryFactory();
  private SchemaIndex index;
  private final IndexDescriptor descriptor=TestIndexDescriptorFactory.forLabel(3,5);
  @AfterEach void closeIndex() throws Exception {
    IOUtils.closeAll(index,dirFactory);
  }
  @Test void markAsOnline() throws IOException {
    index=createIndex();
    index.getIndexWriter().addDocument(newDocument());
    index.markAsOnline();
    assertTrue(index.isOnline(),"Should have had online status set");
  }
  @Test void markAsOnlineAndClose() throws IOException {
    index=createIndex();
    index.getIndexWriter().addDocument(newDocument());
    index.markAsOnline();
    index.close();
    index=openIndex();
    assertTrue(index.isOnline(),"Should have had online status set");
  }
  @Test void markAsOnlineTwice() throws IOException {
    index=createIndex();
    index.markAsOnline();
    index.getIndexWriter().addDocument(newDocument());
    index.markAsOnline();
    assertTrue(index.isOnline(),"Should have had online status set");
  }
  @Test void markAsOnlineTwiceAndClose() throws IOException {
    index=createIndex();
    index.markAsOnline();
    index.getIndexWriter().addDocument(newDocument());
    index.markAsOnline();
    index.close();
    index=openIndex();
    assertTrue(index.isOnline(),"Should have had online status set");
  }
  @Test void markAsOnlineIsRespectedByOtherWriter() throws IOException {
    index=createIndex();
    index.markAsOnline();
    index.close();
    index=openIndex();
    index.getIndexWriter().addDocument(newDocument());
    index.close();
    index=openIndex();
    assertTrue(index.isOnline(),"Should have had online status set");
  }
  private SchemaIndex createIndex() throws IOException {
    SchemaIndex schemaIndex=newSchemaIndex();
    schemaIndex.create();
    schemaIndex.open();
    return schemaIndex;
  }
  private SchemaIndex openIndex() throws IOException {
    SchemaIndex schemaIndex=newSchemaIndex();
    schemaIndex.open();
    return schemaIndex;
  }
  private SchemaIndex newSchemaIndex(){
    LuceneSchemaIndexBuilder builder=LuceneSchemaIndexBuilder.create(descriptor,Config.defaults());
    return builder.withIndexRootFolder(new File(testDir.directory("index"),"testIndex")).withDirectoryFactory(dirFactory).withFileSystem(fs).build();
  }
  private static Document newDocument(){
    Document doc=new Document();
    doc.add(new StringField("test",UUID.randomUUID().toString(),Field.Store.YES));
    return doc;
  }
}
