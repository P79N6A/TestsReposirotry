private static class SyncNotifierDirectory extends Directory {
  private final Directory delegate;
  private final CountDownLatch signal;
  SyncNotifierDirectory(  Directory delegate,  CountDownLatch signal){
    this.delegate=delegate;
    this.signal=signal;
  }
  @Override public String[] listAll() throws IOException {
    return delegate.listAll();
  }
  @Override public void deleteFile(  String name) throws IOException {
    delegate.deleteFile(name);
  }
  @Override public long fileLength(  String name) throws IOException {
    return delegate.fileLength(name);
  }
  @Override public IndexOutput createOutput(  String name,  IOContext context) throws IOException {
    return delegate.createOutput(name,context);
  }
  @Override public void sync(  Collection<String> names) throws IOException {
    if (names.stream().noneMatch(name -> name.startsWith(IndexFileNames.PENDING_SEGMENTS))) {
      try {
        signal.countDown();
        Thread.sleep(500);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    delegate.sync(names);
  }
  @Override public void renameFile(  String source,  String dest) throws IOException {
    delegate.renameFile(source,dest);
  }
  @Override public IndexInput openInput(  String name,  IOContext context) throws IOException {
    return delegate.openInput(name,context);
  }
  @Override public Lock obtainLock(  String name) throws IOException {
    return delegate.obtainLock(name);
  }
  @Override public void close() throws IOException {
    delegate.close();
  }
}
