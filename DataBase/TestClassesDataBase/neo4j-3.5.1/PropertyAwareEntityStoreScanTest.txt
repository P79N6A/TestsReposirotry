public class PropertyAwareEntityStoreScanTest {
  private final LockService locks=mock(LockService.class,RETURNS_MOCKS);
  private final NodeStore nodeStore=mock(NodeStore.class);
  private final PropertyStore propertyStore=mock(PropertyStore.class);
  private final NeoStores neoStores=mock(NeoStores.class);
  @Before public void before(){
    when(neoStores.getNodeStore()).thenReturn(nodeStore);
    when(neoStores.getPropertyStore()).thenReturn(propertyStore);
  }
  @Test public void shouldGiveBackCompletionPercentage(){
    long total=10;
    when(nodeStore.getHighId()).thenReturn(total);
    NodeRecord emptyRecord=new NodeRecord(0);
    NodeRecord inUseRecord=new NodeRecord(42);
    inUseRecord.setInUse(true);
    when(nodeStore.newRecord()).thenReturn(emptyRecord);
    when(nodeStore.getRecord(anyLong(),any(NodeRecord.class),any(RecordLoad.class))).thenReturn(inUseRecord,inUseRecord,inUseRecord,inUseRecord,inUseRecord,inUseRecord,inUseRecord,inUseRecord,inUseRecord,inUseRecord);
    final PercentageSupplier percentageSupplier=new PercentageSupplier();
    final PropertyAwareEntityStoreScan<StorageNodeCursor,RuntimeException> scan=new PropertyAwareEntityStoreScan<StorageNodeCursor,RuntimeException>(new RecordStorageReader(neoStores),total,IntPredicates.alwaysTrue(),id -> locks.acquireNodeLock(id,LockService.LockType.READ_LOCK)){
      private int read;
      @Override public boolean process(      StorageNodeCursor node){
        read++;
        float expected=(float)read / total;
        float actual=percentageSupplier.get();
        assertEquals(String.format("%f==%f",expected,actual),expected,actual,0.0);
        return false;
      }
      @Override protected StorageNodeCursor allocateCursor(      StorageReader storageReader){
        return storageReader.allocateNodeCursor();
      }
    }
;
    percentageSupplier.setStoreScan(scan);
    scan.run();
  }
private static class PercentageSupplier implements Supplier<Float> {
    private StoreScan<?> storeScan;
    @Override public Float get(){
      assertNotNull(storeScan);
      PopulationProgress progress=storeScan.getProgress();
      return (float)progress.getCompleted() / (float)progress.getTotal();
    }
    void setStoreScan(    StoreScan<?> storeScan){
      this.storeScan=storeScan;
    }
  }
}
