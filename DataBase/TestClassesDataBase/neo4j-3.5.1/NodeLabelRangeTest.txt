public class NodeLabelRangeTest {
  @Test public void shouldTransposeNodeIdsAndLabelIds(){
    long[][] labelsPerNode=new long[][]{{1},{1,3},{3,5,7},{},{1,5,7},{},{},{1,2,3,4}};
    NodeLabelRange range=new NodeLabelRange(0,labelsPerNode);
    assertArrayEquals(new long[]{0,1,2,3,4,5,6,7},range.nodes());
    for (int i=0; i < labelsPerNode.length; i++) {
      assertArrayEquals(labelsPerNode[i],range.labels(i));
    }
  }
  @Test public void shouldRebaseOnRangeId(){
    long[][] labelsPerNode=new long[][]{{1},{1,3},{3,5,7},{},{1,5,7},{},{},{1,2,3,4}};
    NodeLabelRange range=new NodeLabelRange(10,labelsPerNode);
    long baseNodeId=range.id() * labelsPerNode.length;
    long[] expectedNodeIds=new long[labelsPerNode.length];
    for (int i=0; i < expectedNodeIds.length; i++) {
      expectedNodeIds[i]=baseNodeId + i;
    }
    assertArrayEquals(expectedNodeIds,range.nodes());
  }
}
