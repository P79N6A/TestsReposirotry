@RunWith(Parameterized.class) public class DefaultSchemaIndexConfigTest {
  private static final String KEY="key";
  private static final TestLabels LABEL=TestLabels.LABEL_ONE;
  private static final GraphDatabaseBuilder dbBuilder=new TestGraphDatabaseFactory().newImpermanentDatabaseBuilder();
  @Parameterized.Parameters(name="{0}") public static List<GraphDatabaseSettings.SchemaIndex> providers(){
    List<GraphDatabaseSettings.SchemaIndex> providers=new ArrayList<>(Arrays.asList(GraphDatabaseSettings.SchemaIndex.values()));
    providers.add(null);
    return providers;
  }
  @Parameterized.Parameter public GraphDatabaseSettings.SchemaIndex provider;
  @Test public void shouldUseConfiguredIndexProvider() throws IndexNotFoundKernelException {
    GraphDatabaseService db=dbBuilder.setConfig(default_schema_provider,provider == null ? null : provider.providerName()).newGraphDatabase();
    try {
      createIndex(db);
      assertIndexProvider(db,provider == null ? GenericNativeIndexProvider.DESCRIPTOR.name() : provider.providerName());
    }
  finally {
      db.shutdown();
    }
  }
  private void assertIndexProvider(  GraphDatabaseService db,  String expectedProviderIdentifier) throws IndexNotFoundKernelException {
    GraphDatabaseAPI graphDatabaseAPI=(GraphDatabaseAPI)db;
    try (Transaction tx=graphDatabaseAPI.beginTx()){
      KernelTransaction ktx=graphDatabaseAPI.getDependencyResolver().resolveDependency(ThreadToStatementContextBridge.class).getKernelTransactionBoundToThisThread(true);
      TokenRead tokenRead=ktx.tokenRead();
      int labelId=tokenRead.nodeLabel(LABEL.name());
      int propertyId=tokenRead.propertyKey(KEY);
      IndexReference index=ktx.schemaRead().index(labelId,propertyId);
      assertEquals("expected IndexProvider.Descriptor",expectedProviderIdentifier,new IndexProviderDescriptor(index.providerKey(),index.providerVersion()).name());
      tx.success();
    }
   }
  private void createIndex(  GraphDatabaseService db){
    try (Transaction tx=db.beginTx()){
      db.schema().indexFor(LABEL).on(KEY).create();
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      db.schema().awaitIndexesOnline(1,TimeUnit.MINUTES);
      tx.success();
    }
   }
}
