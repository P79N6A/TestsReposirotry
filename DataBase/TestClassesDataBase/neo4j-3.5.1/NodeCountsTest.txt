public class NodeCountsTest {
  @Rule public final DatabaseRule db=new ImpermanentDatabaseRule();
  @Rule public final ThreadingRule threading=new ThreadingRule();
  private Supplier<KernelTransaction> kernelTransactionSupplier;
  @Before public void setUp(){
    kernelTransactionSupplier=() -> db.getGraphDatabaseAPI().getDependencyResolver().resolveDependency(ThreadToStatementContextBridge.class).getKernelTransactionBoundToThisThread(true);
  }
  @Test public void shouldReportNumberOfNodesInAnEmptyGraph(){
    long nodeCount=numberOfNodes();
    assertEquals(0,nodeCount);
  }
  @Test public void shouldReportNumberOfNodes(){
    GraphDatabaseService graphDb=db.getGraphDatabaseAPI();
    try (Transaction tx=graphDb.beginTx()){
      graphDb.createNode();
      graphDb.createNode();
      tx.success();
    }
     long nodeCount=numberOfNodes();
    assertEquals(2,nodeCount);
  }
  @Test public void shouldReportAccurateNumberOfNodesAfterDeletion(){
    GraphDatabaseService graphDb=db.getGraphDatabaseAPI();
    Node one;
    try (Transaction tx=graphDb.beginTx()){
      one=graphDb.createNode();
      graphDb.createNode();
      tx.success();
    }
     try (Transaction tx=graphDb.beginTx()){
      one.delete();
      tx.success();
    }
     long nodeCount=numberOfNodes();
    assertEquals(1,nodeCount);
  }
  @Test public void shouldIncludeNumberOfNodesAddedInTransaction(){
    GraphDatabaseService graphDb=db.getGraphDatabaseAPI();
    try (Transaction tx=graphDb.beginTx()){
      graphDb.createNode();
      graphDb.createNode();
      tx.success();
    }
     long before=numberOfNodes();
    try (Transaction tx=graphDb.beginTx()){
      graphDb.createNode();
      long nodeCount=countsForNode();
      assertEquals(before + 1,nodeCount);
      tx.success();
    }
   }
  @Test public void shouldIncludeNumberOfNodesDeletedInTransaction(){
    GraphDatabaseService graphDb=db.getGraphDatabaseAPI();
    Node one;
    try (Transaction tx=graphDb.beginTx()){
      one=graphDb.createNode();
      graphDb.createNode();
      tx.success();
    }
     long before=numberOfNodes();
    try (Transaction tx=graphDb.beginTx()){
      one.delete();
      long nodeCount=countsForNode();
      assertEquals(before - 1,nodeCount);
      tx.success();
    }
   }
  @Test public void shouldNotSeeNodeCountsOfOtherTransaction() throws Exception {
    GraphDatabaseService graphDb=db.getGraphDatabaseAPI();
    final Barrier.Control barrier=new Barrier.Control();
    long before=numberOfNodes();
    Future<Long> done=threading.execute(new NamedFunction<GraphDatabaseService,Long>("create-nodes"){
      @Override public Long apply(      GraphDatabaseService graphDb){
        try (Transaction tx=graphDb.beginTx()){
          graphDb.createNode();
          graphDb.createNode();
          barrier.reached();
          long whatThisThreadSees=countsForNode();
          tx.success();
          return whatThisThreadSees;
        }
       }
    }
,graphDb);
    barrier.await();
    long during=numberOfNodes();
    barrier.release();
    long whatOtherThreadSees=done.get();
    long after=numberOfNodes();
    assertEquals(0,before);
    assertEquals(0,during);
    assertEquals(after,whatOtherThreadSees);
    assertEquals(2,after);
  }
  /** 
 * Transactional version of  {@link #countsForNode()} 
 */
  private long numberOfNodes(){
    try (Transaction tx=db.getGraphDatabaseAPI().beginTx()){
      long nodeCount=countsForNode();
      tx.success();
      return nodeCount;
    }
   }
  private long countsForNode(){
    return kernelTransactionSupplier.get().dataRead().countsForNode(StatementConstants.ANY_LABEL);
  }
}
