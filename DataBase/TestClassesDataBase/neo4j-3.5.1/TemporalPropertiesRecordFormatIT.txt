@ExtendWith(TestDirectoryExtension.class) class TemporalPropertiesRecordFormatIT {
  @Inject private TestDirectory testDirectory;
  @Test void failToCreateDateOnOldDatabase(){
    File storeDir=testDirectory.storeDir();
    GraphDatabaseService nonUpgradedStore=startNonUpgradableDatabaseWithFormat(storeDir,StandardV3_2.NAME);
    TransactionFailureException failureException=assertThrows(TransactionFailureException.class,() -> {
      try (Transaction transaction=nonUpgradedStore.beginTx()){
        Node node=nonUpgradedStore.createNode();
        node.setProperty("a",DateValue.date(1991,5,3).asObjectCopy());
        transaction.success();
      }
     }
);
    assertEquals("Current record format does not support TEMPORAL_PROPERTIES. Please upgrade your store to the format that support requested capability.",Exceptions.rootCause(failureException).getMessage());
    nonUpgradedStore.shutdown();
    GraphDatabaseService restartedOldFormatDatabase=startNonUpgradableDatabaseWithFormat(storeDir,StandardV3_2.NAME);
    try (Transaction transaction=restartedOldFormatDatabase.beginTx()){
      Node node=restartedOldFormatDatabase.createNode();
      node.setProperty("c","d");
      transaction.success();
    }
     restartedOldFormatDatabase.shutdown();
  }
  @Test void failToCreateDateArrayOnOldDatabase(){
    File storeDir=testDirectory.storeDir();
    GraphDatabaseService nonUpgradedStore=startNonUpgradableDatabaseWithFormat(storeDir,StandardV3_2.NAME);
    LocalDate date=DateValue.date(1991,5,3).asObjectCopy();
    TransactionFailureException failureException=assertThrows(TransactionFailureException.class,() -> {
      try (Transaction transaction=nonUpgradedStore.beginTx()){
        Node node=nonUpgradedStore.createNode();
        node.setProperty("a",new LocalDate[]{date,date});
        transaction.success();
      }
     }
);
    assertEquals("Current record format does not support TEMPORAL_PROPERTIES. Please upgrade your store " + "to the format that support requested capability.",Exceptions.rootCause(failureException).getMessage());
    nonUpgradedStore.shutdown();
    GraphDatabaseService restartedOldFormatDatabase=startNonUpgradableDatabaseWithFormat(storeDir,StandardV3_2.NAME);
    try (Transaction transaction=restartedOldFormatDatabase.beginTx()){
      Node node=restartedOldFormatDatabase.createNode();
      node.setProperty("c","d");
      transaction.success();
    }
     restartedOldFormatDatabase.shutdown();
  }
  @Test void createDatePropertyOnLatestDatabase(){
    File storeDir=testDirectory.storeDir();
    Label label=Label.label("DateNode");
    String propertyKey="a";
    LocalDate date=DateValue.date(1991,5,3).asObjectCopy();
    GraphDatabaseService database=startDatabaseWithFormat(storeDir,Standard.LATEST_NAME);
    try (Transaction transaction=database.beginTx()){
      Node node=database.createNode(label);
      node.setProperty(propertyKey,date);
      transaction.success();
    }
     database.shutdown();
    GraphDatabaseService restartedDatabase=startDatabaseWithFormat(storeDir,Standard.LATEST_NAME);
    try (Transaction ignored=restartedDatabase.beginTx()){
      assertNotNull(restartedDatabase.findNode(label,propertyKey,date));
    }
     restartedDatabase.shutdown();
  }
  @Test void createDateArrayOnLatestDatabase(){
    File storeDir=testDirectory.storeDir();
    Label label=Label.label("DateNode");
    String propertyKey="a";
    LocalDate date=DateValue.date(1991,5,3).asObjectCopy();
    GraphDatabaseService database=startDatabaseWithFormat(storeDir,Standard.LATEST_NAME);
    try (Transaction transaction=database.beginTx()){
      Node node=database.createNode(label);
      node.setProperty(propertyKey,new LocalDate[]{date,date});
      transaction.success();
    }
     database.shutdown();
    GraphDatabaseService restartedDatabase=startDatabaseWithFormat(storeDir,Standard.LATEST_NAME);
    try (Transaction ignored=restartedDatabase.beginTx()){
      try (ResourceIterator<Node> nodes=restartedDatabase.findNodes(label)){
        Node node=nodes.next();
        LocalDate[] points=(LocalDate[])node.getProperty(propertyKey);
        assertThat(points,arrayWithSize(2));
      }
     }
     restartedDatabase.shutdown();
  }
  @Test void failToOpenStoreWithDatePropertyUsingOldFormat(){
    File storeDir=testDirectory.storeDir();
    GraphDatabaseService database=startDatabaseWithFormat(storeDir,StandardV3_4.NAME);
    try (Transaction transaction=database.beginTx()){
      Node node=database.createNode();
      node.setProperty("a",DateValue.date(1991,5,3));
      transaction.success();
    }
     database.shutdown();
    Throwable throwable=assertThrows(Throwable.class,() -> startDatabaseWithFormat(storeDir,StandardV3_2.NAME));
    assertSame(StoreUpgrader.AttemptedDowngradeException.class,Exceptions.rootCause(throwable).getClass());
  }
}
