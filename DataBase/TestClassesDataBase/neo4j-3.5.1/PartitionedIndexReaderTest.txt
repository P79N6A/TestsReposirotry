@RunWith(MockitoJUnitRunner.class) public class PartitionedIndexReaderTest {
  private static final int PROP_KEY=1;
  private static final int LABEL_ID=0;
  private IndexDescriptor schemaIndexDescriptor=TestIndexDescriptorFactory.forLabel(LABEL_ID,PROP_KEY);
  @Mock private IndexSamplingConfig samplingConfig;
  @Mock private TaskCoordinator taskCoordinator;
  @Mock private PartitionSearcher partitionSearcher1;
  @Mock private PartitionSearcher partitionSearcher2;
  @Mock private PartitionSearcher partitionSearcher3;
  @Mock private SimpleIndexReader indexReader1;
  @Mock private SimpleIndexReader indexReader2;
  @Mock private SimpleIndexReader indexReader3;
  @Test public void partitionedReaderCloseAllSearchers() throws IOException {
    PartitionedIndexReader partitionedIndexReader=createPartitionedReader();
    partitionedIndexReader.close();
    verify(partitionSearcher1).close();
    verify(partitionSearcher2).close();
    verify(partitionSearcher3).close();
  }
  @Test public void seekOverAllPartitions() throws Exception {
    PartitionedIndexReader indexReader=createPartitionedReaderFromReaders();
    IndexQuery.ExactPredicate query=IndexQuery.exact(1,"Test");
    when(indexReader1.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,1));
    when(indexReader2.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,2));
    when(indexReader3.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,3));
    LongSet results=PrimitiveLongCollections.asSet(indexReader.query(query));
    verifyResult(results);
  }
  @Test public void rangeSeekByNumberOverPartitions() throws Exception {
    PartitionedIndexReader indexReader=createPartitionedReaderFromReaders();
    IndexQuery.RangePredicate<?> query=IndexQuery.range(1,1,true,2,true);
    when(indexReader1.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,1));
    when(indexReader2.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,2));
    when(indexReader3.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,3));
    LongSet results=PrimitiveLongCollections.asSet(indexReader.query(query));
    verifyResult(results);
  }
  @Test public void rangeSeekByStringOverPartitions() throws Exception {
    PartitionedIndexReader indexReader=createPartitionedReaderFromReaders();
    IndexQuery.RangePredicate<?> query=IndexQuery.range(1,"a",false,"b",true);
    when(indexReader1.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,1));
    when(indexReader2.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,2));
    when(indexReader3.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,3));
    LongSet results=PrimitiveLongCollections.asSet(indexReader.query(query));
    verifyResult(results);
  }
  @Test public void rangeSeekByPrefixOverPartitions() throws Exception {
    PartitionedIndexReader indexReader=createPartitionedReaderFromReaders();
    IndexQuery.StringPrefixPredicate query=IndexQuery.stringPrefix(1,stringValue("prefix"));
    when(indexReader1.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,1));
    when(indexReader2.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,2));
    when(indexReader3.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,3));
    LongSet results=PrimitiveLongCollections.asSet(indexReader.query(query));
    verifyResult(results);
  }
  @Test public void scanOverPartitions() throws Exception {
    PartitionedIndexReader indexReader=createPartitionedReaderFromReaders();
    IndexQuery.ExistsPredicate query=IndexQuery.exists(1);
    when(indexReader1.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,1));
    when(indexReader2.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,2));
    when(indexReader3.query(query)).thenReturn(PrimitiveLongResourceCollections.iterator(null,3));
    LongSet results=PrimitiveLongCollections.asSet(indexReader.query(query));
    verifyResult(results);
  }
  @Test public void countNodesOverPartitions(){
    PartitionedIndexReader indexReader=createPartitionedReaderFromReaders();
    when(indexReader1.countIndexedNodes(1,new int[]{PROP_KEY},Values.of("a"))).thenReturn(1L);
    when(indexReader2.countIndexedNodes(1,new int[]{PROP_KEY},Values.of("a"))).thenReturn(2L);
    when(indexReader3.countIndexedNodes(1,new int[]{PROP_KEY},Values.of("a"))).thenReturn(3L);
    assertEquals(6,indexReader.countIndexedNodes(1,new int[]{PROP_KEY},Values.of("a")));
  }
  @Test public void samplingOverPartitions() throws IndexNotFoundKernelException {
    PartitionedIndexReader indexReader=createPartitionedReaderFromReaders();
    when(indexReader1.createSampler()).thenReturn(new SimpleSampler(1));
    when(indexReader2.createSampler()).thenReturn(new SimpleSampler(2));
    when(indexReader3.createSampler()).thenReturn(new SimpleSampler(3));
    IndexSampler sampler=indexReader.createSampler();
    assertEquals(new IndexSample(6,6,6),sampler.sampleIndex());
  }
  private void verifyResult(  LongSet results){
    assertEquals(3,results.size());
    assertTrue(results.contains(1));
    assertTrue(results.contains(2));
    assertTrue(results.contains(3));
  }
  private PartitionedIndexReader createPartitionedReaderFromReaders(){
    return new PartitionedIndexReader(schemaIndexDescriptor,getPartitionReaders());
  }
  private List<SimpleIndexReader> getPartitionReaders(){
    return Arrays.asList(indexReader1,indexReader2,indexReader3);
  }
  private PartitionedIndexReader createPartitionedReader(){
    return new PartitionedIndexReader(getPartitionSearchers(),schemaIndexDescriptor,samplingConfig,taskCoordinator);
  }
  private List<PartitionSearcher> getPartitionSearchers(){
    return Arrays.asList(partitionSearcher1,partitionSearcher2,partitionSearcher3);
  }
private class SimpleSampler implements IndexSampler {
    private long sampleValue;
    SimpleSampler(    long sampleValue){
      this.sampleValue=sampleValue;
    }
    @Override public IndexSample sampleIndex(){
      return new IndexSample(sampleValue,sampleValue,sampleValue);
    }
  }
}
