@ExtendWith(TestDirectoryExtension.class) class RecordFormatMigrationIT {
  @Inject private TestDirectory testDirectory;
  private File storeDir;
  @BeforeEach void setUp(){
    storeDir=testDirectory.storeDir();
  }
  @Test void failToDowngradeFormatWhenUpgradeNotAllowed(){
    GraphDatabaseService database=startDatabaseWithFormatUnspecifiedUpgrade(storeDir,StandardV3_4.NAME);
    try (Transaction transaction=database.beginTx()){
      Node node=database.createNode();
      node.setProperty("a","b");
      transaction.success();
    }
     database.shutdown();
    Throwable throwable=assertThrows(Throwable.class,() -> startDatabaseWithFormatUnspecifiedUpgrade(storeDir,StandardV3_2.NAME));
    assertSame(UpgradeNotAllowedByConfigurationException.class,Exceptions.rootCause(throwable).getClass());
  }
  @Test void failToDowngradeFormatWheUpgradeAllowed(){
    GraphDatabaseService database=startDatabaseWithFormatUnspecifiedUpgrade(storeDir,StandardV3_4.NAME);
    try (Transaction transaction=database.beginTx()){
      Node node=database.createNode();
      node.setProperty("a","b");
      transaction.success();
    }
     database.shutdown();
    Throwable throwable=assertThrows(Throwable.class,() -> new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(storeDir).setConfig(record_format,StandardV3_2.NAME).setConfig(allow_upgrade,Settings.TRUE).newGraphDatabase());
    assertSame(StoreUpgrader.AttemptedDowngradeException.class,Exceptions.rootCause(throwable).getClass());
  }
  @Test void skipMigrationIfFormatSpecifiedInConfig(){
    GraphDatabaseService database=startDatabaseWithFormatUnspecifiedUpgrade(storeDir,StandardV3_2.NAME);
    try (Transaction transaction=database.beginTx()){
      Node node=database.createNode();
      node.setProperty("a","b");
      transaction.success();
    }
     database.shutdown();
    GraphDatabaseAPI nonUpgradedStore=(GraphDatabaseAPI)startDatabaseWithFormatUnspecifiedUpgrade(storeDir,StandardV3_2.NAME);
    RecordStorageEngine storageEngine=nonUpgradedStore.getDependencyResolver().resolveDependency(RecordStorageEngine.class);
    assertEquals(StandardV3_2.NAME,storageEngine.testAccessNeoStores().getRecordFormats().name());
    nonUpgradedStore.shutdown();
  }
  @Test void skipMigrationIfStoreFormatNotSpecifiedButIsAvailableInRuntime(){
    GraphDatabaseService database=startDatabaseWithFormatUnspecifiedUpgrade(storeDir,StandardV3_2.NAME);
    try (Transaction transaction=database.beginTx()){
      Node node=database.createNode();
      node.setProperty("a","b");
      transaction.success();
    }
     database.shutdown();
    GraphDatabaseAPI nonUpgradedStore=(GraphDatabaseAPI)new GraphDatabaseFactory().newEmbeddedDatabase(storeDir);
    RecordStorageEngine storageEngine=nonUpgradedStore.getDependencyResolver().resolveDependency(RecordStorageEngine.class);
    assertEquals(StandardV3_2.NAME,storageEngine.testAccessNeoStores().getRecordFormats().name());
    nonUpgradedStore.shutdown();
  }
  @Test void latestRecordNotMigratedWhenFormatBumped(){
    GraphDatabaseService database=startDatabaseWithFormatUnspecifiedUpgrade(storeDir,StandardV3_2.NAME);
    try (Transaction transaction=database.beginTx()){
      Node node=database.createNode();
      node.setProperty("a","b");
      transaction.success();
    }
     database.shutdown();
    Throwable exception=assertThrows(Throwable.class,() -> startDatabaseWithFormatUnspecifiedUpgrade(storeDir,Standard.LATEST_NAME));
    assertSame(UpgradeNotAllowedByConfigurationException.class,Exceptions.rootCause(exception).getClass());
  }
  private static GraphDatabaseService startDatabaseWithFormatUnspecifiedUpgrade(  File storeDir,  String formatName){
    return new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(storeDir).setConfig(record_format,formatName).newGraphDatabase();
  }
  static GraphDatabaseService startNonUpgradableDatabaseWithFormat(  File storeDir,  String formatName){
    return new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(storeDir).setConfig(record_format,formatName).setConfig(allow_upgrade,FALSE).newGraphDatabase();
  }
  static GraphDatabaseService startDatabaseWithFormat(  File storeDir,  String formatName){
    return new GraphDatabaseFactory().newEmbeddedDatabaseBuilder(storeDir).setConfig(record_format,formatName).setConfig(allow_upgrade,TRUE).newGraphDatabase();
  }
}
