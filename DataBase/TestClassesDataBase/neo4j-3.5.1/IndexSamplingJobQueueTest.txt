public class IndexSamplingJobQueueTest {
  public static final Predicate<Object> TRUE=Predicates.alwaysTrue();
  public static final Predicate<Object> FALSE=Predicates.alwaysFalse();
  @Test public void returnsNullWhenEmpty(){
    assertNull(new IndexSamplingJobQueue<>(Predicates.alwaysTrue()).poll());
  }
  @Test public void shouldEnqueueJobWhenEmpty(){
    final IndexSamplingJobQueue<Object> jobQueue=new IndexSamplingJobQueue<>(TRUE);
    jobQueue.add(false,something);
    Object result=jobQueue.poll();
    assertEquals(something,result);
  }
  @Test public void shouldEnqueueJobOnlyOnce(){
    final IndexSamplingJobQueue<Object> jobQueue=new IndexSamplingJobQueue<>(TRUE);
    jobQueue.add(false,something);
    jobQueue.add(false,something);
    assertEquals(something,jobQueue.poll());
    assertNull(jobQueue.poll());
  }
  @Test public void shouldNotEnqueueJobOnlyIfForbiddenByThePredicate(){
    final IndexSamplingJobQueue<Object> jobQueue=new IndexSamplingJobQueue<>(FALSE);
    jobQueue.add(false,something);
    assertNull(jobQueue.poll());
  }
  @Test public void shouldForceEnqueueOfAnJobEvenIfThePredicateForbidsIt(){
    final IndexSamplingJobQueue<Object> jobQueue=new IndexSamplingJobQueue<>(FALSE);
    jobQueue.add(true,something);
    assertEquals(something,jobQueue.poll());
  }
  @Test public void shouldDequeueAll(){
    final Object somethingElse=new Object();
    final IndexSamplingJobQueue<Object> jobQueue=new IndexSamplingJobQueue<>(TRUE);
    jobQueue.add(false,something);
    jobQueue.add(false,somethingElse);
    Iterable<Object> objects=jobQueue.pollAll();
    assertArrayEquals(new Object[]{something,somethingElse},asArray(Object.class,objects));
    assertNull(jobQueue.poll());
  }
  private final Object something=new Object();
}
