class ExtractorsTest {
  @Test void shouldExtractStringArray(){
    Extractors extractors=new Extractors(',');
    String data="abcde,fghijkl,mnopq";
    @SuppressWarnings("unchecked") Extractor<String[]> extractor=(Extractor<String[]>)extractors.valueOf("STRING[]");
    extractor.extract(data.toCharArray(),0,data.length(),false);
    assertArrayEquals(new String[]{"abcde","fghijkl","mnopq"},extractor.value());
  }
  @Test void shouldExtractLongArray(){
    Extractors extractors=new Extractors(',');
    long[] longData=new long[]{123,4567,987654321};
    String data=toString(longData,',');
    @SuppressWarnings("unchecked") Extractor<long[]> extractor=(Extractor<long[]>)extractors.valueOf("long[]");
    extractor.extract(data.toCharArray(),0,data.length(),false);
    assertArrayEquals(longData,extractor.value());
  }
  @Test void shouldExtractBooleanArray(){
    Extractors extractors=new Extractors(',');
    boolean[] booleanData=new boolean[]{true,false,true};
    String data=toString(booleanData,',');
    Extractor<boolean[]> extractor=extractors.booleanArray();
    extractor.extract(data.toCharArray(),0,data.length(),false);
    assertBooleanArrayEquals(booleanData,extractor.value());
  }
  @Test void shouldExtractDoubleArray(){
    Extractors extractors=new Extractors(',');
    double[] doubleData=new double[]{123.123,4567.4567,987654321.0987};
    String data=toString(doubleData,',');
    Extractor<double[]> extractor=extractors.doubleArray();
    extractor.extract(data.toCharArray(),0,data.length(),false);
    assertArrayEquals(doubleData,extractor.value(),0.001);
  }
  @Test void shouldFailExtractingLongArrayWhereAnyValueIsEmpty(){
    Extractors extractors=new Extractors(';');
    long[] longData=new long[]{112233,4455,66778899};
    String data=toString(longData,';') + ";";
    assertThrows(NumberFormatException.class,() -> extractors.longArray().extract(data.toCharArray(),0,data.length(),false));
  }
  @Test void shouldFailExtractingLongArrayWhereAnyValueIsntReallyANumber(){
    Extractors extractors=new Extractors(';');
    String data="123;456;abc;789";
    assertThrows(NumberFormatException.class,() -> extractors.valueOf("long[]").extract(data.toCharArray(),0,data.length(),false));
  }
  @Test void shouldExtractPoint(){
    Extractors extractors=new Extractors(',');
    PointValue value=Values.pointValue(CoordinateReferenceSystem.WGS84,13.2,56.7);
    char[] asChars="Point{latitude: 56.7, longitude: 13.2}".toCharArray();
    Extractors.PointExtractor extractor=extractors.point();
    String headerInfo="{crs:WGS-84}";
    extractor.extract(asChars,0,asChars.length,false,PointValue.parseHeaderInformation(headerInfo));
    assertEquals(value,extractor.value);
  }
  @Test void shouldExtractNegativeInt(){
    Extractors extractors=new Extractors(',');
    int value=-1234567;
    char[] asChars=String.valueOf(value).toCharArray();
    IntExtractor extractor=extractors.int_();
    extractor.extract(asChars,0,asChars.length,false);
    assertEquals(value,extractor.intValue());
  }
  @Test void shouldExtractEmptyStringForEmptyArrayString(){
    Extractors extractors=new Extractors(',');
    String value="";
    Extractor<String[]> extractor=extractors.stringArray();
    extractor.extract(value.toCharArray(),0,value.length(),false);
    assertEquals(0,extractor.value().length);
  }
  @Test void shouldExtractEmptyLongArrayForEmptyArrayString(){
    Extractors extractors=new Extractors(',');
    String value="";
    Extractor<long[]> extractor=extractors.longArray();
    extractor.extract(value.toCharArray(),0,value.length(),false);
    assertEquals(0,extractor.value().length);
  }
  @Test void shouldExtractTwoEmptyStringsForSingleDelimiterInArrayString(){
    Extractors extractors=new Extractors(',');
    String value=",";
    Extractor<String[]> extractor=extractors.stringArray();
    extractor.extract(value.toCharArray(),0,value.length(),false);
    assertArrayEquals(new String[]{"",""},extractor.value());
  }
  @Test void shouldExtractEmptyStringForEmptyQuotedString(){
    Extractors extractors=new Extractors(',');
    String value="";
    Extractor<String> extractor=extractors.string();
    extractor.extract(value.toCharArray(),0,value.length(),true);
    assertEquals("",extractor.value());
  }
  @Test void shouldExtractNullForEmptyQuotedStringIfConfiguredTo(){
    Extractors extractors=new Extractors(';',true);
    Extractor<String> extractor=extractors.string();
    extractor.extract(new char[0],0,0,true);
    String extracted=extractor.value();
    assertNull(extracted);
  }
  @Test void shouldTrimStringArrayIfConfiguredTo(){
    Extractors extractors=new Extractors(';',true,true);
    String value="ab;cd ; ef; gh ";
    char[] asChars=value.toCharArray();
    Extractor<String[]> extractor=extractors.stringArray();
    extractor.extract(asChars,0,asChars.length,true);
    assertArrayEquals(new String[]{"ab","cd","ef","gh"},extractor.value());
  }
  @Test void shouldNotTrimStringIfNotConfiguredTo(){
    Extractors extractors=new Extractors(';',true,false);
    String value="ab;cd ; ef; gh ";
    char[] asChars=value.toCharArray();
    Extractor<String[]> extractor=extractors.stringArray();
    extractor.extract(asChars,0,asChars.length,true);
    assertArrayEquals(new String[]{"ab","cd "," ef"," gh "},extractor.value());
  }
  @Test void shouldCloneExtractor(){
    Extractors extractors=new Extractors(';');
    Extractor<String> e1=extractors.string();
    Extractor<String> e2=e1.clone();
    String v1="abc";
    e1.extract(v1.toCharArray(),0,v1.length(),false);
    assertEquals(v1,e1.value());
    assertNull(e2.value());
    String v2="def";
    e2.extract(v2.toCharArray(),0,v2.length(),false);
    assertEquals(v2,e2.value());
    assertEquals(v1,e1.value());
  }
  private static String toString(  long[] values,  char delimiter){
    StringBuilder builder=new StringBuilder();
    for (    long value : values) {
      builder.append(builder.length() > 0 ? delimiter : "").append(value);
    }
    return builder.toString();
  }
  private static String toString(  double[] values,  char delimiter){
    StringBuilder builder=new StringBuilder();
    for (    double value : values) {
      builder.append(builder.length() > 0 ? delimiter : "").append(value);
    }
    return builder.toString();
  }
  private static String toString(  boolean[] values,  char delimiter){
    StringBuilder builder=new StringBuilder();
    for (    boolean value : values) {
      builder.append(builder.length() > 0 ? delimiter : "").append(value);
    }
    return builder.toString();
  }
  private static void assertBooleanArrayEquals(  boolean[] expected,  boolean[] values){
    assertEquals(expected.length,values.length,"Array lengths differ");
    for (int i=0; i < expected.length; i++) {
      assertEquals(expected[i],values[i],"Item " + i + " differs");
    }
  }
}
