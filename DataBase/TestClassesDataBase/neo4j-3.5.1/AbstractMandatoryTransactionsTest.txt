public abstract class AbstractMandatoryTransactionsTest<T> {
  @Rule public EmbeddedDatabaseRule dbRule=new EmbeddedDatabaseRule();
  public T obtainEntity(){
    GraphDatabaseService graphDatabaseService=dbRule.getGraphDatabaseAPI();
    try (Transaction tx=graphDatabaseService.beginTx()){
      T result=obtainEntityInTransaction(graphDatabaseService);
      tx.success();
      return result;
    }
   }
  public void obtainEntityInTerminatedTransaction(  Consumer<T> f){
    GraphDatabaseService graphDatabaseService=dbRule.getGraphDatabaseAPI();
    try (Transaction tx=graphDatabaseService.beginTx()){
      T result=obtainEntityInTransaction(graphDatabaseService);
      tx.terminate();
      f.accept(result);
    }
   }
  protected abstract T obtainEntityInTransaction(  GraphDatabaseService graphDatabaseService);
  public static <T>void assertFacadeMethodsThrowNotInTransaction(  T entity,  Consumer<T>[] methods){
    for (    Consumer<T> method : methods) {
      try {
        method.accept(entity);
        fail("Transactions are mandatory, also for reads: " + method);
      }
 catch (      NotInTransactionException e) {
      }
    }
  }
  public void assertFacadeMethodsThrowAfterTerminate(  Consumer<T>[] methods){
    for (    final Consumer<T> method : methods) {
      obtainEntityInTerminatedTransaction(entity -> {
        try {
          method.accept(entity);
          fail("Transaction was terminated, yet not exception thrown in: " + method);
        }
 catch (        TransactionTerminatedException e) {
        }
      }
);
    }
  }
}
