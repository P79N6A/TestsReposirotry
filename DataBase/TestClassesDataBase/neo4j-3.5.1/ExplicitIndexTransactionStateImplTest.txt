public class ExplicitIndexTransactionStateImplTest {
  private final Map<String,String> config=singletonMap(IndexManager.PROVIDER,"test");
  private final IndexImplementation provider=mock(IndexImplementation.class);
  private IndexConfigStore indexConfigStore;
  @Test public void tracksNodeCommands(){
    ExplicitIndexTransactionStateImpl state=newExplicitIndexTxState();
    state.addNode("index1",1,"key1","value1");
    state.removeNode("index1",1,"key2","value2");
    state.addNode("index1",2,"key1","value3");
    state.addNode("index1",3,"key2","value4");
    state.removeNode("index2",4,"key1","value5");
    IndexDefineCommand indexDefinedCommand=new IndexDefineCommand();
    indexDefinedCommand.getOrAssignIndexNameId("index1");
    indexDefinedCommand.getOrAssignIndexNameId("index2");
    indexDefinedCommand.getOrAssignKeyId("key1");
    indexDefinedCommand.getOrAssignKeyId("key2");
    Set<Command> expectedCommands=new HashSet<>(Arrays.asList(indexDefinedCommand,addNode(1,1,1,"value1"),removeNode(1,1,2,"value2"),addNode(1,2,1,"value3"),addNode(1,3,2,"value4"),removeNode(2,4,1,"value5")));
    assertEquals(expectedCommands,extractCommands(state));
  }
  @Test public void tracksRelationshipCommands(){
    ExplicitIndexTransactionStateImpl state=newExplicitIndexTxState();
    state.removeRelationship("index1",1,"key1","value1");
    state.addRelationship("index1",1,"key2","value2",11,11);
    state.removeRelationship("index1",2,"key1","value3");
    state.addRelationship("index1",3,"key2","value4",22,22);
    state.addRelationship("index2",4,"key1","value5",33,33);
    IndexDefineCommand indexDefinedCommand=new IndexDefineCommand();
    indexDefinedCommand.getOrAssignIndexNameId("index1");
    indexDefinedCommand.getOrAssignIndexNameId("index2");
    indexDefinedCommand.getOrAssignKeyId("key1");
    indexDefinedCommand.getOrAssignKeyId("key2");
    Set<Command> expectedCommands=new HashSet<>(Arrays.asList(indexDefinedCommand,removeRelationship(1,1,1,"value1"),addRelationship(1,1,2,"value2",11,11),removeRelationship(1,2,1,"value3"),addRelationship(1,3,2,"value4",22,22),addRelationship(2,4,1,"value5",33,33)));
    assertEquals(expectedCommands,extractCommands(state));
  }
  @Test public void nodeIndexDeletionRemovesCommands(){
    ExplicitIndexTransactionStateImpl state=newExplicitIndexTxState();
    state.addNode("index",1,"key","value1");
    state.addNode("index",2,"key","value2");
    state.removeNode("index",3,"key","value3");
    state.deleteIndex(IndexEntityType.Node,"index");
    IndexDefineCommand indexDefinedCommand=new IndexDefineCommand();
    indexDefinedCommand.getOrAssignIndexNameId("index");
    indexDefinedCommand.getOrAssignKeyId("key");
    IndexCommand.DeleteCommand delete=new IndexCommand.DeleteCommand();
    delete.init(1,IndexEntityType.Node.id());
    Set<Command> expectedCommands=new HashSet<>(Arrays.asList(indexDefinedCommand,delete));
    assertEquals(expectedCommands,extractCommands(state));
  }
  @Test public void relationshipIndexDeletionRemovesCommands(){
    ExplicitIndexTransactionStateImpl state=newExplicitIndexTxState();
    state.removeRelationship("index",1,"key","value1");
    state.addRelationship("index",2,"key","value2",11,11);
    state.addRelationship("index",3,"key","value3",22,22);
    state.deleteIndex(IndexEntityType.Relationship,"index");
    IndexDefineCommand indexDefinedCommand=new IndexDefineCommand();
    indexDefinedCommand.getOrAssignIndexNameId("index");
    indexDefinedCommand.getOrAssignKeyId("key");
    IndexCommand.DeleteCommand delete=new IndexCommand.DeleteCommand();
    delete.init(1,IndexEntityType.Relationship.id());
    Set<Command> expectedCommands=new HashSet<>(Arrays.asList(indexDefinedCommand,delete));
    assertEquals(expectedCommands,extractCommands(state));
  }
  @Test public void removalOfNodeIndexDoesNotClearRelationshipCommandsForRelationshipIndexWithSameName(){
    ExplicitIndexTransactionStateImpl state=newExplicitIndexTxState();
    state.addNode("index",1,"key","value");
    state.addRelationship("index",1,"key","value",11,11);
    state.deleteIndex(IndexEntityType.Node,"index");
    IndexDefineCommand indexDefinedCommand=new IndexDefineCommand();
    indexDefinedCommand.getOrAssignIndexNameId("index");
    indexDefinedCommand.getOrAssignKeyId("key");
    IndexCommand.DeleteCommand delete=new IndexCommand.DeleteCommand();
    delete.init(1,IndexEntityType.Node.id());
    Set<Command> expectedCommands=new HashSet<>(Arrays.asList(indexDefinedCommand,delete,addRelationship(1,1,1,"value",11,11)));
    assertEquals(expectedCommands,extractCommands(state));
  }
  @Test public void removalOfRelationshipIndexDoesNotClearNodeCommandsForNodeIndexWithSameName(){
    ExplicitIndexTransactionStateImpl state=newExplicitIndexTxState();
    state.addNode("index",1,"key","value");
    state.addRelationship("index",1,"key","value",11,11);
    state.deleteIndex(IndexEntityType.Relationship,"index");
    IndexDefineCommand indexDefinedCommand=new IndexDefineCommand();
    indexDefinedCommand.getOrAssignIndexNameId("index");
    indexDefinedCommand.getOrAssignKeyId("key");
    IndexCommand.DeleteCommand delete=new IndexCommand.DeleteCommand();
    delete.init(1,IndexEntityType.Relationship.id());
    Set<Command> expectedCommands=new HashSet<>(Arrays.asList(indexDefinedCommand,delete,addNode(1,1,1,"value")));
    assertEquals(expectedCommands,extractCommands(state));
  }
  @Test public void shouldReportIndexExists(){
    ExplicitIndexTransactionStateImpl state=newExplicitIndexTxState();
    boolean nodeExists=state.checkIndexExistence(IndexEntityType.Node,"name",null);
    boolean relExists=state.checkIndexExistence(IndexEntityType.Relationship,"name",null);
    assertTrue(nodeExists);
    assertTrue(relExists);
  }
  @Test public void shouldReportIndexExistsWithMatchingConfiguration(){
    ExplicitIndexTransactionStateImpl state=newExplicitIndexTxState();
    when(provider.configMatches(anyMap(),anyMap())).thenReturn(true);
    boolean nodeExists=state.checkIndexExistence(IndexEntityType.Node,"name",config);
    boolean relExists=state.checkIndexExistence(IndexEntityType.Node,"name",config);
    assertTrue(nodeExists);
    assertTrue(relExists);
  }
  @Test public void shouldThrowOnIndexExistsWithMismatchingConfiguration(){
    ExplicitIndexTransactionStateImpl state=newExplicitIndexTxState();
    when(provider.configMatches(anyMap(),anyMap())).thenReturn(false);
    try {
      state.checkIndexExistence(IndexEntityType.Node,"name",config);
      fail("Should've failed");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      state.checkIndexExistence(IndexEntityType.Node,"name",config);
      fail("Should have failed");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void shouldReportIndexDoesNotExist(){
    ExplicitIndexTransactionStateImpl state=newExplicitIndexTxState();
    when(indexConfigStore.get(any(Class.class),anyString())).thenReturn(null);
    boolean exists=state.checkIndexExistence(IndexEntityType.Relationship,"name",null);
    assertFalse(exists);
  }
  private static Set<StorageCommand> extractCommands(  ExplicitIndexTransactionStateImpl state){
    Set<StorageCommand> commands=new HashSet<>();
    state.extractCommands(commands);
    return commands;
  }
  private static Command addNode(  int index,  long id,  int key,  Object value){
    IndexCommand.AddNodeCommand command=new IndexCommand.AddNodeCommand();
    command.init(index,id,key,value);
    return command;
  }
  private static Command addRelationship(  int index,  long id,  int key,  Object value,  long startNode,  long endNode){
    IndexCommand.AddRelationshipCommand command=new IndexCommand.AddRelationshipCommand();
    command.init(index,id,key,value,startNode,endNode);
    return command;
  }
  private static Command removeNode(  int index,  long id,  int key,  Object value){
    IndexCommand.RemoveCommand command=new IndexCommand.RemoveCommand();
    command.init(index,IndexEntityType.Node.id(),id,key,value);
    return command;
  }
  private static Command removeRelationship(  int index,  long id,  int key,  Object value){
    IndexCommand.RemoveCommand command=new IndexCommand.RemoveCommand();
    command.init(index,IndexEntityType.Relationship.id(),id,key,value);
    return command;
  }
  private ExplicitIndexTransactionStateImpl newExplicitIndexTxState(){
    indexConfigStore=mock(IndexConfigStore.class);
    when(indexConfigStore.get(eq(Node.class),anyString())).thenReturn(config);
    when(indexConfigStore.get(eq(Relationship.class),anyString())).thenReturn(config);
    ExplicitIndexProvider explicitIndexProvider=mock(ExplicitIndexProvider.class);
    when(explicitIndexProvider.getProviderByName(anyString())).thenReturn(provider);
    return new ExplicitIndexTransactionStateImpl(indexConfigStore,explicitIndexProvider);
  }
}
