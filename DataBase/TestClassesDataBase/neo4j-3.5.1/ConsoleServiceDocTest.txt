public static class ConsoleServiceDocTest {
  private final URI uri=URI.create("http://peteriscool.com:6666/");
  @Test public void correctRepresentation(){
    ConsoleService consoleService=new ConsoleService(new StubConsoleSessionFactory(),mock(Database.class),NullLogProvider.getInstance(),new OutputFormat(new JsonFormat(),uri,null));
    Response consoleResponse=consoleService.getServiceDefinition();
    assertEquals(200,consoleResponse.getStatus());
    String response=decode(consoleResponse);
    MatcherAssert.assertThat(response,containsString("resources"));
    MatcherAssert.assertThat(response,containsString(uri.toString()));
  }
  @Test public void advertisesAvailableConsoleEngines(){
    ConsoleService consoleServiceWithJustShellEngine=new ConsoleService(new StubConsoleSessionFactory(),mock(Database.class),NullLogProvider.getInstance(),new OutputFormat(new JsonFormat(),uri,null));
    String response=decode(consoleServiceWithJustShellEngine.getServiceDefinition());
    MatcherAssert.assertThat(response,containsString("\"engines\" : [ \"stub-engine\" ]"));
  }
  private String decode(  final Response response){
    return UTF8.decode((byte[])response.getEntity());
  }
private static class StubConsoleSessionFactory implements ConsoleSessionFactory {
    @Override public ScriptSession createSession(    String engineName,    Database database,    LogProvider logProvider){
      return null;
    }
    @Override public Iterable<String> supportedEngines(){
      return Collections.singletonList("stub-engine");
    }
  }
}
