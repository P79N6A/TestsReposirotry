public class RelationshipProxyTest extends PropertyContainerProxyTest {
  @Override protected long createPropertyContainer(){
    return db.createNode().createRelationshipTo(db.createNode(),withName("FOO")).getId();
  }
  @Override protected PropertyContainer lookupPropertyContainer(  long id){
    return db.getRelationshipById(id);
  }
  @Test public void shouldBeAbleToReferToIdsBeyondMaxInt(){
    EmbeddedProxySPI actions=mock(EmbeddedProxySPI.class);
    when(actions.newNodeProxy(anyLong())).then(invocation -> nodeWithId(invocation.getArgument(0)));
    when(actions.getRelationshipTypeById(anyInt())).then(invocation -> new NamedToken("whatever",invocation.getArgument(0)));
    long[] ids=new long[]{1437589437,2047587483,2147496246L,2147342921,3276473721L,4762746373L,57587348738L,59892898932L};
    int[] types=new int[]{0,10,101,3024,20123,45008};
    for (int i=0; i < ids.length - 2; i++) {
      long id=ids[i];
      long nodeId1=ids[i + 1];
      long nodeId2=ids[i + 2];
      int type=types[i];
      verifyIds(actions,id,nodeId1,type,nodeId2);
      verifyIds(actions,id,nodeId2,type,nodeId1);
    }
  }
  @Test public void shouldPrintCypherEsqueRelationshipToString(){
    Node start;
    Node end;
    RelationshipType type=RelationshipType.withName("NICE");
    Relationship relationship;
    try (Transaction tx=db.beginTx()){
      start=db.createNode();
      end=db.createNode();
      relationship=start.createRelationshipTo(end,type);
      tx.success();
      String toString=relationship.toString();
      assertEquals("(" + start.getId() + ")-["+ type+ ","+ relationship.getId()+ "]->("+ end.getId()+ ")",toString);
    }
   }
  @Test public void createDropRelationshipLongStringProperty(){
    Label markerLabel=Label.label("marker");
    String testPropertyKey="testProperty";
    String propertyValue=RandomStringUtils.randomAscii(255);
    try (Transaction tx=db.beginTx()){
      Node start=db.createNode(markerLabel);
      Node end=db.createNode(markerLabel);
      Relationship relationship=start.createRelationshipTo(end,withName("type"));
      relationship.setProperty(testPropertyKey,propertyValue);
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      Relationship relationship=db.getRelationshipById(0);
      assertEquals(propertyValue,relationship.getProperty(testPropertyKey));
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      Relationship relationship=db.getRelationshipById(0);
      relationship.removeProperty(testPropertyKey);
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      Relationship relationship=db.getRelationshipById(0);
      assertFalse(relationship.hasProperty(testPropertyKey));
      tx.success();
    }
   }
  @Test public void createDropRelationshipLongArrayProperty(){
    Label markerLabel=Label.label("marker");
    String testPropertyKey="testProperty";
    byte[] propertyValue=RandomUtils.nextBytes(1024);
    try (Transaction tx=db.beginTx()){
      Node start=db.createNode(markerLabel);
      Node end=db.createNode(markerLabel);
      Relationship relationship=start.createRelationshipTo(end,withName("type"));
      relationship.setProperty(testPropertyKey,propertyValue);
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      Relationship relationship=db.getRelationshipById(0);
      assertArrayEquals(propertyValue,(byte[])relationship.getProperty(testPropertyKey));
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      Relationship relationship=db.getRelationshipById(0);
      relationship.removeProperty(testPropertyKey);
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      Relationship relationship=db.getRelationshipById(0);
      assertFalse(relationship.hasProperty(testPropertyKey));
      tx.success();
    }
   }
  @Test public void shouldBeAbleToForceTypeChangeOfProperty(){
    Relationship relationship;
    try (Transaction tx=db.beginTx()){
      relationship=db.createNode().createRelationshipTo(db.createNode(),withName("R"));
      relationship.setProperty("prop",1337);
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      relationship.setProperty("prop",1337.0);
      tx.success();
    }
     try (Transaction ignore=db.beginTx()){
      assertThat(relationship.getProperty("prop"),instanceOf(Double.class));
    }
   }
  private void verifyIds(  EmbeddedProxySPI actions,  long relationshipId,  long nodeId1,  int typeId,  long nodeId2){
    RelationshipProxy proxy=new RelationshipProxy(actions,relationshipId,nodeId1,typeId,nodeId2);
    assertEquals(relationshipId,proxy.getId());
    assertEquals(nodeId1,proxy.getStartNode().getId());
    assertEquals(nodeId1,proxy.getStartNodeId());
    assertEquals(nodeId2,proxy.getEndNode().getId());
    assertEquals(nodeId2,proxy.getEndNodeId());
    assertEquals(nodeId2,proxy.getOtherNode(nodeWithId(nodeId1)).getId());
    assertEquals(nodeId2,proxy.getOtherNodeId(nodeId1));
    assertEquals(nodeId1,proxy.getOtherNode(nodeWithId(nodeId2)).getId());
    assertEquals(nodeId1,proxy.getOtherNodeId(nodeId2));
  }
  private Node nodeWithId(  long id){
    NodeProxy node=mock(NodeProxy.class);
    when(node.getId()).thenReturn(id);
    return node;
  }
}
