private static class TestKernelTransaction extends KernelTransactionImplementation {
  final CommitTrackingMonitor monitor;
  TestKernelTransaction(  CommitTrackingMonitor monitor){
    super(Config.defaults(),mock(StatementOperationParts.class),mock(SchemaWriteGuard.class),new TransactionHooks(),mock(ConstraintIndexCreator.class),new Procedures(),TransactionHeaderInformationFactory.DEFAULT,mock(TransactionCommitProcess.class),monitor,mock(AuxiliaryTransactionStateManager.class),mock(Pool.class),Clocks.fakeClock(),new AtomicReference<>(CpuClock.NOT_AVAILABLE),new AtomicReference<>(HeapAllocation.NOT_AVAILABLE),TransactionTracer.NULL,LockTracer.NONE,PageCursorTracerSupplier.NULL,mock(StorageEngine.class,RETURNS_MOCKS),new CanWrite(),AutoIndexing.UNSUPPORTED,mock(ExplicitIndexStore.class),EmptyVersionContextSupplier.EMPTY,ON_HEAP,new StandardConstraintSemantics(),mock(SchemaState.class),mock(IndexingService.class),mockedTokenHolders(),new Dependencies());
    this.monitor=monitor;
  }
  static TestKernelTransaction create(){
    return new TestKernelTransaction(new CommitTrackingMonitor());
  }
  TestKernelTransaction initialize(){
    initialize(42,42,new SimpleStatementLocks(new NoOpClient()),Type.implicit,AUTH_DISABLED,0L,1L);
    monitor.reset();
    return this;
  }
  void assertCommitted(){
    assertTrue(monitor.committed);
  }
  void assertRolledBack(){
    assertTrue(monitor.rolledBack);
  }
  void assertTerminated(){
    assertEquals(Status.Transaction.TransactionMarkedAsFailed,getReasonIfTerminated().get());
    assertTrue(monitor.terminated);
  }
  void assertNotTerminated(){
    assertFalse(getReasonIfTerminated().isPresent());
    assertFalse(monitor.terminated);
  }
}
