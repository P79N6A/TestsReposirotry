class HelloMessageDecoderTest extends AuthTokenDecoderTest {
  private final BoltResponseHandler responseHandler=mock(BoltResponseHandler.class);
  private final RequestMessageDecoder decoder=new HelloMessageDecoder(responseHandler);
  @Test void shouldReturnCorrectSignature(){
    assertEquals(HelloMessage.SIGNATURE,decoder.signature());
  }
  @Test void shouldReturnConnectResponseHandler(){
    assertEquals(responseHandler,decoder.responseHandler());
  }
  @Test void shouldDecodeHelloMessage() throws Exception {
    HelloMessage originalMessage=new HelloMessage(map("user_agent","My Driver","user","neo4j","password","secret"));
    assertOriginalMessageEqualsToDecoded(originalMessage,decoder);
  }
  static void assertOriginalMessageEqualsToDecoded(  RequestMessage originalMessage,  RequestMessageDecoder decoder) throws Exception {
    Neo4jPack neo4jPack=newNeo4jPack();
    PackedInputArray input=new PackedInputArray(encode(neo4jPack,originalMessage));
    Neo4jPack.Unpacker unpacker=neo4jPack.newUnpacker(input);
    unpacker.unpackStructHeader();
    unpacker.unpackStructSignature();
    RequestMessage deserializedMessage=decoder.decode(unpacker);
    assertEquals(originalMessage,deserializedMessage);
  }
  @Override protected void testShouldDecodeAuthToken(  Map<String,Object> authToken) throws Exception {
    Neo4jPack neo4jPack=newNeo4jPack();
    authToken.put("user_agent","My Driver");
    HelloMessage originalMessage=new HelloMessage(authToken);
    PackedInputArray input=new PackedInputArray(encode(neo4jPack,originalMessage));
    Neo4jPack.Unpacker unpacker=neo4jPack.newUnpacker(input);
    unpacker.unpackStructHeader();
    unpacker.unpackStructSignature();
    RequestMessage deserializedMessage=decoder.decode(unpacker);
    assertHelloMessageMatches(originalMessage,deserializedMessage);
  }
  @Override protected void testShouldFailToDecodeAuthToken(  Map<String,Object> authToken,  String expectedErrorMessage) throws Exception {
    Neo4jPack neo4jPack=newNeo4jPack();
    authToken.put("user_agent","My Driver");
    HelloMessage originalMessage=new HelloMessage(authToken);
    PackedInputArray input=new PackedInputArray(encode(neo4jPack,originalMessage));
    Neo4jPack.Unpacker unpacker=neo4jPack.newUnpacker(input);
    unpacker.unpackStructHeader();
    unpacker.unpackStructSignature();
    try {
      decoder.decode(unpacker);
      fail("Expected UnsupportedOperationException");
    }
 catch (    UnsupportedOperationException e) {
      assertEquals(e.getMessage(),expectedErrorMessage);
    }
  }
  private static void assertHelloMessageMatches(  HelloMessage expected,  RequestMessage actual){
    assertAuthTokenMatches(expected.meta(),((HelloMessage)actual).meta());
  }
}
