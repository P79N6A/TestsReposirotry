public class MetricsReportingBoltConnectionTest {
  @Test public void shouldNotifyConnectionOpened(){
    BoltConnectionMetricsMonitor metricsMonitor=mock(BoltConnectionMetricsMonitor.class);
    BoltConnection connection=newConnection(metricsMonitor);
    connection.start();
    verify(metricsMonitor).connectionOpened();
  }
  @Test public void shouldNotifyConnectionClosed(){
    BoltConnectionMetricsMonitor metricsMonitor=mock(BoltConnectionMetricsMonitor.class);
    BoltConnection connection=newConnection(metricsMonitor);
    connection.start();
    connection.stop();
    connection.processNextBatch();
    verify(metricsMonitor).connectionClosed();
  }
  @Test public void shouldNotifyConnectionClosedOnBoltConnectionAuthFatality(){
    verifyConnectionClosed(machine -> {
      throw new BoltConnectionAuthFatality("auth failure",new RuntimeException());
    }
);
  }
  @Test public void shouldNotifyConnectionClosedOnBoltProtocolBreachFatality(){
    verifyConnectionClosed(machine -> {
      throw new BoltProtocolBreachFatality("protocol failure");
    }
);
  }
  @Test public void shouldNotifyConnectionClosedOnUncheckedException(){
    verifyConnectionClosed(machine -> {
      throw new RuntimeException("unexpected error");
    }
);
  }
  @Test public void shouldNotifyMessageReceived(){
    BoltConnectionMetricsMonitor metricsMonitor=mock(BoltConnectionMetricsMonitor.class);
    BoltConnection connection=newConnection(metricsMonitor);
    connection.start();
    connection.enqueue(machine -> {
    }
);
    verify(metricsMonitor).messageReceived();
  }
  @Test public void shouldNotifyMessageProcessingStartedAndCompleted(){
    BoltConnectionMetricsMonitor metricsMonitor=mock(BoltConnectionMetricsMonitor.class);
    BoltConnection connection=newConnection(metricsMonitor);
    connection.start();
    connection.enqueue(machine -> {
    }
);
    connection.processNextBatch();
    verify(metricsMonitor).messageProcessingStarted(anyLong());
    verify(metricsMonitor).messageProcessingCompleted(anyLong());
  }
  @Test public void shouldNotifyConnectionActivatedAndDeactivated(){
    BoltConnectionMetricsMonitor metricsMonitor=mock(BoltConnectionMetricsMonitor.class);
    BoltConnection connection=newConnection(metricsMonitor);
    connection.start();
    connection.enqueue(machine -> {
    }
);
    connection.processNextBatch();
    verify(metricsMonitor).connectionActivated();
    verify(metricsMonitor).connectionWaiting();
  }
  @Test public void shouldNotifyMessageProcessingFailed(){
    BoltConnectionMetricsMonitor metricsMonitor=mock(BoltConnectionMetricsMonitor.class);
    BoltConnection connection=newConnection(metricsMonitor);
    connection.start();
    connection.enqueue(machine -> {
      throw new BoltConnectionAuthFatality("some error",new RuntimeException());
    }
);
    connection.processNextBatch();
    verify(metricsMonitor).messageProcessingFailed();
  }
  private static void verifyConnectionClosed(  Job throwingJob){
    BoltConnectionMetricsMonitor metricsMonitor=mock(BoltConnectionMetricsMonitor.class);
    BoltConnection connection=newConnection(metricsMonitor);
    connection.start();
    connection.enqueue(throwingJob);
    connection.processNextBatch();
    verify(metricsMonitor).connectionClosed();
  }
  private static BoltConnection newConnection(  BoltConnectionMetricsMonitor metricsMonitor){
    BoltChannel channel=BoltTestUtil.newTestBoltChannel();
    return new MetricsReportingBoltConnection(channel,mock(PackOutput.class),mock(BoltStateMachine.class),NullLogService.getInstance(),mock(BoltConnectionLifetimeListener.class),mock(BoltConnectionQueueMonitor.class),metricsMonitor,Clocks.systemClock());
  }
}
