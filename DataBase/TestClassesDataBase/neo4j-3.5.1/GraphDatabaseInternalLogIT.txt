public class GraphDatabaseInternalLogIT {
  private static final String INTERNAL_LOG_FILE="debug.log";
  @Rule public TestDirectory testDir=TestDirectory.testDirectory();
  @Test public void shouldWriteToInternalDiagnosticsLog() throws Exception {
    new TestGraphDatabaseFactory().newEmbeddedDatabaseBuilder(testDir.databaseDir()).setConfig(GraphDatabaseSettings.logs_directory,testDir.directory("logs").getAbsolutePath()).newGraphDatabase().shutdown();
    File internalLog=new File(testDir.directory("logs"),INTERNAL_LOG_FILE);
    assertThat(internalLog.isFile(),is(true));
    assertThat(internalLog.length(),greaterThan(0L));
    assertEquals(1,countOccurrences(internalLog,"Database graph.db is ready."));
    assertEquals(2,countOccurrences(internalLog,"Database graph.db is unavailable."));
  }
  @Test public void shouldNotWriteDebugToInternalDiagnosticsLogByDefault() throws Exception {
    GraphDatabaseService db=new TestGraphDatabaseFactory().newEmbeddedDatabaseBuilder(testDir.storeDir()).setConfig(GraphDatabaseSettings.logs_directory,testDir.directory("logs").getAbsolutePath()).newGraphDatabase();
    LogService logService=((GraphDatabaseAPI)db).getDependencyResolver().resolveDependency(LogService.class);
    logService.getInternalLog(getClass()).debug("A debug entry");
    db.shutdown();
    File internalLog=new File(testDir.directory("logs"),INTERNAL_LOG_FILE);
    assertThat(internalLog.isFile(),is(true));
    assertThat(internalLog.length(),greaterThan(0L));
    assertEquals(0,countOccurrences(internalLog,"A debug entry"));
  }
  @Test public void shouldWriteDebugToInternalDiagnosticsLogForEnabledContexts() throws Exception {
    GraphDatabaseService db=new TestGraphDatabaseFactory().newEmbeddedDatabaseBuilder(testDir.storeDir()).setConfig(GraphDatabaseSettings.store_internal_debug_contexts,getClass().getName() + ",java.io").setConfig(GraphDatabaseSettings.logs_directory,testDir.directory("logs").getAbsolutePath()).newGraphDatabase();
    LogService logService=((GraphDatabaseAPI)db).getDependencyResolver().resolveDependency(LogService.class);
    logService.getInternalLog(getClass()).debug("A debug entry");
    logService.getInternalLog(GraphDatabaseService.class).debug("A GDS debug entry");
    logService.getInternalLog(StringWriter.class).debug("A SW debug entry");
    db.shutdown();
    File internalLog=new File(testDir.directory("logs"),INTERNAL_LOG_FILE);
    assertThat(internalLog.isFile(),is(true));
    assertThat(internalLog.length(),greaterThan(0L));
    assertEquals(1,countOccurrences(internalLog,"A debug entry"));
    assertEquals(0,countOccurrences(internalLog,"A GDS debug entry"));
    assertEquals(1,countOccurrences(internalLog,"A SW debug entry"));
  }
  private static long countOccurrences(  File file,  String substring) throws IOException {
    try (Stream<String> lines=Files.lines(file.toPath())){
      return lines.filter(line -> line.contains(substring)).count();
    }
   }
}
