class InitMessageDecoderTest extends AuthTokenDecoderTest {
  private final BoltResponseHandler responseHandler=mock(BoltResponseHandler.class);
  private final RequestMessageDecoder decoder=new InitMessageDecoder(responseHandler);
  @Test void shouldReturnCorrectSignature(){
    assertEquals(InitMessage.SIGNATURE,decoder.signature());
  }
  @Test void shouldReturnConnectResponseHandler(){
    assertEquals(responseHandler,decoder.responseHandler());
  }
  @Test void shouldDecodeAckFailure() throws Exception {
    Neo4jPackV1 neo4jPack=new Neo4jPackV1();
    InitMessage originalMessage=new InitMessage("My Driver",map("user","neo4j","password","secret"));
    PackedInputArray innput=new PackedInputArray(serialize(neo4jPack,originalMessage));
    Unpacker unpacker=neo4jPack.newUnpacker(innput);
    unpacker.unpackStructHeader();
    unpacker.unpackStructSignature();
    RequestMessage deserializedMessage=decoder.decode(unpacker);
    assertEquals(originalMessage,deserializedMessage);
  }
  @Override protected void testShouldDecodeAuthToken(  Map<String,Object> authToken) throws Exception {
    Neo4jPackV1 neo4jPack=new Neo4jPackV1();
    InitMessage originalMessage=new InitMessage("My Driver",authToken);
    PackedInputArray innput=new PackedInputArray(serialize(neo4jPack,originalMessage));
    Unpacker unpacker=neo4jPack.newUnpacker(innput);
    unpacker.unpackStructHeader();
    unpacker.unpackStructSignature();
    RequestMessage deserializedMessage=decoder.decode(unpacker);
    assertInitMessageMatches(originalMessage,deserializedMessage);
  }
  @Override protected void testShouldFailToDecodeAuthToken(  Map<String,Object> authToken,  String expectedErrorMessage) throws Exception {
    Neo4jPackV1 neo4jPack=new Neo4jPackV1();
    InitMessage originalMessage=new InitMessage("My Driver",authToken);
    PackedInputArray innput=new PackedInputArray(serialize(neo4jPack,originalMessage));
    Unpacker unpacker=neo4jPack.newUnpacker(innput);
    unpacker.unpackStructHeader();
    unpacker.unpackStructSignature();
    try {
      decoder.decode(unpacker);
      fail("Expected UnsupportedOperationException");
    }
 catch (    UnsupportedOperationException e) {
      assertEquals(e.getMessage(),expectedErrorMessage);
    }
  }
  private static void assertInitMessageMatches(  InitMessage expected,  RequestMessage actual){
    assertEquals(expected.userAgent(),((InitMessage)actual).userAgent());
    assertAuthTokenMatches(expected.authToken(),((InitMessage)actual).authToken());
  }
}
