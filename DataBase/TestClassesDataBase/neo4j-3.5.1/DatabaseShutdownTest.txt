@ExtendWith({EphemeralFileSystemExtension.class,TestDirectoryExtension.class}) class DatabaseShutdownTest {
  @Inject private TestDirectory testDirectory;
  @Test void shouldShutdownCorrectlyWhenCheckPointingOnShutdownFails(){
    TestGraphDatabaseFactoryWithFailingPageCacheFlush factory=new TestGraphDatabaseFactoryWithFailingPageCacheFlush();
    assertThrows(LifecycleException.class,() -> factory.newEmbeddedDatabase(testDirectory.storeDir()).shutdown());
    assertEquals(LifecycleStatus.SHUTDOWN,factory.getNeoStoreDataSourceStatus());
  }
private static class TestGraphDatabaseFactoryWithFailingPageCacheFlush extends TestGraphDatabaseFactory {
    private LifeSupport life;
    @Override protected GraphDatabaseService newEmbeddedDatabase(    File storeDir,    Config config,    GraphDatabaseFacadeFactory.Dependencies dependencies){
      return new GraphDatabaseFacadeFactory(DatabaseInfo.COMMUNITY,CommunityEditionModule::new){
        @Override protected PlatformModule createPlatform(        File storeDir,        Config config,        Dependencies dependencies){
          PlatformModule platformModule=new PlatformModule(storeDir,config,databaseInfo,dependencies){
            @Override protected PageCache createPageCache(            FileSystemAbstraction fileSystem,            Config config,            LogService logging,            Tracers tracers,            VersionContextSupplier versionContextSupplier,            JobScheduler jobScheduler){
              PageCache pageCache=super.createPageCache(fileSystem,config,logging,tracers,versionContextSupplier,jobScheduler);
              return new DelegatingPageCache(pageCache){
                @Override public void flushAndForce(                IOLimiter ioLimiter) throws IOException {
                  throw new IOException("Boom!");
                }
              }
;
            }
          }
;
          life=platformModule.life;
          return platformModule;
        }
      }
.newFacade(storeDir,config,dependencies);
    }
    LifecycleStatus getNeoStoreDataSourceStatus(){
      return life.getStatus();
    }
  }
}
