public class ExceptionRepresentationTest {
  @Test public void shouldIncludeCause() throws Exception {
    ExceptionRepresentation rep=new ExceptionRepresentation(new RuntimeException("Hoho",new RuntimeException("Haha",new RuntimeException("HAHA!"))));
    JsonNode out=serialize(rep);
    assertThat(out.get("cause").get("message").asText(),is("Haha"));
    assertThat(out.get("cause").get("cause").get("message").asText(),is("HAHA!"));
  }
  @Test public void shouldRenderErrorsWithNeo4jStatusCode() throws Exception {
    ExceptionRepresentation rep=new ExceptionRepresentation(new KernelException(UnknownError,"Hello"){
    }
);
    JsonNode out=serialize(rep);
    assertThat(out.get("errors").get(0).get("code").asText(),equalTo("Neo.DatabaseError.General.UnknownError"));
    assertThat(out.get("errors").get(0).get("message").asText(),equalTo("Hello"));
  }
  @Test public void shouldExcludeLegacyFormatIfAsked() throws Exception {
    ExceptionRepresentation rep=new ExceptionRepresentation(new KernelException(UnknownError,"Hello"){
    }
,false);
    JsonNode out=serialize(rep);
    assertThat(out.get("errors").get(0).get("code").asText(),equalTo("Neo.DatabaseError.General.UnknownError"));
    assertThat(out.get("errors").get(0).get("message").asText(),equalTo("Hello"));
    assertThat(out.has("message"),equalTo(false));
  }
  private JsonNode serialize(  ExceptionRepresentation rep) throws JsonParseException {
    Map<String,Object> output=new HashMap<>();
    MappingSerializer serializer=new MappingSerializer(new MapWrappingWriter(output),URI.create(""),mock(ExtensionInjector.class));
    rep.serialize(serializer);
    return JsonHelper.jsonNode(JsonHelper.createJsonFrom(output));
  }
}
