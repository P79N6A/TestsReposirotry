class DefaultExplicitIndexProviderTest {
  private final DefaultExplicitIndexProvider provider=new DefaultExplicitIndexProvider();
  @Test void registerAndAccessIndexProvider(){
    IndexImplementation index=mock(IndexImplementation.class);
    String testProviderName="a";
    provider.registerIndexProvider(testProviderName,index);
    assertSame(index,provider.getProviderByName(testProviderName));
  }
  @Test void throwOnAttemptToRegisterProviderWithSameName(){
    IndexImplementation index=mock(IndexImplementation.class);
    String testProviderName="a";
    provider.registerIndexProvider(testProviderName,index);
    assertThrows(IllegalArgumentException.class,() -> provider.registerIndexProvider(testProviderName,index));
  }
  @Test void unregisterIndexProvider(){
    IndexImplementation index=mock(IndexImplementation.class);
    String testProviderName="b";
    provider.registerIndexProvider(testProviderName,index);
    assertTrue(provider.unregisterIndexProvider(testProviderName));
  }
  @Test void removeNotExistentProvider(){
    assertFalse(provider.unregisterIndexProvider("c"));
  }
  @Test void throwOnAttemptToGetNonRegisteredProviderByName(){
    String testProviderName="d";
    assertThrows(IllegalArgumentException.class,() -> provider.getProviderByName(testProviderName));
  }
  @Test void accessAllRegisteredIndexProviders(){
    IndexImplementation index1=mock(IndexImplementation.class);
    IndexImplementation index2=mock(IndexImplementation.class);
    String testProviderName1="e";
    String testProviderName2="f";
    provider.registerIndexProvider(testProviderName1,index1);
    provider.registerIndexProvider(testProviderName2,index2);
    assertThat(provider.allIndexProviders(),contains(index1,index2));
  }
}
