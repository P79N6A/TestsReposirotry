@RunWith(Parameterized.class) public class ClientErrorIT extends AbstractRestFunctionalTestBase {
  private static final int UNIQUE_ISBN=12345;
  @Parameterized.Parameter(0) public String query;
  @Parameterized.Parameter(1) public Status errorStatus;
  @Parameterized.Parameters(name="{0} should cause {1}") public static List<Object[]> queriesWithStatuses(){
    return Arrays.asList(new Object[]{"Not a valid query",Status.Statement.SyntaxError},new Object[]{"RETURN {foo}",Status.Statement.ParameterMissing},new Object[]{"MATCH (n) WITH n.prop AS n2 RETURN n2.prop",Status.Statement.TypeError},new Object[]{"CYPHER 1.9 EXPLAIN MATCH n RETURN n",Status.Statement.SyntaxError},new Object[]{"RETURN 10 / 0",Status.Statement.ArithmeticError},new Object[]{"CREATE INDEX ON :Person(name)",Status.Transaction.ForbiddenDueToTransactionType},new Object[]{"CREATE (n:``)",Status.Schema.TokenNameError},new Object[]{"CREATE (b:Book {isbn: " + UNIQUE_ISBN + "})",Status.Schema.ConstraintValidationFailed},new Object[]{"LOAD CSV FROM 'http://127.0.0.1/null/' AS line CREATE (a {name:line[0]})",Status.Request.InvalidFormat});
  }
  @BeforeClass public static void prepareDatabase(){
    POST(txCommitUri(),quotedJson("{'statements': [{'statement': 'CREATE INDEX ON :Book(name)'}]}"));
    POST(txCommitUri(),quotedJson("{'statements': [{'statement': 'CREATE CONSTRAINT ON (b:Book) ASSERT b.isbn IS UNIQUE'}]}"));
    POST(txCommitUri(),quotedJson("{'statements': [{'statement': 'CREATE (b:Book {isbn: " + UNIQUE_ISBN + "})'}]}"));
  }
  @Test public void clientErrorShouldRollbackTheTransaction() throws JsonParseException {
    HTTP.Response first=POST(txUri(),quotedJson("{'statements': [{'statement': 'CREATE (n {prop : 1})'}]}"));
    assertThat(first.status(),is(201));
    assertThat(first,containsNoErrors());
    long txId=extractTxId(first);
    HTTP.Response malformed=POST(txUri(txId),quotedJson("{'statements': [{'statement': '" + query + "'}]}"));
    assertThat(malformed.status(),is(200));
    assertThat(malformed,hasErrors(errorStatus));
    HTTP.Response commit=POST(first.stringFromContent("commit"));
    assertThat(commit.status(),is(404));
  }
}
