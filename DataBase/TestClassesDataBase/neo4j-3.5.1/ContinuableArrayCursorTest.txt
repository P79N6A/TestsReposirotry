public class ContinuableArrayCursorTest {
  @Rule public final ExpectedException thrown=ExpectedException.none();
  @Test public void shouldNotReturnAnyElementOnEmptySupplier(){
    ContinuableArrayCursor cursor=new ContinuableArrayCursor<>(() -> null);
    assertFalse(cursor.next());
  }
  @Test public void shouldNotReturnAnyElementOnSupplierWithOneEmptyArray(){
    ContinuableArrayCursor cursor=new ContinuableArrayCursor(supply(new Integer[0]));
    assertFalse(cursor.next());
  }
  @Test public void shouldMoveCursorOverSingleArray(){
    Integer[] array=new Integer[]{1,2,3};
    ContinuableArrayCursor<Integer> cursor=new ContinuableArrayCursor<>(supply(array));
    assertCursor(cursor,array);
  }
  @Test public void shouldMoveCursorOverMultipleArrays(){
    Integer[][] arrays=new Integer[][]{new Integer[]{1,2,3},new Integer[]{4,5,6},new Integer[]{7}};
    ContinuableArrayCursor<Integer> cursor=new ContinuableArrayCursor<>(supply(arrays));
    assertCursor(cursor,arrays);
  }
  @Test public void callGetBeforeNextShouldThrowIllegalStateException(){
    ContinuableArrayCursor<?> cursor=new ContinuableArrayCursor(supply(new Integer[0]));
    thrown.expect(IllegalStateException.class);
    cursor.get();
  }
  @Test public void callGetAfterNextReturnsFalseShouldThrowIllegalStateException(){
    ContinuableArrayCursor<Integer> cursor=new ContinuableArrayCursor<>(supply(new Integer[0]));
    assertFalse(cursor.next());
    thrown.expect(IllegalStateException.class);
    cursor.get();
  }
  private Supplier<Integer[]> supply(  Integer[] array){
    return supply(new Integer[][]{array});
  }
  private Supplier<Integer[]> supply(  Integer[][] arrays){
    Iterator<Integer[]> iterator=Arrays.asList(arrays).iterator();
    return () -> iterator.hasNext() ? iterator.next() : null;
  }
  private void assertCursor(  ContinuableArrayCursor<?> cursor,  Object[]... arrays){
    for (    Object[] array : arrays) {
      for (      Object obj : array) {
        assertTrue(cursor.next());
        assertEquals(obj,cursor.get());
      }
    }
    assertFalse(cursor.next());
  }
}
