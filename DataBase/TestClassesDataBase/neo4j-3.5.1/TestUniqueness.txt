public class TestUniqueness extends TraversalTestBase {
  @Test public void nodeLevelUniqueness(){
    createGraph("a TO b","a TO c","a TO d","a TO e","a TO e","b TO e","d TO e","c TO b");
    RelationshipType to=withName("TO");
    try (Transaction tx=beginTx()){
      Node a=getNodeWithName("a");
      Node e=getNodeWithName("e");
      Path[] paths=splitPathsOnePerLevel(getGraphDb().traversalDescription().relationships(to,OUTGOING).uniqueness(NODE_LEVEL).evaluator(includeWhereEndNodeIs(e)).traverse(a));
      NodePathRepresentation pathRepresentation=new NodePathRepresentation(NAME_PROPERTY_REPRESENTATION);
      assertEquals("a,e",pathRepresentation.represent(paths[1]));
      String levelTwoPathRepresentation=pathRepresentation.represent(paths[2]);
      assertTrue(levelTwoPathRepresentation.equals("a,b,e") || levelTwoPathRepresentation.equals("a,d,e"));
      assertEquals("a,c,b,e",pathRepresentation.represent(paths[3]));
      tx.success();
    }
   }
  @Test public void nodeGlobalUniqueness(){
    createGraph("a TO b","a TO c","b TO c");
    RelationshipType to=withName("TO");
    try (Transaction tx=beginTx()){
      Node a=getNodeWithName("a");
      Node c=getNodeWithName("c");
      Iterator<Path> path=getGraphDb().traversalDescription().relationships(to,OUTGOING).uniqueness(NODE_GLOBAL).evaluator(includeWhereEndNodeIs(c)).traverse(a).iterator();
      Path thePath=path.next();
      assertFalse(path.hasNext());
      NodePathRepresentation pathRepresentation=new NodePathRepresentation(NAME_PROPERTY_REPRESENTATION);
      assertEquals("a,b,c",pathRepresentation.represent(thePath));
      tx.success();
    }
   }
  @Test public void relationshipLevelAndGlobalUniqueness(){
    createGraph("a TO b","b TO c","a TO b","b TO c","a TO c","a TO c","c TO d");
    RelationshipType to=withName("TO");
    try (Transaction tx=beginTx()){
      Node a=getNodeWithName("a");
      Node d=getNodeWithName("d");
      Iterator<Path> paths=getGraphDb().traversalDescription().relationships(to,OUTGOING).uniqueness(Uniqueness.NONE).evaluator(includeWhereEndNodeIs(d)).traverse(a).iterator();
      int count=0;
      while (paths.hasNext()) {
        count++;
        paths.next();
      }
      assertEquals("wrong number of paths calculated, the test assumption is wrong",6,count);
      paths=getGraphDb().traversalDescription().relationships(to,OUTGOING).uniqueness(RELATIONSHIP_LEVEL).evaluator(includeWhereEndNodeIs(d)).traverse(a).iterator();
      count=0;
      while (paths.hasNext()) {
        count++;
        paths.next();
      }
      assertEquals("wrong number of paths calculated with relationship level uniqueness",2,count);
      paths=getGraphDb().traversalDescription().relationships(to,OUTGOING).uniqueness(RELATIONSHIP_GLOBAL).evaluator(includeWhereEndNodeIs(d)).traverse(a).iterator();
      count=0;
      while (paths.hasNext()) {
        count++;
        paths.next();
      }
      assertEquals("wrong number of paths calculated with relationship global uniqueness",1,count);
    }
   }
  private Path[] splitPathsOnePerLevel(  Traverser traverser){
    Path[] paths=new Path[10];
    for (    Path path : traverser) {
      int depth=path.length();
      if (paths[depth] != null) {
        fail("More than one path one depth " + depth);
      }
      paths[depth]=path;
    }
    return paths;
  }
}
