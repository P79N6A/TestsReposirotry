public class ReadAheadChannelTest {
  @Rule public final EphemeralFileSystemRule fileSystemRule=new EphemeralFileSystemRule();
  @Test public void shouldThrowExceptionForReadAfterEOFIfNotEnoughBytesExist() throws Exception {
    FileSystemAbstraction fileSystem=fileSystemRule.get();
    StoreChannel storeChannel=fileSystem.open(new File("foo.txt"),OpenMode.READ_WRITE);
    ByteBuffer buffer=ByteBuffer.allocate(1);
    buffer.put((byte)1);
    buffer.flip();
    storeChannel.writeAll(buffer);
    storeChannel.force(false);
    storeChannel.close();
    storeChannel=fileSystem.open(new File("foo.txt"),OpenMode.READ);
    ReadAheadChannel<StoreChannel> channel=new ReadAheadChannel<>(storeChannel);
    assertEquals((byte)1,channel.get());
    try {
      channel.get();
      fail("Should have thrown exception signalling end of file reached");
    }
 catch (    ReadPastEndException endOfFile) {
    }
    try {
      channel.get();
      fail("Should have thrown exception signalling end of file reached");
    }
 catch (    ReadPastEndException endOfFile) {
    }
  }
  @Test public void shouldReturnValueIfSufficientBytesAreBufferedEvenIfEOFHasBeenEncountered() throws Exception {
    FileSystemAbstraction fileSystem=fileSystemRule.get();
    StoreChannel storeChannel=fileSystem.open(new File("foo.txt"),OpenMode.READ_WRITE);
    ByteBuffer buffer=ByteBuffer.allocate(1);
    buffer.put((byte)1);
    buffer.flip();
    storeChannel.writeAll(buffer);
    storeChannel.force(false);
    storeChannel.close();
    storeChannel=fileSystem.open(new File("foo.txt"),OpenMode.READ);
    ReadAheadChannel<StoreChannel> channel=new ReadAheadChannel<>(storeChannel);
    try {
      channel.getShort();
      fail("Should have thrown exception signalling end of file reached");
    }
 catch (    ReadPastEndException endOfFile) {
    }
    assertEquals((byte)1,channel.get());
    try {
      channel.get();
      fail("Should have thrown exception signalling end of file reached");
    }
 catch (    ReadPastEndException endOfFile) {
    }
  }
  @Test public void shouldHandleRunningOutOfBytesWhenRequestSpansMultipleFiles() throws Exception {
    FileSystemAbstraction fileSystem=fileSystemRule.get();
    StoreChannel storeChannel1=fileSystem.open(new File("foo.1"),OpenMode.READ_WRITE);
    ByteBuffer buffer=ByteBuffer.allocate(2);
    buffer.put((byte)0);
    buffer.put((byte)0);
    buffer.flip();
    storeChannel1.writeAll(buffer);
    storeChannel1.force(false);
    storeChannel1.close();
    buffer.flip();
    StoreChannel storeChannel2=fileSystem.open(new File("foo.2"),OpenMode.READ);
    buffer.put((byte)0);
    buffer.put((byte)1);
    buffer.flip();
    storeChannel2.writeAll(buffer);
    storeChannel2.force(false);
    storeChannel2.close();
    storeChannel1=fileSystem.open(new File("foo.1"),OpenMode.READ);
    final StoreChannel storeChannel2Copy=fileSystem.open(new File("foo.2"),OpenMode.READ);
    ReadAheadChannel<StoreChannel> channel=new ReadAheadChannel<StoreChannel>(storeChannel1){
      @Override protected StoreChannel next(      StoreChannel channel){
        return storeChannel2Copy;
      }
    }
;
    try {
      channel.getLong();
      fail("Should have thrown exception signalling end of file reached");
    }
 catch (    ReadPastEndException endOfFile) {
    }
    assertEquals(1,channel.getInt());
    try {
      channel.get();
      fail("Should have thrown exception signalling end of file reached");
    }
 catch (    ReadPastEndException endOfFile) {
    }
  }
  @Test public void shouldReturnPositionWithinBufferedStream() throws Exception {
    EphemeralFileSystemAbstraction fsa=fileSystemRule.get();
    File file=new File("foo.txt");
    int readAheadSize=512;
    int fileSize=readAheadSize * 8;
    createFile(fsa,file,fileSize);
    ReadAheadChannel<StoreChannel> bufferedReader=new ReadAheadChannel<>(fsa.open(file,OpenMode.READ),readAheadSize);
    for (int i=0; i < fileSize / Long.BYTES; i++) {
      assertEquals(Long.BYTES * i,bufferedReader.position());
      bufferedReader.getLong();
    }
    assertEquals(fileSize,bufferedReader.position());
    try {
      bufferedReader.getLong();
      fail();
    }
 catch (    ReadPastEndException e) {
    }
    assertEquals(fileSize,bufferedReader.position());
  }
  private void createFile(  EphemeralFileSystemAbstraction fsa,  File name,  int bufferSize) throws IOException {
    StoreChannel storeChannel=fsa.open(name,OpenMode.READ_WRITE);
    ByteBuffer buffer=ByteBuffer.allocate(bufferSize);
    for (int i=0; i < bufferSize; i++) {
      buffer.put((byte)i);
    }
    buffer.flip();
    storeChannel.writeAll(buffer);
    storeChannel.close();
  }
}
