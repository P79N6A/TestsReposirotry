public class TransportErrorIT extends AbstractBoltTransportsTest {
  @Rule public Neo4jWithSocket server=new Neo4jWithSocket(getClass());
  @Before public void setup(){
    address=server.lookupDefaultConnector();
  }
  @Test public void shouldHandleIncorrectFraming() throws Throwable {
    byte[] truncated=serialize(util.getNeo4jPack(),new RunMessage("UNWIND [1,2,3] AS a RETURN a, a * a AS a_squared"));
    truncated=Arrays.copyOf(truncated,truncated.length - 12);
    connection.connect(address).send(util.defaultAcceptedVersions()).send(util.chunk(32,truncated));
    assertThat(connection,util.eventuallyReceivesSelectedProtocolVersion());
    assertThat(connection,eventuallyDisconnects());
  }
  @Test public void shouldHandleMessagesWithIncorrectFields() throws Throwable {
    final RecordingByteChannel rawData=new RecordingByteChannel();
    final PackStream.Packer packer=new PackStream.Packer(new BufferedChannelOutput(rawData));
    packer.packStructHeader(2,RunMessage.SIGNATURE);
    packer.pack("RETURN 1");
    packer.pack(1234);
    packer.flush();
    byte[] invalidMessage=rawData.getBytes();
    connection.connect(address).send(util.defaultAcceptedVersions()).send(util.chunk(32,invalidMessage));
    assertThat(connection,util.eventuallyReceivesSelectedProtocolVersion());
    assertThat(connection,eventuallyDisconnects());
  }
  @Test public void shouldHandleUnknownMessages() throws Throwable {
    final RecordingByteChannel rawData=new RecordingByteChannel();
    final PackStream.Packer packer=new PackStream.Packer(new BufferedChannelOutput(rawData));
    packer.packStructHeader(1,(byte)0x66);
    packer.pack(1234);
    packer.flush();
    byte[] invalidMessage=rawData.getBytes();
    connection.connect(address).send(util.defaultAcceptedVersions()).send(util.chunk(32,invalidMessage));
    assertThat(connection,util.eventuallyReceivesSelectedProtocolVersion());
    assertThat(connection,eventuallyDisconnects());
  }
  @Test public void shouldHandleUnknownMarkerBytes() throws Throwable {
    final RecordingByteChannel rawData=new RecordingByteChannel();
    final BufferedChannelOutput out=new BufferedChannelOutput(rawData);
    final PackStream.Packer packer=new PackStream.Packer(out);
    packer.packStructHeader(2,RunMessage.SIGNATURE);
    out.writeByte(PackStream.RESERVED_C7);
    out.flush();
    byte[] invalidMessage=rawData.getBytes();
    connection.connect(address).send(util.defaultAcceptedVersions()).send(util.chunk(32,invalidMessage));
    assertThat(connection,util.eventuallyReceivesSelectedProtocolVersion());
    assertThat(connection,eventuallyDisconnects());
  }
}
