private static class RecordingLocks implements Locks {
  private final Locks delegate;
  private final List<LockOperationListener> listeners;
  private final List<LockOperationRecord> lockOperationRecords;
  private RecordingLocks(  Locks delegate,  List<LockOperationListener> listeners,  List<LockOperationRecord> lockOperationRecords){
    this.delegate=delegate;
    this.listeners=listeners;
    this.lockOperationRecords=lockOperationRecords;
  }
  List<LockOperationRecord> getLockOperationRecords(){
    return lockOperationRecords;
  }
  private void record(  boolean exclusive,  boolean acquisition,  ResourceTypes type,  long... ids){
    if (acquisition) {
      for (      LockOperationListener listener : listeners) {
        listener.lockAcquired(exclusive,type,ids);
      }
    }
    lockOperationRecords.add(new LockOperationRecord(exclusive,acquisition,type,ids));
  }
  @Override public void acquireExclusiveNodeLock(  long... ids){
    record(true,true,ResourceTypes.NODE,ids);
    delegate.acquireExclusiveNodeLock(ids);
  }
  @Override public void acquireExclusiveRelationshipLock(  long... ids){
    record(true,true,ResourceTypes.RELATIONSHIP,ids);
    delegate.acquireExclusiveRelationshipLock(ids);
  }
  @Override public void acquireExclusiveExplicitIndexLock(  long... ids){
    record(true,true,ResourceTypes.EXPLICIT_INDEX,ids);
    delegate.acquireExclusiveExplicitIndexLock(ids);
  }
  @Override public void acquireExclusiveLabelLock(  long... ids){
    record(true,true,ResourceTypes.LABEL,ids);
    delegate.acquireExclusiveLabelLock(ids);
  }
  @Override public void releaseExclusiveNodeLock(  long... ids){
    record(true,false,ResourceTypes.NODE,ids);
    delegate.releaseExclusiveNodeLock(ids);
  }
  @Override public void releaseExclusiveRelationshipLock(  long... ids){
    record(true,false,ResourceTypes.RELATIONSHIP,ids);
    delegate.releaseExclusiveRelationshipLock(ids);
  }
  @Override public void releaseExclusiveExplicitIndexLock(  long... ids){
    record(true,false,ResourceTypes.EXPLICIT_INDEX,ids);
    delegate.releaseExclusiveExplicitIndexLock(ids);
  }
  @Override public void releaseExclusiveLabelLock(  long... ids){
    record(true,false,ResourceTypes.LABEL,ids);
    delegate.releaseExclusiveLabelLock(ids);
  }
  @Override public void acquireSharedNodeLock(  long... ids){
    record(false,true,ResourceTypes.NODE,ids);
    delegate.acquireSharedNodeLock(ids);
  }
  @Override public void acquireSharedRelationshipLock(  long... ids){
    record(false,true,ResourceTypes.RELATIONSHIP,ids);
    delegate.acquireSharedRelationshipLock(ids);
  }
  @Override public void acquireSharedExplicitIndexLock(  long... ids){
    record(false,true,ResourceTypes.EXPLICIT_INDEX,ids);
    delegate.acquireSharedExplicitIndexLock(ids);
  }
  @Override public void acquireSharedLabelLock(  long... ids){
    record(false,true,ResourceTypes.LABEL,ids);
    delegate.acquireSharedLabelLock(ids);
  }
  @Override public void releaseSharedNodeLock(  long... ids){
    record(false,false,ResourceTypes.NODE,ids);
    delegate.releaseSharedNodeLock(ids);
  }
  @Override public void releaseSharedRelationshipLock(  long... ids){
    record(false,false,ResourceTypes.RELATIONSHIP,ids);
    delegate.releaseSharedRelationshipLock(ids);
  }
  @Override public void releaseSharedExplicitIndexLock(  long... ids){
    record(false,false,ResourceTypes.EXPLICIT_INDEX,ids);
    delegate.releaseSharedExplicitIndexLock(ids);
  }
  @Override public void releaseSharedLabelLock(  long... ids){
    record(false,false,ResourceTypes.LABEL,ids);
    delegate.releaseSharedLabelLock(ids);
  }
}
