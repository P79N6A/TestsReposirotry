public final class Resources implements TestRule {
  @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface Life {  InitialLifecycle value();
}
  public enum InitialLifecycle {  INITIALIZED{
    @Override void initialize(    LifeRule life){
      life.init();
    }
  }
,   STARTED{
    @Override void initialize(    LifeRule life){
      life.start();
    }
  }
;   abstract void initialize(  LifeRule life);
}
  private final EphemeralFileSystemRule fs=new EphemeralFileSystemRule();
  private final PageCacheRule pageCacheRule=new PageCacheRule();
  private final TestDirectory testDirectory=TestDirectory.testDirectory(fs);
  private final LifeRule life=new LifeRule();
  @Override public Statement apply(  Statement base,  Description description){
    return fs.apply(testDirectory.apply(pageCacheRule.apply(lifeStatement(base,description),description),description),description);
  }
  private Statement lifeStatement(  Statement base,  Description description){
    Life initialLifecycle=description.getAnnotation(Life.class);
    if (initialLifecycle != null) {
      base=initialise(base,initialLifecycle.value());
    }
    return life.apply(base,description);
  }
  private Statement initialise(  final Statement base,  final InitialLifecycle initialLifecycle){
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        initialLifecycle.initialize(life);
        base.evaluate();
      }
    }
;
  }
  public FileSystemAbstraction fileSystem(){
    return fs.get();
  }
  public PageCache pageCache(){
    return pageCacheRule.getPageCache(fileSystem());
  }
  public TestDirectory testDirectory(){
    return testDirectory;
  }
  public void lifeStarts() throws LifecycleException {
    life.start();
  }
  public void lifeShutsDown() throws LifecycleException {
    life.shutdown();
  }
  public <T>T managed(  T service){
    Lifecycle lifecycle=null;
    if (service instanceof Lifecycle) {
      lifecycle=(Lifecycle)service;
    }
 else     if (service instanceof AutoCloseable) {
      lifecycle=new Closer((AutoCloseable)service);
    }
    life.add(lifecycle);
    return service;
  }
  public LogProvider logProvider(){
    return NullLogProvider.getInstance();
  }
private static class Closer extends LifecycleAdapter {
    private final AutoCloseable closeable;
    Closer(    AutoCloseable closeable){
      this.closeable=closeable;
    }
    @Override public void shutdown() throws Exception {
      closeable.close();
    }
  }
}
