class NonUniqueDatabaseIndexSamplerTest {
  private final IndexSearcher indexSearcher=mock(IndexSearcher.class,Mockito.RETURNS_DEEP_STUBS);
  private final TaskCoordinator taskControl=new TaskCoordinator(0,TimeUnit.MILLISECONDS);
  private final IndexSamplingConfig indexSamplingConfig=new IndexSamplingConfig(Config.defaults());
  @Test void nonUniqueSamplingCancel() throws IOException {
    Terms terms=getTerms("test",1);
    Map<String,Terms> fieldTermsMap=MapUtil.genericMap("0string",terms,"id",terms,"0string",terms);
    IndexReaderStub indexReader=new IndexReaderStub(new SamplingFields(fieldTermsMap));
    when(indexSearcher.getIndexReader()).thenReturn(indexReader);
    NonUniqueLuceneIndexSampler luceneIndexSampler=createSampler();
    taskControl.cancel();
    IndexNotFoundKernelException notFoundKernelException=assertThrows(IndexNotFoundKernelException.class,luceneIndexSampler::sampleIndex);
    assertEquals(notFoundKernelException.getMessage(),"Index dropped while sampling.");
  }
  @Test void nonUniqueIndexSampling() throws Exception {
    Terms aTerms=getTerms("a",1);
    Terms idTerms=getTerms("id",2);
    Terms bTerms=getTerms("b",3);
    Map<String,Terms> fieldTermsMap=MapUtil.genericMap("0string",aTerms,"id",idTerms,"0array",bTerms);
    IndexReaderStub indexReader=new IndexReaderStub(new SamplingFields(fieldTermsMap));
    indexReader.setElements(new String[4]);
    when(indexSearcher.getIndexReader()).thenReturn(indexReader);
    assertEquals(new IndexSample(4,2,4),createSampler().sampleIndex());
  }
  @Test void samplingOfLargeNumericValues() throws Exception {
    try (RAMDirectory dir=new RAMDirectory();WritableIndexPartition indexPartition=new WritableIndexPartition(new File("testPartition"),dir,IndexWriterConfigs.standard())){
      insertDocument(indexPartition,1,Long.MAX_VALUE);
      insertDocument(indexPartition,2,Integer.MAX_VALUE);
      indexPartition.maybeRefreshBlocking();
      try (PartitionSearcher searcher=indexPartition.acquireSearcher()){
        NonUniqueLuceneIndexSampler sampler=new NonUniqueLuceneIndexSampler(searcher.getIndexSearcher(),taskControl.newInstance(),new IndexSamplingConfig(Config.defaults()));
        assertEquals(new IndexSample(2,2,2),sampler.sampleIndex());
      }
     }
   }
  private NonUniqueLuceneIndexSampler createSampler(){
    return new NonUniqueLuceneIndexSampler(indexSearcher,taskControl.newInstance(),indexSamplingConfig);
  }
  private static Terms getTerms(  String value,  int frequency) throws IOException {
    TermsEnum termsEnum=mock(TermsEnum.class);
    Terms terms=mock(Terms.class);
    when(terms.iterator()).thenReturn(termsEnum);
    when(termsEnum.next()).thenReturn(new BytesRef(value.getBytes())).thenReturn(null);
    when(termsEnum.docFreq()).thenReturn(frequency);
    return terms;
  }
  private static void insertDocument(  WritableIndexPartition partition,  long nodeId,  Object propertyValue) throws IOException {
    Document doc=LuceneDocumentStructure.documentRepresentingProperties(nodeId,Values.of(propertyValue));
    partition.getIndexWriter().addDocument(doc);
  }
private static class SamplingFields extends Fields {
    private Map<String,Terms> fieldTermsMap;
    SamplingFields(    Map<String,Terms> fieldTermsMap){
      this.fieldTermsMap=fieldTermsMap;
    }
    @Override public Iterator<String> iterator(){
      return fieldTermsMap.keySet().iterator();
    }
    @Override public Terms terms(    String field){
      return fieldTermsMap.get(field);
    }
    @Override public int size(){
      return fieldTermsMap.size();
    }
  }
}
