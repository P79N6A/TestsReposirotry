public class SchemaStoreTest {
  @ClassRule public static final PageCacheRule pageCacheRule=new PageCacheRule();
  private final EphemeralFileSystemRule fs=new EphemeralFileSystemRule();
  private final TestDirectory testDirectory=TestDirectory.testDirectory(fs);
  @Rule public final RuleChain ruleChain=RuleChain.outerRule(fs).around(testDirectory);
  private Config config;
  private SchemaStore store;
  private NeoStores neoStores;
  private StoreFactory storeFactory;
  @Before public void before(){
    config=Config.defaults();
    DefaultIdGeneratorFactory idGeneratorFactory=new DefaultIdGeneratorFactory(fs.get());
    storeFactory=new StoreFactory(testDirectory.databaseLayout(),config,idGeneratorFactory,pageCacheRule.getPageCache(fs.get()),fs.get(),NullLogProvider.getInstance(),EmptyVersionContextSupplier.EMPTY);
    neoStores=storeFactory.openAllNeoStores(true);
    store=neoStores.getSchemaStore();
  }
  @After public void after(){
    neoStores.close();
  }
  @Test public void storeAndLoadSchemaRule() throws Exception {
    StoreIndexDescriptor indexRule=forSchema(forLabel(1,4),PROVIDER_DESCRIPTOR).withId(store.nextId());
    StoreIndexDescriptor readIndexRule=(StoreIndexDescriptor)SchemaRuleSerialization.deserialize(indexRule.getId(),wrap(SchemaRuleSerialization.serialize(indexRule)));
    assertEquals(indexRule.getId(),readIndexRule.getId());
    assertEquals(indexRule.schema(),readIndexRule.schema());
    assertEquals(indexRule,readIndexRule);
    assertEquals(indexRule.providerDescriptor(),readIndexRule.providerDescriptor());
  }
  @Test public void storeAndLoadCompositeSchemaRule() throws Exception {
    int[] propertyIds={4,5,6,7};
    StoreIndexDescriptor indexRule=forSchema(forLabel(2,propertyIds),PROVIDER_DESCRIPTOR).withId(store.nextId());
    StoreIndexDescriptor readIndexRule=(StoreIndexDescriptor)SchemaRuleSerialization.deserialize(indexRule.getId(),wrap(SchemaRuleSerialization.serialize(indexRule)));
    assertEquals(indexRule.getId(),readIndexRule.getId());
    assertEquals(indexRule.schema(),readIndexRule.schema());
    assertEquals(indexRule,readIndexRule);
    assertEquals(indexRule.providerDescriptor(),readIndexRule.providerDescriptor());
  }
  @Test public void storeAndLoadMultiTokenSchemaRule() throws Exception {
    int[] propertyIds={4,5,6,7};
    int[] entityTokens={2,3,4};
    StoreIndexDescriptor indexRule=forSchema(multiToken(entityTokens,EntityType.RELATIONSHIP,propertyIds),PROVIDER_DESCRIPTOR).withId(store.nextId());
    StoreIndexDescriptor readIndexRule=(StoreIndexDescriptor)SchemaRuleSerialization.deserialize(indexRule.getId(),wrap(SchemaRuleSerialization.serialize(indexRule)));
    assertEquals(indexRule.getId(),readIndexRule.getId());
    assertEquals(indexRule.schema(),readIndexRule.schema());
    assertEquals(indexRule,readIndexRule);
    assertEquals(indexRule.providerDescriptor(),readIndexRule.providerDescriptor());
  }
  @Test public void storeAndLoadAnyTokenMultiTokenSchemaRule() throws Exception {
    int[] propertyIds={4,5,6,7};
    int[] entityTokens={};
    StoreIndexDescriptor indexRule=forSchema(multiToken(entityTokens,EntityType.NODE,propertyIds),PROVIDER_DESCRIPTOR).withId(store.nextId());
    StoreIndexDescriptor readIndexRule=(StoreIndexDescriptor)SchemaRuleSerialization.deserialize(indexRule.getId(),wrap(SchemaRuleSerialization.serialize(indexRule)));
    assertEquals(indexRule.getId(),readIndexRule.getId());
    assertEquals(indexRule.schema(),readIndexRule.schema());
    assertEquals(indexRule,readIndexRule);
    assertEquals(indexRule.providerDescriptor(),readIndexRule.providerDescriptor());
  }
  @Test public void storeAndLoad_Big_CompositeSchemaRule() throws Exception {
    StoreIndexDescriptor indexRule=forSchema(forLabel(2,IntStream.range(1,200).toArray()),PROVIDER_DESCRIPTOR).withId(store.nextId());
    StoreIndexDescriptor readIndexRule=(StoreIndexDescriptor)SchemaRuleSerialization.deserialize(indexRule.getId(),wrap(SchemaRuleSerialization.serialize(indexRule)));
    assertEquals(indexRule.getId(),readIndexRule.getId());
    assertEquals(indexRule.schema(),readIndexRule.schema());
    assertEquals(indexRule,readIndexRule);
    assertEquals(indexRule.providerDescriptor(),readIndexRule.providerDescriptor());
  }
  @Test public void storeAndLoad_Big_CompositeMultiTokenSchemaRule() throws Exception {
    StoreIndexDescriptor indexRule=forSchema(multiToken(IntStream.range(1,200).toArray(),EntityType.RELATIONSHIP,IntStream.range(1,200).toArray()),PROVIDER_DESCRIPTOR).withId(store.nextId());
    StoreIndexDescriptor readIndexRule=(StoreIndexDescriptor)SchemaRuleSerialization.deserialize(indexRule.getId(),wrap(SchemaRuleSerialization.serialize(indexRule)));
    assertEquals(indexRule.getId(),readIndexRule.getId());
    assertEquals(indexRule.schema(),readIndexRule.schema());
    assertEquals(indexRule,readIndexRule);
    assertEquals(indexRule.providerDescriptor(),readIndexRule.providerDescriptor());
  }
  @Test public void storeAndLoadAllRules(){
    long indexId=store.nextId();
    long constraintId=store.nextId();
    Collection<SchemaRule> rules=Arrays.asList(uniqueIndexRule(indexId,constraintId,PROVIDER_DESCRIPTOR,2,5,3),constraintUniqueRule(constraintId,indexId,2,5,3),indexRule(store.nextId(),PROVIDER_DESCRIPTOR,0,5),indexRule(store.nextId(),PROVIDER_DESCRIPTOR,1,6,10,99),constraintExistsRule(store.nextId(),5,1));
    for (    SchemaRule rule : rules) {
      storeRule(rule);
    }
    Collection<SchemaRule> readRules=asCollection(store.loadAllSchemaRules());
    assertEquals(rules,readRules);
  }
  private long storeRule(  SchemaRule rule){
    Collection<DynamicRecord> records=store.allocateFrom(rule);
    for (    DynamicRecord record : records) {
      store.updateRecord(record);
    }
    return Iterables.first(records).getId();
  }
  private StoreIndexDescriptor indexRule(  long ruleId,  IndexProviderDescriptor descriptor,  int labelId,  int... propertyIds){
    return IndexDescriptorFactory.forSchema(forLabel(labelId,propertyIds),descriptor).withId(ruleId);
  }
  private StoreIndexDescriptor uniqueIndexRule(  long ruleId,  long owningConstraint,  IndexProviderDescriptor descriptor,  int labelId,  int... propertyIds){
    return IndexDescriptorFactory.uniqueForSchema(forLabel(labelId,propertyIds),descriptor).withIds(ruleId,owningConstraint);
  }
  private ConstraintRule constraintUniqueRule(  long ruleId,  long ownedIndexId,  int labelId,  int... propertyIds){
    return ConstraintRule.constraintRule(ruleId,ConstraintDescriptorFactory.uniqueForLabel(labelId,propertyIds),ownedIndexId);
  }
  private ConstraintRule constraintExistsRule(  long ruleId,  int labelId,  int... propertyIds){
    return ConstraintRule.constraintRule(ruleId,ConstraintDescriptorFactory.existsForLabel(labelId,propertyIds));
  }
}
