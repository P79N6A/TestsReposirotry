public class DenseNodeIT {
  @Rule public ImpermanentDatabaseRule databaseRule=new ImpermanentDatabaseRule();
  @Test public void testBringingNodeOverDenseThresholdIsConsistent(){
    GraphDatabaseService db=databaseRule.getGraphDatabaseAPI();
    Node root;
    try (Transaction tx=db.beginTx()){
      root=db.createNode();
      createRelationshipsOnNode(db,root,40);
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      createRelationshipsOnNode(db,root,60);
      assertEquals(100,root.getDegree());
      assertEquals(100,root.getDegree(Direction.OUTGOING));
      assertEquals(0,root.getDegree(Direction.INCOMING));
      assertEquals(25,root.getDegree(RelationshipType.withName("Type0")));
      assertEquals(25,root.getDegree(RelationshipType.withName("Type1")));
      assertEquals(25,root.getDegree(RelationshipType.withName("Type2")));
      assertEquals(25,root.getDegree(RelationshipType.withName("Type3")));
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      assertEquals(100,root.getDegree());
      assertEquals(100,root.getDegree(Direction.OUTGOING));
      assertEquals(0,root.getDegree(Direction.INCOMING));
      assertEquals(25,root.getDegree(RelationshipType.withName("Type0")));
      assertEquals(25,root.getDegree(RelationshipType.withName("Type1")));
      assertEquals(25,root.getDegree(RelationshipType.withName("Type2")));
      assertEquals(25,root.getDegree(RelationshipType.withName("Type3")));
      tx.success();
    }
   }
  @Test public void deletingRelationshipsFromDenseNodeIsConsistent(){
    GraphDatabaseService db=databaseRule.getGraphDatabaseAPI();
    Node root;
    try (Transaction tx=db.beginTx()){
      root=db.createNode();
      createRelationshipsOnNode(db,root,100);
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      deleteRelationshipsFromNode(root,80);
      assertEquals(20,root.getDegree());
      assertEquals(20,root.getDegree(Direction.OUTGOING));
      assertEquals(0,root.getDegree(Direction.INCOMING));
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      assertEquals(20,root.getDegree());
      assertEquals(20,root.getDegree(Direction.OUTGOING));
      assertEquals(0,root.getDegree(Direction.INCOMING));
      tx.success();
    }
   }
  @Test public void movingBilaterallyOfTheDenseNodeThresholdIsConsistent(){
    GraphDatabaseService db=databaseRule.getGraphDatabaseAPI();
    Node root;
    try (Transaction tx=db.beginTx()){
      root=db.createNode();
      createRelationshipsOnNode(db,root,100);
      deleteRelationshipsFromNode(root,80);
      assertEquals(20,root.getDegree());
      assertEquals(20,root.getDegree(Direction.OUTGOING));
      assertEquals(0,root.getDegree(Direction.INCOMING));
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      assertEquals(20,root.getDegree());
      assertEquals(20,root.getDegree(Direction.OUTGOING));
      assertEquals(0,root.getDegree(Direction.INCOMING));
      tx.success();
    }
   }
  @Test public void testBringingTwoConnectedNodesOverDenseThresholdIsConsistent(){
    GraphDatabaseService db=databaseRule.getGraphDatabaseAPI();
    Node source;
    Node sink;
    try (Transaction tx=db.beginTx()){
      source=db.createNode();
      sink=db.createNode();
      createRelationshipsBetweenNodes(source,sink,40);
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      createRelationshipsBetweenNodes(source,sink,60);
      assertEquals(100,source.getDegree());
      assertEquals(100,source.getDegree(Direction.OUTGOING));
      assertEquals(0,source.getDegree(Direction.INCOMING));
      assertEquals(25,source.getDegree(RelationshipType.withName("Type0")));
      assertEquals(25,source.getDegree(RelationshipType.withName("Type1")));
      assertEquals(25,source.getDegree(RelationshipType.withName("Type2")));
      assertEquals(25,source.getDegree(RelationshipType.withName("Type3")));
      assertEquals(100,sink.getDegree());
      assertEquals(0,sink.getDegree(Direction.OUTGOING));
      assertEquals(100,sink.getDegree(Direction.INCOMING));
      assertEquals(25,sink.getDegree(RelationshipType.withName("Type0")));
      assertEquals(25,sink.getDegree(RelationshipType.withName("Type1")));
      assertEquals(25,sink.getDegree(RelationshipType.withName("Type2")));
      assertEquals(25,sink.getDegree(RelationshipType.withName("Type3")));
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      assertEquals(100,source.getDegree());
      assertEquals(100,source.getDegree(Direction.OUTGOING));
      assertEquals(0,source.getDegree(Direction.INCOMING));
      assertEquals(25,source.getDegree(RelationshipType.withName("Type0")));
      assertEquals(25,source.getDegree(RelationshipType.withName("Type1")));
      assertEquals(25,source.getDegree(RelationshipType.withName("Type2")));
      assertEquals(25,source.getDegree(RelationshipType.withName("Type3")));
      assertEquals(100,sink.getDegree());
      assertEquals(0,sink.getDegree(Direction.OUTGOING));
      assertEquals(100,sink.getDegree(Direction.INCOMING));
      assertEquals(25,sink.getDegree(RelationshipType.withName("Type0")));
      assertEquals(25,sink.getDegree(RelationshipType.withName("Type1")));
      assertEquals(25,sink.getDegree(RelationshipType.withName("Type2")));
      assertEquals(25,sink.getDegree(RelationshipType.withName("Type3")));
      tx.success();
    }
   }
  @Test public void shouldBeAbleToCreateRelationshipsInEmptyDenseNode(){
    Node node;
    try (Transaction tx=databaseRule.beginTx()){
      node=databaseRule.createNode();
      createRelationshipsBetweenNodes(node,databaseRule.createNode(),denseNodeThreshold(databaseRule) + 1);
      tx.success();
    }
     try (Transaction tx=databaseRule.beginTx()){
      node.getRelationships().forEach(Relationship::delete);
      tx.success();
    }
     Relationship rel;
    try (Transaction tx=databaseRule.beginTx()){
      rel=node.createRelationshipTo(databaseRule.createNode(),MyRelTypes.TEST);
      tx.success();
    }
     try (Transaction tx=databaseRule.beginTx()){
      assertEquals(rel,single(node.getRelationships()));
      tx.success();
    }
   }
  private int denseNodeThreshold(  GraphDatabaseAPI db){
    return db.getDependencyResolver().resolveDependency(Config.class).get(GraphDatabaseSettings.dense_node_threshold);
  }
  private void deleteRelationshipsFromNode(  Node root,  int numberOfRelationships){
    int deleted=0;
    try (ResourceIterator<Relationship> iterator=asResourceIterator(root.getRelationships().iterator())){
      while (iterator.hasNext()) {
        Relationship relationship=iterator.next();
        relationship.delete();
        deleted++;
        if (deleted == numberOfRelationships) {
          break;
        }
      }
    }
   }
  private void createRelationshipsOnNode(  GraphDatabaseService db,  Node root,  int numberOfRelationships){
    for (int i=0; i < numberOfRelationships; i++) {
      root.createRelationshipTo(db.createNode(),RelationshipType.withName("Type" + (i % 4))).setProperty("" + i,i);
    }
  }
  private void createRelationshipsBetweenNodes(  Node source,  Node sink,  int numberOfRelationships){
    for (int i=0; i < numberOfRelationships; i++) {
      source.createRelationshipTo(sink,RelationshipType.withName("Type" + (i % 4))).setProperty("" + i,i);
    }
  }
}
