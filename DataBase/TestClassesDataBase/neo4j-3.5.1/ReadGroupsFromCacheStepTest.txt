public class ReadGroupsFromCacheStepTest {
  @Test public void shouldProduceCompleteBatchesPerOwner(){
    Configuration config=Configuration.withBatchSize(DEFAULT,10);
    Iterator<RelationshipGroupRecord> groups=groups(new Group(1,3),new Group(2,3),new Group(3,4),new Group(4,2),new Group(5,10),new Group(6,35),new Group(7,2)).iterator();
    final AtomicInteger processCounter=new AtomicInteger();
    Stage stage=new Stage(getClass().getSimpleName(),null,config,0){
{
        add(new ReadGroupsFromCacheStep(control(),config,groups,1));
        add(new VerifierStep(control(),config,processCounter));
      }
    }
;
    superviseDynamicExecution(stage);
    assertEquals(4,processCounter.get());
  }
  protected static List<RelationshipGroupRecord> groups(  Group... groups){
    List<RelationshipGroupRecord> records=new ArrayList<>();
    for (    Group group : groups) {
      for (int i=0; i < group.count; i++) {
        RelationshipGroupRecord record=new RelationshipGroupRecord(NULL_REFERENCE.longValue());
        record.setOwningNode(group.owningNode);
        record.setNext(group.count - i - 1);
        records.add(record);
      }
    }
    return records;
  }
protected static class Group {
    final long owningNode;
    final int count;
    public Group(    long owningNode,    int count){
      this.owningNode=owningNode;
      this.count=count;
    }
  }
private static class VerifierStep extends ProcessorStep<RelationshipGroupRecord[]> {
    private long lastBatchLastOwningNode=-1;
    private final AtomicInteger processCounter;
    VerifierStep(    StageControl control,    Configuration config,    AtomicInteger processCounter){
      super(control,"Verifier",config,1);
      this.processCounter=processCounter;
    }
    @Override protected void process(    RelationshipGroupRecord[] batch,    BatchSender sender){
      long lastOwningNode=lastBatchLastOwningNode;
      for (      RelationshipGroupRecord record : batch) {
        assertTrue(record.getOwningNode() >= lastOwningNode);
        assertTrue(record.getOwningNode() > lastBatchLastOwningNode);
      }
      processCounter.incrementAndGet();
      if (batch.length > 0) {
        lastBatchLastOwningNode=batch[batch.length - 1].getOwningNode();
      }
    }
  }
}
