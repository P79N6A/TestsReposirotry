public class VmPauseMonitorTest {
  @SuppressWarnings("unchecked") private final Consumer<VmPauseInfo> listener=mock(Consumer.class);
  private final JobHandle jobHandle=mock(JobHandle.class);
  private final JobScheduler jobScheduler=mock(JobScheduler.class);
  private final VmPauseMonitor monitor=spy(new VmPauseMonitor(ofMillis(1),ofMillis(0),NullLog.getInstance(),jobScheduler,listener));
  @Before public void setUp(){
    doReturn(jobHandle).when(jobScheduler).schedule(any(Group.class),any(Runnable.class));
  }
  @Test public void testCtorParametersValidation(){
    assertThatFails(NullPointerException.class,() -> new VmPauseMonitor(ofSeconds(1),ofSeconds(1),null,jobScheduler,listener));
    assertThatFails(NullPointerException.class,() -> new VmPauseMonitor(ofSeconds(1),ofSeconds(1),NullLog.getInstance(),null,listener));
    assertThatFails(NullPointerException.class,() -> new VmPauseMonitor(ofSeconds(1),ofSeconds(1),NullLog.getInstance(),jobScheduler,null));
    assertThatFails(IllegalArgumentException.class,() -> new VmPauseMonitor(ofSeconds(0),ofSeconds(1),NullLog.getInstance(),jobScheduler,listener));
    assertThatFails(IllegalArgumentException.class,() -> new VmPauseMonitor(ofSeconds(1),ofSeconds(-1),NullLog.getInstance(),jobScheduler,listener));
    assertThatFails(IllegalArgumentException.class,() -> new VmPauseMonitor(ofSeconds(-1),ofSeconds(1),NullLog.getInstance(),jobScheduler,listener));
  }
  @Test public void testStartAndStop(){
    monitor.start();
    monitor.stop();
    verify(jobScheduler).schedule(any(Group.class),any(Runnable.class));
    verify(jobHandle).cancel(eq(true));
  }
  @Test public void testRestart(){
    monitor.start();
    monitor.stop();
    monitor.start();
    verify(jobScheduler,times(2)).schedule(any(Group.class),any(Runnable.class));
    verify(jobHandle).cancel(eq(true));
  }
  @Test(expected=IllegalStateException.class) public void testFailStopWithoutStart(){
    monitor.stop();
  }
  @Test(expected=IllegalStateException.class) public void testFailOnDoubleStart(){
    monitor.start();
    monitor.start();
  }
  @Test(expected=IllegalStateException.class) public void testFailOnDoubleStop(){
    monitor.start();
    monitor.stop();
    monitor.stop();
  }
  @Test public void testNotifyListener() throws Exception {
    doReturn(false,true).when(monitor).isStopped();
    monitor.monitor();
    verify(listener).accept(any(VmPauseInfo.class));
  }
  private static void assertThatFails(  Class<? extends Exception> exceptionClass,  Runnable action){
    try {
      action.run();
      fail("Expected exception was not thrown: " + exceptionClass.getName());
    }
 catch (    Exception e) {
      assertSame(exceptionClass,e.getClass());
    }
  }
}
