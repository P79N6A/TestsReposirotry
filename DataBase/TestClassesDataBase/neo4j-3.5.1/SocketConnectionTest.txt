public class SocketConnectionTest {
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Test public void shouldOnlyReadOnceIfAllBytesAreRead() throws Exception {
    Socket socket=mock(Socket.class);
    InputStream stream=mock(InputStream.class);
    when(socket.getInputStream()).thenReturn(stream);
    when(stream.read(any(byte[].class),anyInt(),anyInt())).thenReturn(4);
    SocketConnection connection=new SocketConnection(socket);
    connection.connect(new HostnamePort("my.domain",1234));
    connection.recv(4);
    verify(stream,times(1)).read(any(byte[].class),anyInt(),anyInt());
  }
  @Test public void shouldOnlyReadUntilAllBytesAreRead() throws Exception {
    Socket socket=mock(Socket.class);
    InputStream stream=mock(InputStream.class);
    when(socket.getInputStream()).thenReturn(stream);
    when(stream.read(any(byte[].class),anyInt(),anyInt())).thenReturn(4).thenReturn(4).thenReturn(2).thenReturn(-1);
    SocketConnection connection=new SocketConnection(socket);
    connection.connect(new HostnamePort("my.domain",1234));
    connection.recv(10);
    verify(stream,times(3)).read(any(byte[].class),anyInt(),anyInt());
  }
  @Test public void shouldThrowIfNotEnoughBytesAreRead() throws Exception {
    Socket socket=mock(Socket.class);
    InputStream stream=mock(InputStream.class);
    when(socket.getInputStream()).thenReturn(stream);
    when(stream.read(any(byte[].class),anyInt(),anyInt())).thenReturn(4).thenReturn(-1);
    SocketConnection connection=new SocketConnection(socket);
    connection.connect(new HostnamePort("my.domain",1234));
    expectedException.expect(IOException.class);
    connection.recv(10);
  }
}
