class OwnerCheckTest {
  @Test void shouldNotDecorateCheckerWhenInactive(){
    OwnerCheck decorator=new OwnerCheck(false);
    PrimitiveRecordCheck<NodeRecord,ConsistencyReport.NodeConsistencyReport> checker=dummyNodeCheck();
    RecordCheck<NodeRecord,ConsistencyReport.NodeConsistencyReport> decorated=decorator.decorateNodeChecker(checker);
    assertSame(checker,decorated);
  }
  @Test void shouldNotReportAnythingForNodesWithDifferentPropertyChains(){
    OwnerCheck decorator=new OwnerCheck(true);
    RecordCheck<NodeRecord,ConsistencyReport.NodeConsistencyReport> nodeChecker=decorator.decorateNodeChecker(dummyNodeCheck());
    RecordAccessStub records=new RecordAccessStub();
    NodeRecord node1=records.add(inUse(new NodeRecord(1,false,NONE,7)));
    NodeRecord node2=records.add(inUse(new NodeRecord(2,false,NONE,8)));
    ConsistencyReport.NodeConsistencyReport report1=check(ConsistencyReport.NodeConsistencyReport.class,nodeChecker,node1,records);
    ConsistencyReport.NodeConsistencyReport report2=check(ConsistencyReport.NodeConsistencyReport.class,nodeChecker,node2,records);
    verifyZeroInteractions(report1);
    verifyZeroInteractions(report2);
  }
  @Test void shouldNotReportAnythingForNodesNotInUse(){
    OwnerCheck decorator=new OwnerCheck(true);
    RecordCheck<NodeRecord,ConsistencyReport.NodeConsistencyReport> nodeChecker=decorator.decorateNodeChecker(dummyNodeCheck());
    RecordAccessStub records=new RecordAccessStub();
    NodeRecord node1=records.add(notInUse(new NodeRecord(1,false,NONE,6)));
    NodeRecord node2=records.add(notInUse(new NodeRecord(2,false,NONE,6)));
    ConsistencyReport.NodeConsistencyReport report1=check(ConsistencyReport.NodeConsistencyReport.class,nodeChecker,node1,records);
    ConsistencyReport.NodeConsistencyReport report2=check(ConsistencyReport.NodeConsistencyReport.class,nodeChecker,node2,records);
    verifyZeroInteractions(report1);
    verifyZeroInteractions(report2);
  }
  @Test void shouldNotReportAnythingForRelationshipsWithDifferentPropertyChains(){
    OwnerCheck decorator=new OwnerCheck(true);
    RecordCheck<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> relationshipChecker=decorator.decorateRelationshipChecker(dummyRelationshipChecker());
    RecordAccessStub records=new RecordAccessStub();
    RelationshipRecord relationship1=records.add(inUse(new RelationshipRecord(1,0,1,0)));
    relationship1.setNextProp(7);
    RelationshipRecord relationship2=records.add(inUse(new RelationshipRecord(2,0,1,0)));
    relationship2.setNextProp(8);
    ConsistencyReport.RelationshipConsistencyReport report1=check(ConsistencyReport.RelationshipConsistencyReport.class,relationshipChecker,relationship1,records);
    ConsistencyReport.RelationshipConsistencyReport report2=check(ConsistencyReport.RelationshipConsistencyReport.class,relationshipChecker,relationship2,records);
    verifyZeroInteractions(report1);
    verifyZeroInteractions(report2);
  }
  @Test void shouldReportTwoNodesWithSamePropertyChain(){
    OwnerCheck decorator=new OwnerCheck(true);
    RecordCheck<NodeRecord,ConsistencyReport.NodeConsistencyReport> nodeChecker=decorator.decorateNodeChecker(dummyNodeCheck());
    RecordAccessStub records=new RecordAccessStub();
    NodeRecord node1=records.add(inUse(new NodeRecord(1,false,NONE,7)));
    NodeRecord node2=records.add(inUse(new NodeRecord(2,false,NONE,7)));
    ConsistencyReport.NodeConsistencyReport report1=check(ConsistencyReport.NodeConsistencyReport.class,nodeChecker,node1,records);
    ConsistencyReport.NodeConsistencyReport report2=check(ConsistencyReport.NodeConsistencyReport.class,nodeChecker,node2,records);
    verifyZeroInteractions(report1);
    verify(report2).multipleOwners(node1);
  }
  @Test void shouldReportTwoRelationshipsWithSamePropertyChain(){
    OwnerCheck decorator=new OwnerCheck(true);
    RecordCheck<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> relationshipChecker=decorator.decorateRelationshipChecker(dummyRelationshipChecker());
    RecordAccessStub records=new RecordAccessStub();
    RelationshipRecord relationship1=records.add(inUse(new RelationshipRecord(1,0,1,0)));
    relationship1.setNextProp(7);
    RelationshipRecord relationship2=records.add(inUse(new RelationshipRecord(2,0,1,0)));
    relationship2.setNextProp(relationship1.getNextProp());
    ConsistencyReport.RelationshipConsistencyReport report1=check(ConsistencyReport.RelationshipConsistencyReport.class,relationshipChecker,relationship1,records);
    ConsistencyReport.RelationshipConsistencyReport report2=check(ConsistencyReport.RelationshipConsistencyReport.class,relationshipChecker,relationship2,records);
    verifyZeroInteractions(report1);
    verify(report2).multipleOwners(relationship1);
  }
  @Test void shouldReportRelationshipWithSamePropertyChainAsNode(){
    OwnerCheck decorator=new OwnerCheck(true);
    RecordCheck<NodeRecord,ConsistencyReport.NodeConsistencyReport> nodeChecker=decorator.decorateNodeChecker(dummyNodeCheck());
    RecordCheck<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> relationshipChecker=decorator.decorateRelationshipChecker(dummyRelationshipChecker());
    RecordAccessStub records=new RecordAccessStub();
    NodeRecord node=records.add(inUse(new NodeRecord(1,false,NONE,7)));
    RelationshipRecord relationship=records.add(inUse(new RelationshipRecord(1,0,1,0)));
    relationship.setNextProp(node.getNextProp());
    ConsistencyReport.NodeConsistencyReport nodeReport=check(ConsistencyReport.NodeConsistencyReport.class,nodeChecker,node,records);
    ConsistencyReport.RelationshipConsistencyReport relationshipReport=check(ConsistencyReport.RelationshipConsistencyReport.class,relationshipChecker,relationship,records);
    verifyZeroInteractions(nodeReport);
    verify(relationshipReport).multipleOwners(node);
  }
  @Test void shouldReportRelationshipWithReferenceToTheGraphGlobalChain(){
    OwnerCheck decorator=new OwnerCheck(true);
    RecordCheck<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> relationshipChecker=decorator.decorateRelationshipChecker(dummyRelationshipChecker());
    RecordCheck<NeoStoreRecord,ConsistencyReport.NeoStoreConsistencyReport> neoStoreCheck=decorator.decorateNeoStoreChecker(dummyNeoStoreCheck());
    RecordAccessStub records=new RecordAccessStub();
    NeoStoreRecord master=records.add(new NeoStoreRecord());
    master.setNextProp(7);
    RelationshipRecord relationship=records.add(inUse(new RelationshipRecord(1,0,1,0)));
    relationship.setNextProp(7);
    ConsistencyReport.NeoStoreConsistencyReport masterReport=check(ConsistencyReport.NeoStoreConsistencyReport.class,neoStoreCheck,master,records);
    ConsistencyReport.RelationshipConsistencyReport relationshipReport=check(ConsistencyReport.RelationshipConsistencyReport.class,relationshipChecker,relationship,records);
    verifyZeroInteractions(masterReport);
    verify(relationshipReport).multipleOwners(master);
  }
  @Test void shouldReportNodeWithSamePropertyChainAsRelationship(){
    OwnerCheck decorator=new OwnerCheck(true);
    RecordCheck<NodeRecord,ConsistencyReport.NodeConsistencyReport> nodeChecker=decorator.decorateNodeChecker(dummyNodeCheck());
    RecordCheck<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> relationshipChecker=decorator.decorateRelationshipChecker(dummyRelationshipChecker());
    RecordAccessStub records=new RecordAccessStub();
    NodeRecord node=records.add(inUse(new NodeRecord(1,false,NONE,7)));
    RelationshipRecord relationship=records.add(inUse(new RelationshipRecord(1,0,1,0)));
    relationship.setNextProp(node.getNextProp());
    ConsistencyReport.RelationshipConsistencyReport relationshipReport=check(ConsistencyReport.RelationshipConsistencyReport.class,relationshipChecker,relationship,records);
    ConsistencyReport.NodeConsistencyReport nodeReport=check(ConsistencyReport.NodeConsistencyReport.class,nodeChecker,node,records);
    verifyZeroInteractions(relationshipReport);
    verify(nodeReport).multipleOwners(relationship);
  }
  @Test void shouldReportNodeWithReferenceToTheGraphGlobalChain(){
    OwnerCheck decorator=new OwnerCheck(true);
    RecordCheck<NodeRecord,ConsistencyReport.NodeConsistencyReport> nodeChecker=decorator.decorateNodeChecker(dummyNodeCheck());
    RecordCheck<NeoStoreRecord,ConsistencyReport.NeoStoreConsistencyReport> neoStoreCheck=decorator.decorateNeoStoreChecker(dummyNeoStoreCheck());
    RecordAccessStub records=new RecordAccessStub();
    NodeRecord node=records.add(inUse(new NodeRecord(1,false,NONE,7)));
    NeoStoreRecord master=records.add(new NeoStoreRecord());
    master.setNextProp(node.getNextProp());
    ConsistencyReport.NeoStoreConsistencyReport masterReport=check(ConsistencyReport.NeoStoreConsistencyReport.class,neoStoreCheck,master,records);
    ConsistencyReport.NodeConsistencyReport nodeReport=check(ConsistencyReport.NodeConsistencyReport.class,nodeChecker,node,records);
    verifyZeroInteractions(masterReport);
    verify(nodeReport).multipleOwners(master);
  }
  @Test void shouldReportNodeStoreReferencingSameChainAsNode(){
    OwnerCheck decorator=new OwnerCheck(true);
    RecordCheck<NodeRecord,ConsistencyReport.NodeConsistencyReport> nodeChecker=decorator.decorateNodeChecker(dummyNodeCheck());
    RecordCheck<NeoStoreRecord,ConsistencyReport.NeoStoreConsistencyReport> neoStoreCheck=decorator.decorateNeoStoreChecker(dummyNeoStoreCheck());
    RecordAccessStub records=new RecordAccessStub();
    NodeRecord node=records.add(inUse(new NodeRecord(1,false,NONE,7)));
    NeoStoreRecord master=records.add(new NeoStoreRecord());
    master.setNextProp(node.getNextProp());
    ConsistencyReport.NodeConsistencyReport nodeReport=check(ConsistencyReport.NodeConsistencyReport.class,nodeChecker,node,records);
    ConsistencyReport.NeoStoreConsistencyReport masterReport=check(ConsistencyReport.NeoStoreConsistencyReport.class,neoStoreCheck,master,records);
    verifyZeroInteractions(nodeReport);
    verify(masterReport).multipleOwners(node);
  }
  @Test void shouldReportNodeStoreReferencingSameChainAsRelationship(){
    OwnerCheck decorator=new OwnerCheck(true);
    RecordCheck<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> relationshipChecker=decorator.decorateRelationshipChecker(dummyRelationshipChecker());
    RecordCheck<NeoStoreRecord,ConsistencyReport.NeoStoreConsistencyReport> neoStoreCheck=decorator.decorateNeoStoreChecker(dummyNeoStoreCheck());
    RecordAccessStub records=new RecordAccessStub();
    NeoStoreRecord master=records.add(new NeoStoreRecord());
    master.setNextProp(7);
    RelationshipRecord relationship=records.add(inUse(new RelationshipRecord(1,0,1,0)));
    relationship.setNextProp(7);
    ConsistencyReport.RelationshipConsistencyReport relationshipReport=check(ConsistencyReport.RelationshipConsistencyReport.class,relationshipChecker,relationship,records);
    ConsistencyReport.NeoStoreConsistencyReport masterReport=check(ConsistencyReport.NeoStoreConsistencyReport.class,neoStoreCheck,master,records);
    verifyZeroInteractions(relationshipReport);
    verify(masterReport).multipleOwners(relationship);
  }
  @Test void shouldReportOrphanPropertyChain(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true);
    RecordCheck<PropertyRecord,ConsistencyReport.PropertyConsistencyReport> checker=decorator.decoratePropertyChecker(dummyPropertyChecker());
    PropertyRecord record=inUse(new PropertyRecord(42));
    ConsistencyReport.PropertyConsistencyReport report=check(ConsistencyReport.PropertyConsistencyReport.class,checker,record,records);
    decorator.scanForOrphanChains(ProgressMonitorFactory.NONE);
    records.checkDeferred();
    verify(report).orphanPropertyChain();
  }
  @Test void shouldNotReportOrphanIfOwnedByNode(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true);
    PropertyRecord record=inUse(new PropertyRecord(42));
    ConsistencyReport.PropertyConsistencyReport report=check(ConsistencyReport.PropertyConsistencyReport.class,decorator.decoratePropertyChecker(dummyPropertyChecker()),record,records);
    ConsistencyReport.NodeConsistencyReport nodeReport=check(ConsistencyReport.NodeConsistencyReport.class,decorator.decorateNodeChecker(dummyNodeCheck()),inUse(new NodeRecord(10,false,NONE,42)),records);
    decorator.scanForOrphanChains(ProgressMonitorFactory.NONE);
    records.checkDeferred();
    verifyNoMoreInteractions(report);
    verifyNoMoreInteractions(nodeReport);
  }
  @Test void shouldNotReportOrphanIfOwnedByRelationship(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true);
    PropertyRecord record=inUse(new PropertyRecord(42));
    ConsistencyReport.PropertyConsistencyReport report=check(ConsistencyReport.PropertyConsistencyReport.class,decorator.decoratePropertyChecker(dummyPropertyChecker()),record,records);
    RelationshipRecord relationship=inUse(new RelationshipRecord(10,1,1,0));
    relationship.setNextProp(42);
    ConsistencyReport.RelationshipConsistencyReport relationshipReport=check(ConsistencyReport.RelationshipConsistencyReport.class,decorator.decorateRelationshipChecker(dummyRelationshipChecker()),relationship,records);
    decorator.scanForOrphanChains(ProgressMonitorFactory.NONE);
    records.checkDeferred();
    verifyNoMoreInteractions(report);
    verifyNoMoreInteractions(relationshipReport);
  }
  @Test void shouldNotReportOrphanIfOwnedByNeoStore(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true);
    PropertyRecord record=inUse(new PropertyRecord(42));
    ConsistencyReport.PropertyConsistencyReport report=check(ConsistencyReport.PropertyConsistencyReport.class,decorator.decoratePropertyChecker(dummyPropertyChecker()),record,records);
    NeoStoreRecord master=inUse(new NeoStoreRecord());
    master.setNextProp(42);
    ConsistencyReport.NeoStoreConsistencyReport masterReport=check(ConsistencyReport.NeoStoreConsistencyReport.class,decorator.decorateNeoStoreChecker(dummyNeoStoreCheck()),master,records);
    decorator.scanForOrphanChains(ProgressMonitorFactory.NONE);
    records.checkDeferred();
    verifyNoMoreInteractions(report);
    verifyNoMoreInteractions(masterReport);
  }
  @Test void shouldReportDynamicRecordOwnedByTwoOtherDynamicRecords(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true,DynamicStore.STRING);
    RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> checker=decorator.decorateDynamicChecker(RecordType.STRING_PROPERTY,dummyDynamicCheck(configureDynamicStore(50),DynamicStore.STRING));
    DynamicRecord record1=records.add(inUse(string(new DynamicRecord(1))));
    DynamicRecord record2=records.add(inUse(string(new DynamicRecord(2))));
    DynamicRecord record3=records.add(inUse(string(new DynamicRecord(3))));
    record1.setNextBlock(record3.getId());
    record2.setNextBlock(record3.getId());
    ConsistencyReport.DynamicConsistencyReport report1=check(ConsistencyReport.DynamicConsistencyReport.class,checker,record1,records);
    ConsistencyReport.DynamicConsistencyReport report2=check(ConsistencyReport.DynamicConsistencyReport.class,checker,record2,records);
    verifyNoMoreInteractions(report1);
    verify(report2).nextMultipleOwners(record1);
    verifyNoMoreInteractions(report2);
  }
  @Test void shouldReportDynamicStringRecordOwnedByTwoPropertyRecords(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true,DynamicStore.STRING);
    RecordCheck<PropertyRecord,ConsistencyReport.PropertyConsistencyReport> propChecker=decorator.decoratePropertyChecker(dummyPropertyChecker());
    DynamicRecord dynamic=records.add(inUse(string(new DynamicRecord(42))));
    PropertyRecord property1=records.add(inUse(new PropertyRecord(1)));
    PropertyRecord property2=records.add(inUse(new PropertyRecord(2)));
    PropertyKeyTokenRecord key=records.add(inUse(new PropertyKeyTokenRecord(10)));
    property1.addPropertyBlock(propertyBlock(key,PropertyType.STRING,dynamic.getId()));
    property2.addPropertyBlock(propertyBlock(key,PropertyType.STRING,dynamic.getId()));
    ConsistencyReport.PropertyConsistencyReport report1=check(ConsistencyReport.PropertyConsistencyReport.class,propChecker,property1,records);
    ConsistencyReport.PropertyConsistencyReport report2=check(ConsistencyReport.PropertyConsistencyReport.class,propChecker,property2,records);
    verifyNoMoreInteractions(report1);
    verify(report2).stringMultipleOwners(property1);
    verifyNoMoreInteractions(report2);
  }
  @Test void shouldReportDynamicArrayRecordOwnedByTwoPropertyRecords(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true,DynamicStore.ARRAY);
    RecordCheck<PropertyRecord,ConsistencyReport.PropertyConsistencyReport> propChecker=decorator.decoratePropertyChecker(dummyPropertyChecker());
    DynamicRecord dynamic=records.add(inUse(array(new DynamicRecord(42))));
    PropertyRecord property1=records.add(inUse(new PropertyRecord(1)));
    PropertyRecord property2=records.add(inUse(new PropertyRecord(2)));
    PropertyKeyTokenRecord key=records.add(inUse(new PropertyKeyTokenRecord(10)));
    property1.addPropertyBlock(propertyBlock(key,PropertyType.ARRAY,dynamic.getId()));
    property2.addPropertyBlock(propertyBlock(key,PropertyType.ARRAY,dynamic.getId()));
    ConsistencyReport.PropertyConsistencyReport report1=check(ConsistencyReport.PropertyConsistencyReport.class,propChecker,property1,records);
    ConsistencyReport.PropertyConsistencyReport report2=check(ConsistencyReport.PropertyConsistencyReport.class,propChecker,property2,records);
    verifyNoMoreInteractions(report1);
    verify(report2).arrayMultipleOwners(property1);
    verifyNoMoreInteractions(report2);
  }
  @Test void shouldReportDynamicRecordOwnedByPropertyAndOtherDynamic(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true,DynamicStore.STRING);
    RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> dynChecker=decorator.decorateDynamicChecker(RecordType.STRING_PROPERTY,dummyDynamicCheck(configureDynamicStore(50),DynamicStore.STRING));
    RecordCheck<PropertyRecord,ConsistencyReport.PropertyConsistencyReport> propChecker=decorator.decoratePropertyChecker(dummyPropertyChecker());
    DynamicRecord owned=records.add(inUse(string(new DynamicRecord(42))));
    DynamicRecord dynamic=records.add(inUse(string(new DynamicRecord(100))));
    dynamic.setNextBlock(owned.getId());
    PropertyRecord property=records.add(inUse(new PropertyRecord(1)));
    PropertyKeyTokenRecord key=records.add(inUse(new PropertyKeyTokenRecord(10)));
    property.addPropertyBlock(propertyBlock(key,PropertyType.STRING,owned.getId()));
    ConsistencyReport.PropertyConsistencyReport propReport=check(ConsistencyReport.PropertyConsistencyReport.class,propChecker,property,records);
    ConsistencyReport.DynamicConsistencyReport dynReport=check(ConsistencyReport.DynamicConsistencyReport.class,dynChecker,dynamic,records);
    verifyNoMoreInteractions(propReport);
    verify(dynReport).nextMultipleOwners(property);
    verifyNoMoreInteractions(dynReport);
  }
  @Test void shouldReportDynamicStringRecordOwnedByOtherDynamicAndProperty(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true,DynamicStore.STRING);
    RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> dynChecker=decorator.decorateDynamicChecker(RecordType.STRING_PROPERTY,dummyDynamicCheck(configureDynamicStore(50),DynamicStore.STRING));
    RecordCheck<PropertyRecord,ConsistencyReport.PropertyConsistencyReport> propChecker=decorator.decoratePropertyChecker(dummyPropertyChecker());
    DynamicRecord owned=records.add(inUse(string(new DynamicRecord(42))));
    DynamicRecord dynamic=records.add(inUse(string(new DynamicRecord(100))));
    dynamic.setNextBlock(owned.getId());
    PropertyRecord property=records.add(inUse(new PropertyRecord(1)));
    PropertyKeyTokenRecord key=records.add(inUse(new PropertyKeyTokenRecord(10)));
    property.addPropertyBlock(propertyBlock(key,PropertyType.STRING,owned.getId()));
    ConsistencyReport.DynamicConsistencyReport dynReport=check(ConsistencyReport.DynamicConsistencyReport.class,dynChecker,dynamic,records);
    ConsistencyReport.PropertyConsistencyReport propReport=check(ConsistencyReport.PropertyConsistencyReport.class,propChecker,property,records);
    verifyNoMoreInteractions(dynReport);
    verify(propReport).stringMultipleOwners(dynamic);
    verifyNoMoreInteractions(dynReport);
  }
  @Test void shouldReportDynamicArrayRecordOwnedByOtherDynamicAndProperty(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true,DynamicStore.ARRAY);
    RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> dynChecker=decorator.decorateDynamicChecker(RecordType.ARRAY_PROPERTY,dummyDynamicCheck(configureDynamicStore(50),DynamicStore.ARRAY));
    RecordCheck<PropertyRecord,ConsistencyReport.PropertyConsistencyReport> propChecker=decorator.decoratePropertyChecker(dummyPropertyChecker());
    DynamicRecord owned=records.add(inUse(array(new DynamicRecord(42))));
    DynamicRecord dynamic=records.add(inUse(array(new DynamicRecord(100))));
    dynamic.setNextBlock(owned.getId());
    PropertyRecord property=records.add(inUse(new PropertyRecord(1)));
    PropertyKeyTokenRecord key=records.add(inUse(new PropertyKeyTokenRecord(10)));
    property.addPropertyBlock(propertyBlock(key,PropertyType.ARRAY,owned.getId()));
    ConsistencyReport.DynamicConsistencyReport dynReport=check(ConsistencyReport.DynamicConsistencyReport.class,dynChecker,dynamic,records);
    ConsistencyReport.PropertyConsistencyReport propReport=check(ConsistencyReport.PropertyConsistencyReport.class,propChecker,property,records);
    verifyNoMoreInteractions(dynReport);
    verify(propReport).arrayMultipleOwners(dynamic);
    verifyNoMoreInteractions(dynReport);
  }
  @Test void shouldReportDynamicRecordOwnedByTwoRelationshipLabels(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true,DynamicStore.RELATIONSHIP_TYPE);
    RecordCheck<RelationshipTypeTokenRecord,ConsistencyReport.RelationshipTypeConsistencyReport> checker=decorator.decorateRelationshipTypeTokenChecker(dummyRelationshipLabelCheck());
    DynamicRecord dynamic=records.addRelationshipTypeName(inUse(string(new DynamicRecord(42))));
    RelationshipTypeTokenRecord record1=records.add(inUse(new RelationshipTypeTokenRecord(1)));
    RelationshipTypeTokenRecord record2=records.add(inUse(new RelationshipTypeTokenRecord(2)));
    record1.setNameId((int)dynamic.getId());
    record2.setNameId((int)dynamic.getId());
    ConsistencyReport.RelationshipTypeConsistencyReport report1=check(ConsistencyReport.RelationshipTypeConsistencyReport.class,checker,record1,records);
    ConsistencyReport.RelationshipTypeConsistencyReport report2=check(ConsistencyReport.RelationshipTypeConsistencyReport.class,checker,record2,records);
    verifyNoMoreInteractions(report1);
    verify(report2).nameMultipleOwners(record1);
    verifyNoMoreInteractions(report2);
  }
  @Test void shouldReportDynamicRecordOwnedByRelationshipLabelAndOtherDynamicRecord(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true,DynamicStore.RELATIONSHIP_TYPE);
    RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> dynChecker=decorator.decorateDynamicChecker(RecordType.RELATIONSHIP_TYPE_NAME,dummyDynamicCheck(configureDynamicStore(50),DynamicStore.RELATIONSHIP_TYPE));
    RecordCheck<RelationshipTypeTokenRecord,ConsistencyReport.RelationshipTypeConsistencyReport> labelCheck=decorator.decorateRelationshipTypeTokenChecker(dummyRelationshipLabelCheck());
    DynamicRecord owned=records.addRelationshipTypeName(inUse(string(new DynamicRecord(42))));
    DynamicRecord dynamic=records.addRelationshipTypeName(inUse(string(new DynamicRecord(1))));
    RelationshipTypeTokenRecord label=records.add(inUse(new RelationshipTypeTokenRecord(1)));
    dynamic.setNextBlock(owned.getId());
    label.setNameId((int)owned.getId());
    ConsistencyReport.RelationshipTypeConsistencyReport labelReport=check(ConsistencyReport.RelationshipTypeConsistencyReport.class,labelCheck,label,records);
    ConsistencyReport.DynamicConsistencyReport dynReport=check(ConsistencyReport.DynamicConsistencyReport.class,dynChecker,dynamic,records);
    verifyNoMoreInteractions(labelReport);
    verify(dynReport).nextMultipleOwners(label);
    verifyNoMoreInteractions(dynReport);
  }
  @Test void shouldReportDynamicRecordOwnedByOtherDynamicRecordAndRelationshipLabel(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true,DynamicStore.RELATIONSHIP_TYPE);
    RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> dynChecker=decorator.decorateDynamicChecker(RecordType.RELATIONSHIP_TYPE_NAME,dummyDynamicCheck(configureDynamicStore(50),DynamicStore.RELATIONSHIP_TYPE));
    RecordCheck<RelationshipTypeTokenRecord,ConsistencyReport.RelationshipTypeConsistencyReport> labelCheck=decorator.decorateRelationshipTypeTokenChecker(dummyRelationshipLabelCheck());
    DynamicRecord owned=records.addRelationshipTypeName(inUse(string(new DynamicRecord(42))));
    DynamicRecord dynamic=records.addRelationshipTypeName(inUse(string(new DynamicRecord(1))));
    RelationshipTypeTokenRecord label=records.add(inUse(new RelationshipTypeTokenRecord(1)));
    dynamic.setNextBlock(owned.getId());
    label.setNameId((int)owned.getId());
    ConsistencyReport.DynamicConsistencyReport dynReport=check(ConsistencyReport.DynamicConsistencyReport.class,dynChecker,dynamic,records);
    ConsistencyReport.RelationshipTypeConsistencyReport labelReport=check(ConsistencyReport.RelationshipTypeConsistencyReport.class,labelCheck,label,records);
    verifyNoMoreInteractions(dynReport);
    verify(labelReport).nameMultipleOwners(dynamic);
    verifyNoMoreInteractions(labelReport);
  }
  @Test void shouldReportDynamicRecordOwnedByTwoPropertyKeys(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true,DynamicStore.PROPERTY_KEY);
    RecordCheck<PropertyKeyTokenRecord,ConsistencyReport.PropertyKeyTokenConsistencyReport> checker=decorator.decoratePropertyKeyTokenChecker(dummyPropertyKeyCheck());
    DynamicRecord dynamic=records.addPropertyKeyName(inUse(string(new DynamicRecord(42))));
    PropertyKeyTokenRecord record1=records.add(inUse(new PropertyKeyTokenRecord(1)));
    PropertyKeyTokenRecord record2=records.add(inUse(new PropertyKeyTokenRecord(2)));
    record1.setNameId((int)dynamic.getId());
    record2.setNameId((int)dynamic.getId());
    ConsistencyReport.PropertyKeyTokenConsistencyReport report1=check(ConsistencyReport.PropertyKeyTokenConsistencyReport.class,checker,record1,records);
    ConsistencyReport.PropertyKeyTokenConsistencyReport report2=check(ConsistencyReport.PropertyKeyTokenConsistencyReport.class,checker,record2,records);
    verifyNoMoreInteractions(report1);
    verify(report2).nameMultipleOwners(record1);
    verifyNoMoreInteractions(report2);
  }
  @Test void shouldReportDynamicRecordOwnedByPropertyKeyAndOtherDynamicRecord(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true,DynamicStore.PROPERTY_KEY);
    RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> dynChecker=decorator.decorateDynamicChecker(RecordType.PROPERTY_KEY_NAME,dummyDynamicCheck(configureDynamicStore(50),DynamicStore.PROPERTY_KEY));
    RecordCheck<PropertyKeyTokenRecord,ConsistencyReport.PropertyKeyTokenConsistencyReport> keyCheck=decorator.decoratePropertyKeyTokenChecker(dummyPropertyKeyCheck());
    DynamicRecord owned=records.addPropertyKeyName(inUse(string(new DynamicRecord(42))));
    DynamicRecord dynamic=records.addPropertyKeyName(inUse(string(new DynamicRecord(1))));
    PropertyKeyTokenRecord key=records.add(inUse(new PropertyKeyTokenRecord(1)));
    dynamic.setNextBlock(owned.getId());
    key.setNameId((int)owned.getId());
    ConsistencyReport.PropertyKeyTokenConsistencyReport keyReport=check(ConsistencyReport.PropertyKeyTokenConsistencyReport.class,keyCheck,key,records);
    ConsistencyReport.DynamicConsistencyReport dynReport=check(ConsistencyReport.DynamicConsistencyReport.class,dynChecker,dynamic,records);
    verifyNoMoreInteractions(keyReport);
    verify(dynReport).nextMultipleOwners(key);
    verifyNoMoreInteractions(dynReport);
  }
  @Test void shouldReportDynamicRecordOwnedByOtherDynamicRecordAndPropertyKey(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck decorator=new OwnerCheck(true,DynamicStore.PROPERTY_KEY);
    RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> dynChecker=decorator.decorateDynamicChecker(RecordType.PROPERTY_KEY_NAME,dummyDynamicCheck(configureDynamicStore(50),DynamicStore.PROPERTY_KEY));
    RecordCheck<PropertyKeyTokenRecord,ConsistencyReport.PropertyKeyTokenConsistencyReport> keyCheck=decorator.decoratePropertyKeyTokenChecker(dummyPropertyKeyCheck());
    DynamicRecord owned=records.addPropertyKeyName(inUse(string(new DynamicRecord(42))));
    DynamicRecord dynamic=records.addPropertyKeyName(inUse(string(new DynamicRecord(1))));
    PropertyKeyTokenRecord key=records.add(inUse(new PropertyKeyTokenRecord(1)));
    dynamic.setNextBlock(owned.getId());
    key.setNameId((int)owned.getId());
    ConsistencyReport.DynamicConsistencyReport dynReport=check(ConsistencyReport.DynamicConsistencyReport.class,dynChecker,dynamic,records);
    ConsistencyReport.PropertyKeyTokenConsistencyReport keyReport=check(ConsistencyReport.PropertyKeyTokenConsistencyReport.class,keyCheck,key,records);
    verifyNoMoreInteractions(dynReport);
    verify(keyReport).nameMultipleOwners(dynamic);
    verifyNoMoreInteractions(keyReport);
  }
  @Test void shouldReportOrphanedDynamicStringRecord(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck owners=new OwnerCheck(true,DynamicStore.STRING);
    RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> stringCheck=owners.decorateDynamicChecker(RecordType.STRING_PROPERTY,dummyDynamicCheck(configureDynamicStore(60),DynamicStore.STRING));
    DynamicRecord record=string(inUse(new DynamicRecord(42)));
    ConsistencyReport.DynamicConsistencyReport report=check(ConsistencyReport.DynamicConsistencyReport.class,stringCheck,record,records);
    owners.scanForOrphanChains(ProgressMonitorFactory.NONE);
    records.checkDeferred();
    verify(report).orphanDynamicRecord();
  }
  @Test void shouldReportOrphanedDynamicArrayRecord(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck owners=new OwnerCheck(true,DynamicStore.ARRAY);
    RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> stringCheck=owners.decorateDynamicChecker(RecordType.ARRAY_PROPERTY,dummyDynamicCheck(configureDynamicStore(60),DynamicStore.ARRAY));
    DynamicRecord record=string(inUse(new DynamicRecord(42)));
    ConsistencyReport.DynamicConsistencyReport report=check(ConsistencyReport.DynamicConsistencyReport.class,stringCheck,record,records);
    owners.scanForOrphanChains(ProgressMonitorFactory.NONE);
    records.checkDeferred();
    verify(report).orphanDynamicRecord();
  }
  @Test void shouldReportOrphanedDynamicRelationshipLabelRecord(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck owners=new OwnerCheck(true,DynamicStore.RELATIONSHIP_TYPE);
    RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> stringCheck=owners.decorateDynamicChecker(RecordType.RELATIONSHIP_TYPE_NAME,dummyDynamicCheck(configureDynamicStore(60),DynamicStore.RELATIONSHIP_TYPE));
    DynamicRecord record=string(inUse(new DynamicRecord(42)));
    ConsistencyReport.DynamicConsistencyReport report=check(ConsistencyReport.DynamicConsistencyReport.class,stringCheck,record,records);
    owners.scanForOrphanChains(ProgressMonitorFactory.NONE);
    records.checkDeferred();
    verify(report).orphanDynamicRecord();
  }
  @Test void shouldReportOrphanedDynamicPropertyKeyRecord(){
    RecordAccessStub records=new RecordAccessStub();
    OwnerCheck owners=new OwnerCheck(true,DynamicStore.PROPERTY_KEY);
    RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> stringCheck=owners.decorateDynamicChecker(RecordType.PROPERTY_KEY_NAME,dummyDynamicCheck(configureDynamicStore(60),DynamicStore.PROPERTY_KEY));
    DynamicRecord record=string(inUse(new DynamicRecord(42)));
    ConsistencyReport.DynamicConsistencyReport report=check(ConsistencyReport.DynamicConsistencyReport.class,stringCheck,record,records);
    owners.scanForOrphanChains(ProgressMonitorFactory.NONE);
    records.checkDeferred();
    verify(report).orphanDynamicRecord();
  }
}
