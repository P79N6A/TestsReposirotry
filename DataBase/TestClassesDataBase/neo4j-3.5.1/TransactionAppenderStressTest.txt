public class TransactionAppenderStressTest {
  @Rule public final TestDirectory directory=TestDirectory.testDirectory();
  @Test public void concurrentTransactionAppendingTest() throws Exception {
    int threads=10;
    Callable<Long> runner=new Builder().with(untilTimeExpired(10,SECONDS)).withWorkingDirectory(directory.databaseLayout()).withNumThreads(threads).build();
    long appendedTxs=runner.call();
    assertEquals(new TransactionIdChecker(directory.databaseLayout().databaseDirectory()).parseAllTxLogs(),appendedTxs);
  }
public static class Builder {
    private BooleanSupplier condition;
    private DatabaseLayout databaseLayout;
    private int threads;
    public Builder with(    BooleanSupplier condition){
      this.condition=condition;
      return this;
    }
    public Builder withWorkingDirectory(    DatabaseLayout databaseLayout){
      this.databaseLayout=databaseLayout;
      return this;
    }
    public Builder withNumThreads(    int threads){
      this.threads=threads;
      return this;
    }
    public Callable<Long> build(){
      return new Runner(databaseLayout,condition,threads);
    }
  }
public static class TransactionIdChecker {
    private final File workingDirectory;
    public TransactionIdChecker(    File workingDirectory){
      this.workingDirectory=workingDirectory;
    }
    public long parseAllTxLogs() throws IOException {
      long txId=TransactionIdStore.BASE_TX_ID;
      try (FileSystemAbstraction fs=new DefaultFileSystemAbstraction();ReadableLogChannel channel=openLogFile(fs,0)){
        LogEntryReader<ReadableLogChannel> reader=new VersionAwareLogEntryReader<>();
        LogEntry logEntry=reader.readLogEntry(channel);
        for (; logEntry != null; logEntry=reader.readLogEntry(channel)) {
          if (logEntry.getType() == LogEntryByteCodes.TX_COMMIT) {
            txId=logEntry.<LogEntryCommit>as().getTxId();
          }
        }
      }
       return txId;
    }
    private ReadableLogChannel openLogFile(    FileSystemAbstraction fs,    int version) throws IOException {
      LogFiles logFiles=LogFilesBuilder.logFilesBasedOnlyBuilder(workingDirectory,fs).build();
      PhysicalLogVersionedStoreChannel channel=logFiles.openForVersion(version);
      return new ReadAheadLogChannel(channel,new ReaderLogVersionBridge(logFiles));
    }
  }
}
