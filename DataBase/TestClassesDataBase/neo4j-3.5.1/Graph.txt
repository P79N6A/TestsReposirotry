private static class Graph {
  private static final String[] TOKENS={"A","B","C","D","E"};
  private final GraphDatabaseService db;
  private final RandomRule random;
  private final List<Node> nodes=new ArrayList<>();
  private final List<Relationship> relationships=new ArrayList<>();
  Graph(  GraphDatabaseService db,  RandomRule random){
    this.db=db;
    this.random=random;
  }
  private <E extends PropertyContainer>E random(  List<E> entities){
    return entities.isEmpty() ? null : entities.get(random.nextInt(entities.size()));
  }
  Node randomNode(){
    return random(nodes);
  }
  Relationship randomRelationship(){
    return random(relationships);
  }
  Node createNode(){
    Node node=db.createNode();
    nodes.add(node);
    return node;
  }
  void deleteRelationship(  Relationship relationship){
    relationship.delete();
    relationships.remove(relationship);
  }
  void deleteNode(  Node node){
    node.delete();
    nodes.remove(node);
  }
  private String randomToken(){
    return random.among(TOKENS);
  }
  Label randomLabel(){
    return Label.label(randomToken());
  }
  RelationshipType randomRelationshipType(){
    return RelationshipType.withName(randomToken());
  }
  String randomPropertyKey(){
    return randomToken();
  }
  Object randomPropertyValue(){
    return random.nextValueAsObject();
  }
  int nodeCount(){
    return nodes.size();
  }
  Relationship createRelationship(  Node node1,  Node node2,  RelationshipType type){
    Relationship relationship=node1.createRelationshipTo(node2,type);
    relationships.add(relationship);
    return relationship;
  }
}
