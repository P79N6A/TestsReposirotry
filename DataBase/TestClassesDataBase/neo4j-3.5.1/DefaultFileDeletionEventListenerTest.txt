public class DefaultFileDeletionEventListenerTest {
  @Test public void notificationInLogAboutFileDeletion(){
    AssertableLogProvider internalLogProvider=new AssertableLogProvider(false);
    DefaultFileDeletionEventListener listener=buildListener(internalLogProvider);
    listener.fileDeleted("testFile.db");
    listener.fileDeleted("anotherDirectory");
    internalLogProvider.assertContainsMessageContaining("'testFile.db' which belongs to the store was deleted while database was running.");
    internalLogProvider.assertContainsMessageContaining("'anotherDirectory' which belongs to the store was deleted while database was running.");
  }
  @Test public void noNotificationForTransactionLogs(){
    AssertableLogProvider internalLogProvider=new AssertableLogProvider(false);
    DefaultFileDeletionEventListener listener=buildListener(internalLogProvider);
    listener.fileDeleted(TransactionLogFiles.DEFAULT_NAME + ".0");
    listener.fileDeleted(TransactionLogFiles.DEFAULT_NAME + ".1");
    internalLogProvider.assertNoLoggingOccurred();
  }
  private DefaultFileDeletionEventListener buildListener(  AssertableLogProvider internalLogProvider){
    SimpleLogService logService=new SimpleLogService(NullLogProvider.getInstance(),internalLogProvider);
    return new DefaultFileDeletionEventListener(logService,filename -> filename.startsWith(TransactionLogFiles.DEFAULT_NAME));
  }
}
