@SuppressWarnings("unchecked") class ExceptionHandlingIterableTest {
  @Test void testHandleExceptionOnIteratorCreation(){
    assertThrows(IllegalStateException.class,() -> Iterables.count(new ExceptionHandlingIterable(() -> {
      throw new RuntimeException("exception on iterator");
    }
){
      @Override protected Iterator exceptionOnIterator(      Throwable t){
        rethrow(new IllegalStateException());
        return super.exceptionOnIterator(t);
      }
    }
));
  }
  @Test void testHandleExceptionOnNext(){
    assertThrows(IllegalStateException.class,() -> Iterables.count(new ExceptionHandlingIterable(() -> new Iterator(){
      @Override public boolean hasNext(){
        return true;
      }
      @Override public Object next(){
        throw new RuntimeException("exception on next");
      }
      @Override public void remove(){
      }
    }
){
      @Override protected Object exceptionOnNext(      Throwable t){
        rethrow(new IllegalStateException());
        return super.exceptionOnNext(t);
      }
    }
));
  }
  @Test void testHandleExceptionOnHasNext(){
    assertThrows(IllegalStateException.class,() -> Iterables.count(new ExceptionHandlingIterable(() -> new Iterator(){
      @Override public boolean hasNext(){
        throw new RuntimeException("exception on next");
      }
      @Override public Object next(){
        return null;
      }
      @Override public void remove(){
      }
    }
){
      @Override protected boolean exceptionOnHasNext(      Throwable t){
        rethrow(new IllegalStateException());
        return super.exceptionOnHasNext(t);
      }
    }
));
  }
}
