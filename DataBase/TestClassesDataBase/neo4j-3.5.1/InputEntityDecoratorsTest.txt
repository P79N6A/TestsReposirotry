public class InputEntityDecoratorsTest {
  private final InputEntity entity=new InputEntity();
  @Test public void shouldProvideDefaultRelationshipType() throws Exception {
    String defaultType="TYPE";
    InputEntityVisitor relationship=defaultRelationshipType(defaultType).apply(entity);
    relationship(relationship,"source",1,0,NO_PROPERTIES,null,"start","end",null,null);
    assertEquals(defaultType,entity.stringType);
  }
  @Test public void shouldNotOverrideAlreadySetRelationshipType() throws Exception {
    String defaultType="TYPE";
    InputEntityVisitor relationship=defaultRelationshipType(defaultType).apply(entity);
    String customType="CUSTOM_TYPE";
    relationship(relationship,"source",1,0,NO_PROPERTIES,null,"start","end",customType,null);
    assertEquals(customType,entity.stringType);
  }
  @Test public void shouldNotOverrideAlreadySetRelationshipTypeId() throws Exception {
    String defaultType="TYPE";
    Decorator decorator=defaultRelationshipType(defaultType);
    InputEntityVisitor relationship=decorator.apply(entity);
    int typeId=5;
    relationship(relationship,"source",1,0,NO_PROPERTIES,null,"start","end",null,typeId);
    assertTrue(entity.hasIntType);
    assertEquals(typeId,entity.intType);
  }
  @Test public void shouldAddLabelsToNodeWithoutLabels() throws Exception {
    String[] toAdd=new String[]{"Add1","Add2"};
    InputEntityVisitor node=additiveLabels(toAdd).apply(entity);
    node(node,"source",1,0,"id",NO_PROPERTIES,null,NO_LABELS,null);
    assertArrayEquals(toAdd,entity.labels());
  }
  @Test public void shouldAddMissingLabels() throws Exception {
    String[] toAdd=new String[]{"Add1","Add2"};
    InputEntityVisitor node=additiveLabels(toAdd).apply(entity);
    String[] nodeLabels=new String[]{"SomeOther"};
    node(node,"source",1,0,"id",NO_PROPERTIES,null,nodeLabels,null);
    assertEquals(asSet(ArrayUtil.union(toAdd,nodeLabels)),asSet(entity.labels()));
  }
  @Test public void shouldNotTouchLabelsIfNodeHasLabelFieldSet() throws Exception {
    String[] toAdd=new String[]{"Add1","Add2"};
    InputEntityVisitor node=additiveLabels(toAdd).apply(entity);
    long labelField=123L;
    node(node,"source",1,0,"id",NO_PROPERTIES,null,null,labelField);
    assertEquals(0,entity.labels().length);
    assertEquals(labelField,entity.labelField);
  }
  @Test public void shouldCramMultipleDecoratorsIntoOne(){
    Decorator decorator1=spy(new IdentityDecorator());
    Decorator decorator2=spy(new IdentityDecorator());
    Decorator multi=decorators(decorator1,decorator2);
    InputEntityVisitor node=mock(InputEntityVisitor.class);
    multi.apply(node);
    InOrder order=inOrder(decorator1,decorator2);
    order.verify(decorator1,times(1)).apply(node);
    order.verify(decorator2,times(1)).apply(node);
    order.verifyNoMoreInteractions();
  }
  private static void node(  InputEntityVisitor entity,  String sourceDescription,  long lineNumber,  long position,  Object id,  Object[] properties,  Long propertyId,  String[] labels,  Long labelField) throws IOException {
    applyProperties(entity,properties,propertyId);
    entity.id(id,Group.GLOBAL);
    if (labelField != null) {
      entity.labelField(labelField);
    }
 else {
      entity.labels(labels);
    }
    entity.endOfEntity();
  }
  private static void relationship(  InputEntityVisitor entity,  String sourceDescription,  long lineNumber,  long position,  Object[] properties,  Long propertyId,  Object startNode,  Object endNode,  String type,  Integer typeId) throws IOException {
    applyProperties(entity,properties,propertyId);
    entity.startId(startNode,Group.GLOBAL);
    entity.endId(endNode,Group.GLOBAL);
    if (typeId != null) {
      entity.type(typeId);
    }
 else     if (type != null) {
      entity.type(type);
    }
    entity.endOfEntity();
  }
  private static void applyProperties(  InputEntityVisitor entity,  Object[] properties,  Long propertyId){
    if (propertyId != null) {
      entity.propertyId(propertyId);
    }
    for (int i=0; i < properties.length; i++) {
      entity.property((String)properties[i++],properties[i]);
    }
  }
private static class IdentityDecorator implements Decorator {
    @Override public InputEntityVisitor apply(    InputEntityVisitor entity){
      return entity;
    }
  }
}
