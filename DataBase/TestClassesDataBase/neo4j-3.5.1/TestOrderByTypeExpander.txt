public class TestOrderByTypeExpander extends TraversalTestBase {
  private final RelationshipType next=withName("NEXT");
  private final RelationshipType firstComment=withName("FIRST_COMMENT");
  private final RelationshipType comment=withName("COMMENT");
  @Before public void setup(){
    createGraph("A1 NEXT A2","A2 NEXT A3","A1 FIRST_COMMENT C1","C1 COMMENT C2","C2 COMMENT C3","A2 FIRST_COMMENT C4","C4 COMMENT C5","C5 COMMENT C6","A3 FIRST_COMMENT C7","C7 COMMENT C8","C8 COMMENT C9");
  }
  @Test public void makeSureNodesAreTraversedInCorrectOrder(){
    PathExpander expander=new OrderedByTypeExpander().add(firstComment).add(comment).add(next);
    Iterator<Node> itr=getGraphDb().traversalDescription().depthFirst().expand(expander).traverse(node("A1")).nodes().iterator();
    assertOrder(itr,"A1","C1","C2","C3","A2","C4","C5","C6","A3","C7","C8","C9");
    expander=new OrderedByTypeExpander().add(next).add(firstComment).add(comment);
    itr=getGraphDb().traversalDescription().depthFirst().expand(expander).traverse(node("A1")).nodes().iterator();
    assertOrder(itr,"A1","A2","A3","C7","C8","C9","C4","C5","C6","C1","C2","C3");
  }
  @Test public void evenDifferentDirectionsKeepsOrder(){
    PathExpander expander=new OrderedByTypeExpander().add(next,INCOMING).add(firstComment).add(comment).add(next,OUTGOING);
    Iterator<Node> itr=getGraphDb().traversalDescription().depthFirst().expand(expander).traverse(node("A2")).nodes().iterator();
    assertOrder(itr,"A2","A1","C1","C2","C3","C4","C5","C6","A3","C7","C8","C9");
  }
  private void assertOrder(  Iterator<Node> itr,  String... names){
    try (Transaction tx=beginTx()){
      for (      String name : names) {
        Node node=itr.next();
        assertEquals("expected " + name + ", was "+ node.getProperty("name"),getNodeWithName(name),node);
      }
      assertFalse(itr.hasNext());
      tx.success();
    }
   }
}
