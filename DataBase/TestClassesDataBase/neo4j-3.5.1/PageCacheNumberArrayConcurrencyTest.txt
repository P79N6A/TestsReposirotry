public abstract class PageCacheNumberArrayConcurrencyTest {
  protected static final int COUNT=100;
  protected static final int LAPS=2_000;
  protected static final int CONTESTANTS=10;
  private final DefaultFileSystemRule fs=new DefaultFileSystemRule();
  private final TestDirectory dir=TestDirectory.testDirectory();
  protected final RandomRule random=new RandomRule();
  private final PageCacheRule pageCacheRule=new PageCacheRule();
  @Rule public final RuleChain ruleChain=RuleChain.outerRule(fs).around(dir).around(random).around(pageCacheRule);
  @Test public void shouldHandleConcurrentAccessToSameData() throws Throwable {
    doRace(this::wholeFileRacer);
  }
  @Test public void shouldHandleConcurrentAccessToDifferentData() throws Throwable {
    doRace(this::fileRangeRacer);
  }
  private void doRace(  BiFunction<NumberArray,Integer,Runnable> contestantCreator) throws Throwable {
    PageCache pageCache=pageCacheRule.getPageCache(fs);
    PagedFile file=pageCache.map(dir.file("file"),pageCache.pageSize(),CREATE,DELETE_ON_CLOSE);
    Race race=new Race();
    try (NumberArray array=getNumberArray(file)){
      for (int i=0; i < CONTESTANTS; i++) {
        race.addContestant(contestantCreator.apply(array,i));
      }
      race.go();
    }
   }
  protected abstract Runnable fileRangeRacer(  NumberArray array,  int contestant);
  protected abstract NumberArray getNumberArray(  PagedFile file) throws IOException ;
  protected abstract Runnable wholeFileRacer(  NumberArray array,  int contestant);
}
