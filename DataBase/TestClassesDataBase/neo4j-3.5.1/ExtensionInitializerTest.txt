public class ExtensionInitializerTest {
  @Test public void testPluginInitialization(){
    Config config=Config.defaults(ServerSettings.transaction_idle_timeout,"600");
    NeoServer neoServer=Mockito.mock(NeoServer.class,Mockito.RETURNS_DEEP_STUBS);
    Mockito.when(neoServer.getConfig()).thenReturn(config);
    ExtensionInitializer extensionInitializer=new ExtensionInitializer(neoServer);
    Collection<Injectable<?>> injectableProperties=extensionInitializer.initializePackages(Collections.singletonList("org.neo4j.server.modules"));
    assertTrue(injectableProperties.stream().anyMatch(i -> ServerSettings.transaction_idle_timeout.name().equals(i.getValue())));
  }
public static class PropertyCollectorPlugin implements PluginLifecycle {
    @Override public Collection<Injectable<?>> start(    GraphDatabaseService graphDatabaseService,    Configuration config){
      return Iterators.asList(Iterators.map(new StringToInjectableFunction(),config.getKeys()));
    }
    @Override public void stop(){
    }
private class StringToInjectableFunction implements Function<String,Injectable<?>> {
      @Override public Injectable<String> apply(      final String value){
        return new Injectable<String>(){
          @Override public String getValue(){
            return value;
          }
          @Override public Class<String> getType(){
            return String.class;
          }
        }
;
      }
    }
  }
}
