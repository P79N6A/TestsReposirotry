public class VisibleMigrationProgressMonitorTest {
  @Test public void shouldReportAllPercentageSteps(){
    AssertableLogProvider logProvider=new AssertableLogProvider();
    Log log=logProvider.getLog(getClass());
    VisibleMigrationProgressMonitor monitor=new VisibleMigrationProgressMonitor(log);
    monitor.started(1);
    monitorSection(monitor,"First",100,40,25,23,10,50);
    monitor.completed();
    verifySectionReportedCorrectly(logProvider);
  }
  @Test public void progressNeverReportMoreThenHundredPercent(){
    AssertableLogProvider logProvider=new AssertableLogProvider();
    Log log=logProvider.getLog(getClass());
    VisibleMigrationProgressMonitor monitor=new VisibleMigrationProgressMonitor(log);
    monitor.started(1);
    monitorSection(monitor,"First",100,1,10,99,170);
    monitor.completed();
    verifySectionReportedCorrectly(logProvider);
  }
  private void verifySectionReportedCorrectly(  AssertableLogProvider logProvider){
    logProvider.assertContainsMessageContaining(VisibleMigrationProgressMonitor.MESSAGE_STARTED);
    for (int i=10; i <= 100; i+=10) {
      logProvider.assertContainsMessageContaining(String.valueOf(i) + "%");
    }
    logProvider.assertNone(AssertableLogProvider.inLog(VisibleMigrationProgressMonitor.class).info(containsString("110%")));
    logProvider.assertContainsMessageContaining(VisibleMigrationProgressMonitor.MESSAGE_COMPLETED);
  }
  private void monitorSection(  VisibleMigrationProgressMonitor monitor,  String name,  int max,  int... steps){
    ProgressReporter progressReporter=monitor.startSection(name);
    progressReporter.start(max);
    for (    int step : steps) {
      progressReporter.progress(step);
    }
    progressReporter.completed();
  }
}
