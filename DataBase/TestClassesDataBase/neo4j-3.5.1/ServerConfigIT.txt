public class ServerConfigIT extends ExclusiveServerTestBase {
  private CommunityNeoServer server;
  @After public void stopTheServer(){
    server.stop();
  }
  @Test public void shouldPickUpAddressFromConfig() throws Exception {
    ListenSocketAddress nonDefaultAddress=new ListenSocketAddress("0.0.0.0",0);
    server=server().onAddress(nonDefaultAddress).usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).build();
    server.start();
    HostnamePort localHttpAddress=getLocalHttpAddress();
    assertNotEquals(HttpConnector.Encryption.NONE.defaultPort,localHttpAddress.getPort());
    assertEquals(nonDefaultAddress.getHostname(),localHttpAddress.getHost());
    JaxRsResponse response=new RestRequest(server.baseUri()).get();
    assertThat(response.getStatus(),is(200));
    response.close();
  }
  @Test public void shouldPickupRelativeUrisForManagementApiAndRestApi() throws IOException {
    String dataUri="a/different/data/uri/";
    String managementUri="a/different/management/uri/";
    server=serverOnRandomPorts().withRelativeRestApiUriPath("/" + dataUri).usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).withRelativeManagementApiUriPath("/" + managementUri).build();
    server.start();
    JaxRsResponse response=new RestRequest().get(server.baseUri().toString() + dataUri,MediaType.TEXT_HTML_TYPE);
    assertEquals(200,response.getStatus());
    response=new RestRequest().get(server.baseUri().toString() + managementUri);
    assertEquals(200,response.getStatus());
    response.close();
  }
  @Test public void shouldGenerateWADLWhenExplicitlyEnabledInConfig() throws IOException {
    server=serverOnRandomPorts().withProperty(ServerSettings.wadl_enabled.name(),"true").usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).build();
    server.start();
    JaxRsResponse response=new RestRequest().get(server.baseUri().toString() + "application.wadl",MediaType.WILDCARD_TYPE);
    assertEquals(200,response.getStatus());
    assertEquals("application/vnd.sun.wadl+xml",response.getHeaders().get("Content-Type").iterator().next());
    assertThat(response.getEntity(),containsString("<application xmlns=\"http://wadl.dev.java" + ".net/2009/02\">"));
  }
  @Test public void shouldNotGenerateWADLWhenNotExplicitlyEnabledInConfig() throws IOException {
    server=serverOnRandomPorts().usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).build();
    server.start();
    JaxRsResponse response=new RestRequest().get(server.baseUri().toString() + "application.wadl",MediaType.WILDCARD_TYPE);
    assertEquals(404,response.getStatus());
  }
  @Test public void shouldNotGenerateWADLWhenExplicitlyDisabledInConfig() throws IOException {
    server=serverOnRandomPorts().withProperty(ServerSettings.wadl_enabled.name(),"false").usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).build();
    server.start();
    JaxRsResponse response=new RestRequest().get(server.baseUri().toString() + "application.wadl",MediaType.WILDCARD_TYPE);
    assertEquals(404,response.getStatus());
  }
  @Test public void shouldEnableConsoleServiceByDefault() throws IOException {
    server=serverOnRandomPorts().usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).build();
    server.start();
    assertEquals(200,new RestRequest().get(server.baseUri().toString() + "db/manage/server/console").getStatus());
  }
  @Test public void shouldDisableConsoleServiceWhenAskedTo() throws IOException {
    server=serverOnRandomPorts().withProperty(ServerSettings.console_module_enabled.name(),"false").usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).build();
    server.start();
    assertEquals(404,new RestRequest().get(server.baseUri().toString() + "db/manage/server/console").getStatus());
  }
  private HostnamePort getLocalHttpAddress(){
    ConnectorPortRegister connectorPortRegister=server.getDatabase().getGraph().getDependencyResolver().resolveDependency(ConnectorPortRegister.class);
    return connectorPortRegister.getLocalAddress("http");
  }
}
