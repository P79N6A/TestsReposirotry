private class FaultyIndexStorageFactory extends IndexStorageFactory {
  final long faultyIndexId;
  final Exception error;
  FaultyIndexStorageFactory(  long faultyIndexId,  Exception error,  DirectoryFactory directoryFactory,  IndexDirectoryStructure directoryStructure){
    super(directoryFactory,fs,directoryStructure);
    this.faultyIndexId=faultyIndexId;
    this.error=error;
  }
  @Override public PartitionedIndexStorage indexStorageOf(  long indexId){
    return indexId == faultyIndexId ? newFaultyPartitionedIndexStorage() : super.indexStorageOf(indexId);
  }
  PartitionedIndexStorage newFaultyPartitionedIndexStorage(){
    try {
      PartitionedIndexStorage storage=mock(PartitionedIndexStorage.class);
      when(storage.listFolders()).thenReturn(singletonList(new File("/some/path/somewhere/1")));
      when(storage.openDirectory(any())).thenThrow(error);
      return storage;
    }
 catch (    IOException e) {
      throw new UncheckedIOException(e);
    }
  }
}
