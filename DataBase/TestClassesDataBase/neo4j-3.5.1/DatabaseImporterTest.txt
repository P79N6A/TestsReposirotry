public class DatabaseImporterTest {
  @Rule public final TestDirectory testDir=TestDirectory.testDirectory();
  @Test public void requiresFromArgument(){
    String[] arguments={"--mode=database","--database=bar"};
    try {
      new DatabaseImporter(Args.parse(arguments),Config.defaults(),new NullOutsideWorld());
      fail("Should have thrown an exception.");
    }
 catch (    IncorrectUsage e) {
      assertThat(e.getMessage(),containsString("from"));
    }
  }
  @Test public void failIfSourceIsNotAStore(){
    File from=testDir.directory("empty");
    String[] arguments={"--mode=database","--database=bar","--from=" + from.getAbsolutePath()};
    try {
      new DatabaseImporter(Args.parse(arguments),Config.defaults(),new NullOutsideWorld());
      fail("Should have thrown an exception.");
    }
 catch (    IncorrectUsage e) {
      assertThat(e.getMessage(),containsString("does not contain a database"));
    }
  }
  @Test public void copiesDatabaseFromOldLocationToNewLocation() throws Exception {
    File home=testDir.directory("home");
    File from=provideStoreDirectory();
    File destination=new File(new File(new File(home,"data"),"databases"),"bar");
    String[] arguments={"--mode=database","--database=bar","--from=" + from.getAbsolutePath()};
    DatabaseImporter importer=new DatabaseImporter(Args.parse(arguments),getConfigWith(home,"bar"),new NullOutsideWorld());
    assertThat(destination,not(isExistingDatabase()));
    importer.doImport();
    assertThat(destination,isExistingDatabase());
  }
  @Test public void removesOldMessagesLog() throws Exception {
    File home=testDir.directory();
    File from=provideStoreDirectory();
    File oldMessagesLog=new File(from,"messages.log");
    assertTrue(oldMessagesLog.createNewFile());
    File destination=testDir.databaseDir();
    String[] arguments={"--mode=database","--database=bar","--from=" + from.getAbsolutePath()};
    DatabaseImporter importer=new DatabaseImporter(Args.parse(arguments),getConfigWith(home,"bar"),new NullOutsideWorld());
    File messagesLog=new File(destination,"messages.log");
    importer.doImport();
    assertFalse(messagesLog.exists());
  }
  private static Config getConfigWith(  File homeDir,  String databaseName){
    HashMap<String,String> additionalConfig=new HashMap<>();
    additionalConfig.put(GraphDatabaseSettings.neo4j_home.name(),homeDir.toString());
    additionalConfig.put(GraphDatabaseSettings.active_database.name(),databaseName);
    return Config.defaults(additionalConfig);
  }
  private File provideStoreDirectory(){
    GraphDatabaseService db=null;
    File homeStoreDir=testDir.databaseDir("home");
    try {
      db=new TestGraphDatabaseFactory().newEmbeddedDatabase(homeStoreDir);
      try (Transaction transaction=db.beginTx()){
        db.createNode();
        transaction.success();
      }
     }
  finally {
      if (db != null) {
        db.shutdown();
      }
    }
    return homeStoreDir;
  }
  private static Matcher<File> isExistingDatabase(){
    return new BaseMatcher<File>(){
      @Override public boolean matches(      final Object item){
        final File store=(File)item;
        try {
          Validators.CONTAINS_EXISTING_DATABASE.validate(store);
          return true;
        }
 catch (        Exception e) {
          return false;
        }
      }
      @Override public void describeTo(      Description description){
        description.appendText("an existing database.");
      }
      @Override public void describeMismatch(      final Object item,      final Description description){
        description.appendValue(item).appendText(" is not an existing database.");
      }
    }
;
  }
}
