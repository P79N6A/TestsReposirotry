class LocalDateTimeValueTest {
  @Test void shouldParseDate(){
    assertEquals(localDateTime(date(2017,12,17),localTime(17,14,35,123456789)),parse("2017-12-17T17:14:35.123456789"));
  }
  @Test void shouldWriteDateTime(){
    for (    LocalDateTimeValue value : new LocalDateTimeValue[]{localDateTime(date(2017,3,26),localTime(1,0,0,0)),localDateTime(date(2017,3,26),localTime(2,0,0,0)),localDateTime(date(2017,3,26),localTime(3,0,0,0)),localDateTime(date(2017,10,29),localTime(2,0,0,0)),localDateTime(date(2017,10,29),localTime(3,0,0,0)),localDateTime(date(2017,10,29),localTime(4,0,0,0))}) {
      List<LocalDateTimeValue> values=new ArrayList<>(1);
      ValueWriter<RuntimeException> writer=new ThrowingValueWriter.AssertOnly(){
        @Override public void writeLocalDateTime(        LocalDateTime localDateTime){
          values.add(localDateTime(localDateTime));
        }
      }
;
      value.writeTo(writer);
      assertEquals(singletonList(value),values);
    }
  }
  @Test void shouldEqualItself(){
    assertEqual(localDateTime(2018,1,31,10,52,5,6),localDateTime(2018,1,31,10,52,5,6));
  }
  @Test void shouldNotEqualOther(){
    assertNotEqual(localDateTime(2018,1,31,10,52,5,6),localDateTime(2018,1,31,10,52,5,7));
  }
}
