public class EncodeGroupsStepTest {
  @SuppressWarnings("unchecked") @Test public void shouldEncodeGroupChains() throws Throwable {
    StageControl control=mock(StageControl.class);
    final AtomicLong nextId=new AtomicLong();
    RecordStore<RelationshipGroupRecord> store=mock(RecordStore.class);
    when(store.nextId()).thenAnswer(invocation -> nextId.incrementAndGet());
    doAnswer(invocation -> {
      invocation.<RelationshipGroupRecord>getArgument(0).setFirstOut(1);
      return null;
    }
).when(store).prepareForCommit(any(RelationshipGroupRecord.class));
    Configuration config=Configuration.withBatchSize(DEFAULT,10);
    EncodeGroupsStep encoder=new EncodeGroupsStep(control,config,store);
    encoder.start(Step.ORDER_SEND_DOWNSTREAM);
    Catcher catcher=new Catcher();
    encoder.process(batch(new Group(1,3),new Group(2,3),new Group(3,4)),catcher);
    encoder.process(batch(new Group(4,2),new Group(5,10)),catcher);
    encoder.process(batch(new Group(6,35)),catcher);
    encoder.process(batch(new Group(7,2)),catcher);
    encoder.endOfUpstream();
    encoder.awaitCompleted();
    encoder.close();
    assertEquals(4,catcher.batches.size());
    long lastOwningNodeLastBatch=-1;
    for (    RelationshipGroupRecord[] batch : catcher.batches) {
      assertBatch(batch,lastOwningNodeLastBatch);
      lastOwningNodeLastBatch=batch[batch.length - 1].getOwningNode();
    }
  }
  private void assertBatch(  RelationshipGroupRecord[] batch,  long lastOwningNodeLastBatch){
    for (int i=0; i < batch.length; i++) {
      RelationshipGroupRecord record=batch[i];
      assertTrue(record.getId() > Record.NULL_REFERENCE.longValue());
      assertTrue(record.getOwningNode() > lastOwningNodeLastBatch);
      assertEquals(1,record.getFirstOut());
      if (record.getNext() == Record.NULL_REFERENCE.longValue()) {
        assertTrue(i == batch.length - 1 || batch[i + 1].getOwningNode() > record.getOwningNode());
      }
    }
  }
  private RelationshipGroupRecord[] batch(  Group... groups){
    return ReadGroupsFromCacheStepTest.groups(groups).toArray(new RelationshipGroupRecord[0]);
  }
private static class Catcher implements BatchSender {
    private final List<RelationshipGroupRecord[]> batches=new ArrayList<>();
    @Override public void send(    Object batch){
      batches.add((RelationshipGroupRecord[])batch);
    }
  }
}
