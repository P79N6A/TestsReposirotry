public class CypherExecutorTest {
  private static final long CUSTOM_TRANSACTION_TIMEOUT=1000L;
  private static final String QUERY="create (n)";
  private Database database;
  private GraphDatabaseFacade databaseFacade;
  private DependencyResolver resolver;
  private QueryExecutionEngine executionEngine;
  private ThreadToStatementContextBridge statementBridge;
  private GraphDatabaseQueryService databaseQueryService;
  private KernelTransaction kernelTransaction;
  private Statement statement;
  private HttpServletRequest request;
  private AssertableLogProvider logProvider;
  @Before public void setUp(){
    setUpMocks();
    initLogProvider();
  }
  @Test public void startDefaultTransaction(){
    CypherExecutor cypherExecutor=new CypherExecutor(database,logProvider);
    cypherExecutor.start();
    cypherExecutor.createTransactionContext(QUERY,VirtualValues.emptyMap(),request);
    verify(databaseQueryService).beginTransaction(KernelTransaction.Type.implicit,AUTH_DISABLED);
    logProvider.assertNoLoggingOccurred();
  }
  @Test public void startTransactionWithCustomTimeout(){
    when(request.getHeader(HttpHeaderUtils.MAX_EXECUTION_TIME_HEADER)).thenReturn(String.valueOf(CUSTOM_TRANSACTION_TIMEOUT));
    CypherExecutor cypherExecutor=new CypherExecutor(database,logProvider);
    cypherExecutor.start();
    cypherExecutor.createTransactionContext(QUERY,VirtualValues.emptyMap(),request);
    verify(databaseQueryService).beginTransaction(KernelTransaction.Type.implicit,AUTH_DISABLED,CUSTOM_TRANSACTION_TIMEOUT,TimeUnit.MILLISECONDS);
    logProvider.assertNoLoggingOccurred();
  }
  @Test public void startDefaultTransactionWhenHeaderHasIncorrectValue(){
    when(request.getHeader(HttpHeaderUtils.MAX_EXECUTION_TIME_HEADER)).thenReturn("not a number");
    CypherExecutor cypherExecutor=new CypherExecutor(database,logProvider);
    cypherExecutor.start();
    cypherExecutor.createTransactionContext(QUERY,VirtualValues.emptyMap(),request);
    verify(databaseQueryService).beginTransaction(KernelTransaction.Type.implicit,AUTH_DISABLED);
    logProvider.assertContainsMessageContaining("Fail to parse `max-execution-time` header with value: 'not a " + "number'. Should be a positive number.");
  }
  @Test public void startDefaultTransactionIfTimeoutIsNegative(){
    when(request.getHeader(HttpHeaderUtils.MAX_EXECUTION_TIME_HEADER)).thenReturn("-2");
    CypherExecutor cypherExecutor=new CypherExecutor(database,logProvider);
    cypherExecutor.start();
    cypherExecutor.createTransactionContext(QUERY,VirtualValues.emptyMap(),request);
    verify(databaseQueryService).beginTransaction(KernelTransaction.Type.implicit,AUTH_DISABLED);
    logProvider.assertNoLoggingOccurred();
  }
  private void initLogProvider(){
    logProvider=new AssertableLogProvider(true);
  }
  private void setUpMocks(){
    database=mock(Database.class);
    databaseFacade=mock(GraphDatabaseFacade.class);
    resolver=mock(DependencyResolver.class);
    executionEngine=mock(ExecutionEngine.class);
    statementBridge=mock(ThreadToStatementContextBridge.class);
    databaseQueryService=mock(GraphDatabaseQueryService.class);
    kernelTransaction=mock(KernelTransaction.class);
    statement=mock(Statement.class);
    request=mock(HttpServletRequest.class);
    InternalTransaction transaction=new TopLevelTransaction(kernelTransaction);
    LoginContext loginContext=AUTH_DISABLED;
    KernelTransaction.Type type=KernelTransaction.Type.implicit;
    QueryRegistryOperations registryOperations=mock(QueryRegistryOperations.class);
    when(statement.queryRegistration()).thenReturn(registryOperations);
    when(statementBridge.get()).thenReturn(statement);
    when(kernelTransaction.securityContext()).thenReturn(loginContext.authorize(s -> -1,GraphDatabaseSettings.DEFAULT_DATABASE_NAME));
    when(kernelTransaction.transactionType()).thenReturn(type);
    when(database.getGraph()).thenReturn(databaseFacade);
    when(databaseFacade.getDependencyResolver()).thenReturn(resolver);
    when(resolver.resolveDependency(QueryExecutionEngine.class)).thenReturn(executionEngine);
    when(resolver.resolveDependency(ThreadToStatementContextBridge.class)).thenReturn(statementBridge);
    when(resolver.resolveDependency(GraphDatabaseQueryService.class)).thenReturn(databaseQueryService);
    when(databaseQueryService.beginTransaction(type,loginContext)).thenReturn(transaction);
    when(databaseQueryService.beginTransaction(type,loginContext,CUSTOM_TRANSACTION_TIMEOUT,TimeUnit.MILLISECONDS)).thenReturn(transaction);
    when(databaseQueryService.getDependencyResolver()).thenReturn(resolver);
    when(request.getScheme()).thenReturn("http");
    when(request.getRemoteAddr()).thenReturn("127.0.0.1");
    when(request.getRemotePort()).thenReturn(5678);
    when(request.getServerName()).thenReturn("127.0.0.1");
    when(request.getServerPort()).thenReturn(7474);
    when(request.getRequestURI()).thenReturn("/");
  }
}
