public class NativeLabelScanStoreRebuildTest {
  private final PageCacheRule pageCacheRule=new PageCacheRule();
  private final FileSystemRule fileSystemRule=new DefaultFileSystemRule();
  private final TestDirectory testDirectory=TestDirectory.testDirectory();
  @Rule public RuleChain ruleChain=RuleChain.outerRule(fileSystemRule).around(pageCacheRule).around(testDirectory);
  private static final FullStoreChangeStream THROWING_STREAM=writer -> {
    throw new IllegalArgumentException();
  }
;
  @Test public void mustBeDirtyIfFailedDuringRebuild() throws Exception {
    PageCache pageCache=pageCacheRule.getPageCache(fileSystemRule.get());
    createDirtyIndex(pageCache);
    RecordingMonitor monitor=new RecordingMonitor();
    Monitors monitors=new Monitors();
    monitors.addMonitorListener(monitor);
    NativeLabelScanStore nativeLabelScanStore=new NativeLabelScanStore(pageCache,testDirectory.databaseLayout(),fileSystemRule.get(),EMPTY,false,monitors,immediate());
    nativeLabelScanStore.init();
    nativeLabelScanStore.start();
    assertTrue(monitor.notValid);
    assertTrue(monitor.rebuilding);
    assertTrue(monitor.rebuilt);
    nativeLabelScanStore.shutdown();
  }
  @Test public void doNotRebuildIfOpenedInReadOnlyModeAndIndexIsNotClean() throws IOException {
    PageCache pageCache=pageCacheRule.getPageCache(fileSystemRule.get());
    createDirtyIndex(pageCache);
    Monitors monitors=new Monitors();
    RecordingMonitor monitor=new RecordingMonitor();
    monitors.addMonitorListener(monitor);
    NativeLabelScanStore nativeLabelScanStore=new NativeLabelScanStore(pageCache,testDirectory.databaseLayout(),fileSystemRule.get(),EMPTY,true,monitors,ignore());
    nativeLabelScanStore.init();
    nativeLabelScanStore.start();
    assertTrue(monitor.notValid);
    assertFalse(monitor.rebuilt);
    assertFalse(monitor.rebuilding);
    nativeLabelScanStore.shutdown();
  }
  @Test public void labelScanStoreIsDirtyWhenIndexIsNotClean() throws IOException {
    PageCache pageCache=pageCacheRule.getPageCache(fileSystemRule.get());
    createDirtyIndex(pageCache);
    Monitors monitors=new Monitors();
    RecordingMonitor monitor=new RecordingMonitor();
    monitors.addMonitorListener(monitor);
    NativeLabelScanStore nativeLabelScanStore=new NativeLabelScanStore(pageCache,testDirectory.databaseLayout(),fileSystemRule.get(),EMPTY,true,monitors,ignore());
    nativeLabelScanStore.init();
    nativeLabelScanStore.start();
    assertTrue(nativeLabelScanStore.isDirty());
    nativeLabelScanStore.shutdown();
  }
  @Test public void shouldFailOnUnsortedLabelsFromFullStoreChangeStream() throws Exception {
    PageCache pageCache=pageCacheRule.getPageCache(fileSystemRule.get());
    List<NodeLabelUpdate> existingData=new ArrayList<>();
    existingData.add(NodeLabelUpdate.labelChanges(1,new long[0],new long[]{2,1}));
    FullStoreChangeStream changeStream=asStream(existingData);
    NativeLabelScanStore nativeLabelScanStore=null;
    try {
      nativeLabelScanStore=new NativeLabelScanStore(pageCache,testDirectory.databaseLayout(),fileSystemRule.get(),changeStream,false,new Monitors(),immediate());
      nativeLabelScanStore.init();
      nativeLabelScanStore.start();
      fail("Expected native label scan store to fail on ");
    }
 catch (    IllegalArgumentException e) {
      assertThat(e.getMessage(),Matchers.containsString("unsorted label"));
      assertThat(e.getMessage(),Matchers.stringContainsInOrder(Iterables.asIterable("2","1")));
    }
 finally {
      if (nativeLabelScanStore != null) {
        nativeLabelScanStore.shutdown();
      }
    }
  }
  private void createDirtyIndex(  PageCache pageCache) throws IOException {
    NativeLabelScanStore nativeLabelScanStore=null;
    try {
      nativeLabelScanStore=new NativeLabelScanStore(pageCache,testDirectory.databaseLayout(),fileSystemRule.get(),THROWING_STREAM,false,new Monitors(),immediate());
      nativeLabelScanStore.init();
      nativeLabelScanStore.start();
    }
 catch (    IllegalArgumentException e) {
      if (nativeLabelScanStore != null) {
        nativeLabelScanStore.shutdown();
      }
    }
  }
private static class RecordingMonitor extends LabelScanStore.Monitor.Adaptor {
    boolean notValid;
    boolean rebuilding;
    boolean rebuilt;
    @Override public void notValidIndex(){
      notValid=true;
    }
    @Override public void rebuilding(){
      rebuilding=true;
    }
    @Override public void rebuilt(    long roughNodeCount){
      rebuilt=true;
    }
  }
}
