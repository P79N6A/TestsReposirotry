public class StatementLifecycleTest {
  @Test public void shouldReleaseStoreStatementOnlyWhenReferenceCountDownToZero(){
    KernelTransactionImplementation transaction=mock(KernelTransactionImplementation.class);
    StorageReader storageReader=mock(StorageReader.class);
    KernelStatement statement=getKernelStatement(transaction,storageReader);
    statement.acquire();
    verify(storageReader).acquire();
    statement.acquire();
    statement.close();
    verifyNoMoreInteractions(storageReader);
    statement.close();
    verify(storageReader).release();
  }
  @Test public void shouldReleaseStoreStatementWhenForceClosingStatements(){
    KernelTransactionImplementation transaction=mock(KernelTransactionImplementation.class);
    StorageReader storageReader=mock(StorageReader.class);
    KernelStatement statement=getKernelStatement(transaction,storageReader);
    statement.acquire();
    try {
      statement.forceClose();
    }
 catch (    KernelStatement.StatementNotClosedException ignored) {
    }
    verify(storageReader).release();
  }
  private KernelStatement getKernelStatement(  KernelTransactionImplementation transaction,  StorageReader storageReader){
    return new KernelStatement(transaction,null,storageReader,LockTracer.NONE,mock(StatementOperationParts.class),new ClockContext(),EmptyVersionContextSupplier.EMPTY);
  }
}
