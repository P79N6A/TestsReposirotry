public class ExecutionPlanConverterTest {
  @Test public void profileStatisticConversion(){
    MapValue convertedMap=ExecutionPlanConverter.convert(new TestExecutionPlanDescription("description",getProfilerStatistics(),getIdentifiers(),getArguments()));
    assertEquals(convertedMap.get("operatorType"),stringValue("description"));
    assertEquals(convertedMap.get("args"),ValueUtils.asMapValue(getArguments()));
    assertEquals(convertedMap.get("identifiers"),ValueUtils.asListValue(getIdentifiers()));
    assertEquals(convertedMap.get("children"),VirtualValues.EMPTY_LIST);
    assertEquals(convertedMap.get("rows"),longValue(1L));
    assertEquals(convertedMap.get("dbHits"),longValue(2L));
    assertEquals(convertedMap.get("pageCacheHits"),longValue(3L));
    assertEquals(convertedMap.get("pageCacheMisses"),longValue(2L));
    assertEquals(((DoubleValue)convertedMap.get("pageCacheHitRatio")).doubleValue(),3.0 / 5,0.0001);
    assertEquals(convertedMap.size(),9);
  }
  private Map<String,Object> getArguments(){
    return MapUtil.map("argKey","argValue");
  }
  private Set<String> getIdentifiers(){
    return Iterators.asSet("identifier1","identifier2");
  }
  private TestProfilerStatistics getProfilerStatistics(){
    return new TestProfilerStatistics(1,2,3,2);
  }
private class TestExecutionPlanDescription implements ExecutionPlanDescription {
    private final String name;
    private final ProfilerStatistics profilerStatistics;
    private final Set<String> identifiers;
    private final Map<String,Object> arguments;
    TestExecutionPlanDescription(    String name,    ProfilerStatistics profilerStatistics,    Set<String> identifiers,    Map<String,Object> arguments){
      this.name=name;
      this.profilerStatistics=profilerStatistics;
      this.identifiers=identifiers;
      this.arguments=arguments;
    }
    @Override public String getName(){
      return name;
    }
    @Override public List<ExecutionPlanDescription> getChildren(){
      return Collections.emptyList();
    }
    @Override public Map<String,Object> getArguments(){
      return arguments;
    }
    @Override public Set<String> getIdentifiers(){
      return identifiers;
    }
    @Override public boolean hasProfilerStatistics(){
      return profilerStatistics != null;
    }
    @Override public ProfilerStatistics getProfilerStatistics(){
      return profilerStatistics;
    }
  }
private class TestProfilerStatistics implements ExecutionPlanDescription.ProfilerStatistics {
    private final long rows;
    private final long dbHits;
    private final long pageCacheHits;
    private final long pageCacheMisses;
    private TestProfilerStatistics(    long rows,    long dbHits,    long pageCacheHits,    long pageCacheMisses){
      this.rows=rows;
      this.dbHits=dbHits;
      this.pageCacheHits=pageCacheHits;
      this.pageCacheMisses=pageCacheMisses;
    }
    @Override public long getRows(){
      return rows;
    }
    @Override public long getDbHits(){
      return dbHits;
    }
    @Override public long getPageCacheHits(){
      return pageCacheHits;
    }
    @Override public long getPageCacheMisses(){
      return pageCacheMisses;
    }
  }
}
