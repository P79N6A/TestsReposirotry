public class KernelDataTest {
  private final Collection<Kernel> kernels=new HashSet<>();
  private final PageCacheRule pageCacheRule=new PageCacheRule();
  private final DefaultFileSystemRule fileSystemRule=new DefaultFileSystemRule();
  @Rule public final RuleChain ruleChain=RuleChain.outerRule(fileSystemRule).around(pageCacheRule);
  @After public void tearDown(){
    Iterator<Kernel> kernelIterator=kernels.iterator();
    while (kernelIterator.hasNext()) {
      Kernel kernel=kernelIterator.next();
      kernelIterator.remove();
      kernel.shutdown();
    }
  }
  @Test public void shouldGenerateUniqueInstanceIdentifiers(){
    Kernel kernel1=new Kernel(null);
    Kernel kernel2=new Kernel(null);
    assertNotNull(kernel1.instanceId());
    assertNotNull(kernel2.instanceId());
    assertNotEquals(kernel1.instanceId(),kernel2.instanceId());
  }
  @Test public void shouldReuseInstanceIdentifiers(){
    Kernel kernel=new Kernel(null);
    String instanceId=kernel.instanceId();
    kernel.shutdown();
    kernel=new Kernel(null);
    assertEquals(instanceId,kernel.instanceId());
  }
  @Test public void shouldAllowConfigurationOfInstanceId(){
    Kernel kernel=new Kernel("myInstance");
    assertEquals("myInstance",kernel.instanceId());
  }
  @Test public void shouldGenerateInstanceIdentifierWhenNullConfigured(){
    Kernel kernel=new Kernel(null);
    assertEquals(kernel.instanceId(),kernel.instanceId().trim());
    assertTrue(kernel.instanceId().length() > 0);
  }
  @Test public void shouldGenerateInstanceIdentifierWhenEmptyStringConfigured(){
    Kernel kernel=new Kernel("");
    assertEquals(kernel.instanceId(),kernel.instanceId().trim());
    assertTrue(kernel.instanceId().length() > 0);
  }
  @Test public void shouldNotAllowMultipleInstancesWithTheSameConfiguredInstanceId(){
    new Kernel("myInstance");
    try {
      new Kernel("myInstance");
      fail("should have thrown exception");
    }
 catch (    IllegalStateException e) {
      assertEquals("There is already a kernel started with unsupported.dbms.kernel_id='myInstance'.",e.getMessage());
    }
  }
  @Test public void shouldAllowReuseOfConfiguredInstanceIdAfterShutdown(){
    new Kernel("myInstance").shutdown();
    Kernel kernel=new Kernel("myInstance");
    assertEquals("myInstance",kernel.instanceId());
  }
private class Kernel extends KernelData {
    Kernel(    String desiredId){
      super(fileSystemRule.get(),pageCacheRule.getPageCache(fileSystemRule.get()),new File(GraphDatabaseSettings.DEFAULT_DATABASE_NAME),Config.defaults(forced_kernel_id,desiredId),mock(DataSourceManager.class));
      kernels.add(this);
    }
    @Override public void shutdown(){
      super.shutdown();
      kernels.remove(this);
    }
  }
}
