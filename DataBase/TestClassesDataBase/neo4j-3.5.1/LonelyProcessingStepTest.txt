public class LonelyProcessingStepTest {
  @ClassRule public static SuppressOutput mute=SuppressOutput.suppressAll();
  @Test(timeout=10_000) public void issuePanicBeforeCompletionOnError() throws InterruptedException {
    List<Step<?>> stepsPipeline=new ArrayList<>();
    FaultyLonelyProcessingStepTest faultyStep=new FaultyLonelyProcessingStepTest(stepsPipeline);
    stepsPipeline.add(faultyStep);
    faultyStep.receive(1,null);
    faultyStep.awaitCompleted();
    assertTrue(faultyStep.endOfUpstreamCalled);
    assertTrue("On upstream end step should be already on panic in case of exception",faultyStep.isPanicOnEndUpstream());
    assertTrue(faultyStep.isPanic());
    assertFalse(faultyStep.stillWorking());
    assertTrue(faultyStep.isCompleted());
  }
private class FaultyLonelyProcessingStepTest extends LonelyProcessingStep {
    private volatile boolean endOfUpstreamCalled;
    private volatile boolean panicOnEndUpstream;
    FaultyLonelyProcessingStepTest(    List<Step<?>> pipeLine){
      super(new StageExecution("Faulty",null,Configuration.DEFAULT,pipeLine,0),"Faulty",Configuration.DEFAULT);
    }
    @Override protected void process(){
      throw new RuntimeException("Process exception");
    }
    @Override public void endOfUpstream(){
      endOfUpstreamCalled=true;
      panicOnEndUpstream=isPanic();
      super.endOfUpstream();
    }
    private boolean isPanicOnEndUpstream(){
      return panicOnEndUpstream;
    }
  }
}
