public class DeadlockIT extends AbstractRestFunctionalTestBase {
  private final HTTP.Builder http=HTTP.withBaseUri(server().baseUri());
  @Rule public OtherThreadRule<Object> otherThread=new OtherThreadRule<>();
  private final CountDownLatch secondNodeLocked=new CountDownLatch(1);
  @Test public void shouldReturnCorrectStatusCodeOnDeadlock() throws Exception {
    try (Transaction tx=graphdb().beginTx()){
      graphdb().createNode(Label.label("First"));
      graphdb().createNode(Label.label("Second"));
      tx.success();
    }
     HTTP.Response begin=http.POST("db/data/transaction",quotedJson("{ 'statements': [ { 'statement': 'MATCH (n:First) SET n.prop=1' } ] }"));
    otherThread.execute(writeToFirstAndSecond());
    assertTrue(secondNodeLocked.await(10,TimeUnit.SECONDS));
    Thread.sleep(1000);
    HTTP.Response deadlock=http.POST(begin.location(),quotedJson("{ 'statements': [ { 'statement': 'MATCH (n:Second) SET n.prop=1' } ] }"));
    assertThat(deadlock.get("errors").get(0).get("code").getTextValue(),equalTo(DeadlockDetected.code().serialize()));
  }
  private OtherThreadExecutor.WorkerCommand<Object,Object> writeToFirstAndSecond(){
    return state -> {
      HTTP.Response post=http.POST("db/data/transaction",quotedJson("{ 'statements': [ { 'statement': 'MATCH (n:Second) SET n.prop=1' } ] }"));
      secondNodeLocked.countDown();
      http.POST(post.location(),quotedJson("{ 'statements': [ { 'statement': 'MATCH (n:First) SET n.prop=1' } ] }"));
      return null;
    }
;
  }
}
