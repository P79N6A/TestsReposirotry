public abstract class ExplicitIndexCursorTestBase<G extends KernelAPIReadTestSupport> extends KernelAPIReadTestBase<G> {
  @Override public void createTestGraph(  GraphDatabaseService graphDb){
    try (Transaction tx=graphDb.beginTx()){
      graphDb.index().forNodes("foo").add(graphDb.createNode(),"bar","this is it");
      Relationship edge=graphDb.createNode().createRelationshipTo(graphDb.createNode(),withName("LALA"));
      graphDb.index().forRelationships("rels").add(edge,"alpha","betting on the wrong string");
      tx.success();
    }
   }
  @Test public void shouldFindNodeByLookup() throws Exception {
    try (NodeExplicitIndexCursor cursor=cursors.allocateNodeExplicitIndexCursor()){
      MutableLongSet nodes=new LongHashSet();
      indexRead.nodeExplicitIndexLookup(cursor,"foo","bar","this is it");
      assertNodeCount(cursor,1,nodes);
      indexRead.nodeExplicitIndexLookup(cursor,"foo","bar","not that");
      assertNodeCount(cursor,0,nodes);
    }
   }
  @Test public void shouldFindNodeByQuery() throws Exception {
    try (NodeExplicitIndexCursor cursor=cursors.allocateNodeExplicitIndexCursor()){
      MutableLongSet nodes=new LongHashSet();
      indexRead.nodeExplicitIndexQuery(cursor,"foo","bar:this*");
      assertNodeCount(cursor,1,nodes);
      nodes.clear();
      indexRead.nodeExplicitIndexQuery(cursor,"foo","bar","this*");
      assertNodeCount(cursor,1,nodes);
      indexRead.nodeExplicitIndexQuery(cursor,"foo","bar:that*");
      assertNodeCount(cursor,0,nodes);
      indexRead.nodeExplicitIndexQuery(cursor,"foo","bar","that*");
      assertNodeCount(cursor,0,nodes);
    }
   }
  @Test public void shouldFindRelationshipByLookup() throws Exception {
    try (RelationshipExplicitIndexCursor cursor=cursors.allocateRelationshipExplicitIndexCursor()){
      MutableLongSet edges=new LongHashSet();
      indexRead.relationshipExplicitIndexLookup(cursor,"rels","alpha","betting on the wrong string",-1,-1);
      assertFoundRelationships(cursor,1,edges);
      indexRead.relationshipExplicitIndexLookup(cursor,"rels","bar","not that",-1,-1);
      assertFoundRelationships(cursor,0,edges);
    }
   }
  @Test public void shouldFindRelationshipByQuery() throws Exception {
    try (RelationshipExplicitIndexCursor cursor=cursors.allocateRelationshipExplicitIndexCursor()){
      MutableLongSet relationships=new LongHashSet();
      indexRead.relationshipExplicitIndexQuery(cursor,"rels","alpha:betting*",-1,-1);
      assertFoundRelationships(cursor,1,relationships);
      relationships.clear();
      indexRead.relationshipExplicitIndexQuery(cursor,"rels","alpha","betting*",-1,-1);
      assertFoundRelationships(cursor,1,relationships);
      indexRead.relationshipExplicitIndexQuery(cursor,"rels","alpha:that*",-1,-1);
      assertFoundRelationships(cursor,0,relationships);
      indexRead.relationshipExplicitIndexQuery(cursor,"rels","alpha","that*",-1,-1);
      assertFoundRelationships(cursor,0,relationships);
    }
   }
}
