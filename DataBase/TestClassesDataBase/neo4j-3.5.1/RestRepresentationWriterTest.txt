public class RestRepresentationWriterTest {
  @Test public void shouldWriteNestedMaps() throws Exception {
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    JsonGenerator json=new JsonFactory(new Neo4jJsonCodec()).createJsonGenerator(out);
    JsonNode rest=serialize(out,json,new RestRepresentationWriter(URI.create("localhost")));
    MatcherAssert.assertThat(rest.size(),equalTo(1));
    JsonNode firstCell=rest.get(0);
    MatcherAssert.assertThat(firstCell.get("one").get("two").size(),is(2));
    MatcherAssert.assertThat(firstCell.get("one").get("two").get(0).asBoolean(),is(true));
    MatcherAssert.assertThat(firstCell.get("one").get("two").get(1).get("three").asInt(),is(42));
  }
  private JsonNode serialize(  ByteArrayOutputStream out,  JsonGenerator json,  ResultDataContentWriter resultDataContentWriter) throws IOException, JsonParseException {
    json.writeStartObject();
    resultDataContentWriter.write(json,asList("the column"),new MapRow(map("the column",map("one",map("two",asList(true,map("three",42)))))),null);
    json.writeEndObject();
    json.flush();
    json.close();
    String jsonAsString=out.toString();
    return jsonNode(jsonAsString).get("rest");
  }
}
