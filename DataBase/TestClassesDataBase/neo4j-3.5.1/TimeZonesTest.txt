class TimeZonesTest {
  @Test void weSupportAllJavaZoneIds(){
    ZoneId.getAvailableZoneIds().forEach(s -> {
      short num=TimeZones.map(s);
      assertThat("Our time zone table does not have a mapping for " + s,num,greaterThanOrEqualTo((short)0));
      String nameFromTable=TimeZones.map(num);
      if (!s.equals(nameFromTable)) {
        assertThat("Our time zone table has inconsistent mapping for " + nameFromTable,TimeZones.map(TimeZones.map(nameFromTable)),equalTo(nameFromTable));
      }
    }
);
  }
  @Test void weSupportDeletedZoneIdEastSaskatchewan(){
    try {
      short eastSaskatchewan=TimeZones.map("Canada/East-Saskatchewan");
      assertThat("Our time zone table does not remap Canada/East-Saskatchewan to Canada/Saskatchewan",TimeZones.map(eastSaskatchewan),equalTo("Canada/Saskatchewan"));
    }
 catch (    IllegalArgumentException e) {
      fail("Our time zone table does not support Canada/East-Saskatchewan");
    }
  }
  /** 
 * If this test fails, you have changed something in TZIDS. This is fine, as long as you only append lines to the end, or add a mapping to a deleted timezone. You are not allowed to change the order of lines or remove a line. p> If your changes were legit, please change the expected byte[] below.
 */
  @Test void tzidsOrderMustNotChange() throws URISyntaxException, IOException {
    Path path=Paths.get(TimeZones.class.getResource("/TZIDS").toURI());
    byte[] timeZonesInfo=Files.readAllBytes(path);
    byte[] timeZonesHash=DigestUtils.sha256(timeZonesInfo);
    assertThat(timeZonesHash,equalTo(new byte[]{-2,114,100,-95,-108,-101,81,-40,-13,78,40,-12,-128,-125,93,-100,19,122,-98,-80,-30,109,39,7,83,54,-53,30,-6,26,8,-103}));
  }
}
