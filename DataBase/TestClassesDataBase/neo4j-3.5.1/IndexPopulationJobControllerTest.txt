public class IndexPopulationJobControllerTest {
  private final OnDemandJobScheduler executer=new OnDemandJobScheduler();
  private final IndexPopulationJobController jobController=new IndexPopulationJobController(executer);
  @Test public void trackPopulationJobs(){
    assertThat(jobController.getPopulationJobs(),is(empty()));
    IndexPopulationJob populationJob=mock(IndexPopulationJob.class);
    jobController.startIndexPopulation(populationJob);
    assertThat(jobController.getPopulationJobs(),hasSize(1));
    IndexPopulationJob populationJob2=mock(IndexPopulationJob.class);
    jobController.startIndexPopulation(populationJob2);
    assertThat(jobController.getPopulationJobs(),hasSize(2));
  }
  @Test public void stopOngoingPopulationJobs() throws ExecutionException, InterruptedException {
    IndexPopulationJob populationJob=getIndexPopulationJob();
    IndexPopulationJob populationJob2=getIndexPopulationJob();
    jobController.startIndexPopulation(populationJob);
    jobController.startIndexPopulation(populationJob2);
    jobController.stop();
    verify(populationJob).cancel();
    verify(populationJob2).cancel();
  }
  @Test public void untrackFinishedPopulations(){
    IndexPopulationJob populationJob=getIndexPopulationJob();
    jobController.startIndexPopulation(populationJob);
    assertThat(jobController.getPopulationJobs(),hasSize(1));
    executer.runJob();
    assertThat(jobController.getPopulationJobs(),hasSize(0));
    verify(populationJob).run();
  }
  private IndexPopulationJob getIndexPopulationJob(){
    IndexPopulationJob populationJob=mock(IndexPopulationJob.class);
    when(populationJob.cancel()).thenReturn(CompletableFuture.completedFuture(null));
    return populationJob;
  }
}
