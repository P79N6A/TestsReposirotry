public class TestMultipleFilters extends TraversalTestBase {
  private Transaction tx;
  @Before public void setupGraph(){
    createGraph("a TO b","b TO d","b TO e","b TO k","a TO c","c TO f","c TO k");
    tx=beginTx();
  }
  @After public void tearDown(){
    tx.close();
  }
private static class MustBeConnectedToNodeFilter implements Predicate<Path>, Evaluator {
    private final Node node;
    MustBeConnectedToNodeFilter(    Node node){
      this.node=node;
    }
    @Override public boolean test(    Path item){
      ResourceIterable<Relationship> relationships=(ResourceIterable<Relationship>)item.endNode().getRelationships(Direction.OUTGOING);
      try (ResourceIterator<Relationship> iterator=relationships.iterator()){
        while (iterator.hasNext()) {
          Relationship rel=iterator.next();
          if (rel.getEndNode().equals(node)) {
            return true;
          }
        }
        return false;
      }
     }
    @Override public Evaluation evaluate(    Path path){
      return test(path) ? Evaluation.INCLUDE_AND_CONTINUE : Evaluation.EXCLUDE_AND_CONTINUE;
    }
  }
  @Test public void testNarrowingFilters(){
    Evaluator mustBeConnectedToK=new MustBeConnectedToNodeFilter(getNodeWithName("k"));
    Evaluator mustNotHaveMoreThanTwoOutRels=path -> Evaluation.ofIncludes(Iterables.count(path.endNode().getRelationships(Direction.OUTGOING)) <= 2);
    TraversalDescription description=getGraphDb().traversalDescription().evaluator(mustBeConnectedToK);
    expectNodes(description.traverse(node("a")),"b","c");
    expectNodes(description.evaluator(mustNotHaveMoreThanTwoOutRels).traverse(node("a")),"c");
  }
  @Test public void testBroadeningFilters(){
    MustBeConnectedToNodeFilter mustBeConnectedToC=new MustBeConnectedToNodeFilter(getNodeWithName("c"));
    MustBeConnectedToNodeFilter mustBeConnectedToE=new MustBeConnectedToNodeFilter(getNodeWithName("e"));
    expectNodes(getGraphDb().traversalDescription().evaluator(mustBeConnectedToC).traverse(node("a")),"a");
    expectNodes(getGraphDb().traversalDescription().evaluator(mustBeConnectedToC).evaluator(mustBeConnectedToE).traverse(node("a")));
    expectNodes(getGraphDb().traversalDescription().evaluator(includeIfAcceptedByAny(mustBeConnectedToC,mustBeConnectedToE)).traverse(node("a")),"a","b");
  }
}
