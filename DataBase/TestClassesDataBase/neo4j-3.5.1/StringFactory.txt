private static class StringFactory implements TemporalIndexCache.Factory<String> {
  AtomicInteger dateCounter=new AtomicInteger(0);
  AtomicInteger localDateTimeCounter=new AtomicInteger(0);
  AtomicInteger zonedDateTimeCounter=new AtomicInteger(0);
  AtomicInteger localTimeCounter=new AtomicInteger(0);
  AtomicInteger zonedTimeCounter=new AtomicInteger(0);
  AtomicInteger durationCounter=new AtomicInteger(0);
  @Override public String newDate(){
    updateCounterAndAssertSingleUpdate(dateCounter);
    return "Date";
  }
  @Override public String newLocalDateTime(){
    updateCounterAndAssertSingleUpdate(localDateTimeCounter);
    return "LocalDateTime";
  }
  @Override public String newZonedDateTime(){
    updateCounterAndAssertSingleUpdate(zonedDateTimeCounter);
    return "ZonedDateTime";
  }
  @Override public String newLocalTime(){
    updateCounterAndAssertSingleUpdate(localTimeCounter);
    return "LocalTime";
  }
  @Override public String newZonedTime(){
    updateCounterAndAssertSingleUpdate(zonedTimeCounter);
    return "ZonedTime";
  }
  @Override public String newDuration(){
    updateCounterAndAssertSingleUpdate(durationCounter);
    return "Duration";
  }
  private void updateCounterAndAssertSingleUpdate(  AtomicInteger counter){
    int count=counter.incrementAndGet();
    if (count > 1) {
      throw new IllegalStateException("called new on same factory method multiple times");
    }
  }
}
