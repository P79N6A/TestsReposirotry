@ExtendWith({EphemeralFileSystemExtension.class,TestDirectoryExtension.class}) class TestIndexImplOnNeo {
  @Inject private EphemeralFileSystemAbstraction fs;
  @Inject private TestDirectory testDirectory;
  private GraphDatabaseService db;
  @BeforeEach void createDb(){
    db=new TestGraphDatabaseFactory().setFileSystem(new UncloseableDelegatingFileSystemAbstraction(fs)).newImpermanentDatabase(testDirectory.databaseDir());
  }
  private void restartDb(){
    shutdownDb();
    createDb();
  }
  @AfterEach void shutdownDb(){
    db.shutdown();
  }
  @Test void createIndexWithProviderThatUsesNeoAsDataSource(){
    String indexName="inneo";
    assertFalse(indexExists(indexName));
    Map<String,String> config=stringMap(PROVIDER,"test-dummy-neo-index","config1","A value","another config","Another value");
    Index<Node> index;
    try (Transaction transaction=db.beginTx()){
      index=db.index().forNodes(indexName,config);
      transaction.success();
    }
     try (Transaction tx=db.beginTx()){
      assertTrue(indexExists(indexName));
      assertEquals(config,db.index().getConfiguration(index));
      try (IndexHits<Node> indexHits=index.get("key","something else")){
        assertEquals(0,Iterables.count(indexHits));
      }
       tx.success();
    }
     restartDb();
    try (Transaction tx=db.beginTx()){
      assertTrue(indexExists(indexName));
      assertEquals(config,db.index().getConfiguration(index));
      tx.success();
    }
   }
  private boolean indexExists(  String indexName){
    try (Transaction transaction=db.beginTx()){
      boolean exists=db.index().existsForNodes(indexName);
      transaction.success();
      return exists;
    }
   }
}
