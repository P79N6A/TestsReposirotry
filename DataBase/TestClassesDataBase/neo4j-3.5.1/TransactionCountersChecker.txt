class TransactionCountersChecker {
  private final long numberOfActiveReadTransactions;
  private final long numberOfActiveWriteTransactions;
  private final long numberOfActiveTransactions;
  private final long numberOfCommittedReadTransactions;
  private final long numberOfCommittedWriteTransactions;
  private final long numberOfCommittedTransactions;
  private final long numberOfRolledBackReadTransactions;
  private final long numberOfRolledBackWriteTransactions;
  private final long numberOfRolledBackTransactions;
  private final long numberOfStartedTransactions;
  private final long numberOfTerminatedReadTransactions;
  private final long numberOfTerminatedWriteTransactions;
  private final long numberOfTerminatedTransactions;
  private final long peakConcurrentNumberOfTransactions;
  TransactionCountersChecker(  TransactionCounters pre){
    numberOfActiveReadTransactions=pre.getNumberOfActiveReadTransactions();
    numberOfActiveWriteTransactions=pre.getNumberOfActiveWriteTransactions();
    numberOfActiveTransactions=pre.getNumberOfActiveTransactions();
    assertEquals(numberOfActiveTransactions,numberOfActiveReadTransactions + numberOfActiveWriteTransactions);
    numberOfCommittedReadTransactions=pre.getNumberOfCommittedReadTransactions();
    numberOfCommittedWriteTransactions=pre.getNumberOfCommittedWriteTransactions();
    numberOfCommittedTransactions=pre.getNumberOfCommittedTransactions();
    assertEquals(numberOfCommittedTransactions,numberOfCommittedReadTransactions + numberOfCommittedWriteTransactions);
    numberOfRolledBackReadTransactions=pre.getNumberOfRolledBackReadTransactions();
    numberOfRolledBackWriteTransactions=pre.getNumberOfRolledBackWriteTransactions();
    numberOfRolledBackTransactions=pre.getNumberOfRolledBackTransactions();
    assertEquals(numberOfRolledBackTransactions,numberOfRolledBackReadTransactions + numberOfRolledBackWriteTransactions);
    numberOfTerminatedReadTransactions=pre.getNumberOfTerminatedReadTransactions();
    numberOfTerminatedWriteTransactions=pre.getNumberOfTerminatedWriteTransactions();
    numberOfTerminatedTransactions=pre.getNumberOfTerminatedTransactions();
    assertEquals(numberOfTerminatedTransactions,numberOfTerminatedReadTransactions + numberOfTerminatedWriteTransactions);
    numberOfStartedTransactions=pre.getNumberOfStartedTransactions();
    peakConcurrentNumberOfTransactions=pre.getPeakConcurrentNumberOfTransactions();
  }
  public void verifyCommitted(  boolean isWriteTx,  TransactionCounters post){
    verifyActiveAndStarted(post);
    verifyCommittedIncreasedBy(post,1,isWriteTx);
    verifyRolledBackIncreasedBy(post,0,isWriteTx);
    verifyTerminatedIncreasedBy(post,0,isWriteTx);
  }
  public void verifyRolledBacked(  boolean isWriteTx,  TransactionCounters post){
    verifyActiveAndStarted(post);
    verifyCommittedIncreasedBy(post,0,isWriteTx);
    verifyRolledBackIncreasedBy(post,1,isWriteTx);
    verifyTerminatedIncreasedBy(post,0,isWriteTx);
  }
  public void verifyTerminated(  boolean isWriteTx,  TransactionCounters post){
    verifyActiveAndStarted(post);
    verifyCommittedIncreasedBy(post,0,isWriteTx);
    verifyRolledBackIncreasedBy(post,1,isWriteTx);
    verifyTerminatedIncreasedBy(post,1,isWriteTx);
  }
  private void verifyCommittedIncreasedBy(  TransactionCounters post,  int diff,  boolean isWriteTx){
    if (isWriteTx) {
      assertEquals(numberOfCommittedReadTransactions,post.getNumberOfCommittedReadTransactions());
      assertEquals(numberOfCommittedWriteTransactions + diff,post.getNumberOfCommittedWriteTransactions());
    }
 else {
      assertEquals(numberOfCommittedReadTransactions + diff,post.getNumberOfCommittedReadTransactions());
      assertEquals(numberOfCommittedWriteTransactions,post.getNumberOfCommittedWriteTransactions());
    }
    assertEquals(numberOfCommittedTransactions + diff,post.getNumberOfCommittedTransactions());
  }
  private void verifyRolledBackIncreasedBy(  TransactionCounters post,  int diff,  boolean isWriteTx){
    if (isWriteTx) {
      assertEquals(numberOfRolledBackReadTransactions,post.getNumberOfRolledBackReadTransactions());
      assertEquals(numberOfRolledBackWriteTransactions + diff,post.getNumberOfRolledBackWriteTransactions());
    }
 else {
      assertEquals(numberOfRolledBackReadTransactions + diff,post.getNumberOfRolledBackReadTransactions());
      assertEquals(numberOfRolledBackWriteTransactions,post.getNumberOfRolledBackWriteTransactions());
    }
    assertEquals(numberOfRolledBackTransactions + diff,post.getNumberOfRolledBackTransactions());
  }
  private void verifyTerminatedIncreasedBy(  TransactionCounters post,  int diff,  boolean isWriteTx){
    if (isWriteTx) {
      assertEquals(numberOfTerminatedReadTransactions,post.getNumberOfTerminatedReadTransactions());
      assertEquals(numberOfTerminatedWriteTransactions + diff,post.getNumberOfTerminatedWriteTransactions());
    }
 else {
      assertEquals(numberOfTerminatedReadTransactions + diff,post.getNumberOfTerminatedReadTransactions());
      assertEquals(numberOfTerminatedWriteTransactions,post.getNumberOfTerminatedWriteTransactions());
    }
    assertEquals(numberOfTerminatedTransactions + diff,post.getNumberOfTerminatedTransactions());
  }
  private void verifyActiveAndStarted(  TransactionCounters post){
    assertEquals(numberOfActiveReadTransactions,post.getNumberOfActiveReadTransactions());
    assertEquals(numberOfActiveWriteTransactions,post.getNumberOfActiveWriteTransactions());
    assertEquals(numberOfActiveTransactions,post.getNumberOfActiveTransactions());
    assertEquals(numberOfStartedTransactions + 1,post.getNumberOfStartedTransactions());
    assertEquals(Math.max(1,peakConcurrentNumberOfTransactions),post.getPeakConcurrentNumberOfTransactions());
  }
}
