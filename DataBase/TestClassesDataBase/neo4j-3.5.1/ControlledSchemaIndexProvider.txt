/** 
 * A very specific  {@link IndexProvider} which can be paused and continued at juuust the right places.
 */
private static class ControlledSchemaIndexProvider extends KernelExtensionFactory<Supplier> {
  private final Barrier.Control barrier=new Barrier.Control();
  private final Set<Long> entitiesByScan=new ConcurrentSkipListSet<>();
  private final Set<Long> entitiesByUpdater=new ConcurrentSkipListSet<>();
  private volatile long populationAtId;
  static IndexProviderDescriptor INDEX_PROVIDER=new IndexProviderDescriptor("controlled","1");
  ControlledSchemaIndexProvider(){
    super(ExtensionType.DATABASE,"controlled");
  }
  @Override public Lifecycle newInstance(  KernelContext context,  Supplier noDependencies){
    return new IndexProvider(INDEX_PROVIDER,directoriesByProvider(new File("not-even-persistent"))){
      @Override public IndexPopulator getPopulator(      StoreIndexDescriptor descriptor,      IndexSamplingConfig samplingConfig){
        return new IndexPopulator(){
          @Override public void create(){
          }
          @Override public void drop(){
          }
          @Override public void add(          Collection<? extends IndexEntryUpdate<?>> updates){
            for (            IndexEntryUpdate<?> update : updates) {
              boolean added=entitiesByScan.add(update.getEntityId());
              assertTrue(added);
              if (update.getEntityId() > SCAN_BARRIER_NODE_ID_THRESHOLD) {
                populationAtId=update.getEntityId();
                barrier.reached();
              }
            }
          }
          @Override public void verifyDeferredConstraints(          NodePropertyAccessor nodePropertyAccessor){
          }
          @Override public IndexUpdater newPopulatingUpdater(          NodePropertyAccessor nodePropertyAccessor){
            return new IndexUpdater(){
              @Override public void process(              IndexEntryUpdate<?> update){
                boolean added=entitiesByUpdater.add(update.getEntityId());
                assertTrue(added);
              }
              @Override public void close(){
              }
            }
;
          }
          @Override public void close(          boolean populationCompletedSuccessfully){
            assertTrue(populationCompletedSuccessfully);
          }
          @Override public void markAsFailed(          String failure){
            throw new UnsupportedOperationException();
          }
          @Override public void includeSample(          IndexEntryUpdate<?> update){
          }
          @Override public IndexSample sampleResult(){
            return new IndexSample(0,0,0);
          }
        }
;
      }
      @Override public IndexAccessor getOnlineAccessor(      StoreIndexDescriptor descriptor,      IndexSamplingConfig samplingConfig){
        return mock(IndexAccessor.class);
      }
      @Override public String getPopulationFailure(      StoreIndexDescriptor descriptor){
        throw new IllegalStateException();
      }
      @Override public InternalIndexState getInitialState(      StoreIndexDescriptor descriptor){
        return POPULATING;
      }
      @Override public IndexCapability getCapability(      StoreIndexDescriptor descriptor){
        return IndexCapability.NO_CAPABILITY;
      }
      @Override public StoreMigrationParticipant storeMigrationParticipant(      FileSystemAbstraction fs,      PageCache pageCache){
        return NOT_PARTICIPATING;
      }
    }
;
  }
}
