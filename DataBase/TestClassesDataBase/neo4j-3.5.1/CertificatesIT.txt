public class CertificatesIT {
  private static File keyFile;
  private static File certFile;
  private static PkiUtils certFactory;
  private static TransportTestUtil util;
  @Rule public Neo4jWithSocket server=new Neo4jWithSocket(getClass(),settings -> {
    settings.put(tls_certificate_file.name(),certFile.getAbsolutePath());
    settings.put(tls_key_file.name(),keyFile.getAbsolutePath());
    settings.put(new BoltConnector(DEFAULT_CONNECTOR_KEY).type.name(),"BOLT");
    settings.put(new BoltConnector(DEFAULT_CONNECTOR_KEY).enabled.name(),"true");
    settings.put(new BoltConnector(DEFAULT_CONNECTOR_KEY).listen_address.name(),"localhost:0");
  }
);
  @Test public void shouldUseConfiguredCertificate() throws Exception {
    SecureSocketConnection connection=new SecureSocketConnection();
    try {
      connection.connect(server.lookupConnector(DEFAULT_CONNECTOR_KEY)).send(util.acceptedVersions(1,0,0,0));
      Set<X509Certificate> certificatesSeen=connection.getServerCertificatesSeen();
      assertThat(certificatesSeen,contains(loadCertificateFromDisk()));
    }
  finally {
      connection.disconnect();
    }
  }
  private X509Certificate loadCertificateFromDisk() throws CertificateException, IOException {
    Certificate[] certificates=certFactory.loadCertificates(certFile);
    assertThat(certificates.length,equalTo(1));
    return (X509Certificate)certificates[0];
  }
  @BeforeClass public static void setUp() throws IOException, GeneralSecurityException, OperatorCreationException {
    certFactory=new PkiUtils();
    keyFile=File.createTempFile("key","pem");
    certFile=File.createTempFile("key","pem");
    keyFile.deleteOnExit();
    certFile.deleteOnExit();
    keyFile.delete();
    certFile.delete();
    certFactory.createSelfSignedCertificate(certFile,keyFile,"my.domain");
    util=new TransportTestUtil(new Neo4jPackV1());
  }
}
