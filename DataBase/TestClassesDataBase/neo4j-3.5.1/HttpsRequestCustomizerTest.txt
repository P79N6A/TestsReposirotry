public class HttpsRequestCustomizerTest {
  @Test public void shouldSetRequestSchemeToHttps(){
    Customizer customizer=newCustomizer();
    Request request=mock(Request.class);
    customize(customizer,request);
    verify(request).setScheme(HTTPS.asString());
  }
  @Test public void shouldAddHstsHeaderWhenConfigured(){
    String configuredValue="max-age=3600; includeSubDomains";
    Customizer customizer=newCustomizer(configuredValue);
    Request request=newRequest();
    customize(customizer,request);
    String receivedValue=request.getResponse().getHttpFields().get(STRICT_TRANSPORT_SECURITY);
    assertEquals(configuredValue,receivedValue);
  }
  @Test public void shouldNotAddHstsHeaderWhenNotConfigured(){
    Customizer customizer=newCustomizer();
    Request request=newRequest();
    customize(customizer,request);
    String hstsValue=request.getResponse().getHttpFields().get(STRICT_TRANSPORT_SECURITY);
    assertNull(hstsValue);
  }
  private static void customize(  Customizer customizer,  Request request){
    customizer.customize(mock(Connector.class),new HttpConfiguration(),request);
  }
  private static Request newRequest(){
    HttpChannel channel=mock(HttpChannel.class);
    Response response=new Response(channel,mock(HttpOutput.class));
    Request request=new Request(channel,mock(HttpInput.class));
    when(channel.getRequest()).thenReturn(request);
    when(channel.getResponse()).thenReturn(response);
    return request;
  }
  private static Customizer newCustomizer(){
    return newCustomizer(null);
  }
  private static Customizer newCustomizer(  String hstsValue){
    Config config=Config.defaults(ServerSettings.http_strict_transport_security,hstsValue);
    return new HttpsRequestCustomizer(config);
  }
}
