class LuceneAllDocumentsReaderTest {
  private final PartitionSearcher partitionSearcher1=createPartitionSearcher(1,0,2);
  private final PartitionSearcher partitionSearcher2=createPartitionSearcher(2,1,2);
  LuceneAllDocumentsReaderTest() throws IOException {
  }
  @Test void allDocumentsMaxCount(){
    LuceneAllDocumentsReader allDocumentsReader=createAllDocumentsReader();
    assertEquals(3,allDocumentsReader.maxCount());
  }
  @Test void closeCorrespondingSearcherOnClose() throws IOException {
    LuceneAllDocumentsReader allDocumentsReader=createAllDocumentsReader();
    allDocumentsReader.close();
    verify(partitionSearcher1).close();
    verify(partitionSearcher2).close();
  }
  @Test void readAllDocuments(){
    LuceneAllDocumentsReader allDocumentsReader=createAllDocumentsReader();
    List<Document> documents=Iterators.asList(allDocumentsReader.iterator());
    assertEquals(3,documents.size(),"Should have 1 document from first partition and 2 from second one.");
    assertEquals("1",documents.get(0).getField("value").stringValue());
    assertEquals("3",documents.get(1).getField("value").stringValue());
    assertEquals("4",documents.get(2).getField("value").stringValue());
  }
  private LuceneAllDocumentsReader createAllDocumentsReader(){
    return new LuceneAllDocumentsReader(createPartitionReaders());
  }
  private List<LucenePartitionAllDocumentsReader> createPartitionReaders(){
    LucenePartitionAllDocumentsReader reader1=new LucenePartitionAllDocumentsReader(partitionSearcher1);
    LucenePartitionAllDocumentsReader reader2=new LucenePartitionAllDocumentsReader(partitionSearcher2);
    return Arrays.asList(reader1,reader2);
  }
  private static PartitionSearcher createPartitionSearcher(  int maxDoc,  int partition,  int maxSize) throws IOException {
    PartitionSearcher partitionSearcher=mock(PartitionSearcher.class);
    IndexSearcher indexSearcher=mock(IndexSearcher.class);
    IndexReader indexReader=mock(IndexReader.class);
    when(partitionSearcher.getIndexSearcher()).thenReturn(indexSearcher);
    when(indexSearcher.getIndexReader()).thenReturn(indexReader);
    when(indexReader.maxDoc()).thenReturn(maxDoc);
    when(indexSearcher.doc(0)).thenReturn(createDocument(uniqueDocValue(1,partition,maxSize)));
    when(indexSearcher.doc(1)).thenReturn(createDocument(uniqueDocValue(2,partition,maxSize)));
    when(indexSearcher.doc(2)).thenReturn(createDocument(uniqueDocValue(3,partition,maxSize)));
    return partitionSearcher;
  }
  private static String uniqueDocValue(  int value,  int partition,  int maxSize){
    return String.valueOf(value + (partition * maxSize));
  }
  private static Document createDocument(  String value){
    Document document=new Document();
    document.add(new StoredField("value",value));
    return document;
  }
}
