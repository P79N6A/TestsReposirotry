@Ignore("Not a test. This is a compatibility suite, run from LockingCompatibilityTestSuite.") public class CloseCompatibility extends LockingCompatibilityTestSuite.Compatibility {
  public CloseCompatibility(  LockingCompatibilityTestSuite suite){
    super(suite);
  }
  @Test public void shouldNotBeAbleToHandOutClientsIfClosed(){
    try (Client client=locks.newClient()){
      client.acquireExclusive(LockTracer.NONE,ResourceTypes.NODE,0);
    }
     locks.close();
    try {
      locks.newClient();
      fail("Should fail");
    }
 catch (    IllegalStateException e) {
    }
  }
  @Test public void closeShouldWaitAllOperationToFinish(){
    clientA.acquireShared(LockTracer.NONE,NODE,1L);
    clientA.acquireShared(LockTracer.NONE,NODE,3L);
    clientB.acquireShared(LockTracer.NONE,NODE,1L);
    acquireShared(clientC,LockTracer.NONE,NODE,2L);
    acquireExclusive(clientB,LockTracer.NONE,NODE,1L).callAndAssertWaiting();
    acquireExclusive(clientC,LockTracer.NONE,NODE,1L).callAndAssertWaiting();
    clientB.close();
    clientC.close();
    clientA.close();
    LockCountVisitor lockCountVisitor=new LockCountVisitor();
    locks.accept(lockCountVisitor);
    assertEquals(0,lockCountVisitor.getLockCount());
  }
  @Test(expected=LockClientStoppedException.class) public void shouldNotBeAbleToAcquireSharedLockFromClosedClient(){
    clientA.close();
    clientA.acquireShared(LockTracer.NONE,NODE,1L);
  }
  @Test(expected=LockClientStoppedException.class) public void shouldNotBeAbleToAcquireExclusiveLockFromClosedClient(){
    clientA.close();
    clientA.acquireExclusive(LockTracer.NONE,NODE,1L);
  }
  @Test(expected=LockClientStoppedException.class) public void shouldNotBeAbleToTryAcquireSharedLockFromClosedClient(){
    clientA.close();
    clientA.trySharedLock(NODE,1L);
  }
  @Test(expected=LockClientStoppedException.class) public void shouldNotBeAbleToTryAcquireExclusiveLockFromClosedClient(){
    clientA.close();
    clientA.tryExclusiveLock(NODE,1L);
  }
  @Test public void releaseTryLocksOnClose(){
    assertTrue(clientA.trySharedLock(ResourceTypes.NODE,1L));
    assertTrue(clientB.tryExclusiveLock(ResourceTypes.NODE,2L));
    clientA.close();
    clientB.close();
    LockCountVisitor lockCountVisitor=new LockCountVisitor();
    locks.accept(lockCountVisitor);
    assertEquals(0,lockCountVisitor.getLockCount());
  }
}
