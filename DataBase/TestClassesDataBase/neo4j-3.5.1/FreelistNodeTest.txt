class FreelistNodeTest {
  private static final int PAGE_SIZE=128;
  private final PageCursor cursor=ByteArrayPageCursor.wrap(PAGE_SIZE);
  private final FreelistNode freelist=new FreelistNode(PAGE_SIZE);
  private final int maxEntries=freelist.maxEntries();
  @Test void shouldInitializeTreeNode(){
    FreelistNode.initialize(cursor);
    byte nodeType=TreeNode.nodeType(cursor);
    assertEquals(TreeNode.NODE_TYPE_FREE_LIST_NODE,nodeType);
  }
  @Test void shouldNodeOverwriteNodeType(){
    FreelistNode.initialize(cursor);
    byte nodeType=TreeNode.nodeType(cursor);
    assertEquals(TreeNode.NODE_TYPE_FREE_LIST_NODE,nodeType);
    long someId=1234;
    FreelistNode.setNext(cursor,someId);
    nodeType=TreeNode.nodeType(cursor);
    assertEquals(TreeNode.NODE_TYPE_FREE_LIST_NODE,nodeType);
  }
  @Test void shouldSetAndGetNext(){
    long nextId=12345;
    FreelistNode.setNext(cursor,nextId);
    long readNextId=FreelistNode.next(cursor);
    assertEquals(nextId,readNextId);
  }
  @Test void shouldReadAndWriteFreeListEntries(){
    long generationA=34;
    long pointerA=56;
    long generationB=78;
    long pointerB=90;
    freelist.write(cursor,generationA,pointerA,0);
    freelist.write(cursor,generationB,pointerB,1);
    long readPointerA=freelist.read(cursor,generationA + 1,0);
    long readPointerB=freelist.read(cursor,generationB + 1,1);
    assertEquals(pointerA,readPointerA);
    assertEquals(pointerB,readPointerB);
  }
  @Test void shouldFailOnWritingBeyondMaxEntries(){
    assertThrows(IllegalArgumentException.class,() -> freelist.write(cursor,1,10,maxEntries));
  }
  @Test void shouldFailOnWritingTooBigPointer(){
    assertThrows(IllegalArgumentException.class,() -> freelist.write(cursor,1,PageCursorUtil._6B_MASK + 1,0));
  }
  @Test void shouldFailOnWritingTooBigGeneration(){
    assertThrows(IllegalArgumentException.class,() -> freelist.write(cursor,GenerationSafePointer.MAX_GENERATION + 1,1,0));
  }
  @Test void shouldReturnNoPageOnUnstableEntry(){
    long stableGeneration=10;
    long unstableGeneration=stableGeneration + 1;
    long pageId=20;
    int pos=2;
    freelist.write(cursor,unstableGeneration,pageId,pos);
    long read=freelist.read(cursor,stableGeneration,pos);
    assertEquals(FreelistNode.NO_PAGE_ID,read);
  }
}
