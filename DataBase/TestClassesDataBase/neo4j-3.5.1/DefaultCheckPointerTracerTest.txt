public class DefaultCheckPointerTracerTest {
  private final FakeClock clock=Clocks.fakeClock();
  private final Monitor monitor=mock(Monitor.class);
  private final OnDemandJobScheduler jobScheduler=new OnDemandJobScheduler();
  @Test public void shouldCountEventsAnAccumulatedTotalTime(){
    DefaultCheckPointerTracer tracer=new DefaultCheckPointerTracer(clock,monitor,jobScheduler);
    triggerEvent(tracer,20);
    assertEquals(1,tracer.numberOfCheckPointEvents());
    assertEquals(20,tracer.checkPointAccumulatedTotalTimeMillis());
    verify(monitor,times(1)).lastCheckPointEventDuration(20L);
    triggerEvent(tracer,30);
    assertEquals(2,tracer.numberOfCheckPointEvents());
    assertEquals(50,tracer.checkPointAccumulatedTotalTimeMillis());
    verify(monitor,times(1)).lastCheckPointEventDuration(30L);
  }
  @Test public void shouldReturnZeroIfNoDataIsAvailable(){
    DefaultCheckPointerTracer tracer=new DefaultCheckPointerTracer(clock,monitor,jobScheduler);
    jobScheduler.runJob();
    assertEquals(0,tracer.numberOfCheckPointEvents());
    assertEquals(0,tracer.checkPointAccumulatedTotalTimeMillis());
    verifyZeroInteractions(monitor);
  }
  private void triggerEvent(  DefaultCheckPointerTracer tracer,  int eventDuration){
    clock.forward(ThreadLocalRandom.current().nextLong(200),TimeUnit.MILLISECONDS);
    try (LogCheckPointEvent event=tracer.beginCheckPoint()){
      clock.forward(eventDuration,TimeUnit.MILLISECONDS);
    }
     jobScheduler.runJob();
  }
}
