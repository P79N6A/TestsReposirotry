public class AnyValueTestUtil {
  public static void assertEqual(  AnyValue a,  AnyValue b){
    assertEquals(formatMessage("should be equivalent to",a,b),a,b);
    assertEquals(formatMessage("should be equivalent to",b,a),b,a);
    assertTrue(formatMessage("should be equal to",a,b),a.ternaryEquals(b));
    assertTrue(formatMessage("should be equal to",b,a),b.ternaryEquals(a));
    assertEquals(formatMessage("should have same hashcode as",a,b),a.hashCode(),b.hashCode());
  }
  private static String formatMessage(  String should,  AnyValue a,  AnyValue b){
    return String.format("%s(%s) %s %s(%s)",a.getClass().getSimpleName(),a.toString(),should,b.getClass().getSimpleName(),b.toString());
  }
  public static void assertEqualValues(  AnyValue a,  AnyValue b){
    assertEquals(a + " should be equivalent to " + b,a,b);
    assertEquals(a + " should be equivalent to " + b,b,a);
    assertTrue(a + " should be equal to " + b,a.ternaryEquals(b));
    assertTrue(a + " should be equal to " + b,b.ternaryEquals(a));
  }
  public static void assertNotEqual(  AnyValue a,  AnyValue b){
    assertNotEquals(a + " should not be equivalent to " + b,a,b);
    assertNotEquals(b + " should not be equivalent to " + a,b,a);
    assertFalse(a + " should not equal " + b,a.ternaryEquals(b));
    assertFalse(b + " should not equal " + a,b.ternaryEquals(a));
  }
  public static void assertIncomparable(  AnyValue a,  AnyValue b){
    assertNotEquals(a + " should not be equivalent to " + b,a,b);
    assertNotEquals(b + " should not be equivalent to " + a,b,a);
    assertNull(a + " should be incomparable to " + b,a.ternaryEquals(b));
    assertNull(b + " should be incomparable to " + a,b.ternaryEquals(a));
  }
  public static <X extends Exception,T>X assertThrows(  Class<X> exception,  Supplier<T> thunk){
    T value;
    try {
      value=thunk.get();
    }
 catch (    Exception e) {
      if (exception.isInstance(e)) {
        return exception.cast(e);
      }
 else {
        throw new AssertionError("Expected " + exception.getName(),e);
      }
    }
    throw new AssertionError("Expected " + exception.getName() + " but returned: "+ value);
  }
}
