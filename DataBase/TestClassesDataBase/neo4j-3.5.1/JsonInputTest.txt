public class JsonInputTest {
  private final JsonFormat input=new JsonFormat();
  @Test public void canReadEmptyMap() throws Exception {
    Map<String,Object> map=input.readMap("{}");
    assertNotNull(map);
    assertTrue("map is not empty",map.isEmpty());
  }
  @Test public void canReadMapWithTwoValues() throws Exception {
    Map<String,Object> map=input.readMap("{\"key1\":\"value1\",     \"key2\":\"value11\"}");
    assertNotNull(map);
    assertThat(map,hasEntry("key1","value1"));
    assertThat(map,hasEntry("key2","value11"));
    assertEquals("map contained extra values",2,map.size());
  }
  @Test public void canReadMapWithNestedMap() throws Exception {
    Map<String,Object> map=input.readMap("{\"nested\": {\"key\": \"valuable\"}}");
    assertNotNull(map);
    assertThat(map,hasKey("nested"));
    assertEquals("map contained extra values",1,map.size());
    Object nested=map.get("nested");
    assertThat(nested,instanceOf(Map.class));
    @SuppressWarnings("unchecked") Map<String,String> nestedMap=(Map<String,String>)nested;
    assertThat(nestedMap,hasEntry("key","valuable"));
  }
  @Test public void canReadStringWithLineBreaks() throws Exception {
    Map<String,Object> map=input.readMap("{\"key\": \"v1\\nv2\"}");
    assertNotNull(map);
    assertEquals(map.get("key"),"v1\nv2");
  }
}
