public class ExplicitIndexRegressionTest {
  @Rule public final DatabaseRule graphdb=new ImpermanentDatabaseRule();
  @Test public void shouldAccessAndUpdateIndexInSameTransaction(){
    try (Transaction tx=graphdb.beginTx()){
      Index<Node> version=graphdb.index().forNodes("version");
      for (int v=0; v < 10; v++) {
        createNode(version,v);
      }
      tx.success();
    }
   }
  private void createNode(  Index<Node> index,  long version){
    highest("version",index.query(new QueryContext("version:*")));
{
      Node node=graphdb.createNode();
      node.setProperty("version",version);
      index.add(node,"version",version);
    }
{
      Node node=index.get("version",version).getSingle();
      Node current=highest("version",index.get("current","current"));
      if (current != null) {
        index.remove(current,"current");
      }
      index.add(node,"current","current");
    }
  }
  private Node highest(  String key,  IndexHits<Node> query){
    try (IndexHits<Node> hits=query){
      long highestValue=Long.MIN_VALUE;
      Node highestNode=null;
      while (hits.hasNext()) {
        Node node=hits.next();
        long value=((Number)node.getProperty(key)).longValue();
        if (value > highestValue) {
          highestValue=value;
          highestNode=node;
        }
      }
      return highestNode;
    }
   }
}
