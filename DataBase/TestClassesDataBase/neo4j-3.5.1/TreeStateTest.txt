class TreeStateTest {
  private final int pageSize=256;
  private PageAwareByteArrayCursor cursor;
  @BeforeEach void initiateCursor(){
    cursor=new PageAwareByteArrayCursor(pageSize);
    cursor.next();
  }
  @Test void readEmptyStateShouldThrow(){
    TreeState state=TreeState.read(cursor);
    assertFalse(state.isValid());
  }
  @Test void shouldReadValidPage(){
    long pageId=cursor.getCurrentPageId();
    TreeState expected=new TreeState(pageId,1,2,3,4,5,6,7,8,9,true,true);
    write(cursor,expected);
    cursor.rewind();
    TreeState read=TreeState.read(cursor);
    assertEquals(expected,read);
  }
  @Test void readBrokenStateShouldFail(){
    long pageId=cursor.getCurrentPageId();
    TreeState expected=new TreeState(pageId,1,2,3,4,5,6,7,8,9,true,true);
    write(cursor,expected);
    cursor.rewind();
    assertTrue(TreeState.read(cursor).isValid());
    cursor.rewind();
    breakChecksum(cursor);
    TreeState state=TreeState.read(cursor);
    assertFalse(state.isValid());
  }
  @Test void shouldNotWriteInvalidStableGeneration(){
    long generation=GenerationSafePointer.MAX_GENERATION + 1;
    assertThrows(IllegalArgumentException.class,() -> {
      long pageId=cursor.getCurrentPageId();
      write(cursor,new TreeState(pageId,generation,2,3,4,5,6,7,8,9,true,true));
    }
);
  }
  @Test void shouldNotWriteInvalidUnstableGeneration(){
    long generation=GenerationSafePointer.MAX_GENERATION + 1;
    assertThrows(IllegalArgumentException.class,() -> {
      long pageId=cursor.getCurrentPageId();
      write(cursor,new TreeState(pageId,1,generation,3,4,5,6,7,8,9,true,true));
    }
);
  }
  private void breakChecksum(  PageCursor cursor){
    long existing=cursor.getLong(cursor.getOffset());
    cursor.putLong(cursor.getOffset(),~existing);
  }
  private void write(  PageCursor cursor,  TreeState origin){
    TreeState.write(cursor,origin.stableGeneration(),origin.unstableGeneration(),origin.rootId(),origin.rootGeneration(),origin.lastId(),origin.freeListWritePageId(),origin.freeListReadPageId(),origin.freeListWritePos(),origin.freeListReadPos(),origin.isClean());
  }
}
