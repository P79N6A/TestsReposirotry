public class FakeCpuClock extends CpuClock implements TestRule {
  public static final CpuClock NOT_AVAILABLE=new CpuClock(){
    @Override public long cpuTimeNanos(    long threadId){
      return -1;
    }
  }
;
  private final MutableLongLongMap cpuTimes=new LongLongHashMap();
  @Override public long cpuTimeNanos(  long threadId){
    return Math.max(0,cpuTimes.get(threadId));
  }
  public FakeCpuClock add(  long delta,  TimeUnit unit){
    return add(unit.toNanos(delta));
  }
  public FakeCpuClock add(  long nanos){
    return add(Thread.currentThread().getId(),nanos);
  }
  public FakeCpuClock add(  long threadId,  long nanos){
    cpuTimes.put(threadId,cpuTimeNanos(threadId) + nanos);
    return this;
  }
  @Override public Statement apply(  Statement base,  Description description){
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        base.evaluate();
      }
    }
;
  }
}
