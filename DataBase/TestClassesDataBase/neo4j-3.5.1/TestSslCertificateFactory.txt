@ExtendWith(TestDirectoryExtension.class) class TestSslCertificateFactory {
  @Inject private TestDirectory testDirectory;
  @Test void shouldCreateASelfSignedCertificate() throws Exception {
    PkiUtils sslFactory=new PkiUtils();
    File cPath=new File(testDirectory.directory(),"certificate");
    File pkPath=new File(testDirectory.directory(),"key");
    sslFactory.createSelfSignedCertificate(cPath,pkPath,"myhost");
    Certificate[] certificates=sslFactory.loadCertificates(cPath);
    assertThat(certificates.length,is(greaterThan(0)));
    PrivateKey pk=sslFactory.loadPrivateKey(pkPath);
    assertThat(pk,notNullValue());
  }
  @Test void shouldLoadPEMCertificates() throws Throwable {
    SelfSignedCertificate cert=new SelfSignedCertificate("example.com");
    PkiUtils certs=new PkiUtils();
    File pemCertificate=cert.certificate();
    Certificate[] certificates=certs.loadCertificates(pemCertificate);
    assertThat(certificates.length,equalTo(1));
  }
  @Test void shouldLoadPEMPrivateKey() throws Throwable {
    SelfSignedCertificate cert=new SelfSignedCertificate("example.com");
    PkiUtils certs=new PkiUtils();
    File privateKey=cert.privateKey();
    PrivateKey pk=certs.loadPrivateKey(privateKey);
    assertNotNull(pk);
  }
  /** 
 * For backwards-compatibility reasons, we support both PEM-encoded certificates *and* raw binary files containing the certificate data.
 */
  @Test void shouldLoadBinaryCertificates() throws Throwable {
    SelfSignedCertificate cert=new SelfSignedCertificate("example.com");
    PkiUtils certs=new PkiUtils();
    File cPath=testDirectory.file("certificate");
    assertTrue(cPath.createNewFile());
    byte[] raw=certs.loadCertificates(cert.certificate())[0].getEncoded();
    try (FileChannel ch=FileChannel.open(cPath.toPath(),WRITE)){
      FileUtils.writeAll(ch,ByteBuffer.wrap(raw));
    }
     Certificate[] certificates=certs.loadCertificates(cPath);
    assertThat(certificates.length,equalTo(1));
  }
  /** 
 * For backwards-compatibility reasons, we support both PEM-encoded private keys *and* raw binary files containing the private key data
 */
  @Test void shouldLoadBinaryPrivateKey() throws Throwable {
    SelfSignedCertificate cert=new SelfSignedCertificate("example.com");
    PkiUtils certs=new PkiUtils();
    File keyFile=testDirectory.file("certificate");
    assertTrue(keyFile.createNewFile());
    byte[] raw=certs.loadPrivateKey(cert.privateKey()).getEncoded();
    try (FileChannel ch=FileChannel.open(keyFile.toPath(),WRITE)){
      FileUtils.writeAll(ch,ByteBuffer.wrap(raw));
    }
     PrivateKey pk=certs.loadPrivateKey(keyFile);
    assertNotNull(pk);
  }
}
