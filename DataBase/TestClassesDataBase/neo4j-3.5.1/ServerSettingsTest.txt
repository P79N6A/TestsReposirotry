public class ServerSettingsTest {
  @Test public void webServerThreadCountDefaultShouldBeDocumented(){
    Config config=Config.builder().withServerDefaults().build();
    String documentedDefaultValue=config.getConfigValues().entrySet().stream().filter(c -> c.getKey().equals(ServerSettings.webserver_max_threads.name())).map(Entry::getValue).findAny().orElseThrow(() -> new RuntimeException("Setting not present!")).documentedDefaultValue().orElseThrow(() -> new RuntimeException("Default value not present!"));
    assertEquals("Number of available processors, or 500 for machines which have more than 500 processors.",documentedDefaultValue);
  }
  @Test public void configValuesContainsConnectors(){
    Config config=Config.builder().withServerDefaults().build();
    List<String> connectorSettings=config.getConfigValues().entrySet().stream().map(Entry::getKey).filter(c -> c.startsWith("dbms.connector")).filter(c -> c.endsWith(".enabled")).collect(toList());
    assertThat(connectorSettings,containsInAnyOrder("dbms.connector.http.enabled","dbms.connector.https.enabled","dbms.connector.bolt.enabled"));
  }
  @Test public void connectorSettingHasItsOwnValues(){
    Config config=Config.builder().withServerDefaults().withSetting(new HttpConnector("http").address,"localhost:123").build();
    ConfigValue address=config.getConfigValues().entrySet().stream().filter(c -> c.getKey().equals("dbms.connector.http.address")).map(Entry::getValue).findAny().orElseThrow(() -> new RuntimeException("Setting not present!"));
    assertTrue(address.deprecated());
    assertEquals(Optional.of("dbms.connector.http.listen_address"),address.replacement());
  }
}
