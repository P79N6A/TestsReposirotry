public class HTTPLoggingIT extends ExclusiveServerTestBase {
  private final ExpectedException exception=ExpectedException.none();
  private final TestDirectory testDirectory=TestDirectory.testDirectory();
  private final TestName testName=new TestName();
  @Rule public RuleChain ruleChain=RuleChain.outerRule(exception).around(testName).around(testDirectory);
  @Test public void givenExplicitlyDisabledServerLoggingConfigurationShouldNotLogAccesses() throws Exception {
    String directoryPrefix=testName.getMethodName();
    File logDirectory=testDirectory.directory(directoryPrefix + "-logdir");
    NeoServer server=serverOnRandomPorts().withDefaultDatabaseTuning().persistent().withProperty(ServerSettings.http_logging_enabled.name(),Settings.FALSE).withProperty(GraphDatabaseSettings.logs_directory.name(),logDirectory.toString()).withProperty(new BoltConnector("bolt").listen_address.name(),":0").usingDataDir(testDirectory.directory(directoryPrefix + "-dbdir").getAbsolutePath()).build();
    try {
      server.start();
      FunctionalTestHelper functionalTestHelper=new FunctionalTestHelper(server);
      String query="?implicitlyDisabled" + randomString();
      JaxRsResponse response=new RestRequest().get(functionalTestHelper.managementUri() + query);
      assertThat(response.getStatus(),is(HttpStatus.SC_OK));
      response.close();
      File httpLog=new File(logDirectory,"http.log");
      assertThat(httpLog.exists(),is(false));
    }
  finally {
      server.stop();
    }
  }
  @Test public void givenExplicitlyEnabledServerLoggingConfigurationShouldLogAccess() throws Exception {
    String directoryPrefix=testName.getMethodName();
    File logDirectory=testDirectory.directory(directoryPrefix + "-logdir");
    final String query="?explicitlyEnabled=" + randomString();
    NeoServer server=serverOnRandomPorts().withDefaultDatabaseTuning().persistent().withProperty(ServerSettings.http_logging_enabled.name(),Settings.TRUE).withProperty(GraphDatabaseSettings.logs_directory.name(),logDirectory.getAbsolutePath()).withProperty(new BoltConnector("bolt").listen_address.name(),":0").usingDataDir(testDirectory.directory(directoryPrefix + "-dbdir").getAbsolutePath()).build();
    try {
      server.start();
      FunctionalTestHelper functionalTestHelper=new FunctionalTestHelper(server);
      JaxRsResponse response=new RestRequest().get(functionalTestHelper.managementUri() + query);
      assertThat(response.getStatus(),is(HttpStatus.SC_OK));
      response.close();
      File httpLog=new File(logDirectory,"http.log");
      assertEventually("request appears in log",fileContentSupplier(httpLog),containsString(query),5,TimeUnit.SECONDS);
    }
  finally {
      server.stop();
    }
  }
  private ThrowingSupplier<String,IOException> fileContentSupplier(  final File file){
    return () -> readTextFile(file,StandardCharsets.UTF_8);
  }
  private String randomString(){
    return UUID.randomUUID().toString();
  }
}
