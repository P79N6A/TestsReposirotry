public class BoltMatchers {
  private BoltMatchers(){
  }
  public static Matcher<RecordedBoltResponse> succeeded(){
    return new BaseMatcher<RecordedBoltResponse>(){
      @Override public boolean matches(      final Object item){
        final RecordedBoltResponse response=(RecordedBoltResponse)item;
        return response.message() == SUCCESS;
      }
      @Override public void describeTo(      Description description){
        description.appendValue(SUCCESS);
      }
    }
;
  }
  public static Matcher<RecordedBoltResponse> succeededWithMetadata(  final String key,  final String value){
    return succeededWithMetadata(key,stringValue(value));
  }
  public static Matcher<RecordedBoltResponse> succeededWithMetadata(  final String key,  final AnyValue value){
    return new BaseMatcher<RecordedBoltResponse>(){
      @Override public boolean matches(      final Object item){
        final RecordedBoltResponse response=(RecordedBoltResponse)item;
        return response.message() == SUCCESS && response.hasMetadata(key) && response.metadata(key).equals(value);
      }
      @Override public void describeTo(      Description description){
        description.appendValue(SUCCESS).appendText(format(" with metadata %s = %s",key,value.toString()));
      }
    }
;
  }
  public static Matcher<RecordedBoltResponse> containsRecord(  final Object... values){
    return new BaseMatcher<RecordedBoltResponse>(){
      private AnyValue[] anyValues=Arrays.stream(values).map(ValueUtils::of).toArray(AnyValue[]::new);
      @Override public boolean matches(      final Object item){
        final RecordedBoltResponse response=(RecordedBoltResponse)item;
        QueryResult.Record[] records=response.records();
        return records.length > 0 && Arrays.equals(records[0].fields(),anyValues);
      }
      @Override public void describeTo(      Description description){
        description.appendText(format("with record %s",values));
      }
    }
;
  }
  public static Matcher<RecordedBoltResponse> succeededWithRecord(  final Object... values){
    return new BaseMatcher<RecordedBoltResponse>(){
      private AnyValue[] anyValues=Arrays.stream(values).map(ValueUtils::of).toArray(AnyValue[]::new);
      @Override public boolean matches(      final Object item){
        final RecordedBoltResponse response=(RecordedBoltResponse)item;
        QueryResult.Record[] records=response.records();
        return response.message() == SUCCESS && Arrays.equals(records[0].fields(),anyValues);
      }
      @Override public void describeTo(      Description description){
        description.appendValue(SUCCESS).appendText(format(" with record %s",values));
      }
    }
;
  }
  public static Matcher<RecordedBoltResponse> succeededWithMetadata(  final String key,  final Pattern pattern){
    return new BaseMatcher<RecordedBoltResponse>(){
      @Override public boolean matches(      final Object item){
        final RecordedBoltResponse response=(RecordedBoltResponse)item;
        return response.message() == SUCCESS && response.hasMetadata(key) && pattern.matcher(((TextValue)response.metadata(key)).stringValue()).matches();
      }
      @Override public void describeTo(      Description description){
        description.appendValue(SUCCESS).appendText(format(" with metadata %s ~ %s",key,pattern.toString()));
      }
    }
;
  }
  public static Matcher<RecordedBoltResponse> wasIgnored(){
    return new BaseMatcher<RecordedBoltResponse>(){
      @Override public boolean matches(      final Object item){
        final RecordedBoltResponse response=(RecordedBoltResponse)item;
        return response.message() == IGNORED;
      }
      @Override public void describeTo(      Description description){
        description.appendValue(IGNORED);
      }
    }
;
  }
  public static Matcher<RecordedBoltResponse> failedWithStatus(  Status status){
    return new BaseMatcher<RecordedBoltResponse>(){
      @Override public boolean matches(      final Object item){
        final RecordedBoltResponse response=(RecordedBoltResponse)item;
        return response.message() == FAILURE && response.hasMetadata("code") && response.metadata("code").equals(stringValue(status.code().serialize()));
      }
      @Override public void describeTo(      Description description){
        description.appendValue(FAILURE).appendText(format(" with status code %s",status.code().serialize()));
      }
    }
;
  }
  public static Matcher<BoltStateMachine> hasTransaction(){
    return new BaseMatcher<BoltStateMachine>(){
      @Override public boolean matches(      final Object item){
        final BoltStateMachineV1 machine=(BoltStateMachineV1)item;
        final StatementProcessor statementProcessor=machine.statementProcessor();
        return statementProcessor != null && statementProcessor.hasTransaction();
      }
      @Override public void describeTo(      Description description){
        description.appendText("no transaction");
      }
    }
;
  }
  public static Matcher<BoltStateMachine> hasNoTransaction(){
    return new BaseMatcher<BoltStateMachine>(){
      @Override public boolean matches(      final Object item){
        final BoltStateMachineV1 machine=(BoltStateMachineV1)item;
        final StatementProcessor statementProcessor=machine.statementProcessor();
        return statementProcessor == null || !statementProcessor.hasTransaction();
      }
      @Override public void describeTo(      Description description){
        description.appendText("no transaction");
      }
    }
;
  }
  public static Matcher<BoltStateMachine> inState(  Class<? extends BoltStateMachineState> stateClass){
    return new BaseMatcher<BoltStateMachine>(){
      @Override public boolean matches(      final Object item){
        return stateClass.isInstance(((BoltStateMachineV1)item).state());
      }
      @Override public void describeTo(      Description description){
        description.appendText("can reset");
      }
    }
;
  }
  public static Matcher<BoltStateMachine> isClosed(){
    return new BaseMatcher<BoltStateMachine>(){
      @Override public boolean matches(      final Object item){
        final BoltStateMachine machine=(BoltStateMachine)item;
        return machine.isClosed();
      }
      @Override public void describeTo(      Description description){
        description.appendText("can reset");
      }
    }
;
  }
  public static Matcher<BoltStateMachine> canReset(){
    return new BaseMatcher<BoltStateMachine>(){
      @Override public boolean matches(      final Object item){
        final BoltStateMachine machine=(BoltStateMachine)item;
        final BoltResponseRecorder recorder=new BoltResponseRecorder();
        try {
          machine.process(ResetMessage.INSTANCE,recorder);
          return recorder.responseCount() == 1 && inState(ReadyState.class).matches(item);
        }
 catch (        BoltConnectionFatality boltConnectionFatality) {
          return false;
        }
      }
      @Override public void describeTo(      Description description){
        description.appendText("can reset");
      }
    }
;
  }
  public static void verifyKillsConnection(  ThrowingAction<BoltConnectionFatality> action){
    try {
      action.apply();
      fail("should have killed the connection");
    }
 catch (    BoltConnectionFatality fatality) {
    }
  }
  public static void verifyOneResponse(  ThrowingBiConsumer<BoltStateMachine,BoltResponseRecorder,BoltConnectionFatality> transition) throws Exception {
    BoltStateMachine machine=newMachine();
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    try {
      transition.accept(machine,recorder);
    }
 catch (    BoltConnectionFatality connectionFatality) {
    }
    assertEquals(1,recorder.responseCount());
  }
}
