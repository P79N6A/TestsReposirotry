/** 
 * @author Anton Persson
 */
@RunWith(Parameterized.class) public class TestBestFirstSelectorFactory extends Neo4jAlgoTestCase {
  @Before public void buildGraph(){
    graph.makePathWithRelProperty(length,"a-1-b-2-d");
    graph.makePathWithRelProperty(length,"a-2-c-4-b");
  }
  @Test public void shouldDoWholeTraversalInCorrectOrder(){
    Node a=graph.getNode("a");
    Traverser traverser=new MonoDirectionalTraversalDescription().expand(expander).order(factory).uniqueness(uniqueness).traverse(a);
    ResourceIterator<Path> iterator=traverser.iterator();
    int i=0;
    while (iterator.hasNext()) {
      assertPath(iterator.next(),expectedResult[i]);
      i++;
    }
    assertEquals(String.format("Not all expected paths where traversed. Missing paths are %s\n",Arrays.toString(Arrays.copyOfRange(expectedResult,i,expectedResult.length))),expectedResult.length,i);
  }
  @Parameterized.Parameters public static Collection<Object[]> data(){
    return Arrays.asList(new Object[][]{{PathExpanders.allTypesAndDirections(),PathInterestFactory.all(),Uniqueness.NODE_PATH,new String[]{"a","a,b","a,c","a,b,d","a,b,c","a,c,b","a,c,b,d"}},{PathExpanders.allTypesAndDirections(),PathInterestFactory.allShortest(),Uniqueness.NODE_PATH,new String[]{"a","a,b","a,c","a,b,d"}},{PathExpanders.forDirection(Direction.OUTGOING),PathInterestFactory.all(),Uniqueness.NODE_PATH,new String[]{"a","a,b","a,c","a,b,d","a,c,b","a,c,b,d"}},{PathExpanders.allTypesAndDirections(),PathInterestFactory.all(),Uniqueness.NODE_GLOBAL,new String[]{"a","a,b","a,c","a,b,d"}},{PathExpanders.allTypesAndDirections(),PathInterestFactory.all(),Uniqueness.RELATIONSHIP_GLOBAL,new String[]{"a","a,b","a,c","a,b,d","a,b,c"}}});
  }
  private final String length="length";
  private final PathExpander expander;
  private final Uniqueness uniqueness;
  private final String[] expectedResult;
  private final BestFirstSelectorFactory<Integer,Integer> factory;
  public TestBestFirstSelectorFactory(  PathExpander expander,  PathInterest<Integer> interest,  Uniqueness uniqueness,  String[] expectedResult){
    this.expander=expander;
    this.uniqueness=uniqueness;
    this.expectedResult=expectedResult;
    factory=new BestFirstSelectorFactory<Integer,Integer>(interest){
      private final CostEvaluator<Integer> evaluator=CommonEvaluators.intCostEvaluator(length);
      @Override protected Integer getStartData(){
        return 0;
      }
      @Override protected Integer addPriority(      TraversalBranch source,      Integer currentAggregatedValue,      Integer value){
        return value + currentAggregatedValue;
      }
      @Override protected Integer calculateValue(      TraversalBranch next){
        return next.length() == 0 ? 0 : evaluator.getCost(next.lastRelationship(),Direction.BOTH);
      }
    }
;
  }
}
