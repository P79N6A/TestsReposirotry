@RunWith(Parameterized.class) public class KernelTransactionAssertOpenTest extends KernelTransactionTestBase {
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Parameterized.Parameter(0) public String name;
  @Parameterized.Parameter(1) public Operation transactionOperation;
  @Parameterized.Parameters(name="{0}") public static Collection<Object[]> parameters(){
    return Arrays.asList(operation("nodeExists",(read,write,schema) -> read.nodeExists(0)),operation("singleRelationship",(read,write,schema) -> read.singleRelationship(0,null)),operation("nodeCreate",(read,write,schema) -> write.nodeCreate()),operation("relationshipSetProperty",(read,write,schema) -> write.relationshipSetProperty(0,2,Values.longValue(42))),operation("indexesGetAll",(read,write,schema) -> schema.indexesGetAll()));
  }
  private static Object[] operation(  String name,  Operation op){
    return new Object[]{name,op};
  }
  @Test(expected=TransactionTerminatedException.class) public void shouldThrowTerminateExceptionWhenTransactionTerminated() throws KernelException {
    KernelTransaction transaction=newTransaction(AnonymousContext.write());
    transaction.success();
    transaction.markForTermination(Status.General.UnknownError);
    transactionOperation.operate(transaction.dataRead(),transaction.dataWrite(),transaction.schemaRead());
  }
  @Test(expected=NotInTransactionException.class) public void shouldThrowNotInTransactionWhenTransactionClosedAndAccessingOperations() throws KernelException {
    KernelTransaction transaction=newTransaction(AnonymousContext.write());
    transaction.success();
    transaction.close();
    transactionOperation.operate(transaction.dataRead(),transaction.dataWrite(),transaction.schemaRead());
  }
  @Test(expected=NotInTransactionException.class) public void shouldThrowNotInTransactionWhenTransactionClosedAndAttemptingOperations() throws KernelException {
    KernelTransaction transaction=newTransaction(AnonymousContext.write());
    Read read=transaction.dataRead();
    Write write=transaction.dataWrite();
    SchemaRead schemaRead=transaction.schemaRead();
    transaction.success();
    transaction.close();
    transactionOperation.operate(read,write,schemaRead);
  }
interface Operation {
    void operate(    Read read,    Write write,    SchemaRead schemaRead) throws KernelException ;
  }
}
