public class AuthorizationWhitelistIT extends ExclusiveServerTestBase {
  private CommunityNeoServer server;
  @Test public void shouldWhitelistBrowser() throws Exception {
    assumeTrue(browserIsLoaded());
    server=CommunityServerBuilder.serverOnRandomPorts().withProperty(GraphDatabaseSettings.auth_enabled.name(),"true").build();
    server.start();
    HTTP.Response response=HTTP.GET(server.baseUri().resolve("browser/index.html").toString());
    assertThat(response.status(),equalTo(200));
  }
  @Test public void shouldNotWhitelistConsoleService() throws Exception {
    server=CommunityServerBuilder.serverOnRandomPorts().withProperty(GraphDatabaseSettings.auth_enabled.name(),"true").build();
    server.start();
    HTTP.Response response=HTTP.GET(server.baseUri().resolve("db/manage/server/console").toString());
    assertThat(response.status(),equalTo(401));
  }
  @Test public void shouldNotWhitelistDB() throws Exception {
    server=CommunityServerBuilder.serverOnRandomPorts().withProperty(GraphDatabaseSettings.auth_enabled.name(),"true").build();
    server.start();
    HTTP.Response response=HTTP.GET(HTTP.GET(server.baseUri().resolve("db/data").toString()).location());
    assertThat(response.status(),equalTo(401));
  }
  @After public void cleanup(){
    if (server != null) {
      server.stop();
    }
  }
  private boolean browserIsLoaded(){
    return getClass().getClassLoader().getResource("browser") != null;
  }
}
