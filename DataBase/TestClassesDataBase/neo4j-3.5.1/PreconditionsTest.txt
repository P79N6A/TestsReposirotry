class PreconditionsTest {
  @Test void requirePositiveOk(){
    requirePositive(1);
  }
  @Test void requirePositiveFailsOnZero(){
    assertThrows(IllegalArgumentException.class,() -> Preconditions.requirePositive(0));
  }
  @Test void requirePositiveFailsOnNegative(){
    assertThrows(IllegalArgumentException.class,() -> requirePositive(-1));
  }
  @Test void requireNonNegativeOk(){
    Preconditions.requireNonNegative(0);
    Preconditions.requireNonNegative(1);
  }
  @Test void requireNonNegativeFailsOnNegative(){
    assertThrows(IllegalArgumentException.class,() -> Preconditions.requireNonNegative(-1));
  }
  @Test void checkStateOk(){
    Preconditions.checkState(true,"must not fail");
  }
  @Test void checkStateFails(){
    assertThrows(IllegalStateException.class,() -> Preconditions.checkState(false,"must fail"));
  }
  @Test void requirePowerOfTwo(){
    assertEquals(1,Preconditions.requirePowerOfTwo(1));
    assertEquals(2,Preconditions.requirePowerOfTwo(2));
    assertEquals(128,Preconditions.requirePowerOfTwo(128));
    assertEquals(0b01000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000L,Preconditions.requirePowerOfTwo(0b01000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000L));
    assertThrows(IllegalArgumentException.class,() -> Preconditions.requirePowerOfTwo(-1),"negative");
    assertThrows(IllegalArgumentException.class,() -> Preconditions.requirePowerOfTwo(0),"zero");
    assertThrows(IllegalArgumentException.class,() -> Preconditions.requirePowerOfTwo(3),"three");
    assertThrows(IllegalArgumentException.class,() -> Preconditions.requirePowerOfTwo(0b10000000_00000000_00000000_00000000_00000000_00000000_00000000_00000000L),"sign bit");
  }
}
