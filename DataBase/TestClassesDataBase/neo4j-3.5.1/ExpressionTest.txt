public class ExpressionTest {
  @Test public void shouldNegateTrueToFalse(){
    assertSame(FALSE,not(TRUE));
    assertSame(TRUE,not(FALSE));
  }
  @Test public void shouldRemoveDoubleNegation(){
    Expression expression=invoke(methodReference(getClass(),boolean.class,"TRUE"));
    assertSame(expression,not(not(expression)));
  }
  @Test public void shouldOptimizeNullChecks(){
    ExpressionVisitor visitor=mock(ExpressionVisitor.class);
    Expression expression=invoke(methodReference(getClass(),Object.class,"value"));
    equal(expression,NULL).accept(visitor);
    verify(visitor).isNull(expression);
    reset(visitor);
    equal(NULL,expression).accept(visitor);
    verify(visitor).isNull(expression);
    reset(visitor);
    not(equal(expression,NULL)).accept(visitor);
    verify(visitor).notNull(expression);
    reset(visitor);
    not(equal(NULL,expression)).accept(visitor);
    verify(visitor).notNull(expression);
  }
  @Test public void shouldOptimizeNegatedInequalities(){
    ExpressionVisitor visitor=mock(ExpressionVisitor.class);
    Expression expression=invoke(methodReference(getClass(),Object.class,"value"));
    not(gt(expression,expression)).accept(visitor);
    verify(visitor).lte(expression,expression);
    reset(visitor);
    not(gte(expression,expression)).accept(visitor);
    verify(visitor).lt(expression,expression);
    reset(visitor);
    not(lt(expression,expression)).accept(visitor);
    verify(visitor).gte(expression,expression);
    reset(visitor);
    not(lte(expression,expression)).accept(visitor);
    verify(visitor).gt(expression,expression);
    reset(visitor);
    not(equal(expression,expression)).accept(visitor);
    verify(visitor).notEqual(expression,expression);
    reset(visitor);
    not(notEqual(expression,expression)).accept(visitor);
    verify(visitor).equal(expression,expression);
  }
  @Test public void shouldOptimizeBooleanCombinationsWithConstants(){
    Expression expression=invoke(methodReference(getClass(),boolean.class,"TRUE"));
    assertSame(expression,and(expression,TRUE));
    assertSame(expression,and(TRUE,expression));
    assertSame(FALSE,and(expression,FALSE));
    assertSame(FALSE,and(FALSE,expression));
    assertSame(expression,or(expression,FALSE));
    assertSame(expression,or(FALSE,expression));
    assertSame(TRUE,or(expression,TRUE));
    assertSame(TRUE,or(TRUE,expression));
  }
  public static boolean TRUE(){
    return true;
  }
  public static Object value(){
    return null;
  }
}
