public class IndexProvidedValuesNativeBTree10Test extends KernelAPIReadTestBase<ReadTestSupport> {
  @SuppressWarnings("FieldCanBeLocal") private static int N_NODES=10000;
  @Rule public RandomRule randomRule=new RandomRule();
  private List<Value> singlePropValues=new ArrayList<>();
  private List<ValueTuple> doublePropValues=new ArrayList<>();
  @Override public ReadTestSupport newTestSupport(){
    ReadTestSupport readTestSupport=new ReadTestSupport();
    readTestSupport.addSetting(GraphDatabaseSettings.default_schema_provider,GraphDatabaseSettings.SchemaIndex.NATIVE_BTREE10.providerName());
    return readTestSupport;
  }
  @Override public void createTestGraph(  GraphDatabaseService graphDb){
    try (Transaction tx=graphDb.beginTx()){
      graphDb.schema().indexFor(label("Node")).on("prop").create();
      graphDb.schema().indexFor(label("Node")).on("prop").on("prip").create();
      tx.success();
    }
     try (Transaction tx=graphDb.beginTx()){
      graphDb.schema().awaitIndexesOnline(5,MINUTES);
      tx.success();
    }
     try (Transaction tx=graphDb.beginTx()){
      RandomValues randomValues=randomRule.randomValues();
      ValueType[] allExceptNonSortable=RandomValues.excluding(ValueType.STRING,ValueType.STRING_ARRAY);
      for (int i=0; i < N_NODES; i++) {
        Node node=graphDb.createNode(label("Node"));
        Value propValue=randomValues.nextValueOfTypes(allExceptNonSortable);
        node.setProperty("prop",propValue.asObject());
        Value pripValue=randomValues.nextValue();
        node.setProperty("prip",pripValue.asObject());
        singlePropValues.add(propValue);
        doublePropValues.add(ValueTuple.of(propValue,pripValue));
      }
      tx.success();
    }
     singlePropValues.sort(Values.COMPARATOR);
    doublePropValues.sort(ValueTuple.COMPARATOR);
  }
  @Test public void shouldGetAllSinglePropertyValues() throws Exception {
    int label=token.nodeLabel("Node");
    int prop=token.propertyKey("prop");
    IndexReference index=schemaRead.index(label,prop);
    try (NodeValueIndexCursor node=cursors.allocateNodeValueIndexCursor()){
      read.nodeIndexScan(index,node,IndexOrder.NONE,true);
      List<Value> values=new ArrayList<>();
      while (node.next()) {
        values.add(node.propertyValue(0));
      }
      values.sort(Values.COMPARATOR);
      for (int i=0; i < singlePropValues.size(); i++) {
        assertEquals(singlePropValues.get(i),values.get(i));
      }
    }
   }
  @Test public void shouldGetAllDoublePropertyValues() throws Exception {
    int label=token.nodeLabel("Node");
    int prop=token.propertyKey("prop");
    int prip=token.propertyKey("prip");
    IndexReference index=schemaRead.index(label,prop,prip);
    try (NodeValueIndexCursor node=cursors.allocateNodeValueIndexCursor()){
      read.nodeIndexScan(index,node,IndexOrder.NONE,true);
      List<ValueTuple> values=new ArrayList<>();
      while (node.next()) {
        values.add(ValueTuple.of(node.propertyValue(0),node.propertyValue(1)));
      }
      values.sort(ValueTuple.COMPARATOR);
      for (int i=0; i < doublePropValues.size(); i++) {
        assertEquals(doublePropValues.get(i),values.get(i));
      }
    }
   }
}
