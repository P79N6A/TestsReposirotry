private static class ExceptionThrowingEventHandler implements TransactionEventHandler<Object> {
  private final Exception beforeCommitException;
  private final Exception afterCommitException;
  private final Exception afterRollbackException;
  ExceptionThrowingEventHandler(  Exception exceptionForAll){
    this(exceptionForAll,exceptionForAll,exceptionForAll);
  }
  ExceptionThrowingEventHandler(  Exception beforeCommitException,  Exception afterCommitException,  Exception afterRollbackException){
    this.beforeCommitException=beforeCommitException;
    this.afterCommitException=afterCommitException;
    this.afterRollbackException=afterRollbackException;
  }
  @Override public Object beforeCommit(  TransactionData data) throws Exception {
    if (beforeCommitException != null) {
      throw beforeCommitException;
    }
    return null;
  }
  @Override public void afterCommit(  TransactionData data,  Object state){
    if (afterCommitException != null) {
      throw new RuntimeException(afterCommitException);
    }
  }
  @Override public void afterRollback(  TransactionData data,  Object state){
    if (afterRollbackException != null) {
      throw new RuntimeException(afterRollbackException);
    }
  }
}
