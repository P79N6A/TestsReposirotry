class PrimitiveLongStackTest {
  @Test void shouldPushAndPollSomeEntities(){
    PrimitiveLongStack stack=new PrimitiveLongStack(6);
    assertTrue(stack.isEmpty());
    assertEquals(-1,stack.poll());
    stack.push(123);
    assertFalse(stack.isEmpty());
    stack.push(456);
    assertFalse(stack.isEmpty());
    assertEquals(456,stack.poll());
    assertFalse(stack.isEmpty());
    assertEquals(123,stack.poll());
    assertTrue(stack.isEmpty());
    assertEquals(-1,stack.poll());
  }
  @Test void shouldGrowArray(){
    PrimitiveLongStack stack=new PrimitiveLongStack(5);
    for (int i=0; i <= 7; i++) {
      stack.push(i);
    }
    for (int i=7; i >= 0; i--) {
      assertFalse(stack.isEmpty());
      assertEquals(i,stack.poll());
    }
    assertTrue(stack.isEmpty());
    assertEquals(-1,stack.poll());
  }
  @Test void shouldStoreLongs(){
    PrimitiveLongStack stack=new PrimitiveLongStack(5);
    long value1=10L * Integer.MAX_VALUE;
    long value2=101L * Integer.MAX_VALUE;
    stack.push(value1);
    stack.push(value2);
    long firstPolledValue=stack.poll();
    long secondPolledValue=stack.poll();
    assertEquals(value2,firstPolledValue);
    assertEquals(value1,secondPolledValue);
    assertTrue(stack.isEmpty());
  }
  @Test void shouldIterate(){
    PrimitiveLongStack stack=new PrimitiveLongStack();
    for (int i=0; i < 7; i++) {
      stack.push(i);
    }
    PrimitiveLongIterator iterator=stack.iterator();
    long i=0;
    while (iterator.hasNext()) {
      assertEquals(i++,iterator.next());
    }
    assertEquals(7L,i);
  }
}
