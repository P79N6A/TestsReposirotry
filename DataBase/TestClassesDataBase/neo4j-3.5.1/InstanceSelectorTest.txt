public class InstanceSelectorTest {
  @Test public void shouldSelect(){
    InstanceSelector<String> selector=selector(NUMBER,"0",STRING,"1");
    String select0=selector.select(NUMBER);
    assertEquals("0",select0);
    String select1=selector.select(STRING);
    assertEquals("1",select1);
  }
  @Test public void shouldThrowOnNonInstantiatedSelect(){
    InstanceSelector<String> selector=selector(NUMBER,"0");
    try {
      selector.select(STRING);
      fail("Should have failed");
    }
 catch (    IllegalStateException e) {
    }
  }
  @Test public void shouldThrowOnNonInstantiatedFlatMap(){
    InstanceSelector<String> selector=selector(NUMBER,"0");
    try {
      selector.transform(Integer::parseInt);
      fail("Should have failed");
    }
 catch (    IllegalStateException e) {
    }
  }
  @Test public void shouldThrowOnNonInstantiatedMap(){
    InstanceSelector<String> selector=selector(NUMBER,"0");
    try {
      selector.map(Integer::parseInt);
      fail("Should have failed");
    }
 catch (    IllegalStateException e) {
    }
  }
  @Test public void shouldFlatMap(){
    InstanceSelector<String> selector=selectorFilledWithOrdinal();
    List<Integer> actual=Iterables.asList(selector.transform(Integer::parseInt));
    List<Integer> expected=Arrays.stream(IndexSlot.values()).map(Enum::ordinal).collect(Collectors.toList());
    assertEquals(expected.size(),actual.size());
    for (    Integer i : expected) {
      assertTrue(actual.contains(i));
    }
  }
  @Test public void shouldMap(){
    InstanceSelector<String> selector=selectorFilledWithOrdinal();
    EnumMap<IndexSlot,Integer> actual=selector.map(Integer::parseInt);
    for (    IndexSlot slot : IndexSlot.values()) {
      assertEquals(slot.ordinal(),actual.get(slot).intValue());
    }
  }
  @SuppressWarnings("ResultOfMethodCallIgnored") @Test public void shouldThrowOnNonInstantiatedForAll(){
    InstanceSelector<String> selector=selector(NUMBER,"0");
    try {
      selector.forAll(Integer::parseInt);
      fail("Should have failed");
    }
 catch (    IllegalStateException e) {
    }
  }
  @Test public void shouldForAll(){
    InstanceSelector<String> selector=selectorFilledWithOrdinal();
    MutableInt count=new MutableInt();
    selector.forAll(s -> count.increment());
    assertEquals(IndexSlot.values().length,count.intValue());
  }
  @SuppressWarnings("ResultOfMethodCallIgnored") @Test public void shouldNotThrowOnNonInstantiatedClose(){
    InstanceSelector<String> selector=selector(NUMBER,"0");
    selector.close(Integer::parseInt);
  }
  @Test public void shouldCloseAll(){
    InstanceSelector<String> selector=selectorFilledWithOrdinal();
    MutableInt count=new MutableInt();
    selector.close(s -> count.increment());
    assertEquals(IndexSlot.values().length,count.intValue());
  }
  private InstanceSelector<String> selector(  Object... mapping){
    EnumMap<IndexSlot,String> map=new EnumMap<>(IndexSlot.class);
    int i=0;
    while (i < mapping.length) {
      map.put((IndexSlot)mapping[i++],(String)mapping[i++]);
    }
    return new InstanceSelector<>(map);
  }
  private InstanceSelector<String> selectorFilledWithOrdinal(){
    EnumMap<IndexSlot,String> map=new EnumMap<>(IndexSlot.class);
    for (    IndexSlot slot : IndexSlot.values()) {
      map.put(slot,Integer.toString(slot.ordinal()));
    }
    return new InstanceSelector<>(map);
  }
}
