public abstract class NeoServerRestartTestIT extends ExclusiveServerTestBase {
  public static final String CUSTOM_SWAPPER="CustomSwapper";
  private static Semaphore semaphore;
static {
    semaphore=new Semaphore(0);
  }
  /** 
 * This test makes sure that the database is able to start after having been stopped during initialization. In order to make sure that the server is stopped during startup we create a separate thread that calls stop. In order to make sure that this thread does not call stop before the startup procedure has started we use a custom implementation of a PageSwapperFactory, which communicates with the thread that calls stop. We do this via a static semaphore.
 * @throws IOException
 * @throws InterruptedException
 */
  @Test public void shouldBeAbleToRestartWhenStoppedDuringStartup() throws IOException, InterruptedException {
    semaphore.drainPermits();
    NeoServer server=getNeoServer(CUSTOM_SWAPPER);
    try {
      AtomicBoolean failure=new AtomicBoolean();
      Thread serverStoppingThread=ThreadTestUtils.fork(stopServerAfterStartingHasStarted(server,failure));
      server.start();
      serverStoppingThread.join();
      if (failure.get()) {
        fail("Server failed to stop.");
      }
      server=getNeoServer(CUSTOM_SWAPPER);
      server.start();
    }
  finally {
      server.stop();
    }
  }
  protected abstract NeoServer getNeoServer(  String customPageSwapperName) throws IOException ;
  private Runnable stopServerAfterStartingHasStarted(  NeoServer server,  AtomicBoolean failure){
    return () -> {
      try {
        semaphore.acquire();
        server.stop();
      }
 catch (      Exception e) {
        failure.set(true);
      }
    }
;
  }
public static class CustomSwapper extends SingleFilePageSwapperFactory {
    @Override public String implementationName(){
      return CUSTOM_SWAPPER;
    }
    @Override public PageSwapper createPageSwapper(    File file,    int filePageSize,    PageEvictionCallback onEviction,    boolean createIfNotExist,    boolean noChannelStriping) throws IOException {
      semaphore.release();
      return super.createPageSwapper(file,filePageSize,onEviction,createIfNotExist,noChannelStriping);
    }
  }
}
