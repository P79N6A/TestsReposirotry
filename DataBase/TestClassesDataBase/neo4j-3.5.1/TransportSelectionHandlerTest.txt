public class TransportSelectionHandlerTest {
  @Test public void shouldLogOnUnexpectedExceptionsAndClosesContext() throws Throwable {
    ChannelHandlerContext context=channelHandlerContextMock();
    AssertableLogProvider logging=new AssertableLogProvider();
    TransportSelectionHandler handler=new TransportSelectionHandler(null,null,false,false,logging,null);
    Throwable cause=new Throwable("Oh no!");
    handler.exceptionCaught(context,cause);
    verify(context).close();
    logging.assertExactly(inLog(TransportSelectionHandler.class).error(equalTo("Fatal error occurred when initialising pipeline: " + context.channel()),sameInstance(cause)));
  }
  @Test public void shouldLogConnectionResetErrorsAtWarningLevelAndClosesContext() throws Exception {
    ChannelHandlerContext context=channelHandlerContextMock();
    AssertableLogProvider logging=new AssertableLogProvider();
    TransportSelectionHandler handler=new TransportSelectionHandler(null,null,false,false,logging,null);
    IOException connResetError=new IOException("Connection reset by peer");
    handler.exceptionCaught(context,connResetError);
    verify(context).close();
    logging.assertExactly(inLog(TransportSelectionHandler.class).warn("Fatal error occurred when initialising pipeline, " + "remote peer unexpectedly closed connection: %s",context.channel()));
  }
  private static ChannelHandlerContext channelHandlerContextMock(){
    Channel channel=mock(Channel.class);
    ChannelHandlerContext context=mock(ChannelHandlerContext.class);
    when(context.channel()).thenReturn(channel);
    return context;
  }
}
