private static class SensibleAdversarialFileSystemAbstraction extends AdversarialFileSystemAbstraction {
  private final Adversary adversary;
  private final FileSystemAbstraction delegate;
  SensibleAdversarialFileSystemAbstraction(  Adversary adversary,  FileSystemAbstraction delegate){
    super(adversary,delegate);
    this.adversary=adversary;
    this.delegate=delegate;
  }
  @Override public OutputStream openAsOutputStream(  File fileName,  boolean append) throws IOException {
    adversary.injectFailure(FileNotFoundException.class);
    final OutputStream outputStream=delegate.openAsOutputStream(fileName,append);
    return new AdversarialOutputStream(outputStream,adversary){
      @Override public void write(      byte[] b) throws IOException {
        adversary.injectFailure(IOException.class);
        outputStream.write(b);
      }
      @Override public void write(      byte[] b,      int off,      int len) throws IOException {
        adversary.injectFailure(IOException.class);
        outputStream.write(b,off,len);
      }
    }
;
  }
  @Override public boolean fileExists(  File file){
    return delegate.fileExists(file);
  }
  @Override public long getFileSize(  File fileName){
    return delegate.getFileSize(fileName);
  }
}
