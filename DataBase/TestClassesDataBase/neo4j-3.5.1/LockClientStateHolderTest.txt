public class LockClientStateHolderTest {
  @Test public void shouldAllowIncrementDecrementClientsWhileNotClosed(){
    LockClientStateHolder lockClientStateHolder=new LockClientStateHolder();
    assertFalse(lockClientStateHolder.hasActiveClients());
    lockClientStateHolder.incrementActiveClients(new NoOpClient());
    assertTrue(lockClientStateHolder.hasActiveClients());
    lockClientStateHolder.incrementActiveClients(new NoOpClient());
    lockClientStateHolder.incrementActiveClients(new NoOpClient());
    lockClientStateHolder.decrementActiveClients();
    lockClientStateHolder.decrementActiveClients();
    lockClientStateHolder.decrementActiveClients();
    assertFalse(lockClientStateHolder.hasActiveClients());
  }
  @Test public void shouldNotAllowNewClientsWhenClosed(){
    LockClientStateHolder lockClientStateHolder=new LockClientStateHolder();
    lockClientStateHolder.stopClient();
    assertFalse(lockClientStateHolder.hasActiveClients());
    try {
      lockClientStateHolder.incrementActiveClients(new NoOpClient());
      fail("Exception expected");
    }
 catch (    Exception e) {
      assertThat(e,instanceOf(LockClientStoppedException.class));
    }
  }
  @Test public void shouldBeAbleToDecrementActiveItemAndDetectWhenFree(){
    LockClientStateHolder lockClientStateHolder=new LockClientStateHolder();
    lockClientStateHolder.incrementActiveClients(new NoOpClient());
    lockClientStateHolder.incrementActiveClients(new NoOpClient());
    lockClientStateHolder.decrementActiveClients();
    lockClientStateHolder.incrementActiveClients(new NoOpClient());
    assertTrue(lockClientStateHolder.hasActiveClients());
    lockClientStateHolder.stopClient();
    assertTrue(lockClientStateHolder.hasActiveClients());
    lockClientStateHolder.decrementActiveClients();
    assertTrue(lockClientStateHolder.hasActiveClients());
    lockClientStateHolder.decrementActiveClients();
    assertFalse(lockClientStateHolder.hasActiveClients());
  }
  @Test public void shouldBeAbleToResetAndReuseClientState(){
    LockClientStateHolder lockClientStateHolder=new LockClientStateHolder();
    lockClientStateHolder.incrementActiveClients(new NoOpClient());
    lockClientStateHolder.incrementActiveClients(new NoOpClient());
    lockClientStateHolder.decrementActiveClients();
    assertTrue(lockClientStateHolder.hasActiveClients());
    lockClientStateHolder.stopClient();
    assertTrue(lockClientStateHolder.hasActiveClients());
    assertTrue(lockClientStateHolder.isStopped());
    lockClientStateHolder.reset();
    assertFalse(lockClientStateHolder.hasActiveClients());
    assertFalse(lockClientStateHolder.isStopped());
    lockClientStateHolder.incrementActiveClients(new NoOpClient());
    assertTrue(lockClientStateHolder.hasActiveClients());
    assertFalse(lockClientStateHolder.isStopped());
  }
}
