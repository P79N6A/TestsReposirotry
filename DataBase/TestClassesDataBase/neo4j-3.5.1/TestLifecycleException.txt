class TestLifecycleException {
  @Test void shouldMakeNoneToStoppedIntoHumanReadableInitMessage(){
    assertThat(exceptionFor(NONE,STOPPED).getMessage(),is("Component 'SomeComponent' failed to initialize."));
  }
  @Test void shouldMakeStoppedToStartedIntoHumanReadableStartingMessage(){
    assertThat(exceptionFor(STOPPED,STARTED).getMessage(),is("Component 'SomeComponent' was successfully initialized, but failed to start."));
  }
  @Test void shouldMakeStartedToStoppedIntoHumanReadableStoppingMessage(){
    assertThat(exceptionFor(STARTED,STOPPED).getMessage(),is("Component 'SomeComponent' failed to stop."));
  }
  @Test void shouldMakeShutdownIntoHumanReadableShutdownMessage(){
    assertThat(exceptionFor(STOPPED,SHUTDOWN).getMessage(),is("Component 'SomeComponent' failed to shut down."));
  }
  @Test void shouldIncludeRootCauseMessageInExceptionMessage(){
    Exception root=new Exception("big bad root cause");
    Exception intermediate=new Exception("intermediate exception",root);
    assertThat(exceptionFor(STARTED,STOPPED,intermediate).getMessage(),containsString(root.getMessage()));
  }
  private LifecycleException exceptionFor(  LifecycleStatus from,  LifecycleStatus to){
    return exceptionFor(from,to,null);
  }
  private LifecycleException exceptionFor(  LifecycleStatus from,  LifecycleStatus to,  Throwable cause){
    return new LifecycleException(new Object(){
      @Override public String toString(){
        return "SomeComponent";
      }
    }
,from,to,cause);
  }
}
