class Format extends KeyValueStoreFileFormat {
  private final Map<String,HeaderField<byte[]>> headerFields=new HashMap<>();
  Format(  String... defaultHeaderFields){
    this(StubCollector.headerFields(defaultHeaderFields));
  }
  private Format(  HeaderField<byte[]>[] headerFields){
    super(32,headerFields);
    for (    HeaderField<byte[]> headerField : headerFields) {
      this.headerFields.put(headerField.toString(),headerField);
    }
  }
  void createEmpty(  Map<String,byte[]> headers) throws IOException {
    createEmptyStore(fs.get(),getStoreFile(),16,16,headers(headers));
  }
  KeyValueStoreFile create(  Map<String,byte[]> headers,  DataProvider data) throws IOException {
    return createStore(fs.get(),pages.getPageCache(fs.get()),getStoreFile(),16,16,headers(headers),data);
  }
  KeyValueStoreFile create(  Map<String,String> config,  Map<String,byte[]> headers,  DataProvider data) throws IOException {
    PageCacheRule.PageCacheConfig pageCacheConfig=PageCacheRule.config();
    PageCache pageCache=pages.getPageCache(fs.get(),pageCacheConfig,Config.defaults(config));
    return createStore(fs.get(),pageCache,getStoreFile(),16,16,headers(headers),data);
  }
  private Headers headers(  Map<String,byte[]> headers){
    Headers.Builder builder=Headers.headersBuilder();
    for (    Map.Entry<String,byte[]> entry : headers.entrySet()) {
      builder.put(headerFields.get(entry.getKey()),entry.getValue());
    }
    return builder.headers();
  }
  KeyValueStoreFile open() throws IOException {
    return openStore(fs.get(),pages.getPageCache(fs.get()),getStoreFile());
  }
  @Override protected void writeFormatSpecifier(  WritableBuffer formatSpecifier){
    for (int i=0; i < formatSpecifier.size(); i++) {
      formatSpecifier.putByte(i,(byte)0xFF);
    }
  }
}
