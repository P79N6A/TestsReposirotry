@RunWith(Parameterized.class) public class StoreMigratorIT {
  private final TestDirectory directory=TestDirectory.testDirectory();
  private final PageCacheRule pageCacheRule=new PageCacheRule();
  private final DefaultFileSystemRule fileSystemRule=new DefaultFileSystemRule();
  private static final Config CONFIG=Config.defaults(GraphDatabaseSettings.pagecache_memory,"8m");
  @Rule public RuleChain ruleChain=RuleChain.outerRule(directory).around(fileSystemRule).around(pageCacheRule);
  private final Monitors monitors=new Monitors();
  private final FileSystemAbstraction fs=fileSystemRule.get();
  private JobScheduler jobScheduler;
  @Parameterized.Parameter(0) public String version;
  @Parameterized.Parameter(1) public LogPosition expectedLogPosition;
  @Parameterized.Parameter(2) public Function<TransactionId,Boolean> txIdComparator;
  @Parameterized.Parameters(name="{0}") public static Collection<Object[]> versions(){
    return Arrays.<Object[]>asList(new Object[]{StandardV2_3.STORE_VERSION,new LogPosition(3,169),txInfoAcceptanceOnIdAndTimestamp(39,UNKNOWN_TX_COMMIT_TIMESTAMP)});
  }
  @Before public void setUp() throws Exception {
    jobScheduler=new ThreadPoolJobScheduler();
  }
  @After public void tearDown() throws Exception {
    jobScheduler.close();
  }
  @Test public void shouldBeAbleToResumeMigrationOnMoving() throws Exception {
    DatabaseLayout databaseLayout=directory.databaseLayout();
    File prepare=directory.directory("prepare");
    MigrationTestUtils.prepareSampleLegacyDatabase(version,fs,databaseLayout.databaseDirectory(),prepare);
    LogService logService=NullLogService.getInstance();
    PageCache pageCache=pageCacheRule.getPageCache(fs);
    LogTailScanner tailScanner=getTailScanner(databaseLayout.databaseDirectory());
    UpgradableDatabase upgradableDatabase=getUpgradableDatabase(pageCache,tailScanner);
    String versionToMigrateFrom=upgradableDatabase.checkUpgradable(databaseLayout).storeVersion();
    SilentMigrationProgressMonitor progressMonitor=new SilentMigrationProgressMonitor();
    StoreMigrator migrator=new StoreMigrator(fs,pageCache,CONFIG,logService,jobScheduler);
    CountsMigrator countsMigrator=new CountsMigrator(fs,pageCache,CONFIG);
    DatabaseLayout migrationLayout=directory.databaseLayout(StoreUpgrader.MIGRATION_DIRECTORY);
    migrator.migrate(databaseLayout,migrationLayout,progressMonitor.startSection("section"),versionToMigrateFrom,upgradableDatabase.currentVersion());
    countsMigrator.migrate(databaseLayout,migrationLayout,progressMonitor.startSection("section"),versionToMigrateFrom,upgradableDatabase.currentVersion());
    migrator=new StoreMigrator(fs,pageCache,CONFIG,logService,jobScheduler);
    countsMigrator=new CountsMigrator(fs,pageCache,CONFIG);
    migrator.moveMigratedFiles(migrationLayout,databaseLayout,versionToMigrateFrom,upgradableDatabase.currentVersion());
    countsMigrator.moveMigratedFiles(migrationLayout,databaseLayout,versionToMigrateFrom,upgradableDatabase.currentVersion());
    StoreFactory storeFactory=new StoreFactory(databaseLayout,CONFIG,new DefaultIdGeneratorFactory(fs),pageCache,fs,logService.getInternalLogProvider(),EmptyVersionContextSupplier.EMPTY);
    storeFactory.openAllNeoStores().close();
  }
  @Test public void shouldBeAbleToMigrateWithoutErrors() throws Exception {
    DatabaseLayout databaseLayout=directory.databaseLayout();
    File prepare=directory.directory("prepare");
    MigrationTestUtils.prepareSampleLegacyDatabase(version,fs,databaseLayout.databaseDirectory(),prepare);
    AssertableLogProvider logProvider=new AssertableLogProvider(true);
    LogService logService=new SimpleLogService(logProvider,logProvider);
    PageCache pageCache=pageCacheRule.getPageCache(fs);
    LogTailScanner tailScanner=getTailScanner(databaseLayout.databaseDirectory());
    UpgradableDatabase upgradableDatabase=getUpgradableDatabase(pageCache,tailScanner);
    String versionToMigrateFrom=upgradableDatabase.checkUpgradable(databaseLayout).storeVersion();
    SilentMigrationProgressMonitor progressMonitor=new SilentMigrationProgressMonitor();
    StoreMigrator migrator=new StoreMigrator(fs,pageCache,CONFIG,logService,jobScheduler);
    CountsMigrator countsMigrator=new CountsMigrator(fs,pageCache,CONFIG);
    DatabaseLayout migrationLayout=directory.databaseLayout(StoreUpgrader.MIGRATION_DIRECTORY);
    migrator.migrate(databaseLayout,migrationLayout,progressMonitor.startSection("section"),versionToMigrateFrom,upgradableDatabase.currentVersion());
    countsMigrator.migrate(databaseLayout,migrationLayout,progressMonitor.startSection("section"),versionToMigrateFrom,upgradableDatabase.currentVersion());
    migrator.moveMigratedFiles(migrationLayout,databaseLayout,versionToMigrateFrom,upgradableDatabase.currentVersion());
    countsMigrator.moveMigratedFiles(migrationLayout,databaseLayout,versionToMigrateFrom,upgradableDatabase.currentVersion());
    StoreFactory storeFactory=new StoreFactory(databaseLayout,CONFIG,new DefaultIdGeneratorFactory(fs),pageCache,fs,logService.getInternalLogProvider(),EmptyVersionContextSupplier.EMPTY);
    storeFactory.openAllNeoStores().close();
    logProvider.assertNoLogCallContaining("ERROR");
  }
  @Test public void shouldBeAbleToResumeMigrationOnRebuildingCounts() throws Exception {
    DatabaseLayout databaseLayout=directory.databaseLayout();
    File prepare=directory.directory("prepare");
    MigrationTestUtils.prepareSampleLegacyDatabase(version,fs,databaseLayout.databaseDirectory(),prepare);
    LogService logService=NullLogService.getInstance();
    PageCache pageCache=pageCacheRule.getPageCache(fs);
    LogTailScanner tailScanner=getTailScanner(databaseLayout.databaseDirectory());
    UpgradableDatabase upgradableDatabase=getUpgradableDatabase(pageCache,tailScanner);
    String versionToMigrateFrom=upgradableDatabase.checkUpgradable(databaseLayout).storeVersion();
    SilentMigrationProgressMonitor progressMonitor=new SilentMigrationProgressMonitor();
    StoreMigrator migrator=new StoreMigrator(fs,pageCache,CONFIG,logService,jobScheduler);
    DatabaseLayout migrationLayout=directory.databaseLayout(StoreUpgrader.MIGRATION_DIRECTORY);
    migrator.migrate(databaseLayout,migrationLayout,progressMonitor.startSection("section"),versionToMigrateFrom,upgradableDatabase.currentVersion());
    progressMonitor=new SilentMigrationProgressMonitor();
    CountsMigrator countsMigrator=new CountsMigrator(fs,pageCache,CONFIG);
    countsMigrator.migrate(databaseLayout,migrationLayout,progressMonitor.startSection("section"),versionToMigrateFrom,upgradableDatabase.currentVersion());
    migrator.moveMigratedFiles(migrationLayout,databaseLayout,versionToMigrateFrom,upgradableDatabase.currentVersion());
    countsMigrator.moveMigratedFiles(migrationLayout,databaseLayout,versionToMigrateFrom,upgradableDatabase.currentVersion());
    StoreFactory storeFactory=new StoreFactory(databaseLayout,CONFIG,new DefaultIdGeneratorFactory(fs),pageCache,fs,logService.getInternalLogProvider(),EmptyVersionContextSupplier.EMPTY);
    storeFactory.openAllNeoStores().close();
  }
  @Test public void shouldComputeTheLastTxLogPositionCorrectly() throws Throwable {
    DatabaseLayout databaseLayout=directory.databaseLayout();
    File prepare=directory.directory("prepare");
    MigrationTestUtils.prepareSampleLegacyDatabase(version,fs,databaseLayout.databaseDirectory(),prepare);
    LogService logService=NullLogService.getInstance();
    PageCache pageCache=pageCacheRule.getPageCache(fs);
    LogTailScanner tailScanner=getTailScanner(databaseLayout.databaseDirectory());
    UpgradableDatabase upgradableDatabase=getUpgradableDatabase(pageCache,tailScanner);
    String versionToMigrateFrom=upgradableDatabase.checkUpgradable(databaseLayout).storeVersion();
    SilentMigrationProgressMonitor progressMonitor=new SilentMigrationProgressMonitor();
    StoreMigrator migrator=new StoreMigrator(fs,pageCache,CONFIG,logService,jobScheduler);
    DatabaseLayout migrationLayout=directory.databaseLayout(StoreUpgrader.MIGRATION_DIRECTORY);
    migrator.migrate(databaseLayout,migrationLayout,progressMonitor.startSection("section"),versionToMigrateFrom,upgradableDatabase.currentVersion());
    assertEquals(expectedLogPosition,migrator.readLastTxLogPosition(migrationLayout));
  }
  @Test public void shouldComputeTheLastTxInfoCorrectly() throws Exception {
    DatabaseLayout databaseLayout=directory.databaseLayout();
    File prepare=directory.directory("prepare");
    MigrationTestUtils.prepareSampleLegacyDatabase(version,fs,databaseLayout.databaseDirectory(),prepare);
    LogService logService=NullLogService.getInstance();
    PageCache pageCache=pageCacheRule.getPageCache(fs);
    LogTailScanner tailScanner=getTailScanner(databaseLayout.databaseDirectory());
    UpgradableDatabase upgradableDatabase=getUpgradableDatabase(pageCache,tailScanner);
    String versionToMigrateFrom=upgradableDatabase.checkUpgradable(databaseLayout).storeVersion();
    SilentMigrationProgressMonitor progressMonitor=new SilentMigrationProgressMonitor();
    StoreMigrator migrator=new StoreMigrator(fs,pageCache,CONFIG,logService,jobScheduler);
    DatabaseLayout migrationLayout=directory.databaseLayout(StoreUpgrader.MIGRATION_DIRECTORY);
    migrator.migrate(databaseLayout,migrationLayout,progressMonitor.startSection("section"),versionToMigrateFrom,upgradableDatabase.currentVersion());
    assertTrue(txIdComparator.apply(migrator.readLastTxInformation(migrationLayout)));
  }
  private static UpgradableDatabase getUpgradableDatabase(  PageCache pageCache,  LogTailScanner tailScanner){
    return new UpgradableDatabase(new StoreVersionCheck(pageCache),selectFormat(),tailScanner);
  }
  private LogTailScanner getTailScanner(  File databaseDirectory) throws IOException {
    LogFiles logFiles=LogFilesBuilder.logFilesBasedOnlyBuilder(databaseDirectory,fs).build();
    return new LogTailScanner(logFiles,new VersionAwareLogEntryReader<>(),monitors);
  }
  private static RecordFormats selectFormat(){
    return Standard.LATEST_RECORD_FORMATS;
  }
  private static Function<TransactionId,Boolean> txInfoAcceptanceOnIdAndTimestamp(  long id,  long timestamp){
    return txInfo -> txInfo.transactionId() == id && txInfo.commitTimestamp() == timestamp;
  }
}
