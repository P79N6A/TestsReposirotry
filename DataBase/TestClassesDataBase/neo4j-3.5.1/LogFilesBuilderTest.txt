public class LogFilesBuilderTest {
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  @Rule public final DefaultFileSystemRule fileSystemRule=new DefaultFileSystemRule();
  @Rule public final PageCacheRule pageCacheRule=new PageCacheRule();
  private File storeDirectory;
  private DefaultFileSystemAbstraction fileSystem;
  @Before public void setUp(){
    storeDirectory=testDirectory.directory();
    fileSystem=fileSystemRule.get();
  }
  @Test public void buildActiveFilesOnlyContext() throws IOException {
    PageCache pageCache=pageCacheRule.getPageCache(fileSystem);
    TransactionLogFilesContext context=activeFilesBuilder(testDirectory.databaseLayout(),fileSystem,pageCache).buildContext();
    assertEquals(fileSystem,context.getFileSystem());
    assertNotNull(context.getLogEntryReader());
    assertSame(LogFileCreationMonitor.NO_MONITOR,context.getLogFileCreationMonitor());
    assertEquals(Long.MAX_VALUE,context.getRotationThreshold().get());
    assertEquals(0,context.getLastCommittedTransactionId());
    assertEquals(0,context.getLogVersionRepository().getCurrentLogVersion());
  }
  @Test public void buildFilesBasedContext() throws IOException {
    TransactionLogFilesContext context=logFilesBasedOnlyBuilder(storeDirectory,fileSystem).buildContext();
    assertEquals(fileSystem,context.getFileSystem());
    assertSame(LogFileCreationMonitor.NO_MONITOR,context.getLogFileCreationMonitor());
  }
  @Test public void buildDefaultContext() throws IOException {
    TransactionLogFilesContext context=builder(testDirectory.databaseLayout(),fileSystem).withLogVersionRepository(new SimpleLogVersionRepository(2)).withTransactionIdStore(new SimpleTransactionIdStore()).buildContext();
    assertEquals(fileSystem,context.getFileSystem());
    assertNotNull(context.getLogEntryReader());
    assertSame(LogFileCreationMonitor.NO_MONITOR,context.getLogFileCreationMonitor());
    assertEquals(ByteUnit.mebiBytes(250),context.getRotationThreshold().get());
    assertEquals(1,context.getLastCommittedTransactionId());
    assertEquals(2,context.getLogVersionRepository().getCurrentLogVersion());
  }
  @Test public void buildDefaultContextWithDependencies() throws IOException {
    SimpleLogVersionRepository logVersionRepository=new SimpleLogVersionRepository(2);
    SimpleTransactionIdStore transactionIdStore=new SimpleTransactionIdStore();
    Dependencies dependencies=new Dependencies();
    dependencies.satisfyDependency(logVersionRepository);
    dependencies.satisfyDependency(transactionIdStore);
    TransactionLogFilesContext context=builder(testDirectory.databaseLayout(),fileSystem).withDependencies(dependencies).buildContext();
    assertEquals(fileSystem,context.getFileSystem());
    assertNotNull(context.getLogEntryReader());
    assertSame(LogFileCreationMonitor.NO_MONITOR,context.getLogFileCreationMonitor());
    assertEquals(ByteUnit.mebiBytes(250),context.getRotationThreshold().get());
    assertEquals(1,context.getLastCommittedTransactionId());
    assertEquals(2,context.getLogVersionRepository().getCurrentLogVersion());
  }
  @Test public void buildContextWithCustomLogFilesLocations() throws Throwable {
    String customLogLocation="customLogLocation";
    Config customLogLocationConfig=Config.defaults(logical_logs_location,customLogLocation);
    DatabaseLayout databaseLayout=testDirectory.databaseLayout();
    LogFiles logFiles=builder(databaseLayout,fileSystem).withConfig(customLogLocationConfig).withLogVersionRepository(new SimpleLogVersionRepository()).withTransactionIdStore(new SimpleTransactionIdStore()).build();
    logFiles.init();
    logFiles.start();
    assertEquals(databaseLayout.file(customLogLocation),logFiles.getHighestLogFile().getParentFile());
    logFiles.shutdown();
  }
  @Test public void buildContextWithCustomAbsoluteLogFilesLocations() throws Throwable {
    File customLogDirectory=testDirectory.directory("absoluteCustomLogDirectory");
    Config customLogLocationConfig=Config.defaults(logical_logs_location,customLogDirectory.getAbsolutePath());
    LogFiles logFiles=builder(testDirectory.databaseLayout(),fileSystem).withConfig(customLogLocationConfig).withLogVersionRepository(new SimpleLogVersionRepository()).withTransactionIdStore(new SimpleTransactionIdStore()).build();
    logFiles.init();
    logFiles.start();
    assertEquals(customLogDirectory,logFiles.getHighestLogFile().getParentFile());
    logFiles.shutdown();
  }
  @Test(expected=NullPointerException.class) public void failToBuildFullContextWithoutLogVersionRepo() throws IOException {
    builder(testDirectory.databaseLayout(),fileSystem).withTransactionIdStore(new SimpleTransactionIdStore()).buildContext();
  }
  @Test(expected=NullPointerException.class) public void failToBuildFullContextWithoutTransactionIdStore() throws IOException {
    builder(testDirectory.databaseLayout(),fileSystem).withLogVersionRepository(new SimpleLogVersionRepository(2)).buildContext();
  }
  @Test(expected=UnsupportedOperationException.class) public void fileBasedOperationsContextFailOnLastCommittedTransactionIdAccess() throws IOException {
    logFilesBasedOnlyBuilder(storeDirectory,fileSystem).buildContext().getLastCommittedTransactionId();
  }
  @Test(expected=UnsupportedOperationException.class) public void fileBasedOperationsContextFailOnLogVersionRepositoryAccess() throws IOException {
    logFilesBasedOnlyBuilder(storeDirectory,fileSystem).buildContext().getLogVersionRepository();
  }
}
