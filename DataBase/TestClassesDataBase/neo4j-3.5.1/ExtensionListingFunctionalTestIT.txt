public class ExtensionListingFunctionalTestIT extends SharedServerTestBase {
  private static FunctionalTestHelper functionalTestHelper;
  @BeforeClass public static void setupServer(){
    functionalTestHelper=new FunctionalTestHelper(SharedServerTestBase.server());
  }
  @Before public void cleanTheDatabase(){
    ServerHelper.cleanTheDatabase(SharedServerTestBase.server());
  }
  @Test public void datarootContainsReferenceToExtensions() throws Exception {
    JaxRsResponse response=RestRequest.req().get(functionalTestHelper.dataUri());
    assertThat(response.getStatus(),equalTo(200));
    Map<String,Object> json=JsonHelper.jsonToMap(response.getEntity());
    new URI((String)json.get("extensions_info"));
    response.close();
  }
  @Test public void canListAllAvailableServerExtensions() throws Exception {
    JaxRsResponse response=RestRequest.req().get(functionalTestHelper.extensionUri());
    assertThat(response.getStatus(),equalTo(200));
    Map<String,Object> json=JsonHelper.jsonToMap(response.getEntity());
    assertFalse(json.isEmpty());
    response.close();
  }
  @SuppressWarnings("unchecked") @Test public void canListExtensionMethodsForServerExtension() throws Exception {
    JaxRsResponse response=RestRequest.req().get(functionalTestHelper.extensionUri());
    assertThat(response.getStatus(),equalTo(200));
    Map<String,Object> json=JsonHelper.jsonToMap(response.getEntity());
    String refNodeService=(String)json.get(FunctionalTestPlugin.class.getSimpleName());
    response.close();
    response=RestRequest.req().get(refNodeService);
    String result=response.getEntity();
    assertThat(response.getStatus(),equalTo(200));
    json=JsonHelper.jsonToMap(result);
    json=(Map<String,Object>)json.get("graphdb");
    assertThat(json,hasKey(FunctionalTestPlugin.CREATE_NODE));
    response.close();
  }
}
