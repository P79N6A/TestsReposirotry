public class CreateIndexStressIT {
  private static final int NUM_PROPS=400;
  private final AtomicBoolean hasFailed=new AtomicBoolean(false);
  @Rule public DatabaseRule db=new ImpermanentDatabaseRule().withSetting(GraphDatabaseSettings.query_cache_size,"0");
  private final ExecutorService executorService=Executors.newFixedThreadPool(10);
  @After public void tearDown(){
    executorService.shutdown();
  }
  @Test public void shouldHandleConcurrentIndexCreationAndUsage() throws InterruptedException {
    HashMap<String,Object> params=new HashMap<>();
    params.put("param",NUM_PROPS);
    db.execute("FOREACH(x in range(0,$param) | CREATE (:A {prop:x})) ",params);
    db.execute("CREATE INDEX ON :A(prop) ");
    for (int i=0; i < NUM_PROPS; i++) {
      params.put("param",i);
      executeInThread("MATCH (n:A) WHERE n.prop CONTAINS 'A' RETURN n.prop",params);
    }
    awaitAndAssertNoErrors();
  }
  private void awaitAndAssertNoErrors() throws InterruptedException {
    executorService.awaitTermination(3L,TimeUnit.SECONDS);
    assertFalse(hasFailed.get());
  }
  private void executeInThread(  final String query,  Map<String,Object> params){
    executorService.execute(() -> {
      try {
        db.execute(query,params).resultAsString();
      }
 catch (      Exception e) {
        hasFailed.set(true);
      }
    }
);
  }
}
