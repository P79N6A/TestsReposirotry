class Slf4jLogProviderTest {
  private final Slf4jLogProvider logProvider=new Slf4jLogProvider();
  @BeforeEach void clearLoggingEventsAccumulator(){
    getAccumulatingAppender().clearEventsList();
  }
  @Test void shouldLogDebug(){
    Log log=logProvider.getLog(getClass());
    log.debug("Holy debug batman!");
    assertLogOccurred(Level.DEBUG,"Holy debug batman!");
  }
  @Test void shouldLogInfo(){
    Log log=logProvider.getLog(getClass());
    log.info("Holy info batman!");
    assertLogOccurred(Level.INFO,"Holy info batman!");
  }
  @Test void shouldLogWarning(){
    Log log=logProvider.getLog(getClass());
    log.warn("Holy warning batman!");
    assertLogOccurred(Level.WARN,"Holy warning batman!");
  }
  @Test void shouldLogError(){
    Log log=logProvider.getLog(getClass());
    log.error("Holy error batman!");
    assertLogOccurred(Level.ERROR,"Holy error batman!");
  }
  private void assertLogOccurred(  Level level,  String message){
    ArrayList<LoggingEvent> events=getLoggingEvents();
    assertThat(events,hasSize(1));
    LoggingEvent event=events.get(0);
    assertThat(event.getLoggerName(),is(getClass().getName()));
    assertThat(event.getLevel(),is(level));
    assertThat(event.getMessage(),is(message));
  }
  private static ArrayList<LoggingEvent> getLoggingEvents(){
    return getAccumulatingAppender().getEventsList();
  }
  private static AccumulatingAppender getAccumulatingAppender(){
    return (AccumulatingAppender)Logger.getRootLogger().getAppender("accumulating");
  }
}
