@ExtendWith(TestDirectoryExtension.class) class StoreLayoutTest {
  @Inject private TestDirectory testDirectory;
  @Test void storeLayoutForAbsoluteFile(){
    File storeDir=testDirectory.storeDir();
    StoreLayout storeLayout=StoreLayout.of(storeDir);
    assertEquals(storeDir,storeLayout.storeDirectory());
  }
  @Test void storeLayoutResolvesLinks() throws IOException {
    Path basePath=testDirectory.directory().toPath();
    File storeDir=testDirectory.storeDir("notAbsolute");
    Path linkPath=basePath.resolve("link");
    Path symbolicLink=Files.createSymbolicLink(linkPath,storeDir.toPath());
    StoreLayout storeLayout=StoreLayout.of(symbolicLink.toFile());
    assertEquals(storeDir,storeLayout.storeDirectory());
  }
  @Test void storeLayoutUseCanonicalRepresentation(){
    Path basePath=testDirectory.storeDir("notCanonical").toPath();
    Path notCanonicalPath=basePath.resolve("../anotherLocation");
    StoreLayout storeLayout=StoreLayout.of(notCanonicalPath.toFile());
    assertEquals(testDirectory.directory("anotherLocation"),storeLayout.storeDirectory());
  }
  @Test void storeLockFileLocation(){
    StoreLayout storeLayout=testDirectory.storeLayout();
    File storeLockFile=storeLayout.storeLockFile();
    assertEquals("store_lock",storeLockFile.getName());
    assertEquals(storeLayout.storeDirectory(),storeLockFile.getParentFile());
  }
}
