public class MonitorsTest {
interface MyMonitor {
    void aVoid();
    void takesArgs(    String arg1,    long arg2,    Object... moreArgs);
  }
  @Test public void shouldProvideNoOpDelegate(){
    Monitors monitors=new Monitors();
    MyMonitor monitor=monitors.newMonitor(MyMonitor.class);
    monitor.aVoid();
    monitor.takesArgs("ha",12,new Object());
  }
  @Test public void shouldRegister(){
    Monitors monitors=new Monitors();
    MyMonitor listener=mock(MyMonitor.class);
    MyMonitor monitor=monitors.newMonitor(MyMonitor.class);
    Object obj=new Object();
    monitors.addMonitorListener(listener);
    monitor.aVoid();
    monitor.takesArgs("ha",12,obj);
    verify(listener).aVoid();
    verify(listener).takesArgs("ha",12,obj);
  }
  @Test public void shouldUnregister(){
    Monitors monitors=new Monitors();
    MyMonitor listener=mock(MyMonitor.class);
    MyMonitor monitor=monitors.newMonitor(MyMonitor.class);
    Object obj=new Object();
    monitors.addMonitorListener(listener);
    monitors.removeMonitorListener(listener);
    monitor.aVoid();
    monitor.takesArgs("ha",12,obj);
    verifyNoMoreInteractions(listener);
  }
  @Test public void shouldRespectTags(){
    Monitors monitors=new Monitors();
    MyMonitor listener=mock(MyMonitor.class);
    MyMonitor monitorTag1=monitors.newMonitor(MyMonitor.class,"tag1");
    MyMonitor monitorTag2=monitors.newMonitor(MyMonitor.class,"tag2");
    monitors.addMonitorListener(listener,"tag2");
    monitorTag1.aVoid();
    verifyZeroInteractions(listener);
    monitorTag2.aVoid();
    verify(listener,times(1)).aVoid();
    verifyNoMoreInteractions(listener);
  }
  @Test public void shouldTellIfMonitorHasListeners(){
    Monitors monitors=new Monitors();
    MyMonitor listener=mock(MyMonitor.class);
    monitors.newMonitor(MyMonitor.class);
    assertFalse(monitors.hasListeners(MyMonitor.class));
    monitors.addMonitorListener(listener);
    assertTrue(monitors.hasListeners(MyMonitor.class));
    monitors.removeMonitorListener(listener);
    assertFalse(monitors.hasListeners(MyMonitor.class));
  }
  @Test public void multipleListenersRegistration(){
    Monitors monitors=new Monitors();
    MyMonitor listener1=mock(MyMonitor.class);
    MyMonitor listener2=mock(MyMonitor.class);
    assertFalse(monitors.hasListeners(MyMonitor.class));
    monitors.addMonitorListener(listener1);
    monitors.addMonitorListener(listener2);
    assertTrue(monitors.hasListeners(MyMonitor.class));
    monitors.removeMonitorListener(listener1);
    assertTrue(monitors.hasListeners(MyMonitor.class));
    monitors.removeMonitorListener(listener2);
    assertFalse(monitors.hasListeners(MyMonitor.class));
  }
  @Test public void eventShouldBubbleUp(){
    Monitors parent=new Monitors();
    MyMonitor parentListener=mock(MyMonitor.class);
    parent.addMonitorListener(parentListener);
    Monitors child=new Monitors(parent);
    MyMonitor childListener=mock(MyMonitor.class);
    child.addMonitorListener(childListener);
    MyMonitor parentMonitor=parent.newMonitor(MyMonitor.class);
    parentMonitor.aVoid();
    verify(parentListener,times(1)).aVoid();
    verifyZeroInteractions(childListener);
    MyMonitor childMonitor=child.newMonitor(MyMonitor.class);
    childMonitor.aVoid();
    verify(parentListener,times(2)).aVoid();
    verify(childListener,times(1)).aVoid();
  }
}
