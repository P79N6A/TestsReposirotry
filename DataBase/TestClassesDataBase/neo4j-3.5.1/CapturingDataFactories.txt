private static class CapturingDataFactories implements Iterable<DataFactory> {
  private final Function<Configuration,CharReadable> factory;
  private CharReadable last;
  private final Decorator decorator;
  CapturingDataFactories(  Function<Configuration,CharReadable> factory,  Decorator decorator){
    this.factory=factory;
    this.decorator=decorator;
  }
  @Override public Iterator<DataFactory> iterator(){
    return Iterators.iterator(config -> new Data(){
      @Override public RawIterator<CharReadable,IOException> stream(){
        last=factory.apply(config);
        return Readables.iterator(in -> in,last);
      }
      @Override public Decorator decorator(){
        return decorator;
      }
    }
);
  }
  CharReadable last(){
    return last;
  }
}
