public abstract class LargeNodeCursorTestBase<G extends KernelAPIReadTestSupport> extends KernelAPIReadTestBase<G> {
  private static List<Long> NODE_IDS=new ArrayList<>();
  private static int N_NODES=10000;
  private static Random random=new Random(2);
  @Override public void createTestGraph(  GraphDatabaseService graphDb){
    List<Node> deleted=new ArrayList<>();
    try (Transaction tx=graphDb.beginTx()){
      for (int i=0; i < N_NODES; i++) {
        Node node=graphDb.createNode();
        if (random.nextBoolean()) {
          NODE_IDS.add(node.getId());
        }
 else {
          deleted.add(node);
        }
      }
      tx.success();
    }
     try (Transaction tx=graphDb.beginTx()){
      for (      Node node : deleted) {
        node.delete();
      }
      tx.success();
    }
   }
  @Test public void shouldScanNodes(){
    List<Long> ids=new ArrayList<>();
    try (NodeCursor nodes=cursors.allocateNodeCursor()){
      read.allNodesScan(nodes);
      while (nodes.next()) {
        ids.add(nodes.nodeReference());
      }
    }
     assertEquals(NODE_IDS,ids);
  }
  @Test public void shouldAccessNodesByReference(){
    try (NodeCursor nodes=cursors.allocateNodeCursor()){
      for (      long id : NODE_IDS) {
        read.singleNode(id,nodes);
        assertTrue("should access defined node",nodes.next());
        assertEquals("should access the correct node",id,nodes.nodeReference());
        assertFalse("should only access a single node",nodes.next());
      }
    }
   }
}
