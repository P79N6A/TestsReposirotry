public class KernelIT extends KernelIntegrationTest {
  @Test public void mixingBeansApiWithKernelAPI() throws Exception {
    Transaction transaction=db.beginTx();
    KernelTransaction ktx=statementContextSupplier.getKernelTransactionBoundToThisThread(true);
    Node node=db.createNode();
    int labelId=ktx.tokenWrite().labelGetOrCreateForName("labello");
    ktx.dataWrite().nodeAddLabel(node.getId(),labelId);
    transaction.success();
    transaction.close();
  }
  @Test public void schemaStateShouldBeEvictedOnIndexComingOnline() throws Exception {
    schemaWriteInNewTransaction();
    getOrCreateSchemaState("my key","my state");
    commit();
    createIndex(newTransaction(AUTH_DISABLED));
    commit();
    try (Transaction tx=db.beginTx()){
      db.schema().awaitIndexesOnline(20,SECONDS);
      tx.success();
    }
     assertEventually("Schema state should have been updated",() -> schemaStateContains("my key"),is(false),1,TimeUnit.SECONDS);
  }
  @Test public void schemaStateShouldBeEvictedOnIndexDropped() throws Exception {
    IndexReference idx=createIndex(newTransaction(AUTH_DISABLED));
    commit();
    try (Transaction tx=db.beginTx()){
      db.schema().awaitIndexesOnline(20,SECONDS);
      getOrCreateSchemaState("my key","some state");
      tx.success();
    }
     schemaWriteInNewTransaction().indexDrop(idx);
    commit();
    assertFalse(schemaStateContains("my key"));
  }
  @Test public void txReturnsCorrectIdWhenCommitted() throws Exception {
    executeDummyTxs(db,42);
    org.neo4j.internal.kernel.api.Transaction tx=newTransaction(AUTH_DISABLED);
    tx.dataWrite().nodeCreate();
    tx.success();
    long previousCommittedTxId=lastCommittedTxId(db);
    assertEquals(previousCommittedTxId + 1,tx.closeTransaction());
    assertFalse(tx.isOpen());
  }
  @Test public void txReturnsCorrectIdWhenRolledBack() throws Exception {
    executeDummyTxs(db,42);
    org.neo4j.internal.kernel.api.Transaction tx=newTransaction(AUTH_DISABLED);
    tx.dataWrite().nodeCreate();
    tx.failure();
    assertEquals(KernelTransaction.ROLLBACK,tx.closeTransaction());
    assertFalse(tx.isOpen());
  }
  @Test public void txReturnsCorrectIdWhenMarkedForTermination() throws Exception {
    executeDummyTxs(db,42);
    org.neo4j.internal.kernel.api.Transaction tx=newTransaction(AUTH_DISABLED);
    tx.dataWrite().nodeCreate();
    tx.markForTermination(Status.Transaction.Terminated);
    assertEquals(KernelTransaction.ROLLBACK,tx.closeTransaction());
    assertFalse(tx.isOpen());
  }
  @Test public void txReturnsCorrectIdWhenFailedAndMarkedForTermination() throws Exception {
    executeDummyTxs(db,42);
    org.neo4j.internal.kernel.api.Transaction tx=newTransaction(AUTH_DISABLED);
    tx.dataWrite().nodeCreate();
    tx.failure();
    tx.markForTermination(Status.Transaction.Terminated);
    assertEquals(KernelTransaction.ROLLBACK,tx.closeTransaction());
    assertFalse(tx.isOpen());
  }
  @Test public void txReturnsCorrectIdWhenReadOnly() throws Exception {
    executeDummyTxs(db,42);
    org.neo4j.internal.kernel.api.Transaction tx=newTransaction();
    try (NodeCursor node=tx.cursors().allocateNodeCursor()){
      tx.dataRead().singleNode(1,node);
      node.next();
    }
     tx.success();
    assertEquals(KernelTransaction.READ_ONLY,tx.closeTransaction());
    assertFalse(tx.isOpen());
  }
  private static void executeDummyTxs(  GraphDatabaseService db,  int count){
    for (int i=0; i < count; i++) {
      try (Transaction tx=db.beginTx()){
        db.createNode();
        tx.success();
      }
     }
  }
  private static long lastCommittedTxId(  GraphDatabaseAPI db){
    TransactionIdStore txIdStore=db.getDependencyResolver().resolveDependency(TransactionIdStore.class);
    return txIdStore.getLastCommittedTransactionId();
  }
  private IndexReference createIndex(  org.neo4j.internal.kernel.api.Transaction transaction) throws SchemaKernelException, InvalidTransactionTypeKernelException {
    TokenWrite tokenWrite=transaction.tokenWrite();
    SchemaWrite schemaWrite=transaction.schemaWrite();
    LabelSchemaDescriptor schemaDescriptor=forLabel(tokenWrite.labelGetOrCreateForName("hello"),tokenWrite.propertyKeyGetOrCreateForName("hepp"));
    return schemaWrite.indexCreate(schemaDescriptor);
  }
  private String getOrCreateSchemaState(  String key,  final String maybeSetThisState){
    try (Transaction tx=db.beginTx()){
      KernelTransaction ktx=statementContextSupplier.getKernelTransactionBoundToThisThread(true);
      String state=ktx.schemaRead().schemaStateGetOrCreate(key,s -> maybeSetThisState);
      tx.success();
      return state;
    }
   }
  private boolean schemaStateContains(  String key){
    try (Transaction tx=db.beginTx()){
      KernelTransaction ktx=statementContextSupplier.getKernelTransactionBoundToThisThread(true);
      final AtomicBoolean result=new AtomicBoolean(true);
      ktx.schemaRead().schemaStateGetOrCreate(key,s -> {
        result.set(false);
        return null;
      }
);
      tx.success();
      return result.get();
    }
   }
}
