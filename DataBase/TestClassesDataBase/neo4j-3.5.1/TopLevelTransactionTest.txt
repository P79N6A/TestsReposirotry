public class TopLevelTransactionTest {
  @Test public void shouldThrowTransientExceptionOnTransientKernelException() throws Exception {
    KernelTransaction kernelTransaction=mock(KernelTransaction.class);
    when(kernelTransaction.isOpen()).thenReturn(true);
    doThrow(new TransactionFailureException(Status.Transaction.ConstraintsChanged,"Proving that TopLevelTransaction does the right thing")).when(kernelTransaction).close();
    TopLevelTransaction transaction=new TopLevelTransaction(kernelTransaction);
    transaction.success();
    try {
      transaction.close();
      fail("Should have failed");
    }
 catch (    TransientTransactionFailureException e) {
    }
  }
  @Test public void shouldThrowTransactionExceptionOnTransientKernelException() throws Exception {
    KernelTransaction kernelTransaction=mock(KernelTransaction.class);
    when(kernelTransaction.isOpen()).thenReturn(true);
    doThrow(new RuntimeException("Just a random failure")).when(kernelTransaction).close();
    TopLevelTransaction transaction=new TopLevelTransaction(kernelTransaction);
    transaction.success();
    try {
      transaction.close();
      fail("Should have failed");
    }
 catch (    org.neo4j.graphdb.TransactionFailureException e) {
    }
  }
  @Test public void shouldLetThroughTransientFailureException() throws Exception {
    KernelTransaction kernelTransaction=mock(KernelTransaction.class);
    when(kernelTransaction.isOpen()).thenReturn(true);
    doThrow(new TransientDatabaseFailureException("Just a random failure")).when(kernelTransaction).close();
    TopLevelTransaction transaction=new TopLevelTransaction(kernelTransaction);
    transaction.success();
    try {
      transaction.close();
      fail("Should have failed");
    }
 catch (    TransientFailureException e) {
    }
  }
  @Test public void shouldShowTransactionTerminatedExceptionAsTransient() throws Exception {
    KernelTransaction kernelTransaction=mock(KernelTransaction.class);
    doReturn(true).when(kernelTransaction).isOpen();
    RuntimeException error=new TransactionTerminatedException(Status.Transaction.Terminated);
    doThrow(error).when(kernelTransaction).close();
    TopLevelTransaction transaction=new TopLevelTransaction(kernelTransaction);
    transaction.success();
    try {
      transaction.close();
      fail("Should have failed");
    }
 catch (    Exception e) {
      assertThat(e,instanceOf(TransientTransactionFailureException.class));
      assertSame(error,e.getCause());
    }
  }
  @Test public void shouldReturnTerminationReason(){
    KernelTransaction kernelTransaction=mock(KernelTransaction.class);
    when(kernelTransaction.getReasonIfTerminated()).thenReturn(Optional.empty()).thenReturn(Optional.of(Status.Transaction.Terminated));
    TopLevelTransaction tx=new TopLevelTransaction(kernelTransaction);
    Optional<Status> terminationReason1=tx.terminationReason();
    Optional<Status> terminationReason2=tx.terminationReason();
    assertFalse(terminationReason1.isPresent());
    assertTrue(terminationReason2.isPresent());
    assertEquals(Status.Transaction.Terminated,terminationReason2.get());
  }
}
