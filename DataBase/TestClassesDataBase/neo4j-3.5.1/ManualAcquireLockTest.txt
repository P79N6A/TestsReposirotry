public class ManualAcquireLockTest {
  public final DatabaseRule db=new ImpermanentDatabaseRule();
  public final GraphTransactionRule tx=new GraphTransactionRule(db);
  @Rule public final TestRule chain=RuleChain.outerRule(db).around(tx);
  private Worker worker;
  @Before public void doBefore(){
    worker=new Worker();
  }
  @After public void doAfter(){
    worker.close();
  }
  @Test public void releaseReleaseManually() throws Exception {
    String key="name";
    Node node=getGraphDb().createNode();
    tx.success();
    Transaction current=tx.begin();
    Lock nodeLock=current.acquireWriteLock(node);
    worker.beginTx();
    try {
      worker.setProperty(node,key,"ksjd");
      fail("Shouldn't be able to grab it");
    }
 catch (    Exception ignored) {
    }
    nodeLock.release();
    worker.setProperty(node,key,"yo");
    try {
      worker.finishTx();
    }
 catch (    ExecutionException e) {
    }
  }
  @Test public void canOnlyReleaseOnce(){
    Node node=getGraphDb().createNode();
    tx.success();
    Transaction current=tx.begin();
    Lock nodeLock=current.acquireWriteLock(node);
    nodeLock.release();
    try {
      nodeLock.release();
      fail("Shouldn't be able to release more than once");
    }
 catch (    IllegalStateException e) {
    }
  }
  @Test public void makeSureNodeStaysLockedEvenAfterManualRelease() throws Exception {
    String key="name";
    Node node=getGraphDb().createNode();
    tx.success();
    Transaction current=tx.begin();
    Lock nodeLock=current.acquireWriteLock(node);
    node.setProperty(key,"value");
    nodeLock.release();
    worker.beginTx();
    try {
      worker.setProperty(node,key,"ksjd");
      fail("Shouldn't be able to grab it");
    }
 catch (    Exception ignored) {
    }
    tx.success();
    try {
      worker.finishTx();
    }
 catch (    ExecutionException e) {
    }
  }
  private GraphDatabaseService getGraphDb(){
    return db.getGraphDatabaseAPI();
  }
private class State {
    private final GraphDatabaseService graphDb;
    private Transaction tx;
    State(    GraphDatabaseService graphDb){
      this.graphDb=graphDb;
    }
  }
private class Worker extends OtherThreadExecutor<State> {
    Worker(){
      super("other thread",new State(getGraphDb()));
    }
    void beginTx() throws Exception {
      execute((WorkerCommand<State,Void>)state -> {
        state.tx=state.graphDb.beginTx();
        return null;
      }
);
    }
    void finishTx() throws Exception {
      execute((WorkerCommand<State,Void>)state -> {
        state.tx.success();
        state.tx.close();
        return null;
      }
);
    }
    void setProperty(    final Node node,    final String key,    final Object value) throws Exception {
      execute(state -> {
        node.setProperty(key,value);
        return null;
      }
,2,SECONDS);
    }
  }
}
