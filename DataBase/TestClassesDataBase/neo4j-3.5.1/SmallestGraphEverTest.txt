public class SmallestGraphEverTest extends TraversalTestBase {
  @Before public void setup(){
    createGraph("1 TO 2");
  }
  @Test public void testUnrestrictedTraversalCanFinishDepthFirst(){
    execute(getGraphDb().traversalDescription().depthFirst(),Uniqueness.NONE);
  }
  @Test public void testUnrestrictedTraversalCanFinishBreadthFirst(){
    execute(getGraphDb().traversalDescription().breadthFirst(),Uniqueness.NONE);
  }
  @Test public void testNodeGlobalTraversalCanFinishDepthFirst(){
    execute(getGraphDb().traversalDescription().depthFirst(),Uniqueness.NODE_GLOBAL);
  }
  @Test public void testNodeGlobalTraversalCanFinishBreadthFirst(){
    execute(getGraphDb().traversalDescription().breadthFirst(),Uniqueness.NODE_GLOBAL);
  }
  @Test public void testRelationshipGlobalTraversalCanFinishDepthFirst(){
    execute(getGraphDb().traversalDescription().depthFirst(),Uniqueness.RELATIONSHIP_GLOBAL);
  }
  @Test public void testRelationshipGlobalTraversalCanFinishBreadthFirst(){
    execute(getGraphDb().traversalDescription().breadthFirst(),Uniqueness.RELATIONSHIP_GLOBAL);
  }
  @Test public void testNodePathTraversalCanFinishDepthFirst(){
    execute(getGraphDb().traversalDescription().depthFirst(),Uniqueness.NODE_PATH);
  }
  @Test public void testNodePathTraversalCanFinishBreadthFirst(){
    execute(getGraphDb().traversalDescription().breadthFirst(),Uniqueness.NODE_PATH);
  }
  @Test public void testRelationshipPathTraversalCanFinishDepthFirst(){
    execute(getGraphDb().traversalDescription().depthFirst(),Uniqueness.RELATIONSHIP_PATH);
  }
  @Test public void testRelationshipPathTraversalCanFinishBreadthFirst(){
    execute(getGraphDb().traversalDescription().breadthFirst(),Uniqueness.RELATIONSHIP_PATH);
  }
  @Test public void testNodeRecentTraversalCanFinishDepthFirst(){
    execute(getGraphDb().traversalDescription().depthFirst(),Uniqueness.NODE_RECENT);
  }
  @Test public void testNodeRecentTraversalCanFinishBreadthFirst(){
    execute(getGraphDb().traversalDescription().breadthFirst(),Uniqueness.NODE_RECENT);
  }
  @Test public void testRelationshipRecentTraversalCanFinishDepthFirst(){
    execute(getGraphDb().traversalDescription().depthFirst(),Uniqueness.RELATIONSHIP_RECENT);
  }
  @Test public void testRelationshipRecentTraversalCanFinishBreadthFirst(){
    execute(getGraphDb().traversalDescription().breadthFirst(),Uniqueness.RELATIONSHIP_RECENT);
  }
  private void execute(  TraversalDescription traversal,  Uniqueness uniqueness){
    try (Transaction transaction=beginTx()){
      Traverser traverser=traversal.uniqueness(uniqueness).traverse(node("1"));
      assertNotEquals("empty traversal",0,Iterables.count(traverser));
    }
   }
  @Test public void testTraverseRelationshipsWithStartNodeNotIncluded(){
    try (Transaction transaction=beginTx()){
      TraversalDescription traversal=getGraphDb().traversalDescription().evaluator(excludeStartPosition());
      assertEquals(1,Iterables.count(traversal.traverse(node("1")).relationships()));
    }
   }
}
