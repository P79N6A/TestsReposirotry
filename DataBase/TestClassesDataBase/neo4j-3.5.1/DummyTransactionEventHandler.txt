private static class DummyTransactionEventHandler<T> implements TransactionEventHandler<T> {
  private final T object;
  private TransactionData receivedTransactionData;
  private T receivedState;
  private int counter;
  private Integer beforeCommit;
  private Integer afterCommit;
  private Integer afterRollback;
  DummyTransactionEventHandler(  T object){
    this.object=object;
  }
  @Override public void afterCommit(  TransactionData data,  T state){
    assertNotNull(data);
    this.receivedState=state;
    this.afterCommit=counter++;
  }
  @Override public void afterRollback(  TransactionData data,  T state){
    assertNotNull(data);
    this.receivedState=state;
    this.afterRollback=counter++;
  }
  @Override public T beforeCommit(  TransactionData data){
    assertNotNull(data);
    this.receivedTransactionData=data;
    this.beforeCommit=counter++;
    if (this.beforeCommit == 2) {
      new Exception("blabla").printStackTrace();
    }
    return object;
  }
  void reset(){
    receivedTransactionData=null;
    receivedState=null;
    counter=0;
    beforeCommit=null;
    afterCommit=null;
    afterRollback=null;
  }
}
