public class GetRelationshipPropertiesIT extends AbstractRestFunctionalTestBase {
  private static String baseRelationshipUri;
  private static FunctionalTestHelper functionalTestHelper;
  private static GraphDbHelper helper;
  @BeforeClass public static void setupServer(){
    functionalTestHelper=new FunctionalTestHelper(server());
    helper=functionalTestHelper.getGraphDbHelper();
    setupTheDatabase();
  }
  private static void setupTheDatabase(){
    long relationship=helper.createRelationship("LIKES");
    Map<String,Object> map=new HashMap<>();
    map.put("foo","bar");
    helper.setRelationshipProperties(relationship,map);
    baseRelationshipUri=functionalTestHelper.dataUri() + "relationship/" + relationship+ "/properties/";
  }
  @Test public void shouldGet200AndContentLengthForProperties(){
    long relId=helper.createRelationship("LIKES");
    helper.setRelationshipProperties(relId,Collections.singletonMap("foo","bar"));
    JaxRsResponse response=RestRequest.req().get(functionalTestHelper.dataUri() + "relationship/" + relId+ "/properties");
    assertEquals(200,response.getStatus());
    assertNotNull(response.getHeaders().get("Content-Length"));
    response.close();
  }
  @Test public void shouldGet404ForPropertiesOnNonExistentRelationship(){
    JaxRsResponse response=RestRequest.req().get(functionalTestHelper.dataUri() + "relationship/999999/properties");
    assertEquals(404,response.getStatus());
    response.close();
  }
  @Test public void shouldBeJSONContentTypeOnPropertiesResponse(){
    long relId=helper.createRelationship("LIKES");
    helper.setRelationshipProperties(relId,Collections.singletonMap("foo","bar"));
    JaxRsResponse response=RestRequest.req().get(functionalTestHelper.dataUri() + "relationship/" + relId+ "/properties");
    assertThat(response.getType().toString(),containsString(MediaType.APPLICATION_JSON));
    response.close();
  }
  private String getPropertyUri(  String key){
    return baseRelationshipUri + key;
  }
  @Test public void shouldGet404ForNoProperty(){
    JaxRsResponse response=RestRequest.req().get(getPropertyUri("baz"));
    assertEquals(404,response.getStatus());
    response.close();
  }
  @Test public void shouldGet404ForNonExistingRelationship(){
    String uri=functionalTestHelper.dataUri() + "relationship/999999/properties/foo";
    JaxRsResponse response=RestRequest.req().get(uri);
    assertEquals(404,response.getStatus());
    response.close();
  }
  @Test public void shouldBeValidJSONOnResponse(){
    JaxRsResponse response=RestRequest.req().get(getPropertyUri("foo"));
    assertThat(response.getType().toString(),containsString(MediaType.APPLICATION_JSON));
    assertNotNull(JsonHelper.createJsonFrom(response.getEntity()));
    response.close();
  }
  @Test public void shouldReturnEmptyMapForEmptyProperties(){
    String node=HTTP.POST(server().baseUri().resolve("db/data/node").toString()).location();
    String rel=HTTP.POST(node + "/relationships",quotedJson("{'to':'" + node + "', "+ "'type':'LOVES'}")).location();
    HTTP.Response res=HTTP.GET(rel + "/properties");
    MatcherAssert.assertThat(res.rawContent(),equalTo("{ }"));
  }
}
