public class StoreLockerLifecycleAdapterTest {
  @Rule public final TestDirectory directory=TestDirectory.testDirectory();
  @Test public void shouldAllowDatabasesToUseFilesetsSequentially(){
    newDb().shutdown();
    newDb().shutdown();
  }
  @Test public void shouldNotAllowDatabasesToUseFilesetsConcurrently(){
    shouldNotAllowDatabasesToUseFilesetsConcurrently(stringMap());
  }
  @Test public void shouldNotAllowDatabasesToUseFilesetsConcurrentlyEvenIfTheyAreInReadOnlyMode(){
    shouldNotAllowDatabasesToUseFilesetsConcurrently(stringMap(GraphDatabaseSettings.read_only.name(),Settings.TRUE));
  }
  private void shouldNotAllowDatabasesToUseFilesetsConcurrently(  Map<String,String> config){
    GraphDatabaseService db=newDb();
    try {
      new TestGraphDatabaseFactory().newEmbeddedDatabaseBuilder(storeDir()).setConfig(config).newGraphDatabase();
      fail();
    }
 catch (    RuntimeException e) {
      assertThat(e.getCause().getCause(),instanceOf(StoreLockException.class));
    }
 finally {
      db.shutdown();
    }
  }
  private GraphDatabaseService newDb(){
    return new TestGraphDatabaseFactory().newEmbeddedDatabase(storeDir());
  }
  private File storeDir(){
    return directory.absolutePath();
  }
}
