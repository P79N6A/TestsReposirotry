public abstract class FileSystemRule<FS extends FileSystemAbstraction> extends ExternalResource implements FileSystemAbstraction, Supplier<FileSystemAbstraction> {
  protected volatile FS fs;
  protected FileSystemRule(  FS fs){
    this.fs=fs;
  }
  @Override protected void after(){
    try {
      fs.close();
    }
 catch (    IOException e) {
      throw new UncheckedIOException(e);
    }
    super.after();
  }
  @Override public FS get(){
    return fs;
  }
  @Override public void close() throws IOException {
    fs.close();
  }
  @Override public FileWatcher fileWatcher() throws IOException {
    return fs.fileWatcher();
  }
  @Override public StoreChannel open(  File fileName,  OpenMode openMode) throws IOException {
    return fs.open(fileName,openMode);
  }
  @Override public OutputStream openAsOutputStream(  File fileName,  boolean append) throws IOException {
    return fs.openAsOutputStream(fileName,append);
  }
  @Override public InputStream openAsInputStream(  File fileName) throws IOException {
    return fs.openAsInputStream(fileName);
  }
  @Override public Reader openAsReader(  File fileName,  Charset charset) throws IOException {
    return fs.openAsReader(fileName,charset);
  }
  @Override public Writer openAsWriter(  File fileName,  Charset charset,  boolean append) throws IOException {
    return fs.openAsWriter(fileName,charset,append);
  }
  @Override public StoreChannel create(  File fileName) throws IOException {
    return fs.create(fileName);
  }
  @Override public boolean fileExists(  File file){
    return fs.fileExists(file);
  }
  @Override public boolean mkdir(  File fileName){
    return fs.mkdir(fileName);
  }
  @Override public void mkdirs(  File fileName) throws IOException {
    fs.mkdirs(fileName);
  }
  @Override public long getFileSize(  File fileName){
    return fs.getFileSize(fileName);
  }
  @Override public boolean deleteFile(  File fileName){
    return fs.deleteFile(fileName);
  }
  @Override public void deleteRecursively(  File directory) throws IOException {
    fs.deleteRecursively(directory);
  }
  @Override public void renameFile(  File from,  File to,  CopyOption... copyOptions) throws IOException {
    fs.renameFile(from,to,copyOptions);
  }
  @Override public File[] listFiles(  File directory){
    return fs.listFiles(directory);
  }
  @Override public File[] listFiles(  File directory,  FilenameFilter filter){
    return fs.listFiles(directory,filter);
  }
  @Override public boolean isDirectory(  File file){
    return fs.isDirectory(file);
  }
  @Override public void moveToDirectory(  File file,  File toDirectory) throws IOException {
    fs.moveToDirectory(file,toDirectory);
  }
  @Override public void copyToDirectory(  File file,  File toDirectory) throws IOException {
    fs.copyToDirectory(file,toDirectory);
  }
  @Override public void copyFile(  File from,  File to) throws IOException {
    fs.copyFile(from,to);
  }
  @Override public void copyRecursively(  File fromDirectory,  File toDirectory) throws IOException {
    fs.copyRecursively(fromDirectory,toDirectory);
  }
  @Override public void truncate(  File path,  long size) throws IOException {
    fs.truncate(path,size);
  }
  @Override public long lastModifiedTime(  File file){
    return fs.lastModifiedTime(file);
  }
  @Override public void deleteFileOrThrow(  File file) throws IOException {
    fs.deleteFileOrThrow(file);
  }
  @Override public Stream<FileHandle> streamFilesRecursive(  File directory) throws IOException {
    return fs.streamFilesRecursive(directory);
  }
  @Override public int hashCode(){
    return fs.hashCode();
  }
  @Override public boolean equals(  Object obj){
    return fs.equals(obj);
  }
  @Override public String toString(){
    return fs.toString();
  }
}
