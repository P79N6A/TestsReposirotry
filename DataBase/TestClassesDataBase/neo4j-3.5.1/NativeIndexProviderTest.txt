@RunWith(Parameterized.class) public class NativeIndexProviderTest extends NativeIndexProviderTests {
  @Parameterized.Parameters(name="{index} {0}") public static Object[][] data(){
    return new Object[][]{{"Number",(ProviderFactory)NumberIndexProvider::new,POPULATING,Values.of(1)},{"String",(ProviderFactory)StringIndexProvider::new,POPULATING,Values.of("string")},{"Spatial",spatialProviderFactory(),ONLINE,Values.pointValue(CoordinateReferenceSystem.WGS84,0,0)},{"Temporal",(ProviderFactory)TemporalIndexProvider::new,ONLINE,DateValue.date(1,1,1)},{"Generic",genericProviderFactory(),POPULATING,Values.of(1)}};
  }
  private static ProviderFactory genericProviderFactory(){
    return (pageCache,fs,dir,monitor,collector,readOnly) -> new GenericNativeIndexProvider(dir,pageCache,fs,monitor,collector,readOnly,Config.defaults());
  }
  private static ProviderFactory spatialProviderFactory(){
    return (pageCache,fs,dir,monitor,collector,readOnly) -> new SpatialIndexProvider(pageCache,fs,dir,monitor,collector,readOnly,Config.defaults());
  }
  @Parameterized.Parameter public String name;
  @Parameterized.Parameter(1) public ProviderFactory providerFactory;
  @Parameterized.Parameter(2) public InternalIndexState expectedStateOnNonExistingSubIndex;
  @Parameterized.Parameter(3) public Value someValue;
  @Override protected InternalIndexState expectedStateOnNonExistingSubIndex(){
    return expectedStateOnNonExistingSubIndex;
  }
  @Override protected Value someValue(){
    return someValue;
  }
  @Override IndexProvider newProvider(  PageCache pageCache,  FileSystemAbstraction fs,  IndexDirectoryStructure.Factory dir,  IndexProvider.Monitor monitor,  RecoveryCleanupWorkCollector collector,  boolean readOnly){
    return providerFactory.create(pageCache,fs,dir,monitor,collector,readOnly);
  }
@FunctionalInterface private interface ProviderFactory {
    IndexProvider create(    PageCache pageCache,    FileSystemAbstraction fs,    IndexDirectoryStructure.Factory dir,    IndexProvider.Monitor monitor,    RecoveryCleanupWorkCollector collector,    boolean readOnly);
  }
}
