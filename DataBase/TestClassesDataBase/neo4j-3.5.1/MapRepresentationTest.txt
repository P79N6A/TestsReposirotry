public class MapRepresentationTest {
  @Test public void shouldSerializeMapWithSimpleTypes() throws Exception {
    MapRepresentation rep=new MapRepresentation(map("nulls",null,"strings","a string","numbers",42,"booleans",true));
    OutputFormat format=new OutputFormat(new JsonFormat(),new URI("http://localhost/"),null);
    String serializedMap=format.assemble(rep);
    Map<String,Object> map=JsonHelper.jsonToMap(serializedMap);
    assertThat(map.get("nulls"),is(nullValue()));
    assertThat(map.get("strings"),is("a string"));
    assertThat(map.get("numbers"),is(42));
    assertThat(map.get("booleans"),is(true));
  }
  @Test @SuppressWarnings("unchecked") public void shouldSerializeMapWithArrayTypes() throws Exception {
    MapRepresentation rep=new MapRepresentation(map("strings",new String[]{"a string","another string"},"numbers",new int[]{42,87},"booleans",new boolean[]{true,false},"Booleans",new Boolean[]{TRUE,FALSE}));
    OutputFormat format=new OutputFormat(new JsonFormat(),new URI("http://localhost/"),null);
    String serializedMap=format.assemble(rep);
    Map<String,Object> map=JsonHelper.jsonToMap(serializedMap);
    assertThat(map.get("strings"),is(asList("a string","another string")));
    assertThat(map.get("numbers"),is(asList(42,87)));
    assertThat(map.get("booleans"),is(asList(true,false)));
    assertThat(map.get("Booleans"),is(asList(true,false)));
  }
  @Test @SuppressWarnings("unchecked") public void shouldSerializeMapWithListsOfSimpleTypes() throws Exception {
    MapRepresentation rep=new MapRepresentation(map("lists of nulls",asList(null,null),"lists of strings",asList("a string","another string"),"lists of numbers",asList(23,87,42),"lists of booleans",asList(true,false,true)));
    OutputFormat format=new OutputFormat(new JsonFormat(),new URI("http://localhost/"),null);
    String serializedMap=format.assemble(rep);
    Map<String,Object> map=JsonHelper.jsonToMap(serializedMap);
    assertThat(map.get("lists of nulls"),is(asList(null,null)));
    assertThat(map.get("lists of strings"),is(asList("a string","another string")));
    assertThat(map.get("lists of numbers"),is(asList(23,87,42)));
    assertThat(map.get("lists of booleans"),is(asList(true,false,true)));
  }
  @Test public void shouldSerializeMapWithMapsOfSimpleTypes() throws Exception {
    MapRepresentation rep=new MapRepresentation(map("maps with nulls",map("nulls",null),"maps with strings",map("strings","a string"),"maps with numbers",map("numbers",42),"maps with booleans",map("booleans",true)));
    OutputFormat format=new OutputFormat(new JsonFormat(),new URI("http://localhost/"),null);
    String serializedMap=format.assemble(rep);
    Map<String,Object> map=JsonHelper.jsonToMap(serializedMap);
    assertThat(((Map)map.get("maps with nulls")).get("nulls"),is(nullValue()));
    assertThat(((Map)map.get("maps with strings")).get("strings"),is("a string"));
    assertThat(((Map)map.get("maps with numbers")).get("numbers"),is(42));
    assertThat(((Map)map.get("maps with booleans")).get("booleans"),is(true));
  }
  @Test @SuppressWarnings("unchecked") public void shouldSerializeArbitrarilyNestedMapsAndLists() throws Exception {
    MapRepresentation rep=new MapRepresentation(map("a map with a list in it",map("a list",asList(42,87)),"a list with a map in it",asList(map("foo","bar","baz",false))));
    OutputFormat format=new OutputFormat(new JsonFormat(),new URI("http://localhost/"),null);
    String serializedMap=format.assemble(rep);
    Map<String,Object> map=JsonHelper.jsonToMap(serializedMap);
    assertThat(((Map)map.get("a map with a list in it")).get("a list"),is(asList(42,87)));
    assertThat(((Map)((List)map.get("a list with a map in it")).get(0)).get("foo"),is("bar"));
    assertThat(((Map)((List)map.get("a list with a map in it")).get(0)).get("baz"),is(false));
  }
  @Test public void shouldSerializeMapsWithNullKeys() throws Exception {
    Object[] values={null,"string",42,true,new String[]{"a string","another string"},new int[]{42,87},new boolean[]{true,false},asList(true,false,true),map("numbers",42,null,"something"),map("a list",asList(42,87),null,asList("a","b")),asList(map("foo","bar",null,false))};
    for (    Object value : values) {
      MapRepresentation rep=new MapRepresentation(map((Object)null,value));
      OutputFormat format=new OutputFormat(new JsonFormat(),new URI("http://localhost/"),null);
      String serializedMap=format.assemble(rep);
      Map<String,Object> map=JsonHelper.jsonToMap(serializedMap);
      assertEquals(1,map.size());
      Object actual=map.get("null");
      if (value == null) {
        assertNull(actual);
      }
 else {
        assertNotNull(actual);
      }
    }
  }
}
