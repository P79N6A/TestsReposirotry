public final class AssertingStructureBuilder<Input,Result> implements StructureBuilder<Input,Result> {
  public static <I,O>AssertingStructureBuilder<I,O> asserting(  StructureBuilder<I,O> builder){
    return new AssertingStructureBuilder<>(builder);
  }
  public static Matcher<Exception> exception(  Class<? extends Exception> type,  String message){
    return exception(type,equalTo(message));
  }
  public static Matcher<Exception> exception(  Class<? extends Exception> type,  Matcher<String> message){
    return new TypeSafeMatcher<Exception>(type){
      @Override protected boolean matchesSafely(      Exception item){
        return message.matches(item.getMessage());
      }
      @Override public void describeTo(      Description description){
        description.appendText("Exception of type ").appendValue(type.getName()).appendText(" with message ").appendDescriptionOf(message);
      }
    }
;
  }
  private final Map<String,Input> input=new LinkedHashMap<>();
  private final StructureBuilder<Input,Result> builder;
  private AssertingStructureBuilder(  StructureBuilder<Input,Result> builder){
    this.builder=builder;
  }
  public void assertThrows(  Class<? extends Exception> type,  String message){
    assertThrows(exception(type,message));
  }
  public void assertThrows(  Matcher<Exception> matches){
    try {
      for (      Map.Entry<String,Input> entry : input.entrySet()) {
        builder.add(entry.getKey(),entry.getValue());
      }
      builder.build();
    }
 catch (    Exception expected) {
      assertThat(expected,matches);
      return;
    }
    fail("expected exception");
  }
  @Override public AssertingStructureBuilder<Input,Result> add(  String field,  Input value){
    input.put(field,value);
    return this;
  }
  @Override public Result build(){
    throw new UnsupportedOperationException("do not use this method");
  }
}
