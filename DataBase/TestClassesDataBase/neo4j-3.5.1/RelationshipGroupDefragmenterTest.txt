@RunWith(Parameterized.class) public class RelationshipGroupDefragmenterTest {
  private static final Configuration CONFIG=Configuration.DEFAULT;
  @Parameters public static Collection<Object[]> formats(){
    return asList(new Object[]{Standard.LATEST_RECORD_FORMATS,1},new Object[]{new ForcedSecondaryUnitRecordFormats(Standard.LATEST_RECORD_FORMATS),2});
  }
  private final TestDirectory directory=TestDirectory.testDirectory();
  private final RandomRule random=new RandomRule();
  private final DefaultFileSystemRule fileSystemRule=new DefaultFileSystemRule();
  @Rule public final RuleChain ruleChain=RuleChain.outerRule(directory).around(random).around(fileSystemRule);
  @Parameter(0) public RecordFormats format;
  @Parameter(1) public int units;
  private BatchingNeoStores stores;
  private JobScheduler jobScheduler;
  @Before public void start() throws IOException {
    jobScheduler=new ThreadPoolJobScheduler();
    stores=BatchingNeoStores.batchingNeoStores(fileSystemRule.get(),directory.absolutePath(),format,CONFIG,NullLogService.getInstance(),AdditionalInitialIds.EMPTY,Config.defaults(),jobScheduler);
    stores.createNew();
  }
  @After public void stop() throws Exception {
    stores.close();
    jobScheduler.close();
  }
  @Test public void shouldDefragmentRelationshipGroupsWhenAllDense(){
    int nodeCount=100;
    int relationshipTypeCount=50;
    RecordStore<RelationshipGroupRecord> groupStore=stores.getTemporaryRelationshipGroupStore();
    RelationshipGroupRecord groupRecord=groupStore.newRecord();
    RecordStore<NodeRecord> nodeStore=stores.getNodeStore();
    NodeRecord nodeRecord=nodeStore.newRecord();
    long cursor=0;
    for (int typeId=relationshipTypeCount - 1; typeId >= 0; typeId--) {
      for (long nodeId=0; nodeId < nodeCount; nodeId++, cursor++) {
        groupRecord.initialize(true,typeId,cursor,cursor + 1,cursor + 2,nodeId,4);
        groupRecord.setId(groupStore.nextId());
        groupStore.updateRecord(groupRecord);
        if (typeId == 0) {
          nodeRecord.initialize(true,-1,true,groupRecord.getId(),0);
          nodeRecord.setId(nodeId);
          nodeStore.updateRecord(nodeRecord);
          nodeStore.setHighestPossibleIdInUse(nodeId);
        }
      }
    }
    defrag(nodeCount,groupStore);
    verifyGroupsAreSequentiallyOrderedByNode();
  }
  @Test public void shouldDefragmentRelationshipGroupsWhenSomeDense(){
    int nodeCount=100;
    int relationshipTypeCount=50;
    RecordStore<RelationshipGroupRecord> groupStore=stores.getTemporaryRelationshipGroupStore();
    RelationshipGroupRecord groupRecord=groupStore.newRecord();
    RecordStore<NodeRecord> nodeStore=stores.getNodeStore();
    NodeRecord nodeRecord=nodeStore.newRecord();
    long cursor=0;
    BitSet initializedNodes=new BitSet();
    for (int typeId=relationshipTypeCount - 1; typeId >= 0; typeId--) {
      for (int nodeId=0; nodeId < nodeCount; nodeId++, cursor++) {
        double comparison=typeId == 0 || initializedNodes.get(nodeId) ? 0.1 : 0.001;
        if (random.nextDouble() < comparison) {
          groupRecord.initialize(true,typeId,cursor,cursor + 1,cursor + 2,nodeId,4);
          groupRecord.setId(groupStore.nextId());
          groupStore.updateRecord(groupRecord);
          if (!initializedNodes.get(nodeId)) {
            nodeRecord.initialize(true,-1,true,groupRecord.getId(),0);
            nodeRecord.setId(nodeId);
            nodeStore.updateRecord(nodeRecord);
            nodeStore.setHighestPossibleIdInUse(nodeId);
            initializedNodes.set(nodeId);
          }
        }
      }
    }
    defrag(nodeCount,groupStore);
    verifyGroupsAreSequentiallyOrderedByNode();
  }
  private void defrag(  int nodeCount,  RecordStore<RelationshipGroupRecord> groupStore){
    Monitor monitor=mock(Monitor.class);
    RelationshipGroupDefragmenter defragmenter=new RelationshipGroupDefragmenter(CONFIG,ExecutionMonitors.invisible(),monitor,AUTO_WITHOUT_PAGECACHE);
    long memory=groupStore.getHighId() * 15 + 200;
    defragmenter.run(memory,stores,nodeCount);
    verify(monitor,atLeast(2)).defragmentingNodeRange(anyLong(),anyLong());
    verify(monitor,atMost(10)).defragmentingNodeRange(anyLong(),anyLong());
  }
  private void verifyGroupsAreSequentiallyOrderedByNode(){
    RelationshipGroupStore store=stores.getRelationshipGroupStore();
    long firstId=store.getNumberOfReservedLowIds();
    long groupCount=store.getHighId() - firstId;
    RelationshipGroupRecord groupRecord=store.newRecord();
    PageCursor groupCursor=store.openPageCursorForReading(firstId);
    long highGroupId=store.getHighId();
    long currentNodeId=-1;
    int currentTypeId=-1;
    int newGroupCount=0;
    int currentGroupLength=0;
    for (long id=firstId; id < highGroupId; id++, newGroupCount++) {
      store.getRecordByCursor(id,groupRecord,CHECK,groupCursor);
      if (!groupRecord.inUse()) {
        assertTrue(units > 1);
        assertTrue(currentGroupLength > 0);
        currentGroupLength--;
        continue;
      }
      long nodeId=groupRecord.getOwningNode();
      assertTrue("Expected a group for node >= " + currentNodeId + ", but was "+ nodeId+ " in "+ groupRecord,nodeId >= currentNodeId);
      if (nodeId != currentNodeId) {
        currentNodeId=nodeId;
        currentTypeId=-1;
        if (units > 1) {
          assertEquals(0,currentGroupLength);
        }
        currentGroupLength=0;
      }
      currentGroupLength++;
      assertTrue("Expected this group to have a next of current + " + units + " OR NULL, "+ "but was "+ groupRecord.toString(),groupRecord.getNext() == groupRecord.getId() + 1 || groupRecord.getNext() == Record.NO_NEXT_RELATIONSHIP.intValue());
      assertTrue("Expected " + groupRecord + " to have type > "+ currentTypeId,groupRecord.getType() > currentTypeId);
      currentTypeId=groupRecord.getType();
    }
    assertEquals(groupCount,newGroupCount);
  }
}
