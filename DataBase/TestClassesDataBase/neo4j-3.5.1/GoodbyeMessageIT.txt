public class GoodbyeMessageIT extends BoltV3TransportBase {
  @Test public void shouldCloseConnectionInConnected() throws Throwable {
    connection.connect(address).send(util.acceptedVersions(3,2,1,0));
    assertThat(connection,eventuallyReceives(new byte[]{0,0,0,3}));
    connection.send(util.chunk(GOODBYE_MESSAGE));
    assertThat(connection,serverImmediatelyDisconnects());
  }
  @Test public void shouldCloseConnectionInReady() throws Throwable {
    negotiateBoltV3();
    connection.send(util.chunk(GOODBYE_MESSAGE));
    assertThat(connection,serverImmediatelyDisconnects());
  }
  @Test public void shouldCloseConnectionInStreaming() throws Throwable {
    negotiateBoltV3();
    connection.send(util.chunk(new RunMessage("UNWIND [1,2,3] AS a RETURN a, a * a AS a_squared")));
    Matcher<Map<? extends String,?>> entryFieldMatcher=hasEntry(is("fields"),equalTo(asList("a","a_squared")));
    assertThat(connection,util.eventuallyReceives(msgSuccess(allOf(entryFieldMatcher,hasKey("t_first")))));
    connection.send(util.chunk(GOODBYE_MESSAGE));
    assertThat(connection,serverImmediatelyDisconnects());
    assertThat(server,eventuallyClosesTransaction());
  }
  @Test public void shouldCloseConnectionInFailed() throws Throwable {
    negotiateBoltV3();
    connection.send(util.chunk(new RunMessage("I am sending you to failed state!")));
    assertThat(connection,util.eventuallyReceives(msgFailure(Status.Statement.SyntaxError,String.format("Invalid input 'I': expected <init> (line 1, column 1 (offset: 0))%n" + "\"I am sending you to failed state!\"%n" + " ^"))));
    connection.send(util.chunk(GOODBYE_MESSAGE));
    assertThat(connection,serverImmediatelyDisconnects());
  }
  @Test public void shouldCloseConnectionInTxReady() throws Throwable {
    negotiateBoltV3();
    connection.send(util.chunk(new BeginMessage()));
    assertThat(connection,util.eventuallyReceives(msgSuccess()));
    connection.send(util.chunk(GOODBYE_MESSAGE));
    assertThat(connection,serverImmediatelyDisconnects());
    assertThat(server,eventuallyClosesTransaction());
  }
  @Test public void shouldCloseConnectionInTxStreaming() throws Throwable {
    negotiateBoltV3();
    connection.send(util.chunk(new BeginMessage(),new RunMessage("UNWIND [1,2,3] AS a RETURN a, a * a AS a_squared")));
    Matcher<Map<? extends String,?>> entryFieldMatcher=hasEntry(is("fields"),equalTo(asList("a","a_squared")));
    assertThat(connection,util.eventuallyReceives(msgSuccess(),msgSuccess(allOf(entryFieldMatcher,hasKey("t_first")))));
    connection.send(util.chunk(GOODBYE_MESSAGE));
    assertThat(connection,serverImmediatelyDisconnects());
    assertThat(server,eventuallyClosesTransaction());
  }
  @Test public void shouldDropConnectionImmediatelyAfterGoodbye() throws Throwable {
    negotiateBoltV3();
    connection.send(util.chunk(GOODBYE_MESSAGE,ResetMessage.INSTANCE,new RunMessage("RETURN 1")));
    assertThat(connection,serverImmediatelyDisconnects());
  }
  private static Matcher<Neo4jWithSocket> eventuallyClosesTransaction(){
    return new TypeSafeMatcher<Neo4jWithSocket>(){
      @Override public void describeTo(      org.hamcrest.Description description){
        description.appendText("Eventually close all transactions");
      }
      @Override protected boolean matchesSafely(      Neo4jWithSocket server){
        BooleanSupplier condition=() -> getActiveTransactions(server).size() == 0;
        try {
          Predicates.await(condition,2,TimeUnit.SECONDS);
          return true;
        }
 catch (        Exception e) {
          return false;
        }
      }
      private Set<KernelTransactionHandle> getActiveTransactions(      Neo4jWithSocket server){
        GraphDatabaseAPI gdb=(GraphDatabaseAPI)server.graphDatabaseService();
        return gdb.getDependencyResolver().resolveDependency(KernelTransactions.class).activeTransactions();
      }
    }
;
  }
}
