public class ThrottlingBeanSnapshotProxyTest {
  private final Clock clock=mock(Clock.class);
  private final TestBean target=mock(TestBean.class);
  private final TestBean proxy=ThrottlingBeanSnapshotProxy.newThrottlingBeanSnapshotProxy(TestBean.class,target,100,clock);
  @Test public void doNotProxyIfUpdateIntervalIsZero(){
    final TestBean result=ThrottlingBeanSnapshotProxy.newThrottlingBeanSnapshotProxy(TestBean.class,target,0,clock);
    assertSame(target,result);
  }
  @Test public void throttleGetterInvocation(){
    when(clock.millis()).thenReturn(100L);
    proxy.getLong();
    proxy.getLong();
    verify(target,times(1)).getLong();
    when(clock.millis()).thenReturn(199L);
    proxy.getLong();
    verify(target,times(1)).getLong();
    when(clock.millis()).thenReturn(200L);
    proxy.getLong();
    proxy.getLong();
    verify(target,times(2)).getLong();
    verifyNoMoreInteractions(target);
  }
  @Test public void dontThrottleMethodsReturningVoid(){
    when(clock.millis()).thenReturn(100L);
    proxy.returnVoid();
    proxy.returnVoid();
    verify(target,times(2)).returnVoid();
    verifyNoMoreInteractions(target);
  }
  @Test public void dontThrottleMethodsWithArgs(){
    when(clock.millis()).thenReturn(100L);
    proxy.notGetter(1);
    proxy.notGetter(2);
    verify(target,times(2)).notGetter(anyLong());
    verifyNoMoreInteractions(target);
  }
private interface TestBean {
    void returnVoid();
    long getLong();
    long notGetter(    long x);
  }
}
