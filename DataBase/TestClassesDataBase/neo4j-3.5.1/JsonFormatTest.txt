public class JsonFormatTest {
  private OutputFormat json;
  @Before public void createOutputFormat() throws Exception {
    json=new OutputFormat(new JsonFormat(),new URI("http://localhost/"),null);
  }
  @Test public void canFormatString(){
    String entity=json.assemble(ValueRepresentation.string("expected value"));
    assertEquals(entity,"\"expected value\"");
  }
  @Test public void canFormatListOfStrings(){
    String entity=json.assemble(ListRepresentation.strings("hello","world"));
    String expectedString=JsonHelper.createJsonFrom(Arrays.asList("hello","world"));
    assertEquals(expectedString,entity);
  }
  @Test public void canFormatInteger(){
    String entity=json.assemble(ValueRepresentation.number(10));
    assertEquals("10",entity);
  }
  @Test public void canFormatEmptyObject(){
    String entity=json.assemble(new MappingRepresentation("empty"){
      @Override protected void serialize(      MappingSerializer serializer){
      }
    }
);
    assertEquals(JsonHelper.createJsonFrom(Collections.emptyMap()),entity);
  }
  @Test public void canFormatObjectWithStringField(){
    String entity=json.assemble(new MappingRepresentation("string"){
      @Override protected void serialize(      MappingSerializer serializer){
        serializer.putString("key","expected string");
      }
    }
);
    assertEquals(JsonHelper.createJsonFrom(Collections.singletonMap("key","expected string")),entity);
  }
  @Test public void canFormatObjectWithUriField(){
    String entity=json.assemble(new MappingRepresentation("uri"){
      @Override protected void serialize(      MappingSerializer serializer){
        serializer.putRelativeUri("URL","subpath");
      }
    }
);
    assertEquals(JsonHelper.createJsonFrom(Collections.singletonMap("URL","http://localhost/subpath")),entity);
  }
  @Test public void canFormatObjectWithNestedObject(){
    String entity=json.assemble(new MappingRepresentation("nesting"){
      @Override protected void serialize(      MappingSerializer serializer){
        serializer.putMapping("nested",new MappingRepresentation("data"){
          @Override protected void serialize(          MappingSerializer nested){
            nested.putString("data","expected data");
          }
        }
);
      }
    }
);
    assertEquals(JsonHelper.createJsonFrom(Collections.singletonMap("nested",Collections.singletonMap("data","expected data"))),entity);
  }
  @Test public void canFormatNestedMapsAndLists() throws Exception {
    String entity=json.assemble(new MappingRepresentation("test"){
      @Override protected void serialize(      MappingSerializer serializer){
        ArrayList<Representation> maps=new ArrayList<>();
        maps.add(new MappingRepresentation("map"){
          @Override protected void serialize(          MappingSerializer serializer){
            serializer.putString("foo","bar");
          }
        }
);
        serializer.putList("foo",new ServerListRepresentation(RepresentationType.MAP,maps));
      }
    }
);
    assertEquals("bar",((Map)((List)JsonHelper.jsonToMap(entity).get("foo")).get(0)).get("foo"));
  }
}
