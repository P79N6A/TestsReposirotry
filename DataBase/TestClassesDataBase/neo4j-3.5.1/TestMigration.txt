public class TestMigration {
  @Rule public final DefaultFileSystemRule fileSystemRule=new DefaultFileSystemRule();
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  @Test public void providerGetsFilledInAutomatically(){
    Map<String,String> correctConfig=MapUtil.stringMap("type","exact",IndexManager.PROVIDER,"lucene");
    File storeDir=testDirectory.storeDir();
    Neo4jTestCase.deleteFileOrDirectory(storeDir);
    GraphDatabaseService graphDb=startDatabase(storeDir);
    try (Transaction transaction=graphDb.beginTx()){
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forNodes("default")));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forNodes("wo-provider",MapUtil.stringMap("type","exact"))));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forNodes("w-provider",MapUtil.stringMap("type","exact",IndexManager.PROVIDER,"lucene"))));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forRelationships("default")));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forRelationships("wo-provider",MapUtil.stringMap("type","exact"))));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forRelationships("w-provider",MapUtil.stringMap("type","exact",IndexManager.PROVIDER,"lucene"))));
      transaction.success();
    }
     graphDb.shutdown();
    removeProvidersFromIndexDbFile(testDirectory.databaseLayout());
    graphDb=startDatabase(storeDir);
    try (Transaction ignored=graphDb.beginTx()){
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forNodes("default")));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forNodes("wo-provider",MapUtil.stringMap("type","exact"))));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forNodes("w-provider",MapUtil.stringMap("type","exact",IndexManager.PROVIDER,"lucene"))));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forRelationships("default")));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forRelationships("wo-provider",MapUtil.stringMap("type","exact"))));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forRelationships("w-provider",MapUtil.stringMap("type","exact",IndexManager.PROVIDER,"lucene"))));
    }
     graphDb.shutdown();
    removeProvidersFromIndexDbFile(testDirectory.databaseLayout());
    graphDb=startDatabase(storeDir);
    try (Transaction ignored=graphDb.beginTx()){
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forNodes("default")));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forNodes("wo-provider")));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forNodes("w-provider")));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forRelationships("default")));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forRelationships("wo-provider")));
      assertEquals(correctConfig,graphDb.index().getConfiguration(graphDb.index().forRelationships("w-provider")));
    }
     graphDb.shutdown();
  }
  private static GraphDatabaseService startDatabase(  File storeDir){
    return new TestGraphDatabaseFactory().newEmbeddedDatabase(storeDir);
  }
  private void removeProvidersFromIndexDbFile(  DatabaseLayout databaseLayout){
    IndexConfigStore indexStore=new IndexConfigStore(databaseLayout,fileSystemRule.get());
    for (    Class<? extends PropertyContainer> cls : new Class[]{Node.class,Relationship.class}) {
      for (      String name : indexStore.getNames(cls)) {
        Map<String,String> config=indexStore.get(cls,name);
        config=new HashMap<>(config);
        config.remove(IndexManager.PROVIDER);
        indexStore.set(Node.class,name,config);
      }
    }
  }
}
