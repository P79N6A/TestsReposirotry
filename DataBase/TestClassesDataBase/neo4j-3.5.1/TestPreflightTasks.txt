public class TestPreflightTasks {
  @Test public void shouldPassWithNoRules(){
    PreFlightTasks check=new PreFlightTasks(NullLogProvider.getInstance());
    assertTrue(check.run());
  }
  @Test public void shouldRunAllHealthChecksToCompletionIfNonFail(){
    PreFlightTasks check=new PreFlightTasks(NullLogProvider.getInstance(),getPassingRules());
    assertTrue(check.run());
  }
  @Test public void shouldFailIfOneOrMoreHealthChecksFail(){
    PreFlightTasks check=new PreFlightTasks(NullLogProvider.getInstance(),getWithOneFailingRule());
    assertFalse(check.run());
  }
  @Test public void shouldLogFailedRule(){
    AssertableLogProvider logProvider=new AssertableLogProvider();
    PreFlightTasks check=new PreFlightTasks(logProvider,getWithOneFailingRule());
    check.run();
    logProvider.assertExactly(inLog(PreFlightTasks.class).error("blah blah"));
  }
  @Test public void shouldAdvertiseFailedRule(){
    PreFlightTasks check=new PreFlightTasks(NullLogProvider.getInstance(),getWithOneFailingRule());
    check.run();
    assertNotNull(check.failedTask());
  }
  private PreflightTask[] getWithOneFailingRule(){
    PreflightTask[] rules=new PreflightTask[5];
    for (int i=0; i < rules.length; i++) {
      rules[i]=new PreflightTask(){
        @Override public boolean run(){
          return true;
        }
        @Override public String getFailureMessage(){
          return "blah blah";
        }
      }
;
    }
    rules[rules.length / 2]=new PreflightTask(){
      @Override public boolean run(){
        return false;
      }
      @Override public String getFailureMessage(){
        return "blah blah";
      }
    }
;
    return rules;
  }
  private PreflightTask[] getPassingRules(){
    PreflightTask[] rules=new PreflightTask[5];
    for (int i=0; i < rules.length; i++) {
      rules[i]=new PreflightTask(){
        @Override public boolean run(){
          return true;
        }
        @Override public String getFailureMessage(){
          return "blah blah";
        }
      }
;
    }
    return rules;
  }
  @Rule public SuppressOutput suppressOutput=suppressAll();
}
