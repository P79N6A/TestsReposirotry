/** 
 * Test reading committed node and relationships from disk.
 */
public class RecordStorageReaderNodeAndRelTest extends RecordStorageReaderTestBase {
  @Test public void shouldTellIfNodeExists(){
    long created=createLabeledNode(db,map()).getId();
    long createdAndRemoved=createLabeledNode(db,map()).getId();
    long neverExisted=createdAndRemoved + 99;
    try (Transaction tx=db.beginTx()){
      db.getNodeById(createdAndRemoved).delete();
      tx.success();
    }
     assertTrue(nodeExists(created));
    assertFalse(nodeExists(createdAndRemoved));
    assertFalse(nodeExists(neverExisted));
  }
  @Test public void shouldTellIfRelExists(){
    long node=createLabeledNode(db,map()).getId();
    long created;
    long createdAndRemoved;
    long neverExisted;
    try (Transaction tx=db.beginTx()){
      created=db.createNode().createRelationshipTo(db.createNode(),withName("Banana")).getId();
      createdAndRemoved=db.createNode().createRelationshipTo(db.createNode(),withName("Banana")).getId();
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      db.getRelationshipById(createdAndRemoved).delete();
      tx.success();
    }
     neverExisted=created + 99;
    assertTrue(relationshipExists(node));
    assertFalse(relationshipExists(createdAndRemoved));
    assertFalse(relationshipExists(neverExisted));
  }
  private boolean nodeExists(  long id){
    try (StorageNodeCursor node=storageReader.allocateNodeCursor()){
      node.single(id);
      return node.next();
    }
   }
  private boolean relationshipExists(  long id){
    try (StorageRelationshipScanCursor relationship=storageReader.allocateRelationshipScanCursor()){
      relationship.single(id);
      return relationship.next();
    }
   }
}
