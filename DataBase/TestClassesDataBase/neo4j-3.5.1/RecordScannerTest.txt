class RecordScannerTest {
  @Test void shouldProcessRecordsSequentiallyAndUpdateProgress() throws Exception {
    ProgressMonitorFactory.MultiPartBuilder progressBuilder=mock(ProgressMonitorFactory.MultiPartBuilder.class);
    ProgressListener progressListener=mock(ProgressListener.class);
    when(progressBuilder.progressForPart(anyString(),anyLong())).thenReturn(progressListener);
    @SuppressWarnings("unchecked") BoundedIterable<Integer> store=mock(BoundedIterable.class);
    when(store.iterator()).thenReturn(asList(42,75,192).iterator());
    @SuppressWarnings("unchecked") RecordProcessor<Integer> recordProcessor=mock(RecordProcessor.class);
    RecordScanner<Integer> scanner=new SequentialRecordScanner<>("our test task",Statistics.NONE,1,store,progressBuilder,recordProcessor);
    scanner.run();
    verifyProcessCloseAndDone(recordProcessor,store,progressListener);
  }
  @Test void shouldProcessRecordsParallelAndUpdateProgress() throws Exception {
    ProgressMonitorFactory.MultiPartBuilder progressBuilder=mock(ProgressMonitorFactory.MultiPartBuilder.class);
    ProgressListener progressListener=mock(ProgressListener.class);
    when(progressBuilder.progressForPart(anyString(),anyLong())).thenReturn(progressListener);
    @SuppressWarnings("unchecked") BoundedIterable<Integer> store=mock(BoundedIterable.class);
    when(store.iterator()).thenReturn(asList(42,75,192).iterator());
    @SuppressWarnings("unchecked") RecordProcessor<Integer> recordProcessor=mock(RecordProcessor.class);
    RecordScanner<Integer> scanner=new ParallelRecordScanner<>("our test task",Statistics.NONE,1,store,progressBuilder,recordProcessor,CacheAccess.EMPTY,QueueDistribution.ROUND_ROBIN);
    scanner.run();
    verifyProcessCloseAndDone(recordProcessor,store,progressListener);
  }
  private static void verifyProcessCloseAndDone(  RecordProcessor<Integer> recordProcessor,  BoundedIterable<Integer> store,  ProgressListener progressListener) throws Exception {
    verify(recordProcessor).process(42);
    verify(recordProcessor).process(75);
    verify(recordProcessor).process(192);
    verify(recordProcessor).close();
    verify(store).close();
    verify(progressListener,times(3)).add(1);
    verify(progressListener).done();
  }
}
