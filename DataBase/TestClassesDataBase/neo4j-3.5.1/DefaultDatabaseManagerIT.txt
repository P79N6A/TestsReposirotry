@ExtendWith(TestDirectoryExtension.class) class DefaultDatabaseManagerIT {
  @Inject private TestDirectory testDirectory;
  private GraphDatabaseService database;
  @BeforeEach void setUp(){
    database=new GraphDatabaseFactory().newEmbeddedDatabase(testDirectory.storeDir());
  }
  @AfterEach void tearDown(){
    database.shutdown();
  }
  @Test void createDatabase(){
    DatabaseManager databaseManager=getDatabaseManager();
    assertThrows(IllegalStateException.class,() -> databaseManager.createDatabase(GraphDatabaseSettings.DEFAULT_DATABASE_NAME));
  }
  @Test void lookupExistingDatabase(){
    DatabaseManager databaseManager=getDatabaseManager();
    Optional<GraphDatabaseFacade> database=databaseManager.getDatabaseFacade(GraphDatabaseSettings.DEFAULT_DATABASE_NAME);
    assertTrue(database.isPresent());
  }
  @Test void shutdownDatabaseOnStop() throws Throwable {
    DatabaseManager databaseManager=getDatabaseManager();
    databaseManager.stop();
    assertFalse(database.isAvailable(0));
  }
  private DatabaseManager getDatabaseManager(){
    return ((GraphDatabaseAPI)database).getDependencyResolver().resolveDependency(DatabaseManager.class);
  }
}
