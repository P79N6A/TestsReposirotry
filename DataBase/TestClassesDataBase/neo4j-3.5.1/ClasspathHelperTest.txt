public class ClasspathHelperTest {
  @Test public void shouldNotFailForNullClassLoader(){
    assertThat(fullClasspathFor(null),not(empty()));
  }
  @Test public void shouldWorkForClassLoaderWithNoParent() throws Exception {
    ClassLoader loader=new URLClassLoader(urls("file:///file1","file:///file2"),null);
    Set<String> elements=fullClasspathFor(loader);
    assertThat(elements,hasItems(pathTo("file1"),pathTo("file2")));
  }
  @Test public void shouldWorkForClassLoaderWithSingleParent() throws Exception {
    ClassLoader parent=new URLClassLoader(urls("file:///file1","file:///file2"),null);
    ClassLoader child=new URLClassLoader(urls("file:///file3"),parent);
    Set<String> elements=fullClasspathFor(child);
    assertThat(elements,hasItems(pathTo("file1"),pathTo("file2"),pathTo("file3")));
  }
  @Test public void shouldWorkForClassLoaderHierarchy() throws Exception {
    ClassLoader loader1=new URLClassLoader(urls("file:///file1"),null);
    ClassLoader loader2=new URLClassLoader(urls("file:///file2"),loader1);
    ClassLoader loader3=new URLClassLoader(urls("file:///file3"),loader2);
    ClassLoader loader4=new URLClassLoader(urls("file:///file4"),loader3);
    Set<String> elements=fullClasspathFor(loader4);
    assertThat(elements,hasItems(pathTo("file1"),pathTo("file2"),pathTo("file3"),pathTo("file4")));
  }
  @Test public void shouldReturnCorrectClasspathString() throws Exception {
    ClassLoader parent=new URLClassLoader(urls("file:///foo"),null);
    ClassLoader child=new URLClassLoader(urls("file:///bar"),parent);
    String classpath=fullClasspathStringFor(child);
    assertThat(classpath,containsString(pathTo("bar") + File.pathSeparator + pathTo("foo")));
  }
  private static URL[] urls(  String... strings) throws MalformedURLException {
    URL[] urls=new URL[strings.length];
    for (int i=0; i < strings.length; i++) {
      urls[i]=new URL(strings[i]);
    }
    return urls;
  }
  private static String pathTo(  String fileName) throws IOException {
    File currentDir=new File(".").getCanonicalFile();
    File root=currentDir.getParentFile().getCanonicalFile();
    while (root.getParentFile() != null) {
      root=root.getParentFile().getCanonicalFile();
    }
    return new File(root,fileName).getCanonicalPath();
  }
}
