@RunWith(Parameterized.class) public class QueryExecutionTypeTest {
  @Parameterized.Parameters(name="{0}") public static List<Object[]> cases(){
    return Arrays.asList(verify(that(query(READ_ONLY)).canContainResults()),verify(that(query(READ_WRITE)).canContainResults().canUpdateData()),verify(that(query(WRITE)).canUpdateData()),verify(that(query(SCHEMA_WRITE)).canUpdateSchema()),verify(that(profiled(READ_ONLY)).isExplained().isProfiled().canContainResults()),verify(that(profiled(READ_WRITE)).isExplained().isProfiled().canContainResults().canUpdateData()),verify(that(profiled(WRITE)).isExplained().isProfiled().canUpdateData()),verify(that(profiled(SCHEMA_WRITE)).isExplained().isProfiled().canUpdateSchema()),verify(that(explained(READ_ONLY)).isExplained().isOnlyExplained()),verify(that(explained(READ_WRITE)).isExplained().isOnlyExplained()),verify(that(explained(WRITE)).isExplained().isOnlyExplained()),verify(that(explained(SCHEMA_WRITE)).isExplained().isOnlyExplained()),verify(thatQueryOf(explained(READ_ONLY)).canContainResults()),verify(thatQueryOf(explained(READ_WRITE)).canContainResults().canUpdateData()),verify(thatQueryOf(explained(WRITE)).canUpdateData()),verify(thatQueryOf(explained(SCHEMA_WRITE)).canUpdateSchema()));
  }
  private final Assumptions expected;
  @Test public void verify(){
    QueryExecutionType executionType=expected.type();
    assertEquals(expected.isProfiled,executionType.isProfiled());
    assertEquals(expected.requestedExecutionPlanDescription,executionType.requestedExecutionPlanDescription());
    assertEquals(expected.isExplained,executionType.isExplained());
    assertEquals(expected.canContainResults,executionType.canContainResults());
    assertEquals(expected.canUpdateData,executionType.canUpdateData());
    assertEquals(expected.canUpdateSchema,executionType.canUpdateSchema());
  }
  @Test public void noneOtherLikeIt(){
    for (    QueryExecutionType.QueryType queryType : QueryExecutionType.QueryType.values()) {
      for (      QueryExecutionType type : new QueryExecutionType[]{query(queryType),profiled(queryType),explained(queryType)}) {
        if (type != expected.type() && !(expected.type().isExplained() && type.isExplained())) {
          assertFalse(expected.type().toString(),expected.isProfiled == type.isProfiled() && expected.requestedExecutionPlanDescription == type.requestedExecutionPlanDescription() && expected.isExplained == type.isExplained() && expected.canContainResults == type.canContainResults() && expected.canUpdateData == type.canUpdateData() && expected.canUpdateSchema == type.canUpdateSchema());
        }
      }
    }
  }
  public QueryExecutionTypeTest(  Assumptions expected){
    this.expected=expected;
  }
  private static Object[] verify(  Assumptions assumptions){
    return new Object[]{assumptions};
  }
  private static Assumptions that(  QueryExecutionType type){
    return new Assumptions(type,false);
  }
  private static Assumptions thatQueryOf(  QueryExecutionType type){
    return new Assumptions(type,true);
  }
static class Assumptions {
    final QueryExecutionType type;
    final boolean convertToQuery;
    boolean isProfiled;
    boolean requestedExecutionPlanDescription;
    boolean isExplained;
    boolean canContainResults;
    boolean canUpdateData;
    boolean canUpdateSchema;
    Assumptions(    QueryExecutionType type,    boolean convertToQuery){
      this.type=type;
      this.convertToQuery=convertToQuery;
    }
    @Override public String toString(){
      StringBuilder result=new StringBuilder(type.toString());
      if (convertToQuery) {
        result.append(" (as query)");
      }
      String sep=": ";
      for (      Field field : getClass().getDeclaredFields()) {
        if (field.getType() == boolean.class) {
          boolean value;
          field.setAccessible(true);
          try {
            value=field.getBoolean(this);
          }
 catch (          IllegalAccessException e) {
            throw new RuntimeException(e);
          }
          result.append(sep).append('.').append(field.getName()).append("() == ").append(value);
          sep=", ";
        }
      }
      return result.toString();
    }
    public Assumptions isProfiled(){
      this.isProfiled=true;
      return this;
    }
    public Assumptions isExplained(){
      this.requestedExecutionPlanDescription=true;
      return this;
    }
    public Assumptions isOnlyExplained(){
      this.isExplained=true;
      return this;
    }
    public Assumptions canContainResults(){
      this.canContainResults=true;
      return this;
    }
    public Assumptions canUpdateData(){
      this.canUpdateData=true;
      return this;
    }
    public Assumptions canUpdateSchema(){
      this.canUpdateSchema=true;
      return this;
    }
    public QueryExecutionType type(){
      return convertToQuery ? query(type.queryType()) : type;
    }
  }
}
