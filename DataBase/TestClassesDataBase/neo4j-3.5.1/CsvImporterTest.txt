@ExtendWith({TestDirectoryExtension.class,SuppressOutputExtension.class}) class CsvImporterTest {
  @Inject private TestDirectory testDir;
  @Test void writesReportToSpecifiedReportFile() throws Exception {
    File dbDir=testDir.directory("db");
    File logDir=testDir.directory("logs");
    File reportLocation=testDir.file("the_report");
    File inputFile=testDir.file("foobar.csv");
    List<String> lines=Collections.singletonList("foo\\tbar\\tbaz");
    Files.write(inputFile.toPath(),lines,Charset.defaultCharset());
    try (RealOutsideWorld outsideWorld=new RealOutsideWorld(System.out,System.err,new ByteArrayInputStream(new byte[0]))){
      Config config=Config.builder().withSettings(additionalConfig()).withSetting(GraphDatabaseSettings.database_path,dbDir.getAbsolutePath()).withSetting(GraphDatabaseSettings.logs_directory,logDir.getAbsolutePath()).build();
      CsvImporter csvImporter=new CsvImporter(Args.parse(String.format("--report-file=%s",reportLocation.getAbsolutePath()),String.format("--nodes=%s",inputFile.getAbsolutePath()),"--delimiter=TAB"),config,outsideWorld);
      csvImporter.doImport();
    }
     assertTrue(reportLocation.exists());
  }
  private Map<String,String> additionalConfig(){
    return stringMap(GraphDatabaseSettings.database_path.name(),getDatabasePath(),GraphDatabaseSettings.logs_directory.name(),getLogsDirectory());
  }
  private String getDatabasePath(){
    return testDir.databaseDir().getAbsolutePath();
  }
  private String getLogsDirectory(){
    return testDir.directory("logs").getAbsolutePath();
  }
}
