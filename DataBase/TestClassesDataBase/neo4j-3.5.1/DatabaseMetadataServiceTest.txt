public class DatabaseMetadataServiceTest {
  private GraphDatabaseFacade db;
  private long relId;
  @Before public void setup(){
    db=(GraphDatabaseFacade)new TestGraphDatabaseFactory().newImpermanentDatabase();
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode();
      node.createRelationshipTo(db.createNode(),withName("a"));
      node.createRelationshipTo(db.createNode(),withName("b"));
      relId=node.createRelationshipTo(db.createNode(),withName("c")).getId();
      tx.success();
    }
   }
  @After public void tearDown(){
    db.shutdown();
  }
  @Test public void shouldAdvertiseRelationshipTypesThatCurrentlyExistInTheDatabase() throws Throwable {
    try (Transaction tx=db.beginTx()){
      db.getRelationshipById(relId).delete();
      tx.success();
    }
     Database database=new WrappedDatabase(db);
    DatabaseMetadataService service=new DatabaseMetadataService(database);
    try (Transaction tx=db.beginTx()){
      Response response=service.getRelationshipTypes(false);
      assertEquals(200,response.getStatus());
      List<Map<String,Object>> jsonList=JsonHelper.jsonToList(response.getEntity().toString());
      assertEquals(3,jsonList.size());
    }
     database.stop();
  }
  @Test public void shouldAdvertiseRelationshipTypesThatCurrentlyInUseInTheDatabase() throws Throwable {
    try (Transaction tx=db.beginTx()){
      db.getRelationshipById(relId).delete();
      tx.success();
    }
     Database database=new WrappedDatabase(db);
    DatabaseMetadataService service=new DatabaseMetadataService(database);
    try (Transaction tx=db.beginTx()){
      Response response=service.getRelationshipTypes(true);
      assertEquals(200,response.getStatus());
      List<Map<String,Object>> jsonList=JsonHelper.jsonToList(response.getEntity().toString());
      assertEquals(2,jsonList.size());
    }
     database.stop();
  }
}
