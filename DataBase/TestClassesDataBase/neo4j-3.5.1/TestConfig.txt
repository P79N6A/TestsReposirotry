private static class TestConfig implements LoadableConfig {
  public static final Setting<Integer> integer=new BaseSetting<Integer>(){
    @Override public String valueDescription(){
      return "an Integer";
    }
    @Override public String name(){
      return "myInt";
    }
    @Override public void withScope(    Function<String,String> scopingRule){
    }
    @Override public String getDefaultValue(){
      return "1";
    }
    @Override public Integer from(    Configuration config){
      return config.get(this);
    }
    @Override public Integer apply(    Function<String,String> provider){
      String val=provider.apply(name());
      if (val == null) {
        val=getDefaultValue();
      }
      return Integer.parseInt(val);
    }
  }
;
  @Description("A string setting") public static final Setting<String> string=new StringSetting(){
    @Override public String apply(    Function<String,String> provider){
      String val=provider.apply(name());
      if (val == null) {
        val=getDefaultValue();
      }
      return val;
    }
    @Override public String name(){
      return "myString";
    }
    @Override public void withScope(    Function<String,String> function){
    }
    @Override public String getDefaultValue(){
      return "bob";
    }
    @Override public String from(    Configuration configuration){
      return configuration.get(this);
    }
  }
;
  @Description("A deprecated string setting") @Deprecated @ReplacedBy("myString") public static final Setting<String> oldString=new StringSetting(){
    @Override public String apply(    Function<String,String> provider){
      String val=provider.apply(name());
      if (val == null) {
        val=getDefaultValue();
      }
      return val;
    }
    @Override public String name(){
      return "myOldString";
    }
    @Override public void withScope(    Function<String,String> function){
    }
    @Override public String getDefaultValue(){
      return "tim";
    }
    @Override public String from(    Configuration configuration){
      return configuration.get(this);
    }
  }
;
  @SuppressWarnings("unused") @Description("A private setting which is not accessible") private static final Setting<String> ignoredSetting=new StringSetting(){
    @Override public String apply(    Function<String,String> provider){
      return provider.apply(name());
    }
    @Override public String name(){
      return "myString";
    }
    @Override public void withScope(    Function<String,String> function){
    }
    @Override public String getDefaultValue(){
      return "bob";
    }
    @Override public String from(    Configuration configuration){
      return configuration.get(this);
    }
  }
;
  @Description("A dynamic string setting") @Dynamic public static final Setting<String> dynamic=new StringSetting(){
    @Override public String apply(    Function<String,String> provider){
      String val=provider.apply(name());
      if (val == null) {
        val=getDefaultValue();
      }
      return val;
    }
    @Override public String name(){
      return "myDynamicProperty";
    }
    @Override public void withScope(    Function<String,String> scopingRule){
    }
    @Override public String getDefaultValue(){
      return "defaultDynamic";
    }
    @Override public String from(    Configuration configuration){
      return configuration.get(this);
    }
  }
;
}
