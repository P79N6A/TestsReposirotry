private static class ComparativeLogging implements RecordAccess {
  private final RecordAccess access;
  private final InvocationLog log;
  ComparativeLogging(  RecordAccess access,  InvocationLog log){
    this.access=access;
    this.log=log;
  }
  private <T extends AbstractBaseRecord>LoggingReference<T> logging(  RecordReference<T> actual){
    return new LoggingReference<>(actual,log);
  }
  @Override public RecordReference<DynamicRecord> schema(  long id){
    return logging(access.schema(id));
  }
  @Override public RecordReference<NodeRecord> node(  long id){
    return logging(access.node(id));
  }
  @Override public RecordReference<RelationshipRecord> relationship(  long id){
    return logging(access.relationship(id));
  }
  @Override public RecordReference<RelationshipGroupRecord> relationshipGroup(  long id){
    return logging(access.relationshipGroup(id));
  }
  @Override public RecordReference<PropertyRecord> property(  long id){
    return logging(access.property(id));
  }
  @Override public RecordReference<RelationshipTypeTokenRecord> relationshipType(  int id){
    return logging(access.relationshipType(id));
  }
  @Override public RecordReference<PropertyKeyTokenRecord> propertyKey(  int id){
    return logging(access.propertyKey(id));
  }
  @Override public RecordReference<DynamicRecord> string(  long id){
    return logging(access.string(id));
  }
  @Override public RecordReference<DynamicRecord> array(  long id){
    return logging(access.array(id));
  }
  @Override public RecordReference<DynamicRecord> relationshipTypeName(  int id){
    return logging(access.relationshipTypeName(id));
  }
  @Override public RecordReference<DynamicRecord> nodeLabels(  long id){
    return logging(access.nodeLabels(id));
  }
  @Override public RecordReference<LabelTokenRecord> label(  int id){
    return logging(access.label(id));
  }
  @Override public RecordReference<DynamicRecord> labelName(  int id){
    return logging(access.labelName(id));
  }
  @Override public RecordReference<DynamicRecord> propertyKeyName(  int id){
    return logging(access.propertyKeyName(id));
  }
  @Override public RecordReference<NeoStoreRecord> graph(){
    return logging(access.graph());
  }
  @Override public boolean shouldCheck(  long id,  MultiPassStore store){
    return access.shouldCheck(id,store);
  }
  @Override public CacheAccess cacheAccess(){
    return access.cacheAccess();
  }
  @Override public Iterator<PropertyRecord> rawPropertyChain(  long firstId){
    return access.rawPropertyChain(firstId);
  }
}
