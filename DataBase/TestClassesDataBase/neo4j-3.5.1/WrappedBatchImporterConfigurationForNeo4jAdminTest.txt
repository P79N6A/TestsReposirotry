class WrappedBatchImporterConfigurationForNeo4jAdminTest {
  @Test void shouldDelegateDenseNodeThreshold(){
    shouldDelegate(expected -> new Configuration(){
      @Override public int denseNodeThreshold(){
        return expected;
      }
    }
,Configuration::denseNodeThreshold,1,20);
  }
  @Test void shouldDelegateMovingAverageSize(){
    shouldDelegate(expected -> new Configuration(){
      @Override public int movingAverageSize(){
        return expected;
      }
    }
,Configuration::movingAverageSize,100,200);
  }
  @Test void shouldDelegateSequentialBackgroundFlushing(){
    shouldDelegate(expected -> new Configuration(){
      @Override public boolean sequentialBackgroundFlushing(){
        return expected;
      }
    }
,Configuration::sequentialBackgroundFlushing,true,false);
  }
  @Test void shouldDelegateBatchSize(){
    shouldDelegate(expected -> new Configuration(){
      @Override public int batchSize(){
        return expected;
      }
    }
,Configuration::batchSize,100,200);
  }
  @Test void shouldOverrideMaxNumberOfProcessors(){
    shouldOverride(expected -> new Configuration(){
      @Override public int batchSize(){
        return expected;
      }
    }
,Configuration::maxNumberOfProcessors,DEFAULT.maxNumberOfProcessors() + 1,DEFAULT.maxNumberOfProcessors() + 10);
  }
  @Test void shouldDelegateParallelRecordWrites(){
    shouldDelegate(expected -> new Configuration(){
      @Override public boolean parallelRecordWrites(){
        return expected;
      }
    }
,Configuration::parallelRecordWrites,true,false);
  }
  @Test void shouldDelegateParallelRecordReads(){
    shouldDelegate(expected -> new Configuration(){
      @Override public boolean parallelRecordReads(){
        return expected;
      }
    }
,Configuration::parallelRecordReads,true,false);
  }
  @Test void shouldDelegateHighIO(){
    shouldDelegate(expected -> new Configuration(){
      @Override public boolean highIO(){
        return expected;
      }
    }
,Configuration::highIO,true,false);
  }
  @Test void shouldDelegateMaxMemoryUsage(){
    shouldDelegate(expected -> new Configuration(){
      @Override public long maxMemoryUsage(){
        return expected;
      }
    }
,Configuration::maxMemoryUsage,kibiBytes(10),kibiBytes(20));
  }
  @Test void shouldDelegateAllowCacheAllocationOnHeap(){
    shouldDelegate(expected -> new Configuration(){
      @Override public boolean allowCacheAllocationOnHeap(){
        return expected;
      }
    }
,Configuration::allowCacheAllocationOnHeap,true,false);
  }
  @SafeVarargs private final <T>void shouldDelegate(  Function<T,Configuration> configFactory,  Function<Configuration,T> getter,  T... expectedValues){
    for (    T expectedValue : expectedValues) {
      Configuration configuration=configFactory.apply(expectedValue);
      WrappedBatchImporterConfigurationForNeo4jAdmin wrapped=new WrappedBatchImporterConfigurationForNeo4jAdmin(configuration);
      assertEquals(expectedValue,getter.apply(wrapped));
    }
    assertEquals(getter.apply(DEFAULT),getter.apply(new WrappedBatchImporterConfigurationForNeo4jAdmin(DEFAULT)));
  }
  @SafeVarargs private final <T>void shouldOverride(  Function<T,Configuration> configFactory,  Function<Configuration,T> getter,  T... values){
    for (    T value : values) {
      Configuration configuration=configFactory.apply(value);
      WrappedBatchImporterConfigurationForNeo4jAdmin vanilla=new WrappedBatchImporterConfigurationForNeo4jAdmin(DEFAULT);
      WrappedBatchImporterConfigurationForNeo4jAdmin wrapped=new WrappedBatchImporterConfigurationForNeo4jAdmin(configuration);
      assertEquals(getter.apply(vanilla),getter.apply(wrapped));
    }
  }
}
