@ExtendWith(TestDirectoryExtension.class) class LoaderTest {
  @Inject private TestDirectory testDirectory;
  @Test void shouldGiveAClearErrorMessageIfTheArchiveDoesntExist(){
    Path archive=testDirectory.file("the-archive.dump").toPath();
    Path destination=testDirectory.file("the-destination").toPath();
    NoSuchFileException exception=assertThrows(NoSuchFileException.class,() -> new Loader().load(archive,destination,destination));
    assertEquals(archive.toString(),exception.getMessage());
  }
  @Test void shouldGiveAClearErrorMessageIfTheArchiveIsNotInGzipFormat() throws IOException {
    Path archive=testDirectory.file("the-archive.dump").toPath();
    Files.write(archive,singletonList("some incorrectly formatted data"));
    Path destination=testDirectory.file("the-destination").toPath();
    IncorrectFormat incorrectFormat=assertThrows(IncorrectFormat.class,() -> new Loader().load(archive,destination,destination));
    assertEquals(archive.toString(),incorrectFormat.getMessage());
  }
  @Test void shouldGiveAClearErrorMessageIfTheArchiveIsNotInTarFormat() throws IOException {
    Path archive=testDirectory.file("the-archive.dump").toPath();
    try (GzipCompressorOutputStream compressor=new GzipCompressorOutputStream(Files.newOutputStream(archive))){
      byte[] bytes=new byte[1000];
      new Random().nextBytes(bytes);
      compressor.write(bytes);
    }
     Path destination=testDirectory.file("the-destination").toPath();
    IncorrectFormat incorrectFormat=assertThrows(IncorrectFormat.class,() -> new Loader().load(archive,destination,destination));
    assertEquals(archive.toString(),incorrectFormat.getMessage());
  }
  @Test void shouldGiveAClearErrorIfTheDestinationAlreadyExists(){
    Path archive=testDirectory.file("the-archive.dump").toPath();
    Path destination=testDirectory.directory("the-destination").toPath();
    FileAlreadyExistsException exception=assertThrows(FileAlreadyExistsException.class,() -> new Loader().load(archive,destination,destination));
    assertEquals(destination.toString(),exception.getMessage());
  }
  @Test void shouldGiveAClearErrorIfTheDestinationTxLogAlreadyExists(){
    Path archive=testDirectory.file("the-archive.dump").toPath();
    Path destination=testDirectory.file("the-destination").toPath();
    Path txLogsDestination=testDirectory.directory("txLogsDestination").toPath();
    FileAlreadyExistsException exception=assertThrows(FileAlreadyExistsException.class,() -> new Loader().load(archive,destination,txLogsDestination));
    assertEquals(txLogsDestination.toString(),exception.getMessage());
  }
  @Test void shouldGiveAClearErrorMessageIfTheDestinationsParentDirectoryDoesntExist() throws IOException {
    Path archive=testDirectory.file("the-archive.dump").toPath();
    Path destination=Paths.get(testDirectory.absolutePath().getAbsolutePath(),"subdir","the-destination");
    NoSuchFileException noSuchFileException=assertThrows(NoSuchFileException.class,() -> new Loader().load(archive,destination,destination));
    assertEquals(destination.getParent().toString(),noSuchFileException.getMessage());
  }
  @Test void shouldGiveAClearErrorMessageIfTheTxLogsParentDirectoryDoesntExist(){
    Path archive=testDirectory.file("the-archive.dump").toPath();
    Path destination=testDirectory.file("destination").toPath();
    Path txLogsDestination=Paths.get(testDirectory.absolutePath().getAbsolutePath(),"subdir","txLogs");
    NoSuchFileException noSuchFileException=assertThrows(NoSuchFileException.class,() -> new Loader().load(archive,destination,txLogsDestination));
    assertEquals(txLogsDestination.getParent().toString(),noSuchFileException.getMessage());
  }
  @Test void shouldGiveAClearErrorMessageIfTheDestinationsParentDirectoryIsAFile() throws IOException {
    Path archive=testDirectory.file("the-archive.dump").toPath();
    Path destination=Paths.get(testDirectory.absolutePath().getAbsolutePath(),"subdir","the-destination");
    Files.write(destination.getParent(),new byte[0]);
    FileSystemException exception=assertThrows(FileSystemException.class,() -> new Loader().load(archive,destination,destination));
    assertEquals(destination.getParent().toString() + ": Not a directory",exception.getMessage());
  }
  @Test @DisabledOnOs(OS.WINDOWS) void shouldGiveAClearErrorMessageIfTheDestinationsParentDirectoryIsNotWritable() throws IOException {
    Path archive=testDirectory.file("the-archive.dump").toPath();
    Path destination=testDirectory.directory("subdir/the-destination").toPath();
    Files.createDirectories(destination.getParent());
    try (Closeable ignored=withPermissions(destination.getParent(),emptySet())){
      AccessDeniedException exception=assertThrows(AccessDeniedException.class,() -> new Loader().load(archive,destination,destination));
      assertEquals(destination.getParent().toString(),exception.getMessage());
    }
   }
  @Test @DisabledOnOs(OS.WINDOWS) void shouldGiveAClearErrorMessageIfTheTxLogsParentDirectoryIsNotWritable() throws IOException {
    Path archive=testDirectory.file("the-archive.dump").toPath();
    Path destination=testDirectory.file("destination").toPath();
    Path txLogsDirectory=testDirectory.directory("subdir/txLogs").toPath();
    Files.createDirectories(txLogsDirectory.getParent());
    try (Closeable ignored=withPermissions(txLogsDirectory.getParent(),emptySet())){
      AccessDeniedException exception=assertThrows(AccessDeniedException.class,() -> new Loader().load(archive,destination,txLogsDirectory));
      assertEquals(txLogsDirectory.getParent().toString(),exception.getMessage());
    }
   }
}
