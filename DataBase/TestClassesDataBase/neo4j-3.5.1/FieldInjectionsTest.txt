public class FieldInjectionsTest {
  @Rule public ExpectedException exception=ExpectedException.none();
  @Test public void shouldNotAllowClassesWithNonInjectedFields() throws Throwable {
    FieldInjections injections=new FieldInjections(new ComponentRegistry());
    exception.expect(ProcedureException.class);
    exception.expectMessage("Field `someState` on `ProcedureWithNonInjectedMemberFields` " + "is not annotated as a @Context and is not static. " + "If you want to store state along with your procedure, "+ "please use a static field.");
    injections.setters(ProcedureWithNonInjectedMemberFields.class);
  }
  @Test public void shouldNotAllowNonPublicFieldsForInjection() throws Throwable {
    FieldInjections injections=new FieldInjections(new ComponentRegistry());
    exception.expect(ProcedureException.class);
    exception.expectMessage("Field `someState` on `ProcedureWithPrivateMemberField` must be non-final and public.");
    injections.setters(ProcedureWithPrivateMemberField.class);
  }
  @Test public void staticFieldsAreAllowed() throws Throwable {
    FieldInjections injections=new FieldInjections(new ComponentRegistry());
    List<FieldInjections.FieldSetter> setters=injections.setters(ProcedureWithStaticFields.class);
    assertEquals(0,setters.size());
  }
  @Test public void inheritanceIsAllowed() throws Throwable {
    ComponentRegistry components=new ComponentRegistry();
    components.register(int.class,ctx -> 1337);
    FieldInjections injections=new FieldInjections(components);
    List<FieldInjections.FieldSetter> setters=injections.setters(ChildProcedure.class);
    ChildProcedure childProcedure=new ChildProcedure();
    for (    FieldInjections.FieldSetter setter : setters) {
      setter.apply(null,childProcedure);
    }
    assertEquals(1337,childProcedure.childField);
    assertEquals(1337,childProcedure.parentField);
  }
  @Test public void syntheticsAllowed() throws Throwable {
    ComponentRegistry components=new ComponentRegistry();
    components.register(int.class,ctx -> 1337);
    FieldInjections injections=new FieldInjections(components);
    List<FieldInjections.FieldSetter> setters=injections.setters(Outer.ClassWithSyntheticField.class);
    Outer.ClassWithSyntheticField syntheticField=new Outer().classWithSyntheticField();
    for (    FieldInjections.FieldSetter setter : setters) {
      setter.apply(null,syntheticField);
    }
    assertEquals(1337,syntheticField.innerField);
  }
public static class ProcedureWithNonInjectedMemberFields {
    public boolean someState;
  }
public static class ProcedureWithPrivateMemberField {
    @Context private boolean someState;
  }
public static class ProcedureWithStaticFields {
    private static boolean someState;
  }
public static class ParentProcedure {
    @Context public int parentField;
  }
public static class ChildProcedure extends ParentProcedure {
    @Context public int childField;
  }
public static class Outer {
    ClassWithSyntheticField classWithSyntheticField(){
      return new ClassWithSyntheticField();
    }
public class ClassWithSyntheticField {
      @Context public int innerField;
    }
  }
}
