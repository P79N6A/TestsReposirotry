/** 
 * Unit tests for the UDC statistics pinger.
 */
public class PingerTest extends LocalServerTestBase {
  private final String EXPECTED_KERNEL_VERSION="1.0";
  private final String EXPECTED_STORE_ID="CAFE";
  private String hostname="localhost";
  private String serverUrl;
  PingerHandler handler;
  @Before @Override public void setUp() throws Exception {
    super.setUp();
    handler=new PingerHandler();
    this.serverBootstrap.registerHandler("/*",handler);
    HttpHost target=start();
    hostname=target.getHostName();
    serverUrl="http://" + hostname + ":"+ target.getPort();
  }
  @Override @After public void shutDown() throws Exception {
    if (httpclient != null) {
      httpclient.close();
    }
    if (server != null) {
      server.shutdown(0,TimeUnit.MILLISECONDS);
    }
  }
  @Test public void shouldRespondToHttpClientGet() throws Exception {
    try (DefaultHttpClient httpclient=new DefaultHttpClient()){
      HttpGet httpget=new HttpGet(serverUrl + "/?id=storeId+v=kernelVersion");
      try (CloseableHttpResponse response=httpclient.execute(httpget)){
        HttpEntity entity=response.getEntity();
        if (entity != null) {
          try (InputStream instream=entity.getContent()){
            byte[] tmp=new byte[2048];
            while ((instream.read(tmp)) != -1) {
            }
          }
         }
        assertThat(response,notNullValue());
        assertThat(response.getStatusLine().getStatusCode(),is(HttpStatus.SC_OK));
      }
     }
   }
  @Test public void shouldPingServer() throws IOException {
    final HostnamePort hostURL=new HostnamePort(hostname,server.getLocalPort());
    final Map<String,String> udcFields=new HashMap<>();
    udcFields.put(ID,EXPECTED_STORE_ID);
    udcFields.put(UdcConstants.VERSION,EXPECTED_KERNEL_VERSION);
    Pinger p=new Pinger(hostURL,new TestUdcCollector(udcFields));
    p.ping();
    Map<String,String> actualQueryMap=handler.getQueryMap();
    assertThat(actualQueryMap,notNullValue());
    assertThat(actualQueryMap.get(ID),is(EXPECTED_STORE_ID));
  }
  @Test public void shouldIncludePingCountInURI() throws IOException {
    final int EXPECTED_PING_COUNT=16;
    final HostnamePort hostURL=new HostnamePort(hostname,server.getLocalPort());
    final Map<String,String> udcFields=new HashMap<>();
    Pinger p=new Pinger(hostURL,new TestUdcCollector(udcFields));
    for (int i=0; i < EXPECTED_PING_COUNT; i++) {
      p.ping();
    }
    assertThat(p.getPingCount(),is(equalTo(EXPECTED_PING_COUNT)));
    Map<String,String> actualQueryMap=handler.getQueryMap();
    assertThat(actualQueryMap.get(UdcConstants.PING),is(Integer.toString(EXPECTED_PING_COUNT)));
  }
  @Test public void normalPingSequenceShouldBeOneThenTwoThenThreeEtc() throws Exception {
    int[] expectedSequence={1,2,3,4};
    final HostnamePort hostURL=new HostnamePort(hostname,server.getLocalPort());
    final Map<String,String> udcFields=new HashMap<>();
    Pinger p=new Pinger(hostURL,new TestUdcCollector(udcFields));
    for (    int s : expectedSequence) {
      p.ping();
      int count=Integer.parseInt(handler.getQueryMap().get(UdcConstants.PING));
      assertEquals(s,count);
    }
  }
static class TestUdcCollector implements UdcInformationCollector {
    private final Map<String,String> params;
    TestUdcCollector(    Map<String,String> params){
      this.params=params;
    }
    @Override public Map<String,String> getUdcParams(){
      return params;
    }
    @Override public String getStoreId(){
      return getUdcParams().get(ID);
    }
  }
}
