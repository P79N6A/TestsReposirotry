public class RelationshipCountsProcessorTest {
  private static final int ANY=-1;
  private final NodeLabelsCache nodeLabelCache=mock(NodeLabelsCache.class);
  private final CountsAccessor.Updater countsUpdater=mock(CountsAccessor.Updater.class);
  @Test public void shouldHandleBigNumberOfLabelsAndRelationshipTypes(){
    int relTypeCount=1 << 8;
    int labelCount=1 << 22;
    NumberArrayFactory numberArrayFactory=mock(NumberArrayFactory.class);
    new RelationshipCountsProcessor(nodeLabelCache,labelCount,relTypeCount,countsUpdater,numberArrayFactory);
    verify(numberArrayFactory,times(2)).newLongArray(longThat(new IsNonNegativeLong()),anyLong());
  }
  @Test public void testRelationshipCountersUpdates(){
    int relationTypes=2;
    int labels=3;
    NodeLabelsCache.Client client=mock(NodeLabelsCache.Client.class);
    when(nodeLabelCache.newClient()).thenReturn(client);
    when(nodeLabelCache.get(eq(client),eq(1L),any(int[].class))).thenReturn(new int[]{0,2});
    when(nodeLabelCache.get(eq(client),eq(2L),any(int[].class))).thenReturn(new int[]{1});
    when(nodeLabelCache.get(eq(client),eq(3L),any(int[].class))).thenReturn(new int[]{1,2});
    when(nodeLabelCache.get(eq(client),eq(4L),any(int[].class))).thenReturn(new int[]{});
    RelationshipCountsProcessor countsProcessor=new RelationshipCountsProcessor(nodeLabelCache,labels,relationTypes,countsUpdater,NumberArrayFactory.AUTO_WITHOUT_PAGECACHE);
    countsProcessor.process(record(1,0,3));
    countsProcessor.process(record(2,1,4));
    countsProcessor.done();
    verify(countsUpdater).incrementRelationshipCount(ANY,ANY,ANY,2L);
    verify(countsUpdater).incrementRelationshipCount(ANY,0,ANY,1L);
    verify(countsUpdater).incrementRelationshipCount(ANY,1,ANY,1L);
    verify(countsUpdater).incrementRelationshipCount(0,0,ANY,1L);
    verify(countsUpdater).incrementRelationshipCount(2,0,ANY,1L);
    verify(countsUpdater).incrementRelationshipCount(ANY,0,1,1L);
    verify(countsUpdater).incrementRelationshipCount(ANY,0,2,1L);
  }
private class IsNonNegativeLong implements ArgumentMatcher<Long> {
    @Override public boolean matches(    Long argument){
      return argument != null && argument >= 0;
    }
  }
  private RelationshipRecord record(  long startNode,  int type,  long endNode){
    RelationshipRecord record=new RelationshipRecord(0);
    record.setInUse(true);
    record.setFirstNode(startNode);
    record.setSecondNode(endNode);
    record.setType(type);
    return record;
  }
}
