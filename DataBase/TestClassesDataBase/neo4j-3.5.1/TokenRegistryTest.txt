public class TokenRegistryTest {
  private static final String INBOUND2_TYPE="inbound2";
  private static final String INBOUND1_TYPE="inbound1";
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Test public void addTokenWithDuplicatedNotAllowed(){
    TokenRegistry tokenCache=createTokenCache();
    tokenCache.put(new NamedToken(INBOUND1_TYPE,1));
    tokenCache.put(new NamedToken(INBOUND2_TYPE,2));
    expectedException.expect(NonUniqueTokenException.class);
    expectedException.expectMessage("The testType \"inbound1\" is not unique");
    tokenCache.put(new NamedToken(INBOUND1_TYPE,3));
  }
  @Test public void keepOriginalTokenWhenAddDuplicate(){
    TokenRegistry tokenCache=createTokenCache();
    tokenCache.put(new NamedToken(INBOUND1_TYPE,1));
    tokenCache.put(new NamedToken(INBOUND2_TYPE,2));
    tryToAddDuplicate(tokenCache);
    assertEquals(1,tokenCache.getId(INBOUND1_TYPE).intValue());
    assertEquals(2,tokenCache.getId(INBOUND2_TYPE).intValue());
    assertNull(tokenCache.getToken(3));
  }
  private TokenRegistry createTokenCache(){
    return new TokenRegistry("testType");
  }
  private void tryToAddDuplicate(  TokenRegistry tokenCache){
    try {
      tokenCache.put(new NamedToken(INBOUND1_TYPE,3));
    }
 catch (    NonUniqueTokenException ignored) {
    }
  }
}
