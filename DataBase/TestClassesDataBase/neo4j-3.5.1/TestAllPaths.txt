public class TestAllPaths extends Neo4jAlgoTestCase {
  protected PathFinder<Path> instantiatePathFinder(  int maxDepth){
    return allPaths(PathExpanders.allTypesAndDirections(),maxDepth);
  }
  @Test public void testCircularGraph(){
    graph.makeEdge("a","b");
    graph.makeEdge("b","c");
    graph.makeEdge("b","c");
    graph.makeEdge("b","d");
    graph.makeEdge("c","d");
    graph.makeEdge("c","e");
    PathFinder<Path> finder=instantiatePathFinder(10);
    Iterable<Path> paths=finder.findAllPaths(graph.getNode("a"),graph.getNode("e"));
    assertPaths(paths,"a,b,c,e","a,b,c,e","a,b,d,c,e","a,b,c,d,b,c,e","a,b,c,d,b,c,e","a,b,c,b,d,c,e","a,b,c,b,d,c,e","a,b,d,c,b,c,e","a,b,d,c,b,c,e");
  }
  @Test public void testTripleRelationshipGraph(){
    graph.makeEdge("a","b");
    graph.makeEdge("b","c");
    graph.makeEdge("b","c");
    graph.makeEdge("b","c");
    graph.makeEdge("c","d");
    PathFinder<Path> finder=instantiatePathFinder(10);
    Iterable<Path> paths=finder.findAllPaths(graph.getNode("a"),graph.getNode("d"));
    assertPaths(paths,"a,b,c,d","a,b,c,d","a,b,c,d","a,b,c,b,c,d","a,b,c,b,c,d","a,b,c,b,c,d","a,b,c,b,c,d","a,b,c,b,c,d","a,b,c,b,c,d");
  }
}
