public class DuplicatedExtensionValidatorTest {
  @Rule public CompilationRule compilation=new CompilationRule();
  private Elements elements;
  private Function<Collection<Element>,Stream<CompilationMessage>> validator;
  @Before public void prepare(){
    elements=compilation.getElements();
    validator=new DuplicatedExtensionValidator<>(elements,Procedure.class,proc -> CustomNameExtractor.getName(proc::name,proc::value));
  }
  @Test public void detects_duplicate_procedure_with_default_names(){
    Element procedureA=procedureMethod(DefaultProcedureA.class.getName());
    Element procedureB=procedureMethod(DefaultProcedureB.class.getName());
    Collection<Element> duplicates=asList(procedureA,procedureB);
    Stream<CompilationMessage> errors=validator.apply(duplicates);
    String procedureName="org.neo4j.tooling.procedure.validators.examples.procedure";
    assertThat(errors).extracting(CompilationMessage::getCategory,CompilationMessage::getElement,CompilationMessage::getContents).containsExactlyInAnyOrder(tuple(Diagnostic.Kind.ERROR,procedureA,"Procedure|function name <" + procedureName + "> is already defined 2 times. It should be defined "+ "only once!"),tuple(Diagnostic.Kind.ERROR,procedureB,"Procedure|function name <" + procedureName + "> is already defined 2 times. It should be defined only once!"));
  }
  @Test public void detects_duplicate_procedure_with_overridden_names(){
    Element procedureA=procedureMethod(OverriddenProcedureA.class.getName());
    Element procedureB=procedureMethod(OverriddenProcedureB.class.getName());
    Collection<Element> duplicates=asList(procedureA,procedureB);
    Stream<CompilationMessage> errors=validator.apply(duplicates);
    assertThat(errors).extracting(CompilationMessage::getCategory,CompilationMessage::getElement,CompilationMessage::getContents).containsExactlyInAnyOrder(tuple(Diagnostic.Kind.ERROR,procedureA,"Procedure|function name <override> is already defined 2 times. It should be defined only once!"),tuple(Diagnostic.Kind.ERROR,procedureB,"Procedure|function name <override> is already defined 2 times. It should be defined only " + "once!"));
  }
  @Test public void does_not_detect_duplicates_if_duplicate_procedure_has_custom_name(){
    Collection<Element> duplicates=asList(procedureMethod(DefaultProcedureA.class.getName()),procedureMethod(OverriddenProcedureB.class.getName()));
    Stream<CompilationMessage> errors=validator.apply(duplicates);
    assertThat(errors).isEmpty();
  }
  private Element procedureMethod(  String name){
    TypeElement typeElement=elements.getTypeElement(name);
    Collection<Element> procedures=findProcedures(typeElement);
    if (procedures.size() != 1) {
      throw new AssertionError("Test procedure class should only have 1 defined procedure");
    }
    return procedures.iterator().next();
  }
  private Collection<Element> findProcedures(  TypeElement typeElement){
    return typeElement.getEnclosedElements().stream().filter(element -> element.getAnnotation(Procedure.class) != null).collect(Collectors.<Element>toList());
  }
}
