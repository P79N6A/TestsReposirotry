class WrappedCsvInputConfigurationForNeo4jAdminTest {
  @Test void shouldDelegateArrayDelimiter(){
    shouldDelegate(expected -> new Configuration.Overridden(COMMAS){
      @Override public char arrayDelimiter(){
        return expected;
      }
    }
,Configuration::arrayDelimiter,'a','b');
  }
  @Test void shouldDelegateDelimiter(){
    shouldDelegate(expected -> new Configuration.Overridden(COMMAS){
      @Override public char delimiter(){
        return expected;
      }
    }
,Configuration::delimiter,'a','b');
  }
  @Test void shouldDelegateQuoteCharacter(){
    shouldDelegate(expected -> new Configuration.Overridden(COMMAS){
      @Override public char quotationCharacter(){
        return expected;
      }
    }
,Configuration::quotationCharacter,'a','b');
  }
  @Test void shouldOverrideTrimStrings(){
    shouldOverride(expected -> new Configuration.Overridden(COMMAS){
      @Override public boolean trimStrings(){
        return expected;
      }
    }
,Configuration::trimStrings,true,false);
  }
  @Test void shouldOverrideBufferSize(){
    shouldOverride(expected -> new Configuration.Overridden(COMMAS){
      @Override public int bufferSize(){
        return expected;
      }
    }
,Configuration::bufferSize,100,200);
  }
  @Test void shouldDelegateMultiLineFields(){
    shouldDelegate(expected -> new Configuration.Overridden(COMMAS){
      @Override public boolean multilineFields(){
        return expected;
      }
    }
,Configuration::multilineFields,true,false);
  }
  @Test void shouldOverrideEmptyQuotedStringsAsNull(){
    shouldOverride(expected -> new Configuration.Overridden(COMMAS){
      @Override public boolean emptyQuotedStringsAsNull(){
        return expected;
      }
    }
,Configuration::emptyQuotedStringsAsNull,true,false);
  }
  @Test void shouldOverrideLegacyStyleQuoting(){
    shouldOverride(expected -> new Configuration.Overridden(COMMAS){
      @Override public boolean legacyStyleQuoting(){
        return expected;
      }
    }
,Configuration::legacyStyleQuoting,true,false);
  }
  @SafeVarargs private final <T>void shouldDelegate(  Function<T,Configuration> configFactory,  Function<Configuration,T> getter,  T... expectedValues){
    for (    T expectedValue : expectedValues) {
      Configuration configuration=configFactory.apply(expectedValue);
      WrappedCsvInputConfigurationForNeo4jAdmin wrapped=new WrappedCsvInputConfigurationForNeo4jAdmin(configuration);
      assertEquals(expectedValue,getter.apply(wrapped));
    }
    assertEquals(getter.apply(COMMAS),getter.apply(new WrappedCsvInputConfigurationForNeo4jAdmin(COMMAS)));
  }
  @SafeVarargs private final <T>void shouldOverride(  Function<T,Configuration> configFactory,  Function<Configuration,T> getter,  T... values){
    for (    T value : values) {
      Configuration configuration=configFactory.apply(value);
      WrappedCsvInputConfigurationForNeo4jAdmin vanilla=new WrappedCsvInputConfigurationForNeo4jAdmin(COMMAS);
      WrappedCsvInputConfigurationForNeo4jAdmin wrapped=new WrappedCsvInputConfigurationForNeo4jAdmin(configuration);
      assertEquals(getter.apply(vanilla),getter.apply(wrapped));
    }
  }
}
