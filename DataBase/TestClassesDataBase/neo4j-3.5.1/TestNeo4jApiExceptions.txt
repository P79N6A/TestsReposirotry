public class TestNeo4jApiExceptions {
  @Test public void testNotInTransactionException(){
    Node node1=graph.createNode();
    node1.setProperty("test",1);
    Node node2=graph.createNode();
    Node node3=graph.createNode();
    Relationship rel=node1.createRelationshipTo(node2,MyRelTypes.TEST);
    rel.setProperty("test",11);
    commit();
    try {
      graph.createNode();
      fail("Create node with no transaction should throw exception");
    }
 catch (    NotInTransactionException e) {
    }
    try {
      node1.createRelationshipTo(node2,MyRelTypes.TEST);
      fail("Create relationship with no transaction should " + "throw exception");
    }
 catch (    NotInTransactionException e) {
    }
    try {
      node1.setProperty("test",2);
      fail("Set property with no transaction should throw exception");
    }
 catch (    NotInTransactionException e) {
    }
    try {
      rel.setProperty("test",22);
      fail("Set property with no transaction should throw exception");
    }
 catch (    NotInTransactionException e) {
    }
    try {
      node3.delete();
      fail("Delete node with no transaction should " + "throw exception");
    }
 catch (    NotInTransactionException e) {
    }
    try {
      rel.delete();
      fail("Delete relationship with no transaction should " + "throw exception");
    }
 catch (    NotInTransactionException e) {
    }
    newTransaction();
    assertEquals(node1.getProperty("test"),1);
    assertEquals(rel.getProperty("test"),11);
    assertEquals(rel,node1.getSingleRelationship(MyRelTypes.TEST,Direction.OUTGOING));
    node1.delete();
    node2.delete();
    rel.delete();
    node3.delete();
    rollback();
  }
  @Test public void testNotFoundException(){
    Node node1=graph.createNode();
    Node node2=graph.createNode();
    Relationship rel=node1.createRelationshipTo(node2,MyRelTypes.TEST);
    long nodeId=node1.getId();
    long relId=rel.getId();
    rel.delete();
    node2.delete();
    node1.delete();
    newTransaction();
    try {
      graph.getNodeById(nodeId);
      fail("Get node by id on deleted node should throw exception");
    }
 catch (    NotFoundException e) {
    }
    try {
      graph.getRelationshipById(relId);
      fail("Get relationship by id on deleted node should " + "throw exception");
    }
 catch (    NotFoundException e) {
    }
    rollback();
  }
  @Test public void shouldGiveNiceErrorWhenShutdownKernelApi(){
    GraphDatabaseService graphDb=graph;
    Node node=graphDb.createNode();
    commit();
    graphDb.shutdown();
    try {
      asList(node.getLabels().iterator());
      fail("Did not get a nice exception");
    }
 catch (    DatabaseShutdownException e) {
    }
  }
  @Test public void shouldGiveNiceErrorWhenShutdownLegacy(){
    GraphDatabaseService graphDb=graph;
    Node node=graphDb.createNode();
    commit();
    graphDb.shutdown();
    try {
      node.getRelationships();
      fail("Did not get a nice exception");
    }
 catch (    DatabaseShutdownException e) {
    }
    try {
      graphDb.createNode();
      fail("Create node did not produce expected error");
    }
 catch (    DatabaseShutdownException e) {
    }
  }
  private Transaction tx;
  private GraphDatabaseService graph;
  private void newTransaction(){
    if (tx != null) {
      tx.success();
      tx.close();
    }
    tx=graph.beginTx();
  }
  public void commit(){
    if (tx != null) {
      tx.success();
      tx.close();
      tx=null;
    }
  }
  public void rollback(){
    if (tx != null) {
      tx.close();
      tx=null;
    }
  }
  @Before public void init(){
    graph=new TestGraphDatabaseFactory().newImpermanentDatabase();
    newTransaction();
  }
  @After public void cleanUp(){
    rollback();
    graph.shutdown();
  }
}
