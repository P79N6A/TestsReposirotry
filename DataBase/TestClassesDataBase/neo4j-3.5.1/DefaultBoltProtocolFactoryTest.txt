class DefaultBoltProtocolFactoryTest {
  @Test void shouldCreateNothingForUnknownProtocolVersion(){
    int protocolVersion=42;
    BoltChannel channel=BoltTestUtil.newTestBoltChannel();
    BoltProtocolFactory factory=new DefaultBoltProtocolFactory(mock(BoltConnectionFactory.class),mock(BoltStateMachineFactory.class),NullLogService.getInstance());
    BoltProtocol protocol=factory.create(protocolVersion,channel);
    assertNull(protocol);
  }
  @ParameterizedTest(name="V{0}") @ValueSource(longs={BoltProtocolV1.VERSION,BoltProtocolV2.VERSION,BoltProtocolV3.VERSION}) void shouldCreateBoltProtocol(  long protocolVersion) throws Throwable {
    EmbeddedChannel channel=new EmbeddedChannel();
    BoltChannel boltChannel=new BoltChannel("bolt-1","bolt",channel);
    BoltStateMachineFactory stateMachineFactory=mock(BoltStateMachineFactory.class);
    BoltStateMachine stateMachine=mock(BoltStateMachine.class);
    when(stateMachineFactory.newStateMachine(protocolVersion,boltChannel)).thenReturn(stateMachine);
    BoltConnectionFactory connectionFactory=mock(BoltConnectionFactory.class);
    BoltConnection connection=mock(BoltConnection.class);
    when(connectionFactory.newConnection(boltChannel,stateMachine)).thenReturn(connection);
    BoltProtocolFactory factory=new DefaultBoltProtocolFactory(connectionFactory,stateMachineFactory,NullLogService.getInstance());
    BoltProtocol protocol=factory.create(protocolVersion,boltChannel);
    protocol.install();
    assertEquals(protocolVersion,protocol.version());
    verify(connectionFactory).newConnection(eq(boltChannel),any(BoltStateMachine.class));
    verify(connection,never()).stop();
    channel.close();
    verify(connection).stop();
    channel.finishAndReleaseAll();
  }
}
