public abstract class TransactionTestBase<G extends KernelAPIWriteTestSupport> extends KernelAPIWriteTestBase<G> {
  @Test public void shouldRollbackWhenTxIsNotSuccess() throws Exception {
    long nodeId;
    int labelId;
    try (Transaction tx=beginTransaction()){
      nodeId=tx.dataWrite().nodeCreate();
      labelId=tx.tokenWrite().labelGetOrCreateForName("labello");
      tx.dataWrite().nodeAddLabel(nodeId,labelId);
    }
     assertNoNode(nodeId);
  }
  @Test public void shouldRollbackWhenTxIsFailed() throws Exception {
    long nodeId;
    int labelId;
    try (Transaction tx=beginTransaction()){
      nodeId=tx.dataWrite().nodeCreate();
      labelId=tx.tokenWrite().labelGetOrCreateForName("labello");
      tx.dataWrite().nodeAddLabel(nodeId,labelId);
      tx.failure();
    }
     assertNoNode(nodeId);
  }
  @Test public void shouldRollbackAndThrowWhenTxIsBothFailedAndSuccess() throws Exception {
    long nodeId;
    int labelId;
    Transaction tx=beginTransaction();
    nodeId=tx.dataWrite().nodeCreate();
    labelId=tx.tokenWrite().labelGetOrCreateForName("labello");
    tx.dataWrite().nodeAddLabel(nodeId,labelId);
    tx.failure();
    tx.success();
    try {
      tx.close();
      fail("Expected TransactionFailureException");
    }
 catch (    TransactionFailureException e) {
    }
    assertNoNode(nodeId);
  }
  private void assertNoNode(  long nodeId) throws TransactionFailureException {
    try (Transaction tx=beginTransaction();NodeCursor cursor=tx.cursors().allocateNodeCursor()){
      tx.dataRead().singleNode(nodeId,cursor);
      assertFalse(cursor.next());
    }
   }
}
