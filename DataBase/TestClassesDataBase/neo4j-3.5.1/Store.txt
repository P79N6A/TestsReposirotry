@Rotation(Rotation.Strategy.INCREMENTING) class Store extends AbstractKeyValueStore<String> {
  private final HeaderField<?>[] headerFields;
  final IOFunction<Long,Long> rotation=version -> prepareRotation(version).rotate();
  private Store(  HeaderField<?>... headerFields){
    this(TimeUnit.MINUTES.toMillis(10),headerFields);
  }
  private Store(  long rotationTimeout,  HeaderField<?>... headerFields){
    super(resourceManager.fileSystem(),resourceManager.pageCache(),resourceManager.testDirectory().databaseLayout(),null,new RotationTimerFactory(Clocks.nanoClock(),rotationTimeout),EmptyVersionContextSupplier.EMPTY,16,16,headerFields);
    this.headerFields=headerFields;
    setEntryUpdaterInitializer(new DataInitializer<EntryUpdater<String>>(){
      @Override public void initialize(      EntryUpdater<String> stringEntryUpdater){
      }
      @Override public long initialVersion(){
        return 0;
      }
    }
);
  }
  @Override protected Headers initialHeaders(  long version){
    Headers.Builder builder=Headers.headersBuilder();
    for (    HeaderField<?> field : headerFields) {
      putHeader(builder,field);
    }
    return builder.headers();
  }
  private <Value>void putHeader(  Headers.Builder builder,  HeaderField<Value> field){
    builder.put(field,initialHeader(field));
  }
  <Value>Value initialHeader(  HeaderField<Value> field){
    return null;
  }
  @Override protected int compareHeaders(  Headers lhs,  Headers rhs){
    return 0;
  }
  @Override protected void writeKey(  String key,  WritableBuffer buffer){
    awriteKey(key,buffer);
  }
  @Override protected String readKey(  ReadableBuffer key){
    StringBuilder result=new StringBuilder(16);
    for (int i=0; i < key.size(); i++) {
      char c=(char)(0xFF & key.getByte(i));
      if (c == 0) {
        break;
      }
      result.append(c);
    }
    return result.toString();
  }
  @Override protected void updateHeaders(  Headers.Builder headers,  long version){
    headers.put(TX_ID,version);
  }
  @Override protected long version(  Headers headers){
    Long transactionId=headers.get(TX_ID);
    return Math.max(TransactionIdStore.BASE_TX_ID,transactionId != null ? transactionId.longValue() : TransactionIdStore.BASE_TX_ID);
  }
  @Override protected void writeFormatSpecifier(  WritableBuffer formatSpecifier){
    formatSpecifier.putByte(0,(byte)0xFF);
    formatSpecifier.putByte(formatSpecifier.size() - 1,(byte)0xFF);
  }
  public void put(  String key,  final String value) throws IOException {
    try (EntryUpdater<String> updater=updater()){
      updater.apply(key,value(value));
    }
   }
  public String get(  String key) throws IOException {
    return lookup(key,new Reader<String>(){
      @Override protected String parseValue(      ReadableBuffer value){
        return readKey(value);
      }
    }
);
  }
}
