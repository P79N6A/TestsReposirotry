public class TestEvaluators extends TraversalTestBase {
  private enum Types implements RelationshipType {  A,   B,   C}
  private Transaction tx;
  @Before public void createGraph(){
    createGraph("a A b","b B c","c B d","d C e","e A j","b C h","h B i","i C k","a B f","f C g");
    tx=beginTx();
  }
  @After public void tearDown(){
    tx.close();
  }
  @Test public void lastRelationshipTypeEvaluator(){
    Node a=getNodeWithName("a");
    expectPaths(getGraphDb().traversalDescription().evaluator(lastRelationshipTypeIs(INCLUDE_AND_PRUNE,EXCLUDE_AND_CONTINUE,Types.C)).traverse(a),"a,b,c,d,e","a,f,g","a,b,h");
    expectPaths(getGraphDb().traversalDescription().evaluator(lastRelationshipTypeIs(INCLUDE_AND_CONTINUE,EXCLUDE_AND_CONTINUE,Types.C)).traverse(a),"a,b,c,d,e","a,f,g","a,b,h","a,b,h,i,k");
  }
  @Test public void endNodeIs(){
    Node a=getNodeWithName("a");
    Node c=getNodeWithName("c");
    Node h=getNodeWithName("h");
    Node g=getNodeWithName("g");
    expectPaths(getGraphDb().traversalDescription().evaluator(includeWhereEndNodeIs(c,h,g)).traverse(a),"a,b,c","a,b,h","a,f,g");
    expectPaths(getGraphDb().traversalDescription().evaluator(includeWhereEndNodeIs(g)).traverse(a),"a,f,g");
  }
  @Test public void depths(){
    Node a=getNodeWithName("a");
    expectPaths(getGraphDb().traversalDescription().evaluator(Evaluators.atDepth(1)).traverse(a),"a,b","a,f");
    expectPaths(getGraphDb().traversalDescription().evaluator(Evaluators.fromDepth(2)).traverse(a),"a,f,g","a,b,h","a,b,h,i","a,b,h,i,k","a,b,c","a,b,c,d","a,b,c,d,e","a,b,c,d,e,j");
    expectPaths(getGraphDb().traversalDescription().evaluator(Evaluators.toDepth(2)).traverse(a),"a","a,b","a,b,c","a,b,h","a,f","a,f,g");
  }
}
