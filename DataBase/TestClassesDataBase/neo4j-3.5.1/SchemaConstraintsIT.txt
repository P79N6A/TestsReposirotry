public class SchemaConstraintsIT extends AbstractRestFunctionalTestBase {
  @Documented("Create uniqueness constraint.\n" + "Create a uniqueness constraint on a property.") @Test @GraphDescription.Graph(nodes={}) public void createPropertyUniquenessConstraint() throws JsonParseException {
    data.get();
    String labelName=labels.newInstance();
    String propertyKey=properties.newInstance();
    Map<String,Object> definition=map("property_keys",singletonList(propertyKey));
    String result=gen.get().expectedStatus(200).payload(createJsonFrom(definition)).post(getSchemaConstraintLabelUniquenessUri(labelName)).entity();
    Map<String,Object> serialized=jsonToMap(result);
    Map<String,Object> constraint=new HashMap<>();
    constraint.put("type",ConstraintType.UNIQUENESS.name());
    constraint.put("label",labelName);
    constraint.put("property_keys",singletonList(propertyKey));
    assertThat(serialized,equalTo(constraint));
  }
  @Documented("Get a specific uniqueness constraint.\n" + "Get a specific uniqueness constraint for a label and a property.") @Test @GraphDescription.Graph(nodes={}) public void getLabelUniquenessPropertyConstraint() throws JsonParseException {
    data.get();
    String labelName=labels.newInstance();
    String propertyKey=properties.newInstance();
    createLabelUniquenessPropertyConstraint(labelName,propertyKey);
    String result=gen.get().expectedStatus(200).get(getSchemaConstraintLabelUniquenessPropertyUri(labelName,propertyKey)).entity();
    List<Map<String,Object>> serializedList=jsonToList(result);
    Map<String,Object> constraint=new HashMap<>();
    constraint.put("type",ConstraintType.UNIQUENESS.name());
    constraint.put("label",labelName);
    constraint.put("property_keys",singletonList(propertyKey));
    assertThat(serializedList,hasItem(constraint));
  }
  @SuppressWarnings("unchecked") @Documented("Get all uniqueness constraints for a label.") @Test @GraphDescription.Graph(nodes={}) public void getLabelUniquenessPropertyConstraints() throws JsonParseException {
    data.get();
    String labelName=labels.newInstance();
    String propertyKey1=properties.newInstance();
    String propertyKey2=properties.newInstance();
    createLabelUniquenessPropertyConstraint(labelName,propertyKey1);
    createLabelUniquenessPropertyConstraint(labelName,propertyKey2);
    String result=gen.get().expectedStatus(200).get(getSchemaConstraintLabelUniquenessUri(labelName)).entity();
    List<Map<String,Object>> serializedList=jsonToList(result);
    Map<String,Object> constraint1=new HashMap<>();
    constraint1.put("type",ConstraintType.UNIQUENESS.name());
    constraint1.put("label",labelName);
    constraint1.put("property_keys",singletonList(propertyKey1));
    Map<String,Object> constraint2=new HashMap<>();
    constraint2.put("type",ConstraintType.UNIQUENESS.name());
    constraint2.put("label",labelName);
    constraint2.put("property_keys",singletonList(propertyKey2));
    assertThat(serializedList,hasItems(constraint1,constraint2));
  }
  @SuppressWarnings("unchecked") @Documented("Get all constraints for a label.") @Test @GraphDescription.Graph(nodes={}) public void getLabelPropertyConstraints() throws JsonParseException {
    data.get();
    String labelName=labels.newInstance();
    String propertyKey1=properties.newInstance();
    createLabelUniquenessPropertyConstraint(labelName,propertyKey1);
    String result=gen.get().expectedStatus(200).get(getSchemaConstraintLabelUri(labelName)).entity();
    List<Map<String,Object>> serializedList=jsonToList(result);
    Map<String,Object> constraint1=new HashMap<>();
    constraint1.put("type",ConstraintType.UNIQUENESS.name());
    constraint1.put("label",labelName);
    constraint1.put("property_keys",singletonList(propertyKey1));
    assertThat(serializedList,hasItems(constraint1));
  }
  @SuppressWarnings("unchecked") @Documented("Get all constraints.") @Test @GraphDescription.Graph(nodes={}) public void get_constraints() throws JsonParseException {
    data.get();
    String labelName1=labels.newInstance();
    String propertyKey1=properties.newInstance();
    createLabelUniquenessPropertyConstraint(labelName1,propertyKey1);
    String result=gen.get().expectedStatus(200).get(getSchemaConstraintUri()).entity();
    List<Map<String,Object>> serializedList=jsonToList(result);
    Map<String,Object> constraint1=new HashMap<>();
    constraint1.put("type",ConstraintType.UNIQUENESS.name());
    constraint1.put("label",labelName1);
    constraint1.put("property_keys",singletonList(propertyKey1));
    assertThat(serializedList,hasItems(constraint1));
  }
  @Documented("Drop uniqueness constraint.\n" + "Drop uniqueness constraint for a label and a property.") @Test @GraphDescription.Graph(nodes={}) public void drop_constraint(){
    data.get();
    String labelName=labels.newInstance();
    String propertyKey=properties.newInstance();
    ConstraintDefinition constraintDefinition=createLabelUniquenessPropertyConstraint(labelName,propertyKey);
    assertThat(getConstraints(graphdb(),label(labelName)),containsOnly(constraintDefinition));
    gen.get().expectedStatus(204).delete(getSchemaConstraintLabelUniquenessPropertyUri(labelName,propertyKey)).entity();
    assertThat(getConstraints(graphdb(),label(labelName)),isEmpty());
  }
  /** 
 * Create an index for a label and property key which already exists.
 */
  @Test public void create_existing_constraint(){
    String labelName=labels.newInstance();
    String propertyKey=properties.newInstance();
    createLabelUniquenessPropertyConstraint(labelName,propertyKey);
    Map<String,Object> definition=map("property_keys",singletonList(propertyKey));
    gen.get().expectedStatus(409).payload(createJsonFrom(definition)).post(getSchemaConstraintLabelUniquenessUri(labelName)).entity();
  }
  @Test public void drop_non_existent_constraint(){
    String labelName=labels.newInstance();
    String propertyKey=properties.newInstance();
    gen.get().expectedStatus(404).delete(getSchemaConstraintLabelUniquenessPropertyUri(labelName,propertyKey));
  }
  @Test public void create_compound_schema_index(){
    Map<String,Object> definition=map("property_keys",asList(properties.newInstance(),properties.newInstance()));
    gen.get().expectedStatus(200).payload(createJsonFrom(definition)).post(getSchemaIndexLabelUri(labels.newInstance()));
  }
  @Test public void create_compound_schema_constraint(){
    Map<String,Object> definition=map("property_keys",asList(properties.newInstance(),properties.newInstance()));
    gen.get().expectedStatus(405).payload(createJsonFrom(definition)).post(getSchemaConstraintLabelUri(labels.newInstance()));
  }
  private ConstraintDefinition createLabelUniquenessPropertyConstraint(  String labelName,  String propertyKey){
    try (Transaction tx=graphdb().beginTx()){
      ConstraintDefinition constraintDefinition=graphdb().schema().constraintFor(label(labelName)).assertPropertyIsUnique(propertyKey).create();
      tx.success();
      return constraintDefinition;
    }
   }
  private final Factory<String> labels=UniqueStrings.withPrefix("label");
  private final Factory<String> properties=UniqueStrings.withPrefix("property");
}
