public class MultiSetTest {
  @Test public void anEmptySetContainsNothing(){
    Object aValue=new Object();
    MultiSet<Object> emptyMultiSet=new MultiSet<>();
    assertTrue(emptyMultiSet.isEmpty());
    assertEquals(0,emptyMultiSet.size());
    assertEquals(0,emptyMultiSet.uniqueSize());
    assertFalse(emptyMultiSet.contains(aValue));
    assertEquals(0,emptyMultiSet.count(aValue));
  }
  @Test public void shouldAddAnElementToTheMultiSet(){
    MultiSet<Object> multiSet=new MultiSet<>();
    Object value=new Object();
    long count=multiSet.add(value);
    assertEquals(1,count);
    assertFalse(multiSet.isEmpty());
    assertEquals(1,multiSet.size());
    assertEquals(1,multiSet.uniqueSize());
    assertTrue(multiSet.contains(value));
    assertEquals(1,multiSet.count(value));
  }
  @Test public void shouldRemoveAnElementFromTheMultiSet(){
    MultiSet<Object> multiSet=new MultiSet<>();
    Object value=new Object();
    multiSet.add(value);
    long count=multiSet.remove(value);
    assertEquals(0,count);
    assertTrue(multiSet.isEmpty());
    assertEquals(0,multiSet.size());
    assertEquals(0,multiSet.uniqueSize());
    assertFalse(multiSet.contains(value));
    assertEquals(0,multiSet.count(value));
  }
  @Test public void shouldAddAnElementTwice(){
    MultiSet<Object> multiSet=new MultiSet<>();
    Object value=new Object();
    multiSet.add(value);
    long count=multiSet.add(value);
    assertEquals(2,count);
    assertFalse(multiSet.isEmpty());
    assertEquals(2,multiSet.size());
    assertEquals(1,multiSet.uniqueSize());
    assertTrue(multiSet.contains(value));
    assertEquals(2,multiSet.count(value));
  }
  @Test public void shouldRemoveAnElementWhenMultiElementArePresentInTheMultiSet(){
    MultiSet<Object> multiSet=new MultiSet<>();
    Object value=new Object();
    multiSet.add(value);
    multiSet.add(value);
    long count=multiSet.remove(value);
    assertEquals(1,count);
    assertFalse(multiSet.isEmpty());
    assertEquals(1,multiSet.size());
    assertEquals(1,multiSet.uniqueSize());
    assertTrue(multiSet.contains(value));
    assertEquals(1,multiSet.count(value));
  }
  @Test public void shouldClearTheMultiSet(){
    MultiSet<Object> multiSet=new MultiSet<>();
    Object value=new Object();
    multiSet.add(value);
    multiSet.add(value);
    multiSet.add(new Object());
    multiSet.clear();
    assertTrue(multiSet.isEmpty());
    assertEquals(0,multiSet.size());
    assertEquals(0,multiSet.uniqueSize());
    assertFalse(multiSet.contains(value));
    assertEquals(0,multiSet.count(value));
  }
}
