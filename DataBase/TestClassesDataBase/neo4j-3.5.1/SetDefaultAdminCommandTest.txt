public class SetDefaultAdminCommandTest {
  private SetDefaultAdminCommand setDefaultAdmin;
  private File adminIniFile;
  private FileSystemAbstraction fileSystem=new EphemeralFileSystemAbstraction();
  private Config config;
  @Rule public ExpectedException expect=ExpectedException.none();
  @Rule public TestDirectory testDir=TestDirectory.testDirectory(fileSystem);
  @Before public void setup() throws IOException, InvalidArgumentsException {
    OutsideWorld mock=mock(OutsideWorld.class);
    when(mock.fileSystem()).thenReturn(fileSystem);
    setDefaultAdmin=new SetDefaultAdminCommand(testDir.directory("home").toPath(),testDir.directory("conf").toPath(),mock);
    config=setDefaultAdmin.loadNeo4jConfig();
    UserRepository users=CommunitySecurityModule.getUserRepository(config,NullLogProvider.getInstance(),fileSystem);
    users.create(new User.Builder("jake",LegacyCredential.forPassword("123")).withRequiredPasswordChange(false).build());
    adminIniFile=new File(CommunitySecurityModule.getUserRepositoryFile(config).getParentFile(),"admin.ini");
  }
  @Test public void shouldFailForNoArguments(){
    assertException(() -> setDefaultAdmin.execute(new String[0]),IncorrectUsage.class,"not enough arguments");
  }
  @Test public void shouldFailForTooManyArguments(){
    String[] arguments={"","123","321"};
    assertException(() -> setDefaultAdmin.execute(arguments),IncorrectUsage.class,"unrecognized arguments: '123 321'");
  }
  @Test public void shouldSetDefaultAdmin() throws Throwable {
    assertFalse(fileSystem.fileExists(adminIniFile));
    String[] arguments={"jake"};
    setDefaultAdmin.execute(arguments);
    assertAdminIniFile("jake");
  }
  @Test public void shouldNotSetDefaultAdminForNonExistentUser() throws Throwable {
    expect.expect(CommandFailed.class);
    expect.expectMessage("no such user: 'noName'");
    String[] arguments={"noName"};
    setDefaultAdmin.execute(arguments);
  }
  @Test public void shouldPrintNiceHelp() throws Throwable {
    try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
      PrintStream ps=new PrintStream(baos);
      Usage usage=new Usage("neo4j-admin",mock(CommandLocator.class));
      usage.printUsageForCommand(new SetDefaultAdminCommandProvider(),ps::println);
      assertEquals(String.format("usage: neo4j-admin set-default-admin <username>%n" + "%n" + "environment variables:%n"+ "    NEO4J_CONF    Path to directory which contains neo4j.conf.%n"+ "    NEO4J_DEBUG   Set to anything to enable debug output.%n"+ "    NEO4J_HOME    Neo4j home directory.%n"+ "    HEAP_SIZE     Set JVM maximum heap size during command execution.%n"+ "                  Takes a number and a unit, for example 512m.%n"+ "%n"+ "Sets the user to become admin if users but no roles are present, for example%n"+ "when upgrading to neo4j 3.1 enterprise.%n"),baos.toString());
    }
   }
  private void assertAdminIniFile(  String username) throws Throwable {
    assertTrue(fileSystem.fileExists(adminIniFile));
    FileUserRepository userRepository=new FileUserRepository(fileSystem,adminIniFile,NullLogProvider.getInstance());
    userRepository.start();
    assertThat(userRepository.getAllUsernames(),containsInAnyOrder(username));
  }
}
