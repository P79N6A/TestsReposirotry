private abstract static class DataPage extends StubPageCursor {
  private final int headerRecords;
  private final int dataRecords;
  private final byte[] key;
  private final byte[] value;
  DataPage(  int pageSize,  int headerRecords,  int dataRecords,  byte[] key,  byte[] value){
    super(0,pageSize);
    int recordSize=key.length + value.length;
    assert (recordSize & -recordSize) == recordSize : "invalid usage";
    assert recordSize * (headerRecords + dataRecords) <= pageSize : "invalid usage";
    assert dataRecords <= (1 << (key.length * 8)) : "invalid usage";
    this.key=key;
    this.value=value;
    this.headerRecords=headerRecords;
    this.dataRecords=dataRecords;
    BigEndianByteArrayBuffer k=new BigEndianByteArrayBuffer(key);
    BigEndianByteArrayBuffer v=new BigEndianByteArrayBuffer(value);
    for (int record=0; record < dataRecords; record++) {
      writeDataEntry(record,k,v);
      for (int i=0; i < key.length; i++) {
        putByte((record + headerRecords) * recordSize + i,key[i]);
      }
      for (int i=0; i < value.length; i++) {
        putByte((record + headerRecords) * recordSize + key.length + i,value[i]);
      }
      Arrays.fill(key,(byte)0);
      Arrays.fill(value,(byte)0);
    }
  }
  int findOffset(  int key) throws IOException {
    BigEndianByteArrayBuffer searchKey=new BigEndianByteArrayBuffer(this.key.length);
    BigEndianByteArrayBuffer value=new BigEndianByteArrayBuffer(this.value);
    writeDataEntry(key,searchKey,value);
    Arrays.fill(this.value,(byte)0);
    return KeyValueStoreFile.findEntryOffset(this,searchKey,new BigEndianByteArrayBuffer(this.key),value,headerRecords,headerRecords + dataRecords);
  }
  abstract void writeDataEntry(  int record,  WritableBuffer key,  WritableBuffer value);
}
