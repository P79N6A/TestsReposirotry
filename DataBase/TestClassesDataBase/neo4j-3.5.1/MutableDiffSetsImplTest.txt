public class MutableDiffSetsImplTest {
  private static final Predicate<Long> ODD_FILTER=item -> item % 2 != 0;
  private final MutableDiffSetsImpl<Long> diffSets=new MutableDiffSetsImpl<>();
  @Test public void testAdd(){
    diffSets.add(1L);
    diffSets.add(2L);
    assertEquals(asSet(1L,2L),diffSets.getAdded());
    assertTrue(diffSets.getRemoved().isEmpty());
  }
  @Test public void testRemove(){
    diffSets.add(1L);
    diffSets.remove(2L);
    assertEquals(asSet(1L),diffSets.getAdded());
    assertEquals(asSet(2L),diffSets.getRemoved());
  }
  @Test public void testAddRemove(){
    diffSets.add(1L);
    diffSets.remove(1L);
    assertTrue(diffSets.getAdded().isEmpty());
    assertTrue(diffSets.getRemoved().isEmpty());
  }
  @Test public void testRemoveAdd(){
    diffSets.remove(1L);
    diffSets.add(1L);
    assertTrue(diffSets.getAdded().isEmpty());
    assertTrue(diffSets.getRemoved().isEmpty());
  }
  @Test public void testIsAddedOrRemoved(){
    diffSets.add(1L);
    diffSets.remove(10L);
    assertTrue(diffSets.isAdded(1L));
    assertTrue(!diffSets.isAdded(2L));
    assertTrue(diffSets.isRemoved(10L));
    assertTrue(!diffSets.isRemoved(2L));
  }
  @Test public void testAddRemoveAll(){
    diffSets.addAll(iterator(1L,2L));
    diffSets.removeAll(iterator(2L,3L));
    assertEquals(asSet(1L),diffSets.getAdded());
    assertEquals(asSet(3L),diffSets.getRemoved());
  }
  @Test public void testFilterAdded(){
    diffSets.addAll(iterator(1L,2L));
    diffSets.removeAll(iterator(3L,4L));
    MutableDiffSetsImpl<Long> filtered=diffSets.filterAdded(ODD_FILTER);
    assertEquals(asSet(1L),filtered.getAdded());
    assertEquals(asSet(3L,4L),filtered.getRemoved());
  }
  @Test public void testReturnSourceFromApplyWithEmptyDiffSets(){
    Iterator<Long> result=diffSets.apply(singletonList(18L).iterator());
    assertEquals(singletonList(18L),asCollection(result));
  }
  @Test public void testAppendAddedToSourceInApply(){
    diffSets.add(52L);
    diffSets.remove(43L);
    Iterator<Long> result=diffSets.apply(singletonList(18L).iterator());
    assertEquals(asList(18L,52L),asCollection(result));
  }
  @Test public void testFilterRemovedFromSourceInApply(){
    diffSets.remove(43L);
    Iterator<Long> result=diffSets.apply(asList(42L,43L,44L).iterator());
    assertEquals(asList(42L,44L),asCollection(result));
  }
  @Test public void testFilterAddedFromSourceInApply(){
    diffSets.add(42L);
    diffSets.add(44L);
    Iterator<Long> result=diffSets.apply(asList(42L,43L).iterator());
    Collection<Long> collectedResult=asCollection(result);
    assertEquals(3,collectedResult.size());
    assertThat(collectedResult,hasItems(43L,42L,44L));
  }
}
