class InterruptedStateTest {
  private final InterruptedState state=new InterruptedState();
  private final BoltStateMachineState readyState=mock(BoltStateMachineState.class);
  private final BoltStateMachineState failedState=mock(BoltStateMachineState.class);
  private final StateMachineContext context=mock(StateMachineContext.class);
  private final MutableConnectionState connectionState=new MutableConnectionState();
  @BeforeEach void setUp(){
    state.setReadyState(readyState);
    state.setFailedState(failedState);
    when(context.connectionState()).thenReturn(connectionState);
  }
  @Test void shouldThrowWhenNotInitialized() throws Exception {
    InterruptedState state=new InterruptedState();
    assertThrows(IllegalStateException.class,() -> state.process(ResetMessage.INSTANCE,context));
    state.setReadyState(readyState);
    assertThrows(IllegalStateException.class,() -> state.process(ResetMessage.INSTANCE,context));
    state.setReadyState(null);
    state.setFailedState(failedState);
    assertThrows(IllegalStateException.class,() -> state.process(ResetMessage.INSTANCE,context));
  }
  @Test void shouldProcessInterruptMessage() throws Exception {
    BoltStateMachineState newState=state.process(InterruptSignal.INSTANCE,context);
    assertEquals(state,newState);
  }
  @Test void shouldProcessResetMessageWhenInterrupted() throws Exception {
    connectionState.incrementInterruptCounter();
    connectionState.incrementInterruptCounter();
    assertTrue(connectionState.isInterrupted());
    assertFalse(connectionState.hasPendingIgnore());
    BoltStateMachineState newState=state.process(ResetMessage.INSTANCE,context);
    assertEquals(state,newState);
    assertTrue(connectionState.hasPendingIgnore());
  }
  @Test void shouldProcessResetMessage() throws Exception {
    when(context.resetMachine()).thenReturn(true);
    BoltStateMachineState newState=state.process(ResetMessage.INSTANCE,context);
    assertEquals(readyState,newState);
  }
  @Test void shouldHandleFailureDuringResetMessageProcessing() throws Exception {
    when(context.resetMachine()).thenReturn(false);
    BoltStateMachineState newState=state.process(ResetMessage.INSTANCE,context);
    assertEquals(failedState,newState);
  }
  @Test void shouldIgnoreMessagesOtherThanInterruptAndReset() throws Exception {
    List<RequestMessage> messages=asList(AckFailureMessage.INSTANCE,PullAllMessage.INSTANCE,DiscardAllMessage.INSTANCE,new RunMessage("RETURN 1",EMPTY_MAP),new InitMessage("Driver",emptyMap()));
    for (    RequestMessage message : messages) {
      connectionState.resetPendingFailedAndIgnored();
      BoltStateMachineState newState=state.process(message,context);
      assertEquals(state,newState);
      assertTrue(connectionState.hasPendingIgnore());
    }
  }
}
