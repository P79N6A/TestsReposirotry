@Nested class Prefix {
  @Test void shouldComputeIndexUpdatesForRangeSeekByPrefixWhenThereAreNoMatchingNodes(){
    ReadableTransactionState state=new TxStateBuilder().withAdded(42L,"value42").withAdded(43L,"value43").build();
    AddedAndRemoved changes=indexUpdatesForRangeSeekByPrefix(state,index,stringValue("eulav"),IndexOrder.NONE);
    AddedWithValuesAndRemoved changesWithValues=indexUpdatesWithValuesForRangeSeekByPrefix(state,index,stringValue("eulav"),IndexOrder.NONE);
    assertTrue(changes.getAdded().isEmpty());
    assertFalse(changesWithValues.getAdded().iterator().hasNext());
  }
  @Test void shouldComputeIndexUpdatesForRangeSeekByPrefix(){
    assertRangeSeekByPrefixForOrder(IndexOrder.NONE);
    assertRangeSeekByPrefixForOrder(IndexOrder.ASCENDING);
  }
  @Test void shouldComputeIndexUpdatesForRangeSeekByPrefixWithDescendingOrder(){
    assertRangeSeekByPrefixForOrder(IndexOrder.DESCENDING);
  }
  private void assertRangeSeekByPrefixForOrder(  IndexOrder indexOrder){
    ReadableTransactionState state=new TxStateBuilder().withAdded(40L,"Aaron").withAdded(41L,"Agatha").withAdded(42L,"Andreas").withAdded(43L,"Barbarella").withAdded(44L,"Andrea").withAdded(45L,"Aristotle").withAdded(46L,"Barbara").withAdded(47L,"Andy").withAdded(48L,"Cinderella").withAdded(49L,"Andromeda").build();
    AddedAndRemoved changes=indexUpdatesForRangeSeekByPrefix(state,index,stringValue("And"),indexOrder);
    AddedWithValuesAndRemoved changesWithValues=indexUpdatesWithValuesForRangeSeekByPrefix(state,index,stringValue("And"),indexOrder);
    NodeWithPropertyValues[] expected={nodeWithPropertyValues(44L,"Andrea"),nodeWithPropertyValues(42L,"Andreas"),nodeWithPropertyValues(49L,"Andromeda"),nodeWithPropertyValues(47L,"Andy")};
    assertContains(indexOrder,changes,changesWithValues,expected);
  }
  @Test void shouldComputeIndexUpdatesForRangeSeekByPrefixWhenThereAreNonStringNodes(){
    final ReadableTransactionState state=new TxStateBuilder().withAdded(42L,"barry").withAdded(44L,101L).withAdded(43L,"bar").build();
    AddedAndRemoved changes=TxStateIndexChanges.indexUpdatesForRangeSeekByPrefix(state,index,stringValue("bar"),IndexOrder.NONE);
    assertContainsInOrder(changes.getAdded(),43L,42L);
  }
}
