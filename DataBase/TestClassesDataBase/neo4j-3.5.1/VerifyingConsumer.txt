private static class VerifyingConsumer implements Consumer<long[]> {
  private final boolean[] seenIds;
  private int chunkCount;
  VerifyingConsumer(  int size){
    seenIds=new boolean[size];
  }
  void assertHaveOnlySeenRange(  long low,  long high){
    long[] values=new long[(int)(high - low + 1)];
    for (long id=low, i=0; id <= high; id++, i++) {
      values[(int)i]=id;
    }
    assertHaveOnlySeen(values);
  }
  @Override public void accept(  long[] chunk){
    chunkCount++;
    for (    long id : chunk) {
      assertFalse(seenIds[safeCastLongToInt(id)]);
      seenIds[safeCastLongToInt(id)]=true;
    }
  }
  void assertHaveOnlySeen(  long... values){
    for (int i=0, vi=0; i < seenIds.length && vi < values.length; i++) {
      boolean expectedToBeSeen=values[vi] == i;
      if (expectedToBeSeen && !seenIds[i]) {
        fail("Expected to have seen " + i + ", but hasn't");
      }
 else       if (!expectedToBeSeen && seenIds[i]) {
        fail("Expected to NOT have seen " + i + ", but have");
      }
      if (expectedToBeSeen) {
        vi++;
      }
    }
  }
  int chunksAccepted(){
    return chunkCount;
  }
}
