public class DbStructureArgumentFormatterTest {
  @Test public void shouldFormatNull(){
    assertEquals("null",formatArgument(null));
  }
  @Test public void shouldFormatInts(){
    assertEquals("0",formatArgument(0));
    assertEquals("1",formatArgument(1));
    assertEquals("-1",formatArgument(-1));
  }
  @Test public void shouldFormatLongs(){
    assertEquals("0L",formatArgument(0L));
    assertEquals("-1L",formatArgument(-1L));
    assertEquals("1L",formatArgument(1L));
  }
  @Test public void shouldFormatDoubles(){
    assertEquals("1.0d",formatArgument(1.0d));
    assertEquals("Double.NaN",formatArgument(Double.NaN));
    assertEquals("Double.POSITIVE_INFINITY",formatArgument(Double.POSITIVE_INFINITY));
    assertEquals("Double.NEGATIVE_INFINITY",formatArgument(Double.NEGATIVE_INFINITY));
  }
  @Test public void shouldFormatIndexDescriptors(){
    assertEquals("IndexDescriptorFactory.forSchema( SchemaDescriptorFactory.forLabel( 23, 42 ) )",formatArgument(TestIndexDescriptorFactory.forLabel(23,42)));
  }
  @Test public void shouldFormatUniquenessConstraints(){
    assertEquals("ConstraintDescriptorFactory.uniqueForLabel( 23, 42 )",formatArgument(ConstraintDescriptorFactory.uniqueForLabel(23,42)));
  }
  @Test public void shouldFormatCompositeUniquenessConstraints(){
    assertEquals("ConstraintDescriptorFactory.uniqueForLabel( 23, 42, 43 )",formatArgument(ConstraintDescriptorFactory.uniqueForLabel(23,42,43)));
  }
  @Test public void shouldFormatNodeKeyConstraints(){
    assertEquals("ConstraintDescriptorFactory.nodeKeyForLabel( 23, 42, 43 )",formatArgument(ConstraintDescriptorFactory.nodeKeyForLabel(23,42,43)));
  }
  private String formatArgument(  Object arg){
    StringBuilder builder=new StringBuilder();
    try {
      DbStructureArgumentFormatter.INSTANCE.formatArgument(builder,arg);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    return builder.toString();
  }
}
