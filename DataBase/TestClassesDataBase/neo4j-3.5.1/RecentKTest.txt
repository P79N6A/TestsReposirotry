class RecentKTest {
  @Test void shouldEvictOnOverflow(){
    assertThat(appendSequence(1,1,1,1,1,1,1),yieldsSet(1));
    assertThat(appendSequence(1,2,3,4,1,1,1),yieldsSet(1,3,4));
    assertThat(appendSequence(1,1,1,2,2,6,4,4,1,1,2,2,2,5,5),yieldsSet(1,2,5));
  }
  private Matcher<RecentK<Integer>> yieldsSet(  final Integer... expectedItems){
    return new TypeSafeMatcher<RecentK<Integer>>(){
      @Override protected boolean matchesSafely(      RecentK<Integer> recentK){
        assertThat(recentK.recentItems(),containsInAnyOrder(expectedItems));
        assertThat(recentK.recentItems().size(),equalTo(expectedItems.length));
        return true;
      }
      @Override public void describeTo(      Description description){
        description.appendValueList("[",",","]",expectedItems);
      }
    }
;
  }
  private RecentK<Integer> appendSequence(  int... items){
    RecentK<Integer> recentK=new RecentK<>(3);
    for (    int item : items) {
      recentK.add(item);
    }
    return recentK;
  }
}
