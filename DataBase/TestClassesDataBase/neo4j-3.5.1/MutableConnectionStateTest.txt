class MutableConnectionStateTest {
  private final MutableConnectionState state=new MutableConnectionState();
  private final BoltResult result=mock(BoltResult.class);
  private final BoltResponseHandler responseHandler=mock(BoltResponseHandler.class);
  @Test void shouldHandleOnRecordsWithoutResponseHandler() throws Exception {
    state.setResponseHandler(null);
    state.onRecords(result,true);
    assertNull(state.getPendingError());
    assertFalse(state.hasPendingIgnore());
  }
  @Test void shouldHandleOnRecordsWitResponseHandler() throws Exception {
    state.setResponseHandler(responseHandler);
    state.onRecords(result,true);
    verify(responseHandler).onRecords(result,true);
  }
  @Test void shouldHandleOnMetadataWithoutResponseHandler(){
    state.setResponseHandler(null);
    state.onMetadata("key",stringValue("value"));
    assertNull(state.getPendingError());
    assertFalse(state.hasPendingIgnore());
  }
  @Test void shouldHandleOnMetadataWitResponseHandler(){
    state.setResponseHandler(responseHandler);
    state.onMetadata("key",stringValue("value"));
    verify(responseHandler).onMetadata("key",stringValue("value"));
  }
  @Test void shouldHandleMarkIgnoredWithoutResponseHandler(){
    state.setResponseHandler(null);
    state.markIgnored();
    assertNull(state.getPendingError());
    assertTrue(state.hasPendingIgnore());
  }
  @Test void shouldHandleMarkIgnoredWitResponseHandler(){
    state.setResponseHandler(responseHandler);
    state.markIgnored();
    verify(responseHandler).markIgnored();
    assertNull(state.getPendingError());
    assertFalse(state.hasPendingIgnore());
  }
  @Test void shouldHandleMarkFailedWithoutResponseHandler(){
    state.setResponseHandler(null);
    Neo4jError error=Neo4jError.from(new RuntimeException());
    state.markFailed(error);
    assertEquals(error,state.getPendingError());
    assertFalse(state.hasPendingIgnore());
  }
  @Test void shouldHandleMarkFailedWitResponseHandler(){
    state.setResponseHandler(responseHandler);
    Neo4jError error=Neo4jError.from(new RuntimeException());
    state.markFailed(error);
    verify(responseHandler).markFailed(error);
    assertNull(state.getPendingError());
    assertFalse(state.hasPendingIgnore());
  }
  @Test void shouldHandleOnFinishWithoutResponseHandler(){
    state.setResponseHandler(null);
    state.onFinish();
    assertNull(state.getPendingError());
    assertFalse(state.hasPendingIgnore());
  }
  @Test void shouldHandleOnFinishWitResponseHandler(){
    state.setResponseHandler(responseHandler);
    state.onFinish();
    verify(responseHandler).onFinish();
  }
  @Test void shouldResetPendingFailureAndIgnored(){
    state.setResponseHandler(null);
    Neo4jError error=Neo4jError.from(new RuntimeException());
    state.markIgnored();
    state.markFailed(error);
    assertEquals(error,state.getPendingError());
    assertTrue(state.hasPendingIgnore());
    state.resetPendingFailedAndIgnored();
    assertNull(state.getPendingError());
    assertFalse(state.hasPendingIgnore());
  }
  @Test void shouldNotProcessMessageWhenClosed(){
    state.setResponseHandler(null);
    state.markClosed();
    assertFalse(state.canProcessMessage());
  }
  @Test void shouldNotProcessMessageWithPendingError(){
    state.setResponseHandler(null);
    state.markFailed(Neo4jError.from(new RuntimeException()));
    assertFalse(state.canProcessMessage());
  }
  @Test void shouldNotProcessMessageWithPendingIgnore(){
    state.setResponseHandler(null);
    state.markIgnored();
    assertFalse(state.canProcessMessage());
  }
  @Test void shouldInterrupt(){
    assertFalse(state.isInterrupted());
    assertEquals(1,state.incrementInterruptCounter());
    assertTrue(state.isInterrupted());
    assertEquals(2,state.incrementInterruptCounter());
    assertTrue(state.isInterrupted());
    assertEquals(3,state.incrementInterruptCounter());
    assertTrue(state.isInterrupted());
    assertEquals(2,state.decrementInterruptCounter());
    assertTrue(state.isInterrupted());
    assertEquals(1,state.decrementInterruptCounter());
    assertTrue(state.isInterrupted());
    assertEquals(0,state.decrementInterruptCounter());
    assertFalse(state.isInterrupted());
  }
}
