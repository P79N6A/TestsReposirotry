class ConnectedStateIT extends BoltStateMachineStateTestBase {
  @Test void shouldHandleHelloMessage() throws Throwable {
    BoltStateMachineV3 machine=newStateMachine();
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    machine.process(newHelloMessage(),recorder);
    RecordedBoltResponse response=recorder.nextResponse();
    assertThat(response,succeededWithMetadata("server",BOLT_SERVER_VERSION_PREFIX + Version.getNeo4jVersion()));
    assertThat(response,succeededWithMetadata("connection_id","conn-v3-test-boltchannel-id"));
    assertThat(machine.state(),instanceOf(ReadyState.class));
  }
  @ParameterizedTest @MethodSource("illegalV3Messages") void shouldCloseConnectionOnIllegalV3Messages(  RequestMessage message) throws Throwable {
    shouldCloseConnectionOnIllegalMessages(message);
  }
  @ParameterizedTest @MethodSource("illegalV2Messages") void shouldCloseConnectionOnIllegalV2Messages(  RequestMessage message) throws Throwable {
    shouldCloseConnectionOnIllegalMessages(message);
  }
  private void shouldCloseConnectionOnIllegalMessages(  RequestMessage message) throws InterruptedException {
    BoltStateMachineV3 machine=newStateMachine();
    BoltResponseRecorder recorder=new BoltResponseRecorder();
    verifyKillsConnection(() -> machine.process(message,recorder));
    assertThat(recorder.nextResponse(),failedWithStatus(Status.Request.Invalid));
    assertNull(machine.state());
  }
  private static Stream<RequestMessage> illegalV3Messages() throws BoltIOException {
    return Stream.of(new RunMessage("RETURN 1",EMPTY_PARAMS,EMPTY_PARAMS),DiscardAllMessage.INSTANCE,PullAllMessage.INSTANCE,new BeginMessage(),COMMIT_MESSAGE,ROLLBACK_MESSAGE,InterruptSignal.INSTANCE,ResetMessage.INSTANCE,GOODBYE_MESSAGE);
  }
  private static Stream<RequestMessage> illegalV2Messages(){
    return Stream.of(new org.neo4j.bolt.v1.messaging.request.RunMessage("RETURN 1",EMPTY_PARAMS),new InitMessage(USER_AGENT,emptyMap()));
  }
}
