public class StoreProcessorTest {
  @Rule public final NeoStoresRule stores=new NeoStoresRule(getClass(),StoreType.NODE,StoreType.NODE_LABEL);
  @SuppressWarnings("unchecked") @Test public void shouldProcessAllTheRecordsInAStore() throws Exception {
    RecordStore<NodeRecord> nodeStore=stores.builder().build().getNodeStore();
    ConsistencyReport.Reporter reporter=mock(ConsistencyReport.Reporter.class);
    StoreProcessor processor=new StoreProcessor(CheckDecorator.NONE,reporter,Stage.SEQUENTIAL_FORWARD,CacheAccess.EMPTY);
    nodeStore.updateRecord(node(0,false,0,0));
    nodeStore.updateRecord(node(1,false,0,0));
    nodeStore.updateRecord(node(2,false,0,0));
    nodeStore.setHighestPossibleIdInUse(2);
    processor.applyFiltered(nodeStore);
    verify(reporter,times(3)).forNode(any(NodeRecord.class),any(RecordCheck.class));
  }
  private NodeRecord node(  long id,  boolean dense,  long nextRel,  long nextProp){
    return new NodeRecord(id).initialize(true,nextProp,dense,nextRel,0);
  }
  @SuppressWarnings("unchecked") @Test public void shouldStopProcessingRecordsWhenSignalledToStop() throws Exception {
    ConsistencyReport.Reporter reporter=mock(ConsistencyReport.Reporter.class);
    StoreProcessor processor=new StoreProcessor(CheckDecorator.NONE,reporter,Stage.SEQUENTIAL_FORWARD,CacheAccess.EMPTY);
    RecordStore<NodeRecord> nodeStore=new RecordStore.Delegator<NodeRecord>(stores.builder().build().getNodeStore()){
      @Override public void getRecordByCursor(      long id,      NodeRecord target,      RecordLoad mode,      PageCursor cursor) throws InvalidRecordException {
        if (id == 3) {
          processor.stop();
        }
        super.getRecordByCursor(id,target,mode,cursor);
      }
    }
;
    nodeStore.updateRecord(node(0,false,0,0));
    nodeStore.updateRecord(node(1,false,0,0));
    nodeStore.updateRecord(node(2,false,0,0));
    nodeStore.updateRecord(node(3,false,0,0));
    nodeStore.updateRecord(node(4,false,0,0));
    nodeStore.setHighestPossibleIdInUse(4);
    processor.applyFiltered(nodeStore);
    verify(reporter,times(3)).forNode(any(NodeRecord.class),any(RecordCheck.class));
  }
}
