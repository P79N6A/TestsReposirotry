public class SpecificDepthTraversalTest extends TraversalTestBase {
  private Transaction tx;
  @Before public void createTheGraph(){
    createGraph("0 ROOT 1","1 KNOWS 2","2 KNOWS 3","2 KNOWS 4","4 KNOWS 5","5 KNOWS 6","3 KNOWS 1");
    tx=beginTx();
  }
  @After public void tearDown(){
    tx.close();
  }
  @Test public void shouldGetStartNodeOnDepthZero(){
    TraversalDescription description=getGraphDb().traversalDescription().evaluator(Evaluators.atDepth(0));
    expectNodes(description.traverse(getNodeWithName("6")),"6");
  }
  @Test public void shouldGetCorrectNodesFromToDepthOne(){
    TraversalDescription description=getGraphDb().traversalDescription().evaluator(Evaluators.fromDepth(1)).evaluator(Evaluators.toDepth(1));
    expectNodes(description.traverse(getNodeWithName("6")),"5");
  }
  @Test public void shouldGetCorrectNodeAtDepthOne(){
    TraversalDescription description=getGraphDb().traversalDescription().evaluator(Evaluators.atDepth(1));
    expectNodes(description.traverse(getNodeWithName("6")),"5");
  }
  @Test public void shouldGetCorrectNodesAtDepthZero(){
    TraversalDescription description=getGraphDb().traversalDescription().evaluator(Evaluators.fromDepth(0)).evaluator(Evaluators.toDepth(0));
    expectNodes(description.traverse(getNodeWithName("6")),"6");
  }
  @Test public void shouldGetStartNodeWhenFromToIsZeroBreadthFirst(){
    TraversalDescription description=getGraphDb().traversalDescription().breadthFirst().evaluator(Evaluators.fromDepth(0)).evaluator(Evaluators.toDepth(0));
    expectNodes(description.traverse(getNodeWithName("0")),"0");
  }
  @Test public void shouldGetStartNodeWhenAtIsZeroBreadthFirst(){
    TraversalDescription description=getGraphDb().traversalDescription().breadthFirst().evaluator(Evaluators.atDepth(0));
    expectNodes(description.traverse(getNodeWithName("2")),"2");
  }
  @Test public void shouldGetSecondNodeWhenFromToIsTwoBreadthFirst(){
    TraversalDescription description=getGraphDb().traversalDescription().breadthFirst().evaluator(Evaluators.fromDepth(2)).evaluator(Evaluators.toDepth(2));
    expectNodes(description.traverse(getNodeWithName("5")),"2");
  }
  @Test public void shouldGetSecondNodeWhenAtIsTwoBreadthFirst(){
    TraversalDescription description=getGraphDb().traversalDescription().breadthFirst().evaluator(Evaluators.atDepth(2));
    expectNodes(description.traverse(getNodeWithName("6")),"4");
  }
}
