public class BoltConfigIT extends AbstractBoltTransportsTest {
  private static final String ANOTHER_CONNECTOR_KEY="1";
  @Rule public Neo4jWithSocket server=new Neo4jWithSocket(getClass(),settings -> {
    settings.put(new BoltConnector(DEFAULT_CONNECTOR_KEY).type.name(),"BOLT");
    settings.put(new BoltConnector(DEFAULT_CONNECTOR_KEY).enabled.name(),"true");
    settings.put(new BoltConnector(DEFAULT_CONNECTOR_KEY).address.name(),"localhost:0");
    settings.put(new BoltConnector(ANOTHER_CONNECTOR_KEY).type.name(),"BOLT");
    settings.put(new BoltConnector(ANOTHER_CONNECTOR_KEY).enabled.name(),"true");
    settings.put(new BoltConnector(ANOTHER_CONNECTOR_KEY).address.name(),"localhost:0");
    settings.put(new BoltConnector(ANOTHER_CONNECTOR_KEY).encryption_level.name(),REQUIRED.name());
  }
);
  @Rule public SuppressOutput suppressOutput=SuppressOutput.suppressAll();
  @Test public void shouldSupportMultipleConnectors() throws Throwable {
    HostnamePort address0=server.lookupConnector(DEFAULT_CONNECTOR_KEY);
    assertConnectionAccepted(address0,newConnection());
    HostnamePort address1=server.lookupConnector(ANOTHER_CONNECTOR_KEY);
    assertConnectionRejected(address1,newConnection());
  }
  private void assertConnectionRejected(  HostnamePort address,  TransportConnection client) throws Exception {
    client.connect(address).send(util.defaultAcceptedVersions());
    assertThat(client,eventuallyDisconnects());
  }
  private void assertConnectionAccepted(  HostnamePort address,  TransportConnection client) throws Exception {
    client.connect(address).send(util.defaultAcceptedVersions()).send(util.chunk(new InitMessage("TestClient/1.1",emptyMap())));
    assertThat(client,util.eventuallyReceivesSelectedProtocolVersion());
  }
}
