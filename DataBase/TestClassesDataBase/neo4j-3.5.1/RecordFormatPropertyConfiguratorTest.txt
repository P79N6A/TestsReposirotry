public class RecordFormatPropertyConfiguratorTest {
  @Rule public ExpectedException expectedException=ExpectedException.none();
  @Test public void keepUserDefinedFormatConfig(){
    Config config=Config.defaults(string_block_size,"36");
    RecordFormats recordFormats=Standard.LATEST_RECORD_FORMATS;
    new RecordFormatPropertyConfigurator(recordFormats,config).configure();
    assertEquals("Should keep used specified value",36,config.get(string_block_size).intValue());
  }
  @Test public void overrideDefaultValuesForCurrentFormat(){
    Config config=Config.defaults();
    int testHeaderSize=17;
    ResizableRecordFormats recordFormats=new ResizableRecordFormats(testHeaderSize);
    new RecordFormatPropertyConfigurator(recordFormats,config).configure();
    assertEquals(DEFAULT_BLOCK_SIZE - testHeaderSize,config.get(string_block_size).intValue());
    assertEquals(DEFAULT_BLOCK_SIZE - testHeaderSize,config.get(array_block_size).intValue());
    assertEquals(DEFAULT_LABEL_BLOCK_SIZE - testHeaderSize,config.get(label_block_size).intValue());
  }
  @Test public void checkForMinimumBlockSize(){
    Config config=Config.defaults();
    int testHeaderSize=60;
    ResizableRecordFormats recordFormats=new ResizableRecordFormats(testHeaderSize);
    expectedException.expect(IllegalArgumentException.class);
    expectedException.expectMessage("Block size should be bigger then " + MINIMAL_BLOCK_SIZE);
    new RecordFormatPropertyConfigurator(recordFormats,config).configure();
  }
private class ResizableRecordFormats implements RecordFormats {
    private int dynamicRecordHeaderSize;
    ResizableRecordFormats(    int dynamicRecordHeaderSize){
      this.dynamicRecordHeaderSize=dynamicRecordHeaderSize;
    }
    @Override public String storeVersion(){
      return null;
    }
    @Override public String introductionVersion(){
      return null;
    }
    @Override public int generation(){
      return 0;
    }
    @Override public RecordFormat<NodeRecord> node(){
      return null;
    }
    @Override public RecordFormat<RelationshipGroupRecord> relationshipGroup(){
      return null;
    }
    @Override public RecordFormat<RelationshipRecord> relationship(){
      return null;
    }
    @Override public RecordFormat<PropertyRecord> property(){
      return null;
    }
    @Override public RecordFormat<LabelTokenRecord> labelToken(){
      return null;
    }
    @Override public RecordFormat<PropertyKeyTokenRecord> propertyKeyToken(){
      return null;
    }
    @Override public RecordFormat<RelationshipTypeTokenRecord> relationshipTypeToken(){
      return null;
    }
    @Override public RecordFormat<DynamicRecord> dynamic(){
      return new ResizableRecordFormat(dynamicRecordHeaderSize);
    }
    @Override public RecordFormat<MetaDataRecord> metaData(){
      return null;
    }
    @Override public Capability[] capabilities(){
      return new Capability[0];
    }
    @Override public boolean hasCapability(    Capability capability){
      return false;
    }
    @Override public FormatFamily getFormatFamily(){
      return StandardFormatFamily.INSTANCE;
    }
    @Override public boolean hasCompatibleCapabilities(    RecordFormats other,    CapabilityType type){
      return false;
    }
    @Override public String name(){
      return getClass().getName();
    }
  }
private class ResizableRecordFormat extends NoRecordFormat<DynamicRecord> {
    private int headerSize;
    ResizableRecordFormat(    int headerSize){
      this.headerSize=headerSize;
    }
    @Override public int getRecordHeaderSize(){
      return headerSize;
    }
  }
}
