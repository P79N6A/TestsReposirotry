public class BatchOperationHeaderIT extends ExclusiveServerTestBase {
  private NeoServer server;
  @Rule public TemporaryFolder folder=new TemporaryFolder();
  @Before public void cleanTheDatabase() throws IOException {
    server=serverOnRandomPorts().withThirdPartyJaxRsPackage("org.dummy.web.service",DUMMY_WEB_SERVICE_MOUNT_POINT).usingDataDir(folder.getRoot().getAbsolutePath()).build();
    server.start();
  }
  @After public void stopServer(){
    if (server != null) {
      server.stop();
    }
  }
  @Test public void shouldPassHeaders() throws Exception {
    int httpPort=getLocalHttpPort();
    String jsonData=new PrettyJSON().array().object().key("method").value("GET").key("to").value("../.." + DUMMY_WEB_SERVICE_MOUNT_POINT + "/needs-auth-header").key("body").object().endObject().endObject().endArray().toString();
    JaxRsResponse response=new RestRequest(null,"user","pass").post(server.baseUri() + "db/data/batch",jsonData);
    assertEquals(200,response.getStatus());
    final List<Map<String,Object>> responseData=jsonToList(response.getEntity());
    Map<String,Object> res=(Map<String,Object>)responseData.get(0).get("body");
    assertEquals("Basic dXNlcjpwYXNz",res.get("Authorization"));
    assertEquals("application/json",res.get("Accept"));
    assertEquals("application/json",res.get("Content-Type"));
    assertEquals("localhost:" + httpPort,res.get("Host"));
    assertEquals("keep-alive",res.get("Connection"));
  }
  private int getLocalHttpPort(){
    ConnectorPortRegister connectorPortRegister=server.getDatabase().getGraph().getDependencyResolver().resolveDependency(ConnectorPortRegister.class);
    return connectorPortRegister.getLocalAddress("http").getPort();
  }
}
