public abstract class NodeCursorTestBase<G extends KernelAPIReadTestSupport> extends KernelAPIReadTestBase<G> {
  private static List<Long> NODE_IDS;
  private static long foo, bar, baz, barbaz, bare, gone;
  @Override public void createTestGraph(  GraphDatabaseService graphDb){
    Node deleted;
    try (Transaction tx=graphDb.beginTx()){
      foo=graphDb.createNode(label("Foo")).getId();
      bar=graphDb.createNode(label("Bar")).getId();
      baz=graphDb.createNode(label("Baz")).getId();
      barbaz=graphDb.createNode(label("Bar"),label("Baz")).getId();
      gone=(deleted=graphDb.createNode()).getId();
      bare=graphDb.createNode().getId();
      tx.success();
    }
     try (Transaction tx=graphDb.beginTx()){
      deleted.delete();
      tx.success();
    }
     try (Transaction tx=graphDb.beginTx()){
      NODE_IDS=new ArrayList<>();
      for (      Node node : graphDb.getAllNodes()) {
        NODE_IDS.add(node.getId());
      }
      tx.success();
    }
   }
  @Test public void shouldScanNodes(){
    List<Long> ids=new ArrayList<>();
    try (NodeCursor nodes=cursors.allocateNodeCursor()){
      read.allNodesScan(nodes);
      while (nodes.next()) {
        ids.add(nodes.nodeReference());
      }
    }
     assertEquals(NODE_IDS,ids);
  }
  @Test public void shouldAccessNodesByReference(){
    try (NodeCursor nodes=cursors.allocateNodeCursor()){
      for (      long id : NODE_IDS) {
        read.singleNode(id,nodes);
        assertTrue("should access defined node",nodes.next());
        assertEquals("should access the correct node",id,nodes.nodeReference());
        assertFalse("should only access a single node",nodes.next());
      }
    }
   }
  @Test public void shouldNotAccessNegativeReferences(){
    try (NodeCursor node=cursors.allocateNodeCursor()){
      read.singleNode(-2L,node);
      assertFalse("should not access negative reference node",node.next());
    }
   }
  @Test public void shouldNotFindDeletedNode(){
    try (NodeCursor nodes=cursors.allocateNodeCursor()){
      read.singleNode(gone,nodes);
      assertFalse("should not access deleted node",nodes.next());
    }
   }
  @Test public void shouldReadLabels(){
    try (NodeCursor nodes=cursors.allocateNodeCursor()){
      LabelSet labels;
      read.singleNode(foo,nodes);
      assertTrue("should access defined node",nodes.next());
      labels=nodes.labels();
      assertEquals("number of labels",1,labels.numberOfLabels());
      int fooLabel=labels.label(0);
      assertTrue(nodes.hasLabel(fooLabel));
      assertFalse("should only access a single node",nodes.next());
      read.singleNode(bar,nodes);
      assertTrue("should access defined node",nodes.next());
      labels=nodes.labels();
      assertEquals("number of labels",1,labels.numberOfLabels());
      int barLabel=labels.label(0);
      assertFalse(nodes.hasLabel(fooLabel));
      assertTrue(nodes.hasLabel(barLabel));
      assertFalse("should only access a single node",nodes.next());
      read.singleNode(baz,nodes);
      assertTrue("should access defined node",nodes.next());
      labels=nodes.labels();
      assertEquals("number of labels",1,labels.numberOfLabels());
      int bazLabel=labels.label(0);
      assertFalse(nodes.hasLabel(fooLabel));
      assertFalse(nodes.hasLabel(barLabel));
      assertTrue(nodes.hasLabel(bazLabel));
      assertFalse("should only access a single node",nodes.next());
      assertNotEquals("distinct labels",fooLabel,barLabel);
      assertNotEquals("distinct labels",fooLabel,bazLabel);
      assertNotEquals("distinct labels",barLabel,bazLabel);
      read.singleNode(barbaz,nodes);
      assertTrue("should access defined node",nodes.next());
      labels=nodes.labels();
      assertEquals("number of labels",2,labels.numberOfLabels());
      if (labels.label(0) == barLabel) {
        assertEquals(bazLabel,labels.label(1));
      }
 else {
        assertEquals(bazLabel,labels.label(0));
        assertEquals(barLabel,labels.label(1));
      }
      assertFalse(nodes.hasLabel(fooLabel));
      assertTrue(nodes.hasLabel(barLabel));
      assertTrue(nodes.hasLabel(bazLabel));
      assertFalse("should only access a single node",nodes.next());
      read.singleNode(bare,nodes);
      assertTrue("should access defined node",nodes.next());
      labels=nodes.labels();
      assertEquals("number of labels",0,labels.numberOfLabels());
      assertFalse(nodes.hasLabel(fooLabel));
      assertFalse(nodes.hasLabel(barLabel));
      assertFalse(nodes.hasLabel(bazLabel));
      assertFalse("should only access a single node",nodes.next());
    }
   }
}
