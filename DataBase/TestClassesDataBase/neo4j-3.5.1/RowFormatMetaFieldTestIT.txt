public class RowFormatMetaFieldTestIT extends AbstractRestFunctionalTestBase {
  private final HTTP.Builder http=HTTP.withBaseUri(server().baseUri());
  private String commitResource;
  @Before public void setUp(){
    Response begin=http.POST("db/data/transaction");
    assertThat(begin.status(),equalTo(201));
    assertHasTxLocation(begin);
    try {
      commitResource=begin.stringFromContent("commit");
    }
 catch (    JsonParseException e) {
      fail("Exception caught when setting up test: " + e.getMessage());
    }
    assertThat(commitResource,equalTo(begin.location() + "/commit"));
  }
  @After public void tearDown(){
    graphdb().execute("MATCH (n) DETACH DELETE n");
  }
  @Test public void metaFieldShouldGetCorrectIndex(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRow("MATCH (s:Start)-[r:R]->(e:End) RETURN s, r, 1, e"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,rowContainsMetaNodesAtIndex(0,3));
    assertThat(commit,rowContainsMetaRelsAtIndex(1));
    assertThat(commit.status(),equalTo(200));
  }
  @Test public void metaFieldShouldGivePathInfoInList(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRow("MATCH p=(s)-[r:R]->(e) RETURN p"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,rowContainsAMetaListAtIndex(0));
    assertThat(commit.status(),equalTo(200));
  }
  @Test public void metaFieldShouldPutPathListAtCorrectIndex(){
    graphdb().execute("CREATE (:Start)-[:R]->(:End)");
    Response commit=http.POST(commitResource,queryAsJsonRow("MATCH p=(s)-[r:R]->(e) RETURN 10, p"));
    assertThat(commit,containsNoErrors());
    assertThat(commit,rowContainsAMetaListAtIndex(1));
    assertThat(commit.status(),equalTo(200));
  }
  private HTTP.RawPayload queryAsJsonRow(  String query){
    return quotedJson("{ 'statements': [ { 'statement': '" + query + "', 'resultDataContents': [ 'row' ] } ] }");
  }
  private void assertHasTxLocation(  Response begin){
    assertThat(begin.location(),matches("http://localhost:\\d+/db/data/transaction/\\d+"));
  }
}
