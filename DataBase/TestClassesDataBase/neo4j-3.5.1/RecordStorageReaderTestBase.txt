/** 
 * Base class for disk layer tests, which test read-access to committed data.
 */
public abstract class RecordStorageReaderTestBase {
  @SuppressWarnings("deprecation") protected GraphDatabaseAPI db;
  protected final Label label1=label("FirstLabel");
  protected final Label label2=label("SecondLabel");
  protected final RelationshipType relType1=RelationshipType.withName("type1");
  protected final RelationshipType relType2=RelationshipType.withName("type2");
  protected final String propertyKey="name";
  protected final String otherPropertyKey="age";
  protected KernelStatement state;
  protected StorageReader storageReader;
  @SuppressWarnings("deprecation") @Before public void before(){
    db=(GraphDatabaseAPI)createGraphDatabase();
    DependencyResolver resolver=db.getDependencyResolver();
    this.storageReader=resolver.resolveDependency(StorageEngine.class).newReader();
    this.state=new KernelStatement(null,null,storageReader,LockTracer.NONE,null,new ClockContext(),EmptyVersionContextSupplier.EMPTY);
  }
  protected GraphDatabaseService createGraphDatabase(){
    return new TestGraphDatabaseFactory().newImpermanentDatabase();
  }
  @After public void after(){
    db.shutdown();
  }
  protected static Node createLabeledNode(  GraphDatabaseService db,  Map<String,Object> properties,  Label... labels){
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(labels);
      for (      Map.Entry<String,Object> property : properties.entrySet()) {
        node.setProperty(property.getKey(),property.getValue());
      }
      tx.success();
      return node;
    }
   }
  protected int labelId(  Label label){
    try (Transaction tx=db.beginTx()){
      int id=ktx().tokenRead().nodeLabel(label.name());
      tx.success();
      return id;
    }
   }
  protected int relationshipTypeId(  RelationshipType type){
    try (Transaction tx=db.beginTx()){
      int id=ktx().tokenRead().relationshipType(type.name());
      tx.success();
      return id;
    }
   }
  protected String relationshipType(  int id) throws KernelException {
    try (Transaction tx=db.beginTx()){
      String name=ktx().tokenRead().relationshipTypeName(id);
      tx.success();
      return name;
    }
   }
  protected int propertyKeyId(  String propertyKey){
    try (Transaction tx=db.beginTx()){
      int id=ktx().tokenRead().propertyKey(propertyKey);
      tx.success();
      return id;
    }
   }
  protected KernelTransaction ktx(){
    DependencyResolver dependencyResolver=db.getDependencyResolver();
    return dependencyResolver.resolveDependency(ThreadToStatementContextBridge.class).getKernelTransactionBoundToThisThread(true);
  }
}
