/** 
 * @author Anton Persson
 */
public class TestTopFetchingWeightedPathIterator extends Neo4jAlgoTestCase {
  @Test public void shouldHandleEmptySource(){
    topFetcher=new TopFetchingWeightedPathIterator(Collections.emptyIterator(),evaluator);
    assertFalse("Expected iterator to be empty",topFetcher.hasNext());
    assertNull("Expected null after report has no next",topFetcher.fetchNextOrNull());
  }
  @Test public void shouldHandleSinglePath(){
    Path a=graph.makePathWithRelProperty(length,"a1-1-a2");
    List<Path> list=new ArrayList<>();
    list.add(a);
    topFetcher=new TopFetchingWeightedPathIterator(list.iterator(),evaluator,epsilon);
    assertTrue("Expected at least one element",topFetcher.hasNext());
    assertPathDef(a,topFetcher.next());
    assertFalse("Expected no more elements",topFetcher.hasNext());
    assertNull("Expected null after report has no next",topFetcher.fetchNextOrNull());
  }
  @Test public void shouldHandleMultipleShortest(){
    Path a=graph.makePathWithRelProperty(length,"a1-1-a2");
    Path b=graph.makePathWithRelProperty(length,"b1-0-b2-1-b3-0-b4");
    List<Path> list=new ArrayList<>();
    list.add(a);
    list.add(b);
    topFetcher=new TopFetchingWeightedPathIterator(list.iterator(),evaluator,epsilon);
    List<Path> result=new ArrayList<>();
    while (topFetcher.hasNext()) {
      result.add(topFetcher.next());
    }
    assertPathsWithPaths(result,a,b);
  }
  @Test public void shouldHandleUnsortedSource(){
    Path a=graph.makePathWithRelProperty(length,"a1-1-a2-2-a3");
    Path b=graph.makePathWithRelProperty(length,"b1-3-b2-3-b3");
    Path c=graph.makePathWithRelProperty(length,"c1-0-c2-1-c3");
    Path d=graph.makePathWithRelProperty(length,"d1-3-d2-0-d3");
    Path e=graph.makePathWithRelProperty(length,"e1-0-e2-0-e3-0-e4-1-e5");
    List<Path> list=Arrays.asList(a,b,c,d,e);
    topFetcher=new TopFetchingWeightedPathIterator(list.iterator(),evaluator,epsilon);
    List<Path> result=new ArrayList<>();
    while (topFetcher.hasNext()) {
      result.add(topFetcher.next());
    }
    assertPathsWithPaths(result,c,e);
  }
  private final double epsilon=NoneStrictMath.EPSILON;
  private final String length="length";
  private CostEvaluator evaluator=CommonEvaluators.doubleCostEvaluator(length);
  private TopFetchingWeightedPathIterator topFetcher;
}
