@SuppressWarnings("WeakerAccess") public class ResourceInjectionTest {
  @Rule public ExpectedException exception=ExpectedException.none();
  private ReflectiveProcedureCompiler compiler;
  private final ResourceTracker resourceTracker=new StubResourceManager();
  private Log log=mock(Log.class);
  public static String notAvailableMessage(  String procName){
    return argThat(notAvailableMessageMatcher(procName));
  }
  private static Matcher<String> notAvailableMessageMatcher(  String procName){
    return allOf(containsString(procName),containsString("unavailable"));
  }
  @Before public void setUp(){
    ComponentRegistry safeComponents=new ComponentRegistry();
    ComponentRegistry allComponents=new ComponentRegistry();
    safeComponents.register(MyAwesomeAPI.class,ctx -> new MyAwesomeAPI());
    allComponents.register(MyAwesomeAPI.class,ctx -> new MyAwesomeAPI());
    allComponents.register(MyUnsafeAPI.class,ctx -> new MyUnsafeAPI());
    compiler=new ReflectiveProcedureCompiler(new TypeMappers(),safeComponents,allComponents,log,ProcedureConfig.DEFAULT);
  }
  @Test public void shouldCompileAndRunProcedure() throws Throwable {
    CallableProcedure proc=compiler.compileProcedure(ProcedureWithInjectedAPI.class,null,true).get(0);
    List<Object[]> out=Iterators.asList(proc.apply(new BasicContext(),new Object[0],resourceTracker));
    assertThat(out.get(0),equalTo(new Object[]{"Bonnie"}));
    assertThat(out.get(1),equalTo(new Object[]{"Clyde"}));
  }
  @Test public void shouldFailNicelyWhenUnknownAPI() throws Throwable {
    exception.expect(ProcedureException.class);
    exception.expectMessage("Unable to set up injection for procedure `ProcedureWithUnknownAPI`, " + "the field `api` has type `class org.neo4j.kernel.impl.proc.ResourceInjectionTest$UnknownAPI` " + "which is not a known injectable component.");
    compiler.compileProcedure(ProcedureWithUnknownAPI.class,null,true);
  }
  @Test public void shouldCompileAndRunUnsafeProcedureUnsafeMode() throws Throwable {
    CallableProcedure proc=compiler.compileProcedure(ProcedureWithUnsafeAPI.class,null,true).get(0);
    List<Object[]> out=Iterators.asList(proc.apply(new BasicContext(),new Object[0],resourceTracker));
    assertThat(out.get(0),equalTo(new Object[]{"Morpheus"}));
    assertThat(out.get(1),equalTo(new Object[]{"Trinity"}));
    assertThat(out.get(2),equalTo(new Object[]{"Neo"}));
    assertThat(out.get(3),equalTo(new Object[]{"Emil"}));
  }
  @Test public void shouldFailNicelyWhenUnsafeAPISafeMode() throws Throwable {
    List<CallableProcedure> procList=compiler.compileProcedure(ProcedureWithUnsafeAPI.class,null,false);
    verify(log).warn(notAvailableMessage("org.neo4j.kernel.impl.proc.listCoolPeople"));
    assertThat(procList.size(),equalTo(1));
    try {
      procList.get(0).apply(new BasicContext(),new Object[0],resourceTracker);
      fail();
    }
 catch (    ProcedureException e) {
      assertThat(e.getMessage(),notAvailableMessageMatcher("org.neo4j.kernel.impl.proc.listCoolPeople"));
    }
  }
  @Test public void shouldCompileAndRunUserFunctions() throws Throwable {
    CallableUserFunction proc=compiler.compileFunction(FunctionWithInjectedAPI.class).get(0);
    Object out=proc.apply(new BasicContext(),new AnyValue[0]);
    assertThat(out,equalTo(Values.of("[Bonnie, Clyde]")));
  }
  @Test public void shouldFailNicelyWhenFunctionUsesUnknownAPI() throws Throwable {
    exception.expect(ProcedureException.class);
    exception.expectMessage("Unable to set up injection for procedure `FunctionWithUnknownAPI`, " + "the field `api` has type `class org.neo4j.kernel.impl.proc.ResourceInjectionTest$UnknownAPI` " + "which is not a known injectable component.");
    compiler.compileFunction(FunctionWithUnknownAPI.class);
  }
  @Test public void shouldFailNicelyWhenUnsafeAPISafeModeFunction() throws Throwable {
    List<CallableUserFunction> procList=compiler.compileFunction(FunctionWithUnsafeAPI.class);
    verify(log).warn(notAvailableMessage("org.neo4j.kernel.impl.proc.listCoolPeople"));
    assertThat(procList.size(),equalTo(1));
    try {
      procList.get(0).apply(new BasicContext(),new AnyValue[0]);
      fail();
    }
 catch (    ProcedureException e) {
      assertThat(e.getMessage(),notAvailableMessageMatcher("org.neo4j.kernel.impl.proc.listCoolPeople"));
    }
  }
  @Test public void shouldCompileAndRunUserAggregationFunctions() throws Throwable {
    CallableUserAggregationFunction proc=compiler.compileAggregationFunction(AggregationFunctionWithInjectedAPI.class).get(0);
    proc.create(new BasicContext()).update(new Object[]{});
    Object out=proc.create(new BasicContext()).result();
    assertThat(out,equalTo("[Bonnie, Clyde]"));
  }
  @Test public void shouldFailNicelyWhenAggregationFunctionUsesUnknownAPI() throws Throwable {
    exception.expect(ProcedureException.class);
    exception.expectMessage("Unable to set up injection for procedure `AggregationFunctionWithUnknownAPI`, " + "the field `api` has type `class org.neo4j.kernel.impl.proc.ResourceInjectionTest$UnknownAPI` " + "which is not a known injectable component.");
    compiler.compileAggregationFunction(AggregationFunctionWithUnknownAPI.class);
  }
  @Test public void shouldFailNicelyWhenUnsafeAPISafeModeAggregationFunction() throws Throwable {
    List<CallableUserAggregationFunction> procList=compiler.compileAggregationFunction(AggregationFunctionWithUnsafeAPI.class);
    verify(log).warn(notAvailableMessage("org.neo4j.kernel.impl.proc.listCoolPeople"));
    assertThat(procList.size(),equalTo(1));
    try {
      procList.get(0).create(new BasicContext()).update(new Object[]{});
      Object out=procList.get(0).create(new BasicContext()).result();
      fail();
    }
 catch (    ProcedureException e) {
      assertThat(e.getMessage(),notAvailableMessageMatcher("org.neo4j.kernel.impl.proc.listCoolPeople"));
    }
  }
  @Test public void shouldFailNicelyWhenAllUsesUnsafeAPI() throws Throwable {
    compiler.compileFunction(FunctionsAndProcedureUnsafe.class);
    compiler.compileProcedure(FunctionsAndProcedureUnsafe.class,null,false);
    compiler.compileAggregationFunction(FunctionsAndProcedureUnsafe.class);
    verify(log).warn(notAvailableMessage("org.neo4j.kernel.impl.proc.safeUserFunctionInUnsafeAPIClass"));
    verify(log).warn(notAvailableMessage("org.neo4j.kernel.impl.proc.listCoolPeopleProcedure"));
    verify(log).warn(notAvailableMessage("org.neo4j.kernel.impl.proc.listCoolPeople "));
  }
public static class MyOutputRecord {
    public String name;
    public MyOutputRecord(    String name){
      this.name=name;
    }
  }
public static class MyAwesomeAPI {
    List<String> listCoolPeople(){
      return asList("Bonnie","Clyde");
    }
  }
public static class UnknownAPI {
    List<String> listCoolPeople(){
      return singletonList("booh!");
    }
  }
public static class MyUnsafeAPI {
    List<String> listCoolPeople(){
      return asList("Morpheus","Trinity","Neo","Emil");
    }
  }
public static class ProcedureWithInjectedAPI {
    @Context public MyAwesomeAPI api;
    @Procedure public Stream<MyOutputRecord> listCoolPeople(){
      return api.listCoolPeople().stream().map(MyOutputRecord::new);
    }
  }
public static class FunctionWithInjectedAPI {
    @Context public MyAwesomeAPI api;
    @UserFunction public String listCoolPeople(){
      return api.listCoolPeople().toString();
    }
  }
public static class AggregationFunctionWithInjectedAPI {
    @Context public MyAwesomeAPI api;
    @UserAggregationFunction public VoidOutput listCoolPeople(){
      return new VoidOutput(api);
    }
public static class VoidOutput {
      private MyAwesomeAPI api;
      public VoidOutput(      MyAwesomeAPI api){
        this.api=api;
      }
      @UserAggregationUpdate public void update(){
      }
      @UserAggregationResult public String result(){
        return api.listCoolPeople().toString();
      }
    }
  }
public static class ProcedureWithUnknownAPI {
    @Context public UnknownAPI api;
    @Procedure public Stream<MyOutputRecord> listCoolPeople(){
      return api.listCoolPeople().stream().map(MyOutputRecord::new);
    }
  }
public static class FunctionWithUnknownAPI {
    @Context public UnknownAPI api;
    @UserFunction public String listCoolPeople(){
      return api.listCoolPeople().toString();
    }
  }
public static class AggregationFunctionWithUnknownAPI {
    @Context public UnknownAPI api;
    @UserAggregationFunction public VoidOutput listCoolPeople(){
      return new VoidOutput(api);
    }
public static class VoidOutput {
      private UnknownAPI api;
      public VoidOutput(      UnknownAPI api){
        this.api=api;
      }
      @UserAggregationUpdate public void update(){
      }
      @UserAggregationResult public String result(){
        return api.listCoolPeople().toString();
      }
    }
  }
public static class ProcedureWithUnsafeAPI {
    @Context public MyUnsafeAPI api;
    @Procedure public Stream<MyOutputRecord> listCoolPeople(){
      return api.listCoolPeople().stream().map(MyOutputRecord::new);
    }
  }
public static class FunctionWithUnsafeAPI {
    @Context public MyUnsafeAPI api;
    @UserFunction public String listCoolPeople(){
      return api.listCoolPeople().toString();
    }
  }
public static class AggregationFunctionWithUnsafeAPI {
    @Context public MyUnsafeAPI api;
    @UserAggregationFunction public VoidOutput listCoolPeople(){
      return new VoidOutput(api);
    }
public static class VoidOutput {
      private MyUnsafeAPI api;
      public VoidOutput(      MyUnsafeAPI api){
        this.api=api;
      }
      @UserAggregationUpdate public void update(){
      }
      @UserAggregationResult public String result(){
        return api.listCoolPeople().toString();
      }
    }
  }
public static class FunctionsAndProcedureUnsafe {
    @Context public MyUnsafeAPI api;
    @UserAggregationFunction public VoidOutput listCoolPeople(){
      return new VoidOutput(api);
    }
public static class VoidOutput {
      private MyUnsafeAPI api;
      public VoidOutput(      MyUnsafeAPI api){
        this.api=api;
      }
      @UserAggregationUpdate public void update(){
      }
      @UserAggregationResult public String result(){
        return api.listCoolPeople().toString();
      }
    }
    @Procedure public Stream<MyOutputRecord> listCoolPeopleProcedure(){
      return api.listCoolPeople().stream().map(MyOutputRecord::new);
    }
    @UserFunction public String safeUserFunctionInUnsafeAPIClass(){
      return "a safe function";
    }
  }
}
