private static final class ChangedLabels extends TransactionEventHandler.Adapter<Void> {
  private final Map<Node,Set<String>> added=new HashMap<>();
  private final Map<Node,Set<String>> removed=new HashMap<>();
  private boolean active;
  @Override public Void beforeCommit(  TransactionData data){
    if (active) {
      check(added,"added to",data.assignedLabels());
      check(removed,"removed from",data.removedLabels());
    }
    active=false;
    return null;
  }
  private void check(  Map<Node,Set<String>> expected,  String change,  Iterable<LabelEntry> changes){
    for (    LabelEntry entry : changes) {
      Set<String> labels=expected.get(entry.node());
      String message=String.format("':%s' should not be %s %s",entry.label().name(),change,entry.node());
      assertNotNull(message,labels);
      assertTrue(message,labels.remove(entry.label().name()));
      if (labels.isEmpty()) {
        expected.remove(entry.node());
      }
    }
    assertTrue(String.format("Expected more labels %s nodes: %s",change,expected),expected.isEmpty());
  }
  public boolean isEmpty(){
    return added.isEmpty() && removed.isEmpty();
  }
  public void add(  Node node,  String label){
    node.addLabel(label(label));
    put(added,node,label);
  }
  public void remove(  Node node,  String label){
    node.removeLabel(label(label));
    put(removed,node,label);
  }
  private void put(  Map<Node,Set<String>> changes,  Node node,  String label){
    Set<String> labels=changes.computeIfAbsent(node,k -> new HashSet<>());
    labels.add(label);
  }
  public void activate(){
    assertFalse(isEmpty());
    active=true;
  }
  public void clear(){
    added.clear();
    removed.clear();
    active=false;
  }
}
