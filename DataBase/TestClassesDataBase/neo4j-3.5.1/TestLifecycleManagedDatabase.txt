public class TestLifecycleManagedDatabase {
  @Rule public SuppressOutput suppressOutput=suppressAll();
  private final AssertableLogProvider logProvider=new AssertableLogProvider();
  @Rule public ImpermanentDatabaseRule dbRule=new ImpermanentDatabaseRule(logProvider);
  private File dataDirectory;
  private Database theDatabase;
  private boolean deletionFailureOk;
  private GraphFactory dbFactory;
  private Config dbConfig;
  @Before public void setup() throws Exception {
    dataDirectory=createTempDir();
    dbFactory=new SimpleGraphFactory((GraphDatabaseFacade)dbRule.getGraphDatabaseAPI());
    dbConfig=Config.defaults(GraphDatabaseSettings.data_directory,dataDirectory.getAbsolutePath());
    theDatabase=newDatabase();
  }
  private LifecycleManagingDatabase newDatabase(){
    return new LifecycleManagingDatabase(dbConfig,dbFactory,GraphDatabaseDependencies.newDependencies().userLogProvider(logProvider));
  }
  @After public void shutdownDatabase() throws Throwable {
    this.theDatabase.stop();
    try {
      FileUtils.forceDelete(dataDirectory);
    }
 catch (    IOException e) {
      if (!deletionFailureOk) {
        throw e;
      }
    }
  }
  @Test public void shouldLogOnSuccessfulStartup() throws Throwable {
    theDatabase.start();
    logProvider.assertAtLeastOnce(inLog(LifecycleManagingDatabase.class).info("Started."));
  }
  @Test public void shouldShutdownCleanly() throws Throwable {
    theDatabase.start();
    theDatabase.stop();
    logProvider.assertAtLeastOnce(inLog(LifecycleManagingDatabase.class).info("Stopped."));
  }
  @Test public void shouldComplainIfDatabaseLocationIsAlreadyInUse() throws Throwable {
    deletionFailureOk=true;
    theDatabase.start();
    LifecycleManagingDatabase db=newDatabase();
    try {
      db.start();
    }
 catch (    RuntimeException e) {
      assertThat(e.getCause().getCause(),instanceOf(StoreLockException.class));
    }
  }
  @Test public void shouldBeAbleToGetLocation() throws Throwable {
    theDatabase.start();
    assertThat(theDatabase.getLocation().getAbsolutePath(),is(dbConfig.get(GraphDatabaseSettings.database_path).getAbsolutePath()));
  }
}
