public class SchemaIndexAcceptanceTest {
  @Rule public final EphemeralFileSystemRule fsRule=new EphemeralFileSystemRule();
  private GraphDatabaseService db;
  private final Label label=label("PERSON");
  private final String propertyKey="key";
  @Before public void before(){
    db=newDb();
  }
  @After public void after(){
    db.shutdown();
  }
  @Test public void creatingIndexOnExistingDataBuildsIndexWhichWillBeOnlineNextStartup(){
    Node node1;
    Node node2;
    Node node3;
    try (Transaction tx=db.beginTx()){
      node1=createNode(label,"name","One");
      node2=createNode(label,"name","Two");
      node3=createNode(label,"name","Three");
      tx.success();
    }
     createIndex(db,label,propertyKey);
    restart();
    assertThat(findNodesByLabelAndProperty(label,"name","One",db),containsOnly(node1));
    assertThat(findNodesByLabelAndProperty(label,"name","Two",db),containsOnly(node2));
    assertThat(findNodesByLabelAndProperty(label,"name","Three",db),containsOnly(node3));
  }
  @Test public void shouldIndexArrays(){
    long[] arrayPropertyValue={42,23,87};
    createIndex(db,label,propertyKey);
    Node node1;
    try (Transaction tx=db.beginTx()){
      node1=createNode(label,propertyKey,arrayPropertyValue);
      tx.success();
    }
     restart();
    assertThat(getIndexes(db,label),inTx(db,haveState(db,IndexState.ONLINE)));
    assertThat(findNodesByLabelAndProperty(label,propertyKey,arrayPropertyValue,db),containsOnly(node1));
    assertThat(findNodesByLabelAndProperty(label,propertyKey,new long[]{42,23},db),isEmpty());
    assertThat(findNodesByLabelAndProperty(label,propertyKey,Arrays.toString(arrayPropertyValue),db),isEmpty());
  }
  @Test public void shouldIndexStringArrays(){
    String[] arrayPropertyValue={"A, B","C"};
    createIndex(db,label,propertyKey);
    Node node1;
    try (Transaction tx=db.beginTx()){
      node1=createNode(label,propertyKey,arrayPropertyValue);
      tx.success();
    }
     restart();
    assertThat(getIndexes(db,label),inTx(db,haveState(db,IndexState.ONLINE)));
    assertThat(findNodesByLabelAndProperty(label,propertyKey,arrayPropertyValue,db),containsOnly(node1));
    assertThat(findNodesByLabelAndProperty(label,propertyKey,new String[]{"A","B, C"},db),isEmpty());
    assertThat(findNodesByLabelAndProperty(label,propertyKey,Arrays.toString(arrayPropertyValue),db),isEmpty());
  }
  @Test public void shouldIndexArraysPostPopulation(){
    long[] arrayPropertyValue={42,23,87};
    Node node1;
    try (Transaction tx=db.beginTx()){
      node1=createNode(label,propertyKey,arrayPropertyValue);
      tx.success();
    }
     createIndex(db,label,propertyKey);
    restart();
    assertThat(getIndexes(db,label),inTx(db,haveState(db,IndexState.ONLINE)));
    assertThat(findNodesByLabelAndProperty(label,propertyKey,arrayPropertyValue,db),containsOnly(node1));
    assertThat(findNodesByLabelAndProperty(label,propertyKey,new long[]{42,23},db),isEmpty());
    assertThat(findNodesByLabelAndProperty(label,propertyKey,Arrays.toString(arrayPropertyValue),db),isEmpty());
  }
  @Test public void recoveryAfterCreateAndDropIndex() throws Exception {
    IndexDefinition indexDefinition=createIndex(db,label,propertyKey);
    createSomeData(label,propertyKey);
    doStuff(db,label,propertyKey);
    dropIndex(indexDefinition);
    doStuff(db,label,propertyKey);
    crashAndRestart();
    assertThat(getIndexes(db,label),isEmpty());
  }
  private GraphDatabaseService newDb(){
    return new TestGraphDatabaseFactory().setFileSystem(new UncloseableDelegatingFileSystemAbstraction(fsRule.get())).newImpermanentDatabase();
  }
  private void crashAndRestart() throws Exception {
    fsRule.snapshot(db::shutdown);
    db=newDb();
  }
  private void restart(){
    db.shutdown();
    db=newDb();
  }
  private Node createNode(  Label label,  Object... properties){
    Node node=db.createNode(label);
    for (    Map.Entry<String,Object> property : map(properties).entrySet()) {
      node.setProperty(property.getKey(),property.getValue());
    }
    return node;
  }
  private void dropIndex(  IndexDefinition indexDefinition){
    try (Transaction tx=db.beginTx()){
      indexDefinition.drop();
      tx.success();
    }
   }
  private static void doStuff(  GraphDatabaseService db,  Label label,  String propertyKey){
    try (Transaction tx=db.beginTx()){
      for (      Node node : loop(db.findNodes(label,propertyKey,3323))) {
        count(node.getLabels());
      }
    }
   }
  private void createSomeData(  Label label,  String propertyKey){
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(label);
      node.setProperty(propertyKey,"yeah");
      tx.success();
    }
   }
}
