public class TransactionQueueTest {
  @Test public void shouldEmptyIfTooMany() throws Exception {
    Applier applier=mock(Applier.class);
    int batchSize=10;
    TransactionQueue queue=new TransactionQueue(batchSize,applier);
    for (int i=0; i < 9; i++) {
      queue.queue(mock(TransactionToApply.class));
      verifyNoMoreInteractions(applier);
    }
    queue.queue(mock(TransactionToApply.class));
    verify(applier,times(1)).apply(any(),any());
    reset(applier);
    queue.queue(mock(TransactionToApply.class));
    for (int i=0; i < 2; i++) {
      queue.queue(mock(TransactionToApply.class));
      verifyNoMoreInteractions(applier);
    }
    queue.empty();
    verify(applier,times(1)).apply(any(),any());
  }
  @Test public void shouldLinkTogetherTransactions() throws Exception {
    Applier applier=mock(Applier.class);
    int batchSize=10;
    TransactionQueue queue=new TransactionQueue(batchSize,applier);
    TransactionToApply[] txs=new TransactionToApply[batchSize];
    for (int i=0; i < batchSize; i++) {
      queue.queue(txs[i]=new TransactionToApply(mock(TransactionRepresentation.class)));
    }
    verify(applier,times(1)).apply(any(),any());
    for (int i=0; i < txs.length - 1; i++) {
      assertEquals(txs[i + 1],txs[i].next());
    }
  }
}
