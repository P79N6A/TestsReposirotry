class AppendedPrependListTest {
  @Test void shouldAppendToList(){
    ListValue inner=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L));
    ListValue appended=inner.append(longValue(12L),longValue(13L),longValue(14L));
    ListValue expected=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L),longValue(12L),longValue(13L),longValue(14L));
    assertListValuesEquals(appended,expected);
  }
  @Test void shouldHandleEmptyAppend(){
    ListValue inner=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L));
    ListValue appended=inner.append();
    assertListValuesEquals(appended,inner);
  }
  @Test void shouldAppendToListWithDroppedNull(){
    ListValue inner=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),NO_VALUE,longValue(9L),longValue(10L),longValue(11L));
    ListValue appended=inner.dropNoValues().append(longValue(12L),longValue(13L),longValue(14L));
    ListValue expected=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L),longValue(12L),longValue(13L),longValue(14L));
    assertListValuesEquals(appended,expected);
  }
  @Test void shouldPrependToList(){
    ListValue inner=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L));
    ListValue prepend=inner.prepend(longValue(2L),longValue(3L),longValue(4L));
    ListValue expected=list(longValue(2L),longValue(3L),longValue(4L),longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L));
    assertListValuesEquals(prepend,expected);
  }
  @Test void shouldHandleEmptyPrepend(){
    ListValue inner=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L));
    ListValue prepend=inner.prepend();
    assertListValuesEquals(prepend,inner);
  }
  @Test void shouldPrependToListWithDroppedNull(){
    ListValue inner=list(longValue(5L),longValue(6L),longValue(7L),longValue(8L),NO_VALUE,longValue(9L),longValue(10L),longValue(11L));
    ListValue appended=inner.dropNoValues().prepend(longValue(2L),longValue(3L),longValue(4L));
    ListValue expected=list(longValue(2L),longValue(3L),longValue(4L),longValue(5L),longValue(6L),longValue(7L),longValue(8L),longValue(9L),longValue(10L),longValue(11L));
    assertListValuesEquals(appended,expected);
  }
  private void assertListValuesEquals(  ListValue appended,  ListValue expected){
    assertEquals(expected,appended);
    assertEquals(expected.hashCode(),appended.hashCode());
    assertArrayEquals(expected.asArray(),appended.asArray());
    assertTrue(iteratorsEqual(expected.iterator(),appended.iterator()));
  }
}
