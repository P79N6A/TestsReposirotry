public class ManagedTestCursors implements CursorFactory {
  private List<Cursor> allCursors=new ArrayList<>();
  private CursorFactory cursors;
  ManagedTestCursors(  CursorFactory c){
    this.cursors=c;
  }
  void assertAllClosedAndReset(){
    for (    Cursor n : allCursors) {
      if (!n.isClosed()) {
        fail("The Cursor " + n.toString() + " was not closed properly.");
      }
    }
    allCursors.clear();
  }
  @Override public NodeCursor allocateNodeCursor(){
    NodeCursor n=cursors.allocateNodeCursor();
    allCursors.add(n);
    return n;
  }
  @Override public RelationshipScanCursor allocateRelationshipScanCursor(){
    RelationshipScanCursor n=cursors.allocateRelationshipScanCursor();
    allCursors.add(n);
    return n;
  }
  @Override public RelationshipTraversalCursor allocateRelationshipTraversalCursor(){
    RelationshipTraversalCursor n=cursors.allocateRelationshipTraversalCursor();
    allCursors.add(n);
    return n;
  }
  @Override public PropertyCursor allocatePropertyCursor(){
    PropertyCursor n=cursors.allocatePropertyCursor();
    allCursors.add(n);
    return n;
  }
  @Override public RelationshipGroupCursor allocateRelationshipGroupCursor(){
    RelationshipGroupCursor n=cursors.allocateRelationshipGroupCursor();
    allCursors.add(n);
    return n;
  }
  @Override public NodeValueIndexCursor allocateNodeValueIndexCursor(){
    NodeValueIndexCursor n=cursors.allocateNodeValueIndexCursor();
    allCursors.add(n);
    return n;
  }
  @Override public NodeLabelIndexCursor allocateNodeLabelIndexCursor(){
    NodeLabelIndexCursor n=cursors.allocateNodeLabelIndexCursor();
    allCursors.add(n);
    return n;
  }
  @Override public NodeExplicitIndexCursor allocateNodeExplicitIndexCursor(){
    NodeExplicitIndexCursor n=cursors.allocateNodeExplicitIndexCursor();
    allCursors.add(n);
    return n;
  }
  @Override public RelationshipExplicitIndexCursor allocateRelationshipExplicitIndexCursor(){
    RelationshipExplicitIndexCursor n=cursors.allocateRelationshipExplicitIndexCursor();
    allCursors.add(n);
    return n;
  }
}
