private static class AddAction implements Action<Maps,String> {
  private final long key;
  private final int value;
  AddAction(  long key,  int value){
    this.key=key;
    this.value=value;
  }
  @Override public String apply(  Maps target){
    boolean existing=target.normalMap.containsKey(key);
    int existingValue=existing ? target.normalMap.get(key) : -1;
    int actualSizeBefore=target.normalMap.size();
    int sizeBefore=target.map.size();
    boolean existedBefore=target.map.containsKey(key);
    int valueBefore=target.map.get(key);
    int previous=target.map.put(key,value);
    boolean existsAfter=target.map.containsKey(key);
    int valueAfter=target.map.get(key);
    target.normalMap.put(key,value);
    int sizeAfter=target.map.size();
    int actualSizeAfter=target.normalMap.size();
    boolean ok=(sizeBefore == actualSizeBefore) & (existedBefore == existing) & (existingValue == valueBefore)& (existingValue == previous)& (valueAfter == value)& existsAfter& (sizeAfter == actualSizeAfter);
    return ok ? null : "" + key + ":"+ value+ ","+ existingValue+ ","+ existedBefore+ ","+ previous+ ","+ existsAfter;
  }
  @Override public void printAsCode(  Maps source,  LinePrinter out,  boolean includeChecks){
    String addition="map.put( " + key + ", "+ value+ " );";
    if (includeChecks) {
      boolean existing=source.normalMap.containsKey(key);
      int existingValue=existing ? source.normalMap.get(key) : -1;
      out.println("int sizeBefore = map.size();");
      out.println(format("boolean existedBefore = map.containsKey( %d );",key));
      out.println(format("int valueBefore = map.get( %d );",key));
      out.println(format("int previous = %s",addition));
      out.println(format("boolean existsAfter = map.containsKey( %d );",key));
      out.println(format("int valueAfter = map.get( %d );",key));
      out.println("int sizeAfter = map.size();");
      int actualSizeBefore=source.normalMap.size();
      out.println(format("assertEquals( \"%s\", %d, sizeBefore );","Size before put should have been " + actualSizeBefore,actualSizeBefore));
      out.println(format("assert%s( \"%s\", existedBefore );",capitilize(existing),key + " should " + (existing ? "" : "not ")+ "exist before putting here"));
      out.println(format("assertEquals( \"%s\", %d, valueBefore );","value before should be " + existingValue,existingValue));
      out.println(format("assertEquals( \"%s\", %d, previous );","value returned from put should be " + existingValue,existingValue));
      out.println(format("assertTrue( \"%s\", existsAfter );",key + " should exist"));
      out.println(format("assertEquals( \"%s\", %d, valueAfter );","value after putting should be " + value,value));
      int actualSizeAfter=existing ? actualSizeBefore : actualSizeBefore + 1;
      out.println(format("assertEquals( \"%s\", %d, sizeAfter );","Size after put should have been " + actualSizeAfter,actualSizeAfter));
    }
 else {
      out.println(addition);
    }
  }
}
