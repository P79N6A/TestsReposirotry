public class SimpleBitSetTest {
  @Test public void put(){
    SimpleBitSet set=new SimpleBitSet(16);
    set.put(2);
    set.put(7);
    set.put(15);
    assertFalse(set.contains(1));
    assertFalse(set.contains(6));
    assertFalse(set.contains(14));
    assertTrue(set.contains(2));
    assertTrue(set.contains(7));
    assertTrue(set.contains(15));
  }
  @Test public void putAndRemove(){
    SimpleBitSet set=new SimpleBitSet(16);
    set.put(2);
    set.put(7);
    set.remove(2);
    assertFalse(set.contains(1));
    assertFalse(set.contains(6));
    assertFalse(set.contains(14));
    assertFalse(set.contains(2));
    assertTrue(set.contains(7));
  }
  @Test public void putOtherBitSet(){
    SimpleBitSet set=new SimpleBitSet(16);
    SimpleBitSet otherSet=new SimpleBitSet(16);
    otherSet.put(4);
    otherSet.put(14);
    set.put(3);
    set.put(4);
    set.put(otherSet);
    assertFalse(set.contains(0));
    assertFalse(set.contains(1));
    assertFalse(set.contains(15));
    assertFalse(set.contains(7));
    assertTrue(set.contains(3));
    assertTrue(set.contains(4));
    assertTrue(set.contains(14));
  }
  @Test public void removeOtherBitSet(){
    SimpleBitSet set=new SimpleBitSet(16);
    SimpleBitSet otherSet=new SimpleBitSet(16);
    otherSet.put(4);
    otherSet.put(12);
    otherSet.put(14);
    set.put(3);
    set.put(4);
    set.put(12);
    set.remove(otherSet);
    assertFalse(set.contains(0));
    assertFalse(set.contains(1));
    assertFalse(set.contains(4));
    assertFalse(set.contains(14));
    assertTrue(set.contains(3));
  }
  @Test public void resize(){
    SimpleBitSet set=new SimpleBitSet(8);
    set.put(128);
    assertTrue(set.contains(128));
    assertFalse(set.contains(126));
    assertFalse(set.contains(129));
  }
  @Test public void shouldAllowIterating(){
    SimpleBitSet set=new SimpleBitSet(64);
    set.put(4);
    set.put(7);
    set.put(63);
    set.put(78);
    IntIterator iterator=set.iterator();
    MutableIntList found=new IntArrayList();
    while (iterator.hasNext()) {
      found.add(iterator.next());
    }
    assertThat(found,equalTo(IntLists.immutable.of(4,7,63,78)));
  }
  @Test public void checkPointOnUnchangedSetMustDoNothing(){
    SimpleBitSet set=new SimpleBitSet(16);
    int key=10;
    set.put(key);
    long checkpoint=0;
    checkpoint=set.checkPointAndPut(checkpoint,key);
    assertThat(set.checkPointAndPut(checkpoint,key),is(checkpoint));
    assertTrue(set.contains(key));
  }
  @Test public void checkPointOnUnchangedSetButWithDifferentKeyMustUpdateSet(){
    SimpleBitSet set=new SimpleBitSet(16);
    int key=10;
    set.put(key);
    long checkpoint=0;
    checkpoint=set.checkPointAndPut(checkpoint,key);
    assertThat(set.checkPointAndPut(checkpoint,key + 1),is(not(checkpoint)));
    assertTrue(set.contains(key + 1));
    assertFalse(set.contains(key));
  }
  @Test public void checkPointOnChangedSetMustClearState(){
    SimpleBitSet set=new SimpleBitSet(16);
    int key=10;
    set.put(key);
    long checkpoint=0;
    checkpoint=set.checkPointAndPut(checkpoint,key);
    set.put(key + 1);
    assertThat(set.checkPointAndPut(checkpoint,key),is(not(checkpoint)));
    assertTrue(set.contains(key));
    assertFalse(set.contains(key + 1));
  }
  @Test public void checkPointMustBeAbleToExpandCapacity(){
    SimpleBitSet set=new SimpleBitSet(16);
    int key=10;
    int key2=255;
    set.put(key);
    long checkpoint=0;
    checkpoint=set.checkPointAndPut(checkpoint,key);
    assertThat(set.checkPointAndPut(checkpoint,key2),is(not(checkpoint)));
    assertTrue(set.contains(key2));
    assertFalse(set.contains(key));
  }
  @Test public void modificationsMustTakeWriteLocks(){
    SimpleBitSet set=new SimpleBitSet(16);
    long stamp=set.tryOptimisticRead();
    set.put(8);
    assertFalse(set.validate(stamp));
    stamp=set.tryOptimisticRead();
    set.put(8);
    assertFalse(set.validate(stamp));
    stamp=set.tryOptimisticRead();
    SimpleBitSet other=new SimpleBitSet(16);
    other.put(3);
    set.put(other);
    assertFalse(set.validate(stamp));
    stamp=set.tryOptimisticRead();
    set.remove(3);
    assertFalse(set.validate(stamp));
    stamp=set.tryOptimisticRead();
    set.remove(3);
    assertFalse(set.validate(stamp));
    stamp=set.tryOptimisticRead();
    other.put(8);
    set.remove(other);
    assertFalse(set.validate(stamp));
    stamp=set.tryOptimisticRead();
    other.put(8);
    set.remove(other);
    assertFalse(set.validate(stamp));
  }
}
