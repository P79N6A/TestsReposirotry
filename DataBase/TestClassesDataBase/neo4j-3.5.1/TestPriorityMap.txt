class TestPriorityMap {
  @Test void testIt(){
    PriorityMap<Integer,Integer,Double> map=PriorityMap.withSelfKeyNaturalOrder();
    map.put(0,5d);
    map.put(1,4d);
    map.put(1,4d);
    map.put(1,3d);
    assertEntry(map.pop(),1,3d);
    assertEntry(map.pop(),0,5d);
    assertNull(map.pop());
    int start=0;
    int a=1;
    int b=2;
    int c=3;
    int d=4;
    int e=6;
    int f=7;
    int y=8;
    int x=9;
    map.put(start,0d);
    map.put(a,1d);
    map.put(x,10d);
    map.put(b,2d);
    map.put(x,9d);
    map.put(c,3d);
    map.put(x,8d);
    map.put(x,6d);
    map.put(d,4d);
    map.put(x,7d);
    map.put(e,5d);
    map.put(x,6d);
    map.put(f,7d);
    map.put(y,8d);
  }
  @Test void shouldReplaceIfBetter(){
    PriorityMap<Integer,Integer,Double> map=PriorityMap.withSelfKeyNaturalOrder();
    map.put(1,2d);
    boolean putResult=map.put(1,1.5d);
    assertTrue(putResult);
    Entry<Integer,Double> top=map.pop();
    assertNull(map.peek());
    assertEquals(1,top.getEntity().intValue());
    assertEquals(1.5d,top.getPriority(),0.00001);
  }
  @Test void shouldKeepAllPrioritiesIfToldTo(){
    int entity=5;
    PriorityMap<Integer,Integer,Double> map=PriorityMap.withSelfKeyNaturalOrder(false,false);
    assertTrue(map.put(entity,3d));
    assertTrue(map.put(entity,2d));
    assertTrue(map.put(entity,5d));
    assertTrue(map.put(entity,4d));
    assertEntry(map.pop(),entity,2d);
    assertEntry(map.pop(),entity,3d);
    assertEntry(map.pop(),entity,4d);
    assertEntry(map.pop(),entity,5d);
  }
  @Test void inCaseSaveAllPrioritiesShouldHandleNewEntryWithWorsePrio(){
    int first=1;
    int second=2;
    PriorityMap<Integer,Integer,Double> map=PriorityMap.withSelfKeyNaturalOrder(false,false);
    assertTrue(map.put(first,1d));
    assertTrue(map.put(second,2d));
    assertTrue(map.put(first,3d));
    assertEntry(map.pop(),first,1d);
    assertEntry(map.pop(),second,2d);
    assertEntry(map.pop(),first,3d);
    assertNull(map.peek());
  }
  @Test void inCaseSaveAllPrioritiesShouldHandleNewEntryWithBetterPrio(){
    int first=1;
    int second=2;
    PriorityMap<Integer,Integer,Double> map=PriorityMap.withSelfKeyNaturalOrder(false,false);
    assertTrue(map.put(first,3d));
    assertTrue(map.put(second,2d));
    assertTrue(map.put(first,1d));
    assertEntry(map.pop(),first,1d);
    assertEntry(map.pop(),second,2d);
    assertEntry(map.pop(),first,3d);
    assertNull(map.peek());
  }
  private static void assertEntry(  Entry<Integer,Double> entry,  Integer entity,  Double priority){
    assertNotNull(entry);
    assertEquals(entity,entry.getEntity());
    assertEquals(priority,entry.getPriority());
  }
}
