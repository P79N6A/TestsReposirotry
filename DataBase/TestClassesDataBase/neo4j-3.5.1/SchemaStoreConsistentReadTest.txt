public static class SchemaStoreConsistentReadTest extends RecordStoreConsistentReadTest<DynamicRecord,SchemaStore> {
  private static final byte[] EXISTING_RECORD_DATA="Random bytes".getBytes();
  @Override protected SchemaStore getStore(  NeoStores neoStores){
    return neoStores.getSchemaStore();
  }
  @Override protected DynamicRecord createNullRecord(  long id){
    DynamicRecord record=new DynamicRecord(id);
    record.setNextBlock(0);
    record.setData(new byte[0]);
    return record;
  }
  @Override protected DynamicRecord createExistingRecord(  boolean light){
    DynamicRecord record=new DynamicRecord(ID);
    record.setInUse(true);
    record.setStartRecord(true);
    record.setLength(EXISTING_RECORD_DATA.length);
    record.setData(EXISTING_RECORD_DATA);
    return record;
  }
  @Override protected DynamicRecord getLight(  long id,  SchemaStore store){
    throw new AssumptionViolatedException("Light loading of DynamicRecords is a little different");
  }
  @Override protected void assertRecordsEqual(  DynamicRecord actualRecord,  DynamicRecord expectedRecord){
    assertNotNull("actualRecord",actualRecord);
    assertNotNull("expectedRecord",expectedRecord);
    assertThat("getData",actualRecord.getData(),is(expectedRecord.getData()));
    assertThat("getLength",actualRecord.getLength(),is(expectedRecord.getLength()));
    assertThat("getNextBlock",actualRecord.getNextBlock(),is(expectedRecord.getNextBlock()));
    assertThat("getType",actualRecord.getType(),is(expectedRecord.getType()));
    assertThat("getId",actualRecord.getId(),is(expectedRecord.getId()));
    assertThat("getLongId",actualRecord.getId(),is(expectedRecord.getId()));
    assertThat("isStartRecord",actualRecord.isStartRecord(),is(expectedRecord.isStartRecord()));
  }
}
