public class IndexMapTest {
  private static final long[] noEntityToken={};
  private IndexMap indexMap;
  private LabelSchemaDescriptor schema3_4=SchemaDescriptorFactory.forLabel(3,4);
  private LabelSchemaDescriptor schema5_6_7=SchemaDescriptorFactory.forLabel(5,6,7);
  private LabelSchemaDescriptor schema5_8=SchemaDescriptorFactory.forLabel(5,8);
  private SchemaDescriptor node35_8=SchemaDescriptorFactory.multiToken(new int[]{3,5},NODE,8);
  private SchemaDescriptor rel35_8=SchemaDescriptorFactory.multiToken(new int[]{3,5},RELATIONSHIP,8);
  @Before public void setup(){
    MutableLongObjectMap<IndexProxy> map=new LongObjectHashMap<>();
    map.put(1L,new TestIndexProxy(forSchema(schema3_4).withId(1).withoutCapabilities()));
    map.put(2L,new TestIndexProxy(forSchema(schema5_6_7).withId(2).withoutCapabilities()));
    map.put(3L,new TestIndexProxy(forSchema(schema5_8).withId(3).withoutCapabilities()));
    map.put(4L,new TestIndexProxy(forSchema(node35_8).withId(4).withoutCapabilities()));
    map.put(5L,new TestIndexProxy(forSchema(rel35_8).withId(5).withoutCapabilities()));
    indexMap=new IndexMap(map);
  }
  @Test public void shouldGetRelatedIndexForLabel(){
    assertThat(indexMap.getRelatedIndexes(entityTokens(3),noEntityToken,IntSets.immutable.empty(),NODE),containsInAnyOrder(schema3_4,node35_8));
  }
  @Test public void shouldGetRelatedIndexForProperty(){
    assertThat(indexMap.getRelatedIndexes(noEntityToken,entityTokens(3,4,5),properties(4),NODE),containsInAnyOrder(schema3_4));
  }
  @Test public void shouldGetRelatedIndexesForLabel(){
    assertThat(indexMap.getRelatedIndexes(entityTokens(5),entityTokens(3,4),IntSets.immutable.empty(),NODE),containsInAnyOrder(schema5_6_7,schema5_8,node35_8));
  }
  @Test public void shouldGetRelatedIndexes(){
    assertThat(indexMap.getRelatedIndexes(entityTokens(3),entityTokens(4,5),properties(7),NODE),containsInAnyOrder(schema3_4,schema5_6_7,node35_8));
  }
  @Test public void shouldGetRelatedIndexOnce(){
    assertThat(indexMap.getRelatedIndexes(entityTokens(3),noEntityToken,properties(4),NODE),containsInAnyOrder(schema3_4,node35_8));
    assertThat(indexMap.getRelatedIndexes(noEntityToken,entityTokens(5),properties(6,7),NODE),containsInAnyOrder(schema5_6_7));
  }
  @Test public void shouldHandleUnrelated(){
    assertThat(indexMap.getRelatedIndexes(noEntityToken,noEntityToken,IntSets.immutable.empty(),NODE),emptyIterableOf(SchemaDescriptor.class));
    assertTrue(indexMap.getRelatedIndexes(entityTokens(2),noEntityToken,IntSets.immutable.empty(),NODE).isEmpty());
    assertThat(indexMap.getRelatedIndexes(noEntityToken,entityTokens(2),properties(1),NODE),emptyIterableOf(SchemaDescriptor.class));
    assertTrue(indexMap.getRelatedIndexes(entityTokens(2),entityTokens(2),properties(1),NODE).isEmpty());
  }
  @Test public void shouldGetMultiLabelForAnyOfTheLabels(){
    assertThat(indexMap.getRelatedIndexes(entityTokens(3),noEntityToken,IntSets.immutable.empty(),NODE),containsInAnyOrder(schema3_4,node35_8));
    assertThat(indexMap.getRelatedIndexes(entityTokens(5),noEntityToken,IntSets.immutable.empty(),NODE),containsInAnyOrder(schema5_8,schema5_6_7,node35_8));
  }
  @Test public void shouldOnlyGetRelIndexesForRelUpdates(){
    assertThat(indexMap.getRelatedIndexes(entityTokens(3),noEntityToken,IntSets.immutable.empty(),RELATIONSHIP),containsInAnyOrder(rel35_8));
    assertThat(indexMap.getRelatedIndexes(entityTokens(5),noEntityToken,IntSets.immutable.empty(),RELATIONSHIP),containsInAnyOrder(rel35_8));
  }
  @Test public void removalsShouldOnlyRemoveCorrectProxy(){
    indexMap.removeIndexProxy(4);
    assertThat(indexMap.getRelatedIndexes(entityTokens(3),noEntityToken,IntSets.immutable.empty(),NODE),containsInAnyOrder(schema3_4));
    assertThat(indexMap.getRelatedIndexes(entityTokens(3),noEntityToken,IntSets.immutable.empty(),RELATIONSHIP),containsInAnyOrder(rel35_8));
    indexMap.removeIndexProxy(7);
    assertThat(indexMap.getRelatedIndexes(entityTokens(5),noEntityToken,IntSets.immutable.empty(),NODE),containsInAnyOrder(schema5_8,schema5_6_7));
    assertThat(indexMap.getRelatedIndexes(entityTokens(5),noEntityToken,IntSets.immutable.empty(),RELATIONSHIP),containsInAnyOrder(rel35_8));
  }
  private long[] entityTokens(  long... entityTokenIds){
    return entityTokenIds;
  }
  private IntSet properties(  int... propertyIds){
    return new IntHashSet(propertyIds);
  }
private class TestIndexProxy extends IndexProxyAdapter {
    private final CapableIndexDescriptor descriptor;
    private TestIndexProxy(    CapableIndexDescriptor descriptor){
      this.descriptor=descriptor;
    }
    @Override public CapableIndexDescriptor getDescriptor(){
      return descriptor;
    }
  }
}
