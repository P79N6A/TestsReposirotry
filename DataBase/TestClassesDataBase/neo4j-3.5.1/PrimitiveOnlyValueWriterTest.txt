class PrimitiveOnlyValueWriterTest {
  @Test void shouldConvertStringValueToString(){
    PrimitiveOnlyValueWriter writer=new PrimitiveOnlyValueWriter();
    TextValue value=stringValue("Hello");
    assertEquals("Hello",writer.valueAsObject(value));
  }
  @Test void shouldConvertLongValueToLong(){
    PrimitiveOnlyValueWriter writer=new PrimitiveOnlyValueWriter();
    LongValue value=longValue(42);
    assertEquals(42L,writer.valueAsObject(value));
  }
  @Test void shouldConvertMultipleValues(){
    PrimitiveOnlyValueWriter writer=new PrimitiveOnlyValueWriter();
    TextValue value1=stringValue("Hello");
    TextValue value2=stringValue(" ");
    TextValue value3=stringValue("World!");
    LongValue value4=longValue(42);
    assertEquals("Hello",writer.valueAsObject(value1));
    assertEquals(" ",writer.valueAsObject(value2));
    assertEquals("World!",writer.valueAsObject(value3));
    assertEquals(42L,writer.valueAsObject(value4));
  }
  @ParameterizedTest @MethodSource("unsupportedValues") void shouldFailToWriteComplexValue(  AnyValue value){
    PrimitiveOnlyValueWriter writer=new PrimitiveOnlyValueWriter();
    assertThrows(UnsupportedOperationException.class,() -> writer.valueAsObject(value));
  }
  private static Stream<AnyValue> unsupportedValues(){
    return Stream.of(nodeValue(42,stringArray("Person"),EMPTY_MAP),newRelationshipValue(),pointValue(CoordinateReferenceSystem.WGS84,new double[2]),byteArray(new byte[]{1,2,3}),Values.of(Duration.ofHours(1)),Values.of(LocalDate.now()),Values.of(LocalTime.now()),Values.of(OffsetTime.now()),Values.of(LocalDateTime.now()),Values.of(ZonedDateTime.now()));
  }
  private static RelationshipValue newRelationshipValue(){
    NodeValue startNode=nodeValue(24,stringArray("Person"),EMPTY_MAP);
    NodeValue endNode=nodeValue(42,stringArray("Person"),EMPTY_MAP);
    return relationshipValue(42,startNode,endNode,stringValue("KNOWS"),EMPTY_MAP);
  }
}
