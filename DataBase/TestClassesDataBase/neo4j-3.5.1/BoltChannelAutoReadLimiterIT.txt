public class BoltChannelAutoReadLimiterIT {
  private AssertableLogProvider logProvider;
  private EphemeralFileSystemRule fsRule=new EphemeralFileSystemRule();
  private Neo4jWithSocket server=new Neo4jWithSocket(getClass(),getTestGraphDatabaseFactory(),fsRule,getSettingsFunction());
  @Rule public RuleChain ruleChain=RuleChain.outerRule(fsRule).around(server);
  private HostnamePort address;
  private TransportConnection connection;
  private TransportTestUtil util;
  protected TestGraphDatabaseFactory getTestGraphDatabaseFactory(){
    TestGraphDatabaseFactory factory=new TestGraphDatabaseFactory();
    logProvider=new AssertableLogProvider();
    factory.setInternalLogProvider(logProvider);
    return factory;
  }
  protected Consumer<Map<String,String>> getSettingsFunction(){
    return settings -> settings.put(GraphDatabaseSettings.auth_enabled.name(),"false");
  }
  @Before public void setup() throws Exception {
    installSleepProcedure(server.graphDatabaseService());
    address=server.lookupDefaultConnector();
    connection=new SocketConnection();
    util=new TransportTestUtil(new Neo4jPackV1());
  }
  @Test public void largeNumberOfSlowRunningJobsShouldChangeAutoReadState() throws Exception {
    int numberOfRunDiscardPairs=1000;
    String largeString=StringUtils.repeat(" ",8 * 1024);
    connection.connect(address).send(util.defaultAcceptedVersions()).send(util.chunk(new InitMessage("TestClient/1.1",emptyMap())));
    assertThat(connection,util.eventuallyReceivesSelectedProtocolVersion());
    assertThat(connection,util.eventuallyReceives(msgSuccess()));
    for (int i=0; i < numberOfRunDiscardPairs; i++) {
      connection.send(util.chunk(new RunMessage("CALL boltissue.sleep( $data )",ValueUtils.asMapValue(singletonMap("data",largeString))),DiscardAllMessage.INSTANCE));
    }
    for (int i=0; i < numberOfRunDiscardPairs; i++) {
      assertThat(connection,util.eventuallyReceives(msgSuccess(),msgSuccess()));
    }
    logProvider.assertAtLeastOnce(AssertableLogProvider.inLog(BoltConnectionReadLimiter.class).warn(containsString("disabled"),anything(),anything()));
    logProvider.assertAtLeastOnce(AssertableLogProvider.inLog(BoltConnectionReadLimiter.class).warn(containsString("enabled"),anything(),anything()));
  }
  private static void installSleepProcedure(  GraphDatabaseService db) throws ProcedureException {
    GraphDatabaseAPI dbApi=(GraphDatabaseAPI)db;
    dbApi.getDependencyResolver().resolveDependency(Procedures.class).register(new CallableProcedure.BasicProcedure(procedureSignature("boltissue","sleep").in("data",Neo4jTypes.NTString).out(ProcedureSignature.VOID).build()){
      @Override public RawIterator<Object[],ProcedureException> apply(      Context context,      Object[] objects,      ResourceTracker resourceTracker) throws ProcedureException {
        try {
          Thread.sleep(50);
        }
 catch (        InterruptedException e) {
          throw new ProcedureException(Status.General.UnknownError,e,"Interrupted");
        }
        return RawIterator.empty();
      }
    }
);
  }
}
