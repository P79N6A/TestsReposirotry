@ExtendWith({DefaultFileSystemExtension.class,TestDirectoryExtension.class}) class LuceneIndexProviderTest {
  @Inject private DefaultFileSystemAbstraction fileSystem;
  @Inject private TestDirectory testDir;
  private File graphDbDir;
  private static final StoreIndexDescriptor descriptor=forSchema(forLabel(1,1),PROVIDER_DESCRIPTOR).withId(1);
  @BeforeEach void setup(){
    graphDbDir=testDir.databaseDir();
  }
  @Test void shouldFailToInvokePopulatorInReadOnlyMode(){
    Config readOnlyConfig=Config.defaults(GraphDatabaseSettings.read_only,Settings.TRUE);
    LuceneIndexProvider readOnlyIndexProvider=getLuceneIndexProvider(readOnlyConfig,new DirectoryFactory.InMemoryDirectoryFactory(),fileSystem,graphDbDir);
    assertThrows(UnsupportedOperationException.class,() -> readOnlyIndexProvider.getPopulator(descriptor,new IndexSamplingConfig(readOnlyConfig)));
  }
  @Test void shouldCreateReadOnlyAccessorInReadOnlyMode() throws Exception {
    DirectoryFactory directoryFactory=DirectoryFactory.PERSISTENT;
    createEmptySchemaIndex(directoryFactory);
    Config readOnlyConfig=Config.defaults(GraphDatabaseSettings.read_only,Settings.TRUE);
    LuceneIndexProvider readOnlyIndexProvider=getLuceneIndexProvider(readOnlyConfig,directoryFactory,fileSystem,graphDbDir);
    IndexAccessor onlineAccessor=getIndexAccessor(readOnlyConfig,readOnlyIndexProvider);
    assertThrows(UnsupportedOperationException.class,onlineAccessor::drop);
  }
  @Test void indexUpdateNotAllowedInReadOnlyMode() throws Exception {
    Config readOnlyConfig=Config.defaults(GraphDatabaseSettings.read_only,Settings.TRUE);
    LuceneIndexProvider readOnlyIndexProvider=getLuceneIndexProvider(readOnlyConfig,new DirectoryFactory.InMemoryDirectoryFactory(),fileSystem,graphDbDir);
    assertThrows(UnsupportedOperationException.class,() -> getIndexAccessor(readOnlyConfig,readOnlyIndexProvider).newUpdater(IndexUpdateMode.ONLINE));
  }
  @Test void indexForceMustBeAllowedInReadOnlyMode() throws Exception {
    Config readOnlyConfig=Config.defaults(GraphDatabaseSettings.read_only,Settings.TRUE);
    LuceneIndexProvider readOnlyIndexProvider=getLuceneIndexProvider(readOnlyConfig,new DirectoryFactory.InMemoryDirectoryFactory(),fileSystem,graphDbDir);
    getIndexAccessor(readOnlyConfig,readOnlyIndexProvider).force(IOLimiter.UNLIMITED);
  }
  private void createEmptySchemaIndex(  DirectoryFactory directoryFactory) throws IOException {
    Config config=Config.defaults();
    LuceneIndexProvider indexProvider=getLuceneIndexProvider(config,directoryFactory,fileSystem,graphDbDir);
    IndexAccessor onlineAccessor=getIndexAccessor(config,indexProvider);
    onlineAccessor.close();
  }
  private IndexAccessor getIndexAccessor(  Config readOnlyConfig,  LuceneIndexProvider indexProvider) throws IOException {
    return indexProvider.getOnlineAccessor(descriptor,new IndexSamplingConfig(readOnlyConfig));
  }
  private LuceneIndexProvider getLuceneIndexProvider(  Config config,  DirectoryFactory directoryFactory,  FileSystemAbstraction fs,  File graphDbDir){
    return new LuceneIndexProvider(fs,directoryFactory,defaultDirectoryStructure(graphDbDir),IndexProvider.Monitor.EMPTY,config,OperationalMode.single);
  }
}
