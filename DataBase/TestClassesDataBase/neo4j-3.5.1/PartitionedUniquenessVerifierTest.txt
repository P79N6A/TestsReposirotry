@RunWith(MockitoJUnitRunner.class) public class PartitionedUniquenessVerifierTest {
  @Mock(answer=Answers.RETURNS_DEEP_STUBS) private PartitionSearcher searcher1;
  @Mock(answer=Answers.RETURNS_DEEP_STUBS) private PartitionSearcher searcher2;
  @Mock(answer=Answers.RETURNS_DEEP_STUBS) private PartitionSearcher searcher3;
  @Test public void partitionSearchersAreClosed() throws IOException {
    PartitionedUniquenessVerifier verifier=createPartitionedVerifier();
    verifier.close();
    verify(searcher1).close();
    verify(searcher2).close();
    verify(searcher3).close();
  }
  @Test public void verifyPropertyUpdates() throws Exception {
    PartitionedUniquenessVerifier verifier=createPartitionedVerifier();
    NodePropertyAccessor nodePropertyAccessor=mock(NodePropertyAccessor.class);
    verifier.verify(nodePropertyAccessor,new int[]{42},valueTupleList("a","b"));
    verifySearchInvocations(searcher1,"a","b");
    verifySearchInvocations(searcher2,"a","b");
    verifySearchInvocations(searcher3,"a","b");
  }
  private PartitionedUniquenessVerifier createPartitionedVerifier(){
    return new PartitionedUniquenessVerifier(getSearchers());
  }
  private List<PartitionSearcher> getSearchers(){
    return Arrays.asList(searcher1,searcher2,searcher3);
  }
  private static void verifySearchInvocations(  PartitionSearcher searcher,  Object... values) throws IOException {
    for (    Object value : values) {
      verify(searcher.getIndexSearcher()).search(eq(LuceneDocumentStructure.newSeekQuery(Values.of(value))),any(DuplicateCheckingCollector.class));
    }
  }
}
