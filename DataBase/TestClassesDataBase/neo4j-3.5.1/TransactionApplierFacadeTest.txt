public class TransactionApplierFacadeTest {
  private TransactionApplierFacade facade;
  private TransactionApplier txApplier1;
  private TransactionApplier txApplier2;
  private TransactionApplier txApplier3;
  @Before public void setUp(){
    txApplier1=mock(TransactionApplier.class);
    txApplier2=mock(TransactionApplier.class);
    txApplier3=mock(TransactionApplier.class);
    facade=new TransactionApplierFacade(txApplier1,txApplier2,txApplier3);
  }
  @Test public void testClose() throws Exception {
    facade.close();
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier3).close();
    inOrder.verify(txApplier2).close();
    inOrder.verify(txApplier1).close();
  }
  @Test public void testVisit() throws Exception {
    Command cmd=mock(Command.class);
    boolean result=facade.visit(cmd);
    InOrder inOrder=inOrder(cmd);
    inOrder.verify(cmd).handle(txApplier1);
    inOrder.verify(cmd).handle(txApplier2);
    inOrder.verify(cmd).handle(txApplier3);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitNodeCommand() throws Exception {
    Command.NodeCommand cmd=mock(Command.NodeCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitNodeCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitNodeCommand(cmd);
    inOrder.verify(txApplier2).visitNodeCommand(cmd);
    inOrder.verify(txApplier3).visitNodeCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitRelationshipCommand() throws Exception {
    Command.RelationshipCommand cmd=mock(Command.RelationshipCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitRelationshipCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitRelationshipCommand(cmd);
    inOrder.verify(txApplier2).visitRelationshipCommand(cmd);
    inOrder.verify(txApplier3).visitRelationshipCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitPropertyCommand() throws Exception {
    Command.PropertyCommand cmd=mock(Command.PropertyCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitPropertyCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitPropertyCommand(cmd);
    inOrder.verify(txApplier2).visitPropertyCommand(cmd);
    inOrder.verify(txApplier3).visitPropertyCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitRelationshipGroupCommand() throws Exception {
    Command.RelationshipGroupCommand cmd=mock(Command.RelationshipGroupCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitRelationshipGroupCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitRelationshipGroupCommand(cmd);
    inOrder.verify(txApplier2).visitRelationshipGroupCommand(cmd);
    inOrder.verify(txApplier3).visitRelationshipGroupCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitRelationshipTypeTokenCommand() throws Exception {
    Command.RelationshipTypeTokenCommand cmd=mock(Command.RelationshipTypeTokenCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitRelationshipTypeTokenCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitRelationshipTypeTokenCommand(cmd);
    inOrder.verify(txApplier2).visitRelationshipTypeTokenCommand(cmd);
    inOrder.verify(txApplier3).visitRelationshipTypeTokenCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitLabelTokenCommand() throws Exception {
    Command.LabelTokenCommand cmd=mock(Command.LabelTokenCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitLabelTokenCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitLabelTokenCommand(cmd);
    inOrder.verify(txApplier2).visitLabelTokenCommand(cmd);
    inOrder.verify(txApplier3).visitLabelTokenCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitPropertyKeyTokenCommand() throws Exception {
    Command.PropertyKeyTokenCommand cmd=mock(Command.PropertyKeyTokenCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitPropertyKeyTokenCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitPropertyKeyTokenCommand(cmd);
    inOrder.verify(txApplier2).visitPropertyKeyTokenCommand(cmd);
    inOrder.verify(txApplier3).visitPropertyKeyTokenCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitSchemaRuleCommand() throws Exception {
    Command.SchemaRuleCommand cmd=mock(Command.SchemaRuleCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitSchemaRuleCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitSchemaRuleCommand(cmd);
    inOrder.verify(txApplier2).visitSchemaRuleCommand(cmd);
    inOrder.verify(txApplier3).visitSchemaRuleCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitNeoStoreCommand() throws Exception {
    Command.NeoStoreCommand cmd=mock(Command.NeoStoreCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitNeoStoreCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitNeoStoreCommand(cmd);
    inOrder.verify(txApplier2).visitNeoStoreCommand(cmd);
    inOrder.verify(txApplier3).visitNeoStoreCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitIndexAddNodeCommand() throws Exception {
    IndexCommand.AddNodeCommand cmd=mock(IndexCommand.AddNodeCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitIndexAddNodeCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitIndexAddNodeCommand(cmd);
    inOrder.verify(txApplier2).visitIndexAddNodeCommand(cmd);
    inOrder.verify(txApplier3).visitIndexAddNodeCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitIndexAddRelationshipCommand() throws Exception {
    IndexCommand.AddRelationshipCommand cmd=mock(IndexCommand.AddRelationshipCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitIndexAddRelationshipCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitIndexAddRelationshipCommand(cmd);
    inOrder.verify(txApplier2).visitIndexAddRelationshipCommand(cmd);
    inOrder.verify(txApplier3).visitIndexAddRelationshipCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitIndexRemoveCommand() throws Exception {
    IndexCommand.RemoveCommand cmd=mock(IndexCommand.RemoveCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitIndexRemoveCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitIndexRemoveCommand(cmd);
    inOrder.verify(txApplier2).visitIndexRemoveCommand(cmd);
    inOrder.verify(txApplier3).visitIndexRemoveCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitIndexDeleteCommand() throws Exception {
    IndexCommand.DeleteCommand cmd=mock(IndexCommand.DeleteCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitIndexDeleteCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitIndexDeleteCommand(cmd);
    inOrder.verify(txApplier2).visitIndexDeleteCommand(cmd);
    inOrder.verify(txApplier3).visitIndexDeleteCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitIndexCreateCommand() throws Exception {
    IndexCommand.CreateCommand cmd=mock(IndexCommand.CreateCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitIndexCreateCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitIndexCreateCommand(cmd);
    inOrder.verify(txApplier2).visitIndexCreateCommand(cmd);
    inOrder.verify(txApplier3).visitIndexCreateCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitIndexDefineCommand() throws Exception {
    IndexDefineCommand cmd=mock(IndexDefineCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitIndexDefineCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitIndexDefineCommand(cmd);
    inOrder.verify(txApplier2).visitIndexDefineCommand(cmd);
    inOrder.verify(txApplier3).visitIndexDefineCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitNodeCountsCommand() throws Exception {
    Command.NodeCountsCommand cmd=mock(Command.NodeCountsCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitNodeCountsCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitNodeCountsCommand(cmd);
    inOrder.verify(txApplier2).visitNodeCountsCommand(cmd);
    inOrder.verify(txApplier3).visitNodeCountsCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
  @Test public void testVisitRelationshipCountsCommand() throws Exception {
    Command.RelationshipCountsCommand cmd=mock(Command.RelationshipCountsCommand.class);
    when(cmd.handle(any(CommandVisitor.class))).thenCallRealMethod();
    boolean result=facade.visitRelationshipCountsCommand(cmd);
    InOrder inOrder=inOrder(txApplier1,txApplier2,txApplier3);
    inOrder.verify(txApplier1).visitRelationshipCountsCommand(cmd);
    inOrder.verify(txApplier2).visitRelationshipCountsCommand(cmd);
    inOrder.verify(txApplier3).visitRelationshipCountsCommand(cmd);
    inOrder.verifyNoMoreInteractions();
    assertFalse(result);
  }
}
