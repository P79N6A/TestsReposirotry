@RunWith(Parameterized.class) public class LogPositionTest {
  @Parameterized.Parameter() public LogPosition logPositionA;
  @Parameterized.Parameter(1) public LogPosition logPositionB;
  @Parameterized.Parameters public static Collection<LogPosition[]> logPositions(){
    return Arrays.asList(new LogPosition[]{new LogPosition(0,1),new LogPosition(0,0)},new LogPosition[]{new LogPosition(0,11),new LogPosition(0,7)},new LogPosition[]{new LogPosition(2,1),new LogPosition(2,0)},new LogPosition[]{new LogPosition(2,17),new LogPosition(2,15)},new LogPosition[]{new LogPosition(1,1),new LogPosition(0,1)},new LogPosition[]{new LogPosition(5,1),new LogPosition(3,10)},new LogPosition[]{new LogPosition(Integer.MAX_VALUE,Integer.MAX_VALUE + 1L),new LogPosition(Integer.MAX_VALUE,Integer.MAX_VALUE)},new LogPosition[]{new LogPosition(Long.MAX_VALUE,Long.MAX_VALUE),new LogPosition(Integer.MAX_VALUE + 1L,Long.MAX_VALUE)},new LogPosition[]{new LogPosition(Long.MAX_VALUE,Long.MAX_VALUE),new LogPosition(Long.MAX_VALUE,Long.MAX_VALUE - 1)});
  }
  @SuppressWarnings({"EqualsWithItself","SelfComparison"}) @Test public void logPositionComparison(){
    assertEquals(1,logPositionA.compareTo(logPositionB));
    assertEquals(-1,logPositionB.compareTo(logPositionA));
    assertEquals(0,logPositionA.compareTo(logPositionA));
    assertEquals(0,logPositionB.compareTo(logPositionB));
  }
}
