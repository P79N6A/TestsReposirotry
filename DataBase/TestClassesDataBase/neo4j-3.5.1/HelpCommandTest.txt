class HelpCommandTest {
  @Mock private Consumer<String> out;
  @BeforeEach void setUp(){
    MockitoAnnotations.initMocks(this);
  }
  @Test void printsUnknownCommandWhenUnknownCommandIsProvided(){
    CommandLocator commandLocator=mock(CommandLocator.class);
    when(commandLocator.getAllProviders()).thenReturn(Collections.emptyList());
    when(commandLocator.findProvider("foobar")).thenThrow(new NoSuchElementException("foobar"));
    HelpCommand helpCommand=new HelpCommand(mock(Usage.class),out,commandLocator);
    IncorrectUsage incorrectUsage=assertThrows(IncorrectUsage.class,() -> helpCommand.execute("foobar"));
    assertThat(incorrectUsage.getMessage(),containsString("Unknown command: foobar"));
  }
  @Test void printsAvailableCommandsWhenUnknownCommandIsProvided(){
    CommandLocator commandLocator=mock(CommandLocator.class);
    List<AdminCommand.Provider> mockCommands=asList(mockCommand("foo"),mockCommand("bar"),mockCommand("baz"));
    when(commandLocator.getAllProviders()).thenReturn(mockCommands);
    when(commandLocator.findProvider("foobar")).thenThrow(new NoSuchElementException("foobar"));
    HelpCommand helpCommand=new HelpCommand(mock(Usage.class),out,commandLocator);
    IncorrectUsage incorrectUsage=assertThrows(IncorrectUsage.class,() -> helpCommand.execute("foobar"));
    assertThat(incorrectUsage.getMessage(),containsString("Available commands are: foo bar baz"));
  }
  @Test void testAdminUsage() throws Exception {
    CommandLocator commandLocator=mock(CommandLocator.class);
    List<AdminCommand.Provider> mockCommands=asList(mockCommand("foo"),mockCommand("bar"),mockCommand("baz"));
    when(commandLocator.getAllProviders()).thenReturn(mockCommands);
    try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
      PrintStream ps=new PrintStream(baos);
      Usage usage=new Usage("neo4j-admin",commandLocator);
      HelpCommand helpCommand=new HelpCommand(usage,ps::println,commandLocator);
      helpCommand.execute();
      assertEquals(String.format("usage: neo4j-admin <command>%n" + "%n" + "Manage your Neo4j instance.%n"+ "%n"+ "environment variables:%n"+ "    NEO4J_CONF    Path to directory which contains neo4j.conf.%n"+ "    NEO4J_DEBUG   Set to anything to enable debug output.%n"+ "    NEO4J_HOME    Neo4j home directory.%n"+ "    HEAP_SIZE     Set JVM maximum heap size during command execution.%n"+ "                  Takes a number and a unit, for example 512m.%n"+ "%n"+ "available commands:%n"+ "%n"+ "General%n"+ "    bar%n"+ "        null%n"+ "    baz%n"+ "        null%n"+ "    foo%n"+ "        null%n"+ "%n"+ "Use neo4j-admin help <command> for more details.%n"),baos.toString());
    }
   }
  @Test void showsArgumentsAndDescriptionForSpecifiedCommand() throws Exception {
    CommandLocator commandLocator=mock(CommandLocator.class);
    AdminCommand.Provider commandProvider=mock(AdminCommand.Provider.class);
    when(commandProvider.name()).thenReturn("foobar");
    Arguments arguments=new Arguments().withDatabase();
    when(commandProvider.allArguments()).thenReturn(arguments);
    when(commandProvider.possibleArguments()).thenReturn(Collections.singletonList(arguments));
    when(commandProvider.description()).thenReturn("This is a description of the foobar command.");
    when(commandLocator.findProvider("foobar")).thenReturn(commandProvider);
    try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
      PrintStream ps=new PrintStream(baos);
      HelpCommand helpCommand=new HelpCommand(new Usage("neo4j-admin",commandLocator),ps::println,commandLocator);
      helpCommand.execute("foobar");
      assertEquals(String.format("usage: neo4j-admin foobar [--database=<name>]%n" + "%n" + "environment variables:%n"+ "    NEO4J_CONF    Path to directory which contains neo4j.conf.%n"+ "    NEO4J_DEBUG   Set to anything to enable debug output.%n"+ "    NEO4J_HOME    Neo4j home directory.%n"+ "    HEAP_SIZE     Set JVM maximum heap size during command execution.%n"+ "                  Takes a number and a unit, for example 512m.%n"+ "%n"+ "This is a description of the foobar command.%n"+ "%n"+ "options:%n"+ "  --database=<name>   Name of database. [default:" + GraphDatabaseSettings.DEFAULT_DATABASE_NAME + "]%n"),baos.toString());
    }
   }
  private static AdminCommand.Provider mockCommand(  String name){
    AdminCommand.Provider commandProvider=mock(AdminCommand.Provider.class);
    when(commandProvider.name()).thenReturn(name);
    when(commandProvider.commandSection()).thenReturn(AdminCommandSection.general());
    return commandProvider;
  }
}
