class DynamicSizeUtilTest {
  private static final int KEY_ONE_BYTE_MAX=0x1F;
  private static final int KEY_TWO_BYTE_MIN=KEY_ONE_BYTE_MAX + 1;
  private static final int KEY_TWO_BYTE_MAX=0xFFF;
  private static final int VAL_ONE_BYTE_MIN=1;
  private static final int VAL_ONE_BYTE_MAX=0x7F;
  private static final int VAL_TWO_BYTE_MIN=VAL_ONE_BYTE_MAX + 1;
  private static final int VAL_TWO_BYTE_MAX=0x7FFF;
  private PageCursor cursor;
  @BeforeEach void setUp(){
    cursor=ByteArrayPageCursor.wrap(8192);
  }
  @Test void shouldPutAndGetKeyValueSize(){
    shouldPutAndGetKeyValueSize(0,0,1);
    shouldPutAndGetKeyValueSize(0,VAL_ONE_BYTE_MIN,2);
    shouldPutAndGetKeyValueSize(0,VAL_ONE_BYTE_MAX,2);
    shouldPutAndGetKeyValueSize(0,VAL_TWO_BYTE_MIN,3);
    shouldPutAndGetKeyValueSize(0,VAL_TWO_BYTE_MAX,3);
    shouldPutAndGetKeyValueSize(KEY_ONE_BYTE_MAX,0,1);
    shouldPutAndGetKeyValueSize(KEY_ONE_BYTE_MAX,VAL_ONE_BYTE_MIN,2);
    shouldPutAndGetKeyValueSize(KEY_ONE_BYTE_MAX,VAL_ONE_BYTE_MAX,2);
    shouldPutAndGetKeyValueSize(KEY_ONE_BYTE_MAX,VAL_TWO_BYTE_MIN,3);
    shouldPutAndGetKeyValueSize(KEY_ONE_BYTE_MAX,VAL_TWO_BYTE_MAX,3);
    shouldPutAndGetKeyValueSize(KEY_TWO_BYTE_MIN,0,2);
    shouldPutAndGetKeyValueSize(KEY_TWO_BYTE_MIN,VAL_ONE_BYTE_MIN,3);
    shouldPutAndGetKeyValueSize(KEY_TWO_BYTE_MIN,VAL_ONE_BYTE_MAX,3);
    shouldPutAndGetKeyValueSize(KEY_TWO_BYTE_MIN,VAL_TWO_BYTE_MIN,4);
    shouldPutAndGetKeyValueSize(KEY_TWO_BYTE_MIN,VAL_TWO_BYTE_MAX,4);
    shouldPutAndGetKeyValueSize(KEY_TWO_BYTE_MAX,0,2);
    shouldPutAndGetKeyValueSize(KEY_TWO_BYTE_MAX,VAL_ONE_BYTE_MIN,3);
    shouldPutAndGetKeyValueSize(KEY_TWO_BYTE_MAX,VAL_ONE_BYTE_MAX,3);
    shouldPutAndGetKeyValueSize(KEY_TWO_BYTE_MAX,VAL_TWO_BYTE_MIN,4);
    shouldPutAndGetKeyValueSize(KEY_TWO_BYTE_MAX,VAL_TWO_BYTE_MAX,4);
  }
  @Test void shouldPutAndGetKeySize(){
    shouldPutAndGetKeySize(0,1);
    shouldPutAndGetKeySize(KEY_ONE_BYTE_MAX,1);
    shouldPutAndGetKeySize(KEY_TWO_BYTE_MIN,2);
    shouldPutAndGetKeySize(KEY_TWO_BYTE_MAX,2);
  }
  @Test void shouldPreventWritingKeyLargerThanMaxPossible(){
    int keySize=0xFFF;
    assertThrows(IllegalArgumentException.class,() -> putKeyValueSize(cursor,keySize + 1,0));
    shouldPutAndGetKeyValueSize(keySize,0,2);
  }
  @Test void shouldPreventWritingValueLargerThanMaxPossible(){
    int valueSize=0x7FFF;
    assertThrows(IllegalArgumentException.class,() -> putKeyValueSize(cursor,1,valueSize + 1));
    shouldPutAndGetKeyValueSize(1,valueSize,3);
  }
  private void shouldPutAndGetKeySize(  int keySize,  int expectedBytes){
    int size=putAndGetKey(keySize);
    assertEquals(expectedBytes,size);
  }
  private int putAndGetKey(  int keySize){
    int offsetBefore=cursor.getOffset();
    DynamicSizeUtil.putKeySize(cursor,keySize);
    int offsetAfter=cursor.getOffset();
    cursor.setOffset(offsetBefore);
    long readKeySize=readKeyValueSize(cursor);
    assertEquals(keySize,extractKeySize(readKeySize));
    return offsetAfter - offsetBefore;
  }
  private void shouldPutAndGetKeyValueSize(  int keySize,  int valueSize,  int expectedBytes){
    int size=putAndGetKeyValue(keySize,valueSize);
    assertEquals(expectedBytes,size);
  }
  private int putAndGetKeyValue(  int keySize,  int valueSize){
    int offsetBefore=cursor.getOffset();
    putKeyValueSize(cursor,keySize,valueSize);
    int offsetAfter=cursor.getOffset();
    cursor.setOffset(offsetBefore);
    long readKeyValueSize=readKeyValueSize(cursor);
    int readKeySize=extractKeySize(readKeyValueSize);
    int readValueSize=extractValueSize(readKeyValueSize);
    assertEquals(keySize,readKeySize);
    assertEquals(valueSize,readValueSize);
    return offsetAfter - offsetBefore;
  }
}
