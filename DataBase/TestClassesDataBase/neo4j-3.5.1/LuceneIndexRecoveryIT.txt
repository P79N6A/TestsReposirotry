public class LuceneIndexRecoveryIT {
  @Rule public EphemeralFileSystemRule fs=new EphemeralFileSystemRule();
  private final String NUM_BANANAS_KEY="number_of_bananas_owned";
  private static final Label myLabel=label("MyLabel");
  private GraphDatabaseAPI db;
  private DirectoryFactory directoryFactory;
  @Before public void before(){
    directoryFactory=new DirectoryFactory.InMemoryDirectoryFactory();
  }
  @After public void after() throws Exception {
    if (db != null) {
      db.shutdown();
    }
    directoryFactory.close();
  }
  @Test public void addShouldBeIdempotentWhenDoingRecovery() throws Exception {
    startDb(createLuceneIndexFactory());
    IndexDefinition index=createIndex(myLabel);
    waitForIndex(index);
    long nodeId=createNode(myLabel,12);
    try (Transaction ignored=db.beginTx()){
      assertNotNull(db.getNodeById(nodeId));
    }
     assertEquals(1,doIndexLookup(myLabel,12).size());
    killDb();
    startDb(createLuceneIndexFactory());
    try (Transaction ignored=db.beginTx()){
      assertNotNull(db.getNodeById(nodeId));
    }
     assertEquals(1,doIndexLookup(myLabel,12).size());
  }
  @Test public void changeShouldBeIdempotentWhenDoingRecovery() throws Exception {
    startDb(createLuceneIndexFactory());
    IndexDefinition indexDefinition=createIndex(myLabel);
    waitForIndex(indexDefinition);
    long node=createNode(myLabel,12);
    rotateLogsAndCheckPoint();
    updateNode(node,13);
    killDb();
    startDb(createLuceneIndexFactory());
    assertEquals(0,doIndexLookup(myLabel,12).size());
    assertEquals(1,doIndexLookup(myLabel,13).size());
  }
  @Test public void removeShouldBeIdempotentWhenDoingRecovery() throws Exception {
    startDb(createLuceneIndexFactory());
    IndexDefinition indexDefinition=createIndex(myLabel);
    waitForIndex(indexDefinition);
    long node=createNode(myLabel,12);
    rotateLogsAndCheckPoint();
    deleteNode(node);
    killDb();
    startDb(createLuceneIndexFactory());
    assertEquals(0,doIndexLookup(myLabel,12).size());
  }
  @Test public void shouldNotAddTwiceDuringRecoveryIfCrashedDuringPopulation() throws Exception {
    startDb(createAlwaysInitiallyPopulatingLuceneIndexFactory());
    IndexDefinition indexDefinition=createIndex(myLabel);
    waitForIndex(indexDefinition);
    long nodeId=createNode(myLabel,12);
    assertEquals(1,doIndexLookup(myLabel,12).size());
    killDb();
    startDb(createAlwaysInitiallyPopulatingLuceneIndexFactory());
    try (Transaction ignored=db.beginTx()){
      IndexDefinition index=db.schema().getIndexes().iterator().next();
      waitForIndex(index);
      assertEquals(12,db.getNodeById(nodeId).getProperty(NUM_BANANAS_KEY));
      assertEquals(1,doIndexLookup(myLabel,12).size());
    }
   }
  @Test public void shouldNotUpdateTwiceDuringRecovery() throws Exception {
    startDb(createLuceneIndexFactory());
    IndexDefinition indexDefinition=createIndex(myLabel);
    waitForIndex(indexDefinition);
    long nodeId=createNode(myLabel,12);
    updateNode(nodeId,14);
    killDb();
    startDb(createLuceneIndexFactory());
    assertEquals(0,doIndexLookup(myLabel,12).size());
    assertEquals(1,doIndexLookup(myLabel,14).size());
  }
  private void startDb(  KernelExtensionFactory<?> indexProviderFactory){
    if (db != null) {
      db.shutdown();
    }
    TestGraphDatabaseFactory factory=new TestGraphDatabaseFactory();
    factory.setFileSystem(fs.get());
    factory.setKernelExtensions(Collections.singletonList(indexProviderFactory));
    db=(GraphDatabaseAPI)factory.newImpermanentDatabaseBuilder().setConfig(default_schema_provider,PROVIDER_DESCRIPTOR.name()).newGraphDatabase();
  }
  private void killDb() throws Exception {
    if (db != null) {
      fs.snapshot(() -> {
        db.shutdown();
        db=null;
      }
);
    }
  }
  private void rotateLogsAndCheckPoint() throws IOException {
    db.getDependencyResolver().resolveDependency(LogRotation.class).rotateLogFile();
    db.getDependencyResolver().resolveDependency(CheckPointer.class).forceCheckPoint(new SimpleTriggerInfo("test"));
  }
  private IndexDefinition createIndex(  Label label){
    try (Transaction tx=db.beginTx()){
      IndexDefinition definition=db.schema().indexFor(label).on(NUM_BANANAS_KEY).create();
      tx.success();
      return definition;
    }
   }
  private void waitForIndex(  IndexDefinition definition){
    try (Transaction tx=db.beginTx()){
      db.schema().awaitIndexOnline(definition,10,TimeUnit.SECONDS);
      tx.success();
    }
   }
  private Set<Node> doIndexLookup(  Label myLabel,  Object value){
    try (Transaction tx=db.beginTx()){
      Iterator<Node> iter=db.findNodes(myLabel,NUM_BANANAS_KEY,value);
      Set<Node> nodes=asUniqueSet(iter);
      tx.success();
      return nodes;
    }
   }
  private long createNode(  Label label,  int number){
    try (Transaction tx=db.beginTx()){
      Node node=db.createNode(label);
      node.setProperty(NUM_BANANAS_KEY,number);
      tx.success();
      return node.getId();
    }
   }
  private void updateNode(  long nodeId,  int value){
    try (Transaction tx=db.beginTx()){
      Node node=db.getNodeById(nodeId);
      node.setProperty(NUM_BANANAS_KEY,value);
      tx.success();
    }
   }
  private void deleteNode(  long node){
    try (Transaction tx=db.beginTx()){
      db.getNodeById(node).delete();
      tx.success();
    }
   }
  private KernelExtensionFactory<LuceneIndexProviderFactory.Dependencies> createAlwaysInitiallyPopulatingLuceneIndexFactory(){
    return new KernelExtensionFactory<LuceneIndexProviderFactory.Dependencies>(ExtensionType.DATABASE,PROVIDER_DESCRIPTOR.getKey()){
      @Override public Lifecycle newInstance(      KernelContext context,      LuceneIndexProviderFactory.Dependencies dependencies){
        return new LuceneIndexProvider(fs.get(),directoryFactory,defaultDirectoryStructure(context.directory()),IndexProvider.Monitor.EMPTY,dependencies.getConfig(),context.databaseInfo().operationalMode){
          @Override public InternalIndexState getInitialState(          StoreIndexDescriptor descriptor){
            return InternalIndexState.POPULATING;
          }
        }
;
      }
    }
;
  }
  private KernelExtensionFactory<LuceneIndexProviderFactory.Dependencies> createLuceneIndexFactory(){
    return new KernelExtensionFactory<LuceneIndexProviderFactory.Dependencies>(ExtensionType.DATABASE,PROVIDER_DESCRIPTOR.getKey()){
      @Override public Lifecycle newInstance(      KernelContext context,      LuceneIndexProviderFactory.Dependencies dependencies){
        return new LuceneIndexProvider(fs.get(),directoryFactory,defaultDirectoryStructure(context.directory()),IndexProvider.Monitor.EMPTY,dependencies.getConfig(),context.databaseInfo().operationalMode);
      }
    }
;
  }
}
