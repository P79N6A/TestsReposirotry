public class PhysicalToLogicalLabelChangesTest {
  @Test public void shouldSeeSimpleAddition(){
    convertAndAssert(ids(),ids(2),ids(),ids(2));
  }
  @Test public void shouldSeeSimpleRemoval(){
    convertAndAssert(ids(2),ids(),ids(2),ids());
  }
  @Test public void shouldSeeSomeAdded(){
    convertAndAssert(ids(1,3,5),ids(1,2,3,4,5,6),ids(),ids(2,4,6));
  }
  @Test public void shouldSeeSomeRemoved(){
    convertAndAssert(ids(1,2,3,4,5,6),ids(1,3,5),ids(2,4,6),ids());
  }
  @Test public void shouldSeeSomeAddedAndSomeRemoved(){
    convertAndAssert(ids(1,3,4,6),ids(0,2,3,5,6),ids(1,4),ids(0,2,5));
  }
  private void convertAndAssert(  long[] before,  long[] after,  long[] expectedRemoved,  long[] expectedAdded){
    NodeLabelUpdate update=NodeLabelUpdate.labelChanges(0,before,after);
    PhysicalToLogicalLabelChanges.convertToAdditionsAndRemovals(update);
    assertArrayEquals(terminate(update.getLabelsBefore()),expectedRemoved);
    assertArrayEquals(terminate(update.getLabelsAfter()),expectedAdded);
  }
  private long[] terminate(  long[] labels){
    int length=actualLength(labels);
    return length == labels.length ? labels : Arrays.copyOf(labels,length);
  }
  private int actualLength(  long[] labels){
    for (int i=0; i < labels.length; i++) {
      if (labels[i] == -1) {
        return i;
      }
    }
    return labels.length;
  }
  private long[] ids(  long... ids){
    return ids;
  }
}
