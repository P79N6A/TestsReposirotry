public class ConstraintRuleTest extends SchemaRuleTestBase {
  @Test public void shouldCreateUniquenessConstraint(){
    ConstraintDescriptor descriptor=ConstraintDescriptorFactory.uniqueForLabel(LABEL_ID,PROPERTY_ID_1);
    ConstraintRule constraintRule=ConstraintRule.constraintRule(RULE_ID,descriptor);
    assertThat(constraintRule.getId(),equalTo(RULE_ID));
    assertThat(constraintRule.schema(),equalTo(descriptor.schema()));
    assertThat(constraintRule.getConstraintDescriptor(),equalTo(descriptor));
    assertException(constraintRule::getOwnedIndex,IllegalStateException.class);
  }
  @Test public void shouldCreateUniquenessConstraintWithOwnedIndex(){
    UniquenessConstraintDescriptor descriptor=ConstraintDescriptorFactory.uniqueForLabel(LABEL_ID,PROPERTY_ID_1);
    ConstraintRule constraintRule=ConstraintRule.constraintRule(RULE_ID,descriptor,RULE_ID_2);
    assertThat(constraintRule.getConstraintDescriptor(),equalTo(descriptor));
    assertThat(constraintRule.getOwnedIndex(),equalTo(RULE_ID_2));
  }
  @Test public void shouldCreateNodeKeyConstraint(){
    ConstraintDescriptor descriptor=nodeKeyForLabel(LABEL_ID,PROPERTY_ID_1);
    ConstraintRule constraintRule=ConstraintRule.constraintRule(RULE_ID,descriptor);
    assertThat(constraintRule.getId(),equalTo(RULE_ID));
    assertThat(constraintRule.schema(),equalTo(descriptor.schema()));
    assertThat(constraintRule.getConstraintDescriptor(),equalTo(descriptor));
    assertException(constraintRule::getOwnedIndex,IllegalStateException.class);
  }
  @Test public void shouldCreateNodeKeyConstraintWithOwnedIndex(){
    NodeKeyConstraintDescriptor descriptor=nodeKeyForLabel(LABEL_ID,PROPERTY_ID_1);
    ConstraintRule constraintRule=ConstraintRule.constraintRule(RULE_ID,descriptor,RULE_ID_2);
    assertThat(constraintRule.getConstraintDescriptor(),equalTo(descriptor));
    assertThat(constraintRule.getOwnedIndex(),equalTo(RULE_ID_2));
  }
  @Test public void shouldCreateExistenceConstraint(){
    ConstraintDescriptor descriptor=existsForLabel(LABEL_ID,PROPERTY_ID_1);
    ConstraintRule constraintRule=ConstraintRule.constraintRule(RULE_ID,descriptor);
    assertThat(constraintRule.getId(),equalTo(RULE_ID));
    assertThat(constraintRule.schema(),equalTo(descriptor.schema()));
    assertThat(constraintRule.getConstraintDescriptor(),equalTo(descriptor));
    assertException(constraintRule::getOwnedIndex,IllegalStateException.class);
  }
  @Test public void indexRulesAreEqualBasedOnConstraintDescriptor(){
    assertEqualityByDescriptor(ConstraintDescriptorFactory.existsForLabel(LABEL_ID,PROPERTY_ID_1));
    assertEqualityByDescriptor(ConstraintDescriptorFactory.uniqueForLabel(LABEL_ID,PROPERTY_ID_1));
    assertEqualityByDescriptor(ConstraintDescriptorFactory.nodeKeyForLabel(LABEL_ID,PROPERTY_ID_1));
    assertEqualityByDescriptor(ConstraintDescriptorFactory.existsForRelType(REL_TYPE_ID,PROPERTY_ID_1));
    assertEqualityByDescriptor(ConstraintDescriptorFactory.existsForLabel(LABEL_ID,PROPERTY_ID_1,PROPERTY_ID_2));
    assertEqualityByDescriptor(ConstraintDescriptorFactory.uniqueForLabel(LABEL_ID,PROPERTY_ID_1,PROPERTY_ID_2));
    assertEqualityByDescriptor(ConstraintDescriptorFactory.nodeKeyForLabel(LABEL_ID,PROPERTY_ID_1,PROPERTY_ID_2));
  }
  private void assertEqualityByDescriptor(  UniquenessConstraintDescriptor descriptor){
    ConstraintRule rule1=ConstraintRule.constraintRule(RULE_ID,descriptor,RULE_ID_2);
    ConstraintRule rule2=ConstraintRule.constraintRule(RULE_ID_2,descriptor);
    assertEquality(rule1,rule2);
  }
  private void assertEqualityByDescriptor(  ConstraintDescriptor descriptor){
    ConstraintRule rule1=ConstraintRule.constraintRule(RULE_ID,descriptor);
    ConstraintRule rule2=ConstraintRule.constraintRule(RULE_ID_2,descriptor);
    assertEquality(rule1,rule2);
  }
}
