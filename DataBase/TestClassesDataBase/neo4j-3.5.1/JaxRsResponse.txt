public class JaxRsResponse extends Response {
  private final int status;
  private final MultivaluedMap<String,Object> metaData;
  private final MultivaluedMap<String,String> headers;
  private final URI location;
  private String data;
  private MediaType type;
  public JaxRsResponse(  ClientResponse response){
    this(response,extractContent(response));
  }
  public JaxRsResponse(  ClientResponse response,  String entity){
    status=response.getStatus();
    metaData=extractMetaData(response);
    headers=extractHeaders(response);
    location=response.getLocation();
    type=response.getType();
    data=entity;
    response.close();
  }
  private static String extractContent(  ClientResponse response){
    if (response.getStatus() == Status.NO_CONTENT.getStatusCode()) {
      return null;
    }
    return response.getEntity(String.class);
  }
  public static JaxRsResponse extractFrom(  ClientResponse clientResponse){
    return new JaxRsResponse(clientResponse);
  }
  @Override public String getEntity(){
    return data;
  }
  @Override public int getStatus(){
    return status;
  }
  @Override public MultivaluedMap<String,Object> getMetadata(){
    return metaData;
  }
  private MultivaluedMap<String,Object> extractMetaData(  ClientResponse jettyResponse){
    MultivaluedMap<String,Object> metadata=new StringKeyObjectValueIgnoreCaseMultivaluedMap();
    for (    Map.Entry<String,List<String>> header : jettyResponse.getHeaders().entrySet()) {
      for (      Object value : header.getValue()) {
        metadata.putSingle(header.getKey(),value);
      }
    }
    return metadata;
  }
  public MultivaluedMap<String,String> getHeaders(){
    return headers;
  }
  private MultivaluedMap<String,String> extractHeaders(  ClientResponse jettyResponse){
    return jettyResponse.getHeaders();
  }
  public URI getLocation(){
    return location;
  }
  public void close(){
  }
  public MediaType getType(){
    return type;
  }
public static class ServerRootRepresentationTest {
    @Test public void shouldProvideAListOfServiceUris() throws Exception {
      ConsoleService consoleService=new ConsoleService(null,mock(Database.class),NullLogProvider.getInstance(),null);
      ServerRootRepresentation srr=new ServerRootRepresentation(new URI("http://example.org:9999"),Collections.singletonList(consoleService));
      Map<String,Map<String,String>> map=srr.serialize();
      assertNotNull(map.get("services"));
      assertThat(map.get("services").get(consoleService.getName()),containsString(consoleService.getServerPath()));
    }
  }
}
