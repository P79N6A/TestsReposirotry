public class CreateRelationshipTestIT extends AbstractRestFunctionalDocTestBase {
  @Test @Graph("Joe knows Sara") @Documented("Upon successful creation of a relationship, the new relationship is returned.") @Title("Create a relationship with properties") public void create_a_relationship_with_properties(){
    String jsonString="{\"to\" : \"" + getDataUri() + "node/"+ getNode("Sara").getId()+ "\", \"type\" : \"LOVES\", \"data\" : {\"foo\" : \"bar\"}}";
    Node i=getNode("Joe");
    gen.get().expectedStatus(Status.CREATED.getStatusCode()).payload(jsonString).post(getNodeUri(i) + "/relationships");
    try (Transaction tx=graphdb().beginTx()){
      assertTrue(i.hasRelationship(RelationshipType.withName("LOVES")));
    }
   }
  @Test @Documented("Upon successful creation of a relationship, the new relationship is returned.") @Title("Create relationship") @Graph("Joe knows Sara") public void create_relationship() throws Exception {
    String jsonString="{\"to\" : \"" + getDataUri() + "node/"+ getNode("Sara").getId()+ "\", \"type\" : \"LOVES\"}";
    Node i=getNode("Joe");
    String entity=gen.get().expectedStatus(Status.CREATED.getStatusCode()).payload(jsonString).post(getNodeUri(i) + "/relationships").entity();
    try (Transaction tx=graphdb().beginTx()){
      assertTrue(i.hasRelationship(RelationshipType.withName("LOVES")));
    }
     assertProperRelationshipRepresentation(JsonHelper.jsonToMap(entity));
  }
  @Test @Graph("Joe knows Sara") public void shouldRespondWith404WhenStartNodeDoesNotExist(){
    String jsonString="{\"to\" : \"" + getDataUri() + "node/"+ getNode("Joe")+ "\", \"type\" : \"LOVES\", \"data\" : {\"foo\" : \"bar\"}}";
    gen.get().expectedStatus(Status.NOT_FOUND.getStatusCode()).expectedType(MediaType.TEXT_HTML_TYPE).payload(jsonString).post(getDataUri() + "/node/12345/relationships").entity();
  }
  @Test @Graph("Joe knows Sara") public void creating_a_relationship_to_a_nonexisting_end_node(){
    String jsonString="{\"to\" : \"" + getDataUri() + "node/"+ "999999\", \"type\" : \"LOVES\", \"data\" : {\"foo\" : \"bar\"}}";
    gen.get().expectedStatus(Status.BAD_REQUEST.getStatusCode()).payload(jsonString).post(getNodeUri(getNode("Joe")) + "/relationships").entity();
  }
  @Test @Graph("Joe knows Sara") public void creating_a_loop_relationship() throws Exception {
    Node joe=getNode("Joe");
    String jsonString="{\"to\" : \"" + getNodeUri(joe) + "\", \"type\" : \"LOVES\"}";
    String entity=gen.get().expectedStatus(Status.CREATED.getStatusCode()).payload(jsonString).post(getNodeUri(getNode("Joe")) + "/relationships").entity();
    assertProperRelationshipRepresentation(JsonHelper.jsonToMap(entity));
  }
  @Test @Graph("Joe knows Sara") public void providing_bad_JSON(){
    String jsonString="{\"to\" : \"" + getNodeUri(data.get().get("Joe")) + "\", \"type\" : \"LOVES\", \"data\" : {\"foo\" : **BAD JSON HERE*** \"bar\"}}";
    gen.get().expectedStatus(Status.BAD_REQUEST.getStatusCode()).payload(jsonString).post(getNodeUri(getNode("Joe")) + "/relationships").entity();
  }
  private void assertProperRelationshipRepresentation(  Map<String,Object> relrep){
    RelationshipRepresentationTest.verifySerialisation(relrep);
  }
}
