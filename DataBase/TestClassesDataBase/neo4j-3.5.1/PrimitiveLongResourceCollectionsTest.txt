class PrimitiveLongResourceCollectionsTest {
  @Test void simpleIterator(){
    CountingResource resource=new CountingResource();
    PrimitiveLongResourceIterator iterator=PrimitiveLongResourceCollections.iterator(resource,1,2,3,4);
    assertContent(iterator,1,2,3,4);
    iterator.close();
    assertEquals(1,resource.closeCount(),"exactly one call to close");
  }
  @Test void concatIterators(){
    CountingResource resource=new CountingResource();
    PrimitiveLongResourceIterator first=PrimitiveLongResourceCollections.iterator(resource,1,2);
    PrimitiveLongResourceIterator second=PrimitiveLongResourceCollections.iterator(resource,3,4);
    PrimitiveLongResourceIterator concat=PrimitiveLongResourceCollections.concat(first,second);
    assertContent(concat,1,2,3,4);
    concat.close();
    assertEquals(2,resource.closeCount(),"all concatenated iterators are closed");
  }
  private void assertContent(  PrimitiveLongResourceIterator iterator,  long... expected){
    int i=0;
    while (iterator.hasNext()) {
      assertEquals(expected[i++],iterator.next(),"has expected value");
    }
    assertEquals(expected.length,i,"has all expected values");
  }
private static class CountingResource implements Resource {
    private AtomicInteger closed=new AtomicInteger();
    @Override public void close(){
      closed.incrementAndGet();
    }
    int closeCount(){
      return closed.get();
    }
  }
}
