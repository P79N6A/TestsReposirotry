public class GroupsTest {
  @Test public void shouldHandleConcurrentGetOrCreate() throws Throwable {
    Groups groups=new Groups();
    Race race=new Race();
    String name="MyGroup";
    for (int i=0; i < Runtime.getRuntime().availableProcessors(); i++) {
      race.addContestant(() -> {
        Group group=groups.getOrCreate(name);
        assertEquals(LOWEST_NONGLOBAL_ID,group.id());
      }
);
    }
    race.go();
    Group otherGroup=groups.getOrCreate("MyOtherGroup");
    assertEquals(LOWEST_NONGLOBAL_ID + 1,otherGroup.id());
  }
  @Test public void shouldSupportMixedGroupModeInGetOrCreate(){
    Groups groups=new Groups();
    assertEquals(Group.GLOBAL,groups.getOrCreate(null));
    assertNotEquals(Group.GLOBAL,groups.getOrCreate("Something"));
  }
  @Test public void shouldSupportMixedGroupModeInGetOrCreate2(){
    Groups groups=new Groups();
    assertNotEquals(Group.GLOBAL,groups.getOrCreate("Something"));
    assertEquals(Group.GLOBAL,groups.getOrCreate(null));
  }
  @Test public void shouldGetCreatedGroup(){
    Groups groups=new Groups();
    String name="Something";
    Group createdGroup=groups.getOrCreate(name);
    Group gottenGroup=groups.get(name);
    assertSame(createdGroup,gottenGroup);
  }
  @Test public void shouldGetGlobalGroup(){
    Groups groups=new Groups();
    groups.getOrCreate(null);
    Group group=groups.get(null);
    assertSame(Group.GLOBAL,group);
  }
  @Test public void shouldSupportMixedGroupModeInGet(){
    Groups groups=new Groups();
    groups.getOrCreate("Something");
    assertEquals(Group.GLOBAL,groups.get(null));
  }
  @Test(expected=HeaderException.class) public void shouldFailOnGettingNonExistentGroup(){
    Groups groups=new Groups();
    groups.get("Something");
  }
}
