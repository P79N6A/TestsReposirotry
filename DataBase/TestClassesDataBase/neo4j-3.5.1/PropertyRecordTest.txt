public class PropertyRecordTest {
  @Test public void addingDuplicatePropertyBlockShouldOverwriteExisting(){
    PropertyRecord record=new PropertyRecord(1);
    PropertyBlock blockA=new PropertyBlock();
    blockA.setValueBlocks(new long[1]);
    blockA.setKeyIndexId(2);
    PropertyBlock blockB=new PropertyBlock();
    blockB.setValueBlocks(new long[1]);
    blockB.setKeyIndexId(2);
    record.setPropertyBlock(blockA);
    record.setPropertyBlock(blockB);
    List<PropertyBlock> propertyBlocks=Iterables.asList(record);
    assertThat(propertyBlocks,hasItem(blockB));
    assertThat(propertyBlocks,hasSize(1));
  }
  @Test public void shouldIterateOverBlocks(){
    PropertyRecord record=new PropertyRecord(0);
    PropertyBlock[] blocks=new PropertyBlock[3];
    for (int i=0; i < blocks.length; i++) {
      blocks[i]=new PropertyBlock();
      record.addPropertyBlock(blocks[i]);
    }
    Iterator<PropertyBlock> iterator=record.iterator();
    for (    PropertyBlock block : blocks) {
      assertTrue(iterator.hasNext());
      assertEquals(block,iterator.next());
    }
    assertFalse(iterator.hasNext());
  }
  @Test public void shouldBeAbleToRemoveBlocksDuringIteration(){
    PropertyRecord record=new PropertyRecord(0);
    Set<PropertyBlock> blocks=new HashSet<>();
    for (int i=0; i < 4; i++) {
      PropertyBlock block=new PropertyBlock();
      record.addPropertyBlock(block);
      blocks.add(block);
    }
    Iterator<PropertyBlock> iterator=record.iterator();
    assertIteratorRemoveThrowsIllegalState(iterator);
    int size=blocks.size();
    for (int i=0; i < size; i++) {
      assertTrue(iterator.hasNext());
      PropertyBlock block=iterator.next();
      if (i % 2 == 1) {
        iterator.remove();
        assertIteratorRemoveThrowsIllegalState(iterator);
        blocks.remove(block);
      }
    }
    assertFalse(iterator.hasNext());
    assertEquals(blocks,Iterables.asSet(record));
  }
  @Test public void addLoadedBlock(){
    PropertyRecord record=new PropertyRecord(42);
    addBlock(record,1,2);
    addBlock(record,3,4);
    List<PropertyBlock> blocks=Iterables.asList(record);
    assertEquals(2,blocks.size());
    assertEquals(1,blocks.get(0).getKeyIndexId());
    assertEquals(2,blocks.get(0).getSingleValueInt());
    assertEquals(3,blocks.get(1).getKeyIndexId());
    assertEquals(4,blocks.get(1).getSingleValueInt());
  }
  @Test public void addLoadedBlockFailsWhenTooManyBlocksAdded(){
    PropertyRecord record=new PropertyRecord(42);
    addBlock(record,1,2);
    addBlock(record,3,4);
    addBlock(record,5,6);
    addBlock(record,7,8);
    boolean validationErrorDetected=false;
    try {
      addBlock(record,9,10);
    }
 catch (    AssertionError ignored) {
      validationErrorDetected=true;
    }
    assertTrue("Assertion failure expected",validationErrorDetected);
  }
  private void assertIteratorRemoveThrowsIllegalState(  Iterator<PropertyBlock> iterator){
    try {
      iterator.remove();
      fail("Should have failed");
    }
 catch (    IllegalStateException e) {
    }
  }
  private static void addBlock(  PropertyRecord record,  int key,  int value){
    PropertyBlock block=new PropertyBlock();
    PropertyStore.encodeValue(block,key,Values.of(value),null,null,true);
    for (    long valueBlock : block.getValueBlocks()) {
      record.addLoadedBlock(valueBlock);
    }
  }
}
