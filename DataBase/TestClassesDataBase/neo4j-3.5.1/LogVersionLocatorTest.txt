public class LogVersionLocatorTest {
  private final long firstTxIdInLog=3;
  private final long lastTxIdInLog=67;
  @Test public void shouldFindLogPosition() throws NoSuchTransactionException {
    final long txId=42L;
    final PhysicalLogicalTransactionStore.LogVersionLocator locator=new PhysicalLogicalTransactionStore.LogVersionLocator(txId);
    final LogPosition position=new LogPosition(1,128);
    final boolean result=locator.visit(position,firstTxIdInLog,lastTxIdInLog);
    assertFalse(result);
    assertEquals(position,locator.getLogPosition());
  }
  @Test public void shouldNotFindLogPosition(){
    final long txId=1L;
    final PhysicalLogicalTransactionStore.LogVersionLocator locator=new PhysicalLogicalTransactionStore.LogVersionLocator(txId);
    final LogPosition position=new LogPosition(1,128);
    final boolean result=locator.visit(position,firstTxIdInLog,lastTxIdInLog);
    assertTrue(result);
    try {
      locator.getLogPosition();
      fail("should have thrown");
    }
 catch (    NoSuchTransactionException e) {
      assertEquals("Unable to find transaction " + txId + " in any of my logical logs: "+ "Couldn't find any log containing "+ txId,e.getMessage());
    }
  }
  @Test public void shouldAlwaysThrowIfVisitIsNotCalled(){
    final long txId=1L;
    final PhysicalLogicalTransactionStore.LogVersionLocator locator=new PhysicalLogicalTransactionStore.LogVersionLocator(txId);
    try {
      locator.getLogPosition();
      fail("should have thrown");
    }
 catch (    NoSuchTransactionException e) {
      assertEquals("Unable to find transaction " + txId + " in any of my logical logs: "+ "Couldn't find any log containing "+ txId,e.getMessage());
    }
  }
}
