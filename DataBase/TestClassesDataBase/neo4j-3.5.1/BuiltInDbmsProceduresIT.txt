public class BuiltInDbmsProceduresIT extends KernelIntegrationTest {
  private final ResourceTracker resourceTracker=new StubResourceManager();
  @Test public void listConfig() throws Exception {
    List<Object[]> config=callListConfig("");
    List<String> names=config.stream().map(o -> o[0].toString()).collect(Collectors.toList());
    assertTrue(names.size() > 10);
    assertThat(names,hasItem(GraphDatabaseSettings.record_format.name()));
    assertEquals(names.stream().filter(n -> n.startsWith("unsupported")).count(),0);
  }
  @Test public void listConfigWithASpecificConfigName() throws Exception {
    List<Object[]> config=callListConfig(GraphDatabaseSettings.strict_config_validation.name());
    assertEquals(1,config.size());
    assertArrayEquals(new Object[]{"dbms.config.strict_validation","A strict configuration validation will prevent the database from starting up if unknown " + "configuration options are specified in the neo4j settings namespace (such as dbms., ha., " + "cypher., etc). This is currently false by default but will be true by default in 4.0.","false",false},config.get(0));
  }
  @Test public void durationAlwaysListedWithUnit() throws Exception {
    List<Object[]> config=callListConfig(GraphDatabaseSettings.transaction_timeout.name());
    assertEquals(1,config.size());
    assertArrayEquals(new Object[]{"dbms.transaction.timeout","The maximum time interval of a transaction within which it should be completed.","0ms",true},config.get(0));
  }
  @Test public void listDynamicSetting() throws ProcedureException {
    List<Object[]> config=callListConfig(GraphDatabaseSettings.check_point_iops_limit.name());
    assertEquals(1,config.size());
    assertTrue((Boolean)config.get(0)[3]);
  }
  @Test public void listNotDynamicSetting() throws ProcedureException {
    List<Object[]> config=callListConfig(GraphDatabaseSettings.data_directory.name());
    assertEquals(1,config.size());
    assertFalse((Boolean)config.get(0)[3]);
  }
  private List<Object[]> callListConfig(  String seatchString) throws ProcedureException {
    QualifiedName procedureName=procedureName("dbms","listConfig");
    RawIterator<Object[],ProcedureException> callResult=dbmsOperations().procedureCallDbms(procedureName,toArray(seatchString),dependencyResolver,AUTH_DISABLED,resourceTracker);
    return asList(callResult);
  }
}
