public class GetOnRootIT extends AbstractRestFunctionalTestBase {
  @Title("Get service root") @Documented("The service root is your starting point to discover the REST API. It contains the basic starting " + "points for the database, and some version and extension information.") @Test @Graph("I know you") public void assert200OkFromGet() throws Exception {
    String body=gen.get().expectedStatus(200).get(getDataUri()).entity();
    Map<String,Object> map=JsonHelper.jsonToMap(body);
    assertEquals(getDataUri() + "node",map.get("node"));
    assertNotNull(map.get("node_index"));
    assertNotNull(map.get("relationship_index"));
    assertNotNull(map.get("extensions_info"));
    assertNotNull(map.get("batch"));
    assertNotNull(map.get("cypher"));
    assertNotNull(map.get("indexes"));
    assertNotNull(map.get("constraints"));
    assertNotNull(map.get("node_labels"));
    assertEquals(Version.getNeo4jVersion(),map.get("neo4j_version"));
    JaxRsResponse response;
    if (map.get("reference_node") != null) {
      response=RestRequest.req().get((String)map.get("reference_node"));
      assertEquals(200,response.getStatus());
      response.close();
    }
    response=RestRequest.req().get((String)map.get("node_index"));
    assertTrue(response.getStatus() == 200 || response.getStatus() == 204);
    response.close();
    response=RestRequest.req().get((String)map.get("relationship_index"));
    assertTrue(response.getStatus() == 200 || response.getStatus() == 204);
    response.close();
    response=RestRequest.req().get((String)map.get("extensions_info"));
    assertEquals(200,response.getStatus());
    response.close();
    response=RestRequest.req().post((String)map.get("batch"),"[]");
    assertEquals(200,response.getStatus());
    response.close();
    response=RestRequest.req().post((String)map.get("cypher"),"{\"query\":\"CREATE (n) RETURN n\"}");
    assertEquals(200,response.getStatus());
    response.close();
    response=RestRequest.req().get((String)map.get("indexes"));
    assertEquals(200,response.getStatus());
    response.close();
    response=RestRequest.req().get((String)map.get("constraints"));
    assertEquals(200,response.getStatus());
    response.close();
    response=RestRequest.req().get((String)map.get("node_labels"));
    assertEquals(200,response.getStatus());
    response.close();
  }
  @Documented("All responses from the REST API can be transmitted as JSON streams, resulting in\n" + "better performance and lower memory overhead on the server side. To use\n" + "streaming, supply the header `X-Stream: true` with each request.") @Test public void streaming() throws Exception {
    data.get();
    ResponseEntity responseEntity=gen().withHeader(StreamingFormat.STREAM_HEADER,"true").expectedType(APPLICATION_JSON_TYPE).expectedStatus(200).get(getDataUri());
    JaxRsResponse response=responseEntity.response();
    String foundMediaType=response.getType().toString();
    String expectedMediaType=StreamingFormat.MEDIA_TYPE.toString();
    assertEquals(expectedMediaType,foundMediaType);
    String body=responseEntity.entity();
    Map<String,Object> map=JsonHelper.jsonToMap(body);
    assertEquals(getDataUri() + "node",map.get("node"));
  }
}
