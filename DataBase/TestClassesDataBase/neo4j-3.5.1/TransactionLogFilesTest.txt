public class TransactionLogFilesTest {
  @Rule public final FileSystemRule fileSystemRule=new DefaultFileSystemRule();
  @Rule public final TestDirectory testDirectory=TestDirectory.testDirectory();
  private final String filename="filename";
  @Test public void shouldGetTheFileNameForAGivenVersion() throws IOException {
    final LogFiles files=createLogFiles();
    final int version=12;
    final File versionFileName=files.getLogFileForVersion(version);
    DatabaseLayout databaseLayout=testDirectory.databaseLayout();
    final File expected=databaseLayout.file(getVersionedLogFileName(version));
    assertEquals(expected,versionFileName);
  }
  @Test public void shouldVisitEachLofFile() throws Throwable {
    LogFiles files=createLogFiles();
    DatabaseLayout databaseLayout=testDirectory.databaseLayout();
    fileSystemRule.create(databaseLayout.file(getVersionedLogFileName("1"))).close();
    fileSystemRule.create(databaseLayout.file(getVersionedLogFileName("some","2"))).close();
    fileSystemRule.create(databaseLayout.file(getVersionedLogFileName("3"))).close();
    fileSystemRule.create(databaseLayout.file(filename)).close();
    final List<File> seenFiles=new ArrayList<>();
    final List<Long> seenVersions=new ArrayList<>();
    files.accept((file,logVersion) -> {
      seenFiles.add(file);
      seenVersions.add(logVersion);
    }
);
    assertThat(seenFiles,containsInAnyOrder(databaseLayout.file(getVersionedLogFileName(filename,"1")),databaseLayout.file(getVersionedLogFileName(filename,"3"))));
    assertThat(seenVersions,containsInAnyOrder(1L,3L));
    files.shutdown();
  }
  @Test public void shouldBeAbleToRetrieveTheHighestLogVersion() throws Throwable {
    LogFiles files=createLogFiles();
    DatabaseLayout databaseLayout=testDirectory.databaseLayout();
    fileSystemRule.create(databaseLayout.file(getVersionedLogFileName("1"))).close();
    fileSystemRule.create(databaseLayout.file(getVersionedLogFileName("some","4"))).close();
    fileSystemRule.create(databaseLayout.file(getVersionedLogFileName("3"))).close();
    fileSystemRule.create(databaseLayout.file(filename)).close();
    final long highestLogVersion=files.getHighestLogVersion();
    assertEquals(3,highestLogVersion);
    files.shutdown();
  }
  @Test public void shouldReturnANegativeValueIfThereAreNoLogFiles() throws Throwable {
    LogFiles files=createLogFiles();
    DatabaseLayout databaseLayout=testDirectory.databaseLayout();
    fileSystemRule.create(databaseLayout.file(getVersionedLogFileName("some","4"))).close();
    fileSystemRule.create(databaseLayout.file(filename)).close();
    final long highestLogVersion=files.getHighestLogVersion();
    assertEquals(-1,highestLogVersion);
    files.shutdown();
  }
  @Test public void shouldFindTheVersionBasedOnTheFilename() throws Throwable {
    LogFiles logFiles=createLogFiles();
    final File file=new File("v....2");
    long logVersion=logFiles.getLogVersion(file);
    assertEquals(2,logVersion);
    logFiles.shutdown();
  }
  @Test public void shouldThrowIfThereIsNoVersionInTheFileName() throws IOException {
    LogFiles logFiles=createLogFiles();
    final File file=new File("wrong");
    try {
      logFiles.getLogVersion(file);
      fail("should have thrown");
    }
 catch (    RuntimeException ex) {
      assertEquals("Invalid log file '" + file.getName() + "'",ex.getMessage());
    }
  }
  @Test(expected=NumberFormatException.class) public void shouldThrowIfVersionIsNotANumber() throws IOException {
    LogFiles logFiles=createLogFiles();
    final File file=new File(getVersionedLogFileName("aa","A"));
    logFiles.getLogVersion(file);
  }
  @Test public void isLogFile() throws IOException {
    LogFiles logFiles=createLogFiles();
    assertFalse(logFiles.isLogFile(new File("aaa.tx.log")));
    assertTrue(logFiles.isLogFile(new File("filename.0")));
    assertTrue(logFiles.isLogFile(new File("filename.17")));
  }
  private LogFiles createLogFiles() throws IOException {
    return LogFilesBuilder.builder(testDirectory.databaseLayout(),fileSystemRule).withLogFileName(filename).withTransactionIdStore(new SimpleTransactionIdStore()).withLogVersionRepository(new SimpleLogVersionRepository()).build();
  }
  private String getVersionedLogFileName(  int version){
    return getVersionedLogFileName(filename,String.valueOf(version));
  }
  private String getVersionedLogFileName(  String version){
    return getVersionedLogFileName(filename,version);
  }
  private String getVersionedLogFileName(  String filename,  String version){
    return filename + "." + version;
  }
}
