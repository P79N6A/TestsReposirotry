public class BatchInsertionIT {
  @Rule public final EmbeddedDatabaseRule dbRule=new EmbeddedDatabaseRule().startLazily();
  @Rule public final DefaultFileSystemRule fileSystemRule=new DefaultFileSystemRule();
  @Test public void shouldIndexNodesWithMultipleLabels() throws Exception {
    File path=dbRule.databaseLayout().databaseDirectory();
    BatchInserter inserter=BatchInserters.inserter(path,fileSystemRule.get());
    inserter.createNode(map("name","Bob"),label("User"),label("Admin"));
    inserter.createDeferredSchemaIndex(label("User")).on("name").create();
    inserter.createDeferredSchemaIndex(label("Admin")).on("name").create();
    inserter.shutdown();
    GraphDatabaseService db=dbRule.getGraphDatabaseAPI();
    try (Transaction tx=db.beginTx()){
      assertThat(count(db.findNodes(label("User"),"name","Bob")),equalTo(1L));
      assertThat(count(db.findNodes(label("Admin"),"name","Bob")),equalTo(1L));
    }
  finally {
      db.shutdown();
    }
  }
  @Test public void shouldNotIndexNodesWithWrongLabel() throws Exception {
    File file=new File(dbRule.getDatabaseDirAbsolutePath());
    BatchInserter inserter=BatchInserters.inserter(file,fileSystemRule.get());
    inserter.createNode(map("name","Bob"),label("User"),label("Admin"));
    inserter.createDeferredSchemaIndex(label("Banana")).on("name").create();
    inserter.shutdown();
    GraphDatabaseService db=dbRule.getGraphDatabaseAPI();
    try (Transaction tx=db.beginTx()){
      assertThat(count(db.findNodes(label("Banana"),"name","Bob")),equalTo(0L));
    }
  finally {
      db.shutdown();
    }
  }
  @Test public void shouldBeAbleToMakeRepeatedCallsToSetNodeProperty() throws Exception {
    File file=dbRule.databaseLayout().databaseDirectory();
    BatchInserter inserter=BatchInserters.inserter(file,fileSystemRule.get());
    long nodeId=inserter.createNode(Collections.emptyMap());
    final Object finalValue=87;
    inserter.setNodeProperty(nodeId,"a","some property value");
    inserter.setNodeProperty(nodeId,"a",42);
    inserter.setNodeProperty(nodeId,"a",3.14);
    inserter.setNodeProperty(nodeId,"a",true);
    inserter.setNodeProperty(nodeId,"a",finalValue);
    inserter.shutdown();
    GraphDatabaseService db=dbRule.getGraphDatabaseAPI();
    try (Transaction ignored=db.beginTx()){
      assertThat(db.getNodeById(nodeId).getProperty("a"),equalTo(finalValue));
    }
  finally {
      db.shutdown();
    }
  }
  @Test public void shouldBeAbleToMakeRepeatedCallsToSetNodePropertyWithMultiplePropertiesPerBlock() throws Exception {
    File file=dbRule.databaseLayout().databaseDirectory();
    BatchInserter inserter=BatchInserters.inserter(file,fileSystemRule.get());
    long nodeId=inserter.createNode(Collections.emptyMap());
    final Object finalValue1=87;
    final Object finalValue2=3.14;
    inserter.setNodeProperty(nodeId,"a","some property value");
    inserter.setNodeProperty(nodeId,"a",42);
    inserter.setNodeProperty(nodeId,"b",finalValue2);
    inserter.setNodeProperty(nodeId,"a",finalValue2);
    inserter.setNodeProperty(nodeId,"a",true);
    inserter.setNodeProperty(nodeId,"a",finalValue1);
    inserter.shutdown();
    GraphDatabaseService db=dbRule.getGraphDatabaseAPI();
    try (Transaction ignored=db.beginTx()){
      assertThat(db.getNodeById(nodeId).getProperty("a"),equalTo(finalValue1));
      assertThat(db.getNodeById(nodeId).getProperty("b"),equalTo(finalValue2));
    }
  finally {
      db.shutdown();
    }
  }
  @Test(expected=ReservedIdException.class) public void makeSureCantCreateNodeWithMagicNumber() throws IOException {
    File path=dbRule.databaseLayout().databaseDirectory();
    BatchInserter inserter=BatchInserters.inserter(path,fileSystemRule.get());
    try {
      long id=IdGeneratorImpl.INTEGER_MINUS_ONE;
      inserter.createNode(id,null);
    }
  finally {
      inserter.shutdown();
    }
  }
}
