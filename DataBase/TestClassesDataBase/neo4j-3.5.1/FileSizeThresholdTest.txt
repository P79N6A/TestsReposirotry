public class FileSizeThresholdTest {
  private FileSystemAbstraction fs=mock(FileSystemAbstraction.class);
  private final LogFileInformation source=mock(LogFileInformation.class);
  private final File file=mock(File.class);
  private final long version=1;
  @Test public void shouldReturnFalseWhenFileSizeIsLowerThanMaxSize(){
    final long maxSize=10;
    final FileSizeThreshold threshold=new FileSizeThreshold(fs,maxSize);
    when(fs.getFileSize(file)).thenReturn(5L);
    threshold.init();
    final boolean result=threshold.reached(file,version,source);
    assertFalse(result);
  }
  @Test public void shouldReturnTrueWhenASingleFileSizeIsGreaterOrEqualThanMaxSize(){
    long sixteenGigabytes=16L * 1024 * 1024* 1024;
    final FileSizeThreshold threshold=new FileSizeThreshold(fs,sixteenGigabytes);
    when(fs.getFileSize(file)).thenReturn(sixteenGigabytes);
    threshold.init();
    final boolean result=threshold.reached(file,version,source);
    assertTrue(result);
  }
  @Test public void shouldSumSizeWhenCalledMultipleTimes(){
    final long maxSize=10;
    final FileSizeThreshold threshold=new FileSizeThreshold(fs,maxSize);
    when(fs.getFileSize(file)).thenReturn(5L);
    threshold.init();
    threshold.reached(file,version,source);
    final boolean result=threshold.reached(file,version,source);
    assertTrue(result);
  }
  @Test public void shouldForgetPreviousValuesAfterAInitCall(){
    final long maxSize=10;
    final FileSizeThreshold threshold=new FileSizeThreshold(fs,maxSize);
    when(fs.getFileSize(file)).thenReturn(5L);
    threshold.init();
    threshold.reached(file,version,source);
    threshold.reached(file,version,source);
    threshold.init();
    final boolean result=threshold.reached(file,version,source);
    assertFalse(result);
  }
}
