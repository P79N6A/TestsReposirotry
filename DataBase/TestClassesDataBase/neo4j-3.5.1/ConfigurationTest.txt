public class ConfigurationTest {
  @Test public void shouldOverrideBigPageCacheMemorySettingContainingUnit(){
    Config dbConfig=Config.defaults(pagecache_memory,"2g");
    Configuration config=new Configuration.Overridden(dbConfig);
    long memory=config.pageCacheMemory();
    assertEquals(MAX_PAGE_CACHE_MEMORY,memory);
  }
  @Test public void shouldOverrideSmallPageCacheMemorySettingContainingUnit(){
    long overridden=parseLongWithUnit("10m");
    Config dbConfig=Config.defaults(pagecache_memory,valueOf(overridden));
    Configuration config=new Configuration.Overridden(dbConfig);
    long memory=config.pageCacheMemory();
    assertEquals(overridden,memory);
  }
  @Test public void shouldParseDefaultPageCacheMemorySetting(){
    Configuration config=Configuration.DEFAULT;
    long memory=config.pageCacheMemory();
    long heuristic=ConfiguringPageCacheFactory.defaultHeuristicPageCacheMemory();
    assertTrue(within(memory,heuristic,MAX_PAGE_CACHE_MEMORY));
  }
  @Test public void shouldCalculateCorrectMaxMemorySetting() throws Exception {
    long totalMachineMemory=OsBeanUtil.getTotalPhysicalMemory();
    assumeTrue(totalMachineMemory != VALUE_UNAVAILABLE);
    int percent=70;
    Configuration config=new Configuration(){
      @Override public long maxMemoryUsage(){
        return Configuration.calculateMaxMemoryFromPercent(percent);
      }
    }
;
    long memory=config.maxMemoryUsage();
    long expected=(long)((totalMachineMemory - Runtime.getRuntime().maxMemory()) * (percent / 100D));
    long diff=abs(expected - memory);
    assertThat(diff,lessThan((long)(expected / 10D)));
  }
  private boolean within(  long value,  long firstBound,  long otherBound){
    return value >= min(firstBound,otherBound) && value <= max(firstBound,otherBound);
  }
}
