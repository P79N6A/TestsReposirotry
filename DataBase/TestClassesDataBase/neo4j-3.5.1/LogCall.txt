private static final class LogCall {
  private final String context;
  private final Level level;
  private final String message;
  private final Object[] arguments;
  private final Throwable throwable;
  private LogCall(  String context,  Level level,  String message,  Object[] arguments,  Throwable throwable){
    this.level=level;
    this.context=context;
    this.message=message;
    this.arguments=arguments;
    this.throwable=throwable;
  }
  @Override public String toString(){
    StringBuilder builder=new StringBuilder("LogCall{");
    builder.append(context);
    builder.append(" ");
    builder.append(level);
    builder.append(", message=");
    if (message != null) {
      builder.append('\'').append(escapeJava(message)).append('\'');
    }
 else {
      builder.append("null");
    }
    builder.append(", arguments=");
    if (arguments != null) {
      builder.append("[");
      boolean first=true;
      for (      Object arg : arguments) {
        if (!first) {
          builder.append(',');
        }
        first=false;
        builder.append(escapeJava("" + arg));
      }
      builder.append("]");
    }
 else {
      builder.append("null");
    }
    builder.append(", throwable=");
    if (throwable != null) {
      builder.append('\'').append(escapeJava(throwable.toString())).append('\'');
    }
 else {
      builder.append("null");
    }
    builder.append("}");
    return builder.toString();
  }
  public String toLogLikeString(){
    String msg;
    if (arguments != null) {
      try {
        msg=format(message,arguments);
      }
 catch (      IllegalFormatException e) {
        msg=format("IllegalFormat{message: \"%s\", arguments: %s}",message,Arrays.toString(arguments));
      }
    }
 else {
      msg=message;
    }
    return format("%s @ %s: %s",level,context,msg);
  }
}
