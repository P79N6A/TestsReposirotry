@RunWith(Parameterized.class) public class FusionIndexPopulatorTest {
  private IndexPopulator[] alivePopulators;
  private EnumMap<IndexSlot,IndexPopulator> populators;
  private FusionIndexPopulator fusionIndexPopulator;
  private final long indexId=8;
  private final DropAction dropAction=mock(DropAction.class);
  @Parameterized.Parameters(name="{0}") public static FusionVersion[] versions(){
    return new FusionVersion[]{v00,v10,v20};
  }
  @Parameterized.Parameter public static FusionVersion fusionVersion;
  @Before public void setup(){
    initiateMocks();
  }
  private void initiateMocks(){
    IndexSlot[] aliveSlots=fusionVersion.aliveSlots();
    populators=new EnumMap<>(IndexSlot.class);
    fill(populators,IndexPopulator.EMPTY);
    alivePopulators=new IndexPopulator[aliveSlots.length];
    for (int i=0; i < aliveSlots.length; i++) {
      IndexPopulator mock=mock(IndexPopulator.class);
      alivePopulators[i]=mock;
switch (aliveSlots[i]) {
case STRING:
        populators.put(STRING,mock);
      break;
case NUMBER:
    populators.put(NUMBER,mock);
  break;
case SPATIAL:
populators.put(SPATIAL,mock);
break;
case TEMPORAL:
populators.put(TEMPORAL,mock);
break;
case LUCENE:
populators.put(LUCENE,mock);
break;
default :
throw new RuntimeException();
}
}
fusionIndexPopulator=new FusionIndexPopulator(fusionVersion.slotSelector(),new InstanceSelector<>(populators),indexId,dropAction,false);
}
private void resetMocks(){
for (IndexPopulator alivePopulator : alivePopulators) {
reset(alivePopulator);
}
}
@Test public void createMustCreateAll() throws Exception {
fusionIndexPopulator.create();
for (IndexPopulator alivePopulator : alivePopulators) {
verify(alivePopulator,times(1)).create();
}
}
@Test public void createRemoveAnyLeftOversThatWasThereInIndexDirectoryBeforePopulation() throws IOException {
fusionIndexPopulator.create();
verify(dropAction).drop(indexId,false);
}
@Test public void createMustThrowIfAnyThrow() throws Exception {
for (IndexPopulator alivePopulator : alivePopulators) {
UncheckedIOException failure=new UncheckedIOException(new IOException("fail"));
doThrow(failure).when(alivePopulator).create();
verifyCallFail(failure,() -> {
fusionIndexPopulator.create();
return null;
}
);
doAnswer(invocation -> null).when(alivePopulator).create();
}
}
@Test public void dropMustDropAll(){
fusionIndexPopulator.drop();
for (IndexPopulator alivePopulator : alivePopulators) {
verify(alivePopulator,times(1)).drop();
}
verify(dropAction).drop(indexId);
}
@Test public void dropMustThrowIfAnyDropThrow(){
for (IndexPopulator alivePopulator : alivePopulators) {
UncheckedIOException failure=new UncheckedIOException(new IOException("fail"));
doThrow(failure).when(alivePopulator).drop();
verifyCallFail(failure,() -> {
fusionIndexPopulator.drop();
return null;
}
);
doAnswer(invocation -> null).when(alivePopulator).drop();
}
}
@Test public void addMustSelectCorrectPopulator() throws Exception {
EnumMap<IndexSlot,Value[]> values=FusionIndexTestHelp.valuesByGroup();
Value[] allValues=FusionIndexTestHelp.allValues();
for (IndexSlot slot : IndexSlot.values()) {
for (Value value : values.get(slot)) {
verifyAddWithCorrectPopulator(orLucene(populators.get(slot)),value);
}
}
for (Value firstValue : allValues) {
for (Value secondValue : allValues) {
verifyAddWithCorrectPopulator(populators.get(LUCENE),firstValue,secondValue);
}
}
}
private void verifyAddWithCorrectPopulator(IndexPopulator correctPopulator,Value... numberValues) throws IndexEntryConflictException, IOException {
Collection<IndexEntryUpdate<LabelSchemaDescriptor>> update=Collections.singletonList(add(numberValues));
fusionIndexPopulator.add(update);
verify(correctPopulator,times(1)).add(update);
for (IndexPopulator alivePopulator : alivePopulators) {
if (alivePopulator != correctPopulator) {
verify(alivePopulator,never()).add(update);
}
}
}
@Test public void verifyDeferredConstraintsMustThrowIfAnyThrow() throws Exception {
for (IndexPopulator alivePopulator : alivePopulators) {
IndexEntryConflictException failure=mock(IndexEntryConflictException.class);
doThrow(failure).when(alivePopulator).verifyDeferredConstraints(any());
verifyCallFail(failure,() -> {
fusionIndexPopulator.verifyDeferredConstraints(null);
return null;
}
);
doAnswer(invocation -> null).when(alivePopulator).verifyDeferredConstraints(any());
}
}
@Test public void successfulCloseMustCloseAll() throws Exception {
closeAndVerifyPropagation(true);
}
@Test public void unsuccessfulCloseMustCloseAll() throws Exception {
closeAndVerifyPropagation(false);
}
private void closeAndVerifyPropagation(boolean populationCompletedSuccessfully) throws IOException {
fusionIndexPopulator.close(populationCompletedSuccessfully);
for (IndexPopulator alivePopulator : alivePopulators) {
verify(alivePopulator,times(1)).close(populationCompletedSuccessfully);
}
}
@Test public void closeMustThrowIfCloseAnyThrow() throws Exception {
for (IndexSlot aliveSlot : fusionVersion.aliveSlots()) {
UncheckedIOException failure=new UncheckedIOException(new IOException("fail"));
doThrow(failure).when(populators.get(aliveSlot)).close(anyBoolean());
verifyCallFail(failure,() -> {
fusionIndexPopulator.close(anyBoolean());
return null;
}
);
initiateMocks();
}
}
private void verifyOtherCloseOnThrow(IndexPopulator throwingPopulator) throws Exception {
UncheckedIOException failure=new UncheckedIOException(new IOException("fail"));
doThrow(failure).when(throwingPopulator).close(anyBoolean());
try {
fusionIndexPopulator.close(true);
fail("Should have failed");
}
 catch (UncheckedIOException ignore) {
}
for (IndexPopulator alivePopulator : alivePopulators) {
verify(alivePopulator,times(1)).close(true);
}
}
@Test public void closeMustCloseOthersIfAnyThrow() throws Exception {
for (IndexSlot throwingSlot : fusionVersion.aliveSlots()) {
verifyOtherCloseOnThrow(populators.get(throwingSlot));
initiateMocks();
}
}
@Test public void closeMustThrowIfAllThrow() throws Exception {
List<UncheckedIOException> failures=new ArrayList<>();
for (IndexPopulator alivePopulator : alivePopulators) {
UncheckedIOException failure=new UncheckedIOException(new IOException("FAILURE[" + alivePopulator + "]"));
failures.add(failure);
doThrow(failure).when(alivePopulator).close(anyBoolean());
}
try {
fusionIndexPopulator.close(anyBoolean());
fail("Should have failed");
}
 catch (UncheckedIOException e) {
if (!failures.contains(e)) {
fail("Thrown exception didn't match any of the expected failures: " + failures);
}
}
}
@Test public void markAsFailedMustMarkAll() throws Exception {
String failureMessage="failure";
fusionIndexPopulator.markAsFailed(failureMessage);
for (IndexPopulator alivePopulator : alivePopulators) {
verify(alivePopulator,times(1)).markAsFailed(failureMessage);
}
}
@Test public void markAsFailedMustThrowIfAnyThrow() throws Exception {
for (IndexPopulator alivePopulator : alivePopulators) {
UncheckedIOException failure=new UncheckedIOException(new IOException("fail"));
doThrow(failure).when(alivePopulator).markAsFailed(anyString());
verifyCallFail(failure,() -> {
fusionIndexPopulator.markAsFailed(anyString());
return null;
}
);
doAnswer(invocation -> null).when(alivePopulator).markAsFailed(anyString());
}
}
@Test public void shouldIncludeSampleOnCorrectPopulator(){
EnumMap<IndexSlot,Value[]> values=FusionIndexTestHelp.valuesByGroup();
for (IndexSlot activeSlot : fusionVersion.aliveSlots()) {
verifySampleToCorrectPopulator(values.get(activeSlot),populators.get(activeSlot));
}
}
private void verifySampleToCorrectPopulator(Value[] values,IndexPopulator populator){
for (Value value : values) {
IndexEntryUpdate<LabelSchemaDescriptor> update=add(value);
fusionIndexPopulator.includeSample(update);
verify(populator).includeSample(update);
reset(populator);
}
}
private IndexPopulator orLucene(IndexPopulator populator){
return populator != IndexPopulator.EMPTY ? populator : populators.get(LUCENE);
}
}
