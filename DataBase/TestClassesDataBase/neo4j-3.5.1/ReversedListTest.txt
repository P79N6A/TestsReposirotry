class ReversedListTest {
  @Test void shouldHandleEmptyList(){
    ListValue inner=EMPTY_LIST;
    ListValue reverse=inner.reverse();
    assertEquals(inner,reverse);
    assertEquals(inner.hashCode(),reverse.hashCode());
    assertArrayEquals(inner.asArray(),reverse.asArray());
  }
  @Test void shouldHandleSingleItemList(){
    ListValue inner=list(longValue(5L));
    ListValue reverse=inner.reverse();
    assertEquals(inner,reverse);
    assertEquals(inner.hashCode(),reverse.hashCode());
    assertArrayEquals(inner.asArray(),reverse.asArray());
  }
  @Test void shouldReverseList(){
    ListValue inner=list(longValue(5L),longValue(6L),longValue(7L));
    ListValue reverse=inner.reverse();
    ListValue expected=list(longValue(7L),longValue(6L),longValue(5L));
    assertEquals(expected,reverse);
    assertEquals(expected.hashCode(),reverse.hashCode());
    assertArrayEquals(expected.asArray(),reverse.asArray());
  }
}
