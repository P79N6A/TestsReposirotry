public class ReadAheadLogChannelTest {
  @Rule public final DefaultFileSystemRule fileSystemRule=new DefaultFileSystemRule();
  @Rule public final TestDirectory directory=TestDirectory.testDirectory();
  @Test public void shouldReadFromSingleChannel() throws Exception {
    File file=file(0);
    final byte byteValue=(byte)5;
    final short shortValue=(short)56;
    final int intValue=32145;
    final long longValue=5689456895869L;
    final float floatValue=12.12345f;
    final double doubleValue=3548.45748D;
    final byte[] byteArrayValue=new byte[]{1,2,3,4,5,6,7,8,9};
    writeSomeData(file,element -> {
      element.put(byteValue);
      element.putShort(shortValue);
      element.putInt(intValue);
      element.putLong(longValue);
      element.putFloat(floatValue);
      element.putDouble(doubleValue);
      element.put(byteArrayValue);
      return true;
    }
);
    StoreChannel storeChannel=fileSystemRule.get().open(file,OpenMode.READ);
    PhysicalLogVersionedStoreChannel versionedStoreChannel=new PhysicalLogVersionedStoreChannel(storeChannel,-1,(byte)-1);
    try (ReadAheadLogChannel channel=new ReadAheadLogChannel(versionedStoreChannel,NO_MORE_CHANNELS,16)){
      assertEquals(byteValue,channel.get());
      assertEquals(shortValue,channel.getShort());
      assertEquals(intValue,channel.getInt());
      assertEquals(longValue,channel.getLong());
      assertEquals(floatValue,channel.getFloat(),0.1f);
      assertEquals(doubleValue,channel.getDouble(),0.1d);
      byte[] bytes=new byte[byteArrayValue.length];
      channel.get(bytes,byteArrayValue.length);
      assertArrayEquals(byteArrayValue,bytes);
    }
   }
  @Test public void shouldReadFromMultipleChannels() throws Exception {
    writeSomeData(file(0),element -> {
      for (int i=0; i < 10; i++) {
        element.putLong(i);
      }
      return true;
    }
);
    writeSomeData(file(1),element -> {
      for (int i=10; i < 20; i++) {
        element.putLong(i);
      }
      return true;
    }
);
    StoreChannel storeChannel=fileSystemRule.get().open(file(0),OpenMode.READ);
    PhysicalLogVersionedStoreChannel versionedStoreChannel=new PhysicalLogVersionedStoreChannel(storeChannel,-1,(byte)-1);
    try (ReadAheadLogChannel channel=new ReadAheadLogChannel(versionedStoreChannel,new LogVersionBridge(){
      private boolean returned;
      @Override public LogVersionedStoreChannel next(      LogVersionedStoreChannel channel) throws IOException {
        if (!returned) {
          returned=true;
          channel.close();
          return new PhysicalLogVersionedStoreChannel(fileSystemRule.get().open(file(1),OpenMode.READ),-1,(byte)-1);
        }
        return channel;
      }
    }
,10)){
      for (long i=0; i < 20; i++) {
        assertEquals(i,channel.getLong());
      }
    }
   }
  private void writeSomeData(  File file,  Visitor<ByteBuffer,IOException> visitor) throws IOException {
    try (StoreChannel channel=fileSystemRule.get().open(file,OpenMode.READ_WRITE)){
      ByteBuffer buffer=ByteBuffer.allocate(1024);
      visitor.visit(buffer);
      buffer.flip();
      channel.write(buffer);
    }
   }
  private File file(  int index){
    return new File(directory.directory(),"" + index);
  }
}
