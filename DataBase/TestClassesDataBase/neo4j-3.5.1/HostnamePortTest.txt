class HostnamePortTest {
  @Test void testHostnameOnly(){
    HostnamePort hostnamePort=new HostnamePort("myhost");
    assertThat(hostnamePort.getHost(),equalTo("myhost"));
    assertThat(hostnamePort.getPort(),equalTo(0));
    assertThat(hostnamePort.getPorts(),equalTo(new int[]{0,0}));
  }
  @Test void testHostnamePort(){
    HostnamePort hostnamePort=new HostnamePort("myhost:1234");
    assertThat(hostnamePort.getHost(),equalTo("myhost"));
    assertThat(hostnamePort.getPort(),equalTo(1234));
    assertThat(hostnamePort.getPorts(),equalTo(new int[]{1234,1234}));
  }
  @Test void testHostnamePortRange(){
    HostnamePort hostnamePort=new HostnamePort("myhost:1234-1243");
    assertThat(hostnamePort.getHost(),equalTo("myhost"));
    assertThat(hostnamePort.getPort(),equalTo(1234));
    assertThat(hostnamePort.getPorts(),equalTo(new int[]{1234,1243}));
  }
  @Test void testHostnamePortRangeInversed(){
    HostnamePort hostnamePort=new HostnamePort("myhost:1243-1234");
    assertThat(hostnamePort.getHost(),equalTo("myhost"));
    assertThat(hostnamePort.getPort(),equalTo(1243));
    assertThat(hostnamePort.getPorts(),equalTo(new int[]{1243,1234}));
  }
  @Test void testSinglePortOnly(){
    HostnamePort hostnamePort=new HostnamePort(":1234");
    assertNull(hostnamePort.getHost());
    assertThat(hostnamePort.getPort(),equalTo(1234));
    assertThat(hostnamePort.getPorts(),equalTo(new int[]{1234,1234}));
  }
  @Test void testPortRangeOnly(){
    HostnamePort hostnamePort=new HostnamePort(":1230-1240");
    assertNull(hostnamePort.getHost());
    assertThat(hostnamePort.getPort(),equalTo(1230));
    assertThat(hostnamePort.getPorts(),equalTo(new int[]{1230,1240}));
  }
  @Test void testDefaultHost(){
    HostnamePort hostnamePort=new HostnamePort(":1234");
    assertThat(hostnamePort.getHost("1.2.3.4"),equalTo("1.2.3.4"));
  }
  @Test void testGetHostAddress() throws Exception {
    String hostName=InetAddress.getLocalHost().getHostName();
    assertThat(HostnamePort.getHostAddress(null,"default"),equalTo("default"));
    assertThat(HostnamePort.getHostAddress(hostName,"default"),equalTo(hostName));
  }
  @Test void testGetHostAddressUnknown(){
    String unknownHost="unknownHost";
    assertThrows(UnknownHostException.class,() -> InetAddress.getByName(unknownHost));
    assertThat(HostnamePort.getHostAddress(unknownHost,"default"),equalTo(unknownHost));
  }
  @Test void testMatchesUnknownHosts() throws Exception {
    String knownHost=InetAddress.getLocalHost().getHostName();
    String unknownHost1="unknownHost1";
    String unknownHost2="unknownHost2";
    assertThrows(UnknownHostException.class,() -> InetAddress.getByName(unknownHost1));
    assertThrows(UnknownHostException.class,() -> InetAddress.getByName(unknownHost2));
    HostnamePort hostnamePortSinglePort=new HostnamePort(unknownHost1 + ":1234");
    HostnamePort hostnamePortWithRange=new HostnamePort(unknownHost1 + ":1234-1236");
    assertTrue(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost1 + ":1234")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost1 + ":1235")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost2 + ":1234")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost2 + ":1235")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost1 + "")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost2 + "")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://1.2.3.4:1234")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + knownHost + ":1234")));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost1 + ":1234")));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost1 + ":1235")));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost1 + ":1236")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost2 + ":1234")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost2 + ":1235")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost1 + ":1233")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost1 + ":1237")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost1)));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost2)));
  }
  @Test void testMatchesKnownHostWithIP() throws Exception {
    String hostname1=InetAddress.getLocalHost().getHostName().replace('.','-');
    String host1=InetAddress.getLocalHost().getHostAddress();
    StringBuilder host2=new StringBuilder();
    String[] host1Parts=host1.split("\\.");
    for (    String part : host1Parts) {
      int partnum=Integer.parseInt(part);
      host2.append(++partnum % 256 + ".");
    }
    host2.deleteCharAt(host2.length() - 1);
    HostnamePort hostnamePortSinglePort=new HostnamePort(hostname1 + ":1234");
    HostnamePort hostnamePortWithRange=new HostnamePort(hostname1 + ":1234-1236");
    assertTrue(hostnamePortSinglePort.matches(URI.create("ha://" + hostname1 + ":1234")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + hostname1 + ":1235")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + host2 + ":1234")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + host2 + ":1235")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + host1)));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + host2)));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + hostname1 + ":1234")));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + hostname1 + ":1235")));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + hostname1 + ":1236")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + host2 + ":1234")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + host2 + ":1235")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + hostname1 + ":1233")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + hostname1 + ":1237")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + hostname1)));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + host2)));
  }
  @Test void testMatchesIPWithHost() throws Exception {
    String hostname1=InetAddress.getLocalHost().getHostName();
    String host1=InetAddress.getLocalHost().getHostAddress();
    String hostname2="neo4j.org";
    assertDoesNotThrow(() -> InetAddress.getByName(hostname2));
    assumeFalse(hostname1.equals(hostname2));
    HostnamePort hostnamePortSinglePort=new HostnamePort(host1 + ":1234");
    HostnamePort hostnamePortWithRange=new HostnamePort(host1 + ":1234-1236");
    assertTrue(hostnamePortSinglePort.matches(URI.create("ha://" + host1 + ":1234")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + host1 + ":1235")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + hostname2 + ":1234")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + hostname2 + ":1235")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + host1)));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + hostname2)));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + host1 + ":1234")));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + host1 + ":1235")));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + host1 + ":1236")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + hostname2 + ":1234")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + hostname2 + ":1235")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + host1 + ":1233")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + host1 + ":1237")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + host1)));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + hostname2)));
  }
  @Test void testMatchesIPWithHostUnknown() throws Exception {
    String unknownHost="unknownHost";
    assertThrows(UnknownHostException.class,() -> InetAddress.getByName(unknownHost));
    String host1=InetAddress.getLocalHost().getHostAddress();
    HostnamePort hostnamePortSinglePort=new HostnamePort(host1 + ":1234");
    HostnamePort hostnamePortWithRange=new HostnamePort(host1 + ":1234-1236");
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost + ":1234")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost + ":1234")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost + ":1235")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost + ":1236")));
  }
  @Test void testMatchesKnownHostWithHost() throws Exception {
    String host1=InetAddress.getLocalHost().getHostName().replace('.','-');
    String host2="neo4j.org";
    assertDoesNotThrow(() -> InetAddress.getByName(host2));
    assumeFalse(host1.equals(host2));
    HostnamePort hostnamePortSinglePort=new HostnamePort(host1 + ":1234");
    HostnamePort hostnamePortWithRange=new HostnamePort(host1 + ":1234-1236");
    assertTrue(hostnamePortSinglePort.matches(URI.create("ha://" + host1 + ":1234")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + host1 + ":1235")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + host2 + ":1234")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + host2 + ":1235")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + host1)));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + host2)));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + host1 + ":1234")));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + host1 + ":1235")));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://" + host1 + ":1236")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + host2 + ":1234")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + host2 + ":1235")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + host1 + ":1233")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + host1 + ":1237")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + host1)));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + host2)));
  }
  @Test void testMatchesKnownHostWithHostUnknown() throws Exception {
    String host1=InetAddress.getLocalHost().getHostName();
    String unknownHost="unknownHost";
    assertThrows(UnknownHostException.class,() -> InetAddress.getByName(unknownHost));
    HostnamePort hostnamePortSinglePort=new HostnamePort(host1 + ":1234");
    HostnamePort hostnamePortWithRange=new HostnamePort(host1 + ":1234-1236");
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost + ":1234")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost + ":1234")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost + ":1235")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://" + unknownHost + ":1236")));
  }
  @Test void testMatchesIP(){
    HostnamePort hostnamePortSinglePort=new HostnamePort("1.2.3.4:1234");
    HostnamePort hostnamePortWithRange=new HostnamePort("1.2.3.4:1234-1236");
    assertTrue(hostnamePortSinglePort.matches(URI.create("ha://1.2.3.4:1234")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://1.2.3.4:1235")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://5.6.7.8:1234")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://5.6.7.8:1235")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://1.2.3.4")));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://5.6.7.8")));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://1.2.3.4:1234")));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://1.2.3.4:1235")));
    assertTrue(hostnamePortWithRange.matches(URI.create("ha://1.2.3.4:1236")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://5.6.7.8:1234")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://5.6.7.8:1235")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://1.2.3.4:1233")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://1.2.3.4:1237")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://1.2.3.4")));
    assertFalse(hostnamePortWithRange.matches(URI.create("ha://5.6.7.8")));
  }
  @Test void testMatchesNullHostWithUnknownHost(){
    HostnamePort hostnamePortSinglePort=new HostnamePort(":1234");
    String unknownHost="unknownHost";
    assertThrows(UnknownHostException.class,() -> InetAddress.getByName(unknownHost));
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + unknownHost + ":1234")));
  }
  @Test void testMatchesNullHostWithIP() throws Exception {
    HostnamePort hostnamePortSinglePort=new HostnamePort(":1234");
    String host1IP=InetAddress.getLocalHost().getHostAddress();
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + host1IP + ":1234")));
  }
  @Test void testMatchesNullHostWithKnownHost() throws Exception {
    HostnamePort hostnamePortSinglePort=new HostnamePort(":1234");
    String host1=InetAddress.getLocalHost().getHostName();
    assertFalse(hostnamePortSinglePort.matches(URI.create("ha://" + host1 + ":1234")));
  }
  @Test void testIPv6Address(){
    HostnamePort hostnamePort=new HostnamePort("[2001:cdba:0:0:0:0:3257:9652]");
    assertThat(hostnamePort.getHost(null),equalTo("[2001:cdba:0:0:0:0:3257:9652]"));
    assertThat(hostnamePort.getPort(),equalTo(0));
    assertThat(hostnamePort.getPorts(),equalTo(new int[]{0,0}));
  }
  @Test void testIPv6AddressWithSchemeAndPort(){
    HostnamePort hostnamePort=new HostnamePort("foo://[ff02::1:1]:9191");
    assertThat(hostnamePort.getHost(null),equalTo("[ff02::1:1]"));
    assertThat(hostnamePort.getPort(),equalTo(9191));
    assertThat(hostnamePort.getPorts(),equalTo(new int[]{9191,9191}));
  }
  @Test void testIPv6Localhost(){
    HostnamePort hostnamePort=new HostnamePort("[::1]");
    assertThat(hostnamePort.getHost(null),equalTo("[::1]"));
    assertThat(hostnamePort.getPort(),equalTo(0));
    assertThat(hostnamePort.getPorts(),equalTo(new int[]{0,0}));
  }
  @Test void testIPv6LocalhostWithSchemeAndPort(){
    HostnamePort hostnamePort=new HostnamePort("foo://[::1]:6362");
    assertThat(hostnamePort.getHost(null),equalTo("[::1]"));
    assertThat(hostnamePort.getPort(),equalTo(6362));
    assertThat(hostnamePort.getPorts(),equalTo(new int[]{6362,6362}));
  }
}
