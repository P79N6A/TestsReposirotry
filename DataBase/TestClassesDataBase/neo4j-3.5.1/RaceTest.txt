/** 
 * Test of a test utility  {@link Race}.
 */
class RaceTest {
  @Test void shouldWaitForAllContestantsToComplete() throws Throwable {
    Race race=new Race();
    final AtomicInteger completed=new AtomicInteger();
    int count=5;
    race.addContestants(count,throwing(() -> {
      sleep(current().nextInt(100));
      completed.incrementAndGet();
    }
));
    race.go();
    assertEquals(count,completed.get());
  }
  @Test void shouldConsultEndCondition() throws Throwable {
    CallCountBooleanSupplier endCondition=new CallCountBooleanSupplier(100);
    Race race=new Race().withEndCondition(endCondition);
    race.addContestants(20,throwing(() -> sleep(10)));
    race.go();
    assertTrue(endCondition.callCount.get() >= 100);
  }
  @Test void shouldHaveMultipleEndConditions() throws Throwable {
    ControlledBooleanSupplier endCondition1=spy(new ControlledBooleanSupplier(false));
    ControlledBooleanSupplier endCondition2=spy(new ControlledBooleanSupplier(false));
    ControlledBooleanSupplier endCondition3=spy(new ControlledBooleanSupplier(false));
    Race race=new Race().withEndCondition(endCondition1,endCondition2,endCondition3);
    race.addContestant(() -> endCondition2.set(true));
    race.addContestants(3,Runnables.EMPTY_RUNNABLE);
    race.go();
    verify(endCondition1,atLeast(4)).getAsBoolean();
    verify(endCondition2,atLeast(4)).getAsBoolean();
  }
  @Test void shouldBreakOnError() throws Throwable {
    String error="Noooo";
    Race race=new Race();
    race.withEndCondition(() -> false);
    race.addContestant(() -> {
      throw new RuntimeException(error);
    }
);
    race.addContestants(3,() -> {
    }
);
    Exception exception=assertThrows(Exception.class,() -> race.go());
    assertEquals(error,exception.getMessage());
  }
public static class ControlledBooleanSupplier implements BooleanSupplier {
    private volatile boolean value;
    ControlledBooleanSupplier(    boolean initialValue){
      this.value=initialValue;
    }
    public void set(    boolean value){
      this.value=value;
    }
    @Override public boolean getAsBoolean(){
      return value;
    }
  }
public static class CallCountBooleanSupplier implements BooleanSupplier {
    private final int callCountTriggeringTrueEndCondition;
    private final AtomicInteger callCount=new AtomicInteger();
    CallCountBooleanSupplier(    int callCountTriggeringTrueEndCondition){
      this.callCountTriggeringTrueEndCondition=callCountTriggeringTrueEndCondition;
    }
    @Override public boolean getAsBoolean(){
      return callCount.incrementAndGet() >= callCountTriggeringTrueEndCondition;
    }
  }
}
