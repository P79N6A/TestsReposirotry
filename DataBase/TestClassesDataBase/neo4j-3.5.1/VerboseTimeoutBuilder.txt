/** 
 * Helper builder class of  {@link VerboseTimeout} test rule.
 */
public static class VerboseTimeoutBuilder extends Timeout.Builder {
  private TimeUnit timeUnit=TimeUnit.SECONDS;
  private long timeout;
  private List<FailureParameter<?>> additionalParameters=new ArrayList<>();
  private static Function<Object,String> toStringFunction(){
    return value -> value == null ? StringUtils.EMPTY : value.toString();
  }
  @Override public VerboseTimeoutBuilder withTimeout(  long timeout,  TimeUnit unit){
    this.timeout=timeout;
    this.timeUnit=unit;
    return this;
  }
  public <T>VerboseTimeoutBuilder describeOnFailure(  T entity,  Function<T,String> descriptor){
    additionalParameters.add(new FailureParameter<>(entity,descriptor));
    return this;
  }
  public <T>VerboseTimeoutBuilder describeOnFailure(  T entity){
    return describeOnFailure(entity,toStringFunction());
  }
  @Override public VerboseTimeout build(){
    return new VerboseTimeout(this);
  }
  @Override protected long getTimeout(){
    return timeout;
  }
  @Override protected TimeUnit getTimeUnit(){
    return timeUnit;
  }
  public List<FailureParameter<?>> getAdditionalParameters(){
    return additionalParameters;
  }
private class FailureParameter<T> {
    private final T entity;
    private final Function<T,String> descriptor;
    FailureParameter(    T entity,    Function<T,String> descriptor){
      this.entity=entity;
      this.descriptor=descriptor;
    }
    String describe(){
      return descriptor.apply(entity);
    }
  }
}
