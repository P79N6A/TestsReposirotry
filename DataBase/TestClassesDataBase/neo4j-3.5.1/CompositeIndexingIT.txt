@RunWith(Parameterized.class) public class CompositeIndexingIT {
  private static final int LABEL_ID=1;
  @ClassRule public static ImpermanentDatabaseRule dbRule=new ImpermanentDatabaseRule();
  @Rule public final TestName testName=new TestName();
  @Rule public Timeout globalTimeout=Timeout.seconds(200);
  private final IndexDescriptor index;
  private GraphDatabaseAPI graphDatabaseAPI;
  @Before public void setup() throws Exception {
    graphDatabaseAPI=dbRule.getGraphDatabaseAPI();
    try (Transaction tx=graphDatabaseAPI.beginTx()){
      KernelTransaction ktx=ktx();
      if (index.type() == UNIQUE) {
        ktx.schemaWrite().uniquePropertyConstraintCreate(index.schema());
      }
 else {
        ktx.schemaWrite().indexCreate(index.schema());
      }
      tx.success();
    }
     try (Transaction ignore=graphDatabaseAPI.beginTx()){
      KernelTransaction ktx=ktx();
      while (ktx.schemaRead().indexGetState(index) != InternalIndexState.ONLINE) {
        Thread.sleep(10);
      }
    }
   }
  @After public void clean() throws Exception {
    try (Transaction tx=graphDatabaseAPI.beginTx()){
      KernelTransaction ktx=ktx();
      if (index.type() == UNIQUE) {
        ktx.schemaWrite().constraintDrop(ConstraintDescriptorFactory.uniqueForSchema(index.schema()));
      }
 else {
        ktx.schemaWrite().indexDrop(index);
      }
      tx.success();
    }
     try (Transaction tx=graphDatabaseAPI.beginTx()){
      for (      Node node : graphDatabaseAPI.getAllNodes()) {
        node.delete();
      }
      tx.success();
    }
   }
  @Parameterized.Parameters(name="Index: {0}") public static Iterable<Object[]> parameterValues(){
    return Arrays.asList(Iterators.array(TestIndexDescriptorFactory.forLabel(LABEL_ID,1)),Iterators.array(TestIndexDescriptorFactory.forLabel(LABEL_ID,1,2)),Iterators.array(TestIndexDescriptorFactory.forLabel(LABEL_ID,1,2,3,4)),Iterators.array(TestIndexDescriptorFactory.forLabel(LABEL_ID,1,2,3,4,5,6,7)),Iterators.array(TestIndexDescriptorFactory.uniqueForLabel(LABEL_ID,1)),Iterators.array(TestIndexDescriptorFactory.uniqueForLabel(LABEL_ID,1,2)),Iterators.array(TestIndexDescriptorFactory.uniqueForLabel(LABEL_ID,1,2,3,4,5,6,7)));
  }
  public CompositeIndexingIT(  IndexDescriptor nodeDescriptor){
    this.index=nodeDescriptor;
  }
  @Test public void shouldSeeNodeAddedByPropertyToIndexInTranslation() throws Exception {
    try (Transaction ignore=graphDatabaseAPI.beginTx()){
      KernelTransaction ktx=ktx();
      Write write=ktx.dataWrite();
      long nodeID=write.nodeCreate();
      write.nodeAddLabel(nodeID,LABEL_ID);
      for (      int propID : index.schema().getPropertyIds()) {
        write.nodeSetProperty(nodeID,propID,Values.intValue(propID));
      }
      try (NodeValueIndexCursor cursor=seek(ktx)){
        assertTrue(cursor.next());
        assertThat(cursor.nodeReference(),equalTo(nodeID));
        assertFalse(cursor.next());
      }
     }
   }
  @Test public void shouldSeeNodeAddedToByLabelIndexInTransaction() throws Exception {
    try (Transaction ignore=graphDatabaseAPI.beginTx()){
      KernelTransaction ktx=ktx();
      Write write=ktx.dataWrite();
      long nodeID=write.nodeCreate();
      for (      int propID : index.schema().getPropertyIds()) {
        write.nodeSetProperty(nodeID,propID,Values.intValue(propID));
      }
      write.nodeAddLabel(nodeID,LABEL_ID);
      try (NodeValueIndexCursor cursor=seek(ktx)){
        assertTrue(cursor.next());
        assertThat(cursor.nodeReference(),equalTo(nodeID));
        assertFalse(cursor.next());
      }
     }
   }
  @Test public void shouldNotSeeNodeThatWasDeletedInTransaction() throws Exception {
    long nodeID=createNode();
    try (Transaction ignore=graphDatabaseAPI.beginTx()){
      KernelTransaction ktx=ktx();
      ktx.dataWrite().nodeDelete(nodeID);
      try (NodeValueIndexCursor cursor=seek(ktx)){
        assertFalse(cursor.next());
      }
     }
   }
  @Test public void shouldNotSeeNodeThatHasItsLabelRemovedInTransaction() throws Exception {
    long nodeID=createNode();
    try (Transaction ignore=graphDatabaseAPI.beginTx()){
      KernelTransaction ktx=ktx();
      ktx.dataWrite().nodeRemoveLabel(nodeID,LABEL_ID);
      try (NodeValueIndexCursor cursor=seek(ktx)){
        assertFalse(cursor.next());
      }
     }
   }
  @Test public void shouldNotSeeNodeThatHasAPropertyRemovedInTransaction() throws Exception {
    long nodeID=createNode();
    try (Transaction ignore=graphDatabaseAPI.beginTx()){
      KernelTransaction ktx=ktx();
      ktx.dataWrite().nodeRemoveProperty(nodeID,index.schema().getPropertyIds()[0]);
      try (NodeValueIndexCursor cursor=seek(ktx)){
        assertFalse(cursor.next());
      }
     }
   }
  @Test public void shouldSeeAllNodesAddedInTransaction() throws Exception {
    if (index.type() != UNIQUE) {
      try (Transaction ignore=graphDatabaseAPI.beginTx()){
        long nodeID1=createNode();
        long nodeID2=createNode();
        long nodeID3=createNode();
        KernelTransaction ktx=ktx();
        Set<Long> result=new HashSet<>();
        try (NodeValueIndexCursor cursor=seek(ktx)){
          while (cursor.next()) {
            result.add(cursor.nodeReference());
          }
        }
         assertThat(result,containsInAnyOrder(nodeID1,nodeID2,nodeID3));
      }
     }
  }
  @Test public void shouldSeeAllNodesAddedBeforeTransaction() throws Exception {
    if (index.type() != UNIQUE) {
      long nodeID1=createNode();
      long nodeID2=createNode();
      long nodeID3=createNode();
      try (Transaction ignore=graphDatabaseAPI.beginTx()){
        KernelTransaction ktx=ktx();
        Set<Long> result=new HashSet<>();
        try (NodeValueIndexCursor cursor=seek(ktx)){
          while (cursor.next()) {
            result.add(cursor.nodeReference());
          }
        }
         assertThat(result,containsInAnyOrder(nodeID1,nodeID2,nodeID3));
      }
     }
  }
  @Test public void shouldNotSeeNodesLackingOneProperty() throws Exception {
    long nodeID1=createNode();
    try (Transaction ignore=graphDatabaseAPI.beginTx()){
      KernelTransaction ktx=ktx();
      Write write=ktx.dataWrite();
      long irrelevantNodeID=write.nodeCreate();
      write.nodeAddLabel(irrelevantNodeID,LABEL_ID);
      int[] propertyIds=index.schema().getPropertyIds();
      for (int i=0; i < propertyIds.length - 1; i++) {
        int propID=propertyIds[i];
        write.nodeSetProperty(irrelevantNodeID,propID,Values.intValue(propID));
      }
      Set<Long> result=new HashSet<>();
      try (NodeValueIndexCursor cursor=seek(ktx)){
        while (cursor.next()) {
          result.add(cursor.nodeReference());
        }
      }
       assertThat(result,contains(nodeID1));
    }
   }
  private long createNode() throws KernelException {
    long nodeID;
    try (Transaction tx=graphDatabaseAPI.beginTx()){
      KernelTransaction ktx=ktx();
      Write write=ktx.dataWrite();
      nodeID=write.nodeCreate();
      write.nodeAddLabel(nodeID,LABEL_ID);
      for (      int propID : index.schema().getPropertyIds()) {
        write.nodeSetProperty(nodeID,propID,Values.intValue(propID));
      }
      tx.success();
    }
     return nodeID;
  }
  private NodeValueIndexCursor seek(  KernelTransaction transaction) throws KernelException {
    NodeValueIndexCursor cursor=transaction.cursors().allocateNodeValueIndexCursor();
    transaction.dataRead().nodeIndexSeek(index,cursor,IndexOrder.NONE,false,exactQuery());
    return cursor;
  }
  private IndexQuery[] exactQuery(){
    int[] propertyIds=index.schema().getPropertyIds();
    IndexQuery[] query=new IndexQuery[propertyIds.length];
    for (int i=0; i < query.length; i++) {
      int propID=propertyIds[i];
      query[i]=IndexQuery.exact(propID,Values.of(propID));
    }
    return query;
  }
  private KernelTransaction ktx(){
    return graphDatabaseAPI.getDependencyResolver().resolveDependency(ThreadToStatementContextBridge.class).getKernelTransactionBoundToThisThread(true);
  }
}
