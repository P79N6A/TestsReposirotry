public class ListenAddressSettingsTest {
  private static Setting<ListenSocketAddress> legacy_address_setting=listenAddress("address",1234);
  private static Setting<ListenSocketAddress> listen_address_setting=legacyFallback(legacy_address_setting,listenAddress("listen_address",1234));
  @Test public void shouldParseExplicitSettingValueWhenProvided(){
    Map<String,String> config=stringMap(GraphDatabaseSettings.default_listen_address.name(),"server1.example.com",listen_address_setting.name(),"server1.internal:4000");
    ListenSocketAddress listenSocketAddress=listen_address_setting.apply(config::get);
    assertEquals("server1.internal",listenSocketAddress.getHostname());
    assertEquals(4000,listenSocketAddress.getPort());
  }
  @Test public void shouldCombineDefaultHostnameWithSettingSpecificPortWhenNoValueProvided(){
    Map<String,String> config=stringMap(GraphDatabaseSettings.default_listen_address.name(),"server1.example.com");
    ListenSocketAddress listenSocketAddress=listen_address_setting.apply(config::get);
    assertEquals("server1.example.com",listenSocketAddress.getHostname());
    assertEquals(1234,listenSocketAddress.getPort());
  }
  @Test public void shouldCombineDefaultHostnameWithExplicitPortWhenOnlyAPortProvided(){
    Map<String,String> config=stringMap(GraphDatabaseSettings.default_listen_address.name(),"server1.example.com",listen_address_setting.name(),":4000");
    ListenSocketAddress listenSocketAddress=listen_address_setting.apply(config::get);
    assertEquals("server1.example.com",listenSocketAddress.getHostname());
    assertEquals(4000,listenSocketAddress.getPort());
  }
}
