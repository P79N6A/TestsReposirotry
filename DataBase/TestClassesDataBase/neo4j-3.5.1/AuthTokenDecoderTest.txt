public abstract class AuthTokenDecoderTest {
  protected abstract void testShouldDecodeAuthToken(  Map<String,Object> authToken) throws Exception ;
  protected abstract void testShouldFailToDecodeAuthToken(  Map<String,Object> authToken,  String expectedErrorMessage) throws Exception ;
  @Test void shouldDecodeAuthTokenWithStringCredentials() throws Exception {
    testShouldDecodeAuthToken(authTokenMapWith(AuthToken.CREDENTIALS,"password"));
  }
  @Test void shouldDecodeAuthTokenWithEmptyStringCredentials() throws Exception {
    testShouldDecodeAuthToken(authTokenMapWith(AuthToken.CREDENTIALS,""));
  }
  @Test void shouldDecodeAuthTokenWithNullCredentials() throws Exception {
    testShouldDecodeAuthToken(authTokenMapWith(AuthToken.CREDENTIALS,null));
  }
  @Test void shouldDecodeAuthTokenWithStringNewCredentials() throws Exception {
    testShouldDecodeAuthToken(authTokenMapWith(AuthToken.NEW_CREDENTIALS,"password"));
  }
  @Test void shouldDecodeAuthTokenWithEmptyStringNewCredentials() throws Exception {
    testShouldDecodeAuthToken(authTokenMapWith(AuthToken.NEW_CREDENTIALS,""));
  }
  @Test void shouldDecodeAuthTokenWithNullNewCredentials() throws Exception {
    testShouldDecodeAuthToken(authTokenMapWith(AuthToken.NEW_CREDENTIALS,null));
  }
  @Test void shouldFailToDecodeAuthTokenWithCredentialsOfUnsupportedTypes() throws Exception {
    for (    Object value : valuesWithInvalidTypes) {
      testShouldFailToDecodeAuthToken(authTokenMapWith(AuthToken.CREDENTIALS,value),"INIT message authentication token field '" + AuthToken.CREDENTIALS + "' should be a UTF-8 encoded string");
    }
  }
  @Test void shouldFailToDecodeAuthTokenWithNewCredentialsOfUnsupportedType() throws Exception {
    for (    Object value : valuesWithInvalidTypes) {
      testShouldFailToDecodeAuthToken(authTokenMapWith(AuthToken.NEW_CREDENTIALS,value),"INIT message authentication token field '" + AuthToken.NEW_CREDENTIALS + "' should be a UTF-8 encoded string");
    }
  }
  private static Map<String,Object> authTokenMapWith(  String fieldName,  Object fieldValue){
    return map(AuthToken.PRINCIPAL,"neo4j",fieldName,fieldValue);
  }
  private static Object[] valuesWithInvalidTypes={new char[]{'p','a','s','s'},Collections.emptyList(),Collections.emptyMap()};
}
