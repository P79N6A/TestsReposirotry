public class SessionRule implements TestRule {
  private GraphDatabaseAPI gdb;
  private BoltStateMachineFactoryImpl boltFactory;
  private LinkedList<BoltStateMachine> runningMachines=new LinkedList<>();
  private boolean authEnabled;
  @Override public Statement apply(  final Statement base,  Description description){
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        Map<Setting<?>,String> config=new HashMap<>();
        config.put(GraphDatabaseSettings.auth_enabled,Boolean.toString(authEnabled));
        gdb=(GraphDatabaseAPI)new TestGraphDatabaseFactory().newImpermanentDatabase(config);
        DependencyResolver resolver=gdb.getDependencyResolver();
        DatabaseManager databaseManager=resolver.resolveDependency(DatabaseManager.class);
        Authentication authentication=authentication(resolver.resolveDependency(AuthManager.class),resolver.resolveDependency(UserManagerSupplier.class));
        boltFactory=new BoltStateMachineFactoryImpl(databaseManager,new UsageData(null),authentication,Clock.systemUTC(),Config.defaults(),NullLogService.getInstance());
        try {
          base.evaluate();
        }
  finally {
          try {
            if (runningMachines != null) {
              runningMachines.forEach(BoltStateMachine::close);
            }
          }
 catch (          Throwable e) {
            e.printStackTrace();
          }
          gdb.shutdown();
        }
      }
    }
;
  }
  private static Authentication authentication(  AuthManager authManager,  UserManagerSupplier userManagerSupplier){
    return new BasicAuthentication(authManager,userManagerSupplier);
  }
  BoltStateMachine newMachine(  BoltChannel boltChannel){
    return newMachine(BoltProtocolV1.VERSION,boltChannel);
  }
  public BoltStateMachine newMachine(  long version,  BoltChannel boltChannel){
    if (boltFactory == null) {
      throw new IllegalStateException("Cannot access test environment before test is running.");
    }
    BoltStateMachine machine=boltFactory.newStateMachine(version,boltChannel);
    runningMachines.add(machine);
    return machine;
  }
  SessionRule withAuthEnabled(  boolean authEnabled){
    this.authEnabled=authEnabled;
    return this;
  }
  public URL putTmpFile(  String prefix,  String suffix,  String contents) throws IOException {
    File tmpFile=File.createTempFile(prefix,suffix,null);
    tmpFile.deleteOnExit();
    try (PrintWriter out=new PrintWriter(tmpFile)){
      out.println(contents);
    }
     return tmpFile.toURI().toURL();
  }
  public GraphDatabaseAPI graph(){
    return gdb;
  }
  public long lastClosedTxId(){
    return gdb.getDependencyResolver().resolveDependency(TransactionIdStore.class).getLastClosedTransactionId();
  }
}
