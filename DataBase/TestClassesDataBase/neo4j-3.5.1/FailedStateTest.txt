class FailedStateTest {
  private final FailedState state=new FailedState();
  private final BoltStateMachineState readyState=mock(BoltStateMachineState.class);
  private final BoltStateMachineState interruptedState=mock(BoltStateMachineState.class);
  private final StateMachineContext context=mock(StateMachineContext.class);
  private final MutableConnectionState connectionState=new MutableConnectionState();
  @BeforeEach void setUp(){
    state.setReadyState(readyState);
    state.setInterruptedState(interruptedState);
    when(context.connectionState()).thenReturn(connectionState);
  }
  @Test void shouldThrowWhenNotInitialized() throws Exception {
    FailedState state=new FailedState();
    assertThrows(IllegalStateException.class,() -> state.process(AckFailureMessage.INSTANCE,context));
    state.setReadyState(readyState);
    assertThrows(IllegalStateException.class,() -> state.process(AckFailureMessage.INSTANCE,context));
    state.setReadyState(null);
    state.setInterruptedState(interruptedState);
    assertThrows(IllegalStateException.class,() -> state.process(AckFailureMessage.INSTANCE,context));
  }
  @Test void shouldProcessRunMessage() throws Exception {
    BoltStateMachineState newState=state.process(new RunMessage("RETURN 1",EMPTY_MAP),context);
    assertEquals(state,newState);
    assertTrue(connectionState.hasPendingIgnore());
  }
  @Test void shouldProcessPullAllMessage() throws Exception {
    BoltStateMachineState newState=state.process(PullAllMessage.INSTANCE,context);
    assertEquals(state,newState);
    assertTrue(connectionState.hasPendingIgnore());
  }
  @Test void shouldProcessDiscardAllMessage() throws Exception {
    BoltStateMachineState newState=state.process(DiscardAllMessage.INSTANCE,context);
    assertEquals(state,newState);
    assertTrue(connectionState.hasPendingIgnore());
  }
  @Test void shouldProcessAckFailureMessageWithPendingIgnore() throws Exception {
    connectionState.markIgnored();
    assertTrue(connectionState.hasPendingIgnore());
    BoltStateMachineState newState=state.process(AckFailureMessage.INSTANCE,context);
    assertEquals(readyState,newState);
    assertFalse(connectionState.hasPendingIgnore());
  }
  @Test void shouldProcessAckFailureMessageWithPendingError() throws Exception {
    Neo4jError error=Neo4jError.from(new RuntimeException());
    connectionState.markFailed(error);
    assertEquals(error,connectionState.getPendingError());
    BoltStateMachineState newState=state.process(AckFailureMessage.INSTANCE,context);
    assertEquals(readyState,newState);
    assertNull(connectionState.getPendingError());
  }
  @Test void shouldProcessResetMessageWithPerndingIgnore() throws Exception {
    when(context.resetMachine()).thenReturn(true);
    connectionState.markIgnored();
    assertTrue(connectionState.hasPendingIgnore());
    BoltStateMachineState newState=state.process(ResetMessage.INSTANCE,context);
    assertEquals(readyState,newState);
    assertFalse(connectionState.hasPendingIgnore());
  }
  @Test void shouldProcessResetMessageWithPerndingError() throws Exception {
    when(context.resetMachine()).thenReturn(true);
    Neo4jError error=Neo4jError.from(new RuntimeException());
    connectionState.markFailed(error);
    assertEquals(error,connectionState.getPendingError());
    BoltStateMachineState newState=state.process(ResetMessage.INSTANCE,context);
    assertEquals(readyState,newState);
    assertNull(connectionState.getPendingError());
  }
  @Test void shouldHandleResetMessageFailure() throws Exception {
    when(context.resetMachine()).thenReturn(false);
    BoltStateMachineState newState=state.process(ResetMessage.INSTANCE,context);
    assertEquals(state,newState);
  }
  @Test void shouldProcessInterruptMessage() throws Exception {
    BoltStateMachineState newState=state.process(InterruptSignal.INSTANCE,context);
    assertEquals(interruptedState,newState);
  }
  @Test void shouldNotProcessUnsupportedMessage() throws Exception {
    RequestMessage unsupportedMessage=mock(RequestMessage.class);
    BoltStateMachineState newState=state.process(unsupportedMessage,context);
    assertNull(newState);
  }
}
