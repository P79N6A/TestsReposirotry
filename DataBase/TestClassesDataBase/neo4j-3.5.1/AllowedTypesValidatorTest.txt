public class AllowedTypesValidatorTest {
  @Rule public CompilationRule compilation=new CompilationRule();
  private TypeMirrorTestUtils typeMirrorTestUtils;
  private Predicate<TypeMirror> validator;
  @Before public void prepare(){
    Types types=compilation.getTypes();
    Elements elements=compilation.getElements();
    TypeMirrorUtils typeMirrors=new TypeMirrorUtils(types,elements);
    typeMirrorTestUtils=new TypeMirrorTestUtils(compilation);
    validator=new AllowedTypesValidator(typeMirrors,types);
  }
  @Test public void unsupported_simple_type_is_invalid(){
    assertThat(validator.test(typeMirrorTestUtils.typeOf(CharSequence.class))).isFalse();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Thread.class))).isFalse();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Character.class))).isFalse();
  }
  @Test public void supported_simple_type_is_valid(){
    assertThat(validator.test(typeMirrorTestUtils.typeOf(BOOLEAN))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(LONG))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(DOUBLE))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Boolean.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Long.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Double.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(String.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Number.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Object.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Node.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Relationship.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Path.class))).isTrue();
  }
  @Test public void supported_list_type_is_valid(){
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,Boolean.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,Long.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,Double.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,String.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,Number.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,Object.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,Node.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,Relationship.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,Path.class))).isTrue();
  }
  @Test public void unsupported_list_type_is_invalid(){
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,CharSequence.class))).isFalse();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,Thread.class))).isFalse();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,Character.class))).isFalse();
  }
  @Test public void supported_recursive_list_type_is_valid(){
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,typeMirrorTestUtils.typeOf(List.class,Boolean.class)))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,typeMirrorTestUtils.typeOf(List.class,typeMirrorTestUtils.typeOf(List.class,Object.class))))).isTrue();
  }
  @Test public void unsupported_recursive_list_type_is_invalid(){
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,typeMirrorTestUtils.typeOf(List.class,CharSequence.class)))).isFalse();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,typeMirrorTestUtils.typeOf(List.class,typeMirrorTestUtils.typeOf(List.class,Thread.class))))).isFalse();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,typeMirrorTestUtils.typeOf(List.class,typeMirrorTestUtils.typeOf(List.class,Character.class))))).isFalse();
  }
  @Test public void supported_map_type_is_valid(){
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,String.class,Boolean.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,String.class,Long.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,String.class,Double.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,String.class,String.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,String.class,Number.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,String.class,Object.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,String.class,Node.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,String.class,Relationship.class))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,String.class,Path.class))).isTrue();
  }
  @Test public void unsupported_map_type_is_invalid(){
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,Object.class,Boolean.class))).isFalse();
  }
  @Test public void supported_recursive_map_type_is_valid(){
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,typeMirrorTestUtils.typeOf(String.class),typeMirrorTestUtils.typeOf(Map.class,String.class,Boolean.class)))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,typeMirrorTestUtils.typeOf(String.class),typeMirrorTestUtils.typeOf(Map.class,typeMirrorTestUtils.typeOf(String.class),typeMirrorTestUtils.typeOf(Map.class,String.class,Boolean.class))))).isTrue();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,typeMirrorTestUtils.typeOf(List.class,typeMirrorTestUtils.typeOf(Map.class,String.class,Boolean.class))))).isTrue();
  }
  @Test public void unsupported_recursive_map_type_is_invalid(){
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,typeMirrorTestUtils.typeOf(String.class),typeMirrorTestUtils.typeOf(Map.class,String.class,Thread.class)))).isFalse();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(Map.class,typeMirrorTestUtils.typeOf(String.class),typeMirrorTestUtils.typeOf(Map.class,typeMirrorTestUtils.typeOf(String.class),typeMirrorTestUtils.typeOf(Map.class,String.class,CharSequence.class))))).isFalse();
    assertThat(validator.test(typeMirrorTestUtils.typeOf(List.class,typeMirrorTestUtils.typeOf(List.class,typeMirrorTestUtils.typeOf(Map.class,String.class,Character.class))))).isFalse();
  }
}
