private static class Committer extends Thread {
  private final Random random=new Random();
  private final IdOrderingQueue queue;
  private final AtomicBoolean end;
  private final CountDownLatch startSignal;
  private final LongIterator idSource;
  private final CountDownLatch readySignal;
  private volatile Exception exception;
  Committer(  IdOrderingQueue queue,  LongIterator idSource,  AtomicBoolean end,  CountDownLatch readySignal,  CountDownLatch startSignal){
    this.queue=queue;
    this.idSource=idSource;
    this.end=end;
    this.readySignal=readySignal;
    this.startSignal=startSignal;
    start();
  }
  public void awaitFinish() throws Exception {
    join();
    if (exception != null) {
      throw exception;
    }
  }
  @Override public void run(){
    try {
      readySignal.countDown();
      awaitLatch(startSignal);
      while (!end.get()) {
        long id;
synchronized (queue) {
          id=idSource.next();
          queue.offer(id);
        }
        queue.waitFor(id);
        for (int i=0, max=random.nextInt(10_000); i < max; i++) {
          queue.isEmpty();
        }
        queue.removeChecked(id);
      }
    }
 catch (    Exception e) {
      this.exception=e;
    }
  }
}
