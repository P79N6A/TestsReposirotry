public class PropertyContainerStateImplTest {
  @Test public void shouldListAddedProperties(){
    PropertyContainerStateImpl state=new PropertyContainerStateImpl(1,OnHeapCollectionsFactory.INSTANCE);
    state.addProperty(1,Values.of("Hello"));
    state.addProperty(2,Values.of("Hello"));
    state.removeProperty(1);
    Iterator<StorageProperty> added=state.addedProperties();
    assertThat(Iterators.asList(added),equalTo(asList(new PropertyKeyValue(2,Values.of("Hello")))));
  }
  @Test public void shouldListAddedPropertiesEvenIfPropertiesHaveBeenReplaced(){
    PropertyContainerStateImpl state=new PropertyContainerStateImpl(1,OnHeapCollectionsFactory.INSTANCE);
    state.addProperty(1,Values.of("Hello"));
    state.addProperty(1,Values.of("WAT"));
    state.addProperty(2,Values.of("Hello"));
    Iterator<StorageProperty> added=state.addedProperties();
    assertThat(Iterators.asList(added),equalTo(asList(new PropertyKeyValue(1,Values.of("WAT")),new PropertyKeyValue(2,Values.of("Hello")))));
  }
  @Test public void shouldConvertAddRemoveToChange(){
    PropertyContainerStateImpl state=new PropertyContainerStateImpl(1,OnHeapCollectionsFactory.INSTANCE);
    state.removeProperty(4);
    state.addProperty(4,Values.of("another value"));
    assertThat(Iterators.asList(state.changedProperties()),equalTo(asList(new PropertyKeyValue(4,Values.of("another value")))));
    assertFalse(state.addedProperties().hasNext());
    assertTrue(state.removedProperties().isEmpty());
  }
}
