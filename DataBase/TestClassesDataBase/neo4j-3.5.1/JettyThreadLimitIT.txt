public class JettyThreadLimitIT {
  @Rule public final SuppressOutput suppressOutput=suppressAll();
  @Test public void shouldHaveConfigurableJettyThreadPoolSize() throws Exception {
    Jetty9WebServer server=new Jetty9WebServer(NullLogProvider.getInstance(),Config.defaults(),NetworkConnectionTracker.NO_OP);
    int numCores=1;
    int configuredMaxThreads=12;
    int acceptorThreads=1;
    int selectorThreads=1;
    int jobThreads=configuredMaxThreads - acceptorThreads - selectorThreads;
    server.setMaxThreads(numCores);
    server.setHttpAddress(new ListenSocketAddress("localhost",0));
    try {
      server.start();
      QueuedThreadPool threadPool=(QueuedThreadPool)server.getJetty().getThreadPool();
      threadPool.start();
      CountDownLatch startLatch=new CountDownLatch(jobThreads);
      CountDownLatch endLatch=loadThreadPool(threadPool,configuredMaxThreads + 1,startLatch);
      startLatch.await();
      int threads=threadPool.getThreads();
      assertEquals("Wrong number of threads in pool",configuredMaxThreads,threads);
      endLatch.countDown();
    }
  finally {
      server.stop();
    }
  }
  private static CountDownLatch loadThreadPool(  QueuedThreadPool threadPool,  int tasksToSubmit,  final CountDownLatch startLatch){
    CountDownLatch endLatch=new CountDownLatch(1);
    for (int i=0; i < tasksToSubmit; i++) {
      threadPool.execute(() -> {
        startLatch.countDown();
        try {
          endLatch.await();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
);
    }
    return endLatch;
  }
}
