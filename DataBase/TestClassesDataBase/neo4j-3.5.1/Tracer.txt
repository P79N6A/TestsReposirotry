static class Tracer implements LockTracer, LockWaitEvent {
  int done;
  final List<StackTraceElement[]> waitCalls=new ArrayList<>();
  @Override public LockWaitEvent waitForLock(  boolean exclusive,  ResourceType resourceType,  long... resourceIds){
    waitCalls.add(Thread.currentThread().getStackTrace());
    return this;
  }
  @Override public void close(){
    done++;
  }
  void assertCalls(  int expected){
    if (waitCalls.size() != done) {
      throw withCallTraces(new AssertionError("Should complete waiting as many times as started."));
    }
    if (done != expected) {
      throw withCallTraces(new AssertionError(format("Expected %d calls, but got %d",expected,done)));
    }
  }
  private <EX extends Throwable>EX withCallTraces(  EX failure){
    for (    StackTraceElement[] waitCall : waitCalls) {
      RuntimeException call=new RuntimeException("Wait called");
      call.setStackTrace(waitCall);
      failure.addSuppressed(call);
    }
    return failure;
  }
}
