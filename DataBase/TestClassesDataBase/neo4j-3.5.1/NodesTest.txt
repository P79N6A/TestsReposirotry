public class NodesTest {
  @Test public void shouldCountOutgoingDense(){
    StubGroupCursor groupCursor=new StubGroupCursor(group().withOutCount(1).withInCount(1).withLoopCount(5),group().withOutCount(1).withInCount(1).withLoopCount(3),group().withOutCount(2).withInCount(1).withLoopCount(2),group().withOutCount(3).withInCount(1).withLoopCount(1),group().withOutCount(5).withInCount(1).withLoopCount(1));
    StubCursorFactory cursors=new StubCursorFactory().withGroupCursors(groupCursor);
    int count=countOutgoing(new StubNodeCursor(true),cursors);
    assertThat(count,equalTo(24));
  }
  @Test public void shouldCountOutgoingSparse(){
    StubRelationshipCursor relationshipCursor=new StubRelationshipCursor(new TestRelationshipChain(11).outgoing(55,0,1).incoming(56,0,1).outgoing(57,0,1).loop(58,0));
    StubCursorFactory cursors=new StubCursorFactory().withRelationshipTraversalCursors(relationshipCursor);
    StubNodeCursor nodeCursor=new StubNodeCursor(false).withNode(11);
    nodeCursor.next();
    int count=countOutgoing(nodeCursor,cursors);
    assertThat(count,equalTo(3));
  }
  @Test public void shouldCountIncomingDense(){
    StubGroupCursor groupCursor=new StubGroupCursor(group().withOutCount(1).withInCount(1).withLoopCount(5),group().withOutCount(1).withInCount(1).withLoopCount(3),group().withOutCount(2).withInCount(1).withLoopCount(2),group().withOutCount(3).withInCount(1).withLoopCount(1),group().withOutCount(5).withInCount(1).withLoopCount(1));
    StubCursorFactory cursors=new StubCursorFactory().withGroupCursors(groupCursor);
    int count=countIncoming(new StubNodeCursor(true),cursors);
    assertThat(count,equalTo(17));
  }
  @Test public void shouldCountIncomingSparse(){
    StubRelationshipCursor relationshipCursor=new StubRelationshipCursor(new TestRelationshipChain(11).outgoing(55,0,1).incoming(56,0,1).outgoing(57,0,1).loop(58,0));
    StubCursorFactory cursors=new StubCursorFactory().withRelationshipTraversalCursors(relationshipCursor);
    StubNodeCursor nodeCursor=new StubNodeCursor(false).withNode(11);
    nodeCursor.next();
    int count=countIncoming(nodeCursor,cursors);
    assertThat(count,equalTo(2));
  }
  @Test public void shouldCountAllDense(){
    StubGroupCursor groupCursor=new StubGroupCursor(group().withOutCount(1).withInCount(1).withLoopCount(5),group().withOutCount(1).withInCount(1).withLoopCount(3),group().withOutCount(2).withInCount(1).withLoopCount(2),group().withOutCount(3).withInCount(1).withLoopCount(1),group().withOutCount(5).withInCount(1).withLoopCount(1));
    StubCursorFactory cursors=new StubCursorFactory().withGroupCursors(groupCursor);
    int count=countAll(new StubNodeCursor(true),cursors);
    assertThat(count,equalTo(29));
  }
  @Test public void shouldCountAllSparse(){
    StubRelationshipCursor relationshipCursor=new StubRelationshipCursor(new TestRelationshipChain(11).outgoing(55,0,1).incoming(56,0,1).outgoing(57,0,1).loop(58,0));
    StubCursorFactory cursors=new StubCursorFactory().withRelationshipTraversalCursors(relationshipCursor);
    StubNodeCursor nodeCursor=new StubNodeCursor(false).withNode(11);
    nodeCursor.next();
    int count=countAll(nodeCursor,cursors);
    assertThat(count,equalTo(4));
  }
  @Test public void shouldCountOutgoingDenseWithType(){
    StubGroupCursor groupCursor=new StubGroupCursor(group(1).withOutCount(1).withInCount(1).withLoopCount(5),group(2).withOutCount(1).withInCount(1).withLoopCount(3));
    StubCursorFactory cursors=new StubCursorFactory().withGroupCursors(groupCursor,groupCursor);
    assertThat(countOutgoing(new StubNodeCursor(true),cursors,1),equalTo(6));
    assertThat(countOutgoing(new StubNodeCursor(true),cursors,2),equalTo(4));
  }
  @Test public void shouldCountOutgoingSparseWithType(){
    StubRelationshipCursor relationshipCursor=new StubRelationshipCursor(new TestRelationshipChain(11).outgoing(55,0,1).incoming(56,0,1).outgoing(57,0,1).loop(58,2));
    StubCursorFactory cursors=new StubCursorFactory(true).withRelationshipTraversalCursors(relationshipCursor);
    StubNodeCursor nodeCursor=new StubNodeCursor(false).withNode(11);
    nodeCursor.next();
    assertThat(countOutgoing(nodeCursor,cursors,1),equalTo(2));
    nodeCursor=new StubNodeCursor(false).withNode(11);
    nodeCursor.next();
    assertThat(countOutgoing(nodeCursor,cursors,2),equalTo(1));
  }
  @Test public void shouldCountIncomingWithTypeDense(){
    StubGroupCursor groupCursor=new StubGroupCursor(group(1).withOutCount(1).withInCount(1).withLoopCount(5),group(2).withOutCount(1).withInCount(1).withLoopCount(3));
    StubCursorFactory cursors=new StubCursorFactory().withGroupCursors(groupCursor,groupCursor);
    assertThat(countIncoming(new StubNodeCursor(true),cursors,1),equalTo(6));
    assertThat(countIncoming(new StubNodeCursor(true),cursors,2),equalTo(4));
  }
  @Test public void shouldCountIncomingWithTypeSparse(){
    StubRelationshipCursor relationshipCursor=new StubRelationshipCursor(new TestRelationshipChain(11).outgoing(55,0,1).incoming(56,0,1).outgoing(57,0,1).loop(58,2));
    StubCursorFactory cursors=new StubCursorFactory(true).withRelationshipTraversalCursors(relationshipCursor);
    StubNodeCursor nodeCursor=new StubNodeCursor(false).withNode(11);
    nodeCursor.next();
    assertThat(countIncoming(nodeCursor,cursors,1),equalTo(1));
    nodeCursor=new StubNodeCursor(false).withNode(11);
    nodeCursor.next();
    assertThat(countIncoming(nodeCursor,cursors,2),equalTo(1));
  }
  @Test public void shouldCountAllWithTypeDense(){
    StubGroupCursor groupCursor=new StubGroupCursor(group(1).withOutCount(1).withInCount(1).withLoopCount(5),group(2).withOutCount(1).withInCount(1).withLoopCount(3));
    StubCursorFactory cursors=new StubCursorFactory().withGroupCursors(groupCursor,groupCursor);
    assertThat(countAll(new StubNodeCursor(true),cursors,1),equalTo(7));
    assertThat(countAll(new StubNodeCursor(true),cursors,2),equalTo(5));
  }
  @Test public void shouldCountAllWithTypeSparse(){
    StubRelationshipCursor relationshipCursor=new StubRelationshipCursor(new TestRelationshipChain(11).outgoing(55,0,1).incoming(56,0,1).outgoing(57,0,1).loop(58,2));
    StubCursorFactory cursors=new StubCursorFactory(true).withRelationshipTraversalCursors(relationshipCursor);
    StubNodeCursor nodeCursor=new StubNodeCursor(false).withNode(11);
    nodeCursor.next();
    assertThat(countAll(nodeCursor,cursors,1),equalTo(3));
    assertThat(countAll(nodeCursor,cursors,2),equalTo(1));
  }
  private StubGroupCursor.GroupData group(){
    return new StubGroupCursor.GroupData(0,0,0,0);
  }
  private StubGroupCursor.GroupData group(  int type){
    return new StubGroupCursor.GroupData(0,0,0,type);
  }
}
