@RunWith(Parameterized.class) public class TransactionMonitorTest {
  @Parameterized.Parameter(0) public ThrowingConsumer<GraphDatabaseService,Exception> dbConsumer;
  @Parameterized.Parameter(1) public boolean isWriteTx;
  @Parameterized.Parameter(2) public String ignored;
  @Parameterized.Parameters(name="{2}") public static Collection<Object[]> parameters(){
    return Arrays.asList(new Object[]{(ThrowingConsumer<GraphDatabaseService,Exception>)db -> {
    }
,false,"read"},new Object[]{(ThrowingConsumer<GraphDatabaseService,Exception>)GraphDatabaseService::createNode,true,"write"});
  }
  @Test public void shouldCountCommittedTransactions() throws Exception {
    GraphDatabaseAPI db=(GraphDatabaseAPI)new TestGraphDatabaseFactory().newImpermanentDatabase();
    try {
      TransactionCounters counts=db.getDependencyResolver().resolveDependency(TransactionCounters.class);
      TransactionCountersChecker checker=new TransactionCountersChecker(counts);
      try (Transaction tx=db.beginTx()){
        dbConsumer.accept(db);
        tx.success();
      }
       checker.verifyCommitted(isWriteTx,counts);
    }
  finally {
      db.shutdown();
    }
  }
  @Test public void shouldCountRolledBackTransactions() throws Exception {
    GraphDatabaseAPI db=(GraphDatabaseAPI)new TestGraphDatabaseFactory().newImpermanentDatabase();
    try {
      TransactionCounters counts=db.getDependencyResolver().resolveDependency(TransactionCounters.class);
      TransactionCountersChecker checker=new TransactionCountersChecker(counts);
      try (Transaction tx=db.beginTx()){
        dbConsumer.accept(db);
        tx.failure();
      }
       checker.verifyRolledBacked(isWriteTx,counts);
    }
  finally {
      db.shutdown();
    }
  }
  @Test public void shouldCountTerminatedTransactions() throws Exception {
    GraphDatabaseAPI db=(GraphDatabaseAPI)new TestGraphDatabaseFactory().newImpermanentDatabase();
    try {
      TransactionCounters counts=db.getDependencyResolver().resolveDependency(TransactionCounters.class);
      TransactionCountersChecker checker=new TransactionCountersChecker(counts);
      try (Transaction tx=db.beginTx()){
        dbConsumer.accept(db);
        tx.terminate();
      }
       checker.verifyTerminated(isWriteTx,counts);
    }
  finally {
      db.shutdown();
    }
  }
}
