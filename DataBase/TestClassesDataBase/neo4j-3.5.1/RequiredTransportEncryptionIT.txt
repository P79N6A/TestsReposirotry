@RunWith(Parameterized.class) public class RequiredTransportEncryptionIT {
  @Rule public Neo4jWithSocket server=new Neo4jWithSocket(getClass(),settings -> {
    Setting<BoltConnector.EncryptionLevel> encryptionLevel=new BoltConnector(DEFAULT_CONNECTOR_KEY).encryption_level;
    settings.put(encryptionLevel.name(),REQUIRED.name());
  }
);
  @Parameterized.Parameter(0) public Factory<TransportConnection> cf;
  private HostnamePort address;
  private TransportConnection client;
  private TransportTestUtil util;
  @Parameterized.Parameters public static Collection<Factory<TransportConnection>> transports(){
    return asList(SocketConnection::new,WebSocketConnection::new);
  }
  @Before public void setup(){
    this.client=cf.newInstance();
    this.address=server.lookupDefaultConnector();
    this.util=new TransportTestUtil(new Neo4jPackV1());
  }
  @After public void teardown() throws Exception {
    if (client != null) {
      client.disconnect();
    }
  }
  @Test public void shouldCloseUnencryptedConnectionOnHandshakeWhenEncryptionIsRequired() throws Throwable {
    client.connect(address).send(util.acceptedVersions(1,0,0,0));
    assertThat(client,eventuallyDisconnects());
  }
}
