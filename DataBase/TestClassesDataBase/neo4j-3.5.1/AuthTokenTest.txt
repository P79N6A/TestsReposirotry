public class AuthTokenTest {
  @Test public void shouldMakeBasicAuthToken(){
    Map<String,Object> token=AuthToken.newBasicAuthToken("me","my secret");
    assertThat("Should have correct username",token.get(AuthToken.PRINCIPAL),equalTo("me"));
    assertThat("Should have correct password",token.get(AuthToken.CREDENTIALS),equalTo(UTF8.encode("my secret")));
    assertThat("Should have correct scheme",token.get(AuthToken.SCHEME_KEY),equalTo(AuthToken.BASIC_SCHEME));
    assertThat("Should have no realm",token.get(AuthToken.REALM_KEY),nullValue());
  }
  @Test public void shouldMakeBasicAuthTokenWithRealm(){
    Map<String,Object> token=AuthToken.newBasicAuthToken("me","my secret","my realm");
    assertThat("Should have correct username",token.get(AuthToken.PRINCIPAL),equalTo("me"));
    assertThat("Should have correct password",token.get(AuthToken.CREDENTIALS),equalTo(UTF8.encode("my secret")));
    assertThat("Should have correct scheme",token.get(AuthToken.SCHEME_KEY),equalTo(AuthToken.BASIC_SCHEME));
    assertThat("Should have correct realm",token.get(AuthToken.REALM_KEY),equalTo("my realm"));
  }
  @Test public void shouldMakeCustomAuthTokenAndBasicScheme(){
    Map<String,Object> token=AuthToken.newCustomAuthToken("me","my secret","my realm","basic");
    assertThat("Should have correct username",token.get(AuthToken.PRINCIPAL),equalTo("me"));
    assertThat("Should have correct password",token.get(AuthToken.CREDENTIALS),equalTo(UTF8.encode("my secret")));
    assertThat("Should have correct scheme",token.get(AuthToken.SCHEME_KEY),equalTo(AuthToken.BASIC_SCHEME));
    assertThat("Should have correctno realm",token.get(AuthToken.REALM_KEY),equalTo("my realm"));
  }
  @Test public void shouldMakeCustomAuthTokenAndCustomcScheme(){
    Map<String,Object> token=AuthToken.newCustomAuthToken("me","my secret","my realm","my scheme");
    assertThat("Should have correct username",token.get(AuthToken.PRINCIPAL),equalTo("me"));
    assertThat("Should have correct password",token.get(AuthToken.CREDENTIALS),equalTo(UTF8.encode("my secret")));
    assertThat("Should have correct scheme",token.get(AuthToken.SCHEME_KEY),equalTo("my scheme"));
    assertThat("Should have correct realm",token.get(AuthToken.REALM_KEY),equalTo("my realm"));
  }
  @Test public void shouldMakeCustomAuthTokenAndCustomcSchemeWithParameters(){
    Map<String,Object> token=AuthToken.newCustomAuthToken("me","my secret","my realm","my scheme",map("a","A","b","B"));
    assertThat("Should have correct username",token.get(AuthToken.PRINCIPAL),equalTo("me"));
    assertThat("Should have correct password",token.get(AuthToken.CREDENTIALS),equalTo(UTF8.encode("my secret")));
    assertThat("Should have correct scheme",token.get(AuthToken.SCHEME_KEY),equalTo("my scheme"));
    assertThat("Should have correct realm",token.get(AuthToken.REALM_KEY),equalTo("my realm"));
    assertThat("Should have correct parameters",token.get(AuthToken.PARAMETERS),equalTo(map("a","A","b","B")));
  }
}
