public class RandomExtension extends StatefullFieldExtension<RandomRule> implements BeforeEachCallback, AfterEachCallback, TestExecutionExceptionHandler {
  private static final String RANDOM="random";
  private static final Namespace RANDOM_NAMESPACE=Namespace.create(RANDOM);
  @Override protected String getFieldKey(){
    return RANDOM;
  }
  @Override protected Class<RandomRule> getFieldType(){
    return RandomRule.class;
  }
  @Override protected Namespace getNameSpace(){
    return RANDOM_NAMESPACE;
  }
  @Override protected RandomRule createField(  ExtensionContext extensionContext){
    RandomRule randomRule=new RandomRule();
    randomRule.setSeed(System.currentTimeMillis());
    randomRule.reset();
    return randomRule;
  }
  @Override public void beforeEach(  ExtensionContext extensionContext){
    Optional<Seed> optionalSeed=findAnnotation(extensionContext.getElement(),Seed.class);
    optionalSeed.map(Seed::value).ifPresent(seed -> getStoredValue(extensionContext).setSeed(seed));
  }
  @Override public void afterEach(  ExtensionContext context){
    removeStoredValue(context);
  }
  @Override public void handleTestExecutionException(  ExtensionContext context,  Throwable t){
    if (t instanceof TestAbortedException) {
      return;
    }
    final long seed=getStoredValue(context).seed();
    throw new AssertionFailedError(format("%s [ random seed used: %dL ]",t.getMessage(),seed),t);
  }
}
