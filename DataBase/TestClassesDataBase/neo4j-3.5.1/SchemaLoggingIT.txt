public class SchemaLoggingIT {
  private final AssertableLogProvider logProvider=new AssertableLogProvider();
  @Rule public final ImpermanentDatabaseRule dbRule=new ImpermanentDatabaseRule(logProvider);
  @Test public void shouldLogUserReadableLabelAndPropertyNames() throws Exception {
    GraphDatabaseAPI db=dbRule.getGraphDatabaseAPI();
    String labelName="User";
    String property="name";
    createIndex(db,labelName,property);
    LogMatcherBuilder match=inLog(IndexPopulationJob.class);
    IndexProviderMap indexProviderMap=db.getDependencyResolver().resolveDependency(IndexProviderMap.class);
    IndexProvider defaultProvider=indexProviderMap.getDefaultProvider();
    IndexProviderDescriptor providerDescriptor=defaultProvider.getProviderDescriptor();
    logProvider.assertAtLeastOnce(match.info("Index population started: [%s]",":User(name) [provider: {key=" + providerDescriptor.getKey() + ", version="+ providerDescriptor.getVersion()+ "}]"));
    assertEventually((ThrowingSupplier<Object,Exception>)() -> null,new LogMessageMatcher(match,providerDescriptor),1,TimeUnit.MINUTES);
  }
  private static void createIndex(  GraphDatabaseAPI db,  String labelName,  String property){
    try (Transaction tx=db.beginTx()){
      db.schema().indexFor(label(labelName)).on(property).create();
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      db.schema().awaitIndexesOnline(1,TimeUnit.MINUTES);
      tx.success();
    }
   }
private class LogMessageMatcher extends BaseMatcher<Object> {
    private static final String CREATION_FINISHED="Index creation finished. Index [%s] is %s.";
    private final LogMatcherBuilder match;
    private final IndexProviderDescriptor descriptor;
    LogMessageMatcher(    LogMatcherBuilder match,    IndexProviderDescriptor descriptor){
      this.match=match;
      this.descriptor=descriptor;
    }
    @Override public boolean matches(    Object item){
      return logProvider.containsMatchingLogCall(match.info(CREATION_FINISHED,":User(name) [provider: {key=" + descriptor.getKey() + ", version="+ descriptor.getVersion()+ "}]","ONLINE"));
    }
    @Override public void describeTo(    Description description){
      description.appendText(" expected log message: '").appendText(CREATION_FINISHED).appendText("', but not found. Messages was: '").appendText(logProvider.serialize()).appendText(".");
    }
  }
}
