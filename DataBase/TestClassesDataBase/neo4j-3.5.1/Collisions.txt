@Nested class Collisions {
  private final ImmutableLongList collisions=generateKeyCollisions(5);
  private final long a=collisions.get(0);
  private final long b=collisions.get(1);
  private final long c=collisions.get(2);
  private final long d=collisions.get(3);
  private final long e=collisions.get(4);
  private ImmutableLongList generateKeyCollisions(  int n){
    final long seed=rnd.nextLong();
    final MutableLongList elements;
    try (LinearProbeLongLongHashMap s=new LinearProbeLongLongHashMap(memoryAllocator)){
      long v=s.hashAndMask(seed);
      while (s.hashAndMask(v) != 0 || v == 0 || v == 1) {
        ++v;
      }
      final int h=s.hashAndMask(v);
      elements=LongLists.mutable.with(v);
      while (elements.size() < n) {
        ++v;
        if (s.hashAndMask(v) == h) {
          elements.add(v);
        }
      }
    }
     return elements.toImmutable();
  }
  @Test void addAll(){
    fill(map,collisions.toArray());
    assertEquals(collisions,map.toSortedList());
  }
  @Test void addAllReversed(){
    fill(map,collisions.toReversed().toArray());
    assertEquals(collisions.toReversed(),map.toList());
  }
  @Test void addAllRemoveLast(){
    fill(map,collisions.toArray());
    map.remove(e);
    assertEquals(newListWith(a,b,c,d),map.toList());
  }
  @Test void addAllRemoveFirst(){
    fill(map,collisions.toArray());
    map.remove(a);
    assertEquals(newListWith(b,c,d,e),map.toList());
  }
  @Test void addAllRemoveMiddle(){
    fill(map,collisions.toArray());
    map.remove(b);
    map.remove(d);
    assertEquals(newListWith(a,c,e),map.toList());
  }
  @Test void addAllRemoveMiddle2(){
    fill(map,collisions.toArray());
    map.remove(a);
    map.remove(c);
    map.remove(e);
    assertEquals(newListWith(b,d),map.toList());
  }
  @Test void addReusesRemovedHead(){
    fill(map,a,b,c);
    map.remove(a);
    assertEquals(newListWith(b,c),map.toList());
    map.put(d,42);
    assertEquals(newListWith(d,b,c),map.toList());
  }
  @Test void addReusesRemovedTail(){
    fill(map,a,b,c);
    map.remove(c);
    assertEquals(newListWith(a,b),map.toList());
    map.put(d,42);
    assertEquals(newListWith(a,b,d),map.toList());
  }
  @Test void addReusesRemovedMiddle(){
    fill(map,a,b,c);
    map.remove(b);
    assertEquals(newListWith(a,c),map.toList());
    map.put(d,42);
    assertEquals(newListWith(a,d,c),map.toList());
  }
  @Test void addReusesRemovedMiddle2(){
    fill(map,a,b,c,d,e);
    map.remove(b);
    map.remove(c);
    assertEquals(newListWith(a,d,e),map.toList());
    map.put(c,1);
    map.put(b,2);
    assertEquals(newListWith(a,c,b,d,e),map.toList());
  }
  @Test void rehashingCompactsSparseSentinels(){
    fill(map,a,b,c,d,e);
    map.remove(b);
    map.remove(d);
    map.remove(e);
    assertEquals(newListWith(a,c),map.toList());
    fill(map,b,d,e);
    assertEquals(newListWith(a,b,c,d,e),map.toList());
    map.remove(b);
    map.remove(d);
    map.remove(e);
    assertEquals(newListWith(a,c),map.toList());
    map.rehashWithoutGrow();
    fill(map,e,d,b);
    assertEquals(newListWith(a,c,e,d,b),map.toList());
  }
}
