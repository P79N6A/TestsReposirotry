public abstract class BaseBootstrapperIT extends ExclusiveServerTestBase {
  @Rule public TemporaryFolder tempDir=new TemporaryFolder();
  protected ServerBootstrapper bootstrapper;
  @Before public void before(){
    bootstrapper=newBootstrapper();
  }
  @After public void after(){
    if (bootstrapper != null) {
      bootstrapper.stop();
    }
  }
  protected abstract ServerBootstrapper newBootstrapper();
  @Test public void shouldStartStopNeoServerWithoutAnyConfigFiles() throws Throwable {
    int resultCode=ServerBootstrapper.start(bootstrapper,withConnectorsOnRandomPortsConfig("--home-dir",tempDir.newFolder("home-dir").getAbsolutePath(),"-c",configOption(data_directory,tempDir.getRoot().getAbsolutePath()),"-c",configOption(logs_directory,tempDir.getRoot().getAbsolutePath()),"-c","dbms.backup.enabled=false"));
    assertEquals(ServerBootstrapper.OK,resultCode);
    assertEventually("Server was not started",bootstrapper::isRunning,is(true),1,TimeUnit.MINUTES);
  }
  @Test public void canSpecifyConfigFile() throws Throwable {
    File configFile=tempDir.newFile(Config.DEFAULT_CONFIG_FILE_NAME);
    Map<String,String> properties=stringMap(forced_kernel_id.name(),"ourcustomvalue");
    properties.putAll(ServerTestUtils.getDefaultRelativeProperties());
    properties.putAll(connectorsOnRandomPortsConfig());
    store(properties,configFile);
    ServerBootstrapper.start(bootstrapper,"--home-dir",tempDir.newFolder("home-dir").getAbsolutePath(),"--config-dir",configFile.getParentFile().getAbsolutePath());
    assertThat(bootstrapper.getServer().getConfig().get(forced_kernel_id),equalTo("ourcustomvalue"));
  }
  @Test public void canOverrideConfigValues() throws Throwable {
    File configFile=tempDir.newFile(Config.DEFAULT_CONFIG_FILE_NAME);
    Map<String,String> properties=stringMap(forced_kernel_id.name(),"thisshouldnotshowup");
    properties.putAll(ServerTestUtils.getDefaultRelativeProperties());
    properties.putAll(connectorsOnRandomPortsConfig());
    store(properties,configFile);
    ServerBootstrapper.start(bootstrapper,"--home-dir",tempDir.newFolder("home-dir").getAbsolutePath(),"--config-dir",configFile.getParentFile().getAbsolutePath(),"-c",configOption(forced_kernel_id,"mycustomvalue"));
    assertThat(bootstrapper.getServer().getConfig().get(forced_kernel_id),equalTo("mycustomvalue"));
  }
  @Test public void shouldStartWithHttpHttpsAndBoltDisabled() throws Exception {
    testStartupWithConnectors(false,false,false);
  }
  @Test public void shouldStartWithHttpEnabledAndHttpsBoltDisabled() throws Exception {
    testStartupWithConnectors(true,false,false);
  }
  @Test public void shouldStartWithHttpsEnabledAndHttpBoltDisabled() throws Exception {
    testStartupWithConnectors(false,true,false);
  }
  @Test public void shouldStartWithBoltEnabledAndHttpHttpsDisabled() throws Exception {
    testStartupWithConnectors(false,false,true);
  }
  @Test public void shouldStartWithHttpHttpsEnabledAndBoltDisabled() throws Exception {
    testStartupWithConnectors(true,true,false);
  }
  @Test public void shouldStartWithHttpBoltEnabledAndHttpsDisabled() throws Exception {
    testStartupWithConnectors(true,false,true);
  }
  @Test public void shouldStartWithHttpsBoltEnabledAndHttpDisabled() throws Exception {
    testStartupWithConnectors(false,true,true);
  }
  private void testStartupWithConnectors(  boolean httpEnabled,  boolean httpsEnabled,  boolean boltEnabled) throws Exception {
    int resultCode=ServerBootstrapper.start(bootstrapper,"--home-dir",tempDir.newFolder("home-dir").getAbsolutePath(),"-c",configOption(data_directory,tempDir.getRoot().getAbsolutePath()),"-c",configOption(logs_directory,tempDir.getRoot().getAbsolutePath()),"-c","dbms.connector.http.enabled=" + httpEnabled,"-c","dbms.connector.http.listen_address=:0","-c","dbms.connector.https.enabled=" + httpsEnabled,"-c","dbms.connector.https.listen_address=:0","-c","dbms.connector.bolt.enabled=" + boltEnabled,"-c","dbms.connector.bolt.listen_address=:0");
    assertEquals(ServerBootstrapper.OK,resultCode);
    assertEventually("Server was not started",bootstrapper::isRunning,is(true),1,TimeUnit.MINUTES);
    assertDbAccessibleAsEmbedded();
    verifyConnector(db(),"http",httpEnabled);
    verifyConnector(db(),"https",httpsEnabled);
    verifyConnector(db(),"bolt",boltEnabled);
  }
  protected String configOption(  Setting<?> setting,  String value){
    return setting.name() + "=" + value;
  }
  protected static String[] withConnectorsOnRandomPortsConfig(  String... otherConfigs){
    Stream<String> configs=Stream.of(otherConfigs);
    Stream<String> connectorsConfig=connectorsOnRandomPortsConfig().entrySet().stream().map(entry -> entry.getKey() + "=" + entry.getValue()).flatMap(config -> Stream.of("-c",config));
    return Stream.concat(configs,connectorsConfig).toArray(String[]::new);
  }
  protected static Map<String,String> connectorsOnRandomPortsConfig(){
    return stringMap("dbms.connector.http.type","HTTP","dbms.connector.http.listen_address","localhost:0","dbms.connector.http.encryption","NONE","dbms.connector.http.enabled","true","dbms.connector.https.type","HTTP","dbms.connector.https.listen_address","localhost:0","dbms.connector.https.encryption","TLS","dbms.connector.https.enabled","true","dbms.connector.bolt.type","BOLT","dbms.connector.bolt.listen_address","localhost:0","dbms.connector.bolt.tls_level","OPTIONAL","dbms.connector.bolt.enabled","true");
  }
  private void assertDbAccessibleAsEmbedded(){
    GraphDatabaseAPI db=db();
    Label label=() -> "Node";
    String propertyKey="key";
    String propertyValue="value";
    try (Transaction tx=db.beginTx()){
      db.createNode(label).setProperty(propertyKey,propertyValue);
      tx.success();
    }
     try (Transaction tx=db.beginTx()){
      Node node=single(db.findNodes(label));
      assertEquals(propertyValue,node.getProperty(propertyKey));
      tx.success();
    }
   }
  private GraphDatabaseAPI db(){
    return bootstrapper.getServer().getDatabase().getGraph();
  }
}
