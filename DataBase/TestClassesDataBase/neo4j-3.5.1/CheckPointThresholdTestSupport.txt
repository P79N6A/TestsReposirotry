public class CheckPointThresholdTestSupport {
  protected Config config;
  protected FakeClock clock;
  protected LogPruning logPruning;
  protected LogProvider logProvider;
  protected Integer intervalTx;
  protected Duration intervalTime;
  protected Consumer<String> notTriggered;
  protected BlockingQueue<String> triggerConsumer;
  protected Consumer<String> triggered;
  @Before public void setUp(){
    config=Config.defaults();
    clock=Clocks.fakeClock();
    logPruning=LogPruning.NO_PRUNING;
    logProvider=NullLogProvider.getInstance();
    intervalTx=config.get(GraphDatabaseSettings.check_point_interval_tx);
    intervalTime=config.get(GraphDatabaseSettings.check_point_interval_time);
    triggerConsumer=new LinkedBlockingQueue<>();
    triggered=triggerConsumer::offer;
    notTriggered=s -> fail("Should not have triggered: " + s);
  }
  protected void withPolicy(  String policy){
    config.augment(stringMap(GraphDatabaseSettings.check_point_policy.name(),policy));
  }
  protected void withIntervalTime(  String time){
    config.augment(stringMap(GraphDatabaseSettings.check_point_interval_time.name(),time));
  }
  protected void withIntervalTx(  int count){
    config.augment(stringMap(GraphDatabaseSettings.check_point_interval_tx.name(),String.valueOf(count)));
  }
  protected CheckPointThreshold createThreshold(){
    return CheckPointThreshold.createThreshold(config,clock,logPruning,logProvider);
  }
  protected void verifyTriggered(  String reason){
    assertThat(triggerConsumer.poll(),containsString(reason));
  }
  protected void verifyNoMoreTriggers(){
    assertTrue(triggerConsumer.isEmpty());
  }
}
