public class TracersTest {
  private final AssertableLogProvider logProvider=new AssertableLogProvider();
  private final JobScheduler jobScheduler=mock(JobScheduler.class);
  private final SystemNanoClock clock=Clocks.nanoClock();
  private final Monitors monitors=new Monitors();
  private Log log;
  @Before public void setUp(){
    log=logProvider.getLog(getClass());
    System.setProperty("org.neo4j.helpers.Service.printServiceLoaderStackTraces","true");
  }
  @Test public void mustProduceNullImplementationsWhenRequested(){
    Tracers tracers=createTracers("null");
    assertThat(tracers.pageCacheTracer,is(PageCacheTracer.NULL));
    assertThat(tracers.pageCursorTracerSupplier,is(PageCursorTracerSupplier.NULL));
    assertThat(tracers.transactionTracer,is(TransactionTracer.NULL));
    assertNoWarning();
  }
  @Test public void mustProduceNullImplementationsWhenRequestedIgnoringCase(){
    Tracers tracers=createTracers("NuLl");
    assertThat(tracers.pageCacheTracer,is(PageCacheTracer.NULL));
    assertThat(tracers.pageCursorTracerSupplier,is(PageCursorTracerSupplier.NULL));
    assertThat(tracers.transactionTracer,is(TransactionTracer.NULL));
    assertNoWarning();
  }
  @Test public void mustProduceDefaultImplementationForNullConfiguration(){
    Tracers tracers=createTracers(null);
    assertDefaultImplementation(tracers);
    assertNoWarning();
  }
  @Test public void mustProduceDefaultImplementationWhenRequested(){
    Tracers tracers=createTracers("default");
    assertDefaultImplementation(tracers);
    assertNoWarning();
  }
  @Test public void mustProduceDefaultImplementationWhenRequestedIgnoringCase(){
    Tracers tracers=createTracers("DeFaUlT");
    assertDefaultImplementation(tracers);
    assertNoWarning();
  }
  @Test public void mustProduceDefaultImplementationWhenRequestingUnknownImplementation(){
    Tracers tracers=createTracers("there's nothing like this");
    assertDefaultImplementation(tracers);
    assertWarning("there's nothing like this");
  }
  private Tracers createTracers(  String s){
    return new Tracers(s,log,monitors,jobScheduler,clock);
  }
  private void assertDefaultImplementation(  Tracers tracers){
    assertThat(tracers.pageCacheTracer,instanceOf(DefaultPageCacheTracer.class));
    assertThat(tracers.transactionTracer,instanceOf(DefaultTransactionTracer.class));
    assertThat(tracers.checkPointTracer,instanceOf(DefaultCheckPointerTracer.class));
    assertThat(tracers.pageCursorTracerSupplier,instanceOf(DefaultPageCursorTracerSupplier.class));
  }
  private void assertNoWarning(){
    logProvider.assertNoLoggingOccurred();
  }
  private void assertWarning(  String implementationName){
    logProvider.assertExactly(AssertableLogProvider.inLog(getClass()).warn("Using default tracer implementations instead of '%s'",implementationName));
  }
}
