public class RateLimitedAuthenticationStrategyTest {
  @Test public void shouldReturnSuccessForValidAttempt(){
    FakeClock clock=getFakeClock();
    AuthenticationStrategy authStrategy=newAuthStrategy(clock,3);
    User user=new User.Builder("user",LegacyCredential.forPassword("right")).build();
    assertThat(authStrategy.authenticate(user,password("right")),equalTo(AuthenticationResult.SUCCESS));
  }
  @Test public void shouldReturnFailureForInvalidAttempt(){
    FakeClock clock=getFakeClock();
    AuthenticationStrategy authStrategy=newAuthStrategy(clock,3);
    User user=new User.Builder("user",LegacyCredential.forPassword("right")).build();
    assertThat(authStrategy.authenticate(user,password("wrong")),equalTo(AuthenticationResult.FAILURE));
  }
  @Test public void shouldNotSlowRequestRateOnLessThanMaxFailedAttempts(){
    FakeClock clock=getFakeClock();
    AuthenticationStrategy authStrategy=newAuthStrategy(clock,3);
    User user=new User.Builder("user",LegacyCredential.forPassword("right")).build();
    assertThat(authStrategy.authenticate(user,password("wrong")),equalTo(AuthenticationResult.FAILURE));
    assertThat(authStrategy.authenticate(user,password("wrong")),equalTo(AuthenticationResult.FAILURE));
    assertThat(authStrategy.authenticate(user,password("right")),equalTo(AuthenticationResult.SUCCESS));
  }
  @Test public void shouldSlowRequestRateOnMultipleFailedAttempts(){
    testSlowRequestRateOnMultipleFailedAttempts(3,Duration.ofSeconds(5));
    testSlowRequestRateOnMultipleFailedAttempts(1,Duration.ofSeconds(10));
    testSlowRequestRateOnMultipleFailedAttempts(6,Duration.ofMinutes(1));
    testSlowRequestRateOnMultipleFailedAttempts(42,Duration.ofMinutes(2));
  }
  @Test public void shouldSlowRequestRateOnMultipleFailedAttemptsWhereAttemptIsValid(){
    testSlowRequestRateOnMultipleFailedAttemptsWhereAttemptIsValid(3,Duration.ofSeconds(5));
    testSlowRequestRateOnMultipleFailedAttemptsWhereAttemptIsValid(1,Duration.ofSeconds(11));
    testSlowRequestRateOnMultipleFailedAttemptsWhereAttemptIsValid(22,Duration.ofMinutes(2));
    testSlowRequestRateOnMultipleFailedAttemptsWhereAttemptIsValid(42,Duration.ofDays(4));
  }
  private void testSlowRequestRateOnMultipleFailedAttempts(  int maxFailedAttempts,  Duration lockDuration){
    FakeClock clock=getFakeClock();
    AuthenticationStrategy authStrategy=newAuthStrategy(clock,maxFailedAttempts,lockDuration);
    User user=new User.Builder("user",LegacyCredential.forPassword("right")).build();
    for (int i=0; i < maxFailedAttempts; i++) {
      assertThat(authStrategy.authenticate(user,password("wrong")),equalTo(AuthenticationResult.FAILURE));
    }
    assertThat(authStrategy.authenticate(user,password("wrong")),equalTo(AuthenticationResult.TOO_MANY_ATTEMPTS));
    clock.forward(lockDuration.plus(1,SECONDS));
    assertThat(authStrategy.authenticate(user,password("wrong")),equalTo(AuthenticationResult.FAILURE));
  }
  private void testSlowRequestRateOnMultipleFailedAttemptsWhereAttemptIsValid(  int maxFailedAttempts,  Duration lockDuration){
    FakeClock clock=getFakeClock();
    AuthenticationStrategy authStrategy=newAuthStrategy(clock,maxFailedAttempts,lockDuration);
    User user=new User.Builder("user",LegacyCredential.forPassword("right")).build();
    for (int i=0; i < maxFailedAttempts; i++) {
      assertThat(authStrategy.authenticate(user,password("wrong")),equalTo(AuthenticationResult.FAILURE));
    }
    assertThat(authStrategy.authenticate(user,password("right")),equalTo(AuthenticationResult.TOO_MANY_ATTEMPTS));
    clock.forward(lockDuration.plus(1,SECONDS));
    assertThat(authStrategy.authenticate(user,password("right")),equalTo(AuthenticationResult.SUCCESS));
  }
  @Test public void shouldAllowUnlimitedFailedAttemptsWhenMaxFailedAttemptsIsZero(){
    testUnlimitedFailedAuthAttempts(0);
  }
  @Test public void shouldAllowUnlimitedFailedAttemptsWhenMaxFailedAttemptsIsNegative(){
    testUnlimitedFailedAuthAttempts(-42);
  }
  private void testUnlimitedFailedAuthAttempts(  int maxFailedAttempts){
    FakeClock clock=getFakeClock();
    AuthenticationStrategy authStrategy=newAuthStrategy(clock,maxFailedAttempts);
    User user=new User.Builder("user",LegacyCredential.forPassword("right")).build();
    int attempts=ThreadLocalRandom.current().nextInt(5,100);
    for (int i=0; i < attempts; i++) {
      assertEquals(AuthenticationResult.FAILURE,authStrategy.authenticate(user,password("wrong")));
    }
  }
  private FakeClock getFakeClock(){
    return Clocks.fakeClock();
  }
  private static RateLimitedAuthenticationStrategy newAuthStrategy(  Clock clock,  int maxFailedAttempts){
    Duration defaultLockDuration=Config.defaults().get(auth_lock_time);
    return newAuthStrategy(clock,maxFailedAttempts,defaultLockDuration);
  }
  private static RateLimitedAuthenticationStrategy newAuthStrategy(  Clock clock,  int maxFailedAttempts,  Duration lockDuration){
    return new RateLimitedAuthenticationStrategy(clock,lockDuration,maxFailedAttempts);
  }
}
