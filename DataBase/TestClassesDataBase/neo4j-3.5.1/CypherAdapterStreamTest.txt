public class CypherAdapterStreamTest {
  @Test public void shouldIncludeBasicMetadata() throws Throwable {
    QueryStatistics queryStatistics=mock(QueryStatistics.class);
    when(queryStatistics.containsUpdates()).thenReturn(true);
    when(queryStatistics.getNodesCreated()).thenReturn(1);
    when(queryStatistics.getNodesDeleted()).thenReturn(2);
    when(queryStatistics.getRelationshipsCreated()).thenReturn(3);
    when(queryStatistics.getRelationshipsDeleted()).thenReturn(4);
    when(queryStatistics.getPropertiesSet()).thenReturn(5);
    when(queryStatistics.getIndexesAdded()).thenReturn(6);
    when(queryStatistics.getIndexesRemoved()).thenReturn(7);
    when(queryStatistics.getConstraintsAdded()).thenReturn(8);
    when(queryStatistics.getConstraintsRemoved()).thenReturn(9);
    when(queryStatistics.getLabelsAdded()).thenReturn(10);
    when(queryStatistics.getLabelsRemoved()).thenReturn(11);
    QueryResult result=mock(QueryResult.class);
    when(result.fieldNames()).thenReturn(new String[0]);
    when(result.executionType()).thenReturn(query(READ_WRITE));
    when(result.queryStatistics()).thenReturn(queryStatistics);
    when(result.getNotifications()).thenReturn(Collections.emptyList());
    Clock clock=mock(Clock.class);
    when(clock.millis()).thenReturn(0L,1337L);
    TransactionalContext tc=mock(TransactionalContext.class);
    CypherAdapterStream stream=new CypherAdapterStream(result,clock);
    MapValue meta=metadataOf(stream);
    assertThat(meta.get("type"),equalTo(stringValue("rw")));
    assertThat(meta.get("stats"),equalTo(mapValues("nodes-created",intValue(1),"nodes-deleted",intValue(2),"relationships-created",intValue(3),"relationships-deleted",intValue(4),"properties-set",intValue(5),"indexes-added",intValue(6),"indexes-removed",intValue(7),"constraints-added",intValue(8),"constraints-removed",intValue(9),"labels-added",intValue(10),"labels-removed",intValue(11))));
    assertThat(meta.get("result_consumed_after"),equalTo(longValue(1337L)));
  }
  @Test public void shouldIncludePlanIfPresent() throws Throwable {
    QueryStatistics queryStatistics=mock(QueryStatistics.class);
    when(queryStatistics.containsUpdates()).thenReturn(false);
    QueryResult result=mock(QueryResult.class);
    when(result.fieldNames()).thenReturn(new String[0]);
    when(result.executionType()).thenReturn(explained(READ_ONLY));
    when(result.queryStatistics()).thenReturn(queryStatistics);
    when(result.getNotifications()).thenReturn(Collections.emptyList());
    when(result.executionPlanDescription()).thenReturn(plan("Join",map("arg1",1),singletonList("id1"),plan("Scan",map("arg2",1),singletonList("id2"))));
    TransactionalContext tc=mock(TransactionalContext.class);
    CypherAdapterStream stream=new CypherAdapterStream(result,Clock.systemUTC());
    MapValue meta=metadataOf(stream);
    MapValue expectedChild=mapValues("args",mapValues("arg2",intValue(1)),"identifiers",list(stringValue("id2")),"operatorType",stringValue("Scan"),"children",VirtualValues.EMPTY_LIST);
    MapValue expectedPlan=mapValues("args",mapValues("arg1",intValue(1)),"identifiers",list(stringValue("id1")),"operatorType",stringValue("Join"),"children",list(expectedChild));
    assertThat(meta.get("plan"),equalTo(expectedPlan));
  }
  @Test public void shouldIncludeProfileIfPresent() throws Throwable {
    QueryStatistics queryStatistics=mock(QueryStatistics.class);
    when(queryStatistics.containsUpdates()).thenReturn(false);
    QueryResult result=mock(QueryResult.class);
    when(result.fieldNames()).thenReturn(new String[0]);
    when(result.executionType()).thenReturn(explained(READ_ONLY));
    when(result.queryStatistics()).thenReturn(queryStatistics);
    when(result.getNotifications()).thenReturn(Collections.emptyList());
    when(result.executionPlanDescription()).thenReturn(plan("Join",map("arg1",1),2,4,3,1,singletonList("id1"),plan("Scan",map("arg2",1),2,4,7,1,singletonList("id2"))));
    TransactionalContext tc=mock(TransactionalContext.class);
    CypherAdapterStream stream=new CypherAdapterStream(result,Clock.systemUTC());
    MapValue meta=metadataOf(stream);
    MapValue expectedChild=mapValues("args",mapValues("arg2",intValue(1)),"identifiers",list(stringValue("id2")),"operatorType",stringValue("Scan"),"children",VirtualValues.EMPTY_LIST,"rows",longValue(1L),"dbHits",longValue(2L),"pageCacheHits",longValue(4L),"pageCacheMisses",longValue(7L),"pageCacheHitRatio",doubleValue(4.0 / 11));
    MapValue expectedProfile=mapValues("args",mapValues("arg1",intValue(1)),"identifiers",list(stringValue("id1")),"operatorType",stringValue("Join"),"children",list(expectedChild),"rows",longValue(1L),"dbHits",longValue(2L),"pageCacheHits",longValue(4L),"pageCacheMisses",longValue(3L),"pageCacheHitRatio",doubleValue(4.0 / 7));
    assertMapEqualsWithDelta((MapValue)meta.get("profile"),expectedProfile,0.0001);
  }
  private MapValue mapValues(  Object... values){
    int i=0;
    MapValueBuilder builder=new MapValueBuilder();
    while (i < values.length) {
      builder.add((String)values[i++],(AnyValue)values[i++]);
    }
    return builder.build();
  }
  @Test public void shouldIncludeNotificationsIfPresent() throws Throwable {
    QueryResult result=mock(QueryResult.class);
    when(result.fieldNames()).thenReturn(new String[0]);
    QueryStatistics queryStatistics=mock(QueryStatistics.class);
    when(queryStatistics.containsUpdates()).thenReturn(false);
    when(result.queryStatistics()).thenReturn(queryStatistics);
    when(result.executionType()).thenReturn(query(READ_WRITE));
    when(result.getNotifications()).thenReturn(Arrays.asList(NotificationCode.INDEX_HINT_UNFULFILLABLE.notification(InputPosition.empty),NotificationCode.PLANNER_UNSUPPORTED.notification(new InputPosition(4,5,6))));
    TransactionalContext tc=mock(TransactionalContext.class);
    CypherAdapterStream stream=new CypherAdapterStream(result,Clock.systemUTC());
    MapValue meta=metadataOf(stream);
    MapValue msg1=mapValues("severity",stringValue("WARNING"),"code",stringValue("Neo.ClientError.Schema.IndexNotFound"),"title",stringValue("The request (directly or indirectly) referred to an index that does not exist."),"description",stringValue("The hinted index does not exist, please check the schema"));
    MapValue msg2=mapValues("severity",stringValue("WARNING"),"code",stringValue("Neo.ClientNotification.Statement.PlannerUnsupportedWarning"),"title",stringValue("This query is not supported by the COST planner."),"description",stringValue("Using COST planner is unsupported for this query, please use RULE planner instead"),"position",mapValues("offset",intValue(4),"column",intValue(6),"line",intValue(5)));
    assertThat(meta.get("notifications"),equalTo(list(msg1,msg2)));
  }
  private MapValue metadataOf(  CypherAdapterStream stream) throws Exception {
    final MapValueBuilder meta=new MapValueBuilder();
    stream.accept(new BoltResult.Visitor(){
      @Override public void visit(      QueryResult.Record record){
      }
      @Override public void addMetadata(      String key,      AnyValue value){
        meta.add(key,value);
      }
    }
);
    return meta.build();
  }
  private static void assertMapEqualsWithDelta(  MapValue a,  MapValue b,  double delta){
    assertThat("Map should have same size",a.size(),equalTo(b.size()));
    a.foreach((key,value) -> {
      AnyValue aValue=value;
      AnyValue bValue=b.get(key);
      if (aValue instanceof MapValue) {
        assertThat("Value mismatch",bValue instanceof MapValue);
        assertMapEqualsWithDelta((MapValue)aValue,(MapValue)bValue,delta);
      }
 else       if (aValue instanceof DoubleValue) {
        assertThat("Value mismatch",((DoubleValue)aValue).doubleValue(),closeTo(((DoubleValue)bValue).doubleValue(),delta));
      }
 else {
        assertThat("Value mismatch",aValue,equalTo(bValue));
      }
    }
);
  }
  private static ExecutionPlanDescription plan(  final String name,  final Map<String,Object> args,  final long dbHits,  final long pageCacheHits,  final long pageCacheMisses,  final long rows,  final List<String> identifiers,  final ExecutionPlanDescription... children){
    return plan(name,args,identifiers,new ExecutionPlanDescription.ProfilerStatistics(){
      @Override public long getRows(){
        return rows;
      }
      @Override public long getDbHits(){
        return dbHits;
      }
      @Override public long getPageCacheHits(){
        return pageCacheHits;
      }
      @Override public long getPageCacheMisses(){
        return pageCacheMisses;
      }
    }
,children);
  }
  private static ExecutionPlanDescription plan(  final String name,  final Map<String,Object> args,  final List<String> identifiers,  final ExecutionPlanDescription... children){
    return plan(name,args,identifiers,null,children);
  }
  private static ExecutionPlanDescription plan(  final String name,  final Map<String,Object> args,  final List<String> identifiers,  final ExecutionPlanDescription.ProfilerStatistics profile,  final ExecutionPlanDescription... children){
    return new ExecutionPlanDescription(){
      @Override public String getName(){
        return name;
      }
      @Override public List<ExecutionPlanDescription> getChildren(){
        return asList(children);
      }
      @Override public Map<String,Object> getArguments(){
        return args;
      }
      @Override public Set<String> getIdentifiers(){
        return new HashSet<>(identifiers);
      }
      @Override public boolean hasProfilerStatistics(){
        return profile != null;
      }
      @Override public ProfilerStatistics getProfilerStatistics(){
        return profile;
      }
    }
;
  }
}
