public abstract static class Fixture<T extends PageCache> {
  public abstract T createPageCache(  PageSwapperFactory swapperFactory,  int maxPages,  PageCacheTracer tracer,  PageCursorTracerSupplier cursorTracerSupplier,  VersionContextSupplier contextSupplier,  JobScheduler jobScheduler);
  public abstract void tearDownPageCache(  T pageCache);
  private Supplier<FileSystemAbstraction> fileSystemAbstractionSupplier=EphemeralFileSystemAbstraction::new;
  private Function<String,File> fileConstructor=File::new;
  public final FileSystemAbstraction getFileSystemAbstraction(){
    return fileSystemAbstractionSupplier.get();
  }
  public final Fixture<T> withFileSystemAbstraction(  Supplier<FileSystemAbstraction> fileSystemAbstractionSupplier){
    this.fileSystemAbstractionSupplier=fileSystemAbstractionSupplier;
    return this;
  }
  public final File file(  String pathname) throws IOException {
    return fileConstructor.apply(pathname).getCanonicalFile();
  }
  public final Fixture<T> withFileConstructor(  Function<String,File> fileConstructor){
    this.fileConstructor=fileConstructor;
    return this;
  }
}
