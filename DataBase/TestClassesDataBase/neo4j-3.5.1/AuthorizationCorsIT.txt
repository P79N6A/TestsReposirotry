public class AuthorizationCorsIT extends CommunityServerTestBase {
  @Test public void shouldAddCorsHeaderWhenAuthDisabled() throws Exception {
    startServer(false);
    HTTP.Response response=runQuery("authDisabled","authDisabled");
    assertEquals(OK.getStatusCode(),response.status());
    assertCorsHeaderPresent(response);
    assertThat(response.content().toString(),containsString("42"));
  }
  @Test public void shouldAddCorsHeaderWhenAuthEnabledAndPasswordChangeRequired() throws Exception {
    startServer(true);
    HTTP.Response response=runQuery("neo4j","neo4j");
    assertEquals(FORBIDDEN.getStatusCode(),response.status());
    assertCorsHeaderPresent(response);
    assertThat(response.content().toString(),containsString("password_change"));
  }
  @Test public void shouldAddCorsHeaderWhenAuthEnabledAndPasswordChangeNotRequired() throws Exception {
    startServer(true);
    HTTP.Response passwordChangeResponse=changePassword("neo4j","neo4j","newPassword");
    assertEquals(OK.getStatusCode(),passwordChangeResponse.status());
    assertCorsHeaderPresent(passwordChangeResponse);
    HTTP.Response queryResponse=runQuery("neo4j","newPassword");
    assertEquals(OK.getStatusCode(),queryResponse.status());
    assertCorsHeaderPresent(queryResponse);
    assertThat(queryResponse.content().toString(),containsString("42"));
  }
  @Test public void shouldAddCorsHeaderWhenAuthEnabledAndIncorrectPassword() throws Exception {
    startServer(true);
    HTTP.Response response=runQuery("neo4j","wrongPassword");
    assertEquals(UNAUTHORIZED.getStatusCode(),response.status());
    assertCorsHeaderPresent(response);
    assertThat(response.content().toString(),containsString("Neo.ClientError.Security.Unauthorized"));
  }
  @Test public void shouldAddCorsMethodsHeader() throws Exception {
    startServer(false);
    testCorsAllowMethods(POST);
    testCorsAllowMethods(GET);
    testCorsAllowMethods(PATCH);
    testCorsAllowMethods(DELETE);
  }
  @Test public void shouldAddCorsHeaderWhenConfigured() throws Exception {
    String origin="https://example.com:7687";
    startServer(false,origin);
    testCorsAllowMethods(POST,origin);
    testCorsAllowMethods(GET,origin);
    testCorsAllowMethods(PATCH,origin);
    testCorsAllowMethods(DELETE,origin);
  }
  @Test public void shouldAddCorsRequestHeaders() throws Exception {
    startServer(false);
    HTTP.Builder requestBuilder=requestWithHeaders("authDisabled","authDisabled").withHeaders(ACCESS_CONTROL_REQUEST_HEADERS,"Accept, X-Not-Accept");
    HTTP.Response response=runQuery(requestBuilder);
    assertEquals(OK.getStatusCode(),response.status());
    assertCorsHeaderPresent(response);
    assertEquals("Accept, X-Not-Accept",response.header(ACCESS_CONTROL_ALLOW_HEADERS));
  }
  private void testCorsAllowMethods(  HttpMethod method) throws Exception {
    testCorsAllowMethods(method,"*");
  }
  private void testCorsAllowMethods(  HttpMethod method,  String origin) throws Exception {
    HTTP.Builder requestBuilder=requestWithHeaders("authDisabled","authDisabled").withHeaders(ACCESS_CONTROL_REQUEST_METHOD,method.toString());
    HTTP.Response response=runQuery(requestBuilder);
    assertEquals(OK.getStatusCode(),response.status());
    assertCorsHeaderEquals(response,origin);
    assertEquals(method,HttpMethod.valueOf(response.header(ACCESS_CONTROL_ALLOW_METHODS)));
  }
  private HTTP.Response changePassword(  String username,  String oldPassword,  String newPassword){
    HTTP.RawPayload passwordChange=quotedJson("{'password': '" + newPassword + "'}");
    return requestWithHeaders(username,oldPassword).POST(passwordURL(username),passwordChange);
  }
  private HTTP.Response runQuery(  String username,  String password){
    return runQuery(requestWithHeaders(username,password));
  }
  private HTTP.Response runQuery(  HTTP.Builder requestBuilder){
    HTTP.RawPayload statements=quotedJson("{'statements': [{'statement': 'RETURN 42'}]}");
    return requestBuilder.POST(txCommitURL(),statements);
  }
  private static HTTP.Builder requestWithHeaders(  String username,  String password){
    return HTTP.withBasicAuth(username,password).withHeaders(HttpHeaders.ACCEPT,"application/json; charset=UTF-8",HttpHeaders.CONTENT_TYPE,"application/json");
  }
  private static void assertCorsHeaderPresent(  HTTP.Response response){
    assertCorsHeaderEquals(response,"*");
  }
  private static void assertCorsHeaderEquals(  HTTP.Response response,  String origin){
    assertEquals(origin,response.header(ACCESS_CONTROL_ALLOW_ORIGIN));
  }
}
