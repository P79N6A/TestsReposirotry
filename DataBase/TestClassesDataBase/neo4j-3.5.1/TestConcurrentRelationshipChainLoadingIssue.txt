/** 
 * This isn't a deterministic test, but instead tries to trigger a race condition for a couple of seconds. The original issues is mostly seen immediately, but after a fix is in this test will take the full amount of seconds unfortunately.
 */
public class TestConcurrentRelationshipChainLoadingIssue {
  private final int relCount=2;
  @Test public void tryToTriggerRelationshipLoadingStoppingMidWay() throws Throwable {
    tryToTriggerRelationshipLoadingStoppingMidWay(50);
  }
  @Test public void tryToTriggerRelationshipLoadingStoppingMidWayForDenseNodeRepresentation() throws Throwable {
    tryToTriggerRelationshipLoadingStoppingMidWay(1);
  }
  private void tryToTriggerRelationshipLoadingStoppingMidWay(  int denseNodeThreshold) throws Throwable {
    GraphDatabaseAPI db=(GraphDatabaseAPI)new TestGraphDatabaseFactory().newImpermanentDatabaseBuilder().setConfig(dense_node_threshold,"" + denseNodeThreshold).newGraphDatabase();
    Node node=createNodeWithRelationships(db);
    checkStateToHelpDiagnoseFlakyTest(db,node);
    long end=currentTimeMillis() + SECONDS.toMillis(5);
    int iterations=0;
    while (currentTimeMillis() < end && iterations < 100) {
      tryOnce(db,node);
      iterations++;
    }
    db.shutdown();
  }
  private void checkStateToHelpDiagnoseFlakyTest(  GraphDatabaseAPI db,  Node node){
    loadNode(db,node);
    loadNode(db,node);
  }
  private void loadNode(  GraphDatabaseAPI db,  Node node){
    try (Transaction ignored=db.beginTx()){
      Iterables.count(node.getRelationships());
    }
   }
  private void tryOnce(  final GraphDatabaseAPI db,  final Node node) throws Throwable {
    Race race=new Race().withRandomStartDelays();
    race.addContestants(Runtime.getRuntime().availableProcessors(),() -> {
      try (Transaction ignored=db.beginTx()){
        assertEquals(relCount,count(node.getRelationships()));
      }
     }
);
    race.go();
  }
  private Node createNodeWithRelationships(  GraphDatabaseAPI db){
    Node node;
    try (Transaction tx=db.beginTx()){
      node=db.createNode();
      for (int i=0; i < relCount / 2; i++) {
        node.createRelationshipTo(node,MyRelTypes.TEST);
      }
      for (int i=0; i < relCount / 2; i++) {
        node.createRelationshipTo(node,MyRelTypes.TEST2);
      }
      tx.success();
      return node;
    }
   }
}
