public abstract static class NonUnique<K extends NativeIndexKey<K>,V extends NativeIndexValue> extends NativeIndexPopulatorTests<K,V> {
  @Test public void addShouldApplyDuplicateValues() throws Exception {
    populator.create();
    IndexEntryUpdate<IndexDescriptor>[] updates=valueCreatorUtil.someUpdatesWithDuplicateValues(random);
    populator.add(Arrays.asList(updates));
    populator.close(true);
    verifyUpdates(updates);
  }
  @Test public void updaterShouldApplyDuplicateValues() throws Exception {
    populator.create();
    IndexEntryUpdate<IndexDescriptor>[] updates=valueCreatorUtil.someUpdatesWithDuplicateValues(random);
    try (IndexUpdater updater=populator.newPopulatingUpdater(null_property_accessor)){
      for (      IndexEntryUpdate<IndexDescriptor> update : updates) {
        updater.process(update);
      }
    }
     populator.close(true);
    verifyUpdates(updates);
  }
  @Test public void shouldSampleUpdatesIfConfiguredForOnlineSampling() throws Exception {
    populator.create();
    IndexEntryUpdate<IndexDescriptor>[] scanUpdates=valueCreatorUtil.someUpdates(random);
    populator.add(Arrays.asList(scanUpdates));
    Iterator<IndexEntryUpdate<IndexDescriptor>> generator=valueCreatorUtil.randomUpdateGenerator(random);
    Object[] updates=new Object[5];
    updates[0]=generator.next().values()[0].asObject();
    updates[1]=generator.next().values()[0].asObject();
    updates[2]=updates[1];
    updates[3]=generator.next().values()[0].asObject();
    updates[4]=updates[3];
    try (IndexUpdater updater=populator.newPopulatingUpdater(null_property_accessor)){
      long nodeId=1000;
      for (      Object value : updates) {
        IndexEntryUpdate<IndexDescriptor> update=valueCreatorUtil.add(nodeId++,Values.of(value));
        updater.process(update);
      }
    }
     IndexSample sample=populator.sampleResult();
    Object[] allValues=Arrays.copyOf(updates,updates.length + scanUpdates.length);
    System.arraycopy(asValues(scanUpdates),0,allValues,updates.length,scanUpdates.length);
    assertEquals(updates.length + scanUpdates.length,sample.sampleSize());
    assertEquals(countUniqueValues(allValues),sample.uniqueValues());
    assertEquals(updates.length + scanUpdates.length,sample.indexSize());
    populator.close(true);
  }
  private Object[] asValues(  IndexEntryUpdate<IndexDescriptor>[] updates){
    Object[] values=new Object[updates.length];
    for (int i=0; i < updates.length; i++) {
      values[i]=updates[i].values()[0].asObject();
    }
    return values;
  }
}
