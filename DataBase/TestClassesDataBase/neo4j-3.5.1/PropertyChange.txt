static class PropertyChange {
  final long entityId;
  final List<StorageProperty> added;
  final List<StorageProperty> changed;
  final IntList removed;
  PropertyChange(  long entityId,  Collection<StorageProperty> added,  Collection<StorageProperty> changed,  IntIterable removed){
    this.entityId=entityId;
    this.added=Iterables.asList(added);
    this.changed=Iterables.asList(changed);
    this.removed=removed.toList();
  }
  PropertyChange(  long entityId,  Iterator<StorageProperty> added,  Iterator<StorageProperty> changed,  IntIterable removed){
    this.entityId=entityId;
    this.added=Iterators.asList(added);
    this.changed=Iterators.asList(changed);
    this.removed=removed.toList();
  }
  @Override public String toString(){
    return "PropertyChange{" + "entityId=" + entityId + ", added="+ added+ ", changed="+ changed+ ", removed="+ removed+ '}';
  }
  @Override public boolean equals(  Object o){
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyChange that=(PropertyChange)o;
    if (entityId != that.entityId) {
      return false;
    }
    if (!added.equals(that.added)) {
      return false;
    }
    if (!changed.equals(that.changed)) {
      return false;
    }
    return removed.equals(that.removed);
  }
  @Override public int hashCode(){
    int result=(int)(entityId ^ (entityId >>> 32));
    result=31 * result + added.hashCode();
    result=31 * result + changed.hashCode();
    result=31 * result + removed.hashCode();
    return result;
  }
}
