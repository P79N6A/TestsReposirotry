private static class TransactionalContextWrapper implements TransactionalContext {
  private final TransactionalContext delegate;
  private final List<LockOperationRecord> recordedLocks;
  private final LockOperationListener[] listeners;
  private RecordingLocks recordingLocks;
  private TransactionalContextWrapper(  TransactionalContext delegate,  LockOperationListener... listeners){
    this(delegate,new ArrayList<>(),listeners);
  }
  private TransactionalContextWrapper(  TransactionalContext delegate,  List<LockOperationRecord> recordedLocks,  LockOperationListener... listeners){
    this.delegate=delegate;
    this.recordedLocks=recordedLocks;
    this.listeners=listeners;
  }
  @Override public ExecutingQuery executingQuery(){
    return delegate.executingQuery();
  }
  @Override public DbmsOperations dbmsOperations(){
    return delegate.dbmsOperations();
  }
  @Override public KernelTransaction kernelTransaction(){
    if (recordingLocks == null) {
      recordingLocks=new RecordingLocks(delegate.kernelTransaction().locks(),asList(listeners),recordedLocks);
    }
    return new DelegatingTransaction(delegate.kernelTransaction(),recordingLocks);
  }
  @Override public boolean isTopLevelTx(){
    return delegate.isTopLevelTx();
  }
  @Override public void close(  boolean success){
    delegate.close(success);
  }
  @Override public void terminate(){
    delegate.terminate();
  }
  @Override public void commitAndRestartTx(){
    delegate.commitAndRestartTx();
  }
  @Override public void cleanForReuse(){
    delegate.cleanForReuse();
  }
  @Override public TransactionalContext getOrBeginNewIfClosed(){
    if (isOpen()) {
      return this;
    }
 else {
      return new TransactionalContextWrapper(delegate.getOrBeginNewIfClosed(),recordedLocks,listeners);
    }
  }
  @Override public boolean isOpen(){
    return delegate.isOpen();
  }
  @Override public GraphDatabaseQueryService graph(){
    return delegate.graph();
  }
  @Override public Statement statement(){
    return delegate.statement();
  }
  @Override public void check(){
    delegate.check();
  }
  @Override public TxStateHolder stateView(){
    return delegate.stateView();
  }
  @Override public Lock acquireWriteLock(  PropertyContainer p){
    return delegate.acquireWriteLock(p);
  }
  @Override public SecurityContext securityContext(){
    return delegate.securityContext();
  }
  @Override public StatisticProvider kernelStatisticProvider(){
    return delegate.kernelStatisticProvider();
  }
  @Override public KernelTransaction.Revertable restrictCurrentTransaction(  SecurityContext context){
    return delegate.restrictCurrentTransaction(context);
  }
  @Override public ResourceTracker resourceTracker(){
    return delegate.resourceTracker();
  }
}
