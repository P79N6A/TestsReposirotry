public class NeoServerJAXRSIT extends ExclusiveServerTestBase {
  private NeoServer server;
  @Before public void cleanTheDatabase(){
    ServerHelper.cleanTheDatabase(server);
  }
  @After public void stopServer(){
    if (server != null) {
      server.stop();
    }
  }
  @Test public void shouldMakeJAXRSClassesAvailableViaHTTP() throws Exception {
    CommunityServerBuilder builder=CommunityServerBuilder.server();
    server=ServerHelper.createNonPersistentServer(builder);
    FunctionalTestHelper functionalTestHelper=new FunctionalTestHelper(server);
    JaxRsResponse response=new RestRequest().get(functionalTestHelper.managementUri());
    assertEquals(200,response.getStatus());
    response.close();
  }
  @Test public void shouldLoadThirdPartyJaxRsClasses() throws Exception {
    server=CommunityServerBuilder.serverOnRandomPorts().withThirdPartyJaxRsPackage("org.dummy.web.service",DummyThirdPartyWebService.DUMMY_WEB_SERVICE_MOUNT_POINT).usingDataDir(folder.directory(name.getMethodName()).getAbsolutePath()).build();
    server.start();
    URI thirdPartyServiceUri=new URI(server.baseUri().toString() + DummyThirdPartyWebService.DUMMY_WEB_SERVICE_MOUNT_POINT).normalize();
    String response=CLIENT.resource(thirdPartyServiceUri.toString()).get(String.class);
    assertEquals("hello",response);
    int nodesCreated=createSimpleDatabase(server.getDatabase().getGraph());
    thirdPartyServiceUri=new URI(server.baseUri().toString() + DummyThirdPartyWebService.DUMMY_WEB_SERVICE_MOUNT_POINT + "/inject-test").normalize();
    response=CLIENT.resource(thirdPartyServiceUri.toString()).get(String.class);
    assertEquals(String.valueOf(nodesCreated),response);
  }
  private int createSimpleDatabase(  final GraphDatabaseAPI graph){
    final int numberOfNodes=10;
    new Transactor(graph,() -> {
      for (int i=0; i < numberOfNodes; i++) {
        graph.createNode();
      }
      for (      Node n1 : graph.getAllNodes()) {
        for (        Node n2 : graph.getAllNodes()) {
          if (n1.equals(n2)) {
            continue;
          }
          n1.createRelationshipTo(n2,RelationshipType.withName("REL"));
        }
      }
    }
).execute();
    return numberOfNodes;
  }
}
