public class PluginFunctionalTestHelper {
  private PluginFunctionalTestHelper(){
  }
  public static Map<String,Object> makeGet(  String url) throws JsonParseException {
    JaxRsResponse response=new RestRequest().get(url);
    String body=getResponseText(response);
    response.close();
    return deserializeMap(body);
  }
  protected static Map<String,Object> deserializeMap(  final String body) throws JsonParseException {
    Map<String,Object> result=JsonHelper.jsonToMap(body);
    assertThat(result,CoreMatchers.is(not(nullValue())));
    return result;
  }
  private static List<Map<String,Object>> deserializeList(  final String body) throws JsonParseException {
    List<Map<String,Object>> result=JsonHelper.jsonToList(body);
    assertThat(result,CoreMatchers.is(not(nullValue())));
    return result;
  }
  protected static String getResponseText(  final JaxRsResponse response){
    String body=response.getEntity();
    assertEquals(body,200,response.getStatus());
    return body;
  }
  protected static Map<String,Object> makePostMap(  String url) throws JsonParseException {
    JaxRsResponse response=new RestRequest().post(url,null);
    String body=getResponseText(response);
    response.close();
    return deserializeMap(body);
  }
  protected static Map<String,Object> makePostMap(  String url,  Map<String,Object> params) throws JsonParseException {
    String json=JsonHelper.createJsonFrom(params);
    JaxRsResponse response=new RestRequest().post(url,json,MediaType.APPLICATION_JSON_TYPE);
    String body=getResponseText(response);
    response.close();
    return deserializeMap(body);
  }
  protected static List<Map<String,Object>> makePostList(  String url) throws JsonParseException {
    JaxRsResponse response=new RestRequest().post(url,null);
    String body=getResponseText(response);
    response.close();
    return deserializeList(body);
  }
  protected static List<Map<String,Object>> makePostList(  String url,  Map<String,Object> params) throws JsonParseException {
    String json=JsonHelper.createJsonFrom(params);
    JaxRsResponse response=new RestRequest().post(url,json);
    String body=getResponseText(response);
    response.close();
    return deserializeList(body);
  }
public static class RegExp extends TypeSafeMatcher<String> {
    enum MatchType {    end("ends with"){
      @Override boolean match(      String pattern,      String string){
        return string.endsWith(pattern);
      }
    }
,     matches{
      @Override boolean match(      String pattern,      String string){
        return string.matches(pattern);
      }
    }
;     private final String description;
    abstract boolean match(    String pattern,    String string);
    MatchType(){
      this.description=name();
    }
    MatchType(    String description){
      this.description=description;
    }
}
    private final String pattern;
    private String string;
    private final MatchType type;
    RegExp(    String regexp,    MatchType type){
      this.pattern=regexp;
      this.type=type;
    }
    @Factory public static Matcher<String> endsWith(    String pattern){
      return new RegExp(pattern,MatchType.end);
    }
    @Override public boolean matchesSafely(    String string){
      this.string=string;
      return type.match(pattern,string);
    }
    @Override public void describeTo(    Description descr){
      descr.appendText("expected something that ").appendText(type.description).appendText(" [").appendText(pattern).appendText("] but got [").appendText(string).appendText("]");
    }
  }
}
